1
2
0
2

p
e
S
2
2

]

C
D
.
s
c
[

1
v
7
8
7
0
1
.
9
0
1
2
:
v
i
X
r
a

1

DHT-based Communications Survey:
Architectures and Use Cases

Yahya Hassanzadeh-Nazarabadi∗§, Member, IEEE, Sanaz Taheri-Boshrooyeh∗¶, Member, IEEE
Safa Otoum ‡, Member, IEEE, Seyhan Ucar†, Member, IEEE, ¨Oznur ¨Ozkasap∗, Senior Member, IEEE
∗Department of Computer Engineering, Koc¸ University, ˙Istanbul, Turkey
§DapperLabs, Vancouver, Canada
¶Status Research and Development, Singapore
‡College of Technological Innovation (CTI), Zayed University, UAE
†InfoTech Labs, Toyota Motor North America R&D, Mountain View, CA, USA
{yhassanzadeh13, staheri14, oozkasap}@ku.edu.tr, safa.otoum@zu.ac.ae, seyhan.ucar@toyota.com

Abstract—Several distributed system paradigms utilize Distributed Hash Tables (DHTs) to realize structured peer-to-peer (P2P)
overlays. DHT structures arise as the most commonly used organizations for peers that can efﬁciently perform crucial services such as
data storage, replication, query resolution, and load balancing. With the advances in various distributed system technologies, novel and
efﬁcient solutions based on DHTs emerge and play critical roles in system design. DHT-based methods and communications have
been proposed to address challenges such as scalability, availability, reliability and performance, by considering unique characteristics
of these technologies. In this article, we propose a classiﬁcation of the state-of-the-art DHT-based methods focusing on their system
architecture, communication, routing and technological aspects across various system domains. To the best of our knowledge, there is
no comprehensive survey on DHT-based applications from system architecture and communication perspectives that spans various
domains of recent distributed system technologies. We investigate the recently emerged DHT-based solutions in the seven key
domains of edge and fog computing, cloud computing, blockchain, the Internet of Things (IoT), Online Social Networks (OSNs), Mobile
Ad Hoc Networks (MANETs), and Vehicular Ad Hoc Networks (VANETs). In contrast to the existing surveys, our study goes beyond the
commonly known DHT methods such as storage, routing, and lookup, and identiﬁes diverse DHT-based solutions including but not
limited to aggregation, task scheduling, resource management and discovery, clustering and group management, federation, data
dependency management, and data transmission. Furthermore, we identify open problems and discuss future research guidelines for
each domain.

Index Terms—Distributed Hash Tables, DHT, edge and fog computing, cloud computing, blockchain, the Internet of Things, online
social networks, mobile ad hoc networks, vehicular ad hoc networks.
(cid:70)

1 INTRODUCTION

Distributed Hash Tables (DHT)s [1] are distributed key-
value store architectures that realize the structured peer-to-
peer (P2P) overlay paradigm. In such systems with n nodes,
each node (i.e., process) maintains communication channels
to O(log n) other nodes by following the DHT protocol,
which shapes a connected distributed overlay graph of
nodes. By utilizing this overlay graph, nodes can main-
tain addressable entities (e.g., data items or ﬁles) on DHT
overlay graph, which resembles distributed put query. The
nodes can also query for each other and each others’ entities,
which resembles distributed get query. Typically in DHTs,
such distributed put and get queries are performed with a
message complexity of O(log n). Common examples of DHT
overlays are Chord [1], Pastry [2], and Kademlia [3]. Due to
their scalability, fault tolerance, fast searching, correctness
under concurrency, and load balancing, DHTs are widely
used in various advanced distributed system technologies
such as edge and fog computing [4]–[9], cloud computing

This work has been submitted to the IEEE for possible publication. Copyright
may be transferred without notice, after which this version may no longer be
accessible.

[10]–[21], blockchains [22]–[36], Internet of Things (IoT)
[37]–[48], Online Social Networks (OSNs) [49]–[57], Mobile
Ad Hoc Networks (MANETs) [58]–[67], and Vehicular Ad
Hoc Networks (VANETs) [68]–[78].

The cloud computing paradigm offers on-demand avail-
ability of the computing and storage resources as services
for the users [79]–[82]. A cloud computing system is typi-
cally comprised of a large-scale network of connected server
nodes distributed across multiple data centers. The cloud
computing systems are utilized by users through delegating
their computing and storage tasks, without involving users
for direct active management. DHTs are widely exploited
in cloud computing systems to provide decentralized task
scheduling [10], content aggregation [12], resource manage-
ment [13], [14], object storage [15], [16], [18]–[20], and load
balancing [11].

In contrast to the cloud computing paradigm that spins
around task delegation to remote data centers, the edge and
fog computing paradigm aims at moving the computation
and storage resources from the cloud data centers closer to
the end-users [83]–[85]. Processing data closer to the end-
user is carried out with lower latency and higher efﬁciency
by saving network bandwidth [83]. Hence, the edge and fog

 
 
 
 
 
 
computing paradigm provides a more adaptable infrastruc-
ture for supporting the new emerging applications with la-
tency requirements below what can be offered by the cloud
computing systems, e.g., the 5th Generation (5G)-based
mobile network applications. The edge and fog computing
solutions beneﬁt from DHTs as a scalable distributed object
storage platform [4]–[7] as well as a distributed resource
discovery overlay [8], [9].

The blockchains are replicated state machines realizing an
append-only database that establishes trust among a set of
trustless participants, and enables a decentralized compu-
tation platform [86], [87]. DHTs are adopted in blockchain-
supported systems to augment data integrity [22]–[24], data
privacy [88], [89], trustworthy [25], [26], [34], load balancing
[27]–[29], storage efﬁciency [30]–[33], [90]–[92], and data
management [34]–[36].

The Internet-of-Things (IoT) is deﬁned as the network
of embedded connectors with other devices such as sen-
sors and personal assistants that enables connecting and
exchanging data with other devices and systems over the
Internet [93], [94]. DHTs are implemented in the IoT in-
frastructures to support scalability [37]–[42], and service
discovery [43]–[48].

The Online Social Networks (OSNs) are online platforms
which connect people through social relationships with each
other based on their personal or career interests, activities,
backgrounds or real-life connections [95]–[98]. In the context
of OSNs, the DHTs are utilized to support distributed direc-
tory services [49], [50], spam protection [51], [52], routing
[53]–[56], and data dependency management [57].

The Mobile Ad Hoc Networks (MANETs) are decentralized
networks of mobile devices that do not rely on a pre-existing
infrastructure (e.g., routers and access points). Rather, the
network is established on-ﬂy by nodes routing data for each
other through forwarding to their directly connected nodes
based on the routing algorithm in use [99]. In the context
of MANETs, the DHTs are commonly utilized for efﬁcient
routing [58]–[61], data transmission [62], [63], handling the
dynamic topology [64]–[66], and mitigation of the trafﬁc
overhead [67].

The Vehicular Ad Hoc Networks (VANETs) realize the con-
cept of MANETs in the domain of vehicles through vehicle-
to-vehicle and vehicle-to-roadside connections, which en-
ables relaying information among the vehicles, hence pro-
viding road safety, navigation, and other roadside services
[100]. In the context of VANETs the DHTs are typically
employed to provide service directory [68]–[72], scalable
routing [73]–[77], security and privacy [78]. For the different
levels of the hierarchy, vehicles use various communication
technologies to get beneﬁt from DHTs. Vehicle-to-Vehicle
(V2V) communication technologies (e.g., Dedicated Short
Range Communication) are used, and the DHT overlay
is cooperatively maintained among vehicles as the nodes.
Vehicles use short-range communication technologies to
communicate over the DHT. Vehicle-to-Infrastructure (V2I)
and/or Vehicle-to-Cloud-to-Vehicle (V2C2V) are used to up-
date the DHT at the edge level. The cloud/edge layer keeps
the DHT, and it provides an access interface so vehicles can
access and update the DHT accordingly.

Original Contributions and Novelties: To the best of
our knowledge this is the ﬁrst survey on state-of-the-art DHT-

2

based solutions in domains of edge, fog, and cloud computing,
blockchains, IoT, MANETs, VANETs, and OSNs from system
architecture, communication, routing, and technological perspec-
tives. We also survey recently published papers, most of
which have not been appeared yet in any relevant survey.
As we discuss subsequently in this section, in contrast to
the existing surveys in the various domains of distributed
systems, our study sheds light on the more advanced, less
recognized, and yet important capabilities empowered by
DHTs. Our taxonomy in this paper goes beyond the com-
monly known DHT methods such as storage, routing, and
lookup, and extracts more sophisticated and diverse DHT-
based solutions including but not limited to aggregation,
task scheduling, resource management and discovery, spam
protection, clustering and group management, federation,
data dependency management, data transmission, security,
and privacy. Furthermore, we identify open problems and
discuss future research guidelines for each distributed sys-
tem domain. Moreover, we present the principles behind
various types of DHTs in terms of their architecture, con-
struction and routing, covering the most well-known DHTs
(i.e., Chord [1], Kademlia [3], and Pastry [2]), as well as the
least surveyed ones (i.e., Skip Graph [101] and Cycloid [102]).
Related Works: To the best of our knowledge, there
is no comprehensive survey on DHT-based approaches
from system architecture, communication, and technological
perspectives that spans all the domains of edge, fog, and
cloud computing, blockchain, IoT, OSNs, MANETs, and
VANETs. Moreover, there is no existing survey study on
the DHT-based applications in any domains of edge [103],
fog [83]–[85], and cloud computing [80]–[82]. In the domain
of blockchain [104], [105], the only DHT-based work is
[106], which makes a cursory glance at the utilization of
DHT-based data storage functionality while scoping out
the aspects that we cover in this survey such as integrity,
privacy, trustworthy, load balancing, and data management.
In the context of IoT, the existing DHT-based surveys cover
features such as the routing and lookup process [93], and
the mobility management [94], while missing discussions
on DHT-based solutions for supporting scalability and
service discovery, which are covered in this survey. For
the OSNs, none of the existing surveys [95]–[98] adopt a
DHT-oriented perspective in their classiﬁcation, and solely
provide a partial study on DHTs as a distributed rout-
ing and storage management candidate among the other
OSN-based technologies, while leaving the aspects such as
spam protection, service discovery, and data dependency
management, that are covered in this survey. Considering
the domain of MANETs, the only existing DHT-based sur-
vey [99] studies routing protocols, without going further
in aspects that are covered by this survey such as data
transmission, dynamic topology management, and trafﬁc
overhead migration. Similarly, in the ﬁeld of VANETs, the
only existing DHT-based survey [100] presents utilization
of DHTs for distributed cluster management, yet leaving
other aspects that are covered by our survey, i.e., service
discovery, scalable routing, security, and privacy. Addition-
ally, these existing surveys lack a thorough investigation of
the DHT utilization challenges, open problems, and research
guidelines in their relative domains.

Paper Organization: The remainder of the paper is

organized as follows. In Section 2, we present the prin-
ciples behind various types of DHTs in terms of their
architecture, lookup table construction and routing. Based
on our taxonomy we survey the system models, methods,
applications and open problems of the DHT-based solutions
in the respective distributed system domains of edge and
fog computing (Section 3), cloud computing (Section 4),
blockchains (Section 5), IoT (Section 6), OSNs (Section 7),
MANETs (Section 8), and VANETs (Section 9). Section 10
presents the concluding remarks.

2 DHT OVERLAYS: A SYSTEM ARCHITECTURE

OVERVIEW

In this section, we present an architectural overview of the
most typical DHT overlays (i.e., Chord [1], Kademlia [3],
and Pastry [2]), as well as some of the least surveyed ones
(i.e., Skip Graph [101] and Cycloid [102]). We model a DHT
as a distributed key-value store of entities. In the context of
DHTs, we deﬁne entities as the processes running the DHT
software (i.e., DHT nodes) as well as the data objects they
maintain. Each entity is represented by a unique key, which
is named the identiﬁer of that entity. The identiﬁers of the
DHT nodes are determined by taking the collision-resistant
hash value [107] of their unique network (IP) address. While
the identiﬁers of the data objects are typically determined
using the collision-resistant hash value of their content.
In practice, a collision-resistant hash function with a large
identiﬁer space is used to generate the identiﬁers, e.g., SHA-
1 with 160-bits identiﬁer size. Having the hash function
collision-resistant guarantees a one-to-one mapping from
the DHT nodes as well as the data objects to their identiﬁers
with a very high probability. In a DHT overlay with n nodes,
a DHT node commonly maintains connections to O(log n)
other nodes in a table, which is called its lookup table. Remote
Procedure Call (RPC) [79] is a typical communication proto-
col between DHT nodes, however, TCP and UDP protocols
[108] are also utilized in some architectures, e.g., Kademlia
[3] nodes utilize UDP protocol to communicate with their
lookup table neighbors. The lookup table neighbor rela-
tionship forms a connected graph of processes, which is
called a DHT overlay. The DHT overlay enables DHT nodes
to store and maintain data objects in the DHT key-value
store, as well as to efﬁciently search for each other and
each others’ data objects across the overlay. Both operations
are done in a fully distributed manner within a message
complexity of O(log n). Storing a data object in a DHT is
a distributed put operation that lays the data object in the
DHT node that has the closest identiﬁer to it. The identiﬁer
closeness is domain-speciﬁc for each DHT and is deﬁned in
the identiﬁer space of that DHT. We touch on this topic in
more depth in the rest of this section. A lookup operation
corresponds to a distributed get operation, which is initiated
by a lookup initiator node for a target identiﬁer. The target
identiﬁer can be the identiﬁer of a process or a data object.
As the result of a lookup operation, the lookup message is
routed collectively by the nodes on the lookup path from the
lookup initiator to the node with the closest identiﬁer to the
lookup target, which terminates the lookup and announces
itself as the lookup result back to the initiator. In the rest of
this section, we introduce an overview of the architecture

3

of different DHT types, their lookup table structure, and
their lookup operation. We skip details of the DHT overlays
construction as well as storing data objects on them for sake
of space and refer the interested readers to their original
papers. Also, in the rest of this section, we use the terms peer
and process interchangeably both referring to a DHT node.

2.1 Chord

Architecture: Utilizing consistent hashing with an m-bit
identiﬁer space, peers in Chord [1] are assigned random
identiﬁers ranging from 0 to 2m − 1 and organized in
a logical ring overlay structure. A data item with key d
on the Chord ring is stored at the peer with the smallest
identiﬁer p ≥ d, namely the successor of d. Thus, a peer’s
responsibility of data item keys ranges from the identiﬁer of
its predecessor peer plus 1 to its own identiﬁer. In general,
with k keys and n peers in a Chord system, each peer
stores O(k/n) keys (that is < c × k/n for some constant c)
providing load balancing in the distribution of data items
over the peers. Figure 1 shows an example Chord DHT
overlay with a 4-bit identiﬁer space (i.e., m=4), and 5 peers
where the peer identiﬁers are 2, 5, 8, 12, 15. For example,
successor of peer 2 is peer 5, and successor of peer 8 is peer
12. Peer 5 is responsible for data items with keys 3 and 4,
while peer 12 is responsible for data items with keys 9, 10,
and 11.

Lookup Table: The lookup table in Chord DHT is also
called the ﬁnger table. Each peer p maintains a ﬁnger table
F with at most m entries such that entry i (1 ≤ i ≤ m) of
F keeps the identiﬁer of the ﬁrst peer succeeding p by the
distance of at least 2i−1 in the identiﬁer space. That is, entry
i of peer p’s ﬁnger table F would be F [i] = successor(p +
2i−1). Figure 1 indicates example ﬁnger table of each peer in
the system where the number of entries in each ﬁnger table
is m=4.

Routing: If a peer with an identiﬁer of d exists in
Chord, the lookup operation for d (i.e., lookup(d)) returns its
network address. Otherwise, the lookup operation returns
the address of the successor of d in the Chord ring. The
latter case corresponds to looking up a data item, which
returns the address of the responsible peer for it. A peer p
that initiates lookup(d) forwards the message to the peer
in index j of its ﬁnger table with F [j] ≤ d < F [j + 1].
There are two exceptions though: (1) when p ≤ d < F [1],
the forwarding is done to the peer in index 1 of its ﬁnger
table, and (2) when d < F [i] , ∀i, the forwarding is done to
the peer in the largest index of the lookup table. The lookup
query resolution continues in this manner by each peer on
the lookup path forwarding the lookup message to the next
peer based on the ﬁnger table, until the lookup message
reaches the successor peer responsible for the lookup key
d. Since a peer has a minimum distance of 2j−1 to the j
index of its ﬁnger table, at each step of the routing process,
the distance between the lookup message and the lookup
target drops by a factor of at least 2, which resembles a
binary search in a decentralized fashion. Therefore, in a
Chord DHT with n nodes, the routing of a lookup message
takes a message and round complexity of O(log n). Figure
1 illustrates the steps of routing lookup(1) (solid arrows),

4

Fig. 2: The identiﬁer space in a Kademlia overlay with n = 16 nodes. Arrows
represent the lookup path for the target identiﬁer of 0010 that is instantiated by
node 1101.

Fig. 1: An example Chord DHT with m=4 and 5 peers. Peers are represented by
colored circles with their ﬁnger tables attached, while the data items are
represented by colored and white circles. Steps of resolving lookup(1) initiated
by peer 8 and lookup(13) initiated by peer 2 are indicated by solid and dash
arrows, respectively.
and lookup(13) (dash arrows) initiated by peer 8 and 2,
respectively.

its neighbor 0111 that has the longest common preﬁx to the
target (i.e., 1 bit common preﬁx). On receiving the lookup
message for 0010, the node 0111 forwards it to its neighbor
0011 which has the longest common preﬁx to the target (i.e.,
3 bits common preﬁx), and results in the lookup message
eventually reaches its target.

2.2 Kademlia
Architecture: In a system with n nodes, each Kademlia [3]
node is assigned an (cid:100)log n(cid:101)-bit identiﬁer and keeps a lookup
table of (cid:100)log n(cid:101) neighbors. The identiﬁer distance in Kadem-
lia is measured as the length of the common preﬁx, where
a longer common preﬁx corresponds to a shorter identiﬁer
distance in the identiﬁer space. As shown by Figure 2, the
identiﬁer space in Kademlia is typically illustrated as a
binary tree, where the leaves are the actual Kademlia nodes,
and the intermediate nodes are the identiﬁer sub-domains.
It is worth noting that such binary tree representation of
identiﬁer space in Kademlia is merely an abstraction, and
there is no real-world implication of such a centralized
binary tree. Rather, as we explain later in this subsection,
to establish a Kademlia overlay, it is sufﬁcient for each
Kademlia node to maintain connections to its lookup table
neighbors.
Lookup Table: In a Kademlia overlay of n nodes, each node
is assigned an (cid:100)log n(cid:101)-bit identiﬁer. Accordingly, for every
possible common preﬁx length x ∈ [0, (cid:100)log n(cid:101) − 1] bits, the
node keeps one lookup table neighbor with exactly x bits
common preﬁx length. In the example illustrated by Figure
2, the lookup table neighbors of node 1101 are shaded in
gray, which are 0111 (zero-bit common preﬁx), 1011 (one-bit
common preﬁx), 1111 (two-bits common preﬁx), and 1100
(three-bits common preﬁx).

Routing: Upon receiving a lookup message for a target
identiﬁer, the Kademlia node routes the message to its
lookup table neighbor with the longest common preﬁx in
its identiﬁer to the lookup target. Note that based on the
structure of the lookup table, each Kademlia node has more
closer neighbors in the identiﬁer space, than faraway ones.
Thus, on each step of routing, the lookup message gets
closer to the target identiﬁer in the identiﬁer space. Routing
a lookup message is terminated at a node if either it has
the lookup target identiﬁer, or none of its lookup table
neighbors have a closer identiﬁer to the target than the
node itself. The lookup path for the target identiﬁer 0010
initiated by node 1101 is illustrated by arrows in Figure 2.
The lookup initiator 1101 forwards the lookup message to

2.3 Pastry

Architecture: Pastry [2] has a similar ring architecture to
Chord [1]. However, the identiﬁers of nodes are commonly
represented as sequences of digits in the base b. A typical
choice of b in Pastry is 16, which represents the identiﬁers
in hexadecimal. The identiﬁer distance in a Pastry overlay
is gauged based on the common preﬁx length in the binary
representation, i.e., the longer the common preﬁx of two
identiﬁers are, the closer they are together in the identiﬁer
space.

Lookup Table: With the maximum number of n nodes in
the system, the lookup table of a Pastry node has (cid:100)logb n(cid:101)−1
rows and b columns. Figure 3 illustrates the lookup table of
a hypothetical Pastry node with the identiﬁer of 63AB in
a system where n = 10, 000 and b = 16. The lookup table
consists of (cid:100)log16 10000(cid:101) − 1 = 3 rows and 16 columns.
The rows are numbered top-down starting from 0, while the
columns are numbered left to right starting from 0 to F , each
representing a hexadecimal digit. As a general principle,
the lookup table neighbors at the row i all have exactly i
digits common preﬁx length in their identiﬁers with the
current node, while the i + 1th digit of their identiﬁer is
equal to the corresponding digit of their column (in base
b). As shown by the example of Figure 3, the lookup table
neighbors at the row 0 (i.e., the top-most row) have exactly
0-digit common preﬁx (that is no common preﬁx) with the
node 63AB itself. Since all the identiﬁers starting with 6
(i.e., 6...) have at least one digit common preﬁx with 63AB,
the column representing the identiﬁer preﬁx of 6 in the
row 0 of the lookup table of node 63AB is left empty.
Similarly, all the lookup table neighbors at the row 1 have
exactly 1-digit common preﬁx with the node 63AB itself,
while their second digit varies from 0 to F depending on
their corresponding column. Since all identiﬁers starting
with the preﬁx of 63 (i.e., 63..) have more than one digit
common preﬁx with 63AB, the column representing the
identiﬁer preﬁx of 63 in the row 1 of the lookup table of the
node 63AB is left empty. Finally, all lookup table neighbors
in row 2 (i.e., the bottom-most row) have exactly 2-digit

Fig. 3: The lookup table of a hypothetical Pastry node with the identiﬁer of
63AB in a system where n = 10, 000 and b = 16.

Fig. 4: A lookup example from node 63AB for the target identiﬁer EB3E.

common preﬁx of 63 with node 63AB, while their third
digit varies from 0 to F depending on their corresponding
column. Since, all identiﬁers starting with 63A (i.e., 63A.)
have more than two digits common preﬁx with 63AB, the
column representing the identiﬁer preﬁx of 63A in the row
2 of the lookup table of node 63AB is left empty.

Routing: Upon receiving a lookup message for a target
identiﬁer, a Pastry node routes the lookup message by
forwarding it to the lookup table neighbor that has the
longest common preﬁx with the lookup target. The lookup
terminates when a node on the lookup path lacks any neigh-
bor with a longer common preﬁx length to the lookup target
than itself. Based on the structure of lookup tables in the
Pastry, routing based on preﬁx guarantees that each node
on the lookup path has at least one digit longer common
preﬁx with the lookup target than the preceding node on the
path. An example lookup operation for the target identiﬁer
of EB39 from 63AB is represented by Figure 4, where at
each step of the lookup, the identiﬁer distance between the
node on the path and the target decreases by at least one
digit.

2.4 Skip Graphs
Architecture: A Skip Graph with n nodes has O(log n)
levels that are marked up starting from level 0. Each node

Fig. 5: An example Skip Graph routing overlay with 10 nodes and 4 levels. The
Skip Graph nodes are illustrated by squares with the numerical IDs enclosed
and name IDs beneath. The dashed rectangle groups all elements of the node
with a numerical ID of 71 together across all levels. The tick blue arrows show a
lookup example for the numerical ID of 8 that is initiated by node 71.

5

Fig. 6: Lookup table of node 71 in the Skip Graph overlay of Figure 5. Each
lookup table neighbor is represented by the tuple of (address, numerical ID,
name ID). In this representation, Axx is the (network) address of the node with
the numerical ID of xx.
of Skip Graph is identiﬁed by two identiﬁers; a numerical
ID and a name ID and has exactly one element at each level
[101], [109]. Numerical IDs are non-negative integers, and
the name IDs are binary strings of length O(log n) bits.
Figure 5 illustrates a Skip Graph DHT structure with 10
nodes and 4 levels. In this example, the elements of the Skip
Graph node (with a numerical ID of) 71 across all the levels
of Skip Graph are inscribed in a dashed rectangle.

Lookup Table: Figure 6 illustrates the lookup table struc-
ture of node 71 from the Skip Graph overlay example of
Figure 5. As shown by Figure 6, the lookup table of a Skip
Graph node always has two columns (i.e., left and right) and
as many rows as the number of the Skip Graph’s levels. The
lookup table neighbors of a node at the row i are the left
and right nodes it is connected to at the level i of the Skip
Graph. A lookup table neighbor is represented by the tuple
of (address, numerical ID, name ID). For example, the left
neighbor of node 71 at the level 2 of the Skip Graph of Figure
5 is node 41. This left neighbor is maintained at the row
number 2 of the lookup table of node 71 as (A41, 41, 1010)
tuple, where A41 is its network address.

Routing: In Skip Graphs,

the lookup messages are
routed either based on the name IDs of the nodes [19]
or their numerical IDs [101]. As the result of the lookup
operation, the lookup message is routed from the initiator to
the nodes that hold the most similar identiﬁer to the lookup
target. In the context of lookup for a target name ID, the
most similar identiﬁer is the one with the longest common
preﬁx. For example in Figure 5, a lookup message for the
target name ID of 0010 reaches node 8 that holds the target
name ID. Similarly, a lookup for the target name ID of 0101
stops at node 45. Here, the node 45 has the longest common
preﬁx of 3 bits with the target name ID (i.e., both the target
name ID 0101 and 0100 that is the name ID of node 45 start
with 3 bits common preﬁx of 010). In the context of a lookup
for a target numerical ID, the most similar numerical ID is
the greatest numerical ID that is less than or equal to the
target numerical ID. For example in Figure 5, a lookup for
the target numerical ID of 11 reaches node 11 that holds
the target numerical ID. Similarly, a lookup for the target
numerical ID of 70 reaches node 69 that holds the greatest
numerical ID in the Skip Graph overlay that is less than
the target numerical ID of 70. The blue arrows in Figure 5
illustrate a lookup example based on the numerical ID that
is initiated by the node 71 for the target numerical ID of 8.
In this ﬁgure, the horizontal arrows reﬂect the exchanged
messages between the nodes in the underlying network.
The vertical arrows correspond to the internal computations
of the nodes during the lookup. The lookup for a target
numerical ID starts at the top-most level of the initiator.
Since the target numerical ID is less than the numerical ID
of the initiator (i.e., 8 < 71), the lookup proceeds in the left

direction.

2.5 Cycloid

Architecture: Cycloid [102] is a constant-degree DHT that
resolves lookups with the message complexity of O(d)
where n = d · 2d, and n is the maximum number of nodes
in the system. This is in contrast to the typical DHTs that
resolve a lookup operation with the message complexity
of O(log n) [1]. The parameter d is called the dimension of
Cycloid overlay. Figure 7 shows an example of the Cycloid
overlay with d = 8. Cycloid has a two-tier overlay: a larger
ring with d nodes at tier one, where each node represents
a local cycle of size 2d nodes at the second tier, resulting in
d · 2d nodes overall. A node identiﬁer in the Cycloid is an
ordered pair of two indices, i.e., (cyclic index, cubical index).
The cubical index is an integer in the range of [0, 2d − 1]
that is commonly represented in d bits as ad−1 · · · a0, and
determines the second-tier local cycle that the node belongs
to. As shown by Figure 7 all nodes with the same cubical
index belong to the same local cycle on the second-tier.
The cyclic index is commonly represented as an integer
k ∈ [0, d − 1], which determines the position of the node
within its local cycle. Within each local cycle, the node with
the largest cyclic index is called the primary node, and rep-
resents its local cycle on the ﬁrst-tier ring. As a convention,
the identiﬁer of a peer in Cycloid is generated by taking
the consistent hashing of its (IP) address. The identiﬁer of
a data object is computed by taking the hash value of its
content. For a given hash value h, the Cycloid identiﬁer is
determined as (h%d, h
d ). A data object is maintained by the
peer with the closest identiﬁer to it. The identiﬁer distance
in Cycloid is measured as the common preﬁx length in
the cubical indices, i.e., the longer the common preﬁx is
the closer the identiﬁers are. In case cubical indices have
the same common preﬁx length, the absolute difference be-
tween their cyclic indices determines the identiﬁer distance.
For instance in Figure 7, (4, 101 − 1 − 1010) is closer to
(3, 101 − 1 − 1011) (i.e., 7-bits common preﬁx in cubical
index) than (4, 101 − 1 − 1100) (i.e., 5 bits common preﬁx
length). In Figure 7, the node (4, 101 − 1 − 1100) is the
primary node for the cycle that represents the cubical index
of 101 − 1 − 1100. As illustrated in this ﬁgure, for a certain
node in a Cycloid overlay, the cycle it belongs to is called
local cycle, the immediate cycles to its local cycle on the larger
ring are called the preceding and succeeding cycles, and any
other cycle than these three is called a remote cycle.

Lookup table: The lookup table of each node in Cycloid
has a constant size of 7 neighbors, which is independent
of the system size n. The lookup table is composed of one
cubical neighbor, two cyclic neighbors, and two outside
and two inside leaf set neighbors. For a node with the
identiﬁer of (k, ad−1 · · · a0), the cubical neighbor can be any
node with a cyclic index of (k − 1)%d that has an exact
d − k − 1 bits common preﬁx length in its cubical index. The
cyclic neighbors of the node are the ﬁrst larger and smaller
nodes (based on their cubical index) with the cyclic index
of (k − 1)%d, which have at least d − k bits common preﬁx
in their cubical index. The inside leaf set neighbors are the
preceding and succeeding nodes on its local cycle based
on their cyclic index. The outside leaf set neighbors are

6

Fig. 7: An example of a Cycloid overlay with 8 dimensions. The lookup table
neighbors of the primary node (4, 101 − 1 − 1010) are determined by arrows.
The decimal representation of cubical indices is shown next to them in red. x
means arbitrary bit value whereas other letters are arbitrary Cycloid indices.
the primary nodes of the preceding and succeeding remote
cycles. The lookup table neighbors of node (4, 101−1−1010)
in Figure 7 are colored based on their type.

Routing: The principal rule in routing a lookup message
in Cycloid is to forward it to the lookup table neighbor
that has the closest identiﬁer to the lookup target. If the
Cycloid node itself has the closest identiﬁer to the lookup
target than all of its lookup table neighbors, it terminates
the lookup and announces itself as the lookup result to
the lookup initiator. If both the Cycloid node and all its
neighbors have the same identiﬁer distance to the lookup
target, the node forwards the lookup message to one of its
outside leaf set neighbors aiming at the lookup message is
circulated around till it reaches a cycle that is closer to it on
the identiﬁer space. An example of routing in a hypothetical
4-dimensional Cycloid DHT is illustrated in Figure 8, where
the node (0, 0100) initiates a lookup for the target identiﬁer
of (2, 1111). Both the lookup initiator and all its lookup table
neighbors have the same identiﬁer distance to the lookup
target (i.e., 0-bit common preﬁx in cubical index). Hence,
the lookup message is forwarded to one of the outside
leaf set neighbors for circulation, i.e., to (3, 0010). Upon
receiving the lookup message, node (3, 0010) forwards it
to its lookup table neighbor (2, 1010) which has the closest
identiﬁer to the lookup target among its other neighbors,
i.e., 1-bit common preﬁx length in the cubical index. The
lookup message is then forwarded by node (2, 1010) to its
closest neighbor to the lookup target, i.e., node (1, 1110) that
has 3-bit common preﬁx in its cubical index to the lookup
target. On receiving the lookup message for (2, 1111), node
(1, 1110) forwards it to its lookup table neighbor (3, 1111)
that has the maximum common preﬁx length of 4-bits to the
lookup target. The lookup message is ﬁnally routed to the
target by node (3, 1111) that resides on the same cycle as
the target.

3 EDGE AND FOG COMPUTING

3.1 System Model

In the edge and fog computing paradigm, processing and
storage power is distributed among the resources (e.g.,
routers) located closer to the end-users in the interest of sav-
ing bandwidth and boosting response time. This is in con-

7

Fig. 8: An example of routing lookup message (2, 1111) initiated by (0, 0100) in a hypothetical Cycloid DHT.

trast with the traditional cloud computing paradigm, which
concerns with consolidating the computation and storage
power into a powerful and centralized data center that is
normally distant from the users. Hence, the computation of
raw data in the edge and fog computing is done closer to
its origin, which is in contrast to the remote data centers in
cloud computing. This migration of resources towards the
end-users in the edge and fog computing paradigm results
in a faster response time and higher throughput [110].

The primary difference between the edge computing
system and the fog computing systems is the placement of
resources in the network. The edge computing systems aim
at performing the computations on the edge devices close
to the source of data [111], e.g., routers and base stations.
On the other hand, the fog computing systems act as the
midpoint processing of data by processing the aggregated
data from the edge devices at the fog nodes [112]. Compared
to the edge nodes that are generally directly connected to
the source devices (i.e., the users), the fog nodes are more
powerful nodes that are located distant from the source
devices. However, by lying between the edge devices and
the cloud data center, the fog computing nodes provide
more decentralization and move the processing and storage
power at replicated nodes closer to the edge devices. Figure
9 illustrates the hierarchical organization in the edge and
fog computing paradigm.

Table 1 summarizes the DHT-based edge and fog com-
puting solutions that we survey in the rest of this section.
In this table, the Type column presents whether the solution
contributes to the infrastructure of the edge and fog comput-
ing systems, or enables an edge- or fog-based application.
The Nodes column refers to the primary representation of
the nodes once a DHT overlay of physical devices (e.g.,
servers) is shaped. Also, the Identiﬁers column represents
the (unique) attribute of the DHT nodes that is used as
the input to a collision-resistant hash function [107] for
generating their unique identiﬁers. The DHT Utilization
column represents the primary purpose of DHT utilization
in the solution. The Domain column represents how the DHT
nodes are controlled by the administrative domain(s). In
a centralized solution, all nodes are managed by a single
monolith administrative domain. In a distributed solution,
nodes are managed by several agents all belonging to the
same administrative domain. In a decentralized solution,
the nodes are partitioned among several independent ad-
ministrative domains, where each domain controls its subset
of nodes.

Fig. 9: An overview of system model in edge and fog computing paradigm.

3.2 DHT-Based Infrastructure Solutions

3.2.1 Routing Overlays

To minimize the energy consumption and response time in
the resource heterogeneous edge computing infrastructures,
SA-Chord [113] provides a two-tier routing overlay of peers
and super-peers. The peers are assumed as the edge com-
puting resource-constraint devices with a low energy level
and limited bandwidth. These regular peers only send and
receive messages without participating in the routing, which
preserves their energy level to last longer in the system.
On the other hand, the super-peers are strong peers with
higher energy levels and bandwidth. The super-peers can
last longer in the system, and hence help the overlay with
routing the queries at a higher speed. The core routing
functionality in SA-Chord is established over the super-
peers, which route queries between each other as well as
the regular peers. An example of an SA-Chord system with
4 super-peers and 6 peers is shown in Figure 10. Each peer
is assigned to the super-peer that immediately succeeds it
on the identiﬁer space, i.e., the super-peer with the smallest
identiﬁer that is greater than the peer’s identiﬁer. In the
example of Figure 10, the peers 5 and 7 are assigned to the
super-peer 8 that immediately succeeds them on the iden-
tiﬁer space, i.e., 8 is the super-peer with the smallest iden-
tiﬁer greater than both 5 and 7. The regular peers should
only know their corresponding super-peer. The super-peers
establish a DHT-based routing overlay among themselves,
where each super-peer maintains a routing table of a subset
of other super-peers based on the Chord protocol [1]. The
inter-peer communications are routed through the super-
peers. For example, the trafﬁc of communications between
peer 5 and 7 in Figure 10 is handled via their shared super-
peer 8. Similarly, as shown by the red line, the lookup query
of peer 14 for peer 5 is submitted to its connected super-peer
1, and is routed based on Chord protocol through super-
peer 8 to the peer 5.

8

Nodes
Resources

Type DHT
Solution
Inf
SA-Chord [113]
Inf
GRED [114]
EdgeKV [7]
Inf
Access Control Management [6] App Chord Access Control Lists
Service Discovery [9]
Resource Discovery [8]
Resource Management [5]
Task Management [4]

Identiﬁers
-
Centralized
Delaunay Triangular Object Storage
Decentralized
Object Storage
Content
Decentralized
Object Storage
-
Routing Overlay Decentralized
Content
App General Services
Routing Overlay Decentralized
Attribute Values
App General Resources
Decentralized
Object Storage
App General Data Objects
Content
Distributed
Object Storage
App General Computation Results Content

Chord
General SDN Switches
Chord

DHT Utilization Domain
Routing Overlay Decentralized

Super Peers

TABLE 1: A summary of DHT-based solutions in Edge/Fog computing. In this table Inf and App are abbreviations for Infrastructure, and Application, respectively.

through their assigned super-peer. A read or write query for
a data object is submitted by the user to the DHT overlay
of super-peers. The query is then routed by the super-peers
to the corresponding group of edge servers responsible for
that key.

The edge servers of a group form a replicated state
machine [116] of key-value pairs assigned to that group, by
utilizing the Raft consensus protocol [117] for writing on the
keys. Hence, a write request routed to the group is processed
through a consensus and is written on all edge servers of
that group, which results in a consistent storage state among
all edge servers of the group. Due to this consistent state, a
read request for a key can be handled by any of the edge
servers in that group. Since all edge servers keep the same
state of data objects, failing some does not make the data
objects unavailable, which provides a fault-tolerant storage.

3.3 DHT Applications in Edge/Fog Computing

3.3.1 Access Control Management

Intelligent Transport System (ITS) is deﬁned as the inte-
gration of communication, control, and processing of infor-
mation to the transportation systems [6]. An ITS provides
a set of resources (e.g., computation and storage power)
for the users, which facilitates their transportation in terms
of time and cost. To provide a ﬁne-grained, scalable, and
low-latency access control management for the ITS devices
(e.g., sensors, computing resources, and storage systems), a
DHT-based access control mechanism over the fog servers
is proposed in [6]. Each fog server is in charge of a subset
of ITS devices and acts as a gateway between the users and
its set of ITS devices. Fog servers represent and maintain
the Access Control List (ACL) of their ITS devices over the
DHT overlay. An ACL for a fog server represents its set of
ITS devices accompanied by the list of legitimate users that
can access those devices. The key of each ACL on DHT is
the identity of its corresponding fog server, and the value is
the ACL itself. To provide low-latency query resolution for
the mobile users, a user always gets connected to the closest
fog server while it is mobilizing in the city. Access queries
of the user are then submitted to the DHT of fog servers
through that closest fog server, and the response is returned
to the user, i.e., whether the access is granted or denied. This
approach provides scalable storage of ACLs over fog servers
under the assumption that the ITS devices are uniformly
distributed among the fog servers. This results in the storage
maintenance load of ACLs for millions of ITS devices to get
distributed evenly across the DHT overlay of fog servers.

3.3.2 Video Streaming

An edge computing-based video streaming service is pro-
posed in [118] to address the withdrawal problem in P2P

Fig. 10: An example of DHT overlay structure in SA-Chord [113]. The lookup
tables of super-peers on are represented by grey tables connected to them. An
example of a lookup path from peer 14 to peer 5 is illustrated by the red line.

3.2.2 Object Storage:

Greedy Routing for Edge Data (GRED) [114] is a low-
latency Software Deﬁned Network (SDN)-based [115] DHT
overlay for object storage. A GRED system is composed
of an SDN controller, SDN switches, edge servers, and
data objects. The SDN controller constructs and maintains
a DHT overlay of SDN switches in a centralized way, i.e., it
builds the topology graph of the DHT among the switches
and programs them with their corresponding lookup tables.
Each edge server is assigned to connect to one of the SDN
switches in the DHT overlay based on its identiﬁer. The
identiﬁer of edge servers is assigned by the SDN controller
in a way that the identiﬁer distance between edge servers
reﬂects their latency. The identiﬁer of data objects is de-
termined by taking the hash value of their content. Each
data object is then stored on the closest edge server based
on its identiﬁer, i.e., the edge server with the minimum
identiﬁer distance to it. The identiﬁer assignment in this
way enables greedy routing, i.e., routing for an arbitrary
identiﬁer always stops at the closest existing identiﬁer to it
on the identiﬁer space. Since the identiﬁer of edge servers
is assigned based on their relative latency, GRED provides
a low-latency routing infrastructure for the edge computing
data objects.

EdgeKV [7] is a fault-tolerant and consistent object stor-
age for edge computing systems. Similar to SA-Chord [113],
EdgeKV is also organized into a two-tier routing overlay
of super-peers and ordinary peers. The super-peers form
a DHT overlay and are responsible for handling a group
of distinct edge servers (i.e., the ordinary peers) that are
assigned to them. The edge servers of each group form an
independent component of the system, which are organized
into a complete overlay graph among themselves, and are
responsible for storing the same data objects. A data object
is represented by a key and value pair. Similar to SA-Chord
[113], the messages to and from an edge group are routed

streaming. The withdrawal problem is deﬁned as the distri-
bution of content is getting stopped once no user is watching
it anymore, which results in content getting unavailable
once the users shift interest away from it. The solution is
comprised of three entities: cloud, edge servers, and users.
Each user is both a content receiver as well as a content
distributor and is connected to an edge server. The edge
servers act as the brokers and provide available bandwidth
to the system for streaming the content of the users to each
other. The cloud is only responsible for managing the edge
servers. A DHT is established among the edge servers in
a centralized way by the cloud, i.e., the cloud creates the
lookup tables of the edge servers on their behalf. The edge
servers are responsible for routing the users’ content among
each other. The assignment of users to the edge servers is
done by the cloud entity. The content distribution is done by
each edge server broadcasting the content of its connected
users to its neighbors on the DHT overlay, which is also
broadcast by them to their neighbors. Hence, in a system
with n edge servers eventually, a user’s content is avail-
able at every edge server within the round complexity of
O(log n). Content distribution in this way stands against the
traditional on-demand ones, where an edge server would
stop receiving a stream once its users stop viewing it.

3.3.3 Service and Resource Discovery

Service Discovery [9]: This solution proposes a service-
based smart city, where the fog nodes offer their computa-
tional resources as services to the mobile users. To provide a
decentralized and scalable discovery mechanism for the ser-
vices offered by the fog nodes, a DHT overlay is established
among them. Each service offered by a fog node is registered
as a DHT node. The key of the node is the service identiﬁer,
which is the hash value of the service instance. The value of
the node is the service template that contains all information
to mount, register, and instantiate the service. Each mobile
user in this solution chooses the closest fog node based on
the relative latency, and efﬁciently retrieves the information
needed to mount and utilize its desire service by querying
the DHT overlay of fog nodes.

Resource Discovery [8]: This solution supports resource
discovery in the mobile environments based on the speciﬁc
range of attributes of provided resources, e.g., all charging
stations for electronic vehicles between a certain latitude
and longitude. To support the range queries, a two-tier DHT
structure is utilized. Each tier-one DHT node is a fog node,
which represents a resource type (e.g., the charging station
resource type), and is attached to a tier-two DHT of resource
nodes (e.g., all charging stations). The identiﬁer of a fog
node in the tier-one DHT is the resource name it represents.
The identiﬁer of a resource node in the tier-two DHT is the
value of its attribute (e.g., geographical location). Looking
up resources with a speciﬁc range of attribute is done in two
steps. In the ﬁrst step, the query is dispatched in the tier-one
DHT to lookup the fog server responsible for that resource
type. Then the outer DHT attached to the responsible fog
server is queried for the desired range of the attribute it
represents.

9

3.3.4 Resource and Task Management

Smart Contract-based Resource Management [5]: This so-
lution aims at fully decentralized storage and computing
resource provision for the end-users in the edge comput-
ing systems. The proposed architecture is composed of
three roles: consumer, storage provider, and computation
provider. The consumers are the end-users aiming at ex-
ploiting the edge computing platform for executing their
tasks. The storage providers form a DHT overlay and
represent the data objects stored on them by DHT nodes.
The primary purpose of DHT utilization is to establish a
decentralized key-value storage for the data objects. Each
computation task of the consumers is assigned to a subset of
storage and computation providers through the invocation
of a resource trading smart contract [119] over the Ethereum
blockchain [86]. Upon the assignment is done, the consumer
breaks its task into chunks, and stores the chunks over
the DHT of the storage providers. This makes the chunks
accessible by the computation providers, to fetch and apply
computations on them.

Task Management [4]: To provide a task management
service for the edge computing devices, this solution uti-
lizes a system of clusters. Each cluster is comprised of
two components: a cluster master, and edge servers. The
cluster master is responsible for the task management and
scheduling on the edge servers of that cluster. The edge
servers are responsible for storing data and running the
tasks. The master of a cluster receives the tasks from the
users, breaks them into smaller sub-tasks, and assigns them
to the edge servers of its cluster, for computation. For a
certain task, the sub-tasks should be executed in a speciﬁc
order of precedence, i.e., the execution of each sub-task
is done on top of the result of the predecessor sub-tasks.
However, the sub-tasks of a task are distributed among the
edge servers, and there is no centralization of the execution.
Hence, the edge servers of each cluster in this solution
form a DHT overlay to share their computation results. The
result of each sub-task is stored on this DHT overlay, which
makes it available for the edge servers that are in charge of
executing the subsequent sub-tasks.

3.4 Open Problems

Query Load Balancing: The solutions utilizing DHTs as
an object storage platform beneﬁt from its inherent storage
load balancing by distributing the objects over the DHT
nodes based on the hash value of their content [4]–[7],
[114]. However, such solutions do not necessarily scale as
the query load of their users gets heterogeneous across the
DHT overlay, e.g., non-uniform locality distribution of users
in ITS [6] or smart city [9] scenarios, which applies a het-
erogeneous query load on their corresponding closest DHT
nodes. This results in a non-uniform available bandwidth
and quality-of-service distribution on DHT nodes, which
degrades performance of the system at the overloaded
nodes and increases their failure likelihood. Balancing the
load of DHT nodes in heterogeneous scenarios [21] may be
considered as a potential research direction.

Decentralized Maintenance: Maintenance of the DHT
overlay and its connectivity in the edge computing solutions
like [12], is done through a centralized registry. Each node

registers itself to the registry server upon joining the system.
The server performs the insertion protocol of the node in the
DHT overlay completely on behalf of the node, and shares
the ﬁnal routing table with the node. The DHT construction
protocols, however, are meant for decentralization [1], [3],
i.e., a DHT overlay is capable of being constructed in a fully
decentralized way by its participating nodes invoking the
insertion protocol independently of each other. However,
the fundamental challenge is to stabilize the constructed
DHT overlay addressing the heterogeneous dynamics of the
nodes in their online and ofﬂine states, which is basically
handled by the centralized registry in the aforementioned
solutions (i.e., [12]). Addressing the centralization prob-
lem and providing decentralized overlay construction and
maintenance through the decentralized DHT stabilization
algorithms [120], [121] may be considered as a potential
research direction.

Range Queries: Querying a range of keys on the DHT
overlay in solutions like [8] is done by searching for each
key of the query range individually. In a DHT overlay with
n nodes, performing a range query for k keys in this way
imposes a message complexity of O(k log n). When the size
of queried range outnumbers the DHT nodes (i.e., k > n),
such scenarios apply a linear message complexity to the
system, which degrades the efﬁciency of DHT utilization.
Efﬁcient DHT-based range query solutions [122], [123] may
be considered as a potential research direction to address
this issue.

4 CLOUD COMPUTING
4.1 System Model

As shown by Figure 11, in this paper, we model the DHT-
based cloud computing systems with two entities: DHT
nodes and services. An entity is deﬁned as a resource that
can be uniquely identiﬁed using an identiﬁer. For example,
in the storage applications, the services are modeled as
storage and retrieval components that are identiﬁed by
a unique service identiﬁer (e.g., the hash of the service
name). A service component is hosted and maintained by
a DHT node. The DHT nodes are processes that run an
instance of the DHT software and collaboratively build a
DHT overlay. The users are external processes that query
the DHT nodes via some client access interface. The DHT-
based cloud computing systems enable the nodes to exploit
the DHT overlay for looking up other nodes as well as the
services they host. Users are also able to look up the services
by submitting their queries to a DHT node to route on
their behalf. The lookup query is initiated by a DHT node,
routed by intermediary nodes, and reaches a target DHT
node. This end-to-end communication from an initiator to
the target on the overlay is made possible via the hop-to-hop
communications between nodes in an underlying network
[124]. Figure 11 depicts the example of routing on a DHT
overlay and its corresponding hop-to-hop representation in
the underlying network. As shown in the ﬁgure, there exists
a one-to-one correspondence between the DHT nodes in the
underlying network (left side) and the DHT nodes on the
overlay (right side).

As the group of users interested in a speciﬁc service
scales up, the query rate on the DHT node hosting the

10

service increases. This degrades the performance of the
host, increases its response time, and elevates its failure
likelihood. As the DHT node hosting service fails, its service
becomes unavailable to the users. To provide query load
balancing on the DHT nodes, service availability, and avoid
a single point of failure for the services, a DHT node hosting
service makes exact copies of its service component on other
DHT nodes, which are called the corresponding replicas
for that service [18]. The procedure of determining the
replica nodes is called replication. The replication paradigm
is illustrated in the example of Figure 11.

Table 2 summarizes the DHT-based cloud computing so-
lutions we survey in this section. The description of columns
is similar to the comparison table of edge and fog computing
solutions in Section 3.1.

4.2 DHT-based Infrastructure Solutions

4.2.1 Resource Provisioning

Storage Cost Optimization [125]: This solution minimizes
the cost of establishing DHT-based cloud storage given
a speciﬁc set of objectives, e.g., desired average response
time. Here minimizing the cost stands for minimizing the
number of required DHT nodes and their storage capacity.
The inputs to the algorithm are the distribution of total
data in the system over the time, the access frequency of
users, the required processing power of DHT nodes, and the
desired average response time. Given this set of inputs, the
algorithm optimizes the number of DHT nodes and their
storage capacity. The solution is speciﬁcally proposed and
implemented for Voldemort [127], which is an open-source
DHT-based key-value store designed by LinkedIn.

Compute Cost Optimization [126]: This solution opti-
mizes the computation cost of the DHT-based cloud com-
puting systems that are based on the Infrastructure-as-a-
Service (IaaS) platforms, e.g., Amazon Web Services (AWS).
In such platforms, each DHT node is represented as a
process on an IaaS virtual machine. The DHT-based cloud
provider is getting charged per amount of resources its DHT
nodes use over time, e.g., processing, disk, and memory.
The allocated resource by each DHT node is modeled as
a ﬁxed-capacity queue, which maintains the queries of
users (i.e., computation requests) at that node pending to
be processed. A longer queue implies a higher amount of
allocated resources, which results in a higher cost for the
cloud provider. Once the queue hits its capacity, the node
denies any further requests, which degrades the service
availability of the system. To provide a trade-off between
the resource cost, service availability, and response time,
the solution models the resource provisioning problem
as a non-linear programming model [128]. Inputs to the
model are the range of available computation capacities
of the virtual machines (i.e., range of their available input
queue capacity), the cost associated with each capacity, and
the service availability and response time thresholds. The
programming model then determines the number of IaaS
virtual machines (i.e., DHT nodes) and their input queue
capacity such that the overall cost of provisioning the virtual
machines is minimized while the desired service availability
and response time thresholds are met. Similar to [125], this

11

Fig. 11: DHT-based cloud computing system model. A sample service is replicated three times. Routing a request from a user to a replica of the service is illustrated in
both the underlying network, as well as its corresponding DHT overlay.

Nodes
Servers

Solution
Storage Cost Optimization [125]
Compute Cost Optimization [126]
Locality-Aware Replication [20]
Multi-objective Replication [21]
Cluster task scheduling [10]
m-Cloud [12]
Game Object Storage [14]
IPFS [15]
Time-sensitive object storage [16] App General
App General
P2P Streaming [11]

Type DHT
Inf
Inf
Inf
Inf
App Chord
App General
App Chord
App Kademlia

Identiﬁers DHT Utilization
Address
Voldemort
Voldemort Virtual Machines Address
Address
Skip Graph Data Objects
Address
Skip Graph Data Objects
Virtual Machines Content
Content
Cloud domains
Content
Game objects
Data objects
Content
Symmetric keys Name
Video chunks

Domain
Centralized
Storage
Centralized
Storage
Decentralized
Storage
Storage
Decentralized
Task Management Decentralized
Decentralized
Aggregation
Distributed
Storage
Decentralized
Storage
Decentralized
Access Control
Distributed
Load Balancing

Content

TABLE 2: A summary of DHT-based solutions in cloud computing. In this table Inf and App are abbreviations for Infrastructure, and Application, respectively.

solution is also speciﬁcally proposed and implemented for
Voldemort DHTs [127].

4.2.2 Replication
Locality-Aware Replication [20]: To optimize the response
time in DHT-based cloud computing systems, the notion
of locality-aware replication is deﬁned, which places the
replicas of a service owner in a way that the average access
delay between each user and its corresponding replica is
minimized [19]. The corresponding replica for a user is the
one with the minimum average latency to it. The average
access delay of replication is deﬁned as the average pairwise
latency between each user and its corresponding replica.
GLARAS [20] is the ﬁrst fully decentralized locality-aware
replication for DHTs where the primary node hosting a
service (i.e., the service owner) can place its replicas in
a locality-aware way. To run GLARAS, the service owner
only needs some public parameters of the system, which
are time-independent, and determined at the bootstrapping
of the system, e.g., the number of desired replicas. GLARAS
models the locality-aware replication by an Integer Linear
Programming (ILP) model [128], solves it, and returns the
identiﬁer of replica nodes to the service owner. GLARAS
introduces a novel system modeling approach that logarith-
mically shrinks the size of the ILP model and makes it be
solved efﬁciently.

Multi-objective Replication [21]: The performance of
the cloud computing systems with heterogeneous resources
of nodes (e.g., bandwidth, storage, computation, etc.) is a
function of both the propagation and transmission delays
[108] as well as the computation and storage capacities.
In such scenarios, both the average access delay, as well
as the average response time play key performance roles.
These performance metrics are tightly coupled with the
availability behavior of the nodes, i.e., a (temporarily) ofﬂine

or failed replica negatively affects both the average access
delay as well as the response time of the system. The former
happens as once a replica goes ofﬂine, its corresponding
users should ﬁnd another closest replica, which inherently
has a higher propagation delay. Likewise, the query load of
an unavailable replica is distributed among other replicas,
which degrades their response time. Pyramid [21] is the ﬁrst
fully decentralized multi-objective replication framework
for heterogeneous DHT-based cloud computing systems. It
optimizes both the average access delay as well as the re-
sponse time of the replicas under the time-variant availabil-
ity behavior of the nodes. In the system model of Pyramid,
nodes periodically report their availability and resources
over an efﬁcient and light blockchain system [33]. Hence,
each node can obtain the aggregated average availability
of the resources of other nodes across the system over the
time. A service owner then invokes Pyramid on this ag-
gregated information. Pyramid models the replication as a
multi-objective Integer Linear Programming problem (ILP)
[128], solves it, and returns the identiﬁers of replicas for
that service owner in the system. Similar to GLARAS [20],
Pyramid also takes a novel problem size reduction approach
that makes the ILP model solvable efﬁciently.

4.3 DHT-based Applications

4.3.1 Decentralized Task Management

A container [129] is an entire runtime environment, which
contains an application accompanied by all its dependencies
and libraries needed to run it. With its encapsulation pro-
vided, containerization aims at software portability across
different computing environments. A container cloud [130]
is a platform that maintains and orchestrates the computa-
tion tasks in the containers. Kubernetes [131] is one of the
widely-used examples of container clouds. The container

cloud orchestrates containers into clusters where each clus-
ter is managed by a single master node that performs the
task management on the nodes of its cluster. Having a single
cluster master leads to a single point of failure as well as a
performance bottleneck as the cluster size scaling up. To
address these reliability and scalability problems, a DHT-
based decentralized task management system is proposed
in [10]. The entire cluster is completely replaced by a decen-
tralized DHT overlay of nodes. The nodes utilize the overlay
to ﬁnd each other as well as each other’s available resources.
A node advertises itself to the others by representing its
state as the key and its address as the value on DHT. The
management protocol running at each node then pulls the
state of other nodes of the cluster and decides on scheduling
the tasks either on itself or on the other nodes accordingly.

4.3.2 Privacy Preserving Aggregation

m-Cloud [12] is a DHT-based privacy-preserving aggrega-
tion for sensor data, which utilizes a federation of several
cloud domains. Cloud federation is deﬁned as the system
model where different administrative domains share data
on their private clouds with each other [79]. Figure 12 shows
an example of the cloud federation system model, where
the outer federated cloud domain constitutes of four inner
private cloud domains. Each cloud domain is responsible
for collecting a share of each sensor data. The data in each
cloud domain is aggregated before sharing with others to
preserve the privacy of individual sensor data. Having m
cloud domains, each sensor splits its data into m chunks and
shares the ith chunk with the ith cloud domain. Each cloud
domain applies the computation function on the aggregated
pieces of data and returns the result to a single operator.
The operator aggregates the individual cloud results and
computes the ﬁnal result. Each cloud domain runs a DHT
node, participates in a DHT overlay with other domains,
and is responsible for a range of keys. The assignment
of sensors’ data chunks to the cloud nodes is done by
computing the chunk’s key using the hash of the chunk
and ﬁnding the DHT cloud node that is responsible for
that key. m-Cloud however is only capable of aggregated
computation on speciﬁc polynomials. The paper lists up the
set of all polynomial functions that can be computed in this
way. An example of such polynomials is x + x2 + x3, where
m-Cloud operates by chunking and sharing x term with one
DHT node, x2 with another, and so on.

4.3.3 Object Storage

Online Gaming [14]: This solution aims at establishing a
scalable infrastructure for the massive multi-user P2P online
gaming platforms. In the centralized counterpart, a game
server hosts all the game objects (e.g., characters), and users
query the server for the game objects they interact with.
However, this approach is not scalable, as the load on the
game server increases linearly with the number of interact-
ing users. In the proposed distributed solution, the query
load of users is distributed across a DHT overlay of the
game servers, where the game objects are also represented
by the DHT nodes. Using the hash value of game objects as
their identiﬁer uniformly distributes them across the game
servers.

12

Fig. 12: An example of cloud federation of four independent cloud domains. The
outer-most cloud constitutes of the federation of the inner cloud domains.

IPFS [15]: The InterPlanetary File System (IPFS) is a
P2P cloud storage system. IPFS uses content-addressing to
uniquely identify a data object within the entire system. It
utilizes the Kademlia DHT [3] for representing both peers
and data objects. The small objects with sizes around 1KB
are directly maintained on the DHT, while the large objects
are maintained on the peers and the reference to those peers
are stored over the DHT. In the former case, the object is
stored by the key as its hash value and the value as the
content of the object itself. In the latter case, however, the
key remains the same, while the value is replaced by the
address of the owner peer. Objects are immutable in IPFS,
i.e., new versions of an object have different content than the
older version and hence a different hash value. However, to
support versioning, the new versions point back to their old
version, which builds up an object graph in a decentralized
way. The very ﬁrst version of an object instantiates a graph
for that object with only a single vertex. Children of a
vertex are new versions of that vertex that are generated
by applying some changes directly to that vertex. Having
each object hence, one can traverse the object graph and
visit and retrieve all the older versions. Since each object
is represented by a DHT node, the corresponding graph
for that object is maintained in a fully decentralized way
over different peers holding objects of the graph vertices.
With this architecture, IPFS is aimed to be utilized in sce-
narios like a global mount ﬁle system, personal sync folder,
encrypted data sharing system, and the root ﬁle system of
distributed Virtual Machines.

Time-sensitive object storage [16]: This solution pro-
vides time-sensitive access control for the data objects over
cloud storage. The time-sensitive access control means that
sensitive data objects can be retrieved only after a speciﬁed
release time, and are no longer available to new users
after an expiration time. The user encrypts the data objects
it owns using a symmetric key scheme [107], and stores
them over a cloud storage platform. To provide time-based
access control, the user also encrypts the symmetric key into
chunks and distributes it across another DHT-based cloud
storage of non-colluding nodes. This DHT-based cloud stor-
age is solely meant to store the symmetric keys’ chunks and
is separate from the cloud storage platform responsible for
maintaining the users’ encrypted data objects. Each node
on this DHT-based cloud storage keeps an encrypted chunk
of the symmetric key of the user. The encrypted chunks of
a key have an expiration time, and the honest DHT nodes
discard the expired chunks. Thus, even though the data is
stored over the cloud, it becomes unreachable to new users
after the expiration time, as the key will no longer exist over
the DHT nodes. A polynomial-based secret sharing algo-
rithm [132] is utilized to distribute the symmetric keys of

data objects in chunks over the DHT nodes. The distribution
is done in a way, which reconstructing the symmetric key of
a data object from its chunks relies upon both recovering its
chunks from the DHT nodes and a secret timestamp that is
only made available by a trusted time server at the released
time of its corresponding data object.

4.3.4 Video Streaming

To provide load balancing in the Peer-to-Peer (P2P) video
streaming systems, a 2-tier DHT-based architecture is pro-
posed in [11]. The ﬁrst tier nodes in this solution are the
supernodes, which belong to the service provider, and are
all controlled by the same administrative domain. The sec-
ond tier nodes are the users’ devices. Each service provider
supernode at the ﬁrst tier maintains a set of video ﬁles
and streams them to the second tier user nodes upon
their request. The load of a supernode is deﬁned as the
number of videos it streams concurrently. To balance the
load among the supernodes, all users watching the same
stream construct a distinct DHT overlay. The DHT of users
watching a stream is constructed and maintained by the
service provider supernode that originally streams the con-
tent. Each stream is divided into chunks of identical sizes
and stored over the DHT overlay of user devices interested
in watching it. Each user then looks up and resolves its
local DHT overlay for the chunks of the video, instead of
querying the content provider supernode directly. By the
local DHT, we mean the corresponding DHT of the video
stream that the user is watching. In this way, the load
of supernodes is balanced among its DHT-overlay of user
devices.

4.4 Open Problems

Dynamicity and Decentralization: The infrastructure-
oriented resource optimization solutions like [125], [126]
tend to centralization by requiring to input almost the
entire behavior of the system apriori, e.g., the time-based
distribution of data objects over the entire system [125]. Such
solutions are also static as they do not aim on reacting to the
dynamics of the system, e.g., sudden changes in the data ob-
ject distribution. Some efforts have been made to converge
towards dynamic and fully decentralized solutions [19],
[20], which operate based on the local view of the nodes,
and react to the dynamics by predicting the future behavior
of the system based on its present and past states [18], [121].
However, relying on the local view of the nodes for decision-
making in a distributed system is prone to some margin of
error. Investigating the error margin in decentralized and
dynamic approaches for ﬁnding the operational trade-off
points may be a potential research direction.

Practical Abstractions: In the infrastructure-oriented re-
source optimization algorithms like [126], an IaaS virtual
machine is abstracted by a single computation parameter
(i.e., the queue capacity for incoming requests). This abstrac-
tion is far from the real-world IaaS platforms where the vir-
tual machines have the computation, communication, and
storage capacities. Optimizing the DHT-based infrastructure
solutions under a more realistic IaaS abstraction may be
another potential research direction.

Trusted Third Party Mitigation: The entire security of
solutions like [16] rely on the existence of a trusted third

13

party that shares a common reference of time. Hence, al-
though such solutions are assumed decentralized in their
operation, they are not decentralized in providing their
security objectives. Securely applying decentralized time
references through utilities like vector clocks [133] and
blockchains [134] can be of potential research interest.

Consistency Model: The replicas in [14] are assumed
on an eventual consistency model with an optimistic ap-
proach, i.e. if the writes on a game object stop, its primary
and backup replicas eventually converge. Additionally, the
synchronization interval in [14] between the backup and the
primary is 30 seconds, which incurs a high inconsistency in-
terval considering continuous real-time changes in the state
of the online game objects. Applying a stronger consistency
model [79] may be a potential research direction in such
scenarios.

Uniform Load Distribution: In P2P streaming solutions
like [11], the demand distribution of video chunks is time-
sensitive, i.e., all the users involved in watching a stream,
follow the corresponding chunks in the same order. Storing
video chunks over a DHT in such a solution does not
provide a time-invariant uniform load distribution across
the nodes. Rather, the load is moving over the DHT nodes,
i.e., each node experiences a spike in its load of queries once
all users converge towards the chunk of videos it holds.
The load then subsides once users move from its chunk to
the next chunk of the stream. Investigating uniform load
distribution in DHT-based P2P streaming services may be a
potential research direction.

Free-riders: The liveness of DHT-based P2P solutions
like [11] is directly tied to the active participation of peers
in the protocol. However, without an incentive mechanism
in place, the peers may not maintain their availability in
the system. Especially that the peers do not belong to the
administrative domain of the system, hence, they do not
necessarily follow the same interest as the administrative
domain intends. In [11] where stream chunks are stored
over a DHT overlay of peers involved in watching it, a peer
may switch ofﬂine once it gets all the chunks of its interest,
a behavior that is known as free-riding the system [79].
Applying an incentive mechanism that deters nodes from
free-riding in P2P streaming scenarios may be a potential
research direction.

5 BLOCKCHAIN

5.1 System Model

Blockchain has become an extremely powerful and innova-
tive technology with virtually unlimited applications across
a wide range of ﬁelds, including ﬁnance, energy resources,
IoT, healthcare, supply chain and many others [135].

The structures of blockchain methodologies are similar,
despite the use of different tools and infrastructures across
many different domains. It is simply a distributed ledger,
however, the transactions are designed to be almost tamper-
proof by using hashing and distributed mechanisms. Enti-
ties can typically access blockchain historical transactions,
however, changing historical transactions in the ledger is
nearly impossible. This is owing to the fact that it is dis-
tributed and other considerations [136].

The key blockchain technology features can be summa-

5.2.2 Data Management: Scalability and Efﬁciency

14

rized as follows.

• Transparency and tractability: All ledger records are
accessible and traceable by a pre-deﬁned group of
members who have the right to access the records;
• Consensus decentralization: The nature of blockchain
that requires unauthorized members to reach a con-
sensus;

• Automation and smart contracts: Blockchain does not
need human interaction and veriﬁcation. The soft-
ware is implemented so redundant transactions and
conﬂicts are not used;
Security perspective: Blockchain is replicated, shared
and tamper-proof technology, which makes it vul-
nerable to security issues;
Immutability: The records in blockchain are irre-
versible and cannot be repudiated.

•

•

Blockchain scheme is presented in Fig. 13. A blockchain
ledger is built in a P2P manner, and whenever an alter-
ation to historical transactions occurs, the modiﬁcations
would be available to the ledger holders. Any updates over
blockchain should meet a proof-of-work theory that restricts
devices with high processing power overriding historical
instances. Indeed, blockchain has established reliability and
security capabilities in many information systems.

Many researchers have adopted blockchain technology
to improve interoperability and reduce third party interven-
tions. For example, the decentralized infrastructures rely on
hashing mechanisms for all transactions. Within the various
devices and their resources, ease-of-use, reliability, privacy
and accessibility are effortlessly remarked. Table 3 presents
a summary of the blockchain-supported DHT solutions that
are examined in the following subsections.

Fig. 13: Architecture of Blockchain

5.2 DHT-Based Infrastructure Solutions

5.2.1 Block Validation and State Storage

Lack of scalability is considered one of the major hurdles
in blockchain. The issue regarding lack of scalability has
grown with the increased adoption of cryptocurrencies, and
transactions considered conventional increase exponentially.
Various solutions have been proposed to overcome this
scalability drawback.

that

The authors implemented a protocol

turns a
blockchain into an autonomous access-control director with-
out the need for third-party trust. Following Kademlia’s
[3] persistence applying LevelDB2, an interface to the
blockchain was adopted. The DHT has been aided by a
network of nodes that satisfy approved read/write trans-
actions, and randomizing the data across the nodes to
ensure the high availability. The work in [138] introduced a
blockchain solution for IoT networks that provide data man-
agement and distributed access control, it used blockchain
that serve as a veriﬁable and access control overlay to
the storage layer. The proposed system does not rely on
physical storage nodes, but supports utilization of cloud
storage resources. DHT has been adopted in a framework
that targets book search—namely the Peer Book Search
and Library (PBSL)—by establishing virtual libraries based
on blockchain. The search and transmission of different
resources is achieved by using DHT and peer-to-peer tech-
nologies. Blockchain technology has been used for the copy-
right protection and trading purposes, and by introduc-
ing the aforementioned technologies PBSL has overcome
the drawbacks of existing library systems, and facilitated
knowledge production, distribution, acquisition and con-
sumption [36].

In [34], blockchain and DHT were adopted to assist a
lookup system in which blockchain enables trusted commu-
nications between nodes without the need for third parties.
DHT helps the nodes store the data distribution and prop-
agate the data efﬁciently. Adopting a technique that sets a
data expiration period does not raise the maximum capacity
of the blockchain in this system.

Some researchers applied consensus mechanisms for
scalability and data availability enhancement, such as the
work presented in [35]. The authors implemented an archi-
tecture that employs a Byzantine Fault Tolerant (BFT) con-
sensus algorithm on the ﬁrst layer of blockchain, as well as
a DHT solution to partition the ﬁrst layer blockchain ledger
amongst the nodes. The authors evaluated a two layered
blockchain-supported database by focusing on scalability
and availability.

5.2.3 Storage Efﬁciency

In [137] the authors introduced two roles for each node: a
storage role in which each node acts as a DHT that keeps
values for a subset of the state elements; and a validation
role where each node is validated and broadcast throughout
the network. In their model for the storage role, each deﬁned
node acts as a DHT node that retains the blockchain state
and replies to each query for a state element and its value.
As for the validation role, each node keeps only the latest re-
ceived blocks, in which a truncated blockchain of the nodes
list could differ with time due to new block propagation.
When a node receives a block, it will check the validity of
the new block by considering the root-hash idea.

The proposed approach in [137] helped minimize the time
required by a node of a blockchain-supported network to
download the data needed for particular goals. The pro-
posed approach assigned two roles for each node: storage
and validation. For storage, each node acts as a node of a
DHT to store the values of the state elements. The main
aspect of validation is speed; as it allows execution of the
initial synchronization of nodes in seconds.

The proposed ZeroCalo model

in [30] improves its
ability to add thousands of nodes to the DHT structure.
The model fulﬁlls a consensus-based proof-of-work algo-
rithm for the distributed ledger to provide efﬁcient message

...Block 3Hash of current blockHash of previous block...Transaction0Transaction1TransactionN......Block 2Hash of current blockHash of previous block...Transaction0Transaction1TransactionN......Block 1Hash of current blockHash of previous block...Transaction0Transaction1TransactionN...Solution
Decoupling Validation [137]
Access control [138]
Lookup system [34]
Tamper-Resistant [35]
ZeroCalo [30]
Virtual Block Group [31]
LightChain [91]
PingER [32]
Hash validation technique [23]
BHEEM [22]
SPROOF [24]
Supply Chain Physical Distribution [139]
Hawk compiler [88]
Enigma [140]
Security enhancement [89]
Trust Management in Social IoV [26]
Encrypted Keyword Search [25]
KARAKASA [27]
Bitcoin Node Solution [28]
DHT Clustering [29]

Type
Infrastructure
Model
Infrastructure
Prototype
Infrastructure
Model
Infrastructure
Infrastructure
Method
Framework
Platform
Framework
System
Model
Method
Framework
Infrastructure
Scheme
Scheme
Method

DHT
General
General
Kademlia
General
General
General
Skip Graph
General
General
General hashing
General
General hashing
General
off-chain DHT
General
General
Standard
Chord
Standard
Kademlia

Nodes
Regular
Blockchain
Regular
Regular
Miner nodes
Data block
Regular
Regular
Blockchain
Blockchain
Blockchain
Blockchain
Regular
Regular
Regular
Vehicles nodes
Regular
Regular
Clustered nodes
Mining/Blockchain

DHT Utilization
Broadcast validation
Data management
Efﬁcient data propagation and storage
Blockchain layer fragmentation
Nodes construction and message broadcasting
Keeps the blockchain storage index
Improves the communication and storage scalability
Files saving
Blockchain assistant hash validation
blockchain-based secure health records
Blockchain data storage
Public to point at private ledger
Data privacy by enabling transaction anonymity
Limited accessibility on data
Secure and optimal repositories
Trust information storage for trustworthy
Monitoring and attesting of new nodes
Veriﬁcation of new transactions or blocks
Transactions veriﬁcation
Load balancing

TABLE 3: A summary of DHT-supported solutions in Blockchain

15

Domain
Distributed
Distributed
Distributed
Decentralized
Distributed
Distributed
decentralization
Decentralized
Distributed
Decentralized
Decentralized
Distributed
Decentralized
Distributed
Decentralized
Distributed
Distributed
Distributed
Distributed
Distributed

broadcast criteria, and introduces efﬁcient energy consump-
tion which make it possible to be used on IoT networks.

The model addresses the node scalability issues, and a
virtual block group (VBG) was proposed in [31]. Each node
in the VBG system stores only a portion of the block data
and maintains the storage index to DHT by treating the
block data as resources, which improves query efﬁciency.
This methodology assured the security and dependability of
block data while also saving hard drive space by reducing
data acquisition time.

The LightChain solution, which adopts a DHT overlay,
has been proposed in [91] to improve storage scalability
while also permitting decentralization in blockchain archi-
tectures. It provides addressable transactions, peers, and
blocks, all of which are fully accessible on demand. It also
allows each peer to replicate a subset of the transactions in
order to respond to inquiries from other peers.

In [32], using DHT and the legitimate blockchain, the
researchers designed a blockchain access control and data
storage architecture for PingER, an end-to-end Internet ser-
vice management project, in order to eliminate total reliance
on a single repository. In their framework, the blockchain
is used to retain the metadata of the ﬁles, while DHT saves
the actual ﬁles off-chain at numerous locations by forming
a network of the proposed Agents. The suggested PingER
framework beneﬁts from DHT and blockchain because they
enable distributed storing, parallel computing, and effective
lookup abilities.

5.2.4 Third Parties Reduction

Many proposals have been made to use blockchain to pro-
mote interoperability and eliminate external parties. For ex-
ample, the decentralized apps concentrate on hash processes
for all interactions by combining the concepts of different
network nodes and data storage mechanisms, as well as
managing the accessibility, dependability,and the privacy.

Data integrity: refers to the accuracy and validity of col-
lected data, and maintaining data integrity is a key focus of
system security solutions. Data validation and error check-
ing mechanisms are examples of methods to address data
alteration. Many blockchain-based solutions supported by
DHT have been proposed, including the solutions presented
in [23], [24], and others.

The work in [22] used the blockchain for implementing
a secured medical information project. The authors created

three sorts of nodes: the archive nodes, the light nodes
and the full nodes. These different nodes manage storage
overload issues, and the database and cipher managers help
handle the stored hashes and ensure the level of integrity.

Kalis and Belloum [23] provided another technique to
guaranteeing data integrity using blockchain technology.
They proposed a blockchain-supported hash validation
mechanism. Their model separates the aggregated data from
the blockchain, allowing a data identity and a hash of the
collected data to be transmitted to the blockchain.

[24]

is another approach that

They also go over some of the possible applications for
such a system. The researchers believe that the blockchain
hash veriﬁcation assists the detection of the unintentional
and malicious acts that done to the acquired data, based
on the information gained from evaluating various use
scenarios [23].
leverages
blockchain technology to assure data integrity. They pre-
sented a blockchain-supported hash validation technique in
which the model is maintained independently and the col-
lected data from the blockchain is used to direct identiﬁers
and hashes from the data to the blockchain. The authors
found that the blockchain-supported hash validation ap-
proach facilitates the detection of malicious activities based
on all of the use cases mentioned in the study [24].

Data privacy: Some proposals require privacy for trans-
actions. There is, however, a mechanism for implementing
public and private ledgers, as well as their connection to
individual transactions. Hashes in the public ledger can lead
to an entry in the private ledger that contains an individual
event linked with that hash. Which is in some how a
distributed implementation of event storage. Even with the
distinction of private and public ledgers, the structure is still
constrained by the general beneﬁts of blockchain [139].

The Hawk compiler, a decentralized smart contract sys-
tem, was presented in [88] as a means to achieve data
privacy by enabling transaction anonymity. It functions
by translating the generic codes written by programmers,
into cryptographic primitives. Another project, known as
Enigma, was presented in [140]. This idea relies on splitting
the data into unrecognizable chunks and distributing them
over the network, thereby ensuring that no node has access
to the data. Enigma applies off-chain DHT to store the
data references. DHT has been proposed to build secure
and optimal repositories by [89]. The authors introduced a
method to automate contract management with hierarchical

conditionality structures within a hierarchy of intelligent
agents, using hierarchical cryptographic key-pairs. In ad-
dition, they proposed a method to produce a hierarchy of
common secrets in order to facilitate hierarchical communi-
cation channels of increased security.

Trustworthiness: The work in [26] considered trustwor-
thy perspectives at the network-level of a node, By collecting
the trust information of every node in a single DHT that is
managed by Pre-Trusted Objects (PTOs). Every single node
can request the used DHT for knowledge on some other
nodes’ trustworthiness, with the PTOs ensuring that no ma-
licious nodes are participating in the information exchange.
In [34], using blockchain and DHT, the authors suggest a
novel lookup method. DHT allows nodes in the system to
store dispersed data and propagate it effectively, whereas
Blockchain facilitates communication between nodes with-
out engaging a trusted third party. Adopting a mechanism
to establish a data expiration period does not raise the max-
imum capacity of a system’s blockchain. The researchers in
[25] proposed a protocol that helps monitor and attests to
the nodes in distributed networks. With this, each node in a
network will be continuously monitored and attested to by
the search queries in DHTs. The output of each attestation
process has been recorded to the blockchain which identiﬁes
compromised nodes that can be removed. This solution
achieves high levels of security, efﬁciency and robustness.

5.3 DHT Applications in Blockchain

5.3.1 Load Balancing

Load balancing refers to the process of distributing incom-
ing trafﬁc from groups of servers or devices. Many studies
have considered load balancing.

KARAKASA[27] is a load balancing function proposed
by [27] that enables storage load balancing by using DHT as
a distributed storage to the storage of the bitcoin adopted
nodes. It is based on the idea of maintaining node in-
dependencies of the nodes to keep the whole blockchain
among DHT networked nodes. The proposed model proves
that the DHT cluster’s nodes can act as complete nodes
without accessing the entire blockchain, and that the user
can manage a Bitcoin node without the need to trust other
users.

With KARAKASA, the users in a Bitcoin network who
run the storage resource-constrained machines, cooperate
with each other to form clusters. Every Bitcoin node car-
ries a part of the blockchain that is allocated according to
the adopted DHT process. Once the new transactions and
blocks are veriﬁed, each node will query the needed block
to the DHT cluster. It is important to note that with DHT
clusters, each node can handle new transactions or block
veriﬁcation processes in the same way full nodes do. The
proposed Bitcoin nodes include two storage functions: the
BlockStorage which keeps the original data that will be
stored among the DHT clustered nodes, and the ChainState
that has the UTXOs. Each block ID in the Chord will be
established by the cryptographic hashing process in order
to map blocks to the accepted Chord ring. The same authors
have proposed a storage load balancing technique based on
DHT [28]. They coined the phrase ”full node”, which refers

16

to a Bitcoin node that can store all historical transaction data
in order to check whether new transactions are valid or not.
In the proposed model, the DHT cluster’s nodes behave
as full nodes with no need to involve the entire blockchain
[28]. Another load balancing solution that has been consid-
ered is proposed in [29]. This involves a state where all
participant nodes are divided into mining nodes in a P2P
fashioned network. On the other hand, blockchain data also
have nodes in a (DHT)-based network.

5.3.2 Data veriﬁcation

SPROOF [24], a platform for verifying documents in
blockchain has been proposed in [24]. With SPROOF, all
data is stored in decentralized and transparent functions. In
addition to data integrity, the platform helps manage scala-
bility and privacy issues.Within a transaction, SPROOF adds
hashes of data to the blockchain, and the raw data is then
kept in a DHT. If a cryptographically secure hash function
is employed to create the hash, the stored data will gain the
integrity and ordering qualities from the blockchain.

5.4 Open Problems

Security Measures: Constructing and maintaining a DHT
overlay in blockchains can lead to numerous security con-
cerns such as routing attacks, Sybil attacks, Eclipse attacks,
and storage/retrieval attacks. With DHT, request routing
is the main component and each node must keep its own
routing table correctly and update it accordingly. However,
many routing attacks could target this major component in
different forms. For example, a compromised node may
target the lookup routing function by forwarding lookups
to incorrect nodes, or corrupt the nodes’ routing tables by
forwarding faulty updates. Blockchains are also vulnerable
to the Sybil attacks where a malicious node might self-control
a portion of node identiﬁers. Under the Eclipse attack some
nodes could mislead other nodes by providing them with
false neighbors hence directing newly joining nodes to a
different network under malicious control, and blocking
or manipulating the honest trafﬁc for the victim nodes. A
compromised node may also attack DHT storage layer and
refuse to provide data to clients when they request it.

Permission-less Environments: Though blockchain is a
permission-less ledger, some users could use centralization
that requires the proof-of-work algorithm to be replaced
by a few trusted users. In permission-less conditions node
behavior is unpredictable, and a malicious node could deny
processing or directing messages to its own partitioned
network. A permission-less system also depends on normal
user behavior and can guarantee how well a system is
working by rewarding normal behavior and disciplining
negative activity. Without a procedure for recognizing the
malicious behaviors, the DHT cannot be considered a secure
system for permission-less environments.

6 INTERNET OF THINGS (IOT)

6.1 System Model

The Internet of Things (IoT) is a fundamental component
of industrial evolution, where all devices (things) connect
to each other in order to collect and share data. Currently,

innovations in IoT networks have revealed new potential
for developers to create IoT-based services using various
facilities,
including processing, storage and communica-
tions. Consequently, IoT solutions have been proposed in
many different ﬁelds, such as trafﬁc applications (e.g. smart
trafﬁc control), healthcare (e.g. smart health monitoring)
and smart management infrastructures. Blockchain has been
introduced as a promising solution to managing IoT appli-
cations [141]. Fig. 14 represents the architecture of the IoT
network, and the characteristics are summarized as follows.

Fig. 14: Architecture of IoT Network

Heterogeneity: The IoT network includes various ser-
vices, devices, sensors and operating systems that inter-
relate through different protocols. Blockchain technology
has recently been adopted to manage heterogeneous IoTs
[141]. Energy limitation: IoT devices are typically small
and lightweight with limitations on resource usage. Hence,
the devices are designed to function with minimal energy.
Vast amount of collected data: Since the number of IoT
devices is huge (i.e. into billions), the generated amount of
data from these devices is also enormous. Unique identity:
IoT devices have unique IDs and identiﬁers provided by
manufactures that can be used to upgrade the devices to
different platforms. Intelligence: IoT devices are considered
smart devices that can interact intelligently according to
combinations of hardware and software. Large scale: As
IoT devices are produced in billions, management of their
generated data is critical. Dynamic environment: The IoT
considers that, as a dynamic network, devices will contin-
ually join the network and others leave. Complex system:
IoT has a prodigious number of devices, and coordination
at this massive scale is highly complicated due to resource
limitations.

The (IoT) faces the same issues as any other commu-
nication system in terms of providing an architecture that
can handle various stakeholders, a large number of devices
distributed globally, and their limited connectivity. An ar-
chitecture like this must be scalable and allow for smooth
operation across networks and devices with minimal human
interaction. DHT has been adapted by many studies to
handle such items.

Table 4 summarizes the DHT-supported solutions in IoT

networks.

6.2 DHT-Based Infrastructure Solutions

6.2.1 Data Management (scalability and ﬂexibility)

A common issue in most IoT-solutions is scalability, and the
need for highly dynamic adjustment capabilities on such a
large scale is complex. Each device (thing) in IoT is known

17

by a unique distinctive ID. Many solutions apply DHT to
IoT-based infrastructures to manage scalability issues.

The work in [37] presented an architecture that applied
DHT to describe the ﬂow of data in IoTs, from tiny sensors
to entire applications. The main focus of this research was
scalability perspectives, and the authors proposed a Holistic
Peer-to-Peer Protocol (HPP) for low capability devices as a
reliable means of independently exchanging core network.
They also introduced the HPP channel as a link among peers
that can conceal the network details, as well as the HPP
endpoint that refers to the communication endpoint involv-
ing the HPP channels. HPP adopts DHT with Kademlia k-
buckets as the basis for P2P overlay. Kademlia was chosen
because it has proven scalability and robustness for different
applications, and it reduces the conﬁguration number. The
authors used Kademlia-DHT buckets for node identiﬁcation
and XOR-based routing, and started with one bucket in
order to reduce the required storage [37].

P2P networks help achieve scalability related to data
sharing and data distribution. A study comparing P2P net-
works is presented in [38]. DHT-supported P2P networks,
with DHT as a substrate, can locate the data values using
the peers’ identiﬁers that match the object’s key. DHT-
supported networks feature a property that assigns random
IDs to peers in a variety of identiﬁers on a regular basis.

A DHT-supported overlay network with packets routed
within an overlay network that uses DHT is presented in
[39]. Using DHT in such networks overcomes scalability
challenges due to the increasing number of intermediate
nodes, and also achieves placement ﬂexibility and control-
lable replication. The authors focused on data placement,
information durability and access latency, and presented
the Global Data Plane (GDP), which adopts the location-
independent routing in large spaces in order to support the
heterogeneous platforms and help with a variety of storage
policies. DHT has addressed the scalability challenge that
arise with the increased number of overlay hops [39].

An IoT software-update delivery network, where indi-
viduals (nodes) are compensated by vendors with digital
currency for update-delivery purposes is proposed in [41].
In their model, the decentralized storage network (DSN)
is accessible by all individuals in the network. The DHT
is adopted with a tracker-less peer discovery scheme to
achieve optimal accessibility.

IoT needs a decentralized control plane that can manage
multiple stakeholders, large numbers of devices, restricted
connectivity and power limitations among devices. [40]
proposed a distributed control plane based on DHT that
leverages the scalability and ﬂexibility of P2P-DHT. The
DHT is between the IoT devices and their masters , and the
proposed solution enables remote sensor and device control
without limitations involving security and bootstrapping.
The authors used a RELOAD/Chord in their implementa-
tion, and enhanced the RELOAD speciﬁcations so it can run
securely and efﬁciently.

A Chord algorithm-based on overlay management ar-
chitecture for heterogeneous IoT device management is
presented in [42]. The proposed model adopts the three
components of rings, nodes and sensors, as well as multi-
ple peer Chord rings, and considers each ring in a smart
context which uses chord to discover and organize things.

TabletLaptopFirewallSmart homeSmart carInternet18

Type
Solution
Architecture
HPP protocol [37]
Framework
Data-centric system for IoT applications [39]
Architecture
Software updates to IoT devices [41]
Architecture
Decentralized control-plane [40]
Architecture
Overlay management architecture [42]
Framework
Distributed discovery service [45]
Framework
MAAN [142]
Architecture
Squid [143]
Architecture
Information exchange [46]
Architecture
P2P name service discovery [44]
Architecture
Devify framework [144]
Dynamic and self-conﬁgurable solution [145] Architecture
Unique Identity (UID) [146]
IDS alerts management [147]
IoT ﬂexibility [148]

Scheme
Framework
Architecture

DHT
Kademlia
General
General
General
Chord
General
Chord
General
Pastry
Bamboo
General
Kademlia
General
Kademlia
Chord

Domain
Decentralized

DHT Utilization
The basis for the P2P overlay in HPP

Nodes
IoT nodes
Regular nodes DHT has addressed the scalability challenge Distributed
IoT nodes
IoT nodes
IoT nodes
IoT nodes
Regular nodes
Regular nodes
Regular nodes
Regular nodes
IoT nodes
IoT nodes
IoT nodes
IoT nodes
IoT nodes

DSN peer-discovery scheme
Leverages the scalability
Heterogeneous devices management
Multi-attribute and range queries
Load balancing
Information discovery model
Service discovery and scalability
Service discovery model
IoT interoperability
Infrastructure setup and messages routing
ID management
Minimizing the sensors’ alerts number
Mobility and ﬂexibility solution

Decentralized
Decentralized
Decentralized
Distributed
Decentralized
Decentralized
Distributed
Distributed
Distributed
Distributed
Distributed
Decentralized
Distributed

TABLE 4: A summary of DHT-supported solutions in IoT

The nodes are divided into two types: single nodes that
participated in one ring and shared nodes that simultane-
ously participated in at least two rings. The sensors refer
to actual devices with computation, communication and
storage limitations that prevent them from joining the rings
as nodes; thus, they are connected to speciﬁc gateways.
The authors identiﬁed each gateway, sensor and ring using
unique hashed IDs, and some peer rings could intersect
with others via shared nodes. The proposed model proved
its ability to perform identiﬁcation, key insertion and re-
moval, key lookup and node joining and leaving. The model
also met scalability and robustness requirements. In IoT,
everything (e.g. device) is assigned a unique identity, and
management of these identities plays an important role
in evaluating IoT system efﬁciency. The authors in [146]
proposed a correlated lookup scheme to enhance identity
management performance. DHT has been implemented as
the fundamental structure to build the basic methodology.

The work in [147] proposes a framework that con-
trols false alarms generated by Intrusion Detection Sys-
tems (IDSs), by considering prioritization that allocates a
priority indicator to each alert. Kademlia-based DHT has
been adopted for efﬁcient alert transportation, event cor-
relation has been utilized to discover similarities among
events collected by various sensors in order to reduce false
alarm rates. In their proposed architecture, the generated
messages are directed to the collectors via the DHT for
processing, and Kademlia is used to store and convey alarm
information. The collector nodes use clustering and correla-
tion mechanisms to investigate anomalous behaviours and
notify neighboring nodes of speciﬁed attacks. In addition,
Kademlia the nodes form an overlay network and keep
a routing table to help ﬁnd nodes, and inquiry nodes for
communication. The results showed that DHT-supported
solutions offer more accommodations than others solutions,
and the Kademlia is adopted for information routing due
to the high number of generated messages. By increasing
false positive accuracy to more than ≈ 80%, the suggested
framework reduced message generation by ≈ 62% [147].
Another management function that targets IoT ﬂexibility,
was proposed in [148]. The authors presented a DHT-based
design and overlay architecture that meets IoT requirements
(e.g. mobility and ﬂexibility).

6.2.2 Service Discovery

Service discovery refers to the automatic process of ﬁnd-
ing services on a network. DHT has been investigated

by numerous researchers as a potential service discovery
approach, since it offers essential identiﬁer lookup func-
tionality, and can also perform essential roles for highly
scalable and robust global discovery services, as presented
in [46], [149], [43], [138] and [143]. In [43], a DHT-supported
framework for service discovery in IoT has been proposed.
The authors analyzed the various requirements for service
discovery, and presented a summary of ﬁve approaches
summarized from industrial and literature works. They pre-
sented structured P2P systems using DHT as an approach
that can provide high fault tolerance, load balancing, and
the elimination of single points of failure.

OIDA , a DHT-based discovery service, was introduced
in [44]. OIDA is a Bamboo-based DHT, it has been tested
on 350 highly distributed nodes. The experiments showed
that OIDA is capable of meeting all of the basic functional
and non-functional requirements for IoT name services (e.g.
security). The DHT inclusion also promoted the scalability
and load balancing advantages.

The authors in [138] proposed a Blockchain assisted
IoT system that employs data management and distributed
control. They presented a centralized trustworthy capabil-
ity and gave users control over their data. By employing
blockchain as an auditable and decentralized control layer
for the storage layer, their proposed system enabled secure
sharing of data and robust and reliable access control man-
agement. This proposed work introduced blockchain-based
locality-aware decentralized storage that facilitates the data
storage at the networks’ edge.

Another discovery service scheme that employs DHT
is presented in [45]. This method employs a P2P network
scheme to ensure system expansion, resilience, and easy
maintenance. The authors created a layered method by
separating three key features: range query support, multi
attribute indexing, and p2p routing [45]. To ensure ease of
design and execution, they adopted an over-DHT indexing
method. The authors adopted different techniques for man-
aging different layer functions, such as the SFC linearization
technique to map the multiple dimension ﬁeld as a one
dimension ﬁeld, they also used a search structure namely
Preﬁx Hash Tree (PHT) that leverages a generic-based DHT
to get an interface for the second layer and the Kademlia-
based DHT implementation.

Other studies have adopted P2P DHT-based systems to
implement their discovery services, such as the works of
[46], [47] and [48]. The authors in [46] proposed a P2P-based
model to support information exchanges between members

of a supply chain. The authors adopted the Pastry DHT, and
their work highlighted its feasibility for large P2P networks
with twenty thousand nodes, and proved its scalability for
large networks. The work in [47] proposed a P2P network
in which members of the supply chain operate the network
nodes and, thereby, form a structured P2P entire network
with a distorted view of the of all the other nodes. In
[48], the authors focused on the EPCglobal network, and
proposed a discovery service that provides item track and
trace capabilities along the entire supply chain. The work in
[145] proposed a dynamic and self-conﬁgurable infrastruc-
ture on top of a structured P2P network. The authors also
considered the heterogeneity issue and data access by intro-
ducing a set of communication protocols. Some mechanisms
that achieved information ﬂow security and privacy were
introduced as well. The proposed infrastructure relied on a
DHT to set up the infrastructure, along with route messages
among peers.

6.3 DHT-based Applications in IoT

6.3.1 Information Discovery

Multi-Attribute Addressable Network (MAAN) has been
proposed in [142]. This extends the Chord to enable multi-
attribute and range queries by mapping the attribute values
to the Chord identiﬁer using the uniform locality preserving
hashing. It operates by resolving multi-attribute questions
using a single attribute query routing algorithm. In MAAN,
the Chord utilizes a consistent hash to map keys to nodes
and allocates an m-bit identiﬁcation for each node using
a base hashing function (ex. SHA1). By using SHA1, which
generates randomly dispersed identiﬁers, this mapping aids
in load balancing. The authors suggested employing a con-
sistent locality-preserving based hashing function to pro-
vide uniform hashing value distributions. They analyzed
the complexity, and found that each node in MAAN has
only O(logN ) neighbors for N nodes. However, the number
of routing is O(logN + N × Smin), where Smin is the
minimum selectivity range for all aspects [142].

Squid [143] is a P2P system that enables efﬁcient infor-
mation discovery, and has been used for ﬂexible keyword
searches by implementing a DHT-supported structured key-
word search. The authors introduced the deﬁnition of multi-
dimensional information spaces with locality maintenance
in the spaces. This dimensionality reduction scheme maps
the multi-dimensional information space to the physical
peers. Each data component in Squid has a set of keywords
associated with it in a multi-dimensional keyword space.
The data components are points in space, and the keywords
are the coordinates [143]. The Devify framework, a new
IoT software architecture, has been proposed in [144]. It is
intended to address P2P IoT networks and inter-operable
IoT development. The authors adopted the ﬂow-based pro-
gramming (FBP) paradigm in the IoT in order to consider
the application as a data exchange network.

6.4 Open Problems

With the growth of IoT devices, the networks’ management
still has open issues. Many challenges arise with managing

19

IoT networks from the devices’ management to connectiv-
ity. The following items represent the main challenges of
managing IoT networks.

Lack of trust in peers behaviours: IoT newly connected
devices might be a possible entry point for intruders to
target the IoT network. It is an important role to prevent
unlicensed devices from joining the network in order to
retain network safe. Reﬂecting the newly connected devices
to the DHT record with securing the routing is still an open
issue.

Self-management: With the expanding number of IoT
devices, power management, device management and data
management grow with it. such as some IoT devices operate
on AC power, however, other devices operate on batteries.
As well as, each device in IoT networks needs to be installed,
conﬁgured, maintained and updated to tackle issues. Addi-
tionally, IoT devices produce a huge amount of data and
such an amount creates a challenge, and appropriate data
management grows to be essential. DHT solutions helped
somehow in data management hence the power manage-
ment and device management still have open issues.

7 SOCIAL NETWORKS
7.1 System Model

In a Peer-to-Peer (P2P) Online Social Network (OSN), the
social networking services are implemented relying on the
users’ storage and computation capacity without the de-
ployment of a central service provider. For example, users
are able to share information with their friends as well as to
discover new friends while having no complete knowledge
of the network. DHT-based social networks are proposed to
realize the P2P OSNs by providing efﬁcient decentralized
storage management and routing services.

A sample system model of P2P OSNs is depicted in
Figure 15. In a DHT-empowered OSN, nodes are usually
OSN users. The users’ connections in the DHT are managed
through identiﬁers, which are either randomly selected by
peers or upon various performance-concerned metrics with
no central mediator. On the DHT overlay, the identiﬁer of
a node does not necessarily reﬂect a social factor, hence,
the DHT connections may not necessarily reﬂect the social
connections. Rather, the services provided by DHTs are
empowering users to discover their social connections and
their relative activities on the OSN, e.g., each others’ posts.
As explained in Section 2, the DHT is utilized to make
both the nodes as well as their resources addressable and
efﬁciently accessible within the network. The resources in a
DHT-based OSN are the social network data objects such
as posts and news feeds, which makes users enabled to
efﬁciently locating each others’ as well as each others’ social
interactions.

Apart from efﬁcient and distributed routing, storage
management, and query processing, DHT-based P2P OSN
solutions provide more advanced tools and services con-
cerning security, privacy, access control, and service efﬁ-
ciency. A comprehensive list of such services with their
impact on P2P OSNs is presented in the remaining of this
section and is summarized in Table 5. In this table, the Nodes
column refers to the primary representation of the nodes
once a DHT overlay of physical users’ devices is shaped. The

20

proﬁle. This structure allows unique user identiﬁcation by
only knowing the veriﬁcation keys. Moreover, the key-value
bundle has veriﬁable authenticity due to the associated
author-generated signature [50], [150]. As such, no malicious
storing service provider would be able to block accessibility
to a proﬁle by falsifying its network address without having
access to the corresponding signature key.

7.2.2 Spam Protection

Users’ activities in a social network e.g., data exchange
are vulnerable to spammers. Social spammers are entities
that generate invalid data and advertise commercial spam
messages and disseminate malware. Observations prove
that spammers mostly spread their malicious posts or victim
links in a short period. Therefore, the prime challenge to de-
feat spammers and spam content is to be able to distinguish
spam data from genuine data in a real-time fashion. The
conventional spam classiﬁers are centralized and examine
an ofﬂine log of message histories [51]. However, such de-
signs are not adaptable to P2P architecture where data gets
generated in a distributed manner. For a P2P environment, a
spam classiﬁer must adhere to a decentralized architecture
for the data collection and classiﬁcation, and be real-time,
efﬁcient, and scalable. DHT-based group management tech-
niques provide a key component toward timely data aggre-
gation and classiﬁcation. To address spam protection, Oases
[51] and Sifter [52] utilize DHT-based group management.
Groups are formed around OSN users who are willing to
participate in spam protection. The purpose of groups is to
perform data collection, aggregation, and classiﬁcation in a
collaborative and coordinated manner. Ultimately, the result
of classiﬁcation, indicating a data item being spam or not,
is released to the entire group members, and potentially the
entire network.

Oases [51] and Sifter [52] utilize Pastry DHT to manage
OSN users connections. In speciﬁc, OSN users form the
nodes of DHT and the published social contents consti-
tute the data items stored in the DHT. To enable group
management, a DHT-based aggregation tree is deployed
called Scribe. Scribe is a multi-cast tree and an application-
level group communication system built upon Pastry. Users
in a Scribe tree are divided into two types, the root, and
the leaves. The root acts as the coordinator for the leaves
whereas leaves are accountable for the data collection and
processing. Each group is associated with an identiﬁer that
is derived from the group topic. The membership to a group
is done by sending a join message in the DHT overlay to the
group identiﬁer. An overview of spam protection through
DHT-based group management, inspired by Oases design,
is shown in Figure 16.

The utilization of Scribe, as a DHT-based hierarchical
tree, allows the Oases root to disseminate datasets and
instructions through O(log n) hops,
instead of n point-
to-point connections for n leaf agents. Scribe enables a
balanced workload where all the nodes in overlay have
an equal possibility to take different roles (i.e., a root,
parent, leaf agent, or any combination of the above) in
different groups. Moreover, the Scribe structure allows mul-
tiple groups to be supported in one single DHT overlay.
As such, the overhead of maintaining a complex overlay
gets amortized over all the groups. Scribe can also enjoy a

Fig. 15: Overview of DHT-based P2P OSN. Peers connections in the DHT overlay
rely on different metrics and do not necessarily mirror the users’ social links.
Identiﬁers column signiﬁes the nature of the DHT identiﬁers
in the corresponding service. The Architecture indicates the
structure of DHT connections, which can be P2P, super-peer,
or decentralized. In a P2P architecture, all the DHT nodes
exist at an equal hierarchical level and collaboratively sup-
ply the DHT-relevant services. In a super-peer architecture,
a resourceful subset of participants gets involve in the DHT
construction and services. In a decentralized architecture,
the DHT operations are moderated by a known set of
administrative domains where each domain has custody of
its nodes.

7.2 DHT applications in P2P Social Networks

7.2.1 Federated Social Networks

OSN providers mostly follow a closed design and do not
provide a common platform for the exchange of information
across different providers [50]. Users willing to participate
in two different OSN platforms have to create separate
accounts on each platform. The OSN federation allows users
to communicate their information across different OSN plat-
forms in a transparent manner. The federation would lead to
an open and decentralized ecosystem of OSN platforms in
which users get to freely decide on their preferred platform
and yet not losing their established connections in other
networks.

Veriﬁable Distributed Directory Service [49], [50]: The
key to achieve OSN federation is to provide a common
protocol connecting separate OSN platforms and enable
them exchange and share information about their users. The
communication protocol should handle the heterogeneity of
the OSNs implementations and the fact that users’ proﬁles
are hosted by different servers on each platform. At the
heart of it is the ability to uniquely, globally and veriﬁably
locate a user account and retrieve its proﬁle content. SONIC
[49] features a cross-platform communication protocol that
allows different OSNs to federate. SONIC promotes a DHT-
based directory service for user identiﬁcation [50]. Each
peer generates a unique pair of signature and veriﬁcation
keys and shares the veriﬁcation key with her connections. A
user’s information is stored on the DHT overlay of federated
providers as a key-value pair, where the key is derived from
user’s veriﬁcation key and the value is the certiﬁed (i.e.,
cryptographically-signed) network address of the users’

Solution

OSN Federation

Spam protection

Efﬁcient & Trustworthy Routing
& File Discovery

Data Dependency Management

DHT Service
Veriﬁable Distributed Directory
Service [49], [50]

Nodes

Identiﬁers

DHT Type

Architecture

Providers Hash of user veriﬁcation key

Kademlia

Super-peer

Group Management [51], [52] Users
Users
Users
Users
Users
Users

Socially-aware DHT [53]
Auxiliary lookup tables [54]
One-way Clustering [55]
Two-way Clustering [56]
Auxiliary Identiﬁer [57]

Hash of group title & creator
Random
Random
Hilbert value of interests
Physical location & interests
Hash of original & re-encrypted
data

Pastry
Symphony
Chord
-
Cycloid
-

Decentralized
Super-peer
P2P
Super-peer
Super-peer
P2P

TABLE 5: A summary of DHT-based solutions in P2P OSNs

21

interests and social links to resolve search queries. In a
nutshell, social network users form the underlying DHT
connections and each node is associated with a DHT iden-
tiﬁer. In addition to the DHT lookup tables, nodes main-
tain two auxiliary tables reﬂecting nodes’ friendships and
common interests. The friendship table is the outcome of
the SPROUT algorithm [153] in which the table entries are
the identiﬁer of the node’s online friends. The interest table
contains the identiﬁer of nodes that share or look for similar
content as the table owner. The interest table gets populated
incrementally, i.e., when a data search query of a peer is
resolved, the identiﬁer of the data holder gets inserted into
the querying peer’s interest table. Moreover, the nodes in the
interest table are weighted based on the number of quires for
which they hold the queried data item. The higher value of
the weight indicates a higher degree of similarity. To resolve
a query, a node consults its interest table, then invokes the
SPROUT algorithm, and ﬁnally proceeds with the regular
DHT lookup. ROUTIL adopts Chord as the DHT routing
overlay and enhances its performance through the utiliza-
tion of interest tables where the probability of a query being
resolved in a lower number of steps gets higher. Moreover,
ROUTIL improves the security of Chord by incorporating
the SPROUT routing algorithm to use social links to forward
queries.

Clustering in DHTs [55], [56]: Further studies towards a
reliable and efﬁcient DHT-based routing propose clustering
methods to identify groups of peers with common features,
e.g., interests and trust relationships. Once such groups
are identiﬁed, the data sharing and message routing get
restricted among the nodes within the same or similar clus-
ters. This way, the routing process enjoys better reliability
and efﬁciency as well as becomes resilient against nodes’
malicious actions such as providing faulty ﬁles or dropping
query messages. Clusters can be further divided into smaller
groups based on various factors to empower various levels
of granularity on the security and efﬁciency of the routing
paths. Clustering schemes usually utilize methods to sample
users’ identiﬁers from a k-dimensional space where each
dimension represents an attribute and k is the desired num-
ber of attributes. As such, identiﬁer closeness indicates the
similarity in the attribute space. Clusters are formed around
the peers with similar identiﬁers based on some similarity
metrics. Social P2P [55] features one-dimensional clustering
by using Hilbert curve. Each user picks an interest vector
and derives a numerical identiﬁer called Hilbert value using
the Hilbert curve. The users with a close Hilbert value are
then clustered together. The connections inside a cluster
are usually based on social links, e.g., friendship. A DHT
overlay is constructed from clusters ambassadors, i.e., nodes

Fig. 16: Overview of spam detection through DHT-based group management.
fast recovery process or low latency data dissemination by
adjusting the value of the tree fan-out (a high fan-out value
yields a lower latency whereas a lower fan-out enables a fast
failure recovery).

7.2.3 Efﬁcient and Trustworthy Routing and File Discovery

In a DHT-based routing overlay, nodes are assigned random
identiﬁers which results in a random connection among the
peers. This imposes communication costs on the nodes who
get involved in the search process of queries that are not
interested in. Moreover, having the search being traversed
through unknown nodes introduces security issues and
reliability concerns where misbehaving nodes can misroute
or drop a query [151], [152]. The existing studies aim at
enhancing the DHT routing efﬁciency and security by in-
corporating social factors such as users’ mutual trust, and
common interest in the routing process so that queries get
deliberately routed through more trusted and reliable peers.
A summary of these methods is provided in the following.
Socially-aware DHT [53]: In this solution the users’
social proximity is integrated into the DHT routing overlay.
The idea is that users with more mutual friends, as the social
proximity measure, will be placed closer in the identiﬁer
space. Closeness is deﬁned as the Euclidean distance of the
identiﬁers as well as the number of hops in the overlay.
Nodes initially form a DHT from their random identiﬁers,
then they step into a reﬁnery process during which each
node swaps her identiﬁer with one of her immediate peers,
evaluates the cost of the identiﬁer swapping, and accepts
the new identiﬁer in case it brings her closer to her social
connections. Upon a successful swap, ﬁnger tables also get
exchanged between the two nodes.

Auxiliary lookup tables (ROUTIL) [54]: ROUTIL [54]
is a P2P routing algorithm that leverages users’ common

22

right in a P2P environment. However, the existing solutions
[57] rely on the trustworthiness of nodes in admitting the
dependency of their ﬁles to the existing contents. However,
nodes can deliberately misbehave and do not disclose the
origin of the re-shared ﬁles. More robust and reliable solu-
tions can utilize incentivization to encourage the resharing
transparency e.g., ﬁnancial rewards for re-sharing content.
Alternatively, zero-knowledge proof of non-membership
can be leveraged where a data publisher proves her content
is not a copy of any existing OSN content.

Reliable Storage and Retrieval: The reliable storage
and retrieval of data in a DHT-based OSN become a concern
when data hosts are picked randomly. Such hosts have no
mutual trust with the data owner and may refuse to serve
the recent content, and pose an availability and accessibility
threat to the system. One can adopt data replication over
multiple non-colluding hosts to enable better reliability.

Interest-based Identiﬁers: The interest-based routing is
adopted by ROUTIL [54] to enable reliable and secure and
efﬁcient routing. Two nodes have a common interest if
one of them retains the data item that is queried by the
other node. However, this relation would not hold when
storage is assigned to DHT nodes based on their random
identiﬁers. To cope with this issue, interest-driven identiﬁers
like Hilbert values [155] can be utilized to enable interest-
based identiﬁer assignment.

8 MOBILE AD HOC NETWORKS

8.1 System Model

Advances in networking technologies expedite the deploy-
ment of self-organized wireless ad hoc networks. With
the proliferation of the Internet and IoT-enabled devices,
wireless ad hoc networks gain momentum and their ﬁrst-
of-their-kind applications come into reality. In typical wire-
less ad hoc networks, nodes communicate with each other
through wireless links and collaborate to perform spe-
ciﬁc tasks. Mobile Ad Hoc Networks (MANETs) are kind
of wireless ad hoc networks in which the participating
nodes set up a temporary network that is capable of self-
conﬁguration and self-healing without any infrastructure.
Nodes in MANET can be any device that is equipped
with storage, sensing, communication, and computation. In
MANETs, the nodes freely move and perform networking
at any time and anywhere. The applications of MANETs
are present in various domains such as Wireless Personal
Area Networks (WPANs), Body Area Networks (BANs),
Flying Mobile Ad Hoc Networks (FANETs). MANETs can
be formed by any kind of wireless device as demonstrated
in Fig. 18. The wireless devices are equipped with wireless
transmitters and receivers including radio interfaces (e.g.,
IEEE 802.11, IEEE 802.11p, IEEE 802.15, IEEE 802.15.4, IEEE
802.16, Wi-Fi, Bluetooth, ZigBee and WiMAX).

Fig. 18: Architecture of Mobile Ad Hoc Networks

Fig. 17: Overview of DHT-based one-dimensional clustering [55].
featuring higher stability compared to the other members of
the cluster. The search queries are then resolved through the
intra- and inter-cluster routing algorithms. The intra-cluster
routing is based on a random walk, and the inter-cluster
routing is done through the DHT of clusters’ ambassadors.
An overview of this one-dimensional clustering is depicted
in Figure 17. A similar clustering approach is proposed in
[56] using a two-dimensional identiﬁer space of interest and
physical proximity.

7.2.4 Managing Data Dependency

The ability of the users to control, trace, and claim owner-
ship of the content they share is vital given the recent wide
development of digital assets. Users must be able to trace
the number of copies/reshares made out of their data. En-
forcing this becomes non-trivial when content is encrypted.
The randomization used in encryption schemes breaks the
tie between the original and the copied data. To enable
tractability over encrypted content, Ushare [57] augments
the DHT lookup tables with an additional column holding
the hash of the original data. For a key-value pair H(C (cid:48)), C (cid:48)
where c(cid:48) is the re-encryption of C, an extra identiﬁer H(C)
will be retained. This is to reﬂect the link between the
original data and its replicas. The tuple (H(C (cid:48)), H(C)) will
constitute the DHT identiﬁer of C (cid:48). Data items whose ﬁrst
component of their identiﬁers is identical are copies of the
same data.

7.3 Super-peers: A Common Architectural Pattern

In DHT-based P2P social networks, a large portion of OSN
clients is mobile devices that are resource-constrained and
cannot afford bandwidth, liveliness, or storage capacity for
maintaining a DHT structure. As such, super-peer P2P archi-
tecture is widely adopted [49], [50], [50], [53], [55], [56], [150]
to address peers heterogeneity. In this architecture, more sta-
ble peers with adequate storage, bandwidth, and processing
power maintain the DHT structure and support other peers
for complex operations. Thereby, a lower number of peers
get involved in the DHT overlay which yields more efﬁcient
churn handling and lighter DHT maintenance. Due to this
light maintenance overhead, this super-peer architecture
also features scalability, reliability in content distribution
and autonomy in administration [154].

7.4 Open Problems

Authenticated Dependency Management: The data depen-
dency management methods can address contents’ copy-

23

Solution

Ref.
[58]–[61] Network Partitioning & Merging IEEE 802.11
IEEE 802.11
[62], [63] Selﬁsh Node Detection
IEEE 802.11
[64]
Clustering
IEEE 802.11
[65], [66] Multi-path Routing
IEEE 802.11
[67]

Network Partitioning

Purpose of DHT
Routing

Information of Nodes
Reputation Score of Nodes Data Transmission
Dynamic Topology
Information of Nodes
Dynamic Topology
Information of Nodes
Information of Neighbour Trafﬁc Overhead

Communication Type Nodes of DHT

TABLE 6: A summary of DHT-based solutions in MANET

In MANET, the topology changes frequently and all
participating nodes need to participate in routing and
equally contribute to maintenance. The MANET protocols
should be adaptive to such dynamic topological change
which is challenging. Nodes are communicating with each
other through intermediate nodes in a multi-hop manner
to deliver messages from source to destination. Although
MANETs have been investigated for more than a decade,
limited communication range, communication link break-
age, efﬁcient routing, and management protocols are still
major challenges in many applications. To address these
issues in different environments and settings, many solu-
tions have been proposed in the literature. These solutions
propose different approaches and/or methods to address
unique MANET challenges in which they commonly share
the usage of DHT. The DHT is mainly used for storing
information and stored information is leveraged to come up
with efﬁcient routing and management protocols. However,
there are still several challenges that need to be addressed.
In this part of the paper, we want to shed light on this
and want to explore more on the following. First, we want
to understand how DHT is utilized to address the unique
challenges of MANET in existing applications. Second, we
aim to analyze the current limitation of DHT-based solu-
tions and present several open problems and opportunities
for future research. Table 6 summarizes DHT applications in
MANET and the following subsections will discuss them in
detail next.

8.2 DHT Applications in MANET

The research attempting to use the DHT in MANET can be
grouped according to four perspectives as; efﬁcient routing
[58]–[61], data transmission [62], [63], handling the dynamic
topology [64]–[66] and mitigation of the trafﬁc overhead
[67].

8.2.1 Routing

Among the challenges in MANET, routing is the most pop-
ular one. Due to varying topologies and infrastructure-less
architecture, routing becomes the center of many works in
MANET literature. The DHT is used for different purposes
for the sake of achieving scalable and efﬁcient routing. A
survey that compares the features, strengths and weak-
nesses of existing DHT-based routing protocols is presented
in [99]. In DHT-assisted routing, nodes have a logical iden-
tiﬁer (LID) in addition to the universal identiﬁer (UID) (e.g.,
IP/media access control (MAC) address). The nodes are
interconnected with each other via their LIDs on a logical
network. However, if the logical structure does not represent
the physical proximity of nodes then the topology mismatch
problem rises. The topology mismatch problem is further
exacerbated by the network partitioning and merging. Due
to the limited transmission range and self-organizing nature

of MANET, network partitioning and merging can happen
frequently. The DHT is leveraged to keep the relation be-
tween the logical and physical address of nodes in [58]–[61]
to solve the network partitioning and merging. Through the
simulation-based evaluation, it has been shown that DHT-
assisted network partitioning and merging is beneﬁcial in
terms of achieving efﬁcient and scalable routing in MANET.

8.2.2 Data Transmission

In MANET, each node acts autonomously and takes its own
decision. Nodes have direct access to nearby other nodes,
which are located in the communication range. When the
data needs to be disseminated to a destination node, which
is out of the transmission range, then nodes depend on each
other in forwarding the data for reliable communication.
However, some nodes do not want to share resources while
delivering the data at larger distances. These nodes, on the
other hand, are deﬁned as selﬁsh nodes and it is a major
problem in cooperative communication-based MANET ap-
plications. To address the selﬁsh node detection, reputation
scores of the nodes are computed and kept in DHT to
decide the next hope while relaying the data from source to
destination in [62], [63]. Locality-aware DHT is constructed
collaboratively to gather the node’s reputation which consti-
tutes the global reputation. Based on the tracked reputation
scores, selﬁsh nodes are identiﬁed and blacklisted for the
sake of reliable data transmission.

8.2.3 Dynamic Topology

The high mobility and frequent network topology changes
are the distinguishing characteristics of MANETs. Handling
the high mobility and topology changes, on the other hand,
are the most popular research problems that have been
worked on for more than a decade. Researchers leveraged
the DHT and proposed many solutions and/or protocols
to have a scalable and efﬁcient MANET application. For
example, a cluster-based DHT routing protocol is proposed
in [64] to handle the high mobility of nodes. Nearby nodes
are clustered and information of nodes is kept in DHT. The
gateway nodes (e.g., single or multiple nodes) which are in
the radio range of cluster heads act as a relay node while
forwarding data packet among clusters. [65] investigates
multipath routing to solve the link failures which is caused
by the dynamic network topology. Multi-path Dynamic
Address Routing (M-DART) is proposed in which DHT is
leveraged for two main reasons: (i) mapping the node’s
identiﬁer and routing address in a dynamic environment
and (ii) distributing the node’s location information is dis-
tributed throughout the network.

8.2.4 Trafﬁc Overhead

MANET is capable of self-conﬁguration and self-healing
without any infrastructure. However, both the limited trans-
mission range and high mobility of nodes cause network

dis-connectivity which results in loss of Logical Space (LS)
information. The LS of nodes stores the mapping informa-
tion of the LID and UID node pairs. The LS is important
especially in network partitioning where the loss of it may
cause recurrent network partitioning and trafﬁc overhead.
Detecting the partitioning beforehand and replication of
important mapping information may be the solution. [67]
addressed this issue and proposed distributed partitioning
management to improve the performance of DHT-based
routing in MANET. In their proposed solution, the critical
nodes are identiﬁed without creating additional trafﬁc over-
head and mapping information of them is replicated to min-
imize the information loss and communication disruption.

8.3 Open Problems

Utilizing DHTs to address the unique challenges of MANET
brings various research questions in which we believe they
can be further improved in the following three perspectives.
How to enable energy-efﬁcient DHTs? With the pro-
liferation of mobile devices, more research effort has been
put into scalable and efﬁcient MANET protocols. The larger
MANET grows, the more overhead incurs which makes
maintenance, self-conﬁguration, and self-healing challeng-
ing. If we consider the battery constraint of MANET nodes,
power consumption and energy efﬁciency became crucial.
Despite many solutions rely on DHT usage to address the
unique challenge of MANET, the energy efﬁciency of DHTs
is orphaned. MANET has lots of applications and serves
many users at the same time. Ignoring the power consump-
tion of DHT may put MANET into services unavailability.
An energy-efﬁcient DHTs which dynamically adjust the
DHT participating nodes is emerging technology for future
MANET application.

How to preserve DHTs in lossy networks? MANET is
a Low power and Lossy Networks (LLNs) that consists of
many embedded devices with limited power, memory, and
processing resources. The network formation may be trig-
gered based on events and nodes start to sends their local
state to the network. However, due to limited bandwidth
and communication channels shared by different applica-
tions, a small set of nodes can send information through
the network within some speciﬁed time interval. DHTs are
utilized to come up with routing strategies including multi-
path route generation with an assumption of DHTs are man-
aged by nodes through communication. However, a lossy
network is challenging and it is not realistic to assume that
there exists a 100% packet delivery ratio. A detailed study is
needed to understand the DHTs in the lossy network and a
brand new approach is a must to ensure the MANET service
availability even in high lossy networks.

Can DHT itself be standardized? The general trend
of DHT usage in MANET is nodes collaboratively keep
and manage the DHT according to underlying network
topology. Researchers come up with a different version of
implementation according to needs in which there is no
standard DHT in the literature. Many studies claim the
usage of DHTs but the implementation details are hidden.
A standardized DHT implementation with open-source im-
plementation is still an open issue that should be addressed

24

before any practical deployments of DHT-assisted MANET
application.

9 VEHICULAR AD HOC NETWORKS
9.1 System Model

Cars today are equipped with a set of rich resources
consisting of storage, sensing, communication, and com-
putation [156]. Through Vehicle-to-Vehicle (V2V), Vehicle-
to-Infrastructure (V2I), and Vehicle-to-Cloud (V2C) com-
munications, vehicles form Vehicular Ad Hoc Networks
(VANETs) and collaborate over vehicle-to-X (V2X) networks
as demonstrated in Fig. 19. Despite such heterogeneous
V2X networking brings many challenges, it also paves the
way for great opportunities. For example, heterogeneous
communication capabilities of vehicles are leveraged to
come up with a hybrid architecture for delivering the safety
messages with shorter delay and high packet delivery ratio
in [157]. Similarly, radio frequency and visible light hybrid
communication-based architecture are proposed in [158]
to ensure the safety of traveling and maneuvering under
different security attacks.

Although vehicular networking technologies have been
investigated for more than a decade, increasing data de-
mand is still a problem. Today, a major part of the provided
services for connected vehicles relies on interaction with
remote servers. The communication with the data center, on
the other hand, is achieved by cellular communication over
the underlying backbone network which may suffer from
large end-to-end delay and capacity limits. To overcome
these issues, Mobile Edge Computing (MEC) is recently
proposed and standardized over the years. The basic idea in
MEC is to deploy small-scale computing facilities near the
edge of the network to partially take over the computational
tasks of cloud servers. MEC is beneﬁcial in terms of reducing
the end-to-end communication latency as well as improv-
ing the capacity of backbone networks. However, the high
demand and huge data trafﬁc in the radio access network
are still problems. Recently, leveraging vehicle resources in
such a heterogeneous networking environment has given
birth to the Vehicular Cloud (VC) concept [159]. VCs are a
promising solution in which connected vehicles collaborate
with each other through V2X networks and offer their pro-
cessing, storage and communication services as virtual edge
servers (see Fig. 19). Through such virtual edge servers, the
data can be aggregated and/or cached and the latency and
communication overhead in cellular networks could be sig-
niﬁcantly reduced. Furthermore, VCs can be complemented
with conventional cloud and edge computing infrastructure
and vehicle resources can be rented out by other users. Such
architecture can be an enabler of a wide range of novel
applications such as collaborative data storage [160].

Fig. 19 demonstrates the general architecture of VANET
which consists of VCs as virtual edge servers. In such an ar-
chitecture, the collaboration among vehicles is coordinated
to generate advanced vehicular cloud services, which an
individual vehicle cannot make alone. It has been demon-
strated that collaboration enabled vehicular architecture is
an emerging paradigm to utilize the ever-growing compu-
tational resources of intelligent vehicles to form small-scale
virtual edge servers [161]. Although conventional cloud

25

Fig. 19: Architecture of Vehicular Ad Hoc Networks

Solution
Virtual Edge Server
Virtual Network & Storage

Ref.
[68]
[69]
[70]–[72] Virtual Network Infrastructure V2V and V2I
V2V and V2I
[73]
[74]
[75]
[76]
[77]
[78]

Cooperative Download
Trust&Reputation Computation V2V
Secure Communication
Intrusion Detection
Name Data Networking
Federated Learning

Communication Type Management of DHT Nodes of DHT
V2V, V2I and C-V2X Vehicle Layer
V2V, V2I and C-V2X Edge/Cloud Layer
Edge/Cloud Layer
Vehicle Layer
Vehicle Layer
Edge/Cloud Layer
-
Edge/Cloud Layer
Edge/Cloud Layer Metadata of Vehicles

Purpose of DHT
Provided Services of Vehicles
Service Directory & Discovery
Storage Capabilities of Vehicles Service Directory & Discovery
Service Directory & Discovery
Provided Services of Vehicles
Lightweight Coordination
Data Interest of Vehicles
Storage & Look up
Trustworthy of Vehicles
Storage & Look up
Hash Value of Data
Routing
IP Addresses of Vehicles
Routing
Name of Vehicles
Secure & Private Vehicle Election

V2V and V2I
-
V2V and V2I
V2V and V2I

TABLE 7: A summary of DHT-based solutions in VANET

technologies are mature enough to provide services to ve-
hicles, the high mobility of vehicles is the limiting factor
in achieving scalable and efﬁcient VANET applications. To
provide robust service provisioning under different road
topology and vehicle densities, on the other hand, many
solutions have been proposed in the literature. One shared
point in most of the proposed solutions is the utilization of
DHT. DHT is mainly used for storing/retrieving location
and time-sensitive information and it provides a lookup
service with name and value pairs. Vehicles can search
for a service with the name associated with a provided
service. However, there are still several challenges that need
to be addressed. In this part of the paper, we want to go
one step further and shed light on this by exploring the
following. First, we want to understand how DHT is utilized
to address the unique challenges of VANET in existing ap-
plications. The DHT has been studied for some key VANET
applications as summarized in Table 7. Second, we aim to
analyze the current limitation of DHT-based solutions and
present several open problems and opportunities for future
research.

9.2 DHT Applications in VANET

DHT is leveraged for service directory and discovery [68]–
[72], routing and scalability [73]–[77], security and privacy
[78]. Following subsections will discuss them in detail.

9.2.1 Service Directory and Discovery

One key functionality of DHT usage in VANET is the so-
called service directory and discovery. In the service direc-
tory and discovery, vehicles in and around the vehicular
network can register their available services as well as look
up the services offered by other vehicles. Recent research
works have studied some key features in the realization
of DHT-assisted service directory and discovery. Authors
in [68] proposed to form a VC and vehicle’s resources are
provided as virtual edge servers to others. Vehicles are

organized in interconnected groups and the DHT keeps the
vehicles’ provided services. The members of VCs leveraged
the DHT-assisted lookup service to reduce the delay of
service discovery and data transfer. [69] established con-
nected clouds of parked vehicles as temporary network and
storage infrastructure to maintain network connectivity and
provide storage capabilities as a service to other road users.
A Virtual Chord Protocol (VCP) is proposed to track the
connected vehicles as well as their available storage capa-
bilities. The vehicle resources are utilized as virtual network
infrastructures and moving service directories are proposed
in [70]–[72] to bridge service providers and service users.
Vehicles collaboratively keep a DHT-based service directory
to provide media for other vehicles for registering their
services. Cooperative downloading in vehicular heteroge-
neous networks is proposed in [73]. Vehicles collaboratively
maintain a DHT. The DHT is leveraged as a lightweight
coordination mechanism for the vehicles to agree on non-
overlapping subsets of data segments that they are respon-
sible for downloading on behalf of other members.

9.2.2 Routing and Scalability

Routing and scalability are heavily investigated topics in
VANET [162]. Simple broadcasting algorithms are proposed
for local information and geo-routing is leveraged for reach-
ing more distant destinations. Proposed routing methods
work quite well for shorter and highly local transmission.
However, vehicular data on roads are highly dynamic.
Moreover, the system load is much higher when routing is
performed under tens of thousand vehicles at the same time.
The DHT is leveraged and utilized to come up with scalable
and reliable routing strategies. DHT-assisted storage and
lookup methods are proposed to evaluate the trustworthi-
ness and credibility of vehicles in [74]. The trust and repu-
tation values are computed and updated as the vehicles live
inside the vehicular network. Anyone in the network can
query the DHT to retrieve the trust and reputation values in
a scalable manner. A scalable secure communication method

(Physical) Edge ServerV2VConnected VehicleConnected VehicleData CenterCPUCPUCPUCPUCPUCPUC-V2XWi-Fi Access Points,Road Side UnitsV2ICellular Base StationVehicular Cloud As Virtual Edge ServerVehicular Cloud As Virtual Edge ServerV2VC-V2Xis proposed in [75]. Block-chain-assisted DHT-based secure
communication architecture is proposed to keep the hash
values of transmitted data. A survey that explores the intru-
sion detection system in different domains is presented in
[76]. An intrusion detection system requires extensive search
and computation. The survey demonstrates that tracking
the identiﬁed intrusions by DHT is beneﬁcial in terms of
detection accuracy and predicting future intrusions. A name
data networking architecture is combined with DHT to
improve the routing and communication efﬁciency in [77].
The roadside units keep track of the names of the vehicles
(a.k.a. usernames) and the data is forwarded according to
the usernames of vehicles dynamically.

9.2.3 Security and Privacy

Advances in artiﬁcial intelligence and MEC accelerates the
Vehicular Cyber-Physical Systems (VCPS). Services such
as content caching, dynamic resource assignment, efﬁcient
data sharing, and distributed computing become the en-
abler methodologies in reducing the cost and enhancing
the utility of VCPS. Since the data is cached and computed
in a distributed way, security and privacy become a major
vulnerabilities in VCPS. To address this issue privacy pre-
served learning method is proposed in [78]. DHT is kept
by roadside units and all related vehicles are determined by
searching the DHT before the learning process starts.

26

that functions in both vehicle and cloud/edge layers is
another direction of DHT applications that can potentially
improve the beneﬁts.

How to connect to the DHT? In existing solutions,
elected vehicles (e.g. the Cloud Leader) become a gateway
and function as a bridge between the DHT and the other
vehicles. Gateway vehicles periodically send messages to
announce their role and other vehicles request services
through these gateways. If gateway vehicles are distributed
uniformly within the VANET then the connectivity to DHT
is good. However, this could cause congested channel condi-
tions. A study that explores the election of gateway vehicles
is needed to further understand the trade-offs between
performance and cost.

How to connect DHTs with each other? Due to the
distributed nature of VANET, many DHTs may be kept
not only in the vehicle but also in cloud/edge layers.
Sometimes, messages need to be sent from one DHT to
another for service discovery. The DHTs are not necessarily
disconnected from each other therefore the service discovery
messages can be delivered and responded immediately.
An efﬁcient communication protocol to maintain a stable
connection among DHTs in both vehicle and cloud/edge
layers is still an open problem that should be addressed
before any practical deployments of DHT-assisted VANET
applications.

9.3 Open Problems

10 CONCLUSION

The rapid growth of VANET opens a speciﬁc line of re-
search. The proposed concept of combining DHT with the
vehicle and cloud/edge layers brings various research ques-
tions in which we believe are central in the following four
questions.

Which vehicles should keep the DHT? There exist
many applications that utilize the DHT in the vehicle layer.
However, it is not clear how they elect the vehicles to keep
DHT. Cars today have various sets of computing, stor-
age, communication resources. Leveraging too many cars
might cause overhead and the consistency/synchronization
of DHT becomes problematic. Electing a fewer number
of vehicles, on the other hand, results in a bottleneck in
terms of reaching DHT nodes. An intelligent vehicle election
mechanism that handles the dynamic join and leave of ve-
hicles is an emerging enabler technology for future VANET
applications.

Which layer should manage the DHT? As illustrated in
Fig. 19, the VANET applications leverage not only the vehi-
cle but also the cloud/edge layer. Despite it is application-
oriented, there is no clear distinction under what conditions
which layer the DHT should rely on. Collaborative DHT
in the vehicle layer is beneﬁcial in terms of latency via
short-range communications but it becomes problematic
while handling the dynamic join and leave of vehicles. The
cloud/edge layer DHTs is more stable compared to the
collaborative approach in the vehicle layer. However, ex-
changing large amounts of data may require longer-lasting
sessions which is currently one of the limiting factors in
cloud/edge layer DHT applications. A more detailed study
is needed to understand the advantages and drawbacks of
DHT in different layers. Moreover, a hybrid DHT protocol

As distributed key-value stores, DHTs are among the most
signiﬁcant P2P overlay mechanisms enabling efﬁcient ser-
vices such as data storage, replication, query resolution, and
load balancing. With the advances in various distributed
system technologies, the design of novel and efﬁcient DHT-
enabled solutions becomes more and more important. In
this paper, we presented the ﬁrst survey on the state-of-
the-art DHT-based solutions in the emerging technological
domains of edge, fog, and cloud computing, blockchains,
IoT, MANETs, VANETs, and OSNs from system architec-
ture, communication, routing, and technological perspec-
tives, and identiﬁed their open problems along with future
research guidelines.

In the context of edge and fog computing, we studied
DHT utilization as decentralized object storage platforms
for a variety of data objects ranging from simple plain data
objects to intermediary computation results and access con-
trol lists. In the domain of cloud computing, we studied the
applications of DHTs in sharing data objects among the fed-
erated clouds, providing low-latency and highly-available
storage and streaming services, and task managements on
the cloud of containers. When coming to the blockchains,
we showed that DHTs are utilized to support authenti-
cation, scalable storage management, efﬁcient information
dissemination, reliable communication, and augmenting the
decentralized trust in the system. In the area of IoT, our
survey presented DHT-based solutions addressing scalable
service and information discovery. In the OSN domain, we
surveyed DHT-based solutions enabling friend discovery,
data sharing, spam protection, OSNs federation, reliability,
and trustworthiness. Finally, in the context of MANETs and
VANETs, we studied DHT-based solutions to improve the

quality of sensing the environment and sharing the obser-
vations, provide distributed service directory, and adapt to
the high mobility and frequent network topology changes.

REFERENCES

[6]

[1]

[3]

[2]

[5]

I. Stoica, R. Morris, D. Karger, M. F. Kaashoek, and H. Balakrish-
nan, “Chord: A scalable peer-to-peer lookup service for internet
applications,” ACM SIGCOMM Computer Communication Review,
vol. 31, no. 4, pp. 149–160, 2001.
A. Rowstron and P. Druschel, “Pastry: Scalable, decentralized ob-
ject location, and routing for large-scale peer-to-peer systems,” in
IFIP/ACM International Conference on Distributed Systems Platforms
and Open Distributed Processing. Springer, 2001, pp. 329–350.
P. Maymounkov and D. Mazieres, “Kademlia: A peer-to-peer
information system based on the xor metric,” in International
Workshop on Peer-to-Peer Systems. Springer, 2002, pp. 53–65.
[4] M. Simi´c, M. Stojkov, G. Sladi´c, and B. Milosavljevi´c, “Edge
computing system for large-scale distributed sensing systems,”
in 8th International Conference on Information Society and Technology,
2018, p. 36.
J. Song, T. Gu, Y. Ge, and P. Mohapatra, “Smart contract-based
computing resourcestrading in edge computing,” arXiv preprint
arXiv:2006.15824, 2020.
I. Riabi, L. A. Saidane, and H. K.-B. Ayed, “A proposal of a
distributed access control over fog computing: The its use case,”
in 2017 International Conference on Performance Evaluation and
Modeling in Wired and Wireless Networks.
K. Sonbol, ¨O. ¨Ozkasap, I. Al-Oqily, and M. Aloqaily, “Edgekv:
Decentralized, scalable, and consistent storage for the edge,”
Journal of Parallel and Distributed Computing, 2020.
G. Tanganelli, C. Vallati, and E. Mingozzi, “A fog-based dis-
tributed look-up service for intelligent transportation systems,”
in 2017 IEEE 18th International Symposium on a World of Wireless,
Mobile and Multimedia Networks (WoWMoM).
IEEE, 2017, pp. 1–6.
J. Santos, T. Wauters, B. Volckaert, and F. De Turck, “Towards
dynamic fog resource provisioning for smart city applications,”
in 2018 14th International Conference on Network and Service Man-
agement (CNSM).

IEEE, pp. 290–294.
[10] X.-L. Xie, Q. Wang, and P. Wang, “Design of smart container
cloud based on dht,” in 2017 13th International Conference on Nat-
ural Computation, Fuzzy Systems and Knowledge Discovery (ICNC-
FSKD).

IEEE, 2017, pp. 2971–2975.

IEEE, pp. 1–7.

[8]

[7]

[9]

[11] R. K. Gupta, R. Hada, and S. Sudhir, “2-tiered cloud based con-
tent delivery network architecture: An efﬁcient load balancing
approach for video streaming,” in 2017 International Conference on
Signal Processing and Communication (ICSPC).
IEEE, pp. 431–435.
I. Nakagawa, Y. Hashimoto, M. Goto, M. Hiji, Y. Kicuchi,
M. Fukumoto, and S. Shimojo, “Dht extension of m-cloud–
scalable and distributed privacy preserving statistical computa-
tion on public cloud,” in 2015 IEEE 39th Annual Computer Software
and Applications Conference, vol. 3.

IEEE, 2015, pp. 682–683.

[12]

[13] K. Govindarajan, V. S. Kumar, and T. S. Somasundaram, “A
distributed cloud resource management framework for high-
performance computing (hpc) applications,” in 2016 Eighth In-
ternational Conference on Advanced Computing.

IEEE, pp. 1–6.

[15]

[16]

[14] H. Kavalionak, E. Carlini, L. Ricci, A. Montresor, and M. Coppola,
“Integrating peer-to-peer and cloud computing for massively
multiuser online games,” Peer-to-Peer Networking and Applications,
vol. 8, no. 2, pp. 301–319, 2015.
J. Benet, “Ipfs-content addressed, versioned, p2p ﬁle system,”
arXiv preprint arXiv:1407.3561, 2014.
J. Xiong, F. Li, J. Ma, X. Liu, Z. Yao, and P. S. Chen, “A full
lifecycle privacy protection scheme for sensitive data in cloud
computing,” Peer-to-peer Networking and Applications, vol. 8, no. 6,
pp. 1025–1037, 2015.

[17] Y. Hassanzadeh-Nazarabadi, A. K ¨upc¸ ¨u, and ¨O. ¨Ozkasap, “Local-
ity aware skip graph,” in 2015 IEEE 35th International Conference
on Distributed Computing Systems Workshops.
IEEE, 2015, pp. 105–
111.

[18] ——, “Awake: decentralized and availability aware replication
for p2p cloud storage,” in 2016 IEEE International Conference on
Smart Cloud (SmartCloud).

IEEE, 2016, pp. 289–294.

[19] ——, “Laras: Locality aware replication algorithm for the skip
graph,” in NOMS 2016-2016 IEEE Network Operations and Man-
agement Symposium, pp. 324–332.

[20] ——, “Decentralized and locality aware replication method for
dht-based p2p storage systems,” Future Generation Computer Sys-
tems, vol. 84, pp. 32–46, 2018.

27

[21] Y. Hassanzadeh-Nazarabadi, A. K ¨upc¸ ¨u, and O. Ozkasap, “Decen-
tralized utility-and locality-aware replication for heterogeneous
dht-based p2p cloud storage systems,” IEEE Transactions on Par-
allel and Distributed Systems, vol. 31, no. 5, pp. 1183–1193, 2019.
J. Vora, A. Nayyar, S. Tanwar, S. Tyagi, N. Kumar, M. S. Obaidat,
and J. J. Rodrigues, “Bheem: A blockchain-based framework
for securing electronic health records,” in 2018 IEEE Globecom
Workshops.

IEEE, pp. 1–6.

[22]

[23] R. Kalis and A. Belloum, “Validating data integrity with
blockchain,” in 2018 IEEE International Conference on Cloud Com-
puting Technology and Science (CloudCom).

IEEE, pp. 272–277.

[24] C. Brunner, F. Knirsch, and D. Engel, “Sproof: A platform for
issuing and verifying documents in a public blockchain.” in
ICISSP, 2019, pp. 15–25.

[25] C. Cai, X. Yuan, and C. Wang, “Hardening distributed and en-
crypted keyword search via blockchain,” in 2017 IEEE Symposium
on Privacy-Aware Computing (PAC).

IEEE, 2017, pp. 119–128.

[26] R. Iqbal, T. A. Butt, M. Afzaal, and K. Salah, “Trust management
in social internet of vehicles: factors, challenges, blockchain, and
fog solutions,” International Journal of Distributed Sensor Networks,
vol. 15, no. 1, p. 1550147719825820, 2019.

[27] R. Abe, “Blockchain storage load balancing among dht clustered

nodes,” arXiv preprint arXiv:1902.02174, 2019.

[28] R. Abe, S. Suzuki, and J. Murai, “Mitigating bitcoin node storage
size by dht,” in Proceedings of the Asian Internet Engineering
Conference, 2018, pp. 17–23.

[29] Y. Kaneko and T. Asaka, “Dht clustering for load balancing
considering blockchain data size,” in 2018 Sixth International
Symposium on Computing and Networking Workshops (CANDARW).
IEEE, 2018, pp. 71–74.

[30] C.-W. Huang and Y.-C. Chen, “Zerocalo: A lightweight
blockchain based on dht network,” in Proceedings of the 2019 2nd
International Conference on Blockchain Technology and Applications,
2019, pp. 38–42.

[32]

[31] B. Yu, X. Li, and H. Zhao, “Virtual block group: A scalable
blockchain model with partial node storage and distributed hash
table,” The Computer Journal, vol. 63, no. 10, pp. 1524–1536, 2020.
S. Ali, G. Wang, B. White, and R. L. Cottrell, “A blockchain-
based decentralized data storage and access framework for
pinger,” in 2018 17th IEEE International Conference on Trust, Se-
curity and Privacy in Computing and Communications/12th IEEE
International Conference on Big Data Science and Engineering (Trust-
Com/BigDataSE), 2018, pp. 1303–1308.

[33] Y. Hassanzadeh-Nazarabadi, A. K ¨upc¸ ¨u, and ¨O.

¨Ozkasap,
“Lightchain: A dht-based blockchain for resource constrained
environments,” arXiv preprint arXiv:1904.00375, 2019.

[34] K. Matsuoka and T. Suzuki, “Blockchain and dht based lookup
system aiming for alternative dns,” in 2020 2nd International
Conference on Computer Communication and the Internet (ICCCI).
IEEE, 2020, pp. 98–105.

[35] L. Aniello, R. Baldoni, E. Gaetani, F. Lombardi, A. Margheri, and
V. Sassone, “A prototype evaluation of a tamper-resistant high
performance blockchain-based transaction log for a distributed
database,” in 2017 13th European Dependable Computing Conference
(EDCC).

IEEE, 2017, pp. 151–154.

[36] L. Cao and H. Yang, “Building virtual digital library based on p2p
and blockchain,” in 2019 11th International Conference on Intelligent
Human-Machine Systems and Cybernetics (IHMSC), vol. 2.
IEEE,
2019, pp. 341–345.

[37] D. Tracey and C. Sreenan, “Using a dht in a peer to peer
architecture for the internet of things,” in 2019 IEEE 5th World
Forum on Internet of Things (WF-IoT).

IEEE, 2019, pp. 560–565.

[38] E. K. Lua, J. Crowcroft, M. Pias, R. Sharma, and S. Lim, “A survey
and comparison of peer-to-peer overlay network schemes,” IEEE
Communications Surveys & Tutorials, vol. 7, no. 2, pp. 72–93, 2005.
[39] B. Zhang, N. Mor, J. Kolb, D. S. Chan, K. Lutz, E. Allman,
J. Wawrzynek, E. Lee, and J. Kubiatowicz, “The cloud is not
enough: Saving iot from the cloud,” in 7th {USENIX} Workshop
on Hot Topics in Cloud Computing (HotCloud 15), 2015.
J. J. Bolonio, M. Urue ˜na, and G. Camarillo, “A distributed control
plane for the internet of things based on a distributed hash table,”
in International Conference on Mobile Networks and Management.
Springer, 2013, pp. 108–121.

[40]

[41] O. Leiba, Y. Yitzchak, R. Bitton, A. Nadler, and A. Shabtai,

“Incentivized delivery network of iot software updates based on
trustless proof-of-distribution,” in 2018 IEEE European Symposium
on Security and Privacy Workshops (EuroS&PW).
IEEE, pp. 29–39.
[42] B. M. Nguyen, H.-N. Q. Hoang, L. Hluch `y, T. T. Vu, and H. Le,
“Multiple peer chord rings approach for device discovery in iot
environment,” Procedia Computer Science, vol. 110, pp. 125–134,
2017.
S. Evdokimov, B. Fabian, S. Kunz, and N. Schoenemann, “Com-
parison of discovery service architectures for the internet of
things,” in 2010 IEEE International Conference on Sensor Networks,
Ubiquitous, and Trustworthy Computing.
IEEE, 2010, pp. 237–244.
[44] B. Fabian, “Implementing secure p2p-ons,” in 2009 IEEE Interna-

[43]

tional Conference on Communications.

IEEE, 2009, pp. 1–5.

[46]

[45] F. Paganelli and D. Parlanti, “A dht-based discovery service
for the internet of things,” Journal of Computer Networks and
Communications, vol. 2012, 2012.
J. Fisher, F. Burstein, R. Manaszewicz, and K. Lazarenko, “P2p
architecture for ubiquitous supply chain systems,” 2009.
S. Shrestha, D. S. Kim, S. Lee, and J. S. Park, “A peer-to-peer rﬁd
resolution framework for supply chain network,” in 2010 Second
International Conference on Future Networks.

IEEE, pp. 318–322.

[47]

[49]

[48] P. Manzanares-Lopez, J. P. Mu ˜noz-Gea, J. Malgosa-Sanahuja, and
J. C. Sanchez-Aarnoutse, “An efﬁcient distributed discovery ser-
vice for epcglobal network in nested package scenarios,” Journal
of Network and Computer Applications, vol. 34, no. 3, pp. 925–937,
2011.
S. G ¨ond ¨or, F. Beierle, and S. Sharhan, “Sonic: bridging the gap
between different online social network platforms,” in 2015
IEEE International Conference on Smart City/SocialCom/SustainCom.
IEEE, pp. 399–406.
S. G ¨ond ¨or and F. Beierle, “Distributed and domain-independent
identity management for user proﬁles in the sonic online social
network federation,” in International Conference on Computational
Social Networks. Springer, 2016, pp. 226–238.

[50]

[51] H. Xu, L. Hu, P. Liu, Y. Xiao, W. Wang, J. Dayal, Q. Wang, and
Y. Tang, “Oases: an online scalable spam detection system for
social networks,” in 2018 IEEE 11th International Conference on
Cloud Computing (CLOUD).

IEEE, 2018, pp. 98–105.

[52] H. Xu, B. Guan, P. Liu, W. Escudero, and L. Hu, “Harnessing the
nature of spam in scalable online social spam detection,” in 2018
IEEE International Conference on Big Data, 2018, pp. 3733–3736.

[53] M. A. U. Nasir, S. Girdzijauskas, and N. Kourtellis, “Socially-
aware distributed hash tables for decentralized online social
networks,” in 2015 IEEE International Conference on Peer-to-Peer
Computing (P2P).

IEEE, 2015, pp. 1–10.
[54] L. Badis, M. Amad, D. A¨ıssani, K. Bedjguelal, and A. Benkerrou,
“Routil: P2p routing protocol based on interest links,” in 2016
International Conference on Advanced Aspects of Software Engineering
(ICAASE).

IEEE, 2016, pp. 1–5.

[55] G. Liu, H. Shen, and L. Ward, “An efﬁcient and trustworthy
p2p and social network integrated ﬁle sharing system,” IEEE
transactions on computers, vol. 64, no. 1, pp. 54–70, 2013.

[56] H. Shen, Z. Li, and K. Chen, “Social-p2p: an online social network
based p2p ﬁle sharing system,” IEEE Transactions on Parallel and
Distributed Systems, vol. 26, no. 10, pp. 2874–2889, 2014.

[57] A. Chakravorty and C. Rong, “Ushare: user controlled social
media based on blockchain,” in Proceedings of the 11th international
conference on ubiquitous information management and communication,
2017, pp. 1–6.
S. A. Abid, M. Othman, N. Shah, O. Sabir, A. U. R. Khan, M. Ali,
J. Shaﬁ, and S. Ullah, “Merging of dht-based logical networks in
manets,” Transactions on Emerging Telecommunications Technologies,
vol. 26, no. 12, pp. 1347–1367, 2015.

[58]

[59] N. Shah, A. Ahmad, B. Nazir, and D. Qian, “A cross-layer
approach for partition detection at overlay layer for structured
p2p in manets,” Peer-to-Peer Networking and Applications, vol. 9,
no. 2, pp. 356–371, 2016.
S. A. Abid, M. Othman, N. Shah, M. Ali, and A. Khan, “3d-rp:
A dht-based routing protocol for manets,” The Computer Journal,
vol. 58, no. 2, pp. 258–279, 2015.

[60]

[61] N. Shah, A. Ahmad, W. Mehmood, D. Qian, and R. Wang,
“An efﬁcient and scalable routing for manets,” Wireless personal
communications, vol. 75, no. 2, pp. 987–1004, 2014.

[62] K. Ramya and T. Kavitha, “Deterring selﬁsh nodes using hi-
erarchical account-aided reputation system in manet,” in 2016
International Conference on Computing technologies and Intelligent
Data Engineering (ICCTIDE’16).

IEEE, 2016, pp. 1–7.

28

[63] E. Manikandan, S. Muthukumarasamy, and K. Thanigaivelu,
“Stratiﬁed report assisted reputation administration (sra) system
for manets,” in 2016 International Conference on Information Com-
munication and Embedded Systems (ICICES).
IEEE, 2016, pp. 1–5.
[64] A. Tahir, S. A. Abid, and N. Shah, “Logical clusters in a dht-
paradigm for scalable routing in manets,” Computer Networks, vol.
128, pp. 142–153, 2017.

[65] M. Ibrar, M. Ahmad, M. Umar, M. Habib, and M. Iqbal, “Sta-
bility analysis of dht based multi-path routing protocol under
group-based mobility models and entity-based mobility models
in mobile ad-hoc networks,” in 2016 IEEE Information Technology,
Networking, Electronic and Automation Control Conference.
IEEE,
2016, pp. 777–783.

[66] A. Arunachalam and O. Sornil, “A broadcast based random
query gossip algorithm for resource search in non-dht mobile
peer-to-peer networks,” Journal of Computers, vol. 28, no. 1, pp.
209–223, 2017.
S. Zahid, S. A. Abid, N. Shah, S. H. A. Naqvi, and W. Mehmood,
“Distributed partition detection with dynamic replication man-
agement in a dht-based manet,” IEEE Access, vol. 6, pp. 18 731–
18 746, 2018.

[67]

[68] F. Dressler, G. S. Pannu, F. Hagenauer, M. Gerla, T. Higuchi,
and O. Altintas, “Virtual edge computing using vehicular micro
clouds,” in 2019 International Conference on Computing, Networking
and Communications (ICNC), pp. 537–541.

[69] F. Dressler and P. Handle, “Towards a vehicular cloud-using
parked vehicles as a temporary network and storage infrastruc-
ture,” in Proceedings of the 2014 ACM international workshop on
Wireless and mobile technologies for smart cities, pp. 11–18.

[70] F. Hagenauer, C. Sommer, T. Higuchi, O. Altintas, and F. Dressler,
“Poster: Using clusters of parked cars as virtual vehicular net-
work infrastructure,” in 2016 IEEE Vehicular Networking Confer-
ence (VNC), pp. 1–2.

[71] F. Hagenauer and C. Sommer, “Vehicular micro cloud in action:
On gateway selection and gateway handovers,” Ad Hoc Networks,
vol. 78, pp. 73–83, 2018.
S. Ucar, T. Higuchi, and O. Altintas, “Platoon as a mobile vehic-
ular cloud,” in 2019 IEEE Globecom Workshops, pp. 1–6.

[72]

[73] T. Higuchi, R. V. Rabsatt, M. Gerla, O. Altintas, and F. Dressler,
“Cooperative downloading in vehicular heterogeneous networks
at the edge,” in 2019 IEEE Globecom Workshops, pp. 1–5.

[75]

[74] N. Malik, P. Nanda, X. He, and R. Liu, “Trust and reputation in
vehicular networks: A smart contract-based approach,” in 2019
18th IEEE International Conference On Trust, Security And Privacy In
Computing And Communications/13th IEEE International Conference
On Big Data Science And Engineering, 2019, pp. 34–41.
S. Rowan, M. Clear, M. Gerla, M. Huggard, and C. M. Goldrick,
“Securing vehicle to vehicle communications using blockchain
through visible light and acoustic side-channels,” arXiv preprint
arXiv:1704.02553, 2017.
S. Raj and R. Rajesh, “Descriptive analysis of hash table based
intrusion detection systems,” in 2016 International Conference on
Data Mining and Advanced Computing.
IEEE, 2016, pp. 233–240.
[77] K. Jain and A. Jeyakumar, “An rsu based approach: A solution to
overcome major issues of routing in vanet,” in 2016 International
Conference on Communication and Signal Processing (ICCSP).
IEEE,
2016, pp. 1265–1269.

[76]

[78] Y. Lu, X. Huang, Y. Dai, S. Maharjan, and Y. Zhang, “Federated
learning for data privacy preservation in vehicular cyber-physical
systems,” IEEE Network, vol. 34, no. 3, pp. 50–56, 2020.

[79] A. S. Tanenbaum and M. Van Steen, Distributed systems: principles

[80]

and paradigms. Prentice-Hall, 2007.
S. Androutsellis-Theotokis and D. Spinellis, “A survey of peer-to-
peer content distribution technologies,” ACM computing surveys
(CSUR), vol. 36, no. 4, pp. 335–371, 2004.

[81] G. Fersi, W. Louati, and M. B. Jemaa, “Distributed hash table-
based routing and data management in wireless sensor networks:
a survey,” Wireless networks, vol. 19, no. 2, pp. 219–236, 2013.
[82] G. Urdaneta, G. Pierre, and M. V. Steen, “A survey of dht security
techniques,” ACM Computing Surveys (CSUR), vol. 43, no. 2, pp.
1–49, 2011.

[83] A. Yousefpour, C. Fung, T. Nguyen, K. Kadiyala, F. Jalali, A. Ni-
akanlahiji, J. Kong, and J. P. Jue, “All one needs to know about fog
computing and related edge computing paradigms: A complete
survey,” Journal of Systems Architecture, vol. 98, pp. 289–330, 2019.
[84] P. Varshney and Y. Simmhan, “Demystifying fog computing:
Characterizing architectures, applications and abstractions,” in

2017 IEEE 1st International Conference on Fog and Edge Computing
(ICFEC).

IEEE, 2017, pp. 115–124.

[85] V. Karagiannis, “Compute node communication in the fog: Sur-
vey and research challenges,” in Proceedings of the Workshop on
Fog Computing and the IoT, 2019, pp. 36–40.

[86] G. Wood et al., “Ethereum: A secure decentralised generalised
transaction ledger,” Ethereum project yellow paper, vol. 151, no.
2014, pp. 1–32, 2014.

[87] A. Hentschel, Y. Hassanzadeh-Nazarabadi, R. Seraj, D. Shirley,
and L. Lafrance, “Flow: Separating consensus and compute–
block formation and execution,” arXiv preprint arXiv:2002.07403,
2020.

[88] A. Kosba, A. Miller, E. Shi, Z. Wen, and C. Papamanthou, “Hawk:
The blockchain model of cryptography and privacy-preserving
smart contracts,” in 2016 IEEE symposium on security and privacy
(SP).

IEEE, 2016, pp. 839–858.

[89] C. Wright and A. Serguieva, “Sustainable blockchain-enabled
services: Smart contracts,” in 2017 IEEE International Conference
on Big Data, 2017, pp. 4255–4264.

S.

[90] Y. Hassanzadeh-Nazarabadi, N. Nayal,

S. Hamdan,
¨O. ¨Ozkasap, and A. K ¨upc¸ ¨u, “A containerized proof-of-concept
implementation of lightchain system,” in 2020 IEEE International
Conference on Blockchain and Cryptocurrency (ICBC).
IEEE, 2020,
pp. 1–2.

[91] Y. Hassanzadeh-Nazarabadi, A. K ¨upc¸ ¨u, and ¨O.

¨Ozkasap,
“Lightchain: Scalable dht-based blockchain,” IEEE Transactions
on Parallel and Distributed Systems, vol. 32, no. 10, pp. 2582–2593,
2021.

[92] Y. Hassanzadeh-Nazarabadi, K. Kshatriya, and ¨O.

IEEE, 2021, pp. 1–2.

¨Ozkasap,
“Smart contract-enabled lightchain test network,” in IEEE IN-
FOCOM 2021-IEEE Conference on Computer Communications Work-
shops (INFOCOM WKSHPS).
S. Cherbal, A. Boukerram, and A. Boubetra, “A survey of dht
solutions in ﬁxed and mobile networks,” International Journal of
Communication Networks and Distributed Systems, vol. 17, no. 1, pp.
14–42, 2016.
S. M. Ghaleb, S. Subramaniam, Z. A. Zukarnain, and
for iot: a survey,”
A. Muhammed, “Mobility management
EURASIP Journal on Wireless Communications and Networking, vol.
2016, no. 1, pp. 1–25, 2016.

[93]

[94]

[95] X. Zuo and A. Iamnitchi, “A survey of socially aware peer-to-
peer systems,” ACM Computing Surveys (CSUR), vol. 49, no. 1,
pp. 1–28, 2016.

[96] F. Jameel, S. Wyne, D. N. K. Jayakody, G. Kaddoum, and
R. O’Kennedy, “Wireless social networks: A survey of recent
advances, applications and challenges,” IEEE Access, vol. 6, pp.
59 589–59 617, 2018.

[97] M. Siddula, L. Li, and Y. Li, “An empirical study on the privacy
preservation of online social networks,” IEEE Access, vol. 6, pp.
19 912–19 922, 2018.

[98] A. De Salve, P. Mori, and L. Ricci, “A survey on privacy in
decentralized online social networks,” Computer Science Review,
vol. 27, pp. 154–176, 2018.
S. A. Abid, M. Othman, and N. Shah, “A survey on dht-based
routing for large-scale mobile ad hoc networks,” ACM Computing
Surveys (CSUR), vol. 47, no. 2, pp. 1–46, 2014.

[99]

[100] C. Cooper, D. Franklin, and M. Ros, “A comparative survey
of vanet clustering techniques,” IEEE Communications Surveys &
Tutorials, vol. 19, no. 1, pp. 657–681, 2016.

[101] J. Aspnes and G. Shah, “Skip graphs,” Acm transactions on algo-

rithms (talg), vol. 3, no. 4, pp. 37–es, 2007.

[102] H. Shen, C.-Z. Xu, and G. Chen, “Cycloid: a constant-degree
and lookup-efﬁcient p2p overlay network,” in 18th International
Parallel and Distributed Processing Symposium, 2004.
IEEE, p. 26.
[103] A. N. Toosi, R. N. Calheiros, and R. Buyya, “Interconnected cloud
computing environments: Challenges, taxonomy, and survey,”
ACM Computing Surveys (CSUR), vol. 47, no. 1, pp. 1–47, 2014.

[104] P. Sharma, R. Jindal, and M. D. Borah, “Blockchain technology for
cloud storage: A systematic literature review,” ACM Computing
Surveys (CSUR), vol. 53, no. 4, pp. 1–32, 2020.

[105] S. B. ElMamy, H. Mrabet, H. Gharbi, A. Jemai, and D. Trentesaux,
“A survey on the usage of blockchain technology for cyber-
threats in the context of industry 4.0,” Sustainability, vol. 12,
no. 21, p. 9179, 2020.

[106] D. Berdik, S. Otoum, N. Schmidt, D. Porter, and Y. Jararweh, “A
survey on blockchain for information systems management and
security,” Information Processing & Management, vol. 58, no. 1, p.

102397, 2021.

[107] J. Katz and Y. Lindell, Introduction to modern cryptography. CRC

press, 2014.

[108] J. Kurose and K. Ross, “Computer networks: A top down ap-

proach featuring the internet,” Peorsoim Addison Wesley, 2010.

29

[109] Y. Hassanzadeh-Nazarabadi, N. Nayal, S. S. Hamdan, A. U.
¨Ozkasap, and A. K ¨upc¸ ¨u, “Skip graph middleware
S¸ahin,
implementation,” in 2020 International Symposium on Reliable Dis-
tributed Systems (SRDS).

IEEE, 2020, pp. 335–337.

¨O.

[110] M. Satyanarayanan, “The emergence of edge computing,” Com-

puter, vol. 50, no. 1, pp. 30–39, 2017.

[111] K. Dolui and S. K. Datta, “Comparison of edge computing
implementations: Fog computing, cloudlet and mobile edge com-
puting,” in 2017 Global Internet of Things Summit.
IEEE, pp. 1–6.
[112] F. Bonomi, R. Milito, and J. Zhu, “Fog computing and its role in
the internet of things,” in Proceedings of the ﬁrst edition of the MCC
workshop on Mobile cloud computing, 2012, pp. 13–16.

[113] M. D’Angelo and M. Caporuscio, “Sa-chord: A self-adaptive p2p
overlay network,” in 2018 IEEE 3rd International Workshops on
Foundations and Applications of Self* Systems (FAS* W).
IEEE,
2018, pp. 118–123.

[114] J. Xie, C. Qian, D. Guo, X. Li, S. Shi, and H. Chen, “Efﬁcient
data placement and retrieval services in edge computing,” in
2019 IEEE 39th International Conference on Distributed Computing
Systems (ICDCS).
IEEE, 2019, pp. 1029–1039.

[115] B. G. Assefa and ¨O. ¨Ozkasap, “A survey of energy efﬁciency in
sdn: Software-based methods and optimization models,” Journal
of Network and Computer Applications, vol. 137, pp. 127–143, 2019.
[116] A. Bessani, J. Sousa, and E. E. Alchieri, “State machine replication
for the masses with bft-smart,” in 2014 44th Annual IEEE/IFIP
International Conference on Dependable Systems and Networks. IEEE,
2014, pp. 355–362.

[117] D. Ongaro and J. Ousterhout, “In search of an understandable
consensus algorithm,” in 2014 {USENIX} Annual Technical Con-
ference ({USENIX}{ATC} 14), 2014, pp. 305–319.

[118] T. Nakayama and T. Asaka, “Peer-to-peer bidirectional streaming
using mobile edge computing,” in 2017 Fifth International Sympo-
sium on Computing and Networking.

IEEE, pp. 263–266.

[119] S. Wang, L. Ouyang, Y. Yuan, X. Ni, X. Han, and F.-Y. Wang,
“Blockchain-enabled smart contracts: architecture, applications,
and future trends,” IEEE Transactions on Systems, Man, and Cyber-
netics: Systems, vol. 49, no. 11, pp. 2266–2277, 2019.

[120] R. Kaur, D. Gabrijelˇciˇc, and T. Klobuˇcar, “Churn handling strate-
gies to support dependable and survivable structured overlay
networks,” IETE Technical Review, pp. 1–17, 2020.
[121] Y. Hassanzadeh-Nazarabadi, A. K ¨upc¸ ¨u, and ¨O.

¨Ozkasap, “In-
terlaced: Fully decentralized churn stabilization for skip graph-
based dhts,” Journal of Parallel and Distributed Computing, 2020.

[122] C. Zheng, G. Shen, S. Li, and S. Shenker, “Distributed segment
tree: Support of range query and cover query over dht.” in IPTPS,
2006.

[123] J. Gao and P. Steenkiste, “An adaptive protocol for efﬁcient
support of range queries in dht-based systems,” in Proceedings
of the 12th IEEE International Conference on Network Protocols, 2004.
ICNP 2004.

IEEE, 2004, pp. 239–250.

[124] J. Kurose and K. Ross, “Computer networking: A top-down

approach, global edition,” 2017.

[125] J. Zhou, “A cost-efﬁcient resource provisioning algorithm for
dht-based cloud storage systems,” Concurrency and Computation:
Practice and Experience, vol. 28, no. 18, pp. 4485–4506, 2016.
[126] J. Zhou and W. He, “A novel resource provisioning model for
dht-based cloud storage systems,” in IFIP International Conference
on Network and Parallel Computing. Springer, 2014, pp. 257–268.
[127] A. Auradkar, C. Botev, S. Das, D. De Maagd, A. Feinberg, P. Ganti,
L. Gao, B. Ghosh, K. Gopalakrishna, B. Harris et al., “Data infras-
tructure at linkedin,” in 2012 IEEE 28th International Conference on
Data Engineering.
IEEE, 2012, pp. 1370–1381.

[128] T. H. Cormen, C. E. Leiserson, R. L. Rivest, and C. Stein, Introduc-

tion to algorithms. MIT press, 2009.

[129] J. Turnbull, The Docker Book: Containerization is the new virtualiza-

tion.

James Turnbull, 2014.

[130] C. Pahl, A. Brogi, J. Soldani, and P. Jamshidi, “Cloud container
technologies: a state-of-the-art review,” IEEE Transactions on Cloud
Computing, 2017.

[131] (2020) Kubernetes. [Online]. Available: https://kubernetes.io/
[132] M. Ito, A. Saito, and T. Nishizeki, “Secret sharing scheme real-
izing general access structure,” Electronics and Communications in

Japan (Part III: Fundamental Electronic Science), vol. 72, no. 9, pp.
56–64, 1989.

[133] L. Lamport, “Time, clocks, and the ordering of events in a
distributed system,” in Concurrency: the Works of Leslie Lamport,
2019, pp. 179–196.

[134] K. Fan, S. Sun, Z. Yan, Q. Pan, H. Li, and Y. Yang, “A blockchain-
based clock synchronization scheme in iot,” Future Generation
Computer Systems, vol. 101, pp. 524–533, 2019.

[135] Q. Chen, G. Srivastava, R. M. Parizi, M. Aloqaily, and I. Al Rid-
hawi, “An incentive-aware blockchain-based solution for internet
of fake media things,” Information Processing & Management,
vol. 57, no. 6, p. 102370, 2020.

[136] K. Fanning and D. P. Centers, “Blockchain and its coming impact
on ﬁnancial services,” Journal of Corporate Accounting & Finance,
vol. 27, no. 5, pp. 53–57, 2016.

[137] M. Bernardini, D. Pennino, and M. Pizzonia, “Blockchains meet
distributed hash tables: Decoupling validation from state stor-
age,” arXiv preprint arXiv:1904.01935, 2019.

[138] H. Shafagh, L. Burkhalter, A. Hithnawi, and S. Duquennoy,
“Towards blockchain-based auditable storage and sharing of iot
data,” in Proceedings of the 2017 on Cloud Computing Security
Workshop, 2017, pp. 45–50.

[139] H. Wu, Z. Li, B. King, Z. Ben Miled, J. Wassick, and J. Tazelaar,
“A distributed ledger for supply chain physical distribution
visibility,” Information, vol. 8, no. 4, p. 137, 2017.

[140] G. Zyskind, O. Nathan, and A. Pentland, “Enigma: Decentralized
computation platform with guaranteed privacy,” arXiv preprint
arXiv:1506.03471, 2015.

[141] L. Tseng, X. Yao, S. Otoum, M. Aloqaily, and Y. Jararweh,
“Blockchain-based database in an iot environment: challenges,
opportunities, and analysis,” Cluster Computing, vol. 23, no. 3,
pp. 2151–2165, 2020.

[142] M. Cai, M. Frank, J. Chen, and P. Szekely, “Maan: A multi-
attribute addressable network for grid information services,”
Journal of Grid Computing, vol. 2, no. 1, pp. 3–14, 2004.

[143] C. Schmidt and M. Parashar, “Squid: Enabling search in dht-
based systems,” Journal of Parallel and Distributed Computing,
vol. 68, no. 7, pp. 962–975, 2008.

[144] J. Chen, “Devify: decentralized internet of things software frame-
work for a peer-to-peer and interoperable iot device,” ACM
SIGBED Review, vol. 15, no. 2, pp. 31–36, 2018.

infrastructure,” in 2017 Wireless Days.

[145] V. Santos, J. P. Barraca, and D. Gomes, “Secure decentralized iot
IEEE, 2017, pp. 173–175.
[146] Q. Shen, Y. Liu, Z. Zhao, S. Ci, and H. Tang, “Distributed hash
table based id management optimization for internet of things,”
in Proceedings of the 6th International Wireless Communications and
Mobile Computing Conference, 2010, pp. 686–690.

[156] O. Altintas, F. Dressler et al., “Making cars a main ict resource in
smart cities,” in 2015 IEEE Conference on Computer Communications
Workshops (INFOCOM WKSHPS), pp. 582–587.

30

[147] M. Nasir, K. Muhammad, P. Bellavista, M. Y. Lee, and M. Sajjad,
“Prioritization and alert fusion in distributed iot sensors using
kademlia based distributed hash tables,” IEEE Access, vol. 8, pp.
175 194–175 204, 2020.

[148] G. Fersi, “A distributed and ﬂexible architecture for internet of
things,” Procedia Computer Science, vol. 73, pp. 130–137, 2015.
[149] B. Fabian and O. Gunther, “Distributed ons and its impact on
privacy,” in 2007 IEEE International Conference on Communications.
IEEE, 2007, pp. 1223–1228.

[150] E. Franchi and A. Poggi, “Blogracy: A peer-to-peer social net-
work,” in Censorship, Surveillance, and Privacy: Concepts, Method-
ologies, Tools, and Applications.

IGI global, 2019, pp. 675–696.

[151] S. T. Boshrooyeh and O. Ozkasap, “Guard: Secure routing in skip
graph,” in 2017 IFIP Networking Conference (IFIP Networking) and
Workshops.

IEEE, 2017, pp. 1–2.

[152] S. Taheri-Boshrooyeh, A. U. S¸ahin, Y. Hassanzadeh-Nazarabadi,
and ¨O. ¨Ozkasap, “A proof-of-concept implementation of guard
secure routing protocol,” in 2020 International Symposium on Reli-
able Distributed Systems (SRDS).

IEEE, 2020, pp. 332–334.

[153] S. Marti, P. Ganesan, and H. Garcia-Molina, “Sprout: P2p routing
with social networks,” in International Conference on Extending
Database Technology. Springer, 2004, pp. 425–435.

[154] M. H. Tran, S. V. U. Ha et al., “Decentralized online social network
using peer-to-peer technology,” REV Journal on Electronics and
Communications, vol. 5, no. 1-2, 2016.

[155] D. Bayer and M. Stillman, “Computation of hilbert functions,”

Journal of Symbolic Computation, vol. 14, no. 1, pp. 31–50, 1992.

[157] S. Ucar, S. C. Ergen, and O. Ozkasap, “Multihop-cluster-based
IEEE 802.11 p and LTE hybrid architecture for VANET safety
message dissemination,” IEEE Transactions on Vehicular Technol-
ogy, vol. 65, no. 4, pp. 2621–2636, 2015.

[158] ——, “IEEE 802.11 p and visible light hybrid communication
based secure autonomous platoon,” IEEE Transactions on Vehicular
Technology, vol. 67, no. 9, pp. 8667–8681, 2018.

[159] T. Higuchi, J. Joy, F. Dressler, M. Gerla, and O. Altintas, “On
the feasibility of vehicular micro clouds,” in 2017 IEEE Vehicular
Networking Conference (VNC), pp. 179–182.

[160] S. Ucar, T. Higuchi, and O. Altintas, “Collaborative data storage
by a vehicular micro cloud,” in 2019 IEEE Vehicular Networking
Conference (VNC), pp. 1–2.

[161] T. Higuchi, S. Ucar, and O. Altintas, “Ofﬂoading tasks to vehicu-
lar virtual edge servers,” in 2019 IEEE 16th International Conference
on Mobile Ad Hoc and Sensor Systems Workshops, pp. 162–163.
[162] G. Karagiannis, E. Altintas, Onurand Ekici, G. Heijenk, B. Jaru-
pan, K. Lin, and T. Weil, “Vehicular networking: A survey and
tutorial on requirements, architectures, challenges, standards and
solutions,” IEEE communications surveys & tutorials, vol. 13, no. 4,
pp. 584–616, 2011.

