Extorsionware: Exploiting Smart Contract
Vulnerabilities for Fun and Proﬁt

Alessandro Brighente, Mauro Conti Fellow, IEEE, and Sathish Kumar Senior Member, IEEE,

1

2
2
0
2

r
p
A
8

]

R
C
.
s
c
[

2
v
3
4
8
9
0
.
3
0
2
2
:
v
i
X
r
a

Abstract—Smart Contracts

(SCs) publicly deployed on
blockchain have been shown to include multiple vulnerabilities,
which can be maliciously exploited by users.

In this paper, we present extorsionware, a novel attack
exploiting the public nature of vulnerable SCs to gain control
over the victim’s SC assets. Thanks to the control gained over
the SC, the attacker obliges the victim to pay a price to re-gain
exclusive control of the SC.

Index Terms—Blockchain, smart contract, ransomware, zero-

knowledge proof

I. INTRODUCTION

are

S MART Contracts

the main enablers of new
blockchain-based services and decentralized applications
thanks to their self-veriﬁcation, self-execution, and tamper
resistance. Due to these features, they are used by multiple
untrusted parties to stipulate agreements that are publicly
veriﬁable. The impact of this technology is demonstrated by
the number of actively deployed Smart Contracts (SCs), whose
number increased by 100 times in the last couple of years [1].
When deployed in permission-less blockchains, SCs’ code is
publicly available. Therefore, anyone having access to the
blockchain can investigate the SC’s code. This allows external
actors to gain insights on the procedures and operations that
SCs execute, both in terms of amount of assets transferred
and in terms of parties involved. Such information can be
exploited by an attacker to select a suitable target to maximize
the reward associated with a possible attack. In particular,
loopholes or vulnerabilities leading to recurrent SC behaviors,
can be exploited by an attacker to steal assets from the account
connected to the victim’s SC.

The vulnerabilities associated with backdoors or non-
restricted access to systems are very well known these days. In
particular, during the last years, a large number of systems and
companies were subject to ransomware attacks [2]. In these
attacks, the accessibility to systems’ resources is compromised
by an attacker gaining access to the network and encrypting
all the accessible sensitive information. The attacker exploits
the fact that attacks towards robust cryptographic protocols
have no solution other than the brute-force exploration of all
possible keys, which however requires an unfeasible amount
of time to ﬁnd the correct key. The victim has no choice other
than paying the required ransom to the attacker to get the key
and gaining back access to the encrypted sensitive information.

A. Brighente and M. Conti are with the Department of Mathematics and
HIT Research Center, University of Padova, via Trieste 63, Padova, Italy e-
mail: ﬁrstname.lastname@unipd.it.

S. Kumar is with Cleveland State University, Electrical Engg. and Computer

Science, Cleveland, OH, USA.

The number of ransomware attacks and the requested ransom
amount signiﬁcantly increased in 2021, with a last signiﬁcant
example from the U.S. department of justice that paid 2.3
Million Dollars in rasnom in June 2021 [3]. Therefore, the
presence of vulnerabilities might not only impact on the
system’s functionalities, but also provide attackers means for
economic attacks.

In this work, we present the extorsionware, a novel attack
methodology inspired by ransomware attacks and targeting
SCs. The public nature of smart contracts together with the
lack of a fully secure SC development framework, provide
attackers with means for continuous exploitation of the iden-
tiﬁed vulnerability. Thanks to this, the attacker might be able
to cause a continuous damage that allows for the request of a
ransom to stop the exploitation. This concept is similar to a
ransomware. However, instead of denying access to restricted
data via encryption, the attacker is able to undermine the
security of the SC and its related operations. We discuss
throughout the paper some of the vulnerabilities that can be
exploited and the damage they may cause. We also explain
why there is no simple workaround at
the victim’s side.
Although several tools for designing secure SC are available
for developers [4], a recent study showed that the majority of
the currently deployed SCs exhibit some vulnerabilities [5].
Therefore, our framework represents a serious threat and shall
not be overlooked.

II. EXTORSIONWARE BASIC BLOCKS

The extorsionware merges a technology,

i.e., SC, with
an attack methodology, i.e., ransomware. In this section we
review both the technology and the attack methodology. In
particular, we ﬁrst provide an overview of the SC technology,
explaining how it works and how it can be used. Then, we
review the ransomware attack.

A. Smart Contract

SCs are low-level programs stored and running on a
blockchain. They are usually part of an event driven program,
i.e., a program whose actions depend on the stimuli received
by other on-chain or off-chain actors [6]. SCs can execute
different set of actions, such as transfer of funds, issuing
tickets, and registering vehicles. Thanks to their self-execution
design, SCs do not need human monitoring. Rather,
they
autonomously execute actions including, among the others, the
creation of other contracts. The terms of agreement between
the involved parties determine the set of actions and actors
that determine the design and coding of the SC. Compared

 
 
 
 
 
 
to other types of contracts, SCs provide advantages such as
the immutability of the information and trust enforcement
among untrusted parties thanks to the use of the blockchain
technology. In fact, in order to revert a transaction or alter
the information provided or shared by a SC, a malicious actor
would need to revert the entire blockchain. This feature holds
also for the SC itself, as it cannot be modiﬁed unless altering
the information stored in the blockchain. Notice however that,
as for all other software, a certain degree of freedom for
modiﬁcation after deployment is needed to ﬁx possible bugs
and upgrade the SC. SCs provide transparency to parties,
as no third regulatory party is involved and the encrypted
record of transactions is shared among all the participants. A
further advantage of their decentralization is the time needed
to execute transactions. In fact, there is no need to wait for
the third party regulatory approval before execution, reducing
hence the delays compared to other centralized systems.

SCs can actively issue transactions or make external calls to
other SCs to delegate the transaction execution [7]. SC can also
perform internal calls, i.e., calls generated within a contract
that are not recorded on chain. SCs are also allowed to receive
input parameters and values to use in the function execution.
To execute a SC, the sender needs to pay a fee associated to
the contract’s computational cost. In Ethereum-based SCs, the
fee is associated to units of gas, and this value is agreed upon
before the instruction execution. The gas is used to reward
the miner of the block containing the transaction, and any
remaining gas is refunded to the issuer. To avoid loopholes
where transaction are never terminated due to inﬁnite cycles,
each SC deﬁnes a gas limit that can be used for contract
execution. An out of gas exception is thrown whenever the
gas limit is reached.

SCs’ code can be stored in plaintext in the blockchain [8].
Therefore, SCs stored in permissionless blockchains are pub-
licly available, and can be read by anyone accessing the
network. A similar concept holds for permissioned blockchain,
where access to code is provided upon authorization. However,
in both cases, the set of actions and triggering conditions of
the SC can be accessed by simply accessing to the block where
it is stored. This feature is exploited to provide transparency
to the involved parties. However, as we will later discuss, this
also allows attackers to identify and exploit SC vulnerabilities.

B. Ransomware Attack

In a ransomware attack, a malicious user ﬁnds and exploit
a vulnerability that allow accessing to resources of a victim’s
system. In particular, the attacker renders inaccessible such
resources to the victim, and demands for a ransom to return
the stolen assets. The ransomware attack can be divided in
ﬁve phases [9], as depicted in Figure 1. The ﬁve phases can
be described as follows:

1) Exploitation and Infection. In this phase, the attacker
either discovers a vulnerability in a target system, or
injects malicious software in the victim’s systems via
social engineering attack (e.g., phishing). Exploitation
can be performed also via exploit kit, which explore
and identify common system’s vulnerabilities. More

2

Fig. 1. Five phases of a ransomware attack.

uncommon (although likely) cases include leaking of
the victim’s sensitive information such as passwords for
accessing the system.

2) Delivery and Execution. In this phase, the attacker
sends the actual ransomware executable and runs it on
the victim’s system. The attacker usually exploits strong
encryption to prevent the identiﬁcation of the executable.
Most of these malware are equipped with persistence
mechanisms, such that
in case of reboot during the
encryption process, the malware can pick up from where
it has been interrupted.

3) Back-up Spoliation. This phase is peculiar of ran-
somware attacks. The malware, after few seconds from
its execution, removes all back-up ﬁles or folders, as
well as shadow copies to prevent the victim to recover
the encrypted data without paying the ransom. The
ransomware malware is usually able to remove eventual
lockers on such ﬁles.

4) Encryption. After deleting all back-up copies, the ran-
somware malware starts encrypting ﬁles on the victim’s
system. Depending on the malware implementation, the
encryption keys are either agreed with the command
and control server, or without reaching the internet.
Encryption is performed via strong mechanisms, such
as AES 256, such that the victim is not able to break
the encryption without knowing the keys. Depending on
the type of system and its connection with other network
components, the malware may be able to encrypt ﬁles
distributed over multiple network nodes.

5) User Notiﬁcation and Clean-Up. After successfully
delivering the attack, the ransomware software usually
presents to the victim instructions on how to recover
ﬁles. The victim is given a couple of days, after which
the ransom amount progressively increases. Finally, the
malware removes itself from the system to avoid the
collection of forensics information.

III. SMART CONTRACT VULNERABILITIES

Similar to classical contracts written on paper, SCs need
to be written by humans. The main difference is that, in the
case of SC, the writer is a programmer that translates the
set of instructions and obligations stipulated by the involved

parties into executable code. Statistics show that, due to human
fallibility, codes contain a large number of bugs. An estimate
reports an average number of 15 - 50 errors per 1000 lines
of delivered code [10]. Being SCs computer programs, they
are hence susceptible to human mistakes in code design or
writing. In this section we review some of the common
coding mistakes resulting from the lack of expertise in the
best SC coding practices. All these vulnerabilities could be
potentially exploited either singularly or simultaneously by
attacker to perform extorsionware. The full list of known SC
vulnerabilities is provided by the Smart Contract Weakness
registry [11]. The gist of the SC vulnerabilities are described
as follows.

a) Arithmetic Under/Overﬂow: The range of numbers
that can be represented by a SC depends on its code deﬁnition
and is completely handled at compilation time. Therefore, in
case of lack of a proper veriﬁcation mechanism, an attacker
can input data values that go beyond the range of the supported
type.

b) Public Default Visibility: In Solidity, SCs’ functions
can be called by other contracts or users both internal and
external to the blockchain depending on the visibility type.
The default option is to set functions as public. Therefore,
if visibility types are not properly handled, a malicious actor
could call functions to trigger transactions execution.

c) Lack of True Randomness: The random number gen-
eration function is not present in solidity, as achieving decen-
tralized randomness is a current research problem. Therefore,
SC programmers create their own random function. However,
the lack of a properly design randomness source may lead
to leakage of information that an attacker can exploit for
predictions.

d) Re-Entrancy: Ethereum SC envision the possibility of
calling and employing functionalities embedded in other SCs.
A relevant example in this context, is the transfer of Ether
from an address to another only via calls made to external
SCs. A malicious user can exploit this feature to withdraw
all the account’s Ether. In particular, the attacker can create a
malicious SC that, upon receiving ETH, calls-back the victim’s
SC to re-execute the transaction.

e) Locked Ether: This vulnerability exploits the fact that
a SC can be designed to execute fund transfers only by
exploiting calls to other SCs similar to the previous point.
However, in this case the attacker exploits a vulnerability in
the executing SC to delete it without permission [12]. The
victim SC therefore is not able to execute transactions as it
makes calls to a non-existing SC. Similar vulnerabilities that
allow for the modiﬁcation of data stored inside the SC can be
exploited to alter the address of the executing SC. In this case,
the attacker may change the address with that of a ﬁctitious
SC that does not execute the transaction upon request from
the victim.

f) Unhandled Exceptions: This vulnerability is associ-
ated to pre-compiled SCs. Such contracts can return either
zero or one as exit state, but may also report false-positives in
case they generate an exception that is not properly handled
by the SC’s code.

3

g) Denial of Service: This vulnerability exploits external
contract calls to stop the contracts’ correct functioning. In
particular, it exploits the fact that the victim’s SC may exploit
multiple external calls but fails in properly handling exception
during this operation. This might prevent
to
continue its execution remaining in an idle state.

the contract

IV. EXTORSIONWARE LIFE-CYCLE

The fact

that SCs’ code is publicly available provides
malicious users unique opportunities to exploit possible vul-
nerabilities. In fact, it is reasonable to assume that a malicious
users takes advantage of the identiﬁed vulnerability to attack
the SC. In this work, we present the extorsionware, a novel
form of ransomware attack that targets the vulnerability of a
publicly available SC. Similarly to a ransomware, we assume
that the attacker possesses an information that is essential
to the victim, and that such information is returned to the
victim only upon payment of a ransom. Differently from
ransomware, we do not assume that the attacker is able to
hide information at the victim’s side (e.g., via encryption).
We instead assume that the attacker identiﬁes a vulnerability
in a publicly available SC, and exploits it and the fact that the
victim is unaware of such vulnerability to request a ransom.
The extorsionware begins with an individual or company
creating a SC used for the transfer of funds and goods. The
attack then includes the following ﬁve phases.

1) Scouting for Vulnerable SCs. The attacker ﬁrst crawls
the blockchain to identify vulnerable SCs belonging to
potential victims. As the SC is publicly available, the
attacker is able to identify possible vulnerabilities within
the SC code that allows her to transfer assets at will or
to steal assets from the victim.

2) Zero-Knowledge Attack. In order for the attacker to
show that she actually controls the victim’s SC, the
ransom request comes with a certain operation executed
from the victim’s SC. For instance, the attacker states
that she will withdraw a speciﬁc amount from an ac-
count belonging to that SC at a speciﬁc future time
instant. Once the attacker executes the transaction at
the speciﬁed day and time, the victim knows that the
attacker controls the SC. This scheme is similar to a
zero-knowledge proof, where one of the parties discloses
the knowledge of a certain information without actually
disclosing the information itself.

3) Compensation Request and Ultimatum. The attacker
then gives the company an ultimatum for paying a ran-
som, or the vulnerability will be continuously exploited
for malicious purposes or sold to the black market.
4) Continuous Exploitation. The longer time goes on and
the ransom remains unpaid, the amount transferred to
others will continue to grow or the SC’s functionalities
will remain blocked. This is similar to how a typical
ransomware model works in that the victim is motivated
by a timer to quickly pay the ransom to prevent greater
consequences.

5) Final Threat and Ransom Payment. Finally, the at-
tacker will threaten to sell the SC ﬂaw to the black

market if the ransom is never received. Once the ransom
is paid, the attacker can reveal the ﬂaw to the company.
The company is then be able to rewrite the SC code in
order to stop future attacks from happening.

Figure 2 shows the steps of extorsionware attack. Notice
that the attack, depending on its purposes, is either continuous
in time or is periodically launched until the ransom payment.
Due to this, we divided the fourth step of extorsionware in
4.1) attack, and 4.2) continuous exploitation.

Fig. 2. Life-cycle of the extorsionware attack. A victim unknowingly creates
a vulnerable SC and deploys it on the blockchain. An attacker accesses the
code of the SC and ﬁnds a vulnerability to exploit to demand for a ransom.
The attacker exploits this vulnerability until the victim’s payment has been
received.

An example of this attack would be an insurance company
creating a SC for paying customers. If an attacker found a
vulnerability that allowed them to send money at will, they
could create a devastating ransomware attack. The attacker
could send $1000 to another person as proof of this ﬂaw and
demand a ransom from the company of $1 Million in order
to reveal the ﬂaw and stop sending out money. The insurance
company may want to save its reputation early and pay the
ransom. If the company does not think the ﬁnancial loss of the
$1000 payouts is great enough yet, the attacker can increase
the money sent to $10,000 and keep increasing it until the
ransom is paid. The attacker could also sell the ﬂaw in the SC
on the black market so others could also take advantage of the
vulnerability. We notice that a company may want to remove
the ﬂawed SC and replace it with another one. However,
deploying a new SC comes with design and deployment
costs. Furthermore, the legal implications of deploying a novel
contract after failure of the originally stipulated one might
not ease a SC replacement. Lastly, depending on the service
offered by the victim company, revealing that the contract has
been attacked due to poor implementation might impact on
the company’s reputation. Therefore, it might be convenient
for the victim to pay the ransom and recover the originally
deployed contract.

A further example on how an attacker can enforce the
creation of weak SCs is provided by the large amount of
information available online. It is indeed common that non-
expert users are tricked into creating and deploying vulnerable
SCs thanks to false promises of easy monetary reward. A
further push through quick adoption of a technology without a
proper understanding on its implications is the fear of missing

4

out, a form of social anxiety that pushes individuals to stay
continually connected with what others are doing [13]. This
might be the case of companies adopting blockchain and all
related technology in a rush towards a market share, relying
on internal non-expert staff, or to external experts that might
be malicious

V. SHOWCASE IMPLEMENTATION OF THE
EXTORSIONWARE

In this section we show how one of the above mentioned
vulnerabilities can be used for the extorsionware. Notice
that our scope is not to showcase a new attack towards a
speciﬁc SC implementation. Rather, we use an already known
vulnerability to demonstrate the validity of the extorsionware
and shows how our framework can be exploited to demand
a ransom. Furthermore, notice that an analysis of the vul-
nerabilities of currently publicly deployed SCs has already
been provided [5]. We exploit these results to validate the
concreteness of the threat imposed by extorsionware. We focus
on the threat imposed by re-entrancy attacks together with
public visibility. In particular, the attacker ﬁnds a vulnerability
that allows to call the victim contract multiple times and
withdraw a certain amount of Ether. We assume that the victim
already agreed on the terms of the SC with the other involved
parties and deployed the SC on the Ethereum blockchain1.
Figure 3 shows the victim’s Solidity2 SC implementation. The
victim’s SC is designed with a withdrawValues function that
allows for extracting a certain amount of Ether from the user’s
account after calling an external contract via the transferValues
function. Notice that no visibility has been speciﬁed for this
function, therefore it assumes the default public visibility and
can be controlled by external contracts. The vulnerability in
this contract resides in the fact that the transfer function hands
over the control to the receiving SC. If the latter is controlled
by a malicious user, it could call back the sender before the
transaction is completed.

Figure 4 shows the Solidity implementation of the attacker’s
SC. This SC exploit the aforementioned vulnerability, i.e., the
call back to the sender’s SC. The attack starts with a call to
the victim’s withdraw function. When the victim’s SC call the
transfer function, this will trigger in any receiving contract
a payable fallback. In the contract in Figure 4, the payable
function calls back the victim’s withdraw function. The victim
hence repeatedly triggers call to the attacker’s contract until all
Ethers are drawned. In extorsionware, the attacker may stop
this loop to prevent all assets to be withdrawn, or may start
the process again if the ransom is not paid. This represents
a form of zero-knowledge proof, where the attacker proves
the knowledge of a secret to the victim without sharing the
secret. We stress the fact that, although the ransom may imply
a monetary loss higher than the amount of Ether withdrawn
by the SC, a company may still want to pay the ransom to
avoid a costumer being deprived of her or his assets with a
consequent loss of reputation by the company itself.

1In this work we refer to the Ethereum blockchain as it is the most
commonly used for SC deployment. However, our attack framework does
not depend on the underlying blockchain implementation.

2https://soliditylang.org/

5

vulnerabilities to demand for ransoms. With our framework,
an attacker is able to both show the knowledge of a weakness
by programming attacks with speciﬁc effects, and to enforce
victims to pay ransoms instead of removing publicly deployed
contract. Due to the legal implications of SCs, a victim could
not simply remove the SC and create a new one without
incurring in economic or credibility losses. We belive that
the threat imposed by extorsionware should be considered
to enforce the design of secure SCs to avoid companies and
privates exploiting this technology incurring in uncomfortable
and risky situations.

In future works we will assess the impact that different types
of vulnerability have when exploited by extorsionware. In
particular, we will focus on the controllability provided to the
attacker. Furthermore, we plan to develop a countermeasure
for extorsionware. An idea might be to build a shield SC able
to detect whether an exploitation is occurring. The shield SC
will also serve to block the exploitation point and exclude the
attacker from the network.

REFERENCES

[3] U.

[1] J. Barton, “How many ethereum smart contracts are there?” https:
//coindiligent.com/how-many-ethereum-smart-contracts, Jan. 2020.
[2] Cloudwards, “Ransomware statistics, trends and facts for 2021 and
beyond,” https://www.cloudwards.net/ransomware-statistics/, Jul 2021.
justice
ran-
https://www.justice.gov/opa/pr/

S. A. Department
$2.3 million
extortionists

Justice,
cryptocurrency

“Department
to
paid

seizes
somware
department-justice-seizes-23-million-cryptocurrency-paid-ransomware-extortionists-darkside,
2021.

in
darkside,”

the

of

of

[4] Z. Wan, X. Xia, D. Lo, J. Chen, X. Luo, and X. Yang, “Smart
contract security: a practitioners’ perspective,” in 2021 IEEE/ACM 43rd
International Conference on Software Engineering (ICSE).
IEEE, 2021,
pp. 1410–1422.

[5] D. Perez and B. Livshits, “Smart contract vulnerabilities: Vulnera-
ble does not imply exploited,” in 30th USENIX Security Symposium
(USENIX Security 21), 2021.

[6] W. Zou, D. Lo, P. S. Kochhar, X.-B. D. Le, X. Xia, Y. Feng, Z. Chen,
and B. Xu, “Smart contract development: Challenges and opportunities,”
IEEE Transactions on Software Engineering, 2019.

[7] S. Wang, Y. Yuan, X. Wang, J. Li, R. Qin, and F.-Y. Wang, “An overview
of smart contract: architecture, applications, and future trends,” in 2018
IEEE Intelligent Vehicles Symposium (IV).
IEEE, 2018, pp. 108–113.
https://ethereum.org/en/

[8] Ethereum,

“Deploying

contracts,”

smart

developers/docs/smart-contracts/deploying/, Sep. 2021.

[9] R. Brewer, “Ransomware attacks: detection, prevention and cure,” Net-

work Security, vol. 2016, no. 9, pp. 5–9, 2016.

[10] S. McConnell, Code complete. Pearson Education, 2004.
[11] S. W. C. Regsitry, “Smart contract weakness classiﬁcation and test

cases,” https://swcregistry.io/, 2021.

[12] J. Krupp and C. Rossow, “teether: Gnawing at ethereum to automatically
exploit smart contracts,” in 27th USENIX Security Symposium (USENIX
Security 18), 2018, pp. 1317–1333.

[13] C. Hodkinson, “‘Fear of Missing Out’(FOMO) marketing appeals: A
conceptual model,” Journal of Marketing Communications, vol. 25,
no. 1, pp. 65–88, 2019.

Fig. 3. Solidity implementation of the victim’s SC. The SC requires external
calls to perform transaction. However, it is vulnerable in terms of visibility
and allows for re-entrance through the withdrawValues function.

Fig. 4. Solidity implementation of the attacker’s SC. The attack exploits the
re-entrance vulnerability to require multiple transfers from the victim’s SC
though the function payable.

Upon reception of the ransom payment, the attacker shares
with the victim the information on the exploited vulnerabil-
ities. The SC is then upgraded to ﬁx the bugs and prevent
further exploitation of the same vulnerability by other mali-
cious actors. Notice that, although from the perspective of the
vulnerabilities exploited in this showcase implementation, it
might have been rather simple for an expert programmer to
identify the problem and correct the vulnerabilities without
paying a ransom. However, this might not always be the case
in larger and more complex SCs, where the vulnerability might
be hidden among a large number of lines of code.

VI. CONCLUSIONS AND FUTURE WORKS

Although the public availability of SCs’ code enforces trust
among non-trusted parties, it also opens up possibilities for
attackers to exploit potential SC implementation weaknesses.
In this work we presented the extorsionware, a novel attack
framework inspired by ransomware attacks that exploits SC

A. Brighente is a postdoctoral researcher of the Security and Privacy research
group (SPRITZ) at the University of Padova. He received his Ph.D. degree
in Information Engineering from the University of Padova in Feb. 2021.
From June to November 2019 he was visitor researcher at Nokia Bell
Labs, Stuttgart. He published several papers in top-most conferences and
journals, and he is also author of a patent. He has been involved in European
projects (Ontochain) and company projects (IOTA) with the University of
Padova. He served as TPC for several conferences, including Globecom and
CANS. He is guest editor for IEEE Transactions on Industrial Informatics.

6

His current research interests include security and privacy in cyber-physical
systems, UAV communications, vehicular networks, blockchain/distributed
ledger technology, and physical layer security.

Information Forensics and Security, and IEEE Transactions on Network
and Service Management. He was Program Chair for TRUST 2015, ICISS
2016, WiSec 2017, ACNS 2020, and General Chair for SecureComm 2012,
SACMAT 2013, CANS 2021, and ACNS 2022. He is Senior Member of the
IEEE and ACM. He is a member of the Blockchain Expert Panel of the Italian
Government. He is Fellow of the Young Academy of Europe.

M. Conti is Full Professor at the University of Padua, Italy. He is also
afﬁliated with TU Delft and University of Washington, Seattle. He obtained
his Ph.D. from Sapienza University of Rome, Italy, in 2009. After his Ph.D., he
was a Post-Doc Researcher at Vrije Universiteit Amsterdam, The Netherlands.
In 2011 he joined as Assistant Professor the University of Padua, where
he became Associate Professor in 2015, and Full Professor in 2018. He
has been Visiting Researcher at GMU, UCLA, UCI, TU Darmstadt, UF,
and FIU. He has been awarded with a Marie Curie Fellowship (2012) by
the European Commission, and with a Fellowship by the German DAAD
(2013). His research is also funded by companies, including Cisco, Intel, and
Huawei. His main research interest is in the area of Security and Privacy.
In this area, he published more than 400 papers in topmost international
peer-reviewed journals and conferences. He is Area Editor-in-Chief for IEEE
Communications Surveys & Tutorials, and has been Associate Editor for
several journals, including IEEE Communications Surveys & Tutorials, IEEE
Transactions on Dependable and Secure Computing, IEEE Transactions on

S. A. P. Kumar is an Associate Professor of Computer Science in the
Department of Electrical Engineering and Computer Science at the Cleveland
State University, Cleveland, Ohio, USA. He is co-director of Cleveland State
University TECH Hub, an interdisciplinary center related to technology. He
is directing Intelligent Secure Cyber-Systems Analytics and Applications
Research (ISCAR) Lab at the Cleveland State University. He earned his
PhD degree in Computer Science and Engineering from the University of
Louisville, Kentucky, USA in 2007. He is a Senior Member of IEEE.
His current research interests are in cybersecurity, machine learning, big
data analytics and secure distributed systems and their applications. He
has published more than 50 technical papers in international journals and
conference proceedings.

