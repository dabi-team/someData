This paper is a preprint; it has been accepted for publication in 2019 IEEE World Congress on Services (SERVICES), 8-13 July 2019, Milan, Italy
IEEE copyright notice ©2019 IEEE. Personal use of this material is permitted. Permission from IEEE must be obtained for all other uses, in any current or future media, including reprinting/republishing this material for advertising or promotional purposes,
creating new collective works, for resale or redistribution to servers or lists, or reuse of any copyrighted component of this work in other works.

On Blockchain Architectures for Trust-based Collaborative Intrusion Detection

Nicholas Kolokotronis∗, Sotirios Brotsis∗, Georgios Germanos∗, Costas Vassilakis∗ and Stavros Shiaeles†
∗Department of Informatics and Telecommunications, University of Peloponnese, 22131 Tripolis, Greece
Email: {nkolok, brotsis, germanos, costas}@uop.gr
†Centre for Security, Communications and Networks Research, Plymouth University, Plymouth PL4 8AA, UK
Email: stavros.shiaeles@plymouth.ac.uk

1
2
0
2

p
e
S
8

]

R
C
.
s
c
[

1
v
5
3
6
3
0
.
9
0
1
2
:
v
i
X
r
a

Abstract—This paper considers the use of novel technologies
for mitigating attacks that aim at compromising intrusion
detection systems (IDSs). Solutions based on collaborative intru-
sion detection networks (CIDNs) could increase the resilience
against such attacks as they allow IDS nodes to gain knowledge
from each other by sharing information. However, despite the
vast research in this area, trust management issues still pose
signiﬁcant challenges and recent works investigate whether
these could be addressed by relying on blockchain and related
distributed ledger technologies. Towards that direction, the
paper proposes the use of a trust-based blockchain in CIDNs,
referred to as trust-chain,
the
information shared among the CIDN peers, enhance their
accountability, and secure their collaboration by thwarting
insider attacks. A consensus protocol is proposed for CIDNs,
which is a combination of a proof-of-stake and proof-of-work
protocols, to enable collaborative IDS nodes to maintain a
reliable and tampered-resistant trust-chain.

the integrity of

to protect

Keywords-Blockchain; security; collaborative intrusion de-

tection; trust management; insider threats.

I. INTRODUCTION

Cyber-security is an increasingly important aspect in the
era of the Internet of things (IoT). The highly complex
ecosystem of billions heterogeneous devices of weak se-
curity defenses may be exploited by attackers to launch
distributed denial of service (DDoS) attacks, to steal per-
sonal data or gain full access and control
to networks.
Such incidents are getting more sophisticated and take place
on a continuous and non-discriminatory basis. Intrusion
detection systems (IDSs) constitute the basic line of defense
against cyber-attacks, as they can detect suspicious behavior
and deliver informative security alerts. For the recognition
of large-scale and complex attacks, collaboration among
the stand-alone IDSs has been developed [1]. The term
collaborative intrusion detection networks (CIDNs) refers to
such network of communicating IDSs that exchange security
alerts and other data, where the credibility of peers in a
CIDN is crucial.

This project has received funding from the European Union’s
Horizon 2020 research and innovation programme under grant
agreement no. 786698. The work reﬂects only the authors’
view and the Agency is not responsible for any use that may be made of
the information it contains.

Establishing and maintaining mutual trust between the
IDS nodes is a prerequisite for maintaining a high-level
of security, as nodes that turn malicious may degrade the
overall security provided by a CIDN. To achieve this high-
level of security, continuous monitoring of nodes’ behavior
is necessary, together with the implementation of a trust
model for mutual evaluation, based on previous behavior
[2]. Apart from the credibility of the CIDNs’ nodes, the
trustworthiness of external hosts (IP sources) may also be
measured. In this way, incoming trafﬁc to the network can be
pre-ﬁltered through packet ﬁltering mechanisms and large-
scale attacks, like DDoS attacks, can be more efﬁciently
mitigated [3]. Towards that direction, blockchain technology,
which has already found several applications in the security
domain [4] could be combined with a CIDN in order to
achieve trusted distributed coordination needed among its
IDS peers [5], [6].

In this paper, we propose an novel architecture for a
distributed CIDN that includes mechanisms for evaluating
the credibility of a CIDN’s nodes and realizing trust-based
packet ﬁltering of incoming trafﬁc by external IP sources,
depending on the trustworthiness of the latter. These mech-
anisms are supported by blockchain technology, so as to
ensure transparency and accountability, whilst
improving
robustness against insider threats, as the integrity of in-
formation shared among the IDS nodes is guaranteed. Our
contributions are summarized as follows.

• A new trust management scheme is proposed that can
be used in a CIDN to evaluate the credibility of IDS
peers and the trustworthiness of external IP sources.
The modeling of trust allows weighting differently the
recently observed behavior, as in [7], to adjust trust
model’s sensitivity to behavioral variations.

• A blockchain solution is designed for storing the trust
scores disseminated by the CIDN nodes along with
evidence justifying these scores to enhance the overall
security and identify misbehaved IDS nodes.

• A novel consensus protocol is proposed that combines
proof-of-work and proof-of-stake protocols, based on
[8], [9], [10], and [11], to facilitate the secure mainte-
nance of the blockchain by the CIDN nodes.

The rest of the paper is organized as follows. In Section II

 
 
 
 
 
 
we provide the background on intrusion detection systems,
collaborative intrusion detection and blockchain technology.
Section III formalizes the proposed architecture for a trust-
based and blockchain-enhanced CIDN. Section IV presents
in more detail our approach on achieving consensus among
the CIDN peers on the information stored on the blockchain.
Section V presents how our model reacts in an adversarial
environment and Section VI summarizes our contributions
and outlines future work directions.

II. BACKGROUND AND RELATED WORK

This section provides background information on col-
laborative intrusion detection, trust management schemes
and their applications in CIDNs, as well as, on blockchain
protocols and consensus mechanisms along with the recent
proposals for their use in CIDNs.

A. Collaborative intrusion detection

Intrusion detection systems are widely used to ensure the
security of networks and hosts by collecting and analyzing
data for ongoing threats. Detection by an IDS may be either
anomaly-based or signature-based [12], [13]. IDSs may also
be classiﬁed into host-based (HIDS), where only one device
is monitored, and network-based (NIDS), where the network
trafﬁc is monitored and analyzed [5]. Nevertheless, as stand-
alone IDSs are not able to identify large-scale attacks, the
use of CIDNs has been proposed [14]. A CIDN consists
of several monitors, for collecting and sharing security-
related data, as well as analysis units for extracting threat
intelligence information [15].

that

There are three widely adopted architectures concerning
the deployment of CIDNs, namely centralized, decentralized
and distributed [16]. Nodes of a centralized CIDN are
is responsible for
only connected to a central unit
the analysis of the collected data. If this single unit stops
functioning, then the overall protection system collapses;
this is the case of a single point of failure (SPoF) [14].
A decentralized CIDN consists of nodes with a topological
structure (e.g. hierarchical), so that the analysis units work
as ﬁlters forwarding correlated data to the higher levels of
the network; bottlenecks have also been observed in such
architectures. On the other hand, the nodes of a distributed
CIDN, as illustrated in Fig. 1, are designed to both collect
and analyze data; therefore, all the CIDN nodes have the
ability to communicate in a peer-to-peer (P2P) fashion
and achieve signiﬁcant performance gains towards detecting
attacks [17].

B. Trust management

Several types of insider attacks are encountered within
the CIDN framework, the predominant of which is that
of malicious nodes that on purpose share fake data with
their peers to signiﬁcantly deteriorate the performance of the
CIDN, and thus a network’s security [14]. For the mitigation

Figure 1. Example of a distributed CIDN topology.

of such attacks within a distributed CIDN, it is suggested
that information from only trusted peers should be taken
into account. Thus, different schemes of trust management
among CIDN nodes have been developed. Duma et. al
[18] suggested that the IDS nodes continuously monitor the
behavior of their CIDN peers and evaluate the quality of the
security-related information that they share to estimate their
credibility. Then, any data contributed by a CIDN node is
taken into consideration depending on the node’s calculated
credibility.

Apart from measuring the credibility of a CIDN’s nodes,
calculating and maintaining the trustworthiness of external
IP sources has also been proposed [3]. By ﬁltering their
incoming packets according to a collaborative trust-based
scheme, large-scale DDoS attacks can be mitigated. The
packet ﬁltering mechanism is based on maintaining a table
of blacklisted (i.e. untrusted) IP sources whose packets
are immediately dropped, without further inspection and
analysis, thus reducing the workload of detection units. The
challenge in the case of distributed CIDNs is that there is
no central trusted authority to support the establishment of
trusted coordination between the CIDN peers [6]. In the
sequel, we address this challenge by proposing a solution
that relies on the blockchain technology, in order to secure
the information on the trustworthiness of external hosts
shared by CIDN peers.

C. Distributed ledgers

The blockchain was introduced with the Bitcoin as part of
the solution that tackles in a distributed fashion the double-
spending problem in a trustless P2P network [10]. To achieve
this, the solution relies on cryptographic schemes ensuring
the immutability of the data records that are stored on the
distributed ledger, referred to as transactions Tx. Moreover,
a security through transparency approach is taken, based on
which all nodes’ transactions are publicly announced, hence
allowing anyone to verify their validity. A hash function, e.g.
SHA–256, is the core cryptographic primitive upon which
the security of the whole blockchain construction relies.

Hash functions are involved in digitally signing Tx with

InternetnetworknetworkCIDNnetworknetworkNIDSHIDSTrafficNormalMaliciousCIDNthe private key of the originator (a CIDN peer in our
context); therefore, its authenticity is veriﬁed by using the
associated public key that is also included in the blockchain.
A number of new Tx is packed into a block, containing links
to past Tx appearing on the blockchain, and is subsequently
appended to the structure. In addition to the above, a
block commonly includes the hash of the previous block, a
timestamp proving that the data to store exist at a particular
time instant and are authentic, as well as, a Nonce value that
is used according to the consensus mechanism.

The mutual agreement on the validity of a newly created
block is performed according to a consensus protocol. This
also ensures that tampering or removal of the blocks on the
ledger is impossible, thus making the whole data structure
immutable. There is a plethora of different mechanisms that
have been proposed for achieving consensus; the protocols
being relevant to this work are proof-of-work [10] and proof-
of-stake [11], [19].

Once transactions are validated and inserted into a block,
it is exponentially hard for an adversary to alter the contents
of that block after it is being appended to the blockchain. In
fact, the success probability of such an attack exponentially
decreases with the number of blocks that have to be altered
by an adversary targeting at a speciﬁc block of some depth
in the chain [20]. The maintenance of the ledger, i.e. the
validation of new transactions, their aggregation into blocks,
and the chaining with the structure, is carried out by a class
of network nodes (i.e. a subset of the CIDN in our context)
that depends on the type of the blockchain. Distributed
ledgers can be classiﬁed as permissionless or permissioned
depending on whether the block generation process is open
to all network nodes.

III. PROPOSED ARCHITECTURE

In this section we present the proposed distributed CIDN
model for realizing a trust-based packet ﬁltering mechanism
that relies on the blockchain technology is presented.

A. CIDN model

Let us assume a CIDN whose members, i.e. the peer IDS
nodes, comprise the set N . Furthermore, let M be the set of
the external network hosts (in the form of IP addresses) that
are collectively monitored by the CIDN. We use Mi ⊆ M to
denote the subset of IPs monitored by the IDS node i ∈ N ,
and we deﬁne Ni = N \ {i}. The high-level architecture is
illustrated in Fig. 2, where the primary building blocks of the
proposed solution are: (a) the intrusion detection monitoring
engine; (b) the CIDN collaboration component; (c) the trust
calculation engine; (d) the trust-based packet ﬁlter; and (e)
the blockchain component referred to as trust-chain.

The baseline functionality of an IDS, part of a CIDN, is
structured upon the ﬁrst two components, the intrusion de-
tection monitoring engine and the collaboration component.
Similarly to the scheme proposed in [3], the trust calculation

Figure 2. High-level view of the collaborative trust-based IDS, enriched
with a trust-chain.

engine is used to keep track of the behavior of the various
entities involved (members of N and M ), while the packet
ﬁlter is the component where incoming data ﬁltering takes
place. Part of the latter are also a list of blacklisted IP
addresses and a set of signatures, against which the incoming
packets are compared to. Incoming packets may be dropped
if their source IP address is blacklisted. In addition, the
trust calculation engine continuously updates the blacklist by
collecting alerts from the detector and side information from
the CIDN peers about the trustworthiness of the external
host. The binary decision on inclusion or exclusion of the
host into the blacklist, thus its trustworthiness, relies on
the comparison against a threshold ζ ∈ (0, 1). Therefore,
the IDS node handles only the accepted packets, practically
reducing the load of an IDS during operation. The collab-
oration component communicates with the other peers to
transfer security-related data.

The last component, which is a key contribution of this
work on the CIDN architecture proposed in [3], is the so-
called trust-chain. It is comprised by the speciﬁc blockchain
structure along with the associated consensus protocol that
are described in detail in Sections III-C and IV respectively.
This structure is where the information shared about the
trustworthiness of the external hosts is stored.

B. Trust engine

In order to deal with internal and external attacks from
misbehaving nodes, two types of trust scores are considered
that characterize the credibility of an IDS peer (member of
the CIDN) and the trustworthiness of an external host. The
above notions were also used in [14], [2], but the subsequent
formulation of the trust model differs in many aspects. To be
more precise, main design choices of [7] are adopted as the
trust model proposed therein was shown to be quite robust
in an adversarial environment. The parameters used are

• the forgetting factor λ ∈ (0, 1) controlling the weight

given to past behavior;

networkInternetNIDScollaborative trust-based packet filteringCIDN collaboration componenttrust calculation engine trust-based packet filterblockchain consensustrustchainintrusion detection monitoring engineCIDNalertsblacklisted IPslookup tabletraffic• the severity level φ > 0 deﬁning the punishment of an
IDS node that avoids giving feedback to challenges;
• the credibility threshold θ ∈ (0, 1) that determines the
IDS nodes whose data on the trust-chain are trusted;
• the initial trust score τ ∈ [0, 1] assigned to a new IDS

node when entering the CIDN network.

The credibility of an IDS node i ∈ N relies on its responses
to challenges (alert priorities) that are sent out periodically
following a probability distribution and are indistinguishable
from real alerts. The format of the challenges may adhere to
the intrusion detection message exchange format (IDMEF)
standard [21]. The responses given to these challenges are
used to compute the requesting node’s j satisfaction level
satj(i) ∈ [0, 1], which depends on the gap between the
actual and the expected responses [14], [2]. These values are
combined using a forgetting factor to derive an accumulated
satisfaction level γj(i) ∈ [0, 1] as follows
γj(i) = (cid:0)1 − λ(cid:1) · satj(i) + λ · γj(i) ,

i ∈ Nj .

(1)

Honest IDS nodes always respond correctly to challenges, if
information about the matched item exists, or they respond
with Unsure otherwise. Let us deﬁne the variable ansj(i) ∈
{0, 1} that equals 1 if and only if an Unsure response is
given by the IDS node i to j. To avoid having malicious IDS
nodes abuse the ability to respond with Unsure, instead of
forcing to guess the challenge’s correct answer (thus leading
to a decreased satisfaction level), the quantity αj(i) ∈ [0, 1]
is computed recursively by the expression
αj(i) = (cid:0)1 − λ(cid:1) · ansj(i) + λ · αj(i) ,

i ∈ Nj

(2)

and accounts for the percentage of the Unsure responses that
IDS node i gives to j. Then, according to j, the credibility
crdj(i) ∈ [0, 1] of the IDS node i is computed based on the
severity of punishment φ for providing Unsure answers

crdj(i) = (cid:0)1 − αj(i)(cid:1)φ

· (cid:0)γj(i) − τ (cid:1) + τ ,

i ∈ Nj

(3)

whereas crdj(j) = 1, for all j ∈ N , by deﬁnition. From (3)
we obtain that crdj(i) = τ when the IDS node i constantly
responds with Unsure. Assuming that only IDS peers whose
credibility exceeds a threshold θ are taken into account when
incorporating the knowledge acquired by the whole CIDN,
the relative weight given by j to the IDS node i ∈ N is

0 ,

(cid:44)

(cid:88)

crdj(i)

wj(i) =

if crdj(i) < θ

crdj(l) , otherwise




where we clearly have (cid:80)
i∈N wj(i) = 1 amongst the nodes
comprising the collaborative intrusion detection network N .
In order to determine the trustworthiness of an external
host ip ∈ Mj, the IDS node j monitors the trafﬁc that is
received by the particular host and detects whether a data

l∈N :
crdj (l)≥θ

(4)

packet is normal or malicious. At regular intervals, every n
data packets, the trust calculation engine computes a belief
about the type of the next packet; assuming that k out of the
n packets were detected to be normal, then the probability
that the (n + 1)th packet is normal equals [3]
trj(ip) = Pr(n + 1 = normal (cid:12)

(cid:12) k normal )

=

1 + k
2 + n

(5)

when the distribution of observing k normal packets (out of
the n packets) is the Binomial distribution. This score is the
observation of the IDS node j, as measured during the last
monitoring interval, and is referred to as the instantaneous
trust score trj(ip) ∈ (0, 1) of the external host ip. Likewise,
the IDS node j may calculate the long-term or accumulated
trust score trids

j (ip) of the host using the expression

j (ip) = (cid:0)1 − λ(cid:1) · trj(ip) + λ · trids
trids

j (ip)

(6)

that incorporates the past knowledge that the IDS has about
the particular host. However, in order to take advantage of
the collective knowledge that the whole CIDN has about ip,
the IDS node j utilizes the individual trust scores that have
been computed locally by other credible peers of the CIDN.
This process yields the combined trust score trcidn
(ip) whose
computation is based on the weighted combination

j

trcidn
j

(ip) =

(cid:88)

i∈N

wj(i) · trids

i (ip)

(7)

summarizing the trustworthiness of host ip using the CIDN’s
knowledge, as aggregated by the IDS node j. In the ﬁnal
step of the above process, the IDS updates its internal value
trids
j (ip) with the one computed in (7). The host’s IP is added
to the blacklist if trids

j (ip) ≤ ζ, and excluded otherwise.

The above sequence of steps is also illustrated in Alg. 1;
this is a typical adopt-then-combine scenario for performing
in-network processing in diffusion networks, an approach
that has proven to be resilient in adversarial environments
[7]. Two phases have been realized in Alg. 1: during the ﬁrst
phase, the IDS nodes augment the local knowledge about
an external host and disseminate it in the CIDN, whereas
in the second phase, the IDS nodes aggregate the updated
knowledge (in the form of a trust score) received from their
peers. In the sequel, this algorithm is extended in order to
allow a secure realization of the information sharing via the
trust-chain.

C. Trust-chain structure

In order to provide a more accountable trust management
framework, the IDS node j retains some evidence evj(ip)
after measuring the trustworthiness of an external host ip to
justify the scoring (e.g. alerts having been disseminated to
the CIDN during the previous monitoring interval). Hence,

Algorithm 1. Distributed computation of IPs’ trust in a CIDN in a typical
adaptive diffusion scenario.
input: CIDN nodes N , list of IPs M
initialization:

(cid:46) ∀ j ∈ N, ip ∈ Mj

j (ip) ← τ

trids

Algorithm 2. Distributed computation of IPs’ trust in a CIDN with the
use of trust-chain.
input: CIDN nodes N , list of IPs M
initialization:

(cid:46) ∀ j ∈ N, ip ∈ M

trids

j (ip) ← τ

1: for t ← 1, 2, . . . do
2:
3:

for all j ∈ N, ip ∈ Mj do

measure trj(ip)
update accumulated trids
send trids

j (ip)

j (ip)

end

for all j ∈ N, ip ∈ Mj do
receive trids
i (ip)
compute combined trcidn
trids

j (ip) ← trcidn

(ip)

j

j

(ip)

4:
5:
6:

7:
8:
9:

10:
11:
12: end

end

1: for t ← 1, 2, . . . do
for all j ∈ N do
2:

3:
4:
5:
6:
7:
8:

9:

for all ip ∈ Mj do
measure trj(ip)
update accumulated trids

j (ip)

end
build Txj from Cj, Lj, Ej
broadcast Txj

end

(cid:46) from (5)
(cid:46) from (6)
(cid:46) to all i ∈ N

(cid:46) from all i ∈ N
(cid:46) from (7)

(cid:46) from (5)
(cid:46) from (6)

(cid:46) to all i ∈ N

generate block B

10:
11: manage trust-chain

(cid:46) from (10)
(cid:46) consensus protocol

output:

trids

j (ip)

(cid:46) ∀ j ∈ N, ip ∈ Mj

the IDS node j ∈ N maintains the following lists

(cid:9)

(cid:9)

Cj = (cid:8)crdj(i) : i ∈ Nj
Lj = (cid:8)trids
j (ip) : ip ∈ Mj
(cid:9)
Ej = (cid:8)evj(ip) : ip ∈ Mj
in addition to the IDS nodes in Nj and external hosts in Mj
that are monitored. The transaction Txj is disseminated to
all CIDN members, when differences on the credibility of
the IDS nodes or the trust-scores of the IP hosts occur, (see
step 8 of Alg. 2) and has the following structure

(8)

Txj = IDTx || IDids ||(cid:8)Nj||Cj

(cid:9)||(cid:8)Mj||Lj||Ej

(cid:9)|| SigTx .

Each transaction Txj
is given a unique identiﬁer IDTx
and apart from the lists, which constitute the transactions’
payload, information is embedded about the identity IDids of
the IDS and the signature SigTx that is computed with the
IDS node’s private key. All the transactions in the CIDN
during the last monitoring period are denoted as

Tx = {Txj : j ∈ N }

(9)

gathering the information that is disseminated to the CIDN.
A number of IDSs having been found to be credible nodes,
attempt to generate the new block B that will be appended
into the trust-chain and then validated by all the CIDN. This
process is detailed in Section IV and corresponds to step 11
of Alg. 2. The block B, which is comprised of a header and
a payload (i.e. all the transactions Tx deﬁned in (9))

B = HdrB || Tx

(10)

is signed with the leader’s private key. The block’s header
HdrB contains information on the block’s unique identiﬁer
IDB, the leader’s identity IDids, a time-stamp that veriﬁes
the block’s generation time Stamp, the hash Hashold of the

12:
13:

14:
15:
16:
17:
18:

for all j ∈ N do

extract Txi from B
read Ci, Li, Ei from Txi
for all ip ∈ Mj do

compute combined trcidn
trids

j (ip) ← trcidn

(ip)

j

j

end

(cid:46) from all i ∈ N

(ip)

(cid:46) from (7)

end

19:
20: end

output:

trids

j (ip)

(cid:46) ∀ j ∈ N, ip ∈ M

last block on the trust-chain, a counter ctr ≤ q (where q is
the maximum number of attempts to generate a block) and
a target value Vids. Thus, the header is structured as

HdrB = IDB || IDids || Stamp || Hashold || ctr ||Vids

(11)

where Vids, along with other information, allows members of
the CIDN to validate the credibility of the IDS node acting as
a leader and generating the block B. The trust-chain secure
process of sharing information on credibility, trustworthiness
and the associated evidence is illustrated in Alg. 2.

IV. TRUST-CHAIN’S CONSENSUS
In this section we present the details of electing an IDS
node that is credible enough for generating the next block in
the trust-chain. We propose a solution combining the PoW
and PoS protocols to achieve consensus [22], [8], where the
PoS protocol extends that of Nxt [11]. High-level functions
that realize the core functionality of the proposed solution
are presented below.
CheckEligibility(cid:0) IDj, D, crd(j), Hashold, Tx (cid:1) checks if an
IDS node j is eligible for generating the next block; it
takes as input the identity of the IDS, a system parameter
D, the average credibility placed on j from the CIDN,
the hash value of the previous block and the payload; it
computes a hash value Gj that is used next and outputs
a Boolean value (True or False).

GenerateBlock(cid:0)Gj, Stamp, ctr, D(cid:48), Stakej, Timej

(cid:1) adds a
new block B in the trust-chain; the input to this function
are the hash value Gj provided by the CheckEligibility
function, a time-stamp verifying the block’s generation
time, a counter ctr, a target value D(cid:48) (different from D),
the jth node’s stake Stakej, and the time elapsed Timej
since the last block generated by j. It outputs a Boolean
value (True or False).

ValidateBlock(cid:0)B, D, D(cid:48)(cid:1) with input the block B and the
target difﬁculties D, D(cid:48), validates block B and returns
True if and only if the output of the CheckEligibility and
the GenerateBlock functions are both True.

Resolve(cid:0) fork1, . . . , forkz

(cid:1) returns the unique fork to work
on, assuming that a number z of forks has been detected.
This is the case where multiple IDS nodes satisfy the
conditions of the election process for generating the next
block.

According to the philosophy of PoS (resp. PoW) protocols,
the node with the highest stake (resp. computational power)
is more likely to generate the next block. The combination
of PoW and PoS protocols in trust-chain leads to a hybrid
mining-election method for achieving consensus, where the
likelihood of a credible IDS j being elected as the leader
increases with both its computational power and stake. This
explains the inclusion of a counter ctr into the block B as
given in (11). The advantage of the combination is that it
prevents situations in which a credible IDS node with large
stake is in position to ceaselessly generate all the blocks.

In the context of collaborative intrusion detection that is
based on credibility placed between IDS nodes, each peer
can take advantage of its behavior and its contribution to the
CIDN. The information in the list Cj, maintained by every
IDS node j on the other peers’ credibility, is disseminated to
the CIDN through the trust chain and the average credibility
score for j ∈ N is then computed as follows

crd(j) =



1 +

1
|N |

(cid:88)

l∈Nj



crdl(j)



(12)

at each time interval. It is then used to decide whether j is
considered to be credible enough by the whole CIDN to be
elected as a leader for the next block generation. Thus, IDS
node j ﬁrst computes the output Gj of a hash function G(·)
and then checks if the credibility condition is satisﬁed

Gj = G(cid:0) IDj, Hashold, Tx (cid:1) < D · crd(j)

(13)

based on a target D and the average credibility score placed
on node j by the CIDN. Note that it is important to adjust
D as a loose difﬁculty target so as to allow many IDS nodes
with high average credibility to participate in the following
process and satisfy the mining-election condition
Preﬁx(cid:0) H(cid:0) Gj, Stamp, ctr (cid:1), r (cid:1) < Vj .

(14)

To achieve consensus, the IDS nodes brute-force (14) using
the available computational resources by continuously trying
different values for ctr and comparing the ﬁrst r bits of the
hash resulting from H(·) with Vj, where

Vj = D(cid:48) · Stakej · Timej .

(15)

Then, an IDS node j generates the next block if and only if
both (13), (14) hold. In addition to the time elapsed since the
IDS node j has generated the last block, its winning chance
is linked to its ability in detecting the trustworthiness of the
external hosts monitored so as to improve the accuracy of
the trust-based packet ﬁlter employed by each CIDN node.
This is captured by the uncertainty that the IDS j has when
assigning a trust score x = trids

j (ip). Thus, we let
(cid:0)1 − H2(x)(cid:1)

(cid:88)

Stakej =

(16)

x∈Lj

where the index x runs through all the trust scores in the list
Lj while H2(x) = −x log2(x) − (1 − x) log2(1 − x) is the
binary entropy function. By deﬁnition, the closer to 1/2 the
trust scores in Lj are, the less useful they will be in arguing
about the trustworthiness of a host.

Since a combined PoW and PoS consensus protocol is
proposed, a new block is more accurate if it is generated by
a credible node. Furthermore, the efﬁciency of the leader to
monitor and calculate the trust values of the external hosts is
more important than its computational power. Therefore, the
wining chain, when forks occur, is the one that possesses the
highest accumulated stake by the most credible nodes and
thus avoid insider attacks based on computational power.

V. DISCUSSION ON TRUST-CHAIN’S SECURITY

A trust management scheme combined with the properties
of the blockchain can adequately improve the collaboration
among IDS nodes. Nevertheless, malicious behavior, can
possibly degrade the efﬁciency of the entire system. In this
section, we describe a number of attacks and present how
the proposed system provides proper defenses against them.
Thwarting insider attacks is a challenging task in collabora-
tive security mechanisms; they distribute false information to
manipulate the outcome of a system’s or peer’s aggregation
function. Attackers may penetrate a CIDN while acting as
credible parties, to perform some security-related tasks, and
thus disturb and obstruct the normal decision-making of the
whole system. These attacks may be categorized according
to three different criteria.

• Type of attack: the attacks can be subdivided into (a)
those targeting at the identities of the CIDN nodes, (b)
those being related to the data exchanged amongst the
nodes, and (c) the attacks that target the routing of data
among the nodes.

• Attacker’s behavior: in case of multiple attackers, they
can either act independently, i.e. the malicious actions

taken serve each attacker’s own purposes, or they may
collaborate with each other, leading to collusive attacks.

• Attacker’s intelligence: in the simplest scenario and in
most works in the literature, the attackers’ behavior is
static as they just repeat a particular type of malicious
action. At the extreme end, attackers can be intelligent
and they change their tactics strategically to avoid being
detected or to maximize the attack’s impact. Finally, the
attackers may behave irrationally, thus preventing their
behavior being predicted.

The proposed solution relies on blockchain technology to
build the so-called trust-chain, which aims at protecting the
integrity of the information shared among the CIDN peers,
enhance their accountability, and secure their collaboration
by thwarting insider attacks. The proposed consensus proto-
col, which is a combination of the PoS and PoW protocols,
enables collaborative IDS nodes to maintain a reliable and
tampered-resistant trust-chain. The prominent attacks in our
setup include Sybil, betrayal and collusion attacks.

In a Sybil attack, malicious IDS nodes create several fake
identities to gain larger inﬂuence on alert dissemination and
aggregation and block the propagation of certain messages
[14], [20]. In our system, the IDS members are authenticated
and newcomers (possibly fake nodes) have to contribute to
the CIDN to gain credibility before given the opportunity to
generate the next block of the trust-chain. Assuming that all
IDS nodes have the same hashing power, then the probability
that one is elected to generate the next block is proportional
to its stake as well as the average credibility placed on it by
the CIDN.

During a betrayal attack, a (usually highly) credible node
gets compromised and subsequently turns malicious. Then,
it can either act independently or in collaboration with other
malicious IDS nodes [23]. To defend this attack, a forgetting
factor and a severity punishment are implemented into our
scheme so that the credibility of a malicious node drops fast
enough after few abnormal actions. In this case, the average
credibility placed on a speciﬁc peer is reduced, abbreviating
its opportunity to create the next block. In addition, a counter
ctr has been included in the block generation process so as
to enable the participation of only credible IDS nodes, while
preventing nodes with large stake from generating sequences
of consecutive blocks in the trust-chain.

In a collusion attack a set of dishonest IDS nodes might
cooperate to tamper the trust-chain. This can be done either
by intentionally broadcasting malicious messages (i.e. alerts,
trust-scores about the IP hosts and the IDS nodes and false
evidence) throughout the CIDN network, or by using their
power (hashing or stake) to generate an adversarial block.
In the ﬁrst case, each IDS depends on its own experience
to unmask the adversaries using challenges (test messages,
priority alerts), that are sent in a random way and are difﬁcult
to be distinguished by actual alerts. On the other hand, when

a group of malicious nodes works together may have a great
impact on the security of the network and the blockchain.
Adversarial nodes can use their resources and become the
only block generators in the network thus forcing the honest
nodes to work for nothing [20]. However in our hybrid PoW
and PoS protocol, the adversary needs to control not only a
great portion of the hashing power, but also a large portion
of the total network’s stake and the majority of credible IDS
nodes. Each valid block has to be created by an authenticated
and credible IDS node based on different parameters (stake,
hashing power, as well as time elapsed since the last block
creation). In the worst case scenario, where an adversary is
able to create a malicious block and fork the trust-chain, the
Resolve function is utilized and returns the fork created by
the most credible nodes with the highest accumulated stake.
Therefore, a collusion attack is highly unlikely to occur.

Since the security of the proposed blockchain mechanism
is of utmost importance, a plethora of fundamental properties
need to hold, such as persistence, liveness, chain quality, and
the common preﬁx property [4], [24]; their formal analysis
is outside the scope of the present work and constitutes part
of ongoing research. If all true, the ability of the adversaries
to alter trust-chain’s evidentiary data would be considerably
limited.

VI. CONCLUSIONS

In this paper, a distributed trust management framework
for CIDNs was proposed. More precisely, each IDS shares
trust-related information about IDS nodes and external hosts
with other CIDN members by using an adopt-then-combine
approach; this information is securely aggregated according
to the source IDS’s credibility, which is computed based on
the responses given to challenges. The security-related data
that have to be exchanged between members of the CIDN
is stored on a blockchain, referred to as trust-chain, to avoid
tampering from malicious nodes. A combined PoW and PoS
protocol was proposed, according to which a credible IDS
node with higher computational power and larger stake has
an increased probability of being elected for the generation
of the next block.

Ongoing work focuses on the theoretical aspects of secu-
rity, namely to study a series of attacks having been reported
in both domains (trust management and blockchain), so as to
fully understand the impact of various parameter choices on
the proposed solution’s security and the dynamics governing
the trust score evolution. Simulations on the proposed system
and privacy issues are open problems that will be presented
in detail in a forthcoming work.

REFERENCES

[1] G. Meng, Y. Liu, J. Zhang, A. Pokluda, and R. Boutaba,
“Collaborative security: A survey and taxonomy,” ACM
Computing Surveys, vol. 48, no. 1, pp. 1–42, Jul. 2015.
[Online]. Available: https://doi.org/10.1145/2785733

[2] C. J. Fung, O. Baysal, J. Zhang, I. Aib, and R. Boutaba,
“Trust management for host-based collaborative intrusion
detection,” in 2008 Int’l Workshop on Distributed Systems:
Operations and Management — DSOM.
Springer, 2008,
pp. 109–122.
[Online]. Available: https://doi.org/10.1007/
978-3-540-87353-2 9

[3] W. Meng, W. Li, and L. F. Kwok, “Towards effective trust-
based packet ﬁltering in collaborative network environments,”
IEEE Transactions on Network and Service Management,
vol. 14, no. 1, pp. 233–245, 2017. [Online]. Available:
https://doi.org/10.1109/TNSM.2017.2664893

[4] A. Kiayias, A. Russell, B. David, and R. Oliynykov,
“Ouroboros: A provably secure proof-of-stake blockchain
protocol,” in Advances in Cryptology — CRYPTO 2017.
Springer, 2017, pp. 357–388.
[Online]. Available: https:
//doi.org/10.1007/978-3-319-63688-7 12

[5] N. Alexopoulos, E. Vasilomanolakis, N. R. Ivanko, and
M. M¨uhlh¨auser, “Towards blockchain-based collaborative
intrusion detection systems,” in 12th Int’l Conference on
Information Infrastructures Security — CRITIS.
Critical
Springer, 2017, pp. 107–118.
[Online]. Available: https:
//doi.org/10.1007/978-3-319-99843-5 10

[6] W. Meng, E. W. Tischhauser, Q. Wang, Y. Wang, and J. Han,
“When intrusion detection meets blockchain technology:
A review,” IEEE Access, vol. 6, pp. 10 179–10 188, Mar.
2018. [Online]. Available: https://doi.org/10.1109/ACCESS.
2018.2799854

[7] K. Ntemos, J. Plata-Chaves, N. Kolokotronis, N. Kalouptsidis,
and M. Moonen, “Secure information sharing in adversarial
adaptive diffusion networks,” IEEE Transactions on Signal
and Information Processing over Networks, vol. 4, no. 1,
pp. 111–124, March 2018, Special issue: distributed signal
processing for security and privacy in networked cyber-
physical systems. [Online]. Available: https://doi.org/10.1109/
TSIPN.2017.2787910

[8] T. Duong, L. Fan, and H.-S. Zhou, “2-hop blockchain:
Combining proof-of-work and proof-of-stake
securely,”
Cryptology ePrint Archive, Report 2016/716, 2016. [Online].
Available: https://eprint.iacr.org/2016/716

[9] T. Duong, A. Chepurnoy, L. Fan, and H.-S. Zhou,
“Twinscoin: A cryptocurrency via proof-of-work and proof-
the 2Nd ACM Workshop
of-stake,” in Proceedings of
on Blockchains, Cryptocurrencies, and Contracts,
ser.
BCC ’18, 2018, pp. 1–13.
[Online]. Available: http:
//doi.acm.org/10.1145/3205230.3205233

[10] S. Nakamoto, “Bitcoin: A peer-to-peer electronic cash
system,” 2008. [Online]. Available: https://bitcoin.org/bitcoin.
pdf

[11] Nxt Community, “Nxt whitepaper,” Revision 4 – Nxt v1.2.2,
2014. [Online]. Available: https://bravenewcoin.com/assets/
Whitepapers/NxtWhitepaper-v122-rev4.pdf

[12] P. Garcia-Teodoro, J. Diaz-Verdejo, G. Maci´a-Fern´andez, and
E. V´azquez, “Anomaly-based network intrusion detection:
Techniques, systems and challenges,” Computers & Security,
vol. 28, no. 1, pp. 18–28, 2009.
[Online]. Available:
https://doi.org/10.1016/j.cose.2008.08.003

[13] S. Axelsson, “Intrusion detection systems: A survey and
taxonomy,” Chalmers University of Technology, Technical
Report No. 99-15, Mar. 2000. [Online]. Available: https:
//sites.google.com/site/drstefanaxelsson/taxonomy.pdf

[14] C. J. Fung, “Collaborative intrusion detection networks
and insider attacks,” Journal of Wireless Mobile Networks,
Ubiquitous Computing, and Dependable Applications, vol. 2,
no. 1, pp. 63–74, Mar. 2011. [Online]. Available: https:
//doi.org/10.22667/JOWUA.2011.03.31.063

[15] Y.-S. Wu, B. Foo, Y. Mei, and S. Bagchi, “Collaborative intru-
sion detection system (CIDS): A framework for accurate and
efﬁcient IDS,” in 19th Annual Computer Security Applications
Conference — ACSAC.

IEEE, 2003, pp. 234–244.

[16] E. Vasilomanolakis, S. Karuppayah, M. M¨uhlh¨auser, and
M. Fischer, “Taxonomy and survey of collaborative intrusion
detection,” ACM Computing Surveys, vol. 47, no. 4, pp. 1–33,
2015. [Online]. Available: https://doi.org/10.1145/2716260

[17] M. E. Locasto, J. J. Parekh, A. D. Keromytis, and S. J. Stolfo,
“Towards collaborative security and P2P intrusion detection,”
in 6th IEEE SMC Information Assurance Workshop —
IAW.
[Online]. Available:
https://doi.org/10.1109/IAW.2005.1495971

IEEE, 2005, pp. 333–339.

[18] C. Duma, M. Karresand, N. Shahmehri, and G. Caronni,
“A trust-aware, P2P-based overlay for intrusion detection,”
in 17th Int’l Workshop on Database and Expert Systems
Applications — DEXA.
IEEE, 2006, pp. 692–697. [Online].
Available: https://doi.org/10.1109/DEXA.2006.21

[19] W. Li, S. Andreina,

J.-M. Bohli,

and G. Karame,
“Securing proof-of-stake blockchain protocols,” in 2017 Int’l
Workshop on Cryptocurrencies and Blockchain Technology
— CBT. Springer, 2017, pp. 297–315. [Online]. Available:
https://doi.org/10.1007/978-3-319-67816-0 17

[20] I. Eyal and E. G. Sirer, “Majority is not enough:
Bitcoin mining is vulnerable,” in 2014 Int’l Conference
on Financial Cryptography and Data Security — FC.
Springer, 2014, pp. 436–454.
[Online]. Available: https:
//doi.org/10.1007/978-3-662-45472-5 28

[21] H. Debar, D. Curry, and B. Feinstein, “The intrusion
detection message exchange format (IDMEF),” IETF Network
[Online]. Available:
Working Group, RFC 4765, 2007.
https://www.ietf.org/rfc/rfc4765.txt

[22] I. Bentov, C. Lee, A. Mizrahi, and M. Rosenfeld, “Proof
of activity: Extending Bitcoin’s proof of work via proof of
stake,” ACM SIGMETRICS Performance Evaluation Review,
vol. 42, no. 3, pp. 34–37, 2014.
[Online]. Available:
https://doi.org/10.1145/2695533.2695545

[23] C. Duma, M. Karresand, N. Shahmehri, and G. Caronni,
“A trust-aware, p2p-based overlay for intrusion detection,” in
17th International Workshop on Database and Expert Systems
Applications (DEXA’06).

IEEE, 2006, pp. 692–697.

[24] J. Garay, A. Kiayias, and N. Leonardos, “The bitcoin back-
bone protocol: Analysis and applications,” in Advances in
Cryptology - EUROCRYPT 2015, E. Oswald and M. Fischlin,
Eds. Berlin, Heidelberg: Springer Berlin Heidelberg, 2015,
pp. 281–310.

