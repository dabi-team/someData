Tutela: An Open-Source Tool for Assessing User-Privacy
on Ethereum and Tornado Cash

Mike Wu, Will McTighe, Kaili Wang

Stanford University

Nick Bax

Convex Research

Istv´an A. Seres

E¨otv¨os Lor´and University

Manuel Puebla, Mariano Mendez

Universidad de Buenos Aires

Facultad de Ingenieria

Federico Carrone, Tom´as De Mattey, Herman O. Demaestri, Mariano Nicolini, Pedro Fontana

LambdaClass

Abstract

A common misconception among blockchain
users is that pseudonymity guarantees privacy.
The reality is almost the opposite. Every
transaction one makes is recorded on a pub-
lic ledger and reveals information about one’s
identity. Mixers, such as Tornado Cash, were
developed to preserve privacy through “mix-
ing” transactions with those of others in an
anonymity pool, making it harder to link de-
posits and withdrawals from the pool. Unfortu-
nately, it is still possible to reveal information
about those in the anonymity pool if users are
not careful. We introduce Tutela, an applica-
tion built on expert heuristics to report the true
anonymity of an Ethereum address. In partic-
ular, Tutela has three functionalities: ﬁrst, it
clusters together Ethereum addresses based on
interaction history such that for an Ethereum
address, we can identify other addresses likely
owned by the same entity; second, it shows
Ethereum users their potentially compromised
transactions; third, Tutela computes the true
size of the anonymity pool of each Tornado
Cash mixer by excluding potentially compro-
mised transactions. A public implementation
of Tutela can be found at https://github.
com/TutelaLabs/tutela-app.
To use
Tutela, visit https://www.tutela.xyz1.

1

Introduction

On any public blockchain, the cost of creating a
new wallet is virtually zero, enabling the same en-
tity to manage several pseudonymous addresses.
The pseudonymity underpinning blockchains like
Bitcoin (Nakamoto, 2008) and Ethereum (Buterin
et al., 2013) breeds a sense of privacy. This often
leads to misuse (Christin, 2013), such as money
laundering through a large number of addresses
(M¨oser et al., 2013), or unfair voting power dis-
tributed among multiple addresses owned by the

1For related questions and inquiries, please contact the

corresponding author at wmctighe@stanford.edu.

same user. Thus, it is of interest in many investiga-
tions to identify addresses linked to the same entity.
This is predominantly done through heuristics. Ev-
ery transaction an address makes on a blockchain
is recorded and public, revealing information about
the underlying entity. As such, with graph analysis
tools, one can cluster addresses together that, with
reasonable conﬁdence, possess the same owner.

Such anonymity tools have been widely explored
for Bitcoin (Haslhofer et al., 2016), leveraging
heuristics targeting the unspent transaction output
(UTXO) model. However, this has limited appli-
cation to more recent blockchain implementations
like Ethereum, which forgo the UTXO model for an
account (or sometimes balance) model. Ethereum,
in particular, has an account-based protocol that
implicitly encourages an entity to reuse a handful
of addresses. As such, this poses greater challenges
to user privacy than UTXO-based blockchains.

In response to this shortcoming, several coin
mixing protocols have been proposed like M¨obius
(Meiklejohn and Mercer, 2018), MixEth (Seres
et al., 2019), and Tornado Cash (Pertsev et al.,
2019) to obfuscate transaction tracing, the ﬁnal
of which is deployed in practice. Still, new heuris-
tics have surfaced (Victor, 2020; B´eres et al., 2021)
that deanonymize Ethereum users. These heuris-
tics largely exist in academic silos, and not been
combined nor demonstrated in public application.

Our contributions. We develop a web applica-
tion that combines several state-of-the-art heuris-
tics to measure the anonymity of Ethereum ad-
dresses. To the best of our knowledge, this is the
ﬁrst instance to deploy these algorithms at scale.
In doing so, we create a rich depiction of user
behavior and privacy. We also propose a set of
new heuristics targeted at Tornado Cash, highlight-
ing that careless user behavior, despite using a
mixer, can still reveal identity. A Python implemen-

2
2
0
2

n
a
J

8
1

]

R
C
.
s
c
[

1
v
1
1
8
6
0
.
1
0
2
2
:
v
i
X
r
a

 
 
 
 
 
 
tation is open sourced at https://github.com/
TutelaLabs/tutela-app and the tool is available
at https://www.tutela.xyz.

Paper organization. The rest of this paper is or-
ganized as follows. We provide some pertinent pre-
liminaries in Section 2. In Section 3, we provide
an overview of Tutela, our developed anonymity
tool. In Section 4, we describe our data processing
methods and the used datasets. In Section 5, we
describe two heuristics that allowed us to cluster
Ethereum addresses that are likely owned by the
same entity. In Section 6, we assess the privacy
guarantees of Tornado Cash applying ﬁve novel
heuristics. In Section 7, we provide a quantitative
analysis. Finally, we conclude our work with some
discussions and future work in Section 8.

2 Preliminaries

In this section, we provide some background on
Ethereum and its account model. For a deeper dive
into Ethereum, we refer the reader to (Antonopou-
los and Wood, 2018). Moreover, we brieﬂy de-
scribe the high-level workings of Tornado Cash.

2.1 Ethereum and the Account Model

Ethereum is the second-largest cryptocurrency plat-
form in terms of market capitalization.2 However,
it is the largest smart contract platform, and it is
also the most used public blockchain for settling
transactions. Therefore, it is imperative to under-
stand better and assess the privacy guarantees of
Ethereum quantitatively.

Ethereum employs the account model. There are
two types of accounts: externally owned accounts
(EOA) and contract accounts. EOAs are controlled
by users via a cryptographic key-pair (a private and
a public key) owned by them. The private key of
the EOA enables users to send transactions from
that account, while the public key is used to de-
rive an address for the EOA (the hash of the public
key is its address). On the other hand, contract
accounts are controlled by contract code. The con-
tract account’s address is the hash of their contract
code. Accounts are referred to by their addresses
(a pseudonym). Contract accounts cannot initiate
transactions. However, EOAs can send transactions
to contract accounts that can run the code of the
contract account. In the following, we will use the
words accounts and addresses interchangeably.

2For more details, see: https://coinmarketcap.

com/currencies/ethereum.

Ethereum’s account model has several impli-
cations from a privacy point of view. First, the
account model incentivizes the reuse of accounts
across many transactions. Imagine the following
scenario. Alice owns an EOA with address A and
a balance of three ether. Alice wishes to buy a
product from Bob for two ether. Alice sends a
transaction worth two ether to Bob. After this
purchase, address A has a balance of one ether.
Therefore, if Alice wants to spend her change, she
necessarily needs to send a transaction again from
her address A. Address reuse facilitates the proﬁl-
ing of rich transaction histories: complete ﬁnancial
history, list of all counterparties, time-of-day activ-
ity, and more. Furthermore, account reuse implies
that most users only own a handful of accounts.
Finally, the accounts owned by the same user can
effectively be clustered; see Section 5.

2.2 Preserving Privacy on Ethereum:

Tornado Cash

Users can break links with their transaction history
using a so-called mixer contract. Tornado Cash
(TC) is the most widely used, non-custodial mixer
on Ethereum. TC works as follows. Users de-
posit equal amounts to a TC smart contract (e.g.
1 ETH as shown below). After some time, users
can withdraw their funds from the mixer contract
to a freshly generated EOA by providing a zero-
knowledge proof that proves that the withdrawing
user is one of the depositors. Therefore, the with-
drawing EOA has enhanced its privacy since it has
become unlinkable to any unique depositor EOA.
Note that each TC contract applies a ﬁxed denomi-
nation for the mixed funds (e.g. 1 ETH). Otherwise,
linking deposits to withdraws would be trivial.

Figure 1: Example of the Tornado Cash 1 ETH pool:
addresses A through F deposit to and withdraw from
the pool. It quickly becomes impossible to associate
withdraw and deposit transactions given a growing
mixer.

A user’s anonymity is deﬁned by the number

of equal user deposits in a given pool. This is the
pool’s Anonymity Set. In the example above, D’s
withdrawal could have come from A, B or C, so the
anonymity set is 3 and the probability of correctly
guessing the deposit / withdrawal connection is 1/3.
The more users that deposit in the pool, the
greater the number of people that a withdrawal
could have come from. If you add a fourth deposit
to the example above, the probability of being cor-
rectly detected decreases to 1/4. However, there
are lots of ways users can compromise their pri-
vacy. If you can link A’s deposit to E’s withdrawal,
then the pool’s anonymity set decreases from 3 to
2. This means the probability of correctly guessing
your deposit / withdrawal connection increases to
1/2 because any withdrawal could only have come
from B or C’s deposits.

Tornado Cash provides mixing contracts (other-
wise known as mixing pools) for Ether and several
Ethereum-based tokens (e.g., DAI, USDC, wBTC,
etc.) in different denominations (1, 10, 100, etc.).

3 Tutela Overview

Tutela3, latin for protection, is a web application
that has three functions, it inform users which of
their Ethereum addresses are afﬁliated, how they
are linked and audits the anonymity sets of Tornado
Cash Pools. More on each of these below.

3.1 Ethereum Address Clustering

Users can search an ethereum address (e.g. 0x...)
or ENS (e.g. tutela.eth), and receive a summary of
its anonymity.

in Figure 1. The response page is separated into
three sections. The top left section summarizes
the anonymity of the searched address. It contains
an “anonymity score” out of 100, where a lower
number represents less anonymity. In this example,
the searched address has an anonymity score of
0, representing a large amount of leaked identity
information. Other information, such as balance in
ETH or ENS names, are shown when relevant.

The top right section is only populated if the
searched address is a Tornado Cash user. In this ex-
ample, the searched address has deposited 97 times
to a Tornado Cash pool and withdrawn 88 times.
Interestingly, we ﬁnd that through heuristics, we
are able to tie 87 of those withdraw transactions to
deposit transactions, thereby meaningfully reduc-
ing the useful size of the Tornado Cash pool. See
Section 6 for more details.

The bottom section labeled “Linked Addresses”
shows a list of addresses clustered with the
searched one. Each item in this list is denoted as ei-
ther an externally owned address (EOA), a deposit
address, or an exchange address. Each item also
contains a conﬁdence score denoting the strength
of association with the searched address, and the
heuristic that bound it to the searched address. This
example shows a thousand clustered addresses rep-
resenting an entity with a large wallet portfolio
(e.g., bot) – hence why the anonymity score is zero.

3.2 Ethereum Address Reveals

Figure 3: Tutela transaction page when searching an
Ethereum address. This address is also a TC user.

Figure 2: Tutela address page when searching an
Ethereum address. This address is also a TC user.

We summarize the main functionalities shown

3At the time of publication, Tutela is hosted at https:

//www.tutela.xyz.

To see a history of when an Ethereum user po-
tentially committed reveals, users can select the
transactions tab on the landing page and input an
Ethereum address or ENS. The right hand side of
Figure 3 shows a graph of when these revealing
transactions occurred where the x-axis denotes the

weeks prior to the current date. Each bar in the
graph corresponds to an individual week and upon
clicking on each bar, Tutela will show the details of
the potentially revealing transactions underneath.
On the left hand side, users can see statistics on
their potential reveals as well as a comparison to
the average Tornado Cash user.

3.3 Tornado Cash Anonymity Set Auditor

The Tornado Cash Anonymity Set Auditor, com-
putes the ﬁve heuristics described in Section 6 for
each Tornado Cash pool to determine how many
potentially compromised deposits are in each pool.

Figure 4: Tutela interface when searching a Tornado
Cash pool.

If a user selects a Tornado Cash Pool from the
dropdown list on the landing page, the top right of
the results page will show the headline number of
equal user deposits in a Tornado Cash pool, oth-
erwise known as its anonymity set. Below that,
we compute the “true” anonymity set size for the
pool, subtracting out all equal user deposits that
may have been compromised through our heuris-
tics. This gives the number of “uncompromised
deposits”. At the time of publication, the Tor-
nado Cash website reports only the full anonymity
set size, not taking into account potential compro-
mises.

At the bottom of Figure 4, users can supply an
address to check, in a private way, if it has made
any compromising transactions, inspired by the
popular website “Have I been pwned?”4.

A concrete use case of Tutela is to adjust
anonymity set to protect the privacy of Tornado
Cash users more faithfully. As described in Sec-
tion 2, if a pool has many compromised deposits, it
provides less privacy than a user believes.

4See https://haveibeenpwned.com.

4 Data and Setup

We discuss the data sources used to build Tutela.

Ethereum transactions are downloaded from the
crypto ethereum dataset using BigQuery, in-
cluding all transactions from August 7th, 2015 to
October 1st, 20215.
In total, this amounts to 4
terabytes of data with over 1B rows. In addition,
we assume access to a list of known addresses ob-
tained from a public Kaggle challenge6, containing
almost 20,000 labelled addresses corresponding
to different centralized exchanges, decentralized
exchanges, relayers, DeFi applications, and more.
This list will be used to identify exchange addresses
for heuristics and apply known constraints on the
inferred identity of clustered addresses.

Additionally, we create a partition of the trans-
action data from crypto ethereum pertaining
to Tornado Cash pools. This is done by checking
that the address receiving a transaction is a Tor-
nado Cash smart contract (taken from the BigQuery
dataset tornado cash transactions). To
capture the transactions executed by the Ethereum
virtual machine (e.g., through a smart contract), we
use the crypto ethereum.traces table. In
the special case that a withdrawal from a Tornado
Cash pool is made by a relayer, we decode the input
code using the contract ABI to ﬁnd the recipient ad-
dress. In total, we uncover around 97,365 deposit
and 83,782 withdraw transactions across all pools.
These two transaction sets will be used for Tornado
Cash-speciﬁc heuristics.

5 Ethereum Heuristics

Using this large dataset, we describe two Ethereum-
wide heuristics used to cluster together addresses
potentially belonging to the same entity.

5.1 Deposit Address Reuse

Deposit address reuse (DAR) links together EOAs
through the usage of a centralized exchange (CEX).
We refer to the original paper (Victor, 2020) for a
detailed description but provide an overview here.
When users deposit Ether to a CEX, the ex-
change typically creates “deposit addresses”, which
receive the assets from the EOA and then forward
these funds to the main addresses associated with
the CEX. Critically, these deposit addresses are

5In the web application, Tutela is updated weekly.
6See the list of labelled Ethereum addresses found
https://www.kaggle.com/hamishhall/

at
labelled-ethereum-addresses.

created per customer, not per address. That is, mul-
tiple addresses that send funds to the same deposit
address are highly likely to be owned by the same
entity. However, these deposit addresses are not
known. The DAR algorithm seeks to identify de-
posit addresses through heuristics. It uses two hy-
perparameters: the maximum amount difference
α and the maximum time difference τ between
two transactions: a “receiving” transaction from
an EOA to a suspected deposit address, and a “for-
warding” transaction from a deposit to a main ex-
change address (we assume access to a list of main
CEX addresses). The intuition is that true deposits
likely forward funds quickly, and differences in
amount should only be due to transaction fees. We
exclude known entities (e.g. CEX, DEX, miner,
etc.) from being classiﬁed as deposit addresses.

Then, we can search for (EOA, deposit,
exchange) tuples that match the constraints set
by α and τ . If we construct an undirected graph
with addresses as nodes and edges between asso-
ciated EOA and deposits, a “cluster” is deﬁned as
a weakly connected component. This deﬁnition
captures interesting cases where a single entity has
multiple EOAs that send to different deposits of
multiple CEXs (see Figure 5). In practice, we pick
α = 0.01 and τ = 3, 200 (Victor, 2020).

For each cluster, we would like to assign a conﬁ-
dence score, representing our belief in this cluster
representing a single entity. We note that any un-
certainty in clustering must come from uncertainty
in deﬁning deposit addresses. So, for any address
in a cluster C, we assign conﬁdence as the average
conﬁdence for deposits in C. Now, for any deposit
v, we deﬁne conﬁdence as:
(cid:18) |af − ar|
(cid:26) 1
α
2

(cid:18) tf − tr
τ

κ(v) = 1 −

(cid:19)(cid:27)

1
2

+

(cid:19)

where af and ar are the amounts from the for-

Figure 5: Graph of transactions between EOA, deposit,
and CEX addresses. A cluster is deﬁned as a weakly
connected component in an undirected subgraph con-
taining only EOA and deposit nodes. The gray circles
show EOA addresses in two clusters.

warding and receiving transactions, respectively.
Similarly, tf and tr are the forwarding and receiv-
ing block numbers. A larger difference in either
amount or time would decrease the conﬁdence,
which is bound to be between 0 and 1.

5.2 Learned Node Embedding

The beneﬁt of DAR is interpretability: we can un-
derstand (to a degree) why the algorithm believes
two addresses are linked. However, this comes at
the cost of recall and the ability to identify dense
clusters. DAR searches for a very speciﬁc be-
havior, and most addresses will not be in a clus-
ter of greater than size 1. Initial feedback from
Tutela users reported limited success in ﬁnding
clusters. To supplement DAR, we consider a sec-
ond Ethereum-wide heuristic (NODE) that projects
addresses to points in a low-dimensional vector
space based on who it transacts with. In this vec-
tor space, addresses belonging to the same entity
should be close together in Euclidean distance.

Consider constructing an undirected graph
G(V, E) from all Ethereum transactions, where
nodes V are composed of distinct addresses, and
an edge is placed between two nodes if there is a
transaction between them. Each edge is given a
weight w : V × V → N designating the number of
interactions between two addresses. For instance,
and if Alice has sent Bob 1 ETH ﬁve times, then
w(Alice, Bob) = 5. Note that this graph is distinct
from the one used in Section 5.1.

At this abstraction layer, we seek to learn a “node
embedding function” f : V → Rd that projects
a node to a d-dimensional vector representation.
Importantly, we want this embedding to capture se-
mantic information about the node, such as which
other addresses it frequently interacts with. To
do so, we leverage popular graph representation
learning algorithms (Grover and Leskovec, 2016;
Rozemberczki and Sarkar, 2018).
In particular,
we focus on Diff2Vec (Rozemberczki and Sarkar,
2018), which has been applied to blockchain trans-
actions (B´eres et al., 2021), though not at scale.

The intuition of Diff2Vec is to summarize a node
by its neighborhood through a diffusion-like ran-
dom process. Speciﬁcally, there are four steps to
Diff2Vec: (1) generating a “diffusion graph”, (2)
sampling a “node sequence”, (3) extracting fea-
tures, (4) learning a neural network embedding.
We brieﬂy summarize each step below.

ExchangesDepositsEOAsStep One Fixing a starting node v ∈ V , we
initialize a diffusion subgraph ˜G containing only
{v}. Randomly sample two nodes, u from ˜G and
w ∈ Neighbors(u, G), where G is the original
graph. Add node w and the edge (u, w) to ˜G.
Repeat until ˜G has l nodes, where l is a hyper-
parameter representing the amount of information
we want to capture in our eventual node embedding.
A larger l may capture a large neighborhood but
sacriﬁce in granularity.
Step Two Given ˜G, we generate a sequence
s = (v1, v2, . . .) recording the nodes visited dur-
ing an Euler walk. To do this, we must ensure
that ˜G is Eulerian, which holds if every node has
an even degree. A simple way to achieve this is
to double each edge in ˜G. At this point, we can
summarize a node v ∈ V by multiple sequences
S = (s1, s2, . . .), each from a random walk.

Step Three Given a set of sequences S, we aim
to produce a single feature vector based on frequen-
cies of which vertices appear near each other in
sequences s ∈ S. Speciﬁcally, ﬁx a node v. Then,
pick a window size h. Count how many times other
nodes appear within h positions before and after
when v appears, summed over all sequences s ∈ S.
This will result in 2h vectors each of length |V | —
2 from counting before and after; h from counting
frequencies 1 to h positions away from v; |V | since
each vector stores counts of all nodes in V . Denote
this feature vector by y(v) ∈ R2h|V |.

Step Four Finally, we wish to compress the fea-
ture vector from Step Three to a d-dimensional
continuous space. To do this, we train a two layer
perceptron fθ = f1 ◦ f2 using stochastic gra-
dient descent (Goodfellow et al., 2016; Kingma
and Ba, 2014). Deﬁne f1 : R|V | → Rd and
f2 : Rd → R2h|V |, with a ReLU nonlinearity in
between. The input to the network is a one hotted
representation of the current node v. To train the
parameters θ, we optimize the objective:

L(v; θ) = dist(fθ(one hot(v)), y(v))

(1)

where dist is a distance function. Examples
include Euclidean distance, or a cross entropy loss.
That is, Equation 1 optimizes fθ to predict the
frequency vector. Then, assign f1(v) ∈ Rd to be
the ﬁnal embedding for v.

(a) Subgraph ˜G

(b) Sequences S

(c) Feature y(a)

(d) Word2Vec fθ

Figure 6: The four steps of the Diff2Vec algorithm, fo-
cusing on the individual node a ∈ V .

(Mikolov et al., 2013a,b). In practice we optimize
with SGD for 5 epochs with a learning rate of 0.025.
We set d = 128, l = 40, and h = 5. Given an ad-
dress v ∈ V , to ﬁnd its cluster, we can search
for the closest k vectors in Rd. In practice, we
accomplish this efﬁciently using FAISS (Johnson
et al., 2019). Unlike DAR, this heuristic will al-
ways return k addresses. We score the conﬁdence
of an address u in the cluster by the inverse of its
Euclidean distance to the embedding of v:

κ(u) =

1
(cid:107)fθ(one hot(u)) − fθ(one hot(v))(cid:107)2

since a smaller distance (closer to 0) represents
more semantic similarity of u to v.

5.3 Anonymity Score

Given a query address v, using one or both heuris-
tics, we obtain a set of clustered addresses C with
conﬁdence scores κ for every member. We wish to
compute a statistic summarizing the anonymity of
the query address, such that a larger cluster reveals
more identity information, hence lower anonymity.
We deﬁne the anonymity score as:

anonymity(v) = 1−tanh(β ∗κ(v)∗|C|) (2)

where β is a hyperparameter controlling slope.
A larger value for β more aggressively penalizes
larger clusters. We chose β = 0.1. This anonymity
score is a summary statistic representing how easily
connected an address is to other addresses poten-
tially owned by the same entity.

6 Tornado Cash Heuristics

Steps three and four amount to Word2Vec7

7We use gensim.models.word2vec.

Focusing on the subset of Ethereum transaction
data involving Tornado cash deposits and with-

bcdaa - b - a - c - d - a - bd - c - d - a - d - b - ad - a - c - d - a - b - a y(a) = [ 0 3 0 4  ;  0 3 2 0 ] a b c d      a b c dpositionbeforeafterEmbeddingPredictionLosscross_entropy(f(a), y(a))NonlinearityNonlinearityInput (one hot) [ 1 0 0 0 ]drawals, we discuss a ﬁve heuristics for identifying
compromised deposits.

6.1 Address Match

Figure 7: Address match – The triangle represents a sin-
gle address withdrawing and depositing to a TC pool.

Suppose the address making a deposit transac-
tion to a Tornado Cash pool matches the address
making a withdrawal transaction (from the same
pool). In that case, the two transactions can be
linked, and the corresponding deposit is compro-
mised as the user identity may be revealed. These
may be TORN yield farmers who deposit and
withdraw to the same address and are only proﬁt-
motivated or clumsy Tornado cash users.

6.2 Unique Gas Price

Figure 9: Linked ETH addresses – the green arrows
represent interactions between two addresses A and D
outside of TC. Addresses A and D deposit and with-
draw from the same Tornado Cash pool, respectively.

6.3 Linked ETH Addresses

This heuristic aims to link withdraw and deposit
transactions on Tornado Cash by inspecting ETH
(non-Tornado Cash) interactions. This is done by
constructing two sets, one corresponding to the
unique Tornado Cash deposit addresses and one to
the unique Tornado Cash withdraw addresses, to
then make a query to reveal transactions between
addresses of each set: when at least three such
transactions are found, the withdraw and deposits
addresses will be considered heuristically linked in
Tornado Cash. The more transactions found, the
more conﬁdent we are in the link.

6.4 Multiple Denomination

Figure 8: Unique gas price – two addresses depositing
and withdrawing with the same 27.4 gwei gas price.

Prior to EIP-1559, Ethereum users could spec-
ify the gas price when making a deposit or with-
drawal to a Tornado Cash pool. Those who do so
tend to specify gas prices that are identical for de-
posit and withdrawal transactions. User-speciﬁed
gas prices follow common patterns such as being
round numbers or being unique to an individual.
Care must be taken to remove transactions made
by a relayer service which may set gas prices as
well. Relayer-speciﬁed prices also tend to be oddly
speciﬁc and not round numbers. In practice, relay-
ers can be ﬁltered out by decoding the input code
from Ethereum transaction data.

Figure 10: Multi Denomination – Addresses A and D
deposit and withdraw the same number of times from
the same three Tornado Cash pools, respectively.

Previous heuristics examine isolated pairs of de-
posit and withdraw transactions. This heuristic,
however, studies an address’ history of transac-
tions. We compute the portfolio of an address’ with-
drawals across Tornado Cash pools, hence “multi-
denomination”. For instance, Alice may have with-
drawn from the 1 ETH pool twice, the 0.1 ETH
pool ﬁve times, the DAI pool once. Then we search
for all addresses whose portfolio of deposit trans-
actions is exactly the same as Alice’ withdrawal
portfolio. An address depositing into the 1 ETH

pool three times, the 0.1 ETH pool ﬁve times, and
the DAI pool once would be a valid match. (Option-
ally, we can relax this to search for deposits with
at least as many as Alice’ withdrawals, though this
risks more false positives). All Tornado Cash trans-
actions under the matched deposit and withdrawal
address are linked to each other.

We ignore all addresses that make fewer than
three transactions to Tornado Cash pools, and ig-
nore all addresses that interact with only one pool.
Additionally, to reduce the likelihood of false posi-
tives, we further constrain deposits within a multi-
denomination reveal to occur within a 24 hour win-
dow; similarly we separately constrain withdraws
within a multi-denomination reveal to occur within
a 24 hour window. This intuition being that careless
users will deposit or withdraw all at once.

6.5 TORN Mining

likely when the deposit or withdrawal in the pair
also claimed the AP. This heuristic is most effective
if AP is being claimed for a single deposit and is
harder to compute for multiple deposits.

6.6 Connection to Ethereum-based Clusters

Unlike the Ethereum-wide heuristics (i.e., DAR
and NODE), which ﬁnd clusters of compromised
addresses, Tornado Cash heuristics ﬁnd clusters of
compromised transactions. However, aside from
address matching, a subset of these Tornado Cash
heuristics can also be applied on the address level:
given a cluster of compromised transactions, ﬁnd
the sender address for each transaction, and com-
pute the unique set, removing any addresses in our
list of known addresses. These clusters can be
added to the ones discussed in Section 5. This in
turn, will further enrich the anonymity score.

7 Analysis

We provide a brief quantitative analysis of the scale
and efﬁcacy of Tutela heuristics.

Figure 11: TORN Mining – Address D was given 10
TORN upon withdrawing from the 1 ETH pool in re-
turn for anonymity points, linking address D to a de-
posit 100 blocks prior. Searching records, only address
A deposited in the 1 ETH pool 100 blocks prior, com-
promising address D. Note that the numbers presented
here are for explanatory purposes.

In February 2021, Tornado Cash introduced
anonymity mining.
It was an incentive scheme
to encourage more deposits in Tornado Cash pools,
thereby increasing their anonymity sets. Tornado
Cash rewarded participants a ﬁxed amount of
anonymity points (AP) based on how long they
left their assets in a pool.

After withdrawing assets, users can claim
Anonymity Points. The amount withdrawn is
recorded in the transaction. If a user uses a sin-
gle address to claim all of their anonymity points,
one can calculate the exact number of Ethereum
blocks that their assets were in the pool because
the AP yields were public and ﬁxed. If there is
a unique deposit / withdrawal combination in a
pool separated by this number of Ethereum blocks,
the transactions are assumed linked. This is more

Figure 12: 10k subgraph of 26M graph created via de-
posit address reuse. Contains EOA (green), deposits
(blue), and exchanges (red).

7.1 Ethereum Heuristics

Using DAR, we found 26M EOA addresses, re-
sulting in 2.5M clusters of Ethereum addresses.
The average cluster size contains 4.3 (± 8.6) EOA
addresses; the largest cluster contains 2.1k EOA ad-
dresses. Figure 12 shows a visualization of 10,000
random nodes from the DAR graph. In particular,

we observe interesting structure with many small
clusters scattered uniformly, balanced by several
large clusters in the perimeter.

Next, we can measure the quality of the DAR
clusters using a held out “test set” of known clus-
tered addresses. We obtain such a set from (B´eres
et al., 2021) where 1,028 clusters of addresses (av-
erage size of 4.0 ± 3.6 EOA addresses per cluster)
are derived from ENS names. We ﬁnd a recall of
39.4% using DAR. While there is room for im-
provement, we are cautiously optimistic that DAR
is able to recover a nontrivial number without any
knowledge of ENS names. This provides evidence
for the generality of DAR clusters.

Figure 13: 100k random subset of 131M embedding of
Ethereum addresses projected from to 3D using PCA.

Using Node, we found 131M clusters of
Ethereum addresses, with each cluster having ex-
actly 9 members by design (10 including itself).
Figure 13 shows a visualization of 100,000 ran-
dom embeddings of Ethereum addresses from the
NODE set, where embeddings are projected down
to two dimensions using PCA (trained on a subset
of 1M address embeddings). The color in Figure 13
shows the density, estimated using a Gaussian ker-
nel, where a lighter (yellow) color represents higher
density. That is, the ﬁgure shows a non-hollow ball
of address embeddings. For any query address,
Tutela returns the closest neighbors from the point
cloud. Again, we access quality using the held-
out known clusters, ﬁnding a recall of 37.8% with
NODE, two percent lower than DAR. However, as
shown in Figure 14, when DAR and NODE are

used in combination, the recall increases 7% to
44.8%, indicating that DAR and NODE ﬁnd clus-
ters of different “types”. In Tutela, searching an
address will return both clusters types.

Figure 14: Plot of the recall of held-out address clus-
ters through ENS reveals using deposit address reuse
(DAR), diff2vec (NODE), and the combination of both
(BOTH). A higher recall represents a better heuristic.

7.2 Tornado Cash Heuristics

Of the 97.3k Tornado Cash equal user deposits, we
found 42.8k are potentially compromised: 18.6K
from the address match reveal, 102 from the unique
gas price reveal, 18.9K from the linked ETH ad-
dress reveal, 16.2K from the multi-denomination
reveal, and 358 from the TORN mining reveal (with
overlap between reveals). Splitting this by pool, we
ﬁnd the anonymity set to be reduced by 37% (±
15%) on average. Figure 15 shows the uncompro-
mised anonymity sets by pool.

We ﬁnd that some of the pools could be heav-
ily compromised (such as the cDAI and WBTC
pools), whereas other pools are less effected (e.g.
USDC). In summary, while many of the Tornado
Cash heuristics are simple, they are quite powerful.
These ﬁndings could help Tornado Cash developers
and users alike, measure and understand the degree
user privacy offered.

Figure 15: Plot of the percentage of compromised ver-
sus uncompromised (pink) deposits by pool.

DARNODEBOTH010203040Recall39.437.844.88 Discussion and Future Work

We conclude with a few discussion points and ﬁnal
remarks. In particular, we present possible limita-
tions and extensions to the proposed system.

8.1 Limitations

We acknowledge that heuristics are not perfect mea-
sures. In return for simplicity, there will likely be
false positives in practice, e.g., addresses in a clus-
ter that should not be there, or faithful Tornado
Cash transactions labeled as compromised.

For the Ethereum heuristics, we emphasize that
picking proper hyperparameters is a challenge. In
DAR, the quality of the algorithm is very sensi-
tive to the choice of maximum thresholds α and
τ . With too small thresholds, no clusters will be
found; with too large thresholds, clusters will be
low quality, containing many addresses they should
not. Currently, the best practice is to tune these by
hand. In NODE, the size of subgraph l and the
dimensionality d similarly determine the resulting
quality. The choice of l should reﬂect the size of the
full graph G: a bigger graph requires the embed-
ding to summarize a larger neighborhood. Other
NODE hyperparameters, such as window size or
optimization choices, are less important to the ﬁ-
nal embedding. Running the DAR or NODE on
Ethereum is computationally expensive, requiring
both a large RAM and storage.

On the other hand, the Tornado Cash heuristics
are much simpler than the Ethereum ones, and
more deterministic. However, given that only a
small subset of Ethereum addresses are Tornado
Cash users, they have limited applicability to the
majority of potential Tutela users.

8.2 Extensions

As described, Tutela uses only on-chain data to ac-
cess anonymity. However, extensions can be made
to include off-chain data, such as from decentral-
ized applications (e.g. DeFI, NFT, games, etc.),
layer two data, external blockchains, and more.
The inclusion of off-chain data could lead to more
powerful de-anonymization attacks.

8.3 Broader Impact

There is a need for greater privacy on the
blockchain to accelerate adoption. Consumers
would not be willing to receive their salaries publi-
cally or have their online purchasing history in the

public for all to see. Businesses would not pay sup-
pliers on the blockchain if their competitors could
see who and how much they pay for supplies. Simi-
larly, investment funds want to keep their strategies
private and not copied before their trades have even
been recorded on-chain.

That said, blockchain privacy is a difﬁcult issue
to navigate. Currently, blockchain privacy and ﬁnal-
ity create opportunities for money laundering and
nefarious activities, so privacy solutions combined
with regulation will need to account for these con-
siderations. In the meantime, we hope that Tutela
will help law-abiding blockchain users better pro-
tect themselves in the current ecosystem.

Acknowledgments

We would like to acknowledge both the Tornado
Cash team and the Convex Research team for their
support. This work was funded by the Tornado
Cash community bounty to develop anonymity
tools to protect user privacy. We also thank the Tor-
nado Cash community at large for their consistent
feedback and patience through our application’s de-
velopment. Finally, we thank the Stanford Venture
Studio for their support with compute credits.

A Appendix

A.1 Tornado Cash Heuristic: Wallet

Fingerprints

We present a Tornado Cash heuristic for identify-
ing compromised transactions that is not yet imple-
mented in Tutela at the time of publication.

In the Ethereum ecosystem, users can select from
numerous wallet softwares. Wallet ﬁngerprints al-
low one to establish the wallet software a user sent
their transaction from. Such wallet ﬁngerprints
could largely fragment the anonymity set of Tor-
nado Cash users. For instance, a withdrawal trans-
action sent with wallet software A can only be
indistinguishable among the deposit transactions
sent by users of the same wallet software A.
the max fee

and
(i.e.,
max priority fee ﬁelds of a transaction) are
typically set by the wallet software. These values
are often computed by open-source algorithms
that are different for each wallet. For instance,
Blocknative’s algorithm8 uses the following:

Transaction fees

max fee = base fee + 2 · max priority fee

8See for more details: https://www.blocknative.

com/gas-estimator.

Therefore, it is straightforward to assess the wallet
software for many transactions. Assuming that
accounts do not change their used wallet software,
we can more conﬁdently identify compromises.

A.2

Improvements to Measuring Tornado
Cash’s True Anonymity Set Size

The anonymity set size listed on Tornado Cash’s
webpage9 does not take into account compromised
deposits. We can compute the uncompromised (or
useful) anonymity set size as the total number of
deposits in this pool removing revealed deposits
from each of the heuristics above. This resulting
number is a more faithful representation of the
privacy provided by a Tornado Cash pool.

In this regard, the very deﬁnition of anonymity
set offers a way of interpreting heuristics producing
multiple deposit addresses as output for a single
withdraw address input by measuring anonymity in
terms of the Shannon entropy (Diaz et al., 2002).
Concretely, we are able to quantify how much
anonymity is lost after running a heuristic H for
a given withdrawal address. Heuristics linking ad-
dresses by scanning ETH transactions outside the
TC environment or linking addresses by matching
deposit to withdraw portfolios typically produce a
large number of candidate addresses: organizing
these outputs as a non-empty set C, they provide a
natural ”reﬁned anonymity set” notion - of course,
these outputs need not to include the actual deposit
address, but in a worst-case scenario a clear inter-
pretation can be given. Calling the anonymity set
D, D its cardinality and recalling its deﬁnition, we
can compute its Shannon entropy by simply taking
the logarithm of its cardinality:

H(D) = −

1
D

ln

(cid:17)

(cid:16) 1
D

(cid:88)

d∈D

= ln(D)

This quantity is a central notion in classical in-
formation theory and represents how much ”regu-
larity” there is in a random variable: higher entropy
will mean low information.
In our context, the
deﬁnition of anonymity set implies that any of its
members is equally likely to be the deposit address
actually linked to a given withdraw address and we
interpret this fact as not having more information
about the participant addresses of the actual trans-
action than the size of the TC anonymity set. A

9https://tornadocash.eth.link

heuristic H (or combination of heuristics) produc-
ing a reﬁned set of candidates C = C(y) will then
update our prior belief and potentially locate the ac-
tual deposit address in this set: now the conditional
entropy H(C) is subtracted from the a priori en-
tropy resulting in a quantity known as conditional
information gain:

I(X, X|Y = y) = H(X) − H(X|Y = y) =

= ln(|D|) − ln(|C|)

This turns out to be equal to the Kullback-Leibler
divergence between the prior and posterior prob-
ability mass functions for the anonymity sets. It
measures how much information is gained upon
running the heuristic. In this sense, larger sets C
produce little information gain, whereas smaller
ones produce larger information gains: in the case
of C containing the actual deposit address corre-
sponding to a given withdrawal, we interpret this
information gain as a greater anonymity loss.

References

Andreas M Antonopoulos and Gavin Wood. 2018.
Mastering ethereum: building smart contracts and
dapps. O’reilly Media.

Ferenc B´eres, Istv´an A Seres, Andr´as A Bencz´ur,
and Mikerah Quintyne-Collins. 2021. Blockchain
is watching you: Proﬁling and deanonymizing
ethereum users. In 2021 IEEE International Confer-
ence on Decentralized Applications and Infrastruc-
tures (DAPPS), pages 69–78. IEEE.

Vitalik Buterin et al. 2013. Ethereum white paper.

GitHub repository, 1:22–23.

Nicolas Christin. 2013. Traveling the silk road: A mea-
surement analysis of a large anonymous online mar-
ketplace. In Proceedings of the 22nd international
conference on World Wide Web, pages 213–224.

Claudia Diaz, Stefaan Seys, Joris Claessens, and Bart
Preneel. 2002. Towards measuring anonymity.
In
International Workshop on Privacy Enhancing Tech-
nologies, pages 54–68. Springer.

Ian Goodfellow, Yoshua Bengio, and Aaron Courville.

2016. Deep learning. MIT press.

Aditya Grover and Jure Leskovec. 2016. node2vec:
Scalable feature learning for networks. In Proceed-
ings of the 22nd ACM SIGKDD international con-
ference on Knowledge discovery and data mining,
pages 855–864.

Bernhard Haslhofer, Roman Karl, and Erwin Filtz.
2016. O bitcoin where art thou? insight into large-
In SEMANTiCS (Posters,
scale transaction graphs.
Demos, SuCCESS).

Jeff Johnson, Matthijs Douze, and Herv´e J´egou. 2019.
IEEE

Billion-scale similarity search with gpus.
Transactions on Big Data.

Diederik P Kingma and Jimmy Ba. 2014. Adam: A
method for stochastic optimization. arXiv preprint
arXiv:1412.6980.

Sarah Meiklejohn and Rebekah Mercer. 2018. M¨obius:

Trustless tumbling for transaction privacy.

Tomas Mikolov, Kai Chen, Greg Corrado, and Jef-
frey Dean. 2013a. Efﬁcient estimation of word
arXiv preprint
representations in vector space.
arXiv:1301.3781.

Tomas Mikolov, Ilya Sutskever, Kai Chen, Greg S Cor-
rado, and Jeff Dean. 2013b. Distributed representa-
tions of words and phrases and their compositional-
In Advances in neural information processing
ity.
systems, pages 3111–3119.

Malte M¨oser, Rainer B¨ohme, and Dominic Breuker.
2013. An inquiry into money laundering tools in
In 2013 APWG eCrime re-
the bitcoin ecosystem.
searchers summit, pages 1–14. Ieee.

Satoshi Nakamoto. 2008. Bitcoin: A peer-to-peer elec-
tronic cash system. Decentralized Business Review,
page 21260.

Alexey Pertsev, Roman Semenov, and Roman Storm.
2019. Tornado cash privacy solution version 1.4.

Benedek Rozemberczki and Rik Sarkar. 2018. Fast
sequence-based embedding with diffusion graphs.
In International Workshop on Complex Networks,
pages 99–107. Springer.

Istv´an Andr´as Seres, D´aniel A Nagy, Chris Buckland,
and P´eter Burcsi. 2019. Mixeth: efﬁcient, trust-
In Inter-
less coin mixing service for ethereum.
national Conference on Blockchain Economics, Se-
curity and Protocols (Tokenomics 2019). Schloss
Dagstuhl-Leibniz-Zentrum fuer Informatik.

Friedhelm Victor. 2020. Address clustering heuristics
for ethereum. In International Conference on Finan-
cial Cryptography and Data Security, pages 617–
633. Springer.

