2
2
0
2

n
u
J

3
1

]
T
E
.
s
c
[

1
v
0
1
2
6
0
.
6
0
2
2
:
v
i
X
r
a

Sync or Fork: Node-Level Synchronization
Analysis of Blockchain

Qin Hu1, Minghui Xu2, Shengling Wang3(∗), and Shaoyong Guo4

1 Indiana University - Purdue University Indianapolis, USA
2 The George Washington University, USA
3 Beijing Normal University, China
4 Beijing University of Posts and Telecommunications, China
* Corresponding author
Email: qinhu@iu.edu, mhxu@gwu.edu, wangshengling@bnu.edu.cn,
syguo@bupt.edu.cn

Abstract. As the cornerstone of blockchain, block synchronization plays
a vital role in maintaining the security. Without full blockchain synchro-
nization, unexpected forks will emerge and thus providing a breeding
ground for various malicious attacks. The state-of-the-art works mainly
study the relationship between the propagation time and blockchain
security at the systematic level, neglecting the ﬁne-grained impact of
peering nodes in blockchain networks. To conduct a node-level synchro-
nization analysis, we take advantage of the large deviation theory and
game theory to study the pull-based propagation from a microscopic
perspective. We examine the blockchain synchronization in a bidirec-
tional manner via investigating the impact of full nodes as responders
and that of partial nodes as requesters. Based on that, we further reveal
the most eﬃcient path to speed up synchronization from full nodes and
design the best synchronization request scheme based on the concept of
correlated equilibrium for partial nodes. Extensive experimental results
demonstrate the eﬀectiveness of our analysis.

Keywords: Block synchronization · Large deviation theory · Game the-
ory · Correlated equilibrium.

1

Introduction

Since the appearance of Bitcoin [1], cryptocurrency as the killer application of
blockchain piques substantial attention from the whole society to the underly-
ing distributed ledger technology. Research on blockchain from all walks of life
indicates its great potential and versatility. It is reported that the blockchain
market size over the globe reaches $3 billion in 2020 and is expected to surge to
$39.7 billion by 2025 [2].

As the infrastructure of blockchain systems, the peer-to-peer network con-
sisting of peering nodes supports the most important operations of information
dissemination and exchange, including both control and data messages. To main-
tain the consistent recognition of the main chain, the synchronization of newly

 
 
 
 
 
 
2

Q. Hu et al.

generated blocks among all nodes becomes extremely important. Otherwise, un-
expected forks will emerge, which might be exploited by malicious clients to
achieve various attacks, such as double spending and selﬁsh mining, and can
even lead to the breakdown of a blockchain system.

To enable the synchronization of blockchain, there exist ﬁve types of block
propagation mechanisms [3], i.e., advertisement, header sending, unsolicited push,
relay network, and push-advertisement hybrid. Focusing on the behaviors of
nodes propagating block information, we can summarize them as pull-based and
push-based. In the pull-based propagation, nodes with timely information of the
blockchain, termed as full nodes, respond to the requests of updating block infor-
mation from neighboring nodes, named as partial nodes, which can achieve block
synchronization cost-eﬃciently in an on-demand manner. While in the push-
based one, any node receiving the newly generated block automatically pushes
this piece of information to neighbors, which can synchronize the blockchain
network quickly but will cause unnecessary communication among nodes. Other
works about blockchain synchronization mainly study the relationship between
the propagation time and blockchain security at the systematic level [4–7], ne-
glecting the ﬁne-grained impact of peering nodes in blockchain networks.

In this paper, we study the blockchain synchronization in pull-based propa-
gation from a microscopic perspective, using the large deviation theory and game
theory to investigate diﬀerent roles of peering nodes in synchronizing block in-
formation. This suggests the feature of node-level analysis of this work. Besides,
our research is bidirectional, which captures the feature of impacts on block syn-
chronization from two main types of nodes in the blockchain, i.e., the full node as
the responder and the partial node as the requester. Speciﬁcally, we reveal clues
about three critical questions: How will the full node’s response capability aﬀect
the synchronization? How to eﬃciently reduce its negative eﬀect on synchroniza-
tion? And how should the partial node to actively achieve the synchronization?
In summary, our contributions in this work include the following three as-

pects:

– The impact of full nodes on synchronization is quantitatively characterized
by the concept of response failure rate, which straightforwardly uncovers the
synchronization probability of connected partial nodes.

– The negative impact of full nodes on synchronization can be fast eliminated
via increasing the decay speed of the response failure rate, and the derived
expression of the decay speed indicates that enlarging the response capacity
related parameter is more eﬃciently than improving the response rate. This
paves a clear path to facilitate synchronization from full nodes.

– The optimal synchronization scheme for the partial node is established based
on the concept of correlated equilibrium, where a Node Synchronization (NS)
problem is formulated to guarantee that the partial node can get synchro-
nized without unnecessary cost or redundant response from full nodes.

The remaining of this paper is organized as follows. In section 2, we inves-
tigate the most related work on blockchain synchronization. Then we introduce
the node-level synchronization model for both the full node and the partial node

Sync or Fork: Node-Level Synchronization Analysis of Blockchain

3

in Section 3, where the full node’s response capability is further analyzed in Sec-
tion 4 while the best synchronization request mechanism for the partial node is
presented in Section 5. All theoretical analysis are evaluated in Section 6. And
ﬁnally, we conclude the whole paper in Section 7.

2 Related Work

Similar to traditional distributed systems, there are three levels of synchrony
of blockchain networks, namely synchronous, partially synchronous, and asyn-
chronous. As the representative blockchain application, Bitcoin whitepaper [1]
provides an initial analysis on its security against forks and double-spending at-
tacks with an oversimpliﬁed model. Since 2015, Bitcoin consensus algorithm has
been thoroughly investigated considering three levels of synchrony [8] [9]. Garay
et al. [8] formalize the Bitcoin consensus within a fully synchronous network. Per-
sistence and liveliness are proved to be guaranteed hinging on the synchronous
setting. Pass et al. [9] show that Bitcoin consensus satisﬁes consistency and live-
liness in a partially synchronous network, but consistency cannot be satisﬁed in
an asynchronous network.

As the most critical factor aﬀecting blockchain synchronization, the propaga-
tion time of control messages and data messages is investigated to reveal how it
aﬀects blockchain security against various attacks, such as forks, double spend-
ing, and selﬁsh mining, and how to mitigate the corresponding vulnerabilities.
The propagation time is shown as the primary cause for blockchain forks [4].
In response, researchers propose three methods to speed up propagation: min-
imizing veriﬁcation, pipelining block propagation, and increasing connectivity.
Sompolinsky and Zohar [5] study the relation between higher transaction rate
and the vulnerability to double-spending attacks, which shows that increasing
block size and block generation rate can improve the throughput, but will in-
crease the propagation time so that even weaker attackers can launch double-
spending attacks. Besides, the selﬁsh mining is investigated in a realistic setting
where propagation time is taken into account [6], indicating that it becomes eas-
ier with increasing propagation delay. For PoS-based consensus, Kang et al. [7]
propose a Stackelberg game based incentive mechanism to encourage miners to
propagate blocks, enabling lower propagation delay and higher security level.

For the propagation mechanism in blockchain networks, ﬁve popular cat-
egories are summarized in [3], including advertisement, header sending, un-
solicited push, relay network, and push-advertisement hybrid. Early on, the
advertisement-based propagation is adopted by Bitcoin, which has a two-round
message exchange procedure. Afterward, Bitcoin resorts to the header propa-
gation to avoid using inv messages. In unsolicited push propagation, miners di-
rectly broadcast newly-mined blocks. The relay network, adopted by FIBRE [10],
BloXroute [11], and Geeqchain [12], is to distribute relay nodes globally to which
miners can connect to and exchange information at a high speed. However, re-
lay nodes are criticized for introducing centralization to blockchain. Ethereum
adopts push and advertisement hybrid propagation by which a node can auto-

4

Q. Hu et al.

matically push messages to
nodes simultaneously [13].

√

n nodes and advertises messages to neighboring

In summary, existing works about blockchain synchronization focus on macro-
scopically investigating blockchain protocol to ﬁgure out the relationship be-
tween propagation time and security or propose new propagation mechanisms.
However, in this paper, we study the blockchain synchronization from a mi-
croscopic and node-level perspective, using the large deviation theory and game
theory to depict blockchain nodes precisely and investigate how nodes’ capability
aﬀect synchronization.

3 System Model

In this paper, we assume that full nodes are homogeneous in terms of information
request and response performance. Thus, we can shed light on the synchroniza-
tion status of the whole blockchain system via studying the response capability
of any speciﬁc full node. And all partial nodes are also assumed to be similar in
terms of interacting with full nodes to get synchronized. As full nodes and par-
tial nodes play diﬀerent roles in blockchain synchronization, we introduce their
models separately in the following.

3.1 Response Model of the Full Node

Considering that the requests of updating block information from partial nodes
arrive at the full node randomly, we assume that this stochastic event is a Poisson
process with arrival rate λ, which is inspired by the typical model of packet arrival
process in communication networks [14]. It usually takes some time for the full
node to respond and send out the latest block information since the node might
be busy on handling other tasks, which can also be assumed as a Poisson process
with response rate µ. To guarantee that the full node can ﬁnish responding to
the requests from partial nodes most of the time, we assume µ > λ. However,
even with this condition, there might still exist some cases where the full node
fails to respond.

To investigate this issue, we deﬁne the number of synchronization requests
arrived at the full node and that the node can respond during time period (t−1, t)
as at and rt, respectively, where t ∈ N∗. Then we can describe the request queue
at the full node as

Qt = (Qt−1 + at − rt)+,

where (·)+ denotes the positive part of the inside expression.

Next, we focus on the cumulative arrival and response process, denoted as
At = a1 + · · · + at and Rt = r1 + · · · + rt, respectively. Thus, the length of the
request queue until time t at the full node, deﬁned as Lt, will be

Lt = At − Rt.

(1)

Generally speaking, since µ > λ, one may expect that Lt would be negative,
making it pointless with the deﬁnition of queue length. However, due to the

Sync or Fork: Node-Level Synchronization Analysis of Blockchain

5

randomness of the arrival and response process, the queue length can become
positive, which may even overwhelm the response capability of the full node,
leading to the failure of responding synchronization requests. To prepare for the
worst case of response failure in blockchain, we focus on the maximum possible
queue length at the full node when t → ∞, which is deﬁned as L = supt>0 Lt,
and further investigate the possibility of the request queue being over-length,
i.e., L > Γ , where Γ is deﬁned as follows:

Deﬁnition 1 (Response capacity). The response capacity Γ of the full node
is the longest queue of synchronization requests that it can process without any
failure.

According to Deﬁnition 1, we can know that if L ≤ Γ , the fulll node can
handle all synchronization requests successfully. But if L > Γ , the request queue
is too long for the full node to handle, which will make the partial nodes sending
block synchronization requests fail to achieve the distributed consistency. To
analyze this important event, we introduce the following deﬁnition:

Deﬁnition 2 (Response failure rate). The response failure rate is the prob-
ability that the longest synchronization request queue arrived at the full node,
i.e., L, exceeds its response capacity Γ , denoted as P (L > Γ ).

With the help of P (L > Γ ), we can capture the full node’s failure of respond-
ing to block synchronization requests in a quantitative manner, which provides us
a more straightforward clue about the synchronization status of the neighboring
partial nodes. Based on this index, we can make adjustment or countermea-
sure in time to avoid unpredictable loss brought by the asynchronous blockchain
information among partial nodes, which will be analyzed in Section 4.

3.2 Synchronization Model of the Partial Node

We assume that the number of partial nodes in a blockchain network is N , and
each of them has direct access to multiple full nodes to obtain block synchro-
nization information. Speciﬁcally, for any partial node, we denote the set of full
nodes it has direct connections as M = {Mi}, i ∈ {1, · · · , m}, where m ∈ N∗ is
the number of full nodes. And the above-deﬁned response failure rate of these
full nodes can be denoted as Pi, i ∈ {1, · · · , m}.

For a cautious partial node, it may send the synchronization request to all
connected full nodes so as to obtain a higher successful synchronization probabil-
ity. Thus, the synchronization failure event can only happen to this partial node
when all full nodes failed to respond with the latest block information, which
means that the synchronization failure probability is (cid:81)m
i=1 Pi. And accordingly,
the successful synchronization probability of this partial node is 1 − (cid:81)m

i=1 Pi.

While in a more general case, a normal partial node might need to seriously
consider where to send the synchronization request. First, sending the request
costs communication resource, and thus generously sending the request to all
available full nodes can bring too much burden on the resource consumption for

6

Q. Hu et al.

the partial node. What’s more, with the assumption that all full nodes have the
same new information of the blockchain, it would be enough for the partial node
to receive at least one response and thus other redundant responses become a
waste. With this in mind, we can see that wisely sending the synchronization
request is vital for the partial node, which will be elaborated in Section 5.

4 Response Failure Analysis

In this section, we analyze the response failure rate P (L > Γ ) in detail. We
ﬁrst focus on the derivation of its decay speed I(x), based on which two critical
factors impacting the systematic response are discussed.

We ﬁrst let Γ = lx with x > 0. Then according to the Cram´er’s theorem [15],
for large l, there exists P (L > Γ ) = P (L > lx) ≈ exp(−lI(x)), which indicates
that the probability of L > lx will decay exponentially with the rate I(x) when
l → ∞. In detail, we have

lim
l→∞

1
l

log P (L > lx) = −I(x),

where I(x) is the rate function with the following expression

I(x) = inf
t>0

tΦ∗(

x
t

).

(2)

(3)

According to the large deviation theory and the calculation process in [16], we
can have the expression of I(x) as:

I(x) = x ln

µ
λ

.

(4)

As we mentioned earlier, I(x) reveals the decay speed of response failure rate
P (L > Γ ). In other words, the larger I(x), the sharper decrease of P (L > Γ ),
and thus the more successful the block synchronization for the requested partial
nodes. With this in mind, we desire to enlarge I(x) as much as possible. On one
hand, from the above expression of I(x), one can tell that it is linearly increasing
with the response capacity related parameter x when the ratio of the response
rate µ to the arrival rate λ is ﬁxed. On the other hand, if x is given, we can
see I(x) is logarithmically correlated to µ
λ . Therefore, theoretically speaking,
increasing x is more eﬀective to improve I(x) than increasing µ/λ, which will be
numerically analyzed in Section 6.
Considering that x and µ

λ are two main factors impacting the value of I(x),
we study them further in the following. As x is based on the response capacity Γ
and the arrival rate λ is a system-wide parameter which cannot be adjusted, we
mainly focus on Γ and µ since they are more controllable from the perspective of
the full node. In the following, we investigate how to set Γ and µ to meet some
speciﬁc system-performance requirements on response failure rate. To this end,
we ﬁrst denote a response failure tolerance degree as (cid:15) ∈ (0, 1], which acts as the
constraint for the failure rate P (L > Γ ). And then we introduce the following
two deﬁnitions.

Sync or Fork: Node-Level Synchronization Analysis of Blockchain

7

Deﬁnition 3 (Eﬀective response capacity). The eﬀective response capacity
Γ ∗((cid:15)) is the minimum capacity that the full node needs to provide to enforce that
the response failure rate will never greater than (cid:15), i.e.,

Γ ∗((cid:15)) = min{Γ : P (L > Γ ) ≤ (cid:15)}.

Deﬁnition 4 (Eﬀective response rate). The eﬀective response rate µ∗((cid:15)) is
the minimum response rate requirement for the full node to guarantee that the
response failure rate will never greater than (cid:15), i.e.,

µ∗((cid:15)) = min{µ : P (L > Γ ) ≤ (cid:15)}.

Further, we have the following theorems to present the speciﬁc results of

Γ ∗((cid:15)) and µ∗((cid:15)).

Theorem 1. For (cid:15) ∈ (0, 1] and µ > λ, we can calculate Γ ∗((cid:15)) as:

Γ ∗((cid:15)) = −

ln (cid:15)
ln µ
λ

.

Proof. As we mentioned at the beginning of this section, for l → ∞, we have
P (L > Γ ) ≈ e−lI(x). Then it comes to e−lI(x) ≤ (cid:15) according to Deﬁnition 3.
Besides, based on (4) and Γ = lx, we can prove that the value of Γ ∗((cid:15)) is − ln (cid:15)
.
ln µ
λ

Theorem 2. For (cid:15) ∈ (0, 1] and µ > λ, we can calculate µ∗((cid:15)) as:

µ∗((cid:15)) = λe− ln (cid:15)
Γ .

Proof. Similar to the proof of Theorem 1, due to P (L > Γ ) ≈ e−lI(x) ≤ (cid:15), we
can have lx ln µ

λ ≥ − ln (cid:15), which leads to the result of µ∗((cid:15)).

5 Correlated Equilibrium based Node Synchronization

Mechanism

As mentioned earlier, the synchronization of one certain partial node is collec-
tively completed by the surrounding full nodes, which heavily depends on how
many of them the partial node requests. In fact, each full node has a partic-
ular response capability with respect to the synchronization request, which is
well captured by the response failure tolerance degree introduced in the above
section, and it takes some cost for the partial node to send the synchronization
request to a speciﬁc full node. For a reasonable and intelligent partial node, it
is essential to work out an eﬃcient and eﬀective strategy to select the subset
of full nodes as synchronization request targets. In other words, given diﬀerent
(cid:15)i (i ∈ {1, · · · , m}) of all connected full nodes, how should the partial node make
decisions on whether to send the blockchain synchronization request to each of
them?

8

Q. Hu et al.

To solve this problem, we ﬁrst deﬁne that the decision strategy of the partial
node is p = (p1, · · · , pm) with pi ∈ {0, 1}, where 0 (or 1) denotes not sending (or
sending) the synchronization request to the full node Mi. From the perspective
of the partial node, the ultimate goal of this decision is to guarantee that it can
obtain the up-to-date information of the main chain from at least one full node.
Thus, the proﬁt of deciding whether to send the request to one speciﬁc full node
Mi is jointly aﬀected by the decisions of sending to other full nodes, which can
be deﬁned as

φi(p) =

pi(1 − (cid:15)i)
j=1 pj(1 − (cid:15)i)

(cid:80)m

.

Note that in the case of p = 0, we deﬁne φi(p) = 0.

With Ci denoting the cost of sending the request to Mi, we can deﬁne the

utility of this decision as

Ui(p) = αiφi(p) − piCi,

(5)

where αi > 0 is a scalar parameter.

On one hand, as a utility-driven decision maker, the partial node desires
to obtain an optimal utility for each individual decision about one speciﬁc full
node, which is collectively aﬀected by the decision vector p about all full nodes
and can be described by the following game-theoretic concept named correlated
equilibrium.

Deﬁnition 5 (Correlated equilibrium). Denote the strategy space as V =
{0, 1} with the size of V = 2 and a probability distribution over the space V m as
G(p). Then G(p) is a correlated equilibrium if and only if G(p) makes that for
any decision pi, p(cid:48)

i ∈ V, there exists
(cid:16)

(cid:88)

G(pi, p−i)

Ui(pi, p−i) − Ui(p(cid:48)

i, p−i)

(cid:17)

≥ 0,

p−i∈Vm−1

where p−i = (p1, · · · , pi−1, pi+1, · · · , pn) denotes other decisions except for pi.

The above deﬁnition implies that under the correlated equilibrium G(p),
there is no motivation for the partial node to deviate from the strategy pi about
sending the request to Mi given other strategies p−i. In other words, the par-
tial node can only obtain the maximized utility with respect to the individual
decision via selecting pi according to the decision vector p sampled from the cor-
related equilibrium G(p). It is obvious that there may exist various correlated
equilibria meeting the above-deﬁned constraint.

On the other hand, the partial node cares about the overall utility of all deci-
sions about all surrounding full nodes since it reﬂects the general synchronization
status of this partial node, which can be calculated as (cid:80)
i=1 Ui(p).
Therefore, we can obtain the best correlated equilibrium for the partial node
considering the global optimization goal, which is summarized as the following
Node Synchronization (NS) problem.

p∈Vm G(p) (cid:80)m

Sync or Fork: Node-Level Synchronization Analysis of Blockchain

9

NS Problem:

max :

(cid:88)

p∈Vm

G(p)

m
(cid:88)

i=1

Ui(p)

s.t. : G(p) ≥ 0, ∀p ∈ V m,

(cid:88)

p∈Vm

G(p) = 1,

(cid:88)

(cid:16)

G(pi, p−i)

p−i∈Vm−1

Ui(pi, p−i) − Ui(p(cid:48)

i, p−i)

(cid:17)

(6)

(7)

(8)

(9)

≥ 0, ∀pi, p(cid:48)

i ∈ V.

Obviously, the above NS problem is an optimization problem with respect to
the variable G(p), where the optimization object (6) is to maximize the overall
expected utility for all decisions, constraint (7) is a natural requirement for the
probability distribution, constraint (8) refers to that the sum of all probability
distribution is 1, and the last one (9) is directly obtained from the deﬁnition
of correlated equilibrium to achieve individual utility maximization. Besides, via
scrutinizing the NS problem, one can ﬁnd that it is exactly a linear programming
problem with respect to the probability distribution G(p). In fact, there exist a
lot of eﬃcient algorithms to solve the linear programming problem with polyno-
mial time complexity, such as interior point and simplex-based algorithms.

6 Experimental Evaluation

In this section, we ﬁrst numerically analyze the key factor impacting the re-
sponse failure rate P (L > Γ ) , i.e., the decay speed I(x). Further, the proposed
correlated equilibrium based node synchronization mechanism is validated to
demonstrate its eﬀectiveness. Speciﬁcally, all experiments are carried out using
a laptop running with 2.7 GHz Dual-Core Intel Core i5 processor and 8 GB
memory. And for the sake of statistical conﬁdence, we report average values of
all experimental results via repeating each experiment for 20 times.

6.1 Numerical Analysis of Response Failure Rate

We ﬁrst plot I(x) changing with the response capacity related parameter x and
the response rate µ in Fig. 1. In particular, we use the diﬀerence between µ and
λ, i.e., µ − λ, to capture the impact of µ
λ in (4) on I(x) for easy understanding.
Speciﬁcally, we set x ∈ [0, 1], λ = 3 and µ − λ ∈ [0, 10].

It can be seen that I(x) increases with the larger x and µ − λ, which means
that we can achieve a higher decay speed for the response failure rate via either
improving the response capacity Γ = lx or enhancing the full node’s response
rate µ given a speciﬁc arrival rate λ. Besides, via comparing the ﬁrst and second
lines of subﬁgures in Fig. 1(b), one can tell that the decay speed has diﬀerent
changing trends with respect to x and µ − λ, where the increasing x can lead to
linear change while the increase of µ − λ can only bring logarithmic variation.

10

Q. Hu et al.

(a)

(b)

Fig. 1. Decay speed of the synchronization failure rate.

Thus, we can conclude that raising the response capacity can achieve a lower
response failure rate more eﬃciently.

6.2 Evaluation of Node Synchronization Mechanism

Next, we explore the eﬀectiveness of our proposed node synchronization mecha-
nism in Section 5. In detail, we take the case of m = 8 as an example and focus
on the decision of sending the synchronization request to the full node M1 who
has a varying response failure tolerance degree (cid:15)1 ∈ (0, 1) with an interval of
0.1. Other parameters are set as αi = 10, Ci = 5. The request sending decisions
are reported in Fig. 2 with two representative cases, where the response failure
tolerance degrees of all other full nodes, i.e., M2 to Mm, are the same and ﬁxed
as (cid:15)−1 = 0.2 and 0.8. It is obvious that the request decision vectors in two cases
are very diﬀerent. In the case of (cid:15)−1 = 0.2 in Fig. 2(a), p1 is 1 until (cid:15)1 is larger
than others, which means that sending the request to Mi is a good choice until
its response failure rate is higher than others. And similarly, when (cid:15)−1 = 0.8 as
shown in Fig. 2(b), p1 keeps to be 1 except for (cid:15)1 = 0.9 which is larger than
response failure rates of other full nodes.

Finally, we examine the maximized total utility in the NS problem and eval-
uate its performance under the impacts of the scalar parameter αi and the cost
Ci. Here the number of full nodes is still set to m = 8. The experimental results
are reported in Fig. 3. From Fig. 3(a), one can see that the maximized total
utility keeps the same as zero until αi = 5, which is because we set Ci = 5 in
this experiment and the proﬁt φi ∈ [0, 1]. This means that only when the proﬁt
parameter αi is larger than the cost, can the partial node obtain a positive over-
all utility. While within Fig. 3(b), it is shown that the maximized utility ﬁrst
increases with Ci and then decreases when Ci is too large. This is because with a
lower Ci, the partial node can still obtain a better utility via strategically mak-
ing the request decision; while when the cost is too high, even the best decision
cannot compensate the high resource consumption in request sending process.

010.51011.50.5250000.51012051001200.510120510012Sync or Fork: Node-Level Synchronization Analysis of Blockchain

11

(a) (cid:15)−1 = 0.2.

(b) (cid:15)−1 = 0.8.

Fig. 2. Synchronization request decision of the partial node.

(a) Impact of αi.

(b) Impact of Ci.

Fig. 3. Maximized total utility of the partial node changing with αi and Ci.

7 Conclusion

In this paper, we take advantage of the large deviation theory and game theory
to study the blockchain synchronization in the pull-based propagation from a
microscopic perspective. To be speciﬁc, we investigate the ﬁne-grained impacts
of peering nodes in synchronizing block information at the node level. On one
hand, the full node as the synchronization responder is analyzed based on the
queuing model, which reveals the most eﬃcient path to speed up synchronization
via increasing the response capacity. On the other hand, the partial node is
inspected as the requester, where the best synchronization request scheme is
designed using the concept of correlated equilibrium. Extensive experiments are
conducted to demonstrate the eﬀectiveness of our analysis.

0.10.20.30.40.50.60.70.80.9 1 p1 p2 p3 p4 p5 p6 p7 p8Request decision1111111110000000000000000000000000000000000000000000000000000000000000000.10.20.30.40.50.60.70.80.9 1 p1 p2 p3 p4 p5 p6 p7 p8Request decision1111111110000000000000000000000000000000000000000000000000000000000000000246810012345Maximized total utility0246810012345Maximized total utility12

Q. Hu et al.

References

1. Satoshi Nakamoto. Bitcoin: A peer-to-peer electronic cash system. Technical re-

port, Manubot, 2019.
2. Blockchain market.

https://www.marketsandmarkets.com/Market-Reports/

blockchain-technology-market-90100890.html. Accessed: 2020-05-30.

3. Arthur Gervais, Ghassan O Karame, Karl W¨ust, Vasileios Glykantzis, Hubert Ritz-
dorf, and Srdjan Capkun. On the security and performance of proof of work
blockchains.
In Proceedings of the 2016 ACM SIGSAC conference on computer
and communications security, pages 3–16, 2016.

4. Christian Decker and Roger Wattenhofer. Information propagation in the bitcoin

network. In IEEE P2P 2013 Proceedings, pages 1–10. IEEE, 2013.

5. Yonatan Sompolinsky and Aviv Zohar. Secure high-rate transaction processing in
bitcoin. In International Conference on Financial Cryptography and Data Security,
pages 507–527. Springer, 2015.

6. Johannes G¨obel, Holger Paul Keeler, Anthony E Krzesinski, and Peter G Taylor.
Bitcoin blockchain dynamics: The selﬁsh-mine strategy in the presence of propa-
gation delay. Performance Evaluation, 104:23–41, 2016.

7. Jiawen Kang, Zehui Xiong, Dusit Niyato, Ping Wang, Dongdong Ye, and Dong In
Incentivizing consensus propagation in proof-of-stake based consortium
Kim.
blockchain networks. IEEE Wireless Communications Letters, 8(1):157–160, 2018.
8. Juan Garay, Aggelos Kiayias, and Nikos Leonardos. The bitcoin backbone protocol:
Analysis and applications. In Annual International Conference on the Theory and
Applications of Cryptographic Techniques, pages 281–310. Springer, 2015.

9. Rafael Pass, Lior Seeman, and Abhi Shelat. Analysis of the blockchain protocol
in asynchronous networks. In Annual International Conference on the Theory and
Applications of Cryptographic Techniques, pages 643–673. Springer, 2017.

10. Bicoin relay network. https://github.com/bitcoinfibre/bitcoinfibre. Ac-

cessed: 2020-05-30.

11. Uri Klarman, Soumya Basu, Aleksandar Kuzmanovic, and Emin G¨un Sirer.
bloxroute: A scalable trustless blockchain distribution network whitepaper. IEEE
Internet Things J., 2018.

12. John P Conley. The geeq project white paper. 2018.
13. Karl W¨ust and Arthur Gervais. Ethereum eclipse attacks. Technical report, ETH

Zurich, 2016.

14. Jin Cao, W Cleveland, Dong Lin, and D Sun. Internet traﬃc tends to poisson and
independent as the load increases. Technical report, Technical report, Bell Labs,
2001.

15. Ayalvadi J Ganesh, Neil O’Connell, and Damon J Wischik. Big queues. Springer,

2004.

16. Shengling Wang, Chenyu Wang, and Qin Hu. Corking by forking: Vulnerability
analysis of blockchain. In IEEE INFOCOM 2019-IEEE Conference on Computer
Communications, pages 829–837. IEEE, 2019.

