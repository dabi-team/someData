2
2
0
2

g
u
A
3
2

]

R
C
.
s
c
[

1
v
2
0
2
1
1
.
8
0
2
2
:
v
i
X
r
a

Blockchain Simulators: A Systematic Mapping
Study

Adel Albshri∗†,Ali Alzubaidi‡§, Bakri Awaji,¶k and Ellis Solaiman∗∗
∗Newcastle University, School of Computing, UK, Email: a.albshri2@ncl.ac.uk
†University of Jeddah, Saudi Arabia, Email: amalbeshri@uj.edu.sa
‡Umm Al-Qura University, Saudi Arabia, Email: aakzubaidi@uqu.edu.sa
§Newcastle University, School of Computing, UK, Email: aakzubaidi@IEEE.org
¶Newcastle University, School of Computing, UK, Email: b.h.m.awaji2@ncl.ac.uk
kNajran University, Saudi Arabia, Email: balawaji@nu.edu.sa
∗∗Newcastle University, School of Computing, UK, Email: ellis.solaiman@newcastle.ac.uk

technologies

Abstract—Recently, distributed ledger

like
blockchain have been proliferating and have attracted interest
from the academic community, government, and industry. A
wide range of blockchain solutions has been introduced, such
as Bitcoin, Ethereum, and Hyperledger technologies in the
literature. However,
tools for evaluating these solutions and
their applications are still lacking, limiting the exploration of
their potentiality and associated challenges/limitations. That is,
experimenting with real blockchain networks usually requires a
solid budget; and thus, sophisticated blockchain simulators can
facilitate designing and evaluating solutions before the actual
implementation stage. The quality of such simulators depends on
several factors such as usability, reliability, provided capabilities,
and supported features. This paper aims to provide a systemic
mapping review of blockchain simulators focusing on these
quality factors. This paper also sheds light on the conﬁguration
parameters (inputs) and produced metrics (outputs) supported by
each simulator. Furthermore, it investigates which metrics sup-
ported by each simulator are scientiﬁcally validated/evaluated.
Moreover, code quality comparison is carried out to assess the
source code of the covered simulators. The results reveal that no
simulator fully covers the wide operational range of features and
capabilities of existing blockchain technologies. However, several
promising efforts exist in the domain of blockchain simulation
with interesting and useful features. Finally, we discuss the
subject of blockchain simulation and provide our insight into
the matter.

Index Terms—Blockchain, Distributed Ledger Technology,

Simulation, Performance, Systematic Review

I. INTRODUCTION

Traditionally, transactions and exchanges between parties
have typically been carried out within a centralised structure,
which requires the contribution of a third party (e.g. a bank).
The hurdle is that this manner of transaction relies mainly on
the third party in that if the party encounters a failure, the
system completely stops. This problem is commonly known
as a single point of failure (SPOF) [1]. What is more, high fees
are often associated with third parties. Blockchain has arisen
to handle these issues (both SPOF and high fees) by permitting
nodes (parties) to associate with one another in a decentralized
(aka distributed) way without
the contribution of a third
party. This is why this technology has gained researchers’
attention and enthusiasm in recent years. Formally, blockchain

uses a distributed/shared database that logs all the executed
transactions within a network [2]. In other words, through the
use of a distributed ledger, blockchain makes all transactions
available and veriﬁable by all nodes. Interestingly, the involved
nodes are transparent to the chain state update. In particular,
thanks to the decentralized nature, nodes can transparently
view all transactions occurring at a given time. Each node
has its own copy of the chain that is updated following every
newly conﬁrmed block.

In the beginning, blockchain was designed for handling
the exchange of a digital currency – referred to as Bitcoin
[3] – in a peer-to-peer network. Following the success of
Bitcoin technology, a number of other blockchain solutions
emerged, such as Ethereum in July 2015, and Hyperledger
in December 2015. Since then, these solutions have been
applied to various application domains, such as the Internet
of Things (IoT) [4]. Speciﬁcally, Bitcoin networks offered
money-related exchanges through the utilisation of the epony-
mous tokens: bitcoins. The tokens subsequently developed an
immense ﬁnancial worth [5]. Other blockchains like Ethereum
[6] permitted code to be executed within blockchain sys-
tem, granting ﬂexibility to the transactions and exchanges,
commonly known as smart contracts [7]. By and large, the
reason behind the success of blockchain technology is its
wide range of merits. Firstly, blockchain creates immutable
ledgers, which by nature are unable to be changed or altered.
Once a transaction is created and registered, it cannot be
altered [8]. Secondly, a vital characteristic of blockchain is
its reliance on decentralized control, in which the resources
of all nodes involved are used. This overcomes the issue of
SPOF [7]. Thirdly, blockchain protects the identity of users
in an efﬁcient manner. Fourthly, there is stronger security
in blockchain technology due to the mitigation of the SPOF
issue [9]. Finally, blockchain enables participating nodes to
collaboratively process transactions in a timely manner [10].
From a practical perspective, when it comes to applying
a system – and blockchain is no exception – faults in real
world application may result in major losses; for example, in
cost, safety, resources, and environmental issues [11]. In order
to limit possible faults and unexpected failures, and in order

 
 
 
 
 
 
to identify bottlenecks, simulations are commonly employed,
using various design setups prior to the implementation of
the actual design, or when making amendments to existing
systems. Similar to emulation, simulation is of high value
when tackling complicated tasks in a complicated environment
[12].

In light of the need for a comprehensive analysis of current
blockchain simulators, this paper intends to examine existing
blockchain simulators, highlight their features, and identify
possible challenges. To accomplish this task, a systematic
mapping study was chosen as the methodology, in line with
the systematic mapping process shown in [13]. Following this,
related papers are scanned from scientiﬁc databases, and a map
of existing blockchain-related systems has been subsequently
developed. This map provides structured data and an in-depth
insight in the domain of blockchain simulators.

The remainder of this paper is organised as follows: Sec-
tion II gives a background on blockchain technology, and
highlights the need for blockchain simulation. Section III
reviews the literature with regard to similar systematic studies.
The research methodology is given in Section IV. Section
V outlines the results of the systemic mapping. Section VI
provides a detailed discussion about the current simulators and
their limits. Finally, Section VII concludes the paper.

II. PRELIMINARIES

A. Overview of Blockchain Technology

Blockchain is a peer to peer (P2P) distributed network,
which securely and immutably records all transactions pro-
cessed by participating nodes in the network [14]. Blockchain
diminishes the need for a trusted third party, as nodes share
data directly (usually in the form of transactions) [15]. Trans-
actions are organised and ordered into blocks that are identiﬁed
using cryptographic hashes where, each block points to the
previous block; hence the name ”blockchain”.

Once a block is considered valid across blockchain network,
it can never be altered or modiﬁed (immutable), and thus the
contained transactions cannot be reverted. This acts as a ﬁre-
wall against the double-spending problem through achieving
transaction integrity [16].

Generally, blockchain networks today are classiﬁed into

three categories: public, private, and hybrid [17].

• Public blockchain networks (aka permissionless) such as
Bitcoin [3] and Ethereum [18] provide a platform for any
participant to join the network, mine blocks, and execute
transactions.

• Private blockchain networks (aka permissioned) such as
Hyperledger Fabric [19], provide a platform for partici-
pants to join after gaining permission from the network
administrator. It restricts the networks in a centralised
manner, which goes against blockchain’s characteristic of
full decentralisation.

• Hybrid blockchain networks generally combine both pri-
vate and public blockchain at the same time, under which
a collection of predetermined nodes are responsible for

approving blocks. Some scenarios where this architecture
applies is when transactions are not made public by
default; however, they are veriﬁable when needed.

B. The Need for Modelling and Simulation

Modelling and simulation are useful for analysing and
predicting the performance of complex systems. Simulators
capture key properties of such systems, mimic their behaviour,
and allow for experimenting them without being actually
implemented [20]. Blockchain systems are typically complex
[21] and composed of ﬁve layers [22] [23]: network layer,
consensus layer, data layer, execution layer, and application
layer. Therefore, it can be a challenging task to experiment
with real-world blockchain systems and evaluate their perfor-
mance. Hence, blockchain simulation is often a suitable alter-
native for two main reasons. First, it alleviates the burden of
computing resources and ﬁnancial costs needed for deploying
and experimenting with blockchain systems. Second, it enables
evaluating the blockchain performance for different scenarios
under various parameter conﬁgurations.

III. RELATED WORKS

Anilkumar et al. [24] cover the popular and noteworthy
blockchain-based platforms and their characteristics, such as
Ethereum, IBM OBC, Intel Sawtooth Lake, BlockStream
Sidechain Elements and Eris. A number of simulation plat-
forms for Ethereum are also listed. Despite being an informa-
tive review, several aspects are missing including the recent
simulators, evaluation metrics and the set of conﬁgured inputs.
More recently, Wan et al. [25] present a review article that
sheds light on the main blockchain’s design principles and
frontier operations. They also provide a detailed comparison
between the different types of blockchain networks (public,
private), as well as a brief description of proof of work (PoW)
and Proof of Stake (PoS) on the consensus layer. While they
extend their review coverage to include different simulation
models (discrete event, stochastic, etc.), a comprehensive
discussion on blockchain simulation is lacking.

To cover such a gap, Smetanin et al. [26] review the state-
of-the-art evaluation approaches for blockchain systems with
a focus on mathematical and stochastic models. Then, they
discuss a set of simulators, and classify them with regard to
the employed modelling approach. They also observe the lack
of adoption and the lack of standardization amongst existing
simulators. Although they provide coverage on common eval-
uation parameters and metrics of blockchain in general, they
are not concerned with whether existing blockchain simulators
support them. Moreover, their work does not account for
blockchain simulators that already exist in the literature such
as BlockSim, [27], eVIBES [28], and Shadow-Bitcoin [29],
or those that have recently emerged such as SIMBA [30],
BlockPerf [31], and BlockEval [32]. The authors of [33] follow
similar research conduct; however, they generalise their review
to include other Distributed Ledger Technologies (DLT) such
as Block-based Directed Acyclic Graphs (BlockDAG) and
Transaction-based Directed Acyclic Graphs (TDAG).

Paulavicius et al. [34] survey several blockchain simula-
tors regardless of whether they are based on an academic
research effort or published as open-source projects. They
classify them based on their modelling approach, supported
language/framework, an associated blockchain platform, cov-
ered layers, and availability of source code. However, they
only compare a selection of them in terms of supported con-
ﬁguration parameters (inputs) and produced metrics (outputs).
To the best of our knowledge, there is no extensive survey

given so far that accounts for the following:

• A systematic mapping review that accounts for all the
to-date existing blockchain simulators that are backed by
a published academic research effort.

• A coverage of which metrics

supported by ex-
isting blockchain simulators are scientiﬁcally vali-
dated/evaluated.

IV. RESEARCH METHODOLOGY

This paper conducts a systematic mapping study [13] with
the aim to investigate studies pertaining to blockchain simula-
tors.The reason for adopting a systematic mapping method in
this paper is to go beyond the shallow description of existing
blockchain simulators. That is, a systematic mapping review
does not only help narrow down the subject exploration to
speciﬁc questions but also provides analytical methods that
critically examine the literature of blockchain simulators. The
ﬁndings of this study will also enable us to identify and map
important research directions. Figure 1 shows the ﬁve steps of
systematic mapping used in this study.

Process Steps

Deﬁnition of
Research Question

Conduct Search

Screening of Papers

Keywording using
Abstracts

Data Extraction
and Mapping Process

Review Scope

All Papers

Relevant Papers

Classiﬁcation
Scheme

Systematic Map

Outcomes

Fig. 1. Steps of the systematic mapping study.

A. Research Questions

This paper aims to answer the following questions:
RQ1. How is blockchain being simulated today in the

literature?

RQ2. Which metrics supported by existing blockchain

simulators are scientiﬁcally validated/evaluated?

RQ3. What are the limitations of the current simulators?

B. Performing the Literature Search

In this stage, the recent scientiﬁc papers and articles relevant
to the research topic (blockchain simulators) are identiﬁed. For
this purpose, the term “blockchain simulator” is used as the
keyword to search scientiﬁc databases. To specify the search,
the query execution ensures the existence of both “blockchain”
and “simulator” in the title or abstract. Furthermore, four
highly reputable scientiﬁc databases were chosen: ACM Dig-
ital Library, IEEE Explore, Springer, and Scopus. For precise,
accurate, and up-to-date results, high-quality articles published

in books, journals, conferences, symposiums, and workshops
were selected.

C. Searching for Relevant Studies

In this stage, studies related to our research questions were
searched. We utilised the same searching strategy as in [35].
Speciﬁcally, we eliminated all the papers that were irrelevant
to the topic based on their titles. If we were uncertain about
a paper, we skimmed its abstract. Generally, we utilised an
exclusion criteria to ﬁlter out the search results, by which non-
English papers, grey literature or newsletters, and papers with
no full-text were eliminated from the search.

D. Searching Abstracts for Keywords

In this stage, keywords were used to classify the relevant pa-
pers. We utilised the same keyword process as in [34]. Firstly,
we read the abstract of each paper to spot the most signiﬁcant
keywords and their primary contributions. Secondly, we used
these extracted keywords to classify the paper. Once all papers
were classiﬁed, the papers were investigated and, if needed,
switches between classiﬁcation were made.

E. Data Extraction and Mapping Processes

In this stage, the required information was gathered from
the papers according to their relevance to the above-stated
research questions. Thus, we gathered different items of data
from each study, which, in turn, highlighted the objectives and
contributions of the studies.

V. STUDY RESULTS

This section is designed mainly to outline the results of the
systematic mapping study carried out on blockchain simula-
tors. The results of searching and screening for relevant papers
are discussed. Afterwards, the resulting classiﬁcation is given.

A. Searching and Screening Results

As discussed above in Section IV, searching and screen-
ing are two steps in the systematic mapping study. In the
searching phase, we searched for all papers using the key-
word ‘blockchain simulator’ in different scientiﬁc databases
as stated above. The search returned 259 papers in total (as
of 7 January 2022). In the screening phase, upon investigating
the title and abstract of the papers, we excluded 209 irrel-
evant papers. These excluded papers are those whose main
contribution is not focused on simulating the blockchain. The
reason behind the high number of eliminated papers is twofold.
Firstly, many papers were irrelevant to our study, since our
focus was to explore blockchain simulators from a technical
perspective. Secondly, some of the excluded papers were about
general aspects of blockchains, with no contributions related
to our pre-deﬁned research questions. After that, duplicate
papers, speciﬁcally 23, were removed, resulting in 27 ﬁnal
papers. Finally, we excluded 7 papers that were relevant to
speciﬁc applications; i.e. they provided no useful information
on simulation for general blockchains. As a consequence, we
ended this phase with 20 papers on which to carry out our
systematic mapping study.

B. Taxonomy for Blockchain Simulators

Following the keywording strategy discussed in Section IV,
we characterised the simulators according to several criteria:
1) Overview of blockchain simulators: This represents
further information related to the identiﬁed blockchain
simulators in Table I.

2) Comparative analysis: This critically compares existing
simulators based on their available open-source imple-
mentation. The comparison is focused on their supported
conﬁguration parameters (inputs) and generated metrics
(outputs) as per Table III.

3) Code Quality: This provides a general report about the
source code including number of bugs, code smell, and
security hotspot as shown in Table IV.

4) Scientiﬁcally Validated/Evaluated Metrics: This is to
represent which supported metrics by each simulator are
scientiﬁcally validated/evaluated in their corresponding
papers, as per shown in Table V.

C. Overview of Blockchain Simulators

The systematic review resulted in 20 relevant blockchain
simulators. Table I lists and examines them based on the
following criteria:

1) Code availability: reﬂects if the source code of the

simulator is publicly available on GitHub.

2) Programming language and library: reﬂects the program-
ming language and the libraries used for coding the
simulator.

3) Core of the simulator: reﬂects if the simulator inherits a

base simulator or is built from scratch.

4) Purpose and objective: reﬂects if the simulator is de-

signed for assessing performance and/or security.

5) Blockchain platform: reﬂects the type/platform of the
simulated blockchain; i.e. Bitcoin, Ethereum, and IOTA.
6) Consensus algorithm: reﬂects the implemented consen-

sus algorithm in the simulator.

This section provides a summary of each blockchain simu-
lator as follows. An early attempt in 2015 was carried out by
Miller and Jansen [29] who proposed a discrete event Shadow-
Bitcoin simulator. Its main focus was to simulate Bitcoin
networks. This simulator utilises the concept of shadowing
which permits using a parallel processing concept. Accord-
ingly, the simulator has the ability to provide insights about
the simulated multi-threading application in a scalable manner.
Shadow-Bitcoin simulator is recognised as a dynamic and
stochastic simulator developed using pure Python. The code
is publicly available at GitHub. PoW consensus algorithm is
implemented in this simulator. The simulator is able to focus
on transaction propagation and providing insights about the
system’s performance and security.

Wang and Kin [36] propose a blockchain simulator named
FastChain, which extends Shadow-Bitcoin to support evalu-
ating the correlation between throughput, block propagation
time, and bandwidth-informed neighbor selection algorithms.
FastChain facilitates the tuning of several parameters that

inﬂuence the blockchain’s performance with regard to block
rate and throughput.

A similar attempt

is carried out by Stoykov et al.
[37], who proposed a discrete-event and dynamic simulator
named VIBES, which stands for Visualisations of Interactive,
Blockchain, Extended Simulations. It is coded in Scala with
the aim of enabling empirical insights and analytics about
the blockchain performance under various parameters, such as
network topology and area size, are simulated, with the aims
of predicting the total processing time, the total number of
transactions processed, throughput (transactions per second),
block propagation delay. While VIBES focuses on simulating
Bitcoin-style blockchain networks, Ethereum is out of its
scope. Following this, Deshpande et al. [28] proposed ethernet
VIBES (eVIBES), a further improvement of VIBES, to mimic
the behaviour of the Ethereum network. It depends on a
reactive manifesto model using an orchestrator and reducer
in its core. The orchestrator is used to control the simulator
in which it receives the parameter settings from the user and
is fed to Ethereum network.

Another discrete-event, dynamic and stochastic simulator
for simulating generic blockchain is proposed by Piriou and
Dumas [38]. The authors ﬁnd that the previous simulators
depend on applying consensus algorithms in a sequential
manner which may result in a double-spending attack. Ac-
cordingly, they mainly contribute a generic blockchain-style
simulator with a focus on distributed consensus protocols;
namely, PoW and PoS. The source code is written in Python
and utilises PyCATSHOO library, which allows dealing with
a large number of parameters of interest. The simulator sheds
light on the impact of various parameters on the overall
performance. This is done through the integration with the
Monte Carlo simulation, which is known for its ability to check
the dynamic behavior.

Wang et al. [39] also proposed a discrete-event and stochas-
tic simulator that has the ability to simulate the complex and
dynamic behaviour of Bitcoin blockchain network. The main
aim of this simulator is to evaluate the blockchain performance
by setting various parameters such as simulation time, number
of nodes, mining time, block size and transaction size.

Aside from traditional simulations, Memon et al. [40]
proposed a queuing blockchain simulator using the M/M/n/L
queuing system. This simulator is coded in Java and was
designed with the aim of simulating PoW-based mining op-
erations, which are known to be costly and time-consuming
tasks.

BlockSim is one of the well-established simulators, which is
initially proposed by Alharby and Moorsel [27]; and has been
further developed in [41]. The source code, written in pure
Python, is publicly available on GitHub. This simulator aims
to mimic the implementations of public blockchains (Bitcoin
and Etherum) using PoW. Like other discrete-event simulators,
it enables testing the inﬂuence of various conﬁgurations on
the overall blockchain’s performance. This is done via two
different modes of simulation which are full transactions and
light transactions techniques. The former emulates a realistic

blockchain network and records detailed logs of a typical
transaction journey. According to the simulator’s authors, this
technique is time and resources intensive; however, provides
an in-depth insight into the network latency measurement. On
the other hand, the latter simulates the blockchain network’s
behaviour by employing a single transaction pool, and omits
several transaction details, which is, according to its authors,
more effective in terms of time and computing consumption;
however, it can be useful for other purposes other than latency
measurement such as transactions throughput and execution
cost.

Further, Polge et al. [31] appraise BlockSim [27] simulator’s
performance with Bitcoin. However, as per their study, most
of the existing simulators lack several important features such
as extensibility and failure in covering all aspects/metrics.
Therefore, an extended version referred to as BlockPerf is
proposed to alleviate BlockSim issues. It is also written in
Python with the aim to realise a stochastic, dynamic and
discrete event simulator depending on PoW consensus pro-
tocol. Similarly, Agrawal et al. [42] state that BlockSim [27]
is restricted to simulating blockchain networks (either Bitcoin
or Ethereum) over a single CPU which results in bottleneck
problems. Therefore, BlockSim-Net, another extended version
of BlockSim, is proposed as a distributed simulator. What
distinguishes BlockSim-net from the traditional BlockSim is
the ability to focus on the actual propagation of blocks.
Furthermore, it is useful for the assessment of blockchain
application security (such as a selﬁsh mining attack on PoW).
Another discrete-event blockchain simulator is proposed by
Faria and Correia [43]; also named as BlockSim. Not to be
confused with other BlockSim simulator in [27], it is also
coded in Python and leverages the SimPy 3 library. Unlike the
other BlockSim, it simulates blockchain networks over speciﬁc
intervals. Thus making it a discrete-event, stochastic and a
dynamic simulator.

Fattahi et al. [30] have stated that BlockSim, proposed by
Faria and Correia [43], is a reliable simulator able to evaluate
blockchains. However, it does not simulate some real features,
such as Merkle tree transactions. Therefore, they proposed an
extended version of BlockSim, referred to as SIMulator, for
application to blockchains (SIMBA). Similar to its forerunner,
it
is written in Python and uses SimPy 3 features. Also
similar to BlockSim [43], it is a stochastic and discrete-event
simulator.

Pandey et al. [44] also proposed another blockchain simula-
tor named as BlockSIM, with ”sim” capitalised. BlockSIM. It
is a stochastic discrete-event and dynamic simulator written
in Python using SimPy library. It facilitates evaluating the
performance of Ethereum and Hyperledger blockchain net-
works and supports both of the PoW and PoA protocols. More
recently, in 2020 Alsahan et al. [45] extended this work and
proposed a local Bitcoin simulator that has the ability to enable
fast simulation for large scale networks without affecting the
mining process quality. It is a virtualization based simulator
with the ability to model different network topologies.

Wang et al. [46] proposed a ChainSim simulator that

evaluates peer to peer blockchain networks. The simulator’s
main aim is to alleviate the burden of computing resources
and the ﬁnancial cost needed for deploying and experimenting
with blockchain systems. Such a simulator has the ability
to simulate blockchain-based applications with thousands of
involved nodes.

Another direction is to simulate concurrent operations
within blockchain networks. To do so, Gouda et al. [32]
propose the Blockeval simulator, which uses deep learning
algorithms to allow simulating scalable blockchain systems.
This makes Blockeval’s a modular simulator for assessing
the performance of private blockchain networks. Moreover,
it can elaborate on the metrics used for assessing the system.
Blockeval’s main contribution is twofold. Firstly, it can be
used to assess the scalability of the proposed blockchain
system. Secondly, it can analyse the security of the proposed
blockchain system.

Another attempt that was modelled with both PoW and PoS
protocols was carried out by Aoki et al. [47]. The simulator,
the SimBlock was written in Java. It can be differentiated from
its peers by its ability to investigate blockchain performance
with different behaviours of nodes. SimBlock is considered
as a stochastic, dynamic, and discrete-event simulator that
focuses on modelling block generation and message transmis-
sions.

This work has been further extended by Basile et al. [48].
They state that SimBlock omits simulating the block mining
process; thus, they address this limitation in their work. Banno
and Shudo [49] also extended SimBlock to support to simulate
thousands of nodes and to improve the neighbor selection
strategy. Moreover, it enables assessing the inﬂuence of relay
networks on the overall performance.

Beyond typical blockchain data structure, Zander et al. [50]
proposed the DAGsim simulator that uses a Directed Acyclic
Graph (DAG) approach to represent a scalable distributed
ledger, which allows simulating a vast amount of transactions
over a large number of nodes. This simulator is inﬂuenced
by the philosophy of a DLT network called IoTA [51]. An
interesting feature provided by DAGsim is the support of
modelling and experimenting with malicious nodes. The code
is written in Python with the ability to run in O(n2), where
n is the number of nodes. This made DAGsim an agent
based stochastic and dynamic simulator. The ﬁnal output
of the simulator is a DAG representing the structure of all
transactions.

By and large,

there are 4 simulation models found in
the literature of blockchain simulators, namely, stochastic,
dynamic, discrete event, virtualization models. Bear in mind
that all the simulators are discrete-event except the queuing
model simulation in [40], the agent-based simulation in [50],
and the virtualization based modelling in [45]. We also ﬁnd
that existing blockchain simulators do not support consensus
mechanisms other than PoW, PoA and PoS; among them,
PoW is the only protocol implemented in all simulators. As
regarding PoS and PoA,
there is only one simulator that
implements each of them. Another interesting observation is

that Bitcoin is the most popular blockchain network, being
implemented in 15 out of the 21 covered simulators.

D. Comparative Analysis

After searching the internet for blockchain simulators and
noting their main design principles, we focused on the oper-
ational range of each simulator. Speciﬁcally, we study the set
of supported conﬁguration parameters (inputs) and provided
metrics (outputs) by each simulator. A brief description of
each is given below.

To this end, no existing blockchain simulator can support all
conﬁgurations parameters (P) and produced metrics (M). Table
II highlights these parameters/metrics and their association to
each of the blockchain layers. By inspecting Table III, we
can notice that out of the 16 parameters, the least number of
implemented parameters is 5, which is the case with Local
Bitcoin [45]. In other words, at least 40% of the parameters
are implemented. On the other hand, at most about 81%
of the parameters are implemented, which is the case with
both BlockSim [43] and BlockPerf [31]; i.e. 13 parameters.
Similarly, not all the metrics are supported by all simulators.
The least number of supported metrics is 4, which represents
25% of the metrics as is with BlockSIM [44]. By contrast, at
most 88% of the parameters are implemented, which is the
case with BlockPerf [31]; i.e. 13 parameters. Accordingly, we
can notice that BlockPerf [31] is the richest simulator with
both parameters and metrics.

E. Code Quality

To solidify the view about the simulators, we assess their
source code from different aspects, which will help researchers
determine the future trends and modiﬁcations needed for each
simulator. Below is a detailed description about the aspects
used.

• Lines of Code: is the number of code lines.
• Comments(%): is the percentage of commented lines.
• Duplication(%): is the percentage of duplicated lines.
• Files: is the number of code ﬁles.
• Bugs: is the number of bugs.
• Code Smells: is the complexity degree of understanding

the code.

• Security Hotspots: is the number of source code parts that

need major overhaul from the security aspect.

We have used the Sonarqube [53] and the Count Lines of
Code (CLOC) [54] tool to assess the codes of the simulators.
An interesting point about such a tool is its ability to shed
light on the previous aspects mentioned above. A detailed
description about this comparison is shown in Table IV. With
quick skimming for the Table, we can notice that eVIBES [28]
has the largest number of lines while being Bug free. On the
other hand, local Bitcoin [45] has the least number of lines
while also being Bug free. Another interesting point is that
6 simulators out of 11 are Bug free. Despite being the most
reputable, BlockSim [27] has the largest number of bugs with
about 6% code duplication.

F. Scientiﬁcally Validated/Evaluated Metrics

For the picture to be complete, we also shed light on the
Scientiﬁcally validated/evaluated metrics in the corresponding
paper of each simulator. A summary of this is shown in
Table V. According to the reviewed simulators, there are 15
validation/evaluation metrics; a brief description of each is
given below.

• Block propagation time: which is the time taken from

sending to receiving a block.

• Transaction propagation time: which is the time taken

from sending to receiving a transaction.

• Actual block size: which is the average block size gen-

erated during the simulation period.

• Transaction throughput: which is the rate at which a set
of valid committed transactions in a deﬁned time period.
• Network delay: which is the total delay in the network.
• Number of generated block: which is the total number of

the generated blocks during a simulation period.

• Number of valid block: which is the total number of valid

blocks created during the simulation.

• Block veriﬁcation time: which is the average time taken to
verify the generated blocks during the simulation period.
• Uncle or stale blocks: which is the number of generated

uncle/stale blocks during a simulation period.

• Fork resolution: which reﬂects whether a fork has ever

occurred or not during the simulation.

• Pending transaction: which is the simulator’s ability to
keep track of the transaction number while awaiting
conﬁrmation.

• Mining difﬁculty: which is the amount of difﬁculty as-

signed for each transaction.

• Mining reward: which is the amount of the used rewards
for the mining processes occurred throughout the simu-
lation.

• Processing speed: which is the average time taken by the
simulator to carry out a speciﬁc task during the simulation
period.

• System stability: Which is concerned with eventual con-
sistency over time among participating nodes in the
blockchain network in terms of the ledger replicas.

Having mentioned the previous metrics, we also focused on
the distribution of these metrics over the blockchain layers.
Table V shows the set of metrics associated to each layer.
Moreover, from the Table we can see for each simulator which
metrics are implemented. On closer inspection, we notice that
the majority of the metrics (7 out of 15) are focusing on the
consensus layer. On the other hand, the incentive layer has
the least share of the metrics (only 1 metric). Also, there
are 9 simulators focusing on validating and evaluating the
network layer. On the consensus layer, we can notice that only
7 simulators validate such a layer. With the least attention, the
incentive layer is validated in one simulator only. From another
viewpoint, with 6 validation/evaluation metrics, VIBES [37]
comes out at the top whereas shadow-Bitcoin [29] has the
least number of validation/evaluation metrics (1 metric).

TABLE I
A SUMMARY OF BLOCKCHAIN SIMULATORS. EACH ROW REPRESENTS A SEPARATE SIMULATOR, WHILE THE COLUMNS REPRESENT THE FEATURES.
NOTE THAT ALL THE SIMULATORS ARE STOCHASTIC DYNAMIC SIMULATORS AND CHARACTERIZED AS BEING DISCRETE-EVENT EXCEPT THE THREE
SIMULATORS; NAMELY: MODELLING BY QUEUING THEORY SIMULATION [40] THAT IS QUEUING MODEL, DAGSIM [50] THAT IS AGENT-BASED AND
LOCAL BITCOIN [45] THAT IS VIRTUALIZATION BASED.

Simulator
Shadow-Bitcoin [29]
VIBES [37]
Stochastic Blockchain
models [38]
Behavior and Quality
of Blockchain [39]
eVIBES [28]
Modeling by Queuing
Theory [40]
BlockSIM [44]

DAGsim [50]
BlockSim [27]

FastChain [36]
simBlock [47]

Blocksim [43]

Ext- simblock [49]
BlockSim-Net [42]

ChainSim [46]

Local Bitcoin
Network [45]
SIMBA [30]
Ext 2 - simBlock [48]
BlockPerf [31]
BlockEval [32]

Year
2015
2017
2018

2018

2018
2018

2019

2019
2019

2019
2019

2019

2019
2020

2020

2020

2020
2021
2021
2021

GitHub code
✓
✓
N/A

Prog. lang.
Python
Scala
Python

Library
N/A
N/A
PyCATSHOO

Core
Shadow
N/A
N/A

PRF.
✓
✓
✓

Security
✓
✓
✓

N/A

✓
N/A

✓

N/A
✓

N/A
✓

✓

N/A
N/A

N/A

✓

✓
N/A
✓
✓

Python

Scala
Java

Python

Python
Python

N/A
Java

Python

Java
Python

Python

Python

Python
Java
Python
Python

SimPy

N/A
N/A

SimPy 3.0

N/A
N/A

N/A
N/A

SimPy 3.0

N/A
N/A

N/A

N/A

SimPy 3.0
N/A
N/A
SimPy

N/A

[37]
[52]

N/A

N/A
N/A

[29]
N/A

N/A

[47]
[27]

[27]

N/A

[43]
[47]
[27]
N/A

✓

✓
✓

✓
✓

✓
✓

✓

✓
✓

✓

✓

✓
✓
✓
✓

✗

✗
✗

✗

✗
✗

✗
✗

✗

✗
✗

✗

✗

✗
✗
✗
✗

Platform
Bitcoin
Bitcoin
Generic

Bitcoin

Ethereum
Bitcoin

Ethereum/
Hyperledger
IOTA
Bitcoin/
Ethereum
Bitcoin
Bitcoin

Bitcoin/
Ethereum
Bitcoin
Bitcoin/
Ethereum
Bitcoin
Ethereum
Bitcoin

Bitcoin
Bitcoin
Bitcoin
Bitcoin

Consensus
PoW
PoW
PoW
/PoS
PoW

PoW
PoW

PoW
/PoA
IOTA
PoW

Pow
PoW
/PoS
PoW

PoW
PoW

PoW

PoW

PoW
PoW
PoW
PoW

VI. DISCUSSION

According to the results obtained in Section V, this section
is dedicated mainly to outlining proposed solutions to the
predeﬁned research questions stated in Section IV.

RQ1. How is blockchain being simulated today in the

literature?

The systematic mapping study reveals that there are 11 out
of the 20 blockchain simulation studies that publicly provide
their source code. The majority of existing simulators are
stochastic, which is immensely complex, and require an in-
depth statistical capabilities for ensuring realistic outcomes.
Several existing blockchain simulators are dynamic; a feature
that aligns well with the blockchain nature. For instance,
dynamic simulators enable investigating the behaviour of
blockchain networks given the variable number of involved
miners (nodes) over time.

As regarding the conﬁguration parameters, we notice that
existing blockchain simulators vary in their interest of which
conﬁguration parameters (refer to Table III). Both BlockSim
[43] and BlockPerf [31] are the richest simulators with 13
conﬁguration parameters supported by each. On the other
hand, Local Bitcoin [45] is the least in terms of supported
parameters, which enables controlling 5 parameters at most.
Interestingly, both P1 and P11 are supported by all simulators
which, in turn, reﬂect their importance. Conversely, P12 is
the least supported conﬁguration parameter. By inspecting
the generated metrics by each simulator, we ﬁnd that M8 is
supported by all simulators except Shadow-Bitcoin [29] which,
in turn, implies its signiﬁcance. On the other hand, M14 is

the least supported metric by only two simulators which are
eVIBES [28] and BlockPerf [31].

RQ2. Which metrics supported by existing blockchain

simulators are scientiﬁcally validated/evaluated?

To better understand the system’s behaviour, there is a need
for a set of validation/evaluation metrics to assess the overall
system’s performance. Generally, blockchain systems can be
judged from different viewpoints as follows.

1) Usability and reliability: Is the system ready for being
implemented in a real world situation? This is related
to assessing the deployed network. The network can
be assessed using two metrics: volume of P2P trafﬁc
and packet loss. The former represents the network’s
ability to perform under an elevated trafﬁc while the
latter represents the ratio of the lost packets. In view of
this metric, the system is usable if it is able to exchange
a large amount of trafﬁc with the least number of lost
packets.

2) Functional testing: Is the system able to provide promis-
ing results? This is related to assessing blockchain
itself. Blockchain can be assessed using three metrics;
transaction throughput, latency, and ﬁnality time. The
transaction throughput represents the amount of suc-
cessfully committed transactions per second. Blockchain
is successful if it is able to provide high transaction
throughput especially in the case of permissionless
blockchain. The latency represents the time taken for
the effect of the transaction to be reﬂected; it should be
minimal. Finally, the ﬁnality time represents the amount

TABLE II
THE DEFINITION OF THE PARAMETERS AND METRICS USED WITH RESPECT TO BLOCKCHAIN LAYERS.

Layer

P/M

Deﬁnition

P/M

Deﬁnition

Network Layer

Data layer

Consensus layer

Incentive layer

Execution layer

Application layer

(P1) Total number of nodes

number of involved nodes

(P1.1) Regions of nodes (unit:
geographical)
(P2) Total number of connec-
tions
(P3) Average block propagation
delay (unit: seconds)

(P4) Average transaction propa-
gation delay (unit: seconds)

(P5) Average bandwidth (unit:
bits per second)
(P6) Average latency (unit: sec-
onds)
(P9) Generate random transac-
tions (unit: Integer of Tx per
second)
(M5) Chain of block
(P10) Average mining power
(Hash Rate)
(P11) PoW consensus Algo-
rithm
(P12) Other consensus Algo-
rithm
(P13) Average transaction fee
(unit: cryptocurrency)
(P14) Block Interval (unit: sec-
onds)
(P15) Reward for mining a new
block (unit: cryptocurrency)
(M13) Time of executing a con-
tract (unit: seconds)
(P16) Simulation run time (unit:
seconds)
(M15) Resources usage

location of each

geographical
node.
number of possible connections

average time delayed in the
propagation process of each
block
verage time delayed in the
propagation process of each
transaction
bandwidth assumed for the sim-
ulated network
average latency assumed for the
simulated network
automatically generated trans-
actions

resulting chain
average used mining power

ability to implement PoW con-
sensus algorithm.
ability to implement other con-
sensus algorithms than PoW.
average transaction fees

Average time for creating a
block
amount of reward conﬁgured

time taken to execute a contract.

conﬁgured simulation time

how the simulator keep track of
the resource usage/utilization

(P7) Payload transaction size
(unit: Megabyte)
(P8) Block size (unit: Megabyte) maximum block size conﬁgured

maximum transaction size

(M1) Average block size

average block sizes

(M2) Average block propagation
time

average time taken to propagate
blocks

(M3) Average transaction prop-
agation time

average time taken by the sim-
ulator to propagate transaction

(M4)
Tx/second)

Throughput

(unit:

throughput taken to the end of
the simulations.

(M6) Security

security assessement

(M7) Average block interva

(M8) Number
blocks
(M9) Number of mined blocks

generated

of

average time for the blocks to
accept transactions
total
of
blocks
total number of mined blocks

generated

number

(M10) Rate of orphan blocks
(unit: percentage)
(M11) Fork Resolution

(M12) Reward for miner (unit:
cryptocurrency)
(M14) Validation of contract and
execution time
(M16) Simulation time (unit:
seconds)

percentage of the orphan blocks

determine forks occurred as
protocol change.
amount of reward consumed

how the simulator validates the
contract
represents the actual time taken
by the simulator

of time taken for the transaction to be committed. This
metric is of high importance as if wrongly adjusted, it
decreases the system efﬁciency.

3) Resource testing: Are the involved nodes operating prop-
erly? This is related to assessing the involved nodes.
Theoretically, this is assessed using the resource metrics
which represent the computational power (CPU/GPU,
memory, storage capacity, connectivity, and cache ratio)
of the nodes. This metric is of high importance, as low
resources can incur a signiﬁcant negative impact on the
chain.
The systematic mapping study reveals that there is no
simulator able to assess the system’s performance from
all the different viewpoints. From the source code view-
point, existing blockchain simulators support multiple
metrics. However, their corresponding papers do not
validate/evaluate all of them. Again, the problem is not
with the simulators themselves, but with the target ap-
plication. Focusing on the network layer, all simulators
except eVIBES [28] and BlockEval [32] are concerned

with relevant metrics. VIBES [37] implements 3 out of
the 5 network metrics. BlockSim [43], SIMBA [30] and
BlockPerf [31] implement only 2 out of them. Shadow-
Bitcoin [29] implements only 1 network metric.
On the consensus layer, 7 simulators implement associ-
ated metrics. VIBES [37], eVIBES [28], BlockSim [27],
BlockPerf [31], and BlockEval [32] implement only 2
out of the consensus metrics. Local Bitcoin [45] and
SIMBA [30] implement only 1 metric related to the
consensus layer.
On the incentive layer, the mining reward metric is only
supported by BlockPerf [31]. Regarding the general met-
rics, the processing speed metric is only implemented
in VIBES [37] while the system stability metric is only
supported by BlockSIM [44].

RQ3. What are the limitations of the current simulators?
The limitations of the covered simulators can be expressed

by the following viewpoints.

1) Usability: Great headway has been made in the ﬁeld
of simulating blockchain, but the work is limited. The

TABLE III
SET OF PARAMETERS AVAILABLE IN EACH SIMULATOR. FOR A DETAILED DESCRIPTION OF THE PARAMETERS REFER TO SUBSECTION V-D. THE SIGN  
MEANS THAT THE PARAMETER IS AVAILABLE IN THE SIMULATOR, WHILE THE SIGN # MEANS THAT THE PARAMETER IS NOT AVAILABLE IN THE
SIMULATOR. THE LAST ROW REPRESENTS THE TOTAL NUMBER OF SIMULATORS SUPPORTING PARTICULAR PARAMETER. SIMILARLY, THE LAST COLUMN
REPRESENTS THE TOTAL NUMBER OF PARAMETERS SUPPORTED BY A PARTICULAR SIMULATOR. THE BOLD VALUES REPRESENT THE MAXIMUM VALUES
AND THE UNDERLINED VALUES REPRESENT THE MINIMUM VALUES.

Simulator

Shadow-Bitcoin [29]
VIBES [37]
eVIBES [28]
BlockSIM [44]
BlockSim [27]
SimBlock [47]
BlockSim [43]
Local Bitcoin [45]
SIMBA [30]
BlockPerf [31]
BlockEval [32]
Total
Simulator

Shadow-Bitcoin [29]
VIBES [37]
eVIBES [28]
BlockSIM [44]
BlockSim [27]
SimBlock [47]
BlockSim [43]
Local Bitcoin [45]
SIMBA [30]
BlockPerf [31]
BlockEval [32]
Total

Parameters
P8
#

P7
#

P9

P10
#

P11

P1

P1.1

#
#
#
#

#

11

6

P2
#

#
#
#

#

#

5

P3
#

#
#

#

7

P4
#

#
#

#
#
#
#

#
3

P5

#
#
#
#

#

#
#
4

P6
#
#
#
#
#

#

#
#
3

#

#

#

#

8
9
Metrics

#

#

8

P12
#
#
#
#
#

#
#
#
#
#
1

P13
#
#
#
#

#
#

#
4

P14
#
#
#

#

7

P15

P16
#
#

#

#
#
#
#

6

#

#

7

M1 M2 M3 M4 M5 M6 M7 M8 M9 M10 M11 M12 M13 M14 M15 M16
#

#

#

#

#

#

#
#

#

#

9

7

#
#

#

#
#

#
4

#

#
9

#
#

#
#
#

5

#
#
#
#
#
#
#
#
#
2

#

#
#
#
#
#
5

#

#

10

9

#

#
#
#

6

#

#

7

#

#

#
#

#

6

#
#
#
#
#
#
#
#

#
2

#
#

#
#
#
#
#
#

#
2

#
#
#
#
#
#

#

#
3

#

#
#

8

#
9

11

#
#

Total
6
10
6
8
12
12
13
5
12
13
11

Total
8
11
11
4
10
7
7
6
7
14
9

TABLE IV
EVALUATING ASPECTS OF EACH SIMULATOR USING SONARQUBE AND CLOC TOOL.

Simulator

Shadow-Bitcoin [29]
VIBES [37]
eVIBES [28]
BlockSIM [44]
BlockSim [27]
SimBlock [47]
BlockSim [43]
Local Bitcoin [45]
SIMBA [30]
BlockPerf [31]
BlockEval [32]

Lines of Code
1218
20773
25909
712
1730
2487
1721
323
2284
1668
2761

Comments(%)
12
1.8
5
22
18
53
18
13
15
4
76

Evaluation aspect

Duplication(%)
0
0
0
0
5.8
2.4
0
15
3
0
0

Files
17
118
166
35
2.9
37
27
6
36
26
20

Bugs
4
2
0
0
65
6
0
0
0
0
1

Code Smells
117
19
53
28
215
128
28
4
56
26
71

Security Hotspots
12
2
0
4
11
9
4
36
4
6
1

usability of such simulators is hindered by the fact
that there are a large number of parameters that need
to be adjusted (such as the simulation scenario and
the execution environment); this necessitates a deep
understanding of blockchain technology. Furthermore,
most of the existing simulators require coding skills
or/and knowledge of command-line interfaces. However,
some effort has been made to mitigate this issue through
the use of web interfaces; as in VIBES [37], and eVIBES
[28].

2) Availability and Scalability: the majority of the simula-
tors virtually run multiple blockchain nodes on a single
machine, which naturally suffers from limited resources.
Thus, it can be challenging to generalise the outcomes of
simulated blockchain models on real-world blockchain
networks (i.e. resource usage and energy consumption).
Moreover, there is no focus on node behaviour under

different sources of power and resources; i.e. blockchain
running on custom ASIC-based computers. Additionally,
to the best of our knowledge, the majority of existing
simulators do not draw much attention to the consensus
layer; and many of them solely focus on PoW algorithms
while neglecting others, such as PoS, PoA, Raft, and
others.

3) Applicability: the majority of simulators are predomi-
nantly targeted for ﬁnancial applications, such as Bit-
coin. However, there is no generalisation done outside
there is no
the ﬁeld of ﬁnance. The hurdle is that
simulation to support the integration of blockchain with
other technologies. For instance, none of the covered
simulators are speciﬁcally tailored for experimenting
with the intersection of blockchain with other domains
such as IoT, Cloud, Cybersecurity, Supply Chain, and
others.

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
TABLE V
THE SCIENTIFICALLY VALIDATED/EVALUATED METRICS OF EACH SIMULATOR WITH RESPECT TO DIFFERENT LAYERS. THE SIGNS   AND # DEPICTS THE
AVAILABLE AND MISSING METRICS, RESPECTIVELY. THE LAST ROW REPRESENTS THE TOTAL NUMBER OF SIMULATORS USED PARTICULAR METRIC.
SIMILARLY, THE LAST COLUMN REPRESENTS THE TOTAL NUMBER OF METRICS USED BY A PARTICULAR SIMULATOR. THE BOLD VALUES REPRESENT
THE MAXIMUM VALUES AND THE UNDERLINED VALUES REPRESENT THE MINIMUM VALUES.

Simulator

Network layer

Approach used

Consensus layer

Incentive layer

General

Total

n
o
i
t
a
g
a
p
o
r
p

e
m

i
t

k
c
o
l
B
#

#
#
#

#

#
#
4

e
m

i
t

n
o
i
t
a
g
a
p
o
r
p

n
o
i
t
c
a
s
n
a
r
T

#
#
#
#
#

#
#
#
#
2

k
c
o
l
b

f
o

e
g
a
r
e
v
A
#

e
z
i
s

#
#
#
#
#
#

#
3

y
a
l
e
d

t
u
p
k
h
r
g
o
u
w
o
r
t
e
h
N
T
# #
  #
# #
  #
  #
# #
# #
#  
# #
  #
# #
4
1

Shadow-Bitcoin [29]
VIBES [37]
eVIBES [28]
BlockSIM [44]
BlockSim [27]
SimBlock [47]
BlockSim [43]
Local Bitcoin [45]
SIMBA [30]
BlockPerf [31]
BlockEval [32]
Total

k
c
o
l
b

f
o

r
e
b
m
u
N

d
e
t
a
r
e
n
e
g
#

#

#
#
#
#
#
#
3

d
e
n
i
m

f
o

k
c
o
l
b

r
e
b
m
u
N
#
#
#
#
#
#
#
#
#

#
1

n
o
i
t
a
c
ﬁ
i
r
e
v

e
m

i
t

k
c
o
l
B
#
#

#
#
#
#
#

#
#
2

e
l
a
t
s

f
o

s
k
c
o
l
b

e
t
a
r

e
h
T

)
n
a
h
p
r
o
(
#

#
#

#
#
#
#

#
3

n
o
i
t
u
l
o
s
e
r

n
o
i
t
c
a
s
n
a
r
t

y
t
l
u
c
ﬁ
f
i
d

g
g
n
n
i
d
i
k
n
n
r
i
o
e
M
F
P
# # #
# # #
# # #
# # #
# # #
# # #
# # #
# #  
# # #
# # #
    #
1
1
1

d
r
a
w
e
r

g
n
i
n
i
M
#
#
#
#
#
#
#
#
#

#
1

d
e
e
p
S

y
t
i
l
i
b
a
g
t
n
s
i
s
m
s
e
e
c
t
s
o
y
r
P
S
# #
  #
# #
#  
# #
# #
# #
# #
# #
# #
# #
1
1

1
6
2
2
3
1
2
2
3
5
2

VII. CONCLUSIONS

Modelling and simulation have been useful in several dis-
ciplines, and blockchain is no exception. Such practice allows
for experimenting with complex systems, such as blockchain
systems, with minimum cost and effort. The presented sys-
tematic study mainly investigates blockchain simulators, their
features and capabilities. The results showed that there are 20
simulators dedicated to this purpose. We focused on 11 simu-
lators whose source code is publicly available. Additionally, it
highlights scientiﬁcally validated/evaluated metrics supported
by each simulator.

Interestingly, most existing simulators support stochastic,
dynamic and discrete event modelling approaches. We ﬁnd
that the majority of existing blockchain simulators support
dynamic modelling, which aligns well with the nature of
blockchain networks. Regarding the evaluation/validation pro-
cess, not all simulators are interested in the same collection of
evaluation metrics or blockchain layers. Moreover, we ﬁnd that
not all supported metrics by each simulator are scientiﬁcally
validated/evaluated in their corresponding papers.

To date, no blockchain simulator can comprehensively cover
all blockchain facets. Moreover, existing blockchain simulators
have little viability for being implemented with other technolo-
gies, such as cloud and IoT. To sum up, blockchain simulation
is still in its infancy stages; and there must be further research
effort in this direction.

REFERENCES

[1] A. Kumari, R. Gupta, S. Tanwar, S. Tyagi, and N. Kumar, “When
blockchain meets smart grid: Secure energy trading in demand response
management,” IEEE Network, vol. 34, no. 5, pp. 299–305, 2020.
[2] I. Abu-Elezz, A. Hassan, A. Nazeemudeen, M. Househ, and A. Abd-
Alrazaq, “The beneﬁts and threats of blockchain technology in health-
care: A scoping review,” International Journal of Medical Informatics,
p. 104246, 2020.

[3] S. Nakamoto, “Bitcoin: A peer-to-peer electronic cash system,” Decen-

tralized Business Review, p. 21260, 2008.

[4] M. Umar, C.-W. Su, S. K. A. Rizvi, and X.-F. Shao, “Bitcoin: A safe
haven asset and a winner amid political and economic uncertainties
in the us?” Technological Forecasting and Social Change, vol. 167, p.
120680, 2021.

[5] X. Chen, K. Nguyen, and H. Sekiya, “An experimental study on
performance of private blockchain in iot applications,” Peer-to-Peer
Networking and Applications, pp. 1–17, 2021.

[6] G. Wood et al., “Ethereum: A secure decentralised generalised trans-
action ledger,” Ethereum project yellow paper, vol. 151, no. 2014, pp.
1–32, 2014.

[7] I. A. Omar, H. R. Hasan, R. Jayaraman, K. Salah, and M. Omar,
“Implementing decentralized auctions using blockchain smart contracts,”
Technological Forecasting and Social Change, vol. 168, p. 120786,
2021.

[8] N. C. Yiu, “Toward blockchain-enabled supply chain anti-counterfeiting

and traceability,” Future Internet, vol. 13, no. 4, p. 86, 2021.

[9] N. Andola, V. K. Yadav, S. Venkatesan, S. Verma et al., “Anonymity
on blockchain based e-cash protocols—a survey,” Computer Science
Review, vol. 40, p. 100394, 2021.

[10] S. Xu, B. Liao, C. Yang, S. Guo, B. Hu, J. Zhao, and L. Jin, “Deep
reinforcement learning assisted edge-terminal collaborative ofﬂoading
algorithm of blockchain computing tasks for energy internet,” Inter-
national Journal of Electrical Power & Energy Systems, vol. 131, p.
107022, 2021.

[11] J. J. Hunhevicz and D. M. Hall, “Do you need a blockchain in
construction? use case categories and decision framework for dlt design
options,” Advanced Engineering Informatics, vol. 45, p. 101094, 2020.
[12] S. Smetanin, A. Ometov, M. Komarov, P. Masek, and Y. Koucheryavy,
“Blockchain evaluation approaches: State-of-the-art and future perspec-
tive,” Sensors, vol. 20, no. 12, p. 3358, 2020.

[13] K. Petersen, R. Feldt, S. Mujtaba, and M. Mattsson, “Systematic map-
ping studies in software engineering,” in 12th International Conference
on Evaluation and Assessment in Software Engineering (EASE) 12,
2008, pp. 1–10.

[14] B. Bhushan, P. Sinha, K. M. Sagayam, and J. Andrew, “Untangling
blockchain technology: A survey on state of the art, security threats,
privacy services, applications and future research directions,” Computers
& Electrical Engineering, vol. 90, p. 106897, 2021.

[15] K. Miyachi and T. K. Mackey, “hocbs: A privacy-preserving blockchain
framework for healthcare data leveraging an on-chain and off-chain
system design,” Information Processing & Management, vol. 58, no. 3,
p. 102535, 2021.

[16] D. Efanov and P. Roschin, “The all-pervasiveness of the blockchain
technology,” Procedia computer science, vol. 123, pp. 116–121, 2018.
[17] K. W¨ust and A. Gervais, “Do you need a blockchain?” in 2018 Crypto

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
Valley Conference on Blockchain Technology (CVCBT).
pp. 45–54.

IEEE, 2018,

[18] G. Wood et al., “Ethereum: A secure decentralised generalised trans-
action ledger,” Ethereum project yellow paper, vol. 151, no. 2014, pp.
1–32, 2014.

[19] E. Androulaki, A. Barger, V. Bortnikov, C. Cachin, K. Christidis,
A. De Caro, D. Enyeart, C. Ferris, G. Laventman, Y. Manevich et al.,
“Hyperledger fabric: a distributed operating system for permissioned
blockchains,” in Proceedings of the thirteenth EuroSys conference, 2018,
pp. 1–15.

[20] B. R. Haverkort, Performance of computer communication systems: a

model-based approach.

John Wiley & Sons, Inc., 1998.

[21] S. Ferretti and G. D’Angelo, “On the ethereum blockchain structure: A
complex networks theory perspective,” Concurrency and Computation:
Practice and Experience, vol. 32, no. 12, p. e5493, 2020.

[22] M. Belotti, N. Boˇzi´c, G. Pujolle, and S. Secci, “A vademecum on
blockchain technologies: When, which, and how,” IEEE Communica-
tions Surveys & Tutorials, vol. 21, no. 4, pp. 3796–3838, 2019.
[23] Q. Zhu, S. W. Loke, R. Trujillo-Rasua, F. Jiang, and Y. Xiang, “Ap-
plications of distributed ledger technologies to the internet of things:
A survey,” ACM computing surveys (CSUR), vol. 52, no. 6, pp. 1–34,
2019.

[24] V. Anilkumar, J. A. Joji, A. Afzal, and R. Sheik, “Blockchain simula-
tion and development platforms: Survey, issues and challenges,” 2019
International Conference on Intelligent Computing and Control Systems,
ICCS 2019, pp. 935–939, 5 2019.

[25] H. Wan, K. Li, and Y. Huang, “Blockchain: A review from the
perspective of operations researchers,” Proceedings - Winter Simulation
Conference, vol. 2020-December, pp. 75–89, 12 2020.

evaluation

[26] S. Smetanin, A. Ometov, M. Komarov, P. Masek, and Y. Koucheryavy,
“Blockchain
future
approaches:
perspective,” Sensors 2020, Vol. 20, Page 3358, vol. 20, p. 3358, 6 2020.
[Online]. Available: https://www.mdpi.com/1424-8220/20/12/3358
[27] M. Alharby and A. van Moorsel, “Blocksim: a simulation framework
for blockchain systems,” ACM SIGMETRICS Performance Evaluation
Review, vol. 46, no. 3, pp. 135–138, 2019.
[Online]. Available:
https://github.com/maher243/BlockSim

State-of-the-art

and

Jacobsen,

and H.-A.

P. Nasirifard,

[28] A. Deshpande,

framework,” Proceedings

“Demo
abstract: evibes: Conﬁgurable and interactive ethereum blockchain
International
simulation
Middleware Conference
[Online]. Available:
https://github.com/i13-msrg/evibes
Jansen,
execution

[29] A. Miller
ulation
tions.”
https://github.com/shadow/shadow-plugin-bitcoin

via
USENIX Association,

sim-
applica-
[Online]. Available:

of multi-threaded

and R.
direct

“Shadow-bitcoin:

of
2018.

(Posters),

Scalable

2015.

19th

the

8

[30] S. M. Fattahi, A. Makanju, and A. M. Fard, “Simba: An efﬁcient
simulator for blockchain applications,” in 2020 50th Annual IEEE-IFIP
International Conference on Dependable Systems and Networks-
Supplemental Volume (DSN-S).
IEEE, 2020, pp. 51–52. [Online].
Available: https://github.com/nyit-vancouver/SIMBA

[31] J. Polge, S. Ghatpande, S. Kubler, J. Robert, and Y. L. Traon,
“Blockperf: A hybrid blockchain emulator/simulator framework,” IEEE
Access, vol. 9, pp. 107 858–107 872, 2021.
[Online]. Available:
https://github.com/Deadlyelder/BlockPerf

[32] D. K. Gouda,

S.

of

Jolly,

and
2021
validation
International Conference on COMmunication Systems and NETworkS,
COMSNETS 2021, pp. 281–289, 1 2021.
[Online]. Available:
https://github.com/deepakgouda/BlockEval

and K. Kapoor,
blockchain

simulator,”

blockeval,

“Design

a

[33] S. Smetanin, A. Ometov, N. Kannengieser, B. Sturm, M. Komarov, and
A. Sunyaev, “Modeling of distributed ledgers: Challenges and future
perspectives,” Proceedings - 2020 IEEE 22nd Conference on Business
Informatics, CBI 2020, vol. 1, pp. 162–171, 6 2020.

[34] R. Paulaviˇcius, S. Grigaitis, and E. Filatovas, “A systematic review and
empirical analysis of blockchain simulators,” IEEE access, vol. 9, pp.
38 010–38 028, 2021.

[35] M. Alharby, A. Aldweesh, and A. van Moorsel, “Blockchain-based smart
contracts: A systematic mapping study of academic research (2018),”
in 2018 International Conference on Cloud Computing, Big Data and
Blockchain (ICCBB).

IEEE, 2018, pp. 1–6.

[36] K. Wang and H. S. Kim, “Fastchain: Scaling blockchain system with in-
formed neighbor selection,” Proceedings - 2019 2nd IEEE International
Conference on Blockchain, Blockchain 2019, pp. 376–383, 7 2019.

[37] L. Stoykov, K. Zhang, and H.-A. Jacobsen, “Vibes: fast blockchain
simulations for large-scale peer-to-peer networks,” in Proceedings of the
18th ACM/IFIP/USENIX Middleware Conference: Posters and Demos,
2017, pp. 19–20. [Online]. Available: https://github.com/i13-msrg/vibes
[38] P.-Y. Piriou and J.-F. Dumas, “Simulation of stochastic blockchain
models,” in 2018 14th European Dependable Computing Conference
(EDCC).

IEEE, 2018, pp. 150–157.

[39] B. Wang, S. Chen, L. Yao, B. Liu, X. Xu, and L. Zhu, “A simulation
approach for studying behavior and quality of blockchain networks,”
Lecture Notes in Computer Science (including subseries Lecture Notes
in Bioinformatics),
in Artiﬁcial
vol. 10974 LNCS, pp. 18–31,
[Online]. Available:
https://link.springer.com/chapter/10.1007/978-3-319-94478-4 2

Intelligence and Lecture Notes

6 2018.

[40] R. A. Memon, J. Li, J. Ahmed, A. Khan, M. I. Nazir, and M. I. Mangrio,
“Modeling of blockchain based systems using queuing theory simu-
lation,” in 2018 15th International Computer Conference on Wavelet
Active Media Technology and Information Processing (ICCWAMTIP).
IEEE, 2018, pp. 107–111.

[41] M. Alharby and A. van M, “Blocksim: An extensible simulation tool

for blockchain systems,” Frontiers in Blockchain, vol. 3, p. 28, 2020.

[42] N. Agrawal, R. Prashanthi, O. Bic¸er, and A. K¨upc¸ ¨u, “Blocksim-net:
A network based blockchain simulator,” 11 2020. [Online]. Available:
https://arxiv.org/abs/2011.03241v2

and M. Correia,

[43] C. Faria
2019
in
(Blockchain).
https://github.com/carlosfaria94/blocksim

International

IEEE

IEEE, 2019, pp. 439–446.

“Blocksim:

Conference

blockchain

simulator,”
Blockchain
[Online]. Available:

on

[44] S. Pandey, G. Ojha, B. Shrestha, and R. Kumar, “Blocksim: A
practical simulation tool for optimal network design, stability and
planning.” in 2019 IEEE International Conference on Blockchain
and Cryptocurrency (ICBC).
IEEE, 2019, pp. 133–137. [Online].
Available: https://github.com/RoseBay-Consulting/BlockSim

[45] L. Alsahan, N. Lasla, and M. Abdallah, “Local bitcoin network
simulator for performance evaluation using lightweight virtualization,”
2020 IEEE International Conference on Informatics, IoT, and Enabling
Technologies, ICIoT 2020, pp. 355–360, 2 2020. [Online]. Available:
https://github.com/noureddinel/core-bitcoin-net-simulator

[46] B. Wang, S. Chen, L. Yao, and Q. Wang, “Chainsim: A p2p
blockchain simulation framework,” Communications in Computer and
Information Science, vol. 1305, pp. 1–16, 12 2020. [Online]. Available:
https://link.springer.com/chapter/10.1007/978-981-33-6478-3 1

[47] Y. Aoki, K. Otsuki, T. Kaneko, R. Banno,

and K. Shudo,
“Simblock: A blockchain network simulator,” in IEEE INFOCOM
2019-IEEE Conference on Computer Communications Workshops
(INFOCOM WKSHPS).
IEEE, 2019, pp. 325–329. [Online]. Available:
https://github.com/dsg-titech/simblock

[48] M. Basile, G. Nardini, P. Perazzo, and G. Dini, “On improving
simblock blockchain simulator,” 2021 IEEE Symposium on Computers
and Communications (ISCC), pp. 1–6, 9 2021. [Online]. Available:
https://ieeexplore.ieee.org/document/9631470/

[49] R. Banno and K. Shudo, “Simulating a blockchain network with
simblock,” ICBC 2019 - IEEE International Conference on Blockchain
and Cryptocurrency, pp. 3–4, 5 2019.

[50] M. Zander, T. Waite, and D. Harz, “Dagsim: Simulation of dag-
based distributed ledger protocols,” ACM SIGMETRICS Performance
Evaluation Review, vol. 46, 2019.

[51] IOTA,

2022.
https://www.iota.org/foundation/research-papers

papers — iota,”

“Research

[Online]. Available:

[52] M. Bertoli, G. Casale, and G. Serazzi, “Jmt: performance engineering
tools for system modeling,” ACM SIGMETRICS Performance Evaluation
Review, vol. 36, no. 4, pp. 10–15, 2009.

[53] SonarQube, “Code quality and code security — sonarqube,” 2022.

[Online]. Available: https://www.sonarqube.org/

[54] A.

Danial,

“cloc,”

2021.

[Online].

Available:

https://github.com/AlDanial/cloc

