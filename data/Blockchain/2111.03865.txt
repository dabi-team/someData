2
2
0
2

y
a
M
2
1

]

R
C
.
s
c
[

3
v
5
6
8
3
0
.
1
1
1
2
:
v
i
X
r
a

Sunspot: A Decentralized Framework Enabling
Privacy for Authorizable Data Sharing on
Transparent Public Blockchains(cid:63)

Yepeng Ding and Hiroyuki Sato

The University of Tokyo, Tokyo, Japan
{youhoutei,schuko}@satolab.itc.u-tokyo.ac.jp

Abstract. Blockchain technologies have been boosting the development
of data-driven decentralized services in a wide range of ﬁelds. However,
with the spirit of full transparency, many public blockchains expose all
types of data to the public such as Ethereum. Besides, the on-chain
persistence of large data is signiﬁcantly expensive technically and eco-
nomically. These issues lead to the diﬃculty of sharing fairly large pri-
vate data while preserving attractive properties of public blockchains.
Although direct encryption for on-chain data persistence can introduce
conﬁdentiality, new challenges such as key sharing, access control, and
legal rights proving are still open. Meanwhile, cross-chain collaboration
still requires secure and eﬀective protocols, though decentralized storage
systems such as IPFS bring the possibility for fairly large data persis-
tence. In this paper, we propose Sunspot, a decentralized framework for
privacy-preserving data sharing with access control on transparent pub-
lic blockchains, to solve these issues. We also show the practicality and
applicability of Sunspot by MyPub, a decentralized privacy-preserving
publishing platform based on Sunspot. Furthermore, we evaluate the se-
curity, privacy, and performance of Sunspot through theoretical analysis
and experiments.

Keywords: Data sharing · Privacy preservation · Access control · Blockchain
· Decentralized storage · Digital rights management.

1

Introduction

Worldwide decentralization of data persistence and sharing is advancing with
the evolution of public blockchain technologies, as can be seen by the boom of
decentralized applications (DApp), especially decentralized ﬁnance (DeFi) [39]
in recent years. Diﬀerent from decentralized payment platforms such as Bit-

(cid:63) This is the preprint version of the conference paper ”Sunspot: A Decentralized
Framework Enabling Privacy for Authorizable Data Sharing on Transparent Public
Blockchains” in Proc. International Conference on Algorithms and Architectures for
Parallel Processing, 2021.

 
 
 
 
 
 
2

Y. Ding and H. Sato

coin [24] 1, DeFi has wider applicability that provides various ﬁnancial products
and services such as lending [3], insurance [34], trading, and investment [5]. Al-
though the energy consumption of DeFi compared to traditional ﬁnance is still
under debate, DeFi has presented a set of attractive properties including acces-
sibility, automation, transparency, interoperability, ﬁnality, borderlessness, and
innovativeness. These properties are generally achieved through on-chain data
persistence and sharing supported by transparent public blockchains such as
Ethereum [36] that are permissionless and fully disclosing all types of data. But
it would still be limited if data are ﬁnance-oriented only.

With the maturity of the ERC-721 [10], the application based on non-fungible
token (NFT) techniques has enlarged applicability to all types of digital assets
in a wide range of ﬁelds including art, law, ﬁnance, entertainment, as well as
personal data. An NFT is generally used to represent legal rights such as own-
ership of a digital asset, though is possible for a traditional asset. The proofs of
these legal rights possess beneﬁcial properties of public blockchains such as tam-
perprooﬁng, transparency, traceability, and high availability due to its nature of
solidifying proof data on public blockchains. However, proof of legal rights does
not imply prevention of infringement of these rights because oﬀ-chain assets may
still face security and privacy issues.

Although on-chain storage of digital assets is theoretically feasible, it is too
expensive to store large data directly on public blockchains due to the consensus
diﬃculty. Consequently, current public blockchains have strict data size limi-
tations. While widespread centralized solutions such as self-hosted storage and
cloud storage [37] have lower costs, some properties like integrity and availabil-
ity are hard to implement. As a compromise solution, public blockchains that
leverage peer-to-peer ﬁle sharing protocols have been experimented in indus-
try to store large data without centralized mechanisms and authorities such as
InterPlanetary File System (IPFS) [4]. With elaborated incentive mechanisms
and cryptographic support, some blockchains have made signiﬁcant progress to
attract participants such as the Filecoin network that is built on top of IPFS.
These systems enhance the security of data storage including integrity, dura-
bility, and availability but still do not solve privacy issues because all data are
stored publicly without any conﬁdentiality protection at default. In other words,
anyone with a public link can fully acquire that data. Even if data are encrypted
by data providers before storage, it is challenging to share decryption keys and
authorize data consumers without central entities.

From the background above, we summarize and formalize challenges of de-
centralized data sharing as follows, where D is the shared data set, R the legal
right set, U the user set.

Challenge 1 [Proof of legal rights] Pr(d, r) = u if and only if u has the legal
right r, where Pr : D × R → U, d ∈ D, r ∈ R.

1 For brevity, when mentioning the name of a cryptocurrency in this paper, we refer
to its underlying blockchain. For instance, “Bitcoin” refers to the blockchain built
on the Bitcoin Backbone Protocol [11].

Sunspot

3

Challenge 2 [Fairly large data storage] ∃d ∈ D, Size(d) > 1MB.

Challenge 3 [Interoperability] The system is compatible with various blockchains
and allows multiple heterogeneous blockchains to implement functionalities with
minimum compatibility issues.

Challenge 4 [Privacy preservation] ∀d ∈ D, d is encrypted.

Challenge 5 [Access control] Pa(u, d) = Dec(d) if and only if u has the access
privilege of d, where Pa : U × D → {Dec(d) : d ∈ D}.

Motivated by the above issues and challenges, we propose a framework named
Sunspot to enable privacy and provide access control for ﬂexible data shar-
ing on transparent public blockchains. Sunspot has a decentralized architecture
and supports multiple access control mechanisms based on customizable iden-
tity management models. We generalize its protocols to make Sunspot compat-
ible with various public blockchains and decentralized storage systems. Besides,
Sunspot has a cross-chain collaboration mechanism that bridges blockchains and
decentralized storage systems, as well as a multi-chain mechanism that allows
heterogeneous blockchains to present uniﬁed characteristics.

We summarize our main contributions of this paper and Sunspot as follows.

1. We present Sunspot, a decentralized privacy-preserving data sharing frame-
work that solves the challenges above. To the best of our knowledge, Sunspot
is the ﬁrst framework that focuses on preserving privacy for data sharing on
transparent public blockchains.

2. We generalize protocols and provide support for multiple access control
mechanisms to enable ﬂexible data sharing in various scenarios. Particu-
larly, we show an identity management model and a management-free model
for identiﬁcation based on two diﬀerent access control mechanisms.

3. We present MyPub, a decentralized privacy-preserving publishing platform
based on Sunspot, to show the practicality and applicability of Sunspot.
4. We prove the security and privacy properties of Sunspot and demonstrate

them with experiments from the perspective of attackers.

5. We evaluate the performance of core functionalities of Sunspot.

2 Related Work

The privacy issues coming with full transparency are rising concerns in soci-
ety and endangering legacy of some decentralized services due to tightening of
regulations such as the General Data Protection Regulation (GDPR) [27]. In
such a context, many enterprise products turn into solutions based on private
blockchains and consortium blockchains such as HyperLedger Fabric [2] and XRP
Ledger [29]. In some scenarios, redeveloping an open-source public blockchain as
a privacy-preserving blockchain also becomes a solution.

For existing transparent public blockchains, solutions based on zero-knowledge
proof (ZKP) [12] are attracting attention. As an early exploration, Zerocoin [22]

4

Y. Ding and H. Sato

provides a feasible solution to Bitcoin’s pseudonymity by zero-knowledge proofs
for set membership. Security such as prevention of double spending is assured
without revealing the transaction. But the original implementation of Zerocoin
signiﬁcantly increased computation cost and slowed down the network eﬃciency.
Later, Zcash, the ﬁrst widespread blockchain based on the Zero-Knowledge Suc-
cinct Non-Interactive Argument of Knowledge (zk-SNARKs) [14], was launched
on top of the Zerocoin protocol. Zcash enhances privacy by making the sender,
recipient and amount completely private via encryption as well as improves net-
work performance. However, it is merely a privacy protocol in the Bitcoin net-
work that can neither support smart contracts nor store large data.

Besides ZKP-based approaches, Monero [31], which is based on the CryptoNote
[32], provides another solution based on Ring Conﬁdential Transactions (RingCT)
[25]. It uses a variant of linkable ring signature [20] to allow a member of a group
to stay in anonymity while signing messages on behalf of the group. However, the
same with ZKP-based approaches, the smart contract is not supported. These
privacy-preserving blockchains are generally used for decentralized payment only
and not for extended functionalities such as generalized data sharing.

As for blockchain-based data sharing, many solutions have been proposed in
diﬀerent scenarios. For AI-powered network operations, Zhang et al proposed a
mutual trust data sharing framework [40] to break data barriers between diﬀerent
operators. This framework contains three layers: system management layer, stor-
age layer, and user layer. Only the system management layer adopts a blockchain
for control, while large data are stored in the cloud. Consequently, it is still vul-
nerable to threats to cloud storage and threatened by the trustiness of cloud
service providers. In work [38], a framework named BBDS is proposed for data
sharing of electronic medical records (EMR). It adopts a decentralized access
control mechanism to secure medical records. However, BBDS is based on a per-
missioned blockchain and also relies on cloud storage. And privacy issues are
not addressed including data encryption and key sharing. Recently, Derepo [8],
a distributed data repository, is proposed to preserve the privacy of medical data
with decentralized access control and homomorphic encryption (HE). Although
the HE scheme proves to be eﬀective for solving privacy issues, it leads to a
signiﬁcant performance issue.

To the best of our knowledge, there is no existing work that tackles the
privacy issues for decentralized and general-purpose data sharing on transparent
public blockchains.

3 Sunspot

Sunspots are dark areas on the surface of the Sun. Analogically, our framework
enables private data sharing ”in the dark”, i.e., without disclosing any meaning-
ful information from the shared data to the unauthorized public, on fully trans-
parent public blockchains. Meanwhile, it is built on top of public blockchains to
preserve their security properties.

Sunspot

5

Note, in the rest of the paper, we simply use the word blockchain when refer-
ring to the phrase transparent public blockchain. In Sunspot, we introduce new
terminologies to clarify non-standardized concepts. We categorize blockchains
into two types: control chain and storage chain. A blockchain can be a control
chain if and only if it supports the smart contract, event mechanism, and NFT
protocol. A storage chain is a blockchain that supports decentralized large data
storage, which usually adopts a hybrid architecture. A blockchain can be both a
control chain and a storage chain with the only conceptual diﬀerence. Notably,
with the feature of the multi-chain compatibility of Sunspot, a control chain or
a storage chain can be composed of a set of heterogeneous blockchains.

3.1 Architecture

Sunspot involves two main types of roles: organizer and participant. Organizers
are responsible for initialization, deployment, and optionally for identiﬁcation
that is a continuous work to endorse participants’ identities. In this paper, we
will show an identity management model based on a ﬁne-grained access control
mechanism in this section, a management-free model that depends on a payment-
based access control mechanism in Section 4, and a self-sovereign identity model
in Section 7.

Participants in Sunspot can be data providers, data consumers, or both. We
call participants who are willing to share data as data providers while those who
are willing to acquire data as data consumers. There is no direct interaction
between a provider and a consumer. Sunspot encapsulates all operations and
exposes interfaces to participants in a decentralized manner, which means it has
a high probability that the interaction target is not the intended target but a
set of unknown nodes in the blockchain network that are even not aware of the
functionality.

As shown in Figure 1, Sunspot contains ﬁve components: Distributor, ID
Manager, Cipher Suite, Control Linker, and Storage Linker. From the view of
deployment, except Distributor and ID Manager that are deployed on the control
chain, other components are initialized on the storage chain.

Distributor Distributor is a smart contract on the control chain that imple-
ments the NFT protocol. It provides core functionalities to solidify the legal
rights of data by minting a unique NFT as its meta-information. A data owner
uses Distributor to share data while a data consumer to query and get the meta-
information of the shared data.

ID Manager ID Manager is used for participant registration and identity query,
which is a smart contract on the control chain. Participant registration is the
key to integrating identiﬁcation information such as wallet addresses of diﬀerent
blockchains and authorization information. For the identity management model
in this section, Ciphertext-Policy Attribute-Based Encryption (CP-ABE) [35]
is used for ﬁne-grained access control. Hence, authorization information is a

6

Y. Ding and H. Sato

Fig. 1. The architecture of Sunspot.

private key that describes the attributes of a participant. And identity query is
a read-only operation for veriﬁcation.

Cipher Suite Cipher Suite plays a pivotal role in enabling privacy and secur-
ing access control. Its main functionalities are encrypting data and generating
decryptors. It is designed to be secure and implemented with a set of security
measurements such as obfuscation [13] to ensure control-ﬂow integrity (CFI) [1],
type safety, and memory safety.

Control Linker Control Linker is the gateway to the control chain that encap-
sulates interactions such as signing transactions and making the remote proce-
dure call (RPC). A common interface is implemented to facilitate the redevel-
opment and multi-chain support.

Storage Linker Similar to the Control Linker, Storage Linker is the gateway to
the storage chain. Particularly, it encapsulates interactions with the ﬁle system
such as uploading data to and downloading data from the storage chain.

3.2 Protocol

Environment Assumption We assume there is an organizer set O and a
participant set P. In the worst case, g ≤ |O| of organizers are available, and at

Sunspot

7

least one organizer of the available ones is honest and never colludes with the
others.

The control chain C and the storage chain S already exist. For clarity, we
assume C is merely a blockchain. And so is S. We will illustrate the multi-chain
case in Section 3.3.

Blockchains selected for C and S enable Transport Layer Security (TLS) for

the JSON-RPC request/response communication channel.

Two master key pairs used to initialize Sunspot, (MPKc, MSKc, MWAc) for
interacting with C, (MPKs, MSKs, MWAs) for interacting with S, are created,
where MPK is a master public key, MSK a master secret key, and WMA a master
wallet address. Besides, MSKc and MSKs are encoded as integers in Z/mZ and
divided into |O| shares respectively based on the Shamir’s Secret Sharing (SSS)
[30] with (g, |O|)-threshold. And each share for each of them is distributed to a
unique organizer.

i , Wc

i , SKc

i ) for C and (PKs

All participants already have key pairs for interacting with C and S. ∀Pi ∈ P,
Pi has a pair (PKc
i ) for S, where PK, SK,
WA, denote public key, secret key, and wallet address respectively. For Ethereum,
SK is generated as random 256 bits usually by SHA-256 [6]. PK is derived from
SK by the Elliptic Curve Digital Signature Algorithm (ECDSA) [16] for the
elliptic curve secp256k1. And WA is created by applying the Keccak-256 [9] to
PK.

i , WAs

i , SKs

Initialization This protocol is used for initializing Sunspot.
1. Deploy Distributor and ID Manager contracts to C with MSKc and get ad-

dresses Cdis and Cid as their identiﬁers.

2. Run Setup(λ, Γ ) algorithm of CP-ABE [35] to produce public parameter
ˆPK and a master key ˆMK, where λ is the security parameter and Γ is the
attribute space;

3. Store ˆPK and ˆMK to state variables of Cdis by invoking SetABE( ˆPK, ˆMK);
4. Conﬁgure and compile Cipher Suite, Control Linker, and Storage Linker with
parameters Cdis and Cid. Store them to S with MSKs and get addresses
Sciph, Scl, Ssl as their identiﬁers;

5. Emit a Storage Registered Event(MWAs, Sciph, Scl, Ssl) on C with MSKc;
6. Make ˆPK, ˆMK, Sciph, Scl, Ssl public to participants.

Registration Users need to execute this protocol to get qualiﬁed as participants
or rejected. Suppose an arbitrary user u ∈ U requests to get registered as a
participant.

1. u submits a structured record Recu with proofs to organizers who are re-
u and a set of

sponsible for identity management. Recu consists of WAc
attributes A;

u, WAs

2. Run KeyGeneration( ˆMK, A) algorithm of the CP-ABE to produce a private

key χu;

3. A Registered Event(WAc

u, WAs

u, χu) is emitted on C by organizers via Cid to

indicate u ∈ P if Recu is approved.

8

Y. Ding and H. Sato

Solidiﬁcation Data providers use this protocol to solidify their data while
preserving privacy through three sub-protocols: Encryption, Persistence, and
Distribution.

Suppose a data provider Pd ∈ P wants to share data D in private.

Encryption. After obtaining Cipher Suite from Sciph, execute this protocol to
produce encrypted data Enc(D) and corresponding decryptor Dec.

1. Generate a secret key κ = Bcrypt(SKc

d ⊕ (cid:15)) where Bcrypt is a password
scheme [26], (cid:15) is a nonce that is generated from a cryptographically-secure
pseudorandom number generator [33], and ⊕ denotes an operation to obfus-
cate SKc

d and (cid:15) such as concatenation and bitwise exclusive or;
2. Get Enc(D) by encrypting D with κ based on the AES-GCM-SIV scheme

(AES) [15];

3. Run Encrypt( ˆPK, M, γ) algorithm of CP-ABE to produce an access control
policy ρ, where M is a random challenge message and γ is an access structure
over Γ ;

4. Generate decryptor Dec with κ, ρ and M .

Persistence. This sub-protocol is executed via Ssl to store Enc(D) and Dec on
S and produces metadata address Sµ where storing the meta-information of D.

1. Get persistent addresses Sdata and Sdec after storing Enc(D) and Dec to S

with SKs

d signing transactions;

2. Generate a structured metadata µ that at least contains Sdata, H(Enc(D)),
Sdec, and H(Dec) where H : {0, 1}∗ → {0, 1}l is a cyrptographic hash func-
tion with a ﬁxed size l.

3. Get persistent address Sµ after storing µ to S with SKs
d.

Distribution. This sub-protocol solidiﬁes Sµ as an NFT on C through Scl. After
this protocol, Pd can make Sµ public to share D in a decentralized and private
way.

1. Generate a unique token id ι;
2. Invoke Mint(WAc
3. Update ID mapping Mid with Sµ (cid:55)→ ι;
4. Emit a Distributed Event(WAc

d, ι) on Cdis.

d, ι), a method in the NFT protocol, of Cdis with SKc
d;

Authorization Data consumers use this protocol to get authorized and acquire
decrypted data through four sub-protocols: Requisition, Veriﬁcation, Acquisi-
tion, and Decryption.

Suppose a data consumer Pc ∈ P knows Sµ and wants to acquire decrypted

data D.

Requisition. In this protocol, Pc explicitly makes a request via Scl. After this
protocol, Pc knows ι.

Sunspot

9

c is derived from SKc

1. Validate identity existence by ensuring a Registered Event(WAc

c, ∗) ex-
ists, where WAc
c, WAs
c. If the validation result
is ⊥, terminate the protocol with Non-existence exception. Otherwise, con-
tinue the protocol;
2. Get ι by Mid(Sµ);
3. Emit a Requested Event(WAc

c from SKs

c, WAs

c, ι) with SKc
c.

Acquisition. By this sub-protocol, Pc gets decryptor Dec via Ssl.

1. Get µ from Sµ;
2. Get Dec from µ[dec] =⇒ Sdec and verify its integrity by H(Dec).

Veriﬁcation. This sub-protocol is enforced by Dec in memory to authorize a
request and produce veriﬁcation result η ∈ {(cid:62), ⊥}.

1. Validate identity existence by ensuring a Registered Event(WAc

c, ∗) ex-
ists, where WAc
c, WAs
c. If the validation result
is ⊥, terminate the protocol with Non-existence exception. Otherwise, con-
tinue the protocol;

c is derived from SKc

c from SKs

c, WAs

2. Validate ownership by WAc

c = OwnerOf(ι), where OwnerOf is a method in

the NFT protocol, to produce the validation result η0;

3. Validate request existence to produce η1 by ensuring a Requested Event(WAc

c, ι)

exists;

4. Match the challenge message M with the result of Decrypt( ˆPK, ρ, χc) algo-

rithm of the CP-ABE to produce η2;

5. Emit a Veriﬁed Event(WAc

c, ι, η) with SKc

c, where η = η0 ∨ η1 ∧ η2.

Decryption. This sub-protocol follows the Veriﬁcation protocol to decrypt Enc(data),
which is also enforced by Dec in memory.

1. Validate the veriﬁcation result by ensuring a Veriﬁed Event(WAc

ists, where WAc

c is derived from SKc
c;
2. Get µ from TokenURI(ι), a method in the NFT protocol;
3. Get Enc(D) from µ[data] =⇒ Sdata and verify its integrity by H(Enc(D));
4. Restore Enc(D) to D with κ.

c, ι, (cid:62)) ex-

3.3 Multi-Chain Support

Sunspot allows a heterogeneous structure for a control chain and a storage chain.
In a heterogeneous control chain, there is a master blockchain and a set of peer
blockchains. And a storage chain can consist of a set of heterogeneous peer
blockchains. In Sunspot, we formulate a Chain Manager and additional protocols
to enable multi-chain compatibility on top of fundamental protocols illustrated
in Section 3.2.

10

Y. Ding and H. Sato

Chain Manager Chain Manager is a DApp for registering information about
blockchain clusters used to constitute the control chain or the storage chain. Its
main functionality is to permanently store addresses of smart contracts deployed
on all control-oriented blockchains and addresses of other components deployed
on storage-oriented blockchains.

Environment Assumption We assume the same environment illustrated in
Section 3.2 with additional assumptions as follows.

– The control chain C consists of a master blockchain M and a ﬁnite set of

peer blockchains Nc = {Nc

0, Nc

1, . . . }.

– Chain Manager Ccm is deployed on M with a key pair (MPKm, MSKm, MWAm).
– The storage chain S consists of a ﬁnite set of peer blockchains Ns = {Ns

0, Ns

1, . . . }.

Chain Initialization This protocol is executed on M via Ccm to register Nc ∪
Ns. It contains two sub-protocols: Control Chain Registration and Storage Chain
Registration.

Control Chain Registration. This sub-protocol registers all blockchains in Nc to
produce an address set C of deployed contracts.
We present the main process for registering Nc

i ∈ Nc. This process is repeated

for all elements in Nc.

1. Get addresses C i

dis and C i

mized for Ni to Ni with MSKc
i ;

id by deploying Distributor and ID Manager opti-

2. Emit a Control Registered Event(i, MWAc

i , C i

dis, C i

id) on M via Ccm with

MSKm;
3. Append (C i

dis, C i

id) to C.

Storage Chain Registration. This sub-protocol registers all blockchains in Ns.

We present the main process for registering Ns

j ∈ Ns. This process is repeated

for all elements in Ns.

1. Conﬁgure and compile Cipher Suite, Control Linker, and Storage Linker with
sl as their

j and get addresses Sj

j with MSKs

ciph, Sj

cl, Sj

C. Store them to Ns
identiﬁers;

2. Emit a Storage Registered Event(j, MWAs

j, Sj

ciph, Sj

cl, Sj

sl) through Ccm with

MSKm.

Chain Interaction For any protocol that has interactions with the control
chain, it interacts with the target underlying blockchain through the Chain Man-
ager Ccm.

Suppose a protocol calls a function of C i

dis. After constructing C by query-
ing Control Registered Events of M, the protocol can identify the blockchain
deploying C i

dis and invoke that function.

For interacting with the storage chain, it is the same with the single-chain

case with the only diﬀerence of Application Programming Interfaces (APIs).

Sunspot

11

4 MyPub

MyPub2 is a decentralized privacy-preserving publishing platform based on Sunspot.
Creators can publish their work such as digital paintings, writings, and music,
without disclosing all contents on MyPub and share the metadata freely. To ac-
quire the full contents of a work, customers can choose to buy the ownership or
pay for the right to use. All operations of MyPub are enforced on blockchains via
variants of protocols of Sunspot without central authorities. Based on Sunspot,
MyPub can protect legal rights including the copyright, ownership, and right to
use based on properties such as conﬁdentiality, integrity, availability, and trans-
parency.

MyPub adopts Ethereum as its control chain and Filecoin as its storage chain.
To adapt to its business logic, MyPub simpliﬁes but concretizes Sunspot proto-
cols and adopts a management-free identity model that depends on a payment-
based access control mechanism. This model does not require organizers to en-
dorse participants’ identities. Instead, it is based on the intrinsic transaction
mechanism of the blockchain. For instance, to obtain the right to use of a work,
the customer executes the Requisition protocol with a speciﬁc amount of cryp-
tocurrency made by the owner. During the execution of the Veriﬁcation protocol,
the decryptor validates payment proofs, instead of authenticating the customer
according to the registered attributes, to determine whether to decrypt the data.
Payment proofs are forgery resistant because they have been already accepted
in a blockchain network. Consequently, the payment-based access control mech-
anism is fully decentralized and does not require authorities for endorsements.

5 Security and Privacy Analysis

5.1 Assumption

We make reasonable assumptions below.

Blockchain Safety. Given a blockchain in Sunspot, most of the nodes, the number
of which is greater than the threshold to make the consensus mechanism function
well, are trustworthy. By assuming blockchain safety, any blockchain used in a
system based on Sunspot preserves properties of a transparent public blockchain
including on-chain data integrity and availability.

RPC Safety. Given a blockchain in Sunspot, its API at least enables TLS for
RPCs. By assuming RPC safety, any blockchain used in a system based on
Sunspot preserves connection integrity and RPC availability.

2 https://github.com/yepengding/MyPub

12

Y. Ding and H. Sato

Control-Flow Integrity. Cipher Suite preserves control-ﬂow integrity [1]. Cipher
Suite in Sunspot is implemented by the Rust [21], a programming language
that provides guarantees for memory safety [17] through an ownership-based
resource management model, without using unsafe and external blocks. Besides,
the implementation follows the security through obscurity to protect sensitive
function ﬂows and constants.

Organizer Trust. By adopting (g, |O|)-threshold SSS, at least g organizers out
of O are always available and constitute an available set Og ⊆ O. ∀o ∈ Og, o
can collude with at most g(cid:48) organizers where g(cid:48) < g −1. This assumption ensures
there does not exist an organizer can dominate the identity management of a
system based on Sunspot.

5.2 Evaluation Model

We use the same notation system illustrated in the sections above. To facilitate
reading, we repeat some notations as follows.

For sets, we denote the participant set as P, the shared data set as D. Two
types of blockchains in Sunspot are the control chain C and the storage chain S.

Property 1 (Data Privacy). ∀d ∈ D, p ∈ P can decrypt d if and only if ηp = (cid:62).

Proof. In Sunspot, data privacy is ensured by conﬁdentiality. Data are encrypted
through the Encryption protocol before being stored on S, which introduces
conﬁdentiality for the stored data.

⇒ In the Encryption protocol, d is encrypted via the AES with secret key
κ obfuscated and hard-coded in its decryptor. By the Control-Flow Integrity
assumption, κ is not disclosed to any p ∈ P, of which the safety is guaranteed.
Hence, executing the Authorization protocol is the only way for p to decrypt
d. In the sub-protocol Veriﬁcation, ηp is the only condition to determine the
enforcement of the Decryption protocol. Besides, ηp becomes tamper-evident
and immutable after corresponding Veriﬁed Event is emitted according to the
Blockchain Safety. If p can decrypt d, ηp must be satisﬁed.

⇐ In the Veriﬁcation protocol, ηp = (cid:62) holds in two cases: ηp

ηp
i = (cid:62).
The ﬁrst case implies p is the owner of d, while the second case implies the
attributes of p satisﬁes the access control policy ρd, which is ensured by the
CP-ABE. Based on the assumptions above, p can decrypt d in either case when
ηp = (cid:62).

0 = (cid:62) or

2
(cid:86)
i=1

This completes the proof.

Property 2 (Identity Privacy). ∀p ∈ P with a set of attributes Ap, Ap cannot
be disclosed.

Sunspot

13

Proof. Sunspot protects the privacy of identities in all types of identity man-
agement models. Since identity management depends on its underlying access
control mechanisms, two cases in Sunspot are proved below.

Case 1 (Fine-Grained Mechanism). In the Registration protocol, the private key
χp that describes Ap is generated based on the CP-ABE and persist on C. χp
is the only public information associated with Ap. Since Ap cannot be disclosed
with χp according to [35], the identity privacy is protected.

Case 2 (Payment-Based Mechanism). This mechanism does not require identity
information other than the wallet address embedded in a payment transaction.
Since the wallet address does not directly link to the real identity, the identity
information cannot be disclosed.

This completes the proof.

Property 3 (Data Availability). ∀d ∈ D, if the token id ι of d is known, d is
always available.

Proof. The metadata µ of d is always available via calling TokenURI(ι) of the
Distributor Cdis according to the Blockchain Safety and RPC Safety assump-
tions. On-chain data integrity implies µ and Sdata implied from µ[data] are
tamper-proof. Based on the Blockchain Safety, d is always available via its ad-
dress Sdata.

5.3 Experiments

To demonstrate the properties are eﬀective to protect Sunspot from threats, we
conduct two representative experiments from the perspective of attackers in a
simulation environment where we set up an Ethereum and a Filecoin network
with TLS enabled, as well as 10 account pairs (one for each network) for orga-
nizers, 10 for data providers, and 10 for data consumers. The Initialization and
Registration protocols are executed after the environment setup.

Man-in-the-Middle Attack We simulate a middleman who aims to deceive
the veriﬁcation process of the decryptor by hijacking the connections between
the decryptor and the blockchain network. After penetrating our deliberately
developed vulnerable network, all packets are successfully intercepted by the
middle man. However, without the private key, the middle man can neither know
the transmitting data nor forge a connection to compromise the Veriﬁcation
protocol.

We also formulate an advanced attack by making the middleman pretend to
be a legal node in the network with a self-signed certiﬁcate. However, the decryp-
tor throws an Unauthenticated Error immediately after detecting an unknown
certiﬁcate authority in the ﬁrst process of the Veriﬁcation protocol.

14

Y. Ding and H. Sato

Return-Oriented Programming To test the control-ﬂow integrity, we use
return-oriented programming (ROP) [28] to analyze the decryptor and try to
ﬁnd gadgets to bypass the Veriﬁcation protocol by modifying the control ﬂow.
We decode the decryptor into a ﬁle in the LLVM assembly language format [19].
However, the ﬁle is over 2 million lines with unreadable ﬂows and values due to
the obfuscation. And we fail to exploit it with static and runtime analyzers such
as [18].

6 Performance Analysis

In Sunspot, we evaluate the performance of protocols regarding a set of data
sizes. For each data size per protocol, we conducted experiments 10 times. To
evaluate the performance without invasion, we use containerization techniques
to encapsulate components to minimize the impact of irrelevant factors such as
network delay. We also implement external scripts to observe the performance in
a cloud environment (Amazon EC2 g4dn.xlarge). The result is shown in Table 1.
Particularly, we assume a constant time for on-chain operations that are
irrelevant factors (e.g., mining and querying) to the performance evaluation of
Sunspot, though on-chain operations probably cause a signiﬁcant performance
impact in practice. We implement this by subtracting the observed on-chain
operation time from raw results.

Table 1. The performance of Sunspot protocols.

Data size
(byte)
1,024
2,048
4,096
8,192
16,384

Protocols (s)
Initialization Registration Solidiﬁcation Authorization

17.53
13.62
11.15
13.56
14.01

0.36
0.35
0.38
0.44
0.35

9.47
9.99
11.03
13.60
17.85

3.26
4.01
4.87
5.89
7.68

Notably, the Initialization protocol includes the compiling time of compo-
nents, which brings a considerable time cost. The same with the Encryption
sub-protocol of the Solidiﬁcation that generates and compiles a decryptor in the
execution process.

7 Discussion

We claim that Sunspot provides a feasible solution to the issues and challenges
described in Section 1.

Sunspot

15

Challenge 1 [Proof of legal rights] Metadata are stored on the control chain
as NFTs. The proofs of legal rights derived from on-chain data are immutably
veriﬁable due to the public blockchain properties. For instance, in Mypub, a
creator of an NFT holds copyright and initial ownership while a customer can
hold the right to use of some data after the payment, i.e., getting authorized.
These rights are permanently traceable and veriﬁable.

Challenge 2 [Fairly large data storage] In Sunspot, the control chain collaborates
with the storage chain to enable fairly large data storage. The storage chain
is implemented by decentralized storage systems to store large data. Besides,
a cross-chain collaboration mechanism is implemented based on protocols in
Section 3.2 to bridge the control chain and the storage chain.

Challenge 3 [Interoperability] First, Sunspot protocols and access control mech-
anisms are generalized and not blockchain-speciﬁc. Therefore, Sunspot can sup-
port all types of blockchains that satisfy the conditions deﬁned in Section 3.
Furthermore, Sunspot enables multi-chain compatibility and allows heteroge-
neous structures by the Chain Manager and additional protocols illustrated in
Section 3.3. In this manner, a chain component can consist of multiple hetero-
geneous blockchains to be scalable and dependable.

Challenge 4 [Privacy preservation] In Sunspot, identity privacy and data privacy
are preserved. We provide proofs in Section 5.2. Participants’ attributes are
stored on chain but described by a private key generated in the Registration
protocol. And the shared data are fully encrypted via the Encryption protocol
before being stored on the storage chain.

Challenge 5 [Access control] Currently, two access control mechanisms are mech-
anized in Sunspot including a ﬁne-grained mechanism and a payment-based
mechanism. Based on these two mechanisms, Sunspot supports an identity man-
agement model based on the combination of the CP-ABE and blockchains that
is described in Section 3 and a management-free model purely enforced on the
blockchain that is described in Section 4.

However, the identity management model based on the ﬁne-grained access
control mechanism highly depends on the Control-Flow Integrity assumption.
Although the management-free model is enforced on the blockchain, it lacks
support for complex access control policies. Therefore, the implementation of
the self-sovereign identity (SSI) [23] model is on our schedule. With the support
of the SSI, participants can manage their own identities based on blockchains and
present on-demand veriﬁable presentations for authentication and authorization.
Besides, Sunspot-based systems are also threatened by the security issues of
blockchains such as smart contract vulnerabilities [7] and the Sybil attack [41].

8 Conclusion

In this paper, we have presented Sunspot, a decentralized privacy-preserving
framework with multiple access control mechanisms, to solve the key challenges

16

Y. Ding and H. Sato

of data sharing on transparent public blockchains including proof of legal rights,
fairly large data storage, interoperability, privacy preservation, and access con-
trol. To enlarge the applicability of Sunspot, we have generalized its protocols
and made it support multi-chain and heterogeneous structures. Besides, we have
proved the security and privacy properties of Sunspot including data privacy,
identity privacy, and data availability. For security in practice, we have con-
ducted experiments from the perspective of attackers to launch representative
attacks to demonstrate the eﬀectiveness of Sunspot. We have also evaluated the
performance of core functionalities implemented by formulated protocols. Fur-
thermore, we have discussed the methods mechanized in Sunspot of solving the
key challenges of data sharing on transparent public blockchains, as well as the
limitations and further improvements.

References

1. Abadi, M., Budiu, M., Erlingsson, U., Ligatti, J.: Control-ﬂow integrity principles,
implementations, and applications. ACM Transactions on Information and System
Security (TISSEC) 13(1), 1–40 (2009), iSBN: 1094-9224 Publisher: ACM New
York, NY, USA

2. Androulaki, E., Barger, A., Bortnikov, V., Cachin, C., Christidis, K., De Caro,
A., Enyeart, D., Ferris, C., Laventman, G., Manevich, Y.: Hyperledger fabric: a
distributed operating system for permissioned blockchains. In: Proceedings of the
Thirteenth EuroSys Conference. pp. 1–15 (2018)

3. Bartoletti, M., Chiang, J.H.y., Lafuente, A.L.: SoK: lending pools in decentral-
ized ﬁnance. In: International Conference on Financial Cryptography and Data
Security. pp. 553–578. Springer (2021)

4. Benet, J.: Ipfs-content addressed, versioned, p2p ﬁle system. arXiv preprint

arXiv:1407.3561 (2014)

5. Chen, Y., Bellavitis, C.: Blockchain disruption and decentralized ﬁnance: The rise
of decentralized business models. Journal of Business Venturing Insights 13, e00151
(2020), iSBN: 2352-6734 Publisher: Elsevier

6. Dang, Q.H.: Secure hash standard (2015)
7. Destefanis, G., Marchesi, M., Ortu, M., Tonelli, R., Bracciali, A., Hierons, R.:
Smart contracts vulnerabilities: a call for blockchain software engineering? In: 2018
International Workshop on Blockchain Oriented Software Engineering (IWBOSE).
pp. 19–25. IEEE (2018)

8. Ding, Y., Sato, H.: Derepo: a distributed privacy-preserving data repository with
decentralized access control for smart health. In: 2020 7th IEEE International
Conference on Cyber Security and Cloud Computing (CSCloud)/2020 6th IEEE
International Conference on Edge Computing and Scalable Cloud (EdgeCom). pp.
29–35. IEEE (2020)

9. Dworkin, M.J.: SHA-3 standard: Permutation-based hash and extendable-output

functions (2015)

10. Entriken, W., Shirley, D., Evans, J., Sachs, N.: Erc-721 non-fungible token stan-

dard. Ethereum Foundation (2018)

11. Garay, J., Kiayias, A., Leonardos, N.: The bitcoin backbone protocol: Analysis and
applications. In: Annual international conference on the theory and applications
of cryptographic techniques. pp. 281–310. Springer (2015)

Sunspot

17

12. Goldreich, O., Oren, Y.: Deﬁnitions and properties of zero-knowledge proof
systems. Journal of Cryptology 7(1), 1–32 (1994), iSBN: 1432-1378 Publisher:
Springer

13. Goldwasser, S., Rothblum, G.N.: On best-possible obfuscation. In: Theory of Cryp-

tography Conference. pp. 194–213. Springer (2007)

14. Groth, J., Kohlweiss, M., Maller, M., Meiklejohn, S., Miers, I.: Updatable and
universal common reference strings with applications to zk-SNARKs. In: Annual
International Cryptology Conference. pp. 698–728. Springer (2018)

15. Gueron, S., Langley, A., Lindell, Y.: AES-GCM-SIV: Speciﬁcation and Analysis.

IACR Cryptol. ePrint Arch. 2017, 168 (2017)

16. Johnson, D., Menezes, A., Vanstone, S.: The elliptic curve digital signature algo-
rithm (ECDSA). International journal of information security 1(1), 36–63 (2001),
publisher: Springer

17. Jung, R., Jourdan, J.H., Krebbers, R., Dreyer, D.: RustBelt: Securing the founda-
tions of the Rust programming language. Proceedings of the ACM on Programming
Languages 2(POPL), 1–34 (2017), iSBN: 2475-1421 Publisher: ACM New York,
NY, USA

18. Kˇroustek, J., Matula, P., Zemek, P.: Retdec: An open-source machine-code decom-

piler. December (2017)

19. Lattner, C., Adve, V.: LLVM: A compilation framework for lifelong program anal-
ysis & transformation. In: International Symposium on Code Generation and Op-
timization, 2004. CGO 2004. pp. 75–86. IEEE (2004)

20. Liu, J.K., Wei, V.K., Wong, D.S.: Linkable spontaneous anonymous group signa-
ture for ad hoc groups. In: Australasian Conference on Information Security and
Privacy. pp. 325–335. Springer (2004)

21. Matsakis, N.D., Klock, F.S.: The rust language. ACM SIGAda Ada Letters 34(3),

103–104 (2014), iSBN: 1094-3641 Publisher: ACM New York, NY, USA

22. Miers, I., Garman, C., Green, M., Rubin, A.D.: Zerocoin: Anonymous distributed
e-cash from bitcoin. In: 2013 IEEE Symposium on Security and Privacy. pp. 397–
411. IEEE (2013)

23. M¨uhle, A., Gr¨uner, A., Gayvoronskaya, T., Meinel, C.: A survey on essential com-
ponents of a self-sovereign identity. Computer Science Review 30, 80–86 (2018),
iSBN: 1574-0137 Publisher: Elsevier

24. Nakamoto, S.: Bitcoin: A peer-to-peer electronic cash system. Tech. rep., Manubot

(2019)

25. Noether, S.: Ring SIgnature Conﬁdential Transactions for Monero. IACR Cryptol.

ePrint Arch. 2015, 1098 (2015)

26. Provos, N., Mazieres, D.: Bcrypt algorithm. In: USENIX (1999)
27. Regulation, G.D.P.: Regulation EU 2016/679 of the European Parliament and of
the Council of 27 April 2016. Oﬃcial Journal of the European Union (2016)
28. Roemer, R., Buchanan, E., Shacham, H., Savage, S.: Return-oriented program-
ming: Systems, languages, and applications. ACM Transactions on Information
and System Security (TISSEC) 15(1), 1–34 (2012), iSBN: 1094-9224 Publisher:
ACM New York, NY, USA

29. Schwartz, D., Youngs, N., Britto, A.: The ripple protocol consensus algorithm.

Ripple Labs Inc White Paper 5(8), 151 (2014)

30. Shamir, A.: How to share a secret. Communications of the ACM 22(11), 612–613

(1979), iSBN: 0001-0782 Publisher: ACm New York, NY, USA

31. Sun, S.F., Au, M.H., Liu, J.K., Yuen, T.H.: Ringct 2.0: A compact accumulator-
based (linkable ring signature) protocol for blockchain cryptocurrency monero. In:

18

Y. Ding and H. Sato

European Symposium on Research in Computer Security. pp. 456–474. Springer
(2017)

32. Van Saberhagen, N.: CryptoNote v 2.0 (2013)
33. Vazirani, U.V., Vazirani, V.V.: Eﬃcient and secure pseudo-random number gener-
ation. In: Workshop on the Theory and Application of Cryptographic Techniques.
pp. 193–202. Springer (1984)

34. Wan, Z., Guan, Z., Cheng, X.: Pride: A private and decentralized usage-based
insurance using blockchain. In: 2018 IEEE International Conference on Internet of
Things (iThings) and IEEE Green Computing and Communications (GreenCom)
and IEEE Cyber, Physical and Social Computing (CPSCom) and IEEE Smart
Data (SmartData). pp. 1349–1354. IEEE (2018)

35. Waters, B.: Ciphertext-policy attribute-based encryption: An expressive, eﬃcient,
and provably secure realization. In: International Workshop on Public Key Cryp-
tography. pp. 53–70. Springer (2011)

36. Wood, G.: Ethereum: A secure decentralised generalised transaction ledger.

Ethereum project yellow paper 151(2014), 1–32 (2014)

37. Wu, J., Ping, L., Ge, X., Wang, Y., Fu, J.: Cloud storage as the infrastructure of
cloud computing. In: 2010 International Conference on Intelligent Computing and
Cognitive Informatics. pp. 380–383. IEEE (2010)

38. Xia, Q., Sifah, E.B., Smahi, A., Amofa, S., Zhang, X.: BBDS: Blockchain-based
data sharing for electronic medical records in cloud environments. Information
8(2), 44 (2017), publisher: Multidisciplinary Digital Publishing Institute

39. Zetzsche, D.A., Arner, D.W., Buckley, R.P.: Decentralized ﬁnance. Journal of Fi-
nancial Regulation 6(2), 172–203 (2020), iSBN: 2053-4841 Publisher: Oxford Uni-
versity Press

40. Zhang, G., Li, T., Li, Y., Hui, P., Jin, D.: Blockchain-based data sharing system
for ai-powered network operations. Journal of Communications and Information
Networks 3(3), 1–8 (2018), iSBN: 2509-3312 Publisher: Springer

41. Zhang, S., Lee, J.H.: Double-spending with a sybil attack in the bitcoin decen-
tralized network. IEEE transactions on Industrial Informatics 15(10), 5715–5722
(2019), iSBN: 1551-3203 Publisher: IEEE

