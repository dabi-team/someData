Grafana plugin for visualising vote based consensus mechanisms, and network P2P
overlay networks

Daniil Baldouski, University of Primorska, d.baldovskiy@mail.ru
Aleksandar Toˇsi´c, University of Primorska, aleksandar.tosic@upr.si

Abstract
In this paper, we present a plugin for visualising vote based consensus mechanisms primarily aimed
to help engineers understand and debug blockchain and distributed ledger protocols. Both tools
are built as Grafana plugins and make no assumptions on the data storage implementation. The
plugins can be conﬁgured via Grafana plugin conﬁguration interface to ﬁt the speciﬁcs of the protocol
implementation.

Keywords
Grafana, Visualisation, Consensus mechanism, Blockchain protocols, P2P, Overlay network

1
2
0
2
c
e
D
2

]

C
D
.
s
c
[

1
v
2
8
0
1
0
.
2
1
1
2
:
v
i
X
r
a

1

 
 
 
 
 
 
Code metadata

Nr. Code metadata description
C1
C2

link to Reproducible

Current code version
Permanent link to code/repository
used for this code version
Permanent
Capsule
Legal Code License
Code versioning system used
Software code languages, tools, and
services used
Compilation requirements, operat-
ing environments & dependencies
If available Link to developer docu-
mentation/manual
Support email for questions

C3

C4
C5
C6

C7

C8

C9

Please ﬁll in this column
v 1.0.2, v 1.0.0
https:// gitlab.com/ rentalker/ consensus-visualization-plugin,
https:// gitlab.com/ rentalker/ topology-visualization-plugin
https:// gitlab.com/ rentalker/ grafana-docker-image

MIT
git
TypeScript

Node.js v14.0.0 or later, Yarn for compilation

https:// gitlab.com/ rentalker/ consensus-visualization-plugin/ -/ blob/ master/ README.md,
https:// gitlab.com/ rentalker/ topology-visualization-plugin/ -/ blob/ master/ README.md
d.baldovskiy@mail.ru

1. Visualising vote based consensus in distributed systems

In the past decade, decentralized systems have been increasingly gaining more attention. Much
of the attention arguably comes from both ﬁnancial, and sociological acceptance, and adoption of
blockchain technology. One of the frontiers has been the design of new consensus protocols, topology
optimisation in these peer to peer(P2P) networks, and gossip protocol design. Analogue to agent
based systems, transitioning from the design to implementation is a diﬃcult task. This is due to the
inherent nature of such systems, where nodes or actors within the system only have a local view of
the system with very little guarantees on availability of data. Additionally, such systems often oﬀer
no guarantees of a system wide time synchronisation.

Debugging distributed systems is a notoriously diﬃcult task. Most standard debugging tech-
niques such as logging, and proﬁling fall short as they cannot capture the global view of the system.
There have been many attempts at building better tools and frameworks that tackled debugging
distributed systems. One of the studied approaches is to give engineers tools to visualise the perfor-
mance of a distributed system, and observe the discrepancies between the expected behaviour, and
actual. The early attempts at visualising distributed was aimed at providing students insight into
the behaviour of algorithm through animation (eg. [1],[2]).

1.1 Common debugging methods
Distributed and decentralized systems are diﬃcult to debug as developers are working on the
third layer (L3). Which includes L1(code level bugs), issues with concurrency on L2 (individual run-
time), and ﬁnally the third dimension for potential bugs arising from the message exchange between
nodes. In general, it is often hard to capture the state in a distributed system as debuggers can not
be attached to all node’s run-times. Additionally, it is often diﬃcult to reproduce errors when they
are inherently stochastic.

Common debugging techniques:

• Logging is the most common debugging method for all three layers. However, in distributed
systems it is important to aggregate logs, and analyze them in as a time series. Additionally,
aggregating distributed logs assumes the system has some method of clock synchronization
protocol. The aggregation can be done with speciﬁc tools for log collection such as Prometheus,
Logstash, etc.

2

• Remote debugging is a technique where a locally running debugger is connected to a remote
node in the distributed system. This allows developers to use the same features as if they were
debugging locally. However, it is diﬃcult to determine which remote node should be debugged.
Additionally, in case of Byzantine behaviour due to network faults connecting the debugger
could fail.

• Distributed deterministic simulation and replay is a technique that attempts to address the
issues of reproducibility in distributed systems. The technique suggests implementing an ad-
ditional layer that abstracts the underlying hardware and the network interfaces to allow for
an exact replay of all the state changes and messages exchanged between nodes. Tools such
as FoundationDB (https://apple.github.io/foundationdb/testing.html) or even custom systems
built on containerisation software

• Visualisation and time series analysis attempts at capturing the state of the system, and all
the nodes by visualising the collected logs. Tools like Prometheus [3] and Grafana [4] are used
extensively.

1.2 Consensus protocol, and consensus roles
The aim of consensus protocols is to prevent a single entity in the system to change the global
state. In blockchain protocol, state is snapshot in blocks, every block added to the chain the system
transitions to a new state. From a top level view, each node within the has perceived relative truth,
through execution of the consensus protocol, nodes need to reach an absolute truth from relative
truths. In vote based consensus protocols, nodes vote for proposed blocks, a block is accepted by
the protocol if it gathers suﬃcient amount of votes. However in public permission-less networks, it is
diﬃcult to have all nodes participate in the protocol for each block. The issues are scalability related,
where congestion in P2P networks is hardly avoidable since votes need to be broadcast through the
network. To circumvent this, state of the art blockchain protocols [5] regularly shuﬄe nodes, and
select a subset of them to vote. As long as the selected subset of nodes is large enough (representative
sample), and nodes were chosen at random, the rest of the network can accept the block provided it
passed the vote.

This research was inspired from implementation issues of a vote based consensus mechanism
similar to aforementioned protocols [6]. The main diﬀerence is that randomness is provided with
veriﬁable delay functions(VDF) [7]. The proof from a VDF is an entropy pool for a random number
generator(RNG). Nodes are then able to shuﬄe the set of nodes participating in the consensus
refereed to as the validator set. Each block, nodes are assigned random roles and execute sub-
protocols depending on their role.

• Validators are generic roles for all nodes participating in the consensus protocol. Their role is

to validate the block by verifying the signatures, and transactions within the block.

• Committee members are a subset of nodes that is entrusted to vote for the proposed block.
Their votes are BLS12-381 [8] signatures that get aggregated into a single signature while
maintaining variability.

• The role of the block producer is to prepare a candidate block, broadcast it to the committee
members and prepare to receive aggregated votes, verify them and broadcast the ﬁnal block
with the aggregated votes to validators.

For each round, these roles get shuﬄed in a random fashion. However, the protocol also has fail
saves to achieve liveliness through skip blocks in case nodes fail to perform their roles.

3

2. Visualisation Tools

We have developed two plugins that extend the functionality of Grafana. Both plugins were
developed as React components and their life-cycle is managed by Grafana. Figure 1 outlines the
architecture used in production. A server running a database instance (preferably time series i.e.
InﬂuxDb), and the Grafana platform. Depending on the underlying blockchain implementation,
nodes can insert their telemetry directly to the database, or if possible have an archive node gather
telemetry from nodes, and report them. In this example, a cluster was used to run multiple nodes. A
coordinating node is responsible for maintaining an overlay network and serving the nodes within the
overlay with a DHCP, DNS, and routing. Nodes are packed within docker containers and submitted
to the coordinator, which uses built in load balancing and distributes them to other cluster nodes.

Figure 1: System architecture

The telemetry inserted is timestamped to create a time series stream of data that is consumed
by Grafana. Figure 2 shows a small part of the dashboard created within Grafana using the built in
plugins for visualisations. These visualisations are time series data of a running blockchain showing
telemetry reported by the nodes.

2.1 Network Plugin
P2P networks propagate information using gossip protocols. There are many variations of the
general and implementation speciﬁcs but in general the family of protocols aims at gossiping the fact
that new information is available in the network. Should a node hear about the gossip, and require
the information it will contact neighbouring nodes asking for the data. In general, gossip protocols
make no assumptions about the topology of the overlay network. However, with structured networks,
the information exchange can be made much more eﬃcient. The observed blockchain implementation
utilized a semi structured network topology for propagating consensus based information. This is
made possible by using a seed string shared between nodes that is used for pseudo-random role
election every block. Using the seed, nodes self-elect into roles without the need to communicate.
However, when performing roles, committee members must attest to the candidate block produced by
the block producer. The seeded random is therefore also used to cluster the network using a k-means
algorithm. The clustering is again performed by each node locally. The shared seed guarantees that
nodes will produce the same topology, which is then used to eﬃciently propagate attestations to the
block producer.

The network topology hence changes every slot. The plugin aims to visualize the changes in the
network topology by drawing nodes, and their cluster representatives. Additionally, the consensus
roles for each node are indicated with the vertex color. Figure 3 shows the network plugin rendering

4

Docker SwarmP2P Overlay NetworkWeb ServerTelemetryInfluxDBMasterNodeClusterNode 2ClusterNode 3ClusterNode nClusterNode 1TGrafanaFigure 2: Part of the Grafana dashboard used by developers to gain insight into a running PoS based blockchain
network

a test network of 30 nodes real-time. The node in the center coloured green is the elected block
producer for the current slot, nodes surrounded by the red stroke are cluster representatives, the
rest of the nodes are coloured based on their role in the current slot, and connected to their cluster
representative respectively.

Figure 3: Network topology plugin visualising a test network of 30 nodes in real time.

2.2 Consensus Plugin
The aim of visualising the consensus mechanism is to quickly evaluate if nodes contributing to
the consensus learned about their correct roles, and if they perform their roles accordingly. In order
to have a scalable visualisation, nodes are placed around a circle, and scaled accordingly to the
size of the network. Roles are visualized with a colour map. Each slot, nodes change their roles,
and execute the protocol accordingly. To visualise the execution, the plugin visualises messages
exchanged between nodes in a form of animated lines ﬂying from an origin node to the destination
node. The animations are time synchronous, and transfer times, and latencies are taken into account.
Additionally, every message is logged with a type, indicating the sub protocol within which it was
created. As an example, messages being sent from committee members to the block producer are
attestations for the current block. The animated lines are coloured indicating the message type. The

5

thickness of the animate line indicates the size of the payload transferred between nodes. Figure 4
shows the consensus plugin running live visualising a test network of 30 nodes. The green coloured
node indicate the block producer role for the current slot, nodes coloured violet are part of the
committee, and blue nodes are validators.

Figure 4: Consensus plugin (with legend) visualising a test network of 30 nodes in real time.

2.3 Generality
Both plugins are customizable from Grafana options menu. For example, users can add new
roles, name and color them. Figure 5 shows the consensus plugin options menu, where users can
additionally turn on or oﬀ display of messages, nodes or containers labels and so on.

Figure 5: Consensus plugin options menu.

3. Acknowledgements

The authors gratefully acknowledge the European Commission for funding the InnoRenew CoE
project (H2020 Grant Agreement #739574) and the Republic of Slovenia (Investment funding of the
Republic of Slovenia and the European Union of the European Regional Development Fund) as well

6

as the Slovenian Research Agency (ARRS) for supporting the project number J2-2504 (C).

References

[1] D. Socha, M. L. Bailey, and D. Notkin, “Voyeur: Graphical views of parallel programs,” ACM

SIGPLAN Notices, vol. 24, no. 1, pp. 206–215, 1988.

[2] G.-C. Roman, K. C. Cox, C. D. Wilcox, and J. Y. Plun, “Pavane: a system for declarative
visualization of concurrent computations,” Journal of Visual Languages & Computing, vol. 3,
no. 2, pp. 161–193, 1992.

[3] J. Turnbull, Monitoring with Prometheus. Turnbull Press, 2018.

[4] M. Chakraborty and A. P. Kundan, “Grafana,” in Monitoring Cloud-Native Applications.

Springer, 2021, pp. 187–240.

[5] V. Buterin and V. Griﬃth, “Casper the friendly ﬁnality gadget,” arXiv preprint arXiv:1710.09437,

2017.

[6] A. Kiayias, A. Russell, B. David, and R. Oliynykov, “Ouroboros: A provably secure proof-of-
stake blockchain protocol,” in Annual International Cryptology Conference. Springer, 2017, pp.
357–388.

[7] D. Boneh, J. Bonneau, B. B¨unz, and B. Fisch, “Veriﬁable delay functions,” in Annual interna-

tional cryptology conference. Springer, 2018, pp. 757–788.

[8] R. S. Wahby and D. Boneh, “Fast and simple constant-time hashing to the bls12-381 elliptic
curve,” IACR Transactions on Cryptographic Hardware and Embedded Systems, pp. 154–179,
2019.

7

