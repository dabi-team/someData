2
2
0
2

g
u
A
5
2

]

R
C
.
s
c
[

3
v
4
2
0
1
1
.
2
1
1
2
:
v
i
X
r
a

Reputation-based PoS for the Restriction of Illicit Activities on
Blockchain: Algorand Usecase

Mayank Pandey, Rachit Agarwal, Sandeep Kumar Shukla, Nishchal Kumar Verma
IIT Kanpur, Kanpur, India
{pandeym,rachitag,sandeeps,nishchal}@iitk.ac.in

August 26, 2022

Abstract

In cryptocurrency-based permissionless blockchain networks, the decentralized structure enables any
user to join and operate across diﬀerent regions. The criminal entities exploit it by using cryptocur-
rency transactions on the blockchain to facilitate activities such as money laundering, gambling, and
ransomware attacks. In recent times, diﬀerent machine learning-based techniques can detect such crimi-
nal elements based on blockchain transaction data. However, there is no provision within the blockchain
to deal with such elements. We propose a reputation-based methodology for response to the users de-
tected carrying out the aforementioned illicit activities. We select Algorand blockchain to implement our
methodology by incorporating it within the consensus protocol. The theoretical results obtained prove
the restriction and exclusion of criminal elements through block proposal rejection and attenuation of
the voting power as a validator for such entities. Further, we analyze the eﬃcacy of our method and
show that it puts no additional strain on the communication resources.

Keywords— Blockchain, Security, Social engineering attacks, Reputation model, Machine Learning, Algorand,

Decentralization, Consensus

Note

This work has been submitted to the IEEE for possible publication. Copyright may be transferred
without notice, after which this version may no longer be accessible.

1 Introduction

Digital payments saw an exponential rise in 2020 due to COVID-19 and work-from-home culture. This also saw
a rise in cryptocurrency-based transactions with market capitalization tripling in 2021 [32]. Such a rise in adoption
and demand not only saw the prices of various cryptocurrencies rise but also saw an increase in illicit activities [10].
Illicit activities are performed mainly due to the exploitation of the vulnerabilities in the blockchain infrastructure
(hardware/software) [3]. For example, in the case of Ethereum, the DAO hack exploited Reentrancy vulnerability [23]
where DAO lost $70 Million. In a recent Poly network attack, the attacker exploited the multi-sig vulnerability to
siphon-oﬀ $600 Million [56]. Apart from the aforementioned types of attacks, attackers also target cryptocurrency
users through social engineering techniques. Additionally, some of the users use cryptocurrency to facilitate diﬀerent
illicit activities such as gambling and money laundering. In terms of impact, there was a 311% rise in ransomware
activity (a social engineering-based attack) that caused $20 Billion loss alone in 2020 [10]. Activities such as terrorist
ﬁnancing, darknet marketplaces, and ﬁnancing of child abuse material are also prominent in cryptocurrency-based
blockchains.

Thus, a question we ask is how can we restrict such illicit activities in cryptocurrency-based blockchain? There
are many machine learning (ML) based techniques that have been proposed to detect suspicious accounts are not only
based on the transaction history (behavior based) [4, 38, 2, 11] but also utilise the meta-data information attached
to the address [49]. Further, services such as Chainalysis1 perform a dynamic exploration of the blockchain through

1https://www.chainalysis.com/

1

 
 
 
 
 
 
use of proprietary ML algorithms. Such services and ML-based approaches are not integrated with the blockchain
infrastructure. They operate outside the blockchain and have characteristics such as using the transaction history,
being paid, dependent on ground-truth information, and are computationally expensive. Moreover, few approaches
deﬁne reputation of user in the blockchain network using various mechanisms that although are behavior oriented
but are either communication expensive [34], maintain a side chain [5], or biased [26].

Within the blockchain network, another set of approaches exist that design and modify consensus algorithm
to limit illicit activities. For example, in Ethereum [57], slashing is proposed to conﬁscate validating user’s stake
in case the user is involved in any malicious activity (such as signing two proposed blocks at the same time and
validating double-spending transactions). However, the deﬁnition of illicit activities for these algorithms is limited to
the activities that attempt to disrupt the functioning of the blockchain network by exploiting vulnerabilities in the
blockchain system. For illicit activities such as money laundering and other social engineering based attacks such as
phishing, there are no countermeasures except for Anti-Money Laundering (AML) regulations outside the scope of
blockchain. There is no inbuilt mechanism in the blockchain to limit criminals from exploiting cryptocurrency-based
blockchains for their illicit gains. Even if a certain user practices/shows illicit behavior, it takes a lot of time for the
Law Enforcing Agencies (LEAs) to capture him [30], sometimes which never happens due to pseudonymity in the
blockchain networks. Thus, justifying the need for regulation in the cryptocurrency-based blockchains for the users
involved in illicit activities. The gap present deﬁnes our objective as to propose a mechanism for regulating malicious
entities within the framework of blockchain. In this work, we provide a mechanism to deal with the user accounts
involved in illicit activities in the consensus process and conduct a theoretical feasibility study for the same.

For our purpose, we select the Proof of Stake (PoS) consensus algorithm as implemented in Algorand [12]. Our
choice is based on the following facts.
It provides the deterministic ﬁnality of the block immediately after the
end of each block consensus round as its PoS algorithm combines with the byzantine fault tolerance (BFT). The
creators of Algorand claim to solve the blockchain trilemma [31] of decentralization, security, and scalability. The
features pertaining to the proposer/validator selection process and data encryption claim the Algorand blockchain
to be most resilient against the adversarial attacks on the network among the existing permissionless blockchains.
Even though Algorand claims limiting illicit activities, it has no inbuilt provision against the users engaged in social
engineering-based illicit activities. We thus propose modiﬁcations to Algorand’s PoS consensus algorithm and perform
a theoretical analysis of our method.

Our method integrates the result of a state-of-the-art ML model (that identiﬁes the probability of being suspicious,
equivalent to the 1 - reputation score) [4] with Algorand’s consensus algorithm. In Algorand, to achieve consensus,
each node performs several steps (cf. Appendix A). In the ﬁrst step, a node depending on certain criteria, forms and
proposes a block. This block is then validated by other nodes (called validators, selected based on certain criteria) in
multiple steps powered by a veriﬁable random function (VRF). We parameterize the received output of the VRF with
the reputation score to make the decision on accepting or rejecting a block proposal. The votes of the validators are
changed in accordance with their respective reputation score. This process happens at each node with no additional
communication of any extra information. Each user makes a decision based on the reputation scores unilaterally and
then the cumulative eﬀect of all such decisions leads to the outcome of consensus round. Our methodology restricts
the criminal entities and, in the process, freezes their accounts in a way that no transactions from such entities will
get approved by an honest validator. We explain our proposed method in detail in section 4.

Note that our method is applicable to other cryptocurrency-based blockchains as well but with suitable modiﬁ-
cations according to the consensus process used. Our approach is diﬀerent from slashing. In our method, there is no
loss of cryptocurrency. Instead, there is a temporary loss of voting power based on the behavior. Also, note that we
do not focus on detecting the vulnerabilities in the system but instead focus on restricting illicit activities that are
either socially motivated, exploit vulnerabilities, or use cryptocurrency as a tool to facilitate the illicit activities.

In summary, our contributions are:

• State-of-the-Art Analysis: We identify the gaps within the diﬀerent consensus algorithms with respect to the

handling of users carrying out illicit activities.

• Reputation score based Consensus method : We propose an algorithm for associating reputation to each user

and use it to enhance resilience against criminal activities in PoS consensus-based blockchain networks.

• Feasibility Analysis: We incorporate our method with the Algorand blockchain network consensus process and
theoretically analyze the same in terms of parameters such as communication hop, time, space and overhead.

The remaining part of the manuscript is organized as follows. Section 2 provides a brief overview of the background
of relevant blockchain functionalities and threats to the network. Section 3 lists out the related work with respect to
detection of illicit users and proposed reputation models followed by the motivation for our proposed methodology. In
section 4, we provide the proposed methodology for Algorand blockchain in detail along with the derived theoretical
results. In section 6, we analyze the proposed methodology with respect to communication and space parameters
to show the eﬀect on the Algorand consensus protocol functioning. Finally, in section 7, we conclude along with a
discussion into the future prospects for our proposed approach.

2

2 Background

In this section, we focus on the consensus process in permissionless blockchain networks. In a permissionless blockchain
network, every node has the opportunity to perform a transaction, propose a block of transactions or verify and
validate the same. The communication in all permissionless blockchains’ consensus protocols is the variant of the
same in Byzantine Fault Tolerance (BFT) consensus process [21]. However, for cryptocurrency-based permissionless
blockchains, the functioning of the BFT protocol is modiﬁed. There are several consensus protocols such as Proof
of Work (PoW), and Proof of Stake (PoS), which are examples of such variations. Here, we only discuss the major
consensus protocols that are adopted especially by the cryptocurrency-based blockchain and provide an overview of
diﬀerent threats and illicit activities that have happened in such cryptocurrency-based blockchain. For the detailed
study of the same, in [6], the authors survey diﬀerent consensus protocols used in diﬀerent blockchains. They
highlight the performance and scalability issues in diﬀerent protocols and emphasize the need to mitigate these issues
for enabling widespread adoption. For the scope of our paper, we provide a brief overview.

2.1 Diﬀerent Consensus Mechanisms

Blockchain technology uses consensus mechanism for reaching the decision over the induction of new blocks into the
chain. There are ﬁve stages of engagement between the blockchain network users during the consensus process [60].
These are proposing block, information transmission, validating the block components, ﬁnalizing the block, and
providing the incentive. The primary objective of a consensus procedure is to accept or reject the transactions
happening between the users of the blockchain network. The decision of selection/rejection must get agreed upon by
the majority of validating users present in the network. It is only after the majority validation, the block with the
speciﬁc transactions gets added to the chain. The majority condition is deﬁned to take into account the presence of
malicious nodes. The blockchain networks operate on the assumption that the majority of nodes are honest (51% for
PoW, 2

3 for BFT based consensus).

2.1.1 BFT Consensus

BFT consensus [21] is referred to as the consensus protocol, which is resilient against network crash in the presence
of faulty and malicious nodes. For a BFT consensus protocol to work, at least 2
3 of the total number of nodes in the
given network must be honest, non-faulty, and agree on the same output to reach consensus. The BFT consensus
provides output with deterministic ﬁnality. BFT by structure demands multiple rounds of message communication
between all the nodes to reach a consensus. Due to the extensive communication requirement, a decentralized network
using BFT based consensus is not scalable. Some permissionless blockchain networks also implement Hybrid versions
of BFT, such as PoW-BFT for Byzcoin 2 and BFT based PoS for Algorand.

2.1.2 Proof of Work (PoW)

In PoW, a miner, to propose a block of transactions solves a mathematical problem to identify a suitable random
value known as the nonce. Once a user identiﬁes the nonce for its proposed block, it transmits the proposed block
information to every other node in the network for veriﬁcation and subsequently validation. When the proposed
block gets validated by the majority of the network participants, it gets added to the blockchain. The creator of
the proposed block is credited with a reward. The only known way to do mining is guessing the suitable nonce
value through the brute force method. It provides a fair chance in proportion with computing resources for every
participating node to add the new block into blockchain successfully.

Since its conception, the Bitcoin blockchain network has expanded considerably in terms of both network par-
ticipants and transactions volume. However, it has some drawbacks, such as the high requirement of computational
power and energy resources for mining. Also, except for the work of participants successful in forming the block,
the rest of the mining work is complete wastage as it does not generates any useful output or utility. At present,
Bitcoin blockchain network is no longer decentralized due to the domination of mining pools and specialized mining
equipment. All the factors mentioned above prompted the research to ﬁnd resource and energy-eﬃcient consensus
protocols.

2.1.3 Proof of Stake (PoS)

In PoS consensus protocol, the probability of getting credited with the block formation is proportional to the amount
of cryptocurrency staked for the consensus procedure. PoS is resource-eﬃcient in comparison to PoW due to low
computational requirements. The biggest proponent of PoS is the Ethereum blockchain, which is transitioning from

2https://actu.epfl.ch/news/byzcoin-an-innovative-solution/

3

its original PoW based consensus. However, PoS has shortcomings speciﬁc to the stake-based methodology. The
most signiﬁcant limitation is its favor to the highest stakeholders. The users with high stakes in the network can
propose multiple blocks, also referred to as the “nothing-at-stake” problem.

There are diﬀerent variants of PoS, such as hybrid PoW/PoS, Delegated Proof of Stake (DPoS), and committee-
based PoS. Table 1 lists the advantages and limitations associated with such methods. The hybrid version of PoS/PoW
works by adjusting a user’s PoW threshold using its cryptocurrency stake in the network. In DPoS, the nodes not
having enough amount of cryptocurrency can participate in the validation process by taking part in the selection
of committees amongst the aspiring committee groups.
In committee-based PoS, the block validating committee
for upcoming consensus rounds is selected using a pseudo-random number generator. The output of the generator
depends on the stakes of the nodes. Each selected committee has a leader who proposes the block. The proposed
block has to be validated by the majority of remaining members of the same committee. However, in committee-based
PoS, a malicious node can carry out denial of service (DoS) attacks on the committee members and leaders to disrupt
the network. Therefore, it is imperative that the honest nodes possess more than 50% of cryptocurrency (66% in
case of BFT-PoS consensus methods).

In the aforementioned consensus methods, the block ﬁnality is probabilistic. The transactions in a block get
conﬁrmed after a suﬃcient number of new blocks get added after it into the chain. A combination of PoS with
byzantine fault-tolerant (BFT) consensus is used like in Algorand [12] to make block ﬁnality deterministic, i.e.,
transactions ﬁnalized as soon as the block gets added. In BFT based PoS, block proposing is done based on the users’
stake while the rest of the procedure is followed through BFT based communication.

2.1.4 Other Consensus Methodologies

There are other consensus algorithms that have been used in several other permissionless blockchains to remove the
disadvantages posed by PoW and PoS. For example, Proof of Retrievability (PoR) [33] consensus algorithm. It is
also referred to as Proof of Space. Instead of computational resources requirements like PoW, here, a user’s chances
of block formation are in proportion with the amount of local space available committed to the network as stake.
It is used in Permacoin cryptocurrency blockchain [42]. A consensus protocol called Ripple [50] is used in XRP
cryptocurrency. However, in Ripple, the validating nodes and client nodes are predeﬁned. Each validator has a list of
trusted validators known as unique node list (UNL). The validating votes are collected for each transaction from the
UNL peers before inducting them into the block. Further, at least 80% yes votes are required for the transactions to
go through validation.

Apart from the aforementioned consensus protocols, there is a separate class of consensus protocols for blockchains
where the ledger is modeled as a directed acyclic graph (DAG). These blockchains either have blocks as vertices in the
DAG or have transactions as vertices in the DAG. In block-based DAG, each block is hash linked to multiple parent
blocks instead of just a single one as in the case of traditional blockchains such as Bitcoin and Ethereum. The selection
of parent blocks for the same is a signiﬁcant issue for every new block. Unlike serially linked blockchains, multiple
blocks get added at diﬀerent points, and therefore, the problem of conﬂicting transactions may arise. There are two
consensus protocols proposed based on block-based DAG ledger, PHANTOM [54] and SPECTRE [53]. Both follow
PoW based block proposal and validation. The transaction-based DAG blockchain is adopted through its consensus
protocol Tangle [48]. The tangle protocol is used by IOTA, a cryptocurrency-based distributed ledger designed for IoT
devices. In IOTA, a node can add a new transaction after verifying at least two existing transactions and attaching
its transaction to these two. The attachment is made by including the hash values of the selected transactions for
validation and solving the PoW puzzle to broadcast along with the transaction. Since cryptocurrency is involved,
the malicious entities can carry out feature-based exploitation of IOTA. The IOTA tangle provides protection against
Denial of service and spam attacks, but not against social engineering based attacks.

In this subsection, we discussed the diﬀerent blockchain consensus methodologies which are widely adopted in
practice. Each of these methods has their own set of strengths and shortcomings. A brief overview of the same
is given in Table 1. One major shortcoming that engulfs all the blockchain consensus algorithms is the limitation
in dealing with the malicious users that exploit the features (decentralization and pseudonymity) of the blockchain
technology. Among the cryptocurrency-based permissionless blockchains, no provision exists to deal with the users
doing transactions attached to criminal activities except Ripple. The Ripple blockchain has worked towards restricting
money laundering on its network [19].

2.2 Exploits that are prevalent in cryptocurrency-based blockchain

Two major categories cause the threats to the credibility of a blockchain network; exploitation of vulnerabilities
present and exploitation of blockchain features. The attackers exploit the vulnerabilities present to disrupt the
functioning of blockchain network [40]. The presence of vulnerabilities prompts the attacks such as 51% attacks,
Sybil attacks, double spending, accessing the user’s private keys, and exposing user identities [16]. These attacks

4

Table 1: Permissionless Blockchain Consensus Protocols.

Consensus Protocol

Advantages

Limitations

PoW
(Nakamoto) [43]

PoW (GHOST) [8]

Hybrid PoW-BFT [35]

Chain-based
PoS [55]
Committee-based
PoS [17]

BFT-based PoS [12]

Delegated PoS [37]

Proof of
Retrievability [33]
Ripple consensus
protocol [50]
Tangle [52]

Tampering resistant
No double spending
50% fault tolerance
Orphaned Blocks
included and rewarded
Stabilized consensus

Less resource wastage

High computational
resource requirement
High energy demand
High resource
requirement
Higher communication
overhead
Nothing-at-stake problem
Wealth Centralization
Scalability for
large committees,
Targeted attacks
on committee members
66% honest majority
requirement
Collusion of
malicious delegates
Malicious users
with large storage
80% voting threshold
High centralization
Conﬂicting transactions

Pseudo-random selection,
Orderly block generation,
Predeﬁned consensus
time period
Deterministic ﬁnality
Fair reward distribution
Block reward option
for non-validators
Less computational
wastage
Better performance
High level of trust
Individual transactions
direct addition, Coordinator Lot of indirect conﬁrmations
checking transactions
Provision for less storage

required, Coordinator compromises with
decentralization in blockchain trilemma

Blockchain

Bitcoin

Protection against
social engineering
attacks
None

Ethereum

None

Byzcoin

None

Peercoin

None

Ourosboros, None
Ouroboro
praos

Algorand
Tendermint
Cosmos

None

None

Permacoin

None

XRP

Partial

IOTA

None

pose harm to the network credibility by causing damage to the users such as reversal of transactions, invalidation
of transactions, and user account tampering. There are a number of measures applied to prevent such attacks [24].
These measures include actions such as the release of timely patches by the developer community to mitigate the
threats to the network and testing applications enabling transactions using various tools [3].

Another category of threat is the threat to the blockchain ecosystem due to social engineering. The malicious
entities exploit the permissionless blockchain features such as decentralization, pseudonymity, and no jurisdiction to
carry out activities such as money laundering, gambling, phishing, and ransomware attacks. The two most prominent
illicit activities are ransomware transactions [36] and money laundering [22]. A ransomware transaction is initiated
by the victim on-demand to decrypt the ﬁles on his system that an attacker encrypted. Some ransomware used by
attackers include Wannacry [13] and CTB-Locker [59]. Note that ransomware is not a direct threat to the functioning
of blockchain networks. However, blockchain unwittingly aids the cyber-criminal to carry out the malicious activity
of extortion by providing pseudonymity. Due to the features of blockchain, it is relatively diﬃcult for the LEAs to
arrest criminals if they are outside their jurisdiction. Also, it is not easy to link blockchain users to their real-world
identities without applying Know Your Customer (KYC) procedure at some cryptocurrency exchange. In money
laundering, criminals sometimes perform mixing or transfer cryptocurrency having large money trails [39]. Apart
from these, illegal betting or gambling [15] is also prevalent in blockchains.

Besides above mentioned illicit activities, Silk Road (now defunct) [14] was an online marketplace that exploited
cryptocurrency functionalities. Within a short span of time after its creation, the silk road became a popular hub
for payments for drugs trading, buying selling stolen and smuggled goods, and even contract killing. The case of the
silk road was in a major way responsible for linking Bitcoin as a facilitator for criminal activities among the general
populace. In the case of the silk road marketplace, the USA government successfully shut down the website as its
founder was an American citizen himself. However, this has not prevented the opening of similar other services.
Therefore, the identiﬁcation of the users carrying out illicit activities is not enough. There is a need to implement
additional functionality within the blockchain to prevent such users from exploiting blockchain functionalities.

3 Related Work

Blockchain by its structure does not diﬀerentiate between an honest and an illicit user. Therefore, the response
to restrict illicit activities and the associated users is generally done after analyzing transaction data. A number
of researchers have applied diﬀerent ML techniques on the permissionless blockchain transaction data. The feature

5

selection, learning, and analysis process is done oﬀ the chain after extracting the data from the blockchain.

3.1 Machine learning on transaction data

Several approaches use ML methods over cryptocurrency transaction data to detect illicit entities in cryptocurrency-
based blockchains. In [27] and [61], the authors apply supervised ML algorithms on the Bitcoin transaction data to
identify the addresses linked to illicit activities such as gambling, ransomware, and illegal online marketplace. They
obtain the categorized data about the illicit as well as benign activities from Chainalysis. For the data received
but kept in the unidentiﬁed category, both apply diﬀerent supervised ML methods, out of which gradient boosting
provides the most accurate results. The features used are derived from the transaction date, amount, category of
either party (sender/receiver) if deﬁned, and transactions done with either of the predeﬁned categories.

In [45] and [46], the authors used the K-Means clustering algorithm for the detection of malicious users for
Bitcoin transaction data. Here, the the two Bitcoin transaction data generated graphs use the clustering technique.
One graph has user addresses as nodes, while the other has transactions as nodes. They train the algorithm using
features such as in/out degree, unique in/out degree, average in/out transaction value, user activity duration, and
user balance. The model is trained to detect potential anomalous users. The results provide detection of two out of
30 addresses in the test data.

In [41], the authors performed active learning on Bitcoin transaction data to detect money laundering. The authors
assumed to have limited ground truth about the transaction data. Active learning is applied to data clustered through
unsupervised learning. The results obtained have performance similar to that of the supervised ML model with fully
labeled data. The benchmark results in aforementioned case were obtained from [58]. In [58], the authors contributed
to the elliptic data set, claimed as the largest labeled Bitcoin transactions data set till their submission. For the
prediction of illicit transactions, the Random Forest method performed best among the used supervised ML models.
In [47], the authors proposed a system that uses ML to automate the signing process of transactions as well as
detection of anomaly transactions. If a transaction is detected as anomalous, the initiator of the transaction has to
sign a transaction manually. In [44], the authors proposed a supervised ML-based fraud detection methodology for
the transactions in the Ethereum blockchain. The features used in the method include average gas price, average
gas limit, number of transactions, the value of transactions, and unique incoming/outgoing transactions. Among
supervised ML algorithms, the authors found the Random Forest model to produce the best results. Besides these,
there have been several ML-based methodologies that use features extracted from underlying temporal graphs to
detect malicious accounts on Ethereum blockchain [4]. Here, the authors introduced the concept of bursty behavior
and change in the neighborhood as features. These new features are used in addition to the features already used
in other state-of-the-art methodologies. The combining of temporal graph properties and supervised ML lead to the
identiﬁcation of previously undetected suspicious user accounts. In [4], the authors also survey diﬀerent state-of-the-
art approaches used within this frame. Based on their analysis, they propose time-variant probability scores following
a sliding data window. Our reputation-based consensus method uses this feature for reputation values. A user’s illicit
behavior leads to its banishing from the consensus process for a predeﬁned period. It locks a malicious user’s account
for the same period and provides an opportunity to LEAs for u=initiating action. In [39], the authors detect illicit
activities such as gambling, phishing, and money laundering through the identiﬁcation of patterns in cyclic money
transfer. Besides research-based methodologies, several companies, such as Chainalysis [7] oﬀer services to the LEAs
by analyzing the transaction data of several cryptocurrency-based blockchains.

3.2 Decentralised reputation and trust models

The previous section presents ML-based techniques that are used to identify if any address is involved in illicit
activity. However, these techniques are usually oﬀ-chain and not integrated within the blockchain infrastructure.
Besides changing the consensus mechanism to incorporate a level of security (in the case of PoS, e.g., slashing), there
are several reputation and trust models proposed to limit exploitation of blockchain vulnerabilities and infrastructure.
In [34], the authors propose a trust model based blockchain for the miners operating in the mining pool. The
objective is to have a fair distribution of the reward in the pool and identiﬁcation of malicious miners. In another
work [26], the authors propose a trust model for sharding-based blockchain networks with an objective to prevent
malicious nodes from becoming shard leaders. The model computes opinion-based trust and by design works against
the illicit users attempting to disrupt the blockchain. The proposed model aggregates local neighborhood opinions
to compute trust values, which are often biased.
In addition, the computation of these values followed by their
propagation for decision-making process warrants additional network communication resources. It has a signiﬁcant
eﬀect on network performance.

Additionally, several methodologies integrate the user reputation in the blockchain consensus process with an aim
to prevent illicit activities in blockchains. In [1], the authors proposed a permissionless proof of reputation consensus
process. The entry for a user aspiring to join is based on a referral by an existing miner. Any new miner has to

6

provide user wallet identity to the present network of miners and the vetting process is essential for its admission into
the network. In [18], the authors proposed a reputation scheme in which randomly selected judges monitor the node
behavior and update the respective reputation score accordingly. Here the judge does not monitor the context or the
purpose of the transaction rather monitors the blockchain network proceedings. To limit illicit activities, here also, a
new user has to be attested by at least one existing miner. A separate transaction is generated and broadcasted for
this purpose. In [29], the authors propose a reputation-based blockchain system with sharding. The reputation, in this
case, is also associated with user (including validators) conduct (illicit conduct such as approving double-spending)
within the blockchain network. Additionally, the proposed system has double-chain architecture (separate chains
for transaction and reputation). The validator’s reputation is decided based on transactions it approves. The shard
leader ﬁnalizes the correctness of the transactions and subsequently the shard validators get their scores. In [20], the
authors propose a “semi-decentralized” Delegated Proof of Reputation (DPoR) consensus based on DPoS. In this
case, the user reputation score comprises of three factors; stake, personal resource utilization and transaction activity.
In [5], the authors proposed a feedback-based reputation system for blockchain networks. Their system works
by having a side-chain for the reputation values and having additional communication between the users to derive
In [51], the authors proposed a reputation mechanism for a sharded blockchain structure
normalized reputation.
with the objective to include only honest transactions. Here honest transactions refer to the ones that are not due
to exploitation of any vulnerabilities present in the blockchain. Also, the miners are predecided for each shard and
not randomly selected for each consensus round. The shard leaders are the users with the highest reputation score
in their respective shards. In [62], the authors proposed RepuCoin, a PoW backed reputation-based blockchain that
is resilient against 51% attack. The proposed structure has two types of blocks in the blockchain, keyblock for leader
selection and microblock for transaction recording. The miner reputation score is based on its behavior over whether
it commits transactions in accordance with the existing blockchain ledger. In [63], the authors proposed a Proof of
Reputation based method where a node’s reputation is based on its participation, stake, and transaction activity.
The reputation value is time-variant and computed through stake and total holding time. The top 20% of reputed
users have most of the power concentrated amongst themselves.

Table 2 summarizes diﬀerent reputation/trust models proposed for blockchain networks. However, the aforemen-
tioned reputation-based blockchain systems have some key drawbacks. Most of them require a separate side-chain
for functioning. The separate chain warrants the need for additional communication resources, which slowdowns
the network performance for a large blockchain. At the same time, some proposed systems assign jury members
to identify and record the behavior of the miner/validator. The functioning of jury again incurs communication
resources. Also, some of the proposed systems require new users to be vetted by the existing users. Thus, making
the chain pseudo-centralized, loss of anonymity, and favoritism. Finally, the state-of-the-art methods mainly focus on
assigning a reputation score to the user based on the behavior that is limited to disrupting the blockchain network’s
functioning. They provide no comments on how we can reduce activities such as gambling or ransomware. This
motivates us to answer the question the way in which the set of reputation values are used and integrated into the
blockchain network, to reduce the aforementioned activities.

In Algorand [12] the consensus process follows the steps of byzantine agreement while giving the nodes the chance
to participate in proportion to the stake they hold in the network. Algorand blockchain claims to solve the blockchain
trilemma of decentralization, security, and scalability [31]. It provides deterministic block ﬁnality, and in terms of
block ﬁnality time, it has quite signiﬁcant results among the permissionless blockchains [60]. The features pertaining
to the proposer/validator selection process and data encryption claim the Algorand blockchain to be most resilient
against the adversarial attacks on the network among the existing permissionless blockchains. However, it has no
inbuilt provision against the users engaged in illicit activities. Therefore, we incorporate and theoretically analyze
our method in the Algorand blockchain consensus protocol. As we proceed, we describe our proposed methodology
in detail.

4 Proposed reputation based restriction and exclusion methodol-

ogy on Algorand Blockchain

In this section, we describe the restricting methodology for the malicious user accounts in the Algorand blockchain.
Here, we refer malicious user accounts as the ones using cryptocurrency transactions for either criminal activities or
social engineering attacks. A user in a blockchain network can have multiple accounts with dedicated transaction
history. Since our proposed method is based on transaction history, we evaluate each account against its own
transaction history. For the sake of simplicity, we will henceforth refer to each user account as a separate user. We
formulate and analyze the strategy for responding to users carrying out illicit activities by honest users assigned as
validators. To formulate the reputation based restricting methodology, it is imperative to understand the consensus
protocol of the Algorand blockchain. For the readers not familiar with Algorand blockchain consensus protocol, a

7

Table 2: Reputation/Trust Model for Permissionless Cryptocurrency Blockchain Networks

Features

Ref
[34] Peercoin blockchain, Trust model

for miners, Protection against
block withholding and DDoS

[26] Trust model for sharded blockchains,

[1]

Against illicit users, Shard selection
based on reputation values
Permissionless proof of reputation,
Prevention against attacks on blockchain,
Attacker detection using domain correlation,
Identity theft protection
Judges for monitoring nodes, Judges selected
through pseudo random process
Rotation based authorised miners list
[29] Reputation based sharded blockchain,

[18]

Double chain architecture, Validator
reputation by approved transactions,
Each shard has similar total reputation score

[20] Delegated Proof of Reputation,

[5]

User reputation by three factors; stake,
transaction & personal resource utilization
Feedback based reputation, Reputation of
feedback providing users also considered,
Temporal scoping of reputation score

Limitations/Drawbacks
Only relevant for informal group of miners, Extra
data in transaction for complaints and RepValue,
Discourages individual participation by pool
friendly model
Chances of bias in opinion, Additional
communication resources for opinion values, If
reputation changes, shard restructuring required
Peer recommendation compulsory for joining,
Compulsory to provide wallet identity,
User registration dependent on 3rd-party
generated lists, Security deposit required
Peer recommendation compulsory for joining,
User reputation score dependent on respective
judges, Separate judges’ voting transactions
Additional communication due to sidechain,
Final decision by shard leader,
Separate consensus protocols for both chains,
Reputation score based on value of transaction
Semi-decentralized protocol,
Long time holding of stake required,
Separate transaction analysis required
Sidechain required, Extra communication
for reputation calculation, Leader identity
known before start of consensus process

[51] Reputation mechanism for sharded blockchain Miner nodes predecided,

Objective to include honest transactions
Users with highest scores are shard leaders

[62] RepuCoin, conditionally Resilient

against 51% attacks, Two types of blocks
leader selection & transaction
User votes dependent on reputation
[63] Proof of Reputation consensus, Reputation
value is time variant, Participation Reward
proportional to reputation

“Honest” does not include behavioural aspects,
User entry by shard manager’s approval
PoW based blockchain,
Extra data on blockchain,
Reputation dependent on transactions mined

Dependent on stake holding time,
Top 20% have most power,
Additional blocks for reputation values

8

Table 3: List of Notations.

Deﬁnition
Set of user accounts in the Algorand blockchain Network
Number of user accounts in Algorand blockchain network
ith user account in the Algorand blockchain network
Set of users selected to propose block in step (r, 1)
Set of users selected as validators for step (r, s) (s > 1)
Number of user accounts selected to propose block in step (r, 1)
Number of user accounts selected as validators for step (r, s) (s > 1)
Stake (Algos) of user account ni in blockchain after ﬁnalization of (r − 1)th block
Total Algos available for consensus participation in round r − 1 in algorand
number of validator votes for step (r, s) in rth consensus round where s > 1
Seed value created in rth consensus round, used as input for VRF in (r + 1)th consensus round.
Hash value output of a string X

Notation
N
|N |
ni
Vr,1
Vr,s
|Vr,1|
|Vr,s|
Sr−1
ni
Sr−1
vr,s
Qr
H(X)
SIGi(H(X)) Value H(X) signed using private key of ni
skr,s
i
pkr,s
i
P AY r
i
Φ
Br
i
Br
nlr
φr
hashlen
(r, s)
Head(Br)
TH
σr,s
i
mr,s
i
Θr,1
i
Λr,s
j
P r
i,v
Υr,i
v
vr,s
i
sLi
pi,j
px
th
Lj,i
r (s + 1)
V i
r(s + 1)

Ephemeral private key generated by ni for participation in step (r, s) of rth consensus round
Ephemeral public key generated by ni for participation in step (r, s) of rth consensus round
Set of transactions proposed by proposer ni for rth consensus round
Null transaction data
Block proposed by ni for rth consensus round
Block ﬁnalised after rth consensus round
User credited with successful proposing of Br
Empty block representation for rth consensus round
Number of bits in hash value output H(X)
Step number s for rth consensus round
Header of ﬁnalised rth block
Threshold number of stake units for output ﬁnalisation in each consensus step (> 66%)
User credential generated by ni to claim participation in rth consensus round step (r, s)
Message propagated by ni after participation in step (r, s)
Value obtained after dividing decimal value of ni’s credential for claim as a block proposer by 2hashlen
Value obtained after dividing decimal value of σr,s
Probability of ni getting v votes as validator for any step (r, s) with s > 1
Range for ni’s pr
Vote propagated for step (r, s) by ni as validator for s > 1
Reputation score list generated by ni for all the users
Reputation score of nj computed by ni
Threshold reputation value by nx for other users to separate malicious and benign users
Loss in votes for (r, s) validator ni as computed by (r, s + 1) validator nj.
Eﬀective validator votes from (r, s) computed by (r, s + 1) validator ni.

i,v value to get v number of votes

in step (r, s)(s > 1) by 2hashlen

i

9

brief explanation for the same is given in Appendix A. We follow the notation convention of Algorand [12] with our
modiﬁcations wherever required. The list of notations is summarized in Table 3.

We start with the assumption that the consensus round is taking place for the rth block. In the ﬁrst step, (r, 1),
for consensus round of rth block, (Br
m) is proposed by a node nm ∈ N where N is set of all the users (accounts) in
Algorand. The node nm is selected as the proposer if Θr,1
represents normalized
decimal value of the credentials of nx for 1st step. More details about the proposal selection used by Algorand’s
consensus process is explained in Appendix A. Note that, for nx ∈ N , in our case x represents the identity of nx in
N . Therefore, henceforth we use both nx ∈ N and x ∈ N to represent the users, based on the appropriateness of
either at the required place. In our manuscript, both represent the same status.

x ∀x, m ∈ N, x (cid:54)= m. Here Θr,1
x

m < Θr,1

Once the proposed blocks are broadcast into the network, the step (r, 2) of the consensus process starts. For
m as the valid

steps (r, 2) and onward, the users selected as validators have two options. One is to accept the block Br
addition to the blockchain, while the other option is to vote for an empty block.

Our proposed restricting methodology ﬁrst identiﬁes whether a proposer or a validator is benign or malicious.
There are a number of quantiﬁed user assessment techniques such as opinion-based or applying ML algorithms on
previous blockchain transaction data described in section 3. Our focus is to use the quantiﬁed values in a way so
as to prevent illicit activities’ transactions from getting added into the blockchain. Our methodology is based on
a set of time-variant reputation values computed by each node, based on an agreed-upon ML model for computing
the same. The reputation index is also termed as reputation score list, given as sLx = [px,1px,2, · · · , px,|N |] stored
by nx ∈ N . Here px,y ∈ [0, 1] is the reputation value assigned by nx to ny, while nx, ny ∈ N . As an example of
computation methodology for such values, in [4], the authors propose time-variant reputation scores (related to a
user being malicious/benign). Here, their approach extract features from the transactions done by each user for each
day and clusters the users. If a user shows behavioral similarity with known malicious users, the user gets tagged as
a suspect. Over time the proposed model computes the probability of being malicious for the considered duration.
The outcome of the model is same as the reputation score for our case. Note that lower the value of pj,i, the more
suspicious/malicious ni is as perceived by nj. In our methodology, every user in the network is equipped with its own
module to compute such reputation scores for all the users. Our method does not put any additional burden to the
blockchain network communication because the input for the model is the transactions that are already replicated at
each node. Such computation can be done separately from the blockchain consensus process.

With respect to Algorand blockchain, we assume that the users compute the required values based on previous
transaction data before the start of step (r, 1). Note that the reputation scores for at least t time instances remain
the same for our current approach. During these t time instances, there can be many consensus rounds. During (r, 1),
suppose a proposer nm proposes a block Br
m with best credentials. For step (r, 1), if nm is a benign proposer, it will
avoid the transactions from the users having the low reputation values in the list sLm. In such a case, the proposed
block Br
m will get added into the blockchain. For the case when nm is malicious, the response of subsequent steps
((r, 2) and beyond) validators is discussed below.

In step (r, 2), if the block proposer, as well as the validator, are benign, the validator accepts Br

m and votes in its
favor. If the block proposer is benign while the validator is malicious, the validator might vote for an empty block or
Br
m depending on its personal objectives. For the scenario where the block proposer is malicious while the validator
is benign, the validator will vote for an empty block if the validator is aware that the proposer is malicious. For the
case where both the proposer and the validator are malicious, the validator decision can go either way, depending
upon its personal objectives. Note that, when a particular validator is malicious, its votes will be reduced by the
other validators in the subsequent validation steps.

More formally, in step (r, 2) for rth block consensus round, suppose a validator has the identity nr,2

where Vr,s is the set of users selected as validators in step (r, s) for s > 1 and s ∈ N. Let nr,2
with its reputation scores list given as sLj = [pj,1pj,2 · · · pj,|N |].
ni ∈ Vr,1 (a block proposer) after step (r, 1) and evaluates the normalised decimal value Θr,1
σr,1
i
rth block if Θr,1
(r,1).

x , ∀x ∈ Vr,2 ⊂ N ,
x = nj, ∀nj ∈ Vr,2 ⊂ N
i } from
. Note that here
i
and sLj, nj selects ni as the lead block proposer for
pj,x for ∀nx ∈ Vr,1 ⊂ N with ni (cid:54)= nx. Here Vr,1 is set of users selected as block proposer in step

is the credential of ni as a proposer. Using the values Θr,1

In step (r, 2) nj receives {Head(Br

pj,i < Θr,1

i ), σr,1

of σr,1
i

x

i

i

As we mentioned earlier, our focus is on the malicious behaviour that does not attack the network directly but
gradually erodes its credibility by carrying out illegal activities through malicious transactions. By use of the above
methodology, the honest validators can replace a malicious proposer with an honest one without the need to push
an empty block. Suppose a user nm has exhibited malicious behavior previously by engaging in illegal activities
using blockchain network transactions. For step (r, 1), nm sends block proposal with P AY r
m consisting of suspicious
transactions. In step (r, 2) the selected validator nj, which considers nm as malicious, evaluates the proposals received
and the result of the evaluation is Θr,1
x with ∀x ∈ N and m (cid:54)= x. In such a case, nj has to either accept the
proposal of nm as the latter has not broken any consensus rules or vote for an empty block. The other validators
in (r, 2) may or may not share the same viewpoint about nj on nm. To resolve this potential conﬂict of views, a

m < Θr,1

10

Figure 1: Algorand Consensus with Reputation Score List

standard quantiﬁed version of viewpoint applied into consensus methodology can achieve the objective of keeping
malicious activities at bay.

Figure 1 summarizes our modiﬁcations to the Algorand consensus process (cf. Appendix A) and shows the parts
where the reputation score list sLx∀x ∈ N is applied. The reputation score list is used by the validators evaluating
the block proposal as well as the ones evaluating previous validation step votes. We evaluate the impact due to our
applied changes on the original Algorand consensus protocol in the form of theoretical results in the next section.

5 Results

With the provision of reputation values list sLj for nj, a malicious proposer can be replaced by an honest proposer
if there is suﬃcient diﬀerence in their probabilities as shown below. Suppose there are two proposers ni and nm in
step (r, 1). The user ni is termed as honest while nm is termed as malicious by other nodes. This means for a third
node nj, pj,i > pj,m. If Θr,1
, then the block proposed by nm will have preference over the one proposed by ni.
The inequality condition can be written as in equation 1 with the condition ∀δx,y ∈ (cid:60)+, where x (cid:54)= y and x, y ∈ N .

m < Θr,1

i

Θr,1

m + δm,i = Θr,1

i

(1)

A validator nj in step (r, 2) can vote for the proposal of ni instead of nm if the condition in equation 2 satisﬁes for
pj,i, pj,m ∈ sLj.

Rearranging equation 2 and from equation 1, we get the expression as deﬁned in equation 3.

Θr,1
i
pj,i <

Θr,1
m
pj,m

pj,i >

Θr,1
i
i − δm,i

Θr,1

pj,m

pj,i >

1
1 − δm,i
Θr,1
i

pj,m

i.e., if nj perceives ni to be more honest than nm by at least a factor of

1−

block of ni (honest proposer) in step (r, 2) instead of voting for either an empty block or the block of nm (malicious
proposer).

The derivation of Cm,i (deﬁned as compensation factor) leads us to the formation of Lemma 5.1.

11

= Cm,i then nj will vote for the

1
δm,i
r,1
Θ
i

(2)

(3)

(4)

Lemma 5.1. In the Algorand blockchain network with the provision of reputation values list, if an honest user and a
malicious user are competing to propose their block, the validator nj ∈ N having reputation values list sLj will vote
for the honest user’s block if their perceived reputation of honest user is greater than that of the malicious user by
atleast the multiple of compensation factor between the honest and malicious user.

Corollary 1. In step (r, 1), the proposer ni is selected at step (r, 2) by the validator nj, if the condition pj,i ∈
(Cx,ipj,x, 1], ∀x ∈ Vr,1 ⊂ N is satisﬁed.

Since there are multiple rounds of validation, it is imperative to consider the reputation of validators as well. For
steps beyond (r, 2), validators take into account the reputation score of the user selected as a previous step validator
while considering its vote.

To understand the impact of reputation score on the validator votes, we analyze the interactions between the
validators of two consecutive validation steps. Here, step (r, s + 1) validators Vr,s+1, validate the message and count
the votes for validators Vr,s in step (r, s).

Let nj ∈ Vr,s and nk ∈ Vr,s+1 where nj, nk ∈ N . Here, nk computes pk,j × Λr,s
decimal value of the credentials of nj obtained from the voting message from step (r, s).

j

, where Λr,s

j

is a normalized

j

Let Λr,s

. By deﬁnition, Λr,s

represents the range for Λr,s

k,j is the perceived normalised decimal value of σr,s

k,j = pk,j × Λr,s
for s > 1 as per sLk of
nk. In Algorand consensus, Lr,j
in order for nj to have v number of votes as a validator
v
j
in step (r, s) (c.f. Appendix A). With the use of sLk, nk computes the number of votes assigned to nj based on
k,j ≤ Λr,s
the range (deﬁned by Algorand consensus protocol) in which Λr,s
.
Suppose the perceived value Λr,s
k,v is the range perceived by nk for nj based on pk,j ∈ sLk. Here
Υr,j
j,v is probability of nj getting selected and having v number of votes in the
validator group in step (r, s).

k,j ∈ Υr,j
k,v is given in the equation 5 where P r

k,j is present. Since pk,j ∈ [0, 1], we get Λr,s

k,v where Υr,j

j

j

Υr,j

k,v =

(cid:34) v

(cid:88)

v(cid:48)=0

j,v(cid:48) pk,j,
P r

(cid:33)

j,v(cid:48) pk,j
P r

v+1
(cid:88)

v(cid:48)=0

(5)

Note that the range Υr,j
reduces the validator votes from v to w for the step (r, s). The range for Υr,j
as shown in the equation 6.

k,v either reduces the votes or does not change the number of validator votes. Supposes it
w without applying sLk can be written

Υr,j

w =

(cid:34) w
(cid:88)

v(cid:48)=0

P r

j,v(cid:48) ,

w+1
(cid:88)

v(cid:48)=0

P r

j,v(cid:48)

(cid:33)

(6)

With sLk, there is a diﬀerence between the actual votes and the eﬀective votes. The loss of votes for a validator
nj is directly proportional to the loss in the normalised value of its credentials from step (r, s). Assume Υr,j
w,min =
(cid:80)w

v(cid:48)=0 P r

j,v(cid:48) and Υr,j

w,max = (cid:80)w+1

v(cid:48)=0 P r

j,v(cid:48) . Thus, we have equation 7.

(cid:104)

Υr,j

w =

Υr,j

w,min, Υr,j

w,max

(cid:17)

(7)

The vote attenuation (Lk,j

r (s + 1)) in the above case is v − w. Along the similar lines, the attenuation in the value

of validator nj’s VRF output for step (r, s) in step (r, s + 1) can be expressed as the equation 8.

Lk,j

r (s + 1) = Λr,s

j − Λr,s

k,j = Λr,s

j (1 − pk,j)

(8)

The total attenuation from step (r, s) counted by nk in step (r, s + 1) will be the sum of vote attenuation for all the
(r, s) validators and are expressed as Lk

r (s + 1) in equation 9.

Lk

r (s + 1) =

(cid:88)

Lk,x
r

(s + 1) where Vr,s ⊂ N

x∈Vr,s

(9)

Similarly, the total attenuation in the VRF output value as perceived by nk based on sLk is being given in the
equation 10.

Lk

r (s + 1) =

Λr,s

x (1 − pk,x) where Vr,s ⊂ N

(10)

(cid:88)

x∈Vr,s
The loss in the votes is directly proportional to the loss in VRF output value. Since the values Λr,s
x with ∀x ∈ Vr,s ⊂ N
are generated by the validators in step (r, s), the step (r, s + 1) validator nk has no role in it. From the perspective
of nk in step (r, s + 1), the loss in the votes is directly proportional to the perceived reputation values from the list
sLk.

In terms of reputation score, we have equation 11.

Lk,x
r

(s + 1) = κr,s

x (1 − pk,x)

(11)

12

Here, κr,s
x
Vr,s+1 has no role in its computation. Note that from above, we have κr,s
votes from step (r, s) perceived by nk are given by equation 12.

is computed from the credential value associated with validator nx from step (r, s). The validator nk ∈
x = w. Overall, the eﬀective

x = v and pk,xκr,s

V k

r (s + 1) =

(cid:88)

x∈Vr,s

pk,xκr,s
x

Vr,s ⊂ N

(12)

Let the total number of validator votes in step (r, s) be vr,s for s > 1. Note that vr,s = (cid:80)
in the votes as perceived by nk for step (r, s) validators is being given in equation 13.

x∈Vr,s

κr,s

x . The attenuation

Lk

r (s + 1) = vr,s −

(cid:88)

pk,xκr,s
x

x∈Vr,s

(13)

To carry out the validation process for step (r, s), it is imperative to have suﬃcient number of validators, thereby

leading to the suﬃcient number of validator votes.

For the set of validators Vr,s+1 ⊂ N in step (r, s + 1), the expected vote attenuation in step (r, s + 1) from (r, s)

validators is given by the equation 14.

E(Lr(s + 1)) = vr,s −

(cid:80)

y∈Vr,s+1

(cid:80)

x∈Vr,s

py,xκr,s
x

|Vr,s+1|

(14)

To compensate for the votes lost, the number of validators for the next round (r + 1) could be increased by the factor
given in equation 14 for subsequent block rounds. The compensation for the lost votes is applied in the subsequent
rounds as given in equation 15.

vr+1,s = vr,s + E(Lr(s + 1))

(15)

The use of reputation value model not only changes the eﬀective votes, but also ampliﬁes the ratio of honest to
malicious votes. Originally, the Algorand blockchain operates with an assumption that there are at least 2
3 honest
proposers for step (r, 1) and validators for subsequent steps in each round. Hence, there are twice as many Algos
(cryptocurrency of Algorand) from honest users at stake than that with malicious users for each step (r, s) of round
r of block formation. With the addition of sLk, the eﬀective number of votes changes as shown previously.

We now show the eﬀective honest and malicious votes from the perspective of validator nk ∈ Vr,s+1 for votes of
validators in step (r, s). The segregation of honest and malicious (r, s) validators within Vr,s is done by nk ∈ Vr,s+1
with an assumption that their behaviour is reﬂected in sLk. The malicious and honest users are separated by selecting
a threshold value pk
th for remaining validators. The total eﬀective
r (s + 1) = V k,H
votes are given as V k
(s + 1) where
V k,H
(s + 1) and V k,M
(s + 1) are the eﬀective votes of honest and malicious validators, respectively. These quantities
r
are formally deﬁned by equations 16 and 17, respectively.

th for 2vr,s
r (s + 1) in equation 12. Based on pk

and pk,x ≤ pk
th and sLk, V k

th ∈ [0, 1] such that pk,x > pk

(s + 1) + V k,M

3

r

r

r

V k,H
r

(s + 1) =

V k,M
r

(s + 1) =

(cid:88)

x∈V k,H

r,s

(cid:88)

x∈V k,M

r,s

pk,xκr,s

x where V k,H

r,s ⊂ Vr,s, pk,x > pk
th

pk,xκr,s

x where V k,M

r,s ⊂ Vr,s, pk,x ≤ pk
th

(16)

(17)

In the above equations, V k,H
V k,M
r,s
r,s + V k,M
V k,H

is the set of validators which are honest from the perspective of nk ∈ Vr,s+1. While
is the set of validators which are malicious from the perspective of nk ∈ Vr,s+1. Also, ∀nk ∈ Vr,s+1, we have
r,s = Vr,s. Similarly, we compute the loss in the validator votes in both categories as equations 18 and 19.

r,s

Lk,H
r

(s + 1) =

2vr,s
3

−

Lk,M
r

(s + 1) =

vr,s
3

−

x∈V k,M

r,s

(cid:88)

pk,xκr,s
x

x∈V k,H

r,s

(cid:88)

pk,xκr,s
x

(18)

(19)

From equations 11 and 13, we have (cid:80)
honest and malicious votes is given as equation 20.

x∈V k,H

r,s

x = 2vr,s
κr,s

3

and (cid:80)

x∈V k,M

r,s

x = vr,s
κr,s

3 . Hence, the relation between the

(cid:88)

κr,s
x = 2

(cid:88)

κr,s
x

x∈V k,H

r,s

x∈V k,M

r,s

(20)

Based on Algorand’s 2

3 honest nodes assumption and pk

th, we sort all the reputation scores.

13

Since the highest reputation value in a malicious validator set is less than the lowest reputation value of an honest
validator set, the loss in the votes for the malicous validator set will be more than the same in the honest validator
set. The relation between the losses can be derived using equations 18 and 19 as equation 21.

Lk,H
r

(s + 1) ≤ 2Lk,M

r

(s + 1)

(21)

Since the loss in votes is less in the case of honest validators set, the eﬀective number of votes will relatively increase
for the same against the malicious validator set. Therefore, the relation between the eﬀective votes of honest and
malicious validators for step (r, s) is given as equation 22.

(cid:88)

pk,xκr,s

x ≥ 2

(cid:88)

pk,xκr,s
x

x∈V k,H

r,s

x∈V k,M

r,s

(22)

Alternatively, the above relation is written as equation 23.

Let ∆Lk

r (s + 1) = 2Lk,M

V k,H
r
r
(s + 1). Here ∆Lk
r (s + 1) ≥ 0 is the parameter notifying the diﬀerence
in the loss of validator votes for honest and malicious set. From above, the increase in the eﬀective votes of honest
validators in step (r, s) with respect to that of the malicious validators from the perspective of validator nk ∈ Vr,s+1
is given in the equation 24.

(s + 1) ≥ 2V k,M

(s + 1) − Lk,H

(s + 1)

(23)

r

r

The ratio of honest to malicious validator votes is henceforth given by the equation 25.

V k,H
r

(s + 1) = 2V k,M

r

(s + 1) + ∆Lk

r (s + 1)

V k,H
r
V k,M
r

(s + 1)
(s + 1)

= 2 +

∆Lk
V k,M
r

r (s + 1)
(s + 1)

= 2 + ˆLk

r (s + 1)

(24)

(25)

Note that ∆Lk
V k,M
r

r (s+1)
(s+1)

is the relative diﬀerence in the loss of votes with respect to the malicious validator votes as

perceived by nk ∈ Vr,s+1. Let the aforementioned term be represented as ˆLk

r (s + 1).

The expression in the equation 25 leads us to the formation of Lemma 5.2.

Lemma 5.2. In the Algorand blockchain with the provision of reputation values list, the ratio of honest to malicious
validator votes of step (r, s) for the formation of rth block increases by the value ˆLk
r (s+1) above the originally assumed
factor of 2 as evaluated by a step (r, s + 1) validator nk ∈ Vr,s+1 using its reputation values list.

On average (expected value) of relative diﬀerence in the loss of votes with respect to the malicious validator votes

as perceived in step s + 1 is given by E( ˆLr(s + 1)) =

This led us to formulate corollary 2 from the Lemma 5.2.

(cid:80)

x∈Vr,s+1

ˆLx

r (s+1)

.

|Vr,s+1|

Corollary 2. In the Algorand blockchain with the provision of reputation values list, the expected ratio of honest to
malicious validator votes of step (r, s) for the formation of rth block increases by the value E( ˆLr(s + 1)) above the
originally assumed factor of 2 as perceived in step (r, s + 1) for s > 1.

The improvement in the ratio of honest to total validator votes is beneﬁcial in the case when the original ratio
3 . As given in corollary 2, the Algorand blockchain can tolerate a drop of E( ˆLr(s + 1)) from the ratio
falls below 2
of 2 for honest to malicious votes. For such an amount of drop, it can be compensated and reached to the required
honest majority.

Again, the Algorand blockchain assumes that there are 2

3 honest users/cryptocurrency-units selected in each step
of the consensus round, including block proposal and validation. Hence, while proposing the block in step (r, 1),
the probability of a malicious proposer getting selected as the highest priority proposer is 1
3 . One way in which
a malicious proposer can harm the blockchain is by proposing a block consisting of transactions associated with
malicious activities.

Suppose in step (r, 2), a set of validators nj ∈ Vr,2 ⊂ N are selected to asses step (r, 1) block proposals from
ni ∈ Vr,1 ⊂ N . In step (r, 2), if an honest validator receives this proposed block from a malicious proposer (ni) with
lowest Θr,1
, he has two choices, either vote for the same or to propagate the vote for an empty block. In the absence
of a deﬁned mechanism to identify the malicious proposer, an honest validator may well be unaware and go with the
ﬁrst choice out of the aforementioned ones. In case the validator is aware, it will push for the empty block as there
is no mechanism deﬁned to identify the second-best credential among the block proposers.

i

Let the probability that nj votes for empty block (φr) be βr

j,φ ∈ [0, 1], while the same for voting ni’s block
j,i ∈ [0, 1]. We now discuss the scenarios with validators when the block proposer is malevolent and

proposal be βr
pushing malicious transactions without and with reputation values list.

14

1. nj ∈ Vr,2 is honest and aware that ni ∈ Vr,1 is malicious:

j,φ + βr

j,i with βr
j,k = 0.

j,φ >> βr
k , we have βr

j,i = 1. Note that, for the block by an

In the case without reputation values list, βr
honest proposer nk ∈ Vr,1 where Θr,1
i < Θr,1
For the case where nj has the reputation values list sLj, nj will have the value pj,i related to ni. To derive the
condition for nj not selecting empty block, we introduce the concept of pseudo-sublists. A pseudo-sublist, for
a step (r, 2) validator nj is sLr,2
3 honest proposers and 1
In line with the Algorand’s assumption of 2
th is chosen so as
to divide sLr,2
th ≥ pj,i derived
r,1 ⊂ Vr,1 and nk ∈ V H
into the same. For ni ∈ V M
from equations 16 and 17. Now, the validator nj will not vote for an empty block if the most qualiﬁed block
proposer is honest. From Lemma 5.1, we know that block proposal of nk will be chosen over that of ni by nj
j,i = 0 with absolute surety is pj,k > Ci,kpj
if pj,k > Ci,kpj,i. The condition to obtain βr
j,φ = 0 and βr
th where
ni is a malicious proposer as perceived by nj, i.e., pj,i ≤ pj
th with the highest proposer credentials (least Θr,1
value). The aforementioned outcome can be summarised in the Corollary 3.

3 malicious proposers, pj
r,1 ⊂ Vr,1, we have pj,k > pj

j ⊂ sLj and consists pj,x where x ∈ Vr,1.

j

Corollary 3. In the Algorand blockchain, an honest and aware validator, when provided with a reputation
values list, will reject an empty block with absolute surety, if there is an honest proposer present with it’s
perceived reputation value greater than the product of threshold reputation value and relative compensation
factor relative to malicious proposer with highest credentials.

2. nj is honest but unaware that ni is malicious and thinks ni is honest:

j,φ << βr

Without the reputation values list, if the validator nj is honest but unaware of the ni being malicious, it
will most likely vote for the ni’s block proposal. However, for an honest but unaware validator nj without
reputation values list, βr
j,i = 1. Also, for a proposed block of honest proposer nk ∈ v1
i < Θr,1
with Θr,1
With the reputation values list sLj, the behavior of nj will be the same as the case of being honest and
aware. However, the role of the reputation values list now is to prevent nj majorly from voting for a malicious
proposer’s block. The condition to obtain βr
j,i = 0 will be same as in previous case and can be
summarised in Corollary 4.

k , we have βr

j,φ = 0 and βr

j,i with βr

j,φ + βr

j,k = 0.

Corollary 4. In the Algorand blockchain, an honest but unaware validator, when provided with a reputation
values list, will reject a malicious proposer’s block with absolute surety, if there is an honest proposer present with
it’s perceived reputation value greater than the product of threshold reputation value and relative compensation
factor relative to malicious proposer with highest credentials.

In this section, we discussed the cases where the validator is honest, which is equivalent to the assumption that
they operate according to the blockchain consensus methodology. For the cases where the validators are themselves
malicious, their response to malicious proposers depends on the factor of whether they are operating individually
or in a group. Since their behavior is not in accordance with the following of everything according to blockchain
consensus methodology, the question of using a reputation values list does not arise for them. The objective of the
reputation values list is to strengthen the power of honest users in the network and provide them with the tool to
prevent malicious transactions from getting included in the blockchain. The malicious users do not consider the
reputation values while making decisions as either proposers or validators. Therefore, one cannot say with absolute
surety whether a malicious validator will reject a malicious proposer’s block, reject an empty block or select either of
both.

The validator nj in step (r, 2) follows the condition in equation 2 to assess the block proposals from step (r, 1).
Now, if a malicious user is set to become the proposer with best suited credentials, it can be replaced by an honest
user’s block by nj if the condition in Lemma 5.1 is satisﬁed. Now, in step (r, 1), if ni is a malicious proposer while nk
is an honest proposer, then the block of nk must be accepted by more than 2
3 of step (r, 2) validators (money units)
based on Lemma 5.1 in order for it to move towards getting ﬁnalised.

6 Analysis

We evaluate our methodology over the parameters such as completeness, soundness, communication hop, and ex-
tra steps in communication.
In [12], authors provide the analysis of the Algorand blockchain network consensus
mechanism with respect to proof of the aforementioned properties. As we proceed, we check whether the use of the
reputation scores list violates any of the proved properties of the Algorand blockchain network. If that is not the
case, then the modiﬁed consensus mechanism also upholds all the original properties.

According to Theorem 1 in [12], there are 4 properties which hold with “overwhelming probability” for each
consensus round r ≥ 0. Property 1 states that “all honest users agree on the same block Br, and all payments

15

in Br are valid” [12]. In the case where the honest users have the reputation values list, the values in the list get
generated from the blockchain transactions data, which is the same across the network. Also, the reputation values
are generated and updated at regular intervals based on previous data, and their generation is not linked to the
communication in block consensus rounds. All the honest users follow the methodology according to equation 2 and
agree on the same block.

x

lr < Θr,1

The property 2 of Theorem 1 in [12] states that if the consensus leader nlr is honest, then the generated block
Br is known to the honest users in a predeﬁned time interval. Here, the consensus leader refers to the block proposer
nlr in step (r, 1) such that Θr,1
for lr, x ∈ N . It also speciﬁes the amount of time by which the ﬁnalized
block Br will be known to the ﬁrst honest user for the cases when payment set P AY r is empty and non-empty. The
proposed modiﬁcation does not involve any change in the communication procedure. The changes in the decision-
making method, as shown in equation 2 is done at each user’s end only. Also, there is no change proposed in the
rules regarding the ﬁnalization of a block. Therefore, the property 2 also upholds under the proposed modiﬁcations.
The property 3 discusses about the time taken in block ﬁnalization when nlr is malicious. Under the proposed
modiﬁcations, if nlr is declared malicious by the reputation values list, its proposal gets rejected if there is an honest
proposer satisfying the condition in Lemma 5.1 as evaluated by the honest users. If not, then the process takes place
as in the original Algorand blockchain network. Since the evaluation is done at the user’s end and not within the
communication, the block ﬁnalisation happens within the predeﬁned time interval only.

The property 4 of Theorem 1 in [12] states that the probability of nlr being honest is ph = h2(1 + h − h2), where
h is the ratio of honest user Algos at stake in the network. From Lemma 5.2, we know that the ratio of honest to
malicious user money units increases for the consensus steps involving block validation if the reputation values list
is used for evaluation. Therefore, the value of ph also increases in such a case. In conclusion, all the 4 properties
of Theorem 1 in [12] uphold even with the proposed modiﬁcations in the consensus procedure using the reputation
values list.

6.1 Change in time taken

The process to compute the reputation values list is done at the user’s end without attachment to the consensus
process. When a user participates as either a proposer or a validator, the reputation values are already available
pre-computed. While using these values, the evaluation process for selecting a block and counting the votes remain
same. Therefore, there is no change in the time taken during the consensus procedure.

6.2 Completeness

According to the completeness lemma in [12], if the properties 1 − 3 in Theorem 1 hold for consensus rounds
{0, 1, · · · , r − 1}, then properties 1 and 2 hold for consensus round r, when the consensus leader nlr is honest.
As we have discussed above, the use of the reputation values list does not have any eﬀect on the upholding of either
of the aforementioned properties. Hence the completeness will uphold for the modiﬁed consensus procedure also.

6.3 Soundness

According to the soundness lemma in [12], if the properties 1−3 in Theorem 1 hold for consensus rounds {0, 1, · · · , r −
1}, then properties 1 and 3 hold for consensus round r, when the consensus leader nlr is malicious. In the case of
nlr being malicious, its proposal will be replaced by an honest users’ proposal if it satisﬁes the condition deﬁned
in Lemma 5.1 as evaluated by the honest users. Even if that is not the case, the consensus process will happen
according to the original methodology. Therefore, the soundness of the network will remain intact even with the
proposed modiﬁcations.

6.4 Change in local space storage and communication overhead

The use of a machine learning algorithm to calculate reputation values warrants some additional space at an individual
user’s end. However, as mentioned earlier, the process is not tied up to the communication part of the consensus
mechanism and will not result in the addition of any overhead in communication.

6.5 Change in communication hop

Our proposed methodology involves evaluation on the users’ end only; the communication data will remain the same
as in the original Algorand blockchain network. Therefore, there will be no change in the communication hop.

16

7 Discussion and Conclusion

In this paper, we propose a reputation-based methodology for applying the reputation values in the Algorand
blockchain to restrict illicit activities by criminals who are using the platform. Our reputation method is based
on the behavior of an account in terms of transactions. It assigns a reputation score ∈ [0, 1] to each account where
the level of honesty increases from 0 to 1. For obtaining the reputation scores through transaction data, diﬀerent ML
models are used. A time-variant reputation score based on the ML model operating through sliding window input
data is ideal input for our proposed methodology. As observed in related work on ML models, a 24 hour window for
updating scores is suﬃcient to provide insight into the overall network behavior. Also, it was observed in the related
work that there is not much deviation in the user behavior observed in the bitcoin and Ethereum blockchain. It
provides us with a starting point in terms of the choice of ML model to provide input for our methodology. The iden-
tiﬁcation of reputation score leverages the distributed nature of the blockchain technology, where each account can
identify the reputation score for all the accounts. Thus it aids in identifying suspects operating within the blockchain
ecosystem. Our method involves minor changes in the consensus protocol at the user end. Locally, in the original
consensus protocol, all user accounts evaluate at their end and identify whether that particular account is a proposer,
validator, or both. We do not change the communicated messages; rather we modify the evaluation for being a
proposer, a validator, or both. The other steps in the consensus protocol remain the same as before. The reputation
score plays a major part in identiﬁcation of the proposer/validator. Our methodology involves eliminating blocks
proposed by suspicious accounts and reducing the validation votes for the suspicious validators. Also, our method,
although designed for user behaviour based reputation, can also accommodate the adversarial attacks within the
reputation score. Overall, our methodology aims to enhance the decision-making process, have maximum possible
impact, and cause minimum possible disruption at the communication level.

However, our proposed methodology is not without certain limitations. The output of the reputation score is
obtained by applying the pre-decided ML algorithm on the transaction data present on the respective blockchain.
Although the input data and the features used are the same, there is a chance of variation in the output across
diﬀerent users running algorithm at their end. Therefore, the selection of a proper ML algorithm with rigorous
cross-platform testing is a way to avoid the scenario mentioned above and its eﬀects such as exclusion of benign users
and selection of empty block due to divided opinion. Additionally, the users have to run the ML algorithm at their
end. Although it does not burden communication resources, the user has to perform additional computational tasks
out of network for decision-making according to the proposed methodology.

Our approach is achievable for other blockchain networks as well, with the mechanism tuned to the respective
consensus methodologies. Ethereum blockchain network is transitioning from PoW to PoS consensus [28]. The
transition is supposed to be through enabling the use of Casper [9], a hybrid PoW/PoS protocol. Here, the PoS is
applied to ﬁnalize the blocks after a ﬁxed number of blocks are mined through PoW. This change aims to reduce the
chances of illicit activities such as invalidating the blocks, forming a parallel chain, and disrupting the communication
by forfeiting the deposit of the validators. However, still, there is no provision to stop social-engineering based illicit
activities such as Phishing, money laundering, Gambling. Applying the reputation model based on transaction data
paves the way for identifying the entities using blockchain for the aforementioned illicit activities. The identiﬁcation
helps in curtailing the power of the proposer and validator accounts involved in such social-engineering based illicit
activities within the blockchain network.

For complete PoW based blockchain networks such as Bitcoin, our reputation model can play an advisory role
to prevent transactions from illicit entities from getting recognized. Since mining a single block is computationally
expensive, an honest miner would not risk its block getting rejected by including the transactions from illicit entities.
Since the scores get updated with the latest behavior playing a more signiﬁcant role, the reputation scores can
eﬀectively freeze a malicious user account and give the law enforcement agencies enough time to catch up with the
same.

Similarly, our reputation score based regulation is also relevant for the directed acyclic graph (DAG) based
blockchain such as IOTA Tangle [52]. In Tangle, a new transaction selects previous transactions based on Markov
Chain Monte Carlo algorithms [25] to verify and join the DAG. By using our reputation scores, the selection procedure
can give a transaction a reputation score based on the user behavior. An honest user wants to operate according
to the blockchain network rules and associate with fellow honest users. It also wants to play its part in keeping the
blockchain network free from illicit entities. Hence, the reputation score can be used by the new transaction to select
those transactions to join with which are done by the honest users.

Further, in extended proof of stake such as delegated proof of stake (DPoS) used in Cosmos [37] our methodology
is also applicable. In DPoS, the non-validators can delegate their cryptocurrency to validators for a share in block
fees. The users in DPoS based blockchain can use the reputation score model to identify the validators suitable for
delegating their cryptocurrency stake. Therefore, the concept of restricting illicit activities from exploiting blockchain
infrastructure is also applicable in this case. Note that here we provide the theoretical proof for Algorand while a
strong case for other blockchains to incorporate our proposal.

17

This paper aims to provide a theoretical foundation and do the feasibility analysis of the regulation on the
blockchain network against criminal entities. The idea behind the conception of blockchain technology was the
establishment of a self-regulated decentralized system. Our proposed methodology provides the means to move
further towards achieving the same goal. A blockchain user, when equipped with the reputation score, can make
the decision on whether to carry out the transaction with the user perceived as malicious based on reputation score
values. For a consensus round, a potential block proposer has the choice to include the transactions it perceived
as honest. Therefore, an illicit activity related transaction will remain in pending state and eventually expire after
end of its validity period. It will promote honest behavior across the blockchain network. In the discussion of the
proposed methodology and its analysis, we show that there is no eﬀect on the communication pattern and data,
thereby no additional strain on the network resources. The theoretical results obtained demonstrate that an honest
validating committee member can prevent an identiﬁed criminal entity from proposing the block on the Algorand
blockchain. In addition, exploiting the blockchain transactions for illicit activities restricts the respective user’s role
as a validator. Overall, we conclude that the proposed consensus-based regulation methodology is feasible enough to
be integrated within the blockchain ecosystem.

Acknowledgement

This work is partially funded by the National Blockchain Project (grant number NCSC/CS/2017518) at IIT Kanpur
sponsored by the National Cyber Security Coordinator’s oﬃce of the Government of India and partially by the
C3i Center funding from the Science and Engineering Research Board of the Government of India (grant number
SERB/CS/2016466).

References

[1] Jacques Bou Abdo, Rayane El Sibai, and Jacques Demerjian. Permissionless proof-of-reputation-x: A hybrid
reputation-based consensus algorithm for permissionless blockchains. Transactions on Emerging Telecommuni-
cations Technologies, 32(1), January 2021.

[2] R. Agarwal, T. Thapliyal, and S. Shukla. Detecting malicious accounts showing adversarial behavior in permis-

sionless blockchains. arXiv, -(-):1–15, January 2021. https://arxiv.org/abs/2101.11915.

[3] R. Agarwal, T. Thapliyal, and S. Shukla. Vulnerability and transaction behavior based detection of malicious
smart contracts. In Proceedings of 13th International Symposium on Cyberspace Safety and Security, pages –,
Copenhagen, Nov 2021. Springer.

[4] Rachit Agarwal, Shikhar Barve, and Sandeep Kumar Shukla. Detecting malicious accounts in permissionless

blockchains using temporal graph properties. Applied Network Science, 6(1):1–30, February 2021.

[5] Oladotun Aluko and Anton Kolonin. Proof-of-reputation: An alternative consensus mechanism for blockchain

systems. International Journal of Network Security & Its Applications (IJNSA) Vol, 13(4):23–40, 2021.

[6] Shehar Bano, Alberto Sonnino, Mustafa Al-Bassam, Sarah Azouvi, Patrick McCorry, Sarah Meiklejohn, and
In Proceedings of the 1st ACM Conference on

George Danezis. Sok: Consensus in the age of blockchains.
Advances in Financial Technologies, AFT ’19, pages 183––198, Zurich, Switzerland, 2019. ACM.

[7] Oyinloye Bosun. What is Chainalysis – the cryptocurrency crime detector?

https://coinrivet.com/
guides/security/what-is-chainalysis-the-cryptocurrency-crime-detector/, 2021. [Online; accessed 16-
September-2021].

[8] Vitalik Buterin et al. Ethereum white paper. GitHub repository, 1:22–23, 2013.

[9] Vitalik Buterin and Virgil Griﬃth. Casper the friendly ﬁnality gadget. arXiv, -(-):1–10, October 2017.

[10] Chainalysis. 2021 Crypto Crime Report, 2021. (Accessed 05/06/2021).

[11] D. Chaudhari. Towards malicious account identiﬁcation in bitcoin. Master’s thesis, IIT Kanpur, IIT Kanpur,

07 2021.

[12] Jing Chen and Silvio Micali. Algorand: A secure and eﬃcient distributed ledger. Theoretical Computer Science,

777:155–183, 2019.

[13] Qian Chen and Robert A. Bridges. Automated behavioral analysis of malware: A case study of wannacry
ransomware. In 2017 16th International Conference on Machine Learning and Applications (ICMLA), pages
454–460, Cancun, Mexico, January 2017. IEEE.

18

[14] Nicolas Christin. Traveling the silk road: A measurement analysis of a large anonymous online marketplace. In
Proceedings of the 22nd International Conference on World Wide Web, WWW ’13, page 213–224, New York,
NY, USA, 2013. Association for Computing Machinery.

[15] Thomas Conlon and Richard J. McGee. Betting on bitcoin: Does gambling volume on the blockchain explain

bitcoin price changes? Economics Letters, 191:108727, 2020.

[16] Dipankar Dasgupta, John M Shrein, and Kishor Datta Gupta. A survey of blockchain from security perspective.

Journal of Banking and Financial Technology, 3(1):1–17, 2019.

[17] Bernardo David, Peter Gaˇzi, Aggelos Kiayias, and Alexander Russell. Ouroboros praos: An adaptively-secure,
semi-synchronous proof-of-stake blockchain. In Jesper Buus Nielsen and Vincent Rijmen, editors, Advances in
Cryptology – EUROCRYPT 2018, pages 66–98, Cham, 2018. Springer International Publishing.

[18] Marcela T. de Oliveira, L´ucio H.A. Reis, Dianne S.V. Medeiros, Ricardo C. Carrano, S´ılvia D. Olabarriaga, and
Diogo M.F. Mattos. Blockchain reputation-based consensus: A scalable and resilient mechanism for distributed
mistrusting applications. Computer Networks, 179:107367, 2020.

[19] Michael del Castillo. Ripple deal could make xrp cryptocurrency compliant with fatf anti-money-laundering

rules, Jun 2019. [Online; accessed 30-September-2021].

[20] Thuat Do, Thao Nguyen, and Hung Pham. Delegated proof of reputation: A novel blockchain consensus. In
Proceedings of the 2019 International Electronics Communication Conference, IECC ’19, page 90–98, New York,
NY, USA, 2019. Association for Computing Machinery.

[21] Kevin Driscoll, Brendan Hall, H˚akan Sivencrona, and Phil Zumsteg. Byzantine fault tolerance, from theory
to reality. In Stuart Anderson, Massimo Felici, and Bev Littlewood, editors, Computer Safety, Reliability, and
Security, pages 235–248, Berlin, Heidelberg, 2003. Springer Berlin Heidelberg.

[22] Valeriia Dyntu and Oleh Dykyi. Cryptocurrency in the system of money laundering. Baltic Journal of Economic

Studies, 4(5):75–81, 2018.

[23] Noama Fatima Samreen and Manar H. Alalﬁ. Reentrancy vulnerability identiﬁcation in ethereum smart con-
tracts. In 2020 IEEE International Workshop on Blockchain Oriented Software Engineering (IWBOSE), pages
22–29, ON, Canada, 2020. IEEE.

[24] Qi Feng, Debiao He, Sherali Zeadally, Muhammad Khurram Khan, and Neeraj Kumar. A survey on privacy

protection in blockchain system. Journal of Network and Computer Applications, 126:45–58, 2019.

[25] Charles J Geyer. Practical markov chain monte carlo. Statistical science, 7(4):473–483, 1992.

[26] Malka N. Halgamuge, Samurdika C. Hettikankanamge, and Azeem Mohammad. Trust model to minimize the
inﬂuence of malicious attacks in sharding based blockchain networks. In 3rd International Conference on Artiﬁcial
Intelligence and Knowledge Engineering (AIKE), pages 162–167, Laguna Hills, USA, 2020. IEEE.

[27] Mikkel Alexander Harlev, Haohua Sun Yin, Klaus Christian Langenheldt, Raghava Mukkamala, and Ravi Va-
trapu. Breaking bad: De-anonymising entity types on the bitcoin blockchain using supervised machine learning.
In 51st Hawaii International Conference on System Sciences, pages 3497–3506, Hawaii, 2018. AIS.

[28] Alyssa Hertig. Ethereum’s big switch: The new roadmap to proof-of-stake. https://www.coindesk.com/
markets/2017/05/05/ethereums-big-switch-the-new-roadmap-to-proof-of-stake/, 2017. [Online; accessed
20-September-2021].

[29] Chenyu Huang, Zeyu Wang, Huangxun Chen, Qiwei Hu, Qian Zhang, Wei Wang, and Xia Guan. Repchain:
A reputation-based secure, fast, and high incentive blockchain system via sharding. IEEE Internet of Things
Journal, 8(6):4291–4304, 2021.

[30] IBM Securities. Cost of a data breach report 2021. https://www.ibm.com/in-en/security, 10 2021. Online;

accessed 05-October-2021.

[31] Dong Ku David Im. The blockchain trilemma, 2018. (Accessed 04/10/2021).

[32] International Monetary Funds. Global ﬁnancial stability report.

https://www.imf.org/-/media/Files/

Publications/GFSR/2021/October/English/ch2.ashx, 10 2021. Online; accessed 05-October-2021.

[33] Ari Juels and Burton S. Kaliski. Pors: Proofs of retrievability for large ﬁles. In Proceedings of the 14th ACM
Conference on Computer and Communications Security, CCS ’07, page 584–597, New York, NY, USA, 2007.
Association for Computing Machinery.

[34] Abdellah Kaci and Abderrezak Rachedi. Poolcoin: Toward a distributed trust model for miners’ reputation
management in blockchain. In 17th Annual Consumer Communications Networking Conference (CCNC), pages
1–6, Las Vegas, USA, January 2020. IEEE.

19

[35] Eleftherios Kokoris Kogias, Philipp Jovanovic, Nicolas Gailly, Ismail Khoﬃ, Linus Gasser, and Bryan Ford.
Enhancing bitcoin security and performance with strong consistency via collective signing. In 25th USENIX
Security Symposium (USENIX Security 16), pages 279–296, Austin, TX, August 2016. USENIX Association.

[36] Nir Kshetri and Jeﬀrey Voas. Do crypto-currencies fuel ransomware? IT Professional, 19(5):11–15, 2017.

[37] Jae Kwon and Ethan Buchman. Cosmos whitepaper, 2019. Online; accessed 01-October-2021.

[38] B. Lal. Understanding money trails of suspicious activities in the permission-less blockchain. Master’s thesis,

IIT Kanpur, IIT Kanpur, 07 2021.

[39] Banwari Lal, Rachit Agarwal, and Sandeep Kumar Shukla. Understanding money trails of suspicious activities

in a cryptocurrency-based blockchain. arXiv, -(-):1–26, 2021.

[40] Xiaoqi Li, Peng Jiang, Ting Chen, Xiapu Luo, and Qiaoyan Wen. A survey on the security of blockchain systems.

Future Generation Computer Systems, 107:841–853, 2020.

[41] Joana Lorenz, Maria Inˆes Silva, David Apar´ıcio, Jo˜ao Tiago Ascens˜ao, and Pedro Bizarro. Machine learning
methods to detect money laundering in the bitcoin blockchain in the presence of label scarcity. arXiv, -(-):1–8,
October 2020.

[42] Andrew Miller, Ari Juels, Elaine Shi, Bryan Parno, and Jonathan Katz. Permacoin: Repurposing bitcoin work
for data preservation. In Symposium on Security and Privacy, pages 475–490, San Jose, USA, 2014. IEEE.

[43] Satoshi Nakamoto. Bitcoin: A peer-to-peer electronic cash system, 2008.
[44] Micha(cid:32)l Ostapowicz and Kamil ˙Zbikowski. Detecting fraudulent accounts on blockchain: A supervised approach.
In Reynold Cheng, Nikos Mamoulis, Yizhou Sun, and Xin Huang, editors, Web Information Systems Engineering
– WISE 2019, pages 18–31, Cham, 2019. Springer International Publishing.

[45] Thai Pham and Steven Lee. Anomaly detection in bitcoin network using unsupervised learning methods. arXiv,

-(-):1–5, February 2016.

[46] Thai Pham and Steven Lee. Anomaly detection in the bitcoin system-a network perspective. arXiv, -(-):1–8,

November 2016.

[47] Blaˇz Podgorelec, Muhamed Turkanovi´c, and Saˇso Karakatiˇc. A machine learning-based method for automated

blockchain transaction signing including personalized anomaly detection. Sensors, 20(1):2–18, 2020.

[48] Serguei Popov. The tangle. http://www.descryptions.com/Iota.pdf, 2018. [Online; accessed 21-September-

2021].

[49] Rohit Kumar Sachan, Rachit Agarwal, and Sandeep Kumar Shukla. Identifying malicious accounts in blockchains

using domain names and associated temporal properties. arXiv, -(-):1–13, June 2021.

[50] David Schwartz, Noah Youngs, Arthur Britto, et al. The ripple protocol consensus algorithm, 2014.

[51] Sidharth Shyamsukha, Pronaya Bhattacharya, Farnazbanu Patel, Sudeep Tanwar, Rajesh Gupta, and Emil
Pricop. Porf: Proof-of-reputation-based consensus scheme for fair transaction ordering. In 13th International
Conference on Electronics, Computers and Artiﬁcial Intelligence (ECAI), pages 1–6, Pitesti, Romania, July
2021. IEEE.

[52] Wellington Fernandes Silvano and Roderval Marcelino. Iota tangle: A cryptocurrency to communicate internet-

of-things data. Future Generation Computer Systems, 112:307–319, 2020.

[53] Yonatan Sompolinsky, Yoad Lewenberg, and Aviv Zohar. Spectre: a fast and scalable cryptocurrency protocol.

IACR Cryptol. ePrint Arch., 2016(1159):1–65, December 2016.

[54] Yonatan Sompolinsky and Aviv Zohar. PHANTOM and GHOSTDAG: A scalable generalization of nakamoto

consensus. IACR Cryptology ePrint Archive, Report 2018/104, 2018(104):1–14, January 2018.

[55] Scott Nadal Sunny King. Ppcoin: Peer-to-peer crypto-currency with proof-of-stake. https://www.chainwhy.
top/upload/default/20180619/126a057fef926dc286accb372da46955.pdf, 08 2012. Online; accessed 01-
October-2021.

[56] Tommaso Gagliardoni. The poly network hack explained. https://research.kudelskisecurity.com/2021/08/

12/the-poly-network-hack-explained/, 08 2021. Online; accessed 20-October-2021.

[57] Andreas Vlachos. Slashing penalties explained in 2 minutes (ethereum 2.0), Dec 2020.

[Online; accessed 02-

October-2021].

[58] Mark Weber, Giacomo Domeniconi, Jie Chen, Daniel Karl I Weidele, Claudio Bellei, Tom Robinson, and
Charles E Leiserson. Anti-money laundering in bitcoin: Experimenting with graph convolutional networks
for ﬁnancial forensics. arXiv preprint arXiv:1908.02591, -(-):1–7, July 2019.

20

[59] Mattias Wecksten, Jan Frick, Andreas Sjostrom, and Eric Jarpe. A novel method for recovery from crypto
In 2nd International Conference on Computer and Communications (ICCC), pages

ransomware infections.
1354–1358, Chengdu, China, October 2016. IEEE.

[60] Yang Xiao, Ning Zhang, Wenjing Lou, and Y. Thomas Hou. A survey of distributed consensus protocols for

blockchain networks. IEEE Communications Surveys & Tutorials, 22(2):1432–1465, 2020.

[61] Hao Hua Sun Yin, Klaus Langenheldt, Mikkel Harlev, Raghava Rao Mukkamala, and Ravi Vatrapu. Regulating
cryptocurrencies: A supervised machine learning approach to de-anonymizing the bitcoin blockchain. Journal
of Management Information Systems, 36(1):37–73, 2019.

[62] Jiangshan Yu, David Kozhaya, Jeremie Decouchant, and Paulo Esteves-Verissimo. Repucoin: Your reputation

is your power. IEEE Transactions on Computers, 68(8):1225–1237, 2019.

[63] Qianwei Zhuang, Yuan Liu, Lisi Chen, and Zhengpeng Ai. Proof of reputation: A reputation-based consensus
In Proceedings of the 2019 International Electronics Communication

protocol for blockchain based systems.
Conference, IECC ’19, page 131–138, New York, NY, USA, 2019. Association for Computing Machinery.

A Algorand consensus process

In Algorand [12], the consensus process follows a hybrid PoS-BFT mechanism. As we proceed, we describe the process
steps leading to block formation and addition into the blockchain. Our assumption is that the current blockchain
already contains r − 1 blocks, where r ≥ 3 and r ∈ N. Therefore, the consensus process is taking place for rth block.
The notations used are based on [12]. In Algorand, the users in the blockchain network are in the set N with the
. The consensus steps for rth block formation round are termed
stake of user ni ∈ N till (r − 1)th block given as Sr−1
as (r, s), where s ∈ N and represents the step number. Step (r, 1) is the block proposal step, where the selected
nodes create and propagate a block into the network. To propose the rth block, an essential component is a seed
Qr−1 deﬁned using equation 26.

ni

Qr−1 =

(cid:26)H(SIGlr−1 (Qr−2, r − 1))
H(Qr−2, r − 1)

if Br−1 (cid:54)= φr−1
if Br−1 = φr−1

(26)

Here, φr−1 represents empty (r − 1)th block, which is the case when none of the proposed blocks is able to secure
required consensus for round r − 1. Also, the term H(SIGi(Z)) is deﬁned as the hash value of the quantity Z after
being digitally signed by user ni using its private key, skr,1
, generated for the same purpose. An empty block is
deﬁned as in equation 27 where Φ represents ‘NULL’ transaction data.

i

φr−1 = (r − 1, Qr−2, H(Br−2), Φ)

(27)
In equation 26, the value of Qr−1 in case of Br−1 being non-empty is calculated by the node lr−1. Here lr−1 ∈ N
is the successful proposer credited with addition of conﬁrmed block Br−1 at round r − 1. The value of Qr−1 is
determined with the ﬁnalisation of block Br−1. In the process of formation of Br, Qr−1 is used to determine the
proposers and the validators for Br. For participating in consensus process for rth block, a node ni computes hash
value H(SIGi(r, s, Qr−1)) in each step (r, s) for s > 1. The hash value calculation for s = 1 is done while considering
the user’s stake in the network.

The selection procedure for the proposers and validators is known as cryptographic sortition. In step (r, 1), each
node (user account) ni ∈ N computes its credential σr,1
, and checks the output against a predeﬁned threshold. The
procedure for consensus is eﬀectively byzantine agreement combined with the proof of stake. To incorporate the
advantage based on the stake in the network, for step (r, 1), each unit of Algorand cryptocurrency is treated as an
individual sub-user attached to the user holding it. Therefore, the more a user’s stake is, the more it has sub-users,
and the better its chances are of getting selected as a block proposer. The credential which ni ∈ N generates for step
(r, 1) and propagates in case of getting selected as proposer is given in equation 28. The proposer ni ∈ Vr,1 selects
σr,1
i

) is minimum ∀K ∈ [1, · · · , Sr−1

such that H(σr,1

].

i

i

ni

i = SIGi(r, 1, K, Qr−1)
σr,1
For step (r, 1), the hash value of the credential is converted into decimal and then normalised using division by
be
i
. To consider the stake for ni in step (r, 1), the hash value to compute will be H(SIGi(r, 1, K, Qr−1)), where

2hashlen, where hashlen is the length of the output hash σr,1
Θr,1
i
K ∈ [1, Sr−1

for ni. Let the normalised decimal value of σr,1

] represents the K th sub-user alias of ni.

(28)

i

If ni gets selected in (r, 1) as a proposer, it forms a block Br

i to propagate it to its peers in the blockchain
is the proposed block by ni which can get conﬁrmed as Br after successfully getting majority

network. Here, Br
i

ni

21

validation in the consensus process (explained next). The cutoﬀ number for majority validation is also predeﬁned in
the network and is referred to as TH . The components of non-empty Br
i ) =
{r, SIGi(Qr−1), H(Br−1)} is the header of the proposed block.

i are given in equation 29, where Head(Br

Br

Here, P AY r
i

i = {r, SIGi(Qr−1), H(Br−1), P AY r
i }

(29)
is the set of transactions to be included in rth block as proposed by ni, while H(Br−1) is the
i , ni propagates its block proposal in the form of message, mr,1
,
i } conﬁrming its selection in (r, 1) round. The lightweight message
. It makes the evaluation of the block proposal
i )), σr,1
i } (full block data and its credentials). To get selected as
i < Ψr,1. Here Ψr,1 is a predeﬁned threshold value for selection

hash value of the previous block. After forming Br
along with a lightweight message {Head(Br
propagates across the network and reaches other users faster than mr,1
faster. The message mr,1
the block proposer, ni has to satisfy the condition Θr,1
in ﬁrst round.

i , SIGi(H(Br

contains {Br

i ), σr,1

i

i

i

For s > 1, the user credential generated are σr,s

j ) from its ephemeral public-private key pair {pkr,s

i = SIGj(r, s, Qr−1) for nj ∈ N . If nj gets selected as validator in
step (r, s) for s > 1, then nj ∈ Vr,s. Here SIGj(r, s, Qr−1) is the encrypted value of the string (r, s, Qr−1) signed using
nj’s private key (skr,s
j }. The hash value of the credential
σr,s
is used by nj in round (r, s) to check for two outcomes, whether it is selected and if selected, how many votes
j
as validator it got assigned for (r, s) step. Let nj have the stake Sr−1
till (r − 1)th block, with total network stake
being Sr−1. Note that the record of the stake is veriﬁed by blockchain data. Let the set of users to be selected as
validators in step (r, s) be deﬁned by Vr,s. In such case, the probability for selection of an individual money unit as
validator in (r, s) step for s > 1 is given as P r
v number of votes in the validator group in step (r, s) for s > 1 is given in equation 30.

Sr−1
j
Sr−1 . Therefore, the probability of nj getting selected and having

, skr,s

j =

j

j

P r

j,v =

(cid:33)

(cid:32)

Sr−1
j
v

(P r

j )v(1 − P r

j )Sr−1

j −v

(30)

We also have (cid:80)Sr−1

j

v=0 P r

j,v = 1. Now, the range [0, 1] is divided into Sr−1

j + 1 sub-ranges. The length of vth

sub-range for nj, denoted by Υr,j
v

is given in equation 31.

(cid:34) v

(cid:88)

P r

j,v(cid:48) ,

v+1
(cid:88)

P r

j,v(cid:48)

(cid:33)

Υr,j

v =

(31)

v(cid:48)=0

In the consensus process, the assumption is that at least 2

v(cid:48)=0
3 of the stake is with honest users. The threshold for
conﬁrming the validation result in each step (r, s) of round r for s > 1 is tH = 2|Vr,s|
3 + 1. Let the normalised decimal
value of σr,s
. In order for nj to get selected and have v number of votes as validator in step (r, s) of
round r for s > 1, the condition Λr,s
is to be fulﬁlled. In each round, the validators send their decision signed
with their private key from their public-private ephemeral key set. Each node destroys its private key just after one
time use.

for s > 1 be Λr,s

j ∈ Υr,j

v

j

j

i

i

i ), σr,1

and {Head(Br

The propagated messages mr,1

, such that the normalized decimal value of its hash value, Θr,1

i } for ni ∈ Vr,1 initiate the beginning of step (r, 2). As per
the followed convention, the set of validators for the round (r, 2) are given by Vr,2. In (r, 2), the validator nj ∈ Vr,2
waits for a predetermined time period, then checks the diﬀerent hash values received from the users in Vr,1. After
the predetermined time period (network parameter), the validator nj checks all the credential values received by the
selected nodes in (r, 1) and ﬁnds the σr,1
x where
∀i, x ∈ Vr,1 ⊂ N , and x (cid:54)= i. After determining the suitable proposer credential (say σr,1
), if the data associated with
(cid:48)
ni, i.e., components of mr,1
i ), i}
and propagates the message mr,2
are
{SIGjj (vmr,2
is not valid, nj ∈ Vr,2 propagates the vote for the empty block.
The subsequent steps have two components, graded consensus followed by binary consensus. In the step (r, 3), a
new set of users nk ∈ Vr,3 accumulate the messages from Vr,2 and evaluate the messages mr,2
received from nj ∈ Vr,2
value to decide on which block to include. In step (r, 3), the validator nk with k ∈ Vr,3 (set of validators in (r, 3))
propagates the message mr,3
is same as that of
vmr,2
x is between a hash of non-empty block proposed in (r, 1) validated by atleast tH messages
j
from (r, 2) or the hash of an empty block as default message after a predeﬁned time period.

= {H(Br
in the network for the validation in step (r, 3). The components of mr,2

are valid, the validator nj ∈ Vr,2 sets its voting message as vmr,2

k } into the network. The structure of vmr,3

j }. If the data associated with σr,1

x = {SIGk(vmr,3

. The choice for vmr,3

i < Θr,1

k ), σr,3

j ), σr,2

j = vm

k

j

j

j

i

i

i

The step (r, 4) and the subsequent rounds are binary consensus procedure, in which the decision is taken to
select either the valid block or an empty block. In (r, 4), the validator na with a ∈ Vr,4 (set of validators in (r, 4))
accumulates the messages from Vr,3. The decision making is made binary by introducing two additional variables,
for na ∈ Vr,4. After evaluating all the valid messages among mr,3
gr,4
for all nk ∈ Vr,3, na ∈ Vr,4 in has
a
a = 2 and br,4
four choices. If there are at least tH valid messages advocating a non-empty block, then gr,4
a = 0. For

and br,4
a

j

22

(cid:7) valid messages advocating some other non-empty block, the values are set as gr,4

at least tH valid messages advocating an empty block, then gr,4
a = 1. Otherwise, if there are at least
(cid:6) tH
a = 1. For all
2
the other cases, na sets gr,4
a = 1. The message propagated by na ∈ Vr,4 after (r, 4) is of the form
mr,4
a = {SIGa(br,4
a }. The resultant block is ﬁnalised in subsequent steps based on the number of
br,s
a values with 1 value means advocating empty block and 0 value means voting for non-empty block. Ideally, in step
(r, 5) the block r is ﬁnalised. However, if that is not the case there are further steps deﬁned to carry out consensus
process through coin-ﬂip based protocol till the network has at least tH conﬁrmed votes of either of the values 1 or 0.

a = 0 and br,4
a ), σr,4

a ), SIGa(vmr,4

a = 1 and br,4

a = 0 and br,4

23

