2
2
0
2

g
u
A
8

]

R
C
.
s
c
[

2
v
1
2
8
1
1
.
6
0
2
2
:
v
i
X
r
a

A Survey of DeFi Security: Challenges and Opportunities

Wenkai Li, Jiuyang Bu, Xiaoqi Li∗, Hongli Peng, Yuanzheng Niu and Yuqing Zhang

School of Cyberspace Security, Hainan University, Renmin Avenue 58, Haikou, 570228, China

A R T I C L E I N F O

A B S T R A C T

Keywords:
Blockchain
Cryptocurrency
Decentralized Finance
Smart Contract

DeFi, or Decentralized Finance, is based on a distributed ledger called blockchain technology. Us-
ing blockchain, DeFi may customize the execution of predetermined operations between parties. The
DeFi system use blockchain technology to execute user transactions, such as lending and exchanging.
The total value locked in DeFi decreased from $200 billion in April 2022 to $80 billion in July 2022,
indicating that security in this area remained problematic. In this paper, we address the deﬁciency in
DeFi security studies. To our best knowledge, our paper is the ﬁrst to make a systematic analysis of
DeFi security. First, we summarize the DeFi-related vulnerabilities in each blockchain layer. Addi-
tionally, application-level vulnerabilities are also analyzed. Then we classify and analyze real-world
DeFi attacks based on the principles that correlate to the vulnerabilities. In addition, we collect op-
timization strategies from the data, network, consensus, smart contract, and application layers. And
then, we describe the weaknesses and technical approaches they address. On the basis of this com-
prehensive analysis, we summarize several challenges and possible future directions in DeFi to oﬀer
ideas for further research.

1. Introduction

The blockchain concept originated from the research of
Haber and Stornetta (1990) added timestamps to text, au-
dio, and video ﬁles in digital form to guarantee their authen-
ticity. When Nakamoto (2008) reﬁned the blockchain con-
cept for the ﬁrst time, blockchain had begun to serve as a
decentralized network with numerous properties, attracting
considerable research. At the same time, the application of
cryptography principles (Nakamoto, 2008) and the promo-
tion of consensus mechanisms (Jakobsson and Juels, 1999)
have enabled digital currencies with blockchain as the core
to allow mutually untrusting parties to complete transactions
securely.

Suppose blockchain-based Bitcoin transactions represent
the blockchain 1.0 era. In that case, the combination of smart
contracts and blockchain signiﬁes the era of blockchain 2.0.
Szabo (1996) ﬁrst introduced the concept of the smart con-
tract, which denoted a promise or agreement in digital form.
Buterin et al. (2014) proposed Ethereum, which updates and
veriﬁes blockchain data via the state. Ethereum is currently
a signiﬁcant platform for smart contracts and decentralized
applications.

In addition, Decentralized Finance (DeFi) is a decentral-
ized application that uses blockchain in the ﬁnancial domain
to implement pre-deﬁned ﬁnancial protocols. Blockchain
technology is widely used in various ﬁelds, such as edu-
cation, health, and ﬁnance. Moreover, because Ethereum
blockchain technology integrated with ﬁnance better during
the Bitcoin period, DeFi technology in the ﬁnancial ﬁeld is
gaining more attention.

Moreover, the blockchain serves as the foundation of the
DeFi application and enables transactions on DeFi to be com-
pleted securely. Blockchain’s consensus mechanism ensures
the integrity of DeFi transactions. The consensus mecha-

Email: csxqli@gmail.com
∗Corresponding author.

Figure 1: Overview of Research Ideas and Analysis Paths on
DeFi Security.

nism selects the ledger nodes for the blockchain. The nodes
with bookkeeping rights incorporate the DeFi application’s
transactions into a new block. The proper execution of the
ﬁnancial logic of the DeFi application relies on smart con-
tracts (Jensen et al., 2021). The smart contract isolates from
the outside world and cannot be modiﬁed once deployed on
the blockchain.
In detail, to get reliable real-world asset
price information, DeFi introduces an oracle (Werner et al.,
2021), which is a system to provide real-world ﬁnancial asset
price information.

With the rapid development of DeFi, it can be divided
into stablecoin, Decentralized Exchange (DEX), cryptocur-
rency market, and insurance. Additionally, it had locked in
$200 billion until April 2022 (Shaman et al., 2022). How-
ever, the value locked up in the entire DeFi dropped by around
$85 billion in July 2022, causing us to ponder the security of
DeFi.

While some studies about the risk of DeFi in Table 1,
they paid more attention to ﬁnancial issues. Werner et al.
(2021) classiﬁed attacks according to risk categories from an
economic perspective. Qin et al. (2021b) systematically and
quantitatively compared various lending systems and mea-

First Author et al.: Preprint submitted to Elsevier

Page 1 of 26

 
 
 
 
 
 
Qin et al.
(2021a)

Amler et al.
(2021)

A Survey of DeFi Security: Challenges and Opportunities

Table 1
Comparison of Our Study and Other DeFi Security Related Literature.

Reference

Contributions

Jensen et al.
(2021)

Werner et al.
(2021)

Qin et al.
(2021b)

It focuses on the analysis of ﬁnancial services. It classiﬁes the risks of
users, liquidity providers, arbitrageurs and application designers separately.

It focuses on the economic aspects and classiﬁes the ﬁnancial risks
encountered by DeFi. And it analyzes the DeFi protocol and ecosystem.

It ﬁrst introduces the breadth of the lending market (a DeFi service). It
quantiﬁes the instability of lending protocols.

Gudgeon et al.
(2020)

It introduces a new type of Flash Loan attack and demonstrates the
weaknesses and price ﬂuctuations of the DeFi protocol.

It compares the diﬀerences between traditional CeFi and DeFi, including
legal, economic, and security.

Date

April
2021

September
2021

November
2021

June
2020

June
2021

Categories

Financial Risk

Financial Risk

Financial Risk

Technical Risk

Financial Risk

It classiﬁes DeFi services through the economics dimension, highlighting the
advantages of DeFi compared to traditional ﬁnance.

September
2021

Financial Risk

Bartoletti et al.
(2021)

It formalizes DeFi theory in order to analyze various DeFi incentive
mechanisms and design principles.

September
2021

Technical
Optimization

Liu et al.
(2020)

Wang et al.
(2021a)

Bekemeier
(2021)

Our study

Markov Chain and volatility prediction risk management are proposed. Loss
distribution reduces mortgage rates, and VaR calculates external risks.

October
2020

It proposes a DeFi attack detection system that collects and analyzes
transactions using symbol execution and transaction monitoring.

March
2021

Technical
Optimization

Technical
Optimization

It presents the ﬁrst systematic risk and is the ﬁrst empirical guide to
stylized facts both at the technical level and economic level.

December
2021

Technical and
Financial Risk

It is the ﬁrst to provide a systematic summary of DeFi security incidents and
systematically analyze the vulnerabilities. We also provide future directions.

——

Systematic
Review

sured the risks that participants may encounter. Gudgeon
et al. (2020) described the design ﬂaws in lending protocols
and DeFi losses due to price volatility. Qin et al. (2021a) sys-
tematically compared Centralized Finance (CeFi) and DeFi,
including legal, economic, and market. Bartoletti et al. (2021)
formalized the DeFi theory, which was used to understand
systematically and analyze the incentives in DeFi to balance
interest rates and prices. Other studies proposed by Jensen
et al. (2021) and Amler et al. (2021) were used to analyze
the risk of assets in DeFi on Ethereum.

In addition to the research of ﬁnancial risks in DeFi, op-
timization schemes were also widely studied, as shown in
Table 1. Liu et al. (2020) used a mathematical-statistical ap-
proach to the market for four types of assets and clearing to
construct MovER, a framework for controlling the risk of the
system. Wang et al. (2021a) proposed Blockeye, which con-
structed state dependencies from smart contracts and used
the collected transactions to analyze whether it is subject to
a DeFi attack. Even though there are some optimized solu-
tions to vulnerabilities, attacks keep appearing, such as the
Ronin Bridge incident (Network, 2022).

Similar work to ours was proposed by Bekemeier (2021),
it discussed systemic risk, both at the technical level of the
blockchain and the economic level and provided experience
analysis. The diﬀerence is that our work is more compre-
hensive. Our work in this paper systematically summarizes
vulnerabilities at all technical levels, following the analyti-
cal path shown in Figure 1. In addition, we analyze the at-
tack events caused by the vulnerabilities. Most importantly,
we also summarize the most state-of-the-art optimizations at

each layer. Finally, we conclude with some challenges and
possible future directions.

The main contributions of this paper are as follows:

(i) To the best of our knowledge, we conducted the ﬁrst
systematic examination of the security issues of the
DeFi ecosystem built on blockchain.

(ii) We systematically summarize the vulnerabilities of the
Ethereum-based DeFi system, investigate real-world
attack events related to DeFi and classify them accord-
ing to their vulnerability principles.

(iii) We survey the security optimizations in DeFi from the
system level and conclude the challenges to suggest
future research directions in this area.

The rest of the paper is structured as follows. Section 2
presents the background of the paper. In Section 3, we ex-
amine some vulnerabilities in DeFi, and in Section 4, we an-
alyze real-world attacks. Section 5 provides several security
optimization strategies, while Section 6 highlights DeFi’s
challenges and future directions. Finally, Section 7 concludes
the paper.

2. Background
2.1. Ethereum

Ethereum is a public blockchain system initialized using
the Proof-of-Work (PoW) consensus mechanism, in which
miners ﬁght for control of blocks using computing power in

First Author et al.: Preprint submitted to Elsevier

Page 2 of 26

A Survey of DeFi Security: Challenges and Opportunities

exchange for incentives (Li et al., 2020c). However, it has
subsequently shifted to the Proof-of-Stake (PoS) algorithm,
which is based on the quantity and age of stakes held (Wahab
and Mehmood, 2018). It ﬁrst uses the Turing-complete pro-
gramming language Solidity, Vyper and others to develop
smart contracts (Chen et al., 2020c; Li et al., 2020b). Any-
one can deploy Decentralized Applications (DAPPs) on the
Ethereum chain that can communicate with others. The most
popular application in the ﬁnancial ﬁeld is DeFi, which pro-
vides a wide range of ﬁnancial services.

2.1.1. Layers of Dapp on Ethereum

Dapps, like traditional software architectures, may be

separated into six layers as follows (Duan et al., 2022):

(i) The data layer handles oﬀ-chain data before passing it

on to the network layer.

(ii) The network layer is peer-to-peer, assuring network

node autonomy.

(iii) The consensus layer guarantees that miners wrap net-

work layer requests into blocks.

(iv) The incentive and consensus layers are interrelated,
and the incentive layer ensures that miners do not be-
have maliciously.

(v) The smart contract layer connects the consensus with
application layers and exchanges data between them.
(vi) The application layer binds the information from the
smart contract layer and shows it to the user after pro-
cessing.

2.1.2. Transaction Process on Ethereum

When a user interacts with the applications and begins
a transaction request using the interfaces provided by the
smart contract, the transaction request broadcasts to all nodes
on the P2P network chain. When the miner gets the re-
quest, it selects and packages the transaction into blocks.
The miner adds blocks to the chain using the consensus algo-
rithm and synchronizes them with all nodes on the network.
Simultaneously, the smart contract changes the state vari-
ables depending on transaction data and visualizes them in
the application.

2.1.3. Geth

Go-Ethereum (Geth) is an oﬃcial Ethereum client im-
plemented in the go programming language (Adam et al.,
2013). It includes instructions for several tasks, such as cre-
ating an Ethereum private chain and interacting with the net-
work environment.

2.1.4. Gas

To avoid the overuse of network resources, all transac-
tions on Ethereum are paid a cost called gas (Chen et al.,
2017a), and the transaction fee equals the amounts of gas
multiplied by gasPrice (Chen et al., 2020b). The user who
proposes transactions sets the gasPrice, and miners with high
computing resources would conduct the transaction earlier if
the gasPrice is high. There is also a concept called gaslimit,
which is used to limit the maximum amount of gas that can

be used for a transaction (Chen et al., 2017b). It means that
the maximum charge for a transaction is gaslimit multiplied
by gasPrice.

2.1.5. Consensus Mechanism of Ethereum

The fundamental technology of blockchain is the con-
sensus mechanism, which ensures the blockchain’s secure,
stable, and eﬃcient operation. At the same time, the consen-
sus mechanism enables the "mistrustful" parties on Ethereum
to complete the veriﬁcation and conﬁrmation of transactions.
Researchers (Lashkari and Musilek, 2021) are continuously
improving various consensus mechanisms such as PoW, PoS,
Delegated-Proof-of-Stake (DPoS), and Practical Byzantine
Fault Tolerance (PBFT).

Ethereum still uses PoW as its consensus mechanism.
Nakamoto (2008) proposed poW to prevent double-spending
in cryptocurrencies. The core idea of PoW is to compete
among nodes for the bookkeeping rights and rewards of each
block through their computing power (Mingxiao et al., 2017).
All miner nodes in the network use the information in the
previous block, such as previous block hash, timestamp, and
nonce, to determine the next block. In PoW, miner nodes
ﬁnd the hash value by continuously trying random number
nonce, which is diﬃcult to calculate but simple to verify.

By PoW’s high consumption of resources, so Ethereum
intends to use PoS as the new consensus mechanism.
In
2011, quantum mechanical proposed POS, whose core idea
is that the greater the ownership of a node to a speciﬁc amount
of cryptocurrency, the greater the equity of the node (Mingx-
iao et al., 2017). In PoS, it ﬁlters nodes by calculating the
number of currencies in the nodes as a percentage of the to-
tal currencies and the time of holding currencies. This ap-
proach selects nodes ﬁrst and then performs arithmetic oper-
ations, which means that many computational resources are
not wasted.

2.1.6. Maximal Extractable Value (MEV)

The Ethereum consensus shift caused several deﬁnitions
to be updated.
Initially, MEV was the miner extractable
value, but now the maximum extractable value makes more
sense.

Miner extractable value refers to the proﬁt miners make
by performing a series of operations on the blocks they mine
(Qin et al., 2022). For example, miners reorder transactions
to optimize the initial ordering of transactions and earn addi-
tional Ordering Optimization (OO) fees (Daian et al., 2020).
And the phenomenon that miners sell priority in blocks to
make users keep raising the cost of gas is called Priority Gas
Auctions (PGA).

Maximal Extractable Value is the maximum value that
the validator 𝑉 can extract by reordering, inserting, or not
executing the transactions 𝑇𝑖,...,𝑗 = {𝑡𝑖, ..., 𝑡𝑗} in the block. In
addition, we assume that the balance in 𝑉 before the transac-
tion is 𝑏(𝑠) and 𝑏(𝑠′) is after the transaction. So the value ob-
tained by sequential execution 𝐸𝑉 (𝑉 , 𝑇𝑖,...,𝑗) equals 𝑏(𝑠′) −
𝑏(𝑠), and 𝑅(𝑇𝑖,...,𝑗) means the order of transactions is in full
array. Thus the maximal extractable value 𝑀𝐸𝑉 can be de-

First Author et al.: Preprint submitted to Elsevier

Page 3 of 26

A Survey of DeFi Security: Challenges and Opportunities

ﬁned as 𝑀𝐸𝑉 = 𝑚𝑎𝑥(𝐸𝑉 (𝑉 , 𝑅(𝑇𝑖,...,𝑗))).

2.2. DeFi

2.2.1. Development of DeFi

The introduction of blockchain technology (Nakamoto,
2008) has changed the traditional ﬁnancial ecosystem. With
the advent of Ethereum, smart contracts became the basis
for the development and implementation of DeFi. Since the
landing of MakerDAO in 2014 which is the ﬁrst Ethereum-
based DeFi project, several DeFi protocols have emerged
to implement functions of traditional CeFi, such as lending
platforms, exchanges, derivatives, and margin trading sys-
tems (Wang et al., 2022). As liquidity mining mentioned in
2020, DeFi was pushed into high gear with the emergence
of decentralized exchanges such as Compound, which are
entirely managed by smart contracts. Money Legos brings
unlimited creativity to DeFi products. It means that a new
ﬁnancial product can be realized by combining the under-
lying DeFi protocols (Popescu et al., 2020). In 2022, regu-
lated Decentralized Finance (rDeFi) becomes the new trend
in DeFi development (Coinchange, 2022).

2.2.2. DeFi Service

As seen in Figure 1, DeFi applications can be made up
of DeFi services, also known as protocols, such as exchange,
lending, and asset operation. Blockchain will wait for assets
or data to be processed through protocols before uploading
them to the application layer, which is the market (Schär,
2021). The DEX serves as a forum for asset suppliers and
buyers to engage, it can separate into two types: central-
ized order system and Automated Market Maker (AMM)
(Zhou et al., 2021b). The former is comparable to a regu-
lar exchange in that customers produce trade orders follow-
ing transactions start. The latter is accomplished quickly by
initiating a transaction using a previously constructed asset
price algorithm.

2.2.3. Market Mechanism

In addition to technological issues, DeFi has an economic
mode of operation, which is the market mechanism. Users
can control and alter numerous assets using the DeFi service
normally. However, attackers can beneﬁt by manipulating
the asset through market-based strategies at the economic
level.

3. Analysis of Vulnerabilities

From the proposal of Ethereum to 2022, various vulnera-
bilities have emerged to promote the ecological development
of DAPPs. Therefore, studying the vulnerabilities related to
DeFi helps understand the defense methods of attacks. To
summarize threats in DeFi, we focus on data, consensus,
contract, and application layers.

3.1. Data Security Vulnerabilities

For the data layer, if attackers change the data under the
chain during the uploading process to the chain, it will re-
sult in irreversible mistakes due to the immutability of the

blockchain. Figure 2 shows that it could encounter oracle
mechanism vulnerability and inappropriate key management.

Figure 2: Classiﬁcation of Data Security Vulnerabilities.

3.1.1. Oracle Mechanism Vulnerability

The oracle is an automated service mechanism that al-
lows the system to obtain the oﬀ-chain asset price data as
input (Werner et al., 2021). And smart contracts rely on
the exchange rates of prices provided by oracle for proper
operation. However, as Figure 1 shows, the risk to oracle
grows drastically when a single point of failure occurs. For
example, over 3 million sETH were arbitrated due to the ora-
cle errors in SYNTHETIX, a protocol that converts entity into
synthetic (Synthetix, 2019). Oracle risks can be divided into
technical and social problems.

Technical oracle problems may be deﬁned as a process

of passing data with three key elements:

(i) How to collect all the data accurately?
(ii) How to process the data with as few errors as possible?
(iii) How to upload the processed data to smart contracts?

Furthermore, the current oracle form may be central-
ized and distributed. Centralized oracle uses trusted third
parties to collect, process, and transfer data to smart con-
tracts. Distributed oracle consists of numerous nodes that
take data from multi-sources and process it using an algo-
rithm, such as a consensus (Kumar et al., 2020) or weighted
voting method (Angeris and Chitra, 2020). Finally, the ora-
cle system assesses the chain information.

There are not only technical problems but also social
problems in oracle (Caldarelli and Ellul, 2021; Egberts, 2017).
. The
Assuming such a game where there exists an Oracle 𝑂𝑖
picks the oﬀ-chain data and processes it as 𝐷𝑛 = (𝑑𝑖, ..., 𝑑𝑗).
𝑂𝑖
for transactions 𝑇 𝑥𝑖
,
The contract 𝑆𝑖 = (𝑓𝑖1, ..., 𝑓𝑖𝑚) uses 𝐷𝑛
. If an attacker
where 𝑓𝑖𝑖
. When
𝑎𝑖
the cost 𝑐 by the attacker is less than the beneﬁts 𝑏𝑖𝑖
, the
attacker gets a proﬁt that would be attractive to other attack-
ers. While the 𝑐 cannot be measured directly from technical
methods, it requires analysis of speciﬁc social situations, so
the oracle problem is controversial in terms of social issues.

function in the contract 𝑆𝑖

, and obtains beneﬁts 𝑏𝑖𝑖

pays 𝑐 to modify 𝑑𝑖

is the 𝑖𝑡ℎ

in 𝐷𝑛

3.1.2. Inappropriate Key Management

In the DeFi ecosystem, wallets are used to manage pri-
vate keys, and asset authentication is based on keys in most

First Author et al.: Preprint submitted to Elsevier

Page 4 of 26

A Survey of DeFi Security: Challenges and Opportunities

Table 2
Comparison of Diﬀerent Key Storage Methods on Ethereum.

Wallets

Descriptions

Local Storage

Keys are stored centrally in the ﬁle system by default

Hardware Wallet

Hardware devices can isolate external networks and transport operations

QR Code Wallet

QR code generated from the address and scanned to obtain the address

Simple Wallet

It can simply handle cryptocurrencies and tokens for raw transactions

Multi-Sig Wallet

The transaction process requires multiple owners to sign to ensure users’ security

Forwarder Wallets

Forwarding assets to a master wallet and users only need to preserve the subkey

Controlled Wallets

The third party keeps the key and anyone who uses the key needs authorization

Update Wallets

Users can customize the update by selecting some parts to be updated

Smart Wallets

Wallets with enhanced functionality that achieve expansion of normal functions

Features

Flex

Sec

Sca

TP

TxC

-

×

×

✓

×

✓

×

✓

✓

-

✓

✓

-

✓

✓

✓

✓

×

-

×

×

✓

✓

✓

×

✓

✓

-

×

×

-

✓

×

×

×

×

-

-

-

✓

✓

✓

✓

✓

✓

cases. However, similar to Bitcoin, the DeFi system suﬀers
from the problem of improper key management. Existing
key management methods, such as physical storage (Shbair
et al., 2021; Dabrowski et al., 2021), oﬄine wallets (Khan
et al., 2019; He et al., 2018), and password-derived wal-
lets (Kaliski, 2000), have some drawbacks. In Table 2, we
summarize nine forms of wallets, where local storage is the
initial form of local ﬁle storage, hardware wallets and QR
code wallets both belong to physical storage wallets. The re-
mains belong to smart contract wallets. Moreover, Flex in
Table 2 is the Flexibility, above the Local Storage is a ✓,
and vice versa is a ×. The same applies to Sec, Sca, TP, and
TxC, representing Security, Scalability, Transparency, and
Transaction Costs, respectively.

In Ethereum, users can access the Ethereum chain by us-
ing Geth. When a user creates an account 𝑎𝑖
, the client gener-
ates a ﬁle to be stored locally, which contains the unique key
. Before the account ini-
𝑘𝑒𝑦𝑖
tiates a transaction 𝑇 𝑥𝑖
or mining, the client reads the 𝑘𝑒𝑦𝑖
in the ﬁle. However, anyone without restricted access can
read the ﬁle and even falsify (𝑘𝑒𝑦𝑖, ..., 𝑘𝑒𝑦𝑗) for proﬁt.

associated with the account 𝑎𝑖

There are three types of wallets, software, hardware, and
paper, depending on the form in which they exist (Suratkar
et al., 2020). Hardware and paper-based storage, which are
physical storage, are more secure because they store keys in
a way that isolates them from multi-user interaction. Never-
theless, it also has the weaknesses of poor scalability (Ara-
pinis et al., 2019) and the inability to have a single point of
failure caused by the architecture design (Dabrowski et al.,
2021).

inﬂuence, providing decentralization. And the public
multiple signature combination could enhance trans-
parency.

• Forwarder Wallet: It adds forwarding operations to
the signing process, such as password-derived wallets,
which allow users to customize the master key and
then derive sub-keys from controlling the asset. The
forwarding operation faces a balance between trans-
parency and security. If the derivation algorithm is
publicly available, attackers who got the master key
in some ways will reproduce the derivation process to
obtain all sub-keys.

• Controlled Wallet: The custodial wallet is an exam-
ple of a controlled wallet since it keeps ownership of
the account and grants access to users. It oﬀers some
protection by centralized management, but the non-
transparent action also tests managers’ credibility.

• Update Wallet: Update wallets permit users to mod-
ify updates depending on features, allowing for greater
ﬂexibility in wallet operation. However, compatibility
across many versions might result in worse security.

• Smart Wallet: Smart wallets include some sophisti-
cated features, such as key recovery. As a result, the
smart contract enables wallets to execute a range of
services in addition to transferring money, but it adds
to the dangers involved with smart contracts in 3.3.

Di Angelo and Salzer (2020) divided smart contract wal-
lets into six types. They restrict the direct access to assets
and provide some Application Binary Interfaces (APIs) for
manipulating data.

• Simple Wallet: It is the initial form of wallet, oﬀering
simply raw transaction capability and storing all keys
in ﬁles. When a malicious parity obtains ﬁle system
permissions, keys can be read or even manipulated.

• Multi-signature Wallet: It requires the co-signature
of many owners for increased protection. The com-
bination of many signatures dilutes the individual’s

3.2. Consensus Mechanism Vulnerabilities

Blockchain, such as Ethereum, is consensus-based. Up
to now, many signiﬁcant works have already been done in
design, testing, auditing, and maintenance. So there aren’t
many consensus ﬂaws, but we gather the consensus bugs
that occurred in Geth according to (NVD, 2022; Yang et al.,
2021; Luu et al., 2015) in Table 3 and we classify them from
three aspects in Figure 3. There are four severity categories,
with low suggesting that the developer resolved before they
occur. The middle level was deployed to the test network be-
fore discovered, while the High was in the main chain. The

First Author et al.: Preprint submitted to Elsevier

Page 5 of 26

February 2017

October 2017

February 2018

March 2019

July 2020

High

High

Low

High

High

High

High

A Survey of DeFi Security: Challenges and Opportunities

Table 3
Summarization of Consensus Vulnerabilities on Geth that have Endangered DeFi.

Brief Explanation

Descriptions

Date

Severity

Journaling Mechanism

Geth can’t restore a deleted empty account due to out-of-gas

November 2016

EVM Stack Underﬂow

SWAP, DUP, and BALANCE underﬂow the EVM stack

Stack Elements

In a static environment with fewer than three stack elements

Encryption Algorithm

The elliptic curve algorithm was not fully validated

Timestamp Overﬂow

Timestamp, state variables in blocks, overﬂow

Shallow Copy

Ether Shift

Pre-compile contract, making Geth inconsistent with memory

Transfering the balance of the deleted account to the new account

August 2020

Certain Sequences

Certain transaction sequences can lead to the failure of consensus

December 2020

Middle

Incorrect Requirements

Failure to properly authorize timestamp leads to double spending

February 2021

Memory Corruption

RETURNDATA corruption due to data replication, resulting in forking

August 2021

Denial of Service (DoS)

Combination of short-term restructuring and delayed consensus decision

October 2021

Bignum Overﬂow

Some large values in consensus speciﬁcation overﬂow leads to a fork

April 2022

High

High

Critical

High

critical one implies that the vulnerability is widely available
and has a signiﬁcant impact on the integrity of the network.
Certain malicious behaviors utilize consensus rules to af-
fect the sequences of transactions. There are a variety of at-
tacks combined with MEV, such as ﬂash loans (Qin et al.,
2021c; Zhou et al., 2021a), sandwich attacks (Zhou et al.,
2021b; Qin et al., 2022), and forking attacks (Daian et al.,
2020). As Figure 3 depicted, we classify this part into three
segments: 1) Transaction Order Vulnerability; 2) Forking
Vulnerability; 3) State Management Vulnerability.

Figure 3: Classiﬁcation of Consensus Mechanism Vulnerabili-
ties

3.2.1. Transaction Order Vulnerability

Transaction order vulnerability describes that an attacker
alters the initial sequence of transactions by leveraging the
miner’s desire for proﬁt. The sandwich attack is a typical
example. The attacker predicts that the victim will buy asset
A, and pays a higher gas fee to acquire it before the victim
at a lower price. And then, they sell A at a higher price for
arbitrage since the victim’s purchase boosts the price (Zhou
et al., 2021b).

3.2.2. Forking Vulnerability

Forking events in DeFi are generally associated with trans-

action fee-based forks and time-bandit attacks (Daian et al.,
2020). Mining revenue incentivizes miners to perform hon-
estly, but the OO fee motivates them to reorder transactions
in the block, enhancing the income. Most bugs contain fork-
ing vulnerabilities in Table 3, for example, memory corrup-
tion, incorrect requirements, shallow copy, and certain se-
quences.

3.2.3. State Management Vulnerability

Transactions in Ethereum are based on updating states
between blocks (Wood et al., 2014). According to the con-
sensus rules in Ethereum, the conﬁrmation between the old
and new blocks needs to be completed within 12 minutes.
Therefore, if attackers complete the extraction of the state
variables within the block, then they can attack the trans-
action within the speciﬁed time. For example, timestamp
overﬂow and incorrect requirements are in Table 3. The for-
mer is because the timestamp exceeds the representation of
uint64, resulting in a hash error in the block (Yang et al.,
2021). The latter is that the timestamp in a block gets the
permission mistake, which means the block to be refused by
the chain permanently, causing a chain fork and the execu-
tion of a double-spending attack(NVD, 2022).

3.3. Smart Contract Vulnerabilities

There are 20 types of smart contract vulnerabilities in
Ethereum deﬁned in (Chen et al., 2020a), of which Table
4 shows the weaknesses that attackers might use to make a
proﬁt. We searched Common Vulnerabilities & Exposures
(CVE) and summarized over 500 vulnerabilities (CVE, 2022).
In Figure 4, we describe the classiﬁcation of smart contract
vulnerabilities in this paper. And Table 4 shows that bugs
written by Solidity were categorized into several types as
detailed below:

Figure 4: Classiﬁcation of Smart Contract and Application
Layer Vulnerabilities

First Author et al.: Preprint submitted to Elsevier

Page 6 of 26

A Survey of DeFi Security: Challenges and Opportunities

Table 4
Summarization of Smart Contract Vulnerabilities in DeFi

Categories

Causes

Categories

Causes

Unchecked External Calls

Without checking return values

Reentrancy

Repeated calls before completed

Unexpected Permission Check

Failure to check permissions

Nested Call

Unrestricted call depth

DoS Under External Inﬂuence

External exceptions inside loops

Missing Return

Denote return but no value

Unmatched ERC-20 Standard

Not follow the standard

Greedy Contracts

Receive but do not withdraw Ethers

Strict Balance Equality

Misleading Data Location

Transaction State Dependency

Balance check failed
Incorrect storage type
Error using tx.origin

Block Info Dependency

Status in blocks leakage

Missing Interrupter

No backdoor to handle crises

Arithmetic Bugs

Unmatched type to values

3.3.1. Arithmetic Operations Vulnerability

In Solidity, bugs such as integer overﬂow, ﬂoat lack of
precision, and division by zero are common during arith-
metic data operations.

An upward overﬂow can occur if a memory integer ex-
ceeds the maximum range, e.g., uint256 is a default type of
integer that can express the number from 0 to 2256 − 1. In
Listing 1, the function allows the owner to add tokens to the
user, but a suﬃcient amount on line 3 can make the balance
in balance[target] vanish.

Since Solidity lacks the ﬂoat type of data structure, the
phenomenon in which the ﬂoat result of an operation might
lose coins. When one integer is divided by a larger integer,
the result is always 0. For example, 1 ETH divided by 10 Eth
equals 0. Even some contracts do not restrict the operation
of division by zero, which results in code logic errors as the
result of the calculation becomes big inﬁnitely.

1 function mintToken(address target, uint256

amount) onlyOwner{
require(target != 0x0);
balance[target] += amount;
totalSupply += amount;
Transfer(0, this, amount);
Transfer(this, target, amount);
}

2
3
4
5
6
7

Listing 1: Integer Overﬂow Instance

3.3.2. Unmatched ERC-20 Standard

Ethereum provides various APIs for developers to im-
plement certain functions, such as transferring money, but
some developers may not adhere to all standards, resulting
in problems in smart contracts. The ERC-20 standard is one
of the APIs used to manipulate cryptocurrencies, including
how to transfer tokens between addresses and access token
data (Richards et al., 2022a). When transferring tokens, for
example, transfer(), transferFrom(), and approve() will re-
turn a boolean value to indicate whether the function suc-
ceeded, and many smart contracts cause transfer mistakes
since they do not verify the return value.

3.3.3. Transaction State Dependency

Contracts should check the permissions of certain sensi-
tive invocations that use the global variable tx.origin, which

points to the address in the entire call stack where the trans-
action was originally sent (Chen et al., 2021). Assume the
Wallet contract in Listing 2 sends a transaction to the Attack
contract, and then the attack() function invokes the transfer()
function in the Wallet contract, at which point tx.origin meets
the detection in line 6, making the success of the attack.

1 contract Wallet{
2
3
4
5

address public owner;
constructor() payable{
owner = msg.sender; }

function transfer(address to, uint amount)

public{
require(tx.origin == owner);
(bool sent,) = to.call.value(amount);
require(sent,"Failed to send Ether");

}

6
7
8
9
10 }
11 contract Attack{
12
13
14
15
16
17
18
19 }

address payable public owner;
Wallet w;
constructor(Wallet wal){

w = Wallet(wal);
owner = payable(msg.sender); }

function attack() public{

w.transfer(owner,address(w).balance); }

Listing 2: Transaction Dependency Instance

3.3.4. Suicidal and Greedy Contracts

Smart contracts usually include a provision enabling the
owner to commit suicide if the contract is challenged. The
SELFDESTRUCT Operational Code (opcode) in a suicidal
contract can ignore all contract code logic, even the fallback()
function (Li et al., 2021). However, attackers utilize this fea-
ture to corrupt the logic of some contracts, which leads to
restrictions on all other operations that depend on the con-
tracts. For example, the Parity wallet was attacked by a sui-
cidal contract in 2017 (Li et al., 2020a), which resulted in a
permanent lock of all cryptocurrencies that transferred to the
wallet before the wallet maintainer ﬁxed the vulnerability.

Similar to the suicidal contract, the greedy contract locks
up the ether, but it is alive. Greedy contracts do not have
instructions related to the withdraw and send (Nikolić et al.,

First Author et al.: Preprint submitted to Elsevier

Page 7 of 26

A Survey of DeFi Security: Challenges and Opportunities

2018), such as send, and transfer, so it locks all ethers and
cannot withdraw. Therefore, making sure there are means to
get ether out before transferring it to a contract (Chen et al.,
2020a).

1 function payOut(address recipient, uint amount)

returns(bool){

if(msg.sender != owner || msg.value>0 ||(
payOwnerOnly && recipient != owner))
throw;

if(recipient.call.value(amount)()){

payOut(recipient, amount);
return true;

}else{

return false;

}

2

3
4
5
6
7
8
9
10 }

Listing 3: Reentrant Vulnerability Instance

3.3.5. Reentrancy Vulnerability

The concept of threads does not exist in Solidity, so it
cannot execute more than two operations concurrently. This
means that when a contract initiates a call via call(), it must
wait for the completion of the call before making the next
call. However, it would be attacked if the callee contracts
change the global state during the waiting (Luu et al., 2016).
The DAO attack leverages the recursive invocations to make
the system keep cycling until internal assets run out. It ex-
its in line 4 of Listing 3 (Daian, 2016), where the original
recipient continues executing call.value() after a success-
ful transfer.

3.3.6. Unchecked External Call

The return value or the arguments of an external call can
aﬀect the states of the code, and many contracts do not check
the return value leads to vulnerabilities. The mode of logic
used in this bug is similar to that of misuse ERC-20 stan-
dard. When a function calls code logic outside the contract,
it is equivalent to the entire runtime in a black box. At this
point, failure to check the return value of the external call
may cause the logic of the contract to break. For exam-
ple, when multiple functions are nested, and the external call
does not check the return value of the internal call in time can
go wrong (Chen et al., 2020a).

Smart contracts in the DeFi trade by using external call
functions including delegatecall(), call(), send(). More
crucially, a failed external call in these methods results in
a transaction not being rolled back, which can cause logical
eﬀects.

3.3.7. Strict Balance Equality

Equations are commonly used in programs to make deci-
sions concerning contract logic. When an attacker employs
some methods, such as a suicide transfer ether, to alter the
state of the variables utilized in the equation, rendering the
judgments of the equation incorrect, the attack aﬀects the
logic of the code that follows the equation. For example, in

Listing 4, when the balance in the account is 1 ether and it
passes the check in line 2. In line 3, the attacker transfers
ether into the account, causing the judgment to fail, so the
transfer in line 4 does not follow the normal logic. It is a
loophole caused by not fully checking the judgment condi-
tions of the equation.

1 function receive(address a) payable{
2
if(msg.value > 1 ether) throw;
3
if(this.balance == 1 ether){
4
5
6 }

a.send(1 ether);

}

Listing 4: Strict Balance Equality Instance

3.4. Application Layer Vulnerabilities

The application layer visualizes the state in the chain and
interacts directly with the user. In this paper, we focus on
DAPPs in the ﬁnancial domain. DeFi applications, in gen-
eral, suﬀer from price manipulation attacks similar to tradi-
tional centralized ﬁnancial applications. With the current
development, the problems in the application layer could
be divided into lending market imperfection, cryptocurrency
instability, design imperfection, and abusive transaction ex-
posure in Figure 4.

3.4.1. Lending Market Imperfection

When the prices in the market are out of balance, it will
result in bad debts for one of the participants in the lending
market. To get more loans, attackers can boost the cryptocur-
rency exchange rate on the oracle by modifying the real-time
price-related status before the loan is made. For example, an
attacker can gain a larger quantity of tokens by directly ma-
nipulating token prices in the asset pool or increasing the
price of collateral before lending (Wu et al., 2021), putting
the borrower in danger of bad debt.

3.4.2. Cryptocurrency Instability

The large ﬂuctuations of cryptocurrencies are caused by
a variety of factors, including pump-and-dump schemes. The
instability can easily trigger liquidation procedures. DEX
have chosen stablecoins, which are tied to the price of real-
world money, as the pricing standard to minimize losses, but
they still exist as a risk. For example, a 99.98 % plunge in
May 2022 in the price of the luna coin, whose value is tied to
a stablecoin called Terra, left the entire crypto market with
over $700 million in collateral liquidated (Lyanchev, 2022).

3.4.3. Design Imperfection

The attackers utilize incorrectly conﬁgured functionality
or speciﬁc convenience features of DeFi platform exchanges
(Wang et al., 2021b). Flash loan is designed as risk-free
loans to be a convenient improvement to the loan that needs
to borrow the ﬂash loan, exchange it for currency, and re-
pay the loan in an atomic transaction. For example, attack-
ers borrow the ﬂash loan to receive collateral at a premium
and make a proﬁt in this atomic transaction (Yazdanparast,

First Author et al.: Preprint submitted to Elsevier

Page 8 of 26

A Survey of DeFi Security: Challenges and Opportunities

2021), which results in bad debts for the users who borrow
money from attackers.

3.4.4. Abusive Transaction Exposure

Exchanges disclose all transactions as soon as feasible
to ensure completely behavioral transparency because oﬀ-
chain matching services are not automated. Unfortunately,
exchanges can restrict access to select users and launch de-
nial of service attacks (Baum et al., 2021) to dominate the
market, audit transactions, and even front-run orders.

4. Analysis of Attack Events

In this section, we investigate real-world attacks in the
DeFi ecosystem (CryptoSec, 2022; Bouteloup, 2022) and
analyze the vulnerabilities exploited in the attacks with the
classiﬁcation shown in Figure 5.

Figure 5: Classiﬁcation of Attack Events at Each Layer

4.1. Date Layer Vulnerabilities

4.1.1. Private Key Leakage

The developer deploys DeFi applications on the blockchain

through private keys managed in the wallet. Also, users con-
ﬁrm and initiate transactions on the DeFi app through the
private key. We summarize real-world DeFi security events
due to private key leaks in Table 5. We believe that there are
two reasons for these security incidents:

(i) The keys owned by DeFi application developers lack
a secure storage environment and well key manage-
ment.

(ii) The developer triggered a phishing attack.

• Poor Management of Secret Keys. In the Meerkat
Finance (Obelisk, 2021) incident, the administrator of
the project used a private key and a false time lock in
the contract. It transferred about $30 million worth of
BNB tokens from the BNB Vault. In Listing 5 (Bsc-
scan, 2021a), the administrator used the visual ambi-
guity of the number "0" and the letter "o" to make the
variable slot values in the admin() and setAdmin()
functions diﬀerently. This means that the time lock of
BNB Vault is false, and the administrator can achieve
the transfer of BNB tokens through this backdoor.

1 function _admin() internal view returns (address

adm) {

adm := sload(slot) }

bytes32 slot = ADMIN_SLOT;
assembly {

2
3
4
5 }
6 function _setAdmin(address newAdmin) internal {
7
8
9
10 }

bytes32 slot = ADMIN_SL0T;
assembly {

sstore(slot, newAdmin) }

Listing 5: Meerkat Finance Instance

• Phishing Attack. The scripts embedded in the DeFi
website interact with the wallet via API, which may
give opportunities for phishing attacks (Winter et al.,
2021). In the BadgerDAO (BadgerDAO, 2021) inci-
dent, the attackers stole the Badger developer’s secret
keys and injected malicious scripts into BadgerDAO’s
web pages. The scripts intercepted the user’s transac-
tions and prompted the user to allow the attacker to
operate on the ERC-20 tokens in their wallets.

The transparent nature of DeFi allowed the attacker to
easily gather information about the developers. The
attacker sent malicious emails to bZx developers, steal-
ing the private management key of bZx deployed on
the BSC and Polygon chains. The attackers used the
management private key to upgrade the contract to
mint unlimited tokens (bZx Contributor, 2021).

4.1.2. Oracle Vulnerability

The DeFi ecosystem relies heavily on oracle to provide
oﬀ-chain or on-chain asset data, and cannot verify the accu-
racy of the data. This means that if the DeFi protocol uses
only a single DEX as the source of asset prices, then the DeFi
protocol will assume that it is true and accurate regardless of
the movement of its asset price data.

In Table 5, oracle attacks have caused signiﬁcant damage
to DeFi applications. Most of the oracle attacks are based on
the following steps (Wang et al., 2021c):

(i) Preparation of Funds. The attacker borrows a large
number of assets unsecured through various Flash Loan
providers, e.g., bZx, dYdX. He/She intends to inject
the assets into other DeFi agreements to inﬂate their
prices while hoarding the target assets.

(ii) Raising the Price of Target Assets. The attacker ma-
nipulates the oracle by balancing the target assets stored
in the liquidity pool, i.e., by exchanging a large num-
ber of tokens back and forth between diﬀerent liquid-
ity pools. Since a single oracle is used, it passes the
manipulated price data into the DeFi protocol.

(iii) Proﬁting. The attacker exchanges the target asset for
money borrowed by the Flash Loan, a service pro-
vided by DeFi, e.g., collateralized borrowing. As the

First Author et al.: Preprint submitted to Elsevier

Page 9 of 26

A Survey of DeFi Security: Challenges and Opportunities

Table 5
Summarization of Real-world Attacks Exploiting Diﬀerent Types of Vulnerabilities

Vulnerabilities

Features

Victims

Date

Amount

(million USD)

Private Key
Leakage

Oracle Attacks

Arithmetic
Vulnerability

Reentrancy
Vulnerability

Logical
Vulnerability

The private keys of DeFi deployers are
under threat due to poor private key
management or phishing attacks. The
key authorizes and veriﬁes the
transactions of the user. When an
attacker utilizes the key, it is simple to
tamper with the transaction, putting
the trader’s interests at risk. The
attacker alters the website’s Application
Programming Interface (API) and
embeds the vulnerability to get the
user’s personal information, including
the user’s key.

The oracle price data feed can be
manipulated by the attackers who
change the asset data for the smart
contracts. When an oracle is attacked,
real-world data posted to the blockchain
changes. It mismatches on-chain data
with the real world, harming users.

Meerkat Finance

Paid Network

Roll

EasyFi

bZx

8ight Finance

BitMart

AscendEX

Vulcan Forged

LCX

Ronin Bridge

bZx

March 2021

March 2021

March 2021

April 2021

November 2021

December 2021

December 2021

December 2021

December 2021

January 2022

March 2022

February 2020

Harvest Finance

October 2020

Cheese Bank

November 2020

PancakeBunny

July 2021

Vee Finance

September 2021

Vesper Finance

December 2021

Uranium Finance

April 2020

The attacker passes in speciﬁc
parameters that cause the arithmetic
operations in the contract to overﬂow.

Compound

Pizza DeFi

September 2021

December 2021

Umbrella Network

March 2022

When a function calls an untrusted
contract and that contract recursively
calls the original function, it’s reentrant.

The adversary employs unique methods
to alter the contract program logic
inadvertently and cause the loss of the
DeFi application. It comprises
possessing a token copy, low-level calls,
and Self-destroying.

dForce

Akropolis

Grim Finance

Furucombo

bZx

BurgerSwap

Eleven Finance

Punk Protocol

April 2020

November 2020

December 2021

February 2020

November 2020

May 2021

June 2021

August 2021

Starstream Finance

April 2022

Warp Finance

Alpha Homora

December 2020

February 2021

Elephant Money

April 2022

31

160

5

80

55

1

150

77

140

6

624

0.9

24

3

2

35

1

50

80

5

0.7

24

2

30

14

8

7

4

3

4

7

37

11

Flash Loan

It allows users to borrow and settle
loans in real-time in a single transaction
without providing any collateral.

attacker inﬂates the price of the target asset, it can ex-
change the target asset for a larger amount of other
assets. By this step, the attacker will gain much proﬁt.

(iv) Loan Repayment. The attacker restores the assets in
the liquidity pool to their initial state to avoid losses
caused by price slippage (Wang et al., 2021c), and re-
pays the loan.

The bZx attack (PeckShield, 2020) happened in Febru-
ary 2020, and it was through the above attack steps that the
attackers made a proﬁt of about $0.9 million. The attacker
borrowed lots of ETH through the bZx platform. At Ky-
berSwap AMM, a portion of the ETH was exchanged for
sUSD tokens to drive up the price of sUSD. Next, the at-
tacker bought the sUSD from the Synthetic Depot contract
at the normal price. The attacker pledged the sUSD in the
account into the bZx protocol in exchange for ETH. As the

price of sUSD in bZx was inﬂated, it could be exchanged for
more ETH. Finally, the attacker repaid the loan.

In 2021, Vee Finance lost 35 million USD due to the
oracle vulnerability.
It had only one oracle as a price in-
put source. At the same time, the attackers proﬁted by us-
ing errors in the contract to bypass the slippage protection
checks. Similarly, the Harvest protocol used the USDT price
in Curve as the price data. Since the USDT price became
lower at this point, the attacker could pledge more USDT
with the same assets. The attacker performed 32 attacks and
proﬁted 24 million USD from the protocol (Werner et al.,
2021).

4.2. Consensus Layer Vulnerabilities

4.2.1. Sandwich Attack

Currently, the blockchain is based on the consensus of
Proof of Work, which gives bookkeeping rights to the node

First Author et al.: Preprint submitted to Elsevier

Page 10 of 26

A Survey of DeFi Security: Challenges and Opportunities

that calculates the required hash value. Nodes with book-
keeping rights can specify the order of transactions accord-
ing to their own rules. The dependency on transaction order
vulnerability is one of the factors aﬀecting the security of
smart contracts, and it also applies to DeFi applications. For
example, the sandwich attack is now widely studied.

The Sandwich attack applies to AMMs like Uniswap and
takes advantage of a special feature of AMMs, such as the
fact that for every token swap that occurs on an AMM like
Uniswap, the price of its swapped tokens changes. The steps
of the Sandwich attack are as follows:

(i) Network Spy. There are some spy nodes deployed on
the network to collect all the transactions for asset ex-
changes. If attackers consider that a transaction that
exchanges token 𝐴 for token 𝐵 is proﬁtable, they will
create two transactions for racing to control the trans-
action and make a proﬁt. It means that the price of
token 𝐵 in the liquidity pool will be increased.

(ii) Transaction Creation. The attacker creates a front-
running transaction to exchange token 𝐴 for token 𝐵,
and the price of token 𝐵 in the liquidity pool will be
raised. Suppose the price of token 𝐵 rises too much.
In that case, the slippage detection may be triggered,
and the attack will be failed, so the attacker will gen-
erally control the number of tokens purchased. The
victim is also exchanging token 𝐴 for token 𝐵, which
causes the price of token 𝐵 to continue to rise. As the
attacker’s front-running trading causes the price of to-
ken 𝐵 to rise, the victim can only obtain less than the
expected amount of token 𝐵. Finally, after the vic-
tim’s transaction, the attackers would create a back-
running transaction that converts token 𝐵 into token
𝐴, thus making a proﬁt.

According to our research, sandwich attacks often oc-
cur on AMMs, such as Uniswap, Linch, and SushiSwap.
About 30,000 Sandwich attacks have occurred on Ethereum,
which allowed the attackers to generate a proﬁt of 2 million
USD (EigenPhi, 2022).

4.3. Contract Layer Vulnerabilities

Smart contracts are the basis for implementing decen-
tralized ﬁnancial instruments. When DeFi applications were
deployed on the blockchain, some errors in the smart con-
tract might cause irreparable damage to DeFi (Torres et al.,
2018).

4.3.1. Arithmetic Vulnerability

Almost all DeFi applications involve arithmetic opera-
tions on currencies. These operations consist of adding or
subtracting from account balances and converting exchange
rates between diﬀerent tokens (Werner et al., 2021). There
have been overﬂow and precision loss vulnerabilities in the
DeFi ecosystem. These arithmetic vulnerabilities have caused
signiﬁcant damage to DeFi applications.

• Overﬂow. In April 2018, there were multiple DeFi
applications, e.g., OKEx, that suﬀered huge losses and

were forced to shut down due to an overﬂow vulnera-
bility in the ERC-20 token contract, e.g., MESH and
UGToken. There is a commonality in this overﬂow
event, such as the problem caused by the transferProxy()
function in the contract in Listing 6 (Etherscan, 2018).

The overﬂow vulnerability appears in line 2 of Listing
6 (Etherscan, 2018). Since fee and value are both
input parameters, they can be controlled artiﬁcially.
Then an attacker can design the incoming parameters
so that their size exceeds the storage range of uint type
and an overﬂow occurs. When an overﬂow occurs, it
causes the unsigned integer to ﬂip to 0 as a whole. This
means that the attacker can bypass the check of the if
statement in the second line and make it transfer the
tokens to an address with no balance (Billy, 2018).

1 function transferProxy(address _from, address

_to, uint256 _value, uint256 _fee,uint8 _v,
bytes32 _r, bytes32 _s) public
transferAllowed(_from) returns (bool){
if(balances[_from] < _fee + _value) revert();
...
Transfer(_from, _to, _value);
balances[msg.sender] += _fee;
Transfer(_from, msg.sender, _fee);
...
return true;

2
3
4
5
6
7
8
9 }

Listing 6: Snippets of MESH Token

1 function _setCompSpeed(CToken cToken, uint

compSpeed) public {

...
setCompSpeedInternal(cToken, compSpeed);

...
if (supplierIndex.mantissa == 0 && supplyIndex

.mantissa > 0) {
... }

Double memory deltaIndex = sub_(supplyIndex,

supplierIndex);

...

2
3
4 }
5
6

7
8

9

Listing 7: Snippets of Compound Contract

• Underﬂow. The larger loss in arithmetic vulnerability
is Compound Finance. Its reward payouts CompSpeed
could be set to 0, indicating the suspension of reward
payouts, and the market award index supplyIndex was
0. For new users, their award index supplierIndex
was initialized to CompInitialIndex presented by Com-
pound as 1036. An underﬂow vulnerability occurred
in Listing 7 (Flatow et al., 2021) at line 8. This caused
the formula for calculating the diﬀerence in the re-
ward index deltaIndex = sub ( supplierIndex = 0,
supplierIndex=1036) to underﬂow and became a very

First Author et al.: Preprint submitted to Elsevier

Page 11 of 26

A Survey of DeFi Security: Challenges and Opportunities

large value, while the Compound Finance reward cal-
culation relied on the value of deltaIndex.

There was no attacker in this security incident, but
rather an overpayment of rewards due to an underﬂow
vulnerability in the contract. This incident caused the
Compound 80 million USD in damages. In 2022, Um-
brella NetWork also lost 0.7 million USD due to an
underﬂow vulnerability.

• Accuracy Loss Vulnerability. The Uranium Finance
contract allowed users to borrow money using Flash
Loan. However, the contract suﬀered from accuracy
handling errors when calculating the amount to be re-
turned, resulting in a calculated amount that was 100
times larger than the actual amount (SlowMist, 2021).
It means that the attacker only needs to return a small
portion of the loan to pass the check of the require
statement in Listing 8 (Bscscan, 2021b) and pays oﬀ
the loan.

1 uint balance0Adjusted = balance0.mul(10000).sub(

amount0In.mul(16));

2 uint balance1Adjusted = balance1.mul(10000).sub(

amount1In.mul(16));

3 require(balance0Adjusted.mul(balance1Adjusted)

>=uint(_reserve0).mul(_reserve1).mul
(1000**2), 'UraniumSwap: K');

Listing 8: Snippets of UraniumPair Contract

4.3.2. Reentrancy Vulnerability

A contract executing a transaction invokes a malicious
contract account, and the malicious contract account invokes
a function in the contract before the contract state changes
(Rodler et al., 2019). The most signiﬁcant reentrancy attack
in Ethereum was the DAO attack (Buterin, 2016) that caused
a hard fork of Ethereum. Reentrancy attacks were applied to
the DeFi protocol with its development. In Table 5, 54 mil-
lion USD was lost to DeFi due to a reentrancy vulnerability.
In April 2020, the dForce protocol suﬀered a reentrancy
attack with a loss of about 24 million USD. The attackers
exploited the ERC-777 (Richards et al., 2022b) compliant
imBTC tokens. Compared to the ERC-20 token standard,
the ERC-777 token standard has one feature. When ERC-
777 tokens were sent or received, they would go through
Hook in the form of a callback to notify the sender or re-
cipient. The attacker in the incident took advantage of this
feature and re-entered the dForce contract to increase the
amount of imBTC collateral and get a higher yield (Werner
et al., 2021).

Grim Finance on the Fantom (Cronje et al., 2022) chain
lost 30 million USD due to a re-entry vulnerability. First, the
attacker created a contract to inject the cryptocurrency bor-
rowed from the service of Flash Loan into Spirit Swap (Spir-
itSwap, 2022) to obtain Spirit-LP certiﬁcates. Next, the Spirit-
LP certiﬁcates were pledged to the GrimBoostVault con-
tract in exchange for the GB-BTC-FTM, which was a to-
ken, via the depositFor() function in Listing 9 (FTMScan,

2021). Since the legitimacy of the token contract was not
veriﬁed, the attacker re-called the depositFor() function in
the safeTransferFrom() function of the malicious contract,
implementing reentrancy attack to collateralize more tokens
for proﬁt. Finally, the attacker returned the borrowed funds.

1 function depositFor(address token, uint _amount,

2
3

4
5
6
7
8
9
10

address user) public {
uint256 _pool = balance();
IERC20(token).safeTransferFrom(msg.sender,

address(this), _amount);

earn();
uint256 _after = balance();
_amount = _after.sub(_pool);
uint256 shares = 0;
if (totalSupply() == 0) {

shares = _amount;}

else{ shares = (_amount.mul(totalSupply())).

div(_pool); }

_mint(user, shares); }

11
12 }

Listing 9: Snippets of GrimBoostVault Contract

4.3.3. Logical Vulnerability

According to our investigation, a large number of vulner-
abilities in the DeFi application stem from simple program-
ming errors in the smart contract (Werner et al., 2021). Due
to the tamper-evident nature of the blockchain, these errors
can cause signiﬁcant damage to the DeFi application.

• Token Copy. This was the third attack on bZx in
2020. The attackers exploited a vulnerability in the
contract by passing the same address to the sender
parameter balancesFrom and the receiver parameter
balancesTo in the bZx contract, thus copying the bal-
ance in the account (Kistner, 2021).

• Low-level Calls. Starstream Finance is a DeFi project
on the Metis Andromeda network. As seen in Listing
10 (Baranov, 2022), the vulnerability was due to the
public function execute() of the DistributorTreasury
contract using an unchecked external call to.call(),
allowing anyone to make an external call. It meant that
an attacker could use the function to generate a call
to the withdrawTokens() function to extract the STAR
Token in the StarstreamTreasury contract.

1 function execute(address to,uint256 value,bytes

calldata data) external returns (bool,
bytes memory) {

(bool success, bytes memory result) = to.call{

value: value}(data);
return (success, result);

2

3
4 }

Listing 10: Snippets of DistributorTreasury Contract

First Author et al.: Preprint submitted to Elsevier

Page 12 of 26

A Survey of DeFi Security: Challenges and Opportunities

proﬁt by buying more WBNB and BUSD tokens with ELE-
PHANT and TRUNK.

5. Analysis of Security Optimization

Even though numerous attacks exploit various vulnera-
bilities, many research eﬀorts have succeeded in detecting
and defending against these attacks, which fuels the rapid
development of blockchain. We analyze the vulnerabilities
in the Section 3 according to the hierarchy shown in Figure 6.

• Self-destruction. Self-destruction of contracts and
destruction of tokens in contracts are both common
operations in the DeFi ecosystem. Usually, attackers
will transfer stolen valuable cryptocurrency into the
contract under their control. To avoid being traced, the
attackers will destroy the attack contract after transfer-
ring the tokens in their contracts.

The Eleven Finance attack (REKT, 2021) was caused
by the fact that the attacker could not destroy the proof
of assets when withdrawing them from the contract,
thus enabling the withdrawal of the deposit twice. The
speciﬁc reason for this attack was that the function
emergencyBurn() in the ElevenNeverSellVault insurance
contract allowed the attacker to withdraw the deposited
assets without destroying their proofs. The attacker
then called the withdraw() function in Listing 11 to
perform the normal process of withdrawing the assets
(Eleven, 2021). This incident caused a loss of approx-
imately 4 million USD to Eleven Finance.

1 function withdraw(uint256 _shares) public {
2
3

...
if(avai<_shares) IMasterMind(mastermind).
withdraw(nrvPid, (_shares.sub(avai)));
token.safeTransfer(msg.sender, _shares);
...}

4
5
6 function emergencyBurn() public {
7
8
9

...
if(avai<balan)

IMasterMind(mastermind).withdraw(nrvPid, (
balan.sub(avai)));

10
11

token.safeTransfer(msg.sender, balan);
...}

Listing 11: Snippets of ElevenNeverSellVault Contract

4.4. Application Layer Vulnerabilities

4.4.1. Utilization of Flash Loans

Flash loan is a type of unsecured lending that relies on
the atomicity of blockchain transactions at the point of exe-
cution (Qin et al., 2021c) and adds dynamism to DeFi. Un-
fortunately, attackers can use Flash Loan to reduce the cost
of the attack. According to our survey, most DeFi attacks
involved Flash Loan services.

At the same time, Flash Loan provides asset protection
for arbitrageurs to realize price manipulation of traditional
ﬁnance on DeFi. The arbitrageur uses part of the borrowed
assets to raise or lower the price of the assets in the AMM
liquidity pool, that is, the asset exchange ratio. The arbi-
trageurs then use the remaining loan to make another trade
for proﬁt (Wu et al., 2021). Finally, they repay the loan. The
Elephant Money attack event that occurred in April 2022
was based on a traditional price manipulation attack, which
resulted in a loss of 11 million USD. The attackers minted
the TRUNK stablecoin, increasing the price of the ELE-
PHANT token (Greig, 2022). They ﬁnished by making a

Figure 6: Classiﬁcation of Optimization at Each Layer

5.1. Data Security Optimizations

As the oracle mechanism and key management ﬂaws are
mentioned in 3.1, optimizing the data layer can eﬀectively
prevent attacks from exploiting the ﬂaws to tamper with the
authenticity of the data.

5.1.1. Oracle Optimization Schemes

Due to the necessity for oﬀ-chain asset information such
as pricing, there is an expanding demand for superior ora-
cles (Kaleem and Shi, 2021). There have been decentralized
and centralized related studies for this event, as summarized
in Table 6, where the ’C’ means centralized, ’D’ means de-
centralized, ’On’ represents the method is on-chain and ’Oﬀ’
is oﬀ-chain.

Town Crier (TC) (Zhang et al., 2016) employs SGX tech-
nology, a Trusted Execution Environment (TEE) oﬀered by
Intel, to address the issue of safe communication between
blockchain smart contract 𝑆𝐶 = (𝑆𝐶1, 𝑆𝐶2) and the net-
work layer. We assume that TC has one extra TCP layer than
the HTTPS network protocol for providing dependable data
sources. When 𝑆𝐶1
, the pro-
gram 𝑝𝑟𝑜𝑔 created in preparation in TC receives the transac-
tion’s datagram request, then obtains the data source through
the external network’s HTTPS protocol, and ﬁnally delivers
the request with a digital signature to the requester 𝑆𝐶1
. It
separates the hostile network operation and host process.

launches a transaction to 𝑆𝐶2

Uniswap (Adams et al., 2021) automatically reconciles
the required cryptocurrency pricing information by using the
Automated Market Maker (AMM), using an on-chain smart
contract to set up the symbolic equation. We assume a cen-
tralized asset container 𝑝𝑜𝑜𝑙 with a large number of two cryp-
tocurrencies 𝑎 and 𝑏, which correspond to stocks of (𝑎) and

First Author et al.: Preprint submitted to Elsevier

Page 13 of 26

A Survey of DeFi Security: Challenges and Opportunities

Table 6
Summarization of Diﬀerent Oracle Optimization Schemes.

Key
Technologies

Features

Categories

C-On

C-Oﬀ

D-On

D-Oﬀ Others

Reference

Zhang et al.
(2016)

TEE

Operations are handled in TEE to invalidate
malicious requests at cost of throughput

Breidenbach et al.
(2022)

Node Network

The median value of multi-parties stored in
the node network to prevent tampering

Ritzdorf et al.
(2017)

Adler et al.
(2018)

Bin et al.
(2022)

Kenton
(2020)

Zhang et al.
(2020)

Adams et al.
(2021)

Wang et al.
(2021c)

Nick et al.
(2022)

Signature
Veriﬁcation

Incentivize
Voting

Sidechain
Extension

Committee
Voting

Transport protocol needs to be modiﬁed
before using to validate server information

Nash equilibrium can be satisﬁed in rational
participants but does not guarantee authenticity

It increases the scalability and throughput
as a chain, but it can also be attacked

Ability to handle lots of request transactions,
but they cannot be processed immediately

Zero-Knowledge
Proof

The price request can be proved to be correct
and does not need to modify the server

Symbolic
Equation

Track
Comparison

TEE

Trading frequently by AMM, but rivals can
proﬁt from economic attacks

The modiﬁed EVM runs historical data to
detect if the oracle is vulnerable to attacks

Several trusted computations used to prove the
data and transport it to the smart contract

(cid:34)

×

×

×

×

×

×

(cid:34)

×

×

×

×

(cid:34)

×

×

×

×

×

×

(cid:34)

×

(cid:34)

×

(cid:34)

×

×

×

×

×

×

×

×

×

×

×

(cid:34)

(cid:34)

×

×

×

×

×

×

×

(cid:34)

×

×

×

(cid:34)

×

(𝑏). Uniswap allows (𝑎) × (𝑏) = 𝑘, where 𝑘 is a constant.
When a portion of 𝑎 is borrowed, (𝑏) grows due to the drop
of (𝑎).

TLS-N (Ritzdorf et al., 2017) is an extension of Trans-
port Layer Security (TLS). TLS generates an encrypted net-
work channel for data exchange to ensure that the adversary
does not access the data of the conversation between the two
parties. TLS-N is proposed to solve the requirement of the
third trusted party. It starts evidence generation and collec-
tion after the traditional handshake, which means that the ev-
idence generator signs the handshake state with the private
key immediately after the handshake. And TLS-N records
all the handshake operations. All handshake records and
proof signatures are utilized to assure non-repudiation of the
conversation.

Provable (Nick et al., 2022) is similar to Chainlink (Brei-
denbach et al., 2022) in that it sends currency information to
Ether via operational nodes. The distinction is that the for-
mer uses trusted computing to ensure the accuracy of infor-
mation across the network and transport layers, while the lat-
ter operates outside the chain. The latter uses median value
computations to store multi-party data in the decentralized
oracle network, ensuring safe data exchange. And it is worth
noting that Chainlink uses a reputation system to stimulate
each node.

Astraea (Adler et al., 2018) provides a voting oracle ap-
proach using the game analysis. It selects the submitters of
the funding allocation scheme, the voters who vote on the
funding, and the validators who verify the correctness of the
scheme. The advantage of this strategy is that it ensures the
accuracy but not the legitimacy of the data for reasonable

participants.

Meter (Bin et al., 2022) is a sidechain built in parallel
to the blockchain using PoW consensus, increasing the main
chain’s throughput and scalability. The cryptocurrency MTR
on Meter is an autonomous and distributed coin passed to
other blockchains, such as Ethereum, through sidechain tech-
nology, making the price of the cryptocurrency stable.
It
improves not only the performance but also expansion.

MakerDAO (Kenton, 2020) collects a variety of asset
price information from several oracle sources, then the com-
mittee votes to select one set of trusted feeds and pass them
to the smart contract. However, to prevent the attacked infor-
mation from being uploaded to the chain, the oracle security
mechanism delays the input of the prices for one hour after
being obtained. Finally, the committee voted to set up an
emergency oracle to freeze a malicious oracle to prevent the
oracle crash.

DECO (Zhang et al., 2020) is similar to TLS-N, they
are both interested in evidence generation. TLS-N needs
advanced modiﬁcations to the server protocol to generate a
proof. In contrast, DECO generates a proof in this Section
using the zero-knowledge proof, which means there is no a
revelation of encryption keys. 𝑃 and 𝑉 are given a shared
key by the prover 𝑃 , the veriﬁer 𝑉 , and the TLS server 𝑆.
𝑃 initiates a query request using the shared key, 𝑆 responds
and transmits data to 𝑃 . 𝑉 detects the request, respond, and
then announces its shared key. Finally, 𝑃 proves the returned
data.

ProMutator (Wang et al., 2021c) detects whether an or-
acle is vulnerable by analyzing normal and abnormal trans-
actions against the price oracle. The transactions of price

First Author et al.: Preprint submitted to Elsevier

Page 14 of 26

A Survey of DeFi Security: Challenges and Opportunities

Table 7
Summarization of Wallet Security Optimization Schemes.

Reference

Key Scheme

Dabrowski
et al. (2021)

Khan et al.
(2019)

He et al. (2018)

Improving collaborative key generation
and signature

Combination with a cold and hot wallet
for privacy

A practical way to public key encryption

He et al.
(2019b)

Dai et al.
(2018)

A p2p wallet scheme with a routing
protocol

A lightweight wallet based on TEE

Rezaeighaleh
and Zou (2019)

A new scheme for creating sub-wallet
keys

Jian et al.
(2021)

Han et al.
(2021)

The shared key generated by T-ECDSA
for signing

Combine signatures into one based on
the bloom ﬁlter

oracle attacks are executed in the modiﬁed EVM according
to predeﬁned rules. And then the comparison of the original
and mutating traces generates reports, which has analyzed
the diﬀerences.

5.1.2. Wallet Optimization Schemes

Users initiate a transaction and sign it using the key pair,
the assets in the account are risky when the key leaks to
an adversary. In Table 7, some studies (Dabrowski et al.,
2021; Khan et al., 2019; He et al., 2018, 2019b; Dai et al.,
2018; Rezaeighaleh and Zou, 2019; Jian et al., 2021; Han
et al., 2021) proposed speciﬁc solutions for wallet manage-
ment and wallet architecture.

According to (Dabrowski et al., 2021), existing hardware
wallets migrated from the PC wallet architecture, resulting
in a bad design that does not fundamentally ﬁx the problem
when just utilizing authentication and communication en-
cryption. Interactive authentication adds several signatures
and keys to the original wallet structure, which prevents at-
tackers from manipulating the keys for transactions using a
malfunctioning wallet.

Combined with software and hardware, two android ap-
plications created in (Khan et al., 2019) provide privacy pro-
tection. It contains a cold wallet with key storage in the form
of QR codes and a hot wallet for sending transactions, re-
spectively.

He et al. (2018) presented a new practical way of public
key cryptography deployment. It formalizes the user’s inter-
actions with the management server 𝑚, the central server 𝑐,
and the proxy 𝑝. This method provides ﬁve protocols, the
ﬁrst of which initializes all parameters in preparation for se-
cure channels and veriﬁcation operations, such as producing
keys and verifying digital signatures. The second process
is registration, in which 𝑢 is bound to the 𝑚 and produces
valid login credentials. The registration data is then sent to
𝑐. The third is a backup, and the fourth is a veriﬁcation that

is utilized to perform a transaction in 𝑝. The ﬁnal service
provided by it is wallet recovery with the help of registration
and backup.

He et al. (2019b) used a routing protocol to convert the
C/S architecture into a Peer-to-Peer (P2P) structured wallet
management scheme.
It solves the multi-constraint disor-
der problem and distributes the data through a P2P network.
In addition, it proposes a new key sharing strategy called
SKN to improve the availability of keys. Users interact with
each other through a streaming network, which is a fully con-
nected network, to ensure that the same key is not stored in
the same node.

Dai et al. (2018) designed the SBLWT, a lightweight
wallet architecture which is based on TEE. The insecure stor-
age module in the normal environment only has read access
to the encrypted block header in the trusted environment,
while encrypted messages can be proactively stored in the
insecure space, thus ensuring security between message ex-
changes.

Unlike traditional forwarding wallets, Rezaeighaleh and
Zou (2019) shared the keys of the main wallet and sub-wallets
to enable the generation of various sub-wallet addresses in
a transaction. And the address generation process in the
sub-wallets is designed to secure its keys. Most importantly,
there is unnecessary to back up the sub-wallets because the
master-sub structure can derive the sub-wallets from the main
wallet.

To defend against a single point of failure, Jian et al.
(2021) proposed a Threshold-based ECDSA scheme, also
called T-ECDSA. When the number of participants is within
the threshold, they created shared private keys to sign trans-
actions. Participants outside the threshold take turns sign-
ing transactions. There is also another program (Han et al.,
2021) that uses T-ECDSA to design wallets.
It combines
multiple signatures into one signature. However, the design
of the bloom ﬁlter protects the information of the partici-
pants on a small scale.

5.2. P2P Network Optimizations

The transactions initiated by each node in Ethereum are
transmitted through P2P networks to achieve self-governance
without a third party; however, the lack of authentication
and other features leads to a series of attacks, such as the
eclipse attack(Wüst and Gervais, 2016; Marcus et al., 2018;
Xu et al., 2020; Henningsen et al., 2019) in Table 8. An in-
formation eclipse attack occurs when an aggressor removes
nodes from a network to restrict access to information from
nodes.

Wüst and Gervais (2016) proposed a novel eclipse bug,
when the block height is 𝑛, a malicious node can obtain the
block by preventing a regularly functioning node
(𝑛 + 1)𝑡ℎ
𝑁 from receiving it. It invalidates subsequent blocks, even
if node 𝑁 may receive them. However, it oﬀers some coun-
termeasures.
If there is a block request that is not corre-
sponding, the block is requested from multiple peers instead
of just one peer. Through multi-party collaborative gov-
ernance, this approach can solve denial of service attacks

First Author et al.: Preprint submitted to Elsevier

Page 15 of 26

A Survey of DeFi Security: Challenges and Opportunities

Table 8
Summarization of Network Security Optimization Schemes.

Table 9
Summarization of Consensus Security Optimization Schemes.

Reference

Key Scheme

Wüst and Gervais
(2016)

Marcus et al.
(2018)

Xu et al.
(2020)

Sending requests to multiple peers

Ensure that node ids always exist in
the query table

Analyze packets using a random
forest model

Henningsen et al.
(2019)

Increasing the default number of
peers

caused by eclipse attacks.

However, Marcus et al. (2018) suggested a series of pro-
tection methods against eclipse attacks on Ethereum, two of
which are also adopted by Geth. When a node restarts, the
client’s seeding is triggered every hour, or lookup() is called
on an empty table which stores the information in memory, but
the seeding is available only if the table is empty. However,
node IDs should always be inserted into the table to prevent
attacks. Speciﬁcally, Geth runs a lookup() on three random
targets during seeding to add more legitimate nodes from the
db which stores the information on disk to the table to pre-
vent attackers from inserting their node IDs into an empty
table during seeding.

Xu et al. (2020) provided the ETH-EDS model for ana-
lyzing packets and identifying three features in packets for
the random forest model, which is a classiﬁcation model
based on decision trees. It detects malicious nodes that iso-
late users, allowing users to defend their networks in real-
time.

Henningsen et al. (2019) proposed an optimization so-
lution for the false friend eclipse attack that exists in Geth.
The attack can be deployed with just 2 IPs and loaded on the
node immediately. The peer is the number of network nodes
that can be connected, default by 25. It is similar to Wüst and
Gervais (2016) in that it increases the peers to 50 to increase
the probability of survival of spare nodes.

5.3. Consensus Layer Optimizations

The consensus layer and the incentive layer are interde-
pendent. The design of the consensus mechanism directly
aﬀects the behavior of miners. Although many consensus
mechanisms have been proposed, such as PoW and PoS, there
is little regulation of the consensus or incentive levels. Table
9 summarizes the following optimized solutions.

Yang et al. (2021) used the tool called Fluﬀy to discover
two vulnerabilities, "Shallow copy" and "Ether Shift" in Ta-
ble 3. It ﬁrst picks test cases and then changes the trans-
actions in those cases. Next, it puts these transactions into
multiple EVMs and collects all the state and coverage at the
end of the execution. Finally, it repeats the above steps until
the state no longer changes.

As described in 3.2, fork attacks might aﬀect the secu-
rity of blockchain in terms of consensus mechanism, Zhou
et al. (2021a) developed DEFIPOSER to monitor fork behav-
iors. Figure 7 shows the process of DEFIPOSER, it prunes the

Reference

Yang et al.
(2021)

Zhou et al.
(2021a)

Swende et al.
(2017)

Lattner et al.
(2017)

Fu et al.
(2019)

Key Scheme

Execute variant transactions with
several EVMs

Build the graph and analyze it to ﬁnd
fork attacks

Randomly select an EVM version to
test transactions

Fuzz engine for parallel extraction of
functions

Test EVMs with contracts and analyze
results

patches after building the DeFi graph based on the heuris-
tic approach (Dwivedi, 2020) and then does a greedy search
of the negative cycle in the directed transaction ﬂow graph,
which means ﬁnding all possible proﬁtable cycles in the trade
ﬂow graph, to detect arbitrage transactions in cyclic or more
complicated scenarios. A binary search of all the paths ﬁnds
the most proﬁtable one. If it is within the quantization thresh-
old quantiﬁed by the Markov decision process, there is a
chance to motivate a fork attack by miners using MEV.

Figure 7: Diagram of DefiPoser core process.

Ethereum exists an EVMLab (Swende et al., 2017) li-
brary for interacting with Ethereum Virtual Machines, also
called EVMs, which are oﬃcially used to analyze the byte-
code of smart contracts. In this way, one version of the EVM
is randomly selected for a single transaction on a smart con-
tract, and then ﬁnds bugs.

Another library called LibFuzzer (Lattner et al., 2017),
was developed based on a tool chain LLVM written in C++.
It generates 𝑁 concurrent processes for functions in the con-
tract and randomly assigns subsets to them, where one of the
subsets will merge its generated corpus into the main set in
the end. These corpora are used to ﬁnd bugs using fuzz.

EVMFuzzer (Fu et al., 2019) is a tool for testing and
evaluating EVM. It takes the target EVM and its API as in-
put and then creates an execution environment for them to
test and evaluate the EVM. In this process, multiple EVMs
receive some of the same quality contracts that have been
selected and output the results in the same format. It discov-
ered a DOS attack on Geth, which was recorded as CVE-
2018-19184.

First Author et al.: Preprint submitted to Elsevier

Page 16 of 26

A Survey of DeFi Security: Challenges and Opportunities

Table 10
Summarization of Methods for Smart Contract Vulnerabilities Detection.

Reference

Key Technologies

Symbolic Execution

Target Vulnerability
Transaction State Dependency
Block Info Dependency
Unhandled Exception
Reentrancy

Machine Learning
Static Analysis

Ponzi Scheme

Formal Veriﬁcation

Logical Vulnerabilities

Luu et al.
(2016)

Chen et al.
(2018)

Amani et al.
(2018)

Gao et al.
(2019)

Xue et al.
(2020)

So et al.
(2020)

So et al.
(2021)

He et al.
(2019a)

Machine Learning
Fuzz

Machine Learning

Static Analysis
Path Protection
Technology (PPT)

Static Analysis

Greedy Contract
Ether Leaking
Suicidal Contract
Block Info Dependency
Unhandled Exception
Controlled Delegatecall
Overﬂow
Block Info Dependency
Reentrancy
Greedy Contract
Bad Randomness

Reentrancy

Arithmetic Bug
Assertion Violation
ERC-20 Standard Violation

Machine Learning
Symbolic Execution

Ether Leaking
Suicidal Contract

Huang et al.
(2021)

Machine Learning

Chen et al.
(2021)

Static Analysis

Choi et al.
(2021)

Static Analysis
Fuzz

Overﬂow
Reentrancy
Unexpected Permission Check
Bad Randomness
Transaction State Dependency
DoS Under External Inﬂuence
Strict Balance Equality
Reentrancy
Nested Call
Greedy Contract
Unchecked External Calls
Block Info Dependency
Assertion Violation
Unexpected Permission Check
Block Info Dependency
Ether Leaking
Greedy Contract
Arithmetic Bug
Unchecked External Call
DoS Under External Inﬂuence
Reentrancy
Suicidal Contract

Nam and Kil
(2022)

Formal Veriﬁcation
Game Theory

Interactive Contract
Vulnerabilities

Jin et al.
(2022)

LLVM IR
Symbolic Execution

Arithmetic Bug
Reentrancy
Suicidal Contract
Unchecked External Calls

Features

Control Flow Graph (CFG) Construction
Symbolic Execution
Core Analysis

Obtain account features from transactions
Obtain code features from OPCode
XGBoost
Formal EVM extensions with Isabelle/HOL
Logical veriﬁcation at bytecode level

Symbolic Execution
GRU
Fully Connected Network (FCN)
Fuzz

Clone Detection
Code Embedding
Similarity
Checking

Cross-contract CFG
Static Taint + PPT

Insert assertions generate many queries and
invariants, queries are validated with Solver

Hunt sequences with symbol execution
Train language model with sequences
Guide symbolic execution with the model
CFG Construction
Slicing
Graph Embedding
Similarity Checking

CFG Construction
Feature Detection
Core analysis

Collection of bytecode data streams
Select semantic information as seeds
Fuzz based on data stream feedback

Convert source ﬁles to MCMAS ﬁles
Construct contract game structure
Examine ATL properties in the structure
Convert the source code to LLVM IR
Locating Vulnerabilities
Collect ordered sets of transactions
Symbolic Execution
Veriﬁcation

5.4. Smart Contract Security Optimizations

The smart contract, which is a part of the DeFi project
connecting the data and the application layer, might alter the
state of a transaction, and cause errors. Therefore, it is criti-
cal to improve the security of contracts.

5.4.1. Smart Contract Vulnerability Detection

In this Section, we will introduce the methods in the Ta-
ble 10 which were proposed for detecting the vulnerabilities
in the smart contract. Much research(Chen et al., 2021; Luu
et al., 2016; Amani et al., 2018; He et al., 2019a; Gao et al.,
2019; Xue et al., 2020; So et al., 2020, 2021; Huang et al.,

First Author et al.: Preprint submitted to Elsevier

Page 17 of 26

A Survey of DeFi Security: Challenges and Opportunities

2021; Choi et al., 2021; Nam and Kil, 2022; Jin et al., 2022)
has been undertaken to discover contract vulnerabilities us-
ing various technological tools, such as formal veriﬁcation,
symbolic execution, and machine learning.

Combined with dynamic testing extends the ability of
symbolic execution techniques to detect unknown vulner-
abilities, thus improving the robustness of programs. Fig-
ure 8 shows an overview of ILF (He et al., 2019a) that com-
bines fuzzing, machine learning, and symbolic execution.
The system used the symbolic execution for a portion of the
contracts to generate transaction sequences as the training
dataset for a new model consisting of GRU, which is a type
of neural network and a fully connected network so that the
model can learn the fuzzing in the state after the symbolic
execution to test contracts with high coverage.

Figure 8: Schematic Diagram of ILF Process Framework.

As our best known, Oyente (Luu et al., 2016) is the ﬁrst
detection tool using symbolic execution for smart contracts.
It examines the logic of the contract code and generates con-
trol ﬂow graphs. It then instructs the Ethereum initial state
simulation run to construct feasible data ﬂow operations. Af-
ter that, the appropriate analysis methods discover various
vulnerabilities.

Chen et al. (2018) counted the frequency of opcodes in
the contract and analyzed the features of malicious accounts
through the ether ﬂow graph. Then, for vulnerability iden-
tiﬁcation, the XGBoost model (Chen and Guestrin, 2016),
which is a gradient model based on the decision tree, was
built using the features. This strategy can be utilized before
contract deployment because it does not need attributions
about the transaction.

Amani et al. (2018) formalized the EVM in terms of
bytecode using Isabelle/HOL and built a double veriﬁer logic
on reasoning about the program. They then demonstrated the
safety of the system. However, owing to the development of
Ethereum, it cannot describe the complete semantics of the
smart contract in several versions.

DefectChecker (Chen et al., 2021) uses the commands
provided by Geth to disassemble the contract bytecode into
opcodes and then split the opcodes into multiple base blocks,
executing diﬀerent instructions for each block and deﬁning
eight types of rules to detect vulnerabilities. It analyzes spe-
ciﬁc features of the vulnerability, and then diﬀerent generic
speciﬁcations are set for detecting the vulnerability based on
Chen et al. (2020a).

SmartEmbed (Gao et al., 2019) consists of two main as-

pects, structured code embedding that converts code into
word vectors and similarity checking that can detect the simi-
larity of diﬀerent vectors. It marks Solidity codes, and a new
code embedding is generated using word embedding tech-
niques, and ﬁnally, bugs can be found within a threshold by
comparing the similarity between vectors.

Clairvoyance (Xue et al., 2020) designed several path
protection techniques for reentrancy vulnerability and used
taint analysis techniques to reduce the phenomenon of false
positives from other tools. More importantly, this lightweight
approach allows analysis of cross-contract behavior.

Up to May 2022, the compiler of Solidity has over 90
versions, each with signiﬁcant updates (Beregszaszi et al.,
2022). As a result, the compiled bytecodes with the same
logic are diverse and noisy. To solve this problem, Huang
et al. (2021) labelled the data and reordered the opcodes.
This process ignores all irrelevant instructions, then analyzes
the bytecode execution process and slices the data by the la-
bel to reduce the noise impact of meaningless code. Subse-
quently, this method uses an unsupervised graph embedding
algorithm to deal with the smart contracts, each slice of code
encoded as a vector and their similarity compared for vulner-
ability detection.

Smartian (Choi et al., 2021) just started statically ana-
lyzing the contract bytecode and collecting the data stream.
The seed pool initialization predicts the sequence of trans-
actions in some data stream and considers them as seeds for
initialization. Finally, the seeds, which are the sequences of
generated transactions, are used to guide the fuzz of the data
ﬂows.

Another methodology similar to ILF uses high-quality
transaction sequences to direct symbolic execution in order
to discover susceptible contracts. SmarTest (So et al., 2021)
based on VeriSmart (So et al., 2020), ﬁrst performs sym-
bolic executions on the contracts in the training dataset, each
lasting long enough to gather all the fragile transaction se-
quences, and then utilizes these fragile transaction sequences
as the collection of training sequences for the language model.
The goal of training the language model is to create a train-
ing corpus 𝑌 from which counts of 𝑛 tuples are gathered to
guide the symbolic execution to ﬁnd fragile transaction se-
quences.

Nam and Kil (2022) examined smart contracts using the
Alternating-time Temporal Logic (ATL) model, a formal ver-
iﬁcation approach that determines if Ethereum smart con-
tracts meet certain features. Additionally, it converts So-
lidity to MCMAS, an ATL checker that requires input from
the user. It enables developers to validate the attributes they
would like to examine.

EXGEN (Jin et al., 2022) transforms the contract source
code or bytecode to an Abstract Syntax Tree (AST), which
is subsequently converted into an LLVM representation of
the uniﬁed form. Afterward, all restrictions are eliminated
utilizing symbolic execution techniques. The system then
employs a solver to resolve the constraints and establish the
order of vulnerabilities. After that, the sequence is reviewed
for reliability before being added to the blockchain.

First Author et al.: Preprint submitted to Elsevier

Page 18 of 26

A Survey of DeFi Security: Challenges and Opportunities

Table 11
Summarization of Methods for Smart Contract Vulnerability Regulation.

Reference

Target Vulnerability

Key Technologies

Features

Rodler et al.
(2019)

Reentrancy

Dynamic Taint
Technique

It traces the storage Variable and writes them into
the lock during the transaction, when an attack is
detected, the transaction would be rolled backed

ÆGIS modiﬁed the EVM to revert the codes
written by DSL, which described the vulnerability
patterns. Therefore, it can prohibit malicious
control ﬂow and data ﬂow by comparing the
patterns

Domain-Speciﬁc
Language (DSL)
Vulnerability Patterns
Voting Mechanism

Online Framework

SODA is an online framework that can be divided
into two layers. The lower layer collects EVM
information, and the higher layer provides interfaces
for developing detection apps

Patch

It ﬁrst makes the vulnerability detection utilizing
other detection tools, and then to ﬁx the contract,
it rewrites bytecode. Finally, EVMPatch tests the
ﬁxed contract with the historical transactions to
verify whether the patch is correct

Ferreira Torres
et al. (2020)

Cao et al.
(2020)

Rodler et al.
(2021)

Reentrancy

Unexpected Permission
Check

Reentrancy

Block Info Dependency

Strict Balance Equality

Unchecked External Calls

Unexpected Permission
Check

Missing Return

Greedy Contracts

Reentrancy

Arithmetic Bug

Unexpected Permission
Check

Reentrancy

Arithmetic Bug

Unmatched ERC-20
Standard

Reentrancy

Arithmetic Bug

Transaction State
Dependency

Nguyen et al.
(2021)

Ferreira Torres
et al. (2021)

Unchecked External Calls

Unexpected Permission
Check

Mapping Knowledge
Domain
Dynamic Taint Analysis

It extracts information from tracked transactions,
and builds a graph with the nodes and transactions.
Horus identiﬁed attacks with the graph and the
queries, and ﬁnally loaded the tracing assets into a
graph database

Automatic Contract
Transformation

Several runtimes in SGUARD are used to identify
control dependency, and it uses symbolic trace
generations for each loop to get more data
dependencies. When it ﬁnds and ﬁxes bugs based
on their deﬁnitions

5.4.2. Smart Contract Operation Regulation

Smart contracts can be more secure by detecting vulner-
abilities, according to Torres et al. (Ferreira Torres et al.,
2021). However, the number of assaults has not decreased,
which indicates that contract regulation needs to be improved.
It has been studied in (Rodler et al., 2019; Ferreira Torres
et al., 2020; Cao et al., 2020; Rodler et al., 2021; Ferreira Tor-
res et al., 2021; Nguyen et al., 2021) in Table 11, and we
brieﬂy introduce Sereum (Rodler et al., 2019) in Figure 9, a
tool focused on runtime monitoring and veriﬁcation of the
reentrancy bug.

The transaction manager converts all control ﬂows into
conditional jump instructions in the bytecode interpreter. The
taint engine identiﬁes data ﬂows in conditional jump instruc-
tions, tagging storage variables as the key variables and writ-
ing into the lock. The attack detector detects the variables. If
the modiﬁcation occurs, the whole transaction rolls back to
the point where the variable was marked, which is the start-
ing point of the entire transaction.

Sereum defends online smart contracts from reentrancy

Figure 9: Diagram of Sereum System Architecture.

attacks, but such systems are diﬃcult to expand to additional
weaknesses. EVMpatch (Rodler et al., 2021) intended to ad-
dress this issue by providing a bytecode rewriting engine that
updates contracts currently on the chain, and the patch pro-
gram is readily scaleable to other ﬂaws. Automated analy-
sis tools and vulnerability revelations detect and generate re-
ports on vulnerabilities, and bytecode rewriters receive vul-
nerability reports and patch the contract at the byte level.
The testing module then veriﬁes that the patch will work with
the previous transactions. After the test passes, the deployer
uploads the patched contract to Ethereum.

First Author et al.: Preprint submitted to Elsevier

Page 19 of 26

A Survey of DeFi Security: Challenges and Opportunities

Table 12
Summarization of Methods for DeFi Optimization.

Reference

Wang et al.
(2021a)

Wu et al.
(2021)

Target

Data Flow Dependency

Violation on Invariant

Price Manipulation Attack

Key Technologies

Symbolic Reasoning

Transaction Monitor

Semantic Lifting

Pattern Detection

Features
Two sections track data ﬂow dependencies and
monitor malicious transactions respectively

By collecting historical transaction data, a Cash
Flow Tree (CFT) is constructed, which is used
to recover high-level semantic information

Tokens are used to relate membership
relationships, and members work together to
maintain contracts

It is a centralized platform used for covering
multiple risks, and if the user suﬀers enough
damage, all losses can be refunded

Pricing

Decentralized
Underwriting

Market-based Approach

Multiple-chain Covers
Portfolio

Integrate Various insurance and liquidity
provision can improve the performance and
maximize insurance revenues

Automated Squeeth
Strategy

Liquidity Provider

Managed by DAO
Discretionary Coverage

Code audits and establishing reliable protocols
for bounty payments

Coverage provision is added by users, so the
coverage can be transparent, and there are
many asset pools to share risks in the smart
contract, stablecoin, and DEX

Popescu
(2020)

Unexpected Code in
Smart Contract

Mussenbrock et al.
(2017)

Ivanov et al.
(2021)

Peaster et al.
(2022)

Ivanov
(2022)

Crypto wallets

Collateral

Protocol Failure

Stablecoin

Yield

DEX

Derivatives

Options

Smart Contract

Stablecoin

Decentralized Exchange (DEX)

Many tools only detect bugs but do not quantify and track
stolen assets. To monitor stolen assets, the Eye of Horus (Fer-
reira Torres et al., 2021) employs knowledge graph technol-
ogy. It extracts data streams of vulnerable transactions using
taint analysis. Then it analyzes the input data relationships
and ﬁnds attacks from the generated logs. Finally, it obtains
the attacker’s addresses and timestamps, then loads the trans-
action information into a graphical database for access to the
asset ﬂow.

ÆGIS (Ferreira Torres et al., 2020) constructed some
control ﬂow and data ﬂow patterns describing the vulnera-
bilities and modiﬁed the EVM so that it could revert to trans-
actions against patterns during contract operation. Anyone
can submit a pattern when discovering a new vulnerability.
All voters in the chain then determine whether the pattern
can be added to the list.

SODA (Cao et al., 2020) is an online detection frame-
work for a smart contract that includes a manager, informa-
tion collector, and logger. It provides registered and unreg-
istered APIs to APPs and requires the APP to send opera-
tional information, block numbers, and diﬀerent functions to
the manager. The information collector collects all blocks,
transactions, and contract structure information for vulner-
ability detection, and the logger issues an alert if it ﬁnds
anomalies. This framework with detection APPs is compat-
ible with multiple blockchains.

Nguyen et al. (2021) proposed SGUARD, which eval-
uates control dependencies to discover malicious opcodes
once all traces are enumerated at the bytecode level and lo-
cated to external callers. Finally, the ﬂaw is corrected through

patching at the source code level. Correspondingly, it ana-
lyzes all types of data dependencies, including memory, stor-
age, and stack. However, the limitation of this work is that
there is no explicit number of iterations to obtain all data
dependencies in smart contracts.

5.5. Application Layer Optimizations

There are some market manipulations at the application
level that can lead to damage to user assets, but some re-
search and works in Table 12 exist to safeguard various ap-
plications, including optimization tools and insurance.

5.5.1. Optimization Tools

Although there is a correlation between the various lay-
ers, methods for lower levels can not fully recognize the at-
tacks against the application layer. Some research(Wang et al.,
2021a; Wu et al., 2021) makes contributions.

Wang et al. (2021a) designed Blockeye to divide the de-
tection work into two phases. In Figure 10, the ﬁrst phase
uses symbolic execution analysis in oracle to check whether
state data streams are externally manipulated to detect vul-
nerable DeFi. During the second phase, transaction moni-
tors under the chain collect transactions to extract the fea-
tures and further analysis to monitor the attack.

DeFiRanger (Wu et al., 2021) is a price manipulation
checker that ﬁrst collects transactions on Ethereum and con-
structs a tree structure on the ﬂow of cash. Then it deﬁnes
the style based on DeFi attack behavior and recovers the low-
level semantics to high-level semantics. Finally, the system
detects attacks and analyzes them to generate a report based
on the style and high-level semantics.

First Author et al.: Preprint submitted to Elsevier

Page 20 of 26

A Survey of DeFi Security: Challenges and Opportunities

6. Challenges and Future Directions
6.1. Challenges

DeFi is a mechanism built through blockchain technol-
ogy as the underlying technology that does not rely on the
operation of a centralized service. The most signiﬁcant ad-
vantage of DeFi is that funds are automatically traded through
technical protocols. Thus it eliminates the need for human
intervention, which increases liquidity in the market and thus
facilitates ﬁnancial transactions. However, DeFi still has
challenges, and the following issues can be solved to facili-
tate the ecosystem’s development better.

(i) Data issues remain a challenge. Technologies such
as oracle are already being used to solve the prob-
lem of data synchronization, and wallets protect the
key to ensure the encryption process. The improved
transmission protocols are designed to secure the data
transmission process. However, under the complete
autonomy of blockchain, the data cannot be modiﬁed
after it is transmitted on the chain in principle. An er-
ror in the data transmission process or the data source
will lead to problems in the system. The technology
in these aspects is not mature enough. It cannot fully
guarantee the correctness of data without aﬀecting the
other performance of the system, such as scalability
and throughput.

(ii) Key technologies of blockchain are not mature enough.
Starting with Bitcoin, the consensus mechanism is one
of the fundamental technologies of blockchain. Even
though it has few vulnerabilities, it still has a series of
actions against consensus rule ﬂaws that may result in
forking. More importantly, the loss it causes is signif-
icant since forking is irreversible. The smart contract
is the basis of various DAPPs, and the vulnerabilities
that exist in it are also endless. Due to the rapid de-
velopment of the smart contract, there is still a lack of
practical tools for potential vulnerabilities in it.

(iii) The technology features are not fully utilized, but there
are just migrating the existing mechanisms. The var-
ious existing economic instruments lead to technical
indicators’ failure. Because DeFi is not fully integrated
with the natural world, it currently relies on various
virtual indicators for the prices of ﬁnancial products.
However, when some data beyond the normal range
enters the system, it can lead to errors. Furthermore,
since there is no trusted third party to guarantee DeFi,
it has to rely on various protocol stacks, which leads
to fragmentation and uncertainty of assets.

(iv) The DeFi account has numerous security issues. Ac-
counts are the entities that perform transactions, and
in the real world, users use them to send transactions
to the blockchain. The new users tend to choose DeFi
apps with high transaction volumes and user activity.
Many Bot Accounts in a DeFi application could cre-
ate a risk of fraud against real users. Bot accounts are

Figure 10: Diagram of Blockeye Core Process.

5.5.2. Insurance

As the DeFi market expands, insurance is critical to en-
suring its stability (Popescu, 2020). Our research divides
risks in DeFi into market risks, technical risks, and credit
risks. However, the enormous damages experienced by reg-
ular users result from technical or credit risks. So there re-
quire insurance systems to safeguard the properties of users,
and they can be classiﬁed as centralized and decentralized.
For example, Smart Contract Cover, which oﬀers smart
contract insurance, is evaluated by the Nexus Mutual inter-
nal assessors (Popescu, 2020) to determine the cost of the
insurance. It is self-governed by the members who own the
NXM token of the pool built with "mutual", making the risk
evenly shared.

Etherisc (Mussenbrock et al., 2017) is a centralized plat-
form that oﬀers several insurance programs, including crypto
wallets and collateral. As for crypto wallets, it guarantees
wallets against hacking and the risk of theft. Another one
refers to the protection of the price of the collateral provided
by the borrower within a certain range. For example, when
the price of the collateral is reduced by more than 90% due to
a big drop in the market, the insurance will pay the original
price to the borrower.

Opyn (Peaster et al., 2022), which focuses on insurance
for option trading products, enables users to choose options
to hedge risks based on ERC20 tokens, and the protocol is
automatically performed by smart contracts for multi-party
governance. It also provides audit services and publishes all
contracts, oﬀering bounties for contract optimization.

Bridge Mutual (Ivanov, 2022) allows users to add in-
surance to products of their choice, and the decentralization
makes the entire coverage process transparent for insurance
purposes. To achieve risks shared, thousands of pools cover-
ing diverse platforms, stable currencies, and exchanges are
coeﬃcients.

Bright Union (Ivanov et al., 2021) integrates most insur-
ance in the industry and licenses to encrypt them to enable
mutual coverage without a license. It can improve cost per-
formance for higher complete coverage by combining vari-
ous insurance.

First Author et al.: Preprint submitted to Elsevier

Page 21 of 26

A Survey of DeFi Security: Challenges and Opportunities

program-controlled accounts that initiate transactions
to the DeFi app regularly, ensuring that the DeFi app
is active. DeFi lacks the means to detect bot accounts
and is still in the manual detection stage.

(v) Some DeFi users engage in irresponsible ﬁnancial con-
duct. DeFi evolved from traditional forms of ﬁnance,
and it contains the same wrong behaviors in conven-
tional ﬁnance, such as market manipulation and arbi-
trage. Most DeFi security work currently focuses on
researching smart contract vulnerabilities. It lacks the
research on wrong ﬁnancial behaviors in DeFi. The
immaturity of the related technologies and the compli-
cated economic environment have led to the diﬃculty
of behavior detection in the DeFi ecosystem.

6.2. Future Directions

In addition to cryptocurrencies, Ethereum and other sys-
tems in the 2.0 era of blockchain have a more comprehen-
sive range of ﬁnancial applications with the development of
smart contracts. However, due to the combination of multi-
ple protocol stacks and the development of blockchain tech-
nology, DeFi’s security is also gaining attention. Therefore,
we oﬀer some possible future directions for enhancement.

(i) Oracle system that can adequately connect to the out-
side world is desperately needed. DeFi services are
about quantifying the laws of the natural world through
technical methods. However, when there is a large
amount of asset price data beyond what the quanti-
ﬁed system can rate, this can cause the original quan-
tiﬁed system to run out of steam. So DeFi desperately
needs a sound Oracle system to connect the objective
external world to the DeFi system to achieve equal and
reasonable coexistence between the data.

(ii) Secure DeFi protocol development experience guide
is needed. As described in Section 5, many optimiza-
tion options are available that improve security for de-
velopers and users. Moreover, with the growth of DeFi,
more and more novices are getting into the DeFi pro-
tocol development work. And DeFi protocols’ secu-
rity optimization necessitates some prior knowledge.
As a result, most novice developers cannot eﬀectively
use the optimization tools available. So to enhance
the stable development of the industry, security guid-
ance work for DeFi protocol development is urgently
needed.

(iii) Mature sidechain technology is worth developing. Fi-
nancial projects involve many money transactions, and
DeFi is no exception. Blockchain technology is cru-
cial for DeFi services. When users initiate transac-
tions using DeFi services, the blockchain underlay pro-
cesses all the transactions before returning to the user
interaction interface. So the speed of transactions in
blockchain is signiﬁcantly correlated with the transac-
tion speed of DeFi users. Moreover, without compro-
mising security, the sidechain extension technology

will better increase the system throughput of transac-
tions to increase the number of transactions and trans-
action speed processed by the system.

(iv) The security of blockchain technology needs to be im-
proved. As the underlying technology on which DeFi
technology relies, blockchain technology needs more
security research. As summarized in Section 3, many
vulnerabilities still have caused real-world attacks. In
Section 4, we can see that these attacks have caused
severe damage, aﬀecting people’s conﬁdence in DeFi
technology. Although there have been many optimiza-
tions, the number of attacks against blockchain tech-
nology has not decreased. So it is worthwhile to con-
tinue studying security for all layers of blockchain struc-
ture, especially the smart contract layer that triggered
most of the vulnerabilities.

(v) Eﬀective multi-layer vulnerability detection tool is still
lacking. The detection method designed for a partic-
ular layer cannot detect higher-level information. For
example, detection tools designed for the smart con-
tract use the information in the smart contract, so they
cannot detect the features at the application level. Most
application-level attacks must combine multiple lay-
ers, so joint detection of vulnerabilities between mul-
tiple layers is worth investigating.

(vi) The dynamic supervision techniques for each layer can
be improved. There are many static analysis methods
and detection techniques. However, these techniques
cannot prevent the damage caused by the attack timely
when the attack occurs. Eﬃcient dynamic supervision
technology could solve this dilemma. However, there
is a lack of eﬃcient supervision technology for vari-
ous layers, including the data, network, and applica-
tion layers.

(vii) Decentralized applications should be fully integrated
with technical features. The current application de-
sign copies other existing frameworks, ensuring the
application’s usability but sacriﬁcing security. For ex-
ample, many DAPPs in DeFi simulate the real-world
design of ﬁnancial product data. However, they do not
fully consider all the circumstances. A more signiﬁ-
cant number of assets than the existing assets suddenly
entering the system will signiﬁcantly shrink the ex-
isting proportion of assets. Thus, market participants
cannot have the right to master the assets. Therefore,
the DAPPs should take full advantage of the technical
features instead of abandoning the design framework,
thus leading to an imperfect combination.

7. Conclusion

DeFi is a new type of platform based on blockchain tech-
nology that may increase the number of ﬁnancial transac-
tions while also eﬃciently enhancing the development of
ﬁnance. This paper is the ﬁrst systematic analysis of all

First Author et al.: Preprint submitted to Elsevier

Page 22 of 26

A Survey of DeFi Security: Challenges and Opportunities

levels of vulnerability, real-world attacks, and optimization
schemes. Furthermore, based on our systematic analysis, we
provide some DeFi challenges and future directions. First,
we start with a systematic analysis of each layer, and a se-
ries of vulnerabilities are summarized. For each vulnerabil-
ity, we investigate real-world attack cases and explore the
vulnerabilities used in each case. We then summarize the
studies on optimizing for these vulnerabilities at each layer.
Finally, we summarize the dilemmas and security issues en-
countered. In terms of the future directions of optimization,
we believe that comprehensive attack analysis and monitor-
ing are critical to DeFi security.

References
Adam, S., Péter, S., Jeﬀrey, W., 2013. Go ethereum:oﬃcial go implemen-
https://geth.ethereum.org/.

tation of the ethereum protocol. URL:
(accessed 3 August 2022).

Adams, H., Zinsmeister, N., Salem, M., Keefer, R., Robinson, D., 2021.
Uniswap v3 core. URL: https://uniswap.org/whitepaper-v3.pdf. (ac-
cessed 24 July 2022).

Adler, J., Berryhill, R., Veneris, A., Poulos, Z., Veira, N., Kastania, A.,
2018. Astraea: A decentralized blockchain oracle, in: Proceedings of
the IEEE international conference on internet of things (IThings) and
IEEE green computing and communications (GreenCom) and IEEE cy-
ber, physical and social computing (CPSCom) and IEEE smart data
(SmartData), pp. 1145–1152.

Amani, S., Bégel, M., Bortin, M., Staples, M., 2018. Towards verifying
ethereum smart contract bytecode in isabelle/hol, in: Proceedings of
the 7th ACM SIGPLAN International Conference on Certiﬁed Programs
and Proofs (CPP), pp. 66–77.

Amler, H., Eckey, L., Faust, S., Kaiser, M., Sandner, P., Schlosser, B., 2021.
Deﬁ-ning deﬁ: Challenges & pathway, in: Proceedings of the 3rd Con-
ference on Blockchain Research & Applications for Innovative Networks
and Services (BRAINS), pp. 181–184.

Angeris, G., Chitra, T., 2020. Improved price oracles: Constant function
market makers, in: Proceedings of the 2nd ACM Conference on Ad-
vances in Financial Technologies (AFT), pp. 80–91.

Arapinis, M., Gkaniatsou, A., Karakostas, D., Kiayias, A., 2019. A for-
mal treatment of hardware wallets, in: Proceedings of the International
Conference on Financial Cryptography and Data Security (FC), pp. 426–
445.

BadgerDAO, O., 2021. Badgerdao exploit technical post mortem. URL:
https://badger.com/technical-post-mortem. (accessed 24 July 2022).

Baranov, V., 2022.

Distributortreasury code.

URL:

https:

//andromeda-explorer.metis.io/address/0x6f99b960450662d67bA7DCf
78ac959dBF9050725/contracts/. (accessed 1 August 2022).

Bartoletti, M., Chiang, J.H.y., Lafuente, A.L., 2021. Towards a theory of
decentralized ﬁnance, in: Proceedings of the International Conference
on Financial Cryptography and Data Security (FC), pp. 227–232.

Baum, C., David, B., Frederiksen, T.K., 2021. P2dex: privacy-preserving
decentralized cryptocurrency exchange, in: Proceedings of the Inter-
national Conference on Applied Cryptography and Network Security
(ACNS), pp. 163–194.

Bekemeier, F., 2021. Deceptive assurance? a conceptual view on sys-
temic risk in decentralized ﬁnance (deﬁ), in: Proceedings of the 4th
International Conference on Blockchain Technology and Applications
(ICBTA), pp. 76–87.

Beregszaszi, A., Śliwak, K., et al., 2022. Solidity releases. URL: https:
//blog.soliditylang.org/category/releases/. (accessed 21 July 2022).
Billy, C., 2018. Integer overﬂow found in multiple erc20 smart contracts.
https://medium.com/@peckshield/integer-overflow-i-e-proxyov

URL:
erflow-bug-found-in-multiple-erc20-smart-contracts-14fecfba2759/.
(accessed 1 August 2022).

Bin, Q., Zhang, S., et al., 2022. Meter whitepaper. URL: https://www.al
lcryptowhitepapers.com/meter-whitepaper/. (accessed 1 August 2022).

Bouteloup, J., 2022. Rekt. URL:

https://rekt.news/leaderboard/. [ac-

cessed on 27 July, 2022].

Breidenbach, L., Cachin, C., Chan, B., et al., 2022. Chainlink 2.0: Next
steps in the evolution of decentralized oracle networks. URL: https:
//chain.link/whitepaper. (accessed 3 August 2022).

Bscscan, T., 2021a.

URL:
https://bscscan.com/address/0x7e0c621ea9f7afd5b86a50b0942eaee68b

Meerkat ﬁnance contract code.

04a61c#code. [accessed on 6 June, 2022].
Bscscan, T., 2021b. Uraniumpair code. URL:

https://bscscan.com/ad
dress/0xa08c4571b395f81fbd3755d44eaf9a25c9399a4a#code/. (accessed 16
June 2022).
Buterin, V., 2016.

URL:
https://blog.ethereum.org/2016/06/17/critical-update-re-dao-vulne

Critical update re: Dao vulnerability.

rability/. (accessed 3 August 2022).

Buterin, V., et al., 2014. A next-generation smart contract and decentralized

application platform. white paper , 2–1.

Caldarelli, G., Ellul, J., 2021. The blockchain oracle problem in decentral-
ized ﬁnance—a multivocal approach. Applied Sciences 11, 7572. doi:
https://doi.org/10.3390/app11167572.

Cao, R., Chen, T., Li, T., Luo, X., Gu, G., Zhang, Y., Liao, Z., Zhu, H.,
Chen, G., He, Z., Tang, Y., Lin, X., Zhang, X., 2020. Soda: A generic
online detection framework for smart contracts, in: Proceedings of the
27th Network and Distributed System Security Symposium (NDSS), pp.
1–17.

Chen, J., Xia, X., Lo, D., Grundy, J., Luo, X., Chen, T., 2020a. Deﬁn-
ing smart contract defects on ethereum. IEEE Transactions on Software
Engineering , 327–345doi: https://doi.org/10.1109/TSE.2020.2989002.
Chen, J., Xia, X., Lo, D., Grundy, J., Luo, X., Chen, T., 2021. De-
fectchecker: Automated smart contract defect detection by analyzing
evm bytecode. IEEE Transactions on Software Engineering doi: https:
//doi.org/10.1109/TSE.2021.3054928.

Chen, T., Feng, Y., Li, Z., Zhou, H., Luo, X., Li, X., Xiao, X., Chen, J.,
Zhang, X., 2020b. Gaschecker: Scalable analysis for discovering gas-
ineﬃcient smart contracts. IEEE Transactions on Emerging Topics in
Computing 9, 1433–1448.

Chen, T., Guestrin, C., 2016. Xgboost: A scalable tree boosting system, in:
Proceedings of the 22nd acm sigkdd international conference on knowl-
edge discovery and data mining (KDD), pp. 785–794.

Chen, T., Li, X., Luo, X., Zhang, X., 2017a. Under-optimized smart con-
tracts devour your money, in: Proceedings of the 24th IEEE international
conference on software analysis, evolution and reengineering (SANER),
pp. 442–446.

Chen, T., Li, X., Wang, Y., Chen, J., Li, Z., Luo, X., Au, M.H., Zhang, X.,
2017b. An adaptive gas cost mechanism for ethereum to defend against
under-priced dos attacks, in: Proceedings of the International conference
on information security practice and experience (ISPEC), pp. 3–24.
Chen, T., Li, Z., Zhu, Y., Chen, J., Luo, X., Lui, J.C.S., Lin, X., Zhang,
X., 2020c. Understanding ethereum via graph analysis. ACM Transac-
tions on Internet Technology 20, 1–32. doi: https://doi.org/10.1145/
3381036.

Chen, W., Zheng, Z., Cui, J., Ngai, E., Zheng, P., Zhou, Y., 2018. Detecting
ponzi schemes on ethereum: Towards healthier blockchain technology,
in: Proceedings of world wide web conference (WWW), pp. 1409–1418.
Choi, J., Kim, D., Kim, S., Grieco, G., Groce, A., Cha, S.K., 2021. Smar-
tian: Enhancing smart contract fuzzing with static and dynamic data-
ﬂow analyses, in: Proceedings of the 36th IEEE/ACM International
Conference on Automated Software Engineering (ASE), pp. 227–239.
Coinchange, Financial, I., 2022. Regulated decentralized ﬁnance (rdeﬁ) is
paving the way for exponential growth. URL:
https://www.globenew
swire.com/news-release/2022/05/04/2435410/0/en/Regulated-Decentral
ized-Finance-rDeFi-is-Paving-The-Way-for-Exponential-Growth.html.
(accessed 25 July 2022).

bZx Contributor, 2021. Preliminary post mortem. URL: https://bzx.netw

ork/blog/prelminary-post-mortem. (accessed 26 July 2022).
Cronje, A., Kong, M., Alexander, et al., 2022. Fantom. URL:

https:

//fantom.foundation/. (accessed 1 August 2022).

CryptoSec, 2022. Documented timeline of deﬁ exploits. URL:

https:

//cryptosec.info/defi-hacks/. (accessed 27 July 2022).

First Author et al.: Preprint submitted to Elsevier

Page 23 of 26

CVE, 2022. Cve search results. URL: https://cve.mitre.org/cgi-bin/cve

ference on Blockchain Technology (CVCBT), pp. 1–15.

A Survey of DeFi Security: Challenges and Opportunities

key.cgi?keyword=smart+contract. (accessed 21 July 2022).

Dabrowski, A., Pfeﬀer, K., Reichel, M., Mai, A., Weippl, E.R., Franz, M.,
2021. Better keep cash in your boots-hardware wallets are the new single
point of failure, in: Proceedings of the ACM CCS Workshop on Decen-
tralized Finance and Security (DeFi), pp. 1–8.

Dai, W., Deng, J., Wang, Q., Cui, C., Zou, D., Jin, H., 2018. Sblwt: A
secure blockchain lightweight wallet based on trustzone. IEEE Access
6, 40638–40648. doi: https://doi.org/10.1109/ACCESS.2018.2856864.
Daian, P., 2016. Analysis of the dao exploit. URL: https://hackingdistr
ibuted.com/2016/06/18/analysis-of-the-dao-exploit/. (accessed 3 Au-
gust 2022).

Daian, P., Goldfeder, S., Kell, T., Li, Y., Zhao, X., Bentov, I., Breiden-
bach, L., Juels, A., 2020. Flash boys 2.0: Frontrunning in decentral-
ized exchanges, miner extractable value, and consensus instability, in:
Proceedings of the IEEE Symposium on Security and Privacy (SP), pp.
910–927.

Di Angelo, M., Salzer, G., 2020. Characteristics of wallet contracts on
ethereum, in: Proceedings of the 2nd Conference on Blockchain Re-
search & Applications for Innovative Networks and Services (BRAINS),
pp. 232–239.

Duan, L., Sun, Y., Zhang, K., Ding, Y., 2022. Multiple-layer security threats
on the ethereum blockchain and their countermeasures. Security and
Communication Networks 2022. doi: https://doi.org/10.1155/2022/
5307697.

Dwivedi, A.D., 2020. Security analysis of lightweight iot cipher: Chaskey.
Cryptography , 22doi: https://doi.org/10.3390/cryptography4030022.
Egberts, A., 2017. The oracle problem-an analysis of how blockchain ora-
cles undermine the advantages of decentralized ledger systems. Avail-
able at SSRN 3382343 doi: http://dx.doi.org/10.2139/ssrn.3382343.
EigenPhi, 2022. Sandwich arbitrage. URL: https://eigenphi.io/ethereum

/sandwich/. (accessed 21 July 2022).

Eleven, F., 2021. Elevenneversellvault code. URL:

https://bscsca
n.com/address/0x27dd6e51bf715cfc0e2fe96af26fc9ded89e4be8#code/. (ac-
cessed 3 August 2022).

Etherscan, 2018. Mesh token. URL:

https://etherscan.io/address/0x
3ac6cb00f5a44712022a51fbace4c7497f56ee31#code/. (accessed 1 August
2022).

Ferreira Torres, C., Baden, M., Norvill, R., Fiz Pontiveros, B.B., Jonker,
H., Mauw, S., 2020. Ægis: Shielding vulnerable smart contracts against
attacks, in: Proceedings of the 15th ACM Asia Conference on Computer
and Communications Security (SIGSAC), pp. 584–597.

Ferreira Torres, C., Iannillo, A.K., Gervais, A., et al., 2021. The eye of
horus: Spotting and analyzing attacks on ethereum smart contracts, in:
Proceedings of the International Conference on Financial Cryptography
and Data Security (FC), pp. 33–52.
Flatow, J., Hayes, G., et al., 2021.

URL:
https://etherscan.io/address/0x75442Ac771a7243433e033F3F8EaB2631e

compound ﬁnance.

22938f#code/. (accessed 21 July 2022).

FTMScan, 2021. Source of grimboostvault code. URL: https://ftmscan.co
m/address/0x660184ce8af80e0b1e5a1172a16168b15f4136bf#code. (accessed
2 August 2022).

Fu, Y., Ren, M., Ma, F., Shi, H., Yang, X., Jiang, Y., et al., 2019. Evmfuzzer:
detect evm vulnerabilities via fuzz testing, in: Proceedings of the 27th
ACM joint meeting on european software engineering conference and
symposium on the foundations of software engineering (FSE), pp. 1110–
1114.

Gao, Z., Jayasundara, V., Jiang, L., Xia, X., Lo, D., Grundy, J., 2019.
Smartembed: A tool for clone and bug detection in smart contracts
through structural code embedding, in: Proceedings of the IEEE Inter-
national Conference on Software Maintenance and Evolution (ICSME),
pp. 394–397.

Greig, J., 2022. Hackers steal more than 11 million usd from ele-
phant money deﬁ platform. URL: https://therecord.media/hackers-s
teal-more-than-11-million-from-elephant-money-defi-platform/. (ac-
cessed 21 July 2022).

Gudgeon, L., Perez, D., Harz, D., Livshits, B., Gervais, A., 2020. The
decentralized ﬁnancial crisis, in: Proceedings of the Crypto Valley Con-

Haber, S., Stornetta, W.S., 1990. How to time-stamp a digital document,
in: Proceedings of the Conference on the Theory and Application of
Cryptography (TAC), pp. 437–455.

Han, J., Song, M., Eom, H., Son, Y., 2021. An eﬃcient multi-signature wal-
let in blockchain using bloom ﬁlter, in: Proceedings of the 36th Annual
ACM Symposium on Applied Computing (SAC), pp. 273–281.

He, J., Balunović, M., Ambroladze, N., Tsankov, P., Vechev, M., 2019a.
Learning to fuzz from symbolic execution with application to smart con-
tracts, in: Proceedings of the ACM SIGSAC Conference on Computer
and Communications Security (CCS), pp. 531–548.

He, S., Wu, Q., Luo, X., Liang, Z., Li, D., Feng, H., Zheng, H., Li,
Y., 2018. A social-network-based cryptocurrency wallet-management
scheme. IEEE Access 6, 7654–7663. doi: https://doi.org/10.1109/AC
CESS.2018.2799385.

He, X., Lin, J., Li, K., Chen, X., 2019b. A novel cryptocurrency wallet
management scheme based on decentralized multi-constrained derange-
ment. IEEE Access 7, 185250–185263. doi: https://doi.org/10.1109/
ACCESS.2019.2961183.

Henningsen, S., Teunis, D., Florian, M., Scheuermann, B., 2019. Eclipsing
ethereum peers with false friends. arXiv preprint arXiv:1908.10141 doi:
https://doi.org/1908.10141/arXiv.1908.10141.

Huang, J., Han, S., You, W., Shi, W., Liang, B., Wu, J., 2021. Hunting
vulnerable smart contracts via graph embedding based bytecode match-
ing. IEEE Transactions on Information Forensics and Security 16, 2144–
2156. doi: https://doi.org/10.1109/TIFS.2021.3050051.

Ivanov, K., 2022.

Bridge mutual white paper.
//uploads-ssl.webflow.com/5fac3e348dbd5932a7578690/60a7ffd8a8874f
c955e580ac_Bridge%20Mutual%20WP%20v1.pdf. (accessed 1 August 2022).
Ivanov, K., Kool, J., et al., 2021. Bright union. URL: https://brightunio

URL:

https:

n.io/. (accessed 21 July 2022).

Jakobsson, M., Juels, A., 1999. Proofs of work and bread pudding protocols,

in: Secure information networks. Springer, pp. 258–272.

Jensen, J.R., von Wachter, V., Ross, O., 2021. An introduction to decentral-
ized ﬁnance (deﬁ). Complex Systems Informatics and Modeling Quar-
terly , 46–54doi: https://doi.org/10.7250/csimq.2021-26.03.

Jian, Z., Ran, Q., Liyan, S., 2021. Securing blockchain wallets eﬃciently
based on threshold ecdsa scheme without trusted center, in: Proceed-
ings of the Asia-Paciﬁc Conference on Communications Technology and
Computer Science (ACCTCS), pp. 47–51.

Jin, L., Cao, Y., Chen, Y., Zhang, D., Campanoni, S., 2022. Exgen: Cross-
platform, automated exploit generation for smart contract vulnerabil-
ities.
IEEE Transactions on Dependable and Secure Computing doi:
https://doi.org/10.1109/TDSC.2022.3141396.

Kaleem, M., Shi, W., 2021. Demystifying pythia: A survey of chainlink
oracles usage on ethereum, in: Proceedings of the International Confer-
ence on Financial Cryptography and Data Security (FC), Springer. pp.
115–123.

Kaliski, B., 2000. PKCS# 5: Password-based cryptography speciﬁcation

version 2.0. Technical Report. RSA Laboratories.

Kenton, P., 2020. The maker protocol: Makerdao’s multi-collateral dai
(mcd) system. URL: https://makerdao.com/en/whitepaper/. [accessed
on 31 July, 2022].

Khan, A.G., Zahid, A.H., Hussain, M., Riaz, U., 2019. Security of cryp-
tocurrency using hardware wallet and qr code, in: Proceedings of Inter-
national Conference on Innovative Computing (ICIC), IEEE. pp. 1–10.
Kistner, K.J., 2021. itoken duplication incident report. URL: https://bz

x.network/blog/incident/. (accessed 21 July 2022).

Kumar, M., Nikhil, N., Singh, R., 2020. Decentralising ﬁnance using de-
centralised blockchain oracles, in: Proceedings of the International Con-
ference for Emerging Technology (INCET), pp. 1–4.

Lashkari, B., Musilek, P., 2021. A comprehensive review of blockchain
consensus mechanisms. IEEE Access , 43620–43652doi: https://doi.
org/10.1109/ACCESS.2021.3065880.

Lattner, C., Topper, C., Pilgrim, S., et al., 2017.

libfuzzer – a library for
coverage-guided fuzz testing. URL: https://llvm.org/docs/LibFuzzer.
html. (accessed 26 July 2022).

Li, X., Chen, T., Luo, X., Wang, C., 2021. Clue: towards discovering locked

First Author et al.: Preprint submitted to Elsevier

Page 24 of 26

A Survey of DeFi Security: Challenges and Opportunities

cryptocurrencies in ethereum, in: Proceedings of the 36th Annual ACM
Symposium on Applied Computing (SAC), pp. 1584–1587.

Li, X., Chen, T., Luo, X., Yu, J., 2020a. Characterizing erasable accounts
in ethereum, in: Proceedings of the International Conference on Infor-
mation Security (ISC), Springer. pp. 352–371.

Li, X., Chen, T., Luo, X., Zhang, T., Yu, L., Xu, Z., 2020b. Stan: Towards
describing bytecodes of smart contract, in: Proceedings of the 20th IEEE
International Conference on Software Quality, Reliability and Security
(QRS), IEEE. pp. 273–284.

Li, X., Jiang, P., Chen, T., Luo, X., Wen, Q., 2020c. A survey on the security
of blockchain systems. Future Generation Computer Systems 107, 841–
853. doi: https://doi.org/10.1016/j.future.2017.08.020.

Liu, Q., Yu, L., Jia, C., 2020. Mover: stabilize decentralized ﬁnance system
with practical risk management, in: Proceedings of the 2nd Conference
on Blockchain Research & Applications for Innovative Networks and
Services (BRAINS), pp. 55–56.

Luu, L., Chu, D.H., Olickel, H., Saxena, P., Hobor, A., 2016. Making smart
contracts smarter, in: Proceedings of the ACM SIGSAC conference on
computer and communications security (CCS), pp. 254–269.

Luu, L., Teutsch, J., Kulkarni, R., Saxena, P., 2015. Demystifying
incentives in the consensus computer, in: Proceedings of the 22nd
ACM SIGSAC Conference on Computer and Communications Security
(CCS), pp. 706–719.

Lyanchev, J., 2022. Over $700 million liquidated as terra (luna) crashes
below $1. URL: https://cryptopotato.com/over-700-million-liquida
ted-as-terra-luna-crashes-below-1/. (accessed 24 July 2022).

Marcus, Y., Heilman, E., Goldberg, S., 2018. Low-resource eclipse attacks
on ethereum’s peer-to-peer network. Cryptology ePrint Archive doi: ht
tps://eprint.iacr.org/2018/236.

Mingxiao, D., Xiaofeng, M., Zhe, Z., Xiangwei, W., Qijun, C., 2017. A
review on consensus algorithm of blockchain, in: Proceedings of the
IEEE international conference on systems, man, and cybernetics (SMC),
pp. 2567–2572.

Mussenbrock, C., Konstantin, A., et al., 2017. Etherisc white paper. URL:
https://uploads-ssl.webflow.com/6243075ff83d08a79dc7b307/624edb8a
4b12178635a629c6_etherisc_whitepaper_1.01_en.pdf. (accessed 5 June
2022).

Nakamoto, S., 2008. Bitcoin: A peer-to-peer electronic cash system. De-
centralized Business Review , 21260doi: http://dx.doi.org/10.2139/ss
rn.3440802.

Nam, W., Kil, H., 2022. Formal veriﬁcation of blockchain smart contracts
via atl model checking. IEEE Access doi: https://doi.org/10.1109/AC
CESS.2022.3143145.

Network, R., 2022. Community alert: Ronin validators compromised.
URL: https://roninblockchain.substack.com/p/community-alert-ronin
-validators?s=w. (accessed 27 July 2022).

Nguyen, T.D., Pham, L.H., Sun, J., 2021. Sguard: Towards ﬁxing vulnera-
ble smart contracts automatically, in: Proceedings of the IEEE Sympo-
sium on Security and Privacy (SP), pp. 1215–1229.

Nick, S., Thomas, B., Greg, K.e.a., 2022. Provable: blockchain-agnostic
oracle service for dapps developers. URL: https://defiprime.com/prov
able. (accessed 1 August 2022).

Nikolić, I., Kolluri, A., Sergey, I., Saxena, P., Hobor, A., 2018. Finding the
greedy, prodigal, and suicidal contracts at scale, in: Proceedings of the
34th annual computer security applications conference (ACSAC), pp.
653–663.

Social Sciences and Education Research Review 7, 321–349.

Qin, K., Zhou, L., Afonin, Y., Lazzaretti, L., Gervais, A., 2021a. Ceﬁ
vs. deﬁ-comparing centralized to decentralized ﬁnance. arXiv preprint
arXiv:2106.08157 doi: https://doi.org/10.48550/arXiv.2106.08157.
Qin, K., Zhou, L., Gamito, P., Jovanovic, P., Gervais, A., 2021b. An em-
pirical study of deﬁ liquidations: Incentives, risks, and instabilities, in:
Proceedings of the 21st ACM Internet Measurement Conference (IMC),
pp. 336–350.

Qin, K., Zhou, L., Gervais, A., 2022. Quantifying blockchain extractable
value: How dark is the forest?, in: Proceedings of the IEEE Symposium
on Security and Privacy (SP), IEEE. pp. 198–214.

Qin, K., Zhou, L., Livshits, B., Gervais, A., 2021c. Attacking the deﬁ
ecosystem with ﬂash loans for fun and proﬁt, in: Proceedings of the
International Conference on Financial Cryptography and Data Security
(FC), pp. 3–32.

REKT, 2021. Eleven, ﬁnance. URL:

https://rekt.news/11-rekt/. (ac-

cessed 21 July 2022).

Rezaeighaleh, H., Zou, C.C., 2019. Deterministic sub-wallet for cryp-
tocurrencies, in: Proceedings of the IEEE International Conference on
Blockchain (Blockchain), pp. 419–424.

Richards, S., Wackerow, P., Smith, C., et al., 2022a. Ethereum erc-20 stan-
dard. URL: https://ethereum.org/en/developers/docs/standards/toke
ns/erc-20/. [accessed on 1 August, 2022].

Richards, S., Wackerow, P., Smith, C., et al., 2022b. Ethereum erc-777
standard. URL: https://ethereum.org/en/developers/docs/standards/
tokens/erc-777/. [accessed on 1 August, 2022].

Ritzdorf, H., Wüst, K., Gervais, A., Felley, G., Capkun, S., 2017. Tls-n:
Non-repudiation over tls enabling-ubiquitous content signing for disin-
termediation. Cryptology ePrint Archive doi: https://eprint.iacr.or
g/2017/578.

Rodler, M., Li, W., Karame, G., Davi, L., 2019. Sereum: Protecting exist-
ing smart contracts against re-entrancy attacks, in: Proceedings of the
Network and Distributed System Security Symposium (NDSS), pp. 24–
27.

Rodler, M., Li, W., Karame, G.O., Davi, L., 2021. Evmpatch: Timely
and automated patching of ethereum smart contracts, in: Proceedings of
the 30th USENIX Security Symposium (USENIX Security), pp. 1289–
1306.

Schär, F., 2021. Decentralized ﬁnance: On blockchain-and smart contract-
based ﬁnancial markets. FRB of St. Louis Review doi: http://dx.doi.o
rg/10.20955/r.103.153-74.

Shaman, R., Chemla, J., et al., 2022. Deﬁllama. URL: https://defillam

a.com/. [accessed on 10 July, 2022].

Shbair, W.M., Gavrilov, E., State, R., 2021. Hsm-based key management
solution for ethereum blockchain, in: Proceedings of the IEEE Interna-
tional Conference on Blockchain and Cryptocurrency (ICBC), pp. 1–3.
SlowMist, 2021. Slowmist: Analysis of uranium ﬁnance’s hacked event.
URL: https://slowmist.medium.com/slowmist-analysis-of-uranium-fin
ances-hacked-event-9c9d11af7b2b. [accessed on 27 May, 2022].

So, S., Hong, S., Oh, H., 2021. Smartest: Eﬀectively hunting vulnerable
transaction sequences in smart contracts through language model-guided
symbolic execution, in: Proceedings of the 30th USENIX Security Sym-
posium (USENIX Security), pp. 17–20.

So, S., Lee, M., Park, J., Lee, H., Oh, H., 2020. Verismart: A highly precise
safety veriﬁer for ethereum smart contracts, in: Proceedings of the IEEE
Symposium on Security and Privacy (SP), pp. 1678–1694.

NVD, 2022. National vulnerability database. URL: https://nvd.nist.gov

SpiritSwap, 2022. Spirit swap home page. URL: https://www.spiritswap

/vuln/. (accessed 26 July 2022).

.finance. (accessed 24 July 2022).

Obelisk, T., 2021. Meerkat ﬁnance hack. URL: https://obeliskauditing.
com/blog/articles/meerkat-rug-article. [accessed on 6 June, 2022].
Peaster, W., Kaur, G., et al., 2022. Opyn. URL: https://www.defipulse.co

m/projects/opyn. (accessed 12 May 2022).

PeckShield, 2020.

bzx hack ii full disclosure.

URL:

https:

//medium.com/@peckshield/bzx-hack-ii-full-disclosure-with-det
ailed-profit-analysis-8126eecc1360/. [accessed on 20 July, 2022].
Popescu, A.D., 2020. Transitions and concepts within decentralized ﬁnance

(deﬁ) space. Research Terminals in the social sciences .

Suratkar, S., Shirole, M., Bhirud, S., 2020. Cryptocurrency wallet: A re-
view, in: Proceedings of the 4th International Conference on Computer,
Communication and Signal Processing (ICCCSP), pp. 1–7.

Swende, M.H., Ferrante, M.D., et al., 2017. Utilities for interacting with the
ethereum virtual machine. URL: https://github.com/ethereum/evmlab.
(accessed 21 July 2022).

Synthetix, 2019. Synthetix response to oracle incident. URL: https://blog
.synthetix.io/response-to-oracle-incident/. (accessed 21 June 2022).
Szabo, N., 1996. Smart contracts: building blocks for digital markets. EX-

Popescu, A.D., et al., 2020. Decentralized ﬁnance (deﬁ)-the lego of ﬁnance.

TROPY: The Journal of Transhumanist Thought,(16) 18, 28.

First Author et al.: Preprint submitted to Elsevier

Page 25 of 26

A Survey of DeFi Security: Challenges and Opportunities

Torres, C.F., Schütte, J., State, R., 2018. Osiris: Hunting for integer bugs in
ethereum smart contracts, in: Proceedings of the 34th Annual Computer
Security Applications Conference (ACSAC), pp. 664–676.

Wahab, A., Mehmood, W., 2018. Survey of consensus protocols. arXiv
preprint arXiv:1810.03357 doi: https://doi.org/10.48550/arXiv.1810.
03357.

Wang, B., Liu, H., Liu, C., Yang, Z., Ren, Q., Zheng, H., Lei, H., 2021a.
Blockeye: Hunting for deﬁ attacks on blockchain, in: Proceedings of
the 43rd IEEE/ACM International Conference on Software Engineering:
Companion Proceedings (ICSE), IEEE. pp. 17–20.

Wang, D., Wu, S., Lin, Z., Wu, L., Yuan, X., Zhou, Y., Wang, H., Ren, K.,
2021b. Towards a ﬁrst step to understand ﬂash loan and its applications
in deﬁ ecosystem, in: Proceedings of the Ninth International Workshop
on Security in Blockchain and Cloud Computing (SBC), pp. 23–28.
Wang, S.H., Wu, C.C., Liang, Y.C., Hsieh, L.H., Hsiao, H.C., 2021c. Pro-
mutator: Detecting vulnerable price oracles in deﬁ by mutated transac-
tions, in: Proceedings of the IEEE European Symposium on Security
and Privacy Workshops (EuroS&PW), pp. 380–385.

Wang, Z., Qin, K., Minh, D.V., Gervais, A., 2022. Speculative multipliers
on deﬁ: Quantifying on-chain leverage risks. Financial Cryptography
and Data Security doi: https://doi.org/10.1016/j.cose.2019.101604.
Werner, S.M., Perez, D., Gudgeon, L., Klages Mundt, A., Harz, D.,
arXiv preprint

et al, K., 2021. Sok: Decentralized ﬁnance (deﬁ).
arXiv:2101.08778 doi: https://doi.org/10.48550/arXiv.2101.08778.
Winter, P., Lorimer, A.H., Snyder, P., Livshits, B., 2021. What’s in
your wallet? privacy and security issues in web 3.0. arXiv preprint
arXiv:2109.06836 doi: https://doi.org/10.48550/arXiv.2109.06836.
Wood, G., et al., 2014. Ethereum: A secure decentralised generalised trans-

action ledger. Ethereum project yellow paper 151, 1–32.

Wu, S., Wang, D., He, J., Zhou, Y., Wu, L., Yuan, X., He, Q., Ren, K., 2021.
Deﬁranger: Detecting price manipulation attacks on deﬁ applications.
arXiv preprint arXiv:2104.15068 doi: https://doi.org/10.48550/arXiv.
2104.15068.

Wüst, K., Gervais, A., 2016. Ethereum eclipse attacks. Technical Report.

ETH Zurich.

Xu, G., Guo, B., Su, C., Zheng, X., Liang, K., Wong, D.S., Wang, H.,
2020. Am i eclipsed? a smart detector of eclipse attacks for ethereum.
Computers & Security 88, 101604. doi: https://doi.org/10.1016/j.co
se.2019.101604.

Xue, Y., Ma, M., Lin, Y., Sui, Y., Ye, J., Peng, T., 2020. Cross-contract
static analysis for detecting practical reentrancy vulnerabilities in smart
contracts, in: Proceedings of the 35th IEEE/ACM International Confer-
ence on Automated Software Engineering (ASE), pp. 1029–1040.
Yang, Y., Kim, T., Chun, B.G., 2021. Finding consensus bugs in ethereum
via multi-transaction diﬀerential fuzzing, in: Proceedings of the 15th
USENIX Symposium on Operating Systems Design and Implementa-
tion (OSDI), pp. 349–365.

Yazdanparast, E., 2021. All you need to know about deﬁ ﬂash loans.
URL: https://medium.com/coinmonks/all-you-need-to-know-about-def
i-flash-loans-ca0ff4592d90. [accessed on 21 May, 2022].

Zhang, F., Cecchetti, E., Croman, K., Juels, A., Shi, E., 2016. Town crier:
An authenticated data feed for smart contracts, in: Proceedings of the
ACM SIGSAC conference on computer and communications security
(CCS), pp. 270–282.

Zhang, F., Maram, D., Malvai, H., Goldfeder, S., Juels, A., 2020. Deco:
Liberating web data using decentralized oracles for tls, in: Proceedings
of the ACM SIGSAC Conference on Computer and Communications
Security (CCS), pp. 1919–1938.

Zhou, L., Qin, K., Cully, A., Livshits, B., Gervais, A., 2021a. On the just-
in-time discovery of proﬁt-generating transactions in deﬁ protocols, in:
Proceedings of the IEEE Symposium on Security and Privacy (SP), pp.
919–936.

Zhou, L., Qin, K., Torres, C.F., Le, D.V., Gervais, A., 2021b. High-
frequency trading on decentralized on-chain exchanges, in: Proceedings
of the IEEE Symposium on Security and Privacy (SP), pp. 428–445.

First Author et al.: Preprint submitted to Elsevier

Page 26 of 26

