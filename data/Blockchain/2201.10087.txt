2
2
0
2

n
a
J

5
2

]

R
C
.
s
c
[

1
v
7
8
0
0
1
.
1
0
2
2
:
v
i
X
r
a

Tree Representation, Growth Rate of Blockchain and Reward

Allocation in Ethereum with Multiple Mining Pools

Quan-Lin Li, Yan-Xia Chang, Chi Zhang

School of Economics and Management

Beijing University of Technology, Beijing 100124, China

January 26, 2022

Abstract

It is interesting but diﬃcult and challenging to study Ethereum with multiple

mining pools. One of the main diﬃculties comes from not only how to represent such

a general tree with multiple block branches (or sub-chains) related to the multiple

mining pools, but also how to analyze a multi-dimensional stochastic system due to

the mining competition among the multiple mining pools. In this paper, we ﬁrst set

up a mathematical representation for the tree with multiple block branches. Then

we provide a block classiﬁcation of Ethereum: Regular blocks (in the main chain),

orphan blocks, uncle blocks, stale blocks, and nephew blocks, and give some key

probabilities of generating the diﬀerent types of blocks by applying the law of large

numbers. Based on this, we further discuss the growth rate of blockchain, and the

reward allocation among the multiple mining pools through applying the renewal

reward theorem. Finally, we use some simulation experiments to verify our theoretical

results, and show that the approximate computation approaches developed, such as the

key probabilities, the long-term growth rate of blockchain, and the long-term reward

allocation (rate) among the multiple mining pools, can have a faster convergence.

Therefore, we provide a powerful tool for observing and understanding the inﬂuence

of the selﬁsh mining attacks on the performance of Ethereum with multiple mining

pools. We believe that the methodology and results developed in this paper will shed

light on the study of Ethereum with multiple mining pools, such that a series of

promising research can be inspired potentially.

Keywords: Ethereum; selﬁsh mining; multiple mining pools; tree representation;

1

 
 
 
 
 
 
growth rate of blockchain; reward allocation; the law of large numbers; renewal reward

theory.

1

Introduction

Bitcoin and blockchain have opened a new era of automatically processing and storing

transactions since the pioneering work by Nakamoto [26]. The transactions can be auto-

matically processed in the form of Bitcoin script through a language of Merkle tree in a

P2P network. However, the Bitcoin language is not Turing-complete owing to robust con-

cerns. On the other hand, Ethereum can break such a limitation by introducing Ethereum

Virtual Machine featuring smart contract functionality, e.g., see [6, 7]. Note that Bitcoin

and Ethereum are the two largest and most popular blockchain-based cryptocurrencies in

the world. Ethereum has gained great attention in the development of blockchain tech-

nology.

Interested readers are referred to Ethereum survey papers, for example, Wood

[40], Vujiˇci´c et al.

[35], Di Angelo et al.

[10], Mohammed et al.

[25]; Ethereum system

security by Chen et al. [9] and Praitheeshan et al. [28]; and smart contracts by Wang et

al.

[36], Dika and Nowostawski [11], Wang et al.

[37] and Atzei et al.

[1]. At the same

time, Ethereum has been developed into many practical applications from industry and

academia, e.g., see sharing economy by Bogner et al.

[5], healthcare by Sookhak et al.

[34], IoT and logistics by Augusto et al. [2], emergency service by Aung and Tantidham

[3], decentralized marketplace by Ranganthan et al. [29], and so forth.

Bitcoin and Ethereum applied the most widely used consensus mechanism: Proof-of-

Work (PoW). In a PoW blockchain system, many miners (or mining pools) competitively

mine each block which is generated by means of ﬁnding a nonce through solving a cryp-

tographic puzzle of using all the foregoing information of that blockchain in front of this

block, and then peg the block with the nonce to the blockchain. See Li et al.

[20, 21]

for more details. For the PoW blockchain system with two mining pools (honest and dis-

honest), Eyal and Sirer [12] found the selﬁsh mining attacks and applied a simple Markov

chain to study a few advantages of selﬁsh mining. Li et al.

[21] proposed the two-block

leading competitive criterion, and set up a pyramid Markov (reward) process to analyze

the operations eﬃciency and economic beneﬁt of the blockchain selﬁsh mining system.

It is seen from [12] and [21] that the mining competition between the two mining pools

can be described as a comparison of lengths of the two block branches, and the dishonest

2

mining pool develops a selﬁsh mining attack policy, see Figures 2 and 4 in Li et al. [21].

Clearly, the longest one of the two block branches is called the main chain, which is pegged

on the blockchain; while another block branch is regarded as the chain of orphan blocks,

which cannot be connected to blockchain and is returned to the transaction pool for re-

processing. Thus the orphan blocks generate a lot of waste of computing resources. Li et

al.

[21] applied the pyramid Markov (reward) process to give a detailed analysis for the

orphan blocks and their waste of computing resources. Following the two block branches

corresponding to the two mining pools, this paper analyzes the PoW blockchain system

with multiple mining pools, and ﬁnds a general tree with multiple block branches where

the dishonest block branches can fork at diﬀerent positions of a honest block branch (see

Section 3). Furthermore, under the two-block leading competitive criterion, this paper

provides a mathematical representation of the general tree with multiple block branches,

and shows that the main chain in the general tree can be determined easily by means

of the longest chain principle. Note that here our general tree is diﬀerent from that of

the GHOST protocol given in Sompolinsky and Zohar [32, 33], since our general tree is

directly built in the competing process of multiple mining pools, and the longest chain

(main chain) can be easily determined by using the mathematical representation of the

general tree with multiple block branches.

So far, only a few studies have been done on the PoW blockchain system with multiple

mining pools. Important examples include the two diﬀerent classes: (a) Simulation, and

(b) extending the Markov chain method of Eyal and Sirer [12]. For (a) simulation, since the

blockchain system with multiple mining pools is very complicated, the simulation method

becomes eﬀective and feasible. Leelavimolsilp et al.

[17] used simulation to provide a

preliminary investigation on the selﬁsh mining strategy adopted by multiple miners, and

analyzed the relative reward, the power threshold of selﬁsh miners, and the safety level

of the Bitcoin system. Under the assumptions of [17], Leelavimolsilp et al.

[18] further

studied the eﬀectiveness of the selﬁsh mining strategy. For (b) extending the Markov

chain method of Eyal and Sirer [12], readers are referred to, for example, Liu et al. [22],

Marmolejo-Coss´ıo et al. [24], Bai et al. [4], Chang [15] and Xia et al. [41]. Note that Li et

al. [21] indicated that the Markov chain given in Eyal and Sirer [12] has some deﬁciencies

and defects compared to the theory of Markov processes.

The GHOST protocol was ﬁrst introduced by Sompolinsky and Zohar [32, 33] in order

to improve the security and throughput of the Bitcoin system by using the heaviest chain

3

principle in a tree. On the other hand, Ethereum implements a simpliﬁed GHOST protocol

which refers to orphan blocks when observing which chain is the longest. In this case, the

referenced blocks are called the uncle blocks while the referencing blocks are called the

nephew blocks. For the uncle and nephew blocks, the Ethereum system with multiple

mining pools will be faced with two basic challenges. The ﬁrst challenge is how to set

up a tree structure with multiple block branches and forked positions, which expresses

the competition process of multiple mining pools. The second challenge is how to design

the rewards of uncle blocks and nephew blocks, which are used to increase the mining

enthusiasm of the multiple mining pools, and especially when those mining pools cannot

access the main chain. For the two challenging problems, so far there has not been a clear

answer or a better research yet. This motivates us in this paper to explore both setting up

the tree structure and designing the rewards of the uncle and nephew blocks. By ﬁnding

the mathematical representation of a general Ethereum tree, this paper applies the law of

large numbers and the reward renewal theorem to make some key and important progress

in the study of Ethereum systems with multiple mining pools.

There have been a few works on the uncle and nephew blocks and their reward design

in Ethereum up to now. Zhang et al.

[43, 44] analyzed the beneﬁts of selﬁsh mining

in Ethereum, and chose the maximum, 7/8 units as the uncle block reward, and 1/32

units as the nephew block reward. Lerner [19] found that the uncle block strategy may

cause the deliberate increase in the supply of Ethereum, thus it indirectly reduces the

value of Ethereum. Ritz and Zugenmaier [30] set up a Monte Carlo simulation platform

to quantify how the uncle blocks aﬀect the probability of selﬁsh mining. Chang et al.

[8] introduced the uncle block attacks to discuss the incentive compatibility among the

diﬀerent attacks. Werner et al.

[39] formally reconstructed a Sybil attack to exploit the

uncle block distribution policy in a queue-based mining pool. Chang et al. [8] and Werner

et al. [39] provided the simulation analysis for the uncle blocks in Ethereum. Zhang [42]

developed a Markov decision process model to analyze the proﬁtability and threshold of

the three-player attacks. In addition, the uncle block mechanism can improve the security

of Ethereum systems with multiple mining pools. For the details of the two (honest and

dishonest) mining pools, interested readers are referred to Feng and Niu [13], Grunspan

and P´erez-Marco [14], Kang et al.

[16], [23] and Wang et al.

[38]. Comparing with the

studies above, this paper proposes a new method with two consecutive rounds of mining

competition for analyzing the uncle and nephew blocks, in which we set up a basic relation

4

among the uncle and nephew blocks (see Figure 11) so that the rewards of the uncle and

nephew blocks can be estimated easily (see Sections 4 and 8). Obviously, one key ﬁnding

of this paper is to reveal that the uncle blocks and the nephew blocks must appear in two

diﬀerent rounds of mining competition. This is crucial and interesting in the research of

Ethereum.

Based on the above analysis, we summarize the main contributions of this paper as

follows:

1. Under the two-block leading competitive criterion, we describe an Ethereum system

with one honest mining pool and multiple dishonest mining pools, set up a general

tree with multiple block branches where the multiple dishonest block branches can

fork at diﬀerent positions of the one honest block branch, and provide a mathematical

representation of the general tree. By using the mathematical representation of tree,

we provide an eﬀective method to easily determine the main chain by means of the

longest chain principle. (See Sections 2 and 3)

2. By using the mathematical representation of tree, we propose a two-stage mechanism

to ﬁnd the uncle and nephew blocks and then design the uncle block and nephew

block rewards in two consecutive rounds of mining competition. (See Sections 4 and

8)

3. We apply the law of large numbers to study some key probabilities in the Ethereum

system with multiple mining pools, and deﬁne and compute some key ratios: The

main chain ratio, the orphan block ratio, the uncle block ratio, the stale block ratio,

and the chain quality. Note that the key ratios are necessary and useful in the

security analysis of Ethereum systems with multiple mining pools. (See Sections 5

and 6)

4. On the one hand, we provide expression for the long-term growth rate of blockchain

by using the renewal reward theory, which is one of the most important indicators

for the Ethereum system, where the growth rate of blockchain is the block number

in all the main chains increasing per unit time. (See Section 7). On the other hand,

once the uncle and nephew block rewards are determined, we provide expressions

both for the long-term reward allocation and for the long-term reward allocation

rate to each mining pool by using the renewal reward theory. (See Sections 8 and 9)

5

5. We use some simulation experiments to discuss the Ethereum system with one hon-

est mining pool and two dishonest mining pools, verify how the key probabilities of

Ethereum are obtained approximately by using the law of large numbers, and ana-

lyze the performance measures of the Ethereum system, for example, the long-term

growth rate of blockchain, the long-term reward allocation and the long-term reward

allocation rate to each mining pool. We show that the approximative computation

of the performance measures of the Ethereum system can have a faster convergence.

(See Section 10)

The remainder of this paper is organized as follows. Section 2 describes an Ethereum

system with multiple mining pools and provides the mathematical representation of a

general tree with multiple block branches. Section 3 gives some examples with one honest

mining pool and two dishonest mining pools for analyzing the mathematical representation

of the general tree. Section 4 introduces a classiﬁcation of blocks, gives some conditions

under which the orphan block can become an uncle block, and provides a two-stage mech-

anism to determine the uncle and nephew blocks. Section 5 studies some key probabilities

of Ethereum by using the law of large numbers. Section 6 deﬁnes some key ratios for the

general tree with multiple block branches. Section 7 applies the renewal reward theory to

discuss the long-term growth rate of blockchain. Section 8 provides a long-term reward

allocation to each mining pool by means of the renewal reward theory. Section 9 applies

the renewal reward theory to study the reward allocation rates among the multiple mining

pools. Section 10 conducts simulation experiments to analyze the performance measures

of the Ethereum system. Section 11 provides some concluding remarks.

2 Model Description

In this section, we describe an Ethereum system with multiple mining pools. The mining

competition among the multiple mining pools directly leads to a general tree forked at the

diﬀerent positions of the honest block branch by the multiple dishonest block branches.

Based on this, one of our key ﬁndings is to provide a mathematical representation for

such a tree with multiple block branches. In addition, we introduce some mathematical

notations used in our later study.

In a PoW Ethereum with multiple mining pools, the mining competition among the

multiple mining pools is a main way to build the blockchain by means of solving the PoW

6

mathematical puzzles. In the process of mining competition, some transactions are ﬁrst

packaged as a block with ﬁnite sizes (see Li et al. [20]), and then the block needs a nonce

which is found through solving the PoW mathematical puzzle among the multiple mining

pools, in which the success of one mining pool is based on its mining power in proportion

to the total mining power. Once the nonce is solved by one mining pool and is written

into the block, then the block is successfully mined so that it can be pegged to the block

branch of this mining pool.

In the multiple mining pools, when the last round of mining competition ends, it is

easy to see the honest mining pool is major, so that it can begin to mine from the ﬁnal

block on the previous sub-chain. However, the ﬁrst block mined by a dishonest mining

pool can be connected to any position of the honest sub-chain, including the ﬁnal block

in the last round of mining competition, while it cannot be connected to one dishonest

sub-chain mined by the other dishonest mining pools. Based on this, we describe the tree

structure with multiple sub-chains. See Figure 1 for more details. Clearly, it is the key to

provide a mathematical representation for the tree given in Figure 1.

(cid:34)

(cid:34)

(cid:34)

(cid:36)(cid:3)(cid:73)(cid:76)(cid:81)(cid:68)(cid:79)(cid:3)(cid:69)(cid:79)(cid:82)(cid:70)(cid:78)(cid:3)(cid:82)(cid:81)(cid:3)(cid:87)(cid:75)(cid:72)(cid:3)(cid:83)(cid:85)(cid:72)(cid:89)(cid:76)(cid:82)(cid:88)(cid:86)(cid:3)(cid:79)(cid:82)(cid:81)(cid:74)(cid:72)(cid:86)(cid:87)(cid:3)(cid:86)(cid:88)(cid:69)(cid:16)(cid:70)(cid:75)(cid:68)(cid:76)(cid:81)

(cid:55)(cid:75)(cid:72)(cid:3)(cid:69)(cid:79)(cid:82)(cid:70)(cid:78)(cid:86)(cid:3)(cid:82)(cid:81)(cid:3)(cid:87)(cid:75)(cid:72)(cid:3)(cid:75)(cid:82)(cid:81)(cid:72)(cid:86)(cid:87)(cid:3)(cid:70)(cid:75)(cid:68)(cid:76)(cid:81)

(cid:55)(cid:75)(cid:72)(cid:3)(cid:69)(cid:79)(cid:82)(cid:70)(cid:78)(cid:86)(cid:3)(cid:82)(cid:81)(cid:3)(cid:87)(cid:75)(cid:72)(cid:3)(cid:71)(cid:76)(cid:86)(cid:75)(cid:82)(cid:81)(cid:72)(cid:86)(cid:87)(cid:3)(cid:70)(cid:75)(cid:68)(cid:76)(cid:81)(cid:3)(cid:20)

(cid:55)(cid:75)(cid:72)(cid:3)(cid:69)(cid:79)(cid:82)(cid:70)(cid:78)(cid:86)(cid:3)(cid:82)(cid:81)(cid:3)(cid:87)(cid:75)(cid:72)(cid:3)(cid:71)(cid:76)(cid:86)(cid:75)(cid:82)(cid:81)(cid:72)(cid:86)(cid:87)(cid:3)(cid:70)(cid:75)(cid:68)(cid:76)(cid:81)(cid:3)(cid:21)

Figure 1: A tree with multiple sub-chains

Note that the two-block leading competitive criterion was ﬁrst proposed in Li et al.

[21] in order to discuss the blockchain selﬁsh mining with two mining pools. In this paper,

such a two-block leading competitive criterion is further extended to the selﬁsh mining

with multiple mining pools. Based on this, we can set up the termination rule of mining

competition among the multiple mining pools.

Now, we provide model description for the PoW Ethereum system with multiple mining

pools as follows:

(1) Structure of PoW Ethereum system: There are m + 1 mining pools in the

PoW Ethereum system, where there are one honest mining pool and m dishonest mining

7

pools for m ≥ 1. For simplicity, we regard the blocks or sub-chain mined by the honest

mining pool as the honest blocks or sub-chain, and the blocks or sub-chains mined by

dishonest mining pools as the dishonest blocks or sub-chains.

(2) Honest mining pool: The honest mining pool in Ethereum follows the PoW

protocol with the two-block leading competitive criterion (also see 4-a below). Once

a block is mined by the honest mining pool, the complete information of this block is

immediately broadcasted to the entire P2P network so that each dishonest mining pool

can monitor its block information. Thus, all the dishonest mining pools can learn about

the length of the honest sub-chain in a timely manner.

(3) Dishonest mining pools: The dishonest mining pools in Ethereum follow the

PoW protocol with the two-block leading competitive criterion (also see 4-b below), and

they can carry out various selﬁsh mining attacks. That is, when the dishonest mining

pools launch selﬁsh attack, the blocks mined by each dishonest mining pool may not be

immediately broadcasted to the entire P2P network. In this case,only a part of the block

branch mined by one dishonest mining pool may be pegged on the blockchain when this

dishonest mining pool can set up the main chain; while another part of the block branch

is left to keep the mining competitive advantage of this dishonest mining pool in the

next round of mining competition. Thus, the honest mining pool and the other dishonest

mining pools cannot know the accurate information of blocks mined by this dishonest

mining pool.

(4) The two-block leading competitive criterion and its modiﬁcation:

(4-a) If the honest mining pool takes the lead in mining and as long as the number

of blocks mined by the honest mining pool is 2 blocks ahead of the second-longest sub-

chain mined by one of the dishonest mining pools, then the round of mining competition

terminates immediately, and the longest sub-chain mined by the honest mining pool be-

comes the main chain which is pegged onto the blockchain, while all the other sub-chains

mined by the dishonest mining pools become the chains of orphan blocks, all of which are

returned to the transaction pool without any new transaction fee.

(4-b) If one dishonest mining pool takes the lead in mining and as long as the number

of blocks mined by this dishonest pool is at least 2 blocks ahead of the second-longest sub-

chain among the other mining pools, then the sub-chain mined by this dishonest mining

pool becomes the main chain, while this dishonest pool may release only a part of the main

chain into the blockchain under a basic condition that the part of the main chain is still at

8

least 2 blocks ahead of the second-longest sub-chain, and another part of the main chain is

reserved for the next round of mining competition in order to keep the mining competitive

advantage of this dishonest mining pool. Once the part of the main chain begins to peg

onto the blockchain, the round of mining competition terminates immediately, and all the

other sub-chains become the chains of orphan blocks, all of which are returned to the

transaction pool without any new transaction fee.

(5) A key mathematical representation for the m + 1 sub-chains of the tree:

Let L = {L0, L1, L2, . . . , Lm} denote the tree with m + 1 sub-chains mined by one

honest mining pool and m dishonest mining pools, where L0 is the sub-chain mined by

the honest mining pool and Li is the sub-chain mined by the ith dishonest mining pool

for i = 1, 2, . . . , m. We write

L0 = {H1, H2, . . . , Hv} ,

where Hl denotes the lth block mined by the honest mining pool for l = 1, 2, . . . , v. That

is, there are v blocks in the sub-chain mined by the honest mining pool. Similarly, we

write

Li = nH1, H2, . . . , Hki; D(i)

ki,1, D(i)

ki,2, . . . , D(i)

ki,lio ,

where ki represents the number of honest blocks which have been mined by the honest

mining pool before the ith dishonest mining pool begins to fork after the block Hki, such
that a new sub-chain with li blocks is mined by the ith dishonest mining pool, where D(i)
ki,l
denotes the lth block mined by the ith dishonest mining pool for l = 1, 2, . . . , li,. Figure

2 provides a more intuitive understanding for the m + 1 sub-chains of the tree.

(6) A mathematical expression for the mining terminative rules:
From L0 = {H1, H2, . . . , Hv} and Li = nH1, H2, . . . , Hki; D(i)

ki,1, D(i)

ki,2, . . . , D(i)

ki,lio for

i = 1, 2, . . . , m, we write

Ω = {v} ∪ {(k1, l1) , (k2, l2) , . . . , (km, lm)} .

Further, we write

S = {v, k1 + l1, k2 + l2, . . . , km + lm} ,

where, v is the length of sub-chain mined by the honest mining pool, and ki + li is the

generalized sub-chain mined by the ith dishonest mining pool for i = 1, 2, . . . , m. Based

on this, the elements of the set S are sorted from the largest to the smallest as follows:

ω1 ≥ ω2 ≥ · · · ≥ ωm ≥ ωm+1.

9

Figure 2: A mathematical representation for the tree with m + 1 sub-chains

(6-a) If ω1 comes from the honest mining pool and ω1 − ω2 = 2, then this round of

mining competition terminates immediately; the sub-chain mined by the honest mining

pool is the main chain and is pegged onto the blockchain, while all the sub-chains mined

by the m dishonest mining pools are returned to the transaction pool.

(6-b) If ω1 comes from the ith dishonest mining pool and ω1 − ω2 ≥ 2, then this round

of mining competition may terminate, the sub-chain mined by the ith dishonest mining

pool is the main chain, and the part with ϕi blocks for ω2 + 2 ≤ ϕi ≤ ω1 of the main

chain mined by the ith dishonest mining pool begins to peg onto the blockchain, while

another part with ω1 − ϕi blocks of the main chain is reserved for the next round of mining

competition in order to keep the mining competitive advantage of the ith dishonest mining

pool. In this case, all the sub-chains mined by the other (honest and dishonest) mining

pools are returned to the transaction pool.

(6-c) If 0 ≤ ω1 − ω2 ≤ 1, then this round of mining competition cannot terminate

and the mining pools continue to mine until the two-block leading competitive criterion

is satisﬁed.

(7) The mining rewards: When a round of mining competition terminates, the

main chain is pegged onto the blockchain, and all the other sub-chains become orphan

blocks which are returned to the transaction pool, waiting for the next round of mining

competition.

10

(7-a) If the main chain comes from the honest mining pool and L0 = {H1, H2, . . . , Hv},

then the honest mining pool obtains the rewards of v blocks.

(7-b) If the main chain comes from the ith dishonest mining pool, and

Li = nH1, H2, . . . , Hki; D(i)

ki,1, D(i)

ki,2, . . . , D(i)

ki,lio ,

then the honest mining pool obtains the rewards of ki blocks. Let ω1 = ki + li, then the

ith dishonest mining pool obtains the rewards of ϕi blocks for ω2 + 2 ≤ ϕi ≤ ω1. Note

that the ω1 − ϕi blocks of the main chain cannot be pegged onto the blockchain, thus they

cannot lead to any reward for the ith dishonest mining pool.

In addition, the uncle block rewards and associated reference rewards will be assumed

and discussed in Section 4.

3 Examples for the Tree Representation

This section provides some examples to analyze the mathematical representation of the

general tree with one honest mining pool and two dishonest mining pools. Note that

the mathematical representation of tree plays a key role in the study of PoW Ethereum

systems with multiple mining pools.

In the PoW Ethereum system with multiple mining pools, the tree with multiple sub-

chains expresses the mining competition process among the honest mining pool and the

m dishonest mining pools. The following theorem provides an essential feature of the tree

with multiple sub-chains.

Theorem 1 In a round of mining competition and from the two-block leading competitive

criterion, we have

(a) if the sub-chain of the ith dishonest mining pool is the ﬁrst forked sub-chain among

all the m dishonest mining pools, then either ki = 0 or ki = 1; and

(b) if the sub-chain of the ith dishonest mining pool is not the ﬁrst forked sub-chain

among all the m dishonest mining pools, then ki ≥ 1.

Proof. (a) We provide the proof by contradiction. We assume that the sub-chain of the

ith dishonest mining pool is the ﬁrst forked sub-chain among all the m dishonest mining

pools, and ki ≥ 2. In this case, by using the two-block leading competitive criterion, it is

easy to see that the honest mining pool is at least 2 blocks ahead of the second-longest

11

sub-chain among the other mining pools, the honest mining pool immediately terminates

this round of mining competition. Obviously, it is impossible that the ith dishonest mining

pool can fork at ki ≥ 2. Therefore, this gives that either ki = 0 or ki = 1.

(b) If the sub-chain of the ith dishonest mining pool is not the ﬁrst forked sub-chain

among all the m dishonest mining pools, then there must be a jth dishonest mining pool

who is the ﬁrst one to fork at the tree for j 6= i. By using (a), either kj = 0 or kj = 1. In

this case, our discussion has two diﬀerent cases as follows:

(i) When kj = 0, since the sub-chain of the ith dishonest mining pool is not the ﬁrst

forked sub-chain among all the m dishonest mining pools, it is easy to see that the ith

dishonest mining pool can fork at a later position than the dishonest pool j, this gives

ki > kj = 0, i.e., ki ≥ 1. In this case, ki ≥ 1.

(ii) When kj = 1, since the sub-chain of the ith dishonest mining pool is not the ﬁrst

forked sub-chain among all the m dishonest mining pools, it is easy to see that the ith

dishonest mining pool can fork at a later position than the dishonest pool j, this gives

ki > kj = 1, i.e., ki ≥ 2. In this case, ki ≥ 2.

From the above two cases, we get that ki ≥ 1. This completes the proof. (cid:3)

In the remainder of this section, we analyze some examples of the honest mining pool

and one dishonest mining pool setting up the main chain, respectively.

3.1 The honest mining pool sets up the main chain

If the honest mining pool sets up the main chain in a round of mining competition, this

subsection provides four diﬀerent examples to express the tree with at most three sub-

chains.

Tree one: The 1st and 2nd dishonest mining pools have not mined any block yet,

while the honest mining pool has mined two blocks in a round of mining competition.

Thus the round of mining competition is terminated immediately. See Figure 3.

H

(cid:20)

H

(cid:21)

(cid:94)

(cid:96)
(cid:21)(cid:15) (cid:19)(cid:15) (cid:19)

Figure 3: The ﬁrst case

Tree two: The sub-chain lengths of the 1st and 2nd dishonest mining pools and the

honest mining pool are l1, 0 and v, respectively.

If k1 = 0, then the round of mining

12

competition ends due to l1 = v − 2. If k1 = 1, then the round of mining competition ends

due to l1 + 1 = v − 2. See Figure 4.

Figure 4: The second case

Tree three: The sub-chain lengths of the two dishonest mining pools are not 0, and the

two sub-chains fork at the same position. If k1 = k2 = 0, the round of mining competition

ends at the condition under which either l1 = v − 2, 1 ≤ l2 ≤ v − 2 or l2 = v − 2, 1 ≤

l1 ≤ v − 2. If k1 = k2 = 1, the round of mining competition ends at the condition under

which either l1 + 1 = v − 2, 2 ≤ l2 + 1 ≤ v − 2 or l2 + 1 = v − 2, 2 ≤ l1 ≤ v − 2. See Figure

5.

Figure 5: The third case

Tree four: The sub-chain lengths of the two dishonest mining pools are not 0, and the

two sub-chains fork at two diﬀerent positions. If k1 = 0, k2 ≥ 1, then the round of mining

competition ends at the condition under which either l1 = v − 2, 2 ≤ l2 + k2 ≤ v − 2 or

l2 +k2 = v −2, 1 ≤ l1 ≤ v −2. If k1 = 1, k2 ≥ 2, then the round of mining competition ends

at the condition under which either l1 + 1 = v − 2, 3 ≤ l2 + k2 ≤ v − 2 or l2 + k2 = v − 2, 2 ≤

13

l1 + 1 ≤ v − 2. See Figure 6.

Figure 6: The fourth case

3.2 One dishonest mining pool sets up the main chain

If one dishonest mining pool sets up the main chain in a round of mining competition,

this subsection provides four diﬀerent examples to express the tree with at most three

sub-chains.

Tree one: The sub-chain length of the 1st dishonest mining pool is at least 2, but the

sub-chain lengths of the 2nd dishonest mining pool and the honest mining pool after the

1st dishonest mining pool forks are 0. See Figure 7.

Figure 7: The ﬁrst case

Tree two: The sub-chain lengths of the 1st dishonest mining pool and the honest

mining pool after the 1st dishonest mining pool forks are positive, but the sub-chain length

of the 2nd dishonest mining pool is 0. If k1 = 0, then the round of mining competition

ends at the condition under which l1 ≥ v + 2, v ≥ 1. If k1 = 1, then the round of mining

competition ends at the condition under which l1 + 1 ≥ v + 2, v ≥ 2. See Figure 8.

14

Figure 8: The second case

Tree three: The 1st and 2nd dishonest mining pools fork at the same position, and

l1 6= 0, l2 6= 0; while the honest mining pool has a positive sub-chain length after the 1st

and 2nd dishonest mining pools fork, thus, v − k1 ≥ 1. If k1 = k2 = 0, then the round of

mining competition ends with the condition under which either l1 ≥ max {v + 2, l2 + 2}

or l2 ≥ max {v + 2, l1 + 2}. If k1 = k2 = 1, then the round of mining competition ends

at the condition under l1 + 1 ≥ max {v + 2, l2 + 3} or l2 + 1 ≥ max {v + 2, l1 + 3}. See

Figure 9.

Figure 9: The third case

Tree four: The two dishonest mining pools do not fork at the same position, and

l1 6= 0, l2 6= 0; while the honest mining pool has a positive sub-chain length after the 1st

dishonest mining pool forks, i.e., v − k1 ≥ 1. Now, we consider two cases: k1 = 0, k2 ≥ 1

and k1 = 1, k2 ≥ 2. If the 1st dishonest mining pool sets up the main chain, then the

15

round of mining competition ends at the condition under which either

l1 ≥ max {v + 2, l2 + k2 + 2} , k1 = 0, k2 ≥ 1;

or

l1 + 1 ≥ max {v + 2, l2 + k2 + 2} , k1 = 1, k2 ≥ 2.

If the 2nd dishonest mining pool sets up the main chain, then the round of mining com-

petition ends at the condition under which either

l2 + k2 ≥ max {v + 2, l1 + 2} , k1 = 0, k2 ≥ 1;

l2 + k2 ≥ max {v + 2, l1 + 3} , k1 = 1, k2 ≥ 2.

or

See Figure 10.

Figure 10: The fourth case

4 The Uncle Blocks and Reward Design

In this section, we introduce a classiﬁcation of blocks, and give some conditions under

which the orphan block can become an uncle block. Furthermore, we provide a two-stage

mechanism to determine the uncle blocks and the nephew blocks.

In the multiple sub-chains of the tree corresponding to the PoW Ethereum systems

with multiple mining pools, we divide the blocks into ﬁve diﬀerent types: Regular blocks,

orphan blocks, uncle blocks, stale blocks, and nephew blocks. Also, the orphan blocks are

16

further divided into the uncle blocks and the stale blocks, if any. See Figure 11 for an

intuitive understanding.

Figure 11: A classiﬁcation of blocks

The regular block is a block of the main chain. The uncle block must satisfy a key

condition under which the distance between the uncle block and the nephew block does

not exceed 7 blocks. The nephew block is the ﬁrst block in the next round of mining

competition, and it is used to determine the uncle blocks from the sub-chains of the tree,

as seen in Figure 11. The stale blocks follow from an uncle block in a sub-chain of the

tree, or the stale blocks are all the blocks in each sub-chain of orphan blocks.

For the mining pools in Ethereum, their reward include 4 parts: A regular block reward

17

is given by Ethereum, transaction costs (i.e. gas fee), an uncle block reward, and a nephew

reference reward. In this paper, we take the unit of economic measure as “block”, in other

words, the regular reward given by the Ethereum systems is assumed to be 1.

In the PoW Ethereum system with multiple mining pools, the main purpose of intro-

ducing the uncle blocks is to inspire the mining enthusiasm of each mining pool, especially

for those mining pools who cannot set up the main chain. In this case, they cannot obtain

any reward but have to cover some costs associated with the mining processes, such as

electricity, equipment investment, maintenance costs, staﬀ salary, management fees and

so on. Thus, providing the uncle block reward and the nephew reference reward can be a

necessary and valuable support for the multiple mining pools that take an active part in

each round of mining competition.

To show how to allocate the uncle block reward and the nephew reference reward, we

provide a two-stage reward allocation mechanism through analyzing the position among

the uncle blocks and the nephew blocks. For simplicity of analysis, the uncle blocks

are determined at the moment that a round of mining competition has been over, and a

nephew block (or the ﬁrst block) is just generated in the next round of mining competition.

That is, to determine the uncle blocks, we ﬁrst need to have the nephew block in order

that we can judge that the distance between the uncle block and the nephew block does

not exceed 7 blocks. Note that the nephew block comes from two diﬀerent cases: (i) If

all the blocks of the main chain are released at the ending moment of the last round of

mining competition, then the nephew block is the ﬁrst block mined by one of the m + 1

mining pools in the next round of mining competition. (ii) If there are some blocks of the

main chain reserved at the ending moment of the last round of mining competition, then

these reserved blocks must come from one dishonest mining pool, and the nephew block

is the ﬁrst one of the reserved blocks.

It is worthwhile to note that such a reward allocation is well related to the distance

between the uncle block and the nephew block. Table 1 shows the uncle block rewards at

some diﬀerent distances.

Table 1: Table of uncle rewards at diﬀerent distances

Distance

1

2

3

4

5

6

Uncle reward 7/8

6/8

5/8

4/8

3/8

2/8

18

In what follows we discuss some conditions under which the orphan block can become

an uncle block. Our description contains two diﬀerent cases as follows:

Case one: If the honest mining pool sets up the main chain, then one of the orphan

blocks mined by the ith dishonest mining pool becomes an uncle block and must satisfy

the following two conditions (a-1) and (a-2), also see (a) of Figure 11.

(a-1) The distance between the orphan block and its corresponding nephew block does

not exceed 7 blocks; and

(a-2) the orphan block is the ﬁrst block D(i)

ki,1 mined by the ith dishonest mining pool.
Case two: If the ith dishonest mining pool sets up the main chain, then either one of

the orphan blocks mined by the jth dishonest mining pool for j 6= i or one of the orphan

blocks mined by the honest mining pool becomes an uncle block and must satisfy the

following two conditions (b-1) and (b-2), also see (b) and (c) of Figure 11.

(b-1) The distance between the orphan block and its corresponding nephew block does

not exceed 7 blocks; and

(b-2) either the orphan block is the ﬁrst block D(j)

kj ,1 mined by the jth dishonest mining

pool or the orphan block is the ﬁrst block Hki+1 mined by the honest mining pool.

In addition to the uncle reward given in a round of mining competition, we still need

to provide a reward to the nephew block, called the nephew reference reward, which is

given in the next round of mining competition. A nephew block can obtain the nephew

reference reward: NU/32, where NU is the number of uncle blocks in this round of mining

competition. Note that, our above reward allocation is designed in two consecutive rounds

of mining competition, and, thus, is called a two-stage reward allocation mechanism.

5 The Law of Large Numbers

In this section, we apply the law of large numbers to study some key probabilities, which

are necessary and useful in our later study, such as the key ratios of Ethereum, the growth

rate of blockchain, the reward allocation rates among the mining pools, and so forth.

In a round of mining competition, both the honest mining pool and one of the dishonest

mining pools are possible to set up the main chain. Now, we provide an analysis for the

number of main chains that can be set up by either the honest mining pool or the ζth

dishonest mining pool. During the N rounds of mining competition, we denote by NH

and Nζ the numbers that the honest mining pool and the ζth dishonest mining pool can

19

set up the main chain, respectively.

It is clear that 0 ≤ NH ≤ N , 0 ≤ Nζ ≤ N , and

NH +

P

m
ζ=1 Nζ = N . Thus we have

NH
N

+

m

X
ζ=1

Nζ
N

= 1.

In the PoW Ethereum system with multiple mining pools, the competitively mining

processes can be repeated round after round, as we repeat by the similar experiments round

after round under the same conditions. Thus, we can apply the law of large numbers to

study the frequencies: NH/N and Nζ/N , and to show that they can steadily approach

some ﬁxed values for ζ = 1, 2, . . . , m. The following two theorems are obvious by the law

of large numbers, and their proof are easy and omitted here for brevity.

Theorem 2 In the PoW Ethereum system with multiple mining pools, by using the law

of large numbers, as N → ∞, we have

and for ζ = 1, 2, . . . , m,

Also, it is clear that

NH
N

Nζ
N

→ pH, a.s.,

→ pζ, a.s..

pH +

m

X
ζ=1

pζ = 1.

When the honest mining pool sets up the main chain, during the N rounds of mining

competition, we denote by N (N)

H,i the numbers that the honest mining pool
and the ith dishonest mining pool can contain one nephew block, and the ith dishonest

H,i and N (U)

H,H, N (N)

mining pool can contain one uncle block, respectively.

the N rounds of mining competition, we denote by N (N)

When the ζth dishonest mining pool sets up the main chain for ζ = 1, 2, . . . , m, during
ζ,H and N (U)
the numbers that the ζth dishonest mining pool, the honest mining pool, and the ith

ζ,H , N (N)

ζ,i , N (U)

ζ,ζ , N (N)

ζ,i

dishonest mining pool can contain one nephew block, and the honest mining pool and the

ith dishonest mining pool can contain one uncle block, respectively.

Theorem 3 In the PoW Ethereum with multiple mining pools, by using the law of large

numbers, as N → ∞, for i = 1, 2, . . . , m,

N (N)
H,H
N

→ q(N)

H,H, a.s.,

20

N (N)
H,i
N

→ q(N)
H,i ,

N (U)
H,i
N

→ q(U)

H,i , a.s.,

and for i 6= ζ and i = 1, 2, . . . , m,

N (N)
ζ,ζ
N

→ q(N)

ζ,ζ , a.s.,

N (N)
ζ,H
N
N (N)
ζ,i
N
H,H, q(N)

→ q(N)
ζ,H,

N (U)
ζ,H
N

→ q(U)
ζ,H,

→ q(N)
ζ,i ,

N (U)
ζ,i
N
H,i ≤ 1 and 0 ≤ q(U)

→ q(U)

ζ,i , a.s..

It is clear that 0 ≤ q(N)

H,i ≤ 1 for i = 1, 2, . . . , m; and 0 ≤

ζ,ζ , q(N)
q(N)

ζ,H, q(N)

ζ,i ≤ 1 and 0 ≤ q(U)

ζ,H, q(U)

ζ,i ≤ 1 for i 6= ζ and i = 1, 2, . . . , m.

6 Some Key Ratios of Ethereum

This section deﬁnes some key ratios of the PoW Ethereum system with multiple mining

pools, and provides a detailed analysis for the key ratios by means of the mathematical

representation of tree with multiple sub-chains.

In a round of mining competition, the multiple mining pools use their mined blocks to

set up a tree with multiple sub-chains. From the tree, we can classify ﬁve diﬀerent types

of blocks: Regular blocks, orphan blocks, uncle blocks, nephew blocks, and stale blocks.

Based on this, we can set up some key ratios of the PoW Ethereum system with multiple

mining pools. To this end, we deﬁne some key ratios of Ethereum from two perspectives of

eﬃciency and beneﬁt, such as chain quality, main chain length ratio, orphan block ratio,

uncle block ratio, and stale block ratio.

Deﬁnition 1 In a round of mining competition, we deﬁne

(a) The chain quality cQ: It is deﬁned as the ratio that some blocks on the main

chain mined by the honest mining pool occupy all the blocks of the main chain.

(b) The main chain length ratio rM: It is deﬁned as the ratio that the number of

blocks on the main chain over the number of blocks on the tree.

If the honest mining pool sets up the main chain, from L0 = {H1, H2, . . . , Hv} and

Li = nH1, H2, . . . , Hki; D(i)

ki,1, D(i)

ki,2, . . . , D(i)

ki,lio for i = 1, 2, . . . , m, we have

cQ,H =

v
v

= 1

21

and

rM,H =

v
m

Pi=1

.

li

v +

If the ith dishonest mining pool sets up the main chain for i = 1, 2, . . . , m, due to the

part with ϕi blocks for ω2 + 2 ≤ ϕi ≤ ω1 of the main chain are pegged on the blockchain,

while the ω1 − ϕi blocks of the main chain cannot be observed by all the other mining

pools in the P2P network, then

and

cQ,i =

ki
ki + ϕi

rM,i =

ϕi + ki
m

v + ϕi +

Pj=1, j6=i

.

lj

Deﬁnition 2 In a round of mining competition, we deﬁne

(a) The orphan block ratio rO: It is deﬁned as the ratio of the number of orphan

blocks to the number of blocks on the tree.

(b) The uncle block ratio rU: It is deﬁned as the ratio of the number of uncle blocks

to the number of blocks on the tree.

It is easy to see from Deﬁnitions 1 and 2 that

and

rM + rO = 1

rO = rU + rS.

In what follows, we ﬁrst express the orphan block ratio rO. To this end, our computa-

tion needs to consider two diﬀerent cases: The honest mining pool sets up the main chain,

and one dishonest mining pool sets up the main chain.

If the honest mining pool sets up the main chain, then

rO,H =

m

Pi=1

li

m

v +

Pi=1

.

li

22

(1)

If the ith dishonest mining pool sets up the main chain for i = 1, 2, . . . , m, due to the

part with ϕi blocks for ω2 + 2 ≤ ϕi ≤ ω1 of the main chain are pegged onto the blockchain,

while the ω1 − ϕi blocks of the main chain cannot be observed by all the other mining

pools in the P2P network, then

rO,i =

(v − ki) +

m

Pj=1, j6=i
m

lj

.

v + ϕi +

lj

Pj=1, j6=i

(2)

Now, we compute the uncle block ratio rU. Note that such a computation is a little

bit complicated.

To compute the uncle block ratio rU, it is necessary to ﬁrst determine how many orphan

blocks can become uncle blocks. To this end, our computation also needs to consider two

diﬀerent cases: The honest mining pool sets up the main chain, and one dishonest mining

pool sets up the main chain.

Case one: The honest mining pool sets up the main chain

In this case, from the tree with multiple sub-chains (e.g., see (a) of Figure 11), it is

easy to determine the nephew block, and the uncle blocks and their number. Note that

NU,H is the number of uncle blocks in the tree in this round of mining competition, thus

the uncle block ratio is given by

rU,H =

NU,H
m

v +

Pi=1

.

li

(3)

Case two: One dishonest mining pool sets up the main chain

In this case, we assume that the ith dishonest mining pool sets up the main chain, it is

clear that ω1 = ki +li. We further assume that the part with ϕi blocks for ω2 +2 ≤ ϕi ≤ ω1

of the main chain are pegged onto the blockchain, while another part with ω1 − ϕi blocks

of the main chain is left in the next round of mining competition. It is easy to see that
D(i)
is to use the block D(i)
become uncle blocks. If Hki+1 is an uncle block, then for j 6= i, D(j)
for kj ≥ ki + 1.

ki,ϕi+1 is the ﬁrst block in the next round of mining competition. Now, our ﬁrst task
kj ,1 for j 6= i can
kj ,1 is not an uncle block

ki,ϕi+1 to determine which blocks of Hki+1 and D(j)

23

From the tree with multiple sub-chains (e.g., see (b) and (c) of Figure 11), it is easy

to determine the nephew block, and the uncle blocks and their number. Note that NU,i is

the number of uncle blocks in the tree, thus the uncle block ratio is given by

rU,i =

NU,i

m

v + ϕi +

Pj=1, j6=i

.

lj

(4)

In the remainder of this section, we apply the law of large numbers to discuss the key

ratios of the Ethereum system.

In the rth round of mining competition, we denote by c(r)

U the chain
quality, the main chain length ratio, the orphan block ratio, and the uncle block ratio,
respectively. We assume that the part with ϕ(r)

i,1 of
the main chain mined by the ith dishonest mining pool are pegged onto the blockchain,
where ω(r)

i,1 are the ﬁrst and second elements of the sorted set S related to the ith

i.2 + 2 ≤ ϕ(r)

blocks for ω(r)

O , and r(r)

i.2 and ω(r)

i ≤ ω(r)

M , r(r)

Q , r(r)

i

dishonest mining pool, respectively.

Theorem 4 In the PoW Ethereum system with multiple mining pools, by using the law

of large numbers, as N → ∞, we have

c(r)
Q

r(r)
O

N

Pr=1
N

N

Pr=1
N

→ cQ, a.s.,

→ rO, a.s.,

N

r(r)
M

Pr=1
N

N

Pr=1
N

r(r)
U

→ rM, a.s.,

→ rU, a.s.,

where

cQ = pH +

m

X
ζ=1

pζ × cQ,ζ,

rM = pH × rM,H +

m

X
ζ=1

pζ × rM,ζ,

rO = pH × rO,H +

m

X
ζ=1

pζ × rO,ζ,

rU = pH × rU,H +

m

X
ζ=1

pζ × rU,ζ.

Proof. The proof is easy. We only take the ﬁrst one as a example. To do this, we

need to consider two diﬀerent cases:

Case one: If the the honest mining pool sets up the main chain in the rth round of

mining competition for r = 1, 2, 3, . . . N . In this case, we have c(r)

Q,H = 1, and

NH

Pr=1

c(r)
Q,H

N

=

NH
N

.

24

This gives that as N → ∞,

NH

Pr=1

c(r)
Q,H

N

→ pH, a.s..

Case two: If the ζth dishonest mining pool sets up the main chain in the rth round
of mining competition for r = 1, 2, 3, . . . , N . In this case, it is worthwhile to note that k(r)
ζ

is the number of honest blocks which have been mined by the honest mining pool before
the ζth dishonest mining pool begins to fork to a new sub-chain with l(r)
that the part with ϕ(r)

ζ blocks, and note
ζ blocks of the main chain are pegged onto the blockchain, thus we

have

c(r)
Q,ζ =

k(r)
ζ
ζ + ϕ(r)
k(r)

ζ

.

Since the competitively mining processes of the multiple mining pools are repeated

round after round, the random variable c(r)

Q,ζ can be repeated by the similar experiments
round after round under the same conditions. Based on this, the random variable sequence
nc(r)
Q,ζ, r = 1, 2, 3, . . .o can be regarded as independent and identically distributed. When
the number that the ζth dishonest mining pool can set up the main chain is Nζ, we obtain

that as Nζ → ∞,

Nζ

Pr=1

c(r)
Q,ζ

Nζ

→ cQ,ζ, a.s.,

which holds for each ζ = 1, 2, . . . , m. This gives that as N → ∞,

Nζ

Pr=1

c(r)
Q,ζ

N

Nζ

Pr=1

c(r)
Q,ζ

Nζ

=

·

Nζ
N

= pζ · cQ,ζ, a.s..

From the above two cases, we get

cQ = pH +

m

X
ζ=1

pζ · cQ,ζ. a.s..

This completes the proof. (cid:3)

7 The Growth Rate of Blockchain

In this section, we apply the renewal reward theory to study the long-term growth rate of

blockchain in the PoW Ethereum system with multiple mining pools.

25

In the rth round of mining competition, we denote by v(r) the number of blocks on

the main chain when the honest mining pool sets up the main chain, denote by k(r)
l(r)
i

the number of honest blocks ﬁrst mined by the honest mining pool and the number

and

i

of dishonest blocks mined by the ith dishonest mining pool after forked when the ith
dishonest mining pool sets up the main chain, respectively. Note that the part with ϕ(r)

i

blocks of the main chain is pegged onto the blockchain.

Lemma 1 In the PoW Ethereum system with multiple mining pools, by using the law of

large numbers, as N → ∞, we have

for i = 1, 2, . . . , m,

N

Pr=1

v(r)

N

N

Pr=1

k(r)
i

N

l(r)
i

N

Pr=1
N

and

N

Pr=1

ϕ(r)
i

→ v, a.s.,

→ ki, a.s.,

→ li, a.s.,

N
where v, ki, li and ϕi are the means of four random variables v(r), k(r)
respectively.

i

→ ϕi, a.s.,

, l(r)
i

and ϕ(r)

i

,

It is worthwhile to note that in the PoW Ethereum system, the competitively mining

processes of the multiple mining pools are repeated round after round, as we repeat the

experiments under the same conditions. Thus, the moments that one round of mining

competition is over and the next round of mining competition begins immediately are

all renewal points. That is, let Tk be the kth moment that the kth round of mining

competition is over and the (k + 1)th round of mining competition begins immediately.

In fact, [Tk−1, Tk) represents a time interval that the kth round of mining competition is

underway. For simplicity of analysis, we assume that T0 = 0, i.e., the ﬁrst round of mining

competition begins at time T0 = 0. Let N (t) = max{k, Tk ≤ t}, then {N (t), t ≥ 0} is a

renewal process.

26

We assume that there are Mk blocks of the main chain in the time interval [Tk−1, Tk),

and Mk is independent of the time interval [Tk−1, Tk). Let M (t) be the number of blocks

of all the main chains generated in the time interval [0, t). Then, the following theorem

provides the growth rate E [M (t)] /t of blockchain in the PoW Ethereum system with

multiple mining pools.

Theorem 5 In the PoW Ethereum system with multiple mining pools, if E [M1] < +∞

and E [T1] < +∞, then as t → +∞, we have

M (t)
t

→

E [M1]
E [T1]

, a.s.,

E [M (t)]
t

→

E [M1]
E [T1]

,

(5)

(6)

where

E [M1] = pH · v +

m

X
i=1

pi ·

ki + ϕi(cid:9)

(cid:8)

.

Proof. We give the proof for the equation 5 only. We write

N (t)

Mk

Pk=1
t

N (t)

Mk

Pk=1
N (t)

=

·

N (t)
t

.

M (t)
t

=

Note that

Tk = (T1 − T0) + (T2 − T1) + · · · + (Tk − Tk−1)

is the time length of the k renewal periods, and the random variables T1 − T0, T2 −

T1, . . . , Tk − Tk−1 are independent and identically distributed, E[Tk − Tk−1] = E[T1 − T0] =

E[T1] for k ≥ 1. At the same time, the random variables Mk, k ≥ 1 are also independent

and identically distributed, E[Mk] = E[M1].

Note that as t → +∞, N (t) → +∞. By the strong law of large numbers, we obtain

that as t → ∞

N (t)

Mk

Pk=1
N (t)

→ E[M1].

By using the elementary renewal theorem (Chapter 7 of [31]), we obtain that

N (t)
t

→

1
E[T1]

, as t → +∞.

27

Therefore, we obtain that as t → +∞

This completes the proof. (cid:3)

M (t)
t

→

E [M1]
E [T1]

.

8 Average Reward Allocation among the Mining Pools

In this section, we propose a new method to compute the uncle block and nephew block

rewards in two consecutive rounds of mining competition, and provide expressions for the

long-term reward allocation and for the long-term reward allocation rate to each mining

pool by using the renewal reward theory.

we provide a computational method of the reward allocation among the honest mining

pool and the mth dishonest mining pools.

To set up the reward allocation, it is easy to see that a regular block is paid the reward

of 1 block; an uncle block is paid the reward of (8 − l) /8 blocks for 1 ≤ l ≤ 6, where l is

the distance between the uncle block and the nephew block; a nephew block is paid the

reward of NU/32 blocks, where NU is the number of uncle blocks; and a stale block is paid

no reward.

In the PoW Ethereum system with multiple mining pools, it is worthwhile to note

that in the tree with multiple sub-chains, the main chain can be obtained by either the

honest mining pool or one of the m dishonest mining pools, thus our reward allocation is

considered as the following two diﬀerent cases.

Case one: The honest mining pool sets up the main chain

In this case, by observing (a) of Figure 11, we consider two diﬀerent cases as follows:

(i) The reward of the honest mining pool is given by

RH,H = v + R(N)
H,H,

where v is the number of blocks in the main chain, R(N)

H,H is the reward of a nephew block
which is the ﬁrst block of the main chain. Note that the nephew block refers to the uncle

blocks in the previous round of mining competition. Thus we obtain

NU,H
32 ,

if the ﬁrst block of the main chain is a nephew block,

0,

otherwise.

H,H = 
R(N)




28

(ii) Note that each of the m dishonest mining pools may mine only the orphan blocks,

that is, either the uncle blocks or the stale blocks. In addition, it has a nephew block

either if the main chain of the previous round of mining competition is completitively

pegged onto the blockchain, and this dishonest mining pool is the ﬁrst one to mine a block,

that is, the ﬁrstly mined block is the nephew block; or if this dishonest mining pool sets

up the main chain in the previous round of mining competition, and a non-empty part

of this main chain is left to this round of mining competition, that is, the nephew block

is the ﬁrst block of the non-empty part. Based on this, the reward of the ith dishonest

mining pool is given by

RH,i = R(U)

H,i + R(N)
H,i ,

i = 1, 2, . . . , m,

where R(U)

H,i is the reward that if the ith dishonest mining pool has an uncle block, and

R(U)

H,i =

8 − l
8

for 1 ≤ l ≤ 6, where l is the distance between the uncle block and the nephew block of

the next round of mining competition; and

R(N)

H,i =

NU,i
32

,

where NU,i is the number of uncle blocks in the previous round of mining competition if

the nephew block belongs to the ith dishonest mining pool. Based on this, we have

H,i = 
R(U)


8−l
8 ,
0,

if the ith dishonest mining pool has an uncle block,

otherwise;



NU,i
32 ,
0,

and

H,i = 
R(N)




if the nephew block belongs to the ith dishonest mining pool,

otherwise.

Case two: The ζth dishonest mining pool sets up the main chain

In this case, by observing (b) and (c) of Figure 11, we consider three diﬀerent cases as

follows:

(i) The reward of the ζth dishonest mining pool

Note that the ζth dishonest mining pool sets up the main chain, it is clear that ω1 =

kζ + lζ. We assume that the part with ϕζ blocks for ω2 + 2 ≤ ϕζ ≤ ω1 of the main chain

29

are pegged onto the blockchain, while another part with ω1 − ϕζ blocks of the main chain

is left to the next round of mining competition.

The reward of the ζth dishonest mining pool is given by

Rζ,ζ = ϕζ + R(N)
ζ,ζ ,

where ϕζ is the number of blocks in the part of the main chain, which is pegged onto the

blockchain; and

R(N)

ζ,ζ =

NU,ζ
32

,

where NU,ζ is the number of uncle blocks in the previous round of mining competition if

the nephew block belongs to the ζth dishonest mining pool. Based on this, we have

ζ,ζ = 
R(N)


NU,ζ
32 ,
0,

if the nephew block belongs to the ζth dishonest mining pool,

otherwise.



(ii) The reward of the honest mining pool

If the ζth dishonest mining pool sets up the main chain, then the honest mining pool

can mine only the orphan blocks after the ζth dishonest mining pool forks, that is, either

the uncle blocks or the stale blocks. In addition, it may have a nephew block if the honest

mining pool is the ﬁrst one to mine a block in this round of mining competition. In this

case, the reward of the honest mining pool contains the reward of kζ regular blocks, the

reward of one uncle block and the reward of a nephew block. Based on this, the reward

of the honest mining pool is given by

Rζ,H = kζ + R(U)

ζ,H + R(N)
ζ,H,

where R(U)

ζ,H is the reward that if the honest mining pool has an uncle block, and

R(U)

ζ,H =

8 − l
8

for 1 ≤ l ≤ 6, where l is the distance between the uncle block and the nephew block of

the next round of mining competition; and

R(N)

ζ,H =

NU,H
32

,

where NU,H is the number of uncle blocks in the previous round of mining competition if

the nephew block belongs to the honest mining pool. Based on this, we have

ζ,H = 
R(U)


8−l
8 ,
0,



if the honest mining pool has an uncle block,

otherwise;

30

and

ζ,H = 
R(N)




NU,H
32 ,

if the nephew block belongs to the honest mining pool,

0,

otherwise.

(iii) The reward of the ith dishonest mining pool for i 6= ζ

If the ζth dishonest mining pool sets up the main chain, then the ith dishonest mining

pool can mine only the orphan blocks, that is, either the uncle blocks or the stale blocks.

In addition, it has a nephew block either if the main chain of the previous round of mining

competition is completely pegged onto the blockchain, and the ith dishonest mining pool

is the ﬁrst one to mine a block, that is, the ﬁrstly mined block is the nephew block that

belongs to the ith dishonest mining pool; or if the ith dishonest mining pool sets up the

main chain in the previous round of mining competition, and a non-empty part of this

main chain is left to this round of mining competition, that is, the nephew block is the

ﬁrst block of the non-empty part. Based on this, the reward of the ith dishonest mining

pool is given by

Rζ,i = R(U)

ζ,i + R(N)
ζ,i ,

i = 1, 2, . . . , m,

where R(U)
ζ,i

is the reward that if the ith dishonest mining pool has an uncle block, and

R(U)

ζ,i =

8 − l
8

for 1 ≤ l ≤ 6, where l is the distance between the uncle block and the nephew block of

the next round of mining competition; and

R(N)

ζ,i =

NU,i
32

,

where NU,i is the number of uncle blocks in the previous round of mining competition if

the nephew block belongs to the ith dishonest mining pool. Based on this, we have

ζ,i = 
R(U)


8−l
8 ,
0,

if the ith dishonest mining pool has an uncle block,

otherwise;

and

ζ,i = 
R(N)




NU,i
32 ,
0,

if the nephew block belongs to the ith dishonest mining pool,

otherwise.

.



When the reward of each mining pool is regarded as random variables, we can apply the

law of large numbers to further study the reward of each mining pool. In this situation, we

31

obtain some interesting results, which can be applied to solving many practical problems

owing to the fact that by using the law of large numbers, our experimental reward of each

mining pool can steadily approach their corresponding ﬁxed values. Such a statistical

method is eﬀective and useful in the study of the PoW Ethereum system with multiple

mining pools, because analysis of the tree with multiple sub-chains always has a higher

computational complexity.

In what follows, we apply the law of large numbers to study the reward obtained by

each multiple mining pool in the PoW Ethereum system. Let R(r)

i be the reward
obtained by the honest mining pool or the ith dishonest mining pool in the rth round of

H and R(r)

competition for i = 1, 2, . . . , m.

Theorem 6 In the PoW Ethereum system with multiple mining pools, by using the law

of large numbers, as N → ∞, we have

and for i = 1, 2, . . . , m,

N

Pr=1

R(r)
H

N

N

Pr=1

R(r)
i

N

→ RH, a.s.,

→ Ri, a.s..

Proof. The proof is easy. We only take the ﬁrst one as a proof example. Here, we

also need to consider two diﬀerent cases:

Case one: The honest mining pool sets up the main chain in the rth round of mining

competition for r = 1, 2, 3, . . . , N . In this case,

H,H = v(r) + R(N,r)
R(r)
H,H ,

where in the rth round of mining competition, v(r) and R(N,r)

H

are the number of blocks

in the main chain, and the reward of a nephew block which is the ﬁrst block of the main

chain, respectively. Note that the main chain is mined by the honest mining pool.

Note that the competitively mining processes of the multiple mining pools are re-

peated round after round, the random variables v(r) and R(N,r)

H ) can be re-
peated by the experiments round after round under the same conditions. Based on this,

(thus R(r)

H

the random variable sequences

v(r), r = 1, 2, 3, . . .

(cid:8)

and nR(N,r)

H,H , r = 1, 2, 3, . . .o (thus

(cid:9)

32

H , r = 1, 2, 3, . . .o) can be regarded as independent and identically distributed. There-

nR(r)
fore, we obtain

and

This gives

NH

Pr=1

v(r)

NH

NH

Pr=1

R(N,r)
H,H

NH

→ v, a.s.,

→ R

(N)
H,H, a.s..

NH

Pr=1

R(r)
H,H

NH

NH

Pr=1

v(r)

NH

+

=

NH

Pr=1

R(N,r)
H,H

NH

→ v + R

(N)
H,H,

a.s..

Case two: The ζth dishonest mining pool sets up the main chain in the rth round of

mining competition for r = 1, 2, 3, . . ..

In this case, the honest mining pool can mine only the orphan blocks, that is, either

the uncle blocks or the stale blocks. In addition, it may have a nephew block if the honest

mining pool is the ﬁrst one to mine a block in a round of mining competition, that is, the

ﬁrstly mined block is the nephew block. Thus, we have

ζ,H = k(r)
R(r)

ζ + R(U,r)

ζ,H + R(N,r)
ζ,H ,

where in the rth round of mining competition, R(U,r)

ζ,H is the reward of 1 uncle block if the

honest mining pool has an uncle block.

Note that the competitively mining processes of the multiple mining pools are re-

peated round after round, the random variables k(r)
ζ

ζ,H) can
be repeated by the experiments round after round under the same conditions. Based
on this, the random variable sequences nk(r)
nR(N,r)
identically distributed. Therefore, we obtain

ζ,H , r = 1, 2, 3, . . .o and
ζ,H, r = 1, 2, 3, . . .o) can be regarded as independent and

ζ,H , r = 1, 2, 3, . . .o (thus nR(r)

, r = 1, 2, 3, . . .o , nR(U,r)

ζ,H and R(N,r)

ζ,H (thus R(r)

, R(U,r)

ζ

Nζ

Pr=1

k(r)
ζ

Nζ

→ kζ, a.s.,

33

Nζ

Pr=1

R(U,r)
ζ,H

Nζ

Nζ

Pr=1

R(N,r)
ζ,H

Nζ

→ R

(U)
ζ,H, a.s.,

→ R

(N)
ζ,H, a.s..

and

This gives

Nζ

Pr=1

R(r)
ζ,H

Nζ

Nζ

Pr=1

k(r)
ζ

Nζ

=

+

Nζ

Pr=1

R(U,r)
ζ,H

Nζ
(N)
ζ,H,

(U)
ζ,H + R

→ kζ + R

Therefore, we can get that as N → ∞

+

Nζ

Pr=1

R(N,r)
ζ,H

Nζ

a.s..

N

Pr=1

R(r)
H

N

NH

Pr=1

R(r)
H

N

NH

Pr=1

R(r)
H

NH

=

=

R(r)
ζ,H

m

Nζ

Pζ=1

+

Pr=1
N

m

Nζ

·

NH
N

+

Pζ=1

Pr=1
Nζ

R(r)
ζ,H

·

Nζ
N

= pH (cid:16)v + R

(N)
H,H(cid:17) +

m

X
ζ=1

pζ (cid:16)kζ + R

(U)
ζ,H + R

(N)
ζ,H(cid:17) , a.s..

This completes the proof. (cid:3)

9 Reward Rates Allocated among the Mining Pools

In this section, we apply the renewal reward processes to study the long-term reward

allocation rates among the multiple mining pools.

Note that the competitively mining processes of the multiple mining pools are repeated

round after round, as we repeat the experiments under the same conditions. Thus, the

moments that one round of mining competition is over and the next round of mining

competition begins immediately are all renewal points. Let Tk be the kth moment that

the kth round of mining competition is over and the (k + 1)th round of mining competition

begins immediately. In fact, [Tk−1, Tk) represents such a time interval that the kth round

34

of mining competition is underway. For simplicity, we assume that T0 = 0. Let N (t) =

max{k, Tk ≤ t}, then {N (t), t ≥ 0} is a renewal process.

Let R(k)

H and R(k)

ζ

be the rewards allocated to the honest mining pool and the ζth

dishonest mining pool in the time interval [Tk−1, Tk), respectively. Meanwhile, R(k)
R(k)
ζ

H and
are independent of the time interval [Tk−1, Tk). Let RH (t) and Rζ (t) be the rewards

allocated to the honest mining pool and the ζth dishonest mining pool in the time interval

[0, t). The following theorem respectively provides the reward allocation rates to the honest

mining pool and the ζth dishonest mining pool in the PoW Ethereum system with multiple

mining pools.

Theorem 7 In the PoW Ethereum system with multiple mining pools, if E hR(1)
and E [T1] < +∞, then as t → ∞,

H i < +∞

RH (t)
t

→

E hR(1)
H i
E [T1]

, a.s.,

E [RH (t)]
t

→

E hR(1)
H i
E [T1]

;

Rζ (t)
t

→

E hR(1)
ζ i
E [T1]

, a.s.,

E [Rζ (t)]
t

→

E hR(1)
ζ i
E [T1]

,

(7)

(8)

(9)

(10)

where

E hR(1)

H i =pH (cid:16)v + q(N)

H,HR

(N)
H,H(cid:17)
pζ (cid:16)kζ + q(U)
ζ,HR

+

m

X
ζ=1

(U)
ζ,H + q(N)

ζ,HR

(N)
ζ,H(cid:17) ,

E hR(1)

(N)
ζ i =pζ (cid:16)ϕζ + q(N)
ζ,ζ R
ζ,ζ (cid:17)
(U)
H,ζ + q(N)
+ pH (cid:16)q(U)
H,ζR

H,ζR

(N)
H,ζ(cid:17)

+

m

X
k6=ζ

pk (cid:16)q(U)
k,ζ R

(U)
k,ζ + q(N)

k,ζ R

(N)
k,ζ (cid:17) .

Proof. We give the proof for equation 7 only. To do this, we write

35

N (t)

Pk=1

R(k)
H

t

N (t)

Pk=1

R(k)
H

N (t)

=

·

N (t)
t

.

RH (t)
t

=

Note that

Tk = (T1 − T0) + (T2 − T1) + · · · + (Tk − Tk−1)

is the time length of the k renewal periods, and the random variables T1 − T0, T2 −

T1, . . . , Tk − Tk−1 are independent and identically distributed, E[Tk − Tk−1] = E[T1 − T0] =
E[T1] for k ≥ 1. At the same time, the random variables R(k)
and identically distributed, E[R(k)

H , k ≥ 1 are also independent

H ] = E[R(1)
H ].

Note that t → +∞, N (t) → +∞. By the strong law of large numbers, we obtain that

as t → ∞

N (t)

Pk=1

R(k)
H

N (t)

→ E[R(1)
H ].

According to the elementary renewal theorem (Chapter 7 of [31]), we obtain that

N (t)
t

→

1
E[T1]

, as t → +∞.

Therefore, we obtain that as t → +∞,

RH (t)
t

→

E hR(1)
H i
E [T1]

.

This completes the proof. (cid:3)

10 Simulation Experiments

In this section, we use some simulation experiments to discuss the Ethereum system with

one honest mining pool and two dishonest mining pools, verify how the key probabilities of

Ethereum are obtained approximately by using the law of large numbers, and analyze the

performance measures of the Ethereum system by means of the renewal reward theorem.

36

10.1 An Experiment Design

In order to analyze the competitive mining processes of multiple mining pools, our simu-

lation experiment is designed as follows:

(1) In our simulation, we take a round of mining competition as a sampling, and then

we repeat such a sampling round after round.

(2) Under the two-block leading competitive criterion, one dishonest mining pool may

release a part of its sub-chain into the Ethereum system. Here, our simulation experiments

consider the mining rule: ω1 − ω2 = 2. That is, the longest sub-chain length is 2 blocks

longer than the second-longest sub-chain in the system.

Although ω1 −ω2 = 2 is taken as a terminate rule to end a round of mining competition

among the multiple mining pools, the dishonest mining pools can fork at any position of

the sub-chain mined by the honest mining pool. Thus, the tree with multiple block sub-

chains is still more complicated, and also represents the general practical mining structure

of the PoW Ethereum system with multiple mining pools.

(3) For simplicity of simulation, our design is to consider the mining processes of the

multiple mining pools. To do this, we take m + 1 random variables as

Xi = X · (

1
αi

+

1
γ

), i = 0, 1, 2, ..., m,

where, Xi is the block-generating and block-pegging time of the ith mining pool, αi is

the mining power of the ith mining pool, and γ is the communication ability of the P2P

network. Note that 1/αi +1/γ is used to show the independence between the mining power

and the communication ability. At the same time, it is easy to see that Xi decreases as

αi or γ increases, this is consistent with our intuitive understanding on the mining times.

We assume that the random variable X obeys an exponential distribution of the mean

15 seconds, where the 15 seconds are always chosen as the expected mining time of one

block in the PoW Ethereum system. Let d be a random number generated by the expo-

nential distribution of X, then we have

di = d · (

1
αi

+

1
γ

), i = 0, 1, 2, ..., m.

10.2 Simulation and results

In this subsection, we describe and analyze some interesting simulation results.

37

(1) The law of large numbers

Note that the probability that each mining pool wins the mining competition plays

a key role in our research on the key ratios, the growth rate of blockchain, the reward

allocation rates and so on. Here, it is necessary to verify how this probability is obtained

approximately by using the law of large numbers. To this end, we take N ∈ [10000, 40000]

and γ = 10.

0.6

0.5

0.4

p

0.3

0.2

0.1

0

1

pH
p1
p2

1.5

2

2.5
N

3

3.5

4
×104

0.6

0.5

0.4

p

0.3

0.2

0.1

0

1

pH
p1
p2

1.5

2

2.5
N

3

3.5

4
×104

(a) αH = 0.6, α1 = 0.3, α2 = 0.1

(b) αH = 0.7, α1 = 0.2, α2 = 0.1

Figure 12: The probabilities are approximately computed by the law of large numbers.

From Figure 12, it is easy to see that the three probabilities: pH, p1,and p2 ﬂuctuate

around a certain value. This shows that the laws of large numbers is well applied to

determine these probabilities.

From the left part of Figure 12, it is seen that p1 > pH, while p1 < pH in the

right of the Figure 12. It shows that as αH increases, there exists a α∗

H, such that p1 =
pH. Furthermore, it is observed that as αH increases, the probability p1 + p2 of the

dishonest mining pools decreases. Thus, the inﬂuence of the dishonest pools decreases as

αH increases.

In order to observe the interesting value α∗

H, we use a special experiment. Let N =
20000, γ = 10, α2 = 0.1, αH ∈ [0.55, 0.8] , α1 = 1 − αH − α2. Each of our simulations with

20000 rounds of mining competition is repeated 100 times to calculate the average of the

approximate probabilities pH and p1. We denote the two average values by pH and p1.
The results are shown in Figure 13.

From Figure 13, it is seen that as αH increases, the average probability pH increases,
H, when

and the average probability p1 decreases. Also, it is observed that there exists a α∗

38

p

0.8

0.7

0.6

0.5

0.4

0.3

0.2

0.1

0.55

pH
p1

*

mining power threshold

0.6

0.65

αH

0.7

0.75

0.8

Figure 13: The average probabilities and the mining power threshold.

H, p1 > pH; and when αH > α∗

αH < α∗
obtain that the 95% conﬁdence interval of the mining power α∗

H, p1 < pH. In our simulation experiments, we
H is [0.6662, 0.6731]. This
shows that when the mining power of the 1st dishonest mining pool exceeds the mining

power threshold 23.38%, the 1st dishonest pool has the biggest probability of setting up

the main chain. Based on this, the dishonest mining pool with a smaller mining power

can have the same probability of setting up the main chain as the honest mining pool.

This is why the dishonest mining pool may fork at any position of the honest sub-chain.

In the remainder of this subsection, we explore how the performance measures of

the Ethereum system depend on the mining powers of the three mining pools. To this

end, we take the parameters as follows: The mining power of the honest mining pool

αH ∈ [0.51, 0.82] , the mining power of the 2nd dishonest mining pool α2 = 0.13, and

the mining power of the 1st dishonest mining pool α1 = 1 − αH − α2, the rate at which

the block is pegged to the corresponding sub-chain γ = 10, and the numbers of mining

competition rounds are N1 = 15000, N2 = 18000, N3 = 20000, N4 = 25000, N5 = 30000.

(2) Some key probabilities vs. αH

From Figure 14, it is seen that each of the probabilities is stably close to a certain value.

This shows that the law of large numbers is successfully applied in our computation. See

Theorem 3 for a comparison.

(3) Some key ratios vs. αH

39

,

)

H
N
H
q

(

0.7

0.65

0.6

0.55

0.5

0.45

0.4

0.35

0.3

N

N

N

N

N

1

2

3

4

5

= 15000

= 18000

= 20000

= 25000

= 30000

0.12

0.11

0.1

0.09

0.08

0.07

0.06

0.05

0.04

0.03

N

N

N

N

N

1

2

3

4

5

= 15000

= 18000

= 20000

= 25000

= 30000

,

)

H
N
2
q

(

0.25

0.5

0.55

0.6

0.65

0.7

0.75

0.8

0.85

αH

0.02

0.5

0.55

0.6

0.65

0.7

0.75

0.8

0.85

αH

)

1

,

N
1
q

(

0.35

0.3

0.25

0.2

0.15

0.1

0.05

N

N

N

N

N

1

2

3

4

5

= 15000

= 18000

= 20000

= 25000

= 30000

N

N

N

N

N

1

2

3

4

5

= 15000

= 18000

= 20000

= 25000

= 30000

0.4

0.35

0.3

0.25

0.2

0.15

0.1

0.05

,

)

H
U
1
q

(

0
0.5

0.55

0.6

0.65

0.7

0.75

0.8

0.85

αH

0
0.5

0.55

0.6

0.65

0.7

0.75

0.8

0.85

αH

0.12

0.11

0.1

0.09

0.08

0.07

0.06

0.05

0.04

0.03

N

N

N

N

N

1

2

3

4

5

= 15000

= 18000

= 20000

= 25000

= 30000

)

2

,

N
2
q

(

0.07

0.06

0.05

0.04

0.03

0.02

0.01

N

N

N

N

N

1

2

3

4

5

= 15000

= 18000

= 20000

= 25000

= 30000

)

2

,

U
1
q

(

0.02

0.5

0.55

0.6

0.65

0.7

0.75

0.8

0.85

αH

0
0.5

0.55

0.6

0.65

0.7

0.75

0.8

0.85

αH

(a)

(b)

Figure 14: Some probabilities that each main chain contains uncle or nephew blocks.

40

From Figure 15, it is observed that for some diﬀerent values of N, the key ratios cQ,

rM, rO, rU, and rS are all approximately stable in our computation by means of the law

of large numbers. Also, the chain quality cQ increases as αH increases, while the uncle

block ratio rU decreases as the αH increases. For the main chain length ratio rM, it ﬁrst

decreases and then increases as the αH increases. For the stale block ratio rS (resp. rO),

it ﬁrst increases and then decreases as αH increases. It shows from rM, rO and rS that

when the mining power of the honest mining pool is close to 0.7, the mining competition

among the three mining pools is the most intense, so that a lot of mining resources are

wasted.

(4) The growth rate of blockchain vs. αH

From Figure 16, we can see that for some diﬀerent values of N , the growth rate of

the blockchain limt→+∞M (t) /t = E [M1] /E [T1] can be eﬀectively computed by means

of the law of large numbers and the renewal theorem. In addition, there exists a value

α0 ∈ (0, 1) such that when αH < α0, the growth rate of blockchain decreases as αH

increases; while when αH > α0, the growth rate of blockchain almost unchanged as αH

increases. It indicates that the growth rate of blockchain reaches the lowest level once the

honest mining pool masters the major mining power of the entire network. Also, it shows

from the Figure 16 that the total mining power of the Ethereum system is dispersed into

the multiple mining pools beneﬁts the growth rate of blockchain.

(5) The reward of the honest mining pool vs. αH

Figure 17 shows the reward of the honest mining pool. For some diﬀerent values of

N , the reward RH can be approximately computed by means of the law of large numbers.

Also, the reward RH increases as αH increases, which is consistent with the fact that the

reward of the honest mining pool is positively correlated with its mining power.

(6) The reward allocation rate of the honest mining pool vs. αH

Figure 18 shows the reward allocation rate of the honest mining pool. For diﬀerent

values of N , the reward allocation rate of the honest mining pool limt→+∞RH (t) /t =
E hR(1)
H i /E [T1] can be eﬀectively computed by using the law of large numbers and the
renewal theorem. Also, the reward allocation rate increases as αH increases, which is

also consistent with the fact that the reward allocation rate of the honest mining pool is

positively correlated with its mining power.

41

0.8

0.7

0.6

0.5

Q
c

0.4

0.3

0.2

0.1

0
0.5

0.32

0.3

0.28

O
r

0.26

0.24

0.22

0.2

0.5

N

N

N

N

N

1

2

3

4

5

= 15000

= 18000

= 20000

= 25000

= 30000

0.55

0.6

0.65

αH

0.7

0.75

0.8

0.85

N

N

N

N

N

1

2

3

4

5

= 15000

= 18000

= 20000

= 25000

= 30000

0.8

0.78

0.76

M
r

0.74

0.72

0.7

0.68

0.5

0.12

0.11

0.1

0.09

0.08

0.07

0.06

U
r

N

N

N

N

N

1

2

3

4

5

= 15000

= 18000

= 20000

= 25000

= 30000

0.55

0.6

0.65

αH

0.7

0.75

0.8

0.85

N

N

N

N

N

1

2

3

4

5

= 15000

= 18000

= 20000

= 25000

= 30000

0.55

0.6

0.65

αH

0.7

0.75

0.8

0.85

0.05

0.5

0.55

0.6

0.65

0.7

0.75

0.8

0.85

αH

0.24

0.23

0.22

0.21

0.2

S
r

0.19

0.18

0.17

0.16

0.15

0.14

0.5

N

N

N

N

N

1

2

3

4

5

= 15000

= 18000

= 20000

= 25000

= 30000

0.55

0.6

0.65

αH

0.7

0.75

0.8

0.85

Figure 15: The key ratios of blockchain.

42

0.25

0.2

0.15

0.1

0.05

]
1

M
E

[

]
1
T
E

[

N

N

N

N

N

1

2

3

4

5

= 15000

= 18000

= 20000

= 25000

= 30000

0
0.5

0.55

0.6

0.65

0.7

0.75

0.8

0.85

αH

Figure 16: The growth rate of blockchain.

4

3.5

3

H
R

2.5

2

1.5

1
0.5

N

N

N

N

N

1

2

3

4

5

= 15000

= 18000

= 20000

= 25000

= 30000

0.55

0.6

0.65

αH

0.7

0.75

0.8

0.85

Figure 17: The reward obtained by the honest mining pool.

43

N

N

N

N

N

1

2

3

4

5

= 15000

= 18000

= 20000

= 25000

= 30000

0.022

0.02

0.018

0.016

0.014

0.012

0.01

$

)
1
(

H
R
#
E

]
1
T
E

[

0.008

0.5

0.55

0.6

0.65

0.7

0.75

0.8

0.85

αH

Figure 18: The reward allocation rate of the honest mining pool.

11 Concluding Remarks

The growth of the PoW Ethereum system with multiple mining pools has created the need

for not only development of blockchain technology but also setting up a general mathe-

matical representation of tree and dealing with the multi-dimensional stochastic systems

related to the multiple block branches of tree. In general, the research on such a tree and

associated mathematical analysis is very diﬃcult and challenging. It is worthwhile to note

that our mathematical representation of tree is the ﬁrst one in the study of blockchain

with multiple mining pools, and it is diﬀerent from that tree of the GHOST protocol given

in Sompolinsky and Zohar [32, 33].

For a blockchain system with two mining pools, Eyal and Sirer [12] found the selﬁsh

mining and constructed a simple tree with two block branches. Following the tree with two

block branches, Li et al. [21] established the two-dimensional Markov (reward) processes

to analyze the eﬃciency and beneﬁt of blockchain. However, so far a little research has

worked on the blockchain systems with multiple mining pools although we need to answer

questions such as how to mathematically represent a general tree with multiple block

branches and how to analyze a complicated multi-dimensional stochastic system running

on the general tree. It is obvious that the study of PoW Ethereum system with multiple

mining pools will need to apply the multi-dimensional stochastic processes on a general

44

tree, even simply, the ﬂuid and diﬀusion approximations on a general tree.

In this paper, we described a PoW Ethereum system with multiple mining pools,

which is controlled by the two-block leading competitive criterion proposed in Li et al.

[21]. Here, a block branch will be generated by only one mining pool, Thus the mining

competition among the multiple mining pools can generate a general tree with multiple

block branches. When observing the general tree, one of our key ﬁndings is to learn that

the block branches of the multiple dishonest mining pools can be forked at any (diﬀerent)

positions of the block branch of one honest mining pool. Based on this, we can provide a

mathematical representation for the general tree with multiple block branches. Also, we

can easily determine the main chain by means of the principle of longest chain, e.g., see

Li et al. [21] for the blockchain with multiple mining pools.

By using the tree representation and observing multiple rounds of mining competitions,

we can provide a block classiﬁcation of Ethereum: Regular blocks (i.e., the main chain),

orphan blocks, uncle blocks, stale blocks, and nephew blocks, and set up an approximate

computation for the key probabilities of generating the diﬀerent types of blocks by ap-

plying the law of large numbers. Based on the key probabilities, together with the tree

representation, we develop an economic framework for computing the rewards allocated

to the multiple mining pools. This is one of our key theoretical ﬁndings in the study of

PoW Ethereum system with multiple mining pools.

By applying the renewal reward theorem, we further discuss the growth rate of blockchain,

the reward allocation among the multiple mining pools, and the reward rates allocated

among multiple mining pools, three of which become the key performance measures of

PoW Ethereum system with multiple mining pools. Furthermore, we use simulation ex-

periments to verify our theoretical results, and shows that our approximate computation

is fast and eﬀective for dealing with the three performance measures. Therefore, this pa-

per provides a powerful tool for the performance evaluation of the PoW Ethereum system

with multiple mining pools.

To the best of our knowledge, this paper is the ﬁrst one to provide the mathematical

representation of general tree, and to analyze the PoW Ethereum system with multiple

mining pools through applying the law of large numbers and the renewal reward theorem.

Therefore, we hope that our methodology and results given in this paper are applicable

to the study of more general PoW Ethereum system with multiple mining pools. Along

the research line, there are still a number of interesting directions for future research:

45

• Setting up a new tree representation for the PoW Ethereum system with multiple

honest mining pools and multiple dishonest mining pools. In the more complicated

case, how to determine the main chain from such a tree? How to give the performance

evaluation of the PoW Ethereum systems?

• Developing some more eﬀective simulation techniques in the study of PoW Ethereum

system with multiple (honest and dishonest) mining pools through applying the law

of large numbers and the renewal reward theorem.

• Developing ﬂiud approximation and/or diﬀusion approximation to analyze the PoW

Ethereum system with multiple (honest and dishonest) mining pools.

• Providing optimal methods and dynamic control (e.g., Markov decision processes

and stochastic game) in the study of PoW Ethereum system with multiple (honest

and dishonest) mining pools.

Acknowledgements

Quan-Lin Li was supported by the National Natural Science Foundation of China under

grants No. 71671158 and 71932002.

References

[1] Atzei, N., Bartoletti, M., & Cimoli, T. (2017). A survey of attacks on ethereum

smart contracts (sok). In: International conference on principles of security and trust,

Springer, pp. 164-186.

[2] Augusto, L., Costa, R., Ferreira, J., et al. (2019). An application of ethereum smart

contracts and IoT to logistics. In: 2019 International Young Engineers Forum, IEEE,

pp. 1-7.

[3] Aung, Y. N., & Tantidham, T. (2019). Ethereum-based emergency service for smart

home system: smart contract implementation. In: The 21st International Conference

on Advanced Communication Technology, IEEE, pp. 147-152.

[4] Bai, Q., Zhou, X., Wang, X., Xu, Y., Wang, X., & Kong, Q. (2019). A deep dive into

blockchain selﬁsh mining. In: International Conference on Communications, pp. 1-6.

46

[5] Bogner, A., Chanson, M., & Meeuw, A. (2016). A decentralised sharing app running

a smart contract on the ethereum blockchain. In: Proceedings of the 6th International

Conference on the Internet of Things, pp. 177-178.

[6] Buterin, V. (2013). Ethereum whitepaper. https://github.com/ethereum/wiki/wiki/White-

Paper.

[7] Buterin,

V.

(2014).

A

next-generation

smart

contract

and

de-

centralized

application

platform.

pp.

1-36.

[Online].

Available:

https://github.com/ethereum/wiki/wiki/White-Paper.

[8] Chang, S. Y., Park, Y., Wuthier, S., & Chen C. W. (2019). Uncle-block attack:

Blockchain mining threat beyond block withholding for rational and uncooperative

miners. In: International Conference on Applied Cryptography and Network Security,

pp. 241-258.

[9] Chen, H., Pendleton, M., Njilla, L., et al. (2020). A survey on ethereum systems

security: vulnerabilities, attacks, and defenses. ACM Computing Surveys, 53(3), 1-43.

[10] Di Angelo, M., & Salzer, G. (2019). A survey of tools for analyzing Ethereum smart

contracts. In: 2019 IEEE International Conference on Decentralized Applications and

Infrastructures. IEEE, pp. 69-78.

[11] Dika, A., & Nowostawski, M. (2018). Security vulnerabilities in ethereum smart con-

tracts. In: 2018 IEEE International Conference on Internet of Things and IEEE Green

Computing and Communications and IEEE Cyber, Physical and Social Computing and

IEEE Smart Data. IEEE, pp. 955-962.

[12] Eyal, I., & Sirer, E. G. (2018). Majority is not enough: Bitcoin mining is vulnera-

ble. Communications of the ACM, 61(7), 95-102. ‘A early version of this paper was

given in International Conference on Financial Cryptography and Data Security, 2014,

Springer, pp. 436-454.’

[13] Feng, C., & Niu, J. (2019) Selﬁsh mining in ethereum. In: The 39th IEEE Interna-

tional Conference on Distributed Computing Systems. IEEE, pp. 1306-1316.

[14] Grunspan, C., & P´erez-Marco, R. (2020). Selﬁsh mining in ethereum. Mathematical

Research for Blockchain Economy, Springer, 65-90.

47

[15] Jain, P. (2019). Revenue generation strategy through selﬁsh mining focusing mul-

tiple pools of honest miners. Bachelor of Technology, Computer Science & Applied

Mathematics, Indraprastha Institute of Information Technology, New Delhi, India.

[16] Kang, H., Chang, X., Yang, R., et al. (2021). Understanding Selﬁsh Mining in Imper-

fect Bitcoin and Ethereum Networks with Extended Forks. IEEE Transactions on Net-

work and Service Management, 18(3): 3079-3091. doi: 10.1109/TNSM.2021.3073414.

[17] Leelavimolsilp, T., Tran-Thanh, L., & Stein, S. (2018). On the preliminary in-

vestigation of selﬁsh mining strategy with multiple selﬁsh miners. arXiv preprint,

arXiv:1802.02218, pp. 1-20.

[18] Leelavimolsilp, T., Nguyen, V. H., Stein, S., & Tranthanh, L. (2019). Selﬁsh mining

in Proof-of-Work blockchain with multiple miners: An empirical evaluation. In: Inter-

national Conference on Principles and Practice of Multi-Agent Systems. Lecture Notes

in Computer Science, volume 11873, Springer, pp. 219-234.

[19] Lerner, S. D.

(2016). Uncle mining, an Ethereum consensus protocol ﬂaw.

[Online]. Available:

https://bitslog.wordpress.com/2016/04/28/uncle-mining-an-

ethereum-consensus-protocol-aw.

[20] Li, Q. L., Ma, J. Y., & Chang, Y. X. (2018). Blockchain queue theory. In: Interna-

tional Conference on Computational Social Networks. Springer, pp. 25-40.

[21] Li, Q. L., Chang, Y. X., Wu, X., et al. (2021). A new theoretical framework of

pyramid markov processes for blockchain selﬁsh mining. Journal of Systems Science

and Systems Engineering, 30(6), December 2021, pp. 667–711.

[22] Liu, H., Ruan, N., Du, R., & Jia, W. (2018). On the strategy and behavior of Bit-

coin mining with N -attackers. In: Proceedings of Asia Conference on Computer and

Communications Security, pp. 357-368.

[23] Liu, Y., Hei, Y., Xu, T., & Liu, J. (2020). An evaluation of uncle block mechanism

eﬀect on Ethereum selﬁsh and stubborn mining combined with an eclipse attack. IEEE

Access, 8, 17489-17499.

48

[24] Marmolejo-Coss´ıo, F. J., Brigham, E., Sela, B., et al. (2019). Competing (semi-)

selﬁsh miners in bitcoin. In: Proceedings of the 1st ACM Conference on Advances in

Financial Technologies. pp. 89-109.

[25] Mohammed, A. H., Abdulateef, A. A., & Abdulateef, I. A. (2021). Hyperledger,

Ethereum and blockchain technology: A short overview. In: The 3rd International

Congress on Human-Computer Interaction, Optimization and Robotic Applications.

IEEE, pp. 1-6.

[26] Nakamoto,

S.

(2008). Bitcoin:

a peer-to-peer

electronic

cash system.

https://bitcoin.org/bitcoin.pdf.

[27] Pinz´on. C., Rocha, C., & Finke, J. (2020). Algorithmic analysis of blockchain eﬃ-

ciency with communication delay. In: Fundamental Approaches to Software Engineer-

ing. Springer, pp. 400-419.

[28] Praitheeshan, P., Pan, L., Yu, J., et al. (2019). Security analysis methods on ethereum

smart contract vulnerabilities: a survey. arXiv preprint, arXiv:1908.08605, pp. 1-21.

[29] Ranganthan, V. P., Dantu R., Paul A., et al. (2018). A decentralized marketplace

application on the Ethereum blockchain. In: 2018 IEEE 4th International Conference

on Collaboration and Internet Computing. IEEE, pp. 90-97.

[30] Ritz, F., & Zugenmaier, A. (2018). The impact of uncle rewards on selﬁsh mining in

ethereum. In: 2018 IEEE European Symposium on Security and Privacy Work-shops,

EuroS&P Workshops, London, United Kingdom, pp. 50–57.

[31] Ross, S. . (2014). Introduction to Probability Models. Academic press.

[32] Sompolinsky, Y., & Zohar, A. (2013). Accelerating bitcoin’s transaction processing.

Fast money grows on trees, not chains. Cryptology ePrint Archive: Report 2013/881.

[33] Sompolinsky, Y., & Zohar, A. (2015). Secure high-rate transaction processing in

bitcoin. In: International Conference on Financial Cryptography and Data Security.

Springer, pp. 507-527.

[34] Sookhak, M., Jabbarpour, M. R., Safa, N. S., et al. (2021). Blockchain and smart

contract for access control in healthcare: a survey, issues and challenges, and open

issues. Journal of Network and Computer Applications, 178, 102950.

49

[35] Vujiˇci´c, D., Jagodi´c, D., & Randi´c, S. (2018). Blockchain technology, bitcoin, and

Ethereum: A brief overview. In: The 17th International Symposium Infoteh-Jahorina.

IEEE, pp. 1-6.

[36] Wang, S., Yuan, Y., Wang, X., et al. (2018). An overview of smart contract: architec-

ture, applications, and future trends. In: 2018 IEEE Intelligent Vehicles Symposium.

IEEE, pp. 108-113.

[37] Wang, Z., Jin, H., Dai, W., Choo, K. K. R., & Zou, D. (2021). Ethereum smart con-

tract security research: survey and future research opportunities. Frontiers of Com-

puter Science, 15(2), 1-18.

[38] Wang, Z., Liu, J., Wu, Q., Zhang, Y., Yu, H., & Zhou, Z. (2019). An analytic

evaluation for the impact of uncle blocks by selﬁsh and stubborn mining in an imperfect

Ethereum network. Computers & Security, 87, 101581.

[39] Werner, S. M., Pritz, P. J., Zamyatin, A., & Knottenbelt, W. J. (2019). Uncle traps:

Harvesting rewards in a queue-based ethereum mining pool. In: Proceedings of the 12th

EAI International Conference on Performance Evaluation Methodologies and Tools,

pp. 127-134.

[40] Wood, G. (2017). Ethereum: A secure decentralized generalised transaction ledger

EIP-150 revision. Ethereum project yellow paper, 1-34.

[41] Xia, Q., Dou, W., Xi, T., et al. (2021). The impact analysis of multiple miners and

propagation delay on selﬁsh mining. In: 2021 IEEE 45th Annual Computers, Software,

and Applications Conference (COMPSAC). IEEE, pp. 694-703.

[42] Zhang, S. (2020). Analyzing the success of selﬁsh mining with multiple players. Master

of Science, School of Computer Science, McGill University, Canada.

[43] Zhang, S., Zhang, K., & Kemme, B. (2020). A simulation-based analysis of mul-

tiplayer selﬁsh mining. In: 2020 IEEE International Conference on Blockchain and

Cryptocurrency. IEEE, pp. 1-5.

[44] Zhang, S., Zhang, K., & Kemme, B. (2020). Analysing the beneﬁt of selﬁsh mining

with multiple players. In: 2020 IEEE International Conference on Blockchain. IEEE,

pp. 36-44.

50

