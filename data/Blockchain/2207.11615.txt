2
2
0
2

g
u
A
4

]

R
C
.
s
c
[

2
v
5
1
6
1
1
.
7
0
2
2
:
v
i
X
r
a

SyncPCN/PSyncPCN: Payment Channel Networks without
Blockchain Synchrony

Oƒüuzhan Ersoy
oguzhan.ersoy@ru.nl
Radboud University
Delft University of Technology

Satwik Prabhu Kumble
s.prabhukumble@tudelft.nl
Delft University of Technology

J√©r√©mie Decouchant
j.decouchant@tudelft.nl
Delft University of Technology

Stefanie Roos
s.roos@tudelft.nl
Delft University of Technology

ABSTRACT
Payment channel networks (PCNs) enhance the scalability of block-
chains by allowing parties to conduct transactions off-chain, i.e,
without broadcasting every transaction to all blockchain partici-
pants. To conduct transactions, a sender and a receiver can either
establish a direct payment channel with a funding blockchain trans-
action or leverage existing channels in a multi-hop payment. The
security of PCNs usually relies on the synchrony of the underlying
blockchain, i.e., evidence of misbehavior needs to be published on
the blockchain within a time limit. Alternative payment channel
proposals that do not require blockchain synchrony rely on quo-
rum certificates and use a committee to register the transactions
of a channel. However, these proposals do not support multi-hop
payments, a limitation we aim to overcome.

In this paper, we demonstrate that it is in fact impossible to de-
sign a multi-hop payment protocol with both network asynchrony
and faulty channels, i.e., channels that may not correctly follow the
protocol. We then detail two committee-based multi-hop payment
protocols that respectively assume synchronous communications
and possibly faulty channels, or asynchronous communication and
correct channels. The first protocol relies on possibly faulty com-
mittees instead of the blockchain to resolve channel disputes, and
enforces privacy properties within a synchronous network. The
second one relies on committees that contain at most ùëì faulty mem-
bers out of 3ùëì +1 and successively delegate to each other the role of
eventually completing a multi-hop payment. We show that both
protocols satisfy the security requirements of a multi-hop payment
and compare their communication complexity and latency.

1 INTRODUCTION
Payment channel networks (PCNs) [25] allow faster, cheaper, and
more energy-efficient transactions than blockchains. Their key ad-
vantage is that most transactions can be conducted using only local
communication whereas blockchains usually require broadcasting
transactions to all participants for verification. The largest PCN,
Lightning [48], has a capacity of more than 100 million euros as of
January 29, 2022 [1].

In a PCN, two parties can open and fund bi-directional channels
using a blockchain transaction. Once their channel has been opened,
the two parties can conduct transactions by updating their shared

This document is a preprint of a paper accepted at the ACM conference on Ad-
vances in Financial Technologies (AFT 2022).

account and moving the coins from one side to the other. Further-
more, multi-hop payments allow forwarding a payment between a
sender and receiver via a path of channels, enabling transactions
between parties that have not opened a dedicated shared chan-
nel [3, 4, 18, 19, 35, 37, 38, 48]. In a multi-hop payment, parties first
lock coins of a channel with regard to a condition, then the payment
is either executed by satisfying the condition or is revoked.

1.1 Motivation
The security of bi-directional payment channels relies on the un-
derlying blockchain. In case of a dispute about the channel balance,
both parties can publish what they consider the most recent state on
the blockchain, which can then determine the correct balance. For
example, in a case where a malicious party publishes an old state of
the channel balance, the honest party has to react to the published
state. Within Œî blocks, the honest party can publish a penalty trans-
action [48] or raise a dispute [43] and claim the coins of the channel.
If the state of the honest party is not published in time ‚Äî which
might be challenging in times where many transactions are waiting
to be validated as well as in periods of network asynchrony ‚Äî she
can lose her rightfully owned coins. Thus, blockchain synchrony
is required to guarantee that disputes can be resolved and honest
parties do not lose their coins.

Second, for multi-hop payments in PCNs, parties lock coins in
each channel for some time. For example, in the Lightning Net-
work, the locking time is typically chosen in the order of hours
or days [39], and parties should complete the payment within this
time period. Similar to payment channels, honest parties have to
react to malicious updates within the time interval. Thus, there is
a synchrony requirement that is not always satisfied, especially
under attack [29, 47, 52]. For instance, Flood&Loot [29] congests the
underlying blockchain with channel closure requests containing
invalid states. Due to the high number of transactions competing
to be included in a block, honest parties are unable to have the
correct state included within a block in time and hence lose coins.
So, liveness faults of the blockchain layer, i.e., not being able to
publish a transaction within time Œî, cause safety faults, i.e., loss of
funds, for payment channel networks.

1.2 Related Work
Several works investigate asset transfers in asynchronous net-
works [5, 13, 26, 27, 42]. Concurrently and independently from

1

 
 
 
 
 
 
our work, Naor and Keidar showed that establishing a payment
channel with faulty parties on top of an asynchronous asset transfer
system is impossible [42]. More precisely, they demonstrate that
only a unidirectional payment channel, which in addition does not
allow the payer in the channel to initiate closure, can be realized
in this model. They suspect that it might be possible to design a
payment channel network using uni-directional channels where
only the payee can close the channel with the use of HTLCs (hash-
time lock contracts) from which the timeout component is removed.
However, from the brief discussion given in the paper, it is unclear
how to guarantee progress, i.e., how to ensure that payments are
eventually either successful or revoked, without timeouts. There
are three approaches that relate to blockchain asynchrony, i.e.,
work for blockchains without the guarantee to have transactions
included within time Œî. First, watchtowers [17] allow parties to
defer publication of the state to third parties. In this manner, parties
can become unresponsive, e.g., due to a denial-of-service attack,
without being vulnerable to a malicious act by the other party in
the channel. Yet, watchtowers are ineffective if the third parties are
also not able to publish a transaction in time. In other words, watch-
towers displace the responsibility of observing the blockchain but
do not alleviate it. Second, trusted execution environments (TEEs)
can be leveraged to prevent the publication of invalid states, thus
removing the need for a dispute period [35]. Yet, Intel SGX, the TEE
used in the existing designs, is vulnerable to various side channel
attacks [9, 50] and deprecated1. Third, Brick [6] realizes asynchro-
nous payment channels by involving a committee into the channel.
In exchange for fees, rational committee members keep track of the
state of the channel and ensure that only valid states are published
on the blockchain. However, Brick is only applicable for single-hop
channels, not for PCNs.

1.3 Our Contributions
We investigate multi-hop payments in PCNs with blockchain asyn-
chrony. By reducing the problem of a multi-hop payment to a fair
exchange, we show that multi-hop payments are only possible if
the network is synchronous or if all channels in a multi-hop pay-
ment behave according to the protocol or in favor of honest parties,
which can be enforced by a trusted third party.

We design two protocols based on BFT committees: SyncPCN
and PSyncPCN. SyncPCN assumes synchronous communication and
parties only need to trust the committees of their own channels,
not the committees of other channels possibly involved in a multi-
hop payment. SyncPCN resembles the AMHL protocol, which is
an improvement over Lightning in terms of privacy and security.
Unlike AMHL, in SyncPCN, each channel registers payments with
a committee that enables dispute resolution among the parties
without the need for blockchain synchrony.

In contrast, PSyncPCN tolerates partially-synchronous commu-
nication in addition to blockchain asynchrony, but it requires that
each committee involved in the payment acts honestly, i.e., that at
most ùëì out of its 3ùëì +1 committee members are faulty. We discuss
how random peer sampling or a globally trusted committee can

1https://edc.intel.com/content/www/us/en/design/ipla/software-development-
platforms/client/platforms/alder-lake-desktop/12th-generation-intel-core-
processors-datasheet-volume-1-of-2/001/deprecated-technologies/

2

Oƒüuzhan Ersoy, J√©r√©mie Decouchant, Satwik Prabhu Kumble, and Stefanie Roos

be used to obtain BFT committees with high probability. PSyncPCN
relies on a total order broadcast protocol inside committees and
on broadcasts between subsequent committees on a payment path.
Hence, it is less efficient than SyncPCN, which only relies on consis-
tent broadcast. Given the classical FLP result [21], PSyncPCN lever-
ages existing total order broadcast protocols to provide termination
if one assumes a partially synchrony [10, 16, 51], or probabilistic
termination in full asynchrony [31, 41]. We prove the security of
our protocols and provide a performance analysis. While we assume
honest and malicious parties during our analysis, our protocols can
largely leverage incentives to ensure that rational parties behave
honestly [6].

Our contributions are as follows:

‚Ä¢ We prove that a secure multi-hop payment protocol with
asynchronous communication and faulty channel updates is
impossible.

‚Ä¢ We design SyncPCN and PSyncPCN for payment channel
networks with blockchain asynchrony and synchronous or
partially-synchronous communication, respectively.

‚Ä¢ We show that SyncPCN and PSyncPCN enable secure multi-

hop payments.

‚Ä¢ We derive communication and latency complexities for SyncPCN
and PSyncPCN and compare them with the existing protocols.

Our designs are the first payment channel networks that can be
deployed without blockchain synchrony or trusted hardware.

The rest of this paper is organized as follows. ¬ß2 provides the
background knowledge. ¬ß3 proves that it is impossible to devise a
protocol for asynchronous multi-hop payment channels without
a trusted third party. ¬ß4 and ¬ß5 respectively presents SyncPCN and
PSyncPCN. ¬ß6 discusses incentives, the performance of SyncPCN
and PSyncPCN and compares them with existing payment channel
networks. Finally, ¬ß7 concludes this paper.

2 BACKGROUND
This section introduces key concepts related to synchrony, commit-
tees, and communication. Furthermore, we provide more details on
payment channels, including a discussion of Brick, an asynchronous
payment channel, and PCNs. We also formally define the security
goals of multi-hop payments.

2.1 Time and Blockchain
Nodes communicate by exchanging messages and are equipped
with loosely synchronized clocks. Communication is called synchro-
nous if there is a known upper bound ùõø on message transmission
time, or asynchronous if there is no such upper bound. Messages
are not lost but can be reordered.

A blockchain is a distributed ledger of transactions that are
grouped in blocks. Time can be measured as a number of blocks
appended to a blockchain. A secure blockchain should satisfy per-
sistence and liveness properties [23, 46]. A transaction is stable if it
is unfeasible to remove it from the blockchain. Persistence means
that if a transaction is recorded as stable by an honest party, the
rest of the honest parties do not record a conflicting transaction
as stable. Liveness implies that if an honest party wants to add a
valid transaction into the blockchain, it will eventually be recorded

SyncPCN/PSyncPCN: Payment Channel Networks without Blockchain Synchrony

as stable by all honest parties. Moreover, blockchain synchrony
implies that a transaction is recorded as stable within Œî blocks.

2.2 Byzantine Committees and Broadcast
A committee is a set of nodes, each equipped with known signature
keys, that jointly take or record decisions. They provide signed mes-
sages to show their agreement to a decision. Nodes in the committee
can be honest (or correct), which means that they strictly follow
the protocol, or malicious (or faulty), which means that they might
arbitrarily deviate from it. To tolerate at most ùëì faulty members,
a Byzantine fault tolerant (BFT) committee contains at least 3ùëì +1
members. A committee that contains more than ùëì malicious nodes
is said to be malicious. A Byzantine quorum is a set of at least 2ùëì +1
replicas. A set of 2ùëì +1 signatures on a message is called a quorum
certificate. We rely on the following quorum properties. First, if
nodes require a quorum certificate to update a value they store,
then it is not possible to collect a quorum certificate on a different
value. Second, when at least ùëì +1 committee members declare that
they have collected a quorum certificate for a given value, then the
value returned is the one stored by correct committee members.

To obtain guarantees regarding the messages delivered by cor-
rect committee members, one can leverage consistent, reliable, or
total order broadcast. Informally, a consistent broadcast used by an
application guarantees that if a correct node broadcasts a message
ùëö, then all correct nodes eventually deliver ùëö to their application
and that if two correct nodes deliver ùëö and ùëö‚Ä≤, then ùëö=ùëö‚Ä≤ [49].

Reliable broadcast [8, 32] in addition requires that if a correct
node delivers ùëö then all correct nodes eventually deliver it, re-
gardless of whether the sender is correct or not. A total order (or
atomic) broadcast protocol additionally guarantees that correct
nodes deliver messages in the same order [11, 33]. Total order can
be provided by a consensus protocol [10, 51, 53].

2.3 Payment Channels and Brick
We consider bidirectional channels [15], as implemented in Light-
ning [48]. Two parties ùëÉ and ùëÑ open a payment channel by pub-
lishing a funding transaction on the blockchain, through which
they deposit ùëêùëÉ and ùëêùëÑ , respectively, coins for the channel. (ùëêùëÉ , ùëêùëÑ )
denotes the initial balances of the channel and the total amount of
coins deposited, ùëêùëÉ +ùëêùëÑ , is the capacity of the channel. The balance
is adjusted after each transaction, e.g., if ùëÉ sends ùë• coins to ùëÑ, then
the balances will be (ùëêùëÉ ‚àíùë•, ùëêùëÑ +ùë•) as long as ùëêùëÉ ‚â•ùë•. Transactions
are conducted off-chain, i.e., the two parties locally sign a new state
of the balance. Parties can publish the final state on the blockchain
to withdraw their coins with the latest balance.

Brick [6] allows parties to establish a single-hop asynchronous
payment channel. Each channel uses a BFT committee. State up-
dates are sent to the committee and acknowledged by it. If a party
wants to unilaterally close the channel, the committee confirms
the last valid state and hence foregoes the need to publish on the
blockchain within a certain time limit. Consistency between honest
committee members is provided by a consistent broadcast protocol.
Committee members only observe hashed payment channel states
for privacy. Brick does not require blockchain synchrony and can
tolerate an asynchronous network.

3

2.4 Payment Channel Networks
The set of all payment channels form a network where the nodes are
the parties and the edges are channels. Opening a channel requires
a blockchain transaction and is hence costly and time-consuming.
Instead, two parties that do not share a direct channel may send a
multi-hop payment along a path of payment channels [3, 4, 18, 19,
37, 38, 48] so that each party on the path pays their successor.

Let mhp be a multi-hop payment on path ùëùùëéùë°‚Ñé = (ùëÉ0, . . ., ùëÉùëò )
with corresponding channels (ùõæ0, . . ., ùõæùëò‚àí1). Here, ùëùùëéùë°‚Ñé[0] := ùëÉ0
and ùëùùëéùë°‚Ñé[ùëò] := ùëÉùëò denote the sender and the receiver respectively,
and ùëùùëéùë°‚Ñé[1 : ùëò ‚àí 1] are the intermediarty parties. In source routing-
based multi-hop payment protocols, the sender ùëÉ0 chooses the
path of the payment, and prepares a payload message ùëÄùëñ for each
party ùëÉùëñ . The payload message includes the necessary information
regarding the payment, such as the amount, locking condition, the
next party in the path, etc.

Initially, the state of each channel ùõæùëñ is unlocked2. In the commit
phase, each party ùëÉùëñ locks the coins ùë£ùëñ in ùõæùëñ (if they have enough
balance and ùëìùëñ =ùë£ùëñ‚àí1‚àíùë£ùëñ , where ùëìùëñ is the fee of the intermediary
ùëÉùëñ ) with regard to a condition condùëñ , and then the channel state
becomes locked. The locked coins cannot be used by either party
until the payment is finalized. In the payment execution phase,
there are two possible outcomes for each locked channel: if the
condition is satisfied and the payment is successful, then the final
channel state becomes paid; otherwise, the payment is revoked
(canceled), and the final channel state is revoked.

2.5 Security and Privacy Definitions
In general, the security of a multi-hop payment protocol is defined
via balance security, which often implicitly covers the correctness
and coin availability properties as well. Here, we define them sepa-
rately. Balance security implies that the total balance of an honest
intermediary party does not decrease, and the sender should pay
only if the receiver is paid [4, 20, 36]. Correctness means that the
payment is successful if all parties are honest and there is sufficient
balance. The balance security definition covers safety of the coins.
However, it does not take into account liveness, i.e., the eventual
transition from the initial to the final state. Coin availability ensures
that the payment is eventually finalized.

Definition 1 (Balance Security). Let mhp be a multi-hop pay-
ment with (ùë£0, . . ., ùë£ùëò‚àí1) coins to be paid in channels of (ùõæ0, . . ., ùõæùëò‚àí1)
such that ùë£ùëñ ‚â•ùë£ ùëó for 0‚â§ùëñ‚â§ ùëó ‚â§ùëò‚àí1. If an honest intermediary party ùëÉùëñ
pays ùë£ùëñ+1 coins in ùõæùëñ+1, ùëÉùëñ receives the amount ùë£ùëñ in ùõæùëñ . If the sender
ùëÉ0 pays ùë£0 coins in ùõæ0, the receiver ùëÉùëò is paid ùë£ùëò‚àí1 coins in ùõæùëò‚àí1. This
implies that the final states of the channels ùõæùëñ and ùõæùëñ+1 of an honest
intermediary ùëÉùëñ are identical, i.e., either both revoked or paid.

Definition 2 (Correctness). Let mhp be a multi-hop payment
with (ùë£0, . . ., ùë£ùëò‚àí1) coins to be paid in channels of (ùõæ0, . . ., ùõæùëò‚àí1) such
that ùë£ùëñ ‚â•ùë£ ùëó for 0‚â§ùëñ‚â§ ùëó ‚â§ùëò‚àí1. If the protocol is executed honestly and
each channel ùõæùëñ has a balance of at least ùë£ùëñ and the locking conditions
are satisfied, then the states of the channels of mhp.path move to
locked and then to paid, otherwise, they remain unlocked.

2In practice, there would be several simultaneous multi-hop payments, and these
states are matched with the id of a multi-hop payment. For simplicity, we ignore the
corresponding ids, and focus on one multi-hop payment.

Definition 3 (Coin Availability). The channel of an honest
party never stays forever in state locked, i.e., it eventually transitions
to paid or revoked.

A secure multi-hop payment protocol satisfies these three se-
curity notions. Instead of balance security, atomicity can be the
main security goal. The difference between the two properties is
highlighted by the wormhole attack [37], which is undesired, yet
does not violate balance security. In this attack, the adversary steals
the fees of other intermediaries by skipping them during a phase
of the protocol. The attack violates atomicity, which implies that
if a channel revokes the payment all channels that precede this
channel in the payment path also revoke, but not balance security.
We define atomicity by adding an additional requirement to the
definition of balance security.

Definition 4 (Atomicity). A multi-hop payment protocol satis-
fies atomicity if it satisfies balance security (Def. 1) and the following
requirement: For an honest sender ùëÉ0, if the condition condùëñ for pay-
ment of channel ùõæùëñ is not satisfied for an honest party ùëÉùëñ+1, and the
payment is revoked, then there are no two channels ùõæùõº and ùõæùõΩ such
that the corresponding conditions condùõº and condùõΩ are satisfied, and
both channels are paid where ùõº < ùëñ < ùõΩ.

Regarding privacy, we consider the privacy concepts introduced
in [36, 40]: Value privacy, endpoint (sender or receiver) privacy and
relationship anonymity. Value privacy means that the value of a
payment is only revealed to the parties involved, i.e., sender, re-
ceiver, and intermediaries. Endpoint privacy states that the sender
and receiver are not explicitly revealed to any party that is not
an endpoint. Last, relationship anonymity is a stronger notion of
endpoint privacy stating that if there is an honest party among
the intermediaries, then the corrupted intermediary parties cannot
distinguish two payments sharing a segment of the path.

We define the following games, which are formal variants of
the ones defined in [4, 36]. In each game, an adversary tries to
distinguish two different payments. Unless stated otherwise, we
assume that the payment values, fees, timelocks (if any) and path
lengths of the two payments are the same (or they would be trivially
distinguishable). Like in previous works, we do not consider side
channel attacks [34, 44]. Also, the privacy properties are defined for
the off-chain protocol and are not required to hold if the payment
goes to the blockchain.
Value Privacy Game: Let an adversary A ‚àâ ùëùùëéùë°‚Ñé choose two pay-
ment values ùë£ 0 and ùë£ 1 for a payment path ùëùùëéùë°‚Ñé where the channels
in ùëùùëéùë°‚Ñé have sufficient capacities for both values. Let ùëè ‚àà {0, 1}
ùëè be the corresponding multi-hop
be chosen randomly. Let mhp
payment with payment value ùë£ùëè . In case of a successful payment
of mhp

ùëè , A wins the game by guessing the value of ùëè:
(cid:21)

(cid:20)
ùëè ‚Ä≤ = ùëè : ùëè ‚Ä≤ ‚Üê Aùë£0,ùë£1,ùëùùëéùë°‚Ñé, ùëè

ùëÖ
‚Üê {0, 1}

.

ùëÉùëüùëâ ùëÉ := ùëÉùëü

Definition 5 (Value Privacy). We say that a multi-hop pay-
ment protocol satisfies value privacy if for every PPT (probabilistic
polynomial-time) adversary A, the probability of winning Value
Privacy Game is ùëÉùëüùëâ ùëÉ = 1/2 + ùúñ where ùúñ is negligible.
Endpoint Privacy Game: Let an adversary A := ùëÉùëñ choose two
payment paths ùëùùëéùë°‚Ñé0 and ùëùùëéùë°‚Ñé1 such that (ùëùùëéùë°‚Ñé0 [0], ùëùùëéùë°‚Ñé0 [ùëò])

4

Oƒüuzhan Ersoy, J√©r√©mie Decouchant, Satwik Prabhu Kumble, and Stefanie Roos

‚â† (ùëùùëéùë°‚Ñé1 [0], ùëùùëéùë°‚Ñé1 [ùëò]) and (ùëÉùëñ‚àí1, ùëÉùëñ, ùëÉùëñ+1) = ùëùùëéùë°‚Ñé0 [ùëñ ‚àí 1 : ùëñ + 1] =
ùëè
ùëùùëéùë°‚Ñé1 [ùëñ ‚àí 1 : ùëñ + 1]. Let ùëè ‚àà {0, 1} be chosen randomly. Let mhp
be the corresponding multi-hop payment with path ùëùùëéùë°‚Ñéùëè , and ùëÄùëè
ùëñ
ùëè , A
be the payload message of ùëÉùëñ . In successful payment of mhp
wins the game by guessing the value of ùëè:

ùëÉùëüùê∏ùëÉ := ùëÉùëü

(cid:20)
ùëè ‚Ä≤ = ùëè : ùëè ‚Ä≤ ‚Üê Aùëùùëéùë°‚Ñé0,ùëùùëéùë°‚Ñé1,ùëÄùëè

ùëñ , ùëè

ùëÖ
‚Üê {0, 1}

(cid:21)

.

Definition 6 (Endpoint Privacy). We say that a multi-hop
payment protocol satisfies endpoint privacy if for every PPT adversary
A, the probability of winning Endpoint Privacy Game is ùëÉùëüùê∏ùëÉ =
1/2 + ùúñ where ùúñ is negligible.

Relationship Anonymity Game: Let an adversary A ‚äÇ ùëùùëéùë°‚Ñé[1 :
ùëò ‚àí 1] choose a path segment ùëùùëéùë°‚Ñé[1 : ùëò ‚àí 1] such that there is
at least one honest party in ùëùùëéùë°‚Ñé[1 : ùëò ‚àí 1], and has two candi-
date senders ùë†0,ùë†1 and receivers ùëü 0,ùëü 1. Let ùëè ‚àà {0, 1} be chosen
randomly. If ùëè = 0, then (ùëùùëéùë°‚Ñéùëñ [0], ùëùùëéùë°‚Ñéùëñ [ùëò]) = (ùë†ùëñ, ùëüùëñ ), otherwise
ùëñ be the corre-
(ùëùùëéùë°‚Ñéùëñ [0], ùëùùëéùë°‚Ñéùëñ [ùëò]) = (ùë†ùëñ, ùëü 1‚àíùëñ ) for ùëñ = 0, 1. Let mhp
sponding multi-hop payment with path ùëùùëéùë°‚Ñéùëñ , and {ùëÄùëñ } A be the
payload message(s) of A for ùëñ = 0, 1. In case of simultaneous suc-
1, A wins the game by guessing
cessful payments of mhp
the value of ùëè:

0 and mhp

ùëÉùëüùëÖùê¥ := ùëÉùëü

(cid:20)
ùëè ‚Ä≤ = ùëè : ùëè ‚Ä≤ ‚Üê Aùëùùëéùë°‚Ñé [1:ùëò‚àí1],{ùëÄ 0 }A,{ùëÄ 1 }A , ùëè

ùëÖ
‚Üê {0, 1}

(cid:21)

.

Definition 7 (Relationship Anonymity). We say that a multi-
hop payment protocol satisfies relationship anonymity if for every PPT
adversary A, the probability of winning the Relationship Anonymity
Game is ùëÉùëüùëÖùê¥ = 1/2 + ùúñ where ùúñ is negligible.

3 IMPOSSIBILITY PROOF FOR MULTI-HOP

PAYMENTS

We show that there is no secure multi-hop payment protocol on
an asynchronous network with faulty channels. Here, we refer to a
channel as faulty if parties or committee members cause channel
updates that are not in line with the protocol or refuse channel
updates that are in line with the protocol. We call a channel honest
if all updates happen in accordance with the protocol. An honest
channel requires that some but not all parties involved in the chan-
nel (parties or committees) behave in accordance with the protocol.
Parties (or committees) follow the protocol either because they are
honest or because they are rational and incentivized. For now, we
focus on honest parties and discuss incentives in Section 6.

3.1 Fair Exchange
A fair exchange protocol between parties ùëÉ and ùëÑ is defined as
follows [2]. Assume that ùëÉ has an item ùëñùëÉ with the description
descùëÉ and ùëÑ has an item iùëÑ with the description descùëÑ . At the end
of the protocol, both parties should hold the item of the other party.
A fair exchange protocol has two phases: initialization and claim-
and-fund. During the initialization, parties agree on the descrip-
tion of the items, resulting in ùëÉ having (iùëÉ , descùëÑ ) and ùëÑ having
(iùëÑ, descùëÉ ). In the claim-and-fund phase, ùëÉ obtains iùëÑ (wrt. descùëÑ )
and ùëÑ obtains iùëÉ (wrt. descùëÉ ).

A fair exchange protocol should satisfy effectiveness, fairness,

and timeliness [2, 45].

SyncPCN/PSyncPCN: Payment Channel Networks without Blockchain Synchrony

‚Ä¢ Effectiveness: If no party misbehaves and the items match
their descriptions, then ùëÑ obtains iùëÉ and ùëÉ obtains iùëÑ ; other-
wise both parties abort.

‚Ä¢ Fairness: If honest ùëÉ does not obtain iùëÑ , then ùëÑ should not

obtain iùëÉ , and vice versa.

‚Ä¢ Timeliness: Every honest party eventually terminates via

either obtaining the correspoding item or aborting.

3.2 The proof
We explain the payment properties over the channels independently
of their actual implementation. The following lemma reduces a se-
cure multi-hop payment to a fair exchange protocol. The proof
builds on previous work that showed that there exists no asynchro-
nous cross-chain communication protocol with faulty nodes [54].

Lemma 8. Assume (cid:206)ùëÜùëÄùêª ùëÉ is a protocol that solves secure multi-
hop payment. Then there exists a protocol (cid:206)ùêπ ùê∏ that solves fair ex-
change.

Proof. We first describe a fair exchange protocol (cid:206)ùêπ ùê∏ that uses
a secure multi-hop payment protocol (cid:206)ùëÜùëÄùêª ùëÉ . To realize a fair
exchange between parties ùëÉ and ùëÑ, we consider two consecutive
channels ùõæùëñ and ùõæùëñ+1 of the multi-hop payment. Assume that suc-
cessful execution of (cid:206)ùëÜùëÄùêª ùëÉ in ùõæùëñ assigns ownership of iùëÉ to ùëÑ,
and similarly ùõæùëñ+1 assigns ownership of iùëÑ to ùëÉ. The descriptions
of the exchanges can be defined in the corresponding conditions
condùëñ and condùëñ+1 and the existence of sufficient channel balances.
The exchange occurs if the state of the channel becomes paid and
fails if the state becomes revoked or stays unlocked. We show that
the secure multi-hop payment properties are equivalent to the fair
exchange properties.

Effectiveness in fair exchange implies that if both parties ùëÉ and ùëÑ
honestly follow the protocol, and items match with the descriptions,
then the exchange succeeds, otherwise, the exchange should fail for
both parties. In a secure multi-hop payment, correctness implies
that if both channels ùõæùëñ and ùõæùëñ+1 are honest, the channels have
enough balance and the payment conditions are satisfied, then they
will both accept the payment and update the state of the multi-hop
payment with paid, otherwise, they stay unlocked. Thus, from our
description of a fair exchange protocol based on a secure multi-hop
payment above, effectiveness and correctness are equivalent.

Fairness in a fair exchange means that if an honest party does not
obtain the item, then the other party does not as well. In a secure
multi-hop payment, balance security implies that if the payment
is paid in ùõæùëñ+1, it should also be paid in ùõæùëñ , and similarly if the
payment is revoked in ùõæùëñ+1, then it should also be revoked in ùõæùëñ .
In other words, either both channels become paid (successful), or
both of them are revoked (aborted), which is equivalent to the fair
exchange fairness.

Timeliness in fair exchange states that party ùëÉ (equiv. for ùëÑ)
should eventually make the exchange or abort. Coin availability
for ùõæùëñ (and for ùõæùëñ+1) states that if the channel is locked, then it will
eventually reach states paid or revoked. Also, note that if ùõæùëñ is not
locked, then it is already unlocked. In other words, the state of the
channel eventually reaches one of the final states or always stays in
unlocked. Thus, coin availability and timeliness are equivalent. ‚ñ°

5

Theorem 9. There is no asynchronous secure multi-hop payment
protocol that tolerates faulty channels without a trusted third party.

Proof. The proof follows from the reduction given in Lemma 8
‚ñ°

and the impossibility proof given in [45].

4 SYNCPCN: BLOCKCHAIN-ASYNCHRONOUS

PAYMENTS ON SYNCHRONOUS
NETWORKS

This section describes SyncPCN, our multi-hop payment protocol
that assumes synchronous communication. We utilize channels
with a committee construction, which have also been used in
Brick [6]. Other than the synchronous communication assump-
tion, key differences to Brick are the introduction of timestamps for
each committee member and update as well as the closing proce-
dure. We assume that transactions to the blockchain are eventually
included but not necessarily within time Œî.

4.1 Model and Overview

Threat Model. We assume a static adversary A that corrupts
parties and committee members at the beginning of the protocol.
There is no upper limit on the number of corrupted parties, but the
adversary cannot corrupt more than ùëì out of ùëÅ ‚â•3ùëì + 1 committee
members of a channel of an honest party. In other words, for an
honest party ùëÉùëñ , we assume that both channels ùõæùëñ‚àí1 and ùõæùëñ have
at most ùëì malicious committee members among ùëÅ ‚â•3ùëì +1. This
assumption should hold even if ùëÉùëñ‚àí1 and ùëÉùëñ+1 are malicious. An
honest party does not have to trust the committees of other parties
for balance security and coin availability to hold.

Payment channels. Each payment channel (ùëÉ, ùëÑ) involves a com-
mittee ùëä (ùëÉ, ùëÑ) in the channel procedures: opening, update and
closure. To establish a committee, two parties first agree on its mem-
bers. During the channel opening, the parties publish the funding
transaction, which deposits the coins and registers the committee.
The coins can be redeemed from the channel if both parties sign
the channel state, or if one party signs the state together with a
Byzantine quorum of the committee.

To update the channel state, ùëÉ first computes the hash of the
new channel state together with a random value, signs the hash
and shares the state, random value and the signature with ùëÑ. Then,
after ùëÑ has validated the state, ùëÑ also signs the same hash value and
shares the signature with ùëÉ. Then, both parties send the signatures
and the hash to the committee members via consistent broadcast.
The reason for not sharing the (unobfuscated) channel state with the
committee members is the privacy of the individual channel updates.
In this way, the committee only sees the initial and final state of the
channel. The committee members validate the signatures on the
hashed state. If both signatures are valid, they acknowledge it by
sending their signatures of the shared hash and register the state
together with the time they have received it to the parties. Once
a party has received 2ùëì + 1 signatures (necessary for the state to
be available from any ùëì + 1 nodes if a channel has to be closed),
she knows that the update is accepted. An honest party does not
participate in new update requests while there is an ongoing update
or the channel closure has been initiated. Note that the registration
time is necessary for our protocol because of the time conditions.

The channel update takes 4ùõø: exchanging signatures and states
between the two parties takes 2ùõø, informing the committee and
receiving their responses are another 2ùõø.

Closing a channel is a bit more complex than in single-hop asyn-
chronous payment channels. If both parties agree on the channel
state, they can close the channel by signing the latest state, as in
Brick. Otherwise, the party wanting to close, say ùëÉ, initiates the
closure by sharing the latest state and random value used in the
hash with ùëä (ùëÉ, ùëÑ). ùëä (ùëÉ, ùëÑ) checks that it is indeed the latest state
by computing the hash and checking that it is equal to their latest
hash. Then, ùëä (ùëÉ, ùëÑ) informs ùëÑ of the closure initiation. If there
are ongoing multi-hop payments, the committee waits until the
timeouts of the multi-hop payments before closing the channel.
Note that these timeouts are computed with respect to the regis-
tration time of (the hash of) the channel state corresponding to
the payment3. Once all the channel outputs are resolved, then the
committee signs the final channel state accordingly. ùëÉ can close the
channel by publishing their signature together with the quorum
certificate of the committee.

Overview of the protocol. Figure 1 presents a payment example
that illustrates SyncPCN for four parties. Let us generalize the ex-
ample for ùëò+1 parties where ùëÉ0 is the payment sender, ùëÉùëò is the
payment receiver, and parties ùëÉ1, . . . , ùëÉùëò‚àí1 are the intermediaries.
The payment goes through ùëò channels: ùõæ0, ùõæ1, . . . , ùõæùëò‚àí1 where ùõæùëñ de-
notes the channels between ùëÉùëñ and ùëÉùëñ+1. In a successful multi-hop
payment, in each channel ùõæùëñ , ùëÉùëñ pays ùë£ùëñ := ùë£ + (cid:205)ùëò‚àí1
ùëó=ùëñ+1 ùëìùëó coins to
ùëÉùëñ+1 where ùë£ is the value of the payment agreed by the sender and
receiver, and ùëìùëó denotes the fee of an intermediary ùëÉ ùëó . Here, a mech-
anism is needed to ensure balance security, i.e., to guarantee that
honest ùëÉùëñ receives ùë£ùëñ+1 coins in ùõæùëñ+1 if she pays ùë£ùëñ coins in ùõæùëñ . Light-
ning achieves balance security by using HTLCs (hash-time lock
contracts). However, because of the privacy concerns as well as the
wormhole attack against HTLC, we adopt the AMHL (anonymous
multi-hop lock) protocol [37].

Here, we briefly explain the concept of conditional payments that
we adopt from AMHL. A conditional payment CP between payer ùëÉ
and payee ùëÑ can be defined with a tuple of (ùë£,ùëá , ùëå ) where ùë£ is the
payment value, ùëá is the timelock 4 and ùëå is the locking condition.
The conditional payment works as follows: First, ùëÉ locks ùë£ coins
with respect to the timelock ùëá and condition ùëå with regard to an
additively homomorphic one-way function H [37]. ùëÑ then can
claim the amount ùë£ by providing a witness (preimage) ùë¶ satisfying
the condition ùëå , i.e., ùëå = H (ùë¶). If the secret is not provided before
time ùëá , ùëÉ re-claims the amount.

4.2 Multi-hop Payment Protocol
We assume that the sender and receiver agree on the payment value
ùë£ and the path is chosen by the sender. The criteria on how to select
the path are orthogonal to our protocol and any source routing
algorithm can be used for selecting the path. To improve privacy,
we use onion routing with the Sphinx package format [14] for the

3The registration time of each committee member can be different. For the security of
our protocol, we only require that an update sent by an honest party is received by
honest committee members within ùõø time.
4In AMHL, the time unit is defined over the blocks. In our protocol, we use the global
time that is available to parties and committee members.

Oƒüuzhan Ersoy, J√©r√©mie Decouchant, Satwik Prabhu Kumble, and Stefanie Roos

Figure 1: Illustration of the steps of SyncPCN.

communication between parties in the path. The layered encryption
allows intermediaries to learn the predecessor and successor on the
path as well as a per-hop payload that includes payment information
necessary such as the payment value or timeouts5.

Now, we explain our protocol in three steps: First, the sender
creates the locking conditions for each channel in the path wrt.
the AMHL protocol. Second, from sender to receiver, parties lock
the coins if they accept the conditions and there is enough balance.
In the final step, the payment is executed: either the condition is
satisfied and payment is completed or it is revoked.

Setup. First, the sender ùëÉ0 chooses random values ‚Ñì0, ‚Ñì1, . . . , ‚Ñìùëò‚àí1,
:= H (ùë¶ ùëó ) for ùëó = 0, . . . , ùëò ‚àí 1.

and computes ùë¶ ùëó
Then, the sender constructs the payload of ùëÉùëñ as follows (ùëñ ‚â• 1):
ùê∏ùëùùëòùëñ (ùëÄùëñ ) := ùê∏ùëùùëòùëñ (ùëÉùëñ+1, ùë£ùëñ, (ùëåùëñ‚àí1, ùëåùëñ, ‚Ñìùëñ ),ùëáùëñ, ùê∏ùëùùëòùëñ+1 (ùëÄùëñ+1))

ùëñ=0 ‚Ñìùëñ and ùëåùëó

:= (cid:205)ùëó

denotes the encryption with the public key of node
where ùê∏ùëùùëòùëñ
ùëÉùëñ and ùëÄùëñ+1 is the payload of node ùëÉùëñ+1, which is in the same
structure as ùëÄùëñ . Note that there is always a padding to ensure that
all messages have the same length, which we exclude for brevity.
Here, ùëáùëñ = (cid:205)ùëò‚àí1
ùëó=ùëñ+1 ùëìùëó
is the amount. Like in the Lightning, we assume that timelock ùëá ùêøùëñ
and fee ùëìùëñ values of a channel ùõæùëñ as well as the public key of a party
ùëùùëòùëñ are publicly known. For the balance security of an honest party
ùëÉùëñ , the timelock value ùëá ùêøùëñ should be greater than or equal to 6ùõø.
We explain the reasoning of the condition in the atomicity proof.

ùëó=ùëñ+1 ùëá ùêøùëó is the timelock value and ùë£ùëñ := ùë£ + (cid:205)ùëò‚àí1

Locking. The sender ùëÉ0 initiates the payment with ùëÉ1 wrt. the
conditional payment CP0 = (ùë£0, ùëå0,ùëá0), see step 1 in Fig. 1. Note
that at this point ùëÉ1 is the payee, thus she accepts the payment
if the channel balance is enough. If the update is successful, then
ùëÉ0 sends ùê∏ùëùùëò1 (ùëÄ1) to ùëÉ1. Then, ùëÉ1 decrypts ùëÄ1 and checks the
payment conditions for the next hop. After checking the validity of
the payment, as described below, ùëÉ1 initiates the payment with ùëÉ2
in ùõæ1 (step 2 in Fig. 1). If the update is successful, ùëÉ1 sends ùê∏ùëùùëò2 (ùëÄ2)
to ùëÉ2. The steps of decrypting the message, checking the validity
of the payment, and forwarding it to the successor continue until
the receiver has been reached. If all channels on the path, including
the channel of the receiver, agree to lock the payment, then the
locking phase is considered successful. However, if a channel on the

5As described in https://github.com/lightningnetwork/lightning-rfc/blob/master/04-
onion-routing.md.

6

ùëÉ!	1.ùê∂ùëÉ(ùë£!,ùëå!	,ùëá!	)UpdAckUpdAckUpdAck	2.ùê∂ùëÉ(ùë£#,ùëå#	,ùëá#	)	3.ùê∂ùëÉ(ùë£$,ùëå$	,ùëá$	)4. Locked5.ùë¶$	6.	ùë¶$		7.	ùë¶#		8.	ùë¶!	ùëä(ùëÉ!,ùëÉ")ùëä(ùëÉ",ùëÉ#)ùëä(ùëÉ#,ùëÉ$)ùëÉ#ùëÉ$ùëÉ%SyncPCN/PSyncPCN: Payment Channel Networks without Blockchain Synchrony

path does not accept the payment request, then the locking phase
is aborted. All the previously locked channels can be unlocked
either by agreement of the parties to abort the payment or after the
corresponding timelocks expire.

Now, we discuss the channel update requirements for a pay-
ing intermediary party ùëÉùëñ after updating the channel ùõæùëñ‚àí1 wrt.
CPùëñ‚àí1=(ùë£ùëñ‚àí1, ùëåùëñ‚àí1,ùëáùëñ‚àí1). First, ùëÉùëñ decrypts ùëÄùëñ and obtains (ùëÉùëñ+1, ùë£ùëñ,
(ùëåùëñ‚àí1, ùëåùëñ, ‚Ñìùëñ ),ùëáùëñ, ùê∏ùëùùëòùëñ+1 (ùëÄùëñ+1)) where CPùëñ =((ùëåùëñ‚àí1, ùëåùëñ, ‚Ñìùëñ ),ùëáùëñ ). Party
ùëÉùëñ accepts to lock the payment CPùëñ =(ùë£ùëñ, ùëåùëñ,ùëáùëñ ) in ùõæùëñ+1 if:

‚Ä¢ ùëÉùëñ has enough balance in the channel, at least ùë£ùëñ coins.
‚Ä¢ The payment value difference between CPùëñ‚àí1 and CPùëñ is at

least the expected fee, i.e., ùë£ùëñ‚àí1 ‚àí ùë£ùëñ ‚â• ùëìùëñ .

‚Ä¢ The timelock difference between CPùëñ‚àí1 and CPùëñ is at least

the expected timelock value, i.e., ùëáùëñ‚àí1 ‚àí ùëáùëñ ‚â• ùëá ùêøùëñ .

‚Ä¢ The AMHL condition is correct, i.e., ùêª (‚Ñìùëñ ) ‚äï ùëåùëñ‚àí1 = H (ùë¶ùëñ ) =
ùëåùëñ , where ‚äï denotes the homomorphic operation in the range
of H .

If all the checks are successful and both parties agree to the update,
ùëÉùëñ stores ‚Ñìùëñ to be utilized in the payment phase and the channel
ùõæùëñ‚àí1 is updated by the addition of CPùëñ . These checks are crucial for
the balance security of the honest ùëÉùëñ . The timelock check ensures
that ùëÉùëñ has enough time to react to the protocol regardless of the
actions of the other parties; the AMHL check ensures that ùëÉùëñ is
paid in ùõæùëñ‚àí1 if she pays in ùõæùëñ . For the receiver ùëÉùëò , since there is no
further channel, Party ùëÉùëò only checks the timelock in CPùëò‚àí1 :=
(ùë£,ùëáùëò‚àí1, ùëåùëò‚àí1) is greater than or equal to the expected timelock
value, i.e., ùëáùëò‚àí1 ‚â• ùëá ùêøùëò . Once the last channel is updated, the locking
phase is successful.

Payment. In this phase, the payment is executed. After the re-
ceiver ùëÉùëò sends Locked message to the sender ùëÉ0 (step 4 in Fig. 1),
ùëÉ0 reveals the witness ùë¶ùëò‚àí1 to ùëÉùëò (step 5 in Fig. 1). The receiver ùëÉùëò
uses the witness ùë¶ùëò‚àí1 to claim the payment of CPùëò‚àí1 from ùëÉùëò‚àí1
in channel ùõæùëò‚àí1 (step 6 in Fig. 1). If the witness is correct, then
ùëÉùëò‚àí1 can obtain witness ùë¶ùëò‚àí2 by using ùë¶ùëò‚àí1 and already known
value ‚Ñìùëò‚àí1, i.e., ùë¶ùëò‚àí2 = ùë¶ùëò‚àí1 ‚àí ‚Ñìùëò‚àí1. Similarly, ùëÉùëò‚àí1 can claim the
payment of CPùëò‚àí2 in channel ùõæùëò‚àí2 (step 7 in Fig. 1). The same steps
are repeated and the channels are updated in the direction from
the receiver to the sender. If the witness ùë¶ùëñ is not sent to ùëÉùëñ before
the timeout ùëáùëñ , then the conditional payment CPùëñ expires and the
parties update their channel ùõæùëñ such that ùëÉùëñ reclaims the locked
amount ùë£ùëñ .

In general, upon receiving the witness ùë¶ùëñ , an intermediary ùëÉùëñ ,

checks the following conditions:

?
= ùëåùëñ .
‚Ä¢ The witness is correct wrt. the condition, i.e., H (ùë¶ùëñ )
‚Ä¢ The secret is shared before the timeout, i.e., for the time ùë°ùëñ

when receiving the secret, ùë°ùëñ < ùëáùëñ .

If both checks are satisfied, then the parties update their channel ùõæùëñ
where ùëÉùëñ pays ùëÉùëñ+1 the amount ùë£ùëñ . After receiving the valid witness
ùë¶ùëñ , ùëÉùëñ computes ùë¶ùëñ‚àí1=ùë¶ùëñ ‚àí ‚Ñìùëñ and immediately requests the payment
from ùëÉùëñ‚àí1 in the channel ùõæùëñ‚àí1.

In case of a dispute when one of the parties does not accept to
update the channel, the honest party starts the procedure of channel
closing via the committee members. Here, we describe both cases
where either payer or payee is honest and the other party does not
cooperate with the channel update. If the payee ùëÉùëñ is honest and

7

has shared the witness ùë¶ùëñ‚àí1 on time but the other party ùëÉùëñ‚àí1 does
not update the channel, ùëÉùëñ initiates the closure of the channel. The
procedure works as follows:

(1) At time ùëáùëñ‚àí1 ‚àí ùõø, if the update is not completed, ùëÉùëñ sends
the latest state of the channel and the witness ùë¶ùëñ‚àí1 to the
committee members ùëä (ùëÉùëñ‚àí1, ùëÉùëñ ).

(2) ùëä (ùëÉùëñ‚àí1, ùëÉùëñ ) validates the state by checking whether the hash
of the state is the same as the latest hash (with the signatures
of the nodes) they have received. If the check fails, they
do not continue. Otherwise, they inform ùëÉùëñ‚àí1 by sending a
message stating the channel closure has been initiated.
(3) Then, ùëä (ùëÉùëñ‚àí1, ùëÉùëñ ) checks if the conditional payment is satis-
fied, i.e., ùë¶ùëñ‚àí1 satisfies the condition and the time of delivery
is before the timelock ùëáùëñ‚àí1. If the checks hold, then they ap-
prove the payment, and sign the latest state, which includes
the payment of ùë£ùëñ‚àí1, and send their signatures to ùëÉùëñ . They
send ùë¶ùëñ‚àí1 to ùëÉùëñ‚àí1.

(4) After receiving the signatures of ùëä (ùëÉùëñ‚àí1, ùëÉùëñ ), ùëÉùëñ signs the
new state of the channel and publishes it on the blockchain.
If the payer ùëÉùëñ‚àí1 is honest and has not received ùë¶ùëñ‚àí1 until the
timeout and the other party ùëÉùëñ does not update the channel to allow
ùëÉùëñ to reclaim her coins, then ùëÉùëñ‚àí1 initiates the closure of the channel.
The procedure works as follows:

(1) At time ùëáùëñ‚àí1, if the update is not completed, ùëÉùëñ‚àí1 sends
the latest state of the channel to the committee members
ùëä (ùëÉùëñ‚àí1, ùëÉùëñ ).

(2) ùëä (ùëÉùëñ‚àí1, ùëÉùëñ ) validates the state by checking the latest hash
they received (as in the previous case). If the checks fail, they
do not continue. Otherwise, they inform ùëÉùëñ .

(3) Then, ùëä (ùëÉùëñ‚àí1, ùëÉùëñ ) checks if the conditional payment has
failed, i.e., the timelock ùëáùëñ‚àí1 has passed. If the checks hold,
then they approve the cancellation of the payment, sign the
latest state, which removes the payment of ùë£ùëñ‚àí1, and send
their signatures to ùëÉùëñ‚àí1.

(4) After receiving the signatures of ùëä (ùëÉùëñ‚àí1, ùëÉùëñ ), ùëÉùëñ‚àí1 signs the
new state of the channel and publishes it on the blockchain.
Note that if ùëÉùëñ is honest and ùëÉùëñ‚àí1 has not accepted the channel
update, ùëÉùëñ should initiate the channel closure at ùëáùëñ‚àí1 ‚àíùõø as explained
in the first case. Thus, the committee members do not need to
validate that ùëÉùëñ‚àí1 is honestly claiming that she did not receive the
witness as they would already have received a message from ùëÉùëñ if
ùëÉùëñ‚àí1 was misbehaving. Also, if there are multiple ongoing multi-
hop payments, honest parties follow the same procedure for each
of them (without sharing the channel state if it is already shared).
In order to enable that state updates with timelocks about to expire
can be sent to the committee despite on-going payments, parties
do not initiate new updates for the respective channel within 4ùõø of
a timelock expiring. They further ensure that there are at least 4ùõø
between timelocks for the same channel.

4.3 Security and Privacy Analysis
We show in the following that SyncPCN achieves atomicity (def. 4),
coin availability (def. 3), value privacy (def. 5), endpoint privacy
(def. 6) and relationship anonymity (def. 7). We omit the proof
of balance security (def. 1), as atomicity implies balance security.
Furthermore, as it is straightforward that the protocol is successful

if all parties follow the protocol and channels have enough balance,
we omit the correctness proof.

To create multi-hop payments and the corresponding payload
messages for SyncPCN, we utilize two cryptographic operations:
hashing H (¬∑) and encryption ùê∏ùëùùëò (¬∑). Thus, the security analysis
relies on the security of these primitives. More specifically, we as-
sume that H is a cryptographically secure additively homomorphic
one-way function and ùê∏ùëùùëò is IND-CCA secure encryption scheme.

Theorem 10. SyncPCN provides atomicity.

Proof. Our atomicity proof has three steps: (i) the balance secu-
rity for an intermediary party ùëÉùëñ , (ii) balance security of the sender
ùëÉ0, (iii) atomicity requirement.

If the honest party ùëÉùëñ does not pay in ùõæùëñ , then it does not lose
any coins. Thus, we only need to ensure that if ùëÉùëñ pays in ùõæùëñ , the
party receives the payment in ùõæùëñ‚àí1. In other words, if the channel ùõæùëñ
is updated with the acceptance of the payment, then there should
be sufficient time for the party to use the corresponding witness
on the channel ùõæùëñ‚àí1.

If the payment for ùõæùëñ is accepted (by parties or the committee),
the latest time that ùëÉùëñ can receive the witness ùë¶ùëñ occurs when the
counter party ùëÉùëñ+1 does not provide ùë¶ùëñ before time ùëáùëñ ‚àí ùõø, but rather
shares it with the committee via initiating the channel closure. To
have approval of the honest members in ùëä (ùëÉùëñ‚àí1, ùëÉùëñ ), they should
receive ùë¶ùëñ before ùëáùëñ‚àí1. They then send it to ùëÉùëñ , which is delivered
at latest at ùëáùëñ + ùõø. After that, an honest ùëÉùëñ can compute the witness
ùë¶ùëñ‚àí1 = ùë¶ùëñ ‚àí ‚Ñìùëñ . Then, ùëÉùëñ first attempts to update the channel ùõæùëñ
before ùëáùëñ‚àí1 ‚àí ùõø, which takes at most 4ùõø (otherwise ùëÉùëñ sends the
channel state and the witness to committee). Thus, for an honest
party ùëÉùëñ to react on time, the following inequality has to hold:
ùëáùëñ‚àí1 ‚àí ùõø ‚àí (ùëáùëñ + ùõø) ‚â• 4ùõø. This is satisfied because of the choice of
timelocks, i.e., ùëáùëñ‚àí1 ‚àí ùëáùëñ ‚â• ùëá ùêøùëñ ‚â• 6ùõø. This shows (i).

Now, we show that ùëÉ0 pays in ùõæ0 only if the receiver ùëÉùëò is paid
in ùõæùëò‚àí1. Similar to [37], this is satisfied because of the secure one-
wayness property of H . Party ùëÉ0 only pays if ùë¶0 = ‚Ñì0 is provided
by ùëÉ1. The intermediary parties only know the ‚Ñìùëñ values for ùëñ =
1, . . . , ùëò ‚àí 2. The value ùë¶0 can only be obtained after ùë¶ùëò‚àí1 is shared
by ùëÉ0, which happens after the channel ùõæùëò‚àí1 is locked. In that case,
ùëÉùëò can also claim the payment in ùõæùëò‚àí1 using ùë¶ùëò‚àí1. Thus, (ii) holds.
Finally, we show atomicity: for an honest sender ùëÉ0 and honest
intermediary ùëÉùëñ+1, if the condition condùëñ is not satisfied, then both
conditions condùõº and condùõΩ should not be satisfied for ùõº < ùëñ < ùõΩ.
As explained for (ii), in our protocol, the payment conditions are
satisfied in the order from the receiver to the sender. It is hence
sufficient to show that condùõº is not satisfied. Note that satisfying
the payment condition condùõº implies knowing the preimage of ùëåùõº ,
which is ùë¶ùõº = (cid:205)ùõº
ùëñ=0 ‚Ñìùëñ . Since condùëñ is not satisfied, party ùëÉùëñ+1 would
not know/reveal ùë¶ùëñ+1 or ùë¶ùëñ , and also ‚Ñìùëñ+1. Thus the only way to
know ùë¶ùõº is directly from ùëåùõº , which contradicts with one-wayness
‚ñ°
of the hash function H .

Theorem 11. SyncPCN provides coin availability.

Proof. Each conditional payment has a finite timelock. In the
honest case, parties release the locked coins before the timelock
expires. In the malicious case where one of the parties does not
accept the update of the channel, the honest party can initiate the

8

Oƒüuzhan Ersoy, J√©r√©mie Decouchant, Satwik Prabhu Kumble, and Stefanie Roos

closure of the channel. Then, the committee executes the closure
of the channel after waiting for the timelocks, which also requires
‚ñ°
a finite amount of time.

Theorem 12. SyncPCN provides value privacy.

Proof. We need to show that the adversary A cannot win the
Value Privacy Game, i.e., cannot guess which of the values ùë£ 0,ùë£ 1
has been used in the multi-hop payment. In SyncPCN, payload mes-
sages between the parties in the path are encrypted and shared
with the onion routing mechanism. Thus, an outsider adversary
can only obtain the encrypted payload messages. Thereby, if A is
able to guess the payment value with more than 1/2 probability,
it implies that A obtained useful information from the encrypted
payload messages. However, this contradicts our assumption that
‚ñ°
the encryption scheme ùê∏ùëùùëò is IND-CCA secure.

Theorem 13. SyncPCN provides endpoint privacy.

Proof. Here, we show that the adversary A cannot win the
Endpoint Privacy Game with significantly more than a probabil-
ity of 1/2. First, A := ùëÉùëñ chooses two paths of the same length,
payment value, and timelocks, and for both paths, the neighbors
of A, ùëÉùëñ‚àí1 and ùëÉùëñ+1 are the same. For a randomly chosen path, let
ùëÄùëñ be the payload received by A. The previous party in the path
(ùëÉùëñ‚àí1) is the same for both paths, thus, in any case, the payload
will be received from ùëÉùëñ‚àí1, and it will include (ùëÉùëñ+1, ùë£ùëñ, (ùëåùëñ‚àí1, ùëåùëñ, ‚Ñìùëñ ),
ùëáùëñ, ùê∏ùëùùëòùëñ+1 (ùëÄùëñ+1)). Since the next party in the path, the payment
value, and timelocks are the same, the distinguishing part of the
two potential payments would be ((ùëåùëñ‚àí1, ùëåùëñ, ‚Ñìùëñ ), ùê∏ùëùùëòùëñ+1 (ùëÄùëñ+1)). The
adversary cannot obtain any information from ùê∏ùëùùëòùëñ+1 (ùëÄùëñ+1) with-
out violating the IND-CCA security assumption of the encryption
scheme. Finally, we need to show that the tuple (ùëåùëñ‚àí1, ùëåùëñ, ‚Ñìùëñ ) does
not reveal any information about the actual sender or receiver pair.
Note that ‚Ñìùëñ values are randomly chosen by the sender of the pay-
ment and the ùëåùëñ values are computed accordingly. Since ‚Ñìùëñ values do
not contain any information specific to the sender and are chosen
randomly, from the perspective of A, the tuple does not give any
information regarding the path. Hence, we can conclude that the
payload does not give any information about the path other than
‚ñ°
the neighbors of the adversary.

Theorem 14. SyncPCN provides relationship anonymity.

Proof. Different from the endpoint case, in the Relationship
Anonymity Game, the adversary is trying to distinguish ùëè from
two successful payments. Initially, the adversary chooses a path
segment ùëùùëéùë°‚Ñé[1 : ùëò ‚àí1] that is common in both payments. Moreover,
the adversary can include multiple adversarial intermediary parties
in ùëùùëéùë°‚Ñé[1 : ùëò ‚àí 1], so long as there is at least one honest party.

Let ùëÉùëñ be an honest party and the rest of the intermediaries be
adversarial, i.e., A := ùëùùëéùë°‚Ñé[1 : ùëñ ‚àí 1] ‚à™ ùëùùëéùë°‚Ñé[ùëñ + 1 : ùëò ‚àí 1]. Note
that this is the best case for the adversary (since it includes all
but one honest party in the path segment). Let {ùëÄ0} A, {ùëÄ1} A
be the corresponding payload messages received by A. Since the
intermediaries, payment values, and timelocks are the same fro
both paths, we can ignore them for distinguishing the paths. Thus,
the only aspects that can be used for distinguishing the paths are
the conditional payment tuples.

SyncPCN/PSyncPCN: Payment Channel Networks without Blockchain Synchrony

ùëó , ‚Ñìùëè

ùëó‚àí1, ùëå ùëè

The adversary has the tuples (ùëå ùëè

ùëó ) for ùëè = 0, 1 and ùëó =
1, . . . , ùëñ ‚àí 1, ùëñ + 1, . . . , ùëò ‚àí 1. Trivially, due to ùêª being homomorphic,
the adversary can link the tuples from the sender to ùëùùëéùë°‚Ñé[ùëñ ‚àí 1].
Similarly, A can link the tuples from the receiver to ùëùùëéùë°‚Ñé[ùëñ + 1].
Therefore, A can win the game (with more than 1/2 probability) if
and only if A can link the tuples of ùëùùëéùë°‚Ñé[ùëñ ‚àí 1] and the tuples of
ùëùùëéùë°‚Ñé[ùëñ + 1], thereby connecting the sender and receiver pairs.

ùëñ ) ‚äï ùëå ùë†0

, otherwise ùêª (‚Ñìùëè

ùëñ‚àí1, ‚Ñìùë†1
ùëñ‚àí2, ùëå ùë†1
ùëñ+1, ‚Ñìùëü 0
, ùëå ùëü 0
ùëñ‚àí1 and ùëå ùëü 0

Let us denote the tuple of ùëùùëéùë°‚Ñé[ùëñ ‚àí 1] linked to ùë†0 with (ùëå ùë†0
ùëñ‚àí2,
ùëñ‚àí1) and the one linked to ùë†1 with (ùëå ùë†1
ùëñ‚àí1, ‚Ñìùë†0
ùëå ùë†0
ùëñ‚àí1). Similarly,
the tuple of ùëùùëéùë°‚Ñé[ùëñ + 1] linked to ùëü 0 is (ùëå ùëü 0
ùëñ+1) and the one
ùëñ
linked to ùëü 1 is (ùëå ùëü 1
ùëñ+1). Here, if ùëå ùë†0
ùëñ+1, ‚Ñìùëü 1
, ùëå ùëü 1
are linked, i.e.,
ùëñ
belong to the same payment, then adversary can conclude that
ùëè = 0, otherwise ùëè = 1. If they belong to the same path then,
ùëñ‚àí1 = ùëå ùëü 0
ùëñ‚àí1 = ùëå ùëü 1
ùêª (‚Ñìùëè
ùëñ where ùëè ‚àà {0, 1}.
ùëñ
Therefore deriving whether ùëå ùë†0
are linked or not can be
ùëñ and ‚Ñì1
reduced to the knowledge of ùêª (‚Ñìùëè
ùëñ values
are only given to the intermediary party ùëÉùëñ , the hash values ùêª (‚Ñì0
ùëñ )
and ùêª (‚Ñì0
ùëñ ) that distinguishes the possible paths are not known
by A. More specifically, from the adversary‚Äôs perspective, both
ùëå ùë†0
ùëñ‚àí1 ‚äï ùëå ùëü 0
ùëñ values are equally likely candidates for
ùêª (‚Ñìùëè
ùëñ ) where ùëè ‚àà {0, 1}. Under the assumption that the encryption
scheme ùê∏ùëùùëò is IND-CCA secure, and H is a cryptographically secure
hash function, the adversary cannot guess ùëè value with a probability
‚ñ°
significantly higher than 1/2.

ùëñ ) ‚äï ùëå ùë†0
ùëñ‚àí1 and ùëå ùëü 0

ùëñ ) value. Since ‚Ñì0

ùëñ‚àí1 ‚äï ùëå ùëü 1

and ùëå ùë†0

ùëñ

ùëñ

ùëñ

5 PSYNCPCN: BLOCKCHAIN-ASYNCHRONOUS

PAYMENTS ON
PARTIALLY-SYNCHRONOUS NETWORKS
This section describes PSyncPCN, our multi-hop payment protocol
that assumes the availability of a BFT committee associated with
each channel but does not assume synchronous communications.

5.1 Model and Overview

Threat Model. Committees in PSyncPCN are assumed to contain
at most ùëì faulty members out of ùëõ ‚â• 3ùëì +1 members. Channel com-
mittee members can be selected randomly from a global blockchain
committee using recent works [7, 22, 24, 30], which guarantee un-
biased uniform selection and termination of the selection protocol.
Appx. A discusses the probability for a committee of size ùëõ that is
sampled from a global committee of size ùëÅ with ùêπ faulty members
to contain less than ùëì faulty members.

Payment channels. Committee members maintain a channel‚Äôs
balance, lock the amounts that correspond to on-going payments,
and eventually release or confirmed these locked amounts. To en-
sure that a payment is eventually processed or rejected, intermedi-
ary parties cannot stop a payment that uses one of their channels,
but they are kept informed of their balance. To close a channel
one of the party has to explicitly request it from the committee
members. Since the balance of a channel depends on the multi-hop
payment that it is involved it, the committee members then stop
accepting new payments on the channel. Once all pending pay-
ments have been processed, the value reported by at least 2ùëì +1

9

Figure 2: Illustration of the steps of PSyncPCN.

committee members is published on the blockchain as the final
channel balance.

Message format and payment Ids. Once a channel has been cre-
ated, like in SyncPCN, the payment sender and receiver agree outside
of the protocol on the payment. The sender identifies a path to the
receiver. Messages use the same layered encryption format as in
SyncPCN with the difference that they do not include timeouts and
tuples (ùëåùëñ‚àí1, ùëåùëñ, ‚Ñìùëñ ) of hashes and random numbers. A committee
member of a multi-hop payment in PSyncPCN trusts subsequent
committees on the path to process it. Upon success, the sender
eventually assembles a payment proof made of ùëì +1 confirmations
from its committee. Committees use a total order broadcast to safely
process potential concurrent multi-hop payments originating from
different payment senders. PSyncPCN could leverage virtual chan-
nels [19] to use only one consensus operation per multi-hop chan-
nel creation/deletion and otherwise leverage reliable broadcast for
subsequent payments over the multi-hop channel.

A payment is given a monotonically increasing payment Id by the
nodes sending or transmitting it because messages can be reordered
by the network and to allow multiple identical payments to be
correctly processed. Initially, the payment sender uses its locally
maintained payment Id to communicate with its committee. Upon
transmitting a payment, a committee replaces the Id it received by
an Id it maintains to exchange with the subsequent committee.

5.2 Multi-hop protocol
We present pseudocode of PSyncPCN in Alg. 1. For clarity, we sim-
plify it as follows: we do not show message encryptions or de-
cryptions; the channel balance is only maintained for the payment
sender; onion paths are replaced by the full payment path so that
a payment can be identified using only the payment Id chosen by
the payment sender; payment fees are also ignored.

To start a payment, the sender sends a PAY message to the
committee of the first channel on the path towards the receiver.
PSyncPCN follows a 2-phase approach, like SyncPCN, with one phase
for locking and one for confirming/revoking a payment. Payments
implicitly belong in one of two states:

(1) locked: the payment has been locally registered and trans-

ferred to the subsequent committee for processing.

(2) done: the payment is completed for this channel.

ùëÉ!	1.(ùëÉùëéùë¶,ùêºùëë,ùë£!)3.(ùëÉùëéùë¶,ùêºùëë,ùë£")ùëä(ùëÉ!,ùëÉ")ùëä(ùëÉ",ùëÉ#)ùëä(ùëÉ#,ùëÉ$)ùëÉ"ùëÉ#ùëÉ$5.(ùëÉùëéùë¶,ùêºùëë,ùë£#)7.(ùëÜùëàùê∂ùê∂ùê∏ùëÜùëÜ,ùêºùëë,ùë£#)9.(ùëÜùëàùê∂ùê∂ùê∏ùëÜùëÜ,ùêºùëë,ùë£")	2.(ùëôùëúùëêùëòùëíùëë,ùë£!)	10.(ùëëùëúùëõùëí,ùë£!)	4.(ùëôùëúùëêùëòùëíùëë,ùë£")	8.(ùëëùëúùëõùëí,ùë£")	6.(ùëëùëúùëõùëí,ùë£#)Algorithm 1 Simplified PSyncPCN.

For party ùëÉùëñ :

ùëöùë¶ùêµùëéùëôùëéùëõùëêùëí‚àí=ùë£ùëñ

ùëöùë¶ùê¥ùë£ùëéùëñùëôùêµùëéùëôùëéùëõùëêùëí+=ùë£ùëñ

totallyOrder(PAY, ùêºùëë, ùë£ùëñ, ùëùùëéùë°‚Ñé)

totallyOrder(PAY, ùêºùëë, ùë£ùëñ, ùëùùëéùë°‚Ñé)

For members of committee ùëä (ùëÉùëñ, ùëÉùëñ+1):

totallyOrder(SUCCESS, ùêºùëë, ùë£ùëñ+1, ùëùùëéùë°‚Ñé)

if ùêºùëë ‚â•ùëõùëíùë•ùë°ùêºùëë (ùëùùëéùë°‚Ñé [0]) then // discard invalid Ids

ùëöùë¶ùê¥ùë£ùëéùëñùëôùêµùëéùëôùëéùëõùëêùëí = ùëöùë¶ùêµùëéùëôùëéùëõùëêùëí = ùë£
ùêºùëë = 0

ùëèùëéùëôùëéùëõùëêùëí (ùëÉùëñ ) = ùëéùë£ùëéùëñùëôùêµùëéùëôùëéùëõùëêùëí (ùëÉùëñ ) = ùë£
ùëõùëíùë•ùë°ùêºùëë (ùëÉùëñ ) = 0

ùëùùëéùë°‚Ñé = findPathTo(ùëëùëíùë†ùë° )
ùëöùë¶ùê¥ùë£ùëéùëñùëôùêµùëéùëôùëéùëõùëêùëí‚àí=ùë£0
send(ùëÉùê¥ùëå , ùêºùëë++, ùë£, ùëùùëéùë°‚Ñé) to ùëä (ùëÉ0, ùëÉ1)

1:
2: function initChannel(Amount ùë£)
3:
4:
5:
6: function pay(Node dest, Amount ùë£0) // Only for ùëÉ0
7:
8:
9:
10:
11: upon rcv ùëì +1 (REJECT, ùêºùëë, ùë£ùëñ, ùëùùëéùë°‚Ñé) from ùëä (ùëÉùëñ, ùëÉùëñ+1) do
12:
13:
14: upon rcv ùëì +1 (SUCCESS, ùêºùëë, ùë£ùëñ, ùëùùëéùë°‚Ñé) from ùëä (ùëÉùëñ, ùëÉùëñ+1) do
15:
16:
17:
18: function initChannel(Amount ùë£)
19:
20:
21:
22: upon rcv (PAY, ùêºùëë, ùë£ùëñ, ùëùùëéùë°‚Ñé) from ùëÉùëñ do
23:
24:
25:
26: upon rcv ùëì +1 (PAY, ùêºùëë, ùë£ùëñ, ùëùùëéùë°‚Ñé) from ùëä (ùëÉùëñ‚àí1, ùëÉùëñ ) do
27:
28:
29: upon rcv ùëì +1 (SUCCESS, ùêºùëë, ùë£ùëñ+1, ùëùùëéùë°‚Ñé) from ùëä (ùëÉùëñ+1, ùëÉùëñ+2) do
30:
31:
32: upon rcv ùëì +1 (REJECT, ùêºùëë, ùë£ùëñ+1, ùëùùëéùë°‚Ñé) from ùëä (ùëÉùëñ+1, ùëÉùëñ+2) do
33:
34:
35: upon (PAY, ùêºùëë, ùë£ùëñ, ùëùùëéùë°‚Ñé) ordered and ùëõùëíùë•ùë°ùêºùëë (ùëùùëéùë°‚Ñé [0])==ùêºùëë do
36:
37:
38:
39:
40:
41:
42:
43:
44:
45:
46:
47:
48:
49:
50:
51:
52:
53:
54: upon (REJECT, ùêºùëë, ùë£ùëñ, ùëùùëéùë°‚Ñé) ordered and being processed do
55:
56:
57:
58:
59:
60:
61: upon (SUCCESS, ùêºùëë, ùë£ùëñ, ùëùùëéùë°‚Ñé) ordered and being processed do
62:
63:
64:
65:

ùëõùëíùë•ùë°ùêºùëë (ùëùùëéùë°‚Ñé [0])++
if ùëéùë£ùëéùëñùëôùêµùëéùëôùëéùëõùëêùëí (ùëÉùëñ ) ‚â• ùë£ùëñ then
ùëéùë£ùëéùëñùëôùêµùëéùëôùëéùëõùëêùëí (ùëÉùëñ )‚àí=ùë£ùëñ
if ùëùùëéùë°‚Ñé [‚àí1] == ùëÉùëñ+1 then // last committee

ùëèùëéùëôùëéùëõùëêùëí (ùëÉùëñ )-=ùë£ùëñ
if ùëÉùëñ has predecessor ùëÉùëñ‚àí1 in ùëùùëéùë°‚Ñé then

ùëèùëéùëôùëéùëõùëêùëí (ùëÉùëñ )‚àí=ùë£ùëñ
if ùëÉùëñ has predecessor ùëÉùëñ‚àí1 in ùëùùëéùë°‚Ñé then

Inform ùëÉùëñ and ùëÉùëñ+1 of new balance
else // transfer to next committee

send(SUCCESS, ùêºùëë, ùë£ùëñ, ùëùùëéùë°‚Ñé) to ùëä (ùëÉùëñ‚àí1, ùëÉùëñ )

send(SUCCESS, ùêºùëë, ùë£ùëñ, ùëùùëéùë°‚Ñé) to ùëä (ùëÉùëñ‚àí1, ùëÉùëñ )

ùëéùë£ùëéùëñùëôùêµùëéùëôùëéùëõùëêùëí (ùëÉùëñ )+=ùë£ùëñ
if ùëÉùëñ ==ùëùùëéùë°‚Ñé [0] then

send(REJECT, ùêºùëë, ùë£ùëñ, ùëùùëéùë°‚Ñé) to ùëä (ùëÉùëñ‚àí1, ùëÉùëñ )

send(REJECT, ùêºùëë, ùë£ùëñ, ùëùùëéùë°‚Ñé) to ùëä (ùëÉùëñ‚àí1, ùëÉùëñ )

send(PAY, ùêºùëë, ùë£ùëñ+1, ùëùùëéùë°‚Ñé) to ùëä (ùëÉùëñ+1, ùëÉùëñ+2)

if ùëÉùëñ has predecessor ùëÉùëñ‚àí1 in ùëùùëéùë°‚Ñé then

totallyOrder(REJECT, ùêºùëë, ùë£ùëñ+1, ùëùùëéùë°‚Ñé)

send(SUCCESS, ùêºùëë, ùë£ùëñ, ùëùùëéùë°‚Ñé) to ùëÉùëñ

send(REJECT, ùêºùëë, ùë£ùëñ, ùëùùëéùë°‚Ñé) to ùëÉùëñ

send(REJECT, ùêºùëë, ùë£ùëñ, ùëùùëéùë°‚Ñé) to ùëÉùëñ

else // insufficient balance

inform ùëÉùëñ and ùëÉùëñ+1 of new balance

else

else

else

Oƒüuzhan Ersoy, J√©r√©mie Decouchant, Satwik Prabhu Kumble, and Stefanie Roos

After determining the amount and path, the sender ùëÉ0 informs
the committee ùëä (ùëÉ0, ùëÉ1) of the first channel on the path that they
intend to make a payment using a signed message that includes
their local monotonically increasing payment Id, the amount, and
the subsequent path (Lines 6‚Äì9 in Alg. 1, and message 1 in Fig. 2).
The committee ùëä (ùëÉ0, ùëÉ1) then processes the payment request
(Lines 22‚Äì24). More precisely, the payment is added to a pool of
payment requests that are then totally ordered by the committee
members. Note that payments are not ordered according to any
particular criteria so that all payments have an equal chance of being
executed. After a payment request has been ordered, the committee
checks if i) it has the payment Id the committee is expecting from
the payment sender and ii) the channel has enough balance. If so, all
honest members decrease the available balance of ùëÉ0 by the amount
of the payment. They send a signed message to the next committee
informing them that the payment has been marked as locked and
include the payment Id, the amount, and the path (Lines 35‚Äì53,
msg. 3 in Fig. 2). They also inform ùëÉ0 and ùëÉ1 that the amount of the
payment has been locked on the channel (msg. 2, Fig. 2).

Once a committee ùëä (ùëÉùëñ, ùëÉùëñ+1) has received at least ùëì +1 PAY
messages from members of the previous committee, the payment is
added to the local pool of payment requests of the committee, and
is eventually totally ordered (Lines 26‚Äì28). Once the payment has
been ordered and is the next payment generated by the payment
sender, committee members check whether the channel has enough
balance to transfer the amount. If so, they lock the amount (in the
full protocol, a committee uses a different monotonically increasing
payment counter as an Id to transfer a payment to another commit-
tee). Last, they send a PAY message to the next committee (msgs. 3
and 5 in Fig. 2).

To complete our explanation of the first (locking) phase, it re-
mains to consider the case when ùëÉùëñ+1 is the receiver. In this case,
ùëä (ùëÉùëñ, ùëÉùëñ+1) does not need to wait for a further committee to de-
cide on the payment. They can simply declare the payment done
and inform ùëÉùëñ+1 as well as a previous committee (if it exists) that
the payment is completed (msgs. 6 and 7 in Fig. 2). The process is
described in Lines 39‚Äì45.

In the second phase, upon receiving ùëì +1 SUCCESS messages
from the subsequent committee indicating that the payment has
been completed, committee members totally order the SUCCESS
message, update the balance of the two parties and send a SUCCESS
message to the previous committee if it exists (Lines 61‚Äì65, msg.
9 in Fig. 2). Upon receiving a SUCCESS message, committees can
inform the parties (msgs. 8 and 10, Fig. 2). Rejected payments are
also processed with total order and transmitted to the previous
committee (Lines 54‚Äì59). However, if a payment is rejected, only
the payment sender is informed since they can then attempt to use
a different path in the payment channel network if it exists. The
other intermediaries are also informed so that they know that the
funds are unlocked and can be used for other transactions.

Committee members and parties do not limit the time a payment
can take. They trust subsequent committees to inform them if a
payment is validated or rejected. The last channel on a payment
path does not use the locked state since it can directly approve or
reject a payment.

5.3 Security and Privacy Analysis
PSyncPCN does not provide privacy properties since the channels
are controlled by BFT committees. In the following, we show that
PSyncPCN satisfies the security properties, namely, atomicity and
coin availability. We omit the proof of correctness property.

10

SyncPCN/PSyncPCN: Payment Channel Networks without Blockchain Synchrony

Table 1: Network latencies and expected message complexi-
ties of a ùëò-hop payment with committees of size ùëõ.

Msg complexity
8ùëõùëò + 3ùëò + 2
(2ùëò‚àí1)(2ùëõ+ùê∂ùëöùë†ùëî (ùëõ)+1)

SyncPCN
PSyncPCN
PSyncPCN (w. [10]) Œò(4ùëòùëõ2)
PSyncPCN (w. [51]) Œò(18ùëòùëõ)

Latency
(8ùëò + 2)ùõø
2ùëòùê∂ùëôùëéùë° (ùëõ)+2ùõø
Œò(6ùëòùõø)
Œò(16ùëòùõø)

Theorem 15. PSyncPCN provides atomicity.

Proof Sketch. If ùëÉùëñ pays in ùõæùëñ , it means that 2ùëì +1 members of
the associated committee voted to totally order the payment and
execute it. At least ùëì +1 correct members of this quorum send a
SUCCESS message with the payment Id to the committee members
of ùõæùëñ‚àí1. Upon receiving ùëì +1 SUCCESS messages, the correct com-
mittee members of ùõæùëñ‚àí1 update ùëÉùëñ ‚Äôs balance. Since all committees
tolerate ùëì faulty members, the SUCCESS message is sent (starting
from the receiver) if all channels have enough balance, otherwise,
the locked channels are revoked using REJECT messages. In other
words, ùëÉ0 only pays after all intermediaries have paid and the re-
ceiver ùëÉùëò has been paid by ùëÉùëò‚àí1. Therefore, all channels pay or
none do. Furthermore, there is no scenario where ùõæùëñ is not paid, but
‚ñ°
ùõæùõº and ùõæùõΩ are paid where ùõº <ùëñ<ùõΩ.

Theorem 16. PSyncPCN provides coin availability.

Proof Sketch. A payment that does not terminate remains in
state locked forever. By assumption, messages are eventually de-
livered, which means that such a payment is stalled by a committee
that does not send ùëì +1 PAY messages to the next committee, or
ùëì +1 SUCCESS or REJECT to the previous committee. However,
all committees contain at least 2ùëì +1 honest members who upon
delivering messages from the previous or next committee react
accordingly. Due to the use of total order broadcast, the honest
committee members of the committee eventually all agree on the
state of a channel as they update it with the same messages and in
the same order. Thus, at least 2ùëì +1 members eventually vote on a
payment and provide sufficient signatures to allow a payment to
‚ñ°
eventually terminate.

6 DISCUSSION AND COMPARISON
This section discusses how committee members are incentivized
to behave honestly. It then discusses the complexity and latency
of our two protocols. Last, it compares their security and privacy
properties to those of other payment channel networks.

6.1 Incentives
We have so far considered honest and malicious parties/committee
members. In contrast, Brick has three incentives to ensure that
rational parties follow the protocol. First, committee members are
incentivized to sign updates. To do so, members are paid an update
fee by the channel parties upfront to sign a channel update and
a channel party waits for 2ùëì +1 signatures to confirm the update.
It may be argued that a committee member could simply collect
the update fee and not sign the update. However, channel parties

avoid such committee members for future updates and thus de-
crease their long-term expected rewards, meaning that rational
parties indeed sign the update. Second, it prevents rational com-
mittee members from misbehaving, e.g., by submitting an invalid
state during closure. During channel opening, committee members
deposit a collateral (at least equal to ùê∂/ùëì , where ùê∂ is the channel
capacity) that remains locked until the channel is closed. If the
channel closes in the freshest state, then the collateral is returned
to committee members. However, if a channel party provides a
proof that a committee member misbehaved, then the collateral
is paid to the channel party. A malicious channel party may bribe
rational committee members to close in an invalid state. The bribe,
however, needs to be larger than the collateral locked by the com-
mittee member. The cost of such a bribe is proven to exceed the
capacity of the channel and hence is not beneficial for a channel
party. Thus, rational channel parties do not execute bribing attacks
and rational committee members only submit correct states. Third,
it incentivizes committee members to sign the closing transaction
promptly by paying a closing fee to the first 2ùëì +1 signing committee
members.

These incentives can be directly included in our protocols so that
they would assume rational parties and committee members instead
of correct ones. It is also necessary to incentivize intermediaries to
forward a payment, even if they have to pay update fees to their
committee members. We can leverage the fee mechanism used
in Lightning, where intermediaries receive a fee upon successful
completion of a payment, but need to ensure that the average fee
of the intermediary exceeds the fee paid for the channel update.
Let ùëùùëÜ be the approximated success probability of payments (based
on previous payments) and ùëìùëñ be the fee of an intermediary ùëÉùëñ . The
expected earned fee is then ùëìùëñ ¬∑ùëùùëÜ . Note that multi-hop payments
require two updates and for each update the channel party has to
pay the update fee ùëìùê∂ùëÄ to all 3ùëì +1 committee members to receive
2ùëì +1 signatures in the worst case. For rational intermediaries to
forward a payment, we need ùëìùëñ ¬∑ùëùùëÜ >2(3ùëì + 1)ùëìùê∂ùëÄ .

6.2 Message Complexity and Latency
Table 1 summarizes the analytical network latency and message
complexity of SyncPCN and PSyncPCN. The complexities of PSyncPCN
are evaluated under the assumption that the system is in the syn-
chronous phase of a partially synchronous network, i.e., during the
phase in which progress can be made. ùê∂ùëôùëéùë° (ùëõ) and ùê∂ùëöùë†ùëî (ùëõ) denote
the expected network latency and msg complexity, respectively,
of the underlying total order broadcast for a committee of size ùëõ.
Potential realizations are PBFT [10] and HotStuff [51]. Assuming
synchronous networks allow SyncPCN to have lower message com-
plexity and latency than PSyncPCN. The performance of PSyncPCN
heavily depends on the total order broadcast protocol used. With
PBFT [10], the bandwidth usage is higher than with HotStuff [51].
Inversely, the expected latency of PSyncPCN is lower with PBFT
than with HotStuff.

6.3 Comparison of Payment Channel Networks
Several protocols have considered reducing the locked time of coins
in Lightning [38], improve the payment path privacy [37], mini-
mize the communication rounds [4], and increase the efficiency of

11

Oƒüuzhan Ersoy, J√©r√©mie Decouchant, Satwik Prabhu Kumble, and Stefanie Roos

Table 2: Comparison of Payment Channel (Networks). BS&C&CA is balance security, correctness and coin availability, R. Anon.
refers to relationship anonymity, Par. Sync. is partial synchrony, and L. and G, resp. denote local and global.

Ref.

[48]
[37]
[19]
[4]
[38]

[35]
[6]

¬ß 4
¬ß 5

Protocol Multi-hop
Payment
‚úì
‚úì
‚úì
‚úì
‚úì

Lightning
AMHL
Perun
Blitz
Sprites

Synchrony
Blockchain Network
Synchronous
Synchronous
Synchronous
Synchronous
Synchronous

Secured by
HTLC
AMHL
Smart Contract
Pay-or-revoke
Smart Contract

Teechain
Brick

SyncPCN
PSyncPCN

‚úì
‚úó

‚úì
‚úì

Async.

Par. Sync.

Asynchronous

TEE
L. Committee

Async.
Async.

Sync.
Par. Sync.

L. Com. & AMHL
G. Committee

Security

Privacy

BS&C&CA Atomicity Value

Endpoint R. Anon.

‚úì
‚úì
‚úì
‚úì
‚úì

‚úì
NA

‚úì
‚úì

‚úó
‚úì
‚úì
‚úì
‚úì

‚úì
NA

‚úì
‚úì

‚úì
‚úì
‚úì
‚úì
‚úì

‚úì
NA

‚úì
‚úó

‚úì
‚úì
‚úó
‚úì
‚úó

‚úì
NA

‚úì
‚úó

‚úó
‚úì
‚úó
‚úó
‚úó

‚úì
NA

‚úì
‚úó

multi-hop payments [19]. However, the security of these protocols
relies on blockchain synchrony. Teechain [35] is the only multi-hop
payment protocol that supports partial synchrony thanks to TEEs.
Table 2 summarizes our analysis and considers multi-hop pay-
ment support, synchrony assumptions (for the blockchain and the
network), as well as the security and privacy properties we defined
in Section 2.5. These properties apply to multi-hop payments, but
we also compare to Brick [6] and use NA (not applicable) for it. For
security, we combine the basic security properties, balance security,
correctness, and coin availability, that are satisfied by all of the
protocols.

With regard to atomicity, Blitz [4] uses a common revocation
transaction to prevent the wormhole attack where some intermedi-
aries are skipped during a successful payment. Similarly, the global
manager in Sprites [38] ensures that every intermediary receives
the preimage and updates its channel. Perun [19] guarantees atom-
icity because payments involve the endpoints of virtual channels
and intermediaries do not explicitly participate. SyncPCN adapts
mechanisms from AMHL [37], whereas PSyncPCN assumes BFT
committees. One might consider providing incentives against the
attack as an alternative protection against rational behaviors.

We consider value privacy, endpoint privacy, and relationship
anonymity in the absence of side channel attacks. Our second proto-
col, PSyncPCN, does not provide any privacy since the committees
control the channels. They see the payment values and the commit-
tee of the receiver is aware of its identity. The authors of Sprites state
that their model does not provide privacy guarantees, though they
do not reveal the payment value and hence achieve value privacy.
Thereby, our analysis focuses on the rest of the protocols. Value
privacy is about hiding the payment amount from outsiders, and it
is satisfied by all protocols except PSyncPCN. Endpoint privacy can
be achieved by onion routing, which hides the sender and receiver
from the intermediaries. Lightning, AMHL, and Blitz all use onion
routing. Since the virtual channel construction in Perun reveals the
endpoints to the intermediary parties, endpoint privacy and thereby
relationship anonymity are not satisfied. Relationship anonymity
simply implies that non-connected intermediary parties should
not know if they are part of the same payment or not. Lightning
and Blitz do not satisfy this property because of the common hash
and revocation transaction shared by all channels in the payment

12

path. SyncPCN and AMHL protocols satisfy this property using the
additive hash construction, which was initially proposed in [36].
Finally, Teechain [35] also satisfies the privacy properties under
the assumption that TEEs do not collude and leak any information
about the payments, e.g., due to side channel attacks [9, 50].

7 CONCLUSION
In this paper, we have demonstrated that it is impossible to design
a multi-hop payment protocol assuming both network asynchrony
and faulty channels. We then showed that network synchrony or
correct channels allow the design of a multi-hop payment protocol
by presenting one protocol for each case. We detailed two different
committee-based multi-hop payment protocols that assume syn-
chronous communications and possibly faulty channels, or asyn-
chronous communication and correct channels, respectively. Our
protocols do not require blockchain synchrony to solve disputes
among parties. SyncPCN tolerates faulty committee and assumes
synchronous communications. PSyncPCN relies on BFT committees
that totally order payment requests, which can be implemented
using several recent consensus protocols depending on the syn-
chrony model one assumes, and trust each other to eventually
process a payment. Because it has stronger synchrony assumptions,
SyncPCN generates fewer messages and has lower latency than
PSyncPCN. In future work, we will consider using virtual channels
in PSyncPCN, which could allow committees to leverage reliable
and consistent broadcast in multi-hop payments instead of total
order broadcast. We will also work on adding privacy guarantees to
PSyncPCN. Furthermore, we want to design a version of PSyncPCN
using an accountable BFT protocol [12] to deal with committees
with more than ùëì fulty nodes.

REFERENCES
[1] 1ml.com. 2021. Real-Time Lightning Network Statistics. Available at: https:

//1ml.com/statistics.

[2] N. Asokan, Victor Shoup, and Michael Waidner. 1998. Asynchronous Protocols

for Optimistic Fair Exchange. In S&P.

[3] Lukas Aumayr, Matteo Maffei, Oguzhan Ersoy, Andreas Erwig, Sebastian Faust,
Siavash Riahi, Kristina Host√°kov√°, and Pedro Moreno-Sanchez. 2021. Bitcoin-
Compatible Virtual Channels. In IEEE S&P.

[4] Lukas Aumayr, Pedro Moreno-Sanchez, Aniket Kate, and Matteo Maffei. 2021.
Blitz: Secure Multi-Hop Payments Without Two-Phase Commits. In USENIX
Security.

SyncPCN/PSyncPCN: Payment Channel Networks without Blockchain Synchrony

[5] Alex Auvolat, Davide Frey, Michel Raynal, and Fran√ßois Ta√Øani. 2020. Money
transfer made simple: a specification, a generic algorithm, and its proof. arXiv
preprint arXiv:2006.12276 (2020).

[6] Georgia Avarikioti, Eleftherios Kokoris Kogias, Roger Wattenhofer, and Dionysis

Zindros. 2021. Brick: Asynchronous Payment Channels. FC.

[7] Edward Bortnikov, Maxim Gurevich, Idit Keidar, Gabriel Kliot, and Alexander
Shraer. 2009. Brahms: Byzantine resilient random membership sampling. Com-
puter Networks 53, 13 (2009), 2340‚Äì2359.

[8] Gabriel Bracha and Sam Toueg. 1985. Asynchronous consensus and broadcast

protocols. JACM 32, 4 (1985), 824‚Äì840.

[9] Ferdinand Brasser, Urs M√ºller, Alexandra Dmitrienko, Kari Kostiainen, Srdjan
Capkun, and Ahmad-Reza Sadeghi. 2017. Software Grand Exposure:{ùëÜùê∫ùëã }
Cache Attacks Are Practical. In WOOT.

[10] Miguel Castro, Barbara Liskov, et al. 1999. Practical byzantine fault tolerance. In

OSDI, Vol. 99. 173‚Äì186.

[11] Tushar Deepak Chandra, Vassos Hadzilacos, and Sam Toueg. 1996. The weakest

failure detector for solving consensus. JACM 43, 4 (1996), 685‚Äì722.

[12] Pierre Civit, Seth Gilbert, and Vincent Gramoli. 2021. Polygraph: Accountable
byzantine agreement. In 2021 IEEE 41st International Conference on Distributed
Computing Systems (ICDCS). IEEE, 403‚Äì413.

[13] Daniel Collins, Rachid Guerraoui, Jovan Komatovic, Petr Kuznetsov, Matteo
Monti, Matej Pavlovic, Yvonne-Anne Pignolet, Dragos-Adrian Seredinschi, Andrei
Tonkikh, and Athanasios Xygkis. 2020. Online payments by merely broadcasting
messages. In 2020 50th Annual IEEE/IFIP International Conference on Dependable
Systems and Networks (DSN). IEEE, 26‚Äì38.

[14] George Danezis and Ian Goldberg. 2009. Sphinx: A compact and provably secure

mix format. In S&P.

[15] Christian Decker and Roger Wattenhofer. 2015. A fast and scalable payment

network with bitcoin duplex micropayment channels. In SSS.

[16] J√©r√©mie Decouchant, David Kozhaya, Vincent Rahli, and Jiangshan Yu. 2022.
DAMYSUS: streamlined BFT consensus leveraging trusted components. In Eu-
roSys. 1‚Äì16.

[17] Thaddeus Dryja and Scaling Bitcoin Milano. 2016. Unlinkable outsourced channel

monitoring. Scaling Bitcoin Milan (2016).

[18] Stefan Dziembowski, Lisa Eckey, Sebastian Faust, Julia Hesse, and Kristina

Host√°kov√°. 2019. Multi-party Virtual State Channels. In Eurocrypt.

[19] Stefan Dziembowski, Lisa Eckey, Sebastian Faust, and Daniel Malinowski. 2019.

Perun: Virtual Payment Hubs over Cryptocurrencies. In IEEE S&P.

[20] Lisa Eckey, Sebastian Faust, Kristina Host√°kov√°, and Stefanie Roos. 2020. Splitting
Payments Locally While Routing Interdimensionally. Cryptol. ePrint Arch. (2020).
[21] Michael J Fischer, Nancy A Lynch, and Michael S Paterson. 1985. Impossibility
of distributed consensus with one faulty process. JACM 32, 2 (1985), 374‚Äì382.

[22] David Galindo, Jia Liu, Mihair Ordean, and Jin-Mann Wong. 2021. Fully Dis-
tributed Verifiable Random Functions and their Application to Decentralised
Random Beacons. In EuroS&P.

[23] Juan Garay, Aggelos Kiayias, and Nikos Leonardos. 2015. The bitcoin backbone
protocol: Analysis and applications. In Annual international conference on the
theory and applications of cryptographic techniques. 281‚Äì310.

[24] Yossi Gilad, Rotem Hemo, Silvio Micali, Georgios Vlachos, and Nickolai Zeldovich.
2017. Algorand: Scaling Byzantine Agreements for Cryptocurrencies. In SOSP.
[25] Lewis Gudgeon, Pedro Moreno-Sanchez, Stefanie Roos, Patrick McCorry, and

Arthur Gervais. 2020. Sok: Layer-two blockchain protocols. In FC.

[26] Rachid Guerraoui, Petr Kuznetsov, Matteo Monti, Matej Pavloviƒç, and Dragos-
Adrian Seredinschi. 2019. The consensus number of a cryptocurrency. In Pro-
ceedings of the 2019 ACM Symposium on Principles of Distributed Computing.
307‚Äì316.

[27] Saurabh Gupta. 2016. A non-consensus based decentralized financial transaction
processing model with support for efficient auditing. Arizona State University.
[28] Abdelatif Hafid, Abdelhakim Senhaji Hafid, and Mustapha Samih. 2019. New
Mathematical Model to Analyze Security of Sharding-Based Blockchain Protocols.
IEEE Access 7 (2019), 185447‚Äì185457.

[29] Jona Harris and Aviv Zohar. 2020. Flood & loot: A systemic attack on the lightning

network. In ACM AFT.

[30] Aggelos Kiayias, Alexander Russell, Bernardo David, and Roman Oliynykov. 2017.

Ouroboros: A Provably Secure Proof-of-Stake Blockchain Protocol. In Crypto.

[31] Eleftherios Kokoris Kogias, Dahlia Malkhi, and Alexander Spiegelman. 2020.
Asynchronous Distributed Key Generation for Computationally-Secure Random-
ness, Consensus, and Threshold Signatures.. In CCS.

[32] David Kozhaya, J√©r√©mie Decouchant, and Paulo Esteves-Verissimo. 2018. RT-
ByzCast: Byzantine-resilient real-time reliable broadcast. IEEE Trans. Comput.
68, 3 (2018), 440‚Äì454.

[33] David Kozhaya, J√©r√©mie Decouchant, Vincent Rahli, and Paulo Esteves-Verissimo.
2021. PISTIS: An Event-Triggered Real-Time Byzantine-Resilient Protocol Suite.
IEEE Transactions on Parallel and Distributed Systems 32, 9 (2021), 2277‚Äì2290.
[34] Satwik Prabhu Kumble, Dick Epema, and Stefanie Roos. 2021. How Lightning‚Äôs

Routing Diminishes its Anonymity. In ARES.

[35] Joshua Lind, Oded Naor, Ittay Eyal, Florian Kelbert, Emin G√ºn Sirer, and Pe-
ter R. Pietzuch. 2019. Teechain: a secure payment network with asynchronous

13

blockchain access. In SOSP.

[36] Giulio Malavolta, Pedro Moreno-Sanchez, Aniket Kate, Matteo Maffei, and Sri-
vatsan Ravi. 2017. Concurrency and Privacy with Payment-Channel Networks.
In CCS.

[37] Giulio Malavolta, Pedro Moreno-Sanchez, Clara Schneidewind, Aniket Kate, and
Matteo Maffei. 2019. Anonymous Multi-Hop Locks for Blockchain Scalability
and Interoperability. In NDSS.

[38] Andrew Miller, Iddo Bentov, Surya Bakshi, Ranjit Kumaresan, and Patrick Mc-
Corry. 2019. Sprites and State Channels: Payment Networks that Go Faster Than
Lightning. In FC.

[39] Ayelet Mizrahi and Aviv Zohar. 2020. Congestion attacks in payment channel

networks. arXiv preprint arXiv:2002.06564 (2020).

[40] Pedro Moreno-Sanchez, Aniket Kate, and Matteo Maffei. 2018. Silentwhispers:
Enforcing security and privacy in decentralized credit networks. In NDSS.
[41] Achour Most√©faoui, Hamouma Moumen, and Michel Raynal. 2015. Signature-free
asynchronous binary Byzantine consensus with t< n/3, O (n2) messages, and O
(1) expected time. JACM 62, 4 (2015), 1‚Äì21.

[42] Oded Naor and Idit Keidar. 2022. On Payment Channels in Asynchronous Money

Transfer Systems. CoRR abs/2202.06693 (2022).

[43] Raiden Network. 2022. Raiden network. Retrieved 31/01/2022 from https://raiden.

network/

[44] Utz Nisslmueller, Klaus-Tycho Foerster, Stefan Schmid, and Christian Decker.
2020. Toward active and passive confidentiality attacks on cryptocurrency off-
chain networks. arXiv preprint arXiv:2003.00003 (2020).

[45] Henning Pagnia and Felix C G√§rtner. 1999. On the impossibility of fair exchange

without a trusted third party. Technical Report. TU Darmstadt.

[46] Rafael Pass, Lior Seeman, and Abhi Shelat. 2017. Analysis of the Blockchain

Protocol in Asynchronous Networks. In Eurocrypt.

[47] Jordan Pearson. 2015. WikiLeaks Is Now a Target In the Massive Spam Attack
on Bitcoin. Available at: https://www.vice.com/en/article/ezvw7z /wikileaks-is-
now-a-target-in-the-massive-spam-attack-on-bitcoin.

[48] Joseph Poon and Thaddeus Dryja. 2016. The bitcoin lightning network: Scalable

off-chain instant payments.

[49] Michael K Reiter. 1994. Secure agreement protocols: Reliable and atomic group

multicast in Rampart. In CCS.

[50] Wenhao Wang, Guoxing Chen, Xiaorui Pan, Yinqian Zhang, XiaoFeng Wang,
Vincent Bindschaedler, Haixu Tang, and Carl A Gunter. 2017. Leaky cauldron
on the dark land: Understanding memory side-channel hazards in SGX. In Pro-
ceedings of the 2017 ACM SIGSAC Conference on Computer and Communications
Security. 2421‚Äì2434.

[51] Maofan Yin, Dahlia Malkhi, Michael K Reiter, Guy Golan Gueta, and Ittai Abra-
ham. 2019. HotStuff: BFT consensus with linearity and responsiveness. In PODC.
[52] Joseph Young. 2017. Analyst: Suspicious Bitcoin Mempool Activity, Transaction
Fees Spike to 16. Available at: https://cointelegraph.com/news/analyst-suspicious-
bitcoin-mempool-activity-transaction-fees-spike-to-16.

[53] Jiangshan Yu, David Kozhaya, J√©r√©mie Decouchant, and Paulo Esteves-Verissimo.
2019. Repucoin: Your reputation is your power. IEEE Trans. Comput. 68, 8 (2019),
1225‚Äì1237.

[54] Alexei Zamyatin, Mustafa Al-Bassam, Dionysis Zindros, Eleftherios Kokoris-
Kogias, Pedro Moreno-Sanchez, Aggelos Kiayias, and William J Knottenbelt.
2019. SoK: communication across distributed ledgers. Cryptology ePrint Archive
(2019).

A COMMITTEE FORMATION IN PSYNCPCN
We assume that there is a global committee with ùëÅ members from
which a smaller committee of size ùëõ is sampled during the channel
opening to be the channel committee. The channel committee mem-
bers can be selected randomly from the global committee based on
any of a number of recent peer selection methods [7, 22, 24, 30],
which guarantee unbiased uniform selection and termination of
the selection protocol. Assuming that the global committee has
ùêπ faulty members, we can compute the probability ùëÉùëêùëúùëüùëüùëíùëêùë° for a
correct committee (ùëì ‚â§ ‚åäùëõ/3‚åã)) to be selected. The probability ùëù ùëì
that the selected committee has ùëì faulty members follows a hyper-

geometric distribution [28] and is equal to
ùëÉùëêùëúùëüùëüùëíùëêùë° = (cid:205) ‚åäùëõ/3‚åã
ùëù ùëì . While selecting a bigger channel committee
ùëì =1
does increase the likelihood of the committee to be correct, a bigger
channel committee also implies higher latency and bandwidth use.

. It follows that

ùëì ) ¬∑(ùëÅ ‚àíùêπ
(ùêπ
ùëõ‚àíùëì )
(ùëÅ
ùëõ )

Fig. 3 indicates the probability for a sampled channel commit-
tee to contain more than ùëì faulty members. For this figure, we
assume a global committee of size ùëÅ = 1200, and vary the value of
ùêπ ‚àà [300, 325, 350, 375, 400, 425, 450]. One can observe that ùëÉùëêùëúùëüùëüùëíùëêùë°
increases with ùëõ when ùêπ < ùëÅ /3 and increases with ùëõ when ùêπ > ùëÅ /3.
For ùëÅ /3, it converges. When ùêπ = ùëÅ /4, we see that ùëÉùëêùëúùëüùëüùëíùëêùë° is nearly
1 for all values of ùëõ. As the value of ùêπ moves closer to ùëÅ /3, a higher
value of ùëõ is required for ùëÉùëêùëúùëüùëüùëíùëêùë° to approach 1.

The probabilities to sample a faulty committee of size 300 with
F being 300 and 325 are almost equal to 1, namely 0.999 and 0.998,
respectively. We therefore select committees of size 300 for our per-
formance evaluation, and assume a global committee that contains
less than one-fourth of faulty members.

Large BFT committees have limited performance when used in
blockchains to process the transactions of all users. In our protocols,
a committee handles the transactions of a single channel and is
therefore not expected to provide the same performance under high
workload as a blockchain consensus algorithm. There is a small
probability for a sampled committee to be faulty (i.e., contain more
than ùëì faulty members).

Oƒüuzhan Ersoy, J√©r√©mie Decouchant, Satwik Prabhu Kumble, and Stefanie Roos

Figure 3: Probability of choosing a committee ùëÉùëêùëúùëüùëüùëíùëêùë° when
ùëÅ =1200. We plot the variation of ùëÉùëêùëúùëüùëüùëíùëêùë° with respect to ùëõ for
each ùêπ in the set [300, 325, 350, 375, 400, 425, 450].

14

0100200300400500600n0.00.20.40.60.81.0PcorrectF300 (N/4)325350375400 (N/3)425450