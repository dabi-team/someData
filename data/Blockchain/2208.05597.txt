CCCG 2022, Toronto, ON, Canada, August 25–27, 2022

Diamonds are Forever in the Blockchain:
Geometric Polyhedral Point-Set Pattern Matching

Gill Barequet∗
David M. Mount‡

Shion Fukuzawa†
Martha C. Osegueda†

Michael T. Goodrich†

Evrim Ozel†

2
2
0
2

g
u
A
1
1

]

G
C
.
s
c
[

1
v
7
9
5
5
0
.
8
0
2
2
:
v
i
X
r
a

Abstract

Motivated by blockchain technology for supply-chain
tracing of ethically sourced diamonds, we study geomet-
ric polyhedral point-set pattern matching as minimum-
width polyhedral annulus problems under translations
and rotations. We provide two (1 + ε)-approximation
schemes under translations with O(ε−dn)-time for d
dimensions and O(n log ε−1 + ε−2)-time for two dimen-
sions, and we give an O(f d−1ε1−2dn)-time algorithm
when also allowing for rotations, parameterized on f ,
which we deﬁne as the slimness of the point set.

1 Introduction

A notable recent computational geometry application
is for tracking supply chains for natural diamonds,
for which the industry and customers are strongly
motivated to prefer ethically-sourced provenance (e.g.,
to avoid so-called “blood diamonds”). For example,
the Tracr system employs a blockchain for tracing the
supply chain for a diamond from its being mined as
a rough diamond to a customer purchasing a polished
diamond [23]. (See Figure 1.)

Figure 1:
Blockchain transactions in a diamond
supply chain, providing provenance, traceability, and
authenticity of an ethically-sourced diamond.

Essential steps in the Tracr blockchain supply-chain
process require methods to match point sets against geo-

∗Dept. of Computer Science, Technion—Israel Inst. of Tech-

nology, barequet@cs.technion.ac.il

†Dept. of Computer Science, University of California, Irvine,

{fukuzaws,goodrich,mosegued,eozel}@uci.edu

‡Dept. of Computer Science, University of Maryland, College

Park, mount@umd.edu

metric shapes, e.g., to guarantee that a diamond has not
been replaced with one of questionable provenance [23].
Currently, the Tracr system uses standard machine-
learning techniques to perform the shape matching
steps. We believe, however, that better accuracy can be
achieved by using computational geometry approaches.
In particular, motivated by the Tracr application, we
are interested in this paper in eﬃcient methods for
matching point sets against geometric shapes, such
as polyhedra. Formalizing this problem, we study
the problem of ﬁnding the best translation and/or
rotation of the boundary of a convex polytope, P (e.g.,
deﬁning a polished diamond shape), to match a set
of n points in a d-dimensional (d ≥ 3) space, where
the point set is a “good” sample of the boundary of a
polytope that is purported to be P . Since there may
be small inaccuracies in the sampling process, our aim
is to compute a minimum width polyhedral annulus
determined by P that contains the sampled points. In
the interest of optimizing running time, rather than
seeking an exact solution, we seek an approximate
solution that deviates from the real solution by a
predeﬁned quantity ε > 0.

Related Work. We are not familiar with any previous
work on the problems we study in this paper. Never-
theless, there is considerable prior work on the general
area of matching a geometric shape to a set of points,
especially in the plane. For example, Barequet, Bose,
Dickerson, and Goodrich [12] give solutions to several
constrained polygon annulus placement problems for
oﬀset and scaled polygons including an algorithm for
ﬁnding the translation for the minimum oﬀset of an
m-vertex polygon that contains a set of n points
in O(n log2 n + m) time. Barequet, Dickerson, and
Scharf [13] study the problem of covering a maximum
number of n points with an m-vertex polygon (not
just its boundary) under translations, rotations, and/or
scaling, giving, e.g., an algorithm running in time
O(n3m4 log(nm)) for the general problem. There has
also been work on ﬁnding a minimum-width annulus
for rectangles and squares, e.g., see [9, 11, 19, 21].

Chan [15] presents a (1 + ε)-approximation method
that ﬁnds a minimum-width spherical annulus of n
points in d dimensions in O(n log(1/ε)+εO(1)) time, and

Blockchain transactions 
 
 
 
 
 
34th Canadian Conference on Computational Geometry, 2022

Agarwal, Har-Peled, and Varadarajan [1] improve this
to O(n + 1/εO(d2)) time via coresets [2, 3, 22, 24]. A line
of work has considered computing the spherical annulus
under stronger assumptions on the points samples.
Most notably Devillers and Ramos [17] combine various
deﬁnitions for “minimum quality assumptions” by Mel-
horn, Shermer and Yap [20] and Bose and Morin [14]
and show that under this assumption the spherical
annulus can be computed in linear time for d = 2
and present empirical evidence for higher dimensions.
Arya, da Fonseca, and Mount [6] show how to ﬁnd an ε-
approximation of the width of n points in O(n log(1/ε)+
1/ε(d−1)/2+α) time, for a constant α > 0. Bae [10] shows
how to ﬁnd a min-width d-dimensional hypercubic shell
in O(n(cid:98)d/2(cid:99) logd−1 n) expected time.

Our Results. Given a set of n points in Rd, we
provide an O(ε−dn)-time (1 + ε)-approximate polytope-
matching algorithm under translations, for d ≥ 3, and
O(n log ε−1 + ε−2) time for d = 2, and we provide
an O(f d−1ε1−2dn)-time algorithm when also allowing
for rotations, where the complexity of the polytope is
constant and for rotations is parameterized by f , which
we deﬁne as the slimness of the point set.

The paper is organized as follows. In Section 2, we set
the ground for this work by providing some necessary
In Section 3, we approximate the MWA
deﬁnitions.
under only translations.
In this section, we provide
a constant factor approximation scheme, a (1 + ε)-
approximation scheme and describe how to improve
the running time in two dimensions. In Section 4, we
consider the MWA under rotations.

2 Preliminaries

Following previous convention [4,5,7,8,18], we say that a
point set S is a δ-uniform sample of a surface Σ ⊂ Rd
if for every point p ∈ Σ, there exists a point q ∈ S
such that d(p, q) ≤ δ. Let C ⊂ Rd be a closed, convex
polyhedron containing the origin in its interior. Given
C, and x ∈ Rd, deﬁne x + C = {x + y : y ∈ C} (the
translation of C by x), and for r ∈ R, deﬁne rC = {ry :
y ∈ C}. A placement of C is a pair (x, r), where x ∈
Rd and r ∈ R≥0, representing the translated and scaled
copy x + rC. We refer to x and r as the center and
radius of the placement, respectively. Two placements
are concentric if they share the same center.

Let C be any closed convex body in Rd containing
the origin in its interior. The convex distance function
induced by C is the function dC : Rd ×Rd → R≥0, where

dC(p, q) = min{r : r ≥ 0 and q ∈ p + rC}

Thus, the convex distance between p and q is deter-
mined by the minimum radius placement of C centered
at p that contains q (see Figure 2). When C is centrally

Figure 2: Left: a visual representation of a polyhedral
distance function and the distance between two points.
Center: The MinBall under dC containing all points in
S, centered at c. Right: The MWA of S with all points
within MinBall(c)\MaxBall(c).

symmetric, this deﬁnes a metric, but for general C, the
function dC may not be symmetric. We call the original
shape C the unit ball UC under the distance function
dC. Note that dC(a, c) = dC(a, b) + dC(b, c) when a, b
and c are collinear and appear in that order.

Deﬁne an annulus for C to be the set-theoretic
diﬀerence of two concentric placements (p + RC) \ (p +
rC), for 0 ≤ r ≤ R. The width of the annulus is R − r.
Given a δ-uniform sample of points, S, there are three
placements of C we are interested in:

• Minimum enclosing ball (MinBall): A place-
ment of C of the smallest radius that contains all of the
points in S.

• Maximum enclosed ball (MaxBall): A place-
ment of C of the largest radius, centered within the
convex hull of S, that contains no points in S.

• Minimum width annulus (MWA): A placement
of an annulus for C of minimum width, that contains
all of the points in S.

Note that, following the deﬁnition of the MaxBall,
we require that the center of the MWA must also lie
within the convex hull of S. For each of the above
placements, we also refer to parameterized versions, for
example MinBall(p), MaxBall(p), or MWA(p). These
respectively refer to the minimum enclosing ball, maxi-
mum enclosed ball, or minimum width annulus centered
at the point p.

Further, we use |MinBall(p)| and |MaxBall(p)| to
denote the radius of MinBall(p) and MaxBall(p), re-
spectively, and we use |MWA(p)| to denote the width of
MWA(p).

The ratio, F , of the MinBall over the MaxBall of
S ⊂ Rd under distance function dC deﬁnes the fatness
of S under dC, such that F := |MinBall|/|MaxBall|.
Also, we deﬁne the concentric fatness as the ratio of
the MinBall and MaxBall centered at the MWA, such
that Fc := |MinBall(copt)|/|MaxBall(copt)| where copt
is the center of the MWA. Conversely, we deﬁne the
slimness to be f −1 = 1 − F −1
, which corresponds
to the ratio of the MinBall(copt) over the MWA, i.e.,
f := |MinBall(copt)|/|MWA|.

c

Remark 1 In order for a δ-uniform sample to rep-
resent the surface, Σ, with suﬃcient accuracy for a

pqdC(p,q)=||q−p||||a−p||UCacMinBall(c)cSSMWA(c)meaningful MWA, we assume that the sample must
contain at least one point between corresponding facets
of the MWA. Where corresponding facets refer to facets
of the MinBall and MaxBall representing the same facet
of UC. Therefore, in the remainder of the paper, we
assume we have a δ-uniform sample and that δ is small
enough to guarantee this condition for even the smallest
facets.

In practice, it would be easy to determine a small
enough δ before sampling Σ, since only suﬃciently slim
surfaces would beneﬁt from ﬁnding the MWA, and very
fat surfaces would yield increasingly noisy MaxBall.
One easy approach would be setting δ to the smallest
facet of the MinBall and scaling down by an arbitrary
constant larger than the maximum expected fatness,
such as 100. This example imposes a very generous
bound on fatness since it would allow the inner shell to
be 1% of the size of the outer shell, practically a single
digit constant would often suﬃce.

Further,

Also, note that, for a given center point c, MWA(c)
is uniquely deﬁned as the annulus centered at c
with inner radius minp∈S dC(c, p) and outer radius
maxp∈S dC(c, p).
let us assume that the
reference polytope deﬁning our polyhedral distance
function has m facets, where m is a ﬁxed constant,
since the sample size is expected to be much larger
than m. Thus, dC can be calculated in O(m) time;
hence, MWA(c) can be found in O(mn) time, which is
O(n) under our assumption.

3 Approximating the Minimum Width Annulus

Let us ﬁrst describe how to ﬁnd a constant factor
approximation of MWA under translations. Note that,
by assumption, the center c of our approximation lies
within the convex hull of S. Let us denote the center,
outer radius, inner radius, and width of the optimal
MWA as copt, Ropt, ropt, and wopt.

We begin with Lemma 1, where we prove copt is within
a certain distance from the center of the MinBall c,
providing a search region for copt.
In Lemma 2, we
bound the width achieved by a center-point that is
suﬃciently close to copt. We then use this in Lemma 3
to prove that |MWA(c)| achieves a constant factor
approximation.

is within
Lemma 1 The center of the MWA, copt,
distance wopt of the center of the MinBall, c. That is,
dC(c, copt) ≤ wopt.

Proof. Recall our assumption from Remark 1. By
our assumption that at least one sample point lies on
each facet, MinBall cannot shrink past any facets of
MaxBall(copt).

Suppose for contradiction that dC(c, copt) > wopt. Let
s be the point where a ray projected from c through

CCCG 2022, Toronto, ON, Canada, August 25–27, 2022

copt intersects the boundary of MaxBall(copt), and let R
denote the radius of the MinBall. Observe that R must
be large enough for MinBall to contain s and therefore
R ≥ dC(c, s).

R ≥ dC(c, copt) + dC(copt, s)

by collinearity

> wopt + dC(copt, s)
= wopt + ropt

by assumption
by MaxBall(copt).

Thus, since wopt + ropt = Ropt, we ﬁnd R >
Ropt, which is a contradiction since R must be the
smallest radius of the MinBall across all possible centers.
Therefore, we have that dC(c, copt) cannot be larger
(cid:3)
than wopt.

Lemma 1 helps us constrain the region within which c
must be contained. Let us now reason about how a given
center point, c, would serve as an approximation. For
convenience, let us deﬁne R := |MinBall(c)| and r :=
|MaxBall(c)| as the radii of the MinBall and MaxBall
centered at c, respectively.

c

is

an

center-
Lemma 2 Suppose
in our search region, and the two directed
point
distances between c and copt are at most
i.e.,
t ≥ max{dC(c, copt), dC(copt, c)}. Then, we have that
|MWA(c)| ≤ wopt + 2t.

arbitrary

t,

Proof. Knowing that all sample points must be con-
tained within the MWA, the MWA(c) cannot expand
past the furthest or closest point in MWA from c under
dC. Let us now deﬁne these two points and use them to
bound the radii for MinBall(c) and MaxBall(c).

Let p be the point where the ray from c through copt
intersects the boundary of MinBall(copt). MinBall(c)
cannot extend further than p.

dC(c, p) = dC(c, copt) + dC(copt, p) ≤ t + dC(copt, p)

R ≤ Ropt + t.

Conversely, let q be the intersection point where the ray
projected from copt through c intersects the boundary
of MaxBall(copt),
in which case MaxBall(c) cannot
collapse further than q.

dC(c, q) = dC(copt, q) − dC(copt, c) ≥ dC(copt, q) − t

r ≥ ropt − t.

these

Combining
that
bounds with
|M W A(c)| = R − r we ﬁnd that |MWA(c)| ≤ wopt + 2t.
(cid:3)

fact

the

For simplicity, let us consider two points a, b to be t-
close (under C) whenever t ≥ max{dC(a, b), dC(b, a)}.

Lemma 3 If c is the center of MinBall, then MWA(c)
is a constant factor approximation of the MWA, that is,
|MWA(c)| ≤ b|MWA|, for some constant b ≥ 1, under
translations.

34th Canadian Conference on Computational Geometry, 2022

Proof. From Lemma 1, we have that dC(c, copt) ≤
wopt. If c and copt are wopt-close, then we can directly
apply the second part of Lemma 2 to ﬁnd r ≥ ropt −wopt
and R ≤ Ropt, such that |MWA(c)| ≤ Ropt − (ropt −
wopt), thus proving that this is a 2-approximation. If dC
is a metric, then dC(copt, c) = dC(c, copt) and this must
always be the case. However, if dC(copt, c) > wopt, then
we must use the Euclidean distance to ﬁnd dC(copt, c).
Let vector u := c − copt, and let us deﬁne unit vectors
with respect to dC and dC, such that

(cid:98)uC =

u
dC(copt, c)

,

(cid:98)uC =

u
dC(c, copt)

||(cid:98)uC||dC(copt, c) = ||u|| = ||(cid:98)uC||dC(c, copt)

dC(copt, c) ≤

||(cid:98)uC||
||(cid:98)uC||

wopt

from Lemma 1.

Under any convex distance function, ||(cid:98)uC ||

||(cid:98)uC || is bounded
||(cid:98)vC ||
from above by A = maxv∈Rd
||(cid:98)vC || , which corresponds to
ﬁnding the direction, v, of the largest asymmetry in UC.
Thus, by Lemma 2, |MWA(c)| ≤ (A + 1)wopt. Under
our (ﬁxed) polyhedral distance function, A is constant;
hence, MWA(c) is a constant-factor approximation. (cid:3)

(1 + ε)-approximation. Let us now describe how to
compute a (1 + ε)-approximation of MWA.

We begin with Lemma 4, which deﬁnes how close
to copt is suﬃcient for a (1 + ε)-approximation.
In
Theorem 5, we deﬁne a grid of candidate center-points
so that any point in the search region has a gridpoint
suﬃciently close to it.

Lemma 4 Suppose copt and c are (εw/(2b))-close,
where w = |MWA(cM )|, cM is the center of MinBall,
and b is the constant from Lemma 3. Then, MWA(c)
is a (1 + ε)-approximation of MWA under translations.

Proof. It suﬃces to show that the width of our approx-
imation only exceeds the optimal width by a factor of
at most (1 + ε).

Assuming c and copt are t-close, and using Lemma 2,
we require that wopt +2t ≤ (1+ε)wopt, i.e., t ≤ εwopt/2.
Let us then choose t ≤ εw/(2b), knowing that w ≤
bwopt from Lemma 3, which is suﬃcient for achieving a
(1 + ε)-approximation.

(cid:3)

Knowing how close our approximation’s center must
be, we can now present a (1 + ε)-approximation algo-
rithm to ﬁnd a center satisfying this condition.

Theorem 5 One can achieve a (1 + ε)-approximation
of the MWA under translations in O(ε−dn) time.

Proof. The MinBall
computed in O(n)
can be
time [16]. By Lemma 1, we have that dC(c, copt) ≤ wopt,

where c is the MinBall center. This implies that copt
must lie within the placement c + woptC or more
generously in P , deﬁned as c + wC. Furthermore,
from Lemma 4, we know that being (εw/(2b))-close
to copt suﬃces for an (1 + ε)-approximation. Therefore,
overlaying a grid G that covers P , such that any point
in p ∈ P is (εw/(2b))-close to a gridpoint, guarantees
the existence of a point g ∈ G for which MWA(g) is a
(1 + ε)-approximation.

Since P and (εw/(2b))-closeness are both deﬁned
under dC, we translate this to a cubic grid for simplicity.
Let Q be the smallest cube enclosing P and q be the
largest cube enclosed by (εw/(2b))C. Let us now deﬁne
a grid, G, to span over Q with cells the size of q.

This grid, G, has O(F b/ε) gridpoints per direction
and O(F dbdε−d) gridpoints in total, where F corre-
sponds to the fatness of C under the cubic distance
function.

Let us deﬁne the cubic distance function, dq, with
unit cube Uq = q · (2b)/(εw), such that Uq is the largest
cube enclosed by C.

The grid G guarantees that for every point p, there
exists a gridpoint g ∈ G such that dq(p, g) ≤ εw/(2b).
Since the unit cube is contained within the unit poly-
hedron, we have that dC(a, b) ≤ dq(a, b) ∀a, b; and
since dq deﬁnes a metric, p must also be (εw/(2b))-close
under dC. Finding the gridpoint providing the (1 + ε)-
approximation takes O(F dbdε−dn) time,1 which, under
(cid:3)
a ﬁxed dC, is O(ε−dn) time.

Faster grid-search in two dimensions. The algorithm
of Theorem 5 recalculates the MWA at every gridpoint.
However, small movements along the grid should not
aﬀect the MWA much. We use this insight to speed up
MWA recalculations for two dimensions.

Let us ﬁrst deﬁne the contributing edge of a sample
point, p ∈ S, as the edge of C + g intersected by the ray
emanating from a gridpoint, g, towards p. Under this
center-point, p will only directly aﬀect the placement
of the contributing edge. Observe that given vectors
−→v ∈ C, deﬁned as the vectors directed from the center
towards each vertex, the planar subdivision, created by
rays for each −→v originating from g, separates points by
their contributing edge. For any two gridpoints, g1 and
g2, and rays projected from them parallel to −→v , any
points within these two rays will contribute to diﬀerent
edges under g1 and g2. We denote this region as the
vertex slab of vertex v, and the regions outside of this
as edge slabs. Points within an edge slab contribute to
the same edge under both gridpoints, maintaining the
constraints this imposes on the MWA, can therefore be

1For metrics, MinBall provides a 2-approximation, thus b=2.
For non-metrics, we can remove this constant by ﬁrst using this
algorithm with ε=1 in order to ﬁnd a 2-approximation in linear-
time, and using this approximation for gridding in the main step.

CCCG 2022, Toronto, ON, Canada, August 25–27, 2022

Figure 3: Planar subdivision deﬁning vertex slabs (red)
and edge slabs (blue) for two candidate center-points,
and showing membership of some sample points.

achieved with the two extreme points per edge slab. If
we consider vertex slabs for all g ∈ G, we must be able
to quickly calculate the strictest constraints imposed by
points in a subset of vertex slabs. An example of the
planar subdivision for two points is shown in Figure 3.
Given a grid G, we write gi,j ∈ G to be the gridpoint
at index (i, j). Consider the set of all grid lines Lv
deﬁned by rays parallel to −→v starting at each gridpoint.
Lv deﬁnes a planar subdivision corresponding to the
edge slabs between gridpoints. Before attempting to
identify the extreme points for each edge slab, we ﬁrst
need to ﬁnd a quick way to identify the slab in Lv that
contains a given sample-point, p.

Lemma 6 For a speciﬁc vector −→v and an m × m grid,
we can identify which slab contains a sample point, p,
in O(log m) time with O(m2)-time preprocessing.

Proof. Consider the orthogonal projection of grid lines
in Lv onto a line −→v⊥ perpendicular to −→v , the order in
which these lines appear in −→v⊥ deﬁnes the possible slabs
that could contain p (see Figure 4a). We can project
a given grid line l ∈ Lv onto −→v⊥ in constant time.
With the grid lines in sorted order, we can perform a
binary search through the m2 points in O(log m) time
to identify the slab containing p.

Using general sorting algorithms, we could sort the
grid lines in O(m2 log m) time. However, since these
lines belong to a grid, we can exploit the uniformity to
sort them in only O(m2) time. Consider the two basis
vectors deﬁning gridpoint positions ˆı = g(1,0) − g(0,0)
and ˆ = g(0,1) − g(0,0), and their sizes after orthogonal
projection onto −→v⊥,
|ˆı⊥|, and |ˆ⊥|. Without loss of
generality, assume that |ˆı⊥| ≥ |ˆ⊥|, in which case grid
lines originating from adjacent gridpoints in the same
row must be exactly |ˆı⊥| away. In addition, any region
|ˆı⊥|-wide, that does not start at a grid line, must contain
at most a single point from each row. Furthermore,
since points in the same row are always |ˆı⊥| away, they
must appear in the same order in each region.

(a) A demonstration of the
point location problem with
the subdivision, Lv, and a
visualization of the gridpoints
and sample point projections
onto −→v⊥.

(b) Finding the
extreme
points (red) under −→e L in
subdivision Lv for each re-
gion (solid) and for all re-
gions to its left (dashed).

Figure 4: A visual representation of the projections
involved while point locating within the vertex slabs
and while ﬁnding the extreme points in each slab.

We can therefore initially split −→v⊥ into regions |ˆı⊥|
wide. Sorting the grid lines l ∈ Lv into their region can
therefore be calculated in O(m2) time. Now we can sort
the m points in the region containing points from every
row in O(m log m) time. Since each region has the same
order, we can place points in other regions by following
the order found in our sorted region, thus taking O(m2)
(cid:3)
preprocessing time for sorting the points.

Recall that points to the left of a given line l ∈ Lv
contribute to the edge to the left of v, i.e., all points
belonging to slabs to the left of l. We can therefore
isolate the points in these slabs causing the largest
potential change in MWA.

Lemma 7 For a vertex v ∈ C and grid line l ∈ Lv
through gridpoint g, let lL and lR refer to the slabs on
the subdivision imposed by Lv immediately to the left
and right of l, respectively. Assuming lL maintains the
points to the left of l imposing the strictest constraints
on MWA(g), and lR to the right, one can calculate
MWA(g) in O(1) time.

Proof. Finding minp∈S dC(g, p) and maxp∈S dC(g, p)
can now be achieved by optimizing only over the set of
points in {lL ∪ lR, ∀v∈C} and all points in edge slabs.
This set would contain two points per vertex and two
points per edge, yielding a constant number of points.
(cid:3)
Thus, MWA(g) can be found in constant time.

Theorem 8 A (1 + ε)-approximation of the MWA in
two dimensions can be found in O(n log ε−1 + ε−2) time
under translations.

vertexslabedgeslabedgeslabC+g1C+g2samplepointsp∈S−→vm.........m−→vC−→v⊥...............p∈SLvLv−→eL−→vg∈Ggridpointssamplepoints34th Canadian Conference on Computational Geometry, 2022

Proof. For each vertex, v, we use Lemma 6 to identify
the slab for every sample point. For each slab, we
maintain only the two extreme points for each of the
edges incident on −→v . Let −→e L ∈ C denote the vector
describing the edge incident on −→v from the left, and
vice versa for −→e R ∈ C incident from the right. For each
slab, we maintain only points which when projected
in the relevant direction, −→e , cause the furthest and
closest intersections with the boundary (shown for −→e L
in Figure 4b).

With a left-to-right pass, we update a slab’s extreme
points relative to −→e L to maintain the extreme points
for itself and slabs to its left. With a right-to-left pass,
we do the same for −→e R and maintain points in its slab
and slabs to its right.

Thus, for each vertex, we create the slabs in O(ε−2)
time, place every sample point in its slab in O(n log ε−1)
time, and maintain only the extreme points per slab in
constant time per sample point. With O(ε−2) time to
update each slab after processing the sample points, we
can update the slabs such that they hold the extreme
points across all slabs to their left or right (relative to
−→e L and −→e R, respectively).

For each edge slab, ﬁnding the extreme points is much
simpler since ﬁnding min dC(g, p) and max dC(g, p) will
always be based on the same contributing facet for all
points within the same edge slab .

Thus, after ﬁnding the extreme points in both vertex
slabs, we can calculate MWA(g) in constant time
as described in Lemma 7. Taking O(ε−2) time to
ﬁnd ming∈G MWA(g), which by Theorem 5 provides a
(1 + ε)-approximation of the minimum width annulus,
and considering the O(n log ε−1) pre-processing time
(cid:3)
completes the proof of the claimed time bound.

4 Approximating MWA allowing rotations

In this section we consider rotations. As with Lemma 4,
is to ﬁnd the maximum tolerable rotation
our goal
suﬃcient for a (1 + ε)-approximation. Observe that
when centered about the global optimum, the solution
found under both rotation and translation is at least
as good as the solution found solely through rotation
(i.e., under a ﬁxed center). We will therefore ﬁrst prove
necessary bounds for a (1 + ε)-approximation under
rotation only with the understanding that they remain
when also allowing for translation.

Consider the polyhedral cone around −→v , and deﬁne
the bottleneck angle as the narrowest angle between
a point on the surface of the polyhedral cone and −→v .
Let θ be the smallest bottleneck angle across all −→v ∈ C.
Let MWAα(c) denote the MWA centered at c, where C
has been rotated by angle α. Let us also use similar
notations for MinBall and MaxBall.

(a) A demonstration of the scale increase necessary for a
polyhedron rotated by α to contain the original.

(b) A rotation by α in an arbitrary direction about −→v .

Figure 5: Visual representations for the eﬀect of
rotating by α, demonstrating the scale increase and
demonstrating how a rotation by α is deﬁned for higher
dimensions.

Lemma 9 Rotating by α causes MinBallα(c) to grow by
at most sin(π−θ−α)
(and the reciprocal for MaxBallα(c)).

sin θ

Proof. Similarly to Lemma 2, all sample points must
be contained within MinBall(c). MinBallα(c) can only
expand to the furthest point within MinBall(c) under
the new rotated distance function. Let us now consider
the triangle formed between c, the vertex v of the
original MinBall, v0, and the rotated vertex vα (shown
in Figure 5a). Since our calculations focus towards the
same vertex, we can work with Euclidean distances. The
quantity |v0 − c| deﬁnes the radius r1 of the original
polyhedron, and r2 = |vα − c| the radius of the rotated
one. With γ = π − θ − α as the remaining angle in our
triangle and using the sine rule, we ﬁnd that

r2
r1

=

sin γ
sin θ

=

sin(π − θ − α)
sin θ

.

Observe that θ is the angle maximizing this scale
This applies to rotating by α in any
diﬀerence.
direction about −→v (as shown in Figure 5b), and since
this direction need not coincide with θ, the scaled
polyhedron might not touch the original.

For MaxBallα(c) to be contained within MaxBall(c),
the same example holds after switching references to the
scaled and original. In this case, θ minimizes r1/r2. (cid:3)

Let us now determine the rotation from the optimal
orientation that achieves a (1 + ε)-approximation.

αr1r2θr2r1=sin(π−θ−α)sinθcvαv0−→vcoptαLemma 10 Given a center c, we have that MWAα(c)
is a (1 + ε)-approximation when α is smaller than

arcsin

(cid:16)

(cid:18) sin θ
2f

1+ε ± (cid:112)(1+ε)2 + 4f (f − 1)

(cid:17)(cid:19)

− θ.

the ratio of

the radius of
Proof. Deﬁne f as
MinBall(copt) to wopt (i.e., f wopt = |MinBall(copt)|).
Note that f corresponds to the slimness of S under dC
over all rotations of C. Using Lemma 9, we know that

|MWAα(c)| ≤

sin γ
sin θ

|MinBall(copt)| −

sin θ
sin γ

|MaxBall(copt)|

sin γ
sin θ

f wopt −

sin θ
sin γ

(f −1)wopt ≤ (1+ε)wopt

(1)

sin γ
sin θ

f −

sin θ
sin γ

(f −1) ≤ (1+ε).

(2)

For a (1 + ε)-approximation, |MWAα(c)| ≤ (1+ε)wopt
imposing the right side of Relation (1), its left side fol-
lows by deﬁnition of f , and Relation (2) by cancellation
of wopt. Since θ is constant, we can rearrange the above
into a quadratic equation and solve for sin γ.

sin γ =

sin θ
2f

(cid:16)

(cid:17)
1+ε ± (cid:112)(1+ε)2 + 4f (f −1)

.

(3)

However, arcsin will ﬁnd γ ≤ π, whereas we need the
obtuse angle π − γ.

Thus, proving this lemma’s titular bound,
and achieving a (1 + ε)-approximation.

(cid:3)

Let us now establish a more generous lower-bound

that will prove helpful when developing algorithms.

Lemma 11 The angular deﬂection required for a
(1 + ε)-approximation is larger than θε/(2f ).

Proof. Observe that γ is of the form arcsin(k sin θ) and
thus, in order for α = γ−θ to be positive, we must have
θ < π/2 and k > 1. We will prove this is the case.

(cid:115)(cid:18) 1+ε
2f

+

(cid:19)2

−

1
f

+ 1

k =

1+ε
2f
(cid:114) 1

1
f

+ 1 =

(cid:12)
(cid:12)
(cid:12)
(cid:12)

1 −

4f 2 −
(cid:12)
1+ε
(cid:12)
(cid:12)
2f
(cid:12)

+

1 −

1
2f

(cid:12)
(cid:12)
(cid:12)
(cid:12)

(cid:12)
(cid:12)
(cid:12)
(cid:12)

1
2f
ε
2f

= 1 +

.

k >

(4)

(5)

(6)

Equation (4) follows from Equation (3) after expanding.
Relation (6) follows after using Equation (5) as a
lower bound for the square root term in Equation (4)
since ε > 0 and f > 1. This allows us to bound

(cid:18)(cid:18)

(cid:19)

(cid:19)

arcsin

1 +

sin θ

by using a Taylor’s series ex-

ε
2f

CCCG 2022, Toronto, ON, Canada, August 25–27, 2022

Lemma 12 For ﬁxed rotation of C, assume we have an
O(g(n))-time algorithm for the optimal minimum-width
annulus under translation.

We

a
(1 + ε)-approximation of the MWA under rotations and
translations in O(f d−1ε1−dg(n)) time.

ﬁnd

can

Proof. A d-dimensional shape has a (d−1)-dimensional
axis of rotation. Let us evenly divide the unit circle
into k directions. Let us also deﬁne a collection of all
possible direction combinations as a grid of directions.
For each grid direction, rotate C by the deﬁned direction
and calculate the MWA in O(g(n)) time. The optimal
orientation must lie between the (d−1)-dimensional
cube formed by 2d−1 grid directions.

Therefore, as long as the diagonal is smaller than θε
f ,
there exists a grid direction within θε
2f of the optimal
orientation, which implies a (1 + ε)-approximation
by Lemma 11. Thus, we can achieve a (1 + ε)-
(cid:17)d−1(cid:19)

(cid:18)

√

approximation in time O

g(n) ·

(cid:16) 2πf

d−1

,

θε

where d and θ are constant under a ﬁxed distance
function dC.

(cid:3)

With a ﬁxed center, Lemma 12 can be used to
approximate MWA under rotations in O(nf d−1ε1−d)
time.

Theorem 13 One can ﬁnd a (1 + ε)-approximation
of MWA under
in
O(f d−1ε1−2dn) time for d≥3, and O(f nε−1 log ε−1 +
f ε−3) time for d=2.

translations

rotations

and

√

Proof. Consider using an approximation algorithm
(from Theorems 5 or 8) instead of an exact algorithm as
in Lemma 12. Let us deﬁne (1+ξ) as the approximation
ratio necessary from the subroutines in order to achieve
an overall approximation ratio of (1 + ε), such that
√
(1 + ξ)2 = 1 + ε. Since ξ =
1 + ε − 1 and 0 < ε < 1, ξ
must be larger than (
2−1)·ε, and thus, we can always
pick a value for ξ which is O(ε) and achieves the desired
approximation. Thus, by following Lemma 12, we can
2 − 1) · ε)-approximation using the (1 +
ﬁnd a (1 + (
√
2 − 1) · ε)-approximation algorithm from Theorem 5
(
to ﬁnd a (1 + ε)-approximation in O(f d−1ε1−d · ε−dn)
time. Alternatively, for two dimensions, we can instead
use the algorithm from Theorem 8 to ﬁnd a (1 + ε)-
(cid:3)
approximation in O(f nε−1 log ε−1 + f ε−3) time.

√

References

pansion to ﬁnd (1 + k) · θ ≤ arcsin((1 + k) sin θ),

thus proving that the bound from Lemma 10 is
(cid:3)

greater than θε
2f .

[1] P. K. Agarwal, S. Har-Peled, and K. R. Varadarajan.
Approximating extent measures of points. J. ACM,
51(4):606–635, 2004.

[17] O. Devillers and P. A. Ramos. Computing roundness is
easy if the set is almost round. International Journal
of Computational Geometry & Applications, 12(3):229–
248, 2002.

[18] J. Erickson. Nice point sets can have nasty Delaunay
triangulations. In 17th Symposium on Computational
Geometry (SoCG), pages 96–105, 2001.

[19] O. N. Gluchshenko, H. W. Hamacher, and A. Tamir. An
optimal O(n log n) algorithm for ﬁnding an enclosing
planar rectilinear annulus of minimum width. Opera-
tions Research Letters, 37(3):168–170, 2009.

[20] K. Mehlhorn, T. C. Shermer, and C. K. Yap. A com-
plete roundness classiﬁcation procedure. In Proceedings
of the Thirteenth Annual Symposium on Computational
Geometry - SCG ’97, pages 129–138, Nice, France,
1997. ACM Press.

[21] J. Mukherjee, P. R. Sinha Mahapatra, A. Karmakar,
and S. Das. Minimum-width rectangular annulus.
Theoretical Computer Science, 508:74–80, 2013.

[22] J. M. Phillips. Coresets and sketches.

In Handbook
of Discrete and Computational Geometry, pages 1269–
1288. Chapman and Hall/CRC, 2017.

[23] U. Thakker, R. Patel, S. Tanwar, N. Kumar, and
H. Song. Blockchain for diamond industry: Opportuni-
ties and challenges. IEEE Internet of Things Journal,
pages 1–1, 2020.

[24] H. Yu, P. K. Agarwal, R. Poreddy, and K. R.
Varadarajan. Practical methods for shape ﬁtting and
kinetic data structures using coresets. Algorithmica,
52(3):378–402, 2008.

34th Canadian Conference on Computational Geometry, 2022

[2] P. K. Agarwal, S. Har-Peled, K. R. Varadarajan, et al.
Geometric approximation via coresets. Combinatorial
and Computational Geometry, 52(1), 2005.

[3] P. K. Agarwal, S. Har-Peled, and H. Yu. Robust shape
ﬁtting via peeling and grating coresets. Discrete &
Computational Geometry, 39(1):38–58, 2008.

[4] N. Amenta, D. Attali, and O. Devillers.

Size of
Delaunay triangulation for points distributed over
lower-dimensional polyhedra: a tight bound. Neural
Information Processing Systems (NeurIPS): Topological
Learning, 2007.

[5] N. Amenta and M. Bern. Surface reconstruction by
Voronoi ﬁltering. Discrete & Computational Geometry,
22(4):481–504, 1999.

[6] S. Arya, G. D. da Fonseca, and D. M. Mount. Approx-
imate convex intersection detection with applications
to width and Minkowski sums.
In 26th European
Symposium on Algorithms (ESA). Schloss Dagstuhl-
Leibniz-Zentrum fuer Informatik, 2018.

[7] D. Attali and J.-D. Boissonnat. Complexity of the
delaunay triangulation of points on polyhedral surfaces.
Discrete & Computational Geometry, 30(3):437–452,
2003.

[8] D. Attali and J.-D. Boissonnat. A linear bound on
the complexity of the Delaunay triangulation of points
on polyhedral surfaces. Discrete & Computational
Geometry, 31(3):369–384, 2004.

[9] S. W. Bae. Computing a minimum-width square
annulus in arbitrary orientation. Theoretical Computer
Science, 718:2–13, 2018.

[10] S. W. Bae.

Computing a minimum-width cubic
and hypercubic shell. Operations Research Letters,
47(5):398–405, 2019.

[11] S. W. Bae. On the minimum-area rectangular and
square annulus problem. Computational Geometry,
92:101697, 2021.

[12] G. Barequet, P. Bose, M. T. Dickerson, and M. T.
Goodrich. Optimizing a constrained convex polygonal
annulus. J. Discrete Algorithms, 3(1):1–26, 2005.

[13] G. Barequet, M. T. Dickerson, and Y. Scharf. Covering
Computational Geometry,

points with a polygon.
39(3):143–162, 2008.

[14] P. Bose and P. Morin. Testing the Quality of Manufac-
tured Disks and Cylinders. In G. Goos, J. Hartmanis,
J. van Leeuwen, K.-Y. Chwa, and O. H. Ibarra, editors,
Algorithms and Computation, volume 1533, pages 130–
138. Springer Berlin Heidelberg, Berlin, Heidelberg,
1998.

[15] T. M. Chan. Approximating the diameter, width, small-
est enclosing cylinder, and minimum-width annulus. In
16th Symposium on Computational Geometry (SoCG),
pages 300–309, 2000.

[16] S. Das, A. Nandy, and S. Sarvottamananda. Linear time
algorithm for 1-Center in Rd under convex polyhedral
distance function.
In D. Zhu and S. Bereg, editors,
Frontiers in Algorithmics, volume 9711, pages 41–52.
Springer, 2016.

