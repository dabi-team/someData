2
2
0
2

y
a
M
0
2

]

R
C
.
s
c
[

1
v
7
5
2
0
1
.
5
0
2
2
:
v
i
X
r
a

Frontrunning Block Attack in PoA Clique:
A Case Study

Xinrui Zhang ∗, Qin Wang ‡, Rujia Li ∗†, Qi Wang ∗ð
∗ Southern University of Science and Technology, China.
† University of Birmingham, United Kingdom.
‡ CSIRO Data61, Australia.

Abstract—As a fundamental technology of decentralized ﬁ-
nance (DeFi), blockchain’s ability to maintain a distributed fair
ledger is threatened by manipulation of block/transaction order.
In this paper, we propose a frontrunning block attack against the
Clique-based Proof of Authority (PoA) algorithms. Our attack
can frontrun blocks from honest in-turn sealers by breaking
the proper order of leader selection. By falsifying the priority
parameters (both difﬁculty and delay time), a malicious out-of-
turn sealer can always successfully occupy the leader position
and produce advantageous blocks that may contain proﬁtable
transactions. As a typical instance, we apply our attack to a
mature Clique-engined project, HPB ($3,058,901, as of April
2022). Experimental results demonstrate the effectiveness and
feasibility. Then, we further recommend ﬁxes that make identity
checks effective. Our investigation and suggestion have been
submitted to its ofﬁcial team and got their approval. We believe
this work can act as, at least, a warning case for Clique variants
to avoid repeating these design mistakes.

Index Terms—Proof of Authority, Clique, Frontrunning Attack

protocol [10][11] to select branches. A higher priority ensures
that a block is more likely to be included in the ﬁnal chain.
Under the default assumption of Clique, the majority of sealers
are honest. An in-turn sealer is elected each round in a round-
robin way. This is inherently determined by a predeﬁned
formula combining the block index and the number of sealers.
For more details, see example [12][13]. However, in real-
world settings, a malicious sealer may locally break the honest
order of sealer rotation to occupy the leader position and
thus create proﬁtable blocks by imitating the leader’s priority.
This attack may indirectly lead to Miner Extractable Value
(MEV) issues [14][15] and cause considerable ﬁnancial loss
to clients. Fortunately, Clique mitigates this issue by adding
a veriﬁcation mechanism to check the identity of each miner.
However, several variants of Clique are still vulnerable to the
risk of frontrunning by malicious non-in-turn1 sealers and can
therefore experience a block-level frontrunning attack.

I. INTRODUCTION

Proof of Authority (PoA) consensus algorithm was ﬁrst
proposed by Wood [1][2] and further used in Geth [3] and
Parity [4]. As an implementation of PoA algorithms, Clique
has become a mainstream design since it is merged into the
Ethereum mainnet [5]. Clique relies on a limited number
of authorities (denoted by sealers) and their reputation to
achieve consensus. Instead of selecting one mining leader in
each round, Clique allows multiple sealers to produce blocks
in parallel with different priorities. This mechanism makes
Clique only process one round of messages across multiple
sealers. Fewer message exchanges result in faster conﬁrmation
and better performance. Owing to those advantages, Clique
has recently emerged as one of the most prevailing consensus
algorithms and inspires many variants that have been applied
to well-known projects (cf. Table IV), such as GoChain [6],
Binance chain [7], POA network [8] and ConsenSys [9].

In the original design of Clique, a set of sealers are allowed
to propose blocks in the same epoch, where an in-turn sealer
(equiv. leader) proposes the ﬁrst-priority block, while edge-
turn sealers create second-priority blocks with a random delay
(cf. Figure 1.(a)). Since more than one blocks are created,
forks may occur. Clique adopts a simpliﬁed version of GHOST

Figure 1. Operation Mechanisms of Clique and Our Attack

In this paper, we dive into Clique-based projects, to ex-
plore their improper ways of using Clique, and identify the
overlooked vulnerabilities that may seriously threaten the con-
sensus stability. We launch an adversarial frontrunning attack
towards its basic mechanism of sealer rotation to occupy the
leader’s position. To this end, we apply our attack to a mature
in the wild project High Performance Blockchain (HPB) [16]
under an isolated environment due to ethical principles. HPB
is designed as a permissioned blockchain applying PoA with
dynamic committee to seal blocks. A sealer is assumed to be

This work was in part presented at IEEE ICBC 2022.
ð: Corresponding author.

1Non-in-turn sealers contain both edge-turn (produce secondary-priority
blocks, diff=1) and out-of-turn sealers (cannot produce blocks, diff=0) [12].

Proposesome delay12340Confirmdiff=2diff=1Propose12340Confirmdiff=2diff=1diff=2Next round0-delay(a) Normal Case(b) Attacking Case 
 
 
 
 
 
malicious and can falsify priority parameters of difﬁculty (diff
for short) and delay time. The simulation results show that
the frontrunning blocks created by this malicious sealer are
always accepted by peer sealers due to its falsiﬁed diff (=2)
and 0-delayed block production time (cf. Figure 1.(b)). We
then provide our intuitive but useful suggestion to its ofﬁcial
team. In a nutshell, the contributions are as follows.

- We proposed a novel type of attack against PoA proto-
cols, especially for Clique-based implementations. The
proposed attack can frontrun the leader’s position by
falsifying priority parameters (diff and delay time) to
produce blocks containing proﬁtable transactions.

- We investigated the assumptions and properties of Clique
and dived into the root reason that causes such attacks.
- We applied our attack to a mature Clique variant (HPB) as
a case study. The results indicate that our attack strategies
can cause actual damages.

- We provided recommendations on how to ﬁx the system
against the proposed attack. We further submitted the
issue to its ofﬁcial team and obtained their approval [17].

Paper Structure. Section II outlines the general construction
of Clique. Section III introduces the details of the frontrunning
block attack. Both experimental simulation and evaluation are
presented in section IV. Section V provides the corresponding
security analysis. Countermeasures are proposed in section VI.
Finally, section VII exploits related studies, and section VIII
concludes our work.

II. CLIQUE MODEL

In this section, we introduce the Clique model by separately
presenting the threat model, underlying assumptions and the
detailed algorithm.
Threat Model. Designed for permissioned blockchain sys-
tems, Clique only allows a limited number of (N ) sealers
to participate in the consensus procedure [5]. The network
is assumed to be partially synchronized, where all messages
will be eventually delivered, but the delay time is unknown.
Meanwhile,
the system requires a majority of sealers to
be honest: any sealer may become malicious and do evil
activities such as dropping, delaying, duplicating, or even
faking messages, but most sealers are honest. Our attack
follows the above settings with an additional assumption: we
allow an adversarial sealer to be proﬁtable and to obtain
extra interests by frontrunning the leader position to produce
blocks. We emphasize that our attack strategy does not break
security assumptions because the assumed malicious adversary
obeys all the principles deﬁned in the source code. Instead of
consistency and liveness [18], we target at the property of
fairness [19][20] that focuses on fair transaction ordering.
Algorithm Description. Clique allows multiple sealers to
propose blocks in parallel. Particularly, in each round, an in-
turn sealer will be elected as the leader according to the block
index and the total number of sealers (cf. line 7 Algorithm
1). The election happens in a round-robin way. Certain sealers
whose numbers follow the in-turn sealer’s become edge-turn

2

2

(cid:5) + 1. By contrast, (cid:6) N

sealers. The amount of out-of-turn sealers is set to the smallest
(cid:7) − 2 sealers
majority, which is (cid:4) N
following the in-turn sealer are labeled as edge-turn sealers. In-
turn sealer and edge-turn sealers compose the largest minority.
Both the in-turn sealer and edge-turn sealers are allowed to
propose blocks. Besides diff,
the main difference between
them is that the edge-turn sealers (diff =1, equiv. b.weight=1,
line 10) can only sign a new block after the delay (line
12), whereas the in-turn sealer (b.weight=2, line 8) signs and
broadcasts the new block instantly (still with a short delay).
This parallel block-producing mechanism effectively prevents
a single Byzantine sealer from causing havoc on the entire
network. However, forks may occur as the system needs time
to decide which block is valid. Clique solves this issue by
using a simpliﬁed version of GHOST protocol [10]: in-turn
sealers’ blocks will be granted with a higher weight to ensure
that they will be ﬁnally conﬁrmed by a majority of sealers.
In contrast, a random delay with a wiggle (line 11) slows
the block generation of an edge-turn block-producing sealer.
In this way, an in-turn sealer’s block has a better chance of
being accepted by peers than edge-turn sealers.

Algorithm 1 Block Propose and Block Verify in Clique

1: procedure PROPOSE(sealeri)
2:

while (true) do

(cid:46) propose a block

3:
4:
5:
6:
7:
8:

9:
10:
11:
12:
13:
14:

n ← lastblock.number
delay ← block.time − now
N ← |sealers|
wait until¬sign_recently(sealeri, n)
if ((n + 1) mod N ) = i then

(cid:46) attack

weight = 2

(cid:46) in-turn sealing

else

weight = 1
delay = rand(delay + ( N

sleep(delay)
block ← sign(T Xs, weight)
broadcast(block)

(cid:46) attack

2 + 1) ∗ 500ms)

(cid:46) attack
(cid:46) seal a block
(cid:46) send the block

end while

15:
16: end procedure
17: −−−−−−−−−−−−−−−−−−−−−−−−−−−−−
(cid:46) verify a block
18: procedure VERIFY(sealeri)
19:
20:

¬sign_recently(sealeri, block.number)
¬dif f iculty_check(sealeri, block.weight)
¬inturn_check(sealeri, block.number)
21:
return true
22:
23: end procedure

(cid:46) block is valid

Veriﬁcation procedure is evoked when a sealer node receives
a block. According to the original design of Clique, three core
veriﬁcation functions are deployed. Block receivers ﬁrst check
whether the block’s proposer has recently signed a block.
Sealers maintain a local list, and reject blocks whose proposer
is labeled as recently signed. Secondly, the value of block
diff will be checked to ensure that it is restricted to 1 or 2.
Finally, receivers should have an additional check on blocks
with a difﬁculty 2, to ensure that the proposer is a valid leader.

2

Figure 2. Detailed Procedures of Veriﬁcation and Our Attack

III. FRONTRUNNING BLOCK ATTACK

Recently, with the development of decentralized ﬁnance
(DeFi) [21] and non-fungible token (NFT) [22], a frontrunning
attack have come to the fore. In a blockchain system, rushing
adversaries [23] may discard/replace/reorder honest transac-
tions for arbitrage. For instance, in the application of decen-
tralized exchanges, an adversary can place a transaction before
others’ if the price of an asset is going to increase [24]. This
attack usually happens in the transaction pending stage when
transactions ﬂow from the local mempool to a block [25].
Another typical instance is sandwich attack [24]. Instead of
exploring the transaction-level attack, we focus on our block-
level frontrunning attack. Block-level means that the block
should be proposed in a proper turn. This requires their
producers (sealers) to faithfully take turns to mine blocks
without breaking the prearranged turn.

As discussed, the Clique algorithm mainly uses the rotation
schema to select a leader and the priority parameters (diff and
delay time) to increase acceptance rate of the leader’s block.
As an example shown in Figure 2, eight sealers (S1 – S8)
run the consensus algorithm. Among them, S1 is supposed
to be a malicious sealer while the other seven sealers are
honest. An ideal frontrunning block attack aims to disrupt the
rotation schema and priority parameter assignment: (i) Sealer1
can keep sealing blocks, ignoring the rotation; (ii) Sealer1 can

tamper the proposed block weight (diff ) from 1 to 2; (iii) or
an arbitrary invalid value, e.g., 9. Such an attack is deemed
as successful if Sealer1 can seal blocks out of the legal turn
among peer blocks; meanwhile, all blocks of Sealer1 should
pass the veriﬁcation and ﬁnally get accepted by honest sealers.

IV. ATTACKING IMPLEMENTATION

This section outlines a series of attacks on commer-
cial blockchain networks using Clique-based consensus algo-
rithms. Our target is to achieve an ideal attack by disrupting
the rotation schema and priority parameter assignment. As
an example of a successful attack, we depict an attacking
simulation on a widely used blockchain, HPB. Notably, we
emphasize that HPB is merely one case, and our target is
to help communities to raise awareness for design pitfalls,
especially for subtle logic errors hidden in complex code.

Experiment Conﬁguration. We establish the HPB private
blockchain on a local workstation with Centos 7 x86_64
operating system. We simulate multiple consensus sealers by
using different ports. Our private blockchain consists of six
nodes: ﬁve of them are sealer nodes (N ∈ {0, 1, ..., 4})
responsible for mining, and the other is a bootnode [26] for
peer detection. We set the block generation rate at ﬁve seconds,
and then continuously send transactions to any sealer at a
constant rate (10 TXs/s) in a ﬁxed period (30 minutes).

3

S1S2S3S4S5S6S7S8R1R2R3R4R5R6R7R8diff211211121211211211212111(a) Normal CaseProcedure Verify 1. Recently signed (rotation schema)2. a). block.diff = 2 or 1    b). validity of block.diff = 2Procedure Verify 1. Recently signed (rotation schema)S1S2S3S4S5S6S7S8R1R2R3R4R5R6R7R8diff9112111212112112112129-1-----Procedure Verify 1. Recently signed (rotation schema)2. a). block.diff = 2 or 1S1S2S3S4S5S6S7S8R1R2R3R4R5R6R7R8diff2112111212112112112122-1-----Procedure Verify 1. Recently signed (rotation schema)2. a). block.diff = 2 or 1    b). validity of block.diff = 2S1S2S3S4S5S6S7S8R1R2R3R4R5R6R7R8diff2112111212112112112121-1-----(b) Attacking CaseProcedure Verify 1. Recently signed (rotation schema)2. a). block.diff = 2 or 1    b). a malicious sealer         keep sending block.diff = 2S1S2S3S4S5S6S7S8R1R2R3R4R5R6R7R8diff21121112121121121121222122222Procedure Verify 1. Recently signed (rotation schema)2. a). block.diff = 2 or 1    b). a malicious sealer         keep sending block.diff = 2         and         set delay = 0       S1S2S3S4S5S6S7S8R1R2R3R4R5R6R7R8diff21121112121121121121222122222Detailed ProceduresExperimental Procedure. The experiment is conducted from
two sides. Firstly, we consider a normal case where the
operations of all six nodes are honest. We compile the HPB
client go-hpb [27] with ofﬁcial source code and refer to the
original program as PO. Then, we faithfully execute PO. Five
enrolled sealers are assumed to be honest and will follow the
rule of consensus honestly. The results are measured by the
output address addr of the in-turn sealer in each round of block
production (See code in Listing 1). These experiments are used
as a benchmark against the experiments suffering attacks.

With the intention of keeping proposing blocks, malicious
nodes need to modify the source code of go-hpb and produce
PM where local block generation constraints (cf.
line 6
Algorithm 1) are nulliﬁed, and block diff
is ﬁxed at 2
(line 10). On the code level, simply omitting code related to
those constraints may achieve the nulliﬁcation and breaks the
rotation schema. Falsifying the difﬁculty assignment process
by changing diff=1 to diff=2 will set diff
to a static 2.
Moreover, omitting the delay time related code (cf. line 12)
gives malicious node further priority in block conﬁrmation.

Therefore, secondly, we simulate the frontrunning attack, in
which one (denoted by Sealer2) of the ﬁve sealers is malicious
with intentions to frontrun the position of an in-turn sealer,
while the other four sealers (Sealer{0/1/3/4}) remain honest
and execute PO faithfully. Sealer2 ﬁrst modiﬁes the source
code, falsiﬁes its diff to a static 2 (cf. line 10 Algorithm 1) and
omits its delay time (cf. line 12 Algorithm 1), so that Sealer2
has the same acceptance weight (ﬁrst-priority) as the honest
in-turn sealer with even faster conﬁrmation. The condition
of sign_recently (cf.
line 6 Algorithm 1) is also omitted
locally, so that Sealer2 can produce blocks continuously even
if it has signed a block recently. Sealer2 then compiles the
modiﬁed source code and executes the returned program PM.
Honest sealers run PO while malicious Sealer2 operates PM.
We observe the acceptance rate of each sealer’s blocks by
outputting the block sealer’s address accompanied by the diff
ﬁeld (using methods in Appendix A). If the miner address of
each block turns out to be the same, namely addr2, Sealer2
achieves the goal of frontrunning the original in-turn sealer
and producing blocks that outpace others. In this case, our
attack is considered to be successful. Figure 2 demonstrates
the detailed procedures of veriﬁcation and the attack.

Experimental Result. Figure 3 demonstrates the experimental
results of both block and transaction creation. In the ﬁrst
experiment, all sealers generate 360 blocks within 30 minutes
in total, and each of them generates 70 blocks approximately.
This indicates that these sealers generate blocks with almost
equal possibilities. Meanwhile, we observe that the transac-
tions are equally distributed in each block (50 TXs/block) as
well. On the contrary, in the second experiment, most of the
blocks (over 300 blocks) are generated by Sealer2 (0xa5a...,
see the screenshots in Appendix A), and the transactions in
Sealer2’s blocks are over 15K in total. The results demonstrate
that a malicious sealer running PM can successfully frontrun
both blocks and transactions.

V. ATTACKING ANALYSIS

In this section, we dive into the root reason which makes
such attacks feasible. We then analyze the attacking impacts
for the blockchain ecosystem.

2

(cid:5) + 1 turns, which means that only (cid:6) N

Root Reason. The original Clique protocol adopted by the
implementation of Ethereum is equipped with three critical
veriﬁcation conditions upon block receipt. First, the block is
considered invalid if its sealer has signed a block in recent
(cid:7) − 1 can propose
(cid:4) N
2
a block in each round (cf. line 2 Algorithm 1). Second, the
valid weight of a block is restricted to only 1 or 2 (line 3).
Thirdly, the validity of a block weight needs to be veriﬁed
corresponding to the sealer’s identity, that is, whether the
sealer holds a valid leader position when it penetrates a block
with a weight equal to 2 (line 4). The main weakness of
Clique applied in our target network is its exceptional logic
in difﬁculty validity check. By the design, Clique applies
the rotation schema to ensure that sealers take turns to sign
the sign_recently check and
a block. However, without
inturn_check veriﬁcation, a malicious sealer can easily break
this logic of block generation: the sealer can simply propose
their blocks continuously with a weight (equiv. diff) equal to
2, and thus holds priority in block acceptance with only little
modiﬁcations to the local client. In addition, there is a latency
in the proposing procedure for honest in-turn sealers (line 6).
However, a malicious sealer can also shorten the latency in
order to achieve a higher success rate.

Attacking Impact. The frontrunning block attack brings two
consequences. Firstly, it is harmful to other honest sealers.
With constant attacks from malicious sealers,
the mining
opportunity for honest sealers may reduce signiﬁcantly. In
this case, the honest sealers may lose mining rewards that
they should have obtained. Secondly, such attacks damage
the interests of users. Since all the transactions are visible
to the sealers, malicious sealers with advanced knowledge can
detect a proﬁtable trade and replace these users’ transactions
with their own ones by performing frontrunning block attacks.
What’s worse, malicious sealers may arbitrarily drop users’
transactions, directly harming the users’ interests. The attack
does not harm the target blockchain’s consistency or liveness.
However, it undermines the fairness of block orders in prac-
tice. Notably, HPB maintains its decentralized trading platform
Hpdex [28], which can be vulnerable to the attack.

Table I compares the properties broken by different attacks,
while Table II shows the main differences among impacts
of several attacks. Involving continuous controls over block
issuance, our attack may cover a relatively wider range of
victims compared to other known attacks. As sandwich attacks
are achieved by frontrunning and backrunning a pair of prof-
itable transactions at the same time, an evil sealer can easily
commit such attacks on top of our attacking situations.

VI. COUNTERMEASURES

The veriﬁcation procedure of original Clique protocol is
equipped with the three critical conditions (cf. lines 2-4 Algo-

4

Attack

Assumption

Consistency

Liveness

Fairness

Note

Table I
COMPARISON ON SECURITY PROPERTIES

1

honest sealers > N
honest sealers > N

honest sealers > N
2
2 , attacker honest but rational2
2 , attacker honest but rational

This work
PoA attack Type-I [12]
PoA attack Type-II [12]
Sandwiching3 [24]
Clone attack [29]
51% attack [30]
1 The assumption means the malicious tolerance in PoA protocols is t < N
2 .
2 Rational: Seeking to maximize their proﬁts within the scope of code principles
3 Sandwiching is presented as a practical instance of proﬁtable transaction order manipulation, rather than attacks at the consensus level.
4 (cid:37)indicates the property is vulnerable under current attack, while (cid:33)means the opposite.

depend on referenced consensus protocol
honest sealers > N
2
more than 50% computational power controlled by a miner group

block-level attack against in-turn sealers
transaction-level
block-level attack against edge-turn sealers
transaction-level
block-level attack for double-spending
double-spending

(cid:33)
(cid:33)
(cid:33)
(cid:33)
(cid:37)
(cid:37)

(cid:33)
(cid:33)
(cid:33)
(cid:33)
(cid:37)
(cid:37)

(cid:37)
(cid:37)
(cid:37)
(cid:37)

N/A
N/A

rithm 2). However, the derivative protocols may underestimate
their importance. In the case of our target blockchain network
HPB, we ﬁnd the logic error in conditional expressions of
the code. The error makes the system lack veriﬁcation condi-
tions related to both sealer’s validity and the correspondence
between a block’s weight and its sealer’s identity. The counter-
measure is straightforward. The code logic error makes HPB
lack two crucial veriﬁcation checks, and this absence further
results in vulnerabilities of HPB protocols. Therefore, ﬁxing
the mode logic error can directly plug the loophole. It is worth
mentioning that ofﬁcial HPB team has already accepted our
proposal (PR report [17]). We suggest that future projects
based on Clique could cautiously and comprehensively assess
their security guarantees.

Algorithm 2 highlights the ﬁx points to the corresponding
blockchain code. Since the clients can be compiled locally
and the block proposing procedure is conducted independently,
malicious sealers can easily falsify the proposing related code
and manipulate the proposing parameters. As a consequence,
the most effective way to prevent such manipulation is to
strengthen the veriﬁcation procedure, which is deployed on
every sealer node, since it is difﬁcult to compromise most
nodes at the same time. As for ﬂawed clique-based networks
and future projects, rechecking the code logic and letting
veriﬁcation functions remain effective is essential, including
sign_recently, difﬁculty_check and inturn_check.

Algorithm 2 Block Verify in Clique
(cid:46) verify a block
1: procedure VERIFY(sealeri)
¬sign_recently(sealeri, block.number) (cid:46) ﬁx point
2:
¬dif f iculty_check(sealeri, block.weight)
3:
¬inturn_check(sealeri, block.number) (cid:46) ﬁx point
4:
(cid:46) block is valid
return true
5:
6: end procedure

VII. RELATED WORK

In this section, we sort out the security vulnerabilities that
have arisen in PoA, including related research and various
attacks proposed in the recent decade.
Insecurity of PoA. Angelis et al. [13] presented the ﬁrst
clear PoA protocol and clariﬁed its impossibility under the

Figure 3. Experimental Results of Created Blocks/Transactions

CAP theorem [31]. PoA is inadequate in achieving consistency
when prioritising another two properties. Vincent et al. [29]
proposed the cloning attack to break the consistency guar-
antee. A malicious sealer is granted abilities to clone itself
into another instance and isolate two equivalent branches to
inﬂuence the chain selection. A conﬂicting transaction, in this
way, can be double-spent or discarded from the canonical
chain. Toyoda et al. [32] dived into a function-level analysis by
introducing a proﬁling tool pprof. They detected the targeted
functions that may decrease performance. Liu et al. [33]
provided a quantitative analysis towards PoA by using Markov
Decision Process. They launched a related attack against the
VeChainThor’s [34] PoA implementation. This work differs
from the previous attacks in focusing on internal programming
logic vulnerabilities.
Fairness in PoA. Besides the essential properties of a consen-
sus protocol, consistency and liveness, Kelkar et al. [19] [20]
transaction order-
identiﬁed the third consensus property,
fairness. Since the manipulation of transaction orders with
non-public knowledge [35] may subvert the proﬁtability or
validity of target transactions, the term fairness emphasizes
transactions should be output upon the order of receipt to
ensure the network users stay in a fair queue. Emerging MEV
attacks against the blockchain fairness like [14][36] mainly
focus on PoW consensus protocols. Stathakopoulou et al. [37]
presented a hardware solution to prevent damage on fairness.
Recently, Wang et al. [12] exploited the fairness attacks on
PoA protocols. They pointed out underlying ways to manip-

5

Frontrunning Blocks(a) Normal Case(b) Attacking Casesealer2130421304703.5kFrontrunning Txs30015kBlocksTransactions (Txs)Victim BlocksVictim Txsulate transaction orders in PoA both on transaction-level and
block-level. As for the block-level attack, they exploited the
potentials of frontrunning edge-turn blocks (equiv. breaking
fairness of second-priority blocks) when the in-turn sealer fails
for reasons such as network congestion or being attacked. In
contrast, our work focuses on the attack against the in-turn
sealer (breaking fairness of ﬁrst-priority blocks). We proposed
an approach to compete for the block issuance right of in-turn
sealers in each round with only one single evil sealer.

Table II
COMPARISON AMONG VARIOUS ATTACKS

Attack

Attacker Miner Damage

Trader Damage

This work
PoA Type-I/II [12]
Sandwiching [24]
Clone attack [29]

Miner
Miner
Trader
Miner

(cid:33)
(cid:33)
(cid:37)
(cid:37)

(cid:33)
(cid:33)
(cid:33)
(cid:33)

VIII. CONCLUSION

Proof of Authority is one of the most prevailing consensus
mechanisms in state-of-the-art permissioned blockchain sys-
tems. In this paper, we ﬁrst explored the security issue of
a Clique-based protocol used in the real-world projects. Then
we focused on the block-level frontrunning attack by breaking
the proper order of block issuance. We further launched the
attack on HPB private chain, simulating strategies by falsifying
priority parameters and maintaining an advantageous position
during the sealer rotation. The attack impeded consensus
stability and caused monetary loss for both normal users and
honest sealers. Results from our experiments proved the ef-
fectiveness of our frontrunning attack. Moreover, we provided
our recommendations and disclosed the report to the ofﬁcial
HPB team (cf. [17]). We hope that other Clique variants can
draw upon this knowledge and avoid similar design mistakes.

ACKNOWLEDGEMENT

Xinrui Zhang, Rujia Li and Qi Wang are partially supported
by the Shenzhen Fundamental Research Programs under Grant
No.20200925154814002. Lastly, we thank the HPB develop-
ment team, especially for their open and helpful discussion.

REFERENCES

[1] G. Wood, “Poa private chains,” https://github.com/ethereum/guide/blob

/master/poa.md, Nov. 2015, accessed: Dec., 2021.

[2] P. Szilágyi, “Eip-225: Clique proof of authority consensus protocol,”
2017, ethereum Improvement Proposals, accessed: Dec.,2021. [Online].
Available: https://eips.ethereum.org/EIPS/eip-225

[3] T. go-ethereum Authors, “Go ethereum,” https://github.com/ethereum/

go-ethereum, Mar. 2022, accessed: Apr., 2022.

[4] A. Ordian, “pairty-ethereum,” https://github.com/openethereum/parity-e

thereum, Feb. 2020, accessed: Dec., 2021.

[5] C. N. Samuel, S. Glock, F. Verdier, and P. Guitton-Ouhamou, “Choice
of ethereum clients for private blockchain: Assessment from proof of
authority perspective,” in Proceedings of the 2021 IEEE International
Conference on Blockchain and Cryptocurrency (ICBC).
IEEE, 2021,
pp. 1–5.

[6] “Gochain,” https://gochain.io/, 2021, accessed: Dec., 2021.
[7] “Posa in binance smart chain,” https://github.com/binance-chain/white
paper/blob/master/WHITEPAPER.md, 2021, accessed: Dec., 2021.

[8] Parity Technologies (UK) Ltd, “Poa network,” https://github.com/poane

twork/openethereum, 2021, accessed: Dec., 2021.

[9] “Consensys quorum,” https://github.com/ConsenSys/quorum/blob/maste

r/consensus/clique/clique.go, 2021, accessed: Dec., 2021.

[10] G. Wood, “Ethereum: A secure decentralised generalised transaction
ledger,” https://ethereum.github.io/yellowpaper/paper.pdf, Apr. 2022, ac-
cessed: Apr., 2022.

[11] Y. Sompolinsky and A. Zohar, “Secure high-rate transaction processing
in bitcoin,” in Proceedings of the 2015 International Conference on
Financial Cryptography and Data Security (FC). Springer, 2015, pp.
507–527.

[12] Q. Wang, R. Li, Q. Wang, S. Chen, and Y. Xiang, “Exploring unfairness
on proof of authority: Order manipulation attacks and remedies,” in
Proceedings of
the 17th ACM ASIA Conference on Computer and
Communications Security (ASIACCS). ACM, 2022.

[13] S. De Angelis, L. Aniello, R. Baldoni, F. Lombardi, A. Margheri, and
V. Sassone, “PBFT vs proof-of-authority: Applying the CAP theorem to
permissioned blockchain,” in Proceedings of the 2018 Italian Conference
on Cybersecurity (ITASEC), 2018, pp. 1–11.

[14] P. Daian, S. Goldfeder, T. Kell, Y. Li, I. Bentov, L. Breidenbach, and
A. Juels, “Flash boys 2.0: Frontrunning in decentralized exchanges,
miner extractable value, and consensus instability,” in Proceedings of
the 2020 IEEE Symposium on Security and Privacy (SP).
IEEE, 2020,
pp. 910–927.

[15] C. F. Torres, R. Camino et al., “Frontrunner jones and the raiders of
the dark forest: An empirical study of frontrunning on the ethereum
blockchain,” in 30th USENIX Security Symposium (USENIX Security
21), 2021, pp. 1343–1359.

[16] The go-hpb Authors, “High performance blockchain (hpb) – consensus,”
https://github.com/hpb-project/go-hpb/tree/master/consensus, Oct. 2021,
accessed: Dec., 2021.

[17] “go-hpb pull request,” https://github.com/hpb-project/go-hpb/tree/ﬁxdi

ffbug, accessed: Dec., 2021.

[18] J. Garay, A. Kiayias, and N. Leonardos, “The bitcoin backbone protocol:
Analysis and applications,” in Annual International Conference on
the Theory and Applications of Cryptographic Techniques (CRYPTO).
Springer, 2015, pp. 281–310.

[19] M. Kelkar, F. Zhang, S. Goldfeder, and A. Juels, “Order-fairness
for byzantine consensus,” in Proceedings of the Annual International
Cryptology Conference (CRYPTO). Springer, 2020, pp. 451–480.
[20] M. Kelkar, S. Deb et al., “Order-fair consensus in the permissionless

setting,” Cryptology ePrint Archive, vol. 2021, p. 139, 2021.

[21] D. A. Zetzsche, D. W. Arner, and R. P. Buckley, “Decentralized ﬁnance,”
Journal of Financial Regulation, vol. 6, no. 2, pp. 172–203, 2020.
[22] Q. Wang, R. Li, Q. Wang, and S. Chen, “Non-fungible token
(nft): Overview, evaluation, opportunities and challenges,” 2021, arXiv
preprint. [Online]. Available: https://arxiv.org/abs/2101.05511

[23] A. Kosba, A. Miller, E. Shi, Z. Wen, and C. Papamanthou, “Hawk:
The blockchain model of cryptography and privacy-preserving smart
contracts,” in Proceedings of the 2016 IEEE symposium on security and
privacy (SP).

IEEE, 2016, pp. 839–858.

[24] L. Zhou, K. Qin, C. F. Torres, D. V. Le, and A. Gervais, “High-frequency
trading on decentralized on-chain exchanges,” in Proceedings of the
2021 IEEE Symposium on Security and Privacy (SP).
IEEE, 2021,
pp. 428–445.

[25] S. Eskandari, S. Moosavi, and J. Clark, “Sok: Transparent dishonesty:
front-running attacks on blockchain,” in Proceedings of the 2019 Inter-
national Conference on Financial Cryptography (FC). FC, 2019, pp.
170–189.

[26] Go Ethereum Team, “Private network tutorial,” https://geth.ethereum.or

g/docs/getting-started/private-net, 2021, accessed: Dec., 2021.

[27] The go-hpb Authors, “High performance blockchain (hpb) – chain
generation,” https://github.com/hpb-project/go-hpb/blob/master/consens
us/prometheus/chain_generation.go, Aug. 2021, accessed: Dec., 2021.
[28] H. team, “Hpdex,” https://app.hpdex.org/#/swap, accessed: Apr., 2022.
[29] E. Parinya, G. Vincent, and J. Guillaume, “The attack of the clones
against proof-of-authority,” in Proceedings of the 27th Annual Network
and Distributed System Security Symposium (NDSS), 2020.

[30] M. D. C. Initiative, “51% attacks,” https://dci.mit.edu/51-attacks, ac-

cessed: Apr., 2022.

[31] S. Gilbert and N. Lynch, “Brewer’s conjecture and the feasibility of
consistent, available, partition-tolerant web services,” Acm Sigact News,
vol. 33, no. 2, pp. 51–59, 2002.

6

[32] K. Toyoda, K. Machi, Y. Ohtake, and A. N. Zhang, “Function-level
bottleneck analysis of private proof-of-authority ethereum blockchain,”
IEEE Access, vol. 8, pp. 141 611–141 621, 2020.

[33] X. Liu et al., “Mdp-based quantitative analysis framework for proof
of authority,” in Proceedings of
the 2019 International Conference
on Cyber-Enabled Distributed Computing and Knowledge Discovery
(CyberC).

IEEE, 2019, pp. 227–236.

[34] VeChain Foundation, “Vechain docs — proof of authority,” Oct.
[Online]. Available:

2021, vechain Docs, accessed: Dec., 2021.
https://docs.vechain.org/thor/learn/proof-of-authority.html

[35] J. W. Markham, “Front-running-insider trading under the commodity

exchange act,” Cath. UL Rev., vol. 38, p. 69, 1988.

[36] K. Qin, L. Zhou, and A. Gervais, “Quantifying blockchain extractable
value: How dark is the forest?” IEEE Symposium on Security and
Privacy (SP), 2022.

[37] C. Stathakopoulou, S. Rüsch, M. Brandenburger, and M. Vukoli´c,
“Adding fairness to order: Preventing front-running attacks in bft pro-
tocols using tees,” in 2021 40th International Symposium on Reliable
Distributed Systems (SRDS).

IEEE, 2021, pp. 34–45.

[38] “Coinmarketcap,” https://coinmarketcap.com/, 2021, accessed: Dec.,

2021.

APPENDIX A

Figure 4 shows a comparison between a normal case and an
attacking case of running HPB instances. The ﬁrst column on
the left marks the serial number of each block. The middle
column shows the addresses of in-turn sealers who have
created current blocks. The right column represents the block
weights (equiv. diff ). Figure 4(a) depicts a normal case of a
rotation cycle. We can observe that the blocks are signed by
ﬁve different sealers in turns. The ﬁrst ﬁve addresses (addr2
– addr5, addr1, sequentially) are not repeated while the sixth
address (addr2) rotates to the ﬁrst one, corresponding to the
rotation schema. In contrast, Figure 4(b) shows an attacking
case. Apparently, the addresses of nine consecutive blocks stay
the same, indicating that a malicious sealer has successfully
skipped the procedure of sealer rotation and sat in the leader
position in most rounds. This out-of-turn sealer frontruns
others to make proﬁts by continuously producing proﬁtable
blocks by maintaining block weights (diff ) equal to 2.

Listing 1. Data collecting script

1 #!/bin/bash
2 a=$1
3 for i in {0..199}
4 do
5 i=‘expr $i + $a ‘
6 miner=‘./ghpb attach rpc_addr <<EOM
7 eth.getBlock($i).miner
8 EOM
9 ‘
10 difficulty=‘./ghpb attach rpc_addr <<EOM
11 eth.getBlock($i).difficulty
12 EOM
13 ‘
14 echo $i ${miner:0-46:42} ${difficulty:0-4:2}
15 done

APPENDIX B. NOTATIONS

We highlight several featured notations in the following

Table III to clarify their usages in this work.

Table III
FEATURED NOTATIONS

Symbol

Item

Functionalities

diff
delay time
N
PO
PM
S(cid:63)
go-hpb
addr(cid:63)

Difﬁculty
Delay time
Committee size
Original client
Malicious client
Sealer
HPB client
Sealer address

the difﬁculty (weight value) of a block
the delay time of current block issuance
the total number of sealers
the normal (intact) client program of go-hpb
the tampered client program of go-hpb
refer to a sealer by index
the client program of HPB project
the address of a sealer

APPENDIX C

Table.IV lists several mainstream commercial blockchain
projects adopting Clique-based consensus algorithms. We
present their market values collecting from public information
(CoinMarketCap [38]). The data demonstrate that Clique-
related projects occupy a considerable market share, which
emphasizes the importance of its protocol security.

(a) Normal Case

(b) Attacking Case

Figure 4. Screenshots of Experimental Results

We use the script (cf. Listing 1) to collect the above data.
The output presents the block number, miner’s address and
block difﬁculty, sequentially.

7

Table IV
CLIQUE-BASED PROJECTS

Project

Client

Market Cap

Go-Ethereum
Binance-chain
Polygon (MATIC)
Openethereum
PoA network
HPB (This work)
Ethereum Classic
ConsenSys
GoChain
Daisy
Olecoin
EEX
AplaProject
Tomochain

Clique
Clique-variant
Clique-forked
Clique-forked
Clique-variant
Clique-variant
Clique-forked
Clique-forked
Clique-forked
Clique-forked
Clique-forked
Clique-forked
Clique-forked
Clique-forked

$343,061,278,394
$17,426,222,620
$9,866,753,531
$343,061,278,394
$23,723,240
$3,058,901
$4,161,701,776
-
$24,702,737
-
-
-
-
$114,756,610

1 The variant means a project makes modiﬁcations, while
forked means directly uses the source code from Clique.

2 Data accessed in April, 2022.

