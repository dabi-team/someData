Georacle: Enabling Geospatially Aware Smart Contracts

Taha Azzaoui
taha@azzaoui.org

1
2
0
2

v
o
N
9
2

]

R

I
.
s
c
[

1
v
3
2
0
5
1
.
1
1
1
2
:
v
i
X
r
a

Abstract— Smart

contracts

[6] have

enabled a
paradigm shift in computing by leveraging decentralized
networks of trust to achieve consensus at scale. Oracle
networks further extend the power of smart contracts by
solving the so-called “oracle problem” [1]. Such networks
enable smart contracts to make use of the vast amount
pre-existing data available on the web today without
jeopardizing the integrity of the underlying network of
trust. By leveraging oracle networks, smart contracts
can make decisions based on data corresponding to the
physical world. To this end, we introduce Georacle -
an oracle service that enables geospatially aware smart
contracts in a way that respects the space constrained
nature of blockchain environments. Contracts can query
the location of objects in a given area, map between street
addresses and coordinates, and retrieve the geometry of a
desired region of space while conserving gas consumption
and avoiding unnecessary data processing.

I. INTRODUCTION

Geospatial data involves data about objects corre-
sponding to a location on the surface of the earth.
Spatial
information represented as vector data uses
geometric shapes such as points, lines, and polygons
to represent geographic features in space. This spatial
information is usually combined with metadata contain-
ing attribute information about the location allowing
for efﬁcient
indexing and retrieval. Once retrieved,
geospatial data is often used for reasoning about points
of interest and determining relationships across regions
in space.

In the current web landscape, location serves as a
fundamental building block for almost every useful ap-
plication online today. From ride-sharing and vacation
rentals to social media and online dating, location has
proven essential to fostering digital ecosystems that
rely on geospatial data to develop a computational
understanding of the outside world. In order for such
ecosystems to thrive on the blockchain, decentralized
applications must have access to geospatial data on-
chain. Native access to geodata empowers smart con-
tracts to coordinate across space in a similar fash-
ion, forming the basis for decentralized location-based
experiences far more powerful than their centralized

counterparts on the web today. Using the transparency
inherent in blockchain-based ledger systems, contracts
can make veriﬁable decisions on the basis of location.
This paper introduces Georacle - an oracle service
built on top of the Chainlink [1] network with the goal
of providing smart contracts with the ability to query
the attributes of arbitrary points in space. Georacle
serves as a map oracle, delivering location data to
EVM-based blockchains [7] [2]. Among the contribu-
tions of this paper is a novel approach for delivering
state of the art map data in a way that respects the
space constrained nature of blockchain environments.
Contracts can query the location of objects in a given
area, map between street addresses and coordinates, and
retrieve the geometry of a desired region in space while
conserving gas utilization and avoiding unnecessary
data processing.

II. DATA MODEL

of

the

open

geodata

standard

Georacle

collection

leverages OpenStreetMap
for

a
-
[5]
community-driven
interacting
with geospatial data. The OpenStreetMap project
across
decentralizes
thousands [4] of community members who serve
as cartographers generating and validating geodata
across the world. As such, the OSM model replaces
a central data authority with a community of voters
that discuss propositions to reach consensus on best
practices. The project follows a peer-driven approach
similar to that of Wikipedia with the goal of providing
its
open access to high quality geospatial data. At
core, the OSM model divides geodata into an object
hierarchy of increasing complexity as follows.

A. Nodes

Nodes are an atomic data type in the OpenStreetMap
model, they encode a single coordinate in space. A node
is completely determined by its latitude and longitude.
Each node is assigned a unique identiﬁer such that a
contract can refer to a node unambiguously using its
ID.

 
 
 
 
 
 
B. Ways

Ways are the next level of abstraction in the Open-
StreetMap data model, they encode area features. Ways
consist of a collection of nodes that combine to form
some geometry. Closed ways (ones that start and end at
the same node) are a special type of way called an area.
Like nodes, contracts can also reference ways uniquely
by their identiﬁer.

C. Tags

Both nodes and ways can be tagged with metadata in
the form of key-value pairs that provide the object with
some context (e.g. amenity=park, building=residential).
For a given object we might want to know if it has a
name, what type of location it is, or what its opening
hours are. Tags provide contracts with the ability to
ﬁlter locations according to desired attributes. Figure
1 shows a selection of the available tags for the way
representing the Eiffel Tower.

Key
addr:city
addr:housenumber
addr:postcode
addr:street
architect
building
building:colour
building:material
building:shape
fee
height

Value
Paris
5
75007
Avenue Anatole France
Stephen Sauvestre
attraction
#706550
iron
pyramidal
10-25 C
324

Fig. 1: A Selection of Tags For the Eiffel Tower (Way
5013364)

III. LOCATION QUERIES

By combining location and metadata, contracts can
ﬁlter objects by their tags to query regions of interest
with desired attributes across space. This direct access
to the OSM data model offers contracts a general
method for constructing spatially constrained queries
with desired levels of complexity. Contracts can search
globally for a list of points tagged with some key-value
pair or opt for a more local search by specifying an
arbitrary bounding box around the region of interest.
On the other hand, if the points of interest are known a
priori, contracts can ﬁlter the latest metadata associated

with the speciﬁc object to learn more about that region
of space.

Armed with these techniques, smart contracts are
not only geospatially aware, but can also be made
contextually aware with respect to the locations they
interact with. That is, metadata allows contracts to
learn more about the nature of a place (e.g. is it a
building, shop, park, ATM, etc) along with location
dependent information such as the opening hours of
a given building or any fees associated with entering.
Using this information, contracts can make decisions
with implications that reach into the physical world
by conditioning their logic on the attributes associated
with their points of interest. Use cases such as crowd
funding and decentralized autonomous organizations
can function on the basis of location by tailoring
queries to ﬁt their needs.

A. Area

One method of informing contracts about the outside
world involves querying nodes or ways conﬁned to a
named area that are tagged with a desired description.
The nodesInArea function and its corresponding way
variant waysInArea both expect a named area (e.g.
New York, London, Tokyo, etc) along with a key-value
pair of desired attributes and an upper bound on the
number of search results. Figure 2 shows an example
of searching for n coffee shops (represented as nodes)
within the Boston area by crafting a Chainlink request
for Georacle using Solidity [3]. Upon fulﬁllment, the
oracle will respond with an int64 array of size at most
n representing the matching object identiﬁers packed
according to the EVM ABI speciﬁcation.

req.add("function","nodesInArea");
req.add("key","amenity");
req.add("value","cafe");
req.add("area","Boston");
req.addInt("limit", n);

Fig. 2: Finding n Coffee Shops in the Boston Area

Additionally, contracts can obtain a count of the
number of matching identiﬁers beforehand by using
the nodeCountInArea and wayCountInArea functions
the oracle
as shown in Figure 3. Upon fulﬁllment,
will return a single int64 value denoting the number
of objects tagged with the requested description in the
area.

req.add("function", "nodeCountInArea");
req.add("key", "amenity");
req.add("value", "cafe");
req.add("area", "Boston");

Fig. 3: Retrieving a Count of Coffee Shops in the
Boston Area

req.add("function", "nodeCountInBB");
req.add("key", "public_transport");
req.add("value", "station");
req.addInt("south", 4077190000);
req.addInt("west", -7397460000);
req.addInt("north", 4079750000);
req.addInt("east", -7394690000);

B. Bounding Box

When interacting with less well-deﬁned areas,
it
can be useful to work with a custom bounding box
surrounding some region of concern rather than a
named area. Using a bounding box allows contracts
to conﬁne their queries to an arbitrary region of space.
This is useful if the desired search space crosses the
boundaries of multiple named areas. For regions that
are known to be some subregion of a named area, using
a bounding box will return only the matches within this
desired subspace, incurring less data transfer and thus
consuming less gas.

Figure 4 searches for n train stations within a
subregion of Manhattan using the bounding box:
(40.7719, −73.9746, 40.7975, −73.9469). These coor-
dinates correspond to the south, west, north, and east
most points of the bounding box respectively. Note that
Georacle scales coordinates by a factor of 108 as the
EVM lacks support for ﬂoating point arithmetic. Upon
fulﬁllment, the oracle response format will be identical
to that of the named area queries introduced previously.

req.add("function", "nodesInBB");
req.add("key", "public_transport");
req.add("value", "station");
req.addInt("south", 4077190000);
req.addInt("west", -7397460000);
req.addInt("north", 4079750000);
req.addInt("east", -7394690000);
req.addInt("limit", n);

Fig. 4: Obtaining n Train Stations in a Subregion of
Manhattan

Like with named areas, contracts can also retrieve a
count of the number of matching identiﬁers within the
bounding box beforehand by using the nodeCountInBB
and wayCountInBB functions as shown in Figure 5.
Upon fulﬁllment, the oracle will return a single int64
value denoting the number of objects tagged with the
requested description within the speciﬁed bounding
box.

Fig. 5: Obtaining the Number of Train Stations
Within a Subregion of Manhattan

C. Filtering Tags

If the regions of interest are known a priori, either
because they are embedded in the smart contract itself,
or because they are the return value of one of the func-
tions introduced previously, the function nodeTagQuery
(along with its way variant wayTagQuery) provides
contracts with a mechanism for ﬁltering the tags of
a speciﬁc object. Both functions expect a string array
of keys along with the known object identiﬁer.

string[] memory tags = [

"name",
"addr:housenumber",
"addr:street",
"addr:city",
"addr:postcode",
"opening_hours"];

req.add("function", "nodeTagQuery");
req.addInt("ID", 2700809522);
req.addStringArray("tags", tags);

Fig. 6: Filtering the Tags of a Local Coffee Shop
(Node 2700809522)

Figure 6 shows the process of retrieving the name,
address and opening hours of a speciﬁc coffee shop
in the Boston area. Upon fulﬁllment, the oracle will
respond with an ABI-packed string array of values
corresponding to each key.

D. Geometry

In addition to querying discrete points, contracts can
also interact with the physical geometry of a given
region. Recall that ways are simply a collection of
nodes (points in space). The wayGeometry function
can be used to obtain the coordinates of the underlying
collection of nodes that represent a given way. These
nodes form some geometry which can then be used
to compute geometric properties like area or input
into common computational geometric algorithms such
as nearest neighbor or segment intersection. Figure 7
shows the retrieval of the way geometry representing

the Great Pyramid of Giza. This geometry consists of
10 nodes which combine to form the rectangular base
of the pyramid.

req.add("function", "wayGeometry");
req.addInt("ID", 4420397);

information, which is most commonly in the form of a
description.

Smart contracts can also use the reverseGeocode
function to obtain the inverse mapping from a set of
coordinates to a description of the nearest OSM object
as shown in ﬁgure 10.

Fig. 7: Obtaining the Geometry of the Great Pyramid
of Giza (way 4420397)

req.add("function", "reverseGeocode");
req.addInt("lat", 5152338790);
req.addInt("lon", -15823670);

Upon fulﬁllment, the oracle will return a list of pairs
of int64 values representing the latitude and longitude
coordinates of each node. Due to the topology of
large areas however, geometric data can sometimes be
prohibitively expensive to store completely on chain. To
gauge gas consumption, it can be useful to obtain the
size of the geometry beforehand by using the wayCount
function as shown in ﬁgure 8. Upon fulﬁllment, the
oracle will return a single int64 value representing the
number of nodes that form the way geometry.

req.add("function", "wayCount");
req.addInt("ID", 4420397);

Fig. 8: Retrieving the Number of Nodes in the
Geometry of the Great Pyramid of Giza (way
4420397)

IV. GEOCODING

While coordinates lend themselves well to geometric
reasoning, it can be convenient for users to refer to a
location based on its canonical street addresses. Smart
contracts can use the geocode function to map an area
description (i.e. street address) to the coordinates of
its representative OSM object. Figure 9 obtains the
coordinates of a street address in the United Kingdom.

req.add("function", "geocode");
req.add("address",

"221B Baker St, London NW1 6XE, UK");

Fig. 9: Mapping a Street Address to a Point in Space

Upon fulﬁllment, the oracle will respond with an
ABI-packed struct of four int64 values representing
an object type ﬂag (0 = node, 1 = way), the object
identiﬁer, and the corresponding latitude and longitude
of the area respectively. This output can then be used
to preform spatial analysis on user-provided location

Fig. 10: Mapping a Coordinate Pair to an Area
Description

Upon fulﬁllment the oracle will respond with an
ABI-packed struct consisting of two int64 values rep-
resenting an object type ﬂag and the corresponding
object identiﬁer along with a string description of the
object.

V. GAS CONSIDERATIONS

As the demand for block space increases, optimizing
gas consumption is of primary concern for the practical
usage of decentralized applications. The OSM data
model outlined in the previous sections is well-suited
for blockchain environments where data storage is at
a premium, since contracts need only interact with
objects that ﬁt their desired description. Application
developers can assess gas consumption beforehand by
simulating oracle queries off-chain and determining
the subset of data necessary to manipulate on chain.
Contracts can then optimize for gas by ﬁne-tuning their
search space and imposing an upper bound on the
number of returned search results. This upper bound
can be computed dynamically based on the count
variant associated with each query function.

VI. CONCLUSION

Building location aware smart contracts involves
bringing geodata on-chain in a manner that respects
the space constrained nature of modern blockchains.
The OSM data model and its hierarchy of uniquely
identiﬁed object types is well-suited for this task as
location representation reduces to the corresponding
object identiﬁer. The metadata associated with each
object allows for ﬂexible queries that can be conﬁned
to a named area or ﬁne-tuned to a speciﬁc region in
space on the ﬂy.

While named areas can be a convenience for users,
the ability to specify an arbitrary search space allows
smart contract developers to narrow down the regions

that matter most and avoid ﬁltering through unneces-
sary data on chain. Geocoding gives smart contracts
the ability to translate between sets of coordinates
and human readable area descriptions better suited for
interfacing with users. Smart contracts that leverage
geospatial data by combining these mechanisms can
coordinate across space, creating an ecosystem with
global implications. By querying the attributes of spe-
ciﬁc points of interest, contracts are no longer insulated
from the outside world as they gain a better sense of
their surroundings.

REFERENCES

[1] Lorenz Breidenbach, Christian Cachin, Benedict Chan, Alex
Coventry, Steve Ellis, Ari Juels, Farinaz Koushanfar, Andrew
Miller, Brendan Magauran, Daniel Moroz, et al. Chainlink 2.0:
Next steps in the evolution of decentralized oracle networks,
2021.

[2] Vitalik Buterin et al. A next-generation smart contract and

decentralized application platform.

[3] Christian

Gavin
https://docs.soliditylang.org/, 2015.

Reitwiessner

and

Wood.

[4] Mordechai Haklay and Patrick Weber. Openstreetmap: User-
generated street maps. IEEE Pervasive computing, 7(4):12–18,
2008.

[5] OpenStreetMap

contributors.

retrieved
https://www.openstreetmap.org, 2017.

from

Planet
https://planet.osm.org

dump
.

[6] Nick Szabo. Formalizing and securing relationships on public

networks. First Monday, 2(9), Sep. 1997.

[7] Gavin Wood. Ethereum: A secure decentralised generalised

transaction ledger.

