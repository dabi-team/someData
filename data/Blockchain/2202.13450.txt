ZipZap: A Blockchain Solution for Local Energy Trading

Mario Felipe Munoz∗, Kaiwen Zhang∗ and Fatima Amara†
∗ ´Ecole de technologie sup´erieure, Montr´eal (Canada)
Montreal, Quebec H3C 1K3
†Hydro-Qu´ebec IREQ, Shawanigan (Canada)

2
2
0
2

b
e
F
7
2

]

C
D
.
s
c
[

1
v
0
5
4
3
1
.
2
0
2
2
:
v
i
X
r
a

Abstract—

In the last few years, electric utility companies have in-
creasingly invested into transactive energy systems. This trend
was primarily caused by the integration of distributed energy
resources (DERs) and internet-of-things (IoT) devices into
their existing distribution networks. Inﬂuenced by the general
interest in blockchain technologies, many industry specialists
are considering new, more efﬁcient peer-to-peer market struc-
tures for DERs. Since blockchain-based energy exchanges can
automate transactions between their members and provide
increased levels of security thanks to smart contracts, these
new initiatives may eventually revolutionize how customers
interact with utility companies. In this paper, we explore the
trade-off between cost and traceability in the form of on-
chain and off-chain solutions. We also propose ZipZap, a
ﬁrst step towards a blockchain-based local smart grid system.
ZipZap is an ERC-1155 compliant solution with four differ-
ent prototypes: Heavyweight, Featherweight, Lightweight and
Weightless. The ﬁrst three prototypes were developed in So-
lidity and deployed using Ethereum. Heavyweight is fully
on-chain, whereas Featherweight and Lightweight showcase
various levels of hybridization. Weightless, in turn, was de-
ployed using Quorum, a gas-free alternative to Ethereum. Our
evaluation uses realistic parameters and measures the impact of
different types of metadata storage scopes, with some Ethereum
prototypes showcasing gas cost reductions of more than 97%
in comparison to our fully on-chain baseline.

Index Terms—Blockchain, Smart Contract, Energy Tokeniza-
tion, Smart Grid, Transactive Energy.

1. Introduction

Contemporary energy markets have been greatly im-
pacted by the falling costs of decentralized renewable energy
sources (DER) and the introduction of internet of things
(IoT) devices. These changes led to the creation of peer-to-
peer exchanges through which renewable energy can be sold.
Consequentially, new sociotechnical challenges arose in the
context of energy security for both communities and indi-
viduals. One serious concern is that the many IoT devices
that form smart grids generate unprecedented volumes of
data—data that has to be adequately managed and protected.
To makes matters worse, even though further decentralizing

energy grids increases their availability, it also increases
their overall attack surface area. These factors have driven
industry specialists to consider blockchain systems in hopes
of further automating operations and providing greater levels
of data integrity.

To meet energy industry demands, we propose ZipZap.
In its current state, ZipZap is our novel energy tokenization
blockchain system for local energy exchanges, although
functionality extensions are being considered. Figure 1a
shows our typical operational context. The utility company
(represented by the hydro-power plant and transformer) sup-
plies the basic energy infrastructure, but each household can
connect to it with varying degrees of autonomy depending
on their available energy equipment.

ZipZap works by tokenizing energy quantities as they are
created by different types of generators (biodiesel engines,
PV cells, wind turbines, etc.). The owners of the generators
can consume their own energy and sell any excess to their
neighbours or to the grid. All energy-related operations are
tracked by ZipZap, allowing users and auditors to verify the
provenance of all energy created and spent by a household.
Tokenizing energy is a noticeably harder task than tokeniz-
ing other goods such as food shipments [1] because of the
massive number of transactions emitted on a daily basis,
and their comparatively tight latency requirements. Given
the above considerations, the contributions of this study are
listed as follows:

1)

Proposing ZipZap: an energy tokenization solution
for local energy exchanges. ZipZap adopts a semi-
fungible model for energy tokenization and is ERC-
1155 compliant.

2) Developing three Ethereum-based reference imple-
mentations of our design: Heavyweight, Feather-
weight and Lightweight. The ﬁrst being a fully
on-chain approach and the two latter using hybrid
designs.

3) Developing a Quorum-based reference implemen-

tation of our design.

4) Comparing all four implementations and assessing
the feasibility of our approach in terms of operating
gas costs compared to energy generation costs.

The rest of this paper abides to a clear structure: Section
2 covers previous research done in relation to blockchain
systems and smart energy grids. Section 3 explains the

 
 
 
 
 
 
(a)

Figure 1: Neighborhood Network and Communication Diagram

(b)

value provided by such systems and some key preliminary
concepts. Section 4 describes the composition of all four
prototypes and our tokenization method. Section 5 shows
the experimental results for all ZipZap prototypes. Finally,
Section 6 ends the paper with a brief conclusion.

national-level power grid it could be a major hurdle
to overcome.

• Ether (Ethereum’s currency) ﬂuctuates in value,
which could make a very efﬁcient system economi-
cally unsustainable almost overnight.

2. Related Works

There is an abundance of literature published in rela-
tion to distributed ledger technology (DLT) enriched energy
grids. However, we found at least one interesting discrep-
ancy between papers. To begin with, the previous com-
parative works reviewed [2], [3] often showcase no small
number of Ethereum-based solutions for several energy-
related services. In a similar vein, there are also a number
of other such works that describe the different requirements
that each energy use case has, as well as the features and
limitations of many blockchain platforms [4], [5]. Both
sets of papers show that Ethereum is a very popular, and,
conservatively speaking, rather successful for commercial
DLT software in this context.

In contrast with these observations, we found litera-
ture that highlights some of the key drawbacks of using
Ethereum in a smart energy grid context [5], [6]. These
drawbacks include, but are not limited to:

• Ethereum being a public blockchain means that
additional efforts are required to anonymize cus-
tomer data, which often means either using addi-
tional databases or having performance suffer from
computational overheads caused by encryption.
• Ethereum is limited in how many transactions it
can process per second. For small-scale systems this
is not always problematic, but for a provincial or

Our results do showcase some of these drawbacks,
especially when it comes to gas costs, which leaves us
wondering why Ethereum is such a widespread production-
level platform for energy solutions instead of a prototype-
focused one. We suspect that energy costs in countries where
successful instances were deployed may vary considerably
from local energy costs, which has a noticeable impact on
a system’s viability.

On a different note, we also found that, generally speak-
ing, current blockchain-based energy tokenization systems
opt to use fungible tokens [7], [8], [9] instead of non-
fungible ones. From a certiﬁcation point of view, this means
that fungible-token systems can only meaningfully discrim-
inate between different categories of energy (e.g., renewable
vs. non-renewable). However, the functional scope of such
systems is hampered by that design decision, as is discussed
in the Section 3.

3. Background

In this section, we will cover the minimum technical
information required to understand how ZipZap functions.

3.1. Tokenization Standards

Tokenizing goods and services can be achieved with
a wide variety of techniques. When it comes to ZipZap,

Hydro PlantHouseholdTransformerHEMSBatteryInverterSmart Contract(ZipZap)ClientTx DataHeavyweightSmart Contract(ZipZap)ClientHashFeatherweightAny DBZapZapH(Zap)FullTokenSmart Contract(ZipZap)Client1. Tx Data (+ Token)Lightweight / WeightlessAny DBZapH(Zap)3. Full Token2. New/Updated Tokenhowever, it is most important to grasp the difference between
fungible and non-fungible tokens (and their corresponding
tokenization standards). At a glance, fungible tokens are
interchangeable, whereas non-fungible tokens are unique—
generally because the latter have rich metadata appended on
an individual basis so they can be distinguished from one
another.

In the Ethereum network, the primary tokenization stan-
dard for fungible tokens is ERC-20 [10], [11]. With it,
creating alternative currencies is a straightforward process.
Therefore if we wanted to exchange electricity under the
assumption that customers only care about the amount of
energy they get and its relative cost, then ERC-20 is more
than adequate. In order to handle different energy sources,
one could create multiple ERC-20 tokens. For example:
there could be a token for photovoltaic energy, one for fossil-
fuel energy and so on.

Non-fungible tokens can be implemented using ERC-
721. Adopting ERC-721 means that no two tokens are alike
because they can be distinguished from one another based
on the time and place where they were created, among
other factors [12]. This is advantageous for the purposes
of automating accounting tasks or allowing grid members
to exclusively consume locally produced energy. The added
metadata generates countless possibilities for giving users
ﬁner control over their energy production and consumption
habits. Of course, storing and handling the metadata can
quickly ramp up gas costs, which calls for careful consid-
eration.

With these trade-offs in mind, ZipZap uses ERC-1155.
ERC-1155 is a more recent tokenization standard that is
backwards compatible with both ERC-20 and ERC-721 [13],
so that both types of tokens can be used depending on the
relevant use case—hence why we dubbed ZipZap a semi-
fungible system. Versatility is not the only appeal of this
standard: it also allows tokens to be transacted in bulk,
which helps save gas costs tremendously when compared
to ERC-721 [14].

Any smart grid application that wishes to support energy
certiﬁcation (especially if it requires energy traceability)
would almost exclusively consider using a non-fungible tok-
enization standard (such as ERC-721 or ERC-1155) because
it would otherwise be extremely difﬁcult to discriminate
between energy units of different provenance. If, however,
the smart grid application only needs to allow users to
transact energy units among each other with no regards
for certiﬁcation, then a fungible token standards (such as
ERC-20 and ERC-1155) can be more than adequate. Either
way, ERC-1155 gives us the ﬂexibility to implement either
without major code changes. Do note, however,
in
all our prototypes we implemented non-fungible tokens for
the sake of supporting certiﬁcation in the future. That is
also why we place an emphasis on appending metadata to
each token: without it, it would not be possible to have
meaningful records that could be audited for the sake of
certiﬁcation. This metadata is also useful for power grid
maintenance and regulation as it could be used to spot areas
and time periods that place higher/lower stress on the grid,

that

as well as consumer/producer habits.

3.2. Gas Costs

Gas costs are a concept associated with Ethereum-based
blockchain solutions. The complexity of computer programs
is often measured in spatial complexity (the amount of data
storage needed) and computational complexity (the amount
of processing power needed). Since smart contracts are
programs running on a distributed computer, gas costs are
an amalgamation of the computational and spatial costs of
hosting and running the program on the Ethereum network
[15]. Although some gas costs are only paid once (cost of
deployment), ongoing costs (cost of transactions/operations)
play the greatest factor in determining the viability of a
distributed application.

Gas can be thought of as a unit of measurement for com-
putational cost, whereas Ether (ETH) is the currency used
to pay for any given amount of gas. By spending more ETH
per unit of gas, one’s transactions can be prioritized by the
network, which results in a faster execution time (and vice-
versa). Naturally, as both the average transaction fees and
the price of Ether ﬂuctuate, so too does the viablity of any
one particular smart contract. Hence, Ethereum developers
are almost always primarily concerned with minimizing the
gas costs associated with their applications.

3.3. Transactive Energy

The concept of transactive energy refers to a collec-
tion of techniques used to manage energy exchanges. In
contrast with the more centralized, hierarchical model used
by its predecessors, transactive energy grids make full use
of highly distributed networks where each of its members
can directly interact with any other member. Using such
a design provides granular control over each individual
node and increases the volume of information that can be
exploited to regulate the grid exponentially [16]. In order
to ensure informational accuracy and integrity, we believe
that enriching transactive energy systems with blockchain
technologies may be a viable approach for governing self-
sustainable local markets. Solutions like ZipZap could make
energy grids more transparent and reliable, as well as en-
abling greater levels of automation through the use of smart
contracts.

4. Proposed Tokenization Solutions

Four different prototypes were developed for ZipZap, all
with very different performance metrics. These differences
can be entirely attributed to how much data each one of
them stores and/or processes on-chain. The prototypes were
named after weight categories, directly in proportion to their
gas costs, with Heavyweight being the most expensive one
and Weightless being the least expensive one. They are all
homologous in terms of functionality, but vary in terms of
extendability given how vastly they differ in terms of data
handling. We provide Figure 1b for a quick overview of
these differences.

4.1. Zap

A Zap is an ERC-1155 compatible non-fungible token
that represents a given amount of energy. Each Zap has the
following metadata associated with it:

• A history of its geographical location;
• A history of its owner’s accounts;
• The timestamp of its creation;
• The amount of energy it represents (in kWh);
•

Power (in kW);
Its estimated monetary value (in USD);
Its generator’s ID number;

•
• The type of energy source exploited.

•

The most troublesome metadata ﬁelds are the two ﬁrst
ones listed, because they require, at a minimum, ﬁxed-length
arrays. Dynamic arrays and, to a much lesser extent, ﬁxed-
length arrays are quite costly in terms of gas. Heavyweight
was able to save costs in this regard by limiting array size
to 5, since realistically it is extremely unlikely a Zap will
ever be transferred more than once or twice since the energy
losses incurred during transportation and storage are so large
that electricity is most often consumed right away.

Zaps are minted every ﬁve minutes and reﬂect
the
amount of energy created by a generator during that time
window. When a user consumes electricity, they consume
Zaps until they have none left.

4.2. Generalized Walkthrough

Regardless of the prototype considered, ZipZap works
roughly as shown in Figure 2. Zaps are used to track
all energy exchanges throughout the system. Whenever an
operation is conducted on a Zap, its metadata has to be
updated correspondingly. Note that although steps 1-3 take
place multiple times per day, customers are only billed at
the end of each payment cycle, at which point they directly
pay the producer of each Zap they held during that period. If
customers purchased enough Zaps to cover their consump-
tion, then the cycle repeats without any further steps. If,
however, customers did not purchase enough Zaps to cover
their energy consumption, then they are charged for the
difference by the de-facto large-scale provider of the energy
grid, which would then transfer an equivalent number of
Zaps to the customer in question.

It

is also worth noting that

in its current stage,
ZipZap does not allow price-bidding, instead relying on
the price originally set by a Zap’s creator upon minting.
However, such a system is envisioned as part of future
extensions to this research.

4.3. Logistical Considerations

As far as our prototypes are concerned and using Fig-
ure 1a as a reference, network nodes could be hosted by
an energy company’s local transformers and/or by local
libraries, banks or any company willing/responsible enough
to look after them. Energy companies themselves would be

more than happy to assume that responsibility given that,
in the case where a local network does not produce enough
energy to cover its own demand, the energy company in
charge of the node would settle the difference using its own
energy supply and corresponding rates. Note, however, that
balancing generation and consumption is a complex problem
of its own and not the main focus of our research. All the
metadata associated with each token may help form smarter
solutions to this end, but we do not offer an implementation
of such a regulatory system.

4.4. Heavyweight

Heavyweight was the ﬁrst prototype developed. Practi-
cally speaking, all of the metadata for each and every Zap is
stored entirely on-chain. Consequentially, gas costs are quite
steep. Attempts were made early in development to integrate
not only Zaps, but also batteries and generators into the
system, but gas costs quickly resulted in scoping out the
two latter, since the additional spatial requirements and their
impact on gas costs were far too great.

It is also worth noting that this is the only prototype that
deﬁnes a Zap’s metadata using standard Solidity data types
such as ﬁxed-sized integer arrays. All the other prototypes
(including Weightless) store and/or handle each Zap’s meta-
data as a JSON ﬁle that has to be carefully parsed whenever
it is read or modiﬁed. This is a gas-cost saving measure since
computational complexity did not have as great an impact
as spatial complexity in our tests.

4.5. Featherweight

Featherweight is meant to represent the absolute low-
est gas costs one could reasonably expect to get out of
an Ethereum-based system with the same functionality as
Heavyweight. A Zap’s metadata is stored off-chain, with
only the hash of the aforementioned metadata being stored
on-chain. This changes how transfers are handled. Since
the smart contract cannot directly update the metadata after
a transfer takes place,
the new owners of the affected
Zaps have to manually call a “modify Zap” function to
update the metadata hash of the affected Zaps after a trade
takes place. Therefore, the total cost of a transfer is the sum
of the gas costs from the transfer itself and from the “modify
Zap” function.

4.6. Lightweight

Featherweight also stores only Zaps’ metadata. However,
in contract with Lightweight, its functions require that the
full Zap metadata be sent
to the smart contract for all
Zap related operations. The ﬁrst step for any such operation
is verifying the validity of the sent metadata using the
stored hash. Once validated, if a change must take place
in the metadata, the contract parses it and modiﬁes it as
needed before updating the stored hash and sending back the
modiﬁed metadata. Therefore, although it stores the same

Figure 2: ZipZap Walkthrough

amount of information as Featherweight, Lightweight has a
higher degree of automation and is more easily extended to
include more complex operations.

•

•

an analysis of the aforementioned costs.
some basic time-performance metrics and how they
relate to the previous two points.

4.7. Weightless

it

Weightless is based on a different blockchain platform:
Quorum. Since Quorum is a fork of Ethereum, it is capa-
ble of using the same programming language and libraries
as our other prototypes. Thus,
is the closest way to
compare the performance of our Ethereum prototypes to a
gas-free system. In lieu of gas, the costs associated with
running a gas-free system are predominantly dependant on
the number of full nodes used by the network, which in turn
determines hardware purchasing costs, operational costs and
maintenance costs. These cannot be meaningfully estimated
without intending to conduct a full deployment because all
of the aforementioned costs ﬂuctuate violently depending on
legislation, local electricity costs, hardware availability and
many other factors like required fault tolerance and system
size.

Other than having no gas costs, Weightless performs
almost identically to Lightweight because the former was
built using the latter as a basis and, consequentially, oper-
ates virtually in the same way–all functions have the same
complexity, with differences in time performance ultimately
depending on node propagation times. It is worth noting
that, in the interest of fairness, since all Ethereum tests were
conducted on a local test chain (where node propagation is
not a factor), all Quorum tests were conducted on a single
local test node.

5. Results and Discussions

We begin this section by deﬁning our laboratory envi-
ronment. We then provide, for each prototype on Ethereum:

•

their gas costs.

Subsequently, we present gas cost and time performance
comparisons between our Ethereum prototypes, followed by
cost and performance analysis of our Quorum prototype.
Finally, we close the section by discussing the cost viability
of all solutions.

5.1. Setup and Parameters

We decided to use Ethereum as a development plat-
form not only because of its maturity and ﬂexibility, but
also because it has readily available tokenization libraries
(notably from OpenZeppelin) that considerably sped up
prototyping. Thus, the ﬁrst three prototypes were developed
using Solidity. After preliminary gas cost analysis, it was
evident that exploring a gas-less alternative was imperative.
In order to still have access to the same tokenization libraries
and have as close a comparison as possible to our original
set of prototypes, we used Quorum [17], an Ethereum fork,
to implement Weightless.

All prototypes were compiled and tested using Trufﬂe
Suite on a local test network. Hardware-wise, all tests were
ran from an x86 64 Linux machine using version 5.9.16-
1 of Manjaro. The computer in question was built with an
8-core AMD Ryzen 7 3700X CPU and 16GB of RAM.

5.2. Gas Results and Comparison

Heavyweight’s gas performance (as shown in Figure 3a)
deviated from the norm in terms of bulk transformation
savings. Whereas one would expect a constantly decreasing
asymptotic curve (like the ones in Figure 3c), our results
show a sharp decrease in gas costs, followed by a con-
stantly increasing asymptotic curve. This is due to implicit
on-chain operations out-scaling the gas savings associated

Step 1Step 2Step 3Final StepHouse 1 has aphotovoltaic cell array. Itrecords the energy itproduces every 5minutes. At the end of eachinterval, ZipZap checksthe array's energy outputand mints acorresponding Zap. Since House 1 producedthese Zaps, it gets to settheir price accordingly.House 2 wants topurchase some energyfrom House 1.House 1 transfers someZaps to House 2. Energy is redirected fromHouse 1 to House 2 andthe transferred Zaps'metadata is updated.As House 2 spends theenergy it got from House1, the correspondingZaps are consumed(labelled as spent).At the end of the month,the Zaps associated witheach House are counted,and each House is billedcorrespondingly.since the operation is simpliﬁed.

5.3. Lightweight Gas Results

Lightweight

is a happy medium between Feather-
weight and Heavyweight, handling metadata in a similar
manner to most blockchain applications. It is the most viable
of all three Ethereum prototypes, not strictly because of its
gas metrics, which are slightly inferior to those of Feather-
weight, but because its processing of metadata allows it to
be easily extended in terms of functionality. In other words,
when compared to Featherweight, it would be almost trivial
to extend Lightweight to include more features because it
actually reads and modiﬁes the metadata related to each
token even if it only stores the hash. Heavyweight, on the
other hand, has all the information it would need for many
future use cases one could consider, but is limited by the
already disproportionate costs of storing all that data.

5.4. Gas cost comparison on Ethereum

Figure 4 shows how substantial the gas cost reductions
are. All of the graphs shown therein are normalized in
relation to Heavyweight’s results. From these graphs, we can
infer that the gas reductions attributed to storing metadata
off-chain vary between approximately 40 to 30 percent
when it comes to deployment. However, the biggest, most
impressive savings come from recurring operations, where
the cost associated with minting tokens is reduced between
50 and 60 percent and, incredibly, between 97 to 90 percent
when it comes to transferring tokens.

5.5. Time Performance Comparison on Ethereum

ZipZap’s latency requirements and daily rate of oper-
ations are tied to one peculiarity of the power counting
equipment currently installed throughout Quebec: power
readings are recorded on ﬁve minute intervals.

This means that all households must mint and/or transfer
Zaps within that same ﬁve minute window. Assuming every
household in the system generates some form of energy, this
translates to, at a minimum, 288 mintings per household, per
day. This would not be a problem if they could be handled in
bulk, but because they are spaced out in time and on a per-
household basis, it is difﬁcult to make the most out of the gas
savings provided by ERC-1155 tokenization. Regardless,
Figure 5 shows that all three prototypes manage to meet the
ﬁve minute requirement (with massive latency reductions
recorded for both Featherweight and Lightweight) as far
as processing time alone is concerned. It does not take
into account block conﬁrmation time, which would add an
additional 3-5 minute window. In most cases, this would
still result in an acceptable performance, but changes in
network demand are difﬁcult to anticipate and would impact
the conﬁrmation delay. This is actually another advantage
that a Quorum-based implementation would have over an
Ethereum-based one: block conﬁrmation time would be in-
ﬁnitesimal in comparison (milliseconds instead of minutes).

(a)

(b)

(c)

Figure 3: Gas Costs per Prototype

with performing transactions in bulk. Namely, when any
number of Zaps are transferred, the system has to update the
metadata of each of them to reﬂect the change in ownership
and address. This speciﬁc operation carries a computational
cost of O(N ), whereas bulk savings are approximately in
the order of 1/O(log(N )), as shown by the gas costs of
Featherweight and Lightweight.

the main peculiarity of Featherweight

Featherweight is an interesting edge case. As noted in
Section 4.5,
the total cost of a transfer in this context
is the sum of the gas costs from the transfer itself and
from the “modify Zap” function, hence the additional lines
in Figure 3b. Beyond being the lightest Ethereum-based
is that
prototype,
it is the only prototype where minting is more expensive
than transferring. This is because, despite having to add
the costs of modiﬁcation, all transfer-related sub-operations
(like updating a Zap’s information) have to be manually
triggered, so there are far fewer checks, validations and
automatic triggering of functions for every transfer. This
results in considerable gas savings for transferring tokens,

tary costs associated with running Weightless depend on the
number of nodes required by the system, which would be
partially estimated based on:

• The number of households/members that are part of

the smart grid
• The level of fault

tolerance required by law or

otherwise desired by the market

• The costs of renting or owning adequate servers for

each node

Obviously,

the cost of such a system can ﬂuctuate
tremendously, so instead of a thorough estimation, we pro-
pose a simple estimate using the same scale as our tests:
one node servicing one small neighbourhood. Our ﬁrst
assumption is that a Linux VPS with 16 GB of RAM,
320GB of storage and a 4-core processor can be had for
80 USD/month [18], regardless of how many operations
the system performs. We will now contrast that number
with Lightweight’s monthly costs. Let us assume that safe
transfers occur with the same frequency as minting (once per
household, every 5 minutes) and that all such operations are
conducted individually instead of being batched, resulting
in a worst-case scenario. Then, if we have just a measly 2
houses in the neighbourhood and omit deployment costs, we
estimate Lightweight’s monthly costs using Table 1 as:

•

•

•

•

5 × 12 × 24 = 288 mintings and 288 transfers per
house, per day.
288 × 1.03 = 296.64 USD spent in minting fees, per
house, per day
288 × 1.06 = 305.28 USD spent in transfer fees, per
house, per day
296.64 × 30 × 2 + 305.28 × 30 × 2 = 36115.20 USD
spent monthly, system-wide.

Clearly,

there is no comparison whatsoever between
Ethereum and Quorum in terms of gas costs. Having said
that, we nonetheless would like to note that once Ethereum
2.0 is fully released, these metrics may change drastically
[19] and may be worth revisiting.

5.7. Cost Viability Discussion for All Solutions

In this section we make the same assumptions related to
real-world gas costs [20] that we made in Section 5, but we
also assumed that the energy cost for a single kWh hovered
around 30 cents. Under these assumptions, the gas results
obtained for both Lightweight and Featherweight were pro-
cessed to produce Table 1. The table shows that despite
our promising results, even the lightest of our Ethereum-
based prototypes can only be economically viable if the
amount of energy stored by each Zap exceeds one kWh
by several orders of magnitude. This is of course hardly
reasonable since each generator in the system must emit
a Zap every ﬁve minutes as per our requirements, and
we are dealing with small generators that supply a single-
household instead of provincial hydroelectric power plants.
One way to sidestep these costs while still using Ethereum as

(a)

(b)

(c)

Figure 4: Gas Cost Comparison

5.6. Weightless Cost and Performance Analysis

In terms of gas units, Weightless has the same perfor-
mance as Lightweight (see Figure 3c). Incidentally, Weight-
less also has the same time performance as Lightweight (see
Figure 5). This is because the underlying code-base for both
of these prototypes is virtually identical, so all operations
are essentially the same. This was done in an effort to
provide as close a comparison as possible between the two
blockchain platforms considered. As mentioned previously,
Weightless does not incur gas costs (even though technically
it does spend gas units), because we shoulder the costs of
running the Quorum network ourselves. Instead, the mone-

(a)

(c)

(b)

(d)

Figure 5: Time Performance Comparison

TABLE 1: Cost Analysis of ZipZap’s Featherweight and Lightweight Versions

Prototype

Operations

Deployment

Minting

Safe Transfer

Batch Minting (10
Tokens)

Batch Transfer (10
Tokens)

Featherweight

Lightweight

Gas Units Used
Fast Cost (Gwei)
Fast Cost (USD)
Standard Cost
(Gwei)
Standard Cost
(USD)

Gas Units Used
Fast Cost (Gwei)
Fast Cost (USD)
Standard Cost
(Gwei)
Standard Cost
(USD)

3702977
111089310
26.66
96277402

23.11

4592780
137783400
33.07
119412280

28.66

158483
4754490
1.14
4120558

0.99

165052
4951560
1.19
4291352

1.03

71456
2143680
0.51
1857856

0.45

169077
5072310
1.22
4396002

1.06

1053673
31610190
7.59
12212486

469711
14091330
3.38
12212486

2.93

2.93

1419443
42583290
10.22
37974170

1460545
43816350
10.52
37974170

9.11

9.11

a development platform would be to create a future-market-
based implementation so that Zaps can be transferred in bulk
once or twice per day. Regardless of any such optimizations,
at this point it seems obvious that Quorum is much better
suited for smart grids than Ethereum.

5.8. Future Work

Whereas DLTs are almost exclusively used in conjunc-
tion with other types of databases, we decided to explore
the performance of a fully on-chain system. Common sense
dictates that on-chain systems are more expensive from a gas
point of view, but that does not mean that one such system
is altogether not viable. Previous research has shown at least
one combination of circumstances where an on-chain system

is comparable in term of ongoing monetary expenses to a
currently used system and boasts signiﬁcant functional and
security advantages [14]. Therefore, we encourage others to
explore different contexts where on-chain systems may also
be viable.

Developing a system similar to ZipZap using a different
tokenization standard is another attractive lead. For example,
an ERC-998 solution would have a signiﬁcantly different
architecture and gas performance when compared to ours
due to the former’s capability for composing tokens, since
generators and energy tokens are logically connected in a
composition-like manner. It may thus be possible to not only
render the system more efﬁcient, but to also increase its
scope by considering other tokenization standards.

Similarly,

it may be worthwhile to explore other

P. Ledger, “Power ledger white paper,” Power Ledger Pty Ltd, Aus-
tralia, White paper, vol. 8, 2017.

S. B. Singapore, “An introduction to solar bankers singapore,”
http://solarbankers.com/wp-content/uploads/2017/08/Solarbankers
whitepaper Vers1.pdf, 2017, accessed on 2021-06-15.

[9] M. Mihaylov, S. Jurado, N. Avellana, K. Van Moffaert, I. M. de Abril,
and A. Now´e, “Nrgcoin: Virtual currency for trading of renewable
energy in smart grids,” in 11th International conference on the
European energy market (EEM14).

IEEE, 2014, pp. 1–6.

[10] F. Vogelsteller and V. Buterin, “Erc-20 token standard — ethereum
improvement proposals,” Retrieved September, vol. 4, p. 2019, 2015.

[11] Etherscan, “Token tracker — etherscan,” https://etherscan.io/tokens,

June 2020, accessed on 2020-07-02.

[12] W. Entriken, D. Shirley, J. Evans, and N. Sachs, “Eip 721: Erc-721
non-fungible token standard,” https://eips.ethereum.org/EIPS/eip-721,
January 2018, accessed on 2020-07-02.

[13] W. Radomski, A. Cooke, P. Castonguay, J. Therien, E. Binet, and
R. Sandford, “Eip 1155: Erc-1155 multi token standard,” https://eips.
ethereum.org/EIPS/eip-1155, June 2018, accessed on 2020-07-02.

[14] M. Munoz, A. Shahzad, K. Zhang, and M. Ouhimmou, “Loglog: A
blockchain solution for tracking and certifying wood volumes,” IEEE
ICBC, 2021.

[15] G. Wood et al., “Ethereum: A secure decentralised generalised trans-
action ledger,” Ethereum project yellow paper, vol. 151, no. 2014,
pp. 1–32, 2014.

[16] S. Katipamula, D. P. Chassin, D. D. Hatley, R. G. Pratt, and D. J.
Hammerstrom, “Transactive Controls: A Market-Based GridWiseTM
Controls for Building Systems,” Pac. Northwest Nat. Lab., Tech. Rep.
PNNL-15921, 191007813, Jul. 2006.

[17] J. M. Chase, “A permissioned implementation of ethereum,” https:
//github.com/jpmorganchase/quorum, 2018, accessed on 2020-07-02.

[18] S. Nijim, “Learning amazon lightsail,” 2021. [Online]. Available:

https://aws.amazon.com/lightsail/pricing/

[19] E. Community, “The eth2 upgrades,” 2021. [Online]. Available:

https://ethereum.org/en/eth2/

[20] E. G. Station, “Eth gas station — consumer oriented metrics for the
ethereum gas market,” https://ethgasstation.info/index.php, June 2020,
accessed on 2020-07-02.

blockchain platforms beyond Ethereum and its many forks
to better measure the impact that different network charac-
teristics have on homologous distributed applications.

[7]

[8]

6. Conclusion

We began work on this paper in hopes of increasing
the transparency, informational integrity and degree of au-
tomatization within smart energy grids by developing a
blockchain-based solution that would seamlessly integrate
with them. Developing a fully on-chain solution proved to
be a difﬁcult task given the current state of DLTs.

Despite our most efﬁcient Ethereum-based prototype
reducing baseline gas costs by more than 97%, our results
demonstrate that in order for an Ethereum-based system to
be a viable solution for energy tokenization, time-related re-
quirements must be relaxed either by increasing the allowed
latency per operation, or by reducing the number of daily
operations. On a similar note, although Ethereum-based
versions of ZipZap are currently not economically viable
at a small scale, large-scale energy suppliers may still ﬁnd
the solution very attractive due to the much larger energy
quantities generated and transferred at any time interval.
This is a very interesting result that stands in contrast with
the overwhelming popularity of Ethereum as a development
platform for similar applications [2], [3].

On the other hand, gas-less blockchain systems such as
the one used by Weightless are more attractive to small scale
use cases and can in fact be commercially viable depending
on how fault-tolerant the network needs to be. Naturally,
maintaining more nodes is the price to pay for stability,
but those costs could potentially be offset by incentivizing
network members to maintain their own nodes, depending
on the business model used.

References

[1]

I. Corporation, “About
downloads/cas/8QABQBDR, Feb 2020, accessed on 2020-07-02.

ibm food trust,” https://www.ibm.com/

[2] M. Kuzlu, S. Sarp, M. Pipattanasomporn, and U. Cali, “Realizing the
potential of blockchain technology in smart grid applications,” 2020
IEEE Power and Energy Society Innovative Smart Grid Technologies
Conference (ISGT), 2020.

[3] N. U. Hassan, C. Yuen, and D. Niyato, “Blockchain technologies
for smart energy systems: Fundamentals, challenges, and solutions,”
IEEE Industrial Electronics Magazine, vol. 13, no. 4, pp. 106–118,
2019.

[4] M. B. Mollah, J. Zhao, D. Niyato, Y. L. Guan, C. Yuen, S. Sun, K.-
Y. Lam, and L. H. Koh, “Blockchain for the internet of vehicles
transportation systems: A survey,” Internet of
towards intelligent
Things Journal IEEE, vol. 8, no. 6, pp. pp. 4157–4185, 2021.

[5] N. U. Hassan, C. Yuen,

for

and D. Niyato,
energy systems: Fundamentals,

“Blockchain
chal-
smart
technologies
IEEE Industrial Electronics Mag-
solutions,”
and
lenges,
azine,
no.
vol.
[On-
4,
106–118,
13,
line].
https://researchportal.hw.ac.uk/en/publications/
Available:
blockchain-technology-in-the-energy-sector-a-systematic-review-of

2019.

pp.

[6] A. A. G. Agung and R. Handayani, “Blockchain for smart grid,”
Journal of King Saud University - Computer and Information
Sciences, 2020. [Online]. Available: https://www.sciencedirect.com/
science/article/pii/S1319157819309000

