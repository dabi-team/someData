Automatic Fair Exchanges

Lorenzo Ceragioli∗, Letterio Galletta†, Pierpaolo Degano∗, and Luca Vigan`o‡
∗ Universit`a di Pisa, Italy
† IMT School for Advanced Studies Lucca, Italy
‡ Department of Informatics, King’s College London, UK

2
2
0
2

l
u
J

5
2

]

R
C
.
s
c
[

1
v
6
2
3
2
1
.
7
0
2
2
:
v
i
X
r
a

Abstract—In a decentralized environment, exchanging re-
sources requires users to bargain until an agreement is found.
Moreover, human agreements involve a combination of collabora-
tive and selﬁsh behavior and often induce circularity, complicat-
ing the evaluation of exchange requests. We introduce MuAC, a
policy language that allows users to state in isolation under which
conditions they are open to grant their resources and what they
require in return. In MuAC, exchange requests are evaluated
automatically with the guarantee that the only exchanges that
will take place are those that mutually satisfy users’ conditions.
Moreover, MuAC can be used as an enforcement mechanism to
prevent users from cheating. As a proof of concept, we implement
a blockchain smart contract that allows users to exchange their
non-fungible tokens.

Index Terms—conﬁguration language, non-standard logic, lin-

ear logic, sharing economy, smart contract

I. INTRODUCTION

Exchanges of resources normally occur in many contexts,
and human decisions are heavily based on reciprocity, as it is
common for human interactions [1]. As an example, consider
the home exchange, a common form of lodging in which two
parties agree to swap homestays for a set period of time. Say
Alice offers to exchange her house in the countryside with
Bob who owns a house downtown. The decision is made by
the two users based both on the properties of their houses
and on their preferences. However, more involved transactions
may occur. Consider, e.g., Bob’s friend Carl, who owns a ﬂat
downtown and would like to spend a week in the countryside
at Alice’s house. However, Alice does not like staying in a
ﬂat, so there is no direct agreement with Carl, but Bob can
generously accept to “pay for Carl”, giving Alice his house in
place of Carl’s ﬂat.

This example illustrates how, when some user requests the
resource of another, the two users, and possibly more, can
interact to bargain until an agreement is found. This interaction
requires users to be online at the same time and to spend time
bargaining, which is hard in a distributed environment. One
way to tackle this problem is to let users state in isolation
the policies that specify the resources they are willing to offer
together with those they require in return.

For example, the policies of Alice, Bob and Carl may be

as follows:
Alice: I will give my countryside house to get one downtown
Bob: I will give my house downtown to get one in the

countryside for me or a friend of mine

Carl: I will give my ﬂat downtown to get a house in the

countryside

Each user states in isolation her own policy that only
controls the access to her resources. Clearly, the policies in
force in a community impact on each of the participants. Thus,
their composition has to be considered to verify whether an
exchange request violates no policy and can thus be served.
Evaluating requests may induce some circularity. For instance,
Alice agrees to grant her house if Bob does the same, and
vice versa. Nevertheless, the agreement trivially satisﬁes the
policies of both Alice and Bob. Circularity may also have
involved forms when more users come into play.

Here, we introduce MuAC, a policy language that allows
users to state under which conditions they are open to grant
their resources to others and what they require in return.
MuAC is equipped with a formal semantics in terms of a
transition system. Transitions change the ownership of the
resources in the system, but one has to check that a resource
exchange obeys all the policies of the users involved, and for
that a centralized authority is on demand. Rather than directly
relying on such a notion of exchange agreement, we compile
MuAC policies to equivalent logical theories and compute
agreements as proofs.

Since classical logic is not adequate to express the circular
agreements that are typical of human contracts, we start from
contractual logic [2] and build on [3]. For that, we introduce a
non-standard mixed logic composed of a linear fragment (for
reasoning about resources) and a non-linear one (for classical
conditions, like relationships and attributes).

MuAC and its logic offer the basis of an enforcement mech-
anism that prevents users from cheating. An implementation as
a blockchain smart contract lets users deﬁne their policies and
to exchange resources like non-fungible tokens (NFTs) with
granted mutual advantage. The usage of an off-chain client
reduces the on-chain cost to be linear.

Related work: Mutuality plays a role in access control
for cooperative systems, in particular in discretionary access
control [4]. In this case, a main issue is the combination
of individual policies. To the best of our knowledge, no
proposals address mutuality, but only focus on the resolution
of conﬂicts [5], [6], [7]. A remarkable exception is [8] that
permits deﬁning mutual access control policies. A new grant
is introduced, called mutual, besides the usual accept and deny.
A ﬁrst difference with our proposal is that in [8] mutuality is
hard-coded in the access control mechanisms, and is not user-
deﬁned. In addition, MuAC considers also involved forms of
agreements with many users, and targets ﬁnite resources. In
our previous work [9] we proposed a policy language to state

 
 
 
 
 
 
conditions about what a user receives in return for allowing an
access. Differently from this paper, in [9] we did not consider
ﬁnite resource exchanges but only data sharing, like, e.g., on
social networks, and we proposed neither an implementation
nor a formal semantics.

Mutuality plays a main role also in trust negotiations that
permit a safe interaction between two parties that do not trust
each other [10]. Here too, each party deﬁnes an individual
policy specifying the conditions that the other party must
satisfy to obtain credentials. Logical languages for specifying
trust policies have been proposed, e.g., Cassandra [11] and
SecPal4P [12], but these are based on classical logic, and thus
circular conditions do not lead to an agreement.

II. DEFINING EXCHANGE POLICIES

First, we present the notion of exchange environment to
model systems where users want to share resources; then, we
introduce the syntax of MuAC and we sketch its semantics.

Exchange Environment: We assume as ﬁxed a set R of
resources (ranged over by r, r′, r′′) and a set U of users (ranged
over by u, u′, u′′). An exchange environment is a transition
system with states S associating users with the (multiset of)
resources they own, and transitions S → S′ representing
exchanges that change the ownership of resources. A computa-
tion from the state S to the state S′ is the reﬂexive, transitive
closure of →, denoted by S →∗ S′.

MuAC policy language: Let U be the set of user vari-
ables, ranged over by u, u′, u′′, ui, with the distinguished
element Me, and let P be the set of predicate symbols, ranged
over by p, p′, p′′.

Deﬁnition 1 (MuAC policies). The MuAC policy Pu of the
user u is a set of rules ν given by the following grammar:

ν ::= Gives(Me, r, u) :- GiveLs with P
P ::= p(u1, . . . , un) P | ǫ
GiveLs ::= Gives(u, r, u′) GiveLs | ǫ

Intuitively, Me refers to the policy owner, whereas all other
user variables are universally quantiﬁed. A rule states that the
policy owner is willing to give a resource r to the requester u
if a list of properties P holds (e.g., friendship), provided that
the exchanges speciﬁed in GivesLs also take place.
For example, the MuAC policy PAlice of Alice is

Gives(Me, countryside_house, u) :-

Gives(u’, downtown_house, Me)

the MuAC policy PBob of Bob is

Gives(Me, downtown_house, u) :-

Gives(u’, countryside_house, u’’)

with FriendOrSame(Me, u’’)

and the MuAC policy PCarl of Carl is

Gives(Me, downtown_flat, u) :-

Gives(u’, countryside_house, Me)

The semantics JPuK of a MuAC policy Pu is the set of
computations that are accepted by the user u, where we assume
a context Γ to interpret the predicate symbols (e.g., to store that

Bob and Carl are friends). We ﬁlter the exchange environments
computations taking only the fair ones, i.e., the ones that are
accepted by all the users.

For example, assuming S0 to be the initial state where users
are associated with their own houses, and Su,u′ to be a state
in which a house exchange is performed between u and u′,
one can see that S0 →∗ SAlice,Bob is fair, whereas S0 →∗
SAlice,Carl is not accepted by Alice’s policy.

III. ENFORCING MUAC

Computing Fair Computations: We deﬁne the decidable
non-standard logic MuACL, and prove that it precisely char-
acterizes MuAC’s semantics. A MuACL theory is a multiset of
both linear and non-linear formulas. Moreover, the new linear
operator ⊸⊸ is added, called linear contractual implication,
inspired by PCL [2]. Roughly, a formula φ ⊸⊸ φ′ states that φ′
will eventually hold provided that φ is true. Differently from
common implication, φ ⊸⊸ φ′, φ′ ⊸⊸ φ ⊢ φ ⊗ φ′ (⊗ is the
standard multiplicative linear conjunction). This new operator
resolves circularity that often occurs in human reasoning.

We compile policies Pu into MuACL theories. Roughly,
each rule Gives(Me, r, u) :- GiveLs with P is translated
as ψ → G(φ ⊸⊸ φ′) where ψ depends on P , φ on GiveLs,
and φ′ on Gives(Me, r, u). An encoding is also given for the
M is correct,
context Γ and for states S. The compilation L
i.e., it characterizes MuAC fair computations:

Theorem 1. Given {Pu}u∈U, Γ, S and S′,

∀u ∈ U. S →∗ S′ ∈ JPuK iff [

L Pu M, L Γ M, L S M ⊢ L S′ M

u∈U

MuAC Smart Contract: We implement the MuAC-based
smart contract MuACSC for exchanging NFTs, associated with
users in the contract’s internal state. MuACSC serves as a
wallet: users can upload or withdraw NFTs, and can deﬁne
their MuAC policies. MuACSC supplies users a requested
NFT, managing the needed fair exchanges. Assume, e.g., that
Alice wants an NFT B. An off-chain client gathers users
policies and computes the MuACL proof certifying that a
fair computation exists from the current state to one where B
belongs to Alice. The client sends the proof, if any, to the smart
contract requesting the needed exchanges. MuACSC checks
the proof validity and updates the current state accordingly.
Note that
the client performs the most expensive part of
the computation, while only a small veriﬁcation is on-chain.
Reducing the computation cost of the contract is critical,
because in most blockchains every executed instruction is
payed by the requester using an in-block currency.

Future Work: We plan to extend MuAC to express policy
updates like “I will start trading r for r′ if you start trading
r′′ for r′′′.” Another extension is to include negation, allowing
the deﬁnition of conﬂicts of interest and embargo policies like
“I will give you r if you give nothing to Carl.”

REFERENCES

[1] E. Fehr, U. Fischbacher,

“Strong reciprocity,
human cooperation, and the enforcement of social norms,” Human
Nature, vol. 13, no. 1, pp. 1–25, Mar 2002. [Online]. Available:
https://doi.org/10.1007/s12110-002-1012-7

and S. G¨achter,

[2] M. Bartoletti and R. Zunino, “A calculus of contracting processes,” in
Proceedings of the 25th Annual IEEE Symposium on Logic in Computer
Science, LICS 2010.

IEEE Computer Society, 2010, pp. 332–341.

[3] P. N. Benton, “A mixed linear and non-linear logic: Proofs, terms and
models,” in Computer Science Logic, L. Pacholski and J. Tiuryn, Eds.
Berlin, Heidelberg: Springer Berlin Heidelberg, 1995, pp. 121–135.
[4] W. Stallings and L. Brown, Computer Security: Principles and Practice,
3rd ed. Upper Saddle River, NJ, USA: Prentice Hall Press, 2014.
[5] G. Bruns and M. Huth, “Access control via belnap logic: Intuitive,
expressive, and analyzable policy composition,” ACM Trans. Inf. Syst.
Secur., vol. 14, no. 1, pp. 9:1–9:27, Jun. 2011. [Online]. Available:
http://doi.acm.org/10.1145/1952982.1952991

[6] S. Damen, J. den Hartog, and N. Zannone, “Collac: Collaborative
access control,” in 2014 International Conference on Collaboration
Technologies and Systems, CTS 2014, Minneapolis, MN, USA, May 19-
23, 2014, 2014, pp. 142–149.

[7] F. Paci, A. C. Squicciarini, and N. Zannone, “Survey on access
control for community-centered collaborative systems,” ACM Comput.
Surv., vol. 51, no. 1, pp. 6:1–6:38, 2018.
[Online]. Available:
https://doi.org/10.1145/3146025

[8] G. Suntaxi, A. A. El Ghazi, and K. B¨ohm, “Mutual authorizations:
Semantics and integration issues,” in Proceedings of the 24th ACM
Symposium on Access Control Models and Technologies, ser. SACMAT
’19. New York, NY, USA: ACM, 2019, pp. 213–218.
[Online].
Available: http://doi.acm.org/10.1145/3322431.3325415

[9] L. Ceragioli, P. Degano, and L. Galletta, “Muac: Access control
language for mutual beneﬁts,” in Proceedings of the Fourth Italian
Conference on Cyber Security, Ancona, Italy, February 4th to 7th,
2020, ser. CEUR Workshop Proceedings. CEUR-WS.org, 2020, pp.
119–127. [Online]. Available: http://ceur-ws.org/Vol-2597/paper-11.pdf
[10] M. Kol´ar, M. C. F. Gago, and J. L´opez, “Policy languages and their suit-
ability for trust negotiation,” in Data and Applications Security and Pri-
vacy XXXII - 32nd Annual IFIP WG 11.3 Conference,Proceedings, ser.
LNCS, F. Kerschbaum and S. Paraboschi, Eds., vol. 10980. Springer,
2018, pp. 69–84.

[11] M. Y. Becker and P. Sewell, “Cassandra: Distributed access control
policies with tunable expressiveness,” in 5th IEEE International Work-
shop on Policies for Distributed Systems and Networks (POLICY 2004).
IEEE Computer Society, 2004, pp. 159–168.

[12] M. Y. Becker, A. Malkis, and L. Bussard, “A framework for privacy
preferences and data-handling policies,” Microsoft Research, Tech. Rep.
MSR–TR–2009–128, September 2009.

