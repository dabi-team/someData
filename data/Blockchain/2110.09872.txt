1
2
0
2

t
c
O
8
1

]

H
O
.
s
c
[

1
v
2
7
8
9
0
.
0
1
1
2
:
v
i
X
r
a

Presentation and Publication: Loss and Slippage
in Networks of Automated Market Makers

Daniel Engel !
Computer Science Department, Brown University, Providence, RI USA

Maurice Herlihy ! (cid:18)
Computer Science Department, Brown University, Providence, RI USA

Abstract

Automated market makers (AMMs) are smart contracts that automatically trade electronic assets
according to a mathematical formula. This paper investigates how an AMM’s formula affects the
interests of liquidity providers, who endow the AMM with assets, and traders, who exchange one
asset for another at the AMM’s rates. Linear slippage measures how a trade’s size affects the trader’s
return, angular slippage measures how a trade’s size affects the subsequent market price, divergence
loss measures the opportunity cost of providers’ investments, and load balances the costs to traders
and providers. We give formal definitions for these costs, show that they obey certain conservation
laws: these costs can be shifted around but never fully eliminated. We analyze how these costs
behave under composition, when simple individual AMMs are linked to form more complex networks
of AMMs.

2012 ACM Subject Classification Author: Please fill in 1 or more \ccsdesc macro

Keywords and phrases Author: Please fill in \keywords macro

Digital Object Identifier 10.4230/OASIcs...

Funding Daniel Engel: This research was supported by NSF grant 1917990
Maurice Herlihy: This research was supported by NSF grant 1917990

1

Introduction

An automated market maker (AMM) is an automaton that trades electronic assets according
to a fixed formula. Unlike traditional “order book” traders, AMMs have custody of their own
asset pools, so they can trade directly with clients, and do not need to match up (and wait for)
compatible buyers and sellers. Today, AMMs such as Uniswap [5], Bancor [17], and others
have become one of the most popular ways to trade electronic assets such as cryptocurrencies,
electronic securities, or tokens. An AMM is typically implemented as a smart contract on
a blockchain such as Ethereum [13]. Like circuit elements, AMMs can be composed into
networks. They can be composed sequentially, where the output of one AMM’s trade is fed
to another, and they can be composed in parallel, where a trade is split between two AMMs
with different formulas. Compositions of AMMs can themselves be treated as AMMs [12].
This paper makes the following contributions. AMMs have well-known inherent costs. One
such cost is slippage, where a large trade increases the price of the asset being purchased, both
for the trader making the trade, and for later traders. We give two alternative mathematical
definitions of slippage expressed directly in terms of the AMM’s formula: linear slippage
focuses on the buyer’s price difference, and angular slippage characterizes how that buyer
affects prices for later buyers.

Another cost is divergence loss (sometimes called impermanent loss), where the value of
the liquidity providers’ investments end up worth less than if the invested assets had been
left untouched. We give a precise mathematical definition of divergence loss, expressed in
directly terms of the AMM’s formula,

© Author: Please provide a copyright holder;
licensed under Creative Commons License CC-BY 4.0

OpenAccess Series in Informatics
Schloss Dagstuhl – Leibniz-Zentrum für Informatik, Dagstuhl Publishing, Germany

 
 
 
 
 
 
XX:2

Presentation and Publication: Loss and Slippage in Networks of Automated Market Makers

We introduce a new figure of merit, called load, that measures how costs are balanced

among parties on different sides of a trade.

We show how these costs can be analyzed in either worst-case or in expectation. We
identify various conservation laws that govern these costs: they can be shifted, but never
fully eliminated. We characterize how these costs behave under sequential and parallel
composition, showing how to compute these costs for networks of AMMs, not just individual
AMMs. Finally, we propose novel AMM designs capable of adapting to changes in these
costs.

The paper is organized as follows. Section 2 describes our model and terminology.
Section 3 introduces our cost measures and their conservation laws. Section 4 shows how
these measure are affected by sequential composition, where the output of one AMM becomes
the input of another AMM. Section 4 shows how these measure are affected by parallel
composition, where traders split their trade between two AMMs that trade the same assets
but according to different formulas. Section 6 surveys some simple adaptive strategies that
can mitigate the costs’ conservation laws. Section 7 surveys related work.

Some of our numbered equations require long, mostly routine derivations which have
been moved to the appendix to save space. A few of the longer proofs have also been moved
to the appendix.

2 Definitions

We use bold face for vectors (x) and italics for scalars (x). Variables, scalar or vector, are
usually taken from the end of the alphabet (x, y, z), and constants from the beginning (a, b, c).
We use “:=” for definitions and “=” for equality. A function f : R → R is strictly convex if
for all t ∈ (0, 1) and distinct x, x′ ∈ R, f (tx + (1 − t)x′) < tf (x) + (1 − t)f (x′). Any tangent
line for a strictly convex function lies below its curve.

Here is an informal example of a constant-product AMM [20]. An AMM in state (x, y) has
custody x units of asset X, and y units of asset Y , subject to the invariant that the product
xy = c, for x, y > 0 and some constant c > 0. The AMM’s states thus lie on the hyperbolic
curve xy = c. If a trader transfers δX units of X to the AMM, the AMM will return δY
units of Y to the trader, where δY is chosen to preserve the invariant (x + δX )(y − δY ) = c.
Formally, the state of an AMM that trades assets X and Y is given by a pair (x, y) ∈ R2
>0,
where x is the number of X units in the AMM’s pool, and y the number of Y units. The state
space is given by a curve (x, f (x)), where f : R>0 → R>0. Except when noted, the AMMs
considered here satisfy the boundary conditions limx→0 f (x) = ∞ and limx→∞ f (x) = 0,
meaning that traders cannot exhaust either pool of assets. The function f is subject to
further restrictions discussed later.

There are two kinds of participants in decentralized finance. (1) Traders transfer assets to
AMMs, and receive assets back. Traders can compose AMMs into networks to conduct more
complicated trades involving multiple kinds of assets. (2) Liquidity providers (or “providers”)
fund the AMMs by lending assets, and receiving shares, fees, or other profits. Traders and
providers play a kind of alternating game: traders modify AMM states by trading one asset
for another, and providers can respond by adding or removing assets, reinvesting fees, or
adjusting other AMM properties.

AMM typically charge fees for trades. For example, Uniswap v1 diverts 0.3% of the assets
returned by each trade back into that asset’s pool. Although there is no formal difficulty
including fees in our analysis, we neglect them here because they have little impact on costs:
fees slightly reduce both slippage costs for traders and divergence loss for providers.

D. Engel and M. Herlihy

XX:3

A valuation v ∈ (0, 1) assigns relative values to an AMM’s assets: v units of X are deemed
worth (1 − v) units of Y . At valuation v, a trader who moves an AMM from state (x, f (x))
to (x′, f (x′)) makes a profit if v(x − x′) + (1 − v)(f (x) − f (x′)) is positive, and otherwise
incurs a loss. The trader’s profit is maximal precisely when vx′ + (1 − v)f (x′) is minimal.
We assume that at any time, there is a single market valuation accepted by most traders.
An arbitrage trade is one in which a trader makes a profit by moving an AMM from a state
reflecting a prior market valuation to a distinct state reflecting the current market valuation.
A stable point for an AMM A and valuation v is a point (x, f (x)) that minimizes
vx + (1 − v)f (x). If v is the market valuation, then any trader can make an arbitrage profit
by moving the AMM from any state to a stable state, and no trader can make a profit by
moving the AMM out of a stable state. Valuations, stable points, and exchange rates are
related. If (x, f (x)) is the stable point for valuation v, then

df (x)
dx

= −

v
1 − v

.

(1)

Following Engel and Herlihy [12], we require the AMM function f to satisfy certain
reasonable properties, expressed here as axioms. A detailed discussion and justification for
each axiom appears elsewhere [12].

Every AMM state should define a unique rate of exchange between its assets, and trades

should change that rate gradually rather than abruptly.

▶ Axiom 1 (Continuity). The function f is strictly decreasing and (at least) twice-differentiable.

An AMM must be able to adapt to any market conditions. The exchange rate of asset Y

in units of X at state (x, f (x)) is −f ′(x), the negative of the curve’s slope at that point.

▶ Axiom 2 (Expressivity). The exchange rate −f ′(x) can assume every value in the open
interval (0, ∞).

Slippage should work to the disadvantage of the trader. To prevent runaway trading,

buying more of asset X should make X more expensive, not less.

▶ Axiom 3 (Convexity). For every AMM A := (x, f (x)), f is strictly convex.

It can be shown [12] that for any AMM satisfying these axioms, every valuation has a

unique stable state.

▶ Theorem 1 (Stability). The function

ϕ(v) = f ′−1

(cid:19)

(cid:18)

−

v
1 − v

(2)

is a homeomorphism ϕ : (0, 1) → R>0 that carries each valuation v ∈ (0, 1) to the unique
stable state x that minimizes vx + (1 − v)f (x).

For example, the stable state map for the constant-product AMM (x, 1/x) is ϕ(v) =
Sometimes it is convenient to express ϕ in vector form as Φ : (0, 1) → R2
(ϕ(v), f (ϕ(v))). We will sometimes use ψ : R>0 → (0, 1), the inverse function of ϕ:

.
>0, where Φ(v) :=

q (1−v)
v

ψ(x) = −

f ′(x)
1 − f ′(x)

.

The vector form is Ψ(x) := (ψ(x), 1 − ψ(x)).

(3)

XX:4

Presentation and Publication: Loss and Slippage in Networks of Automated Market Makers

Figure 1 Balanced Capitalization of AMMs (x, 1/x) (symmetric curve, blue) and (x, 1/x2)

(asymmetric curve, yellow) at stable points

Most of the properties of interest in this paper can be expressed either in the asset domain,

as functions of x and f (x), or in the valuation domain, as functions of v and 1 − v.

These definitions extend naturally to AMMs that trade more than two assets. Many (but
not all) if the results presented below also generalize, but for brevity we focus on AMMs
that trade between two assets.

3

Properties of Interest

3.1 AMM Capitalization

Let (v, 1 − v) be a valuation with stable point (x, f (x)). What is a useful way to define the
capitalization (total value) of an AMM’s holdings? It may be appealing to pick one asset to
act as numéraire, computing the AMM’s capitalization at point (x, f (x)) in terms of that
asset alone:

numcapX (v; A) := ϕ(v) +

(cid:19)

(cid:18) 1 − v
v

f (ϕ(v)).

For example, the numéraire capitalization of the constant-product AMM at the stable point

for valuaton v is 2

q 1

v − 1.

Unfortunately, this notion of capitalization can lead to counter-intuitive results if the
numéraire asset becomes volatile. As the value of the numéraire X tends toward zero,
“bad money drives out good”, and arbitrage traders will replace more valuable Y with less
valuable X. As the AMM fills up with increasingly worthless units of X, its numéraire
capitalization grows without bound, so an AMM whose holdings have become worthless has
infinite numéraire capitalization.

A more robust approach is to choose a formula that balances the asset classes in proportion
to their relative valuations. Define the (balanced) capitalization at (x, f (x)) to be the sum of
the two asset pools weighted by their relative values. Let v = (v, 1 − v) and x = (x, f (x)).

cap(x, v; A) := vx + (1 − v)f (x) = v · x.

(4)

If v is the current market valuation, then A will usually be in the corresponding stable state
Φ(v) = (ϕ(v), f (ϕ(v)), yielding

cap(v; A) := cap(ϕ(v), v; A) = v · Φ(v).

(5)

0.20.40.60.81.00.20.40.60.81.0D. Engel and M. Herlihy

XX:5

For example, AMMs A := (x, 1/x) and B := (x, 1/x2) have capitalization at their stable

points:

cap(v; (x, 1/x)) = 2pv(1 − v),

cap(v; (x, 1/x2)) =

q 1

3v 3

v − 1

22/3

.

See Figure 1. Both have minimum capitalization 0 at v = 0 and v = 1, where one asset is
worthless, and maximal capitalizations at respective valuations v = 1/2 and v = 2/3.

▶ Theorem 2. An AMM’s capitalization is maximal at the fixed-point ϕ(v) = f (ϕ(v)), where
the amounts of X and Y are equal.

However, Figure 1 shows that the valuation that maximizes an AMM’s capitalization
2 . An AMM is symmetric if f = f −1. (Both Uniswap and Curve use

is not necessarily 1
symmetric curves.)

▶ Lemma 3. The stable state map for any symmetric AMM satisfies f (ϕ(v)) = ϕ(1 − v)

▶ Theorem 4. Any symmetric AMM has maximum capitalization at v = ( 1

2 , 1

2 ).

3.2 Divergence Loss

Consider the following simple game. A liquidity provider funds an AMM A, leaving it in the
stable state x for the current market valuation v. Suppose the market valuation changes
from v to v′, and a trader submits an arbitrage trade that would take A to the stable state
x′ for the new valuation. The provider has a choice: (1) immediately withdraw its liquidity
from A instead of accepting the trade, or (2) accept the trade. It is not hard to see that
the provider should always choose to withdraw. The shift to the new valuation changes the
AMM’s capitalization. If x is the stable state for v, then it cannot be stable for v′, so the
difference between the capitalizations v′ · x − v′ · x′ must be positive, so the arbitrage trader
would profit at the provider’s expense. (In practice, a provider would take into account the
value of current and future fees in making this decision.)

Define the divergence loss for an AMM A = (x, f (x)) to be

divloss(v, v′; A) := v′ · Φ(v) − v′ · Φ(v′)

= v′ϕ(v) + (1 − v′)f (ϕ(v)) − (v′ϕ(v′) + (1 − v′)f (ϕ(v′)))

where Φ(v, 1 − v) = (ϕ(v), f (ϕ(v))). Sometimes it is useful to express divergence loss in the
trade domain, as a function of liquidity pool size instead of valuation:

divloss∗(x, x′; A) := divloss(ψ(x), ψ(x′); A)

= Ψ(x′) · x − Ψ(x′) · x′
= ψ(x′)x + (1 − ψ(x′))f (x) − (ψ(x′)x′ + (1 − ψ(x′))f (x′).

Informally, divergence loss measures the difference in value between funds invested in an
AMM and funds left in a wallet. Recall that by definition v′ minimizes Φ(v′)·v′, so divergence
loss is always positive when v ̸= v′.

Is it possible to bound divergence loss by bounding trade size? More precisely, can an
AMM guarantee that any trade that adds δ or fewer units of X incurs a divergence loss less
than some ϵ, for positive constants δ, ϵ?

XX:6

Presentation and Publication: Loss and Slippage in Networks of Automated Market Makers

Unfortunately, no. There is a strong sense in which divergence loss can be shifted, but
never eliminated. For example, for the constant-product AMM A := (x, 1/x), the divergence
loss for a trade of size δ is

divloss∗(x, x + δ; A) =

δ2
2δx2 + x3 + δ2x + x

(6)

Holding δ constant and letting x approach 0, the divergence loss for even constant-sized
trades grows without bound. This property holds for all AMMs.

▶ Theorem 5. No AMM can bound divergence loss even for bounded-size trades.

Proof. For AMM A := (x, f (x)),

divloss∗(x, x + δ; A) = ψ(x + δ)x + (1 − ψ(x + δ))f (x)

− (ψ(x + δ)(x + δ) + (1 − ψ(x + δ))f (x + δ)).

Note that limx→0(1 − ψ(x + δ)) > 0, and limx→0 f (x) = ∞. All other terms have finite
limits, so limx→0 divloss∗(x, x + δ; A) = ∞.
◀

What is a provider’s worst-case exposure to divergence loss? Consider an AMM A :=
(x, f (x)) in state (a, f (a)). As the X asset becomes increasingly worthless, the valuation v′
approaches (0, 1) as its stable state approaches (∞, 0).

divloss(v, v′; A) = (v′, 1 − v′) · (a, f (a)) − (v′, 1 − v′) · (ϕ(v′), f (ϕ(v′)))) = f (a).

lim
v′→0

Symmetrically, if the Y asset becomes worthless,

divloss(v, v′; A) = (v′, 1 − v′) · (a, f (a)) − (v′, 1 − v′) · (ϕ(v′), f (ϕ(v′)))) = a.

lim
v′→1

The provider’s worst-case exposure to divergence loss in state (a, f (a)) is thus max(a, f (a)).
The minimum worst-case exposure occurs when a = f (a). Recall from Section 3.1 that this
fixed-point is exactly the state that maximizes the AMM’s capitalization. (See Appendix
Section 10 for a more formal treatment of this claim.)

Divergence loss is sometimes called impermanent loss, because the loss vanishes if the
assets return to their original valuation. The inevitability of impermanent loss does not mean
that an AMM’s capitalization cannot increase, only that there is always an opportunity cost
to the provider for not cashing in earlier.

3.3 Linear Slippage

Linear slippage measures how increasing the size of a trade diminishes that trader’s rate of
return. Let A := (x, f (x)) be an AMM in stable state (a, f (a)) for valuation v. Suppose a
trader sends δ > 0 units of X to A, taking A from (a, f (a)) to (a + δ, f (a + δ)), the stable
state for valuation v′ < v. If the rate of exchange were linear, the trader would receive
−δf ′(a) units of Y in return for δ units of X. In fact, the trader receives only f (a) − f (a + δ)
units, for a difference of −δf ′(a) − f (a) + f (a + δ).

The linear slippage(with respect to X) is the value of this difference:

linslipX (v, v′; A) =

(cid:19)

(cid:18) 1 − v′
1 − v

(v · Φ(v′) − v · Φ(v))

(7)

In the trade domain, linslip∗
respect to Y is defined symmetrically.

X (x, x′; A) = linslipX (ψ(x), ψ(x′); A). Linear slippage with

D. Engel and M. Herlihy

XX:7

Figure 2 Angular vs linear slippage)

For example, the linear slippage for the constant-product AMM A := (x, 1/x) for a trade

of size δ is

linslip∗

X (x, x + δ; A) = −

δ2(δ + x)
x2 (δ2 + x2 + 2δx + 1)

(8)

Just as for divergence loss, holding δ constant and letting x approach 0, the linear slippage
across constant-sized trades grows without bound.

▶ Theorem 6. No AMM can bound linear slippage for bounded-size trades.

Proof. As in the proof of Theorem 5, the claim follows because limx−>0 linslip∗
∞.

X (x, x+δ; A) =
◀

3.4 Angular Slippage

Angular slippage measures how the size of a trade affects the exchange rate between the two
assets. This measure focuses on how a trade affects the traders who come after. Recall that
the (instantaneous) exchange rate in state (x, f (x)) is the slope of the tangent f ′(x). Let θ(x)
denote the angle of that tangent with the X-axis. (We could equally well use the tangent’s
angle with the Y -axis.) A convenient way to measure the change in price is to measure the
change in angle. Consider a trade that carries A from valuation v with stable point (x, f (x)),
to valuation v′ with stable point (x′, f (x′)). Define the angular slippage of that trade to be
the difference in tangent angles at x and x′ (expressed in the valuation domain):

angslip(v, v′; A) = θ(ϕ(v′)) − θ(ϕ(v)).

In the trade domain, angslip∗(x, x′; A) := angslip(ϕ(x), ϕ(x′); A). Angular slippage is additive:
for distinct valuations v < v′ < v′′, angslip(v, v′′; A) = angslip(v, v′; A) + angslip(v′, v′′; A).
Note that linear slippage is not additive.

Angular slippage and linear slippage are different ways of measuring the same underlying

phenomenon: their relation is illustrated in Figure 2.

Here is how to compute angular slippage. By definition,tan θ(x) = − 1

f ′(x) . Let x′ > x,

v = (v, 1 − v), and v′ = (v′, 1 − v′).

angslip(v, v′; A) = θ(x′) − θ(x) = arctan

(cid:19)

(cid:18) v − v′
v · v′

(9)

The next lemma says says that the overall angular slippage, angslip(0, ∞), is a constant
independent of the AMM.

f(x +δ)xx+δf(x)angular slippage(unweighted) linear slippageXX:8

Presentation and Publication: Loss and Slippage in Networks of Automated Market Makers

Figure 3 Expected load for A := (x, 1/x) at 1/2 as a function of β distribution parameters.

(Mathematica source is shown in Appendix Section 11.)

▶ Theorem 7. For every AMM A, angslip(0, ∞; A) = π/2.

Proof. Consider an AMM A := (x, f (x)). As limx→0 f ′(x) = − v
As limx→∞ f ′(x) = − v
angslip(0, ∞; A) = π
2 .

1−v = 0 implying v = 0. Because tan angslip(0, ∞; A) = 1−0

1−v = −∞, implying v = 1.
(0,1)·(0,1) = ∞,
◀

The additive property means that no AMM can eliminate angular slippage over every

finite interval. Lowering angular slippage in one interval requires increasing it elsewhere.

▶ Corollary 8. For any AMM A, and any level of slippage s, 0 < s < π/2, there is an
interval (x0, x1) ⊂ R>0 such that angslip∗(x0, x1; A) > s.

For example, the Curve [11] AMM advertises itself as having lower slippage than its
competitors. Theorem 7 helps us understand this claim: compared to a constant-product
AMM, Curve does have lower slippage than a constant-product AMM for stable coins when
they trade at near-parity, but it must have higher slippage when the exchange rate wanders
out of that interval.

3.5 Load

Divergence loss is a cost to providers, and linear slippage is a cost to traders. Controlling
one without controlling the other is pointless because AMMs function only if both providers
and traders consider their costs acceptable. We propose the following measure to balance
provider-facing and trader-facing costs. The load (with respect to X) across an interval is
the product of that interval’s divergence loss and linear slippage:

loadX (v, v′; A) := divloss(v, v′; A) linslipX (v, v′; A)

(10)

Load can also be expressed in the trade domain: load∗

X (x, x′; A) := divloss∗(x, x′; A) linslip∗

X (x, x′; A).

3.6 Expected Load

We have seen that cost measures such as divergence loss, linear slippage, angular slippage,
and load cannot be bounded in the worst case. Nevertheless, these costs can be shifted. Not
all AMM states are equally likely. For example, one would expect stablecoins to trade at
near parity [11].

D. Engel and M. Herlihy

XX:9

Suppose we are given a probability density for future valuations. This distribution might
be given a priori, or it may be learned from historical data. Can we compare the behavior of
alternative AMMs given such a distribution?

Let p(v) be the distribution over possible future valuations. The expected load when

trading X for Y starting in the stable state for valuation v is

Z v

0

P (v′|v′ < v) loadX (v, v′; A)dv′

Weighting this expectation with the probability P (v > v′) that the trade will go in that
direction yields

P (v > v′)

Z v

0

P (v′|v′ < v) loadX (v, v′; A)dv′ =

Z v

0

p(v′) loadX (v, v′; A)dv′.

Define the expected load of AMM A at valuation v to be:

Ep[load(v; A)] :=

Z v

0

p(v′) loadX (v, v′; A)dv′ +

Z 1

v

p(v′) loadY (v, v′; A)dv′.

Of course, one can compute the expected value of any the measures proposed here, not just
load.

Figure 3 shows the expected load for A := (1, 1/x) , starting at valuation 1/2, where
the expectation is taken over the beta(α1, α2) distributions [22], where parameters α1, α2
range independently from 1 to 4. Inspecting the figure shows that symmetric distributions
β(α, α), which are increasingly concentrated around 1/2 as α grows, yield decreasing loads
as the next valuation becomes increasingly likely to be close to the current one. By contrast,
asymmetric distributions, which favor unbalanced valuations, yield higher loads because the
next valuation is likely to be farther from the current one.

4

Sequential Composition

The sequential composition of two AMMs is constructed by using the output of one AMM as
the input to the other. (See Engel and Herlihy [12] for a proof that the sequential composition
of two AMMs is an AMM.) For example, if A trades between florins and guilders, and B
trades between guilders and francs, then their sequential composition A ⊕ B trades between
florins and francs. A trader might deposit florins in A, receiving guilders, then deposit
those guilders in B, receiving francs. In this section, we investigate how linear slippage and
divergence loss interact with sequential composition.

Consider two AMMs A = (x, f (x)), B = (y, g(y)), where A trades between X and Y , and
B between Y and Z. If A is in state (a, f (a)) and B in state (b, g(b)) then their sequential
composition is A ⊕ B := (x, h(x)), where h(x) = g(b + f (a) − f (x)) [12]. (The sequential
composition of more than two AMMs can be constructed by repeated two-way compositions.)
Let v = (v1, v2, v3) be the market valuation linking X, Y, Z, inducing pairwise valuations

v12 =

v1
v1 + v2

, v23 =

v2
v2 + v3

, v13 =

v1
v1 + v3

,

along with their vector forms v12 = (v12, 1 − v12), v23 = (v23, 1 − v23), v13 = (v13, 1 −
v13). Let v′ ̸= v be a three-way valuation inducing analogous pair-wise valuations. Let
ϕA, ϕB, ϕAB : (0, 1) → R>0 be the stable point maps for A, B, A ⊕ B respectively, and
ΦA, ΦB, ΦAB : (0, 1) → R2

>0 their vector forms.

XX:10 Presentation and Publication: Loss and Slippage in Networks of Automated Market Makers

Our composition rules apply when A and B start in their respective stable states1 for
12. (b, g(b))
23. We analyze the changes in

a market valuation v: (a, f (a)) is the stable state for v12, (a + δ, f (a + δ)) for v′
for v23, and (b + f (a) − f (a + δ), g(b + f (a) − f (a + δ)) for v′
divergence loss and linear slippage when the market valuation changes from v to v′.

4.1 Divergence Loss

Initially, the combined capitalization of A and B is v1x + v2(f (x) + y) + v3g(y). A trader
sends δ units to A, reducing the combined capitalization by

−δv′

1 + v′

2(f (x) − f (x + δ)) = v′

3 divloss(v12, v′

12; A)

(11)

Next the trader sends the assets returned from the first trade to B, reducing the combined
capitalization by:

2(f (x + δ) − f (x)) + v′
v′

3(g(y) − g(y + f (x) − f (x + δ))) = v′

1 divloss(v23, v′

23; B)

(12)

Finally, treating both trades as a single transaction reduces the combined capitalization by:

−δv′

1 + v′

3(h(x) − h(x + δ)) = v′

2 divloss(v13, v′

13; A ⊕ B)

(13)

Combining Equations 11-13 yields

divloss(v13, v′

13; A ⊕ B) =

(cid:19)

(cid:18) v′
3
v′
2

divloss(v12, v′

12; A) +

(cid:19)

(cid:18) v′
1
v′
2

divloss(v23, v′

23; B).

(14)

The effect of sequential composition on divergence loss is linear but not additive: the
divergence loss of the composition is a weighted sum of the divergence losses of the components.

4.2 Linear Slippage

With respect to v, a trader who sends δ units of X to A incurs the following slippage

2(−δf ′(x) + f (x + δ) − f (x)) = (v′
v′

1 + v′

2) linslipX (v′

12, v12; A).

(15)

Next the trader sends the assets returned from the first trade to B, incurring the following
slippage:

3 ((f (x) − (x + δ))g′(y) + g(y + f (x) − (x + δ)) − g(y)) = (v′
v′

2 + v′

3) linslipX (v23, v′

23; B).
(16)

Finally, treating both trades as a single transaction yields slippage:

3(−δh′(x) + h(x + δ) − h(x))(v′
v′

1 + v′

3) linslipX (v′

13, v13, A ⊕ B)

(17)

Combining Equations 15-17 yields

linslipX (v13, v′

13; A ⊕ B) =

(cid:19)

(cid:18) 1 − v′
3
1 − v′
2

linslipX (v12, v′

12; A) +

(cid:19)

(cid:18) 1 − v′
1
1 − v′
2

linslipX (v23, v′

23; B)

(18)

1 If A and B do not start in stable states for the current market valuation, then an arbitrage trader will

eventually put them there.

D. Engel and M. Herlihy

XX:11

4.3 Angular Slippage

A trader sends δ to A, where f (a + δ) is the stable point for v′
stable point for v′

23. By construction,

12, g(b + f (a) − f (a + δ)) the

h′(a) = −g′(b)f ′(a) = −

v23
1 − v23

v12
1 − v12

= −

v2
v3

v1
v2

= −

v1
v3

h′(a + δ) = −g′(b + f (a) − f (a + δ))f ′(a + δ) = −

v′
23
1 − v′
23

v′
12
1 − v′
12

= −

v′
2
v′
3

v′
1
v′
2

= −

v′
1
v′
3

Define θA(x), θB(y), θB(y) to be the respective angles of f ′(x), g′(y), and h′(x) with their
X-axes. We can express the tangents of the composite AMM’s angles in terms of the tangents
of the component AMMs’ angles.

tan θAB(x) = −

tan θAB(a) =

1
h′(x)
v2
v1

=

= −

v3
v1

,

1
−g′(b + f (a) − f (x))f ′(x)
v′
2
v′
1

tan θAB(a + δ) =

v′
3
v′
2

=

v′
3
v′
1

.

v3
v2

The component AMMs A and B determine the valuations v1, v2, v′
3, v12, v23, v13, v′
remaining valuations v3, v′

1, v′

2, which induce the

23, v′
13.
(cid:19)

12, v′
(cid:18) v13 − v′
v13 · v′
13

13

angslip(v13, v13′, A ⊕ B) = arctan

(19)

It follows that the angular slippage of the sequential composition of two AMMs can be
computed from the component AMMs’ valuations.

4.4 Load

Combining Equation 14 and Equation 18 yields

loadX (v13, v′

13; A ⊕ B) =

(cid:19)

(cid:18) v′
3(1 − v′
3)
v′
2(1 − v′
2)

loadX (v12, v′

12; A) +

(cid:19)

(cid:18) v′
1(1 − v′
1)
v′
2(1 − v′
2)

loadX (v23, v′

23; B)

(20)

+

+

(cid:19)

(cid:19)

(cid:18) v′
3(1 − v′
3)
2(1 − v′
v′
2)
(cid:18) v′
1(1 − v′
1)
2(1 − v′
v′
2)

divloss(v12, v′

12; A) linslipX (v23, v′

23; B)

divloss(v23, v′

23; B) linslipX (v12, v′

12; A)

It follows that the load of a sequential composition is a weighted sum of the loads of the
components, plus additional (strictly positive) cross-terms.

5

Parallel Composition

Parallel composition [12] arises when a trader is presented with two AMMs A := (x, f (x)) and
B := (x, g(x)), both trading assets X and Y , and seeks to treat them as a single combined
AMM A||B. Let ϕA, ϕB : (0, 1) → R>0 be the stable point maps for A, B respectively,
>0 their vector forms, and ψA, ψB : R>0 → (0, 1) their inverses.
with ΦA, ϕB : (0, 1) → R2
(The parallel composition of more than two AMMs can be constructed by repeated two-way
compositions.)

As shown elsewhere [12], a trader who sends δ units of X to the combined AMM maximizes
return by splitting those units between A and B, sending tδ to A and (1 − t)δ to B, for
0 ≤ t ≤ 1, where f ′(x + tδ) = g′(y + (1 − t)δ).

XX:12 Presentation and Publication: Loss and Slippage in Networks of Automated Market Makers

We assume traders are rational, and always split trades in this way. Because the derivatives
are equal, x + tδ and y + (1 − t)δ are stable points of A and B respectively for the same
valuation v′, so x + tδ = ϕA(v′), and y + (1 − t)δ = ϕB(v′). If A is in state (a, f (a)) and B in
(b, g(b)), then A||B := (x, h(x)), where h(x) := (f (a) − f (a + tx) + g(b) − g(b + (1 − t)x). Our
composition rules apply when both A, B are in their stable states for valuation v = (v, 1 − v).
We analyze the change in divergence loss and linear slippage when the common valuation
changes from v to v′ = (v′, 1 − v′). The new valuation v′ may be the new market valuation,
or it may be the best the trader can reach with a fixed budget of δ.

5.1 Divergence Loss

If a trader sends δ units of X to A||B, the combined capitalization suffers a loss of

divloss(v, v′; A||B) = divloss(v, v′; A) + divloss(v, v′; B).

(21)

It follows that divergence loss under parallel composition is additive.

5.2 Linear Slippage

A straightforward calculation shows:

linslipX (v, v′; A||B) = linslipX (v, v′; A) + linslipX (v, v′; B)

(22)

Linear slippage is thus additive under parallel composition.

Linear slippage is also linear under scalar multiplication. Any AMM A := (x, f (x)) can
be scaled by a constant α > 0 yielding a distinct AMM αA := (αx, αf (x)). Let (x, f (x)) be
the stable point for valuation v, and (x′, f ′(x′)) the stable point for v′.

linslipX (v, v′; αA) = α linslipX (v, v′; A).

(23)

5.3 Angular Slippage

Because both A and B go from stable states for v to stable states for v′,

f ′(a) = g′(a) = h′(a) =

−v
1 − v

,

f ′(a + tδ) = g′(a + (1 − t)δ) = h′(a + δ) =

−v′
1 − v′

It follows that

angslip(v, v′; A||B) = angslip(v, v′; A) = angslip(v, v′; B).

(24)

5.4 Load

Combining Equation 21 and Equation 22 yields

loadX (v, v′; A||B) = loadX (v, v′; A) + loadX (v, v′; B)

divloss(v, v′; A) linslipX (v, v′; B) divloss(v, v′; B) linslipX (v, v′; A)

(25)

It follows that the parallel composition’s load is the sum of the components’ loads, plus
additional (strictly positive) cross-terms.

D. Engel and M. Herlihy

XX:13

6

Adaptive Strategies

So far we have proposed several ways to quantify the costs associated with AMMs. Now we
turn our attention to strategies for adapting to cost changes. A complete analysis of adaptive
AMM strategies is material for another paper, so here we summarize two broad strategies
motivated by our proposed cost measures. We focus on adjustments that might be executed
automatically, without demanding additional liquidity from providers.

6.1 Change of Valuation

Suppose an AMM learns, perhaps from a trusted Oracle service, that its assets’ market
valuation has moved away from the AMM’s current stable state, leaving the providers exposed
to substantial divergence loss. Specifically, suppose A := (x, f (x)) has valuation v1 with
stable state (a1, b1), when it learns that the market valuation has changed to v2 with stable
point (a2, b2).

An arbitrage trader would move A from (a1, b1) to (a2, b2), pocketing a profit. Informally,
A can eliminate that divergence loss by “pretending” to conduct that arbitrage trade itself,
leaving the state the same, but moving the curve. We call this strategy pseudo-arbitrage.

A changes its function using linear changes of variable in x and y. Suppose a1 > a2
and b2 > b1. First, replace x with x − (a1 − a2), shifting the curve along the X-axis. Next,
replace y with y − (b2 − b1), shifting the curve along the y-axis. The transformed AMM is
now A′ := (x, f (x − (a1 − a2)) − (b2 − b1)). The current state (a1, b1) still lies on the shifted
v2
curve, but now with slope
v2−1 , matching the new valuation. The advantage of this change
is that A’s providers are no longer exposed to divergence loss from the new market valuation.
The disadvantage is that pseudo-arbitrage produces AMMs that do not satisfy the usual
boundary conditions f (0) = ∞ and f (∞) = 0, although they continue to satisfy the AMM
axioms. In practical terms, A now has more units of X than it needs, but not enough
units of Y to cover all possible trades. The AMM must refuse trades that would lower its
Y holdings below zero, and there are (a1 − a2) units of X inaccessible to the AMM. The
liquidity providers might withdraw this excess, they might “top up” with more units of Y to
rebalance the pools, or they might leave the extra balance to cover future pseudo-arbitrage
changes. (Note that A’s ability to conduct trades only while the valuation stays within a
certain range is similar to Uniswap v3’s “concentrated liquidity” option.)

6.2 Change of Distribution

Suppose an AMM’s formula was initially chosen to match a predicted distribution on future
valuations. If that prediction changes, then it may be possible to adjust the AMM’s formula
to match the new prediction. Such an adjustment might be built into the AMM’s smart
contract, or it could be imposed from outside by the liquidity providers. The AMM’s current
function could be replaced with an alternative that improves some expected cost measure,
say, reducing expected load or increasing expected capitalization. But replacing AMM
A := (x, f (x)), in the stable state for the market valuation, with another eA := (x, ef (x)),
must follow certain common-sense rules.

First, any such replacement should not change the AMM’s reserves: if the AMM is in
state (a, f (a)), then the updated AMM is in state (a, ef (a)) where f (a) = ef (a). Adding
or removing liquidity requires the active participation of the AMM’s providers, which can
certainly happen, but not as part of the kind of automatic strategy considered here.

XX:14 Presentation and Publication: Loss and Slippage in Networks of Automated Market Makers

Second, any such replacement should not change the AMM’s current exchange rate: if the
AMM is in state (a, f (a)), then the updated AMM is in state (a, ef (a)) where f ′(a) = ef ′(a).
To do otherwise invites further divergence loss. If (a, f (a)) is the stable state for the current
valuation, and f ′(a) ̸= ef ′(a), then (a, ef (a)) is not stable, and a trader can make an arbitrage
profit (and divergence loss) by moving the AMM’s state back to the stable state.

For example, an AMM’s expected capitalization under distribution p is

Z 1

0

p(v)v · Φ(v)dv,

where Φ(v) = (ϕ(v), f (ϕ(v))). If the distribution changes to ep, then an adaptive strategy is
to find a function ef : R>0 → R>0 with associated stable-point function eϕ : (0, 1) → R>0 that
optimizes (or at least improves) the difference

Z 1

0

p(v)v · Φ(v)dv −

Z 1

0

ep(v)v · eΦ(v)dv,

subject to boundary conditions f (a) = ef (a) and f ′(a) = ef ′(a), where eΦ(v) = ( eϕ(v), f ( eϕ(v))).
Developing practical ways to find such functions is the subject of future work.

7

Related Work

Today, the most popular automated market maker is Uniswap [2, 5, 16, 23], a family of
constant-product AMMs. Originally trading between ERC-20 tokens and ether cryptocurrency,
later versions added direct trading between pairs of ERC-20 tokens, and allowed liquidity
providers to restrict the range of prices in which their asset participate. Bancor [17] AMMs
permit more flexible pricing schemes, and later versions [7] include integration with external
“price oracles” to keep prices in line with market conditions. Balancer [18] AMMs trade
across more than two assets, based on a constant mean formula that generalizes constant
product. Curve [11] uses a custom curve specialized for trading stablecoins , maintaining low
slippage and divergence loss as long as the stablecoins trade at near-parity. Pourpouneh et
al. [21] provide a survey of current AMMs.

The formal model for AMMs used here, including the axioms constraining AMM functions,

and notions of composition, are taken from Engel and Herlihy [12].

Angeris and Chitra [3] introduce a constant function market maker model and focus on

conditions that ensure that agents who interact with AMMs correctly report asset prices.

In event prediction markets [1, 9, 10, 14, 15], parties effective place bets on the outcomes
of certain events, such as elections. Event prediction AMMs differ from DeFi AMMs in
important ways: pricing models are different because prediction outcome spaces are discrete
rather than continuous, prediction securities have finite lifetimes, and composing AMMs is
not a concern.

AMM curves resemble consumer utility curves from classical economics [19], and trader
arbitrage resembles expenditure minimization. Despite some mathematical similarities, there
are fundamentally differences in application. In particular, traders interact with AMMs via
composition, an issue that does not arise in the consumer model.

Aoyagi [6] analyzes strategies for constant-product AMM liquidity providers in the
presence of “noise” trading, which is not intended to move prices, and “informed” trading,
intended to move the AMM to the stable point for a new and more accurate valuation.

Angeris et al. [4] propose an economic model relating how the curvature of the AMM’s

function affects LP profitability in the presence of informed and uninformed traders.

D. Engel and M. Herlihy

XX:15

Bartoletti et al. [8] give a formal semantics for a constant-product AMM expressed as a

labeled transition system, and formally verify a number of basic properties.

References

1

Jacob Abernethy, Yiling Chen, and Jennifer Wortman Vaughan. An optimization-based
framework for automated market-making.
In Proceedings of the 12th ACM conference
on Electronic commerce - EC ’11, page 297, San Jose, California, USA, 2011. ACM
Press. URL: http://portal.acm.org/citation.cfm?doid=1993574.1993621, doi:10.1145/
1993574.1993621.

2 Hayden Adams, Noah Zinsmeister, and Dan Robinson. Uniswap v2 core. https://uniswap.

org/whitepaper.pdf, March 2020. As of 8 February 2021.

3 Guillermo Angeris and Tarun Chitra. Improved Price Oracles: Constant Function Market
Makers. SSRN Electronic Journal, 2020. URL: https://www.ssrn.com/abstract=3636514,
doi:10.2139/ssrn.3636514.

4 Guillermo Angeris, Alex Evans, and Tarun Chitra. When does the tail wag the dog? Curvature
and market making. arXiv:2012.08040 [q-fin], December 2020. arXiv: 2012.08040. URL:
http://arxiv.org/abs/2012.08040.

5 Guillermo Angeris, Hsien-Tang Kao, Rei Chiang, Charlie Noyes, and Tarun Chitra. An analysis
of Uniswap markets. arXiv:1911.03380 [cs, math, q-fin], February 2021. arXiv: 1911.03380.
URL: http://arxiv.org/abs/1911.03380.
Jun Aoyagi. Lazy Liquidity in Automated Market Making. SSRN Electronic Journal, 2020.
URL: https://www.ssrn.com/abstract=3674178, doi:10.2139/ssrn.3674178.

6

7 Bancor.
with
proposing-bancor-v2-1-single-sided-amm-with-elastic-bnt-supply-bcac9fe655b,
October 2020. As of 8 February 2021.

amm
Single-sided
https://blog.bancor.network/

Proposing
bnt

supply.

bancor

elastic

v2.1:

8 Massimo Bartoletti, James Hsin-yu Chiang, and Alberto Lluch-Lafuente. A theory of
Automated Market Makers in DeFi. arXiv:2102.11350 [cs], April 2021. arXiv: 2102.11350.
URL: http://arxiv.org/abs/2102.11350.

9 Yiling Chen and David M. Pennock. A utility framework for bounded-loss market makers. In
Proceedings of the Twenty-Third Conference on Uncertainty in Artificial Intelligence, UAI’07,
page 49–56, Arlington, Virginia, USA, 2007. AUAI Press.

10 Yiling Chen and Jennifer Wortman Vaughan. A new understanding of prediction markets
via no-regret learning. In Proceedings of the 11th ACM Conference on Electronic Commerce,
EC ’10, page 189–198, New York, NY, USA, 2010. Association for Computing Machinery.
doi:10.1145/1807342.1807372.

11 Michael Egorov. Stableswap - efficient mechanism for stablecoin liquidity. https://www.curve.

fi/stableswap-paper.pdf, November 2019. As of 8 February 2021.

12 Daniel Engel and Maurice Herlihy. Composing Networks of Automated Market Makers.
arXiv:2106.00083 [cs], June 2021. arXiv: 2106.00083. URL: http://arxiv.org/abs/2106.
00083.

13 Gavin Wood. Ethereum: A secure decentralised generalised transaction ledger, July 2021.

URL: https://ethereum.github.io/yellowpaper/paper.pdf.

14 Robin Hanson. Combinatorial Information Market Design. Information Systems Frontiers,
5(1):107–119, January 2003. URL: https://ideas.repec.org/a/spr/infosf/v5y2003i1d10.
1023_a1022058209073.html, doi:10.1023/A:1022058209073.

15 Robin Hanson. Logarithmic market scoring rules for modular combinatorial information
aggregation. Journal of Prediction Markets, 1(1):3–15, 2007. URL: https://EconPapers.
repec.org/RePEc:buc:jpredm:v:1:y:2007:i:1:p:3-15.

16 Hayden Adams, Noah Zinsmeister, Moody Salem, River Keefer, and Dan Robinson. Uniswap

v3 Core, March 2021. URL: https://uniswap.org/whitepaper-v3.pdf.

XX:16 Presentation and Publication: Loss and Slippage in Networks of Automated Market Makers

17

18

Eyal Hertzog, Guy Benartzi, and Galia Benartzi. Bancor protocol. https://whitepaper.io/
document/52/bancor-whitepaper, 2017.
Fernando Martinelli and Nikolai Mushegian. Balancer: A non-custodial portfolio man- ager,
liquidity provider, and price sensor. https://balancer.finance/whitepaper/, 2109. As of 2
February 2021.

19 Andreu Mas-Collell, Michael Whinston, and Jerry R. Green. Microeconomic Theory. Oxford

20

University Press, 1995.
Pintail. Uniswap: A good deal for liquidity providers?
uniswap-a-good-deal-for-liquidity-providers-104c0b6816f2.

https://medium.com/@pintail/

21 Mohsen Pourpouneh, Kurt Nielsen, and Omri Ross. Automated Market Makers. IFRO Working
Paper 2020/08, University of Copenhagen, Department of Food and Resource Economics, July
2020. URL: https://ideas.repec.org/p/foi/wpaper/2020_08.html.

22 wikipedia. Beta distribution. https://en.wikipedia.org/wiki/Beta_distribution. As of

11 August 2021.

23 Yi Zhang, Xiaohong Chen, and Daejun Park. Formal specification of constant product (x . y
= k) market maker model and implementation. https://github.com/runtimeverification/
verified-smart-contracts/blob/uniswap/uniswap/x-y-k.pdf, 2018.

D. Engel and M. Herlihy

XX:17

8

Appendix: Derivations of Equations

8.0.0.1 Equation 7

linslipX (v, v′; A) := (1 − v′) (−δf ′(x) + f (x + δ) − f (x))
(cid:18)
(cid:19)

= (1 − v′)

+ f (x + δ) − f (x)

δ

v
1 − v

=

=

=

(cid:19)

(cid:19)

(cid:19)

(cid:18) 1 − v′
1 − v
(cid:18) 1 − v′
1 − v
(cid:18) 1 − v′
1 − v

(vϕ(v′) − vϕ(v) + (1 − v)f (ϕ(v′)) − (1 − v)f (ϕ(v)))

(v · Φ(v′) − v · Φ(v))

divloss(v′, v; A).

8.0.0.2 Equation 9

angslip(v, v′; A) = θ(x′) − θ(x)

(cid:18)

= arctan

(cid:19)

− arctan

(cid:18) 1

(cid:19)

−f ′(x)
(cid:19)

(cid:18) 1 − v
v

1
−f ′(x′)
(cid:19)

− arctan

(cid:18) 1 − v′
v′
( 1−v′
v′ ) − ( 1−v
v )
1 + ( 1−v′
v′ )( 1−v
v )
(cid:19)

!

(cid:18) v − v′
v · v′

= arctan

= arctan

= arctan

8.0.0.3 Equation 11

−δv′

1 + v′

2(f (x) − f (x + δ)) = v′
= (v′
= (v′
= v′

12)) + v′
12 · ΦA(v12) − v′
12; A)

1(ϕA(v12) − ϕA(v′
2)(v′
1 + v′
1 + v′
2) divloss(v12, v′
3 divloss(v12, v′

12; A)

2(f (ϕA(v12)) − f (ϕA(v′
12 · ΦA(v′
12))

12))

8.0.0.4 Equation 12

2(f (x + δ) − f (x)) + v′
v′
= v′
= (v′
= v′

3(g(y) − g(y + f (x) − f (x + δ)))
2(ϕB(v23) − ϕB(v′
2 + v′
3)(v′
1 divloss(v23, v′

23)) + v′
23 · ΦB(v23) − v′

23; B

3(g(ϕB(v23)) − g(ϕA(v′
23 · ΦB(v′
23))

23))

8.0.0.5 Equation 13

−δv′

1 + v′

3(h(x) − h(x + δ)) = v′
= (v′
= v′

1(ϕAB(v13) − ϕAB(v′
3)((v′
1 + v′
2 divloss(v13, v′

13)) + v′
13 · ΦAB(v13) − v′
13; A ⊕ B)

3(h(ϕAB(v13)) − h(ϕAB(v′
13 · ΦA(v′

13))

13))

 
XX:18 Presentation and Publication: Loss and Slippage in Networks of Automated Market Makers

8.0.0.6 Equation 14

2 divloss(v13, v′
v′

13; A ⊕ B) = v′

divloss(v13, v′

13; A ⊕ B) =

8.0.0.7 Equation 15

3 divloss(v12, v′
(cid:18) v′
3
v′
2

(cid:19)

divloss(v12, v′

12; A) + v′

1 divloss(v23, v′
(cid:19)

23; B)

12; A) +

divloss(v23, v′

23; B).

(cid:18) v′
1
v′
2

(cid:19) (cid:18) v1 + v2
1 + v′
v′
2

(cid:18) v′
2
v2
(cid:18) v1
v2

linslipX (v12, v′

12; A) =

(cid:19)

(v12 · Φ(v′

12) − v12 · Φ(v12))

2(−δf ′(x) + f (x + δ) − f (x)) = v′
v′
2

(ϕA(v′

12) − ϕA(v12)) + (f (ϕA(v′

12)) − f (ϕA(v12))

(cid:19)

=

v′
2
v2
= (v′

(v1 + v2)(v12 · ΦA(v′

12) − v12 · ΦA(v12))

1 + v′

2) linslipX (v′

12, v12; A).

8.0.0.8 Equation 16

linslipX (v23, v′

23; B) =

(cid:18) v′
3
v3

(cid:19) (cid:18) v2 + v3
v′
2 + v′
3

(cid:19)

(v23 · Φ(v′

23) − v23 · Φ(v23))

3 ((f (x) − (x + δ))g′(y) + g(y + f (x) − (x + δ)) − g(y))
v′

(cid:18)

(f (x) − (x + δ))

= v′
3

v2
v3

+ g(y + f (x) − (x + δ)) − g(y)

(cid:19)

=

v′
3
v3
= (v′

(v2 + v3) (v23 · ΦB(v′

23) − v23 · ΦB(v23)))

2 + v′

3) linslipX (v23, v′

23; B).

8.0.0.9 Equation 17

3(−δh′(x) + h(x + δ) − h(x)) = v′
v′
3

(cid:18) v1
v3

(ϕA(v′

13) − ϕA(v13)) + (h(ϕA(v′

13)) − h(ϕA(v13))

(cid:19)

=

v′
3
v3
= (v′

(v1 + v3)(v13 · ΦA(v′

13) − v13 · ΦA(v13))

1 + v′

3) linslipX (v′

13, v13, A ⊕ B)

8.0.0.10 Equation 18

(v′

1 + v′

3) linslipX (v13, v′

2) linslipX (v12, v′

12; A) + (v′

3) linslipX (v13, v′

13; B)

linslipX (v13, v′

linslipX (v12, v′

12; A) +

13; A ⊕ B) =

1 + v′
13; A ⊕ B)) = (v′
(cid:18) v′
1 + v′
2
1 + v′
v′
3
(cid:19)
(cid:18) 1 − v′
3
1 − v′
2

=

(cid:19)

linslipX (v12, v′

12; A) +

2 + v′
(cid:18) v′
2 + v′
3
1 + v′
v′
3
(cid:19)
(cid:18) 1 − v′
1
1 − v′
2

(cid:19)

linslipX (v23, v′

23; B)

linslipX (v23, v′

23; B)

D. Engel and M. Herlihy

XX:19

8.0.0.11 Equation 18

angslip(v13, v13′, A ⊕ B) = arctan

= arctan

= arctan

8.0.0.12 Equation 20

(cid:19)

(cid:18) v3
v1

− arctan

(cid:19)

(cid:18) v′
3
v′
1
(cid:18) v1v′
v1v′
(cid:18) v13 − v′
13
v13 · v13

3 − v′
1v3
1 + v3v′
3
(cid:19)

(cid:19)

loadX (v13, v′

=

loadX (v12, v′

13; A ⊕ B) linslipX (v13, v′
13; A ⊕ B) = divloss(v13, v′
13; A ⊕ B)
(cid:18) v′
(cid:19)
(cid:18) v′
(cid:19)
3(1 − v′
1(1 − v′
3)
1)
2(1 − v′
2(1 − v′
v′
v′
2)
2)
(cid:18) v′
3(1 − v′
3)
v′
2(1 − v′
2)
(cid:18) v′
1(1 − v′
1)
2(1 − v′
v′
2)

divloss(v23, v′

divloss(v12, v′

12; A) +

+

+

(cid:19)

(cid:19)

12; A) linslipX (v23, v′

23; B)

23; B) linslipX (v12, v′

12; A)

loadX (v23, v′

23; B)

8.0.0.13 Equation 21

divloss(v, v′; A||B) = v′(−δ) + (1 − v′)(f (x) − f (x + tδ) + g(y) − g(y + (1 − t)δ))

= −v′(x + tδ − x + y + (1 − t)δ − y)

+ (1 − v′)(f (ϕA(v)) − f (ϕA(v′)) + g(ϕB(v)) − g(ϕB(v′)))

= −v′(ϕA(v′) − ϕA(v) + ϕB(v′) − ϕB(v))

+ (1 − v′)(f (ϕA(v)) − f (ϕA(v′)) + g(ϕB(v)) − g(ϕB(v′)))

= v′ · ϕA(v) − v′ · ϕA(v′) + v′ · ϕB(v) − v′ · ϕB(v′)
= divloss(v, v′; A) + divloss(v, v′; B)

XX:20 Presentation and Publication: Loss and Slippage in Networks of Automated Market Makers

8.0.0.14 Equation 22

h′(x) = −(tf ′(a + tx) + (1 − t)g′(b + (1 − t)x)

+ (1 − t)

(cid:19)

v
(1 − v)

= −

= −

(cid:18)

t

v
(1 − v)
v
(1 − v)

δ = tδ + (1 − t)δ
δ = ϕA(v′) − ϕA(v) + ϕB(v′) − ϕB(v)

linslipX (v, v′; A||B) = −(1 − v′)(−δh′(x) + h(x + δ) − h(x))

= −(1 − v′)

=

=

(cid:19)

(cid:19)

(cid:18) 1 − v′
1 − v
(cid:18) 1 − v′
1 − v

(cid:18)

−δ

v
1 − v

+ h(x + δ) − h(x)

(cid:19)

(δv − (1 − v)(h(x + δ) − h(x)))

(δv − (1 − v)(f (a) − f (a + t(x + δ)) + g(b) − g(b + (1 − t)(x + δ))

− (f (a) − f (a + tx) + g(b) − g(b + (1 − t)x))))

=

(cid:19)

(cid:18) 1 − v′
1 − v

(δv + (1 − v)(f (a + t(x + δ)) − f (a + tx)

+ g(b + (1 − t)(x + δ)) − g(b + (1 − t)x)))

=

=

=

=

(cid:19)

(cid:19)

(cid:18) 1 − v′
1 − v
(cid:18) 1 − v′
1 − v

(δv + (1 − v)(f (ϕA(v′)) − f (ϕA(v)) + g(ϕB(v′)) − g(ϕB(v))))

(v(ϕA(v′) − ϕA(v) + ϕB(v′) − ϕB(v))

+ (1 − v)(f (ϕA(v′)) − f (ϕA(v)) + g(ϕB(v′)) − g(ϕB(v))))
(cid:19)

(v(ϕA(v′) − ϕA(v)) + (1 − v)(f (ϕA(v′)) − f (ϕA(v)))

(cid:18) 1 − v′
1 − v

+ v(ϕB(v′) − ϕB(v)) + (1 − v)(g(ϕB(v′)) − g(ϕB(v))))
(cid:19)

(v · ΦA(v′) − v · ΦA(v′)) + (v · ΦB(v′) − v · ΦB(v′))

(cid:18) 1 − v′
1 − v

= linslipX (v, v′; A) + linslipX (v, v′; B).

8.0.0.15 Equation 23

linslipX (v, v′; αA) = v′ · (αx, αf (x)) − v′ · (αx′, αf (x′))

= α(v′ · Φ(v) − v′ · Φ(v′)
= α linslipX (v, v′; A).

9

Appendix: Proofs

9.0.0.1 Theorem 2

Proof. Let h(v) = v · Φ(v) = vϕ(v) + (1 − v)f (ϕ(v)) be the capitilization at v. Note that
h is a continuous function on the compact set [0, 1] which guarantees the existence of the

D. Engel and M. Herlihy

XX:21

maximum. Let v∗ be the point where the maximum occurs. The first derivative is

h′(v) = ϕ(v) + vϕ′(v) + (1 − v)f ′(ϕ(v))ϕ′(v) − f (ϕ(v))

ϕ(v) + vϕ′(v) + (1 − v)

−v
1 − v

ϕ′(v) − f (ϕ(v))

= ϕ(v) − f (ϕ(v))

The second derivative is

= ϕ′(v)(1 −

h′′(v) = ϕ′(v) − f ′(ϕ(v))ϕ′(v)
−v
1 − v
1 − v + v
1 − v

ϕ′(v)
1 − v

= ϕ′(v)(

) =

)

Now take a derivative with respect to v of

f ′(ϕ(v)) =

−v
1 − v

ϕ′(v) =

−1
(1 − v)2f ′′(ϕ(v))

< 0.

Recall that f is strictly convex, so f ′′(ϕ(v)) > 0 for all v ∈ (0, 1).

We can then write the second derivative of the capitalization as

h′′(v) =

−1
(1 − v)3f ′′(ϕ(v))

< 0

Thus h is strictly concave so the maximum is unique. Finally, the first-order conditions

tell us that h′(v∗) = 0 or ϕ(v∗) = f (ϕ(v∗)).

9.0.0.2 Lemma 3

Proof. Let g = f −1 = f .

f ′(y) = g′(y) =

1
f ′(f −1(y))

=

1
f ′(f (y))

=

1
f ′(x)

= −

(1 − v)
v

=

−(1 − v)
1 − (1 − v)

Thus y = ϕ(1 − v).

9.0.0.3 Theorem 4

◀

◀

Proof. From the proof of Theorem 2 we know ϕ′(v) < 0 for v ∈ (0, 1), so ϕ(v) is strictly
decreasing. Applying Theorem 2 and Lemma 3 tells us that capitalization is maximized
when ϕ(v) = x = y = ϕ(1 − v). Because ϕ is strictly decreasing, the only way ϕ(v) = ϕ(1 − v)
◀
is if v = 1 − v or v = 1
2 .

10

Appendix: Minimizing Divergence Loss Exposure

Let A := (x, f (x)) be an AMM currently in state (a, f (a)), the stable state for (v, 1 − v).
i=1 in R>0 such that x1 = a, xi < xi+1,
Define an X-partition to be a sequence of values {xi}∞
and limn→∞ xn = ∞.

XX:22 Presentation and Publication: Loss and Slippage in Networks of Automated Market Makers

Given a partition PX = {xi}n

i=1, define the total divergence loss with respect to that

partition as

divloss(PX ; A) =

∞
X

i=1

divloss∗(xi, xi+1; A)

Writing this out explicitly gives

∞
X

i=1

divloss∗(xi, xi+1; A)

=

=

=

=

=

=

∞
X

i=1
∞
X

i=1
∞
X

i=1
∞
X

i=1
∞
X

i=1
∞
X

i=1

vi+1 · (Φ(vi) − Φ(vi+1))

vi+1 · ((ϕ(vi), f (ϕ(vi))) − (ϕ(vi+1), f (ϕ(vi+1))))

(vi+1, 1 − vi+1) · (ϕ(vi) − ϕ(vi+1), f (ϕ(vi)) − f (ϕ(vi+1)))

vi+1(ϕ(vi) − ϕ(vi+1)) − vi+1(f (ϕ(vi)) − f (ϕ(vi+1))) +

∞
X

i=1

f (ϕ(vi)) − f (ϕ(vi+1))

vi+1(ϕ(vi) − ϕ(vi+1)) − vi+1(f (ϕ(vi)) − f (ϕ(vi+1))) + f (ϕ(v1))

vi+1[ϕ(vi) − ϕ(vi+1) + f (ϕ(vi+1)) − f (ϕ(vi))] + f (ϕ(v1))

Note that each term ϕ(vi)−ϕ(vi+1)+f (ϕ(vi+1))−f (ϕ(vi)) ≤ 0. We also know that v1 ≥ vi+1
for each i. This gives us the upper bound

∞
X

i=1

vi+1[ϕ(vi) − ϕ(vi+1) + f (ϕ(vi+1)) − f (ϕ(vi))] + f (ϕ(v1)) ≤ f (ϕ(v1)) = f (x)

and the lower bound

∞
X

i=1

vi+1[ϕ(vi) − ϕ(vi+1) + f (ϕ(vi+1)) − f (ϕ(vi))] + f (ϕ(v1))

∞
X

[ϕ(vi) − ϕ(vi+1) + f (ϕ(vi+1)) − f (ϕ(vi))] + f (ϕ(v1))

≥ v1

i=1

= v1[ϕ(v1) − f (ϕ(v1))] + f (ϕ(v1))
= v1ϕ(v1) + (1 − v1)f (ϕ(v1))
= cap(v; A)

Simply put

cap(v; A) ≤ divloss(PX ; A) ≤ f (a)

How tight can this lower bound get? Well, let v∗ be the point where cap(v; A) is
maximized. If we let x∗ = ϕ(v∗), then we know that f (x∗) = x∗. We know that cap(v; A) =
v∗x∗ + (1 − v∗)f (x∗) = f (x∗). But if x = x∗ then this means

f (x∗) ≤ divloss(P ; A) ≤ f (x∗)

D. Engel and M. Herlihy

XX:23

which is entirely independent of the chosen partition PX , so

f (x∗) ≤ divloss(A) ≤ f (x∗)

or divloss(A) = f (x∗). Additionally, total loss is conserved even if we modify the AMM A
for x > x∗. No matter how you choose to drain asset type Y by depositing asset type X, in
the end you will drain all of f (x∗) if you deposit an infinite amount of X.

sequence of elements {xi}∞

We get a similar result when trading along the Y -axis. Define a Y -partition to be a
i=1 in R>0 such that y1 = f (a), yi ≤ yi+1, and limn→∞ yn = ∞.
i=1 be a Y-partition, g = f −1(x). and yi = f (xi) so xi = f −1(yi) = g(yi).
Thus Φ(vi) = (xi, f (xi)) = (g(yi), f ◦ g(yi)) where f ◦ g(yi) = f ◦ f −1(yi) = yi. That is,
Φ(vi) = (g(yi), yi). The total cost with respect to this partition is

Let PY = {yi}∞

divloss(PY ; A) =

∞
X

i=1

divloss∗(yi, yi+1; A)

For symmetry, define v′

i = 1 − vi.

∞
X

i=1

divloss∗(yi, yi+1; A)

=

=

=

=

=

∞
X

i=1
∞
X

i=1
∞
X

i=1
∞
X

i=1
∞
X

i=1

vi+1 · (Φ(vi) − Φ(vi+1))

vi+1 · (g(yi) − g(yi+1), yi − yi+1)

(1 − v′

i+1)(g(yi) − g(yi+1) + v′

i+1(yi − yi+1)

v′
i+1[yi − yi+1 + g(yi+1) − g(yi)] +

∞
X

i=1

(g(yi) − g(yi+1)

v′
i+1[yi − yi+1 + g(yi+1) − g(yi)] + a

Note that g(yi) − g(yi+1)) + yi+1 − yi ≤ 0 and v′
bound

1 ≥ v′

i+1 for each i. We now get the upper

∞
X

i=1

v′
i+1[yi − yi+1 + g(yi+1) − g(yi)] + a

and the lower bound

∞
X

i=1

v′
i+1[yi − yi+1 + g(yi+1) − g(yi)] + a

≤ a

≥ v′
1

∞
X

i=1

yi − yi+1 + g(yi+1) − g(yi) + a

= v′

1(y1 − g(y1)) + a
= (1 − v1)(f (a) − a) + a
= (1 − v1)f (a) + v1a = cap(v; A)

XX:24 Presentation and Publication: Loss and Slippage in Networks of Automated Market Makers

So again we get the bounds

cap(v; A) ≤ divloss(PY ; A) ≤ a

Similar to the X-axis case this inequality is tight if y1 = f (x∗) and divloss(PY ; A) = a.

Thus we do get a loss conservation result if we start at (x∗, f (x∗)). Namely

divloss(PX ; A) + divloss(PY ; A) = x∗ + f (x∗) = 2x∗ = 2 cap(v∗; A)

The valuation v∗ thus corresponds to the AMM state where half of the wealth may be lost
to X trades and half can be lost to Y trades.

11 Mathematica Code

This section shows the Mathematica scripts used to generate Figure 3.

g[x_] := InverseFunction [ f ][ x ];
\[Phi ][ v_] := InverseFunction [ f ’][−v/(1−v)];
divloss [v1_,v2_] :=

v2 \[Phi ][ v1] + (1−v2) f[\[Phi ][ v1 ]] − (v2 \[Phi ][ v2] + (1−v2) f[\[Phi ][ v2 ]]);

linslipx [v1_,v2_] :=

((1−v2)/(1−v1)) (v1 \[Phi][v2] − v1 \[Phi ][ v1]

+ (1−v1) f[\[Phi ][ v2 ]] − (1−v1) f[\[Phi ][ v1 ]]);

linslipy [v1_,v2_] :=

(v2/v1) ((1−v1) f [\[ Phi ][ v2 ]] − (1−v1) f[\[Phi ][ v1 ]]

+ v1 \[Phi ][ v2] − v1 \[Phi ][ v1 ]);

loadx [v1_,v2_] := divload [v1,v2]
loady [v1_,v2_] := divloss [v1,v2]

linslipx [v1,v2 ];
linslipy [v1,v2 ];

exploadx[v_,\[Alpha]1_,\[Alpha]2_] :=

PDF[BetaDistribution[\[Alpha]1, \[Alpha ]2]][ v] loadx [1/2,v ];

exploady[v_,\[Alpha]1_,\[Alpha]2_] :=

PDF[BetaDistribution[\[Alpha]1, \[Alpha ]2]][ v] loady [1/2,v ];

expload [\[ Alpha]1_, \[Alpha]2_] :=
NIntegrate [exploadx[v, \[Alpha]1, \[Alpha ]2], {v, 0, 1/2}] +
NIntegrate [exploady[v, \[Alpha]1, \[Alpha ]2], {v, 1/2, 1}]

expslipx [v_,\[Alpha]1_,\[Alpha]2_] :=

PDF[BetaDistribution[\[Alpha]1, \[Alpha ]2]][ v]

linslipx [1/2,v ];

expslipy [v_,\[Alpha]1_,\[Alpha]2_] :=

PDF[BetaDistribution[\[Alpha]1, \[Alpha ]2]][ v]

linslipy [1/2,v ];

expslip [\[ Alpha]1_, \[Alpha]2_] :=
NIntegrate [ expslipx [v, \[Alpha]1, \[Alpha ]2], {v, 0, 1/2}] +
NIntegrate [ expslipy [v, \[Alpha]1, \[Alpha ]2], {v, 1/2, 1}]

exploadx[v_,\[Alpha]1_,\[Alpha]2_] :=

PDF[BetaDistribution[\[Alpha]1, \[Alpha ]2]][ v] divloss [1/2,v ];

1

2

3

4

5

6

7

8

9

10

11

12

13

14

15

16

17

18

19

20

21

22

23

24

25

26

27

28

29

30

31

32

33

34

D. Engel and M. Herlihy

XX:25

exploady[v_,\[Alpha]1_,\[Alpha]2_] :=

PDF[BetaDistribution[\[Alpha]1, \[Alpha ]2]][ v] divloss [1/2,v ];

expload [\[ Alpha]1_, \[Alpha]2_] :=
NIntegrate [exploadx[v, \[Alpha]1, \[Alpha ]2], {v, 0, 1/2}] +
NIntegrate [exploady[v, \[Alpha]1, \[Alpha ]2], {v, 1/2, 1}]

35

36

37

38

39

40

41 Plot3D[expload[\[Alpha]1, \[Alpha ]2], {\[Alpha]1, 1, 4}, {\[Alpha]2,

42

1, 4}, PlotRange −> All, MeshFunctions −> {#3 &}]

