Efficient FPGA-based ECDSA Verification Engine for
Permissioned Blockchains
Ji Yang
jamiey@xilinx.com
Xilinx Research Labs
Xilinx, USA

Rashmi Agrawal‚àó
rashmi23@bu.edu
Integrated Circuit and Systems Group
Boston University, USA

Haris Javaid
harisj@xilinx.com
Xilinx Research Labs
Xilinx, Singapore

1
2
0
2

c
e
D
4

]

R
C
.
s
c
[

1
v
9
2
2
2
0
.
2
1
1
2
:
v
i
X
r
a

ABSTRACT
As enterprises embrace blockchain technology, many real-world
applications have been developed and deployed using permissioned
blockchain platforms (access to network is controlled by allow-
ing only nodes with known identities). Such blockchain platforms
heavily depend on cryptography to provide a layer of trust within
the network, thus verification of cryptographic signatures often
becomes the bottleneck. The Elliptic Curve Digital Signature Algo-
rithm (ECDSA) is the most commonly used cryptographic scheme
in permissioned blockchains. In this paper, we propose an efficient
implementation of ECDSA signature verification on an FPGA, in
order to improve the performance of permissioned blockchains that
aim to use FPGA-based hardware accelerators.

In particular, we propose several optimizations for modular arith-
metic (e.g., custom multipliers and fast modular reduction) and
point arithmetic (e.g., significantly reduced number of point double
and addition operations, and optimal width NAF representation).
Based on these optimized modular and point arithmetic modules,
we propose an ECDSA verification engine that can be used by any
application for fast verification of ECDSA signatures. We further
optimize our ECDSA verification engine for Hyperledger Fabric
(one of the most widely used permissioned blockchain platforms)
by moving carefully selected operations to a precomputation block,
thus simplifying the critical path of ECDSA signature verification.
From our implementation on Xilinx Alveo U250 accelerator board
with target frequency of 250MHz, our ECDSA verification engine
can perform a single verification in 760ùúáùë† resulting in a throughput
of 1, 315 verifications per second, which is ~2.5√ó faster than state-
of-the-art FPGA-based implementations [8, 18]. Our Hyperledger
Fabric-specific ECDSA engine can perform a single verification in
368ùúáùë† with a throughput of 2, 717 verifications per second.

KEYWORDS
ECDSA signature verification, FPGA, Hyperledger Fabric

1 INTRODUCTION
Beyond the hype, blockchain technology is emerging as one of the
most disruptive technologies, with real-world use cases in many
domains from digital identity management to financial services,
supply chains, and product provenance. The blockchain technology
essentially provides a mechanism to execute and record transac-
tions (representative of business logic) in an immutable ledger, by
grouping transactions into blocks and creating a hash-linked chain
of those blocks. The nodes in a blockchain network agree upon a
total order of the blocks and transactions in each block (consensus),
and each node maintains its own copy of the ledger, resulting in a

‚àóWork done during internship at Xilinx.

distributed ledger. The beauty of blockchain technology is that it
seamlessly combines consensus mechanisms with cryptography to
provide a layer of trust for executing and recording transactions
within a network of mutually untrusting nodes.

Blockchains are generally categorized into two types. In public
blockchains, such as Bitcoin and Ethereum, any node can participate
in the network without a specific identity and proof-of-work based
consensus is used. Proof-of-work consensus is computationally
very intensive because of the massive amounts of hashes that need
to be computed, and thus becomes the bottleneck. Consequently,
public blockchains use hardware acceleration for hashing. For ex-
ample, Bitcoin network is dominated by ASIC based nodes while
GPU based nodes dominate the Ethereum network [29]. In permis-
sioned blockchains, on the other hand, only nodes with known
identities are part of and allowed to interact with the network,
while the consensus is delegated to only a few nodes (based on BFT
or CFT protocols [1]). Consequently, nodes are authenticated and
transactions are validated cryptographically, thus cryptographic
operations become the bottleneck rather than the consensus mech-
anism [35]. Typically, permissioned blockchains are deployed on
multi-core servers to benefit from some parallelism available across
processing of multiple transactions.

Since permissioned blockchains provide trust through crypto-
graphic authentication, and data integrity and replication through
distributed ledger, they are becoming increasingly popular for
implementation of enterprise applications. Many permissioned
blockchain platforms such as Hyperledger Fabric [13], Quorum [5]
and Corda [27] are now available. Fabric is an open-source and
enterprise-grade implementation of a permissioned blockchain,
and is one of the most widely used platforms with many real-world
applications already developed and deployed from finance and sup-
ply chain domains [6, 7].

In a Hyperledger (HL) Fabric network, one of the nodes is a
validator peer, which is responsible for validating a block and all of
its transactions, before committing that block to the ledger. Many
recent works [3, 9, 15, 35] have shown that validator peer is the
major bottleneck and critically affects the peak throughput. Some
of these works [3, 15, 36] further demonstrated that verification of
cryptographic signatures is the major bottleneck inside a validator
peer. By default, Fabric uses 256-bit ECDSA scheme for signature
generation and verification. Validation of a block involves veri-
fication of its creator‚Äôs ECDSA signature, and validation of each
transaction in a block involves verification of multiple ECDSA sig-
natures (from creator and different peers in the network). Similar
validation nodes exist in other permissioned blockchains such as
Quorum [5] and Hyperledger Besu [14] (permissioned variants of
Ethereum).

 
 
 
 
 
 
Hardware acceleration was recently proposed for validation of
blocks in permissioned blockchains, specifically HL Fabric. The
work in [16] proposed a CPU-FPGA based system where a multi-
core server with a network-attached FPGA card (connected to the
CPU via PCIe) is used to accelerate validator peer of a Fabric net-
work. All the compute-intensive operations of validation were of-
floaded to the FPGA accelerator, including verification of ECDSA
signatures. Although the work in [16] demonstrated an order of
magnitude speedup in block validation compared to CPU-only
implementation, interestingly enough, the ECDSA signature verifi-
cation still turned out to be the critical path in the FPGA accelerator.
Therefore, in this paper, we focus on an efficient FPGA-based im-
plementation of ECDSA signature verification, in order to improve
performance of permissioned blockchains that aim to use FPGA-
based accelerators.

More specifically, we focus on accelerating ECDSA signature
verification over NIST ùëÉ-256 elliptic curve. Working with NIST ùëÉ-
256 curve requires performing 256-bit modular and point arithmetic
operations. This is challenging to implement on FPGAs because 256-
bit wide multipliers, adders/subtractors, and dividers are not readily
available. Therefore, a naive implementation will lead to a resource
intensive design, leaving less resources for other operations of an
accelerator. This, in turn, makes it challenging to fit the entire
accelerator on an FPGA and meet the required timing constraints.
In particular, we make the following contributions:

‚Ä¢ FPGA-specific optimizations for modular arithmetic: We
present algorithmic optimizations for modular arithmetic mod-
ules to enable optimized FPGA-based implementations. We specif-
ically propose a custom 256-bit multiplier for integer multiplica-
tion (used in modular multiplication) and a 258-bit multiplier for
Barrett reduction module. These multipliers efficiently leverage
internal multipliers and registers of the DSP blocks in FPGA
for better performance. We also propose an efficient algorithm
to perform fast modular reduction over ùëÉ-256 without using
expensive 256-bit comparators.

‚Ä¢ Algorithmic optimizations for point arithmetic: We present
optimizations for simultaneous-point and fixed-point multipli-
cation algorithms (used in ECDSA verification) by reducing the
overall number of point double and addition operations respec-
tively. We use projective Chudnovsky coordinate system along

Rashmi Agrawal, Ji Yang, and Haris Javaid

with optimal width for non-adjacent form (NAF) representation
to further reduce the total number of point arithmetic operations.
‚Ä¢ HL Fabric-specific ECDSA verification: We present a fast
ECDSA signature verification engine by leveraging the fact that
the generator point G is fixed and the public key K can be
extracted in advance. This allows us to move a major chunk
of point arithmetic from ECDSA verification to a precompute
block. Consequently, the point arithmetic during actual ECDSA
computation reduces to just point addition operations, resulting
in a much faster signature verification.

We implemented our optimized ECDSA verification engines on
Xilinx Alveo U250 board [40] with a target frequency of 250MHz.
For modular arithmetic modules, we observe on average 1.5√ó speed
up compared to [10], while for point arithmetic modules, we ob-
serve on average 3.2√ó speedup compared to the state-of-the-art
implementations [10, 19, 21, 22, 31, 37]. Our ECDSA verification
engine, using these modules, performs a signature verification in
760ùúáùë† resulting in a throughput of 1, 315 verifications per second,
which is ~2.5√ó faster than the existing FPGA-based implementa-
tions [8, 18]. With HL Fabric-specific optimizations, our ECDSA
verification engine can perform a signature verification in 368ùúáùë†
resulting in a throughput of 2, 717 verifications per second.

2 BACKGROUND AND PRELIMINARIES
2.1 Blockchain Machine
Figure 1(a) depicts a simplified overview of hardware accelerator
for HL Fabric that was proposed in [16]. The blocks are received in
the FPGA accelerator card through the integrated network inter-
face. The first module, ProtocolProcessor, processes the incoming
packets and extracts relevant data, such as block id, number of trans-
actions in the block, ECDSA signatures, public keys from identity
certificates, etc. The second module, BlockProcessor, uses this data
to validate the block and its transactions, before committing the
transactions. Once a block is validated, the Fabric software running
on CPU accesses validation results from hardware and continues
on with committing the block to the ledger.

Internally, the BlockProcessor uses a configurable number of
ECDSA verification engines distributed across multiple stages to
process the ECDSA verifications as fast as possible. Each ECDSA
engine accepts a verification request in the form of {signature, key,

Figure 1: Blockchain Machine: (a) FPGA-based hardware accelerator, (b) Domain parameters for Hyperledger Fabric.

(a)                                                                            ServerFPGA CardBlockProcessorTxVerifyProtocolProcessorBlockVerify...ECDSAenginePacketProcessorDataProcessorHashCalc.DataWriterRegisterMapNetwork InterfaceCPUPCIeECDSAengineECDSAengineTxVscc...ECDSAengineECDSAengineTxCommit Elliptic curve parameter, a = -3 Generator point on the curve,                     = 6b17d1f2e12c4247 f8bce6e563a440f2      77037d812deb33a0 f4a13945d898c296    = 4fe342e2fe1a7f9b 8ee7eb4a7c0f9e16      2bce33576b315ece cbb6406837bf51f5  Order of the curve, n  n = ffffffff00000000 ffffffffffffffff      bce6faada7179e84 f3b9cac2fc632551 Prime P-256, p = 2256 - 2224 + 2192 + 296 - 1  p = ffffffff00000001 0000000000000000       00000000ffffffff ffffffffffffffff(b) Domain ParametersEfficient FPGA-based ECDSA Verification Engine for Permissioned Blockchains

hash}, where signature includes both its r and s components, key is
the public key of the signer with both x and y components, and hash
corresponds to the hash of message (e.g., block or transaction). Typi-
cally, the hash is computed as part of the ECDSA verification, but in
Blockchain Machine, it is precomputed by the ProtocolProcessor for
better performance. The work in [16] reported that a single ECDSA
verification was the slowest operation in their hardware accelerator.
Therefore, in this paper, we design an efficient FPGA-based ECDSA
verification engine that can be used inside the Blockchain Machine,
or similar hardware accelerators for permissioned blockchains.

2.2 ECC
An elliptic curve E over a prime field Fùëù is defined by a pair of
tuple (ùë•, ùë¶) satisfying the Weierstrass equation

ùë¶2 = ùë• 3 + ùëéùë• + ùëè

(1)

where ùëé and ùëè belong to a Galois field ùê∫ùêπ (ùëù) with ùëù > 3 and
Fùëù = ùê∫ùêπ (ùëù). Point arithmetic allows us to compute any point
Pùëñ = (ùë•ùëñ, ùë¶ùëñ ) on the elliptic curve. Addition of two points P and Q,
where P ‚â† Q, is defined by R = P + Q. However, when P = Q,
point addition is performed as a point double operation, resulting
in 2P. Although point addition and double operations can be per-
formed in affine or projective coordinates, affine coordinates are
not preferred as they require expensive modulo inverse computa-
tions [18]. In this work, we focus on performing point addition and
point double operations in projective Chudnovsky coordinates [4]
where each point P is represented as a quintuple (ùëã, ùëå , ùëç, ùëç 2, ùëç 3),
which corresponds to the affine point (ùë• = ùëã /ùëç 2, ùë¶ = ùëå /ùëç 3). These
coordinates give a speed benefit over affine coordinates when the
cost for modulo inversion is significantly higher than the modular
multiplication. Therefore, we use projective Chudnovsky coordi-
nates because FPGAs have DSP blocks with multipliers that can
perform fast multiplications. The point addition and double equa-
tions in projective Chudnovsky coordinates are given in Table 1.
For NIST Prime curves, which include ùëÉ-256 that is used in HL
Fabric, domain parameters are given in FIPS 186 ‚àí 4 [23] and are
listed along with Figure 1(b) for reference.

Table 1: Point addition and double equations in projective
Chudnovsky coordinates.

Point Addition

)

, ùëç 3
2

(ùëã1, ùëå1, ùëç1, ùëç 2
1

, ùëç 3
, ùëã2, ùëå2, ùëç2, ùëç 2
2
1
2 , ùëà2 = ùëã2 ‚àó ùëç 2
ùëà1 = ùëã1 ‚àó ùëç 2
1
ùëÜ1 = ùëå1 ‚àó ùëç 3
2 , ùëÜ2 = ùëå2 ‚àó ùëç 3
1
ùêª = ùëà2 ‚àí ùëà1, ùëÖ = ùëÜ2 ‚àí ùëÜ1
ùëã3 = ùëÖ2 ‚àí ùêª 3 ‚àí 2 ‚àó ùëà1 ‚àó ùêª 2
ùëå3 = ùëÖ ‚àó (ùëà1 ‚àó ùêª 2 ‚àí ùëã3) ‚àí ùëÜ1 ‚àó ùêª 3
ùëç3 = ùêª ‚àó ùëç1 ‚àó ùëç2
3 = ùëç 2
3 , ùëç 3
3 = ùëç 2
ùëç 2
3 ‚àó ùëç3
, ùëç 3
Return(ùëã3, ùëå3, ùëç3, ùëç 2
3
3

)

Point Double
(ùëã, ùëå , ùëç, ùëç 2, ùëç 3)
ùëÜ = 4 ‚àó ùëã ‚àó ùëå 2
ùëÄ = 3 ‚àó ùëã 2 + ùëé ‚àó (ùëç 2)2
ùëã1 = ùëÄ2 ‚àí 2 ‚àó ùëÜ
ùëå1 = ùëÄ ‚àó (ùëÜ ‚àí ùëã1) ‚àí 8 ‚àó ùëå 4
ùëç1 = 2 ‚àó ùëå ‚àó ùëç
ùëç 2
1 = ùëç 2
1
1 ‚àó ùëç1
1 = ùëç 2
ùëç 3
Return(ùëã1, ùëå1, ùëç1, ùëç 2
1

, ùëç 3
1

)

3 RELATED WORK
In this section, we discuss the most relevant exisiting works in the
literature. There are many publications focusing on acceleration
of modular multiplication, point arithmetic for ECC, or ECDSA

signature verification in hardware. Overall, these hardware acceler-
ators can be broadly classified into three categories based on their
implementation platforms. First category includes reconfigurable
architectures that are FPGA-based [8, 10, 19, 30, 32, 34, 37], the sec-
ond category includes 8-bit AVR-based implementations [11, 20, 25]
for embedded devices that are resource constrained, and the third
category includes ASIC-based hardwired architectures [17, 18, 41]
to achieve high-performance for a specific elliptic curve.

Some of the works [30, 41] focus on elliptic curves over binary
fields ùê∫ùêπ (2ùëö) only. This is because the hardware implementation
of binary field operations results in a carry-free logic, and thus these
fields are the most optimal for use in hardware in terms of both
speed and area. Other works focus on elliptic curves over prime
fields ùê∫ùêπ (ùëù), but perform hardware acceleration for a different field
size like 163-bits [32], 192-bits [20], or 224-bits [11], which is not of
interest to blockchain platforms that typically use 256-bits prime
field. There is also a wide range of work [10, 19, 25, 37] that focuses
on accelerating only point arithmetic for ECC over NIST ùëÉ-256
elliptic curve, and do not implement the entire ECDSA verification.
Tachibana et al. [34] accelerate ECDSA verification algorithm
over Secp256k1 elliptic curve for Bitcoin on an Intel Cyclone IV
FPGA. Their single ECDSA verification takes about 145.52 ms. Glas
et al. [8] present an FPGA-based ECDSA core for 256-bits field using
Xilinx Virtex 5 FPGA board. The authors integrate their hardware
core in a vehicle-to-vehicle communication system and compare the
performance against microcontroller-based implementation. Ji et
al. [17] and Kne≈æeviƒá et al. [18] implement the ECDSA verification
algorithm over NIST ùëÉ-256 elliptic curve as ASICs. However, Ji et
al. [17] did not report any latency numbers. We will present the
results from both [8] and [18] for comparison in Section 7.

In this work, we optimize modular arithmetic operations (specif-
ically multiplications) to utilize DSP blocks on FPGA and accelerate
point arithmetic operations over NIST ùëÉ-256 elliptic curve, and then
combine these modules to implement an efficient ECDSA verifi-
cation engine (both generic and HL Fabric-specific). To the best
of our knowledge, our proposed architecture performs the fastest
ECDSA verification over NIST ùëÉ-256 prime field on an FPGA (see
Section 7).

4 ECDSA VERIFICATION ALGORITHM
A sender sends the message digest ùëß = ùêª (ùëö), the signature (ùëü, ùë†),
and the public key K = (ùë• K, ùë¶K ), which are verified by the receiver.
It is assumed that the receiver knows the ECC domain parameters
(ùëé, G = (ùë• G, ùë¶ G), ùëõ, and ùëù described in Section 2.2). Algorithm 1
defines the ECDSA signature verification process, where the out-
put indicates whether the signature is valid or not. Typically, an
ECDSA verification algorithm computes the message digest, how-
ever we assume that the hash is precomputed to be aligned with
the Blockchain Machine architecture (the hash is computed by the
ProtocolProcessor module). Hence, the algorithm receives the com-
puted hash instead of the message. It is also worth noting that the
signature verification algorithm performs modular reductions with
respect to two different primes. For point arithmetic (line 7), the
prime ùëù is used, whereas for the rest of the operations (lines 4-6
and 8) order of the curve ùëõ is used.

When we translate Algorithm 1 into a pictorial representation as
shown in Figure 2, it is evident that we need to implement modular

Algorithm 1: ECDSA Verification
Input: Message digest ùëß, the signature (ùëü, ùë†),

and the public key K = (ùë• K, ùë¶K )

Output: Valid or invalid

Return(Invalid)

1: if (ùëü, ùë†) not in range [1, ùëõ ‚àí 1] then
2:
3: end if
4: Compute ùë§ = ùë†‚àí1 mod ùëõ
5: Compute ùëò1 = ùëß ‚àó ùë§ mod ùëõ
6: Compute ùëò2 = ùëü ‚àó ùë§ mod ùëõ
7: Compute (ùë•2, ùë¶2) = ùëò1ùê∫ + ùëò2K
8: if ùëü == ùë•2 mod ùëõ then
Return(Valid)
9:
10: else
11:
12: end if

Return(Invalid)

arithmetic operations such as modulo inverse, multiplication and
reduction followed by various point arithmetic operations such as
point addition, double and scalar-point multiplication.

5 FPGA-BASED ECDSA VERIFICATION

ENGINE

In this section, we present the architecture of our efficient ECDSA
verification engine. We would like to highlight here that the ECDSA
signature verification algorithm deals with the information that is
publicly known, therefore there is no secret information to leak
through side-channels while performing a signature verification.
This widens our choice of algorithms for implementing various
modules within the ECDSA verification engine. Therefore, in our
hardware implementation, we select algorithms that utilize minimal
hardware resources while resulting in low latency.

5.1 Modular Arithmetic
To efficiently implement 256-bit wide modular arithmetic on an
FPGA, we implement all modular arithmetic modules using multi-
word integer arithmetic [12]. In multi-word arithmetic, a 256-bit
field element ùëé can be represented as

ùëä ùê¥[1] + ùê¥[0]

ùëé = 2(ùë° ‚àí1)ùëä ùê¥[ùë° ‚àí 1] + ¬∑ ¬∑ ¬∑ + 22ùëä ùê¥[2] + 2

(2)
where, ùëä and ùë° = 256/ùëä define the word length and the number of
words to operate on respectively. We set the value of ùëä diligently
for every operation to efficiently utilize the underlying resources
of an FPGA. For example, on Xilinx Alveo U250 FPGA board, the
multipliers are 16-bit wide and hence,ùëä can be set as 16. The advan-
tages of using multi-word integer approach and setting the value of
ùëä carefully are two-fold. First, it helps in performing the modular
operations using hardwired DSP blocks on the FPGA. Second, it
helps in achieving a higher maximum operating frequency for the
entire design.

Modular Subtraction: Subtraction in Fùëù can be performed using
Algorithm 2 [12] with multi-word integer approach. The adder/-
subtractor in DSP blocks have 48-bit wide inputs. However, for
multi-word integer approach, the maximum bit width we can use

Rashmi Agrawal, Ji Yang, and Haris Javaid

Figure 2: Operations in ECDSA signature verification.

is 32 bits (32 being the largest integer dividing 256 symmetrically).
Therefore, to use DSP for subtraction, we set the parameter ùëä as
32 and thus, we have ùë° = 8 words to operate on. Along with each
subtraction operation, we subtract the previous carry bit and store
the next carry bit (line 3). As we operate on a single word at a time,
we utilize only one DSP block to implement the modular subtrac-
tion operation. We want to highlight here that point arithmetic
(including point double and add) in projective Chudnovsky coor-
dinate requires only one modular addition operation (see Table 1).
Therefore, we decided to perform the modular addition using our
modular subtraction module with 2‚Ä≤s complement input for the
second operand. Implementing a separate adder leads to inefficient
resource utilization as the adder will remain idle for most of the
time.

Algorithm 2: Subtraction in Fùëù
Input: Modulus ùëù, integers ùëé, ùëè ‚àà [0, ùëù ‚àí 1], ùë° = 8
Output: ùëê = (ùëé ‚àí ùëè) mod ùëù

(ùëêùëéùëüùëüùë¶, ùê∂ [ùëñ]) ‚Üê ùê¥[ùëñ] ‚àí ùêµ [ùëñ] ‚àí ùëêùëéùëüùëüùë¶

1: Set (A[t-1],. . . ,A[0]) ‚Üê ùëé, (B[t-1],. . . ,B[0]) ‚Üê ùëè
2: (ùëêùëéùëüùëüùë¶, ùê∂ [0]) ‚Üê ùê¥[0] ‚àí ùêµ [0]
3: for ùëñ from 1 to ùë° ‚àí 1 do
4:
5: end for
6: if ùëêùëéùëüùëüùë¶ = 1 then
7:
8: end if
9: Return(ùëê)

add ùëù to ùëê = (ùê∂ [ùë° ‚àí 1], . . . , ùê∂ [2], ùê∂ [1], ùê∂ [0])

Integer Multiplication Module: We adopt a hybrid approach to
integer multiplication through a combined schoolbook [28] and
Karatsuba-Ofman [12] approach. The motivation behind adopt-
ing a hybrid approach is as follows. Our target FPGA board has
DSP blocks with 27x18 bit wide multipliers. However, both multi-
word arithmetic and schoolbook algorithm require operands to be
split symmetrically (i.e., both operands must have the same base).
Therefore, the maximum we can use is 16x16 bit wide multiplier
to multiply two 256-bit operands (16 being the largest number
that can split 256 symmetrically). If we set ùëä as 16, we will have
ùë° = 16 words to operate on, thus implementing just the schoolbook
multiplication algorithm [12] will lead to a high latency (at least
256 clock cycles), which is not acceptable as many multiplications
are performed in point arithmetic. Therefore, the use of hybrid
approach lowers the latency of a multiplication performed using
multi-word approach with schoolbook multiplication. The steps of
our proposed approach are shown in Algorithm 3.

w = s-1(mod n)Modulo Inversex2(mod n) = r?Comparisonk2 = r * w(mod n)ModularMultiplicationsrzvalidk1 = z * w(mod n)ModularMultiplicationk1   + k2   = (x2,y2)Point Additionk2Scalar-pointMultiplicationk1Scalar-pointMultiplicationEfficient FPGA-based ECDSA Verification Engine for Permissioned Blockchains

Algorithm 3: Hybrid Integer Multiplication
Input: Integers ùëé, ùëè ‚àà [0, ùëù ‚àí 1], ùë° = 8, ùëô = 16
Output: ùëê = (ùëé.ùëè)

1: Set (A[t-1],. . . ,A[0]) ‚Üê ùëé, (B[t-1],. . . ,B[0]) ‚Üê ùëè
2: Set C[i] ‚Üê 0 for 0 ‚â§ ùëñ ‚â§ 2ùë° ‚àí 1
3: for i from 0 to ùë° ‚àí 1 do
4:

U ‚Üê 0
for j from 0 to ùë° ‚àí 1 do

(ùëé1, ùëé0) ‚Üê A[i], (ùëè1, ùëè0) ‚Üê B[i]
ùëéùëè = ùëé1ùëè122ùëô + [(ùëé0 + ùëé1)(ùëè0 + ùëè1) ‚àí ùëé1ùëè1 ‚àí ùëé0ùëè0]2ùëô + ùëé0ùëè0
(U,V) ‚Üê C[i+j] + ab + U
C[i+j] ‚Üê V

5:

6:

7:

8:

9:

10:

end for
C[i+t] ‚Üê U

11:
12: end for
13: Return(c)

ùëô + ùëé0ùëè0)

We first take the schoolbook multiplication algorithm and set
the parameter ùëä as 32 (twice the input width of a multiplier in
DSP block) to split 256-bit operands into ùë° = 8 32-bit words. Next,
we target the 32-bit operands and split them into 16-bit operands
(see Figure 3) and multiply these 16-bit operands using Karatsuba-
Ofman equation as follows:
ùëéùëè = (ùëé1ùëè122ùëô + [(ùëé0 + ùëé1)(ùëè0 + ùëè1) ‚àí ùëé1ùëè1 ‚àí ùëé0ùëè0]2
where ùëô is 16. Moreover, as multiplication operations (line 7
in Algorithm 3) are independent, we unroll the loops in the algo-
rithm to perform multiplications and accumulations in parallel. As
a result, we can perform 256-bit integer multiplications in just 39
clock cycles using the schoolbook multiplication algorithm with the
Karatsuba-Ofman split to utilize the available wide multipliers in
DSP blocks efficiently. Note that various existing works [39, 42, 43]
(implementing different cryptographic schemes) exploit Karatsuba-
ofman/Karatsuba algorithm to perform modular multiplication on
an FPGA. Therefore, novelty of this work lies in the way we com-
bine schoolbook multiplication and Karatsuba-ofman algorithm
together to implement a low-latency, parallel multiplier.

(3)

Figure 3: Schoolbook+Karatsuba-Ofman multiplication ap-
proach.

Fast ùëÉ-256 Modular Reduction Module: The result of an inte-
ger multiplication yields a 512 bits result that needs to be reduced
to 256 bits by performing modular reduction. In point arithmetic,
modular reduction is performed using the prime ùëù = ùëÉ-256 while
other modular reductions in ECDSA verification engine are per-
formed using the other prime, i.e., the order of the curve ùëõ. Modular
reduction with ùëõ follows this discussion. Either ways, 256-bit mod-
ular reduction is very expensive to implement in hardware due to

Algorithm 4: Fast Reduction Modulo ùëÉ-256 Algorithm
Input: A 512-bit integer ùëê = (ùëê15, . . . , ùëê2, ùëê1, ùëê0) in base 232
Output: ùëü = ùëê mod ùëÉ-256
1: ùë†1 = (ùëê7, ùëê6, ùëê5, ùëê4, ùëê3, ùëê2, ùëê1, ùëê0),
ùë†2 = (ùëê15, ùëê14, ùëê13, ùëê12, ùëê11, 0, 0, 0)
2: ùëü = ùë†1 + ùë†2, ùëü = (ùëü ‚â• ùëù) ? ùëü ‚àí ùëù : ùëü
3: ùëü = ùëü + ùë†2, ùëü = (ùëü ‚â• ùëù) ? ùëü ‚àí ùëù : ùëü
4: ùë†3 = (0, ùëê15, ùëê14, ùëê13, ùëê12, 0, 0, 0)
5: ùëü = ùëü + (ùë†3 << 1), ùëü = (ùëü ‚â• ùëù) ? ùëü ‚àí ùëù : ùëü
6: ùë†4 = (ùëê15, ùëê14, 0, 0, 0, ùëê10, ùëê9, ùëê8)
7: ùëü = ùëü + ùë†4, ùëü = (ùëü ‚â• ùëù) ? ùëü ‚àí ùëù : ùëü
8: ùë†5 = (ùëê8, ùëê13, ùëê15, ùëê14, ùëê13, ùëê11, ùëê10, ùëê9)
9: ùëü = ùëü + ùë†5, ùëü = (ùëü ‚â• ùëù) ? ùëü ‚àí ùëù : ùëü
10: ùë†6 = (ùëê10, ùëê8, 0, 0, 0, ùëê13, ùëê12, ùëê11)
11: ùëü = ùëü ‚àí ùë†6, ùëü = (ùëü < 0) ? ùëü + ùëù : ùëü
12: ùë†7 = (ùëê11, ùëê9, 0, 0, ùëê15, ùëê14, ùëê13, ùëê12)
13: ùëü = ùëü ‚àí ùë†7, ùëü = (ùëü < 0) ? ùëü + ùëù : ùëü
14: ùë†8 = (ùëê12, 0, ùëê10, ùëê9, ùëê8, ùëê15, ùëê14, ùëê13)
15: ùëü = ùëü ‚àí ùë†8, ùëü = (ùëü < 0) ? ùëü + ùëù : ùëü
16: ùë†9 = (ùëê13, 0, ùëê11, ùëê10, ùëê9, 0, ùëê15, ùëê14)
17: ùëü = ùëü ‚àí ùë†9, ùëü = (ùëü < 0) ? ùëü + ùëù : ùëü
18: Return(ùëü )

large division operation. We observe that a single modular reduc-
tion using the % operator in Verilog requires about 57, 000 LUTs
on the target FPGA, which is quite expensive. Therefore, efficient
implementation of modular reduction is crucial to the design of an
ECDSA verification engine.

NIST recommends a fast modulo reduction ùëÉ-256 algorithm [12]
as ùëù = ùëÉ-256 is a general Mersenne prime [33]. The algorithm re-
places large division operations with simple additions and subtrac-
tions by exploiting the structure of this Mersenne prime. Therefore,
by using this algorithm, we can perform the 256-bit modular re-
duction using two left shifts (multiplication by 2), four additions,
and four subtractions. However, the result generated from this al-
gorithm can be in the range ‚àí4ùëù to 5ùëù instead of 0 to ùëù. So we need
to perform a correction by either adding to the result or subtract-
ing from the result, a suitable value of ùëù within this range. This
correction step, however, requires performing many 256-bit com-
parisons to figure out the exact range in which the result lies. On
FPGAs, a 256-bit comparator leads to long carry chains impacting
the timing constraints of the design adversely. Therefore, to avoid
performing many large parallel comparisons at once, we check
the results immediately after each step of the computation. The
steps of our proposed fast modulo reduction ùëÉ-256 algorithm are
shown in Algorithm 4. We can see that on line 2 of the algorithm
as we perform addition, we perform an immediate correction by
comparing the result of addition with ùëù. Similarly, after subtraction
operation (lines 10, 12, 14, and 16), we compare the result with 0 to
see if it is negative and correct it accordingly.

From Algorithm 4, it is evident that we avoid using many 256-bit
wide comparators in parallel, but we still need a 256-bit comparator
to check if the intermediate result is ‚â• ùëù or not. To avoid doing
so, we further exploit the structure of the Mersenne prime and

A[0]A[1]A[7]...B[0]B[1]B[7]...a1[0]a0[0]256-bits256-bits32-bits16-bits16-bitsb1[0]b0[0]32-bits16-bits16-bitsAlgorithm 5: Efficient Comparison with ùëÉ-256
Input: A 257-bit integer ùëü with 0 ‚â§ ùëü < 2ùëù, conditions ùê∂0, ùê∂1,

ùê∂2, and ùê∂3
Output: ùëü ‚â• ùëù
1: ùëü0 = &ùëü [95 : 0], ùëü1 = ùëü [191 : 96], ùëü2 = ùëü [223 : 192],

ùëü3 = &ùëü [255 : 224], ùëü4 = ùëü [256]

2: if (ùëü4 == 1 or (ùëü3 == ùê∂3 and ùëü2 > ùê∂2 or (ùëü2 == ùê∂2 and

ùëü1 > ùê∂1))) then

Return(greater)

3:
4: else if (ùëü4 == 0 and ùëü3 == ùê∂3 and ùëü2 == ùê∂2 and ùëü1 == ùê∂1

and ùëü0 == ùê∂0) then
Return(equal)

5:
6: end if

propose an efficient algorithm to perform this comparison with-
out actual 256-bit comparators. Our Algorithm 5 is based on the
following observation. We can split ùëÉ-256 into four parts as follows:

ùëÉ0 = ùëÉ [95 : 0] = ùëì ùëì ùëì ùëì ùëì ùëì ùëì ùëì ùëì ùëì ùëì ùëì ùëì ùëì ùëì ùëì ùëì ùëì ùëì ùëì ùëì ùëì ùëì ùëì
ùëÉ1 = ùëÉ [191 : 96] = 0, ùëÉ2 = ùëÉ [223 : 192] = 1
ùëÉ3 = ùëÉ [255 : 224] = ùëì ùëì ùëì ùëì ùëì ùëì ùëì ùëì

Using these four parts, we can generate the following four con-
ditions: ùê∂0 : &ùëÉ0 = 1, ùê∂1 : ùëÉ1 = 0, ùê∂2 : ùëÉ2 = 1, ùê∂3 : &ùëÉ3 = 1
Here, an AND (&) reduction on ùëÉ0 gives a 1, ùëÉ1 is 0, ùëÉ2 is 1, and again
an & reduction on ùëÉ3 gives a 1. The algorithm starts by splitting the
input integer ùëü in a similar fashion as ùëÉ-256 and an additional ùëü4
for the 257ùë°‚Ñé bit (as the input integer is of 257-bits). First, we check
if ùëü4 is 1, then ùëü is definitely greater. However, if ùëü4 is 0, we need to
check for other conditions. If ùëü2 > 1 or ùëü1 > 0 (line 3), then we know
that ùëü > ùëù else if all the four conditions on line 5 are satisfied, then
ùëü = ùëù. This algorithm converts 256-bit wide comparisons to four
1-bit comparisons and can be efficiently implemented in hardware
using bit-slicing and unary & operator.

Modular Reduction over ùëõ using Barrett Reduction: We pro-
pose to use the standard Barrett reduction algorithm [12] for mod-
ulo reduction over the prime ùëõ. Barrett reduction does not exploit
the structure of ùëõ but computes ùëü = ùëß mod ùëõ, by computing a
value ÀÜùëû, which when multiplied with ùëõ and subtracted from ùëß will
give the desired modular reduction value ùëü . The algorithm requires
selecting a base ùëè, which when chosen as a power of two gives
an efficient implementation in hardware. We select ùëè as 4 and we
precompute the parameters of Barrett reduction (ùëò and ùúá) as these
parameters are fixed and do not change at any point in computation.
Our modified hardware-friendly version of the Barrett reduction is
shown in Algorithm 6. In our hardware implementation, the divi-
sion operations are performed using right shift operation (line 1)
and modular reductions are performed using AND operation (line
2). This optimization is possible because ùëè is a power-of-2 and for
powers-of-2, modular reduction can be efficiently done by masking
the lower-order bits using AND operation. Thus, we avoid all large
division operations. However, we need to perform two large 258-bit
multiplications as the parameter ùúá is a 258-bit integer.

Rashmi Agrawal, Ji Yang, and Haris Javaid

Algorithm 6: Hardware-friendly Barrett Reduction
Input: ùëõ, ùëè = 4, ùëò = ‚åälogùëè ùëõ‚åã + 1, 0 ‚â§ ùëß < ùëè2ùëò , and ùúá = ‚åä ùëè2ùëò
ùëõ ‚åã
Output: ùëß mod ùëõ

1: ÀÜùëû ‚Üê (ùëß >> 2(ùëò ‚àí 1)).(ùúá >> 2(ùëò + 1))
2: ùëü ‚Üê ùëß & (ùëèùëò+1 ‚àí 1) ‚àí ÀÜùëû.ùëõ & (ùëèùëò+1 ‚àí 1)
3: if (ùëü < 0) then
ùëü ‚Üê ùëü + ùëèùëò+1
4:
5: end if
6: while (ùëü ‚â• ùëõ) do
ùëü ‚Üê ùëü ‚àí ùëõ
7:
8: end while
9: Return(ùëü )

For 258-bit multiplication, we again use the hybrid approach pro-
posed in Algorithm 3. However, we set the parameter ùëä = 6 and
split the input operands into 43-bit multi-word integers. In addition,
instead of a single Karatsuba-Ofman split as in Algorithm 3, we
perform a two-level Karatsuba-Ofman split to efficiently leverage
the DSP blocks for 43-bit multiplications. At level-1, we split 43-bit
operands into 32- and 11-bit integers. Then at level-2, we again split
32-bit integers into 16-bit integers (see Figure 4). Thus, effectively
we perform only 16-bit √ó 16-bit, 16-bit √ó 11-bit, and 11-bit √ó 11-bit
multiplications instead of 43-bit multiplication. For example, a 43-
bit multiplication can be performed as follows:

Step-1: Split ùê¥[42 : 0] into ùëé0 ‚Üê ùê¥[10 : 0] and ùëé1 ‚Üê ùê¥[42 : 11]
Step-2: Split ùêµ [42 : 0] into ùëè0 ‚Üê ùêµ [10 : 0] and ùëè1 ‚Üê ùêµ [42 : 11]
Step-3: ùëà0, ùëê0 ‚Üê ùëé0 ‚àó ùëè0 // 11-bit√ó11-bit multiplication
Step-4: ùëà1, ùëê1 ‚Üê (ùëé0 ‚àó ùëè1) + ùëà0 // 11-bit√ó32-bit multiplication
Step-5: ùëà2, ùëê2 ‚Üê ùëê1 + (ùëé1 ‚àó ùëè0) // 11-bit√ó32-bit multiplication
Step-6: ùëà3, ùëê3 ‚Üê (ùëé1 ‚àóùëè1) +ùëà1 +ùëà2 // 32-bit√ó32-bit multiplication
Step-7: ùëê ‚Üê (ùëà3, ùëê3, ùëê2, ùëê0) // 86-bit multiplication result

In steps-4 and 5 above, we need to perform an 11-bit √ó 32-bit mul-
tiplication, which we further simplify as follows:

Step-1: Assign ùëé1ùëôùëúùë§ùëíùëü ‚Üê ùëé1 [15 : 0] and ùëé1‚Ñéùëñùëî‚Ñéùëíùëü ‚Üê ùëé1 [31 : 16]
Step-2: Pad a 0 (in MSB) to ùëè0 to make it 12-bits
Step-3: ùëüùëôùëúùë§ùëíùëü ‚Üê ùëé1ùëôùëúùë§ùëíùëü ‚àó ùëè0 // ùëüùëôùëúùë§ùëíùëü is 28-bits
Step-4: ùëü‚Ñéùëñùëî‚Ñéùëíùëü ‚Üê ùëé1‚Ñéùëñùëî‚Ñéùëíùëü ‚àó ùëè0 // ùëü‚Ñéùëñùëî‚Ñéùëíùëü is 28-bits
Step-5: ùëüùëöùëñùëë ‚Üê ùëüùëôùëúùë§ùëíùëü [27 : 16] + ùëü‚Ñéùëñùëî‚Ñéùëíùëü [11 : 0] // ùëüùëöùëñùëë is 13-bits
Step-6: ùëü‚Ñéùëñùëî‚Ñéùëíùëü ‚Üê ùëü‚Ñéùëñùëî‚Ñéùëíùëü [26 : 12] + ùëüùëöùëñùëë [12]
Step-7: ùëüùëíùë†ùë¢ùëôùë° ‚Üê (ùëü‚Ñéùëñùëî‚Ñéùëíùëü [26 : 12], ùëüùëöùëñùëë [11 : 0], ùëüùëôùëúùë§ùëíùëü [15 : 0])

Figure 4: Proposed 258-bit multiplication approach.

A[0]A[1]A[5]...B[0]B[1]B[5]...a1[0]a0[0]258-bits258-bits43-bits11-bits32-bitsb1[0]b0[0]43-bits11-bits32-bitsa1H[0]a1L[0]16-bits16-bitsb1H[0]b1L[0]16-bits16-bitsLevel-1 Karatsuba splitLevel-2 Karatsuba splitb0[0]11-bitsa0[0]11-bitsEfficient FPGA-based ECDSA Verification Engine for Permissioned Blockchains

Note that in step-5 above, ùëüùëöùëñùëë is 13 bits instead of 12 bits to ac-
count for an additional carry bit after addition. Note that although
the steps listed above are specific to a 43-bit multiplier, they can
be generalized to any bit-width that is not a multiple of the DSP
multiplier‚Äôs input bit-width (assumed 16 in our case) and then can
be efficiently implemented leveraging the DSP blocks.

Modulo Inverse Module: NIST recommends using Extended Eu-
clidean algorithm [23] to compute modulo inverse in ECDSA veri-
fication algorithm. However, extended Euclidean algorithm is ex-
pensive to implement in hardware requiring 256-bit division and
multiplication to compute quotient and remainder respectively. Sec-
ond popular option, the Fermat‚Äôs theorem [38] is comparatively
efficient to implement in hardware as it requires only multiplica-
tions. However, it involves 267 modular multiplications leading
to a higher latency. Fermat‚Äôs theorem approach is more suitable
when a side-channel resistant implementation (computation time
is independent of the input) is a must.

We choose to implement an optimized, faster modulo inverse
algorithm proposed by Chen and Qin [2]. This algorithm is suitable
for hardware implementation as it has very low resource footprint
and also incurs a low latency. The algorithm computes a modulo
inverse using only right shift and addition operations and at any
given time only two 256-bit adders are operating in parallel. We
observe that the latency of this algorithm ranges from 35-600 clock
cycles depending on the input, however for real test cases, the la-
tency averages close to 550 clock cycles across multiple evaluations.
It is worth noting that we modified the actual algorithm to take
modulus as an input because we leverage the same algorithm to
perform modulo inverse with respect to ùëõ (line 4 of Algorithm 1)
as well as to convert projective Chudnovsky coordinates back to
affine coordinates wherein we need to compute modulo inverse
with respect to ùëù.

5.2 Point Arithmetic
During ECDSA signature verification, we need to perform two
scalar-point multiplications and one point addition operation (line
7 in Algorithm 1). We first present our generic approach to point
arithmetic that can be leveraged in any application requiring fast
ECDSA signature verification. We will discuss our optimized Hyper-
ledger Fabric-specific point arithmetic approach later in Section 6.
We leverage the simultaneous-point multiplication (SPM) Al-
gorithm 7, also known as ‚ÄúShamir‚Äôs trick‚Äù, to operate on both the
generator point (P) and public key coordinates (Q) at the same time.
In addition, this algorithm eliminates the need to perform the point
addition separately. We conducted an analysis on how the number
of operations varies when different point representations such as
binary, NAF, joint-sparse form (JSF), and width-ùë§ NAF are used in
Algorithm 7. Table 2 shows that point double operations largely
remain the same while point addition operations can be reduced
to as low as 112 when width-ùë§ NAF is used. Note that width-ùë§
NAF conversion can be done in hardware using the algorithm-3.35
from [12], and is trivial in comparison to point arithmetic. We use
ùë§ = 4 to keep the storage requirements minimal.

In Algorithm 7, point double operation (line 6) and point addi-
tions (lines 8, 10, 13, 15) cannot be done in parallel as they depend

Algorithm 7: Width-ùë§ NAF method for SPM
Input: Width ùë§, integers ùëò1 and ùëò2, points P and Q
Output: ùëò1P + ùëò2Q
1: Compute: ùëñP and ùëñQ for ùëñ ‚àà {1, 3, . . . , 2ùë§ ‚àí 1}
2: Compute ùëÅ ùê¥ùêπùë§ (ùëò1) and ùëÅ ùê¥ùêπùë§ (ùëò2)
3: ùëô = ùëöùëéùë• {‚Ñì1, ‚Ñì2} where ‚Ñì1 and ‚Ñì2 are lengths of ùëÅ ùê¥ùêπùë§ (ùëò1) and

ùëÅ ùê¥ùêπùë§ (ùëò2)

4: A = ‚àû
5: for ùëñ from ùëô ‚àí 1 down to 0 do
6: A = 2A
7:

if ùëò1 [ùëñ] > 0 then

8:

9:

10:

11:

12:

13:

14:

15:

A = A + ùëò1 [ùëñ]P

else

A = A ‚àí ùëò1 [ùëñ]P

end if
if ùëò2 [ùëñ] > 0 then

A = A + ùëò2 [ùëñ]Q

else

A = A ‚àí ùëò2 [ùëñ]Q

end if
16:
17: end for
18: Return(A)

Table 2: Number of point arithmetic operations in SPM.

Representation

Point double

Point add

Binary
NAF
JSF
width-ùë§ NAF (ùë§ = 4)

256
256
256
257

193
148
130
~112

on each other. However, we reduce the number of these operations
by computing various values of G (3G, 5G, 7G, 9G, 11G, 13G, 15G)
offline and storing them in BRAM because G is known in advance.
This requires 1120 bytes of storage space but reduces the com-
putation of line 1 to only K (3K, 5K, 7K, 9K, 11K, 13K, 15K) in
hardware. For these values, 3K is computed by performing a point
double on K followed by a point addition. We store the 2K value
temporarily and reuse it; for example, 5K is computed by perform-
ing a point addition between 3K and 2K. Therefore, we only need
one point double and seven point addition operations in hardware
to compute all the required values. Overall, we significantly reduce
the number of point double and addition operations with the use of
width-ùë§ NAF, and offline and optimized computation for G and K.

5.3 ECDSA Verification Engine
Figure 5(a) depicts the architecture of our generic ECDSA verifi-
cation engine, using the modular and point arithmetic modules
described earlier. We instantiate only one module corresponding
to a unique modular arithmetic operation to keep the resource
utilization low. Figure 5(b) depicts the data flow in the ECDSA
verification engine using SPM algorithm. Even with single instan-
tiation of the modular arithmetic modules, we leverage as much
parallelism as possible by scheduling different operations in par-
allel to efficiently utilize the hardware resources. For example, we

Rashmi Agrawal, Ji Yang, and Haris Javaid

Figure 5: Generic ECDSA verification engine: (a) Architecture (b) Data flow.

perform the ùëÅ ùê¥ùêπùë§ (ùëò2) conversion in parallel with the second mod-
ular multiplication. Similarly, ùëÅ ùê¥ùêπùë§ (ùëò1) conversion happens in
parallel to the computation on line 1 in Algorithm 7. Thus, no addi-
tional clock cycles are spent in NAF conversions. From amongst all
the modules, integer multiplication and modular reduction are the
heavily utilized modules.

It is worthwhile to reiterate that an additional point addition op-
eration is not required in this implementation because it is absorbed
in the SPM operation. However, after the multiple-point multiplica-
tion operation, we need an additional operation to convert ùë• from
projective Chudnovsky coordinate back to affine coordinate for
final comparison.

6 ECDSA VERIFICATION FOR HL FABRIC
In this section, we propose optimizations in the context of permis-
sioned blockchains specifically HL Fabric. We exploit the fact that
some parameters are fixed apriori while other parameters are avail-
able in advance, and hence both of these can be preprocessed to
speedup ECDSA verification operation. More specifically, we take
advantage of the fact that the generator point G is fixed and the pub-
lic key coordinates K = (ùë• K, ùë¶K ) are known well in advance before
the ECDSA verification starts. The ProtocolProcessor in Blockchain
Machine (see Figure 1) processes the incoming data and extracts
the public key and ECDSA signature information. Therefore, as
soon as the public key coordinates are available, we can start pro-
cessing them. With this goal in mind, we leverage the fixed-point
multiplication (FPM) algorithm (refer Algorithm 8) to perform point
arithmetic instead of simultaneous-point multiplication algorithm.

Algorithm 8: Fixed-base NAF windowing method for FPM
Input: Window width ùë§, ùëë = 256/ùë§, ùëò, point P
Output: ùëò P
1: Precompute: Pùëñ = 2ùë§ùëñ P, 0 ‚â§ ùëñ ‚â§ ùëë
2: Compute NAF(ùëò)
3: ùêº = (2ùë§+1 ‚àí 2)/3
4: A = ‚àû, B = ‚àû
5: for ùëó from ùêº down to 1 do
6:

For each ùëñ for which ùëòùëñ = ùëó do B = B + Pùëñ
For each ùëñ for which ùëòùëñ = ‚àíùëó do B = B ‚àí Pùëñ

7:
8: A = A + B
9: end for
10: Return(A)

The algorithm starts by precomputing various powers-of-2 point
multiplications for a point P which is known apriori (for example,
when ùë§ = 4, then precomputations will be P, 16P, 256P, and so
on). As the generator point is fixed, we precompute these values
offline and store the values in the BRAM on FPGA. For the public
key coordinates, we design a separate precompute block, outside
of the ECDSA verification engine, which runs binary scalar-point
multiplication algorithm (algorithm-3.27 in [12]) with point double
operations only to precompute the values mentioned earlier (i.e.,
P,16P, etc). Point addition operations are not required as we are
computing power-of-2 point multiplications only, which can be
computed using successive point double operations. We further
optimize the precompute block by reducing the number of point
double operations that it needs to perform. For example, if we want
to compute 256P, we need not start point double operations all
the way from P. Instead, we can use the value of 16P that was
computed in the previous step, thus reducing the number of point
double operations from ùë§ùëñ to ùë§ in each step ùëñ where 0 ‚â§ ùëñ ‚â§ ùëë. This
optimization helps reduce the number of point double operations
from over 8000 to only 252 when ùë§ = 4 and ùëë = 64.

The precompute block computes the required point values for
public key and stores them in the BRAM. The computation within
the actual ECDSA verification reduces to lines 4-8 in Algorithm 8.
Consequently, ECDSA verification comprises of just point addition
operations with the point double operations moved to precompu-
tation. We use the fixed-base (with base ùë§ = 4) NAF windowing
method to reduce the number of point addition operations. Note
that the fixed-point multiplication algorithm is executed twice;
once for the generator point G accessing offline computed point
values in line 1, and second time for the public key K accessing
precomputed point values in line 1.

Figures 6 and 7(a) show the architecture of our HL Fabric-specific
ECDSA verification engine. The precompute block is placed inside
the ProtocolProcessor to store all the required point values in BRAM.
With projective Chudnovsky coordinates, we need about 20ùêæùêµ of
memory to store all the precomputed point values (including point

Figure 6: Integration of Precompute with ProtocolProcessor.

ModuloInverseCompareNAFw(k1)Modular Mult.IntegerMult.BarrettReductionModularMult.IntegerMult.BarrettReductionAffineConversionModuloInverseIntegerMult.ModularReductionSimultaneous-pointMultiplicationPointAddPointDoublesrzvalidNAFw(k2)Memory (BRAM)Control Unit (FSM)ModuloInverseModularReductionIntegerMultiplicationModularSubtractionBarrettReduction43-bitMultiplierMemory (BRAM)(a)(b)ProtocolProcessorPacketProcessorDataProcessorHashCalc.DataWriterPrecomputefor ECDSAPointsStorage(BRAM)Efficient FPGA-based ECDSA Verification Engine for Permissioned Blockchains

Figure 7: ECDSA verification engine with Precompute block: (a) Architecture (b) Data flow.

G and K). In a permissioned blockchain like HL Fabric, the number
of nodes are limited and hence the number of unique identities
(public keys) is limited and those identities are known apriori. In
a typical HL Fabric network, there may only be tens of unique
identities, thus storage of precomputed points will not incur a high
memory overhead. The precompute block has its own modular
arithmetic modules and the finite state machine (FSM) controlling
the movement of data between these modules. The ECDSA verifi-
cation engine has its own set of modular arithmetic modules. We
again instantiated only one module per modular arithmetic opera-
tion to keep the resource utilization low. This is beneficial especially
in Blockchain Machine where it is desirable to have many ECDSA
verification engines within the BlockProcessor module.

Figure 7(b) depicts the data flow in our ECDSA verification en-
gine with the precompute block. The precomputed points are read
from the BRAM by the ECDSA verification engine. The read from
BRAM is not a bottleneck as read will happen once in a while and
then hundreds of clock cycles are spent on processing the data.
Since the number of unique public keys is limited, the precom-
pute block is executed only when a new public key is encountered
and the precomputed values are stored in the BRAM. Hence, the
precompute block does not become the bottleneck. Both in precom-
pute and ECDSA verification engine, with single instantiation of
the modular arithmetic modules, most operations are performed
serially. However, we leverage as much parallelism as possible by
scheduling different modular operations in parallel. For example,
the NAF conversion of ùëò2 happens in parallel with the second mod-
ular multiplication involving ùëò1. Similarly, the NAF conversion of
ùëò1 also happens in parallel with the first fixed-point multiplication.
After the fixed-point multiplication, a point addition operation
is required (line 7 of Algorithm 1) and conversion back to affine
coordinates for comparison.

7 EVALUATION
We designed our ECDSA verification engine and all of its modules
in Verilog 2001 and synthesized the design using Xilinx Vivado de-
sign suite 2019.2. For functional verification, we generated the test
cases using open-source code from OpenSSL library [26] and also
from the actual data, i.e., public key, signature, and hash used in Hy-
perledger Fabric. We also successfully verified the test vectors [24]

from NIST for ùëÉ-256 (along with SHA-256) ECDSA signature verifi-
cation. We implement the design on Xilinx Alveo U250 FPGA. We
synthesize our design on this FPGA board because blockchains are
typically deployed on a cloud server with FPGA accelerator card.
Since our goal is to integrate the ECDSA engine into a blockchain
hardware accelerator [16], which is quite complex and operates at
250 MHz frequency, we limit the operating frequency of our ECDSA
verification engine to 250 MHz even when it is possible to obtain
higher frequencies with DSP blocks like in [10]. This restriction on
frequency will also enable better scalability within the blockchain
accelerator by instantiating multiple ECDSA engines for distributed
computation.

Throughout this section, we report frequency (freq.) in MHz, la-
tency in clock cycles, and throughput (TP) in operations per second.
When comparing our work with existing state-of-the-art implemen-
tations, we cautiously compare the clock cycles of different designs
instead of absolute runtimes to overcome the inherent improve-
ments from upgraded technologies and operating frequencies, and
hence provide a fair comparison. In an ideal situation, the existing
works should have been implemented on the Alveo U250 FPGA
board as well. However, those designs are not open-source and
implementation of each requires significant effort. Furthermore,
we do not present direct comparison results with CPU/GPU im-
plementations because our goal is not to compete with CPU/GPU
implementations but to provide the best FPGA implementation that
can be used in accelerators for permissioned blockchains (since
they are naturally suitable for FPGA based acceleration [16]).

7.1 Modular Arithmetic
We start by discussing the area footprint and latency of the individ-
ual modular arithmetic modules as listed in Table 3. With all the
proposed optimizations, our modular arithmetic modules incur low
resource utilization. The integer multiplication module consumes
the most LUTs, which can be reduced using BRAM-based optimiza-
tions. We, however, leave this optimization for future work. Most
modules perform fast computations except for Barrett reduction
which has the highest latency because of two serial 258-bit multipli-
cations. We made this design choice to keep the hardware resource
utilization low. Moreover, modular reduction using Barrett reduc-
tion is performed only in lines 5, 6, and 8 of Algorithm 1, which is
not the critical path (line 7 is the critical path in ECDSA verification).

Memory (BRAM)Memory (BRAM)Memory (BRAM)Memory (BRAM)Precompute for KeyBinary-point MultiplicationPoint DoublePointAddModuloInverseCompareNAF(k2)NAF(k1)ModularMult.IntegerMult.BarrettReductionModular Mult.IntegerMult.BarrettReductionFixed-point Mult.PointAddFixed-point Mult.PointAddAffineConversionModuloInverseIntegerMult.ModularReductionMemory (BRAM)srzvalidECDSA Verification EngineControl Unit (FSM)ModuloInverseModularReductionInteger Mult.ModularSubtractionBarrettReduction43-bitMultiplierMemory (BRAM)PrecomputeModularReductionInteger Mult.ModularSubtractionMemory (BRAM)ControlUnit (FSM)(a)(b)Table 3: Hardware results of various modular arithmetic
modules.

Operation

Modular subtraction
Integer multiplication
ùëÉ-256 Modular Reduction
Barrett Reduction
Modulo Inverse

LUT

616
5471
2225
2130
3503

FFs

DSP

Latency

781
7980
789
3597
1313

1
128
0
9
0

10
39
19
1, 552
550

Table 4: Performance comparison of point arithmetic.

Platform

Freq.

Latency

TP

Operation

PA [Our work]
PA [10]

PD [Our work]
PD [10]

PM [Our work]
PM [10]
PM [37]
PM [19]
PM [22]
PM [21]
PM [31]

Alveo U250
Virtex-4

Alveo U250
Virtex-4

Alveo U250
Virtex-4
Virtex-2 Pro
Virtex-7
Virtex-2 Pro
Virtex-2
Virtex-E

250
375

250
375

250
375
108.2
124.2
67
39.5
39.7
250
375
250

622
980

435
700
190, 976
303, 450
451, 733
462, 520
567, 500
960, 000
987, 500
231, 406
366, 905
181, 024

402K
382K

574K
535K
1, 309
1, 236
240
268
118
41
40
1, 080
1, 022
1, 381

SPM [Our work]
SPM [10]
SPM-NAF [Our work] Alveo U250

Alveo U250
Virtex-4

Note that our modular subtraction module is 1.8√ó faster and our
modular multiplication (integer multiplication+ùëÉ-256 Modular Re-
duction) is 1.2√ó faster than the implementations in state-of-the-art
work [10].
7.2 Point Arithmetic
We first evaluate the performance of our point addition (PA) and
point double (PD) operations. For a fair comparison, we also report
the latencies from state-of-the-art FPGA-based work [10], which
also uses projective Chudnovsky coordinates like our implementa-
tion. We observe that both of our point add and double operations
are ~1.6√ó than their point add and double operations in terms of
clock cycles (refer Table 4). Note that their design involves a dual
clock which is much more complicated to implement than our de-
sign, which uses only a single clock throughout the entire design.
Moreover, the authors in [10] focus on optimizing only the point
arithmetic, and do not implement the entire ECDSA verification
algorithm. This makes it much easier for their stand-alone point
arithmetic modules to run at higher frequencies.

Now we compare the latencies of our scalar point multiplica-
tion (PM) with state-of-the-art works that implement scalar point
multiplication (refer Table 4). We observe that our PM is ~1.6√ó to
~5√ó faster than these existing works in terms of clock cycles. As
most of these prior implementation were done using binary double
and add algorithm, our PM is also implemented using the same ap-
proach. Note that implementation done by Kudithi et al. [19] works
with affine coordinates while rest of the works use projective coor-
dinates. Next, we compare the latencies of our simultaneous-point
multiplication (SPM) operation. As mentioned in Section 5.2, we

Rashmi Agrawal, Ji Yang, and Haris Javaid

perform SPM operation using width-4 NAF approach. However, for
fair comparison with [10], which uses a binary representation, we
estimated the latencies using the number of operations performed
in Algorithm 7 with binary representation. More importantly, our
SPM with width-4 NAF incurs about half the latency owing to our
faster modular arithmetic modules.

7.3 ECDSA Verification Engine
Table 5 presents the hardware resource utilization and latency of
the ECDSA verification engine. Our ECDSA verification engine
takes ~190, 000 clock cycles for a single signature verification lead-
ing to a throughput of 1, 315 signature verifications per second.
Although many prior works have accelerated point arithmetic on
FPGA, most works did not implement the entire ECDSA verification
algorithm. We found only two relevant comparable works in litera-
ture that accelerated ECDSA signature verification for NIST ùëÉ-256
on FPGA, which are reported in Table 6. Glas et al. [8] reported the
implementation results of the complete signature generation and
verification unit on a Xilinx XC5VLX110T Virtex-5 FPGA. Their sig-
nature verification unit includes a hash generator ip which incurs
a latency of 68 clock cycles that we have adjusted accordingly for
a fair comparison. Their design achieves a throughput of 110 sig-
nature verifications per second that is about 12√ó lower than the
throughput of our ECDSA verification engine.

Kne≈æeviƒá et al. [18] did an ASIC implementation for ECDSA
verification, but reported performance numbers by synthesizing
their design on a Xilinx Virtex-4 FPGA. Their design results in a
throughput of 475 signature verifications per second, which is ~2.8√ó
lower than the throughput of our ECDSA verification engine. Note
that this design is primarily an ASIC implementation, which means
that it has a different optimization flow, resulting in a much lower
operating frequency and requiring less clock cycles. Therefore, we
do not compare frequency and latency for this design, but compare
the throughput for a fair comparison. We do not compare the hard-
ware resource utilization as prior designs use different FPGA boards
for implementation. Moreover, we cannot estimate the hardware
cost of these existing designs [8, 18] for Alveo U250 FPGA as these
designs are not open-sourced.

7.4 ECDSA Verification Engine for HL Fabric
Table 7 presents the hardware resource utilization and latency of
our ECDSA verification engine with precompute block. We ob-
serve that the precompute block incurs a latency of ~120, 000 clock
cycles. Then, the actual ECDSA verification engine requires only
~92, 000 clock cycles to perform a single signature verification. With

Table 5: Hardware results of ECDSA engine.

Design

LUT

FFs

ECDSA verf.

24394

10961

DSP BRAM Latency
190, 000

137

5

Table 6: Performance comparison of ECDSA engine.

Work

Platform

Freq.

Our work Alveo U250
[8]
[18]

Virtex-5
Virtex-4

250
50
33.3

Latency
190, 000
454, 140
69, 972

TP
1, 315
110
475

Efficient FPGA-based ECDSA Verification Engine for Permissioned Blockchains

Table 7: Hardware results of ECDSA engine (250 MHz).

Design

Precompute
ECDSA eng.

LUT

14088
21759

FFs

1417
5625

DSP BRAM Latency
120, 000
92, 000

129
137

15
15

TP

-
2, 717

Table 8: TP of Blockchain Machine with ECDSA engines.

No. of Engines Generic ECDSA HL Fabric ECDSA

4
7
10

1, 290 tps
2, 525 tps
3, 650 tps

2, 650 tps
5, 200 tps
7, 520 tps

this approach, we achieve a throughput of 2, 717 signature verifica-
tions per second.

We also evaluate the HL Fabric-specific ECDSA verification en-
gine in the context of Blockchain Machine. Table 8 presents the
throughput (transactions per second) of Blockchain Machine with
both the generic and Hyperledger Fabric-specific ECDSA verifica-
tion engines. We observe a 2√ó improvement in throughput with our
precompute optimization. We also change the number of ECDSA
verification engines from 4 ‚àí 10, and observe that both types of en-
gines scale the throughput in a similar trend (~1.57√ó improvement).

8 CONCLUSION
In this work, we focused on an FPGA-based efficient implemen-
tation of ECDSA signature verification, in order to improve the
performance of permissioned blockchains that aim to use FPGA-
based accelerators. We presented several FPGA-specific algorithmic
optimizations for modular arithmetic modules. With efficient utiliza-
tion of DSP blocks on FPGA, we showed on average 1.5√ó speedup
compared to [10]. We also presented optimizations for SPM and
FPM algorithms, and used projective Chudnovsky coordinate with
optimal width NAF representations. With these optimizations, we
observed on average 3.2√ó speedup in our point arithmetic opera-
tions compared to [10, 19, 21, 22, 31, 37]. Our ECDSA verification
engine, using these modular and point arithmetic modules, per-
forms a signature verification in 760ùúáùë† resulting in a throughput
of 1, 315 verifications per second, which is ~2.5√ó faster than [8, 18].
With HL Fabric-specific optimizations, our ECDSA verification en-
gine can perform a signature verification in 368ùúáùë† resulting in a
throughput of 2, 717 verifications per second.

REFERENCES
[1] Shehar Bano, Alberto Sonnino, Mustafa Al-Bassam, Sarah Azouvi, Patrick Mc-
Corry, Sarah Meiklejohn, and George Danezis. 2017. Consensus in the Age of
Blockchains. In CoRR, arXiv:1711.03936. arXiv:1711.03936 http://arxiv.org/abs/
1711.03936

[2] Chuanpeng Chen and Zhongping Qin. 2009. Fast algorithm and hardware archi-
tecture for modular inversion in GF (p). In 2009 Second International Conference
on Intelligent Networks and Intelligent Systems. IEEE, 43‚Äì45.

[3] Grant Chung, Luc Desrosiers, Manav Gupta, Andrew Sutton, Kaushik Venkatadri,
Ontak Wong, and Goran Zugic. 2019. Performance Tuning and Scaling Enterprise
Blockchain Applications. In CoRR, arXiv:1912.11456. arXiv:1912.11456 http:
//arxiv.org/abs/1912.11456

[4] Henri Cohen, Atsuko Miyaji, and Takatoshi Ono. 1998. Efficient elliptic curve
exponentiation using mixed coordinates. In International Conference on the Theory
and Application of Cryptology and Information Security. Springer, 51‚Äì65.

[5] Consensys. 2020. Quorum. Online: https://consensys.net/quorum/.
[6] Michael del Castillo. 2021. Forbes Blockchain 50 2021. https://www.forbes.com/

sites/michaeldelcastillo/2021/02/02/blockchain-50/?sh=58a32cb8231c.

[7] Steven Ehrlich. 2021.

Inside the Class of
2021. https://www.forbes.com/sites/stevenehrlich/2021/02/02/forbes-blockchain-
50inside-the-class-of-2021/?sh=625268fca508.

Forbes Blockchain 50 -

[8] Benjamin Glas, Oliver Sander, Vitali Stuckert, Klaus D M√ºller-Glaser, and J√ºrgen
Becker. 2011. Prime field ECDSA signature processing for reconfigurable embed-
ded systems. International Journal of Reconfigurable Computing 2011 (2011).
[9] Christian Gorenflo, Stephen Lee, Lukasz Golab, and S. Keshav. 2019. FastFabric:
Scaling Hyperledger Fabric to 20,000 Transactions per Second. In 2019 IEEE
International Conference on Blockchain and Cryptocurrency (ICBC). https://doi.
org/10.1109/BLOC.2019.8751452

[10] Tim G√ºneysu and Christof Paar. 2008. Ultra high performance ECC over NIST
primes on commercial FPGAs. In International Workshop on Cryptographic Hard-
ware and Embedded Systems. Springer, 62‚Äì78.

[11] Nils Gura, Arun Patel, Arvinderpal Wander, Hans Eberle, and Sheueling Chang
Shantz. 2004. Comparing elliptic curve cryptography and RSA on 8-bit CPUs. In
International workshop on cryptographic hardware and embedded systems. Springer,
119‚Äì132.

[12] Darrel Hankerson, Alfred J Menezes, and Scott Vanstone. 2006. Guide to elliptic

curve cryptography. Springer Science & Business Media.

[13] Hyperledger. 2019. Hyperledger Fabric. Online: https://www.hyperledger.org/

projects/fabric.

[14] Hyperledger. 2020. Hyperledger Besu. Oline: https://www.hyperledger.org/

projects/besu.

[15] Haris Javaid, Chengchen Hu, and Gordon Brebner. 2019. Optimizing validation
phase of hyperledger fabric. In IEEE 27th International Symposium on Modeling,
Analysis, and Simulation of Computer and Telecommunication Systems (MASCOTS).
https://doi.org/10.1109/MASCOTS.2019.00038

[16] Haris Javaid, Ji Yang, Nathania Santoso, Mohit Upadhyay, Sundararajarao Mohan,
Chengchen Hu, and Gordon Brebner. 2021. Blockchain Machine: A Network-
Attached Hardware Accelerator for Hyperledger Fabric. In CoRR, arXiv:2104.06968.
arXiv:2104.06968

[17] Jang Hyun Ji and Ho Won Kima. 2018. ASIC implementation for an ECC processor.

IDEC Journal of Integrated Circuits and Systems (2018).

[18] Miroslav Kne≈æeviƒá, Ventzislav Nikov, and Peter Rombouts. 2016. Low-latency
ECDSA signature verification‚ÄîA road toward safer traffic. IEEE Transactions on
Very Large Scale Integration (VLSI) Systems 24, 11 (2016), 3257‚Äì3267.

[19] Thirumalesu Kudithi and R Sakthivel. 2019. High-performance ECC processor
architecture design for IoT security applications. The Journal of Supercomputing
75, 1 (2019), 447‚Äì474.

[20] Zhe Liu, Hwajeong Seo, Johann Gro√üsch√§dl, and Howon Kim. 2015. Efficient
implementation of NIST-compliant elliptic curve cryptography for 8-bit AVR-
based sensor nodes. IEEE Transactions on Information Forensics and Security 11, 7
(2015), 1385‚Äì1397.

[21] C. McIvor, M. McLoone, and J.V. McCanny. 2004. An FPGA elliptic curve cryp-
IET Conference Proceedings (January 2004),

tographic accelerator over GF(p).
589‚Äì594(5).

[22] Nele Mentens. 2007. Secure and efficient coprocessor design for cryptographic

applications on FPGAs. https://lirias.kuleuven.be/retrieve/67565.

[23] NIST. 2013. FIPS DSS. Online: https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.

186-4.pdf.

[24] NIST. 2021. FIPS DSA TEST VECTORS. Online: https://csrc.nist.gov/projects/

cryptographic-algorithm-validation-program/digital-signatures.

[25] Dong-won Park, Nam Su Chang, Sangyub Lee, and Seokhie Hong. 2020. Fast Im-
plementation of NIST P-256 Elliptic Curve Cryptography on 8-Bit AVR Processor.
Applied Sciences 10, 24 (2020), 8816.

[26] The OpenSSL project. 2021. OpenSSL‚Äîcryptography and SSL/TLS toolkit. Online:

https://www.openssl.org/.

[27] R3. 2019. Corda. Online: https://www.corda.net.
[28] Ciara Rafferty, M√°ire O‚ÄôNeill, and Neil Hanley. 2017. Evaluation of large integer
multiplication methods on hardware. IEEE Trans. Comput. 66, 8 (2017), 1369‚Äì1382.
Ethereumm Set to Kill Graphics Card Mining. On-
line: https://www.pcgamer.com/ethereum-set-to-kill-graphics-card-mining-in-
the-upcoming-months/.

[29] Jacob Ridley. 2021.

[30] Suman Sau, Paresh Baidya, Rourab Paul, and Swagata Mandal. 2021. Binary Field
Point Multiplication Implementation in FPGA Hardware. In Intelligent and Cloud
Computing. Springer, 387‚Äì394.

[31] Dimitrios M Schinianakis, Apostolos P Fournaris, Harris E Michail, Athanasios P
Kakarountas, and Thanos Stouraitis. 2008. An RNS implementation of an ùêπ _{ùëù}
elliptic curve point multiplier. IEEE Transactions on Circuits and Systems I: Regular
Papers 56, 6 (2008), 1202‚Äì1213.

[32] Anissa Sghaier, Medien Zeghid, Chiraz Massoud, and Mohsen Mahchout. 2017.
Design and implementation of low area/power elliptic curve digital signature
hardware core. Electronics 6, 2 (2017), 46.

[33] Jerome A Solinas et al. 1999. Generalized mersenne numbers. Citeseer.
[34] Shoi Tachibana, Shunsuke Araki, Seiji Kajihara, Shigeyuki Azuchi, Yukishige
Nakajo, and Hideki Shoda. 2019. FPGA implementation of ECDSA for Blockchain.
In 2019 IEEE International Conference on Consumer Electronics-Taiwan (ICCE-TW).
IEEE, 1‚Äì2.

[35] Parth Thakkar and Senthil Nathan. 2021. Scaling hyperledger fabric using
pipelined execution and sparse peers. In CoRR, arXiv:2003.05113. arXiv:2003.05113
https://arxiv.org/abs/2003.05113

[36] Parth Thakkar, Senthil Nathan, and Balaji Vishwanathan. 2018. Performance
Benchmarking and Optimizing Hyperledger Fabric Blockchain Platform. In 26th
IEEE International Symposium on the Modeling, Analysis, and Simulation of Com-
puter and Telecommunication Systems (MASCOTS).
https://doi.org/10.1109/
MASCOTS.2018.00034

[37] Jo Vliegen, Nele Mentens, Jan Genoe, An Braeken, Serge Kubera, Abdellah
Touhafi, and Ingrid Verbauwhede. 2010. A compact FPGA-based architecture
for elliptic curve cryptography over prime fields. In ASAP 2010-21st IEEE Inter-
national Conference on Application-specific Systems, Architectures and Processors.
IEEE, 313‚Äì316.

[38] Guangli Xiang and Zhuxiao Cui. 2012. The algebra homomorphic encryption
scheme based on fermat‚Äôs little theorem. In 2012 international conference on
communication systems and network technologies. IEEE, 978‚Äì981.

[39] Jiafeng Xie, Pramod Kumar Meher, Mingui Sun, Yuecheng Li, Bo Zeng, and Zhi-
Hong Mao. 2017. Efficient FPGA implementation of low-complexity systolic

Rashmi Agrawal, Ji Yang, and Haris Javaid

Karatsuba multiplier over ùê∫ùêπ (2ùëö) based on NIST polynomials. IEEE Transactions
on Circuits and Systems I: Regular Papers 64, 7 (2017), 1815‚Äì1825.

[40] Xilinx. 2020. Xilinx Alveo. Online: https://www.xilinx.com/products/boards-

and-kits/alveo.html.

[41] Noura Ben Hadjy Youssef, Wajih El Hadj Youssef, Mohsen Machhout, Rached
Tourki, and Kholdoun Torki. 2014. A low-resource 32-bit datapath ECDSA design
for embedded applications. In 2014 International Carnahan Conference on Security
Technology (ICCST). IEEE, 1‚Äì6.

[42] Gang Zhou, Harald Michalik, and L√°szl√≥ Hinsenkamp. 2009. Improving through-
put of AES-GCM with pipelined Karatsuba multipliers on FPGAs. In International
Workshop on Applied Reconfigurable Computing. Springer, 193‚Äì203.

[43] Jan Zutter, Max Thalmaier, Martin Klein, and Karsten-Olaf Laux. 2009. Accel-
eration of RSA cryptographic operations using FPGA technology. In 2009 20th
International Workshop on Database and Expert Systems Application. IEEE, 20‚Äì25.

