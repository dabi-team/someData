2
2
0
2

r
p
A
8

]

R
C
.
s
c
[

1
v
4
5
2
4
0
.
4
0
2
2
:
v
i
X
r
a

HBFL: A Hierarchical Blockchain-based Federated Learning
Framework for a Collaborative IoT Intrusion Detection

Mohanad Sarhan*1, Wai Weng Lo1, Siamak Layeghy1, Marius Portmann1
1University of Queensland, Brisbane, Australia
*Corresponding Author: m.sarhan@uq.net.au

Abstract

The continuous strengthening of the security posture of IoT ecosystems is vital due to the increasing
number of interconnected devices and the volume of sensitive data shared. The utilisation of Machine
Learning (ML) capabilities in the defence against IoT cyber attacks has many potential beneﬁts. However,
the currently proposed frameworks do not consider data privacy, secure architectures, and/or scalable
deployments of IoT ecosystems.
In this paper, we propose a hierarchical blockchain-based federated
learning framework to enable secure and privacy-preserved collaborative IoT intrusion detection. We
highlight and demonstrate the importance of sharing cyber threat intelligence among inter-organisational
IoT networks to improve the model’s detection capabilities. The proposed ML-based intrusion detection
framework follows a hierarchical federated learning architecture to ensure the privacy of the learning
process and organisational data. The transactions (model updates) and processes will run on a secure
immutable ledger, and the conformance of executed tasks will be veriﬁed by the smart contract. We
have tested our solution and demonstrated its feasibility by implementing it and evaluating the intrusion
detection performance using a key IoT data set. The outcome is a securely designed ML-based intrusion
detection system capable of detecting a wide range of malicious activities while preserving data privacy.

Keywords— Blockchain, Cyber Threat Intelligence, Hierarchical Federated Learning, IoT Intrusion Detection,

Smart Contract

1 Introduction

IoT (Internet of Things) is an ecosystem of interconnected devices, each embedded with computational tools, such as
sensors or processing units, to collect, store, and exchange data over the internet [1]. Each device performs a task to
provide the overall function or purpose of the IoT ecosystem, such as smart homes, healthcare, or industrial operations.
IoT enables remotely controlled devices to collaborate and achieve common objectives. According to research by the
International Data Corporation (IDC), due to the demand for IoT networks, it is estimated that the number of IoT
devices would reach up to 41.6 billion in 2025 [2]. IoT ecosystem can offer great potential to businesses and consumers
due to its digital and automated intelligence capabilities, increasing operational agility and efﬁciency. However, the
security of IoT networks has become one of the main challenges in the implementation of such networks [3].

IoT devices collect and store highly sensitive data, such as personal, ﬁnancial, and medical information, which are
often the target of hackers [4]. The current state of IoT networks’ security posture makes it harder for businesses and
consumers to preserve and trust the security of their digital assets. This is often due to the large, complex, and widely
distributed attack surface as IoT devices are often located in the edge zone of the perimeter [5] and provide an entry
point into an organisational core network. These devices are generally interconnected and in constant communication,
forming an IoT ecosystem; therefore, inﬁltration of any of them poses serious concerns for the privacy and security of
the entire network. Furthermore, since the IoT connects the digital and physical worlds, hacking into IoT devices can
cause critical concerns [6], such as the hijacking of the Ukrainian power grid in 2015 [7], causing power loss in a city
with a population of around 1.4 million.

Therefore, Machine Learning (ML) capabilities have been endorsed in the development of IoT Intrusion Detection
Systems (IDSs) to enhance the validity of transmitted data against cyber attacks. ML is widely and successfully inte-
grated into many domains to empower decision-making systems. The development and usage of ML-based IDS have

1

 
 
 
 
 
 
attracted great attention in the cyber security ﬁeld, to preserve the three principles of information systems; conﬁden-
tiality, integrity, and availability [8]. Current traditional detection methods, such as signature-based IDS, are highly
dependent on IOC (Indicators of Compromise) to discover malicious activities. However, ML-based IDSs have been
designed to distinguish between benign and malicious computer activities using behavioural patterns. Therefore, the
intelligent detection method is highly effective in the discovery of zero-day and Advanced Persistent Threats (APTs)
compared to traditional detection methods [9].

The collaboration between multiple organisations/entities to share Cyber Threat Intelligence (CTI) to improve the
performance of IDSs is not uncommon in the cyber security ﬁeld [10]. Several sources publicly share a large number
of IOCs to be used in the monitoring and detection of emerging threats by signature-based IDS. The sharing of such
IOCs does not represent any security or privacy risks to any organisation. However, as ML-based IDSs do not require
the registration of IOCs, but rather patterns extracted directly from benign and malicious data, CTI has been difﬁcult
to apply in such systems [11], mostly because of security and privacy concerns associated with data sharing. Although
CTI can accelerate the learning process and improve the attack detection capabilities of the learning model, there is a
limited amount of research work providing a solution enabling CTI between organisations adopting ML-based IDS.

In this paper, we propose a Hierarchical Blockchain-based Federated Learning (HBFL) framework to enable CTI
between organisations adopting ML-based IDSs in IoT ecosystems. The outcome of HBFL is a group of organisations
beneﬁting from each other’s threat intelligence while maintaining the privacy of sensitive training log sets internally.
HBFL will promote the practical deployment of ML-based IDSs and improve their attack detection accuracy. HBFL
follows a federated learning scenario, which has been developed to retain the same beneﬁts of centralised learning
methods without the need for local data exchange [12]. Data used in ML training often contain highly sensitive infor-
mation about the users and activities of the IoT network. Therefore, the security preservation of the IoT endpoints and
their data privacy is critical. Federated learning allows training a common ML model across multiple endpoints locally,
thus preserving data privacy, which is critical for IoT ecosystems and the key motivation for the development and usage
of federated learning in general.

The HBFL model is exposed to a variety of heterogeneous data sources and types available at a wide range of
IoT endpoints [13]. Therefore, it increases the generalisability and detection performance of ML-based IDS across
several attack types and benign usage scenarios. Moreover, a vertically integrated variant of federated learning called
Hierarchical Federated Learning (HFL) [14] has been used to enforce additional privacy-preserving mechanisms and
accommodate large-scale deployments. The key difference is the addition of a middle layer of servers (combiners) per-
forming model weight aggregation [15] between the group of participating organisational IoT endpoints and the global
server (reducer). These additional control point mechanisms attract many beneﬁts in the management and governance
of the HBFL framework and provide defence layers against adversarial attacks [16].

HBFL removes the trust requirement between organisations or a centralised third party to orchestrate and maintain
the framework functionality. Due to embedded smart contract technologies performing the reducer roles in the federated
learning operation. Smart contract overcomes the lack of trust behaviour which is often a roadblock in any collaboration
process and will motivate and assist the participation of organizations. HBFL orchestration is performed independently,
securely, and transparently on a permissioned blockchain system that is monitored and validated by all participants.
The smart contract will contain the planned HBFL tasks and will monitor the execution results to ensure that only
conforming tasks advance the workﬂow. The permissioned blockchain network provides a trusted hosting platform for
transactional records and values, enabling auditing and accounting for any anomalies or fraud.

In this paper, we propose a novel HBFL framework for collaborative detection of IoT intrusions. The framework
adopts a cloud-fog-edge topology in which IoT endpoints and combiners are hosted on edge and fog perimeters, respec-
tively. The reducer runs on permissioned blockchain-based cloud computing. Furthermore, the overall HFL process
will be orchestrated by a smart contract running on the blockchain. The beneﬁts of the proposed HBFL framework are;

• providing a secure solution to enable CTI between organisations,

• maintaining the privacy of local IoT data logs,

• scalable framework to allow real-world design and deployment,

• omitting the requirement of trusting a single entity to orchestrate the federated learning process, and

• logging the transactional details in a private immutable ledger.

The outcome of HBFL is a securely designed collaborative IoT-IDS model reﬂecting the global intelligence of
several endpoints while ensuring the privacy and security of sensitive training log sets. Most importantly, the framework
solves real-world challenges, such as sharing data and managing processes workﬂow, increasing the chances of potential
deployment in the commercial space. The framework has been evaluated using a key IDS data set, and the results
illustrate the feasibility and efﬁciency of HBFL. The following section provides background and motivation for the
technologies adopted in this paper, followed by a brief review of the related work in Section 3. The design, components

2

and functionality of HBFL are explained in Section 4. Furthermore, Section 5 provides an evaluation use case study
in which a prototype is developed, evaluated, and compared with non-collaborative scenarios. The results are provided
and discussed using various evaluation metrics before concluding.

2 Background

In this section, the motivation of HBFL i.e. CTI and its primary components, i.e. federated learning and blockchains,
are introduced and discussed.

2.1 Cyber Threat Intelligence

CTI is one of the widely adopted techniques in the defence community against cyber attacks. The ultimate goal of CTI
is to share the experiences faced by an organisation, this includes the attack types encountered, as well as the techniques
and tactics used in their execution [17]. Many organisations using signature-based IDS heavily rely on shared intel,
such as Malware Information Sharing Platform (MISP) [18], an open-source CTI platform. Shared intelligence is found
in different forms such as documentation, IP addresses, hash values, and domain names associated with external threat
actors. This intelligence is directly fed to signature-based IDS for analysis and detection.

The collaborative CTI sharing enables each participant to learn from experiences encountered by other organisa-
tions [19]. In ML-based IDS, CTI is challenging to achieve, as benign and malicious training data sets from several
organisations are required for model training, which often poses privacy and security concerns. More importantly,
recently introduced laws such as the General Data Protection Regulation (GDPR) [20] in Europe aim to protect data
privacy and address unauthorised sharing of sensitive user information. Infraction of such laws often attracts serious
legal issues and hefty ﬁnes, in the case of GDPR, the ﬁne can be up to $20 million [21].

However, without CTI, the organisational defence model is limited to local experience and might not generalise
across non-Independent and Identically Distributed (IID) benign and attack sources. Therefore, current methods for
developing IoT IDSs do not scale and are vulnerable to the rapid growth of IoT ecosystems due to the introduction
of new devices, services, and emerging zero-day attacks. Moreover, the requirement of collecting a large amount
of corresponding training data samples for each data class is often a major barrier for small organisations aiming to
effectively design an ML-based IDS, which is addressed by HBFL. Therefore, our proposed HBFL framework aims to
enable CTI between organisations adopting an ML-based IDS. HBFL develops a more comprehensive IDS model by
gathering data from several organisations to be used in the training process.

2.2 Federated Learning

ML models are statistical algorithms capable of learning complex patterns from historical data to provide intelligent
insights into future data [22]. The design of such ML models requires a training process in which the learning models
extract useful semantics from the available data logs. In an IoT ecosystem, these training log sets are generated locally
by many different digital endpoints such as mobile phones, smart appliances, sensors, etc. The quality and quantity of
data used in the training and evaluation of learning models have a direct effect on the performance of ML-based IDSs
[23]. There are three main types of ML; a) localised learning - the model is trained locally using data sets generated
by a single endpoint [24], b) centralised learning - the model is trained centrally using data sets collected from multiple
endpoints [24], and c) federated learning - the model is trained across multiple endpoints using local data sets without
exchanging them [25].

There are beneﬁts and limitations to each of the different ML scenarios. Figure 1 represents the architectural
difference between each ML scenario. Localised ML models often achieve great performance over local IID data
samples [26]. However, this performance does not generalise across other non-IID and heterogeneous data samples.
Given that the network and host data are unique to each endpoint’s activity, localised learning is unfeasible in the design
of ML-based IDSs [27]. Therefore, centralised ML models were designed to overcome such limitations by training
over multiple sourced non-IID data samples. This exposes the learning model to a large number of heterogeneous data
samples, each representing a unique behaviour of benign and malicious logs. However, this method does not consider
security aspects or respect users’ privacy, due to the requirement of collecting and sharing logs centrally [28]. This
often exposes sensitive information and behaviour in the case of IoT data.

Federated learning techniques have been developed to ensure the privacy of data used in the design of ML by
training a model locally at each participating endpoint [25]. Only the updated model parameters are shared with a
trusted entity where an aggregation process is performed to combine local updates received from several endpoints into
a single global model [29]. The key beneﬁt of adopting a federated learning technique in the design of ML-based IDS

3

(a) Localised

(b) Centralised

(c) Federated

Figure 1: Machine learning scenarios

is the exposure of the model to a variety of heterogeneous data sources. This method improves the generalisability and
detection performance of IoT attacks while protecting the privacy of local endpoint data samples [12]. Moreover, the
resource requirements such as storage, computational power, and network bandwidth are reduced as there is no transfer
or collection of training data sets centrally. Therefore, the application of federated learning in IoT networks is highly
motivated, and many use cases have been proposed in the literature that adopt this architecture, including the design of
IoT IDSs [30].

The most common federated learning aggregation technique is proposed by Google, known as Federated Averaging
(FedAvg) [29]. The weight averaging algorithm attracts many beneﬁts such as being robust to non-IID and unbalanced
data distributions. It is also cost-efﬁcient and can run on endpoints with limited communication capabilities by reducing
the number of federated learning rounds required to reach maximum performance. In a standard federated learning
scenario using FedAvg, the global server broadcasts an initialised model weight w to each client k. Each client computes
the gradient gk on its local training data samples. The updated parameters are calculated using wk
t+1 ← wt − ηgk for
E epochs, where t represents the federated learning round and η is the local learning rate. Once the required number
of updated weights is received during the round wt , the global server aggregates them using Equation 1, where n is the
number of participants.

wt+1 ←

K
∑
k=1

nk
n

wk

t+1

(1)

However, traditional federated learning has raised various challenges and limitations in real-world deployments
[15]. This includes the extreme dependence on a single global server to orchestrate the federated learning process,
including the aggregation of model updates. Therefore, the scalability of federated learning is often questionable, as a
large number of different clients with unique model updates are connected to and aggregated by one global server [15].
This method might be unfeasible in wide-scale deployments such as industrial IoT ecosystems due to communication
links and scarcity of computational resources. Moreover, centralisation of the global server introduces a single-point-of-
failure concern in the federated learning operation. Although this limitation has been partially addressed by the hosting
of the global server on distributed de-centralised networks such as blockchains [16], other key challenges are still faced.
This includes the recipient of model updates directly from user endpoints, which can be re-engineered to raw data using
advanced adversarial attack techniques [31]. Additionally, any poisonous updates received from an adversary will have
a direct impact on the entire federated learning process. In this paper, we explore a hierarchical federated learning
architecture to address these drawbacks.

2.3 Blockchain

Blockchains are fundamentally an electronic ledger of digital transactions that are duplicated and hosted by a distributed
and de-centralised network of computer nodes [32]. Blockchain provides a trusted storage platform for transactional
records and values. Participants share transactional data in a large network of untrusted nodes that are resistant to
modiﬁcation or deletion using cryptographic proofs [32]. Thus, making it a reliable source for future accounting and
auditing purposes. A blockchain is characteristically made up of two parts; transactions and blocks [33]. Transactions
are deﬁned as the content created by a user who wants to store information on the blockchain. Blocks are groups

4

of transactional records that conﬁrm the sequence and integrity of transactions that have occurred. The block is then
hashed and kept as a record that is available to all entities, explaining the terms of a transparent ledger.

A type of blockchain with managed Role-Based Access Control (RBAC) is known as a permissioned blockchain
[34]. Unlike private blockchains, permissioned blockchains are decentralised across multiple nodes. They are used
mainly by organisations to manage supply chains and other collaborative processes where security and identity man-
agement are required. The network is owned by a single or a group of predeﬁned nodes known as administrators who
manage the RBAC. The permissioned ledger is not publicly accessible and can be accessed by users who can only
perform speciﬁc actions granted to them by an administrator [34]. The users identify themselves via digital certiﬁcates,
signatures, or credentials. New users must be invited to access the network. In addition, they are generally more efﬁcient
compared to public blockchains due to the limited number of nodes on the network, hence increasing the transactional
rate and overall performance.

Blockchains provide a computational infrastructure capable of running programmes known as smart contracts.
Smart contracts are arbitrary user-deﬁned contract programs that can execute the terms and conditions of a contract
[35]. The general objectives are to satisfy contractual conditions, minimise errors, and eliminate the need for trusted
intermediaries. They are programmed to monitor, log, and execute shared tasks. These smart contracts act as a trusted
shared agreement that contains all planned interactions between the parties involved [35]. Smart contracts aim to
help organisations collaborate without the need to trust the parties involved or a third party mediator. Lack of trust is
often a roadblock leading to conﬂicts that stall the overall collaboration process, such as which party will handle the
orchestration process in federated learning. Moreover, the dependency on one another to perform within the expected
quality guidelines or timeline usually leads to inﬂictive arguments once unexpected kinds of issues arise.

3 Related Work

In this section, we discuss and analyse some of the key related works found in the literature. In Cui et al. [36], the
authors proposed an anomaly detection framework for IoT infrastructures. The framework is empowered by a public
blockchain and adopts a federated learning architecture for the ML operation. The blockchain network ensures data
integrity and improves efﬁciency while being robust to server staleness or downtime. The federated learning technique
uses a Generative Adversarial Network (GAN) neural model to further enhance the privacy of local model parameters
by injecting controlled noise into the updates received, also known as differential privacy. The framework was evaluated
on a single benchmark data set, and the results demonstrate high accuracy of anomaly detection and improved privacy
protection. The data set used is the well-known KDD-CUP dataset, which was released in 1999; therefore, it does not
represent the modern attack behaviour of IoT [37].

Lu et al. [38] integrated a federated learning operation with a blockchain network to address the current limitations
of data sharing mechanisms in IoT ecosystems. The proposed framework preserves the privacy and security of infor-
mation by adopting a permissioned blockchain where data owners can further control access to the shared updates of
the ML model. When a new endpoint participates in the ML operation, its unique identity is recorded on the blockchain
as a transaction together with the proﬁle of its data, including data categories, type, and size, which will be veriﬁed by
each node. The participants are divided into segments according to their data types and categories. The framework is
evaluated using two benchmark data sets for data categorisation. The results demonstrate the efﬁciency of data classi-
ﬁcation while improving privacy. However, the increase in data providers brings more local models to be updated and
computed, increasing the aggregation time.

In [39], an intelligent threat defence system for smart cities has been developed. The framework employs blockchain
and federated learning technologies to ensure the privacy and anonymity of participants. The learning process is
achieved through encrypted smart contracts within the blockchain network for unambiguous validation and control
of the process. The proposed system aims to detect intrusions in IoT trafﬁc using deep content inspection. The system
has been designed using ﬁve main components; 1) blockchain server - the consensus mechanism used for validating the
transactions, 2) public key server - to create public and private keys for user identity validation, 3) federated learning
server - controls the execution of the distributed learning, 4) miner - hosted on the endpoints to send updates of the
local model and detect updates of the global model, and 5) machine learning server - contains the learning model to be
trained using local data. The framework does not appear to be evaluated or validated in the paper.

Liu et al. [40] aimed to protect vehicular networks and modern transportation infrastructure. Due to the wide
autonomous vehicle attack surface and the expanded use of software and wireless interfaces, current IDSs can be
customised efﬁciently. The article integrates efﬁcient model training and secure model sharing using federated learning
and blockchain technologies, respectively, to ensure driving safety. The public Ethereum blockchain network is used
for the storage and sharing of training models. The design of the proposed framework involves a two-stage IDS that
leverages federated learning through several edge vehicles and roadside facilities. The aggregation layer is replaced

5

by distributed roadside units. The uploaded model is combined with mask noise based on secret sharing to ensure the
privacy of user data. The work also discusses a trust-based incentive mechanism to achieve a high detection rate. The
framework is evaluated using the outdated KDDCup99 data set, which does not represent modern IoT attack behaviour
[37]. A feed-forward artiﬁcial neural network is used to perform the classiﬁcation task. The proposed scheme achieved
a reliable accuracy score through aggregation training.

Zhang et al. [41] have designed a failure detection system for industrial IoT networks. The architecture involves
blockchain-based federated learning, where each client periodically creates a hashed data record on a blockchain.
The paper also developed a novel aggregation technique known as Centroid Distance Weighted Federated Averaging
(CDW FedAvg), which takes into account the distance between positive classes and negative classes of each client data
set. In addition, a smart contract is developed to reward each client according to the size and centroid distance of the
data used in model training. The framework is evaluated using a real-world industry partner data set, one of the largest
air conditioner manufacturers in the world. In the experiment, there is a central organisation which is the platform owner
(manufacturer) that maintains the industrial services and there is a client organisation which is in this case hotels that
contribute with local data and computation resources. The performance has been compared to the traditional FedAvg
technique [29] and the results demonstrate the superiority of the CDW FedAvg technique in this use case.

Chai et al.

[16] proposed a blockchain-based hierarchical federated learning algorithm for knowledge sharing
among intelligent vehicles. The authors highlight the importance of knowledge sharing across vehicles and how it
improves the decision capabilities of the model. Privacy, security, and reliability issues in knowledge sharing can
disturb the sharing system. Due to the hierarchical architecture, the framework is feasible for large-scale vehicular
networks and can effectively reduce computational consumption. The process follows a game theory in which the
multi-leader and multi-player trade parameters are in the trading market. The framework is evaluated using the MNIST
and CIFAR10 data sets. The simulation results show that it can improve sharing efﬁciency and learning quality by about
10% compared to traditional federated learning methods.

Saadat et al.

[42] evaluated and compared the performance beneﬁts of HFL with standard federated learning
techniques in IoT intrusion detection applications. In particular, the authors measured the detection accuracy and speed
of convergence of each method using a neural network model evaluated on the outdated NSL-KDD data set samples.
The paper explored three study cases with different client-edge assignments to observe the effect of non-IID data
distribution over the clients. The data set was divided according to attack classes; the ﬁrst use case provided IID data
assignments for federated learning and HFL techniques. The second use case provided IID data assignments with an
equal number of attack samples. The third use case provided non-IID data assignments. The results proved HFL’s
superiority over federated learning in the three study cases, where HFL achieved a faster convergence rate, lower loss,
and higher testing accuracy.

In Preuveneers et al. [43], the authors have evaluated the feasibility of federated learning based on permissioned
blockchain for intrusion detection. The transactional records in this case are weight updates to the ML model, which are
monitored for tamper attempts or fraudulent transactions of adversaries. The framework used a permissioned blockchain
network known as MultiChain and is evaluated using a key IDS data set known as CICIDS2017. In the training process,
a one-class classiﬁcation technique was followed using an auto-encoder model. The goal of this work is to measure
the computational impact of blockchains in a federated learning scenario. The experiments illustrate that the increased
complexity caused by blockchain technology has a limited performance impact (between 5% and 15 %) on federated
learning. The development of smart contracts is highlighted as future work.

Sarhan et al. [27] aimed to provide a CTI enabling solution for organisations adopting ML-based IDSs. The paper
argues the beneﬁts of such collaboration and the value added to the detection capabilities of the model. The proposed
framework follows a federated learning architecture where each organisation centrally collects the training log sets and
trains an ML model locally. The updated parameters are received by the global server, which is aggregated with other
organisations’ locally updated weights. The framework is evaluated using two key NetFlow IDS data sets; NF-UNSW-
NB15-v2 and NF-BoT-IoT-v2 used together in parallel during training. The beneﬁts and efﬁciency of collaboration are
demonstrated by comparing the detection results with localised and centralised ML scenarios. Using two widely used
ML neural network models, the results of the federated learning scenario are superior to the localised learning scenario
and slightly inferior to the centralised learning scenario. However, data privacy is only preserved using federated
learning.

Signiﬁcant research has been conducted on the integration of blockchain and intrusion detection to improve data
privacy and attack detection, respectively. Table 1 provides a snapshot of the articles mentioned above, listing the
types of federated learning architecture and the adopted blockchain. Other key evaluation criteria include whether a
smart contract has been developed, whether it has been implemented in an IoT ecosystem, whether it performs an
intrusion detection function, and ﬁnally whether CTI has been considered. Overall, while many papers followed a fed-
erated learning scenario, the majority have selected a standard (non-hierarchical) architecture, making their framework
prone to its aforementioned limitations. Moreover, the global server functionality has been proposed to be hosted on

6

Table 1: Related works

Paper
Cui et al. [36]
Lu et al. [38]
Demertzis [39]
Liu et al. [40]
Zhang et al. [41]
Chai et al. [16]
Saadat et al. [42]
Preuveneers et al. [43]
Sarhan et al. [27]
This Paper

Fed. Learning
Standard
Standard
Standard
Standard
Standard
Hierarchical
Hierarchical
Standard
Standard
Hierarchical

Blockchain
Public
Permissioned
Public
Public
Public
Public
No
Permissioned
No
Permissioned

Smart Contract
No
No
Yes
No
Yes
No
N/A
No
N/A
Yes

IoT
Yes
Yes
Yes
Yes
Yes
Yes
Yes
No
No
Yes

IDS
Yes
No
Yes
Yes
No
No
Yes
Yes
Yes
Yes

CTI
No
N/A
No
No
N/A
N/A
No
No
Yes
Yes

a blockchain, which is a great initiative to attract the beneﬁts of secure blockchain networking. However, most of the
work has adopted a public blockchain network such as Ethereum, which leads to a breach of data privacy, as the updated
model weights are shared publicly and can often be reversed to raw data using advanced adversarial attack techniques.
A very small number of papers have used smart contract technology to automate the role of a global server, which is
necessary for automated validation and control of the process. Finally, only one paper has aimed to provide a solution
to organisations that are seeking to collaborate in the sharing of CTI for ML-based IDSs.

4 Hierarchical Blockchain-based Federated Learning

HBFL offers CTI to organisations in a secure, privacy-preserving, and automated manner. Participating organisations
beneﬁt from each other’s threat intelligence while ensuring the security and privacy of sensitive IoT endpoint data lo-
cally. Moreover, HBFL removes the trust requirement between organisations to mediate the orchestration process by
the adoption of a smart contract running on a permissioned blockchain. The overall architecture used in the develop-
ment of HBFL is presented in Figure 2. HBFL aims to design a universal ML-based IDS between organisations to
improve detection performance. This is primarily due to the heterogeneity of the data generated and collected by each
organisation’s network and the vast differences in the operating environment incorporated by different IoT ecosystems.
The learning model is exposed and trained on a multitude of heterogeneous data logs, each with a unique statistical
distribution. The global IDS model correlates attack patterns over various organisational IoT networks. Therefore, the
generalisability of ML-based IDSs is enhanced by an increase in the detection accuracy of locally unseen threats.

Figure 2: HBFL: architecture and data ﬂow

There are practical use cases for HBFL applications when an organisation k aims to protect its IoT ecosystem
o using an ML-based IDS. Where k collects a training data set n locally from their network o; A) k1 may not have
collected/observed any malicious m trafﬁc for training in o1. For effective training of ML-based IDS, benign b and
malicious m trafﬁc are required as part of the training set n. Therefore, k1 might depend on m trafﬁc generated in

7

network o2 available in another organisation k2 for training. B) k1 might have some m trafﬁc available for training,
however, n contains a limited number of m that might not be sufﬁcient in the design of an ML-based IDS to generalise
across other m scenarios. Which is a practical example where an organisation might not have experienced a wide range
of attack trafﬁc. Therefore, k2 contribution is required to enrich n with further m trafﬁc. In general, the collaboration
between k1 and k2 to collect a common n that contains a wider variety of b and m to improve the performance of
ML-based IDS is a form of CTI.

4.1 Privacy Preserving and Secure Learning

A vertically integrated set of federated learning known as HFL has been chosen in the development of the HBFL
framework. The key motivation for using an HFL architecture is the addition of servers in the middle layer between
the top-level server and the IoT endpoints. In this framework, we refer to the top-level and middle-layer servers as
reducers and combiners, respectively. The combiners are essentially the local orchestrating servers of an organisation.
They reduce the centralisation of power in the reducer by providing further aggregation and control mechanisms locally
to an individual organisation’s IoT endpoints. This method attracts many beneﬁts to the organisations participating in
the HBFL operation. For instance, it overcomes the single-point-of-failure limitation in case of a reducer outage, as
the learning process is maintained in each unaffected organisation separately because the clients can use the locally
aggregated model by their respective combiners until it converges at the top-level’s reducer.

Moreover, HBFL supports large-scale deployments where a single reducer server is insufﬁcient to communicate,
obtain, and aggregate a large number of different model updates from the IoT endpoints, whether due to communication
links or computation resource limitations. More fundamentally, for CTI sharing purposes, the model updates received
directly from the IoT endpoints are preserved within the organisational perimeter (combiner) and never shared with any
external entity; this acts as a defence mechanism against advanced adversarial attacks, such as reconstructing model
updates to the training data used. It also avoids the necessity of differential privacy techniques which might degrade the
detection accuracy of the IDS model [44]. Furthermore, HBFL enables additional control points across the hierarchy
which are used for defence and veriﬁcation functions. For instance, each set of organisational weights is validated
against adversary attempts at the combiner level, which consequently contains the effect of model and data poisoning
techniques internally without reaching other organisational networks.

The aggregation in HBFL occurs at two different levels and different interval rounds; 1. Local aggregation - this
is conducted by the combiner over a set of IoT endpoints as illustrated in Equation 2. 2. Global aggregation - this is
conducted by the reducer over a set of participating organisations as illustrated in Equation 3. A key advantage of having
a number of local weight aggregation rounds before a global aggregation is to obtain a locally converged and efﬁcient
model before the global aggregation with other organisational weights. This structure has the great performance beneﬁt
of decreasing the number of global aggregation rounds required to achieve global maximum performance. The local
aggregated parameter l from the combiner kth is given by

lk
c+1 =

Ek
∑
ek=1

yek
yk

wek

c+1

f or k = {1, 2, ..., K}

(2)

where c represents the local federated learning round, k = {1, 2, ..., K} indicates the combiner, yek is the number
of endpoints e of the combiner k, wek
c+1 are the model parameters trained from the endpoint e of the combiner k, and
yk indicates the total number of endpoints connected to the combiner k. The aggregated global parameter g from the
reducer can be stated as

gt+1 =

K
∑
k=1

mk
m

lk
t+1

(3)

in which t represents the number of global learning round, mk indicates the number of combiner, and m is the total

number of combiners.

The HBFL framework adopts a cloud-fog-edge topology where IoT endpoints and combiners are hosted in the edge
and fog zones, respectively. The reducer functionality runs on a blockchain-based cloud network. IoT endpoints are
generally located on the edge of the organisational network ecosystem to assist in their functionality. The fog zone is
a computing infrastructure to compute and store data between the edge and the cloud [45]. Cloud computing is the
delivery of services and applications on ﬂexible resources over the internet. The adopted topology reduces the costly
communication with the cloud, with efﬁcient local edge-fog updates. Therefore, the costs of securing, exchanging, and
transmitting the communication between organisations and the cloud are reduced. The beneﬁts of this topology are
further clariﬁed in Section 4.3 according to each component.

8

4.2 Blockchain-based Orchestration and Conformance

The adoption of a permissioned blockchain network in HBFL adds another layer of a privacy-preserving mechanism.
Only the reducer functionality will be deployed on the blockchain. The entire HBFL process between organisations
will be orchestrated by a network of nodes on a blockchain. Therefore, we omit the trust of a single entity performing
the global server roles, as well as the single-point-of-failure limitation. The identity management of each participating
organisation is veriﬁed using a digital certiﬁcate managed and enforced by a smart contract upon registration and
agreement. Through RBAC, each organisation will obtain limited read/write access to upload the locally aggregated
parameters and collect the updated globally aggregated parameters for its use.

The reducer in the HBFL architecture aggregates processed weights rather than individual IoT endpoint updates,
thus, the necessity of secure aggregation and encryption is reduced at this level. Furthermore, the permissioned
blockchain uses asymmetric cryptography to preserve communication between organisations. Therefore, the authentic-
ity of the participant is veriﬁed through the use of private and public keys. The updated model weights received from
each organisation are stored inside the blocks in the form of transactions. Since the transactions on blockchains are
immutable and contain the source organisation of each record, adversarial attempts by an organisation to degrade the
detection performance of the global HBFL model will be identiﬁed and accounted for.

Smart contracts are developed on the permissioned blockchain to automate the reducer role by monitoring, log-
ging, and executing HBFL tasks. The smart contract contains the planned interactions and will act as the trusted shared
agreement between the organisations. This will be a key motivation for participation due to the omission of the need
to trust the involved parties, which is often a roadblock in collaborative processes. The smart contract will maintain
a closely monitored HBFL environment. The smart contract relies on blockchains to automatically record the trans-
actional information of the data or message ﬂows that occurred while performing a process. Smart contracts not only
check if interactions correspond to the agreed process, but also act as a validator on the communication details between
the participant organisations and the reducer. The task is run through a preset structure of user-deﬁned code based on
the agreements and conditions set while designing the smart contract.

By applying smart contracts to monitor the HBFL process, we ensure that only conforming interactions advance
the state of the operation, and a tamper-proof and time-stamped audit log is kept. Initially, the smart contract will
enrol an organisation by providing a digital certiﬁcate to be used in uploading the locally aggregated parameters.
Parameters will be scanned for anomalies and adversary attempts prior to global aggregation. Once the required number
of healthy parameters is received from the participants, global aggregation will occur. Finally, the smart contract will
send the globally federated model parameters back to each organisation and terminate the HBFL process. Using smart
contracts to facilitate collaboration between each participating organisation will enhance the HBFL process with two
main functionalities;

• Active Mediation - coordinates the collaborative HBFL process by controlling the start and end of each set of

tasks and deﬁned in the smart contract.

• Monitoring - records the execution status of the HBFL process and ensures that the interactions and message

ﬂows are conducted according to the agreed process conditions.

4.3

Implementation

In this section, we demonstrate how the three main entity groups’ functionalities are implemented, i.e., reducer, com-
biner, and endpoint. Reducer roles are performed by the smart contract on the permissioned blockchain. However,
the remaining operational roles completed by the combiners and endpoints will be triggered by the smart contract and
executed off-chain. The exit status of the off-chain processes will be sent back to the blockchain, which will be used
for accounting, monitoring, and initiating the following process deﬁned in the smart contract. There are four basic
operating types of the following forms deﬁned in the HBFL process;

• Start(Taski) - The start status of task Taski is indicated by this message. If a task is meant to be performed

outside the blockchain system, then the message shall be sent to the respective participants.

• Hold([Taski.completed . . . Taskn.completed]) - If a task Taski, and Taskn are meant to be completed together to
progress the workﬂow, then the obligation to perform these alternative tasks is indicated by this message. This
is used before the aggregation process, where a number of updated parameters must be received.

• End(Taski) - The end status of task Taski is indicated by this message. If a task was performed outside the

blockchain system, then the message shall be returned by the respective participants.

• Monitor(Taski) - If task Taski is complete, then the monitoring status of this task is indicated by this message.
The Monitor function ensures that the HBFL processes are executed according to the rules and conditions set

9

within the smart contract and agreed upon by the participating organisations. The Monitor records violations
made while executing a process and terminates the HBFL process.

4.3.1 Reducer

The reducer is the single fundamental entity in the HBFL operation. It is hosted on a cloud-decentralised blockchain;
therefore, each of the following tasks is automated and runs periodically directly using the smart contract. The cloud
server can access a larger amount of data with excessive communication overhead and long latency, which will handle a
large number of participating organisations (combiners). We assume a dummy initialising the reducer to orchestrate the
HBFL until completion. There are two tasks required to be performed by the reducer; 1) Taska - select a set of active
organisations to participate, 2) Taskb - aggregate the received local model parameters l from the combiners, and send
the updated global parameters g back to each organisation. In Algorithm 1, the reducer roles are deﬁned. The reducer
aggregates the locally aggregated parameters l received from combiners K indexed by k. The FedAVG aggregation
technique is applied, where t is the global federated learning round, and m is the number of active combiners.
In
addition, the smart contract monitors the tasks executed on-chain by the reducer and off-chain by the combiner to
ensure their conformance according to the agreed criteria. The ﬁnal aggregated weights reﬂect the global CTI, which
will be used in ML-based IDS deployment before the HBFL process is complete.

Algorithm 1: Reducer (Smart Contract)

Select active and participating organisations
Initiate Combiner process

1 Reducer process initiated
2 Start(Taska)
3

4
5 End(Taska)
6 Monitor(Taska) → Blockchain
7 Monitor(Taskc) → Blockchain
8 Start(Taskb)
9

10

11

12

13

14

Hold([Taskdi .completed ... Taskdn .completed])
Monitor(Taskd)
St ← (Set of Kcombiners) for each combiner k ∈ St : do

gk
t+1 ← Local update (k, lt )
mk
m lk

gt+1 ←

t+1

K
∑
k=1

end
Send global model parameters g to combiners

15
16 End(Taskb)
17 Monitor(Taskb) → Blockchain
18 Monitor(Taske) → Blockchain
19 End Reducer process

4.3.2 Combiner

The combiners are hosted off-chain in the fog (perimeter) zone of the organisation. The fog zone enjoys more efﬁcient
communication with clients, allowing for faster model updates and efﬁcient communication links compared to cloud
servers. The results of each task conducted on the combiner will be sent to the global server to be recorded and
monitored on-chain and progress the workﬂow of the smart contract. Each combiner is connected to a group of IoT
endpoints located within the organisation’s ecosystem. For each of the active combiners, there are three tasks performed;
1) Taskc - select a set of active IoT endpoints to participate, 2) Taskd - aggregate the received model parameters w from
the endpoints, and send the aggregated local parameters l to the global server 3) Taske - send the updated global
parameters g back to the endpoints. In Algorithm 2, the combiner role is triggered by the smart contract and is deﬁned
to be run off-chain in each organisation’s network. The combiner selects a set of connected IoT endpoints E indexed
by e to participate in the federated learning process. E can be dynamically adjusted to the number of endpoints online
with reliable communication conditions in a certain period. Each endpoint sends the trained model parameters w to the
combiner for aggregation. The FedAVG aggregation technique is applied, where c is the local federated learning round,

10

and y is the number of active IoT endpoints. Local aggregated weights l reﬂect an organisational intelligence and are
sent to the reducer.

Algorithm 2: Combiners

Select active and participating IoT endpoints
Initiate Endpoint process

1 Start(Taskc)
2

3
4 End(Taskc)
5 Start(Taskd)
6

7

8

9

10

11

Hold([Task fi .completed ... Task fn .completed])
Sc ← (Set of E endpoints)
for each endpoint e ∈ Sc : do

le
c+1 ← Endpoint update (e, wc)

lc+1 ←

E
∑
e=1

ye
y we

c+1

end
Send aggregated local model parameters l to reducer

12
13 End(Taskd)
14 Start(Taske)
15

16
17 End(Taske)
18 End Combiner process

Hold(Taskb.completed)
Send aggregated global model parameters g to endpoints

4.3.3 Endpoint

The IoT devices in this framework are deﬁned as endpoints running in the edge zone due to their effectiveness when
placed on the perimeter of IoT ecosystems. IoT devices collect the surrounding environmental data as a federated
learning training data set. The functionality and integrity of the endpoints’ operation are the responsibility of the parent
organisation and are not monitored by the smart contract. This is a fair assumption, as organisations often have internal
monitoring systems to detect faults and anomalies in IoT devices [46]. Additionally, an organisation can validate
endpoint health by performing checks on its associated combiners; however, this is part of future work. In Algorithm 3,
the roles of the endpoints are deﬁned. There is one task performed by each of the participating endpoints; Task f - train
the ML model using local data samples, and send the updated parameters w to the combiners. Once the participant is
selected by the combiner, the ML model is trained using local data samples where B is the local training batch size, E is
the number of local epochs, P is the local training set, o is the loss of classiﬁcation and n is the local learning rate. The
endpoints would preserve the privacy and security of their data logs by training the ML model locally and sending the
updated parameters w to the corresponding combiner, which reﬂects individual intelligence. Once the HBFL process is
complete, the endpoints will receive the enhanced globally aggregated parameters g from the combiner, which will be
used for any practical intrusion detection.

Algorithm 3: Endpoints

Start(Task f )

B ← ( split Pk into batches of size B )
for each local epoch i from 1 to E: do

for batch b ∈ B: do

w ← w−n∇o(w; b)

end

end
Send updated model parameters w to combiner

End(Task f )
End Endpoint process

1

2

3

4

5

6

7

8

9

10

11

4.4 Security Analysis

The HBFL architecture addresses several adversarial attacks associated with traditional federated learning techniques.
HBFL provides a defence mechanism against free-riding and data/model poisoning attacks using the smart contract’s
monitor component. Free riding attacks are where an intruder beneﬁts from the global model parameters without
contributing with legitimate data samples. Data or model poisoning adversaries [47] aim to affect the global model to
degrade its performance or make it perform in a certain way. In terms of IoT-IDS, the attacker can manipulate the global
model to fail to detect certain attack techniques or tools which can be exploited in the future. The monitor function
of HBFL scans and veriﬁes the parameters received from each organisation for any anomalies and discards them in
the aggregation process in the case of an adversary. The exact technique of model weight anomaly detection such as
k-means clustering will be covered in future work. In the case of a detected adversary, the smart contract will terminate
the overall process by not sending the start command of the following task. Moreover, the HFL architecture adopted in
HBFL naturally provides a segmentation feature between the organisations’ networks, where it limits and contains the
effect of an adversarial activity from spreading across all participant organisations, as it will only be contained within
the adversary network.

The model weights received directly from the IoT endpoints are preserved within the organisational perimeter and
never shared with any external entity; this acts as a defence mechanism against advanced adversarial attacks, recon-
structing model updates to the training data used [48]. Furthermore, hosting the reducer on a permissioned blockchain
reduces the possibility of attacking a central server in an untrusted environment. As only registered organisations with a
unique ID can upload and verify the global model parameters, the operation is transparent and traceable if a participant
uploads a forged parameter to the ledger. Therefore, any adversarial attempts by any organisation to degrade the detec-
tion performance of the global ML-based IDS model will be identiﬁed and accounted for. Furthermore, permissioned
blockchains use a series of cryptographic algorithms, such as elliptic digital signatures and one-way cryptographic
hash functions, to guarantee the authenticity and integrity of the data. Therefore, recorded transactions and model
weights cannot be manipulated by an adversary. Overall, the proposed HBFL architecture provides a trusted source
of data; monitored and controlled by a smart contract, providing secure and privacy-preserved collaboration between
organisations.

5 Experimental Evaluation

An experimental use case has been implemented to evaluate the performance of the proposed HBFL framework for
the detection of IoT intrusions. The feasibility and capabilities of the framework in the detection of several IoT attack
scenarios are demonstrated.

5.1 Setup

The ML model architecture used in the training and testing phases is a Deep Feed Forward (DFF). The architecture
is chosen due to the two-dimensional tabular structure of the datasets. The data samples are fed forward through
the model’s various layers starting via an input layer that consists of a number of neurons equal to the same number
of data features. There are four middle layers, each performing the Relu activation function. The ﬁnal predictions
are calculated in the output layer which consists of a single sigmoidal neuron. The neural units are initialised with
randomly weighted connections which are optimised using the Adam algorithm during the training phase by mapping
the input features to the desired output. The full list of parameters used in the design of HBFL is presented in Table 2.
Although several parameter combinations were experimented with to achieve a reliable detection performance, the full
exploration of hyper-parameter tuning is out of the scope of this paper. Therefore, it is highly likely to obtain better
detection performance with an optimised set of parameters.

The performance of the ML model is evaluated using a set of standard evaluation metrics.The compound metrics are
calculated based on the True Positive (TP), True Negative (TN), False Positive (FP) and False Negative (FN) numbers.
The metrics used in this paper are;

• Accuracy - the percentage of correctly classiﬁed data samples =

T P+T N

T P+FP+T N+FN × 100
T P

• Detection Rate (DR) - the percentage of correctly classiﬁed attack data samples =

T P+FN × 100

• False Alarm Rate (FAR) - the percentage of benign data samples incorrectly classiﬁed =

FP

FP+T N × 100

• F1 Score - the harmonic mean of precision (

T P

T P+FP ) and DR = 2 × DR × Precision
DR + Precision

Each data set has been divided into training and testing sets in a ratio of 70% to 30%, respectively. Evaluation metrics
are collected over the test set multiple times and mean results are presented.

12

Table 2: Federated training parameters

Parameter
Hidden Layers
Neurons
Activation Function
Epochs
Batch Size
Optimiser
Learning Rate
Loss Function
Learning Rounds

Value

4
32, 16, 8, 4
Relu
10
128
Adam
0.001
Binary Crossentropy
10

A recent and widely used IoT IDS data set is used to evaluate the designed model. The data set is called NF-
BoT-IoT-v2 [49]. Unlike the popular NSL-KDD data set, the chosen data set has been recently released; therefore, it
represents modern and relevant IoT intrusions. The data samples are presented using NetFlow v9 attributes. NetFlow
is a de facto standard in network monitoring and analysis due to its practicality and widely scalable deployment. NF-
BoT-IoT-v2 is a new data set released in 2021, which is a NetFlow representative of the BoT-IoT [50] data set. The
BoT-IoT data set was released in 2018 by the ACCS Cyber Range Lab. IoT and non-IoT trafﬁc were generated using the
Node-red and Ostinato tools, respectively, and Tshark is used to capture network packets in their native PCAP format.
The NF-BoT-IoT-v2 data set was generated by converting the PCAP ﬁles to NetFlow based features using the nprobe
tool. It contains the same four attack groups as its parent data set, i.e., DDoS, DoS, Reconnaissance, and Theft. The
total number of data samples is 37,763,497, where the attack samples are 37,628,460 (99.64%) and 135,037 (0.36%)
are benign samples.

Further reprocessing techniques have been applied for optimal ML operations. The ﬂow identiﬁer features, such as
source/destination IP addresses and ports, have been removed to avoid learning bias towards the attacking and victim
endpoints. Furthermore, the Min-Max scaler technique has been used to normalise all feature values between 0 and 1
by applying

X∗ =

X − Xmin
Xmax − Xmin

(4)

where X * represents the ﬁnal output value ranging from 0 to 1. X is the original input value and X max and X min indicate
the maximum and minimum values of each feature, respectively. The Min-Max scaler was applied to each endpoint
separately.

Table 3: Data Distribution

Org.

k1

k2

Endpoint
C1
C2
C3
C4

DDoS
(cid:88)
(cid:88)
X
X

Recon.
(cid:88)
(cid:88)
X
X

DoS
X
X
(cid:88)
(cid:88)

Theft
X
X
(cid:88)
(cid:88)

Benign
(cid:88)
(cid:88)
(cid:88)
(cid:88)

Set

n1

n2

The experimental use case developed considers two organisations k1 and k2 with unique IoT environments. The data
sets n1 and n2 collected from each organisation contain a different set of attack classes, m1 ⊂ n1 and m2 ⊂ n2, where
m1 (cid:54)= m2. This presents a realistic situation where each organisation have encountered and collected unique attack
scenarios for ML training. Two different scenarios are considered in this paper; 1) a non-collaborative experiment
where the models are trained on n1 and evaluated on n2 and vice versa using a traditional federated learning technique,
2) k1 and k2 collaborate using HBFL, and the global IDS model is trained and evaluated on both n1 and n2. The data
set is split according to attack classes as demonstrated in Table 3.

5.2 Results

The performance of HBFL is compared to the performance of a non-collaborative scenario. The results are demon-
strated in Figures 3-5, where each ﬁgure represents a different evaluation scenario. The sub-ﬁgures demonstrate the
detection performance of each attack class used in the test set. The x-axis indicates the learning round, and the y-axis
indicates the score of the evaluation metrics. Each line represents a different evaluation metric, where the results are
calculated after each learning round to monitor the performance of the IDS model throughout the process.

13

In Scenario 1, we assume a non-collaborative scenario, where organisation k1 designs an IDS model on its local
data set n1. The trained model is evaluated on the data set n2 of another organisation k2 that contains different attack
classes. The performance of the trained IDS model after each round is demonstrated in Figure 3. The ﬁnal results
indicate reliable DoS attack detection; however, poor theft attack detection with an accuracy of 95.77% and 63.88%,
respectively. The further training rounds conducted did not have a signiﬁcant impact as the detection performance
stabilised after the 5th round.

(a) DoS

(b) Theft

Figure 3: Scenario 1 - Train on n1, test on n2

In Scenario 2, we assume the opposite case of Scenario 1, where an IDS model is trained using the organisation k2
data set n2 and evaluated in the organisation k1 data set n1. The performance of the trained IDS model after each round
is demonstrated in Figure 4. Again, the learning model cannot efﬁciently distinguish between the attack and benign
network trafﬁc in one of the attack classes. The ﬁnal f1 scores of the DDoS and reconnaissance attack detections
are 98.94% and 58.85%, respectively. The DDoS detection accuracy required one training round to reach the global
maxima, where as three rounds were required for the reconnaissance attack.

(a) DDoS

(b) Reconnaissance

Figure 4: Scenario 2 - Train on n2, test on n1

In Scenario 3, we implement HBFL, where k1 and k2 collaborate in the design and training of a global IDS model
by sharing local CTI. The model is trained and evaluated on n1 and n2 attack classes and the performances are demon-
strated in Figure 5. As illustrated, all attack classes are nearly fully detected, and the FAR is minimal. Performance
increases signiﬁcantly after one round of training and stabilises fairly afterwards. However, efﬁcient detection of the
reconnaissance attack samples required eight training rounds to reach a maximum detection accuracy of 90.46%.

The numerical results of each scenario collected after the 10th federated learning rounds are presented in Table 4.
Both Scenarios 1 and 2 achieve similar results where one of the unseen attack classes in the test data set is unreliably
detected. The mean detection rate is 60.53% and 71.1% in Scenarios 1 and 2, respectively. However, in Scenario 3

14

12345678910Training Round0.0010.0020.0030.0040.0050.0060.0070.0080.0090.00100.00(%)AccuracyDRF1FAR12345678910Training Round0.0010.0020.0030.0040.0050.0060.0070.0080.0090.00100.00(%)AccuracyDRF1FAR12345678910Training Round0.0010.0020.0030.0040.0050.0060.0070.0080.0090.00100.00(%)AccuracyDRF1FAR12345678910Training Round0.0010.0020.0030.0040.0050.0060.0070.0080.0090.00100.00(%)AccuracyDRF1FAR(a) DDoS

(b) Reconnaissance

(c) DoS

(d) Theft

Figure 5: Scenario 3 - HBFL

(HBFL) the mean accuracy of each attack class is 99.71%. A lower FAR is also observed in HBFL demonstrating the
superiority of HBFL compared to other scenarios.

Table 4: Model detection performance

Scenario

1

2

3 - HBFL

Attack
DoS
Theft
DDoS
Recon.
DoS
Theft
DDoS
Recon.

Accuracy
95.77
63.88
98.95
69.17
99.93
99.84
99.18
98.89

DR
93.15
27.90
98.10
44.09
99.96
98.63
98.37
90.46

F1
95.65
43.57
98.94
58.85
99.93
97.69
99.12
94.80

FAR
1.62
0.16
0.20
5.75
0.11
0.12
0.10
0.05

5.3 Discussion

Three scenarios were implemented and evaluated to compare the performance of IDS models enabled with CTI and non-
CTI. The non-CTI enabled models (Scenario 1 and 2) are implemented using traditional federated learning techniques
used widely in the literature. The test sets for Scenarios 1 and 2 are extracted from the unseen attack classes demonstrat-
ing the non-shared intelligence from other organisations. The CTI enabled model (Scenario 3) is implemented using
the proposed HBFL architecture to enforce the additional privacy and security control points. The experimental results
demonstrate the extreme superiority of HBFL and the importance of CTI compared to other scenarios. In Scenarios 1
and 2, one of the unseen attack classes, theft and reconnaissance, respectively are unreliably detected through out the

15

12345678910Training Round0.0010.0020.0030.0040.0050.0060.0070.0080.0090.00100.00(%)AccuracyDRF1FAR12345678910Training Round0.0010.0020.0030.0040.0050.0060.0070.0080.0090.00100.00(%)AccuracyDRF1FAR12345678910Training Round0.0010.0020.0030.0040.0050.0060.0070.0080.0090.00100.00(%)AccuracyDRF1FAR12345678910Training Round0.0010.0020.0030.0040.0050.0060.0070.0080.0090.00100.00(%)AccuracyDRF1FARexperiment.

DDoS and DoS attacks were fully detected as unseen attacks. This can be explained by the similar nature of the
attack classes and the techniques used to carry out the activities. Therefore, the model is able to successfully transfer
the knowledge learnt from one attack class to the other. In general, the lack of CTI between organisations presents a
serious cyber risk to ML-based protected networks in the detection of unseen attack classes. On the other hand, the
HBFL global model is capable of efﬁciently detecting the full set of attack classes and threat intelligence shared by each
participant organisation. This also conﬁrms that the additional privacy and security mechanisms provided by HBFL do
not have an impact on the accuracy of intrusion detection.

6 Conclusion

In this paper, we propose a novel CTI enabling framework known as HBFL for ML-based IDSs. HBFL aims to
strengthen the organisational IoT security posture by providing insights collected from different organisational environ-
ments. The framework adopts a cloud-fog-edge topology in which the IoT endpoints, combiners, and reducer are hosted
in the edges, fog, and cloud, respectively. A secure architecture was designed by integrating HFL and permissioned
blockchains. In addition, a smart contract has been developed to ensure the conformance of executed tasks according
to pre-deﬁned acceptance criteria. We have tested our solution and demonstrated its feasibility by implementing it
and evaluating intrusion detection performance using a key data set. The outcome of the framework is a robust, high
performance, and securely designed ML-based IDS to protect and preserve the integrity of IoT networks. Future work
includes implementing an adversary detection model using clustering of k-means to implement in combiners.

References

[1] I. Lee and K. Lee, “The internet of things (iot): Applications, investments, and challenges for enterprises,” Busi-

ness Horizons, vol. 58, no. 4, pp. 431–440, 2015.

[2] Y. Wu, H.-N. Dai, and H. Wang, “Convergence of blockchain and edge computing for secure and scalable iiot

critical infrastructures in industry 4.0,” IEEE Internet of Things Journal, 2020.

[3] Z.-K. Zhang, M. C. Y. Cho, C.-W. Wang, C.-W. Hsu, C.-K. Chen, and S. Shieh, “Iot security: ongoing chal-
lenges and research opportunities,” in 2014 IEEE 7th international conference on service-oriented computing and
applications, pp. 230–234, IEEE, 2014.

[4] N. Manworren, J. Letwat, and O. Daily, “Why you should care about the target data breach,” Business Horizons,

vol. 59, no. 3, pp. 257–266, 2016.

[5] K. Ghirardello, C. Maple, D. Ng, and P. Kearney, “Cyber security of smart homes: Development of a reference
architecture for attack surface analysis,” in Living in the Internet of Things: Cybersecurity of the IoT-2018, pp. 1–
10, IET, 2018.

[6] F. A. Alaba, M. Othman, I. A. T. Hashem, and F. Alotaibi, “Internet of things security: A survey,” Journal of

Network and Computer Applications, vol. 88, pp. 10–28, 2017.

[7] D. U. Case, “Analysis of the cyber attack on the ukrainian power grid,” Electricity Information Sharing and

Analysis Center (E-ISAC), vol. 388, pp. 1–29, 2016.

[8] R. Stair and G. Reynolds, Principles of information systems. Cengage Learning, 2020.

[9] Z. Ahmad, A. Shahid Khan, C. Wai Shiang, J. Abdullah, and F. Ahmad, “Network intrusion detection system: A
systematic study of machine learning and deep learning approaches,” Transactions on Emerging Telecommunica-
tions Technologies, vol. 32, no. 1, p. e4150, 2021.

[10] S. Barnum, “Standardizing cyber threat intelligence information with the structured threat information expression

(stix),” Mitre Corporation, vol. 11, pp. 1–22, 2012.

[11] M. Conti, T. Dargahi, and A. Dehghantanha, “Cyber threat intelligence: challenges and opportunities,” in Cyber

Threat Intelligence, pp. 1–6, Springer, 2018.

[12] T. Li, A. K. Sahu, A. Talwalkar, and V. Smith, “Federated learning: Challenges, methods, and future directions,”

IEEE Signal Processing Magazine, vol. 37, no. 3, pp. 50–60, 2020.

[13] N. Bouacida and P. Mohapatra, “Vulnerabilities in federated learning,” IEEE Access, vol. 9, pp. 63229–63249,

2021.

16

[14] L. Liu, J. Zhang, S. Song, and K. B. Letaief, “Client-edge-cloud hierarchical federated learning,” in ICC 2020-

2020 IEEE International Conference on Communications (ICC), pp. 1–6, IEEE, 2020.

[15] M. S. H. Abad, E. Ozfatura, D. Gunduz, and O. Ercetin, “Hierarchical federated learning across heterogeneous
cellular networks,” in ICASSP 2020-2020 IEEE International Conference on Acoustics, Speech and Signal Pro-
cessing (ICASSP), pp. 8866–8870, IEEE, 2020.

[16] H. Chai, S. Leng, Y. Chen, and K. Zhang, “A hierarchical blockchain-enabled federated learning algorithm for
knowledge sharing in internet of vehicles,” IEEE Transactions on Intelligent Transportation Systems, vol. 22,
no. 7, pp. 3975–3986, 2021.

[17] V. Mavroeidis and S. Bromander, “Cyber threat intelligence model: an evaluation of taxonomies, sharing stan-
dards, and ontologies within cyber threat intelligence,” in 2017 European Intelligence and Security Informatics
Conference (EISIC), pp. 91–98, IEEE, 2017.

[18] C. Wagner, A. Dulaunoy, G. Wagener, and A. Iklody, “Misp: The design and implementation of a collaborative
threat intelligence sharing platform,” in Proceedings of the 2016 ACM on Workshop on Information Sharing and
Collaborative Security, pp. 49–56, 2016.

[19] Y. Zhao, M. Li, L. Lai, N. Suda, D. Civin, and V. Chandra, “Federated learning with non-iid data,” arXiv preprint

arXiv:1806.00582, 2018.

[20] N. Truong, K. Sun, S. Wang, F. Guitton, and Y. Guo, “Privacy preservation in federated learning: An insightful

survey from the gdpr perspective,” Computers & Security, vol. 110, p. 102402, 2021.

[21] J. Seo, K. Kim, M. Park, M. Park, and K. Lee, “An analysis of economic impact on iot under gdpr,” in 2017
International Conference on Information and Communication Technology Convergence (ICTC), pp. 879–881,
2017.

[22] H. Surden, “Machine learning and law,” Wash. L. Rev., vol. 89, p. 87, 2014.

[23] G. Abdelmoumin, D. B. Rawat, and A. Rahman, “On the performance of machine learning models for anomaly-

based intelligent intrusion detection systems for the internet of things,” IEEE Internet of Things Journal, 2021.

[24] N. Taherkhani and S. Pierre, “Centralized and localized data congestion control strategy for vehicular ad hoc net-
works using a machine learning clustering algorithm,” IEEE Transactions on Intelligent Transportation Systems,
vol. 17, no. 11, pp. 3275–3285, 2016.

[25] Q. Yang, Y. Liu, Y. Cheng, Y. Kang, T. Chen, and H. Yu, “Federated learning,” Synthesis Lectures on Artiﬁcial

Intelligence and Machine Learning, vol. 13, no. 3, pp. 1–207, 2019.

[26] C. Zhang, Y. Xie, H. Bai, B. Yu, W. Li, and Y. Gao, “A survey on federated learning,” Knowledge-Based Systems,

vol. 216, p. 106775, 2021.

[27] M. Sarhan, S. Layeghy, N. Moustafa, and M. Portmann, “A cyber threat intelligence sharing scheme based on

federated learning for network intrusion detection,” arXiv preprint arXiv:2111.02791, 2021.

[28] P. Tedeschi, S. Bakiras, and R. Di Pietro, “Iotrace: a ﬂexible, efﬁcient, and privacy-preserving iot-enabled archi-

tecture for contact tracing,” IEEE Communications Magazine, vol. 59, no. 6, pp. 82–88, 2021.

[29] B. McMahan, E. Moore, D. Ramage, S. Hampson, and B. A. y Arcas, “Communication-efﬁcient learning of deep

networks from decentralized data,” in Artiﬁcial intelligence and statistics, pp. 1273–1282, PMLR, 2017.

[30] S. I. Popoola, R. Ande, B. Adebisi, G. Gui, M. Hammoudeh, and O. Jogunola, “Federated deep learning for

zero-day botnet attack detection in iot edge devices,” IEEE Internet of Things Journal, 2021.

[31] A. N. Bhagoji, S. Chakraborty, P. Mittal, and S. Calo, “Analyzing federated learning through an adversarial lens,”

in International Conference on Machine Learning, pp. 634–643, PMLR, 2019.

[32] K. Christidis and M. Devetsikiotis, “Blockchains and smart contracts for the internet of things,” Ieee Access,

vol. 4, pp. 2292–2303, 2016.

[33] P. Tasca and C. J. Tessone, “Taxonomy of blockchain technologies. principles of identiﬁcation and classiﬁcation,”

arXiv preprint arXiv:1708.04872, 2017.

[34] C. V. Helliar, L. Crawford, L. Rocca, C. Teodori, and M. Veneziani, “Permissionless and permissioned blockchain

diffusion,” International Journal of Information Management, vol. 54, p. 102136, 2020.

[35] Z. Zheng, S. Xie, H.-N. Dai, W. Chen, X. Chen, J. Weng, and M. Imran, “An overview on smart contracts:
Challenges, advances and platforms,” Future Generation Computer Systems, vol. 105, pp. 475–491, 2020.

17

[36] L. Cui, Y. Qu, G. Xie, D. Zeng, R. Li, S. Shen, and S. Yu, “Security and privacy-enhanced federated learning for

anomaly detection in iot infrastructures,” IEEE Transactions on Industrial Informatics, 2021.

[37] K. Siddique, Z. Akhtar, F. Aslam Khan, and Y. Kim, “Kdd cup 99 data sets: A perspective on the role of data sets

in network intrusion detection research,” Computer, vol. 52, no. 2, pp. 41–51, 2019.

[38] Y. Lu, X. Huang, Y. Dai, S. Maharjan, and Y. Zhang, “Blockchain and federated learning for privacy-preserved
data sharing in industrial iot,” IEEE Transactions on Industrial Informatics, vol. 16, no. 6, pp. 4177–4186, 2020.

[39] K. Demertzis, “Blockchained federated learning for threat defense,” arXiv preprint arXiv:2102.12746, 2021.

[40] H. Liu, S. Zhang, P. Zhang, X. Zhou, X. Shao, G. Pu, and Y. Zhang, “Blockchain and federated learning for col-
laborative intrusion detection in vehicular edge computing,” IEEE Transactions on Vehicular Technology, vol. 70,
no. 6, pp. 6073–6084, 2021.

[41] W. Zhang, Q. Lu, Q. Yu, Z. Li, Y. Liu, S. K. Lo, S. Chen, X. Xu, and L. Zhu, “Blockchain-based federated learning
for device failure detection in industrial iot,” IEEE Internet of Things Journal, vol. 8, no. 7, pp. 5926–5937, 2021.

[42] H. Saadat, A. Aboumadi, A. Mohamed, A. Erbad, and M. Guizani, “Hierarchical federated learning for collabora-
tive ids in iot applications,” in 2021 10th Mediterranean Conference on Embedded Computing (MECO), pp. 1–6,
2021.

[43] D. Preuveneers, V. Rimmer, I. Tsingenopoulos, J. Spooren, W. Joosen, and E. Ilie-Zudor, “Chained anomaly
detection models for federated learning: An intrusion detection case study,” Applied Sciences, vol. 8, no. 12,
2018.

[44] E. Bagdasaryan, O. Poursaeed, and V. Shmatikov, “Differential privacy has disparate impact on model accuracy,”

Advances in Neural Information Processing Systems, vol. 32, 2019.

[45] M. A. Rahman, M. S. Hossain, E. Hassanain, and G. Muhammad, “Semantic multimedia fog computing and iot
environment: sustainability perspective,” IEEE Communications Magazine, vol. 56, no. 5, pp. 80–87, 2018.

[46] M. Aboubakar, M. Kellil, and P. Roux, “A review of iot network management: Current status and perspectives,”

Journal of King Saud University-Computer and Information Sciences, 2021.

[47] X. Liu, H. Li, G. Xu, Z. Chen, X. Huang, and R. Lu, “Privacy-enhanced federated learning against poisoning

adversaries,” IEEE Transactions on Information Forensics and Security, vol. 16, pp. 4574–4588, 2021.

[48] J. Geiping, H. Bauermeister, H. Dr¨oge, and M. Moeller, “Inverting gradients–how easy is it to break privacy in

federated learning?,” arXiv preprint arXiv:2003.14053, 2020.

[49] M. Sarhan, S. Layeghy, N. Moustafa, and M. Portmann, “Towards a standard feature set of nids datasets,” arXiv

preprint arXiv:2101.11315, 2021.

[50] N. Koroniotis, N. Moustafa, E. Sitnikova, and B. Turnbull, “Towards the development of realistic botnet dataset
in the internet of things for network forensic analytics: Bot-iot dataset,” Future Generation Computer Systems,
vol. 100, pp. 779–796, 2019.

18

