A Blockchain-Based Distributed Computational
Resource Trading Strategy for Industrial Internet of
Things Considering Multiple Preferences
Tonghe Wang†, Songpu Ai‡, and Junwei Cao§∗

1

2
2
0
2

n
u
J

9
1

]

C
D
.
s
c
[

3
v
9
3
5
9
0
.
1
0
2
2
:
v
i
X
r
a

Abstract—Computational task ofﬂoading based on edge com-
puting can deal with the performance bottleneck faced by
traditional cloud-based systems for industrial Internet of things
(IIoT). To further optimize computing efﬁciency and resource
allocation, collaborative ofﬂoading has been put forward to
enable the ofﬂoading from edge devices to IIoT terminal devices.
However, there still
lack incentive mechanisms to encourage
participants to take over the tasks from others. To counter
this situation, this paper proposes a distributed computational
resource trading strategy addressing multiple preferences of
IIoT users. Unlike most existing works, the objective of our
trading strategy comprehensively considers different satisfaction
degrees with task delay, energy consumption, price, and user
reputation of both requesters and collaborators. The system
design uses blockchain to enhance the decentralization, security,
and automation. Compared with the trading method based
on classical double auction matching mechanism, our trading
strategy has more tasks ofﬂoaded and executed, and the trading
results are friendlier to collaborators with good reputation.

Index Terms—blockchain, computation ofﬂoading, edge com-

puting, industrial internet of things, resource trading.

I. INTRODUCTION

T HE extensive application of sensor technologies in daily

objects has given birth to the Internet of things (IoT).
Industrial Internet of things (IIoT), the adoption of the IoT
concept in industrial scenarios, has revolutionized the indus-
trial world with enhanced intelligence, efﬁciency, connectivity,
and user experience [1]. As the number of IIoT devices
deployed increases, the signiﬁcant volume of the data acquired
from the environment has brought great challenges to data
transmission, processing, and storage services provided by
centralized cloud centers. In many time-sensitive scenarios,
e.g., healthcare, vehicular network, and smart grid, cloud
centers may fail to response in a timely manner and may cause
serious consequences [2].

In response, the edge computing paradigm emerges as the
times require. Computation ofﬂoading is the central topic of
edge computing, where IIoT terminal devices with limited
computational resources can transfer some or all their tasks
to edge servers nearby, and edge servers can also choose to

† T. Wang is with Micro Energy Group, Guangzhou Institute of Energy
Conversion, Chinese Academy of Sciences, Guangzhou, Guangdong, P.R.
China.

‡ S. Ai is with Future Labs, Beijing Teleinfo Network Technology Co.,

Ltd., Beijing, P.R. China.

§ J. Cao is with Beijing National Research Center for Information Science

and Technology, Tsinghua University, Beijing, P.R. China.
∗ Corresponding author. Email: jcao@tsinghua.edu.cn

transfer their tasks further to the cloud [3]. In this case, local
computational resources are mainly dedicated to the tasks with
higher requirements for response time, therefore improving the
response speed and alleviating the bottleneck of the cloud [4].

A. Collaborative Computation Task Ofﬂoading

Although edge computing has received extensive attention,
it still suffers from high latency caused by task queuing due
to the restricted computing power of edge servers [5]. To
further reduce response latency, the concept of “collabora-
tive ofﬂoading’’ has recently been proposed [6]. Unlike the
collaboration between cloud and edge or between edge and
terminal referred to in most related works, the collaborative
ofﬂoading here emphasizes the computation task ofﬂoading
between edge servers or from edge servers to nearby terminal
devices with surplus computational resources. In this setting,
users that provide resources for others are called collaborators,
and users with ofﬂoading requirement are called requesters.
Note that collaborators and requesters are not discriminated
between edge servers and IIoT terminal devices.

Generally speaking, the behavior of participants in hetero-
geneous distributed systems are often spontaneous, egoistic,
and unpredictable [7], [8]. For collaborative ofﬂoading, it is
pointed out that collaborators may still lack the motivation
to take over tasks from others, so recent works start
to
introduce economic incentives to encourage collaborators to
contribute surplus computational resources [9], [10]. Due to
different concerns of different participants, their decisions of
task ofﬂoading are nevertheless determined by multiple factors
in addition to economic ones. For example, the quality of
service, revenue and expense, and credibility of collaborators
and requesters can simultaneously impact the experience of
the participation [11]. Therefore, in order to encourage user
participation and promote the practical application of the
system, collaborative ofﬂoading needs to comprehensively
consider the inﬂuence of multiple preferences of users.

In this paper, we model collaborative task ofﬂoading as a
resource trading process between collaborators and requesters.
Its core stage, the transaction matching stage, is modeled by an
optimization problem with multiple attributes (e.g., task delay,
energy consumption, price, and user reputation) considered
in the objectives. By satisfying more personalized trading
preferences of participants, the matching strategy intuitively
brings more incentives to its participants.

 
 
 
 
 
 
2

B. Blockchain for Industrial Internet of Things

IIoT faces a series of security challenges, and data security,
user privacy, and service trustworthiness are the major con-
cerns of related studies [12]–[14]. Recently, blockchain has
been widely adopted to tackle these IIoT security issues [15]–
[18]. Blockchain stores data in blocks, which are shared over
the system through peer-to-peer communication, veriﬁed by
distributed consensus, and then connected into a chain in order.
It uses cryptographic schemes to ensure the integrity of data
and messages. Moreover, blockchain-based systems can be
automated with the help of smart contracts. Thus, blockchain
can provide desirable transparency, privacy, immutability, and
fault tolerance for distributed systems [19].

Yet most blockchain-based IIoT systems fail to give full
play to the key features of blockchain as they only use
blockchain as secure databases. This is because the complex-
ity of developing an entire blockchain system hinders the
application of blockchain [20]. The Blockchain-as-a-Service
(BaaS) design greatly reduces the implementation difﬁculty
of blockchain-based systems and promotes the penetration
of blockchain in various industries [21]. Instead of building
an entire blockchain system, developers can use the ready-
made blockchain interfaces and toolkits offered by the BaaS
platform. Therefore, making full use of the convenient services
provided by BaaS will better ﬁt blockchain-based collaborative
ofﬂoading schemes to the decentralized nature of IIoT.

In order to combine the features of blockchain more closely
with IIoT collaborative ofﬂoading scenario, this paper extends
the BaaS application of [22]–[24]. Our work exploits many
different features provided by BaaS for collaborative ofﬂoad-
ing in addition to using blockchain as a secure database.
In particular, this paper uses distributed ledger services to
maintain reputation chains for participants (similar to [25]), so
as to provide incentives for the participation in collaborative
transactions in a distributed manner.

C. Contributions

The main contributions of this paper are as follows:

1) This paper proposes a distributed computational resource
trading strategy for IIoT users, where the BaaS design is
adopted in the architecture. Unlike most related works
that simply use blockchain as a secure database, this
paper takes full advantage of blockchain to promote the
decentralization, reliability, and automation of resource
trading.

2) This paper designs a multi-preference matching (MPM)
mechanism for resource trading. The matching results
between requesters and collaborators comprehensively
consider the satisfaction with task delay, energy con-
sumption, price, and reputation of each participant. As
far as we know, few relevant studies have taken these
factors into account all at once.

3) We compare our MPM mechanism with the matching
strategy based on classical double auction (DA) match-
ing mechanism [26]. We perform simulation experiments
to show the advantages of MPM against DA.

The rest of this paper is arranged as follows: Section II
brieﬂy reviews related works; Section III introduces system
architecture and the workﬂow of blockchain-based resource
trading; Section IV explains MPM mechanism in detail; Sec-
tion V conducts simulation experiments and numerical analy-
sis by comparing MPM mechanism with DA-based matching
mechanism; Section VI concludes this paper.

II. RELATED WORKS

To explain the motivations of our work, we provide a brief
summary of the related works on blockchain-based security for
IIoT and incentivizing collaborative ofﬂoading in this section.

A. Blockchain-Based Security for IIoT

Security issues are the major concerns of IIoT-related
studies [27]–[29]. Recently, blockchain has been extensively
adopted to provide security for IIoT systems. For example,
[30] combines deep reinforcement learning with blockchain
to create energy-efﬁcient data collection and secure data
sharing environment. Although it allows open participation
with Ethereum public blockchain [31], it requires an additional
Byzantine fault tolerant consensus algorithm like Paxos [32] or
PBFT [33] to prevent device failure, which is not very scalable
for public blockchain. In [34], a blockchain layer is added
to the IIoT data sharing system to validate, sort, and store
data trading records in a secure and reliable way. However,
its centralized community detection subprotocol might have
the possibility of privacy disclosure when calculating client
similarity based on label data, which also contradicts the
decentralization of blockchain. Aiming to effectively protect
user privacy, the data sharing architecture of [35] design a
permissioned blockchain module to securely store and retrieve
data and a federated learning module to share data models
instead of raw data. In spite of the accuracy and efﬁciency of
collaborative training, the consensus process requires frequent
transmission of training models between nodes outside the
federated learning process, which could impose great workload
to the communication network.

These works, as well as many other related works, simply
use blockchain for secure data storage, and the advantages
of blockchain are not fully exploited [19]. The reason is that
system designers often face huge workload when developing
a sophisticated blockchain system. BaaS can greatly reduce
the difﬁculty of implementing blockchain-based systems by
providing various basic blockchain functions. The BaaS design
in [22] is deployed into the edge computing platform to
support distributed resource trading for task ofﬂoading based
on smart contracts. In [23] and [24], BaaS is integrated to
undertake energy supply-demand matching in fully decentral-
ized electric power systems. They both use the smart contract
service to provide automation, which greatly enhance the per-
formance of energy trading. In view of its great convenience,
BaaS is adopted in this paper in the design of a decentralized,
secure, reliable, incentivizing, and automated computational
resource trading system for IIoT.

B. Incentivizing Collaborative Ofﬂoading

Recently, the edge computing paradigm has been exten-
sively applied into IIoT systems [36]. To mitigate the re-
sponse latency issue in edge servers, some works recom-
mend collaborative ofﬂoading to allow terminal users with
additional computational resources to take over the tasks of
edge servers [37], [38]. For example, the concept of hybrid
ofﬂoading is proposed in [37], which extends traditional edge
computing ofﬂoading to hybrid ofﬂoading that combines both
edge computing ofﬂoading and device-to-device ofﬂoading.
The ofﬂoading scheme takes social relationship into con-
sideration and tries to reduce overall execution delay while
enhancing its data caching service. In addition, the authors
of [38] design a cooperative ofﬂoading structure that allows
unmanned aerial vehicles (UAV) to execute computation tasks
from each other, where a DRL method is adopted to optimize
the long-term utility of the mobile edge computing network.
However, the promotion of the above collaborative ofﬂoad-
ing in practice has encountered some obstacles, because users
lack incentive mechanisms to complete the computing tasks
ofﬂoaded by others [39]. As a result, some studies include
economic measures and transform collaborative ofﬂoading
into computational resource trading problem. In [6], the in-
telligence and selﬁshness of terminal users are considered
when making trading decisions. The ofﬂoading strategy tries
to maximize social welfare by considering the cooperation
between edge devices and terminal users as resource trading.
Similarly, the social welfare maximization problem in compu-
tation ofﬂoading is also studied in [10]. The authors propose
a set of online auction mechanisms without task requirement
information. They show that
this mechanism has a near-
optimal competitive ratio and is able to guarantee individual
rationality, truthfulness, and computational tractability. The
problem is nevertheless that in addition to economic factors,
response time, energy consumption, reputation, and many
other factors may also affect the decision of computing task
allocation. The inﬂuence of multiple factors in collaborative
ofﬂoading is rarely addressed in related research. Therefore,
the comprehensive consideration of various factors in our
MPM-based computational resource trading method is more
in line with practical requirements.

III. COMPUTATIONAL RESOURCE TRADING SYSTEM
ARCHITECTURE AND WORKFLOW
The IIoT system considered in this paper is based on
the classical
three-layered architecture of edge computing
and further extends the application scope of BaaS described
in [22]–[24]. As shown by Fig. 1, this architecture consists of
ﬁve major components:

Terminal: The terminal layer is made up by IIoT termi-
nal devices embedded with sensors for data perception. We
assume that all IIoT terminals are lightweight in the sense
that their computing capabilities are rather limited compared
to that of edge servers.

Edge: The edge layer contains edge servers deployed
near terminals. These servers have some computational re-
sources so that they can take over the tasks ofﬂoaded from ter-
minals. However, for economic concerns, edge servers usually

3

Fig. 1. System architecture.

have less computational resources compared to that of cloud
servers. Although the transmission time between terminals and
edge servers can be largely reduced, the latency caused by task
queuing in edge servers cannot be neglected.

Cloud: The cloud layer has cloud servers with power-
ful computational capabilities, which is far away from edge
servers. It is generally assumed that the cloud can process
any number of tasks at the same time, but with signiﬁcant
transmission latency.

BaaS: BaaS platform is fundamental

to achieve dis-
tributed computational resource trading for collaborative of-
ﬂoading. The system takes advantage of the following services
of BaaS:

• Peer-to-peer (P2P) communication. Messages and data
are shared and retrieved transparently without the need
of a central server. This makes the system more robust
against single point failures. Moreover, it allows partici-
pants to join and leave the network freely.

• Cryptographic service. Message transmission channels
and data storage are secured by various cryptographic
algorithms, and user privacy is also guaranteed.

• Consensus mechanisms. As the central component of
blockchain, consensus is used to validate newly generated
blocks that contains transaction information or reputation
updates. Any change that occurs to smart contracts also
needs to be validated by participants through consensus.
• Distributed ledger. The system uses three distributed
ledgers, namely transaction chain, collaborator reputation

CloudEdgeTerminal          Task Offloading               Trading Information          Task Offloading               Trading InformationBaaS...P2P CommunicationCryptographic ServiceConsensus MechanismsDistributed LedgerSmart ContractsBlockchain-Based Resource TradingService and RequirementMPM MechanismTransaction ExecutionRejection RulesDistributed Reputation4

chain, and requester reputation chain, to record transac-
tion data and reputation scores respectively. This makes
all the changes in transaction information and reputation
information traceable.

• Smart contract. The execution of resource trading and
the application of reputation update rules can be auto-
mated through smart contracts, programmable scripts that
automatically run when predeﬁned conditions are met.
Blockchain-Based Resource Trading: This module is
developed upon the BaaS platform. It contains all the func-
tionalities that support resource trading:

• Service and requirements. This submodule deﬁnes and
regulates the service information submitted by collab-
orators and the requirement information submitted by
requesters. More details are provided later in this section.
• MPM mechanism. Its purpose is to ﬁnd matches be-
tween services of collaborators and requirements of re-
questers with multiple preferences of users considered.
As the core of the resource trading strategy, the MPM
mechanism is introduced in detail in Section IV.

• Rejection rules. It is possible that the matching result of
one round fails to satisfy all participants. If the individual
satisfaction scores of participants are not high enough,
they can choose to reject the matching result. More details
are given in Section IV-E.

• Transaction execution. If participants do not refuse the
matching result, they are required to fulﬁll the transaction
according to the matching result. The execution results
will affect their reputation scores.

• Distributed reputation. Reputation scores are assigned
to all participants to evaluate their credibility in re-
source trading. This submodule is simpliﬁed from the
blockchain-based reputation system in [25]. More details
are given in Section IV-F.

In this paper, task ofﬂoading can take place between two
terminals, two edge servers, and between a terminal and a
server. During computational resource trading, collaborators
can reveal the information of the resources they are willing
to offer, and requesters with computational tasks can then
choose the collaborators to which they will ofﬂoad tasks with
payments.

The distributed resource trading workﬂow is as follows

(depicted by Fig. 2):

Step 1: Collaborator j with surplus computational resources

publishes its service information including:

• Cj: size of the cache offered;
• fj: CPU frequency offered;
• rj: transmission rate offered;
• (cid:15)j: maximum acceptable energy consumption per CPU

cycle;

• opj: offering price, i.e., (the lowest) price of task execu-

tion offered per CPU cycle;

• Rc

j: collaborator reputation score.

Meanwhile, requester i with computational tasks to ofﬂoad
submits their ofﬂoading requirement information including:

• si: size of tasks;
• Qi: CPU cycles required by tasks;

Fig. 2. Workﬂow of the distributed resource trading strategy.

• τi: maximum tolerable delay of tasks;
• bpi: bidding price, i.e., (the highest) acceptable price of

task execution per CPU cycle;
i: requester reputation score.

• Rr

Step 2: The service of collaborator j and the requirement

of requester i are stored in the transaction ledger.

Step 3: The smart contract of MPM, a matching mechanism
considering multiple preferences, is triggered, and correspond-
ing pre-matching results will be returned to their requesters for
conﬁrmation. We will provide more details about the MPM
mechanism in Section IV.

Step 4: Participants can choose to reject the matching results
if they are dissatisﬁed (see more details in Section IV-E).
Matching results that are not rejected are seen as accepted.
Once accepted, each pre-transaction result will generate a
transaction contract with the trading price calculated and
will be stored into a distributed ledger in the form of smart
contract provided by BaaS. Then, requesters make the payment
according to their conﬁrmed transactions.

Step 5: On the execution time, transaction contracts will be
triggered automatically, and the corresponding task ofﬂoading
will take place. The reputation scores of both the requester
and the collaborator will be updated according to the execution
results and predeﬁned reputation rules. Note that the submitter
of an unmatched requirement can choose to either execute the
tasks locally or ofﬂoad the tasks further to the cloud, while
the submitter of an unmatched service can choose to keep the
service and wait for another round of matching.

Reputation scores of requesters and collaborators, Rr
i and
Rc
j, are deﬁned to evaluate and regulate the behavior of
requesters and collaborators. We will provide more details
about our reputation system in Section IV-F.

StartRequirement and service information are submittedRequirements and services are stored in transaction chainStep 1MPM is triggered to match requirements and servicesStep 2Rejection rules are appliedStep 3Step 4Matching results that are not rejected generate transaction smart contractsTransactions are stored in transaction chainTransactions are executedTransactions execution results are returnedReputation scores are updated based on execution resultsEndStep 5IV. MULTI-PREFERENCE MATCHING MECHANISM

The core of our resource trading strategy is the MPM
mechanism. Unlike existing works, the MPM mechanism aims
to maximizing the overall satisfaction of both requesters and
collaborators considering their respective preferences. The
computational power of IIoT terminal devices is much weaker
than that of cloud center and edge servers. In addition, the
diversity of terminal devices makes the computing tasks they
need to complete and the computing services they can provide
vary a lot. Task delay and offering price determine the re-
questers’ satisfaction with a service, while energy consumption
and bidding price affect the collaborator’s experience of under-
taking a requirement. At the same time, reputation can be used
to evaluate the credibility of participants according to their
historical behavior. In this case, expressing their preferences
for multiple can better meet the matching requirements of both
parties, so as to provide more personalized services.

The operation of our MPM mechanism also relies on
the services provided by BaaS. First, matching results are
programmed into smart contracts and encapsulated into blocks.
These blocks will be stored into a distributed ledger, called
the transaction chain, once they are validated through dis-
tributed consensus. Second, reputation scores for collaborators
and requesters are also stored in ledgers, called collaborator
reputation chain and requester reputation chain respectively.
Participants can query each other’s latest reputation scores
and track the corresponding update history. Furthermore, the
rules for reputation update are also programmed into smart
contracts, and any addition, deletion, and modiﬁcation of these
rules needs to be validated by participants through distributed
consensus.

Suppose there are m requesters and n collaborators in a
matching round. For the sake of simplicity, we assume that
no participant is both a collaborator and a requester at the
same time. Moreover, we assume that each requester submits
one requirement, and each collaborator submits one service.
These assumptions are for mathematical convenience and can
be easily removed by assigning unique identiﬁers to different
roles, services, and requirements of a participant if otherwise.
We use matrix X = (xij)m×n to represent the result of one
round of matching, where xij
[0, 1] represents the proportion
∈
of the tasks in requirement i to be ofﬂoaded to collaborator j.
The MPM mechanism to decide X works as follows (shown
in Fig. 3):

Step 1: Fetch the information of the services of collaborators
and the requirements of requesters from the transaction ledger.
In order to prevent some requester from maliciously forcing
down the price and some collaborator from maliciously forcing
up the price, we require that bidding price bpi and offering
price opj should fall
in [pmin, pmax], where pmin and pmax
are the lowest price and the highest price allowed by the
resource trading system. In our system, pmin and pmax are
regarded as default values of the trading service. In practice,
these two values are usually published in market rules and
policies, and the trading service will periodically update and
synchronize these values. All the requirements and services
whose prices are out of the range will be forcibly removed

5

Fig. 3. Workﬂow of the MPM mechanism.

.
}

∈ {

1, 2, . . . , n

[pmin, pmax], then set xij = 0 for all j

(similar mechanisms can also be found in [40], [41]). If
.
bpi /
∈
}
Likewise, if opj /
[pmin, pmax], then set xij = 0 for all
∈
1, 2, . . . , m
i

∈ {
Step 2: Calculate the service preference score (SPS) of
each collaborator service for requester i
,
}
and calculate the requirement preference score (RPS) of each
requester requirement for each collaborator j
,
}
with respect to different preferences. We will provide more
details about the calculation of these two scores later on in
Section IV-A and IV-B.

1, 2, . . . , m

1, 2, . . . , n

∈ {

∈ {

Step 3: Calculate the average requester satisfaction (ARS)
for all requesters and the average collaborator satisfaction
(ACS) for all collaborators. The calculation will be introduced
in Section IV-C.

Step 4: Model the matching as an optimization problem
and ﬁnd the solution. This step will be further explained in
Section IV-D.

In the next, we will describe how the scores mentioned
above are calculated. Like many related works, we ignore the
energy consumption and the time delay for collaborators to
transfer the computation results back to requesters as the data
sizes of the outcomes are usually very small in practice [6],
[42]. Moreover, to make our notation more compact, we deﬁne
the following characteristic function:

I[X] =

(cid:40)

1 Event X is true;
0 Otherwise.

(1)

A. Service Preference Score Calculation

First, let SP S(xij) be the SPS of service j for requester i.
It evaluates i’s comprehensive satisfaction with j considering
i’s preference in task delay, offering price, and collaborator
reputation, which can be calculated by:

SP S(xij) =

(cid:32) 3

(cid:88)

k=1

(cid:33)

spsi,j,k

φk

·

·

I[xij

= 0],

(2)

StartLoad requirement and service information, and remove the requirements and services whose prices are out of rangeFor each matching result xij, calculate SPS(xij) and RPS(xij)For matching result X, calculate ARS(X) and ACS(X)Model the optimization problem and find the solutionEnd(cid:54)
6

where φk (k = 1, 2, 3) are signiﬁcance factors, and spsi,j,k
∈
[0, 1] (k = 1, 2, 3) will be explained in the next. Signiﬁcance
factors are speciﬁed by requesters, which indicates the im-
portance of a certain service preference to the requesters. For
example, if the requester pays more attention to the offering
price, it could increase the corresponding signiﬁcance factor
φ2 and reduce φ1 and φ3.

1) Task Delay: Task delay is the main factor that inﬂuence
the quality of service (QoS) of requesters, which composes
transmission delay and computation delay:

tij =

xijsi
rj

+

xijQi
fj

.

(3)

Then spsi,j,1, the task delay SPS of service j for requester i,
is calculated by:

spsi,j,1 =

(cid:19)

(cid:18)
1

tij
τi

−

I[tij

·

≤

τi].

(4)

The shorter the task delay is, the better the QoS of the service
is, and the higher spsi,j,1 will be.

2) Offering Price: The offering price SPS of service j for

requester i, denoted by spsi,j,2, is calculated by:

spsi,j,2 = eopj −bpi

I[opj

·

≤

bpi].

(5)

The closer opj and bpi are, the more satisﬁed the requester
will be with the matching result.

3) Collaborator Reputation: Collaborator reputation score
j reﬂects the credibility of service j and directly serves as

Rc
spsi,j,3 in MPM mechanism:

spsi,j,3 = Rc
j.

(6)

collaborator j, the RPS of requirement i for collaborator j,
denoted by rpsj,i,1, is calculated by:

rpsj,i,1 =

(cid:19)

(cid:18)
1

Eji
(cid:15)j

−

I[Eji

·

(cid:15)j].

≤

(9)

We can see that rpsj,i,1 decreases as Eji increases.

2) Bidding Price: The bidding price RPS of requirement i

for collaborator j, denoted by rpsj,i,2, is calculated by:

rpsj,i,2 = e−

opj
bpi

I[bpi

·

≥

opj].

(10)

The larger bpi is, the higher the requester is willing to pay,
and the more the collaborator can beneﬁt.

3) Requester Reputation: Similarly, requester reputation re-
ﬂects the credibility of requirement, which is directly regarded
as rpsj,i,3:

rpsj,i,3 = Rr
i.

(11)

C. Average Requester/Collaborator Satisfaction Score Calcu-
lation

The requester and collaborator average satisfaction scores,
denoted by ARS(X) and ACS(X) respectively, evaluate the
overall satisfaction degree of all requesters and collaborators
with matching result X. The two scores are calculated by:
m
(cid:88)

n
(cid:88)

SP S(xij)xij,

(12)

ARS(X) =

1
m

ACS(X) =

1
n

i=1

j=1

n
(cid:88)

m
(cid:88)

j=1

i=1

RP S(xij)xij.

(13)

By requiring (cid:80)3
ACS(X) are also in the range of [0, 1].

k=1 φk = (cid:80)3

l=1 ψl = 1, ARS(X) and

B. Requirement Preference Score Calculation

D. Modeling and Solving the Optimization Problem

Then,

let RP S(xij) be the RPS of requirement i for
collaborator j. It evaluates j’s comprehensive satisfaction with
i considering j’s preference in energy consumption, bidding
price, and requester reputation, which can be calculated by:

RP S(xij) =

(cid:32) 3

(cid:88)

l=1

(cid:33)

rpsj,i,l

ψl

·

·

I[xij

= 0],

(7)

where ψl (l = 1, 2, 3) are signiﬁcance factors, and rpsj,i,l
(l = 1, 2, 3) will be explained in the next. Like φk, signiﬁ-
cance factors ψl are speciﬁed by collaborators and indicates
the importance of a certain requirement preference to the
collaborators.

1) Energy Consumption in Collaborator: Compared to task
delay, collaborators care more about their energy consumption
when taking over the tasks from requesters. The energy
consumption in collaborator i is mainly caused by receiving
the data of the ofﬂoaded tasks and executing them, which can
be calculated by:

Eji = ecom

j

xijsi
rj

+ eexe
j

xijQi
fj

,

(8)

The objective of the MPM mechanism is to ﬁnd the optimal
(X), the overall satisfaction of all

X = X ∗ that maximize
participants:

J

(X)

max

X∈[0,1]m×n J
n
(cid:88)

s.t.

xij

≤

1, i = 1, 2, . . . , m,

sixij

≤

Cj j = 1, 2, . . . , n,

xij

1,

≤

i = 1, 2, . . . , m, j = 1, 2, . . . , n,

j=1
m
(cid:88)

i=1
0

≤

where

(X) = w1ARS(X) + w2ACS(X),

J

and w1 and w2 are the weights that indicate the signiﬁcance
of requesters and collaborators. Constraint (15) means that
the total tasks ofﬂoaded by requester i cannot exceed what
is submitted in requirement i, and constraint (16) means that
the total size of the tasks ofﬂoaded to collaborator j cannot
exceed the cache size offered by service j.

(14)

(15)

(16)

(17)

(18)

j

and eexe

where ecom
are the energy consumption of com-
munication and task execution per second. Considering (cid:15)j,
the maximum energy consumption of the tasks ofﬂoaded to

j

Since SP S(xij) is a linear function to xij because of the
calculation of tij by (3), the optimization problem represented
by (14) is a quadratic programming problem.

(cid:54)
E. Rejection Rules and Transaction Execution

Since the MPM mechanism tries to maximize the overall
satisfaction of all participants, it might be possible that some
individuals are not willing to compromise their interests. In
this case, they can choose not to accept the transaction based
on their rejection rules. In more detail, users can also build
smart contracts that speciﬁes their criteria for rejection, e.g.,
the lowest acceptable RPS or SPS in their mind. Note that
these smart contracts also need to be validated by participants
via distributed consensus. Any matching result that fails to
meet these criteria will be automatically rejected. As a result,
unmatched requirements and services will enter the next round
of matching together with new ones. Otherwise, the submitter
of unmatched requirements can also choose to ofﬂoad their
tasks to the cloud center.

On the other hand, all matching transactions that are not
rejected are seen as accepted. They will be saved in the
transaction ledger as smart contracts and will come into effect
immediately, automatically, and mandatorily. It is worth noting
that transaction execution may fail when the requester fails to
pay the price, or the collaborator fails to provide the resource
as promised. Whether it is successful or not, the transaction
execution results will be fed back to the reputation system,
which could then affect the reputation scores of participants
involved.

F. Distributed Requester/Collaborator Reputation

As mentioned before, requester reputation Rr

i and collab-
orator reputation Rc
j evaluate the credibility of requester i
and collaborator j respectively. Implementing a distributed
reputation system can promote the collaborative regulation
of the resource trading stage. In this paper, we adopt a
similar idea of [25] in the design of the distributed reputation
mechanism.

The design of blockchain-based distributed reputation mech-
anism of this paper is shown in Fig. 4. Two blockchains
are maintained, one for requester reputation and the other
for collaborator reputation. These reputation scores can be
queried by any participant in the system. Reputation rules
are smart contracts that speciﬁes the methods for reputation
updates and the conditions under which these updates are
triggered. All requesters and collaborators make the decision
on the addition, deletion, and modiﬁcation of reputation rules
together by running consensus.

1) Reputation-Based Trading Price: Traditional double
auction method usually set the ﬁnal trading price as the bidding
price submitted by the buyer. In order to enhance the fairness,
we adopt the reputation-based α-double auction [25], which
calculates the trading price as follows:

tpij = α

bpi + (1

α)

·

−

opj,

·

(19)

Rc
j
i+Rc
j

Rr

. The resulting trading price will be closer
where α =
to the price given by the party with the lower reputation, which
is more beneﬁcial to the party with the higher reputation.

7

Fig. 4. Blockchain-based distributed reputation.

2) Reputation Rules: Reputation rules are the core of
the distributed reputation mechanism. To reduce the system
complexity, here we adopt the following simple rules:

• A new participant is assigned with an initial reputation

score of 0.6.

• On a successful resource transaction, the reputation scores
of both the requester and collaborator increase by 0.01.
• For every failed resource transaction: if requester i fails
to pay the trading price, then Rr
i is decreased by 0.1; if
collaborator j fails to provide the claimed service, then
Rc

j is decreased by 0.1.

• The ﬁnal reputation scores should be restricted in [0, 1].
The parameters in these rules are determined by repeated simu-
lation tests. Every new participant is assumed to be benign and
is assigned with a “pass’’ reputation score of 0.6. Moreover,
the penalty of 0.1 for a failed transaction is much higher
than the reward of 0.01 for a successful transaction. This can
intuitively encourage participants to effectively complete each
transaction. These reputation rules are implemented as smart
contracts. Once the current trading period is over, these rules
will automatically trigger reputation updates once predeﬁned
conditions are satisﬁed.

V. EVALUATION

This section evaluates our system through simulation. In the
evaluation, we mainly compare our MPM mechanism with the
classical DA matching mechanism [26].

A. Simulation Setup

All simulation programs are written by Python 3.8 (64 bit)
and are executed on a computer with Intel® Core™ i7-6500U
CPU at 2.50GHz and 12GB. The optimization problem (14)
is solved via GEKKO Python library.

The ranges of parameters in the simulation are shown
by Table I, and all parameters are selected in their ranges
uniformly at random. The selection of these ranges is based on
the works of [6], [9], [22], [42], [43]. We set m = n, and the
ratio of the numbers of edge servers and IIoT terminals is set
by 1/30. In addition, by repeated adjustment and veriﬁcation,
we choose w1 = w2 = 0.5, φ1 = φ3 = ψ1 = ψ3 = 0.36, and
φ2 = ψ2 = 0.28.

............Requester Reputation ChainCollaborator Reputation ChainReputation Rules (Smart Contracts)Requesters/CollaboratorsTrigger automatic update reputation scores when conditions are satisfiedDecide reputation rules after reaching consensusQuery for latest requester/collaborator reputation scores8

TABLE I
SELECTION RANGES OF PARAMETERS FOR SIMULATION

Parameter

si: Size of tasks (GB)
Qi: CPU cycles required (Gcycle)
τi: Maximum tolerable delay (s)
Cj : Cache size offered (GB)
fj : CPU frequency offered (GHz)
rj : Transmission rate offered (Gbps)
(cid:15)j : Maximum tolerable energy consump-
tion (J)
ecom
j
mission (J/s)
eexe
j : Unit energy consumption for execu-
tion (J/s)
bpi: Bidding price ($/Gcycle)
opj : Offering price ($/Gcycle)
Rc

: Unit energy consumption for trans-

j : Requester/Collaborator reputation

i, Rr

Value

Edge

Terminal

[0.06, 10]
[0.6, 90]

[10, 30]
[5, 10]
[3, 15]
[0.5, 2.5]

[5, 15]
[1, 5]
[1, 5]
[0.1, 0.9]

[150, 250]

[5, 15]

[0.2, 0.5]

[0.1, 0.3]

[0.75, 1.25]

[0.3, 0.6]

[0.1, 10]
[0.1, 10]
[40, 100]

Fig. 5. Comparisons of ARS, ACS, and objective values.

10% requirements and services cannot ﬁnd a match through
DA, which is much higher than the proportion of unmatched
requirements and services of by following MPM.

B. Double Auction

DA is one of the most popular matching strategy in market
design of various settings, e.g., computational resource allo-
cation [44], energy trading [45], data trading [46], and asset
market [47]. We believe that it is worthwhile to compare our
method with DA because it is such a widely used matching
mechanism. Speciﬁcally, DA sorts the requirement list accord-
ing to the ascending order of bidding prices and the service
list according to the descending order of offering prices [26].
It then traverses each list from the top and ﬁnds a match when
it encounters an offering price in the service list that is lower
than the bidding price at the current location of the requirement
list. The trading price of this match will be the bidding price
provided by the requester.

For each group of requirements and services generated,
we execute MPM and DA respectively and compare their
performance indices under the same conditions. We use solid
lines to represent MPM and dashed lines to represent DA in
all the ﬁgures that follows.

C. Satisfaction Scores

Fig. 5 compares the ARS, ACS, and objective values of
MPM and DA mechanisms. We can see that there are sig-
niﬁcant gaps between the two methods in these scores: the
(X) of MPM are more
values of ARS(X), ACS(X), and
than twice that of DA. Note that these three scores evaluate
the average satisfaction of requesters, collaborators, and all
participants towards matching result X. It can be as well
interpreted that, on average, participants are more likely to
accept the matching results of MPM than DA. This intuitive
provide an incentive for collaborative ofﬂoading participants
when MPM mechanism is adopted.

J

To further analyze these differences, we extract the scores
of SPS and RPS that rank the top 10% and the bottom 10%
from each group of data. We can see from the two graphs
in Fig. 6 that the high scores of SPS and RPS of MPM are
slightly higher than that of DA. Moreover, the low scores of
SPS and RPS of MPM fall between 0.2 and 0.3, but the
low scores of DA remain at 0. It indicates that more than

(a) SPS

Fig. 6. Comparisons of high/low SPS and RPS.

(b) RPS

A similar conclusion can be drawn in Fig. 7, which visualize
an example of the matching result X of both mechanisms
when m = n = 30. In Fig. 7a, the color difference of
the blocks is not very obvious, but the distribution is quite
uniform. It is because that matrix X of MPM does not have
many zero entries, but all nonzero entries are relatively small.
In other words, most requirements will be matched, but each
matching collaborator receives a fairly small portion of these
tasks. On the other hand, Fig. 7b has several dark-colored
blocks, saying that matrix X of DA has only a small number
of nonzero entries. It suggests that the number of matches
DA generates is much smaller, but some of the matched
collaborator may need to undertake a large proportion of the
tasks.

50100150200250300morn0.20.30.40.5MPMARS(X)MPMACS(X)MPMJ(X)DAARS(X)DAACS(X)DAJ(X)50100150200250300m0.00.10.20.30.40.50.6SPS(xij)MPMHighMPMLowDAHighDALow50100150200250300n0.00.20.40.60.8RPS(xij)MPMHighMPMLowDAHighDALow9

105%, 108%, and 115% respectively. This signiﬁcant increase
in resource consumption of collaborators is because more tasks
can be executed by adopting the matching results of MPM.

(a) X of MPM

(b) X of DA

Fig. 7. Comparison of matching results X with m = n = 30.

D. Task Completion of Requesters

Here we observe the completion of the requesters’ tasks.
Fig. 8 compares the total sizes of the tasks executed of both
mechanisms. It shows that the total size of the tasks completed
by using MPM is about 2.8 times of that of DA. On the
other hand, compared with DA, Fig. 9 exhibits a reduction
of more than 50 times in the maximum task delay of MPM.
The huge gaps in Fig. 8 and 9 are caused by MPM’s more
equal distribution of tasks among collaborators. This is also
supported by the example in Fig. 7

(a) CPU Cycles

(b) Cache Sizes

Fig. 8. Comparison of total sizes of tasks executed.

(c) Energy

Fig. 10. Comparisons of resource consumption of collaborators.

E. Resource Consumption of Collaborators

Next, we evaluate the resource consumption of collab-
orators. Fig. 10 compares the consumption of total CPU
cycles, cache sizes, and energy of collaborators between two
mechanisms. By calculation, we ﬁnd that compared with DA,
MPM increases the consumption of these three resources by

F. Reputation and Trade Price

Fig. 11 compares the average trade prices of two matching
mechanisms. The trade prices of MPM is about 37.67% lower
than that of DA on average. This drop is because that MPM
adopts α-double auction in (19) where the reputation scores of
both collaborator and requester are taking into account while
calculating the trade price.

the

We

into

relationship

then
look
between
requester/collaborator
reputation and average cost/income.
the case of
Fig. 12 looks into the matching results of
m = n = 300. In Fig. 12b, we plot the scatter chart of
average cost versus requester reputation and then draw the
corresponding linear ﬁtting line. The slope of the linear
ﬁtting line, denoted by corr, is the correlation coefﬁcient
between average cost and requester reputation. Since the
corr of DA is negative but has a greater absolute value, it
indicates that the DA mechanism is friendlier to requesters
with higher reputation scores. Similarly, Fig. 12a shows
that the corr of MPM is positive and has a slightly greater

Fig. 9. Comparison of maximum task delays.

51015202530i51015202530j0.00.20.40.60.81.051015202530i51015202530j0.00.20.40.60.81.050100150200250300m0200400600800TotalTask(GB)MPMDA50100150200250300m020406080MaxDelay(s)MPMDA50100150200250300n0200040006000800010000TotalCPUConsumed(Gcycle)MPMDA50100150200250300n0200400600800TotalCacheConsumed(GB)MPMDA50100150200250300n05001000150020002500TotalEnergyConsumed(J)MPMDA10

Fig. 11. Comparison of average trade prices.

absolute value, it indicates that the MPM mechanism is more
friendly to collaborators with higher reputation scores. This
also indirectly proves that our resource trading system with
MPM can better incentivize the participation of collaborators
through the distributed reputation system.

(a) Average Cost vs. Requester Reputation

(b) Average Income vs. Collaborator Reputation

Fig. 12. Comparisons of average costs of requesters and average incomes of
collaborators.

VI. CONCLUSION

In this paper, we design a distributed computational resource
trading strategy for IIoT systems. The trading adopts a multi-
preference matching mechanism that can well encourage the
participation of collaborators with higher reputation scores.
With the help of blockchain, the decentralization of resource
trading is achieved, the security, traceability, and immutability
of transaction records are guaranteed, and the automation of
distributed matching and reputation mechanisms is enabled.

It is worth noting that the reputation mechanism in our
system is simpliﬁed for illustrative purposes. A practical rep-
utation system can be more comprehensive and complicated.
How to design a reasonable reputation mechanism for IIoT
systems in a distributed way is a direction worthy of further
study. In addition,
the evaluation of our resource trading
strategy is mainly based on simulation experiments. While
experiments that considers the impact of the heterogeneity
in processing time,
task load, communication media, and
blockchain platform in the real environment can be more help-
ful to test the practicability of our work. This will take place
in our future work. Finally, computational workload prediction
can help to bring more intelligence to collaborative com-
putation task ofﬂoading. Therefore, combining our resource
trading strategy with computational workload prediction will
be another direction of our future work.

REFERENCES

[1] Y. Gao, “Using artiﬁcial intelligence approach to design the product
creative on 6G industrial internet of things,” International Journal of
Systems Assurance Engineering and Management, vol. 12, no. 4, pp.
696–704, 2021.

[2] H. Wu, Y. Yan, D. Sun, H. Wu, and P. Liu, “Multibuffers multiobjects
optimal matching scheme for edge devices in IIoT,” IEEE Internet of
Things Journal, vol. 8, no. 14, pp. 11 514–11 525, 2021.

[3] A. Islam, A. Debnath, M. Ghose, and S. Chakraborty, “A survey on
task ofﬂoading in multi-access edge computing,” Journal of Systems
Architecture, vol. 118, p. 102225, 2021.

[4] M. Liyanage, P. Porambage, A. Y. Ding, and A. Kalla, “Driving forces
for multi-access edge computing (MEC) IoT integration in 5G,” ICT
Express, vol. 7, no. 2, pp. 127–137, 2021.

[5] J. Ren, H. Wang, T. Hou, S. Zheng, and C. Tang, “Collaborative
edge computing and caching with deep reinforcement learning decision
agents,” IEEE Access, vol. 8, pp. 120 604–120 612, 2020.

[6] G. Li and J. Cai, “An online incentive mechanism for collaborative task
ofﬂoading in mobile edge computing,” IEEE Transactions on Wireless
Communications, vol. 19, no. 1, pp. 624–636, 2020.

[7] Z. Lv, D. Chen, R. Lou, and Q. Wang, “Intelligent edge computing
based on machine learning for smart city,” Future Generation Computer
Systems, vol. 115, pp. 90–99, 2021.

[8] X. Wang, Z. Liu, X. Tian, X. Gan, Y. Guan, and X. Wang, “Incentivizing
crowdsensing with location-privacy preserving,” IEEE Transactions on
Wireless Communications, vol. 16, no. 10, pp. 6940–6952, oct 2017.
[9] J. S. Ng, W. Y. B. Lim, S. Garg, Z. Xiong, D. Niyato, M. Guizani,
and C. Leung, “Collaborative coded computation ofﬂoading: An all-pay
auction approach,” arXiv preprint, 2020.

[10] J. He, D. Zhang, Y. Zhou, and Y. Zhang, “A truthful online mechanism
for collaborative computation ofﬂoading in mobile edge computing,”
IEEE Transactions on Industrial Informatics, vol. 16, no. 7, pp. 4832–
4841, 2020.

[11] S. Ai, D. Hu, J. Guo, Y. Jiang, C. Rong, and J. Cao, “Distributed multi-
factor electricity transaction match mechanism based on blockchain,”
in IEEE International Conference on Energy Internet (ICEI), 2020, pp.
121–127.

[12] V. Adat and B. B. Gupta, “Security in internet of things:

issues,
challenges, taxonomy, and architecture,” Telecommunication Systems,
vol. 67, no. 3, pp. 423–441, 2017.

[13] A. Tewari and B. Gupta, “Security, privacy and trust of different layers
in internet-of-things (IoTs) framework,” Future Generation Computer
Systems, vol. 108, pp. 909–920, 2020.

[14] B. Gupta and M. Quamara, “An overview of internet of things (IoT):
Architectural aspects, challenges, and protocols,” Concurrency and
Computation: Practice and Experience, vol. 32, no. 21, 2018.

[15] S. Su, Z. Tian, S. Li, J. Deng, L. Yin, X. Du, and M. Guizani, “IoT
root union: A decentralized name resolving system for IoT based on
blockchain,” Information Processing & Management, vol. 58, no. 3, p.
102553, 2021.

[16] N. Hu, Z. Tian, Y. Sun, L. Yin, B. Zhao, X. Du, and N. Guizani, “Build-
ing agile and resilient UAV networks based on SDN and blockchain,”
IEEE Network, vol. 35, no. 1, pp. 57–63, 2021.

50100150200250300morn5.05.56.06.57.07.58.0TradePrice($/Gcycle)MPMDA0.40.50.60.70.80.91.0RequesterReputation0246810AverageCost($/Gcycle)corr=0.2848corr=−0.9752MPMDA0.40.50.60.70.80.91.0CollaboratorReputation0246810AverageIncome($/Gcycle)corr=0.8640corr=0.1186MPMDA11

[38] Y. Liu, S. Xie, and Y. Zhang, “Cooperative ofﬂoading and resource
management for UAV-enabled mobile edge computing in power IoT
system,” IEEE Transactions on Vehicular Technology, vol. 69, no. 10,
pp. 12 229–12 239, 2020.

[39] S. Wang, X. Huang, B. Tan, and R. Yu, “A contract-based incentive
mechanism for resource sharing and task allocation in container-based
vehicular edge computing,” in Lecture Notes of the Institute for Com-
puter Sciences, Social Informatics and Telecommunications Engineering.
Springer International Publishing, 2020, pp. 116–129.

[40] J. Li, Z. Zhou, J. Wu, J. Li, S. Mumtaz, X. Lin, H. Gacanin, and
S. Alotaibi, “Decentralized on-demand energy supply for blockchain
in internet of things: A microgrids approach,” IEEE Transactions on
Computational Social Systems, vol. 6, no. 6, pp. 1395–1406, 2019.
[41] H. Yao, T. Mai, J. Wang, Z. Ji, C. Jiang, and Y. Qian, “Resource trading
in blockchain-based industrial internet of things,” IEEE Transactions on
Industrial Informatics, vol. 15, no. 6, pp. 3602–3609, 2019.

[42] J. Wang, W. Wu, Z. Liao, A. K. Sangaiah, and R. S. Sherratt, “An
energy-efﬁcient off-loading scheme for low latency in collaborative edge
computing,” IEEE Access, vol. 7, pp. 149 182–149 190, 2019.

[43] Z. Li, X. Zhou, Y. Liu, C. Fan, and W. Wang, “A computation ofﬂoading
model over collaborative cloud-edge networks with optimal transport
theory,” 2020 IEEE 19th International Conference on Trust, Security
and Privacy in Computing and Communications (TrustCom), 2021.
[44] L. Li, Y. Li, and R. Li, “Double auction-based two-level resource
allocation mechanism for computation ofﬂoading in mobile blockchain
application,” Mobile Information Systems, vol. 2021, no. 11, pp. 1–15,
2021.

[45] H. Haggi and W. Sun, “Multi-round double auction-enabled peer-to-peer
energy exchange in active distribution networks,” IEEE Transactions on
Smart Grid, vol. 12, no. 5, pp. 4403–4414, 2021.

[46] J. Mao, L. Tian, J. Zhang, G. Duan, and C. Wang, “Many-to-many data
trading algorithm based on double auction theory,” Procedia Computer
Science, vol. 174, pp. 200–209, 2020.

[47] T. Mikl´anek and M. Zajicek, “Personal traits and trading in an experi-

mental asset market,” SSRN Electronic Journal, 2020.

[17] U. Tariq, A.

Ibrahim, T. Ahmad, Y. Bouteraa, and A. Elmogy,
“Blockchain in internet-of-things: a necessity framework for security, re-
liability, transparency, immutability and liability,” IET Communications,
vol. 13, no. 19, pp. 3187–3192, 2019.

[18] Z. Tian, M. Li, M. Qiu, Y. Sun, and S. Su, “Block-DEF: A secure digital
evidence framework using blockchain,” Information Sciences, vol. 491,
pp. 151–165, 2019.

[19] T. Wang, H. Hua, Z. Wei, and J. Cao, “Challenges of blockchain in new
generation energy systems and future outlooks,” International Journal
of Electrical Power & Energy Systems, vol. 135, p. 107499, 2022, (in
press).

[20] W. K. Chan, J.-J. Chin, and V. T. Goh, “Simple and scalable blockchain
with privacy,” Journal of Information Security and Applications, vol. 58,
p. 102700, 2021.

[21] M. Samaniego, U. Jamsrandorj, and R. Deters, “Blockchain as a service
for IoT,” in 2016 IEEE International Conference on Internet of Things
(iThings) and IEEE Green Computing and Communications (GreenCom)
and IEEE Cyber, Physical and Social Computing (CPSCom) and IEEE
Smart Data (SmartData).

IEEE, 2016.
[22] D. C. Nguyen, P. N. Pathirana, M. Ding, and A. Seneviratne,
“Blockchain as a service for multi-access edge computing: A deep
reinforcement learning approach,” arXiv preprint, 2019.

[23] S. Ai, D. Hu, T. Zhang, Y. Jiang, C. Rong, and J. Cao, “Blockchain based
power transaction asynchronous settlement system,” in 2020 IEEE 91st
Vehicular Technology Conference (VTC2020-Spring), 2020, pp. 1–6.

[24] S. Ai, D. Hu, J. Guo, Y. Jiang, C. Rong, and J. Cao, “A blockchain-
based distributed controllable electricity transaction match system,” in
IEEE International Conference on Energy Internet (ICEI), 2020, pp.
56–62.

[25] T. Wang, J. Guo, S. Ai, and J. Cao, “RBT: A distributed reputation
system for blockchain-based peer-to-peer energy trading with fairness
consideration,” Applied Energy, vol. 295, p. 117056, 2021.

[26] K. Y. Bandara, S. Thakur, and J. G. Breslin, “Flocking-based decen-
tralised double auction for p2p energy trading within neighbourhoods,”
I nternational Journal of Electrical Power & Energy Systems, vol. 129,
no. 1, 2021.

[27] J. Qiu, Z. Tian, C. Du, Q. Zuo, S. Su, and B. Fang, “A survey on access
control in the age of internet of things,” IEEE Internet of Things Journal,
vol. 7, no. 6, pp. 4682–4696, 2020.

[28] M. Masud, G. S. Gaba, S. Alqahtani, G. Muhammad, B. B. Gupta,
P. Kumar, and A. Ghoneim, “A lightweight and robust secure key
things in COVID-19
establishment protocol for internet of medical
patients care,” IEEE Internet of Things Journal, vol. 8, no. 21, pp.
15 694–15 703, 2021.

[29] C. L. Stergiou, K. E. Psannis, and B. B. Gupta, “IoT-based big data
secure management in the fog over a 6G wireless network,” IEEE
Internet of Things Journal, vol. 8, no. 7, pp. 5164–5171, 2021.
[30] C. H. Liu, Q. Lin, and S. Wen, “Blockchain-enabled data collection
and sharing for industrial IoT with deep reinforcement learning,” IEEE
Transactions on Industrial Informatics, vol. 15, no. 6, pp. 3516–3526,
2019.

[31] L. Liu, W.-T. Tsai, M. Z. A. Bhuiyan, H. Peng, and M. Liu, “Blockchain-
enabled fraud discovery through abnormal smart contract detection on
Ethereum,” Future Generation Computer Systems, vol. 128, pp. 158–
166, 2022.

[32] V. Yodaiken, “Understanding Paxos and other distributed consensus

algorithms,” arXiv preprint, 2022.

[33] D. Wang, H. Wang, Z. Yan, J. Ma, Y. Li, S. Ai, and J. Cao, “PBFT-
based regional energy internet blockchain transaction consensus,” in In
Proceedings of 5th IEEE International Conference on Energy Internet
(ICEI).

IEEE, 2021, (in press).

[34] J. Chi, Y. Li, J. Huang, J. Liu, Y. Jin, C. Chen, and T. Qiu, “A secure and
efﬁcient data sharing scheme based on blockchain in industrial internet
of things,” Journal of Network and Computer Applications, vol. 167, p.
102710, 2020.

[35] Y. Lu, X. Huang, Y. Dai, S. Maharjan, and Y. Zhang, “Blockchain and
federated learning for privacy-preserved data sharing in industrial IoT,”
IEEE Transactions on Industrial Informatics, vol. 16, no. 6, pp. 4177–
4186, 2020.

[36] P. Porambage, J. Okwuibe, M. Liyanage, M. Ylianttila, and T. Taleb,
“Survey on multi-access edge computing for internet of things realiza-
tion,” IEEE Communications Surveys & Tutorials, vol. 20, no. 4, pp.
2961–2991, 2018.

[37] S. Yu and R. Langar, “Collaborative computation ofﬂoading for multi-
access edge computing,” in 2019 IFIP/IEEE Symposium on Integrated
Network and Service Management (IM), 2019, pp. 689–694.

