2
2
0
2

b
e
F
8
1

]

R
C
.
s
c
[

1
v
2
2
1
9
0
.
2
0
2
2
:
v
i
X
r
a

Decentralized Veriﬁable Mail-in Ballot Counting
for Postal Voting

Peichen Xie1

Zihan Zheng2

Xian Zhang1

Shuo Chen1

1Microsoft Research
2University of Science and Technology of China

Abstract

As computer vision is prevalently used for mail-in ballot processing
and counting, it becomes a point of centralized trust in postal voting. We
propose DVote, a prototype system of postal voting that provides decen-
tralized trust in computer vision. With blockchain and layer-2 technolo-
gies, DVote decentralizes the computation and model training of computer
vision to a group of scrutineers that hold the AnyTrust assumption, i.e.,
at least one member is honest. Consequently, the computational integrity
is anchored to the trustworthiness of a large public blockchain such as
Ethereum.

1

Introduction

Voting is by nature a process based on decentralized trust because no single
entity can be fully trusted by all voters and parties. As postal voting is more
prevalent, the large number of mail-in ballots are processed and counted by
machines in the election oﬃce. As shown in public videos [2, 3], the machines use
computer vision to verify handwritten signatures and read votes from the ballots.
Traditionally, the procedure must be undertaken and watched by humans from
opposing parties, embodying decentralized trust. However, today, computer
vision largely takes over humans in this procedure and becomes the point of
centralized trust. The general public is asked to trust the outcomes produced
by the machines. This is highly debatable, regardless of whether there is any
actual fraud or cyber attack in the procedure. In light of the serious trust crisis
after the 2016 and 2020 US general elections, it is clear that the public needs
conﬁdence in the procedure.

In this paper, we present DVote, a prototype system of postal voting with a
core function of decentralized veriﬁable mail-in ballot counting. The core idea is
to use blockchain and layer-2 technologies to decentralize the computation of the
computer vision algorithms in ballot counting. As a result, the trustworthiness
of the computation is similar to the trustworthiness of a large public blockchain
(such as Ethereum).

1

 
 
 
 
 
 
The most important assumption of DVote is AnyTrust [8], which essentially
means that the scrutineers (i.e., the decentralized nodes performing the compu-
tation) are not fully corrupted. This is a natural assumption in voting because
the scrutineers consist of multiple (even opposing) parties and entities.

By leveraging the opposing forces, DVote guarantees the computation in
ballot counting, especially the signature veriﬁcation and vote reading of mail-in
ballots, is genuine. On the other hand, DVote also guarantees the computer vi-
sion model used for the computation is audited beforehand, by providing proof
of provenance that commits how the model is trained. The underlying tech-
nology of both components is called Agatha [13], which enables decentralized
veriﬁable deep learning computation and bridges the gap between AnyTrust and
the trustworthiness of blockchains.

The techniques for decentralized veriﬁcation are non-trivial. First, rigorous
veriﬁcation requires the computation to be deterministic, so we take many eﬀorts
to ensure the (bit-wise) reproducibility of deep learning computation. Second,
the computational performance must remain reasonably high in order to process
the numerous ballots, so we utilize fraud proof instead of cryptography methods
for decentralized veriﬁcation. At last, with these challenges tackled, the compu-
tation will be done with negligible slowdown while rational scrutineers will not
cheat because dishonest results will always be disproven by an honest scrutineer
(thanks to AnyTrust).

In the following part of this paper, we ﬁrst describe the overview of the DVote
prototype and then detail the two important components of DVote, i.e., decen-
tralized veriﬁable ballot counting (DVBC) and decentralized algorithm audit
(DAA). We also note that there are numerous vulnerabilities besides computa-
tional integrity in postal voting [7, 9]. End-to-end veriﬁability is not the goal of
this paper, so we leave those vulnerabilities for further study.

2 Overview of DVote

In this section, we present the overview of DVote, our prototype system for
postal voting. DVote includes ﬁve stages, which constitute a simpliﬁed process
of postal voting. DVBC and DAA, the most important components of DVote,
are integrated into the ballot counting stage and the setup stage respectively. In
addition to our description, readers may refer to [7, 9] for the detailed real-world
postal voting systems.

2.1 Voting process

Figure 1 shows the general ﬁve-stage process of DVote. The ﬁrst stage,
voter registration, is a pre-voting stage, where eligible voters register necessary
personal information. Here we highlight the IDs and signatures as they will be
critical in ballot counting.

The second stage includes the setup of the election oﬃce, production of mail-

2

Figure 1: Five-stage process of postal voting

in ballots (including ballot papers and voting envelopes1), and the delivery of
the ballots. Each envelope is printed with a voter ID, and each ballot paper is
printed with a random ballot ID2. The voter ID and the ballot ID should be
unlinkable.

In the third stage, the voter receives the mail-in ballot. He/she should mark
his/her vote on the ballot paper, fold the ballot paper, put it into the envelope,
and sign his/her name on the envelope. Then, the ballot is posted to the election
oﬃce.

In the fourth stage, the election oﬃce receives the mail-in ballots and counts

the ballots with the machines. We will detail this stage in Section 2.2.

After ballot counting, the result of voting will be published. At this last
stage, voters can review the correctness of the result and check whether their
individual ballot is correctly recorded. We do not focus on ballot secrecy for the
moment, because this is orthogonal to this paper. Ballot secrecy is an arguing
issue in postal voting, and it could be mitigated by removing ballot IDs or using
cryptography [4].

2.2 Ballot counting

Within the ﬁve stages, the ballot counting stage is the focus of this paper.

Figure 2 shows the three-step process of mail-in ballot counting.

The mail-in ballots are put into a sorting machine at the ﬁrst step. For
each ballot, the voter ID’s bar code and the handwritten signature are scanned
by the machine, and the signature is compared with the registered signature of
this voter ID, by a speciﬁc handwritten signature veriﬁcation algorithm. This
algorithm is audited in the setup stage with DAA, as we will describe in Sec-
tion 4, and is executed in a decentralized veriﬁable manner with DVBC, as we
will describe in Section 3.

On, for example, the election day, the veriﬁed ballots are sent to a machine
to open the envelopes and extract the ballot papers into ballot boxes. After this

1There may be extra ballot envelopes, signature card, etc.
2The ballot ID is optional as traceable ballots are prohibited in some places. Removing

ballot IDs can make the ballots untraceable.

3

Figure 2: Three-step process of ballot counting

step, the voting envelopes and the ballot papers are unlinked. No one knows the
mapping between the voter IDs and the ballot IDs except the voters themselves.
Then, the ballot papers are sent to a vote tabulator for optical scanning
and tabulation. Only a small number of unidentiﬁable ballots may need manual
double-check. Otherwise, the votes are automatically read and counted. Similar
to handwritten signature veriﬁcation, the algorithm used in this step is also
secured by the techniques of DVBC and DAA.

3 Decentralized Veriﬁable Ballot Counting

In this section, we present DVBC, a component that enables decentralized

veriﬁable computing for mail-in ballot counting.

3.1 Target of DVBC

In the ballot counting process described in the last section, computer vision
is critical for handwritten signature veriﬁcation and vote tabulation. They both
can be divided into two sub-steps: scanning and image processing. Image scan-
ning is assumed uncontroversial because all the paper records are stored and
auditable. However, the image processing today is done with non-transparent
algorithm and unveriﬁable computation.

How can people verify the integrity of the image processing? The compu-
tation can be outsourced to a fully trusted and veriﬁable server if there is one.
However, no single entity can be trusted by everyone in voting. Thus, in this
section, we aim to make the computation veriﬁable in a decentralized manner.
We assume people have agreed on what computer vision algorithm should
be used in this section. In Section 4, we will further discuss the provenance of
the algorithm.

4

3.2 Design of DVBC

We ﬁrstly employ a large public blockchain with general computation capa-
bility for the computation in ballot counting. We take Ethereum for example.
The (quasi) Turing completeness of Ethereum virtual machine [5] enables arbi-
trary computation to be executed and veriﬁed on all blockchain nodes, provided
that the amount of computation is under the cost (i.e., the gas in Ethereum)
limit. As a result, the nodes as a decentralized community can reach an agree-
ment on whether the computation is correct, although no member in the com-
munity is trusted by everyone. The trust assumption for community consensus
is about the whole community, as opposed to an individual. For example, the
assumption can be that at least half of the community is honest.

Secondly, we employ layer-2 techniques [6] to handle expensive computer
vision algorithms, such as the deep learning models used in handwritten signa-
ture veriﬁcation for feature extraction. Imagine a VGG16 model [11] containing
30 billion ﬂoating-point operations runs on Ethereum. Even with the mini-
mum gas consumption for every operation, we estimate that processing a single
image will consume 90 billion gas, which exceeds the block gas limit by 3000
times. Therefore, we use Agatha [13] to oﬄoad the computation to a small
group of scrutineers (i.e., layer-2 nodes as shown in Figure 3), assuming at least
one scrutineer is honest (i.e., AnyTrust), so that Ethereum only needs to do
simple acknowledgment or arbitration. Speciﬁcally, if the scrutineers’ results
are consistent, Ethereum accepts the result without re-computation; otherwise,
Ethereum arbitrates between inconsistent scrutineers by an O(log n) fraud proof
protocol [8, 13].

Figure 3: Veriﬁable computing with decentralized trust

AnyTrust is a reasonable assumption in voting. It is natural to choose the
scrutineers to represent the various parties of the candidates and diﬀerent enti-
ties such as the government, the congress, the court, the media, etc. All these
entities may want to cheat in order to beneﬁt their favored candidates. How-
ever, the AnyTrust assumption still holds, because for each ballot, at least one
scrutineer is motivated to be truthful. In other words, it is logical to believe that

5

no scrutineer is motivated to falsely approve an invalid ballot of its opponent
candidate or falsely disapprove a valid ballot of its favored candidate.

A potential serious misunderstanding of our design is that Ethereum dele-
gates the group of layer-2 nodes to reach a consensus for them. Suppose 7 out
of 10 nodes are dishonest and they claim “1+1 = 3”. If Ethereum delegated the
10 nodes to reach a consensus, “1 + 1 = 3” would become 10 nodes’ consensus
in the proof of work mechanism (i.e., the simple majority rule). However, this
is not what happens in DVBC. There is no concept called “the scrutineers’ con-
sensus” when their results are inconsistent. Under the AnyTrust assumption,
an honest node will succeed in disproving “1 + 1 = 3” in front of Ethereum, and
the claim is thus rejected. On the other hand, assuming AnyTrust, if all nodes
claim “VGG16(x) = y”, this claim is as trustworthy as “VGG16(x) = y” is
computed by Ethereum, but the computational cost for the former is negligible
compared to the latter.

4 Decentralized Algorithm Audit

In this section, we aim to design a mechanism to audit the computer vision
algorithm used in mail-in ballot counting. As we noted, the image process-
ing in mail-in ballot counting today is done in a centralized manner, with a
non-transparent algorithm and unveriﬁable computation. Although we have
guaranteed computational integrity in Section 3, the algorithm itself may have
vulnerabilities (e.g., back doors [10]).

To address this issue, we present DAA, a component added into the setup
stage in DVote. Traditionally, programs can be audited via code review. How-
ever, deep learning models cannot, as only their parameters and architecture are
visible. People cannot tell how the parameters are trained, whether the training
data are poisoned, or whether they are injected with back doors during training.
Thus, the model provenance should also be reviewed in a decentralized manner.
As if in DVBC, we leverage a decentralized group of scrutineers to audit the
model provenance, by verifying the computation of model training. We express
the training as

M = f (...f (f (M0, D1), D2)...Dn)

(1)

where M is the ﬁnal model, M0 is the initial model, n is the number of iterations,
f is the training algorithm (e.g., gradient descent), and Di is called a mini-
batch, representing the training data used in the i-th iteration. Given M0,
{Di} and f , the scrutineers veriﬁes the computation (1) by the method detailed
in Section 3.2.

Speciﬁcally, both DVBC and DAA use Agatha [13] for decentralized veri-
ﬁable deep learning computation: DVBC for model “inference” but DAA for
model training. Since the original Agatha only supports deterministic compu-
tational graphs, to verify model training with Agatha, computation (1) must
be deterministic even if it runs on GPUs. We address this issue by integrating
reproducible deep learning techniques [1] into Agatha’s “sequencing” technique
and leveraging the data parallelism in matrix multiplications and deep learning.

6

As a result of veriﬁable training, people can have a consensus that M is
correctly trained from M0, {Di} and f . Anyone can review this provenance
by querying a scrutineer he/she trusts. Thanks to Agatha, the cost of DAA is
negligible compared with other veriﬁable computing methods.

Note that the intrinsic weakness of deep learning models is out of this pa-
per’s scope. It should be enhanced in other ways. For example, people are using
deep learning models today for handwritten signature veriﬁcation although they
cannot achieve 100% accuracy because a manual double-check can mitigate the
problem. One common concern about making the models non-secret is adver-
sarial examples [12]. This vulnerability can be mitigated by ensemble methods.

5 Conclusion

Computation in postal voting can be made veriﬁable with decentralized
trust. To this end, we propose the DVote prototype with blockchain technolo-
gies and the AnyTrust assumption, ensuring that the computation in mail-in
ballot counting is as trustworthy as a large public blockchain. We hope this
study can inspire the decentralized computing paradigm to target challenging
problems in society.

References

[1] https://pytorch.org/docs/stable/notes/randomness.html.

[2] https://www.youtube.com/watch?v=bDtPAiDhE48.

[3] https://www.youtube.com/watch?v=iH23u2DSy94.

[4] Josh Benaloh, Peter Y. A. Ryan, and Vanessa Teague. Veriﬁable Postal

Voting. In International Workshop on Security Protocols, 2013.

[5] Gavin Wood. Ethereum: A secure decentralised generalised transaction

ledger, 2021.

[6] Lewis Gudgeon, Pedro Moreno-Sanchez, Stefanie Roos, Patrick McCorry,
and Arthur Gervais. SoK: Layer-Two Blockchain Protocols.
In Inter-
national Conference on Financial Cryptography and Data Security (FC),
2020.

[7] Michael P. Heinl, Simon G¨olz, and Christoph B¨osch. A Comparative Se-
curity Analysis of the German Federal Postal Voting Process. In Annual
International Conference on Digital Government Research, 2021.

[8] Harry A. Kalodner, Steven Goldfeder, Xiaoqi Chen, S. Matthew Weinberg,
and Edward W. Felten. Arbitrum: Scalable, Private Smart Contracts. In
USENIX Security Symposium, 2018.

7

[9] Christian Killer and Burkhard Stiller. The Swiss Postal Voting Process
and Its System and Security Analysis. In International Joint Conference
on Electronic Voting, 2019.

[10] Ali Shafahi, W. Ronny Huang, Mahyar Najibi, Octavian Suciu, Christoph
Studer, Tudor Dumitras, and Tom Goldstein. Poison Frogs! Targeted
Clean-Label Poisoning Attacks on Neural Networks. In Conference on Neu-
ral Information Processing Systems (NeurIPS), 2018.

[11] Karen Simonyan and Andrew Zisserman. Very Deep Convolutional Net-
works for Large-Scale Image Recognition. In International Conference on
Learning Representations (ICLR), 2015.

[12] Christian Szegedy, Wojciech Zaremba, Ilya Sutskever, Joan Bruna, Du-
mitru Erhan, Ian J. Goodfellow, and Rob Fergus. Intriguing Properties of
Neural Networks. In International Conference on Learning Representations
(ICLR), 2014.

[13] Zihan Zheng, Peichen Xie, Xian Zhang, Shuo Chen, Yang Chen, Xiaobing
Guo, Guangzhong Sun, Guangyu Sun, and Lidong Zhou. Agatha: Smart
Contract for DNN Computation. arXiv, 2105.04919, 2021.

8

