1
2
0
2

t
c
O
6
2

]
I

N
.
s
c
[

1
v
1
7
8
3
1
.
0
1
1
2
:
v
i
X
r
a

LayerZero: Trustless Omnichain Interoperability Protocol

Ryan Zarick

Bryan Pellegrino

Caleb Banister

May 26, 2021

Abstract

The proliferation of blockchains has given developers a
variety of platforms on which to run their smart con-
tracts based on application features and requirements for
throughput, security, and cost. However, a consequence
of this freedom is severe fragmentation; Each chain is
isolated, forcing users to silo their liquidity and limit-
ing options to move liquidity and state between walled
ecosystems.

This paper presents LayerZero, the ﬁrst trustless om-
nichain interoperability protocol, which provides a pow-
erful, low level communication primitive upon which a
diverse set of cross-chain applications can be built. Us-
ing this new primitive, developers can implement seam-
less inter-chain applications like a cross-chain DEX or
multi-chain yield aggregator without having to rely on
a trusted custodian or intermediate transactions. Simply
put, LayerZero is the ﬁrst system to trustlessly enable
direct transactions across all chains. Allowing transac-
tions to ﬂow freely between chains provides opportuni-
ties for users to consolidate fragmented pockets of liquid-
ity while also making full use of applications on separate
chains. With LayerZero, we provide the network fabric
underlying the fully-connected omnichain ecosystem of
the future.

1

Introduction

At the core of the blockchain concept are the three pillars
of decentralization, transparency, and immutability. No
single entity controls the blockchain, and actions on the
blockchain are veriﬁable and irreversible. These pillars
create a foundation upon which an entity can act with-
out trusting any other entity. This trust guarantee is one
reason why, for example, cryptocurrencies are enticing
compared to ﬁat currency.

If all users and all applications coexisted in one uniﬁed
blockchain, then this paper would conclude here. How-

Figure 1: LayerZero enables cross-chain transactions.

ever, the utility of the blockchain has led to a prolifera-
tion of diverse applications, with unique intricacies and
requirements. The demand for a diverse set of function-
alities spurned the growth of specialized chains. Each
of these chains has fostered immense growth in appli-
cations within its own ecosystem, but the isolation be-
tween these ecosystems has emerged as a key limit to
adoption. Users and developers are forced to split time,
resources, and liquidity between separate chains. A nat-
ural consequence of the sheer number of so-called Layer
1 blockchains (as many as 109 at the time of writing [1])
is the need to extend the above-mentioned three pillars
to envelope interactions across multiple chains simulta-
neously. One example of an in-demand interaction be-
tween chains is the transfer of tokens, which we discuss
later in this section.

In blockchain parlance, the unit of work is a transac-
tion, immutable and irrevocable. Transactions, collated
into blocks, form the basis of security in a blockchain
transactions have always been a
system. However,
single-chain concept; as described below,
interacting
across chains has traditionally required a third-party
mechanism outside of the normal blockchain cryptosys-
tem. In contrast, this paper describes the ﬁrst messaging
protocol upon which native cross-chain transactions are
possible: LayerZero.

To illustrate the powerful communication primitive
LayerZero provides, we look at the example of trans-
ferring tokens from one chain to another. Currently, to
convert between tokens of two chains, a user must lever-

1

Layer 2Lightning Network, Raiden Network, Polygon, etc.Scalable transactions on a single Layer 1 chainProvides native, direct communication between any other chainsCore of cryptocurrency markets,maintain distributed ledgersLayer 1Bitcoin, Ethereum, Stellar, Dogecoin, etc.LayerZero 
 
 
 
 
 
age either a centralized exchange or a cross-chain decen-
tralized exchange (DEX) (also known as a cross-chain
bridge), both of which require a compromise.
In the
case of a centralized exchange, e.g., Binance.com [3],
the user must trust the exchange that is tracking deposits
and funding withdrawals. This trust relationship is con-
trary to the fundamental trustlessness of blockchain con-
sensus and lacks the security of an on-chain automated
system. Using a DEX, such as AnySwap [2] or THOR-
Chain [23], alleviates the trust problem by conducting
the transfer on-chain, but existing DEX implementations
involve converting the user token into a protocol-speciﬁc
token that transits their intermediate consensus layer to
achieve transaction consensus. This intermediate con-
sensus layer, though usually implemented in a secure
manner, does require the user to trust a side chain to
facilitate the token transfer. As we show in this paper,
this additional overhead is unnecessary. Despite heavy
user demand, no solution has emerged that is both efﬁ-
cient, direct, while still preserving the core reason for us-
ing blockchains in the ﬁrst place: trustlessness. Taking
a step back, LayerZero’s direct cross-chain transactions
gives developers the tools to build just that.

It is important to note that LayerZero and the ex-
changes described above operate at two different levels
of the implementation stack. LayerZero is a communi-
cation primitive that enables diverse omnichain applica-
tions, whereas an exchange is one example of an applica-
tion that would beneﬁt from re-implementation on top of
LayerZero. Section 2 outlines the blockchain technology
landscape and explores the exchange example further.

To properly explain the capabilities of LayerZero and
its role in the blockchain ecosystem, we ﬁrst present a
formalization of the fundamental communication prim-
itive required to enable inter-chain transactions, which
we term valid delivery (Section 3). We then describe
how LayerZero provides this primitive in a trustless man-
ner, thus preserving the security promise of blockchain.
LayerZero is the ﬁrst trustless omnichain interoperabil-
ity layer, and supports messaging directly between both
Layer 1 and Layer 2 chains (Figure 1).

A cross-chain transaction between chains A and B con-
sists of a transaction tA on A, a communication protocol
between A and B, and a message m. Valid delivery states
that m is delivered if and only if tA is committed and
valid. The key idea underpinning LayerZero is that if two
independent entities corroborate the validity of a transac-
tion (in this case, tA) then chain B can be sure that tA is
valid. Figure 2 illustrates this at a high level. Given two
entities that do not collude, if (1) one entity can produce
a block header for the block containing tA on chain A, (2)
the other entity can independently produce the proof for
tA on that block (transaction proof), and (3) the header
and transaction proof in fact agree, then the communi-

Figure 2: LayerZero ensures the validity of cross-chain
communication by requiring that two independent enti-
ties, the Oracle and Relayer, corroborate the transaction.

cation protocol can deliver m to the client on chain B
with the guarantee that tA is stably committed on chain
A. The LayerZero communication protocol, described in
Section 4, guarantees that the transaction on the recipient
chain will be paired with a valid, committed transaction
on the sender chain without involving any intermediary
chains. We achieve this by combining two independent
entities: an Oracle [7] that provides the block header,
and a Relayer that provides the proof associated with the
aforementioned transaction.

The interface to LayerZero is a lightweight on-chain
client, which we call the LayerZero Endpoint. One
LayerZero Endpoint exists on each (supported) chain,
and any chain with a LayerZero Endpoint can conduct
cross-chain transactions involving any other chain with
a LayerZero Endpoint. In essence, this creates a fully-
connected network where every node has a direct con-
nection to every other node. With minor boilerplate code,
any blockchain is supported. Section 5 demonstrates this
process through a case study in implementing LayerZero
on the Ethereum blockchain.

The ability to perform cross-chain transactions di-
rectly with any other chain on the network opens the
opportunity for a class of large-scale applications that
were previously infeasible, such as cross-chain decen-
tralized exchanges, multi-chain yield aggregators, and
cross-chain lending. Section 6 examines several such ap-
plications in detail. Through LayerZero, users can freely
move liquidity between chains, allowing for a single pool
of liquidity to take part in multiple decentralized ﬁnance
(DeFi) applications across different chains and ecosys-
tems without having to go through third party systems or
intermediate tokens.

2 Background

To lay the groundwork for LayerZero, we review relevant
existing systems to illustrate why they fall short of meet-
ing the demands of emerging applications. The discus-

2

LayerZeroEndpointsmart contractChain BUserApplicationLayerZeroEndpointsmart contractChain AUserApplicationINDEPENDENTOff-ChainOracleRelayersion culminates in an in-depth explanation of the advan-
tages in building a cross-chain exchange atop LayerZero.

be used to facilitate transfers back to the Ethereum chain
without the complexities of the Polygon protocol.

2.1 Related work

This section builds an understanding of the important
players in the cross-chain interaction space, why they fall
short of the ideals of trustless valid delivery, and how
LayerZero closes that gap.

Ethereum [8] is the most popular platform for de-
centralized ﬁnance applications built via smart con-
tracts. Ethereum extends its underlying blockchain with
a Turing-complete programming language that enables a
library of decentralized applications to leverage the pow-
erful security properties of the underlying chain through
a developer-friendly abstraction. However,
the low
transaction rate of the underlying blockchain, approx-
imately 15–45 transactions per second [9], has proven
to be a serious scalability bottleneck that limits the
popularity of the applications built to run directly on
the Ethereum blockchain. Because of its programming
model and popularity, many inter-chain communication
techniques revolve around interfacing third-party chains
with Ethereum. LayerZero provides the ability to di-
rectly transfer state to and from Ethereum without a mid-
dleman, allowing users and applications to leverage the
stability and trustworthiness of the Ethereum chain with-
out the cost and bottlenecks of the solutions described
below.

Ethereum 2.0 [22] is a set of proposed upgrades to
address the scalability, security, and sustainability short-
comings in Ethereum. Ethereum 2.0 introduces shard
chains that distribute load instead of concentrating all
transactions on the overloaded Ethereum main chain.
Transitioning from proof-of-work to proof-of-stake both
eliminates the possibility of a 51% attack and reduces the
energy per transaction. These advancements are largely
orthogonal to LayerZero except that they are sure to
boost the popularity of Ethereum, creating even more de-
mand for convenient and cheap inter-chain communica-
tion.

Polygon [17], formerly Matic Network, is a Layer 2
network that addresses the throughput and sovereignty
challenges of Ethereum. Despite being the most pop-
ular platform for blockchain development, Ethereum is
plagued by low throughput [10], making it unsuitable
for certain applications. Polygon provides application-
speciﬁc, Ethereum-compatible sidechains that combine
the scalability and independence of separate chains with
the community and security of Ethereum. Specialized or
throughput-intensive applications run on the sidechains
and periodically consolidate back to the main Ethereum
chain. In contrast, LayerZero is a lower-level platform
that enables direct inter-chain communication and can

3

Polkadot [26] is an early example of the potential
of an open cross-chain ecosystem.
In Polkadot, many
domain-speciﬁc, parallel chains (“parachains”) connect
via a common relay chain that enables tokens and data
to ﬂow between them. However, inter-chain communi-
cation always crosses this relay chain, thus incurring ad-
ditional costs. LayerZero provides the same low-level
communication platform of Polkadot, without involving
the extra transactions necessitated by the on-chain mid-
dleman.

THORChain [23] is a DEX that uses pairwise liquid-
ity pools to transfer tokens between third-party chains.
Each liquidity pool binds a speciﬁc third-party currency
to a THORChain native token called RUNE, which acts
as a common interchange medium. Without this common
medium, all pairs of currencies would need a liquidity
pool, meaning that the number of pools would scale as
the square of the number of currencies. Unfortunately,
while RUNE solves this scalability problem, it is a cum-
bersome overhead in the transaction process that makes
a simple operation quite complicated. This is evident
in the complexities of the THORChain transaction al-
gorithm. LayerZero provides direct inter-chain commu-
nication without THORChain’s inherent scalability bot-
tleneck, cumbersome intermediate currency, or heavy-
weight protocol.

AnySwap [2] is a DEX geared towards easy pairwise
token exchanges, similar to THORChain. AnySwap re-
lies on an intermediate token, ANY, based on Fusion
distributed control rights management [6]. Like with
THORChain, the use of the ANY intermediate token
introduces undesirable overhead, delay, and additional
transfer fees.

Cosmos [5] is a blockchain network technology that
allows arbitrary messages to be sent between supported
chains. Cosmos includes an Inter-Blockchain Communi-
cation (IBC [14]) protocol build on Tendermint BFT [21]
to facilitate messaging between chains built on Cos-
mos Hub. Cosmos differs from LayerZero in two key
ways: (1) IBC runs a full on-chain light node, and (2)
IBC only provides direct communication between fast-
ﬁnality [24] chains. These limitations of IBC, combined
with its use of an intermediate chain to facilitate con-
sensus, make it similar to Anyswap, THORChain, or
Polkadot, rather than a general communication layer like
LayerZero. Cosmos also provides a DEX with similar
properties to Anyswap or THORChain, called the Grav-
ity Bridge [12].
In contrast to Cosmos and IBC, Lay-
erZero provides trustless omnichain messaging, and can
be extended to run on any chain, including those which
provide probabilistic-ﬁnality, such as Ethereum and Bit-
coin.

Figure 3: LayerZero is a building block for cross-chain applications. This ﬁgure visualizes the architectural differences
between a centralized exchange, a decentralized exchange, and a cross-chain bridge built using LayerZero as its
underlying communication primitive.

Chainlink [7, 4] is a framework for building and con-
necting to decentralized oracle networks (DONs). While
smart contracts are tamperproof, their on-chain nature
prevents the basic connectivity crucial to their wider
adoption: a smart contract cannot fetch off-chain data
that is necessary to the execution of the contract, such as
stock prices, IoT device measurements, and outputs from
secure off-chain computations. A DON extends a smart
contract’s tamperproof property to the data sources and
external resources that the contract depends on, without
placing trust in any central entity.
In a DON, a user’s
smart contract makes an on-chain request to a Chainlink
interface smart contract, which posts an event to many
separate oracle nodes. Each oracle node queries multiple
data sources for the requested information, aggregates it
to ﬁlter erroneous or malicious sources, and optionally
performs trust-minimized computations on the data. The
oracle nodes respond to the Chainlink interface contract,
which performs a second level of aggregation to ﬁlter er-
roneous or malicious oracles. This dual-layer ﬁltering
guarantees trust in the ﬁnal data without requiring trust in
any individual oracle or data source. As a result, Chain-
link provides a robust information-retrieval network as
well as a secure off-chain computation solution that has
become widely used across the industry. By leveraging
the Chainlink DON framework, the LayerZero protocol
gains the ability to ensure trustless delivery of messages
between disparate chains.

2.2 LayerZero in practice

Developers can use LayerZero to build complex cross-
chain applications without sacriﬁcing trustlessness or in-
troducing complex intermediate chains/smart contracts.
Figure 3 illustrates the functionality of LayerZero in the
context of building an exchange.

A centralized exchange, shown on the left, requires
users to deposit their tokens with a central trusted author-

ity, which then keeps track of that deposit off-chain and
grants coins on other chains as the user requests them.
Placing trust in this authority defeats the purpose of us-
ing blockchain to begin with, which has resulted in the
emergence of distributed exchanges.

The center diagram shows, on a high level, how a
typical decentralized exchange works—by using a smart
contract–governed consensus protocol to facilitate the
automatic minting of coins on chain B, DEXs are able
to overcome the necessity for a centralized, trusted off-
chain middleman. However, one key limitation is that
DEXs involve an intermediate token and intermediate
chain, and only mints an intermediary or wrapped to-
ken on chain B as opposed to the actual token the user
wants. The user must then exchange the intermediary
token (e.g. RUNE) or wrapped token (e.g. ANY) for
the desired token in an additional transaction. This inter-
mediary/wrapped token, second transaction, as well as
the intermediate chain are all unnecessary overheads to
what should ideally be a single seamless transaction. The
right side of Figure 3 shows what an exchange built on
LayerZero would look like, with chain A able to initi-
ate a single cross-chain transaction that facilitates the lo-
cal transaction on chain A and notiﬁes the application on
chain B that they can safely grant a token to the user. In
this application, LayerZero enables a clean and minimal
single-transaction swap that does not include any inter-
mediate tokens. The actual exchange protocol is handled
by smart contracts on either side of the cross-chain trans-
action, with LayerZero delivering messages between the
two. This provides a great deal of ﬂexibility, and fol-
lows the end-to-end principle [18] with the majority of
the high level exchange logic handled by smart contracts
on the source and the destination chains.

4

CentralizedExchangeDecentralizedExchange (DEX)Exchange builton LayerZeroconsensus protocolLayerZero fabricChain ABTCChain BETHChain AChain B$Off-chainChain AChain BIntermediate chain3 Valid Delivery

In this section, we describe the fundamental properties of
trustless inter-chain communication. To formally char-
acterize the problem of validating a transaction on a dif-
ferent chain, we deﬁne the idea of valid delivery. Valid
delivery is a communication primitive that enables cross-
chain token transfer by providing the following guaran-
tees:

1. Every message m sent over the network is coupled

with a transaction t on the sender-side chain.

2. A message m is delivered to the receiver if and only
if the associated transaction t is valid and has been
committed on the sender-side chain.

Centralized exchanges guarantee valid delivery, in that
the agreement between the client and the exchange is that
the client will transfer their token from one chain to the
exchange, and the exchange will, upon receipt of that to-
ken, issue some balance (non-cryptocurrency). This non-
cryptocurrency balance can then be withdrawn from any
available chain, a convenience which is made possible
by broad pools of liquidity maintained by the exchange
on each of the supported chains. The exchange acts as
the middleman in this transaction and the user must trust
them to uphold their end of the bargain. However, a ma-
licious or compromised exchange could take tokens from
the client, issue balance, and then refuse to allow with-
drawal of that balance from another chain, effectively
stealing tokens from the user. Even if the user is willing
to trust the exchange, recent years have seen many suc-
cessful attempts to hack or compromise cryptocurrency
exchanges [15], so users are better served with a solution
that does not require any trusted middleman. At a higher
level, one of the core tenants of cryptocurrencies is their
independence from centralized entities like banks, so re-
lying on a centralized exchange defeats their purpose.

An alternative to using an centralized exchange is
a decentralized exchange such as THORChain [23] or
AnySwap [2]. All existing DEX use an intermediary to-
ken, such as RUNE in the case of THORChain or ANY
in the case of AnySwap, as the transaction t. Because
these intermediary tokens are governed by the respec-
tive protocols of each DEX, the DEX is able to guar-
antee valid delivery, as it is impossible for a malicious
user to fake the intermediary token. Existing DEX solu-
tions are not ideal because they involve two intermediate
transactions—one to convert the sender’s token to an in-
termediary token and one to convert the intermediary to-
ken to the desired “real” token on the recipient chain. In
addition to this, it is necessary for the user to fully trust
the intermediate consensus layer that conﬁrms the trans-
action on the source chain and conveys intent to mint the

token to the destination chain. While existing exchanges
do enable cross-chain token transfer, they do so at the
cost of unnecessary complexity and cost. The downsides
of this are evident in that cross-chain applications have
not seen broad adoption. The ideal solution to the inter-
chain transaction problem is one that uses a single one-
swap transaction between chains without involving any
trusted middle entity—in other words trustless valid de-
livery. In our work, we implement a generic messaging
protocol that provides trustless valid delivery of arbitrary
user data, not just tokens. Distributed exchanges or other
DeFi applications would be implemented using our mes-
saging primitive to provide cross-chain transactions, and
the degree of ﬂexibility provided by a low-level messag-
ing protocol enables higher-level applications to imple-
ment a wide range of previously-impossible functional-
ity.

4 Design

The core of LayerZero is a communication protocol that
provides trustless valid delivery. Our protocol is built on
a series of components introduced in Section 4.1. We
discuss the communication ﬂow of the transfer protocol
in Section 4.2, describe how LayerZero is able to achieve
valid delivery without involving trusted intermediary ser-
vices in Section 4.3, and present our novel design for
a low-cost smart contract–based light client endpoint in
Section 4.4.

4.1 LayerZero components

LayerZero Endpoints are the user-facing interface to
LayerZero. Each chain in the LayerZero network has
one LayerZero Endpoint implemented as a series of on-
chain smart contracts. An Endpoint’s purpose is to allow
the user to send a message using the LayerZero protocol
backend, guaranteeing for valid delivery.

A LayerZero Endpoint is split into four modules:
Communicator, Validator, Network, and Libraries. The
Communicator, Validator, and Network modules com-
prise the core functionality of the Endpoint (Figure 4),
while each new chain supported by LayerZero is added
as an additional Library. This design allows us to add
support for new chains without modifying the three core
modules. We explain the functions of each module in
Section 4.4.

The Oracle is an third party service that provides
a mechanism to, independently of the other LayerZero
components, read a block header from one chain and
send it to another chain. In theory, this Oracle can be
any third party service that provides this mechanism, but
in practice we expect to use Chainlink [7, 4], which is the
current industry leader for decentralized oracle networks.

5

Figure 4: The communication ﬂow in a single LayerZero cross-chain transaction.

The Relayer is an off-chain service that is similar in
function to an Oracle, but instead of fetching block head-
ers it fetches the proof for a speciﬁed transaction.

To ensure valid delivery, the only requirement is that
for any given message sent using the LayerZero proto-
col, the Oracle and Relayer must be independent of each
other. The protocol itself does not require any speciﬁc
implementation of a Relayer, and in theory the users of
LayerZero could even implement their own Relayer ser-
vice. This design allows users to be sure that the Relayer
cannot collude with the Oracle, and this independence
is what allows us to implement trustless validated deliv-
ery, as shown in Section 4.3. In practice, LayerZero pro-
vides the Relayer service while the Oracle is handled by
Chainlink’s decentralized oracle network and associated
consensus mechanisms.

4.2 LayerZero protocol

Figure 4 illustrates the steps involved in the valid delivery
of a single LayerZero message. Each encircled number
in the ﬁgure represents a step of the protocol and corre-
sponds to a paragraph in this section. This section walks
through the example of a user application on Chain A
sending a single message to a user application on Chain
B via LayerZero. In Section 5, we describe how the var-
ious components and protocol steps are implemented in
the case of sending messages between two Ethereum Vir-
tual Vachines.

Step 1: The user application on chain A (App A) exe-
cutes some series of actions as part of transaction T . We
uniquely identify transaction T by the transaction identi-
ﬁer t—the format of this identiﬁer may vary depending
on the type of chain A. A step included in transaction T is
the transmission of a message over LayerZero with valid
delivery conditioned on T . For illustration purposes, and
without loss of generality, we assume that in this sce-

nario App A is using our reference Relayer. App A sends
a request to the LayerZero Communicator containing the
following information:

• t: The unique transaction identiﬁer for T .

• dst: A global identiﬁer pointing to a smart contract

on chain B.

• payload: Any data that App A wishes to send to

App B.

• relayer args: Arguments describing payment in-
formation in the event that App A wishes to use the
reference Relayer.

Step 2: The Communicator constructs a LayerZero
packet containing dst and payload, referred to as
Packet(dst, payload), and sends it, along with t and
relayer args, to the Validator.

Step 3: The Validator sends t and dst to Network.
This step notiﬁes Network that the block header for the
current block on chain A needs to be sent to chain B.

Step 4: Validator forwards Packet(dst, payload),
t, and relayer args to the Relayer, notifying the
Relayer that the transaction proof for T needs to be
prefetched and eventually sent to chain B. This happens
concurrently with Step 3.

Step 5: Network sends dst and the block ID of the
current transaction (cur blk id) to the Oracle. This no-
tiﬁes the Oracle to fetch the block header for the cur-
rent block on chain A and send it to chain B.
In the
event that multiple LayerZero transactions occurred in
the same block, Step 5 is only executed once.

Step 6: Oracle reads the block header (blk hdr) from

chain A.

Step 7: The Relayer reads the transaction proof asso-
ciated with transaction T (proof(t)) from chain A, and

6

Packet(dst,payload),t, relayer_argsPacket(dst,payload),t, relayer_args dstblk_hdr_hashPacket(dst, payload),tt, dst, payload,relayer_args CommunicatorValidatorNetworkCommunicatorValidatorNetworkChain AUserApplicationLayerZeroEndpointLayerZeroEndpointChain BUserApplicationOracleRelayerdst, cur_blk_idblk_hdrblk_hdrproof(t)Packet(dst, payload),tblk_hdr_hash[(Packet(      dst, payload),  t, proof(t))]stores if off-chain. Steps 6 and 7 occur asynchronously
to each other.

Step 8: The Oracle conﬁrms that the block corre-
sponding to blk hdr is stably committed on chain A and
then sends blk hdr to Network on chain B. The mecha-
nism for determining when this happens varies per chain,
but will typically involve waiting for some number of
block conﬁrmations.

Step 9: Network sends the block hash, speciﬁed as

blk hdr hash, to the Validator.

Step 10: The Validator forwards blk hdr hash to the

Relayer.

Step 11: After receiving blk hdr hash,

the Re-
layer sends a list of any Packet(dst, payload), t,
proof(t) tuples that match the current block.
In the
event that multiple users simultaneously send messages
between the same endpoints, there may be multiple pack-
ets and associated transaction proofs within the same
block.

Step 12: The Validator uses the received transaction
proofs in conjunction with the block headers stored by
Network to validate whether the associated transaction T
is valid and committed. If the block header and transac-
tion proof do not match, then the message is discarded.
If they do match, then Packet(dst, payload) is sent
to the Communicator.

Step 13: The Communicator emits Packet(dst,

payload) to App B.

4.3 Achieving trustless valid delivery

Trustlessness: At the crux of LayerZero’s design is the
idea that the user need not trust the components of Lay-
erZero. Instead of requiring trust, which is a strong con-
dition, we only require the weaker condition of indepen-
dence between the Oracle and Relayer. This requirement
of independence instead of trust is one aspect of what al-
lows LayerZero to be efﬁcient and lightweight. As long
as there is no malicious collusion between the Oracle and
Relayer, then LayerZero guarantees valid delivery.

Valid delivery: By the LayerZero protocol shown in
Section 4.2, a message m is delivered by the Communi-
cator to the user application if and only if the transaction
proof for the transaction t associated with m can be vali-
dated in Step 12. This validation step will succeed if and
only if the block header and the transaction proof match,
which will only occur in the following two scenarios:

1. The block header provided by the Oracle and the
transaction proof provided by the Relayer are both
valid.

2. The block header provided by the Oracle and the
transaction proof provided by the Relayer are both
invalid, but still match.

Scenario 2 can only happen if the Oracle and the Re-
layer collude, as it is statistically impossible to send a
transaction proof that can be validated against a block
header without knowledge of that speciﬁc block header,
and vice versa. However, LayerZero’s design eliminates
the possibility of collusion, as outlined in Section 1.
Thus, if a message is delivered to the user application on
the receiver side, it is guaranteed to meet the properties
of valid delivery.

As outlined in Section 3, a communication proto-
col which can guarantee trustless valid delivery, namely
valid delivery without placing trust in intermediary enti-
ties or tokens, is the ideal solution to enable cross-chain
transactions. LayerZero is the ﬁrst and only system to
proved this property. This fact will drive user adoption of
LayerZero as the preferred method of cross-chain mes-
saging.

4.4 LayerZero Endpoint

A LayerZero Endpoint is currently implemented as a se-
ries of smart contracts on each chain included in the Lay-
erZero network. The core functionality of a LayerZero
Endpoint is encapsulated in three modules: the Commu-
nication, Validation, and Network. These modules act
in a manner similar to a network stack, with messages
sent down the stack on the sender side—Communicator
to Validator to Network—then up the stack on the recip-
ient side.

In addition to the core modules, LayerZero Endpoint
can be extended via Libraries, which are auxiliary smart
contracts that deﬁne how communication for a speciﬁc
chain should be handled. Each chain in the LayerZero
network has an associated Library, and each Endpoint
includes a copy of every Library. This modular design
allows the LayerZero network to be quickly and easily
extended to include new chains on demand. In addition,
communication between two chains only requires that
their respective libraries be present on both ends, mak-
ing LayerZero a fully-connected network with the ability
to orchestrate transactions between any pair of nodes.

4.5 LayerZero Endpoint cost scalability

As many readers will likely point out, running smart con-
tracts on Layer 1 chains can be cost prohibitive, espe-
cially as the amount of stored data increases. To make
the LayerZero Endpoint practical, it was necessary for us
to design the most lightweight client possible. Previous
work on trustless cross-chain validation through cross-
chain state machine replication (SMR), such as Golden
Gate [11], could cost millions of dollars per day to run
on popular Layer 1 chains like Ethereum.

7

0

15

31

Chain ID

Address (20 bytes)

User Arg (N bytes)

Routing
information

User
payload

(cid:41)






Figure 5: LayerZero packet layout for EVM endpoints.

To solve this problem, we set out to design the most
lightweight client possible. Our key observation is that
replicating and storing block headers within the client is
not necessary. Rather, we delegate the task of fetching
the necessary cross-chain headers and transaction proofs
to off-chain entities: the Oracle and Relayer. This results
in LayerZero Endpoints being incredibly lightweight,
making them cost-effective even on notoriously expen-
sive [20] chains like Ethereum.

5 Case Study: LayerZero on EVM

In this section, we brieﬂy describe the details of how
we implemented support for running LayerZero on
Ethereum Virtual Machines (EVMs) [13]. For the sake of
brevity, we focus on the aspects of the system whose im-
plementation is likely to vary by chain and highlight how
our implementation handles the speciﬁc requirements of
the Ethereum chain. As mentioned in Section 4.1, the
current version of LayerZero relies on Chainlink to pro-
vide the Oracle service, and expects users to use the Re-
layer service that we provide.

LayerZero packet: The format of the LayerZero
packet will vary depending on the source and destination
chains. We illustrate the precise layout of the LayerZero
packet for EVM endpoints [19] in Figure 5. Each ﬁeld
functions as follows:

Field
Chain ID A unique identiﬁer for each

Description

Address

User Arg
0 – N

chain on the LayerZero network.
The address of the recipient smart
contract on the destination chain.
The payload sent by the
user application—in EVM this
can contain up to N-byte argument.

Sender-side chain transaction stability: To ensure
that the message transaction is stable on the source chain,
we rely on the inherent properties of decentralized ora-
cle networks—the Oracle will only notify the destina-

tion chain of a particular block header after it hears some
number of block conﬁrmations, which in the case of
Ethereum is 15. Precisely speaking, Step 8 of the Lay-
erZero protocol (Section 4.2) will only execute after the
Oracle hears 15 block conﬁrmations on chain A.

LayerZero Endpoint: We implement the LayerZero
Endpoint as a series of smart contracts, composed of
the four main modules we describe in Section 4.4.
For most existing blockchains, including the Ethereum
blockchain, we are able to implement the Communica-
tor, Validator, and Network each as separate smart con-
tracts. However, this design does not preclude the imple-
mentation of LayerZero Endpoint on (future) chains with
different requirements.

The Library component of the LayerZero Endpoint is
the key to providing support for the Ethereum blockchain
in this case study. We implement a Library to handle
the construction of the EVM-speciﬁc LayerZero packet
shown in Figure 5 and handle the encoding and decoding
of EVM smart contract address information.

An additional responsibility of the Library is to handle
the actual computation involved in validating the trans-
action proof. Our EVM Library handles Merkle-Patricia
Tree validation [16] for transactions on an EVM block,
which we base on an open-source implementation by
Golden Gate [11].

6 Applications on LayerZero

Cross-chain decentralized exchange: As brieﬂy de-
scribed in Section 2.2, LayerZero enables a cross-chain
DEX (cross-chain bridge) that deals exclusively in na-
tive assets. Contrary to existing DEX designs that issue
wrapped tokens or go through intermediary sidechains,
a DEX built using LayerZero to send messages between
chains can be built such that liquidity pools exist on both
chains, and users can simply deposit their native assets in
one pool and withdraw native assets from another. Lay-
erZero’s messaging primitive is powerful enough to en-
able direct bridges (1:1 pricing), automated market mak-
ing (ab = k pricing), and any other derivation (such as
one similar to Curve DAO pricing [25]). The guarantee
of valid delivery that LayerZero provides enables a wide
range of decentralized exchange applications.

Multi-chain yield aggregator: Current yield ag-
gregators typically operate within the conﬁnes of sin-
gle chain ecosystems, with projects such as Yearn Fi-
nance [27] enabling yield aggregation using single chain
strategies. One key weakness of these single chain yield
aggregation systems it that they cannot take advantage of
any yield opportunities outside of their current ecosys-
tem, potentially missing out on many of the best yields.
A yield aggregator that uses LayerZero for cross-chain
transactions would allow for strategies that tap into the

8

best opportunities across all ecosystems, increasing ac-
cess to high yield opportunities and enabling users to
take advantage of market inefﬁciency. A multi-chain
yield aggregator would be strictly better than a single-
chain yield aggregator, as in the worst case the strategy
would degrade to taking advantages of opportunities on
only one chain, and in the best case it would have expo-
nentially more opportunities to choose from.

Multi-chain lending: Today, users have no easy way
to take advantage of opportunities on chains where they
do not hold assets. For example, suppose that a user with
assets consolidated in ETH wants to take advantage of
an opportunity on Polygon [17]. Their choices are to ei-
ther (1) move their entire asset base to another chain and
convert it to the desired currency, or (2) lend their assets
on Ethereum, borrow the desired asset, and then bridge
that asset to the destination chain. LayerZero enables a
lending protocol that would allow the user to keep their
entire asset base in-place on Ethereum, lend it out, then
borrow directly in MATIC on Polygon. This eliminates
intermediary costs such as bridge and swap fees.

These three examples represent but a tiny fraction
of the many possibilities that LayerZero enables. By
leveraging LayerZero, developers will be able to write
their applications without worrying about differing se-
mantics between inter- and intra-chain transactions, and
users will be able to freely move liquidity across chains.
We look forward to the creative new applications that
the community will develop given the power of trustless
cross-chain transactions.

7 Conclusion

This paper introduced the design and implementation of
LayerZero, the ﬁrst trustless omnichain interoperability
platform that does not involve any intermediate transac-
tions. We showed that by leveraging two independent,
untrusted off-chain entities, the Oracle and Relayer, Lay-
erZero is able to achieve valid delivery without requiring
costly cross-chain state machine replication or interme-
diary tokens. Our protocol is designed in a way that does
not preclude the use of arbitrary relayer services, which
ensures that there is no collusion between the Relayer
and Oracle. The LayerZero protocol enables native trans-
actions between supported chains, while the novel Lay-
erZero Endpoint design can be easily extended to support
In addition to this, our Endpoint design is
any chain.
lightweight enough to run on expensive Layer 1 chains
such as Ethereum without incurring prohibitive costs.
We presented a case study of how to implement support
for EVM-based chains in LayerZero, using a reference
Relayer implementation in conjunction with Chainlink’s
decentralized oracle network to enable cross-chain trans-
actions through LayerZero.

LayerZero is the backbone that will connect the vari-
ous disjoint blockchain ecosystems and allow frictionless
movement of liquidity, data, and ideas between chains
and communities.

References

[1] All

layer 1 blockchain protocols.

comparison.com/blockchain-protocols/.
2021-5-13.

https://blockchain-
Accessed:

[2] Anyswap

dex

user

guide.

faq.readthedocs.io/en/latest/index.html.
2021-5-13.

https://anyswap-
Accessed:

[3] Binance.com. https://www.binance.com/. Accessed: 2021-

5-14.

[4] BREIDENBACH, L., CACHIN, C., CHAN, B., COVENTRY, A.,
ELLIS, S., JUELS, A., KOUSHANFAR, F., MILLER, A., MA-
GAURAN, B., MOROZ, D., NAZAROV, S., TOPLICEANU, A.,
TRAM `ER, F., AND ZHANG, F. Chainlink 2.0: Next steps in the
evolution of decentralized oracle networks. White paper, Chain-
Link, 2021.

[5] What is cosmos? https://v1.cosmos.network/intro. Ac-

cessed: 2021-5-15.

[6] Dcrm - fusion.org.

https://www.fusion.org/tech/dcrm.

Accessed: 2021-5-13.

[7] ELLIS, S., JUELS, A., AND NAZAROV, S. Chainlink: A decen-

tralized oracle network. White paper, ChainLink, 2017.

[8] Ethereum. https://ethereum.org/en/. Accessed: 2021-5-

13.

[9] Ethereum 2.0 (eth2) vision.

https://ethereum.org/en/

eth2/vision/. Accessed: 2021-5-13.

[10] GALAL, H. S., ELSHEIKH, M., AND YOUSSEF, A. M. An
In Data Pri-
efﬁcient micropayment channel on ethereum.
vacy Management, Cryptocurrencies and Blockchain Technol-
ogy. Springer, 2019, pp. 211–218.

[11] Golden gate – trustless-bridging ethereum (evm) blockchains
– part 1: Basics. https://loredanacirstea.medium.com/
golden-gate-trustless-bridging-ethereum-evm-
blockchains-part-1-basics-d016300ea0dd. Accessed:
2021-5-14.

[12] Announcing the gravity bridge. https://blog.althea.net/

gravity-bridge/. Accessed: 2021-5-15.

[13] HILDENBRANDT, E., SAXENA, M., RODRIGUES, N., ZHU, X.,
DAIAN, P., GUTH, D., MOORE, B., PARK, D., ZHANG, Y.,
STEFANESCU, A., ET AL. Kevm: A complete formal semantics
of the ethereum virtual machine. In 2018 IEEE 31st Computer
Security Foundations Symposium (CSF) (2018), IEEE, pp. 204–
217.

[14] Ibc overview — cosmos sdk. https://docs.cosmos.network/

master/ibc/overview.html. Accessed: 2021-5-15.

[15] LAZARENKO, A., AND AVDOSHIN, S. Financial risks of the
blockchain industry: A survey of cyberattacks. In Proceedings of
the Future Technologies Conference (2018), Springer, pp. 368–
384.

[16] LU, Z., WANG, Q., QU, G., ZHANG, H., AND LIU, Z. A
blockchain-based privacy-preserving authentication scheme for
IEEE Transactions on Very Large Scale Integration
vanets.
(VLSI) Systems 27, 12 (2019), 2792–2801.

[17] Polygon: Ethereum’s internet of blockchains.

https://

polygon.technology/lightpaper-polygon.pdf.

9

[18] SALTZER, J. H., REED, D. P., AND CLARK, D. D. End-to-end
arguments in system design. ACM Transactions on Computer
Systems (TOCS) 2, 4 (1984), 277–288.

[19] Solidity types.

https://docs.soliditylang.org/en/

v0.5.3/types.html. Accessed: 2021-5-14.

[20] SPAIN, M., FOLEY, S., AND GRAMOLI, V. The Impact of
Ethereum Throughput and Fees on Transaction Latency During
In International Conference on Blockchain Economics,
ICOs.
Security and Protocols (Tokenomics 2019) (Dagstuhl, Germany,
2020), V. Danos, M. Herlihy, M. Potop-Butucaru, J. Prat, and
S. Tucci-Piergiovanni, Eds., vol. 71 of OpenAccess Series in In-
formatics (OASIcs), Schloss Dagstuhl–Leibniz-Zentrum fuer In-
formatik, pp. 9:1–9:15.

[21] Tendermint. https://tendermint.com/. Accessed: 2021-5-

15.

[22] The eth2 upgrades. https://ethereum.org/en/eth2/. Ac-

cessed: 2021-5-13.

[23] Thorchain. https://thorchain.org. Accessed: 2021-5-13.

[24] VIRIYASITAVAT, W., DA XU, L., BI, Z., AND SAPSOMBOON,
A. New blockchain-based architecture for service interoperations
in internet of things. IEEE Transactions on Computational Social
Systems 6, 4 (2019), 739–748.

[25] WARREN, W., AND BANDEALI, A.

0x: An open protocol
for decentralized exchange on the ethereum blockchain. URl:
https://github. com/0xProject/whitepaper (2017), 04–18.

[26] WOOD, G. Polkadot: Vision for a heterogeneous multi-chain

framework. White paper, Polkadot, 2016.

[27] yearn.ﬁnance. https://yearn.finance/. Accessed: 2021-5-

14.

10

