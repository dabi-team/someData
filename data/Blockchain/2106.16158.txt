JACK THE RIPPLER: Arbitrage on the Decentralized Exchange of the XRP Ledger

Gaspard Peduzzi
APWine
Lausanne, Switzerland
gaspard@apwine.Ô¨Å

Jason James
UCL
London, UK
jason.james.19@ucl.ac.uk

Jiahua Xu
UCL Centre for Blockchain Technologies
London, UK
jiahua.xu@ucl.ac.uk

1
2
0
2

v
o
N
9

]

R
C
.
s
c
[

2
v
8
5
1
6
1
.
6
0
1
2
:
v
i
X
r
a

Abstract‚ÄîThe XRP Ledger (XRPL) is a peer-to-peer crypto-
graphic ledger. It features a decentralized exchange (DEX) where
network participants can issue and trade user-deÔ¨Åned digital
assets and currencies. We present JACK THE RIPPLER, a bot that
identiÔ¨Åes and exploits arbitrage opportunities on the XRPL DEX.
We describe JACK‚Äôs arbitrage process and discuss risks associated
with using arbitrage bots.
Index Terms‚ÄîRipple, XRP, Arbitrage, Decentralized Exchange,
Blockchain, Distributed Ledger Technology

I. BACKGROUND

A. Cross-currency arbitrage

Arbitrage is the simultaneous purchase and sale of an asset to
proÔ¨Åt from an imbalance in price. It is a trade that proÔ¨Åts by
exploiting the price differences of identical or similar Ô¨Ånancial
instruments on different markets or in different forms. In the
conventional currency market, arbitrage is difÔ¨Åcult to execute
due to various market frictions such as excessive order book
spread, high transaction fees, capital controls, etc. On the XRP
Ledger (XRPL)‚Äôs decentralized exchange (DEX), users are
able to conduct cross-currency payments with little friction
thanks to its high speed and low transaction fees.
In this study, we illustrate the existing arbitrage behavior on
the DEX of XRPL, and present JACK THE RIPPLER, a bot that
takes arbitrage opportunities on XRPL.

B. Key XRPL components

1) Transaction types: Multiple types of transactions can be
conducted on XRPL:
OfferCreate: an order for a given currency pair.
OfferCancel: cancellation of an existing order.
Payment: a peer-to-peer payment or a fulÔ¨Ållment of an
existing order.
TrustSet: setting a trustline between two accounts.
2) Flags: XRPL transactions apply different Ô¨Çags that dictate
a transaction‚Äôs behavior:
tfPartialPayment: a ‚Äúbest Ô¨Çow effort" Ô¨Çag that allows
partial payment and prevents the transaction being cancelled in
case of insufÔ¨Åcient liquidity on the path or insufÔ¨Åcient balance
in the recipient trustline.
tfNoDirectRipple: specifying the exact path (ordered
list of offers) to be used when consuming the transaction.
This is intended to force the transaction to take the arbitrage
opportunity.

978-1-6654-3924-4/21/$31.00 ¬©2021 IEEE

Figure 1: Stylized arbitrage on XRPL

3) Trustlines: The success of a Payment transaction neces-
sitates the existence of a trustline established by the asset
receiver towards the asset issuer. A trustline can either be
a direct linkage between the receiver and the issuer, or, can
be an indirect path if the Ô¨Çag tfNoDirectRipple is not
activated. Absent a trustline, a payment transaction fails with
tecPATH_DRY error. XRP is the only asset on XRPL that
does not require a trustline for successful transactions.
4) Assets: With the exception of the native currency XRP, a
digital asset on XRPL exists in the form of an IOU (‚ÄúI owe
you‚Äù) [3], and is primarily characterized by (i) a currency code
(i.e. ticker), e.g. BTC, USD, CNY; and (ii) the introduction of
further criteria or constraints.
Anyone can act as a gateway on the XRP ledger and issue their
own IOU tokens. An XRPL account must create a trustline
to a gateway through a TrustSet transaction to indicate
willingness to hold a speciÔ¨Åc currency issued by the gateway.
Ripple provides a list of featured issuers, based on their
business practices, volume, and other measures. Yet there is no
formal process for ascertaining whether or not a gateway can
be trusted, and whether their issued IOU tokens are ultimately
redeemable.

II. ARBITRAGE ON XRPL
XRPL does not allow a cross-currency Payment cycle from
XRP to XRP. Therefore, two transactions must be performed
to complete an XRP to XRP arbitrage cycle. Fig. 1 illustrates
a stylized XRP to XRP arbitrage scheme on XRPL, where
accounts A and B are controlled by the same entity. SpeciÔ¨Å-
cally, A Ô¨Årst performs an OfferCreate transaction with the
intention to buy XRP with self-issued currency CUR that only
B has the necessary trustline to accept. A then sends a cross-
currency Payment to B where A pays XRP and B receives
CUR, triggering the fulÔ¨Ållment of A‚Äôs outstanding order. Fig. 1
shows that the aggregate gain of A and B equals x(cid:48) ‚àí x ‚àí e.
Naturally, the process is only proÔ¨Åtable if this number is

x‚Äô XRPùíúxXRPk x‚Äô CURk x‚Äô CURaCUR1aCUR1= bCUR2xXRP= aCUR1bCUR2bCUR2= x‚Äô XRP‚Ñ¨eXRPx‚Äô XRPx‚Äô XRP = kx‚Äô CURXRPL accountExchange flowPayment flowfeeOthers‚Äô orderùíú‚Äôs order 
 
 
 
 
 
Figure 2: JACK‚Äôs arbitrage process.

positive. Historically, this scheme is found to be heavily used
by rhAenHTxnAAxpMsrWorCcgfdzjyg6zsXRP and rsdMbYxHmYswHCg1V6vBsnxmHuCjpn6SC4.

A. Arbitrage process with JACK THE RIPPLER

Fig. 2 illustrates the arbitrage process employed by JACK. Note
that one round of arbitrage needs to be completed within one
ledger interval, around 3.5 seconds.
1) Building the order book: We use the XRPL websocket
APIs to listen to new blocks. At the launch of JACK, the initial
state of the order book is pulled with the book_offers
request, which returns the current order book state of an
issuer, and after the initial state is constructed, it is updated
continually with every new block broadcast to the network.
2) Building the graph: We use a modiÔ¨Åed Bellman-Ford
algorithm [1] to build the graph. We Ô¨Årst sort orders upon their
retrieval. We construct two lists of orders for each trading pair
(in both directions). We then construct a graph with the ‚Äúbest
offer‚Äù (highest bid, or lowest ask) for each pair as the only
edge between the two currencies. While new orders are added
to the order book at each new block, we keep track of whether
or not we modiÔ¨Åed the position of a previous ‚Äúbest offer" in
our sorted lists. If not, the graph remains the same with no
need to re-run the cycle detection algorithm. If at least one
edge has been modiÔ¨Åed due to the new block, we replace all
the modiÔ¨Åed edges in the smaller graph and run cycle detection
again. Thus, the algorithm (Algorithm 1) progressively relaxes
all edges on the graph, updating the shortest distance to each
edge.
Running this algorithm |v| ‚àí 1 times, we are able to obtain the
shortest distance to each edge. Running one extra iteration on
this graph, we can determine if there are negative cycles [2] in
the graph, depending on whether or not the minimum distances
were updated after this iteration. A negative cycle represents
a path with a negative cost, i.e. a positive gain.
3) Taking an opportunity: Upon detection of a valid negative
cycle, our bot JACK is able to build transaction paths according
to the cycle. We then select the corresponding trustline to
issue our payment and sign the transaction before publishing
it through our validator.

B. Caveats

Risks associated with the usage of arbitrage bots still exist.
1) Incomplete cycle: We may identify opportunities of arbi-
trage that become invalid in the next ledger, due to pending
transactions being fulÔ¨Ålled by other actors prior to our bot.

Algorithm 1: Bellman-Ford cycle detection
Result: distance[], predecessor[]
Input: list vertices, list edges, vertex source

1 // Initialization
2 foreach vertex v ‚àà vertices do
3

distance[v] := inf
predecessor[v] := null

4

5 distance[source] := 0
6 // Relax the edges repeatedly
7 for i from 1 to size(vertices)-1 do
8

foreach w-weighted edge (u, v) ‚àà edges do

9

10

11

if distance[u] + w < distance[v] then
distance[v] := distance[u] + w
predecessor[v] := u

12 // Look for negative cycles
13 foreach w-weighted edge (u, v) ‚àà edges do
14

if distance[u] + w < distance[v] then

15

output "The graph contains a negative cycle"

16 return distance[], predecessor[]

Such unsuccessful attempts still incur transaction fees, result-
ing in a pure loss.
2) Trusted actors: XRP is the only native asset in the ledger.
Other currencies are issued in the form of IOU debt by issuing
gateways who are responsible for honoring the debt [4]. The
solvency of those gateways cannot be guaranteed and there
always exists a certain degree of irredeemability of IOU
tokens. We have chosen for our experiment to open trustlines
only with issuers featured on the list provided by Ripple to
mitigate the counterparty risk.

III. CONCLUSION

We present the existing arbitrage behavior on XRPL DEX and
introduce JACK THE RIPPLER, a bot that can automatically de-
tect and take arbitrage opportunities. We discuss the limitations
of our algorithm and argue that there still exist risks associated
with using arbitrage bots.

ACKNOWLEDGMENT
This paper is based on SpringBlock Labs‚Äô entry in the
2019 Block-Sprint Hackathon. We thank teammates Hugo
Roussel, Henry Declety and Matthieu Baud for their contribu-
tion to the early development of the software.1

REFERENCES

[1] R. Bellman, ‚ÄúOn a routing problem,‚Äù Quarterly of Applied Mathematics,

vol. 16, no. 1, pp. 87‚Äì90, 1958.

[2] B. V. Cherkassky and A. V. Goldberg, ‚ÄúNegative-cycle detection
algorithms,‚Äù Mathematical Programming, vol. 85, no. 2, pp. 277‚Äì
311, 6 1999.
[Online]. Available: http://link.springer.com/10.1007/
s101070050058

[3] D. Perez, J. Xu, and B. Livshits, ‚ÄúRevisiting Transactional Statistics
of High-scalability Blockchains,‚Äù in The ACM Internet Measurement
Conference, 10 2020, pp. 535‚Äì550. [Online]. Available: https://dl.acm.
org/doi/10.1145/3419394.3423628
XRP

[4] XRPL,

‚ÄúBecome

Gateway

Ledger

an

-

XRP
https://xrpl.org/

Ledger Dev Portal,‚Äù
become-an-xrp-ledger-gateway.html

2020.

[Online]. Available:

1https://github.com/GaspardPeduzzi/spring_block

Listen for newblocksExtract new transactionsUpdate locally maintained orderbookUpdate sorted best order graphSplit transactions for different cyclesRun Bellmand-Ford algorithm to detect negative cyclesExtract orders that results in a negative cycleCompute maximum profitability for each cycleSign transactionsBroadcast transactionsBuild payment transactionConnect to our validatorTrigger cycles detectionChoose trustlines for paymentDetermine orders to be takenChoose starting asset for the cycleBuilding order bookBuilding graphTaking opportunityProcessDecisionStart / End