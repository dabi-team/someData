CIRCLECHAIN: TOKENIZING PRODUCTS WITH A ROLE-BASED
SCHEME FOR A CIRCULAR ECONOMY

2
2
0
2

y
a
M
3
2

]

C
D
.
s
c
[

1
v
2
1
2
1
1
.
5
0
2
2
:
v
i
X
r
a

Mojtaba Eshghie
KTH Royal Institute of Technology
Stockholm, Sweden
eshghie@kth.se

Li Quan
University of Copenhagen
Copenhagen, Denmark
lq@di.ku.dk

Gustav Andersson Kasche
KTH Royal Institute of Technology
Stockholm, Sweden
gustavak@kth.se

Filip Jacobson
KTH Royal Institute of Technology
Stockholm, Sweden
filipjac@kth.se

Cosimo Bassi
Algorand Inc.
Trani, Italy
cosimo.bassi@algorand.com

Cyrille Artho
KTH Royal Institute of Technology
Stockholm, Sweden
artho@kth.se

May 24, 2022

ABSTRACT

In a circular economy, tracking the ﬂow of second-life components for quality control is critical.
Tokenization can enhance the transparency of the ﬂow of second-life components. However, simple
tokenization does not correspond to real economic models and lacks the ability to ﬁnely manage
complex business processes. In particular, existing systems have to take into account the different
roles of the parties in the supply chain. Based on the Algorand blockchain, we propose a role-based
token management scheme, which can achieve authentication, synthesis, circulation, and reuse of
these second-life components in a trustless environment. The proposed scheme not only achieves
ﬁne-grained and scalable second-life component management, but also enables on-chain trading,
subsidies, and green-bond issuance. Furthermore, we implemented and performed scalability tests for
the proposed architecture on Algorand blockchain using its smart contracts and Algorand Standard
Assets (ASA). The open-source implementation, tests, along with results are available on our Github1
page.

Keywords Smart Contracts · Blockchain · Second-life material management · Circular Economy

1

Introduction

1.1 A Case for E-Waste

The total number of electronic devices globally, such as mobile devices, is currently more than the number of humans
on earth and is increasing [1]. Accordingly, the waste generated by discarding these devices is also staggering. Based on
Global E-waste Monitor (GEM) 2020 report, global e-waste generation is 53.6 Mt or 7.3 kg per capita [2] with an annual
growth rate of 2 Mt. Only 17.4% (9.3 Mt) is formally documented as collected and recycled. This shows recycling
activities are neither currently sufﬁcient nor keeping pace with the global e-waste generation increase. Because of the
high volume in their generation and the possibility of collecting, reusing, and refurbishing them, providing a system that
uses a circular economy (section 1.2) for e-waste would be a signiﬁcant contribution to a sustainable future. We will use
the supply chains of electronic chips as an example from the e-waste category to demonstrate how our system works.

1https://github.com/Kasche153/CircleChain

 
 
 
 
 
 
1.2 Circular Economy

Reusing and recycling products and product parts has environmental and socio-economic beneﬁts. The closed-loop
of reuse and recycling that aims to minimize resource consumption is called circular economy (CE) [3], which
contrasts with the linear supply chain model of taking, making, and disposing of. Incorporating CE beneﬁts sustainable
development while reducing undesirable consequences of overuse of resources [4, 5]. This is also part of the United
Nations’ 2030 Agenda regarding sustainable development [6].
Although the linear model is deeply standardized in organizations, the need for more sustainable supply chains demands
abandoning it for CE [7]. Currently, only 8.6% of the worldwide economy is circular [8]. According to the circularity
gap report, [9] this number is steady in the 4 recent years. This shows the need for platforms and solutions that
facilitate CE. Based on previous research on second-life components management (part of CE) reviewed in Section 1.4,
blockchain is one of these CE enablers.

The Covid-19 pandemic caused material and resource shortages in supply chains [10]. Santosh et al. [11] argue
that using a blockchain to manage second-life components in a circular economy increases supply chain agility and
localization. Localization is known as designing, producing, or delivering through in-house technology and features.
Agility is an organization’s ability to actively detect and respond to supply chain risks.
We argue that a blockchain-based system for CE needs to be backed by a corresponding blockchain architecture where
the cost and complexity are proportional in relation to the products or components. In other words, any blockchain-based
solution used to facilitate a circular economy has to be justiﬁable based on carbon footprint, cost-per-transaction, and
complexity of its operation.

1.3 Tokenization

Tokenization is the process of digitizing any type of asset on a blockchain. By assigning a token to a product or
component, its life cycle can be traced entirely and transparently. This tracking is trustless in that all the data storage
and computation take place on a shared blockchain without requiring a centralized authority.

Tokens can be fungible (for stateless components that can be replaced with an equivalent) or non-fungible (for
components or products where provenance or traceability matters, such as memory chips, artwork, or jewelry). In both
cases, tokens are associated with metadata containing additional information about them (such as the chip type) and
stored off-chain but authenticated by a hash value stored on the blockchain.

Tokenization increases traceability, thus, making the ownership and pollution management of the components more
accessible. It also makes it possible to keep a history of the components, which helps obtain information about products’
composition, ownership, and status. Essentially, we can issue material passports based on this technology. Speciﬁcally,
tokenization allows to trace where they are going for second-life components and if the product that is working as part
of a system is indeed produced in company X and has performed only Y months. Therefore, after scrapping the original
product, its constituents will not lose their intrinsic value and might be used directly in other products [12]. In addition,
since the reuse of components previously used in other consumer products (second-life components) is an integral part
of CE, we provide a reference architecture and its implementation on the Algorand blockchain to be used as a blueprint
to implement CE.

1.4 Related Work

Research on real-world solutions for handling second-life components has remained limited to theoretical backgrounds
of supply chains, and there is no functional reference architecture. Most of research is limited to realizing the potential
of blockchain and smart contracts to track and trace the assets [13, 14, 15]. Bekrar et al. [16] evaluate the opportunities,
trends, and potential uses of the Nexus blockchain [17] in the context of CE by considering the transportation aspect of
CE without proposing neither a solution nor a design based on smart contracts.

Morrow and Zarrebini [18] explore use cases of tokenization for assets based on their societal implications. This study
emphasizes the pivotal role that blockchain can play in the sustainability of tires.

Research on waste management via blockchain digitization and governance gives a perspective on a blockchain-based
solution for handling second-life components. França et al. [19] propose incorporating a blockchain-based green coins
system into an already existing mobile application used to collect and sell waste and receive points that are convertible
to new products in local stores. Although these works constitute a practical approach to part of the supply chain
management problem we face while studying CE, their research does not include the architecture or design of a system
providing guidelines for implementation.
The design proposed by Hatzivasilis et al. [20] includes an architecture with three roles asset operators, asset auditors,
and regulators. The counterpart roles are deﬁned in our system3. However, the asset auditor and regulator are both

2

deﬁned as authenticators in our system and operators are the same as users in our system. Furthermore, this work
proposes to build the system on top of the Ethereum blockchain. But, it does not provide an implementation.

Hatzivasilis et al. [21] performed a holistic end-to-end study on the role of traceability systems in the supply chains of
the food sector. They found that the adaptation of traceability systems has a positive effect on the transition to a more
CE.

Shojaei et al. [22] provide proof-of-concept of a system to enable CE in the construction sector. They suggest using a
permissioned blockchain system rather than public blockchains.

The most relevant work to the current effort was the blockchain-based supply chain traceability of COVID-19 [23].
They implemented a supply chain tracing system using smart contracts on the Ethereum blockchain. Although their
design is product speciﬁc, it could be used to solve traceability challenges in other domains. This study concludes
that using smart contracts can reduce information asymmetry and other inefﬁciencies in supply chain tracing. The
cost and security evaluation of the system showed that it was feasible as a real-world application. This study also
highlights some limitations to their system one of them being the throughput of the Ethereum network which is around
tens of transactions per second and limits the scalability of the system [23]. Another limitation is the time delay of the
Ethereum blockchain. The conﬁrmation time varies from block to block because of the PoW consensus algorithm.

1.5 CircleChain

As suggested in the section 1.4, the possibility of using blockchain-based architecture for a CE is well-studied. However,
there are very few practical designed systems along with a working implementation that is suitable for real-world
use-cases. Furthermore, the studies that try to provide an architecture either use obsolete technology or use systems
that defeat the purpose of sustainability. Therefore, ﬁrst, we gathered a list of requirements to choose the underlying
blockchain system that is presented in section 2. Next, we designed a reference role-based architecture that complies
with the gathered requirements, and we implemented it on a sustainable blockchain system. Finally, we tested it in a
synthetic scenario to demonstrate the scalability of our solution for a real-world large-scale circular economy.

2 Tokenized Circular Economy Using Blockchain

We identify the following characteristics required for a blockchain platform in the context of tokenization of products
for CE:

1. AFFORDABILITY: This characteristic is with regards to development, deployment, management, and last but

not least transaction cost.

2. SUSTAINABILITY: The energy consumption and accordingly carbon footprint of the platform should be

justiﬁable with the sustainability goals in mind.

3. SCALABILITY: The chosen platform should have the capability of handling a large number of transactions in

an increasingly short amount of time.

4. SECURITY: Since successful attacks on widely known blockchain platforms are not an unknown condition

[24], the security of a platform that handles millions of products should be assured.

2.1 Algorand

Algorand is a proof-of-stake fast-consensus blockchain platform [25]. Since it does not work with the concept of miners,
the consensus requires a negligible amount of computation [26]. While there are multiple other blockchain platform
choices for smart contracts, the above-mentioned requirements for a CE are particularly met with Algorand.

First, each transaction in other blockchain platforms such as Ethereum [27] costs at least a few dollars. This transaction
cost escalates depending on the logic of the smart contract. Since our design should be useful for different products
ranging from a few dollars (such as electronic chips) to millions of dollars, we should base our design on a universally
feasible platform. Furthermore, this transaction cost (Gas in Ethereum blockchain) is not deterministic and it is only
possible to estimate it. Second, the carbon footprint related to each transaction in proof-of-work blockchain platforms
such as Ethereum makes such blockchains a poor platform for CE [28]. Third, the delay of a transaction in Ethereum is
not only considerable but also non-deterministic and can take from seconds to minutes. Fourth, Algorand supports
ASAs (see Section 2.2) as a Layer-1 primitive, ensuring the same security, scalability, speed, and costs of the native
token (Algo) without referring to a user-deﬁned token standard (such as ERC-20 or ERC-721 on Ethereum [29, 30])
that introduce complexity or even ﬂaws [31].

3

Figure 1: Two-layer architecture for role-based access to tokens

2.2 Algorand Standard Assets (ASAs)

Algorand Standard Assets (ASAs) are Algorand Layer-1 solutions that represent stable coins, digital art, securities, etc.
[32]. Based on the aforementioned features of ASAs, it is possible to create both fungible and non-fungible tokens in
only one transaction [33]. In fact, it is possible to create an ASA using only one goal command as in listing 1.

1 goal asset create -- creator addr -- total 1000 -- unitname uname -- asseturl " https

:// path /" -- decimals 0

-d data

Listing 1: Goal command to create an ASA with a total supply of 1000, unit name of uname and address addr

We used ASAs to implement Non-Fungible Tokens (NFT) for chips that are used as chip passports. Sending and
receiving ASA tokens requires a speciﬁc process at which the receiver has to ﬁrst opt-in to the ASA. Then, the sender
will be able to transfer the asset to the receiver. An opt-in transaction is an asset transfer with an amount of 0 that can be
triggered using the goal command in listing 2. Notice that both sender and receiver of this transaction are the receivers
of ASA.

1 goal asset send -a 0 -- asset < asset - name >

-f <opt - in - account > -t <opt - in - account >

-- creator < asset - creator >

-d data

Listing 2: Goal command to opt-in to an ASA

3 Role-based Token Management Scheme

Our scheme uses a two-layer architecture for role-based access management. The tokens are managed as ASAs at the
lower layer, while the role-based access management is taken care of by smart contracts that govern when state and
ownership modiﬁcations in the tokens are permitted (see Figure 1).

Our system is designed and implemented around the following roles:

1. Authenticator
2. Manufacturer
3. User
4. Recycler

3.1 Example workﬂow

The second life of chips is an important application scenario for a circular economy and sustainable development due to
the worldwide shortage of chip production capacity and the opaqueness of the chip reuse market. For this reason, we
demonstrate the token management scheme with the example of chips.

The second life of a chip includes repeated certiﬁcation, distribution, use, and ﬁnally recycling of products using
them. The participants involved include chip companies, authenticators, computer companies, users, and authorized
recyclers. Different participants have different interests and authority, so they need to cooperate with the corresponding
management mechanisms and process designs to ensure a fair and transparent system.

In order to accommodate the needs of the actual business process where multiple parties are involved with different
authorities, we propose a role-based token management scheme.

4

Smart Contract(Product Role Base)ASAUniqueIDPart A (ASA-1)Part B (ASA-2)Part C (ASA-3)Figure 2: The life cycle of computer chips and their respective blockchain-based tokens in our system

In Fig. 2, we show the proposed role-based token management scheme by taking the second-life process of a chip as a
simple example. The proposed process is shown in Fig. 2. Speciﬁcally, the whole management mechanism consists
of two parts: physical processes and on-chain operations. Transparent management of chip ﬂow is achieved through
the mapping of on-chain operations and physical processes. Compared to the primary mapping between physical
components (chips) and tokens, the double-layer token management scheme adds a new token management layer (smart
contract or application) to it, enabling the mapping of business processes and on-chain operations. In this mechanism,
the Non-Fungible Token (NFT) represents each unique chip, and the smart contract represents the integrated product.
The NFT is not delivered directly to the customer but ﬂows between authorized organizations, such as authenticators,
computer companies, or authorized recyclers. An NFT can only be issued by authenticators and released for use or
destroyed by authorized recyclers, thus avoiding the current disorder and opacity of the chip’s second-life market.

When a computer company produces a computer, the NFT is packaged into a smart contract that deﬁnes the roles and
permissions of the chip companies, authenticators, computer companies, customers, and authorized recyclers. The
authenticator is an independent third-party organization with relevant professional qualiﬁcations. This scheme provides
a realistic reﬂection of the actual business process. For example, only the authenticator can validate the initial properties
of the chip. After delivering the computer to the customer, the computer company also needs to provide after-sales
service to the customer. Only authorized recyclers have the authority to handle the chips.

The management of a chip consists of six processes: production, certiﬁcation, usage, distribution, and recycling.

1. Production: The chip company produces the chip.

2. Certiﬁcation: After validating the design and manufacturing of the chip, the authenticator issues a correspond-
ing ASA-based NFT certiﬁcate for each chip separately. These NFTs will include various information about
the chip, and it is guaranteed that this information will be tamper-proof. At the same time, once these NFTs
are issued, they will accompany the chip throughout its life cycle, which means that only chips bound with
NFTs are considered to be authenticated chips.

3. Usage: When the computer company purchases these chips, it is also given the management rights of the
corresponding NFT. For each manufactured computer, it will come with a package that includes the NFTs of
all the chips being used.

4. Distribution: When a user acquires a computer, the user will be given the appropriate user rights in the
corresponding smart contract. Note that the computer manufacturer and the chip company also have rights in
this contract.

5. When a user no longer uses her computer, she can choose to refurbish/recycle them to give chips and other

components a second life by handing over their computers to authorized recyclers.

6. Recycling/Refurbishment: The recycler can dismantle the computer and remove the user’s privileges from the
smart contract, releasing the tied NFTs for future use. These chips and NFTs can be delivered to computer
companies again or simply destroyed, depending on the condition of the chips.

5

Chip CompanyChipProduceAuthenticatorValidateIssue NFT ChipNFT Computer CompanyTransfer NFTDeliver chipMake computerPublish contractsTransfer NFTs to contracts ComputerSmartContractComputerSmartContractDeliver computerGranting userpermissionBuy computer  Get access to smart contractsAuthorized RecyclerSplit computer Releasing NFTsChipNFTSmartContractRevoke permissionSplitRelease NFTCustomerComputer CompanyComputerSmartContractDeliver chipTransfer NFTPhysicalDigitalOur token management scheme is generic and adaptable to a variety of use cases. Different companies and organizations
can deﬁne their own token management functions based on speciﬁc business scenarios and business logic on top of the
architecture we provide and still maintain the generality of the underlying tokens.

3.2

Implementation on Algorand

In the double-layer token management scheme, the lower layer manages the tokens, while the upper layer manages
access by different entities. The lower layer is implemented using ASA-based NFT and the basic information of the
chip, while the smart contract in the upper layer maintains the relationships and permissions between various entities.
The Algorand blockchain provides a ﬁne-grained token management mechanism. For instance, a computer is bonded to
a Contract Account. Manager Address and Reserve Address will represent who can manage ASAs and who reserves
other ASAs.

The Algorand blockchain provides two ways to implement smart contracts: (1) Smart Signature and (2) Application
(smart contracts). A SmartSig is a stateless program that can control an Algorand account, based on Transaction
Execution Approval Language(TEAL) logic. It can programmatically approve/reject transactions based on conditions.
A SmartSig can not handle local state and dynamically change values or access an ASA’s state. Contrarily, Application
is a stateful program that can read and write the state of the chain, including accounts’ states, ASAs’ states, and
global/local states. An Application is associated to an Account, which can create and submit transactions.

For example, when there are three ASAs a, b, c of three chips, SmartSig achieves the recycling process with the
following actions:

1. SmartSig approves AssetTransfer if and only if is triggered by a known trusted entity in collaboration with the

current Asset Manager.

2. SmartSig approves if and only if a, b, c are sent to Asset Manager.
3. SmartSig approves if and only if the Product Account is destroyed in the same call.

In the current work, we use Algorand smart contracts rather than smart signatures.

3.3 Components

One of the options to write the smart contracts (applications) in Algorand is PyTeal [34]. PyTeal enables writing the
smart contract front-end system using py-algorand-sdk library. Without PyTeal one has to use TEAL which is Algorand
bytecode language. This would make the process of writing smart contract logic harder for the developers. Besides, the
notion of front-end refers to off-chain components for smart contract management.
Our front-end of implementation consists of creating, compiling, deploying, and interacting with a smart contract that
is the backbone of our system. Each of the operations is deﬁned using functions in PyTeal in a contract.py available in
our repository.
Listing 3 shows how the smart contract is created, compiled, deployed to the blockchain, and interacted with.
At line 16 (listing 3) you can see the workﬂow of the system in Figure 3 is implemented to initialize, set user, or release
operations using a contract call. Every call to the main application can contain a list of assets in case the logic requires
them based on request parameters.

The complete version of the smart contract implementing the backbone logic of the architecture as well as utilities
written to handle operations is available in 1.

1 algod_client = algod . AlgodClient ( algod_token , algod_address )
2 creator_pri va te _ke y = g e t _ p r i v a t e _ k e y _ f r o m _ m n e m o n i c ( user_mnemonic )
3 clear_state = cle ar _s tate_program ()
4 approval = approval_program ( mnemonic . to_public_key ( recycler_mnemonic ) )
5
6 app_id = d e pl o y_ n ew _ ap pl ica ti on (
7

algod_client , creator_private_key , approval , clear_state )

8
9 app_add = logic . ge t _ a pp l i c at io n_ a dd re ss ( app_id )
10 asset_id = create_asset ( creator_publ ic _k ey = computer_add , creator_private_key =

computer_key ,

11

12

algod_client , ma nag er_publ ic _k ey = computer_add ,

total_supply =1)

asset_name = " CircleToken " , unit_name = " CT1 " , algod_client =

6

13
14 algo_transaction ( add = computer_add , key = computer_key ,
15
16 call_contract ( app_id = app_id , args = " Init " , assets =[ asset_id ] ,
17
18 send_asset ( algod_client = algod_client , asset_id = asset_id , asset_sender = computer_add

reciver = app_add , amount =1000000 , algod_client = algod_client )

private_key = computer_key , public_key = computer_add )

,

19

asset_reciver = app_add , se nd er_ pr iva te _k ey = computer_key )

20
21 call_contract ( app_id = app_id , args = " Set user " ,
22
23 call_contract ( app_id = app_id , args = " Release " ,
public_key = user_add , private_key = user_key )
24
25 send_asset ( algod_client = algod_client , asset_id = asset_id , asset_reciver =

private_key = computer_key , public_key = computer_add )

computer_add ,

26

asset_sender = app_add , sen de r_p ri va te_ ke y = recycler_key )

Listing 3: Front-end usage of our Algorand smart contract system for second-life material management

Figure 3: Workﬂow of system parts in CircleChain. The boxes with blue backgrounds represent roles the system is built
around.

4 Discussion

4.1 Scalability of CircleChain

One of the most important considerations in creating a blockchain-based system is its scalability. The notion of
scalability depends on the context in which the system is used for. Here, it is important to have a system with high
throughput for managing product tokens.
One potential bottleneck is where the tokens (ASAs) are sent and received. This is where opt-in operations also happen
which we discussed in section 2.2. Here, it is possible to put as many transactions into API requests and send them.
This will theoretically increase up to the block capacity. In other words, we will be able to send opt-in transactions since
there is no need for grouping them for atomic execution. The practical maximum transaction per block in Aglorand is
5000 and a new block is produced every 4.5 seconds. Therefore, we can assume a throughput of 1000 transactions per
second.

7

Smart contractlist_of_recyclers[...]current_userOpt inSet_userReleaseStep 6: Rekey contract accountcurrent_user=user_addressComputer ManufacturerUserStep 5: Release NFTs to recyclerargs : recycler_addressrecycler_address found in list_of_recyclers[..]NoDo nothingReject txnAuthenticatorOpt in to NFTSSend NFTs when chips are soldCreate NFTs when a chip isauthenticatedRecyclerSend the NFTs backto computer company if good condtion, Step 3: Send the assets the contractargs: noneYesStep 2: Opt in to assetsargs: assets[...]Step 1: Create contractargs: list_of_recyclers[...]recycler_addressStep 4: Set user addressargs : user_addressCondition : user_address = Global.zero_address4.2 Design Choices

4.2.1 Algorand vs Other Blockchain Platforms

The main differences between four of the most known blockchain platforms are demonstrated in table 1.

As also obvious from the table, most of the current blockchain systems in use do not have a deterministic transaction
delay. This makes it hard to understand the behavior of the application created based on these systems at scale. For
instance, our tests in section 4.3 would not provide deterministic results if the time between two consecutive blocks in
Algorand was not deterministic.
The other factor is the transaction cost which should be as low as possible so that building an application for supply
chain management systems is justiﬁable. This will be of much more importance when the value of the commodity
being handled is not high. In our used example, the electronic chips, this effect of transaction fee is projected because
of the product value.
An alternative is to use a private deployment of Ethereum or any other blockchain platform which can be conﬁgured to
have higher transaction throughput and redeﬁne the transaction fee manually [35]. However, such an approach would
defeat the purpose of using a blockchain system in the ﬁrst place since a permissioned blockchain does not have the
same distributedness that a public blockchain has such as Ethereum main network.
Last but not the least, we need to take into account the environmental impacts our transactions have. Traditional
proof-of-work (PoW) consensus systems are not environmentally friendly and should be avoided. This along with the
current transaction throughput are the main reasons for not using Ethereum main network to deploy our application.

Table 1: Comparison of blockchain platforms and their characteristics to be used in a large-scale circular economy.

Platform

Consensus Considerations

Transaction cost2

Throughput3 TX Delay

Algorand
[36]

Ethereum
[27]

PoS

PoW

ASAs, PyTeal: Python language
binding

constant ≈ $0.0005

≈ 1000 tps

4.5 secs

and

Turing-complete
easy
to use language, Vulnerabil-
ities:reentrancy,
huge
community of developers and
experts

etc.,

variable, unbounded
transaction time. ≈
$1.78

≈ 30 tps

15 sec - 5
mins

Solana
[37]

Avalanche
[38]

PoH

-

≈ $0.0002

65000 tps

secs - mins

Avalanche Uses EVM

$0.00025

5000 tps

2-10 secs

4.2.2 NFT vs FT

The proposed architecture can support Non-Fungible Token (NFT) and Fungible Token (FT) as essential asset repre-
sentatives, depending on the type of asset. For example, for chips, each chip is unique and has a unique identiﬁcation
number. This makes it difﬁcult to tamper with and ﬁts the characteristics of NFT. In the case of products that each
unit is not or does not need to be represented as unique, FT is suitable. For instance, glass as a building block of other
products might ﬁt with FT tokenization.
Since ASAs act as a template for creating tokens in Algorand, changing the type of the token is as easy as changing the
total parameter in an asset conﬁguration transaction. It is also possible to add more information to the token to unit
name and asset name parameters based on the token type.

4.2.3 Authenticators

A big issue in reusing and recycling products is the quality of products built with second-hand materials and premature
recycling. Our current system and implementation do not include a procedure to prevent these issues. However, we
included an authenticator role that keeps account of recyclers and can be effective to tackle mentioned problems. This
role can be extended to further include other features as well.

2The cost of the transaction is reported at the time of writing this paper.
3the throughput is measured in transactions per second (tps), and is deﬁned as the total number of transactions issued by network

participants that the the ledger can conﬁrm in a second.

8

Figure 4: The time it takes to create a batch of tokens with consecutive API calls to Algorand Testnet.

4.2.4 Recyclers

As mentioned earlier, a circular economy is deﬁned by not just recycling, but also by refurbishing, reconditioning,
repairing, and upgrading products or product parts. This means that the current role with the name recyclers in our
system can in fact have different roles in the real world other than merely scraping and recycling an otherwise reusable
product.

4.3 Testing at Scale

As pointed out earlier our current design choice for the type of tokens is NFT which means for each product (here:
chips) a new token will be issued in the form of Algorand ASA.
To show how this scheme will scale when large batches of tokens are issued for physical products, we issued batches of
token creations and measured the time it takes for the transactions to be conﬁrmed for all of the tokens in the batch. In
the tests, we ran all token creation transactions from the same machine, and the creators of all tokens in the batch are
the authenticator role, as it is shown in ﬁgure 3.
As the results of this experiment in ﬁgure 4 shows, the total time it takes to create a batch of tokens increases linearly
with the size of the batch. This shows that increasing the scalability of the system by parallelizing the API calls to the
Algorand client for token creation is very effective in keeping the asset creation time within reasonable bounds.

The environment setup where the scalability test was performed is shown in table 2. The performed tests are available
in our CircleChain Github repository4.

4.4 Basic Functionality

In our present model as well as implementation the access control mechanisms that restrict access to the contract in a
dynamic way are missing. In other words, the access control mechanisms currently in place only allow a deﬁned set of
accounts to be used with permissions to create the tokens. This provides the basic functionality required to operate a
circular supply chain and the more complex functionality will be left for users to implement.

4.5 Sustainability Contributions

We identiﬁed the following two contributions to the sustainability of supply chains:

4https://github.com/Kasche153/CircleChain/tree/main/sandbox/tests

9

200400600800100012001400160018002000Number of issued tokens at once050100150200250Deley (seconds)24.041.959.678.5101.3125.1151.8189.6219.5260.2Table 2: Scalability test environment setup

Experiment Parameter

Description

Test Environment

Synchronization
Node type
OS and hardware

SDK

Algorand Testnet (3.5.1.sta-
ble)
Fast catchup
Normal participant node
Windows 11, 16 GB RAM,
SSD, Intel Core i7-10700
CPU @ 2.90GHz
py-algorand-sdk, asyncio

• CircleChain provides a tokenization architecture and implementation that enables track and tracing of products.

This enables recycling in the context of a circular economy for more sustainable supply chains.

• According to GEM [2] fate of 82.6% of generated waste globally is uncertain. The architecture of CircleChain
can be conﬁgured to add reporting capabilities that integrate information from all issued tokens to determine
the fate of products.

• Providing an authenticator role enables the system to ensure the quality of products as well as audit the
refurbishment, reuse, and recycling of the recycler role. This helps prevent premature recycling of products.

5 Conclusion

We proposed a reference architecture that facilitates the management of products in the context of a circular economy.
Our system is highly scalable and secure and can be used in real-world applications. Furthermore, we have a
complete open-source implementation available on our Github page 5. We also tested the scalability of the system and
demonstrated how well it performed in scenarios where thousands of tokens are created and managed.

Our system uses a two-layer solution where the lower layer manages the tokens representing the digital twin of the
physical products and their state in their life cycle, whereas the upper layer manages different entities in different
roles that access the tokens. Using this double-layer approach makes the whole system less prone to design and
implementation ﬂaws since the system is designed with respect to the capabilities that Algorand Standard Assets
provide, not user-deﬁned tokens with arbitrary capabilities. We have demonstrated the workﬂow in the context of
producing and reusing chips.

References

[1] Published by S. O’Dea and Sep 24. Number of mobile devices worldwide 2020-2025, Sep 2021.
[2] Vanessa Forti, Cornelis P. Balde, Ruediger Kuehr, and Garam Bel. The Global E-waste Monitor 2020: Quantities,
ﬂows and the circular economy potential. United Nations University/United Nations Institute for Training and
Research, International Telecommunication Union, and International Solid Waste Association, Jul 2020.

[3] Piero Morseletto. Targets for a circular economy. Resources, Conservation and Recycling, 153:104553, February

2020.

[4] Callie W. Babbitt, Gabrielle Gaustad, Angela Fisher, Wei-Qiang Chen, and Gang Liu. Closing the loop on circular
economy research: From theory to practice and back again. Resources, Conservation and Recycling, 135:1–2,
August 2018.

[5] Leonidas Milios. Policies for Resource Efﬁcient and Effective Solutions: A review of concepts, current policy

landscape and future policy considerations for the transition to a Circular Economy. 2016.

[6] Transforming our world: the 2030 Agenda for Sustainable Development | Department of Economic and Social

Affairs, September 2015.

[7] Kris Hartley, Ralf van Santen, and Julian Kirchherr. Policies for transitioning towards a circular economy:
Expectations from the European Union (EU). Resources, Conservation and Recycling, 155:104634, April 2020.

[8] CGR 2022, 2022.

5https://github.com/Kasche153/CircleChain

10

[9] Circularity Gap Reporting Initiative - Home, 2022.
[10] Maciel M. Queiroz, Dmitry Ivanov, Alexandre Dolgui, and Samuel Fosso Wamba. Impacts of epidemic outbreaks
on supply chains: mapping a research agenda amid the COVID-19 pandemic through a structured literature review.
Annals of Operations Research, June 2020.

[11] Santosh Nandi, Joseph Sarkis, Aref Aghaei Hervani, and Marilyn M. Helms. Redesigning Supply Chains using
Blockchain-Enabled Circular Economy and COVID-19 Experiences. Sustainable Production and Consumption,
27:10–22, July 2021.

[12] Tokenization of Infrastructure: A blockchain-based solution to ﬁnancing sustainable infrastructure, January 2019.
[13] Geri Cupi. The Internet of Value and the Circular Economy. In Nikhil Vadgama, Jiahua Xu, and Paolo Tasca,
editors, Enabling the Internet of Value: How Blockchain Connects Global Businesses, Future of Business and
Finance, pages 137–143. Springer International Publishing, Cham, 2022.

[14] Hilde Heim and Caitlan Hopper. Dress code: the digital transformation of the circular fashion supply chain.

International Journal of Fashion Design, Technology and Education, 0(0):1–12, January 2022.

[15] George Alexandris, Vassilis Katos, Soﬁa Alexaki, and George Hatzivasilis. Blockchains as enablers for auditing
cooperative circular economy networks. In 2018 IEEE 23rd International Workshop on Computer Aided Modeling
and Design of Communication Links and Networks (CAMAD), page 1–7, Sep 2018.

[16] Abdelghani Bekrar, Abdessamad Ait El Cadi, Raca Todosijevic, and Joseph Sarkis. Digitalizing the Closing-of-
the-Loop for Supply Chains: A Transportation and Blockchain Perspective. Sustainability, 13(5):2895, January
2021. Number: 5 Publisher: Multidisciplinary Digital Publishing Institute.

[17] Universal Blockchain, March 2022.
[18] Monique J. Morrow and Mehran Zarrebini. Blockchain and the Tokenization of the Individual: Societal Implica-
tions. Future Internet, 11(10):220, October 2019. Number: 10 Publisher: Multidisciplinary Digital Publishing
Institute.

[19] A. S. L. França, J. Amato Neto, R. F. Gonçalves, and C. M. V. B. Almeida. Proposing the use of blockchain
to improve the solid waste management in small municipalities. Journal of Cleaner Production, 244:118529,
January 2020.

[20] George Hatzivasilis, Sotiris Ioannidis, Konstantinos Fysarakis, George Spanoudakis, and Nikos Papadakis. The

green blockchains of circular economy. Electronics, 10(1616):2008, Jan 2021.

[21] Foivos Anastasiadis, Ioannis Manikas, Ioanna Apostolidou, and Sabreen Wahbeh. The role of traceability in

end-to-end circular agri-food supply chains. Industrial Marketing Management, 104:196–211, 2022.

[22] Alireza Shojaei, Roozbeh Ketabi, Mohamad Razkenari, Hamed Hakim, and Jun Wang. Enabling a circular econ-
omy in the built environment sector through blockchain technology. Journal of Cleaner Production, 294:126352,
2021.

[23] Ilhaam A. Omar, Mazin Debe, Raja Jayaraman, Khaled Salah, Mohammad Omar, and Junaid Arshad. Blockchain-
based supply chain traceability for covid-19 personal protective equipment. Computers and Industrial Engineering,
167:107995, 2022.

[24] Huashan Chen, Marcus Pendleton, Laurent Njilla, and Shouhuai Xu. A survey on ethereum systems security:

Vulnerabilities, attacks, and defenses. ACM Computing Surveys (CSUR), 53(3):1–43, 2020.

[25] Yossi Gilad, Rotem Hemo, Silvio Micali, Georgios Vlachos, and Nickolai Zeldovich. Algorand: Scaling Byzantine
Agreements for Cryptocurrencies. In Proceedings of the 26th Symposium on Operating Systems Principles, SOSP
’17, pages 51–68, New York, NY, USA, October 2017. Association for Computing Machinery.

[26] Jing Chen and Silvio Micali. Algorand: A secure and efﬁcient distributed ledger. Theoretical Computer Science,

777:155–183, July 2019.

[27] Gavin Wood et al. Ethereum: A secure decentralised generalised transaction ledger. Ethereum project yellow

paper, 151(2014):1–32, 2014.

[28] Christian Stoll, Lena KlaaBen, and Ulrich Gallersdörfer. The Carbon Footprint of Bitcoin. SSRN Scholarly Paper

ID 3335781, Social Science Research Network, Rochester, NY, February 2019.

[29] ERC-721 Non-Fungible Token Standard, mar 2022.
[30] ERC-20 Token Standard, dec 2021.
[31] Mikhail Vladimirov. Attack vector on erc20 api (approve/transferfrom methods) and suggested improvements.
https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729, 2016. Accessed: 2021-03-
14.

11

[32] Algorand Inc. Algorand standard assets (ASAs), 2022.
[33] Gidon Katten. Issuing Green Bonds on the Algorand Blockchain. arXiv:2108.10344 [cs], August 2021. arXiv:

2108.10344.

[34] PyTeal - Algorand Developer Portal.
[35] Christine V Helliar, Louise Crawford, Laura Rocca, Claudio Teodori, and Monica Veneziani. Permissionless and
permissioned blockchain diffusion. International Journal of Information Management, 54:102136, 2020.
[36] Jing Chen and Silvio Micali. Algorand: A secure and efﬁcient distributed ledger. Theoretical Computer Science,

777:155–183, 2019.

[37] Anatoly Yakovenko. Solana: A new architecture for a high performance blockchain v0. 8.13. Whitepaper, 2018.
[38] Avalanche whitepaper - whitepaper.io.

12

