2
2
0
2

l
u
J

9
2

]

R
C
.
s
c
[

1
v
2
9
5
4
1
.
7
0
2
2
:
v
i
X
r
a

Pattern matching algorithms in Blockchain for network fees
reduction

Robert Susik†, Robert Nowotniak‡

† Lodz University of Technology, Institute of Applied Computer Science
Al. Politechniki 11, 90–924 Łódź, Poland
rsusik@kis.p.lodz.pl
‡ MetaSolid.tech, Al. Grunwaldzka 56/202, 80-241 Gdańsk, Poland,
rnowotniak@metasolid.tech

August, 2022

Abstract

Blockchain received a vast amount of attention in recent years and is still growing. The
second generation of blockchain, such as Ethereum, allows execution of almost any program in
Ethereum Virtual Machine (EVM), making it a global protocol for distributed applications. The
code deployment and each operation performed in EVM cost the network fee called gas, which
price varies and can be signiﬁcant. That is why code optimization and well-chosen algorithms are
crucial in programming on the blockchain. This paper evaluates the gas usage of several exact
pattern matching algorithms on the Ethereum Virtual Machine. We also propose an eﬃcient
implementation of the algorithms in the Solidity/YUL language. We evaluate the gas fees of all
the algorithms for diﬀerent parameters (such as pattern length, alphabet size, and text size). We
show a signiﬁcant gas fee and execution time reduction with up to 22-fold lower gas usage and
55-fold speed-up comparing to StringUtils (a popular Solidity string library).

keywords: blockchain, pattern, matching, ethereum, string

1 Introduction

1.1 Background

Blockchain emerged as a peer-to-peer net-
work with immutable transaction records on a
shared public ledger designed for implementing
transactions of electronic cash (cryptocurrency).
Nakamoto introduced the ﬁrst successful imple-
mentation in 2008 called Bitcoin [31]. Over the
years, blockchain gained popularity [13] and be-
came a promising technology that found appli-
cation in many computer science ﬁelds. Several
alternative blockchains were introduced (Name-
coin1, Litecoin2, Peercoin3, etc.) before the sec-
ond generation of blockchain was developed.

Ethereum [9], the ﬁrst Blockchain 2.0, was
for building decen-
introduced as a protocol
tralized applications running in the blockchain.

1www.namecoin.org
2litecoin.org
3www.peercoin.net

In short, it is a distributed data storage plus
smart contracts platform [15] that introduces
an Ethereum Virtual Machine (EVM). One of
the main advantages of EVM is the support
of Turing-complete [39] programming language,
which allows for writing decentralized applica-
tions based on smart contracts [38]. Ethereum
has its own cryptocurrency called Ether, which
is also used as a computational crypto-fuel to ex-
ecute a code in EVM and pay transaction fees.
For each transaction, the user needs to specify
the upper bound of gas that can be consumed
by the transaction. An advantage of such an
approach is that it helps to avoid the situation
where all the user’s resources are wasted in, for
instance, an “inﬁnite” loop. The mentioned code
execution cost may diﬀer depending on the num-
ber of operations performed in a transaction. It
means the inﬁnite loop is not possible because, in
the worst case, the EVM will stop processing the
code by raising the “out of gas” error. A single

1

 
 
 
 
 
 
computational step (which we can compare to a
single CPU cycle) costs one unit of gas, and a sin-
gle operation usually takes more than one step.
For instance, an operation (ADD) that sums two
32-byte integer numbers costs three units of gas.
On the contrary, there are a few operations that
cost nothing, such as RETURN. Apart from the
execution cost, each byte of the transaction data
costs 5 units of gas.

Several

languages are available for writing
smart contracts, such as Solidity, YUL, Serpent,
and Vyper. The former, Solidity, is the most
popular [40] and recommended object-oriented
programming language for Ethereum. YUL and
Serpent are high-level assembly languages, and
Vyper puts emphasis on simplicity and security
(the syntax is similar to Python, with inheri-
tance removed). All of the mentioned languages
are translated to EVM stack-based bytecode lan-
guage that, once deployed in blockchain, can be
executed by a transaction transferring Ether (the
fuel) to the contract address.

Development of blockchain high-level pro-
gramming languages opened new opportunities
to create more complex smart contracts, which
combined with user interfaces form applications
called Dapps. Dapps are aligned with the web3
concept where the applications are decentral-
ized and always available. However, more com-
plex apps consume more gas which causes higher
costs.

1.2 Motivation

Blockchain ﬁnds a wide range of applications
in areas such as healthcare [25, 2], voting [36],
transportation [30], music industry [27], supply
chains [41], reputation systems [3], document
versioning [33], and decentralized ﬁnance [4].
The interest in Blockchain-based technologies is
growing rapidly [40, 6]. Similarly to Web2.0,
web3 Dapps can be reached with its alias name
via DNS-like services such as ENS4, Unstoppable
domains5, or Namecoin that are supported by
web browsers (web browser extensions or ded-
icated web browsers to navigate and browse
blockchain-based applications). This new type

4ens.domains
5unstoppabledomains.com

of application has web/mobile apps, backend
(smart contract) data sources (Oracle contract),
or data storage (i.e., IPFS).

In a general case, it is possible to implement al-
most any application with the use of blockchain
technology. However, there are technical (i.e.,
stack depth and size) and ﬁnancial (gas is expen-
sive compared to CPU time) limitations. While
the ﬁrst one may be solved with future Ethereum
Virtual Machine (EVM) development, the gas
fees seem to be a challenge [28, 29, 22]. Cur-
rently, there are approaches that signiﬁcantly re-
duce the cost of running code in blockchain, such
as Polygon, Solana, or Ethereum 2 (a new “con-
sensus layer”, which leverages Proof-Of-Stake al-
gorithm [23] in place of Proof-Of-Work [31]).

The transformation process of traditional ap-
plications to a Dapp is not well deﬁned and is a
subject of study [40]. Along with this process,
there is an obvious need for algorithms and li-
braries on EVM. In [19] the authors performed
an interesting analysis of computational costs us-
ing gas consumption as the metric. The gas price
prediction [34, 29, 22] and transaction fee opti-
mization [26, 11, 21] is an active subject of study.
In this paper, propose an eﬃcient implemen-
tation of several exact pattern matching algo-
rithms in the Solidity/YUL language, and eval-
uate the gas usage of mentioned algorithms on
the Ethereum Virtual Machine. We evaluate the
algorithms’ gas fee and execution time for diﬀer-
ent parameters (such as pattern length, alphabet
size, and text size). We show that some of those
algorithms signiﬁcantly reduce the gas fee and
execution time compared to the existing Solid-
ity library. The following contributions of this
work can be enumerated: (i) We adapt and im-
plement several exact string matching algorithms
for Ethereum Virtual Machine. (ii) We present
the performance of all implemented algorithms
in the Ethereum blockchain environment.
(iii)
We show the gas fee and execution time reduc-
tion comparing to popular Solidity library.

Section 2 deﬁnes the problem of exact pattern
matching and describes all the implemented al-
gorithms. Section 3 presents the results of per-
formed experiments in terms of gas usage. Fi-
nally, section 4 concludes the results and sug-
gests future work.

2

2 Our Approach

2.1 Problem

Exact string matching is one of the most ex-
plored problems in computer science. The prob-
lem can be stated as follows: For a given text
T [0 . . . n−1], and a pattern P [0 . . . m−1], m ≤ n,
both over a common alphabet P of size σ, report
all occurrences of P in T , such that P [0 . . . m −
1] = T [i . . . i + m − 1], where i ≤ n − m − 1.

2.2 Algorithms

The string matching algorithms constitute an
essential component in many software applica-
tions [10]. Over the years, tens of algorithms
have been invented, most of which are modiﬁca-
tions of the older ones [14, 12]. We adapted and
implemented several classic exact text match-
ing algorithms. The Solidity language and EVM
speciﬁcation (and limitation) implied changes to
original algorithms implementation. We adapted
and optimized the algorithms to take advantage
of 32-byte word and reduce the number of ex-
pensive instructions (i.e., bitwise shifts) as much
as possible. Those changes are rather technical
tricks that do not change the algorithm logic.
Many instructions (i.e., SIMD6, AVX) that are
available in modern CPU are not available in
EVM yet, and thus some improvements cannot
be implemented.

2.2.1 Naive algorithm

The Naive (also called Brute-Force) approach to
this problem is to scan text T using a window
of size m. The window starts at position 0 and
moves towards the end of the string (say from left
to right). At each step, the content of the win-
dow is compared with the pattern character by
character. If all m characters match, the position
is reported. If there is a mismatch, the window
is shifted by one position to the right. The com-
plexity is O(nm) in the worst case, and if σ ≥ 2,
then the average complexity equals O(n), which
was experimentally supported in [17].

6A proposal (EIP-616) to provide SIMD in EVM was
created by Greg Colvin in 2017 but has not been imple-
mented yet.

2.2.2 Knuth-Morris-Pratt

One of the ﬁrst solutions that reduce the num-
ber of character comparisons to ﬁnd a pattern
in the text is Knuth-Morris-Pratt (KMP) algo-
rithm [24]. KMP reads the pattern and builds a
lookup table N [0 . . . m−1], which contains infor-
mation on how many characters can be skipped
if a mismatch occurs. The algorithm sequentially
compares characters between pattern P and text
T from left to right. Once all m characters are
matched, the position is reported. If a mismatch
occurs, the algorithm reads how many characters
can be skipped from table N . KMP compares
between n and 2n−1 characters, the search com-
plexity is O(n) and the N table is done in O(m).

2.2.3 Boyer-Moore-Horspool

Boyer-Moore-Horspool (BMH) algorithm [16] is
a simpliﬁed variant of Boyer-Moore (BM) [7].
The algorithm compares characters from right to
left, and if a mismatch occurs, then the window
is shifted according to so-called bad-character
heuristic [16]. Searching takes O(nm) time in
the worst case, O(nlogσ(m)/m) in the average
case, and O(n/m) in the best case.

2.2.4 Rabin-Karp

Rabin-Karp (RK) algorithm [20]
is the ﬁrst
that uses rolling-hash for text search purposes.
The algorithm calculates a hash for the pattern
P [0 . . . m − 1] and text window T [0 . . . m − 1],
then moves the window towards the end of the
text. At each step, i, the hash is recalculated
by adding the character that enters the window
T [i + m] and removing the one that moves out-
side the window T [i]. The average complexity of
this algorithm is O(n + m), and O(nm) in the
worst case.

2.2.5 Shift-Or

Shift-Or (SO) algorithm [5] simulates Nondeter-
It uses
ministic Finite Automata (NFA) [35].
the bitwise techniques and is eﬃcient if m ≤ w,
where w is the machine word size.
In EVM,
the machine word size is 256-bit, so the algo-
rithm performs the best if the pattern has at

3

most 256 characters. The algorithm can ﬁnd a
larger pattern, but in that case, it searches for
the preﬁx (of size w) and veriﬁes the reported po-
sitions. One workaround for this limitation was
presented in [37] where authors used End-Tagged
Dense Code [8] to reduce the pattern size. The
complexity of this algorithm is independent of
the pattern length and equals O(n⌈m/w⌉), which
gives O(n) for m = O(w).

2.2.6 Backward Nondeterministic Dawg

Matching

Backward Nondeterministic Dawg Matching
(BNDM) [32] is a Directed Acyclic Word Graph
simulation implemented with bit-parallel tech-
niques. The algorithm, like BMH, compares the
characters from the last character in the window,
and if the character does not occur in the pat-
tern, the window is shifted by m − x (x is the
length of the suﬃx that matches) characters for-
ward. Like SO, the max pattern length depends
on the machine word size. The complexity is
P (n/m) in the best case and O(nm) in the worst
case and O(nlogσm/m).

2.2.7 Stringutils

StringUtils [1], is a popular Solidity library for
string operations that most developers would
copy into their programs and deploy along with
their smart contracts [18]. There are several
functions supported, but we are primarily inter-
ested in the “ﬁnd” operation, which searches the
ﬁrst occurrence of pattern P in text T and re-
turns the “slice” (a data structure representing
the substring of the text). If the i is the posi-
tion of the ﬁrst occurrence of the pattern in the
text, then the returned substring is T [i . . . n − 1].
In order to evaluate its performance, we had to
modify it, so it returns all the occurrences of the
pattern in the text likewise other presented al-
gorithms.

3 Experimental results

In order to evaluate the performance of the algo-
rithms, we performed various experiments. We
tested the algorithms in the Ethereum network

using Ganache v6.12.2 (ganache-core: 2.13.2)7 (a
personal blockchain for development). The al-
gorithms were implemented in Solidity language
interleaved with inline assembly statements writ-
ten in YUL. All source codes were compiled with
solc v0.8.11 compiler with optimizer enabled for
200 runs and shared publicly on Github8. The
smart contract was deployed on the Rinkeby net-
work 9. The experiments were executed on a
machine equipped with

Intel(R) Core(TM) i5-3570 CPU 3.4 GHz,
(256 KB L1, 1 MB L2, and 6 MB L3 memory),
16 GB of DDR3 1333 MHz RAM, running un-
der Fedora 28 64-bit OS. As a competing algo-
rithm for comparison, we took a widely used and
popular StringUtils10 library. We are unaware
of any other fast implementation of exact string
matching algorithms on the blockchain than the
functions available in StringUtils. The tests were
performed on datasets (dna, english, proteins,
sources) from Pizza & Chilli corpus11. Algo-
rithms were tested using multiple patterns sizes
m ∈ {4, 8, 12, 16, 24, 32, 64, 128, 256, 512},
and text sizes n ∈ {1KiB, 16KiB, 128KiB} (sub-
strings of mentioned datasets). We generated 11
patterns for each test case and presented the me-
dian value (gas or execution time) of searching
them. In the ﬁrst set of analyses, we investigated
the impact of the alphabet, text size, and pat-
tern size on gas usage. We noticed a considerable
diﬀerence in gas usage for diﬀerent m.

In Fig. 1 we can clearly see that the StringUtils
function increases rapidly once the pattern size
exceeds 32 characters. It can be easily explained,
the StringUtils highly depends on the fact that
the machine word size in EVM is 32 bytes. For
patterns with at most 32 characters (m ≤ 32),
the algorithm packs all the pattern characters
into a 32-byte variable, compares it against the
masked text window and ﬁnally shifts the text
window by one position. If the pattern is longer
than 32 characters, the algorithm calculates the
hash (keccak256) of the pattern, compares it
against the hash of the text window, and then

7truﬄesuite.com/ganache
8github.com/rsusik/pattern-matching-in-blockchain
90x9Fb22d8d82FcF1c5321D5acf75eE917CF936E257
10github.com/Arachnid/solidity-stringutils
11pizzachili.dcc.uchile.cl

4

1e7

1e7

s
a
g

s
a
g

6

4

2

0

6

4

2

0

4

8

12

16

24

m

32

64

128 256 512

(a) dna

1e7

4

8

12

16

24

m

32

64

128 256 512

s
a
g

s
a
g

6

4

2

0

6

4

2

0

4

8

12

16

24

m

32

64

128 256 512

(b) proteins

1e7

4

8

12

16

24

m

32

64

128 256 512

(c) english

(d) sources

BMH
BNDM

KMP
Naive

StringUtils

RK
SO

Figure 1: Gas usage in function of pattern size for n = 128 KiB

shifts the text window by one. The cost of
keccak256 depends on the length of the input,
which is why the cost grows if m increases. On
the other hand, the Boyer-Moore-Horspool algo-
rithm takes advantage of longer patterns as it al-
lows to make larger jumps (if the ﬁrst character
does not exist in the pattern, the algorithm skips
m positions of the text). We ﬁnd that the BHM
wins in almost all cases, and only BNDM is com-
parable. The most striking fact to emerge from
these results is that the BMH reduces the gas us-
age by up to 22-folds comparing to StringUtils.
Interesting is the fact that the StringUtils has
an even worse result than the Naive approach
for sources, and m = 512.

Table1 shows gas usage and its price (fee) of
searching m = 512 pattern in 128KiB text. In

this case, if we assume the current12 gas price
(about 25 Gwei) and USD/ETH exchange rate
(1250 USD), the approximate cost of search-
ing pattern of m = 512 characters in sources
dataset using StringUtils is about $1766 whereas
the same using BMH is about $79. The BMH
wins for proteins and sources, but in case of
dna and english the BNDM dominates. How-
ever, only in the case of dna the diﬀerence be-
tween BMH and BNDM is notable.

Table 2 presents gas usage per text charac-
ter. All the algorithms, despite Naive, are more
expensive for very short texts (1 KiB) than for
longer ones (16 KiB and 128 KiB). The gas us-
age per character falls with the text size increase.
The diﬀerence between 1 KiB and 16 KiB is more

12As per 2022.07.10

5

Set

dna

english

proteins

sources

gas

fee

gas

fee

gas

fee

gas

fee

Algorithm

BMH
BNDM
KMP
Naive
RK
SO
StringUtils

9.55
2.96
47.65
61.99
43.33
17.06
56.50

$298.34
$92.49
$1488.91
$1937.23
$1353.93
$533.21
$1765.74

2.83
2.75
35.42
56.74
43.33
17.06
56.50

$88.43
$85.99
$1106.95
$1773.07
$1353.93
$533.21
$1765.74

3.21
5.78
36.12
58.42
43.34
17.07
56.51

$100.29
$180.47
$1128.80
$1825.76
$1354.31
$533.35
$1765.93

2.53
2.68
33.59
56.07
43.33
17.06
56.50

$78.92
$83.65
$1049.69
$1752.33
$1353.93
$533.21
$1765.74

Table 1: Gas usage (in millions) and fee of searching long pattern (m = 512) in 128 KiB text

Algorithm BMH BNDM KMP Naive

RK

SO StringUtils

Set

dna

english

proteins

sources

n

1 KiB 111.89
67.97
66.84
77.18
34.57
32.70
77.70
34.30
32.12
86.59
32.03
30.01

16 KiB
128 KiB
1 KiB
16 KiB
128 KiB
1 KiB
16 KiB
128 KiB
1 KiB
16 KiB
128 KiB

124.19
74.18
72.44
95.52
52.27
49.62
96.22
49.81
50.30
105.59
48.07
43.70

358.08
366.65
362.15
290.64
261.74
255.79
297.96
259.82
264.74
289.87
244.69
253.65

478.56
473.92
475.25
450.87
431.39
429.09
452.59
430.62
432.02
456.54
425.78
428.74

357.66
331.00
329.66
357.66
331.00
329.66
357.66
331.00
329.68
357.66
331.00
329.66

176.04
132.12
129.77
176.04
132.12
129.77
176.04
132.12
129.78
176.04
132.12
129.77

195.31
171.79
170.64
195.31
171.79
170.64
195.31
171.79
170.91
195.31
171.79
170.64

Table 2: Gas usage per text character of searching short (m = 16) pattern

considerable than between 16 KiB and 128 KiB.
We see, in this case, the impact of function initial
steps and the preprocessing phase on transaction
cost. Both take the same amount of resources if
the pattern size is ﬁxed.
It is also the reason
why it only slightly aﬀects the Naive algorithm,
which does not have preprocessing phase.

In addition to the gas usage, we measured
searching time. Figure 2 presents median time
(in seconds) of searching patterns in 128 KiB
text. As expected, the time and gas are cor-
related. However, we noticed some discrepan-
cies between them. For instance, in the case of
sources dataset, the StringUtils needs 22 times
more gas than BMH to ﬁnd a pattern of m = 512

characters, whereas it needs 55-fold more time,
which means the result in terms of time is 150%
higher than for the gas usage. Nevertheless, the
diﬀerence is much smaller for very short patterns
(m = 4, and the same other parameters). The
StringUtils time and the gas usage are 3.22 and
2.90 higher than BMH (respectively), resulting
in about 11% more in time than gas consump-
tion.

Finally, we accumulated all the results and dis-
played them in a single chart. Figure 3 presents
the gas usage in the function of the execution
time along with the trend line. We can clearly
see that the execution time and the gas usage are
correlated. The coeﬃcients of linear regression

6

60

40

e
m

i
t

20

0

60

40

e
m

i
t

20

0

4

8

12

16

24

m

32

64

128 256 512

(a) dna

4

8

12

16

24

m

32

64

128 256 512

60

40

e
m

i
t

20

0

60

40

e
m

i
t

20

0

4

8

12

16

24

m

32

64

128 256 512

(b) proteins

4

8

12

16

24

m

32

64

128 256 512

(c) english

(d) sources

BMH
BNDM

KMP
Naive

StringUtils

RK
SO

Figure 2: Time (in seconds) in function of pattern size for n = 128 KiB

1e7

prediction
results

s
a
g

6

4

2

0

0

10

20

40

50

60

30
time

Figure 3: Gas usage in function of execution time (in seconds)

allow estimating the cost of code execution ap-
proximately. We found that one second of code
execution (assuming our environment speciﬁca-

tion) would cost about $31.71.

7

4 Conclusion

In this work, we adapted exact pattern matching
algorithms to EVM architecture, implemented
the algorithms in Solidity language combined
with YUL assembly, and performed extensive
tests using the Ethereum blockchain. We em-
pirically proved that the gas usage could be sig-
niﬁcantly reduced in all the test cases. The ex-
periments conﬁrmed the technical (smaller com-
putational time) and ﬁnancial (smaller costs)
advantages of the proposed approach. We
demonstrated that the cost of searching patterns
could be reduced by up to 22 times ($78.92 vs
$1765.74) and the execution time by up to 55
times (41.47s. vs. 0.75s.) when compared to
StringUtils.

Acknowledgement

We thank Sz. Grabowski (Lodz University
of Technology) for helpful discussions and his
valuable suggestions.

References

[6] R. Belchior, A. Vasconcelos, S. Guerreiro,
and M. Correia. A survey on blockchain
interoperability: Past, present, and future
trends. ACM Computing Surveys (CSUR),
54(8):1–41, 2021.

[7] R. S. Boyer and J. S. Moore. A fast string
searching algorithm. Communications of
the ACM, 20(10):762–772, 1977.

[8] N. Brisaboa, E. Iglesias, G. Navarro, and
J. L. Paramá. An eﬃcient compression code
for text databases. In Proc. 25th European
Conference on Information Retrieval Re-
search (ECIR’03), LNCS 2633, pages 468–
481. Springer, 2003.

[9] V. Buterin. Ethereum white paper: A next
generation smart contract & decentralized
application platform. 2013.

[10] C. Charras and T. Lecroq. Handbook of ex-
act string matching algorithms. Citeseer,
2004.

[11] A. Di Sorbo, S. Laudanna, A. Vacca, C. A.
Visaggio, and G. Canfora. Proﬁling gas con-
sumption in solidity smart contracts. Jour-
nal of Systems and Software, 186:111193,
2022.

[1] Stringutils. https://github.com/Arachnid/solidity-stringutils.

Accessed: 2022-04-15.

[2] E. M. Adere. Blockchain in healthcare and
iot: A systematic literature review. Array,
page 100139, 2022.

[3] A. S. Almasoud, F. K. Hussain, and O. K.
Hussain. Smart contracts for blockchain-
based reputation systems: A systematic lit-
erature review.
Journal of Network and
Computer Applications, 170:102814, 2020.

[4] H. Amler, L. Eckey, S. Faust, M. Kaiser,
P. Sandner, and B. Schlosser. Deﬁ-ning deﬁ:
Challenges & pathway.
In 2021 3rd Con-
ference on Blockchain Research & Applica-
tions for Innovative Networks and Services
(BRAINS), pages 181–184. IEEE, 2021.

[12] S. Faro and T. Lecroq. The exact online
string matching problem: A review of the
most recent results. ACM Computing Sur-
veys (CSUR), 45(2), mar 2013.

[13] A. G. Gad, D. T. Mosa, L. Abualigah,
and A. A. Abohany. Emerging trends in
blockchain technology and applications: A
review and outlook. Journal of King Saud
University-Computer and Information Sci-
ences, 2022.

[14] S. Grabowski. New algorithms for exact and

approximate text matching. online.

[15] H. Guo and X. Yu. A survey on blockchain
technology and its security. Blockchain: Re-
search and Applications, page 100067, 2022.

[5] R. A. Baeza-Yates and G. H. Gonnet. A
new approach to text searching. Communi-
cations of the ACM, 35(10):74–82, 1992.

[16] R. N. Horspool. Practical fast searching in
strings. Software: Practice and Experience,
10(6):501–506, 1980.

8

[17] A. Hume and D. Sunday. Fast string search-
Software: Practice and Experience,

ing.
21(11):1221–1248, 1991.

[18] K. Iyer and C. Dannen. Building Games
with Ethereum Smart Contracts. Springer,
2018.

[19] A. Jabbar and S. Dani.

Investigating the
link between transaction and computational
costs in a blockchain environment.
Inter-
national Journal of Production Research,
58(11):3423–3436, 2020.

[20] R. M. Karp and M. O. Rabin. Eﬃcient
randomized pattern-matching algorithms.
IBM Journal of Research and Development,
31(2):249–260, 1987.

[21] M. M. A. Khan, H. M. A. Sarwar, and
M. Awais. Gas consumption analysis of
ethereum blockchain transactions. Concur-
rency and Computation: Practice and Ex-
perience, 34(4):e6679, 2022.

[22] H.-M. Kim, G.-W. Bock, and G. Lee. Pre-
dicting ethereum prices with machine learn-
ing based on blockchain information. Ex-
pert Systems with Applications, 184:115480,
2021.

[23] S. King and S. Nadal. Ppcoin: Peer-to-peer
self-
crypto-currency with proof-of-stake.
published paper, August, 19(1), 2012.

[24] D. E. Knuth, J. H. Morris, and V. R. Pratt.
Fast pattern matching in strings. SIAM
Journal on Computing, 6(1):323–350, 1977.

[25] A. Kumar, R. Krishnamurthi, A. Nayyar,
K. Sharma, V. Grover, and E. Hossain. A
novel smart healthcare design, simulation,
and implementation using healthcare 4.0
processes. IEEE Access, 8:118433–118471,
2020.

[26] C. Li, S. Nie, Y. Cao, Y. Yu, and
Z. Hu. Trace-based dynamic gas estima-
tion of loops in smart contracts. IEEE Open
Journal of the Computer Society, 1:295–306,
2020.

[27] Y. Li, J. Wei, J. Yuan, Q. Xu, and C. He.
A decentralized music copyright operation
management system based on blockchain
technology. Procedia Computer Science,
187:458–463, 2021.

[28] L. Marchesi, M. Marchesi, G. Destefanis,
G. Barabino, and D. Tigano. Design pat-
terns for gas optimization in ethereum.
In 2020 IEEE International Workshop on
Blockchain Oriented Software Engineering
(IWBOSE), pages 9–15. IEEE, 2020.

[29] R. Mars, A. Abid, S. Cheikhrouhou,
and S. Kallel. A machine learning ap-
proach for gas price prediction in ethereum
blockchain.
In 2021 IEEE 45th An-
nual Computers, Software, and Applications
Conference (COMPSAC), pages 156–165.
IEEE, 2021.

[30] M. B. Mollah, J. Zhao, D. Niyato, Y. L.
Guan, C. Yuen, S. Sun, K.-Y. Lam, and
L. H. Koh. Blockchain for the internet of
vehicles towards intelligent transportation
systems: A survey. IEEE Internet of Things
Journal, 8(6):4157–4185, 2020.

[31] S. Nakamoto. Bitcoin: A peer-to-peer elec-
tronic cash system. Decentralized Business
Review, page 21260, 2008.

[32] G. Navarro and M. Raﬃnot. A bit-parallel
approach to suﬃx automata: Fast extended
string matching.
In Proc. Annual Sympo-
sium on Combinatorial Pattern Matching
(CPM), pages 14–33. Springer, 1998.

[33] N. Nizamuddin, K. Salah, M. A. Azad,
J. Arshad, and M. Rehman. Decentralized
document version control using ethereum
blockchain and ipfs. Computers & Electrical
Engineering, 76:183–197, 2019.

[34] G. A. Pierro, H. Rocha, S. Ducasse,
M. Marchesi, and R. Tonelli. A user-
oriented model for oracles’ gas price predic-
tion. Future Generation Computer Systems,
128:142–157, 2022.

[35] M. O. Rabin and D. Scott. Finite automata
and their decision problems. IBM journal

9

of research and development, 3(2):114–125,
1959.

[36] M. Sober, G. Scaﬃno, C. Spanring, and
A voting-based blockchain
S. Schulte.
interoperability oracle.
In 2021 IEEE
International Conference on Blockchain
(Blockchain), pages 160–169. IEEE, 2021.

[37] R. Susik, S. Grabowski, and K. Fredriks-
son. Revisiting multiple pattern matching.
Computing and Informatics, 38(4):937–962,
2019.

[38] N. Szabo.

Smart contracts:

building
blocks for digital markets. EXTROPY: The
Journal of Transhumanist Thought,(16),
18(2):28, 1996.

[39] A. M. Turing.

On computable num-
bers, with an application to the entschei-
dungsproblem. J. of Math, 58(345-363):5,
1936.

[40] K. Wu. An empirical study of blockchain-
arXiv

based decentralized applications.
preprint arXiv:1902.04969, 2019.

[41] Y. Zhang, L. Chen, M. Battino, M. A.
Farag, J. Xiao, J. Simal-Gandara, H. Gao,
and W. Jiang. Blockchain: An emerg-
ing novel technology to upgrade the current
fresh fruit supply chain. Trends in Food Sci-
ence & Technology, 2022.

Appendix A

In this section we provide complementary re-
sults.

10

Set

dna

english

m
Algorithm

BMH
BNDM
KMP
Naive
RK
SO
StringUtils
BMH
BNDM
KMP
Naive
RK
SO
StringUtils

proteins BMH

sources

BNDM
KMP
Naive
RK
SO
StringUtils
BMH
BNDM
KMP
Naive
RK
SO
StringUtils

4

8

12

16

24

32

64

128

256

512

10.76
27.36
47.65
60.54
42.69
17.30
23.01
7.25
15.57
34.24
56.13
44.29
17.30
20.88
7.08
14.19
34.15
58.07
45.54
17.32
21.01
6.52
12.62
33.53
56.12
44.13
17.70
21.01

7.54
13.86
46.97
60.59
42.96
17.12
20.35
4.38
8.72
36.57
56.70
43.87
17.41
21.02
4.37
8.84
34.01
56.15
43.86
17.74
21.19
3.67
7.23
32.66
56.06
44.38
17.42
20.79

7.41
10.13
47.37
60.03
42.24
17.26
20.64
3.27
6.08
35.87
56.37
43.71
17.43
21.16
3.28
6.06
34.57
56.13
43.68
17.41
20.81
2.71
5.13
32.87
54.49
42.98
17.49
20.75

7.62
8.30
47.21
59.62
42.31
17.27
20.60
2.71
5.07
33.60
54.94
43.40
17.45
20.70
2.71
5.15
34.23
59.41
47.79
17.12
20.58
2.31
4.12
34.19
55.27
44.01
17.25
20.60

7.34
5.99
48.62
62.06
44.07
17.32
20.70
2.36
3.72
34.30
55.28
43.40
17.44
20.62
2.16
3.65
33.60
62.52
49.04
17.20
20.53
1.90
3.21
32.97
56.73
44.50
17.26
20.55

5.19
4.80
44.76
61.29
43.98
17.29
20.84
1.99
2.99
33.83
56.30
44.20
17.28
20.64
2.02
3.59
34.29
62.10
47.09
17.30
20.57
1.53
2.54
33.04
55.34
43.97
17.51
20.70

8.52
2.88
50.10
62.48
44.56
17.81
41.63
1.65
1.92
35.00
55.97
43.73
17.60
41.08
1.55
2.56
35.80
57.62
44.52
17.73
41.12
1.14
1.65
32.70
54.65
43.62
17.18
40.48

8.16
1.76
49.16
61.50
43.93
17.46
40.53
1.32
1.29
35.15
55.07
43.22
17.89
41.60
1.54
2.71
35.78
57.33
45.07
17.68
41.26
0.93
1.16
32.09
55.29
43.31
17.13
40.15

6.46
1.22
48.25
61.85
44.04
17.12
40.92
1.17
0.99
34.21
58.23
45.42
17.80
41.80
1.47
1.01
36.35
56.33
44.50
17.59
41.41
0.80
0.92
32.56
55.59
44.37
17.01
40.31

7.45
1.21
46.59
61.63
44.04
17.37
42.05
1.05
0.95
36.83
57.95
45.84
17.72
43.07
1.53
4.18
36.75
57.12
43.58
17.61
42.13
0.75
0.92
33.05
55.71
44.63
17.17
41.47

Table 3: Time (in seconds) of searching pattern in 128 KiB text

11

Set

dna

english

m
Algorithm

BMH
BNDM
KMP
Naive
RK
SO
StringUtils
BMH
BNDM
KMP
Naive
RK
SO
StringUtils

proteins BMH

sources

BNDM
KMP
Naive
RK
SO
StringUtils
BMH
BNDM
KMP
Naive
RK
SO
StringUtils

4

8

12

16

24

32

64

128

256

512

11.68
26.78
47.95
62.32
43.27
17.02
23.21
8.20
15.65
34.39
56.55
43.21
17.01
22.43
8.08
14.91
34.36
56.50
43.21
17.01
22.46
7.74
13.80
33.32
56.17
43.21
17.01
22.42

8.63
14.64
47.36
62.50
43.21
17.01
22.37
5.69
9.72
35.37
57.06
43.21
17.01
22.37
5.68
9.56
34.13
56.47
43.21
17.01
22.40
5.20
8.57
32.69
55.92
43.21
17.01
22.37

8.44
11.24
47.52
62.51
43.21
17.01
22.37
4.78
7.36
34.92
56.84
43.21
17.01
22.37
4.65
7.40
34.72
56.67
43.21
17.01
22.38
4.33
6.70
32.44
55.95
43.21
17.01
22.37

8.76
9.49
47.47
62.29
43.21
17.01
22.37
4.29
6.50
33.53
56.24
43.21
17.01
22.37
4.21
6.59
34.70
56.63
43.21
17.01
22.40
3.93
5.73
33.25
56.20
43.21
17.01
22.37

8.43
7.28
47.69
62.47
43.21
17.01
22.36
3.94
5.26
33.96
56.31
43.21
17.01
22.36
3.80
5.23
33.15
56.28
43.21
17.01
22.37
3.51
4.72
33.68
56.42
43.21
17.01
22.36

6.67
6.30
43.61
60.55
43.21
17.01
22.36
3.61
4.61
34.02
56.37
43.21
17.01
22.36
3.71
5.16
34.70
56.70
43.22
17.01
22.40
3.23
4.20
32.79
55.94
43.21
17.01
22.36

9.73
4.45
47.41
62.61
43.22
17.02
45.68
3.34
3.62
34.12
56.36
43.22
17.02
45.68
3.30
4.20
35.63
57.03
43.22
17.02
45.68
2.86
3.33
33.07
56.01
43.22
17.02
45.68

9.53
3.48
49.22
62.26
43.24
17.03
47.23
3.04
3.03
34.98
56.73
43.24
17.03
47.23
3.25
4.42
34.74
56.89
43.24
17.03
47.23
2.64
2.91
32.60
56.00
43.24
17.03
47.23

7.95
2.97
48.62
62.47
43.27
17.06
50.33
2.91
2.76
34.15
56.32
43.27
17.06
50.33
3.23
2.76
35.07
57.20
43.27
17.06
50.33
2.54
2.66
32.85
55.91
43.27
17.06
50.33

9.55
2.96
47.65
61.99
43.33
17.06
56.50
2.83
2.75
35.42
56.74
43.33
17.06
56.50
3.21
5.78
36.12
58.42
43.34
17.07
56.51
2.53
2.68
33.59
56.07
43.33
17.06
56.50

Table 4: Gas usage (in millions) of searching pattern in 128 KiB text

12

