2
2
0
2

r
p
A
2
1

]

R
C
.
s
c
[

1
v
4
8
7
5
0
.
4
0
2
2
:
v
i
X
r
a

A Note on the Blockchain Trilemma for
Decentralized Identity: Learning from
Experiments with Hyperledger Indy

Paul Dunphy

OneSpan, Cambridge, UK
paul.dunphy@onespan.com

Abstract. The challenge to establish and verify human identity over
the Internet in a secure and privacy-respecting way is long-standing. In
this paper, we explore the blockchain trilemma of scalability, security,
and decentralization in the context of the Trust Registry: a root of trust
for a decentralized identity scheme that enables read and write access
to shared records and is tamper-resistant. We make a case study of Hy-
perledger Indy – an open-source technology bespoke for decentralized
identity – and conduct two empirical experiments to measure the la-
tency of more than 45,000 transactions in the naturalistic environment
of Amazon Web Services. We conclude that issues of Trust Registry scal-
ability have multiple facets. While Hyperledger Indy captures data useful
to underpin a decentralized identity scheme, the knock-on eﬀect of its
scalability limitations may indeed place constraints on properties of se-
curity and decentralization. The current credential veriﬁcation process
relies on transaction processing by a ledger with transaction processing
bottlenecks, which may constrain the ideal of non-repudiation.

Keywords: Self-Soverign Identity · Scalability · Decentralized Identity
· Security · Blockchain · Digital Identity

1

Introduction

The challenge to eﬃciently establish and verify human identity over the Internet
is long-standing because the Internet does not innately have a way to know who
and what you are connecting to [9]. Over time, while protocols such as TLS
combined with trust anchored in web browsers became a ubiquitous approach
to verify machine identity, there has been little consensus on how to digitally
transact using a human identity that is ﬂexible, secure, and respects privacy. For
online services subject to anti-money laundering regulation, costs of verifying the
identity of new customers in a process known as KYC (know your customer ) are
estimated at £500m per year on average for a large ﬁnancial institution; there are
also time delays to establish an identity (a mean of 26 days) [52], and ﬁnally, user
abandonment rates for identity establishment range between 65 – 95% [2]. The
landscape of tight (and changing) regulation coupled with inadequate identity
technology incentivizes online services to establish and verify identity in invasive

 
 
 
 
 
 
2

Paul Dunphy

ways to users’ privacy. Historical data breaches have surfaced unique identiﬁers
from national identity schemes [35] and passports [13]; along with leaked personal
information generally [16]. Furthermore, identity veriﬁcation material has also
been breached, such as images of passports [58], national IDs [8], and educational
credentials [35].

Recently, there is a renewed interest to realize better methods of digital iden-
tity from national governments [53], economic unions [22], and ﬁnancial regula-
tors [25].Decentralized Identity (also known as Self-Sovereign identity (SSI) [46])
is one candidate approach to digital identity that is gaining traction. Decentral-
ized Identity is user centric [5] and is often deﬁned by ten principles [3] that stand
as a reinforcement to user-centric principles of privacy. Candidate schemes of this
type have already been proposed [20, 39, 40], and are distinguished by reliance
on a Trust Registry [42] - a root of trust for a decentralized identity scheme that
provides tamper-resistant shared records that can be read from and securely
written to by participants of the scheme.

The Trust Registry is a critical component of the vision for decentralized
identity. However, there is no consensus on the optimal Trust Registry technol-
ogy. Of over 80 publicly deﬁned Decentralized Identiﬁer (DID) methods (proto-
cols to interact with Trust Registries) more than 95% refer to algorithmic trust
registries [49] – a category that includes distributed ledgers and blockchains. Fur-
thermore, there is a lack of authoritative requirements to focus Trust Registry
design on a given use case which poses a challenge since identity is highly contex-
tual. The simultaneous lack of authoritative requirements juxtaposed to already
existing Trust Registry implementations creates a pressing need to (i) explore
and outline the characteristics of a successful Trust Registry for a given con-
text; (ii) retrospectively understand the assumptions and requirements already
embedded into Trust Registry implementations. The course of research is partic-
ularly pressing since researchers have highlighted the existence of a blockchain
trilemma [21], which takes that security, scalability, and decentralization are en-
tangled and subject to a trade-oﬀ in implementation. The blockchain trilemma
implies that Trust Registry implementations may not transfer to use cases with
diﬀerent expectations of security, decentralization, and scalability. As one ex-
ample of the mismatch that can occur in the context of payments, research
has already shown that the design of Bitcoin cannot securely support in-person
payments in a typical mode of operation [36].

The contributions of this paper are the following:

– We propose Trust Registry design principles in light of the use case of know
your customer (KYC): a regulated process of identity establishment and
veriﬁcation that is governed by anti-money laundering laws. In doing so, we
surface context-speciﬁc design decisions relevant to the blockchain trilemma
of security, scalability, and decentralization [21].

– We take Hyperledger Indy [31] as a case study to explore how Trust Registry
implementation choices might impact assumptions of scalability, security,
and decentralization. Indy’s consensus method,Indy Plenum [32], is ”special-
purposed for use in an identity system”. We conducted two measurement

Title Suppressed Due to Excessive Length

3

experiments where we measured the latency of more than 45,000 transactions
in the naturalistic deployment environment of Amazon Web Services.[]We
found that a more powerful client speciﬁcation can reduce the latency of
read requests. A larger network of Indy nodes leads to reduced capability
to clear transaction backlogs. The storage of credential transparency and
revocation mechanisms on the ledger and the need for all parties (including
end-user client software) to read the ledger itself may impact its suitability
for medium-sized federations and a sizable user group.

– We note that one implicit design goal of Hyperledger Indy may be the se-
curity property of non-repudiation. However, non-repudiation is a security
property that is diﬃcult to achieve in a system deployment. We discuss the
implications for Trust Registry design.

2 Related Work

2.1 User-centricity

The ambition for users to exercise greater control and privacy over their per-
sonal information online extends more than a decade into the past. Establishing
a prospective user/customer identity and verifying the associated evidence can
be challenging, particularly where this process occurs over the Internet. It is chal-
lenging to design standardized digital identity services and is likely impossible to
build one universal scheme [9]. Though, Microsoft made one high-proﬁle attempt
to create an identity meta-system for the Internet [10] but withdrew support for
it in 2011. However, there remains a pressing need for new and appropriately
designed digital identity technologies [54], especially for services where veriﬁed
identity information is essential to deliver a service. Bhargav-Spantzel [5] de-
scribe an agenda for user-centricity and discuss the speciﬁc aspects of enhanced
control in the context of identity. The term decentralized identity is not a tech-
nical term but appears to have a similar meaning to user-centricity. The term
is present in a paper from 2007 by Weitzner [57] to capture the potential of
OpenID to underpin URI-based identity, which he argues has the potential to
provide the missing identity layer on the Internet. Fett et al. [24] argued that
OpenID was not suﬃciently decentralized nor privacy-respecting and, in the de-
sign of SPRESSO, proposed a single-sign-on scheme that leverages existing email
addresses and ensures that a malicious identity provider is unable to track the
relying parties where a user signs-on.

2.2 Know Your Customer (KYC)

Global anti-money laundering (AML) regulations cover how supervised orga-
nizations (e.g., ﬁnancial institutions) must establish and verify the identity of
customers. The speciﬁc measures fall under the umbrella of customer-due dili-
gence, or more colloquially as know-your-customer (KYC). The Financial Action
Task Force (FATF) is an organization convened by the G7 that periodically out-
lines principles to guide the design of KYC processes to inﬂuence legislation in

4

Paul Dunphy

member countries [25]. Since the terrorist attacks on the United States in 2001,
FATF has set a more aggressive global stance towards money laundering activ-
ities, resulting in stricter identity establishment and veriﬁcation requirements.
The KYC process is a point of tension between prospective customers and ﬁ-
nancial organizations. Institutions are subject to regulatory ﬁnes speciﬁc to their
performance conducting KYC; for example, Deutsche Bank was ﬁned £163 mil-
lion in 2017 by a regulator in the UK [26]. The KYC process itself is increasingly
expensive to maintain, with some estimates that the largest institutions spent
$150 million on KYC in 2017, with an average of 26 days needed on average to
complete one process [52].

2.3 Blockchain-based Identity

An identity can be thought of as a set of attributes associated with an entity [1]
that apply to a given context. Research has started to explore the merits of using
blockchains and distributed ledgers in identity schemes [19, 20]. Speciﬁc scheme
designs have used smart contracts to underpin cost-sharing schemes between
identity providers and relying parties. Biryukov et al. [6] present a scheme lever-
aging smart contracts on the Ethereum blockchain. They modeled an onboarded
user through a smart contract that securely stored a cryptographic accumula-
tor. In combination with a witness, the user can evidence that their enrolment
with an online service is active and not revoked. Parra-Moyano and Ross also
describe the design of a smart contract-based solution [44] that features a cen-
tralized database to store documentation provided by the end-user additionally.
One limitation of their scheme is that it exhibits an over-reliance on a ﬁnancial
regulator’s role to oversee the system’s function. The part of smart contracts is
primarily to capture payment between the veriﬁer and the entity that establishes
the user’s identity.

Sonnino et al. [50] describe the design of a smart contract and identity cre-
dential framework that allows users to acquire and selectively disclose multi-
show cryptographic credentials. They propose that four attributes of a creden-
tial framework are essential: distributed issuance, non-interactivity; blindness;
unlinkability.

2.4 Blockchain Scalability

Scalability is a prominent theme in research on distributed ledger technology.
Early work has focused on Bitcoin and how the time for blocks to settle cre-
ates risks to merchants of accepting Bitcoin faster payments [36]. The scala-
bility properties of the Bitcoin blockchain eﬀectively rendered this use-case of
in-person payments implausible. Croman et al. [15] provide scalability measures
of Bitcoin and argue that parameter tuning of the network (e.g., block size) can-
not overcome the fundamental scalability bottlenecks of Bitcoin in the network
plane, e.g., that nodes must receive every transaction and perform validation
locally before re-transmission to the peer-to-peer network.

Title Suppressed Due to Excessive Length

5

An alternative route to scale blockchains is to leverage byzantine fault-
tolerant protocols with coalitions of trusted parties. Vukoli´c [55] highlights the
challenge to design systems that use byzantine fault tolerance as a consensus
method and suggests how it can scale better through techniques that allow par-
allel computation of consensus.

Gorenﬂo et al. report on ﬁne-tuning that can be performed on Hyperledger
Fabric that can increase its throughput to 20,000 transactions per second [29].
Notably, this was achieved without adjusting the Kafka-based consensus method
but by adjustments to data handling in the transaction processing lifecycle.

3 Searching for a Trust Registry

We enumerate pillars of the design space that have a signiﬁcant inﬂuence on
the feasibility of a use case and are also given additional complextionby the use
case of KYC (see Section 2.2) and are subject to the blockchain trilemma of
security, scalability, and decentralization. In doing so, we provide an extensible
structure for thinking about context-speciﬁc Trust Registry design, enumerate
constraints that can impact ideas for new solutions, and stimulate reﬂection on
existing implementations.

3.1 Design Space

The elements listed below are not necessarily mutually exclusive, but their cat-
egorization highlights the structure of the design space.

Determine Stability of State A Trust Registry with an actionable state can
support decisive actions in the real world and provide evidence to resolve dis-
putes. Public-permissionless blockchains (e.g., Bitcoin [41], Ethereum [59]) rely
upon Nakamoto consensus, which provides probabilistic ﬁnality on the ledger
state. However, while probabilistic ﬁnality appears acceptable as a way to de-
termine ownership of Bitcoin, it may not be suﬃcient in KYC if a service must
base an identity veriﬁcation decision on the shared records at a speciﬁc time t,
only for that state to be usurped by a latent update from t − 1 (e.g., a revoca-
tion). Online services subject to KYC are likely to retain an adversarial position
towards each other since they are competitive organizations in the same market,
which means that ﬁnality of state may be desirable to justify an action or to
resolve a dispute. However, while the judicious choice of consensus method can
assure real-time ledger consistency, it can also introduce scalability limits on a
network.

Deﬁne and Ensure Ongoing Fairness The property of decentralization is
one way to evidence an identity network’s fairness. However, while a Trust Reg-
istry can be decentralized by design, it may be less decentralized in practice.
One inherent challenge facing an identity network that features the roles of an

6

Paul Dunphy

identity provider (IdP) and a relying party (Rp) is to account for the asymme-
try of eﬀort. The IdP invests time to bootstrap an identity for the ﬁrst time (a
process widely associated with high costs in the ﬁnancial sector [52]), and the
Rp incurs a lesser cost to verify identity. Therefore designers can consider miti-
gating free riders [11] – where the relying party generally avoids taking the role
of IdP in a transaction. Prior work aims to address cost imbalances by leverag-
ing cryptocurrency as compensation for the identity provider [6, 44]. However,
this is just one speciﬁc problem of fairness. Suppose a subset of stakeholders are
routinely out-voted in consensus protocols by coalitions of organizations with
shared behavior. Technical mechanisms to enforce greater decentralization can
constrain scalability. Therefore, governance frameworks are an essential means
to ensure ongoing fairness (e.g., Sovrin Foundation [28]) and to deﬁne penalties
for non-compliance.

Choose an Adversarial Stance Any Trust Registry must protect itself against
realistic adversarial scenarios to maintain trust in the system but must avoid
over-design of security lest there be a reduction in decentralization and scala-
bility. Attacks can take many forms, such as deliberately sending erroneous or
latent updates to the Trust Registry or involuntary attacks through client soft-
ware bugs. Designers must consider how conﬁdence in the Trust Registry can
persist in the face of a security incident – since security incidents are inevitable.
If the Trust Registry should remain functional in the face of a threat to its in-
tegrity, then Byzantine fault tolerance [37] is a technique of reaching consensus
on the state in the presence of faults. Conﬁdentiality threats could arise through
an honest-but-curious attacker passively searching for insights about other or-
ganizations or end-users. Threats to the availability of the Trust Registry might
lead to the creation of an access control mechanism, but this could limit appli-
cations that depend upon end-users accessing the ledger state.

Provide Privacy for Organizations A decentralized identity scheme in the
ﬁnancial sector is likely composed of parties in direct competition in a market.
Therefore, a Trust Registry should support conﬁdentiality by default and pri-
vacy mechanisms to enable minimal disclosure [9]. An organization may have
to disclose information to several entities in a decentralized identity network,
for example, end-users through GDPR laws, an IdP or Rp to resolve a dispute,
or even to a reputable auditor or regulator of the system to evidence conduct.
Furthermore, we should consider how privileged insights can be derived from
the data structures on the Trust Registry or information ﬂows received in peer-
to-peer messages. Any unanticipated disclosures can form a reason to abandon
an identity network. Therefore, techniques such as ring signatures [12] could be
helpful to authenticate messages from a trusted group without precisely knowing
the signer, or zero-knowledge proofs [23] that can provide unlinkable disclosures
that do not leak information.

Title Suppressed Due to Excessive Length

7

Who Audits, and How? Prior work has assumed that regulators require
transparency of the data generated by decentralized identity schemes in the
ﬁnancial sector to mitigate risks to the system overall [44]. However, while reg-
ulators of the ﬁnancial industry may require approval of a speciﬁc decentralized
identity scheme (as implied by the FATF [25]), they may not need a live global
view of Trust Registry data to oversee identity schemes. Other pre-existing regu-
lations might be more relevant than new regulatory actions or technical vantage
points. For example, in the UK, ﬁnancial institutions already provide trans-
parency on matters of fraud to regulators through the submission of an Annual
Financial Crime Report [27]; this report comprises fraud statistics and an enu-
meration of risks to the institution and the controls in place to mitigate those
risks. On the speciﬁc topic of new identity schemes, the UK government envi-
sions a back-seat role to facilitate the creation of a national trust framework [53]
to set the overall scope and ground rules of new schemes. Therefore, designers
may wish to weigh the impact of assigning new roles and technical oversight to
regulators in a new system where the political, cultural, or practical precedent
does not exist.

Anticipate Transaction Patterns There is an implicit yet prevailing assump-
tion that a decentralized identity scheme’s scalability is lower than that needed
for ﬁnancial transactions. However, underestimating the transaction activity of
a scheme will likely create new constraints on security and decentralization. One
helpful heuristic to evolve a model of usage is the phenomenon of The Big 4,
which depicts a common market scenario where four organizations obtain a dom-
inant position in an industry. Taking the banking example in the UK context,
there are 65 million checking accounts in total, and the big 4 possess 77% of
those accounts. [14]. This model’s simple extension and analysis can highlight
various requirements, such as the need to bootstrap a decentralized identity
scheme with 50 million credentials on day one. Furthermore, the numbers invite
us to envision how the maintenance of those 50 million credentials also creates a
transaction load on the network (keeping in mind that the operations of reading
and writing each generate one transaction to be processed). Finally, there are
also diﬀerent implications depending on who can create transactions; for exam-
ple, is this privilege restricted to online services themselves, or can end-users
interact peer-to-peer with the Trust Registry too?

4 Case Study: Hyperledger Indy

Hyperledger Indy [31] (herein Indy) is one candidate to underpin a Trust Reg-
istry. Indy is interesting for several reasons. Firstly, Indy is purpose-built for
decentralized identity and includes a consensus protocol known as Indy Plenum,
purportedly designed for identity applications and based upon a redundant
Byzantine fault-tolerant state machine replication protocol [45]. Secondly, it un-
derpins a public distributed ledger deployment by the Sovrin foundation [18].
Thirdly, Indy is open-source. Table 1 illustrates a qualitative evaluation of Indy

8

Paul Dunphy

Fig. 1. Overview of the key actors and operations in a Hyperledger Indy workﬂow
and the key steps in the credential lifecycle. In this example, Service A is the identity
provider, Service B is a relying party, and Service C is another stakeholder within the
circle of trust that is not involved in the interaction with Bob (the user) but has a role
in responding to read requests for ledger data.

in relation to Trust Registry design parameters. Figure 1 illustrates an abstrac-
tion of the Hyperledger Indy identity lifecycle. As with other decentralized iden-
tity scenarios, the three protagonists are the identity provider (Service A), relying
party (Service B), and end-user (Bob). These three entities can also be equiva-
lently referred to as issuer, veriﬁer, holder [46]). The operations in the ﬁgure are
implemented in the form of multiple SDK calls illustrated in Table 2.

Decentralized Identiﬁers (DIDs) [51] are an emerging type of identiﬁer that
can be ”decoupled from centralized registries, identity providers, and certiﬁcate
authorities”. DIDs are implemented in Indy though the term ”NYM” is pre-
dominantly used throughout the SDK since presumably it pre-dates DID. Many
decentralized identity interactions are likely to be entirely conﬁdential. However,
some may be bootstrapped using publicly advertised DIDs securely mapped to a
DID Document: the meta-data of a DID, e.g., public key, that is tamper-evident
and securely mapped by a Trust Registry.

An identity provider must establish the identity of a user according to the
norms of the domain (e.g., passport, driver’s license) and, at the end of the
process, issue the user with a credential : a cryptographic attestation that ex-
presses conﬁdence in the veracity of speciﬁc user attributes. A credential can be
thought of as a simple certiﬁcate conﬁgured to contain human attributes where

Title Suppressed Due to Excessive Length

9

Choose an Adversarial Stance

Principle
Determine Stability of State

Evaluation
Consensus method is Indy Plenum [32] which
achieves settlement ﬁnality at the end of each
round of consensus. History is not expected to
change.
Deﬁne and Ensure Ongoing Fairness One organization is likely to administer one
Indy node, and each node has one vote in the
consensus process. No inherent mechanism for
addressing cost imbalance.
Byzantine fault tolerance that assumes the
majority of network nodes are honest to con-
ﬁrm write transactions. By default, at least
two nodes should corroborate the content of a
read transaction. No access control.
No conﬁdential information is stored in the
ledger. Publicly declared Decentralized Iden-
tiﬁers (DIDs) and public keys are viewable
along with credential deﬁnitions and schemas.
Enumeration of issued credentials is not pos-
sible due to the use of cryptographic accumu-
lators [34].
No explicit approach to permit system audit.
Assumed process of self-assessment and self-
disclosure.
No explicit transaction processing goals avail-
able relative to a use case.

Provide Privacy for Organizations

Anticipate Transaction Patterns

Who Audits, and How?

Table 1. Evaluation of Hyperledger Indy according to pillars of the design space.

the creator of the attestations can be authenticaticated. The implementation
of credentials is realized through IBM’s Idemix [33] technology and represented
in a format that is currently standardized with the W3C [56]. The credential
operations themselves require several on-ledger data items. The type meta-data
for a credential is stored on the Indy ledger as a credential deﬁnition (referenced
as CRED DEF); this is a unique identiﬁer that references the data ﬁelds that
credentials of this type should contain, also a pointer to the credential revoca-
tion registry (REVOC REG), which references the cryptographic accumulator
for credential issuance transparency and revocation checking [34]. An identity
provider issues a new credential through the call (REVOC ADD) is made to the
ledger, and when a credential is revoked, the function (REVOC DEL) is called.
Each revocation registry contains a pointer to the revocation registry deﬁnition
(REVOC DEF).

A relying party provides an online service to end-users and is capable of
verifying the identity of the user through veriﬁable data such as a credential. To
receive a service from the relying party, the end-user must build an identity proof
using software on a personal device. An identity proof could be as simple as a

10

Paul Dunphy

buildNymRequest(...)

Indy SDK request (node.js)
buildGetNymRequest(...)
buildGetCredDefRequest(...)
buildRevocRegDefRequest(...)
buildGetRevocRegRequest(...)

(1) (2) (3) (4) (5) (6) (7)
Shorthand
READ_DID
-
-
- U -
U -
READ_CRED_DEF
-
- U - U RP -
READ_REVOC_DEF
-
- U RP -
-
READ_REVOC_REG
IdP
IdP U RP -
-
READ_REVOC_DELTA buildGetRevocRegDeltaRequest(...)
-
- U RP -
-
WRITE_DID
-
-
-
-
WRITE_REVOC_ADD buildRevocRegEntryRequest(...)
-
-
-
WRITE_REVOC_DEL buildRevocRegEntryRequest(...)
IdP
-
-
Table 2. The mapping between steps of the model in Figure 1 and the Hyperledger
Indy-speciﬁc operations that are needed to accomplish those steps. Note that one con-
ceptually simple operation in the model can require multiple operations with the ledger
to be issued in Hyperledger Indy. The numbers along the horizontal axis of the table
correspond to: (1) Establish Identity; (2) Credential Oﬀer; (3) Credential & Trans-
parency; (4) Identity Proof; (5) Verify Proof; (6) Report Lost Credential; (7) Revoke
Credential.

-
IdP -
-

-
-
-
-
-
-

-
-
-

-

presentation of an eponymous credential along with proof of ownership of that
credential (e.g., through a link secret [30]), or something more complex such as
a zero-knowledge proof [23].

Finally, when building a proof, a user must read the ledger to calculate the
value of the cryptographic accumulator up to a given point in time to prove that
their credential was valid in a given time window (REVOC DELTA).

5 Experiments

To learn more about the blockchain trilemma in the context of Hyperledger Indy,
we designed experiments to capture empirical data to evidence the scalability
of the diﬀerent operations of the Hyperledger Indy distributed ledger and quan-
titatively inform our exploration of the blockchain trilemma in decentralized
identity.

5.1 Methodology

The quantitative approach of contrasting transaction processing under diﬀerent
scenarios is a common way to illustrate the performance of blockchain architec-
tures and inform discussions about system acceptance [17]. Therefore, we wanted
to mirror this approach and investigate transaction processing performance in
an optimal case for Hyperledger Indy and in more challenging conditions under
ambient transaction loads.

We conduct two experiments: (i) Baseline Experiment; (ii) Transaction Load
Experiment. The independent variable across both experiments is the number
of ledger nodes participating in a Hyperledger Indy network: Ledger One has

Title Suppressed Due to Excessive Length

11

four nodes; Ledger Two has 11 nodes. The dependent variable across both ex-
periments is transaction latency, which captures the return trip of a transaction
between sender and receiver. A read request is a message to a ledger node to
lookup the value of a data item recorded in the ledger. We refer to the transac-
tion latency of read requests as read latency. A write request is a digitally signed
message indicating a change to the state of a data item on the ledger. We refer
to the transaction latency of write requests as write latency.

Transaction latency measurements are diﬃcult to generalize with conﬁdence.
However, if experiments are transparently described and leverage widely avail-
able technology, there can be much to learn about speciﬁc scenarios of deploy-
ment, e.g. best and worst cases.

5.2 Experiment Architecture

We used the tools and infrastructure provided by Amazon Web Services (AWS)
to conduct our experiments. We created three virtual machine (VM) templates:
Ledger Node, Measurement Client, and the Load Generator.

Each Hyperledger Indy ledger comprises multiple Ledger Node instances run-
ning the following software: Ubuntu 16.04 6 operating system; Node.js 12.13.0;
Indy-sdk 1.11.1-dev-1318; Libzmq 4.1.4-7ubuntu0.11. Each VM is a t2.xlarge
Amazon VM.

The Measurement Client initiates and measures the read and write requests
under measurement. When the measurement node sends a request, the node
waits for a response from an appropriate number of ledger nodes and records
the latency.

The Load Generator controls a burst of ambient transactions directed to-
wards ledger nodes. The Load Generator (only used in Experiment Two) has a
target for the rate of transactions to be sent (e.g., 20 transactions per second)
and sends requests either faster or slower to maintain that rate, and does not
process responses from a Ledger Node.

5.3 Experiment 1: Baseline Experiment

Method The experiment has a 2X2 design (Ledger X VM). We included two
additional independent variables in this experiment, reﬂecting diﬀerent mea-
surement client speciﬁcations: t2.micro and t2.medium (in AWS parlance). We
conﬁgured the Measurement Client to send 1000 transactions for each of the
eight requests in Table 2 which means we measured 32,000 transactions in total.

Results Table 3 provides an overview of the transaction latency results. To de-
termine any overall eﬀect of a speciﬁc ledger on latency, we conducted a Kruskal-
Wallis test, a non-parametric test, to determine whether samples originate from

1 We carried out this work in Autumn 2020, a time when these software versions were

the most current.

12

Paul Dunphy

Ledger One

t2.mic
435 (9)
450 (9)
438 (9)
435 (9)
47 (16)
92 (15)
98 (11)

Ledger Two
t2.mic t2.med Wilcoxon
t2.med Wilcoxon
Operation
READ_DID
406 (7) Z=38.715 439 (8) 410 (9) Z=38.639
READ_CLAIM_DEF
419 (8) Z=38.637 453 (9) 423 (10) Z=38.630
READ_REVOC_DEF
410 (8) Z=38.556 441 (9) 416 (8) Z=38.661
READ_REVOC_REG
410 (7) Z=38.641 440 (9) 413 (8) Z=38.553
READ_REVOC_DELTA
27 (10) Z=31.248 75 (22) 55 (17) Z=24.795
WRITE_DID
95 (14) Z=-7.332 162 (9) 162 (9) Z=0.564
WRITE_REVOC_ADD
99 (11) Z=-2.535 166 (12) 166 (11) Z=0.324
WRITE_REVOC_DEL
993 (11) 1000 (11) Z=-16.095 994 (7) 1001 (9) Z=-24.3
Table 3. Experiment One: the speciﬁcation of the measurement client has a signiﬁ-
cant eﬀect on the latency of read requests, however this pattern is not noticeable for
write requests. Each cell is the median (and interquartile range) of 1000 requests. All
Wilcoxon tests have statistical signiﬁcance at p < 0.003125, where p is adjusted by
Bonferroni correction. Shaded cells are not statistically signiﬁcant.

the same distribution. We found that latency is signiﬁcantly lower on ledger
one than ledger two through pairwise comparisons of all latencies recorded from
a speciﬁc measurement client: t2.Micro (k = 234.67p < 0.025) and also the
t2.medium (k = 317.06; p < 0.025). In both tests, we adjusted the critical value
of p to 0.025 using Bonferroni correction.

Read Requests: Figure 2 illustrates the read latencies that we recorded.
Generally, we observed lower read latency where the measurement client had the
more powerful speciﬁcation, i.e., a t2.medium rather than a t2.micro.

For ledger one, we found that the median read latency (and interquartile
range) is 436 (16) using the t2.micro and 409 (14) using the t2.medium. In-
deed, we noted a signiﬁcant diﬀerence between the read latencies recorded by
the t2.medium compared to the t2.micro. However, the magnitude of these dif-
ferences is negligible (see Figure 2). Therefore, increasing the speciﬁcation of the
Measurement Client from t2.micro to t2.medium can reduce the latency of read
requests by around 7%. We noted a similar trend in the observation of ledger
two. The median read latency is 440 (16) from the t2.micro and 413 (13) from
the t2.medium. Read requests thus face a performance bottleneck from local
computation constraints and ambient network conditions. Note that we did not
include the process of message signing by the client in our measurements.

The patterns across all read requests are similar, except for the operation
READ REVOC DELTA. This speciﬁc operation yielded smaller latencies than
the other read transactions. Furthermore, we noted a strong positive correlation
between the transaction number in the experiment and the latency of the opera-
tion. The correlation is statistically signiﬁcant on Ledger One with the t2.micro
(r = 0.65 p < 0.01); and t2.medium (r = 0.71 p < 0.01); also for Ledger Two
with the t2.micro (r = 0.62 p < 0.01) and the t2.medium (r = 0.75 p < 0.01).
The underlying cause of this pattern is that we add one new credential to a
credential accumulator for each experiment round. Therefore the correlation re-
ﬂects a round-by-round increase in computation cost. In other words, the more

Title Suppressed Due to Excessive Length

13

Fig. 2. Experiment One: the speciﬁcation of the measurement client impacts read
latency. The graphs illustrate the latency of all read operations (excluding READ
REVOC DELTA) on (a) Ledger One & (b): Ledger Two. The latency of the opera-
tion READ REVOC DELTA increases as the number of credentials in an accumulator
increases. The observation on (c) Ledger One; and (d) Ledger Two.

credentials registered on the ledger in an accumulator, the more latency to op-
erate on the accumulator. The latency increases by more than 100% from when
the credential accumulator contains a few items to when it is almost full (1000
items).

Write Requests: Figure 3 illustrates the distribution of write latencies.
For Ledger One, the median (and interquartile range) of all write requests is
102 (895) on the t2.micro and 104 (900) on the t2.medium. On Ledger Two,
the median write latency is 170 (828) on the t2.micro, and 169 (835) on the
t2.medium.

Irrespective of the speciﬁc ledger and the speciﬁcation of the measurement
client, we measured the operation WRITE REVOC DEL in a consistently nar-
row range of 993-1001ms. However, the remaining requests: WRITE DID; and
WRITE REVOC ADD, demonstrate increased variation, particularly on Ledger

14

Paul Dunphy

Fig. 3. Experiment One: the speciﬁcation of the Measurement Client has little impact
on write latency, however the number of ledger nodes exhibits a greater impact. Write
latencies (excluding WRITE REVOC DEL) on (a) Ledger One; (b) Ledger Two.

Two. The speciﬁcation of the measurement client had a negligible impact on
write latency. Nevertheless, as illustrated in Table 3, Wilcoxon Signed-Rank
Test yielded signiﬁcant diﬀerences between measurements taken on a t2.micro
and a t2.medium in three out of six cases. These intermittent eﬀects may be
due to a particular dependence of write requests on network conditions subject
to ﬂuctuations. A visual inspection of Figure 3 illustrates minor diﬀerences in
the medians between the t2.micro and the t2.medium, so we consider that such
signiﬁcant diﬀerences may not be important.

5.4 Experiment Two: Transaction Load Experiment

Method The experiment is a 2X3 design where the independent variables are
ledger (Ledger One, Ledger Two) and transaction load (low, medium, high).
As before, the dependent variable is transaction latency. Our learnings from
Experiment One led us to continue our work using an Amazon EC2 t2.medium
machine as the Measurement Client. We select the transaction load parameters
of low-medium-high informed by our previous experiences with the stability of
Hyperledger Indy: 50-90-100tps for Ledger One and 10-40-50tps for Ledger Two.
The Measurement Client sequentially issues 300 transactions as per the re-
quests from Table 2. The Measurement Client sends fewer transactions in the
second experiment due to the long-expected runtime of an experiment in this
context of the same scale. Therefore we measure the latency of 14,400 transac-
tions in total. We conﬁgured the Load Generator to send transactions to the
ledger nodes as quickly as the Hyperledger Indy SDK allows. But we also set a
maximum backlog of 1500 un-responded transactions to trigger a pause in the
actions of the Load Generator. Since further sending of transactions at this point
may trigger a ledger crash.

Title Suppressed Due to Excessive Length

15

Ledger One
90tps

Ledger Two

40tps

50tps

100tps

50tps
10tps
Operation
READ_DID
421(29) 473(244)
414(10) 684(457) 1127(19599) 417(11)
READ_CRED_DEF
441(16) 670(557) 1181(19967) 437(11)
492(40)
471(27)
READ_REVOC_DEF
416(16) 455(105) 1142(19955) 418(11) 430(155) 540(127)
READ_REVOC_REG
421 (53) 941 (568) 1167(19465) 427(22)
442(45)
READ_REVOC_DELTA
88(63) 287(397)
72 (20)
WRITE_DID
3375 (415) 292(45) 1554(591) 1439(592)
1558(985) 3189(888)
WRITE_REVOC_ADD 1244(414) 3180(603)
4233(477) 892(147) 1170(378) 1396(550)
WRITE_REVOC_DEL 1145(294) 4086(725) 5723(1619) 1030(21) 1187(249) 1392(655)
Table 4. Experiment Two: an increasing ambient transaction load on the ledger nodes
aﬀects all operations to diﬀerent degrees. Each cell is the median (and interquartile
range) of 300 operations.

53(22) 438(330) 756(19600)

432(58)

Results Table 4 illustrates the results of the second experiment. The median
latency (and interquartile range) of Ledger One under a 50tps load is 442 (687);
90tps is 965 (2683), and 100tps is 3603 (6532). For Ledger Two, the median
latency under a 10tps load is 424 (303), a 40tps load is 489 (703), and a 50tps
load is 589 (843).

Both ledgers experienced an experimental condition with a transaction load
of 50tps. Considering this speciﬁc case, we found that latency was signiﬁcantly
lower on Ledger One than on Ledger Two (k = 237p < 0.01).

Read Requests: The overall median read latency (and interquartile range)
for Ledger One at 50tps is 416 (33), at 90tps is 557 (484) and at 100tps is 1123
(19890). For Ledger Two, the median read latency at 10tps is 420 (23), at 40tps
is 426.5 (68) and at 50tps is 474.50 (133).

The read latency on Ledger One follows a pattern where under the heaviest
transaction load, the latency increased by just under a factor of 3 compared to
the smallest transaction load. READ REVOC DELTA appears to be an outlier
to this pattern since the median read latency under a 100tps load (756ms) was
more than 15 times the median read latency recorded at 50tps (54ms). Though,
100 transactions per second cannot be considered a stable level of traﬃc for
this ledger, as evidenced by the interquartile range for all read requests reaching
above 19 seconds.

We observe less elasticity in the latency measurements for Ledger Two as the
transaction load increases. There is a notable increase in the interquartile range
as the transaction load increases.

Write Requests: Each write operation exhibits similar variation under
varying transaction loads on the network, though the speciﬁc ledger clear plays
a role too.

On Ledger One, write latency increases by more than 100% between a trans-
action load of 50tps and 100tps. The latency of the revocation instruction in-
creases by nearly 5x, and credential creation by 3.4x. On ledger two, the write
latency can increase by 7-8 times at 100tps compared to when the network ex-
periences 10tps. What is notable is that Ledger One shows a greater level of

16

Paul Dunphy

Fig. 4. Experiment Two: write latency for WRITE REVOC ADD. Graphs illustrate
the measurements across (a) Ledger One, and (b) Ledger Two. Latencies are gener-
ally lower on Ledger Two, however Ledger Two cannot remain stable under a similar
transaction load to Ledger One.

elasticity under a transaction load than Ledger Two. Figure 4 illustrates the
write latency for one operation that results in the addition of a credential to the
cryptographic accumulator (W RIT E REV OC ADD).

6 Limitations

Conducting trustworthy measurement studies is challenging, as well described
by Ousterhout [43]. While we did our best to mitigate biases in the results of our
experiments, there are inevitably limitations that should be taken into account
before generalizing or transferring the results to other domains. Our ambition
was not to generate an authoritative measure for Hyperledger Indy transaction
processing but rather to uncover and document concrete scalability challenges
in a software environment relevant to and replicable by others.

Firstly, we made measurements using code written in Node.js, and other pro-
gramming languages and language-speciﬁc dependencies might generate quali-
tatively diﬀerent results. Secondly, we can’t pinpoint the provenance of every
pattern that we uncovered. Still, Hyperledger Indy is open source, and a more
determined reader can investigate further given details in our experimental setup
in Section 5.2. Finally, Hyperledger Indy is not production-ready software, and
so it could be argued that our attention to scalability is somewhat unfair. Given
our research is about the blockchain trilemma, we felt that it was still help-
ful to illustrate the impact of diﬀerent conceptual design choices (security and
decentralization) on an empirical measure (scalability).

Title Suppressed Due to Excessive Length

17

7 Discussion

7.1 Increasing the Federation Size Decreases Transaction

Throughput and Increases Latency

Support for large federation sizes is an intuitive requirement to facilitate visions
of identity federations comprised of diverse identity providers and relying par-
ties. For example, BankID is a centralized Swedish identity network with ten
identity providers that was used 6 billion times by users in 2021 (200 times per
second) [4]. But similar aspirations face deployment challenges on Hyperledger
Indy. While a principle of one-organization-one-node evidences the democratic
intent of a decentralized identity scheme, i.e., one node has one vote in the ledger
consensus process, large federations of organizations would ultimately reduce the
transaction processing capability of the network. The bottleneck is due to the
byzantine fault tolerance in Indy’s consensus algorithm [32] since every node
must process all transactions.

In our ﬁrst experiment, we found that transaction read latency can be de-
creased by approximately 7% by increasing the speciﬁcation of the measurement
client. However, a similar strategy does little to aﬀect write latency. We found
In Experiment Two that a ledger with four nodes can sustain a more signiﬁcant
transaction load than a ledger with 11 nodes. This ’sustaining’ took the form of
ledger nodes processing transactions without the failure of the node itself. We
observed relatively low transaction latencies on Ledger Two, which is a conse-
quence of its reduced ability to function under ambient transaction load, and
the tendency for ledger nodes to fail rather than eﬀectively process a backlog of
transactions.

Therefore there might be a point of tension between those who envision
large and diverse identity networks, those who expect the structure of one-
organization-one-node, and those who advocate byzantine fault tolerance as a
consensus method.

7.2 Diverse Costs to Process Credential Accumulators

The case of Hyperledger Indy veriﬁable credentials (VCs) illustrates the diﬃculty
of making broad-brush conclusions about Trust Registry scalability. Table 3
shows how read operations for Decentralized Identiﬁers (DIDs) and other meta-
data can be viewed as homogeneous functions in terms of read latency. Except,
in the case of VCs, we noticed that the operation to read the accumulated state
of the revocation registry between two time periods was ten times faster than
the operation to read the revocation registry itself. Also, the write latency to
add a new credential to the accumulator is approximately ten times faster than
the operation to register the removal of a credential from the accumulator (i.e.,
to revoke).

Furthermore, the disturbance we could introduce to those latencies through
an ambient transaction load was notable. The write latency for the new credential
operation on Ledger One could be stretched by almost four times where the

18

Paul Dunphy

ledger is subject to the heaviest transaction load. In search of a similar pattern
on Ledger Two, we observe the credential creation request latency increase by
37% under the heaviest ambient transaction load. Considering the revocation
operation and the heaviest ambient transaction load, the latency can be stretched
by 80% on Ledger One and 27% on Ledger Two.

Conducting both experiments highlighted that notable computation was spent
to locally generate credential accumulators (before they are written to the ledger).
The Indy implementation of veriﬁable credentials features ﬁxed-size crypto-
graphic accumulators (set by parameter). Therefore, in practice, we must es-
timate the number of credentials that will be needed in advance of creating the
accumulator. If the estimate is too low, we must create and manage multiple
accumulators in parallel. On the other hand, if we choose to systematically over-
estimate the number of credentials that we need, the time to instantiate an Indy
credential accumulator increases exponentially with its size. For example, we
estimate that a cryptographic accumulator for 1 million credentials would take
more than two days to compute based on our experiences. We can thus imagine
the time and processes needed to accommodate the 50 million credentials that
we proposed as a rule of thumb in section (3.1).

Depending on the context, we may need additional techniques to represent
VCs on distributed ledgers like Indy in a privacy-friendly way or diﬀerent schemes
to support the public transparency and revocation of VCs. For example, Side-
trees [7]).

7.3 Designing for Non-repudiation

One interpretation of the design of Hyperledger Indy is that it aims to comprise
an authoritative reference point for decentralized identiﬁers (DIDs) and veriﬁable
credentials (VCs). The desire to provide authoritative statements about DID and
VC validity brings to mind Rivest’s proposal for a suicide bureau [47]: a network
that creates real-time positive or negative statements about certiﬁcate valid-
ity. However, there is one essential item of diﬀerence between Rivest’s concept
and the implementation of Hyperledger Indy: the existence of a ”high-speed reli-
able network”. Our experiments demonstrated conditions where the transaction
processing of Indy might encounter bottlenecks from a modest number of trans-
actions. The cost of this observation is to the property of non-repudiation, where
the signer of a message cannot dispute their own signature. However, technology
design can render aspirations of non-repudiation not meaningful in practice. For
example, PGP email encryption is often included (rightly or wrongly) in discus-
sions about identity; however, in practice, it does not provide non-repudiation
due to the slow propagation of revocation statements. Thus it can only give the
property of authentication [48]. Therefore it remains to be seen whether Indy
can underpin an identity network or an authentication network.

Table 4 illustrates how under the heaviest network traﬃc on our ledger with
the fewest nodes, the Interquartile range of one single read of the revocation
registry is approximately 19 seconds. One intuitive response to a potential back-
log of transactions is to cache reads of the ledger state and queue transactions

Title Suppressed Due to Excessive Length

19

together (e.g., the revocation registry can be updated locally and its value peri-
odically written to the ledger). Deciding the schedule for this caching is critical;
for example, if the revocation state is updated every 24 hours, an attacker may
have signiﬁcant time to abuse a compromised private key. Furthermore, suppose
the decentralized identity scheme functions through end-user interaction with a
mobile application or cloud storage. In that case, this can also provide plausible
reasons why the user is not in control of their private key.

One way to preserve non-repudiation is to re-consider the registration of VCs
on the ledger by, e.g., not issuing inﬁnite-term credentials that must be checked
for revocation at every usage and instead issue credentials that expire in the
short term. For example, the certiﬁcate Authority Let’s Encrypt [38] adopts a
short certiﬁcate lifespan (30 days) on the assumption it is more eﬃcient to re-
issue certiﬁcates at short time intervals than to issue longer-term credentials and
trust the CA revocation infrastructure.

Another countermeasure is re-imagining how identity providers and relying
parties process evidence in an identity network. In the absence of a network with
the properties of a suicide bureau [47] other, more latent methods of identity
veriﬁcation could become viable.

8 Conclusion

Decentralized identity holds promise as a new approach to digital identity that
can improve the privacy of end-users. We considered the challenge to design an
appropriate decentralized Trust Registry in the face of the challenge to gather
context-speciﬁc requirements, and the constraints brought by the blockchain
trilemma [21]. We conceptually explored the implications of the blockchain
trilemma in the identity context of know-your-customer (KYC) and collated
design principles that other researchers can refer to and extend.

In a case study of Hyperledger Indy, we empirically explored one corner of the
blockchain trilemma: scalability. We learned that judgments of scalability have
multiple facets and made practical observations such as the diﬃculty to accom-
modate decentralization through large identity federations, and the deployment
challenges facing the credentials-on-the-ledger model. Finally, we considered the
existence of an implicit security design goal of non-repudiation, where the signer
of a message cannot dispute their own signature. A property that is driven by the
potential of asymmetric cryptography but that is diﬃcult to achieve in a system
deployment. It is an open question whether non-repudiation can be achieved
through a technology with transaction processing limitations.

Our research highlights the challenge to design contextually useful Trust

Registry technology subject to the blockchain trilemma.

References

1. ISO/IEC 24760-1:2019: IT Security and Privacy — A framework for identity man-
agement — Part 1: Terminology and concepts. Standard, International Organiza-
tion for Standardization, 2019.

20

Paul Dunphy

2. Aite Group. Transforming the Digital Account-Opening and Onboarding Experi-

ence. Technical report, Aite Group, 2018.

3. Christopher Allen.

The Path

to

Self-Sovereign

Identity,

2016.

http://www.lifewithalacrity.com/2016/04/the-path-to-self-
soverereign-identity.html, Last accessed on 6th March 2022.

4. BankID. BankID, 2022.

https://www.bankid.com/en/privat/skaffa-

bankid. Accessed 22nd March 2022.

5. Abhilasha Bhargav-Spantzely, Jan Camenisch, Thomas Gross, and Dieter Sommer.
User centricity: a taxonomy and open issues. In Proceedings of the second ACM
workshop on Digital identity management - DIM ’06, page 1, New York, New York,
USA, 2006. ACM Press.

6. Alex Biryukov, Dmitry Khovratovich, and Sergei Tikhomirov. Privacy-preserving
KYC on Ethereum. In Proceedings of the 1st ERCIM Blockchain Workshop 2018,
2018.

7. Daniel Buchner, Orie Steele, and Troy Ronda. Sidetree v1.0.0. Technical report,
Decentralized Identity Foundation, 2021. https://identity.foundation/
sidetree/spec/. Accessed 22nd March 2022.

8. Business Standard. Over 100,000 scanned ID copies of Indians put on dark net
https://www.business-standard.com/article/

for sale: Cyble, 2020.
current-affairs/over-1-lakh-scanned-id-copies-of-indians-
put-on-dark-net-for-sale-cyble-120060300832{ }1.html, Last
cessed on 6th March 2022.

ac-

9. Kim Cameron. The Laws of Identity. Technical report, Microsoft, 2005.

10. Kim Cameron and Michael B. Jones. Design Rationale behind the Identity Meta-
system Architecture. In ISSE/SECURE 2007 Securing Electronic Business Pro-
cesses, pages 117–129. Vieweg, Wiesbaden, 2007.

11. Nazli Cila, Gabriele Ferri, Martijn De Waal, Inte Gloerich, and Tara Karpinski.
The Blockchain and the Commons: Dilemmas in the Design of Local Platforms. In
Proceedings of the 2020 CHI Conference on Human Factors in Computing Systems,
pages 1–14. Association for Computing Machinery, apr 2020.

12. Christopher D. Clack and Nicolas T. Courtois. Distributed Ledger Privacy: Ring
Signatures, M¨obius and CryptoNote. arXiv preprint arXiv:1902.02609, feb 2019.
13. CNET. Marriott breach: What to do when hackers steal your passport num-
ber, 2018. https://www.cnet.com/news/marriott-breach-what-to-do-
when-hackers-steal-your-passport-number/. Accessed: September 2020.
14. Competition and Markets Authority. Personal current accounts: Market study

update. Technical report, Competition and Markets Authority, 2014.

15. Kyle Croman, Christian Decker, Ittay Eyal, Adem Efe Gencer, Ari Juels, Ahmed
Kosba, Andrew Miller, Prateek Saxena, Elaine Shi, Emin G¨un Sirer, Dawn Song,
and Roger Wattenhofer. On scaling decentralized blockchains (A position paper).
In Lecture Notes in Computer Science (including subseries Lecture Notes in Arti-
ﬁcial Intelligence and Lecture Notes in Bioinformatics), volume 9604 LNCS, pages
106–125. Springer Verlag, 2016.
The

data
https://www.csoonline.com/article/2130877/the-biggest-data-breaches-of-the-
21st-century.html, 2020. https://www.csoonline.com/article/2130877/
the-biggest-data-breaches-of-the-21st-century.html.
Accessed:
September 2020.

16. CSO.

breaches

century.

biggest

21st

the

15

of

17. George Danezis and Sarah Meiklejohn. Centrally Banked Cryptocurrencies. may

2015.

Title Suppressed Due to Excessive Length

21

18. Drummond Reed, Jason Law, and Daniel Hardman. The Technical Foundations

of Sovrin. Technical report, Sovrin Foundation, 2016.

19. Paul Dunphy, Luke Garratt, and Fabien Petitcolas. Decentralizing Digital Identity:
Open Challenges for Distributed Ledgers. In IEEE Euro S&P Security and Privacy
on Blockchains Workshop, 2018.

20. Paul Dunphy and Fabien A.P. Petitcolas. A First Look at Identity Management
Schemes on the Blockchain. IEEE Security & Privacy, 16(4):20–29, jul 2018.
21. Etherum Wiki. On sharding blockchains FAQs, 2022. https://eth.wiki/

sharding/Sharding-FAQs. Accessed 22nd March 2022.

22. European Commision.

European Digital
//ec.europa.eu/info/strategy/priorities-2019-2024/europe-fit-
digital-age/european-digital-identity{ }en. Accessed 21st March
2022.

Identity,

2021.

https:

23. Uriel Feige, Amos Fiat, and Adi Shamir. Zero-knowledge proofs of identity. Journal

of cryptology, 1(2):77–94, 1988.

24. Daniel Fett, Ralf K¨usters, and Guido Schmitz. SPRESSO: A secure, privacy-
respecting single sign-on system for the Web.
In Proceedings of the 22nd ACM
SIGSAC Conference on Computer and Communications Security, pages 1358–
1369. ACM, 2015.

25. Financial Action Taskforce. Digital Identity, 2020.

https://www.fatf-

gafi.org/media/fatf/documents/recommendations/Guidance-on-
Digital-Identity.pdf. Accessed: September 2020.

26. Financial Conduct Authority. FCA ﬁnes Deutsche Bank £163 million for serious
https://www.fca.org.uk/news/press-

anti-money laundering controls failings.
releases/fca-ﬁnes-deutsche-bank-163-million-anti-money-laundering-controls-
failure,
fines-deutsche-bank-163-million-anti-money-laundering-
controls-failure. Accessed: 21st March 2022.

https://www.fca.org.uk/news/press-releases/fca-

2017.

27. Financial Conduct Authority. Annual Financial Crime Report, 2022. https://
www.handbook.fca.org.uk/handbook/SUP/16/23.html. Accessed 21st March
2022.

28. The Sovrin Foundation. The Inevitable Rise of Self-Sovereign Identity. Technical

report, The Sovrin Foundation, 2016.

29. Christian Gorenﬂo, Stephen Lee, Lukasz Golab, and S. Keshav. FastFabric: Scaling

Hyperledger Fabric to 20,000 Transactions per Second. jan 2019.

30. Hyperledger.

https://hyperledger-
indy.readthedocs.io/projects/sdk/en/latest/docs/how-tos/issue-
credential/README.html. Accessed: September 2020.

credential.

Issue

31. Hyperledger. Hyperledger Indy, 2019. https://github.com/hyperledger/

indy-sdk. Accessed: September 2020.

32. Hyperledger. Plenum Byzantine Fault Tolerant Protocol, 2022.

https://

github.com/hyperledger/indy-plenum. Accessed: 21st March 2022.

33. IBM. Speciﬁcation of the Identity Mixer Cryptographic Library. Research Report

RZ3730, IBM Research, Zurich, April 2010.

34. Jan Camenisch, Markulf Kohlweiss, and Claudio Soriente. An Accumulator Based
on Bilinear Maps and Eﬃcient Revocation for Anonymous Credentials. In Sta-
nis(cid:32)law Jarecki and Gene Tsudik, editors, Public Key Cryptography – PKC 2009,
volume 5443, pages 481–500. Springer Berlin Heidelberg, Berlin, Heidelberg, 2009.
35. Radhika Kajarekar. Aadhaar, UPI Handles Of 70 Lakh Indians Leaked Online Dur-
ing BHIM Data Transfer By Govt Associates, 2020. https://trak.in/tags/

22

Paul Dunphy

business/2020/06/02/aadhaar-upi-handles-of-70-lakh-indians-
leaked-online-during-bhim-data-transfer-by-govt-associates/.
Accessed: September 2020.

36. Ghassan O. Karame, Elli Androulaki, and Srdjan Capkun. Double-spending fast
payments in bitcoin. In Proceedings of the 2012 ACM conference on Computer and
communications security - CCS ’12, page 906, New York, New York, USA, 2012.
ACM Press.

37. Leslie Lamport, Robert Shostak, and Marshall Pease. The Byzantine Generals
Problem. ACM Transactions on Programming Languages and Systems, 4(3):382–
401, 1982.

38. Let’s Encrypt. Let’s Encrypt. https://letsencrypt.org/. Accessed 22nd

March 2022.

39. Christian Lundkvist, Rouven Heck, Joel Torstensson, Zac Mitton, and Michael
Sena. uPort: A Platform for Self-Sovereign Identity. Technical report, uPort,
2017.

40. Deepak Maram, Harjasleen Malvai, Fan Zhang, Nerla Jean-Louis, Alexander
Frolov, Tyler Kell, Tyrone Lobban, Christine Moy, Ari Juels, and Andrew Miller.
CanDID: Can-do decentralized identity with legacy compatibility, sybil-resistance,
and accountability. Proceedings - IEEE Symposium on Security and Privacy, 2021-
May:1348–1366, may 2021.

41. Satoshi Nakamoto. Bitcoin: A Peer-to-Peer Electronic Cash System, 2008. https:

//bitcoin.org/bitcoin.pdf. Accessed: September 2020.

42. Darrell O’Donnell. The Current and Future State of Digital Wallets. Technical

report, Continuum Loop Inc., 2019.

43. John Ousterhout. Always measure one level deeper. Communications of the ACM,

61(7):74–83, jun 2018.

44. Joss Parra-Moyano and Omri Ross. KYC Optimization Using Distributed Ledger

Technology. SSRN Electronic Journal, aug 2017.

45. Pierre-Louis Aublin, Sonia Ben Mokhtar, and Vivien Qu´ema. RBFT: Redundant
In Distributed Computing Systems (ICDCS), 2013

Byzantine Fault Tolerance.
IEEE 33rd International Conference on, pages 297–306. IEEE, July 2013.

46. Alex Preukschat and Drummond Reed. Self-Sovereign Identity. Manning Publi-

cations Co, 2021.

47. Ron Rivest. Can we eliminate certiﬁcate revocation lists? In Financial Cryptogra-

phy and Data Security, pages 178–183. Springer, Berlin, Heidelberg, 1998.

48. Michael Roe. Cryptography and evidence. PhD thesis, University of Cambridge,

2010.

49. Samuel M. Smith. Decentralized Key Management.

In Self-Sovereign Identity,

chapter 10, pages 220–247. Manning Publications Co, 2021.

50. Alberto Sonnino, Mustafa Al-Bassam, Shehar Bano, Sarah Meiklejohn, and George
Danezis. Coconut: Threshold Issuance Selective Disclosure Credentials with Appli-
cations to Distributed Ledgers. arXiv e-prints, page arXiv:1802.07344, February
2018.

51. Manu Sporny, Dave Longley, Markus Sabadello, Drummond Reed, Orie Steele, and
Christopher Allen. Decentralized Identiﬁers (DIDs) v1.0. Technical report, W3C,
2021.

52. Thomson Reuters. KYC compliance: the rising challenge for ﬁnancial institutions.

Technical report, Thomson Reuters, 2017.

53. UK Government. UK digital identity & attributes trust framework: alpha version

2. Technical report, UK Government, 2021.

Title Suppressed Due to Excessive Length

23

54. U.S. Government. National Strategy for Trusted Identities in Cyberspace. Tech-

nical report, 2010.

55. Marko Vukoli´c. The quest for scalable blockchain fabric: Proof-of-work vs. BFT
replication.
In Lecture Notes in Computer Science (including subseries Lecture
Notes in Artiﬁcial Intelligence and Lecture Notes in Bioinformatics), volume 9591,
pages 112–125. Springer Verlag, 2016.

56. W3C. Veriﬁable Credentials Data Model 1.0, 2019. https://www.w3.org/TR/

vc-data-model/. Accessed: September 2020.

57. Daniel J. Weitzner. Whose name is it, anyway? Decentralized identity systems on

the Web. IEEE Internet Computing, 11(4):72–76, jul 2007.

58. Wired.

An unsecured database exposed thousands of British passports,
2020. ttps://www.wired.co.uk/article/uk-passports-exposed-data-
breach. Accessed: September 2020.

59. Gavin Wood. Ethereum: A secure decentralised generalised transaction ledger,
2014. https://github.com/ethereum/yellowpaper. Accessed: September
2020.

