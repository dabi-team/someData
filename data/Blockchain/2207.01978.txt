Wider: Scale Out Blockchain With Sharding by
Account

1st Jia Kan
Xi’an Jiaotong–Liverpool University
Suzhou, China

2nd Jie Zhang
Xi’an Jiaotong–Liverpool University
Suzhou, China

3rd Xin Huang
Taiyuan University of Technology
Taiyuan, China

2
2
0
2

l
u
J

7

]

C
D
.
s
c
[

2
v
8
7
9
1
0
.
7
0
2
2
:
v
i
X
r
a

Abstract—The development of blockchain applications in-
creased the demand for blockchain performance. Among the
attempts of many blockchain scale-out solutions, sharding can
improve performance and reduce the storage requirements of
each node. Sharding enhances the throughput of the entire
blockchain. Most sharding solutions have a ﬁxed number of
shards. We propose Wider chain with sharding by account. The
number of shards is increased to unlimited. Meanwhile, Wider
combines the idea of rollup and retains the main chain to conﬁrm
the status of the subchains. This design can avoid the Proof of
Work computing power being scattered to the subchains and
ensure the security of the blockchain.

Index Terms—Blockchain, Scaling, Sharding, Rollup

I. INTRODUCTION

Blockchain enters the era of application. Use cases have
emerged, such as decentralized ﬁnancial services (DeFi). The
transaction-per-second (TPS) limitation prevents blockchain
from being used on a large scale. The scarcity of TPS makes
the transactions more expensive. The decentralized network
is valuable when more people are connected. It is very chal-
lenging to improve the performance of the blockchain without
raising the threshold of node resources. Once the TPS was
increased, the blockchain would still face the problem of data
exploding. It will be difﬁcult for a single personal computer to
act as a full node. Therefore, the blockchain sharding solution
is worth studying.

There are two directions of blockchain sharding: BFT-based
and PoW-based. This work follows the PoW-based works such
as Monoxide [1] and OHIE [2]. Monoxide requires the miners
to split the overall computation capacity on different shards. To
avoid the security loss for the divided computation, Monoxide
modiﬁed the mining rule for multi-shards. It allows the miner
who ﬁnds a block to append one block on all the other shards.
OHIE started mining on all the shards, but only append the
new block into one of them, randomly decided by the sufﬁx
of the new block hash. The two solutions mentioned above
use ﬁxed shards. A node can choose to host a shard until the
requirement of the shard exceeds the node capacity, e.g., disk
space or bandwidth.

We propose Wider chain to shard the blockchain by the
accounts. All the transactions for each account are placed on
a subchain. Any transaction is asynchronous and subchains-
crossing. Compared with Layer 2 solutions such as rollup,
all the subchains in our solution are globally veriﬁable. The
consensus algorithm remains as simple as Bitcoin did. All the

computation for blockchain security protects the main chain.
However, it is possible to replace the consensus algorithm with
Proof of Staking (PoS) for energy-saving purposes.

Our Goal: This work intends to develop a sharding

blockchain solution that satisﬁes several features.

• The higher TPS meets the requirement of blockchain

applications but remains decentralized and secure.

• Bring down the hard storage requirement on the sharding
nodes. As more nodes join the blockchain, each node
contributor can use less storage to serve a sharded node.
• The overall blockchain on-chain storage will grow with

more sharding nodes.

Contribution and Approach: We achieve the goals by
proposing the one account per shard blockchain data structure
in this work. Instead of putting all transactions in the main
chain, we place the transactions on subchains. The number of
shards is up to unlimited instead of ﬁxed shard zones. The
key theory to remove the PoW from the subchain is that only
when one account for each shard, the consensus is not
required since there is no competition.

Besides, the solution combined sharding by the account with
the concept of the rollup. All the changes on subchains will be
conﬁrmed in the main chain block. Thus, many transactions on
a subchain can consume only a tiny space on the main chain.
It results in a higher TPS. Rollup moves the computation to
the off-chain. Unlike rollup, in Wider, all the subchains are on-
chain data, which is publicly veriﬁable. Event atomic cross-
chain transactions rely on main chain consensus. So all the
computation ensures the main chain security.

Result: We implement the prototype of Wider, which is
available in open-source.Our experiment shows that the single
node TPS ranges from 2000 to 5000 per second by adjusting
the number of concurrent transaction accounts.

II. BACKGROUND

Internet applications rely on network effects, which connect
as many individuals as possible. Decentralized applications in
the blockchain era would still serve massive users. However,
blockchain is still limited in terms of large-scale use. The
mainstream blockchain Bitcoin [3] has only 7 TPS, and
Ethereum [4] still has only 15 TPS. In addition to the low
TPS, a single node can hardly carry the entire blockchain data
with the growth of historical chain data. Therefore, sharding
will be the inevitable solution for blockchain scaling out.

 
 
 
 
 
 
Bitcoin and Ethereum have very limited TPS. People try to
solve the problem from several angles [5], such as consensus,
rollup, sharding.

The earliest attempts were changing consensus. Bitcoin-NG
[6] modiﬁed PoW to allow the small blocks produced after the
big block. A miner who solves the PoW puzzle can lead to
building small blocks until another miner produces the next big
block. There is no puzzle for the small blocks, so the big block
is like a vote. However, the miner cannot guarantee to keep
online after the big block submission. Algorand [7] replaced
PoW computation with randomness algorithm. Ouroboros [8]
[9] adopted PoS direction.

Rollup is one of the most famous concepts for Layer 2. It
includes Optimistic-Rollup and zk-Rollup. Since many trans-
actions are processed off-chain, only the result is appended
on-chain. The off-chain data are not available for veriﬁcation.
Meanwhile, the blockchain is not allowed to visit the off-
chain data. The Optimistic-Rollup uses fraud-proof against the
invalid transaction. The zk-Rollup relies on advanced zero-
knowledge cryptography.

On sharding, many works have been proposed: Elastico
[10], OmniLedger [11] and RapidChain [12] are BFT-based.
Monoxide [1] and OHIE [2] remain to PoW design. Both
Monoxide and OHIE use ﬁxed sharding zones to scale the
blockchain and achieve outstanding performance. We proposed
a solution Wider with the unlimited shards combined with the
rollup concept.

III. DESIGN

The Wider chain consists of the main chain and countless
subchains. The main chain consists of blocks, generating new
blocks at regular intervals. Subchains consist of transactions.
A user can append the transaction to the subchain with the
corresponded private key. Each subchain is a shard, and the
shard keeps all transactions of an account. The main chain
blocks do not contain transactions but are used to conﬁrm the
latest states of the subchains. Our sharding solution works with
either PoW or PoS algorithm. We choose PoW here to avoid
the token for the consensus, as PoS requires token staking
during the consensus computing. In our sharding solution, the
computing power of PoW is concentrated on the main chain.
A user sends a transaction with the three steps in general: 1.
The sender user appends a transaction on the subchain signed
with his private key. 2. The main chain conﬁrms the subchain
in the block. 3. The receiver claims the receiving fund on
another subchain by reference to the main chain block and
the sending transaction.

The blockchain is desired to run on millions of standard
devices with limited storage (up to several TB hard disks for
nowadays) and average computation capacity, such as CPU.
Higher TPS will generate a large amount of block history data,
so it is difﬁcult for a single node to have sufﬁcient disk space
to save all the data. The storage space on a full node would
be consumed fast. As a decentralized system, the full node of
Bitcoin replicates the same ledger data. It is feasible to bring
down the resource requirements for a single node only when

nodes cooperate to save data. In our design, the main chain no
longer contains all the transactions. Nodes can choose to save
the part of transaction history data of some shards according to
their storage capacity. Nodes with limited resources can also
participate in ledger data preservation and veriﬁcation.

A. Multi chain data structure

Monoxide and OHIE are splitting Bitcoin’s main chain into
ﬁxed shards. (This would slow down the storage consumption
on each node.) Our solution steps further into the problem,
changing from the ﬁxed shards to the unlimited sharding. The
subchains data structure is identically transformed from Kan
[13], shown in Fig 1.

We model

the relationship between no sharding, ﬁxed
shards, and unlimited shards. We deﬁne A as the total accounts
number of the blockchain, and S as the total number of shards
in a blockchain, and as as the accounts number for the sth
shard. So we have:

A =

S
(cid:88)

s=1

as

Alternatively, we can deﬁne a as the average number of

accounts per shard. So we have A = a · S.

• The Bitcoin and Ethereum are not sharding, which
equates to one shard as S = 1. Then we have A = a.
• Blockchain uses ﬁxed number of shards, then we have

S > 1 as an integer.

• Our solution forces a = 1, so we got A = S.
The multi-chain data structure is named subchains in our
sharding design. Besides the subchains, the system retains the
main chain for all the subchains’ security.

B. Mining on main chain

The blockchain produces a block approximately every ten
minutes in the Bitcoin system, and each block contains many
transactions. In Wider, the main chain is equivalent to the
blockchain of the Bitcoin system. Nevertheless, no transactions
are placed on the main chain. The main block conﬁrms
subchain status.

Miners received the transaction information from the
blockchain broadcast network. After veriﬁcation, the transac-
tions were put into the local transaction pool. The miner runs
the PoW algorithm, collects the status of the subchain that
needs to be conﬁrmed in the main chain, and then looks for
the block hash that satisﬁes the difﬁculty. Our design draws on
the concept from rollup: when a user sends many transactions,
the transactions on the subchain will be aggregated, and only
the ﬁnal state of the subchain would be marked onto the main
chain block. Therefore, many transactions can be conﬁrmed
with less block space in the main chain.

C. Transaction cross subchains

Each shard in Wider is equal to a subchain. A subchain
represents an account. All the transactions from an account
were put on a subchain. In our design, we follow the PoW

Fig. 1. The identical transform from GraphChain data structure into unlimited subchains.

consensus as Bitcoin did. In addition to the subchains, the
main chain is used to conﬁrm the latest status of subchains.

TABLE II
RECEIVING TRANSACTION DATA STRUCTURE

Data ﬁeld name
Transaction hash
Parent hash
Current height
Current address
Sender address
Sender transaction hash
Main chain block hash

Data type
bytes
bytes
unsigned int
bytes
bytes
bytes
bytes

Payment amount to claim unsigned int
unsigned int
bytes

Timestamp
Signature

Fig. 2. The steps for cross subchains transaction.

There are two situations for the transaction in ﬁxed shard-
ing: intra-shard and cross-shard transfer. In our solution shard-
ing by account, all the transactions are cross-shard transfers
unless a user transfers to himself. Fig 2 shows the steps for
sending transactions and receiving funds.

TABLE I
SENDING TRANSACTION DATA STRUCTURE

Data ﬁeld name
Transaction hash
Parent hash
Current height
Current address
Recipient address
Payment amount
Timestamp
Signature

Data type
bytes
bytes
unsigned int
bytes
bytes
unsigned int
unsigned int
bytes

A user sends a transaction with the detail steps: The
account user queries the latest status on the subchain, including
available balance and latest transaction height. The user builds
the sending transaction data structure (Table I), which includes
the hash of the parent transaction, the current height, the

recipient address, the payment amount, and the timestamp.
The user signs the transaction with his private key. Then the
user calculates the hash value of the above data to get the hash
value of the transaction. Next, the signed transaction will be
broadcast on the blockchain network. The blockchain nodes
receive and verify the transaction, then put the transaction into
the transaction pool. The payment amount can not exceed the
available balance. Otherwise, the transaction will fail during
the veriﬁcation. Finally, the miners run the PoW algorithm
to build a new block on the main chain. The new block will
include the information of updated subchains, which conﬁrms
the recent transactions in subchains.

This conﬁrmation of subchains in the main chain is similar
to the concept of the rollup. Compared to rollup, all sub-
chains in Wider are veriﬁable. Like Monoxide and OHIE,
we categorized Wider as a Layer 1 sharding solution. All the
computation of PoW is to protect the security of main chain.

D. Transaction fund claim

Once the transaction is sent from an account, the nodes
and miners will verify and conﬁrm the transaction on the
main chain. The transaction conﬁrmation has two steps: the
main chain conformation and subchain conﬁrmation. The main
chain conﬁrmation ensures the sending action exists and is
correct. Since all the miners are working on the main chain to

ﬁnd a new block, the miners veriﬁed the updated subchains.
Mining is the guarantee for transaction security.

Receiving transaction (Table II) claims the transaction fund.
There is no requirement
to perform receiving transactions
immediately after main chain conformation. The subchain may
append the receiving transaction before spending the balance.
It is the action to collect the fund. The receiving transaction
would increase the account’s balance. We recommended ap-
pending this receiving transaction right before sending the fund
next time.

The concurrent number of accounts sending transactions is
called width. A block with a limited size can only conﬁrm a
limited number of subchains each time. When lots of accounts
send transactions simultaneously,
the users must wait for
several blocks to ﬁnish all the conﬁrmations. Thus, the user
collecting the received funds and sending new transactions in a
batch could avoid unnecessary subchain conﬁrmation. It would
save the main chain block space and increase the TPS.

E. Event atomic

In Bitcoin, a block contains many transactions. The trans-
action is synchronized atomic, which deducts the sender’s
balance and increases the receiver’s balance at
the exact
moment (assumed no transaction fee). In our sharding solution,
the transaction is asynchronous atomic. The sender reduces
the balance, and the main chain conﬁrms the transactions on
the shard. The receiver may choose to claim the transaction
any time after the main chain is conﬁrmed the subchain. In
Monoxide, such asynchronous atomic of the account balance
is deﬁned as event atomic. We follow Monoxide’s deﬁnition.
The send actions on different subchains are independent.
The account with enough balance can perform sending action.
In OHIE and Bitcoin, the order of blocks and transactions
inside the block is critical. Swapping the order of blocks or
transactions will lead to veriﬁcation failure, e.g., an account
would fail to pay before receiving funds. Wider does not
compare the timestamp of the transactions on the different
subchains. However, within the shard, the transactions are
chained with continual height. When sending funds from one
account to another, it checks if the current account has enough
balance to payout. The sending transaction deducts the balance
of the account. The receiving transaction can increase the
balance by referencing the main chain block and the send
transaction.

F. Security of subchains

In Wider, there is no consensus algorithm targeting sub-
chains. The subchain allows the user to fork the chain before
the conﬁrmed block is generated. On the other hand, the main
chain is secure enough to freeze the conﬁrmed subchains, as
all the computations were used for PoW consensus on the
main chain.

Another concern is that a malicious user may try to replace
the content of the transaction but remain the transaction hash.
Most of the data ﬁelds in the transaction are ﬁxed, such as the
parent transaction hash. The height must be continual. The

probability of ﬁnding a hash of different content is negligible,
especially when the modiﬁcation will also lead to transaction
signature changes. The nodes which keep the subchain data
will be aware when processing a different transaction with
duplicated hash.

IV. IMPLEMENTATION

The implementation followed by design must consider sev-
eral aspects. The nodes should host the shards in redundancy.
Although the number of blockchain nodes is ﬂexible, it is
crucial to preserve all shards to avoid blockchain data loss.

Bitcoin and Ethereum only provide full nodes. Monoxide
and OHIE use ﬁxed shards, so the new node can easily choose
the shard of fewer nodes to join. In Wider, there are unlimited
shards. A node will host many shards. It requires the nodes
organized to provide shards redundancy.

The second goal is to speed up the data access among the
nodes. A sharding blockchain splits users’ data on different
nodes. The new block generation and veriﬁcation rely on the
data access to the other shards. A pure Peer to Peer (P2P)
network running behind thousands of family ﬁrewalls is hard
to communicate globally efﬁciently.

A. Roles

As we mentioned above, there are two roles in the Wider
chain same as Bitcoin: the node and the miner. The node
hosts the blockchain data, and the miner provides blockchain
security. Both the node and miner verify the blockchain
transaction data.

Unlike Bitcoin, the node does not keep all the subchains
in a sharding blockchain. Each node keeps the complete main
chain and a subset of subchains. The node is nice to have a
public IP address and opened port with enough bandwidth.
Alternatively, at least, it can be accessible from the Internet.
The node is a part of the backbone broadcast network. When
a new block broadcasting arrives on the node, the node checks
the subchains conﬁrmed in the block content. Compared with
a full node,
the sharding node only needs to verify the
incremental subchains kept in the local, which would save
much computation in signature and hash veriﬁcation.

The miner who works on the PoW algorithm will connect
to at least one node, shown in Fig 3. It listens and waits for the
new block or transaction from the broadcast network. When
a new block arrives, the miner marks the updated subchains
status. After subchain status is conﬁrmed, the receiver can
claim funds on another subchain. When a new transaction
arrives, the miner connects to the node that hosts the shard
of the transaction sender. The miner downloads the related
subchains for veriﬁcation. The veriﬁed transactions are put in
the pool, so the miner builds the next block with the pool
transaction by running the PoW algorithm.

B. Network

Either DHT network [15] or the tree network can be used to
build the blockchain broadcast network. We choose to use the
tree network as the backbone network for the sharding nodes.

ﬁrmation on the following main block. While the TPS can be
easily raised up, the pressure moves on the veriﬁcation.

Both the node and the miner are required to perform the
veriﬁcation. The node accepts the new block and checks the
subchains’ correctness. The miner veriﬁes the transactions
before starting mining the next block. When there are many
it may cost more
transactions to conﬁrm on a subchain,
computation in veriﬁcation.

Once the related subchains are fetched to local, more CPU
cores or distributed computation can be used for veriﬁcation.
Parallel computing may reduce the time in processing trans-
actions, which increases TPS.

State transform function (STF) is the concept from the state
machine. The blockchain is modeled as the state machine. The
chain’s state transfers to a new state with the given input.
The STF deﬁnes the rule to compute the new state from the
current state and input. STF can be used when adding a new
transaction or new block. During the veriﬁcation, the STF
checks the illegal input.

Each subchain will broadcast the latest transaction to get the
subchains veriﬁed by all the miners and nodes. The miners
received the transactions and put them into the transaction
pool. Before the miner runs a consensus algorithm to ﬁnd the
new block, they must verify the new appending transaction on
the subchains. However, the miner only needs to download a
part of the subchain if the subchain has been conﬁrmed.

V. EXPERIMENT

There are several parameters

to measure the Wider

blockchain performance:

• Transaction width: the number of accounts that participate

during the block interval.

• Average transactions: the average number of transactions

on a subchain.

• Block size:

the size of the main chain block, which
indicates the number of subchains to conﬁrm in a block.

• Block interval: the interval of main chain blocks.
We implement our sharding blockchain with python 3.8.
The overall performance with python is not as fast as C++ or
rust. Therefore, Wider may achieve better performance once
we turn the solution industry-ready. We run the experiments
on Ubuntu 20.04 LTS operation system. The test CPU is AMD
Ryzen 7 5800 @3.4GHz with 8 Cores. The blockchain uses
the RocksDB database on an SSD hard drive. For the network,
we choose the tree network to achieve better performance in
broadcast communication.

A. Blockchain TPS

We measure the blockchain by adjusting the blockchain
width and block size parameters. As the rollup technique
is applied, we know all the subchains updating would be
conﬁrmed in the following main chain if the block size is
unlimited. Our experiment showed Wider can achieve 6000+
TPS by removing the block size limit. However,
there is
always a ﬁxed bandwidth in practice so that the block size

Fig. 3. The blockchain roles: nodes and miners.

The DHT network is widely used in P2P transportation.
It
is ideal for a decentralized system. The DHT network
node self-assigns the node identity and communicates with the
neighborhood. A node can ﬁnd others without a central name
service. For the broadcast task, the DHT needs to work with
gossip protocol [16]. A node receives a message and sends it
to another contact until all the contacts he knows already hear
the message. In our situation, the shards can be kept by nodes
whose identity is close to the shard user address. However,
when the number of nodes is not enough, some shards would
get lost.

Fig 4 shows the tree network as the blockchain backbone
network. Compared to the DHT network, the tree network is
better organized. The efﬁciency structure makes the network
better in message broadcast. The disadvantage of a tree net-
work is the single node failure issue. This problem can be
addressed by adding connections between nearby nodes.

C. Nodes

In the tree network, the connected nodes form a backbone
network. The backbone network is used for broadcasting and
placing sharding data. The node with public access is allowed
to join the tree network by appending as a leaf of the tree.

Fig 5 shows the nodes-path for a given account. The nodes-
path is the nodes that host the same shards. Any account can
ﬁnd the corresponded nodes-path by transforming the account
address into binary and truncating the preﬁx. When only one
node exists, the node is responsible for keeping all the shards.
As more nodes join the tree network, they are assigned to
host different shards. The inner nodes host more shards than
the outer in the nodes-path. A user can ﬁnd the corresponding
nodes-path by his account address.

D. Veriﬁcation

the
The rollup technique is used in Wider. In theory,
subchain can append arbitrary transactions and wait for con-

Fig. 4. The backbone network for the nodes.

TABLE III
RECEIVING TRANSACTION DATA STRUCTURE

TX Width
100
200
300
400
500
600
700
800
900
1000
5000
6000
7000
8000
9000
10000
11000
12000
13000
14000
15000

Block size
40KB
40KB
40KB
40KB
40KB
40KB
40KB
40KB
40KB
40KB
1MB
1MB
1MB
1MB
1MB
1MB
1MB
1MB
1MB
1MB
1MB

Block Interval
15s
15s
15s
15s
15s
15s
15s
15s
15s
15s
600s
600s
600s
600s
600s
600s
600s
600s
600s
600s
600s

TPS
2362
2409
2026
2423
1903
3276
2491
2282
1656
1461
4937
5407
2293
3692
2906
2596
2502
2497
2313
2233
2159

B. Transactions veriﬁcation

As the TPS increased, the system bottleneck is now in
veriﬁcation, which requires much more computation. A single
CPU core can perform limited times of the signature (ECDSA)
veriﬁcation operations per second.

Both the node and the miner are responsible for verifying
data after receiving the block or the transactions. The miner
needs to verify all the broadcast network transactions to max-
imize his incoming. The node would verify the corresponded
subchains after the main chain block conﬁrms. Multicores
CPU can effectually reduce the time for transaction veriﬁca-

Fig. 5. Set of nodes hosting the same shard as the nodes-path.

cannot increase forever. We also measure different tiers of
block size by different block intervals in our experiments.

Followed by Bitcoin and Ethereum, we ﬁx the interval of
blocks to 10 minutes and 15 seconds and use only one core
of CPU. So in the ﬁrst experiment, we set the transaction
width from 5,000 to 15,000 accounts for the 10 minutes block
interval and 1MB block size and set the transaction width from
100 to 1,000 accounts for the 15 seconds block interval and
40KB block size.

Table III shows the result: under the Bitcoin-like setting
(10 minutes block interval and 1MB in block size),
the
sharding blockchain node can achieve 2000-5000 TPS. Under
the Ethereum-like setting (15 seconds block interval and 40KB
in block size), the sharding blockchain node can achieve 1000-
3000 TPS.

Fig. 6. The time cost for transaction veriﬁcation with more CPU cores.

tion.

We experiment on the 10,000 transactions veriﬁcation with
the different number of cores. Fig 6 shows the time cost in
veriﬁcation. Thus, the transaction processing speed can rise
with the help of other cores. The computation can even be
out-sourcing to a local cluster.

C. Sharding and full node

in the message would not affect the TPS or performance. On
the other hand, a signiﬁcant network latency would delay the
veriﬁcation. As the sharding node does not contain the com-
plete information for veriﬁcation, it fetches other subchains
fragments on demand. Overall, the latency has less impact on
a PoW-based sharding solution than the BFT-based.

B. Incremental data fetch

Wider remains the main chain on all the nodes. Every node
must keep the main chain synced. The main chain contains
the updated information of the subchains’ status. A subchain
updates its status A and B in the main chain at block heights
3 and 5. When a node receives block 3, it downloads the
subchain transactions before A point and gets the subchain
veriﬁed. When a node receives block 5, the node veriﬁes the
transactions between points A and B. Thus, a node does not
download the full subchain but just a fragment. The main chain
reduces the communication overhead.

C. Public access of node

The blockchain was famous as the typical P2P application.
However, the node running behind a ﬁrewall connected to
a P2P network can hardly achieve high performance. The
Network Address Translation (NAT) protocol on the home
router devices even banned the P2P incoming requests. To-
wards the blockchain applications, the performance and scale-
out should be considered before censorship-resistant with P2P
networks. Indeed, censorship-resistant should be handled with
cryptography.

In Wider, we allow the resource contributor to run behind
the ﬁrewall. However, the nodes must be publicly accessible
from the Internet. The node is usually located in the data center
with good bandwidth. If the miners want to exchange data,
the nodes are the backbone network for message propagation,
nodes-path, and proxy.

Fig. 7. The storage space cost for the full node and the sharding nodes.

D. Node failure for broadcast

The sharding node shall suffer less pressure than a full node
in Wider, including CPU and disk usage. With more and more
nodes joining the blockchain backbone network, the new node
is appended to the tree network as the outer leaf. As there are
two leaves of a parent, the leaf node only keeps half of the
parent shards and the main chain.

We measure the storage space taken by the RocksDB
database for full node, half sharding, and quarter sharding.
The result is shown in Fig 7. The sharding node uses less
storage space than the full node.

Unlike the Layer 2 or off-chain solutions, all subchain

transactions are publicly veriﬁable.

VI. DISCUSSION

The main difference between the DHT network and tree
network [14] is the efﬁciency of message broadcasting. DHT
network [15] uses gossip protocol [16], which is robust against
node failures. For the performance and organized sharding
structure, we chose the tree network. However, it is vital to
catch the message propagation issue caused by node failure.
There is a simple solution to resilience the node failure.
Each node joins the network by connecting to a parent
node. The node should immediately memorize the nearby n-
th neighbors’ address. When the node receives a message, it
passes the message to the parent and the children ﬁrst through.
Then it also passes the message to all the nearby nodes. Thus,
even if a single node fails, the message will still reach the
whole network through the redundancy paths.

A. Network latency

E. No consensus on subchain

The BFT solution requires the sufﬁciency bandwidth and
the minimized latency for the consensus. Wider requires the
bandwidth for the transactions messages spreading. The delay

Wider remains the main chain. There is no PoW consensus
algorithm targeting for the subchains. It is essential to under-
stand that a subchain cannot remove the consensus when the

number of accounts on a shard is more than one. As more
accounts are placed on the same shard, each subchain must
handle the order of transactions. Since the consensus algorithm
is used to get multi parties to agree on the same, the transaction
order must be decided with consensus.

the
In Wider, we make one account one shard. Thus,
subchains drop the consensus protection. The security compu-
tation focuses on the main chain. However, the cryptographic
hash still keeps the subchain unchangeable. On the other hand,
by removing the consensus on subchains, mechanisms like
Chu-ko-nu mining from Monoxide [1] can be avoided.

VII. RELATED WORK

There are lots of research works on blockchain performance
or the scale-out. Sharding is one of the promising directions, as
it solves the data exploding after performance raise. However,
other attempts have been researched from different angles. We
can roughly categorize the solutions into Layer 1 and Layer 2
[5].

The Layer 1 solutions are on-chain. It focuses on improving
the consensus [17], data structure, and the network. SegWit
is an early proposal from the BIP (Bitcoin Improvement
Proposals), which slightly increased the Bitcoin TPS. Bitcoin
Cash [18] increased the block size up to 8MB.

Bitcoin-NG [6] tries to modify the consensus and incentive
rule to achieve higher TPS. Except for PoW, Proof of Stake
(PoS) is well studied. Ouroboros [8] [9] elects leader in each
epoch. Algorand [7] uses randomness selecting miner. Besides
the cryptography, PoS consensus relies on the token staking
to resilience Sybil-Attack.

Changing the data structure is another interesting approach.
Since most blockchain systems are hash chain-based, Directed
Acyclic Graph (DAG) allows transactions processed in paral-
lel. DAGCoin [19], Byteball [20], Nano [21] and IoTA [22] are
the early DAG adopters. Phantom [23] applies blockDAG to
achieve higher throughput. Conﬂux [24] improves DAG with
different weights on the edges. Avalanche [25] uses DAG but
improves the consensus as well.

Sharding is a viable approach to increase performance while
reducing the node storage requirement. Elastico [10], Om-
niLedger [11] and RapidChain [12] are BFT-based. Monoxide
[1] and OHIE [2] remain to PoW consensus.

The Layer 2 solutions are off-chain. The approaches include

payment channel, sidechain, cross-chain, and rollup.

Lightning [26] is the payment channel for Bitcoin, and
Raiden [27] is similar to Lightning but for Ethereum. Raiden
supports ERC20 tokens.

The sidechain is the concept that a parent chain transfers the
asset to the child chain and continues to perform operations.
Plasma [28] bridges the asset from an Ethereum smart contract
to a sidechain. Users can withdraw the asset on the main chain
at any time.

Cross-chain uses a relay technique connecting many
blockchains. The blockchains are interoperability. Polkadot
[29] and Cosmos [30] show the application blockchains work
together to achieve overall high performance.

Rollup is famous for Optimistic Rollup and zero-knowledge
Rollup. Arbitrum [31] is the Optimistic Rollup speeding up
the zk-Rollup [32] solution is still
Ethereum. Meanwhile,
under construction. Besides, Truebit [33] offers the off-chain
computation through veriﬁable computation.

VIII. CONCLUSION

We present Wider, a sharding blockchain solution with a
novel one-shard per account concept. The new subchains data
structure combined with the rollup achieved high performance
and reduced the node storage requirement. The main chain
block was used to conﬁrm subchains instead of transactions.
The PoW protects the main chain as secure as Bitcoin.

IX. FUTURE WORK

The data structure and solution proposed in this paper are
suitable for high-performance blockchain transactions. In order
to run smart contracts in such blockchain data structures, we
need to continue research and come up with corresponding
theories. To this end, we are building an EVM-compatible
virtual machine and trying to modify it so that the virtual
machine can run safely in the multi-chains environment.

REFERENCES

[1] Wang, J., & Wang, H. (2019). Monoxide: Scale out blockchains with
asynchronous consensus zones. In 16th USENIX Symposium on Net-
worked Systems Design and Implementation (NSDI 19) (pp. 95-112).
[2] Yu, H., Nikoli´c, I., Hou, R., & Saxena, P. (2020, May). Ohie: Blockchain
scaling made simple. In 2020 IEEE Symposium on Security and Privacy
(SP) (pp. 90-105). IEEE.

[3] Nakamoto, S. (2008). Bitcoin: A peer-to-peer electronic cash system.
[4] Wood, G. (2014). Ethereum: A secure decentralised generalised trans-

action ledger. Ethereum project yellow paper, 151(2014), 1-32.

[5] Zhou, Q., Huang, H., Zheng, Z., & Bian, J. (2020). Solutions to
scalability of blockchain: A survey. Ieee Access, 8, 16440-16455.
[6] Eyal, I., Gencer, A. E., Sirer, E. G., & Van Renesse, R. (2016, March).
Bitcoin-NG: A Scalable Blockchain Protocol. In NSDI (pp. 45-59).
[7] Gilad, Y., Hemo, R., Micali, S., Vlachos, G., & Zeldovich, N. (2017,
October). Algorand: Scaling byzantine agreements for cryptocurrencies.
In Proceedings of the 26th symposium on operating systems principles
(pp. 51-68).

[8] Kiayias, A., Russell, A., David, B., & Oliynykov, R. (2017, August).
Ouroboros: A provably secure proof-of-stake blockchain protocol. In
Annual international cryptology conference (pp. 357-388). Springer,
Cham.

[9] David, B., Gaˇzi, P., Kiayias, A., & Russell, A.

(2018, April).
Ouroboros praos: An adaptively-secure, semi-synchronous proof-of-
stake blockchain. In Annual International Conference on the Theory and
Applications of Cryptographic Techniques (pp. 66-98). Springer, Cham.
[10] Luu, L., Narayanan, V., Zheng, C., Baweja, K., Gilbert, S., & Saxena,
P. (2016, October). A secure sharding protocol for open blockchains. In
Proceedings of the 2016 ACM SIGSAC Conference on Computer and
Communications Security (pp. 17-30).

[11] Kokoris-Kogias, E., Jovanovic, P., Gasser, L., Gailly, N., Syta, E., &
Ford, B. (2018, May). Omniledger: A secure, scale-out, decentralized
ledger via sharding. In 2018 IEEE Symposium on Security and Privacy
(SP) (pp. 583-598). IEEE.

[12] Zamani, M., Movahedi, M., & Raykova, M. (2018, October). Rapid-
chain: Scaling blockchain via full sharding. In Proceedings of the 2018
ACM SIGSAC Conference on Computer and Communications Security
(pp. 931-948).

[13] Kan, J., Chen, S., & Huang, X. (2018, August). Improve blockchain
performance using graph data structure and parallel mining. In 2018 1st
IEEE International Conference on Hot Information-Centric Networking
(HotICN) (pp. 173-178). IEEE.

[14] Kan, J., Zou, L., Liu, B., & Huang, X. (2018, December). Boost
blockchain broadcast propagation with tree routing. In International
Conference on Smart Blockchain (pp. 77-85). Springer, Cham.

[15] Maymounkov, P., & Mazieres, D. (2002, March). Kademlia: A peer-
to-peer information system based on the xor metric. In International
Workshop on Peer-to-Peer Systems (pp. 53-65). Springer, Berlin, Hei-
delberg.

[16] Demers, A., Greene, D., Hauser, C., Irish, W., Larson, J., Shenker, S.,
... & Terry, D. (1987, December). Epidemic algorithms for replicated
database maintenance. In Proceedings of the sixth annual ACM Sym-
posium on Principles of distributed computing (pp. 1-12). ACM.
[17] Chaudhry, N., & Yousaf, M. M. (2018, December). Consensus algo-
rithms in blockchain: comparative analysis, challenges and opportunities.
In 2018 12th International Conference on Open Source Systems and
Technologies (ICOSST) (pp. 54-63). IEEE.

[18] Bitcoin Cash. Accessed: Sep.
https://www.bitcoincash.org/

1,

2021.

[Online]. Available:

[19] S. D. Lerner. (2015). Dagcoin: A Cryptocurrency Without Blocks.

[Online]. Available: https://bitslog.com/2015/09/11/dagcoin/

[20] A. Churyumov.

Storage

Transfer
For
https://byteball.org/Byteball.pdf

and

(2016). Byteball: A Decentralized
of Value.

System
[Online]. Available:

[21] C. LeMahieu. Nano: A Feeless Distributed Cryptocurrency
[Online]. Available:

2018.

24,

Network. Accessed: Mar.
https://nano.org/en/whitepaper

[22] Iota. Accessed: Sep. 1, 2019. [Online]. Available: https://www.iota.org/
[23] Sompolinsky, Y., & Zohar, A. (2018). Phantom. IACR Cryptology ePrint

Archive, Report 2018/104.

[24] Li, C., Li, P., Zhou, D., Xu, W., Long, F., & Yao, A. (2018). Scaling
nakamoto consensus to thousands of transactions per second. arXiv
preprint arXiv:1805.03870.

[25] Rocket, T. (2018). Snowﬂake to avalanche: A novel metastable consen-
sus protocol family for cryptocurrencies. Available [online].[Accessed:
4-12-2018].

[26] J. Poon and T. Dryja.

work: Scalable Off-Chain Instant Payments.
https://www.bitcoinlightning.com

(2016). The Bitcoin Lightning Net-
[Online]. Available:

[27] Raiden Network. Accessed: Sep. 1, 2019.

[Online]. Available:

https://raiden.network/

[28] Poon, J., & Buterin, V. (2017). Plasma: Scalable autonomous smart

contracts. White paper, 1-47.

[29] Wood, G. (2016). Polkadot: Vision for a heterogeneous multi-chain

framework. White Paper, 21, 2327-4662.

[30] Cosmos.

Accessed:
https://cosmos.network/whitepaper

Sep.

1,

2021.

[Online].

Available:

[31] Kalodner, H., Goldfeder, S., Chen, X., Weinberg, S. M., & Felten, E.
W. (2018). Arbitrum: Scalable, private smart contracts. In 27th USENIX
Security Symposium (USENIX Security 18) (pp. 1353-1370).

[32] zkEVM.

Accessed: Mar.

1,

2022.

[Online].

Available:

https://docs.zksync.io/zkevm/#general

[33] Teutsch, J., & Reitwießner, C. (2019). A scalable veriﬁcation solution

for blockchains. arXiv preprint arXiv:1908.04756.

