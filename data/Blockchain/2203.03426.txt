Hyperledger Fabric Blockchain and ROS 2
Integration for Autonomous Mobile Robots

Salma Salimi†, Jorge Pe˜na Queralta†, Tomi Westerlund†,
†Turku Intelligent Embedded and Robotic Systems (TIERS) Lab, University of Turku, Finland.
Emails: 1{salmas, jopequ, tovewe}@utu.ﬁ

2
2
0
2

g
u
A
5
2

]

O
R
.
s
c
[

3
v
6
2
4
3
0
.
3
0
2
2
:
v
i
X
r
a

Abstract— In industrial applications, security and trust in the
system are requirements for widespread adoption. Blockchain
technologies have emerged as a potential solution to address
identity management and secure data aggregation and control.
However, the vast majority of works to date utilize Ethereum
and smart contracts that are not scalable or well suited for
industrial applications. This paper presents what is, to the
best of our knowledge, the ﬁrst integration of ROS 2 with
the Hyperledger Fabric blockchain. With a framework that
leverages Fabric smart contracts and ROS 2 through a Go
application, we delve into the potential of using blockchain for
controlling robots, and gathering and processing their data. We
demonstrate the applicability of the proposed framework to an
inventory management use-case where different robots are used
to detect objects of interest in a given area. Designed to meet
the requirements of distributed robotic systems, we show that
the performance of the robots is not impacted signiﬁcantly by
the blockchain layer. At the same time, we provide examples
for developing other applications that integrate Fabric smart
contracts with ROS 2. Our results pave the way for further
adoption of blockchain technologies in autonomous robotic
systems for building trustable data sharing.

Index Terms—ROS 2; Blockchain; Hyperledger Fabric;

Multi-robot systems; Distributed ledger technologies;

I. INTRODUCTION

Autonomous robots are in turn more connected and dis-
tributed and has brought an increasing awareness in areas
such as security of robotic systems [1] , the explainability
and auditability of their behaviour [2]. At the same time,
distributed ledger technologies (DLTs) are penetrating the
design and development of networked systems and next-
generation internet. At the intersection of these two trends,
there is signiﬁcant potential for the design of more secure
and trustable distributed robotic systems, from swarms of
robots [3] to autonomous vehicles [4]. Surveillance or indus-
trial application areas are an area of particular potential [5].
We are particularly interested in distributed robotic sys-
tems. The complexity of tasks and performance require-
ments have led to a growing interest in multi-robot systems
(MRSs) [6]. The applications are multiple and in a variety of
scenarios, e.g, emergency or surveillance [7]. Key aspects of
such systems that can beneﬁt from integrating DLTs are iden-
tity management, built-in security in data sharing, and multi-
robot consensus. In multi-robot systems, knowledge-sharing-
based collaborative inference need to often be conducted,
so that complex tasks can be done. As untrusted data and
security threaten the integrity of such data sharing, integrating

Fig. 1: Conceptual view of the proposed application scenario, where
a Hyperledger Fabric DLT network is interfaced with ROS 2 for
managing autonomous robotic ﬂeets.

DLTs provides a trustable solution that has proven effective at
enhancing security while ensuring privacy and integrity [8].
Within the different DLT solutions that have been pro-
posed in the literature,
the most widely used so far is
Ethereum [9], [3]. Smart contracts running in the Ethereum
Virtual Machine have enabled applications from secure fed-
erated learning [10] to trustable vehicular networks and other
collaborative applications [11]. However, one of the key
issues with Ethereum is its sustainability and scalability, with
the standard consensus algorithms relying in cryptographic
proof of work [12]. In addition, Ethereum is part of the
family of public and permissionless blockchain solutions that
do not necessarily ﬁt the needs of industrial applications
where more control over the data ﬂows and robot identities
is needed. Permissioned blockchain frameworks where only
authorized nodes are allowed to share and access data are thus
a good solution that maintains the immutability and security
properties while ensuring more robust access control. Other
alternatives for higher scalability can be found within next-
generation blockchain solutions such as IOTA [5]. It is also
worth noting the efforts being put in Ethereum 2.0 towards
a more sustainable and scalable public blockchain [13].

In this work, we propose the utilization of a permissioned,
private blockchain for (i) managing the identity of robots

 
 
 
 
 
 
in a ﬂeet; (ii) interface user commands; (iii) store data
samples for auditability of the system; (iv) share robot states
securely within the ﬂeet; and (v) control data access via smart
contracts (see Fig. 1). We utilize Hyperledger Fabric, an
open-source blockchain solution that is highly modular and
conﬁgurable, and speciﬁcally designed for industrial systems.
It is designed as a foundation for developing applications
and solutions with a modular architecture. Indeed, it allows
components, such as consensus and membership services, to
be plug-and-play. Also, it offers a unique approach to the
consensus that enables performance at scale while preserving
privacy [14].

In addition to the blockchain solution, we consider only
integration with the latest version of the Robot Operating
System (ROS 2), which supports natively distributed robotics
systems, real-time control, and is ready for industrial applica-
tions. It is thus within our objectives in this work to provide
an easy way to integrate a Fabric application with ROS 2.

The core contributions of this work are: (i) the introduction
of a framework for integrating ROS2 with a Hyperledger
Fabric Blockchain for distributed robotic systems; (ii) the
analysis of the impact of integrating the Fabric blockchain in
a robotic system together with a performance and scalability
study; and (iii) an experimental proof of concept of the pro-
posed framework for an inventory management application
with ground and aerial robots.

II. RELATED WORKS

The key properties from blockchain systems that can be
leveraged in distributed multi-robot systems are built-in se-
curity aiding in data sharing within networked systems [15],
immutability of the data enabling auditability [16], and
consensus protocols enabling collaborative decision-making
through smart contracts [17].

An early integration of blockchain focused around the
data immutability properties is the Black Block Recorder
(BBR) [16]. In this approach, distributed ledgers were lever-
aged for integrity proofs to enable tamper-evident logging,
while considering the limited resources available for mobile
robotic deployments. In more general terms, the potential
of blockchains for achieving consensus in robot swarms and
detecting potentially byzantine agents has been an active area
of research [9], [3]. In addition to these, other works have
shown that parts of the blockchain stack such as Merkle
trees can be leveraged for designing encoded sets of mission
instructions for robotic systems [18].

A variety of other studies show the wide range of potential
application scenarios and integration possibilities. Guo et al.
proposed a decentralized method for spherical amphibious
multi-robot control systems based on blockchain technol-
ogy [19]. A point-to-point (P2P) information network based
on LORA technology has been created for this purpose, as
well as embedded application environment and decentralized
hardware and software architectures for multi-robot control
systems based on blockchain technology. In heterogeneous
multi-robot systems, optimizing the amount and type of data
shared between robots with different sensing capabilities and

computational resources is a key challenge, where smart
contracts can be used for ranking data quality and managing
computational and networking resources. [20]. A blockchain-
based framework for collaborative edge knowledge inference
for edge-assisted multi-robot systems was presented by Li et
al. [8]. The authors proposed a knowledge-based blockchain
consensus method for ensuring the trust of knowledge sharing
and conducted a case study on emergency rescue applica-
tions.

In [21], Lee et al. presented a general solution based
on a decentralized Monte Carlo tree search for scout-task
coordination and an upper conﬁdence bound for simultane-
ous exploration based on mutual information. The authors
evaluated the performance of the algorithm in a multi-
drone surveillance scenario in which scout robots use low-
resolution, long-range sensors while task robots use short-
range sensors to capture detailed information.

Moving the focus towards industrial application, Sah et
al. proposed in [22] a blockchain-based framework called
Decentralized Hybrid Access Control for Smart contract
(DHACS) for the Industrial Internet-of-Thing (IIoT) to bring
up a robust access control mechanism for the IIoT. In another
work, Lin et al. considered the challenge of secure data
aggregation for the increasing number of data processing and
sharing ﬂows via industrial applications and services [23].
The authors presented a blockchain-based privacy-aware dis-
tributed collection (BPDC) oriented strategy. With BPDC,
they achieved privacy protection by decomposing sensitive
tasks and task receivers into multiple groups, while guaran-
teeing the data aggregation performance.

III. BACKGROUND

A. Blockchain

The most popular blockchains to date, Bitcoin and
Ethereum, are permissionless Blockchain systems, where
anonymous nodes can join and view all the data recorded
on the blockchain without needing speciﬁc permission. As a
result, the original blockchain technology cannot be directly
applied to scenarios where particular organizations may want
to join for the purposes of transacting with each other without
exposing their data to the public or even to other parties
sharing the same blockchain infrastructure. In permissioned
architectures, such as Hyperledger, a subset of the peers is
trusted and not all the nodes hold equal roles [24]. This
allows for utilization of the blockchain technology stack in
more controlled environments. Permissioned blockchain sys-
tems are able to protect data privacy conﬁdentiality by putting
in place multiple access control mechanisms and enabling
only authorized participants to join the permissioned system
and transact privately [25]. Most permissioned blockchains
utilize deterministic consensus mechanisms, which can easily
lead to fast consensus among authenticated users. These
systems are therefore well suited to enterprise applications
that require the processing of large volumes of transactions
in a deterministic way [26].

Fig. 2: Architectural diagram of the proposed framework.

B. Hyperledger Fabric

Hyperledger Fabric has been designed for enterprise use
from the outset, with a set of characteristics that can be
exploited in distributed robotic systems: (i) participants are
identiﬁed, thus providing the tools for identity provisioning
and management and certiﬁcate generation; (ii) networks are
permissioned, meaning that a built-in layer of data security
is readily available; (iii) high transaction throughput perfor-
mance can meet the needs of real-time robotic data and data
processing needs; (iv) with conﬁgurable low-latency trans-
action conﬁrmation, consensus can be achieved in real-time
with the networking capabilities as the limiting factor; and
(v) data channel partitioning and privacy and conﬁdentiality
of transactions offer a seamless extension of ROS 2 topics,
and the corresponding pub/sub system in the underlying DDS
communication.

IV. ROS 2 + FABRIC FRAMEWORK
A. Framework architecture and key components

The main components are illustrated in Fig. 2. The core
Fabric network is hosted in the cloud back-end, together with
a Go-based web interface for visualizing ROS 2 data that has
been saved in the different channels, as well as a command
interface for inputting user instructions.

The Fabric network is hosted by a set of organizations,
each represented through a series of peer nodes. In general
terms, organizations are the containers for the peers and
certiﬁcate authorities (CA). Organizations have peers and
CAs used to verify their membership in the network and
are also called members of the network. The CAs are the
certiﬁcate authorities through which every operation executed
inside Hyperledger Fabric must be cryptographically signed.
They generate the necessary certiﬁcates for the nodes, orga-
nizations deﬁnitions and applications of its organization. CAs
play a key role in the network, because they are trusted to
identify components as belonging to a speciﬁc organization.
One of the key components of Fabric networks that dif-
ferentiate it from other blockchain solutions is the existence
of private data channels. These allow for the network to be

partitioned while maintaining a global ledger state. Within
channels, chaincodes are deployed for supporting smart con-
tracts. A chaincode deﬁnition is used by organizations to
agree on the parameters of the chaincode before it can be
used on a channel. Each channel member that wants to use
the chaincode then needs to approve its deﬁnition for their
organization. Once enough channel members have approved
a chaincode deﬁnition, it can be committed to the channel.
After the deﬁnition is committed, the ﬁrst invokation of the
chaincode will commit its state on the corresponding channel.
Finally, smart contracts are a common set of functions
which must be drafted before peers from different organiza-
tions can transact with each other. They contain agreements
cover common terms, data, rules, concept deﬁnitions, and
processes. They are often invoked by an application external
to the blockchain and provide an interface for interacting with
the ledger. Both the applications and smart contracts can be
written in general-purpose programming languages such as
Go, Java or Node.js [27].

B. Integration of Fabric applications and ROS 2 nodes

As illustrated in Fig. 2, robots in the proposed framework
are both members of the Fabric network and a potentially
shared ROS 2 network. In the ﬁgure, we have listed the most
signiﬁcant applications of smart contracts for industrial robot
ﬂeets. First, as identiﬁed already in the literature [16], the
ledger can be used to store immutable records of data, either
sample sensor data or other standard ROS data types, for
example. An example of an application for such a purpose
is illustrated in Algorithm 1 Real-time processed data can
also be stored through smart contracts to trigger predeﬁned
actions at other modules. Finally, any collaborative decision
making process can be implemented through smart contracts
to ensure that all robots obtain the same result. This is
applicable, e.g., to role allocation or resource distribution
problems.

The rest of the framework includes a web application for
visualizing data and sending commands to the mobile robots.
Speciﬁcally, the list of assets in a given channel can be

Cloud back-endCA1CA2CANPrivate data channels+chaincodesIdentity provisioning and managementPeer nodesWeb interfaceOrdererserviceLow-frequency ROS topic recorderReal-time processed data (e.g., objects of interest)User commands and mission planningCollaborative decision making chaincodesPeerNPeer2Peer1Org 1PeerNPeer2Peer1PeerNPeer2Peer1Org 2Org NRobot 1(full node)CA0Ledger copyRobot N+1Org X ClientROS 2 nodeROS 2 nodeROS 2 nodePubSubROS 2 Fabric ApplicationROS 2 Fabric ApplicationROS 2 Fabric ApplicationROS 2 Fabric ApplicationOrg X PeerLedger copy(corresponding subset of channels only)Identity certificatesData visualizationCommandinterfaceRobot N+2Org X ClientRobot N+MOrg X ClientRobot N(full node)ROS 2 nodeROS 2 nodeROS 2 nodePubSubOrg X PeerLedger copy(corresponding subset of channels only)Identity certificatesRobot 2(full node)ROS 2 nodeROS 2 nodeROS 2 nodePubSubOrg X PeerLedger copy(corresponding subset of channels only)Identity certificatesAlgorithm 1: Low-frequency ROS data recorder

Input:
Topic name: data topic
Recording frequency: max freq
Initialization:

request bring up network();
request create channel();
request deploy chaincode to channel();

while network is up do

if chaincode deployed to the channel then

Assert smart contract’s API is accessible;
Initialize ROS2 node;
foreach recording application do

load wallet and identity();
connect to gateway();
connect to network();
connect to channel();
load chaincode();
subscribe to ROS2 topic(
callback(msg) = func({

if ros time - last msg time ≥ 1/max freq
then

data ← deserialize msg();
create chaincode asset(data);
// Optionally download data:
recorder data ← download channel assets();

})

);

browsed, and position data from the robots visualized in a
map together with locations of detected objects of interest.
Sensor data samples can also be directly viewed such as
images.

V. EXPERIMENTAL RESULTS

For the rest of the paper, we focus on a proof of concept
of the proposed framework with an inventory management
use case. We demonstrate the usability of the proposed
framework with an experiment where a set of ground and
aerial robots are used for object detection in a warehouse-
like environment. Hyperledger Fabric is used as the backbone
for storing data and controlling the robots through a Go
application and integration of smart contracts with ROS2.
A web interface enables real-time tracking of the robot’s
trajectory and detected objects.

A. Experimental setup

1) Heterogeneous Multi-Robot System:

the employed
multi-robot system in this paper consists of a ground robot
and a unmanned aerial vehicle (UAV). The ground robot is
an EAI Dashgo platform equipped with an UP HD camera
with an OV2735 sensor.

The custom-built UAV is based on the X500 quad-rotor
frame which is embedded with a Pixhawk 5X ﬂight controller
running the PX4 ﬁrmware. A TF Mini Lidar is utilized
for height estimation on the UAV, also equipped with an
UP HD camera with an OV2735 sensor. An AAEON Up
Xtreme with an Intel
i7-8665UE processor is used as a
companion computer on both the Dashgo and the UAV.
Both robots use RealSense T265 cameras for VIO-based

egomotion estimation. For this experiment we have relied on
an external motion capture system with six Optitrack PrimeX
22 cameras for navigation.

2) Software: robots are running ROS Noetic under Ubuntu
20.04 for the main drivers. Localization and object detection
are running in ROS 2 Foxy. A diagram of the different
software modules running in different nodes is shown in
Fig. 3. The fabric applications runs onboard the drones but
connects to peers running on a separate computer in the
network with the same Intel i7 processor.

The Dashgo platform is controlled with the manufacturer’s
driver, while MAVROs is run in ROS Noetic for the control
of the UAV in offboard mode. Data from the optitrack system
is received with a VRPN client ROS node and forwarded to
MAVROS for waypoint control. A simple motion planner for
the Dashgo has been written for this experiment.

The ros1 bridge package is used to forward data from
Noetic to Foxy topics under
the same computer. The
usb cam package available in both Noetic and Foxy is used
to obtain camera images at a frequency of 30 Hz, even though
they are forwarded to the object detector at 5 Hz only as this
is sufﬁcient for the proof of concept. The object detector used
in the experiments is YOLOX, and a selection of objects part
of the categories in the COCO dataset is used for the purpose
of the inventory management.

3) Fabric channels and smart contracts: for the imple-
mentation of the different parts of the system, consisting the
smart contracts, the application to interact with them, the
ROS 2 nodes and the web interface, the Go programming
language (golang) has been used.This helps in the integra-
tion process as a single Go module can be connected to
both ROS 2 through rclgo, the ROS 2 GO client library.
Sample codes for all these components are made available in
the project’s repository1. Also a private Hyperledger Fabric
network has been brought up for secure data management
and robot control.

Two smart contracts, one for storing the path tracking of
the robots and one for storing the location of the detected
objects in the asset have been used in this implementation
(see Fig. 3). For each robot, one application has been used
which has various functions for controlling the assets, such
as creating new assets, read all the assets, check existence of
the assets, updating the assets and also changing them.

B. Scalability and performance results

The two robots are commanded to follow predeﬁned paths
and store in a Fabric channel chaincode a series of objects
for the purpose of managing the inventory. For this, a series
of shelves are set up in a room of 40 m2 with various objects
from the COCO dataset categories.

Figure 4 shows the trajectories of the robots during the
experiment, together with the set of locations where objects
of interest were detected. For each of these, a new asset was
generated in the corresponding channel. In addition to that,
the robot’s trajectory is sampled at 0.2 Hz.

1https://github.com/TIERS/ros2-fabric-integration

4

2

]

m

[

y

0

Fig. 3: Implementation Diagram

400

200

-

)

%

(

U
P
C

0

-

)

B
M

(

y
r
o
m
e
M

600

400

200

0

Dashgo
X500 UAV

0
0

100
100

200
200

300
300
time (s)

400
400

500
500

1

2

3

4

x [m]

Fig. 6: YOLOX ROS 2 node activity during the mission where CPU
usage is shown in blue and memory in pink.

Fig. 4: Trajectory tracking of both robots and detected objects where
the location of the detections are marked in darker color.

-

)

%

(

U
P
C

8

6

4

2

0

60

40

20

0

-

)

B
M

(

y
r
o
m
e
M

0
0

100
100

200
200

300
300
time (s)

400
400

500
500

Fig. 5: Go application activity during the mission where CPU usage
is shown in blue and memory in pink.

The system CPU and memory usage during the experi-
ments is shown in Fig. 5, and the corresponding YOLOX
resource utilization is shon in Fig. 6. The objective of this
analysis is to quantify the impact, in terms of computational
resources, that integrating the Fabric network might have
into an existing ROS 2 system. From these results, we can
conclude that the addition of Fabric as an additional channel
for data sharing is negligible, and therefore the proposed
framework has potential to be adopted in a wide variety of
application scenarios and robotic platforms.

Finally, in order to assess the scalability and performance
of the system under a more realistic workload, we have
performed a series of stress tests. In these tests, data was
transmitted from ROS 2 to the Fabric blockchain at very
high frequencies, in order to calculate the latency that high
loads induce in the system, as well as the ability of the

Fabric network to process such high volumes. We show
in Table I the results of a subset of 8 of the stress tests
with different Fabric conﬁgurations. These have been selected
as the most representative from a wider set of over 20
tests. The maximum transaction throughput that we obtain
is close 200 Hz with the standard network conﬁguration and
modifying only the batch timeout and maximum messages
parameters. These deﬁne either the maximum timeout after a
transaction has happened before a block is generated, or the
maximum number of messages that are accumulated before
mining a block. Transactions (e.g., assets being created) are
only conﬁrmed once they appear in a block, and therefore
this becomes a key parameter affecting the system latency.
We can in general observe from the table that Fabric is most
optimal with small blocks, something that has already been
identiﬁed in the literature [26]. The use of computational
resources (CPU, RAM) for the stress tests in the most
representative cases is shown in Fig. 7.

In addition to the resource utilization and transaction
throughput, we have measured the actual latency of storing
data in the blockchain when the client application node was
running on the robots, connected through Wi-Fi to the com-
puter running the peer and orderer nodes. The distribution of
the latency of the main four settings is reported in Fig. 8,
where data from 15 s is accumulated and over 200 Hz of
ROS 2 data being pushed into the smart contract.

VI. CONCLUSION

In this work, we present a framework for integrating ROS 2
with a Hyperledger Fabric blockchain for the purposes of
identity management, secure control interfaces, auditable data

Camera driverExternal positioningDashgoYOLOX-ROSDashgodriverMotion plannerROS 2 Foxy NodesROS 1 Noetic NodesCamera driverExternal positioningX500 UAVYOLOX-ROSPixhawkMotion plannerROS 2 Foxy NodesROS 1 Noetic NodesApplication 1Application 2Real-Time Trajectory VisualizationGo Web ApplicationHistorical Data LogsReal-Time Computational LoadReal-Time Fabric Performance AnalyticsChannel 1Smart Contract 2: Detected ObjectsSmart Contract 1: Path HistoryTABLE I: Results of stress tests under different fabric conﬁgurations
to assess the network’s transaction throughput limitations.

Fabric
conﬁguration

Batch

Max

Timeout Messages

Avg. transaction
throughput

Avg. orderer
CPU load

5
5
5
5
5
0.1
0.05
0.025

5
10
20
100
1000
100
100
100

183 Hz
118 Hz
69 Hz
29 Hz
28 Hz
70 Hz
114 Hz
155 Hz

28 %
28 %
28 %
23 %
23 %
28 %
28 %
28 %

Fabric BT0.025˙M100
Fabric BT5˙M5
Fabric BT5˙M100
Fabric BT5˙M1000

1
2
3
4
5
6
7
8

100

50

0
100

50

0

-

)

%

(

U
P
C

-

)

B
M

(

y
r
o
m
e
M

0

2

4

6

8
time (s)

10

12

14

Fig. 7: Memory and CPU usage of the computer running the orderer
and peer containers during the stress tests, where BT is the batch
timeout (in seconds) and M is the max. messages to add in a block.

ﬂows and private data channels in industrial robot ﬂeets. In
comparison with the literature in the integration of blockchain
in robotic systems, we expect this work to ﬁll the gap in
the same time,
the use of permissioned blockchains. At
we provide samples of applications that relay data between
ROS 2 nodes and smart contracts in Fabric. Our results show
that this solutions meets the needs of real-time distributed
system, and provides a signiﬁcant amount of built-in security
and identity management features, while having a minimal
impact on the utilization of computational resources. The
system is demonstrated with a proof of concept through
an inventory management use case with different types of
mobile robots.

REFERENCES

[1] V. Mayoral-Vilches. Robot cybersecurity, a review.

International
Journal of Cyber Forensics and Advanced Threat Investigations, 2022.
[2] J. Pe˜na Queralta et al. Enhancing autonomy with blockchain and multi-
access edge computing in distributed robotic systems. In Proceedings
of the Fifth FMEC. IEEE, 2020.

[3] E. C. Ferrer et al. Following leaders in byzantine multirobot systems
by using blockchain technology. IEEE Transactions on Robotics, 2021.
[4] S. Jain et al. Blockchain and autonomous vehicles: Recent advances

and future directions. IEEE Access, 2021.

[5] M. G. S. De Campos et al. Towards a blockchain-based multi-uav

surveillance system. Frontiers in Robotics and AI, 8, 2021.

[6] G. Deng et al. An investigation of byzantine threats in multi-robot

systems. In 24th RAID Symposium, 2021.

)
s
m

(

e
m

i
t

4,000

3,000

2,000

1,000

0

BT5˙M5

BT5˙M10

BT5˙M100

BT5˙M1000

Fig. 8: Distribution of the latency for committing transactions
between the robot and the peer node connected through Wi-Fi.

[7]

´A. Madridano et al. Trajectory planning for multi-robot systems:
Methods and applications. Expert Systems with Applications, 173,
2021.

[8] J. Li et al. Blockchain-based trust edge knowledge inference of
IEEE Communications

multi-robot systems for collaborative tasks.
Magazine, 59(7), 2021.

[9] V. Strobel et al. Managing byzantine robots via blockchain technology
in a swarm robotics collective decision making scenario. In Proceed-
ings of AAMAS, 2018.

[10] E. C. Ferrer et al. Robochain: A secure data-sharing framework for
human-robot interaction. arXiv preprint arXiv:1802.04480, 2018.
[11] X. Yu et al. An overview of federated learning at the edge and
distributed ledger technologies for robotic and autonomous systems.
In Procedia Computer Science. Elsevier, 2021. 18th MobiSPC-2021.
[12] J. Pe˜na Queralta et al. Blockchain for mobile edge computing:
In Mobile Edge Computing.

Consensus mechanisms and scalability.
Springer, 2021.

[13] Serenity Ethereum Foundation et al. Ethereum 2.0 Speciﬁcations.
Accessed February 2022 [online] https://github.com/ethereum/eth2.0-
specs, 2018.

[14] S. Dalla Palma et al. What is your distributed (hyper) ledger. In 4th

WETSEB’21 at ICSE, 2021.

[15] L. S. Sankar et al. Survey of consensus protocols on blockchain

applications. In 4th ICACCS. IEEE, 2017.

[16] R. White et al. Black block recorder: Immutable black box logging

for robots via blockchain. IEEE RA-L, 4(4), 2019.

[17] T. T. Nguyen et al. Blockchain approach to solve collective decision
In International Congress on

making problems for swarm robotics.
Blockchain and Applications. Springer, 2019.

[18] E. Castell´o Ferrer et al. Secure and secret cooperation of robotic

swarms by using merkle trees. CoRR, abs/1904.09266, 2019.

[19] S. Guo et al. Study on decentralization of spherical amphibious multi-
robot control system based on smart contract and blockchain. Journal
of Bionic Engineering, 18(6), 2021.

[20] J. Pe˜na Queralta et al. Blockchain-powered collaboration in heteroge-
neous swarms of robots. arXiv preprint arXiv:1912.01711, 2019.
[21] K. M. B. Lee et al. An upper conﬁdence bound for simultaneous
exploration and exploitation in heterogeneous multi-robot systems.
arXiv preprint arXiv:2105.06118, 2021.

[22] R. Saha et al. Dhacs: Smart contract-based decentralized hybrid
IEEE Transactions

access control for industrial internet of things.
on Industrial Informatics, 2021.

[23] H. Lin et al. A blockchain-based secure data aggregation strategy
IEEE Transactions

using 6g-enabled nib for industrial applications.
on Industrial Informatics, 2020.

[24] E. Androulaki et al. Hyperledger fabric: a distributed operating system
for permissioned blockchains. In Proceedings of the thirteenth EuroSys
conference, 2018.

[25] S. Wang et al. On private data collection of hyperledger fabric.

In

41st ICDCS. IEEE, 2021.

[26] X. Xu et al.

Latency performance modeling and analysis for
Information Processing &

hyperledger fabric blockchain network.
Management, 58(1), 2021.

[27] J Polge et al. Permissioned blockchain frameworks in the industry: A

comparison. Ict Express, 7(2), 2021.

