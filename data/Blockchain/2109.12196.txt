1
2
0
2

p
e
S
4
2

]

R
T
.
n
i
f
-
q
[

1
v
6
9
1
2
1
.
9
0
1
2
:
v
i
X
r
a

Automated Market-Making for Fiat Currencies

Alex Lipton and Artur Sepp
Sila and Sygnum Bank

September 28, 2021

Abstract

We present an automated market-making (AMM) cross-settlement mechanism for digital assets on inter-
operable blockchains, focusing on central bank digital currencies (CBDCs) and stable coins. We develop an
innovative approach for generating fair exchange rates for on-chain assets consistent with traditional oﬀ-chain
markets. We illustrate the eﬃcacy of our approach on realized FX rates for G-10 currencies.

1

Introduction

Traditionally, many essays on quantitative ﬁnance start with an obligatory reference to the celebrated Black-
Scholes paper; see [2]. However, as Bob Dylan put it: “For the times they are a-changin’.” Nowadays, to be
au courant with research, one needs to start with referring to the seminal paper by Nakamoto describing the
Bitcoin protocol; see [8]. Publication of this short paper by its anonymous author (or authors) started the
blockchain revolution; see [7]. However, despite its technical brilliance, the Bitcoin protocol is limited to moving
the underlying token, called BTC, from one anonymous address to the next consistently and robustly. Ethereum,
Cardano, Polkadot, and Solana expanded Bitcoin horizons by building a Consensus-as-a-Sevice (CaaS) machine
capable of handling the so-called smart contracts.

Over the last two years, Decentralised ﬁnance (DeFi) has seen remarkable growth and quickly established
itself as one of the ﬁrst genuine “killer apps” for smart contracts; see [9]. Using DeFi, agents can create
precisely tailored and highly complex economic arrangements and execute them automatically without central
intermediaries or other trusted parties. As a result, a DeFi-based ﬁnancial system will be more robust, inclusive,
and equitable than its ossiﬁed centralized version. Undeniably, the most valuable tools for DeFi are automated
market-making (AMM) protocols. The corresponding protocols power all decentralized exchanges (DEXs), which
gradually replace conventional centralized exchanges relying on traditional market-making techniques.

Of course, DeFi crypto platforms are not past teething problems. For instance, recently, Poly Network
lost approximately $610 million worth of crypto assets when the hacker targeted a vulnerability in the digital
interoperability contract. Eventually, the hacker returned the fund, but not before making her point was made
loud and clear.

One of the most exciting instruments using smart contracts are the so-called Central Bank Digital Currencies
(CBDCs) and Stable Coins (SCs), which map ﬁat currencies on blockchains; see [6]. Other exciting instruments
are the so-called Non-Fungible Tokens (NFTs). Currently, CBDCs are still being conceptualized and developed
by several central banks, which act in isolation. The ability to trade diﬀerent CBDCs and SCs against each other
is critical for their adoption. While CBDCs largely remain on the drawing board, SCs, such as Tether, USDC,
Dai, and numerous others, are well-developed and implemented as tokens on their underlying blockchains, for
example, ERC-20 tokens in Ethereum. SCs implemented on the same blockchain can be swapped by using
a smart contract. CBDCs implemented on diﬀerent blockchains can be swapped automatically only if the
corresponding blockchains are interoperable; see [4, 5, 10].

Below we assume that SCs are implemented on the same blockchain, while CBDCs are implemented on
interoperable blockchains, and we develop an arbitrage approach to make the on-chain exchange rate of CBDCs
or SCs consistent with the traditional oﬀ-chain forex (FX) markets. We argue that both on- and oﬀ-chain
operations are necessary to make the on-chain exchange rate consistent with oﬀ-chain pricing. Finally, we apply
our methodology for analyzing hypothetical liquidity pools using actual FX exchange data of G-10 currencies.
We make our simulations as realistic as currently possible.

1

 
 
 
 
 
 
2 Decentralised Exchange (DEX) and Automated Marking Making

Decentralized Exchanges with Automated market-making (AMM) have increased over the past year as a central
part of the DeFi eco-system to enable the on-chain exchange of diﬀerent tokens. Currently, Uniswap is the biggest
automated DEX with total locked value (TLV) of liquidity reserves of $7.1B ( https://defipulse.com/uniswap,
as of August 2021).

Conceptually DEX is owned by a pool operator. Liquidity providers post tokens to the liquidity pool. Clients
and traders use the pool liquidity to exchange one CBDC for another. The exchange rate depends on the order
size based on the Constant Function Market Makers.

The pool operator owns the corresponding smart contract on a blockchain and sets the core parameters
of automated pool operations, including the transaction fees. In addition, the pool operator implements the
constant function market-making (CFMM), which is implemented using a smart contract, that provides the
bid-ask quotes for client orders.

Liquidity providers deposit CBDCs to the pool. In return, liquidity providers get fees generated by the
pool trading activity. Liquidity providers bear the price risk of pool assets similar to a buy-and-hold investor. A
liquidity provider may hedge CBDCs exposures in the pool using oﬀ-chain instruments, in which case the P&L
of the provider is the stream of fees generated by the pool trading activity.

Traders and Clients use the pool for either redeeming tokens from the pool or depositing tokens to the
pool in a one-sided transaction. We assume that each client transaction of buying from the pool is charged with
the proportional pool fee.

The on-chain operations are implemented using the CFMM that assigns bid and ask prices of two coins in
the pool based on the size of the trades. As we show, the marginal exchange rate for a trade is proportional to
the consumption of the pool liquidity. Therefore, traders and clients must incentivize pool liquidity providers
with fees accrued to the pool and shared between the liquidity providers of the pool.

Pool arbitrageurs enforce the rebalancing of the pool when the CFMM indicative bid-ask quotes are outside

some thresholds. Next, we ﬁnd the optimal thresholds for a set of CFMM rules.

The pool arbitrageur implements both on-chain and oﬀ-chain transactions intending to keep his total balance
between assets and liabilities zero. The pool arbitrageur is crucial for ”price-discovery” of the on-chain pricing.
Pool operators may use designated arbitrageurs incentivized with lower fees.

3 Constant Function Market Makers (CFMMs)

For clarity, we denote the EURUSD FX spot rate by pt and assume that p0 = 1.25. We assume that the AMM
operator creates a pool with with notional p0N0 USDC and N0 EUDC. The initial pool balances in USDC, x0,
and EUDC y0 are set respectively by:

x0 = p0N0, y0 = N0.

(1)

The redemption and deposits of tokens from the AMM pool is determined by the CFMM function, also

known as the pool invariant, in the following way:

F (x1, y1; x0, y0, Θ) = 0,

(2)

where x1 and y1 is the amount of USDC and EUDC tokens after a transaction, respectively; x0 and y0 is the
amount of USDC and EUDC tokens right before the transaction. Θ is the set of constant set of pool parameters,
including the proportional fee rate (cid:15). After each transaction, pool balances x0 and y0 are updated by x1 and y1,
respectively.

3.1 Buying/Redeeming USDC

Buying ∆x USDC tokens from the pool involves the redemption from the USDC pool by deposing (1 − (cid:15))∆y
tokens to the EUDC pool. The AMM applies the CFMM (2) to determine the amount of USDC ∆x redeemed
in exchange for ∆y EUDC deposited as follows:

F (−,+)(x0 − ∆x, y0 + (1 − (cid:15))∆y) = 0.

(3)

Buying USDC from the pool can be done in two ways. First, the trader can redeem known amount of ∆x
USDC from pool by depositing yet unknown amount of ∆˜y EUDC, which is found using Eq (3) with given ∆x.

2

Order

Quote
Ask EUDC Buy USDC/Sell EUDC redeem ∆x USDC deposit ∆˜y EUDC
Bid USDC Buy USDC/Sell EUDC redeem ∆˜x USDC

Op for Eq(3)
∆x → ∆˜y
deposit ∆y EUDC ∆y → ∆˜x

EUDC balance

USDC balance

Table 1: Operations for buying USDC from the pool

Order

Quote
Ask USDC Buy EUDC/Sell USDC deposit ∆˜x USDC
Bid EUDC Buy EUDC/Sell USDC deposit ∆x USDC redeem ∆˜y EUDC

EUDC balance
redeem ∆y EUDC ∆y → ∆˜x
∆x → ∆˜y

USDC balance

Op for Eq(4)

Table 2: Operations for buying EUDC

Second, the trader can deposit a known amount of ∆y EUDC and redeems ∆˜x amount of USDC, which is set
using Eq (3) with given ∆y. We summarize these operations in Table (1).

3.2 Buying/Redeeming EUDC

The AMM will apply the CFMM to ﬁnd the amount of EUDC ∆y redeemed in exchange for depositing ∆x
USDC using CFMM (2) as follows:

F (+,−)(x0 + (1 − (cid:15))∆x, y0 − ∆y) = 0.

(4)

By analogy, the trader can redeem given amount of ∆y EUDC by depositing the amount of ∆˜x USDC found
using (4). Alternatively, the trader can deposit given amount of ∆x USDC to redeem the amount of ∆˜y EUDC
set using Eq. (4). We summarize the operations in Table (2).

3.3 Bid/Ask Matching

In Table (3), we aggregate the operations in Tables (1) and (2) to present the conventional matching of order
book.

4 Representative examples

We now present the most important types of CFMMs; among numerous others, see [1, 3].

4.1 Constant sum function

Constant sum rule speciﬁes the following invariant for CFMM (2):

Here and below s is the ﬁxed level of “equilibrium” conversion rate of y tokens to x tokens, and Σ0 = x0 + sy0.

For redemption of USDC, Eq(3) simpliﬁes to:

F (x1, y1) ≡ x1 + sy1 − Σ0 = 0.

(5)

and for for redemption of EUDC, Eq(3) becomes:

∆x = s(1 − (cid:15))∆y,

(1 − (cid:15))∆x = s∆y.

(6)

(7)

In Table (4.1), we summarise bid/ask matching as deﬁned in Table (3).
In Figure (1), we show the bid ask rates for USDC and EUDC implied by the AMM. It is clear that the

constant sum rule does not depend on the order size, so that it is less realistic for AMM.

Quote USDC
Bid
Ask

Buy USDC/Sell EUDC: F (−,+) : ∆y → ∆¯x Buy EUDC/Sell USDC: F (+,−) : ∆x → ∆¯y
Buy EUDC/Sell USDC: F (+,−) : ∆y → ∆¯x Buy USDC/Sell EUDC: F (−,+) : ∆x → ∆¯y

EUDC

Table 3: Bid/Ask quoting as function of order sizes using CFMM

3

Quote USDC
Bid
Ask

Redeem USDC: F (−,+)/∆y = (1 − (cid:15))s Redeem EUDC: F (+,−)/∆x = (1−(cid:15))
Deposit USDC: F (+,−)/∆y = s

s
Deposit EUDC: F (−,+)/∆x = 1

(1−(cid:15))

s(1−(cid:15))

EUDC

Table 4: Bid/Ask order quoting for constant sum function.

Figure 1: Left: the AMM rate to buy/sell EUDC as function of ∆x USDC, ∆x = [1, 2, .., 100], with x-axis is pool
utilization rate ∆x/x0. Right: the AMM rate to buy/sell USDC as function of ∆y EUDC, ∆y = [1, 2, .., 100],
with y-axis is pool utilization rate ∆y/y0 Initial parameters s = p0 = 1.25 (EUR/USD FX spot) and 1/p0 = 0.80
(USD/EUR FX spot), N0 = 10000, (cid:15) = 1bp.

4.2 Constant product function

Constant product function speciﬁes the following invariant for CFMM (2):

F (x1, y1) ≡ sx1y1 − Π0 = 0.

(8)

The AMM will apply the CFMM to ﬁnd the amount of USDC ∆x redeemed by the trader in exchange for
depositing ∆y EUDC as follows:

F (−,+) ≡ (x0 − ∆x) (y0 + (1 − (cid:15))∆y) = Π0/s.

(9)

Accordingly, for the operation of redeeming a given amount of USDC ∆x the amount of EUDC received ∆¯y is
found by:

∆¯y =

1
(1 − (cid:15))

(cid:18)

Π0
s (x0 − ∆x)

(cid:19)

− y0

.

For the operation of depositing a given amount of EUDC ∆y, the amount of USDC ∆¯x is set by:

∆¯x = x0 −

Π0
s (y0 + (1 − (cid:15))∆y)

.

Similarly, we apply the invariant for redeeming a given amount of EUDC ∆y. In Table (5), we provide the

summary for order matching.

In Figure (2), we show the bid-ask rates for USDC and EUDC implied by the constant product AMM. The

constant product rule makes large orders prohibitively expensive.

Quote USDC

Bid

Ask

Redeem: F (−,+)/∆y = x0

Deposit: F (+,−)/∆y =

∆y −
1
(1−(cid:15))∆y

Π0
s∆y(y0+(1−(cid:15))∆y)
Π0
s(y0−∆y) − x0

(cid:16)

(cid:17)

EUDC
Redeem: F (+,−)/∆x =

Deposit: F (−,+)/∆x = y0

1
(1−(cid:15))∆x
∆x −

(cid:16)

Π0

s(x0−∆x) − y0

(cid:17)

Π0
s∆x(x0+(1−(cid:15))∆x)

Table 5: Bid/Ask order matching for constant product function

4

(10)

(11)

                                     G H O W D  [    S R R O  F D S D F L W \                                                       5 D W H  W R  E X \    V H O O  G \  ( 8 ' &  X V L Q J  G [  8 6 ' & $ P P  P D U J L Q D O  U D W H  D Q G  ) ;  H [ F K D Q J H  U D W H  W R  E X \    V H O O  ( 8 ' & 8 6 '  ( 8 5  ) ;  V S R W $ V N  ( 8 5 & % L G  ( 8 5 &                         G H O W D  \    S R R O  F D S D F L W \                               5 D W H  W R  E X \    V H O O  G [  8 6 ' &  X V L Q J  G \  ( 8 ' & $ P P  P D U J L Q D O  U D W H  D Q G  ) ;  H [ F K D Q J H  U D W H  W R  E X \    V H O O  8 6 ' & ( 8 5  8 6 '  ) ;  V S R W $ V N  8 6 ' & % L G  8 6 ' &Figure 2: Left: the AMM rate to buy/sell EUDC implied by the constant product AMM as function of pool
utilization rate ∆x/x0. Right: the AMM rate to buy/sell USDC as function of pool utilization ∆y/x0. Initial
parameters: p0 = 1.25, s = p0, Π0 = 10000, (cid:15) = 1bp.

Quote USDC
Bid

Ask

Redeem: ∆x = x0 − x1 , ∆˜y = (˜y1−y0)
(1−(cid:15))
Deposit: ∆˜x = (˜x1−x0)

(1−(cid:15)) , ∆˜y = y0 − ˜y1
(1−(cid:15)) , ∆y = y0 − y1 Deposit: ∆˜x = x0 − ˜x1 , ∆y = (y1−y0)

(1−(cid:15))

EUDC
Redeem: ∆x = (x1−x0)

Table 6: Bid/Ask order quoting for mixed rule AMM

4.3 Mixed rule function

Mixed rule function speciﬁes the following invariant for CFMM (2):

F (x1, y1) ≡

(cid:18) Π0
sx1y1

(cid:19)

− 1

− α

(cid:18) x1 + sy1
Σ0

(cid:19)

− 1

= 0,

where the pool composition is deﬁned by sum and product:

x0 + sy0 = Σ0 , sx0y0 = Π0.

It is clear that the mixed rule is symmetric under the change (x, sy) → (sx, y).

If x1 is given, Eq. (12) is solved for ˜y(α)

1

(x1):

y(α)
1

(x) =

(cid:16)

1
2˜αs

− ((1 − α) + ˜αx) +

√

(cid:17)

D

, D = ((1 − α) + ˜αx)2 +

where ˜α ≡ α/Σ. If y1 is given, Eq. (12) is solved for ˜x(α)
1 (y1):
√

x(α)
1 (y) =

(cid:16)

1
2˜α

− ((1 − α) + ˜αsy) +

(cid:17)

D

, D = ((1 − α) + ˜αsy)2 +

(12)

(13)

(14)

(15)

4˜αΠ
x

,

4˜αΠ
sy

.

To redeem given ∆x USDC from the pool by depositing ∆˜y EUDC, we solve Eq (14) for ˜y1 using x1 = x0−∆x

and set:

∆x = x0 − x1 , ∆˜y =

(˜y1 − y0)
(1 − (cid:15))

.

(16)

By analogy we consider the other 3 transactions and summarise the outputs in Table (6).
In Figure (3), we show the bid/ask rates as functions of order size relative to the pool liquidity using diﬀerent
values of the parameter α. Here α = 0 and α = ∞ correspond to the sum and product rules, respectively. Using
α, we can control the marginal exchange rate as a function of order size.

5

0.0%0.1%0.2%0.3%0.4%0.5%0.6%0.7%0.8%delta x / pool capacity0.79400.79600.79800.80000.80200.80400.8060Rate to buy / sell dy EUDC using dx USDCAmm marginal rate and FX exchange rate to buy / sell EUDCUSD/EUR FX spotAsk EURCBid EURC0.0%0.2%0.4%0.6%0.8%1.0%delta y / pool capacity1.24001.24501.25001.25501.2600Rate to buy / sell dx USDC using dy EUDCAmm marginal rate and FX exchange rate to buy / sell USDCEUR/USD FX spotAsk USDCBid USDCFigure 3: Left: the AMM rate to buy/sell EUDC implied by the mixed rule AMM as function of pool utilization
rate ∆x/x0. Right: the AMM rate to buy/sell USDC as function of pool utilization ∆y/x0. Initial parameters:
p0 = 1.25, s = p0, Π0 = 10000, (cid:15) = 1bp.

Operation

1 Borrow USD / Buy EUR
2 Convert EUR to EUDC
3 Redeem USDC/deposit EUDC SC
4 Convert USDC to USD

USD cash
Type
OFF
−PE/U ∆y
OFF→ON −PE/U ∆y
−PE/U ∆y

ON→OFF ∆x − PE/U ∆y

EUR cash USDC EUDC
0
∆y
0
0
∆x
0
0
0

0
∆y
0
0

Table 7: Operations for arbitrage high USDC/EUDC rate implied by the pool. PE/U is the spot FX EUR/USD
rate. Type OFF is oﬀ-chain, ON is on-chain, and SC is smart contract

5 AMM arbitrage

The arbitrage of the pool exchange rate includes both oﬀ-chain transactions of buying/selling FX spots and
on-chain redemption/deposit of DC.

5.1 Operations

We start with USDC/EUDC arbitrage which can be executed if the marginal rate of USDC/EUDC is above
the FX rate. The arbitrageur will borrow USD cash to buy EUR cash oﬀ-chain, convert it to EUDC, exchange
EUDC to USDC, and ﬁnally convert USDC back to USD cash to cover the initial USD margin to buy EUR
cash. The operations are summarised in table (7).

Conversely, EUDC/USDC can be executed if the marginal rate of EUDC/USDC is above the FX rate. The
arbitrageur will borrow EUR cash to buy USD cash oﬀ-chain, convert it to USDC, exchange USDC to EUDC,
and ﬁnally convert EUDC back to EUR cash to cover the initial EUR margin to buy USD cash. We can
summarise the operations similarly to Table (7).

Pool arbitrageurs are necessary to adjust the pool compositions so that the AMM rate is fair and attractive
for clients. AMM operators may incentivize arbitrageurs to enforce the pool’s price discovery through a sequence
of on- and oﬀ-chain transactions.

5.2

Formulation

5.2.1 USDC arbitrage

For USDC arbitrage, we use the CFMM (3) to deposit given amount ∆y EUDC redeem ∆x USDC and deposit
EUDC. We use operations in Table (7) to derive the arbitrage P&L as function of ∆y:

Ω(∆y; p1, x0, y0) = ∆¯x − p1∆y,
s.t. F (x0 − ∆¯x, y0 + (1 − (cid:15)(cid:48))∆y) = 0,

(17)

6

                                     G H O W D  [    S R R O  F D S D F L W \                                           5 D W H  W R  E X \    V H O O  G \  ( 8 ' &  X V L Q J  G [  8 6 ' & $ P P  P D U J L Q D O  U D W H  D Q G  ) ;  H [ F K D Q J H  U D W H  W R  E X \    V H O O  ( 8 ' & 8 6 '  ( 8 5  ) ;  V S R W  U D W H % L G   D O S K D       % L G   D O S K D       % L G   D O S K D       % L G   D O S K D    L Q I $ V N   D O S K D       $ V N   D O S K D       $ V N   D O S K D       $ V N   D O S K D    L Q I                                     G H O W D  [    S R R O  F D S D F L W \                               5 D W H  W R  E X \    V H O O  G [  8 6 ' &  X V L Q J  G \  ( 8 ' & $ P P  P D U J L Q D O  U D W H  D Q G  ) ;  H [ F K D Q J H  U D W H  W R  E X \    V H O O  8 6 ' & ( 8 5  8 6 '  ) ;  V S R W  U D W H % L G   D O S K D       % L G   D O S K D       % L G   D O S K D       % L G   D O S K D    L Q I $ V N   D O S K D       $ V N   D O S K D       $ V N   D O S K D       $ V N   D O S K D    L Q Iwhere p1 is EUR/USD spot rate.

Here we assume that the (cid:15)(cid:48) is the fee paid by arbitrageur. The optimal arbitrage trade size is:

∆y∗ = argmax∆yΩ(∆y; p1, x0, y0),

(18)

and the rebalancing condition is ∆y∗ > 0.

5.2.2

EUDC arbitrage

For EUDC arbitrage, we use the CFMM (4) to deposit given amount ∆x USDC to redeem ∆¯y USDC. We derive
the arbitrage P&L as function of ∆x as follows:

Ω(∆x; p1, x0, y0) = p1∆¯y − ∆x,
s.t. F (x0 + (1 − (cid:15)(cid:48))∆x, y0 − ∆¯y) = 0,

(19)

where p1 is EUR/USD spot rate. Here (cid:15)(cid:48) is the fees to add EUCD to the AMM pool with the total fees incurred
by the arbitrage for all 4 operations in Table (7).

The optimal arbitrage trade size is:

∆x∗ = argmax∆xΩ(∆x; p1, x0, y0).

5.3 Arbitrage with Constant product rule

For USDC arbitrage, we use Eq(17) with Eq (11) for ∆¯x:

so that

(cid:18)

Ω(∆y) =

x0 −

Π0
s (y0 + (1 − (cid:15)(cid:48))∆y)

(cid:19)

− p1∆y,

(cid:32)(cid:115)

∆y∗ =

Π0
s(1 − (cid:15)(cid:48))p1

−

y0
(1 − (cid:15)(cid:48))

(cid:33)

.

Similarly for EUDC Arbitrage, we obtain the optimal trade size:

∆x∗ =

(cid:32)(cid:115)

p1Π0
s(1 − (cid:15)(cid:48))

−

x0
(1 − (cid:15)(cid:48))

(cid:33)

.

Rebalancing condition ∆y∗ > 0 and ∆x∗ > 0 imply the following bands:

1
(1 − (cid:15)(cid:48))

x0
y0

< p1 < (1 − (cid:15)(cid:48))

x0
y0

.

5.4 Arbitrage with Mixed Rule

For USDC arbitrage, we use Eq(17) with ∆¯x:

Ω(∆y) =

(cid:16)

x0 − x(α)

(cid:17)
1 (y0 + (1 − (cid:15)(cid:48))∆y)

− p1∆y,

where x(α)

1 (y) solves Eq (15).

The optimality condition is

where y = y0 + (1 − (cid:15)(cid:48))∆y.

Accordingly, we solve for y∗ using Newton-Raphson:

Ω(cid:48)(∆y) = −(1 − (cid:15)(cid:48))∂yx(α)

1 (y) − p1,

n+1 = y∗
y∗

n −

∂yx(α)

1 (y∗

n) + p1/(1 − (cid:15)(cid:48))
1 (y∗
n)

∂yyx(α)

,

7

(20)

(21)

(22)

(23)

(24)

(25)

(26)

(27)

Figure 4: Optimal P&L and rebalancing as function of α using fee 1bp

and take

∆y∗ =

(y∗

n − y0)
1 − (cid:15)(cid:48)

.

(28)

Similarly, we derive the optimal trade size for EUDC arbitrage.
In Figure (4), we show the optimal arbitrage P&L and rebalancing as function of α. The constant product
rule is the most expensive for arbitrageurs, so the optimal trade must be small. High alpha values produce smaller
marginal costs of using AMM so that the arbitrageurs can trade in larger sizes with higher proﬁt potential.

6 Pool simulations using FX Data

We apply the actual FX data, assuming it is representative of DCs, for simulation of the dynamics of the pool,
pool spreads, and P&L of liquidity providers.

6.1

FX Data and Normalization

We use FX data downloaded from the Dukascopy Bank SA platform. The FX data represent one-minute open-
high-low-close quotes and traded volumes for both bid and ask trades. These bid/ask data are well suited for
our purposes because we need to apply both the price and the volume data for realistic simulations of the FX
pools. We chose one-minute bars because they would be representative of an average block mining time.

We consider each 24-hour trading session a complete life-cycle of the FX pool, independent of previous
sessions. At the start of each trading session, the initial pool balances are reset, and, at the end of the trading
session, selected variables of the pool activity are recorded. We use the last three years of the FX data as the
most representative. As a result, we obtain 780 (= 3 × 260) independent realizations of daily pool variables for
each FX pool. Each 24-hour session has a total of 1440 (= 24 × 60) data points.

We use 10 FX pairs for G-10 currencies and Chinese yuan including the following FX pairs:

’EURUSD’,
’GBPUSD’, ’USDJPY’, ’USDCHF’, ’AUDUSD’, ’NZDUSD’, ’USDCAD’, ’USDNOK’, ’USDSEK’, ’USDCNH’.

For each trading session, we normalize the 1-minute close prices as follows:

P mid(t) =

1
2

(cid:0)P bid(t) + P ask(t)(cid:1) ,

pi (t) =

P i (t)
P mid (0)

,

i = mid, bid, ask,

(29)

where capital P stands for natural prices and small p stands for normalized prices.

8

0.000.010.020.030.040.05dx-0.14%-0.12%-0.10%-0.08%-0.06%-0.04%-0.02%0.00%0.02%alpha=0: max=0.00%alpha=5: max=0.01%alpha=10: max=0.02%P&L as function of dx for P1=1.2625, fee=1bpalpha=0.00: dx*=0.01, dy*=0.00, pnl*=0.00%alpha=5.00: dx*=0.02, dy*=0.02, pnl*=0.01%alpha=10.00: dx*=0.04, dy*=0.03, pnl*=0.02%0.000.010.020.030.040.05dy-0.20%-0.15%-0.10%-0.05%0.00%alpha=0.00: max=0.00%alpha=5.00: max=0.01%alpha=10.00: max=0.02%P&L as function of dy for P1=1.2375, fee=1bpalpha=0: dx*=0.01, dy*=0.00, pnl*=0.00%alpha=5: dx*=0.02, dy*=0.02, pnl*=0.01%alpha=10: dx*=0.04, dy*=0.03, pnl*=0.02%The natural bid and ask volumes represent the price-weighted volumes of sell and buy trades, respectively.

We normalize the volume data for each session to add up to one as follows:

ˆV = (cid:0)(cid:80)

t V bid(t) + (cid:80)

t V ask(t)(cid:1) , vbid(t) = 1
ˆV

V bid(t), vask(t) = 1
ˆV

V ask(t) .

(30)

where capital V stands for natural volumes and small v stands for normalized volumes. It follows that normalized
bid and ask volumes represent the unit-based buy and sell trades. Thus, the total amount of daily volume sums
up to 100%.

6.2 Pool Speciﬁcation

For each FX pair, we set y to represent the pool balances for the foreign DC and x represent the pool balances
for the domestic DC. The price pmid(t) is set to be the market rate of exchange of one unit of the foreign currency
to pmid(t) units of the domestic currency. For example, for the ’EURUSD’ FX pair, EUR (EUDC) is the foreign
currency with the pool balances equal y, and USD (USDC) is the domestic currency with the pool balance equal
x.

The trade volumes to redeem (buy) the foreign DC from the pool balances y are set to ∆ybid(t) = vbid(t)
with the matched volumes to deposit (sell) the domestic DC to pool balances x are set to ∆xask(t), which is
the output from the CFMM. Conversely, the trade volumes to redeem (buy) the domestic DC from the pool
balances x is set to ∆xbid(t) = vask(t), with the matched volumes to deposit (sell) the foreign DC to the pool
are set to ∆yask(t), which is the output from the CFMM.

At each trading session, the pool balances are initialized as follows:

x0 = 1, y0 = 1, s = 1, Π0 = sx0y0 = 1, Σ0 = x0 + sy0 = 2.

(31)

Given that the initial FX rate for y prices in x is normalized to unity, the starting value of the pool (also
known as total value locked or TLV) is 1. Because the normalized volumes add up to 1, we make an explicit
assumption that the daily turnover of the pool is 100% (without accounting for intraday FX rate ﬂuctuations)
for each of the DC pools.

The actual pool capacity and pool turnover are expected to be varying on daily basis, so we keep the pool
turnover as an endogenous variable set to unity. We assume that single liquidity provides the pool liquidity
provider so that the pool accrued fees and the P&L correspond to the liquidity provider with 100% ownership
of the pool.

6.3

Intraday Simulation of the Pool

For each trading session, the time stamps tn represent one-minute intervals. The 1-minute realizations of the
intraday dynamics of the pool are simulated as follows.

1.

1. Initialization. The pool is initialized at the beginning of each trading session using Eq (31).

2. Order arrivals. We assume that all bid and ask orders are aggregated into the respective single bid and
ask order using normalized bid and ask trade volumes at n-th period. We assume one lag delay, so bid
and ask orders are processed ﬁrst using the pool data at (n − 1)-th period.
The bid volumes for foreign DC ∆ybid
correspond to redeeming/buying foreign DC from balances
y with matched deposit size ∆¯xn to domestic DC balance x processed using CFMM speciﬁed in Eq. (3):

n = vbid
n

F (+,−)(xn−1 + (1 − (cid:15))∆¯xask

n , yn−1 − ∆ybid

n ) = 0,

(32)

n = vbid
n .

where ∆ybid
The bid volumes for domestic DC ∆xbid
n
balances x with matched deposit size ∆¯yask
Eq. (4):

n = vask
n

correspond to buying/redeeming domestic DC for the pool
to foreign DC balance y processed using CFMM speciﬁed in

F (−,+)(xn−1 − ∆xbid

n , yn−1 + (1 − (cid:15))∆¯yask

n ) = 0,

(33)

9

where ∆xbid

n = vask

n . The pool composition at the end of period n is then updated as follows:

xn = xn−1 − ∆xbid
yn = yn−1 − ∆ybid

n + ∆¯xask
n ,
n + ∆¯yask
n .

The marginal rate for the AMM bid/ask order ﬁlls is given by:

pAMM,bid
n

=

∆xbid
n
∆¯yask
n

, pAMM,ask

n

=

∆¯xask
n
∆ybid
n

,

We compute the bid/ask spread as follows:

sAMM,bid
n

= pmid

n − pAMM,bid
n

, sAMM,ask

n

= pAMM,ask

n

− pmid
n .

(34)

(35)

(36)

3. Arbitrage Operation

The arbitrage is implemented by checking the optimal arbitrage trade sizes in Eq (18) and Eq (20) for the
optimal arbitrage trade sizes:

∆y∗
∆x∗

n = argmax∆yΩ(∆y; pmid
n = argmax∆xΩ(∆x; pmid

n−1, xn, yn).
n−1, xn, yn),

(37)

using updated pool compositions in Eq (34). It is clear that either ∆y∗
so that the arbitrageur must only make a one-sided rebalancing and the matching sizes ∆¯x∗
computed using the CFMM, respectively.

n > 0 or ∆x∗

n > 0, but not both,
n and ∆¯y∗
n are

Further we assume that the arbitrage immediately implements the arbitrage adjustments (37) with the ﬁll
price for the FX spot transaction given by pmid
n . Thus, the arbitrage proﬁt as speciﬁed by Eq. (17) and
(19) for the n-th period is computed by:

Ω(∆y∗
Ω(∆x∗

n; pmid
n; pmid
n(cid:48)

n , xn, yn) = ∆¯x∗
, xn, yn) = pmid

n − pmid

n ∆y∗
n,
n − ∆x∗
n.

n ∆¯y∗

(38)

4. Update of the pool composition

At the end of each n-th period, the pool composition is updated by accounting for volume-driven rebal-
ancing in Eq. (34) and the arbitrage-driven rebalancing in Eq (37):
(cid:1) + (∆x∗
(cid:1) + (∆y∗

xn = xn−1 + (cid:0)−∆xbid
yn = yn−1 + (cid:0)−∆ybid

n + ∆¯xask
n
n + ∆¯yask

n − ∆¯x∗
n) ,
n − ∆¯y∗
n) .

(39)

n

5. Record of pool variables at the end of the trading session

At the end of each trading session with n = N , we compute the following key variables.

• Volume-weighted average AMM bid-ask spread in basis points is computed by:

sN =

10000
2

(cid:32) N
(cid:88)

n(cid:48)=1

n(cid:48) sAMM,bid
vbid
n(cid:48)

+

(cid:33)

n(cid:48) sAMM,ask
vask
n(cid:48)

,

N
(cid:88)

n(cid:48)=1

(40)

where sAMM,bid
n

and sAMM,ask
n
• Arbitrage proﬁts are computed using Eq. (38):

are deﬁned in Eq. (36) and 10000 is the basis point scaler.

p&larb

N =

N
(cid:88)

n(cid:48)=1

Ω(∆y∗

n(cid:48); pmid
n(cid:48)

, xn(cid:48), yn(cid:48)) +

N
(cid:88)

n(cid:48)=1

Ω(∆x∗

n(cid:48); pmid
n(cid:48)

, xn(cid:48), yn(cid:48)).

(41)

• Total pool fees are computed using pool trades set in Eq. (32) and (33):

fN = (cid:15)

(cid:32) N
(cid:88)

n(cid:48)=1

∆¯xask

n(cid:48) +

(cid:33)

n(cid:48) ∆¯yask
pmid
n(cid:48)

.

N
(cid:88)

n(cid:48)=1

(42)

10

• Total P&L for the pool liquidity provider (with 100% pool ownership) including the impermanent

loss p&L and total fees is computed by:

p&llp

N = (cid:0)xN + pmid

N yN

(cid:1) − (cid:0)x0 + pmid

0

(cid:1) + fN .

y0

(43)

• Total P&L for the pool liquidity provider with hedging including the impermanent loss p&L with

hedging and total fees is computed by:

p&llp−hedged

N

= (cid:0)xN + pmid

N yN

(cid:1) − (cid:0)x0 + pmid

N y0

(cid:1) + fN .

(44)

6.4

Illustration of Intraday dynamics

In Figure (5), we illustrate the simulated variables from the intraday simulation of the pool for the ’EURUSD’
FX pair observed on 3rd June 2021 using mixed product CFMM with α = 5 and fee (cid:15) = 1bp. We show the
following variables.

• 1a). The FX spot is mid-price pmid

n

Ask are given by pAMM,bid

n

and pAMM,ask
n

computed using Eq (29) from the market data. AMM Bid and AMM

, respectively, computed using Eq.(35).

• 2a). Pool balances for USDC, xn, and and EUDC, yn, at the end of n-th period computed using Eq. (39).

• 3a). AMM Bid, sAMM,bid

n

, and AMM Ask, sAMM,ask

n

, spreads are computed using Eq. (36).

• 4a). Bid, vbid

n , and ask, vask

n , volumes are computed using the given market data with Eq. (30).

• 1b). The intraday dynamics of the impermanent loss and hedged impermanent loss of the liquidity provider
of the pool corresponds to Eq. (43) and (44), respectively, without accounting for total pool fees fn.

• 2b). The intraday dynamics of the total pool fees, fn, are computed using Eq (42).

• 3b). The intraday dynamics of the arbitrage P&L, p&larb

N , is computed using Eq (41).

• 4b). The product of the pool balances is computed using Πn = xnyn and the sum is computed using

Σn = (xn + yn)/2 .

7 Analysis

For each trading session we compute the four key realizations:

1. AMM Spread in bp is computed using Eq. (40).

2. Arbitrage P&L Annual % is computed using Eq. (41) with simple annualization of the daily p&l equal

to 260p&larb
N .

3. Pool P&L Annual % is computed using Eq. (43) with simple annualization of the daily p&l equal to

260p&llp
N .

4. Pool Hedged P&L Annual % is computed using Eq. (44) with simple annualization of the daily p&l

equal to 260p&llp−hedged

N

.

The simulation of the pool provides path realizations of independent key variables with the sample size of
780, which we apply for the sensitivity analysis. In particular, we analyze the sensitivity to the pool speciﬁcation
including parameter α of the CFMM, pool fees (cid:15), and pool liquidity.

11

Figure 5: Simulated intraday dynamics of the pool using ’EURUSD’ data on 3rd June 2021.

12

0.99200.99400.99600.99801.00001a) FX EUR/USD spot and AMM bid/ask quotesFX spotAMM AskAMM Bid-6000-4000-200001b) Impermanent and hedged P&L per 1mlnImpermanent LossHedged Loss0.99000.99501.00001.00501.01002a) Pool balancesxy0204060801002b) Total pool fees per 1mlnTotal fee0510153a) Spreads bpAMM Ask: avg=2AMM Bid: avg=205101520253b) Arbitrage P&L per 1mlnArbitrageur P&L00:0001:0002:0003:0004:0005:0006:0007:0008:0009:0010:0011:0012:0013:0014:0015:0016:0017:0018:0019:0020:0021:0022:0023:000.00%0.10%0.20%0.30%0.40%0.50%4a) Volumes %Ask: avg=0.03%Bid: avg=0.04%00:0001:0002:0003:0004:0005:0006:0007:0008:0009:0010:0011:0012:0013:0014:0015:0016:0017:0018:0019:0020:0021:0022:0023:001.00001.00001.00001.00011.00011.00014b) Product and sumx*y product(x+y)/2 sum/2Figure 6: PDFs of core pool variables for simulated USDC/EUDC pool as functions of CFMM α, fee (cid:15) = 1bp.
Median is the path median, and mad is the median absolute deviation.

7.1 USDC/EUDC pool

7.1.1

Impact of the CFMM parameter α

In Figure (6), we show the realizations of the 4 key variables for 780 daily realizations of the USDC/EUDC
pool as functions of the CFMM parameter α. We show the sample statistics of the median and median absolute
deviation (mad). For α = 0, the AMM realized spreads are the highest, while the median of the arbitrage P&L,
the pool P&L, and the pool hedged P&L are the highest, and so is the deviation. As expected, the volatility of
the pool P&L weakly depends on α, as the price dynamics mostly inﬂuence the P&L. The volatility of hedged
P&L is reduced for diﬀerent levels of α.

In Figure (7), we show the results of the same simulation presented as the boxplot of realizations for crucial
variables. From the simulation of the AMM spread, we can select an optimal alpha that minimizes the AMM
spreads as costs to costumers and, simultaneously, maximizes the expected P&L for pool liquidity providers.
We ﬁnd an acceptable value of α equal to 5 as an optimal trade-oﬀ that produces median AMM spread of 3bp,
which breaks down to 1bp of direct fees and 2bp of the pool liquidity costs.

7.1.2

Impact of end-of-day return and realized volume variance

In Figure (8), we show the sensitivity of daily pool P&L and hedged P&L to the daily return of EURUSD
mid-price and the intraday variance of bid-ask volume. It is evident that the impermanent loss and the daily
pool P&L has a signiﬁcant sensitivity with the beta to the realized return, with the estimate of the beta slightly
above one as expected. On the other hand, the delta-hedged pool has an insigniﬁcant beta to the realized
returns. What is also evident is that the daily P&L, in particular, for the hedged pool is signiﬁcantly inﬂuenced
by the intraday variance of bid and ask ﬂows.

7.2 G-10 pools

In Figure (9), we show PDFs and boxplots of the core pool variables for the G-10 FX universe. We use α = 5.0
for the mixed product AMM and a fee of (cid:15) = 1bp. We see that PDFs and box plots of realized variables are
close to each other. As a result, our approach is general and can be applied to diﬀerent DC pools.

13

0.01.02.03.04.00.0%0.1%0.2%0.3%0.4%0.5%0.6%0.7%0.8%Empirical FrequencyAMM Spread bp=0: median=3.1, mad=0.3=1: median=2.2, mad=0.2=2: median=1.8, mad=0.2=3: median=1.5, mad=0.1=4: median=1.4, mad=0.1=5: median=1.2, mad=0.1=6: median=1.2, mad=0.1=7: median=1.1, mad=0.1=8: median=1.0, mad=0.1=9: median=1.0, mad=0.1=10: median=1.0, mad=0.1-300%-200%-100%0%100%200%300%0.0%0.1%0.1%0.1%0.2%0.2%0.3%0.4%Pool P&L Annual %=0: median=19%, mad=94%=1: median=14%, mad=94%=2: median=11%, mad=94%=3: median=10%, mad=94%=4: median=10%, mad=93%=5: median=9%, mad=93%=6: median=8%, mad=93%=7: median=8%, mad=93%=8: median=8%, mad=93%=9: median=7%, mad=93%=10: median=7%, mad=93%0%5%10%15%20%0.0%0.1%0.2%0.3%0.4%0.5%Pool Hedged P&L Annual %=0: median=14%, mad=2%=1: median=9%, mad=1%=2: median=7%, mad=1%=3: median=6%, mad=1%=4: median=5%, mad=1%=5: median=4%, mad=1%=6: median=4%, mad=1%=7: median=3%, mad=1%=8: median=3%, mad=1%=9: median=3%, mad=0%=10: median=2%, mad=0%Figure 7: Boxplot of core pool variables for simulated USDC/EUDC pool as functions of CFMM α, fee (cid:15) = 1bp.
Median is the path median and mad is the median absolute deviation.

Figure 8: The boxplot of core variables of the simulated USDC/EUDC pool as functions of pool liquidity multiple
using α = 5 and fee (cid:15) = 1bp. Median value is shown inside the bars

14

012345678910x = alpha0.51.01.52.02.53.03.54.04.5y = AMM Spread bp3.12.21.81.51.41.21.21.11.01.01.0AMM Spread bp012345678910x = alpha-300%-200%-100%0%100%200%300%19%14%11%10%10%9%8%8%8%7%7%Pool P&L Annual %012345678910x = alpha0%2%5%8%10%12%15%18%20%14%9%7%6%5%4%4%3%3%3%2%Pool Hedged P&L Annual %-1.5%-1.0%-0.5%0.0%0.5%1.0%1.5%EOD return-1.5%-1.0%-0.5%0.0%0.5%1.0%1.5%Pool P&L Annual %Pool daily P&L vs EOD returny=-0.82X²+1.00X+0.00, R²=100%-1.5%-1.0%-0.5%0.0%0.5%1.0%1.5%EOD return-1.5%-1.0%-0.5%0.0%0.5%1.0%1.5%Pool Hedged P&L Annual %Pool daily hedged P&L vs EOD returny=-0.82X²+0.00X+0.00, R²=2%0.0%0.2%0.4%0.6%0.8%1.0%Volume Variance-1.5%-1.0%-0.5%0.0%0.5%1.0%1.5%Pool P&L Annual %Pool daily P&L vs Volume Variancey=0.61X+0.00, R²=1%0.0%0.2%0.4%0.6%0.8%1.0%Volume Variance-1.5%-1.0%-0.5%0.0%0.5%1.0%1.5%Pool Hedged P&L Annual %Pool daily P&L hedged vs Volume Variancey=0.38X+0.00, R²=84%Figure 9: Simulated outputs of core pool variables for G-10 universe using α = 5.0 and fee (cid:15) = 1bp. Top panel:
PDFs, bottom panel: boxplots with the median value shown.

15

1.01.21.41.61.82.00.00%0.10%0.20%0.30%0.40%Empirical frequencyAMM Spread bpEURUSD: median=1.2, mad=0.1GBPUSD: median=1.3, mad=0.1USDJPY: median=1.3, mad=0.1USDCHF: median=1.3, mad=0.1AUDUSD: median=1.3, mad=0.1NZDUSD: median=1.3, mad=0.1USDCAD: median=1.3, mad=0.1USDNOK: median=1.4, mad=0.1USDSEK: median=1.4, mad=0.1USDCNH: median=1.3, mad=0.1-400%-200%0%200%400%0.00%0.05%0.10%0.15%0.20%0.25%0.30%0.35%0.40%Pool P&L Annual %EURUSD: median=9%, mad=93%GBPUSD: median=4%, mad=125%USDJPY: median=6%, mad=83%USDCHF: median=8%, mad=88%AUDUSD: median=6%, mad=128%NZDUSD: median=10%, mad=140%USDCAD: median=3%, mad=83%USDNOK: median=5%, mad=150%USDSEK: median=3%, mad=127%USDCNH: median=3%, mad=62%0%2%4%6%0.00%0.10%0.20%0.30%0.40%0.50%Pool Hedged P&L Annual %EURUSD: median=4%, mad=1%GBPUSD: median=4%, mad=1%USDJPY: median=4%, mad=1%USDCHF: median=5%, mad=1%AUDUSD: median=4%, mad=1%NZDUSD: median=4%, mad=1%USDCAD: median=4%, mad=1%USDNOK: median=4%, mad=1%USDSEK: median=4%, mad=1%USDCNH: median=4%, mad=0%EURUSDGBPUSDUSDJPYUSDCHFAUDUSDNZDUSDUSDCADUSDNOKUSDSEKUSDCNH0.91.01.11.21.31.41.51.61.71.81.21.31.31.31.31.31.31.41.41.3AMM Spread bpEURUSDGBPUSDUSDJPYUSDCHFAUDUSDNZDUSDUSDCADUSDNOKUSDSEKUSDCNH-500%-400%-300%-200%-100%0%100%200%300%400%500%9%4%6%8%6%10%3%5%3%3%Pool P&L Annual %EURUSDGBPUSDUSDJPYUSDCHFAUDUSDNZDUSDUSDCADUSDNOKUSDSEKUSDCNH1%2%3%4%5%6%7%8%4%4%4%5%4%4%4%4%4%4%Pool Hedged P&L Annual %8 Conclusions

Foreign exchange trading has been practiced since antiquity and continues to be extremely important in our
days. Canonical gospels of the New Testament eloquently describe how Jesus expelled the money changers from
the Temple. Modern-day descendants of the money changers are known as forex market makers. This paper
described an original, novel, and powerful approach to cleansing the Temple of high ﬁnance. Speciﬁcally, we
showed that using CaaS providers, such as Ethereum, Cardano, and Solana protocols, one can exchange ﬁat
currencies via AMMs, thus eliminating the need for intermediaries.

Space does not allow us to consider exchanges of ﬁat currencies into baskets of other ﬁat currencies, which
are helpful for trading blocks pursuing multinational endeavors such as digital trade coins. However, we shall
discuss such exchanges in a forthcoming paper.

References

[1] Angeris, G., Kao, H.T., Chiang, R., Noyes, C., Chitra, T., 2019. An analysis of Uniswap markets. Cryptoe-

conomic Systems Journal.

[2] Black, F., and M. Scholes, 1973, The pricing of options and corporate liabilities Journal of Political Economy

vol. 81, pp. 637-659.

[3] Egorov, M., 2019. StableSwap - eﬃcient mechanism for Stablecoin liquidity. White paper.

[4] Hardjono, T., Lipton, A., and A. Pentland, 2021, Towards an Interoperability Architecture Blockchain
Autonomous Systems, IEEE Transactions on Engineering Management, vol. 67, no. 4, pp. 1298-1309.
Available: doi:10.1109/TEM.2019.2920154.

[5] Lipton, A., and T. Hardjono, 2022, Blockchain Intra- and Interoperability, in Babich V, Birge J, Hilary G

(eds), 2022, Innovative Technology at the interface of Finance and Operations.Springer, New York.

[6] Lipton, A., A. Sardon, F. Sch¨ar, and C. Sch¨upbach, 2021, Stablecoins, in Pentland A., Lipton A., and

Hardjono T., 2021, Building the New Economy, MIT Press, Boston.

[7] Lipton A., and A. Treccani, 2021, Blockchain and Distributed Ledgers: Mathematics, Technology, and

Economics, World Scientiﬁc, Singapore.

[8] Nakamoto,

S.,
https://bitcoin.org/bitcoin.pdf.

2008.

Bitcoin:

A peer-to-peer

electronic

cash

system. Available:

[9] Sch¨ar, F., 2021. Decentralized ﬁnance: On blockchain-and smart contract-based ﬁnancial markets. FRB of

St. Louis Review.

[10] World Bank Group, 2021, Blockchain Interoperability. Available: http://documents.worldbank.org/

curated/en/373781615365676101/Blockchain-Interoperability

16

