1
2
0
2

c
e
D
0
3

]

C
O
.
h
t
a
m

[

3
v
9
9
9
9
0
.
8
0
1
2
:
v
i
X
r
a

A Mean Field Game Analysis of Consensus Protocol Design

Beijing International Center for Mathematical Research, Peking University, Beijing, 100871, China

Lucy Klinger

lucyk@bicmr.pku.edu.cn

Lei Zhang

Beijing International Center for Mathematical Research, Center for Quantitative Biology, Peking University, Beijing 100871, China

zhangl@math.pku.edu.cn

Zhennan Zhou

Beijing International Center for Mathematical Research, Peking University, Beijing, 100871, China

zhennan@bicmr.pku.edu.cn

Keywords: mean ﬁeld game, Hamilton-Jacobi-Bellman equation, Fokker-Planck equation, decentralized

blockchain, mechanism design, consensus protocol, Proof-of-Work

Abstract

A decentralized blockchain is a distributed ledger that is often used as a platform for exchanging goods

and services. This ledger is maintained by a network of nodes that obeys a set of rules, called a

consensus protocol, which helps to resolve inconsistencies among local copies of a blockchain.

In

this paper, we build a mathematical framework for the consensus protocol designer, specifying (a) the

measurement of a resource which nodes strategically invest in and compete for to win the right to build

new blocks in the blockchain; and (b) a payoff function for such efforts. Thus, the equilibrium of an

associated stochastic differential game can be implemented by selecting nodes in proportion to this

speciﬁed resource and penalizing dishonest nodes by its loss. This associated, induced game can be

further analyzed using mean ﬁeld games. The problem can be broken down into two coupled PDEs,

where an individual node’s optimal control path is solved using a Hamilton-Jacobi-Bellman equation,

and where the evolution of states distribution is characterized by a Fokker-Planck equation. We develop

numerical methods to compute the mean ﬁeld equilibrium for both steady states at the inﬁnite time

horizon and evolutionary dynamics. As an example, we show how the mean ﬁeld equilibrium can be

applied to the Bitcoin blockchain mechanism design. We demonstrate that a blockchain can be viewed

as a mechanism that operates in a decentralized setup and propagates properties of the mean ﬁeld

equilibrium over time, such as the underlying security of the blockchain.

1

 
 
 
 
 
 
1 Introduction

A blockchain is a decentralized ledger that records sequences of real-time transactions, denoted by

{Tt}t∈[0,∞), representing assets ownership at time t (Nakamoto 2008, Atzei et al. 2018). Blockchains

are most often used as platforms for exchanging goods and services (Kim & Deka 2020). With no

reliance on a trusted central authority, a blockchain is maintained by a set of nodes, indexed by

i ∈ {1, 2, · · · , M }, in a decentralized network, as shown in the bottom right corner of Figure 1. This

decentralized network consists of vertices and edges, where vertices represent nodes and edges repre-

sent communication between nodes. Those nodes record transactions by building a sequence of valid

0

B0

Hash of 0

(Genesis)
...
Transactions

Nt = 1

B1

Hash of 1

Hash of 0
...
Transactions

...

Nt = n − 1

Bn−1

Hash of n-1

Hash of n-2
...
Transactions

Nt = n

Bn

Hash of n

Hash of n-1
...
Transactions

t

...

n = 1

...

n = 1

...

n = 1

...

n = 0

...

n - 1

...

n - 1

...

n - 1

...

n = 2

...

n = 2

...

...

...

n = 2

...

...

n - 3

...

n - 3

...

n - 3

...

n - 2

...

n - 2

...

n - 2

...

A Decentralized Network of Nodes

Blocktree
Ci

n

...

Broadcasting Transactions

(cid:3)XVerifying

(cid:3)XBuilding

...

Figure 1: An Overview of Blockchain Mechanism

discretized blocks denoted by B. A block B(n) ∈ B with a block height n consists of a block header

which includes metadata, together with a sequences of timed transactions not found in previous block.

B(n) :=

version, difﬁculty, nonce, previous block’s hash, timestamp, Merkle root

, {Tt | Tt 6∈ B(n′), ∀n′ < n}

(cid:10)

|

Block Header

{z

Block Body

}

|

{z

(cid:11)
(1)

}

Here, version is what is followed by the consensus protocol node, while difﬁculty and nonce refer to

their respective use in the protocol design. Timestamp is when a block was built, and Merkle root is

used for quick validation to retrieve complete transaction records {Tt ∈ B(n′), ∀n′ < n}. Each block

B(n) is linked to the block B(n − 1) with a hash pointer (cid:30), as denoted by B(n − 1) (cid:30) B(n). This

notion represents the previous block’s hash information when it is stored in the current block’s header,

as shown at the top of Figure 1. Such block arrival process can be modeled as a non-homogeneous

Poisson process {Nt, t ≥ 0} with intensity

that is is given by

t
0 λ(s) ds (Fralix 2020) and with a probability mass function
R

P{Nt = n} =

t
0 λ(s) ds
n!

n

(cid:1)

(cid:0) R

e−

t

0 λ(s) ds.
R

(2)

In a decentralized structure, each node has its own local replica of the blocktree Ci(n), as shown in

the bottom left corner of Figure 1. A blocktree Ci(n) ⊂ (B, {(cid:30)}) is a directed graph that is made up

2

of a subset of all possible valid block paths from a genesis block B(0), such that for each valid block

B(n) ∈ B, there is exactly one path from B(0) to B(n) in a blocktree Ci(n) of up to block height n. For

a given block tree Ci(n) with a maximum height n, our ultimate goal is to create a blockchain that has

a fully validated ledger of transactions, which is formally deﬁned as the path

B(0) (cid:30) B(1) (cid:30) · · · (cid:30) B(n)

B(n) ∈ B

⊆ C(n) ,

(3)

where, the genesis block B(0) to the current block {B(n)|B(n) ∈ B}, a correct node is proposed.

n

(cid:12)
(cid:12)
(cid:12)

o

Often, a variety of orphan blocks represents a latency in the network, which occurs when nodes

broadcast blocks onto the network simultaneously. Due to this broadcasting delay, such nodes may

observe different versions of the blocktree, as denoted by the collection of blocktrees

C =

M

i=1
[

Ci(n) .

(4)

Theoretically, the concept of a blocktree’s appearance is based on a subjective consensus (Narayanan et al.

2016). Therefore, to resolve inconsistencies among individual nodes, we need a set of rules

g : C → C(n) ,

(5)

called the consensus protocol, so that every node can update its local replica of the blocktree to match

the one proposed by a correct node (Zhang et al. 2020).

It has been observed that when a transaction receives more conﬁrmations, a block containing that

transaction will have a greater number of other blocks pointing to it. As a result, this transaction

has an increased likelihood of being included in the blocktree proposed by a correct node. Using

the equilibrium of a noncooperative game can help the consensus protocol to achieve this outcome.

Instead of picking a random node, we can build a game environment that allows a large number of

risk neutral nodes to compete for the right to build block B(n), so that new transactions are veriﬁed

by numerous conﬁrmations derived from competition between nodes (a process normally referred to

as mining a block) (Liu et al. 2019). Apart from the consensus protocol, nodes do not face any other

strategic restrictions. Rational nodes act in order to maximize their own utility. Malicious nodes, on

the other hand, may launch attacks that damage blockchain networks. A game environment will allow

the mechanism to approximately select correct nodes. To accomplish this, a stochastic differential game

model can be built to operate within a decentralized setup (Dhamal et al. 2019).

Game 1 (Stochastic Differential Game). A stochastic differential game γ for M nodes, played in real time,

is a 4-tuple

D
which consists of the following components:

E

γ =

{1, 2, · · · , M }, Ω, O, π

,

(I) a ﬁnite set of rational and intelligent non-cooperative nodes indexed by i ∈ {1, 2, · · · , M }

(II) a ﬁltered probability space

Ω, F, P

where the ﬁltration is denoted by (Ft)0≤t≤∞ of σ-ﬁelds on

(cid:0)

(cid:1)

3

(Ω, F) such that Ft′ ⊂ Ft ⊂ F, ∀t′ ≤ t, which represents the information available 1 to all nodes

at time t. Let

xi(0), bj (0)

be a random variable known up to a P-null set and let W and P be a

Brownian motion and a Poisson random measure with intensity λ, respectively. Assume that W and

(cid:1)

(cid:0)

P are independent of F0. Each node has a 2-dimensional stochastic random state process

xi(·), bj (·)

∈ Xi × Yj ⊂ R2 ,

(cid:16)

(cid:17)

adapted to ﬁltration F := (Ft)0≤t≤∞, where xi(·) represents certain state dynamics (e.g. a wealth

process) and bj (·) represents the token price process.

(III) a set of all possible outcomes O =

M

i=1
Y

Oi, where Oi is the set of admissible controls for node i

Oi :=

αi(·) : Ω → R measurable ∀t

n

o

(6)

(IV) a set of all possible payoffs π = (π1, . . . , πM ), where node i chooses the optimal control αi to

maximize its running payoff functional over time t ∈ [0, ∞)

πi

αi, [0, ∞)

:= E

∞

ui

xi(t), bj(t), αi(t), x−i(t), b−j (t), α−i(t)

e−rt dt

(7)

(cid:16)

(cid:17)

0

(cid:20)Z

(cid:16)

(cid:17)

(cid:21)

over the action taken by all nodes. We use −i to denote all nodes except node i, while r > 0 repre-

sents a ﬁxed discount factor. Here, the marginal payoff function is associated with some controlled

evolution, which is driven by the Markovian feedback control jump-diffusion process

dxi(t) =

rxt − c(αi(t))

dt + bj(t)kt dNt, ,

(8)

(cid:16)

(cid:17)

where c is a cost function; the reward that arrives at system P(O × X) is calculated according to a

non-homogeneous Poisson process, as described in Equation 2.

Nodes in the network are coupled through payoffs and state dynamics. Their strategic interactions,

as well as the evolution of the above game, can be analyzed using concepts from game theory. Within

the context of a stochastic differential game γ, nodes can learn from and predict each other’s behaviors,

and then develop optimal reaction strategies based on equilibrium analysis. The set of optimal strategies

that achieve a Nash equilibrium in every state of the stochastic differential game is named a Markov

perfect equilibrium (Shapley 1953).

Deﬁnition 2 (Markov Perfect Equilibrium (MPE)). An M -tuple of feedback control functions

ˆα =

ˆα1, ˆα2, . . . , ˆαM

(cid:16)

(cid:17)

constitutes a Markov Perfect Equilibrium (MPE) for Stochastic Differential Game 1 if the feedback control

ˆαi(·) provides a solution to the Optimal Control Problem (IV) for the i-th node for ∀i ∈ {1, 2, · · · , M }

subject to the controlled dynamics of the system for every initial conditions xi(0).

1Here we borrow the notation from (Ewald & Rutkowski 2017)

4

As time evolves in a game, it is assumed that nodes will typically place somewhere near Equilibrium

2. We aim to design a game that selects nodes in proportion to the ownership of a substantial resource

which cannot be monopolized and also functions as a tamper-proof summary of large data ﬁles. To

achieve this, we need to impose a surjective mapping

Ψ : C → O

(9)

between blocktrees and the outcome of Game 1, which guides nodes to invest strategically in a sub-

stantial resource so they can compete to build new blocks (Equation 1) in the blockchain (Equation 3).

Such a design would penalize dishonest nodes through loss of resources, thereby discouraging nodes

from misbehaving or launching attacks. For example, this substantial resource can be, among others, a

measurement of work done (used in a Proof-of-Work protocol) or a measurement of ownership (used

in a Proof-of-Stake protocol) (Wang et al. 2019).

Deﬁnition 3 (Consensus Protocol). A consensus protocol in blockchain mechanism for γ (described in

Game 1) is a 4-tuple

C =

C, Ψ, π, g

,

D

E

which consists of the following components:

(I) a set of different local replicas of blocktrees C =

M

Ci , as described in Equation 4

(II) a surjective mapping Ψ : C → O, as described in Equation 9, which is designed to allow nodes to

i=1
S

invest strategically in a substantial resource, so they can compete to create new blocks B(n) with the

increase of height n in the blockchain, as described in Equation 3

(III) nodes that are rewarded for their efforts, which is reﬂected in payoff function π, as described in

Equation 7

(IV) a set of rules that becomes g

Ψ−1(O)

, as described in Equation 5, so that every node can update its

local replica of blocktree to the one chosen by the outcome of game γ, resulting in a consensus C(n)

(cid:0)

(cid:1)

among all nodes.

Based on implementation theory (Jackson 2001), the equilibrium ˆα ∈ O can then be utilized to

develop an incentive scheme within a consensus protocol, which nodes participate in and contribute

resources to for the purpose of maintaining the blockchain (Swan 2015). This equilibrium is what

governs the underlying security of the blockchain.

Problem 4. Given a game environment γ =

{1, 2, · · · , M }, Ω, O, π

as described in Deﬁnition 1, the

designer needs to specify two mappings Ψ and π in the consensus protocol C =

C, Ψ, π, g

as described

E

D

in Deﬁnition 3, so that an equilibrium ˆα = Ψ(C) of the game of incomplete information

D

E

Γ =

{1, 2, · · · , M }, Ω, Ψ(C), π

D

E

can be implemented for all states x(·) ∈ Ω over M and O.

5

Within this framework, we aim to establish the existence of the Nash equilibrium described above.

Without loss of generality, we use the Proof-of-Work (PoW) Protocol in the Bitcoin blockchain as an

example to demonstrate the existence of such an equilibrium. Note that more complex schemes, such

as the Proof-of-Stake (PoS) mechanism (Bentov et al. 2014), can be substituted for the PoW analysis

used in our work.

1.1

Proof-of-Work Protocol

As discussed in Problem 4, we aim to use two mappings, Ψ and π (as described in Deﬁnition 3), to

demonstrate the existence of an equilibrium in the Bitcoin mining game. In this subsection, we ﬁrst aim

to describe the two mappings, Ψ and π, as speciﬁed in the PoW protocol of the Bitcoin blockchain.

In the PoW protocol, the game selects nodes in proportion to the amount of work done by the

computing power that is allocated to building blocks (see Section A for more details). The surjective

mapping Ψ, as described in Equation 9, is now replaced by a measurement of work done, i.e., the

hashrate function α, which represents the expected computing power needed for nodes to compete

for the right to create new blocks B(n) with an increase of height n in the blockchain, as described

in Equation 3. Consequently, every node adheres to the longest chain (Nakamoto 2008) and updates

its local blocktree replica to match the blocktree that maps onto the game’s outcome, representing the

maximum computing power used:

g

Ψ−1(O)

:=

Cj

j = argmax

α

.

(10)

(cid:12)
(cid:12)
(cid:12)
Such longest chain rule design can probabilistically prohibit faulty node behaviors, including malicious

n

o

(cid:0)

(cid:1)

i∈{1,2,··· ,M }

attacks, node mistakes, and connection errors (Wang et al. 2019).

The payoff function π is designed to offer rewards within a blockchain so that nodes participate in

the game as well as control reward amounts that have an exponential decay design (as demonstrated

in Figure 2):

the inﬂation rate =

tokens per block × block per second
total circulation

.

(11)

This inﬂation rate design can lead to a ﬁxed ﬁnite token supply, which is a necessary condition for

achieving a meaningful just price of money (Roets 1991). Such an aim can be achieved by choosing a

counting process for deciding the number of token rewards (Bowden et al. 2018), as demonstrated in

Figure 3. This reward process is summarized as follows:

(I) the intensity of the block arrival process is set to be (see Appendix A for detailed derivations)

(λt)t∈(t2016(s−1) ,t2016s] =

2016
t2016s − t2016(s−1)

=

1

1 − M

1 − 2016
Hs−1

600 

q
1 − M

1 − 2016
Hs

q
where the total hashes over time segment (t2016(s−1), t2016s] is deﬁned as



,





t2016s

Hs :=

h(t) dt

with

H0 :=

t2016(s−1)

Z

2016
1 − 1
232

M .

1 −

(cid:0)

(cid:1)

6

(12)

(13)

and the total hashrate ht at time t is the stochastic variable

h(t) :=

αi(t) ,

Xi∈{1,2,··· ,M }

which represents the total computational power nodes invest in, as well as the overall conﬁdence

or sentiment regarding the blockchain system

(II) the number of token in each block at time t is

kt = 50

1
2

(cid:18)

l

+ ¯k ,

(cid:19)

(14)

where each time interval l ∈ {1, ..., 32} includes 210000 blocks:

l = ⌊

2016Nt
210000

⌋,

omitting the small transaction fees ¯k → 0 .

Hence the number of cumulated tokens in circulation is

Kt = (210000 × 50)

2 )l
1 − ( 1
1 − 1
2 !

+ (2016 − mod (210000l, 2016))

50

1
2

(cid:18)

l

!

(cid:19)

.

(15)

Note that kt and Kt are both measured with block arrival process Nt (as described in Equation 2).

1

0.8

0.6

0.4

0.2

0
2010 2020 2030 2040 2050 2060 2070 2080 2090 2100 2110 2120 2130

Timeline

0

-5

-10

-15

-20

-25

-30

Figure 2: The token’s inﬂation rate in the Bitcoin blockchain is plotted over the timeline. As described
in Equation 11, the ratio of the number of tokens created over time to the total number of tokens in
circulation, which starts at 1 and decays exponentially until it reaches 0. This curve is controlled by
the design of Mechanisms (I) –(II).

N

21000000

19687500

18375000

15750000

10500000

l=1

l=2

](
t210000

0

N

2016s

2016(s−1)

8064

4032

2016

0

(

s=1

](
t2016

s=2

s=3

](
t4032

](
t6048

λs

1−λs

∆t

s

](
t2016(s−1)

](
t2016s

t

l=4

](
t840000

](
t210000(l−1)

l

](
t210000l

t

l=3

](
t420000

](
t630000

Figure 3: The block arrival process modeled as a counting process. The mining difﬁculty adjusts every
2016 blocks, while each block reward starts at 50 tokens per block and halves every 210,000 blocks.

7

 
 
Modern mathematical ﬁnancial theory postulates that perfect markets should have no arbitrage

opportunities available. Assuming an arbitrage-free token pricing model, the formation of total token

value should be converted from the total cost of resources used in the production through the mining

process (Hayes 2019).

Assumption 5 (Token Price). We assume that the market value of a token is an Ornstein-Uhlenbeck

process (OU-process) {bt}t∈[0,∞), which is driven by an equilibrium level of multiple of its cost of production

dbt = (ˆbt − bt) dt + σ dWt ,

where Wt is the standard Wiener process, and a multiple of the cost of a token production,

ˆbt = β

c(ht)
Kt

,

(16)

(17)

is the ratio of the blockchain production cost to the number of cumulated tokens in circulation Kt (as

described in Equation 15), which acts as an equilibrium level for the token price process: if the current

market value of the token process is less than the production price ˆbt, the drift will be positive; if the current

market value of the token process is greater than production price ˆbt, the drift will be negative.

The parameter β can be estimated from the curve ﬁtting tool, as demonstrated in Figure 4. We also

assume that the Poisson process is independent of the Wiener process.

Token Price Estimation

0.06

0.05

0.04

0.03

0.02

0.01

)

D
S
U
n
o

i
l
l
i

M

(
e
c
i
r

P
n
e
k
o
T

0
2009 2010 2011 2012 2013 2014 2015 2016 2017 2018 2019 2020 2021 2022
Timeline

Figure 4: The value of each reward is the token market price, labeled in blue stars, which is driven by
supply and demand in the marketplace. Fluctuations in supply and demand can exhibit large spikes or
drops, which are inﬂuenced by factors, including market information, regulations governing its sale,
speculation, consumer sentiment, and the rumor mill (Chu et al. 2015). Here, we assume the market
price of the token has a mean reversion OU-process, which can be shown as a multiple of its cost of
production (labeled in red). This parameter β = 2 × 104 is estimated by using the curve ﬁtting tool,
while simulating 18 sample paths and the volatility is set to be σ = 0.005.

Overall, Problem 4 boils down to an economics question: whether it is proﬁtable for nodes to

mine under the conditions provided by the PoW protocol 1.1 and the token price Assumption 5. We

can explore the answer by analyzing the equilibrium ˆα of the game of incomplete information Γ (in

Problem 4) and substituting the function π speciﬁed in Mechanisms (I) – (II).

8

 
 
 
1.2 Related Works and Main Results

Naturally, game theory approaches have been applied to problems of incentive mechanism design in

blockchain consensus protocols. There are a number of published surveys on game theoretical ap-

proaches to blockchain-related issues. Liu et al. (2019) reviews game models proposing to address com-

mon issues in blockchains, including security, mining management, and economic and energy trading.

Wang et al. (2019) provides a comprehensive survey on consensus mechanisms in blockchain backbone

networks and strategies for self-organization by individual nodes from a game-theoretic point of view.

Sadek Ferdous et al. (2020) presents a wide range of consensus algorithms and uses a comprehensive

taxonomy to examine their properties and implications in tabular formats and other illustrations. The

mechanism design of consensus protocol algorithms has also been discussed in (Weeks 2018) and other

forums.

Finding an MPE in Deﬁnition 2 is complex, but mean ﬁeld games are known to approximate in-

duced Stochastic Differential Games 1 well with a large number of nodes. Mean ﬁeld game theory

was ﬁrst created to study the concept of the MPE in stochastic differential games where the number of

players tends to inﬁnity. Introduced in (Lasry & Lions 2006, 2007), a similar approach was formulated

independently in (Huang et al. 2006). Successive online courses at the Collége de France (Lions 2007)

and lecture notes (Guéant et al. 2011) presented a number of developments, covering topics such as

the structures, concepts, and existence of equilibrium; links with Nash equilibria and dynamics in n-

player game theory (when n tends to inﬁnity); variational principles for decentralization; and notions

of stability in solutions. Since these concepts have been extensively developed, other authors have

made further contributions in various applications, notably in economics (Achdou et al. 2014, 2017).

If each node is considered to be small, thus having a negligible impact on the mean hashrate, there is

a convergence of the MPE to a weak MFE in open-loop cases. In some partial results and examples,

weak MFG equilibria can arise as the limit of the MPE (Lacker 2020). From a numerical perspective, a

ﬁnite difference method has been applied to approximate the mean ﬁeld equilibrium in several studies

(Achdou & Capuzzo-Dolcetta 2010, Achdou et al. 2013, Achdou & Porretta 2016, Achdou & Laurière

2020).

In our paper, we aim to test the modiﬁed mean ﬁeld game design of Stochastic Differential Games

1 with multi-dimensional dynamic formulations of some state dynamics (e.g., a wealth process and a

token price process). A few papers study blockchain technology adoption through the lens of mean ﬁeld

game theory. Li et al. (2019) studies the behavior of the mean ﬁeld game equilibrium in mining games,

in which nodes compete against each other for block rewards through the investment of computational

power (hashrate). Under this model, nodes are characterized by a one-dimensional wealth state, and

they may choose to invest in hashrate to maximize their expected utility within a ﬁxed time horizon. We

extend this framework by introducing an OU-process token price model that is driven by an aggregate

quantity (total hashrate). We also relax the time horizon, making it inﬁnite, by allowing the blockchain

to adjust the jump intensity of the block arrival process by the total hashrate in real time. As a result,

the wealth process in our mean ﬁeld game is a non-homogenous compound poisson process. Thus,

9

we need to extend the dimension of the state space, since the jump size depends on the token price

model we proposed. In contrast to Li et al. (2019), we choose a marginal utility that depends on the

control variable, which is also investigated in Bertucci et al. (2020). Bertucci et al. uses the solution of a

master equation to characterize an equilibrium of the mining game for one individual unit of computing

power devoted to mining for the blockchain. This master equation approach is robust when small

changes are made in modeling assumptions: it preserves the essential structure of the game across all

enrichment of various models. By contrast, we take a different approach by focusing on the Hamilton-

Jacobi-Bellman equation, which is integral to the solution of the master equation with respect to the

discounted total hashrate (Bertucci et al. 2020). Our focus allows us to introduce aggregate quantities

(the total hashrate) from microscopic decisions (investing in computational powers). Our approach also

has the advantage of using the forward-backward system with both the Hamilton-Jacobi-Bellman and

the Fokker-Planck equation, which is already well developed in the mathematical literature. Further,

the value function for the optimal control problem and the evolution of density function has a nice

real-world interpretation.

Our work contributes to the consensus protocol design of the core blockchain mechanism. First, we

build a more realistic framework, using Proof-of-Work (PoW) in a Bitcoin blockchain as an illustrative

example. Then, we discuss the security of the blockchain design that employs a mining incentive at the

equilibrium. We approach the intrinsic mechanism design problem by implementing a mean ﬁeld game

equilibrium. From the resulting numerical solution, we can predict long-run steady states at an inﬁnite

time horizon as well as short-run evolutionary dynamics. We show that the game arising from the PoW

mechanism leads to an equilibrium and the consensus protocol is well-posed. Consequently, we use this

idea to analyze and update the rules for the existing consensus protocol scheme in real-world situations,

as well as design a new consensus protocol scheme.

The remainder of this paper is organized as follows.

In Section 1, we introduce a basic model

formulation of the blockchain mechanism and raise a consensus protocol design problem. Section 2

uses a mean ﬁeld approximation to analyze the behavior of the equilibrium and develop an incentive

scheme for the consensus protocol design problem introduced in Section 1. Section 3 presents the

numerical results and discussion. The last section concludes with some remarks on possible future

directions.

2 Mean Field Game Analysis

In a mean ﬁeld game, one can describe population behavior as a distribution over the state space rather

than in terms of speciﬁc node’s identiﬁcation. Each node optimizes its payoff by solving a dynamic

programming problem, assuming the distribution of nodes is speciﬁed; on the other hand, if every node

uses its optimal control, we can better infer the distribution of nodes. Overall, if we start with a distribu-

tion and compute the best response strategy for every node, we will obtain a new stationary distribution

in population states. The ﬁxed point of this mapping is called a Mean Field Equilibrium (MFE). In this

10

section, we give a formal deﬁnition for an MFE in the PoW protocol, and then demonstrate the existence

of the MFE in next section.

First, consider a histogram that counts the number of nodes which fall under each of the disjoint

initial wealth-token price categories. Let m(t, x, b) be such a density function, denoting the fraction of

nodes whose state is (x, b) ∈ R2 at time t, i.e.,

m(t, x, b) ≈

1
M (t)

i
X

1

xi(t)=x, bj (t)=b

.

(cid:8)

(cid:9)

(18)

Equation 18 can then be interpolated by a continuous curve of smooth frequencies over the bins of the

histogram, normalizing it to 1. The notion of a continuum of nodes captures scenarios in which the

interaction between nodes is a probability distribution of random variables that fall within a particular

range of values in their state space, so that each node is labeled by its two-dimensional wealth-token

price state, which is independent of the node’s identity. Such mathematical treatment is widely used

for exploring the collective behavior of interacting agents in physics and biology (Bolley et al. 2011,

Liu et al. 2021, 2020). It also has a wide range of application in mathematical ﬁnance (Casgrain & Jaimungal

2020, Mkiramweni et al. 2019, Nie & Rutkowski 2018). For ease of notation, we omit dependency on

subscripts i and j for the remainder of the paper.

Game 6 (Mean Field Game). The distribution of nodes is now deﬁned as a continuously differentiable

density function, m(t, x, b), which satisﬁes

m(t, x, b) dx db = 1 ∀t ∈ [0, ∞) ,

(19)

ZX ZB

subject to an initial condition m(0, x, b). Each node is labeled by the two-dimensional wealth state x ∈ X

and the token price state b ∈ Y , with boundary conditions at min(X) = 0 and min(Y ) = 0 for nonnegative

wealth-token price state space constraints.

(I) Each node invests in the hashrate to participate in the mining game. Because it is cheaper to buy the

same computational power over time, a node can acquire more hashes per second for the same cost.

Here we focus on the feedback control process αt(x, b), the hashrate discounted by the rate of the

technological progress at time t (i.e., the notion of real hashrate as found in Bertucci et al. (2020)).

Let the set of the admissible Markovian feedback control process be denoted by

αt(x, b) : [0, ∞) × X × Y → R | αt is adapted to the ﬁltration {Ft}t≥t′
n

o

(20)

(II) Each node aims to maximize its expected total utility over the inﬁnite-time horizon [0, ∞)

∞

E

max
αt

0

(cid:20)Z

e−rtu(t, xt, bt, αt) dt

x(0) = x0, b(0) = b0

,

(21)

(cid:12)
(cid:12)
(cid:12)

(cid:21)

where r > 0 is an instantaneous interest rate, and the marginal utility function is assumed to be

11

strictly concave with the control variable

u : [0, ∞) × X × Y × R → R .

(22)

For example (see Section 3), it may take the following form

u(αt) = θ1 log(αt + θ2) + θ3 − cαt ,

which is the node’s revenue minus the total expenditure of the hardware and electricity cost.

(III) The dynamics of states evolve in a controlled Markovian fashion: the wealth state x changes due to

mining rewards and the expense of mining, i.e.,

dxt =

rxt − c(αt)

dt + ktbt dNt ,

(23)

(cid:16)

(cid:17)

where c(αt) > 0 represents the cost to compute hashes in new generations of a mining machine in

terms of dollars. The mining reward for a node depends on the total rewards given to the network

of nodes; as well as the node’s probability of receiving its mining reward αt
ht

, which is proportional

to the ratio of the hashrate it invests in as a fraction of the total network hashrate. Thus, it can be

modeled by a non-homogenous compound Poisson process Nt ∼ Poisson( λt
ht

αt), such that

• the rate at which a network of nodes ﬁnds blocks λ(t) is given in Equation 12;

• the number of tokens in each block kt is given in Equation 14.

• the value of each token bt is modeled as an OU-process in Assumption 5

dbt = (ˆbt − bt) dt + σ dWt ,

(24)

where Wt is the standard Wiener process, and the cost of a token production ˆbt = β c(ht)
Kt

.

(IV) In contrast to the mean ﬁeld game model in the current literature (Li et al. 2019), our model has

nodes whose states dynamics are coupled through the mean optimal control ¯αt in the total hashrate

term

ht := M (t)¯αt

where

¯αt =

ˆα(t, x, b)m(t, x, b) dx db .

(25)

ZX ZB

Here, m(t, x, b) denotes the wealth-token price distribution when every node uses the optimal control

ˆα(t, x, b) at time t. Note that total hashrate term has appeared in Equation 17 and Equation 12.

2.1 Inﬁnitesimal Generator

Lemma 7. For a ﬁxed αt, there exists a unique, right-continuous and left-limit F-adapted solution to the

stochastic differential equation for the jump-diffusion states process

xt

bt

d 




= 









rxt − c(αt)

ˆbt − bt

ktbt

0






dNt + 




0

σ











dt + 




12

dWt

(26)

with a random initial value

0, x(0), b(0)

=

0, x0, b0

.

(cid:1)
Proof. See Theorem 4 (Gaviraghi 2017).

(cid:0)

(cid:0)

(cid:1)

Denote xs− := lim
s′րs

xs′ , under the assumption that the jumps are instantaneous, the differential

Poisson dNt conditions the existence of a block arrival, which behaves asymptotically for small λ dt in

the interval (t, t + dt], i.e.,






λt
ht

P{dNt = n} =

+ O2 (dt) .

1 − λt
ht

αt dt, n = 0

αt dt,

λt
ht

0,

n = 1

n > 1






Thus, the change of a testing function υ (t, xt, bt) of the jump-diffusion states process 26, ∆υ (t, xt, bt),
can be decomposed into the sum of continuous and discontinuous changes, which gives us

∆υ (t, xt, bt) = υ (t + ∆t, xt+∆t, bt+∆t) − υ (t, xt, bt)

=

∂υ (t, xt, bt)
∂t

"

+

rxt − c(αt)

(cid:16)

∂
∂xt

(cid:17)

υ (t, xt, bt) + (ˆbt − bt)

∂
∂bt

υ (t, xt, bt) +

σ2
2

∂2
∂b2
t

υ (t, xt, bt)

∆t

#

+ σ

∂
∂bt

υ (t, xt, bt) ∆Wt +

α(t, xt, bt)

R

Z

(cid:16)

υ

t, xt− + z, bt

− υ

t, xt− , bt

δ(z − ktbt) dz∆t .

(cid:0)

(cid:1)

(cid:0)

(cid:1) (cid:17)

Taking the expectation E[·] over wealth and token price, dividing them by ∆t and taking the limit
∆t → 0, we obtain a Cauchy problem

d
dt

E [υ (t, xt, bt)] =

lim
∆t→0

E [υ (t + ∆t, xt+∆t, bt+∆t)] − E [υ (t, xt, bt)]
∆t

=

∂υ (t, xt, bt)
∂t

"

+

λt
ht

α(t, xt, bt)

(cid:16)

R
(cid:16) Z

+

rxt − c(αt)

∂
∂xt

(cid:17)

υ (t, xt, bt) + (ˆbt − bt)

∂
∂bt

υ (t, xt, bt) +

σ2
2

∂2
∂b2
t

υ (t, xt, bt)

#

υ

t, xt− + z, bt

δ(z − ktbt) dz − υ

t, xt− , bt

(cid:0)

(cid:1)

(cid:0)

(cid:1) (cid:17)

(27)

with an initial condition υ(0, x(0), b(0)) = υ(0, x0, b0).

Let the evolution operators {Tt}t∈[0,∞) denote the family of ﬂows associated with stochastic process

26. By the existence and uniqueness of the solution to the initial-value problem 26, as demonstrated in

Lemma 7, the family of ﬂows {Tt}t∈[0,∞) constitutes semi-group properties (Kunita 1997), allowing us

to deﬁne the inﬁnitesimal generator A of the semigroup {Tt}t∈[0,∞) as

Aυ := lim
t→0

Ttυ − υ
t

.

(28)

Thus, the inﬁnitesimal generator A of the ﬂows deﬁned in Equation 28 takes the following form:

Aυ (t, x, b)

:=

rx − c(αt)

(cid:16)
+

λt
ht

(cid:17)
α(t, x, b)

∂
∂x

υ (t, x, b) + (ˆbt − b)

∂
∂b

υ (t, x, b) +

σ2
2

∂2
∂b2

υ (t, x, b)

υ (t, x, z) δ(z − x − ktb) dz − υ (t, x, b)

(29)

(cid:19)

R
(cid:18)Z

Let m(t, xt, bt) be the density function at time t, and denote with h·, ·i the L2-inner product. The adjoint

operator A∗ is deﬁned as

hAυ, mi = hυ, A∗mi

(30)

13

The left hand side of Equation 27 gives

E

d
dt

υ (t, xt, bt)

=

h

ZX ZB

i

∂υ(t, xt, bt)
∂t

m(t, xt, bt) db dx +

∂m(t, xt, bt)
∂t

ZX ZB

υ(t, xt, bt) db dx , (31)

while the right hand side of Equation 27 is

d
dt

E [υ (t, xt, bt)] =

m(t, xt, bt)

+

rxt − c(αt)

υ (t, xt, bt) + (ˆbt − bt)

∂
∂bt

υ (t, xt, bt)

∂υ (t, xt, bt)
∂t

(cid:20)

ZX ZB
σ2
∂2
∂b2
2
t

+

υ (t, xt, bt) +

λt
ht

α(t, xt, bt)

∂
∂xt

(cid:17)
t, xt− + z, bt

(cid:16)

υ

R
(cid:16) Z

δ(z − ktbt) dz − υ

t, xt− , bt

(cid:0)

(cid:1)

(cid:0)

#

(cid:1) (cid:17)

db dx .

(32)

Combining the results of Equations 31 and 32, we obtain

∂m(t, xt, bt)
∂t

ZX ZB

υ(t, xt, bt) db dx =

m(t, xt, bt)

rxt − c(αt)

+

σ2
2

∂2
∂b2
t

υ (t, xt, bt) +

α(t, xt, bt)

ZX ZB
λt
ht

(cid:18)(cid:16)
υ

(cid:17)
t, xt− + z, bt

R

(cid:18)Z

∂
∂xt

υ (t, xt, bt) + (ˆbt − bt)

∂
∂bt

υ (t, xt, bt)

(cid:0)

(cid:1)

(cid:0)

δ(z − ktbt) dz − υ

t, xt− , bt

db dx .

(33)

(cid:19)!

(cid:1)

When applying integration by parts to Equation 33 (Gaviraghi 2017), A∗ takes the following form:

A∗m (t, x, b)

:= −

rx − c(αt)

m (t, x, b)

−

ˆbt − b

m (t, x, b)

+

∂
∂b

h(cid:16)
α(t, x, z)m (t, x, z) δ(z − x + ktb) dz −

h(cid:16)

(cid:17)

i

i
α(t, x, b)m (t, x, b) .

(cid:17)
λt
ht

σ2
2

∂2
∂b2

m (t, x, b)

(34)

∂
∂x
λt
ht

R

Z

The decision of nodes and the evolution of the joint distribution of their wealth-token price process can

be summarized using inﬁnitesimal generators. Thus, we can use these generators to derive a Hamilton-

Jacobi-Bellman equation and a Fokker-Planck equation.

2.2 Hamilton-Jacobi-Bellman Equation

In this subsection, we aim to deﬁne an operator to capture the phenomenon of each node solving

stochastic control problem 21, subject to the underlying controlled jump-diffusion dynamics 26 for a

given population distribution.

We can achieve this by applying Bellman’s principle of optimality and then working out the optimal

control 20 backwards in time. To do so, deﬁne the value function

v(0, x0, b0) := sup
αt

E

∞

0

(cid:20)Z

e−rtu(t, xt, bt, αt) dt

x(0) = x0, b(0) = b0

.

(35)

(cid:12)
(cid:12)
(cid:12)

(cid:21)

Inspired by the lemma proposed by Li et al. (2019), which states that having more wealth gives nodes

greater ﬂexibility to choose their hashrates, we have made the following assumption.

Assumption 8. Fix a choice of α ∈ O(t), the value function v(t, x, y) is ﬁnite and strictly increasing in

wealth x, ∀t ∈ [0, ∞).

The value function deﬁned in Equation 35 satisﬁes Bellman’s principle of optimality

v (t, x(t), b(t)) = sup
αt

u(t, x, b, α)∆t + e−r∆t E [v (t + ∆t, xt+∆t, bt+∆t)]

,

(36)

n

o

14

where E[·] is the expectation over wealth x(t + ∆t) and token price b(t + ∆t).

First, we substitute e−r∆t = 1 − r∆t + O(∆t2) into Equation 36

v (t, x(t), b(t)) = sup
αt

u(t, x, b, α)∆t + (1 − r∆t) E [v (t + ∆t, xt+∆t, bt+∆t)]

+ O(∆t2) ,

(37)

n

o

and subtract (1 − r∆t)v(t, x(t), b(t)) from both sides to obtain

rv (t, x(t), b(t)) ∆t = sup
αt

n

(cid:2)

u(t, x, b, α)∆t + (1 − r∆t) E

v (t + ∆t, xt+∆t, bt+∆t) − v (t, x(t), b(t))

+ O(∆t2) (38)

Then, dividing the above expression by ∆t, we ﬁnd

rv (t, x(t), b(t)) = sup
αt

u(t, x, b, α) + (1 − r∆t) E
h

n

Taking the limit ∆t → 0, Equation 39 yields

v (t + ∆t, xt+∆t, bt+∆t) − v (t, x(t), b(t))
∆t

(cid:3)o

io

+ O(∆t) (39)

rv (t, x(t), b(t)) = sup
αt

u(t, x, b, α) +

n

d
dt

E [v (t, x(t), b(t))]

o

(40)

Using Equation 27, we obtain the Hamilton-Jacobi-Bellman equation:

rv (t, x, b) = sup

u(t, x, b, α) +

rx − c(αt)

v (t, x, b)

∂
∂x

(cid:17)

α (cid:26)

+

λt
ht

α(t, x, b)

(cid:16)

R

(cid:18)Z

v (t, x, z) δ(z − x − ktb) dz − v (t, x, b)

+(ˆbt − b)

∂
∂b

v (t, x, b) +

σ2
2

∂2
∂b2

v (t, x, b) +

∂v (t, x, b)
∂t

(cid:19)(cid:27)

(41)

The optimal control ˆαt maximizes the following objective:

u(t, x, b, αt) +

rx − c(αt)

(cid:16)

v (t, x, b) +

∂
∂x

(cid:17)

λt
ht

αt

R

Z

(cid:16)

v (t, x, z) − v (t, x, b)

δ(z − x − ktb) dz .

(42)

(cid:17)

Thus, Equation 42 can be used to recover optimal control. Since the node’s expenditure has to be

less than or equal to its wealth, we can reﬁne the set of admissible Markovian feedback control in

Equation 20 as

O(t) :=

ˆαt ≥ 0

ˆαt = arg max

u(t, x, b, αt) +

rx − c(αt)

(cid:26)

(cid:12)
(cid:12)
(cid:12)

n

+

λt
ht

αt

R

Z

(cid:16)

In particular, the active nodes comprise the set

(cid:16)

v (t, x, b)

∂
∂x

(cid:17)

v (t, x, z) δ(z − x − ktb) dz − v (t, x, b)

.

(43)

(cid:17)o(cid:27)

O∗(t) :=

ˆαt > 0

ˆαt ∈ O(t)

.

(44)

Assumption 9 (Boundary Conditions). Assuming that the token price process is reﬂected at the line b = 0

n

(cid:12)
(cid:12)
(cid:12)

o

and b = max(Y ), one can show that this gives rise to the following boundary conditions for v in b-direction:

=

∂v(t, x, b)
∂b

b=0

∂v(t, x, b)
∂b

(cid:12)
(cid:12)
(cid:12)

= 0 .

b=max(Y )
(cid:12)
(cid:12)
(cid:12)

15

(45)

Let max(X) be large enough to obtain

∂v(x, b)
∂x

= 0 .

(46)

x=max(X)
(cid:12)
(cid:12)
(cid:12)

Since nodes cease their mining if their wealth hits 0, so that the boundary condition with respect to the

wealth dimension at x = 0 is chosen to be

c(αt)|x=0 = 0 .

(47)

Remark. The viscosity solutions of Hamilton-Jacobi equations with such boundary conditions have
been studied in Qiu (2018). Here, it is convenient to introduce the Hamiltonian for Equation 41

H(x, b, p) := sup

u(t, x, b, α) +

α (cid:26)

rx − c(αt)

p +

(cid:16)

(cid:17)

λt
ht

αt

R

Z

v (t, x, z) δ(z − x − ktb) dz − v (t, x, b)

.

(48)

(cid:16)

(cid:17)o(cid:27)

The non-decreasing and non-increasing envelopes H ↑ and H ↓ of p 7→ H(x, b, p) can be deﬁned as

H↑(x, b, p) =

sup
0≤c(α)≤rx (cid:26)

u(t, x, b, α) +

rx − c(αt)

p +

(cid:16)

(cid:17)

λt
ht

H↓(x, b, p) =

sup
max(0,rx)≤c(α) (cid:26)

u(t, x, b, α) +

rx − c(αt)

p +

(cid:16)

(cid:17)

αt

v (t, x, z) δ(z − x − ktb) dz − v (t, x, b)

,

R

(cid:16)

Z
λt
ht

αt

R

Z

(cid:16)

(cid:17)o(cid:27)
v (t, x, z) δ(z − x − ktb) dz − v (t, x, b)

.

(cid:17)o(cid:27)

Similar to the method as presented in Achdou & Laurière (2020), it can be seen that

H(x, b, p) = H ↑(x, b, p) + H ↓(x, b, p) − min
p∈R

H(x, b, p).

Thus, the boundary condition for the value function associated with the state constraint satisﬁes

rv (t, 0, b) = sup

α

n

u(t, 0, b, α) + H↑(0, y, ∂xv|x=0)

+ (ˆbt − b)

o

∂
∂b

v (t, 0, b) +

σ2
2

∂2
∂b2

v (t, 0, b) +

∂v (t, 0, b)
∂t

.

(49)

Overall, we can interpret the properties of the solution to the Hamilton-Jacobi-Bellman Equation 41

using the operator A.

Deﬁnition 10. Deﬁne an optimal control operator

A : [0, ∞) × X × Y → [0, ∞) × O,

where

A[m](t, x, b) =

ˆα(t, x, b) ∈ O

value function v satisﬁes Equation 41 and Equation 49 for a given distribution m

,

o

n

(cid:12)
(cid:12)
(cid:12)

which captures the postulate that nodes will optimize their running payoffs when the distribution of other

nodes is ﬁxed.

2.3 Fokker-Planck Equation

Population behavior can be described through evolutionary distribution of nodes. In this subsection, we

aim to deﬁne an operator to capture population behavior arising from nodes under optimal control.

16

First, using Equation 34 and letting ∂m(t,x,b)

∂t

= A∗m (t, x, b), we can get a Fokker-Planck equation,

i.e.,

∂m (t, x, b)
∂t

= −

+

∂
∂x

R

Z

h(cid:16)
λt
ht

m (t, x, b)

rx − c(αt)

ˆbt − b
(cid:17)
α(t, x, z)m (t, x, z) δ(z − x + ktb) dz −

h(cid:16)

−

(cid:17)

i

∂
∂b

m (t, x, b)

i

λt
ht

+

σ2
2

∂2
∂b2

m (t, x, b)

α(t, x, b)m (t, x, b) .

(50)

with initial condition m

0, x(0), b(0)

= m0(x0, b0);.

Assumption 11 (Boundary Conditions). For 0 ≤ x ≤ ktb, there is no density at x − ktb jumping to x.

(cid:0)

(cid:1)

Thus, density m (t, x, b) satisﬁes the following boundary conditions

∂m (t, x, b)
∂t

= −

∂
∂x

rx−c(αt)

m (t, x, b)

−

h(cid:16)

(cid:17)

i

∂
∂b

m (t, x, b)

ˆbt−b
(cid:17)

h(cid:16)

+

σ2
2

∂2
∂b2

i

m (t, x, b)−

λt
ht

α(t, x, b)m (t, x, b) .

(51)

We solve for m (t, x, b), where the sum of a measure is continuous with respect to a two-dimensional

Lebesgue measure on (0, ∞) × [0, ∞) with a density ¯m and a measure η that is supported by the line

{x = 0} × [0, ∞):

dm(t, x, b) = ¯m(t, x, b) dx db + dη(t, b) .

(52)

Thus, Equation 50 has a weak form for every test function υ:

Zx>0 Zb≥0

¯m(t, x, b)

Hp

x, b, ∂xv(t, x, b)

∂xυ(t, x, b) + (ˆbt − b)

+

Zb≥0  

(cid:16)
0, b, ∂xv(t, 0+, b)

(cid:17)

H↑
p

∂xυ(t, 0, b) + (ˆbt − b)

(cid:16)

(cid:17)

∂
∂b

∂
∂b

υ (t, 0, b) +

υ (t, 0, b) +

σ2
2
σ2
2

∂2
∂b2
∂2
∂b2

υ (t, 0, b)

dx db

!

υ (t, 0, b)

dη(b)

!






= 0

(53)

Hence, we can deﬁne the operator M in a way that corresponds to the solution to the Fokker-Planck

Equation 50 and captures the phenomenon that a new distribution arises every time nodes use an

optimal strategy.

Deﬁnition 12. Deﬁne a distribution evolution operator

M : [0, ∞) × O × X × Y → [0, ∞) × X × Y

where

M[ ˆα](t, x, b) =

m(t, x, b)

distribution m satisﬁes Equation 50 and Equation 53 for given optimal control ˆα

,

n

(cid:12)
(cid:12)
(cid:12)

o

maps a mean ﬁeld control ˆα(t, ·, ·) and the distribution of nodes’ states m(t, ·, ·) to a new distribution

M (ˆα(t, ·, ·), m(t, ·, ·)).

2.4 Mean Field Equilibrium

The composition of the two operators described in Deﬁnition 10 and Deﬁnition 12 leads to a ﬁxed point,

giving the MFE of the game. Because optimal control gives rise to dynamics involving a large number

of nodes, a single node has a negligible effect on the game’s outcome as the number of nodes increases:

the effect of other nodes on a single node’s payoff and ﬂuctuations in motion dynamics will “average

17

 
out". Thus, we expect that states remain roughly constant over time. To formalize this notion, we deﬁne

MFE as follows:

Deﬁnition 13 (Mean Field Equilibrium). The mean hashrate is called a Mean Field Equilibrium (MFE)

of mean ﬁeld game 6, if and only if

¯αt =

ˆα(t, x, b)m(t, x, b) dx db ,

ZX ZB

where ˆα(t, ·, ·) ∈ A (m(t, ·, ·)), and the invariant distribution m(t, ·, ·) ∈ M (ˆα(t, ·, ·), m(t, ·, ·)) is a ﬁxed

point of the operator

such that

Φ : [0, ∞) × X × Y → [0, ∞) × X × Y ,

The MFE as described in Deﬁnition 13 is the solution to the time-dependent backward-forward

Φ

m(t, ·, ·)

(cid:16)

A

= M
(cid:16)

(cid:17)

m(t, ·, ·)

, m(t, ·, ·)

.

(cid:0)

(cid:1)

(cid:17)

system PDEs 41 and 50, with boundary conditions 49 and 53 and with parameters (12–17, 12–25),

where the density m(t, x, b) satisﬁes the initial condition m

0, x(0), b(0)

= m0(x0, b0); and the value

function v(t, x, b) satisﬁes a terminal condition

(cid:0)

(cid:1)

v(∞, x, b) = v∞(x, b).

The value function v∞(x, b) is the solution to the time-independent version of these system PDEs 41

and 50, when the state dynamics induced by ˆα(∞, ·, ·) and m(∞, ·, ·) form an invariant distributions

over the inﬁnite-time horizon.

Remark. As t → ∞, the steady state will be reached when ∂v(t,x,b)

∂t → 0 and ∂m(t,x,b)

∂t → 0. We denote

the number of cumulated tokens 15 to be K∞, the number of block rewards 14 to be k∞, and the block

arrival rate 12 to be λ∞, respectively, at the inﬁnite-time horizon t → ∞, i.e.,

K∞ =

210000 × 50
2l

∞

Xl=0

→ 2.1 × 107;

k∞ = 50

l

1
2

(cid:18)

(cid:19)

+ ¯k → ¯k; λ∞ =

1
600 



1 − M

q
1 − M

1 − 2016
Hs−1
1 − 2016
Hs

q

→

1
600

(54)






Substituting token price 17 and reward arrival intensity 12, the system of time-independent PDEs be-
comes






rv∞ (x, b) = sup

u

t, x, b, α∞(x, b)

+

rx − c

α∞(x, b)

α (cid:26)

(cid:16)
− λ∞

(cid:17)

(cid:16)

¯α∞M α∞(x, b)v∞ (x, b) +

∂
∂x

(cid:1)(cid:17)
− b

(cid:19)

v∞ (x, b) +

λ∞
¯α∞M

α∞(x, b)v∞ (x + k∞b, b)

(cid:27)

∂

∂b v∞ (x, b) + σ2

2

∂2
∂b2 v∞ (x, b)

(cid:0)
βc

(cid:18)

¯α∞M
K∞
(cid:0)

(cid:1)

ˆα∞

= arg max

u

t, x, b, α∞(x, b)

+

rx − c

α∞(x, b)

∂

∂x v∞ (x, b) + λ∞

¯α∞M α∞(x, b)v∞ (x + k∞b, b)

0

= − ∂
∂x

(cid:16)
n
rx − c

(cid:17)

(cid:16)

ˆα∞(x, b)

m∞ (x, b)

(cid:0)
− ∂
∂b

βc

i

h(cid:16)

(cid:1)(cid:17)
¯α∞M
K∞
(cid:0)

(cid:1)

h(cid:16)
+ λ∞

(cid:0)

(cid:1)(cid:17)

¯α∞M ˆα∞(x − k∞b, b)m∞ (x − k∞b, b) − λ∞

i
(cid:17)
¯α∞M ˆα∞(x, b)m∞ (x, b)

− b

m∞ (x, b)

+ σ2

2

∂2
∂b2 m∞ (x, b)

¯α∞

=

ˆα∞(x, b)m∞(x, b) dx db .

ZX ZB

18

o

(55)

The MFE deﬁned above fully characterizes the evolution of the mining game. The numerical method

for solving the MFE has been well-developed. Here, we apply a methodology based on ﬁnite difference

schemes as presented in Achdou & Laurière (2020). The steps are organized as follows:

Step 1 Use ﬁnite difference schemes to solve the system of time-independent PDEs 55 iteratively, for a

steady terminal condition at the inﬁnite time horizon t → ∞.

Step 2 Initialize ¯α(t), and for each time iteration

(I) Solve for the value function v(t, x, b) in the Hamilton-Jacobi-Bellman Equation 41, which

runs backwards in time with terminal condition v∞(x, b), as solved in Step 1.

(II) Recover the optimal control ˆα(t, x, b) using Equation 58 with the value function v(t, x, b), as

solved in Step 2 (I).

(III) Solve for the density function m(t, x, b) in the Fokker-Planck Equation 50 using the opti-

mal control ˆα(t, x, b) from Step 2 (II), which runs forward in time with an initial condition

m0(x0, b0).

(IV) For each time iteration, introduce a parameter of inertia, w ∈ [0, 1), to reduce oscillations in

searching for the equilibrium (here we set w := k ¯α(t)new − ¯α(t)k
k ¯α(t)new − ¯α(t)k∞

for fast convergence); and

update the mean hashrate ¯α(t) according to

¯α(t)new := w ¯α(t) + (1 − w)

R

R

Z

Z

ˆα(t, x, b)m(t, x, b) dx db ,

(56)

using the optimal control ˆα(t, x, b) from Step 2 (II) and the density function m(t, x, b) from

Step 2 (III).

Step 3 Repeat Step 2 with ¯α(t) = ¯α(t)new until convergence results.

In the next section, we will demonstrate a numerical result for this MFE and test if mappings Ψ and

π in the Bitcoin consensus protocol, as described in Problem 4, is well designed.

3 Results

In this section, we use mappings Ψ and π in the Bitcoin consensus protocol (as described in Section 1.1),

as well as estimated parameters in Game 6, to demonstrate a numerical result for the MFE (as described

in Section 2.4). We also analyze mining proﬁtability and blockchain security for this equilibrium, and

discuss whether the Bitcoin consensus protocol is well designed.

3.1 Parameter Estimation

Let the time to start mining (t = 0) be 03-Jan-2009 13:15:00. For simplicity, we have altered the

timescale from seconds to fortnights when presenting a numerical solution. Assume the interest rate is

2% per annum, which can be rescaled to r = 7.67 × 10−4 per fortnight. Set I = 200 discrete points

19

in the wealth dimension and J = 220 points in the token price dimension. Let ∆x = 5 × 1013 and

∆b = 4.6 × 1013 denote the equal distance between grid points.

(a)

(b)

Hardware Efficiency Estimation

l

e
a
c
S
g
o
L

n
o
)

H
T

i

/
t
h
g
n
t
r
o
F
W

(

y
c
n
e
c
i
f
f

i

E
e
r
a
w
d
r
a
H

-10

-12

-14

-16

-18

-20

-22

-24

-26

-28

Expected Revenue Estimation

900

800

700

600

500

400

300

200

100

)
t

h
g
n

i

t
r
o
F
r
e
p
D
S
U
n
o

i
l
l
i

M

(

e
u
n
e
v
e
R

2009 2010 2011 2012 2013 2014 2015 2016 2017 2018 2019 2020 2021 2022
Timeline

(c)

(d)

10-8

3.65

Eletricity Price Estimation

i

)
t
h
g
n
t
r
o
F
W

/

D
S
U
n
o

i
l
l
i

M

(

e
c
i
r

P
y
t
i
c
i
r
t

l

e
E

3.6

3.55

3.5

3.45

3.4

3.35

3.3

3.25

2009 2010 2011 2012 2013 2014 2015 2016 2017 2018 2019 2020 2021 2022
Timeline

0
2009 2010 2011 2012 2013 2014 2015 2016 2017 2018 2019 2020 2021 2022
Timeline

107

Number of Miners Estimation

9

8

7

6

5

4

3

2

1

s
r
e
n
M

i

f
o

r
e
b
m
u
N

0
2009 2010 2011 2012 2013 2014 2015 2016 2017 2018 2019 2020 2021 2022
Timeline

Figure 5: Fitting curves to estimate model parameters: (a) Fitting a curve to the energy efﬁciency data
of mining hardware over a timeline, to estimate the average initial efﬁciency value and the technology
discount rate. (b) Fitting a curve to revenue data from different nodes, to estimate how much revenue
each unit of TeraHashes can yield over the time horizon. (c) Fitting a curve to cost data over the
timeline, to estimate the cost of the hashrate when discounted by the rate of technological progress.
(d) Fitting a curve to data on node quantity over the timeline, to estimate the growth of number of
nodes in the network.

We conducted an extensive and holistic review of the literature, extracting data from peer-reviewed

scientiﬁc publications (Pathirana et al. 2019, Hayes 2017), and mining machine stores websites, to

thoroughly investigating mining hardware efﬁciencies. By assuming that mining hardware converts

electricity into hashing computation at the highest possible rate, mining hardware efﬁciencies can be

calculated by taking the ratio of power consumption data to the corresponding hashrate it produces.

Given that the resulting ratio decreases exponentially over time, we plotted this efﬁciency data in a

log scale over the timeline, as demonstrated in Figure 5a. From the ﬁtted curve, the coefﬁcients are

−0.04 ∈ [−0.05, −0.03] and −12.88 ∈ [−14.16, −11.61] with 95% conﬁdence bounds. Thus, the average

energy efﬁciency of mining hardware at the initial time is estimated to be e−12.88 = 2.55 × 10−6 (W per

TeraHash/Fortnight), and the technology discount rate is estimated to be 0.04 (per Fortnight).

Assuming that nodes study the relationship between revenue and their hashrate over time, we

collected real data 2 from 1449 different nodes as well as from reputable commercial sources (such

2Special thanks to ListedReserve Pty Ltd for providing a rich data source

20

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
as blockchain.com) to estimate how much revenue each unit of TeraHashes can yield. A curve ﬁtting

tool was applied as shown in Figure 5b; the coefﬁcients are 132.8 ∈ [102.9, 162.8] and 1.19 × 105 ∈

[4.22 × 104, 1.95 × 105] with 95% conﬁdence bounds. Our ﬁndings suggest that the expected revenue

can be expressed in the form of θ1 log(αt + θ2) + θ3.

Moreover, by assuming that the primary ongoing cost of mining is driven by the sum of the cost of

electricity and the cost of updating mining equipment, we plotted the ongoing cost over the timeline.

Notably, the growth rate is approximately linear, as depicted in Figure 5c. In the ﬁtted curve, the coef-

ﬁcients are 9.05 × 10−12 ∈ [9.04 × 10−12, 9.05 × 10−12] and 3.32 × 10−8 ∈ [3.32 × 10−8, 3.32 × 10−8]

with 95% conﬁdence bounds. This shows that mining software and hardware are exponentially improv-

ing at the rate of technological progress over the time horizon. The linear cost growth in Figure 5c is

negligible compared to the exponential growth rate of technological progress. The cost of the hashrate

discounted at the rate of technological progress is the product of the primary ongoing cost 3.32 × 10−8

(Million USD / W Fortnight) and the average energy efﬁciency of mining hardware 2.55 × 10−6 (W per

TeraHash / Fortnight) at the initial time, which gives c = 8.43 × 10−14 (Million USD per TeraHash).

For simplicity, we have also assumed the cost function to be linear c(α) = cα. Given the lowest

possible price for the energy required and the most efﬁcient equipment (as described above), the utility

(in Million USD) can be written as the difference between revenue and cost, which is represented as

u(αt) = 132.82 log(αt + 1.19 × 105) − (8.43 × 10−14)αt − 1551.86 .

(57)

The utility function 57 is concave, as demonstrated in Figure 6.

3000

2500

2000

1500

1000

500

0

)

D
S
U
n
o

i
l
l
i

M

(

t
i
f

o
r
P

-500

0

1

2

3

4

5
Hashrate Control (TeraHash)

6

7

8

9

10
1015

Figure 6: Utility function as described in Equation 57.

Using Deﬁnition 43, the optimal control hashrate can be written as

ˆαt = arg max

θ1 log(αt + θ2) + θ3 − cαt + (rx − cαt)

(cid:26)

∂
∂x

v (x, b) +

λt
ht

αt

v (x + ktb, b) − v (x, b)

.

(cid:16)

(cid:17)(cid:27)

Taking the derivative with respect to optimal control renders a result that is equal to 0.

θ1
ˆαt + θ2

− c − c

∂
∂x

v (x, b) +

v (x + ktb, b) − v (x, b)

= 0 .

(cid:17)

λt
ht

(cid:16)

21

 
 
We can recover the optimal control:

ˆαt =

c + c ∂

∂x v (x, b) + λt
ht

θ1
(v (x, b) − v (x + ktb, b))

− θ2 .

(58)

A node with negative wealth does not possess resources to mine. We may apply a constraint that renders

a node with zero optimal hashrate as inactive. Thus, for active nodes, we obtain

O(t) =

ˆα(x, b, t) > 0

ˆα(x, b, t) =

(

c + c ∂

∂x v (x, b) + λt
ht

θ1
(v (x, b) − v (x + ktb, b))

− θ2

.

)

(59)

(cid:12)
(cid:12)
(cid:12)

To analyze the ﬁxed point of the mapping described in Deﬁnition 13, we tested our model with an

increasing node growth model M (t) = axb in the form of a power function, as shown in Figure 5d. In

the ﬁtted curve, the coefﬁcients are 6.58 × 10−3 ∈ [4.29 × 10−3, 8.87 × 10−3] and 4.00 ∈ [3.94, 4.06]

with 95% conﬁdence bounds. We remark that modeling the number of nodes is a separate issue, which

is beyond the scope of the current paper.

3.2 Mean Hashrate

A converged MFE consists of a long-run steady state as well as short-run dynamics, as shown in Figure 7.

This ﬁgure represents the dynamic of computational power devoted to blockchain mining, which is

measured by the number of trillion hashes computed per fortnight (TeraHash/Fortnight).

1.23441105

1017

)

H
T
(

e
t
a
r
h
s
a
H
n
a
e
M
d
e
g
r
e
v
n
o
C

1.23441104

1.23441103

1.23441102

1.23441101

1.234411

1.23441099

2010 2020 2030 2040 2050 2060 2070 2080 2090 2100 2110 2120 2130

Timeline

Figure 7: Converged mean hashrate over time, as described in deﬁnition 13. The discounted hashrate
has increased from 1.23441099×1017 to 1.23441105×1017 . The increment is approximately 5.82×109
TeraHash.

The mean hashrate is non-decreasing over time, as shown in the blue line. This trend may be caused

by the inﬂuence of market forces as new nodes enter the market to compete for rewards. As the number

of nodes increases, the total hashrate will increase. The expected reward arrival rate and the amount

of reward are adjusted in real time by the total hashrate. Changes in this hashrate may cause mining to

be more or less proﬁtable, and nodes will react by investing computational power accordingly as they

pursue rewards.

As we mentioned in Game 6 item (I), this hashrate represents the hashrate discounted by the rate

22

 
 
 
of the technological progress, which is equivalent to how much older generations of hardware can

compute for the same cost. An increase in this discounted mean hashrate over time makes the under-

lying blockchain more secure, even though technological advancement in computational hardware is

improving at an exponential rate.

The initial mean hashrate is designated in the PoW protocol, as given in Equation 13, requiring a

large amount of the hashrate at the initial time period to build a secure blockchain.

In reality, the

mean hashrate of the Bitcoin blockchain did not have such large amounts available in the early days.

However, it was an innovative product, and people did not think that it would be valuable enough to

be attacked. By the time everyone thought it was, the strength of the Bitcoin network was already

sufﬁciently resilient to attacks (Antonopoulos 2017).

3.3 Density Evolution

Population behavior in the MFE can be described through the evolution of density distribution. For any

given initial probability density function m0(x0, b0), the stationary distribution of active nodes at the

terminal time can be found by solving time-independent PDEs 55, as shown in Figure 8.

(a)

(b)

(c)

Figure 8: (a) The stationary wealth-token price distribution of active nodes at the terminal time. (b)
and (c) demonstrated the side views of (a).

23

The two-dimensional initial density is assumed to be accumulated at b0 = 0 in the token price

dimension and has an exponential distribution in the wealth dimension

m0(x0, b0) =

1
∆x

(cid:18)

(cid:19)

e− x

∆x .

(60)

Each node optimizes its total utility by solving a dynamic programming problem and recovering the

optimal control from the value function. As every node uses its optimal control, a better recovery for

the evolution of the density distribution is obtained. The collection of the resulting density distributions

evolves with the optimal control strategy of each node over time, which is demonstrated in Figure 9.

(a)

(b)

(c)

(d)

Figure 9: Evolution of the density function for active nodes over time. (a), (b), (c) and (d) show the
evolution of the density function for active nodes in years 2040, 2072, 2104, and 2136, respectively.

In the token price dimension, distribution is driven by a mean reversion OU-process and is depen-

dent on the current token price value. The total hashrate acts as an equilibrium level for the process.

Since the token price process is not directly controlled by individual nodes, we can reduce the dimen-

sions of the state variables and focus on the evolution of the marginal density function with respect to

the wealth state, as demonstrated in Figure 10.

24

Figure 10: Marginal distribution with respect to the wealth state, as plotted on a timeline. The
majority of nodes lost their wealth and thus moved towards the left in the wealth marginal distribution.
The ergodic measure m has a singularity on line x = 0 in the wealth dimension, shaded in gray,
which represents inactive nodes that have insufﬁcient wealth and hence zero optimal controls. While
a smaller number of active nodes, who had more money originally, shaded in colors, moved to the
right—that is, active nodes accumulated greater wealth over time.

Figure 10 illustrates that competition reduces the concentration of wealth as the number of nodes

increases over time. This is because increases in competition are a source of risk to nodes and reduce

their chances of gaining a reward, thereby diminishing the value of their wealth. Thus, the majority

of the nodes becomes inactive and moves to the left of the wealth marginal distribution, forming a big

spike.

Compared with the initial distribution, Figure 10 also indicates the wealth of rich active nodes

increases at a greater rate than poorer active nodes. There are a few studies on user behavior and wealth

accumulation in the Bitcoin network that suggest the rich have indeed become richer (Gupta & Gupta

2017). Our numerical results agree with this phenomenon, suggesting that steps should be taken to

curb such wealth accumulation in the network.

Wealth marginal distributions are further investigated in Figure 11. The active nodes of Figure 10

are plotted on a normalized log scale in Figure 11a, which shows that the wealth marginal distribution

of the Bitcoin blockchain is skewed. We then compare our results to real world information. Given that

the Bitcoin blockchain is a public data structure, we may estimate the distribution of wealth across all

known Bitcoin addresses from publicly available blockchain information. This is plotted in blue stars

Figure 11b 3. When making this comparison, it becomes clear that the shape of equilibrium distribution,

as shown in the red line, resembles that of the real world data (plotted in blue stars). We cannot draw

any stronger conclusions, because the data in Figure 11b does not indicate which nodes those wallet

addresses belong to; multiple wallet addresses may be controlled by the same node.

3The website such as https://bitinfocharts.com/top-100-richest-bitcoin-addresses.html that tracks the distribution of Bitcoin

across all known Bitcoin addresses

25

(a)

0.7

0.6

0.5

0.4

0.3

0.2

0.1

0

Normalized Density Function of Active Nodes

2009

2019

2030

2040

2051

2062

2072

2083

2094

2104

2115

2126

2136

1014

1015

Wealth on Log Scale

1016

Timeline

(b)

0.6

0.5

0.4

0.3

0.2

0.1

)

%

(

s
e
s
s
e
r
d
d
A

f
o

r
e
b
m
u
N

MFG Equilibrium Distribution VS Real World Data

1014

1015

1016

0.6

Bitcoin Wealth Distribution on 2020-12-19 13:15:00

Designed MFG Equlibrium Distribution in Year 2020

0.5

0.4

0.3

0.2

0.1

)

%

(

s
e
d
o
N
e
v
i
t
c
A

f
o

r
e
b
m
u
N

0
100

102

104

106

108

Wealth on Log Scale

0
1010

Figure 11: (a) Evolutionary distribution on a log scale demonstrates that wealth distribution in the
Bitcoin blockchain is skewed. (b) Comparing MFG equilibrium distribution (plotted in the red line) to
real world Bitcoin wealth distribution data on 19th Dec, 2020 (plotted in blue stars).

3.4 Mining Proﬁtability

The equilibrium optimal control discounted hashrate is approximately 1.58 × 1015 TeraHashes for active

nodes. To estimate the instantaneous expected utility, we may input this hashrate into Equation 57. The

resulting output is approximately 2963.21 USD. This means that mining is always proﬁtable for active

nodes who operate at the MFE of our model.

Further, we can estimate the number of active nodes at the equilibrium by using

Number of Active Nodes = M (t)

m(t, x, b)1 ˆα(t,x,b)∈O(t) dx db ,

(61)

ZX ZB

where the density function is illustrated in Figure 10 and the equilibrium optimal control is in feasible

set 59. The estimated number of active nodes over time is plotted in Figure 12.

1011

Active Nodes
Inactive Nodes

6

5

4

3

2

1

m
u
i
r
b

i
l
i

i

l

u
q
E
d
e
F
-
n
a
e
M

t
a

s
e
d
o
N

f
o

r
e
b
m
u
N

0
2010 2020 2030 2040 2050 2060 2070 2080 2090 2100 2110 2120 2130

Timeline

Figure 12: Number of nodes at MFE, as plotted on a timeline. The number of active nodes is obtained
by using Equation 61 (illustrated in blue); the number of inactive nodes is illustrated in red.

Even though the majority of nodes lose their wealth and become inactive over time, there is still

26

 
 
 
 
 
 
 
 
 
 
 
 
an increase in active nodes. This represents the proﬁtability of mining, and therefore the incentives for

entering the mining market. Hence, the MFE contributes to the security of blockchain.

3.5 Blockchain Security

Blockchain security is measured by the total hashrate that protects a record of valid transactions

(Gervais et al. 2016). The most common attack is called the 51% attack, a situation in which an at-

tacker, who controls a majority of the hashrate, is probabilistically able to take over 50% or more of the

new block creation, or even double spend through rewriting part of the blockchain. Nakamoto (2008)

uses a double spend race analysis and demonstrates the exponential decay on the number of block

conﬁrmations for an attacker to quickly become computationally impractical. Grunspan & Pérez-Marco

(2017) gvies a closed-form formula for the probability of success of a double spend attack using a reg-

ularized incomplete beta function. A ﬁner risk analysis on the probability of hashrate percentage to

launch an attack is provided in the result table of Grunspan & Pérez-Marco (2018). Consequently, we

can use above results to analyze such attacks by calculating the cost of launching an attack using

Percentage of the Total Hashrate Controlled by Attacker × Number of Active Nodes × c ¯α ,

and estimating the likelihood that nodes, like those in the wealth distribution of Figure 10, can own

majority of the total hashrate as it evolves over the time horizon. As expected, Figure 7 depicts the

increase in equilibrium mean hashrate. This makes it more expensive to control hashratess over time

and therefore increases the security of the blockchain. The result is demonstrated in Figure 13.

1014

10%
15%
20%
25%
30%
35%
40%
45%

Cost 38.97 Million USD on 03-Jan-2009 
 to control 10 percent of the total hashrate

14

12

10

8

6

4

2

e
t
a
r
h
s
a
H

l

a
t
o
T
%

l

o
r
t
n
o
C
o
t

)

D
S
U
n
o

i
l
l
i

M

(

t
s
o
C

0
2010 2020 2030 2040 2050 2060 2070 2080 2090 2100 2110 2120 2130

Timeline

Figure 13: The cost for attackers to control different percentage of the total hashrate over time. A list
of colors in legend is assigned to the cost to control 10%, 15%, 20%, 25%, 30%, 35%, 40% and 45%
of the total hashrate respectively. The result shows it becomes more expensive to control hashrate over
time, while the corresponding success probability is discussed in (Nakamoto 2008).

Overall, if mining is proﬁtable at the equilibrium (as discussed in Section 3.4), and if the nodes

in the network are unlikely to have the ability to launch attacks at the equilibrium (as discussed in

Section 3.5), then the blockchain can be regarded as secure. Consequently, if the blockchain is secure

27

 
 
 
 
 
 
 
and ensures a decreasing inﬂation rate (Mechanisms (I)–(II)), then the blockchain’s consensus protocol

is well designed. Generally, if people have faith in the security of the blockchain, then they will perceive

the blockchain token as inherently valuable. Such a belief will catalyze the onset of a large number

of decentralized nodes that invests resources (e.g., computing power) into maintaining the blockchain.

This interdependence indirectly circulates and converts dollars into blockchain token value by creating

a healthy mining ecosystem within the consensus protocol design (Narayanan et al. 2016). In this way,

the consensus protocol acts as a mechanism for propagating the MFE over time.

4 Conclusion

This paper started by formulating a consensus protocol design problem. We built a framework for a PoW

protocol as an example to demonstrate a game theory approach to the problem. The traditional game

theory approach makes MPE solutions complex; instead, we used a mean ﬁeld game approximation and

simpliﬁed the stochastic differential game model. The problem can be broken down into two coupled

PDEs: where an individual node’s optimal control paths are analyzed through solving a Hamilton-

Jacobi-Bellman equation; and where the evolution of the joint distributions of wealth and token price

are characterized by a Fokker-Planck equation. We developed efﬁcient numerical methods to compute

both steady states at an inﬁnite-time horizon and with time-dependent evolutionary distributions, and

used real-time optimal control for each individual node. Our results demonstrate that the existence of

the MFE represents the computational power devoted to building blocks in the Bitcoin blockchain. This

MFE is a reliable approximation of a rational node’s behavior, in the sense that when other nodes use

the MFE optimal controls in a ﬁnite stochastic differential game, the node’s best response is also to use

the same optimal control. The MFE thus governs the security of the underlying blockchain. Hence, the

consensus protocol in the Bitcoin blockchain can be regarded as well posed. In conclusion, we can view

blockchain as a mechanism that operates in a decentralized setup and propagates the MFE over time.

This can help us to gain a deep understanding of a blockchain’s potential and limitations. In future

research, this method may be used to explore related problems, including, but not limited to, ones

concerning design transaction fees or centralization issues in blockchain networks. Our framework can

also be extended to more complex structures, or higher state dimensions. Further studies may explore

numerical methods, such as deep learning and stochastic optimization techniques, to solve these type

of mean ﬁeld forward-backward stochastic differential equations.

Acknowledgements

L. Zhang is supported by the National Key R&D Program of China 2021YFF1200500 and the National

Natural Science Foundation of China 12050002. Z. Zhou is supported by the National Key R&D Program

of China, Project Number 2020YFA0712000, 2021YFA1001200 and NSFC grant Number 12031013,

12171013. Also, we want to thank Cheng Feng Shen and Ari Klinger for helpful discussions.

28

References

Achdou, Y., Buera, F. J., Lasry, J.-M., Lions, P.-L. & Moll, B. (2014), ‘Partial differential equation mod-

els in macroeconomics’, Philosophical Transactions of the Royal Society A: Mathematical, Physical and

Engineering Sciences 372(2028), 20130397.

Achdou, Y., Camilli, F. & Capuzzo-Dolcetta, I. (2013), ‘Mean ﬁeld games: convergence of a ﬁnite differ-

ence method’, SIAM Journal on Numerical Analysis 51(5), 2585–2612.

Achdou, Y. & Capuzzo-Dolcetta, I. (2010), ‘Mean ﬁeld games: numerical methods’, SIAM Journal on

Numerical Analysis 48(3), 1136–1162.

Achdou, Y., Han, J., Lasry, J.-M., Lions, P.-L. & Moll, B. (2017), Income and wealth distribution in macroe-

conomics: A continuous-time approach, Technical report, National Bureau of Economic Research.

Achdou, Y. & Laurière, M. (2020), Mean ﬁeld games and applications: Numerical aspects, in ‘Mean Field

Games: Cetraro, Italy 2019’, Springer, Cham, pp. 249–307.

Achdou, Y. & Porretta, A. (2016), ‘Convergence of a ﬁnite difference scheme to weak solutions of the sys-

tem of partial differential equations arising in mean ﬁeld games’, SIAM Journal on Numerical Analysis

54(1), 161–186.

Antonopoulos, A. M. (2017), Mastering Bitcoin: Programming the open blockchain, " O’Reilly Media, Inc.".

Atzei, N., Bartoletti, M., Lande, S. & Zunino, R. (2018), A formal model of bitcoin transactions, in

‘International Conference on Financial Cryptography and Data Security’, Springer, pp. 541–560.

Bentov, I., Lee, C., Mizrahi, A. & Rosenfeld, M. (2014), ‘Proof of activity: Extending bitcoin’s proof of

work via proof of stake’, SIGMETRICS Perform. Eval. Rev. 42(3), 34–37.

Bertucci, C., Bertucci, L., Lasry, J.-M. & Lions, P.-L. (2020), ‘Mean ﬁeld game approach to bitcoin mining’,

arXiv preprint arXiv:2004.08167 .

Bolley, F., Cañizo, J. & Carrillo, J. A. (2011), ‘Stochastic mean-ﬁeld limit: Non-lipschitz forces & swarm-

ing’, Mathematical Models and Methods in Applied Sciences 21(11), 2179–2210.

Bowden, R., Keeler, H. P., Krzesinski, A. E. & Taylor, P. G. (2018), ‘Block arrivals in the bitcoin blockchain’,

arXiv preprint arXiv:1801.07447 .

Casgrain, P. & Jaimungal, S. (2020), ‘Mean-ﬁeld games with differing beliefs for algorithmic trading’,

Mathematical Finance 30(3), 995–1034.

Chu, J., Nadarajah, S. & Chan, S. (2015), ‘Statistical analysis of the exchange rate of bitcoin’, PloS one

10(7), e0133678.

29

Dhamal, S., Ben-Ameur, W., Chahed, T., Altman, E., Sunny, A. & Poojary, S. (2019), ‘A stochastic game

framework for analyzing computational investment strategies in distributed computing’, arXiv preprint

arXiv:1809.03143 .

Ewald, C.-O. & Rutkowski, M. (2017), ‘Lecture notes in ﬁnancial mathematics’.

Fralix, B. (2020), ‘On classes of bitcoin-inspired inﬁnite-server queueing systems’, Queueing Systems

pp. 1–24.

Gaviraghi, B. (2017), ‘Theoretical and numerical analysis of fokker-planck optimal control problems for

jump-diffusion processes’.

Gervais, A., Karame, G. O., Wüst, K., Glykantzis, V., Ritzdorf, H. & Capkun, S. (2016), On the security and

performance of proof of work blockchains, in ‘Proceedings of the 2016 ACM SIGSAC Conference on

Computer and Communications Security’, CCS ’16, Association for Computing Machinery, New York,

NY, USA, p. 3–16.

Gilbert, H. & Handschuh, H. (2004), Security analysis of sha-256 and sisters, in M. Matsui & R. J.

Zuccherato, eds, ‘Selected Areas in Cryptography’, Springer Berlin Heidelberg, Berlin, Heidelberg,

pp. 175–193.

Grunspan, C. & Pérez-Marco, R. (2017), ‘Satoshi risk tables’, arXiv preprint arXiv:1702.04421 .

Grunspan, C. & Pérez-Marco, R. (2018), ‘Double spend races’, International Journal of Theoretical and

Applied Finance 21(08), 1850053.

Guéant, O., Lasry, J.-M. & Lions, P.-L. (2011), Mean ﬁeld games and applications, in ‘Paris-Princeton

lectures on mathematical ﬁnance 2010’, Springer, pp. 205–266.

Gupta, M. & Gupta, P. (2017), Gini coefﬁcient based wealth distribution in the bitcoin network: A case

study, in ‘International Conference on Computing, Analytics and Networks’, Springer, pp. 192–202.

Hayes, A. S. (2017), ‘Cryptocurrency value formation: An empirical study leading to a cost of production

model for valuing bitcoin’, Telematics and Informatics 34(7), 1308–1321.

Hayes, A. S. (2019), ‘Bitcoin price and its marginal cost of production: support for a fundamental value’,

Applied Economics Letters 26(7), 554–560.

Huang, M., Malhamé, R. P. & Caines, P. E. (2006), Nash certainty equivalence in large population stochas-

tic dynamic games: Connections with the physics of interacting particle systems, in ‘Proceedings of the

45th IEEE Conference on Decision and Control’, IEEE, pp. 4921–4926.

Jackson, M. O. (2001), ‘A crash course in implementation theory’, Social Choice and Welfare 18(4), 655–

708.

30

Kim, S. & Deka, G. C. (2020), Advanced applications of blockchain technology, Springer.

Kunita, H. (1997), Stochastic ﬂows and stochastic differential equations, Vol. 24, Cambridge university

press.

Lacker, D. (2020), ‘On the convergence of closed-loop Nash equilibria to the mean ﬁeld game limit’, The

Annals of Applied Probability 30(4), 1693 – 1761.

Lasry, J.-M. & Lions, P.-L. (2006), ‘Jeux à champ moyen. i–le cas stationnaire’, Comptes Rendus Mathéma-

tique 343(9), 619–625.

Lasry, J.-M. & Lions, P.-L. (2007), ‘Mean ﬁeld games’, Japanese journal of mathematics 2(1), 229–260.

Li, Z., Reppen, A. M. & Sircar, R. (2019), ‘A mean ﬁeld games model for cryptocurrency mining’, arXiv

preprint arXiv:1912.01952 .

Lions, P. (2007), ‘Théorie des jeuxa champs moyen et applications’, Cours au Collége de France, www.

college-de-france. fr .

Liu, J.-G., Wang, Z., Zhang, Y. & Zhou, Z. (2020), ‘Rigorous justiﬁcation of the fokker-planck equations

of neural networks based on an iteration perspective’, arXiv preprint arXiv:2005.08285 .

Liu, J., Wang, Z., Xie, Y., Zhang, Y. & Zhou, Z. (2021), ‘Investigating the integrate and ﬁre model as limit

of a random discharge model: a stochastic analysis perspective’, arXiv preprint arXiv:2102.07891 .

Liu, Z., Luong, N. C., Wang, W., Niyato, D., Wang, P., Liang, Y.-C. & Kim, D. I. (2019), ‘A survey on

applications of game theory in blockchain’, arXiv preprint arXiv:1902.10865 .

Mkiramweni, M. E., Yang, C. & Han, Z. (2019), Mean Field Games for 5G Ultra-dense Networks: A Resource

Management Perspective, John Wiley & Sons, chapter 3, pp. 65–89.

Nakamoto, S. (2008), ‘Bitcoin: A peer-to-peer electronic cash system’, Decentralized Business Review

p. 21260.

Narayanan, A., Bonneau, J., Felten, E., Miller, A. & Goldfeder, S. (2016), Bitcoin and cryptocurrency

technologies: a comprehensive introduction, Princeton University Press.

Nie, T. & Rutkowski, M. (2018), ‘Fair bilateral pricing under funding costs and exogenous collateraliza-

tion’, Mathematical Finance 28(2), 621–655.

Pathirana, A., Halgamuge, M. & Syed, A. (2019), ‘Energy efﬁcient bitcoin mining to maximize the mining

proﬁt: Using data from 119 bitcoin mining hardware setups’.

Qiu, J. (2018), ‘Viscosity solutions of stochastic hamilton–jacobi–bellman equations’, SIAM Journal on

Control and Optimization 56(5), 3708–3730.

31

Roets, P. J. (1991), ‘Bernard w. dempsey, sj’, Review of Social Economy 49(4), 546–558.

Sadek Ferdous, M., Jabed Morshed Chowdhury, M., Hoque, M. A. & Colman, A. (2020), ‘Blockchain

consensus algorithms: A survey’, arXiv preprint arXiv:2001.07091 .

Shapley, L. S. (1953), ‘Stochastic games’, Proceedings of the national academy of sciences 39(10), 1095–

1100.

Swan, M. (2015), Blockchain: Blueprint for a new economy, " O’Reilly Media, Inc.".

Wang, W., Hoang, D. T., Hu, P., Xiong, Z., Niyato, D., Wang, P., Wen, Y. & Kim, D. I. (2019), ‘A sur-

vey on consensus mechanisms and mining strategy management in blockchain networks’, IEEE Access

7, 22328–22370.

Weeks, M. (2018), ‘The evolution and design of digital economies’.

URL: https://fetch.ai/uploads/Fetch.AI-Economics-white-paper.pdf

Zhang, Z., Zargham, M. & Preciado, V. M. (2020), ‘On modeling blockchain-enabled economic networks

as stochastic dynamical systems’, Applied Network Science 5(1), 1–24.

Appendices

A Proof-of-Work Protocol

In the Bitcoin blockchain, the game selects nodes in proportion to the amount of work done by the

computing power devoted to building blocks, which is called the Proof-of-Work (PoW) protocol. This is

intuitive because when all new transactions are broadcast to the network of nodes, the validity of those

transactions as well as the new block needs to be veriﬁed by numerous conﬁrmations. This requires work

to be done4. Deﬁning a measurement for the amount of work done by computational power devoted

to building blocks is equivalent to attempting a brute-force search of possible inputs to a cryptographic

hash function whose output is trivial to verify but is computationally infeasible to invert. The Bitcoin

blockchain chose the SHA256 Hash Function, something moderately hard that ensures the security of the

blockchain (Gilbert & Handschuh 2004). SHA-256 is a cryptographic hash function that maps a string of

arbitrary text to a bit array of a ﬁxed size

SHA-256 : a string of text → Z+ ∪ {0} → {0, 1, . . . , 2256 − 1}

4Details of the work need to be done for maintaining one’s own replica of the blockchain Ci are listed in following steps
(Nakamoto 2008): 1) verifying the validity of the new transactions and passing them to neighbours in the network; 2) building
block B(n) of new transactions according to consensus protocol C , and broadcasting the proposed block to the network; 3)
verifying the proposed block according to consensus protocol C; 4) Nodes express their acceptance of the new block by working on
creating the next block in the chain, using the hash of the accepted block as the previous hash for the new block they are mining.

32

such that for any given binary representation of the string y in the codomain {0, 1}256 of SHA-256,

it is computationally infeasible to ﬁnd the element of pre-image SHA-256−1(y). That is, for mining

each block, the only way to ﬁnd a message that produces a given hash is to attempt a brute-force

search of possible inputs to see if they produce a match. Hence, we can use above function to deﬁne a

measurement.

Mechanism 14 (Measurement Mechanism in the PoW Protocol). Ψ in Equation 9 is chosen to be the PoW

measurement α : C → O, which represents the computational power that a node invests in trying to solve

the following puzzle:

1. Find a nonce such that the following inequality holds 5

SHA-256

SHA-256

Merkle root , previous block’s hash , timestamp , nonce

< target

(62)

(cid:16)

(cid:0)(cid:10)

(cid:11)(cid:1)(cid:17)

2. Search for a correct nonce in Equation 62 repeatly until someone ﬁnds and publishes the block 6.

3. When a block is published to the network, all nodes verify the validity of a new block and expands its

local replica of blocktree Ci with the new valid block 7

g

Ψ−1(O)

:=

Cj

j = argmax

α

.

(63)

(cid:12)
(cid:12)
(cid:12)
Each hash can be seen as an independent trial; in each trial, at time t, a nonce is selected and the

n

o

(cid:1)

(cid:0)

i∈{1,2,··· ,M}

block header is hashed, during which the node samples a value from a discrete uniform distribution with

range

0, 2256 − 1

. The difﬁculty d(t), which is recorded in the header of every block represents how

hard it is to mine a block compared with the original target. The target at time t is deﬁned as 2224

(cid:3)

(cid:2)

d(t) . For

each node, the probability of solving the block is the cumulative probability of selecting a value from

[0, 2224

d(t) ] from all 2256 possible choices (Bowden et al. 2018), which is 2224
When M (t) nodes are mining simultaneously, which can be modeled by a geometric distribution with

d(t) ÷ 2256 = 1

232d(t) .

a probability of success, there is

for every trial.

1 −

1 −

(cid:18)

1
232d(t)

M(t)

(cid:19)

(64)

After choosing Ψ as the PoW measurement, we need to design the payoff function π by releasing

rewards into the blockchain so that nodes to participate in the game; at the same time, we can also

5This condition means when put 80-byte block header described in Equation 1 and take 256-bit cryptographic hash function of
this whole string twice, then the hash output has to be less than a given 256 bit integer target. In the rare case that the hash is
less than the current target, the block is valid and is appended to the node’s blockchain. In the far more likely case that the hash
is not less than the current target, the nonce is changed and the hash is recomputed. Since this problem can only be solved by
brute-force, more computing power will speed up the resolution.

6The nonce will be published as part of block
7In the case of fork chain selection, nodes may resolve their inconsistency by setting their chain to be the longest chain

33

design the intensity of the block arrival process, as described in Equation 2, and the inﬂation rate of the

token in this blockchain.

Mechanism 15 (Reward Mechanism in PoW Protocol). In the Bitcoin blockchain, the reward is designed

as follows:

1. A mining difﬁculty adjustment is made in order to maintain stability in the blockchain

• mining difﬁculty dynamically adjusts every 2016 blocks 8, i.e, the target in the sth adjustment is

given by

ds =

1209600ds−1
t2016s − t2016(s−1)

with d0 := 1

(65)

2. The creator of a new block can choose a recipient address for block rewards in Bitcoin. These include

• a coin-creation transaction which starts at 50 and set to halve continually every 210,000 blocks

until it reaches 0

• transaction fees, which are purely voluntary (much like a tip).

For each time segment of 2,016 blocks denoted s, the probability of solving the block × total hashes over

the time segment

t2016(s−1), t2016s

= 2016 successful blocks, applying Equation 64 we get

(cid:0)

(cid:3)

1 −

1 −

(cid:18)

M(t)

1
232ds (cid:19)

!

Hs = 2016

where the total hashes over time segment (t2016(s−1), t2016s] is deﬁned to be

t2016s

Hs :=

h(t) dt where h(t) :=

αi(t) .

t2016(s−1)

Z

Xi∈{1,2,··· ,M(t)}

Rearranging Equation 66, we get

d(t)t∈(t2016(s−1) ,t2016s] = ds =

1

232

1 − M (t)

1 − 2016
Hs

(cid:16)

q

(cid:17)

From Mechanism 15 item 1, rearranging Equation 65 gives

2016
t2016s − t2016(s−1)

=

ds
600ds−1

(66)

(67)

(68)

Substituting Equation 67 into Equation 68, a block arrival process over time interval (t2016(s−1), t2016s]

can be viewed as a non-homogenous Poisson process {N (t)}t≥0 with an expected block arrival rate

(λt)t∈(t2016(s−1),t2016s] =

2016
t2016s − t2016(s−1)

=

1
600 

1 − M (t)

1 − 2016
Hs−1

q
1 − M (t)

1 − 2016
Hs

q
8The previous 2016 blocks is found at an average block arrival rate of 1 blocks every 10 mins



(69)





34

 
Note that d0 := 1 and Equation 67 gives the initial condition

H0 :=

1 −

2016
1 − 1
232

M(t)

(cid:0)
Mechanism 15 item 2 is designed to control the inﬂation. Deﬁne L := {1, ..., 32} time intervals, such

(cid:1)

that each time interval l ∈ L includes 210000 blocks. Thus the number of block reward at time t can be

written as

where

k(t) = 50

1
2

(cid:18)

l

+ ¯k

(cid:19)

l = ⌊

2016Nt
210000

⌋

(70)

and ¯k ∈ [0, 1] is a small transaction fees paid in units of tokens. Hence the number of cumulated tokens

in circulation is

K(t) = (210000 × 50)

1 − ( 1
2 )l
1 − 1
2 !

+ (2016 − mod (210000l, 2016))

50

1
2

(cid:18)

l

!

(cid:19)

(71)

35

 
 
