2
2
0
2

r
p
A
8
1

]
I
S
.
s
c
[

1
v
4
9
1
8
0
.
4
0
2
2
:
v
i
X
r
a

Phishing Fraud Detection on Ethereum using
Graph Neural Network

Panpan Li1,2, Yunyi Xie1,2, Xinyao Xu1,2,
Jiajun Zhou1,2 ((cid:0)), and Qi Xuan1,2

1 Institute of Cyberspace Security, Zhejiang University of Technology,
Hangzhou 310023, China
2 College of Information Engineering, Zhejiang University of Technology,
Hangzhou 310023, China
jjzhou@zjut.edu.cn

Abstract. Blockchain has widespread applications in the ﬁnancial ﬁeld
but has also attracted increasing cybercrimes. Recently, phishing fraud
has emerged as a major threat to blockchain security, calling for the de-
velopment of eﬀective regulatory strategies. Nowadays network science
has been widely used in modeling Ethereum transaction data, further in-
troducing the network representation learning technology to analyze the
transaction patterns. In this paper, we consider phishing detection as a
graph classiﬁcation task and propose an end-to-end Phishing Detection
Graph Neural Network framework (PDGNN). Speciﬁcally, we ﬁrst con-
struct a lightweight Ethereum transaction network and extract trans-
action subgraphs of collected phishing accounts. Then we propose an
end-to-end detection model based on Chebyshev-GCN to precisely dis-
tinguish between normal and phishing accounts. Extensive experiments
on ﬁve Ethereum datasets demonstrate that our PDGNN signiﬁcantly
outperforms general phishing detection methods and scales well in large
transaction networks.

Keywords: Ethereum · Phishing Fraud Detection · Graph Neural Net-
work · Subgraph Sampling.

1

Introduction

Thanks to the development of blockchain technology, the past few years have
witnessed the emergence of more than 1,100 cryptocurrencies in the ﬁnancial
ﬁeld, further reforming the ﬁnancial system. In general, blockchain technology
can be described as a distributed ledger maintained by a peer-to-peer network
through a consensus mechanism. Its non-intermediary trust system changes the
traditional mechanism of establishing and maintaining trust-based Internet cen-
tral institutions, allowing accounts to freely exchange cryptocurrencies or other
ﬁat currencies without relying on traditional third parties.

However, the ﬁnancial nature of cryptocurrencies makes them the target
of various ﬁnancial crimes [1]. According to CoinGecko data, the current mar-
ket value of cryptocurrencies has risen to 1.84 trillion, and the 24-hour trad-
ing volume is 78.687 billion. Moreover, the anonymization and weak regulation

 
 
 
 
 
 
2

P. Li et al.

of blockchain platforms also exacerbate the problem. According to incomplete
statistics, in the ﬁrst half of 2017 alone, 30,287 users suﬀered ﬁnancial fraud
on the Ethereum platform, including phishing scams, Ponzi schemes, and ran-
somware, with a total economic loss of 225 million. Among these frauds, over 50%
were classiﬁed as phishing scams targeting cryptocurrency [2]. The proliferation
of phishing scams can lead to doubts about the security of blockchain technology,
thereby hindering the healthy development of the technology [3]. Therefore, re-
searchers have paid more attention to ﬁnancial security in blockchain, and have
come up with various methods to detect phishing fraud.

The openness and transparency of the blockchain makes transaction records
available, further providing conditions for phishing detection. Inspired by net-
work science, researchers construct transaction networks from raw transaction
records and apply various network analysis methods to detect phishing scams.
Existing phishing detection methods [4,5,6] mainly utilize graph representation
learning techniques to generate the account feature vectors, and further achieve
phishing detection via downstream machine learning classiﬁers. However, these
methods do not achieve an end-to-end architecture, failing in learning the task-
related features. Meanwhile, these methods generally suﬀer from poor scalability
in large-scale Ethereum transaction network.

In this paper, we consider phishing detection as a graph classiﬁcation task.
Speciﬁcally, we ﬁrst introduce a network lightweight strategy to rescale the
Ethereum datasets and construct the Ethereum transaction networks. Then we
formulate a sampling rule for subgraph extraction, which can eﬃciently extract
subgraphs of similar scales to allow for mini-batch training of subsequent models.
Finally, we design an end-to-end Chebyshev graph convolutional network to au-
tomatically extract account transaction behavior features and achieve phishing
detection. We conduct extensive experiments on ﬁve Ethereum datasets, and the
results demonstrate that our method signiﬁcantly outperforms existing phishing
detection methods and scale well in large transaction networks.

The remainder of this work is organized as follows. In Section 2, we brieﬂy
summarize the phishing detection methods and the network representation learn-
ing methods. In Section 3, we introduce the details of our proposed phishing
detection method, including lightweight network construction, transaction sub-
graph sampling, and the architecture of phishing detection graph neural net-
work (PDGNN). In Section 4, we present the experimental setup and analyze
the experimental results. Finally, we summarize the main work and contribution
of this paper in Section 5.

2 Related Work

2.1 Phishing Detection Method

The most existing illegal phishing fraud detection methods concentrate on graph
analytics, which rely on the transaction networks constructed from raw blockchain
transaction data. Yuan et al. [4] proposed a graph random walk method named

Phishing Fraud Detection on Ethereum using Graph Neural Network

3

trans2vec to extract the account features for phishing detection on Ethereum,
which takes the transaction amount and timestamp into account and uses SVM
classiﬁer to distinguish the accounts into normal and phishing ones. Chen et
al. [5] proposed a phishing detection method based on graph convolutional
network (GCN) and autoencoder, which aggregates account features and net-
work topology, and uses the lightGBM classiﬁer to identify phishing accounts
in Ethereum. Wang et al. [6] introduced the subgraph network (SGN) mech-
anism into Ethereum transaction network for extending the feature space of
accounts. They constructed the transaction subgraph networks (TSGN) by ex-
tracting the ﬁrst-order subgraphs of accounts, and used graph neural networks
such as GCN and Diﬀpool to identify phishing accounts. Shen et al. [7] proposed
a generic end-to-end graph neural network model named I2BGNN, which can
accept transaction subgraphs as input and learn to map the subgraph patterns
to the label associated with account identity. Zhou et al. [8] proposed a joint
learning graph neural network framework named Ethident, which utilizes a hi-
erarchical graph attention encoder to characterize the account behavior pattern
and applies self-supervision mechanism for improving model generalization.

2.2 Network Representation Learning

Network representation Learning aims to learn latent, low-dimensional repre-
sentations of network nodes, while preserving network topology structure, node
content, and other side information [9]. The generated low-dimensional node
features can be easily used for downstream graph analysis tasks, such as node
classiﬁcation [10], graph classiﬁcation [11], link prediction [12], etc. Perozzi et
al. [13] proposed to generate a node representation through the co-occurrence
probability of the node sequence generated by random walk. Grover et al. [14]
proposed biased random walks to balance Breadth First and Depth First sam-
pling, achieving a balance between homogeneity and structural equivalence. The
factorization-based graph embedding algorithm uses the connection information
between nodes to construct various matrices (such as Laplace matrix and adja-
cency matrix) and then decomposes the above matrix to obtain node embedding
vectors. The models related to matrix decomposition include Graph Factoriza-
tion (GF) [15], GraRep [16], HOPE [17], etc. Diﬀerent from the above methods,
LINE [18] optimizes the ﬁrst-order and second-order proximity of nodes by de-
signing a speciﬁc objective function to obtain node representation. The graph
convolutional network (GCN) proposed by Kipf et al. [19] iteratively aggregates
and updates the node features based on network topology, achieving higher ex-
pression performance. The Graph2vec proposed by Narayanan et al. [20] can
learn the graph-level representations of networks and serves for graph classiﬁca-
tion tasks.

4

P. Li et al.

Fig. 1. The overview of PDGNN framework for Ethereum phishing detection.

3 Methodology

3.1 Problem Description

}

· · ·

, vn

v1, v2,
{

represents the account set, E =

Ethereum transaction data can be modeled as a transaction network G = (V, E, X),
= j
(vi, vj)
where V =
}
Rn×d
represents the set of transactions with timestamp and amount value, X
is the node feature matrix constructed from the information of transaction fre-
quence. We consider phishing detection as a graph classiﬁcation task. Given a set
, graph classiﬁcation aims to learn a function
of account subgraphs Ω =
mapping the subgraph patterns Gi to label yi associated with account identity,
i.e., whether the target account is a phishing account or not.

Gi, yi
{

|
⊆

}

{

i

3.2 Lightweight Transaction Network

Thanks to the openness of blockchain, researchers can crawl transactions from
Etherscan platform3. However, there are extremely large transaction records and
most accounts are not always active, which makes it diﬃcult to mine account
characteristics through a large number of transactions. It is imperative to con-
struct a lightweight network to reduce the complexity of phishing detection tasks.
In this subsection, we focus on the labeled target accounts and extract trans-
actions associated with them by a second-order Breadth First Search (BFS).
Firstly, we collect 1165 phishing accounts from Etherscan and perform a ﬁrst-
order BFS centered on these target accounts to extract transactions. After this,
the total transaction information reduce to 1,686,003 accounts, 4,380,616 trans-
action records and 167 weakly connected components. However, the transaction
network constructed from the above information is still large-scale, which is not
conducive to those methods with full-graph learning manner. This paper uses
only the largest weakly connected component, with a total of 1,684,164 accounts
and 4,378,716 transaction records, and further propose a random walk-based
sampling algorithm to lightweight the transaction network, i.e., a second-order
BFS. During the random walk, we ﬁrstly select an account as an initial node and
specify the network scale. Then we choose one of the neighbor accounts of the
current account and move forward until the number of accounts in the network
reaches the speciﬁed scale. If the neighbor of the current account does not exist,
we will randomly select an account from the visited accounts.

3 https://etherscan.io/

Conv LayerChebyshev-GCNXAVEPooling LayerFull Connected LayerSubgraph SamplingPhishingunPhishing(cid:54)
Phishing Fraud Detection on Ethereum using Graph Neural Network

5

3.3 Subgraph Sampling

When extracting the transaction subgraph of the target account, it is reasonable
to consider the number of hops and sampled neighbors per hop, because they
control the scale of subgraphs. In this subsection, we propose a formula for calcu-
lating the number of sampling neighbors, which ranks each node’s neighbors and
samples its top-k neighbors according to the edge information. The calculation
formula is as follows:

k =

D

(cid:100)

×

(1 + Density)

=

(cid:100)

(cid:101)

2E
V

|
|

|
|

(1 +

×

2
E
|
V
(
|

|
| −

|

V
|

)

(cid:101)

1)

(1)

|

|

|

V

and

E
|

rep-
where D is the average network degree, Density is the network density,
resents ceil operation,
represent the number of nodes and edges
respectively. The calculation formula adaptively extracts subgraphs of suitable
scale according to the network topology, which improves the subsequent cal-
culation eﬃciency compared with the traditional sampling strategy with ﬁxed
number of neighbors. In addition, the transaction edges contain two attributes:
transaction amount value a and times t, so that the neighbors of the target
account can be sorted separately according to these two attributes. When the
number of neighbors is less than k, all neighbors will be extracted to construct
subgraph.

(cid:100)·(cid:101)

3.4 Phishing Detection based on Graph Neural Network

In this section, we present the details of phishing scam detection graph neural
network (PDGNN), which is divided into the following steps: (1) automatically
aggregate nodes’ information by using graph convolutional network, (2) extract
the characteristics of the target node by pooling layer, (3) classify phishing ac-
counts through the full connection layer.

Graph Convolution Layer We use Chebyshev GCN to automatically aggre-
gate and update account features, and the single-layer Chebyshev GCN is deﬁned
as:

H = σ

βkTk((cid:101)L)X

,

(2)

(cid:41)

(cid:40)K−1
(cid:88)

k=0

where σ(
) is RELU activation function, K is the number of layers, βk is the
·
coeﬃcient of Chebyshev polynomial, X is the node feature matrix. Tk((cid:101)L) is k
order Chebyshev polynomial and (cid:101)L = 2L/λmax
I where λmax can be solved by
power iteration, L is the Laplace matrix. The transaction subgraph extracted in
this paper is a weighted directed network, thus the Laplace matrix needs to be
transformed as:

−

L = I

−

− 1

(cid:101)D

2 A (cid:101)D

− 1

2 , (cid:101)A = A + A(cid:62),

(3)

where (cid:101)D is the normalized degree matrix of (cid:101)A. Tk((cid:101)L) recursion can be carried
out by using the properties of Chebyshev polynomial:

Tk((cid:101)L) = 2(cid:101)LTk−1((cid:101)L)

−

Tk−2((cid:101)L), T0((cid:101)L) = I, T1((cid:101)L) = (cid:101)L.

(4)

6

P. Li et al.

Table 1. Basic statistics of the Ethereum datasets. |V | and |E| are the numbers of
nodes and edges respectively, Y is the number of labeled phishing nodes.

Dataset

EthereumG1
EthereumG2
EthereumG3
EthereumG4
EthereumG5

|V |
20000
30000
40000
50000
60000

|E|
131189
172011
202595
227854
250402

|Y |
242
363
462
556
604

Pooling Layer Here we use the pooling layer to obtain the target account’s
representation from the whole graph:

Z = pooling(H),

(5)

where pooling(
tion.

) is a pooling function. Here, we adopt the average pooling func-
·

Full Connected Layer We use full connected layer for graph classiﬁcation:

ˆy = softmax(WZ + b),

(6)

where W and b are parameters of full connected layer. The model uses cross-
entropy loss function:

1
n

−

=

L

N
(cid:88)

i=1

yi log ˆyi

(1

−

−

yi) log(1

ˆyi).

−

(7)

4 Experimental Results

4.1 Dataset

We evaluate the proposed method on ﬁve lightweight Ethereum networks. The
basic statistics are summarized in Table 1.

4.2 Comparison Methods and Experimental Setup

We compare PDGNN with seven graph-based detection algorithms, including
manual feature (MF), LINE [18], DeepWalk (DW) [13], Node2Vec (N2V) [14],
T-EDGE [21], Graph2Vec (G2V) [20] and I2BGNN [7]. For all random walk-
based methods including DW, N2V and T-EDGE, we use the same parameter
settings: the number of walks per node is 10, the length of walks is 30 and
the size of the context window is 5. For all graph embedding methods, the
embedding dimension is set to 128. For manual feature method and all graph

Phishing Fraud Detection on Ethereum using Graph Neural Network

7

embedding methods, we use logistic regression classiﬁer for classiﬁcation. For
the end-to-end GNN-based models I2BGNN and PDGNN, the dimension of the
two hidden layers is set to 128. We split each dataset into training and testing
sets with a proportion of 4:1, we repeat 5-fold cross validation for 5 times and
report the average performance measures involving Precision, Recall, F1-score
and Accuracy.

4.3 Evaluation Metrics

For a binary node classiﬁcation problem, the prediction results can be divided
into the following four cases according to the real label and predicted label of
the node:

•

•

•

•

True positive (TP): The real label is positive, and the predicted label is
positive.
False positive (FP): The real label is positive, but the predicted label is
positive.
False negative (FN): The real label is positive but the predicted label is
negative.
True negative (TN) The real label is negative, and the predicted label is
negative.

Precision, recall, F1-score and Accuracy are most important indicators in

node classiﬁcation, and their deﬁnitions will be brieﬂy introduced below:

•

Precision: It shows how many of the samples with positive category are
real positive samples and is deﬁned as:

Precision =

TP
TP + FP

•

Recall: Recall indicates how many positive examples in the sample are pre-
dicted correctly and is deﬁned as:

Recall =

TP
TP + FN

•

F1-score: F1-score is the harmonic average of Precision and Recall without
being inﬂuenced by unbalanced samples. The calculation formula is:

F1

−

score = 2

Recall
Precision
Recall + Precision

×

•

Accuracy: Accuracy means that the correctly classiﬁed samples are divided
by the total number of samples and is deﬁned as :

Accuracy =

TP + TN
TP + FP + TN + FN

8

P. Li et al.

Table 2. Results of phshing detection. The best results are highlighted in blod.

EthereumG1

Algorithm MF

Precision 0.6968 0.6512 0.8119 0.7331
0.6161 0.4173 0.7769 0.6651
Accuracy 0.5093 0.5938 0.7979 0.7072
0.4477 0.5057 0.7935 0.6916
F1-score

LINE DW N2V T-EDGE G2V-t G2V-a I2BGNN PDGNN
0.8319
0.9377
0.8742
0.8813

0.7662 0.7816
0.7640 0.7398
0.7649 0.7670
0.7631 0.7595

0.7726
0.8963
0.8165
0.8294

0.7479
0.7186
0.7381
0.7319

Recall

EthereumG2

Algorithm MF

Precision 0.8272 0.6980 0.8061 0.8282
0.3890 0.4795 0.7041 0.7014
Accuracy 0.6534 0.6356 0.7658 0.7712
F1-score
0.5252 0.5674 0.7497 0.7517

LINE DW N2V T-EDGE G2V-t G2V-a I2BGNN PDGNN
0.8875
0.9205
0.9014
0.9033

0.8272 0.8045
0.8164 0.8082
0.8219 0.8055
0.8211 0.8053

0.8437
0.8904
0.8616
0.8656

0.8308
0.7890
0.8137
0.8089

Recall

EthereumG3

Algorithm MF

Precision 0.6622 0.6328 0.8205 0.8227
0.6409 0.4501 0.7921 0.7402
Accuracy 0.5232 0.5957 0.8097 0.7795
0.4753 0.5252 0.8059 0.7658
F1-score

LINE DW N2V T-EDGE G2V-t G2V-a I2BGNN PDGNN
0.8551
0.9068
0.8768
0.8800

0.8069 0.8103
0.7985 0.7490
0.8032 0.7870
0.8015 0.7783

0.8269
0.8699
0.8432
0.8470

0.8041
0.7533
0.7838
0.7763

Recall

EthereumG4

Algorithm MF

Precision 0.6687 0.6993 0.8454 0.8210
0.6017 0.5439 0.8044 0.7720
Accuracy 0.5022 0.6547 0.8287 0.7982
0.4249 0.6103 0.8238 0.7919
F1-score

LINE DW N2V T-EDGE G2V-t G2V-a I2BGNN PDGNN
0.8648
0.9137
0.8852
0.8883

0.8252 0.8192
0.8455 0.8563
0.8314 0.8332
0.8339 0.8367

0.8156
0.8707
0.8359
0.8404

0.8234
0.7972
0.8126
0.8093

Recall

EthereumG5

Algorithm MF

Precision 0.6509 0.6765 0.8015 0.8184
0.8033 0.5603 0.7934 0.7521
Accuracy 0.6496 0.6463 0.7975 0.7860
0.6966 0.6126 0.7964 0.7755
F1-score

LINE DW N2V T-EDGE G2V-t G2V-a I2BGNN PDGNN
0.8930
0.8992
0.8950
0.8958

0.8160 0.8079
0.8413 0.8248
0.8256 0.8140
0.8284 0.8160

0.8331
0.8694
0.8463
0.8502

0.8240
0.7537
0.7959
0.7867

Recall

4.4 Evaluation on Phishing Detection

We compare our PDGNN with seven baseline methods to evaluate its eﬀective-
ness in detecting phishing accounts, and the experimental results are reported in
Table 2, from which we observe that our PDGNN achieve state-of-the-art results
with respect to comparison methods.

Across all datasets, the manual feature method (MF) has the worst detec-
tion performance, because simple heuristic features are not capable of capturing
structural pattern features of accounts. Compared with manual features, ran-
dom walk-based methods (DW, N2V, T-EDGE) achieve better performance in
detecting phishing accounts, because they can learn the structural pattern infor-
mation of accounts. Graph2Vec and I2BGNN consider phishing detection as a

Phishing Fraud Detection on Ethereum using Graph Neural Network

9

graph classiﬁcation task, and outperform other baselines with node classiﬁcation
manner, indicating that the key behavior pattern information of accounts can
be preserved in the account subgraphs.

For our PDGNN, it signiﬁcantly outperforms manual feature method (MF)
across all datasets, and yields 28.60%
109.21% relative improvement in terms
∼
of F1-score, indicating that the learned account features are better at charac-
terizing the behavior patterns of phishing accounts than the heuristic features.
When compared to graph embedding methods, our PDGNN surpasses strong
baselines: we observe 6.17%
11.06% relative improvement over best baselines.
Our PDGNN uses structural information to update the attribute features of
accounts and optimizes them in an end-to-end manner, which signiﬁcantly out-
performs graph embedding methods that only extract structural information of
account interactions and detect phishing accounts in a two-stage manner. We
also compare with end-to-end GNN-based method I2BGNN, and observe 3.90%
6.26% relative improvement, which may beneﬁt from the better expression

∼

∼
ability of Chebyshev GCN.

4.5 Parameter Analysis

We further investigate the impact of diﬀerent parameters in our PDGNN.

−

−

−

−

t, t

a, a

a and t

t. For example, a

Impact of Sampling Strategies We sample transaction subgraphs according
to diﬀerent edge information, and preserve one of the edge information, yielding
four types of subgraph datasets: a
t
represent that we sample transaction subgraphs according to the transaction
amount value a and preserve the transaction times t as edge weight. Table 2
shows the phishing detection results under diﬀerent sampling strategies, from
which we observe that a
t achieve better performance in most
−
cases. We have reasonable explanations for such phenomenon. Phishers engage
in illegal fraud activities, they usually spread a large number of websites, emails
or links containing viruses, unwanted software, etc., and trick the recipient into
doing remittances directly. As a result, the center phishing account would receive
large number of transactions from those victims, which is signiﬁcantly diﬀerent
from the behavior patterns of normal accounts. Thus we speculate that the
transaction times t (i.e., the number of transactions) would play an important
role in distinguishing phishing accounts.

t and t

−

−

Impact of Directivity Here, we investigate the impact of the network direc-
tivity on the proposed PDGNN, as shown in Fig. 3. As we can see, training with
undirected networks seems to beneﬁt the model generalization more, indicating
that undirected networks greatly simplify the complex and redundant structure
in the Ethereum transaction network and have better detection performance
than directed ones.

10

P. Li et al.

Fig. 2. Phishing detection results under diﬀerent sampling strategies.

Fig. 3. Phishing detection results under directed and undirected networks.

Impact of Graph Pooling Here we use max-pooling and average-pooling to
test the performance of subgraph representation. Max-pooling can extract the

a−aa−tt−at−tG1G2G3G4G50.84160.85000.84070.83190.86950.87810.87310.88750.86550.85540.86620.85510.85270.85100.83570.86480.85810.88140.86300.8930Precisiona−aa−tt−at−tG1G2G3G4G50.94610.91710.92940.93770.92600.92330.92050.92050.89600.91110.88520.90680.88310.91190.89390.91370.89590.89260.89090.8992Recalla−aa−tt−at−tG1G2G3G4G50.88450.87840.87630.87420.89320.89730.89180.90140.87780.87780.87460.87680.86550.87620.85920.88520.87360.88600.87440.8950Accuracya−aa−tt−at−tG1G2G3G4G50.89070.88220.88220.88130.89670.89980.89500.90330.87950.88170.87530.88000.86720.88010.86340.88830.87640.88670.87640.8958F1-score0.840.850.860.870.880.890.890.900.910.920.930.940.860.870.880.890.900.870.880.890.90Phishing Fraud Detection on Ethereum using Graph Neural Network

11

Fig. 4. Phishing detection results under diﬀerent graph pooling functions.

most important features of each node in the subgraph, while average-pooling can
keep the information of the whole subgraph and make features smoother. Fig. 4
shows the phishing detection results under diﬀerent graph pooling functions,
from which we observe that average-pooling outperforms max-pooling in most
cases, indicating that the characteristics of all nodes play an important role in
representing the behavior patterns reﬂected in subgraph.

Impact of Hidden Dimension GNN is usually applied to shallow networks,
and simply stacking more layers will lead to feature over-smoothing. In this pa-
per, we apply two GNN layers in PDGNN. The impact of hidden dimensions is
shown in Fig. 5, from which we can observe that the phishing detection perfor-
mance is proportional to the dimension of the hidden layer to a certain extent,
i.e., high dimensional embedding can encode more information. However, when
the hidden dimension increases continuously, the performance tends to decrease.
The reason is that the model with high dimension GNN layer will be overﬁtting,
resulting in poor model generalization.

5 Conclusions and Future Work

In this paper, we propose a deep model phishing detection framework based
on graph classiﬁcation, which provides a novel network perspective of to de-
tects phishing scam. Speciﬁcally, we present a lightweight network method to

12

P. Li et al.

Fig. 5. Phishing account detection results under diﬀerent dimensions of the convolu-
tional layer.

rescale dataset and make subgraph sampling to reduce in resource consumption.
Further, we designi an end-to-end PDGNN model to learn user behaviors and
detect phishing accounts. Experimental results demonstrate the eﬀectiveness of
our proposed phishing detection framework, and indicate that PDGNN is capa-
ble of extracting more information from Ethereum transactions.

For future work, we plan to design more comprehensive subgraph sampling
rules to make full use of the Ethereum transaction information. At the same time,
we hope analyze account behavior from more application scenarios to create a
secure transaction environment.

Acknowledgments This work was partially supported by the National Key
R&D Program of China under Grant 2020YFB1006104, by the Key R&D Pro-
grams of Zhejiang under Grant 2022C01018, by the National Natural Science
Foundation of China under Grant 61973273, and by the Zhejiang Provincial
Natural Science Foundation of China under Grant LR19F030001.

References

1. Holub, A., O’Connor, J.: Coinhoarder: Tracking a ukrainian bitcoin phishing ring
dns style. In: 2018 APWG Symposium on Electronic Crime Research (eCrime).
pp. 1–5. IEEE (2018)

2. Conti, M., Kumar, E.S., Lal, C., Ruj, S.: A survey on security and privacy issues
of bitcoin. IEEE Communications Surveys & Tutorials 20(4), 3416–3452 (2018)

Phishing Fraud Detection on Ethereum using Graph Neural Network

13

3. Bartoletti, M., Carta, S., Cimoli, T., Saia, R.: Dissecting ponzi schemes on
ethereum: identiﬁcation, analysis, and impact. Future Generation Computer Sys-
tems 102, 259–277 (2020)

4. Wu, J., Yuan, Q., Lin, D., You, W., Chen, W., Chen, C., Zheng, Z.: Who are
the phishers? phishing scam detection on ethereum via network embedding. IEEE
Transactions on Systems, Man, and Cybernetics: Systems (2020)

5. Chen, L., Peng, J., Liu, Y., Li, J., Xie, F., Zheng, Z.: Phishing scams detection in
ethereum transaction network. ACM Transactions on Internet Technology (TOIT)
21(1), 1–16 (2020)

6. Wang, J., Chen, P., Yu, S., Xuan, Q.: Tsgn: Transaction subgraph networks for
identifying ethereum phishing accounts. In: International Conference on Blockchain
and Trustworthy Systems. pp. 187–200. Springer (2021)

7. Shen, J., Zhou, J., Xie, Y., Yu, S., Xuan, Q.: Identity inference on blockchain using
graph neural network. In: International Conference on Blockchain and Trustworthy
Systems. pp. 3–17. Springer (2021)

8. Zhou, J., Hu, C., Chi, J., Wu, J., Shen, M., Xuan, Q.: Behavior-aware account de-
anonymization on ethereum interaction graph. arXiv preprint arXiv:2203.09360
(2022)

9. Zhang, D., Yin, J., Zhu, X., Zhang, C.: Network representation learning: A survey.

IEEE transactions on Big Data 6(1), 3–28 (2018)

10. Abu-El-Haija, S., Kapoor, A., Perozzi, B., Lee, J.: N-gcn: Multi-scale graph con-
volution for semi-supervised node classiﬁcation. In: uncertainty in artiﬁcial intelli-
gence. pp. 841–851. PMLR (2020)

11. Xuan, Q., Wang, J., Zhao, M., Yuan, J., Fu, C., Ruan, Z., Chen, G.: Subgraph net-
works with application to structural feature space expansion. IEEE Transactions
on Knowledge and Data Engineering 33(6), 2776–2789 (2019)

12. Chen, J., Zhang, J., Chen, Z., Du, M., Xuan, Q.: Time-aware gradient attack
on dynamic network link prediction. IEEE Transactions on Knowledge and Data
Engineering (2021)

13. Perozzi, B., Al-Rfou, R., Skiena, S.: Deepwalk: Online learning of social represen-
tations. In: Proceedings of the 20th ACM SIGKDD international conference on
Knowledge discovery and data mining. pp. 701–710 (2014)

14. Grover, A., Leskovec, J.: node2vec: Scalable feature learning for networks. In: Pro-
ceedings of the 22nd ACM SIGKDD international conference on Knowledge dis-
covery and data mining. pp. 855–864 (2016)

15. Ahmed, A., Shervashidze, N., Narayanamurthy, S., Josifovski, V., Smola, A.J.:
Distributed large-scale natural graph factorization. In: Proceedings of the 22nd
international conference on World Wide Web. pp. 37–48 (2013)

16. Cao, S., Lu, W., Xu, Q.: Grarep: Learning graph representations with global struc-
tural information. In: Proceedings of the 24th ACM international on conference on
information and knowledge management. pp. 891–900 (2015)

17. Ou, M., Cui, P., Pei, J., Zhang, Z., Zhu, W.: Asymmetric transitivity preserv-
ing graph embedding. In: Proceedings of the 22nd ACM SIGKDD international
conference on Knowledge discovery and data mining. pp. 1105–1114 (2016)

18. Tang, J., Qu, M., Wang, M., Zhang, M., Yan, J., Mei, Q.: Line: Large-scale infor-
mation network embedding. In: Proceedings of the 24th international conference
on world wide web. pp. 1067–1077 (2015)

19. Kipf, T.N., Welling, M.: Semi-supervised classiﬁcation with graph convolutional

networks. arXiv preprint arXiv:1609.02907 (2016)

14

P. Li et al.

20. Narayanan, A., Chandramohan, M., Venkatesan, R., Chen, L., Liu, Y., Jaiswal,
S.: graph2vec: Learning distributed representations of graphs. arXiv preprint
arXiv:1707.05005 (2017)

21. Lin, D., Wu, J., Yuan, Q., Zheng, Z.: T-edge: Temporal weighted multidigraph
embedding for ethereum transaction network analysis. Frontiers in Physics 8, 204
(2020)

