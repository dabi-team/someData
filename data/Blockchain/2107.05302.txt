On Reward Sharing in Blockchain Mining Pools

Burak Can∗

Jens Leth Hougaard†

Mohsen Pourpouneh‡

July 13, 2021

Abstract

This paper proposes a conceptual framework for the analysis of reward sharing schemes
in mining pools, such as those associated with Bitcoin. The framework is centered around
the reported shares in a pool instead of agents and results in two new fairness criteria,
absolute and relative redistribution. These criteria impose that the addition of a share
to the pool aﬀects all previous shares in the same way, either in absolute amount or in
relative ratio. We characterize two large classes of economically viable reward sharing
schemes corresponding to each of these fairness criteria in turn. We further show that
the intersection of these classes brings about a generalization of the well-known propor-
tional scheme, which also leads to a new characterization of the proportional scheme as a
corollary.

Keywords: Blockchain, Bitcoin, fairness, mining pools, resource allocation, mechanism design.

JEL Classiﬁcation: D63, G20, L86, D31.

1
2
0
2

l
u
J

2
1

]
T
G
.
s
c
[

1
v
2
0
3
5
0
.
7
0
1
2
:
v
i
X
r
a

∗Department of Data Analytics and Digitalisation, Maastricht University, the Netherlands, E-mail:
b.can@maastrichtuniversity.nl. This work was partially supported by the Graduate School of Business
and Economics, Maastricht University.

†Economics, NYU-Shanghai, China, E-mail: jlh21@nyu.edu; and IFRO, University of Copenhagen, Den-
mark, E-mail: jlh@ifro.ku.dk. This work is supported by the Center for Blockchains and Electronic Markets
funded by the Carlsberg Foundation under grant no. CF18-1112.

‡Department of Food and Resource Economics (IFRO), University of Copenhagen, Denmark, E-mail:
mohsen@ifro.ku.dk. This work is supported by the Center for Blockchains and Electronic Markets funded by
the Carlsberg Foundation under grant no. CF18-1112.

1

 
 
 
 
 
 
1 Introduction

The invention of the ﬁrst decentralized cryptocurrency, Bitcoin, (Nakamoto (2008)) sparked
a huge interest in decentralized networks with distributed trust, both academically and busi-
nesswise. The technology behind these decentralized networks is called Blockchain. Loosely
speaking, a blockchain is a ledger composed of an immutable chain of transactions organized
in blocks. Each block is synchronized across the network users (nodes) through a distributed
consensus protocol which ensures that all the nodes in the network agree on the latest status
of the ledger1.

In terms of ﬁnancials, as of May 2021, the global crypto market cap exceeds 2.26 trillion2
and a single Bitcoin is traded around 56000 USD while its total market cap is comparable to
the GDPs of various countries3. In terms of other use cases, there are an increasing number
decentralized applications on various blockchains, e.g., Ethereum mainnet has about 2700
dApps deployed, providing solutions in banking, ﬁnance, law, logistics, and other sectors.
Following the global interest in Blockchains, all EU members and European Commission have
joined forces to form the European Blockchain Partnership (EBP) while China has already
launched trials for its national cryptocurrency, the digital Yuan.

1.1 Consensus Protocols and Pools

The development of the blockchain technology still in its infancy. The oldest consensus proto-
col that has a proven track record is the original Proof-of-Work (PoW)4 protocol in Nakamoto
(2008), while many new blockchains utilize Proof-of-Stake (PoS) protocol for its energy eﬃ-
ciency and transaction throughput. The process of achieving consensus is called mining in
PoW, while this is achieved by staking in PoS5. In theory, the probability of ﬁnding a full

1To agree on the latest status of the ledger, Blockchains utilize various diﬀerent consensus protocols, see

Nguyen and Kim (2018); Mingxiao et al. (2017).

2https://coinmarketcap.com
3For example, Hungary, Kenya, Luxembourg and many others.

See the following link for a rank-
ing: https://worldpopulationreview.com/countries/countries-by-gdp. For other ﬁnancial statistics, see
https://bitinfocharts.com/bitcoin/.

4To achieve consensus under PoW protocol, some nodes, called miners, compete with one another to solve
a cryptographic puzzle. Miners search for an integer (a nonce) such that when combined (hashed) together
with the list of transactions (the block header), produces another integer known as the hash value. In case,
this hash value is less than a predeﬁned number (network target value) set by the network, the so called puzzle
is solved.

5The solution to this aforementioned puzzle in PoW is called a full solution, for which the successful miner
is given a ﬁnancial reward. Similarly participants in PoS are awarded according to their stakes in the network

2

solution in PoW is proportional to the computational power of the miner6. However, the
computational power of individual miners are negligible in comparison to that of the net-
work7. Therefore, mining alone leads to a highly unstable income and incentivizes miners to
pool their resources and split the resulting rewards. Such cooperative actions result in lower
income variation for miners (Romiti et al. (2019); Rosenfeld (2011)). This is why, despite
being a decentralized system by design, PoW has been shown to induce centralization both
theoretically (Leshno and Strack (2019) and Chen et al. (2019)) and in practice through the
emergence and total dominance of centralized mining-pools. In fact, as of 2021, almost 90%
of the total computational power in Bitcoin blockchain is provided by the top ten mining
pools8. Consequently, mining pools are probably the most important actors in the blockchain
ecosystem.

Typically, a mining pool is maintained and coordinated by a pool manager. The success of
a pool depends on its computational power, therefore the miners must commit their resources
to ﬁnd a full solution through mining. To estimate the computing power of each miner, the
pool manager sets an easier puzzle to solve and requests the solutions to this puzzle, which
are called partial solutions 9. Miners submit these partial solutions to the manager, each of
which forms a share. In case one of these shares is a full solution, the pool manager gets the
reward and distributes it among the pool members based on their submitted shares and a
predeﬁned reward sharing scheme. The choice of reward sharing scheme is a crucial design
element in a mining pool. The scheme must ensure that the pool is economically viable and
must provide miners with the right incentives to act in ways beneﬁcial for the common good
of the pool.

1.2 Our contribution

In this paper, we analyze and design reward sharing schemes in mining pools by proposing a
comprehensive axiomatic perspective. We depart from existing literature in terms of frame-
work in various ways. First, our axiomatic framework is not on the consensus protocols but
on the mining pools in any of these protocols. Second, our model is not restricted to a static
single block, since various schemes in practice pay the miners repetitively over time in various

6For

an

extensive

demonstration

of

these

concepts

see Anders Brownworth’s

blog

at

https://andersbrownworth.com/blockchain/hash.

1
1019 .

7At the time of writing this paper, the total hashing power of the Bitcoin blockchain is 12018KH/s, while
a state-of-the-art CPU has about 11KH/s. Therefore, the probability of ﬁnding a full solution as a solo miner
is roughly

8https://btc.com/stats/pool
9This is done by setting an internal pool target value higher (easier) than the network target value for the
original puzzle (see footnote 6). Note that the set of partial solutions for this easier target value is a superset
of the full solutions. Therefore it is a very good approximation of the computational commitment of a miner.

3

blocks. Third, we propose reward sharing schemes and allocations not on the miners in a pool
but instead on the shares submitted by these miners. This is particularly enriching, because
deﬁning allocations on shares (rather than on miners), enables more granular and relevant
parameters such as the submission time or order of the shares. Therefore, we can practically
formulate any of the existing schemes under our uniﬁed axiomatic framework, e.g., the Slush
and PPLNS10, and allow designers to propose new ones.

We formulate several desirable axioms for reward sharing schemes.

In particular, we
propose two axioms concerning fairness, i.e., how the awards for the shares should be redis-
tributed11 when the round is delayed by an additional share. We show that, together with
other axioms, each of these fairness axioms, absolute redistribution and relative redistribution,
characterize two distinct classes of reward sharing schemes, the class of absolute fair and rel-
ative fair schemes. Thereafter, we characterize the generalized class of proportional reward
schemes, i.e., k-pseudo proportional schemes, which satisﬁes both of these axioms simulta-
neously. Finally, by imposing an additional strict positivity requirement, we single out the
well-known proportional reward scheme.

In a recent study by Tovanich et al. (2021) and Belotti et al. (2018), it is shown that the
reward sharing schemes and pool fees inﬂuence miners’ decisions to join, change, or exit from
a mining pool. Therefore from the perspective of miners as well as the pool management, the
choice of a reward sharing scheme is a vital element of a well functioning and stable mining
pool. Hence, the miners perception of fairness of the reward sharing scheme is crucial.

1.3 Related Literature

Our paper relates to the literature on miner’s general incentives under the PoW protocol.
The seminal paper by Rosenfeld (2011) provides one of the earliest comprehensive mathemat-
ical analysis on the reward sharing schemes in mining pools. Schrijvers et al. (2016) discuss
strategic behavior of miners under “incentive compatibility”. Zolotavkin et al. (2017) inves-
tigate the interplay between incentive compatibility and the distribution of computational
power among miners in the pool. Lewenberg et al. (2015) model mining pools from a coop-
erative game perspective while Qin et al. (2018) and Chatzigiannis et al. (2019) investigate

10See Rosenfeld (2011) for a comprehensive list of reward sharing schemes, and Section 5 for formal deﬁni-

tions.

11This redistribution could be either in absolute amount or in relative ratio. Fair reward sharing is crucial
for pool stability which in turn aﬀects overall system eﬃciency. Given the symmetric nature of the shares
in a pool round, these fairness axioms represent a natural (stronger) versions of the celebrated “population
monotonicity” axiom in the literature on fair allocation (e.g. Thomson (2016)).

4

competition among pools12.

In terms of methodology, our paper utilizes tools from the literature on economic design
(see e.g., Moulin (1991); Young (1994); Thomson (2018)) and is inspired by welfare economics,
in particular the literature on distributional fairness (see e.g., Roemer (1996); Moulin (1987);
Young (1994) and fair allocation in networks (see e.g., Hougaard (2018); Moulin (2018)). As
mentioned, we take an axiomatic approach to the analysis of reward sharing schemes: a list
of desirable properties of generic schemes (axioms) are identiﬁed, and individual schemes are
uniquely characterized by diﬀerent sets of axioms. In turn, this allows a qualitative comparison
of various reward sharing schemes based on their axiomatic foundation.

There has been a steadily growing literature, pointing towards utilization of mechanism
design in the context of blockchains. Can (2019) proposes the use of economic design on the
consensus protocol, while Hougaard et al. (2020) provides a diﬀerent rationale for PoW by
decentralized socially optimal reward schemes. Concerning an axiomatic approach to PoW,
Leshno and Strack (2019) and Chen et al. (2019) propose characterizations (on the consensus
protocols) with properties such as anonymity, collusion-proofness and sybil-proofness the last
two of which are analogous to merging and splitting13.

The remaining part of the paper is organized as follows. In Section 2 we propose our mod-
eling framework and notation. Section 3 deﬁnes and comments on various axioms including
the two fairness conditions. Section 4 presents the characterization results. Finally, Section
5 closes with a discussion of well-known schemes under our proposed framework and logical
independence of the characterizing axioms.

2 Model and notation

Let T denote the set of all possible time signatures. Let H denote the set of all possible hashes
and S ( H denote the set of all admissible hashes, i.e., hash values that satisfy the diﬃculty
of the pool. A (partial solution) share is then a two-tuple s = (h, t) ∈ S × T consisting of
an admissible hash submitted to the pool at time14 t. We denote the time signature of a
share s by a function τ (s), i.e., for s = (h, t), we have τ (s) = t. The set of all ordered shares

12For a list of further readings regarding miners’ behaviour, see Eyal (2015); Eyal and Sirer (2014); Biais et al.
(2019); Babaioﬀ et al. (2012); Sapirshtein et al. (2016); Fisch et al. (2017); Carlsten et al. (2016); Kiayias et al.
(2016); Cong et al. (2019).

13Both papers propose characterizations of the proportional reward scheme which is well studied in the
economic design literature and in bankruptcy models (see Banker (1981); Moulin (1987); Chun (1988); de Frutos
(1999)).

14Since some known reward sharing schemes use time signature as input we denote the shares with (h, t).

We shall drop the time signature when it is redundant for the schemes we analyze.

5

submitted in a pool is denoted by S = {s1, s2, s3, . . . , sm} ( S × T where the order is deﬁned
by the shares’ time signatures. We do not associate shares with individual miners since all
schemes that are used in practice are neutral towards the “identity” of the miner.

A pool round is an ordered set of shares ending with a share, submitted by the pool,
which is a full solution on the blockchain. So everytime a share submitted by the pool is
a full solution on the blockchain, a pool round ends and a new round begins. We consider
the partitioning of the submitted set of shares by (pool) rounds, and denote it by P(S): for
instance, let l = |P(S)| and let P1, P2, . . . , Pl denote the set of shares submitted in rounds
1, 2, . . . , l respectively. Let H = (S, P(S)) denote the history of the pool.

Given the partition of a history P(S) and any share s ∈ S, we denote the set of all shares
in the same round as s by P (s) = X ∈ P(S) such that s ∈ X. Given a round P ∈ P(S),
we denote the relative rank of a share s in P by ρ(s) = |{s′ ∈ P |τ (s′) < τ (s)}| + 1, i.e., the
number of shares that are submitted in round P up to, and including, s. We deﬁne the length
of a round P by the number of shares submitted in that round, i.e. |P |.

Example 1. Equation 1 below, illustrates an example of a history: shares in bold are full
solutions.

S = {s1, . . . , s10, s11 . . . , s150, . . . , s564, . . . , s589, . . . , sm}

P(S) = {{s1, s2, . . . , s10

}, {s11 . . . , s150

}, . . . , {s564, . . . , s589

}, . . . , {. . . , sm

}}

(1)

P1

P2

Pr

Pl

Considering, for instance, the share s564 we see that it is the ﬁrst share of round r, so

|

{z

}

|

{z

}

|

{z

}

| {z }

P (s564) = Pr = {s564, . . . , s589} and ρ(s564) = 1. The length of round r is |Pr| = 26.

Deﬁnition 1. Given a history H = (S, P(S)), we deﬁne a reward sharing scheme, α, by
awards

to every share s ∈ S.

α(s, H) ∈ R+

In practice, the payments to miners are made after a certain amount of time, therefore
when considering the allocation of rewards, we analyze a round that is terminated and already
conﬁrmed on the Blockchain15. For each pool round, the pool manager charges a fee to
compensate the costs of running the pool. For a history H = (S, P(S)) we denote this fee by
the mapping f : 2S \ ∅ → R. A generic fee for a round Pr in that case would be f (Pr). We
denote the award to be distributed in this round by Rr = B − f (Pr), where B is the block

15The pool manager should wait for at least 6 block conﬁrmation to make sure the block found by the pool

ends up on the longest chain.

6

reward assigned to the pool when ﬁnding a full solution. Next, we introduce one of the most
intuitive schemes, also known as the Proportional scheme below.

Example 2. The Proportional scheme is one of the most straightforward and intuitive reward
sharing schemes. For any given round, the pool manager gets a ﬁxed fraction of the reward
and then it assigns to every share s ∈ P (s), a proportion of the reward relative to the length
of the corresponding round |P (s)|. Formally, for any history H = (S, P(S)) and any share
s ∈ S:

α(s, H) =

Rr
|P (s)|

.

In Section F we provide a brief discussion of various reward sharing schemes that are used

in practice or proposed to improve existing practices.

For our axiomatic analysis below, we are inspired by the framework in Schrijvers et al.
(2016). In particular, we consider situations in which full solutions are delayed, i.e., when
the pool round ends with the submission of additional share(s) at the end. In the simplest of
such cases, we consider histories where a pool round is extended by one additional share at
the end of the round. We therefore need some additional deﬁnitions.

Formally, let H = (S, P(S)) be the history of a pool. Let s∗ 6∈ S be the so-called additional
last share (into the rth round), i.e., τ (s) < τ (s∗) < τ (s) for all s ∈ Pr and for all s ∈ Pr+1.
The history H ′ = (S′, P ′(S′)) is an extension of H at the rth round whenever S′ = S ∪ {s∗}
and:

• P ′

k = Pk for all k 6= r,

• P ′

r = Pr ∪ {s∗}.

Remark 1. Note that, one can consider the extension of a round at any position and not only
at the end of the round. Similarly we could also consider extension of a round by appending
multiple shares at the end. However both of these scenarios lead to very restrictive axioms in
the upcoming section (see Remark 2).

Next, we deﬁne the restriction of a history to a single round. Let H = (S, P(S)) be any
history. The restriction of H to the rth round is denoted as H|r = (Pr, {Pr}). That is, the
set of shares in the history only consists of those at the rth round and the only partition of
the history is Pr.

Example 3. Recall the situation in Example 1. Below is the example of an extension of the

7

history in Equation 1 at the rth round by the full solution (share) s∗.

S = {s1, . . . , s10, s11 . . . , s150, . . . , s564, . . . , s589, s∗, . . . , sm}
}, . . . , {s564, . . . , s589, s∗

}, {s11 . . . , s150

P(S) = {{s1, s2, . . . , s10

}, . . . , {. . . , sm

}}

P1

P2

Pr

Pl

}
Moreover, an example of restriction of the history in Equation 1 to the rth round is

| {z }

{z

{z

{z

|

}

|

}

|

H|r =

{s564, . . . , s589},

{s564, . . . , s589

}

(cid:16)

n

|

Pr

{z

o (cid:17)

}

3 Axioms

In the following section we discuss ﬁve desirable properties of generic reward sharing schemes.
Two of these reﬂect diﬀerent aspects of fairness related to how the rewards must be re-
distributed in case there is one additional share in the round16.

The ﬁrst property ensures a ﬁxed total reward to the miners for any pool round in a history.
That implies that the fee charged by the pool manager is the same for any two rounds in a
history. This guarantees that the pool manager can not take advantage (or be harmed) from
shorter (longer) rounds, as the pool must distribute the same amount to the miners in any
round. This can be seen as a desirable feature, especially because it reduces volatility and
uncertainty of miners’ income, which is the main driving force behind forming pools. A miner
could potentially be more interested in working under well-deﬁned income schemes and avoid
arbitrary fee chargers by the pool manager. Formally,

• Fixed Total Reward: A scheme α satisﬁes ﬁxed total reward whenever, for any history

H = (S, P(S)), and any two rounds P, P ′ ∈ P(S), we have

α(s, H) =

α(s, H).

s∈P
X

Xs∈P ′

Next, we consider situations where the submission time of shares may change. To analyze
such situations, we create a ceteris paribus case where the time signature of only a single share
in a history changes in a “minimal” way. Note that in pools, shares are typically submitted
very frequently hence by a minimal delay we mean situations which essentially do not aﬀect
the order in which these shares are submitted, e.g., negligible network lags in milliseconds.
Formally, let H = (S, P(S)) be any history, and consider any round Pr ∈ P(S), and any share
si ∈ Pr in this round. A time-shift H ′ = (S′, P ′(S′)) of H at si is deﬁned as:

16In this sense our fairness axioms can be viewed as relational axioms in case of a variable populations

framework, see e.g., Thomson (2016).

8

1. P ′

j = Pj for all j 6= r, and

2. S′ = (S \ {si}) ∪ {s′

i} for some s′

i ∈ S \ S such that τ (si−1) < τ (s′

i) < τ (si+1),

Point 1 above simply says in both histories all rounds are identical except round r. Point
2 says in round r everything is the same except share si which moved tiny bit later in history
H ′ but still between the same share as in history H. The next condition, dubbed ordinality,
requires that time-shifts should not aﬀect the reward distribution, so long as the order of
shares is preserved.

• Ordinality: A scheme α satisﬁes ordinality if, for any H = (S, P(S)), and for any

time-shift H ′ = (S′, P ′(S′)) of H at any si, we have:

α(s, H) = α(s, H ′) for all s ∈ S \ {si}

The next condition, dubbed budget limit, requires that the pool manager charges a non-

negative fee. This ensures that the pool does not go bankrupt.

• Budget Limit: A scheme α satisﬁes budget limit whenever, for any history H =

(S, P(S)), and any round P ∈ P(S), we have:

α(s, H) ≤ B.

s∈P
X

We now turn to our two main fairness conditions. The ﬁrst is dubbed absolute redis-
tribution, and requires that in case a round is extended (delayed) by one additional share,
the award assigned to any existing share in the corresponding round decreases by the same
amount 17. Formally,

• Absolute redistribution: A scheme α satisﬁes absolute redistribution whenever, for
any history H = (S, P(S)), any round Pr with |Pr| > 1, and any extension H ′ = (S′, P ′(S′))
at the rth round we have for any si, sj ∈ Pr:

α(si, H) − α(si, H ′) = α(sj, H) − α(sj, H ′).

In the same spirit, the next condition, dubbed relative redistribution, requires that in case
a round is extended (delayed) by one additional share, the reward of each existing share in
the corresponding round is decreased by the same ratio. Formally,

17This is, in fact, a strong version of Population monotonicity in Thomson (2016) and resembles the spirit of
Myerson’s fairness axiom Myerson (1977) stating that agents should be aﬀected equally from entering mutual
agreements.

9

• Relative redistribution: A scheme α satisﬁes relative redistribution whenever for any
history H = (S, P(S)), any round Pr with |Pr| > 1, and any extension H ′ = (S′, P ′(S′)) at
the rth round, we have for any si, sj ∈ Pr with α(si, H) 6= 0 and α(sj, H) 6= 0:

α(si, H ′)
α(si, H)

=

α(sj, H ′)
α(sj, H)

.

Remark 2. As hinted in Remark 1, the deﬁnition of extension is crucial for both of the above
axioms. In case we construct the extensions with not appending a single share at the end but
instead arbitrarily positioning the share in the round, we would be strengthening both fairness
axioms. Similarly, in case we construct the extensions with multiple shares, again these two
fairness axioms will be strengthened, hence leading to a restrictive framework possibly leading
to impossibilities.

The ﬁnal condition, dubbed round based rewards, requires that the distribution of the
reward only depends on the round itself and it is not aﬀected by any other rounds in the
history. Formally,

• Round based rewards: A scheme α satisﬁes round based rewards whenever, for any

history H, and any round Pr, we have for all s ∈ Pr:

α(s, H) = α(s, H|r).

We ﬁrst observe that round based rewards strengthens the ﬁxed total reward condition,

such that the latter imposes the ﬁxed total rewards for any rounds in any history.

Lemma 1. If a scheme α satisﬁes ﬁxed total reward and round based rewards, then for any two
histories H = (S, P(S)) and H ′ = (S′, P ′(S′)) and any two rounds P ∈ P(S) and P ′ ∈ P ′(S′)
we have

α(s, H) =

α(s, H ′).

s∈P
X

Xs∈P ′

Proof. See Appendix A.

(cid:4)

Remark 3. An immediate consequence of Lemma 1 is that, if a scheme satisﬁes ﬁxed total
rewards and round based rewards then the fee must be the same for all histories and all rounds
in these histories. Therefore, these two axioms, together with budget limit imply a stronger
version of the budget limit18 in the sense that for a scheme which satisﬁes ﬁxed total rewards
and round based rewards and for any history H = (S, P(S)) and any round P ∈ P(S), we
have

α(s, H) = R, with R = B − f for some f ∈ [0, B].

s∈P
P

18This is conceptually similar to the strong budget balance in Chen et al. (2019).

10

Second, we observe that joint with ordinality, ﬁxed total reward and round based rewards
imply that shares with same relative rank in rounds of equal length get identical awards.
Formally,

Lemma 2. If a scheme α satisﬁes ﬁxed total reward, round based rewards and ordinality, then
for any two histories H = (S, P(S)) and ¯H = ( ¯S, ¯P( ¯S)) and any two rounds P ∈ P(S) and
¯P ∈ ¯P( ¯S) such that |P | = | ¯P |, we have for all s ∈ P and for all ¯s ∈ ¯P such that ρ(s) = ¯ρ(¯s):

α(s, H) = α(¯s, ¯H).

Proof. See Appendix B.

(cid:4)

4 Fair reward sharing schemes

4.1 Absolute Fairness

In this section we single out a particular class of schemes, called the class of absolute fair
schemes. We show that this is the only such class that satisﬁes absolute redistribution together
with ﬁxed total reward, budget limit, round based rewards, and ordinality.

Speciﬁcally, a scheme belongs to this class if there exists ε : N → [0, 1] with ε(1) = 1 and

∞

ε(ρ(s)) ≥

i=ρ(s)+1
P

ε(i)
i−1 such that,

α∗∗(s, H) = R

ε(ρ(s)) −

(cid:18)

|P (s)|

Xi=ρ(s)+1

ε(i)
i − 1

(cid:19)

(2)

Note that for the last share ρ(s) = |P (s)|, therefore

convention it equals 0.

|P (s)|

i=|P (s)|+1
P

ε(i)
i−1 is an empty sum and by

We can interpret absolute fair schemes in an iterative fashion: if there is only one share s,
then ρ(s) = 1 so ε(1) = 1 and the share receives the full net reward R. If we add a share s′,
then ρ(s′) = 2 and ε(2) < 1 so the ﬁrst share s gets R(ε(1)− ε(2)) and the second share s′ gets
Rε(2). Now, adding a third share s′′ the award to both the ﬁrst and second share should be
reduced by the same amount δ. Thus, ε(3) = 2δ and consequently the ﬁrst share is awarded
R(ε(1) − ε(2) − ε(3)
2 ), and so forth, for any
share in the round.

2 ) and the second share is awarded R(ε(2) − ε(3)

Next, we present our ﬁrst main result.

11

Theorem 1. A reward sharing scheme α satisﬁes round based rewards, budget limit, ﬁxed
total reward, ordinality and absolute redistribution if and only if it is an absolute fair scheme
in the sense of (2).

Proof. See Appendix C.

(cid:4)

A prominent member of the class of absolute fair schemes is the proportionals scheme as

we shall demonstrate below.

Proposition 1. The proportional scheme is an absolute fair scheme.

Proof. Let H = (S, P(S)) be any history. It is easy to see the proportional scheme satisﬁes
the round-baseness condition, hence we only consider a history with a single round, i.e.,
). Let ε(ρ(si)) = 1
H = (
ρ(si) for all i ∈ {1, . . . , k}. Note that
ρ(si) = i. Therefore, for any share sj we have:

{s1, . . . , sk}

s1, . . . , sk

,

(cid:8)

(cid:9)

(cid:8)

(cid:9)

k

α∗∗(sj, H) = R

ε(ρ(sj)) −

|P (sj)|

= R

(cid:18)

(cid:18)

1
j

−

k

Xi=ρ(sj)+1
1
i − 1

−

i=j+1 (cid:16)
X

ε(i)
i − 1

(cid:19)

= R

1
i

= R

(cid:17)(cid:19)

(cid:18)

k

i=j+1
X
1
k

−

1
j

1
j

−

−

(cid:16)

1
i × (i − 1)

(cid:19)

=

R
k

(cid:17)(cid:19)

(cid:18)

1
j

Note that for the last share

ε(i) is an empty sum and by convention it equals 0.

i=k+1
P

4.2 Relative Fairness

(cid:4)

In this section we single out a particular class of schemes, called the class of relative fair
schemes. We show that this is the only such class that satisﬁes relative redistribution together
with ﬁxed total reward, budget limit, round based rewards, and ordinality.

Speciﬁcally, a scheme belongs to this class if there exists ε(j) : N → [0, 1] with ε(1) = 1 such
that,

α∗(s, H) = Rε(ρ(s))

1 − ε(j)

(3)

|P (s)|

Note that for the last share ρ(s) = |P (s)|, therefore

(1−ε(j)) is an empty product

and by convention it equals 1.

j=|P (s)|+1
Q

Yj=ρ(s)+1

(cid:0)

(cid:1)

|P (s)|

12

An iterative interpretation of relative fair schemes is as follows: if there is only one share
s, ε(1) = 1 and the share is awarded the entire net reward R. If we add a second share s′,
then s′ will be awarded Rε(2) and the ﬁrst share must get R(ε(1)(1 − ε(2))) = R(1 − ε(2)).
Now, adding third share s′′ we must now have that both the award to the ﬁrst share and
the second share change by the same ratio δ so (1 − ε(2))δ + ε(2)δ + ε(3) = 1 implying that
δ = 1 − ε(3) yielding the award R((1 − ε(2))(1 − ε(3))) to the ﬁrst share and R(ε(2)(1 − ε(3)))
to the second share, and ﬁnally Rε(3) to the third share, and so forth for any share in the
round.

We now present our second main result characterizing the class of relative fair reward

sharing schemes.

Theorem 2. A reward scheme α satisﬁes round based rewards, budget limit, ﬁxed total reward,
ordinality and relative redistribution if and only if it is a relative fair scheme in the sense of
(3).

Proof. See Appendix D.

(cid:4)

It turns out that the proportional scheme also takes up a prominent position among the

relative fair schemes as recorded below.

Proposition 2. The proportional scheme is a relative fair scheme.

Proof. Let H = (S, P(S)) be any history. It is easy to see the proportional scheme satisﬁes
the round-baseness condition, hence we only consider a history with a single round, i.e.,
). Let ε(ρ(si)) = 1
H = (
ρ(si) for all i ∈ {1, . . . , k}. Note that
ρ(si) = i. Therefore, for any share sj we have:

{s1, . . . , sk}

s1, . . . , sk

,

(cid:8)

(cid:9)

(cid:8)

(cid:9)

α∗(sj, H) = R × ε(ρ(sj)) ×

(1 − ε(i))

k

= R × (

= R × (

1
j
1
j

) × (1 −

Yi=ρ(sj )+1
1
j + 1

) × (1 −

1
j + 2

) × · · · × (1 −

) × (

j
j + 1

) × (

j + 1
j + 2

) × · · · × (

k − 2
k − 1

) × (

) =

R
k

)

1
k
k − 1
k

Note that for the last share

k

(1 − ε(i)) is empty product and by convention equals 1. (cid:4)

i=k+1
Q

4.3 Consensus between absolute and relative redistribution

Next, we search for a possible consensus between the two fairness concepts that we discussed
in the previous sections. We ﬁnd that the two aforementioned classes of absolute and relative

13

fair schemes are not mutually exclusive. Therefore, imposing both fairness axioms together
with the others conditions characterize a new class of schemes at the intersection of the former
two classes. We call this new class of schemes k-pseudo proportional schemes and ﬁnd that
this class is also a generalization of the well-known proportional reward scheme mentioned
in Example 2. Formally, given any k and δ, a k-pseudo proportional reward scheme assigns
|P (S)| , so long as the round
awards to shares in a round identical to the proportional scheme,
is shorter than k, i.e., |P (S)| < k. In case the round has more shares than k, then the scheme
assigns an award of i) δ to the kth share, ii) distributes the rest, R − δ, to the ﬁrst k − 1
shares, and iii) awards 0 to any share that is submitted after k. The general structure of the
k-pseudo proportional scheme with k > 1 is as follows:

R

αk,δ(s, H) =

if |P (s)| < k

if |P (s)| ≥ k and ρ(s) < k
if |P (s)| ≥ k and ρ(s) = k
if |P (s)| ≥ k and ρ(s) > k

R
|P (s)| ,
R−δ
k−1 ,
δ,
0,






for 0 ≤ δ ≤ R.

(4)

The following theorem shows that the class of k-pseudo proportional schemes is the only

one at the intersection of relative fair schemes and absolute fair schemes.

Theorem 3. A reward sharing scheme satisﬁes round based rewards, budget limit, ﬁxed total
reward, ordinality, absolute redistribution, and relative redistribution if and only if it is k-
pseudo proportional in the sense of (4).

Proof. See Appendix E.

(cid:4)

Next, we consider a property that ensures strictly positive awards for all shares, for any
history. To ensure that all shares get paid can be seen as a fairness requirement since all
shares involve ”work”, but it also relates to miners’ incentives. If miners are not paid for their
shares they may stop mining for the pool: in particular, if they are not paid after a certain
number of shares in a round as in the k-pseudo-proportional schemes.19 We write this feature
as an additional axiom and provide the resulting characterization of the proportional scheme
as a corollary to Theorem 3, in eﬀect highlighting that the proportional scheme is the only
member of the family (4) that is compatible with miners’ incentives to keep mining for the
pool.

19A weaker version of the axiom would require only strict positivity of the last share in a round. This
would likely be enough to incentivize miners to keep mining for the pool, e.g., as in the Pay-Per-Last-N-Shares
scheme.

14

• Strict positivity: A scheme α satisﬁes strict positivity whenever, for any history

H = (S, P(S)), and any round P ∈ P(S), we have:

α(s, H) ∈ R++.

Corollary 1. The proportional rule is the only rule that satisﬁes round based rewards, budget
limit, ﬁxed total reward, ordinality, absolute redistribution, relative redistribution, and strict
positivity.

Proof. By Theorem 3 any rule that satisﬁes the ﬁrst six axioms, is a k-pseudo proportional
rule. As shown in the proof of Theorem 3, in case k = ∞ this completes the proof. Suppose
for a contradiction, k is ﬁnite. Consider any history with a round Pr such that |Pr| > k.
(cid:4)
Obviously αk,δ(sk+1) = 0 which contradicts strict positivity.

5 Conclusion

This paper provides, for the ﬁrst time, a rich framework for reward sharing schemes in mining
pools through an economic design perspective. To demonstrate the ﬂexibility in the design,
we proposed various desirable axioms and put particular emphasis on fairness concepts. We
provided three diﬀerent characterizations of classes within this framework, i.e., absolute fair,
relative fair, and k-pseudo proportional schemes.

In Appendix F, we show that the framework also allows the formalization of various applied
schemes and investigate these schemes axiomatically. The results are summarized in Table 1.
We also show that the provided axioms are logically independent in Appendix G and provide
a summary in Table 2.

15

References

Babaioﬀ, M., S. Dobzinski, S. Oren, and A. Zohar (2012). On bitcoin and red balloons. In

Proceedings of the 13th ACM conference on electronic commerce, pp. 56–73.

Banker, R. (1981). Equity considerations in traditional full cost allocation practices: an

axiomatic perspective. Norman: University of Oklahoma.

Belotti, M., S. Kirati, and S. Secci (2018). Bitcoin pool-hopping detection. In 2018 IEEE
4th International Forum on Research and Technology for Society and Industry (RTSI), pp.
1–6. IEEE.

Biais, B., C. Bisiere, M. Bouvard, and C. Casamatta (2019). The blockchain folk theorem.

The Review of Financial Studies 32 (5), 1662–1715.

Can, B. (2019). Economic design of things. In The Future of Economic Design, pp. 487–493.

Springer.

Carlsten, M., H. Kalodner, S. M. Weinberg, and A. Narayanan (2016). On the instability of
bitcoin without the block reward. In Proceedings of the 2016 ACM SIGSAC Conference on
Computer and Communications Security, pp. 154–167.

Chatzigiannis, P., F. Baldimtsi, I. Griva, and J. Li (2019). Diversiﬁcation across mining pools:

Optimal mining strategies under PoW. arXiv preprint arXiv:1905.04624 .

Chen, X., C. Papadimitriou, and T. Roughgarden (2019). An axiomatic approach to block
rewards. In Proceedings of the 1st ACM Conference on Advances in Financial Technologies,
pp. 124–131.

Chun, Y. (1988). The proportional solution for rights problems. Mathematical Social Sci-

ences 15 (3), 231–246.

Cong, L. W., Z. He, and J. Li (2019). Decentralized mining in centralized pools. The Review

of Financial Studies.

de Frutos, M. A. (1999). Coalitional manipulations in a bankruptcy problem. Review of

Economic Design 4 (3), 255–272.

Eyal, I. (2015). The miner’s dilemma. In 2015 IEEE Symposium on Security and Privacy,

pp. 89–103. IEEE.

Eyal, I. and E. G. Sirer (2014). Majority is not enough: Bitcoin mining is vulnerable. In
International conference on ﬁnancial cryptography and data security, pp. 436–454. Springer.

16

Fisch, B., R. Pass, and A. Shelat (2017). Socially optimal mining pools. In International

Conference on Web and Internet Economics, pp. 205–218. Springer.

Hougaard, J. L. (2018). Allocation in networks. MIT Press.

Hougaard, J. L., J. D. Moreno-Ternero, and L. P. Østerdal (2020). Optimal management of

evolving hierarchies.

Kiayias, A., E. Koutsoupias, M. Kyropoulou, and Y. Tselekounis (2016). Blockchain mining
games. In Proceedings of the 2016 ACM Conference on Economics and Computation, pp.
365–382.

Lazos, P., F. J. Marmolejo-Coss´ıo, X. Zhou, and J. Katz (2021). RPPLNS: Pay-per-last-N-

shares with a randomised twist. arXiv preprint arXiv:2102.07681 .

Leshno, J. D. and P. Strack (2019). Bitcoin: An axiomatic approach and an impossibility

theorem. American Economic Review: Insights.

Lewenberg, Y., Y. Bachrach, Y. Sompolinsky, A. Zohar, and J. S. Rosenschein (2015). Bitcoin
mining pools: A cooperative game theoretic analysis. In Proceedings of the 2015 Interna-
tional Conference on Autonomous Agents and Multiagent Systems, pp. 919–927. Citeseer.

Mingxiao, D., M. Xiaofeng, Z. Zhe, W. Xiangwei, and C. Qijun (2017). A review on consensus
algorithm of blockchain. In 2017 IEEE International Conference on Systems, Man, and
Cybernetics (SMC), pp. 2567–2572. IEEE.

Moulin, H. (1987). Equal or proportional division of a surplus, and other methods. Interna-

tional Journal of Game Theory 16 (3), 161–186.

Moulin, H. (1991). Axioms of Cooperative Decision Making. Number 15. Cambridge University

Press.

Moulin, H. (2018). Fair division in the age of Internet. Annual Review of Economics.

Myerson, R. B. (1977). Graphs and cooperation in games. Mathematics of operations re-

search 2 (3), 225–229.

Nakamoto, S. (2008). Bitcoin: A peer-to-peer electronic cash system. Technical report,

Manubot.

Nguyen, G.-T. and K. Kim (2018). A survey about consensus algorithms used in blockchain.

Journal of Information processing systems 14 (1).

Qin, R., Y. Yuan, and F.-Y. Wang (2018). Research on the selection strategies of blockchain

mining pools. IEEE Transactions on Computational Social Systems 5 (3), 748–757.

17

Roemer, J. (1996). Theories of Distributive Justice. Harvard University Press.

Romiti, M., A. Judmayer, A. Zamyatin, and B. Haslhofer (2019). A deep dive into bitcoin
mining pools: An empirical analysis of mining shares. arXiv preprint arXiv:1905.05999 .

Rosenfeld, M. (2011). Analysis of bitcoin pooled mining reward systems. arXiv preprint

arXiv:1112.4980 .

Sapirshtein, A., Y. Sompolinsky, and A. Zohar (2016). Optimal selﬁsh mining strategies in
In International Conference on Financial Cryptography and Data Security, pp.

bitcoin.
515–532. Springer.

Schrijvers, O., J. Bonneau, D. Boneh, and T. Roughgarden (2016). Incentive compatibility of
bitcoin mining pool reward functions. In International Conference on Financial Cryptog-
raphy and Data Security, pp. 477–498. Springer.

Thomson, W. (2016). Fair allocation, Ch. 7 in Adler and Fleurbaey (Eds), Handbook of

Well-being and Public Policy. New York, Oxford University Press.

Thomson, W. (2018). How to Divide When There Isn’t Enough. Number 62. Cambridge

University Press.

Tovanich, N., N. Souli´e, N. Heulot, and P. Isenberg (2021). An empirical analysis of pool
In 2021 IEEE International Conference on

hopping behavior in the bitcoin blockchain.
Blockchain and Cryptocurrency.

Young, H. (1994). Equity: in theory and practice. Princeton University Press.

Zolotavkin, Y., J. Garc´ıa, and C. Rudolph (2017). Incentive compatibility of pay per last N
shares in bitcoin mining pools. In International Conference on Decision and Game Theory
for Security, pp. 21–39. Springer.

18

Appendix

A Proof of Lemma 1

Lemma 1.
If a scheme α satisﬁes ﬁxed total reward and round based rewards, then for
any two histories H = (S, P(S)) and H ′ = (S′, P ′(S′)) and any two rounds P ∈ P(S) and
P ′ ∈ P ′(S′) we have

α(s, H) =

α(s, H ′).

s∈P
X

Xs∈P ′

Proof. Take any two histories H, H ′ and P, P ′ as in the lemma. Let r (and r′) denote the
round number of P (and P ′) in history H (and H ′). As α is ﬁxed total reward, there exist
ﬁxed rewards for both histories, say K and K ′:

α(s, H) = K and

α(s, H ′) = K ′

(5)

s∈P
X

Xs∈P ′

Consider the restriction of H to rth round (and of H ′ to r′th round). As α satisﬁes round
based rewards, for all s ∈ P (and for all s′ ∈ P ′) we have: α(s, H) = α(s, H|r) and α(s′, H ′) =
α(s′, H ′|r′). This implies:

α(s, H|r) = K and

α(s, H ′|r′) = K ′

(6)

s∈P
X

Xs∈P ′

Next we consider two cases. We say two rounds in diﬀerent histories overlap when there
are some shares in the these two rounds which have overlapping time signatures. Formally,
we say P and P ′ are overlapping whenever: min
τ (s) ≤
τ (s) ≤ min
s∈P ′
s∈P
τ (s). Based on whether these rounds P and P ′ in histories H and H ′ overlap

max
s∈P
or not, we shall separately prove the equality of rewards, K = K ′, in Equation 5.

τ (s) ≤ max
s∈P ′

τ (s) or min
s∈P ′

τ (s) ≤ max
s∈P ′

Case 1. No overlap. Without loss of generality, assume all the shares in P have an
earlier time signature than those in P ′.
In this case, consider a history with two rounds
H ′′ = (P ∪ P ′, {P, P ′}). Note that H ′′ is a history consisting only of two rounds, P as the
ﬁrst and P ′ as the second round. Note also that max
s∈P

τ (s) < min
s∈P ′

τ (s).

As α is ﬁxed total reward, there exist a ﬁxed reward for this history, say K ′′:

α(s, H ′′) =

α(s, H ′′) = K ′′

(7)

s∈P
X

Xs∈P ′

19

Consider the restriction of H ′′ to the 1st and the 2nd rounds. As α satisﬁes round based
rewards for all s ∈ P we have α(s, H ′′) = α(s, H ′′|1), and for all s ∈ P ′ we have α(s, H ′′) =
α(s, H ′′|2). This implies:

α(s, H ′′|1) = K ′′ and

α(s, H ′′|2) = K ′′.

(8)

s∈P
X

Xs∈P ′

Note that the restriction of H ′′ to the 1st round is equivalent to the restriction of H to
the rth round. Similarly the restriction of H ′′ to the 2nd round is equivalent to the restriction
of H ′ to the r′th round. That is, H ′′|1 = (P, {P }) = H|r and H ′′|2 = (P ′, {P ′}) = H ′|r′,
therefore we have:

α(s, H ′′|1) =

α(s, H|r) and

α(s, H ′′|2) =

α(s, H ′|r′)

s∈P
X

s∈P
X

Xs∈P ′

Xs∈P ′

The former equality implies K ′′ = K and the latter implies K ′′ = K ′. This completes the

proof for Case 1.

Case 2. Overlap. In this case we consider two additional histories with two rounds each:
′

′

′

H = (P ∪ P , {P, P }) and H

= (P ′ ∪ P

, {P ′, P

}) such that

max
s∈P ∪P ′

τ (s) < min
s∈P

τ (s) < max
s∈P

τ (s) < min
′
s∈P

τ (s).

′

Remark that P and P
construct the two histories above, i.e., H and H
of two rounds, P as the ﬁrst and P as the second round. Similarly, H
only of two rounds, P ′ as the ﬁrst and P

are constructed such that neither overlaps with P or P ′. Hence we can
. Note also that H is a history consisting only
′
is a history consisting

as the second round.

′

′

Since max
τ (s) < min
s∈P ∪P ′
s∈P
Case 1 on H and H yields:

τ (s) there is no overlaps between P and P , therefore applying

Since max
s∈P ∪P ′

Case 1 on H ′ and H

τ (s) < min
′
s∈P
yields:

′

i)

α(s, H) =

α(s, H)

s∈P
X

Xs∈P

(9)

τ (s) there is no overlaps between P ′ and P

′

, therefore applying

ii)

α(s, H ′) =

α(s, H

′

).

Xs∈P ′

′

Xs∈P

(10)

20

τ (s) there is no overlaps between P and P

′

, therefore applying Case

Since max
s∈P

τ (s) < min
′
s∈P

1 on H and H

′

yields:

α(s, H) =

α(s, H

′

).

Xs∈P

′

Xs∈P

which -combined with Equations 9 and 10- completes the proof.

(cid:4)

B Proof of Lemma 2

Lemma 2. If a scheme α satisﬁes ﬁxed total reward, round based rewards and ordinality,
then for any two histories H = (S, P(S)) and ¯H = ( ¯S, ¯P( ¯S)) and any two rounds P ∈ P(S)
and ¯P ∈ ¯P( ¯S) such that |P | = | ¯P |, we have for all s ∈ P and for all ¯s ∈ ¯P such that
ρ(s) = ¯ρ(¯s):

α(s, H) = α(¯s, ¯H).

Proof. Take any scheme α that satisﬁes these two axioms. Let H = (S, P(S)) and ¯H =
( ¯S, ¯P( ¯S)) be two histories and let P ∈ P(S) and ¯P ∈ ¯P( ¯S) be any two rounds with |P | =
| ¯P | = k for some k. Let P = Pr and ¯P = ¯P¯r, i.e., P is the rth round in H and ¯P is the
¯rth round in ¯H. As α satisﬁes round based rewards we have i) α(s, H) = α(s, H|r) for all
s ∈ S and ii) α(¯s, ¯H) = α(¯s, ¯H|¯r) for all ¯s ∈ ¯S. Let H|r = (
) and
¯H|¯r = (
) denote these histories. In what follows we show for all
i ≤ k,

{¯s1, . . . , ¯sk}

{s1, . . . , sk}

¯s1, . . . , ¯sk

s1, . . . , sk

(cid:8)

(cid:9)

(cid:9)

(cid:8)

,

,

(cid:8)

(cid:9)

(cid:8)

(cid:9)

α(si, H) = α(¯si, ¯H)

Consider a time-shift ˆH 1 of H at s1 (ﬁrst share) with ˆS1 = (S \ {s1}) ∪ {ˆs1}) such that
τ (ˆs1) = min{τ (s1), τ (¯s1)}. Similarly consider a time-shift ˆ¯H 1 of ¯H at ¯s1 (ﬁrst share) with
ˆ¯S1 = ( ¯S \ {¯s1}) ∪ {ˆ¯s} such that τ (ˆ¯s1) = min{τ (s1), τ (¯s1)}. Then by ordinality of α, we have
for all s ∈ S \ {s1} and for all ¯s ∈ ¯S \ {¯s1}:

α(s, H|r) = α(ˆs, ˆH 1)
α(¯s, ¯H|¯r) = α(ˆ¯s, ˆ¯H 1)

Note that by Remark 3, the total reward is ﬁxed both in P and in ¯P , therefore we conclude

that for all s ∈ S and for all ¯s ∈ ¯S:

α(s, H|r) = α(ˆs, ˆH 1)
α(¯s, ¯H|¯r) = α(ˆ¯s, ˆ¯H 1)

21

Continuing iteratively and letting ˆH i be the time-shift of H at the ith share and ˆ¯H i as

the time-shift of ¯H at the ith share, the same argument above yields for all i ≤ k:

α(s, H|r) = α(ˆs, ˆH 1) = α(ˆs, ˆH 2) = · · · = α(ˆs, ˆH k)
α(¯s, ¯H|¯r) = α(ˆ¯s, ˆ¯H 1) = α(ˆ¯s, ˆ¯H 2) = · · · = α(ˆ¯s, ˆ¯H k)

Note that by construction, the time signature of all shares at ˆH k are the same with those at
ˆ¯H k, i.e., ˆH k = ˆ¯H k. Therefore, α(ˆs, ˆH k) = α(ˆ¯s, ˆ¯H k). This -together with the two equations
above- implies α(s, H|r) = α(¯s, ¯H|¯r).
(cid:4)

C Proof of Theorem 1

Theorem 1. A reward sharing scheme α satisﬁes round based rewards, budget limit, ﬁxed
total reward, ordinality and absolute redistribution if and only if it is absolute fair in the
sense of 2.

Proof. If part.
Round based rewards. Let H = (S, P(S)) be a history, and let r be any round. Note that,
by restricting a round to the rth round the relative rank of a share s in the round, as well as its
time signature and value are the same at both H and H|r. Therefore, α∗∗(s, H) = α∗∗(s, H|r).

Budget limit. Let H = (S, P(S)) be any history. Take any round r. Let |Pr| = k. As the
relative fair scheme is based on ρ(s), without loss of generality, we assume Pr = {1, 2, . . . , k}

so that ρ(s) = s. Note that

k

s=1
P

α∗∗(s, H) = R

k

k

ε(s) −

s=1 (cid:18)
P

i=s+1
P

. Therefore,

ε(i)
i−1

(cid:19)

1
R

k

s=1
X

k

k

α∗∗(s, H) =

ε(s) −

s=1 (cid:18)
X
k−1

i=s+1
X
k

=

ε(s) −

s=1  
X
k−1

i=s+1
X

k−1

=

ε(s) −

ε(i)
i − 1

(cid:19)

ε(i)
i − 1 !
k

s=1
X
k−1

s=1 (cid:16)
X
k−1

i=s+1
X
k−1

=

ε(s) −

s=1
X

s=1 (cid:16)
X

i=s+1
X

22

+ ε(k)

ε(i)
i − 1

ε(i)
i − 1

+ ε(k)

(cid:17)

+

ε(k)
k − 1

(cid:17)

+ ε(k)

ε(i)
i − 1

−

ε(k)
k − 1

k−1

s=1
X

+ ε(k)

− (k − 1)

ε(k)
k − 1

+ ε(k)

ε(i)
i − 1

ε(i)
i − 1

k−1

k−1

k−1

=

ε(s) −

s=1
X
k−1

s=1
X
k−1

i=s+1
X
k−1

=

ε(s) −

s=1
X
k−1

s=1
X
k−1

i=s+1
X
k−1

=

ε(s) −

s=1
X
. . . . . . . . .

s=1
X

i=s+1
X

2

2

2

=

ε(s) −

ε(i)
i − 1

s=1
X

s=1
X
= (ε(1) + ε(2)) − (ε(2)) = ε(1)

i=s+1
X

By deﬁnition of the ε we have 0 ≤ ε(1) ≤ 1, hence

redistribution scheme satisﬁes the budget limit.

k

s=1
P

α∗∗(s, H) ≤ R the absolute

Fixed total rewards. It follows from a similar proof of the above.

Absolute redistribution. Let H = (S, P(S)) be any history and Pr = {s1, s2, . . . , sk}
be any round. Let H ′ = (S′, P ′(S′)) be any extension of H at the rth round. Take any
sa ∈ Pr. Note that Note that |P ′(sa)| = |P (sa)| + 1.

α∗∗(sa, H) − α∗∗(sa, H ′) = R

ε(ρ(sa)) −

|P (sa)|

ε(i)
i − 1

− R

ε(ρ(sa)) −

|P ′(sa)|

Xi=ρ(sa)+1

ε(i)
i − 1

(cid:19)

Xi=ρ(sa)+1
ε(i)
i − 1

(cid:19)

+ R

(cid:18)

= −R

|P (sa)|

(cid:18)

Xi=ρ(sa)+1
ε(|P (sa)| + 1)
|P (sa)|

= R

= R

ε(k + 1)
k

(cid:18)
(cid:19)
|P (sa)|+1

(cid:18)

Xi=ρ(sa)+1

ε(i)
i − 1

(cid:19)

Only if part. Take any reward sharing scheme α that satisﬁes the axioms. Take any history
H = (S, P(S)) and any s ∈ S. Let s ∈ Pr for some 1 ≤ r ≤ l = |P(S)|. As α satisﬁes
round based rewards α(s, H) = α(s, H|r). Similarly for α∗∗, we have α∗∗(s, H) = α∗∗(s, H|r).
Hence, it suﬃces to prove α(s, H|r) = α∗∗(s, H|r) at the restricted histories, i.e., histories
with only a single round.

Note that by Lemma 2, if the rounds in any two restricted histories are of the same size,
then the shares are awarded based on their ranks. Hence, without loss of generality, we can
denote these rounds Pr = {s1, s2, . . . , sn} and the restricted histories as H n = H|r. Therefore,
it suﬃces to prove α(si, H n) = α∗∗(si, H n) for all n and for all i ≤ n.

23

By absolute redistribution, for any j > 1, we can let δj denote the absolute decrease in
the rewards of all shares whilst moving from history H j−1 to H j, i.e., α(s, H j−1) − α(s, H j ).
In addition let δ1 = α(s1, H 1). As α is well-deﬁned, for all n ≥ 1, α(s1, H n) ≥ 0. Therefore,
δ1 ≥
δi (otherwise at some history, s1 would get a negative reward). Similarly, as α is
well-deﬁned, for all n > 1, and for all p ≤ n, α(sp, H n) ≥ 0. Note that by construction and
Remark 3, α(sp, H p) = (p − 1)δp. Therefore, (p − 1)δp ≥

δi (otherwise at some history,

i=2
P

∞

∞

sp would get a negative reward). Now, consider a function ε such that ε(1) = 1 and for all
j > 1,

i=p+1
P

ε(j) =

(j − 1)δj
R

(11)

Note that we have the following two properties for ε:

1. for all j ≥ 1, ε(j) → [0, 1]. By deﬁnition δj denotes the absolute decrease in the rewards
of all shares whilst moving from history H j−1 to H j. Therefore, the last share at H j
gets (j − 1)δj (as there are j − 1 that each payouts δj). As the scheme satisﬁes ﬁxed
total rewards and round based rewards then by Remark 3 the total reward at round
H j is R. Therefore, it must be the case that (j − 1)δj ≤ R so δj ≤ R
j−1. Therefore,
ε(j) = (j−1)δj
j−1 . As δj ≥ 0 then ε(j) ≥ 0. All in all, ε(j) → [0, 1] for all
j ≥ 1.

R ≤ j−1

R × R

2. for all j ≥ 1, ε(j) ≥

ε(i)
i−1 .

∞

i=j+1
P

∞

For j = 1 we have ε(j) = 1 we have 1 ≥

1
i−1

(i−1)δi

R which implies R ≥

∞

i=2
P

δi.

∞

1 ≥

i=2
P

For ε(j) we have ε(j) = (j−1)δj

≥

R

(j − 1)δj ≥

δi.

∞

i=j+1
P

ε(i)
i−1 . Replacing from Equation 11 we have

i=2
P
∞

i=j+1
P

ε(i)
i−1 . Replacing from Equation 11 we have

In what follows we shall show that α(s, H n) = α∗∗(s, H n) for the aforementioned ε func-

tion. We do it ﬁrst for a single share rounds and then for multi-share rounds.

Single-share round: Let H 1 be any history with a single round with a single share s.

By Remark 1, α(s, H 1) = R. Setting ε(1) = 1 we have:

α(s, H 1) = α∗∗(s, H 1) = Rε(1)

(12)

24

Multi-share round: Let H n be any history with a single round with multiple shares
s1, . . . , sn. In what follows, we show that α(s, H n) = α∗∗(s, H n) any s ∈ Pr, by induction on
n, i.e., the size of the round Pr.

Induction Basis: Let n = 2. Let H 2 = ({s1, s2},

). We will show that
α(s1, H 2) = α∗∗(s1, H 2) and α(s2, H 2) = α∗∗(s2, H 2). By Remark 3 for two histories H 1
and H 2, and by Equation 12, we have α(s1, H 2) + α(s2, H 2) = R. So, α(s1, H 2) = R − δ2
and α(s2, H 2) = δ2.. Setting ε(2) = δ2
R , yields α(s1, H 2) = Rε(1) − Rε(2) = α∗∗(s1, H 2) and
α(s2, H 2) = Rε(2) = α∗∗(s2, H 2).

{s1, s2}

(cid:9)

(cid:8)

Induction Hypothesis: Let n = k with k > 1. Suppose we have α(si, H k) = α∗∗(si, H k)

for all i ≤ k.

). We
{s1, . . . , sk}

(cid:9)

).

(cid:9)

To prove for n = k + 1, consider any H k+1 = (

s1, . . . , sk, sk+1

,

{s1, . . . , sk, sk+1}

will show that α(si, H k+1) = α∗∗(si, H k+1) for all i ≤ k+1. Let H k = (
(cid:8)

(cid:9)

(cid:8)

s1, . . . , sk

,

(cid:8)

(cid:9)

(cid:8)

By construction, α(si, H k+1) = α(si, H k) − δk+1 for all i ≤ k. By induction hypothe-
sis α(si, H k) = α∗∗(si, H k) for all i ≤ k which implies α(si, H k+1) = α∗∗(si, H k) − δk+1.
Therefore,

α(si, H k+1) = R

ε(i) −

k

(cid:18)

j=i+1
X

ε(j)
j − 1

(cid:19)

− δk+1 for all i ≤ k

(13)

As δk+1 = ε(k+1)R

k

, the above equation is simpliﬁed as:

α(si, H k+1) = R

ε(i) −

(cid:18)

k+1

j=i+1
X

ε(j)
j − 1

(cid:19)

for all i ≤ k

(14)

Note that α(si, H k+1) = α(si, H k) − δk+1, and by Lemma 1 (on H k and on H 1), we have

k

i=1
X

α(si, H k+1) =

α(si, H k) − kδk+1 = R − kδk+1

(15)

k

i=1
X

Note also that

k+1

this yields

therefore we have:

i=1
P

k+1

α(si, H k+1) =

k

α(si, H k+1) + α(sk+1, H k+1). Plugging Equation 15 into

i=1
P
α(si, H k+1) = R − kδk+1 + α(sk+1, H k+1). By Remark 3,

i=1
P

α(si, H k+1) = R,

k+1

i=1
P

α(sk+1, H k+1) = kδk+1 = Rε(k + 1).

(16)

Equations 14 and 16 together prove α(si, H k+1) = α∗(si, H k+1) for i ∈ {1, . . . , k} and for
(cid:4)

i = k + 1, respectively.

25

D Proof of Theorem 2

Theorem 2. A reward scheme α satisﬁes round based rewards, budget limit, ﬁxed total
reward, ordinality and relative redistribution if and only if it is relative fair in the sense of 3.

Proof. If part.
Round based rewards.To show that the relative fair scheme satisﬁes α∗(s, H) = α∗(s, H|r),
let H = (S, P(S)) be a history, and let r be any round. Note that, by restricting a history
to the rth round, the round and the shares remain intact, hence the relative rank of a share
s is the same at both H and H|r. Therefore, the relative fair scheme satisﬁes round based
rewards.
Budget limit. Let H = (S, P(S)) be any history. Take any round r. Let |Pr| = k. As the
relative fair scheme is based on ρ(s), without loss of generality, we assume Pr = {1, 2, . . . , k}
so that ρ(s) = s. Therefore to show

α∗∗(s, H) ≤ R, we have

s∈Pr
P
k

α(s, H) =

s∈Pr
X

k

s=1
X
k





R × ε(ρ(s)) ×

(1 − ε(i))




k

Yi=ρ(s)+1

k

= R

ε(1) ×

(1 − ε(i))

+ R

!

i=2
Y

k

ε(ρ(s)) ×



s=2
X

k

Yi=ρ(s)+1
k

(1 − ε(i))





= R

(1 − ε(2))(

1 − ε(i))

+ R

ε(s) ×

(1 − ε(i))

(cid:16)

k

i=3
Y

s=2  
X

(cid:17)
k

i=s+1
Y
k

!

k

= R

1 − ε(i)

− ε(2)

1 − ε(i)

+ R

ε(s) ×

(1 − ε(i))

i=3 (cid:16)
(cid:16)
Y
k

(cid:17)

i=3 (cid:16)
Y
k

(cid:17)(cid:17)

s=2  
X
k

i=s+1
Y

!

k

k

= R

1 − ε(i)

− Rε(2)

1 − ε(i)

+ Rε(2)

(1 − ε(i)) + R

ε(s) ×

(1 − ε(i))

i=3 (cid:16)
Y

(cid:17)

i=3 (cid:16)
Y

(cid:17)

i=3
Y

s=3  
X

i=s+1
Y

!

k

k

k

= R

1 − ε(i)

+ R

ε(s) ×

(1 − ε(i))

i=3 (cid:16)
Y

= · · ·

(cid:17)

s=3  
X

i=s+1
Y

!

k

k

= R ×

(1 − ε(k))

(cid:16)

(cid:17)

= R ×

(1 − ε(k))

(cid:16)

(cid:17)

+ R

ε(s) ×

(1 − ε(i))

s=k  
X
+ Rε(k) = R

i=s+1
Y

!

Fixed total rewards. It follows from a similar proof of the above.

26

 
Relative redistribution. To show Relative fairness let H = (S, P(S)) be any history and
Pr = {s1, s2, . . . , sk} be any round. Let H ′ = (S′, P ′(S′)) be any extension of H at the rth
round. Then for any sa, sb ∈ Pr α∗(sa, H) 6= 0 and α∗(sb, H) 6= 0 we have:

α∗(sa, H ′)
α∗(sa, H)

=

R × ε(ρ(sa)) ×

R × ε(ρ(sa)) ×

α∗(sb, H ′)
α∗(sb, H)

=

R × ε(ρ(sb)) ×

R × ε(ρ(sb)) ×

|P (sa)|+1

i=ρ(sa)+1
Q
|P (sa)|

1 − ε(i)

(cid:0)

(cid:1)
1 − ε(i)

i=ρ(sa)+1
Q

(cid:0)

(cid:1)

|P (sb)|+1

i=ρ(sb)+1
Q
|P (sb)|

1 − ε(i)

(cid:0)

(cid:1)
1 − ε(i)

= 1 − ε

|P (sa)| + 1

= 1 − ε

k + 1

(cid:0)

(cid:1)

(cid:0)

(cid:1)

= 1 − ε

|P (sb)| + 1

= 1 − ε

k + 1

(cid:0)

(cid:1)

(cid:0)

(cid:1)

The above two equations shows that α∗(sa,H ′)

i=ρ(sb)+1
(cid:1)
Q
α∗(sa,H) = α∗(sb,H ′)
α∗(sb,H) .

(cid:0)

Only if part. Take any reward sharing scheme α that satisﬁes the axioms. Take any
history H = (S, P(S)) and any s ∈ S. Let s ∈ Pr for some 1 ≤ r ≤ l = |P(S)|. As α satisﬁes
round based rewards α(s, H) = α(s, H|r). Similarly for α∗∗, we have α∗∗(s, H) = α∗∗(s, H|r).
Hence, it suﬃces to prove α(s, H|r) = α∗∗(s, H|r) at the restricted histories, i.e., histories
with only a single round.

Note that by Lemma 2, if the rounds in any two restricted histories are of the same size,
then the shares are awarded based on their ranks. Hence, without loss of generality, we can
denote these rounds Pr = {s1, s2, . . . , sn} and the restricted histories as H n = H|r. Therefore,
it suﬃces to prove α(si, H n) = α∗∗(si, H n) for all n and for all i ≤ n.

Single-share round: Let H 1 be any history with a single round with a single share s.
As α satisﬁes ﬁxed total rewards and round based rewards then by Remark 3, α(s, H 1) = R.
Setting ε(1) = 1 we have:

α(s, H 1) = α∗(s, H 1) = R.

(17)

Multi-share round: Let H n be any history with a single round with multiple shares
s1, . . . , sn. In what follows, we show that α(s, H n) = α∗(s, H n) any s ∈ Pr, by induction on
n, i.e., the size of the round Pr.

Induction Basis: Let n = 2. Let H 2 = ({s1, s2},

). We will show that
α(s1, H 2) = α∗(s1, H 2) and α(s2, H 2) = α∗(s2, H 2). By Lemma 1 for two histories H 1 and
H 2, and by Equation 17, we have α(s1, H 2) + α(s2, H 2) = R. So, α(s1, H 2) = R(1 − δ2) and

{s1, s2}

(cid:8)

(cid:9)

27

α(s2, H 2) = Rδ2 for some δ2 ∈ [0, 1]. Setting ε(2) = δ2, yields α(s1, H 2) = R(1 − ε(2)) and
α(s2, H 2) = Rε(2). Therefore, α(s1, H 2) = Rε(1)(1 − ε(2)) = α∗(s1, H 2) and α(s2, H 2) =
Rε(2) = α∗(s2, H 2). Note that, ε(1) ∈ [0, 1], and as δ2 ∈ [0, 1] then ε(2) ∈ [0, 1].

Induction Hypothesis: Let n = k with k > 1. Suppose we have α(si, H k) = α∗(si, H k)

for all i ≤ k.

To prove for n = k + 1, consider any H k+1 = (

s1, . . . , sk, sk+1

,

will show that α(si, H k+1) = α∗(si, H k+1) for all i ≤ k+1. Let H k = (
(cid:8)
(cid:8)

By relative redistribution for all i, j ∈ {1, . . . , k} we have

(cid:9)

(cid:8)

{s1, . . . , sk, sk+1}
s1, . . . , sk

,

). We

{s1, . . . , sk}

).

(cid:9)

α(si, H k+1)
α(si, H k)

=

α(sj, H k+1)
α(sj, H k)

(cid:9)

(cid:8)

(cid:9)

(18)

Let us denote this ratio above by 1 − δk+1. Therefore, α(si, H k+1) = (1 − δk+1)α(si, H k)
for all i ≤ k. By induction hypothesis α(si, H k) = α∗(si, H k) for all i ≤ k which implies
α(si, H k+1) = (1 − δk+1)α∗(si, H k). Therefore,

α(si, H k+1) = (1 − δk+1)Rε(i)

k

j=i+1
Y

(1 − ε(j)) for all i ≤ k

(19)

By Equation 18, α(si, H k+1) = (1 − δk+1)α(si, H k), and by Lemma 1 (on H k and on H 1), we
have

k

k

α(si, H k+1) = (1 − δk+1)

α(si, H k) = (1 − δk+1)R

(20)

i=1
X

i=1
X

Note that

k+1

yields

i=1
therefore we have:
P

k+1

α(si, H k+1) =

k

α(si, H k+1) + α(sk+1, H k+1). Plugging Equation 20 into this,

i=1
P
α(si, H k+1) = (1 − δk+1)R + α(sk+1, H k+1). By Remark 3,

i=1
P

α(si, H k+1) = R,

k+1

i=1
P

α(sk+1, H k+1) = δk+1R.

(21)

Setting ε(k + 1) = δk+1 in Equations 19 and 21, proves α(si, H k+1) = α∗(si, H k+1) for all

i ∈ {1, . . . , k} and for i = k + 1, respectively.

Note that, ε(k + 1) ∈ [0, 1] for all k > 0. Otherwise, if ε(k + 1) < 0 then δk+1 < 0.
However, by Equation 21, this implies α(sk+1, H k+1) < 0 which contradicts Deﬁnition 1.
If ε(k + 1) > 1 then δk+1 > 1 which implies 1 − δk+1 < 0. However, by Equation 18,
α(si, H k+1) = (1 − δk+1)α(si, H k) for all i ≤ k, this implies α(si, H k+1) < 0 for all i ∈
(cid:4)
{1, . . . , k} which contradicts Deﬁnition 1.

28

E Proof of Theorem 3

Theorem 3. A reward sharing scheme satisﬁes round based rewards, budget limit, ﬁxed
total reward, ordinality, absolute redistribution, and relative redistribution if and only if it is
k-pseudo proportional in the sense of 4.

Proof. Take any reward sharing scheme α that satisﬁes the axioms. Take any history H =
(S, P(S)) and any s ∈ S. Let s ∈ Pr for some 1 ≤ r ≤ l = |P(S)|. As α satisﬁes round based
rewards α(s, H) = α(s, H|r). Similarly for αk,δ, we have αk,δ(s, H) = αk,δ(s, H|r). Hence, it
suﬃces to prove α(s, H|r) = αk,δ(s, H|r) at the restricted histories, i.e., histories with only a
single round.

Note that by Lemma 2, if the rounds in any two restricted histories are of the same size,
then the shares are awarded based on their ranks. Hence, without loss of generality, we can
denote these rounds Pr = {s1, s2, . . . , sn} and the restricted histories as H n = H|r. Therefore,
it suﬃces to prove that there exist some k and some δ such that α(si, H n) = αk,δ(si, H n) for
all n and for all i ≤ n. First of all, note that for all single share histories, H 1, Remark 3
implies that α coincides with αk,δ regardless of the choice of k and δ. So let n ≥ 2.

In what follows, we ﬁnd -by iterating on n- that there exist k and δ such that α(si, H n) =
αk,δ(si, H n) for all n ≥ 2 and for all i ≤ n. At each step, we ask if α distributes the awards
proportionally, or not. The proof structure is as follows:

1. At step h, if α distributes the awards proportionally, then we move to step h + 1.

2. At step h, if α distributes the awards disproportionately (while it was proportional at
step h − 1), then we set k = h, and δ = α(sh, H h), i.e., the award of the last share in
the round. Thereafter we show that the scheme α coincides with αk,δ for all possible
rounds and all shares in these rounds.

Note a round of size n = 2 is a special case, since a round of size 1 cannot be decided to be
proportional or disproportionate. Therefore we ﬁrst treat such histories.

STEP 2: Let n = 2, and H 2 = ({s1, s2},
). By Remark 3, we have α(s1, H 2) +
α(s2, H 2) = R. So
= (R − γ2, γ2) for some γ2 ∈ [0, R]. Note also that
(cid:8)
αk,δ(s1, H 2) + αk,δ(s2, H 2) = R for any k and for any δ. Now, there are two cases, either the
awards are proportional, or not.

α(s1, H 2), α(s2, H 2)
(cid:17)
(cid:16)

{s1, s2}

(cid:9)

Case 1: If R − γ2 = γ2, then k > 2, therefore continue to next step, (Step 3, i.e., n = 3).

29

Case 2: If R − γ2 6= γ2, then we set k = 2 and δ = γ2. Note that α2,γ2 (s1, H 2) = R−γ2
2−1
and α2,γ2 (s2, H 2) = γ2. Hence, for n = 2, we have α(si, H n) = α2,γ2 (si, H n) for all i ≤ n.
Next we also show, for any n > 2, we have α(si, H n) = α2,γ2 (si, H n) for all i ≤ n.

Case 2a. If γ2 = R, then

= (0, R). Consider any extension H 3 of

H 2. As α does not assign negative awards, Remark 3 and absolute redistribution implies

α(s1, H 2), α(s2, H 2)
(cid:17)
(cid:16)

α(s1, H 3), α(s2, H 3), α(s3, H 3)
(cid:17)
(cid:16)

= (0, R, 0).

Similar argument can be extended to H 4 and further, e.g., (0, R, 0, 0, . . . , 0) which shows
α(si, H n) = α2,γ2 (si, H n).

Case 2b. If γ2 = 0, then

= (R, 0). Consider any extension H 3 of

H 2. As α does not assign negative awards, Remark 3 and absolute redistribution implies

α(s1, H 2), α(s2, H 2)
(cid:17)

(cid:16)

α(s1, H 3), α(s2, H 3), α(s3, H 3)
(cid:17)
(cid:16)

= (R, 0, 0).

Similar argument can be extended to H 4 and further, e.g., (R, 0, 0, 0, . . . , 0) which shows
α(si, H n) = α2,γ2 (si, H n).

Case 2c.

If γ2 ∈ (0, R), then

= (R − γ2, γ2). Consider any
extension H 3 of H 2. By absolute redistribution we have α(s1, H 2) − α(s1, H 3) = α(s2, H 2) −
α(s2, H 3). By relative redistribution we have

α(s1, H 2), α(s2, H 2)
(cid:17)

(cid:16)

α(s1, H 3)
α(s1, H 2)

=

α(s2, H 3)
α(s2, H 2)

= θ

Combining these equations, we have α(s1, H 2) − α(s1, H 2)θ = α(s2, H 2) − α(s2, H 2)θ which
implies α(s1, H 2)(1 − θ) = α(s2, H 2)(1 − θ). As R − γ2 6= γ2, the previous equation only holds
if θ = 1. This results in α(s1, H 3) = α(s1, H 2) and α(s2, H 3) = α(s2, H 2). Finally, as α does
not assign negative awards, Remark 3 implies

α(s1, H 3), α(s2, H 3), α(s3, H 3)
(cid:17)
(cid:16)

= (R − γ2, γ2, 0).

Similar argument can be extended to H 4 and further, e.g., (R − γ2, γ2, 0, 0, . . . , 0) which shows
α(si, H n) = α2,γ2 (si, H n).

{s1, . . . , sh}

STEP h: Let n = h, and H h = ({s1, . . . , sh},
). Reaching to step h implies
the awards to shares at H h−1 = ({s1, . . . , sh−1},
) were distributed propor-
(cid:8)
tionally and hence all are equal. By relative redistribution for all i, j ≤ h − 1 we have,
α(si,H h−1) = α(sj ,H h)
α(sj ,H h−1) . This implies α(si, H h) = α(sj, H h) for all i, j ≤ h − 1. By Remark
h
i=1 α(si, H h) = R, which implies (h − 1)α(si, H h) + α(sh, H h) = R for any i ≤ h − 1.
3,
Therefore, α(si, H h) = R−α(sh,H h)
. Let us denote α(sh, H h) = γh for some γh ∈ [0, R], so

{s1, . . . , sh−1}

α(si,H h)

(cid:9)

(cid:9)

(cid:8)

h−1

P

30

α(s1, H h), α(s2, H h), . . . , α(sh−1, H h), α(sh, H h)
are two cases, either the awards are proportional, or not.
(cid:16)
(cid:17)

= ( R−γh

h−1 , R−γh

h−1 , . . . , R−γh

h−1 , γh). Now, there

Case 1: If R−γh

h−1 = γh, then k > h, therefore continue to next step, (Step h + 1, i.e.,

n = h + 1).

Case 2: If R−γh

h−1 6= γh, then we set k = h and δ = γh. Note that αh,γh(si, H h) = R−γh

h−1 for
all i < h and αh,γh(sh, H h) = γh. Hence, for n = h, we have α(si, H n) = αh,γh(si, H n) for all
i ≤ n. Next we also show, for any n > h, we have α(si, H n) = αh,γh(si, H n) for all i ≤ n.

Case 2a. If γh = R, then

Consider any extension H h+1 of H h. As α does not assign negative awards, Remark 3 and
absolute redistribution implies

α(s1, H h), α(s2, H h), . . . , α(sh−1, H h), α(sh, H h)
(cid:17)
(cid:16)

= (0, . . . , 0, R).

α(s1, H h+1), . . . , α(sh, H h+1), α(sh+1, H h+1)
(cid:17)

(cid:16)

= (0, . . . , 0, R, 0)

Similar argument can be extended to H h+2 and further, e.g., (0, . . . , 0, R, 0, . . . , 0) which shows
α(si, H n) = αh,γh(si, H n).

Case 2b. If γh = 0, then

Consider any extension H h+1 of H h. As α does not assign negative awards, Remark 3 and
absolute redistribution implies

α(s1, H h), α(s2, H h), . . . , α(sh−1, H h), α(sh, H h)
(cid:17)
(cid:16)

= ( R

h−1 , . . . , R

h−1 , 0).

α(s1, H h+1), . . . , α(sh, H h+1), α(sh+1, H h+1)
(cid:17)
(cid:16)

= (

R
h − 1

, . . . ,

R
h − 1

, 0, 0)

Similar argument can be extended to H h+2 and further, e.g., ( R
shows α(si, H n) = αh,γh(si, H n).

h−1 , , . . . , R

h−1 , 0, . . . , 0) which

If γh ∈ (0, R), then

Case 2c.
h−1 , R−γh

=
( R−γh
h−1 , γh). Consider any extension H h+1 of H h. By absolute redistribu-
tion for all i, j ≤ h we have α(si, H h) − α(si, H h+1) = α(sj, H h) − α(sj, H h+1). By relative
redistribution for all i, j ≤ h we have

α(s1, H h), α(s2, H h), . . . , α(sh−1, H h), α(sh, H h)
(cid:17)
(cid:16)

h−1 , . . . , R−γh

α(si, H h+1)
α(si, H h)

=

α(sj, H h+1)
α(sj, H h)

= θ

Combining these equations, we have α(si, H h) − α(si, H h)θ = α(sj, H h) − α(sj, H h)θ which
implies α(si, H h)(1 − θ) = α(sj, H h)(1 − θ). As α(si, H h) 6= α(sj, H h) for all i, j ≤ h, the
previous equation only holds if θ = 1. This results in α(si, H h+1) = α(si, H h) for all i ≤ h.
Finally, as α does not assign negative awards, Remark 3 implies

α(s1, H h+1), . . . , α(sh−1, H h+1), α(sh, H h+1), α(sh+1, H h+1)
(cid:17)
(cid:16)

= (

R − γh
h − 1

, . . . ,

R − γh
h − 1

, γh, 0).

31

Similar argument can be extended to H 4 and further, e.g., ( R−γh
shows α(si, H n) = α2,γ2 (si, H n).

h−1 , . . . , R−γh

h−1 , γh, 0, . . . , 0) which

Note that in case α never distributes the awards “disproportionately”, then this implies
that h goes to inﬁnity and therefore, we set k = ∞ and it is clear to see that α = α∞,δ for
any δ, i.e., α is the proportional scheme, which is an element of k-pseudo proportional class.
(cid:4)
All in all, this completes the proof.

F Known reward sharing schemes

In this section we focus on two of the most popular, and widely applied, reward sharing
schemes and examine whether they satisfy the axioms proposed in Section 3. We also comment
on several potentially interesting schemes suggested in Rosenfeld (2011) and Schrijvers et al.
(2016) respectively.

• Pay Per Share (PPS): The strict egalitarian Pay-Per-Share scheme fails to ensure
an economically viable mining pool (as noted in Rosenfeld (2011)) but has been applied, for
instance by F2Pool20 and Poolin21, probably due to its immediate simplicity and transparency.
In pay per share, every submitted share receives a ﬁxed reward regardless of when it is
submitted, and the round it is submitted in. Formally, α(s, H) = c for some constant c.
The payments to the shares are usually adjusted by the network diﬃculty and the length
of a round. Trivially, PPS fails ﬁxed total reward and budget limit, but satisﬁes relative
redistribution, absolute redistribution, ordinality and round based rewards.

• Pay-Per-Last-N-Shares: The pay-per-last-N-shares (PPLNS for short) has also been
popular and is applied, for instance in GHash.IO22 and P2Pool23. It has been claimed that
this scheme (under certain conditions) prevents miners from delay reporting their shares
(see Schrijvers et al. (2016) and Lazos et al. (2021) for a modiﬁed version). In PPLNS, the
pool manager gets a ﬁxed fee, say f , and the net-reward, R = (1 − f )B, is distributed
(proportionally) among the N last shares (including the full the solution), regardless of the
round boundaries. Therefore, the reward of a share at the time it is submitted depends on
the number of full solutions among the next N − 1 shares. That is, if no full solution is found
among the next N − 1 shares, the share receives no reward, if one full solution is found it is
rewarded once with 1
N R, and so
forth.

N R, if two full solutions are found it is rewarded twice with 1

20https://www.f2pool.com/
21https://www.poolin.com/
22https://ghash.io/
23http://p2pool.in/

32

To formally deﬁne the PPLNS, consider a history H = (S, P(S)) and let Ω(s) denote the
index of the pool round that share s belongs to i.e., Ω(s) = {x ≤ |P(S)| | s ∈ Px}. Then the
PPLNS scheme is deﬁned as

α(si, H) =

Ω(sN +i) − Ω(si)
N

R.

It is trivial that PPLNS satisﬁes ordinality. However, Example 4 shows that PPLNS fails
to satisfy budget limit, ﬁxed total rewards, round based rewards, absolute redistribution and
relative redistribution.

Example 4. Consider the PPLNS reward sharing scheme with N = 3. Let H = (S, P(S))
be a history as follows,

S = {s1, s2, . . . , s1000}

P(S) = {{s1, s2, s3, s4, s5

}, { s6

}, { s7

}, { s8

}, {s9, . . . , s20

}, . . . , {. . . , s1000

}}

P1

P2

P3

P4

P5

P132

To show that PPLNS fails to satisfy the budget limit and ﬁxed total rewards, note that the

|

{z

}

|{z}

|{z}

|{z}

|

{z

}

|

{z

}

rewards of the shares in the ﬁrst and second rounds of the aforementioned history are

α(s1, H) = 0

α(s2, H) = 0

α(s3, H) =

α(s5, H) = R

α(s6, H) =

1
3
3
3

R

R

3 R, the PPLNS fails to satisfy the budget limit. Also, as

α(s, H) the PPLNS fails to satisfy the ﬁxed total rewards.

α(s4, H) =

R

2
3
α(s, H) = 6

Therefore, as

α(s, H) 6=

s∈P1
P

s∈P1
P
s∈P2
P

To show that PPLNS fails to satisfy the round based rewards, consider the restriction of H
. The rewards of each share would

to the ﬁrst round, i.e., H|1 =

{s1, . . . , s5},

{s1, . . . , s5

}

(cid:16)

n

P1

o(cid:17)

be α(s1, H|1) = α(s2, H|1) = 0, and α(s3, H|1) = α(s4, H|1) = α(s5, H|1) = R
3 . Comparing
|
these with the reward of each share at the history H shows that the PPLNS fails to satisfy the
round based rewards.

{z

}

To show that PPLNS fails to satisfy absolute redistribution and relative redistribution,

consider H ′ = (S′, P ′(S′)) as an extension of H at the ﬁrst round as follows:

S′ = {s1, s2, . . . , s∗, . . . , s1000}

P ′(S′) = {{s1, s2, s3, s4, s5, s∗

}, { s6

}, { s7

}, { s8

}, {s9, . . . , s20

}, . . . , {. . . , s1000

}}

P1

P2

P3

P4

P5

P132

It is easy to verify that α(s1, H ′) = α(s2, H ′) = α(s3, H ′) = 0, α(s4, H ′) = 1
3 R, α(s5, H ′) =
|{z}
|
}
2
3 R, and α(s∗, H ′) = R.

|{z}

|{z}

{z

{z

{z

}

|

|

}

33

Since, α(s1, H) − α(s1, H ′) 6= α(s3, H) − α(s3, H ′) then the PPLNS fails to satisfy the
6= α(s5,H ′)
the PPLNS fails to satisfy the relative
α(s5,H)

absolute redistribution. Also as α(s4,H ′)
α(s4,H)
redistribution.

Besides the two popular schemes analyzed above, the academic literature has suggested
additional and more sophisticated schemes designed to provide miners with improved incen-
tives. For instance, Rosenfeld (2011) suggests the to use a so-called geometric scheme.

• Geometric: In this scheme, the rewards are distributed among the shares in a round
using a geometric series based on the order of their submission. Unlike other schemes the fees
are variable in this model and they depend on the size of the round. Formally, let r > 1. The
fee for a round is deﬁned as f (P (s)) = 1

r|P (s)| and the reward to each share is

α(s, H) =

(r − 1)
r|P (s)|−ρ(s)+1

B.

It is straight forward to see that the geometric scheme satisﬁes relative redistribution,
round based rewards and ordinality. The following proposition shows it also satisﬁes budget
limit.

Proposition 3. The geometric scheme satisﬁes budget limit.

Proof. Let H = (S, P(S)) be any history. Take any round r. Let |Pr| = k. Without loss of
generality, assume Pr = {1, 2, . . . , k} so that ρ(s) = s. Then

α(s, H) =

k

s=1
X

k

s=1
X

(r − 1)
rk−s+1 B = B(r − 1)
1 − 1
rn
1 − 1
r !

1
r  

1
rs

k

s=1
X

= B(r − 1)

= B(r − 1)

As r > 1 then Equation 22 is always less than B.

1 − 1
rn
r − 1 !

= B(1 −

1
rn )

(22)

(cid:4)

The following example shows the geometric scheme fails to satisfy the ﬁxed total reward

and absolute redistribution.

Example 5. Consider a history H = (S, P(S)) as follows,

S = {s1, s2, . . . , s1000}

P(S) = {{s1, s2

}, { s3

}, {s4, . . . , s20

}, . . . , {. . . , s1000

}}

P1

P2

P3

P132

It is easy to verify that α(s1, H) = r−1

| {z }

|{z}
|
r2 B, α(s2, H) = r−1

}
{z
r B, and α(s3, H) = r−1

{z

r B.

|

}

34

 
As

α(s, H) 6=

α(s, H) then geometric scheme fails to satisfy the ﬁxed total re-

wards.

s∈P1
P

s∈P2
P

To show that geometric fails to satisfy absolute redistribution consider H ′ = (S′, P ′(S′))

as an extension of H at the ﬁrst round as follows:

S′ = {s1, s2, . . . , s∗, . . . , s1000}

P ′(S′) = {{s1, s2, s∗

}, { s3

}, {s4, . . . , s20

}, . . . , {. . . , s1000

}}

P1

P2

P3

P132

It is easy to verify that α(s1, H ′) = r−1
r2 B, α(s∗, H ′) = r−1
r3 B, α(s2, H ′) = r−1
r B. Since r > 1
}
|
|
and α(s1, H) − α(s1, H ′) 6= α(s2, H) − α(s2, H ′) then the geometric fails to satisfy the absolute
redistribution.

| {z }

|{z}

{z

{z

}

Note that the Geometric scheme fails to satisfy the ﬁxed total reward axiom. We propose

the following modiﬁcation of this scheme to ﬁx this failure.

• Constrained Geometric: This scheme is deﬁned as α(s, H) =

r|P (s)|
r|P (s)| − 1
The constrained geometric scheme is included in the class of relative fairness reward sharing
schemes (with ǫ1 = 1 and ǫj = rj−1−1
rj−1 ). Therefore, it satisﬁes budget limit, total ﬁx re-
wards, ordinality and relative redistribution. To show that it fails absolute re-distribution
consider the history H and its extension H ′ as presented in Example 5.
It can be veri-
r3 × r3
r2−1 B, and α(s1, H ′) = r−1
ﬁed that α(s1, H) = r−1
r3−1 B,
α(s2, H ′) = r−1
r3−1 B. Since r > 1 and α(s1, H) − α(s1, H ′) 6=
α(s2, H)−α(s2, H ′) then the constrained geometric fails to satisfy the absolute redistribution.

r3−1 B, α(s∗, H ′) = r−1

r2−1 B, α(s2, H) = r−1

(r − 1)
r|P (s)|−ρ(s)+1

r2 × r2

r2 × r3

r × r2

r × r3

×

.

Next, we formulate another scheme which approaches the reward sharing problem from
the “incentive compatibility” perspective, i.e., it provides miners with the incentive to report
shares immediately.

• IC scheme: The IC scheme is proposed by Schrijvers et al. (2016) as an incentive
compatible reward sharing scheme. In words, let 1/D denote the probability of a share to
be a full solution. Then, if the round length is at least of the same size as D, the scheme
distributes the reward proportionally according to the length of the round; if the round length
is shorter, every share receives 1/D and the residual budget is given to the last (full) share of
the round. Formally,

α(s, H) = 


R
D
R

D + (1 − |P (s)|
R
|P (s)| ,

D )R,

if
if
if

|P (s)| ≤ D and ρ(s) < |P (s)|
|P (s)| ≤ D and ρ(s) = |P (s)|
|P (s)| ≥ D

This rule obviously satisﬁes ﬁxed total rewards, ordinality, and round based rewards, while it

fails both absolute and relative redistribution.

35

We conclude this section by formulating with one more reward sharing scheme, which
is interesting. The Slush scheme, named after the Slush mining pool24, is the only reward
sharing scheme that uses time signatures as a parameter for distributing the rewards. Our
framework is rich enough to capture this feature. Formally:

• Slush: Consider a history H = (S, P(S)) and let Ω(s) denote the index of the pool
round that share s belongs to i.e., Ω(s) = {x ≤ |P(S)| | s ∈ Px}. Let ¯sj denote the last share
in the jth round, i.e., ¯sj = {s ∈ Pj | τ (s) ≥ τ (s′), ∀ s′ ∈ Pj}. Then

Let score(s, j) =

τ (s)−τ (¯sj )
λ

e

τ (s′)−τ (¯sj )
λ

e

τ (s′)≤τ (¯sj)
P

for any Ω(s) ≤ j ≤ l. Then

l

α(s, H) = R

score(s, i).

Xi=Ω(s)

The parameter λ is set to 1200 in the Slush pool. In what follows, we therefore assume

λ = 1200.

In the following example we show that the slush scheme does not satisfy ﬁxed total reward,
ordinality, budget limit, round based reward, absolute redistribution and relative redistribu-
tion.

Example 6. Consider a history H = (S, P(S)) as follows,

S = {s1, s2, s3}

P(S) = {{s1, s2

}, { s3

}}

P1

P2

Let τ (s1) = 1, τ (s2) = 2 and τ (s1) = 3. Therefore, we have:

| {z }

|{z}

score(s1, 1) =

score(s1, 2) =

score(s2, 1) =

score(s2, 2) =

1−2
1200

e
1−2
1200 + e

e

e

1−3
1200 + e
2−2
1200

e
1−2
1200 + e

e

e

e

≈ 0.49

2−2
1200

1−3
1200

2−3
1200 + e

3−3
1200

≈ 0.5

2−2
1200

2−3
1200

1−3
1200 + e

2−3
1200 + e

e

3−3
1200

≈ 0.33

≈ 0.33

24https://slushpool.com/

36

score(s3, 2) =

3−3
1200

e

1−3
1200 + e

2−3
1200 + e

e

3−3
1200

≈ 0.33

Therefore, α(s1, H) = 0.82R, α(s2, H) = .83R and α(s3, H) = .33R.

As

α(s, H) = 1.65R, the Slush scheme violates the budget limit. As

α(s, H) 6=

s∈P1
P

s∈P1
P

α(s, H), it fails to satisfy the ﬁxed total rewards. It is easy to see that the Slush scheme

s∈P2
also fails the round based reward axiom, e.g., for the second round in this example. In addition,
P
one can verify that changing the time signature of any of the shares will have an eﬀect on the
award of shares, therefore the Slush scheme also violates ordinality.

Now consider H ′ = (S′, P ′(S′)) as an extension of H at the ﬁrst round as follows:

S′ = {s1, s2, s∗, s3}

P ′(S′) = {{s1, s2, s∗

}, { s3

}}

P1

P2

such that τ (s∗) = 2.5 Then the award of each share would be:

| {z }

|{z}

score(s1, 1) =

e

1−2.5
1200 + e

≈ 0.33

2.5−2.5
1200

1−2.5
1200

e
2−2.5
1200 + e
1−3
1200

e

2−3
1200 + e
2−2.5
1200

e
2−2.5
1200 + e
2−3
1200

e

2−3
1200 + e
2.5−2.5
1200

e

2−2.5
1200 + e
2.5−3
1200

e
2−3
1200 + e
3−3
e
1200

score(s1, 2) =

1−3
1200 + e

e

2.5−3
1200 + e

3−3
1200

≈ 0.25

score(s2, 1) =

e

1−2.5
1200 + e

≈ 0.33

2.5−2.5
1200

score(s2, 2) =

1−3
1200 + e

e

2.5−3
1200 + e

3−3
1200

≈ 0.25

score(s∗, 1) =

1−2.5
1200 + e

e

≈ 0.33

2.5−2.5
1200

score(s∗, 2) =

1−3
1200 + e

e

2.5−3
1200 + e

3−3
1200

score(s3, 2) =

1−3
1200 + e

2−3
1200 + e

2.5−3
1200 + e

e

3−3
1200

≈ 0.25

≈ 0.25

Therefore, α(s1, H ′) = 0.58R and α(s2, H ′) = .58R. Comparing these to α(s1, H) = 0.82R
and α(s2, H) = .83R, shows that the Slush scheme fails both absolute and fair redistribution
axioms.

The results for the well-known schemes are summarized in Table 1 below.

37

Table 1: Summary of the well-known schemes.

Scheme

PPS
PPLNS
Geometric
Modiﬁed Geometric
IC
Slush

Fixed total
reward
-
-
-
+
+
-

Relative re-
distribution
+
-
+
+
-
-

Absolute re-
distribution
+
-
-
-
-
-

Round based
rewards
+
-
+
+
+
-

Budget
limit
-
-
+
+
+
-

Ordinality

+
+
+
+
+
-

G Logical Independence

We deﬁne six reward sharing schemes in order to demonstrate logical independence of the
axioms in Section 3. The results are summarized in Table 2 below. Deﬁning schemes 1-6, let
R = B − f for some ﬁxed f ∈ [0, B].

• Scheme 1:

α(s, H) =

R
|P (s)| ,
R
2|P (s)| ,

(

if |P (s)| is odd

if |P (s)| is even

This scheme fails ﬁxed total rewards, but meets all the other axioms.

• Scheme 2:

α(s, H) = 


R,
(R − λ) + λ
λ
|P (s)| ,

|P (s)| ,

if |P (s)| = 1
if |P (s)| > 1 and ρ(s) = 1

if |P (s)| > 1 and ρ(s) 6= 1

where 0 < λ < R is a constant number.



This scheme fails relative redistribution, but meets all the other axioms.

• Scheme 3:

α(s, H) =

R
2|P (s)|−1 ,
2ρ(s)−2R
2|P (s)|−1 ,

(

if ρ(s) = 1

if ρ(s) 6= 1

This scheme fails absolute redistribution, but meets all the other axioms.

• Scheme 4:

α(s, H) =

R
|P (s)| ,
R
2|P (s)| ,

(

if the number of shares in the ﬁrst round of the history is odd

if the number of shares in the ﬁrst round of the history is even

This scheme fails round based rewards, but meets all the other axioms.

38

• Scheme 5:

α(s, H) =

2R
|P (s)|

This scheme fails budget limit, but meets all the other axioms.

• Scheme 6:

α(s, H) = 


R,
α2, R
α2, R

2 (s, H),

3 (s, H),

if

if

if

|P (s)| = 1

τ (ρ(s) = 1) − τ (ρ(s) = 2) < T

τ (ρ(s) = 1) − τ (ρ(s) = 2) ≥ T

where T is a time threshold.



This scheme fails ordinality, but meets all the other axioms.

Table 2: Logical independence of the axioms.

Scheme

Scheme 1
Scheme 2
Scheme 3
Scheme 4
Scheme 5
Scheme 6

Fixed total
reward
-
+
+
+
+
+

Relative re-
distribution
+
-
+
+
+
+

Absolute re-
distribution
+
+
-
+
+
+

Round based
rewards
+
+
+
-
+
+

Budget limit Ordinality

+
+
+
+
-
+

+
+
+
+
+
-

39

