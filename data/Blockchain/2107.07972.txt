Demo - Zelig: Customizable Blockchain Simulator

Ege Erdo˘gan
Koc¸ University
Istanbul, Turkey
eerdogan17@ku.edu.tr

Can Arda Aydın
Koc¸ University
Istanbul, Turkey
canaydin17@ku.edu.tr

¨Oznur ¨Ozkasap
Koc¸ University
Istanbul, Turkey
oozkasap@ku.edu.tr

Waris Gill
Koc¸ University
Istanbul, Turkey
wgill18@ku.edu.tr

1
2
0
2

l
u
J

6
1

]

R
C
.
s
c
[

1
v
2
7
9
7
0
.
7
0
1
2
:
v
i
X
r
a

Abstract—As blockchain-based systems see wider adoption, it
becomes increasingly critical to ensure their reliability, security,
and efﬁciency. Running simulations is an effective method of
gaining insights on the existing systems and analyzing potential
improvements. However, many of the existing blockchain sim-
ulators have various shortcomings that yield them insufﬁcient
for a wide range of scenarios. In this demo paper, we present
Zelig: our blockchain simulator designed with the main goals of
customizability and extensibility. To the best of our knowledge,
Zelig is the only blockchain simulator that enables simulating
custom network topologies without modifying the simulator code.
We explain our simulator design, validate via experimental
analysis against the real-world Bitcoin network, and highlight
potential use cases.

Index Terms—Blockchain, Simulator.

I. INTRODUCTION

Introduced in 2008 as the building block of Bitcoin [1],
a blockchain essentially enables a dynamic set of distrusting
parties to reach consensus on a history of transactions without
relying on a trusted third party. Although the hype around
blockchains seems to overshadow their actual uses, novel
blockchain-based systems have been proposed in different
problem domains such as peer-to-peer energy trading [2],
[3], electronic voting [4], supply chain management [5], and
ﬁnance [1], [6].

If blockchain-based systems are to be used for purposes that
are highly crucial for the well-being of a society, it is of critical
importance to ensure that those systems are secure, efﬁcient,
and reliable. Monitoring, benchmarking, experimental analy-
sis, and running simulations are the main methods that allow
empirical analysis of blockchain systems [7]. Among these
methods, running simulations stands out as an accessible and
low-cost alternative. While the other methods require direct
access to the system under evaluation, simulations can run
independently and cover a wide range of scenarios in a short
amount of time.

However, most existing simulators have various shortcom-
ings that make them unﬁt for evaluating a wide range of
scenarios [8]. Since most of them are designed with a speciﬁc
but limited purpose (e.g. to demonstrate an attack [9], or test
certain properties of the system [10]), they make unrealistic
assumptions to simplify the layers that are irrelevant for their
purposes. Furthermore, most simulators present
little cus-
tomization opportunities beyond parameter-tuning [8]. A well-

Accepted for presentation at
Distributed Systems (SRDS 2021).

the International Symposium on Reliable

designed and easily customizable simulator would not only be
an achievement in itself but also act as a catalyst for further
research. Such a simulator could be used to test blockchain-
based systems’ reliability, efﬁciency and security in varying
network conditions, or in the presence of adversaries.

Contributions. The key contribution in this paper is Zelig1,
our blockchain simulation framework, designed with the main
goals of customizability and extensibility,
implemented in
Python. By supplying the users with ready-made primitives
and ample customization and extension opportunities on vari-
ous levels through a well-deﬁned interface, we aim to stream-
line further research that would otherwise require building a
simulator from scratch. Our implementation currently consists
of a core simulator that captures the main elements of a
blockchain system, and a Bitcoin simulator that can be used as
a blueprint for similar simulations. To the best of our knowl-
edge, Zelig is the only blockchain simulator that allows users
to simulate custom network topologies without modifying the
simulator code.

Our demonstrations would mainly involve running Bitcoin
simulations under different scenarios, one of which is the self-
ish mining attack [9]. We would then analyze its effectiveness
with different settings to demonstrate how Zelig simulator
would beneﬁt such research. In the rest of the paper, we
describe Zelig’s design (Section II), validate it experimentally
the real-world Bitcoin network (Section III), and
against
describe sample use cases (Section IV). The source code for
Zelig can be found at https://github.com/ZeligSim/Zelig.

II. ZELIG SIMULATOR DESIGN

A. Core Simulator

Attempting to capture the main elements of a blockchain
system in a modular way, the core simulator consists of three
classes: Item, Node, and Packet. As displayed in Figure 1, each
class corresponds to a speciﬁc layer of a blockchain system.
We follow the layering approach that divides a blockchain sys-
tem into the layers of application, execution, data, consensus,
and network [7]. Zelig implementation consists of:

• The data layer corresponds to the data (blocks, transac-
tions) stored on the blockchain and the method (hashing,
Merkle trees) used for storage.

1The name Zelig refers to the 1983 Woody Allen ﬁlm, telling the story of
Leonard Zelig, who assumes the physical properties of anyone he comes into
contact with to ﬁt in.

 
 
 
 
 
 
implemented in a simpliﬁed way as of this writing, and we
plan to supply a more realistic implementation by analyzing
the real-world transaction data in detail.

In addition to the ﬁelds of its parent Item, a Block object
maintains a pointer to its preceding block in the blockchain.
When a block is created, its transaction count is sampled
from a normal distribution with mean 2104.72 and standard
deviation 236.63, and the size of each transaction from a
normal distribution with mean 615.32 bytes and standard
deviation 89.43. We extracted these values by analyzing the
last 365 days’ transaction data obtained from [11].

2) Consensus Layer: The consensus layer is exclusively
implemented in the Miner class, addressing block generation
and fork resolution problems. Each miner has a ﬁxed mining
power that determines its probability of generating a block at
each step.

As it would be infeasible to implement the actual proof-of-

work mechanism, nodes generate a block with probability

P =

NodeMinePower
BlockInterval · TotalMinePower

.

(1)

This ensures that miners generate blocks in proportion with
their mining powers, and that the expected time between two
blocks is the speciﬁed block interval. Since nodes generate
blocks independently, forks can occur. Miners resolve forks by
mining on top of the longest chain determined by its height,
since all blocks have the same difﬁculty for now.

3) Network Layer: The network layer consists of the Packet
class described above. A packet’s transmission delay depends
on its payload’s size and the geographic regions of its sender
and recipient. Each region has ﬁxed upload and download
values (MB/s), and each pair of regions has a ﬁxed latency
value (ms). Then, considering regions A and B with latency
LAB, download bandwidths DA, DB, and upload bandwidths
UA, UB, the network delay for a message with size S from
region A to region B is computed as

Delay = LAB +

S
min{UA, DB}

.

(2)

TABLE I
INPUT PARAMETERS FOR THE SIX EXPERIMENTS WE HAVE PERFORMED
(M: MILLION, FULL: REAL-WORLD NODE COUNTS).

Parameter
Nodes per region
Simulation steps
Connections per node
Seconds per step

#1
1

#6
Full
30M 30M 30M 15M 15M 15M

#4
Full

#5
Full

#2
10

#3
1

2
0.1

2
0.1

2
1

32
0.1

8
0.1

4
0.1

Fig. 1. Class diagram of Zelig’s core simulator and the extended Bitcoin
simulator with the system layer they correspond to (data, consensus, and
network layers). Each class in the simulator core corresponds to a speciﬁc
layer, and the Bitcoin simulator extends them.

• The consensus layer involves the protocol for the nodes
reach agreement on the system state (e.g. proof-of-work,
proof-of-stake, PBFT).

• The network layer corresponds to the P2P network that

the nodes communicate over.

Zelig’s three core classes are further detailed as follows:
• The Item class corresponds to the data that is being ex-
changed between the nodes and stored on the blockchain.
It can be extended to represent objects such as blocks or
protocol-speciﬁc messages.

• The Node class

represents

the participants

in the
blockchain network, and is the main entry point for
running simulations. At each simulation step, all nodes’
step() methods are called. In each call of its step()
method, a node increments its timestamp by one, obtains
the items corresponding to that timestamp from its inbox,
and performs the necessary actions on those items. The
order in which the nodes’ step() methods are called
does not affect the simulation result, and thus the simu-
lations can be easily parallelized.

• The Packet class is a wrapper for Items that abstracts
away the network layer logic from the data layer logic.
Each Packet has a payload (an Item), and a timestamp
value at which the packet would be processed by its
recipient.

B. Simulating Bitcoin

To demonstrate how the core simulator can be extended, we
implemented a Bitcoin simulator on top of the core simulator,
which can in turn be extended to add different behaviours.
Details of the three layers of the Bitcoin simulator are provided
next.

1) Data Layer: We simulate the Bitcoin data layer by
extending the Item class to represent Inv and GetData mes-
sages, as well as Blocks and Transactions. Transactions are

III. EXPERIMENTAL VALIDATION

In this section, we compare the preliminary experimental re-
sults obtained from Zelig with the real-world Bitcoin network.
In these experiments, we consider nine world wide regions
that make up more than 90% of the total mining power. We
obtain the regions’ bandwidth, node count, and mining power
values from [12], [13], and [14] respectively. The performance
metrics of interest that we use for comparison are:

TABLE II
COMPARISON BETWEEN THE REAL-WORLD BITCOIN METRICS AND THE RESULTS OBTAINED FROM ZELIG.

Metric
rs (%)
∆B (s)
tps
d50 (s)
d90 (s)

Bitcoin

2016
0.41
9.69
2.87
8.7
17.3

2020
0.06
10.05
3.48
0.5
3.3

#1
0.34
9.96
3.53
2.49
4.35

#2
0.69
10.04
3.52
4.51
6.29

Simulation
#4
#3
0.58
0.44
9.94
10.19
3.55
3.52
2.25
5.07
2.77
8.82

#5
0.55
10.17
3.47
3.14
3.62

#6
0.63
10.51
3.36
4.06
4.6

• Average block interval (∆B): Mean time between two

blocks on the main blockchain.

• Stale block rate (rs): Percent share of stale blocks
(mined but not included in the main chain) among all
blocks.

• Block propagation delays (dp): The time it takes for

blocks to reach a certain share (p%) of the nodes.

• Transaction throughput (tps): Number of transactions

included in the main chain per second.

Table I describes the experimental setups, and Table II
compares our results with the real-world Bitcoin network.
We obtain stale block rate (rs) and block propagation delay
values (dp) for the real-world network from [8], average block
intervals (∆B) from [15], and transaction throughput values
(tps) from [11].

Overall, the results are reasonably close to the real-world
network. We believe we can obtain more accurate results once
we implement recent developments such as compact block
relay [16] that reduce propagation delays and thus the stale
block rate.

IV. USE CASES AND FUTURE WORK

In this section, we highlight two potential use cases in
which Zelig can be customized in its current state to simulate
additional interesting scenarios, and summarize future work.
Simulating Different Attack Scenarios. Attacks such as
selﬁsh mining [9] can pose serious risks to a blockchain sys-
tem’s security. It is infeasible to test such attacks on the real-
world network, and implementing a simulation environment
from scratch can be a cumbersome task for different research
works. By providing an easy-to-use test bed for such attacks,
Zelig can be a valuable tool for conducting such research.
In Zelig, the Bitcoin Miner class can be extended without
changing the rest of the simulator to implement different attack
scenarios (e.g. selﬁsh mining and eclipse attacks). Testing the
attack using Zelig and writing no more than the bare minimum
attack code itself can speed up such research, and enable
potential vulnerabilities to be discovered faster.

Experimenting with Custom Network Topologies. A
relatively less explored area of public blockchains is the
effect of the network topology on system behavior. In Zelig,
different network topologies can be implemented by specifying
a Python function that takes two nodes as input and returns
True if the nodes are connected. For example, a ring topology
with 10 nodes can be constructed by providing the following
Python lambda expression when conﬁguring the simulator:

lambda n1, n2: abs(n1.id - n2.id) == 1

or abs(n1.id - n2.id) == 9

Since designing blockchain systems with well-deﬁned network
structures can provide potential performance beneﬁts, Zelig
has also potential to speed up such research by freeing the
researchers from the burden of implementing their custom
simulators.

Future Work. We plan to extend the Zelig simulator by
implementing further customization and extension opportuni-
ties, for instance by modelling an incentive mechanism for
miners. Additional future directions would be bringing the
Bitcoin simulator up to date with recent developments, and
providing blueprint implementations for different platforms
such as Ethereum [6].

REFERENCES

[1] S. Nakamoto, “Bitcoin: A peer-to-peer electronic cash system,”

http://bitcoin.org/bitcoin.pdf.”

[2] F. S. Ali, M. Aloqaily, O. Alfandi, and O. Ozkasap, “Cyberphysical
blockchain-enabled peer-to-peer energy trading,” Computer, vol. 53,
no. 9, pp. 56–65, 2020.

[3] F. S. Ali, O. Bouachir, O. Ozkasap, and M. Aloqaily, “Synergychain:
Blockchain-assisted adaptive cyber-physical p2p energy trading,” IEEE
Transactions on Industrial Informatics, vol. 17, no. 8, pp. 5769–5778,
2021.

[4] X. Yang, X. Yi, S. Nepal, A. Kelarev, and F. Han, “Blockchain
voting: Publicly veriﬁable online voting protocol without trusted tallying
authorities,” Future Generation Computer Systems, vol. 112, pp. 859–
874, 2020.

[5] P. Dutta, T.-M. Choi, S. Somani, and R. Butala, “Blockchain technology
in supply chain operations: Applications, challenges and research oppor-
tunities,” Transportation research part e: Logistics and transportation
review, vol. 142, p. 102067, 2020.

[6] G. Wood, “Ethereum: A secure decentralised generalised transaction

ledger,” 2014.

[7] C. Fan, S. Ghaemi, H. Khazaei, and P. Musilek, “Performance Evaluation
of Blockchain Systems: A Systematic Survey,” IEEE Access, vol. 8,
p. 24, 2020.

[8] R. Paulavicius, S. Grigaitis, and E. Filatovas, “A Systematic Review
and Empirical Analysis of Blockchain Simulators,” IEEE Access, vol. 9,
pp. 38010–38028, 2021.

[9] I. Eyal and E. G. Sirer, “Majority is not Enough: Bitcoin Mining is
Vulnerable,” arXiv:1311.0243 [cs], Nov. 2013. arXiv: 1311.0243.
[10] A. Gervais, G. O. Karame, K. W¨ust, V. Glykantzis, H. Ritzdorf, and
S. Capkun, “On the Security and Performance of Proof of Work
Blockchains,” in Proceed. ACM SIGSAC Conference on Computer and
Communications Security, pp. 3–16, ACM, Oct. 2016.

[11] “Blockchain explorer.” https://www.blockchain.com/charts#currency,

2021.

[12] TestMy.net, “Top countries for bandwidth.” https://testmy.net/country,

2021.

[13] A. Yeow, “Global bitcoin nodes distribution.” https://bitnodes.io, 2021.
[14] C. C. for Alternative Finance, “Bitcoin mining map.” https://cbeci.org/

mining map, Apr 2020.

[15] BitInfoCharts, “Bitcoin block time chart.” https://bitinfocharts.com/

comparison/bitcoin-conﬁrmationtime.html, 2021.

[16] M. Corallo, “Compact block relay.” https://github.com/bitcoin/bips/blob/

master/bip-0152.mediawiki, Feb 2020.

