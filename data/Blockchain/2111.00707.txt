1
2
0
2

v
o
N
1

]

R
C
.
s
c
[

1
v
7
0
7
0
0
.
1
1
1
2
:
v
i
X
r
a

JOURNAL OF LATEX CLASS FILES, AUGUST 2021

1

B-DAC: A Decentralized Access Control
Framework on Northbound Interface for Securing
SDN Using Blockchain
Phan The Duy∗†, Hien Do Hoang∗†, Do Thi Thu Hien∗†, Anh Gia-Tuan Nguyen∗† and Van-Hau Pham∗†
∗Information Security Laboratory, University of Information Technology, Ho Chi Minh city, Vietnam
†Vietnam National University, Ho Chi Minh city, Vietnam
{duypt, hiendh, hiendtt, anhngt, haupv}@uit.edu.vn

Abstract—Software-Deﬁned Network (SDN) is a new arising
terminology of network architecture with outstanding features
of orchestration by decoupling the control plane and the data
plane in each network element. Even though it brings several
beneﬁts, SDN is vulnerable to a diversity of attacks. Abusing the
single point of failure in the SDN controller component, hackers
can shut down all network operations. More speciﬁcs, a malicious
OpenFlow application can access to SDN controller to carry out
harmful actions without any limitation owing to the lack of the
access control mechanism as a standard in the Northbound. The
sensitive information about the whole network such as network
topology, ﬂow information, and statistics can be gathered and
leaked out. Even worse, the entire network can be taken over by
the compromised controller. Hence, it is vital to build a scheme of
access control for SDN’s Northbound. Furthermore, it must also
protect the data integrity and availability during data exchange
between application and controller. To address such limitations,
we introduce B-DAC, a blockchain-based framework for decen-
tralized authentication and ﬁne-grained access control for the
Northbound interface to assist administrators in managing and
protecting critical resources. With strict policy enforcement, B-
DAC can perform decentralized access control for each request to
keep network applications under surveillance for preventing over-
privileged activities or security policy conﬂicts. To demonstrate
the feasibility of our approach, we also implement a prototype
of this framework to evaluate the security impact, effectiveness,
and performance through typical use cases.

Index Terms—SDN security, access control policy, Northbound

interface, blockchain adoption.

I. INTRODUCTION

S oftware-Deﬁned Network (SDN) is an emerging technol-

ogy that has been gaining signiﬁcant attention among
IT professionals and the public. One of the reasons for this
interest is the rising prominence of network management with
a ﬂexible mechanism provided by the centralized controller. In
fact, SDN has been considered and deployed in various real-
world environments and potential cases in the near future. It
includes large-scale data centers, SDN-based cloud, namely
Huawei NovoDC [1], CloudFabric [2]. Also, it is impossible
not to mention Microsoft Azure [3], IBM Network Services
[4], Cisco [5], NTT DOCOMO [6] in this adoption trend. In
addition, witnessing the surge in the number of devices and
trafﬁc volumes, the system architectures of next-generation
networks (5G/6G) are introduced based on SDN technologies
[7]. Similarly, edge computing is considered as one of promis-
ing ﬁelds of SDN integration to facilitate the management and

operation of edge servers and various IoT devices [8]. This
can be explained that heterogeneous networks can leverage the
SDN paradigm to manage numerous IoT and network devices
over the large-scale network [9].

it

Although SDN has great potential for the reconstruction
of the future Internet,
is facing a diversity of techni-
cal challenges and security issues. To be more precise, the
SDN controller becomes the most vulnerable component in
SDN architecture, since it adequately manages the entire
network. In this circumstance, an access control solution
for the controller and its Northbound interface plays a vital
role to prohibit disruption of the whole network functions
from rogue network applications. Generally, the access control
model is responsible for restricting the activity of network
applications and enforcing security policies to protect
the
network from unauthorized access. Most of the existing works
propose management schema laid on a speciﬁc controller. This
makes it difﬁcult and inadequate to port their models to other
controllers without modifying a bunch of source codes in the
SDN controller. That is why our system aims to independently
operate with the controller while providing the assurance of
tamper resistance in conﬁdential artifacts. In this context, it
enforces the scheme of controlling the application identity, as
well as their behaviors and logging as audit trails.

Besides, when an SDN application is compromised, it can
create powerful ﬂow rules to process packets according to
their intent, such as modifying the routing path, the header
of a data packet. As a result, there are conﬂicts of ﬂow rules
in the network devices due to commands from the controller
which are generated by malicious applications. Unfortunately,
several attempts of implementing access control systems ig-
nore the legality of ﬂow rules that result in the invalidation of
network functions and security issues. Thus, in addition to the
AAA scheme (Authentication, Authorization, Accounting), it
is necessary to detect the malicious or conﬂicting ﬂow rules
to verify the correctness of network operation before being
inserted into OpenFlow switches.

Furthermore, previous systems for securing SDN controllers
from malicious applications ignore the vulnerabilities and risks
of their mechanism itself. Indeed, attackers can intrude and
compromise the monitoring system to gain higher privileges
by modifying the security policy database which belongs to
the access control system. Consequently, the control scheme at

 
 
 
 
 
 
JOURNAL OF LATEX CLASS FILES, AUGUST 2021

2

the Northbound interface can be bypassed, and the controller
can be deceived to perform harmful activities taken down the
whole network system.

With the booming era of blockchain in various applications,
the blockchain-based approach has gathered considerable at-
tention from both industry and academia, especially in security
problems. Its centerpiece is a decentralized structure that
allows the features of assuring tamper-proof, immutable, time-
stamped record keeping. Recently, many research ﬁelds wit-
nessed an unprecedented rise in the development, integration,
and maturity of blockchain adoption. It is proved that the
principle of data security and privacy, as well as the trust-
based relationship with personal information on the Internet,
can be revolutionized by leveraging blockchain. Since the
explosion of cryptocurrency, the advocates introduce a range
of prototypes utilizing blockchain for enhancing security,
privacy-preserving in data storing and sharing. There are
such applications in the context of networking, IoT, smart
environment, education, healthcare, ﬁntech, big data, artiﬁcial
intelligence, and cybersecurity, etc. [10]. With outstanding
characteristics, such as decentralization,
immutability, and
auditability, blockchain gives a potential approach for applying
to AAA systems (Authentication, Authorization, Accounting).
Moreover, the previous works propose AAA systems based on
the centralized model. This makes the AAA system become a
Single point of Failure. Upon suffered from attacks, a security
monitoring system can be interrupted or eavesdropped. As a
result, sensitive data can be leaked out. Hence, it is important
to ﬁnd a novel solution to overcome these weaknesses. To
resolve such challenges, blockchain-based approaches have
rapidly been considered as a potential solution for access
control systems to ensure the integrity and tamper resistance
of sensitive data.

Our proposed solution is ﬁrst motivated by Trust Trident
[11], a controller-independent approach for authentication
framework. Then, we continue to integrate blockchain features
into the access control system on the Northbound interface
in a ﬁne-grained manner, named B-DAC. It is designed to
be a decentralized framework for handling network applica-
tions in securing controller operation. It tackles the issues of
security, privacy, scalability, and reliability in the scheme of
traditional authentication. Our framework is independent of the
controller so that this mechanism can easily adapt to the other
speciﬁc controllers. Speciﬁcally, our access control system
is responsible for authenticating, authorizing, and monitoring
applications in communication with the controller. In addition,
ﬂow rules are validated to prevent conﬂicts before being
installed into the switches according to the command of the
controller through network applications.

The rest of this paper covers the following sections. Sec-
tion II gives an overview of SDN, security issues on North-
bound interface. Problem statement and research goal are dis-
cussed on Section III. Consequently, the architecture and main
operation principle of our B-DAC framework, are described
in Section IV. An example of request processing ﬂow in
our B-DAC is presented in Section V. Later, in Section VI,
we present a prototype implementation and evaluation of our
mechanism. Section VII introduces the existing works relating

to the access control framework for SDN or network appli-
cations. Additionally, we also indicate that it is potential to
apply blockchain in many security solutions, which complies
with the requirement of decentralization,
tamperproof and
integrity, infeasible hacking. After that, in Section VIII, we
draw conclusions, also further discuss our prototype system
and future work.

II. BACKGROUND

This section introduces the background on SDN, including
the basic architecture and its security problems. Also, we give
an overview of the main concepts and principles of blockchain
technology, then discuss the possibility of utilizing blockchain
in the context of SDN security.

A. Overview of SDN

In contrast to the traditional networks, Software-deﬁned
network (SDN) adequately changes the network architecture
by separating the network logic from the underlying forward-
ing devices. The three-layer architecture of SDN is shown
in Fig. 1. It consists of the application plane, the control
plane, and the data plane. Concerning communication links,
the Northbound interface is set as the connection between
the controller and applications, whereas the controller and the
physical networking hardware communicate to each other via
the Southbound interface.

In SDN, the controller – a core component placed in the
control plane, plays as the brain of the network. It takes the
duty of directing trafﬁc to desired destinations. The routing
information is then delivered to the network devices on the
data plane to forward the trafﬁc accordingly via ﬂow rule
installation. The process of exchanging messages between
the control and data plane is going under the support of
OpenFlow protocol – a standard Southbound interface API.
This centralized control manner not only provides the whole
view of the network but also allows to easily program, modify
and manage the network conﬁguration. In fact, we do not have
to access to each network device to reconﬁgure it. The third-
party applications can leverage the management information
in the controller to perform various operations, such as load
balancing or statistics. To access and utilize network resources,
these applications need to use the Northbound interface as the
intermediate channel to communicate with the controller.

Fig. 1. Overview of SDN architecture

JOURNAL OF LATEX CLASS FILES, AUGUST 2021

3

This architectural transformation rejuvenates the network
layer, allowing centralized management and programmability
of the networks according to the ﬂexible security policy.
More speciﬁcs, anyone can develop and deploy an application
(ﬁrewall, proxy,
load balancer, etc.) to the SDN network
provided that it supports OpenFlow protocol.

B. Security issues from Openﬂow applications and North-
bound interface on controller

Being a new and rising technique, SDN may lack security
mechanisms to protect itself from malicious actions and be-
come a target of attacks, according to [12]. Also mentioned
in this research, the controller and the controller-application
interface are two of the critical positions that are exploitable.
Considered as the brain of SDN, the centralized manage-
ment of the controller can be deceived to perform harmful
actions. When it is compromised, an attacker can easily get
in his hand a lot of network information such as topology,
ﬂow rule tables, connection, and statistical information. Even
worse, the network conﬁgurations can also be unauthorized
manipulated to meet a speciﬁc purpose of the attacker. In this
case, the correctness of the network operations will be affected.
Along with the direct attack on the controller, an attacker
can also get into it in other ways, such as using NBI. This
interface allows applications to interact with the controller
and its managed network. However, unlike the well-known
Southbound interface (SBI) standard OpenFlow, there is a
lack of a standard as well as the consideration in security
improvement of this interface. Hence, if no security policy
is applied, NBI can become a vulnerability in the SDN
architecture, where malicious applications can have access to
it and then seize control over the controller.

In the AIM-SDN study [13], V.H. Dixit et al. have con-
ducted various attack scenarios targeting SDN. NBI is also
described as an easily exploitable component via many attacks
targeting the conﬁdentiality, integrity, and availability of the
network. For example, the integrity of network information
can be damaged by using NBI as well as SBI, so that
undesired trafﬁc can be allowed to forward. Moreover, the
authors also state the problem of the unbounded number of
ﬂow rules that can be installed. Speciﬁcally, the controller
can unconditionally accept all ﬂow installation requests from
applications. In such circumstances, the network performance
can be degraded, even worse, it can lead to resource starvation
for normal operation.

Meanwhile, another work called DELTA [14] also try to
investigate various attack scenarios in SDN. About 20 known
attacks along with 7 unknown ones from SDN applications
have been successfully reproduced and discovered. Some
attacks take place in or relate to NBI. For instance, the Service-
unregistration attack allows all applications to register to
receive and parse control messages from switches. This feature
could lead to the effect of compromised applications on the
legal services of other applications. Besides that, Application
Eviction attacks can cause a legitimate application to change
its status from ACTIVE to another state and stop working.

C. Blockchain

The emergence of Bitcoin is the ﬁrst launch of blockchain
technology, which is received tremendous attention from re-
searchers and the general community. To offer the high-
light features of ensuring integrity and tamper resistance,
blockchain consists of many techniques ranging from cryptog-
raphy, peer-to-peer network, and consensus protocol as game
theory. To start with, it leverages the power of cryptography
such as hash, asymmetric cryptography, digital signatures to
ensure that data are kept securely and conﬁdentially. Regarding
network models, the distributed database is the main thought
in blockchain. It is a public ledger that contains all records
of digital transactions transmitted among the involved parties.
This ledger is replicated and stored in the whole peer-to-
peer nodes. Thus, it makes transaction records accessible even
if several nodes are unavailable or disrupted. Moreover, a
certain consensus algorithm is used to tackle the problem of
synchronization from the distributed database. The consensus
process also keeps the database of the blockchain under the
control of multiple nodes. A new transaction data must be
validated by all nodes before being added to the blockchain.
Hence, it is so far difﬁcult, even infeasible for hackers to
manipulate records of the ledger since they must have controls
over multiple nodes to overcome the consensus scheme.

In the early days of blockchain, it is designed as an open and
distributed ledger. With its outstanding advantages, blockchain
has been applied in many ﬁelds [10] while satisfying various
security and privacy requirements. In fact, many types of
blockchain have been developed to meet
the complicated
requirements. Generally, there are three primary categories of
blockchain including public blockchain, private blockchain,
and hybrid blockchain. To start with, anyone can join the
public blockchain as a role of user or miner, regardless of
their geographic location. Therein, consensus algorithms are
fully transparent with users. All transactions that take place
on the public ledger can be veriﬁed by everyone. The public
blockchain network encourages people to participate and re-
ward them for joining in the consensus scheme. Meanwhile,
in comparison with the public blockchain, users needs an
approval to participate in the private blockchain network. Also,
transactions are kept private, where only participants with
given permissions can read or write transactions. Usually, a
private blockchain belongs to an organization. The consortium
blockchain, also named permissioned blockchain, are consid-
ered as a subset of private blockchains. Its main distinguishing
characteristic is that they are governed by a group rather than
an entity like private blockchain. In a private blockchain, it can
process hundreds or even thousands of transactions per second,
as the number of authorized participants is lesser. Combining
the advantages of both private and public blockchain, the hy-
brid blockchain is created. By this way, it leverages the privacy
of private and consortium blockchains while maintaining the
security and transparency of the public blockchain. This is
considered as a suitable choice for those who need to keep
a portion of data public and transparent while other portions
need to be private.

Also mentioned in [10], blockchain has been applied in

JOURNAL OF LATEX CLASS FILES, AUGUST 2021

4

many ﬁelds in Industry 4.0 to resolve security and privacy
issues of existing system. This is offered by its decentralized
model, cryptographic security beneﬁts and fault tolerance. In
education, blockchain-based digital certiﬁcates can replace for
paper or a regular digital one, for example. Cryptocurrency
like Bitcoin, Ether is used in ﬁnance, banking, e-commerce
for implementing trade. Blockchain also allows developers to
build medical sharing applications for patients and doctors in
a privacy-preserved way. Besides, in terms of security and
networking, blockchain also has its ﬁrst applications. With
the characteristics of data persistence and decentralization,
blockchain is suitable for log storage or sensitive and reliable
data sharing systems. In particular, the blockchain adoptions
are found in several domains such as Artiﬁcial Intelligence
(AI) [15], IoT [16] [17], intrusion detection [18], or SDN
[19] [20]. This potential is shown that there is much room
for developing applications which leverages blockchain fea-
tures to enhance security of speciﬁc systems. To summarize,
blockchain has now been foreseen as a trusted paradigm to
keep securely sensitive data with the assurance of tamper
resistance and integrity.

D. Hyperledger Fabric: A permissioned blockchain for
privacy-preserving, scalable and low-cost approach

Private blockchains have been more in the spotlight in the
industry recently because they are much faster, low-cost, and
privacy-oriented compared to the public blockchain [21], [22].
Among them, Hyperledger Fabric [23] is a cross-industry
collaborative project hosted by Linux Foundation, aiming
to ﬁt
into enterprise architecture and allow organizations
to customize networking rules for various consensus proto-
cols. Hyperledger Fabric is an open-source implementation of
permissioned enterprise-grade blockchain for running smart
contracts, named chaincode. It consists of three groups of
nodes which are peer, orderer, and client owned by different
organizations. The task of identifying all nodes is carried by
a Membership Service Provider (MSP).

In comparison with public blockchain such as Ethereum or
Bitcoin, Hyperledger Fabric has a novel architecture, called
three-phase execute-order-validate transaction ﬂow. This ar-
chitecture makes each Hyperledger Fabric’s transaction must
undergo three stages: endorsement execution, ordering, and
validation [24]. For instance, a client ﬁrst submits a transaction
proposal to peer nodes assigned by the endorsement policy in
advance. Next, the transaction proposal is executed on these
peers by invoking an appropriate chaincode. Then, the client
must collect enough endorsement results from many peers
before submitting the transaction to the ordering services.
The ordering service, which is located on orderer nodes,
creates a total order for all transactions and builds blocks
through a speciﬁc consensus algorithm. Subsequently, these
blocks are broadcasted to all peers by gossip protocol for
transaction veriﬁcation to update the ledger state. Fig. 2
depicts an example of Hyperledger Fabric blockchain with two
organizations. Each of them has three peers: one endorser and
two committers.

Regarding real-world use cases, many organizations such
as enterprises in a speciﬁc ﬁeld can collaborate to build the

Fig. 2. An example of Hyperledger Fabric blockchain with two organizations

permissioned Blockchain like Hyperledger Fabric to provide a
mutual decentralized platform for their operation. According
to the survey of Julien Polge et al. [25], Hyperledger Fabric
is also considered as the most promising platform among
permissioned blockchains for industrial use cases thanks to
the characteristics of privacy, latency, scalability.

In many use cases for cloud authentication and management,
some approaches such as SEPSE [26], Chronos+ [27] or
a work of Yuan Zhang et al. [28] use Ethereum, a public
blockchain for implementation to provide accurate time-stamp
and integrity proof for cloud services. Such approaches do not
require employing miners or stakeholders for setting up the
platform. It is also more secure due to the decentralization
and active participation in the network. Nevertheless, public
blockchain takes end users to spend a large amount of ﬁnancial
cost and time for transaction veriﬁcation [29]. This is where
a private blockchain or consortium blockchain comes into
play. But, a private blockchain is more prone to hacks, risks,
and data manipulation since it is more centralized than a
public one. To reduce this risk, consortium blockchain with
more nodes and organizations can help. The permissioned
blockchain places restrictions on who is allowed to participate
in the network, and only in certain transactions. This grant
control can improve the speed and throughput of transactions
to cater to the enterprise’s requirements. Speciﬁcally, it is
getting more effective than a public blockchain in the context
of Industrial Internet of Things (IIoT) applications [17], [21]
because the scalability and privacy issues can be resolved by
permissioned blockchain adoption. However, the ﬁnal selec-
tion of a blockchain framework for a speciﬁc case study is
always a trade-off.

III. PROBLEM STATEMENT

Recently, several existing SDN authentication systems that
defend SDN controllers against malicious OpenFlow appli-
cations have shown their potential effectiveness [30]. Nev-
they still have some fundamental problems that
ertheless,
should be addressed to improve access control mechanisms for
an SDN controller [32] [33]. In more detail, these solutions
are generally controller-dependent, where source codes of the
controller need to be altered for granting access permissions
to external applications. Besides, the control mechanism is

JOURNAL OF LATEX CLASS FILES, AUGUST 2021

5

susceptible to denial of services or spooﬁng attacks itself,
which breaks the entire security policy. Such incidents occur if
the management system for issuing privileges is compromised.
The malicious OpenFlow apps can still infect the controller for
seizing network control if they easily exploit the database of
security policy to perform privilege escalation. In addition,
the activity logs captured by the management system can
be altered to cover malicious actions. Therefore, the scheme
of access control should guarantee fault tolerance, and log
integrity for further investigation purposes.

A. Current issues

In this paper, we primarily focus on the following key
deﬁciencies of existing access control systems for SDN con-
trollers. This is to make the controller more robust and to
prevent the network system from harmful actions performed
by malicious network applications.

1) Controller-dependent:

If the design of a permission-
based control model is tightly coupled with a speciﬁc con-
troller, its deployment can become a complicated task. This
requires modiﬁcations in the source code of that controller
to enable the access control scheme. In addition, approaches
aiming to be easily implemented in various controller types
should prefer the pluggable architecture instead of the all-in-
one approach on controller [34] [35]. Unfortunately, most of
the previous studies related to securing the Northbound in-
terface have been strongly controller-dependent, which means
they cannot be ported to other controllers. Therefore, a ﬂexible
framework is essential to monitor network applications without
any dependence on a speciﬁc controller to avoid the issue of
portability deﬁciency.

2) Deﬁciencies of Authentication – Authorizing – Account-
ing: To protect the SDN controller from malicious actions
in the Northbound interface, a ﬁne-grained access control
system plays a crucial role to manage OpenFlow applications
in consuming network resources. A rogue application allows
attackers to take over the entire network by compromising
the SDN controller by exploiting the Northbound API. Upon
taking over, attackers can modify or inject the data ﬂow of
the network and cause serious consequences such as loss or
theft of data of users and enterprises [36]. Therefore, it should
provide a scheme of authentication, authorization, accounting
(AAA) services to grant access permissions for OpenFlow
apps to defend malicious attacks from rogue ones.

Authentication: This is one of the key features of any
access control system, where participants are veriﬁed by pre-
registered identity. In the context of SDN controller and
OpenFlow applications, this process is important to determine
which ones can interact with the controller to use the network
resources. However, attackers can produce a counterfeit entity
or fake program to fool the controller to achieve their illegit-
imate goals. For instance, after bypassing the authentication
scheme, they can send malicious conﬁgurations to network
devices through rule installation. Besides that, a tampered con-
troller with IP spooﬁng can provide forged network resources
for other genuine applications. It would lead to incorrect
management and orchestration from SDN applications.

Authorization: Upon being successful in the authentication
process, OpenFlow application should be given relevant grants
to the network system. Speciﬁcally, every request stemming
from such application is adequately taken under observation
to control privileges escalation. Obviously, it is better to issue
at least permissions for their task’s functions.

Accounting: We can easily get

in trouble with security
investigation or evaluating the trustworthiness of a speciﬁc
application if there is no record of the operation history. This
proves that a logging scheme is a preferred method for tracing
what happens in the network relating to a certain subject.

3) Lack of tamperproof and integrity & Single point of
failure (SPoF): Although there are several AAA systems
for controlling applications when they communicate with
SDN controllers, these proposed approaches encounter various
problems [37]. Their limitations can be depicted in the issues
of SPoF due to the centralized architecture of traditional
access control schemes, which depend on only one server
machine. Also, they lack tamperproof and integrity for the
AAA database. Hackers can intrude on the system and mod-
ify the security policy, audit log, etc. In fact, they intend
to cover their track in the network, which makes network
forensics more difﬁcult. In traditional access control schemes,
the centralization of sensitive information in the context of
IoT, cloud, or fog computing can lead to critical risks of data
damage and leakage. For instance, SDN-enabled IoT with
an enormous number of heterogeneous devices should not
use the centralized architecture of traditional authentication
mechanisms due to the issues of security, privacy, scalability,
and reliability [38]. So,
the vital role of availability and
security-enhanced itself for access control mechanism should
be taken under consideration carefully and strictly.

4) Malicious ﬂow rules injection: In addition to authenti-
cating and recording all activities of OpenFlow applications
with a timestamp, monitoring systems are also required to
implement ﬂow rules veriﬁcation on ﬂow rule installation
requests from applications sent to the controller. The reason for
this is that different network applications can use Northbound
API to deploy their intended ﬂow rules into network elements
like switches. For instance, a rogue application that has
WRITE permission can insert a new rule to eavesdrop on the
network trafﬁc on the speciﬁc link. It can also remove or up-
date existing ﬂows on switches to bypass security checking of
network ﬁrewall for further purposes, etc. Moreover, these ﬂow
rules sometimes generate conﬂicts or security issues in the
forwarding plane. In consequence, network functions become
invalid or produce incorrect or unexpected routing decisions.
Hence, ﬂow rules injection can break down operations in the
network, which lacks a mechanism to control rule conﬂict
before it takes effect at switches [39] [40].

5) Exhausting controller resources: Currently, as the SDN
controller is open for OpenFlow applications to consume
network resources, it is vital to set a threshold of the number of
ﬂow rules that an OF app can install. If controllers always ac-
cept a new ﬂow conﬁguration without any limitation of access
rate, the surge of calling requests from malicious applications
can create the downgrade of controller performance. Even
worse, it can lead to crashes and failure of entire network

JOURNAL OF LATEX CLASS FILES, AUGUST 2021

6

operation [41]. Thus, we need to keep network applications
under observation and limit their quota of consuming resources
based on their priority and granted permission.

6) Information disclosure: Due to the shortage of support-
ing encryption in the Northbound interface, the data exchanged
between SDN controller and applications can be captured
and tampered [36]. Besides that, a malicious application can
directly perform reconnaissance attacks to gather network
information through API abusing since there is no protection
system located at
the Northbound interface. Consequently,
attackers can use these sensitive resources such as switch ports,
switch links and ﬂow rules to prepare sophisticated attacks like
DDoS, topology poisoning, etc. Hence, it is critical to build
a repacking service to control and observe data transferred
from an SDN controller to an OpenFlow application. This
function requires the transparency of the monitoring scheme
with OpenFlow apps that
the SDN
controller against malicious applications. Consequently, the
SDN controller is hidden from maliciously probing due to
the interception of the monitoring system. Additionally, the
Northbound API encounters a lack of encryption services for
communication between network applications and controllers,
which can ultimately result in being susceptible to the Man-
in-the-middle attack.

to protect

is helpful

B. Research goals

It

that

is evident

the whole network operation can be
broken by rogue applications through the Northbound interface
provided by the controller, according to a previous study [14].
The malicious or compromised applications can dynamically
change the services of other applications or perform harmful
intent without any constraint. The reason for this is that the
paradigm of SDN allows a third party to deploy Open-Flow
applications to consume network resources via the Northbound
interface. If the Northbound API is abused by malicious
applications, hackers can perform attacks to compromise the
SDN controller. The goal of our study is to introduce a novel
ﬁne-grained and decentralized access control framework for
OpenFlow applications in the Northbound interface of SDN.
Six challenges mentioned before are resolved by 3 solution
categories as follows.

Firstly, our approach provides a ﬁne-grained control system
built with the main idea of the controller-independent princi-
ple. It authenticates every communication and entity joining
the application-controller channel to prevent data leakage. This
is carried out by checking whether each request for accessing
API assets owns the right permission or not.

Secondly,

it realizes policy-based access control on the
Northbound interface. Therein, the administrator is responsible
for creating permission lists for accessing API assets grouped
by object types in SDN. Then, for each network application, a
policy is deﬁned with granting permissions corresponding with
the role proﬁle of the application in the network. Otherwise, it
denies access if there is no policy created for this application.
Thirdly, we also ensure the legality and the atomicity
of installing ﬂow rules by preventing conﬂicts within net-
work functions. By recording all behaviors of OpenFlow app

communicating with the controller such as API abuse, ﬂow
conﬂict creation, the framework automatically conducts a con-
sideration of application trustworthiness for further incidents
response and reporting to administrators.

By utilizing blockchain in the three aspects shown above,
we also guarantee the availability and robustness of anti-
counterfeiting for monitoring schemes. Our security-enhanced
solution for SDN Northbound leverages the key characteristics
of the blockchain, namely decentralization, immutability, and
auditability, to resist the security concerns about ensuring the
integrity and tamper resistance of critical information in the
SDN-enabled network.

IV. ARCHITECTURE DESIGN

To address problems discussed in Section III, we intro-
duce an approach of decentralized access control for net-
work applications in SDN using blockchain. According to the
highlight features aforementioned in Section II-D, we choose
Hyperledger Fabric, a permissioned blockchain to deploy
an AAA scheme for network security management because
it provides the low-cost blockchain approach with privacy-
oriented, high-performance and scalable characteristics. The
proposed framework in this paper, called B-DAC, is inherited,
and extended, from our previous works [11] [52]. Our B-
DAC consists of multiple modules to guarantee the security
of controller-application communication, which is depicted in
Fig. 3. The function of each module is mentioned in detail in
the following sections.

A. Entities in B-DAC

1) Participants: In B-DAC system, blockchain is leveraged
to support the operation of the AAA scheme, where SDN
components are considered in Blockchain-based terms.

A participant must have a digital identity which is stored in
a wallet to connect to a Hyperledger Fabric. An X509 identity
(X509Identity) is created by the network administrator when a
participant joins the blockchain network. It is a set of informa-
tion and credentials of the participant in communication within
the system, including a MSP (Membership Service Provider)
identiﬁer (MSPID in metadata), a private key, and an X.509
certiﬁcate issued by CA, as shown in Fig. 4. The private key
in the identity is used for signing the new transactions. Specif-
ically, Elliptic Curve Digital Signature Algorithm (ECDSA) is
a digital signature algorithm is used in Hyperledger Fabric,
which is more adaptable in the context of IoT [31]. In fact,
ECDSA brings many advantages over conventional signature
algorithms such as RSA regarding signature times and key
sizes, while achieving the same strength.

Identity ={X509Certiﬁcate, PrivateKey, MSPID}

Given a key pair of the private key Kpr and the public key
Kpu, where Kpu=G*Kpr and G is a point on the elliptic curve E,
ECDSA uses a random number r to improve the security of the
signature. A random number r is created before encrypting the

JOURNAL OF LATEX CLASS FILES, AUGUST 2021

7

Fig. 3. Proposed Blockchain-based Access Control for SDN-enabled networks: B-DAC system

additional ﬁelds in their proﬁles. There is a ﬁeld called role
to store their role assigned by the system.

To enable the trust establishment, B-DAC framework eval-
uates the trustworthiness of applications in a speciﬁc network,
relying on their behaviors. In our design, along with basic
necessary information for application authentication, we also
declare an additional ﬁeld in the proﬁle of an application,
called Trust Index. It is used to reﬂect the well-behaved level
of a speciﬁc application and determine whether the SDN
controllers should trust or deny its further actions. The value
of Trust Index will be decreased in case of overprivileged
attempts or conﬂicts in ﬂow rules installation from OpenFlow
applications.

Note that, Participant module manages all the participants in
the blockchain. The asset structures of OpenFlow applications
and SDN controller in B-DAC are depicted in Fig. 5.

2) Main functional components in B-DAC: To support the
operation of authentication, we use a token to only allow reg-
istered applications to interact with the system. These tokens
are created and managed by the Token module of the system.
In addition, the authorization function requires pre-deﬁned
permissions to check whether the action of the application is

Fig. 5. The structure of main assets in B-DAC

Fig. 4. The wallet structure of participants with X509 certiﬁcates issued by
Certiﬁcate Authority (CA)

plaintext M. The ECDSA scheme of performing private key
signature follows the order as in (1):

φ = r ∗ G(x, y)

h = Hash(M )

s =

(h + Kpr ∗ x)
r

(1)

Commit: P eerN ode ← {M, (φ, s)}

Afterward, the peer nodes verify the signature (φ, s) with

the public key Kpu as in (2):

h = Hash(M )

ψ =

(h ∗ G + x ∗ Kpu)
s
Verify: ψ == φ

(2)

Because the main goal is to protect the communication
between the controller and OpenFlow applications, these two
components are the main assets in our Blockchain-based
is identiﬁed by two ﬁelds of id
system. Each participant
and name. Moreover, participants which are applications have

JOURNAL OF LATEX CLASS FILES, AUGUST 2021

8

TABLE I
THE STRUCTURE OF TRANSACTIONS IN B-DAC

Transaction Type
addApplication
updateApplication
updateAppRole

updateAppTrustIndex

removeApplication
addController
updateController
removeControleler
createPermission
removePermission
createRole
updateRole
requestAppToken
issueToken

expireToken

Participant
Admin
Admin
Admin
Admin,
Controller
Admin
Admin
Admin
Admin
Admin
Admin
Admin
Admin
Application
Admin
Admin,
Controller

addLogEntry

Controller

Transaction Payload
id, name, trust-index, role-id
app-id, name
app-id, role-id

app-id, trust-index

app-id
id, name, permissions
controller-id, name, permissions
controller-id
id, name
permission-id
id, name, permissions
role-id, name, permissions
controller-id
token-id

token-id

resource-url, data, token-id,
http-method, permission-id,
app-id, controller-id,
action, message

over-privileged and needs to be noticed. Therefore, we design
Permission module to manage Permission objects. Both token
and permissions have their representation as important kinds
of blockchain asset, as illustrated in Fig. 5.

Besides, logging is the basic function of accounting, where
log entry is obtained and saved in a speciﬁc format. Our design
has the Log module taken this duty. Notably, log entries are
considered the main type of asset in the blockchain network.
All actions that intend to change the value of assets in the
distributed ledger (blockchain) are performed by transactions,
as given in Table I. Meanwhile, Fig. 6 presents the ﬂow
of a transaction from initiating state at clients/participants to
committing state in the blockchain.

3) RESTful API for AAA scheme: To enhance the ﬂexibility
and independence of our system on the operation of any
speciﬁc controller, we implement the AAA scheme outside the
controller. More speciﬁcs, B-DAC provides RESTful APIs for
controllers as well as OpenFlow applications to interact with it.

Fig. 6. The transaction ﬂow in Hyperledger Fabric-based B-DAC system

Participants (i.e., controller and applications) can send HTTP
requests to this REST API to query or update information
in the network system, respectively. Moreover, to ensure the
security of exchanged information, HTTPS is enabled for this
communication.

B. Policy deﬁnition

1) Request-based Permission principle: A controller pro-
vides APIs for accessing its resources at
the Northbound
interface of SDN. Each API is distinguished by a URI and
an HTTP method. The most well-known methods for HTTP
are POST, GET, PUT and DELETE that correspond to opera-
tions of creating, reading, updating, and deleting, respectively.
Thereby, URI is used to locate the network resource. A pair
of URI and HTTP method offers an action on a network
resource of the network. In fact, we deﬁne a set of permissions
corresponding to APIs provided by the controller. Detailed
information such as access token, the content type is carried
in the header of the HTTP request. For each request from
an application to a controller, parameters of URI and HTTP
method are fetched and processed by Permission Parser in
SDN controller to determine required permission for this
request.

2) Policy deﬁnition:

to protect network re-
In B-DAC,
sources from unauthorized requests, a policy is designed to
determine whether to approve or reject a REST API request
stemming from an OpenFlow application. In detail, we divide
the policy into two categories, including Role Policy and Trust
Policy.

First, the policies in the Role group are used to manage the
permitted behaviors of an application on speciﬁc resources.
They determine which REST API requests that one appli-
cation with an assigned role can perform. It means that if
an application is designated to ascertain a role group, it can
send commands and receive response information from the
controller. In addition, each application role has a priority to
control the WRITE actions on its data from other applications.
Therein, the application with lower priority cannot update or
delete data in the network written by the higher one. To achieve
this goal, a role-based access control (RBAC) model is chosen
to assign permissions to applications. It is a common approach
that helps to control rights more effectively based on each role
of the authorized subject. Access can and should be granted
on a need-to-know basis.

With hundreds or thousands of applications, security is more
easily maintained by restricting unnecessary access to sensi-
tive information based on each application’s established role
within the network. Consequently, administrators can promptly
update permissions for multiple applications by changing
permissions of a speciﬁc role. To start with, administrators
deﬁne permissions based on APIs provided by the controller.
After that, they create roles in which pertinent permissions are
inserted (createRole transaction). Eventually, an appropriate
role is assigned to an OF application for consuming network
resources. In the proﬁle of each application, there is a role
property, called role-id regarding its functions. To grant a set
of permissions for a speciﬁc application, administrators create

JOURNAL OF LATEX CLASS FILES, AUGUST 2021

9

TABLE II
A SAMPLE LIST OF AVAILABLE RESOURCES AND TRUST THRESHOLD OF
CORRESPONDING PERMISSION

TABLE III
ACL SAMPLES FOR POLICY DEFINITION IN B-DAC

Resource object
host
switch
link
port
ﬂowmod
group
vlan
statistics
application
controller

Default threshold of Trust
THRE 1
THRE 2
THRE 3
THRE 4
THRE 5
THRE 6
THRE 7
THRE 8
THRE 9
THRE 10

Permission ID
p1,
p2, p3
p4, p5
p6
p7
p8, p9
p10, p11
p12, p13, p15
p14
p16, etc.

an addApplication transaction to add the role with role-id to
their proﬁle. Also, administrators can utilize updateAppRole
transaction in B-DAC to change the role of an application.

Meanwhile, the Trust Policy triggers the event of revocation
of active permission in the application. In fact, each permission
is grouped by the type of resources. By default, each group
has a minimum value of trustworthiness to allow an application
to utilize. This value can be changed for the different levels
of security by the administrator. When the trustworthiness in
the application proﬁle is below the minimum threshold of the
relevant resource object, all issued permissions regarding this
object are disabled on this application. To have a comprehen-
sive understanding, a sample of Trust Policy is depicted in
TABLE II. Note that, each threshold shown in the table is
not arranged in any speciﬁc order.

As to policy generation, the network administrator is ﬁrst
offered a full description of API requests according to critical
resources. Subsequently, a list of permissions is created for
all requests to control their resources. After that, relying on
the security requirements, the network administrator deﬁnes
ACL (access control list) to enforce the ﬁne-grained security
policy on the requests. Particularly, there are ACL deﬁnitions
limiting participants on accessing B-DAC assets. For instance,
all applications are prohibited to change their permissions
or insert a new role in the network system without
the
administrator’s acceptance. app X with role P can query the
information about app Z but cannot create a link. Whereas
app Y with role Q can enable the ﬁrewall in the speciﬁc
network, etc. When an application joins the network,
the
administrator only needs to designate this application with the
corresponding role (new or existing). Then, this application
must comply with these policies, otherwise, it is rejected or
blocked for further requests. TABLE III shows the sample
ACL list which is deﬁned by the administrator. It is notable
that there is always a DENY ALL rule at the end of the ACL.

C. Detailed scheme of AAA

1) Authentication: The authentication relies on a module
called Authentication module on the B-DAC system. The
responsibility of this module is to verify the identity of
applications or controllers in the system using their wallets.
Our system uses the certiﬁcate-based authentication scheme,
with certiﬁcates consisting of identity information instead of

Participant
Operation
Resource
Condition
Action

Description

Participant
Operation
Resource
Condition
Action

Description

Participant
Operation
Resource
Condition
Action
Description
Participant
Operation
Resource
Condition
Action

Description

Participant
Operation
Resource
Condition
Action

Description

Participant
Operation
Resource
Condition
Action

Description

Network Administrator
ALL
ALL
None
ALLOW
Allow Network Administrator to perform all
operations (CREATE, READ, UPDATE, DELETE)
on all resources.
Application (p)
READ
Application (r)
p.id == r.id
ALLOW
The application is only allowed to read its
information by itself.
Application
CREATE
Token
None
ALLOW
Allows an application to create new tokens.
Application (p)
READ
Token (r)
r.application.id == p.id
ALLOW
The application is only allowed to read the tokens
created by it.
Controller (p)
READ
Controller (r)
r.id == p.id
READ
The controller is only allowed to read its
information by itself.
Controller
CREATE
verifyRequest
None
ALLOW
Allow Permission Parser of the controller to send
requests to verify permissions to the system.

traditional username-password pairs. Therefore, a Certiﬁcate
Authority (CA) is required to support this function.

In the context of B-DAC model, there are two participants
that need to be authenticated, namely applications and con-
trollers when utilizing SDN resources. It is helpful to resolve
the spooﬁng problem of SDN applications and controllers.

a) Authenticate to B-DAC’s REST API: Because all
interaction with B-DAC system is via its REST API, every
participant ﬁrst needs to authenticate to this API before any
further actions. We use JSON Web Token (JWT) [53] for
this purpose. Based on the information of requesting user and
secret key, B-DAC returns a corresponding access token to
authenticate with the B-DAC REST API.

However, after successfully accessing the REST API, par-
ticipants are still required to upload their identity cards (ac-
cording to wallets) to B-DAC system. This card is then used
to authenticate with the Blockchain and sign transactions,
as depicted in Fig. 4 above. The wallet address enables the
application authentication: an unknown address indicates that
the application is not registered to interact with B-DAC and

JOURNAL OF LATEX CLASS FILES, AUGUST 2021

10

the controller.

In short, all REST API requests in B-DAC are checked
to conﬁrm a valid participant by the JWT access token and
identity card. Otherwise, it rejects the request.

b) Authenticate OpenFlow application: Once an appli-
cation wants to connect to a controller, an additional token
provided by the B-DAC system is required. This token is a
representative of access requests from a speciﬁc application
to a controller; hence, it contains information about these two
objects. This token can have one of three statuses, which are
NEW, ISSUED and EXPIRED. Only ISSUED tokens can be
used in the AAA scheme, others require further actions from
the network administrator to be useable.

To get its token, the application must specify in detail which
controller that it intends to connect to and send a request
to B-DAC REST API. Speciﬁcally, such input parameters
are structured in a transaction proposal (requestAppToken
transaction in TABLE I) to be processed by peer nodes in the
blockchain network. The participant’s cryptography credential
(private key) is used to produce a unique signature for this
transaction proposal.

By comparing the information in the incoming request and
the endorsement policy in the blockchain network, B-DAC
promptly decides on releasing a token or not. A token request
is valid if: (1) it
is sent from an application, (2) it has
the information about the requested controller. If everything
is valid, B-DAC creates a NEW-state token including the
information about the corresponding application and controller
as well as its creation time. Then, this token is sent back
to the application as a response. However, the NEW token
needs to wait for further consideration of the administrator to
be released as ISSUED one and becomes ready to use, then.
Actions of network administrators like changing a token status
are performed by Hyperledger Fabric’s chaincode execution
with their signatures.

More importantly, the application must integrate this token
to every later request to the controller as proof of its authen-
ticated state. The main steps of the authentication scheme are
illustrated in Algorithm 1.

Created tokens are saved in Token Asset of the Blockchain
network and available for later access. All token-related oper-
ations of the system are processed by the Token module.

2) Authorization: The authorization operations are applied
to check whether an application has enough permission to
request a speciﬁc SDN resource or perform an action on
the network. Upon obtaining proper tokens, an application
can interact with the controller and send requests as normal.
Later, the authorization and accounting processes are indeed
communications between only the controller and B-DAC sys-
tem using tokens, which are transparent to applications. The
overall process of fetching permissions to authorize application
requests is shown in Algorithm 2.

B-DAC has the Permission Parser and Authorization module
to provide permission-related functions. We develop Permis-
sion Parser located on the SDN controller to interpret incoming
requests for further veriﬁcation in B-DAC system. The built-in
Permission Parser module is used to parse permissions from
the URL in the request. Speciﬁcally, the parsing process tries

Algorithm 1 Performing API Authentication scheme
Input:

controller: SDN controller,
app: application,
bdac: B-DAC database
Output: ACCEPT/DENY

1: approved ← false
2: /* ﬁrst check REST API authentication of B-DAC
3: with JWT access token and identity card */
4: if app.JWTtoken && app.identity exists in B-DAC then
5:
6:
7:
8:
9:

token ← bdac.getToken(app, controller)
/* then checking the app-controller authentication */
if token exists then

switch token.status do

10:
11:

12:
13:

case NEW
case EXPIRED

assert(approved ← false)

case ISSUED

assert(approved ← true)

end if

14:
15: end if
16: if approved == true then
17:
18: end if
19: return DENY

return ACCEPT

Algorithm 2 Performing Authorization process
Input:

bdac: B-DAC database
permission: parsed permission,
app: OpenFlow application,
app permissions: permissions of application in B-DAC

Output: ACCEPT/DENY

1: /* B-DAC received a verifying request from controller that

contains Input */

2: if bdac.getParticipant().type is CONTROLLER &&
3:
4:
5:

bdac.getParticipant() == app.token.getController() &&
app.token.status == ISSUED &&
permission is in app permissions &&
app.trust index ≥ permission.trustThreshold then
return ACCEPT

app.trust index decrease by 1

6:
7:
8: else
9:
10: end if

to map the API in the incoming request to corresponding
permissions. Then, the request information consisting of the
URL, data, HTTP method, token and parsed permissions is
sent from the controller to B-DAC.

Data sent from Permission Parser then is processed by the
Authorization module in B-DAC. The permission granted to
the application (stored in B-DAC database) is compared to the
parsed information from the requested API. So, a request must
satisfy all following criteria to be considered as a valid one: (1)
it is sent from a valid controller, (2) the source controller must
be the same as the controller mentioned in the access token,

JOURNAL OF LATEX CLASS FILES, AUGUST 2021

11

TABLE IV
THE STRUCTURE OF LOG ENTRY FOR THE REQUEST OF PERMISSION
VERIFICATION

Log ﬁeld
id
created time
url
data
token id
http method
permission id
application id
controller id
action
message

Description
Identiﬁcation of entry log
Date time of entry creation
URL of request sent by application
Payload of request
Token
HTTP method used in the request
Permission of application
Identiﬁcation of application
Identiﬁcation of controller
DENY or ACCEPT result of request
Notiﬁcation of system

(3) the application in access token must be valid and exists,
(4) the parsed permissions must be a subset of the granted
permissions of the application, (5) the Trust Index of requested
application is higher than the trust threshold of permission.
The description of Trust Index is discussed in more details
in Section IV-E below. Consequently, an ACCEPT result is
responded to the controller when all the above criteria are met,
otherwise, a DENY one is returned.

When it comes to the trustworthiness of application, we
inherit the trust-based management scheme from [11] to con-
sider the trust of B-DAC system on an application. Based on
the permission checking process, any over-privileged action of
application is punished by decreasing its Trust Index through
updateAppTrustIndex transaction. This means that applications
with well-behaviors remain their Trust Index in high value
from the B-DAC. When this ﬁeld is lower than a speciﬁc
safe value, the application is automatically considered as an
untrusted one. Depending on the security policy deﬁned by
the administrator, untrusted applications can be blocked or
disabled.

3) Accounting: All operations of B-DAC system, as well as
the requests sent from applications to controllers, are recorded
in log entries and transactions in the Blockchain network
(addLogEntry transaction). Each log entry contains the essen-
tial information about the request from an application, which
is managed and reviewed via Log module. The structure of log
entry is illustrated in TABLE IV. This is a standard form for
each request of verifying permission. Obviously, it is crucial
to guarantee the integrity of audit logs for investigation in
case of unexpected network failures. With the aforementioned
features, blockchain is the relevant approach for this problem.

D. Flow rule conﬂict detector

In addition to application authentication and authorization
tasks, our system also aims to prevent compromised applica-
tions from misusing ﬂow rules to affect the network. Moreover,
it can control many conﬂicting rules in the OpenFlow switches
to avoid the issue of ﬂow redundancy. A module, named Flow
rule conﬂict detector module, is built in the controller to meet
these requirements.

In fact, not every request can cause a ﬂow conﬂict problem,
this issue only occurs when there are ﬂow rule modiﬁcations
in ﬂow tables. Hence, only requests from an application that

Fig. 7. Scheme of ﬂow rule conﬂict detection on target ﬂow f and fi saved
in network ﬂow rules database.

lead to this change need to be considered by our module.
Otherwise, we let other requests be processed as usual without
any doubt about malicious ﬂow rules. To distinguish these
types of requests, we use the assumption that applications
attempt to use supported RESTful APIs from the controller
to perform their job and interact with the SDN network.
Then, our conﬂict detection module bases on APIs and their
functions to ﬁgure out which request we should take care of.
In other words, only RESTful APIs used to modify ﬂow tables
and their requests are analyzed in this module. For example,
we have considered ACL and Firewall APIs in Floodlight
controller in this work. These APIs have the ﬂow rule deﬁned
in their formats, sent in the request body. Our module attempts
to intercept and analyze these rules to look for any conﬂicts.

Once capturing a request to such APIs, this module extracts
multiple ﬁelds to reform a ﬂow rule. Later, this rule is checked
against the pre-deﬁned conﬂict policy with two steps:

1) Verify the validation of ﬂow rule: this step extracts all
parameters and their values from the ﬂow rule. Then,
these parameters are checked if they are supported as
well as their value does not violate the restriction like
range, maximum value, etc. The lists and ranges of
parameters may be different from an API to others,
which have their methods of deﬁning their rules before
converting to the actual ﬂow rule entries.

2) Detect and classify ﬂow rule conﬂiction: this step inher-
its the method of detecting ﬂow rule conﬂiction from
[51]. The detector compares a target ﬂow rule to a saved
conﬂict-free ﬂow rules database to ﬁgure out if any con-
ﬂiction exists. Not all but only 4 ﬁelds are considered,
which are protocol, dst ip, priority and action in their
order of analyzing, shown in Fig. 7. With each pair of
rules, those ﬁelds are veriﬁed according to the detecting
algorithm of [51], which output is the corresponding
conﬂiction type. This work also deﬁnes 5 conﬂict types
of Generalization, Redundancy, Correlation, Shadowing
and Overlap. Once a conﬂict is detected, our system
simply denies this ﬂow rule with CONFLICTED signal.

JOURNAL OF LATEX CLASS FILES, AUGUST 2021

12

Algorithm 3 Dynamically monitoring application’s behavior
with Trust Index
Input:

request: a REST API request,
trust: Trust Index of application,
proﬁle: application permission proﬁle,
policy: permission policy on resource object,
ﬂows: ﬂow rules set
Output: ACCEPT/DENY

/* B-DAC received a verifying request from controller that
contains Input */
if request unmatches proﬁle (cid:107) request conﬂicts ﬂows then

trust ← trust -1
object ← request.toResourceObject

end if
if trust < policy.trustThreshold(object) then
proﬁle.permission(request) ← BLOCK
return DENY

end if
return ACCEPT

E. Managing the Trust Index of applications in B-DAC system

In compliance with the security policy, each permission in
our system has the corresponding threshold of Trust Index to
allow an application to utilize. So, one application can only
activate any permission in its proﬁle when the Trust Index is
higher than a pre-deﬁned threshold. This allows our system to
enforce the policy of permission adjustment at the run-time.
Accordingly, B-DAC can automatically downgrade the appli-
cation permission scope based on its behaviors. The overall
process of Trust Index management for dynamically monitor-
ing application is formalized in Algorithm 3. For instance,
an application app1 by default has the value of 100 points
Trust Index in our design. B-DAC then grants three different
permissions to this application, called p1, p2 and p3 with the
Trust Index threshold of 80, 75 and 70, respectively. Whenever
app1 sends an over-privileged or unauthorized request, B-
DAC decreases the value of the Trust Index by one point.
Speciﬁcally, B-DAC automatically executes the Hyperledger
chaincode to make the updateAppTrustIndex transaction for
downgrading the trustworthiness of the OpenFlow application.
Suppose that the Trust Index of app1 drops under the thresh-
old of p1, i.e. 80 points, our mechanism triggers the partial
suspension of granted actions by disabling this permission
of the application. Meanwhile, two other permissions p2 and
p3 still allow app1 to send further requests not relating to
p1. Thus, if an application’s request violates one or more
policies in B-DAC, it may be rejected to be processed by
the controller. In this case, there are only administrators who
have the capability to recover the trust level from the SDN
controller. This action is to help this application properly
perform network functions again. All logs are recorded with
a timestamp for audit trail in the future.

F. Cache-based performance enhancement in B-DAC system

Most of the reading requests, appended with GET method,
are only used to query speciﬁc information from the SDN

network. These requests seem not to make any change in the
conﬁguration or data like writing requests (use other methods
such as POST, PUT or DELETE). Normally, reading requests
are frequently used in applications without signiﬁcant impact
on the network directly. For instance,
typical monitoring
applications usually send only most of the requests with
reading permission. Therefore, we use a caching mechanism
on controllers to temporarily save the latest response of B-
DAC, which is ACCEPT or DENY signal, for a speciﬁc GET
request. For more details, with a new GET request whose
signal is not available in the cache, the controller sends a
verifying request to B-DAC. Then, a corresponding response
is sent back and cached in the controller. In the other case, if
the signal is available with ACCEPT, the controller responds
with the queried data to the application, otherwise, it rejects the
request. After that, for all API requests on the same resource,
the controller uses the signal in the cache to send a response
to the application. Parallelly, to update the latest signal in
the cache, another veriﬁcation request is dispatched from the
controller to B-DAC.

V. THE WORKFLOW OF B-DAC FOR PROCESSING
OPENFLOW APPLICATION REQUESTS

A. Workﬂow of processing a request sample

The workﬂow of processing a request from an OpenFlow
application to SDN controller is illustrated in Fig. 3, consisting
of 9 steps. Note that, this process is taken place upon both
application and controller have got authenticated to B-DAC
REST API by JWT access token and their identity cards
uploaded.

1) The new application sends a request for token issuance
to B-DAC, which speciﬁes the controller that wants to
connect to.

2) B-DAC authenticates the application and veriﬁes the
validity of the request. The valid request that satisﬁes
all requirements mentioned in Section IV-C1b allows
B-DAC to create a token with NEW status. Then, this
token is sent back to the application.

3) Subsequently, the network administrator must conduct
a manual task of verifying and assigning the ISSUED
status to the token if everything is valid. From now, the
ISSUED token can be used for the application operation,
otherwise, the application with the NEW token is not
allowed to access the SDN controller.

4) The application dispatches all later requests with the
encapsulated token to the SDN controller to consume
the network resource.

5) After receiving a request from an application, Permission
Parser in the controller extract the URL, data, HTTP
method, and token to determine the corresponding per-
mission of that application. Next, such data values are
sent in the form of a veriﬁcation request to the B-
DAC system. However, to speed up the response time
of B-DAC, we utilize the caching strategy for requests
which had been processed before. While a new request
is forwarded to the B-DAC system for authentication,

JOURNAL OF LATEX CLASS FILES, AUGUST 2021

13

the cached information helps the SDN controller imme-
diately respond to the request of application. Note that,
even the response of a request is available to be used,
a veriﬁcation request is still sent to B-DAC. This is not
only for accounting, but also for updating the cached
information and the Trust Index correspondingly.

6) Once receiving a veriﬁcation request from a controller,
B-DAC ﬁrst checks the credential of this controller,
then veriﬁes the validity of the request. When all con-
ditions listed in Section IV-C2 are met, the request
is considered as valid and an ACCEPT response is
returned to the controller, otherwise, DENY one. Any
request with DENY result will trigger to update the Trust
Index of the requesting application, according to the
mechanism aforementioned in Section IV-E. Moreover,
the Accounting module creates a log entry in Log Asset
for veriﬁcation requests that it receives.

7) The ACCEPT response from B-DAC indicates that the
controller can proceed the request of an OpenFlow
application. Otherwise, it rejects this one.

8) Flow rule conﬂiction detector module is used to avoid
executing API requests that cause a potential conﬂict
when installing a new ﬂow rule in the SDN. This module
checks the possibility of conﬂict between the intended
rule and saved ones. Whether any conﬂict exists, our
module prevents the created ﬂow rule of the request from
being sent to devices in the data plane.

9) Requests that have passed all assessment of B-DAC’s
modules can receive their corresponding requested in-
formation regarding ﬂow rules installation or statistics
retrieval on the data plane.

B. Security characteristics analysis of B-DAC design

According to the abovementioned design of B-DAC system,
it enhances the security of the Northbound interface in SDN
by managing OpenFlow applications. It is useful to restrict
malicious or unauthorized requests in consuming network
resources provided by the controller. In general, our system
ensures the following security characteristics:

1) Immutability: By using blockchain technology to man-
age data, the database of B-DAC cannot be altered or deleted
illegally. All transactions containing sensitive data must be
validated by all veriﬁcation nodes before they can be added
to the block. Once this block is saved into the Blockchain
network, no further modiﬁcation or removal can be performed.
2) Decentralization: The blockchain network is maintained
by a group of nodes rather than a single machine. All these
nodes store a replication of the same database, called the
digital ledger. Any new coming node is required to clone and
store this ledger to be able to join the Blockchain network. A
new block added to the ledger is broadcasted to the whole
in their storage.
network so that all nodes can record it
Therefore, the removal of any node does not affect the database
stored in the remaining network. This makes the system
become decentralized and more available.

3) Authentication: All participants, including SDN con-
trollers and applications, must be authenticated when they

want
to be involved in B-DAC system. Each of them is
offered with an identity card consisting of a private key for
authenticating to the B-DAC system and signing transactions.
So, only legitimate participants can join and consume network
resources.

4) Authorization: Each application has its own granted per-
missions for accessing controllers. B-DAC offers each applica-
tion with a corresponding token which contains its privileges
for communication with a speciﬁc controller. Every request
sent from the application to the controller must be integrated
with this token. Then, B-DAC veriﬁes the permission of the
application to conﬁrm whether the controller should respond
or not.

5) Accounting: Since the accounting scheme should con-
sider overcoming the lack of integrity in captured artifacts,
there is a need of providing a strong audit trail. So, each
activity belonging to third-party apps is stored along with its
hash value and timestamp in the form of log entry in B-DAC.
The network administrator and participants can access this
information to use in authorization control, security analysis
or digital forensics. Due to being saved in the Blockchain
network,
this information is impossible to be removed or
modiﬁed to ensure the reliability of our system.

6) Flow rules conﬂicts prevention: In addition to managing
the operation of OpenFlow applications, our design intends to
prevent any ﬂow conﬂicts. Our module analyzes upcoming
ﬂow rules insertion requests with installed ﬂows in the data
plane to detect rule conﬂicts. This feature brings the capability
of preventing numerous undesired ﬂow rules to drain network
resources. Moreover, a malicious application cannot insert any
malformed rule to ensure the legality and atomicity of creating
ﬂow rules.

7) Fine-grained control: All registered applications are laid
under a strict observation by B-DAC. When one application
tries to consume the network resources, B-DAC checks the
pre-deﬁned behaviors of the application via request’s param-
eters to determine that this application can perform in the
network. The application management system does not allow
an application to obtain any resources without any limitation.
When ﬂow rules are created or updated, each application has
a different range of priority in ﬂow tables. Additionally, each
application has distinguished permissions corresponding to the
roles assigned by the administrator. This security policy en-
forces the functional hierarchy of applications in the network.

8) Trust level management: By behavior-oriented control,
B-DAC framework automatically responds to a rogue Open-
Flow application basing on a blockchain-based proﬁle when
attackers use compromised applications to scan or probe
network resources. More speciﬁcally, the trustworthiness of
an application can be adjusted dynamically according to
their actions with controllers. Taking a compromised SDN
application as an indication,
its behaviors may harm the
network system and should be blocked automatically after
several illegal accesses. If the value of Trust Index in the
application proﬁle reduces notably, some issued permissions
are suspended or revoked to avoid network disruption.

JOURNAL OF LATEX CLASS FILES, AUGUST 2021

14

VI. IMPLEMENTATION AND EVALUATION

We implement the design of B-DAC with the following
steps: deploying a Blockchain network and chaincode (smart
contract) programming for B-DAC, developing plug-in mod-
ules in controller including Permission Parser and Flow rule
conﬂict detector, for SDN network.

A. Building Blockchain network and deploying B-DAC scheme

Our system uses Hyperledger Fabric (version 1.4) [23] as
the Blockchain platform for our implementation and evalua-
tion, since it provides the low-cost blockchain approach with
privacy-oriented, faster and scalable characteristics. Hyper-
ledger Fabric is a permissioned blockchain allowing to control
user access such as network joining, transaction adding or
reading, via verifying permission. Moreover, this framework
uses the CFT (Crash Fault Tolerant) as a consensus algo-
rithm to guarantee that the system can still correctly reach
consensus if nodes fail. Note that, CFT algorithm is cost-
free, which becomes its advantage over other counterparts like
PoW (Proof of Work) or PoS (Proof of Stake) [54]. Though
BFT (Byzantine Fault Tolerance) is resilient against systems
containing malicious actors, it is more complex and expensive
than CFT. The CFT consensus algorithm is used to order
services implemented with Kafka [55] and Zookeeper [56].

The Blockchain network of B-DAC is deployed on a
hardware conﬁguration of 8 cores CPU and 32GB of RAM.
This network consists of 17 container-based nodes which are
1 certiﬁcate authority, 3 orderers, 3 peers, 3 nodes as the
database of peers, 3 nodes for deploying Zookeeper and 4
nodes for Kafka.

Concerning implementation, the enterprise can deploy the
blockchain platform relying on the pre-deﬁned architectural
design such as the number of peer nodes, orderer nodes, etc.
It is also true for a group of enterprises. In the context of
B-DAC, the enterprise is the organization that operates the
SDN-enabled network and needs to set up the AAA scheme
in the blockchain infrastructure. They become the proprietors
(stakeholders) of the blockchain network who can validate
transactions. After a blockchain network is launched for the
ﬁrst time, its owners (stakeholders) can invite more business
partners to co-own the blockchain network. This is done by
assigning them validating nodes. Note that, all existing owners
need to approve this joining request for any new stakeholder.
Then, the new ones can validate the transaction originating
from in their business operation or management. Clearly,
some different permissioned blockchains under the umbrella
of Hyperledger like Hyperledger Fabric are trying to pro-
vide interoperability solutions to ensure maximum scalability
and adaptability for encouraging intercommunication among
different organizations in a speciﬁc ﬁeld, e.g, networking
management services in this paper.

After building the blockchain platform with Hyperledger
Fabric, we use Hyperledger Composer [60] to deﬁne the
assets and participants of B-DAC. Hyperledger Composer is
an extensive, open development toolset and framework which
simpliﬁes the process of creating smart contracts (chaincodes)

Fig. 8. Experimental network topology with one controller

on top of Hyperledger Fabric. Speciﬁcally, we write chain-
codes corresponding to the payload declaration of transactions
for participants or administrators to create or alter these assets
in the distributed ledger of Hyperledger Fabric. Also, each par-
ticipant is granted permissions (CREATE, READ, UPDATE,
DELETE) to manipulate on the property of assets by rules
in Access Control List (ACL). Subsequently, administrators
create a digital identity for each participant in Hyperledger
Fabric and save it in a wallet. It is used for participants to
make blockchain transactions later.

B. SDN network design

The controller of our SDN network is a Floodlight controller
[57] run on a computer with 4 cores CPU and 4GB RAM. Note
that, in our experiment, we implement some network applica-
tions by sending requests to the SDN controller to consume
network resources through REST APIs of the controller.

Later, Mininet [58] is used to simulate an SDN infras-
tructure layer managed by the above controller. This tool is
deployed in another machine having 2 cores CPU and 4GB
RAM. This network is a linear-type one consisting of 16
switches and 32 connected hosts, as depicted in Fig. 8.

In addition, we also develop plug-in modules in Floodlight
controller including Permission Parser and Flow rule conﬂict
detector, for building a B-DAC-enabled SDN controller.

C. Evaluation

We evaluate the B-DAC on two criteria of performance ef-
fectiveness and security assurance for communication between
applications and SDN controller at Northbound interface.
In our experiment, applications send REST requests to the
Floodlight controller through REST API. Following that, B-
DAC intercepts these requests to perform access control or
enforce security policies at the Northbound. We examine the
veriﬁcation results of those requests in the controller and
applications to demonstrate the feature and performance of
the proposed system.

1) Blockchain transaction performance: Firstly, the perfor-
mance of Blockchain network is analyzed using Hyperledger
Caliper framework [59]. This blockchain benchmark tool
provides the capability of calculating multiple performance

JOURNAL OF LATEX CLASS FILES, AUGUST 2021

15

metrics such as the number of transactions per second, mem-
ory, CPU usage as well as incoming and outgoing trafﬁc,
etc. Note that, this tool creates transactions directly according
to designed assets in Blockchain network without performing
the functionality of B-DAC REST API. TABLE V and TA-
BLE VI show transaction delay and consumed resources of
our Blockchain nodes. The results are monitored when our
system creates and sends 1000 transactions to the blockchain
network. Depending on the number of exchange messages that
needs to be processed and conﬁrmed from different parties
within the given period, the transaction speed may ﬂuctuate.
Besides, we also consider the response time of our B-DAC
system to application requests. The expected time includes
authentication, authorization and accounting process when
receiving requests from an application. This processing speed
may also vary due to blockchain network congestion at the
given time when making the transaction. We perform the
experiments by sending 1000 requests and computing the
average response time, shown in TABLE VII. Also noted in
this table, the caching mechanism mentioned in Section IV-F
is also proved to be effective in reducing the response time
approximately 40 times than usual.

To evaluate the performance of B-DAC with other access
control schemes for Northbound interface, we compare it
to SEAPP approach [36], a secure application management
framework based on REST API access control in the SDN
Northbound interface. It is independent with SDN controller
but prone to the Single Point of Failure.

In comparison with SEAPP [36], our work has an average
latency of 15.6 milliseconds (caching enabled mode) which
is nearly 2 times higher than the delay of 7.9 milliseconds in

TABLE V
DELAY TIME IN CREATING BLOCKCHAIN TRANSACTION

Number of
transactions
1000

Maximum
delay (s)
0.95

Minimum
delay (s)
0.31

Average
delay (s)
0.39

TABLE VI
RESOURCE CONSUMING IN THE BLOCKCHAIN NETWORK

Node

peer0
peer1
peer2
orderer0
orderer1
orderer2
kafka0
kafka1
kafka2
kafka3
couchdb0
couchdb1
couchdb2
zookeeper0
zookeeper1
zookeeper2
ca

Mem
(MB)

219.1
281.7
339.8
19
17.2
17
413.9
375
297.3
285.8
164.8
162.9
162.4
27.5
26.6
28
7.5

CPU
(%)

5.70
5.72
5.68
1.23
0.82
0.88
5.24
2.96
0.85
0.84
40.1
39.2
39.2
0.24
0.29
0.35
0.00

Input
trafﬁc
(MB)
34.2
34.0
34.0
20.1
11.4
11.7
12.5
2.7
0.046
0.045
10.9
10.9
10.9
0.22
0.29
0.26
0.002

Out
trafﬁc
(MB)
55.4
55.1
55.1
27.5
2.5
11.0
30.0
4.4
0.072
0.071
18.0
17.9
17.9
0.13
0.18
0.34
0

Disk
read
(MB)
0
0
0
0
0
0
0
0
0
0
2.5
1.8
1.4
0
0
0
0

Disk
write
(MB)
86.2
86.2
86.3
0
0
0
2.8
2.8
0
0
236.2
236.9
237
0
0
0
0

TABLE VII
COMPARISON OF B-DAC AND SEAPP APPROACH IN RESPONSE TIME TO
AN INCOMING REQUEST

Maximum (s) Minimum (s)

B-DAC - No caching
B-DAC - Caching
SEAPP approach [36]

1.03544
0.37706
≈ 0.009

0.40839
0.00674
≈ 0.004

Average (s)
0.45088
0.01566
≈ 0.0079

Fig. 9. Peer performance of B-DAC in scalability

Fig. 10. CPU usage of B-DAC in scalability

SEAPP. Notably, the SEAPP and B-DAC are both deployed on
the same hardware conﬁguration with 32 GB RAM. Although
there is an increase in response time stemming from the
blockchain process, the response time of B-DAC is acceptable
for tackling the Single Point of Failure issue of SEAPP system.
The other metrics for evaluating access control scheme, such
as CPU/RAM usage of blockchain cluster is much different
meaning from a centralized approach like SEAPP; thus we
cannot compare these aspects. Nevertheless, we also perform
experiments on the scalability of blockchain to measure B-
DAC performance below.

To explore the scalability of B-DAC, we additionally deploy
and test B-DAC in other four cases including 3 peers, 5
peers, 6 peers, and 10 peers on the same hardware with 8
cores CPU and 32 GB RAM. The scalability performance
is measured by sending 1000 requests to the system. The
memory consumption and in-out trafﬁc of one peer (peer0)
are illustrated in Fig. 9. Also, the CPU usage of peer0 is

JOURNAL OF LATEX CLASS FILES, AUGUST 2021

16

in Section IV-C1a, an access token and an identity card
(wallet) of the application are mandatory for this task. If one
of these objects is missing, the authentication is failed. We
use MON APP to query an API called system ping to get the
information about this application. We monitor the response of
B-DAC for MON APP in different cases where the application
has not yet authenticated, completed the partial or adequate
authentication process. TABLE XI describes responses of B-
DAC when MON APP communicates with its REST API in
these cases.

b) Scenario 2: Authentication between applications and
controller:
In B-DAC design, an application needs to uti-
lize the issued app-controller token by administrators when
communicating with the controller. In this case, we intend to
leverage MON APP to create a new ACL rule in Floodlight
controller by sending a request to URI /wm/acl/rules/json.
The required permission for this API is FL POST ADD ACL,
which has been granted to MON APP. Therefore, the request
should be successfully executed. However, we test the response
of B-DAC to MON APP in the two cases. The ﬁrst one is an
application that does not have a valid app-controller token,
while the second case is this app with got issued token from
the system. In the point of the controller, we observe results
from B-DAC according to these cases, respectively. B-DAC
rejects a request if the token is NULL or within the status of
NEW and EXPIRED, otherwise, the request is processed as
usual after receiving an ACCEPT response.

c) Scenario 3: Granting permission for application by B-
DAC’s Access Control : A set of permissions is only assigned
to an application by administrators in B-DAC. Speciﬁcally, the

TABLE IX
GRANTED PERMISSION FOR OPENFLOW APPLICATIONS

Application

Tokens

MON APP
(appId: app1)

None

FW APP
(appId: app2)

MON FW APP
(appId: app3)

Access token
App-controller
token

Access token
App-controller
token

Granted permission
FL GET SWITCH JSON
FL GET DEVICE
FL GET SINGLE SWITCH
FL GET LINKS JSON
FL GET EXERNALLINK JSON
FL POST ADD ACL
FL GET FW RULES JSON
FL GET FW STATUS JSON
FL PUT ENABLE FIREWALL
FL PUT DISABLE FIREWALL
FL POST FIREWALL RULE
FL DELETE FIREWALL RULE

FL GET FW RULES JSON
FL GET FW STATUS JSON

TABLE X
A DATA SAMPLE OF VERIFICATION REQUEST FROM CONTROLLER TO
B-DAC

{
”$class”: ”org.blockas.verifyRequest.VerifyingRequest”,
”url”: ”/wm/core/switch/”,
”data”: ”[]”,
”tokenId”: ”pF9LIKdaNhpqSqfAncoQztEObssojZXenU1WqvlC. . . ”,
”httpMethod”: ”GET”,
”permissionId”:”FL GET SINGLE SWITCH”
}

Fig. 11. Latency of B-DAC in scalability

depicted in Fig. 10. The other peers share the same trend with
this one. Fig. 11 shows the latency in creating transactions of
B-DAC in 4 cases, proving that the scheme of decentralized
access control can be efﬁciently scaled when demands change
in the future.

2) Security impact of B-DAC to SDN: Regarding security
analysis, various security models like STRIDE, PASTA, Trike,
UMLSec, etc., can be applied to identify the security level
of a speciﬁc system, according to A. Chikhale et al. [61].
These models deﬁne a set of security aspects or characteristics
that a system must satisfy to be considered as being secured.
Among, STRIDE model [62] proposed by Microsoft, which is
abbreviated for six categories of threats, is considered as the
most compatible methodology for classifying security issues
for known and unknown attack types. In this work, we also
evaluate B-DAC based on the criteria of STRIDE via test
scenarios and function analysis. TABLE VIII summarizes
threats and security properties deﬁned in STRIDE and our
corresponding experiment scenario to conﬁrm it.

However, to have an intuitive understanding, we introduce
two typical applications called MON APP and FW APP to
perform experiments. The former one has not requested any
token from the B-DAC system. Meanwhile, the latter has
its JWT, and the issued application-controller access token
integrated into requests. Their pre-granted permission sets are
described in TABLE IX. These applications send requests to
the controller, then receive responses as shown in detail in the
following scenarios. Speciﬁcally, a sample of the data structure
for each veriﬁcation request is illustrated in TABLE X.

a) Scenario 1: Authentication to B-DAC: In this case,
we perform the authentication process of an application called
MON APP to the REST API of B-DAC. As mentioned before

TABLE VIII
THREATS IN STRIDE MODEL AND TESTING SCENARIOS

Property
Authentication
Integrity
Non-repudiation
Conﬁdentiality
Availability
Authorization

Threat
Spooﬁng
Tampering
Repudiation
Information Disclosure
Denial of Service
Elevation of Privilege

Scenarios
1, 2
3, 4
3, 4
1, 2, 3, 4
5
3, 4, 6

JOURNAL OF LATEX CLASS FILES, AUGUST 2021

17

TABLE XI
B-DAC REST API RESPONSES IN AUTHENTICATION CASES

TABLE XII
RESPONSES FROM B-DAC FOR APPLICATION ACCESS

Cases

Case 1

Case 2

Case 3

Description
MON APP has no access
token
MON APP completes 1 step
and receives access token from
B-DAC REST API
MON APP completes 2 steps
(1) Received access
token from B-DAC REST API
(2) Uploaded wallet address

B-DAC response
DENY
(Authorization required)

DENY
(Authorization required)

ACCEPT
(Return app information)

App
FW APP
MON FW APP

B-DAC response
DENY (Unauthorized)
ACCEPT (Firewall status is changed)

Fig. 14. Notiﬁcations from controller for ACL rule adding requests.

our design, each application cannot overdo the quota assigned
in its proﬁle. As a result, a request which belongs to an over-
using application is rejected immediately to further process
by B-DAC and SDN network. The mechanism of quota-
based resource allocation helps the controller preserve the
availability against torrential requests aiming to disrupt the
controller operation.

f) Scenario 6: Flow rules conﬂict prevention from autho-
rized application: To evaluate the Flow rule conﬂict detector
module of B-DAC, this scenario uses an application called
MON ACL APP, which has successfully passed the authenti-
cation and authorization phases. This application interacts with
the supported ACL API on Floodlight controller and allows
users to deﬁne access control rules that they want to apply to
the network. These rules are then used to create corresponding
ﬂow rules to install on SDN devices. We create and test rules in
both conﬂicted and normal cases to evaluate the effectiveness
of the conﬂict detecting algorithm. Conﬂiction in test rules is
ranged in the aforementioned ﬁve types.

Generally, there are six sub-scenarios in this evaluation,
including ﬁve different ones for each type of conﬂiction and
another case of adding conﬂict-free rules. In each sub-scenario,
at least two ACL-form deﬁned rules are sent to the controller
via the URL of ACL API, which is /wm/acl/rules/json. In
MON ACL APP application, the response of B-DAC for re-
quests of adding rule is also recorded. As shown in Fig. 14,
where the green label (the ﬁrst line) notiﬁes a successful one
and the red lines (the second line) are used to mention errors.
TABLE XIII lists rules used in each sub-scenario, and sum-
maries their main parameters which are the concern of conﬂict
detecting algorithm. The response, as well as the conﬂict
detection results of B-DAC, are also given correspondingly
in the last column.

3) Evaluating B-DAC-enabled controller overhead: To
evaluate the extra overhead of B-DAC enabled controller, we
consider the metrics of CPU and memory consumed when
performing a various number of application requests. Notably,
the experiment results in this section give a comparison of
original Floodlight and B-DAC-enabled Floodlight controller.
The overhead of SDN controller which integrates with B-DAC
consists of two tasks: the request processing on Floodlight
controller and blockchain transaction execution. Because the
processing delay overhead is affected by different response
results (ACCEPT or DENY), we set all API requests from
applications to be benign for ensuring the fairness of experi-

Fig. 12. Add new permission into an application via blockchain transaction.

Fig. 13. B-DAC declines a new permission insertion from application (app1).

application joining in the B-DAC is restricted with the policy
of read-only permission, whereas it is not permitted to upgrade
its privileges. Fig. 12 demonstrates a transaction structure
that MON APP (app1) is about to insert a new permission
FL GET LINKS JSON (belong to the role of monitoring)
into its proﬁle. But, B-DAC declines this action, as shown
in Fig. 13. On the contrary, the administrator can add new
permissions to this application.

d) Scenario 4: Application authorization using permis-
sions: This experiment performs a veriﬁcation of the au-
thorization when an application requires critical network re-
sources from the controller. The administrator uses a per-
mission called FL PUT ENABLE FIREWALL for turning on
and turning off the ﬁrewall
in the Floodlight controller.
FW APP and MON FW APP are used in this scenario, but
only FW APP is designated the relevant permission.

These applications attempt to enable the ﬁrewall by sending
requests to API /wm/ﬁrewall/module/enable/json. TABLE XII
shows the response of controller for each application. More-
over, B-DAC also provides the transaction removePermission
to delete the existing permission from application’s proﬁle.

e) Scenario 5: Resource starvation prevention: To guar-
antee the service quality and avoid resource exhaustion at the
controller, we deﬁne a limit of accessing rate to Northbound
API for all applications. Speciﬁcally, we set the limit rate to
1200 requests each 30 seconds for each application. This rate
is determined by management policy from the administrator. In

JOURNAL OF LATEX CLASS FILES, AUGUST 2021

18

TABLE XIII
SCENARIO AND RULE SAMPLES FOR EVALUATION OF CONFLICT DETECTION

Subscenario

S1

S2

S3

S4

S5

S6

Rule
r1
r2
r3
r4
r5
r6
r7
r8
r9
r10
r11
r12
13

Protocol
TCP
TCP
ICMP
ICMP
TCP
TCP
UDP
UDP
TCP
TCP
TCP
TCP
ICMP

Source
10.0.0.0/24
10.0.0.0/32
10.0.0.0/24
10.0.0.0/24
10.0.0.0/24
10.0.0.0/32
10.0.0.1/32
10.0.0.0/24
10.0.0.0/28
10.0.0.1/32
10.0.0.0/28
10.0.0.16/29
10.0.0.1/32

Destination
10.0.0.0/24
10.0.0.2/32
10.0.0.0/24
10.0.0.2/32
10.0.0.0/24
10.0.0.2/32
10.0.0.2/32
10.0.0.0/24
10.0.0.0/28
10.0.0.0/24
10.0.0.0/28
10.0.0.24/29
10.0.0.2/32

Priority
51
50
52
51
50
50
52
53
51
55
51
52
55

Action
ALLOW
ALLOW
ALLOW
DENY
ALLOW
DENY
ALLOW
DENY
DROP
DROP
DENY
ALLOW
DENY

B-DAC Response
SUCCESS
CONFLICT (Redundancy)
SUCCESS
CONFLICT (Shadowing)
SUCCESS
CONFLICT (Correlation)
SUCCESS
CONFLICT (Generalization)
SUCCESS
CONFLICT (Overlap)
SUCCESS
SUCCESS
SUCCESS

ments. This means that unauthorized requests will be promptly
rejected by B-DAC with low latency than that of benign
requests.

To start with, we perform total 1000 requests (reading
statistics of an OpenFlow switch from controller’s API) from
one application, called app0 to B-DAC-integrated controller.
The average response time is around 0.01735 seconds. Mean-
while, CPU consumption to process 1000 requests increases
by approximately 3.2% comparing to the background running
of the B-DAC-enabled Floodlight controller. In comparison to
the original Floodlight (2.4%), this is a slight growth because
B-DAC-enabled Floodlight must analyze permissions and wait
for the response from B-DAC. In another case, we perform
experiments with 6 applications (app0, app1, app2, app3,
app4, app5). Therein, each of them sends 500 requests to
produce 3000 requests in total to SDN controller. In a third
case, 6 applications above are used to send requests to a
controller with 1000 requests per application. As a result,
with a total of 6000 different requests processed, the average
response time slightly climbs to 0.02123 seconds and CPU
load increases by 6.3%. Thus, we can see that if the number
of requests raises 6 times, the B-DAC-integrated controller
witnesses an increase of 22.3% in response time. Besides, our
B-DAC-enabled controller consumes roughly 5.2 MB, 14.7
MB, 32.5 MB of memory for 1000, 3000, 6000 requests,
respectively. The measurement results on overhead metrics
are illustrated in TABLE XIV. These results indicate that the
computational overhead of a B-DAC-integrated controller is
not signiﬁcant.

To summarize,

to show the effectiveness in preventing
attacks starting from malicious applications, we launch some
attack scenarios to check whether it can bypass the access
control to consume network resources or not, as depicted
in the above experiments. The result demonstrates that B-
DAC can support a security-enhanced SDN controller at the
Northbound interface due to corresponding policies deﬁned
by network administrators. As a result, one application is
only permitted to consume resources belonging to its proﬁle.
All undeclared action is strictly denied. This mechanism
also prohibits privileges escalation requests stemming from a
compromised application, then promptly rejects or blocks its
functions in the network.

VII. RELATED WORKS

SDN has been on its way to become an emerging alter-
native solution to modern networks. Therefore, the problem
of enhancing security in SDN is gaining more and more
attention from research experts. In the context of the North-
bound interface, several solutions for secured communication
between applications and SDN controllers have been proposed.
Those works both aim to provide authentication and control
mechanisms to prevent controllers from being compromised
for malicious activities. Our work is inspired by prior works
in SDN security and vulnerability analysis techniques, partic-
ularly regarding NBI security, as follows.

The ﬁrst attempts to protect controllers seem to be to enable
an authentication and authorization mechanism to restrict
unauthorized access to this component.

To achieve this goal, Philip Porras et al. developed a
kernel solution called FortNOX [42]. Their work is designed
to deal with the intrusion of malicious OF apps to the
controller and unauthorized ﬂow rule installation. It is then
also extended to another version named SE-Floodlight [43].
Both solutions classify applications into three groups and
use a role-based authentication mechanism. However, in their
work, the controller still takes the responsibility of access
control and conﬂict veriﬁcation. It could be a bad effect
on the performance of the controller when it must process
continuously an enormous volume of requests. For instance,
the response time of requests can increase. Even worse, the
controller may get overloaded and become unavailable for
normal network controls. Similarly, SAIDE proposed by Tao
Hu et al. [40] also has the controller taken responsibility for
detecting and eliminating application interferences in SDN.
Clearly, this solution is completely controller-dependent.

In another work, A.L. Aliyu et al. [44] proposed a trust
management framework for the access of OpenFlow applica-
tions to the controller. Each OpenFlow application is granted
with speciﬁc permissions, which are Read, Write, Notify,
and SystemCall. Using this property, this framework aims
to ensure no OF app can overstep its granted permission
to perform unprivileged actions. Moreover, the trust of the
controller on applications is also established and monitored
by this framework. Basing on the application’s behaviors in
SDN, its corresponding trust value is periodically reviewed

JOURNAL OF LATEX CLASS FILES, AUGUST 2021

19

TABLE XIV
B-DAC-INTEGRATED FLOODLIGHT CONTROLLER’S OVERHEAD PERFORMANCE

#

Number
of requests

1000
3000
6000

Average
delay time (s)

RAM usage
for requests (MB)

CPU usage
for requests (%)

B-DAC
-enabled
Floodlight
0.01735
0.01974
0.02123

Original
Floodlight

0.0067
0.0075
0.0089

B-DAC
-enabled
Floodlight
5.2
14.7
32.5

Original
Floodlight

4.6
12.8
29.2

B-DAC
-enabled
Floodlight
3.2%
4.3%
6.3%

Original
Floodlight

2.4%
3.4%
4.7%

and updated.

Also considering trust as an important factor, B. Isong et al.
[45] used the trust level of an OF app as its “access card” to
SDN controller. An application must satisfy a required trust
level to be able to communicate with the controller and request
network resources. This approach creates a trust matrix of
applications corresponding to their identities used for effective
resource management in SDN.

Besides, a solution called ControllerSEPA [35] utilized
a repacking service to manage the transferred data from
the controller to OF app. In other words, it works as an
intermediate communication layer between application and
control planes for intercepting and analyzing trafﬁc. It also
provides services of AAA based on the features and granted
permissions of a speciﬁc OF app. Moreover, these applications
interact with the controller via a TLS-enabled Northbound
interface to ensure secured communication. An advantage of
this work is being developed as a plug-in model placed outside
the controller. This design makes no signiﬁcant effect on the
overall performance of the SDN control plane.

Likewise, Tao Hu et al. presented SEAPP [36], a secure
application management framework for SDN-aware cloud
networks. To prevent malicious applications from abusing
REST APIs to launch hostile attacks, they designed an access
control scheme on the Northbound interface in SDN. On a
more detailed level, network administrators have OpenFlow
apps registered with permission manifests. In later communi-
cations between applications and the SDN controller, SEAPP
compares the permissions in the application’s requests with
declared permissions to allow access to network resources.
However, this access control framework is susceptible to denial
of services attacks. Even worse, man-in-the-middle (MITM),
spooﬁng can be new vulnerabilities of SEAPP if the policy
database is exploited.

In other work, B. Toshniwal et al. proposed BEAM [46]
- a concept of a behavior-based access control mechanism
for SDN applications. This solution aims to grant and update
applications’ permission dynamically and periodically by ana-
lyzing their activities on SDN. The activities are veriﬁed using
their corresponding logs, then are used to deﬁne behaviors
with many metrics like packet in rate, ﬂow injection rate. . .
Though this mechanism is just in theory, its practical imple-
mentation can be promising to protect the SDN controller from
malicious applications.

Despite the aforementioned studies have expressed their
strength in protecting controllers, they still encounter many
aside problems such as performance reduction [42] [43] or

single point of failure due to the bridged position [35]. More-
over, most traditional authentication and authorization systems
use username-password pairs and other information saved in
a regular database as the identities. However, there is a fact
that these databases can be illegally modiﬁed. In this case, the
outstanding immutability characteristic of blockchain makes it
become a promising alternative solution. More speciﬁcally, it
can ensure data integrity and enhance the system’s availability
by the decentralized nature.

Regarding the SDN context, blockchain has had its very
ﬁrst applications in enhancing the security of this architecture.
A survey by Wenjuan Li et al. [47] introduced a generic
framework of Blockchain-based SDN. They also have an
overview of challenges and solutions in combining these two
technologies. Though many security issues may still exist,
blockchain and SDN can complete each other in many prac-
tical scenarios to provide more secured architectures.

In a vehicular environment, called the Internet of Vehicles
(IoV), security and privacy-preserving should be a major
concern due to involving transport systems and autonomous
cars. With the rapid development of vehicle networking in
scalability, SDN is also applied to improve the IoV network
management. In such SDN-based IoV (SD-IoV) systems, the
lack of authentication, authorization and trust management of
the applications also brings many security challenges like SDN
architecture. To this end, Mendiboure L. et al. [37] proposed
a blockchain-based approach to provide trust establishment
between SDN controllers and network applications. In this
system, a smart contract is used to store the information nec-
essary for the application authentication process in an identity
card. All transactions and exchanged data are kept in the
blockchain network when controllers and network applications
are mutually authenticated. This principle makes the SDN-
IoV controller more secure from malicious IoV applications.
Nonetheless, their work is only a conceptual model, not to be
implemented and evaluated in experimental scenarios.

Moreover, Zhedan Shao et al. [48] built a distributed
database using Blockchain to monitor operations of the con-
trollers. This database maintains a list of system actions in
each controller, which provides a strong and unmodiﬁed data
store. Therein, the authors use the SPBFT as the consensus
algorithm to enable parallel message transfer to speed up the
exchanged data processing.

Not limited to application authentication on Northbound
interface, Blockchain is also used to guarantee SDN security
from the view of data plane. In a research [49], the authors in-
troduced a Blockchain-based authentication mechanism in data

JOURNAL OF LATEX CLASS FILES, AUGUST 2021

20

plane of SDN. Each SDN subnet has a private chain formed
inside, and its data are stored in blockchain for integrity. A new
node willing to access SDN must pass the authentication of the
controller and a randomly chosen authentication node. Then,
it can receive keys from the security gateway of the subnet.
These keys are used to sign and decrypt the transaction, which
is a process to identify each node in the network.

Along with the authentication-related issues, SDN also
requires attention in protecting the controller from misuse
operations of legal or seem-to-be-safe applications. As ﬂow
rules play a key role in forwarding packets, the attacker can
take advantage of these rules to command the network. As
a proof, the authors of SRV [50] proposed an attack model
using malicious ﬂow rules. Then, the impact of the attack is
analyzed to evaluate the risk level. Hence, problems in ﬂow
rules, such as rule validation and veriﬁcation, have become
other interesting topics in SDN security.

A work [39] presented a scheme called PERM-GUARD
as a ﬂow rules validation module in Floodlight controller in
SDN. This scheme introduces a new model to verify and
authenticate the validity of the ﬂow rule in SDN. In this
work, every application intending to communicate with the
controller must register themselves to be recognized via unique
ID and identity-based signature. To decide whether ﬂow rules
should be installed on switches, PERM-GUARD ensures that
two following criteria are both valid. The ﬁrst one is that the
granted permissions of the application have met the required
ones of the rule, and the other is the validity of the producer
of that rule.

Besides, S. Wang et al. [49] improved the integrity of ﬂow
rule by storing it on the blockchain network whenever switches
receive and update their ﬂow tables. So, that, SDN network
nodes can periodically query the correct ﬂow table information
and change their local ones if it is inconsistent. Moreover,
S. Pisharody [51] categorized conﬂicts into various types and
proposed an algorithm to detect and solve the conﬂicts. The
effectiveness of this work has been proved via multiple testing
scenarios of rule conﬂiction in SDN.

In the urgent need for securing the Northbound interface,
our work is motivated by not only existing problems in
the above approaches, but also their strength and poten-
tially extend capabilities. In this paper, we aim to propose
a Blockchain-based authentication and control framework for
the SDN Northbound interface, called B-DAC. To the best of
our knowledge, B-DAC is the ﬁrst approach that leverages
blockchain with a prototype implementation to provide a
decentralized and ﬁne-grained ﬁlter to control network appli-
cations in SDN. Our work integrates the strength of current
solutions. At ﬁrst, our framework has a proactive approach
like a plugin model in ControllerSEPA’s idea. This design en-
ables authentication and access control tasks to be performed
independently with the controller so that it ensures the SDN
network brain’s performance. Moreover, all the data used in
the operations of the framework is stored in blockchain, where
it is impossible to edit or remove illegally. In addition, the
framework utilizes certiﬁcates as the identities of its managed
SDN elements, such as controller and OpenFlow (OF) appli-
cation. In the case of OpenFlow applications, its behaviors

are also paid attention to consider the trustworthiness of an
application from B-DAC. This trust degree is measured and
updated according to the application behaviors in SDN. Along
with common authentication, authorization, and accounting
capabilities, B-DAC can also validate incoming requests of
rule installation to ensure the proper operation of the SDN
controller as well as the entire network.

VIII. CONCLUSION AND FUTURE WORK

for

the Northbound interface in SDN.

In this paper, we propose B-DAC – a blockchain-based
access control
It
is the decentralized access control framework with proto-
type implementation using Hyperledger Fabric blockchain
approach for securing SDN controller. Our framework aims
to secure the interaction between SDN controllers and net-
work applications by utilizing the underlying characteris-
tics of the blockchain. Speciﬁcally, B-DAC is designed to
achieve controller-independent, application-transparency, and
strict and decentralized access control. It ensures that all
communications from any application to the controller are
always veriﬁed before network resources are consumed. With
this approach, it is infeasible for hackers to create a fake entity
to launch malicious attacks targeting the controller-application
channel. Additionally, we also enforce the ﬁne-grained ob-
servation of OpenFlow applications in B-DAC by security
policy generation. It helps network administrators prevent the
problems of unauthorized access, privilege escalation, and
network resources exhaustion during resource allocation and
management. Based on its implementation and evaluation in
many experimental scenarios, we conclude that B-DAC obtains
accurate and ﬁne-grained policy enforcement for Northbound
interface without signiﬁcantly degrading network performance.
Also, we claim that our initial architecture concentration is se-
curity, not performance, due to its trade-off. Nevertheless, our
work has some limitations that can be improved in the future.
Flow rules conﬂicts in the SDN network are still detected and
prevented directly on a speciﬁc controller (i.e., Floodlight),
although other modules of B-DAC are independent of the SDN
controller. In the future, we can relocate the validator of the
ﬂow rule outside the controller.

Also, to relieve the depression of administrators when cre-
ating permission in the policy deﬁnition phase, we can adapt
natural language processing (NLP) techniques to automatically
generate permissions for B-DAC. In this case, an example
solution like VOGUE [32] can be considered as a potential
approach to integrate with B-DAC for the mentioned purpose.
This may dramatically improve the workload of management
in the network. Moreover, when administrators verify the
token, it is vital to make the phase of issuing tokens automat-
ically to replace human interventions. When it comes to the
distributed controller model, B-DAC only uses one controller
to perform all decision-making for the forwarding plane in
SDN. Thus, the implementation of multiple controllers for B-
DAC will be considered to evaluate the effectiveness of our
design in complicated contexts. In addition, B-DAC can also
apply in the context of IoT devices authentication to identify
and trust each other for data exchange.

JOURNAL OF LATEX CLASS FILES, AUGUST 2021

21

Furthermore, system performance is also one of our consid-
erations. Transaction speed and throughput in the blockchain
network are important factors in this improvement journey.
This can be tackled by utilizing such an approach like
FastFabric [63], a plug-and-play approach on Hyperledger
Fabric, aiming to reduce computation and I/O overhead during
transaction ordering and validation to signiﬁcantly improve
throughput. Also, we can deploy blockchain nodes on multiple
hosts with robust hardware requirements to increase the perfor-
mance of the blockchain network. In addition, instead of using
Hyperledger Composer, we will implement the chaincode with
Hyperledger Fabric SDK. This method allows us more deeply
intervene in the provided blockchain APIs. At that time, it
will optimize the number of transactions of the blockchain
network, which can be up to thousands of transactions per
second. The better results of these metrics can provide the
better performance of keeping data immutably for blockchain-
based solutions in SDN when witnessing the data explosion
of network trafﬁc.

ACKNOWLEDGMENT
Phan The Duy was funded by Vingroup Joint Stock
Company and supported by the Domestic Master/ PhD
Scholarship Programme of Vingroup Innovation Foundation
(VINIF), Vingroup Big Data Institute (VINBIGDATA), code
VINIF.2020.TS.138.

The authors would like to express the special thanks of
gratitude to all astoundingly supportive members in E8.1 room
as well as friends, teachers who gave us the opportunity to do
this wonderful project.

REFERENCES

[1] ”OpenDaylight Matures with Carbon Release and New Market Deploy-
ments” 2017. [Online]. Available: https://www.opendaylight.org/category/
foundation-news. [Accessed 03 2020].
CloudFabric

CloudConnect Data

Solution,”
https://e.huawei.com/mx/related-page/solutions/

[Online]. Available:
business-needs/data-center/agile-dc-network/data-cloud-connect.
[Accessed 03 2020].

[2] ”Huawei

Center

[3] ”Microsoft Azure

[Online].
Available: https://docs.microsoft.com/vi-vn/windows-server/networking/
sdn/azure and sdn. [Accessed 03 2020].

and Software Deﬁned Networking,”

[4] ”IBM Services for,” [Online]. Available: https://www.ibm.com/sg-en/

services/network/software-deﬁned. [Accessed 03 2020].

[5] ”Software Deﬁned Networking

Partnership,”
software-deﬁned-networking-and-the-cisco-and-ibm-partnership.
[Accessed 03 2020].

[Online].

the

and
IBM
Cisco
https://blogs.cisco.com/datacenter/

and

[6] ”NTT DOCOMO’s 5G Experimentations and Trials on Network Slicing,”
2017. [Online]. Available: https://sdn.ieee.org/newsletter/december-2017/
ntt-docomo-s-5g-experimentations-and-trials-on-network-slicing.
[Accessed 03 2020].

[7] Q. Long, Y. Chen, H. Zhang and X. Lei, ”Software Deﬁned 5G and 6G

Networks: a Survey,” Mobile Networks and Applications, 2019.

[8] A. Wang, Z. Zha, Y. Guo and S. Chen, ”Software-Deﬁned Networking
Enhanced Edge Computing: A Network-Centric Survey,” Proceedings of
the IEEE, vol. 107, 2019.

[9] S. K. Tayyaba, M. A. Shah, O. A. Khan and A. W. Ahmed, ”Software
Deﬁned Network (SDN) Based Internet of Things (IoT): A Road Ahead,”
in ICFNDS, 2017.

[10] P. T. Duy, D. T. T. Hien, D. H. Hien and V.-H. Pham, ”A survey
on opportunities and challenges of Blockchain technology adoption for
revolutionary innovation,” in The 9th SoICT, 2018.

[11] P. T. Duy, D. T. T. Hien, N. V. Vuong, N. N. H. Au and V.-H. Pham,
”Toward a trust-based authentication framework of Northbound interface
in Software Deﬁned Networking,” in 5th EAI INISCOM, 2019.

[12] D. Kreutz, F. M. V. Ramos, P. Esteves, C. Esteves and S. Azodolmolky,
”Software-Deﬁned Networking: A Comprehensive Survey,” in Proceed-
ings of the IEEE, 2014.

[13] V. H. Dixit, A. Doup´e, Y. Shoshitaishvili, Z. Zhao and G.-J. Ahn,
”AIM-SDN: Attacking Information Mismanagement in SDN-datastores,”
in ACM SIGSAC, 2018.

[14] S. Lee, C. Yoon, C. Lee, S. Shin, V. Yegneswaran and P. Porras,
”DELTA: A Security Assessment Framework for Software-Deﬁned Net-
works,” in Network and Distributed System Security Symposium, 2017.

[15] K. Salah, M. H. U. Rehman, N. Nizamuddin and A. Al-Fuqaha,
”Blockchain for AI: Review and Open Research Challenges,” IEEE
Access, vol. 7, 2019.

[16] I. Makhdoom, M. Abolhasan, H. Abbas and W. Ni, ”Blockchain’s
adoption in IoT: The challenges, and a way forward,” Journal of Network
and Computer Applications, vol. 125, 2019.

[17] O. Novo, ”Blockchain Meets IoT: An Architecture for Scalable Access
Management in IoT,” IEEE Internet of Things Journal, vol. 5, 2018.
[18] W. Meng, E. W. Tischhauser, Q. Wang, Y. Wang and J. Han, ”When
Intrusion Detection Meets Blockchain Technology: A Review,” IEEE
Access: Research Challenges and Opportunities in Security and Privacy
of Blockchain Technologies, 2018.

[19] G. S. Aujla, M. P. Singh, A. Bose, N. Kumar, G. Han and R. Buyya,
”BlockSDN: Blockchain-as-a-Service for Software Deﬁned Networking
in Smart City Applications,” IEEE Network, 2020.

[20] P. T. Duy, H. D. Hoang, D. T. T. Hien, N. B. Khanh and V.-H. Pham,
”SDNLog-Foren: Ensuring the Integrity and Tamper Resistance of Log
Files for SDN Forensics using Blockchain,” in 6th NICS,, 2019.

[21] M. Jo, K. Hu, R. Yu, L. Sun, M. Conti and Q. Du, ”Private Blockchain

in Industrial IoT,” in IEEE Network, vol. 34, October 2020.

[22] M. I. S. Assaqty et al., ”Private-Blockchain-Based Industrial IoT for Ma-
terial and Product Tracking in Smart Manufacturing,” in IEEE Network,
vol. 34, 2020.

[23] ”Hyperledger Fabric,” [Online]. Available: https://www.hyperledger.org/

projects/fabric. [Accessed September 2019].

[24] X. Xu, G. Sun, L. Luo, H. Cao, H. Yu, Athanasios V. Vasilakos, ”Latency
performance modeling and analysis for hyperledger fabric blockchain
network”, Information Processing & Management,vol 58, 2021.

[25] Julien Polge, J´er´emy Robert, YvesLe Traon, ”Permissioned blockchain
frameworks in the industry: A comparison”, ICT Express, Vol 7, issue 2,
2021.

[26] Y. Zhang, C. Xu, J. Ni, H. Li, X. S. Shen, ”Blockchain-assisted Public-
key Encryption with Keyword Search against Keyword Guessing Attacks
for Cloud Storage,” IEEE Transactions on Cloud Computing, 2019.
[27] Y. Zhang, C. Xu, N. Cheng, H. Li, H. Yang, X. Shen, ”Chronos: An
Accurate Blockchain-Based Time-Stamping Scheme for Cloud Storage,”
IEEE Transactions on Services Computing, vol. 13, 2020.

[28] Y. Zhang, C. Xu, X. Lin and X. Shen, ”Blockchain-Based Public
Integrity Veriﬁcation for Cloud Storage against Procrastinating Auditors,”
IEEE Transactions on Cloud Computing, vol. 9, 2021.

[29] Qin Wang, Xinqi Zhu, Yiyang Ni, Li Gu, Hongbo Zhu, ”Blockchain for
the IoT and industrial IoT: A review”, Internet of Things, vol. 10, 2020.
[30] Ujcich, Benjamin E., Samuel Jero, Anne Edmundson, Qi Wang, Richard
Skowyra, Landry James, Adam Bates, William H. Sanders, Cristina Nita-
Rotaru and Hamed Okhravi, ”Cross-App Poisoning in Software-Deﬁned
Networking”, in the ACM SIGSAC, 2018.

[31] Mohamed Tahar Hammi, Badis Hammi, Patrick Bellot, Ahmed
Serhrouchni, ”Bubbles of Trust: A decentralized blockchain-based au-
thentication system for IoT”, Computers & Security, vol. 78, 2018.
[32] H. Kang, V. Yegneswaran, S. Ghosh, P. Porras and S. Shin, ”Automated
Permission Model Generation for Securing SDN Control-Plane,” IEEE
Transactions on Information Forensics and Security, vol. 15, 2020.
[33] J. C. C. Chica, J. C. Imbachi and J. F. B. Vega, ”Security in SDN: A
comprehensive survey,” Journal of Network and Computer Applications,
vol. 159, 2020.

[34] H. Kang, C. Yoon and S. Shin, ”Astraea: Towards an effective and usable
application permission system for SDN,” Computer Networks, 2019.
[35] Y. Tseng, Z. Zhang and F. Na¨ıt-Abdesselam, ”ControllerSEPA: A
Security-Enhancing SDN Controller Plug-in for OpenFlow Applications,”
in 17th PDCAT, 2016.

[36] T. Hu, Z. Zhang, P. Yi, D. Liang, Z. Li, Q. Ren, Y. Hu and J.
Lan, ”SEAPP: A secure application management framework based on
REST API access control in SDN-enabled cloud environment,” Journal
of Parallel and Distributed Computing, vol. 147, 2021.

[37] L. Mendiboure, M. A. Chalouf and F. Krief, ”Towards a Blockchain-
Based SD-IoV for Applications Authentication and Trust Management,”
in Internet of Vehicles. Technologies and Services Towards Smart City.
IOV 2018. Lecture Notes in Computer Science, vol 11253, 2018.

JOURNAL OF LATEX CLASS FILES, AUGUST 2021

22

Phan The Duy received the B. Eng. and M.Sc.
degrees in Software Engineering and Information
Information
Technology from the University of
Technology (UIT), Vietnam National University Ho
Chi Minh City (VNU-HCM), Hochiminh City, Viet-
nam in 2013 and 2016, respectively. Currently, he
is pursuing a Ph.D. degree major in Information
Technology, specialized in Cybersecurity at UIT,
Hochiminh City, Vietnam. He also works as a re-
searcher member in Information Security Laboratory
(InSecLab), UIT-VNU-HCM after 5 years in the
industry, where he devised several security-enhanced and large-scale telecon-
ference systems. His research interests include information security & privacy,
Software-Deﬁned Networking security, digital forensics, adversarial attacks,
generative adversarial networks (GANs), machine learning-based security
solution and blockchain.

Hien Do Hoang received B.E degree in Networking
and Communication from the University of Informa-
tion Technology (UIT), Vietnam National University
Ho Chi Minh City (VNU-HCM), Vietnam in 2017.
From 2017 to 2018, he worked for a security and
network company. He also received the M.Sc. de-
gree in Information Technology in 2020. Currently,
he works as a researcher member in Information
Security Lab (InSecLab) in UIT, VNU-HCM. His
research interests are Software-deﬁned Networking,
system and network security, cloud computing and

Do Thi Thu Hien received the B. Eng. degree in In-
formation Security from the University of Informa-
tion Technology (UIT), Vietnam National University
Ho Chi Minh city in 2017. She received the M.Sc.
degree in Information Technology in 2020. From
2017 till now, she works as a member of a research
group at the Information Security Laboratory (InSe-
cLab) in UIT. Her research interests are Information
security & privacy, Software-deﬁned Networking,
and its related security-focused problems.

[38] C. Zhang, L. Zhu and C. Xu, ”BPAF: Blockchain-Enabled Reliable
and Privacy-Preserving Authentication for Fog-Based IoT Devices,” IEEE
Consumer Electronics Magazine, 2021.

[39] M. Wang, J. Liu, J. Chen, X. liu and J. Mao, ”PERM-GUARD: Authen-
ticating the Validity of Flow Rules in Software Deﬁned Networking,” in
IEEE 2nd CSCloud, 2015.

[40] T. Hu, P. Yi, Y. Hu, J. Lan, Z. Zhang and Z. Li, ”SAIDE: Efﬁcient
application interference detection and elimination in SDN,” Computer
Networks, vol. 183, 2020.

[41] X. Leng, K. Hou, Y. Chen, K.Bu, L. Song, ”SDNKeeper: Lightweight
Resource Protection and Management System for SDN-Based Cloud,” in
IEEE/ACM 26th IWQoS, 2018.

[42] P. Porras, S. Shin, V. Yegneswaran, M. Fong, M. Tyson and G. Gu,
”A security enforcement kernel for OpenFlow networks,” in HotSDN’12,
Finland, 2012.

[43] S. Cheung, M. Fong, P. Porras, K. Skinner and V. Yegneswaran,
”Securing the Software-Deﬁned Network Control Layer,” in NDSS, 2015.
[44] A. L. Aliyu, P. Bull, A. Abdallah, ”A Trust Management Framework
for Network Applications within an SDN Environment,” in 31st WAINA,
2017.

[45] B. Isong, T. Kgogo, F. Lugayizi, B. Kankuzi, ”Trust establishment
framework between SDN controller and applications,” in 18th IEEE/ACIS
SNPD, 2017.

[46] B. Toshniwal, K. D. Joshi, P. Shrivastava and K. Kataoka, ”BEAM:
BEhavior-Based Access Control Mechanism for SDN Applications,” in
28th ICCCN, 2019.

[47] W. LI, W. MENG, Z. LIU and M.-H. AU, ”Towards Blockchain-Based
Software-Deﬁned Networking: Security Challenges and Solutions,” IEICE
Transactions on Information and Systems, 2020.

[48] Z. Shao, X. Zhu, A. M. M. Chikuvanyanga and H. Zhu, ”Blockchain-
Based SDN Security Guaranteeing Algorithm and Analysis Model,” in
WiSATS, 2019.

[49] S. Wang, X. Zhu and S. Zhao, ”Blockchain-based SDN Security

Guarantee Model,” in IEEE 19th ICCT, 2019.

ronments,” 2017.

[52] H. D. Hoang, P. T. Duy and V.-H. Pham, ”A Security-Enhanced
Monitoring System for Northbound Interface in SDN using Blockchain,”
in The 10th SoICT, 2019.

[53] ”JSON Web Token,” [Online]. Available: https://jwt.io/.
[54] Z. Zheng, S. Xie, H. Dai, X. Chen and H. Wang, ”An Overview of
Blockchain Technology: Architecture, Consensus, and Future Trends,” in
IEEE BigData Congress, 2017.

[55] ”Apache Kafka,” [Online]. Available: https://kafka.apache.org/.
[56] ”Apache Zookeeper,” The Apache Software Foundation, [Online]. Avail-

able: https://zookeeper.apache.org/. [Accessed April 2019].

[57] ”Floodlight Controller,” [Online]. Available: https://ﬂoodlight.atlassian.

net/wiki/spaces/ﬂoodlightcontroller/overview.
[58] ”Mininet,” [Online]. Available: http://mininet.org/.
[59] ”Caliper - A blockchain benchmark framework to measure perfor-
mance of multiple blockchain solutions,” [Online]. https://github.com/
hyperledger/caliper.

[60] ”Hyperledger Composer - Build Blockchain applications and business
networks your way,” [Online]. https://hyperledger.github.io/composer/v0.
19/index.html.

[61] A. Chikhale and R. Khondoker, ”Security analysis of SDN cloud
applications,” in Khondoker R. (eds) SDN and NFV Security. Lecture
Notes in Networks and Systems, vol 30, Springer, 2018.

[62] ”STRIDE chart,” Microsoft Security, [Online]. Available: https://www.

microsoft.com/security/blog/2007/09/11/stride-chart/.

[63] C. Gorenﬂo, S. Lee, L. Golab, S. Keshav, ”FastFabric: Scaling Hyper-
ledger Fabric to 20,000 Transactions per Second,” in IEEE ICBC, 2019.

[50] Y. Tseng, Z. Zhang and F. Nait-Abdesselam, ”SRV: Switch-based rules
veriﬁcation in software deﬁned networking,” in IEEE NetSoft, 2016.
[51] S. Pisharody, ”Policy Conﬂict Management in Distributed SDN Envi-

blockchain.

Anh Gia-Tuan Nguyen obtained his bachelor’s
degree in Information Technology from the Univer-
sity of Natural Sciences, Vietnam National Univer-
sity Ho Chi Minh City (VNU-HCM), Hochiminh
City in 1995. Then, he pursued his M.Sc. degree
in Information Technology from this university in
1998. He completed his Ph.D. thesis in Information
Technology from the University of Natural Sciences
of Hochiminh City in 2013. He is now a lecturer at
the University of Information Technology, Vietnam
National University Ho Chi Minh City (UIT-VNU-
HCM). His main research interests include information security, 3D/4D GIS,
mapping application and modern databases.

JOURNAL OF LATEX CLASS FILES, AUGUST 2021

23

Van-Hau Pham obtained his bachelor’s degree in
computer science from the University of Natural
Sciences of Hochiminh City in 1998. He pursued
his master’s degree in Computer Science from the
Institut de la Francophonie pour l’Informatique (IFI)
in Vietnam from 2002 to 2004. Then he did his
internship and worked as a full-time research en-

gineer in France for 2 years. He then persuaded his
Ph.D. thesis on network security under the direction
of Professor Marc Dacier from 2005 to 2009. He
is now a lecturer at the University of Information
Technology, Vietnam National University Ho Chi Minh City (UIT-VNU-
HCM), Hochiminh City, Vietnam. His main research interests include network
security, system security, mobile security, and cloud computing.

