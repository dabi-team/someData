ESBMC-Solidity: An SMT-Based Model Checker for
Solidity Smart Contracts

Kunjian Song
Nedas Matulevicius
University of Manchester, UK

Eddie B. de Lima Filho
TPV Vision Innovator, Brazil
eddie_batista@yahoo.com.br

Lucas C. Cordeiro
University of Manchester, UK
lucas.cordeiro@manchester.ac.uk

1
2
0
2

v
o
N
5
2

]

O
L
.
s
c
[

1
v
7
1
1
3
1
.
1
1
1
2
:
v
i
X
r
a

kunjian.song@postgrad.manchester.ac.uk
nedas.matulevicius@postgrad.manchester.ac.uk

Abstract
Smart contracts written in Solidity are programs used in
blockchain networks, such as Etherium, for performing trans-
actions. However, as with any piece of software, they are
prone to errors and may present vulnerabilities, which mali-
cious attackers could then use. This paper proposes a solidity
frontend for the efficient SMT-based context-bounded model
checker (ESBMC), named ESBMC-Solidity, which provides a
way of verifying such contracts with its framework. A bench-
mark suite with vulnerable smart contracts was also devel-
oped for evaluation and comparison with other verification
tools. The experiments performed here showed that ESBMC-
Solidity detected all vulnerabilities, was the fastest tool, and
provided a counterexample for each benchmark. A demon-
stration is available at https://youtu.be/3UH8_1QAVN0.

CCS Concepts: ‚Ä¢ Software and its engineering ‚Üí Model
checking; Software verification.

Keywords: formal verification, Solidity.

ACM Reference Format:
Kunjian Song, Nedas Matulevicius, Eddie B. de Lima Filho, and Lu-
cas C. Cordeiro. 2021. ESBMC-Solidity: An SMT-Based Model Checker
for Solidity Smart Contracts. In Proceedings of ACM Conference (Con-
ference‚Äô22). ACM, New York, NY, USA, 4 pages. https://doi.org/10.
1145/nnnnnnn.nnnnnnn

1 Introduction
The blockchain system is a distributed ledger technology that
forms the primary mechanism behind Bitcoin, Ethereum, and
alternative cryptocurrencies [1]. It can be considered as a
singly linked list of blocks [2], where each of them contains
a set of unmodifiable transactions. This way, such a technol-
ogy serves as a distributed tamper-resistant record of such
transactions [3]. Ethereum, for instance, can be regarded

Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are not
made or distributed for profit or commercial advantage and that copies bear
this notice and the full citation on the first page. Copyrights for components
of this work owned by others than ACM must be honored. Abstracting with
credit is permitted. To copy otherwise, or republish, to post on servers or to
redistribute to lists, requires prior specific permission and/or a fee. Request
permissions from permissions@acm.org.
Conference‚Äô22, May 2022, Pittsburgh, PA, USA
¬© 2021 Association for Computing Machinery.
ACM ISBN 978-x-xxxx-xxxx-x/YY/MM. . . $15.00
https://doi.org/10.1145/nnnnnnn.nnnnnnn

as a state machine whose global state is updated by those
transactions, which indeed constitute state transitions.

The transactions are performed by smart contracts, which
are programs automatically executed on blockchain net-
works when specific conditions are met [1], which encode
business logic. For instance, such conditions can be an ex-
change of cryptocurrency or even a process of content un-
locking if a digital rights management system is involved.
Indeed, transactions act as stimuli to smart contracts. Never-
theless, such contracts must first be written in a given lan-
guage. In the case of Etherium, smart contracts are written in
Solidity, which is an object-oriented language for programs
to be run on the Ethereum virtual machine (EVM) [2].

Once deployed, there is no way to update a smart con-
tract except for deleting it entirely and re-deploying a new
one. Even a smart contract‚Äôs author cannot modify the corre-
sponding source code or fix bugs after that [4]. Due to such
immutability, it is critical to ensure that a smart contract is
secure before its deployment on a blockchain network, such
as Ethereum. However, as usually happens to software, smart
contracts suffer from vulnerabilities, which represent a risk
as malicious attackers often exploit them. As an example,
the DAO attack, in 2016, resulted in a monetary loss of more
than $50 million dollars, which forced Ethereum to be hard
forked and then rolled back to a previous state [5].

If there can be vulnerabilities, software testing becomes
paramount, and the community has already begun to tackle
the related problems [6, 7]. However, most approaches tar-
get only a limited number of errors, which worsens as new
applications appear and the need for specific aspects arises.
Consequently, it is essential to employ mature and flexible
verifiers, e.g., based on model checking and satisfiability
modulo theories (SMT), to check smart contracts. This way,
a myriad of problems is already handled, and consequent
methodology advancements can then be devised faster, in-
cluding behavior models and specific properties [8].

In that sense, the efficient SMT-based context-bounded
model checker (ESBMC) is a good candidate. It is a state-of-
the-art (SOTA) checker, which can be extended to support
different programming languages and target systems, such
as digital filters and controllers, even incorporating behav-
ior models and companion tools [8‚Äì10]. In addition, it was
initially devised as a C-language model checker and has
been evaluated using standard benchmarks and embedded
applications in the telecommunication industry [11, 12].

 
 
 
 
 
 
Conference‚Äô22, May 2022, Pittsburgh, PA, USA

Song et al.

Figure 1. Architectural overview of ESBMC with its extension for verifying Solidity smart contracts.

This paper tackles the problem raised here, i.e., smart-
contract evaluation, and proposes a frontend for ESBMC
based on the newly developed Grammar-based Hybrid Con-
version methodology. It enables ESBMC to verify Solidity
contracts via two steps. First, we convert Solidity JavaScript
object notation (JSON) abstract syntax trees (AST) into the
ESBMC‚Äôs intermediate representation (IR). Second, we inte-
grate with ESBMC‚Äôs infrastructure to reuse its existing SMT-
based verification strategies (incremental and k-induction).

In order to evaluate the proposed framework, named ESBMC-

Solidity, a benchmark suite with vulnerable smart contracts
was created and used as input for it and other SOTA Solidity
verification tools: Smartcheck [13], Slither [14], Oyente [15],
and Mythril [16]. As a result, ESBMC-Solidity outperformed
the mentioned verification tools in soundness and perfor-
mance. Besides, it identified all vulnerabilities, with a coun-
terexample for each, and proved the fastest approach.

2 Tool description
2.1 Tool Overview
Fig. 1 illustrates the architecture of ESBMC-Solidity, where
the gray box with solid border represents the new frontend,
and the white ones constitute the existing ESBMC‚Äôs com-
ponents. The gray box with a dashed border indicates an
external element for preprocessing smart contracts: the Solid-
ity compiler. It is used for lexical analysis and parsing, taking
a smart contract as input and then transforming it into JSON
AST, which is done with the argument --ast-compact-json.

The proposed approach takes JSON AST and converts each
of its nodes into an equivalent IR one, using the ESBMC‚Äôs
irept, a tree-structured IR that preserves a program‚Äôs seman-
tics.Next, each irept node is converted into the corresponding
symbol and then added to a table, which is translated into
a GOTO program. Then, the latter is processed by the sym-
bolic execution engine (SymEx) to generate its static single
assignment (SSA) form, which is used to generate verification
condition (VCs) ùê∂ ‚àß ¬¨ùëÉ, where ùê∂ represents constraints and
ùëÉ denotes a safety property. Lastly, ESBMC uses off-the-shelf
SMT solvers for verifying the satisfiability of those VCs.

If a property is satisfiable, an execution path leads to a bug
in an original Solidity smart contract. Then, when ESBMC

detects it, a counterexample is provided, in the form of state
traces, to allow its reproduction. It is worth noticing that
ESBMC supports several SMT solvers, including Z3, Bitwuzla,
Boolector, MathSAT, CVC4, and Yices [17].

2.2 The Grammar-Based Hybrid Conversion

Methodology

Given an input smart contract, the goal of the proposed fron-
tend is to populate the resulting symbol table, where each
symbol is represented by the ESBMC‚Äôs symbolt data struc-
ture [17]. Furthermore, it shall complete the type-checking
procedure of Solidity AST nodes and transform each JSON
AST node into its equivalent ESBMC‚Äôs irept one while pre-
serving the associated semantic information. To achieve this
goal, we developed this frontend based on the Grammar-
Based Hybrid Conversion methodology, as an approach specif-
ically devised for that during the development of this work.
Grammar-Based Conversion. The proposed frontend
uses the library nlohmann/json1 to process Solidity ASTs in
JSON format. When traversing Solidity AST nodes, it uses
different functions to transform them into equivalent ùëñùëüùëíùëù_ùë°
ones, e.g., get_var_decl_stmt, get_expr, and get_statement,
for variable-declaration-statement, expression, and statement
nodes, respectively. Besides, each AST node may contain mul-
tiple child ones, e.g., the AST node of a for loop contains four
child nodes: initialisation, condition, increment, and loop body.
So, during their conversion, the production rules in Solidity
grammar documentation2 are followed, so that they are vis-
ited in correct order. For instance, the variable-initialisation
node of a for loop must be visited before the body one, as it
may be referenced by the latter. If the node for a body loop is
converted before its variable initialisation, the type checker
will fail to handle any reference to it.

Hybrid conversion. Three functions must be supported:
(1) ùëéùë†ùë†ùëíùëüùë° () for defining safety properties; (2) ùëéùë†ùë†ùë¢ùëöùëí () for
defining constraints; and (3) ùëõùëúùëõùëëùëíùë° () for assigning non-
deterministic values to variables. Consequently, they are
implemented by ESBMC as C-style declarations. However,
the new frontend works with JSON AST nodes. Besides, since

1JSON for Modern C++ - https://github.com/nlohmann/json
2Solidity Grammar - https://docs.soliditylang.org/en/v0.8.6/grammar.html

ESBMC-Solidity: An SMT-Based Model Checker for Solidity Smart Contracts

Conference‚Äô22, May 2022, Pittsburgh, PA, USA

there are more than 70 intrinsic declarations, e.g., forward
declarations for nondeterministic types, we instantiate the
existing ESBMC‚Äôs clang frontend to convert those into irept
nodes to avoid replication, hence generating the symbol table
mentioned before. Finally, the latter is further merged with
the symbol table generated from the original Solidity AST.

2.3 Illustrative Example

}
function __ESBMC_assume ( bool )

uint8 x;
uint8 sum ;
function nondet () public pure

returns ( uint8 ) {
uint8 i;
return i;

1 pragma solidity >=0.4.26;
2 contract MyContract {
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21 }

x = 0;
uint8 y = nondet () ;
sum = x + y;
__ESBMC_assume (y < 255) ;
__ESBMC_assume (y > 220) ;
__ESBMC_assume (y != 224) ;
assert ( sum % 16 != 0) ;

internal pure { }

function func_sat () external {

}

Figure 2. An example smart contract written in Solidity.

Fig. 2 shows an example of smart-contract verification
with ESBMC-Solidity. Indeed, developers can instrument
code, e.g., nondet for nondeterministic integers between 0
and 255 and __ESBMC_assume for additional constraints.
Those help developers narrow down the scope for triggering
a bug, hence identifying a set of breaking inputs. Function
func_sat is the one we need to verify, where two state vari-
ables x and sum are defined in lines 3 and 4, respectively,
while a safety property indicates that x + y should not be
a multiple of 16. In addition, constraints are added using
__ESBMC_assume, in lines 16, 17, and 18, which restrict ùë¶ as
any integer between 220 and 255, but 224. Then, ESBMC will
check whether there exists an execution path that satisfies
its negation. This way, the verification of func_sat becomes a
satisfiability problem: given the binary operation expression
‚Äúsum = x + y‚Äù, where x is 0 and y is a constrained nondeter-
ministic value, find an execution state where the negation
of ‚Äúùë†ùë¢ùëö%16! = 0‚Äù is satisfied. ESBMC is then invoked with
esbmc <JSON AST> --function func_sat --z3.

For the smart contract in Fig. 2, ESBMC generates the ùê∂
and ùëÉ equations as described in (1) for constraints and (2) for
property. Eq. (1) shows a conjunction of the constraints and
assignments. When generating its SSA form, ESBMC uses
the temporary variable temp to represent the left-hand-side
of the safety property specified in line 19, which corresponds
to the assignment ùë°ùëíùëöùëù = ùë†ùë¢ùëö%16 in Eq. 1. The resulting VC
for satisfiability verification, via SMT solver, is then formed
by ùê∂‚àß¬¨ùëÉ. Consequently, ESBMC reports a property violation
and provides a counterexample that contains a trace of states

showing the set of assignments and the breaking values that
trigger such violation, where ùë¶ is set with a value 240.

ùê∂ =

ùë¶ = ùëõùëúùëõùëëùëíùë° ()
‚àß ùë†ùë¢ùëö = ùë¶
‚àß ùë¶ ! = 224
‚àß ùë°ùëíùëöùëù = ùë†ùë¢ùëö%16

Ô£Æ
Ô£Ø
Ô£Ø
Ô£Ø
Ô£Ø
Ô£Ø
Ô£∞

Ô£π
Ô£∫
Ô£∫
Ô£∫
Ô£∫
Ô£∫
Ô£ª

(1) ùëÉ = (cid:2) ùë°ùëíùëöùëù ! = 0 (cid:3)

(2)

3 Evaluation and Benchmarks
ESBMC-Solidity, though an early prototype, can detect vul-
nerabilities listed in the smart-contract weakness classifica-
tion (SWC) registry [19]. So, our evaluation aims to answer
three questions. EQ1: is our approach able to report a con-
firmed bug? (soundness). EQ2: does our approach find a
bug in a reasonable amount of time? (performance). EQ3:
is our approach able to provide a counterexample to help
reproduce a specific bug? (bug reproduction).

3.1 Benchmark Suite Design
A benchmark suite that contains bugs in smart contracts was
developed to evaluate ESBMC-Solidity and compare it with
other SOTA verification tools. The design of each test case
(TC) was guided by the SWC registry [19], as shown in Ta-
ble 2, while Table 1 shows that all bugs in TCs were detected
and confirmed by at least one of the non-ESBMC tools. The
test suite and logs are publicly available in Zenodo3.

3.2 Results
Table 1 shows results for ESBMC-Solidity and other tools.
The former found bugs in all TCs confirmed by Mythril,
which affirms EQ1. SmartCheck and Slither were able to
confirm TC5, which contains a vulnerability reported in the
security considerations4, while detected none for the other
TCs. Oyente did not find any bug. Mythril, a tool used in the
service MythXTM [16], also reported bugs in all TCs.

Apart from TC5, Mythril and the other non-ESBMC tools
failed to provide a counterexample for each TC. However,
ESBMC-Solidity did, which affirms EQ3. For TC5, a coun-
terexample is not needed, as a tool should only inform that
authorization via ùë°ùë• .ùëúùëüùëñùëîùëñùëõ must be avoided. One possible
reason for the missing counterexamples could be loss of the
original Solidity syntax, as tools either use EVM bytecode,
e.g., Oyente and Mythril or rely on various forms of IR that
do not preserve the original Solidity declaration references
needed for state tracing, e.g., SmartCheck and Slither.

ESBMC-Solidity is the fastest tool, as can be seen in the
last line of Table 1, which thus affirms EQ2. Oyente and
Mythril work on EVM bytecode and employ simulation for
execution path-exploration [20], which might be the rea-
son why they are slower than ESBMC-Solidity. Apart from
bug detection, Slither also provides code optimization [14],
which might add to the total verification time. To the best of
our knowledge, there is no option in Slither to disable the
optimization. SmartCheck is implemented in Java, converts

3https://doi.org/10.5281/zenodo.5721726
4https://docs.soliditylang.org/en/v0.8.6/security-considerations.html

Conference‚Äô22, May 2022, Pittsburgh, PA, USA

Song et al.

TC

TC1
TC2
TC3
TC4

SmartCheck
Found CE
-
-
-
-

No
No
No
No

Slither
Found CE
-
-
-
-

No
No
No
No

TC5
TC6
TC7
TC8
Total Time

Yes
No
No
No

N/A
-
-
-

Yes
No
No
No

N/A
-
-
-

1.160s

0.519s

Found
No
No
No
No
Failed to
compile
No
No
No
1.116s

Oyente

Mythril

CE Found CE
No
Yes
-
No
Yes
-
No
Yes
-
No
Yes
-

ESBMC-Solidity
Found
Yes
Yes
Yes
Yes

CE
Yes
Yes
Yes
Yes

-
-
-
-

Yes
Yes
Yes
Yes

N/A
No
No
No

Yes
Yes
Yes
Yes

N/A
Yes
Yes
Yes

3.106s

0.183s

Table 1. Experimental results, where column ‚ÄúFound‚Äù indicates whether a bug was detected, followed by column ‚ÄúCE‚Äù showing
whether a counterexample was provided. The line ‚ÄúTotal Time‚Äù represents the CPU time [18] used for verification.

SWC Bug ID

SWC-101

SWC-115

SWC-110

Vulnerability
Integer Overflow
Integer Underflow
Authorization through tx.origin
Static array out-of-bounds
Dynamic array out-of-bounds

TC
TC1,2
TC3,4
TC5
TC6
TC7,8

Table 2. Test case design based on SWC registry [19].

Solidity code into an XML-based IR, and uses XPath to query
it, while ESBMC-Solidity is implemented purely in C++.

4 Related Work
Among the tools we evaluated, Mythril and Oyente use SMT-
based symbolic execution to check EVM bytecode and also
simulate a virtual machine for execution-path exploration,
which might lead to performance degradation [20]. ESBMC-
Solidity also uses SMT solvers as backends, but it processes
ASTs, so there is no need for environment simulation.

A tool that also adopts SMT encoding and solvers to find
satisfiability for a property violation is discussed by Alt and
Reitwiessner [20]. They developed a component to trans-
late programs into smtlib2 formulae to interface with SMT
solvers [20]. The main difference between it and ESBMC-
Solidity is that the latter supports code instrumentation,
which narrows down the scope of inputs that trigger viola-
tions. In addition, ESBMC-Solidity can also be extended on
top of various existing verification strategies and reasoning
techniques provided by ESBMC, such as k-induction.

5 Conclusions
We presented ESBMC-Solidity that checks memory safety
and user-defined properties in smart contracts written in
the Solidity programming language. We evaluated ESBMC-
Solidity against other SOTA verification tools and overcame
them, confirming all presented bugs and providing the associ-
ated counterexamples. Although ESBMC-Solidity is an early

prototype, it shows promising results. Our current focus is
on providing 100% coverage for the language Solidity, in-
cluding polymorphism, inheritance, special crypto functions,
such as Keccak256 and sha256, and multiple returns.

References
[1] I Bashir. 2017. Mastering Blockchain. Packt Publishing Ltd.
[2] K Soloro et al. 2019. Hands-On Smart Contract Development With

Solidity and Ethereum. California, USA: O‚ÄôReilly.

[3] D Yaga et al. 2019.

Blockchain technology overview.

CoRR

arXiv:1906.11078 (2019).

[4] A Antonopoulos et al. 2018. Mastering ethereum. O‚Äôreilly Media.
[5] M Mehar et al. 2019. Understanding a revolutionary and flawed grand
experiment in blockchain: the DAO attack. JCIT 21, 1 (2019), 19‚Äì32.
[6] √Å Hajdu et al. 2019. solc-verify: A modular verifier for Solidity smart

contracts. CoRR arXiv:1907.04262 (2019).

[7] I Garfatta et al. 2021. A Survey on Formal Verification for Solidity

Smart Contracts. In ACSW 2021. 1‚Äì10.

[8] L Cordeiro et al. 2020. Survey on automated symbolic verification
and its application for synthesising cyber-physical systems.
IET
Cyper-Phys. Syst.: Theory & Appl. 5, 1 (2020), 1‚Äì24.

[9] O Alhawi et al. 2021. Verification and refutation of C programs based
on k-induction and invariant inference. STTT 23, 2 (2021), 115‚Äì135.

[10] L Chaves et al. 2019. Verifying fragility in digital systems with uncer-

tainties using DSVerifier v2. 0. JSS 153 (2019), 22‚Äì43.

[11] M Gadelha et al. 2018. ESBMC 5.0: an industrial-strength C model

checker. In ASE 2018. 888‚Äì891.

[12] L Cordeiro et al. 2011. SMT-based bounded model checking for em-

bedded ANSI-C software. TSE 38, 4 (2011), 957‚Äì974.

[13] S Tikhomirov et al. 2018. Smartcheck: Static analysis of ethereum

smart contracts. In WETSEB 2018. 9‚Äì16.

[14] J Feist et al. 2019. Slither: a static analysis framework for smart con-

tracts. In WETSEB 2019. IEEE, 8‚Äì15.

[15] L Luu et al. 2016. Making smart contracts smarter. In ACM SIGSAC

CCS 2016. 254‚Äì269.

[16] ConsenSys/mythril. v0.22.1. Github. Retrieved Nov 24, 2021 from

https://github.com/ConsenSys/mythril

[17] esbmc/esbmc. v6.8. Github.

Retrieved Nov 24, 2021 from https:

//github.com/esbmc/esbmc

[18] linux.org. 2019. time(1) ‚Äî Linux manual page. Retrieved Nov 24, 2021

from https://man7.org/linux/man-pages/man1/time.1.html

[19] SWC Registry. 2020. SmartContractSecurity. Retrieved Nov 24, 2021

from https://swcregistry.io/

[20] L Alt et al. 2018. SMT-based verification of solidity smart contracts. In

ISoLa. Springer, 376‚Äì388.

