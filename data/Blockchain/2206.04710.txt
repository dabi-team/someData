2
2
0
2

n
u
J

9

]

C
D
.
s
c
[

1
v
0
1
7
4
0
.
6
0
2
2
:
v
i
X
r
a

Boston University Department of Physics

Discussion of antum Consensus Algorithms

Samuel Fulton, Lifu Zhang

Abstract Leader election is a crucial process in many areas such as cloud computing, distributed systems, task orchestra-
tion, and blockchain. Oentimes, in a distributed system, the network needs to choose a leader, which would be responsible
for synchronization between dierent processors, data storage, information distribution, and more. In the case where the
network is anonymous, no classical algorithms could solve the problem exactly. However, in the seing of quantum comput-
ers, this problem is readily solved. In this paper, we analyze the quantum consensus algorithm developed by Seiichiro Tani.
We look at the inner workings of the algorithm and develop a circuit representation of the key steps. We review Mochon’s
fault tolerant leader election algorithm. We then implement a simple leader election algorithm on a quantum computer.

Introduction

In this paper, we will introduce distributed sys-
tems and consensus algorithms. We then zoom in
and look at a specific class of distributed systems
known as anonymous or symmetric distributed
From there, we introduce the classi-
systems.
cal approach to breaking symmetry and electing
a leader. We show that there is no classical de-
terministic algorithm for leader election among an
anonymous distributed system. We then introduce
two quantum algorithms developed by Seiichiro
Tani in [Tani et al. (2012)] for anonymous leader
election.
The quantum algorithms for anony-
mous leader election are more than computational
speedups; they are deterministic solutions to a clas-
sically non-deterministic problem. We implement
the second quantum leader election algorithm in
Qiskit. Lastly, we analyze work by Mochon and Ki-
taev, [Mochon (2007)], on developing fault-tolerant
leader election algorithms.

Distributed Systems

We will start with a brief definition of consensus
and distributed systems. We define a distributed
system to be a collection of communicating proces-
sors all working towards a common goal. Let’s con-
sider a toy example. Imagine a distributed system
of computers aempting to factor a large number
𝑁 . Once one processor “believes” that it has fac-
tored the number, it proposes its prime factors, 𝑃𝑖 ,
of N. The other processors in the distributed sys-
tem check if (cid:206)𝑖 𝑃𝑖 = 𝑁 . If the majority of the pro-

1

cessors agree that (cid:206)𝑖 𝑃𝑖 = 𝑁 then 𝑃𝑖 is accepted
as the factors of 𝑁 . All of the processors can now
move on to factoring a dierent prime number 𝑀,
all the while remembering that the prime factors
of 𝑁 have been decided. Other examples where
consensus algorithms come into play include leader
election, blockchain, load balancing, clock synchro-
nization, and more.

Three things characterize a distributed system:
Agreement, Validity, and Termination. As the name
suggests agreement means that all non-faulty pro-
cessors must agree on the same value. In the case
of factoring 𝑁 , all non-faulty processors must ei-
ther agree that 𝑃𝑖 are the factors of N or all agree
that 𝑃𝑖 are not the factors of 𝑁 . Validity is the asser-
tion that under non-Byzantine conditions, the dis-
tributed system will never return an incorrect re-
sult. In the example of the processors aempting
the factor 𝑁 , this would mean that given suicient
time all non-faulty processors would find the same
prime factors of 𝑁 . Termination is the assertion
that given enough time the processors are guaran-
teed to complete the task.

What do we mean when by non-faulty proces-
sors? There are two types of faulty processors.
The first is a processor that experienced a crash.
This processor stops responding to other proces-
sors in the distributed system. This is a common
occurrence. However, since distributed systems
only need the majority of processors to work, crash
failures are readily dealt with. The second type
of faulty processor experiences Byzantine failure.
Byzantine failure occurs when a processor mal-
functions in a way such that it sends incorrect data

 
 
 
 
 
 
Boston University Department of Physics

to the distributed system. An example of a Byzan-
tine processor is a hacked processor. For consen-
sus problems having Byzantine failures is the worst
scenario. Fault-tolerant consensus algorithms ad-
dress crash and Byzantine failure. The most widely
used consensus algorithms in distributed and cloud
computing systems are Paxos and its variants such
as Ra. These algorithms are used for leader elec-
tion and typically tolerate non-Byzantine failures.

antum Consensus

Mazzarella categorizes quantum consensus into
four classes in [Mazzarella et al.
𝜎-
reduced state consen-
expectation consensus,
sus, symmetric state consensus, and single 𝜎-
measurement consensus. Consider a quantum net-
work consist of three qubits, and three observables
of the form.

(2015)].

𝜎 1 = 𝜎𝑧 ⊗ 𝐼 ⊗ 𝐼,
𝜎 2 = 𝐼 ⊗ 𝜎𝑧 ⊗ 𝐼,
𝜎 3 = 𝐼 ⊗ 𝐼 ⊗ 𝜎𝑧 .

The system is in consensus concerning the expec-
tation of 𝜎𝑧 if

𝑇𝑟 (𝜌𝜎 1) = 𝑇𝑟 (𝜌𝜎 2) = 𝑇𝑟 (𝜌𝜎 3).

Noted that antum consensus is achieved by a
quantum network rather than traditional compu-
tational resources. They are similar counterparts,
though we must take account of probabilistic out-
comes due to the stochastic nature of quantum
mechanics. We will show how quantum entangle-
ments can oer an advantage in terms of reaching
an agreement in a distributed seing.

Leader Election

As described in [Bro], ”leader election is the simple
idea of giving one thing (a process, host, thread, ob-
ject, or human) in a distributed system some spe-
cial powers. Those special powers could include
the ability to assign work, the ability to modify a
piece of data, or even the responsibility of handling
all requests in the system.” Leader election is ex-
tremely useful for improving eiciency. A leader
can oen bypass consensus algorithms and sim-
ply inform the system about changes that will be
made. Leaders can help with consistency because
they can see all of the changes that have been made
to the system. By acting as a central data cache,
a leader can improve consistency across the entire
system.

Figure 1:

A single leader does introduce some drawbacks.
Namely, a single leader is a critical point for fail-
ure. If the leader crashes the entire distributed sys-
tem may halt. Furthermore, if a single leader ex-
periences Byzantine failure, the entire system may
waste time following incorrect protocols. However,
many of these drawbacks are mitigated through
the use of consensus algorithms. Oentimes, the
improved eiciency of leader election out ways any
drawbacks. In the next section, we will explore how
leaders can be fairly elected.

Leader Election Algorithm I

One interesting consensus problem is the anony-
mous leader election. Anonymous leader election
is used in the case where we have a collection of
identical processors and wish to designate a leader.
Figure 1 depicts an anonymous distributed system.
In the system, processors do not have unique iden-
tification and all run the same protocol. Thus, the
system is symmetric under all permutations. The
symmetry of the system prevents non-probabilistic
leader election. The classical approach outlined by
Seiichiro Tani in [Tani et al. (2005)] is to install a
coin flip in each processor. Each processor flips
a coin if heads it is eligible for leader election. If
the coin is tails, it is a follower. If multiple proces-
sors get heads, then the protocol is repeated with
the eligible candidates. Note that this process is
non-deterministic and has an expected run time of
𝑂 (log(𝑛)), where 𝑛 is the number of processors.
Let’s compare this to a simplistic quantum leader
election algorithm, which was proposed in [Tani
et al. (2012)]. We will start with a two-processor
scenario. For this algorithm, we have two proces-
sors 𝐴 and 𝐵. We generate the quantum state

𝑊 =

1
√

2

(|01(cid:105) + |10(cid:105)).

2

Boston University Department of Physics

or

(|01(cid:105) + |10(cid:105)) |00(cid:105) .
If the system collapses to the (|01(cid:105) + |10(cid:105)) |00(cid:105) state,
processor 𝐴 measures its |𝑅1(cid:105) state and processor
𝐵 measures |𝑅2(cid:105) state. Whichever processor mea-
sures |1(cid:105) is the leader. If the system collapses into
the state (|00(cid:105) + |11(cid:105)) |11(cid:105), both processors apply
the unitary operation

𝑈 =

(cid:19)

(cid:18) 1 −𝑖
−𝑖
1

1
√

2

to their 𝑆 states.

𝑈𝐴 ⊗ 𝑈𝐵 (|00(cid:105) + |11(cid:105))
= 𝑈𝐴 |0(cid:105) ⊗ 𝑈𝐵 |0(cid:105) + 𝑈𝐴 |1(cid:105) ⊗ 𝑈𝐵 |1(cid:105) ,
= (|0(cid:105) − 𝑖 |1(cid:105)) ⊗ (|0(cid:105) − 𝑖 |1(cid:105))
+ (|0(cid:105) − 𝑖 |1(cid:105)) ⊗ (|0(cid:105) − 𝑖 |1(cid:105)),
= |00(cid:105) − 𝑖 |01(cid:105) + 𝑖2 |11(cid:105)
+ 𝑖2 |00(cid:105) − 𝑖 |01(cid:105) − 𝑖 |10(cid:105) + |11(cid:105) ,
= −𝑖 (|01(cid:105) + |10(cid:105)).

Just like in the first case, processor 𝐴 measures
its |𝑅1(cid:105) state, and processor 𝐵 measures |𝑅2(cid:105) state.
Whichever processor measures |1(cid:105) is the leader.

This algorithm is readily extended into the case
with 𝑛 nodes. Before we start we need one defini-
tion. We say a string 𝑥 = 𝑥1𝑥2...𝑥𝑛 is consistent if
all substrings 𝑥𝑖 are equal. Each processors starts
by generating the state

𝑅𝑖 =

1
√

2

(|0(cid:105) + |1(cid:105)).

The state of the system is

(cid:214)

𝑅𝑖 =

𝑖

1
√
2𝑛

2𝑛−1
∑︁

𝑖=0

|𝑖(cid:105) .

Each processor stores the consistency of the sys-
tem in the qubit |𝑆𝑖 (cid:105). The circuit for the process is
shown in Fig 3

The global system becomes

|𝑅1...𝑅𝑛𝑆1...𝑆𝑛(cid:105) = ((cid:12)
(cid:12)0⊗𝑛 (cid:11) + (cid:12)
2𝑛−2
∑︁

+

|𝑖(cid:105) (cid:12)

(cid:12)0⊗𝑛 (cid:11) .

(cid:12)1⊗𝑛 (cid:11)) (cid:12)

(cid:12)1⊗𝑛 (cid:11)

𝑖=1

Each processor now measures its |𝑆(cid:105) state. The sys-
tem collapse to either

((cid:12)
(cid:12)0⊗𝑛 (cid:11) + (cid:12)

(cid:12)1⊗𝑛 (cid:11)) (cid:12)

(cid:12)1⊗𝑛 (cid:11)

or

3

2𝑛−2
∑︁

𝑖=1

|𝑖(cid:105) (cid:12)

(cid:12)0⊗𝑛 (cid:11) .

Figure 2:

We send the first qubit to processor 𝐴 and the sec-
ond qubit to processor 𝐵. If processor 𝐴 measures
|1(cid:105), we know processor 𝐵 must measure 0 and vice
versa. Whichever processor measures |1(cid:105) becomes
the leader. For 𝑛 processors we generate the state

𝑊𝑛 =

=

1
√
𝑛

1
√
𝑛

(|10...0(cid:105) + ... + |0...01(cid:105)),

𝑛−1
∑︁

𝑘=0

(cid:12)
𝑘 (cid:69)
(cid:12)
(cid:12)2

.

Each processor receives a qubit. Whichever proces-
sor measures |1(cid:105) is the leader. This algorithm ter-
minates aer one run, which is in stark contrast to
the non-deterministic classical leader election.

Algorithm II

There is a more robust approach to quantum leader
election proposed in [Tani et al. (2012)]. Consider
the case with processors 𝐴 and 𝐵. Each processor
prepares the state

|𝑅1(cid:105) = |𝑅2(cid:105) =

1
√

2

(|0(cid:105) + |1(cid:105)).

We send |𝑅1(cid:105) and |𝑅2(cid:105) through the following circuit,
where 𝑋 is the Pauli matrix 𝑋 corresponding to a bit
flip, and the remaining two gates are control not
gates.

The output of the circuit is the state

|𝑅1 𝑅2 𝑆1 𝑆2(cid:105) = (|00(cid:105) + |11(cid:105)) |11(cid:105)
+ (|01(cid:105) + |10(cid:105)) |00(cid:105) .

In words, 𝑆1 and 𝑆2 and both |1(cid:105) if |𝑅1(cid:105) and |𝑅2(cid:105) are
equal. Processor 𝐴 has the state |𝑅1 𝑆1(cid:105) and proces-
sor 𝐵 has the |𝑅2 𝑆2(cid:105) qubit. We note that |𝑆1(cid:105) and
|𝑆2(cid:105) are entangled. Aer each processor measures
its 𝑆 state, the system will collapse to either

(|00(cid:105) + |11(cid:105)) |11(cid:105)

|R1⟩••X••X|R1⟩|R2⟩••X••X|R2⟩|0⟩1|S1⟩|0⟩2|Sn⟩Boston University Department of Physics

𝑈 .
Instead, for each processor we need an addi-
tional register |𝑇𝑖 (cid:105) initialized to |0(cid:105). Set 𝑇𝑖 = 𝑅𝑖 ⊕ 𝑇𝑖 .
𝑉𝑛 as the
Then apply 𝑉𝑛 to 𝑅𝑖 ⊗ 𝑇𝑖 . We define
matrix

𝑅𝑛+1

1√

√
√

2
2
𝑅𝑛
0

1/
(cid:169)
1/
(cid:173)
√
(cid:173)
(cid:173)
(cid:173)
(cid:171)

0
0

√

0
𝑅𝑛 + 1

−

√

𝑛

√

𝑅𝑛
𝑅𝑛𝑒−𝑖 𝜋
−𝑖𝑒−𝑖 𝜋𝐼𝑛
2𝑛
√
2𝑅2𝑛
0

√
2
√
2

𝑒𝑖 𝜋
𝑛 /
𝑒−𝑖 𝜋
𝑛 /
√

−

𝑅𝑛
0

,

(cid:170)
(cid:174)
(cid:174)
(cid:174)
(cid:174)
(cid:172)

where 𝑅𝑛 and 𝐼𝑛 are the real and imaginary
parts of 𝑒𝑖 𝜋
𝑛 , respectively. This matrix is well de-
fined since 0 < |𝑅𝑛 | < 1. With some calcula-
tions 𝑉𝑛 is shown to be unitary. Similar to the
case where 𝑛 is even, for symmetry to be preserved
the system must be in one of the following states
|00(cid:105) ⊗𝑘 , |01(cid:105) ⊗𝑘 , |10(cid:105) ⊗𝑘 , |11(cid:105) ⊗𝑘 . However, aer each
processor applies 𝑉𝑛, the probability of the system
being in any one of these states is

(cid:17)𝑛

(cid:17)𝑛

Prob(|00(cid:105) ⊗𝑛

) =

1
2𝑅𝑛 + 2
(cid:17)𝑛(cid:105)

,

1
√

(cid:104)(cid:16)

√

2

𝑛

𝑒𝑖 𝜋
2𝑅𝑛 + 2

(cid:16)

√

+

= 0,

Prob(|01(cid:105) ⊗𝑛

) =

+

= 0,

1
√

(cid:104)(cid:16)

√

2
(cid:16) −𝑒𝑖 𝜋
√

𝑛

1
2𝑅𝑛 + 2
(cid:17)𝑛(cid:105)

,

2𝑅𝑛 + 2

Figure 3:

If the system collapses to

2𝑛−2
∑︁

𝑖=1

|𝑖(cid:105) (cid:12)

(cid:12)0⊗𝑛 (cid:11)

then the system 𝑅1…𝑅𝑛 is inconsistent. Since the
system is inconsistent at least one 𝑅𝑖 = |0(cid:105) and at
least one (cid:12)
(cid:12)𝑅 𝑗 (cid:11) = |1(cid:105). Any processor that measures
its |𝑅𝑖 (cid:105) = |1(cid:105) is a leader candidate. Any processor
that measures its |𝑅𝑖 (cid:105) = |0(cid:105) is a follower. There
are now at most (𝑛 − 1) leader candidate, for which
the process is repeated. In the event that the sys-
tem collapsed to the ((cid:12)
(cid:12)0⊗𝑛 (cid:11) + (cid:12)
(cid:12)1⊗𝑛 (cid:11) state, we
need to apply a unitary such that the symmetry is
broken. If the number of states 𝑛 is even then we
apply the unitary

(cid:12)1⊗𝑛 (cid:11)) (cid:12)

𝑈 =

(cid:18)

1
−𝑒𝑖𝜋 /𝑛

1
√
2

(cid:19)

,

𝑒−𝑖𝜋 /𝑛
1

to each |𝑅𝑖 (cid:105), which we will show breaks the sym-
metry. For symmetry to be preserved the system
|𝑅1...𝑅𝑛(cid:105) must be in the state |0(cid:105) ⊗𝑛 or |1(cid:105) ⊗𝑛 . Aer
each processor applies 𝑈 to |𝑅𝑖 (cid:105), the probability of
being in either of these states is

,

Prob(|0(cid:105) ⊗𝑛

) =

1
√

2

(cid:104)(cid:16) 1
√

2

(cid:17)𝑛

+

(cid:16) 𝑒𝑖 𝜋
𝑛
√
2

(cid:17)𝑛(cid:105)

,

= 0,

and

Prob(|1(cid:105) ⊗𝑛

) =

1
√

2

(cid:104)(cid:16) 1
√
2

(cid:17)𝑛

+

𝑛

(cid:16) −𝑒𝑖 𝜋
√
2

(cid:17)𝑛(cid:105)

,

= 0.

Thus, aer applying 𝑈 the probability of being in
a symmetric state is zero. Aer applying 𝑈 , if a
processor measures its |𝑅𝑖 (cid:105) to be |1(cid:105), it is a leader
candidate. Since the system is in an asymmetric
state, at least one processor will lose eligibility, and
at least one processor will remain eligible.
If the
number of states 𝑛 is odd we cannot simply apply

Prob(|10(cid:105) ⊗𝑛

) =

(cid:104)(cid:16)

1
√

2

−

√

(cid:16)

√

+

1
2𝑅𝑛 + 2

= 0,

(cid:17)𝑛

1
2𝑅𝑛 + 2
(cid:17)𝑛(cid:105)

,

Prob(|11(cid:105) ⊗𝑛

) = 0.

Thus, the symmetry is broken. Each processor
now measures |𝑅𝑖 𝑇𝑖 (cid:105), and the processors with the
largest value of |𝑅𝑖𝑇𝑖 (cid:105) are candidates for the next
round. Again, since symmetry was broken, at least
one processor will lose eligibility, and at least one
processor will remain eligible.

4

|R1⟩•...•X•...•X|R1⟩|R2⟩•...•X•...•X|R2⟩...|Rn⟩•...•X•...•X|Rn⟩|0⟩1|S1⟩...|0⟩n|Sn⟩Boston University Department of Physics

antum Consensus and Non-
Bias Leader Election

Up to this point, we have been assuming no faulty
processors. Maor Ganz considers the case with a
group of 𝑛 processors who do not trust each other
In his paper, [Ganz
and want to elect a leader.
(2017)], Ganz considers an algorithm that gives an
𝑛 − 𝜖 probability of win-
honest processor at least 1
ning. Using classical consensus, this problem was
shown to be impossible by Mochon in [Mochon
(2007)]. However, using quantum consensus Mo-
chon showed that in certain cases one can formu-
late an algorithm with arbitrarily small 𝜖.

This algorithm is based on a series of quantum
coin flips in tournament style. In other words, pro-
cessors are paired and a single quantum coin flip is
used to eliminate a processor from each pair. The
main diiculty is in creating fault-tolerant coin-
flipping.

There are two types of bias coin flipping: strong
and weak coin-flipping. A strong coin-flipping pro-
tocol with bias 𝜖 is a protocol in which neither party
is capable of forcing the probability of any given
flip to be greater than 1/2 + 𝜖. In weak coin flip-
ping, both parties, Alice and Bob, have a prede-
termined desired coin outcome. For example, a 1
can be thought of as Alice winning and a 0 can be
thought of as Bob winning. In weak coin flipping,
neither player can shi the probability of the coin
flip towards their desired outcome with probabil-
ity greater than 1/2 + 𝜖. In the classical scenario,
weak and strong coin flipping are essentially equiv-
alent. However, as Mochon states ”in the quantum
world the two are very dierent,” [Mochon (2007)].
For this paper, we will only be concerned with weak
coin-flipping.

Machon’s algorithm, or rather his proof of the
existence of an algorithm for weak coin flipping
with arbitrarily small bias is a significant result in
quantum algorithms. However, as stated by Ganz
”the result has not been peer-reviewed, its novel
techniques (and in particular Kitaev’s point game
formalism) have not been applied anywhere else,
and an explicit protocol is missing,” [Ganz (2017)].
With that said, the basic setup for weak coin flip-
ping is quite similar to the setup for algorithms II.
Figure 4 illustrates the process. Alice starts with
state (cid:12)
(cid:11) on space 𝐴 and Bob starts with state
(cid:12)𝜓𝐴,0
(cid:12)
(cid:11) on state 𝐵. On every odd round Alice applies
(cid:12)𝜓𝐵,0
a unitary 𝑈𝐴,𝑖 and projection 𝐸𝐴,𝑖 to space 𝐴 ⊗ 𝑀,
and on every even round Bob applies a unitary 𝑈𝑏,𝑖
and projection 𝐸𝐵,𝑖 to space 𝑀 ⊗ 𝐵. The basic idea is
that by applying specific unitaries and projections,
an honest player can decrease any bias to arbitrar-

ily small values.
Figure 4: retrieved from [Aharonov et al. (2014)]

Mochon’s paper proving this result is 80 pages,
and we do not have the time to go into detail.
However, this is an impressive result in quantum
information and demonstrates some of the beauty
of the field.

Implementation

By using several existing quantum soware pack-
ages, we were able to simulate antum Leader
Election Algorithm II. We used the packages listed
below.

• Qiskit is an open-source SDK for working
with quantum computers at the level of
pulses, circuits, and application modules.

• ProjectQ is an open-source soware frame-
work for quantum computing.
It provides
tools for implementing and running quan-
tum algorithms using either classical hard-
ware.

• SimulaQron allows distributed simulation of
the nodes in a quantum internet network.

5

Boston University Department of Physics

anonymous parties. Mochon demonstrated that
quantum consensus algorithms can be used to
fairly elect a leader even under Byzantine condi-
tions. While these algorithms have not been used
in practice, they oer excellent insight into both in-
formation theory and quantum mechanics.

References

Leader

election in distributed systems.

hps://d1.awsstatic.com.

Aharonov, Dorit, Andr´e Chailloux, Maor Ganz, Ior-
danis Kerenidis, and Lo¨ıck Magnin. 2014. A sim-
pler proof of existence of quantum weak coin
flipping with arbitrarily small bias. SIAM Jour-
nal on Computing, 45.

Ganz, Maor. 2017. antum leader election. an-

tum Information Processing, 16:1–17.

Mazzarella, Luca, Alain Sarlee, and Francesco
Ticozzi. 2015. Consensus for quantum networks:
Symmetry from gossip interactions. IEEE Trans-
actions on Automatic Control, 60(1):158–172.

Mochon, Carlos. 2007. antum weak coin flipping

with arbitrarily small bias.

Tani, Seiichiro, Hirotada Kobayashi, and Keiji Mat-
sumoto. 2005. antum leader election via exact
amplitude amplification.

Tani, Seiichiro, Hirotada Kobayashi, and Keiji Mat-
sumoto. 2012. Exact quantum algorithms for the
leader election problem. ACM Trans. Comput.
Theory, 4:1:1–1:24.

The source of
implementation for simulating
antum Leader Election Algorithm can be found
at
https://github.com/lifuzhang1108/
quantum-consensus.
Pseudo code:

1. Prepare

one-qubit
𝑅1,…,𝑅6, 𝑇1, ...,𝑇6 and 𝑆6, ..., 𝑆6.

quantum registers

2. For each processor, do the following:

3. If 𝑠𝑡𝑎𝑡𝑢𝑠 = “eligible,”

Set |𝑅𝑖 (cid:105) = (|0(cid:105) + |1(cid:105))/
Set |𝑆(cid:105) = |0(cid:105);

√

2

4. Apply circuit in figure 3.

5. Measure |𝑆(cid:105).

6. If |𝑆(cid:105) = |0(cid:105), measure |𝑅𝑖 (cid:105).

If |𝑅𝑖 (cid:105) = |1(cid:105), 𝑠𝑡𝑎𝑡𝑢𝑠 = “eligible.”
If |𝑅𝑖 (cid:105) = |0(cid:105), 𝑠𝑡𝑎𝑡𝑢𝑠 = “ineligible.”

7. If |𝑆(cid:105) = |1(cid:105)

and there are an even number of eligible
processors,
apply unitary 𝑈 to |𝑅𝑖 (cid:105),
measure |𝑅𝑖 (cid:105).
If |𝑅𝑖 (cid:105) = |1(cid:105), 𝑠𝑡𝑎𝑡𝑢𝑠 = “eligible,”
If |𝑅𝑖 (cid:105) = |0(cid:105), 𝑠𝑡𝑎𝑡𝑢𝑠 = “ineligible,”

8. If |𝑆(cid:105) = |1(cid:105)

and there are an odd number of eligible
processors,
initialize 𝑇𝑖 and apply unitary 𝑉𝑛 to |𝑅𝑖𝑇𝑖 (cid:105).
Measure
|𝑅𝑖𝑇𝑖 (cid:105)
𝑅𝑖𝑇𝑖
𝑚𝑎𝑥 (𝑅1𝑇1, .., 𝑅𝑛𝑇𝑛), 𝑠𝑡𝑎𝑡𝑢𝑠 = “eligible,”
If 𝑅𝑖𝑇𝑖 < 𝑚𝑎𝑥 (𝑅1𝑇1, .., 𝑅𝑛𝑇𝑛), 𝑠𝑡𝑎𝑡𝑢𝑠 = “ineli-
gible,”

all

If

=

9. Output status.

Summary

antum computing provides tools for achieving
consensus in a distributed system. It is shown by
Tani that the classically non-deterministic anony-
mous leader election problem is can be solved de-
terministically using quantum computers. As a
proof of concept demonstration, we implemented
the quantum algorithms in Qiskit and simulated
quantum network using SimulaQron, the algo-
rithm can successfully elect a single leader among

6

