2
2
0
2

y
a
M
2

]

C
D
.
s
c
[

1
v
5
4
7
0
0
.
5
0
2
2
:
v
i
X
r
a

Bitcoin P2P Network Measurements: A testbed
study of the effect of peer selection on transaction
propagation and conﬁrmation times

Befekadu G. Gebraselase, Bjarne E. Helvik, Yuming Jiang
Department of Information Security and Communication Technology
NTNU, Norwegian University of Science and Technology, Trondheim, Norway
{befekadu.gebraselase, bjarne, yuming.jiang}@ntnu.no

Abstract—Bitcoin is the ﬁrst and the most extensive decen-
tralized electronic cryptocurrency system that uses blockchain
technology. It uses a peer-to-peer (P2P) network to operate
without a central authority and propagate system information
such as transactions or blockchain updates. The communication
between participating nodes is highly relying on the underlying
network infrastructure to facilitate a platform. Understanding the
impact of peer formation strategies, peer list, and delay are vital
on understanding node to node communication. To this aim, we
performed an extensive study on the transaction characteristic of
Bitcoin through a Testbed. The analysis shows that peer selection
strategies affect the transactions propagation and conﬁrmation
time. Moreover, the default distance-based peer selection strategy
in Bitcoin performs less when there is high arrival intensity and
creates high number forks.

Index Terms—Bitcoin, P2P, Peer selection strategies, Transac-

tion Characteristics

I. INTRODUCTION

Bitcoin is the ﬁrst well-known decentralized electronic P2P
system that uses blockchain technology. It adapts a crypto-
graphic proof of work (PoW) mechanism that allows anony-
mous peers to create and validate transactions through the
underlying peer-to-peer (P2P) network [4]. The P2P network is
vital to the communications of the blockchain system [12][26].
The nodes send and receive messages via the underlying
network infrastructure while the P2P topology is formed at
the application layer [9]. The way nodes form an overlay
topology affects the overall performance, such as transactions
conﬁrmation time [21], block and transaction propagation
delay [6][27], fork rate [6], and stability of the ledger. To
this aim, we prepared a testbed to analyze the impact of peer-
to-peer topology formation, end-to-end delay, and bandwidth
limitation on the performance of Bitcoin.

Bitcoin operates to distribute the ledger among all the par-
ticipants in a ﬂooding P2P network [7]. When a node tries to
join the Bitcoin network, it uses a hardcoded seed to reach out
to the nodes nearby. Through getaddress and node discovery,
each node updates/creates eight peers by default (outgoing
connection), but it can have 125 inbound connections. The
logical connection between participating nodes creates a dense
P2P overlay topology, a mesh network [16][26]. This P2P

topology is responsible for broadcasting new updates to peers
by which they learn and inform each other about transactions
and blocks [26]. The reachability of these messages affects the
ability of the system to process more transactions and secure
the interactions [12][26].

In Bitcoin, the average inter-block generation time is 10
minutes. This enables all the newly generated blocks to reach
the maximum number of nodes in the network. Shortening the
inter-block generation time brings higher block propagation
delay, which increases the temporary forks rate
[19][25],
which wastes the miner resource and makes the transac-
tions wait longer. Alternatively, increasing the inter-transaction
generation also increases propagation delay, affecting the
conﬁrmation waiting time of the transaction [6]. Likewise,
the peer formation strategies also impact the reachability of
the transactions and blocks [15][20]. The nodes forward new
updates to the peer nodes, in which the number of peer nodes
and the delay in between impact the amount of time needed to
forward a message. The network elements delay, processing
delay, and peer formation strategies affect the block’s number
of minutes to reach the maximum number of nodes.

This paper aim to investigate the impact of these network-
related parameters on the overall performance of the technol-
ogy. However, it is difﬁcult because the nodes are independent
and anonymous, making it challenging to collect measurement
data from the unknown nodes. For this reason, a testbed has
been prepared to perform a measurement-based study. As a
highlight, the testbed includes 104 raspbeery pis, six switches,
two-blade racks. Each blade rack can hold up to 40 raspberry
pis. Each raspberry device has Bitcoin Core 0.21.0 installation
with additional scripts to automate transactions and block
generation events. Through this testbed, a dataset has been
gathered containing primary information about the chain, i.e.,
the ledger, and information that is not available from the ledger
but measured from the local mining pool (mempool). Based on
the collected dataset, an explorative study on the transaction
characteristics of Bitcoin has been conducted.

The rest of the paper is organized as follows. The current
state of the art is covered in Section II. Next, Section III
illustrates the testebd setup and what kind of parameters

 
 
 
 
 
 
considered. Then, Section IV illustrates the workﬂow of
transaction handling in Bitcoin. Following that, how P2P
topology formation and the strategies proposed are discussed
in Section VI. Next, Section IX and X reports results gained
from the analysis. Following that, Section XI presents the
impact of fork occurrence over the transaction conﬁrmation
time. Section XII opens up a discussion on what has been
observed in the analysis. Finally, Section VII concludes the
paper.

Most of the research work outlined above analyzes the
discovery of Bitcoin P2P topology or develops a framework
to crawl to the live Bitcoin network to statistics to discover
the structure and security bridges of the technology. However,
little has been investigated about the impact of peer selection,
topology formation, and end-to-end delay on the transaction
characteristics of Bitcoin. To this aim, we developed a testbed
that mimics the real Bitcoin network, enabling us to experi-
ment with collected data and make further analyses.

II. RELATED WORK

There are several works related to studying the impact of
bitcoin peer-to-peer (P2P) on the security and performance of
the technology. Jean-Philippe et al. [26] analyzed examining
the resilience of bitcoin networks from churn, detection of
Sybil nodes, dynamicity, and popularity of peers. Based on
one month of observation, the study showed little churn in
the network, no Sybil attack, and recent updates on tackling
these issues had become effective. Taotao et al. [30] developed
an Ethereum network analyzer, Ethna, to analyze the P2P
network. The analysis showed that the average degree of an
Etherium node is 47, and the P2P network of blockchain such
as Bitcoin degree of distribution follows a power-law. The
network has the characteristics of a scale-free network.

Muntadher et al. [12] proposed locality-based approaches to
improve the propagation delay on the P2P network. This study
considered clustering nodes in the exact geographical location,
where the distance between is used as key on choosing which
nodes to add as a peer. They showed that providing a less
distance threshold would improve the transaction propagation
delay with a high proportion. However, clustering with known
deterministic distance may reduce the security of the network.
Maryam et al. [16] proposed a Bitcoin P2P topology discovery
framework that tracks the information exchange to discover
network topologies. Based on 45 days’ observation, the node
distribution between the USA and China matches closely,
while other parts of the world have fewer active public nodes
to discover.

Yahya et al. [25] proposed an analytical model to study
the network delay and trafﬁc delay in Bitcoin. The study
considered the effect of the default number of connections
and the block size on the performance of the Bitcoin network.
Varun et al. [13] developed a fast and efﬁcient framework
named BTCmap to discover and map the Bitcoin network
topology. The analysis indicates that the online peers’ list
remains valid (less than 1% of changes) at 56 minutes 40 sec-
onds. Otsuki et al. [24] showed that a relay network improves
the propagation time of a block. In addition, the work showed
that relay network decrease in the orphan block rate and
the 50th percentile of block propagation time. However, the
relay network’s improvement of the orphan block rate became
smaller as the Internet speed increased. Regarding the mining
success rate, it was demonstrated that the relay network did
not signiﬁcantly inﬂuence: the differences between utilizing
and non-utilizing nodes were below 0.1 at any utilization rate.

III. MEASUREMENT SETUP AND NODE CONFIGURATION

For the measurement study, as shown in Fig. 1, a testbed
has been implemented to record information about Bitcoin
transactions. The testbed includes 104 Raspberry pis, six
switches, two-blade rack (each holding 40 Raspberry pis).
Each Raspberry pis has an installation of a full Bitcoin core.

Figure 1. Testbed setup (104 Raspberry pis, 6 switches, 2 blade rack )

A. Node Conﬁguration

Raspberry Pi’s are used as a full node that participates in
addition, validations, and generating valid logs. These devices
boot from an SD card. The SD card has Ubuntu Server Version
20.10 for the ARM architecture. In addition, the SD cards
contain the scripts necessary to run the setup, for instance,
scripts to start bitcoin daemon, adding topology and delay and
generate transactions and blocks.

1) Network conﬁguration: Each node interface is conﬁg-
ured with an IP address 192.168.xx.1/24. Subnetting with /24
may not be necessary to have a single node, but we plan to
increase nodes per subnet for the future use case. Assigning
such an IP address also mimics an actual Bitcoin node with its
public address. Since each node becomes part of its network,
we used VPP (Version 21.6 ) to perform routing between
the nodes. It is an open-source software that provides high-
performance switching and routing features for commodity
hardware [35].

The basic architecture of Linux queuing disciplines is shown
in Fig. 2. The queuing disciplines exist between the protocol

Current setup ●93 Rasp Pi’3○2*Blade rack■Each hold 40 Rasp pi3 ●13 Rasp Pi’4●Total = 106 nodes●All config is doneProcessing (VPP). Nodes add delay d to each outgoing packet.
The outgoing packet passes through the router and reaches the
destination. Fig. 3 demonstrates the node to node communica-
tion delay between Nodei and Nodek while the Dell computer
is used as a router. The VPP open source software router
is conﬁgured in Dell OPTIPLEX 9020, with a speciﬁcation
of Intel® 4th generation Core™ i7/i5 Quad Core, Ubuntu
20.04, 32GB memory, Integrated Intel® I217LM Ethernet
LAN 10/100/1000, and 256GB storage capacity.

Figure 3. Node adding delay

B. Time synchronization

The devices have to be time-synchronized to enable accurate
time stamping by each node in the network. For this reason,
we used a well-known time synchronization application called
Network Time Protocol (NTP). NTP is an application that
allows computers to coordinate their system time [1, 3].
The implementation is in userspace rather than in kernel
mode; however, its performance is much better than the other
network time protocols [3]. Usually, it is available for most
Linux distributions, which makes it easier to integrate with
applications. We have 104 nodes that generate events that
require accurate timing and synchronization. To this aim, we
used NTP in our setup, node 1 acts as an NTP server, while
the rest 103 nodes act as a client. The nodes’ synchronize time
means to set them to agree at a particular epoch with respect
to coordinated universal time (UTC) [1]. Fig. 4 shows how
NTP is added to the setup. As we can see from the ﬁgure,
node 1 is the NTP server, while the rest 103 nodes are the
NTP clients.

Figure 4. Time synchronization

C. Raspberry pi speciﬁcation

The Raspberry Pies devices are running the bitcoin protocol
through Bitcoin Core 0.21.0. To identify them, each of them
was given a unique number from 1 to 104. These devices act
as full nodes, and a single device will be referred to as node

Figure 2. Bitcoin node conﬁguration

output and the network device, and the default queuing disci-
pline is a simple packet FIFO queue. A queuing discipline is a
simple object with two key interfaces. One queues packets to
be sent, and the other released packets to the network device.
The queuing discipline makes the policy decision of which
packets to send based on the current settings. As Fig. 2 shows,
the packet leaving each node adds delay to each packet that
follows an Exponential distribution. Since each node has an N
peer list, we can also see N queues. In addition, the bandwidth
is limited with 10 Mbps capacity. These conﬁgurations mimic
the real Bitcoin network’s peer list, and delay arises from
the node and network capacity limitations. To simulate a
network of the whole Bitcoin network, we used NetEM. It
provides Network Emulation functionality for testing protocols
by emulating the properties of wide-area networks [2].

NetEm emulates the actual network trafﬁc since the traf-
ﬁc characteristics are unpredictable. This emulator provides
Normal and Pareto distributions [2, 5]. However, we believe
the inter-packet delay follows an exponential distribution in
our setup. This is another challenge since the NetEm does
not provide this distribution but allows users to add their
distribution. There are different ways to prepare a user-deﬁned
distribution. For instance, extracting the RTT values from ping
statistics gives the mean and standard deviation, then using it
in the NetEm command when activating the distribution table
produced. This is easy to do between a few nodes. Our setup
mimics the actual Bitcoin network of 5670-7279 active full
nodes [7][16]. The Bitcoin documentation states that a node
chooses a peer within shorter latency. We generated random
variates by inverse transform sampling of exponential distri-
bution based on this fact and then used iproute2 marketable to
create an exponential distribution. We set the delay (d) between
11 ms, and it is a shorter end-to-end delay to add nodes. This
11 ms is extracted from an independent full Bitcoin node [27],
we calculated the delay between the eight peers from this node
and took the minimum delay between the node, and its peer
was 11 ms.

2) Node to node delay:

In the previous subsection, we
provided why NetEM is used to add delay and bandwidth
limitation to emulate Wide Area Network (WAN). This sec-
tion shows how independent nodes communicate with each
other through an open-source software router Vector Packet

Network device TCPIPBlockchain applicationUserKernelQueue (Outgoing delay)Outgoing rate = 10mbiteth012NkBlockchain overlay networkExpon(11ms, 11ms)1N Linux queueing discipline:●Raspberry Pi act as Miner●NetEm linux foundationNodeiDell_computerNodekVPP (Router)d1NetEM192.168.xx.1/24192.168.xy.1/24P=propagation + queueing + transmission + processing delayNode1Node10Network(VPP)Node70NodekNode104Node2NTP servertime?12:00:0012:00:0012:00:0012:00:0012:00:0012:00:00NodeiDell_computerNodekVPP (Router)d1d1+ P    NetEM192.168.xx.1/24192.168.xy.1/24P=propagation + queueing + transmission + processing delayNode1Node10Network(VPP)Node70NodekNode104Node2NTP servertime?12:00:0012:00:0012:00:0012:00:0012:00:0012:00:00n where n is the given number. As we see from Table I, in
total, the setup has 93 Raspberry Pi 3 and 11 Raspberry Pi 4.
There are some differences between Raspberry Pi 3 and Pi4
that are relevant for the setup. Raspberry Pi 4 Plus has a CPU
clock speed of 1.5 GHz, 0.1 GHz more than Raspberry Pi 3,
which has a clock speed of 1.4 GHz. Additionally, Raspberry
Pi 3 has an Ethernet port with a maximum throughput of 300
mbps while Raspberry Pi 4 has Gigabit Ethernet.

Table I
RASPBERRY PI MODELS

Figure 6. Legacy Relaying

Processor
Memory
WiFi
Ethernet
SD card
# nodes

Raspberry Pi 3 Model B+
1.4 GHz
1GB RAM
2.4GHz Wireless LAN
Gigabit Ethernet
8-16 GB
93

Raspberry Pi 4
1.5 GHz, 64 bit CPU
1-4GB RAM
2.4Ghz and 5Ghz Wireless
Gigabit Ethernet
8-16 GB
11

IV. WORK FLOW OF BITCOIN

This section gives essential background on how Bitcoin
handles transactions. In addition, how the nodes communicate
and discover each other.

Figure 5. Blockchain process ﬂow

1) Workﬂow: Fig.5 illustrates the workﬂow of transac-
tion arrival, block formation, propagation, and validation in
Blockchain. Brieﬂy, after transactions are generated by the
users, they are sent to all full node validation nodes. Upon
the arrival of a transaction at a full node, the node stores
the transaction in its backlog (memory pool), waiting for
conﬁrmation. Besides,
the node may choose unconﬁrmed
transactions in the backlog to pack into a new transaction
block. If the puzzle ﬁnding is successful, this newly generated
block is added to the Blockchain. This information is sent
to all the nodes. At each node, the validity of the newly
generated block is checked. If the validity is conﬁrmed with
consensus, the updated Blockchain is accepted, and the new
block transactions are validated. Such validated transactions
are removed from the mempool at each full node that then
repeats the above process.

2) Node to node interaction: Bitcoin nodes form a peer-
to-peer network, while each node by default can have eight
peer list. It is a logical link that allows peers to push/pull new
updates to the neighbors. Fig. 6 shows node to node message
exchange sequence. The new arrival block or transaction

picked up node A. Then, a block/transaction is validated (the
grey bar) by Node A, who then sends an inv message to Node
B requesting permission to send the block. Node B replies
with a request (getdata) for the block/transaction, and Node A
sends it.

3) Network Discovery: A Bitcoin node is allowed to main-
tain up to 132 connections (maxconnections) as default, of
which 8 are outgoing connections and rest are incoming con-
nections. Peers listen on port 8333 for inbound connections.
When node wants to join the network, as it
is a public
blockchain, and node one uses DNS names (called DNS seeds)
hardcoded into Bitcoin Core. From this point, the new node
updates its peer list by discovering nodes close by In this way,
new nodes select peers that are part of the network. This peer
formation is called distance-based since it highly depends on
adding nearby nodes. This peer list uses as a reference list
to send an inventory or receive messages from the neighbor
nodes. After the node joins the network, it can take part in
propagation, consensus, and block generation. These nodes
act as a full node, which means the users/owner can create
a transaction and create a block, forward the new updates to
the network. Each block created by the nodes that are valid
enough to be included in the chain will contain the hash of
previous records of the blocks. Blocks that are created but
ignored by the network become orphan blocks. Mostly these
blocks become fragments that will never be used but waste all
the computation cost and resources.

4) Peer list: Nodes can have up to 132 connection lists.
This is the combination of incoming and outgoing peers.
When a node initiates the connection, it is called outgoing,
or if the connection initialization comes from other nodes, it
is incoming bound. The number of peers (P) represents the
number of outgoing peers of each node. The total connection
list is the sum of P outgoing peers plus incoming peers (Q).
In this work, the peer list (pl) is 2P.

V. SETUP INPUT

This section describes the input parameters such as inter-
transaction generation time, inter-block generation time, and
node to node delay added to the network.

The transaction and block generation events must also
include similar characteristics to mimic the entire Bitcoin
network. The transactions inter-arrival to the measurement

P2P networkCommunication Block Generation Block Propagation Communication Someone in P2P network request a transactionThe request is broadcasted into nodes in P2PThe miners validate and verify the validity of the transactions. Then, generate a block.The new block pushed to the neighbor nodesBacklogArrival of Transactions Memory pool Block generation Block propagation Node ANode Bblock/transactionheaders or invgetdatablock/transactionValidation(a) Distance-based approach

(b) Mixed-based approach

Figure 7. Bitcoin overlay network example (P=3), while considering only outgoing links

node follow an exponential distribution [21][28]. Similarly,
the inter-block generation also follows an exponential distri-
bution [8][28].

node is measurement node. Similar to the previous transaction
generation case, in here also the Algorithm 2 takes the inter-
generation interval and duration of the simulation in seconds
as an input.

Initialisation: Tt = timenow() + Td
Condition: Td ≤ Tt
while T rue do

Algorithm 1 Generate transaction
1: procedure POISSON(λ(t), Td)
2:
3:
4:
5:
6:
7:
8:

wt ∼ negExp(λ(t))
if timenow() + wt < Tt then

time.sleep(wt)
generateT ransaction()

Initialisation: Tt = timenow() + Td
Condition: Td ≤ Tt
while T rue do

Algorithm 2 Generate Block
1: procedure POISSON(λ(t), Td)
2:
3:
4:
5:
6:
7:
8:

time.sleep(wt)
generateBlock()

wt ∼ negExp(λ(t))
if timenow() + wt < Tt then

1) Transaction inter-generation time: Each node acts as
a full Bitcoin node that creates, validates, and propagates
transactions and blocks. To this aim, nodes have a script
that generates transactions and blocks following an exponen-
tial distribution. The script accepts duration and the inter-
generation interval in terms of seconds as an input parameter,
as illustrated in algorithm 1. λ(t) is the inter-generation time
(tg i+1 - tg i) in seconds for each node. Furthermore, Td is
the total duration of running time in seconds. The result of
the inter-generation time distribution follows an exponential
distribution.

2) Block inter-generation time: Bitcoin network generates
a block on average 10 minutes. This makes the recent block
propagate to the network before the next generation. Bitcoin
adjusts the difﬁculty after 2016 blocks are generated to control
the average inter-block generation time. Although this is true
for live Bitcoin nodes, the Bitcoin core regtest mode has
difﬁculty close to zero, which means there is no difﬁculty gen-
erating a block. However, to mimic the real Bitcoin network,
we developed a script that produces a block on average ten
minutes. Overall, we have 104 nodes, which mean a block
is generated in 103*600 second (61800), the remaining 1

3) Node-to-node delay:

In the actual Bitcoin network,
nodes are distributed across the globe, which geographically
and domain-wise isolated from each other. Since the under-
lying network infrastructure is providing the communication
platform and the actual network trafﬁc is unpredictable. It is
common to consider a distribution that captures the network
delay between two participating ends. To mimic the delay that
arises from the network element and distance between the
participating nodes. We introduced a delay (d) that follows
an exponential distribution with the shorter mean of 11 ms.

VI. NETWORK TOPOLOGY

To study the topological impact, we consider three peer

formation cases: distance, random, and mixed.

A. Distance-based peer selection

Distance-based peer selection approach enables peers to
form closeby neighbor peer creating P2P topology. A Full
Bitcoin node can have eight peers by default, but It can have
132 connection link points. The distance metric depends on
adding nodes nearby.

C-1C12345K-2KK+1K+2K+3K+4K-11Measurement nodeKNodeConnectionC-1C12345K-2KK+1K+2K+3K+4K-1Algorithm 3 Distance-based
1: procedure DISTANCE(P, k, C)
2:

pl= {l—l= (k+i) mod C, i=1, . . . ,P}

Algorithm 3 illustrates the distance-based peer selection
method. The procedure takes the number of peers to add
(P), the current node (k), the total number of nodes (C). The
algorithm add peer that are closeby.

B. Random-based peer selection

(a) Bitcoin live full node

Unlike the ﬁrst distance-based approach, the random-based
method does not depend on the proximity of nodes, instead on
the random selection of the peer to add. Even-though, Bitcoin
is a distributed P2P technology where each node acts and does
as an independent node, in which it has less knowledge on the
global distribution of the nodes. For the random-peer selection
method, we consider nodes know the number of Full active
nodes in the network they are participating in. Similar to the
distance-based approach, Algorithm 4 illustrates the random
peer selection method. The procedure takes the number of
peers to add (P), the current node (k), the total number of
nodes (C). The method adds randomly selected nodes as its
peer list.

Algorithm 4 Random-based
1: procedure RANDOM(P, k, C)
2:
3:
4:

Initialisation: pl = {}, pc = {1, . . . , C} \ {k}
for i = 1 step 1 until P do

pl←pl ∪ (RANDOM(pc \ pl))

C. Distance + Random (Mixed)-based peer selection

The third case is to combine distance-based and random-
based approaches. In these combinations, the distance-based
method adds n-1 peers and the random-based approach adds
the last node by choosing randomly. This is to introduce a
random link to the distance-based peer list. Same as to the
previous two approaches, Algorithm 5 illustrates the mixed
peer selection method. The procedure takes the number of
peers to add (P), the current node (k), the total number of
nodes (C). As discussed in the previous subsection, the method
adds the n-1 nodes based on a distance-based approach. The
random-based approach adds the last node.

Algorithm 5 Mixed-approach
1: procedure RANDOM(P, k, C)
2:
3:
4:

pl = {l|l = (k + i) mod C, i = 1, . . . , P − 1}
pc = {1, . . . , C} \ {k} \ pl
pl ← pl∪RANDOM(pc)

From this point on forwarding, we use random to represent
a random-based approach, normal for distance-based default
approach, and mixed for the approach that mixes the two
approaches.

(b) Testbed

Figure 8. Transaction propagation delay between active full nodes, where
λ = 3 transactions per second per network, eight outgoing peers per node

VII. SETUP VALIDATION

This section relates the timings in the testbed with those in

the live Bitcoin network.

A. Node to node delay

In our previous work [27], an independent Bitcoin full node
was deployed to collect transactions and block related feature
sets. We used observations from this node to validate some of
the input parameters and results. For instance, our nodes have
132 connected nodes. Eight of these nodes are peer nodes,
while the rest are incoming bound nodes. The average ping
delay between these nodes from the Bitcoin application is
156.20 ms with a variance of 152.23 ms. This ping is handled
in a queue with other commands in the application layer to
include the processing backlog. However, we also conducted
further analysis to ping these nodes from outside of the Bitcoin
core, resulting in an average of 80 ms second in deference.
This 80 ms accounts for processing backlog.

As mentioned in the previous section, the eight peers are
more important than others. These peer nodes synchronize
more often than the other 125 incoming bound nodes. For
this purpose, we conducted an independent investigation to see
the delay between our node to eight peer nodes. Our analysis
shows that the minimum delay between our node and the other
nodes is 11ms with a variance of 7ms. This 11 ms delay is used
in our setup as a minimum delay guarantee between nodes.

B. Information propagation

This subsection investigated how fast a transaction propa-
gates in the Bitcoin network and how the number of nodes

Measurement node    xxx.xxx.200.33Node2Node 3d=(66ms, 12ms)d=(11ms, 3.145ms)Tpro=(21s, 4s)Tpro=(5s, 2s)Node 4Node1d=(29ms, 13.188ms)Tpro=(6s, 4s)d=(138ms, 6.382ms)Tpro=(14s, 7s)xxx.xxx.108.164:8333xxx.xxx.100.11:8333xxx.xxx.210.204:8333xxx.xxx.240.6:8333Measurement node (node 1) 192.168.1.2/24Node3Node 4Tpro=(4s, 3s)Tpro=(5s, 2s)Node 5Node2Tpro=(3s, 1s)Tpro=(7s, 4s)192.168.2.2:8333192.168.5.2:8333192.168.4.2:8333192.168.3.2:8333d=(11.67ms, 3.188ms)d=(14.67ms, 7.344ms)d=(16.67ms, 8.147ms)d=(17ms, 8.3ms)impacts this. We considered four publicly available nodes to
collect mempool state and compare it with our node. Fig. 8(a)
shows the delay between our node with four peer nodes that
provide their state of the mempool. The ﬁgure shows only
four out of eight nodes because the remaining four nodes
were unreachable. As we can see from the ﬁgure, transaction
propagation between nodes ranges from 13 to 20 seconds [10].
This is mainly because the P2P communication protocol makes
processing check the validation of each transaction before
forwarding an Inv message to its peers. At the same time,
nodes that received the Inv message have to check if the
transaction is at the mempool or seen before inside a block.
The node sends a getdata message and gets the new transaction
when the check is completed. Even though the delay between
nodes is less than 100 ms, processing a transaction takes
longer.

The analysis also shows that the number of transactions
waiting in the mempool varies between peers in an instant
of time. However, the difference between our node and the
above four nodes used for the analysis ranges from 600-700
transactions. For instance, each node has 1566, 3976, 3000,
2244, and 2300 transactions waiting at the mempool.

We tested out the testbed based on the live Bitcoin full
node observation to see if similar transaction characteristics
occurred. As we can see from Fig. 8(b),
the transaction
propagation delay between the measurement node, node 1, to
its four peers is below 7s. This demonstrates that the timings
in testbed are similar to those in the real Bitcoin network.

C. Inter-block generation and Inter-transaction arrival time

The average inter-block generation time is close to 10
minutes in the actual Bitcoin network. After the 2016 blocks,
the difﬁculty of solving the puzzles increases to make sure
nodes generate on an average of 10 minutes so that
the
new block reaches the maximum number of nodes in the
network. Similarly, the transaction inter-arrival time to the
mempool also follows exponential distribution [27][28]. These
parameters are considered in our setup as an input parameters.

VIII. MEASUREMENT DATA COLLECTION

A dataset consisting of four parts has been collected by the
testbed, as show in Fig. 9. One aspect of the dataset records
each node transaction and block generation events. When a
node Node k, where k ∈ [2, 104], generates transactions, it
records a log about the transaction generation time (tg) and
transactions id (txid). Similarly, when the node generates a
block, it records the block generation time(bg) and block hash
(hash). The second part of the data contains information about
the transactions arrival time at mempool (ta), transaction size
(tsize), transaction fee (tf ee), transaction id (txid), and block
height (Bheight). The block height (Bheight) in which the
transactions belong can be empty or number depending on
if the transaction is added to the block or just new arrival.
The third part collects information about the block from the
main chain, such as block hash (hash), block size (bsize),
block time (bt), and block height (Bheight). The fourth part of

Figure 9. Data collection

the data collection contains extracted details about the block
tree of the chain, such as Block hash (hash), Block height
(Bheight), Branchlen (Bl), and Status (Bs). The Branchlen is
the length of the brach in the block tree. It holds 0 for the
main chain or number, indicating the length of the soft fork
in terms of the number of blocks in the side chain. The Status
(Bs) indicates the Status of the block, whether it is active,
part of the main chain, valid-fork means a block is a fork or
invalid block, which means the block is not valid enough to
be a candidate.

The second, third and fourth part of the data is collected
from a single node. This node is considered a measurement
node, in our case, node 1 is measurement node. Node 1 is
part of the network invalidation and processing transaction at
the mempool, but it does not generate transactions or blocks.
Instead, it collects information about the transactions from
its mempool (Mempool data). When the simulation times are
over, it also extract information about valid blocks from the
main chain (Global data, Block tree data).

Fig. 9 demonstrates the collected feature set from the nodes.
As we can see from the ﬁgure, measurement node 1 collect
information about the state of the mempool and keep track
of the status of the main chain. It also illustrates the primary
key used to link the data set from each device with node 1.
By using the datasets, we performed analysis on transaction
propagation (ta − tg) time and conﬁrmation time (bg(i+6) -
tg(x)), where transaction x goes into block i and i+6 represent
when the transaction is six-block deep into the main chain.

In addition to the above-collected information, we also
extracted the state of the block tree. This information includes
which block is fork (hash), at which height this event hap-
pened (Bheight), and the number of the block within the same
branch (Bbranchlen). We used these extracted feature sets to
count the number of forks that happened while considering

Node kTransaction log fileTransaction id (txid) Transaction generation time (tg)Block log file Block hash (hash)  Block generation time (bg)Measurement node 1Mempool data Transaction id (txid)  Transaction mempool time (ta) Transaction fee (tfee) Transaction size (tsize) Block height (Bheight)Global dataBlock hash (hash)  Block main chain timestamp (ba) Block size (Bsize) Block height (Bheight)Block tree dataBlock hash (hash)  Branchlen (bl) Status (Bs) Block height (Bheight)different peer formation strategies and how they impact the
conﬁrmation time of transactions inside a fork block. These
datasets are downloaded and post-processed after the simula-
tion period is completed.

IX. TRANSACTION PROPAGATION TIME

This section reports results and observations from an ex-
ploratory analysis of the collected data. This part covers the
impact of transaction intensity while illustrating the impact of
peer lists per node.

Figure 10. Transaction propagation and conﬁrmation time sequence

Bitcoin uses a gossip-like protocol to broadcast updates
throughout the network [16]. When nodes receive new transac-
tions, it validates and veriﬁes the validity of the transactions,
then sends an Inv message to peer nodes to notify them if
the peer nodes want these new transactions. Then push the
transaction to the peers. Due to this continuous process, a delay
in transaction propagation happens. It combines validation
time and the time it
takes to disseminate the transaction.
Fig. 10 shows a time sequence of the life cycle of transactions.
In this section, we focus on the transactions propagation, and
this is the time transaction generated (tg) until it reaches the
memppol of measurement node, in our case, node 1. The time
difference between tg and ta is the propagation time, where ta
is the time transaction arrived at the memppol of node 1, and
tg is the time of the transaction generated by one of the nodes
(2-104). As we can see from Fig. 10, the red line indicates
the time length of transaction propagation time.

Fig. IX shows the average transactions propagation time
in seconds while considering different peer formation strate-
gies. The x-axis represents peer selection strategies, the y-
axis represents the propagation delay in seconds, and the
legend shows the arrival intensity. Fig. 11(a) and 11(b) reports
that when the arrival rate is high, which means each node
generates on average six transactions per second, in respective
of the number of peers per node, the transaction propagation
increases. However, with a low arrival rate, three transactions
per minute per node, the transaction propagation is smaller
than 170 seconds. In addition, when the number of peers
is higher, the normal approach tends to perform less overall
random-based peer selection better than the other two.

1) Distribution of propagation time: Fig. 12 and 13 reports
the sample result showing the transaction propagation time in
terms of low to a high arrival rate while the number of peers
is ﬁxed to eight. The x-axis represents the propagation time in

(a) P = 8

(b) P = 4

Figure 11. Average transaction propagation times for the various peer
formation strategies, no. of peers P and low (3 t/min) and high (6 t/min)
intensity generation rate λ. Error bars indicate 95% conﬁdence intervals from
10 independent runs

seconds. The y-axis is the log, while the three peer formation
strategies are used.

Figure 12. Transaction propagation delay, where λ = 3 transactions per
minute per each node (low intensity) Y-AXIS LABLE: P (ta − tg > t) X-
AXIS LABLE: t

Fig. 12 shows the transactions propagation delay with the
three peer selection stratiegies. In most cases (80%), the ﬁgure
reports that transaction propagation in random peer selection
has less than 300 seconds propagation time, whereas it has 400
seconds during the Mixed approach, while for Normal peer
selection transactions sees close to 500 seconds propagation
time. In three cases, the transaction propagation time can grow
more than 1000 seconds in 1% of the cases. Relatively, 90%
of the transactions see propagation time less than 500 seconds
for mixed and normal approaches. Nevertheless, random-based
peer formation brings less than 450 seconds of propagation
time.

Figure 13. Transaction propagation delay, where λ = 6 transactions per
minute per each node (high intensity) Y-AXIS LABLE: P (ta − tg > t)
X-AXIS LABLE: t

TgTaTx_add_BTx_at_confTproTaddTconfBg6 block deepBg(i+6)Transaction propagationTransaction confirmation 500100015002000Second10-510-40.0010.0100.1001LogNormalRandomMixed50010001500200025003000Seconds10-510-40.0010.0100.1001LogNormalMixedRandomFig. 13 also illustrates the transactions propagations delay
while three peer selections are considered. In most cases
(80%), the ﬁgure reports that transaction propagation in ran-
dom peer selection has less than 400 seconds propagation
time, whereas it has 500 seconds during the Mixed and
Normal peer selection approach. In three cases, the transaction
propagation time can grow more than 1500 seconds in 1% of
the cases. Relatively, 90% of the transactions see propagation
time less than 700 seconds for mixed and normal approaches.
Nevertheless, random-based peer formation brings less than
600 seconds of propagation time.

Overall, for low transaction intensity, random peer selection
performs better than the other two approaches. However, when
we pushed the intensity by double, at least 60% of the time, all
the peer selection strategies brought a very close transaction
propagation delay.

X. TRANSACTION CONFIRMATION TIME

In Bitcoin,

the transaction is considered conﬁrmed six
blocks deep in the main chain. This ensures no double-
spending while maintaining the security by linking the pre-
vious block with the other six blocks requiring more com-
putational effort
to modify the conﬁrmed transactions. In
the ’regtest’ setup, the transaction is considered valid 101
blocks deep. However, our analysis used six blocks deep
conﬁrmation to obtain results representative for the live Bit-
coin blockchain. Fig. 10 demonstrates the time sequence of
transaction conﬁrmation time. The transaction conﬁrmation
time is the difference of the tg and the tconf . The tconf
is
the amount of time for the Bitcoin network to generate six
valid blocks. As similar to the previous case, tg is the time
a transaction is generated by one of the nodes, and tconf is
the time between the blocks from the main chain extracted at
node 1. As we can see from Fig. 10 the red line indicates the
time sequence of the transaction conﬁrmation time.

Fig. X shows the transaction conﬁrmation for the different
peer formations strategies and number of peers. The ﬁgure
also shows that peer formation strategy impacts the overall
conﬁrmation time of a transaction. The x-axis represent the
peer selection strategies while the y-axis indicates the con-
ﬁrmation time in seconds. Fig. 14(a) and 14(b) reports the
average transaction conﬁrmation time, considering arrival rates
and peer selection strategies. The plots show that in respect
of the number of peers per node, the arrival rate has a higher
impact on the conﬁrmation time. It is worth highlighting that
peer formation strategies bring less effect when the arrival rate
is lower.

1) Distribution of the conﬁmation time: Fig. 12 and 13
shows the distribution of the transaction conﬁrmation times
in terms of low to a high arrival rate with the number of peers
is ﬁxed to eight. The x-axis represents the conﬁrmation time in
seconds. The y-axis is the log, while the three peer formation
strategies are used.

Fig. 15 reports the transaction conﬁrmation time in seconds.
The x-axis represents the time it takes for a transaction to
get conﬁrmed, and the y-axis represents the log. The three

(a) P = 8

(b) P = 4

Figure 14. Average transaction conﬁrmation times for the various peer
formation strategies, no. of peers P and low (3 t/min) and high (6 t/min)
intensity generation rate λ. Error bars indicate 95% conﬁdence intervals from
10 independent runs

Figure 15. Transaction conﬁrmation time, where λ = 3 transactions per
minute per each node (low intensity) Y-AXIS LABLE: P (tg − bgi+6 > t)
X-AXIS LABLE: t

peer selection strategies are compared. In almost 80% of the
cases, random and mixed peer formation strategies produced
transaction conﬁrmation time less than 1654 seconds, while
the normal approach introduces twice the conﬁrmation time. In
1% of the time, mixed and random strategies give conﬁrmation
time greater than 2000 seconds, while normal approaches
double this amount.

Figure 16. Transaction conﬁrmation time, where λ = 6 transactions per
minute per each node (high intensity) Y-AXIS LABLE: P (tg − bgi+6 > t)
X-AXIS LABLE: t

Fig. 16 reports the transaction conﬁrmation time in sec-
onds. The x-axis represents the time for a transaction to
get conﬁrmed, and the y-axis represents the log. The three
peer selection strategies are compared. In almost 80% of the
cases, random and mixed peer formation strategies produced
transaction conﬁrmation time less than 4000 seconds, while the
normal approach introduced 1000 seconds less conﬁrmation

10002000300040005000Seconds10-510-40.0010.0100.1001LogMixedRandomNormal1000200030004000500060007000Seconds10-510-40.0010.0100.1001LogMixedRandomNormaltime. In 1% of the time, all the strategies give conﬁrmation
time greater than 5000 seconds.

Overall, for low transaction intensity, random peer selection
performs better than the other two approaches. However,
when we pushed the intensity by double, we saw the all
strategies yields more similar distributions. Increasing the
arrival intensity by double also affected the conﬁrmation time.
More transactions see higher conﬁrmation time.

seconds. Fig. XI-A1 reports the inter-block generation time
between fork and valid block in the Bitcoin network. The
x-axis represents the blocks where the fork happened, and
the y-axis indicates the inter-block generation time in seconds
between fork and valid block. As we can see from the ﬁgure,
the maximum inter-block generation time between valid and
fork block is 35 seconds, which happened in the 675407 block
height.

XI. TEMPORARY FORKING

A temporary fork occurs when two miners independently
ﬁnd and publish a new block referencing the same previous
block. The end-to-end delay between nodes inevitably leads
to a temporary fork. This end-to-end delay also depends on
the network topology that synchronizes between nodes. In this
section, we demonstrate how the peer selection strategies affect
the fork rate.

A. Introduction to temporary fork

Figure 17. Block propagation time sequence

Fig. 17 llustrates the time sequence of block propagation.
time t1 and t2 then pushed
Two blocks are generated at
to the neighbor nodes with some Bpro delay. When Nodek
receives these two blocks simultaneously, it validates each
block is valid. Suppose both blocks point to the same previous
hash of the block. Then the node compares the number
of conﬁrmations and an earlier timestamp. It selects one
block based on these criteria, increases the conﬁrmation, and
forwards it to the neighbor nodes. Similarly, Nodek+1 will
do the same operations, and this will increase the number of
conﬁrmation numbers of the valid block that will lead the
orphan (fork) block to become less important as time goes.
Once all the N nodes see these two blocks, the network ignores
the orphan blocks while the valid block is added to the main
chain [17]. In this way, the Bitcoin network maintains the
ledger’s consistency and security. However, this temporary
fork impacts the overall performance of the technology. The
validated transaction from an orphan block which are not part
of the valid block goes back to mempool to wait for pick-up
again, increasing the average conﬁrmation time. In addition,
miners who created the ignored block (orphan block) wasted
considerable resources for less gain because of the propagation
delay.

1) Example: Based on our full independent Bitcoin live
node [27], we were able to see four valid forks in the main
chain from 578141 to 678853 block height. These four blocks
contain transactions from 1200 to 2400 per block. The average
generation time between to blocks forming a fork is 12.5

(a) P = 8

(b) P = 8

Figure 18. Fork vs valid block inter-generation time in seconds

Fig. 18(b) shows the block inter-generation time between
valid and fork block, while the normal based peer selection,
high arrival rate, and pl=8. The ﬁgure illustrates that block
inter-generated time less than 40 seconds has a high probabil-
ity of becoming fork. This plot is to demonstrate what we see
from Fig. 18(a), which is from live bitcoin node, is also seen
from our setup.

B. Peer selection strategies impact on the fork rate

The peer selection strategies impact the performance of
the technology. In this work, we considered three strategies
and showed the effect on the transaction propagation and
conﬁrmation time. In this subsection, we demonstrate its
impact on the occurrence of forks.

(a) Number of fork

(b) Conﬁrmation time

Figure 19.

Impact of fork in transaction conﬁrmation time

Fig. 19(a) reports the number of fork blocks happening
while different peer selection strategies adopt, high arrival
intensity, and the number of peers per node is 8. As we can
see from the ﬁgure, the normal peer selection strategies bring

BiNodekBproBit3t1t2Nodek+1Bprot4NodeNBprotfBlock validationNodek-iNode2kBproa higher number of temporary forks. The mixed and random-
based peer selection strategies produce less number of fork
blocks.

C. The occurrence of Fork impacting transaction conﬁrmation
time

In the fork event, transactions inside a fork block return to
the mempool for pick up. This makes these transactions wait a
longer time before conﬁrmation. Fig. 19(b) reports the average
transaction conﬁrmation time seen by transactions inside the
fork block. When the network ignores the fork block, all
the transactions inside return back to the mempool for the
pickup, the main issue with this approach is fork block may
wait for more than one block to be ignored by the network,
depending on the length of the pruned branch, which leads to
the transaction stuck and waiting for a longer time. Fig. 19(b)
also demonstrates this property, as we can see from the ﬁgure,
the normal peer selection strategy produces a high number of
fork blocks, which also leads to transactions waiting longer
than 6000 seconds.

Similarly, the mixed peer selection strategy also produces
a close number of fork blocks as a normal peer selection
approach, in which we can see the impact on the transaction
conﬁrmation time is more than 5500 seconds. However, the
random peer selection strategy performs better than the ﬁrst
two approaches regarding the number of forks and conﬁrma-
tion time, leading to a transaction conﬁrmation time of fewer
than 3670 seconds.

D. Valid vs fork block correlation

When two blocks arrive in a short time in deference while
having the same hash of the previous block, we call it a
temporary fork. When this event happens, one of the blocks
will become part of the chain, and the other will become an
orphan block. Since the comparison is based on the previous
block’s hash, we further analyze the extent to which valid,
and fork blocks share the same transactions. Table II shows
the correlation in percentage between the valid and fork block
while considering different peer selection strategies.

Table II
CORRELATION

Peer selection strategies
Normal
Mixed
Random

Correlation valid vs fork block ((µ, σ))
(88%, 6%)
(90%, 5%)
(90%, 3%)

The mixed and normal peer selection strategies produce four
to six fork blocks, which has from 90% of the transaction
are the same, but the rest 10% are unique transactions which
be forced to return to the backlog for more waiting time.
Similarly, for the random-based strategy, the valid and fork
block shares 90% of the transactions are similar, but
the
remaining wait more time to be added to the chain.

XII. DISCUSSION

1) Proposed approaches: The P2P formation strategies are
essential
in propagating information between participating
nodes. In this work, we showed that peer selection strategies
affect the overall performance of Bitcoin. There has been some
research work proposing schemes and methods in reducing the
propagation delay in Bitcoin. This proposal focuses on either
introducing a compact block [22][29] or having some relay
nodes [18][24] in the middle to provide a pipeline to push more
updates to the other nodes. The compact block may introduce
better performance in propagating the information based on
the available bandwidth between participating nodes [22].
However, this method focuses on how to propagate blocks
in the network than how to propagate transactions. Based on
our observation, nodes may have a different number of arrival
at the backlog waiting. The compact block method has to push
more than half of the block content in such cases.

Using relay nodes to reduce propagation delay is another
method proposed by researchers. This method relies on the
relay nodes having a higher number of peer nodes from the
network, enabling push more updates in the network. The main
challenge in this approach is that the relay nodes become a
security bridge or vulnerability point. Attacking these nodes
or taking control gives extra incentive to earn more or disrupt
the overall activity in the network.

The best strategy to improve the propagation time is to
improve the communication protocol. The protocol spends
signiﬁcant time validating and updating the same transaction.
Furthermore, reducing the peer to peer network diameter by
having peers other than the nearest may improve. The random
strategies in this paper are simple examples

2) Transaction propagation and conﬁrmation times: The
transaction propagation and conﬁrmation time show some
values higher than expected. This is because of the impact of
the P2P formation strategies and P2P legacy relaying protocol.
Some of the transactions have to return to mempool because
of fork occurrence. For instance, the normal-based approach
produces more forks than the other two approaches. In such
cases, the transaction inside the fork block returns to the
backlog for pick up, some of these transactions will be added
to the new recent block, but others will wait for another block
generation event. In addition to this, the processing capacity
of the raspberry pi devices may contribute to some extent.
Although we analyzed to observe the total usage, the bitcoin,
on average, in each device uses 114% CPU and 16% RAM.
It is worth highlighting that the raspberry pi used has 64 bit
quad-core Cortex-A53 and Cortex-A72, which is good enough
to handle the trafﬁc generated from Bitcoin and background
processing.

3) Impact of temporary fork: The number of fork event
occurrences has been reduced recently with the new Bitcoin
core release [17]. However, the Bitcoin network is still not
tested if it can handle high loads. Based on the current state
where 3.3 to 7.2 transactions are processed per second, having
arrivals at the mempool from 1700-2600 transactions waiting

for pick up [31, 32, 33, 34]. The P2P network may handle
processing and propagating updates with some acceptable per-
formance index. However, when we pushed the load to 5500
to 6000 transactions at the backlog, the performance reduced
signiﬁcantly from propagating transactions in 10 seconds into
250-350 seconds. It also impacted the number of fork block
occurrences in the network, making some transactions wait
more than the expected conﬁrmation time. For instance, for
distance-based peer formation strategies, the number of prude
branches is higher because each node validates new arrivals
before propagating to the neighbor nodes. In such cases, more
delays happen in the network than having few random peer
links. This shows that
the P2P network protocol requires
signiﬁcant improvement and research to improve its capacity.

XIII. CONCLUSION
In this paper, we analyzed the impact of peer formation
strategies, arrival rate, and the number of peers on the overall
performance of the technology. Speciﬁcally, we developed a
testbed to mimic the Bitcoin P2P network, which enabled
us to conduct deep insight into the trafﬁc characteristics of
the overlay network. The analysis shows that the transaction
validation and propagation takes longer than expected, even
with a low arrival rate and a high number of connected
nodes. In addition, the peer formation strategy adopted by the
bitcoin community is highly reliable in ﬁnding peers with low
latency response, which makes it less efﬁcient since each node
has to validate each transaction and block before forward-
ing to the next peer. Considering a few random peer node
selections improved the performance, this can improve the
peer formation strategies adopted by the nodes. These results
show that distance-based peer formation alone may not bring
optimal solutions. Performing an independent investigation on
improving the P2P communication protocol may enhance the
reduction of validating the same transactions/block multiple
times.

REFERENCES
[1] D.L. Mills. “Internet time synchronization: the network time pro-
tocol”. In: IEEE Transactions on Communications 39.10 (1991),
pp. 1482–1493.
Stephen Hemminger et al. “Network emulation with NetEm”. In:
Linux conf au. Vol. 5. Citeseer. 2005, p. 2005.

[2]

[3] Carsten Rieck. “An Approach to Primary NTP by Using the LINUX
Kernel”. In: 2007 IEEE International Frequency Control Symposium
Joint with the 21st European Frequency and Time Forum. 2007,
pp. 873–876.
Satoshi Nakamoto. “Bitcoin: A peer-to-peer electronic cash system”.
In: Decentralized Business Review (2008), p. 21260.

[4]

[5] Audrius Jurgelionis et al. “An Empirical Study of NetEm Network
Emulation Functionalities”. In: 2011 Proceedings of 20th Interna-
tional Conference on Computer Communications and Networks (IC-
CCN). 2011, pp. 1–6.

[7]

[6] Christian Decker and Roger Wattenhofer. “Information propagation in
the Bitcoin network”. In: IEEE P2P 2013 Proceedings. 2013, pp. 1–
10.
Joan Antoni Donet Donet, Cristina P´erez-Sol`a, and Jordi Herrera-
Joancomart´ı. “The Bitcoin P2P Network”. In: Financial Cryptography
and Data Security. Berlin, Heidelberg: Springer Berlin Heidelberg,
2014, pp. 87–102. ISBN: 978-3-662-44774-1.
Johannes G¨obel et al. “Bitcoin Blockchain Dynamics: The Selﬁsh-
Mine Strategy in the Presence of Propagation Delay”. In: Performance
Evaluation 104 (May 2015).

[8]

[9] Andrew K. Miller et al. “Discovering Bitcoin ’ s Public Topology and

Inﬂuential Nodes”. In: 2015.

[11]

[10] Muntadher Fadhil, Gareth Owen, and Mo Adda. “Bitcoin Network
Measurements for Simulation Validation and Parameterisation”. In:
May 2016.
Till Neudecker, Philipp Andelﬁnger, and Hannes Hartenstein. “Timing
Analysis for Inferring the Topology of the Bitcoin Peer-to-Peer
Network”. In: 2016 Intl IEEE Conferences on Ubiquitous Intelligence
Computing, Advanced and Trusted Computing, Scalable Computing
and Communications, Cloud and Big Data Computing, Internet of
People, and Smart World Congress. 2016, pp. 358–367.

[12] Muntadher Fadhil, Gareth Owenson, and Mo Adda. “Locality based
approach to improve propagation delay on the Bitcoin peer-to-peer
network”. In: 2017 IFIP/IEEE Symposium on Integrated Network and
Service Management (IM). 2017, pp. 556–559.

[13] Varun Deshpande, Hakim Badis, and Laurent George. “BTCmap:
In: 2018
Mapping Bitcoin Peer-to-Peer Network Topology”.
IFIP/IEEE International Conference on Performance Evaluation and
Modeling in Wired and Wireless Networks (PEMWN). 2018, pp. 1–6.
[14] Amool Sudhan and Manisha J Nene. “Peer Selection Techniques for
Enhanced Transaction Propagation in Bitcoin Peer-to-Peer Network”.
In: 2018 Second International Conference on Intelligent Computing
and Control Systems (ICICCS). 2018, pp. 679–684.

[15] Ryohei Banno and Kazuyuki Shudo. “Simulating a Blockchain Net-
work with SimBlock”. In: 2019 IEEE International Conference on
Blockchain and Cryptocurrency (ICBC). 2019, pp. 3–4.

[16] Meryam Essaid, Sejin Park, and Hongteak Ju. “Visualising Bitcoin’s
Dynamic P2P Network Topoogy and Performance”. In: 2019 IEEE
International Conference on Blockchain and Cryptocurrency (ICBC).
2019, pp. 141–145.
Till Neudecker and Hannes Hartenstein. “Short Paper: An Empirical
Analysis of Blockchain Forks in Bitcoin”. In: Sept. 2019, pp. 84–92.
ISBN: 978-3-030-32100-0.

[17]

[18] Kai Otsuki et al. “Effects of a Simple Relay Network on the Bitcoin

Network”. In: Aug. 2019, pp. 41–46. ISBN: 978-1-4503-6849-0.

[19] Hirotsugu Seike, Yasukazu Aoki, and Noboru Koshizuka. “Fork Rate-
Based Analysis of the Longest Chain Growth Time Interval of a PoW
Blockchain”. In: 2019 IEEE International Conference on Blockchain
(Blockchain). 2019, pp. 253–260.

[22]

[21]

[23]

[20] Yahya Shahsavari, Kaiwen Zhang, and Chamseddine Talhi. “Perfor-
mance Modeling and Analysis of the Bitcoin Inventory Protocol”. In:
Apr. 2019. DOI: 10.1109/DAPPCON.2019.00019.
Jun.Kawahara Shoji.Kasahara. “Effect of Bitcoin fee on transaction-
conﬁrmation process”. In: Journal of Industrial and Management
Optimization 15.1547 (2019), p. 365.
Jelena Miˇsi´c, Vojislav Misic, and Xiaolin Chang. “On the Beneﬁts of
Compact Blocks in Bitcoin”. In: Feb. 2020.
Saeideh G. Motlagh, Jelena Miˇsi´c, and Vojislav B. Miˇsi´c. “Impact
of Node Churn in the Bitcoin Network”. In: IEEE Transactions on
Network Science and Engineering 7.3 (2020), pp. 2104–2113.
[24] Kai Otsuki, Ryohei Banno, and Kazuyuki Shudo. “Quantitatively
Analyzing Relay Networks in Bitcoin”. In: 2020 IEEE International
Conference on Blockchain (Blockchain). 2020, pp. 214–220.
[25] Yahya Shahsavari, Kaiwen Zhang, and Chamseddine Talhi. “A The-
oretical Model for Block Propagation Analysis in Bitcoin Network”.
In: IEEE Transactions on Engineering Management (2020), pp. 1–18.
Jean-Philippe Eisenbarth, Thibault Cholez, and Olivier Perrin. “A
Comprehensive Study of the Bitcoin P2P Network”. In: 2021 3rd
Conference on Blockchain Research Applications for Innovative Net-
works and Services (BRAINS). 2021, pp. 105–112.

[26]

[27] Befekadu G. Gebraselase, Bjarne E. Helvik, and Yuming Jiang.
“An Analysis of Transaction Handling in Bitcoin”. In: 2021 IEEE
International Conference on Smart Data Services (SMDS). 2021,
pp. 162–172.

[28] Befekadu G. Gebraselase, Bjarne E. Helvik, and Yuming Jiang.
“Transaction Characteristics of Bitcoin”. In: 2021 IFIP/IEEE Inter-
national Symposium on Integrated Network Management (IM). 2021,
pp. 544–550.

[29] Aeri Kim et al. “Analysis of Compact Block Propagation Delay in
Bitcoin Network”. In: 2021 22nd Asia-Paciﬁc Network Operations
and Management Symposium (APNOMS). 2021, pp. 313–318.
Taotao Wang et al. “Ethna: Analyzing the Underlying Peer-to-Peer
Network of Ethereum Blockchain”. In: IEEE Transactions on Network
Science and Engineering 8.3 (2021), pp. 2131–2146.

[30]

[31] Bitaps. Today bitcoin blocks. URL: https : / / bitaps . com / blocks.

(accessed: 01.07.2020).

[32] Blockstream.info. Recent Transactions and blocks. URL: https : / /

[33]

blockstream.info/tx/recent. (accessed: 01.07.2020).
Explorer. Blockchain Explorer. URL: https://www.blockchain.com/
explorer. (accessed: 01.07.2020).

[34] Btc Block Explorere. Block Explorer. URL: https : / / btc . com/.

(accessed: 01.07.2020).

[35] What is VPP? https://wiki.fd.io/view/VPP/What is VPP?. Accessed:

2021-06-10.

