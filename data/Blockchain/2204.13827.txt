2
2
0
2

r
p
A
9
2

]

R
C
.
s
c
[

1
v
7
2
8
3
1
.
4
0
2
2
:
v
i
X
r
a

PRETRUST: A FRAMEWORK FOR FAST PAYMENTS IN
BLOCKCHAIN SYSTEM

A PREPRINT

Huapeng Li
College of Information
North China University of Technology
Beijing, China
bwvanh114@outlook.com

May 2, 2022

ABSTRACT

Decentralized cryptocurrencies based on blockchains hold an ad-vantage over the conventional meth-
ods in digital payments. Howev-er, many current decentralized cryptocurrencies based on block-
chains cannot manage to satisfy the requests for fast payments. Most time cost on blockchains is the
time waiting for records to be veri-ﬁed. The efﬁciency of addressing transactions will be greatly im-
proved if this part of the time can be saved. One motivation is to scale out the capacity by reducing
interactions with the public chain while keeping its original structure, which is a mainstream strat-
egy for improving efﬁciency. In the paper, we propose PRETRUST, a new framework to address the
problem above. PRETRUST is based on the thoughts of consortium thoughts, supporting fast pay-
ments. To make parties address transactions and sscale-outthe capacity, the main strategy is based
on the guarantee mechanism and shard tech-nology with a random arrangement of transactions and
consensus groups. In PRETRUST, the guarantee process replaces the veriﬁca-tion of a transaction
on-chain. And the model of a trusted execution environment is utilized in the interactions between
PRETRUST and public systems. Throughout the paper, we discuss several transac-tion scenarios
and analyze the security, which shows that PRETRUST can guarantee security.

Keywords blockchain · fast payments · shard

1 Introduction

In 2008, Satoshi Nakamoto published "Bitcoin: A Peer-to-Peer Electronic Cash System", which describes the frame-
work of the cryptocurrency system based on block-chain technology [1]. Originated from Bitcoin, blockchain tech-
nology is a comprehensive product of distributed data storage, point-to-point transmission, consensus mechanism,
encryption algorithm, and other computer technologies. blockchain has been paid more and more attention as one of
the underlying technologies of Bitcoin. The main ad-vantage of blockchains lies in the decentralized design. Through
the leverage of the encryption algorithm, consen-sus mechanism, and reward mechanism, the point-to-point transac-
tion can be realized in the distributed network where nodes do not need trust. In 2013, Vitalik Buterin released the ﬁrst
edition white paper of Ethereum [2]. Compared with Bitcoin, the most important function of Ethereum is to add the
smart contract and Ethereum reduces the time of generating a block greatly from ten minutes to ten seconds. In the
era of blockchains, Ethereum, Corda, and Zcash [3] and many other novel frameworks [4-7] and ﬂexible applications
[8-12] are emerging.

Blockchain network provides a secure and reliable way to record data and execute smart contracts, but it has prob-lems
with efﬁciency. Taking Bitcoin as an example, every transaction will be published to each node, and nodes will verify
it with the records and pack them into a new block. Then the miner will obtain the opportunity to publish the block by
providing computing power proof and get the block reward. After a certain number of consecutive blocks by nodes of
the whole network, the block with the compu-ting power proof becomes a part of the blockchain system. There are

 
 
 
 
 
 
arXiv Template

A PREPRINT

mainly two parts involved in this process, one is the miner calculating the hash value of the block and com-peting for
the privilege of publishing the block, and the other is waiting for the effective conﬁrmation of the block on the chain.
The cryptography mechanism ensures the security and reliability of block records, but it is at the cost of efﬁ-ciency
[13, 14]. This problem has become one of the main reasons hindering the application of blockchains, especially in
transactions calling for fast payments.

It is necessary to ﬁnd a solution to improve the efﬁcien-cy problem of blockchains for fast payments. Here we con-
sider a common application scenario as an example. In the daily small transactions, the buyer and the seller have the
immediate requirement for the conﬁrmation of the transac-tion. However, many payment methods based on block-
chains cannot support rapid conﬁrmations of payments. In detail, the structure of the blockchain itself limits the
scala-bility of the structure of blockchains. In the traditional sin-gle-chain structure blockchain system, to get the ﬁnal
con-sensus and the security of the system, the speed of packing a block cannot be accelerated indeﬁnitely. Moreover,
to pursue greater beneﬁts, miners prefer to package transac-tions with higher transaction costs into their blocks. In
this case, the interaction of daily transactions and the block-chain system is one of the main reasons that cause the
na-ive blockchain system to fail to ensure efﬁciency. To im-prove the throughput of blockchain, from the perspective
of changing the structure of blockchains, the mainstream technology is shard technology [4, 15] and DAG (Direct
Acyclic Graphs) [5, 6]; From the perspective of transferring workload, off-chain capacity scale-out technology can be
adopted without changing the underlying structure. In con-trast and the latter is not the design of blockchains in es-
sence, but focuses on a protocol executed off-chain [16-19]. The redesign of blockchains is a complex project facing
many challenges. To be compatible with the existing mature blockchain frameworks for instant payments, considering
the protocol design outside the public chain is a ﬂexible and effective strategy.

The paper proposes a new framework: PRETRUST, which can improve the transaction efﬁciency to respond to the
demand for instant payments. We suppose a transaction scenario of Alice and Bob: Alice needs to pay for Bob to get
a commodity. The general idea is that Alice ﬁrst entrusts a trusted miner to get a payment guarantee, and then shows it
to Bob. Bob can provide a commodity to Alice after conﬁrmation of the guarantee. Alice needs to ask a “guarantor” to
provide a guarantee for each transaction, that is Alice getting the payment guarantee. With this method, the transaction
between the buyer Alice and the seller Bob will be accomplished with the participation of a guarantor. Formally, there
exists no need for Alice and Bob to participate in the waiting process of the transaction being conﬁrmed in the chain
anymore while the rationality and security are realized by PRETRUST, which is designed off-chain. In this way,
this part of the time can be saved to improve the transaction efﬁciency. The design and analysis of PRETRUST are
described in detail in Section III and Section IV.

PRETRUST is built on the existing public blockchain systems, forming a structure of sidechains. To distinguish, this
paper makes the former an external environment and the latter an internal environment. For clear description, part of
the sidechain is denoted by “internal environment” while the public blockchain systems which PRETRUST relies on
are denoted by “external environment”. The internal environment adopts shard technology with a random division of
consensus committees and transactions, which will be described in Section III. All parties involved in PRETRUST
need to pay tokens to the contract account in the external environment and then obtain the equivalence they have
in the internal environment through the records of the public chain.
In PRETRUST, every miner in the external
environment blockchain network can become a guarantor. As the guarantor, on the one hand, he needs to process
guarantee requirements from other clients; On the other hand, he needs to record and supervise the information of other
consensus committees. To achieve these two main purposes, the guarantor needs to pay a certain amount of deposit
in the external environment in advance for supervision right and guarantee qualiﬁcation. And the main objectives and
contributions of this paper are as follows:

Efﬁcient provision of guarantee certiﬁcate: It is the responsibility of the payer to produce a valid payment certiﬁcate
in a transaction. However, the existing blockchain trading system hinders the efﬁciency of blockchain networks, so
the payee must wait long enough to conﬁrm the transaction. Therefore, the main motivation of this paper is to save the
long conﬁrmation waiting time in traditional blockchain systems by constructing a series of rules between the payer
and the payee. To achieve this goal, based on the existing blockchain frameworks supporting smart contracts, we try
to select a trusted guarantor outside the chain to avoid waiting. Under this assumption, the guarantor needs to verify
the effectiveness of the transaction of the payer and lock the amount of this transaction before providing an effective
guarantee certiﬁcate. Therefore, in the process of transaction, the payee can provide the committees to the payer on
the assumption of trusting the guarantor. To effectively realize the security of this guarantee mechanism, this paper
designs the transaction processing and supervision mechanism respectively.

Dynamic consensus groups division: We adopt the idea of shard technology to get high efﬁciency and security at the
same time. The sharding technology in a blockchain network is a structural scheme for performance, which can be
roughly divided according to the attributes of the network region and the transaction itself. Different transactions are
processed by category to improve the throughput of the blockchain. In PRETRUST, the construction of the internal

2

arXiv Template

A PREPRINT

environment adopts the idea of shard technology to improve the processing speed of transactions. The speciﬁc con-
sensus group has the right of bookkeeping the shard. Different transactions will be assigned to different consensus
groups for recording according to different payers. To improve security, members of a consensus group in the internal
environment need to be randomly assigned regularly.

Punishment mechanism of mutual supervision: We designed a supervision mechanism among consensus groups to
further ensure the security of the protocol. In the internal environment, each consensus group is responsible for the
blocking of the shard. At the same time, to better ensure the security of the shard, the guarantee certiﬁcate issued
by a consensus group also needs the recognition of another consensus group corresponding to the consensus group,
that is, the supervision mechanism. Structurally, each transaction is assigned to the corresponding consensus group
according to the attribute of the payer, which is responsible for the bookkeeping and guarantee for the payer. At
the same time, each consensus group also has a corresponding consensus group to supervise the guaranteed behavior.
When the guarantor is found adversary, the corresponding consensus group in charge of supervision needs to issue
effective certiﬁcates to punish him with the proof of malice.

Security Analysis: We make possible assumptions for all participants in a transaction and analyze the security of the
protocol in combination with the rules in PRETRUST. Rules in the PRETRUST ensure that the cost of doing evil will
be much higher than the beneﬁt got from that.

2 Related Works

PRETRUST is designed mainly with the idea of a guarantee mechanism to improve addressing efﬁciency, which is
an off-chain expansion scheme designed with shard technology. As mentioned above, public blockchains supporting
smart contracts are called the external environment, and the interaction conditions that rely on the public chain are
called the internal environment. Consequently, the design of PRETRUST is divided into two parts: (a). the part of
internal and external interaction and b). internal transaction rules. And these two parts are related to the theory and
technology mentioned below:

Scale-out: The main idea of off-chain expansion [20, 21] is to transfer part of the data to the off-chain for processing
and send the results to the public chain for other addressing [22-25]. According to different transfer modes, there are
mainly state channels [26-28], and sidechains [29, 30]. Taking Lightning Network as an example, the dominant parts
of the off-chain structure are not the elements of blockchains, but the next transmission network without any relation
to public blockchains. In the Lightning Network, both users need to deposit tokens in blockchain systems which are
relied on to establish a transaction channel in advance and jointly maintain a ledger. After building up a channel
of the two parties, transactions are all handled in the off-chain channel and only submit the ﬁnal status to the chain
for updating the status records before closing the channel when they intend to withdraw their tokens deposited at the
beginning. The main contribution of this kind of framework is that except for the ﬁnal transaction, other transaction
processes are not recorded in the blockchain when the channel needs to be closed, And the efﬁciency of the system is
improved with this method. To facilitate the transaction between the two parties who have not established a channel,
Raiden Network [31] supplements and expands Lightning Network. Based on Lightning Network, Raiden Network
realizes the transactions between the two parties who have not established a channel through the interaction with a
third party, an intermediary indeed, which has already established channels shared with the two parties respectively.
Lightning Network and Raiden Network effectively reduce the interaction with the public chain to a certain extent, but
due to the establishment and closure of the channel, malicious participants can lock the deposit of parties who have
built up channels for a long period. With the method of not cooperating with the others after establishing the channel,
malicious participants attack the system at a relatively low cost. Besides, the addition of intermediaries will also lead
to the centralization of the system to a certain extent and affect security.

Sharding technology: Shard means that nodes are divided into several smaller consensus groups to process transactions
in parallel and maintain independent blockchain records. ELASTICO [15] is the ﬁrst shard protocol designed for
public chains with the strategy of shard transactions. The main idea of ELASTICO is to divide the nodes into several
small committees, and each committee will deal with disjoint transaction sets. These disjoint transaction sets are
called shards. The node establishes identity information by proof of work, and then the node is randomly assigned to
each committee. The Byzantine consensus protocol [32] runs within the committee, and they process transactions in
parallel. However, PBFT protocol has too many communication rounds with high communication complexity, which is
one reason for the delay in the protocol. To improve the efﬁciency, OmniLedger [4] builds on the Byzantine consensus
scheme in ByzCoin [33], because it scales efﬁciently to thousands of consensus group members. Omniledger is
composed of an identity chain and multiple shards. Nodes are automatically assigned to different shards through
Rand Hound protocol. To avoid the centralization risk caused by a speciﬁc consensus group that holds the recording
right of recording the corresponding shard for a long term, Omniledger adopts the strategy of periodic reorganization

3

arXiv Template

A PREPRINT

but does not propose an efﬁcient interaction strategy among shards. And that brings a lot of consumption of data
migration. SsChain [34] divides the blockchain network into root chain network and shard network. And the incentive
mechanism dynamically adjusts the computing power to make the computing power evenly distributed in different
shards. Sschain adopts the market incentive mechanism, so it does not need to reorganize the shard network regularly
and avoid data migration consequently with this design. Distinctive from dynamically shard mode just mentioned, a
static shard is proposed [35]. The model divides the blockchain network into domain shard and global shard. There is a
committee determined by proof of work in the domain partition which is adjusted dynamically. Nodes in the committee
verify transactions and generate blocks through PBFT consensus algorithm. The committee of global shards is also
determined by proof of work, and the committee veriﬁes the transaction through PBFT. After the transaction passes
the veriﬁcation, it is transmitted to the corresponding domain shard. The nodes in the domain shard are responsible
for generating blocks and recording them to the shard. This scheme provides the idea of shard by levels, but the static
shard strategy will lead to the risk of centralization.

Leverage of TEE: Trusted execution environment is a concept of secure hardware [36]. This environment can ensure
that the calculation will not be disturbed by the malicious operation, so it is called "trusted". Many works apply TEE
in blockchain technology [37-40]. Teechain [37] establish an off-chain payment channel with the leverage of TEE.
Town Crier [38] acts as a bridge between smart contracts and existing websites, which are already commonly trusted
for non-blockchain applications. Proof of Luck [39] and Proof of Elapsed Time [40] use TEE to provide randomness
to ensure that the consistency of consensus is not affected by network conditions. In this PRETRUST, to guarantee
the security of interactions between the internal environment and the public chain system when any party intends to
withdraw the tokens in the internal environment, TEE is responsible for outputting effective certiﬁcates as the criterion
of withdrawing.

To better support the current mainstream blockchain projects, PRETRUST is designed to be built on the public chain,
which is a kind of off-chain scaling out strategy. Based on the technology and theory above, PRETRUST adopts the
idea of using the guarantee certiﬁcation to take place the on-chain certiﬁcation in normal blockchain systems. Unlike
the reconstruction of the public chain, the application of PRETRUST protocol will not change the system of the
public chain. Therefore, it can be built on various public chain projects supporting smart contracts, with the general
advantages and characteristics of ofﬂine expansion schemes. To realize the ﬂexible participation of miner nodes and to
avoid the risk of centralization, PRETRUST is not designed as an off-chain expansion scheme of transaction channel
type but adopts the design of consortium chains with the structure of shards.

3 Degign of PRETRUST

3.1 Model of blockchain

Firstly, we introduce the basic concepts of the current cryptocurrencies system based on blockchains for a more clear
description of PRETRUST. A blockchain system can be regarded as a kind of distributed database or distributed ledger
maintained by multiple parties called “miners”. In a traditional blockchain network, a transaction is broadcasted to
every miner and all the transactions which have not been recorded in the system constitute the “transaction pool”. In
the data structure, a blockchain is a chain composed of blocks in which valid transactions are packed in a certain
data structure like Merkel Tree in Bitcoin system. Blocks are linked in series by a hash pointer, which keeps the
immutability of the whole system. Miners generate new blocks by verifying transactions in the transaction pool and
packing them into new a new block, by which the chain will extend. Taking Bitcoin system as an example, the speed
of generating a new block is about costing 10 minutes. In Bitcoin system, the time interval between generations of
two adjacent blocks is limited by a lower bound [13].

Parties are identiﬁed by addresses (addr). An address originates from the public key of the key pairs (pk, sk) generated
by parties themself, and all the transactions (tx) are based on addr. In a transaction, for instance, payer Alice with
addrA intends to send c coins to payee Bob with addrB, Alice is supposed to generate a transaction tx announcing that
c coins of addrA are transferred to addrB. And the contents of tx need to be immutable with the digital signature from
Alice using her private key.

3.2 Description of PRETRUST

Protocols run in PRETRUST is relied on the secure parameter κ, which sets the details of rules mentioned in the
following parts. Consider a transaction scenario in which three parties are involved: the payer P, the payee P’ and the
guarantor G. Here G needs to be a member of the consensus group which keeps the ledger of P. In a transaction, P
needs to pay for P’ to get the commodity. Under the PRETRUST framework, P is supposed to ﬁnd a trusted guarantor

4

arXiv Template

A PREPRINT

to generate a warrant declaring that G will guarantee for P, and promise P’ will get the payment for the transaction.
Describe brieﬂy for formal progress:

(1) The transaction information (TxInfo) is ﬁrst generated by P and P’;
(2) P sends TxInfo to the internal environment and TxInfo will be sent to the corresponding consensus group (gP)
which is responsible for the ledger of P;
(3) G generates the current Guarantee (PreGuarantee) and gets the ﬁnal warranty (Guarantee) with the veriﬁcation from
the corresponding consensus group (gG). And Guarantee is supposed to contain the block expected information of the
block which will record Guarantee in the future. And then G sends it to P after the veriﬁcation from the consensus
group (gG) which is responsible for the ledger of G.
(4) P’ receives Guarantee from P and offers the commodity or service for P after veriﬁcation. This brief process is
shown in Figure1 and the details are described in Section IV.

As mentioned before, we use “external environment” to denote public blockchain systems which PRETRUST rely
on, and “internal environment” to denote the elements which are off the public chain. Here are the main parts in the
processing of PRETRUST:

Interactions between the external environment and internal environment: To be compatible with the current currency
system based on blockchain technology without reconstructing the entire blockchain architecture, PRETR-UST is
designed as a chain off the public blockchains with a shards structure. The internal environment is a framework
of multiple shards working in parallel. Naturally, it is predominant to propose the interaction strategy between the
external and internal environment. In PRETRUST, blockchain systems with the support of smart contracts are required.
With the leverage of smart contracts, a list to record the membership of all the parties including guarantors and clients
can be realized by distributed applications like notebooks based on contracts. Besides, with smart contract design, any
party can join in and leave PRETRUST. That is when a party needs to withdraw the deposit and cut the relationship
with PRETRUST, he needs to use the corresponding smart contract. After a party pays a certain amount of deposit by
calling the corresponding smart contract, the token deposited will be “copied” in the internal environment equivalently
and the token will be locked in the contract account unless the party withdraws it with the valid certiﬁcation from
the internal environment. Here use RegisterAccount() to denote the smart contract for taking part in PRETRUST
and Withdraw() to denote the smart contract for leaving PRETRUST. Since the internal environment and external
environment are two isolated ﬁelds, to guarantee the security of invoking the contract Withdraw(), PRETRUST takes
the leverage of TEE. TEE takes the information of accounts as its inputs and generates the WithdrawlCertiﬁcation for
the user who intends to withdraw the tokens. In summary, the interaction with the public chain system for PRETRUST
is as follows: (1). Smart contract for being a member of PRETRUST by paying the deposit; (2). Smart contract for
withdrawing the deposit and token in PRETRUST and aborting the membership. And these two smart contracts are
both deployed on the public chain. The membership list generated by the smart contract will be the credential for the
internal environment to update the information of taking part in and departure of any party. Besides, when a party
intends to withdraw the token in the public chain, leverage of smart contracts is also needed to verify the validity of
withdrawing permission like verifying the correctness of signatures based on the membership list. For all the parties
in PRETRUST, the amount of the deposit paid to the contract account in the public chain will be converted into the
tokens in the internal environment. Correspondingly, any part willing to get tokens from the public chain needs to run
an exchange execution ﬁrst and get the output of the internal environment which is the input of the smart contract in
the public chain. The speciﬁc implementation process and parameter format will be described in Section IV.

Recording of ledgers: Ledgers in PRETRUST record different kinds of transactions that are distinctive from classical
transaction structures. Ledgers logic is based on accounts like Ethereum, but to realize fast payment, protocols in
PRETRUST are mainly designed for “guarantee-like” transactions. The main transaction information is called “Guar-
antee”, which will be packed into blocks by corresponding consensus groups. And the modiﬁcation of the balance of a
party is implemented through smart contract logic with Guarantee as the inputs in the internal environment. Shard strat-
egy: To handle transactions and supervision efﬁciently, PRETRUST is designed as a consortium chain with a sharding
structure in the internal environment. And there are two aspects of shard strategy required: shard of guarantors and
transactions. The members of the consensus group of a certain shard are not static. And that means all guarantors
in PRETRUST need to be reorganized periodically. The serial number of a shard is ﬁxed while the members of the
consensus group responsible for the ledger of this shard are dynamic. To realize dividing the guarantor randomly,
reorganization relies on a random value. In PRETRUST, after a certain count of blocks (period), every shard will have
published blocks b = (b1, b2, . . . , bn) with the counter n. After the generation of bn, the internal environment will
begin the next period. All the guarantors received the end blocks bn of periodj, and they calculate a value of periodk:
globalHashk = Hash(b1.hashValue+b2.hashValue + bn.hashValue ). Division of guarantors in periodj+1 is based on
globalHashj by calculation: shardNumberG = Higher(n, globalHashk+addrG). Here the notion “+”ans xor calculation,
Hash(*) denotes hash value calculation, Higher(n, *) denotes taking the high n bits of a bit sequence and aborting the
rest. globalHashk can be regarded as a random number due to its generation method. And the randomization keeps

5

arXiv Template

A PREPRINT

each guarantor being divided into a random shard and all the guarantors are reorganized in the same shard consist the
new consensus group of this shard. With this kind of dynamic random reorganization, the risk of centralization can be
avoided. On the other hand, the division of transactions is more simple: shardNumbertx = Higher(m, addrP). Which
shard a transaction will be arranged in is due to the address of the payer. The reason for the design is that it is efﬁcient
to keep the corresponding ledgers and make Guarantee for P. In one period, the corresponding consensus group is
responsible for keeping the record of this shard and publishing blocks in the internal environment. And all guarantors
need to keep the record of blocks from other shards since they may be divided into different consensus groups and
shards.

Selection of the guarantor: There are two blockchain structures in the internal environment of PRETRUST: Record-
Chain with shards structure and ArbitrationChain with single-chain structure. As mentioned before, when the consen-
sus group gP receives a guarantee request with TxInfo, gP needs to calculate the values guaranteePriority based on
the addresses of all the group members and TxInfo.id. Here guaranteePriorityi=addi+xInfo.id, then select the smallest
guaranteePriorityi and the candidate who guarantees for TxInfo is Gi in gP. When Gi is absent or without any guar-
antee qualiﬁcation, other members in gP can be the candidates according guaranteePriority list in ascending order.
And this mechanism can be realized by gG: to sign the PreGuarantee received in a certain time according to the list.
Supervision and punishment mechanism: As mentioned in the last point, each Guarantee transaction is arranged to the
corresponding shard according to the identity of its payer. The guarantor G who generates certiﬁcation PreGuarantee
for P is also the ledger keeper who is responsible for records of P. It is convenient for G to check out the validation and
illegality of the requirement from P for a guarantee. After the guarantor G makes the guarantee for a transaction, the
amount of the remaining transactions the guarantor can guarantee will reduce by a certain account due to the value of
the transaction. And this part of the token will not be unlocked unless gG receives the block containing the record of
Guarantee from gP. This is the criterion for gG to verify the validity of PreGuarantee and gG will sign PreGuarantee
with group signature [41, 42] if it is valid. Besides, the guarantee with multiple digital signatures is also a credential
for P’ to ensure his proﬁts by calling the arbitration smart contract in the arbitration chain in the internal environment.
Here arbitration chain is a blockchain consisting of one single chain structure with the proof of work consensus pro-
tocol, and it is maintained by all the guarantors. In the punishment mechanism of PRETRUST, once a guarantor and
the corresponding consensus group gG are convicted, the cost of the punishment will be much more than the beneﬁt
gained from malicious behavior. P’ can publish Guarantee signed by G and gG to the arbitration chain by calling
the arbitration smart contract to obtain the compensation. And before P’ is tricked by G by an illegal Guarantee,
the corresponding consensus group gG which is responsible for the supervision of G will check the validation of the
PreGuarantee, and gG will not sign the PreGuarantee. consequently, there are two checkpoints ensuring the security
of the payee in the supervision and punishment mechanism. Incentive mechanism: In PRETRUST, there are two kinds
of incentive mechanisms: reward for the guarantee on RecordChain and reward for the record on ArbitrationChain.
In TxInfo, P needs to clarify the number of tokens paid as the guarantee fee. A part of the guarantee fee will be sent
to G and the rest will be sent to the members in gG who signed for the PreGuarantee after veriﬁcation. Incentive
mechanism of ArbitrationChain is combined with the punishment mechanism. Once guarantors G or the members of
gG are convicted, a part of the tokens deducted will be sent to the guarantor who manages to generate the new block
by proof of work consensus mechanism.

4 Protocols of PRETRUST

We describe the details of PRETRUST in this chapter. There are mainly 3 phases in the process of implementing
PRETRUST: participation, executing guarantee progress, and withdrawal.

4.1 Participation

As mentioned in Section III, any party who intends to take part in PRETRUST to deal with transactions or to be a
guarantor needs to pay a deposit to the contract account AccountPRETRUST on the public chain with the smart con-
tract RegisterAccount(). For example, Alice, a miner of a public blockchain, intends to be a guarantor of PRETRUST
framework.

(1) Alice ﬁrst needs to pay the deposit to AccountPRETRUST by invoking the smart contract RegisterAccount() with
the deposit she intends to pay and user type as the inputs;
(2) Public chain system run RegisterAccount(), after invoking the smart contract, the tuple regInfoAlice = (addrAlice,
depositAmount, type) will be added into a member list (MemberList), which is a member of contract RegisterAc-
count(). Here type = “guarantor”, “client”, Alice can only be a normal client and deal with transactions with others if
type = “client” according to the inputs.

6

arXiv Template

A PREPRINT

4.2 Guarantee Process

We describe the details of PRETRUST in this chapter. There are mainly 3 phases in the process of implementing
PRETRUST: participation, executing guarantee progress, and withdrawal. Generation and arrangement of TxInfo: As
the transaction scenario described in Section III. P intends to deal with P’ as the payer. First, all for them is to generate
the TxInfo which contains the contents of transaction information and signature. After TxInfo is generated, it will
be published by P and ﬁnally sent to the corresponding shard with the current consensus group gP. Group gP then
selects the guarantor with the strategy described in Section III. In TxInfo, txSNP is the serial number of the counter of
transactions of P

Steps of generating Guarantee: The generation of the ﬁnal and valid guarantee needs three steps and two of them are
temporary ﬁles. (1) P checks out TxInfo and generates the ﬁrst temporary guarantee ﬁle CurrGuarantee1, and then
sends it to P;
(2) P receives CurrGuarantee1 and checks the correspondence of the shard. Then P generates CurrentGuarantee2 with
the signature for the content of CurrGuarantee1 and sends it to G;
(3) G receives CurrGuarantee2 and sends it to the corresponding shard of G, in which the current consensus group is
gG;
(4) gG receives CurrGuarantee2 and signs it with the group signature after verifying the validity of CurrGuarantee2,
and ﬁnally, the valid guarantee ﬁle Guarantee is generated.

And then Guarantee will be sent to P with the intermediary agent G. In CurrGuarantee1, G is required to declare the
expected block information in which the ﬁnal guarantee ﬁle Guarantee will be contained.

Transaction between P and P’: P ﬁnally receives Guarantee and shares it with P’. P’ will offer a commodity or service
to P after verifying the validity of Guarantee.

4.3 Withdrawal Process

In PRETRUST, when a user intends to withdraw tokens deposited on public blockchains or the balance in the internal
environment, he needs to take the leverage of TEE. In the model of TEE of this paper, TEE needs to generate its
key paris (pkPRETRUST, skPRETRUST) ﬁrst and pkPRETRUST needs to be an initial parameter of MemberList.
Information on the balance needs to be available as inputs for TEE so that a valid WithdrawalCertiﬁcation can be
generated. For example, Alice intends to withdraw c coins from her balance.

(1) She ﬁrst needs to publish a withdrawal request WithdrawalRequest announcing the amounts of tokens;
(2) WithdrawalRequest will be sent to the corresponding consensus group gA. Then gA veriﬁes the validation of With-
drawalRequest and generates WithdrawalCheck if there is nothing illegal. And gA needs to deduct the corresponding
tokens of Alice in the internal environment instantly;
(3) gA sends WithdrawalCheck to TEE and TEE publishes it instantly in the internal environment. Then, the statement
of Alice will be locked and all the nodes in PRETRUST will refuse to deal with transactions with Alice temporarily;
(4) TEE checks the information of WithdrawalCheck with the records of the internal environment and returns to
WithdrawalCertiﬁcation with the time stamp and signature of TEE. After this step, the locking state of Alice will be
relieved;
(5) Alice invokes contract Withdraw() with WithdrawalCertiﬁcation as inputs and gets the deposit.

5 Analysis of security

In general, PRETRUST offers another access for miners in blockchains to gain reword for keeping records of blocks.
And as many miners join in and maintain the internal environment, the robustness of the system can be enhanced.
Moreover, PRETRUST limits the maximum of transactions that a guarantor can guarantee to ensure that a guarantor
cannot get an unlimited guarantee reward, in which case the risk of centralization can be avoided again.
In this
section we mainly discuss the possible malicious behaviors in PRETRUST and the protection mechanisms facing
these situations:

TxInfo for guarantee requirement: After P and P’ generate TxInfo, the corresponding shard with the temporary con-
sensus group gP will be responsible for the veriﬁcation of TxInfo. Notice gP is the keeper of the ledger of P and it is
more efﬁcient to check out whether P can afford this transaction due to the current balance of P. If P is malicious, gP
will be aware of that and refuse to make a guarantee for P.

PreGuarantee: The ﬁnal valid Guarantee needs the veriﬁcation of the corresponding shard with temporary consensus
group gG. gG is responsible for the ledger of G in the current period. And gG will check out the malicious behaviors
of G (such as not enough balance of the deposit) and refuse to generate the ﬁnal guarantee ﬁle for G on this illegal oc-

7

arXiv Template

A PREPRINT

casion. In another situation: Once P’ receives the ﬁnal guarantee ﬁle Guarantee, P’ is supposed to offer the commodity
to P and end up the transaction. If P’ ﬁnds out at last that there is no record of Guarantee according to the information
of Guaranteehe received, P’ invokes the smart contract Arbitration() on the arbitration chain to get the compensation.
And after invoking successfully, G will be punished.

6 Conclusion

To improve the efﬁciency of payment systems based on blockchains, this paper proposes PRETRUST, a scheme to
realize fast payments. The main motivation of the framework is to introduce a third guarantor to certiﬁcate for a
transaction in advance to save the waiting time for the payer and the payee. PRETRUST is running on top of current
blockchains which support smart contracts. Though PRETRUST is a kind of off-chain strategy to solve the problem
of efﬁciency of current public blockchain systems, the internal designs are based on blockchain structure. With this
method, PRETRUST turns out to be a method to enhance efﬁciency with security and compatibility. For a miner node
in public blockchains, the threshold for him to join the internal environment is low, which makes it possible for miners
to join the system with freedom. And this makes the system more robust. Finally, we formally analyze the security
of the general framework by considering the kinds of malicious behaviors of parties. In the whole transaction process,
multiple veriﬁcations are involved to ensure the security of the transaction.

8

