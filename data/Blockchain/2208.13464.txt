2
2
0
2

g
u
A
9
2

]
T
G
.
s
c
[

1
v
4
6
4
3
1
.
8
0
2
2
:
v
i
X
r
a

Price of MEV:
Towards a Game Theoretical Approach to MEV

Bruno Mazorra
Nokia Bell-labs
Universitat Pompeu Fabra
brunomazorra@gmail.com

Michael Reynolds
University College London
mireynolds@pm.me

Vanesa Daza
Universitat Pompeu Fabra
vanesa.daza@upf.edu

Abstract

1

Introduction

August 30, 2022

Maximal (also miner) extractable value, or MEV,
usually refers to the value that privileged players can
extract by strategically ordering, censoring, and plac-
ing transactions in a blockchain. Each blockchain
network, which we refer to as a domain, has its own
consensus, ordering, and block-creation mechanisms,
which gives rise to diﬀerent optimal strategies to ex-
tract MEV. The strategic behaviour of rational play-
ers, known as searchers, lead to MEV games that
have diﬀerent impacts and externalities in each do-
main. Several ordering mechanisms, which determine
the inclusion and position of transactions in a block,
have been considered to construct alternative games
to organise MEV extraction, and minimize negative
externalities; examples include sealed bid auctions,
ﬁrst input ﬁrst output, and private priority gas auc-
tions. However, to date, no suﬃciently formal and
abstract deﬁnition of MEV games have been made.
In this paper, we take a step toward the formaliza-
tion of MEV games and compare diﬀerent ordering
mechanisms and their externalities.
In particular,
we attempt to formalize games that arise from com-
mon knowledge MEV opportunities, such as arbitrage
In deﬁning these games, we
and sandwich attacks.
utilise a theoretical framework that provides ground-
work for several important roles and concepts, such
as the searcher, sequencer, domain, and bundle. We
also introduce the price of MEV as the price of anar-
chy of MEV games, a measure that provides formal
comparison between diﬀerent ordering mechanisms.

The notion of miner-extractable value (MEV) intro-
duced in [5], and formally deﬁned in [3], measures the
value that miners can extract by strategically order-
ing, censoring, and including transactions in a block.
In general, block proposers (typically validators or
miners), have the power to dictate or inﬂuence the
inclusion and ordering of pending transactions in a
new block. Thus, rational proposers have access to
extra rewards per block. However as shown in [5], this
power is not limited to block proposers. Blockchain
users and bots, usually termed searchers, can use
strategies like spamming transactions or outbidding
competitors to extract MEV themselves. For this and
other reasons, the term miner-extractable value has
evolved to mean maximal extractable value, formally
deﬁned in [16], which does not limit extraction to
block proposers. We often refer to block proposers
and searchers as players.

Depending on the network protocol, which we refer
to as the domain, and type of MEV being extracted,
rational searchers have incentives to take diﬀerent ac-
tions to increase their expected revenue. For exam-
ple, [5] showed that Ethereum, a network with higher
propagation latency, incentivises searchers to widen
their view of the mempool to outbid their competi-
tors, while domains like Polygon PoS, where the prop-
agation of transactions is probabilistic, incentivises
searchers to spam transactions to extract MEV. This
motivates a more general formulation of the MEV
game presented in [5] such that models of rational
searcher behaviour can be derived from a domain in-
put.

1.1 Our contributions

Keywords:Blockchain, MEV, Game Theory, Price
of Anarchy

The main goal of this paper is to formalise MEV
games with a ﬁnite number of players under diﬀerent

1

 
 
 
 
 
 
ordering mechanism and auction designs which are
deﬁned by various environment conditions and rules
such as latency of players, PoW/PoS consensus, and
mempool visibility. To this end, the following topics
will be covered:

• Inspired by [3], we provide a formal deﬁnition of
MEV and local MEV as an optimization problem
constrained by player resources.
In our deﬁni-
tion, we emphasize relative constraints like capi-
tal, software resources, and view of the mempool.

• We formally deﬁne a more abstract and gen-
eral MEV game that provides a foundation for
analysing the incentives of searchers in diﬀerent
domains.

• We also introduce diﬀerent negative externalities
that arise from MEV games, and we formally de-
ﬁne the Price of Anarchy in MEV games under
diﬀerent cost functions as a way to quantify their
impact. We explore the speciﬁc case of block
space misuse, which we refer to as the price of
MEV, and compute this to characterize and clas-
sify diﬀerent ordering mechanisms.

1.2 Previous Work

In Flashboys 2.0 [5] Daian et al. proposed a formal-
ization of the priority gas auction (PGA) model and
proved mathematically and empirically the existence
of Grim-Trigger Nash equilibrium under certain con-
ditions. However, the results are limited to two play-
ers and the PoW Ethereum domain, and do not con-
sider reverted transaction costs proportional to the
bid or that players can engage in Sybil attacks. In
[9], the authors explore the equilibrium of sandwich
MEV as a router game. Likewise, in [18], the au-
thors compare empirically the miner’s revenue and
the searchers competition of arbitrage opportunities
before and after the introduction of Flashbots MEV
auctions on Ethereum. In [10], the ﬁrst formalization
of cross chain MEV was proposed. However, to the
best of our knowledge, there is no formal and empir-
ical study on the impacts of MEV on several distinct
domains.

2 Theoretical Framework

In general, miner or maximum extractive value
(MEV) is a term that refers to any excess proﬁts
that a block proposer or searcher can make based
on transaction ordering and/or transaction inclusion.
MEV was introduced in [5], formally deﬁned in [3],
and extended in cross-domain environments in [10].

2

Another similar deﬁnition was given in [16], except
MEV was treated independently of a player. The
MEV opportunities we consider in this paper are lim-
ited to the proﬁts a player can obtain by modifying
the blockchain state. In this section, we will formalize
this kind of MEV opportunity using the concept of
proﬁtable ‘bundles’. Then, we will deﬁne ‘local’ MEV
as the maximally proﬁtable bundle a speciﬁc player
can construct. Similar to [10], we start by formally
deﬁning the domain and searcher:

Deﬁnition 2.1. A domain D is a self-contained sys-
tem with a globally shared state st. This state is
altered by various agents through actions (sending
transactions, constructing blocks, slashing, etc.), that
execute within a shared execution environment’s se-
mantics. Each domain has a predeﬁned consensus
protocol that includes a set of valid algorithms to or-
der transactions, denoted by prt(D).
A blockchain is a domain, however, there are other
non-blockchain domains that also have MEV, like
centralized exchanges.

Deﬁnition 2.2. A searcher (in general, we will call it
a player) in a domain D is a participant that assumes
that sequencers follow a speciﬁc set of rules and take
strategic actions (send bundles with speciﬁc bids) to
maximize their own utility. In general, we will assume
that a player’s utility depends linearly on their token
balances.

In a domain D with state st, the update of the state
st after executing transactions tx is given by st ○ tx.
For an ordered set of transactions B = {tx1, ..., txl},
we have the composition st ○ B = st ○ tx1 ○ .... ○ txl.
Similar to [3], we use Addr to denote the set of all
possible accounts and T to denote the set of all to-
kens. We deﬁne b ∶ A × T → Z as the function
that maps a pair of, an account and a token, to
its current balance. More precisely, for a ∈ Addr
we let b(a, ⋅) denote the balance of all tokens held
in a and b(a, T ) denote the account balance of to-
ken T . Abusing notation, we will denote by b(a)
the value of b(a, ⋅) priced by a num´eraire E. That
is, if there is a pricing vector p = (pT →E)T ∈T, then
b(a) = p ⋅ b(a, ⋅) = ∑T ∈T pT →Eb(a, T ).
Deﬁnition 2.3. An ordering mechanism is a set of
rules that determines the order and inclusion of a set
of transactions in a block. More formally, let T be
the set of all transactions, an ordering mechanism is
a map or ∶ P
(T ) is the set
of all ordered subsets of T , such that or(T ) ⊆ T for
all T ∈ P

(T ), where P

(T ) → P

(T ).

≤

≤

≤

≤

Deﬁnition 2.4. A sequencer is an agent of a domain
responsible for maintaining the liveness and consis-
tency through a set of actions. We distinguish four
types of sequencers: dummy, dummy Byzantine, ra-
tional and partially rational. A sequencer is dummy
if he follows the validator consensus protocol prt(D).
A sequencer is dummy Byzantine if they misbehave,
but other nodes can detect his misconduct. A se-
quencer is rational if it follows a set of valid actions
on the domain D to maximize its revenue (including
deviating from an ordering mechanism). Therefore, if
a player misbehaves to maximize their payoﬀ but can
not be identiﬁed, punished, or slashed, we say that
is a rational player. A sequencer is partially ratio-
nal if they commit to using a speciﬁc valid ordering
mechanism to maximize its payoﬀ.

On Ethereum, miners are usually partially rational.
In general, miners run mev-geth, which receives a
block transaction ordering of highest revenue from
the Flashbots relayer. Rational sequencers could take
the Flashbots block and reorg to maximize their own
revenue. Nevertheless, miners do not deviate from
the mev-geth intended protocol1. For this reason,
players participating in the MEV extraction are not
necessarily sequencers; they take a sequence of ac-
tions to bias nodes to maximize their own revenue.
The set of actions that a sequencer can follow de-
pends on the domain and can include arbitrary ac-
tions. Studying the impact that rational players and
sequencers can have in a domain is helpful to bound
the set of actions. For example, in selﬁsh mining [17]
the set of actions to construct or publish the private
chains.

From now on, we will assume that sequencers are par-
tially rational. An example of an ordering mechanism
is the default geth client, which uses a greedy approx-
imation algorithm to optimize the blocks’ transaction
fee revenue.

A sequencer receives a set of concurrent transactions
tx1, ..., txn with gas price m1, ..., mn and g1, ..., gn
If the sequencer includes txi, it ob-
units of gas.
tains migi in fees. Since the gas used per block is
restricted in every domain by some constant L, the se-
quencer must choose a subset of transactions T such
∑i∶txi∈T gi ≤ L. Then, a node that tries to maxi-
that
mize its revenues per block needs to solve the follow-
ing Knapsack optimization problem, which we name
Knapsack Extractable Value (KEV) problem:

1However, recent miners are deviating from the Flashbots
protocol to extract more value. No formal or academic work
has proved this yet. These are statements from some Flashbots
team members.

max

s.t.

ximigi

n
∑
i=1
n
∑
i=1
xi ∈ {0, 1}.

xigi ≤ L,

We note by KEV(T ) the solutions’ revenue of the
optimization problem. Knapsack optimization prob-
lems [15] are NP-complete; that is, no known polyno-
mial time algorithm ﬁnds an optimal solution. Thus,
each sequencer usually chooses diﬀerent algorithms to
approximate the optimal solution. For example, Par-
ity nodes order transactions by gas price m without
considering the gas costs.

Another example is the Flashbots relayer, which uses
a greedy approximation algorithm [1], ordering trans-
actions by the ratio of miner payment and gas con-
sumed (a natural extension of ordering by gas price
taking into account direct payments and more than
one transaction). However, the problem that the
Flashbots relayer tries to solve is quite diﬀerent, since
it does not include reverted transactions or compet-
ing bundles. Moreover, we proved (see C) that there
are examples where this algorithm does not produce a
good approximation. In [2], the authors reformulate
the block production as a linear programming prob-
lem without taking into account competing bundles.
We will give more details after deﬁning bundles.

Now that we have settled up some ground deﬁnitions,
we will focus next on the formalization of the extrac-
tion of MEV opportunities. To simplify the games,
we will not consider the complete MEV extraction
per block, but separate the MEV opportunities into
“independent/concurrent” ones.

Deﬁnition 2.5. Let P be the set of all players. A set
of transactions T = {tx1, ..., txk} and a state st in-
duce an MEV opportunity in a domain D to a player
P ∈ P if they can construct an ordered set of trans-
actions B such that:

∆b(P ; st ○ B, st) ∶= b(P, st ○ B) − b(P, st) > 0, (1)
where b is the balance of P with the corresponding
If
order. We call B a proﬁtable bundle or bundle.
B consists of a unique transaction, we say that B is
an MEV-transaction. Each bundle can contain ex-
tra metadata, such as sequencer timestamps, bundle
hash, sender ID, and gas price. For a given state st,
each bundle incurs execution costs called gas costs.
From the bundle metadata and the domain state, the
bundle execution incurs some payments, denoted by

3

pr(B), to a sequencer or set of sequencers responsible
for executing the bundle.

optimization problem

Deﬁnition 2.6. A set of bundles B1, ..., Bn are
order-invariant valid if for every permutation σ ∈ Sn
we have that the state transition

st —→ st ○ Bσ(1) ○ ... ○ Bσ(n)

(2)

is a valid state transition and is invariant among all
the permutations. A set of bundles B1, ..., Bn compete
in a state s if for all i and j, st → st ○ Bi ○ Bj is not
a valid state transition.

).

Deﬁnition 2.7. We say that a bundle B is a partial
extraction of a bundle B′ if B and B′ compete, and
∆b(P, st ○ B) < ∆b(P ′, st ○ B′
The Flashbots combinatorial auction (FBCA) allows
players to bid for bundles. The Flashbots alloca-
tion rule tries to solve the block optimization problem
with conﬂicting constraints. That is, the block can
not contain competing bundles (bundles that contain
same transactions or bundles that revert). So, the
FBCA can be modelled as the knapsack problem with
a conﬂict graph G = (V, E) [11], where V is the set
of bundles, and uv ∈ E if and only if bundles u and
v compete. Flashbots use a greedy approximation
algorithm, leading to an auction mechanism similar
to a ﬁrst-price sealed auction, since players can only
observe winning bundles. That is, the bundles are
ordered by eﬀective gas price (or average gas price,
see more details in the appendix A) and afterwards
prune the conﬂicting bundles.
In case of symmet-
ric gas eﬃciencies, the MEV opportunity is sealed to
the higher bidder and pays what they bid. In general,
this algorithm does not give the optimal solution (see
appendix C). It also allows searchers to check for re-
layer deviation with just the executed block and the
bundle sent by the searcher.
In other words, theo-
retically, searchers can privately monitor the correct
functioning of the relayer.

Now we are ready to deﬁne the local MEV for a player
P or MEVP for short. The deﬁnition we provide is
similar to the one provided in [3]. However, in [3],
players have constraints on the state transitions, but
not on the set of bundles that they can construct.

Deﬁnition 2.8. Let D be a domain with state st, a
player P with local mempool view T
and a set of
transactions TP that the player P can construct. We
denote by CP = T
P ∪ TP to be the set of reachable
transactions. We deﬁne the local MEV of P with
state st (MEVP (st)) as the solution to the following

M
P

M

∆b(P ; st ○ B, st)

max
B
s.t. B ⊆ CP ,

st → st ○ B is a valid state transition in D

Let argmev
P (st) be the set of bundles that are a so-
lution to the optimization problem2. The constraints
of reachable bundles is subject to a player’s informa-
tion, gas eﬃciency, budget, ability to propose blocks,
etc.

Observe that if all players have access to the same
MEV opportunities and have access to all bundles,
then this deﬁnition is equivalent to the one provided
in [3]. If the mempool view is the empty set, we will
refer to the MEV as on top of block MEV, and we
will denote it by TMEVP .
Lemma 2.9. For a given player P and a state st, if
P (st), then MEVP (st ○ B) = 0.
B ∈ argmev

Let st and B ∈
Proof. Assume otherwise.
argmev
P (st) such that MEVP (st) > 0. Then, there
exist B′ such that ∆b(P, st ○ B ○ B′, st ○ B) > 0.
= B ∪ B′, we have that
Taking the bundle B′′
∆(P, st ○ B′′, st) > MEVP (st), that is a contradic-
tion.

Deﬁnition 2.10. For a set of reachable bundles C,
we deﬁne the C-permissionless MEV ( MEVC) as the
minimum local MEV that can be extracted among
players that have access to the bundles in C. More
formally,

MEVC

(st) ∶= min

P s.t C⊆TP

MEVP (st).

If
for all players P with reachable bundles C,
MEVP (st) = 0, we say that st is a null MEV state.
We denote the set of null MEV states as NS.

Remark: Note that this deﬁnition is an extension
of the deﬁnition made in [16] when CK is the set
of transactions that burns K coins. In other words,
MEVCK permissionless is MEV that can be extracted
by players with at least K coins. In this paper, we
will assume that a ﬁnite number of players are able to
capture a speciﬁc MEV opportunity. In other words,

2Observe that this deﬁnition fundamentally depends on the
token balance. In the presence of a unique token, MEVP is
trivially deﬁned. Nevertheless, in the presence of multiple do-
mains and tokens this deﬁnition is non-trivial. Moreover, in
this deﬁnition, we are assuming that all players value equally
the tokens, assuming the existence of some transferable util-
ity. We leave a more general deﬁnition of local MEV for future
work.

4

we will ﬁx a set of players P = {P1, ..., Pn}. For each
P ∈ P, we deﬁne sti as the state that realizes the ex-
traction MEVP . Then, we will assume that for each
player P ∈ P, MEVP (stj) = 0 for all P ∈ P.

3 The MEV stage game

In this section, we will consider an abstraction of the
PGA model proposed in [5]. We will model and for-
malize the MEV stage game. In other words, we will
formalize the game played for extracting a given MEV
opportunity in a speciﬁc block. Afterwards, we will
deﬁne the utility of the players as a function of their
balance and the notion of strategy. Finally, we intro-
duce a solution concept of the MEV stage game, the
Sybil resistant Nash equilibrium.

We model the MEV game as a sequential game among
a set of n searchers P = {P1, ..., Pn} who can send
bundles to obtain an MEV opportunity. We will as-
sume that all players compete for the same MEV
opportunity and have suﬃcient capital to extract it.
When a speciﬁc player wins the MEV opportunity, it
reaches a null MEV state for all players. In the fol-
lowing, we will provide a list of points that will deﬁne
the MEV stage game. This game will take into ac-
count the latency of the players, the duration of the
blocks, the mechanism of transaction inclusion, and
the costs of improving software, node location, etc.

1. Continuous time: Searchers act in continuous
time rather than discrete rounds (as in typical
extensive-form games). That is, at any moment
in time, players can take an action that, in our
case study, will be sending a bundle.

2. Local MEV: At time t, each player Pi ﬁnds
an MEV opportunity of value vi(t) ∼ Vi(t), (in
general, such that vi(t) ≥ vi(s)) for all t ≥ s, with
{Vi(t) ∶ t ≥ 0} being a family of distributions.
More speciﬁcally, for each time t, the player ﬁnds
a bundle B such that ∆b(st ○ B, st) = vi(t).
3. Latency: Searchers can see each other’s actions,
but not immediately, due to the latency in the
peer-to-peer network. The latency is modeled
by a directed weighted graph G = (E, V ). Each
searcher controls a set of nodes Ni ⊆ V . So, if
Pj sends a bundle from a subset of peers Lj ⊆
Nj at time tj, Pi observe the bundle at time
t = tj + d(Lj, Ni), where d is the non-symmetric
distance induced by the weight.

4. Probabilistic auction duration: The auction
terminates at a randomly drawn time when a

new block is mined. We model the block interval
as a positive random variable B.

5. Competitors information: Players do not
necessarily know the number of competitors and
their features. However, each player estimates
the number of competitors and their behavior.

6. Access to a public correlating device: Let
(Ω, Pr) be a probability space. All searchers ob-
serve the ﬁrst drawn w ∈ [0, 1] of a uniform pub-
lic random variable X (a beacon or the hash of
the previous block). This can be used by players
to coordinate their actions.

7. Auction Mechanism: Sequencers have a pre-
deﬁned algorithm that inputs a set of bundles
and outputs an order of transactions for inclusion
in a block. We will denote this algorithm by the
ordering mechanism. This ordering mechanism
and the characteristics of the MEV opportunity
(Back-running, Front-running, sandwich,...) de-
termines the revenue for each player. The order-
ing mechanism and the MEV opportunity deter-
minate an auction A = (x, pr), that is, a pair
of maps that take as inputs the set of bundles
and a random event and outputs a winner and
the payment induced per each player. More for-
mally,

x ∶ Views × Ω → {x ∈ {0, 1}
pr ∶ Views × Ω → Rn.

n

∶ x ⋅ 1T

≤ 1}

where Views is the set of transactions seen by
the sequencer when constructing the block.

8. External costs: Players can improve their
mempool view, reduce their latency, and improve
their software to increase their local MEV. The
set of external actions that a player Pi can take
rely on a set of actions Ai, and the costs of
taking those actions are modeled by a function
ci ∶ Ai → R.

Deﬁnition 3.1. Given a set of players P, a random
positive variable B, a gossip network graph G and
an auction mechanism, A = (x, pr), an MEV game is
G = (P, G, B, A, (ci)i=1,..,n). We say the game is sym-
metric if all players share the same features. That is,
Vi = Vj, ci = cj for all i, j, A are symmetric functions
and G is a homogeneous graph.

The MEV game has a structure of sequential con-
tinuous game, and therefore we can deﬁne utilities,
strategies, and solution concepts such as Nash equi-
librium.

5

Deﬁnition 3.2. A strategy Si is a procedure for
participating in the MEV stage game and may be
probabilistic. Si takes the following form, for a cur-
rent time t and a local view viewi(t) of the player i:
i(t)) ← Si(t, viewi(t)). The output a is the
(a, view′
action taken by Pi and is bounded by domain con-
straints. The output view′
i(t) is the updated state,
that is, view′
i(t) = viewi(t) ∪ {a}. A strategy of
a player i is non-adaptive if it does not depend on
the local view viewi(t). More formally, for every t
and every pair viewi(t), view′
i(t) ∈ Viewi(t), it holds
Si(t, viewi(t)) = Si(t, view′
Deﬁnition 3.3. Let S = (S1, ..., Sn) be a strategy
tuple, then the expected payoﬀ of the player Pi is

i(t)).

ui(Si, S−i) ∶= E[∆bi ∣ S],

where S−i is an n−1 tuple without the ith coordinate.
We denote by Si the set of all strategies.
That is, ui(Si, S−i) is the expected payoﬀ of player i
if they execute the strategy Si, the other players exe-
cute the strategy S−i in a domain D. Notice that we
assume players have a monotone risk-neutral utility
over the balances.

Deﬁnition 3.4. Let G be an MEV stage game, we
say that a tuple of strategies (S1, ..., Sn) is a Nash
equilibrium (NE) if for each player Pi

ui(Si, S−i) ≥ ui(

˜Si, S−i), for all strategies ˜Si.

In other words, if players are taking the strategies
(S1, ..., Sn), none of them have incentives to deviate
unilaterally. We denote NE(G) the set of all Nash
equilibrium.

However, the notion of Nash equilibrium is not strong
in permissionless environments. For example, the
equilibrium of ﬁrms competing in the Cournot price
model [14] is weak against Sybil attacks. Another ex-
ample is the equilibrium constructed in the theorem
of Flashboys 2.0 [5] that proves that exponential raise
bidding strategies with grim-trigger area a Nash equi-
librium in the game with two players. Nevertheless,
one can prove that agents have incentives to use Sybil
attacks to maximize their payoﬀ. For this reason, we
introduce a stronger notion of a solution concept for
MEV games that are resistant to Sybil attacks:

Deﬁnition 3.5. Let G be a symmetric3 MEV game
with n players, and let φ ∶ N → ⊕
Si be a strategy
mapping. A Sybil resistant Nash equilibrium is φ
Si, and φ(n) is
such that for all n ∈ N, φ(n) ∈ ⊕
3This deﬁnition can be extended to non-symmetric games,

n
i=1

∞
i=1

but we will leave it for future work.

6

a Nash equilibrium, where for each i ∈ {1, . . . , n} and
j ∈ {1, . . . , n + 1} − {i},

ui(φ(n)i, φ(n)−i) ≥ ui(φ(n + 1)i, φ(n + 1)−i)

+ uj(φ(n + 1)j, φ(n + 1)−j).

The notion of Sybil resistance is important in per-
missionless pseudo-anonymous environments such as
blockchains. Players have the ability to generate ad-
ditional addresses to take more proﬁts from cooper-
ative strategies. In future work, we will prove that
Sybil resistant cooperative Nash equilibrium exist in
the priority gas auction in the non-repeated games,
and the existence of Sybil resistant equilibrium in
games with private mempools.

4 Price of MEV

MEV games have an important impact on users,
network congestion,
computation overload, and
blockchain liveness. On one hand, some MEV oppor-
tunities arise from value extracted from users. On
the other hand, in general, MEV games induce an
ineﬃcient extraction of MEV opportunities, leading
to network congestion (e.g. P2P network load), and
chain congestion (e.g. block-space usage).
In this
paper, we will not take into account the negative
externalities of MEV on individual users (for exam-
ple, sandwich attacks and oracle manipulation), but
rather the negative externalities that impact the con-
sensus protocol, liveness, chain quality, stake distri-
bution, etc. Suppose there is an MEV opportunity
on a state st, with a set of n players that compete
to extract it, sending bundles B1, ..., Bk. Then, a se-
quencer, using the ordering mechanism or, outputs
a block (this order mechanism does not necessarily
In this
respect the internal order of the bundles).
setting, we deﬁne the block space cost as the gas cost
of executing the block built by the ordering mecha-
nism using the bundles, more formally

C(B1, ..., Bk; st) = gasUsed (st ○ or(∪

k
i=1Bi)) .

(3)

We naturally extend the function of cost over strate-
gies by taking the outcome (or the expected outcomes
in case of mixed strategies) of the strategies (the
broadcasted bundles). Clearly, ex-post it is trivial to
compute the gas cost. However, ex-ante, estimating
the gas costs induced by the MEV game is much more
complex due to the non-commutative nature of exe-
cution costs. Also, other cost functions can be very
relevant in some domains. Diﬀerent MEV games can
induce other types of negative externalities, such as

wasted resources induced by computation costs4 or
centralization eﬀects.

of actions that induce a null MEV state NS, we deﬁne
the price of MEV as:

In general, self-interested behaviour by strategic play-
ers leads to an ineﬃcient result, an outcome that
could be improved upon given centralized control over
everyone’s action [12]. Nevertheless, imposing such
control can be costly, infeasible or undesirable (due
to trust assumptions). This motivates the search
for conditions and mechanisms in which decentral-
ized optimization by strategic agents is guaranteed
to produce a near-optimal outcome. The price of an-
archy (PoA) [13] is a measure that quantiﬁes how far
is the worst Nash equilibrium (in the sense of social
cost) with respect to any optimal conﬁguration that
minimizes the social cost. More formally, given a cost
function C and the set of Nash equilibrium N E, the
price of anarchy is deﬁned as:

PoA =

maxS∈N E C(S)
minS C(S)

.

Diﬀerent examples of the study of the price of anar-
chy can be seen in [4, 12, 13]. However, the price of
anarchy in the MEV game is, in general, not well-
deﬁned. For example, assume that two players are
competing for extracting the same arbitrage oppor-
tunity. Then, as we will see, the block space cost
of extracting the arbitrage opportunity will be the
sum of gas used by executing both searchers’ trans-
actions. However, the minimal cost of the game is
zero, since not extracting the MEV opportunity is a
feasible outcome. Therefore, the ratio is not deﬁned,
leaving an inconsistent deﬁnition of the price of anar-
chy in the MEV game. In the following, we propose
a small adjustment to have a well-deﬁned price of
anarchy in the MEV game, which we denote as the
Price of MEV. This measure tracks the social costs
induced by the competition among individually ratio-
nal agents for MEV extraction in a particular MEV
game. More precisely, the Price of MEV is a fam-
ily of measures parametrized by the social cost func-
tions. This family of measurements can be useful to
compare the negative externalities and trade-oﬀs of
diﬀerent MEV games. Similar to the price of anarchy
deﬁnition, the price of MEV of game G with social
cost C is the ratio of the worst Nash equilibrium with
respect to the extraction made by the most eﬃcient
player in an order-free consensus protocol blockchain.

Deﬁnition 4.1. Given a cost function C, the set of
Sybil resistant Nash equilibrium SNE(G), and the set

PoMEV(G, n) =

maxS∈SN E(G) C(S)
minS∈NSC(S)

,

where mina∈NSC(a) is the minimum cost taken by
extracting the MEV opportunity.

We argue that a more eﬃcient mechanism to extract
MEV opportunities (low Price of MEV) can have an
important impact on blockchain stability, users util-
ity, and consensus protocol5. In the case where the
cost function is deﬁned over pure strategies, we can
extend the deﬁnition naturally over the mixed strate-
gies, taking the expectancy of the outcomes.

5 Conclusions

and

Future

Work

In this work, we proposed measures to formally study
the Nash equilibrium and negative externalities of dif-
ferent ordering mechanisms. We think that this is im-
port due to the future changes on Ethereum mainnet
about Proposer-Builder separation and MEV-boost
[7]. We leave for future work to study and compute
the price of MEV of popular proposed ordering mech-
anisms. Also, in the future we will study the negative
externalities of zero-sum MEV opportunities such as
sandwich attacks, time bandit attacks, eclipse at-
tacks, draining bot attacks6, and censorship attacks.
We conjecture that a domain with suboptimal block-
space market design will lead to more block-space
misuse (high price of MEV), raising the transactions
fees of the underlying domain. The higher transac-
tions fees will increase the direct payments of the
miner (another form of MEV) and the market ineﬃ-
ciencies. This market ineﬃcient will imply ineﬃcient
price discover, creating more internal and cross chain
MEV opportunities. We call this eﬀect the Circular
forces of MEV 1.

References
[1] Yal¸cın Ak¸cay, Haijun Li, and Susan H Xu.
“Greedy algorithm for the general multidimen-
sional knapsack problem”. In: Annals of Oper-
ations Research 150.1 (2007), pp. 17–29.
[2] Guillermo Angeris, Alex Evans, and Tarun Chi-
tra. “A Note on Bundle Proﬁt Maximization”.
In: Stanford University, 2021.

4For example, the energetic costs induced by computing
TH/s in blockchains that order transactions by nonce. See
BSC-PR for more details.

5Note that we are assuming that the extractable value exists

and will be extracted.

6https://github.com/Deﬁ-Cartel/salmonella

7

Figure 1: Circular forces of MEV

[3] Kushal Babel

Automated analysis of
in smart
arXiv:2109.04347 (2021).

contracts”.

et al. “Clockwork ﬁnance:
security
economic
arXiv preprint

In:

[4] George Christodoulou and Elias Koutsoupias.
“The price of anarchy of ﬁnite congestion
games”. In: Proceedings of the thirty-seventh
annual ACM symposium on Theory of comput-
ing. 2005, pp. 67–73.

[5] Philip Daian et al. “Flash boys 2.0: Fron-
trunning in decentralized exchanges, miner ex-
tractable value, and consensus instability”. In:
2020 IEEE Symposium on Security and Privacy
(SP). IEEE. 2020, pp. 910–927.

[6] Ethereum. “Sort transactions at the same gas

price by received time”. In: 2020.

[7] Flashbots. MEV-Boost. 2022. url: https://

github.com/flashbots/mev-boost.

[8] Mahimna Kelkar et al. “Order-fairness for
byzantine consensus”.
Interna-
tional Cryptology Conference. Springer. 2020,
pp. 451–480.

In: Annual

[9] Kshitij Kulkarni, Theo Diamandis, Tarun Chi-
tra, et al. “Towards a Theory of Maximal Ex-
tractable Value I: Constant Function Market
Makers”. In: arXiv preprint arXiv:2207.11835
(2022).

[10] Alexandre Obadia et al. “Unity is Strength:
A Formalization of Cross-Domain Maxi-
mal Extractable Value”. In: arXiv preprint
arXiv:2112.01472 (2021).

[11] Ulrich Pferschy and Joachim Schauer. “The
Knapsack Problem with Conﬂict Graphs.” In:
J. Graph Algorithms Appl. 13.2 (2009), pp. 233–
249.

[12] Tim Roughgarden. “Intrinsic robustness of the
price of anarchy”. In: Journal of the ACM
(JACM) 62.5 (2015), pp. 1–42.

[13] Tim Roughgarden. Selﬁsh routing and the price

of anarchy. MIT press, 2005.

[14] Roy J Ruﬃn. “Cournot oligopoly and compet-
itive behaviour”. In: The Review of Economic
Studies 38.4 (1971), pp. 493–502.

[15] Harvey M Salkin and Cornelis A De Kluyver.
“The knapsack problem: a survey”. In: Naval
22.1 (1975),
Research Logistics Quarterly
pp. 127–144.

[16] Alejo

Salles.

“On

malization
https://writings.ﬂashbots.net/research/formalization-
mev/ (2021).

of

the
MEV”.

For-
In:

[17] Ayelet Sapirshtein, Yonatan Sompolinsky, and
Aviv Zohar. “Optimal selﬁsh mining strate-
gies in bitcoin”. In: International Conference
on Financial Cryptography and Data Security.
Springer. 2016, pp. 515–532.

[18] Ben Weintraub et al. “A Flash (bot)

in
the Pan: Measuring Maximal Extractable
Value in Private Pools”. In: arXiv preprint
arXiv:2206.04185 (2022).

A Examples of ordering mech-

anisms

For the sake of completeness, we will provide a list of
examples of ordering mechanisms. They are induced
in diﬀerent domain and consensus protocol designs.

• Priority gas ordering mechanism : Se-
quencers try to solve the KEV by using the
greedy approximation algorithm that consists of
ordering the transactions by gas price.
In this
case, if a player is trying to capture an MEV
opportunity, it must monitor the mempool and
choose an optimal gas price m. If a player is try-
ing to front-run a transaction tx, with gas price
m, it is enough to outbid it with m + η. In this
setting, if the gas cost of exploiting this MEV
opportunity is g, the block-space price of MEV
of the uni-agent game is 1.

• Flashbots mechanism: Searchers send bun-
dles to the relayer through a private channel.
The Flashbots relayer tries to build the block
with the highest proﬁts among all the blocks
that can be constructed using the transactions
in the public mempool and the Flashbots mem-
pool of bundles. But the bundles have a number
of allocation constraints that the Flashbots re-
layer must account for [16].
In order to build
the block with the highest proﬁt, Flashbots (to
our knowledge) uses a greedy approximation al-
gorithm. As described in the Flashbots docu-
mentation, a bundle B is ordered by eﬀective

8

gas price / bundle score, which is deﬁned as,

sc(B) ∶=

∆coinbase + ∑tx∈B∖T X g(tx)m(tx)
∑tx∈B g(tx)

where ∆coinbase denotes the direct payment to
the miner, T X is the set of mempool transac-
tions, g(tx) is the gas used by tx and m(tx) is
the gas price of tx.

• Random ordering mechanism: The transac-
tions included in the next block and the order
of transaction execution are probabilistic with a
uniform distribution.

• First input ﬁrst output mechanism: The
transactions are ordered by the sequencer lo-
cal’s timestamps or by a pseudo-global times-
tamp such as the one mentioned in [8]. In this
sense, players with better geolocation and propa-
gation algorithms will win the MEV game. How-
ever, in decentralized systems, this will depend
on the leader geolocation that will change ran-
domly per round.

• Dictatorship/Permissioned mechanism:
The sequencer has its own arbitrary ordering
rule, prioritizing transactions of a ﬁxed set of
addresses.
In this setting, players do not have
a lot of freedom to interact or win the MEV
opportunity. In other words, the sequencer will
censor other players’ transactions to prioritize
its own extraction. Moreover, this potentially
will induce ineﬃcient market prices. However,
the block-space price of anarchy is minimized
since just one player is extracting it. This
rule also models the situation where the miner
captures the MEV opportunity, prioritizing its
own proﬁtable bundles.

• Metadata mechanism: Let ({0, 1}

n, ≤) be
a total ordered set. Transactions and bundles
can add a parameter nonce, giving them an
associated hash identiﬁcation. Then the bundles
and transactions are ordered by hashes. For
example,
if a transaction tx with nonce tries
to extract a back-running arbitrage oppor-
tunity, then a player will try to produce a
transaction that extracts the opportunity nonce
nonce’ < nonce.

B Bot example

Before the pull request [6], transactions with the same
gas price were randomly ordered, creating incentives

9

Ethereum (Geth)
Polygon
BSC
Avalanche
Arbitrum
Shutter Network
Solana
Flashbots (alpha-v0.6)

PGA FSS R.O. Perms. MP
(cid:55)
(cid:51)
(cid:55)
(cid:55)
(cid:55)
(cid:55)
(cid:55)
(cid:55)/

(cid:55)/∼
(cid:55)
(cid:55)
(cid:51)
(cid:51)
(cid:55)
(cid:51)
(cid:55)

(cid:51)
(cid:55)
(cid:51)
(cid:55)
(cid:55)
(cid:51)
(cid:55)
(cid:51)

(cid:51)
(cid:51)
(cid:51)
(cid:55)
(cid:51)
(cid:51)
(cid:51)
(cid:51)

(cid:55)
(cid:55)
(cid:55)
(cid:51)
(cid:51)
(cid:51)
(cid:55)
(cid:51)

Table 1: MEV games features diﬀerent chains.
Perms= Permissionless and MP = Mempool Privacy.

for searchers to spam transactions to capture an MEV
opportunity.
In the following, we will show how a
particular MEV bot that captured back running op-
portunities, was responsible for consuming unneces-
sary block space to increase its expected revenue.
A lot of examples can be seen using tools such as
mev-inspect-py. Moreover, we could lower bound
the estimated block space price of MEV by ≈ 7.

Figure 2: Total gas used and eﬃcient gas used by bot
MEV Bot 0x00...E9a

C Flashbots counter-example

Let FBR(B1, ..., Bn) be the revenue using the
Flashbots greedy approximation algorithm.
Let
OTP(B1, ..., Bn) be the maximal revenue of the
Flashbots combinatorial problem.

Claim: The Flashbots combinatorial auction is not
optimal. More speciﬁcally,

inf{

FBR(B1, ..., Bk)
OPT(B1, ..., Bk)

∶ for B1, ..., Bk bundles} ≤

1
gmin ⌋ − 1

L

,

⌊

where gmin is the minimal gas consumed by compet-
ing bundles and L is the gas limit of a block.

Proof : Let B1, ..., Bk all the bundles such that, B1
compete with Bi for all i /= 1 and Bi, Bj are pairwise
non-competing bundles. Moreover, assume that B1

has gas costs L/k and eﬀective gas bid m + ε for ε > 0
and all the other bundles have gas bid m. Then, the
Flashbots algorithm outputs B = {B1}, leaving to a
sequencers’ revenue of m + ε. On the other hand, the
optimal valid block is B = {B2, ..., Bk} with m(k − 1)
revenue. The result follows using bundles with gas
cost gmin.

10

