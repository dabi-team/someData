1
2
0
2

v
o
N
2
1

]
h
p
-
t
n
a
u
q
[

1
v
7
1
7
6
0
.
1
1
1
2
:
v
i
X
r
a

Device-Independent-Quantum-Randomness-Enhanced Zero-Knowledge Proof

Cheng-Long Li,1, 2, 3 Kai-Yi Zhang,4 Xingjian Zhang,5 Kui-Xing Yang,6 Yu Han,5, 7 Su-Yi Cheng,1, 2, 3
Hongrui Cui,4 Wen-Zhao Liu,1, 2, 3 Ming-Han Li,1, 2, 3 Yang Liu,8 Bing Bai,1, 2, 3 Hai-Hao Dong,1, 2, 3
Jun Zhang,1, 2, 3 Xiongfeng Ma,5 Yu Yu,4 Jingyun Fan,6 Qiang Zhang,1, 2, 3, 8 and Jian-Wei Pan1, 2, 3
1Hefei National Laboratory for Physical Sciences at Microscale and Department of Modern Physics,
University of Science and Technology of China, Hefei 230026, P. R. China
2Shanghai Branch, CAS Center for Excellence and Synergetic
Innovation Center in Quantum Information and Quantum Physics,
University of Science and Technology of China, Shanghai 201315, P. R. China
3Shanghai Research Center for Quantum Sciences, Shanghai 201315, P. R. China
4Shanghai Jiao Tong University, Shanghai 200240, P. R. China
5Center for Quantum Information, Institute for Interdisciplinary Information Sciences,
Tsinghua University, Beijing 100084, P. R. China
6Shenzhen Institute for Quantum Science and Engineering and Department of Physics,
Southern University of Science and Technology, Shenzhen, 518055, P. R. China
7State Key Laboratory of Mathematical Engineering and Advanced Computing, Zhengzhou 450001, Henan, P. R. China
8Jinan Institute of Quantum Technology, Jinan 250101, P. R. China

Zero-knowledge proof (ZKP) is a fundamental cryptographic primitive that allows a prover to
convince a veriﬁer of the validity of a statement without leaking any further information[1]. As an
eﬃcient variant of ZKP, non-interactive zero-knowledge proof (NIZKP) adopting the Fiat-Shamir
heuristic is essential to a wide spectrum of applications, such as federated learning[2], blockchain
and social networks[3]. However, the heuristic is typically built upon the random oracle model
making ideal assumptions about hash functions, which does not hold in reality and thus undermines
the security of the protocol[4]. Here, we present a quantum resolution to the problem. Instead of
resorting to a random oracle model, we implement a quantum randomness service. This service
generates random numbers certiﬁed by the loophole-free Bell test[5, 6] and delivers them with post-
quantum cryptography (PQC) authentication[7]. Employing this service, we conceive and implement
a NIZKP of the three-colouring problem[8]. By bridging together three prominent research themes,
quantum non-locality, PQC and ZKP, we anticipate this work to open a new paradigm of quantum
information science.

From bank loans to adding friends on social networks,
while sharing our personal data to validate ourselves, we
might raise the following doubt: is it really necessary to
share so much information? To unveil nothing more than
exactly required by the tasks, we can use ZKP[3]. In the
original format of ZKP, a prover needs to interact with a
veriﬁer for many rounds of challenges. In multi-party ap-
plications, unfortunately, such a one-to-one highly inter-
active protocol becomes impractical or even unrealisable.
In comparison, NIZKP sends a one-round message to con-
vince multiple veriﬁers, hence is favourable in real-life us-
age. NIZKP typically relies on the Fiat-Shamir heuristic
that is instantiated in the random oracle model. The
outcome of cryptographic hash functions, such as SHA2
and SHA3[9, 10], are used as cryptographic random num-
bers in the random oracle model with a known input.
Though the hash functions based on high computational
complexity make the pseudo-random numbers practically
hard to guess, the hashing functions are deterministic in
essence. On the one hand, no intrinsic randomness can
be produced from a deterministic function. A few in-
secure counterexamples have been found about the use
of the random oracle model[4]. On the other hand, the
belief in computational complexity is challenged by the
emerging quantum computing technology which promises
unprecedented computing power[11, 12].

we show that quantum physics oﬀers a resolution to the
problem. We report in this work a quantum random-
ness service that consists of a randomness beacon and
a timestamp server. The randomness beacon produces
random numbers from loophole-free Bell tests, namely
device-independently, and broadcasts them to the pub-
lic with PQC-based algorithms. As the entropy source,
the device-independent quantum random number gen-
eration (DIQRNG) does not require any prior assump-
tions or characterisations of the inner working status
Instead, the generated ran-
of the quantum devices.
domness is certiﬁed based solely on the quantum non-
local behaviour[14]. For the delivery of random num-
bers, we apply a lattice-based signature algorithm that
In addi-
is secure against known quantum algorithms.
tion, we also provide a timestamp server, which signs
the digital message on requirement with PQC-based al-
gorithms. The combination of DIQRNG and PQC signa-
ture bring a high-security level for the public randomness
service. Based on this service, we conceive and experi-
mentally demonstrate an eﬃcient and secure NIZKP of
NP-complete three-colouring problem. In the following,
we ﬁrst present a NIZKP protocol of NP-complete three-
colouring problem, then introduce its experimental real-
isation, central to which is the preparation of a quantum
randomness service.

Inspired by the principle of quantum non-locality[13],

Results. —Graph colouring is a famous problem in

 
 
 
 
 
 
computational complexity. Formally, a graph G(V, E)
with vertices V connected by edges E is three-colourable
if there exists a mapping φ : V → {1, 2, 3} such that every
two adjacent vertices connected by an edge have diﬀer-
ent colours, i.e., ∀u, v ∈ V and (u, v) ∈ E, φ(u) (cid:54)= φ(v).
As a special case of graph colouring, three-colouring is
NP-Complete[15]. That is, each NP problem instance
corresponds to an instantiation of a particular three-
colourable graph. Hence a secure and eﬃcient protocol to
prove the three-colourability is of fundamental interest.
In our NIZKP of three-colouring problem, the prover can
convince that he has a solution to the problem without
revealing the speciﬁc colouring assignments.

Our protocol of the three-colouring problem is com-
piled from the basic sigma protocol of the classic three-
colouring protocol[1]. Diﬀerent from the common NIZKP
protocol, apart from the prover and veriﬁer, we introduce
a randomness service, as shown in Fig. 1. With the aid of
the service, the prover and veriﬁer remain the capability
to generate a non-interactive proof directly, while they
no longer need to resort to the random oracle assump-
tion. The randomness service is essentially composed of
a randomness beacon[16] and a timestamp server. The
random service must be secure and the prover needs to
show that the challenge from the beacon is generated af-
ter the commitment is published. With a trusted times-
tamp server, the commitment can be certiﬁed at the time
of the event.

Initially, the timestamp server and the beacon each
generate a pair of public key and secret key with PQC
denoted by (pkts, skts) and (pkbc, skbc), respectively, keep
the secret key and share the public key with all partici-
pants. We then execute the protocol as follows:

1. The prover prepares an assignment of colouring
denoted by φ, chooses uniformly a permutation
π ∈ S3, commits π(φ(i)) for all vertices i ∈ V which
are denoted by c, {Com(π(φ(i)))} → c, and sends
c to the timestamp server.

2. The timestamp server signs c and the received time
t on a signature σt, Sign(skts, c, t) → σt, sends σt
and t to the prover.

3. A beacon broadcasts the random bits rt(cid:48) with sig-

nature σt(cid:48), Sign(skbc, t(cid:48), rt(cid:48)) → σt(cid:48).

4. The prover chooses a random edge e = (j, k) ∈ E
according to rt(cid:48), and decommits cj, ck to obtain
dj = Decom(cj), dk = Decom(ck).

5. The

prover

ﬁnal
sends
(c, σt, t, t(cid:48), rt(cid:48), σt(cid:48), e, dj, dk) to the veriﬁer.

the

proof

6. The verifer checks if the commitments, the random
bits, and the signature are correct, and the colour
of the two vertices are diﬀerent.

Completeness of this protocol follows inspection. For
protocol soundness, if the graph is not three-colourable,
then at least one edge has the same colour on both ends

2

the

We

(vertices). Assuming the commitment protocol is per-
fectly binding, the protocol soundness error is at most
(|E| − 1)/|E| and can be boosted to 2−λ for an arbitrary
parameter λ > 0 by repeating the process[15]. The zero-
knowledge property follows from the hiding property of
the commitment protocol.
implement

randomness-service-enhanced
NIZKP protocol, with the ﬂow-chart shown in Fig. 2(a).
In this proof-of-principle experiment, the randomness
beacon broadcasts timed outputs of fresh public ran-
domness in a block every minute continuously. A
block, which is called a ‘beacon pulse’, contains 512
fresh random bits that are time-stamped, signed, and
hash-chained[17]. The timestamp server keeps waiting
for the requirement of signing the commitment. The
prover sends the proof to the veriﬁer. Then, the veriﬁer
opens the signature and commitment and checks if the
conditions are satisﬁed.

For the security of the protocol, the randomness bea-
con needs to satisfy a set of properties required for a high
level of trust: (1) Unpredictability: the values of random
bits cannot be predicted before their generation; (2) Au-
tonomy: the source is resistant to any outside attempt to
alter the distribution of random bits; (3) Consistency: a
set of users can receive the same random bit-strings from
the broadcast[17].

In the construction of the randomness beacon, we
adopt the DIQRNG as the entropy source[5, 6, 18–
20]. The device-independent feature of DIQRNG guar-
antees the requirement of unpredictability.
In essence,
we realise a loophole-free Clauser-Horne-Shimony-Holt-
type (CHSH) Bell test experiment[21–25]. As shown
in Fig. 2(b), an Einstein-Podolsky-Rosen (EPR) state
source in Building 1 emits a pair of photons in the EPR
state and delivers one photon to Alice at a distance of 93
m to the west and another photon to Bob at a distance of
90 m to the east. The spatial separations are suﬃciently
large to close the locality loophole. In Fig. 2(c), we show
the time-space coordinates of the relevant events. The
total system eﬃciency for photon delivery and detection
reaches 81%, which is suﬃcient to close the detection
loophole[6, 20]. We use the quantum probability esti-
mation method to evaluate the randomness generated in
the Bell test experiment[26] and utilise a quantum-proof
strong randomness extractor[27] to extract uniformly dis-
tributed random bits. The Bell test experiment gener-
ates 512 bits of randomness in about 31.38 seconds with
a soundness error of 2−64. The randomness extraction
takes approximately one second, with a soundness error
of 2−100.

To fulﬁl autonomy and consistency, in the authenti-
cation procedure, we apply a lattice-based AIGIS PQC
signature algorithm[7] in the security module of the bea-
con to identify the randomness server. In addition, we
apply in parallel an RSA-4096 signature algorithm[28].
The lattice-based signature algorithm is secure against
all known quantum algorithms, providing quantum-safe
protection. The random numbers needed to produce the

3

FIG. 1. A NIZKP of three-colourability based on a randomness service. With the aid of the randomness service that is
equipped with a beacon and timestamp, the prover hopes to prove the knowledge of three-colourability to the veriﬁer in the
fashion of NIZKP. We depict the computation and communication steps in time order. Notations are deﬁned by the following.
A commitment scheme consists of two algorithms, Com and Decom. Com on the inputs of a message outputs a commitment and
instantiated by the SHA256 hash function in this experiment. Decom on the inputs of a commitment outputs a decommitment.
Open on the inputs of a commitment and a decommitment, outputs false or true, corresponding whether the commitment and
the decommitment are consistent. Here, we verify if the decommitment is the key of the SHA256 hash function. Sign on the
inputs of a secret key and a message outputs a signature. Verify on the inputs of public keys, a signature and a message output
false or true, corresponding to whether the message is signed by the owner of the public key. Proof contains all the information
that is required for the veriﬁcation.

.

public and private keys for RSA 4096 and Aigis PQC
comes from our previous DIQRNG experiment[20]. The
private key (skbc) is used to sign the message and the
public key (pkbc) is broadcast to everyone. The double
certiﬁcation ensures the trust of the randomness beacon
service.

In addition to the randomness beacon, in our random-
ness service, we also provide a timestamp server synchro-
nized to the Coordinated Universal Time (UTC). The
timestamp server applies a lattice-based AIGIS PQC sig-
nature algorithm to provide the public key and private
key (pbts, skts) on the requirement. In implementing our
NIZKP protocol, this timestamp server authenticates the
commitment of the prover in each round of the experi-
ment.

In implementing the NIZKP protocol, we arrange the

prover and the veriﬁer in Building 2. They receive the
random bits broadcast by the beacon and are 139 m away
from Building 1, as shown in Fig. 2(b). With the envi-
ronment of both the prover and the veriﬁer in OS Win10,
CPU i7-9750H CPU @ 2.60GHz, RAM 16.0 GB, we ex-
tend the randomness r by pseudorandom number gen-
erator on sampling the edge e with SHA256 in counter
mode. We generate randomness used in commitment and
signature by the Intel chip command ‘rdseed’.

We proceed with the experimental demonstrations of
NIZKP of the three-colouring problem with graphs of dif-
ferent sizes. With the number of edges E set to E = 3V ,
our experimental results show that the consumption of
the resource, i.e., time of commit phase, time of response
phase, time of verifying phase, and proof size, exhibits
an asymptotic complexity of O(|V |2) with respect to the

ProverTimeStampBeaconVeriﬁerRandomnessService∀i∈V,c←{Com(π(φ(i)))}cσt←Sign(skts,(c,t))σt,tGeneratert(cid:48).σt(cid:48)←Sign(skbc,(t(cid:48),rt(cid:48)))t(cid:48),rt(cid:48),σt(cid:48)Sample(j,k)fromrt(cid:48);dj=Decom(cj);dk=Decom(ck)Proof=(c,σt,t,t(cid:48),rt(cid:48),σt(cid:48),dj,dk)Sample(j,k)fromrt(cid:48);Checkt<t(cid:48)∧Verify(pkts,σt,(c,t))∧Verify(pkbc,σt(cid:48),(t(cid:48),rt(cid:48)))∧Open(cj,dj)∧Open(ck,dk)∧π(φ(j))(cid:54)=π(φ(k))4

(a)

(b)

(c)

FIG. 2. Schematics of the experiment. (a) A ﬂowchart demonstration of the experiment. The randomness service contains
Randomness Beacon and Timestamp Server. The randomness beacon broadcasts random bits and the timestamp server signs
the commitment and the received time. Prover and Veriﬁer communicate with the beacon and timestamp to carry out the
NIZKP protocol. The timestamp server is synchronised with Coordinated Universal Time (UTC). The beacon contains a
device-independent random number generator (DIQRNG) as the entropy source, a Security Module to provide the authenticity
of signed beacon pulses, a Beacon APP to process inputs from DIQRNG, a timestamp from Timestamp Server, and the Web
Server broadcasts the beacon pulse containing 512 bits to the public. (b) Schematic diagram of the overall experimental set-
up. An EPR pair source is located in Building 1, where pairs of entangled photons are transmitted through a ﬁbre to the
measurement stations in opposite directions with free-space distances of 93 m and 90 m, denoted as Alice and Bob, respectively.
Other beacon components are located in the same lab as the EPR source. The prover and the veriﬁer are located in Building
2, which is 139 m from Building 1. (c) Space-time diagram for the DIQRNG experimental conﬁguration. The values TR1,2
are the time for Pockels cells to get ready for state measurement and TM 1,2 are the time elapse for single-photon detectors to
output an electronic signal. No signalling between relevant events is allowed in this conﬁguration (See Appendix D 2 d for more
details)

.

number of vertices V , which complies with our algorithm,
as shown in Table I. The overall soundness error of our
protocol is the sum of 2−64 (randomness generation),
2−100 (randomness extraction), and 2−64 (ZKP).

Conclusions. —We propose a NIZKP protocol with
the aid of a public randomness service, which removes the
random oracle model. As a demonstration, we implement
the protocol for the three-colouring problem. To realise
the protocol, we build the randomness beacon, the core of
our randomness service, using a loophole-free DIQRNG
and quantum-safe signature algorithms, which enhance

the security of the ZKP protocol. To our best knowl-
edge, this is the ﬁrst time that DIQRNG is applied to
the randomness beacon. The frame of our randomness
beacon forms a strong trust chain. The basic trust origi-
nates from the correctness of quantum mechanics, which
guarantees the intrinsic unpredictability of random num-
bers. For the delivery of the random numbers, thanks to
the use of quantum-safe authentication algorithms, the
users can trust their access. Valid users can also ver-
ify the broadcast random numbers using the timestamps
In the future, the trust chain can be
and signatures.

Security ModuleBeacon AppWeb ServerBeacon Pulse10011...com.sign.BeaconTimestampProverVerifierExtEPR Pair SourceAliceBobDIQRNGRandomness ServiceNIZKPproof90mAliceEPR Pair SourceBob93mBeaconProverVerifier139m21N200400600AliceBobEPR Pair Source-93m90mDistance(m)R1T1MTR2TM2T0Time(ns)commit time/s response time/s verify time/s proof size/MB # of rounds

V
50 2.19
100 8.72
150 19.78
200 35.52
250 54.93

1.25
4.92
11.16
19.65
31.03

0.08
0.23
0.45
0.73
1.08

21.73
84.03
188.97
334.46
521.20

6632
13286
19940
26595
33249

5

TABLE I. Results of our non-interactive zero-knowledge proof. Commitment time is the time consumption of the prover in
step 1. Response time is the time consumption of the prover in step 2, 3 , 4 and 5. Verify time is the time consumption of
the veriﬁer in step 6. Note that we count only local computation time, except communication time. Proof size is the disk
and communication consumption of the proof in step 5. The number of rounds is the number of parallel repetitions. The
consumption of random service is fairly small, thus we omit them here.

further boosted. By combining various randomness bea-
con services owned by separate administrative identities
and even more countries in a quantum network, the users
can bypass the problem of one or a few malicious bea-
con services. Starting from the fundamental discussion
on local realism and quantum non-locality by Einstein,
Podolsky, and Rosen in 1935[29], continuous experimen-
tal and theoretical developments have innovated the most
secure information-technology applications thus far, the
device-independent quantum cryptography, and shall in-
spire more device-independent quantum information pro-

cessing applications.
Acknowledge.

by

Key

—This work was

National
(R&D)Plan

the
Development

sup-
Research
ported
and
China
(2018YFB0504300,2020YFA0309701,2017YFA0303900),
the National Natural
of
China(T2125010), the Chinese Academy of Sciences, the
Anhui Initiative in Quantum Information Technologies,
Shanghai Municipal Science and Technology Major
Project (2019SHZDZX01), and the leading talents of
Quancheng industry.

Foundation

Science

of

C.-L. L and K.-Y. Z. contributed equally to this work.

Appendix A: Zero-knowledge proof for the three-colouring problem

The well-known three-colouring problem is NP-complete, which means that any NP problem can be converted
to it in polynomial time [15]. Therefore, a ZKP protocol can apply to all NP problems if it is applicable to the
three-colouring problem. We ﬁrst give the deﬁnition of three-colourability.

Deﬁnition 1. A graph G is three-colourable if the vertices of a given graph can be coloured with only three colours,
such that no two vertices of the same colour are connected by an edge.

4

1

5

2

6

3

FIG. 3. An illustration of a three-colourable graph. In the showcase, with a colouring of only three colours, namely, pink,
yellow, and green, every two adjacent vertices linked by an edge have diﬀerent colours.

For the three-colouring problem, there exists a zero-knowledge-proof protocol, where a prover can prove the state-

ment about a speciﬁc graph’s three-colourability to a veriﬁer without revealing any knowledge [1].

Let G be a graph of n vertices and deﬁne V = {1, ..., n} be the set of vertices, E is the set of edges, φ(i) be the
colour of i. On input the graph G is known to both parties. The prover is given a private input in the protocol that
is the witness which is a three-colouring of the graph G. The protocol proceeds as follows.

6

Zero-knowledge proof for the three-colouring problem

1. Prover: Randomly permute the three colours to obtain a new colouring. Utilize a commitment scheme

to commit the colour of all vertices. ∀i ∈ V, c ← {Com(π(φ(i)))}. And then send c to Veriﬁer.

2. Veriﬁer: Generate random number r and send it to Prover.

3. Prover: Sample (j, k) from r; dj = Decom(cj); dk = Decom(ck). Send dj, dk to Veriﬁer.

4. Veriﬁer: Accept if π(φ(j)) (cid:54)= π(φ(k)) and open commitment correctly. Reject otherwise.

In the format of ZKP, it usually needs several communication steps to complete the protocol. However, Fiat-
Shamir heuristic can transform the protocol from interactive to non-interactive by assuming the existence of the
random oracle [30], so that the protocol can be ﬁnished in one communication step.

Deﬁnition 2 (Random Oracle[31]). In cryptography, a random oracle is an oracle (a theoretical black box) that
responds to every unique query with a (truly) random response chosen uniformly from its output domain. If a query
is repeated, it responds the same way every time that query is submitted.

When we want to implement the scheme in the real world, a random oracle is not available. Instead, random oracle
is widely used to model hash functions, although the outputs of hash functions are actually determined (without any
unpredictability). Therefore the random oracle is oversimpliﬁed. Most of Fiat Shamir Heuristic can be proved secure
only in the random oracle model.

Let m1, m2, m3 be the three messages sent between the Prover and the Veriﬁer. The Fiat-Shamir transformation

is executed as follows:

Fiat-Shamir Transformation

1. The Prover sends the message m1 to the Veriﬁer.

2. The message m2 is sent to the Prover based on the random picking of an edge which is viewed as a string.

m2 is computed as m2 = H(m1). Where H(·) is a random oracle.

3. Since H(·) is a public hash function, the computation can actually be done by the Prover. Thus the

Prover sends m1, H(m1), m3 to the Veriﬁer.

We brieﬂy introduce the interactive ZKP and the non-interactive ZKP using Fiat-Shamir heuristic in Fig. 4. The
origin interactive ZKP requires a truly uniform random number r. However, in the Fiat-Shamir heuristic, the prover
calculates the hash of the commitment and regard it as the random number.

Appendix B: Post-Quantum-Cryptography Signature Algorithm

In general, a lattice-based post-quantum-cryptography (PQC) signature is more complicated than its classical
counterparts such as RSA and ECDSA. We brieﬂy introduce our PQC digital signature algorithm, Aigis.Sig[7], which
is based on the “Fiat-Shamir with Aborts” technique and can be seen as a variant of the NIST PQC round-3 ﬁnalist
CRYSTALS-DILITHIUM [32].

Preliminary. Let Rq = Z[X]/(X n + 1) denote the quotient ring containing all polynomials over the Zq in which X n
is identiﬁed with −1. Let Hash(·) denote a hash function. Let || · ||∞ denote the maximum norm. Let HighBits(r, α) =
(cid:98)r/α(cid:99) and LowBits(r, α) = r mod α denote the higher-order and lower-order bits of r with respect to the divisor α,
respectively. Sη denotes the set of ring elements of R, where each coeﬃcient is taken from the set {−η, −η + 1, . . ., η}
for some positive integer η (cid:28) q. Let n, q, k, l, η, γ1, γ2, β denote other parameters. The PQC authentication algorithm
includes the key generation, signature and veriﬁcation algorithms, as given by Algorithms 1, 2, and 3, respectively.
The procedure has at least 128-bit quantum security (against any quantum algorithms who attempt to forge a valid
signature) based on the underlying quantum hardness of the lattice problems, and the correctness is ensured in the
sense that any legitimate signature can be correctly veriﬁed by the veriﬁcation algorithm. Finally, we remark that the
“repeat until” subroutine in the signature algorithm represents the “rejection sampling” technique, which is necessary
to sample from the desired distribution for security purposes and takes only up to a handful of trials.

We implement the PQC algorithm in Windows 10 64-bit, Intel(R) Core(TM) i7-9750H CPU @2.60GHz, 8 GB
RAM. The average CPU cycle of signature generation is 459903. The average CPU cycle of signature veriﬁcation is
104337. The signature size is 2445 bytes. The real execution time is less than 1 ms.

7

Prover

Veriﬁer

Prover

Veriﬁer

∀i ∈ V, c ←
{Com(π(φ(i)))}

∀i ∈ V, c ←
{Com(π(φ(i)))}

c

r

Generate r

r = H(c);

Sample (j, k) from r;
dj = Decom(cj);
dk = Decom(ck)

Sample (j, k) from r;
dj = Decom(cj);
dk = Decom(ck)

Proof = (c, dj, dk)

Proof = (c, dj, dk)

Open(cj, dj)
∧Open(ck, dk)
∧π(φ(j)) (cid:54)= π(φ(k))

(a)

(b)

r = H(c)
∧Open(cj, dj)
∧Open(ck, dk)
∧π(φ(j)) (cid:54)= π(φ(k))

FIG. 4. The left ﬁgure is the interactive ZKP. The right ﬁgure is the non-interactive ZKP using Fiat-Shamir heuristic. In each
protocol, the steps are listed in time order. In the non-interactive protocol shown in (b), r = H(c) is taken as random. While
in reality, the hash function H is deterministic and cannot generate any randomness.

Function KeyGen

Algorithm 1: Key Generation Algorithm

q

;
η × Sl

A ← Rk×l
s1, s2 ← Sl
t = As1 + s2 ;
pk = (A, t), sk = (s1, s2, pk) ;
return (pk, sk)

η ;

end

Algorithm 2: Signature Algorithm

Function Sign sk = (s1, s2, pk), µ

repeat

γ1−1 ;

y ← Sl+k
w = Ay ;
c = Hash(HighBits(w, 2γ2)||µ) ;
z = y + cs1 ;

until ||z||∞ < γ1 − β and LowBits(Ay − cs2, 2γ2) < γ2 − β;
return σ = (z, c)

end

Function Verify pk=(A,t),σ = (z, c), µ

if ||z||∞ < γ1 − β and c = Hash(HighBits(Az − ct, 2γ2)||µ) then

Algorithm 3: Veriﬁcation Algorithm

return true ;

end
return false ;

end

Appendix C: Randomness Service

1. Components

8

As shown in Figure. 2(a) in the Main Text, our randomness beacon contains the following components,

1. Device-independent random number generator (DIQRNG): A random number generator of true random numbers
based on the quantum nonlocal behaviour, which requires no prior assumptions or characterisations of the inner
working status of the quantum devices.

2. Security Module: A module containing cryptographic keys and performing cryptographic operations.

3. Timestamp: A server synchronised with Coordinated Universal Time (UTC) promising to release the beacon

pulse at the correct time.

4. Beacon App: The internal parts of the beacon service where the actual pulses are formed according to the pulse
format in C 2 and uploaded to the web server, with the inputs from DIQRNG, timestamp and security module.

5. Web Server: The public-facing parts of the beacon, storing beacon pulses in a database and providing a web
interface to answer requests of information. All past pulses, and certain associated data, are stored in the
database.

The above components form the randomness beacon, the essence of our randomness service. In addition, we also
provide a signature service, providing signed timestamps with PQC algorithms on the requirement. We remark that
the timestamps for the beacon are independent of those for the signature service, where we block the beacon service
from receiving information from the outside.

In our construction of the randomness service, compared to the existing counterparts, there are two key diﬀerences
that lead our service to a higher security level. The ﬁrst is that our Beacon integrates a DIQRNG based on the photonic
loophole-free violation of a Bell inequality. The second is that a lattice-based AIGIS post-quantum-cryptography
(PQC) signature algorithm is parallelly used with RSA4096 signature algorithm to identify the randomness server.

Thanks to the experimental development, we are now able to establish an entropy source based on DIQRNG.
Within the current understanding, this serves as the most secure means to generate true random numbers, providing
intrinsic randomness and guaranteeing quantum security. Furthermore, we strive to increase the generation rate of
DIQRNG, such that it meets the application requirements of random beacons. Moreover, in the establishment of our
randomness beacon, we do not need multiple random number sources to avoid certain malicious behaviours, whereas
the DIQRNG entropy source cannot be manipulated.

After the generation of random numbers, the post-processing security module is implemented by software, which
indicates that both the RSA4096 algorithm and the AigisPQC algorithm are encapsulated into a program independent
of the beacon APP. Limited by the current Internet public key infrastructure, RSA4096 signature and AigisPQC
signature are both self-signed. In the ﬁrst step, the two sets of public and private keys required for signature and
veriﬁcation are generated by two independent programs, RSA4096 and AigisPQC, where the required random numbers
come from our DIQRNG. In the second step, the beacon APP calls the RSA4096 program and the Aigis program
to sign and then generate the beacon pulse, so the private key used for signature is independent of the beacon APP.
Relevant information, such as the public key and program required for the veriﬁcation, are available on the Random
Beacon website.

The above two improvements allow us to have a more secure, or, ‘quantum-safe’ randomness beacon. It should be
highlighted that in our randomness beacon, all hash functions are SHA512. Of course, the security property of a hash
chain is also keeps valid here, which means that changing any record requires changing all future records.

2. Pulse Format of the Randomness Beacon Service

In [33, 34], a new randomness beacon format standard has been formed to make the beacon easier to operate and
more trustworthy as a third party. The beacon app core implements beacon operations to generate beacon pulse
according to the information entered, local random number from the entropy source, time-stamp from the time sever
and signature algorithm from the security module. Our beacon pulse format is inherited from NIST Randomness
Beacon version 2.0 but owning 25 ﬁelds [34]. All the ﬁelds and the corresponding value are listed as follows:

A beacon pulse is a structure composed of 25 ﬁelds, of which: eleven (11) are hash outputs; two (2) are sig-
nature outputs; six (6) are characters strings; six (6) are unsigned integers. The following is a brief introduction
In our randomness beacon implementation, the URL for locating the pulse is
of partial ﬁelds and ﬁelds values.

TABLE II. Table 1. Field names, types, and interpretation

9

#
F1
F2
F3

F4

F5

F6

F7

Field name
URL
VERSION
CIPHER SUITE

PERIOD

Type
Str
Str
uint64

uint64

CERTIFICATE ID

hashOut

CHAIN INDEX

PULSE INDEX

unit64

uint64

Str

TIMESTAMP

F8
F9 LOCAL RANDOM VALUE hashOut
F10 EXTERNAL SOURCE ID hashOut
F11 EXTERNAL STATUS CODE uint64
hashOut
F12
hashOut
F13
hashOut
F14
hashOut
F15
hashOut
F16
F17
hashOut
F18 PRECOMMITMENT VALUE hashOut
uint64
F19
Str
F20
Str
F21

EXTERNAL VALUE
PREVIOUS
HOUR
DAY
MONTH
YEAR

STATUS CODE
TYPE
CHSH

F22

F23
F24
F25

METHOD

SIGNATURE RSA
SIGNATURE PQC
OUTPUT VALUE

Str

sigOut
sigOut
hashOut

Interpretation
uniform resource locator that uniquely identiﬁes the pulse
the version of the beacon format being used
the cipher suite (set of cryptographic algorithms) being used
the number of milliseconds between the timestamps of this pulse and the
expected subsequent pulse
the hash of the certiﬁcate that allows verifying the signature in the pulse
the chain index (integer identiﬁer, starting at 1), of the chain to which the pulse
belongs
the pulse index (integer identiﬁer, starting at 1), conveying the order of
generation of this pulse within its chain
the time (UTC) of pulse release by the Beacon Engine
the hash() of high-quality random bit sources
the hash() of a text description of the source of the external value
the status of the external value
the hash() of an external value
the outputValue of the previous pulse
the outputValue of the ﬁrst pulse in the (UTC) hour of the previous pulse
the outputValue of the ﬁrst pulse in the (UTC) day of the previous pulse
the outputValue of the ﬁrst pulse in the (UTC) month of the previous pulse
the outputValue of the ﬁrst pulse in the (UTC) year of the previous pulse
the hash() of the next pulse’s localRandomValue
the status of the chain at this pulse
the principal type of the random number source
the violation value of the CHSH inequality
the theoretical scheme of the evaluation method of the generated randomness
from the Bell test
a RSA signature on all the above 22 ﬁelds
a PQC signature on all the above 22 ﬁelds
the hash() of all the above ﬁelds

“https://www.randomnessbeacon.com/Shanghai/beacon/1.0/chain/1/pulse/N” where N is the index. We can get all
information of the pulse from the URL link. For our experiment, we get the pulse information from the database
utilizing application programming interface (API) provided by randomness beacon website. The value of PERIOD
ﬁeld is 60000, that is to say the pulsating period of a pulse is one minute. The value of TIMESTAMP ﬁeld refers
to promised release time of this pulse by the beacon in the Universal Time Coordinated (UTC) standard. In our
beacon, time is synchronized with a time server (www.tsa.cn) using the network time protocol (NTP). The value
of LOCAL RANDOM VALUE ﬁeld is hash of random numbers generated from local RNG. High-quality random
numbers are critical for the randomness beacon and it must be entirely unpredictable to any attacker. Usually,
several RNGs are combined to bring security advantage and avoid some malicious RNGs. The ﬁve ﬁelds, PREVI-
OUS, HOUR, DAY, MONTH and YEAR, are records of OUTPUT values pertaining to some past pulses, which
can ensure eﬃcient hash-chain veriﬁcation to prove that an old pulse is consistent with a recent pulse.The value of
PRECOMMITMENT VALUE ﬁeld is the hash of LOCAL RANDOM VALUE ﬁeld value of the next beacon pulse,
so the PRECOMMITMENT VALUE and LOCAL RANDOM VALUE ﬁelds can be used together to combine several
beacons and achieve security against misbehavior by partial beacons in future randomness beacon networks. The
SIGNATURE RSA and SIGNATURE PQC ﬁelds are independent signature of the hash() of a concatenation of pre-
vious ﬁelds from F1 to F22. The OUTPUT value is the hash() of a concatenation of all previous ﬁelds from F1 to
F24.

Besides, three special ﬁelds are added to the beacon pulse, TYPE, CHSH and METHOD: TYPE means the principal
type of the random number source, the value of the TYPE ﬁeld in our randomness beacon is device-independent
quantum random number generation (DIQRNG); CHSH means the violation value of the CHSH inequality, the value
of the CHSH ﬁeld in our randomness beacon is about 2.007; METHOD means the theoretical scheme of the evaluation
method of the generated randomness from the Bell test, the value of the MRTHOD ﬁeld in our randomness beacon
is quantum probability estimation (QPE) which has been explained in section D 2.

10

Appendix D: Device-Independent Quantum Random Number Generator

The device-independent quantum random number generator (DIQRNG) is the core component of the randomness

beacon. Here, we introduce the details of the theory and experiment of our DIQRNG.

1. Theory of Device-Independent Quantum Random Number Generator

To achieve the highest level of security and reach the requirement of unpredictability, we adopt the DIQRNG for the
beacon service. In general, a DIQRNG is composed of a device-independent quantum randomness generation process
based on the Bell test and a randomness extraction procedure. In the Bell test, the generated raw data contains
freshly generated randomness, while the probability distribution of the raw data may be highly biased. After the
amount of randomness is evaluated, the raw data is post-processed with randomness extraction. At the end of this
process, near-uniformly distributed random numbers shall be output.

In this section, we ﬁrst introduce the theoretical basis of randomness generation and randomness extraction. Af-

terwards, we present the detailed protocol description for DIQRNG and the rigorous security deﬁnitions.

a. Randomness Evaluation via Quantum Probability Estimation

For randomness generation, we adopt the Clauser-Horne-Shimony-Holt-type (CHSH) Bell test. The conﬁguration
involves two remote stations, commonly referred to as Alice and Bob. In one round of the CHSH test, the two parties
take random measurements with untrusted devices. Alice and Bob each randomly set the measurement inputs, denoted
by random variables X, Y ∈ {0, 1}, respectively. Their devices shall generate binary outcomes, which form another
two random variables A, B ranging in the set {0, 1}. We use the lowercase letters to represent speciﬁc realisations of
the associating random variables.

In the randomness generation procedure, we carry out loophole-free Bell tests sequentially. By ‘sequential’, we refer
to that only after the devices have generated outputs shall the inputs in the subsequent round be fed into the devices.
To distinguish diﬀerent rounds, we use subscripts to denote the associating random variables. In a loophole-free Bell
test, the following assumptions or requirements are made,

1. Quantum mechanism: Quantum mechanics is correct and complete.

2. Non-signaling: In each round, the measurement process of Alice/Bob is independent of the other party.

3. Trusted inputs: Alice and Bob each have trusted random input settings.

To meet the non-signalling assumption, we pose a space-like separated conﬁguration between Alice’s and Bob’s devices.
To meet the trusted-inputs assumption, we use two local quantum random number generators for the input settings.
Under these assumptions, if the untrusted devices have a nonlocal behaviour, intrinsic randomness shall be generated
from the outputs. The nonlocal behaviour can be witnessed by quantum inequalities. To give an intuitive explanation,
take CHSH Bell inequality as an example. In the CHSH Bell test, we say the two parties win the game if

If the untrusted devices are restricted to classical resources, the winning probability is upper bounded,

A ⊕ B = X · Y.

ωCHSH := Pr(A ⊕ B = X · Y ) ≤

3
4

.

(D1)

(D2)

The inequality is called CHSH inequality, and the bound is called the classical bound.
If this is the case in an
experiment, no intrinsic randomness can be generated. While if the untrusted devices utilise nonlocal quantum
√
resources, the winning probability can reach at most 2+
2
, which is called the Tsirelson Bound. In evaluating the
4
experimental behaviour, we shall use the CHSH value, which is linked with the winning probability via a linear
transformation,

By the nth trial, the real-time CHSH violation value is deﬁned as

S = 8ωCHSH − 4.

¯Sn = 8

(cid:18) (cid:80)n

i=1 χ(Ai ⊕ Bi = Xi · Yi)
n

(cid:19)

− 4,

(D3)

(D4)

11

where χ(·) is the indicator function.

In an experiment, if the observed winning frequency is above the classical bound, we say the untrusted devices have
a nonlocal behaviour. In this case, the devices must be taking quantum measurements on an entangled state. From
the monogamy property of entanglement, the state should have an independent property from any outside observer,
hence the measurement results should contain private randomness from the outside.

To rigorously evaluate the amount of generated randomness from the Bell test, we apply the quantum probability
estimation (QPE) method [35]. We summarise the essential results of the QPE theory and information-theoretic
randomness measures. In the QPE framework, the ﬁrst step is a characterisation of the set of possible ﬁnal states in the
experiment, which we call the model of the experiment. In our device-independent quantum randomness generation,
in general, Alice and Bob and a potential adversary, Eve, share a tripartite quantum state ρABE ∈ D(HABE) in the
beginning. After Alice and Bob measure their own systems in the experiment, the possible ﬁnal state can be described
by a classical-quantum mixed state

ρXY ABE =

(cid:88)

x,y,a,b

|xyab(cid:105) (cid:104)xyab| ⊗ ρE(xyab),

(D5)

where we use bold letters to denote the sequences of values over the rounds, e.g., x = (x1, · · · , xn), and ρE =
TrAB(ρABE) corresponds to the quantum side information of Eve. Under our assumptions, in the ith round, con-
, yi−1
ditioned on the occured events Hi ≡ (X i−1
, Bi−1
), there exist measure-
1
1
ments described by positive operator-valued measures (POVM) { ˆN ai
}bi corresponding to the input settings
xi
Xi = xi, Yi = yi, where the positive semi-deﬁnite operator ˆN ai
denotes the operator corresponding to the input xi
xi
= ˆIB, and a quantum state
and output ai for Alice, and similarly for ˆN bi
yi
ρxi−1

) = hi ≡ (xi−1
}ai, { ˆN bi
yi

on Bob’s side, and (cid:80)

= ˆIA, (cid:80)
bi

, Y i−1
1

, Ai−1
1

, ai−1
1

, bi−1
1

ˆN ai
xi

ˆN bi
yi

1 E, such that
bi−1

ai−1
1

yi−1
1

ai

1

1

1

Pr
AiBi|XiYiHi

(aibi|xiyihi) = TrAB

(cid:104)
ρxi−1

1

yi−1
1

ai−1
1

1 E( ˆN ai
bi−1

xi

⊗ ˆN bi
yi

⊗ ˆIE)

(cid:105)

.

(D6)

We denote the set of all possible ﬁnal states shared by Alice, Bob, Eve after the experiment as the model
M(X, Y , A, B). For the detailed description of the model, we refer the readers to our previous work in [20].

For a model M(X, Y , A, B), we can deﬁne quantum estimation factors (QEF).

Deﬁnition 3 (Quantum Estimation Factor). Given α > 1 and a model M(X, Y , A, B), the non-negative real-
valued function F (XY AB) is a quantum estimation factor (QEF) with power α for M(X, Y , A, B), if for any state
τ ∈ M(X, Y , A, B), F (XY AB) satisﬁes the following inequality

where

and the function

(cid:88)

x,y,a,b

F (xyab)Rα[τE(xyab)|τE(xy)] ≤ 1, α > 1,

(cid:88)

τ =

x,y,a,b

|xyab(cid:105) (cid:104)xyab| ⊗ τE(xyab), τE(xy) =

(cid:88)

ab

τE(xyab),

Rα(ρ|σ) = Tr

(cid:104)(cid:16)

σ−β/(2α)ρσ−β/(2α)(cid:17)α(cid:105)

(D7)

(D8)

(D9)

is called the R´enyi power of order α of ρ conditional on σ.

We can give a lower bound on the amount of randomness that is generated from the Bell test via QEFs, which is

measured by the smooth conditional min-entropy [36].

Deﬁnition 4 (Smooth Conditional Min-Entropy). Consider a quantum state ρ ∈ D(HAE). The ε-smooth min-entropy
of system A conditioned on E is

H ε

min(A|E)ρ =

max
P (ρ(cid:48),ρ)≤ε,
ρ(cid:48)∈S(HABE )

Hmin(A|E)ρ(cid:48),

Hmin(A|E)ρ(cid:48) = sup

σ∈S(HE )

sup
λ

{λ ∈ R : ρ(cid:48) ≤ exp(−λ)IA ⊗ σ},

(D10)

12

where P (ρ(cid:48), ρ) is the puriﬁed distance between ρ(cid:48), ρ, and S(·) denotes the set of sub-normalised density operators acting
on the corresponding Hilbert space. The puriﬁed distance between ρ, τ ∈ S(H) is deﬁned as

(cid:114)

P (ρ, τ ) =

1 −

(cid:16)

√

√

ρ

Tr |

τ | + (cid:112)(1 − Tr[ρ])(1 − Tr[τ ])

(cid:17)2

.

(D11)

Theorem 1. (Theorem 3 in [35]) Prior to a randomness generation procedure with N trials, suppose that F (XY AB)
is a QEF with power α for the model of the experiment M(X, Y , A, B), and set the smoothing parameter in random-
ness generation εh ∈ (0, 1], the threshold hs > 0 for a successful randomness generation and a lower bound κ ∈ (0, 1]
to the probability of a successful randomness generation.A successful randomness generation is that, after N trials
have been executed, an event (x, y, a, b) happens such that F (xyab) ≥ 2hs(α−1). In this case, for any possible ﬁnal
state ρ ∈ M(X, Y , A, B), we have either the probability of success is less than κ, or the quantum smooth conditional
min-entropy given success satisﬁes

H εh

min(XY |ABE)ρ ≥ hs −

1
α − 1

log2

(cid:19)

(cid:18) 2
ε2
h

+

α
α − 1

log2 κ.

(D12)

b. Randomness Extraction

The raw data from the Bell test cannot be directly used as the random numbers for the randomness beacon service,
as the statistics is not uniformly distributed. A randomness extraction procedure needs to be performed, processing
the raw data to be uniformly distributed while maintaining enough entropy. In general, the randomness extraction is
a classical post-processing procedure. We take the following assumptions for the classical module in DIQRNG:

1. Secure lab: The devices cannot communicate to the outside to leak the experimental results directly.

2. Trusted post-processors: The classical post-processing procedure is trusted.

The ﬁrst assumption is also posed for the management of the raw data from the randomness generation procedure.

To guarantee the randomness extraction output is information-theoretic random and uniformly distributed, we need

to apply a quantum-proof strong extractor. Its deﬁnition is given as follows.
Deﬁnition 5 (Quantum-Proof Strong Extractor [27, 37–39]). A function Ext: {0, 1}n × {0, 1}d → {0, 1}m is a
quantum-proof (k, εx)-strong extractor with a uniform seed, if for all classical-quantum states ρXE classical on X with
Hmin(X|E)ρ ≥ k and a uniform seed Y , we have

where (cid:107) · (cid:107)1 is the trace norm deﬁned as (cid:107)A(cid:107)1 = Tr
ρY is the fully mixed state of the seed Y .

1
2

(cid:107)ρExt(X,Y )Y E − ρUm ⊗ ρY ⊗ ρE(cid:107)1 ≤ εx,

(D13)

(cid:16)√

(cid:17)

A†A

, ρUm = I

2m is the fully mixed state of dimension 2m and

The deﬁnition states that, given a quantum-proof (k, εx)-strong extractor with a uniform seed, m bits of uniformly
distributed random bits can be provided (except for a failure probability no larger than εx) if there is a guarantee of
k bits of min-entropy in the input X. For brevity, we call εx the security parameter of the extractor. This deﬁnition
naturally guarantees a composability property, shown by the following lemma:
Lemma 1 ([39, 40]). If Ext: {0, 1}n × {0, 1}d → {0, 1}m is a quantum-proof (k, εx)-strong extractor, then for any
classical-quantum state ρXE such that H εh

min(X|E)ρ ≥ k, we have

1
2

(cid:107)ρExt(X,Y )Y E − ρUm ⊗ ρY ⊗ ρE(cid:107)1 ≤ εx + 2εh.

(D14)

From this property, we can reuse the extraction seed albeit a linear increase in the security parameter.
In our experiment, we use the Toeplitz extractor in the randomness extraction. An m × n Toeplitz matrix has

(m + n − 1) bits of free parameters, taking the form












T =

· · ·
. . .
. . .

a0

a−1

a−(n−2)

a−(n−1)

a1

a0

a−(n−1)+1
...
. . .
. . .
a−(n−1)+(m−2)
am−1 am−2 · · · a−n+(m−1) a−(n−1)+(m−1)

a2
...

a1
...












,

(D15)

where ∀i − j = i(cid:48) − j(cid:48), Tij = Ti(cid:48)j(cid:48) ∈ {0, 1}. For a family of m × n Toeplitz matrices, we have the following lemma that
guarantees its use as a quantum-proof strong extractor:

Lemma 2 ([40]). The set of all m × n Toeplitz matrices can be used as a quantum-proof (k, εx)-strong extractor with
εx = 2−(k−m)/2, where m is the output length and n is the input data length.

The Toeplitz extractor is a quantum-proof strong extractor [27, 41, 42]. In applying the Toeplitz extractor, one can
adopt the fast Fourier transformation method to accelerate the computation. We refer the readers to the Supplemen-
tary Information of [6] for a detailed description of the processing.

13

In this subsection, we shall discuss the security of the protocol under the QPE framework. We adopt the composable

c. Protocol and Security Deﬁnition

security deﬁnition [43–45]:

Box 1. DIQRNG Protocol

Input:
kgen: number of random bits to be generated
εS: soundness error
S: uniform seed of length d

Given:
N : number of rounds in randomness generation
M(X, Y , A, B): model of the experiment
F (XY AB): valid QEF with power α for M(X, Y , A, B)
Ext(, ): quantum-proof (k, εx)-strong extractor, a map {0, 1}2N × {0, 1}d → {0, 1}kgen

Output:
Ukgen : bit string of length kgen

Parameter Assignments

1. Assign the smoothing parameter in randomness generation εh, the security parameter of the extractor

εx such that εS = 2εh + εx.

2. Assign the success threshold of the randomness generation hs and a lower bound on the protocol success

probability κ.

Randomness Generation

3. Perform the randomness generation experiment and obtain a realisation (x, y, a, b) of (X, Y , A, B) and

the QEF value F (xyab).

4. If F (xyab) ≥ 2hs (α − 1), the protocol proceeds to randomness extraction; otherwise, the protocol fails

and return Ukgen = 0(cid:95)kgen .

Randomness Extraction

5. Obtain a realisation s of the uniform seed S of length d.

6. Return Ukgen = Ext(c, s).

Deﬁnition 6 (Protocol soundness and completeness). A random number generation protocol with an m-bit output C
is called (εS, εC)-secure if it is
(1) εS-Sound: The output satisﬁes

1
2

pΦ(cid:107)ρCE|Φ − τm ⊗ ρE|Φ(cid:107)1 ≤ εS,

(D16)

14

where Φ represents the event that the protocol does not abort, ρCE|Φ is the normalised ﬁnal state conditioned on a
success, with ρC giving the output C, and ρE the system of side information, and τm is a maximally mixed state of
m qubits. The probability that the protocol does not abort is pΦ.
(2) εC-Complete: There exists an honest implementation where the protocol observes an identical and independent
behaviour, and the probability that it does not abort satisﬁes pΦ ≥ 1 − εC.

In our experiment, we apply the same random number generation protocol as in [20] (Appendix A, Box 1).
Under the QPE framework, the soundness and completeness for the protocol have been proved (see Sec.

IIIC

of [35]). The total soundness error of the protocol is εS = εx + 2εh as given in Eq. (D14).

d. Parameter Determination

Before randomness generation, we need to determine the largest allowed number of experimental trials, the sound-
ness error and the failure probability of the protocol, and ﬁnd a valid QEF that yields a good randomness generation
rate. The determination procedure is similar to the one in our previous work of device-independent quantum ran-
domness expansion (see Appendix B of [20]). Here, we summarise the diﬀerences between the two tasks:

1. The randomness expansion experiment in [20] takes a spot-checking protocol, which involves an additional
coordinating random number generator to determine if a trial is “spot”, where both detection stations take
ﬁxed inputs, or “checking”, where the detection stations carry out a standard Bell test with uniformly local
random inputs. In the randomness generation process of this work, the experimental set-up is the same as a
standard Bell test, where both stations take uniformly random inputs. There is not an additional coordinating
random number generator.

2. In this work, we do not consider the consumption of randomness in the training trials and the input setting in

randomness generation.

3. In randomness expansion, one needs to determine a proper spot-checking probability distribution that supports

a net increase in the store of randomness.

Box 2. Parameter Determination Procedure

1. Set the input probability distribution ν(XY ) as uniformly distributed. Conduct “training trials” and
determine an empirical input-output probability distribution ν(ABXY ) for randomness generation.

2. Determine a QEF F (ABXY ) with power α that yields a large rν(F, α).

3. Set the randomness generation target k, the largest allowed number of trials N , the soundness error in
randomness generation εh, the soundness error in randomness extraction εx, the completeness error of
the protocol εC, and a lower bound on the success probability κ of the protocol.

4. Set the success threshold in the randomness generation experiment hs.

For the generation task to generate at least kexp bits of near-uniform random bits at the end of the protocol with
failure probability εx in randomness extraction, the amount of εh-smooth min entropy that needs to be generated k
is determined by

k = kexp − 2 log2 εx.

(D17)

According to Theorem 1, the εh-smooth min entropy is linked with the threshold hs in the QPE-based protocol,
(cid:18) 2
ε2
h

1
α − 1

α
α − 1

hs = k +

(cid:18) 1
κ

log2

log2

+

(cid:19)

(cid:19)

,

(D18)

where κ is a pre-determined successful probability of the protocol.

2. Experiment of Device-Independent Quantum Randomness Generation

a. System Characterization

As shown in Fig. 5, we perform the protocol on our photonic-entanglement distribution platform [6, 20, 46, 47].

15

FIG. 5. Light pulses of width of 10ns and wavelength of 1560nm at the repetition frequency of 200kHz from laser diode (LD)
are ampliﬁed by erbium-doped ﬁbre ampliﬁer (EDFA) and frequency-doubled by periodically poled lithium niobate crystal
(PPLN) as a pump beam. The pump pulses are injected into a Sagnac loop to generate ploarization entangled photon pairs
at a periodically poled potassium titanyl phosphate (PPKTP) crystal. We use a half-wave plate (HWP) and two quarter-wave
plate (QWP) to adjust the relative amplitude and phase of the entangled two-photon state. The two detection stations (denoted
as Alice and Bob) are placed on the opposite directions from the entangled-photon source. Using the nonlinearity of the Pockels
cell, we change the voltage applied on the Pockels cell according to the input random numbers from a quantum random number
generator (QRNG), thereby randomly selecting the basis vector for measurement. The measurement results are detected by
a superconducting nanowire single photon detector (SNSPD). DM, dichroic mirror; WDM, wavelength-division multiplexer;
PBS, polarizing beam splitter.

TABLE III. Photon transmission and detection eﬃciencies in the experiment.

Parties Heralding,η
Alice
Bob

80.55% 93.5%
82.13% 93.6%

ηsc

ηso

ηf ibre

95.9% 99%

ηm

ηdet
94.5% 96.0%
95.2% 97.1%

b. Determination of single photon eﬃciency

In Table III we list the heralding eﬃciencies from the entanglement source to detection stations, the transmission
eﬃciencies of each intermediate process, and the detection eﬃciencies of the detectors. We determine the single photon
heralding eﬃciency as ηA = C/NB and ηB = C/NA for Alice and Bob, in which two-photon coincidence events C
and single photon detection events for Alice NA and Bob NB are measured in the experiment. We measure the
transmission eﬃciencies of each process and the detection eﬃciencies with classical light beams and NIST-traceable
power metres, where ηsc is the eﬃciency to couple entangled photons into single mode optical ﬁbre, ηso is the eﬃciency
for photons passing through the optical elements in the source, ηf ibre is the transmittance of ﬁbre connecting source
to measurement station, ηm is the eﬃciency for light passing through the measurement station, and ηdet is the single
photon detector eﬃciency.

c. Quantum state and measurement bases

To maximally violate the Bell inequality in experiment, we create non-maximally entangled two-photon state [48]
cos(24.39◦) |HV (cid:105) + sin(24.39◦) |V H(cid:105) and set measurement bases to be A1 = −83.05◦ and A2 = −118.64◦ for Alice,
and B1 = 6.95◦ and B2 = −28.64◦ for Bob, respectively. We measure diagonal/anti-diagonal visibility in the bases set
(45◦, −24.39◦), (114.39◦, 45◦) for minimum coincidence, and in the bases set (45◦, 65.61◦), (24.39◦, 45◦) for maximum
coincidence, where the angles represent measurement basis cos(θ) |H(cid:105) + sin(θ) |V (cid:105) for Alice and Bob. By setting the

16

(a)

(b)

FIG. 6. Tomography of the produced two-photon state in the experiment, with real and imaginary components shown in (a)
and (b), respectively.

FIG. 7. Spacetime conﬁguration of the experiment

mean photon number to µ = 0.266 to suppress the multi-photon eﬀect, we measure the visibility to be 99.5% and
98.4% in horizontal/vertical basis and diagonal/anti-diagonal basis.

We perform quantum state tomography measurement of the non-maximally entangled state, with result shown in
Fig. 6. The state ﬁdelity reaches 99.33%. We attribute the imperfection to multi-photon components, imperfect
optical elements, and imperfect spatial/spectral mode matching.

d. Spacetime conﬁguration of the experiment

To close the locality loophole, space-like separation must be satisﬁed between relevant events at Alice and Bob’s
measurement stations: the state measurement events by Alice and Bob, measurement event at one station and the
setting choice event at the other station (Fig. 2(b) in the Main Text). We then obtain

(cid:26) (|SA| + |SB|)/c > TE − (LSA − LSB) /c + TQRN G1 + TDelay 1 + TP C1 + TM 2
(|SA| + |SB|)/c > TE + (LSA − LSB) /c + TQRN G2 + TDelay 2 + TP C2 + TM 1

(D19)

where |SA| = 93 m (|SB| = 90 m) is the free space distance between entanglement source and Alice’s (Bob’s)
measurement station, TE = 10 ns is the generation time for entangled photon pairs, which is mainly contributed by

2003004005006007000AliceBobEPR Pair SourceETTime(ns)100-93m90mDistance(m)Delay1T1MTDelay2TM2TQRNG1TPC1TQRNG2TPC2T17

TABLE IV. The empirical input-output counts from the training set.

(a, b)

(x, y)

00

01

10

11

00
01
10
11

1432368514 14021025 12251485 38365952
1395132966 51261179 13585081 37027619
1392797496 13586501 51825439 38798042
1326545167 79804074 82131840 8497620

TABLE V. The empirical input-conditioned probability distribution ν(AB|XY ). A maximum likelihood estimation is applied
to the empirical data to derive a probability distribution adapted to the model used. Here we present the result to 20 decimal
places.

(a, b)

(x, y)

00

01

10

11

00
01
10
11

0.95682221443247694737 0.00936602447175378418 0.00818383944336322118 0.02562792165240606462
0.93194313970148556781 0.03424509920274514813 0.00907494837494691835 0.02473681272082236746
0.93038528791661345707 0.00907576916500537831 0.03462076595922665423 0.02591817695915446876
0.88615498464810593671 0.05330607243351297847 0.05486310342832659281 0.00567583949005453364

the 10 ns pump pulse duration, LSA = 191 m (LSB = 170 m) is the eﬀective optical path which is mainly contributed
by the long ﬁbre (130 m, 116 m) between source and Alice/Bob’s measurement station, TQRN G1 = TQRN G2 = 96 ns
is the time elapse for QRNG to generate a random bit, TDelay1 = 270 ns (TDelay2 = 230 ns) is the delay between
QRNG and Pockels cells, TP C1 = 112 ns (TP C2 = 100 ns) including the internal delay of the Pockcels Cells (62 ns,
50 ns) and the time for Pockcels cell to stabilize before performing single photon polarization state projection after
switching which is 50 ns, which implies that the experimental time is able to be shortened by increasing the repetition
rate of the experiment because the small q reduces the impact of the modulation rate of the Pockels cells, TM 1 = 55
ns (TM 2 = 100 ns) is the time elapse for SNSPD to output an electronic signal, including the delay due to ﬁbre and
cable length. TR1,2 in Fig. 2(b) in the Main Text is the sum of TQRN G1,2, TDelay1,2 and TP C1,2.

Measurement independence requirement is satisﬁed by space-like separation between entangled-pair creation event

and setting choice events, so we can have

(cid:26) |SA|/c > LSA/c − TDelay 1 − TP C1
|SB|/c > LSB/c − TDelay 2 − TP C2

(D20)

3. Experimental Results

a. Randomness Generation for Beacon

To meet the require of randomness beacon, we shall generate at least 512 near-uniform random bits in one minute
which is one period of randomness beacon. We set the soundness error εh = 2−64, εx = 2−100, the success probability
for an honest protocol γ = 99.3%, and the lower bound to the success probability in the actual experiment to be the
same as the soundness error in randomness expansion, κ = εh = 2−64.

We obtain a set empirical input-output counts from a series of training trials, as shown in Table IV. The empirical
frequency has a weak signalling behaviour due to the ﬁnite size eﬀects. After applying a maximum likelihood estimation
to the raw data, we obtain an empirical probability distribution ν(ABXY ) from the training trials as shown in Table
V, which represents an expected experimental behaviour in randomness generation. With respect to this probability
distribution, we follow the same approach in [20] to derive a set of valid QEFs. Here, we summarise the ﬁnal results.
We ﬁrst optimise a set of probability estimation factors (PEF) under the no-signaling condition and Tsirelson’s
bounds. The power α of the optimized PEF is α = 1.0071, and the values of the PEF are given in Table VI. Such
an optimisation problem is tackled via the parallel computation toolbox in Matlab. Afterwards, we rescale the PEF
with a factor to obtain a valid QEF. The overall QEF rescaling factor is the multiplication of the sum of the 16 PEF
values and fmax. We derived a valid value of 1 + 2.99 × 10−7 to the overall rescaling factor. The expected output
entropy rate witnessed by the QEF is rν(F, α) = 0.00398. With these parameters, we determine the largest allowed
number of trials in randomness expansion to be N = 9.64 × 106 which takes about 48.2 seconds with the repetition
frequency of 200kHz, and the success threshold in the experiment to be hs = 2.84 × 104 bits.

TABLE VI. The optimal PEF F (cid:48)(ABXY ) with power α = 1.0071. Here we present the result to 20 decimal places.

(a,b)

(x,y)

00

01

10

11

00
01
10
11

1.00022261334798057142 0.96652962358942828835 0.96475845132959570094 1.01624555865876731175
1.00030376388124353504 0.98863956250689444261 0.95058782881190451164 1.02410372452527931308
1.00032392821147841921 0.94883682088230669738 0.98897461161237376626 1.02266760137092616034
0.99914969455929725228 1.01081389593364656676 1.01049901115840201626 0.93698311543584200667

18

FIG. 8. CHSH violation versus Time. Every point represents the average of the real-time CHSH violation of 5 minutes.

b. System Robustness

We monitor the CHSH value during the generating process to represent the state of our experimental setup. We
calculate the average CHSH violation every 5 minutes, as shown in Fig. 8. The mean value of the CHSH violation
during the whole experiment of 1115 periods is 2.0079.

c. Results for Repeated Randomness Generation Experiments

Our system is noise-resistant, which is capable of serving the randomness beacon for a long time stably. We repeat
the randomness generating experiment for 1115 beacon periods and successfully obtain 512 bits of fresh randomness
in every period. The numbers of experiment terminating trials are shown in Figure.9. The average time to terminate
the experiment is 31.43 seconds, with a variance of 4.43 seconds, indicating that our DIQRNG source has low latency
and is suﬃciently consistent. We employ the hashing matrix to extract randomness from the raw data with failure
probability parameters εx = 2100 as soon as the randomness generation process is stopped[27]. Thanks to the use of
fast Fourier transformation, the extraction procedure can be completed in approximately 2 seconds. Therefore, the
entire time span for generating enough uniformly distributed quantum random numbers is short enough to match the
practical requirements of the randomness beacon service.

[1] S. Goldwasser, S. Micali, and C. Rackoﬀ, SIAM J. Comput. 18, 186 (1989).
[2] Q. Yang, Y. Liu, T. Chen, and Y. Tong, ACM Trans. Intell. Syst. Technol. 10, 1 (2019).
[3] G. Kappos, H. Yousaf, M. Maller, and S. Meiklejohn, in 27th {USENIX} Security Symposium ({USENIX} Security 18)

(2018) pp. 463–477.

[4] R. Canetti, O. Goldreich, and S. Halevi, J. ACM 51, 557 (2004).

02004006008001000Time(min)6.577.588.599.5CHSH Violation10-319

FIG. 9. Numbers of terminating trials in 1115 periods. In each period, we loaded approximate 2 × 105 trials of data
from time-digital converter (TDC) every second and updated the register Gn. The numbers of terminating trials is the number
of trials when the register Gn surpasses the success threshold. The largest allowed number of trials is shown as the dashed line.
Because all of the number of terminating trials is below the largest allowed number, it shows the time is short enough that
requires to generate 512bits randomness with error εs = 2−64 according to QPE protocol.

[5] P. Bierhorst, E. Knill, S. Glancy, Y. Zhang, A. Mink, S. Jordan, A. Rommal, Y.-K. Liu, B. Christensen, S. W. Nam, et al.,

Nature 556, 223 (2018).

[6] Y. Liu, Z. Qi, M.-H. Li, J.-Y. Guan, Y. Zhang, B. Bai, W. Zhang, W.-Z. Liu, C. Wu, X. Yuan, et al., Nature 562, 548

(2018).

[7] J. Zhang, Y. Yu, S. Fan, Z. Zhang, and K. Yang, in IACR International Conference on Public-Key Cryptography (Springer,

2020) pp. 37–65.

[8] O. Goldreich, S. Micali, and A. Wigderson, Journal of the ACM (JACM) 38, 690 (1991).
[9] F. Pub, Fips pub 180 (2012).

[10] M. Dworkin, Tech. Rep. Federal Inf. Process. Stds.(NIST FIPS)-202 (2015).
[11] F. Arute, K. Arya, R. Babbush, D. Bacon, J. C. Bardin, R. Barends, R. Biswas, S. Boixo, F. G. Brandao, D. A. Buell,

et al., Nature 574, 505 (2019).

[12] H.-S. Zhong, H. Wang, Y.-H. Deng, M.-C. Chen, L.-C. Peng, Y.-H. Luo, J. Qin, D. Wu, X. Ding, Y. Hu, et al., Science

370, 1460 (2020).

[13] J. S. Bell, Physics Physique Fizika 1, 195 (1964).
[14] R. Colbeck, Ph. D. Thesis (2009).
[15] S. Arora and B. Barak, Computational complexity: a modern approach (Cambridge University Press, 2009).
[16] M. O. Rabin, J. Comput. Syst. Sci. 27, 256 (1983).
[17] M. J. Fischer, M. Iorga, and R. Peralta, in Proceedings of the International Conference on Security and Cryptography

(IEEE, 2011) pp. 434–438.

[18] S. Pironio, A. Ac´ın, S. Massar, A. B. de La Giroday, D. N. Matsukevich, P. Maunz, S. Olmschenk, D. Hayes, L. Luo, T. A.

Manning, et al., Nature 464, 1021 (2010).

[19] L. K. Shalm, Y. Zhang, J. C. Bienfang, C. Schlager, M. J. Stevens, M. D. Mazurek, C. Abell´an, W. Amaya, M. W. Mitchell,

M. A. Alhejji, et al., Nat. Phys. 17, 452 (2021).

[20] M.-H. Li, X. Zhang, W.-Z. Liu, S.-R. Zhao, B. Bai, Y. Liu, Q. Zhao, Y. Peng, J. Zhang, Y. Zhang, W. J. Munro, X. Ma,

Q. Zhang, J. Fan, and J.-W. Pan, Phys. Rev. Lett. 126, 050503 (2021).

[21] B. Hensen, H. Bernien, A. E. Dr´eau, A. Reiserer, N. Kalb, M. S. Blok, J. Ruitenberg, R. F. Vermeulen, R. N. Schouten,

C. Abell´an, et al., Nature 526, 682 (2015).

[22] L. K. Shalm, E. Meyer-Scott, B. G. Christensen, P. Bierhorst, M. A. Wayne, M. J. Stevens, T. Gerrits, S. Glancy, D. R.
Hamel, M. S. Allman, K. J. Coakley, S. D. Dyer, C. Hodge, A. E. Lita, V. B. Verma, C. Lambrocco, E. Tortorici, A. L.
Migdall, Y. Zhang, D. R. Kumor, W. H. Farr, F. Marsili, M. D. Shaw, J. A. Stern, C. Abell´an, W. Amaya, V. Pruneri,
T. Jennewein, M. W. Mitchell, P. G. Kwiat, J. C. Bienfang, R. P. Mirin, E. Knill, and S. W. Nam, Phys. Rev. Lett. 115,
250402 (2015).

[23] M. Giustina, M. A. M. Versteegh, S. Wengerowsky, J. Handsteiner, A. Hochrainer, K. Phelan, F. Steinlechner, J. Koﬂer,

J.-A. Larsson, C. Abell´an, et al., Phys. Rev. Lett. 115, 250401 (2015).

02004006008001000Periods(min)55.566.577.588.599.510Number of experiment trials106number of terminating trialslargest allowed number of trials20

[24] W. Rosenfeld, D. Burchardt, R. Garthoﬀ, K. Redeker, N. Ortegel, M. Rau, and H. Weinfurter, Phys. Rev. Lett. 119,

010402 (2017).

[25] M.-H. Li, C. Wu, Y. Zhang, W.-Z. Liu, B. Bai, Y. Liu, W. Zhang, Q. Zhao, H. Li, Z. Wang, et al., Phys. Rev. Lett. 121,

080404 (2018).

[26] Y. Zhang, H. Fu, and E. Knill, Phys. Rev. Research 2, 013016 (2020).
[27] X. Ma, F. Xu, H. Xu, X. Tan, B. Qi, and H.-K. Lo, Phys. Rev. A 87, 062327 (2013).
[28] R. L. Rivest, A. Shamir, and L. Adleman, Communications of the ACM 21, 120 (1978).
[29] A. Einstein, B. Podolsky, and N. Rosen, Phys. Rev. 47, 777 (1935).
[30] A. Fiat and A. Shamir, in Conference on the theory and application of cryptographic techniques (Springer, 1986) pp.

186–194.

[31] R. Canetti, O. Goldreich, and S. Halevi, J. ACM 51, 557–594 (2004).
[32] L. Ducas, E. Kiltz, T. Lepoint, V. Lyubashevsky, P. Schwabe, G. Seiler, and D. Stehl´e, IACR Transactions on Cryptographic

Hardware and Embedded Systems , 238 (2018).

[33] J. Kelsey, in International Conference on Research in Security Standardisation (Springer, 2018) pp. 164–184.
[34] J. Kelsey, L. T. Brand˜ao, R. Peralta, and H. Booth, A reference for randomness beacons: Format and protocol version 2,

Tech. Rep. (National Institute of Standards and Technology, 2019).
[35] Y. Zhang, H. Fu, and E. Knill, Phys. Rev. Research 2, 013016 (2020).
[36] M. Tomamichel, R. Colbeck, and R. Renner, IEEE Trans. Inf. Theory 56, 4674 (2010).
[37] N. Nisan and D. Zuckerman, Journal of Computer and System Sciences 52, 43 (1996).
[38] R. Konig and R. Renner, IEEE Transactions on Information Theory 57, 4760 (2011).
[39] A. De, C. Portmann, T. Vidick, and R. Renner, SIAM Journal on Computing 41, 915 (2012).
[40] R. Renner, International Journal of Quantum Information 6, 1 (2008).
[41] R. Impagliazzo, L. A. Levin, and M. Luby, in Proceedings of the twenty-ﬁrst annual ACM symposium on Theory of

computing, STOC ’89 (ACM, New York, NY, USA, 1989) pp. 12–24.

[42] D. Frauchiger, R. Renner, and M. Troyer, arXiv:1311.4547 (2013).
[43] R. Canetti, Journal of CRYPTOLOGY 13, 143 (2000).
[44] M. Ben-Or and D. Mayers, arXiv preprint quant-ph/0409062 (2004).
[45] C. Portmann and R. Renner, arXiv preprint arXiv:1409.3525 (2014).
[46] M.-H. Li, C. Wu, Y. Zhang, W.-Z. Liu, B. Bai, Y. Liu, W. Zhang, Q. Zhao, H. Li, Z. Wang, et al., Physical review letters

121, 080404 (2018).

[47] M.-H. Li, C. Wu, Y. Zhang, W.-Z. Liu, B. Bai, Y. Liu, W. Zhang, Q. Zhao, H. Li, Z. Wang, L. You, W. J. Munro, J. Yin,

J. Zhang, C.-Z. Peng, X. Ma, Q. Zhang, J. Fan, and J.-W. Pan, Phys. Rev. Lett. 121, 080404 (2018).

[48] P. H. Eberhard, Phys. Rev. A 47, R747 (1993).

