TEGDetector: A Phishing Detector that Knows
Evolving Transaction Behaviors

Jinyin Chen, Haiyang Xiong, Dunjie Zhang, Zhenguang Liu, and Jiajing Wu

1

1
2
0
2

v
o
N
6
2

]

R
C
.
s
c
[

1
v
6
4
4
5
1
.
1
1
1
2
:
v
i
X
r
a

Abstract—Recently, phishing scams have posed a signiﬁcant
threat to blockchains. Phishing detectors direct their efforts in
hunting phishing addresses. Most of the detectors extract target
addresses’ transaction behavior features by random walking or
constructing static subgraphs. The random walking methods,
unfortunately, usually miss structural information due to limited
sampling sequence length, while the static subgraph methods
tend to ignore temporal features lying in the evolving transaction
behaviors. More importantly, their performance undergoes severe
degradation when the malicious users intentionally hide phishing
behaviors. To address these challenges, we propose TEGDetector,
a dynamic graph classiﬁer that learns the evolving behavior
features from transaction evolution graphs(TEGs). First, we
cast the transaction series into multiple time slices, capturing
the target address’s transaction behaviors in different periods.
Then, we provide a fast non-parametric phishing detector to
narrow down the search space of suspicious addresses. Finally,
TEGDetector considers both the spatial and temporal evolutions
towards a complete characterization of the evolving transaction
behaviors. Moreover, TEGDetector utilizes adaptively learnt time
coefﬁcient to pay distinct attention to different periods, which
provides several novel
insights. Extensive experiments on the
large-scale Ethereum transaction dataset demonstrate that the
proposed method achieves state-of-the-art detection performance.

Index Terms—Phishing detector, dynamic graph classiﬁcation,

robustness.

I. INTRODUCTION

As a decentralized and distributed public ledger, blockchain
technology [1] has enjoyed great success in various ﬁelds,
e.g., ﬁnance, technology, and culture [1]. Cryptocurrency [2],
[3], undoubtedly, is one of the most profound applications of
blockchain. As the largest blockchain platform supporting smart
contracts, Ethereum now holds cryptocurrencies worth more
than $39.3 billion dollars. Unfortunately, the decentralization
of blockchain also breeds numerous ﬁnancial scams [4], [5],
[6], [7]. Chainalysis1 has reported that phishing scams, which
accounted for 38.7% of all Ethereum scams [8], stole $34
million from Ethereum platform in 2018. Phishing refers to the
impersonating a website of an honest ﬁrm, which obtains the
users sensitive information and money via phishing websites.
Recently, phishing scams are reported every year, and they
become even more sophisticated.

As a result, detecting phishing addresses for blockchain
has attracted widespread attention. Fundamentally, phishing
detection aims to learn a mapping function that bridges their
historical transaction behaviors to a binary output y, where
y = 0 denotes the target address is normal and y = 1 represents

1A provider of investigation and risk management software for virtual

currencies

it is abnormal. A family of works [9], [10] utilized manually
extracted features to capture the target user’s transaction
behaviors. Unfortunately, these models require an incisive data
understanding, leading to unsatisfactory results.

Recent approaches explored using different sorts of graph
embedding algorithms to address the issue. Walking based
detectors [11], [12], [13], [14], [15] direct their efforts at
adopting random walking to characterize the temporal evolution
between transactions. Subgraph based detectors [16], [17], [15],
[18] usually described the target address’s transaction pattern
through a static subgraph. Speciﬁcally, they ﬁrst construct the
transactions of the target address and its neighbors in all periods
into a static subgraph, then built upon the success of graph
neural networks to learn the spatial graph structure from the
static subgraphs. All in all, there are several challenges in this
task.

Balance between structural and temporal information.
Earlier works tend to focus on either structural or temporal
information, which leads to considerable information loss. This
motivates us to consider whether we can combine and balance
them to approach better detection performance. Due to the
incompleteness of the structural information caused by the
limited sampling sequence length, it is difﬁcult for the walking
strategy to achieve such a balance. We speculate that one
viable approach is to construct multiple transaction subgraphs
for a target address, where each subgraph characterizes the
transaction topology within a temporal period. We term
the transaction subgraphs as dynamic subgraphs. Taking the
Ethereum [2] users as an example. We apply the static subgraph
construction method in MCGC [18] and extend it to the
dynamic subgraph construction.

Robustness against hidden phishing addresses. Re-
searches [19], [20], [21] on the vulnerability of the graph
analysis methods also reveal potential security issues in
blockchain phishing detection. Intuitively, the phishers may
bypass the detection by transacting to speciﬁc addresses.
To verify the robustness of existing phishing detectors, we
randomly add transactions between the ﬁrst and second-
order neighbor addresses of 200 veriﬁed Ethereum phishing
addresses.

To address these challenges, our approach converts phishing
detection into a dynamic graph classiﬁcation problem. We
construct a series of transaction evolution graphs (TEGs) for
multiple time slices, which have the key advantage of retaining
both the spatial structural and temporal
information. To
effectively utilize the abundant information contained in TEGs,
we also propose TEGDetector that serves to capture target
addresses’ behavior features. The TEGDetecor is composed of

 
 
 
 
 
 
2

graph convolutional layers and GRU, which respectively capture
the topology structure and dynamic evolution characteristics of
the network. Speciﬁcally, we introduce adaptive time coefﬁcient
to comprehensively balance the user’s behavior features in all
periods, rather than using only the one in the most recent
period. This beneﬁts exploring the crucial factors of phishing
detection and helps TEGDetector identify possible malicious
deception. Our contributions may be summarized as follows:
• To the best of our knowledge, this is the ﬁrst work that
deﬁnes the phishing detection task as a dynamic graph
classiﬁcation problem. The proposed method balances
the structural and temporal
information through the
constructed TEGs, and provides TEGDetector to map
these information into user behavior features.

• A fast non-parametric phishing detector (FD) is presented,
which can quickly narrow down the search space of sus-
picious addresses and improve the detection performance
and efﬁciency of the phishing detector.

• Experiments conducted on the Ethereum dataset demon-
strate that TEGDetector can achieve state-of-the-art de-
tection performance. Interestingly, phishing deception
experiments caused the existing methods to undergo an
accuracy decline of 25-50%, while TEGDetector achieves
more robust phishing detection with only a decline of
13%.

The rest of the paper is organized as follows. Related works
are introduced in Section II, while the proposed method is
detailed in Section III. Experiment results and discussion are
showed in Section IV. Finally, we conclude our work.

In general, the existing blockchain phishing detectors will
sacriﬁce some structural or temporal information when cap-
turing users’ behavior features. Moreover, the robustness of
phishing detectors lacks research.

B. Graph Classiﬁcation

For a blockchain transaction platform, the transactions of the
target address and its neighbors are usually sufﬁcient to reﬂect
its transaction pattern. Intuitively, it is possible to convert the
phishing detection task into a graph classiﬁcation problem.

There are two general approaches to graph classiﬁcation.
The ﬁrst [22], [23], [24], [25] assumes that molecules with
similar structures share similar functions, and converts the core
problem of graph learning to measure the similarity of different
graphs. The second [26], [27], [28], [29] introduces various
pooling operations to aggregate the node level representations
into the graph level, which performs better on complex graphs.
It is worth noting that although numerous dynamic graph
mining methods [30], [31], [32], [33], [34] have been studied,
most graph classiﬁers are designed for static graphs. Due to
the dynamic evolving pattern of user behaviors, a dynamic
graph classiﬁer will be beneﬁcial to phishing detection.

III. METHODOLOGY

TEGDetector seeks to identify phising addresses by extract-
ing their evolving behavior cues from the transaction graphs.
An overview of the proposed method is outlined in Figure 1.
In the following, we present the details of each component.

II. RELATED WORK

A. Data Preprocessing

In this section, we brieﬂy review the existing works on

phishing detection and graph classiﬁcation.

A. Phishing Detector

To provide early warnings to potential victims, various
phishing detectors are proposed to identify phishing addresses.
Feature engineering based phishing detectors [10], [9]
usually manually extract basic and additional
transaction
statistical features from preprocessed transactions, then use
them to train a classiﬁer. To realize automatic phishing behavior
feature extraction, walking based phishing detectors learn
the user’s transaction behavior feature unsupervised. Wu et
al. [13] performed a biased walking according to the transaction
amount and timestamp, then obtained the address sequence
to extract the user’s behavior features. Lin et al. [14] further
deﬁned the temporal weighted multidigraph (TWMDG), which
ensures the walking sequences contain the actual meaning of the
currency ﬂow. The subgraph based phishing detectors pay
more attention to spatial structure information. Yuan et al. [15]
designed second-order subgraphs to represent the target address,
modeling the phishing detection task as a graph classiﬁcation
problem. Wang et al. [17] mapped the original transaction
subgraphs to the more complex edge subgraphs. Shen et al. [16]
and Zhang et al. [18] introduced graph neural networks to
realize blockchain phishing detection in an end-to-end manner.

The phishing detection problem on the blockchain is a
typical supervised learning problem, which requires labeled
user addresses to train TEGDetector. Here, we obtained an
Ethereum address list from the blockchain academic research
data platform Xblock2. We extract transaction sending/receiving
addresses, transaction amount, timestamps, and address labels
as the crucial information for constructing TEGs. The sending
addresses and the receiving ones correspond to the nodes on
graph, and the transaction amount and timestamps represent the
edge weight and temporal information between the node pairs,
respectively. Moreover, we construct the address label-based
attribute X ∈ RN ×2 for N addresses. Xi,1 = 1 if the address
vi is a phishing address, and Xi,0 = 1 otherwise.

B. TEGDetector

In this section, we designe a phishing detector for fully
extracting the structure and temporal information from TEGs,
termed TEGDetector. As shown in Figure 2, TEGDetector
is designed in an end-to-end manner, including evolution
feature extraction (EF-Extractor), evolution graphs pooling,
and behavior recognition.

The EF-Extractor integrates structural and temporal infor-
mation to extract the addresses’ evolution features. Through
the alternation with EF-Extractor, the evolution graph pooling

2http://xblock.pro/

3

Fig. 1. A high-level overview of our pipeline. (a) Preprocessing data from Ethereum. (b) Construction of TEGs for each address. (c) Phishing detection via
TEGDetector.

Fig. 2. The framework of TEGDetector. (a) EF-Extractor learns the evolution features of different TEG slices. (b) The evolution graphs pooling alternates
with EF-Extractor to gradually aggregate the node-level evolution features into the graph-level. (c) The Read-out operation and Multilayer Perceptron (MLP)
output the detection results.

aggregates the evolution features of similar addresses until
obtaining the TEG’s graph-level features. The behavior recog-
nition assigns time coefﬁcients to these graph-level features,
and comprehensively considers the target address’s transaction
behaviors in different time slices, which also enhances the
robustness of TEGDetector.

EF-Extractor. We introduce EF-Extractor to learn the user
addresses’ transaction evolution features at different time slices.
Since graph convolutional layers have proven its powerful
ability to capture the structural features of graphs in [35] [36],
EF-Extractor employs graph convolutional layers to learn the
structural features of the current TEG slice. Meanwhile, we
learn from the idea of GRU [37] to capture the temporal
information of the TEGs. Another reason for choosing GRU is
that it has fewer model parameters and runs faster than long
short-term memory [38].

Speciﬁcally, EF-Extractor utilizes a two-layer GCN [35]
module to map the structural information to a d-dimensional
node representation Z. As the structural features of the t-th
slice of TEGs, Zt can be deﬁned as:

Zt = GCN (ht−1, At) = f ( ˆAtσ( ˆAtht−1W0)W1)

(1)

2

2

t

t

˜At ˜D− 1

where ˆAt = ˜D− 1
, At ∈ RN ×N is the adjacency matrix
of the t-th slice of TEGs, ˜At = At + IN (t) is the adjacency
matrix with self-connections. ˜Dt(ii) = (cid:80)
˜At(ij) denotes the
degree matrices of ˜At. ht−1 is the evolution features of the
t-th slice, which will be described in detail later. W0 ∈ RN ×H
and W1 ∈ RH×d denote the weight matrix of the hidden layer
and the output layer, respectively. σ is the Relu active function
and the input h0 = X.

j

For the evolution process of the structural features, EF-

Extractor ﬁrst calculates the update gate zt and the reset gate rt
according to the current structural features Zt and the previous
evolution features ht−1, which can be expressed as:

zt = σ(ZtWz + ht−1Uz)

rt = σ(ZtWr + ht−1Ur)

(2)

(3)

where Wz, Wr ∈ RN ×d and Uz, Ur ∈ Rd×d are the weight
matrix of the update/reset gate, respectively. The update gate
decides how much ht−1 is passed to the future, and the reset
gate determines how much ht−1 need to be forgotten.

The next step is to calculate the candidate hidden state ˜ht
by reset gate. Here, EF-Extractor stores historical evolution
features ht−1 and memorizes the current state:

˜ht = tanh(W Zt + (rt (cid:12) ht−1U )

(4)

where W ∈ RN ×d and U ∈ Rd×d are the weight matrix used
to calculate ˜ht. (cid:12) denotes the Hadamard product.

Finally, EF-Extractor updates the current evolution features

ht according to ht−1 and ˜ht:

ht = (1 − zt) (cid:12) ht−1 + zt (cid:12) ˜ht

(5)

Evolution graphs pooling. Intuitively, addresses with sim-
ilar evolution features can be divided into the same address
clusters. This motivates us to aggregate similar addresses until
all addresses’ evolution features are aggregated into the TEG’s
graph-level behavior features. The key idea of the evolution
graphs pooling is to learn the cluster assignment matrix by
GNNs and assign similar addresses to new address clusters.
For the evolution features ht in t-th slice (t ∈ {1, ..., T }), the

(a) Data preprocessing...............T(b) TEGs constructionTTarget addresses(c) Phishing detection TEGDetectorEthereumhttps://etherscan.io/Ethereumhttps://etherscan.io/Normal addresses Phishing addresses Normal addresses Phishing addresses ...G2G1GT×σtanh+×1-σAtht-1rtztht~htEF-ExtractorG1poolG1GTpoolpool..............MLP(a) Evolution feature extraction (b) Evolution graphs pooling poolLabelPooling evolution graphs Transaction evolution graphs Behavior featuresGCN.×h1 , … , hTA1 , … , AT+EF-Extractor PoolingRead-out(c) Behavior recognition hih1 poolhT evolution graphs pooling ﬁrst calculates the current cluster
assignment matrix Ct:

Ct = sof tmax (GN Npool(At, ht))

(6)

where GN Npool can be any GNNs, here we choose the GCN
module with the same structure as EF-Extractor. Ct ∈ RN × ˜N
means that N addresses are assigned to ˜N new address clusters.
˜N = N ∗ r and r is the assignment ratio.

According to the adjacency matrix {A1, ..., AT } of the
current TEG, address evolution features {h1, ..., hT }, and the
assignment matrix {C1, · · · , CT }, the process of the evolution
graphs pooling for t-th slice can be formulated as:
hpool
t = C T

t ht ∈ R ˜N ×d

(7)

Apool

t = C T

t AtCt ∈ R ˜N × ˜N

(8)

where d is the dimension of the node representation Z. Eq. 7
and Eq. 8 generate the evolution features {hpool
} and
} for ˜N address clusters,
the adjacency matrix {Apool
respectively. They are input to the next EF-Extractor to capture
the evolution features of next address clusters.

, ..., Apool

, ..., hpool

T

T

1

1

Behavior recognition. In some cases, phishers initiating ma-
licious transactions in a speciﬁc evolution period may seriously
affect the subsequent transaction evolution features. Therefore,
we comprehensively consider the transaction behavior features
in all slices rather than using only the most recent time
slice, which can alleviate the negative impact of malicious
transactions.

After extracting the evolution features {hpool

} for
T time slices ( ˜N = 1, ht ∈ R1×d, t ∈ [1, ..., T ]), the Read-out
operation assigns time coefﬁcients α = [α1, ..., αT ] to different
evolution features, aggregating the T evolution features into
the unique evolution feature hi for the target address vi:
T
(cid:88)

, ..., hpool

T

1

hi =

αthpool
t

(9)

t=1

where hpool

t

denotes vi’s evolution features of t-th slice.

Finally, we take hi as the input of the MLP layer with a
softmax classiﬁer. Moreover, we use the cross-entropy function
L to train TEGDetector, which is given by:

ˆY = sof tmax(M LP (hi))

L = −

(cid:88)

|Y |
(cid:88)

Gi∈Gset

j=1

Qij ln ˆYij

(cid:0)Ai, X i(cid:1)

(10)

(11)

where Gi ∈ Gset denotes the target address vi’s TEG in the
training set Gset. Y = {y1, ..., yn} is the category set of the
TEGs. Qij = 1 if Gi belongs to category yi and Qij = 0
otherwise. ˆYij denotes the predicted probability of Gi, which
is calculated by Eq.10 and can be considered as a function of
Ai and X i, thus we denote it as ˆYij(Ai, X i).

IV. EXPERIMENTS

In this section, we comprehensively evaluate the proposed
TEGDetector, including its phishing detection performance,
detection efﬁciency, and robustness.

4

TABLE I
DATASET STATISTICS

TEG properties
Sum
Average
Maximum
Minimum

# Addresses
790,849
395.42
4,934
2

#Transctions
3,383,022
1,691.51
110,060
1

Average degree
-
4.86
7.09
1.00

A. Datasets

We evaluate TEGDetector on the real-world Ethereum
transaction dataset released on the Xblock platform. Xblock
provides 1,660 phishing addresses that have been reported
and 1,700 randomly selected normal ones with the records of
their two-order transactions. Speciﬁcally, we randomly selected
1,000 phishing addresses and the same number of ordinary
addresses and construct the TEGs with 10 time slices (T = 10)
for them. To make a comprehensive evaluation, we divide the
TEGs into two parts: {60%, 70%, 80%} as the training set
and the remaining {40%, 30%, 20%} as the test set. The basic
statistics are summarized in Table I. In the experiment, we
repeated the above steps ﬁve times and reported the average
phishing detection performance.

B. Compared Methods

To better evaluate the detection performance of TEGDetector,
we choose several phishing detectors as the compared methods.
For all compared methods, we select the same target addresses
as TEGDetector, and conduct experiments based on the source
code released by the authors and their suggested parameter
settings. The compared methods are brieﬂy described as
follows:

Density detector calculates the density ratio of TEG slices
containing transactions to all slices. When the density ratio
is greater than 0.5, the target address will be classiﬁed as a
phishing address. Repeat detector calculates the repetition
ratio of test transactions with the same direction as the training
ones to all test transactions. According to the conclusion of
Lin et al. [39], we classify addresses with a repetition ratio
greater than 0.1 as phishing addresses. Note that in this case,
we divide the slices in each TEG into training slices and test
ones according to different division ratios. Deepwalk [11]
and Node2vec [12] learn node representations through random
walking and can be used in blockchain transaction networks.
Trans2vec [13] and T-EDGE [14] consider the transaction
amount and timestamps of blockchain transactions on the basis
of random walking, thus achieving better phishing detection
performance. I2BGNN [16] and MCGC [18] are graph classi-
ﬁers designed for phishing detection on the blockchain. They
have achieved satisfactory detection performance and easy to
be implemented for phishing detection on new addresses.

C. Performance of TEGDetector

In this section, we discuss the phishing detection performance

of TEGDetector, and analyze its detection efﬁciency.

Phishing detection performance. Compared with other
detectors in Table II, TEGDetector achieves the state-of-
the-art (SOTA) performance at different training set ratios.

5

TABLE II
THE DETECTION PERFORMANCE OF DIFFERENT PHISHING DETECTORS. WE USE BOLD TO HIGHLIGHT WINS.

Compared methods

Density detector
Repeat detector
Deepwalk
Node2vec
Trans2vec
T-EDGE
I2BGNN
MCGC
TEGDetector (Ours)

Precision
50.41
46.94
76.85
81.65
78.65
79.05
88.65
90.50
95.90

60%
Recall
99.30
51.78
68.85
70.35
77.90
76.20
91.45
91.55
95.60

F-score
66.87
49.25
72.63
75.58
78.27
77.60
90.03
91.02
95.75

Training ratio
70%
Recall
99.30
62.35
71.20
72.20
86.55
76.65
91.55
92.10
96.75

Precision
50.41
48.16
77.90
82.30
88.65
87.45
89.20
90.55
96.55

F-score
66.87
54.35
74.40
76.92
87.59
81.69
90.36
91.32
96.65

Precision
50.41
48.53
78.15
82.65
91.45
88.75
89.20
90.75
96.30

80%
Recall
99.30
69.62
72.70
74.85
87.65
78.55
92.05
92.85
96.25

F-score
66.87
57.19
75.33
78.56
89.51
83.34
90.60
91.79
96.28

Speciﬁcally, although the density detector achieves a recall
of 99.30%, a precision of 50.41% indicates that it is actually
invalid to detect phishing addresses based on density ratio.
Compared with density detector and repeat detector, other
compared methods achieve better detection performance with
automated feature learning. Unfortunately, the lack of structural
or temporal information restricts them from achieving more
accurate phishing detection. In contrast to Trans2vec and
T-EDGE (which focus on temporal information), I2BGNN
and MCGC (which pay attention to structural information),
TEGDetector achieves the best detection performance. This
suggests that balancing structural and temporal information
can more accurately capture the target address’s transaction
behaviors.

Detection efﬁciency. We further study the detection efﬁ-
ciency of TEGDetector. Since TEGs are essentially a series of
dynamic subgraphs, we compare TEGDetector with the GNN
based phishing detectors which input the static ones.

training and count

Figure 3(a) and (b) show the training time and detection
time of different detectors. We select all training addresses
for model
the detection time of 100
randomly selected addresses in the detection phase. We can
observe that with the increase of max links, the training
time of TEGDetector becomes longer than that of I2BGNN.
Moreover, TEGDetector’s detection time still reaches 6.5 times
that of I2BGNN, although the gap has been greatly reduced.
Considering TEGDetector’s excellent detection performance,
we believe that such a price is acceptable.

addresses while ensuring that the real phishing ones are not
miss, which can narrow down the search space of suspicious
addresses.

Phishers usually send phishing messages to massive users,
allowing them to have more potential transaction partners.
We believe that they may have more intensive large-amount
transactions compared to the normal addresses. To verify our
conjecture, we deﬁned central transaction ratio (CTR), which
represents the ratio of central address’s transactions to all
transactions in a TEG (or a static subgraph).

Inspired by this observation, we propose a fast and non-
parametric detector (FD). Speciﬁcally, we classify the target
address whose CTR is greater than a threshold as a phishing
address, otherwise, it is regarded as a normal address. In
Figure 4(a), when CTR is set to 0.6, FD can almost reach 100%
Recall, and Precision almost reaches the highest 60%. This
indicates that FD can ﬁlter out normal addresses almost without
missing any phishing addresses, which can be a pre-detected
approach before using TEGDetector for precise phishing de-
tection. Meanwhile, Figure 4(b) shows that the TEGDetector’s
Precision is improved more than its Recall since FD may pre-
ﬁlters some normal addresses that may be misclassiﬁed by
TEGDetector. Additionally, we can observe that FD can also
reduce the detection time of TEGDetector by approximately
15%. Consequently, FD is a light-weighted solution for phishing
detection when we consider both performance and efﬁciency.

Fig. 3. Detection efﬁciency of different detectors.

Fig. 4.
(a) FD’s detection performance under different CTR thresholds. (b)
FD can improve the detection performance of TEGDetector and reduce its
detection time.

D. A Fast and Non-parametric Phishing Detection

The previous section conﬁrms the SOTA phishing detection
performance of TEGDetector. However, the high time com-
plexity of TEGDetector is still a challenge. To Address this
problem, we propose to quickly ﬁlter out the obvious normal

E. Ablation Study of TEGDetector

To further explore the effectiveness of TEGDetector, we
conduct ablation experiments on the pooling layer and time
coefﬁcient. For the pooling layer, we utilize the average pooling

0510152025300.51k1.522.530510152025303540450.511.522.5351015202501,0005007500.51.01.52.02.53.0Training time (s)Max_links(k)(a) Training time in each iteration 05101520250.51.01.52.02.53.0Max_links(k)(b) Detection time of different methods I2BGNNMCGCTEGDetectorI2BGNNMCGCTEGDetector300Detection time (s)17181920212223249696.296.496.696.89797.2ori0.20.40.60.8PrecisionRecallF1-scoreTime40%50%60%70%80%90%100%110%0.30.50.70.910090807060504097.297.096.896.696.496.096.2232221201918170.20.40.60.80.20.40.60.8OriginalPrecisionRecallF1-scorePrecisionRecallF1-scoreTimeEvaluation metrics(%)Evaluation metrics(%)Detection time (s)Threshold of FD (CTR)Threshold of FD (CTR)(a) Detection performance of FD (b) TEGDetector’s performance and detection time 6

and maximum pooling operations on the feature matrix of the
graph, respectively, expressed as TEGD-ave and TEGD-max.
For the time coefﬁcients, we replace the weighting of time
coefﬁcients in TEGDetector with a summation operation to
obtain the variant TEGDetector S.

TABLE III
ABLATION STUDY OF TEGDETECTOR.

Ablation Module

Pool-method

Time coefﬁcient
Proposed

Method
TEGD-ave
TEGD-max
TEGDetector S
TEGDetector

Precision(%)
95.48
95.24
94.51
96.55

Recall(%)
95.53
95.25
94.56
96.75

F-score(%)
95.50
95.25
94.50
96.65

As illustrated in Table III, the performance of TEGDetector
is better than the two detection methods with average and
maximum pooling, e.g, the precision of TEGDetector is 96.55%,
while the precision of TEGD-max is 95.24%. This indicates
that the pooling method using the cluster assignment matrix
can extract graph-level features more effectively than the
average and maximum pooling methods. We also observe
that TEGDetector S is almost 2% lower than TEGDetector
on precision, recall and F-sorce, which demonstrates that time
coefﬁcients give different weights on different moments to
improve model performance.

In the phishing deception experiment, the smaller the target
CTR, the more malicious transactions need to be added. In
Figure 5(b), the detection accuracy of Trans2vec and T-EDGE
is more stable than other existing methods. We speculate that
although the randomness of the walking strategies leads to
the loss of structural information, it also reduces the impact
of malicious transactions. In contrast, the static subgraphs
constructed by I2BGNN and MCGC retain all the malicious
information, their detection accuracy reduces drastically. This
further demonstrates that in addition to limiting the phishing
detection performance, the robustness of static subgraphs
lacking temporal information is also worrisome. Reassuringly,
TEGDetector still with an accuracy of 83% even in the worst
case (when the target CTR is set to 0.2), indicating that it
is necessary to expand the static subgraphs into the dynamic
ones. Compared with existing methods, TEGDetector can fully
balance the target address’s transaction behaviors in all periods,
which enables it to capture more comprehensive behavior
features. It is worth noting that TEGDetector is more robust
than TEGDetector S, i.e., the latter undergoes an accuracy
decline of 21.25%, while the former with only a decline of
13.5%. This testiﬁes that TEGDetector is signiﬁcantly more
robust when phishers cannot add malicious transactions in each
period.

F. Robustness of TEGDetector

Now we evaluate the robustness of detectors when phishers
maliciously conceal their phishing behaviors. From the perspec-
tive of network topology properties and detectors, we design
two methods to add disturbances on the transaction networks,
i.e., the CTR-based and gradient-based methods. According to

Fig. 5.
robust than other methods when facing possible phishing deception.

(a) An example of phishing deception. (b) TEGDetector is more

our discussion in the previous section, the phishing addresses’
CTRs are more likely to be larger than 0.9. Therefore, we
designed a phishing deception experiment where we change the
phishing address’s CTR. As shown in Figure 5(a), we randomly
add transactions to the non-central address pairs in TEGs until
their CTRs are less than the set value. Speciﬁcally, we randomly
select T /2 time slices in TEGs and add malicious transactions
to them. The transaction amount of these transactions is set to
a random value less than the maximum one in original TEGs.

Fig. 6.
(a), (b), (c) and (d) respectively represent the performance of
TEGDetector, TEGDetector S, MCGC, I2BGNN on the perturbed transaction
networks.

In addition to considering the malicious transactions gener-
ated based on the network topology properties, we also design
the malicious transactions generated based on the feedback of
the detectors gradient. Since T-EDGE and Trans2vec are based
on random walk methods, these two detection methods do
not perform gradient attacks and compare with other detection
methods. As shown in Figure 6, we obtain the gradient value
of the transaction network adjacency matrix from the objective
loss function in descending order, and add transactions in the
order where there are no transactions. The value obtained by
multiplying the modify rate of link by the maximum number
of nodes in the transaction network is the number of malicious
transactions added.

3040506070809010000.20.40.60.810090807060504030Original0.80.60.40.2Accuracy(%)Target CTRTrans2vecI2BGNNTEGDetector_ST-EDGEMCGCTEGDetectorCentral transactionNon-central transactionTarget CTR=0.5(a) Phishing deception (b) Phishing accuracy under different CTR Malicious transaction70.075.080.085.090.095.0ori0.10.20.30.40.570.075.080.085.090.095.0ori0.10.20.30.40.570.075.080.085.090.095.0ori0.10.20.30.40.570.075.080.085.090.095.0ori0.10.20.30.40.5908580757090858070750.10.20.30.4OriginalEvaluation metrics(%)Evaluation metrics(%)Modify Rate of LinkModify Rate of Link(a) Detection performance of TEGDetector (b) Detection performance of TEGDetector_S0.50.10.20.30.4Original0.5PrecisionRecallF1-scorePrecisionRecallF1-scorePrecisionRecallF1-scorePrecisionRecallF1-score908580757090858070750.10.20.30.4OriginalEvaluation metrics(%)Evaluation metrics(%)Modify Rate of LinkModify Rate of Link(c) Detection performance of  MCGC(d) Detection performance of I2BGNN0.50.10.20.30.4Original0.5PrecisionRecallF1-scorePrecisionRecallF1-scorePrecisionRecallF1-scorePrecisionRecallF1-score959510010095957

As shown in Figure 6(a), TEGDetector exceeds 85% in
precision, recall and F1-score even if the modify rate of link
is 0.5, which is better than the other three detection methods,
e.g., the precision on TEGDetector S, the recall on MCGC
and the F1-score on I2BGNN are only 86.09%, 79.33% and
72.50% respectively in the worst case. From the overall decline
in precision, the maximum rate of decrease in precision of
TEGDetector is only 9.02% and TEGDetector S is 8.91%,
while MCGC and IBGNN are 10.08% and 11.41% respectively.
This indicates that the TEGs can disperse disturbances in
multiple timestamps when mitigating the impact of malicious
transactions, thereby enhancing the robustness of the detector.

V. CONCLUSIONS

In this paper, we ﬁrst deﬁned the transaction evolution graphs
(TEGs) that can frame both structural and temporal behavior
cues. Then, we proposed TEGDetector, a dynamic graph
classiﬁer suitable for identifying the target address’s transaction
behavior from TEGs. Experimental results demonstrate the
SOTA detection performance of TEGDetector. Moreover, we
gain insights that in the TEGs, large-amount transactions tend
to be more concentrated on phishing addresses. Inspired by this,
a fast phishing detector(FD) is designed, which can quickly
narrow down the search space of suspicious addresses and
improve the detection efﬁciency of the phishing detector. In the
possible phishing deception experiment, TEGDetector shows
signiﬁcantly higher robustness than other phishing detectors.
However, TEGDetector’s time complexity is much higher
than other phishing detectors since it both considers the
structural and temporal information. For future work, we plan
to explore a lower complexity phishing detector. In addition,
improving the robustness of phishing detectors against more
targeted phishing deception methods deserves further research.

REFERENCES

[1] M. Iansiti and K. R. Lakhani, “The truth about blockchain:,” Harvard

business review, vol. 95, no. 1, pp. 118–127, 2017.

[2] G. Wood et al., “Ethereum: A secure decentralised generalised transaction
ledger,” Ethereum project yellow paper, vol. 151, no. 2014, pp. 1–32,
2014.

[3] Y. Yuan and F.-Y. Wang, “Blockchain and cryptocurrencies: Model,
techniques, and applications,” IEEE Transactions on Systems, Man, and
Cybernetics: Systems, vol. 48, no. 9, pp. 1421–1428, 2018.

[4] M. Vasek and T. Moore, “There’s no free lunch, even using bitcoin:
Tracking the popularity and proﬁts of virtual currency scams,” in
International conference on ﬁnancial cryptography and data security.
Springer, 2015, pp. 44–61.

[5] W. Chen, Z. Zheng, J. Cui, E. Ngai, P. Zheng, and Y. Zhou, “Detecting
ponzi schemes on ethereum: Towards healthier blockchain technology,”
in Proceedings of the 2018 world wide web conference, 2018, pp. 1409–
1418.

[6] M. Vasek and T. Moore, “Analyzing the bitcoin ponzi scheme ecosystem,”
in International Conference on Financial Cryptography and Data Security.
Springer, 2018, pp. 101–112.

[7] Y. Huang, H. Wang, L. Wu, G. Tyson, X. Luo, R. Zhang, X. Liu,
G. Huang, and X. Jiang, “Understanding (mis) behavior on the eosio
blockchain,” Proceedings of the ACM on Measurement and Analysis of
Computing Systems, vol. 4, no. 2, pp. 1–28, 2020.

[8] EtherScamDB, “Etherscamdb.” 2018.

[Online]. Available: https:

//blog.chainalysis.com/reports/ethereum-scams

[9] Y. Li, Y. Cai, H. Tian, G. Xue, and Z. Zheng, “Identifying illicit addresses
in bitcoin network,” in International Conference on Blockchain and
Trustworthy Systems. Springer, 2020, pp. 99–111.

[10] Y.-J. Lin, P.-W. Wu, C.-H. Hsu, I.-P. Tu, and S.-w. Liao, “An evaluation
of bitcoin address classiﬁcation based on transaction history summa-
rization,” in 2019 IEEE International Conference on Blockchain and
Cryptocurrency (ICBC).

IEEE, 2019, pp. 302–310.

[11] B. Perozzi, R. Al-Rfou, and S. Skiena, “Deepwalk: Online learning
of social representations,” in Proceedings of the 20th ACM SIGKDD
international conference on Knowledge discovery and data mining, 2014,
pp. 701–710.

[12] A. Grover and J. Leskovec, “node2vec: Scalable feature learning for
networks,” in Proceedings of the 22nd ACM SIGKDD international
conference on Knowledge discovery and data mining, 2016, pp. 855–
864.

[13] J. Wu, Q. Yuan, D. Lin, W. You, W. Chen, C. Chen, and Z. Zheng,
“Who are the phishers? phishing scam detection on ethereum via network
embedding,” IEEE Transactions on Systems, Man, and Cybernetics:
Systems, 2020.

[14] D. Lin, J. Wu, Q. Yuan, and Z. Zheng, “T-edge: Temporal weighted
multidigraph embedding for ethereum transaction network analysis,”
Frontiers in Physics, vol. 8, p. 204, 2020.

[15] Z. Yuan, Q. Yuan, and J. Wu, “Phishing detection on ethereum
via learning representation of transaction subgraphs,” in International
Conference on Blockchain and Trustworthy Systems. Springer, 2020,
pp. 178–191.

[16] J. Shen, J. Zhou, Y. Xie, S. Yu, and Q. Xuan, “Identity inference on
blockchain using graph neural network,” arXiv preprint arXiv:2104.06559,
2021.

[17] J. Wang, P. Chen, S. Yu, and Q. Xuan, “Tsgn: Transaction subgraph
networks for identifying ethereum phishing accounts,” arXiv preprint
arXiv:2104.08767, 2021.

[18] D. Zhang and J. Chen, “Blockchain phishing scam detection via multi-

channel graph classiﬁcation,” arXiv preprint arXiv:2108.08456, 2021.

[19] D. Z¨ugner, A. Akbarnejad, and S. G¨unnemann, “Adversarial attacks
on neural networks for graph data,” in Proceedings of the 24th ACM
SIGKDD International Conference on Knowledge Discovery & Data
Mining, 2018, pp. 2847–2856.

[20] H. Dai, H. Li, T. Tian, X. Huang, L. Wang, J. Zhu, and L. Song,
“Adversarial attack on graph structured data,” in International conference
on machine learning. PMLR, 2018, pp. 1115–1124.

[21] H. Chang, Y. Rong, T. Xu, W. Huang, H. Zhang, P. Cui, W. Zhu, and
J. Huang, “A restricted black-box adversarial framework towards attacking
graph embedding models,” in Proceedings of the AAAI Conference on
Artiﬁcial Intelligence, vol. 34, no. 04, 2020, pp. 3389–3396.

[22] K. M. Borgwardt and H.-P. Kriegel, “Shortest-path kernels on graphs,” in
Fifth IEEE international conference on data mining (ICDM’05).
IEEE,
2005, pp. 8–pp.

[23] N. Shervashidze, P. Schweitzer, E. J. Van Leeuwen, K. Mehlhorn, and
K. M. Borgwardt, “Weisfeiler-lehman graph kernels.” Journal of Machine
Learning Research, vol. 12, no. 9, 2011.

[24] S. V. N. Vishwanathan, N. N. Schraudolph, R. Kondor, and K. M.
Borgwardt, “Graph kernels,” Journal of Machine Learning Research,
vol. 11, pp. 1201–1242, 2010.

[25] P. Yanardag and S. Vishwanathan, “Deep graph kernels,” in Proceedings
of the 21th ACM SIGKDD international conference on knowledge
discovery and data mining, 2015, pp. 1365–1374.

[26] M. Defferrard, X. Bresson, and P. Vandergheynst, “Convolutional
neural networks on graphs with fast localized spectral ﬁltering,” in
Advances in Neural
Information Processing Systems 29: Annual
Conference on Neural Information Processing Systems 2016, December
5-10, 2016, Barcelona, Spain, D. D. Lee, M. Sugiyama, U. von
Luxburg,
I. Guyon, and R. Garnett, Eds., 2016, pp. 3837–
3845. [Online]. Available: https://proceedings.neurips.cc/paper/2016/
hash/04df4d434d481c5bb723be1b6df1ee65-Abstract.html

[27] M. Zhang, Z. Cui, M. Neumann, and Y. Chen, “An end-to-end deep
learning architecture for graph classiﬁcation,” in Proceedings of the
Thirty-Second AAAI Conference on Artiﬁcial Intelligence, (AAAI-18), the
30th innovative Applications of Artiﬁcial Intelligence (IAAI-18), and the
8th AAAI Symposium on Educational Advances in Artiﬁcial Intelligence
(EAAI-18), New Orleans, Louisiana, USA, February 2-7, 2018, S. A.
McIlraith and K. Q. Weinberger, Eds. AAAI Press, 2018, pp. 4438–4445.
[28] R. Ying, J. You, C. Morris, X. Ren, W. L. Hamilton, and J. Leskovec,
“Hierarchical graph representation learning with differentiable pooling,”
arXiv preprint arXiv:1806.08804, 2018.

[29] J. Lee, I. Lee, and J. Kang, “Self-attention graph pooling,” in International
Conference on Machine Learning. PMLR, 2019, pp. 3734–3743.
[30] J. Chung, C¸ . G¨ulc¸ehre, K. Cho, and Y. Bengio, “Empirical evaluation
of gated recurrent neural networks on sequence modeling,” CoRR, vol.
abs/1412.3555, 2014. [Online]. Available: http://arxiv.org/abs/1412.3555

8

[31] P. Goyal and E. Ferrara, “Graph embedding techniques, applications,
and performance: A survey,” Knowledge-Based Systems, vol. 151, pp.
78–94, 2018.

[32] T. Li, J. Zhang, S. Y. Philip, Y. Zhang, and Y. Yan, “Deep dynamic
network embedding for link prediction,” IEEE Access, vol. 6, pp. 29 219–
29 230, 2018.

[33] J. Chen, J. Zhang, X. Xu, C. Fu, D. Zhang, Q. Zhang, and Q. Xuan, “E-
lstm-d: A deep learning framework for dynamic network link prediction,”
IEEE Transactions on Systems, Man, and Cybernetics: Systems, 2019.
[34] J. Chen, X. Lin, C. Jia, Y. Li, Y. Wu, H. Zheng, and Y. Liu,
“Generative dynamic link prediction,” Chaos: An Interdisciplinary Journal
of Nonlinear Science, vol. 29, no. 12, p. 123111, 2019.

[35] T. N. Kipf and M. Welling, “Semi-supervised classiﬁcation with
graph convolutional networks,” in 5th International Conference on
Learning Representations, ICLR 2017, Toulon, France, April 24-26,
2017, Conference Track Proceedings. OpenReview.net, 2017. [Online].
Available: https://openreview.net/forum?id=SJU4ayYgl

[36] J. Liu, C. Xu, C. Yin, W. Wu, and Y. Song, “K-core based temporal graph
convolutional network for dynamic graphs,” CoRR, vol. abs/2003.09902,
2020. [Online]. Available: https://arxiv.org/abs/2003.09902

[37] K. Cho, B. van Merrienboer, C¸ . G¨ulc¸ehre, D. Bahdanau, F. Bougares,
H. Schwenk, and Y. Bengio, “Learning phrase representations using
RNN encoder-decoder for statistical machine translation,” in Proceedings
of the 2014 Conference on Empirical Methods in Natural Language
Processing, EMNLP 2014, October 25-29, 2014, Doha, Qatar, A
meeting of SIGDAT, a Special Interest Group of the ACL, A. Moschitti,
B. Pang, and W. Daelemans, Eds. ACL, 2014, pp. 1724–1734. [Online].
Available: https://doi.org/10.3115/v1/d14-1179

[38] S. Hochreiter and J. Schmidhuber, “Long short-term memory,” Neural
Comput., vol. 9, no. 8, pp. 1735–1780, 1997. [Online]. Available:
https://doi.org/10.1162/neco.1997.9.8.1735

[39] D. Lin, J. Chen, J. Wu, and Z. Zheng, “Evolution of ethereum
transaction relationships: Toward understanding global driving factors
from microscopic patterns,” IEEE Transactions on Computational Social
Systems, 2021.

