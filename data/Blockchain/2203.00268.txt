A PATTERN LANGUAGE FOR BLOCKCHAIN GOVERNANCE

2
2
0
2

p
e
S
2
2

]

R
C
.
s
c
[

3
v
8
6
2
0
0
.
3
0
2
2
:
v
i
X
r
a

Yue Liu1,2, Qinghua Lu1,2, Guangsheng Yu1, Hye-Young Paik2, Harsha Perera1, Liming Zhu1,2
1Data61, CSIRO, Australia
2University of New South Wales, Australia
yue.liu@data61.csiro.au, qinghua.lu@data61.csiro.au, saber.yu@data61.csiro.au
h.paik@unsw.edu.au, harsha.perera@data61.csiro.au, liming.zhu@data61.csiro.au

September 23, 2022

ABSTRACT

Blockchain technology has been used to build next-generation applications taking advantage of its
decentralised nature. Nevertheless, there are some serious concerns about the trustworthiness of
blockchain due to the vulnerabilities in on-chain algorithmic mechanisms, and tedious disputes and
debates in off-chain communities. Accordingly, blockchain governance has received great attention
for improving the trustworthiness of all decisions that direct a blockchain platform. However,
there is a lack of systematic knowledge to guide practitioners to perform blockchain governance.
We have performed a systematic literature review to understand the state-of-the-art of blockchain
governance. We identify the lifecycle stages of a blockchain platform, and present 14 architectural
patterns for blockchain governance in this study. This pattern language can provide guidance for the
effective use of patterns for blockchain governance in practice, and support the architecture design of
governance-driven blockchain systems.

Blockchain, Governance, Architectural pattern, Incentive, Decision rights, Accountability

1

Introduction

Blockchain is an innovative distributed ledger technology that eliminates trusted third-parties in business processes.
Blockchain enables agreements on transactional data sharing across a large network of untrusted participants [1]. In
recent years, a considerable number of projects and studies have been conducted, to explore how to leverage blockchain
as a component in existing software architectures and workﬂows [2].

Blockchain has brought its unique characteristics (e.g. transparency, immutability, on-chain autonomy) into diverse
usage scenarios. Nevertheless, there are signiﬁcantly increased concerns on governance issues after two severe negative
crises in two world-renowned blockchain platforms: Ethereum and Bitcoin. The Ethereum ”DAO” attack in 2016
implied that ﬂaws in smart contract code may affect the operation of on-chain algorithmic mechanisms. This was
resolved by conducting a hard fork to reverse the impacted transactions and recover the stolen tokens (over 60 million
dollars) [3]. In Bitcoin, the debate on block size resulted in the split of the whole ecosystem [4]. These events exposed
the need for effective human oversight and coordination for both on-chain and off-chain businesses, and highlighted the
importance of trustworthy governance processes for blockchain.

Blockchain governance refers to the structures and processes put in place to ensure that the development and use of
blockchain are compliant with legal regulations and ethical responsibilities [5]. With the absence of a clear source
of authority, existing governance frameworks (e.g., IT governance [6, 7], data governance [8, 9]) are not directly
applicable to blockchain technology. Accordingly, this topic has received continuous attention from both academia and
industry in recent years. For instance, there are researches focusing on customised governance methods in permissioned
blockchains [10, 11], regulations of blockchain-based decentralised ﬁnance applications [12, 13], and high-level
frameworks for blockchain governance [11, 14, 15]. In a real-world implementation, Dash introduces the concept of
”masternodes”, who can participate in signiﬁcant decision-making processes [16]. Tezos enables smooth on-chain
protocol replacement without a hard fork, to minimise the impacts on business processes [17].

 
 
 
 
 
 
A PREPRINT - SEPTEMBER 23, 2022

Figure 1: A conceptual representation of blockchain platforms.

Nevertheless, there is a steep learning curve for practitioners to design and choose governance methods appropriate
for their systems. Having systematic and holistic guidance can assist system architects and developers to determine
who is involved in a governance method and when to perform the method. In this regard, this paper presents a pattern
language for realising governance for blockchain. We analysed the lifecycle of a blockchain platform, and identiﬁed 18
architectural patterns for blockchain governance. Speciﬁcally, we present 14 patterns using the pattern form [18]. The
intended audience of this pattern language is software architects and developers, and researchers who are interested in
the governance of blockchain. The pattern language can advance the design of governance-driven blockchain systems.
To the best of our knowledge, this is the ﬁrst paper presenting patterns for blockchain governance.

The remainder of this paper is organised as follows. Section 2 introduces background knowledge and related work.
The overview of our pattern language is illustrated in Section 3. Section 4 presents each pattern in details. Section 5
concludes the paper.

2 Background and Related Work

2.1 Blockchain Technology

Blockchain is the technology behind Bitcoin [19] and subsequent cryptocurrencies. Besides the huge impact it had
on the ﬁnancial sectors, blockchain is considered the next generation application building technology because it
provides two core elements for realising decentralisation: (i) a distributed ledger, and (ii) a decentralised ”compute”
infrastructure.

The underlying distributed ledger of a blockchain gives transaction storage and veriﬁcation services, without relying on
any central trusted authority [1]. Trust in permissionless blockchains is achieved via game theoretic incentives [19]
to maintain a majority of honest nodes. In permissioned blockchains, trust is preserved by strictly managing and
verifying the real-world identities of the nodes. The ”compute” infrastructures of blockchain platforms refer to on-chain
programmability (i.e. smart contracts) [20]. Smart contracts enable complex on-chain business logic such as triggers,
conditions, etc.

Fig. 1 illustrates a conceptual representation of the structure of a blockchain platform. A blockchain platform may
consist of multiple blockchain shards. A shard may include multiple nodes. Every node holds a local replica of the
shard. The data structure of blockchain is a list of identiﬁable blocks. All blocks (except the genesis block) are linked
to the previous one and hence form a chain. Blocks are containers for transactions, which are identiﬁable packages
carrying the changing states of on-chain data. Blockchain nodes provide interfaces for usage. Users can register multiple
blockchain accounts via a blockchain node. Transaction sources are identiﬁed through users’ accounts. A blockchain
node also maintains a transaction pool (local memory pool), which can temporarily store the submitted transactions
before they are included in a block. A node can generate candidate blocks from the pool. When a chosen candidate
block is validated by the node, it is appended to the blockchain. Smart contracts can be deployed on blockchain. A
decentralised application (DApp) may consist of multiple smart contracts.

2

BlockBlockTransactionTransactionTransaction poolTransaction poolNodeNodeBlockchain platformBlockchain platformShardShardSmart contractSmart contractDAppDApp11..*11..*1*1*11..**111*1AccountAccount1*1*A PREPRINT - SEPTEMBER 23, 2022

2.2 Blockchain Governance

In our previous work, we performed a systematic literature review [5] to understand state-of-the-art of blockchain gov-
ernance. Based on the review results, we proposed a governance framework consisting of six high-level principles [21].

Essentially, blockchain practitioners apply governance for block-chain to address software qualities such as adaptability,
upgradability, security, privacy, etc. These attributes can eventually improve the trustworthiness of a blockchain
platform. Blockchain governance can be divided into four layers regarding where the governance methods are enforced,
including blockchain platform itself, on-chain data, blockchain-based applications, and real-world collaborations in its
off-chain community.

The off-chain community is comprised of different stakeholders. Typically, it includes the project team, node operators,
users, application providers, and regulators. Speciﬁcally, the blockchain project team is responsible for both technical
support and making any necessary real-world arrangements (e.g., maintaining formal communication channels, and
interacting with other stakeholders). Node operators should hold nodes locally, which maintain all historical ledger
contents of the blockchain. Users can submit transactions to use blockchain services. Application providers can
choose a suitable blockchain platform to adopt in their existing workﬂows. Finally, regulators could be government
representatives or third-party auditors, who ensure the compliance of blockchain with laws, regulations and ethical
principles.

Blockchain governance highlights the allocation and execution of incentives, decision rights, and accountability over
these stakeholders, to reach agreement on governance decisions. Governance methods are implemented in two ways:
(i) process-driven mechanisms where the methods are realised through blockchain development process guided by a
set of governance meta-rules, and (ii) product-driven mechanisms where the methods are implemented as software
functionalities built into a blockchain.

Figure 2: Lifecycle of blockchain platforms annotated with their architectural patterns.

2.3 Related Work

In terms of software patterns in blockchain, there are some existing studies that investigated how to build blockchain-
based applications using reusable solutions [22, 23, 24]. Wohrer and Zdun [25] present six patterns to address security
issues in smart contract design. Zhang et al. in [26] share their experiences of utilising four object-oriented software
patterns when designing a blockchain-based healthcare platform. There are also empirical studies identifying patterns
from the perspective of blockchain ecosystem [27, 28]. Abadin and Syed [29] analyse the pattern of Proof-of-Work
In our previous work, we illustrated general smart contract patterns [30],
consensus mechanism in blockchain.
self-sovereign identity patterns [31], and blockchain-based payment patterns [32].

With regards to blockchain governance, Katina et al. [33] summarise seven interrelated elements in this topic. Allen
and Berg [34] propose a descriptive framework focusing on exogenous and endogenous governance methods. Beck et

3

Generated BroadcastValidated Confirmed StoredBlockchain lifecycleIn operationDeployedTerminated Transaction (data) lifecycleRemoved LegendState transitionLifecycle transitionStateTransaction filter• Digital signature - verify• Consensus mechanism• Incentive mechanism• Log extractor - logLog extractor - extractPattern enablerDesignpattern Digital signature - signSharded chainFrozen Social contractNetwork freezer• Scam list• Token locker• Carbonvote• Quadratic voting• Liquid democracy• Benevolent dictatorship• Cross-chain token voting• Protocol forkingData migrationX-confirmationupgradechange of project teamA PREPRINT - SEPTEMBER 23, 2022

Name

Decentralisation
level

Table 1: Pattern language overview.

Summary

Sharded chain

Permissioned &
permissionless

A blockchain platform can be divided into multiple shards to process transactions in
parallel.

Scam list

Permissionless

Token locker

Permissionless

Network freezer

Permissioned &
permissionless

Carbonvote

Permissionless

Quadratic voting

Permissionless

Liquid democracy

Permissionless

Benevolent
dictatorship

Cross-chain
token voting

Permissionless

Permissionless

The blockchain addresses of the entities who are deemed malicious are labelled, and
listed to warn all stakeholders.

A certain amount of blockchain tokens are locked for a speciﬁed time period, to secure
the token holders’ behaviour.

The blockchain platform is frozen that all on-chain business is suspended.

Votes for improvement proposals are counted according to the tokens held by blockchain
addresses.
For a blockchain account, submitting n votes for an improvement proposal costs n2
tokens.

A stakeholder can delegate the voting rights to other stakeholders, and revoke the
delegation to directly vote for improvement proposals.

A subset of developers of a blockchain platform have additional rights to ﬁnalise
governance-related decisions.

Speciﬁc token holders in a blockchain platform can vote for governance-related issues
of another blockchain platform.

Protocol forking

Permissioned &
permissionless

The software upgrades of a blockchain platform are implemented as forks of the
blockchain.

Social contract

Permissionless

A social contract is deployed to select the future maintainers of a blockchain platform.

Digital signature

Transaction ﬁlter

Log extractor

Permissioned &
permissionless

Permissioned &
permissionless

Permissioned &
permissionless

Transactions are digitally signed by users, to identify the transaction sources. The
digital signature can be veriﬁed by other stakeholders.

A ﬁlter can be utilised to examine the submitted transactions, to ensure the validity of
transaction format/content.

Log extractor allows application providers to extract DApp usage information from
blockchain.

al. [11] introduce the three dimensions of governance: decision rights, accountability, and incentives, which are adopted
from IT governance. John and Pam [35] and Pelt et al. [14] both study on-chain and off-chain development processes.
Howell et al. [36] analyse the membership and transacting relationships. Werner et al. [37] develop a taxonomy for
platform governance in blockchain. Hofman et al. [15] propose an analytic framework regarding six aspects (i.e., why,
who, when, what, where, and how). However, these studies either give an abstract discussion on the development
process, or analyse coarse-grained governance layers in the blockchain ecosystem, and do not offer adequate technical
implementation of governance methods. Our work presents 14 architectural patterns regarding blockchain platform
lifecycle stages. The pattern language can provide a holistic guidance to practitioners on reusable governance solutions,
and trade-off analysis for the design of governance-driven blockchain systems.

3 Overview of Patterns for Blockchain Governance

We ﬁrst performed a systematic literature review (SLR). We analysed 37 primary studies with six research questions (i.e.
what, why, where, when, who, how) [5]. The extracted answers cover the following aspects of blockchain governance:
dimensions, motivations, objects, processes, stakeholders, and mechanisms. We also reviewed extant governance
frameworks and standards, including IT governance [6, 7], data governance [8, 9], OSS governance [38, 39], and
platform ecosystem governance [40]. The review process helped us identify the salient characteristics of blockchain
governance. We then proposed six high-level governance principles and a governance framework [21] designed from
the principles. The framework was evaluated by scrutinising the open websites and documents of ﬁve blockchain
platforms (i.e., Bitcoin, Ethereum, Dash, Tezos, and Hyperledger Fabric), to understand how blockchain governance is
realised in practice, and whether our principles are applied in real-world context.

4

A PREPRINT - SEPTEMBER 23, 2022

Table 2: Glossary for speciﬁc concepts.

Block height

The number of blocks preceding a speciﬁc block.

Blockchain address/account

Stakeholders’ on-chain identiﬁers.

Decentralised application
(DApp)

Delegated Proof of Stake
(DPoS)

Applications built on a decentralised network. A blockchain DApp consists of
multiple smart contracts and a user interface.

A consensus mechanism where users can vote on delegates. The selected delegate
can append a new block to the blockchain.

Security deposit

A speciﬁc number of blockchain tokens are locked for a certain period.

Token

Programmable digital assets in blockchain. In permissionless public blockchains,
tokens are issued as cryptocurrencies.

Transaction pool

Blockchain node’s memory pool, to temporarily store the submitted transactions.

The pattern language is derived from our previous literature review, and the experiences gained from developing
the governance framework. We explore more extant blockchain platforms, through reading the ofﬁcial websites and
documents available, to identify and validate the proposed patterns. Fig. 2 illustrates the lifecycle of a blockchain
platform. Each stage or stage transition in this lifecycle is associated with the patterns.

At the start of the lifecycle, before a blockchain platform is ofﬁcially deployed, the underlying infrastructure should
be decided. Sharded chain means that a blockchain is divided into multiple shards. Each shard can individually
process on-chain transactions. When a blockchain platform is in operation phase, scam list and token locker can restrict
stakeholders’ behaviour by imposing penalties. When emergencies occur, network freezer pauses on-chain activities
until the system is recovered via human interventions.

A blockchain platform needs upgrades and improvements, for instance, by ﬁxing software bugs or adding new function-
alities. A series of patterns can help ﬁnalise the improvement proposals. These include carbonvote, quadratic voting,
liquid democracy, benevolent dictatorship, cross-chain token voting, and protocol forking for upgrade implementation.
When the blockchain platform stops providing further services, a social contract can be deployed to select or announce
the candidate maintainer(s) of this blockchain.

When a blockchain transaction is generated, it must contain a digital signature of the corresponding user. The transaction
needs to be checked by transaction ﬁlter of a node, before it is stored in the node’s local transaction pool, and broadcast
to other nodes. Afterwards, the digital signature in transactions are veriﬁed by validators. Valid transactions are
collected into a block. The block is then appended to blockchain according to the employed consensus mechanism,
along with incentive mechanism to reward the block validator. A block and its contained transactions are regarded as
ofﬁcially recorded on-chain after X-conﬁrmation, which means that certain numbers of subsequent blocks are appended.
Stored transactions can be reviewed and analysed via log extractor. Finally, on-chain data can be migrated from one
blockchain instance to another via data migration patterns.

Please note that in this paper, we focus on 14 of the above patterns, as existing works already explored consensus
mechanism [29, 41], incentive allocation [21], X-conﬁrmation [22], and data migration [42]. Table 1 offers an overview
of the 14 patterns.

4 Pattern Language for Blockchain Governance

To describe each pattern, we adopt the extended pattern form introduced in [18]. It includes the pattern name, a short
summary, usage context, problem statement, discussion of forces, the solution and its consequences, and real-world
known uses of the pattern. Please note that applying the patterns may bring consequences additional to the forces.
Table 2 provides a glossary of speciﬁc concepts to help understand the pattern language.

4.1 Sharded Chain

Summary: A blockchain platform can be divided into multiple shards to process transactions in parallel.

Context: Normally, there is only one blockchain instance as the main network in a blockchain platform. All stakeholders
reference the same blockchain instance. All data are recorded in this instance.

5

A PREPRINT - SEPTEMBER 23, 2022

Problem: How can node operators handle a large number of transactions and be able to maintain an ever-growing
blockchain?

Forces:

• Scalability improvement. Blockchain’s scalability should be improved. A single blockchain instance limits the
scalability of the overall blockchain platform. Only one block is appended to the blockchain each round, based
on predeﬁned block size and interval.

• Cost reduction. The participating nodes need to maintain a replica of all historical ledger contents. The cost of

maintaining a blockchain node should be reduced.

Figure 3: Sharded chain.

Solution: Fig. 3 is a graphical representation of sharded chain. When developing a blockchain platform, the project
team needs to consider the decentralisation level, and determine the underlying infrastructure. Sharded chain refers to a
blockchain platform consisting of multiple blockchain instances as shards, where transaction validation, data storage,
and on-chain computation are processed in parallel. A node operator can maintain full node(s) for either a single shard
or multiple shards locally. Block validators are randomly assigned to different shards to generate and append new
blocks. In addition, the project team can implement main instance(s) acting as the coordinator(s) between shards. The
main instance(s) need to record the block information of all shards.

Consequences:

Beneﬁts:

• Scalability. The overall scalability is improved, as multiple shards can process transactions in parallel.

• Cost. For a single node operator, he/she only needs to maintain a node for one shard, instead of the historical

transactions for the whole blockchain. This can reduce the management overhead and cost of storage.

• Interoperability. The interoperability between different shards is achieved by cross-shard transactions, which

should be stored in both original and target shards.

Drawbacks:

• Security. A shard may be compromised when multiple malicious block validators are assigned to this shard.

This is known as 1% attack [43].

• Cost. Sharded chains may increase the cost of deployment, communication, and maintenance for cross-shard
nodes. Cross-shard nodes are responsible to maintain the ledger contents of multiple shards. There may be
redundant storage in cross-shard nodes, since cross-shard transactions need to be recorded by all relevant
shards.

Known uses:

• Ethereum1. Ethereum is undergoing an update where 64 shards will be introduced to improve scalability.
• NEAR2. NEAR aims to support cross-shard transactions. Block validators only need to focus on a single shard.

Sharding can lower the hardware requirements of nodes.

1https://www.ethereum.org/
2https://near.org/

6

Main instanceSharded chainsBlock validatorsA PREPRINT - SEPTEMBER 23, 2022

• Polkadot3. Polkadot deploys a ”relay chain” as the main blockchain instance, while the shards are called

”parachains”.

Related patterns:

• Consensus mechanism [29, 41]. Different consensus mechanisms can be employed in the multiple shards.

4.2 Scam List

Summary: The blockchain addresses of the entities who are deemed malicious are labelled, and listed to warn all
stakeholders.

Context: Blockchain provides a peer-to-peer platform, where any two stakeholders can directly interact with each other.
There is no authority to handle on-chain conﬂicts and even malicious activities.

Problem: How can a project team exclude malicious entities with suspicious on-chain activities from the platform?

Forces:

• Security. Stakeholders should be protected from on-chain frauds.

• Accountability guarantee. Attackers should be accountable for their malicious behaviours.

Solution: The project team of a blockchain platform can record the suspicious or veriﬁed malicious blockchain
addresses and DApps. This record can be either an on-chain smart contract, or an off-chain post on the platform’s
ofﬁcial website. The listed blockchain addresses are then labelled for being risky. Therefore, other stakeholders can
refer to this scam list, to avoid interacting with the recorded blockchain addresses.

Consequences:

Beneﬁts:

• Security. Stakeholders are warned that interacting with certain blockchain addresses may jeopardise their

business proﬁts due to potential fraud.

• Accountability. Blockchain addresses involved in on-chain scams are recorded.

Drawbacks:

• Security. Scam list is an ex-post measure where malicious blockchain addresses are reported and recorded

after the scams. The interests of certain stakeholders may have already been harmed.

• Accountability.

(i) Scammers may relate themselves to other ordinary blockchain addresses via a dust
attack [44]. Originally, dust attacks refer to sending a large numbers of transactions with a small cost, to affect
the performance of blockchain. In the case of scam detection, dust attacks can connect malicious addresses
with other ordinary addresses, which increases the difﬁculty of detecting the malicious addresses. (ii) In
permissionless blockchain platforms, it is hard to identify the malicious stakeholders in real-world due to the
inherent anonymity.

Known uses:

• Ethereum1. Ethereum discusses common scams to prevent serious risks in online posts.
• Dash4. Dash maintains a page in its ofﬁcial online documents, providing safety guidelines and listing the

known scams in Dash blockchain.

• Tezos5. The Tezos Foundation monitors the Tezos blockchain, and tracks malicious activities. The known

scams are listed on their ofﬁcial website.

3https://polkadot.network/
4https://www.dash.org/
5https://tezos.com/

7

A PREPRINT - SEPTEMBER 23, 2022

Related patterns:

• Token locker. In permissionless blockchains, the tokens of a black-listed blockchain addresses can be perma-

nently locked as a penalty.

• Log extractor. Suspicious blockchain addresses can be tagged and alarmed to all stakeholders after analysing

extracted logs.

4.3 Token Locker

Summary: A certain amount of blockchain tokens are locked for a speciﬁed time period, to secure the token holders’
behaviour.

Context: Permissionless blockchain platforms issue tokens which are valuable digital assets that enable token holders
to participate in important operational matters (e.g., voting).

Problem: How can a project team restrict token holders’ behaviour in such a way that they are prevented from carrying
out malicious attacks?

Forces:

• Security. A proper solution is required to impose restrictions on token holders’ behaviour.
• Flexible decision rights. Token holders may be interested in certain decision-makings, and request for relevant

decision rights.

• Fast monitoring. Operations of token holders should be monitored, and be responded to in a short amount of

time.

Solution: In permissionless blockchains, a token holder needs to lock certain amounts of tokens as a security deposit
when conducting speciﬁc activities, for instance, participating in a governance decision-making process. The locked
tokens cannot be used for other purposes, until the decision is ﬁnalised. Otherwise, the holder will lose the relevant
decision rights. Further, if fraud is detected in a decision-making process, the accountable blockchain addresses will be
banned for any on-chain transaction, and their tokens will be locked. In more serious cases, the locked tokens will be
burned (aka. destroyed), and cannot be restored.

Consequences:

Beneﬁts:

• Security. Malicious operations will lead to the loss of real money, which discourages token holders from

misbehaving when they are exercising their rights with tokens.

• Flexibility. Decision rights can be ﬂexibly granted to token holders who own and lock the required number of

tokens as a deposit.

• Fast monitoring. The lock, return, and destruction of tokens can be immediately processed according to token

holders’ behaviour.

Drawbacks:

• Security. Malicious attackers may not mind the loss of tokens. Their purpose is to disturb the blockchain.
• Centralisation. Holders possessing more tokens can have more decision rights.
• Deﬂation. Commonly, the maximum supply of tokens in permissionless blockchains is settled at the beginning
of the design and development. Burning tokens will reduce the circulating supply of tokens, and cause
deﬂation.

Known uses:

• Dash4. Node operators need to possess 1,000 Dash tokens to become a Masternode.
• Tezos5. Validating a block requires a certain amount of Tezos tokens, which can be retrieved after a predeﬁned

cycle (e.g., one year).

8

A PREPRINT - SEPTEMBER 23, 2022

• Baudlet et al. [45] propose a framework, in which node operators can run Masternodes by locking tokens for a

variable time period.

Related patterns:

• Scam list. The tokens of recorded addresses in a scam list can be locked and burned as a penalty.
• Carbonvote. In a carbonvote process, a token holder needs to keep their tokens in a blockchain address, which

will be counted as votes to ﬁnalise an improvement proposal.

• Consensus mechanism [41]. In certain consensus mechanisms (e.g., Proof-of-Stake), node operators need to

possess a certain amount of tokens, to participate in the election of block validators.

4.4 Network Freezer

Summary: The blockchain platform is frozen that all on-chain business is suspended.

Context: Emergency cases may risk the normal operation of blockchain.

Problem: How can a project team handle emergencies, and prevent the emergency situations from affecting the
blockchain?

Forces:

• Security. Blockchain and deployed smart contracts should be protected from malicious transactions.
• Fast monitoring. Malicious transactions should be immediately stopped.

(a) Terminating smart contract.

(b) Blocking Internet data
trafﬁc.

Figure 4: Network freezer.

Solution: Fig. 4 is a graphical representation of network freezer. Applying this pattern requires the interference of the
project team, or even regulators to suspend all business in the blockchain platform. This can be accomplished in two
manners. (i) As shown in Fig. 4 (a), each deployed smart contract should implement a function for ”emergency stop”,
which enables relevant stakeholders (e.g., the contract developer, regulators, and project team) to pause or terminate the
operation of this smart contract. (ii) Regulators can block the data trafﬁc of this blockchain platform via local Internet
providers, as illustrated in Fig. 4 (b). Nodes cannot broadcast transactions or blocks to each other, therefore, the whole
blockchain is frozen.

Consequences:

Beneﬁts:

• Security. Attacks towards a blockchain platform are suspended, as well as all other on-chain businesses. This

allows stakeholders to have enough time to ﬁnd the appropriate solutions.

• Fast monitoring. All on-chain businesses can be paused in a short amount of time.

9

Regulator …Function emergency stop (){...}Smart contractProject teamUser callRegulator A PREPRINT - SEPTEMBER 23, 2022

Drawbacks:

• Centralisation. This pattern deﬁnes privileged stakeholders, who are able to freeze the blockchain.

• Security. If privileged stakeholders are compromised, malicious stakeholders may launch denial of service

attacks.

• Cost. All other valid transactions are postponed, until the next human intervention to reactivate the blockchain.

Known uses:

• Hyperledger Fabric6. Smart contracts can be manually stopped, and removed from nodes.

• Developing plausible smart contracts and self-destruct functions in Ethereum are analysed in [25].

• Enforcing network restrictions is discussed in [13, 46]. This solution is viewed as a tough measure for extreme

cases.

Related patterns:

• Network freezer is not closely related to speciﬁc patterns. In general, freezing the network affects all on-chain

transactions, including the application of other patterns.

4.5 Carbonvote

Summary: Votes for improvement proposals are counted according to the tokens held by blockchain addresses.

Context: In permissionless blockchains, token holders need to vote for improvement proposals, by sending transactions
from their blockchain addresses, to determine the upgrade proposals of the blockchain platform.

Problem: Every blockchain user can possess multiple blockchain addresses to vote. Therefore, calculating the number
of voting addresses is unreliable. How can a project team cast a viable vote to ﬁnalise improvement proposals, when
counting heads (i.e. voted addresses) is not applicable?

Forces:

• Security. Improvement proposal votes should be protected from Sybil attack. In a Sybil attack, malicious

attackers may register multiple blockchain addresses and compromise the vote.

• Fairness guarantee. Improvement proposal votes should be fair that token holders are granted decision rights
according to their stakes in the blockchain. In permissionless blockchains, owning more tokens is considered
as having more stakes in the blockchain.

• Efﬁciency improvement. Differentiating valid and invalid votes may be tedious. Counting votes should be

efﬁcient to determine whether to accept or reject an improvement proposal.

Solution: Fig. 5 illustrates the sequence of carbonvote to address the above challenges. First, the project team submits
an improvement proposal, and starts a voting process. Let’s assume that a token holder has two blockchain addresses.
The token holder ﬁrst sends a transaction to vote for acceptance via address A. The blockchain platform will monitor
the tokens possessed by address A in real-time. The token holder can change his/her vote to another choice (rejection
in this example), by sending an additional transaction. Besides, he/she can transfer all tokens in address A to another
address owned by himself/herself (address B in this example). Therefore, address A will have no tokens counted as
votes. Finally, the choice with the most tokens will be accepted as the voting result.

Consequences:

Beneﬁts:

• Security. Carbonvote can prevent Sybil attack as additional blockchain addresses won’t be counted as votes.

Votes are cast according to the number of tokens instead of accounts.

6https://www.hyperledger.org/use/fabric

10

A PREPRINT - SEPTEMBER 23, 2022

Figure 5: Carbonvote.

• Fairness. Votes are allocated to users according to the tokens they possessed. Users with more tokens are
considered to have more contributions and stakes to the operation of a blockchain. Therefore, these users have
more decision rights (in the form of votes).

• Efﬁciency. The voting result can be efﬁciently calculated, as the blockchain monitors the tokens owned by

voted addresses in real-time.

Drawbacks:

• Security. The carbonvote process may be compromised by ﬂash loan attacks, where an attacker can borrow a

large amount of blockchain tokens for voting, and return the tokens when the vote ends.

• Centralisation. The majority of votes may be controlled by users who possess the most tokens. This may cause
plutocracy in permissionless blockchains where wealthy parties are centred with the most decision rights.

• Cost. Although voting does not consume tokens, users still need to pay fees for sending transactions to trigger

the votes.

Known uses:

• DAO hard fork7. The Ethereum DAO hard fork was ﬁnalised via carbonvote. Over 85% votes agreed to fork.
• EIP#1868. The acceptance of EIP#186 in Ethereum is decided via carbonvote.

Related patterns:

• Token locker. In a carbonvote process, token holders need to keep their tokens in a blockchain address as votes,

which is similar to locking tokens.

• Cross-chain token voting. Carbonvote can be integrated with cross-chain token voting to ﬁnalise on-chain

decision-makings.

4.6 Quadratic Voting

Summary: For a blockchain account, submitting n votes for an improvement proposal costs n2 tokens.

Context: In permissionless blockchains, token holders need to vote for improvement proposals, by sending transactions
with tokens from their blockchain accounts, which determines if a proposed upgrade/change is to be implemented.

Problem: How can a project team preserve a fair voting process where token holders can also express the strength of
their preferences (i.e., highly agreeing, highly disagreeing)?

Forces:

7https://ethereum.org/en/governance/
8https://github.com/ethereum/EIPs/issues/186

11

Project teamProject teamImprovement proposalImprovement proposalAddress AAddress AAddress BAddress Breturn voting resultsubmit proposalaccept proposalToken holderreject proposaltransfer tokenscount tokensA PREPRINT - SEPTEMBER 23, 2022

• Security. Improvement proposal votes should be protected from Sybil attack.
• Preference expression. Votes should express token holders’ stregnth of their preferecnes towards the choice of
accepting or not accepting an improvement proposal. The scheme of ”one person one vote” does not accurately
capture the preferences. For instnace, there may be many token holders expressing yes with low preference
strength, and few token holders expressing no with high preference strength.

• Fairness. In the scheme of ”one token one vote”, the one with the most tokens can dominate the voting process,
which is unfair to other token holders. The voting should be as fair as possible so all users can have some
inﬂuence in decisions.

Figure 6: Quadratic voting.

Solution: As depicted in Fig. 6, quadratic voting can help capture the preferences of token holders, while preventing
wealthier token holders from manipulating the voting process. After the project team submits an improvement proposal,
token holders can vote for its acceptance/rejection. In this voting scheme, tokens are consumed as funds for the
improvement proposal. For any blockchain account, the cost is calculated as follows:

number of tokens = (number of votes)2

As shown in the ﬁgure, token holder A only has 1 token, hence, it can only submit one vote for the improvement
proposal. Token holder B has n tokens, and it decides to submit 3 votes for the proposal. The votes will cost it 9 tokens.
The choice with the most votes will be ﬁnalised for further upgrade implementation.

Consequences:

Beneﬁts:

• Security. Sybil attack can be prevented, as token holders need to consume tokens to submit their votes.
• Preference. Each additional vote requires a quadratic increase in token consumption, which can indicate how

strongly token holders prefer their decisions.

• Fairness. The high cost of additional votes can reduce the impact from wealthier token holders, to provide a

fair voting process for other token holders.

Drawbacks:

• Fairness. Although fairness has been improved, richer participants still have more power than poorer ones.
• Cost. Finalising improvement proposals costs resources of token holders (e.g., real money in permissionless

blockchains).

Known uses:

• Gitcoin9. Gitcoin enables quadratic funding for public goods in the Ethereum ecosystem. Quadratic funding is
a variant of quadratic voting in the use case of individual provision of public goods. In quadratic funding, the
funding of a project is calculated as: (i) the square root of each funder’s contribution, (ii) sum up the square
roots, and (iii) calculate the square of the sum [47].

• Kickﬂow10. The Kickﬂow community can support projects on Tezos through quadratic funding.

9https://gitcoin.co/blog/
10https://kickflow.io/

12

Project teamProject teamToken holderA (1 token)Token holderA (1 token)Token holderB (n tokens)Token holderB (n tokens)return voting resultImprovement proposalImprovement proposalsubmit proposalsubmit 1 vote with 1 tokensubmit 3 votes with 9 tokensA PREPRINT - SEPTEMBER 23, 2022

• Pomelo11. Pomelo is an open-source crowdfunding platform based on EOS. It supports quadratic funding.

Related patterns:

• Cross-chain token voting. Quadratic voting can be integrated with cross-chain token voting to ﬁnalise on-chain

decision-makings.

4.7 Liquid Democracy

Summary: A stakeholder can delegate the voting rights to other stakeholders, and revoke the delegation to directly
vote for improvement proposals.

Context: In permissionless blockchains, stakeholders need to vote for improvement proposals to determine the upgrade
proposals of the blockchain platform.

Problem: If a stakeholder does not have the technical expertise of blockchain technology, how can he/she make a
responsible decision on proposal voting?

Forces:

• Participation rate improvement. The participation rate for ﬁnalising an improvement proposal should be
improved. Ordinary stakeholders may be reluctant to vote for improvement proposals, due to the lack of
professional knowledge of blockchain technology.

• Effectiveness improvement. Improvement proposals should be ﬁnalised effectively. Stakeholders may vote
when they do not fully understand the intentions of improvement proposals. This will affect the effectiveness
of ﬁnal results.

• Flexibility improvement. The voting rights should be ﬂexible. An inﬂexible voting process may cause the

waste of votes that that many stakeholders do not vote.

Figure 7: Liquid democracy.

Solution: As demonstrated in Fig. 7, liquid democracy allows stakeholders to transfer their voting rights to trusted
stakeholders. Speciﬁcally, stakeholder A ﬁrst delegates stakeholder B the voting rights for improvement proposals.
Subsequently, stakeholder B speciﬁes stakeholder C as the proxy for voting. In this regard, stakeholder C can submit
three votes for improvement proposal I including his/her own vote. For proposal II, stakeholder A has adequate
knowledge, and decides to vote on his/her own. He/she can revoke the voting rights from stakeholder B, and then make
a direct vote by himself/herself.

Consequences:

Beneﬁts:

• Participation rate. An entity can be delegated the voting rights from multiple stakeholders, who do not intend
to vote. The vote from this entity embodies the decisions of multiple stakeholders, hence, improves the
participation rate.

11https://pomelo.io/grants

13

StakeholderAStakeholderAStakeholderBStakeholderBStakeholderCStakeholderCImprovement proposal IImprovement proposal Ivoterevoke rightsdelegate voting rightsdelegate voting rightsImprovement proposal IIImprovement proposal IIrevoke voting rightsvoteA PREPRINT - SEPTEMBER 23, 2022

• Effectiveness. The voter is considered an expert in blockchain technology, hence he/she is delegated to vote.

He/she can make effective decisions on blockchain upgrade issues to a greater extent.

• Flexibility. Liquid democracy enables ﬂexible delegation and revocation of decision rights among different

stakeholders.

Drawbacks:

• Accountability. Liquid democracy complicates the accountability of decision-making process. All delegation

should be traceable and identiﬁable.

• Centralisation. Liquid Democracy may cause centralisation during a voting process, if multiple stakeholders

delegate the same voter.

Known uses:

• DFINITY 12. In DFINITY, liquid democracy is facilitated that a neuron holder can assign other neuron holders
as delegates. Note that a neuron is converted from a certain number of locked tokens. When the majority of
followee neurons make a particular vote, the governance canister (i.e., a special kind of smart contract for
governance issues) of follower neurons will automatically record the corresponding vote.

• BitShares13. BitShares deploys DPoS as the consensus mechanism.
• Compound14. Compound allows token owners to delegate their voting rights to other stakeholders.

Related patterns:

• Benevolent dictatorship. Benevolent dictatorship is similar to liquid democracy when other stakeholders

delegate their decision rights to the core developers.

• Consensus mechanism [41]. Delegated Proof-of-Stake (DPoS) can be considered a variant of liquid democracy.

Token holders are able to vote for delegates, who then can validate and append new blocks.

4.8 Benevolent Dictatorship

Summary: A subset of developers of a blockchain platform have additional rights to ﬁnalise governance-related
decisions.

Context: There are few stakeholders at the initial phases of a blockchain lifecycle.

Problem: How governance decisions are ﬁnalised with a small community?

Forces:

• Upgradability guarantee. Blockchain needs upgrades to ﬁx software bugs, and implement new functionalities.
• Effectiveness improvement. Governance decisions should be ﬁnalised effectively. When the platform is newly

deployed, most stakeholders may not have an adequate technical background of blockchain.

• Quick decision. Certain governance decisions need to be ﬁnalised within a short time.

Solution: Benevolent dictatorship refers to the situation where the founder or core developers of a blockchain platform
are granted great power. They can persuade others on signiﬁcant governance issues. Other stakeholders trust their
decisions for two main reasons: (i) the ﬁnalised governance choices can improve the blockchain, based on the expertise
of technical meritocracy; (ii) the decisions are for the collective beneﬁts of whole community, instead of personal
interests of a small subset of stakeholders, as the blockchain platform needs to attract more users to survive (especially
for permissionless ones). This pattern will remain in permissioned blockchains, as there are always authorities ﬁnalising
governance decisions. While in permissionless blockchain platforms, it will be gradually replaced by more democratic
decision-making patterns when the community becomes mature.

12https://dfinity.org/
13https://bitshares.build/
14https://compound.finance/

14

A PREPRINT - SEPTEMBER 23, 2022

Consequences:

Beneﬁts:

• Upgradability. The blockchain platform is upgraded according to the decisions made by benevolent dictators.
• Effectiveness. Benevolent dictators can make effective governance decisions for a blockchain platform based

on their specialised knowledge.

• Quick decision. A governance decision can be ﬁnalised within a short time, as there is usually only one or at

most several benevolent dictators in a blockchain community.

Drawbacks:

• Centralisation. Most decision rights are centred on the benevolent dictators, which indicates centralisation

when a blockchain is newly deployed.

Known uses:

• Bitcoin15. Satoshi Nakamoto was regarded as the benevolent dictator of the Bitcoin ecosystem before his/her

retirement.

• Ethereum1. The co-founder of Ethereum, Vitalik Buterin, is still active in governance-related issues of the

Ethereum ecosystem.

• Tezos5. Tezos foundation has veto power for the ﬁrst twelve months after Tezos’s deployment.

Related patterns:

• Liquid democracy. Benevolent dictatorship can be viewed as a variant of liquid democracy that other

stakeholders delegate their decision rights to the core developers.

4.9 Cross-Chain Token Voting

Summary: Speciﬁc token holders in a blockchain platform can vote for governance-related issues of another blockchain
platform.

Context: Newly launched permissionless blockchain platforms may have few stakeholders to participate in the
governance decision-making process.

Problem: How can a project team improve the participation rate, and ensure the security of governance decision-
makings in permissionless blockchain platforms with a small community?

Forces:

• Participation rate improvement. The participation rate should be improved. There might be few users in a

newly deployed blockchain to vote for improvement proposals.

• Security. Newly launched blockchain platforms should be protected from Sybil attack.

Solution: Fig. 8 depicts how to ﬁnalise a governance decision for a new blockchain platform, with the aid of other
established blockchain platforms. After blockchain platform A is ofﬁcially in use, its project team then issues tokens
(in the name of platform A) on other mature permissionless blockchain platforms (platform B in this case). Users of
platform B may invest the tokens issued by platform A. In this case, these users are considered as the token holders of
platform A, even though they may not directly use platform A. These users of platform B are consequently eligible
to participate in platform A’s decision-making process. Speciﬁcally, when the project team submits an improvement
proposal in platform A, it should develop and deploy smart contracts in platform B, to cast a vote for relevant token
holders. The holders of platform A’s tokens can then submit their votes for the proposal via the deployed smart contract
in platform B. The result is returned to platform A’s project team when the vote ends. This pattern can be considered
as developers of the original blockchain platform build a decentralised application on other blockchain platforms for
voting.

15https://bitcoin.org/en/

15

A PREPRINT - SEPTEMBER 23, 2022

Figure 8: Cross-chain token voting.

Consequences:

Beneﬁts:

• Participation rate. Stakeholders from other blockchain platforms can possess tokens of the new blockchain.

Subsequently, they are eligible to participate in the decision-making process.

• Security. The actual voting process happens in the selected permissionless blockchain platforms. Hence, the
security is anchored to these platforms. For instance, token holders still can use their platform’s accounts to
vote. Their platforms may apply speciﬁc security measures.

• Interoperability. Improvement proposals of the original blockchain platforms are ﬁnalised via the interopera-

tions between multiple platforms.

Drawbacks:

• Security. Attacks on target blockchain platforms may affect the voting results of the original blockchain.
• Cost. There are mainly two types of cost when applying this pattern. (i) The project team needs to distribute
tokens, and deploys smart contracts in other blockchain platforms, which may cost real money. (ii) The project
team needs to offer incentives, attracting individuals to become token holders.

Known uses:

• MULTAV [48]. MULTAV is a framework deployed in IoTeX blockchain platform. IoTeX tokens are issued
in Ethereum. Consequently, the IoTeX token holders in Ethereum can participate in the election of block
producers in IoTeX.

• AAVE16. AAVE supports cross-chain governance between Ethereum and Polygon.
• StakerDAO17. StakerDAO provides a protocol for cross-chain governance decisions. It connects multiple

blockchain platforms such as Ethereum, Tezos, and Polkadot.

Related patterns:

• Carbonvote. Carbonvote can be integrated with cross-chain token voting to on-chain decision-makings.
• Quadratic voting. Quadratic voting can be integrated with cross-chain token voting to on-chain decision-

makings.

4.10 Protocol Forking

Summary: The software upgrades of a blockchain platform are implemented as forks of the blockchain.

16https://aave.com/
17https://www.stakerdao.com/

16

Project teamProject teamToken holderToken holderBlockchain platform BBlockchain platform BBlockchain platform ABlockchain platform Adeploy voting smart contractsubmit proposaldeploy blockchaindistribute tokens of platform Avote for proposalreturn voting resultobtain tokens of platform Areturn tokens of platform AA PREPRINT - SEPTEMBER 23, 2022

Context: After a blockchain platform is deployed, developers upgrade the blockchain to meet new requirements.

Problem: The code of a blockchain platform is stand-alone. Any changes may affect the historical ledger contents.
How can developers implement upgrades to a blockchain platform without affecting the historical ledger contents?

Forces:

• Upgradability guarantee. Blockchain needs to be upgraded to ﬁx software bugs, and implement new function-

alities.

• Adaptability improvement. Blockchain needs to adapt to the varying requirements of diverse application

scenarios.

• Blockchain property preservation. The fundamental properties of a blockchain, e.g., immutability, must not be

affected by software upgrades.

(a) Soft fork.

(b) Hard fork.

Figure 9: Protocol forking.

Solution: Fig. 9 is a graphical representation of protocol forking, which can be applied to upgrade a deployed
blockchain. The upgrades and evolution require a series of formalised development procedures. Upgrades accepted by
the community are implemented and released as new versions via protocol forking. Speciﬁcally, there exist two types
of upgrades in blockchain: soft fork and hard fork. Soft forks mean backward-compatible upgrades, which require
the majority of node operators to install the latest version of a blockchain platform. After soft fork, appending blocks
need to adhere to both new and old on-chain protocols. Blocks that violate the new protocol will be abandoned by
the platform (as the dotted block N+2 in Fig. 9 (a)). On the contrary, hard forks refer to the backward-incompatible
upgrades, which lead to permanent divergences of a blockchain. After hard fork, a blockchain is split into two separate
instances. One instance employs the old protocol while the other one follows new rules. The two instances will operate
as two distinct blockchain platforms, as illustrated in Fig. 9 (b). Please note that protocol forking in the context of
blockchain governance refers to intentional software upgrades. Accidental forkings where multiple block validators
intend to append new blocks at the same time are out of the scope of this paper.

Consequences:

Beneﬁts:

• Adaptability. Protocol forking can improve the adaptability of a blockchain, regarding the varying requirements

in diverse applications.

• Upgradability. The project team can upgrade a blockchain platform via forking to implement new functionali-

ties.

• Blockchain property preservation. Forking is implemented at a certain block height. All preceding blocks of
the forking block height are retained in the upgrade. Therefore, the fundamental properties of this blockchain
are preserved.

Drawbacks:

• Data integrity. Hard fork may roll back certain blockchain ledger contents. All blocks succeeding the forking
block height need to be discarded. In this case, data integrity is compromised. For example, a blockchain has
99 valid blocks. The project team decides to conduct a hard fork on block 80. Block 81 to 99 will then be
discarded, and the next block of the forked blockchain will be new block 81.

• Volatility. Hard fork may split the overall blockchain ecosystem. Stakeholders need to choose which instance

they will continue to use.

17

Block NGenesis blockBlock N+1...soft forkBlock N+2Block N+2Block N+3Block NGenesis blockBlock N+1...hard forkBlock N+2Block N+2Block N+3Block N+3A PREPRINT - SEPTEMBER 23, 2022

• Cost. (i) Rigorous analysis of stakeholders is needed to conduct forking; (ii) Hard fork is conducted at a
speciﬁc block height, which means that the generation, broadcast, and validation of all subsequent blocks may
be in vain.

Known uses:

• Bitcoin15. The Bitcoin community could not reach agreements on intended upgrades. Hence, the platform was

forked into two distinct blockchain platforms: Bitcoin and Bitcoin Cash.

• Ethereum1. Ethereum conducted a hard fork to reverse the impacted transactions of ”DAO” attack. However,
part of the community refused to implement the fork, and insisted to stay on the previous version, which is
subsequently known as ”Ethereum Classic”.

• Steem18. Hive is a hard fork of Steem blockchain. It was implemented when TRON announced the takeover of

Steem.

Related patterns:

• Protocol forking is dependent on carbonvote, quadratic voting, liquid democracy, benevolent dictatorship, and

cross-chain token voting for the acceptance of improvement proposals.

4.11 Social Contract

Summary: A social contract is deployed to select the future maintainers of a blockchain platform.

Context: The project team maintains the daily operation of a blockchain platform, and modiﬁcations to the platform.

Problem: The project team may lose funding, and stop providing services to the blockchain platform. How the
blockchain is maintained afterwards?

Forces:

• Maintainability guarantee. A blockchain platform must continually have regular maintenance for normal

operation.

• Security. The subsequent maintainer(s) of a blockchain should be approved by the original project team.

• Transparency guarantee. In permissionless blockchains, the transfer of maintenance rights and responsibilities

should be transparent to all stakeholders, to receive their recognition.

Solution: The blockchain project team can deploy a social contract, in which the requirements of how an entity
becomes the eligible candidate for maintaining the blockchain platform are speciﬁed. The contract can be deployed
either on-chain or off-chain, as long as it is open to all stakeholders of the platform. When the project team fails to
continually provide services, the social contract comes into effect to select the candidate maintainer(s). However, if no
eligible candidate is found, the blockchain platform may have to terminate.

Consequences:

Beneﬁts:

• Maintainability. When the original project team quits, the blockchain platform can be maintained by the

selected candidate.

• Security. The selection rules of candidate maintainer(s) are deﬁned by the original project team. Therefore, the

eligible maintainers are regarded as approved by the project team.

• Transparency. The social contract is open to the whole community. Therefore, the selection of candidates is

monitored by all stakeholders.

Drawbacks:

18https://steem.com/

18

A PREPRINT - SEPTEMBER 23, 2022

• Centralisation. The selected candidate is granted decision rights of the original project team, which may
cause centralisation in the future governance process when the candidate is an individual instead of a group of
people.

Known uses:

• Ethereum1. The Ethereum project team elaborates a social contract in the Ethereum whitepaper: anyone
possessing a certain number of ether tokens (60,102,216 * (1.198 + 0.26 * n), where n is the number of years
after the genesis block), has the right to develop a future candidate version of Ethereum.

• Steem18. TRON announced its takeover of Steem in 2020. Afterwards, TRON’s team became the maintenance

team of Steem.

• Diem19. Before the ofﬁcial deployment, Diem was sold to Silvergate. Hence, the maintenance team of Diem

changed accordingly.

Related patterns:

• Social contract is considered related to all other patterns in this study that the contract is leveraged to select new
candidate(s) as the blockchain maintainer(s), and all other patterns may be adjusted and reapplied afterwards.

4.12 Digital Signature

Summary: Transactions are digitally signed by users, to identify the transaction sources. The digital signature can be
veriﬁed by other stakeholders.

Context: Individuals generate and send transactions to blockchain to use the services.

Problem: A blockchain platform consists of multiple users and their transactions. How can stakeholders validate the
origin of a transaction? Further, a transaction is broadcast by nodes. How can stakeholders ensure that a transaction is
not modiﬁed during transmission?

Forces:

• Data integrity protection. Block validators should be aware of whether a transaction has been altered by

unauthorised entities.

• Accountability guarantee. Users should be identiﬁable and accountable as the origin of transactions. They

need to take responsibility for the submitted transactions.

• Non-repudiation guarantee. A user cannot deny that he/she has sent speciﬁc transactions to blockchain, to

avoid their responsibility for the transactions.

Solution: A simpliﬁed digital signature process adopted from [49] is depicted in Fig. 10. When a user joins a blockchain
platform, the underlying decentralised public key infrastructure (DPKI) distributes a key pair to the user. The private key
is kept by the user himself/herself, while the public key is transparent to all other stakeholders. When the user generates
transactions, he/she should sign the transactions before sending them to blockchain. The signature is generated by
hashing the original contents, and encrypting the hash value via user’s private key. The submitted transactions are
broadcast across the blockchain network. Subsequently, a block validator can verify whether the transaction is valid via
the signature. The validator can hash the transaction contents, and decrypt the signature using user’s public key. The
obtained hash value is then compared with the generated hash value, to check whether the transaction is modiﬁed. Valid
transactions will be stored in a block and appended to blockchain, while invalid transactions are denied and discarded.

Consequences:

Beneﬁts:

• Data integrity. The integrity of transaction contents is protected by the employed hashing algorithm. Any

revision to original contents will result in a different hash value, hence, veriﬁcation failure.

19https://www.diem.com/en-us/

19

A PREPRINT - SEPTEMBER 23, 2022

Figure 10: Digital signature.

• Accountability. Digital signature can help trace the accountable individuals in real-world in permissioned

blockchains, and responsible blockchain addresses in permissionless blockchains.

• Non-repudiation. A user cannot deny sending particular transactions as he/she must sign before submitting.

Drawbacks:

• Accountability. Although transactions are digitally signed by users, it is still hard to identify accountable
real-world identities for illegal behaviours, due to the inherent anonymity in permissionless blockchains. There
is no mapping between users’ real-world identities and on-chain public keys.

• Security. If the private key is lost/compromised, a user then loses control of the corresponding public key. The

attacker can forge blockchain transactions using the compromised private key.

Known uses: This pattern is universally utilised in existing blockchain platforms, e.g., Ethereum1, Bitcoin15, and
Corda20, etc. A user needs to set up a password, which is used to generate the key pair. Each transaction is signed by
the private key, and can be veriﬁed using the corresponding blockchain address (public key).

Related patterns:

• Transaction ﬁlter. An unsigned transaction should be rejected by the ﬁlter.
• Key management [31]. The key management patterns can assist users to protect private keys.

4.13 Transaction Filter

Summary: A ﬁlter can be utilised to examine the submitted transactions, to ensure the validity of transaction
format/content.

Context: Transactions are the data entries of blockchain. Individuals use blockchain services via transactions.

Problem: How can the platform ensure that a submitted transaction can engage in the subsequent validation process?

Forces:

• Usability guarantee. A transaction should meet the format/content requirements before being stored in the

transaction pool and broadcast around network.

20https://www.corda.net/

20

Block validatorBlock validatorBlockchainBlockchainbroadcast transactionjoin blockchaindistribute key pairsend transactionverify signatureUserUsergenerate and sign transaction[signature is valid][else]deny invalid transactionappend valid transactionAltAltA PREPRINT - SEPTEMBER 23, 2022

• Security. Avoid a malicious user from sending unauthorised or harmful information to blockchain. Speciﬁcally,
in a permissioned blockchain for a speciﬁc use, irrelevant data should not be stored on-chain. For instance, in
a blockchain-based supply chain application [50], a freight yard examiner should upload only freight yard
examination results. Other information is unauthorised.

Figure 11: Transaction ﬁlter.

Solution: As shown in Fig. 11, a transaction ﬁlter can be deployed by the blockchain project team. When users generate
and send transactions to blockchain, the ﬁlter checks the format and the carried contents of received transactions based
on predeﬁned settings. Only the valid transactions can be stored in a node’s transaction pool for the subsequent process,
while others are rejected and removed from blockchain.

Consequences:

Beneﬁts:

• Usability. Invalid transactions are rejected, which ensures all accepted transactions are usable for the subsequent

broadcast and validation process.

• Security. Transaction ﬁlter can detect whether there is unauthorised or harmful information in a transaction.

Invalid transactions are rejected from being stored on blockchain.

• Performance. Transaction ﬁlter removes invalid transactions from blockchain, which can facilitate the

subsequent transaction validation process.

Drawbacks:

• Security. Malicious users may send the hash values or encrypted text of illegal information to blockchain.
It is hard to detect this type of harmful information. Consequently, such information may still be stored in
blockchain (in the form of hash value or encrypted text), although it is not allowed.

• Privacy. Individuals’ privacy may be leaked when examining transactions. This may be impacted by applying

other techniques such as data mining.

Known uses:

• Many blockchain platforms (e.g., Ethereum1, Bitcoin15, and Hyperledger Indy21) have their own deﬁnition

and setting of transaction format.

• IBM22. IBM pinpointed that when ﬁltering identical and similar transactions, only state changes are sent to

blockchain to reduce blockchain trafﬁc.

• MultiChain23. MultiChain deploys Smart Filter, which enables custom transactions and data rules via checking

the inputs, outputs, and metadata of transactions.

21https://www.hyperledger.org/use/hyperledger-indy
22https://www.ibm.com/docs/en/wip-bs?topic=SSCG66/iot-blockchain/developing/event_filtering.html
23https://www.multichain.com/

21

Project teamProject teamUserUserTransaction poolTransaction poolTransaction filterTransaction filterexamine transaction format/contentsend valid transactionsend transactiondeploy  filterAltAlt[transaction is valid][else]reject invalid transactionA PREPRINT - SEPTEMBER 23, 2022

Related patterns:

• Digital signature. An unsigned transaction should be rejected by the ﬁlter.

• Data migration [42]. If malicious information is stored on-chain, data migration via hard fork can be conducted

to reverse the relevant transactions.

4.14 Log Extractor

Summary: Log extractor allows application providers to extract DApp usage information from blockchain.

Context: Application providers develop DApps and provide different functionalities through smart contracts, while
users interact with DApps by sending transactions.

Problem: How can application providers understand the actual usage of a DApp (i.e., when, where, and under what
circumstances the DApp is used by whom)?

Forces:

• Functional suitability guarantee. Application providers need to ensure that the actual usage of a DApp is as

the intended usage to provide complete, correct, and appropriate services.

• Adaptability improvement. Application providers need to understand and analyse the usage of DApp, to

perform suitable adaptations.

• Accountability guarantee. Application providers need to know who are using the deployed DApp and related

usage information, to trace accountable user for exceptions.

Figure 12: Log extractor.

Solution: Fig. 12 depicts how can application providers obtain the logs of a DApp via a log extractor. After a DApp is
deployed on blockchain, individuals can use it via transactions. For speciﬁc operations, the DApp can record the events
according to codiﬁed rules, which will provide usage logs to application providers. Providers can build up the pipeline
in the log extractor, which is then validated to ensure a correct format of usage information. The extractor is connected
to blockchain, and extracts target event logs block by block. The extracted data is then transformed, and returned to
application providers for further analysis.

Consequences:

Beneﬁts:

• Functional suitability. Through the extracted logs, application providers can learn how the DApp is operated,

and compare the actual usage with intended functionalities.

22

Application providerApplication providerUserUserDAppDAppLog extractorLog extractoruse DAppspecify extraction pipelineextract loginformationdeploy extractordevelop DApplog eventreturn extracted datavalidate specification return logA PREPRINT - SEPTEMBER 23, 2022

• Adaptability. According to the actual usage logs, application providers can analyse and decide whether the

DApp should adapt to new requirements.

• Accountability. Extracted logs record who conduct certain operations to the DApp, which can be used to

identify accountable users.

Drawbacks:

• Privacy. In permissionless blockchains, on-chain events are transparent, and can be extracted by all stakehold-

ers. This may leak the usage information of DApps.

Known uses:

• Blockchain Logging Framework [51, 52]. Researchers have applied process mining techniques to extract data

from blockchain. Currently, the proposed framework supports Ethereum and Hyperledger.

• BlockSLaaS [53]. BlockSLaaS can provide logs to cloud forensic investigators for forensic investigation in

cloud computing.

• BlockStore [54]. BlockStore can assign storage to renters. The storage ownership is logged in blockchain,

where users can extract and verify.

Related patterns:

• Scam list. Suspicious blockchain addresses can be tagged and alarmed to all stakeholders after analysing

extracted logs.

5 Conclusion

Blockchain governance is signiﬁcant to preserve software qualities, to provide a trustworthy blockchain ecosystem
to the community. In this study, we present 14 architectural patterns for the design of governance-driven blockchain
systems. This pattern language can provide guidance for practitioners to perform blockchain governance.

In addition to the patterns analysed in this paper, further research can explore how existing patterns are related to
blockchain governance. For instance, data migration patterns for the removal of on-chain data [42], patterns for
blockchain-based applications [22], and different consensus mechanisms[29, 41]. Besides, we plan to explore the
architecture decisions that are related to blockchain governance.

Acknowledgments

We thank Professor Eduardo Fernandez for the helpful comments and guidance in the shepherding process.

References

[1] F. Tschorsch and B. Scheuermann, “Bitcoin and beyond: A technical survey on decentralized digital currencies,”

IEEE Communications Surveys & Tutorials, vol. 18, no. 3, p. 464, 2016.

[2] A. Bratanova et al., “Blockchain 2030: A look at the future of blockchain in Australia,” Data61, CSIRO,
Brisbane, Australia, Tech. Rep., Apr. 2019. [Online]. Available: https://www.researchgate.net/publication/
332298704 Blockchain 2030 A Look at the Future of Blockchain in Australia

[3] N. Atzei, M. Bartoletti, and T. Cimoli, “A survey of attacks on ethereum smart contracts (sok),” in Principles of
Security and Trust, M. Maffei and M. Ryan, Eds. Berlin, Heidelberg: Springer Berlin Heidelberg, 2017, pp.
164–186.

[4] P. De Filippi and B. Loveluck, “The invisible politics of bitcoin: governance crisis of a decentralized infrastructure,”

Internet Policy Review, vol. 5, no. 4, 2016.

[5] Y. Liu, Q. Lu, L. Zhu, H.-Y. Paik, and M. Staples, “A systematic literature review on blockchain governance,”

2021.

[6] P. Weill and J. W. Ross, “It governance on one page,” Available at SSRN 664612, 2004.
[7] S. Cobit, “A business framework for the governance and management of enterprise it,” Rolling Meadows, 2012.

23

A PREPRINT - SEPTEMBER 23, 2022

[8] C. Ballard, J. Baldwin, A. Baryudin, G. Brunell, C. Giardina, M. Haber, E. A. O’neill, S. Shah et al., IBM

information governance solutions.

IBM Redbooks, 2014.

[9] “Information technology – governance of IT – governance of data – part 1: Application of ISO/IEC 38500 to the
governance of data,” International Organization for Standardization, Standard ISO/IEC 38505-1:2017, 2017.
[Online]. Available: https://www.iso.org/standard/56639.html

[10] Z. Bao, K. Wang, and W. Zhang, “An auditable and secure model for permissioned blockchain,” in Proceedings of
the 2019 International Electronics Communication Conference, ser. IECC ’19. New York, NY, USA: Association
for Computing Machinery, 2019, p. 139–145. [Online]. Available: https://doi.org/10.1145/3343147.3343170
[11] R. Beck, C. M¨uller-Bloch, and J. L. King, “Governance in the blockchain economy: A framework and research

agenda,” Journal of the Association for Information Systems, vol. 19, no. 10, p. 1, 2018.

[12] H. Nabilou, “Bitcoin governance as a decentralized ﬁnancial market infrastructure,” Stanford Journal of Blockchain

Law & Policy, vol. 4, p. 1, 2020.

[13] P. Paech, “The governance of blockchain ﬁnancial networks,” The Modern Law Review, vol. 80, no. 6, pp.

1073–1110, 2017.

[14] R. van Pelt, S. Jansen, D. Baars, and S. Overbeek, “Deﬁning blockchain governance: A framework for analysis

and comparison,” Information Systems Management, vol. 38, no. 1, pp. 21–41, 2021.

[15] D. Hofman, Q. DuPont, A. Walch, and I. Beschastnikh, “Blockchain governance: De facto (x) or designed?” in

Building Decentralized Trust. Springer, 2021, pp. 21–33.

[16] Dash, “Dash whitepaper,” https://github.com/dashpay/dash/wiki/Whitepaper, 2018, accessed 26-May-2022.
[17] Tezos, “Tezos whitepaper,” https://wiki.tezosagora.org/whitepaper, 2021, accessed 26-May-2022.
[18] G. Meszaros and J. Doble, Pattern languages of program design 3. Addison-Wesley Longman Publishing Co.,

Inc., 1997, p. 529–574.

[19] S. Nakamoto, “Bitcoin: A peer-to-peer electronic cash system,” https://bitcoin.org/bitcoin.pdf, 2008, accessed

26-May-2022.

[20] S. Omohundro, “Cryptocurrencies, smart contracts, and artiﬁcial intelligence,” AI Matters, vol. 1, no. 2, pp.

19–21, Dec. 2014. [Online]. Available: http://doi.acm.org/10.1145/2685328.2685334

[21] Y. Liu, Q. Lu, G. Yu, H.-Y. Paik,

and L. Zhu,

A comprehensive framework,” Information Systems, p. 102090, 2022.
//www.sciencedirect.com/science/article/pii/S0306437922000758

“Deﬁning blockchain governance principles:
https:

[Online]. Available:

[22] X. Xu, C. Pautasso, L. Zhu, Q. Lu, and I. Weber, “A pattern collection for blockchain-based applications,” in 23rd

European Conf. on Pattern Languages of Programs, 2018, pp. 1–20.

[23] R. M¨uhlberger, S. Bachhofner, E. Castell´o Ferrer, C. Di Ciccio, I. Weber, M. W¨ohrer, and U. Zdun, “Foundational
oracle patterns: Connecting blockchain to the off-chain world,” in Business Process Management: Blockchain and
Robotic Process Automation Forum, A. Asatiani, J. M. Garc´ıa, N. Helander, A. Jim´enez-Ram´ırez, A. Koschmider,
J. Mendling, G. Meroni, and H. A. Reijers, Eds. Cham: Springer International Publishing, 2020, pp. 35–51.

[24] J. Eberhardt and S. Tai, “On or off the blockchain? Insights on off-chaining computation and data,” in European

Conf. on Service-Oriented and Cloud Computing. Springer, 2017, pp. 3–15.

[25] M. Wohrer and U. Zdun, “Smart contracts: Security patterns in the Ethereum ecosystem and Solidity,” in 2018 Int.

Workshop on Blockchain Oriented Software Engineering (IWBOSE).

IEEE, 2018, pp. 2–8.

[26] P. Zhang, J. White, D. C. Schmidt, and G. Lenz, “Applying software patterns to address interoperability in

blockchain-based healthcare apps,” arXiv preprint arXiv:1706.03700, 2017.

[27] M. Bartoletti and L. Pompianu, “An empirical analysis of smart contracts: Platforms, applications, and design

patterns,” in Int. Conf. on Financial Cryptography and Data Security. Springer, 2017, pp. 494–509.

[28] M. W¨ohrer and U. Zdun, “Design patterns for smart contracts in the ethereum ecosystem,” in 2018 IEEE
International Conference on Internet of Things (iThings) and IEEE Green Computing and Communications
(GreenCom) and IEEE Cyber, Physical and Social Computing (CPSCom) and IEEE Smart Data (SmartData),
2018, pp. 1513–1520.

[29] Z. ul Abadin and M. Syed, “A pattern for proof of work consensus algorithm in blockchain,” in 26th European
Conference on Pattern Languages of Programs, ser. EuroPLoP’21. New York, NY, USA: Association for
Computing Machinery, 2021. [Online]. Available: https://doi.org/10.1145/3489449.3489994

[30] Y. Liu, Q. Lu, X. Xu, L. Zhu, and H. Yao, “Applying design patterns in smart contracts,” in Blockchain – ICBC

2018, S. Chen, H. Wang, and L.-J. Zhang, Eds. Cham: Springer International Publishing, 2018, pp. 92–106.

24

A PREPRINT - SEPTEMBER 23, 2022

[31] Y. Liu, Q. Lu, H.-Y. Paik, and X. Xu, “Design patterns for blockchain-based self-sovereign identity,” in 25th

European Conf. on Pattern Languages of Programs (EuroPLoP’20), 2020.

[32] Q. Lu, X. Xu, H. D. Bandara, S. Chen, and L. Zhu, “Patterns for blockchain-based payment applications,” in 26th
European Conference on Pattern Languages of Programs, ser. EuroPLoP’21. New York, NY, USA: Association
for Computing Machinery, 2021.

[33] P. F. Katina, C. B. Keating, J. A. Sisti, and A. V. Gheorghe, “Blockchain governance,” International Journal of

Critical Infrastructures, vol. 15, no. 2, pp. 121–135, 2019.

[34] D. W. Allen and C. Berg, “Blockchain governance: What we can learn from the economics of corporate

governance,” The Journal of The British Blockchain Association, p. 12455, 2020.

[35] T. John and M. Pam, “Complex adaptive blockchain governance,” in MATEC Web of Conferences, vol. 223. EDP

Sciences, 2018, p. 01010.

[36] B. E. Howell, P. H. Potgieter, B. M. Sadowski et al., “Governance of blockchain and distributed ledger technol-
ogy projects,” in 2nd Europe–Middle East–North African Regional ITS Conference, Aswan 2019: Leveraging
Technologies For Growth, no. 201737.

International Telecommunications Society (ITS), 2019.

[37] J. Werner, S. Frost, and R. Zarnekow, “Towards a taxonomy for governance mechanisms of blockchain-based

platforms,” in Proceedings of the 28th European Conference on Information Systems (ECIS), 2020.

[38] S. O’mahony and F. Ferraro, “The emergence of governance in an open source community,” Academy of

Management Journal, vol. 50, no. 5, pp. 1079–1106, 2007.

[39] P. B. De Laat, “Governance of open source software: state of the art,” Journal of Management & Governance,

vol. 11, no. 2, pp. 165–177, 2007.

[40] A. Tiwana, B. Konsynski, and A. Bush, “Platform evolution: coevolution of platform architecture, governance,
and environmental dynamics (research commentary),” Information Systems Research, vol. 21, no. 4, pp. 675–687,
2010.

[41] W. Wang, D. T. Hoang, P. Hu, Z. Xiong, D. Niyato, P. Wang, Y. Wen, and D. I. Kim, “A survey on consensus
mechanisms and mining strategy management in blockchain networks,” IEEE Access, vol. 7, pp. 22 328–22 370,
2019.

[42] H. D. Bandara, X. Xu, and I. Weber, “Patterns for blockchain data migration,” in Proceedings of the European
Conference on Pattern Languages of Programs 2020, ser. EuroPLoP ’20. New York, NY, USA: Association for
Computing Machinery, 2020. [Online]. Available: https://doi.org/10.1145/3424771.3424796

[43] H.-W. Wang,

“Ethereum sharding:

Overview and ﬁnality,”

https://medium.com/@icebearhww/

ethereum-sharding-and-ﬁnality-65248951f649, 2017, accessed 26-May-2022.

[44] D. Bradbury, “The problem with bitcoin,” Computer Fraud & Security, vol. 2013, no. 11, pp. 5–8, 2013. [Online].

Available: https://www.sciencedirect.com/science/article/pii/S1361372313701015

[45] M. Baudlet, F. Doudou, Y. Taenaka, and Y. Kadobayashi, “The best of both worlds: A new composite framework
leveraging pos and pow for blockchain security and governance,” in 2020 2nd Conference on Blockchain Research
Applications for Innovative Networks and Services (BRAINS), 2020, pp. 17–24.

[46] J. Ellul, J. Galea, M. Ganado, S. Mccarthy, and G. J. Pace, “Regulating blockchain, dlt and smart contracts: a

technology regulator’s perspective,” in ERA Forum, vol. 21, no. 2. Springer, 2020, pp. 209–220.

[47] V. Buterin, Z. Hitzig, and E. G. Weyl, “Liberal radicalism: a ﬂexible design for philanthropic matching funds,”

Available at SSRN 3243656, 2018.

[48] X. Fan, Q. Chai, and Z. Zhong, “Multav: A multi-chain token backed voting framework for decentralized
blockchain governance,” in Blockchain – ICBC 2020, Z. Chen, L. Cui, B. Palanisamy, and L.-J. Zhang, Eds.
Cham: Springer International Publishing, 2020, pp. 33–47.

[49] K. Hashizume, E. B. Fernandez, and S. Huang, “Digital signature with hashing and xml signature patterns,” in

EuroPLoP, 2009.

[50] X. Xu, Q. Lu, Y. Liu, L. Zhu, H. Yao, and A. V. Vasilakos, “Designing blockchain-based applications a case study
for imported product traceability,” Future Generation Computer Systems, vol. 92, pp. 399–406, 2019. [Online].
Available: https://www.sciencedirect.com/science/article/pii/S0167739X18314298

[51] P. Beck, H. Bockrath, T. Knoche, M. Digtiar, T. Petrich, D. Romanchenko, R. Hobeck, L. Pufahl, C. Klinkm¨uller,
and I. Weber, “Blf: A blockchain logging framework for mining blockchain data,” in CEUR Workshop Proceedings,
2021.

25

A PREPRINT - SEPTEMBER 23, 2022

[52] C. Klinkm¨uller, A. Ponomarev, A. B. Tran, I. Weber, and W. van der Aalst, “Mining blockchain processes:
Extracting process mining data from blockchain applications,” in Business Process Management: Blockchain
and Central and Eastern Europe Forum, C. Di Ciccio, R. Gabryelczyk, L. Garc´ıa-Ba˜nuelos, T. Hernaus, R. Hull,
M. Indihar ˇStemberger, A. K˝o, and M. Staples, Eds. Cham: Springer International Publishing, 2019, pp. 71–86.
[53] S. Rane and A. Dixit, “Blockslaas: Blockchain assisted secure logging-as-a-service for cloud forensics,” in
Security and Privacy, S. Nandi, D. Jinwala, V. Singh, V. Laxmi, M. S. Gaur, and P. Faruki, Eds. Singapore:
Springer Singapore, 2019, pp. 77–88.

[54] S. Ruj, M. S. Rahman, A. Basu, and S. Kiyomoto, “Blockstore: A secure decentralized storage framework on
blockchain,” in 2018 IEEE 32nd International Conference on Advanced Information Networking and Applications
(AINA), 2018, pp. 1096–1103.

26

