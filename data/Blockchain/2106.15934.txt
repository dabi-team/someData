2
2
0
2

n
a
J

3

]

R
C
.
s
c
[

2
v
4
3
9
5
1
.
6
0
1
2
:
v
i
X
r
a

1

Extending On-chain Trust to Off-chain –
Trustworthy Blockchain Data Collection using
Trusted Execution Environment (TEE)

Chunchi Liu, Hechuan Guo, Minghui Xu, Shengling Wang, Senior Member, IEEE, Dongxiao Yu, Senior
Member, IEEE, Jiguo Yu, Fellow, IEEE, and Xiuzhen Cheng, Fellow, IEEE

Abstract—Blockchain creates a secure environment on top of strict cryptographic assumptions and rigorous security proofs. It permits
on-chain interactions to achieve trustworthy properties such as traceability, transparency, and accountability. However, current
blockchain trustworthiness is only conﬁned to on-chain, creating a “trust gap” to the physical, off-chain environment. This is due to the
lack of a scheme that can truthfully reﬂect the physical world in a real-time and consistent manner. Such an absence hinders further
blockchain applications in the physical world, especially for the security-sensitive ones.
In this paper, we propose a framework to extend blockchain trust from on-chain to off-chain, and take trustworthy vaccine tracing as an
example scheme. Our scheme consists of 1) a Trusted Execution Environment (TEE)-enabled trusted environment monitoring system
built with the Arm Cortex-M33 microcontroller that continuously senses the inside of a vaccine box through trusted sensors and
generates anti-forgery data; and 2) a consistency protocol to upload the environment status data from the TEE system to blockchain in
a truthful, real-time consistent, continuous and fault-tolerant fashion. Our security analysis indicates that no adversary can tamper with
the vaccine in any way without being captured. We carry out an experiment to record the internal status of a vaccine shipping box
during transportation, and the results indicate that the proposed system incurs an average latency of 84 ms in local sensing and
processing followed by an average latency of 130 ms to have the sensed data transmitted to and been available in the blockchain.

Index Terms—Blockchain; Trusted Execution Environment; Physical Traceability; Vaccine Tracing.

(cid:70)

1 INTRODUCTION

B LOCKCHAIN provides a secure environment that per-

mits certain interactions within it to be trustworthy.
It is built on cryptographic assumptions and proofs to
guarantee objective security and trustworthiness. However,
its trustworthiness currently is conﬁned within the on-chain
environment only, and can be hardly extended into the off-
chain physical world. This is manifested by the lack of
strong guarantees to ensure that blockchain data truthfully
reﬂects the physical object it is bound, and that blockchain
control instructions are always correctly deployed to the
corresponding devices. This on-chain/off-chain “trust gap”
signiﬁcantly undermines the wide adoption of blockchain
in security-sensitive physical world applications.

Taking vaccine tracing as an example – vaccine is critical
to protect citizen health, thus keeping its physical distribu-
tion process highly traceable, transparent, and trustworthy
is of paramount signiﬁcance to public interest. It is one of the

• C. Liu was with the Department of Computer Science, The George
Washington University and now with Ernst & Young. E-mail:
liuchunchi@gwu.edu

• H. Guo, M. Xu (corresponding author), D. Yu, and X. Cheng are with
the School of Computer Science and Technology, Shandong University.
E-mail: {mhxu, dxyu, xzcheng}@sdu.edu.cn, ghc@mail.sdu.edu.cn

•

•

S. Wang is with Beijing Normal University. E-mail: wang-
shengling@bnu.edu.cn

J. Yu is with Qilu University of Technology. E-mail: 19001922@qq.com

critical scenarios where digital data collected for monitoring
the vaccine transportation should strictly reﬂect the physical
world activities. However, we have seen many tragic cases
where the vaccines were damaged or counterfeited due to
the lack of highly trustworthy monitoring systems. Data
were mostly manually entered, thus we don’t know if the
vaccines were actually exposed to hazardous environments,
defective or tampered with. During a surprise inspection
to the rabies vaccine produced by Changchun Changsheng
Ltd, China’s National Drug Administration (NDA) found
more than 250,000 doses of vaccine were out of the pro-
duction standards and the online data did not match with
the actual product [1][2]. The Centers for Disease Control
and Prevention of America (CDC) mandates the Hepatitis
B vaccine to be stored between 2°C and 8°C. However,
Nelson et al. found that it was common in Indonesia that
the vaccine was inadvertently frozen and thus harming its
bioactivity, though the use of trusted vaccine vial monitors
could signiﬁcantly reduce the risk of heat-damage of the
vaccine [3]. This “physical intraceability” challenge is com-
mon in many other security-sensitive applications in real
life, and blockchain is not the silver bullet to the problem
due to the current trust gap between on-chain environment
and off-chain physical world. It calls for a general solution
that can trustfully align ground truth on and off blockchain.
To address this issue, we resort to a trustworthy sens-
ing scheme that consists of 1) a TEE-enabled trusted en-
vironment monitoring system that periodically senses the
physical environment, creates anti-forgery data records, and
uploads the records to blockchain; and 2) a consistency

 
 
 
 
 
 
protocol to upload the records in real-time from the TEE
system to the blockchain in a truthful, consistent, continuous
and fault-tolerant fashion. We make careful security designs
to ensure that no adversary can forge a fake data as all
are veriﬁed authentic and that no adversary can physically
violate the security requirements without being captured.

The contributions of this paper are summarized as fol-

lows.

1) We fully implement a trusted environment monitoring
system to support trustworthy vaccine tracing in the
real world– we call it physical traceability. We develop
the system using the low-cost Cortex-M33 Trusted
Execution Environment (TEE) microcontroller (MCU),
which enforces strict physical isolation, thus achieving
high security guarantee while keeping the system prac-
tically cheap for edge applications. We also justify why
this TEE controller is the most secure and cheap choice
by comparing it with the mainstream products such as
Cortex-A and Intel SGX.

2) We extend trust from on-chain to off-chain by designing
a protocol to establish a truthful, consistent, continuous
and real-time mapping between the physical object and
its digital entity. We analyze the time upper bound for
achieving data consistency and continuity considering
general blockchain systems.

3) Our system is invulnerable to remote threats. Unless
physically destroyed, any tampering with the system
or the monitored physical objects is to be recorded with
non-repudiation and traceability. We further provide a
fault-tolerant and error recovery solution against record
losses caused by transmission failures without relaxing
any security requirement. We lastly discuss existing
attacks against different TEE platforms, and why our
system is prone to these attacks.
The rest of this paper is arranged as follows. Section 2
presents the necessary deﬁnitions and basic assumptions.
Section 3 outlines the vaccine tracing system under our
consideration to illustrate our design. Section 4 provides the
in-depth technical details of and comprehensive analyses
on our TEE-enabled trusted environment monitoring sys-
tem and the corresponding consistency protocol. Section 5
demonstrates a full system implementation and reports our
experimental results. Section 6 discusses the extensibility
and possible limitations of our framework and outlines
our future research to mitigate the limitations. We ﬁnally
summarize the related work in Section 7 and conclude the
paper in Section 8.

2 DEFINITIONS AND MODELS
In this paper, we intend to extend the on-chain trust to off-
chain, and establish a digital entity that describes a physical
object in a truthful, real-time and continuous manner. To
achieve this goal, we need to deﬁne what is a physical
object and how its status is fractured into physical events
of interests, how these events are captured and stored in
blockchain in the form of digital timed records, and how
a consecutive sequence of timed records eventually forms
a digital entity. We lastly deﬁne the trustworthy standard
of a digital entity, which includes truthfulness, real-time
consistency and continuity.

2

2.1 Basic Deﬁnitions

A physical object is a minimal unit in the physical world
whose status interests us. It could be one or a batch of
homogeneous things, or even a small physical area.

A physical event of interest (hereafter abbreviated as an
event) is a status of a physical object at a certain moment of
time in which the public is interested in. An event can be 1)
a temporal checkpoint in a periodical monitoring setting, or
2) a sudden change in sensed data (“change-of-status”) that
exceeds a maximum tolerable range in an event-triggered
monitoring setting.

A digital timed record (hereafter abbreviated as record) is
a captured result of an event by a set of sensors. A record
is denoted as (t, C, π), where t is the timestamp when this
record is created, C is a combination of different types of
sensor outputs such as binary, numerical, categorical or
multimedia, and π is a proof of authenticity of the record
or (partly) the trustworthiness of the data. By this way one
can see that a record is a digital description towards an
event. Although there exists two types of events – periodical
checkpoints and sudden change-of-status, in this paper we
refer the former as records while the latter is processed as an
independent alarm message. This is because we make use of
periodically sensed records as the main source of evidence
to describe a physical object.

A digital entity α can then be formulated as a chain
of chronologically consecutive records. It fully captures all
events of a physical object and describes its state transitions.
Under the periodical monitoring setting, the continuity is
guaranteed by sensing and reporting records periodically
once every ∆t time. Under the event-triggered monitoring
setting, an entity is constructed with signiﬁcant change-of-
status records. One can see that both the periodical and
event-driven monitoring settings are desirable in practice,
thus in this paper we consider a hybrid one – we use
a periodical monitoring setting to record data but permit
alarm messages to be sent out at anytime upon receiving a
signiﬁcant “change-of-status” event. A digital entity α can
be denoted as

α = (t0, C0, π0), · · · , (ti, Ci, πi), · · ·

(1)

With this hybrid setting, one needs to enforce the fol-
lowing three mandatory requirements on a digital entity
in order to conﬁdently believe that the entity does de-
pict a physical object with trustworthiness: i) all associ-
ated records should truthfully reﬂect reality of the physical
world; ii) each record should be captured in real-time after
an event occurs; and iii) the records should be uploaded to
blockchain without loss or signiﬁcant time delay. They can
be formalized into the following deﬁnition:

Deﬁnition 1 (Trustworthiness of a digital entity). We say a
digital entity is trustworthy if it satisﬁes all the following three
requirements:

• Truthfulness: each record is generated by a secure system or

program that is tamper-proof.

• Real-time consistency: For any event occurred in the
physical world at time t, it takes at most δ more time for
the blockchain system to return the same timed event, where
δ is a small real number that is application-speciﬁc.

• Continuity: The time interval between two consecutive
records of an entity is conﬁned within ˆδ, where ˆδ is a real
number that does not signiﬁcantly deviate from ∆t, the
sensing interval.

Regarding a physical event of interest, we judge whether
or not the event is “normal” by comparing the sensing result
C against a pattern Γ, which deﬁnes the correct pattern of
normal sensing data. In practice, Γ and C share the same
structure, and the checking can be done by computing the
deviation between C and Γ. The combination of C and Γ
can describe the basic detail of a physical event and how
desirable or how legal it is. More discussions can be found
in Section 3. As one can see, these deﬁnitions mandate a
truthful, robust, and highly-responsive system that contin-
uously enforces monitoring towards a physical object, and
then uploads the data to blockchain with low latency. This
process must be efﬁcient enough to satisfy the real-time
requirement. We realize this goal by designing a consistency
protocol and implementing a trusted environment monitor-
ing system leveraging TEE, as detailed in Section 4.

We lastly deﬁne a general blockchain system as a dis-
tributed network consisting of n processors (or nodes), in
which at most f of them may be byzantine (capable of
exhibiting arbitrary behaviors), and the other n − f are
correct (faithfully following the protocol without any fail-
stop, omission or byzantine failure). We consider modeling
a general blockchain using the partially-synchronous model
[4][5]1, which permits periodical synchronization at Global
Stabilization Times (GSTs). After each GST, the blockchain
system is temporarily synchronized for L units of time. Dur-
ing each [GSTi, GSTi+L) interval, a new round of consensus
is initiated, executed and completed by committing a new
block to all correct nodes – we call this a block production
process. In real life, a GST is usually the moment at which
a request or a command to initiate a new block production
process is issued. The blockchain system can receive new
transactions at anytime, but these transactions need to wait
to be committed; thus we assume that all data received dur-
ing [GSTi+L, GSTi+1) are to be included in the next block
at depth i + 1. The interval between two GSTs is denoted by
∆GST . Without loss of generality, ∆GST can be a constant
value or a random variable with a known ﬁnite upper
bound – respectively depicting cooperative consensus that
produces blocks regularly and deterministically (such as
Delegated Proof-of-Stake), and competitive consensus that

1. Solving fault-tolerant, deterministic consensus in asynchronous
networks has been proven as an impossibility [6]. While many works
claimed achievement of asynchronous consensus, they in fact adopted
a weak, or partially-synchronous assumption, requiring the network to
synchronize periodically (e.g., Delegated PoS [7]) or under an exist-but-
unknown-a-priori upper bound (e.g., PoW [8]).

2. In Dwork et al.’s original deﬁnition [4][5], the deﬁned GST is
unknown to the processors but a message communication upper bound
∆ exists after a GST is announced and this upper bound stays valid
during a time interval L, meaning the network achieves temporary
synchrony. This means that the corresponding model excludes the case
where ∆GST is a constant and GST is known. In our deﬁnition, we
simplify and generalize this model by setting no constraint on GST,
but ∆GST can be a constant or a random variable with a known, ﬁnite
upper bound, and could potentially follow a distribution (but we do not
mandate it). Our GST is just a moment at which a new block production
process is initiated.

produces blocks with a degree of uncertainty (as in Proof-
of-Work and other mining-based consensus algorithms)2.

3

2.2 Trust Model

In this study, we trust that the TEE hardware is secure
against any long-range vulnerability, and that blockchain
cannot be manipulated by an adversary.

Blockchain: Generally, a blockchain system is secure if
its consensus output is secure against adversaries’ malicious
manipulations and the consensus output does not change in
any node’s view after ﬁnalization. These two requirements
can be described as: 1) the protocol is proved secure and
is correctly implemented, and is only vulnerable to node
byzantine faults; and 2) the number of existing byzantine
nodes does not exceed the maximum number f tolerable by
the blockchain system. A blockchain system is available if all
non-faulty data can be included in the blockchain within a
ﬁnite time interval. Our blockchain is assumed to be both
secure and available. With the fact that most non-trivial
blockchain systems or consensus algorithms provide such
guarantees, one can reasonably make this trust assumption.
TEE: A Trusted Execution Environment (TEE) physically
separates a secure zone from a non-secure zone (a.k.a.
the rich-environment zone). Programs in the secure zone
can only be called by the non-secure zone but cannot be
modiﬁed or explicitly inspected. It is a general consensus
among the security community that programs within the
secure zone are invulnerable against long-range tampering.
There is one master secret key mas sk that is unique to
each TEE system and can be used to exclusively authenticate
this trusted device to the public. This master secret key
cannot be explicitly retrieved or tampered with. We assume
the TEE hardware has a public/private key pair, denoted
by T EE pk and T EE sk, as a blockchain client needs to
be implemented in TEE. Note that we consider physical
damages towards TEE out of scope.

The controversy on TEE security lies in different TEE
architectures, and we choose the Arm Cortex-M series TEE
microcontroller since other choices of TEE such as the
Cortex-A series and Intel SGX, which are prevalent in most
smartphones and servers, do not strictly enforce physical
isolation on the secure zone, making the system insecure
as evidenced by the many reported security attacks against
program integrity [9] and private data secrecy [10]. Cortex-
M microcontrollers enforce strict physical isolation through
mandatory manual conﬁguration and only side channel
attacks in a macro scale (such as power analysis) can be
done with high time cost (estimated more than 100 to 300
seconds), while the attack results can only compromise some
secrecy but not program integrity. In later discussions we
explain how one can thwart this attack through memory
masking or simply prohibiting possible attack windows
from lasting longer than 100 seconds. We provide detailed
analysis and comparison studies on state-of-the-art attacks
and defenses on TEE security in Section 4.4.

2.3 Notations

We organize all notations and symbols in Table 1.

TABLE 1: Summary of Notations

4

Symbol
t, ∆t
T, ∆T
C
(L, K, x, y)
Γ
ΓP = {0/1}
ΓK = [Kmin, Kmax]
ΓG = {(Xi, Yi), ri}
π
n, f
GST, ∆GST
L
Fd
mas sk, T EE pk, T EE sk
sym sk
recp pk, recp addr
φ
l1
l2
(cid:15)1
(cid:15)2
(cid:15)3
(cid:15)s
(cid:15)
δ
ˆδ

Description
the time stamp at which a record is created; the sensing interval
the moment a record is available in blockchain; time difference between two consecutive T s
a combination of sensor outputs; in this paper we have:
brightness level, temperature, and GPS location (x, y)
a valid range of sensor output, namely pattern; in this paper we have:
binary photosensor output, 0 or 1 for dark or bright
temperature sensor output, minimum and maximun permitted temperature
GPS locator output, a list of checkpoint locations and the permitted deviation radius
proof of data authenticity and trustworthiness
number of all nodes and that of byzantine nodes in blockchain
Global Stabilization Times; time difference between two consecutive GSTs
guaranteed synchronized period after GST
backup queue for unsuccessfully uploaded data
globally unique master secret key of each TEE and its derived public and private key pair
derived session symmetric key between TEE and a proxy blockchain client
proxy blockchain client public key and network address
idle time from a transaction joining the blockchain pool to the moment next block production process starts
time interval of a block production process
time interval between block production process ﬁnishes to synchronization period expires
time delay of local data sensing in the TEE system
time delay of transmission between the TEE system and the remote blockchain agent
time delay of block commit from the remote blockchain agent to all the blockchain nodes
clock difference between the TEE system and the remote blockchain agent
total time delay from a physical event’s occurrence to the digital record ready in blockchain
upper bound of time delay between any event’s occurrence to its corresponding record’s global commit
upper bound of time delay between any two consecutive records

3 A VACCINE TRACING SYSTEM EXAMPLE

In this section we introduce the vaccine tracing system as an
example to demonstrate our framework of extending trust
from on-chain to off-chain physical world. More speciﬁcally,
our scheme is designed to make sure that the environment
within the vaccine shipping box is monitored trustworthily
in realtime.

We consider that an important vaccine is stored inside an
insulation box. This box must be transported from A to B via
an approved route. The box is sealed and is prohibited from
being opened. The temperature inside the box must be kept
low and stay stable in order to preserve the biological activ-
ity of the vaccine. We start by deﬁning possible situations
that may violate the security requirements:

1) the box is opened (may destroy or replace the vaccine),
2) the temperature within the box is abnormal (may nul-

lify the vaccine biological activity),

3) the transportation route is deviated from the predeﬁned

one (same as 1),

4) records may be lost (same as 1).

To capture these violations, we place a photosensor, a
temperature sensor, and a GPS locator inside the box. As
discussed earlier, pattern Γ needs to be predeﬁned to deter-
mine whether the data C complies with the security require-
ments or violates them. In this vaccine tracing system, the
photosensor should always output 0 for constant darkness,
indicating the box is sealed, thus we can deﬁne ΓP = {0};
the actual binary data of the photosensor is denoted by L,
and L = 1 if the ambient brightness is greater than the
luminous threshold θ and L = 0 otherwise. The temperature

sensor should always report a steady internal temperature
ranging from Kmin to Kmax, so ΓT = [Kmin, Kmax]; the
actual capture of the temperature sensor is K degrees. The
GPS sensor records the physical shipping route of the box,
and should follow a geographic pattern from the origin,
along a reasonable path, to the ﬁnal destination. We deﬁne
ΓG = {(Xi, Yi), ri}, which includes a series of checkpoints
(Xi, Yi) by latitudinal and longitudinal coordinates and a
safe radius between the box and the closest checkpoint.
The latitudinal and longitudinal coordinates captured by
the GPS sensor are respectively denoted as x, y. If the
Euclidean distance between each location upload (xi, yi)
and the nearest checkpoint (Xi, Yi) is less than ri, the box
is considered in a safe route. The actual sensing data to be
uploaded for each sensing event is denoted by:

C = (L, K, x, y)

(2)

We would like to point out that one could use more
types of sensors to monitor the box during transportation.
For example, one can use a smart lock, a motion sensor,
and a humidity sensor, to enhance the monitoring effect of
the vaccine box. These sensors are not hard to add-on, as
one can see from next section that our design philosophy
can be easily applied to them. This study represents our ex-
ploratory effort towards trustworthy vaccine shipment and
for demonstration purpose we focus on a simple example
and present the most essential components, leaving other
opportunities to future real world system developers.

4 MAIN SCHEME: TRUST EXTENSION FROM ON-
CHAIN TO OFF-CHAIN PHYSICAL WORLD
In this section, we detail the design and implementation
of our trust extension scheme using the vaccine tracing
as a case study example. Our system consists of a TEE-
enabled trusted environment monitoring system and a con-
sistency protocol for uploading data from the TEE system
to blockchain in an orderly fashion. As discussed earlier,
vaccines may suffer from counterfeit, physical damage, be-
ing unsealed or replaced by fake ones during transportation.
Nevertheless, it is extremely challenging to seamlessly mon-
itor their transportation in a trustworthy way in practice.
This “physical intraceability” is common in many security-
sensitive real world applications. We propose a system that
permits secure and trustworthy vaccine shipping, which
can capture any tampering and violation to the physical
object, guaranteeing non-repudiation and traceability. We
also present a fault tolerance mechanism that can recover
from lost packets due to transmission failures, ensuring
seamless monitoring of the vaccine transportation.

4.1 TEE-Enabled Trusted Environment Monitoring

We ﬁrst introduce our full system of TEE-enabled trusted
environment monitoring system. Fig. 1 presents the major
utilities. We develop our system from the bare metal level
for best security guarantee and efﬁciency/cost performance.
As discussed earlier, the secure zone inside a TEE hard-
ware has the highest security privilege through physical
isolation. Programs implemented in the secure zone can
only be called by non-secure zone through a callable-API,
and cannot be modiﬁed or inspected by the non-secure zone.
Therefore, the secure zone should execute security-critical
tasks such as trusted data collection, pattern extraction, en-
cryption and decryption. The non-secure zone can perform
non-security tasks such as user interface or packet routing.
To initialize, we manually conﬁgure the Secure Attribution
Unit (SAU) in the secure zone to partition the secure-zone
memory from non-secure zone memory. To make the system
function as expected, we ﬁrst develop drivers of security-
critical sensors within the secure zone and directly connect
them to the corresponding devices by wire; then we assign
higher system interrupt priorities to security-critical tasks in
order to achieve better real-time performance. Fig. 1 demon-
strates the system block diagram with basic components
introduced as follows.

At the lowest kernel level, a secure boot module and an
integrity checker are ﬁrst activated after booting. These two
modules validate the current image (burnt-in executable)
by computing its RSA signature and comparing it with the
pre-stored correct one. If no corruption is found, the CPU
control is transferred to the secure zone user space. The
Protected Flash Region (PFR) stores the master secret key
mas sk and the key pair T EE pk and T EE sk, and must
be checked for integrity by secure boot. If passing the check,
which means that mas sk and the key pair in PFR are intact,
they are retrieved from PFR and loaded into the secure
zone RAM. One can see that these keys cannot be faked,
corrupted, or stolen from the PFR and the secure zone. The
master secret key mas sk is used to derive session keys
for AES encryption while the public key pair is used for

5

Algorithm 1 Main System Utilities

1: //Symmetric Key Derivation and Distribution
2: Function KDF(mas sk, recp pk, recp addr)
3: //Master secret key of the system, recipient (blockchain

client) public key, recipient address.

4: //Symmetric encryption for efﬁciency, asymmetric sig-

nature for public blockchain veriﬁcation.

5:
6:

sym sk = EncAES(mas sk||recp pk||TRNG())
//Derive session key sym sk from master key

mas sk

distribution = EncRSA(sym sk, recp pk)
signature = SignRSA(distribution, T EE sk)
4Gsend(distribution, signature, recp addr)

7:
8:
9:
10: return sym sk
11:
12: //Retrieving Sensor Data
13: Function Sensors get(θ)
14: Initialization: L = 0, K = 0, x = 0, y = 0
if (app ambient lum() > θ) then L=1
15:
//Hardware level logic
16:
end if
17:
K = app temp get()
18:
(x, y) = app gps get()
19:
20: return C = (L, K, x, y)
21:
22: //Violation Detection
23: Function Violation check(C, ΓP , ΓT , ΓG)
24: Initialization: f lagP = f lagT = f lagG = 0, msg =

null

25:
26:
27:
28:
29:
30:
31:

if (C.L! = ΓP ) then
f lagP =1, msg.append(“Box opened”)
end if
if (C.K > ΓT .Kmax || C.K < ΓT .Kmin) then
f lagT = 1, msg.append(“Abnormal Temperature”)
end if
if (min{dist((C.x, C.y), (ΓG.Xi, ΓG.Yi)) − ΓG.ri} >

0) then

t = get sys clock(), msg.append(t)
4Gsend(msg, SignRSA(msg, T EEsk), recp addr)

end if

f lagG = 1, msg.append(“Route Deviated”)
end if
if (f lagP ||f lagT ||f lagG) then

32:
33:
34:
35:
36:
37:
38: return 0
39:
40: //Send Data Packets via 4G
41: Function 4GSend(msg, recp addr)
app 4G send(msg, recp addr)
42:
if (not receiving ACK) then return ‘fail’
43:
44:
45:

else return ‘ok’

end if

message authentication and signature veriﬁcation. The key
pair T EE pk can be registered through its owner onto the
blockchain or managed through public key infrastructure.

At the secure zone we develop and assemble the drivers
of the photosensor, GPS, camera, and temperature sensor
in C language on our own. We also deﬁne critical logic and

6

We then encrypt the symmetric key sym sk once using
the remote blockchain agent’s public key to securely deliver
sym sk. Note that it is the remote blockchain agent’s liabil-
ity to keep the symmetric key secret. This function is shown
in Function KDF(mas sk, recp pk, recp addr).

Finally in the secure zone, a Universal Asynchronous
Receiver/Transmitter (UART) module receives messages
and sends them to the non-secure zone. The 4G or NB-IoT
communication module, or the LinkServer local USB debug
output, receives the data from the UART module. For time-
sensitive applications the 4G module can be used while for
energy-efﬁciency-sensitive applications the NB-IoT module
can be used. The lightweight blockchain client in TEE pro-
vides the current remote blockchain agent server’s address
to which data can be redirected after entering the Internet.
A user debug interface connects UART to USB and permits
output via PC at the speciﬁc IDE. Fig. 3 shows another view
of the system.

We notice that there exist other works that use TEE
to perform trustworthy operations. However, the adopted
TEE hardware chipsets either are prohibitively expensive as
the more-easy-to-implement but expensive ones such as the
Intel SGX are adopted, or make use of the ones such as the
Cortex-A series that do not strictly enforce the secure zone
physical isolation. In this study, we implement our system
using the Cortex-M series TrustZone Chipset as it is the
ﬁrst series that physically divides secure zone from the non-
secure zone. Not surprisingly, we face a great engineering
challenge and overhead because there exist very few usable
libraries, kernels, and operating systems developed for the
Cortex-M series. As a result, we build the whole system
from the bare metal level using C and Assembly. To the
best of our knowledge, we are the ﬁrst to implement such a
trustworthy system using the challenging yet cheap Cortex
M33 MCU, which is priced around $40, while most other
Intel SGX products cost around $300 ∼ $400.

4.2 Consistency and Continuity Analysis

As discussed earlier, one can see that to achieve trusted
physical traceability, we must ensure that

1) Real-time consistency: any event that happens must be

uploaded and available within δ time,

2) Continuity: a periodical monitoring at every ∆t time,
and the time delay between any two consecutive
records must be within ˆδ time.
Algorithm 2 shows the pseudocode of the data upload-
ing protocol. We now analyze the worst latency performance
for both δ and ˆδ of this protocol4.

Note that time latency δ is a sum of three random system
delays, i.e., δ = (cid:15)1 + (cid:15)2 + (cid:15)3, which are described as follows.
1) (cid:15)1 is the delay of local data sensing in the system. It
begins at the moment the system starts sensing, and
ends at the time the secure zone outputs a signed
ciphertext data D = Fd||(t, C, π) as a digital record.
2) (cid:15)2 is the delay of transmission between the TEE system
and the remote blockchain agent. It starts by the non-
secure world of TEE receiving D and ends at the time
when the remote blockchain agent obtaining D.

4. In our analysis, we ignore the local data processing time within a

Fig. 1: Block Diagram of the System

parameters such as the raw data collecting procedure, buffer
size, inner capture frequency, debug procedures, and so on.
This is reﬂected by Function Sensors get(θ) in Algorithm
1, where θ is a threshold to ensure that the photosensor
returns binary 1 if and only if its reading is above θ.

The data processing and monitoring module collects
data from the sensors as C then compares the data with
the predeﬁned legit pattern Γ. If this checking ﬁnds any
violation against Γ deﬁned in Section 3, an immediate alarm
message along with the current timestamp is generated.
Note that this alarm message is directly sent out and does
not affect normal data uploading. This is shown as Function
Violation check(C, ΓP , ΓT , ΓG) in Algorithm 1. Next we
retrieve the current system clock t, and packs all into a
correct data structure (t, C, π), where π is the publicly ver-
iﬁable signature computed using T EE sk to authenticate
the trusted source of data C. Finally we check if there exist
any lost history data, and if so, include them as Fd; then we
sign and encrypt Fd||(t, C, π) with the session key sym sk
and call 4GSend() presented in Algorithm 1 to upload the
data to the blockchain. This procedure is summarized by
Algorithm 2 and the ﬂow chart of the data uploading
procedure is illustrated in Fig. 2.

The encryption and signature module performs encryp-
tion, signature signing and veriﬁcation. Recall that the sys-
tem has a master secret key mas sk and a public/private
key pair T EE pk and T EE sk. To save computational
resource, we need a symmetrical session key for encryption
with AES. This symmetric key sym sk can be derived as an
AES output of encrypting the concatenation of the master
secret key mas sk, the recipient public key recp pk, and a
random number which is generated by the embedded True
Random Number Generator (TRNG). AES encryption is a
common source of randomness to derive symmetric keys.
Since it is CCA-secure3, attackers cannot have more than
negligible probability to infer mas sk providing sym sk.

3. Using Authenticated Encryption modes such as GCM.

node or an agent as it is generally small and negligible.

Arm TrustZonev8 M33 ChipsetNB-IoT Communication ModuleSecure module with self-implemented secure drivers in secure zone4G Communication ModuleLinkServerUSB Debug OutputPhotosensorModuleData Processing and MonitoringGPS ModuleTemperature SensorModuleExisting hardware and librariesSecure BootProtected FlashIntegrity CheckerKernel AreaSecure ZoneNon-secure ZoneLightweight Blockchain ClientUART Serial Port OutputUser Debug InterfaceSecure module with self-implemented secure drivers in non-secure zoneEncryption and Signature7

Fig. 2: Flowchart of the System

timestamp at TEE when the event record should be created,
and Ti is the time when blockchain has this event publicly
available. The time gap ∆t is the desired period between
two planned sensing events and ∆T is the time difference
between two timed events recorded in blockchain. We know
that the system latency (cid:15)1 can vary but is stable for a
properly developed system, and the transmission latency (cid:15)2
should also be stable for a high-performance transmission
protocol like 4G. The only variable that may signiﬁcantly
affect the latency is (cid:15)3, where (cid:15)3 = φ + l1, with φ being
the idle time that a record waits in the blockchain pool
to the initiation of next block production process5, and l1
being the time interval the block production process lasts,
committing new blocks to all nodes. We call GST+l1 the
Block Commit Time (BCT). From BCT to the time when the
synchronization period L expires is denoted by l2, which
satisﬁes L = l1 + l2. Without loss of generality, we assume
that l1 is a random variable in (0, L], which could potentially
follow a distribution (but we do not mandate it).

Theorem 1. Assume that there is no record loss. For a sensing
event started at time t, it takes at most δ = (cid:15)1 + (cid:15)2 + ∆GST +
L + (cid:15)s time to have this sensed event available in blockchain.

Proof. The sensing event starts at time t, and after (cid:15)1 + (cid:15)2
time the corresponding record reaches the blockchain. In the
worst case, the record just misses the next block production
deadline (GST) thus it must wait for ∆GST time to be
included in the next block production process. Considering

5. Recall that for simplicity, we assume all received data will be
included in the next block, which means that φ ∈ (0, ∆GST ]. This can
be relaxed if additional analysis is performed under different settings
and assumptions.

Fig. 3: Abstract Architecture of System

3) (cid:15)3 is the delay of synchronizing the records in the whole
blockchain system. It starts by the ﬁrst blockchain node
(with the remote blockchain agent mentioned above)
receiving D and ends when all good blockchain nodes
retrieving D from the blockchain.
Note that we use (cid:15)s to denote the clock difference be-
tween the TEE system and the remote blockchain agent, as
the latter actually proposes the record to blockchain.

Fig. 4 shows a normal operation of the system. As de-
ﬁned in Section 2.1, we assume a general blockchain under
a partially synchronous model. Time ti is the local system

Non-secure ZoneSecure ZoneInitializationSecure BootPeripheral InitGlobal Clock InitReach Uploading Cycle?Main CycleGPS TimeTempera-tureGPSCoordinatesLight IntensityAccelerator InitYes AES Encryption & RSA SignatureUpload via 4G to BlockchainEntity Still Active?YesNoAny  Unsent Data?Data ViolatesΓ?NoCiphertextEndStartSensors_getAttach Unsent Data YesYesSend a SeparateAlarm MessageNoToo manyEndSecure HardwareResourcesSecure ZoneKernelSecure Sensor DriversNon-Secure ZoneRich Environment OS (optional)SecureCallableAPIComm.ModuleBlockchainClientCargo AreaTEMS System Microcontroller PartData Processing & BackupsEncryptionandAuthenticationSecret Keys (PFR)Secure BootCrypto AcceleratorTRNGInter-nalAPIBlockchainOutput Data StreamInput Data StreamAlgorithm 2 Data Uploading Protocol
1: Input: recp addr, max Fd, θ, (ΓP , ΓT , ΓG) //Remote
blockchain agent address, max number of packet resend
tolerance, threshold of photosensor, predeﬁned security
pattern.

2: Initialization:

Initialize system hardware; activate
blockchain; synchronize system clock and blockchain
client with external GPS time; initialize message queue.

8

C = Sensors get(θ)
Violation check(C, ΓP , ΓT , ΓG)
t = get sys clock()
π = signRSA(C, T EEsk) //New data
if (!queue.empty() && len(queue)≤ max Fd) then

3: sym sk=KDF(mas sk, recp pk, recp addr)
4: Fd = null
5: while (It is time for periodic reporting) do
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:

Fd.append(queue.front())
queue.pop()
//Get the failed-to-send historical data array

if (!queue.empty() && len(queue)> max Fd)

while (!queue.empty()) do

end while

else

then

return ‘Exceed maximum recovery tolerance’

end if
Fd.append((t, C, π))
msg = EncAES(Fd, sym sk)
status=4Gsend(msg, recp addr)
if (status==‘fail’) then
for (a : Fd) do

queue.push(a)

end for

end if

18:
19:
20:
21:
22:
23:
24:
25:
26:
27:
end if
28:
29: end while
30: return 0

the worst case where the blockchain takes the longest per-
mitted time to execute the consensus process, which is an
extra L units of time, and the time synchronizing difference,
one can get the result.

Theorem 2. Assume that there is no record loss. For two
consecutive timed events recorded in blockchain, the maximum
time difference is ˆδ = ∆t + ∆GST + L + (cid:15)s.

Proof. The maximum time difference between two records
exists between a best case record processing followed by a
worst case one. According to the deﬁnition, ∆T = ti+1 +
δi+1 − (ti + δi) = ∆t + ∆δ, where ∆t is the planned
period between two sensing actions, and in this case ∆δ
is the max record processing time difference. In the best
case, ti + (cid:15)i
2 meets the next block production deadline
(GST) and the blockchain takes an ideal instant time to ﬁnish
the block production process, which means φi = li
1 = 0
and therefore (cid:15)i
3 = 0. The worst case is analyzed in 1
where φi+1 = ∆GST and li+1
1 = L. Considering the time
synchronizing difference one can get the result.

1 + (cid:15)i

Fig. 4: Data uploading illustration. Superscript i and i + 1
of (cid:15), φ, l1 and l2 are omitted for conciseness; GST stands for
the Global Stabilization Time and BCT stands for the actual
Block Commit Time.

4.3 Lost Record Tolerance and Recovery

The whole system can malfunction in many ways; thus we
need to consider fault tolerance as well as recovery. The
malfunction or halt of the TEE system itself must require
manual inspection and restart, and that of the blockchain is
out of the scope of this paper. Therefore we consider fault
tolerance and recovery for the transmissions between the
TEE system and the blockchain system, which are common
in real world and doable at the software level. On the other
hand, if communication fails and the system can prove to
the blockchain that it did create the data record back in
time as expected, those lost or late packets can be accepted
without distrusting the device.

Let’s examine Algorithm 2 again. Recall that for each
digital record Di = Fd||(ti, Ci, πi), the lost packets in Fd
are stored in a queue and retrieved as a list (see Lines 10-20
in Algorithm 2). If the system does not receive an ACK for a
record from the blockchain (see Lines 23-28 in Algorithm 2),
it pushes the data into the backup queue and resends it at
the next uploading cycle. Note that we allow a maximum
of max Fd number of consecutive missed packets to be
backed up and resent (see Lines 17-19 in Algorithm 2). If
the packets are correctly recovered, then all packets follow
the correct ∆t pattern; thus we consider them acceptable
and not conﬂicting with the validity deﬁned earlier.

By this design, one can see that the system is invulnera-
ble to the following two common attacks: 1) an adversary
commits a jamming attack and therefore the 4G module
cannot send to or receive from the outer world any in-
formation; and 2) the 4G signal is generally weak or the
link is disconnected. Both cases are common in practice,
and appear to have the device disconnected causing the
records to be missed for a period of time. Note that even
when the transmission signal is down, the secure zone is still
constantly monitoring the environment inside the box and
this backup queue cannot be modiﬁed as it stays inside the
secure zone. Also note that the adversary may compromise
the inner environment of the TEE system while jamming
the communications. Nevertheless, the records still stay in
the secure zone (inside the backup queue), though jamming
prevents them from being sent out. Unless the adversary

GST!"#$#%#&!"+("!")$!")$+(")$Δt,",")$Δ,BCTGST#$-.$BCT.%#%#&-.$.%jams the system forever or physically destroys the system,
this attack action will sooner or later be publicly revealed.

Nevertheless, the system may still be vulnerable under
the following scenario in which an adversary jams the
system for less than max Fd number of recording times
and meanwhile 1) successfully breaks into the system and
modify the program within TEE, or 2) forges a signature
without the secret key and impersonates this device to
upload fake data, or 3) steals the secret key from side
channel attacks such as power analysis, then creates a valid
signature. The ﬁrst two cases can be nulliﬁed by the fol-
lowing security assumptions: 1) a trusted hardware (TEE)
protects its programs in the secure zone from modiﬁcations
and 2) the unforgeability proof of a secure digital signature
scheme states that no polynomial time adversary can forge
a valid signature with a negligible probability. The last case
is thwarted by prohibiting any long disconnection time in
order to make the attack window impossible to exist. Such
a case is further explained in the following subsection.

4.4 State-of-the-Art of TEE Security

In this paper, we ensure our truthful requirement based
on the assumption that programs and systems within TEE
hardware is tamper-proof. We now compare the mainstream
choices of TEE platforms and list out state-of-the-art attacks
and defense mechanisms. We ﬁnally show that there does
not exist an effective attack against our Cortex-M series TEE-
based scheme that can be avoid detection.

The Cortex-A series microcontrollers and Intel SGX plat-
forms are the most prevalent TEE choices in smartphones
and servers, and they do not strictly enforce physical iso-
lation between the secure zone and the non-secure zone.
Cortex-A macro-schedules the memory space using vir-
tual memory MMU at the software level, which is more
vulnerable to long-range attacks. Intel SGX has a Model
Speciﬁc Register (MSR) that is exposed to software control,
which can be modiﬁed in a controlled way to ﬂip bits in
the memory, causing the attacker to gain escalated control
privilege [11]. This led to multiple successful software-level
exploits [9] [12], and even attacks after the vulnerability was
patched [13]. Cortex-A series was also exploited since it has
a shared memory cache [14][10].

On the other hand, a Cortex-M series microcontroller
(MCU) explicitly micro-manages the memory space, which
is considered a much more solid physical isolation. By
the time of this writing, no software-level exploit against
the Cortex-M series has been identiﬁed. At the hardware-
level, Vafa et al. launched a power analysis-based proﬁling
attack to uncover the code within the Cortex-M3 core [15];
and Petrvalsky et al. employed differential power analysis
(DPA) and FastDTW trace alignment to recover the secret
128-bit key from the Arm Cortex-M3 MCU [16]. Neverthe-
less, hardware-level sabotage and side channel attacks are
technically unavoidable and are beyond our consideration.
Furthermore, these attacks are mainly against secrecy –
uncovering secret keys or codes, which are non-critical to
integrity, as the integrity of the TEE system remains un-
compromised and its functionality is not altered. But the
recovery of the secret keys [16] could seriously threaten
the system trustworthiness. Nevertheless, this attack can

9

Fig. 5: The vaccine shipping box with sensing devices

be easily defendable via memory masking [17]. Aside of
that, Petrvalsky et al. in [16] did not report the total time
needed for succeeding this attack. According to the de-
scriptions in their experimental studies, during one attack,
one trace alignment using FastDTW is processed, and each
trace consists of about 150,000 samples. By looking up the
time cost from the original paper of FastDTW [18], one can
calculate that the time cost for each single trace alignment
could be somewhere between 100 to 300 seconds, which
is considered as the time cost for a single attack. We call
this time duration the attack window, which means that if
the total duration of 4G disconnection for our environment
monitoring system is greater than this attack window, the
attack case 3) mentioned in the previous subsection could
succeed. Therefore, we mandate an allowed disconnection
time, denoted by the max Fd number of unsent packets,
must be less than the attack window, and the existence of
a disconnection time exceeding the attack window implies
that the device could be compromised and is distrustful.
In reality, one can adjust max Fd by considering different
communication methods (such as delay tolerant network,
2G networks, etc), different applications, and new attacks in
future. To our best knowledge, we are the ﬁrst to develop
secure blockchain components using the Cortex-M series
chipsets, and mandate high security standards to thwart all
the existing major attack schemes targeting Cortex-M series.

5 EXPERIMENTS
In this section, we put our system into an actual test. We
implemented the system as described earlier, attached it
into a vaccine shipping box, and performed consistency
monitoring towards the vaccine transportation.

5.1 Setup

The system was implemented on an LPC55S69-EVK devel-
opment board from the NXP Semiconductor. The board con-
sists of a LPC55S69 dual-core Arm Cortex-M33 microcon-
troller, running at 150MHz, and supports Arm TrustZone
technology. For more information regarding LPC55S69-EVK
please refer to the user’s manual [19]

We developed our own blockchain system using Golang
[20] for the best ﬂexibility support. Golang is quite popular
in security community for its memory-safe, high-concurrent,

4G Antenna GPS Antenna TemperatureSensor Photo-sensor5V PowerLPC55S69-EVKTEE MCU10

(a) GPS movement trace and security check-
points

(b) Temperature ﬂuctuation

(c) Photosensor and its logic voltage level
output

Fig. 6: Experimental Sensing Data Separately Visualized as GPS Location, Temperature and Brightness.

and high-usable properties. We adopted the Tendermint-
BFT consensus algorithm, which is the Delegated Proof-
of-Stake version of the original Practical Byzantine Fault
Tolerance mechanism [21]. Speciﬁcally, Tendermint-BFT as-
signs different weights to different nodes during BFT vot-
ing, while PBFT assigns equal weights to all nodes. This
weight, in practice, can be used to represent different trust-
worthiness of different nodes. We implemented the main
blockchain system with about 4000 line of codes in Golang.
The PC we used is a 8-Core Intel i7-6700HQ @ 2.6GHz
with 16G memory and Ubuntu 18.04.1 GNU/Linux. We
simulated 6 blockchain nodes on top of this PC as our
blockchain system. The vaccine shipping box communicates
with the blockchain through the civil-use commercial level
4G-LTE, which has an actual bandwidth around 10 Mbps.

5.2 Evaluation

In our evaluation, we burned the project (containing codes
for both the secure zone and the non-secure zone) into a
LPC55S69-EVK board system. By providing a 5V external
power bank, we made the system a standalone one. The
board was positioned to the right side of the inside vaccine
shipping box, leaving all critical sensors on the left side.
As one can see from Fig. 5, the temperature sensor was the
silver textured probe, and the main part of the photosensor
was a light-sensitive LED. The GPS antenna was small in
size and its signal power was not affected when sealed
inside the box. The 4G antenna was attached to the exterior
top-left of the box. We set ∆t to be 10 seconds, which
means that we sensed the environment and uploaded to
the blockchain one record every 10 seconds. The maximum
number of blocks for error recovery was ﬁxed to 5. In our
experiment, we attached the vaccine shipping box at the
back seat of a motorcycle. The safe vaccine transportation
temperature was ranged from 13 to 15 degrees.

We rode the motorcycle along a street in a suburban area
and continuously collected the sensor data. To decrease the
inside temperature of the vaccine box we placed two ice
bags. The following results represent the data collected from
19:15:19 to 19:26:47 after the temperature dropped to the safe
range, during which the 4G antenna was unplugged from
19:18:48 to 19:19:08 and from 19:25:48 to 19:26:18 to mimic
two short jamming attacks. The vaccine box was opened at

19:25:27 and remained open until 19:26:47. As the sensing
interval is 10 seconds, we collected in total 92 data points.
Due to jamming we missed 3 records from the ﬁrst attack
and 4 records from the second one.

From the 92 data points one can experimentally investi-
gate the critical latencies of the system, i.e., (cid:15)1, (cid:15)2, and (cid:15)3. We
observed that (cid:15)1 was between 50 to 158 ms with a mean of
84 ms and a variance of 0.002 ms2. When the 4G signal was
stable, the 4G transmission latency (cid:15)2 was between 50 and 80
ms, with a mean of 76.3 ms and a variance of 2.2×10−5 ms2.
Each data record was about tens of KB so it did not inﬂict
huge transmission overhead. The blockchain latency (cid:15)3 was
less than 60 ms with a mean of 53.85 ms and a variance of
2.36 × 10−7 ms2, as we had only 6 blockchain nodes. The
maximum latency among all the data was 7.78 seconds. So
one can safely assert that the total latency upper limit was 8
seconds for our test system.

Fig. 6a visualizes the actual shipping trace. We setup
ﬁve predeﬁned security checkpoints (gold stars) and ﬁxed
a radius of 500 meters (purple big circles). The security
checkpoints and radius together deﬁne an approved ground
transportation trace, which is a road shown as a faint white
trace from left to right 6. As one can see from the ﬁgure,
the location was recorded, uploaded and authenticated reg-
ularly (red dots), demonstrating a trusted actual transporta-
tion trace. Although there were 3+4 planned jamming losses
(green crosses), the records were all resent and recovered
by the next following one. The 3 dropped records in the
middle were clear to see as green crosses, with one of them
overlapping with another data. The 4 in the end were all
overlapping with others as we were circling in a small area.
As one can see from the ﬁgure, the driver clearly did not
deviate from the predeﬁned route.

During transportation, we ﬁrst kept the temperature low
and made it stay steady at 14 degrees Celsius. Fig. 6b shows
the recordings of our actions, where we kept the box closed
and sealed during time 0-600 (blue stars), and then opened
it (at a summertime) after time 600 (red stars). Note that
the x-axis uses the relative time from 0 to 700 instead of
the actual data collection time for better illustration. After
the box was opened, its internal temperature was quickly
increased for 10 consecutive records and stayed stable at

6. Not to confuse with the grey one, which is a river.

39°41'30"N39°42'NLatitude119°08'E119°09'ELongitudeEsri, HERE 2000 ft  500 m Shipping TraceActual Uploaded LocationsCheckpointsCheckpoint Safe LimitsRecovered Lost Positions0100200300400500600700time/s12141618202224temperature/°CBad TemperatureNormal TemperatureSafe Temperature ZoneRecovered Normal TemperatureRecovered Bad Temperature0100200300400500600700time/s01Photosensor logic level outputDark--No lightBright--With lightRecovered Normal DarkRecovered Violation Brightaround 24 degrees. When these records were synchronized
at all blockchain nodes, it was easy to observe and prove
that this vaccine was exposed to undesirable temperature
and should be no longer acceptable for customer use. Our
planned jamming losses at time 200 (yellow stars) and 600
(orange stars) were also recovered, as shown in this ﬁgure.
The outputs of the photosensor were illustrated in Fig.
6c. One can see clearly that the sealed vaccine box was
opened at time 600. When the box was sealed, it remained
dark (with a proper threshold that can negate faint LEDs
inside the box) and hence the photosensor constantly output
0 (blue crosses); while when the box was opened at time
600 and was exposed to the sun, the photosensor snapped
the ray and output the 3.3 V high logic voltage level to
the board (red crosses indicating the logical output of 1 in
Fig. 6c). The photo and temperature sensors together can
enhance the conﬁdence that the box and its inside were
indeed compromised. Fig. 6c also demonstrates that our 3+4
planned jamming losses at around time 200 and 600 were
recovered correctly.

6 DISCUSSIONS

We emphasize that this paper presents a general framework
that extends the on-chain trust to off-chain in a truthful,
real-time and continuous manner. It is not conﬁned to the
vaccine tracing use case – the framework can be extended
to any use case that meets the requirements speciﬁed in
Section 2. Most importantly, future implementations must
follow Deﬁnition 1, which deﬁnes the three properties of
trustworthiness, i.e., truthfulness, real-time consistency and
continuity, to ensure the trustworthy mapping between a
physical object and its digital entity.

Our framework scheme might suffer from the following
two security limitations. 1) As we have claimed in the
trust model section, physical damages towards TEE is out
of scope of this paper. Such type of attacks is actually
very possible. For example, since our method retrieves data
using the Sensors get interface from sensors every ∆t
time, an attacker may physically remove the sensor and
weld a malfunctioning one within the ∆t window. 2) The
monitoring sensors can only capture the events occurring
in the close neighborhood of the physical object but cannot
prove the authenticity of the object. Therefore we cannot be
100% sure whether or not the object is replaced by a fake
midway when the sensors are disabled or when the object
is out of their sensing ranges – we can only suspect that the
object could have been mistreated when the sensors are disabled.
A typical example is the wine forgery attack which may
happen during transportation, where an attacker may ﬁrst
disable all sensors, then drill a tiny hole on the wine body,
extract all the real wine, replace it with fake one, and ﬁnally
plug the hole to ﬁnish up.

Both limitations mentioned above can be mitigated using
Physical Uncloneable Function (PUF). Limitation 1 is essen-
tially an authentication problem – in our current design
we do not authenticate our sensors, and any connection
through wire is considered secure. PUF-enabled sensors
can achieve efﬁcient authentication and thus provide a
practical security improvement, ensuring not only our code
programmed in TEE is tamper-proof, but also our hardware

11

component connected to TEE is tamper-proof. Limitation 2
is a fundamental problem in product anti-forgery tracing,
and digitally verifying the authenticity of a physical object is
notoriously hard. One possible solution is to design a digital
seal using PUF. A digital seal is like a regular seal, but can
electronically detect sabotage by continuously verifying the
integrity of the protective physical material. In the scenario
of wine anti-forgery tracing, one can cover the wine bottle
with a double-layer thin metal membrane, which works as
a capacitance. A PUF-enabled detector is then connected
to the positive and negative side of the capacitance to
continuously monitor the capacitance value in each pixel,
then output the values in the structure of a matrix. As any
touching or drilling can signiﬁcantly affect the capacitance
values of an area, the mis-behaviors can then be identiﬁed.
In our future research, we will explore PUF based solution
approaches to overcome the limitations mentioned above.

7 RELATED WORK

There exist a few attempts to extend the blockchain trust-
worthiness from on-chain to the physical world, by either
applying blockchain directly to the physical scenarios mak-
ing use of blockchain security, or using secure hardware or
cryptographic primitives to enhance blockchain’s internal
security and trustworthiness.

Blockchain technologies have been applied in the ﬁelds
of smart city, autonomous driving, smart home, etc. Zhou et
al. proposed a hierarchical IoT architecture for smart home
environments, where each home maintains a private chain
that can hierarchically construct into a public one. However
there were no countermeasures or discussions regarding
how to stop the home owner from faking the record and
lying to the public chain and how to validate the subchain
data authenticity at the public chain. Guo et al. developed
an event recording system for autonomous vehicles with
blockchain, and presented the concept of “proof of event”,
which is a hash digest of a combination of event locations,
embedded vehicle event recorder readings and timestamps.
This digest does not include any unforgeable data or data
from an authenticated source, thus it can be easily faked af-
terwards [22]. It is also vulnerable to sybil attacks, where the
fake data is shared among all sybil identities and uploaded
by all, in order to increase the conﬁdence of the fake data.

The above examples demonstrate a common problem
shared by most blockchain applications: the blockchain
trustworthiness is conﬁned within the on-chain environ-
ment. There is no strong guarantee that the on-chain records
continuously and truthfully reﬂect the true physical world,
and that the blockchain control instructions are forcibly
deployed on time.

Secure hardware or cryptographic primitives were also
employed to enhance the blockchain security. Lind et al. pro-
posed TEEChain, a TEE-based secure payment blockchain
network in which TEE was used as treasuries to manage the
off-chain funds and payments inside the TEE secure zone
[23]. Ayoade et al. used the Intel SGX to securely ofﬂoad
data from on-chain to SGX-powered databases, which can
hash the stored data and compare to the correct hash
stored in the blockchain for data correctness veriﬁcation.
Dang et al. managed to scale blockchain via sharding and

Intel SGX. They made use of the protected enclave module
in Intel SGX to enhance security and increase the per-
formance of the Proof-of-Elapsed-Time consensus and the
PBFT consensus algorithms. Chainlink [24] and Provable
[25] adopted various secure hardware such as Intel SGX
to build a trusted inter-blockchain data exchange solution
or website-to-blockchain trusted data input oracle. Some of
these works made impressive progress by achieving trust
extension between blockchains or between a blockchain and
other digital environments, but they cannot extend trust
from on-chain to the physical world. Not to mention that
Intel SGX is a server-level hardware that typically costs
around $300 to $400, which highly restricts its adoptions
by edge applications.

In this paper we propose a scheme to extend trust from
on-chain to the off-chain physical world by developing a
TEE-enabled trusted environment monitoring system and a
fault tolerance uploading protocol to achieve real-time high
data consistency between on-chain digital world and off-
chain physical world. As far as we know, we are the ﬁrst
to overcome all engineering challenges and develop such
a trustworthy system over the Cortex M33 MCU, which
is highly competitive in price – around $40, approximately
one-tenth of that of Intel SGX.

8 CONCLUSIONS

In this paper, we propose a scheme to extend blockchain
trust from on-chain to off-chain, and implement the full
system taking trustworthy vaccine tracing as an example.
Our scheme consists of a TEE-enabled Trusted Environment
Monitoring System that continuously senses and generates
anti-forgery data, and a consistency protocol that uploads
data from the system to blockchain in a truthful, real-time
consistent, continuous, and fault-tolerant way. Our exper-
iment records the internal status of the vaccine shipping
box during the whole shipping process. One can see that
our system is quite efﬁcient with approximately 7-second
of system processing time, 70ms of transmission time, and
40ms of blockchain synchronizing time. Our planned jam-
ming attacks and physical violations are also captured and
errors are recovered as expected.

As an exploratory work, we select vaccine tracing as
an example and choose the photosensor, GPS sensor and
temperature sensor to describe the status of a moving vac-
cine box. As we have our full system available, which is
a relatively general framework that can customize critical
parameters and tools, researchers can extend to any appli-
cation of their interest by developing their own additional
sensing devices based on our system template. We keep
this work open-sourced at https://github.com/zhuaiballl/
TEE-enabled Trusted Environment Monitoring System.

9 ACKNOWLEDGEMENT

It was partially supported by the National Key R&D
Program of China under grant 2019YFB2102600, the Na-
tional Natural Science Foundation of China under grants
U1811463, 61971014, 61832012, 61771289, and 11675199, and
the National Science Foundation of the US under Grants
IIS-1741279 and CNS-1704397.

REFERENCES

12

[1] Nature, “Chinese maker of

faulty rabies vaccines ﬁned
Available
of
https://www.nytimes.com/2018/07/23/world/asia/

bhttps://golang.org/doc/illions
at
china-vaccines-scandal-investigation.html, July 23, 2018.

yuan,”

[2] T. N. Y. Times, “In china, vaccine scandal

infuriates parents
and tests government,” Available at https://www.nature.com/
articles/d41586-018-07136-z, October 23, 2018.

[3] C. M. Nelson, H. Wibisono, H. Purwanto, I. Mansyur, V. Moniaga,
and A. Widjaya, “Hepatitis b vaccine freezing in the indonesian
cold chain: evidence and solutions,” Bulletin of the World Health
Organization, vol. 82, pp. 99–105, 2004.

[4] C. Dwork, N. Lynch, and L. Stockmeyer, “Consensus in the pres-
ence of partial synchrony,” Journal of the ACM (JACM), vol. 35,
no. 2, pp. 288–323, 1988.

[5] ——, “Consensus in the presence of partial synchrony (pre-
liminary version),” in Proceedings of the third annual ACM
symposium on Principles of distributed computing, 1984.

[6] M. J. Fischer, N. A. Lynch, and M. S. Paterson, “Impossibility
of distributed consensus with one faulty process,” Journal of the
ACM (JACM), vol. 32, no. 2, pp. 374–382, 1985.
“Eos whitepaper,

v2,” Available

[7] block.one,

https:

at

//github.com/EOSIO/Documentation/blob/master/
TechnicalWhitePaper.md/, Mar 16 2018.
S. Nakamoto, “Bitcoin: A peer-to-peer electronic cash system,”
Manubot, Tech. Rep., 2019.

[8]

[9] K. Murdock, D. Oswald, F. D. Garcia, J. Van Bulck, D. Gruss, and
F. Piessens, “Plundervolt: Software-based fault injection attacks
against intel sgx,” in 2020 IEEE Symposium on Security and
Privacy (SP), 2020.

[10] C. Reinbrecht, A. Susin, L. Bossuet, G. Sigl, and J. Sep ´ulveda, “Side
channel attack on noc-based mpsocs are practical: Noc prime+
probe attack,” in 2016 29th Symposium on Integrated Circuits and
Systems Design (SBCCI).

IEEE, 2016, pp. 1–6.

[11] Intel, “Intel® processors voltage settings modiﬁcation advi-
sory,” Available at https://www.intel.com/content/www/us/
en/security-center/advisory/intel-sa-00289.html, 2020.

[12] Z. Kenjar, T. Frassetto, D. Gens, M. Franz, and A.-R. Sadeghi,
“V0ltpwn: Attacking x86 processor integrity from software,” in
29th {USENIX} Security Symposium ({USENIX} Security 20),
2020.

[13] Z. Chen, G. Vasilakis, K. Murdock, E. Dean, D. Oswald, and
F. D. Garcia, “Voltpillager: Hardware-based fault injection attacks
against intel sgx enclaves using the svid voltage scaling interface,”
to be seen in Usenix Security ’20, 2020.

[14] R. Spreitzer and T. Plos, “Cache-access pattern attack on dis-
aligned aes t-tables,” in International Workshop on Constructive
Springer, 2013, pp.
Side-Channel Analysis and Secure Design.
200–214.

[15] S. Vafa, M. Masoumi, and A. Amini, “An efﬁcient proﬁling attack
to real codes of pic16f690 and arm cortex-m3,” IEEE Access, vol. 8,
pp. 222 520–222 532, 2020.

[16] M. Petrvalsky, M. Drutarovsky, and M. Varchola, “Differential
power analysis attack on arm based aes implementation without
explicit synchronization,” in 2014 24th International Conference
Radioelektronika.

IEEE, 2014, pp. 1–4.
[17] M. Yoshikawa and Y. Kojima, “Efﬁcient random number for the
masking method against dpa attacks,” in 2011 21st International
Conference on Systems Engineering.

IEEE, 2011, pp. 321–324.

[18] S. Salvador and P. Chan, “Toward accurate dynamic time warping
in linear time and space,” Intelligent Data Analysis, vol. 11, no. 5,
pp. 561–580, 2007.

[19] N. Semiconductor, “Nxp semiconductors lpc55s6x arm cortex-m33
microcontrollers,” Available at https://www.nxp.com/products/
processors-and-microcontrollers/arm-microcontrollers/
general-purpose-mcus/lpc5500-cortex-m33/
high-efﬁciency-arm-cortex-m33-based-microcontroller-family:
LPC55S6x, 2020.

[20] Golang, “Golang documentation,” Available at https://golang.

org/doc/, 2020.

[21] E. Buchman, J. Kwon, and Z. Milosevic, “The latest gossip on bft

consensus,” arXiv preprint arXiv:1807.04938, 2018.

[22] H. Guo, E. Meamari, and C.-C. Shen, “Blockchain-inspired event
recording system for autonomous vehicles,” in 2018 1st IEEE
International Conference on Hot Information-Centric Networking
(HotICN).

IEEE, 2018, pp. 218–222.

[23] J. Lind, O. Naor, I. Eyal, F. Kelbert, E. G. Sirer, and P. Piet-
zuch, “Teechain: a secure payment network with asynchronous
blockchain access,” in Proceedings of the 27th ACM Symposium
on Operating Systems Principles, 2019, pp. 63–79.

[24] ChainLink, “The chainlink network provides reliable tamper-
proof inputs and outputs for complex smart contracts on any
blockchain.” Available at https://chain.link, 2020.

[25] Provable, “The provable blockchain oracle for modern dapps,”

Available at https://provable.xyz, 2020.

13

Dongxiao Yu received his BS degree in Math-
ematics in 2006 from Shandong University, and
PhD degree in Computer Science in 2014 from
The University of Hong Kong. He became an
associate professor in the School of Computer
Science and Technology, Huazhong University
of Science and Technology, in 2016. Currently
he is a professor at the School of Computer Sci-
ence and Technology, Shandong University. His
research interests include wireless networking,
distributed computing, and graph algorithms.

Chunchi Liu received his PhD degree from The
George Washington University, Washington DC,
USA, in 2020, and his BS degree with distinction
from Beijing Normal University, Beijing, China, in
2017, both in Computer Science. He is now the
Lead Scientist at Ernst & Young Greater China
Area and is a member of EY global executive
management division. His current research fo-
cuses on Blockchain, Internet of Things, Applied
Cryptography and Security.

Hechuan Guo is a PhD student
in Com-
puter Science at Shandong University, Qingdao,
China. He received his BS Degree in Computer
Science in 2017 and MS degree in Engineering
in 2020, both from Beijing Normal University,
Beijing, China. His current research focuses on
Blockchain, Consensus Protocols, Security, and
Applied Cryptography.

in Computer
Minghui Xu is a PhD student
Science at The George Washington Univer-
sity, Washington DC, USA. He received his
BS degree in Physics in 2018 and minored in
Computer Science during 2016-2018 from Bei-
jing Normal University, Beijing, China. His cur-
rent research focuses on distributed computing,
blockchain, and quantum computing.

Shengling Wang is a professor in College of In-
formation Science and Technology, Beijing Nor-
mal University. She received her Ph.D. in 2008
from Xi’an Jiaotong University. Then she did
her postdoctoral research in the Department of
Computer Science and Technology at Tsinghua
University from 2008 to 2010, and worked as a
faculty member from 2010 to 2013 in the Institute
of Computing Technology of CAS. Her research
focuses on mobile/wireless networks, game the-
ory, and crowdsourcing.

Jiguo Yu received his Ph.D. degree in School of
Mathematics from Shandong University in 2004.
He became a full professor in the School of Com-
puter Science, Qufu Normal University, Shan-
dong, China in 2007. Currently he is a full profes-
sor in Qilu University of Technology (Shandong
Academy of Sciences), His main research inter-
ests include privacy-aware computing, wireless
networking, distributed algorithms, blockchain,
and graph theory.

Xiuzhen Cheng received her MS and PhD de-
grees in computer science from University of
Minnesota, Twin Cities, in 2000 and 2002, re-
spectively. She was a faculty member at the
Department of Computer Science, The George
from 2002-2020. Cur-
Washington University,
rently she is a professor of computer science
at Shandong University, Qingdao, China. Her
research focuses on blockchain computing, se-
curity and privacy. She is a Fellow of IEEE.

