2
2
0
2

g
u
A
9

]

R
C
.
s
c
[

4
v
1
2
1
1
0
.
6
0
2
2
:
v
i
X
r
a

The Loop of the Rings: A Distributed
Cooperative System

Arash Vaezi1
Department of Computer Engineering, Sharif University of Technology
avaezi@ce.sharif.edu

Parsa Mohammadian
Sharif University of Technology
pmohammadian@ce.sharif.edu

Sara Azarnoush
Sharif University of Technology
sa.azarnoush@sharif.edu

Abstract

We introduce a decentralized and distributed collaborative environment denoted by LoR, which
stands for ”The Loop of the Rings". The LoR system provides a secure, user-friendly cooperative
environment for users who can oﬀer particular services to each other. The system manages to
provide reliability and security using randomized techniques in a well-structured environment. These
technics together provide consensus and trust for the groups of collaborator parties. This platform
carries a blockchain-based distributed database to save important information.

The LoR system deals with cooperation rather than transactions. The system should manage
and verify the collaboration between each group of participants who work with each other from the
start to the end of the collaboration.

The unique structure of the LoR system makes it a secure and reliable middleware between a
(distributed) database and a service provider system. Such a service provider could be a freelancer
or an IoT management system. The 5G-related services can be organized to be managed by the
LoR platform.

2012 ACM Subject Classiﬁcation

Keywords and phrases Decentralized System, Cooperative Workplace, Reliable Distributed System,
Randomized Technics, Blockchain

Digital Object Identiﬁer 10.4230/LIPIcs...

Acknowledgements I want to thank Arash Pourdamghani, for his help.

1

Introduction

A collaborative system is designed to help people involved in a common task to achieve their
goals. Douglas Engelbart ﬁrst envisioned collaborative computing in 1951 and documented
his vision in 1962 [11]. In the larger family of distributed applications, collaborative systems
are distinguished by the fact that the agents in the system are working together towards a
common goal and have a critical need to interact closely with each other: sharing information
and resources, exchanging working requests with each other, and checking in with each other
on their status.

Many applications provide platforms for people to present their products or services to
other people in the current world. Home delivery applications and online stores are among
the many examples. In such an application, let alone the administrators, one user pays for a

1 Main Contributor

© Arash Vaezi;
licensed under Creative Commons License CC-BY

Leibniz International Proceedings in Informatics
Schloss Dagstuhl – Leibniz-Zentrum für Informatik, Dagstuhl Publishing, Germany

 
 
 
 
 
 
XX:2

The Loop of the Rings

service, and one or more other users provide a service. In LoR, we call the users who pay as
investors and all other users who serve services as workers, regardless of the task a worker
may choose. Denote such a group of coworkers by a cooperation ring. The participants of
a cooperation ring do not know who is selected to work with them. A random procedure
chooses the collaborators of each cooperation ring. No matter who works with whom, every
user tries to participate in more cooperation rings to earn more money. The LoR platform
administers parallelism for various cooperation rings. Every cooperation ring has one investor
and one or more workers. So, there could not be more than one investor in one cooperation
ring. The LoR system uses an internal monetary system. The goal of designing this system
is not to propose a new crypto-currency. This currency helps the collaborators to trade their
services with each other.

The LoR system can be seen as a more generalized platform that administrators can
use to implement various applications. An implementation of the LoR system is called an
instance of the system. Each instance of the system contains many cooperation rings. We
assume that for providing the LoR protocol, there is a system administrator that determines
which services are required and suitable for their work. The administrators should specify
the list of the services. Note that users cannot deﬁne a new service themselves. Although
LoR provides a comprehensive workplace, a service to be allowed to be deﬁned in an instance
of the system should meet some conditions that we will mention later. Examples of such
services that administrators can deﬁne in their own instances of the LoR system are video
streaming, providing storage, peer-reviewing, providing a particular general service, and even
renting hardware such as CPU or GPU. A user’s task is to choose a service from the list
of available services. The structure and the policies of the system guarantee a trustworthy
environment with a high probability that it is safe enough to be reliable for the users.

1.1 Related and Previous Works

Various distributed cooperative systems have been proposed previously [22, 19]; this article
intends to introduce a general platform. Everyone who has access to an instance of the LoR
system via the internet or any internal network can work on the platform provided by this
system.

The LoR system provides a cooperative environment. The most popular cooperative
systems are based on a platform named blockchain. Blockchain creates a decentralized
database that would store and verify transactions between diﬀerent parties without any
intermediaries, and in a veriﬁable and permanent way. The LoR system also uses blockchain
to implement a trustful background for saving a database.

The blockchain system is a growing list of records, called blocks, which are linked using
cryptography [14, 26]. This system has already passed the phase of just being a monetary
system. Various methods have been used to facilitate ﬁnancial transactions, such as proof-of-
work or proof-of-stake [8]. One of the well-known downsides of the blockchain system is its
very low concurrency. In the past years, teams of researchers such as [21], tried to resolve
this problem. However, a universal solution has not been proposed yet. Some protocols
provide a solution to the problem of scalability. It enables users to perform transactions
oﬀ-chain and massively cut down data processing on the blockchain. Solutions like payment
channels, channel factories, payment channel hubs, side-chains, and commit-chains have been
stated in the literature [18]. The LoR system only uses blockchain as a repository that safely
saves some information. The low concurrency performance of the blockchain system does
not aﬀect the platform’s performance provided by LoR.

In the following we describe a few other related collaborative workplaces and designs. In

A. Vaezi

XX:3

2021 I. Afrianto et al. [1] introduced a prototype model of a freelance market system using
blockchain technology based on smart contracts2. A freelancer is an independent laborer
who earns wages on a per-job or per-task basis, typically for short-term work. A freelancing
marketplace is a site or platform in which freelancers can ﬁnd employers and transact digitally.
Afrianto’s proposed system is distributed and decentralized. Implementing such a system in
LoR makes it even more secure and customizable. The tasks can be considered as services,
and the cooperation rings specify the cooperation between users. LoR guarantees that users
work correctly and that no one can abuse the system.

In 2019 M. Gandhi et al. [15] presented a practical implementation of the decenteralized
freelancing system based blockchain named HireChain. Also, recently in 2022 K. S. Shilpa et
al. [30] investigates how a freelancer marketplace can be implemented using the Ethereum
blockchain and smart contracts.

These three works aimed to solve current issues of freelancing platforms, including
unreliability, late payment, and delayed work. LoR introduces a general middleware that
uses energy eﬃciency and ﬂexible structure to solve these issues.

In 2019 Bo Tang et al. [31] published a blockchain-based trustful framework for collab-
orative IoT. It allows IoT platforms to construct arbitrary trustful relationships with one
another, with precise criteria for intended partnerships enforced by a mix of smart contracts.
Considering LoR ﬂexibility, an administrator can deﬁne such services on the new platform
and beneﬁt from the system’s security and reliability.

In addition, with the development of faster wireless technologies, such as 5G [29], IoT is
anticipated to be quite popular. LoR is a convenient solution to 5G and IoT early challenges
such as decentralization, transparency, risks of data interoperability, network privacy, and
security vulnerabilities [27].

In 2021 Liang Yuan et al. [34] introduced a blockchain-based distributed platform called
CoopEdge, which drives and supports cooperative edge computing by building trust and
incentives between users. Edge computing delivers proximity to data at its source. CoopEdge
is a distributed computing framework that brings enterprise applications closer to data
sources such as IoT devices or local edge servers.

On the CoopEdge platform, there are four roles. An edge server (Task Publisher) can
publish a computation task for other edge servers to contend it. Task Candidates are to
respond to express their interest in executing the task. A Task Executor is selected from
candidate edge servers based on their reputation. Reputation deals with maintaining a value
for each peer that reﬂects the peer’s past system behavior. In a reputation-based system, a
peer with a good reputation is more likely to receive better services than a peer with a bad
reputation. In CoopEdge, after the completion of a task, Task Recorder records the Task
Executor’s performance in executing the task.

In 2008 Bocek et al. [6] designed a reputation-based incentive scheme for large-scale, fully
decentralized peer-to-peer collaboration networks to encourage the participants to share their
resources such as bandwidth and storage space and to edit and vote for documents that are
shared to make shared history better and increase the reputation to get better services. This
design is not blockchain-based.

In 2009 Bocek et al. [5] presented PeerVote, a decentralized voting mechanism in a
peer-to-peer collaboration application. PeerVote is not blockchain-based and oﬀers a strategy
to maintain the quality of documents after each modiﬁcation in the presence of malicious
peers.

2 For more information on smart contracts see: https://www.ibm.com/topics/smart-contracts

XX:4

The Loop of the Rings

The LoR system looks at the world more comprehensively. Structural randomized
procedures provide security for the systems. There is a table, a database, that holds the
information of the participants. This table can be implemented via a decentralized approach.
A blockchain-based approach makes LoR a decentralized collaborative system that can be
used for providing various types of services. The ﬂexibility of the LoR design makes it easy
to use alternative approaches for implementing the subsystems and procedures of the system.
For example, we will see that there are teams of parties who verify the cooperation rings, one
who prefers to use a reputation-based approach can choose the members of the veriﬁcation
teams based on a reputation computing method. Here, we use a randomized method and
prove that every team is highly reliable. As a secure middleware LoR can provide a reliable
environment for edge computing services. The protocol guarantees trust in the running task
on the data at its source for all the users.

2

The Summary of the Overall System

In the current society, people’s requirements are satisﬁed by others’ services. We introduce
a system that makes it easy for anyone to present a service or to invest in acquiring that
service. Reliability and trustfulness are the key factors in this system.

There are a number of pre-determined services in the system denoted by a list of available
services. The LoR system sees a general capability of a user as a type of currency and denotes
it as a coin (e.g., cpu-coin for a user willing to provide CPU as a service). Generally, the
users are called traders as they are supposed to be able to work together and exchange their
services with each other. This system uses an internal crypto-currency which is called ARA.
One unit of ARA is denoted by A. A user should purchase a speciﬁed amount of ARA to be
able to take part in the system. Users can make many requests and cooperate in as many
collaborations as they want. The type of a request also indicates if a trader needs a service
or wants to provide a service, either way the trader should pay for the request. Each request
will be converted into a coin structure. Then, coins will be assembled into cooperation rings.
A cooperation ring consists of at least two participants. There is one investor who needs a
job to be done, whereas all the other participants are the workers.

If a trader refuses to do their duty correctly, others cannot continue their contribution
anymore. So, there are suitable managing and punishment policies in the system. Participants
are assigned to each other randomly by the system, and participants cannot choose their
collaborators. So, the co-workers cannot be anticipated, and there could not be any collusion.
The LoR system provides a trustful platform because of its unique design. We will prove
that the system is secure with a high probability if it has enough traders. In fact, there
are additional duties that traders should do to keep the system secure. We can consider
these tasks as consensus algorithms. The system selects random traders to play roles in
teams that are called veriﬁcation teams. Veriﬁcation teams check and verify cooperation
rings and their participants in a periodic manner. The traders should gather a collection
of the cooperation rings and submit it to the system. This collection is called a fractal
ring. Corresponding to every fractal ring, there is a veriﬁcation team that periodically
checks the status of the cooperation rings. A trader has to run a randomized algorithm to
submit a fractal ring. All cooperation rings in a submitted fractal ring are to start almost
simultaneously. Every participant in a fractal ring can only receive their money after the
conﬁrmation of the veriﬁcation team. Note that the complexity of the system is transparent
to the users (traders or administrators).

The traders are motivated to cooperate in various services. If the volume of the provide

A. Vaezi

XX:5

Figure 1 Requests may be sent in the middle of two checkpoints, but the veriﬁcation team checks

them only at the arrival of the following checkpoint.

Figure 2 A frame of the system.

requests for one speciﬁc service gets large enough, collaborating in other services becomes
more beneﬁcial for traders. That is why we expect a large number of traders to be able to
provide diﬀerent types of services.

The system carries speciﬁc time-stamps named Checkpoints. These checkpoints indicate
approximate time periods for the LoR system. The time between two checkpoints is the
expected time required for a collaboration to start and end successfully. Although requests
can be broadcasted at any time, they will be taken into account only during the upcoming
checkpoint. We divide the period between every two checkpoints (C P s) into a large number
of smaller cycles. Denote each such cycle as a Round (see Figure 1). The system can
dynamically estimate and change the number of rounds between the checkpoints. By the
arrival of each checkpoint, a process called checkpoint-process starts. The checkpoint process
is a time span during which the system runs some procedures. A round-process also takes a
little time, and by the arrival of each round, the system checks the status of every running
cooperation. The system runs continuously, and these procedures help the system to keep
being secure and reliable.

A cooperation ring must be submitted to the system successfully for its traders to be able
to start working with each other. For a cooperation ring to be submitted, a trader must put
it in a fractal ring and submit the fractal ring to the system. The submission process of a
fractal ring is to verify all the cooperation rings involved in it. The fractal rings should be
constructed by traders and veriﬁed by veriﬁcation teams. The veriﬁcation process includes
making sure that the new cooperation rings are compatible with the previous status of the
system. The previous status of the system is saved in a hierarchical storing structure. The
structure needs to be mutually excluded for the veriﬁcation teams to be able to write in it.
During a successful veriﬁcation process, the information of the newly submitted fractal rings
will be saved. This ends a successful submission process (see Figure 2).

After successful submission, each group of coworkers in the cooperation rings of a fractal
ring start to work by the arrival of the next checkpoint, say C Pa. Between C Pa and
C Pa+1 there are many rounds, say a hundred. In a round process, a veriﬁcation team that

RoundsCheck−PointCheck−PointRequestsTradersRequestsCoinsCooperation−RingsFractal−RingsAFractalVerfication−TeamsDuring−A−Checkpoint−ProcessComing−All−the−TimesXX:6

The Loop of the Rings

was assigned to this fractal ring before C Pa checks if every cooperation is veriﬁed by all
the members of the cooperation ring. If there is a trader who is not satisﬁed with the
collaboration, the whole cooperation ring is not allowed to continue working anymore. A
veriﬁcation team also checks if a trader accomplished their duties correctly as a member of
other pervious veriﬁcation teams. We discuss the duties of a veriﬁcation team later in the
policy section.

There is a hierarchical structure for saving the status, accounts and the required informa-

tion of the system. The system uses four tables for this hierarchical storage:

1. 1) Coin Table

2. 2) Cooperation Table

3. 3) Ring-Control-Block (RCB)

4. 4) Traders-Control-Block (T CB).
The T CB table saves the information of the whole system permanently. All the information
from other tables will be summarized in the T CB table. Only veriﬁcation teams are allowed
to write in this table, and it is mutually excluded for these teams.

From a user side: A user pays to receive an appropriate amount of ARA to enter the LoR
system. Next, the new trader requests a (or more) coin(s) by running a function. The function
decreases from the trader’s account and creates a coin table. The coin is now available in
the system with a unique ID. The trader runs another procedure to create cooperation rings.
This procedure selects random coins and binds them to each other to create a cooperation
ring. The cooperation ring gets available in the system with a cooperation table and a unique
ID. Then, the trader assembles enough cooperation rings to run another random function
that creates a fractal ring. Creation of a fractal ring results in invoking a function that selects
a veriﬁcation team out of the traders in the system. This team checks all the traders with at
least one coin in this fractal ring. Consider the checkpoint where a fractal ring is veriﬁed.
All the cooperation rings in this fractal ring should start working by the beginning of the
next checkpoint. During their collaboration, the veriﬁcation team checks all the participants
periodically. Note that all the random methods used are irreversible or non-predictable. The
LoR system provides an iterative random procedure. This procedure enforces the correct
behavior, and even if traders do not trust each other, everything should work out correctly.

3

The LoR system in details

This section reveals how the LoR system works. Note that we assume that there is a system
administrator who intends to implement an instance of the LoR system for their application.
Based on the requirements of the users of that application, the administrator can create an
instance of the system. See the following to be more familiar with the details of the elements
of an instance of the LoR system.

3.1 Traders

Every trader has an account, a wallet, a unique ID, and several other information that are all
stored in an entry in the T CB table, which we will discuss later. The wallet has a private key
and a public key, and it works exactly as those wallets miners [2] have in the older systems.
A new trader has to receive enough internal crypto-currency (ARA) from an older trader
already inside the system. The least amount of ARA a trader needs to be able to start
working in a cooperation ring equals the cheapest service deﬁned by the administrator.

A. Vaezi

3.2 Coins

XX:7

A system administrator can deﬁne several types of services based on the general services that
their users (traders) can provide. Each trader may contribute to diﬀerent types of services.
A service will be demonstrated in a structure called a coin. So, an instance of the LoR
system has diﬀerent classes of coins speciﬁed by the system administrator. There are some
particular classes of coins called investment coins. If a trader requests an investment coin,
they indicate that they intend to invest for collaboration to begin.

Figure 3 The coin table and the cooperation table. The left table includes all information
required for each currency. The right table illustrates the cooperation table, which includes the
information required for a cooperation ring in a fractal ring.

As mentioned, every coin is represented by a structure. This structure is denoted by
a coin table (see Figure 3). The coin table is unique and ﬁxed in the system. It has one
column and a few rows. Each row stands for one speciﬁcation. This structure helps bind
collaborators to each other to create cooperation rings.

As mentioned before, there is a leading currency, called ARA, in the LoR system, and the
cost value of every coin is based on this currency. One unit of this currency is denoted by A.
Every cooperation ring has exactly one trader named investor who invests in collaboration to
get started by a group of coworkers. A trader who wants to be an investor in a cooperation
ring has to request investment coins. When a trader t requests for some type of coin, there
is a standard general function f in the system that creates a coin table based on the request
of t (a request sent by trader t for coin c is denoted by R(t, c)).

The entries of a coin table are explained below;

1. Coin-ID: Every coin has a unique ID. This ID will be generated by f .
2. Amount-based-on-One-Unit: This entry reveals how much the coin costs based on ARA

e.g. 0.45A.

3. Status: There are four values for this entry: Run, Blocked, Expired, Paid. If a coin is
used in a cooperation ring, the Status is Blocked. If collaboration is ﬁnished and the coin
is in the memory of an investor, its Status will be changed to Expired. If the coin is from
an investor in the memory of other traders as their payment, the Status will be changed
to Paid. If a coin is free for a trader to bind it to a group of other coins, its Status should
be Run i.e. it is a newly created coin based on a request.

4. Type: This entry shows the type of a coin. The types of coins are read-only. Note that
no trader can add or remove any type of coin to the system. Each coin type must have a
clear exchange rate from that type to ARA.

5. Next/Previous-in-cooperation ring: A group of coworkers has to be bound to each other

StatusTypeCoin−IDAmount−based−on−One−UnitBinded−onOwnerExpired/PaidBlockedRunStatusofaCoinNext−in−Cooperationl−RingPrevious−in−Cooperation−RingNumber−of−Required−RoundsOwnerPrevious−in−Fractal−RingNext−in−Fractal−RingWeightNumber−of−Group−MembersGroup−IDCoinTableCooperationTableXX:8

The Loop of the Rings

on a cooperation ring. This ring is created on the coins and not the traders. A trader
may take part in many cooperation rings by using frequent coins. Two links in coin tables
help construct cooperation rings.

6. Bind-on: When a coin is blocked in the memory of another trader, this entry reveals
whose memory is that. We use a strategy to create an artiﬁcial lock. This entry is used
for that strategy. The locking strategy makes traders who request investment pay before
they receive any services, and also, this strategy ensures that all the worker traders do
their work correctly before they get paid.

7. Owner: The owner of a coin is the trader who requested the coin previously.

3.3 Cooperation Ring

A group of traders who are chosen to work with each other is demonstrated in a cooperation
ring structure. A cooperation ring has a speciﬁc storing structure, called ”cooperation table"
which is illustrated inFigure 3. A cooperation table allows a trader to create a fractal ring by
selecting a proper subset of the available cooperation rings presented in the system. Traders
who participated in a cooperation ring are only allowed to start working from a speciﬁc
system’s checkpoint. The system policies guarantee reliable and trustful cooperation with
high probability. These policies are presented in Section 5.1.

Suppose some traders are chosen to work together. They need others’ cooperation to
accomplish a task. Suppose there is one investtor who previously requested an investment
coin to invest in hiring a set of employers with diﬀerent capabilities. This group of traders
is selected by a random strategy to assemble a cooperation ring. To implement a random
mechanism, we can use the same strategy used in [16], which is based on the veriﬁable-
random-functions [25].

3.3.1 The Lock Strategy

Each involved coin of a trader in a cooperation ring is bound to the memory of another
trader. The status of these coins will be changed to Blocked. This is an intentional lock of
the traders waiting for each other. The system (a veriﬁcation team) blocks the coins in the
distinctive memory speciﬁed for a trader until the end of cooperation or a force termination
by the system. This mechanism is helpful in implementing fair payment policies for the LoR
system (see Section 5.1 for the payment policies). In fact, no traders will be paid (or make
beneﬁt from a collaboration) until all the trades in a cooperation ring be satisﬁed with that
amount of the work. The structure of a cooperation ring creates simple links for coins to be
accessible to veriﬁcation teams.

An example of a lock graph is illustrated in Figure 4. After the lock, the status of each
coin will be changed to Blocked. To have a faster payment process, veriﬁcation teams modify
the coins (probably with a partitioned amount) and move them to the trader’s memories
based on the lock graph (see Figure 4); however, if a cooperation ring terminates, the system
acts diﬀerently for payments. See the policies in Section 5.1the system for more details.

As mentioned previously, the Bind-on entry of a coin table should be set to the trader-ID
of the trader who keeps that coin in their memory. The entries in the cooperation table
(Figure 3) are described in subsection 5.2 in detail.

Every trader should run Algorithm 1 to create a cooperation ring. In this algorithm, the
investment coins specify which coins of what traders should cooperate in a cooperation ring.
Based on the investing requests, the algorithm ﬁnds appropriate collaborators randomly.

A. Vaezi

XX:9

Figure 4 An example to show how a cooperation ring works. This is how we use a lock to make
sure no one can access used coins in their own cooperation rings without the system’s permission.
Note that a trader who is not an investor will receive some extra money based on his contribution.
Trader t1 owns one investment coin, trader t2 has two W -Coin, and trader t3 has one S-coin in
their memories individually. These coin names stand for a calculating work (W -coin) and provide
enough space as storage (S-coin). The system has already selected these three traders to be in a
group for cooperation. In the lock graph, t1 must pay t2 and t3 based-on their contribution. In this
group t3 and t2 are waiting for t1 to pay them. The trader t1 is waiting for t3 and t2 to provide its
requirements resource.

Algorithm 1 Algorithm to create cooperation rings

procedure Randomized

2:

4:

deﬁne
CR = The output cooperation ring.
M = A selected investment coin.
|M | = The number of required coins.
Fi = A deterministic algorithm to assign the right type of coins to CR.
for i= 2 ; i ≤ |M |; i++ do
CR[i] = Fi(SHA256(M ))

Return CR

3.4 Fractal Ring

A fractal ring is a block of cooperation rings created by a trader and veriﬁed by a veriﬁcation
team. A trader t should assemble a random number of at least 500 cooperation rings to
create a fractal ring (see Figure 5). The ring structure provides a simple way to access the
cooperation rings and verify them. The number of cooperation rings required for creating
a fractal ring is random. A cooperation ring is a fractal element of a fractal ring; any
cooperation ring that exists in the system from any joined instances of the LoR system
can be assembled for a fractal ring to be created. Since a ring cannot be constructed
deterministically, no one can abuse the system’s policies. In fact, if we ﬁx a number, say
1000, for the number of cooperation rings required in a fractal ring, then there might be a
competition in gathering the last cooperation rings. Also, the malicious traders might split
their coins and request with low weighted transactions, and the high-weight transactions
might starve. Algorithm 2 reveals how many cooperation rings are required to be in F R for

main−coint2(Worker)W−coint3(Storekeeper)S−coint1(Owner)t2(Worker)t3(Storekeeper)t1(Owner)t1t2t3t2(Worker)t3(Storekeeper)t1(Owner)t1t2t3MemoriesTheCooperationRingt2(Worker)t3(Storekeeper)t1(Owner)PaymentsTheLockGraphIntiationAApaid-coinsmain−coinmain−coinmain−coinmain−coinXX:10 The Loop of the Rings

it to be valid.

Algorithm 3 reveals how a trader should create a fractal ring F R. We need to ensure that
there are no common cooperation rings in two diﬀerent fractal rings created by the traders.
The status of all the cooperation rings a trader participates in is saved in the system’s tables.
If a cooperation ring is already submitted, it cannot get submitted in another fractal ring.

Consider a ﬁxed frame moment of the system, suppose that, on average, there is λ number
of cooperation rings available in the system. Algorithm 3 uses λ to create a fractal ring. In
this lgorithm, Cf denotes the number of required cooperation rings to submit a successful
fractal ring.

Algorithm 2 Randomized Algorithm to ﬁnd the number of cooperation rings required to
submit a fractal ring

procedure Randomized

deﬁne Cf = 500, H = Random number; Set the minimum number of cooperation rings

in fractal ring to be 500.
while Cf != H do

4:

for i= 500 ; i <= Cf ; i++ do

H = F (SHA256(H, F ractal[i]))

Cf ++
Return Cf

Figure 5 A fractal ring. A veriﬁcation team can easily trace all the fractals in their corresponding

fractal ring.

t5t20AFractalt1t2t3AFractalt1t2t4AFractalt1Fractal-RingAFractalLinksofGroupStructuresCooperation-Ringt7A. Vaezi

XX:11

Algorithm 3 Randomized Algorithm to submit a fractal ring

procedure Randomized

2:

4:

6:

deﬁne
λ = The average number of fractal rings in the current state of system,
|FR| = The number of cooperation rings required to create F R,
CRi = The ith cooperation ring of F R.
CR1 = A cooperation ring which is veriﬁed for t to start F R.
Fi = A deterministic algorithm to assign the Cooperation-IDs to SHA256(CRi−1).
while F (SHA256(CRj))%λ = 0 do CR1 = CRj
for i= 2 ; i ≤ |FR| ; i++ do

CR[i] = Fi(SHA256(CRi−1))

Return F R

In Algorithm the3, function F assigns a Cooperation-ID to a random number created by

SHA256 (we used SHA256 as the required random function).

Every fractal ring hands over a randomly selected team as a veriﬁcation team. This team
is selected by a random selection among all the available traders of the system. Every trader
could submit a fractal ring in the system if they did their duties as a veriﬁcation team in the
system previously. So, a trader is better to do its job as a verﬁcation member correctly. See
the system’s policies for more information in Section 5.1.

Note that each trader will be assigned to work on a veriﬁcation team with the same

probability as other traders (see the 16th policy).

A trader, to create a fractal-ring F R must compute Algorithm 4 to assign a "veriﬁcation
team" to verify F R. This team has |V T | members who are randomly chosen among all the
available traders in the system.

Algorithm 4 Selecting members of a Veriﬁcation Team for a fractal ring F R
1: procedure verification team
2:

deﬁne |V T | = 503 ≤ Random N umber ≤ the number the members of F R;
deﬁne V Ti = The ith member of the current veriﬁcation team.
for i= 1 ; i <= |V T |; i++ do

3:

4:

5:

6:

7:

V Ti = SHA256(i, U sers[i] in V T )%|V T |

i++
Return V T

(cid:66) Observation 1. Any veriﬁcation team chosen in the LoR system via the random procedures
is a reliable and trustful team for the users of the system.

Proof. We need to make sure that with a high probability, the majority of the members
(traders) of a veriﬁcation team are reliable.

Suppose there are n traders currently in the system. Without loss of generality, consider
a veriﬁcation team V T that has X members. We intend to ﬁnd a lower bound L on the
number of users in a veriﬁcation team to ensure that this team is reliable. Set L ≥ X
2 . In
the following, we show that the probability of being more than L malicious traders in one
veriﬁcation team is extremely low. The ratio of all the malicious traders is denoted by α.

Note that we already know that the cooperation rings are independent.

XX:12 The Loop of the Rings

(cid:0) nα
X−z

P rz =

(cid:1)
(cid:1)(cid:0)n(1−α)
z

(cid:1)

(cid:0) n
X

=

(nα)!(n(1 − α))!(n − X)!X!
(X − z)!(nα − (X − z))!z!((n(1 − α)) − z)!n!

In the above formula, z is the number of users in a veriﬁcation team we are expecting to
2 , we ﬁnd the probability of more than

be trustful. So if we sum P rz for z’s greater than X
half the users being trustful. We denote this by P r.

P r =

X
X

i= X
2

P ri > 1 − (cid:15)

If we set α = 1

3 ≈ 0.333, by the Stirling’s approximation, we have:

P r ≈ 0.999997516160304 > 1 − (cid:15)

We simply set: n = 106,

(cid:15) = 10−5, X = 500. We can see that these numbers satisfy

the above inequality.
Setting α = 1

3 is a very strong assumption because, in fact, we assumed that more than

2
3 of all the traders of the system are reliable (trustful).

Let set α = 1

2 − δ, which δ is a really small number. A similar analysis reveals that P r will
be high enough, and so the veriﬁcation teams are trustful enough. This fact is illustrated3
in Figure 6. In fact, the model presented here is a random network, and there is a sharp
threshold on α = 1

2 for the veriﬁcation teams to be trustful.

Figure 6 This plot shows how P r changes with respect to α which is the ratio of malicious

traders.

(cid:74)

It does not matter which trader creates a fractal ring because every trader can trust
the veriﬁcation teams. The more fractal rings are created with the traders, the sooner the
trader’s work starts. So, traders are motivated to create fractal rings.

The duties of a veriﬁcation team are declared in policies Section 5.1.

3 All the calculation can be found on github.com/Loop-of-Rings/trust-probability

A. Vaezi

XX:13

3.5 Ring Control Block, Traders Control Block and Checkpoints

The information of every fractal ring is saved in a table denoted by RCB. Each entry of the
RCB table considers one cooperation ring in a fractal ring. Each trader in a fractal ring and
the traders joined in the corresponding veriﬁcation team carries a copy of this table.

Similar to a cooperation ring, a fractal ring has a unique universal ID that can be traced
in the T CB. The coin table, cooperation table, RCB, and the traders’ information, namely
their ﬁnancial status, cooperation rings, start point, and endpoint of a cooperation ring
(based on the round number deﬁned in the system), are saved in the trader’s memory. So,
there exist replicas of the data in the traders’ memories. The complete set of all these cache
memories deﬁnes T CB. Every trader has a copy of this database, but this copy only includes
the information the trader needs.

This database should get updated when a newly fractal ring is veriﬁed (submitted) by a
veriﬁcation team. Every veriﬁcation team checks the status of its corresponding fractal ring.
This checking includes; computing the payments of the traders up to the last checkpoint.
See policies 5.1 for more details.

To implement the T CB database, we can use any distributed storage platform such as
the Swarm [8] of the Ethereum4. Note that a system designer needs to develop a solution to
provide mutual exclusion for the RCB and T CB tables. This problem has been considered
previously, see [28, 32].

In the following, we provided a set of calculations helpful in tuning and conﬁguring the
LoR instance. The average submission rate of the cooperation rings in a fractal ring in the
system is denoted by λ. Since we have about Cf cooperation rings in a fractal ring, the time
required for a fractal ring to end is at most Cf λ. A system administrator can change this
number (Cf ) according to the system’s conditions. Furthermore, we set a dynamic function
to compute λ. The time required for a cooperation ring CR to be complete is denoted by
Φ. The expected value (average value) of Φ is considered a checkpoint in the LoR system.
In these checkpoints, the system pays the traders based on the previous rounds they have
worked successfully. We deﬁne some number of rounds, say r rounds, between every two
checkpoints. A round’s time can be calculated as shown here, in which r equals the number
of rounds between two checkpoints.

E[Φ] = A ∗ r

r =

E[Φ]
A

A = K ∗ λ

. The value K is a regulator, and depending on the requirements of an instance of the LoR
system, one can set K to provide a diﬀerent round-time.

(cid:66) Observation 2. The LoR system can support long-term collaborations.

See the 14th policy in Section 5.1 for the reason.

4 Discussion

This paper deals with introducing a new system that uses randomization to create a reliable
environment for its users to cooperate without forcing them to pay much money or provide
such powerful hardware. The system can work permanently; that is, the passage of time
will not impact the system’s eﬃciency. The users can trust each other more easily and work

4 https://ethersphere.github.io/swarm-home

XX:14 The Loop of the Rings

together reliably. The system is beneﬁcial in providing safety for freelancing projects and
IoT management systems.

The LoR system is designed chieﬂy based on the basic concepts of operating systems
and distributed systems. The system uses two types of rings with a randomized electing
structure. The inﬁnite loop of these rings’ starting and terminating events runs and veriﬁes
the collaborations.

This research introduces the fundamental basics of LoR. The exact implementations and

applications can be described accordingly in collaboration with the industry.

References

1

Irawan Afrianto, Christover Ramanda Moa, Sufa Atin, Iding Rosyidin, and Suryani. Prototype
blockchain based smart contract for freelance marketplace system. In 2021 Sixth International
Conference on Informatics and Computing (ICIC), pages 1–8, 2021. doi:10.1109/ICIC54025.
2021.9633001.

2 Ahmad Aljabr, Avinash Sharma, and Kailash Kumar. Mining process in cryptocurrency using
blockchain technology: Bitcoin as a case study. Journal of Computational and Theoretical
Nanoscience, 16:4293–4298, 10 2019. doi:10.1166/jctn.2019.8515.
T. S. Andrew and M. V. Steen. Distributed Systems: Principles and Paradigm. Upper Saddle
River, NJ, USA: Pearson Higher Education, 2nd edition, 2007.

3

4 Robert Balzer. An 8-state minimal time solution to the ﬁring squad synchronization problem.

Information and Control doi:10.1016/S0019-9958(67)90032-0, pages 22–42, 1967.

5 Thomas Bocek, Dalibor Peric, Fabio Victora, Hecht David, and Burkhard Stiller. Towards a

decentralized voting mechanism for p2p collaboration systems. 04 2009.

6 Thomas Bocek, Michael Shann, David Hausheer, and Burkhard Stiller. Game theoretical
analysis of incentives for large-scale, fully decentralized collaboration networks.
In 2008
IEEE International Symposium on Parallel and Distributed Processing, pages 1–8, 2008.
doi:10.1109/IPDPS.2008.4536195.
Jonah Brown-Cohen, Arvind Narayanan, Christos-Alexandros Psomas, and S Matthew
Weinberg. Formal barriers to longest-chain proof-of-stake protocols.
arXiv preprint
arXiv:1809.06528, 2018.

7

8 Vitalik Buterin et al. Ethereum white paper, 2014. 2013. URL: https://github.com/

9

ethereum/wiki/wiki/White-Paper.
Bin Cao, Zhenghui Zhang, Daquan Feng, Shengli Zhang, Lei Zhang, Mugen Peng, and Yun Li.
Performance analysis and comparison of pow, pos and dag based blockchains. Digital Communi-
cations and Networks, 6(4):480–485, 2020. URL: https://www.sciencedirect.com/science/
article/pii/S2352864819301476, doi:https://doi.org/10.1016/j.dcan.2019.12.001.

10 Miles Carlsten, Harry Kalodner, S Matthew Weinberg, and Arvind Narayanan. On the
instability of bitcoin without the block reward. In Proceedings of the 2016 ACM SIGSAC
Conference on Computer and Communications Security, pages 154–167. ACM, 2016.
11 Douglas C. Engelbart. Augmenting human intellect: A conceptual framework. 1962.
12 Md. Sadek Ferdous, Mohammad Chowdhury, Mohammad Hoque, and Alan Colman.
Blockchain consensus algorithms: A survey, 01 2020. URL: https://www.researchgate.
net/publication/338738073_Blockchain_Consensus_Algorithms_A_Survey.
Patrick C. Fischer. Generation of primes by a one-dimensional real-time iterative array. Journal
of the ACM, pages 388–394, 1965. doi:10.1145/321281.321290.
Pasquale Forte, Diego Romano, and Giovanni Schmid. Bitcoin-part i: A critical look at
blockchain-based systems. IACR Cryptology ePrint Archive, 2015:1164, 2015.

14

13

15 Mihir Gandhi, Priyam Shah, Devansh Solanki, and Mihir Shah. Decentralized freelancing
system-trust and transparency. International Research Journal of Engineering and Technology
(IRJET), 6(09), 2019.

A. Vaezi

XX:15

17

16 Yossi Gilad, Rotem Hemo, Silvio Micali, Georgios Vlachos, and Nickolai Zeldovich. Algorand:
Scaling byzantine agreements for cryptocurrencies. In Proceedings of the 26th Symposium on
Operating Systems Principles, pages 51–68. ACM, 2017.
Eiichi Goto. A minimal time solution of the ﬁring squad problem. Dittoed course notes for
Applied Mathematics 298, Cambridge, MA: Harvard University, pages 52–59, 1962.
Lewis Gudgeon, Pedro Moreno-Sanchez, Stefanie Roos, Patrick McCorry, and Arthur Gervais.
Sok: Layer-two blockchain protocols. In Financial Cryptography and Data Security: 24th
International Conference, FC 2020 , Kota Kinabalu, Malaysia, February 10–14, 2020 Revised
Selected Papers, pages 201––226, Berlin, Heidelberg, 2020. Springer-Verlag. doi:10.1007/
978-3-030-51280-4_12.

18

19 R. Jalilzadeh Hamidi, H. Livani, S. H. Hosseinian, and G. B. Gharehpetian. Distributed
cooperative control system for smart microgrids. 2015. doi:10.1016/j.epsr.2015.09.012.
20 Depavath Harinath, P. Satyanarayana, and M. V. Ramana Murthy. A review on security issues
and attacks in distributed systems. 8(1):1–9, February 2017. doi:10.12720/jait.8.1.1-9.
21 Maurice Herlihy. Blockchains and the future of distributed computing. In Proceedings of the
ACM Symposium on Principles of Distributed Computing, pages 155–155. ACM, 2017.
22 Ahmed Karmouch. Multimedia distributed cooperative system. Comput. Commun., 16:568–580,

1993. doi:10.1016/0140-3664(93)90027-P.

23 Aggelos Kiayias, Elias Koutsoupias, Maria Kyropoulou, and Yiannis Tselekounis. Blockchain
mining games. In Proceedings of the 2016 ACM Conference on Economics and Computation,
pages 365–382. ACM, 2016.

24 Xiaoqi Li, Peng Jiang, Ting Chen, Xiapu Luo, and Qiaoyan Wen. A survey on the security of

25

blockchain systems. ublicationes Mathematicae, pages 78–85, 1959.
Silvio Micali, Michael Rabin, and Salil Vadhan. Veriﬁable random functions. In Foundations
of Computer Science, 1999. 40th Annual Symposium on, pages 120–130. IEEE, 1999.

26 Arvind Narayanan, Joseph Bonneau, Edward Felten, Andrew Miller, and Steven Goldfeder.
Bitcoin and cryptocurrency technologies: A comprehensive introduction. Princeton University
Press, 2016.

27 Dinh C Nguyen, Pubudu N Pathirana, Ming Ding, and Aruna Seneviratne. Blockchain for
5g and beyond networks: A state of the art survey. Journal of Network and Computer
Applications, 166:102693, 2020.

28 Mahendra Ramachandran and Mukesh Singhal. Distributed semaphores. citeseer. nj. nec.

com/315992. html, 1994.

29 Hamidreza Shariatmadari, Rapeepat Ratasuk, Sassan Iraji, Andrés Laya, Tarik Taleb, Riku
Jäntti, and Amitava Ghosh. Machine-type communications: current status and future per-
spectives toward 5g systems. IEEE Communications Magazine, 53(9):10–17, 2015.

30 K. S. Shilpa, Brahadeesh Kishore, P. Neil, Nilesh Jain, and Jay Jain. Blockchain based
freelancing system. In Fausto Pedro García Márquez, editor, International Conference on
Intelligent Emerging Methods of Artiﬁcial Intelligence & Cloud Computing, pages 315–327,
Cham, 2022. Springer International Publishing.
Bo Tang, Hongjuan Kang, Jingwen Fan, Qi Li, and Ravi Sandhu. Iot passport: A blockchain-
based trust framework for collaborative internet-of-things. pages 83–92, 05 2019. doi:
10.1145/3322431.3326327.

31

32 Gadi Taubenfeld. The black-white bakery algorithm and related bounded-space, adaptive,
local-spinning and ﬁfo algorithms. In International Symposium on Distributed Computing,
pages 56–70. Springer, 2004.

33 Arash Vaezi, Sara Azarnoush, and Parsa Mohammadian. A hundred attacks in distributed

34

systems. hal-03657061f, 2022.
Liang Yuan, Qiang He, Siyu Tan, Bo Li, Jiangshan Yu, Feifei Chen, Hai Jin, and Yun Yang.
Coopedge: A decentralized blockchain-based platform for cooperative edge computing. pages
2245–2257, 04 2021. doi:10.1145/3442381.3449994.

XX:16 The Loop of the Rings

5

Appendix

5.1 Payment Rules and Policies of the LoR System

The LoR system rules and policies are listed below:
1. Terminating Suspicious Cooperation Rings: By the event of the passage of each round,
each veriﬁcation team corresponding to every fractal ring checks if each cooperation
ring is veriﬁed by all the traders involved in that cooperation ring. A veriﬁcation team
does this checking based on the shared information of the checkpoints in the T CB and
the RCB tables of the majority members of a fractal ring. If at least one trader is not
satisﬁed with the collaboration in a cooperation ring, that collaboration is not valid
anymore. Such a cooperation ring will be terminated. Other traders does not need to
create another fractal ring as the ﬁrst fractal ring was submitted successfully. However,
as we supposed that more than α, say 1
2 + (cid:15), of the traders and their collaborations are
reliable, we can conclude that a reasonable amount of the cooperation rings in a fractal
ring are trustworthy. See Observation 1 for more information on the reliability of the
veriﬁcation teams.

2. Incomplete Cooperation: Suppose cooperation x in a fractal ring needs R rounds to be
accomplished. By the end of a round i, a trader in x denoted by t declines that the last
round was successful. For the round i, that t refuses to accept a successful transaction;
the system decreases 1
R + δ percent of the payments of all the traders involved in that
cooperation ring, where δ is a small number. That is because it is hard to distinguish
the person who was trouble-making or distinguishing any other reason that may disturb
the communications between the traders. So, the system punishes every trader of this
cooperation ring for ensuring such unsuccessful collaborations will not get plentiful in
the system. Note that δ should be a small number; for example, it may equal half of the
payment of a successful round.
We know that less than R rounds where successful. The system pays a percentage (p)
of each trader’s fee for each successful round in such a situation; for example, ninety
percent. In fact, we do not pay all the settlements expected by the trader for a particular
cooperation ring or even just a round of a cooperation ring. This way, we intend to keep
the primary currency (ARA) of the LoR system valuable in time. The value of p could
be adjusted by the passage of time in the system so that the inﬂation of the primary
currency gets around zero.

3. Note that an approximate consistency is working for the LoR system, and we can assume
that the majority of the traders involved in a fractal ring are eventually consistent. In
addition, a system designer may use the ﬁring squad synchronization methods [4] to sync
the system’s traders once in a while. Breaﬂy, with this method by starting from a trader
and walking through other traders, the goal is to reach an state that all the traders are
agreed.

4. The LoR system will pay the traders based on their corresponding weights in their
cooperation ring. In each cooperation ring, the paid fee depends on the type of a coin
and its amount. The weight of a coin can be calculated according to its amount and type.
5. Consider a trader, who can request an investment coin, or two worker-coins. By defualt
this trader will receive more money by working than investing. In fact, the system pays
some more extra money to those who work than those who invest. This way, we make
sure that traders are motivated to work than saving money. A system designer may
deﬁne diﬀerent coeﬃcients to pay the traders for diﬀerent types of coins in an instance of
the LoR system based on that system’s required incentives.

A. Vaezi

XX:17

Note that the extra money is going to be distributed among the workers based on their
cooperative weights in the transactions.
However, as every cooperation ring needs an investor, the number of investors may
decrease with the passage of time. So, the traders have to invest more to create more
cooperation rings and help themselves to speed their collaborations to get started sooner.
The following item reveals that the traders are also an incentive to invest in starting
cooperation. A system administrator may consider this trade-oﬀ in an instance of the
system to keep the system balanced.

6. A trader who invests some investment coins will receive his work, or storage, or anything
deﬁned in the system as a type of a coin. Others will receive their portion of the
primary-currency invested for that cooperation plus some extra money. By the end of
each checkpoint, the system pays the traders (investors) who have some expired coin
(which for sure was not a previous investment coin) with an (cid:15) amount of ARA. This
is just for the traders to be more motivated being an investor. However, an investor
does need to start a work, for example, the trader may need to borrow a computer for
computational work that is deﬁned in an instance of the system. So, the investors are
motivated already.
Note that the veriﬁcation teams carries the information about the invetsors and their
expired coins so no one can bring other expired coins and lie about the coins.

7. A trader who owns more blocked coins receives more extra money (ARA). This extra
money should be considerable to make the traders be incentive to work with only one
account.

8. We have the following IDs in the LoR system: 1- Trader-ID, 2- Coin-ID, 3- Cooperation-
ID, 4- Fractal Ring ID: which is the same as the corresponding Fractal-ID. Round-number:
which should be an increasing unique number, and Checkpoint-numbers are numbers that
illustrate approximate time periods for the system and we can make them to be unique
too.
Each of the IDs must be unique in the whole system. In order to generate a unique
ID for traders, we can merge their public and private keys. We can use other random
generators to create unique IDs. Even big numbers are unique in such systems with high
probability [14].
9. Mutual Exclusion:

When a cooperation ring is submitted in the tables of the system. No other trader can
use this cooperation ring to assemble a fractal ring. The tables of the system are mutually
excluded so no two cooperation rings may get submitted simultaneously.

10. When a veriﬁcation team veriﬁes a fractal ring if even one cooperation ring was not valid,
or anything else was not correct the fractal ring is not valid and the trader who sends it
must resubmit it for the next Checkpoint. So everyone should submit a valid fractal ring
on the very ﬁrst try.

11. How to Start LoR? We assumed that there were enough traders and diﬀerent types of
coins and cooperation ring in the system. In the beginning, the system would be launched
by one of the popular systems, namely Ethereum.
In addition to generating the coins that need to bootstrap the protocol, starting with a
well-known cryptocurrency will incentive the users of old systems to join the new ones.
To start the LoR system in case a system designer needs to sync some of the joined
traders to agree on a checkpoint, the designer can use a well-mannered strategy called
ﬁring-squad. This strategy is maybe useful at the start of the system for everyone to
be synced on the ﬁrst checkpoint. The ﬁring-squad strategy was ﬁrst proposed by John

XX:18 The Loop of the Rings

Myhill in 1957 and published (with a solution) in 1962 by Edward Moore. A lot of papers
worked on this strategy [4, 13, 17].

12. Entrance: Anyone who intends to play a role as a new trader in the system should receive
an enough amount of ARA from another already existing trader. This amount must be at
least equal to the chipest service provided in the system. Their settlements are unrelated
to this system.

13. A policy related to veriﬁcation teams: Consider a situation where a trader t participated
in at least one cooperation ring of a fractal ring F R. A new veriﬁcation team V T is
assigned to check F R. One of the duties of the members of V T is to check if t’s opinion
was matched with the majority of the members of the previous veriﬁcation team that t
plays a role in, and this veriﬁcation team validates a successful fractal ring in a previously
passed checkpoint. If t had conﬁrmed some invalid cooperation rings, the trader cannot
submit a fractal ring during the two subsequent next checkpoints of the system.
Every successful veriﬁcation process passed periodic checks of cooperation rings. A
cooperation ring must be checked during each round to be satisﬁed by its participants.
So, the above-mentioned policy makes the traders in a veriﬁcation team to actually check
the status of the cooperation rings in a fractal ring and tell the truth.
So, a trader t should complete those duties as a veriﬁcation team member in the checkpoints
and the system rounds. During an upcoming checkpoint, t requested to start new
cooperation. A new veriﬁcation team will be assigned to verify that the fractal ring t
is joining. First, this team should check if t had the same opinion as the majority of
its joined previous teams; if so, t is allowed to submit fractal rings and submit them to
the system. Otherwise, t can only wait for others to submit fractal rings, including the
cooperation rings that t broadcasted.
Additionally, for a trader whose opinion fails to be matched with the majority of the
traders in a veriﬁcation team, the system can set a punishment by decreasing the trader’s
account. This punishment made the traders more careful. Also, the veriﬁcation teams
are going to be more reliable.

14. Submission Process: Every fractal ring should get submitted to the tables of the system
by a "veriﬁcation team". A fractal ring F R that is assigned be veriﬁed by a veriﬁcation
team V T is denoted by F R(V T ). Suppose the current state of the system is in the
checkpoint C Pp, and C Pp+1 is the next checkpoint. Suppose a number of requests, say j
requests, are currently broadcast in the system before C Pp, and k requests are broadcast
after C Pp. Note that each coin created was previously a request in the system. Also, the
fractal rings generated by the traders are broadcast in the system and will be considrered
in the next checkpoint.
The veriﬁcation team V T should conﬁrm every cooperation ring CR of F R in the
following cases:
a. The coins in CR, should be broadcast in the system before C Pp.
b. The trader t should own enough money in her account before C Pp to request such a

coin (c).

c. The veriﬁcation team should check the decrease of enough money from the account of
t and the creation of the coin table for t. A coin table created for every coin should
get veriﬁed to ensure that all of its entries are correct.

d. The cooperation table of every CR should be checked and veriﬁed to have correct
entries. For example, the weight of a cooperation ring should be computed correctly.
If V T does not conﬁrm one of the above-mentioned cases, then F R cannot get submitted.
Otherwise, it is ready to be submitted in the tables of the system, and its cooperations

A. Vaezi

XX:19

are allowed to start their work from C Pp+1. Note that the time V T can spend to do the
veriﬁcation tasks related to the coperation ring CR equals to the time between C Pp and
C Pp+1. If the work C Pp+1 gets passed, a desinger can allow an extra checkpoint for the
veriﬁcation team to do their jobs. However, the default policies of the system is to punish
the team so that none of them can create a fractal ring for the next two checkpoints.

If F R gets submitted in the system successfully, every cooperation should get started by
the arrival of C Pi+1.
So to brieﬂy express the duties of a veriﬁcation team: Suppose that a veriﬁcation team
V T is assigned to a fractal ring F R to verify it. During the upcoming checkpoint of the
system, V T checks all the receives requests of the F R’s trader. No trader can request
a speciﬁc coin without having enough money in her account. Next, the accounts of the
traders in the T CB table should get updated, and the corresponding coin tables should
be created for every individual trader in F R. During the following checkpoints, V T
should pay the traders who ﬁnish their transactions successfully, and the account numbers
and the corresponding entries in the RCB and T CB tables should get updated.

15. How system supports long-term transactions (cooperation)?

After passing a checkpoint, based on the checkpoint time period (by the end of a checkpoint
process), the T CB table will be updated, and the system needs to pay the traders who
have at least one round of a successful transaction, and their remaining rounds equals zero.
If there still remained some rounds required for a cooperation ring in a fractal ring to get
ﬁnished, then the payment of that ring should be postponed to the next checkpoint, and
the remaining-round ﬁeld in the T CB table should get updated. The remaining-round
column is a ﬁeld that speciﬁes how many rounds is still remained for the cooperation to
get ﬁnished.

16. Earning ARA: Although the primary goal of the LoR system is not introducing a
cryptocurrency, the system owns an internal currency. So, we need to know how a user
can earn ARA. Many systems provided various ways for their users to make money based
on their cryptocurrncies. In the LoR system, a user can only recieve some ARA form
another older user who owns some money (probably with an outline settlement), or the
user can participate in a cooperation ring and work or invest on an actual collaboration
and recieves some ARA. That is the user recieves the stipend and also some extra money
based on ARA.

So, one cannot use the LoR system to earn money eﬀortlessly. This is another incredibale
characteristic of the LoR system.

17. The probability of a trader joining a veriﬁcation team is the same for all the traders:
A trader could participate in many cooperation rings with at least one coin. These
cooperation rings may be scattered in many fractal rings. There is an entry in the T CB
table that illustrates which veriﬁcation teams have been assigned to a trader. Suppose
each of these fractal rings has k members. So, if we set the members of every veriﬁcation
team to be at least k, then each trader is joined in at least one veriﬁcation team with
probability one. As the veriﬁcation team members are selected with a uniform random
function, even if we choose comparably fewer traders than the members of a fractal ring,
the probability that a trader is chosen to do the duties of a veriﬁcation team is the same
for all the traders. So, overall, after a long time, the number of veriﬁcation teams that
each of the traders worked for is the same.

As a result, the traders are not motivated to run away from being joined by a veriﬁcation
team.

XX:20 The Loop of the Rings

5.2 Cooperation Table Entries

In this subsection, we describe the entries of a cooperation table.

1. Cooperation-ID: Every cooperation ring has a unique ID, which is a universally unique

ID throughout the LoR system from the beginning.

2. Number-of-cooperation-members: Indicates the number of traders involved in the corre-

sponding cooperation ring.

3. Weight: This is the summation of all coins amount involved in the cooperation ring,
based on ARA. The amount of a coin demonstrates its cost value in the system and
can be calculated based on its amount and type. The Weight of a cooperation ring is
calculated based on the cost values of all of its coins. This entry can help the veriﬁcation
team calculate the budget that the system should consider for the cooperation ring as
payments.

4. Next-in-fractal ring: Indicates the next cooperation ring in a fractal ring assembled by a

trader.

5. Previous-in-fractal ring: Indicates the previous cooperation ring in a fractal ring assembled

by a trader.

6. investor: Which is the ID of the trader who invest to start a cooperation ring.

5.3 Requirements for a Valid Service in the LoR System

This subsection reveals what requirements a general capability or service should meet for a
system administrator to be able to deﬁne a Coin in an instance of the LoR system.

1. It must be qualiﬁed to be propagated through the Internet or an intranet.

2. It must be quantiﬁable. That means a coin must have a basic unit such that any request
could be expressed as a factor of that unit. This division should be based on three main
characteristics; qualiﬁcation class, time-sharing, and space-sharing of a resource.

3. Most of the users must be capable of providing such type of service for other traders.
That is a service that is deﬁned as a type of coin that should not be provided by just
a speciﬁc particular number of traders. The system has a random binding procedure
between diﬀerent traders with diﬀerent types of coins. So, if using any other type of coin
requires a speciﬁc resource, a reasonable number of traders must have access to those
resources.

4. LoR has some running rounds. A coin type should have the capability of getting split

into as many rounds as it takes for cooperation to get ﬁnished.
Suppose after, say three rounds, the connection between the corresponding traders gets
lost for a reason. We must be capable of computing the payments of those traders who
worked in the three previous rounds. So, a service that a coin is deﬁned based on that
should be dividable into some ﬂexible rounds, and even one round means something and
worth being paid.

5.4 Attacks

This section considers a few attacks to reveal how the LoR’s policies prevent relevant attacks
to happen. See [33, 24] for more information about various types of attacks that may happen
in a system.

A. Vaezi

XX:21

5.4.1 Double Spending

Double Spending in LoR means one coin gets used twice.

As we mentioned previously, there is a veriﬁcation team V T corresponding to each fractal
ring F R. Before the submission of F R, V T checks all the coins with RCB and T CB tables.
Since these tables are mutual excluded, no two transactions can be submitted simultaneously
in the system. However, a system designer may repeat this check by the end of all rounds to
make a more reliable system, but if a designer decides to add an extra check the system will
be slower. This is a trade-oﬀ that depends on the needs that a system designer may consider.

5.4.2 Long Delay Attack

This attack means a user proposes a job that takes a long time and the system stop progressing
due to this job.

A user cannot add any new type of service to the LoR system, but the work the users
are cooperating on may need a quite large period of time. However, the system supports
long-term cooperation (see the policies in Section 5.1). Moreover, in each round, the system
checks if the coworkers are satisﬁed with their cooperation. In fact, the LoR system creates
a reliable environment so that these users can cooperate. So, if a user is not satisﬁed in a
speciﬁc round, the system stops that cooperation from running (see policies of the system
for the details).

5.4.3 Theft of resources

This attack considers a user that has a method to sabotage the system such that attacker
uses the resources but will not pay for it.

In the LoR system, a user must ﬁrst pay some primary currency so that he/she can start
a transaction. The only way someone might abuse a resource is to invest some investment
coin and then refuses to admit that he/she was using the resources of another user. First of
all, this can only happen during one round. Because other collaborators will not be satisﬁed
in the next round, the system closes that cooperation. However, if a user does this according
to the system policies, he/she will lose more than what he/she invests for one round in the
ﬁrst place (see Section 5.1 item 2).

5.4.4 Honesty

The Honesty attack means that if a user said he provides a job or paid money, the dishonest
behavior must be discouraged.

The LoR system will check the users periodically. The liars will be punished but also
those who were in cooperation with a liar. However, the victims will be harmed in only one
round. According to the setting of the system one can set round time to be really small.
Based on the conditions of a system one can accept that his/her system needs more privacy,
and deﬁne smaller rounds, but his/her system will be slower accordingly.

5.4.5 Iterative False Generation

Attacks like Sybil and Peer Flooding create many pseudonymous identities and leverage
them to obtain disproportionately large inﬂuence, get closer to a speciﬁc object or a group of
objects, and slow down or subvert the service’s mechanism. For more information on these
classes of attack see [33].

XX:22 The Loop of the Rings

As each user has to purchase enough amount of ARA to be able to contribute to the LoR
system, an attacker must spend a signiﬁcant amount of money creating many accounts and
targeting them to complete a kind of attacks such as Sybil and Peer Flooding. Also, in the
LoR protocol, the selection of the collaborators is random and can not aim at a speciﬁc user.
As a result, the likelihood of a successful Sybil and Peer Flooding attack is remarkably

low.

5.4.6 Adversarial Centralization of Consensus Power

This type of attack uses consensus power in a voting system that needs veriﬁcation by most
users. If a group of users works together, they could have control over a system.

Considering the below-mentioned policies, these types of attacks cannot happen in an
instance of the LoR system. The members of a veriﬁcation team are selected randomly
from all the system users. This team should verify the collaboration of all the users in
the fractal ring at each round and checkpoint. Suppose one or more trader does not work
correctly in a cooperation ring. In that case, the veriﬁcation team reports the cooperation,
and the collaboration in that cooperation ring would be failed to continue. Creating new
accounts needs more money, making it hard for the users to be motivated to create many fake
accounts. Bribery needs money, and the randomness makes it hard to access the veriﬁcation
teams frequently. Suppose a veriﬁcation team member reports a diﬀerent opinion that is
incompatible with the majority of the team’s opinion. In that case, that member is going
to be recognized later, and such a member cannot submit a fractal ring for two consequent
checkpoints, and the system will punish this trader by decreasing a little amount of ARA
from the trader’s account. So it would be tough to convince strangers to do something wrong.

5.5 Alternative Approaches

The LoR system owns an incredibly ﬂeible design. That is based on diﬀerent requirements
a designer may want to use other strategies instaead of those we introduce in this original
introduction of the LoR system. This subsection introduces a few alternative approaches
a system designer may consider while dealing with this system. The LoR system default
policies make it highly secure. However, note that two instance of LoR should get merge
to each other only if both of them had used the same set of appraches for designing their
systems. See these approaches:

In order to provide a more secure system, a system designer can force a trader to pay
some money for not being consistent with others; however, this approach has a risk,
because the system is decentralized and there might be delays in the system, and so there
is a probability that the trader might not be faulty.
Another approach is to set credit for every trader, and if a trader did something wrong,
then the trader loses some credit (a number), and traders with low credits are not allowed
to submit high-weighted cooperation rings. The credit system could support a procedure
that increments credits constantly and decreases them exponentially.
As an alternative approach to the randomized approach proposed here, a system designer
may use a reputation mechanism to select liable veriﬁcation teams out of the users.
A number of factors can be used to calculate a user’s reputation based on the user’s
behavioral history in the system. In such a system, a user with a higher reputation is
more likely to be chosen for the veriﬁcation teams. The frequency of the completed tasks,
completed tasks ratio, the stability, and the time that a user has spent in the system can
be counted as inﬂuential factors to compute the users’ reputations.

A. Vaezi

XX:23

5.6 The LoR Characteristics

The spirit of all the previously collaborative decentralized systems might be diﬀerent from
the LoR system in the below-mentioned features:
1. Simplicity: That is, even someone with a low level of knowledge in computer-based

systems can use this platform.

2. Distribution: According to Tanenbaum’s deﬁnition [3], a distributed system is a transpar-
ent system that tries to hide the complexities from its users. Combining these deﬁnitions,
a distributed system is a middleware that connects with a variety of distributed hardware
and software to coordinate the activities of several processes running on various platforms
of computers over a communication network so that all components cooperate to perform
a set of related tasks aimed at a common goal [20].

3. Transparency: In a cooperation ring, every participant only worries about their task, and
the tasks of other participants in that cooperation will be checked and veriﬁed by the LoR
system, so a participant does not need to worry about others’ duties. The veriﬁcation
process is distributed among the system users as a part of their tasks. A participant
can participate in cooperation without worrying about others’ behavior. The system
guarantees that anyone who works in the system beneﬁts only by being righteous and
honest.

4. Standard Services: A user who intends to perform a service in an instance of the LoR
system can only provide that speciﬁc service based on a few standard rules speciﬁed as
the rules of that service by the administrator. Recall that the administrator themselves
should admit the policies of the LoR-system to deﬁne a service in their own instance of
the system.

5. Generality: Users should be able and allowed to perform any of the services deﬁned in
an instance of the system. In other words, a participant may choose to do various types
of tasks that exist in the system. The system guarantees that there are always enough
available tasks so that participants can construct their cooperation rings easily.

6. Large Scale: the system starts working when there are more than one million users
available. We will see that after this number of users join the system, it can guarantee
safety for the users.

7. Reliability: A user cannot use the LoR system unless they invest some money. In fact,
for a user to participate in cooperation in an instance of the LoR system, they should
buy enough amount of the internal crypto-currency used by the system.

8. Homogeneous: Currently available applications do not provide a unique platform to be
implemented as a general system. The LoR system provides such a general platform so
that many applications can be proposed as an instance of the LoR system. They can
be merged and operate together simultaneously. The services must be implemented by
system administrators according to the various requirements of people.

9. Security: There are a lot of complex strategies used by the parties in the currently available
systems to provide security [7, 10, 23]. However, a decentralized random procedure, as
well as an intentional lock mechanism used in LoR, makes this platform highly secure.

10. Easy to Use: We know that a system programmer is more expert in developing. Many
popular applications could be implemented in the core of the LoR system without anyone
involving personal implementation.
Even traditional poor-knowledge people can work based on the LoR platform and
implement their business ideas.

11. Scalability: As mentioned in the previous paragraph, even those who do not own much
money or knowledge to work on computer-based systems can cooperate with others in

XX:24 The Loop of the Rings

this system and make money based on their contribution. So, the LoR system provides a
job for an extensive range of people. Moreover, recall that the instances of the system
can join and provide a larger system.

12. Dateless: We come up with a strategy which is not losing its performance and utilitarian
by the passage of time (Except that if we implement the database baseed on the blockchain
system, it should eventually move from blockchain to another platform. That is because
the blockchain system loses its eﬃciency by the passage of time [10, 23]).

13. Working Legitimately: That is, every user should actually work in the system to earn
money. A user should either provide a service or invest in a service. No waste of energy
there is in the LoR system.

14. Fractal Structure: The LoR system enjoys a fractally structure that can help the system
to be highly ﬂexible. The recovery of the system would be easy. No matter which services
you are working on, any cooperation ring can be used in a fractal ring. This helps the
veriﬁcation teams to be spread through all the network of the trades from any joined
instance.

The LoR system does not deal with the issues that have been occurred due to the lack of
motivated users. This problem has also been studied by [7, 10, 23].

