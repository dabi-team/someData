1
2
0
2

l
u
J

1

]

R
C
.
s
c
[

1
v
3
8
1
0
0
.
7
0
1
2
:
v
i
X
r
a

Stochastic Performance Modeling for Practical Byzantine

Fault Tolerance Consensus in Blockchain

Fan-Qi Maa, Quan-Lin Lib ∗, Yi-Han Liub, Yan-Xia Changb
aSchool of Economics and Management,

Yanshan University, Qinhuangdao 066004, China
bSchool of Economics and Management,

Beijing University of Technology, Beijing 100124, China

July 2, 2021

Abstract

The practical Byzantine fault tolerant (PBFT) consensus mechanism is one of

the most basic consensus algorithms (or protocols) in blockchain technologies, thus

its performance evaluation is an interesting and challenging topic due to a higher

complexity of its consensus work in the peer-to-peer network. This paper describes

a simple stochastic performance model of the PBFT consensus mechanism, which

is reﬁned as not only a queueing system with complicated service times but also a

level-independent quasi-birth-and-death (QBD) process. From the level-independent

QBD process, we apply the matrix-geometric solution to obtain a necessary and suf-

ﬁcient condition under which the PBFT consensus system is stable, and to be able to

numerically compute the stationary probability vector of the QBD process. Thus we

provide four useful performance measures of the PBFT consensus mechanism, and can

numerically calculate the four performance measures. Finally, we use some numerical

examples to verify the validity of our theoretical results, and show how the four perfor-

mance measures are inﬂuenced by some key parameters of the PBFT consensus. By

means of the theory of multi-dimensional Markov processes, we are optimistic that the

methodology and results given in this paper are applicable in a wide range research

of PBFT consensus mechanism and even other types of consensus mechanisms.

∗

Corresponding author: Q.L. Li (liquanlin@tsinghua.edu.cn)

1

 
 
 
 
 
 
Keywords: Blockchain; Practical Byzantine fault tolerant (PBFT); Consensus

mechanism; Quasi-birth-and-death (QBD) process; Matrix-geometric solution; Per-

formance evaluation.

1

Introduction

The past decade has witnessed rapid development and growing popularity of blockchain

technologies. This has been attracting tremendous interests and enthusiasm from both

research communities and industrial applications. The blockchain technologies were orig-

inated from a digital ﬁnancial sector as a decentralized, immutable, auditable, account-

ability ledger system in order to deal with daily transactional data. So far it has been

envisioned as a powerful backbone/framework for decentralized data processing and data-

driven autonomous organization in a peer-to-peer and open-access network. For blockchain

technologies, readers may refer to books by Narayanan et al.

[44], Bashir [5], Raj [54],

Maleh et al.

[39], Rehan and Rehmani [55] and Schar and Berentsen [58]; and survey

papers by Fauziah et al. [17] for smart contracts, Sharma et al. [60] for cloud computing,

Ekramifard et al. [14] for AI, Dai et al. [13] for IoT and Huang et al. [26].

The consensus mechanisms are always an important direction in the research of blockchain

technologies. Up to now, there have been more than 50 diﬀerent consensus mechanisms

developed in blockchain technologies. We refer readers to recent survey papers by, for

example, Cachin and Vukoli´c [7], Bano et al. [4], Natoli et al. [45], Chaudhry and Yousaf

[12], Nguyen and Kim [48], Salimitari and Chatterjee [57], Wang et al. [66], Pahlajani et

al. [51], Carrara et al. [9], Wan et al. [65], Xiao et al. [68], Ferdous et al. [18], Nijsse and

Litchﬁeld [49], Yao et al. [69] and Khamar and Patel [28].

The PBFT consensus mechanism is the most basic one of blockchain consensus mech-

anisms, and it plays a key role in extending, generalizing and developing new eﬀective

blockchain consensus mechanisms. A reliable computer system must be able to cope with

the failure of one or more of its components, and a failure components can send conﬂicting

information to diﬀerent parts of the computer system. In this case, solving the type of

failure and conﬂicting problems is called a Byzantine generals problem. See Lamport et al.

[32], Lamport [31] and Martin and Alvisi [41]. Based on the Byzantine generals problem,

Pease et al. [53] and Lamport [32] provided the Byzantine fault tolerant (BFT) consensus

mechanism. To prevent malicious attacks and guarantee security of blockchain, Castro

2

and Liskov [10] proposed the PBFT consensus mechanism. Thereafter, some researchers

further developed various diﬀerent PBFT consensus mechanisms to eﬀectively improve the

performance of the PBFT consensus mechanism. Important examples include Castro and

Liskov [11], Veronese et al. [64], Abraham et al. [1], Kiayias and Russell [29], Hao et al.

[24], Gueta et al. [23], Malkhi et al. [40], Bravo et al. [6], Sakho et al. [56], Meshcheryakov

et al. [42], and Alqahtani and Demirbas [2].

It is an interesting topic to provide stochastic models for performance evaluation of

PBFT consensus mechanism. To our best knowledge, this paper is the ﬁrst one to set up

such a stochastic model for performance evaluation of PBFT consensus mechanisms. To

this end, we ﬁrst set up a queueing model with more complicated service times, which are

due to a higher complexity of block validation. Then we express the PBFT queue as a

level-independent QBD process, which is a two-dimensional Markov process. By using the

matrix-geometric solution, we can provide a more detailed analysis for performance eval-

uation of PBFT consensus mechanism, in which four performance measures are provided.

It is worthwhile to note that Li et al. [35, 36] are two closely related works which gave per-

formance analysis of the Proof of Work (another more important consensus mechanism).

Obviously, the PBFT consensus mechanism makes the queueing model, together with the

level-independent QBD process, more complicated than that of the Proof of Work. There-

fore, this paper, together with Li et al.

[35, 36], can be regarded as some key research

on the matrix-analytic method in performance evaluation of blockchain consensus mech-

anisms. Also, we believe that the matrix-analytic method can play a key role in ﬁnding a

more complete solution of stochastic models in the study of blockchain technologies.

It is clear that the Markov processes and queueing theory play a key role in the study

of blockchain technologies. Readers may refer to survey papers by, for example, Li et al.

[36], Smetanin et al.

[61], Fan et al.

[15] and Huang et al.

[26]. Based on this, it is

necessary and useful to review some available literature in this area as follows:

(a) Markov processes of blockchain systems: Up to now, few papers have applied the

Markov processes (or Markov chains) to analysis of blockchain systems. See Li et al. [36]

for some early research. For some research well related to this paper, G¨obel et al. [21] used

a two-dimensional Markov process to provide a computational method for dealing with

the inﬂuence of propagation delay on the blockchain evolution. Also, a new computational

method was further developed by Javier and Fralix [27]. Li et al.

[34] provided a new

theoretical framework of pyramid markov processes for blockchain selﬁsh mining, where

3

a new matrix-geometric solution is developed and is diﬀerent from that used in Li et al.

[35, 36].

Nayak et al. [46] constructed three diﬀerent Markov processes to analyze the stubborn

mining strategies and designed a provable security consensus protocol. Kiﬀer et al.

[30]

proposed a simple consistency method of blockchain protocols by using a Markov chain.

Huang et al.

[25] applied the Markov processes to performance evaluation of the con-

sistency algorithm Raft in the blockchain network. Carlsten [8] used a Markov process

to analyze the inﬂuence of transaction fees on the blockchain selﬁsh mining. Bai et al.

[3] used the Markov chains to discuss how the existence of multiple misbehaving pools

inﬂuences the proﬁtability of selﬁsh mining. Li et al.

[38] applied the Markov processes

to provide performance and security analysis for the direct acyclic graph-based ledger for

Internet of Things. Li et al.

[37] employed the Markov processes to the block access

control in wireless blockchain network.

(b) Queueing models of blockchain systems: Li et al.

[36] provided an overview for

queueing models of blockchain systems. From that time forward, some new literatures are

further listed, such as Gopalan et al.

[22], Papadis et al.

[52], Geissler [20], Miˇsi´c et al.

[43], Fang and Liu [16], Fralix [19], Varma and Maguluri [63] and Wilhelmi and Giupponi

[67].

Based on the above analysis, the main contributions of this paper are summarized as:

1. This paper describes a simple stochastic performance model of the PBFT consensus

mechanism, which is reﬁned as not only a queueing system with complicated service

times but also a level-independent QBD process.

2. By applying the matrix-geometric solution, this paper obtains a necessary and suﬃ-

cient condition under which the PBFT consensus system is stable, and provides the

stationary probability vector of the QBD process, which is used to set up and numer-

ically compute four useful performance measures of the PBFT consensus mechanism.

3. Some numerical examples are used to verify the validity of our theoretical results, and

to show how the four performance measures are inﬂuenced by some key parameters

of the PBFT consensus mechanism. Although our Markov queueing model is simply

designed for the PBFT consensus mechanism, our analytic method will open a series

of potentially promising research in queueing theory and Markov processes of PBFT

consensus mechanisms.

4

The rest of this paper is organized as follows. Section 2 describes a stochastic per-

formance model of PBFT consensus mechanism. Section 3 expresses the stochastic per-

formance model as a level-independent QBD process. By using the matrix-geometric

solution, we obtain a necessary suﬃcient condition and the stationary probability vec-

tor of the QBD process, and provide four performance measures of the PBFT consensus

mechanism. Section 4 uses some numerical examples to verify the validity of our theoret-

ical results, and shows how the four performance measures are inﬂuenced by key system

parameters. Some concluding remarks are given in Section 5.

2 A Stochatic Performance Model

In this section, we describe a simple stochastic performance model of PBFT consensus

mechanism based on the operations structure of PBFT consensus mechanism, in which

several key factors are assumed to be exponential distributions or Poisson processes. Also,

we introduce some necessary notations used in our later study.

In the PBFT consensus mechanism, there are N nodes in the blockchain network,

and the number of Byzantine nodes is no more than f . Let N = 3f + 1. To set up a

useful relationship between the PBFT consensus mechanism and a queueing model, we

assume that there are always a lot of transactions in the transaction pool, thus a number

of transactions is packed into a ﬁle package. These transaction packages are made one

by one, and they are regarded as an arrival process at the client. See Figure 1 for more

details.

Based on Figure 1, we provide a detailed description for the stochastic performance

model of PBFT consensus mechanism as follows:

(1) The package arrival process

We assume that the arrivals of many transaction packages at the client is a Poisson

process with arrival rate λ for λ > 0.

(2) A major node and N − 1 slave nodes

A major node can be chosen from the N nodes with equal probability. Once a node is

the major node, all the other nodes become N − 1 slave nodes. On the other hand, once

a block is pegged on the blockchain by using the PBFT consensus mechanism, the major

node can receive a reward c from the blockchain system.

(3) The block-generated and block-pegged process

5

A blockchain system

A complicated service process

N

 nodes

f

 Byzantine nodes

 A working node
with service rate (cid:80)

(cid:79)

Client

Primary
(A major node)

Replica 1
(Slave node 1)

Replica 2
(Slave node 2)

Replica 3
(Slave node 3)

Replica N-1
(Slave node N-1)

Propose

Pre-prepare

Prepare

Commit

Replay

A package with a certain 
number of transactions

The package becomes a block
after a Byzantine verification

Figure 1: A useful relationship between the PBFT consensus and a queueing model

Once a transaction package arrives at the client, it is immediately submitted to a

chosen major node, and the major node also immediately submits the transaction package

to each of N − 1 slave nodes. In this situation, the major node and the N − 1 slave nodes

begin to deal with the transaction package through the following three stages of PBFT

consensus mechanism: Prepare, commit and reply, e.g., see Figure 1 for their details. Now,

we further explain these three stages as follows:

Prepare: Once one of the N − 1 slaves receives the message of the transaction package

from the major node, it veriﬁes the message content to ensure that the message content

has not been tampered with during transmission. After the message is validated correctly,

the slave node immediately sends a preparation message to all other nodes except itself,

that is, N − 2 slave nodes and the major node. When 2f + 1 diﬀerent nodes receive that

the message is consistent with that of the major node, the next commit stage will be

6

started immediately. In fact, the major node has the same work as that of the N − 2 slave

nodes in this stage.

Commit: Once the prepare stage is ﬁnished, each node sends a commit message to

other nodes except itself. After other nodes receive the commit message, they verify the

message content. When the node has received 2f + 1 commit messages including itself

and the message content is consistent with that of the previous prepare stage, the commit

message is veriﬁed and enters the next reply stage.

Reply: Each node sends a reply message to the client. If the client receives the same

reply messages sent by 2f + 1 diﬀerent nodes, then it is regarded as that all the nodes (the

major node and the N − 1 slave nodes) have reached a round of consensus. Therefore, the

transaction package becomes a legitimate block which can be pegged on the blockchain.

For simplicity of analysis, we assume that for each of the N nodes (the major node and

the N − 1 slave nodes), the time duration of going through these three stages (prepare,

commit and reply) is exponential with mean 1/µ for µ > 0.

(4) Independence

We assume that all the random variables deﬁned above are independent of each other.

Remark 1. If the three stages (prepare, commit and reply) are assumed to be exponential

with means 1/µ1, 1/µ2 and 1/µ3, respectively, then the total time duration of going through

the three stages is a generalized Erlang distribution of order 3. In this case, analysis of the

stochastic performance model will be more complicated and is regarded as one of our future

studies. Therefore, this paper uses a simple model to express a clear operations structure

and four useful performance measures in the PBFT consensus mechanism.

3 A QBD process

In this section, we express the stochastic performance model as a level-independent QBD

process, which is a two-dimensional continuous-time Markov process. By using the matrix-

geometric solution, we obtain a necessary suﬃcient stable condition of the QBD process

and its stationary probability vector. Based on this, we provide four performance measures

of the PBFT consensus mechanism.

In the PBFT consensus mechanism, let K(t) be the number of transaction packages

which are waiting at the client and will be submitted to the major node one by one at

time t. Let M (t) be the number of nodes who have veriﬁed the validity of one transaction

7

package in the PBFT consensus mechanism at time t.

It is easy to see that K(t) ∈

{0, 1, 2, . . .} and M (t) ∈ {0, 1, 2, . . . , 2f }. Then {(K(t), M (t)) : t ≥ 0} is a two-dimensional

continuous-time Markov process whose state transition relations are shown in Figure 2.

N(cid:80)

N(cid:80)

0
0

1
0

2
0

(cid:79)

(cid:79)

(cid:79)

(cid:79)

(

N (cid:80)(cid:16)
1)

(

N (cid:80)(cid:16)
1)

1
2

2
2

1
1

2
1

(cid:79)

(cid:79)

(cid:79)

(cid:79)

(cid:79)

(

N

f (cid:80)(cid:16)
2 )

(

N

2)
(cid:80)(cid:16)

1
2f-1

[

N

(cid:16)

(

N

f (cid:80)(cid:16)
2 )

(2

f (cid:80)
1)]

(cid:16)

(cid:79)

(

N

2)
(cid:80)(cid:16)

(

N

f (cid:80)(cid:16)
2 )

(2

f (cid:80)
1)]

(cid:16)

[

N

(cid:16)

(cid:79)

2
2f-1

(cid:79)

(

N

f (cid:80)(cid:16)
2 )

(cid:79)

N(cid:80)

k-1
0

(

N (cid:80)(cid:16)
1)

k-1
1

k-1
2

(

N

2)
(cid:80)(cid:16)

[

N

(cid:16)

k-1
2f-1

(

N

f (cid:80)(cid:16)
2 )

(cid:79)

(cid:79)

(cid:79)

N(cid:80)

k
0

k
1

(

N (cid:80)(cid:16)
1)

k
2

(

N

2)
(cid:80)(cid:16)

(cid:79)

(cid:79)

(cid:79)

(

N

f (cid:80)(cid:16)
2 )

[

N

(cid:16)

(cid:79)

k
2f-1

(cid:79)

(2

f (cid:80)
1)]

(cid:16)

(2

f (cid:80)
1)]

(cid:16)

1
2f

(cid:79)

2
2f

(cid:79)

(cid:79)

k-1
2f

k
2f

(cid:79)

(cid:79)

Package arrivals

Completing the three stages 
(prepare, commit and reply)

Block pegged on 
blockchain

Figure 2: The state transition relations of the Markov process

From Figure 2, it is easy to see that the state space of the Markov process {(K(t), M (t)) : t ≥ 0}

is given by

Ω = {(k (red), m (blue)) : k = 0, 1, 2, . . . ; m = 0, 1, 2, . . . , 2f }

∞

=

Level k

k=0
[

8

where

Level k = {(k, 0), (k, 1), (k, 2), . . . , (k, 2f )} .

Based on the state space Ω = ∪∞

k=0Level k, the inﬁnitesimal generator of the Markov

process {(K(t), M (t)) : t ≥ 0} is written as

(1)

B1 B0

B2 A1 A0

A2 A1 A0
. . .
. . .

. . .

,











Q =











B1 = −λ, B0 = λ(1, 0, 0, . . . , 0),

B2 = (N − 2f )µ(0, 0, . . . , 0, 1)T ,

−N µ − λ

N µ

− (N − 1) µ − λ (N − 1) µ

. . .

. . .

−(N − 2f + 1)µ − λ

(N − 2f + 1)µ

−(N − 2f )µ − λ

λ



λ




















where

A1 =














A0 =

, A2 =












. . .

λ

λ






















(N − 2f )µ

.











The following theorem provides a necessary and suﬃcient condition under which the

QBD process Q is stable. Based on this, we can obtain the system stability of the PBFT

consensus mechanism.

Theorem 1. The QBD process Q is stable if and only if ρ = (λ/µ)

2f
k=0 1/ (N − k) < 1.
Thus, the stochastic system of the PBFT consensus mechanism is stable if and only if

P

ρ = (λ/µ)

2f
k=0 1/ (N − k) < 1.

P

9

Proof: To discuss the stability of the level-independent QBD process Q, we will apply

the mean drift method given Neuts [47] or Li [33]. To this end, we write

A = A0 + A1 + A2

−N µ

N µ



− (N − 1) µ (N − 1) µ



= =












. . .

. . .

(N − 2f )µ

−(N − 2f + 1)µ (N − 2f + 1)µ

−(N − 2f )µ

.












It is clear that the Markov chain A is irreducible, aperiodic and positive recurrence due

to the fact that its state space is ﬁnite and Ae = 0, where e is a column vector with all

components ones. In this case, let θ = (θ0, θ1, . . . , θ2f −1, θ2f ) be the stationary probability

vector of the Markov chain A. Therefore, the stationary probability vector θ satisﬁes the

system of linear equations: θA = 0 and θe = 1. Based on this, we obtain

−N θ0 + (N − 2f ) θ2f = 0,

(N − k) θk − (N − k − 1) θk+1 = 0, 1 ≤ k ≤ 2f − 1.

Hence, we get

and for 1 ≤ k ≤ 2f

θ0 =

1

N
N −k

2f

k=0
P

θk =

N
N − k

θ0 =

N
N − k

2f

1

.

N
N −k

k=0
P

By using the mean drift method, it is easy to see that the level-independent QBD

process Q is positive recurrent if and only if

It is easy to check that

θA0e < θA2e.

θA0e = λθIe = λ,

where I is an identity matrix. At the same time, we have

θA2e = θ2f (N − 2f ) µ =

µ

.

1
N −k

2f

k=0
P

10

This gives

that is,

This completes the proof.

< λ,

µ

1
N −k

2f

k=0
P

ρ =

λ
µ

2f

k=0
X

1
N − k

< 1.

In what follows we compute the stationary probability vector of the QBD process Q.

Based on this, we can set up four useful performance measures of the PBFT consensus

mechanism.

If ρ = (λ/µ)

2f
k=0 1/ (N − k) < 1, then the QBD process Q is irreducible and positive
recurrent. In this case, Let π = (π0, π1, π2, π3, . . .) be the stationary probability vector of

P

the QBD process Q, where

and for k = 1, 2, 3, . . .,

π0 = (π0,0)

πk = (πk,0, πk,1, . . . , πk,2f −1, πk,2f ).

Then the vector π uniquely satisﬁes the system of linear equations: πQ = 0 and πe = 1.

Note that the QBD process Q is level-independent, thus it follows from Chapter 3 of Neuts

[47] that the stationary probability vector π is a matrix-geometric solution.

The following theorem is a direct result of the level-independent QBD process Q by

using Chapter 3 of Neuts [47], thus we restate it but its proof is omitted here.

Theorem 2. If ρ = (λ/µ)

2f
k=0 1/ (N − k) < 1, then the QBD process Q is irreducible
and positive recurrent, and its stationary probability vector π = (π0, π1, π2, π3, . . .) is given

P

by

πk = π1Rk−1, k ≥ 1,

where π0 and π1 can be uniquely determined by the following system of linear equations

π0B1 + π1B2 = 0,

π0B0 + π1(A1 + RA2) = 0,

π0 + π1(I − R)−1e = 1.

11

Note that the stationary probability vector π = (π0, π1, π2, π3, . . .) in general has not

an explicit expression, thus we mainly develop the numerical solution to the vector π. To

this end, it is easy to see from Chapter 3 of Neuts [47] that we ﬁrst need to numerically

compute the rate matrix R, which is the minimal nonnegative solution to the following

nonlinear matrix eqution

R2A2 + RA1 + A0 = 0.

Based on this, the rate matrix R can be approximately calculated by an iterative algorithm

as follows:

and for n = 0, 1, 2, . . . ,

R0 = 0,

Rn+1 = (R2

nA2 + A0)(−A1)−1.

For the matrix sequence {R (n) ; n ≥ 0}, Chapter 3 of Neuts [47] indicated that R (n) ↑ R

as n → ∞. For any suﬃciently small positive number ε within the desired degree of
accuracy set at 10−12, if there exists a positive integer n such that

kR (n + 1) − R (n)k = max

2f

R (n + 1)i,j − R (n)i,j

0≤i≤2f 


j=0 (cid:12)
X
(cid:12)
(cid:12)

< ε,




(cid:12)
(cid:12)
(cid:12)

then we take R = R (n). This gives an approximate solution of the stationary probability





vector π by means of Theorem 2.

Once the stationary probability vector π is computed numerically, we can provide four

useful performance measures of the PBFT consensus mechanism as follows:

(a) The average stationary number of transaction packages at the client

∞

∞

E [K] =

kπke =

kπ1Rk−1e = π1(I − R)−2e.

(b) The average stationary number of nodes to have veriﬁed the validity of

Xk=1

Xk=1

a transaction package

∞

2f

∞

E [M ] =

mπk,m =

πkφ = π1(I − R)−1φ,

Xk=1

m=0
X

Xk=1

12

where φ = (0, 1, 2, . . . , 2f − 1, 2f )T .

(c) The stationary block-pegged rate of the PBFT consensus mechanism

From Figure 1, it is seen that the block-generated and block-pegged processes are

described as a queueing process, in which the inputs are a Poisson process but the service

process is relatively complicated.

From Figure 2, we can observe that the block-pegged process is a Markovian arrival

process (MAP) whose matrix representation (C, D) of inﬁnite sizes are given by

B1 B0



A1 A0

A1 A0

C =











It is clear that Q = C + D.

A1 A0
. . .

. . .

0

B2

0

A2

0

A2

, D =



























.














0
. . .

. . .

If ρ = (λ/µ)

2f
k=0 1/ (N − k) < 1, then the QBD process Q is irreducible and positive
recurrent, and the stationary block-pegged rate of the PBFT consensus mechanism is

P

given by

γ = πDe = π1B2e +

∞

A2e

πk

!

Xk=2

= π1B2e + π1R (I − R)−1 A2e.

(d) The stationary block-pegged reward per unit time of the major node

Note that the N nodes are equal as a major node in the PBFT consensus mechanism,

thus any one of them becomes the major node with probability 1/N . It is easy to see that

the stationary block-pegged total reward per unit time of the PBFT consensus mechanism

is γc, thus the stationary block-pegged reward per unit time of the major node is given

by

Υ =

1
N

γc =

1
N

h

π1B2e + π1R (I − R)−1

A2e

c.

i

4 Numerical Analysis

In this section, we use two groups of numerical examples to verify the validity of our

theoretical results, and to show how the four performance measures of the PBFT consensus

mechanism depend on some key system parameters.

13

 
Group one: The number f of Byzantine nodes, and the rate µ of going through these

three stages (prepare, commit and reply).

The system parameters are taken as follows: λ = 1; µ ∈ (3, 9); c = 12.5BTC; f =

50, 100, 320; and using N = 3f + 1 leads to N = 151, 301, 961.

]

K

[
E

0.14

0.12

0.1

0.08

0.06

0.04

0.02

0

3

f= 50
f= 100
f= 320

4

5

6

7

8

9

]

M
[
E

140

120

100

80

60

40

20

0

3

f= 50
f= 100
f= 320

4

5

6

7

8

9

Figure 3: E[K] and E[M ] vs. µ and f

From the left of Figure 3, it is seen that E[K] decreases as µ increases, and it also

decreases as f (or N ) increases. This shows that the PBFT consensus mechanism makes

the block-pegged on blockchain faster either as µ increases or as f (or N ) increases. Such

a numerical result as µ increases is intuitive from a real observation; while another result

as f (or N ) increases has an interesting practical signiﬁcance, i.e., we can speed up the

block-pegged on blockchain through increasing the number N of nodes in the blockchain

network. Similarly, it is observed from the right of Figure 3 that E[M ] decreases as µ

increases; but it increases as f (or N ) increases, this can easily be understood due to the

increase of N .

From the left of Figure 4, it is seen that γ increases as µ increases, and it also increases

as f (or N ) increases. This shows that the PBFT consensus mechanism makes the block-

pegged on blockchain faster either as µ increases or as f (or N ) increases. Such two

numerical results are intuitive. Similarly, it is observed from the right of Figure 4 that Υ

increases as µ increases; but it decreases as f (or N ) increases, this shows that a bigger

number N can increase the proﬁt of each node.

Group two: The number f of Byzantine nodes, and the arrival rate λ of transaction

packages at the client.

The system parameters are taken as follows: µ = 9; λ ∈ (1, 3); c = 12.5BTC; f =

14

600

500

400

300

200

100

0

3

f= 50
f= 100
f= 320

4

5

6

7

8

9

8

7.5

7

6.5

6

5.5

5

3

f= 50
f= 100
f= 320

4

5

6

7

8

9

Figure 4: γ and Υ vs. µ and f

50, 100, 320; and using N = 3f + 1 leads to N = 151, 301, 961.

]

K

[
E

0.14

0.12

0.1

0.08

0.06

0.04

0.02

0

1

f= 50
f= 100
f= 320

1.2

1.4

1.6

1.8

2

2.2

2.4

2.6

2.8

3

]

M
[
E

140

120

100

80

60

40

20

0

1

f= 50
f= 100
f= 320

1.2

1.4

1.6

1.8

2

2.2

2.4

2.6

2.8

3

Figure 5: E[K] and E[M ] vs. λ and f

From the left of Figure 5, it is seen that E[K] increases as λ increases, but it decreases

as f (or N ) increases. This shows that the PBFT consensus mechanism makes the block-

pegged on blockchain faster either as λ increases or as f (or N ) increases. Similarly, it

is observed from the right of Figure 5 that E[M ] increases as λ increases; and it also

increases as f (or N ) increases, this can easily be explained by increasing the number N .

From the left of Figure 6, it is seen that γ increases as λ increases, and it also increases

as f (or N ) increases. This shows that the PBFT consensus mechanism makes the block-

pegged on blockchain faster either as µ increases or as f (or N ) increases. Similarly, it is

observed from the right of Figure 6 that Υ increases as µ increases; but it decreases as f

(or N ) increases, this shows that a bigger number N can increase the proﬁt of each node.

15

1400

1200

1000

800

600

400

200

0

1

f= 50
f= 100
f= 320

1.2

1.4

1.6

1.8

2

2.2

2.4

2.6

2.8

3

16

15

14

13

12

11

10

9

8

7

f= 50
f= 100
f= 320

1

1.2

1.4

1.6

1.8

2

2.2

2.4

2.6

2.8

3

Figure 6: γ and Υ vs. λ and f

5 Concluding Remarks

In this paper, we describe a simple stochastic performance model of the PBFT consensus

mechanism, and reﬁne the stochastic performance model as not only a queueing system

with complicated service times but also a level-independent QBD process. We apply the

matrix-geometric solution to obtain a necessary and suﬃcient condition under which the

PBFT consensus system is stable, and establish the stationary probability vector of the

QBD process. Based on this, we provide four useful performance measures of the PBFT

consensus mechanism, and can numerically compute each of them. Finally, we use some

numerical examples to show how the four performance measures are inﬂuenced by some

key parameters of the PBFT consensus mechanism. By means of the theory of multi-

dimensional Markov processes, we are optimistic that the methodology and results given

in this paper are applicable in a wide range research of PBFT consensus mechanism and

even other types of consensus mechanisms.

Along this line, we will continue our future research on several interesting directions

as follows:

—- Let all the three stages (prepare, commit and reply) be diﬀerently exponential

distributions with means 1/µ1, 1/µ2 and 1/µ3, respectively. Note that the extended

stochastic performance model is far more diﬃcult than that of this paper due to some

complicated phase-type calculation.

— Developing eﬀective algorithms for more general stochastic performance model with

the Markovian arrival process of transaction packages at the client, and let all the three

16

stages (prepare, commit and reply) be phase-type (PH) distributions with matrix repre-

sentations (α1, T1), (α2, T2) and (α3, T3), respectively.

— When the arrivals of transaction packages at the client are a renewal process, and/or

some of the three stages (prepare, commit and reply) follow general probability distribu-

tions, an interesting future research is to focus on ﬂuid and diﬀusion approximations of

PBFT consensus mechanism.

— Setting up reward function with respect to cost structure, transaction fee, mining

reward, security and so forth. It is very interesting in our future study to develop stochastic

optimization, Markov decision processes and stochastic game models in the study of PBFT

consensus mechanism and even other types of consensus mechanisms.

Acknowledgment

Quan-Lin Li was supported by the National Natural Science Foundation of China under

grants No. 71671158 and 71932002.

References

[1] Abraham, I., Gueta, G., Malkhi, D., Alvisi, L., Kotla, R., & Martin, J. P. (2017).

Revisiting fast practical byzantine fault tolerance. arXiv preprint arXiv:1712.01367.

[2] Alqahtani, S., & Demirbas, M. (2021). Bottlenecks in blockchain consensus protocols.

arXiv preprint arXiv:2103.04234.

[3] Bai, Q., Zhou, X., Wang, X., Xu, Y., Wang, X., & Kong, Q. (2019). A deep dive into

blockchain selﬁsh mining. In: The 2019 IEEE International Conference on Communi-

cations, pp. 1-6.

[4] Bano, S., Sonnino, A., Al-Bassam, M., Azouvi, S., McCorry, P., Meiklejohn,

S., & Danezis, G. (2017). Consensus in the age of blockchains. arXiv preprint

arXiv:1711.03936.

17

[5] Bashir, I. (2018). Mastering Blockchain: Distributed Ledger Technology, Decentraliza-

tion, and Smart Contracts Explained. Packt Publishing Ltd.

[6] Bravo, M., Istv´an, Z., & Sit, M. K. (2020). Towards improving the performance of

BFT consensus for future permissioned blockchains. arXiv preprint arXiv:2007.12637.

[7] Cachin, C., & Vukoli´c, M. (2017). Blockchain consensus protocols in the wild. arXiv

preprint arXiv:1707.01873.

[8] Carlsten, M. (2016). The impact of transaction fees on bitcoin mining strategies. Doc-

toral Dissertation, Princeton University.

[9] Carrara, G. R., Burle, L. M., Medeiros, D. S., de Albuquerque, C. V. N., & Mattos, D.

M. (2020). Consistency, availability, and partition tolerance in blockchain: a survey on

the consensus mechanism over peer-to-peer networking. Annals of Telecommunications,

75(3), 163-174.

[10] Castro, M., & Liskov, B. (1999). Practical Byzantine fault tolerance. In: Proceedings

of the Third Symposium on Operating Systems Design and Implementation, pp: 173-

186.

[11] Castro, M., & Liskov, B. (2002). Practical Byzantine fault tolerance and proactive

recovery. ACM Transactions on Computer Systems, 20(4), 398-461.

[12] Chaudhry, N., & Yousaf, M. M. (2018). Consensus algorithms in blockchain: Com-

parative analysis, challenges and opportunities. In: The 12th International Conference

on Open Source Systems and Technologies, pp. 54-63.

[13] Dai, H. N., Zheng, Z., & Zhang, Y. (2019). Blockchain for Internet of Things: A

survey. IEEE Internet of Things Journal, 6(5), 8076-8094.

[14] Ekramifard, A., Amintoosi, H., Seno, A. H., Dehghantanha, A., & Parizi, R. M.

(2020). A systematic literature review of integration of blockchain and artiﬁcial in-

telligence. In: Blockchain Cybersecurity, Trust and Privacy, pp. 147-160. Springer,

Advances in Information Security book series, volume 79.

[15] Fan, C., Ghaemi, S., Khazaei, H., & Musilek, P. (2020). Performance evaluation of

blockchain systems: A systematic survey. IEEE Access, 8, 126927-126950.

18

[16] Fang, M., & Liu, J. (2020). Toward low-cost and stable blockchain networks. In: The

2020 IEEE International Conference on Communications, pp. 1-6.

[17] Fauziah, Z., Latifah, H., Omar, X., Khoirunisa, A., & Millah, S. (2020). Application

of blockchain technology in smart contracts: A systematic literature review. Aptisi

Transactions on Technopreneurship, 2(2), 160-166.

[18] Ferdous, M. S., Chowdhury, M. J. M., Hoque, M. A., & Colman, A. (2020). Blockchain

consensuses algorithms: A survey. arXiv preprint arXiv:2001.07091.

[19] Fralix, B. (2020). On classes of Bitcoin-inspired inﬁnite-server queueing systems.

Queueing Systems, 95, 29–52.

[20] Geissler, S., Prantl, T., Lange, S., Wamser, F., & Hossfeld, T. (2019). Discrete-time

analysis of the blockchain distributed ledger technology. In: The 31st International

Teletraﬃc Congress, pp. 130-137.

[21] G¨obel, J., Keeler, H. P., Krzesinski, A. E., & Taylor, P. G. (2016). Bitcoin blockchain

dynamics: The selﬁsh-mine strategy in the presence of propagation delay. Performance

Evaluation, 104, 23-41.

[22] Gopalan, A., Sankararaman, A., Walid, A., & Vishwanath, S. (2020). Stability and

scalability of blockchain systems. Proceedings of the ACM on Measurement and Anal-

ysis of Computing Systems, 4(2), 1-35.

[23] Gueta, G. G., Abraham, I., Grossman, S., et al. (2019). Sbft: a scalable and decentral-

ized trust infrastructure. In: The 49th Annual IEEE/IFIP International Conference

on Dependable Systems and Networks, pp. 568-580.

[24] Hao, X., Yu, L., Liu, Z., Zhen, L., & Dawu, G. (2018). Dynamic practical byzan-

tine fault tolerance. In: The 2018 IEEE Conference on Communications and Network

Security, pp. 1-8.

[25] Huang, D., Ma, X., & Zhang, S. (2019). Performance analysis of the raft consensus

algorithm for private blockchains. IEEE Transactions on Systems, Man, and Cyber-

netics: Systems, 50(1), 172-181.

19

[26] Huang, H., Kong, W., Zhou, S., Zheng, Z., & Guo, S. (2021). A survey of state-of-the-

art on blockchains: Theories, modelings, and tools. ACM Computing Surveys, 54(2),

1-42.

[27] Javier, K. and Fralix, B. (2020). A further study of some Markovian Bitcoin models

from G¨obel et al.. Stochastic Models, 36(2), 223-250.

[28] Khamar, J., & Patel, H. (2021). An extensive survey on consensus mechanisms for

blockchain technology. In: Data Science and Intelligent Applications, pp. 363-374.

Springer, Lecture Notes on Data Engineering and Communications Technologies book

series, volume 52.

[29] Kiayias, A., & Russell, A.

(2018). Ouroboros-BFT: A simple Byzan-

tine

fault

tolerant

consensus protocol.

IACR Cryptol.

ePrint Arch. 1049.

https://eprint.iacr.org/2018/1049.pdf.

[30] Kiﬀer, L., Rajaraman, R., & Shelat, A. (2018). A better method to analyze blockchain

consistency. In: Proceedings of the 2018 ACM SIGSAC Conference on Computer and

Communications Security, pp. 729-744.

[31] Lamport, L. (1983). The weak Byzantine generals problem. Journal of the ACM,

30(3), 668-676.

[32] Lamport L. Shostak R, Pease M. (1982) The Byzantine generals problem. ACM

Transactions on Programming Languages and Systems, 4(3), 382-401.

[33] Li, Q. L. (2010). Constructive Computation in Stochastic Models with Applications:

The RG-Factorizations. Springer.

[34] Li, Q. L., Chang, Y. X., Wu, X., & Zhang, G. (2020). A new theoretical frame-

work of pyramid markov processes for blockchain selﬁsh mining. arXiv preprint

arXiv:2007.01459.

[35] Li, Q. L., Ma, J. Y., & Chang, Y. X. (2018). Blockchain queue theory. In: Inter-

national Conference on Computational Social Networks, pp. 25-40. Springer, Lecture

Notes in Computer Science book series, volume 11280.

[36] Li, Q. L., Ma, J. Y., Chang, Y. X., Ma, F. Q., & Yu, H. B. (2019). Markov processes

in blockchain systems. Computational Social Networks, 6(1), 1-28.

20

[37] Li, Y., Cao, B., Liang, L., Mao, D., & Zhang, L. (2021). Block access control in

wireless blockchain network: Design, modeling and analysis. IEEE Transactions on

Vehicular Technology, Date of Publication: 14 June 2021.

[38] Li, Y., Cao, B., Peng, M., Zhang, L., Zhang, L., Feng, D., & Yu, J. (2020). Direct

acyclic graph-based ledger for Internet of Things: Performance and security analysis.

IEEE/ACM Transactions on Networking, 28(4), 1643-1656.

[39] Maleh, Y., Shojafar, M., Alazab, M., & Romdhani, I. (Eds.). (2020). Blockchain for

Cybersecurity and Privacy: Architectures, Challenges, and Applications. CRC Press.

[40] Malkhi, D., Nayak, K., & Ren, L. (2019). Flexible byzantine fault tolerance. In:

Proceedings of the 2019 ACM SIGSAC Conference on Computer and Communications

Security, pp. 1041-1053.

[41] Martin, J. P., & Alvisi, L. (2006). Fast Byzantine consensus. IEEE Transactions on

Dependable and Secure Computing, 3(3), 202-215.

[42] Meshcheryakov, Y., Melman, A., Evsutin, O., Morozov, V., & Koucheryavy, Y.

(2021). On performance of PBFT for IoT-applications with constrained devices. arXiv

preprint arXiv:2104.05026.

[43] Miˇsi´c, J., Miˇsi´c, V. B., & Chang, X. (2020). Performance of Bitcoin network with

synchronizing nodes and a mix of regular and compact blocks. IEEE Transactions on

Network Science and Engineering, 7(4), 3135-3147.

[44] Narayanan, A., Bonneau, J., Felten, E., Miller, A., & Goldfeder, S. (2016). Bitcoin

and Cryptocurrency Technologies: A Comprehensive Introduction. Princeton Univer-

sity Press.

[45] Natoli, C., Yu, J., Gramoli, V., & Esteves-Verissimo, P. (2019). Deconstructing

blockchains: A comprehensive survey on consensus, membership and structure. arXiv

preprint arXiv:1908.08316.

[46] Nayak, K., Kumar, S., Miller, A., & Shi, E. (2016). Stubborn mining: Generalizing

selﬁsh mining and combining with an eclipse attack. In: The 2016 IEEE European

Symposium on Security and Privacy, pp. 305-320.

21

[47] Neuts, M. F. (1981). Matrix-Geometric Solutions in Stochastic Models: An Algorith-

mic Approach. The Johns Hopkins University Press.

[48] Nguyen, G. T., & Kim, K. (2018). A survey about consensus algorithms used in

blockchain. Journal of Information processing systems, 14(1), 101-128.

[49] Nijsse, J., & Litchﬁeld, A. (2020). A taxonomy of blockchain consensus methods.

Cryptography, 4(4), 32.

[50] Ongaro, D., & Ousterhout, J. (2014). In search of an understandable consensus algo-

rithm. In: Proceedings of 2014 USENIX Annual Technical Conference, pp. 305-319.

[51] Pahlajani, S., Kshirsagar, A., & Pachghare, V. (2019). Survey on private blockchain

consensus algorithms. In: The 1st International Conference on Innovations in Infor-

mation and Communication Technology, pp. 1-6.

[52] Papadis, N., Borst, S., Walid, A., Grissa, M., & Tassiulas, L. (2018). Stochastic

models and wide-area network measurements for blockchain design and analysis. In:

IEEE INFOCOM 2018-IEEE Conference on Computer Communications, pp. 2546-

2554.

[53] Pease, M., Shostak, R., & Lamport, L. (1980). Reaching agreement in the presence

of faults. Journal of the ACM, 27(2), 228-234.

[54] Raj, K. (2019). Foundations of Blockchain: The Pathway to Cryptocurrencies and

Decentralized Blockchain Applications. Packt Publishing Ltd.

[55] Rehan, M. M., & Rehmani, M. H. (Eds.). (2020). Blockchain-Enabled Fog and Edge

Computing: Concepts, Architectures and Applications. CRC Press.

[56] Sakho, S., Zhang, J., Essaf, F., Badiss, K., Abide, T., & Kiprop, J. K. (2020).

Research on an improved practical byzantine fault tolerance algorithm. In: The 2nd

International Conference on Advances in Computer Technology, Information Science

and Communications, pp. 176-181.

[57] Salimitari, M., & Chatterjee, M. (2018). A survey on consensus protocols in

blockchain for iot networks. arXiv preprint arXiv:1809.05613.

22

[58] Schar, F., & Berentsen, A. (2020). Bitcoin, Blockchain, and Cryptoassets: A Com-

prehensive Introduction. MIT Press.

[59] Schlichting, R. D., & Schneider, F. B. (1983). Fail-stop processors: An approach to

designing fault-tolerant computing systems. ACM Transactions on Computer Systems,

1(3), 222-238.

[60] Sharma, P., Jindal, R., & Borah, M. D. (2020). Blockchain technology for cloud

storage: A systematic literature review. ACM Computing Surveys, 53(4), 1-32.

[61] Smetanin, S., Ometov, A., Komarov, M., Masek, P., & Koucheryavy, Y. (2020).

Blockchain evaluation approaches: State-of-the-art and future perspective. Sensors,

20(12), 3358.

[62] Stifter, N., Judmayer, A., & Weippl, E. (2019). Revisiting practical byzantine fault

tolerance through blockchain technologies. In: Security and Quality in Cyber-Physical

Systems Engineering, pp. 471-495. Springer.

[63] Varma, S. M., & Maguluri, S. T. (2021). Throughput optimal routing in blockchain

based payment systems. IEEE Transactions on Control of Network Systems, Date of

Publication: 14 June 2021.

[64] Veronese, G. S., Correia, M., Bessani, A. N., Lung, L. C., & Verissimo, P. (2011).

Eﬃcient Byzantine fault-tolerance. IEEE Transactions on Computers, 62(1), 16-30.

[65] Wan, S., Li, M., Liu, G., & Wang, C. (2020). Recent advances in consensus protocols

for blockchain: a survey. Wireless networks, 26(8), 5579-5593.

[66] Wang, W., Hoang, D. T., Hu, P. et al. (2019). A survey on consensus mechanisms and

mining strategy management in blockchain networks. IEEE Access, 7, 22328-22370.

[67] Wilhelmi, F., & Giupponi, L. (2021). Discrete-time analysis of wireless blockchain

networks. arXiv preprint arXiv:2104.05586.

[68] Xiao, Y., Zhang, N., Lou, W., & Hou, Y. T. (2020). A survey of distributed consensus

protocols for blockchain networks. IEEE Communications Surveys & Tutorials, 22(2),

1432-1465.

23

[69] Yao, W., Ye, J., Murimi, R., & Wang, G. (2021). A survey on consortium blockchain

consensus mechanisms. arXiv preprint arXiv:2102.12058.

24

