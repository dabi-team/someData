Block Double-Submission Attack: Block Withholding Can Be
Self-Destructive
Donghwan Lee
Cyber/Network Technology Center
Agency for Defense Development
Seoul, Korea
dlee@add.re.kr

Suhyeon Lee
School of Cybersecurity
Korea University
Seoul, Korea
orion-alpha@korea.ac.kr

Seungjoo Kim
School of Cybersecurity
Korea University
Seoul, Korea
skim71@korea.ac.kr

2
2
0
2

g
u
A
0
3

]

R
C
.
s
c
[

2
v
5
2
4
5
0
.
8
0
2
2
:
v
i
X
r
a

ABSTRACT
Proof-of-Work (PoW) is a Sybil control mechanism adopted in
blockchain-based cryptocurrencies. It prevents the attempt of mali-
cious actors to manipulate distributed ledgers. Bitcoin has success-
fully suppressed double-spending by accepting the longest PoW
chain. Nevertheless, PoW encountered several major security issues
surrounding mining competition. One of them is a Block WithHold-
ing (BWH) attack that can exploit a widespread and cooperative
environment called a mining pool. This attack takes advantage of
untrustworthy relationships between mining pools and participat-
ing agents. Moreover, detecting or responding to attacks is chal-
lenging due to the nature of mining pools. In this paper, however,
we suggest that BWH attacks also have a comparable trust problem.
Because a BWH attacker cannot have complete control over BWH
agents, they can betray the belonging mining pool and seek further
benefits by trading with victims. We prove that this betrayal is not
only valid in all attack parameters but also provides double benefits;
finally, it is the best strategy for BWH agents. Furthermore, our
study implies that BWH attacks may encounter self-destruction of
their own revenue, contrary to their intention.

CCS CONCEPTS
‚Ä¢ Security and privacy ‚Üí Distributed systems security; ‚Ä¢ The-
ory of computation ‚Üí Algorithmic game theory and mech-
anism design.

KEYWORDS
blockchain, block double-submission attack, block withholding
attack, game theoretic analysis, proof-of-work

1 INTRODUCTION
The effort to create true electronic cash, which began with David
Chaum [4], has borne fruit with the emergence of blockchain. The
blockchain technology enabled decentralized cryptocurrency sys-
tems, attracting several attempts to exploit the systems for illicit
gain due to its nature ‚Äî the anonymity and very low participation
barrier of cryptocurrency. One of the most fatal threats against a
cryptocurrency system is double-spending, which spends the same
digital asset more than once. To put it differently, one transaction
effectively cancels out an earlier transaction, allowing the attacker
to use their money twice. In such a case, the value of the cryp-
tocurrency may plummet as consumers lose trust in the system‚Äôs
transactions.

The consensus of multiple entities controls a single blockchain
system. As such, Sybil attacks can play a critical role in carrying out
a double-spending attack. A Sybil attack occurs when an attacker

gains control of many identities in a network to exert undue influ-
ence [5]. There are now a variety of control techniques to mitigate
Sybil attacks. The Proof-of-Work (PoW) algorithm used in Bitcoin
is the key protection against such attacks. PoW, or Proof-of-Effort,
was initially developed to combat spam e-mails [6]. Because e-mail
senders must spend sufficient time for hashing computation, PoW
forces spammers to consume energy.

On the Bitcoin blockchain, block generators, i.e., miners, are
required to propose a block with a cryptographic solution on the
blockchain, which requires miners to burn a significant amount of
energy. A miner receives a specific quantity of Bitcoin as compen-
sation. By design, the difficulty of PoW gradually increases as time
goes on and more miners participate. As a result, generating even
a single block is nearly impossible for an individual miner. This
barrier to entry enables Bitcoin to maintain trust in the face of a
double-spending attack.

While PoW was effective at preventing a Sybil attack, several
research studies have revealed that potential attacks could harm
the incentive compatibility of a PoW-based blockchain system (¬ß2).
Particularly, the selfish mining attack allowed the attacker to gain
greater rewards than their mining power by purposely dissimulat-
ing a PoW block. Furthermore, there are various attack techniques
between mining pools or miners that consider real-world mining
conditions, in which a few leaders established dominant possession
as mining difficulty increased [7, 9, 13, 19, 20, 22, 23].

An attacker can expect additional rewards even in a cooperative
environment, mainly mining pools. For example, Block WithHold-
ing (BWH) attacks are effective strategies. An attacker infiltrates
to another mining pool for a better profit. Using the victim‚Äôs trust,
BWH attackers only submit partial solutions (pPoW), not full solu-
tions (fPoW), that directly reward victims ‚Äî establishing mutual
trust within a mining pool is a critical issue. There are a few meth-
ods methods to avoid such attacks [1, 8, 14, 17, 22, 26, 27]; however,
they cannot be fundamental remedies due to the restricted visibility
of individual miners. Due to the same reason, the trust issue exists
within the attacking pool.

In this study, we propose a novel attack technique called Block
Double Submission (BDS) (¬ß3). Under BWH attacks, a PoW block
discovered by an infiltrating agent is withheld. We found that the
victim pool needs the block. If the infiltrated agent, who is not
supposed to withhold blocks, sells the block to the victim pool, both
parties will benefit from this trade: the infiltrated agent and the
victim pool. As illustrated in Figure 3, a BDS attack can happen
when two mining pools are engaged in a BWH attack. While the
infiltrated miner delivers fPoWs only to the BWH-attacking pool,
the miner sells fPoWs simultaneously to two mining pools ‚Äî hence
the name.

 
 
 
 
 
 
The pivotal factor for the attack is the lack of trust between the
BWH-attacking pool and its infiltrating miners, which it exploits.
More generally, this attack relies on lack of trust between a mining
pool and its miners like the BWH attack does. Compared to the
benefits from a BWH attack, which are limited to 10%, the rewards
from a BDS attack can reach nearly 100%. This double reward
strongly motivates the BDS attackers. The victim pool can recover
its losses from the BWH attack through this new trade by publishing
fPoWs, and the traitor agent can make a substantial profit.

As previously stated, this new strategy damages Block With-
Holding (BWH)-attacking pools. Numerous research has explored a
BWH-based counterattack to the BWH attack [1, 14, 18, 22]. Detect-
ing and assessing the infiltration power of a BWH attack is a critical
prerequisite for conducting the counterattack. However, detecting
a BWH attack from a private pool is nearly impossible [14]. Big
private mining pools exist in the real world, for example, BitFury.
We cannot join this pool freely and cannot get proof of attacks
even if an attack is underway. On the other hand, betrayal from
inside is possible even in a closed group. In other words, traitors
in a BWH-attacking pool can ruin the pool‚Äôs strategy for their
additional benefit.

To demonstrate that such a betrayal deal is viable, we establish
three BDS attack conditions and prove that trades satisfying the
criteria always exist (¬ß4). Then, using game-theoretic approaches,
we show that mining agents‚Äô dominant strategy is to betray the
BWH attacking pool and participate in a BDS attack (¬ß5). Conse-
quently, we demonstrate that a BWH attacker suffers a loss due to
the principal-agent problem between a BWH attacking pool and
mining agents. The quantitative study (¬ß6) and simulations (¬ß7)
indicate the BDS attack‚Äôs impact and corroborate our theoretical
analysis. BDS is a subtle attack scheme that damages another at-
tacker while compensating for the victim‚Äôs loss. Finally, we examine
BDS‚Äôs multilateral aspects and applications in discussion (¬ß8).

This paper presents the BDS attack, raising the question of
whether a mining pool can trust its miners unconditionally. Our
contributions are as follows:

‚Ä¢ We propose a novel attack technique, the BDS attack, in
which a mining agent betrays the BWH attacking pool in
pursuit of more rewards.

‚Ä¢ We demonstrated that a BDS attack could reward the be-
trayed agent with twice as much benefit as merely partici-
pating in a BWH attack.

‚Ä¢ We discovered that a BWH attack could result in significant

losses to a BWH attacking pool due to BDS attacks.

2 RELATED WORK
This section reviews two related attacks, selfish mining and BWH
attacks, on PoW mining.

2.1 Selfish Mining
Selfish mining is the process of retaining blocks to force other
miners to squander computational power. In brief, the attacker
discovers ùëÅ (ùëÅ > 2) blocks first and then publishes them when
other miners discover ùêæ (ùëÅ > ùêæ) blocks. Due to the long chain
rule, the blocks broadcasted by other miners do not belong to the
main chain. Therefore, the attacker can publish blocks above their

2

proportional mining power. As a block rewards the miner who
published it, the attacker can make a disproportionate profit.

Eyal and Sirer initially proposed the concept of selfish mining [9].
This study shows that selfish mining can generate disproportionate
revenue for attackers. Sapirshtein et al. [23] found the optimal con-
ditions for selfish mining. It demonstrated that selfish miners could
generate more revenue by employing dynamic methods. An eclipse
attack isolates a particular peer-to-peer network node. Nayak et al.
[20] suggested a mining strategy incorporating an eclipse attack
and selfish mining to increase revenue. Ethereum used a modified
version of the Greedy Heaviest Object Subtree (GHOST) protocol
and rewards of uncle blocks for its safe, high-throughput environ-
ment [27]. Liu and Feng demonstrated that Ethereum is similarly
susceptible to selfish mining.

There are studies on the countermeasures against selfish mining
[25], [21]. They are primarily associated with negating or delayed-
publication blocks. Lee and Kim [15] suggested a selfish mining
detection and mitigation technique in a mining pool environment.
Like the BWH attack detailed in the following section, selfish min-
ing involves the withholding of blocks. Also, as the BWH attack
does not require much CPU power, it may be more viable in a
real-world mining setting.

2.2 Block Withholding Attack
A BWH attack is a strategy that miners delay the submission of
blocks in PoW mining environments, generalizing selfish mining.
Specifically, a BWH-attacking pool delays the submission of blocks
in the target mining pool. Our research focuses solely on the latter
concept, namely mining pool behavior.

The concept of a mining pool is to enable collaboration, as it
is exceedingly unusual for individuals to discover blocks. Mining
pools facilitate PoW tasks for miners. Miners discovering nonces for
a hash value in the mining pool are compensated for them, even if
the nonces do not satisfy the networks‚Äô difficulty requirements. This
is known as a pPoW, and a valid nonce in the network is referred as
fPoW. Mining pools get rewards from the PoW blockchain network
via fPoW and distribute them to their miners.

Rosenfeld [22] conceived the initial idea for a BWH attack. The
study presented an attack concept sabotaging the mining pool by
submitting only pPoWs, unrelated to miners receiving rewards from
the Bitcoin network. Eyal [7] proposed an attack strategy advan-
tageous to the attacker but detrimental to the target. This attack
strategy comprises mining pools infiltrating other mining pools
and some miners submitting only pPoWs to indirectly diminish
the effectiveness of other mining pools. When two mining pools
engage in attacks, each suffers a loss. Kwon et al. [13] addressed
this dilemma by employing the Fork After Withholding (FAW) tech-
nique. Their work introduced advantageous attack technique since
it only submits blocks under forking situations rather than always
withholding them. In addition, Liu et al. [16] and Chang et al. [3]
examined an attack technique leveraging an uncle block rewarded
in Ethereum.

Countermeasures against the BWH attack can be classified pri-
marily into those that modify mining mechanisms and others. In
order to prevent miners from distinguishing between fPoW and
pPoW, Bag et al. [1] and Eyal [8] recommended cryptographically

ALGORITHM 1: Mining in a Mining Pool A

ALGORITHM 2: Mining Reward in a Mining Pool

Function Mining

task ‚Üê newTask(ùë§);
(pPoW, fPoW) ‚Üê work(task);
send(A, (pPoW, fPoW));
revenue ‚Üê revenue + recv( A );

end

splitting the mining mechanism into two stages. Lee and Kim [14]
developed a strategy for detecting and responding to the BWH
attack by installing sensor miners in different mining pools. Sarker
et al. [24] presented a mining pool-wide anti-withholding reward
system to minimize BWH attacks‚Äô efficacy by increasing honest
miners‚Äô rewards.

Our research uses a significantly different strategy than the pre-
vious studies. The study provides both an offensive and a defensive
technique aimed towards attackers. In addition, our solution is re-
alistic because it does not require alterations to the fundamental
PoW mining procedures. The following section details a system
model and problem statements.

3 SYSTEM MODEL AND PROBLEM

STATEMENT

This section illustrates the system model under consideration by
explaining Bitcoin PoW miners and mining pools. Then we define
the problem statement that raises a trust concern about the BWH
attack.

3.1 System Model
The analysis presented in this paper assumes that at least two
mining pools exit on the Bitcoin network. Miners and mining pools
can easily enter and exit a mining pool. Algorithm 1 depicts the
algorithm for mining in a mining pool. A mining pool assigns a
miner a task, including an information set block to mine. The miner
attempts to solve the cryptographic puzzle using hash functions and
nonce values. The miner can submit two types of PoW, including
ùëùùëÉùëúùëä and ùëì ùëÉùëúùëä . Miners receive rewards proportional to their
PoW contribution from the mining pool.

Algorithm 2 outlines the mining pool rewards mechanism. A
mining operation offers miners ùëì ùëÉùëúùëä and ùëùùëÉùëúùëä , and then it pub-
lishes ùëì ùëÉùëúùëä as a legitimate block to the Bitcoin network. The block
contains the coinbase transaction of the mining pool, which mints
new Bitcoins for the mining pool. The payout for miners is propor-
tional to the number of ùëùùëÉùëúùëä . In other words, submitting ùëì ùëÉùëúùëä
does not result in a greater reward than submitting ùëùùëÉùëúùëä .

In the BWH attack, a mining pool infiltrates another pool of
miners. The former is known as a BWH-attacking pool, whereas
the latter is known as a victim mining pool or victim pool. In a
BWH-attacking pool, miners performing BWH mining are called
BWH miners. Infiltrated miners do not contribute fPoW to the
victim pool. Consequently, both the victim pool‚Äôs earnings and the
infiltrating miners‚Äô incentive from the victim pool decrease. As the
total mining power diminishes; however, the BWH-attacking pool‚Äôs
revenue increases more than the loss in infiltrating miners.

Function Reward

forall Miner ùë§ ‚àà Miners do

(pPoW, fPoW) ‚Üê recv(ùë§);
revenue ‚Üê revenue + publish(fPoW);
reward(ùëé) ‚Üê count(pPoW);

end

end

Given that the total network mining power is 1, let the BWH-
attacking pool‚Äôs computing power be ùõº and the victim pool‚Äôs com-
puting power be ùõΩ. They must not exceed 50%, i.e., 0 ‚â§ ùõº, ùõΩ ‚â§ 0.5.
Let the infiltration ratio from the attacker to the victim pool be ùúè
where 0 ‚â§ ùúè ‚â§ 1. Then the revenue of the BWH-attacking pool is
given as follows:

ùúèùõº
ùõΩ + ùúèùõº
The revenue of the victim pool is as follows:

(1 ‚àí ùúè)ùõº
1 ‚àí ùúèùõº

ùõΩ
1 ‚àí ùúèùõº

+

ùõΩ
1 ‚àí ùúèùõº

ùõΩ
ùõΩ + ùúèùõº

.

.

(1)

(2)

Then, we consider a BWH attack performed with the optimal infil-
tration ratio ùúè [14], which is:

ùõΩ ‚àí ùõºùõΩ ‚àí ‚àöÔ∏ÅùõΩ2 ‚àí ùõºùõΩ2 ‚àí ùõºùõΩ3
‚àíùõº + ùõº 2 + ùõºùõΩ

.

(3)

From a structural viewpoint, a BWH-attacking pool can remotely
infiltrate BWH miners into a victim pool and share earnings. Fig-
ure 1 illustrates this concept, which is referred to as a naive block
withholding structure. Pool A is the attacking BWH pool, whereas
Pool B is the victim BWH pool. The infiltrated miners who partici-
pated do not submit fPoW to sabotage Pool B‚Äôs revenue. Instead,
Pool A divides its increased earnings with the infiltrated miners to
compensate for Pool B‚Äôs diminished rewards.

The best response for a victim mining pool is a mutual BWH
attack against the attacking pool, damaging both mining pools. On
the other hand, detecting a BWH attack in the real world might
be challenging. Research about detection [14] pointed out that it is
impossible to detect a BWH attack using a private mining power
with absolute certainty. In this vein, we can presume that this diffi-
culty in detecting the BWH attack comes from the incapability of
launching an effective counterattack. This study, therefore, assumes
that it is practically hard for the victim pool to counterattack the
BWH-attacking pool.

3.2 Problem Statement
The BWH attack exploits the lack of trust between a mining pool
and its users. The attack can succeed if the infiltrating miners send
only pPoW to the BWH-attacking pool in cooperation. We suspect,
however, that the level of trust between the BWH-attacking pool
and BWH miners is sufficient to lead such cooperation.

The BWH-attacking pool cannot fully regulate the operations of
infiltrated miners, given the current structure of mining pools. For
instance, by submitting fPoW to the victim pool and disobeying the

3

Figure 1: Structure of the na√Øve BWH attack: The miners infiltrate Pool B (the victim pool), following the order of Pool A
(the BWH attacker). The BWH-attacking pool cannot observe nor can expect trustworthy BWH behaviors from the infiltrated
miners.

Figure 2: Structure of the fixed BWH attack: The miners infiltrate Pool B (the victim pool) through Pool A (the BWH attacker),
where the BWH-attacking pool can control the BWH behaviors of the infiltrated miners and fPoWs are not submitted to Pool
B. The infiltrated miners may betray the attacking pool, and Pool B requires the withheld fPoWs.

Figure 3: BDS Attack: The miners infiltrate Pool B (victim), following the order from Pool A (the BWH attacker). The infiltrated
miners submit PoWs to Pool A and Pool B simultaneously, and Pool B can publish fPoWs, which might also be withheld,
making an extra profit. The infiltrated miners can share the extra profit by selling fPoWs to the victim pool.

4

direction from the attacking pool, the infiltrated miners can still
receive rewards from the BWH-attacking pool. With this behavior,
the infiltrating miners likely generate more revenue than the in-
tended BWH attack. Consequently, the BWH mining attack against
the pool will be in vain.

Nevertheless, there is still a significant problem. Even though
the BWH-attacking pool directly penetrates the victim pool, inter-
nal miners can still trade fPoWs with the victim pool. A mining
task contains coinbase information, which indicates which mining
pool is currently under attack. Based on this information, miners
can submit fPoW independently of the BWH-attacking pool they
belong to. Existing mining pools‚Äô incentive schemes typically do
not differentiate between fPoW and pPoW. In this case, however,
additional awards for fPoWs may be necessary because they pro-
vides an incentive to deviate from their ordinary behavior. It would
also allow BWH miners who merely benefited from utilizing the
reduced mining power via sabotage to make significantly more
rewards than BWH attack-only cases.

Figure 3 illustrates this strategy. We refer to the strategy as a
Block Double-Submission (BDS) Attack in which PoW is sub-
mitted to both a BWH-attacking pool and a victim pool. BDS miners
receive concurrent payments from both mining pools through such
a method. Specifically, the BDS miners submit only pPoW to the
BWH-attacking pool, provided they have successfully identified
the victim pool. If the victim pool publishes a fPoW previously
submitted to the BWH-attacking pool, the BWH-attacking pool
could identify the traitor. The victim pool receives pPoW and fPoW
from BDS miners but does not require pPoW to mint coins. In
this instance, pPoWs measure the mining power of traitors. In the
following section, we examine the rationality of the BDS attack.

4 BLOCK DOUBLE-SUBMISSION ATTACK
This section will explain the rationale behind the BDS attack. First,
we identify the conditions that must be met for the attack to be
reasonable, and then we prove that they are feasible. Second, we
present algorithms for the BDS attack.

4.1 Rationality of the Block
Double-Submission

For this attack to be reasonable, it must be mutually advantageous
and have a minimal boundary. The block double-submission attack
must provide BDS miners greater benefits (C1). Similarly, it ought
to be profitable for the victim pool (C2). In addition, we require that
the victim pool cannot provide higher rewards than a BWH miner
receives for mining with integrity (C3). Accordingly, we summarize
three requirements as follows:

‚Ä¢ (C1) The trade generates greater profits for the victim pool

than the honest mining under a BWH attack.

‚Ä¢ (C2) The trade provides the BWH miner greater revenue

than cooperation for a BWH attack.

‚Ä¢ (C3) The trade is established with rewards less than the ones

given to the BWH miner by honest mining.

Let a price function for purchasing a valid block from a BWH miner
with mining power ùëù where ùëù ‚â§ ùúèùõº be T (ùëù), and the revenue
generated by a victim pool is:

ùëù from a BWH miner

(cid:20)

(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)

(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)

(cid:123)

(cid:122)

(cid:125)(cid:124)
ùõΩ + ùëù
1 ‚àí ùúèùõº + ùëù

cost for the trade
(cid:122)(cid:125)(cid:124)(cid:123)
T (ùëù)

(cid:21)

¬∑

‚àí

The BWH-attacking pool is still infiltrating

(cid:32)(cid:32)
(cid:32)(cid:32)
(cid:125)(cid:124)
(cid:123)
(cid:122)
ùõΩ
ùõΩ + ùúèùõº

.

(4)
Then, the revenue of a BWH miner with the trade is calculated as
follows:

revenue from the trade
(cid:122)(cid:125)(cid:124)(cid:123)
T (ùëù)

(cid:20)

¬∑

ùëù
ùõº

+

revenue from the BWH-attacking pool

(cid:123)

(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)
(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)
(cid:122)
(cid:125)(cid:124)
(1 ‚àí ùúè)ùõº
1 ‚àí ùúèùõº + ùëù
revenue from the victim pool
(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)
(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)
ùõΩ + ùëù
ùúèùõº
(cid:111)
1 ‚àí ùúèùõº + ùëù
ùõΩ + ùúèùõº

(cid:125)(cid:124)
‚àí T (ùëù)

(cid:123)

(cid:122)
(cid:110)

+

(cid:21)

.

(5)

Using the above, we obtain the boundaries of T (ùëù) that satisfies
C1, C2, and C3, respectively.

Lemma 1. There exists a boundary of T (ùëù) for C1.

Proof. For C1, T (ùëù) must satisfy ùëÖùë°,ùë£ > ùëÖùëè,ùë£, where ùëÖùë°,ùë£ is the
revenue with the trade and ùëÖùëè,ùë£ is the revenue without the trade.
ùëÖùë°,ùë£ is given in (4). ùëÖùëè,ùë£ is provided as (2) in Section 3. Therefore,
the following should hold:

ùõΩ
1 ‚àí ùúèùõº

¬∑

ùõΩ
ùõΩ + ùúèùõº

<

T (ùëù) <

(cid:21)

(cid:20)

‚àí T (ùëù)

ùõΩ + ùëù
1 ‚àí ùúèùõº + ùëù
ùëù ¬∑ (1 ‚àí ùúèùõº ‚àí ùõΩ)
(1 ‚àí ùúèùõº + ùëù)(1 ‚àí ùúèùõº)

¬∑

ùõΩ
ùõΩ + ùúèùõº

.

(6)

(7)

‚ñ°

Lemma 2. There exists a boundary of T (ùëù) for C2.

Proof. For C2, T (ùëù) must satisfy ùëÖùë°,ùëö > ùëÖùëè,ùëö, where ùëÖùë°,ùëö is
the revenue with the trade and ùëÖùëè,ùëö is the revenue without the
trade.

ùëÖùë°,ùëö was shown previously in (5). ùëÖùëè,ùëö is given as follows:

ùëÖùëè,ùëö =

ùëù
ùõº

(cid:20) (1 ‚àí ùúè)ùõº
1 ‚àí ùúèùõº

¬∑

+

ùõΩ
1 ‚àí ùúèùõº

ùúèùõº
ùõΩ + ùúèùõº

(cid:21)

.

(8)

Therefore, the following must hold:

T (ùëù) +

ùëù
ùõº

¬∑

+

(cid:20) (1 ‚àí ùúè)ùõº
1 ‚àí ùúèùõº + ùëù
ùõΩ + ùëù
(cid:110)
1 ‚àí ùúèùõº + ùëù

‚àí T (ùëù)

(cid:111)

ùúèùõº
ùõΩ + ùúèùõº

(cid:21)

>

ùëù
ùõº

(cid:20) (1 ‚àí ùúè)ùõº
1 ‚àí ùúèùõº

¬∑

+

ùõΩ
1 ‚àí ùúèùõº

ùúèùõº
ùõΩ + ùúèùõº

(cid:21)

.

(9)

T (ùëù) >

ùõΩ + ùúèùõº
ùõΩ + ùúèùõº ‚àí ùëùùúè

1
(1 ‚àí ùúèùõº)(1 ‚àí ùúèùõº + ùëù)

ùëù
ùõº

¬∑

(cid:20)
ùëù (1 ‚àí ùúè)ùõº +

ùúèùõº
ùõΩ + ùúèùõº

¬∑ (cid:0)ùëùùõΩ ‚àí ùëù (1 ‚àí ùúèùõº)(cid:1)

(cid:21)

(10)

‚ñ°

5

Then we prove that C3 is satisfied comprehensively when T (ùëù) is
already within the boundary for C1.

Lemma 3. If T (ùëù) satisfies C1, T (ùëù) also satisfies C3.

Proof. From Lemma 1, the boundary of T (ùëù) is given as follows:

T (ùëù) <

ùëù ¬∑ (1 ‚àí ùúèùõº ‚àí ùõΩ)
(1 ‚àí ùúèùõº + ùëù)(1 ‚àí ùúèùõº)

= ùëù ¬∑

1 ‚àí ùúèùõº ‚àí ùõΩ
1 ‚àí ùúèùõº + ùëù ‚àí ùúèùõº + ùúè 2ùõº 2 ‚àí ùëùùúèùõº

.

(11)

By using the chain of inequality, which is:

then we attain the following:

ùëù ‚â§ ùúèùõº < ùõΩ < 0.5,

ùõΩ > ‚àíùëù + ùúèùõº + ùëùùúèùõº ‚àí ùúè 2ùõº 2.

Therefore, the following relation holds:

(12)

(13)

ùëù ¬∑

1 ‚àí ùúèùõº ‚àí ùõΩ
1 ‚àí ùúèùõº + ùëù ‚àí ùúèùõº + ùúè 2ùõº 2 ‚àí ùëùùúèùõº
As T (ùëù) < ùëù ‚â§ ùúèùõº < ùõΩ, the maximum of T (ùëù) is not greater than
ùúèùõº.

< ùëù.

(14)

‚ñ°

From the previous results, we can prove that all the conditions are
satisfied under our system model.

Theorem 1. There exists T (ùëù) satisfying all the conditions C1‚Äì3
at the same time.

Proof. With Lemma 3, we only need to prove that there ex-
ists T (ùëù) that satisfies C1 and C2 at the same time. According to
Lemma 1 and Lemma 2, T (ùëù) must satisfy the below inequality.

> T (ùëù) >

ùëù ¬∑ (1 ‚àí ùúèùõº ‚àí ùõΩ)
(1 ‚àí ùúèùõº + ùëù)(1 ‚àí ùúèùõº)
ùõΩ + ùúèùõº
ùõΩ + ùúèùõº ‚àí ùëùùúè
(cid:20)
ùëù (1 ‚àí ùúè)ùõº +

1
(1 ‚àí ùúèùõº)(1 ‚àí ùúèùõº + ùëù)

ùëù
ùõº

¬∑

ùúèùõº
ùõΩ + ùúèùõº

¬∑ (cid:0)ùëùùõΩ ‚àí ùëù (1 ‚àí ùúèùõº)(cid:1)

(cid:21)

(15)

By simplifying the above equation, we obtain the following relation:

1 ‚àí ùúèùõº ‚àí ùõΩ >

ùëù ¬∑

(cid:20)

ùõΩ + ùúèùõº
ùõΩ + ùúèùõº ‚àí ùëùùúè

(1 ‚àí ùúè) +

ùúè
ùõΩ + ùúèùõº

¬∑ (cid:0)ùõΩ ‚àí (1 ‚àí ùúèùõº)(cid:1)

(cid:21)

(16)

ùëù‚àí1<0
(cid:32)(cid:32)(cid:32)
(cid:32)(cid:32)(cid:32)
(cid:122)
(cid:123)
(cid:125)(cid:124)
ùúè (ùëù ‚àí 1)
ùõΩ + ùúèùõº ‚àí ùëùùúè

.

= ùëù +

(17)

Using ùúè < 0.5 (See Appendix A for a proof), we can prove the
following:

6

1 ‚àí ùúèùõº ‚àí ùõΩ > ùúèùõº ‚â• ùëù > ùëù +

Using (12), we finish the proof.

1 > ùõº + ùõΩ > 2ùúèùõº + ùõΩ

ùëù‚àí1<0
(cid:32)(cid:32)(cid:32)
(cid:32)(cid:32)(cid:32)
(cid:122)
(cid:123)
(cid:125)(cid:124)
ùúè (ùëù ‚àí 1)
ùõΩ + ùúèùõº ‚àí ùëùùúè

(18)

(19)
‚ñ°

Eventually, we proved the existence of a rational deal that satis-
fies all the given conditions. The BDS attack block is advantageous
for both parties. The victim mining pool can acquire fPoW without
paying the total rewards associated with its publishing. As a result,
the BDS attack can reasonably be contracted and executed between
BWH miners and a victim pool.

4.2 Algorithms for Block Double-Submission

Attack

We briefly explained the mechanism of the block-double submis-
sion attack in a problem statement. Now, we will discuss specific
algorithms. Although the block-double submission has been proven
reasonable, the current mining pool model needs to be modified
for the BDS trade. The BDS attacker, for example, submits fPoW to
the BWH victim pool. According to Algorithm 1, fPoW does not
affect a miner‚Äôs rewards. Moreover, even though a mining pool
counts an ùëì ùëÉùëúùëä as the rewards by a certain number of ùëùùëÉùëúùëä s,
the proper calculation of the rewards boundary demands the BWH
miner‚Äôs mining power. The BWH victim pool will, therefore, only
accept the block-double submission if ùëì ùëÉùëúùëä exists and the reward
is proportional to the number of ùëùùëÉùëúùëä s.

Algorithm 3 describes the BDS miner. The BDS deal is established
only when fPoW already exists. When the miner discovers fPoW, he
sends both pPoW and fPoW to both the BWH-attacking pool and the
victim pool. If not, only pPoW is submitted to the BWH-attacking
pool.

Algorithm 4 explains how the BWH victim pool computes the re-
wards for a BDS miner. First, the victim pool disregards the miner‚Äôs
rewards if fPoW is omitted. Otherwise, the mining pool calculates
the mining payout using the number of pPoW. The number of pPoW
directly indicates the miner‚Äôs computational power in a probabilistic
manner.

5 GAME-THEORETICAL ANALYSIS
This section examines the double-submission block attack from
a game-theoretic perspective. First, we investigate the strategies
employed by miners in the BWH-attacking pool. The second step
is investigating the pricing of fPoW submitted to the victim pool.
Using the preceding findings, we demonstrate that a BWH attack
may be detrimental to the BWH attackers. In short, the dominant
strategies of BWH miners are to execute BDS attacks for profit,
resulting in the loss of the BWH-attacking pool.

5.1 A Cooperation Game between BWH Miners
The previous section showed that the BDS trade between a miner
and a victim pool can be established reasonably. Given that multiple

ALGORITHM 3: BDS between the BWH-attacking pool
A and the BWH victim pool B

Function Mining

task ‚Üê newTask(ùë§);
(pPoW, fPoW) ‚Üê work(task);
if fPoW ‚â† null then

send(A, (pPoW));
send(B, (pPoW,fPoW));

else

send(A, (pPoW));

end
revenue ‚Üê revenue + recv(A) + recv(B);

end

ùëÖ =

ùëù
ùõº

(cid:20) (1 ‚àí ùúè)ùõº
1 ‚àí ùúèùõº

¬∑

+

ùõΩ
1 ‚àí ùúèùõº

ùúèùõº
ùõΩ + ùúèùõº

(cid:21)

ùê∑ =

ùëù
ùõº

(cid:20) (1 ‚àí ùúè)ùõº
1 ‚àí ùúèùõº + ùëû

¬∑

+

(cid:110)

ùõΩ + ùëû
1 ‚àí ùúèùõº + ùëû

‚àí T (ùëû)

(cid:21)

(cid:111)

ùúèùõº
ùõΩ + ùúèùõº

ùëÖ ‚àí ùê∑ =

ùëù
ùõº

(cid:20)(cid:110)

¬∑

1
1 ‚àí ùúèùõº

‚àí

(cid:111)

1
1 ‚àí ùúèùõº + ùëû
ùúèùõº
(cid:111)
ùõΩ + ùúèùõº

¬∑ (1 ‚àí ùúè)ùõº+

(cid:21)

+ T (ùëû)

(cid:110)

=

‚àí

ùõΩ
1 ‚àí ùúèùõº
ùëù
ùõº

ùõΩ + ùëû
1 ‚àí ùúèùõº + ùëû
ùëû
(1 ‚àí ùúèùõº)(1 ‚àí ùúèùõº + ùëû)

¬∑

¬∑

ùëùùúè
ùõΩ + ùúèùõº
ùëùùúè
ùõΩ + ùúèùõº

¬∑

ùõΩ
ùõΩ + ùúèùõº

+ T (ùëû)

(22)

(23)

(24)

ALGORITHM 4: Rewards from the BDS attack
Function Reward

forall Miner ùë§ ‚àà Miners do

(pPoW, fPoW) ‚Üê recv(ùë§);
if fPoW = null then

quit();

end
revenue ‚Üê revenue + publish(fPoW);
reward(ùëé) ‚Üê tradeCount(pPoW);

end

end

Table 1: Payoff table of two miners in a BWH-attacking pool

Cooperate (C)
Betray (B)

C
ùëÖ, ùëÖ‚Ä≤
ùêª, ùê∑ ‚Ä≤

B
ùê∑, ùêª ‚Ä≤
ùêø, ùêø‚Ä≤

BWH miners may exist in a BWH-attacking pool, it is important to
analyze the dominant strategy as the collective actions of multiple
miners to better understand the miners‚Äô behaviors.

We begin by analyzing a simple model with two miners. Assum-
ing the simplest set of BWH miners, denoted by ùëÄ = {ùëö1, ùëö2},
each miner is assigned the action set ùê¥ = {ùê∂, ùêµ} where ùê∂ repre-
sents ‚ÄòCooperate‚Äô and ùêµ represents ‚ÄòBetray‚Äô (i.e., the BDS). Table
1 is the payoff matrix for the two BWH miners game. Specifically,
we represent the mining power of ùëö1 as ùëù and ùëö2 as ùëû, where
ùëù + ùëû ‚â§ ùúèùõº.

Lemma 4. In Table 1, the boundary of T (¬∑) by Theorem 1 satisfies
the following chains of inequalities:

ùêª > ùëÖ > ùê∑ and ùêø > ùëÖ > ùê∑

ùêª ‚Ä≤ > ùëÖ‚Ä≤ > ùê∑ ‚Ä≤ and ùêø‚Ä≤ > ùëÖ‚Ä≤ > ùê∑ ‚Ä≤

(20)

(21)

Proof. First, for ùêª > ùëÖ, T (¬∑) by Lemma 1 and 2 satisfies it.

Second, for ùëÖ > ùê∑, ùëÖ and ùê∑ are as the following:

7

ùëÖ > ùê∑ is always satisfied with T > 0. Therefore, by Lemma 1 and
Lemma 2, the boundary of T (¬∑) satisfies ùêª > ùëÖ > ùê∑. ùêª ‚Ä≤ > ùëÖ‚Ä≤ > ùê∑ ‚Ä≤
is satisfied likewise.

Third, we show ùêø > ùëÖ. In the strategy (ùêµ, ùêµ), BWH miners
ùëö1 and ùëö2 betray their mining pool. For the sake of analysis, we
consider it as that a miner with a collective BWH mining power
of ùëù ‚Ä≤ = ùëù + ùëû betrays the BWH-attacking pool. By Lemma 1 and
2, the relationship ùêø > ùëÖ holds. We already showed ùëÖ > ùê∑; thus,
ùêø > ùëÖ > ùê∑ is satisfied.

‚ñ°

Lemma 5. In the game in Table 1, (ùêµ, ùêµ) is the only pure Nash
equilibrium.

Proof. By Lemma 4, (ùê∂, ùê∂) is dominated by (ùê∂, ùêµ) and (ùêµ, ùê∂).
(ùêµ, ùêµ) dominates (ùêµ, ùê∂) and (ùê∂, ùêµ). Therefore, only (ùêµ, ùêµ) is the
Nash equilibrium.

‚ñ°

For advanced analysis, we assume a general set of BWH miners
given as ùëÄ = {ùëö1, ùëö2, ..., ùëöùëÅ } where ùëÅ > 1.

More generally, we can prove the strategy set that all BWH

miners choose the betrayal action is only Nash equilibrium.

Theorem 2. In the BWH miners game with ùëÅ miners (ùëÅ > 1), the
only Nash equilibrium is for all miners to choose ‚Äòbetray.‚Äô

Proof. We can split the set of the BWH miners into two sets
based on their actions. Assume there is at least one BWH miner
who chooses the action ùê∂. Then, we denote the set of BWH min-
ers with the action ùê∂ as ùëÄ1 = {ùëö1, ùëö2, ..., ùëöùëò }, and the set of
BWH miners with the action ùêµ as ùëÄ2 = {ùëöùëò+1, ..., ùëöùëÅ }. Then,
for a miner ùëö1, we can change the game to a set of BWH min-
ers ùëÄ ‚Ä≤ = {ùëö1, ùëöùëò+1, ..., ùëöùëÅ }. It is the case when ùëö1‚Äôs computing
power is ùëù and the other miners‚Äô computing power is ùëû in Theorem
5. Therefore, for the miner ùëö1, changing the action to betrayal (ùêµ)
is motivated. Consequently, all the pure strategy sets, including any
cooperation (ùê∂), are not Nash equilibria.

‚ñ°

Figure 4: BDS block pricing game

Figure 5: A Game of BWH Attacker Pool and BWH Miners

5.2 Pricing on Blocks
We have already proved that reasonable BWH miners would con-
duct BDS attacks. Both parties will make a profit or incur no loss
due to a result of this trade. Nonetheless, the price of the trade
between BDS miners and the victim pool is a range rather than a
fixed value. Now we determine an equilibrium price between the
BDS miners and the victim pool using a game-theoretic model.

Revisiting the assumption for our system model in Section 3, the
victim pool cannot identify or respond to a BWH attack effectively.
Therefore, the BDS trade should be proposed by BWH miners within
the BWH-attacking pool. If the price of BDS blocks falls within the
range specified in Section 4, it will always generate more revenue
than a BWH attack, which can be regarded as the ultimatum game
[11].

Figure 4 illustrates the suggested block pricing game. Let ùëé be
the lowest boundary, ùëè be the highest boundary in Theorem 1, and
the proposed price by a BDS miner be ùëù. If the victim pool accepts
the offer, the BDS miner receives ùëù, and the victim pool receives
ùëè ‚àí ùëù. Otherwise, they earn nothing. This ultimatum game can be
described as follows:

ùëì : [ùëé, ùëè] ‚àí‚Üí {Accept, Reject}
This game has innumerable Nash equilibria; thus, we refined
them using the concept of subgame perfect equilibrium, a refine-
ment framework for dynamic games.

(25)

Theorem 3. In the BDS ultimatum game, (b, Accept) is the only
subgame perfect equilibrium.

Proof. Since the range of proposed prices is continuous, it is
evident that there is an infinite number of Nash equilibria. The
BDS miner proposes ùëù, and the victim pool accepts the proposal
only if ùëù is included; otherwise, the victim pool rejects the proposal.
Nobody can alter their strategies in this situation. Among these
Nash equilibria, the strategy where the BDS miner proposes ùëè
maximizes his earnings. Therefore, (b, Accept) is the only subgame
perfect equilibrium.

‚ñ°

8

5.3 A Principal-Agent Problem in the BWH

Attack

We analyzed how BWH miners behave in the block-double submis-
sion attack situation. Our research indicates that the BWH miners
will betray for more profits. If this is the case, the outcome of a
BWH attack may differ totally from what the attacker anticipated.
We now construct a new game between a BWH-attacking pool
and BWH miners, as illustrated in Figure 5, which is referred to as
a BWH-attacking pool and mining agents game. The mining pool
may select one of two strategies: the BWH attack (A) or Honest min-
ing (H), with the two sets of BWH miners from the previous game.
The BWH attack was designed assuming miners would collaborate
with the BWH-attacking pool. The strategy set (A, C, C) with in-
creased profit represents the ideal case (from BWH attacking pool‚Äôs
perspective). The strategy set (A, B, B) is when miners choose the
BDS attack. As shown in Section 5.1, the subgame of BWH miners
has the only Nash equilibrium to carry out BDS attacks. Therefore,
the strategy set (A, C, C) cannot be a Nash equilibrium.

Theorem 4. The strategy set (H, B, B) is the only subgame Nash
equilibrium in the BWH-attacking pool and mining agents game.

It implies that mining pools would not want to conduct a BWH
attack. The mining pool employs a BWH attack to increase its
earnings; however, joining the BWH attack may not be the best
decision for BWH miners. It does not work as intended by the
BWH-attacking pool. Game theory refers to this type of dilemma as
the principal-agent problem. Contrary to the intention of the BWH-
attacking pool, a BWH attack will be a strategic failure because
reasonable miners seek greater rewards.

6 QUANTITATIVE ANALYSIS
This section offers a quantitative study of the BDS attack based on
different mining power distributions and participation ratios for
BDS attacks.

ùëÖùê∏ùëÖ =

ùëÖùëé ‚àí ùëÖ‚Ñé
ùëÖ‚Ñé

(26)

We provide theoretical results demonstrating the effectiveness
of BDS attacks in BWH environments. To analyze miners‚Äô revenue,
we employ the relative extra reward (RER), defined as the ratio

Figure 6: Quantitative analysis results from the BDS with three participation ratios (20%, 50%, 100%): From left to right, each
column shows the RERs of the BWH-attacking pool, RERs of the BDS miner, and RERs of the victim mining pool, respectively.
It shows that the BDS attack is very profitable. In addition, as the miners betraying the BWH-attacking pool increases, the loss
of the BWH attacking pool increases up to nearly 20%.

9

Table 2: Approximate Bitcoin power distribution for a
month by BTC.com

Rank

1

2

3

4

5

Mining Pool

Foundry USA

AntPool

F2Pool

Poolin

Binance Pool

Computational Power

18 %

15 %

14 %

12 %

11 %

of extra revenue to revenue from honest mining. We may derive
the following expression, given ùëÖùëé as the miner‚Äôs revenue with an
attack and ùëÖ‚Ñé as the miner‚Äôs revenue with honest mining.

Figure 6 displays, from left to right, the RERs of the BWH-
attacking pool, BDS miners, and victim pool. 20% of BWH miners
participate in the BDS attack in the first row (a) ‚Äî (c), 50% in the
second row (d) ‚Äî (f), and 100% in the third row (g) ‚Äî (i). First, we can
see intuitively that BDS attackers can generate enormous profits.
The number of BWH miners who betray the BWH-attacking pool
and join the BDS decreases the benefit to be shared; nonetheless,
the greatest figure in graph (b) was rounded to the first decimal
place, reaching 99.9% RER. Considering that BWH attacks provide
gains of up to 10% or less, their earnings are astoundingly huge.

Examining the profitability of the BWH-attacking pool reveals
that the greater the participation rate in BDS attacks, the lower
the effect of BWH, and the lower the RER falls to a negative value.
At a BDS participation rate of 100%, the BWH-attacking pool will
experience a loss of up to 20% and substantial collateral damage.
According to our study, involvement in a BDS attack is likely to be
a sensible decision from a game-theoretic standpoint, resulting in
the BWH attack eventually causing damage to themselves.

Lastly, the RERs of the victim pool have constant fixed values.
There are two main factors: First, we have the condition that double-
submission of a block does not result in the victim mining pool
being lost. Second, according to the analysis in the preceding sec-
tion, BDS attacks always benefit BDS miners the most from the
equilibrium of the ultimatum game; therefore, the victim mining
pool neither loses nor gains revenues as a result of existing BWH
attacks. Simulations verify the validity of the preceding theoretical
analysis in the following section.

7 SIMULATION
This section confirms our analysis of the BDS attack by comparing
theoretical expectations with simulated results.

We built a Python Monte Carlo simulator to simulate the double-
submission attacks from one pool to another. We employed the
actual mining pool environment for simulations. Table 2 approxi-
mates the computing power distribution among the top five mining
pools, with which we simulated two BDS attacks. The first case is
when Foundry USA (18%) attacks AntPool (15%), and the second
case is when Poolin (12%) attacks Foundry USA (18%).

Figure 7: RERs of the BDS miner under a BWH attack. Case
1 and Case 2 were conducted with computational powers
(18%, 15%) and (12%, 18%), respectively. The theoretical val-
ues (lines) and simulation results (x-marks) are consistent.

Table 3: The RERs of a BDS miner when the participation
ratio is 100%. Each A (B) number indicates the RERs from
the theoretical analysis and simulation, respectively.

Case

20%

40%

60%

80%

100%

# 1

# 2

86.36
(86.36)

82.98
(82.95)

85.80
(85.77)

82.56
(82.66)

85.23
(85.24)

82.14
(82.13)

84.67
(84.60)

81.73
(81.61)

84.11
(84.03)

81.32
(81.24)

ratio increases. The x symbols represent the results from 107 repeti-
tions of the simulation. To validate the effect of the BDS attack, we
recreated each scenario with five different BDS participation ratios
(20%, 40%, 60%, 80%, and 100%). The numbers in Table 3 provide
more precise values up to two decimal places than those shown in
Figure 7. The simulation results validated the theoretical predictions
as depicted in the table and the figures.

8 DISCUSSION
This section discusses four aspects of BDS attacks: Adaptability to
the FAW attack, viability of the optimal block price, mitigation of
BDS attacks, and deception under BDS attacks.

8.1 Block Double-Submission under Fork After

Withholding Attacks

As introduced in Section 2, various BWH attack strategies have been
studied. Even though this study focuses mainly on the BWH attack,
the FAW attack presented by Kwon et al. [13] is also remarkable.
In the FAW attack, an adversary mining pool infiltrates a victim
pool but does not always withhold blocks. If miners who do not
belong to the attacking mining pool and the victim mining pool
publish a block, the attacking mining pool publishes a delayed
fPoW, invoking a fork. If the attacker or the victim wins the fork,
the attacker receives additional income. In this way, the FAW attack
generates greater revenue than the BWH attack.

Two simulation results are shown in Figure 7. The blue lines rep-
resent theoretical expectations. The RERs fall as the participation

The FAW attacks resolved the Prisoners‚Äô Dilemma posed by the
BWH attacks and provided superior performance. The FAW attacks

10

differentiate from BWH attacks because mining pools with greater
mining power profit from the pool vs. pool situation attacks. It
indicates that the victim mining pool is disadvantaged even if it
detects and counterattacks an FAW attack. Mining pools may then
want to attempt the FAW attack, where the rewards of the BDS
attack are nearly identical to the one in the BWH case.

Due to the nature of the BDS attack mechanism, if all BWH min-
ers betray, the FAW attack produces the same profits as the BWH
attack, which was discussed in the preceding section. Previously,
the BDS attack was not intended to submit fPoW to avoid detection
by the BWH-attacking pool. In this instance, there is no fPoW for
the FAW attacker to attempt forks; hence there is no distinction
between this attack and the BWH attack. The BDS attackers can
collect the anticipated profits from a BWH attack, while the FAW
attackers suffer losses.

8.2 Viability of Optimal Block Pricing
Through the subgame Nash equilibrium of the ultimatum game,
we determined in Section 5.2 the price at which a BDS attacker
sells fPoW to a victim mining pool. Nevertheless, this analysis of
the ultimatum game was based on rational decision-making and
contained certain inconsistencies with reality. For instance, studies
[2, 11] have revealed that when people are subjected to actual
experiments, including the ultimatum games, they prefer to reject
offers that provide little value.

Consider three factors that impact ultimatum games in the real
world: The first is fairness as a psychological factor [12]. For exam-
ple, suppose that a victim mining pool has already been attacked by
a BWH-attacking pool and might have been emotionally insulted.
The victim mining pool may reject a BDS proposal if the enhanced
advantages disproportional favor the BDS miners.

Another factor is the moral psychology of the proposer. Quan-
titative evidence indicates that the highest RER for BDS miners is
close to 99. Given that the maximum benefit from the BWH attack
is close to 10%, this is a substantial gain. As a result, BDS miners
get a substantial profit, and even if they forfeit a portion of that
profit, they would be willing to make a few more concessions for
the mining pool‚Äôs collaboration or moral psychology.

The final factor is the magnitude of revenue. According to For-
gas and Tan [10], both the magnitude and ratio of compensation
substantially impact on decision-making. This indicates that even
if the proportion of benefits acquired by a proposer who received
the ultimatum is extremely small, the probability that the proposal
will be accepted is large if the benefits themselves are substantial.
The size of BDS trades will never be negligible due to Bitcoin‚Äôs high
market capitalization, which continues to rise.

In conclusion, BDS attackers will seek cooperation from the
victim mining pool in exchange for concessions rather than the
entire theoretical advantages.

8.3 Detection and Mitigation of Block
Double-Submission Attacks

Multiple detections and evasion measures have been proposed
against a BWH attack exploited by BDS attacks, including proba-
bilistic detection, sensing-based detection, and structural preven-
tion techniques. The BDS attack that exploits trust connections

11

within mining pools might also be detectable or evadable. However,
it is impossible to detect attacks using infiltrating sensors when
the attacker is a private mining pool. Structural adjustments to the
mining protocol are permissible, though not recommended for com-
patibility. Therefore, probabilistic BDS attack detection is discussed
mainly in this study.

Checking the ratio of fPoW to pPoW submissions is a proba-
bilistic technique for identifying BWH attacks. In addition to the
probabilistic nature of this technology, the lesser the computational
power, the less accurate the detection. Using this point, attackers
can make detection difficult by dividing this node‚Äôs computer power
among many miners with low computing power. Similarly, it is
possible to establish the mining efficiency probabilistically to detect
a BDS attack. Consequently, if a BDS attacker consists of multiple
miners as opposed to a single miner, this can diminish the detection
accuracy, similar to the detection bypass mechanism for the prior
BWH attacks. In addition, the BDS attack can avoid detection by
surrendering a small amount of gain, like how BWH attacks are
often executed, rather than by operating BDS attacks with optimal
efficiency. However, it will still provide considerable additional ben-
efits to the attacks, as the optimal BDS attack nearly doubles the
attacker‚Äôs gain.

8.4 Deceptive behaviors using Block

Double-Submission

The BWH attack exploits the structural weakness of the mining pool
system, whereas the BDS attack exploits the structural weakness
of the BWH attack. Therefore, we must investigate the structural
flaws of the BDS attack. A major risk exists if a BWH attacker
disguises himself and appears to execute a BDS attack against a
victim mining pool in an attempt to generate additional revenue.
We can imagine an adversary posing as a BWH attacker and
advising a BDS attack to the victim mining pool. The attacking
mining pool will gain some profit if the maximum possible benefit
of the BDS attack is realized. If this is true, the victim mining pool
may be compelled to pay over income even while not under the
BWH attack. To achieve this, the BDS attacker must prove they are
betraying their mining pool. Because the BDS attacker is a member
of the BWH attacker pool, we can establish that the gains of the
BDS attack are not shared by bypassing the account of the miner
who does not undertake the BWH attack. However, this is not ideal,
and it appears that additional research into such cases is required.

9 CONCLUSIONS
BWH attacks are regarded as one of the most dangerous attack
techniques in PoW mining. This attack approach undermines sound
competition in the PoW blockchain mining ecosystem and can
be combined with other attacks. A mining pool is a cooperation
between multiple miners, but not all miners in the pool can be
trusted. In this work, we presented the BDS attack in which miners
betray and trade with a victim pool to earn further benefits within
the pool that performs the BWH attack. Notably, we proved that
the a trade between BWH miners and a victim pool is viable and
have shown theoretically that both parties to the trade could benefit
from the BDS attack. In addition, we conducted a game-theoretic
analysis of miner behavior and mining pool strategy to estimate

the impact of this attack on the BWH attack. The BDS attack is
the superior strategy for miners, but the honest mining strategy,
instead of the BWH attacks, is the superior strategy for mining
pools. In conclusion, we discovered that the BWH attack will not
be executed due to a lack of trust between miners and that mining
pools will pursue honest mining. Because our attack technique is
not impeccable, we believe advanced strategies can be proposed to
exploit or defend against it. Therefore, we set the topic aside for
our future work.

ACKNOWLEDGMENT
This work was supported by Institute of Information & communi-
cations Technology Planning & Evaluation (IITP) grant funded by
the Korea government (MSIT) (No.2018-0-00532, Development of
High-Assurance (‚â•EAL6) Secure Microkernel)

REFERENCES
[1] Bag, S., Ruj, S., and Sakurai, K. Bitcoin block withholding attack: Analysis and
mitigation. IEEE Transactions on Information Forensics and Security 12, 8 (2017),
1967‚Äì1978.

[2] Bolton, G. E., and Zwick, R. Anonymity versus punishment in ultimatum

bargaining. Games and Economic Behavior 10, 1 (1995), 95‚Äì121.

[3] Chang, S.-Y., Park, Y., Wuthier, S., and Chen, C.-W. Uncle-block attack:
Blockchain mining threat beyond block withholding for rational and uncoopera-
tive miners. In International Conference on Applied Cryptography and Network
Security (2019), Springer, pp. 241‚Äì258.

[4] Chaum, D. Blind signatures for untraceable payments. In Advances in cryptology

(1983), Springer, pp. 199‚Äì203.

[5] Douceur, J. R. The sybil attack. In International workshop on peer-to-peer systems

(2002), Springer, pp. 251‚Äì260.

[6] Dwork, C., and Naor, M. Pricing via processing or combatting junk mail. In
Annual international cryptology conference (1992), Springer, pp. 139‚Äì147.
[7] Eyal, I. The miner‚Äôs dilemma. In 2015 IEEE Symposium on Security and Privacy

(2015), IEEE, pp. 89‚Äì103.

[8] Eyal, I., and Sirer, E. G. How to disincentivize large bitcoin mining pools. Blog
post: http://hackingdistributed. com/2014/06/18/how-to-disincentivize-large-bitcoin-
mining-pools (2014).

[9] Eyal, I., and Sirer, E. G. Majority is not enough: Bitcoin mining is vulnerable.
In International conference on financial cryptography and data security (2014),
Springer, pp. 436‚Äì454.

[10] Forgas, J. P., and Tan, H. B. Mood effects on selfishness versus fairness: affective
influences on social decisions in the ultimatum game. Social cognition 31, 4 (2013),
504.

[11] G√ºth, W., Schmittberger, R., and Schwarze, B. An experimental analysis of
ultimatum bargaining. Journal of economic behavior & organization 3, 4 (1982),
367‚Äì388.

[12] Kahneman, D., Knetsch, J. L., and Thaler, R. H. Fairness and the assumptions

of economics. Journal of business (1986), S285‚ÄìS300.

[13] Kwon, Y., Kim, D., Son, Y., Vasserman, E., and Kim, Y. Be selfish and avoid
dilemmas: Fork after withholding (faw) attacks on bitcoin. In Proceedings of the
2017 ACM SIGSAC Conference on Computer and Communications Security (2017),
pp. 195‚Äì209.

[14] Lee, S., and Kim, S. Countering block withholding attack efficiently. In IEEE INFO-
COM 2019 - IEEE Conference on Computer Communications Workshops (INFOCOM
WKSHPS) (2019), pp. 330‚Äì335.

[15] Lee, S., and Kim, S. Rethinking selfish mining under pooled mining. ICT Express

(2022).

[16] Liu, Y., Hei, Y., Xu, T., and Liu, J. An evaluation of uncle block mechanism effect
on ethereum selfish and stubborn mining combined with an eclipse attack. IEEE
Access 8 (2020), 17489‚Äì17499.

[17] Luu, L., Saha, R., Parameshwaran, I., Saxena, P., and Hobor, A. On power
splitting games in distributed computation: The case of bitcoin pooled mining. In
2015 IEEE 28th Computer Security Foundations Symposium (2015), IEEE, pp. 397‚Äì
411.

[18] Luu, L., Velner, Y., Teutsch, J., and Saxena, P. {SmartPool}: Practical decen-
tralized pooled mining. In 26th USENIX Security Symposium (USENIX Security
17) (2017), pp. 1409‚Äì1426.

[19] Mirkin, M., Ji, Y., Pang, J., Klages-Mundt, A., Eyal, I., and Juels, A. Bdos:
Blockchain denial-of-service. In Proceedings of the 2020 ACM SIGSAC conference
on Computer and Communications Security (2020), pp. 601‚Äì619.

[20] Nayak, K., Kumar, S., Miller, A., and Shi, E. Stubborn mining: Generalizing
selfish mining and combining with an eclipse attack. In 2016 IEEE European

Symposium on Security and Privacy (EuroS&P) (2016), IEEE, pp. 305‚Äì320.
[21] Pass, R., and Shi, E. Fruitchains: A fair blockchain. In Proceedings of the ACM

symposium on principles of distributed computing (2017), pp. 315‚Äì324.

[22] Rosenfeld, M. Analysis of bitcoin pooled mining reward systems. arXiv preprint

arXiv:1112.4980 (2011).

[23] Sapirshtein, A., Sompolinsky, Y., and Zohar, A. Optimal selfish mining
strategies in bitcoin. In International Conference on Financial Cryptography and
Data Security (2016), Springer, pp. 515‚Äì532.

[24] Sarker, A., Wuthier, S., and Chang, S.-Y. Anti-withholding reward system to
secure blockchain mining pools. In 2019 Crypto Valley Conference on Blockchain
Technology (CVCBT) (2019), IEEE, pp. 43‚Äì46.

[25] Solat, S., and Potop-Butucaru, M. Zeroblock: Preventing selfish mining in

bitcoin. arXiv preprint arXiv:1605.02435 (2016).

[26] Solat, S., and Potop-Butucaru, M. Brief announcement: Zeroblock: Timestamp-
free prevention of block-withholding attack in bitcoin. In International Sympo-
sium on Stabilization, Safety, and Security of Distributed Systems (2017), Springer,
pp. 356‚Äì360.

[27] Sompolinsky, Y., and Zohar, A. Secure high-rate transaction processing in
bitcoin. In International Conference on Financial Cryptography and Data Security
(2015), Springer, pp. 507‚Äì527.

A LIMIT OF THE BWH INFILTRATION RATIO

Figure 8: Optimal Infiltration Ratio in the BWH attack

As seen in Figure 8, the optimal infiltration ratio ùúè increases as

the computing power of both the attacker and victim increases.

ùëì (ùõº, ùõΩ) =

ùõΩ ‚àí ùõºùõΩ ‚àí ‚àöÔ∏ÅùõΩ2 ‚àí ùõºùõΩ2 ‚àí ùõºùõΩ3
‚àíùõº + ùõº 2 + ùõºùõΩ

.

(27)

Let ùúè be ùëì (ùõº, ùõΩ) defined Equation 27. The value is not defined with
ùõº = ùõΩ = 0.5; nevertheless, we can obtain the upper limit of ùúè when

ùëì (ùõº, ùõΩ).

lim
ùõº‚Üí5‚àí0
ùõΩ‚Üí5‚àí0
For simplicity, by replacing ùõº and ùõΩ by lim
ùõø‚Üí+0

following relationship:

(0.5 ‚àí ùõø), we attain the

lim
ùõº,ùõΩ‚Üí0.5‚àí0

ùëì (ùõº, ùõΩ) = lim
ùõø‚Üí+0

‚àí 1

2 ‚àí ùõø +

‚àöÔ∏É

( 1
2 + 2ùõø)2 ‚àí 5ùõø 2
2ùõø

‚àí 1

2 ‚àí ùõø +

<

‚àöÔ∏É

2ùõø

( 1
2 + 2ùõø)2

2 ‚àí ùõø + 1
‚àí 1
2ùõø

2 + 2ùõø

1
2

.

=

=

(28)

(29)

Therefore, the infiltration ùúè is less than 0.5 when 0 < ùõº < 0.5 and
0 < ùõΩ < 0.5.

12

