Controlling Transaction Rate in Tangle Ledger: A Principal Agent
Problem Approach

Anurag Gupta*, and Vikram Krishnamurthy*, Fellow, IEEE

2
2
0
2

r
a

M
0
1

]
I

N
.
s
c
[

1
v
3
4
6
5
0
.
3
0
2
2
:
v
i
X
r
a

Abstract—Tangle is a distributed ledger technology that stores
data as a directed acyclic graph (DAG). Unlike blockchain, Tangle
does not require dedicated miners for its operation. This makes
Tangle suitable for Internet of Things (IoT) applications. To
prevent congestion and spamming, distributed ledgers have a
built-in transaction rate control mechanism. This is typically
achieved by increasing or decreasing the proof of work (PoW)
difﬁculty level; unfortunately, this simplistic mechanism gives an
unfair advantage to users with high computational power. This
paper proposes a principal-agent problem (PAP) framework from
microeconomics to control the transaction rate in Tangle. With
users as the agents and the transaction rate controller as the
principal, we design a truth-telling mechanism to assign PoW
difﬁculty levels to agents as a function of their computational
power. The solution of the PAP is achieved by compensating a
higher PoW difﬁculty level with a larger weight/reputation for
the transaction. The solution of PAP is obtained by solving a
mixed-integer optimization problem. Moreover, we show that the
decision variables have useful structures: the optimal solution of
the PAP increases with the computational power of the agents.
We also show that the optimal PoW increases with the number
of agents. The structural result reduces the search space of the
mixed-integer program and enables efﬁcient computation of the
optimal mechanism. Finally, via numerical examples, we illustrate
the transaction rate control mechanism and study its impact on
the dynamics of Tangle.

Index Terms—Distributed ledger, directed acyclic graph, Tan-
gle, transaction rate control, proof of work (PoW), weight of
transaction (WoT), principal-agent problem (PAP), mixed-integer
optimization, linear program.

I. INTRODUCTION

Tangle was created by the IOTA foundation for enabling
scalable distributed ledger technology for IoT applications
with no transaction fees [1]. Tangle is an example of a directed
acyclic graph (DAG) based distributed ledgers [2], [3], [4].
Tangle is a generalization of linear blockchain technology: it
stores data as a DAG in contrast to the linear data structure
of blockchain. The DAG structure of Tangle allows multi-
ple transactions to be added into the ledger simultaneously.
Hence, the throughput of Tangle is signiﬁcantly higher than
blockchain. The modiﬁed data structure supports higher scal-
ability and decreased mining cost [1] which are essential
for Internet of Things (IoT) [5], [6] applications. This is
because IoT devices have limited computational power and
can not afford high transaction fees associated with mining
in blockchain. Therefore, Tangle is used in IoT applications

*Anurag Gupta and Vikram Krishnamurthy are with the School of
Electrical & Computer Engineering, Cornell University, Ithaca NY, 14853,
USA. (e-mail: ag2589@cornell.edu; vikramk@cornell.edu).

such as automating real-time trade and exchange of renewable
energy amongst neighbourhoods [7].

Two important elements of Tangle are proof of work (PoW)
and weight of transactions (WoT). PoW requires users to
solve a hash puzzle to add a transaction in the distributed
ledger. WoT is the reputation assigned to the transaction. In
the current implementation of Tangle, WoT is a ﬁxed function
of PoW. This makes Tangle susceptible to being dominated
by users with powerful computational resources. Users with
high computational resources can add a very high number of
transactions with a high WoT. A natural question is: how to
make Tangle fair1 to all users?

In this paper, we utilize PoW difﬁculty level in conjunction
with WoT to control the rate of new transactions in Tangle.
Speciﬁcally, we formulate the transaction rate control problem
for Tangle as a principal-agent problem (PAP) with adverse
selection [8]. The PAP has been studied widely in microe-
conomics to design a contract between two strategic players
with misaligned utilities. Examples include labor contracts [9],
insurance market [10], and differential privacy [11]. There are
two types of PAP [8]: moral hazard and adversarial selection.
We restrict our attention to the PAP with adverse selection as
the underlying information asymmetry2 is similar to that of
the transaction rate control problem in Tangle. In IoT applica-
tions, heterogeneous IoT devices with different computational
power are the agents, and the transaction rate controller is
the principal. The agents want to add new transactions in
Tangle at the maximum possible rate. On the other hand,
the principal wants to control the rate of new transactions to
reduce network congestion and spamming. As the principal
cannot observe the computational power of the agents, it also
has to incentivize the agents to reveal their computational
power truthfully. To control the transaction rate, the principal
assigns the PoW difﬁculty level to each agent based on their
revealed computational power. To ensure that the mechanism is
truth-telling, the principal compensates the agents’ PoW using
an appropriate WoT.
To summarize,

the information asymmetry between the

1By fair, we mean that every agent, irrespective of its computational power,
can add transactions into Tangle at a low cost. Also, the mechanism should
compensate agents for completing a difﬁcult PoW. In our transaction rate
control mechanism, agents’ PoW is compensated with WoT. It is of interest
in future work to incorporate schemes such as proportional, max-min and
social welfare fairness.

2In the PAP with adverse selection, the principal cannot observe the state
of the agents, and hence, it has to incentivize the agents to reveal their state
truthfully. The principal then assigns the effort level and compensation based
on the revealed information to maximize its own utility.

1

 
 
 
 
 
 
transaction rate controller and IoT devices motivates PAP
with adverse selection as a suitable mechanism for controlling
the transaction rate in Tangle. It yields a tractable linear
program [12] with useful underlying structures that can be
exploited to speed up the computation.

Related Work

Several works study the transaction rate control problem for
distributed ledgers. [13] formulates a mechanism to control the
PoW difﬁculty level for blockchain that ensures stable average
block times. [14] proposes a difﬁculty adjustment algorithm
for blockchain to disincentivize the miners from coin-hopping
attacks: a malicious miner increases his mining proﬁts while
at the same time increasing the average delay between blocks.
The transaction rate problem has also been studied from the
agent’s perspective, e.g., agents optimizing their contribution
of computational power to the mining process [15].

For DAG based distributed ledger, [16] proposed an adaptive
rate control for Tangle. Their scheme increases or decreases
the difﬁculty level of the PoW depending on the historical
transaction rate of an agent. [17] uses a utility maximization
approach to transaction rate control in Tangle using a suitable
choice of network performance metric. Their model assumes
that the computational power of the agent is known to the
transaction rate regulator. [18] borrows an idea from wireless
networks to control the transaction using an access control
scheme. Congestion control has also been studied in the
context of wireless communication. For example, [19], [20]
discuss optimal resource sharing among multiple users for a
high quality of service.

To the best of our knowledge, a PAP based approach to
studying the transaction rate control problem in Tangle has
not been explored in literature. The PAP framework allows us
to model the information asymmetry between the distributed
ledger’s users and the transaction rate controller. It yields
a tractable mixed-integer optimization problem that can be
decomposed into multiple linear programs. The PAP also
allows us to analyze the structure of decision variables. This is
beneﬁcial in reducing the dimension of the search space and
decreasing the computation cost.

Organization and Main Results

Sec.II describes Tangle protocol and the PAP approach to
solve the transaction rate control problem in Tangle. The PAP
is a mixed-integer program: PoW difﬁculty level takes values
in a ﬁnite set, whereas the WoT takes values from the subset
of real numbers. We show that for a ﬁxed choice of PoW
difﬁculty level, the PAP is a linear program. This facilitates
efﬁcient computation of the optimal solution using standard
linear program solvers.

Sec.III exploits the structure of the PAP to characterize the
decision variables. Our ﬁrst result shows that the optimal PoW
difﬁculty level increases with an increase in computational
power. The second result shows that the optimal WoT assigned
to the agent increases with computational power. The third
result shows that the optimal PoW difﬁculty level increases
with the number of agents. The results can be exploited to

2

w(x1), d(x1)

Type x1
Agents

Tangle

(p(x))x∈X

x, N

Transaction
Rate
Controller

w(x2), d(x2)

Type x2
Agents

Fig. 1: Block diagram for control of transaction rate in Tangle.
For simplicity, we consider the case when the different types
of agent X is equal to 2. Transaction rate controller block
receives fraction of different types of agents (p(x))x∈X , x,
total agents N from Tangle as an input. It
then assigns
difﬁculty level of PoW d(x) for each agent depending on its
type x ∈ X. To compensate the PoW, new transactions created
by the agent are given a weight w(x). New transactions are
part of the set of tip transactions. Having a higher weight
increases the chance of a tip transaction being selected for
approval by other transactions.

reduce the search space for the transaction rate control problem
and decrease the computation cost.

Sec.IV illustrates the application of PAP for the transaction
rate control problem using numerical examples. We also apply
the structural result from Sec.III to reduce the dimension
of the search space of the decision variables. Finally, we
incorporate the transaction rate control mechanism in Tangle
and simulate its dynamics. This yields insight into the impact
of the transaction rate controller on the average approval time
of a tip transaction.

II. TRANSACTION RATE CONTROL PROBLEM IN TANGLE
This section describes the PAP formulation for controlling
the rate of new transactions in Tangle. Sec.II-A describes
Tangle protocol, and Sec.II-B describes the PAP formulation
for the transaction rate control problem in Tangle.

A. Tangle protocol

Tangle can be abstracted as a time evolving DAG. Fig. 2

shows an example of the time evolution of Tangle.

Consider a time evolving directed graph Gt(Vt, Et) repre-
senting Tangle at time t where t ∈ Z+ denotes discrete time.
Each node in the graph corresponds to a transaction/record
stored on Tangle. At t = 0, G0(V0, E0) denotes the genesis
graph. We assume |V0|= 1, |E0|= 0. At each discrete time
instant t, new transactions are added in Tangle by agents (IoT
devices). In order to join Tangle, each new transaction at
time t chooses two tip transactions from Gt−1(Vt−1, Et−1)
randomly, and approves them. The two tip nodes are selected
independently with repetition. Here, a tip transaction means
a transaction with no incoming edges. Approving a tip trans-
action in Tangle means verifying that the transaction is valid,

3

0

1

3

2

4

0

5

7

6

8

0

1

3

2

4

5

7

6

8

1

3

2

4

0

9

10

11

12

1

3

2

4

5

7

6

8

13

14

15

16

9

10

11

12

t = 1

t = 1

t = 2

t = 1

t = 2

t = 3

t = 1

t = 2

t = 3

t = 4

(a) G1(V1, E1)

(b) G2(V2, E2)

(c) G3(V3, E3)

(d) G4(V4, E4)

Fig. 2: Protocol for tip transaction selection and approval in Tangle. Consider a dynamic DAG Gt(Vt, Et) representing Tangle at
time t. Each node of Gt(Vt, Et) represents a transaction. Node 0 is the genesis node at t = 0. At each time t, new transactions
join the ledger by randomly selecting two tip transactions and approving them. This corresponds to formation of a directed
edge. (a) Node 1, 2, 3, 4 join the ledger at t = 1. Tip node for G0 = (V0, E0) is 0. (b) Node 5, 6, 7, 8 join the at t = 2.
Tip nodes for G1 = (V1, E1) are 1, 2, 3, 4. (c) Node 9, 10, 11, 12 join the ledger at t = 3. Tip nodes for G2 = (V2, E2) are
4, 5, 6, 7, 8. (d) Node 13, 14, 15, 16 join the ledger at t = 4. Tip nodes for G3 = (V3, E3) are 5, 9, 10, 11, 12.

i.e., there is no double-spending. If the two randomly chosen
transactions are valid, the new transaction forms a directed
edge to each of the randomly chosen tip transactions. We
will assume that chosen tip transactions are always valid as
handling double-spending attacks are beyond the scope of this
study. To summarize, every new transaction forms outgoing
edges from itself to two randomly chosen tip transactions to
join Tangle.

At the time of adding a new transaction, the agents are
also required to show PoW by solving a hash puzzle. This
is to prevent spamming3 and also to ensure that tampering4
with a transaction in Tangle is difﬁcult [21]. Based on the
PoW difﬁculty level, the transaction is assigned a weight.
During random selection of the two tip transactions,
the
probability of choosing a particular tip transaction is directly
proportional to its weight. Hence, agents optimally choose the
PoW difﬁculty level based on their preference for weight. In
the current implementation of Tangle, the relation between
the WoT and its PoW difﬁculty level is ﬁxed. We propose a
modiﬁed mechanism to assign the PoW difﬁculty level and
corresponding WoT based on the computational power of an
agent. The mechanism is truth-telling, i.e., the agents truthfully
reveal their computational power to the principal.

Remarks: Approving tip transactions takes ﬁnite time and
leads to delay, i.e., transaction entering Tangle at time t is
available as a tip transaction at time t + h, h ≥ 1. In this
paper, we assume a constant delay h = 1 for simplicity.

3Solving the hash puzzle for PoW takes ﬁnite time. Hence, an agent’s rate

of transaction is restricted through PoW.

4To tamper with a transaction, a malicious entity would need to re-solve
the hash puzzle for that transaction and also for all future transactions that
approve it. This is because solution of the hash puzzle of a transaction depends
on the hash of the previous transactions

B. PAP approach to transaction rate control

Our PAP formulation of transaction rate control in Tangle

is constructed as follows:

PAP = 


Principal = Transaction rate controller
Agents

= Users (devices) adding
transactions in Tangle

(1)



Consider Tangle where multiple agents (IoT devices) add new
transactions into the ledger as shown in Fig. 1. The agents are
heterogeneous, i.e., agents have different computational power.
Let x ∈ X := {x1, x2, . . . , xn} denote the computational
power of an agent. Let N denote the number of agents, and
let p(x) denote the fraction of agents having computational
power x. In order to add a new transaction in Tangle, agents
have to satisfy PoW requirement by solving a hash puzzle:
search for a nonce [22] that results in hash code starting with
a desired number of zeros. The more difﬁcult the puzzle, the
longer it takes for an agent to solve it. Hence, to control the
rate of newly added transactions, the principal (transaction rate
controller) adjusts the PoW difﬁculty level for each agent. Let
d(x) ∈ D := {1, 2, . . . , m} denotes the PoW difﬁculty level
assigned to an agent with computational power x. We deﬁne
the PoW difﬁculty vector d ∈ Dn as:

d = [d(x1), d(x2), . . . , d(xn)]

(2)

The PoW difﬁculty level d(x) corresponds to the number
of zeros required at the beginning of the hash code. Higher
difﬁculty decreases the rate at which an agent can add new
transactions into the ledger. To compensate for the agent’s
PoW, the principal assigns a weight w(x) ∈ W := [1, ∞)
to the transaction added by an agent with computational
power x. Every new transaction has to approve two existing
tip transactions (transactions with no incoming edges) so as
to join Tangle. In the random tip selection strategy [1], the
two tip transactions for approval are chosen randomly with a
probability proportional to the weight of the tip transaction.
Hence, higher the weight of a tip transaction, the faster it gets
selected for approval by others on average.

Utility function for IoT devices (agents)

We consider the following general utility function for an

agent with computational power x:

u(w(x), d(x), x) := h (w(x) − g (d(x), x))

(3)

Here, h(·) is an increasing, concave function. The concavity
assumption on h(·) models diminishing returns in utility.
If the WoT w(x) is large, the tip transaction gets quickly
approved by new transactions. Hence, agents prefer a higher
WoT w(x). Here, the increasing function g(·) models the
associated cost for an agent to satisfy the PoW requirement. If
the PoW difﬁculty level is high, the agent has to spend large
computational power to satisfy the PoW requirement. Hence,
agents prefer low effort d(x). Moreover, we assume that ge(·)
is decreasing in x. This models that the marginal cost due to
increase in PoW difﬁculty level decreases with computational
power x. For demonstration of our model, we work with a
speciﬁc choice of utility function (4) for the agents:

u(w(x), d(x), x) := log

βw(x) −

(cid:18)

exp(d(x))
x

(cid:19)

(4)

x

Here, βw(x) models agents’ preference for higher weight and
exp(d(x))
models preference for low effort d(x) by the agents.
x
exp d(x) is an increasing function of
Rate of new transaction
the computational power x; it decreases as exponential of the
PoW difﬁculty level d(x). This is because PoW difﬁculty
d(x) corresponds to a search for hash code starting with
d(x) number of zeros. Assuming each hash code is equally
probable, the probability of ﬁnding a hash code starting with
d(x) number of zeros decreases exponentially with d(x).
Hence, cost is an exponential function of d(x).

Formulation of a PAP for transaction rate control

In our formulation, we assume that the distribution of com-
putational power of the agents is known to the principal, but
the computational power of the agents is unobserved5 by the
principal (transaction rate controller). Therefore, the principal
has to design a truth-telling mechanism that maximizes its own
utility. To control the rate of new transactions, the principal
solves the PAP (5) to assign PoW difﬁculty level d(x) to
different agents, and WoT w(x) added by them into Tangle.
The incentive constraints ensure that agents truthfully choose
the PoW assigned for their computational power x.

The PAP for transaction rate control is the following con-

strained optimization problem:

p(x) [N R(x, x) + αw(x))]

(5a)

min
d(x)∈D,
w(x)∈W,
∀x∈X,
w(x1)=1

Xx∈X

5Computational power of an agent is typically estimated by the number
of transactions added by an agent in the recent history [4]. For IoT appli-
cations, it may not be possible to estimate the computational power. This
is because IoT devices are not dedicated miners. Hence, they need not add
new transactions at maximum possible rate; IoT devices could be switching
between multiple tasks or could be in a standby mode. Our approach is for
the transaction rate controller (principal) to incentivize agents to truthfully
report their computational power. Truth-telling is ensured through incentive
constraints (5b) of the PAP.

4

s.t. x = arg max
¯x∈X

log

βw(¯x) −

(cid:18)

1
R(x, ¯x) (cid:19)

, ∀x ∈ X (5b)

log

βw(x) −

(cid:18)

1
R(x, ¯x) (cid:19)

≥ u0, ∀x ∈ X

(5c)

where,

R(x, ¯x) :=

x
exp(d(¯x))

(5d)

Here, the non-negative parameters α, β ∈ R+ trade-off PoW
with WoT for principal (rate controller) and agents (users
adding transactions), respectively. The objective function (5a)
ensures a trade-off between the rate of new transaction and
WoT assigned to different agents. R(x, ¯x) denotes the rate
at which an agent with computational power x can add new
transactions if it falsely claims its computational power to be ¯x.
The ﬁrst term N R(x, x) controls the rate of new transactions
by adjusting PoW difﬁculty level for each agent. This assumes
that the agents are truthful; truth-telling is ensured through
incentive constraint (5b) (discussed later). The rate of new
transactions is directly proportional to the number of agents
N and the computational power x available to them. It is
inversely proportional to the exponential of PoW difﬁculty
level d(x). This is because PoW difﬁculty d(x) corresponds
to a search for hash code starting with d(x) number of zeros.
Assuming each hash code is equally probable to occur, the
probability of ﬁnding a hash code starting with d(x) number
x
d(x) . The second term αw(x)
of zeros is proportional to
ensures that agents are assigned similar WoT. Similar weight
ensures that each tip transaction has a similar chance of being
selected for approval by a new transaction. Hence, w(x) affects
the average time before a tip transaction gets approved. As
the importance of WoT is only relative, we normalize the
WoT with respect to the WoT of the agent with the smallest
computational power. This is achieved by adding a constraint
w(x1) = 1. The participation constraint (5c) guarantees a base
utility level for all the agents; otherwise, agents would opt-out
of the distributed ledger, i.e., they would not use Tangle to
store their transactions.

Structure of Transaction Rate Control Problem

The PAP (5) is a mixed-integer optimization problem. The
principal ﬁrst solves the PAP (5) to obtain the optimal WoT
w∗(x) for each possible choice of effort d ∈ Dn. For a ﬁxed
effort d, the PAP (5) is a linear optimization program and can
be solved efﬁciently using standard solvers.

Theorem 1. For a ﬁxed d ∈ Dn, PAP (5) for the transaction
rate control is equivalent to a linear programming problem.

Proof. Proof is in Appendix A.

Theorem 1 allows the principal to convert the transaction
rate control problem into multiple linear programs. The prin-
ciple chooses the optimal PoW difﬁculty level d∗ ∈ Dn that
maximizes its utility.

Truth-telling and implications for Tangle

The incentive constraint (5b) ensures that the mechanism is
truth-telling6. This is achieved by maximizing utility of each
agent when they perform PoW assigned for their computa-
tional power. If (5b) is omitted, agents can increase their utility
by choosing a PoW difﬁculty level assigned for a different
computational power. In such a case, the actual transaction rate
can exceed the optimal transaction rate solved by the principal.
This can lead to network congestion and delay in broadcasting
new transactions among all agents. Therefore, (5b) ensures
that an agent with computational power x will be worse off
in terms of its preference for PoW and WoT if it doesn’t tell
truth, i.e., (d(x), w(x)) yields better utility than (d(¯x), w(¯x)).
Summary. We have formulated the transaction rate control
is a mixed-integer
problem in Tangle as the PAP (5);
optimization problem. In Sec.III, we will exploit the structure
of the PAP to formulate a mixed-integer optimization problem
of smaller dimension.

it

III. STRUCTURAL ANALYSIS OF TRANSACTION RATE
CONTROL PROBLEM

In the previous section, we formulated the PAP (5) for the
transaction rate control problem in Tangle. We now present
three structural results on the optimal solution of the PAP
(5). These structural results can be used to decrease the
computation cost of solving PAP (5).

Our ﬁrst result deals with the structure of the optimal PoW
difﬁculty level d∗(x) assigned to an agent with computational
power x. We show that the optimal PoW difﬁculty level d∗(x)
is non-decreasing in x. Moreover, our result holds independent
of the choice of the objective function (5a).
Theorem 2. The optimal PoW difﬁculty level d∗(x) assigned
to an agent with computational power x by the PAP (5) to
control transaction rate is increasing in x.

Proof. Proof is in Appendix B.

The formulation in Sec.II required the principal (transaction
rate controller) to solve mn linear program corresponding to
each possible value of PoW difﬁculty vector d ∈ Dn (deﬁned
in (2)). By using Theorem 2, we can signiﬁcantly reduce the
number of linear programs to be solved by the principal.
Speciﬁcally, Theorem 2 ensures that
the principal has to
solve the linear programs obtained by ﬁxing PoW difﬁculty
vector (2) in the PAP (5) that satisfy d(xi) ≤ d(xj ), ∀i < j.
Our second result deals with the structure of the WoT w∗(x)
assigned to an agent with computational power x. We show
that w∗(x) is non-decreasing in x. Moreover, our result holds
independent of the choice of the objective function (5a).
Theorem 3. The optimal WoT w∗(x) assigned to an agent with
computational power x by the PAP (5) to control transaction
rate is increasing in x.

Proof. Proof is in Appendix C.

6Our proposed transaction rate control mechanism does not prevent agents
from colluding, i.e., it may be advantageous for two agents to combine their
computational power and act as a single agent. Preventing malicious collusion
of agents is a subject of future work.

5

Theorem 3 can be used to parametrize the WoT w(x)
in the PAP (5). For example, we can solve for an optimal
w∗(x) within the class of increasing afﬁne functions of x.
This decreases the dimension of the search-space from Rn to
R2 and provides a constrained optimal solution (constrained
to afﬁne increasing functions) at a reduced computation cost.
Our third structural result uses Topkis’ monotonicity theo-
rem [23] to show that optimal PoW increases with the number
of agents.
Theorem 4. The optimal PoW difﬁculty level d∗(x; N ) as-
signed to an agent with computational power x by the PAP (5)
to control transaction rate increases with number of agents N .

Proof. Proof is in Appendix D

Here, d(x; N ) denotes the PoW difﬁculty level when the
number of agents is N . Theorem 4 can be used to parametrize
optimal d(x; N ) within a class of increasing functions of N ;
this yields a constrained optimal d(x; N ).

To summarize, we presented three structural results on
the solution of the transaction rate control problem (5). The
ﬁrst result guarantees the monotonicity of the optimal PoW
difﬁculty level d∗(x) with respect to computational power.
It helps in reducing the number of linear programs that the
principal has to solve for the rate control problem (5). The
second result guarantees the monotonicity of the optimal WoT
w∗(x) with respect to computational power. This facilitates
the principal to parametrize w(x) within a class of increasing
functions and obtain a constrained optimal solution at a low
computation cost. The third result guarantees monotonicity of
the optimal PoW with respect to the number of agents. This
allows parametrization of the optimal PoW difﬁculty level
within the class of increasing function of the number of agents.

IV. NUMERICAL RESULTS. TRANSACTION RATE CONTROL
IN TANGLE

This section illustrates via numerical examples our proposed
transaction rate control problem in Tangle. We ﬁrst specify the
model parameters and then solve the transaction rate control
problem (5). Finally, we utilize the solution of the PAP (5) to
simulate the dynamics of an actual Tangle and study the impact
of transaction rate control on the average approval time of a tip
transaction. The main takeaway from the simulations below is
that agents with lower computational power are assigned lower
PoW difﬁculty levels at the cost of a larger average approval
time of their transactions.

We begin with a simulation of the PAP (5) to compute
the optimal PoW diﬁculty level and WoT for the agents.
The model parameters are listed in Table I. We solve the
PAP (5) for four different values of number of agents N . As
the PoW difﬁculty level exponentially affects the objective
function (5a), we simulate for N = {1, 10, 100, 1000} to
observe noticeable change in PoW difﬁculty level. The optimal
PoW difﬁculty level d(x) for each agent vs. number of agents
N is plotted in Fig. 3. For a ﬁxed value of N , d(x) increases
with x (Theorem 2). As N increases, d(x) increases for all
the agents as transaction rate is directly proportional to N .
Also, d(x) is a concave function of N as the difﬁculty of

TABLE I: Simulation Parameters for Transaction Rate control
Problem (5)

Parameters

Eq.

Value

X (5a)

{1, 3, 10}

D (5a)

{1, 2, . . . , 12}

p = (p(x))x∈X

α

β

u0

(5a)

(5a)

(5b)

(5c)

[1/3 1/3 1/3]

0.1

80

10

6

Weight of transaction for type 1 agents
Weight of transaction for type 2 agents
Weight of transaction for type 3 agents

200

400

600

800

1000

20

15

10

5

0

0

9

8

7

6

5

4

3

2

PoW difficulty level for type 1 agents
PoW difficulty level for type 2 agents
PoW difficulty level for type 3 agents

increase in WoT decreases with N . Hence,

Fig. 4: WoT w(x) vs. number of agents N . w(x) increases
with N to compensate for increasing PoW difﬁculty level.
Marginal
the
mechanism ensures that the relative WoT of agents with small
computational power (with respect to WoT of agents with high
computational power) does not degrade rapidly with number
of agents.

0

200

400

600

800

1000

Fig. 3: PoW difﬁculty level d(x) vs. number of agents N . As
N increases, d(x) increases for all the agents but the marginal
increase in PoW difﬁculty level decreases with N . So, the
mechanism does not incur substantial increase in computation
cost to the agents with increase in number of agents.

the hash puzzle increases exponentially with d(x). Therefore,
marginal increase in PoW difﬁculty level decreases with N .
This implies that the transaction rate control does not incur
substantial increase in computation cost to the agents with
increase in application size (number of agents). Therefore,
the transaction rate control mechanism (5) is suitable for IoT
devices.

Our next simulation evaluates the WoT w(x) assigned to
an agent. Fig. 4 displays the variation of WoT w(x) for each
agent vs. number of agents N . We simlutate the PAP (5)
for N = {1, 10, 100, 1000}. The simulation shows that w(x)
the WoT w(x)
increases with x (Theorem 3). Moreover,
increases with N to compensate the increase in PoW difﬁculty
level. Marginal increase in WoT decreases with N . Hence,
the transaction control mechanism (5) ensures that the average
approval time for agents with small computational power does
not degrade rapidly with number of agents.

We now use the optimal PoW difﬁculty level d∗(x) and
optimal WoT w∗(x), obtained from (5), to simulate the dy-
namics of Tangle. Tangle protocol and its evolution have been
described in Sec. II-A. At each time t, new transactions are
added by each agent at a rate that depends on their computa-
tional power and PoW difﬁculty level. Each new transaction
chooses two tip transactions randomly for approval. As differ-
ent transactions have different weights, we use the accept-
reject method [24] to select tip transactions non-uniformly

during simulations. An important parameter associated with
Tangle dynamics is average approval time of transactions. The
average approval time of a transaction is deﬁned as the time
difference between when a transaction is added into the ledger
and the time that it gets approved by a new transaction. The
average approval time of a transaction increases with WoT, and
transaction rate per number of agents7. The probability that a
tip transaction is selected for approval at time t is proportional
to the WoT. Therefore, more the weight of a transaction,
higher is its chance of being selected for approval. If PoW
difﬁculty level increases, then the rate of transaction decreases.
Consequently, number of tip transactions selected for approval
also decreases. This leads to an increase in average approval
time. Fig. 5 plots the average time for approval of transaction
for each agent vs. number of agents N . As w(x1), d(x1)
remains unchanged with N (refer Fig. 3 and Fig. 4), the
average approval time for the agent with lowest computational
power increase with N . This is because both the relative
WoT (with respect to other agents) decreases and so does
the transaction rate per number of agents. The agents that are
assigned difﬁcult PoW have to wait for a lesser amount of time
on an average for approval of their tip transactions than the
agents that are assigned easier PoW. As observed in Fig. 5,
average approval time for agents with higher computational
power is almost constant because an increase in relative WoT
is offset by a decrease in rate of transaction per number of
agents.

To summarize, we simulated PAP (5) for controlling the
transaction rate in Tangle. As PAP (5) is a mixed-integer
program, we obtained the optimal solution by solving a set
of linear programs. Theorem 2 was exploited to reduce the
number of linear programs to be solved. We also simulated

7As number of agents increases, so does the number of tip transactions;
therefore, approval time is an increasing function of transaction rate divided
by number of agents.

8

6

4

2

0

0

Average wait time for type 1 agents
Average wait time for type 2 agents
Average wait time for type 3 agents

200

400

600

800

1000

Fig. 5: Average approval time of transaction vs. number of
agents N . The agents that are assigned difﬁcult PoW have to
wait for a lesser amount of time on average for approval of
their tip transactions. Therefore, the transaction rate control
mechanism rewards agents for completing difﬁcult PoW with
a lesser average approval time of transactions.

the dynamics of Tangle after incorporating the transaction rate
control mechanism (5).

V. CONCLUSION AND FUTURE WORK

Tangle is a distributed ledger technology suitable for IoT
applications. Motivated by designing strategic contracts with
partial information in microeconomics, this paper has proposed
a principal-agent problem (PAP) approach to transaction rate
control in Tangle. The principal (transaction rate controller)
designs a mechanism to assign proof of work (PoW) difﬁculty
level and weight of transaction (WoT) to the agents (IoT
devices). As the principal cannot observe the state (computa-
tional power) of the agents, the principal also has to incentivize
the agents to be truthful. Our main results regarding the pro-
posed transaction rate controller were the following: 1) optimal
PoW difﬁculty level increases with the computational power
of the agent; 2) optimal WoT increases with computational
power of the agent; 3) optimal PoW difﬁculty level increase
with the number of agents. We also simulated the dynamics
of Tangle using the solution obtained from the transaction
control mechanism. We observed that agents with higher
computational power are assigned higher PoW difﬁculty levels
but have a smaller average transaction approval time than the
agents with lower computational power.

Our transaction control mechanism ensures that the agents
are truth-telling, but it does not prevent agents from colluding,
i.e., it may be advantageous for multiple agents to combine
their computational power and act as a single agent. It would,
therefore, be interesting to study the rate control problem
that disincentivizes agents from forming coalitions. This is
essential from the security viewpoint as collusion of agents
can lead to a majority attack on distributed ledgers.

Acknowledgment. This research was supported in part by
the U.S. Army Research Ofﬁce grant W911NF-21-1-0093,
National Science Foundation grant CCF-2112457, and Air
Force Ofﬁce of Scientiﬁc Research grant FA9550-22-1-0016.

7

APPENDIX A
PROOF OF THEOREM 1 IN SEC. II-B

Proof. For a ﬁxed d ∈ Dn, objective (5a) is linear in w(x).

As log is an increasing function, the incentive constraints (5b)
can be reformulated as a set of linear inequalities in w(x)

βw(x) −

exp(d(x))
x

≥ βw(¯x) −

exp(d(¯x))
x

, ∀x, ¯x ∈ X

Also, the participation constraint (5c) can be reformulated as
a set of linear inequalities

βw(x) −

exp(d(x))
x

≥ exp(u0), ∀x ∈ X

APPENDIX B
PROOF OF THEOREM 2 IN SEC.III

Proof.

Consider computational power xi, xj ∈ X s.t. xi < xj.
Constraints (5b) imply

βw(xi) −

exp(d(xi))
xi

≥ βw(xj ) −

exp(d(xj ))
xi

and

−

βw(xi) −

(cid:18)

exp(d(xi))
xj

(cid:19)

≥ −

βw(xj ) −

(cid:18)

exp(d(xj ))
xj

(cid:19)

Adding above two inequalities yields

exp(d(xi))
xi

−

exp(d(xi))
xj

exp(d(xj ))
xi
⇒ d(xi) ≤ d(xj )

≤

−

exp(d(xj ))
xj

APPENDIX C
PROOF OF THEOREM 3 IN SEC.III

Proof.

Consider computational power xi, xj ∈ X s.t. xi < xj.
Constraints (5b) imply

βw(xi)xi − exp(d(xi)) ≥ βw(xj )xi − exp(d(xj ))

and

− (βw(xi)xj − exp(d(xi))) ≥ − (βw(xj )xj − exp(d(xj )))

Adding above two inequalities yields

βw(xi)(xi − xj ) ≥ βw(xj )(xi − xj)

⇒ w(xi) ≤ w(xj )

8

APPENDIX D
PROOF OF THEOREM 4 IN SEC.III

Proof.

∂2
∂N ∂(d(x))

(−N R(x, x)) =

x
exp(d(x))

≥ 0, ∀x

This implies that N R(x, x) is a supermodular function [25].
Applying Topkis’ monotonicity theorem [23], optimal PoW
d∗(x; N ) for the transaction control problem (5) increases
with N .

[21] F. Hofmann, S. Wurster, E. Ron, and M. B¨ohmecke-Schwafert. The im-
mutability concept of blockchains and beneﬁts of early standardization.
In 2017 ITU Kaleidoscope: Challenges for a Data-Driven Society (ITU
K), pages 1–8, 2017.

[22] S. Nakamoto. Bitcoin: A peer-to-peer electronic cash system. Decen-

tralized Business Review, page 21260, 2008.

[23] D. M. Topkis. Supermodularity and complementarity. Frontiers of
economic research. Princeton University Press, ﬁrst edition edition,
1998.

[24] V. Krishnamurthy. Partially Observed Markov Decision Processes: From
Filtering to Controlled Sensing. Cambridge University Press, 2016.

[25] R. Amir.

Supermodularity and complementarity in economics: An
elementary survey. Southern Economic Journal, 71(3):636–660, 2005.

REFERENCES

[1] S. Popov. The tangle. White paper, 1(3), 2018.
[2] F. M. Benˇci´c and I. P. ˇZarko. Distributed ledger technology: Blockchain
compared to directed acyclic graph. In 2018 IEEE 38th International
Conference on Distributed Computing Systems (ICDCS), pages 1569–
1570. IEEE, 2018.

[3] Y. Li, B. Cao, M. Peng, L. Zhang, L. Zhang, D. Feng, and J. Yu.
Direct acyclic graph-based ledger for internet of things: Performance and
security analysis. IEEE/ACM Transactions on Networking, 28(4):1643–
1656, 2020.

[4] S. Popov, H. Moog, D. Camargo, A. Capossele, V. Dimitrov, A. Gal,
A. Greve, B. Kusmierz, S. Mueller, A. Penzkofer, O. Saa, W. Sanders,
L. Vigneri, W. Welz, and V. Attias. The coordicide. Accessed Jan, pages
1–30, 2020.

[5] L. Da Xu, W. He, and S. Li. Internet of things in industries: A survey.

IEEE Transactions on industrial informatics, 10(4):2233–2243, 2014.

[6] S. Kumar, P. Tiwari, and M. Zymbler. Internet of things is a revolutionary
approach for future technology enhancement: a review. Journal of Big
data, 6(1):1–21, 2019.

[7] M. F. Zia, M. Benbouzid, E. Elbouchikhi, S. Muyeen, K. Techato, and
J. M. Guerrero. Microgrid transactive energy: Review, architectures,
Ieee Access,
distributed ledger technologies, and market analysis.
8:19410–19432, 2020.

[8] A. Mas-Colell, M. D. Whinston, and J. R. Green. Microeconomic theory.

Oxford University Press, 1995.

[9] G. J. Miller. Solutions to Principal-Agent Problems in Firms. Springer

US, Boston, MA, 2005.

[10] M. Vera-Hern´andez. Structural estimation of a principal-agent model:
Moral hazard in medical insurance. The RAND Journal of Economics,
34(4):670–693, 2003.

[11] C. Dwork and A. Roth. The algorithmic foundations of differential
privacy. Foundations and Trends in Theoretical Computer Science, 9(3-
4):211–407, 2014.

[12] D. Bertsekas. Convex optimization algorithms. Athena Scientiﬁc, 2015.
[13] D. Kraft. Difﬁculty control for blockchain-based consensus systems.
Peer-to-peer Networking and Applications, 9(2):397–413, 2016.
[14] D. Meshkov, A. Chepurnoy, and M. Jansen. Short paper: Revisiting
difﬁculty control for blockchain systems. In Data Privacy Management,
Cryptocurrencies and Blockchain Technology, pages 429–436. Springer,
2017.

[15] E. Altman, D. Menasch´e, A. Reiffers-Masson, M. Datar, S. Dhamal,
C. Touati, and R. El-Azouzi. Blockchain competition between miners:
a game theoretic perspective. Frontiers in Blockchain, page 26, 2020.

[16] L. Vigneri, W. Welz, A. Gal, and V. Dimitrov. Achieving fairness in
In 2019 IEEE
the tangle through an adaptive rate control algorithm.
International Conference on Blockchain and Cryptocurrency (ICBC),
pages 146–148, 2019.

[17] M. Jay, A. Mollard, Y. Sun, R. Zheng, I. Amigo, A. Reiffers-Masson,
and S. Ruano Rinc´on. Utility maximisation in the coordinator-less iota
tangle. pages 93–104, 2021.

[18] A. Cullen, P. Ferraro, W. Sanders, L. Vigneri, and R. Shorten. Access
control for distributed ledgers in the internet of things: A networking
approach. IEEE Internet of Things Journal, pages 1–1, 2021.

[19] X. Liu, E. K. P. Chong, and N. B. Shroff. Opportunistic transmission
scheduling with resource-sharing constraints in wireless networks. IEEE
Journal on Selected Areas in Communications, 19(10):2053–2064, 2001.
[20] A. Farrokh and V. Krishnamurthy. Opportunistic scheduling for stream-
ing multimedia users in high-speed downlink packet access (hsdpa).
IEEE Transactions on Multimedia, 8(4):844–855, 2006.

