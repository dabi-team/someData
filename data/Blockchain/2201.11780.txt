Minotaur: Multi-Resource Blockchain Consensus
Xuechao Wang‚àó
University of Illinois
Urbana-Champaign
xuechao2@illinois.edu

Matthias Fitzi‚àó
IOG
matthias.fitzi@iohk.io

Sreeram Kannan
University of Washington at Seattle
ksreeram@uw.edu

2
2
0
2

p
e
S
7

]

R
C
.
s
c
[

2
v
0
8
7
1
1
.
1
0
2
2
:
v
i
X
r
a

Aggelos Kiayias
University of Edinburgh & IOG
aggelos.kiayias@ed.ac.uk

Nikos Leonardos
University of Athens
nikos.leonardos@gmail.com

Pramod Viswanath
Princeton University
pramodv@princeton.edu

Gerui Wang
Beijing Academy of Blockchain and
Edge Computing
wanggerui@baec.org.cn

ABSTRACT
Resource-based consensus is the backbone of permissionless dis-
tributed ledger systems. The security of such protocols relies funda-
mentally on the level of resources actively engaged in the system.
The variety of different resources (and related proof protocols, some
times referred to as PoX in the literature) raises the fundamental
question whether it is possible to utilize many of them in tandem
and build multi-resource consensus protocols. The challenge in com-
bining different resources is to achieve fungibility between them,
in the sense that security would hold as long as the cumulative
adversarial power across all resources is bounded.

In this work, we put forth Minotaur, a multi-resource blockchain
consensus protocol that combines proof-of-work (PoW) and proof-
of-stake (PoS), and we prove it optimally fungible. At the core of our
design, Minotaur operates in epochs while continuously sampling
the active computational power to provide a fair exchange between
the two resources, work and stake. Further, we demonstrate the
ability of Minotaur to handle a higher degree of work fluctuation as
compared to the Bitcoin blockchain; we also generalize Minotaur
to any number of resources.

We demonstrate the simplicity of Minotaur via implementing
a full stack client in Rust (available open source [25]). We use
the client to test the robustness of Minotaur to variable mining
power and combined work/stake attacks and demonstrate concrete
empirical evidence towards the suitability of Minotaur to serve as
the consensus layer of a real-world blockchain.

1 INTRODUCTION
Resource-based Consensus. The fundamental feature of the de-
centralized computing paradigm of permissionless blockchains is
that participation in the consensus protocol is enabled by prov-
ing possession of a resource. Bitcoin pioneered this idea based on
proof-of-work (PoW), and its implied energy wastage inspired new
designs based on alternative resources such as proof-of-stake (PoS),
proof-of-space (PoSp) and proof-of-elapsed-time (PoD). These dif-
ferent resources cover the variegated and multidimensional forms
of ‚Äòcapital‚Äô that the participants bring. Each proof-of-X mechanism

‚àóThe first two authors contributed equally to this work. For correspondence on the
paper, please contact Matthias Fitzi at matthias.fitzi@iohk.io.

is interesting on their merit in appropriate settings (computation
in PoW, memory and storage in PoSp and time/delay in PoD, to-
kens/capital in PoS). Further, the mechanisms trigger different in-
centives even within the same resource format; focusing on PoW
for example, we see that the hashcash algorithm [2] instantiated
by the SHA256 function [29] implemented in Bitcoin has been re-
placed by others, including scrypt [33] and ethash [12]. Each of
these different proof-of-X mechanisms have led to different, and
isolated, blockchain ecosystems.
Combining different resources. Given the diversity of incen-
tivization embodied by different resources, it is a natural ques-
tion whether it is feasible to combine their features into a single
blockchain design (e.g., hybrid PoW-PoS permissionless blockchains).
The key challenge to combining multiple resources is in determin-
ing the exchange rate, i.e., to what extent the different resources
are translated into power of authority in the system and to extract
security from these resources in an optimal manner. Adapting the
exchange rate dynamically to the participation levels in each re-
source type, resulting in a truly fungible notion of resource, is a
basic and fundamental goal. By truly fungible, we mean that the
security of the multi-resource consensus protocol is guaranteed
as long as the honest players control a majority of the combined
resources that consist of each resource type in the system ‚Äî con-
cretely, (cid:205)ùëÄ
ùëñ=1 ùõΩùëñ < ùëÄ/2 where ùëÄ is the number of resources and
ùõΩùëñ the adversarial power in the ùëñ-th resource (this property is ap-
propriately generalized to any linear combination in Definition 2).
We note that achieving this type of fungibility is beneficial for the
security of the underlying blockchain system as the adversary will
be unable to launch a successful attack by commanding merely 51%
in one of the underlying resources. Next we give some examples of
non-fungible hybrid PoW/PoS protocol designs.
First order hybrid PoW/PoS protocols. Given the basic impor-
tance of incorporating multiple resources in a single blockchain
design, there are several designs of hybrid PoW/PoS protocols in
the literature [4, 10, 11, 19, 23]. These protocols, however, are ei-
ther heuristic (lacking a formal security analysis) [4, 10, 23], or
make assumptions that break fungibility (e.g. honest majority in
stake [10, 11, 19] and/or static mining power [11]). Indeed, with
sufficient assumptions the problem of a hybrid protocol is trivially
resolved. For instance, if we assume an honest majority in stake

 
 
 
 
 
 
(at all time), we can use a committee chosen randomly from the
pool of stakeholders to assist a PoW ledger by regularly issuing
checkpoints [19]. However, the security of this scheme is solely
guaranteed by the stakeholders, and the trust is entirely supported
by PoS (not from PoW).
Natural solutions. In fact, if we assume a static setting (where
both the total mining power and total ‚Äòactive‚Äô stake are fixed and
known to the protocol designer), a simple solution is the following:
PoW and PoS mining occur in parallel; and whichever PoW or PoS
succeeds first, goes ahead and extends the longest chain. However,
there does not appear to be any straightforward (or otherwise)
approach to extend this simple idea to the non-static setting, since
we can no longer normalize the stake and work in the system when
the total mining power is changing and unknown (¬ß4). Even a
fungible combination of work (i.e., total amount of honest work
is more than total Byzantine work) emanating from two different
hash functions (thus allowing two PoW blockchains using the same
longest-chain consensus protocol to co-exist) has been unsolved.
Minotaur Protocol. In this paper we present Minotaur, a block-
chain protocol with proof of fungible work and stake. At its core,
Minotaur is a longest chain protocol that bases its block-proposer
schedule on our concept of virtual stake that fuses active actual
stake and work stake. The work-stake distribution is determined
per epoch by measuring the participants‚Äô contributions in hashing
power during a prior epoch. Work contribution is achieved by con-
current PoW mining of PoW blocks (similar to ‚Äòendorser inputs‚Äô [21]
or ‚Äòfruits‚Äô [32]) to be eventually referenced by main-chain blocks.
The work-stake distribution is then assigned proportionally to a
participant‚Äôs share of endorser blocks referenced from the main
chain during that epoch; and applying the fairness mechanisms
in [17, 21, 32], this assignment indeed truly represents the PoW-
resource distribution among the participants. Note that this process
can be seen as a fine-grained adaptation of PoW-based committee
election such as in [31]. Figure 1a illustrates the protocol (a detailed
description is given in ¬ß5).
Minotaur security is optimal. We show that Minotaur is truly
fungible between work and stake by showing it is secure when the
sum of ùúî times the proportion of adversarial hash power (ùõΩùë§) and
1 ‚àí ùúî times the proportion of the adversarial stake (ùõΩùë† ) is smaller
than 1/2, for any ùúî ‚àà [0, 1], a weighing parameter of PoW/PoS
(see Figure 1b for ùúî = 0.5). Figure 1b also compares the security
guarantee of Minotaur and a couple of non fungible PoW/PoS
protocols in the literature (the checkpointed ledger [19], the 2-hop
blockchain [11], and a few finality gadgets [6, 28, 34, 37]), with more
details in Appendix A. We give a formal security analysis in ¬ß6.
The new challenge that we have to tackle in our security analysis
is to show a fairness guarantee in the work-stake conversion (e.g.,
a miner with 10% mining power should gain 10% work stake) in
the non-static setting and in the presence of an adversarial majority
of mining power. This requires a new understanding of how to
bound the evolution of mining difficulty in the system compared
to techniques used in previous works and the Bitcoin blockchain,
and presents a significant barrier to surmount in our analysis. One
immediate consequence is that Minotaur can tolerate a 51% mining
adversary, as long as there is a supermajority in honest stake (and
vice verse, a 51% stake adversary). We prove our security guarantee
to be optimal, see ¬ß3, in the sense that otherwise the adversary will

(a)

(b)

Figure 1: (a) Architecture of Minotaur consensus protocol. (b)
Comparison of security regions achieved by different hybrid
PoW/PoS protocols (more details in Appendix A).

control the majority of the combined ‚Äúresource‚Äù in the system and
an analogy of Nakamoto‚Äôs private chain attack [26] could break
the security (formal and detailed proof in ¬ß3). We also show that
Minotaur is capable of tolerating fluctuations of work much more
effectively than Bitcoin, cf. ¬ß6.4.
Implementation. We have implemented a prototype of a Mino-
taur client in about 6000 lines of Rust code [25] and provide experi-
mental results to evaluate the performance of Minotaur under dif-
ferent scenarios. We also implemented Bitcoin/FruitChain/Ouroboros
clients as benchmarks. We use that client to validate also experimen-
tally that Minotaur can survive more drastic variations of network
hash power, while Bitcoin/FruitChain is no longer live under the
same scenario. We also evaluate practical security concerns, like
private chain, selfish mining and spamming attacks, on our Mino-
taur client. Our implementation shows that Minotaur performs
well even under these attacks, and makes a stronger case for the
practical viability and robustness of the system. Details about the
implementation and the experiments are given in ¬ß7.
Motivation. Combining multiple resources helps to protect against
scenarios where the adversary may gain control over the majority
of one single resource but not over the combination of all involved
resources. For instance, to violate security in the PoW/PoS case
with ùúî = 0.5, an adversary controlling half of the hash power would
now additionally need to control half of the stake.

As a concrete example, consider the launch of a new blockchain.
A PoS chain can be easily bootstrapped with existing techniques

2

such proof-of-burn [20], initial coin offering [24] and airdrop [1].
In contrast, the bootstrapping of a PoW chain is challenging, as
the new system would presumably start off with a relatively small
total computation power and thus be vulnerable to ‚Äú51% attacks‚Äù.
Especially in view of the many PoW ledgers currently competing
for the dedication of hashing power, a large established Bitcoin
miner suddenly diverting their resources to the new system may
easily result in their obtaining full control of the system. To defend
against such situations, Minotaur allows to launch a (projected)
PoW blockchain in pure PoS mode (setting parameter ùúî = 0) and
later transit into a pure PoW blockchain by gradually changing
the weighing parameter ùúî to a higher value (¬ß8), thus allowing
to safely ramp up the applied hashing power until a safe level of
participation has been reached.
Related work. The idea of hybrid PoW/PoS block production was
first mentioned in [23]. A first concrete construction was given
in [4] under the label ‚Äòproof of activity‚Äô, but without giving a rig-
orous security analysis. Their block-production mechanism essen-
tially extends standard Bitcoin mining by having the mined block
implicitly elect a set of stakeholders that are required to sign the
block in order to validate it.

A similar construction was proposed in [11] and proven secure
under a majority of adversarial hashing power‚Äîhowever, their
security proof still implies an honest majority of stake. In particular,
and contrary to their initial claims, the protocol is not proven secure
under the condition that any minority of the combined resources
is controlled by the adversary.

The work of [11] was extended in [10], to adapt to dynamic
participation of both, hashing power and stake, and in [38], to
combine PoW with multiple resources (rather than just PoS)‚Äîboth
works lack a rigorous security analysis.

The application of PoW/PoS hybrid block production for the goal
of protecting early-stage PoW systems against initial periods of
adversarial dominance in hashing power was explored in [7]. They
propose to start the system with hybrid block production (where
each resource contributes to a certain fraction of the blocks) and
then slowly fade out the stake contribution to eventually turn the
system into pure PoW. Also this protocol is not proven secure.

There also exist another class of hybrid PoW/PoS protocols [6,
28, 34, 37], which uses a BFT protocol (PoS) to build a finality gad-
get/layer on the top of a Nakamoto-style longest chain protocol
(PoW) to achieve important properties such as accountability and fi-
nality. However, these protocols require an honest majority (or even
supermajority) on both the set of miners and the set of stakeholders
hence they are not fungible.

2 PRELIMINARIES
2.1 Security model
Time, slots, and synchrony. We consider a setting where time is
divided into discrete units called slots. Players are equipped with
(roughly synchronized) clocks that indicate the current slot. Slots
are indexed by integers, and further grouped into epochs with
fixed size ùëÖ, i.e., epoch ùëí composes of slots {(ùëí ‚àí 1)ùëÖ + 1, (ùëí ‚àí
1)ùëÖ + 2, ¬∑ ¬∑ ¬∑ , ùëíùëÖ}. And we assume that the real time window that
corresponds to each slot has the following two properties: (1) The
current slot is determined by a publicly-known and monotonically

3

increasing function of current time; (2) Each player has access to
the current time and any discrepancies between parties‚Äô local time
are insignificant in comparison with the duration of a slot.

We describe our protocols in the now-standard Œî-synchronous
network model considered in [3, 8, 18, 30], where there is an (un-
known) upper bound Œî in the delay (measured in number of slots)
that the adversary may inflict to the delivery of any message. Simi-
lar to [18, 30], the protocol execution proceeds in slots with inputs
provided by an environment program denoted by Z(1ùúÖ ) to parties
that execute the protocol Œ†, where ùúÖ is a security parameter. The
network is modeled as a diffusion functionality similar to those
in [18, 30]: it allows message ordering to be controlled by the adver-
sary A, i.e., A can inject messages for selective delivery but cannot
change the contents of the honest parties‚Äô messages nor prevent
them from being delivered within Œî slots of delay ‚Äî a functional-
ity parameter. Specially, for Œî = 1, the network model is reduced
to the so-called lock-step synchronous model, where messages are
guaranteed to be delivered within one slot.
Protocol player. The protocol is executed by two types of players,
PoW-miners (miners for short) and PoS-holders (stakeholders for
short), who generate different types of blocks, PoW blocks and
PoS blocks. Note that we allow for any relation among the sets of
miners and stakeholders, including the possibility that all players
play both roles, or the two types of players are disjoint.
Random oracle. For PoW mining, we abstract the hash function
as a random-oracle functionality. It accepts queries of the form
(compute, ùë•) and (verify, ùë•, ùë¶). For the first type of query, assum-
ing ùë• was never queried before, a value ùë¶ is sampled from {0, 1}ùúÖ
and it is entered to a table ùëáùêª . If ùë• was queried before, the pair
(ùë•, ùë¶) is recovered from ùëáùêª . In both cases, the value ùë¶ is provided
as an answer to the query. For the second type of query, a lookup
operation is performed on the table. Honest miners are allowed to
ask one query per slot of the type compute and unlimited queries
of the type verify. The adversary A is given a bounded number
of compute queries per slot and also unlimited number of verify
queries. The bound for the adversary is determined as follows.
Whenever a corrupted miner is activated the bound is increased by
1; whenever a query is asked the bound is decreased by 1 (it does
not matter which specific corrupted miner makes the query).
Adversarial control of resources. We assume a Byzantine ad-
versary who can decide on the spot how many honest/corrupted
miners are activated adaptively. Note that we allow instantaneously
adaptive corruption on miners, which means that both the num-
ber of honest miners and the number of corrupted miners in each
slot are chosen by the adversary. For stakers, the adversary is only
‚Äòmoderately‚Äô adaptive (participant corruption only takes effect after
a certain delay), just like in Ouroboros classic [21]. In a slot ùëü , the
number of honest miners that are active in the protocol is denoted
by ‚Ñéùëü and the number of all active miners in slot ùëü is denoted by
ùëõùëü . Note that ‚Ñéùëü can only be determined by examining the view of
all honest miners and is not a quantity that is accessible to any of
the honest miners individually. In order to obtain meaningful con-
centration bounds on the number of PoW blocks in a long enough
window, we set a lower bound ùõº0 on the fraction of honest mining
power, i.e., ‚Ñéùëü ‚â• ùõº0ùëõùëü for all ùëü . Note that ùõº0 does not have to be 1/2
as required by Bitcoin, it can be a small positive constant. Sudden

decreases of total mining power could hurt the liveness of the pro-
tocol due to too few PoW blocks mined in one epoch. Therefore, we
need to restrict the fluctuation of the number of honest/adversarial
queries in a certain limited fashion. Suppose Z, A with fixed coins
produces a sequence of honest miners ‚Ñéùëü , where ùëü ranges over all
slots of the entire execution, we define the following notation.

Definition 1 (from [16]). For ùõæ ‚àà [1, ‚àû), we call a sequence
(ùë•ùëü ), ùëü ‚àà [ùêøùëÖ], as (ùõæ, ùë†)-respecting if for any set ùëÜ ‚äÜ [0, ùêøùëÖ] of at
most ùë† consecutive slots,

max
ùëü ‚ààùëÜ

ùë•ùëü ‚â§ ùõæ min
ùëü ‚ààùëÜ

ùë•ùëü ,

We say that Z is (ùõæ, ùë†)-respecting if for all A and coins for Z and
A, both the sequences of (‚Ñéùëü ) and (ùëõùëü ) are (ùõæ, ùë†)-respecting.

Finally, Minotaur achieves consensus via proof of fungible work
and stake. The following is the formal definition of fungibility and
our major assumptions on the adversarial power.

Definition 2 (Fungibility of resources). For a time window
ùëä , let ùõΩùëä
ùë† be the maximum fraction of adversarial stake in ùëä , where
the maximum is taken over all views of all honest players across
all slots in ùëä ; and let ùõΩùëä
ùë§ be the maximum fraction of adversarial
mining power over all slots in ùëä (i.e., ùõΩùëä
ùë§ = 1 ‚àí minùëü ‚ààùëä ‚Ñéùëü /ùëõùëü ). For
ùúÉ ‚àà [0, 1], we say the adversary A is (ùúÉ, ùëö, ùúî)-bounded if for any
time window ùëä with at most ùëö slots, we have ùúîùõΩùëä
ùë† ‚â§ ùúÉ .
We say a blockchain protocol achieves fungibility of work and stake
if it is secure against such an adversary.

ùë§ + (1 ‚àíùúî)ùõΩùëä

To keep the paper simple, the Minotaur protocol, as described,
will rely on Assumption 1 below that initializes the protocol with
honest majority of stake; however this assumption is not essential;
we refer the reader to ¬ß8 for a discussion on how to remove it.

Assumption 1 (Initialization). During the initialization phase

of the protocol, we assume:

1.1 The initial stake distribution has honest majority, i.e., ùõΩ0

ùë† ‚â§
ùë† is the fraction of initial stake controlled by

1/2 ‚àí ùúé, where ùõΩ0
the adversary.

1.2 We have a good estimate of the initial honest mining power
Àú‚Ñé1 be the estimate of ‚Ñé1, we have ‚Ñé1/(1 +

‚Ñé1. In particular, let
ùõø)ùõæ 2 ‚â§ Àú‚Ñé1 ‚â§ ùõæ 2‚Ñé1/(1 ‚àí ùõø)ùõº0.

Post initialization, we relax the above to our intended fungible

resource assumption described below.

Assumption 2 (Execution). During the execution phase of the

protocol, we assume:

2.1 Stake-work bound: The adversary A is (1/2 ‚àí 2ùúé, 2ùëÖ, ùúî)-

bounded.

2.2 Work fluctuation bound: The environment Z is (ùõæ, 2ùëÖ)-respecting.
2.3 Work participation bound: For any slot ùëü ‚àà [ùêøùëÖ], ‚Ñéùëü ‚â• ùõº0ùëõùëü .
Participation model. Minotaur can be constructed based on dif-
ferent PoS longest chain protocols. Various versions of Minotaur
will take different subsets of the following assumptions on the
participation model:

(P1) Honest stakeholders are always online1;

1This assumption can be easily relaxed. Namely, it is sufficient for an honest stakeholder
to come online at the beginning of each epoch, determine whether it belongs to the

4

(P2) Honest miners who mined PoW blocks in epoch ùëí will stay

online in epoch ùëí + 2;2

(P3) In case an honest party joins after the beginning of the pro-
tocol, its initialization chain C provided by the environment
should match an honest party‚Äôs chain which was active in
the previous slot.

2.2 Blockchain security properties

Notation 1. We denote by C ‚åà‚Ñì the chain resulting from ‚Äúpruning‚Äù
the blocks with timestamps within the last ‚Ñì slots. If C1 is a prefix of
C2, we write C1 ‚â∫ C2. The latest block in the chain C is called the
head of the chain and is denoted by head(C). We denote by C1 ‚à© C2
the common prefix of chains C1 and C2. Given a chain C and an
interval ùëÜ (or [ùëü1, ùëü2]), let C(ùëÜ) (or C [ùëü1, ùëü2]) be the segment of C
containing blocks with timestamps in ùëÜ (or [ùëü1, ùëü2]). We say that a
chain C is held by or belongs to an honest node if it is one of the best
chains in its view.

Definition 3 (Common Prefix (CP)). The common prefix prop-
erty with parameter ‚Ñìcp ‚àà N states that for any two honest nodes
holding chains C1, C2 at slots ùëü1, ùëü2, with ùëü1 ‚â§ ùëü2, it holds that
‚åà‚Ñìcp
C
1

‚â∫ C2.

Definition 4 (Existential Chain Quality (‚àÉCQ)). The exis-
tential chain quality property with parameter ‚Ñìcq ‚àà N states that
for any chain C held by any honest party at slot ùëü and any interval
ùëÜ ‚äÜ [0, ùëü ] with at least ‚Ñìcq consecutive slots, there is at least one
honestly generated block in C(ùëÜ).

Our goal is to generate a robust transaction ledger that satisfies

persistence and liveness as defined in [21].

Definition 5. A protocol Œ† maintains a robust public transaction
ledger if it organizes the ledger as a blockchain of transactions and it
satisfies the following two properties:

‚Ä¢ (Persistence) Consider the confirmed ledger ùêø1 on any node
ùëù1 at any slot ùëü1, and the confirmed ledger ùêø2 on any node ùëù2
at any slot ùëü2 (here ùë¢1 (ùëü1) may or may not equal ùë¢2 (ùëü2)). If
ùëü1 + Œî < ùëü2, then ùêø1 is a prefix of ùêø2.

‚Ä¢ (Liveness) Parameterized by ùë¢ ‚àà R, if a transaction tx is re-
ceived by all honest nodes for more than ùë¢ slots, then all honest
nodes will contain tx in the same place in the confirmed ledger.

3 IMPOSSIBILITY RESULT
Consider any protocol Œ† executed by two types of players, miners
and stakeholders, and let ùê∑Œ† be the region of (ùõΩùë§, ùõΩùë† ) such that Œ†
can generate a robust public transaction ledger under an adversary
controlling a ùõΩùë§ fraction of mining power and a ùõΩùë† fraction of stake
(see Figure 1b).

Theorem 3.1. Any two points, ùëã1 = (ùëù1, ùëû1) and ùëã2 = (ùëù2, ùëû2)

such that ùëù1 + ùëù2 ‚â• 1 and ùëû1 + ùëû2 ‚â• 1, cannot co-exist in ùê∑Œ†.

Proof. We show that if there exists a protocol Œ† secure under
both points ùëã1 and ùëã2, then we can use Œ† to implement a robust

slot leader set for any slots within this epoch, and then come online and act on those
slots while maintaining online presence at least every ùëò slots. See Appendix H of [8]
for more detail.
2This can be relaxed similarly as P1.

Idea 1: Securing PoW chain via checkpointing. The check-
pointed ledger [19] employs an external set of parties or a committee
chosen randomly from the pool of stakeholders to assist a PoW
ledger by finalizing blocks shortly after their creation. The finalized
blocks are called checkpoints and the final ledger is formed by the
chain of checkpoints. This mechanism can also secure a PoW ledger
in the presence of adversarial mining majorities, but the security is
solely guaranteed by the external set or the stakeholders.

Other checkpointing protocols [6, 28, 34, 37] achieve properties
that are not possible with pure PoW protocols, such as accountabil-
ity and finality. However, in contrast to our requirement to tolerate
any adversarial minority of the combined resources, these protocols
are based on the stronger assumption of honest majority (or even
supermajority) of both the set of miners and the set of stakeholders.
Idea 2: Smooth interpolation among PoW and PoS blocks. In
the static setting (where both the total mining power and total
active stake are fixed and known to the protocol designer), there is
a simple protocol that can also achieve the regions defined by the
red line in Figure 1b. In this protocol, PoW and PoS mining occur
in parallel, following the longest chain rule. In the initialization
phase, we tune the mining targets such that the mining rate (i.e.,
number of blocks produced per unit time) of PoW blocks is ùúî ùëì and
the mining rate of PoS blocks is (1 ‚àí ùúî)ùëì . In the execution phase,
whichever miners or stakeholders succeeds first, it goes ahead and
extends the longest chain which accepts both types of blocks.

Compared with a pure PoS protocol (e.g., Ouroboros Praos [8]),
the adversary has strictly smaller action space because it cannot
equivocate with the PoW blocks. Thus, the security of this protocol
follows directly from the security of Ouroboros Praos via either the
forkable string argument [3] or the Nakamoto block method devel-
oped in [9]. We remark that the existence of this simple protocol
makes the 2-hop blockchain [11] less interesting as it only works in
the static setting and does not even allow weighing PoW and PoS.
However, it is very hard to extend this simple idea to the non-
static setting, particularly with variable mining power. A natural
approach to support variable mining power is to have fixed-length
epochs and adjust the mining target of PoW blocks every epoch
as in Bitcoin. From the simple protocol described above, we learn
that in order to guarantee security in the non-static setting, we
need to make sure that the ratio of total mining rates of PoW blocks
and PoS blocks is a constant ùúî/(1 ‚àí ùúî) in every epoch. However,
this is impossible to achieve in the variable mining power setting
because the adversary can always decide to hide or release its PoW
blocks so that there is no way to estimate the total mining power
accurately. Inaccurate PoW mining target adjustment could lead
to a different weighing parameter ùúî of the security region than
the desired one. More importantly, the value of ùúî can be easily
manipulated by the adversary (via selectively publishing its PoW
blocks), and is unknown to the honest players.

5 THE FULL PROTOCOL
In this section, we provide a detailed description of our protocol
Minotaur. The protocol is built on an epoch-based PoS longest
chain protocol e.g., Ouroboros Classic [21], Praos [8], or Genesis [3].
Recall that in an epoch-based PoS protocol, time is divided into
multiple epochs, each with a fixed number of slots. In each slot, one

Figure 2: A few examples of possible security regions satis-
fying the constraint by Theorem 3.1.

transaction ledger with two players, one of them being Byzantine,
which is impossible.

Let Alice and Bob be two players, one of them possibly malicious.
Let Alice control a ùëù1 fraction of mining power and a 1 ‚àíùëû2 fraction
of stake. Let Bob control a 1 ‚àí ùëù1 fraction of mining power and a ùëû2
fraction of stake. In the case where Alice is malicious, a ùëù1 fraction
of mining power and a 1 ‚àí ùëû2 ‚â§ ùëû1 fraction of stake are malicious,
which is dominated by point ùëã1. In the case where Bob is malicious,
a 1 ‚àí ùëù1 ‚â§ ùëù2 fraction of mining power and a ùëû2 fraction of stake
are malicious, which is dominated by point ùëã2. Assuming that Œ†
implements a robust public transaction ledger implies that also the
protocol among the two players does while one of them is malicious.
However, by Theorem 1 in [15], tolerating ùëì = 1 malicious player
‚ñ°
requires at least 2ùëì + 1 = 3 players. This is a contradiction.

Figure 2 gives a few examples of possible maximum security re-
gions that satisfy the constraint by Theorem 3.1. By maximum,
we mean the region cannot be enlarged. All these regions are
bounded by a non-increasing curve that is symmetrical about the
point (1/2, 1/2). Thus, all these security regions have area 1/2,
which is an analogy of the 1/2 fault tolerance in the single-resource
systems. In this work, we focus on achieving the security regions
bounded by a linear curve (the yellow and red ones in Figure 2) and
leave the achievability of other possible regions (e.g., the green and
blue ones) to future work. Note that the security region achieved
by the checkpointed ledger [19] is also optimal (albeit not fungible),
and we will see that this region can also be achieved by Minotaur
with ùúî = 0.

Corollary 1. No protocol Œ† can generate a robust public trans-

action ledger under a (1/2, ùëö, ¬∑)-bounded adversary for any ùëö.

Corollary 1 thus implies that Assumption 2.1 is not only sufficient

but also necessary.

4 BASELINE APPROACHES
In this section, we provide a couple of natural designs of hybrid
PoW/PoS protocols, which fail to achieve the full goal of Minotaur.

5

or multiple stakeholders are selected as block proposers by a PoS
‚Äòlottery‚Äô process. In this process, the probability of being selected is
proportional to the relative stake a stakeholder has in the system, as
reported by the blockchain itself. See Appendix E for more details.
In contrast to the original Ouroboros protocols, the block-pro-
poser schedule accounts for both resources by means of virtual
stake, which is a combination of the actual stake (representing stake
as in the original protocol), and work stake representing the share
in block-production rights attributed to the PoW resource.

Additionally, PoW miners participate by mining endorser blocks
(along the lines of ‚Äòendorser inputs‚Äô [21] or ‚Äòfruits‚Äô [32]). These
endorser blocks are not directly appended to the main chain, but
are to be referenced by future main-chain blocks (i.e., PoS blocks
scheduled by means of virtual stake). Each epoch is assigned a
certain amount of work stake that is assigned to the PoW min-
ers who succeed in mining PoW blocks; the work stake assigned
to the respective miners is proportional to their contribution of
PoW blocks referenced from the main chain during an epoch. PoS
block production rights per epoch are then assigned by considering
the sum of actual stake (contributed by tokens) and work stake
(contributed by PoW blocks).

Note that the purpose of the PoW endorser blocks is to measure
work fairly, not implying that they also need to carry the ledger
transactions. Transaction inclusion is orthogonal to this aspect, and
can still be implemented along the lines of Bitcoin (transaction
inclusion in the main-chain blocks) or Input-Endorsers/FruitChain
(transaction inclusion in the endorser blocks), or variants thereof.
We now treat the underlying PoS protocol as a black-box and
present the protocol in detail. The protocol runs in fixed-time
epochs with ùëÖ slots each.

‚Ä¢ PoW mining: In slot ùë†ùëô of epoch ùëí, a miner mines a PoW block

if

ùêª (ùëùùëò, ùë†ùëô, ‚Ñé, ùëöùëü, ùëõùëúùëõùëêùëí) < ùëáùëí,

where ùëùùëò is the public key of the miner, ‚Ñé is the hash of the
last confirmed PoS block (according to the confirmation rule
of the underlying PoS protocol), ùëöùëü is the Merkle root of
the payload, ùëáùëí is the mining target in epoch ùëí. Like in PoW
blockchains, miners try different values of ùëõùëúùëõùëêùëí to solve
this hash puzzle. Following the notation in [18], we define
the difficulty of this PoW block to be 1/ùëáùëí . Besides possible
transactions, also the public key of the miner is included in
the payload. A PoW block is called recent in current slot ùë†ùëônow
if it refers to a confirmed PoS block mined no earlier than
slot ùë†ùëônow ‚àí ùë†ùëôre, where ùë†ùëôre is called the recency parameter.
‚Ä¢ PoS mining: in slot ùë†ùëô of epoch ùëí, one or multiple stakehold-
ers are selected to propose PoS blocks extending the best
chain (according to the chain selection rule). The selection
of PoS block proposers uses the same mechanism as in the
underlying PoS protocol. But for each node, the probability
of being selected is proportional to its relative ‚Äúvirtual‚Äù stake,
instead of the relative actual stake. The virtual stake is the
sum of actual stake and work stake. At the beginning of each
epoch, we set the total work stake equal to ùúî
1‚àíùúî times the
total actual stake in the system. And the work stake distri-
bution used in epoch ùëí is set to be the distribution of block

6

difficulties from PoW blocks referred by PoS blocks in epoch
ùëí ‚àí 2.

‚Ä¢ Adjust the PoW mining target: For epoch ùëí, ùëáùëí is adjusted
according to ùê∑total
ùëí‚àí1 the total difficulty of PoW blocks referred
by PoS blocks in slots [(ùëí ‚àí 2) ‚àó ùëÖ ‚àí ùëò + 1, (ùëí ‚àí 1) ‚àó ùëÖ ‚àí ùëò],
i.e., ùëáùëí = ùëì (ùë§) ùëÖ/ùê∑total
ùëí‚àí1 , where ùëì (ùë§) is a protocol parameter
representing the expected PoW mining rate in number of
blocks per slot. (Specially, for ùëí = 2, ùëá2 = ùëì (ùë§) (ùëÖ ‚àíùëò)/ùê∑total
.)
Note that around the boundary of two epochs ùëí ‚àí 1 and
epoch ùëí, the adversary has the option to use targets from
both epochs, as PoW blocks don‚Äôt have accurate timestamps.
‚Ä¢ Chain selection rule: due to a long-range attack (see Appen-
dix C), the longest chain rule would fail. We use the following
chain selection rules, which have different security guaran-
tees.
‚Äì maxvalid-mc (from Ouroboros Praos [8], needs a trusted
third party for bootstrapping, i.e., assumption (P3)): it
prefers longer chains, unless the new chain forks more
than ùëò blocks relative to the currently held chain (in which
case the new chain would be discarded).

1

‚Äì maxvalid-bg (from Ouroboros Genesis [3], supports boot-
strapping from genesis block): it prefers longer chains, if
the new chain C‚Ä≤ forks less than ùëò blocks relative to the
currently held chain C. If C‚Ä≤ did fork more than ùëò blocks
relative to C, C‚Ä≤ would still be preferred if it grows more
quickly in the ùë† slots following the slot associated with
the last common block of C and C‚Ä≤.

6 SECURITY ANALYSIS
6.1 Main theorems
Under different security models and assumptions, we prove the
security (in particular, persistence and liveness as defined in ¬ß2.2)
of Minotaur constructed with three various versions of Ouroboros
PoS protocols.

Theorem 6.1. Under Assumption 1, Assumption 2 and assump-
tions (P1)-(P3), when executed in a lock-step synchronous model
(i.e., Œî-synchronous model with Œî = 1), Minotaur constructed with
Ouroboros [21] generates a transaction ledger that satisfies persistence
and liveness with overwhelming probability.

Theorem 6.2. Under Assumption 1, Assumption 2 and assump-
tions (P1)-(P3), when executed in a Œî-synchronous model, Minotaur
constructed with Ouroboros Praos [8] generates a transaction ledger
that satisfies persistence and liveness with overwhelming probability.
Theorem 6.3. Under Assumption 1, Assumption 2 and assump-
tions (P1)-(P2), when executed in a Œî-synchronous model, Minotaur
constructed with Ouroboros Genesis [3] generates a transaction ledger
that satisfies persistence and liveness with overwhelming probability.

6.2 Security with Ouroboros
We first provide a proof sketch for Theorem 6.1. All the parameters
used in our analysis are listed in Table 1.

Proof sketch. The proof relies on two important arguments:
1) Single-epoch argument. Given honest majority in the vir-
tual stake (normalized work-stake + normalized actual-stake)

‚Ñéùëü
ùëõùëü
ùõº0
ùë†ùëôre
Œî
ùúÖ

number of honest PoW queries in slot ùëü
number of total PoW queries in slot ùëü
lower bound on the fraction of honest mining power
recency parameter for PoW blocks
network delay in slots
security parameter; length of the hash function output

ùëÖ ‚àà N duration of an epoch in number of slots
(ùõæ, ùë†)

restriction on the fluctuation of the number of
honest queries across slots (Definition 1)
expected PoS mining rate in number of blocks per slot
expected PoW mining rate in number of blocks per slot
quality of concentration of random variables
PoW fairness parameter
& advantage of honest parties (Assumption 1.1 and 2.1)
‚Äúgoodness‚Äù parameter of an epoch/slot (Definition 6)
typicality parameter of the execution
minimum number of slots for concentration bounds
total number of epochs in the execution
the weighing parameter

ùëì (ùë† )
ùëì (ùë§)
ùúñ
ùúé

ùõø
ùúÜ
‚Ñì
ùêø
ùúî

Table 1: The parameters used in our analysis.

used in one epoch, we prove the security properties (CP and
‚àÉCQ) for this single epoch. For this, we use the so-called
forkable strings technique developed in the Ouroboros pa-
pers [3, 8, 21].

2) FruitChain argument. Given CP and ‚àÉCQ of the PoS chain
in an epoch, we prove fairness of PoW blocks in this epoch,
i.e., a miner controlling a ùúô fraction of the computational
resources will contribute a ùúô fraction of work.

Using these building blocks, we prove the security with maxvalid-
mc inductively. Under the honest majority assumption in the initial
stake distribution (Assumption 1.1), we can prove security of the
PoS chain in epochs 1&2. Applying the FruitChain argument, we
get fairness of PoW blocks in epochs 1&2. Combining with Assump-
tion 2.1, i.e., ùúîùõΩùë§ + (1 ‚àí ùúî)ùõΩùë† < 1 (for any long enough window),
we have honest majority in the virtual stake distribution used in
epoch 3&4. And the proof goes on till the last epoch (Figure 3). ‚ñ°

6.2.1

Single-epoch security.

Theorem 6.4 (Theorem 3 from [8]). Let ùúÖ, ùëÖ, Œî ‚àà N and ùúé ‚àà

(0, 1). Let ùõΩùë£ be the fraction of adversarial virtual stake satisfying

ùõΩùë£ ‚â§ 1/2 ‚àí ùúé

for some positive constant ùúé. Then the probability that the adversary
violates CP with parameter ‚Ñìcp = ùúÖ and ‚àÉCQ with parameter ‚Ñìcq = ùúÖ
throughout a period of ùëÖ slots is no more than ùëÖùëí‚àíŒ© (ùúÖ) . The constant
hidden by the Œ©(¬∑)-notation depends on ùúé.

In Minotaur, the main-chain blocks are scheduled as a function
of the virtual-stake distribution only. The Ouroboros analysis thus
directly translates by replacing its actual stake by virtual stake.

FruitChain argument. Recall that ‚Ñéùëü is the number of honest
6.2.2
PoW queries in slot ùëü and ùëõùëü is the number of total PoW queries
in slot ùëü . For a set of slots ùëÜ, we define ‚Ñé(ùëÜ) = (cid:205)ùëü ‚ààùëÜ ‚Ñéùëü and ùëõ(ùëÜ) =
(cid:205)ùëü ‚ààùëÜ ùëõùëü . In order to obtain meaningful concentration bounds on

the number of PoW blocks in one epoch, there is a lower bound ùõº0
on the fraction of honest mining power, i.e., ‚Ñéùëü ‚â• ùõº0ùëõùëü for all ùëü .

In the analysis of this subsection, we assume the main chain (PoS
chain) satisfies properties CP with parameter ‚Ñìcp = ùúÖ and ‚àÉCQ with
parameter ‚Ñìcq = ùúÖ. By the common prefix property, for a PoS chain
C held by an honest node at slot ùëü , the prefix C ‚åàùúÖ are stabilized,
so to mine a PoW block at slot ùëü an honest miner will refer the tip
of C ‚åàùúÖ as the last confirmed PoS block. And we set the recency
parameter ùë†ùëôre = 3ùúÖ + Œî, i.e., a PoW block ùêµùë§ is recent w.r.t. a chain
C at slot ùëü if the confirmed PoS block referred by ùêµùë§ is in C and
has timestamp at least ùëü ‚àí 3ùúÖ ‚àí Œî. With this selection of the recency
parameter, we can prove the following key property of the protocol:
any PoW block mined by an honest miner will be incorporated into
the stabilized chain (and thus never lost). We refer to this as the
Fruit Freshness Lemma‚ÄîPoW blocks stay ‚Äúfresh‚Äù sufficiently long
to be incorporated.

Lemma 6.5 (Fruit Freshness). Suppose the PoS chain satisfies
properties CP with parameter ‚Ñìcp = ùúÖ and ‚àÉCQ with parameter
‚Ñìcq = ùúÖ. Then, if ùë†ùëôre = 3ùúÖ + Œî, an honest PoW block mined at slot ùëü
will be included into the stabilized chain before slot ùëü + ùëüwait, where
ùëüwait = 2ùúÖ + Œî.

Proof. Suppose an honest PoW block ùêµùë§ is mined at slot ùëü0
while the PoS chain C0 is adopted, then ùêµùë§ will reference the tip of
C ‚åàùúÖ
as the last confirmed PoS block. Further, by the ‚àÉCQ property,
0
the tip of C ‚åàùúÖ
0 has timestamp ùëü1 ‚â• ùëü0 ‚àí 2ùúÖ. By slot ùëü0 + Œî, all honest
nodes will receive ùêµùë§. Let ùëü2 = ùëü0 + 2ùúÖ + Œî and C be any chain
held by an honest node at slot ùëü2, then again by ‚àÉCQ, there exists
an honest block ùêµùë† on C whose timestamp ùëü3 is in the interval
[ùëü2 ‚àí 2ùúÖ, ùëü2 ‚àí ùúÖ). We check that ùêµùë§ is still recent at slot ùëü3 as

ùëü3 ‚àí ùëü1 < (ùëü2 ‚àí ùúÖ) ‚àí (ùëü0 ‚àí 2ùúÖ) = 3ùúÖ + Œî = ùë†ùëôre.

As ùêµùë† is an honest block mined after ùëü0 + Œî, ùêµùë† or an ancestor of ùêµùë†
must include ùêµùë§. And since ùêµùë† is stabilized in C at slot ùëü2, we have
‚ñ°
that ùëüwait = ùëü2 ‚àí ùëü0 = 2ùúÖ + Œî.

In a (ùõæ, ùë†)-respecting environment, we have the following useful

proposition.

Proposition 1 (Proposition 2 from [18]). In a (ùõæ, ùë†)-respecting
environment, let ùëà be a set of at most ùë† consecutive slots and ùëÜ ‚äÜ ùëà .
Then, for any ‚Ñé ‚àà {‚Ñéùëü : ùëü ‚àà ùëà } and any ùëõ ‚àà {ùëõùëü : ùëü ‚àà ùëà } we have
ùëõ(ùëÜ)
|ùëÜ |

‚â§ ùõæùëõ,

‚Ñé
ùõæ

‚â§

‚â§

‚Ñé(ùëÜ)
|ùëÜ |
(cid:16)1 +

‚â§ ùõæ‚Ñé,

ùëõ
ùõæ
ùõæ |ùëà \ ùëÜ |
|ùëÜ |

‚Ñé(ùëà ) ‚â§

(cid:17)

‚Ñé(ùëÜ), ùëõ(ùëà ) ‚â§

(cid:16)1 +

(cid:17)

ùõæ |ùëà \ ùëÜ |
|ùëÜ |

ùëõ(ùëÜ).

Recall that ùëáùëí is the mining target in epoch ùëí determined by the
stabilized segment of the chain from epoch ùëí ‚àí 1. In order to obtain
meaningful concentration bounds on the number of PoW blocks,
we need ùëáùëí to be ‚Äòreasonable‚Äô for each epoch. Similar to [16, 18], we
define a notation of ‚Äògood‚Äô epochs as follows. By abuse of notation,
we write the expected PoW block rate ùëì (ùë§) simply as ùëì in the
analysis below.

Definition 6. Epoch ùëí is good if (1 ‚àí ùõø)ùõº0 ùëì /ùõæ ‚â§ ùëù‚Ñé (ùëí)ùëáùëí ‚â§
(1 + ùõø)ùõæ ùëì , where ùëù = 1/2ùúÖ and ‚Ñé (ùëí) = ‚Ñé (ùëí‚àí1)ùëÖ+1, i.e., the number of

7

Figure 3: Proof sketch for ¬ß6.2.

honest queries in the first slot of epoch ùëí. A slot ùëü is good if it is in a
good epoch.

Proposition 2. Under a (ùõæ, 2ùëÖ)-respecting environment, if slot ùëü
is a good slot in epoch ùëí, then (1 ‚àí ùõø)ùõº0 ùëì /ùõæ 2 ‚â§ ùëù‚Ñéùëüùëáùëí ‚â§ (1 + ùõø)ùõæ 2 ùëì .

Proof. By the definition of a good epoch, we have (1‚àíùõø)ùõº0 ùëì /ùõæ ‚â§
ùëù‚Ñé (ùëí)ùëáùëí ‚â§ (1 + ùõø)ùõæ ùëì . And under a (ùõæ, 2ùëÖ)-respecting environment
and the fact that slot ùëü is in epoch ùëí, we know 1/ùõæ ‚â§ ‚Ñéùëü /‚Ñé (ùëí) ‚â§ ùõæ.
Therefore, (1 ‚àí ùõø)ùõº0 ùëì /ùõæ 2 ‚â§ ùëù‚Ñéùëüùëáùëí ‚â§ (1 + ùõø)ùõæ 2 ùëì .
‚ñ°

Now, we prove fairness of PoW blocks in any large enough win-
dow, i.e., a miner controlling a ùúô fraction of the computational
resources will contribute a ùúô fraction of work. We first give a form
definition of fairness.

Definition 7. We say that H is a ùúô-fraction honest subset if
ùëü > ùúôùëõùëü

miners in H (that may change over time) are honest and ùëõ H
for any slot ùëü , where ùëõ H
is number of queries in H at slot ùëü .
ùëü

Definition 8 (Fairness). We say that the protocol has (approx-
imate) (ùëä0, ùúé)‚àífairness if, for any ùúô, ùõº0 ‚â§ ùúô < 1, any ùúô‚àífraction
honest subset H , and any honest miner holding chain C at slot ùëü
and any interval ùëÜ0 ‚äÜ [0, ùëü ] with at least ùëä0 consecutive slots, it
holds that the PoW blocks included in C(ùëÜ0) mined by H have total
difficulty at least (1 ‚àí ùúé)ùúôùëë, where ùëë is the total difficulty of all PoW
blocks included in C(ùëÜ0).

Define the random variable ùê∑ùëü equal to the sum of the difficulties
of all PoW blocks computed by honest miners at slot ùëü . And for
fixed ùúô and ùúô‚àífraction honest subset H , define the random variable
ùê∑ H
ùëü equal to the sum of the difficulties of all PoW blocks computed
by miners in H at slot ùëü . For a set of slots ùëÜ, we define ùê∑ (ùëÜ) =
(cid:205)ùëü ‚ààùëÜ ùê∑ùëü , ùê∑ H (ùëÜ) = (cid:205)ùëü ‚ààùëÜ ùê∑ H
ùëü . For a set of
ùêΩ adversarial queries, define the random variable ùê¥(ùêΩ ), as the sum
of difficulties of all the PoW blocks created during queries in ùêΩ .

ùëü , and ùëõ H (ùëÜ) = (cid:205)ùëü ‚ààùëÜ ùëõ H

Next we define the notion of typical executions, which will be

shown to occur with overwhelming probability.

Definition 9 (Typical execution). An execution ùê∏ is typical if

the following hold
(a) For any set ùëÜ of at least ‚Ñì consecutive good slots,

ùê∑ (ùëÜ) < (1 + ùúñ)ùëù‚Ñé(ùëÜ).

(b) For any set ùëÜ of at least ‚Ñì consecutive good slots, let ùêΩ be the set of
adversarial queries in ùëÜ. If we further know each query in ùêΩ made at
slot ùëü with target ùëá satisfies (1 ‚àí ùõø)ùõº0 ùëì /ùõæ 2 ‚â§ ùëùùëõùëüùëá ‚â§ (1 + ùõø)ùõæ 2 ùëì /ùõº0,
then

ùê∑ (ùëÜ) + ùê¥(ùêΩ ) < (1 + ùúñ)ùëù (‚Ñé(ùëÜ) + |ùêΩ |).

8

(c) For any set ùëÜ of at least ‚Ñì/ùúô consecutive good slots,

ùê∑ H (ùëÜ) > (1 ‚àí ùúñ)ùëùùëõ H (ùëÜ).

To obtain meaningful concentration, we should be considering a

sufficiently long slot sequence of at least

‚Ñì ‚âú

2(1 + ùúñ/3)
ùúñ2ùõæ 3 (1 ‚àí ùõø)ùõº0 ùëì

ùúÜ,

where ùúÜ is called the typicality parameter of the execution.

For our analysis to go through, the protocol parameters should
satisfy certain conditions which we now discuss. First, we will
require that the number ‚Ñì defined above and the security parameter
ùúÖ are appropriately small compared to ùëÖ, the duration of an epoch.

ùëÖ ‚àí 3ùúÖ ‚àí Œî ‚â• ‚Ñì/ùõº0 ‚â•

ùõæ
ùúñ

(4ùúÖ + Œî).

(C1)

Note that (C1) implies ùëÖ ‚â• (4ùúÖ + Œî)/ùúñ. Second, the slack variables
ùúñ and ùõø should satisfy

4ùúñ ‚â§ ùõø ‚â§ 1.

(C2)

Next we bound the probability of an atypical execution (Lemma 6.6)

and show that all epochs are good in a typical execution by induc-
tion (Lemma 6.7). Therefore, all epochs are good with overwhelming
probability.

Lemma 6.6. For an execution E of ùêøùëÖ slots, in a (ùõæ, 2ùëÖ)-respecting
environment, the probability of the event ‚ÄúE is not typical‚Äù is bounded
by O (ùêøùëÖ)ùëí‚àíùúÜ.

Lemma 6.7. For a typical execution in a (ùõæ, 2ùëÖ)-respecting envi-

ronment, all epochs are good.

The proofs of Lemma 6.6 and Lemma 6.7 are in Appendix D.
In order to address the dependency among PoW successes in the
variable mining difficulty setting, the proof of Lemma 6.6 uses
martingale arguments (from [18]) to provide useful bounds on
the relevant random variables. The proof of Lemma 6.7 uses an
induction argument to show that if all previous epochs are good,
then the progress of the adversary in the next epoch will be bounded
and as a result the next epoch is also good.

Finally, we prove the FruitChain/fairness argument.
Theorem 6.8 (Fairness). For a typical execution in a (ùõæ, 2ùëÖ)-
respecting environment, the protocol with recency parameter ùë†ùëôre =
3ùúÖ + Œî satisfies (ùëä0, ùúé)‚àífairness, where ùëä0 = ‚Ñì/ùõº0 + 3ùúÖ + Œî and
ùúé = 4ùúñ.

Proof. Fix ùúô, a ùúô‚àífraction honest subset H , and an honest node
holding chain C. Let ùëÜ0 = {ùë¢ : ùëü1 ‚â§ ùë¢ ‚â§ ùëü2} be a window of at least
ùëä0 consecutive slots. Let C(ùëÜ0) be the segment of C containing
PoS blocks with timestamps in ùëÜ0, let B be all PoW blocks included

in C(ùëÜ0), and ùëë be the total difficulty of all PoW blocks in B. The
proof of Lemma 6.7 observes the following facts to be used below:
‚Ä¢ Fact 1. For any PoW block ùêµ ‚àà B, ùêµ is mined after ùëü1 ‚àí 4ùúÖ ‚àí Œî.
‚Ä¢ Fact 2. For any PoW block ùêµ ‚àà B, ùêµ is mined before ùëü2 + ùúÖ.
‚Ä¢ Fact 3. If a PoW block ùêµ is mined by H after ùëü1 and before

ùëü2 ‚àí 3ùúÖ ‚àí Œî, then ùêµ ‚àà B.

Now, let ùëÜ1 = {ùë¢ : ùëü1 ‚àí (4ùúÖ + Œî) ‚â§ ùë¢ ‚â§ ùëü2 + ùúÖ}, ùëÜ2 = {ùë¢ : ùëü1 ‚â§ ùë¢ ‚â§
ùëü2‚àí(3ùúÖ+Œî)}, and ùêΩ be the set of adversary queries associated with B
in ùëÜ1. Then by Fact 1 and Fact 2, we have that all PoW blocks in B are
mined in ùëÜ1; by Fact 3, we have that all PoW blocks mined by H in ùëÜ2
are in B. Similar to the arguments in Lemma 6.7, for each query in
ùëÜ1 made by either an honest node or the adversary at slot ùëü in epoch
ùëí, the target ùëá must satisfy (1 ‚àí ùõø)ùõº0 ùëì /ùõæ 2 ‚â§ ùëùùëõùëüùëá ‚â§ (1 + ùõø)ùõæ 2 ùëì /ùõº0.
Further note that, to prove ùúé-fairness, it suffices to show that

ùê∑ H (ùëÜ2) ‚â• (1 ‚àí ùúé)ùúô (ùê∑ (ùëÜ1) + ùê¥(ùêΩ )).

Under a typical execution, we have

ùê∑ H (ùëÜ2) > (1 ‚àí ùúñ)ùëùùëõ H (ùëÜ2) ‚â• (1 ‚àí ùúñ)ùúôùëùùëõ(ùëÜ2),

and

ùê∑ (ùëÜ1) + ùê¥(ùêΩ ) < (1 + ùúñ)ùëù (‚Ñé(ùëÜ1) + |ùêΩ |) = (1 + ùúñ)ùëùùëõ(ùëÜ1).

By our choice of ùëä0, we have |ùëÜ2| ‚â• ‚Ñì/ùõº0 ‚â• ‚Ñì/ùúô. Furthermore,
we may assume |ùëÜ2| ‚â§ 2ùëÖ. This is because we may partition ùëÜ2 in
parts such that each part has size between ‚Ñì/ùõº0 and 2ùëÖ, sum over
all parts to obtain the desired bound. Then by Proposition 1, we
have

ùëõ(ùëÜ1) ‚â§ (1 +

‚â§ (1 +

ùõæ |ùëÜ1 \ ùëÜ2|
|ùëÜ2|
ùõæ (8ùúÖ + 2Œî)
‚Ñì/ùõº0

)ùëõ(ùëÜ2)

)ùëõ(ùëÜ2)

(ùê∂1)
‚â§ (1 + 2ùúñ)ùëõ(ùëÜ2).

Finally, by setting ùúé = 4ùúñ, we conclude the proof.

‚ñ°

6.2.3 Lifting argument from single-epoch to multiple-epoch. The-
orem 6.4 gives bounds for CP and ‚àÉCQ for a single-epoch run of
the protocol with static stake distribution and perfect randomness.
We now conclude our proof of Theorem 6.1 by showing that these
blockchain properties hold throughout the whole lifetime of the
system consisting of many epochs.

Theorem 6.9 (Restatement of Theorem 6.1). Fix parameters ùúÖ,
ùúÜ, ‚Ñì, ùõæ, ùúé, ùúñ, ùõø, ùëÖ and ùêø satisfying conditions (C1) and (C2). Under As-
sumption 1, Assumption 2 and assumptions (P1)-(P3), when executed
in a lock-step synchronous model (i.e., Œî-synchronous model with
Œî = 1), Minotaur constructed with Ouroboros generates a transaction
ledger that satisfies persistence and liveness throughout a period of ùêø
epochs (each with ùëÖ slots) with probability 1 ‚àí ùëÖùêø(ùëí‚àíŒ© (ùúÖ) + ùëí‚àíùúÜ).

This part of the analysis proceeds similarly as in Section 5 of [21]
and hence we only sketch it in Appendix D. Applying the improved
analysis in [5] (instead of the one in [21]), we obtain the refined
bound 1 ‚àí ùëÖùêø(ùëí‚àíŒ© (ùõø 3ùúÖ) + ùëí‚àíùúÜ) for the statement of Theorem 6.9.
In Appendix F, we analyze a private-chain attack and show a cor-
responding lower bound. It reveals that ùõø 2ùúÖ needs to be bounded
below by a constant and, consequently, the dependency on ùõø 3 can-
not be improved much further.

6.3 Security with Ouroboros Praos/Genesis
By maxvalid-bg, an honest node prefers longer chains, if the new
chain C‚Ä≤ forks less than ùëò blocks relative to the currently held chain
C. If C‚Ä≤ did fork more than ùëò blocks relative to C, C‚Ä≤ would still be
preferred if it grows more quickly in the ùë† slots following the slot
associated with the last common block of C and C‚Ä≤. In this section,
we analyze the security of the protocol with maxvalid-bg, but drop
assumption (P3) (i.e., allow bootstrapping from genesis).

Proof sketch. This part is identical to the analysis in Ouroboros
Genesis (Section 4.3-4.4 of [3]), so we only sketch it here. The proof
proceeds in two steps:

1) For an honest node ‚Ñé1 that is always online, we show that
when replacing maxvalid-mc with maxvalid-bg, the overall
execution of the protocol in ‚Ñé1‚Äôs view remains the same
except with negligible probability. That is to show that with
overwhelming probability, whenever ‚Ñé1 receives a new chain
C‚Ä≤ that forks more than ùëò blocks from ‚Ñé1‚Äôs local chain C, ‚Ñé1
will always favor C, i.e., C grows more quickly than C‚Ä≤ in
the first ùë† slots right after the fork.

2) For a newly joined node ‚Ñé2, we consider a ‚Äòvirtual‚Äô node ‚Ñé‚Ä≤
2
that holds no stake, but was participating in the protocol
since the beginning and was honest all the time. Then we
show ‚Ñé2 will always adopt the same chains as ‚Ñé‚Ä≤
2 after joining
‚ñ°
the network.

6.4 Comparison to Bitcoin
In this paragraph, we observe that Minotaur (when executed in
the pure PoW case, ùúî = 1) is more robust against fluctuations in
PoW participation than Bitcoin. In particular, we demonstrate that
Bitcoin may not enjoy liveness if the number of parties is allowed
to halve every two weeks‚Äîwhile Minotaur does. The theoretical
results of this section are accompanied by experiments; see ¬ß7.2
and Figure 5. We point out that although Bitcoin mining power has
gone up exponentially since its inception, other PoW blockchains
that use the same difficulty adjustment rule may experience such
drops in mining power.3

Consider Bitcoin for the case that, initially, there are ùëõ honest
parties and that the target is ùëá . Using the model and notation of
[16] with ùëû = 1, ùëö is the number of blocks in an epoch and ùëù = 1/2ùúÖ .
Thus, each slot is successful with probability ùëì = 1 ‚àí (1 ‚àí ùëùùëá )ùëõ ‚âà
ùëùùëá ùëõ. We will show that for ùë† = ‚åäùëö/ùëùùëá ùëõ‚åã, liveness may fail in a (2, ùë†)-
respecting environment. In such an environment, the adversary is
allowed to halve the number of parties every ùë† ‚âà ùëö/ùëì slots (note
that ùëö/ùëì is the expected duration of an epoch, which for Bitcoin is
two weeks).

The attack proceeds in stages of ùë† slots, during which the adver-
sary does not mine nor delays messages. Thus, in the beginning of
each slot all parties have a chain of the same length. The adversary
halves the number of parties at the beginning of each stage. Let ùëÅùëñ
denote the number of honest parties in stage ùëñ, with ùëÅ0 = ùëõ and
ùëÅùëñ = ùëõ/2ùëñ for ùëñ > 0. The expected number of successful slots in

3For example, ETC dropped from 19 TH/s to 1.5 TH/s in 7 months period https:
//2miners.com/etc-network-hashrate, but more impressively ERGO dropped from
23.65 to 0.5 TH/s in just 2 weeks‚Äô time https://2miners.com/erg-network-hashrate.

9

stage ùëñ is

ùë† ¬∑ [1 ‚àí (1 ‚àí ùëùùëá )ùëÅùëñ ] < ùë†ùëùùëá ùëÅùëñ =

ùë†ùëùùëáùëõ
2ùëñ ‚â§

ùëö
2ùëñ

.

Consider the stage ùëó for which

ùëò ‚àí 1 <

ùëö
2ùëó ‚â§ 2(ùëò ‚àí 1).

The expected number of blocks computed in the first ùëó stages is

New Blocks

New Transactions

PoW
Block Pool

Staker

Block
Structure
manager

Block
Structure
Database

Memory
Pool

Miner

+

ùëö
2

ùëö
2ùëó

< ùëö ‚àí ùëò + 1

ùëö
22 + ¬∑ ¬∑ ¬∑ +

ùëö
2ùëó = ùëö ‚àí
and at most ùëò ‚àí 1 in stage ùëó + 1. Recalling that the median of a
binomial distribution with mean ùúá is at most ‚åàùúá‚åâ, we obtain that
with probability at least 1/4 at most ùëö blocks have been computed
by the end of stage ùëó + 1 and at most ùëò ‚àí 1 of them have been
computed in the last stage. Assuming the liveness parameter ùë¢ < ùë†,
any transaction provided to all honest parties for the first ùë¢ slots of
the final stage, will be in depth less than ùëò. It follows that liveness
does not hold in the final stage of the attack.

Proposition 6.10. Bitcoin‚Äôs ledger does not satisfy liveness in a

(2, ùë†)-respecting environment, for any ùë¢ < ùë† and ùë† < ùëö/ùëùùëá ùëõ.

In contrast, Minotaur does not suffer from such fluctuation. In-
tuitively, this is because it inherits its security from the underlying
proof-of-stake protocol. In particular, the epochs are of fixed du-
ration, implying that target recalculation occurs regularly. This is
evident from Condition C1, which allows much greater values for
ùëÖ and ùõæ.

7 EXPERIMENTS
We implemented a prototype instantiation of a Minotaur client in
Rust and the code can be found at [25]. We also implemented Bit-
coin, FruitChain and Ouroboros clients as benchmarks. Particularly,
for better comparison we implemented the variable difficulty ver-
sion of FruitChain recently proposed in [39], which uses the same
difficulty adjustment as Bitcoin. In this section, we briefly describe
the architecture of our implementation and present experimental
results to evaluate the concrete performance of Minotaur under
different scenarios.

7.1 Architecture
We implemented the Input-Endorsers/FruitChain variant of Mino-
taur, where transactions are exclusively included in the PoW blocks.
In this way, Minotaur can potentially achieve optimal throughput
up to the capacity of the network as shown by the implementation of
Prism [40], a pure PoW consensus protocol with similar blockchain
structure. The system architecture is illustrated in Figure 4. Func-
tionally it can be divided into the following three modules:

(1) Block Structure Manager, which maintains the client‚Äôs view
of the blockchain, and communicates with peers to exchange
new blocks.

(2) Miner, which assembles new PoW blocks.
(3) Staker, which assembles new PoS blocks.

The goal of a Minotaur client is to maintain up-to-date informa-
tion of the blockchain. They are stored in the following three data
structures:

10

Figure 4: Architecture of our Minotaur client implementa-
tion.

(1) Block Structure Database, stores the graph structure of the
blockchain (i.e., a directed acyclic graph (DAG) formed with
PoW and PoS blocks).

(2) Memory Pool, stores the set of transactions that have not

been mined into any PoW block.

(3) PoW Block Pool, stores the set of PoW blocks that have not

been referenced by any PoS block.

At the core of the Block Structure Manager is an event loop
which sends and receives network messages to/from peers, and
a worker thread pool which handles those messages. When a new
block arrives, the worker thread first checks its proof-of-work/proof-
of-stake, and if valid, then proceeds to relay the block to peers that
have not received it. Next, the worker thread checks whether all
blocks referenced by the new block, e.g. its parent, are already
present in the Block Structure Database. If not, it buffers the block
in an in-memory queue and defers further processing until all the
referenced blocks have been received. Finally, the worker validates
the block (e.g., verifying transaction signatures), and inserts the
block into the Block Structure Database. If the block is a PoW block,
the Block Structure Manager checks the Memory Pool against the
transactions in this new block and removes any duplicates or con-
flicts from the Memory Pool, and also puts the block into the PoW
Block Pool.

The Miner module assembles new PoW blocks. It is implemented
as a busy-spinning loop. At the start of each round, it polls the Block
Structure Database and the Memory Pool to update the block it
is mining. When a new PoW block is mined, it will be inserted
into the Block Structure Database, then sent to peers by the Block
Structure Manager. The Memory Pool and PoW Block Pool will
also be updated accordingly.

The Staker module works similarly, but assembles new PoS
blocks. At the start of each round, it polls the Block Structure Data-
base and the PoW Block Pool to update the block it is assembling.
When a new PoS block is generated, it will be inserted into the
Block Structure Database, then sent to peers by the Block Structure
Manager. The PoW Block Pool will also be updated accordingly.

7.2 Performance under variable mining power
In ¬ß6.4, we have seen that Minotaur can survive more drastic varia-
tions of network hash power. We design the following experiment
on our Minotaur/Bitcoin/FruitChain codebase to verify this argu-
ment.

Recall that all three protocols have epoch-based target adjust-
ment rules, varying the difficulty target of block mining based on
the median inter-block time from the previous epoch. However,

Figure 5: Behavior of Bitcoin, FruitChain and Minotaur under
decreasing mining power. When the total mining power is
halved every two minutes, the main chains of Bitcoin and
FruitChain stop growing as they can never reach the epoch
size (400 blocks), while the number of PoW blocks refer-
enced by the main chain grows linearly in Minotaur.

the epoch length in Minotaur is defined as a fixed number of slots
instead of a fixed number of blocks (e.g., 2016 blocks in Bitcoin).
This definition makes sense in Minotaur because the main-chain
blocks, which are PoS blocks, always have accurate timestamps
(even if they are proposed by an adversary). In this experiment,
we will see that this small change allows Minotaur to enjoy better
liveness than Bitcoin and FruitChain when the total mining power
is decreasing.

In our experiment, we set the epoch length in Bitcoin/FruitChain
to be 400 blocks and the expected duration of an epoch is 2 minutes;
while the epoch length of Minotaur is 2 minutes and the expected
number of blocks in a epoch is 400 blocks. Then Bitcoin, FruitChain
and Minotaur are experiencing the same mining power variation,
i.e., starting with an insufficient mining rate (100 blocks per minute)
and then halving the mining rate every epoch (2 minutes in the
experiments). From Figure 5, we can see that the mining target
never has a chance to be adjusted in Bitcoin/FruitChain as the
length of the main chain can never reach 400 blocks, which leads
to a liveness failure; while the mining targets are adjusted every
epoch (2 minutes) in Minotaur to make sure that the number of
PoW blocks referenced by the main chain grows linearly.

7.3 Performance under attacks
In the following experiments, we evaluate how Minotaur performs
in the presence of active attacks. Specifically, we consider three
types of attacks: private chain, spamming and selfish mining attacks.
At a high level, a private chain attack aims to violate the persistence
of the protocol. Spamming attack aims to reduce network through-
put, while selfish mining aims to compromise the PoW fairness of
the protocol (i.e., reducing the work stake of honest miners).
Private chain attack. In a private chain attack, an attacker tries
to privately generate an alternate chain faster than the public hon-
est chain to displace a confirmed block [26] (e.g., a block buried
ùëò-deep in the longest chain). In a pure PoW/PoS protocol (e.g., Bit-
coin/Ouroboros), an attacker with majority of mining/stake power
can always succeed with the private chain attack, no matter how

11

Figure 6: Longest private chain in private attacks with var-
ious adversarial stake fraction ùõΩùë† and adversarial mining
power fraction ùõΩùë§ on Minotaur, Ouroboros Praos, and Bitcoin.
When ùõΩùë† + ùõΩùë§ < 1 and either ùõΩùë† or ùõΩùë§ is close to 1, the private
chain in Minotaur is way shorter, meaning that it remains
secure whereas Ouroboros Praos and Bitcoin are insecure.

large the confirmation depth is. In contrast, Minotaur can survive
such an attack, as long as the honest players control a majority of
the combined resources.

To verify this key security property, we implemented the private
chain attack on our code base, where an attacker can have various
combinations of stake and mining power. The experiments of the
private chain attack are as follows: the attacker (with ùõΩùë† fraction of
stake and ùõΩùë§ fraction of mining power) tries to generate a private
chain starting at a specific block (e.g., the first block in some epoch)
to overwrite the honest public chain when the private chain be-
comes longer. We run the attack for one epoch and count the length
of the longest private chain (pruning honest blocks in the prefix if
there is any) whose length is no less than that of the honest chain
generated at the same time. Note that the maximum length of the
private chain in a successful attack reflects the minimum confirma-
tion depth that is needed to guarantee security of the protocol. We
chose ùúî = 0.5 with a total PoS block rate being 1.58 block/s and
a total PoW block rate being 2.70 block/s for Minotaur. Parame-
ters ùõΩùë† and ùõΩùë§ are both iterated in [0, 1] with a step size of 0.1 for
Minotaur experiments, and we present the results as a 2D heatmap
in Figure 6. We also launched the same attack on Ouroboros Praos
(Bitcoin resp.), where the attacker controls ùõΩùë† fraction of stake (ùõΩùë§
fraction of mining power resp.) and the results are shown as 1D
heatmaps in Figure 6. In these experiments, block generation is set
to the same rate as PoS block rate in Minotaur experiments. For
each data point, we repeated the experiments 10 times and took an
average to minimize randomness effects. From Figure 6 we observe
that as long as ùõΩùë† + ùõΩùë§ < 1, the attacker can only succeed with very
short private chain even when either ùõΩùë† or ùõΩùë§ is close to 1, while
Ouroboros Praos and Bitcoin would need ùõΩùë† < 0.5 and ùõΩùë§ < 0.5
respectively. This provides empirical evidence that Minotaur is
better than pure PoW or PoS protocols in term of security.
Spamming attack. In a spamming attack, attackers flood the net-
work with conflicting transactions. Among a bunch of conflicting

sOuroboros Praos0.00.20.40.60.81.00.00.20.40.60.81.0Minotaur020406080100120140wBitcoinAttacker‚Äôs power
ùõΩùë§

ùëù = 1

ùëù = 0.7

Bitcoin
FruitChain
Minotaur
Bitcoin
FruitChain
Minotaur

0.75
0
0
0.248
0
0
0.248

Fraction of PoW blocks
0.50
0.007
0.011
0.498
0.098
0.056
0.499

0.33
0.513
0.661
0.665
0.618
0.665
0.666

0.67
0
0.007
0.332
0.001
0.003
0.333

0.25
0.669
0.739
0.746
0.72
0.753
0.750

Figure 7: Normalized spam in 4-node experiments with ad-
ditional peer-to-peer latency. Spam is reduced mostly under
various additional latencies.

transactions, at most one of them could be executed successfully. For
example, in an account model, transactions with identical sender
and nonce are conflicting transactions. Compared to Bitcoin, the
Input-Endorsers/FruitChain variant of Minotaur cannot ensure
that no conflicting transactions enter the transaction ledger since
PoW are mined before picked by main chain. Therefore, goodput
(i.e., throughput of successfully executed transactions) of Minotaur
transaction ledger will be comprised if conflicting transactions en-
ter PoW blocks. To mitigate this attack, we propose a spam filter
that operates as follows: a miner validates transactions with respect
to the transaction ledger, PoW blocks that haven‚Äôt been picked by
main chain, and preceding pending transactions of this miner. In
this way, if one of the conflicting transactions enters a PoW block
and propagated throughout the network before other conflicting
ones enter a PoW block, miners will filter out other conflicting
transactions and increase goodput.

We implemented the spam filter and did experiments with four
nodes in a line topology. Our metrics is normalized spam, which is
the count of unsuccessfully executed transactions normalized by
the count of transactions in ledger. In our experiments, we make
transaction generators create conflicting transactions on purpose,
and send them to two nodes sitting at the ends of the line topology.
And other nodes receive non-conflicting transactions. Hence, with-
out any spam precaution, normalized spam is 0.25. We set the block
generation rate to be 0.44 block/s for PoS blocks and 1.39 block/s
for PoW blocks. The results of our experiments with additional
peer-to-peer latency is shown in Figure 7, and we observe that al-
though normalized spam increases as additional latency increases,
it is still lower than that without spam filter. The highest spam
in our experiments is 0.063, far lower than 0.25. Noticed that in
that experiment we apply an additional peer-to-peer latency of
0.3s, which is larger than most peer-to-peer latency in Bitcoin and
Ethereum [22]. This means that our spam filter can reduce spam to
a minimal effect.
Selfish mining attack. It has been known that Bitcoin is vulnera-
ble to the selfish mining attack [13, 27, 35], where a selfish miner
withhold its mined blocks and release them later at an appropriate
time to take the place of honest blocks in the longest chain. This
attack hurts the fairness of the protocol, in the sense that the self-
ish miner with ùõΩùë§ fraction of mining power can have more than
ùõΩùë§ faction of blocks in the main chain so that it will reap higher

12

Table 2: Fractions of honest PoW blocks (or fruits) in
the main chain under selfish mining attacks in Bit-
coin/FruitChain/Minotaur. In these experiments, the attacker
controls ùõΩùë§ fraction of mining power and the tie breaking
rule favors the attacker‚Äôs block with probability ùëù.

revenue. The FruitChain protocol [30] was proposed as a solution
to selfish mining. We observe that the selfish mining attack will
not work on Minotaur Since it has similar blockchain structure as
FruitChain. Moreover, Minotaur will achieve fairness even when
ùõΩùë§ ‚â• 0.5 (as long as there is an honest super-majority in actual
stake), while FruitChain would fail. To verify these observations,
we implemented the following selfish mining attacks on our Bit-
coin/FruitChain/Minotaur code base:

‚Ä¢ On Bitcoin: The selfish miner always mines on the block at the
tip of the longest chain, whether the chain is private or public.
Upon successful mining, the adversary maintains the block
in private to release it at an appropriate time. In particular,
when an honest miner publishes a block, the selfish miner will
release a previously mined block at the same level (if it has
one).

‚Ä¢ On FruitChain: The selfish miner plays the same withholding-
and-releasing strategy on its main-chain blocks as above, while
its main-chain blocks contain fruits mined by itself exclusively.
‚Ä¢ On Minotaur: The selfish miner plays the same withholding-
and-releasing strategy on its PoS blocks as above, while its PoS
blocks contain PoW blocks mined by itself exclusively.

We assume honest nodes will choose the attacker‚Äôs block with
probability ùëù whenever there is a tie. In our experiments, we set
ùëù > 0.5 to simulate the case that the attacker has better network
connection than honest nodes so its blocks are usually transmitted
faster. Table 2 presents fractions of PoW blocks (or fruits) in the
main chain of Bitcoin/FruitChain/Minotaur under various adver-
sarial power (combinations of ùõΩùë§ and ùëù). On Minotaur, the attacker
controls 1/3 of the virtual stake, i.e., ùúîùõΩùë§ + (1 ‚àí ùúî)ùõΩùë† = 1/3, where
ùõΩùë† is the fraction of the actual stake controlled by the attacker. In
Table 2, we can see that Bitcoin is indeed vulnerable to selfish min-
ing, meaning that the attacker has more fraction of PoW blocks
in the main chain (and thus more block rewards in Bitcoin) than
its fraction of mining power, particularly when ùõΩùë§ ‚â• 0.5; and
FruitChain only resists the attack when ùõΩùë§ < 0.5. Meanwhile, in
Minotaur, the attacker can only have ùõΩùë§ faction of PoW blocks in
the main chain, no matter how much mining power it has (even
when ùõΩùë§ ‚â• 0.5), and how the network favors it. This property is
crucial to the security of Minotaur as we have seen in ¬ß6.2.2.

0.00.10.20.3Additional peer-to-peer latency (seconds)0.000.050.100.150.200.25Normalized spam0.0030.0320.0450.063With spam filterWithout spam filterepochs. We note that we can relax this initial constraint harmoniz-
ing even the initial two epochs with the rest of the execution by
employing the smooth-interpolation technique (¬ß4, Idea 2) where
work blocks are mined based on 2-for-1 PoW [18] producing both,
main-chain blocks (at a rate defined by ùúî) and endorser blocks
(at a sufficient rate to guarantee fairness). This allows to start the
protocol with any initial weighing by means of ùúî. We do not pursue
this further as, (I) for most practical purposes we expect the present
construction to be sufficient as is (namely it will be reasonable to
launch Minotaur with PoW ‚Äúturned off‚Äù, at ùúî = 0 and then begin
to incrementally adjust ùúî to higher values at some time after two
epochs), and, (II) as explained in ¬ß4, the analysis of the variation
described above that allows ùúî > 0 from launch will follow in a
straightforward manner from the forkable string analysis and input-
endorser technique of [3, 21] as well as the fairness argument of
[32]. This is because the main difficulty in the analysis of PoW/PoS
hybrid protocols is dealing with variable difficulty ‚Äî and adopting
the ùúî = 0 convention for the initial two epochs allows us to focus
on that.
Generalization to multiple resources. Following the idea in [38],
Minotaur can be extended to more than two resources. In contrast
to their construction, this is achievable without fundamentally
changing the structure of the protocol.

Assume ùëÄ ‚â• 1 different resources, and for each such resource, an
independent lottery mechanism among the contributors to assign
‚Äòsuccesses‚Äô proportionally to a party‚Äôs ratio of the total contributed
resource. Defining a fixed amount of virtual stake ùëâ and weights
ùúîùëñ > 0, (cid:205)ùëÄ
ùëñ=1 ùúîùëñ = 1, we have resource ùëñ control ùúîùëñ ¬∑ ùëâ of the virtual
stake. During each epoch ùëí, the different lotteries are run concur-
rently, wherein each success allows for the release of a respective
block (to be eventually picked up by a block of the main chain), tied
to the respective resource.

Main-chain block leadership for epoch ùëí + 2 is assigned to re-
source ùëñ based on relative virtual stake ùúîùëñ , and further split among
the contributors of that resource based on their production of re-
spective ‚Äòresource blocks‚Äô during epoch ùëí. Naturally, this protocol
tolerates

ùëÄ
‚àëÔ∏Å

ùëñ=1

ùúîùëñ ùõΩùëñ <

1
2

,

(1)

where ùõΩùëñ ‚àà [0, 1] is the fraction of resource ùëñ held by the adversary.
A pictorial example for ùëÄ = 3 is given in Figure 9.

Although the underlying blockchain protocol is PoS-based, stake
(in the classical, non-virtual sense) is not required to be one of the ùëÄ
resources, i.e., the protocol can be run solely on virtual stake. Also,
full adversarial control of some of the resources can be tolerated as
long as Eq. (1) is satisfied.

Finally, note that the resources can also be of the same type,
e.g., Minotaur can combine work emanating from different hash
functions such as SHA256, scrypt, and ethash‚Äîanswering an open
question raised in ¬ß1.
Fairness with respect to the combined resources. Fairness with
respect to PoW blocks (Definition 8) is a crucial property of Mino-
taur to guarantee fair assignment of work stake to the miners.
However, this is not sufficient for aspects like fair reward shar-
ing [32], since, for this purpose, fairness needs to be achieved for
overall block production with respect to the combined resources.

Figure 8: An example of variable weighing parameter ùúî in
Minotaur. Suppose the value of ùúî changes from 1/2 to 2/5 at
the onset of epoch ùëí0 + 1. Then the adversarial stake/mining
power needs to be restricted below the red line in epochs
ùëí ‚â§ ùëí0 ‚àí 1 and below the blue line in epochs ùëí ‚â• ùëí0 ‚àí 1. In
particular, the adversary is restricted by both lines in epoch
ùëí0 ‚àí 1. When ùúî changes smoothly over time, it is reasonable
to assume exactly this.

8 DISCUSSION
Variable weighing parameter. In our security analysis, we as-
sume a fixed weighing parameter ùúî through the whole execution of
the protocol. However, we point out that ùúî can change over time as
long as we put proper assumptions on the adversarial stake/mining
power. Suppose ùúî (ùëí) is the weighing parameter of epoch ùëí, i.e.,
the ratio of work stake and actual stake in epoch ùëí is set to be
ùúî (ùëí)/(1 ‚àí ùúî (ùëí)). Note that the function ùúî (ùëí) may be decided by
the protocol designers and hard-coded in the genesis block, but
the players can also reach an agreement (off-chain) to update it by
doing a soft fork.

We give a brief security sketch, deferring the full analysis to
future work. Recall that, in our protocol, the virtual stake of a
player in epoch ùëí composes of two parts: the actual stake drawn
from the last PoS block in epoch ùëí ‚àí 2; and the work stake that is
proportional to the amount of work it produced during epoch ùëí ‚àí 2.
Thus, to guarantee the security in epoch ùëí, we need the adversary to
be (1/2‚àí2ùúé, 2ùëÖ, ùúî (ùëí))-bounded (see Def. 2) in epoch ùëí ‚àí2 and epoch
ùëí ‚àí1. And similarly, the adversary needs to be (1/2‚àí2ùúé, 2ùëÖ, ùúî (ùëí +1))-
bounded in epoch ùëí ‚àí 1 and epoch ùëí. Therefore, the adversarial
stake/mining power must be restricted by both above bounds for
epoch ùëí ‚àí 1. As long as ùúî (ùëí + 1) does not differ too much from ùúî (ùëí),
this restriction on the adversary is reasonable to assume, and the
weighing parameter can transit smoothly from ùúî (ùëí) to ùúî (ùëí + 1).
Figure 8 gives an example of how the assumptions shift when ùúî (ùëí)
is updated at the onset of epoch ùëí0 + 1.

We point out that such flexible weighing between work and stake
is very useful in practice. For example, in general, PoS blockchains
are easy to launch with existing techniques, such as proof- of
burn [20], initial coin offering [24] and airdrop [1]. Therefore, Mino-
taur can be launched as a pure PoS blockchain and later transit into
a hybrid PoW/PoS one or a pure PoW blockchain. In addition, the
security of Minotaur can be enhanced by assigning higher weight
to the more decentralized resource.
Removing the initial constraint. As discussed in ¬ß2, we use an
honest majority of stake without relying on PoW for the two initial

13

ùõΩ2 [ùúî2 = 1
3 ]

1

[5] Blum, E., Kiayias, A., Moore, C., Quader, S., and Russell, A. The combinatorics
of the longest-chain rule: Linear consistency for proof-of-stake blockchains. In
Proceedings of the 2020 ACM-SIAM Symposium on Discrete Algorithms, SODA
2020, Salt Lake City, UT, USA, January 5-8, 2020 (2020), S. Chawla, Ed., SIAM,
pp. 1135‚Äì1154.

1 ùõΩ1 [ùúî1 = 1
4 ]

1
ùõΩ3 [ùúî3 = 5
12 ]

Figure 9: Tolerable resource corruption for ùúî = ( 1
12 ).
The volume enclosed by the gray surfaces is tolerated by the
protocol: (cid:205)3

3 , 5

4 , 1

ùëñ=1 ùúîùëñ ùõΩùëñ < 1
2 .

We note that fairness with respect to the combined resources can
be achieved by scheduling endorser blocks for every involved re-
source, including stake. A given epoch reward can now be shared
by assigning an ùúîùëñ fraction of the reward to the contributors of the
ùëñ-th resource, and distributing each such fraction proportionally to
the parties‚Äô contributions of endorser blocks for that resource.
In comparison to
Comparison to state-of-the-art protocols.
previous hybrid PoW-PoS protocols, [11] already generalized the
conditions under which a permissionless blockchain can be securely
operated by combining PoW and PoS. Our paper improves over [11]
by demonstrating how to tolerate a strictly better bound, i.e., any
adversarial minority of the combined resources, and furthermore
proving this bound tight, thus settling the hybrid PoW-PoS question.
We also note that Minotaur‚Äôs performance is comparable to

previous state-of-the-art protocols:

‚Ä¢ State-of-the-art PoS. As Minotaur resembles a PoS protocol
(while operating on virtual stake derived from PoW), the only over-
head it introduces over its underlying PoS protocol is the extra
(insignificant) effort required for virtual-stake conversion‚Äîwhich
impacts system throughput or transaction latency only marginally.
The performance of our explicit Minotaur construction, based on
Ouroboros, is thus directly inherited from the Ouroboros protocol.
‚Ä¢ State-of-the-art PoW. Note that Nakamoto-style PoS mimics
the workings of PoW Nakamoto consensus and thus yields similar
stochastics as in the PoW case, and thus also comparable perfor-
mance characteristics.

9 ACKNOWLEDGEMENTS
We would like to thank Thomas Kerber and Alexander Russell for
insightful discussions.

This research is supported in part by the US National Science
Foundation under grants CCF-1705007 and CNS-1718270 and the
US Army Research Office under grant W911NF1810332.

REFERENCES
[1] Airdrop. https://en.bitcoinwiki.org/wiki/Airdrop.
[2] Back, A. Hashcash‚Äîa denial of service counter-measure.
[3] Badertscher, C., Ga≈æi, P., Kiayias, A., Russell, A., and Zikas, V. Ouroboros
Genesis: Composable proof-of-stake blockchains with dynamic availability. In
Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications
Security (2018), pp. 913‚Äì930.

[4] Bentov, I., Lee, C., Mizrahi, A., and Rosenfeld, M. Proof of activity: Extending
bitcoin‚Äôs proof of work via proof of stake [extended abstract] y. ACM SIGMETRICS
Performance Evaluation Review 42, 3 (2014), 34‚Äì37.

14

[6] Buterin, V., and Griffith, V. Casper the friendly finality gadget. arXiv preprint

arXiv:1710.09437 (2017).

[7] Chen, L., Xu, L., Gao, Z., Lu, Y., and Shi, W. Protecting early stage proof-of-work
based public blockchain. In 2018 48th Annual IEEE/IFIP International Conference on
Dependable Systems and Networks Workshops (DSN-W) (2018), IEEE, pp. 122‚Äì127.
[8] David, B., Ga≈æi, P., Kiayias, A., and Russell, A. Ouroboros Praos: An adaptively-
secure, semi-synchronous proof-of-stake blockchain. In Annual International
Conference on the Theory and Applications of Cryptographic Techniques (2018),
Springer, pp. 66‚Äì98.

[9] Dembo, A., Kannan, S., Tas, E. N., Tse, D., Viswanath, P., Wang, X., and
Zeitouni, O. Everything is a race and nakamoto always wins. In Proceedings
of the 2020 ACM SIGSAC Conference on Computer and Communications Security
(2020), pp. 859‚Äì878.

[10] Duong, T., Chepurnoy, A., Fan, L., and Zhou, H.-S. Twinscoin: A cryptocur-
In Proceedings of the 2nd ACM

rency via proof-of-work and proof-of-stake.
Workshop on Blockchains, Cryptocurrencies, and Contracts (2018), pp. 1‚Äì13.
[11] Duong, T., Fan, L., Katz, J., Thai, P., and Zhou, H.-S. 2-hop blockchain: Com-
bining proof-of-work and proof-of-stake securely. In European Symposium on
Research in Computer Security (2020), Springer, pp. 697‚Äì712.

[12] Ethereum.

Ethash.

https://web.archive.org/web/20220105100244/

https://eth.wiki/en/concepts/ethash/ethash, 2022.

[13] Eyal, I., and Sirer, E. G. Majority is not enough: Bitcoin mining is vulnerable.
In International conference on financial cryptography and data security (2014),
Springer, pp. 436‚Äì454.

[14] Feller, W. An Introduction to Probability Theory and Its Applications, Volume 2.
An Introduction to Probability Theory and Its Applications. Wiley, 1967.
[15] Garay, J., and Kiayias, A. Sok: A consensus taxonomy in the blockchain era. In
Cryptographers‚Äô Track at the RSA Conference (2020), Springer, pp. 284‚Äì318.
[16] Garay, J., Kiayias, A., and Leonardos, N. The bitcoin backbone protocol with
chains of variable difficulty. In Annual International Cryptology Conference (2017),
Springer, pp. 291‚Äì323.

[17] Garay, J. A., Kiayias, A., and Leonardos, N. The bitcoin backbone protocol:
Analysis and applications. In Advances in Cryptology - EUROCRYPT 2015 - 34th
Annual International Conference on the Theory and Applications of Cryptographic
Techniques, Sofia, Bulgaria, April 26-30, 2015, Proceedings, Part II (2015), E. Oswald
and M. Fischlin, Eds., vol. 9057 of Lecture Notes in Computer Science, Springer,
pp. 281‚Äì310.

[18] Garay, J. A., Kiayias, A., and Leonardos, N. Full analysis of nakamoto consensus
in bounded-delay networks. IACR Cryptol. ePrint Arch. 2020 (2020), 277.
[19] Karakostas, D., and Kiayias, A. Securing proof-of-work ledgers via check-
pointing. In 2021 IEEE International Conference on Blockchain and Cryptocurrency
(ICBC) (2021), IEEE, pp. 1‚Äì5.

[20] Karantias, K., Kiayias, A., and Zindros, D. Proof-of-burn. In International
Conference on Financial Cryptography and Data Security (2020), Springer, pp. 523‚Äì
540.

[21] Kiayias, A., Russell, A., David, B., and Oliynykov, R. Ouroboros: A provably
secure proof-of-stake blockchain protocol. In Annual International Cryptology
Conference (2017), Springer, pp. 357‚Äì388.

[22] Kim, S. K., Ma, Z., Murali, S., Mason, J., Miller, A., and Bailey, M. Measuring
ethereum network peers. In Proceedings of the Internet Measurement Conference
2018 (2018), pp. 91‚Äì104.

[23] King, S., and Nadal, S. Ppcoin: Peer-to-peer crypto-currency with proof-of-stake.

self-published paper, August 19, 1 (2012).

[24] Li, J., and Mann, W. Initial coin offering and platform building. SSRN Electronic

Journal (2018), 1‚Äì56.

[25] Minotaur.

Rust implementation of the minotaur consensus protocol.

https://github.com/xuechao2/Minotaur.

[26] Nakamoto, S. Bitcoin: A peer-to-peer electronic cash system. Decentralized

Business Review (2008), 21260.

[27] Nayak, K., Kumar, S., Miller, A., and Shi, E. Stubborn mining: Generalizing
selfish mining and combining with an eclipse attack. In 2016 IEEE European
Symposium on Security and Privacy (EuroS&P) (2016), IEEE, pp. 305‚Äì320.
[28] Neu, J., Tas, E. N., and Tse, D. Ebb-and-flow protocols: A resolution of the
availability-finality dilemma. In 2021 IEEE Symposium on Security and Privacy
(SP) (2021), IEEE, pp. 446‚Äì465.

[29] NIST. Fips 180-2. http://csrc.nist.gov/encryption/tkhash.html, 2002.
[30] Pass, R., Seeman, L., and Shelat, A. Analysis of the blockchain protocol in
asynchronous networks. In Annual International Conference on the Theory and
Applications of Cryptographic Techniques (2017), Springer, pp. 643‚Äì673.

[31] Pass, R., and Shi, E. Hybrid consensus: Efficient consensus in the permissionless

model. Cryptology ePrint Archive (2016).

[32] Pass, R., and Shi, E. Fruitchains: A fair blockchain. In Proceedings of the ACM

Symposium on Principles of Distributed Computing (2017), pp. 315‚Äì324.

[33] Percival, C., and Josefsson, S. The scrypt password-based key derivation
function. IETF Draft URL: http://tools. ietf. org/html/josefsson-scrypt-kdf-00. txt
(accessed: 30.11. 2012) (2016).

[34] Sankagiri, S., Wang, X., Kannan, S., and Viswanath, P. Blockchain cap theo-
rem allows user-dependent adaptivity and finality. arXiv preprint arXiv:2010.13711
(2020).

[35] Sapirshtein, A., Sompolinsky, Y., and Zohar, A. Optimal selfish mining
strategies in bitcoin. In International Conference on Financial Cryptography and
Data Security (2016), Springer, pp. 515‚Äì532.

[36] Shevtsova, I. G. Moment-type estimates with an improved structure for the
accuracy of the normal approximation to distributions of sums of independent
symmetric random variables. Theory of Probability & Its Applications 57, 3 (2013),
468‚Äì496.

[37] Stewart, A., and Kokoris-Kogia, E. Grandpa: a byzantine finality gadget. arXiv

preprint arXiv:2007.01560 (2020).

[38] Thai, P., Njilla, L., Duong, T., Fan, L., and Zhou, H.-S. A generic paradigm
for blockchain design. In Proceedings of the 15th EAI International Conference
on Mobile and Ubiquitous Systems: Computing, Networking and Services (2018),
pp. 460‚Äì469.

[39] Wang, X., Muppirala, V. V., Yang, L., Kannan, S., and Viswanath, P. Se-
curing parallel-chain protocols under variable mining power. arXiv preprint
arXiv:2105.02927 (2021).

[40] Yang, L., Bagaria, V., Wang, G., Alizadeh, M., Tse, D., Fanti, G., and
Viswanath, P. Prism: Scaling bitcoin by 10,000 x. arXiv preprint arXiv:1909.11261
(2019).

APPENDIX
A SECURITY REGIONS OF HYBRID
PROTOCOLS IN FIGURE 1B

We give details of the security regions plotted in Figure 1b. Recall
that ùõΩùë§ is the proportion of adversarial hash power and ùõΩùë† is the
proportion of the adversarial stake (or the proportion of Byzantine
nodes if a permissioned BFT protocol is adopted).
2-hop blockchain. We derived the security region from the as-
sumptions in Theorem 2&3 of [11]. When Œî = 0 (which gives
the largest security region), the security proof of [11] assumes
(1 ‚àí ùõΩùë§)(1 ‚àí ùõΩùë† ) > ùõΩùë† , i.e., ùõΩùë† < 1‚àíùõΩùë§
2‚àíùõΩùë§
Checkpointed ledger. [19] uses a synchronous BFT protocol (with
1/2 fault tolerance) to regularly issuing checkpoints on a PoW
longest chain. The protocol is proven to be safe and live when
ùõΩùë† < 1/2.
Finality gadgets. [6, 28, 34, 37] use an asynchronous/partial syn-
chronous BFT protocol (with 1/3 fault tolerance) to build a finality
gadget/layer on the top of a PoW longest chain to achieve impor-
tant properties such as finality (a.k.a deterministic safety under
asynchrony) and accountability. These protocols are proven to be
safe and live when ùõΩùë† < 1/3 and ùõΩùë§ < 1/2.

implying ùõΩùë† < 1/2.

B MATHEMATICAL FACTS

Theorem B.1 (from [18]). Let (ùëã1, ùëã2, . . .) be a martingale with
respective the sequence (ùëå1, ùëå2, . . .), if an event ùê∫ implies ùëãùëò ‚àíùëãùëò‚àí1 ‚â§
ùëè and ùëâ = (cid:205)ùëò ùë£ùëéùëü [ùëãùëò ‚àí ùëãùëò‚àí1|ùëå1, . . . , ùëåùëò‚àí1] ‚â§ ùë£, then for non-
negative ùëõ and ùë°

ùëÉ (ùëãùëõ ‚àí ùëã0 ‚â• ùë°, ùê∫) ‚â§ ùëí

‚àí ùë° 2
2ùë£+

2ùëèùë°
3

.

The following is known as the Berry-Esseen Theorem. See [14]
as a standard reference and [36] for improvements with respect to
the constant 1/2.

Theorem B.2. Let the ùëãùëñ be independent variables with common
distribution such that E[ùëãùëñ ] = ùúá, V[ùëãùëñ ] = ùúé2 > 0, E[|ùëãùëñ ‚àí ùúá|3] =

15

ùúå < ‚àû. If ùêπùëõ is the distribution of (ùëã1 + ¬∑ ¬∑ ¬∑ + ùëãùëõ ‚àí ùúáùëõ)/
the standard normal, then

|ùêπùëõ (ùë•) ‚àí Œ¶(ùë•)| ‚â§

,

for all ùë• and ùëõ.

ùúå
2ùúé3‚àö
ùëõ

‚àö
ùëõùúé2 and Œ¶

C A LONG RANGE ATTACK
We point out that Minotaur is insecure with the longest chain rule
due to a long range attack. Let the weighing parameter ùúî = 0.5
and define ùëì to be PoS block production rate by a stakeholder who
controls all actual stake in the system. Suppose the adversary con-
trols 0.8 fraction of stake and 0.1 fraction of mining power at some
slot (not at the beginning of the execution), then after behaving
honestly for some time, the adversary will control 0.8 fraction of
actual stake and 0.1 fraction of work stake at the beginning of some
epoch ùëí. Now, the adversary starts to grow a private chain C1, while
honest nodes grow a public chain C2. Suppose C1 and C2 include
the same set of transactions. Then at the beginning of epoch ùëí + 2,
the adversary will control 0.8 fraction of actual stake and all the
work stake (after normalization) on its chain C1 because C1 only
refers adversarial PoW blocks in epoch ùëí. So the growth rate of C1
after epoch ùëí + 2 will be 0.8ùëì + ùëì = 1.8ùëì . Similarly, at the beginning
of epoch ùëí + 2, honest nodes will control 0.2 fraction of actual stake
and all the work stake (after normalization) on the chain C2 and
the growth rate of C2 after epoch ùëí + 2 will be 0.2ùëì + ùëì = 1.2ùëì .
Therefore, C1 will catch up with C2 eventually if the longest chain
rule is adopted. See Figure 10.

This long range attack is similar to the stake grinding attack
on Ouroboros and it can be prevented by the new chain selection
rules maxvalid-mc and maxvalid-bg. For maxvalid-mc, honest nodes
won‚Äôt accept C1 because it forks too long from C2; for maxvalid-bg,
honest nodes won‚Äôt accept C1 because it grows slower than C2 in
epoch ùëí (right after the fork).

D PROOF FOR ¬ß6

Proof of Lemma 6.6. The proof for (a) is the same as part (a) of
Theorem 1 in [18]. For (b), by the condition, for each query in ùëÜ
made by either an honest node or the adversary at slot ùëü in epoch
ùëí, the target ùëá must satisfy (1 ‚àí ùõø)ùõº0 ùëì /ùõæ 2 ‚â§ ùëùùëõùëüùëá ‚â§ (1 + ùõø)ùõæ 2 ùëì /ùõº0
Therefore, the proof is also similar to part (a) of Theorem 1 in [18].
For (c), let the execution be partitioned into parts such that
each part has at least ‚Ñì/ùúô and at most ùë† = 2ùëÖ slots. We prove
that the statement fails with a probability less than ùëí‚àíùúÜ for each
part. Let ùêΩ denote the queries made by H in slots ùëÜ. We have
|ùêΩ | = ùëõ H (ùëÜ) = ùúôùëõ(ùëÜ). For ùëò ‚àà [|ùêΩ |], let ùëçùëñ be the difficulty of
any block obtained from query ùëó ‚àà ùêΩ and we write E ùëó‚àí1 for the
execution just before this query. Then

ùëã0 = 0

ùëãùëò =

‚àëÔ∏Å

ùëçùëñ ‚àí

‚àëÔ∏Å

E[ùëçùëñ |Eùëñ‚àí1]

ùëñ ‚àà [ùëò ]
is a martingale with respect to E0, . . . , Eùëò . We have

ùëñ ‚àà [ùëò ]

ùëãùëò ‚àí ùëãùëò‚àí1 = ùëãùëò ‚àí E[ùëãùëò |Eùëò‚àí1] = ùëçùëò ‚àí E[ùëçùëò |Eùëò‚àí1]
‚â§ ùõæ 3ùëù‚Ñé(ùëÜ)/(1 ‚àí ùõø)ùõº0 ùëì |ùëÜ |

‚â§

=

1
ùëáùëò

ùëù‚Ñéùëò
ùëù‚Ñéùëòùëáùëò

‚â§ ùõæ 3ùëùùëõ(ùëÜ)/(1 ‚àí ùõø)ùõº0 ùëì |ùëÜ | := ùëè.

Figure 10: A long range attack on the longest chain rule.

Similarly

ùëâ =

=

‚àëÔ∏Å

ùëò
‚àëÔ∏Å

ùëò

ùë£ùëéùëü [ùëãùëò ‚àí ùëãùëò‚àí1|Eùëò‚àí1] ‚â§

E[ùëç 2

ùëò |Eùëò‚àí1]

‚àëÔ∏Å

ùëò

ùëùùëáùëò

1
ùëá 2
ùëò

‚â§ ùõæ 3ùëù2|ùêΩ |‚Ñé(ùëÜ)/(1 ‚àí ùõø)ùõº0 ùëì |ùëÜ |

‚â§ ùõæ 3ùëù2|ùêΩ |ùëõ(ùëÜ)/(1 ‚àí ùõø)ùõº0 ùëì |ùëÜ | := ùë£.

Let the deviation ùë° = ùúñùëù |ùêΩ | = ùúñùúôùëùùëõ(ùëÜ), then we have ùëè =

ùõæ 3ùë° 2
(1‚àíùõø)ùõº0ùúñ 2ùúô ùëì |ùëÜ |

and ùë£ =
applying Theorem B.1 to ‚àíùëã |ùêΩ |, we have

. Using the minimum value of |ùëÜ | is ‚Ñì/ùúô and

ùõæ 3ùë°
(1‚àíùõø)ùõº0ùúñùúô ùëì |ùëÜ |

ùëÉ [ùê∑ (ùëÜ) < (1 ‚àí ùúñ)ùëùùëõ H (ùëÜ)] ‚â§ exp(‚àí

ùúñùë°
2ùëè (1 + ùúñ/3)

) ‚â§ exp(‚àíùúÜ).

This concludes the proof.

Let ùëÜ1 = {ùë¢ : ùëü1 ‚àí (4ùúÖ + Œî) ‚â§ ùë¢ ‚â§ ùëü2 + ùúÖ}, ùëÜ2 = {ùë¢ : ùëü1 ‚â§ ùë¢ ‚â§
ùëü2 ‚àí (3ùúÖ + Œî)}, and ùêΩ be the set of adversary queries associated with
B in ùëÜ1. Then by Fact 1 and Fact 2, we have all PoW blocks in B are
mined in ùëÜ1; by Fact 3, we have all PoW blocks mined by honest
nodes in ùëÜ2 are in B. Hence, ùê∑ (ùëÜ2) ‚â§ ùê∑ùëí‚àí1 ‚â§ ùê∑ (ùëÜ1) + ùê¥(ùêΩ ). By
Proposition 2, for each query in ùëÜ1 made by an honest node at slot
ùëü in epoch ùëí, the target ùëá must be ùëáùëí , so we have (1 ‚àí ùõø)ùõº0 ùëì /ùõæ 2 ‚â§
ùëù‚Ñéùëüùëá ‚â§ (1 + ùõø)ùõæ 2 ùëì . For each query in ùêΩ made by the adversary
at slot ùëü in epoch ùëí, the target ùëá may be either ùëáùëí‚àí1 or ùëáùëí , still we
have (1 ‚àí ùõø)ùõº0 ùëì /ùõæ 2 ‚â§ ùëù‚Ñéùëüùëá ‚â§ (1 + ùõø)ùõæ 2 ùëì in both cases (under a
(ùõæ, 2ùëÖ)-respecting environment). By the fact that ùõº0ùëõùëü ‚â§ ‚Ñéùëü ‚â§ ùëõùëü ,
we have (1 ‚àí ùõø)ùõº0 ùëì /ùõæ 2 ‚â§ ùëùùëõùëüùëá ‚â§ (1 + ùõø)ùõæ 2 ùëì /ùõº0.

Under a typical execution, we have

ùê∑ (ùëÜ2) > (1 ‚àí ùúñ)ùëù‚Ñé(ùëÜ2),

and

‚ñ°

Proof of Lemma 6.7. We prove the lemma by induction. For
epoch ùëí = 1, it is trivial to just set ùëá1 = ùëì /ùëù Àú‚Ñé1 by Assumption 1.2.
Now we assume all epochs are good until epoch ùëí ‚àí 1 (ùëí ‚â• 2), we
will show epoch ùëí is good.

Let ùëÜ0 = {ùë¢ : ùëü1 ‚â§ ùë¢ ‚â§ ùëü2} be the window that will be used
to determine ùëáùëí , i.e., ùëü1 = max (0, (ùëí ‚àí 2)ùëÖ ‚àí ùúÖ) + 1 and ùëü2 = (ùëí ‚àí
1)ùëÖ ‚àí ùúÖ. Let C(ùëÜ0) be the segment of C containing PoS blocks with
timestamps in ùëÜ0, let B be all PoW blocks included in C(ùëÜ0), and
ùëë be the total difficulty of all PoW blocks in B. Then we have the
following facts:

‚Ä¢ Fact 1. For any PoW block ùêµ ‚àà B, ùêµ is mined after ùëü1 ‚àí4ùúÖ ‚àíŒî.
Indeed by recency condition, ùêµ must refer to a confirmed PoS
block ùêµùë† with timestamp at least ùëü1 ‚àí ùë†ùëôre. By ‚àÉCQ, the last
honest ancestor block of ùêµùë† has timestamp at least ùëü1 ‚àíùë†ùëôre ‚àíùúÖ.
So ùêµ must be mined after ùëü1 ‚àí 4ùúÖ ‚àí Œî.

‚Ä¢ Fact 2. For any PoW block ùêµ ‚àà B, ùêµ is mined before ùëü2 +
ùúÖ. Indeed the PoS block (denoted as ùêµùë† ) including ùêµ has
timestamp at most ùëü2, and again by ‚àÉCQ, the first honest
descendant block of ùêµùë† has timestamp at most ùëü2 + ùúÖ. So ùêµ
must be mined before ùëü2 + ùúÖ.

‚Ä¢ Fact 3. If a PoW block ùêµ is mined by an honest miner after ùëü1
and before ùëü2 ‚àí 3ùúÖ ‚àí Œî, then ùêµ ‚àà B. Indeed, by ‚àÉCQ, the last
honest block in C(ùëÜ0) has timestamp at least ùëü2 ‚àíùúÖ. Hence by
Lemma 6.5, all honest PoW blocks mined after ùëü1 and before
ùëü2 ‚àí ùúÖ ‚àí ùëüwait will be included into a PoS block in C(ùëÜ0).

ùê∑ (ùëÜ1) + ùê¥(ùêΩ ) < (1 + ùúñ)ùëù (‚Ñé(ùëÜ1) + |ùêΩ |)

= (1 + ùúñ)ùëùùëõ(ùëÜ1) ‚â§ (1 + ùúñ)ùëù‚Ñé(ùëÜ1)/ùõº0.

Therefore, by Proposition 1, we have

(1 ‚àí ùúñ)ùëù‚Ñé (ùëí) |ùëÜ2|/ùõæ < ùê∑total

ùëí‚àí1 < (1 + ùúñ)ùõæùëù‚Ñé (ùëí) |ùëÜ1|/ùõº0.

By the difficulty adjustment rule, we have ùëáùëí = ùëì |ùëÜ0|/ùê∑total
ùëí‚àí1 .

Then ùëáùëí can be bounded as follows:

ùëù‚Ñé (ùëí)ùëáùëí ‚â•

‚Ä¢ Lower bound:
ùõº0 ùëì
|ùëÜ0|
(1 + ùúñ)|ùëÜ1|
ùõæ
(1 ‚àí ùúñ)(ùëÖ ‚àí ùúÖ)
ùëÖ + 4ùúÖ + Œî
‚â• (1 ‚àí ùúñ)3 ùõº0 ùëì
ùõæ

‚â•

‚â•

ùõº0 ùëì
ùõæ

(1 ‚àí ùúñ)|ùëÜ0|
|ùëÜ0| + 5ùúÖ + Œî
(ùê∂1)
‚â•

ùõº0 ùëì
ùõæ
(1 ‚àí ùúñ)(ùëÖ ‚àí ùúñùëÖ)
ùëÖ + ùúñùëÖ
(ùê∂2)
‚â• (1 ‚àí ùõø)

ùõº0 ùëì
ùõæ

ùõº0 ùëì
ùõæ
ùõº0 ùëì
ùõæ

.

‚â• (1 ‚àí 4ùúñ)

‚Ä¢ Upper bound:

ùëù‚Ñé (ùëí)ùëáùëí ‚â§

|ùëÜ0|
(1 ‚àí ùúñ)|ùëÜ2|

ùõæ ùëì =

|ùëÜ0|
(1 ‚àí ùúñ)(|ùëÜ0| ‚àí 3ùúÖ ‚àí Œî)

ùõæ ùëì

‚â§

=

ùëÖ ‚àí ùúÖ
(1 ‚àí ùúñ)(ùëÖ ‚àí 4ùúÖ ‚àí Œî)

ùõæ ùëì

(ùê∂1)
‚â§

ùëÖ
(1 ‚àí ùúñ)(ùëÖ ‚àí ùúñùëÖ)

ùõæ ùëì

1
(1 ‚àí ùúñ)2

ùõæ ùëì ‚â§

1
1 ‚àí 2ùúñ

ùõæ ùëì ‚â§ (1 + 4ùúñ)ùõæ ùëì

(ùê∂2)
‚â§ (1 + ùõø)ùõæ ùëì .

This concludes the proof.

‚ñ°

16

Proof sketch of Theorem 6.9. When moving from the single-
epoch setting to the multiple-epoch setting, two new aspects need
to be considered.

‚Ä¢ Virtual stake distribution updates. For epochs ùëí = 1, 2,
the virtual stake has the same distribution as the initial stake.
Since we assume the initial stake has honest majority (As-
sumption 1.1), by Theorem 6.4, CP and ‚àÉCQ are guaran-
teed in epochs 1&2. For epoch ùëí ‚â• 3, the virtual stake of a
node ‚Ñé composes of two parts, the actual stake recorded on
the blockchain up to the last block of the epoch ùëí ‚àí 2 (by
Ouroboros [21]) and the work stake decided by the amount
of work ‚Ñé has contributed in epoch ùëí ‚àí 2. Let ùëÜùë† and ùëÜùë§
be the total actual stake and total work stake in epoch ùëí.
Recall that we set ùúîùëÜùë† = (1 ‚àí ùúî)ùëÜùë§ in Minotaur, i.e., the
total virtual stake is ùëÜùë£ = ùëÜùë† /(1 ‚àí ùúî). Denote that the ad-
versary controls ùõΩùë†ùëÜùë† actual stake and let ùõΩùë§ be maximum
fraction of adversarial mining power in epoch ùëí ‚àí 2, i.e.,
ùõΩùë§ = 1‚àíminùëü ‚àà [ (ùëí‚àí3)ùëÖ+1,(ùëí‚àí2)ùëÖ ] (‚Ñéùëü /ùëõùëü ). By Assumption 2.1,
we have ùúîùõΩùë§ + (1 ‚àí ùúî)ùõΩùë† ‚â§ 1/2 ‚àí 2ùúé. And by Theorem 6.8,
honest nodes control at least (1 ‚àí ùúé)(1 ‚àí ùõΩùë§)ùëÜùë§ work stake
for epoch ùëí. Therefore, the virtual stake controlled by the
adversary is at most

ùõΩùë†ùëÜùë† + (1 ‚àí (1 ‚àí ùúé)(1 ‚àí ùõΩùë§))ùëÜùë§

= ((1 ‚àí ùúî)ùõΩùë† + ùúî (ùõΩùë§ + ùúé (1 ‚àí ùõΩùë§))))ùëÜùë£
‚â§ (1/2 ‚àí ùúé)ùëÜùë£ .

Therefore, by an induction argument, we can guarantee an
honest majority in the virtual stake for all epochs. The anal-
ysis critically relies on the fact that the CP property is im-
mutable: specifically, when all honest parties agree on a
common prefix C (ùë° ) at some slot ùë° and, as maxvalid-mc can
only revise the last ùëò blocks of a currently adopted chain,
C (ùë° ) will be a prefix of all future chains held by the honest
parties. Check the proof of Theorem 5.3 in [21] for details.
‚Ä¢ Randomness updates. Every epoch needs new public ran-
domness to be used for sampling slot leaders from the above
virtual stake distribution. In Ouroboros [21], elected slot lead-
ers (one per slot) from epoch ùëí ‚àí 1 runs a publicly verifiable
secret sharing (PVSS) protocol to generate the randomness
for epoch ùëí. The core idea is the following: given that we
have guaranteed that an honest majority among elected lead-
ers in epoch ùëí will hold with very high probability, we have
that the PVSS protocol suitably simulates a beacon with the
relaxation that the output may become known to the adver-
sary before it is known to the honest parties. However, as
long as the distribution of virtual stake is determined prior
to this leakage, the sampling of leaders in epoch ùëí will still
be unbiased.

At last, by our definition, the CP property with parameter ‚Ñìùëêùëù = ùúÖ
is equivalent to the persistence of the ledger (when the confirmed
ledger is defined as C ‚åàùúÖ ). Meanwhile, the CP property with parame-
ter ‚Ñìùëêùëù = ùúÖ, together with the ‚àÉCQ property with parameter ‚Ñìùëêùëû = ùúÖ,
implies liveness with parameter ùë¢ = 2ùúÖ. Indeed, for a chain C held
by an honest node at slot ùëü , there must be at least one honest block
ùêµ‚àó in C ‚åàùúÖ with timestamp in [ùëü ‚àí 2ùúÖ, ùëü ‚àí ùúÖ] (by ‚àÉCQ), then any
transaction that appears before ùëü ‚àí 2ùúÖ should be included by either

17

ùêµ‚àó or its ancestors, thus the transaction should be confirmed (by
‚ñ°
CQ/persistence).

E DETAILS ON THE OUROBOROS PROTOCOL

FAMILY

We give a summary of the different PoS protocols we explicitly
base our generic hybridization construction on in the main part
of the paper, Ouroboros Classic [21], Praos [8], and Genesis [3]. In
order of this sequence, each version of the protocol gives stronger
security guarantees.

We first give quick summaries of the respective protocol guaran-
tees and their underlying assumptions. Finally, in Appendix E.1, we
give a more detailed description of Ouroboros Praos as the reference
protocol; and sketch how the other variants differ from it.

Ouroboros Classic. Classic is secure against a minority of adver-

sarially controlled stake under the following assumptions:

Network. The communication network is synchronous.
Corruption. The adversary is ‚Äòmoderately‚Äô adaptive (participant

corruption only takes effect after a certain delay).

Stake shift. There is an upper bound on the stake shift, i.e., the
stake distribution among the stake holders does not change
too fast.

Offline tolerance. The protocol participants only go offline for

short periods of time.

Ouroboros Praos assumptions: Praos is secure against a minority
of adversarially controlled stake under the following assumptions:

Network. The communication network is semi-synchronous, i.e.,
that the network delay is bounded bu some delay Œî not
known to the participants.

Corruption. The adversary is fully adaptive.
Stake shift. As in Classic.

Ouroboros Genesis assumptions: Classic is secure against a mi-
nority of adversarially controlled stake among all participants who
are active in the system‚Äîunder the following assumptions:

Network. As in Praos.
Corruption. As in Praos.
Offline tolerance. The protocol participants can join later during
any stage of the protocol, or go offline for extended periods
of time during participation.

E.1 Ouroboros Praos
The protocol proceeds in epochs of ùëÖ slots, each slot representing
a given ‚Äòunit of time‚Äô, say, 1 second of the protocol run-time. For
ease of exposition, let the genesis block represent epoch 0 of the
protocol. We now describe how the protocol operates per epoch
ùëí > 0.

Slot-leader election. During each slot slùëó , a slot-leader election is
held among the stakeholders, and a winning stakeholder is allowed
to publish a new block associated with this slot.

The slot-leader election during epoch ùëí is based on the stake
distribution at the end of epoch max(0, ùëí ‚àí 2), i.e., the stake distri-
bution that results after the processing of the last block of epoch
ùëí ‚àí 2 (or the stake distribution from the genesis block).

F ANALYSIS TIGHTNESS
The analysis of our main security theorem, Theorem 6.1, draws from
[21]. A more careful and improved analysis appears in [5], from
which we may obtain the refined bound 1 ‚àí ùëÖùêø(ùëí‚àíŒ© (ùõø 3ùúÖ) + ùëí‚àíùúÜ) for
the statement of Theorem 6.1. In this section we analyze a private
chain attack and show a corresponding lower bound. It reveals that
ùõø 2ùúÖ needs to be bounded below by a constant and, consequently,
the dependency on ùõø 3 cannot be improved much further.

Proposition 3. Common prefix does not hold against a (1/2 ‚àí
ùõø, ùëö, ùúî)-bounded adversary, for ùõø ‚â§ 1/‚àöÔ∏Å‚Ñìcp and sufficiently large ‚Ñìcp.
Proof. The adversary follows the protocol using his mining
power to produce PoW blocks. The attack begins when the virtual
stake of the adversary is ùúîùõΩùë§ + (1 ‚àí ùúî)ùõΩùë† ‚â• 1

2 ‚àí ùõø.

Define the random variable ùëãùëñ taking values in {‚àí1, 0, 1} accord-
ing to who produced blocks of height ùëñ. If it was the adversary only,
then ùëãùëñ = 1; if both the adversary and honest parties, then ùëãùëñ = 0;
if honest parties only, then ùëãùëñ = ‚àí1. Let ùëù = 1 ‚àí (1 ‚àí ùëì )1/2+ùõø and
ùëû = 1 ‚àí (1 ‚àí ùëì )1/2‚àíùõø . We have

Pr[ùëãùëñ = ‚àí1] = ùëù (1 ‚àí ùëû)/ùëì ,
Pr[ùëãùëñ = 1] = ùëû(1 ‚àí ùëù)/ùëì ,
Pr[ùëãùëñ = 0] = ùëùùëû/ùëì .

and

Note that the adversary will create a fork of length ùëò, if ùëã1 + ¬∑ ¬∑ ¬∑ +
ùëãùëò ‚â• 0. We will use the Berry-Esseen bound to lower bound the
probability he succeeds. To that end we compute

ùúá = E[ùëãùëñ ] = (ùëû ‚àí ùëù)/ùëì = [(1 ‚àí ùëì )1/2+ùõø ‚àí (1 ‚àí ùëì )1/2‚àíùõø ]/ùëì

= [(1 ‚àí ùëì )1+ùõø ‚àí (1 ‚àí ùëì )1‚àíùõø ]/[ùëì (1 ‚àí ùëì )1/2]
> [(1 ‚àí ùëì )1+ùõø ‚àí (1 ‚àí ùëì )1‚àíùõø ]/ùëì > ‚àí2ùõø,

ùëñ ] ‚àí ùúá2 = 1 ‚àí ùëùùëû/ùëì ‚àí ùúá2 > 1 ‚àí ùëì ‚àí 4ùõø 2,

ùúé2 = E[ùëã 2
ùúå = E[|ùëãùëñ ‚àí ùúá|3] < (1 + 2ùõø)3.
Observe that for ùõø ‚â§ 1/3 and ùëì ‚â§ 1/9.

‚àö

Let ùêπùëò = (ùëã1 + ¬∑ ¬∑ ¬∑ +ùëãùëò ‚àí ùúáùëò)/

we have that, for ùõø ‚â§ 1/
Pr(cid:104)

ùêπùëò ‚â• ‚àíùúáùëò/

ùëò,
‚àöÔ∏Åùëòùúé2(cid:105)

‚àö

ùëòùúé2. By the Berry-Essen Theorem

‚â• Œ¶ùëê (cid:0)3) ‚àí ùëÇ (cid:0)ùëò‚àí1/2(cid:1).

‚ñ°

Although it might be possible to strengthen the above attack and
analysis to obtain slight improvements, it remains an open question
whether the exponential drop in the probability of security failure
is in the order of ùõø 3ùúÖ or ùõø 2ùúÖ.

Let ùõºùëñ be the relative stake held by stake holder Pùëñ (holding ùõºùëñ ¬∑ ùëÜ
of the total stake ùëÜ) at the end of epoch max(ùëí ‚àí 2, 0). Per slot, the
probability ùëùùëñ for stakeholder Pùëñ to be a block leader is defined as

ùëùùëñ = ùúô ùëì (ùõºùëñ )

‚ñ≥
= 1 ‚àí (1 ‚àí ùëì )ùõºùëñ

(2)

for some appropriate active-slots coefficient ùëì (the probability that,
among the total stake, at least one slot leader is elected during any
given slot).

Slot leadership is pseudo-randomly assigned based on the epoch
nonce ùúÇ, a seed calculated in epoch ùëí ‚àí1 (as described further below).
To become a slot leader for slot slùëö, the stakeholder Pùëñ evaluates a
verifiable random function (VRF) (bound to a public key registered
by Pùëñ ) (ùë¶, ùúã) = VRFùëñ (ùúÇ, slùëö). Slot leadership is satisfied iff

!
< ùëá ‚ñ≥

= 2‚ÑìVRF ¬∑ ùúô ùëì (ùõºùëñ ),

ùë¶

where VRFùëñ produces outputs of ‚ÑìVRF bits, and ùëá is a threshold to
enforce the desired probabilities.

Block production. Besides a hash of its predecessor and the pay-

load, a block contains

‚Ä¢ the slot number ùëö;
‚Ä¢ the above proof of leadership (ùë¶, ùúã) (such that ùë¶ < ùëá );
‚Ä¢ an additional, independent, VRF output (ùë¶ùúå, ùúãùúå ) contributing

to the epoch-nonce generation; and

‚Ä¢ a signature on (ùëö, (ùë¶, ùúã), (ùë¶ùúå, ùúãùúå )) by Pùëñ of a key-evolving

signature scheme (KES).4

Block settlement. A block is considered settled if it sits at least ùëò
blocks deep in a node‚Äôs main chain where ùëò is the prefix parameter
of the protocol.

Chain selection rule: maxvalid-mc. Upon the arrival of a new
block, each node chooses, as their main chain, the longest chain
that does not fork from the previous main chain by more than ùëò
blocks where ùëò is the prefix parameter.

Epoch-nonce generation. The epoch nonce ùúÇ for epoch ùëí > 1 is
computed as a hash of all VRF outputs ùë¶ùúå included in the blocks
of the main chain up to 2/3 of epoch ùëí ‚àí 1. The epoch nonce for
epoch ùëí = 1 is included in the genesis block.

E.2 Differences in Classic and Genesis

Classic. The main difference to Praos is that the epoch random-
ness is obtained from a coin-flip protocol based on a publicly verifi-
able secret sharing protocol‚Äîwith the disadvantage that the leader
schedule is public and thus allows for adaptive corruption.

Genesis. Genesis differs from Praos by applying a different chain
selection rule to allow protocol participants to be offline for ex-
tended periods of time. The modified chain-selection rule maxvalid-
bg works as follows: A longer chain is adopted if

‚Ä¢ it forks from the current main chain by at most ùëò blocks; or
‚Ä¢ if forks by more than ùëò blocks but contains more blocks in
the ùë† slots following the last common block of the main chain
and the longer chain.

4The stakeholders update the private keys of their KES instance after every slot.

18

