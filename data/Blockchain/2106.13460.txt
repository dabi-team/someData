Demo: CLOAK: A Framework For Development of
Conﬁdential Blockchain Smart Contracts

Qian Ren∗ Han Liu∗ Yue Li∗ Hong Lei∗†
∗Oxford-Hainan Blockchain Research Institute
Hainan, China
†School of Computer Science and Cyberspace Security, Hainan University
Hainan, China

1
2
0
2

n
u
J

5
2

]

R
C
.
s
c
[

1
v
0
6
4
3
1
.
6
0
1
2
:
v
i
X
r
a

Abstract—In recent years, as blockchain adoption has been
expanding across a wide range of domains, e.g., digital asset,
supply chain ﬁnance, etc., the conﬁdentiality of smart contracts is
now a fundamental demand for practical applications. However,
while new privacy protection techniques keep coming out, how
existing ones can best ﬁt development settings is little studied.
Suffering from limited architectural support in terms of pro-
gramming interfaces, state-of-the-art solutions can hardly reach
general developers.

In this paper, we proposed the CLOAK framework for develop-
ing conﬁdential smart contracts. The key capability of CLOAK is
allowing developers to implement and deploy practical solutions
i.e., transact with
to multi-party transaction (MPT) problems,
secret inputs and states owned by different parties by simply
specifying it. To this end, CLOAK introduced a domain-speciﬁc
annotation language for declaring privacy speciﬁcations and
further automatically generating conﬁdential smart contracts
to be deployed with trusted execution environment (TEE) on
blockchain. In our evaluation on both simple and real-world
applications, developers managed to deploy business services on
blockchain in a concise manner by only developing CLOAK smart
contracts whose size is less than 30% of the deployed ones.

Index Terms—Blockchain, Smart contract privacy, Trusted

execution environment

I. INTRODUCTION

With the rapid development of both permissionless and
permissioned blockchains, privacy issues have now become
one of the top concerns for smart contracts, i.e., keep trans-
action input and contract states as secrets to non-relevant
participants. In many of the practical applications, privacy is
an essential property to achieve, e.g., avoid malicious arbitrage
on cryptocurrency, protect sensitive information in a cooper-
ative business etc.. Unfortunately, despite the importance of
smart contract privacy, most of the existing blockchains are
designed without privacy by nature [10]. For example, miners
of Ethereum verify transactions in a block by re-executing
them with the exact input and states. Consequently, private
data is shared in the entire network.
Conﬁdential Smart Contract. To address the aforementioned
problem, researchers have proposed a variety of solutions in
recent years to the design of conﬁdential smart contract. In
general, these approaches fall into two categories based on
cryptography techniques and trusted hardware, respectively.
For the former class of approaches, techniques including ring
signature, homomorphic encryption and zero-knowledge proof

Fig. 1: A simpliﬁed multi-party transaction scenario

(ZKP) are adopted to achieve anonymity and privacy [1]–
[3], [7]. For the latter, Trusted Execution Environment (TEE),
e.g., Intel SGX, is commonly used to provide conﬁdentiality
and trustworthiness [4], [8]. More speciﬁcally, TEE is able to
reveal sealed transactions and execute them in enclaves to hide
input and contract states with a veriﬁable endorsement from
the hardware manufacture.
Limitations. However, while both classes of solutions provide
architectural capabilities to enforce conﬁdential lifecycles of
transactions, they are non-sufﬁcient for the development of
practical applications. Figure 1 describes a scenario of pro-
curement bidding among multiple enterprises in the setting
of supply chain applications. Speciﬁcally, each participant
submits its secret bid and a core enterprise decides a winner
with the lowest bid. The core enterprise pays the second-lowest
bid to the winner instead of the lowest one through updates on
its balance. For cryptography-based solutions, developers are
required to implement a set of off-chain multi-party compu-
tation programs and on-chain veriﬁcation smart contracts, as
indicated by [3]. On the other hand, TEE-based solutions allow
developers to implement general smart contracts with secrets
owned by only one side in a single transaction. Consequently,
the implementation needs to process one source of conﬁdential
bid input at a time, cache intermediate bids and generate
ﬁnal states when bidding completes. To sum up, conﬁdential
smart contracts in the literature can hardly ﬁt in the practical
development of multi-party applications.

 
 
 
 
 
 
Fig. 2: The overall workﬂow of CLOAK

Multi-party Transaction.
In this demo paper, we formalized
the Multi-party Transaction (MPT) problem on blockchain
for the ﬁrst time and designed the CLOAK framework as a
practical solution to it. CLOAK enables developers to develop
and deploy conﬁdential smart contracts in an MPT application
by simply specifying it. Speciﬁcally, CLOAK allows developers
to annotate privacy invariants as annotations in contract source
code. It checks the privacy speciﬁcation consistency and then
generates deployable smart contract on blockchain. The main
contributions of this work are as follows:

• We formalized the Multi-party Transaction (MPT) problem
on blockchain for the ﬁrst time, which transacts with secret
inputs and states owned by different parties.

• We developed a framework, CLOAK, which allows devel-
opers to annotate privacy invariants, including MPT, as an-
notations in smart contracts, and generate privacy-compliant
deployable code.

• We conducted a preliminary evaluation on real-world con-
tracts with different privacy scenarios. The result shows the
easy to use, high efﬁciency, and low cost of CLOAK.

Demonstration Plan. Our demonstration will showcase the
capabilities of CLOAK in handling real-world data privacy is-
sues. The detailed plan includes i) an automatic type checking,
compilation, and deployment process, ii) in-depth explanation
of the domain-speciﬁc annotation language, generated deploy-
able code, and debug skills when developing with CLOAK iii)
more comparative tests on representative contracts and privacy
scenarios.

II. MULTI-PARTY TRANSACTION

We propose a new smart contract data privacy problem in
blockchain called Multi-party Transaction (MPT): For n(n ∈
Z∗ ∧ n > 1) parties, an MPT takes input xi from each party i
and C(s), which is the cryptography commitment of contract
old state s, e.g., the hash or encryption result of s, etc.. Then,
it runs the speciﬁed function f , publishes committed output
ri, a proof p and committed contract new state C(s(cid:48)).

f (x1, x2, ..., xn, C(s)) ⇒ C(r1), C(r2), ..., C(rn), C(s(cid:48)), p

An MPT should satisfy following two attributes:
• Conﬁdentiality: Each party i knows ri without knowing
{xj, rj|i (cid:54)= j} except what can be derived from xi, ri itself.

i should also know state s or s(cid:48) only when it’s owned and
provided by him.

• Veriﬁability: With p, all nodes could verify that the com-
mitment of new state C(s(cid:48)) and return value C(ri) is
the correct result of a function f , which takes unknown
{xj|j = 1..n ∧ j (cid:54)= i} from n(n ∈ Z∗ ∧ n > 1) parties and
old state s, which is committed by on-chain C(s).
MPT is different from Multi-party Computation (MPC).
In MPC, even though all MPC participants acknowledge the
transaction and record the result on a blockchain, it is hard
for other nodes to verify it. Consequently, other nodes regard
it as normal immutable data, making the MPC results lose
widespread trust. In contrast, MPT achieves the same level of
security and ﬁnal consistency as smart contracts with proofs.

III. THE CLOAK FRAMEWORK

To handle the MPT problem, we designed a CLOAK frame-
work. Figure 2 shows the workﬂow of CLOAK. It mainly
divides into two phase, development and deployment. In the
development phase, developers ﬁrst annotate privacy invariants
in Solidity smart contract intuitively to get CLOAK smart
contract. Annotation Checker checks the annotation to
make sure the privacy invariants are correct. The core of the
development phase is Cloak Engine, in which the Code
Generator, Policy Generator, and Compilation Core
generate veriﬁer contract, service contract, and privacy conﬁg.
All generated code will be deployed to blockchains with TEE-
Blockchain Architecture, e.g., Oasis [4], CCF [9], etc..

A. Develop Conﬁdential Smart Contract

Annotate Privacy Invariants. Developers could annotate
variable owner in the declaration statement to one of the {all,
me, id, tee}. The all means public; me means the msg.sender;
id is declared variable in type address;
tee means any
registered address of SGX with CLOAK runtime.

With CLOAK, users could intuitively specify the MPT
in Figure 1 as a CLOAK smart contract, the .cloak ﬁle in
Listing 1. In line 1,
the developer could declare the key
of balances as a temporary variable k, then speciﬁes the
corresponding value is owned by the account with address k,
e.g., balances[tenderer] is only known by the tenderer
in line 23. In line 2, the developer speciﬁes mPrice should
be public. In line 6-7,
to handle an uncertain number of
suppliers, the developer declares owners p and speciﬁes the

3

4

5

6

7

8

9

10

11

12

13

14

15

16

17

18

19

20

21

22

23

24

owners’ owned data separately in two dynamic arrays. In line
10, the return value sPrice is owned by the winner. In
line 12-13, the developer reveal private data to another owner,
which is forced by CLOAK to avoid unconsciously leaking
privacy. In line 14-24, it computes the lowest price, the second
lowest price, and the winner. The computation is based on
the operation between private data from different parties, e.g.,
bids[i] < sPrice, balances[tenderer] += sPrice.

1 contract SupplyChain {
2

mapping(address !k => uint @k) balances;
uint @all mPrice;

function biddingProcure(
address[!p] parties,
uint[@p] bids,
address tenderer

) public
returns (address winner, uint @winner sPrice) {

winner = parties[0];
uint mPrice = reveal(bids[0], all);
sPrice = reveal(bids[0], winner);
for (uint i = 1; i < parties.length; i++) {

if (bids[i] < mPrice) {

winner = parties[i];
sPrice = mPrice;
mPrice = bids[i];

} else if (bids[i] < sPrice) {

sPrice = bids[i];

}

}
balances[tenderer] -= sPrice;
balances[winner] += sPrice;

}

25
26 }

Listing 1: CLOAK smart contract of bidding procurement

Annotation Checker.
Taking a CLOAK smart contract,
CLOAK ignores the annotation to checks the Solidity vali-
dation ﬁrst. Then, CLOAK builds an Abstract Syntax Tree
(AST) for further analysis. It infers data owner and checks
the privacy invariants. It
traversals the AST in post-order
and updates each parent node’s owner op = ol ∪ or. The
ol and or is the owner set of the left and right child node
respectively. CLOAK recognizes a function as an MPT if
T EE ∈ o or |o \ {all}| ≥ 2. The latter means the function
will take private data from different parties. Then, CLOAK
checks privacy invariants consistency. For example, CLOAK
prohibits developers from implicitly assigning their private
data to variables owned by others.

B. Deploy Conﬁdential Smart Contract

Policy Generator. With checked AST, Policy Generator
generates a privacy conﬁg P for the contract. P simpliﬁes
and characterizes the privacy invariants. Typically, P includes
variables with data type and owners. It also includes ABI,
a read-write set of each function. Speciﬁcally, P records
each function’s characteristics from four aspects, inputs, read,
mutate and return. The inputs includes its parameters with
speciﬁed data type and owner; read records state variables
the function read in execution; mutate records the contract
states it mutated; return records the return variables. Since P
has recorded the details of state variables in the head, e.g.,

data type and owner, Policy Generator leaves the variable
identities in read, mutate and return.
Code Generator.
Code Generator generates a service
contract F and a veriﬁer contract V . While leaving the
computation logic in F , Code Generator generates V to
verify the result and update the state. In V , Code Generator
ﬁrst imports a pre-deployed CLOAK TEE registration contract,
which holds a list of registered SGXs with CLOAK runtime.
Then CLOAK transforms each MPT function in .cloak into a
new function in V , which veriﬁes the MPT proof p and assigns
new state C(s(cid:48)) later.
CLOAK Client.

With conﬁgured nodes IP and ports by developers, CLOAK
deploys the conﬁdential smart contract runtime to TEE-
Blockchain Architecture to get trusted CLOAK executors Es.
The runtime includes VM and a Enc/Dec Module. Then,
CLOAK deploys a SGX registration contract on the blockchain
and registers the Es’ certiﬁcate. For each CLOAK smart
contract, CLOAK will deploys generated P and F to Es and
V to the blockchain separately.

When a participant proposes an MPT, each participant i
provides the xi to SDK. xi will be encrypted and sent to Es.
According to deployed P , Es wait for all private inputs,
synchronize the read state, construct a transaction, and exe-
cute it in enclaves. Then, Es encrypt return values and mutated
states according to return and mutate. Finally, Es announce
a result transaction on-chain with an MPT proof p. The p is
Es’ signature, i.e., p = SigE < P, F, C(s), C(ri), C(s(cid:48)) >.
It means compliant to P , Es conﬁdentially execute F with
private inputs xi and old state s committed by C(s) in
enclaves, commit return value ri and new state s(cid:48) to get result
C(ri), C(s(cid:48)). Upon receiving the announcement transaction
with proof, all nodes and V could believe an MPT real
happened and get the result.

IV. PRELIMINARY EVALUATION

We conducted a preliminary evaluation of CLOAK on 9 con-
tracts. The 9 contracts vary from scenarios, privacy invariants
and have representative LOC in Ethereum smart contract [6].

TABLE I: The LOC of code before and after using CLOAK.
the number of Functions (public, private, MPT) ; the LOC of
CLOAK smart contract; the whole generated veriﬁer contract
Vall; generated service contract F, veriﬁer contract V and
privacy conﬁg P for MPTs

Name

#Functions

#CLOAK

#Vall

PowerGrid
Bidding
SupplyChain
Scores
Insurance
ERC20Token
YunDou
Oracle
HTLC

4(1, 1, 2)
4(0, 2, 2)
6(0, 5, 1)
6(0, 2, 4)
8(2, 3, 3)
11(4, 4, 3)
14(10, 0, 4)
22(19, 0, 3)
39(31, 0, 8)

25
44
68
77
89
112
279
326
1029

146
148
249
239
356
347
501
413
852

MPT related

#F

23
38
36
57
52
56
166
93
429

#V

126
123
145
211
271
218
361
190
401

#P

72
102
85
174
199
173
345
196
443

Programming Simplicity. Table I shows the LOC of privacy-
compliant code before and after using CLOAK. Speciﬁcally,
for MPT functions, while developers simply annotate in
Solidity contract, CLOAK generates a total of 2.97-9.61X
LOC, including 0.73-5.47X veriﬁer contract LOC in Solidity
and 1.03-3.13X privacy conﬁg in JSON. Therefore, CLOAK
signiﬁcantly reduces the development complexity of privacy
in cryptography understanding and code implementation.
Performance.
It costs CLOAK less than 1s to compile 8
contracts, while the biggest contract HTLC takes 5s. This is
completely acceptable.
Gas Cost.
In Figure 3, for a total of 27 MPT in 9 contracts,
the transformed MPTs cost 0.8X to original no privacy trans-
actions on average. Speciﬁcally, the lowest one is 0.35X. The
highest cost in the last 8 is 1.25X. Overall, running transactions
on transformed contracts are feasible at a moderate cost.

Fig. 3: Gas cost of MPT before and after CLOAK

V. DEMONSTRATION DESCRIPTION

Currently, for simplicity, we implement the CLOAK frame-
work for a TEE-Blockchain Architecture consists of Ethereum
and SGX simulators. It is a command-line tool and requires
dependencies including ANTLR 3.82, Python 3.8, and solc [5]
0.5.17. A simple command to run CLOAK is:

$ cloak -i example.cloak -o out_dir
Speciﬁcally, cloak is a running script to start CLOAK. -i
specify the input CLOAK smart contract, .cloak. -o specify the
output directory to store generated code. In the demonstration,
we use two use cases. i.e., basic development and deployment
and annotation debugging. The ﬁrst helps developers under-
stand the basic capabilities of CLOAK; the second shows ﬁne-
grained info of .cloak which is critical in debugging.
Use Case 1: Basic Development and Deployment. Developers
i.e., a
use CLOAK on a supplied CLOAK smart contract,
contract with annotated private data and data owner. First,
we go through the source code of the speciﬁed contract with
developers and introduce its metadata. Next, a participant will
start the compilation of CLOAK with the basic conﬁguration.
We let the participant monitor the runtime logs generated
by CLOAK in annotation checking. When it ﬁnishes policy
and code generation, CLOAK will display an overview of the

compilation process, e.g., the private data and its owner, the
function type recognized, the time used, etc.. Furthermore, we
go into details of each function with developers and explain
why CLOAK recognizes the function as a public, private, or
MPT function. The developers can see the speciﬁc privacy
statement resulting in the recognized function type and check
whether the Privacy Config is expected.

Additionally, by using SDK, developers could deploy
the generated veriﬁer contract on a local Ganache-driven
blockchain, the runtime, service contract, and privacy conﬁg
in an SGX simulator. When it’s done, they can send an MPT
cooperating with two parties to know how it works and make
sure it is privacy compliant.
Use Case 2: Annotation Debugging. This case focuses
on debugging privacy invariant annotation when developing
CLOAK smart contracts. We provide a group of CLOAK smart
contracts with different errors. Developers can learn about de-
bugging by ﬂexibly using different commands to ﬁne-grained
control the CLOAK behavior. For example, developers could
additionally use -s/--solc to ignore the CLOAK annotation
and check the Solidity validation. -t specify the CLOAK just
doing annotation checking and report privacy conﬁg. --debug
specify CLOAK to show more compilation details, i.e., the
time used in annotation checking and code generation of
each function, the hash of generated veriﬁer contract, service
contract, privacy conﬁg, and runtime.

REFERENCES

[1] Sean Bowe, Alessandro Chiesa, Matthew Green, Ian Miers, Pratyush
Mishra, and Howard Wu.
ZEXE: Enabling Decentralized Private
Computation. 2020 IEEE Symposium on Security and Privacy (SP),
00:947–964, 2020.

[2] Benedikt B¨unz, Shashank Agrawal, Mahdi Zamani, and Dan Boneh.
Zether: Towards privacy in a smart contract world. In Joseph Bonneau
and Nadia Heninger, editors, Financial Cryptography and Data Security,
pages 423–443, Cham, 2020. Springer International Publishing.

[3] Lorenzo Cavallaro, Johannes Kinder, XiaoFeng Wang, Jonathan Katz,
Samuel Steffen, Benjamin Bichsel, Mario Gersbach, Noa Melchior, Petar
Tsankov, and Martin Vechev.
zkay: Specifying and Enforcing Data
Privacy in Smart Contracts. pages 1759–1776, 2019.

[4] Raymond Cheng, Fan Zhang, Jernej Kos, Warren He, Nicholas Hynes,
Noah Johnson, Ari Juels, Andrew Miller, and Dawn Song. Ekiden:
A Platform for Conﬁdentiality-Preserving, Trustworthy, and Performant
Smart Contracts. 2019 IEEE European Symposium on Security and
Privacy (EuroS&P), 00:185–200, 2019.

[5] Ethereum. Release version 0.5.17. https://github.com/ethereum/solidity/

releases/tag/v0.5.17, Dec 2020.

[6] P´eter Heged˝us.

Towards Analyzing the Complexity Landscape of
Solidity Based Ethereum Smart Contracts. Technologies, 7(1):6, 2019.
[7] Ahmed Kosba, Andrew Miller, Elaine Shi, Zikai Wen, and Charalampos
Papamanthou. Hawk: The Blockchain Model of Cryptography and
Privacy-Preserving Smart Contracts. 2016 IEEE Symposium on Security
and Privacy (SP), pages 839–858, 2016.

[8] David Maier, Rachel Pottinger, AnHai Doan, Wang-Chiew Tan, Abdus-
salam Alawini, Hung Q Ngo, Ying Yan, Changzheng Wei, Xuepeng
Guo, Xuming Lu, Xiaofu Zheng, Qi Liu, Chenhui Zhou, Xuyang Song,
Boran Zhao, Hui Zhang, and Guofei Jiang. Conﬁdentiality Support over
Financial Grade Consortium Blockchain. pages 2227–2240, 2020.
[9] Mark Russinovich, Edward Ashton, Christine Avanessians, Miguel Cas-
tro, Amaury Chamayou, Sylvan Clebsch, and et al. Ccf: A framework
for building conﬁdential veriﬁable replicated services. Technical report,
Microsoft Research and Microsoft Azure, 2019.

[10] Gavin Wood et al.

Ethereum: A secure decentralised generalised
transaction ledger. Ethereum project yellow paper, 151(2014):1–32,
2014.

