HFContractFuzzer: Fuzzing Hyperledger Fabric Smart Contracts
for Vulnerability Detection

Mengjie Ding, Peiru Li, Shanshan Li, He Zhang
State Key Laboratory of Novel Software Technology, Software Institute, Nanjing University
Nanjing, China
Email:{alliac711@gmail.com,micro.perrylee@outlook.com,lss@nju.edu.cn,hezhang@nju.edu.cn}

1
2
0
2

n
u
J

1
2

]

R
C
.
s
c
[

1
v
0
1
2
1
1
.
6
0
1
2
:
v
i
X
r
a

ABSTRACT
With its unique advantages such as decentralization and immutabil-
ity, blockchain technology has been widely used in various fields in
recent years. The smart contract running on the blockchain is also
playing an increasingly important role in decentralized application
scenarios. Therefore, the automatic detection of security vulner-
abilities in smart contracts has become an urgent problem in the
application of blockchain technology. Hyperledger Fabric is a smart
contract platform based on enterprise-level licensed distributed
ledger technology. However, the research on the vulnerability de-
tection technology of Hyperledger Fabric smart contracts is still in
its infancy. In this paper, we propose HFContractFuzzer, a method
based on Fuzzing technology to detect Hyperledger Fabric smart
contracts, which combines a Fuzzing tool for golang named go-fuzz
and smart contracts written by golang. We use HFContractFuzzer
to detect vulnerabilities in five contracts from typical sources and
discover that four of them have security vulnerabilities, proving
the effectiveness of the proposed method.

CCS CONCEPTS
• Security and privacy → Vulnerability scanners.

KEYWORDS
Fuzzing; Smart Contract; Security Vulnerability; Hyperledger Fab-
ric; Blockchain

ACM Reference Format:
Mengjie Ding, Peiru Li, Shanshan Li, He Zhang. 2021. HFContractFuzzer:
Fuzzing Hyperledger Fabric Smart Contracts for Vulnerability Detection.
In Evaluation and Assessment in Software Engineering (EASE 2021), June
21–23, 2021, Trondheim, Norway. ACM, New York, NY, USA, 8 pages. https:
//doi.org/10.1145/3463274.3463351

1 INTRODUCTION
Since 2008, blockchain has been in the public eye. Blockchain is
a new application model of computer technology proposed by
Satoshi Nakamoto [17]. It not only provides an opportunity for

Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
EASE 2021, June 21–23, 2021, Trondheim, Norway
© 2021 Association for Computing Machinery.
ACM ISBN 978-1-4503-9053-8/21/06. . . $15.00
https://doi.org/10.1145/3463274.3463351

the development of virtual currencies, but also offers new secu-
rity solutions. Blockchain technology has been widely used in re-
cent years [13, 33], and various explorations of blockchain tech-
nology have been emerging, in which the smart contract is an
important part. Smart contracts greatly improve the usage scenar-
ios of blockchain and extends blockchain platform from a simple
distributed account system to an extremely rich decentralized op-
erating system [18]. Compared to normal programs, the security
issues of smart contracts should be especially paid attention to. On
the one hand, smart contracts cannot be changed once deployed.
On the other hand, smart contracts generally carry huge economic
value. Therefore, the automatic detection of security vulnerabili-
ties in smart contracts has become a problem to be solved in the
application of blockchain technology.

The impressive growth of Ethereum and other blockchain plat-
forms based on the Proof-of-Work consensus protocol made evi-
dently the limitations of this approach, which are mostly related
to performance [25]. Meanwhile, Hyperledger Fabric(HF) was orig-
inally a consortium blockchain led by the International Business
Machines Corporation (IBM) and only permitted certain business
organizations to participate and share [22]. HF is a system for
deploying and operating permissioned blockchains that targets
business applications [1]. It supports modular consensus protocols,
which allows the system to be tailored to particular use cases and
trust models [1]. This feature allows HF to be customized more
effectively to specific business scenarios and brings shorter latency
and higher performance.

However, there is not too much research on HF compared to
Ethereum at present, mainly because HF came out later than Ethereum,
which was created by the Linux Foundation in 2016. In the past
two years, HF has received more and more attention in academia.
Nevertheless, there are still almost no public papers or tools on
detecting vulnerabilities of HF smart contracts. It is worth mention-
ing that vulnerabilities in HF smart contracts highly differ from
that in Ethereum, which is a challenge as well.

Symbolic Execution, Formal Verification, and Fuzzing are the
main techniques of smart contract vulnerability detection, and a
large amount of research on Ethereum has been conducted using
these techniques [18]. Among them, Fuzzing technology can detect
unexpected vulnerabilities, which is more suitable for vulnerability
detection of HF smart contracts, because most of its vulnerabilities
are beyond our awareness and research at present.

Based on the background above, we propose a HF smart contract
Fuzzing method HFContractFuzzer, which is based on Go-fuzz, a
Fuzzing tool for golang. Then we use HFContractFuzzer to detect
vulnerabilities in five contracts from typical sources and discover

 
 
 
 
 
 
EASE 2021, June 21–23, 2021, Trondheim, Norway

Ding et al.

that four of them have security vulnerabilities, proving the effec-
tiveness of the method.

The structure of this paper is arranged as follows: Section 2
systematically summarizes the technical background and related
work involved in this research, including HF smart contract, rel-
evant studies about detecting smart contract vulnerabilities, and
the Fuzzing technology; Section 3 presents the specific method
HFContractFuzzer of the go-fuzz-based HF smart contract Fuzzing;
Section 4 tests five typical smart contracts to give the feasibility
analysis and verification of the HFContractFuzzer method; Sec-
tion 5 discusses the contributions and shortcomings of this study;
Section 6 summarizes the content of this paper.

2 BACKGROUND AND RELATED WORK
This section introduces the technical background and related work
involved in this paper, including the introductions of HF smart con-
tracts and a research about detecting smart contract vulnerabilities,
as well as Fuzzing technology.

2.1 Hyperledger Fabric Smart Contract
In 2016, the Linux Foundation launched an open source project to
promote the development of blockchain, opening the era of Hy-
perledger. Hyperledger currently has six technical frameworks.
Among them, HF is an enterprise-level licensed distributed ledger
technology platform. HF has four functional modules, namely iden-
tity management, ledger management, transaction management,
and smart contracts [32]. It is responsible for the development of
common modules and designs for most industries [10], creating an
open source ledger managed by the public with an enterprise-level
license [31].

In HF systems and applications, smart contracts are often re-
ferred to as chaincodes. Blockchain networks use chaincodes to
constrain and regulate the reading or modification of key-value
pairs and other state databases in order to accomplish complex
business logic. The chaincode has its own execution logic, which
performs the logical processing of the account book data according
to the custom rules [23]. A node supporting endorsement in the
network installs and instantiates the chaincode on a node server
so that business people can use the client with Fabric-SDK to com-
municate with the node service and realize the invocation of the
chaincode.

2.2 Detecting smart contract vulnerabilities
At present, there has been a certain amount of related research
work on the technology of Fuzzing and mining smart contract
vulnerabilities. Fu et al. [5] classified and analyzed the security
issues of smart contracts in detail, and summarized the test plans of
smart contracts. The article pointed out that common smart contract
security issues, including reentrancy, permission control, integer
overflow, exception handling, short address attacks, manipulation
of block timestamps, denial of service attacks, pseudo-random,
delegatecall delegation calls, and illegal and transaction issues. In
terms of security, Fu et al. proposed four smart contract testing
methods: formal verification, Fuzzing, symbol analysis, and taint
analysis.

Mythril [16] is a security analysis tool for Ethereum Virtual Ma-
chine(EVM) bytecode. It is based on symbol execution and concrete
execution. It combines static execution with dynamic execution
to improve path coverage and detection accuracy. However, it is
difficult to detect some vulnerabilities of deeper hidden or complex
test cases. Oyente [14] is a static symbolic execution tool for EVM
bytecode that detects reentrancy, call stack depth, timestamp de-
pendency, and transaction order dependency vulnerabilities, but
the static execution suffers from path explosion, resulting in fewer
types of coverable vulnerabilities. Securify [27] is based on pattern
matching, which analyzes vulnerabilities given characteristics in
smart contracts. Securify works better than Mythril and Oyente,
but it doesn’t address digital vulnerabilities. Smartcheck [26] is an
extensible static analysis tool. It can detect arithmetic overflow vul-
nerability by feature matching, but it can only match at the source
code level and does not provide the input data that triggers the
vulnerability. MAIAN [19] is an automated tool for finding vulner-
abilities in blockchain smart contracts that processes the contract’s
bytecode and attempts to create a series of transactions to find and
confirm errors.

Manticore [15] is based on dynamic symbolic execution and is
used to analyze smart contracts and binaries. The types of vulner-
abilities it can cover include reentrancy, failure to check return
values, unprotected functions, timestamp dependencies, tx.origin
used for authentication, and integer overflows. Manticore can enu-
merate the execution state of a contract and verify the security of
critical functions. SAFEVM is the first tool to validate low-level
EVM code using an existing validation engine developed for C
programs, but the accuracy needed to be improved. Ethersplay
is an EVM disassembler for analyzing and debugging smart con-
tracts that are compiled or deployed in blockchains. IDA-EVM is
an IDA processor module for EVM that allows reverse-engineering
analysis of smart contracts without source codes. WANA [3] is a
cross-platform smart contract vulnerability detection tool based on
web assembly bytecode symbol. It can effectively detect the typical
vulnerabilities of Ethereum smart contracts, but it is not possible
to conduct large-scale experiments on Ethereum smart contracts to
fully assess WANA’s accuracy.

Smart contracts are currently centered around Ethereum and
EOS. For HF, only Sukrit et al. [12] proposed the ZEUS method.
ZEUS leverages abstract interpretation and symbolic model check-
ing, as well as the ability to constrain horn clauses to quickly verify
secure contracts. It takes a smart contract and a policy specification
as input and verifies the smart contract against that policy. ZEUS
performs significantly better than Oyente with a low false alarm
rate and an order of magnitude improvement in verification time,
but it is a formal verification method that detects whether a smart
contract violates the policy and cannot detect other vulnerability
types.

2.3 Fuzzing
Fuzzing is a technique that has been widely used for vulnerability
mining in traditional programs. The core idea is to provide a large
number of random test cases for the program, monitor the abnormal
behavior of the program during the execution process, and explore
some of the potential vulnerabilities that are not easy to identify [2].

HFContractFuzzer: Fuzzing Hyperledger Fabric Smart Contracts for Vulnerability Detection

EASE 2021, June 21–23, 2021, Trondheim, Norway

The generation of test cases is one of the key links of Fuzzing, and
there are usually two ways, based on generation and based on
mutation [6].

Fuzzing has proven to be very effective in traditional programs.
In smart contracts, there are works surveying and categorizing
flaws in critical contracts established that Fuzzing using custom
user-defined properties might detect up to 63% of the most severe
and exploitable flaws in contracts [7]. At present, there are many
Fuzzing methods for smart contracts in Ethereum. Echidna [8] is
an open-source smart contract Fuzzer. It provides a potent out-of-
the-box Fuzzing experience and detected, in less than 2 minutes,
many reachability targets that required 15 or more minutes with
other Fuzzers. ContractFuzzer [11] generates Fuzzing inputs based
on the ABI specification for smart contracts and analyzes the smart
contract runtime logs to report security vulnerabilities. It found
459 vulnerabilities with high precision in 6,991 smart contracts. In
particular, it detected DAO vulnerability that led to a $60 million
loss. EOSFuzzer [30] is a general black-box Fuzzing framework,
which provides an effective attack and testing method for EOSIO
smart contracts.

ILF [9] is a new Fuzzing method based on learning to simu-
late symbolic execution. It uses neural networks to learn Fuzzing
strategies from the input data set generated by symbolic execution
experts. The ILF is faster, and its code coverage performs better
than existing Fuzzers, but it generates things without including
the interaction of intelligent contracts. Harvey [29] is an industrial
gray box Fuzzer for smart contracts, which uses input forecast-
ing and demand-driven sequence fuzziness to effectively test smart
contracts. Harvey has high coverage and vulnerability detection effi-
ciency, it extends the standard grey box Fuzzing prediction method,
but it can not be applied into all smart contracts. Confuzzius [4]
outperforms ILF and Harvey in detection and is a hybrid Fuzzing
tester that combines evolutionary Fuzzing and constraint solving.
Confuzzius detects far more vulnerabilities than current state-of-
the-art Fuzzers and symbol execution tools and significantly fewer
false positives, but its constraint-solving approach currently fails
to detect the sequence of things in smart contracts. Badger [20] is a
hybrid test method for complexity analysis that extends worst-case
ambiguity analysis and uses a modified version of the symbolic
pathfinder to introduce fuzziness, analysis, and generality, increased
coverage, and execution costs, performance is better than Fuzzing
and symbolic execution itself.

However, HF smart contracts have many different characteris-
tics compared with traditional programs and smart contracts in
Ethereum, such as programming languages and consensus proto-
cols, which bring challenges to the Fuzzing for smart contracts in
HF. In recent years, the majority of scholars on HF smart contracts
Fuzzing technology are still in its infancy and it is more challenging
to apply Fuzzing technology to HF smart contracts. Simultaneously,
the Fuzzing technology also provides opportunities and new ideas
for automated detection of HF smart contract vulnerabilities, which
is worthy of in-depth study.

3 HFCONTRACTFUZZER
HF smart contracts can be written in mainstream languages such as
Go and Java. HF has provided Go from the early stage of the project

Table 1: Docker Image Information

REPOSITORY

IMAGE ID

SIZE

hyperledger/fabric-tools
hyperledger/fabric-tools
hyperledger/fabric-orderer
hyperledger/fabric-peer

0f9743ac0662
0f9743ac0662
84eaba5388e7
5a52faa5d8c2

1.49 GB
1.49 GB
120 MB
128 MB

with a software development kit, and the Go community has many
tools to improve code quality. Therefore, this paper mainly conducts
Fuzzing on smart contracts written in Go language and mines
the vulnerability information of smart contracts. The compilation
and operation of smart contracts rely on the state database in the
blockchain network, which are different from traditional programs.
Considering these differences, we firstly conduct unit testing of
smart contracts to refine the smart contract runtime environment
and local call rules. Then we optimize go-fuzz tool. Finally, we
propose a smart contract testing method, HFContractFuzzer, to
detect vulnerabilities.

3.1 HFContractFuzzer Basis
The basis of HFContractFuzzer is HF smart contract unit testing.
Unit testing refers to the testing and evaluation of the basic com-
ponents as well as different modules of the system to be tested
[21]. Smart contracts rely on the state database of the blockchain
network for read-write operation, so direct calls for them cannot
be made locally. In this section, two scenarios are used to execute
unit testing for smart contracts in order to obtain local call rules
for smart contracts.

Developer Mode. The developer model requires a simple local
network environment to test the smart contract interfaces. This
network environment is different from the blockchain network and
only supports smart contract operations. The Docker image infor-
mation required for testing is shown in Table 1. When configuring
the environment, we need to set up the fabric-samples package
locally, which contains the debug directory. The debug directory
contains a sort node, a node, a smart contract container, and a client
container. The smart contract container is responsible for running
the smart contract under test and the client container is responsible
for sending the request messages. The script.sh file of the client
container is responsible for creating channels and adding nodes,
which can be used to configure the smart contract during testing.
The smart contract under test is placed in the chaincode directory,
which is mapped to the smart contract container during the testing
process.

The testing process requires starting three terminals, as shown
in Figure 1. The first terminal is responsible for starting the net-
work, creating mycc channels, and joining nodes. At this point,
the network contains a sorting node server, a node server, a smart
contract container, and a client container. The second terminal is
responsible for compiling the smart contract and outputting the
smart contract’s run log. The third terminal is responsible for the
configuration of the smart contract. Finally, the third terminal calls
the interfaces to execute unit testing for smart contracts.

MockStub Class. HF provides a MockStub class for unit test-
ing. the MockStub class maintains a map[string][]byte to simulate

EASE 2021, June 21–23, 2021, Trondheim, Norway

Ding et al.

and Dvyukov go-fuzz2. The Google version is the toolkit officially
released by Google. The Dvyukov version is released by the engi-
neer of Dmitry Vyukov. To distinguish, this paper named the two
versions of go-fuzz tools G-go-fuzz and D-go-fuzz respectively.

G-go-fuzz. Google officially released a version of go-fuzz [24],
which uses go-fuzz as a library to fill Go objects with random values.
G-go-fuzz supports the generation of multiple types of random data,
including single variables, map types, and custom structures.

The G-go-fuzz tool is used to complete the Fuzzing of smart con-
tracts, which is easy to operate and has no special requirements for
the test environments. According to the local call rules of the smart
contract interface, the random data generation can be completed
with the help of go-fuzz library. But G-go-fuzz does not have an
exception handling module. When a software vulnerability is found,
the terminal reports the exception and suspends the test. This re-
quires testers to suspend testing after discovering a vulnerability,
and continue testing after the vulnerability is fixed, which seriously
affects the efficiency of testing.

D-go-fuzz. D-go-fuzz is a coverage-guided Fuzzing tool for test-
ing Go packages [28]. Fuzzing testing is mainly suitable for parsing
complex input packages, and strengthening systems that may parse
inputs from malicious users.

A D-go-fuzz test unit can be divided into five sections. The corpus
is the corpus of Fuzzing, which is responsible for storing the input
data. The main.go file in the gen directory is the source of the
initial Fuzzing corpus. The fuzz.go file is the key part of the Fuzzing.
The Fuzz function uses the random data provided by D-go-fuzz to
call the interfaces of the smart contract to complete the test. The
crashers directory and suppressions directory are responsible for
storing the vulnerability information found during the test. Once D-
go-fuzz starts running, it will be an infinite loop genetic algorithm
that will constantly generate new test cases based on the initial
corpus. D-go-fuzz prints a set of test results at regular intervals.
Each group of test results contains a current timestamp and test
data information.

Compared with G-go-fuzz, D-go-fuzz has a complicated test
process and has certain requirements for the test environment.
However, D-go-fuzz includes an exception handling module, which
can record vulnerability information when a vulnerability is found
during the test, and continue the testing work. In addition, D-go-
fuzz can adjust the priority information of the corpus according to
the feedback of each test round to improve the efficiency of Fuzzing.
So we choose D-go-fuzz for Fuzzing.

Optimization of go-fuzz for smart contracts. D-go-fuzz was
originally designed to detect software vulnerabilities in Go language
programs, and some of its modules are not applicable to test this
particular Go program, smart contracts. Therefore, we optimizes
the D-go-fuzz tool in terms of the initial corpus module and the
corpus variation process to improve the efficiency of smart contract
Fuzzing.

• Optimization of initial Corpus. D-go-fuzz is a powerful
tool, but the testing process is complicated. The initial corpus
data needs to be input manually, which not only is a heavy
workload but also brings a high error rate for the system
to be tested with a lot of input data. Considering the above

Figure 1: Developer mode unit testing logic flow.

key-value pairs to complete the work of the state database in the
blockchain network. When the PutState and GetState functions are
called in a smart contract, it is no longer the state database but the
map data in memory. Using MockStub class for unit testing of smart
contracts does not require configuration and running network en-
vironment, we can complete the smart contract interface calls test
locally. The MockStub class provides MockInit and MockInvoke
functions to simulate the smart contract calls from endorsement
nodes in the blockchain network. Call the Init and Invoke interfaces
of smart contracts, the arguments are a string type uuid and a byte
array. Init is responsible for the initialization of smart contract, and
Invoke is responsible for the selection of smart contract function.
Invoke parses byte array, gets function parameters, and calls the
different function to complete different Work.

Using developer mode for unit testing of smart contracts sim-
plifies the network environment, but it also involves network con-
figuration and startup. In addition, the developer mode calls the
interfaces in the terminal to test the smart contract, and each call
requires the execution of a command, specifying the channel name
and parameter information, which makes it difficult to realize the in-
put of a large number of random data and is unsuitable for Fuzzing.
However, using the MockStub class does not require a blockchain
network environment or Docker images. We just execute simple
commands to automate the local testing of smart contracts and
standardize the smart contract interface function calls. The testing
process is the same as the unit testing of traditional Go programs,
which has the advantage of simplicity and efficiency. The MockStub
class is used to design the rules for calling the smart contract inter-
faces locally, which facilitates the subsequent testing of smart con-
tracts using Go language testing tools. Therefore, we use MockStub
class for exploring the call rules of the smart contract interfaces.

3.2 Go-fuzz
At the press conference of the Go v1.5 version, Google announced
go-fuzz, testing technology for Go programs. Google completed the
Fuzzing with the help of go-fuzz and found 137 errors in the stan-
dard library (70 items have been fixed), and 165 other errors [28].
At present, the most popular go-fuzz tools are Google go-fuzz1

1https://github.com/Google/gofuzz

2https://github.com/dvyukov/go-fuzz

HFContractFuzzer: Fuzzing Hyperledger Fabric Smart Contracts for Vulnerability Detection

EASE 2021, June 21–23, 2021, Trondheim, Norway

Table 2: go-fuzz mutation algorithm categories

Table 3: Mutation algorithm test report

ID

0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19

Mutation algorithm name

ID

corpus

execs

cover

time-1

time-2

Remove a range of bytes.
Insert a range of random bytes.
Duplicate a range of bytes.
Copy a range of bytes.
Bit flip. Spooky!
Set a byte to a random value.
Swap 2 bytes.
Add/subtract from a byte.
Add/subtract from a uint16.
Add/subtract from a uint32.
Add/subtract from a uint64.
Replace a byte with an interesting value.
Replace an uint16 with an interesting value.
Replace an uint32 with an interesting value.
Replace an ascii digit with another digit.
Replace a multi-byte ASCII number with another number.
Splice another input.
Insert a part of another input.
Insert a literal.
Replace with literal.

0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19

261
409
235
239
190
228
272
259
200
233
158
163
233
270
281
256
263
244
259
61

12754433
121020447
10739103
10712907
9927232
10772890
11075565
11434045
9652113
10809772
9195773
9088507
11434981
10573319
16859015
14502338
11850337
11610957
14245380
6958615

1523
1187
1509
1515
1510
1527
1521
1521
1490
1527
1457
1475
1518
1526
1519
1526
1522
1527
1522
1359

1m6s
—
1m9s
1m6s
1m9s
1m6s
1m6s
1m6s
1m6s
1m6s
1m9s
1m3s
1m9s
1m6s
1m15s
1m6s
1m9s
1m9s
1m6s
1m3s

3h45m
—
4h0m
3h49m
3h59m
3h49m
3h39m
3h47m
3h53m
3h44m
3h52m
3h58m
3h48m
3h1m
2h39m
3h9m
3h13m
3h44m
3h41m
4h30m

situation, the initial corpus generation module of D-go-fuzz
is modified as shown in Figure 2 to simplify the initial corpus
acquisition steps.

Figure 2: go-fuzz tool improvement diagram.

The generation of the initial Fuzzing corpus is completed
in the main.go file, and data needs to be manually assigned.
G-go-fuzz is easy to use, and multiple types of data can be
randomly generated by calling go-fuzz library. Use the go-
fuzz library in the main.go file to complete the generation of
established types of data, and convert it to byte data as the
initial corpus for Fuzzing, which can make up for the lack of
manual operation and simplify the Fuzzing work.

• Optimization of mutation process. After setting the ini-
tial corpus, D-go-fuzz adopts a variety of mutation algo-
rithms to mutate the initial corpus. As shown in Table 2,
there are 20 mutation algorithms. Each mutation algorithm
works like its name, such as ID 0, “Remove a range of bytes”,
which removes some of the bytes from the initial corpus to
generate a new corpus. For smart contracts, some mutation
algorithm of D-go-fuzz may have reduced efficiency. In order
to improve the efficiency of smart contract Fuzzing, the mu-
tation algorithm of D-go-fuzz is screened and the mutation
algorithm with lower efficiency is eliminated.
We limited the function of randomly selecting mutation al-
gorithms in the fuzzer module of the D-go-fuzz tool, and
specified a mutation algorithm each time to perform Fuzzing

on the smart contract under test. The test time for each mu-
tation algorithm was five hours. The test report is shown in
Table 3. The number of Corpus, the number of test execution,
the code coverage, and the time of finding exceptions (time-1
is the time of finding the first exception and time-2 is the
time of finding the second exception) are selected as the basis
of evaluating the mutation algorithms. It can be seen from
the test report that the mutation algorithm with ID 1 is less
efficient in finding exceptions. The mutation algorithm with
ID 19 takes a long time to find anomalies and has too few
corpus, so these two mutation algorithms can be eliminated.

3.3 HFContractFuzzer Overview
Currently, there is no special Fuzzing tool for HF smart contracts.
Based on the go-fuzz tool, this section proposes a smart contract
Fuzzing method HFContractFuzzer, and the overview diagram of the
HFContractFuzzer method is shown in Figure 3. HFContractFuzzer
uses the MockStub class to realize the call locally of the smart
contract interface and then inputs a lot of random data into smart
contracts to detect the potential software vulnerabilities.

Write initial corpus. First, we provide the unit testing cases of
the smart contract to be tested as the initial corpus, Or we use the
G-go-fuzz library to complete the generation of data.

Write test files. We group the release and query for each type
of information in the smart contract and write the test functions.
Then, we compare the information query results with the published
data to detect the logic vulnerabilities of the smart contract. If the
test function receives a corpus and returns 0, it indicates that a
logical vulnerability may exist, otherwise, it returns 1 to indicate
that there are no vulnerabilities, as shown in Figure 4.

Smart contract Fuzzing based on go-fuzz. The optimized go-
fuzz has a complete exception handling module and high test effi-
ciency, so it is used to fuzz the smart contract. In optimized go-fuzz,
the main body of the Fuzzing is implemented in fuzz.go. The Fuzz
function is responsible for identifying and parsing the corpus of
each test round, transmitting the data to each group of test func-
tions for testing, and combining the results of each group of test

EASE 2021, June 21–23, 2021, Trondheim, Norway

Ding et al.

Figure 3: Overview of HFContractFuzzer method.

Figure 4: Logical flow of test functions.

functions. The feedback result adjusts the priority of the corpus in
the Corpus, as shown in Figure 5. The exception handling module
monitors the entire test execution process, obtains and records
exception information.

Result analysis. The Fuzzing report is displayed on the termi-
nal, and the terminal prints a set of test results at regular intervals.
Each group of test results contains a current timestamp and test
data information. The corpus is stored in Corpus, and the exception
information is stored in crashers. By obtaining the corpus and lo-
cation information when the exception occurs, and designing unit
testing cases, we can determine whether the vulnerability exists
and prevent the occurrence of false positives. Finally, we explore
the confirmed vulnerabilities, determine the type of vulnerabilities,
and analyze the causes of the vulnerabilities.

Table 4: Unit testing case

Use Case

Test Data

F1

I1
L1

{"addProInfo", "001","MiGao", "1",
"2020-01-01", "2020-07-01", "MP01", "FX1234",
"MiGao", "$10", "Shanxi"}
{"addIngInfo", "001", "M1", "NuoMi"}
{"addLogInfo", "001", "2020-01-02", "2020-01-02",
"transport", "Shanxi", "Shaanxi", "MiGao","10 days",
"Road transport", "China Logistics Company Beijing", "$190"}

4 EVALUATION
This section tested five typical smart contracts based on the HF
framework to validate the HFContractFuzzer. These smart contracts
come from Fabric, Caliper, and IBM including HF version 0.6 and HF

Figure 5: Logical flow of Fuzzing.

version 1.1. At the same time, These smart contracts integrate all
the functional modules of HF: Identity Management, account book
management, transaction management, smart contracts. And they
have the ability to upload and download information. Therefore,
they can represent the majority of HF blockchain projects.

Food traceability has long been a hot area of blockchain tech-
nology, so we take the food traceability project3 among the five
smart contracts as an example to give an introduction specifically.
The system uses blockchain technology to register and track all
kinds of information about food, including basic food information,
ingredients, and logistics information. Users can track and query
all kinds of information according to the food number to ensure
the authenticity of the food.

3https://github.com/zhazhalaila/hyperledger-simple-app

resultmain.goInitial corpusCorpusmutateFuzzSmart contract initializationSucceed?Corpus(Data)info_1check info_1info_2check info_2info_ncheck info_nadjust priorityfeedbackYreturnNparse... ...... ...HFContractFuzzer: Fuzzing Hyperledger Fabric Smart Contracts for Vulnerability Detection

EASE 2021, June 21–23, 2021, Trondheim, Norway

Smart contract

example01
drm

smallbank
marbles

Source

Fabric
Caliper

Caliper
IBM

Table 5: Summary of smart contract fuzzy test results

Version

Exception type

Notes

0.6
1.1

1.1
1.1

—
Logic loopholes

Integer overflow
Logic loopholes

It is allowed to write data whose variables are empty strings to the state database,
but it is considered that this situation does not exist when querying
The result of adding two integer data greater than 0 is less than 0
In the smart contract, the init function converts the number string to int type, and then
converts the int type to a number string and writes it into the state database. In this
way, the "00" number string meets the data requirements, but it becomes "0" after being
written into the database

We tested this smart contract according to the HFContractFuzzer

process in Section 3:

(1) We used unit testing cases F1, I1, and L1 as the initial corpus
for Fuzzing the smart contract under test, as shown in Table
4.

(2) We grouped the release and query of basic food information
in the smart contract to be tested into one group. Similarly,
We grouped ingredient information and logistics informa-
tion. Then we wrote test files, called the function of each
group, and compared the information query results with the
published information.

(3) We used the optimized go-fuzz tool to test the smart contract.
Test time was 25h38min, with execution 233943435 times,
cover data 1525, corpus 418, and the test result showed one
crasher.

(4) We obtained the detailed information of the exception and
determine an exception type in the smart contract to be
tested.The exception message is "addIngInfo Failed", and the
corpus information is "{"FoodIngInfo":{"IngID":">"}}". Accord-
ing to test results, we designed new test cases based on the
corpus and location when the exception occurs, and then
performed unit testing, which verifies the type conversion
errors. The type conversion error existed in the test file. The
input data was a string of ">", which was converted to byte
type in the smart contract with the help of JSON.Marshal()
and stored in the state database. The test file obtained the
byte type data in the state database during the query. Used
string() to convert to a character string, the converted charac-
ter string was "˘003e", and the inconsistency with ">" caused
the system to report an error.

Similarly, we tested other four smart contracts (example014,
drm5, smallbank6, marbles7) from typical sources, and the results
are shown in Table 5. After testing these five typical smart con-
tracts, we discovered that four of them have security vulnerabilities,
including three types of vulnerabilities: Type Conversion Errors,
Logic loopholes, and Integer overflow, which are also typical and
serious in other blockchain platforms such as Ethereum, and then
used unit testing to verify that these vulnerabilities do exist. On
the one hand, the result proves the feasibility of applying Fuzzing
into HF smart contracts to detect unknown vulnerabilities as well

4https://github.com/hyperledger/fabric/tree/v0.6/examples/chaincode/go/
chaincode_example01
5https://github.com/caohuilong/Hyperledger-caliper/tree/master/src/contract/fabric
6https://github.com/caohuilong/Hyperledger-caliper/tree/master/benchmark/
smallbank
7https://github.com/IBM-Blockchain/marbles

as the effectiveness of HFContractFuzzer in vulnerability detection.
On the other hand, We find three new vulnerabilities in HF smart
contracts that no scholars have discovered before, which contribute
to further research on HF smart contracts in the future.

5 DISCUSSION
Currently, testing technology for HF smart contracts is still in pre-
liminary exploration stage. Based on this, our paper proposes a
Fuzzing method HFContractFuzzer for it, and we use HFContract-
Fuzzer to detect vulnerabilities in five contracts from typical sources.
The proposed method discovered that four of them had security
vulnerabilities, which proved the effectiveness of it.

Some shortcomings and limitations exist in this work:

(1) The go-fuzz tool was originally designed to detect vulner-
abilities in Go programs, and there may be performance
degradation issues when detecting vulnerabilities of smart
contracts. In this paper, although the go-fuzz has been opti-
mized to improve the performance of Fuzzing, the issue still
exists and further optimization is needed.

(2) For the evaluation of the proposed Fuzzing method HFCon-
tractFuzzer in this paper, we were not able to verify the
superiority of it, since we found no detection methods and
tools for HF smart contracts available in public papers to
support a comparative study. However, we still try our best
to show the effectiveness of the proposed method through a
carefully designed evaluation process, which selects five typ-
ical HF smart contracts, uses our HFContractFuzzer method,
and finally detects expected vulnerabilities from all of the
selected cases.

(3) Based on this work, we know three security vulnerabilities
exist in HF smart contracts: Type Conversion Errors, Logic
loopholes, and Integer overflow. For known vulnerabilities,
the effectiveness of other detection methods are is unknown,
such as symbolic execution, static analysis, and machine
learning. Since these methods have not been incorporated
into the HF vulnerability detection domain, the comparison
between our method and these promising methods is not
within the scope of this study.

6 CONCLUSION
As an important part of the blockchain platform, smart contracts
provide rich and credible decentralized application scenarios, and
HF provides a platform for smart contracts that are more suitable
for business models between enterprises. However, due to the spe-
cial operating environment and program characteristics of smart

EASE 2021, June 21–23, 2021, Trondheim, Norway

Ding et al.

contracts, and the predecessors’ research foundation on HF smart
contracts is less, HF smart contracts are facing a new challenge
of security vulnerability detection. Once their vulnerabilities are
exploited, it may cause serious economic losses and social impact.
This paper proposes the HFContractFuzzer method for HF smart
contract detection, combining Fuzzing technology and Go language
testing tool go-fuzz. Users provide smart contracts and test cases,
HFContractFuzzer automatically generates test results. We use HF-
ContractFuzzer to detect vulnerabilities in five contracts from typi-
cal sources and discover four of them have security vulnerabilities,
proving the effectiveness of the method. In addition, this paper
gives two optimization methods of go-fuzz for smart contracts, ini-
tial corpus optimization, and mutation process optimization. With
the improvement of vulnerability detection research methods and
the maturity of research technology, HF smart contract is expected
to be widely used in enterprises and businesses. The research work
in this paper is expected to provide useful inspiration and reference
for future research on HF smart contract vulnerability detection.

The future work of this study is threefold: 1) Improving the HF-
ContractFuzzer method: We plan to further optimize the go-fuzz
tool and make it more in line with the characteristics of HF smart
contracts. 2) Supplementing more evaluation work: We will try
to do some more work to evaluate and validate the accuracy and
recall of the HFContractFuzzer proposed. 3) Comparison with other
methods: We are considering other possible methods that can be
adapted for the detection of known HF smart contract vulnerabili-
ties, e,g., symbolic execution, static analysis, and machine learning.
After the adaptation and implementation, we will conduct a com-
parative study to make a comprehensive comparison between the
HFContractFuzzer method and other adapted methods.

ACKNOWLEDGMENTS
This work is jointly supported by the National Key Research and
Development Program of China (No.2019YFE0105500) and the Re-
search Council of Norway (No.309494), as well as the National Nat-
ural Science Foundation of China (Grants No.62072227, 61802173),
Intergovernmental Bilateral Innovation Project of Jiangsu Province
(BZ2020017), and the Innovation Project of State Key Laboratory for
Novel Software Technology (Nanjing University) (ZZKT2021B07).

REFERENCES
[1] Elli Androulaki, Artem Barger, Vita Bortnikov, Christian Cachin, Konstantinos
Christidis, Angelo De Caro, David Enyeart, Christopher Ferris, Gennady Lavent-
man, Yacov Manevich, et al. 2018. Hyperledger fabric: a distributed operating
system for permissioned blockchains. In Proceedings of the thirteenth EuroSys
conference. 1–15.

[2] Sofia Bekrar, Chaouki Bekrar, Roland Groz, and Laurent Mounier. 2011. Find-
ing software vulnerabilities by smart fuzzing. In 2011 Fourth IEEE International
Conference on Software Testing, Verification and Validation. IEEE, 427–430.
[3] Wang Dong, Jiang Bo, and Chan WK. 2020. WANA: Symbolic Execution of Wasm
Bytecode for Cross-Platform Smart Contract Vulnerability Detection. arXiv
preprint arXiv:2007.15510 (2020).

[4] Christof Ferreira Torres, Antonio Ken Iannillo, Arthur Gervais, et al. 2021. CON-
FUZZIUS: A Data Dependency-Aware Hybrid Fuzzer for Smart Contracts. (2021).
[5] Menglin Fu, Lifa Wu, and Zheng Hong. 2019. Research on mining technology
of smart contract security vulnerabilities. Computer Applications 39, 7 (2019),
1959–1966.

[6] Yu Fu, Donghui Shi, and Yang Zhang. 2019. Improved method of fuzz testing
based on coverage frequency. Computer System Applications 2019.01 (2019),
17–24.

[7] Alex Groce, Josselin Feist, Gustavo Grieco, and Michael Colburn. 2020. What are
the Actual Flaws in Important Smart Contracts (and How Can We Find Them)?.

In International Conference on Financial Cryptography and Data Security. Springer,
634–653.

[8] Dan Guido. 2017. echidna. https://github.com/trailofbits/echidna(2021).
[9] Jingxuan He, Mislav Balunović, Nodar Ambroladze, Petar Tsankov, and Martin
Vechev. 2019. Learning to fuzz from symbolic execution with application to smart
contracts. In Proceedings of the 2019 ACM SIGSAC Conference on Computer and
Communications Security. 531–548.

[10] Hyperledger. 2015. Hyperledger. https://www.hyperledger.org(2020).
[11] Bo Jiang, Ye Liu, and WK Chan. 2018. Contractfuzzer: Fuzzing smart contracts
for vulnerability detection. In 2018 33rd IEEE/ACM International Conference on
Automated Software Engineering (ASE). IEEE, 259–269.

[12] Sukrit Kalra, Seep Goel, Mohan Dhawan, and Subodh Sharma. 2018. ZEUS:

Analyzing Safety of Smart Contracts.. In Ndss. 1–12.

[13] Iuon-Chang Lin and Tzu-Chun Liao. 2017. A survey of blockchain security issues

and challenges. IJ Network Security 19, 5 (2017), 653–659.

[14] Loi Luu, Duc-Hiep Chu, Hrishi Olickel, Prateek Saxena, and Aquinas Hobor.
2016. Making smart contracts smarter. In Proceedings of the 2016 ACM SIGSAC
conference on computer and communications security. 254–269.

[15] Mark Mossberg, Felipe Manzano, Eric Hennenfent, Alex Groce, Gustavo Grieco,
Josselin Feist, Trent Brunson, and Artem Dinaburg. 2019. Manticore: A user-
friendly symbolic execution framework for binaries and smart contracts. In 2019
34th IEEE/ACM International Conference on Automated Software Engineering (ASE).
IEEE, 1186–1189.

[16] Bernhard Mueller. 2017. Mythril. https://github.com/ConsenSys/mythril(2021).
[17] Satoshi Nakamoto. 2019. Bitcoin: A peer-to-peer electronic cash system. Technical

Report. Manubot.

[18] Yuandong Ni, Chao Zhang, and Tingting Yin. 2020. A review of research on
smart contract security vulnerabilities. Journal of Information Security 5, 3 (2020),
78–99.

[19] Ivica Nikolić, Aashish Kolluri, Ilya Sergey, Prateek Saxena, and Aquinas Hobor.
2018. Finding the greedy, prodigal, and suicidal contracts at scale. In Proceedings
of the 34th Annual Computer Security Applications Conference. 653–663.

[20] Yannic Noller, Rody Kersten, and Corina S Păsăreanu. 2018. Badger: complexity
analysis with fuzzing and symbolic execution. In Proceedings of the 27th ACM
SIGSOFT International Symposium on Software Testing and Analysis. 322–332.
[21] Roy Osherove. 2009. The Art of Unit Testing: With Examples in. Net. Manning.
[22] Liwei Ouyang, Shuai Wang, Yong Yuan, Xiaochun Ni, and Feiyue Wang. 2019.
Smart Contract: Architecture and Progress. Acta Automatica Sinica 45, 3 (2019),
445–457.

[23] Reza M Parizi, Ali Dehghantanha, Kim-Kwang Raymond Choo, and Amritraj
Singh. 2018. Empirical vulnerability analysis of automated smart contracts
security testing on blockchains. arXiv preprint arXiv:1809.02702 (2018).
[24] Daniel Smith. 2014. Google go-fuzz. https://github.com/Google/gofuzz(2020).
[25] Joao Sousa, Alysson Bessani, and Marko Vukolic. 2018. A byzantine fault-tolerant
ordering service for the hyperledger fabric blockchain platform. In 2018 48th
annual IEEE/IFIP international conference on dependable systems and networks
(DSN). IEEE, 51–58.

[26] Sergei Tikhomirov, Ekaterina Voskresenskaya, Ivan Ivanitskiy, Ramil Takhaviev,
Evgeny Marchenko, and Yaroslav Alexandrov. 2018. Smartcheck: Static analysis
of ethereum smart contracts. In Proceedings of the 1st International Workshop on
Emerging Trends in Software Engineering for Blockchain. 9–16.

[27] Petar Tsankov, Andrei Dan, Dana Drachsler-Cohen, Arthur Gervais, Florian
Buenzli, and Martin Vechev. 2018. Securify: Practical security analysis of smart
contracts. In Proceedings of the 2018 ACM SIGSAC Conference on Computer and
Communications Security. 67–82.

[28] Dmitry Vyukov. 2015. Dvyukov Go-fuzz. https://github.com/dvyukov/go-

fuzz(2020).

[29] Valentin Wüstholz and Maria Christakis. 2020. Harvey: A greybox fuzzer for
smart contracts. In Proceedings of the 28th ACM Joint Meeting on European Software
Engineering Conference and Symposium on the Foundations of Software Engineering.
1398–1409.

[30] Huang Yuhe, Jiang Bo, and Chan WK. 2020. EOSFuzzer: Fuzzing EOSIO Smart

Contracts for Vulnerability Detection. arXiv preprint arXiv:2007.14903 (2020).

[31] Qinghe Zhang. 2018. Research on Identification and Access Control Technology in

Blockchain. Master’s thesis. Beijing Jiaotong University.

[32] Zengjun Zhang, Ning Dong, and Xuantong Zhu. 2018. In-depth exploration of

blockchain: hyperledger technology and application.

[33] Zibin Zheng, Shaoan Xie, Hongning Dai, Xiangping Chen, and Huaimin Wang.
2017. An overview of blockchain technology: Architecture, consensus, and future
trends. In 2017 IEEE international congress on big data (BigData congress). IEEE,
557–564.

