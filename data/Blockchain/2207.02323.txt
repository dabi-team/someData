IEEE Copyright Notice Copyright (c) 2022 IEEE Personal
use of this material is permitted. Permission from IEEE must
be obtained for all other uses, in any current or future media,
including reprinting/republishing this material for advertising
or promotional purposes, creating new collective works, for
resale or redistribution to servers or lists, or reuse of any
copyrighted component of this work in other works.

the

author-submitted
Policy

IEEE
(see
This
is
Preprint
https://cis.ieee.org/publications/
t-emerging-topics-in-ci/tetci-ieee-preprint-policy (accessed 4
July 2022)). The accepted article will be published in:

article

the

Proceedings of the 2022 IEEE International Conference on
Decentralized Applications and Infrastructures (DAPPS’22:
15-18 Aug 2022, San Francisco, USA)
DOI: to be published

2
2
0
2

l
u
J

5

]

C
D
.
s
c
[

1
v
3
2
3
2
0
.
7
0
2
2
:
v
i
X
r
a

 
 
 
 
 
 
Can We Effectively Use Smart Contracts to
Stipulate Time Constraints?

Tobias Eichinger
Service-centric Networking
Technische Universit¨at Berlin
Berlin, Germany
tobias.eichinger@tu-berlin.de
0000-0002-8351-2823

Marcel Ebermann
Service-centric Networking
Technische Universit¨at Berlin
Berlin, Germany
marcel.ebermann@tu-berlin.de

Abstract—Smart contracts provide the means to stipulate rules
of interaction between mutually distrustful organizations. They
encode contractual agreements on the basis of source code,
which else need to be contractualized in natural language. While
the mediation of contractual agreements via smart contracts is
seamless in theory, it requires that the conditions of an interaction
are accurately made available in the blockchain. Time is a
prominent such condition. In the paper at hand, we empirically
measure the consistency of a smart contract to yield equal results
on the basis of the time of an interaction and its potentially
inaccurate representation in the blockchain. We propose a novel
metric called execution accuracy to measure this consistency. We
speciﬁcally measure the execution accuracy of a time interval-
constrained smart contract that executes distinct logic within
and without some constraint interval. We run experiments for
the local Ganache and Quorum and the public G¨orli and Rinkeby
Ethereum blockchains. Our experiments conﬁrm our intuition
that execution accuracy decreases near interval bounds. The
novelty of our proposed metric resides in its capacity to quantify
this decrease and make distinct blockchains comparable with
respect to their capacity to accurately stipulate time contraints.

Index Terms—time-sensitive smart contract, execution accu-
racy, time injection, block timestamp method, injection accuracy,
time interval constraint

I. INTRODUCTION

Smart contracts provide the means to stipulate rules of inter-
action between mutually distrustful organizations. They have
been proposed to execute business [1], [2] and manufacturing
[3], [4] processes seamlessly across multiple organizations.
Although conceptually seamless, a practical difﬁculty is the
accurate time injection into a blockchain, where we denote by
time injection the act of making world time available for smart
contract execution [5]. Consider for instance a smart contract
that periodically updates a variable holding the current world
time as a UNIX timestamp. As part of the blockchain state,
world time can now be used within smart contracts.

Time is a key aspect of business and manufacturing pro-
cesses [6], [7]. Consider for instance two manufacturing activ-
ities that require a certain time delay. Only if the start and end
time of an activity are accuractely injected into a blockchain,
delays and time constraints can be correctly coordinated. In
particular, coordinating an entire process requires time to
be injected not only once but continuously throughout the

Fig. 1. Comparison of injection and execution accuracy. While injection
accuracy measures time offsets, execution accuracy measures probabilities.

process. We denote by continuously injecting time into a
blockchain as time tracing. In brief, process execution depends
on time tracing, which in turn depends on time injection.

Ladleif and Weske [8] survey ﬁve distinct time injection
methods for use in blockchains. They conclude that there
is no objectively best time injection method. The so-called
parameter method is ideal for scenarios in which senders of
transactions are trustworthy. Here, senders of a transaction
truthfully attach the current world time to a transaction. World
time and injected time are hence trivially identical. In this
case, the result of executing smart contract logic on the basis
of world time and injected time is identical.1 In contrast, if
world time and injected time are not equivalent, execution may
yield inaccurate results due to inaccurate time injection. Figure
1 illustrates inaccuracies caused by inaccurate time injection.
We denote by execution accuracy the probability that the
execution of smart contract logic on the basis of world time
and injected time yield identical results. The parameter method
mentioned in the previous paragraph yields perfect execution
accuracy. However, it is only useful in scenarios in which
senders of transactions are trustworthy. If senders are not

1Here, we assume that execution logic is independent from other transac-

tions calling the smart contract.

Reference Time of Execution World TimeInjected Time Injection/ExecutionAccuracy  Smart Contract (Paper Submission)Accept Papers before 23:59:59 Execution ResultSubmission valid Submission invalid 0% trustworthy, the block timestamp method is an alternative time
injection method [8]. Here, world time is injected by the miner,
instead of the sender. World time is injected as the block
timestamp of the block the calling transaction is mined into.
We denote by injection accuracy the offset between world
time and injected time. The injection accuracy of the block
timestamp method then depends on for instance (a) the block
time,
is the difference in timestamps of consecutive
blocks, (b) the fee offered to the miners, and (c) the miners
themselves who set block timestamps. While injection accu-
racy for the block timestamp method is well-understood [9],
[10], execution accuracy is not. This is due to the fact that
injection accuracy solely depends on the network properties of
the blockchain, while execution accuracy additionally depends
on the speciﬁc execution logic of smart contracts.

that

In summary, coordinating process execution on blockchains
is only meaningful if the result of calling a smart contract
is consistent over world time and injected time. Injection
accuracy cannot fully describe such consistency, since injec-
tion accuracy is independent from smart contract execution
logic. In order to address this gap, we propose the following
contributions:

• We introduce execution accuracy as a metric that mea-
sures the consistency with which time-sensitive smart
contract execution on world time and injected time match.
• We measure execution accuracy of a time interval-
constrained smart contract with respect
to the block
timestamp method. Measurements are made on two local
Ethereum implementations Ganache2 and Quorum3 and
the G¨orlie4 and Rinkeby5 Ethereum test networks.

• We share the code of our test bed with the community.

II. RELATED WORK

We ﬁrst review literature that studies time injection indepen-
dently from the execution logic of smart contracts with respect
to their injection delay and injection accuracy. Afterwards, we
tend to application-speciﬁc aspects of time injection.

A. Accuracy and Latency of Time Injection

Blockchains can only validate whether time was injected
correctly, that is formally correctly according to the blockchain
protocol. Measuring injection accuracy is infeasible from
within a blockchain. Injection accuracy needs to be measured
outside of it. In particular for time injection via so-called or-
acle contracts, measuring injection accuracy can be translated
into a trust issue toward the stakeholder that injects time [5],
[9]. Roughly, injected time can be assumed to be accurate
if the stakeholder injecting time is trustworthy. Applications
typically do require continuous injection of time instead of
single instances of time injection. We tend to prior work in
applications that continuously inject time.

2https://trufﬂesuite.com/ganache/ (accessed 5 May 2022)
3https://consensys.net/quorum/ (accessed 5 May 2022)
4https://goerli.net/ (accessed 5 May 2022)
5https://www.rinkeby.io/ (accessed 5 May 2022)

B. Time Injection in Applications

Tracing digitally on a blockchain what happens physically in
the world is key to collaborative manufacturing processes [3],
[11], [12]. This is because smart contracts cannot immediately
access the state of the physical world. In particular,
they
cannot immediately access world time. Consider for instance
a manufacturing process that requires a product to cool down
to a certain temperature before it can be prepared for delivery.
The temperature is traced on the blockchain such that the
manufacturing process can be correctly coordinated. Using a
digital model that traces the state of a physical product is
generally denoted using a digital twin [13].

While collaborative manufacturing mainly traces the state
of a product, collaborative business processes typically trace
interactions between stakeholders [6]. The business process
itself is executed in a process engine [14]. Here, smart con-
tracts deﬁne conditions, particularly temporal conditions, for
interactions and contractual agreements between stakeholders
[6], [7]. Consider for instance a smart contract that sets the due
date for the reception of products to prepare for delivery. The
delivery service provider may then refuse to receive products
when the smart contracts veriﬁes that the due date has passed.
Time tracing is distinct from time synchronization. Time
synchronization aims to equalize offsets in distinct world
time measurements [15]. In contrast, time tracing is about
continuously persisting world time references on a blockchain.
Since blockchains establish a concept of time that is distinct
time tracing cannot be considered
from world time [16],
synchronization as no offsets are harmonized. It is important to
see that block timestamps represent references to world time,
they are not themselves world time timestamps.

We now explain how block timestamps as references to
world time timestamps can be injected into a blockchain and
used to implement time interval constraints in smart contracts.

III. CONCEPT

We formalize the block timestamp method. We then deﬁne a
prototypical time interval-constrained smart contract. Finally,
we present our test bed and describe how it can be used to
measure execution accuracy.

A. The Block Timestamp Method

We ﬁrst introduce some notation. Let B = (Bi)i∈N be an
inﬁnite sequence of blocks that represent a blockchain. Every
block Bi holds a sequence of transactions. Transactions in a
block have been found valid by a miner, where valid means
that state transitions conform with the underlying blockchain
protocol. Hence, any ﬁnite subsequence of blocks (Bi)1≤i≤N
represents a valid state of the blockchain B. We associate
every block Bi with a timestamp ti ∈ R≥0 such that ti < tj
for all i < j. Then blockchain B is associated with an inﬁnite
and strictly increasing sequence t = (ti)i∈N of so-called block
timestamps. Block timestamps are not essential to blockchains,
yet convenient since they reference when a block was mined.
We formalize the block timestamp method as described for
instance in [8]. Let x be a transaction sent at world time tx that

TABLE I
FOUR DISTINCT STATES OF A TIME INTERVAL-CONSTRAINED SMART
CONTRACT AS DESCRIBED IN SECTION III-B.

ˆtx ∈ I; (ˆp = 1)

ˆtx /∈ I; (ˆp = 0)

tx ∈ I; (p = 1)
tx /∈ I; (p = 0)

true positive
false positive

false negative
true negative

calls some time-sensitive smart contract C. We denote by ˆtx
the injected time of world time tx. Let further Bi be the latest
block and ti its block timestamp. Then x is communicated
to miners within the blockchain network. Miners determine
a valid next block Bi+1 that includes x and is associated
to some block timestamp ti+1 > ti. Particularly, the block
timestamp method sets ti+1 = ˆtx. The reference time used
to execute the time-sensitive smart contract C is exactly the
block timestamp. We now present our test bed in which time-
sensitivity represents a time interval constraint.

B. Time Interval-Constrained Smart Contract

We deﬁne a prototypical time-sensitive smart contract that
implements an interval time constraint. Similarly to the exam-
ple shown in Figure 1, the prototypical time-sensitive smart
contract then executes distinct behavior within and without
some reference time interval I. Formally, let C be a smart
contract initialized with some interval I = [a, b] ⊂ R≥0 and
two binary state variables p and ˆp. Let further x be some
transaction submitted to the blockchain network at world time
tx and included into a block Bi with block timestamp ti. Then
C sets its state variable p = 1 if world time tx satisﬁes the
time constraint (tx ∈ I), and else p = 0 (tx /∈ I). Analogously,
we set ˆp = 1 and ˆp = 0 for injected time ˆtx.

Table I shows the four possible states deﬁned by the binary
state variables p and ˆp. In analogy to binary classiﬁcation
in machine learning, we associate the state variable p with
the true condition of world time. From the perspective of the
blockchain, we interpret injected time as a prediction of the
true world time when transaction x was sent. We associate the
state variable ˆp with the predicted condition of world time.
Table I thus technically represents a confusion matrix.

Recall that execution accuracy measures the consistency
with which a smart contract yields the same result with
reference to world time and injected time. In other words,
it measures the probability that the smart contract C enters
either a true positive or true negative state. We now present
the test bed we use to measure this probability.

C. Test Bed

We empirically estimate the probability that a transaction x
submitted to the blockchain network at world time tx either
yields a true positive or true negative smart contract state.
Since the state of the smart contract C depends on world time
tx and injected time ˆtx, we need to make both available at
execution time. We use the parameter method (see Section I)
to make world time available and choose another time injection
method such as the block timestamp method (see Section

Fig. 2. Experimental setup used to measure execution accuracy, where tx
denotes world time when sending a calling transaction x to the smart contract
and [p, ˆp] the smart contract state induced by it. For presentational simplicity,
we omit the intermediary blockchain between sender and smart contract.

III-A) to make injected time available. The smart contract C
can then determine its state after being called by a transaction.
In order to estimate probabilities for each of the four
possible states to occur, we call the smart contract at regular
intervals by sending a transaction to it. We send a total of N
transactions over an experiment interval J ⊃ I that includes
the constraint interval I = [a, b] of the time-sensitive smart
contract C. Note that sending a transaction to C overwrites
any previous state of C. In order to persist all state changes
over the course of the experiment, we ﬁrst initialize an array
of length n in the smart contract. Throughout the experiment,
we then persist all n state changes ([p, ˆp]) in the array. After
the experiment, we fetch the results by reading the ﬁlled array
from the smart contract. Figure 2 shows a schematic workﬂow
of an experiment. It remains to formally deﬁne execution
accuracy and how to read it off the array.

D. Execution Accuracy

Accuracy is a standard metric used to evaluate the quality of
a binary classiﬁer in machine learning. It measures how well
a binary classiﬁer predicts the true class of an observation out
of the two possible classes positive and negative correctly .
Accuracy can be understood as the probability that a binary
classiﬁer correctly predicts the class of an observation to be
positive when it is truly positive (true positive), and negative
if it is truly negative (true negative). For a test set of N
observations, accuracy A of a binary classiﬁer is deﬁned as

A = (true positives + true negatives)/N

(1)

We now translate this accuracy metric for binary classiﬁers
into the already outlined execution accuracy metric by estab-
lishing a link to the four distinct states of a time interval-
constrained smart contract as shown in Table I.

We interpret the time-sensitive smart contract C as a binary
classiﬁer. From the perspective of the blockchain, we interpret
observations as instances of injected time ˆtx. Then, the state
variable p represents the true class of an observation and
the state variable ˆp represents the predicted class of an
observation. More speciﬁcally, the state value 1 is associated
with the positive class and the state value 0 is associated with

repeat n times  SenderinitializeArray(N)Smart ContractwriteToArray([p, p̂])readArray()InitializeExperimentRunExperiment FetchResults call(tx)Fig. 3. Relative frequencies of true positives (TP), true negatives (TN), false positives (FP), and false negatives (FN) for a time interval-constrained smart
contract and the block timestamp method on the GoQuorum (left) and Ganache (right) local Ethereum blockchains for distinct blocktimes b = 1, 4, 8 (top to
bottom).

the negative class. For a set X of n transactions, we deﬁne
execution accuracy Aexecution as

differently on else equal conﬁguration parameters. We make
our source code available to the community.6

Aexecution = {x ∈ X|tx, ˆtx ∈ I ∨ tx, ˆtx /∈ I}/n

= {x ∈ X|C is true positive}/n

(2)

+ {x ∈ X|C is true negative}/n

in analogy to accuracy A in Equation (1). Observe that
execution accuracy depends on the contraint interval I. Since
I is part of the time-sensitive execution logic of C, we see in
particular that execution accuracy depends on C’s execution
logic as desired. We now present empirical measurements of
execution accuracy on four distinct Ethereum blockchains.

IV. EVALUATION

We measure execution accuracy of a time interval-
constrained smart contract on the Ganache and Quorum local
Ethereum blockchains and the G¨orli and Rinkeby Ethereum
test network. We will see that execution accuracy can behave

A. Experimental Setup

We implement a test bed following the description in
Section III-C and a time interval-constrained smart contract C
following the description in Section III-B. More speciﬁcally,
we use constraint intervals of Ilocal = [15, 30], Itest = [60, 120]
and experiment intervals Jlocal = [0, 45], Jtest = [0, 135] for the
local and test networks respectively, where we measure time
in seconds. We inject time via the block timestamp method
as described in Section III-A. We make available world time
for smart contract execution via the parameter method. More
speciﬁcally, we attach a string representing the current world
when sending a transaction to the transaction.

For each of the four blockchains to measure, we run 30
experiments. Over the course of an experiment,we send one
transaction per second. After all transactions are mined, we
read the now ﬁlled array holding the state changes [p, ˆp]. Recall

6https://github.com/marcelTUB/Execution-Accuracy-Testbed

01530450255075100constraint intervalQuorum0153045constraint intervalGanacheTPTNFPFN01530450255075100constraint interval0153045constraint interval0153045time in s0255075100constraint interval0153045time in sconstraint intervaltransactions in %blocktime=1sblocktime=4sblocktime=8sFig. 4. Relative frequencies of true positives (TP), true negatives (TN), false positives (FP), and false negatives (FN) for a time interval-constrained smart
contract and the block timestamp method on the Rinkeby (left) and G¨orli (right) Ethereum test networks.

that p and ˆp are the two binary state variables of C as shown in
Table I. There, we see that C enters one of four distinct states
after being called by a transaction: true positive (p = 1; ˆp =
1), false positive (p = 0; ˆp = 1), true negative (p = 0; ˆp = 0),
and false negative (p = 1; ˆp = 0). If the array only holds true
positives and true negatives, execution accuracy is perfect (see
Equation (2)).

We will see in the following sections that

the relative
frequency with which a calling transaction x changes the state
of the smart contract C to any of the four states depends
on the time tx of its sending. Note that the blockchains we
measure use integer-valued block timestamps that represent
full seconds. We therefore split results by their time of sending
tx into batches of full seconds. Consider for instance the
experiment interval J = [0, 3]. We then split results into
three batches of transactions sent during the subintervals
[0, 1), [1, 2), and [2, 3] respectively. Note that sending many
transactions within a short timeframe is prohibitive on most
test blockains. We therefore average results per batch over
multiple rounds of experiments per blockchain.

B. Execution Accuracy on Local Blockchain Networks

On local blockchain networks, measuring the impact of
distinct parameter conﬁgurations on execution accuracy is
readily feasible, as setting up a newly conﬁgured blockchain
comes with little effort. We thus experimented with many
distinct parameter conﬁgurations locally. We ﬁnd that varying
the blocktime and recommit interval length has an immediate
impact on execution accuracy.

The blocktime deﬁnes the offset between block timestamps
of consecutive blocks. Recommit intervals deﬁne periods of
time when blockchain nodes aggregate transactions submitted
to the blockchain. Aggregating transactions before they are
presented to miners is usually beneﬁcial from a cost perspec-
tive, since less candidate blocks are attempted to be validated
by miners overall. Certainly, the cost aspect only holds true
for non-local blockchains, while the impact of aggregation on
execution accuracy pertains to local blockchains.

As expected, we ﬁnd that increasing either the blocktime or
the length of recommit intervals jeopardizes execution accu-
racy on average. Since the recommit interval length parameter
is not available on the Quorum blockchain, we omit reporting

detailed results on changing the recommit
Instead, we report results on varying the blocktime.

interval

length.

Figure 3 shows relative frequencies with which the smart
contract C enters its four distinct states. Results are batched
into batches of length 1 as described in Section IV-A. At large,
both Ganache and Quorum yield similar results. We can see
that the relative frequencies differ before, during, and after the
constraint interval. We thus describe each segment separately.
Before Constraint Interval (tx ∈ [0, 15)): To the left of
constraint intervals, we only observe true negatives and false
positives. Recall that execution accuracy equals the sum of the
relative frequencies of true positives and true negatives (see
Equation (2)). Since the relative frequency of true positives
is zero in this segment, execution accuracy is immediately
equal to the relative frequency of true negatives. We thus
see that execution accuracy is initially perfect and deterio-
rates approaching the left bound of the constraint interval. A
comparison of Ganache and Quorum yields that Quorum is
more execution accurate than Ganache.

During Constraint Interval (tx ∈ [15, 30)): Within the
constraint interval, we only observe true positives and false
negatives. Inversely to the segment before the constraint inter-
val, we have that execution accuracy is equal to the relative
frequency of true positives instead of true negatives. Execution
accuracy generally becomes lower near the interval bound. A
comparison of Ganache and Quorum yields that Quorum is
more execution accurate than Ganache at the lower interval
bound yet less accuracte at the upper interval bound.

Past Constraint Interval (tx ∈ [30, 45)): To the right
interval, we observe true negatives and
of the constraint
false positives. Similarly to the segment before the constraint
interval, we again have that execution accuracy equals the
relative frequency of true negatives. Execution accuracy is
lower near the upper interval bound and increases to perfect
execution accuracy. A comparison of Ganache and Quorum
yields that Quorum is more execution accurate than Ganache.
In summary, execution accuracy is generally perfect within
and without the constraint interval. However, execution ac-
curacy decreases toward interval bounds. This descrease is
asymmetric, that is execution accuracy is better past an interval
bound than before. The extent of this discrepancy depends

0153045607590105120135time in s0255075100constraint intervalRinkeby0153045607590105120135time in sconstraint intervalGörliTPTNFPFNtransactions in %largely on the blocktime, yet also on the blockchain imple-
mentation at hand. We now measure the two test networks
Rinkeby and Goerli, which we cannot conﬁgure at will.

C. Execution Accuracy on Test Networks

test networks. We see that

Figure 4 shows relative frequencies for the Rinkeby and
G¨orli
the behavior of relative
frequencies resembles that measured on local blockchains at
large. Observe however that the G¨orli test network exhibits
a lengthy period of false negatives in the interval [0, 30). An
analysis yields that this is due to the G¨orli network sometimes
having unexpectedly long response times. Transactions are
sent long before the constraint interval, yet still found to
satisfy the time interval constraint as they are presented and
mined belatedly during the time of the constraint interval. We
conclude that the Rinkeby network is more execution accurate
than the G¨orli network on average.

V. CONCLUSION

The stipulation of time constraints via smart contracts on
blockchains is inherently inaccurate. To date, this inaccuracy
has only been characterized as the result of protocol and
network delays and latencies irrespective of smart contract
execution logic. We extend this characterization by proposing
execution accuracy, a novel metric that quantiﬁes this inaccu-
racy on the basis of smart contract execution logic instead.

We speciﬁcally study interval time-constrained smart con-
tracts that execute distinct logic within and without a pre-
deﬁned time interval. This class of smart contracts can for
instance implement time-sensitive access control to a manufac-
turing device. Access is granted within a time interval, and else
denied. Here, execution accuracy is the probability that access
is accurately granted and denied. In contrast, inaccurate exe-
cution behavior encompasses cases in which access is falsely
granted when requested without the interval, or falsely denied
when requested within the interval. Our analysis conﬁrms
that execution accuracy decreases near interval bounds and
in addition to prior work quantiﬁes this decrease.

The scope of the paper at hand is limited in three aspects.
First, we only study absolute constraint intervals, that is con-
straint intervals that have ﬁxed bounds. The study of execution
accuracy for dynamic interval bounds is due. Second, we only
study stateless execution logic, that is execution logic that is
independent from the state of a smart contract. The study of
stateful execution logic is due. Third, we only study the block
timestamp time injection method. In particular, measuring
execution accuracy of oracle-based time injection is due.

REFERENCES

[1] J. Mendling, I. Weber, W. V. D. Aalst, J. V. Brocke, C. Cabanillas,
F. Daniel, S. Debois, C. D. Ciccio, M. Dumas, S. Dustdar, A. Gal,
L. Garc´ıa-Ba˜nuelos, G. Governatori, R. Hull, M. L. Rosa, H. Leopold,
F. Leymann, J. Recker, M. Reichert, H. A. Reijers, S. Rinderle-Ma,
A. Solti, M. Rosemann, S. Schulte, M. P. Singh, T. Slaats, M. Staples,
B. Weber, M. Weidlich, M. Weske, X. Xu, and L. Zhu, “Blockchains
for business process management - challenges and opportunities,” ACM
Trans. Manage. Inf. Syst., vol. 9, no. 1, 2018.

[2] I. Weber, X. Xu, R. Riveret, G. Governatori, A. Ponomarev, and
J. Mendling, “Untrusted business process monitoring and execution
using blockchain,” in Business Process Management. Springer, 2016,
pp. 329–347.

[3] C. P. Nielsen, E. R. da Silva, and F. Yu, “Digital twins and blockchain
– proof of concept,” Procedia CIRP, vol. 93, pp. 251–255, 2020, 53rd
CIRP Conference on Manufacturing Systems 2020.

[4] M. Westerkamp, F. Victor, and A. K¨upper, “Tracing manufacturing
processes using blockchain-based token compositions,” Digital Commu-
nications and Networks, vol. 6, no. 2, pp. 167–176, 2020.

[5] R. M¨uhlberger, S. Bachhofner, E. Castell´o Ferrer, C. Di Ciccio, I. Weber,
M. W¨ohrer, and U. Zdun, “Foundational oracle patterns: Connecting
blockchain to the off-chain world,” in Business Process Management:
Blockchain and Robotic Process Automation Forum.
Springer, 2020,
pp. 35–51.

[6] A. Abid, S. Cheikhrouhou, and M. Jmaiel, “Modelling and executing
time-aware processes in trustless blockchain environment,” in Proceed-
ings of the 14th International Conference on Risks and Security of
Internet and Systems. Springer, 2020, p. 325–341.

[7] S. Cheikhrouhou, S. Kallel, N. Guermouche, and M. Jmaiel, “The
temporal perspective in business process modeling: a survey and research
challenges,” Service Oriented Computing and Applications, vol. 9, p.
75–85, 2015.

[8] J. Ladleif and M. Weske, “Time in blockchain-based process execution,”
in Proceedings of the 24th IEEE International Enterprise Distributed
Object Computing Conference.

IEEE, 2020, pp. 217–226.

[9] J. Ladleif, I. Weber, and M. Weske, “External data monitoring using
oracles in blockchain-based process execution,” in Business Process
Management: Blockchain and Robotic Process Automation Forum.
Springer, 2020, pp. 67–81.

[10] R. Yasaweerasinghelage, M. Staples, and I. Weber, “Predicting latency of
blockchain-based systems using architectural modelling and simulation,”
in Proceedings of the 2017 IEEE International Conference on Software
Architecture.

IEEE, 2017, pp. 253–256.

[11] C. Mandolla, A. M. Petruzzelli, G. Percoco, and A. Urbinati, “Building
a digital twin for additive manufacturing through the exploitation of
blockchain: A case analysis of the aircraft industry,” Computers in
Industry, vol. 109, pp. 134–152, 2019.

[12] B. Putz, M. Dietz, P. Empl, and G. Pernul, “Ethertwin: Blockchain-based
secure digital twin information management,” Information Processing &
Management, vol. 58, no. 1, 2021, article 102425.

[13] E. VanDerHorn and S. Mahadevan, “Digital twin: Generalization, char-
acterization and implementation,” Decision support systems, vol. 145,
2021, article 113524.

[14] O. L´opez-Pintado, L. Garc´ıa-Ba˜nuelos, M. Dumas, I. Weber, and
A. Ponomarev, “Caterpillar: A business process execution engine on
the ethereum blockchain,” Software: Practice and Experience, vol. 49,
no. 7, pp. 1162–1193, 2019.

[15] E. Regnath, N. Shivaraman, S. Shreejith, A. Easwaran, and S. Steinhorst,
“Blockchain, what time is it? trustless datetime synchronization for iot,”
in Proceedings of the 2020 International Conference on Omni-layer
Intelligent Systems.

IEEE, 2020, pp. 1–6.
[16] M. Swan, “Blockchain temporality: Smart contract time speciﬁability
with blocktime,” in Rule Technologies. Research, Tools, and Applica-
tions. Springer, 2016, pp. 184–196.

