1
2
0
2

t
c
O
1
2

]

C
D
.
s
c
[

1
v
8
4
3
1
1
.
0
1
1
2
:
v
i
X
r
a

USER INCENTIVES FOR BLOCKCHAIN-BASED DATA SHARING
PLATFORMS

A PREPRINT

Vikas Jaiman
Institute of Data Science
Maastricht University
6211 LK Maastricht, The Netherlands
v.jaiman@maastrichtuniversity.nl

Leonard Pernice
School of Business and Economics
Maastricht University
6211 LK Maastricht, The Netherlands
l.pernice@alumni.maastrichtuniversity.nl

Visara Urovi
Institute of Data Science
Maastricht University
6211 LK Maastricht, The Netherlands
v.urovi@maastrichtuniversity.nl

October 25, 2021

ABSTRACT

Data sharing is very important for accelerating scientiﬁc research, business innovations, and for
informing individuals. Yet, concerns over data privacy, cost, and lack of secure data-sharing solutions
have prevented data owners from sharing data. To overcome these issues, several research works have
proposed blockchain-based data-sharing solutions for their ability to add transparency and control to
the data-sharing process. Yet, while models for decentralized data sharing exist, how to incentivize
these structures to enable data sharing at scale remains largely unexplored. In this paper, we propose
incentive mechanisms for decentralized data-sharing platforms. We use smart contracts to automate
different payment options between data owners and data requesters. We discuss multiple cost pricing
scenarios for data owners to monetize their data. Moreover, we simulate the incentive mechanisms
on a blockchain-based data-sharing platform. The evaluation of our simulation indicates that a cost
compensation model for the data owner can rapidly cover the cost of data sharing and balance the
overall incentives for all the actors in the platform.

Keywords Blockchain · Data sharing · GDPR · Incentives · Tokens

1

Introduction

Today, large amounts of data are being generated every second, yet data remains siloed in the databases of hospitals,
companies, and research institutions around the globe. Data sharing is known to accelerate scientiﬁc research, improve
business innovations, and to inform decision-making [1–5]. Yet, several factors contribute to the lack of data sharing in
practice [1, 3] including legislation, institutional concerns, task complexity, use and participation, information quality,
and technical concerns [6]. Stringent data protection laws impede the procurement of large amounts of data. Regulations
such as the General Data Protection Regulation (GDPR) [7], Federal Trade Commission (FTC) Act [8], California
Consumer Privacy Act 2018 (CCPA) [9], UK Data Protection Act 2018 [10], and Australia Privacy Act 1988 [11]
determine several mechanisms of data protection, amongst which GDPR is explicit on the rights of individuals to
request information on collected data, the purpose of use, with whom data is shared, as well as request rectiﬁcation or
deletion of their data.

At a minimum, sharing personal records (i.e. patient data) requires involving individuals in the data-sharing process.
This process includes the expression of informed consent which is normally collected via consent forms speciﬁcally

 
 
 
 
 
 
A PREPRINT - OCTOBER 25, 2021

tailored for a given study. Secondary use of data is possible when the original consent and the secondary use are
compatible. This process is highly inefﬁcient, often infeasible, and contributes to the lack of secondary data re-use [12].
The typical solution to these issues has been third-party involvement. Users consent to share their data with third parties
by agreeing to license agreements, without necessarily being aware of the connected potential risks or consequences.
With this approach, data is collected and curated by different organizations or companies, to often be sold to those who
can afford to pay the price. An example of this is the deal the direct-to-consumer genetics company 23andMe made
with the biopharmaceutical giant Genentech, to sell access to genomic data on roughly 3000 Parkinson’s patients for a
total of 60 million dollars [13]. Data collections can then become a source of large proﬁts for data processors, however,
the individuals whose data are being processed are rarely involved or compensated in this process. Decentralized
data-sharing networks (such as blockchains) overcome many data-sharing issues by adding a transparency layer for
all data transactions and by directly enabling participants to control their own records [14]. Current decentralization
techniques however are not costless. Most open blockchain platforms are based on payments per transaction, thereby, a
transparency layer and individual data control come with costs and with importunities for building appropriate incentives
for a data market to emerge.

Previous research [15–17] examine incentives that motivate data-sharing and establish several key beneﬁts that include
veriﬁcation of previous research, new interpretations, improved data integrity, resource optimization, guard against
falsiﬁcation, and facilitation of researcher training. However, state-of-the-art blockchain platforms [18–20] don’t
explore the incentives structures for data providers. To date, there is a lack of data-sharing infrastructure that can
sustainably facilitate the incentive structures to motivate data sharing on the blockchain.

Contributions. To overcome these limitations, in this paper, (i) we develop an incentive model to motivate user
participation on a blockchain-based data sharing platform, (ii) we create a functioning prototype from the resulting
incentive model, and (iii) ﬁnally we conduct extensive experiments and analyze the solution in scenarios simulating
real-life user interactions. Speciﬁcally, the scenarios showcase the accruing operational costs inherent to the blockchain
implementation. By conducting these simulations that incorporate user incentives, we create a foundation that showcases
the boundary conditions of a blockchain-based solution for data-sharing. Our approach shows which costs can be
expected from a sophisticated data-sharing platform based on blockchain technology, and how they can be covered by
using such platform. The novelty of this work is an analysis of cost-beneﬁts for two main incentive systems, i) sharing
the costs of data providers and, ii) proﬁt-making for data providers. Our simulation indicates that a cost compensation
model for data provider quickly covers the cost of data sharing.

The remainder of this paper is structured as follows. Section 2 discusses the background work related to blockchain
platforms. Further, section 3 presents the architecture of the incentive model. Next, section 4 presents the implementation
of our solution. Section 5 discusses the evaluation of the proposed model followed by a discussion in section 6. Section 7
discusses related work and highlights the limitations of the state-of-the-art. Finally, section 8 concludes the paper and
presents future works.

2 Background

In this section, we explain Ethereum blockchain, incentives, and our baseline data sharing platform.

2.1 Blockchain as a decentralized network

Blockchain is a decentralized network of nodes that maintains a shared ledger of transactions. Blockchains consist of
chained transaction blocks that are validated and added to the blockchain by the nodes in the network. In order to add
new blocks, they are concatenated with the last conﬁrmed block in the ledger. The cryptographic hash of the previous
block is added to the newly created block to generate an updated hash value. Once the block is added, the transactions
contained in the block are permanent and immutable. Blockchains use validation nodes, also called miners to update
the ledger. The validation is pre-established by a consensus mechanism that speciﬁes what determines a valid block.
Consensus mechanisms differ however they all focus on rewarding validators for maintaining the state of the blockchain.
Open blockchains do not limit or control the validation nodes, however, becoming a validator requires sometimes
substantial initial investments, thus it cannot be seen as a main incentive mechanism for data-sharing platforms because
not all users will become validators. We focus on openly accessible decentralized networks, such as Ethereum [21] for
the openly accessible ledger and the general-purpose architecture. Using the Ethereum blockchain as the starting model
for monitoring data transactions, individuals are able to inspect and control their data sharing preferences. Importantly,
blockchain technology circumvents the need for centralizing data into a third party and supports open data-sharing
agreements that are validated by the network. Blockchain networks, by design, introduce transaction costs. This cost is

2

A PREPRINT - OCTOBER 25, 2021

a computational cost which in Ethereum is measured in gas1. Gas is attributed an Ether value, measured in Wei2. Two
additional open and general purpose blockchain platforms have been recently launched, Cardano [22] and Polkadot [23].
We choose Ethereum for its well-established platform, yet the overall ﬁndings of this work can be applied to any of
these platforms by accounting for the transaction fees and the computational costs of these other networks.

2.1.1 Smart Contract

A smart contract is a digital protocol that facilitates, veriﬁes, and executes one or multiple transactions [24]. Smart
contracts, similarly to real-life physical contracts, translate contractual clauses between two parties. They achieve this
with rules that are written into executable code. Smart contracts are executed independently by the network nodes and
become immutable after deployment. Ethereum smart contracts provide a generic mechanism for building applications
that require agreements between two or more parties. Using smart contracts, the transactions become valid only when
the contractual agreement are met, resulting in the storage of the transaction in the blockchain. We use smart contracts
to deﬁne data-sharing and incentive rules between the data providers and data requesters.

2.1.2 Tokens

Ethereum tokens are a special sub-type of cryptocurrency, usually deﬁned as fungible, exchangeable assets. They are
created from specialized smart contracts and are mostly used to create secondary economies on top of the Ethereum
network. A noteworthy example of this is the DAI stablecoin [25], which is based on the ERC-20 token standard [26]
and is perfectly robust against the volatility that other cryptocurrencies such as Ether or Bitcoin commonly experience.
The Ethereum Improvement Proposals (EIP) [27] is a collection of standards, new features for the Ethereum network.
The main advantage of tokens is a platform-wide standard practice for method deﬁnition which leads to fewer faulty
contracts and easy implementation of interoperability. We use tokens for access control to data, thus providing exclusive
data access based on the established agreements between data-provider and data requesters. More speciﬁcally, tokens
provide a way to link the blockchain irrefutable transactions with data access control, in a way that data is not accessible
to other users (i.e. data requesters) unless there was a prior agreement reached within a smart contract. ERC-20 is a
standard API for tokens in smart contracts that provides base functionality to transfer tokens or approval for third parties
to transfer tokens. Today, there is no mechanism to protect against faulty token transactions, making them irrecoverable
in certain cases. ERC-721 is based on ERC-20 and implements a token standard where each token is unique and can
have different values (non-fungible). This makes it useful for representing physical property and other such assets.
ERC-721 tracks ownership of each token individually. Additionally, tokens can be deleted and associated methods are
robust against faulty inputs. However, it does not provide any type of data structure to associate tokens with individual
properties. In this paper, we adapt the ERC-721 token standard to represent a unique access key to speciﬁc datasets,
since it is the closest standard to our token implementation.

2.2 LUCE

LUCE [28] is a blockchain-based data-sharing platform that allows data providers to verify for which purpose, by
whom, and in which time-frame their data is used. LUCE allows users to share and reuse data in compliance with
license agreements. LUCE ensures compliance with the GDPR by giving the data provider personalized methods to
control their data. Additionally, the data provider can issue updates, change the required license, or completely delete
the dataset. All of these changes perpetuate through the system. A data provider can generally publish and update their
datasets. When a dataset is published, the data provider provides information on it. This includes meta-information
on the dataset, access requirements, and an access link. Afterwards, this information is saved to the respective smart
contract. Thus, each dataset is connected to a separate smart contract. This allows the provider intricate control over
how each dataset should be accessed by requesters. If a data requester fulﬁlls the requirements set by the data provider,
they can make access requests, which are time-bounded. However, requesters can also renew their access time. The
smart contract provides GDPR compliance, which binds all requesters to the access conditions of each respective
dataset. The supervisory authority (e.g. governmental institution) is responsible for enforcing the rights of the data
subjects and general prevention of abuse of the platform. If there is a legal issue, i.e. a data requester’s non-compliance
with the license agreement of a speciﬁc dataset, the supervisory authority is responsible for auditing the related metadata
and various system interactions of the parties involved.

Using LUCE as a basis for a decentralized sharing network, we extend the model with an incentive model and analyze
the scenarios simulating real-life experiences. In our approach, we showcase the accruing operational cost for data
sharing on the LUCE platform.

1a measure of the computational effort required to perform an operation
2Wei is the smallest denomination of Ether.

3

A PREPRINT - OCTOBER 25, 2021

2.3

Incentives

For data providers, compensations can be monetary or reputation-based. However, there are also aspects of the
system that may disincentivize data providers, namely, unavoidable costs arising from the usage of the platform. The
requirement from the perspective of data requesters for using the platform is data availability, which is provided by
incentivizing data providers to use the platform. There are several types of important incentive mechanisms to consider
in decentralized networks:

2.3.1 Research

Data requesters’ are intrinsically motivated to use data-sharing platforms due to the value of data in research. This ties
into the general main incentive of the platform, which is promoting data-sharing on a large scale. This incentive is
powerful for all involved parties (data requesters and providers) due to the potential results from research on shared
data (for example medical research data). Data providers may be interested in ﬁndings but also might simply regard
data-sharing as a goodwill act towards society.

2.3.2 Monetary

Monetary incentives in decentralized networks are important to consider, especially for data providers. Decentralized
networks distribute operational costs, which implies that a data provider will incur initial costs to share data and to keep
them up-to-date. Monetary incentives may be an incentive for data providers. Data requesters on the other hand, maybe
willing to pay for data access.

2.3.3 Reputation

An incentive that does not directly involve monetary incentives is reputation [29, 30]. Data providers may share data
on the platform to receive mentions and recognition for data re-use. This is particularly relevant to researchers who
become data providers to share their data collections for further re-use.

2.3.4 Knowledge

The most important type of incentive will be created by the knowledge shared by data requesters. This could be in
the form of analytical models, which, if returned to data providers, can provide a personalized outcome for every data
provider.

In this paper, we focus on monetary incentives as these are the incentives that we can realistically simulate, without
extensive surveys and practical experimentation in a real-world test environment. Moreover, monetary compensation
and cost allocation are the ﬁrst elements to address in decentralized data-sharing networks as the occurring costs can
discourage data providers from participating in data-sharing.

3

Incentive model architecture

Figure 1 shows the architecture of the user incentive model on LUCE. We develop incentive-based smart contracts to
have interactions between the data providers and data requesters. We present the descriptions as follows:

1. Registry smart contract - provides authorization for data publishing and access requests.
2. Dataset smart contract - handles data publishing, updates, and cost control.
3. Smart contract ownership - deﬁnes the connected contracts as owned by the data provider that deploys the
main contract and is connected to an additional module that allows the owner to delete their smart contract.
4. Access smart contract - handles access and access renewal requests by data requesters and is connected to the

ERC-721 token generation contract.

5. ERC-721 Smart Contract - adapted token standard that handles the token logic that is key to accessing the data.

3.1 Registry Smart Contract

We develop a global registry smart contract that can interface with the LUCE smart contracts to provide access
exclusivity to particular individuals. This registry is deployed and controlled by the institution responsible for verifying
a registrant’s information. When a user registers, their information is connected to a wallet in the blockchain, i.e.
they are anonymous, yet unambiguously associated with their valid license information. Thus, a user’s public key is

4

A PREPRINT - OCTOBER 25, 2021

Figure 1: User incentives architecture on LUCE

synonymous with their identity, and, since it is impossible to deduce the identity of the owner from a public key, they
can act anonymously. The only information associated with these public keys is the requester’s license or the provider’s
publishing permission, and the only parties privy to identifying information are the owner of the key and the authority
that veriﬁed the owner’s identity. When an individual makes their ﬁrst transaction on the blockchain, e.g. publishing
a dataset or requesting access to a dataset, their registration information is veriﬁed internally. This ensures that no
unauthorized individual can interact with the relevant smart contracts, even if they possess the knowledge to circumvent
the LUCE.

However, this centralized control structure functions only as a gateway to the platform and has no inﬂuence on the
actual data-sharing process, any possible monetary transactions, or even any purview of how the platform is used.

3.2 Dataset Smart Contract

The dataset smart contract establishes control for the data provider over their dataset. Each dataset must be published
on a separate dataset smart contract. This provides the supervisory authority with the structure of a comprehensive
record, and meta-information can be changed via an update. Due to GDPR requirements, each update that results in a
change in the meta-information of the respective dataset requires all active data requesters to conﬁrm their compliance.
Speciﬁcally, they will be notiﬁed of the update, and until they have updated their own copy of the data and conﬁrmed
this via a special compliance function, the respective requester cannot make access requests to the data. A different
type of update is if the data provider changes the required license to access the data. In this case, all tokens with the
wrong license type will be deleted by the system, and data requesters get notiﬁed. All affected data requesters must then
conﬁrm their compliance with this change, and delete their copy of the dataset. Finally, the data provider can establish
how the contract handles arising costs.

1. Scenario 1. No compensation - each party pays only their own arising costs.
2. Scenario 2. Cost compensation - the data provider’s costs are covered by the data requesters.
3. Scenario 3. Proﬁt - the data provider seeks to proﬁt from sharing their data.

Generally, the scenarios are meant to showcase how the system reacts to different incentives being implemented. In
general, scenario 1 represents no incentives apart from those naturally arising from using the system, meaning data

5

A PREPRINT - OCTOBER 25, 2021

providers are most likely disincentivized from using the system since they incur costs by using it. Scenario 2 seeks
to remedy this by implementing a structure that asks data requesters to pay a fraction of the provider’s total running
costs at the time of their request. This results in a gradual decline in running costs for the provider, which represents a
fairness consideration. Therefore early data requesters will pay relatively more than later data requesters since already
transmitted fees are deducted from the running cost in the smart contract. Finally, scenario 3 shows how proﬁts may be
generated, and how soon the break-even point is reached.

To test these scenarios, the dataset smart contract allows data providers to manipulate settings regarding cost allocation.
Data providers can set a percentage proﬁt margin that describes the total earnings aimed for it.

3.3 Smart Contract Ownership

This module establishes a method to control which individuals (i.e. public addresses) can call certain core functions of
the underlying contracts, such as issuing an update to the data. When a data provider deploys their copy of the template
smart contract to publish a dataset, their address is immediately noted as the owner of that smart contract, and all smart
contracts that inherit it. The most important function needs authorization of the owner is the destruction of the contract
and all super and subordinate contracts. This function is implemented in a smart contract sub-module, which allows
the owner to send all funds from the internal balance of the smart contracts to their public address while setting all
internal variables to zero. Therefore any subsequent call to this contract will be voided. With this, we implement the
data providers’ right to delete their data (GDPR, Article 17 [7]). However, it is important to make sure requesters are
adequately informed of this change since they could otherwise mistakenly transfer funds to the destroyed contract,
which would result in those funds being lost forever. LUCE automatically delists a deleted dataset’s contract address
from the data catalog.

3.4 ERC-721 Smart Contract

The purpose of generating tokens as access keys to datasets is that they represent a ﬁxed, standardized data structure that
can be easily interfaced. For this, the token must supply several properties: It must be unique, provide adequate control
methods and internal data structures, and be easily traceable. The ERC-721 smart contract module establishes a list of
all tokens generated. Factually, a token is simply an entry in this list, represented by a unique ID that unambiguously
identiﬁes it. This ID is associated with an owner, i.e. the individual (public address) that minted it. Only the owner can
transfer the token to another individual. The transfer of a token results in all associated values being accessible and
controlled by the new owner. Since requesters should not have the ability to transfer their token to other requesters,
therefore, we created a new structure that associates the token ID with its user, i.e. requester. This results in the user
of a token only having limited control over it, i.e. they can use it for three purposes: accessing the data, renewing
access time to the data, and deleting their access to the data. Moreover, we created an internal data storage structure that
saves meta-information on the requester and the token (e.g. license, access time, etc.), which only the data provider,
respective data requester, and supervisory authority can access. By limiting access to this information we protect the
privacy of the data requester.

3.5 Access Smart Contract

This contract holds the methods for data access and access renewal requests, implements cost coverage and GDPR
compliance systems, and allows data requesters to relinquish their access if it is no longer needed. Whenever a data
requester makes an access request, this contract establishes a connection with the LUCE registry to conﬁrm their license.
In addition, we also implement the cost coverage system, which applies to the settings controlled by the data provider.
If all access requirements are met, the contract will generate a unique token via the ERC-721 contract [31]. This
unique token serves as an access key for the data requester to the data. Figure 2 shows an overview of the methods
data requesters have at their disposal. When the data requester successfully gains access to the data, by default they
are granted two weeks of access time, after which they must either actively delete their copy of and access to the data,
or renew their access time. We implement methods for both options. Access time renewal necessitates that the data
requester has actively conﬁrmed their compliance with GDPR requirements following a potential update by the data
provider. The compliance function signiﬁes that the requester that calls it has actively conﬁrmed their compliance with
all past updates. This serves as a marker for the supervisory authority should there ever be a complaint against the
respective data requester that requires investigation. If this requirement is fulﬁlled, the data requester is given more
access time. Finally, if the data provider wishes to relinquish their access to the dataset, they can do so by disassociating
their public address (i.e. anonymized identity) with the token. This causes the respective data requester to lose access to
the data unless they decide to make a new access request.

6

A PREPRINT - OCTOBER 25, 2021

Figure 2: Access methods for a data requester in the access smart contract module.

4

Implementation

In this section, we provide the implementation details of the smart contracts and the extension of LUCE [28] with the
user incentive model proposed in this paper.

Experimental setup. We implement the smart contracts of the incentive model in Solidity [32], a language for smart
contracts provided by Ethereum. Our incentive model is then embedded into the LUCE platform – a blockchain-based
data sharing platform deployed on Ganache Ethereum network [33]. To run our experiments, we use LuceDocker
– a dockerized version of LUCE. The dockerized image is deployed on a server hosted by the Institute of data
science, Maastricht University, and the web-hosted version is accessible via https://luce.137.120.31.102.nip.
io. Moreover, LuceVM virtual machine [28] is also available to run the experiments which is running on a 64 bit
Ubuntu 16.04 LTS (Xenial Xerus) Linux operating system. The virtual machine is equipped with 1024 MB RAM. Our
incentive model implementation is available as open-source3.

Our incentive model is implemented on top of the Ethereum blockchain. It uses Web3 javascript libraries [34] to
interact with the Ethereum blockchain. It uses Django [35] for implementing the user interface. The data providers
interact via the Django web framework to share the data and specify the associated incentives. It stores the link between
the smart contract and the corresponding datastore location. Through the LUCE platform, the model interacts with
Ganache [33], a test network that creates a virtual Ethereum blockchain and generates pre-conﬁgured accounts that
are used for the development and testing. The accounts are pre-funded which enables the deployment of the contracts.
Ganache provides the balance in ether and notiﬁes the gas used for running the transactions.

3https://github.com/vjaiman/LUCE_Incentives

7

A PREPRINT - OCTOBER 25, 2021

4.1 Data provider cost allocation control

In our incentive model, the running costs after a transaction are equal to the running costs before a transaction in
addition to the cost of the transaction times the proﬁt margin.

currentCostt = currentCostt−1 + gasU sed ∗ gasP rice ∗ prof itM argin

100

The proﬁt margin describes the total earnings aimed for, expenses and returns, and can be set via the setProﬁtMargin
function. If a data provider doesn’t want to make a proﬁt, it is equal to 100% i.e. 100% of the pure costs of the data
provider. If a data provider wishes to generate proﬁts from sharing their data, they must declare their desired earnings
as a linear combination of their costs. In addition, by calling the setMultis function, the data provider can control the
percentage of the running costs that each data requester must pay upon access or access time renewal request. The
providerGasCost modiﬁer applies regardless of the running scenario and represents a convenient way for the data
provider to keep track of their running costs in all scenarios. By using this modiﬁer to measure costs arising from
publishing data, we essentially ask the data provider to make an initial investment. This is beneﬁcial for several reasons.
First, it discourages poor quality data from being shared. Second, it reduces the complexity of the system by a large
margin, since the alternative is employing meta transactions4, which would allow the data provider to sign a prepared
transaction. Afterwards, the data requester transacts the data provider’s signed transaction to the blockchain and thus
pay the associated gas cost directly.

4.2 Data requester methods

In this section, we explain the technical implementation of the core functionalities of the smart contracts used in our
incentive model.

4.2.1 Request access

In our incentive model, access rights are distributed via tokens, which are associated with the data requester once their
legitimate claim has been veriﬁed. To do this, a data requester has to follow a range of requirements; i) a dataset must
be published, ii) the requester must not yet own an access token to this dataset, iii) the requester must be registered and
possess the same license as is required for accessing the data, and iv) ﬁnally, smart contract checks for which scenario it
is running. If it is scenario 2 or 3, a requester must submit an appropriate amount with their access request. Once the
data requester receives an access token, they can call the getLink function to download the dataset.

4.2.2 Renew access time

The access time associated with any access token is ﬁxed to a reasonable amount of time (e.g. 2 weeks). If a data
requester needs the data access for longer, it can renew the access time. For this, a data requester must have an
access token to that speciﬁc dataset. Second, it must have conﬁrmed compliance with any previous updates. The
conﬁrmCompliance function allows data requesters to notify the system of their GDPR compliance following an update,
which allows them to renew their access time to the data.

4.3 Relinquish access

The data requester with a token has a limited range of actions they can take, the most relevant of which are accessing the
data, renewing their access time to the data, and deleting their token should that ever be required. To delete their token,
a data requester must call the burn function, or the smart contract calls it upon a change in the license requirement.
When this requirement is fulﬁlled, the function ﬁrst notes the remaining access time (0 if the access time is expired).
Then, the internal _burn function of the ERC-721 token standard is called, which associates the token with the null
address i.e. it can no longer be used. Regardless of how the function is called, the data requester is notiﬁed of the event.
If the token deletion was issued by the data requester, their compliance is set to true since token deletion should always
involve the deletion of the requester’s copy of the dataset as well. If the token deletion was issued by a change in the
license type, compliance is set to false.

4Meta transactions are a special type of transaction that is signed by one individual and then published so that an arbitrary

different individual can execute them in the name of the signer MetaTransactions.

8

A PREPRINT - OCTOBER 25, 2021

5 Evaluation

In this section, we evaluate the effectiveness of monetary incentives. Our evaluation aims at answering the following
questions:

1. How do costs arise over time from using the system?
2. How long does it take to cover the costs in scenarios 2 and 3?
3. How to ﬁnd a balance between cost coverage for the data provider and fair payment amounts for all data

requesters?

5.1

Initialization

We use Ganache [33] to generate 1000 accounts which are prefunded with 100 Ether. Gas consumption varies based on
the complexity of the functions deﬁned in the smart contract. We consider the gas price of 72 Gwei according to the
current date5 with corresponding Ether price (1 ETH == $1716.52) [36]. Our simulation runs each iteration of the loop
which signiﬁes the passing of 1 period. In each period multiple actions can be made. An action in this context refers to
one of four possible decisions being made: publishing data, updating data, requesting access, or renewing access time.
Each potential data provider and data requester is associated with a certain probability of taking action. We make the
assumption that the chance of data requester taking action underlies normal distribution parameters with independent,
identically distributed variables, since this is the most commonly occurring distribution in nature:

X ∼ (µ, σ2)

For simplicity’s sake, we center our distribution around 0 (µ = 0) and assume standard deviation is 0.1 (σ = 0.1).
To associate each account with a normally distributed probability, we ﬁrst generate 1000 random values of a normal
distribution with the aforementioned parameters. Since the resulting values do not lie between 0 and 1, we normalize
them. This results in a vector of random, normally distributed probabilities, which we append to the user accounts
list. Thus, a data requester will, on average, have a 50% probability to make an access request in a period. However,
since we do not expect data requesters to require access to a speciﬁc dataset for an indeﬁnite amount of time, we adjust
their probability of taking action downwards by a factor of 0.75 each time after they renew their access time to the
data. This results in data requesters renewing their access time only very rarely after the ﬁfteenth time (corresponds
to 0.5*0.7515=0.668%). Thus we achieve a natural balance of data requesters starting, continuing, and stopping to
renew their respective access time and avoid exponential growth of actions being taken per period, which would be
highly unrealistic. We do not simulate data requesters burning their tokens at that point, since it is irrelevant for the data
provider’s costs.

For data providers, we assume that the probability of choosing to publish is far lower than for an average data requester
making an access request. Therefore, each data provider is given a uniformly distributed probability to publish that
lies between 1% and a maximum probability speciﬁed by us (default is 5%). This overwrites the normally distributed
probability assigned to the Ganache accounts designated as data providers. This reﬂects our assumption that data
providers are generally less numerous than data requesters and would thus take action less often.

Assumptions. We make the following assumptions about data providers and data requesters for the simulations.

• The probability of a data provider deciding to publish their dataset is lower than the probability to update it

after publishing.

• The probability of both publishing and updating a dataset is constant, independent of consequent potential

costs arising, and independent of the number of data requesters who have access to the dataset.

• The probability of publishing is independent of the type of dataset.
• The probability of data requesters taking action decreases over time. Therefore, no data requester will continue

to renew access to a single dataset indeﬁnitely.

• Data requesters have an unlimited amount of money potentially available to request access or renew access

time to datasets.

5.2 Starting the simulation

The ﬁrst action in each simulation instance is the ﬁrst data provider publishing their dataset. In each period we check
for each of the four possible actions:

522/06/2021

9

A PREPRINT - OCTOBER 25, 2021

Table 1: Parameters used in the incentive model.

Actions

actionTicker

maxDataProviders = 1

Representation

represents number of actions. This controls the length of
simulations.

represents the default maximum number of data providers we
allow in this simulation.

providerProbabilities
0.05

=

represents the default maximum probability of a new data
provider publishing or updating their data.

updateMultiplier = 5

represents the default multiplier that increases the chance of
a data provider making an update to their data.

Table 2: Cost parameters used in the incentive model.

Parameter

totalCost

transactionCost

currentExpectedCost

nextExpectedCost

providerEarnings

providerCost

Representation

a running total of all arising costs, regardless of how or where
they arise.

the total cost of the transaction resulting from the user’s
action.

the expected cost for a data requester before they make a
transaction

the expected cost for a data requester after they make a trans-
action.

a running total of the amount transmitted to the contract as
payment.

a running total of the costs arising from the provider taking
action (i.e. publishing or updating their data).

• Publish: exactly 1 data provider has the chance to publish (denoted by their probability of taking action). Until
they do publish, no other data provider will be able to publish. This represents the passage of time (periods)
between different providers publishing their data.

• Update: each data provider with a published dataset has the chance to issue an update. We assume that a
data provider, once they published their dataset, is legally required to update it regularly, and we increase the
chance to update by a certain factor.

• Request: exactly 1 data requester has the chance to request access to a randomly determined dataset among
those available. If this data requester does not request access, they will have the same chance to do so in the
next iteration of the loop until such a time where they do make the decision to request access. Afterwards, the
next data requester in line has the chance to make a request. This simulates the potential time gap between
different requesters making access requests.

• Renew: each data requester with an access token will have the chance to renew their access time to the data. In
our simulation, we assume that requesters will only renew access time if it has expired since this is economical
behavior. A data requester may not know precisely for how long they need access, thus it makes sense to add
access time only when needed, especially since potential costs in scenarios 2 and 3 are likely to be lower with
each passing period.

We simulate the passage of time by assigning probabilities to users that might or might not take action. On the other
hand, we attribute access times in real seconds to the tokens generated upon a successful request or access renewal.
Since the simulation would be ﬂawed if these two systems do not operate synchronously, we implemented a condition
that disallows access time renewal until 2 periods after the requester’s last action. This reﬂects the idea that a period is
roughly equivalent to a week, thus each data requester would be able to renew their access to the data for two weeks.

10

A PREPRINT - OCTOBER 25, 2021

Actions

Deployment

publishData

updateData

addDataRequester

renewToken

setLicense

setRegistryAddress

setProﬁtMargin

setPrice

Table 3: Base cost for the core functions of LUCE.

Transaction
cost

Execution cost Ether cost

Cost*

6724230

5118378

95560

43799

475067

45211

39339

37131

35091

31062

72560

20863

453411

23747

37075

14515

13627

9406

0.48414

0.00688

0.00315

0.03420

0.00326

0.00283

0.00267

0.00253

0.00224

$831.03

$11.80

$5.40

$58.70

$5.59

$4.85

$4.58

$4.34

$3.84

*= Ether conversion with present date price

5.3 Determining optimal parameters

As seen in Table 1, the most pivotal variables (apart from the scenario itself) are the actionTicker, and the cost fraction
data requesters must pay when making access requests or renewing their access time. We simulate scenario 2 to
determine the optimal values for these variables since this is the most dependent on actions. We observe that a high
percentage cost distribution (i.e. the fraction a data requester must pay in return for access) leads to a too rapid decline
in the running contract cost and immediate coverage of new arising costs whenever the data provider updates. It is
inherently unfair to the data requesters since some will pay high amounts while others pay almost nothing. On the other
extreme, when data requesters pay only a small fraction of the running contract costs we observe a balancing of revenue
and expenses above zero, which is not the goal of scenario 2. Thus, we conclude that the fraction must lie between
the extremes to be effective i.e. 5% cost coverage and 500 actions. The proﬁt margin for scenario 3 is set to 200%,
meaning the data provider’s total earnings in this scenario are exactly double that of their costs (making for 100% pure
proﬁt after covering costs).

5.4 Cost analysis

Transactions on the Ethereum network have a gas cost that is directly proportional to the internal operations of the
respective function call in the smart contract. Speciﬁcally, storing data on the blockchain is relatively expensive,
therefore, the cost of writing to the blockchain scales with the size of the content. Thus, the deployment cost of a
new smart contract is generally quite high compared to transactions resulting from calling the functions of that smart
contract. Table 2 describes the cost parameters used in the incentive model. Table 3 shows the base costs of the core
functions of LUCE whereas 4 shows the cost of the core functions of the LUCE registry smart contract. These are the
pure transaction costs resulting from calling the respective function, which equates to scenario 1. In scenario 2 and
3, the request and renew functions require additional funds to be transmitted with each function call. As mentioned
before, the costs to update a dataset scale with its active users. Therefore the cost is relatively low when there is no data
requester ($5.40), and far higher when there are e.g. 60 data requesters ($64.30), which makes for roughly $1.07 per
requester for an update. Figure 3 shows that these comparatively higher costs are still easily covered by the system. It
shows the proﬁts generated in each scenario. We can see that after approximately 40 periods in scenario 2, costs are
completely covered, whereas, in scenario 3 the break-even point is reached faster, and positive returns are measured as
soon as period 16.

The cost of updating the meta-information of the data in the smart contract scales with the number of requesters since
each requester must be notiﬁed of that update to give them a chance to comply. Figure 4 displays the relationship of
running contract costs (grey line; the spikes are updates) and individual transactions in more detail. We observe that
the running costs of a smart contract are inﬂuenced by individual transactions made by the data provider and data
requesters. Here, we can more closely observe rising update costs (the blue X marks) and sinking access costs over time
(the orange squares and plus signs). Each data requester in this scenario pays 5% of the running costs at the time of their
request. With this setting, data providers in scenario 2 can veritably expect that their costs will always be covered under
the condition that data requesters continue to use their dataset. If the dataset loses its value, cost coverage may take a

11

A PREPRINT - OCTOBER 25, 2021

Figure 3: Proﬁt over time for each scenario.

Figure 4: Running costs of a smart contract over a period of time in Scenario 2.

longer time, or, in extreme cases, costs may not be covered. In our simulation, the only difference between scenario
2 and scenario 3 is the proﬁt margin. Proﬁts in scenario 3 are effectively a linear multiplication of costs in scenario
2 and follow the same arguments. However, since scenario 3 is explicitly proﬁtable, it reaches the break-even point
faster in proportion to how high the proﬁt margin is set. We can also observe the change in additional costs for data
requesters. After initial deployment (periods 1-20), costs for requesters are higher than otherwise (periods after 20). In
ﬁgure 4, there are 59 data requesters in total, simulated over 118 periods. Speciﬁcally, 27 updates to the data (frequency
0.22/period), 59 access requests (frequency 0.48/period), and 418 access time renewals (frequency 3.54/period). This
makes a total of 505 actions and reﬂects our assumption that there are far more data requesters than providers. The
initial cost for a data requester is dependent on which scenario we are simulating. As mentioned in table 3, the base
cost of requesting access is $58.70. In the other two scenarios, a variable additional price is added to cover the data
provider’s cost or generate the data provider’s proﬁt respectively.

Figures 5 and 6 show requester costs speciﬁc to each scenario. We can observe the average base transaction cost for
requester action types and the additional cost stacked on top (which the requester bears instead of the provider in the
case of scenarios 2 or 3 respectively). Compared to requesters’ individual costs, the data provider has much higher costs,
as shown in ﬁgure 6. Over 118 periods, data providers must invest between $1445 to $3877. However, as demonstrated
by our simulations, even the relatively high initial costs of deployment can be expected to be quickly recovered by
the data provider in the case of scenarios 2 and 3. This reﬂects the assumption that there are far more data requesters

12

A PREPRINT - OCTOBER 25, 2021

Table 4: Cost listing of all functions of the LUCE Registry.

Actions

Deployment

newDataProvider

registerNewUser

updateUserLicense

checkProvider

checkUser

Transaction
cost

621087

44855

45669

27732

23991

23877

Execution cost Ether cost

Cost*

432315

22175

22797

6268

1311

1197

0.04472

0.00323

0.00329

0.00200

0.00173

0.00172

$76.76

$5.54

$5.64

$3.43

$2.96

$2.95

*= Ether conversion with present date price

Figure 5: Additional transaction costs for data requesters to access a dataset.

than providers. If this were not the case, data providers would likely be forced to set higher cost allocation fractions to
cover their costs. For a more detailed overview of what range of costs each user of the platform can expect, we plot the
simulated cost distributions based on each action type in ﬁgure 7 in a logarithmic manner. We can infer from ﬁgure 7
that there are few outliers concerning the cost distribution among data requesters, both when initially requesting access,
and when renewing that access. This can be attributed to the fact that the ﬁrst ﬁve to ten early requesters cover the
majority of initial deployment costs, which are generally much higher than update costs. This unequal distribution of
costs could be smoothed out by choosing a smaller fraction to denote the percentage of the running costs requesters
must cover. If this fraction is chosen too small, it will likely lead to the data provider’s cost not being covered, which
defeats the purpose of scenario 2.

With the simulations of the three distinct scenarios, we show that depending on the parameters set in the smart contract,
(a) data providers face considerable up-front costs to cover the deployment of pertinent smart contracts, and (b) the initial
investment, as well as all running costs incurred by the necessity to regularly update the data, can be rapidly recovered
by data providers. Importantly, this suggests that both cost and monetary incentives would likely be effective means to
motivate data providers to participate in the LUCE platform. In scenario 2, the ability for data providers to quickly
recover up-front investments minimizes the disincentive that up-front costs would otherwise manifest. Consequently,
the main positive incentives in scenario 2, pertinent and reputation, will likely not be signiﬁcantly diminished by cost.

13

A PREPRINT - OCTOBER 25, 2021

Figure 6: Total cost sum of the data provider vs top three data requesters per scenario.

Figure 7: Range of costs arising for each user and action type.

Scenario 3 extends this by additionally introducing a monetary incentive. Here, costs incurred by data providers are
covered with even stronger kinetics than in scenario 2, and they additionally beneﬁt from proﬁts, determined by the
proﬁt margin they set. Through our implementation of how payments by data requesters are calculated, data providers
effectively cannot proﬁt inﬁnitely, depending on the frequency with which they make updates to their data. The proﬁt
calculation is directly derived from occurring costs. Therefore, if data requesters sufﬁciently outnumber data providers,
there will come a point where the data provider has fully achieved their desired proﬁt because it is a linear combination
of their costs. From that point, only new costs incurred by the data provider, e.g. an update to their data, will result
in net proﬁt. This effectively limits how much a data provider can ever proﬁt from high demand and since the same
calculation is used for scenario 2, where no proﬁt is generated, high demand will similarly result in costs being covered
completely, which means requesters have no additional costs from requesting access to the data. In such cases of

14

A PREPRINT - OCTOBER 25, 2021

extremely high demand, it may be a valid fairness consideration of the data provider to lower the percentage of the
running costs each data requester must pay. Conversely, if there is extremely low demand, the data provider may wish
to increase this percentage. As such, we provide the data provider the tools they need to control how their costs are
covered or proﬁts are generated.

6 Discussion

6.1

Incentives

Our results show that in scenario 2 the costs of the data provider are quickly recovered. An important question that
remains is how long this will take in the real world? This time should not be unreasonably high. If we assume that
one period equates to one week, then complete cost coverage will take approximately seven months. Conversely, if
we assume that a period is a day, it will take less than one month to cover all costs. However, since this is based on
stringent assumptions about the users of the system, it is impossible to deduce the number that reﬂects reality. The only
way to reasonably predict this will be a study that surveys how data subjects, providers, and requesters would act if they
had access to the system. Nevertheless, given the low relative costs of data provision for the presumed participants,
even a conservative estimate of cost-recovery over several months would likely not present a signiﬁcant disincentive for
data providers.

6.2 Costs

Additionally, we do not consider costs resulting from the ETL processes required to make data useful for analysis.
Large data providers (i.e a medical center) may need to employ people to facilitate the compilation of relevant data to
be shared on the LUCE platform. These costs could be injected into the smart contract logic, and data requesters will
ultimately defray these additional costs. However, if our assumption holds that data requesters far outnumber providers,
this additional cost will likely not outstrip the costs by an insurmountable margin.

7 Related Work

Several works have focused on data-sharing incentives for decentralized networks. Shrestha et al. [20] introduce a basic
functioning framework for data-sharing via blockchain authentication. Apart from the system’s inherent data-sharing
incentives, authors focus on a monetary compensation incentive for data providers. The authors, however, do not show
the speciﬁcations of incentive mechanisms of requesters to providers i.e. whether proﬁt is generated or the system
strives to achieve break-even. In this paper, we contribute a detailed perspective of costs resulting from data-sharing
platforms utilizing a comprehensive, extended, and easily reproducible prototype with sophisticated smart contract
logic. We show how users can be incentivized to participate in the platform, and what ramiﬁcations different cost
allocations result in the system.

The Ocean protocol [37] functions as a Marketplace listing all available datasets. Data providers hold the data
themselves and only release it when there is a legitimate request, veriﬁable through a respective entry in the underlying
blockchain smart contract. The economy of Ocean is based on their in-house crypto-token called OCN. The OCN token
discourages sharing poor quality data by implementing a staking mechanism that ties the provided data to personal
assets - high-quality data would then result in reaching the break-even point quickly [19]. The drawback is to use of
their in-house token adds a layer of complication to the system that does not necessarily ensure asset value-retention,
since Ocean actively avoided implementation of price stability due to performance concerns. Another drawback is the
lack of autonomous tools for the data provider and data subject to directly, effectively facilitate GDPR compliance [7].
We present LUCE with monetary-based incentive mechanisms which are GDPR compliant and data owners can set their
terms in the smart contract logic while sharing the data. Xuan et al. [38] offer a mathematical analysis of participation
strategies in blockchain-based data-sharing applications based on game theory. Authors derive four conditions for which
they model user participation in the system and create an incentive method that results in a stable user base, i.e. no over
or undersaturation of users willing to share data. This could provide a basis for a more sophisticated simulation that
derives participation probabilities from gain functions and pricing strategies. However, the authors do not detail the data
requesters’ payment structures to pay for the data or the consequences for the bad quality of data received by them. Our
incentive-based approach gives a balanced view of the system with different incentive strategies and is GDPR compliant.
Reputation-based approaches [29, 30] have also been proposed where service providers and requesters are not supposed
to be trusted. Service requesters use reputation-based credentials to choose the service providers which is a perception
of the service provider’s past behavior. Privacy-preserving incentive mechanisms [17, 39] such as ReportCoin [39]
where it motivates users to publish anonymous reporting and incentive is received via their Rcoins. However, in this

15

A PREPRINT - OCTOBER 25, 2021

paper, we only consider and simulate the monetary-based compensation. Some other approaches [40, 41] include
incentive mechanisms for data sharing in IoT and clouds. The authors’ approaches include the Shapley value, which is
commonly used for resource sharing and revenue distribution models. However, the authors also raised the challenge of
achieving a fair distribution of beneﬁts. In our future work, we will test application in a closed environment with real
participants to understand the behavior towards the system and how incentives contribute to it.

8 Conclusion and Future work

In this paper, we present incentive mechanisms for blockchain-based data sharing platforms. We propose multiple
smart contracts that dynamically adjust incentives and participation costs. Using multiple cost pricing scenarios for data
owners we simulate data monetization strategies. We conclude that a cost compensation incentive model can rapidly
cover the cost of data sharing, thus encouraging data owners to share data in the platform. In the future, we will study
end-user interactions to best understand other forms of incentives, such as knowledge sharing, and how that may impact
the dynamics in a data-sharing network. We will also further explore other monetization strategies and generate more
sophisticated simulations that derive participation probabilities from pricing strategies.

Acknowledgment

This work was supported in part by the NWO Aspasia (Grant 91716421) and by the Maastricht York Partnership Grant.

References

[1] C. L. Borgman. The conundrum of sharing data. Journal of the American Society for Information Science and

Technology, 63:1059–1078, 2012.

[2] Nelson B. Empty archives. Nature, 461:160–163, 2009.
[3] Leiden University’s Centre for Science and Technology Studies (CWTS) and Elsevier. Open Data - The researcher
perspective. https://www.elsevier.com/about/open-science/research-data/open-data-report, 2017. accessed May
22, 2018, from Elsevier.

[4] Carol Tenopir, Carole L Palmer, Lisa Metzer, Jeffrey van der Hoeven, and Jim Malone. Sharing data: Practices,
barriers, and incentives. Proceedings of the American Society for Information Science and Technology, 48(1):1–4,
2011.

[5] European Science Foundation. Shared responsibilities in sharing research data: Policies and partnerships, 2007.
[6] Marijn Janssen, Yannis Charalabidis, and Anneke Zuiderwijk. Beneﬁts, adoption barriers and myths of open data

and open government. Information systems management, 29(4):258–268, 2012.

[7] European Union. Gdpr, 2016.
[8] Federal Trade Commission. Federal trade commission act. https://www.ftc.gov/enforcement/statutes/federal-trade-

commission-act, 2006. Accessed February 10, 2021.

[9] State of California Department of Justice. California consumer privacy act (ccpa). https://oag.ca.gov/privacy/ccpa,

2018. Accessed February 10, 2021.

[10] UK Government. Data protection act 2018). https://www.legislation.gov.uk/ukpga/2018/12/contents/enacted,

2018. Accessed February 10, 2021.

[11] Australian Government. Privacy act 1988). https://www.legislation.gov.au/details/c2014c00076, 1988. Accessed

February 10, 2021.

[12] Kaye, J., Whitley, E., Lund, D. et al. Dynamic consent: a patient interface for twenty-ﬁrst century research

networks. Eur J Hum Genet, page 141–146, 2015.

[13] M. Molteni. 23andme deal, 2018.
[14] V. Jaiman and V. Urovi. A consent model for blockchain-based distributed data sharing platforms. IEEE Access,

2020.

[15] C. Tenopir, J.v.d. Hoeven, C.L. Palmer, J. Malone, and L. Metzer. Sharing data: Practices, barriers, and incentives.

2011.

[16] B. Lo and D.L. DeMets. Incentives for clinical trialists to share data. The New England Journal of Medicine,

375(12), 2016.

16

A PREPRINT - OCTOBER 25, 2021

[17] Jingzhong Wang, Mengru Li, Yunhua He, Hong Li, Ke Xiao, and Chao Wang. A blockchain based privacy-

preserving incentive mechanism in crowdsensing applications. IEEE Access, 6:17545–17556, 2018.

[18] A. Azaria, A. Ekblaw, T. Viera, and A. Lippman. Medrec: Using blockchain for medical data access and

permission management. 2016 2nd International Conference on Open and Big Data, 2016.

[19] Ocean Protocol Foundation. Ocean: A decentralized data exchange protocol to unlock data for artiﬁcial intelligence.

2019.

[20] A.K. Shrestha and J. Vassileva. User data sharing frameworks: A blockchainbased incentive solution. 2019.
[21] V. Buterin. Ethereum 2.0 mauve paper. Mauve paper, 2017.
[22] Cardano. Cardano. https://cardano.org, 2021.
[23] Polkadot. Polkadot. https://polkadot.network, 2021.
[24] Nick Szabo. Smart contracts: building blocks for digital markets. EXTROPY: The Journal of Transhumanist

Thought,(16), 18, 1996.
[25] K.C. Tran. What is dai?, 2020.
[26] F. Vogelsteller and V. Buterin. Erc-20, 2015.
[27] M. Becze and H. Jameson. Eip, 2020. (accessed: 24.07.2020).
[28] A. Havelange, M. Dumontier, B. Wouters, J. Linde, D. Townend, A. Riedl, and V. Urovi. Luce: A blockchain

solution for monitoring data license accountability and compliance. Computing Research Repository, 8 2019.
[29] Zhili Zhou, Meimin Wang, Ching-Nung Yang, Zhangjie Fu, Xingming Sun, and Q.M. Jonathan Wu. Blockchain-
based decentralized reputation system in e-commerce environment. Future Generation Computer Systems,
124:155–167, 2021.

[30] Marcela T. de Oliveira, Lúcio H.A. Reis, Dianne S.V. Medeiros, Ricardo C. Carrano, Sílvia D. Olabarriaga, and
Diogo M.F. Mattos. Blockchain reputation-based consensus: A scalable and resilient mechanism for distributed
mistrusting applications. Computer Networks, 179:107367, 2020.

[31] W. Entriken, D. Shirley, J. Evans, and N. Sachs. Erc-721, 2018.
[32] V. Buterin. Solidity background, 2020.
[33] Ganache. Ganache. https://www.trufflesuite.com/docs/ganache/overview, 2020.
[34] Ethereum javascript api. https://web3js.readthedocs.io/en/v1.2.6/.
[35] Django. https://docs.djangoproject.com/en/3.0/.
[36] Ethgasstation. EthGasStation, 2020.
[37] Ocean Protocol Foundation, BigchainDB GmbH, and Newton Circus. Ocean protocol: A decentralized substrate

for ai data and services technical whitepaper. White Paper, 2019.

[38] S. Xuan, L. Zhen, I. Chung, W. Wang, D. Man, X. Du, W. Yang, and M. Guizani. An incentive mechanism for
data sharing based on blockchain with smart contracts. Computers and Electrical Engineering, 83, 2020.
[39] Shihong Zou, Jinwen Xi, Siyuan Wang, Yueming Lu, and Guosheng Xu. Reportcoin: A novel blockchain-based

incentive anonymous reporting system. IEEE Access, 7:65544–65559, 2019.

[40] Meng Shen, Junxian Duan, Liehuang Zhu, Jie Zhang, Xiaojiang Du, and Mohsen Guizani. Blockchain-based
incentives for secure and collaborative data sharing in multiple clouds. IEEE Journal on Selected Areas in
Communications, 38(6):1229–1241, 2020.

[41] Xingjian Ding, Jianxiong Guo, Deying Li, and Weili Wu. An incentive mechanism for building a secure
blockchain-based internet of things. IEEE Transactions on Network Science and Engineering, 8(1):477–487,
2021.

17

