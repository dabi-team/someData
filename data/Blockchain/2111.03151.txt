2
2
0
2

b
e
F
2
2

]
T
G
.
s
c
[

2
v
1
5
1
3
0
.
1
1
1
2
:
v
i
X
r
a

Foundations of Transaction Fee Mechanism Design

Hao Chung∗
CMU
haochung@andrew.cmu.edu

Elaine Shi∗
CMU
runting@cs.cmu.edu

Abstract

In blockchains such as Bitcoin and Ethereum, users compete in a transaction fee auction to
get their transactions conﬁrmed in the next block. A line of recent works set forth the desiderata
for a “dream” transaction fee mechanism (TFM), and explored whether such a mechanism
existed. A dream TFM should satisfy 1) user incentive compatibility (UIC), i.e., truthful bidding
should be a user’s dominant strategy; 2) miner incentive compatibility (MIC), i.e., the miner’s
dominant strategy is to faithfully implement the prescribed mechanism; and 3) miner-user side
contract proofness (SCP), i.e., no coalition of the miner and one or more user(s) can increase
their joint utility by deviating from the honest behavior. The weakest form of SCP is called
1-SCP, where we only aim to provide resilience against the collusion of the miner and a single
user. Sadly, despite the various attempts, to the best of knowledge, no existing mechanism can
satisfy all three properties in all situations.

Since the TFM departs from classical mechanism design in modeling and assumptions, to
date, our understanding of the design space is relatively little. In this paper, we further unravel
the mathematical structure of transaction fee mechanism design by proving the following results:
• Can we have a dream TFM? We prove a new impossibility result: assuming ﬁnite block
size, no single-parameter, non-trivial, possibly randomized TFM can simultaneously satisfy
UIC and 1-SCP. Consequently, no non-trivial TFM can satisfy all three desired properties
simultaneously. This answers an important open question raised by Roughgarden in his
recent work.

• Rethinking the incentive compatibility notions. We observe that the prevalently adopted
incentive compatibility notions may be too draconian and somewhat ﬂawed. We rectify
the existing modeling techniques, and suggest a relaxed incentive compatibility notion that
captures additional hidden costs of strategic deviation. We construct a new mechanism
called the “burning second-price auction”, and show that it indeed satisﬁes the new incentive
compatibility notions. We additionally prove that the use of randomness is necessary under
the new incentive compatibility notions for “useful” mechanisms that resist the coalitions of
the miner and at least 2 users.

• Do the new design elements make a diﬀerence? Unlike classical mechanisms, TFMs may
employ a couple new design elements that are idiosyncratic to blockchains. For example, a
burn rule (employed by Ethereum’s EIP-1559) allows part to all of the payment from the
users to be burnt rather than paid to the miner. Some mechanisms also allow unconﬁrmed
transactions to be included in the block, to set the price for others. Our work unveils how
these new design elements actually make a diﬀerence in TFM design, allowing us to achieve
incentive compatible properties that would otherwise be impossible.

∗

Supported by Packard Fellowship, NSF award 2044679, and a gift from Nikolai Mushegian.

 
 
 
 
 
 
Contents

1 Introduction

1.1 Our Results and Contributions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
Impossibility of a Having a “Dream” Transaction Fee Mechanism . . . . . . .
1.1.1
1.1.2 Deﬁnitional Contribution: Incentive Compatibility under γ-Strict Utility . . .
1.1.3 The Mathematical Structure of Incentive Compatibility under γ-Strict Utility
1.1.4 Understanding New Design Elements for TFM . . . . . . . . . . . . . . . . .

1
3
3
3
4
5

2 Technical Roadmap

7
7
2.1 Transaction Fee Mechanism and Incentive Compatibility . . . . . . . . . . . . . . . .
8
Impossibility of a “Dream” TFM under Finite Block Size
. . . . . . . . . . . . . . .
2.2
2.3
Incentive Compatibility under γ-Strict Utility . . . . . . . . . . . . . . . . . . . . . . 10
2.4 Necessity of Randomness for Weak Incentive Compatibility . . . . . . . . . . . . . . 12
2.5 Additional Related Work . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15

3 Deﬁnitions

16
3.1 Transaction Fee Mechanism . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 16
3.2 Strategic Behavior and Utility . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18
Incentive Compatibility . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19
3.3

4 Impossibility Results

19
4.1 Simpliﬁed Notation and Restricted Strategy Space for our Impossibility . . . . . . . 19
4.2 Preliminary: Myerson’s Lemma . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 20
4.3 Deterministic Mechanisms: UIC + 1-SCP =⇒ Zero Miner Revenue . . . . . . . . . . 22
4.4 Randomized Mechanisms: UIC + 1-SCP =⇒ Zero Miner Revenue
. . . . . . . . . . 23
4.5 UIC + 1-SCP + Finite Block Size =⇒ Impossibility . . . . . . . . . . . . . . . . . . 24

5 Rethinking the Incentive Compatibility Notions

25
5.1 Deﬁning γ-Strict Utility . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 26
5.2 Burning Second-Price Mechanism . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 27

6 Randomness is Necessary for Weak Incentive Compatibility

7 Necessity for Blocks to Contain Unconﬁrmed Transactions

8 Conclusion and Open Questions

A Relations Between Incentive Compability Notions

32

38

41

44

B Additional Results for Weak Incentive Compatibility

45
B.1 The Solitary Mechanism . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 46
B.2 The Solitary-Or-Posted-Price Mechanism . . . . . . . . . . . . . . . . . . . . . . . . 47
B.3 Necessity of Burning . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 49

C A More Detailed Discussion of Related Work

51
C.1 Monopolistic Price . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 51
C.2 Random Sampling Optimal Price . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 52
C.3 The BEOS Mechanism . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 53
C.4 Dynamic Posted-Price . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 54

1

Introduction

In decentralized blockchains such as Bitcoin and Ethereum, miners are incentivized to collectively
maintain the public ledger, since they can collect block rewards and transaction fees. Today, a
simple “pay your bid” auction is implemented by major blockchains. In a “pay your bid” auction,
the miners’ dominant strategy is to take the highest bids. However, users may be incentivized to
bid strategically, e.g., bid close to 0 when there is no congestion, or bid the minimum possible
to get selected when there is congestion. Earlier works [LSZ19, Yao, BEOS19] pointed out such
strategic bidding indeed happens in real life, and is considered undesirable. Consequently, several
works [LSZ19, Yao, BEOS19, BCD+, Rou20, Rou21, FMPS21] call out to the community to rethink
the design of transaction fee mechanisms (TFMs). These works raise the following important
question: what is the ideal transaction fee mechanism?

Desiderata of a dream TFM. Partly due to its decentralized nature, transaction fee mech-
anism (TFM) design departs from classical mechanism design [Mye81, NRTV07] in modeling and
assumptions. We face several challenges that arise from the strategic behavior of the miner and of
miner-user coalitions:

• Challenge 1: strategic behavior of the miner. The vast majority of work in the classical mech-
anism design literature (with some exceptions [AL20, FW20, GMR90, EW09, NB15] which we
discuss further in Section 2.5) assumes that the auctioneer is trusted and implements the pre-
scribed mechanism honestly — therefore, we mainly care about how to design mechanisms such
that the users are incentivized to bid truthfully. In a decentralized environment, the auction-
eer is no longer fully trusted. In a blockchain transaction fee mechanism, the miners and the
logic of the blockchain jointly serve as the “auctioneer”. Although the logic of the blockchain
is hard-coded and unalterable, miners can deviate from the prescribed mechanism, and behave
strategically to increase their ﬁnancial gains. As a simple example, consider a classical Vickrey
auction [Vic61]. Suppose that each block has size B. We can then include the top B bids
into the block, among which the ﬁrst B − 1 are considered conﬁrmed and they pay the B-th
price. If there are strictly fewer than B bids, everyone gets conﬁrmed and they all pay a price
of 0. All users’ payment goes to the miner that mines the block. Classical algorithmic game
theory [Vic61,NRTV07] tells us that such a Vickrey auction is dominant strategy incentive com-
patible (DSIC) for the users, assuming that the miner indeed behaves honestly. Unfortunately,
several prior works [BEOS19, Rou20] pointed out that the Vickrey auction is not incentive com-
patible for the miner, since the miner may want to inject a fake transaction whose price is
between the (B − 1)-th and B-th price to increase its revenue.

• Challenge 2: miner-user collusion.

In a decentralized blockchain, it is easy for two or more
parties to form binding side contracts through smart contracts. A miner could collude with a user
to increase the joint utility of the coalition, and the two can then split the gains with a binding
side contract. In the aforementioned Vickrey auction example, the miner could alternatively ask
the B-th bidder to raise its bid to be inﬁnitesimally smaller than the (B − 1)-th bid, and then
split its gains with the B-th bidder in a side contract.

Most prior works [LSZ19, BEOS19, Rou20, Rou21] focused on miner-user collusion rather than
user-user collusion, likely for the following reason:
it is much easier to facilitate miner-user
rendezvous since the big miners are well-known. In comparison, users are ephemeral and thus
user-user rendezvous is much more costly to facilitate.

1

With these challenges in mind, prior works [LSZ19,Rou20] have suggested the following desider-

ata for a “dream” transaction fee mechanism:

1. User incentive compatibility (UIC). Assuming that the miner implements the mechanism hon-
estly, then following the honest bidding strategy or truthful bidding should be a dominant
strategy for the users1.

2. Miner incentive compatibility (MIC). A miner’s dominant strategy should be to implement the

prescribed mechanism faithfully.

3. Miner-user side contract proofness (c-SCP). No coalition of the miner and up to c users can
increase their joint utility through any deviation. In the above, c is a parameter that speciﬁes
an upper bound on the coalition’s size. The larger the c, the more side contract resilient. Note
that it is generally harder for a miner and a large number of users to engage in a side contract,
than, say, a miner and a single user.

To the best of our knowledge, all prior works [LSZ19,Yao,BEOS19,Rou20] fall short of achieving
all three properties at the same time — see Section 2.5 for more detailed discussions on these
prior works. The closest we have come to achieving all three properties is Ethereum’s recent
EIP-1559 [BCD+] proposal. The very recent work of Roughgarden [Rou20] showed that (a close
variant of) EIP-1559 can achieve all three properties assuming that the block size is inﬁnite (or more
precisely, assuming that the base fee is set high enough such that the number of transactions willing
to pay the base fee is upper bounded by the block size). However, Roughgarden [Rou20, Rou21]
argued that when there is congestion, EIP-1559 acts like a ﬁrst-price auction and therefore fails to
satisfy UIC, i.e., strategic bidding could improve an individual user’s utility.

Open question 1: With all these failed attempts, it is natural to ask: is it actually feasible to
have a “dream” transaction fee mechanism that satisﬁes all three properties simultaneously? Is
the community’s lack of success so far due to a more fundamental mathematical impossibility?
Roughgarden also raised this as a major open question in his recent work [Rou20, Rou21].

Open question 2:
If there is indeed a mathematical impossibility, then the natural next question
to ask is: are the current incentive compatibility notions overly stringent? If so, can we relax the
incentive compatibility notion to circumvent the impossibilities?

TFM design space enriched by blockchain-idiosyncratic elements.
In comparison with
classical mechanism design, transaction fee mechanisms may employ a couple features that are
idiosyncratic to blockchains. For example, Ethereum’s EIP-1559 [BCD+, Rou20] suggested the
usage of a burn rule, where part to all of the fees collected from the conﬁrmed transactions may
be “burnt” rather than paid to the miner. Earlier work also considered “complete burning” of
payments in environments where money transfer is not possible [HR08]. By contrast, in TFM, the
burning may be partial.

Another design consideration that is being debated in the community is whether we should allow
blocks to contain unconﬁrmed transactions that are just there to “set the price” [pri21]. Although
this approach has been employed by some suggested mechanisms [LSZ19, Yao] (see the paragraph

1Roughgarden [Rou20,Rou21]’s deﬁnition requires the honest strategy of the user (not necessarily truthful bidding)
be the dominant strategy, but he also pointed out that one can always convert such mechanisms to one where truthful
bidding is dominant due to the revelation principle (see footnote 14, page 11 of [Rou21]). Therefore, we require truthful
bidding to be a dominant strategy without loss of generality.

2

before Section 1.1 in Lavi et al. [LSZ19] ), an argument against it is that real estate on a blockchain
is scarce — therefore, we ideally do not waste space including unconﬁrmed transactions [pri21].

An intriguing question is the following:

Open question 3: Do these elements idiosyncratic to blockchains actually make a diﬀerence in
the design of transaction fee mechanisms? Can they help achieve incentive compatible mechanism
designs that would otherwise be impossible?

1.1 Our Results and Contributions

1.1.1

Impossibility of a Having a “Dream” Transaction Fee Mechanism

We prove an impossibility result (Theorem 1.1) showing that assuming ﬁnite block size, there is no
non-trivial transaction fee mechanism (TFM) that satisﬁes UIC and 1-SCP, where 1-SCP means
resilience against side contracts between the miner and a single user. Consequently, there is also
no non-trivial TFM that satisﬁes all three desired properties.

Theorem 1.1 (Impossibility of a “dream” transaction fee mechanism (informal)). Suppose that the
block size is ﬁnite. There does not exist a non-trivial, single-parameter transaction fee mechanism
(TFM) that simultaneously satisﬁes UIC and 1-SCP. Moreover, this impossibility holds for both
deterministic and randomized mechanisms.

Another way to understand Theorem 1.1 is the following: the only TFM that satisﬁes UIC and
1-SCP simultaneously is the trivial mechanism that always conﬁrms nothing and pays the miner
nothing. Our impossibility result holds both for the Bitcoin model where all transactions take
up the same amount of space, and for the Ethereum model where diﬀerent transactions can cost
diﬀerent amounts of space (also called gas in Ethereum).

1.1.2 Deﬁnitional Contribution: Incentive Compatibility under γ-Strict Utility

While our aforementioned impossibility result paints a pessimistic outlook, we observe that the
previously formulated incentive compatibility notions appear too draconian and somewhat ﬂawed.
So far, almost all prior works [LSZ19,Yao,BEOS19,Rou20,Rou21] model the TFM in a standalone
setting, where the players are myopic and care only about their gain or loss in the current auction
instance.
In this setting, if a strategic player (which is either a user, a miner, or a miner-user
coalition) injects a fake transaction whose true value is 0, or if it overbids (i.e., bids more than the
transaction’s true value), we assume that the oﬀending transaction is free of charge as long as it is
not conﬁrmed in the present block — since an unconﬁrmed transaction need not pay any fees.

In practice, however, the TFM is executed repeatedly as blocks get conﬁrmed. In a Bitcoin-like
cryptocurrency, any transaction that has been posted to the network cannot be retracted even if
unconﬁrmed in the present block2. In particular, a fake or overbid transaction could be conﬁrmed
in a future block, and thus the strategic player would end up paying fees to the future block,
potentially mined by a diﬀerent miner. For example, consider the Vickrey auction example again,
where we include the B highest bids in the block, among which the top B − 1 are conﬁrmed and
pay the B-th price. Suppose that all payment goes to the miner.
In this case, the miner may
want to inject a fake transaction whose bid is in between the (B − 1)-th and the B-th price, to

2In some smart-contract capable blockchains such as Ethereum, it might be possible for a transaction to declare
a desired block number such that it is no longer considered valid for later blocks. For our feasibility result, we shall
focus on cryptocurrencies such as Bitcoin, as well as any cryptocurrency system where retracting a posted transaction
is not possible.

3

increase its revenue. In prior works as well as our aforementioned impossibility result, we assume
that injecting this fake transaction is free because it is unconﬁrmed. However, in practice, the
injected transaction may be conﬁrmed and paying fees in a future block.

A natural question is whether we can capture this cost of cheating in our model, and thus
circumvent the aforementioned impossibility. In our new approach, we still model the TFM as a
single-shot auction, but we want to more accurately charge the cost of cheating in the utility model.
Unfortunately, we face a notable challenge: accurately predicting the cost of cheating is diﬃcult,
since what the oﬀending transaction actually pays in the future depends on the environment, e.g.,
what other users are bidding, as well as the mechanism itself.

Deﬁning γ-strict utility. To make progress, we take the following approach. We ﬁrst ask what is
the worst-case cost of cheating. This is when the overbidding or fake transaction that is unconﬁrmed
in the present ends up paying its full bid in the future, thus incurring a cost as high as the diﬀerence
between the bid and the true value of the transaction. This is the worst case for the cheater and
thus the best case for the mechanism designer. Asking whether there is a mechanism that satisﬁes
incentive compatibility under the most strict cost model is equivalent to asking: can we at least
design mechanisms that defend against paranoid strategic players who only want to deviate if there
is a sure chance of gain and no chance of losing. Understanding the feasibility of mechanism design
under the worst-case cost can shed light on whether this is a worthwhile direction. Further, it is
also useful to adopt the worst-case cost model in proving lower bounds, since that makes the lower
bounds stronger.

Next, we generalize the cost model and imagine that in reality, the oﬀender only needs to
pay γ fraction of the worst-case cost, where γ ∈ [0, 1] is also called the discount factor. This
generalization may be useful because in practice, we can often estimate the cost of cheating from
the recent historical data, or even adjust the choice of γ dynamically over time (similar to how
Bitcoin adjusts the mining diﬃculty or how Etheurem’s EIP-1559 dynamically adjusts their base
fee based on recent historical data [BCD+, Rou20, Rou21]). Another motivation for introducing
the parameter γ is to enable a knob that allows us to engineer a tradeoﬀ between the eﬃciency
of the mechanism and its resilience to strategic behavior. Since our earlier impossibility shows
that satisfying all desired properties is impossible when γ = 1, it is meaningful to be able to
mathematically quantify such a tradeoﬀ.

A mechanism that satisﬁes UIC (or MIC, c-SCP, resp.) under this cost model is also said to
satisfy UIC (or MIC, c-SCP, resp.) under γ-strict utility. Speciﬁcally, when γ = 0, there is no
cost of cheating — in this case, our new incentive compatibility notions would degenerate to the
previous notions. When γ = 1, this is when we are charging the worst-case cost for cheating. Since
we are often particularly interested in the case of γ = 1 (e.g., when proving lower bounds), for
convenience, a mechanism that satisﬁes UIC (or MIC, c-SCP, resp.) under 1-strict utility is also
said to satisfy weak UIC (or weak MIC, c-weak-SCP, resp.).

We present our new incentive compatibility notions formally in Section 5.

1.1.3 The Mathematical Structure of Incentive Compatibility under γ-Strict Utility

The burning second-price auction. Using our new γ-strict utility notion, we can circumvent
the aforementioned impossibility (Theorem 1.1). Speciﬁcally, we describe a new mechanism called
the burning second-price auction (see Section 2.3) that achieves UIC, MIC, and c-SCP under γ-strict
utility for any γ ∈ (0, 1], and any choice of coalition resilience parameter c ≥ 1. The mechanism
is randomized, and one can view the parameters c and γ that allow us to tradeoﬀ the degree of

4

incentive compatibility and the eﬃciency of the mechanisms (in terms the expected number of bids
conﬁrmed).

Formally, we prove the following theorem:

Theorem 1.2 (Burning second price auction). For any γ ∈ (0, 1] and any c ≥ 1, there exists a
TFM that satisﬁes UIC, MIC, and c-SCP under γ-strict utility. Further, the TFM can support
any ﬁnite block size, and except for the case when c = 1 and γ = 1, the TFM is randomized (the
paragraph “Necessity of randomness” below gives more explanations about randomized TFMs).

Our burning second-price auction enables a smooth trade-oﬀ between the eﬃciency of the TFM
and its resilience to strategic deviations. In particular, as γ approaches 0, the number of transactions
conﬁrmed by the TFM approaches 0 as well — this is in some sense inherent due to our earlier
impossibility result.

Necessity of randomness. As mentioned in Theorem 1.2, except for the special case c = 1 and
γ = 1, our burning second-price auction is randomized. In general, a randomized TFM allows the
miner and/or the blockchain to employ random coins to decide which bids to include, to conﬁrm, the
payment of each conﬁrmed bid, as well as the miner revenue. In particular, our burning second price
auction (Theorem 1.2) employs trusted on-chain randomness to pick a random subset of eligible,
included transactions to conﬁrm. Although unbiased and unpredictable on-chain randomness can
be generated using standard cryptographic techniques [CKS00, BSKN21, DKIR21], such coin toss
protocols introduce some extra overhead, and ideally we would like to avoid them. Unfortunately,
we prove a lower bound that for c ≥ 2, randomness is necessary to achieve UIC and c-SCP for any
γ ∈ [0, 1], as long as the mechanism is “useful” in the sense that it sometimes conﬁrms at least 2
bids.

Theorem 1.3 (Necessity of randomness for weak incentive compatibility). Consider an arbitrary
deterministic TFM and assume ﬁnite block size. Suppose that there exists a bid vector such that
the TFM conﬁrms at least two bids. Then, the TFM cannot satisfy both weak UIC and 2-weak-SCP
simultaneously.

In the above lower bound, the restriction that the mechanism must sometimes conﬁrm 2 bids
is necessary. Speciﬁcally, we construct a deterministic mechanism called the solitary mechanism
(Appendix B.1) that always conﬁrms a single bid, and achieves weak UIC, weak MIC, and c-weak-
SCP for any c ≥ 1.

1.1.4 Understanding New Design Elements for TFM

Finally, as mentioned, unlike classical auctions, TFMs can employ a couple new design elements.
First, the mechanism can employ a “burn rule”, which allows part to all of the users’ payment
to be “burnt” on the blockchain, and not paid to the miner of the present block. For example,
Ethereum’s EIP-1559 makes critical use of such a burn rule [BCD+, Rou20, Rou21]. Second, some
prior works [LSZ19, Yao] have suggested including transactions in a block that are not conﬁrmed
eventually, but serve the role of setting the price for others. For example, even though we know
that the Vickrey auction is not an awesome auction in a decentralized environment, hypothetically,
imagine we want to implement the Vickrey auction on a blockchain. This would require that the
block to include B bids, among which only the top B −1 are eventually conﬁrmed, whereas the B-th
bid is included only to set the price. Moreover, our own burning second-price auction (Theorem 1.2)
also include some transactions in the block that have no chance of being conﬁrmed, but are just
there to set the price.

5

Do these new design elements make a diﬀerence in TFM design, and can they help us achieve
incentive compatibility designs that would otherwise be impossible? We give a nuanced answer to
this question. First, we point our that our earlier impossibility results (Theorems 1.1 and 1.3) hold
even when the TFM is allowed to employ both of these design elements.

On the other hand, we also show scenarios in which these new design elements do make a

diﬀerence. Speciﬁcally, we prove the following results.

The burn rule is critical to Ethereum’s EIP-1559. Recall that Roughgarden [Rou20,Rou21]
argued that assuming inﬁnite block size, Ethereum’s EIP-1559 approximates a simple “posted price,
burn all” auction: there is an a-priori ﬁxed price tag r, and anyone who bids at least r would get
their transaction conﬁrmed, paying only r. All users’ payment is burnt, and the miner gets nothing.
Roughgarden [Rou20, Rou21] also proved that this simple “posted price, burn all” auction would
indeed satisfy UIC, MIC, and c-SCP for any c ≥ 1, assuming inﬁnite block size. We show that
without the burn rule, even under inﬁnite block size, the only way for a TFM to satisfy both UIC
and 1-SCP is for users to always pay nothing. More generally, we prove that even when assuming
inﬁnite block size and whether we allow a burn rule or not, any (randomized) TFM that satisﬁes
both UIC and 1-SCP must always pay the miner nothing:

Theorem 1.4 (The burn rule makes a diﬀerence assuming inﬁnite block size). Any (randomized)
TFM that satisﬁes both UIC and 1-SCP must always pay the miner nothing. In other words, any
non-trivial (randomized) TFM that does not always burn all payment cannot be both UIC and 1-
SCP. This impossibility holds regardless of whether the block size is inﬁnite or ﬁnite, and regardless
of whether the TFM has a burn rule or not3.

As a direct implication, if we want a mechanism like EIP-1559 that has non-trivial user payment
and satisﬁes all three properties in the inﬁnite block size regime, a burn rule is necessary. Therefore,
Theorem 1.4 and Roughgarden’s result [Rou20, Rou21] together show that having a burn rule does
make a diﬀerence assuming inﬁnite block size.

Remark 1 (Clarifying common misconceptions regarding burning). During uncongested periods,
EIP-1559 burns almost all user payment since the tips should approach 0 during these times. It
is a misconception that “a cryptocurrency (e.g., Ethereum) that burns almost all payment will
incentivize miners to quit and mine another coin instead”. First, the miners always get a constant
block reward which has no eﬀect on our game theoretic modeling and thus is omitted in our utility
deﬁnition. Second, burning part to all of the payment is a way to introduce deﬂation or regulate
inﬂation of a cryptocurrency. Third, as Roughgarden [Rou20] explains, the burnt payment can be
repurposed for any other usage, e.g., used to oﬀset block rewards for future miners — importantly,
this has no eﬀect on our game-theoretic modeling, and thus we simply assume the part of payment
not directly paid to the miner is “burnt”, just like Roughgarden [Rou20, Rou21]. Last but not the
least, the fact that we show that any UIC and 1-SCP mechanism must burn all payment actually
makes our impossibility result stronger.

Necessity for blocks to contain unconﬁrmed transactions.
In the cryptocurrency commu-
nity, there is an ongoing debate whether it is a waste of space for blocks to contain unconﬁrmed
transactions. We argue that the ability for a block to contain unconﬁrmed transactions could in-
deed make a diﬀerence for the mechanism designer. Speciﬁcally, we prove a corollary showing that

3In fact, in our actual proof, we prove Theorem 1.4 ﬁrst, which is then used as a stepping stone towards proving

Theorem 1.1.

6

if one insists on conﬁrming all transactions included in a block, then even with the weak incentive
compatibility notion, it is still impossible to construct any non-trivial (possibly randomized) TFM
that satisﬁes weak UIC and 1-weak-SCP.

Corollary 1.5 (Allowing unconﬁrmed transactions in a block can make a diﬀerence). Suppose that
all transactions in a block must be conﬁrmed. Then, there is no non-trivial (possibly randomized)
TFM that satisﬁes weak UIC and 1-weak-SCP simultaneously.

Additional results.
In the appendices, we additionally show a variant of Theorem 1.3 that says
if the TFM is not allowed to have a burning rule, then Theorem 1.3 holds even when the block size
is allowed to be inﬁnite.

2 Technical Roadmap

2.1 Transaction Fee Mechanism and Incentive Compatibility

In a transaction fee mechanism (TFM), we are selling slots in a block to bidders who want to get
their transactions included and conﬁrmed in the block. For simplicity, we assume that all slots are
identical commodities, and we often use the terms “transaction” and “bid” interchangeably. For
convenience, we assume that each bid comes from a diﬀerent user.

Transaction fee mechanism. A transaction fee mechanism (TFM) includes the following rules:
• An inclusion rule executed by the miner. Given a bid vector b = (b1, b2, . . . , bm), the inclusion

rule decides which of the bids to include in the block;

• A conﬁrmation rule executed by the blockchain. The conﬁrmation rule chooses a subset of the
included bids to be conﬁrmed. In the most general form, not all transactions included in the
block are necessarily conﬁrmed, and only conﬁrmed transactions are considered ﬁnal, i.e., the
money has been transferred to the merchant’s account and the merchant can now provide the
promised service.

• A payment rule and a miner revenue rule executed by the blockchain, which decides (using only
information recorded in the block) how much each conﬁrmed bid pays, and how much revenue
the miner gets. Any (possibly included) transaction that is not conﬁrmed pays nothing. Fur-
thermore, we assume that the miner’s revenue is upper bounded by the total payment collected
from all conﬁrmed bids4. In particular, if the miner’s revenue is strictly smaller than the total
payment of all bids, then we often say that part of the payment is burnt.

In our model, a strategic miner (possibly colluding with some users) may not implement the
honest inclusion rule, if deviating can beneﬁt the miner (or coalition). However, the blockchain is
trusted to implement the conﬁrmation, payment, and miner-revenue rules honestly.

In comparison with Roughgarden’s model [Rou20,Rou21], we explicitly distinguish the inclusion
rule from the conﬁrmation rule in our modeling. By contrast, Roughgarden’s model calls the union
of the inclusion rule and the conﬁrmation rule the allocation rule. Making the distinction between
the inclusion and conﬁrmation rules explicit is useful for us since we want to tease out the ﬁne
boundaries between feasibility and infeasibility, depending on whether the block size is ﬁnite or
inﬁnite.

4All existing major cryptocurrencies such as Bitcoin and Ethereum satisfy this assumption (ignoring the ﬁxed
block reward paid to the miner on top of the fees). We discuss what it might mean to relax this assumption in
Section 8 and leave this as an exciting future direction.

7

Strategy space and incentive compatibility. A strategic player can be a user, a miner, or the
coalition of the miner and up to c users. The strategic player can deviate in the following ways: 1)
if one or more users are involved, then some of the users can decide to bid untruthfully, possibly
after examining some or all other bids; 2) the strategic player can inject fake bids, possibly after
examining some or all other bids; and 3) if the miner is involved, then the miner may not implement
the inclusion rule honestly.

Every user has a true value for its transaction to conﬁrmed. If conﬁrmed, its utility is its true
value minus its payment. An unconﬁrmed user has utility 0. The miner’s utility is its revenue.
If the miner colludes with some users, the coalition’s joint utility is the sum of the utilities of all
coalition members.

Incentive compatibility. The honest strategy for a user is to bid its true value. The honest
strategy for a miner is to implement the correct inclusion rule. A TFM is incentive compatible
for a strategic player iﬀ deviating from the honest strategy cannot increase the strategic player’s
expected utility; i.e., playing honestly is the strategic player’s best strategy (or one of the best
strategies). A TFM is said to be user incentive compatible (UIC), if it is incentive compatible
for any individual user. A TFM is said to be miner incentive compatible (MIC), if it is incentive
compatible for the miner. Finally, a TFM is said to be c-side-contract-proof, if it is incentive
compatible for any coalition consisting of the miner and at least 1 and at most c users. The notions
UIC, MIC, and c-SCP are incomparable as shown in Appendix A.

Note that in a blockchain environment, user-user coalitions are much harder to form: since
users are ephemeral, rendezvous between them is challenging. By contrast, there are typically a
stable set of big miners which makes miner-user rendezvous easy. For this reason, most works in
this space are more interested in defending against miner-user rather than user-user coalitions.

2.2

Impossibility of a “Dream” TFM under Finite Block Size

We now sketch how to prove Theorem 1.1, that is, assuming ﬁnite block size, no non-trivial TFM
can achieve UIC and 1-SCP at the same time. We shall ﬁrst sketch how the proof works for
deterministic TFMs, then we explain how to generalize the proof to the randomized case.

Deterministic case: miner has 0 revenue. Recall that if a TFM satisﬁes UIC, it must respect
the constraints imposed by the famous Myerson’s Lemma [Mye81]. For deterministic mechanisms,
this means that the conﬁrmation decision is monotone, and moreover, every conﬁrmed bid pays
the minimum price it could have bid and still remained conﬁrmed, assuming everyone else’s bids
remain the same.

To prove Theorem 1.1, we go through an intermediate stepping stone: we shall actually prove
Theorem 1.4 ﬁrst, that is, any TFM that satisﬁes both UIC and 1-SCP must always pay the miner
nothing, regardless whether the block size is ﬁnite or inﬁnite. Henceforth, let µ(b) denote the miner
revenue under the bid vector b. We use pi(b) to denote user i’s payment under b, and if user i is
unconﬁrmed, pi(b) = 0.

Consider an arbitrary deterministic TFM that is UIC and 1-SCP. Consider an arbitrary bid
vector b = (b1, . . . , bm) and we want to argue that the miner has 0 revenue under b. To do this,
we want to lower each user’s bid to 0 one by one, and argue that the miner revenue is unaﬀected
in this process. If this is the case, we can show that the miner revenue is 0 under b, since at the
very end of this process, when we have lowered everyone’s bid to 0, the miner revenue must be 0.
It suﬃces to prove the following. Let b = (b1, . . . , bm) be an arbitrary bid vector and i ∈ [m] be
an arbitrary user. We want to show that µ(b) = µ(b−i, 0). First, we show that if a user changes its

8

bid such that its conﬁrmation status remains unaﬀected, then the miner revenue should stay the
same (Claim 4.4). If this is not true, then the miner and the user can collude, and there is a way
for the user to bid untruthfully without aﬀecting its conﬁrmation status and thus its utility, but
increasing the miner revenue. Overall, the coalition strictly gains and this violates 1-SCP. Suppose
that pi is the minimum price that some user i could bid to let it be conﬁrmed, assuming that
everyone else is bidding b−i. The above means that if user i bids anywhere between [pi, ∞] such
that it remains conﬁrmed, then the miner revenue is unaﬀected. Similarly, if user i bids anywhere
between [0, pi) such that it is unconﬁrmed, then the miner revenue is unaﬀected too.

It remains to rule out the possibility that there is a sudden jump in miner revenue, when user
i lowers its bid from pi to pi − ǫ for an aribitrarily small ǫ. Suppose for the sake of contradiction
that there is a sudden ∆ > 0 increase in the miner revenue when user i lowers its bid from pi to
pi − ǫ (and the proof for the other direction is similar). From what we proved earlier, the entire
jump of ∆ must occur within an arbitrarily small interval pi and pi − ǫ, and in particular, we may
assume that ǫ < ∆.
In this case, if the miner colludes with user i whose true value is actually
pi − ǫ, the user should bid pi instead. This way, the miner’s gain ∆ outweighs the user’s loss ǫ, and
the coalition strictly gains. This violates 1-SCP. A formal presentation of this proof can be found
in Section 4.3.

Theorem 1.4 + ﬁnite block size =⇒ Theorem 1.1. Once we have proven Theorem 1.4, i.e.,
the miner always has 0 revenue, we can now throw in the ﬁnite block size assumption, to prove
Theorem 1.1. We show it for the deterministic case below. Speciﬁcally, suppose there is a bid
vector b = (b1, . . . , bm) under which some bid bi is conﬁrmed where i ∈ [m]. Now, imagine that
the real world actually consists of the bids b plus suﬃciently many users bidding bi + ǫ, such that
the number of users bidding bi + ǫ exceeds the block size. We know that one of the users bidding
bi + ǫ must be unconﬁrmed — let us call this user u. The miner can now collude with u, and ask
u to bid bi instead. The miner can now pretend that the world consists of the bid vector b where
bi is replaced with u’s bid, and run the honest mechanism. This helps the user u get conﬁrmed
and gain a positive utility, and meanwhile, the miner itself always gets 0 revenue no matter what
it does. Thus, overall, the coalition strictly gains, which violates 1-SCP.

Generalizing to randomized TFMs. At a high level, our earlier impossibility proof for de-
terministic TFMs use Myerson’s Lemma as a blackbox. Since the TFM is UIC, we argue that
the mechanism must fall within the solution space characterized by Myerson’s Lemma. Our proof
then shows that the constraints imposed by Myerson conﬂict with the requirements of 1-SCP. We
want to generalize the impossibility to even randomized mechanisms, where the inclusion rule,
conﬁrmation rule, payment and miner revenue rules are allowed to employ randomness. For the
randomized case, instead of following the same blueprint as before, we present an alternative proof
that uses Myerson’s Lemma (the randomized case) in a slightly non-blackbox manner — we review
Myerson’s Lemma generalized to the randomized case in Section 4.2. Below, keep in mind that the
notations pi(b) and µ(b) can be random variables.

We ﬁrst give a slightly incorrect intuition. As a thought experiment, imagine that the coalition
of the miner and user i forms a “virtual-user” i. Virtual-user i ’s true value is vi, i.e., same as user i’s
true value. Virtual-user i’s payment is pi(b) − µ(b). Observe that virtual-user i’s true value minus
its payment is exactly the coalition’s utility in the original TFM. Now, imagine a “virtual auction”
among a set of virtual users, where each virtual user i is the coalition of the miner and the user i.
Each virtual user’s strategy space is either overbidding or underbidding. Since the original TFM
satisﬁes 1-SCP, it must be that each virtual user does not want to overbid or underbid, i.e., the

9

virtual auction is dominant strategy incentive compatible for each virtual user. Now, we can apply
Myerson’s Lemma to this virtual auction, and argue that each virtual user’s payment pi(b) − µ(b)
must satisfy the unique payment rule stipulated by Myerson’s Lemma. However, since the original
TFM is UIC, it must be that each user’s payment pi(b) also satisﬁes the unique payment rule
stipulated by Myerson’s Lemma. This gives us pi(b) − µ(b) = pi(b), i.e., µ(b) = 0.

The above argument is slightly incorrect, though, since the unique payment rule of Myerson’s
Lemma relies on the border condition that if a user bids 0, it pays 0. When we consider the virtual
auction, a virtual user’s payment is of the form pi(b) − µ(b) — and it is not immediately clear that
this quantity is 0 (even though at the end of the proof, we can see that it is indeed 0). It takes
a little more work to make this intuition correct, and we give a formal proof below that makes
slightly non-blackbox usage of the proof of the Myerson’s Lemma — see Section 4.4 for details.

The above proves Theorem 1.4 for the randomized case. Similarly, we can now rely on The-
orem 1.4 and additionally throw in the ﬁnite block size assumption to get Theorem 1.1 for the
randomized case. The proof of this is a little more complicated than the deterministic case, and
we defer the formal details to Section 4.5.

2.3

Incentive Compatibility under γ-Strict Utility

γ-strict utility. As observed earlier in Section 1.1.2, the current modeling approach does not
charge for certain costs of cheating. Speciﬁcally, an overbid or fake transaction that is not conﬁrmed
in the present is incorrectly assumed to be free of cost. We therefore reﬁne the model by changing
the utility deﬁnition to account for this cost. As mentioned, since the exact cost is hard to predict,
we deﬁne a parametrizeable utility notion called γ-strict utility, where the discount factor γ ∈ [0, 1]
can potentially be measured from historical data. In comparison with the utility notion introduced
in Section 2.1, the only diﬀerence here is that for any overbid or fake transaction that is not
conﬁrmed in the present, we charge the strategic player γ times the worst-case cost, where the
worst-case cost is the diﬀerence between the bid amount and the true value, since the strategic
player may end up paying the full bid amount in a future block (of which it may not be the miner).
We may assume that any fake transaction has a true value of zero.

We can deﬁne UIC, MIC, and c-SCP just like before but now using the γ-strict utility notion.
The notions UIC, MIC, and c-SCP under γ-strict utility are incomparable for any γ ∈ [0, 1] as
shown in Appendix A.

Burning second-price mechanism. For any γ ∈ (0, 1] and any c ≥ 1, we present a TFM that
achieves UIC, MIC, and c-SCP under γ-strict utility.

The burning second-price auction

Parameters:

• the block size B,
• the maximum coalition size c ∈ N,
• the discount factor γ ∈ [0, 1],
• k, k′ ∈ N such that k + k′ = B and 1 ≤ k′ ≤ ⌊ γk

c ⌋a, where k denotes the number of included
bids that are eligible and might be conﬁrmed with some probability, and k′ is the number
of included bids that are not eligible for conﬁrmation, but are used to set the price.

10

Mechanism:

• Inclusion rule. Choose the B highest bids to include in the block, breaking ties arbitrarily.
Let (b1, . . . , bB) denote the included bids where b1 ≥ · · · ≥ bB. If the block is not fully ﬁlled,
any remaining empty slot is treated as a bid of 0.

• Conﬁrmation rule. Select a random subset S ⊆ {b1, . . . , bk} of size exactly ⌊ γk

c ⌋ using
(trusted) on-chain randomness. The set S is conﬁrmed and all other bids {b1, . . . , bB} \ S
are unconﬁrmed.

• Payment rule. Any conﬁrmed bid pays bk+1. All unconﬁrmed bids pay nothing.
• Miner revenue rule. The miner is paid γ · (bk+1 + · · · + bk+k′). Burn any remaining payment

collected from the conﬁrmed bids.
aWhen ⌊ γk

c ⌋ = 0, the mechanism reduces to a trivial case where no transaction is conﬁrmed and the miner

is paid nothing. Thus, we only specify the case where ⌊ γk

c ⌋ ≥ 1.

A note about randomized TFM and implementation of the random coins.
In general,
a randomized mechanism may employ random coins in the the miner-implemented inclusion rule,
as well as the blockchain-implemented conﬁrmation rule, payment and miner revenue rules.
In
our burning second-price auction speciﬁcally, the inclusion rule executed by the miner is deter-
ministic, and only the conﬁrmation rule that is executed by the blockchain is randomized. To
implement such a mechanism in practice, we will need trusted on-chain randomness. How to sgen-
erate unbiased and unpredictable random coins in distributed environment has been extensively
studied [CKS00, BSKN21, DKIR21]. Since such “trusted” random coins could be expensive to gen-
erate in a decentralized environment, we would ideally like to avoid them. Unfortunately, we will
show later that randomness is actually necessary to get weak incentive compatibility when c ≥ 2.

Some interesting observations. We can make a few intereseting observations about this mech-
anism:

k

γk
c

1. First, the larger the coalition resistance parameter c, the smaller the number of conﬁrmed bids
. Similarly, when γ is larger, i.e., when we are charging harsher costs for cheating, the
mechanism can conﬁrm more bids. In other words, both c and γ can be viewed as knobs that
j
allow us to smoothly tradeoﬀ the strength of incentive compatibility and the eﬃciency of the
mechanism. We stress that such a tradeoﬀ is inevitable due to our earlier impossibility result
for strong incentive compatibility (see Corollary 4.9). Our burning second-price auction gives
a mathematically quantiﬁable tradeoﬀ between the resilience towards strategic behavior and the
eﬃciency of the mechanism.

As a special case, when γ = 0, i.e., when there is no cost for overbid/fake unconﬁrmed bids,
the number of conﬁrmed bids
= 0 — in other words, the mechanism becomes degenerate.
This is consistent with our earlier impossibility result for strong incentive compatibility.

γk
c

j

k

2. Second, when γ = 1 and c = 1, the mechanism acutally becomes deterministic, since the number
= k. In other words, the top k included bids are surely conﬁrmed. We

of conﬁrmed bids
give a full description of the mechanism for this particularly interesting special case below.

γk
c

j

k

On the other hand, if c > 1, then the mechanism is randomized even for γ = 1. This is no
co-incidence, since later, we will prove that randomness is actually necessary for c > 1 for any
“interesting” mechanism.

11

The burning second-price auction: special case when c = 1, γ = 1

the block size B, and 0 < k′ ≤ k < B such that k + k′ = B, where k denotes
Parameters:
the number of conﬁrmed transactions per block, and k′ denotes the number of unconﬁrmed
transactions in a block that are used to set the price and miner revenue.

Mechanism:

• Choose the B highest bids to include in the block. The highest k bids are considered
conﬁrmed, and they each pay the (k + 1)-th price. Unconﬁrmed transactions, included or
not, pay nothing.

• The miner is paid the sum of the (k +1)-th to the B-th prices (which cannot exceed the total
payment by construction). All remaining payment collected from the conﬁrmed transactions
is burnt.

• If the block is not fully ﬁlled, any remaining empty slot is treated as a bid of 0.

Interestingly, for the special case γ = 1 and c = 1, the mechanism behaves like an ordinary second-
price auction from a user’s perspective. However, the miner does not collect all payment from
the users. Part of the payment is burnt, and the mechanism may employ multiple “included but
unconﬁrmed” bids to set the miner’s revenue.

Theorem 2.1 (Burning second-price auction, restatement of Theorem 1.2). For any c ≥ 1 and
γ ∈ (0, 1], the burning second-price auction satisﬁes UIC, MIC, and c-SCP under γ-strict utility.

The proof of Theorem 2.1 is provided in Section 5.2.
Although the tradeoﬀ between resilience and eﬃciency as observed in the burning second-price
auction is inevitable, currently we do not understand whether our mechanism achieves the optimal
tradeoﬀ curve, i.e., whether it achieves optimality for every choice of γ in terms of utilization of
on-chain space and money burnt. We leave this as an exciting direction for future work (see also
Section 8 for numerous other open questions in this exciting and little explored space).

2.4 Necessity of Randomness for Weak Incentive Compatibility

We present an informal roadmap for the proof of Theorem 1.3, that is, any deterministic and
2-user-friendly TFM cannot satisfy weak UIC and 2-weak-SCP simultaneously. Recall that weak
incentive compatibility corresponds to the case when γ = 1. In other words, we are charging the
worst-case cost for cheating, and this makes our lower bounds stronger. Henceforth, if there exists
a bid vector such that the TFM conﬁrms at least two bids, we say that the TFM is 2-user-friendly.

Myerson’s lemma holds for deterministic and weak UIC mechanisms. Recall that My-
erson’s Lemma holds for any UIC mechanism. Since we now are considering a more relaxed notion,
namely, weak UIC, it may not be immediately clear that Myerson’s Lemma still holds. Fortunately,
we can prove that assuming deterministic and no random coins, then even weak UIC mechanisms
must satisfy the requirements imposed by Myerson’s Lemma (Fact 6.2). We stress that this obser-
vation is actually somewhat subtle, since it is not too clear whether Myerson’s Lemma holds for
randomized mechanisms that satisfy weak UIC.

12

Weak UIC + 2-weak-SCP + 2-user-friendly =⇒ several natural properties. Next, we
establish a few natural structural properties for any deterministic, 2-user-friendly TFM that is both
weak UIC and 2-weak-SCP.

1. All conﬁrmed bids must pay the same, and thus there is a universal payment (Lemma 6.4);

2. The mechanism must conﬁrm the highest bids where the number of conﬁrmed bids may depend

on the bid vector (Lemma 6.5); and

3. The universal payment must be at least as high as the top unconﬁrmed bid (Lemma 6.6). In
other words, anyone bidding strictly higher than the universal payment must be conﬁrmed.

Inﬂuence of an individual bidder. Earlier in Section 4.3 when we proved the impossibility for
(strong) incentive compatibility, we used the fact that when an individual user moves its bid up
or down, as long as its conﬁrmation decision is unaﬀected, the user’s own utility does not change.
Now, due to 1-SCP, the miner’s revenue should be unaﬀected too. This statement is not entirely
true any more now that we have changed our utility deﬁnition. In particular, if an unconﬁrmed
user increases its bid while still remaining unconﬁrmed, there is now an extra cost to the user. The
key to proving Theorem 6.1 is to understand how fast the universal payment and miner revenue
can change as we change a single user’s bid. There are a few cases (stated informally below):

• Lemma 6.35. If a conﬁrmed user changes its bid such that it is still conﬁrmed, then the miner
revenue is unaﬀected. This can be shown using the same argument as in Section 4.3 relying on
weak UIC and 1-weak-SCP, since for a conﬁrmed bid, the new and old utility notions coincide.

Additionally, using 2-weak-SCP, we can show something even stronger: if there are two conﬁrmed
bids b1 and b2 such that b1 > p where p is the universal payment, then, b1’s conﬁrmation status
and the universal payment amount are also unaﬀected when b2 changes its bid as long as it
remains conﬁrmed.

• Lemma 6.7. If an individual user changes its bid by ∆, then the miner utility cannot change
by more than ∆. Roughly speaking, this is because even under our new utility notion, the extra
cost to a user is at most ∆ if it changes its bid by ∆. If the miner revenue changed by more
than ∆, then the miner-user coalition has a deviating strategy that allows them to strictly gain.

• Lemma 6.8. If a user i increases its bid from 0 to ∆, the universal payment cannot increase
by more than ∆/2. Had it not been the case, then the coalition of a miner and two conﬁrmed
users can gain in the following way: if user i actually bids bi > 0, the miner can replace bi with a
0-bid. In this way, the two colluding users each pay a lot less, and due to the earlier Lemma 6.7,
the miner’s revenue does not change that much. So overall, the coalition can strictly gain.

• Lemma 6.9. If a user i drops its bid from bi to 0, then the universal payment cannot increase
by more than bi. Otherwise, the miner can collude with one paying user, and suppose user i’s
actual bid is 0, but the miner changes it to a fake bid of bi. In this case, the paying user would
pay a lot less which outweighs the cost to the miner is only bi.

5We in fact need to use this lemma to prove the aforementioned natural properties.

13

b1 > p,

b2 > p,

Γ (big), Γ (big),

Γ (big), Γ (big),

Γ (big), Γ (big),

Γ (big), Γ (big),

bids
,

,

0,

0,

0,

Γ (big), Γ (big),

p′
1 + ǫ,

Γ (big), Γ (big), Γ (big),

,

,

,

0,

0,

0,

0,

. . . ,

. . . ,

. . . ,

. . . ,
...
. . . ,

. . . ,

. . . ,

Γ (big), Γ (big), Γ (big),

p′
2 + ǫ,

. . . ,

0

0

0

0

Γ (big), Γ (big), Γ (big), Γ (big),

Γ (big), Γ (big), Γ (big), Γ (big),

0

. . . ,
...
. . . , Γ (big)

universal payment
p

p

p1

p2

p′

p′
1

p′
1

p′
2

p′
2

p′′

Lemma 6.3

Lemma 6.9

Lemma 6.9

Lemma 6.9

Lemma 6.8

Lemma 6.3

Lemma 6.8

Lemma 6.3

Lemmas 6.3, 6.8

(cid:27)

(cid:27)

(cid:27)

(cid:27)

(cid:27)

(cid:27)

(cid:27)

(cid:27)

(cid:27)

Figure 1: Proof roadmap for Theorem 6.1. We construct a sequence of bid vectors, and
show that if the mechanism satisﬁes the desired properties, then, in the last conﬁguration, every
bid must be conﬁrmed. Since there are more bids than the block size, we reach a contradiction.
The notation “ ” denotes a bid whose value we do not care about (as long as Γ is big enough
w.r.t. all these values).

Demonstrating the contradiction (Figure 1). With the above key observations, we can
ﬁnally demonstrate a contradiction, assuming that there indeed exists a deterministic, 2-user-
friendly mechanism that is weak UIC and 2-weak-SCP.

1. First, we show that there exists a bid vector b = (b1, b2, . . . , bm) such that there are two (or
more) users conﬁrmed, and both users bid strictly higher than the payment. Note that 2-user-
friendliness guarantees the existence of a vector b such that two users are conﬁrmed, but does
not directly guarantee that both of them bid strictly above the payment — it actually requires
a bit of work to show this (which we defer to the subsequent formal presentation). Henceforth,
without loss of generality, we may assume that b1 and b2 are the two conﬁrmed bids, and let p
be the payment. We know that b1 > p, and b2 > p.

2. Next, using Lemma 6.3, we can increase both b1 and b2 to some suﬃciently large number Γ, with-
out aﬀecting the payment p or the miner revenue, and the resulting bid vector is (Γ, Γ, b3, . . . , bm).

3. Next, we can lower b3, . . . , bm all to 0. Due to Lemma 6.9 and the suﬃciently large choice of
Γ, the increase in the payment is relatively small in comparison with Γ. This means that at
the end, the ﬁrst two users’ bid amount Γ is still much greater than the universal payment,
despite the possible increase in the universal payment. Therefore, the ﬁrst two users must be
still conﬁrmed at the end (formally showing this requires a bit extra work). At this moment, we
have a bid vector (Γ, Γ, 0, 0, . . . , 0), where the ﬁrst two users are conﬁrmed, and there is still a

14

suﬃciently large gap between their bid Γ and the universal payment p′.

4. Next, one by one, we shall increase the bids of users 3 through m. For each user j ∈ {3, 4, . . . , m},
as we increase their bid at some rate r, the universal payment increases at rate at most r/2 due
to Lemma 6.8. At some point, j’s bid will surpass the universal payment, and at this point,
due to the third natural property mentioned earlier, user j must become conﬁrmed. Note that
during this entire process, users 1 and 2 remain conﬁrmed since their bids Γ is suﬃciently large.

5. Repeating the above process, we will eventually obtain a bid vector such that all m users are
conﬁrmed. Now, as long as m is strictly greater than the block size B, we reach a contradiction
— note that this is the only place where we use the ﬁnite block size assumption in the entire
proof. It turns out that we can safely assume m > B, since if the initial vector b has fewer than
B users, we can always append 0 bids to b “for free” (and showing this requires a little extra
work which we defer to the subsequent formal exposition).

2.5 Additional Related Work

Transaction fee mechanism. We now review some additional related work besides the most
closely reladed work EIP-1559 [BCD+] and that of Roughgarden [Rou20, Rou21]. Speciﬁcally, we
will review the transaction fee mechanisms that have been proposed, and explain which of the three
properties they each fail to satisfy.

Lavi, Sattath, and Zohar [LSZ19] pointed out that today’s “pay your bid” auction has resulted
in complex strategic bidding behavior.
In particular, when there is no congestion, users would
bid almost 0, resulting in very little transaction fee revenue for the miners. To alleviate the
problem, [LSZ19] suggests two alternative mechanisms, Monopolistic Price, and Random Sampling
Optimal Price (RSOP), initially proposed in [GHK+06]. As [LSZ19] acknowledged, Monopolistic
Price is not strictly user incentive compatible (by the classical DSIC notion), and is not even 1-
side-contract resilient. For RSOP, [LSZ19] demonatrated an attack showing that it is not MIC. In
fact, a slightly modiﬁed attack can also show that RSOP is not side contract resilient. Yao [Yao]
proved that although Monopolistic Price is not strictly UIC, it is nearly UIC assuming any i.i.d.
distribution of the users’ true values, and as the number of users goes to inﬁnity. Further, Yao also
proved a conjecture in [LSZ19] regarding the relative revenue of the two mechanisms.

Basu, Easley, O’Hara, and Sirer [BEOS19] suggested mechanism that involves paying the trans-
faction fees forward to some number of future blocks. Roughgarden [Rou20] simpliﬁed and analyzed
their scheme, and argued that it does not satisfy any of the three properties, although it is approx-
imately UIC when the number of users goes to inﬁnity.

Ferreira, Moroz, Parkes, and Stern [FMPS21] suggest a modiﬁcation to EIP-1559: whereas
EIP-1559 approximates a ﬁrst price auction in the congested regime and approximates a posted
price auction in the inﬁnite block size regime, [FMPS21] suggest to adopt a posted price mechanism
no matter which regime one is in, by modifying the reserve price over time. [FMPS21]’s approach
does not adopt a burn rule, and fails to satisfy even 1-side-contract-proofness.

More detailed explanations: in Appendix C, we explain each of these known TFMs [LSZ19,BEOS19,
FMPS21] in more detail, and explain why they fail to satisfy one or more of the desired incentive
compatibility properties.

Auctioneer misbehavior in auctions. Akbarpour and Li [AL20] proposed a notion called
credible auctions. In particular, in their model, the users each communicate with the auctioneer over
a private channel. Credibility requires that the auctioneer does not have incentives to implement

15

any “safe” deviations, i.e., deviations where the miner can plausibly explain away to every user
without being implicated (e.g., by lying about the message other users have sent). Akbarpour and
Li [AL20] showed a two-out-of-three type impossibility result for optimal credible auctions, where
optimality implies that the auctioneer’s revenue is maximized. While their deﬁnition is somewhat
similar in spirit to miner incentive compatibility (MIC), we stress that their lower bound for
credibility does not imply a corresponding lower bound for MIC in our model, since a
TFM that is MIC may not be credible in their model, as shown in the following counter-
example. Consider our own deterministic burning second-price mechanism (where k′ = 1) can
be viewed as follows: the top bidder pays the (k + 1)-th price to the auctioneer, every other top
k bidder pays the (k + 1)-th price but the payment is burnt. This mechanism is MIC but not
credible in the model of Akbarpour and Li [AL20], since the auctioneer can lie about the (k + 1)-
th price to the top bidder and thus earn more from the top bidder. Moreover, we also stress
that the style of our impossibility is of a stronger nature than that of Akbarpour and Li [AL20]:
we rule out any TFM whatsoever satisfying UIC and 1-SCP even when allowing burning, and
without any regards to optimality. The elegant work of Ferreira and Weinberg [FW20] showed that
using cryptographic commitments can help overcome some of the lower bound results shown by
Akbarpour and Li [AL20].

We want to discourage miners from injecting fake transactions.

In the economics literature,
auctioneer injecting transactions is also sometimes referred to as shill bidding [GMR90, EW09,
NB15]. Earlier works have found that shill bidding can help increase the auctioneer’s proﬁt [GMR90,
EW09, NB15].

User collusion in auctions. A line of works also consider collusion among bidders in auc-
tions [GL79, GH05, CM12, kCK09, MM12, DM17]. Traditional auctions like the Vickrey auction do
not satisfy incentive compatibility if bidders can collude through binding side contracts. Therefore,
this line of work explores under what modeling assumptions or incentive compatibility notions is
it possible to resist bidder collusion. The transaction fee mechanism (TFM) line of work has not
focused on user-user collusion — as mentioned earlier, user-user rendezvous is diﬃcult to facilitate
since users are ephemeral in decentralized blockchain settings.

3 Deﬁnitions

In this section, we deﬁne a transaction fee mechanism (TFM) formally, as well as incentive com-
patibility notions. Our modeling choice can be viewed as a generalization of that of Roughgar-
den’s [Rou20, Rou21]. Speciﬁcally, Roughgarden’s model only cares about which transactions are
eventually conﬁrmed, but does not care about which ones are included in the block. By contrast,
our modeling explicitly separates the “inclusion rule” from the “conﬁrmation rule”. Both our lower
bound and upper bound will demonstrate that explicitly separating the “inclusion rule” and the
“conﬁrmation rule” is important for understanding the feasibilities and infeasibilities of transaction
fee mechanism design. See also Remarks 2 and 3 for additional philosophical discussions about the
modeling.

3.1 Transaction Fee Mechanism

We consider a single auction instance corresponding to the action of mining the next block. Suppose
that there is a mempool containing the list of pending transactions submitted by users. We may
assume that each transaction is submitted by a distinct user. We consider a single parameter

16

environment, i.e., each user i has a true value vi ∈ R for getting its transaction conﬁrmed in the
next block; moreover, its bid contains only a single value bi ∈ R as well. Henceforth, we use
b := (b1, b2, . . . , bm) to denote the vector of all bids; we also use the same notation b to denote the
current mempool. For convenience, we often use the terms bid and transaction interchangeably,
e.g., bi can be called a bid or a transaction.

A Transaction Fee Mechanism (TFM) consists of the following (possibly randomized) algo-

rithms:

• Inclusion rule I(·): given a bid vector b, I(b) outputs a subset of the vector b, denoting the

bids to be included in the block.

• Conﬁrmation rule C(·): given a set of bids b′ included in the block, the conﬁrmation rule

C(b′) outputs which of these bids are conﬁrmed.

• Payment rule P(·): given a set of bids b′ included in the block, the payment rule P(b′) outputs
how much each conﬁrmed bid pays. We assume that 1) any bid that is not conﬁrmed pays a
price of 0; and 2) each transaction pays at most what it bids.

• Miner-revenue rule M(·): given a set of bids b′ included in the block, the miner-revenue rule
M(b′) outputs the total payment received by the miner for mining this block. We assume that
the miner revenue does not exceed the total payment of all conﬁrmed bids.

The inclusion rule is implemented by the miner, possibly subject to certain validity constraints
enforced by the blockchain (e.g., block size limit). The other rules, including conﬁrmation, pay-
ment, and miner-revenue rules are enforced by the blockchain itself; and they use only on-chain
information.

There are a few important things to note about this deﬁnition:

1. Included vs conﬁrmed: In the most general form, not all transactions included in the block must
be conﬁrmed. It could be that some transactions are included in the block to set the price, but
they are not considered conﬁrmed. For example, consider a Vickrey auction where the k highest
bids are included in the block, among which the k − 1 highest are considered conﬁrmed, paying
the k-th price. In this case, the k-th transaction is included just to set the price.

2. Encoding the burn rule. Not all the payment from the users will necessarily go to the miner of
the block. It was pointed out earlier, e.g., in Ethereum’s EIP-1559 [BCD+, Rou20, Rou21] that
in a blockchain, part to all of the payment can be burnt. In our deﬁnition, we require that the
miner revenue M be upper bounded by the total payment from all conﬁrmed transactions. In
case the miner’s revenue is strictly less than the total user payment, the diﬀerence is essentially
“burnt”.

In some cases, the TFM may need to perform tie breaking. For example, if there are more bids
bidding the same price than the block can contain, only a subset of them will be included. Our
formulation implicitly implies that the TFM is identity agnostic, i.e., the TFM does not use the
bidders’ identities for tie-breaking. In other words, if we swap two users’ actions, their outcomes
would be swapped too. More formally, given a bid vector b := (b1, . . . , bm) and two diﬀerent users i
and j, let xi, xj ∈ {0, 1} denote whether each user is conﬁrmed, and let pi, pj denote their respective
payments. Now, imagine that we swap users i and j’s roles as follows. We make i bid bj and make
j bid bi instead, and we swap i and j’s positions in the bid vector. In other words, we still have the
same bid vector b as before. However, the i-th coordinate now contains the bid from user j and
the j-th coordinate now contains the bid from user i. In this case, the outcomes for i and j would
be swapped too, that is, user i’s outcome becomes xj, pj and user j’s outcome becomes xi, pi.

17

Remark 2 (On separating the inclusion and conﬁrmation rules). In comparison, Roughgarden [Rou20,
Rou21] adopts a simpler notation that does not explicitly diﬀerentiate between the inclusion rule
and the conﬁrmation rule. Indeed, parts of our impossibility proofs do not care about this dif-
ferentiation — and in these cases, we use a simpliﬁed notation that coalesces the inclusion and
conﬁrmation rules (see Section 4.1). However, our results show that it is important to explicitly
separate the inclusion rule and the conﬁrmation rule in the modeling, to further our understand-
ing about TFMs. For example, making the inclusion rule explicit is important for proving the
impossibility under ﬁnite block size (see Corollary 4.9). Having this distinction is also useful in
constructing our upper bounds.

3.2 Strategic Behavior and Utility

Strategic player. We will consider three types of strategic players, 1) an individual user; 2) the
miner of the current block; and 3) the miner colluding with a single user. Henceforth, we will use
the term strategic player to refer to either a user, the miner, or the coalition of a miner and a single
user.

As mentioned earlier, user-user rendezvous is much more diﬃcult since users are ephemeral,
and this is likely why this line of works [LSZ19, BEOS19, Rou20] focused on miner-user collusion
(as opposed to user-user collusion). Moreover, it is easier for the miner to form a side contract with
a single user rather than more users.

Strategy space. A strategic player may rely on strategic deviations to improve its utility. We
ﬁrst deﬁne the strategy space in the most general form, capturing all possible deviations. Our
impossibility proof will rely on a much more restricted strategy space (which makes the impossibility
result stronger) — we will explicitly point out the strategy space needed by our impossibility in
Section 4. On the other hand, our weakly incentive compatible upper bound in Section 5 defends
against the broad strategy space deﬁned below.

A strategic player can engage in the following types of deviations or a combination thereof:

• Bidding untruthfully. A user or a user-miner coalition can bid untruthfully, possibly after exam-

ining some or all other users’ bids.

• Injecting fake transactions. A user, miner, or a user-miner coalition can inject fake transactions,
possibly after examining some or all other users’ bids. Fake transactions oﬀer no intrinsic value
to anyone, and their true value is 0.

• Strategically choosing which transactions to include in the block. A strategic miner or a miner-
user coalition may not implement the inclusion rule faithfully. It may choose an arbitrary subset
of transactions from the mempool to include in the block, as long as it satisﬁes any block validity
rule enforced by the blockchain.

Just like the prior work of Roughgarden [Rou20, Rou21], we do not consider the strategic
behavior of splitting a single bid b into multiple bids b1, . . . , bk whose sum is equal to b — in this case,
a more complicated utility deﬁnition is needed when only a proper subset of these bids are conﬁrmed.
To capture such strategies may require additional tools, e.g., modeling TFM as a combinatorial
auction [NRTV07], which we leave as future work. Such strategies may also be remotely related to
an elegant line of work on false-name bids in the mechanism design literature [SYM99,She09,Yok08].
Again, our work, just like Roughgarden’s [Rou20, Rou21], is among the very ﬁrst mathematical
explorations of transaction fee mechanism design, and part of our contribution is to expose the lack
of knowledge and the abundance of open questions in this space.

18

Utility. The utility of the miner or a miner-user coalition is computed as the following, where S
denotes the set of all real and fake transactions6 submitted by the miner or the miner-user coalition:

miner revenue +

(true value of b − payment of b)

X∀b∈S and b conﬁrmed

The utility of a sole user is computed as the following, where S denotes the set of all real and

fake transactions submitted by the user:

X∀b∈S and b conﬁrmed

3.3

Incentive Compatibility

(true value of b − payment of b)

We would like to have mechanisms that incentivize honest behavior, i.e., no deviation of a strategic
player can increase its utility. Depending on whether the strategic player is a user, the miner, or the
coalition of the miner and a single user, we can deﬁne user incentive compatibility, miner incentive
compatibility, and side-contract-proofness, respectively.

Deﬁnition 1 (User incentive compatibility). A TFM is said to be user incentive compatible (UIC),
iﬀ the following holds: assuming that the miner implements the mechanism honestly, an individual
user’s (expected) utility is always maximized if it bids truthfully, no matter what the other users’
bids are.

Deﬁnition 2 (Miner incentive compatibility). A TFM is said to be miner incentive compatible
(MIC), iﬀ no matter what the users’ bids are, the miner’s (expected) utility is always maximized if
it creates the block by honestly implementing the inclusion rule.

Deﬁnition 3 (c-side-contract-proofness). For any c ∈ N, a TFM is said to be c-side-contract-proof
(c-SCP), iﬀ for any coalition consisting of the miner and at least one and at most c user(s), its
(expected) utility is maximized when the colluding users bid truthfully and the miner plays by the
book, no matter what the other users’ bids are.

Remark 3 (Comparison with Roughgarden’s incentive compatibility notions). Our UIC and MIC
notions are equivalent to Roughgarden’s notions [Rou20, Rou21]. For the SCP notion, we modify
Roughgarden’s oﬀchain-agreement-proofness notion and parametrize it with the coalition size c.
Note that Roughgarden’s notion wants that there is no side contract that strictly beneﬁts every
coalition member in comparison with the honest on-chain strategy — this is equivalent to saying
that the coalition cannot deviate strategically to increase their joint utility. If they can increase
their joint utility there is always a way to split it oﬀ using a binding side contract such that every
coalition member strictly beneﬁts.

4

Impossibility Results

4.1 Simpliﬁed Notation and Restricted Strategy Space for our Impossibility

To rule out the existence of a UIC and 1-SCP mechanism under ﬁnite block size, our proof takes two
main steps. First, we shall prove that any TFM that satisﬁes UIC and 1-SCP simultaneously must
always have 0 miner-revenue (Theorem 4.3 and 4.7), no matter whether the block size is inﬁnite

6Recall the true value of a fake transaction is deﬁned to be zero.

19

or ﬁnite. These theorems hold even when the strategic player is conﬁned to a very restricted
strategy space: assuming that the miner always implements the mechanism faithfully; however,
either an individual user or a user colluding with the miner may bid untruthfully. In the second
part of the proof, we additionally throw in the ﬁnite block size restriction which leads to the stated
impossibility result (Corollary 4.9).

Simpliﬁed notations for deterministic mechanisms. We can simplify the notation in the
ﬁrst part of our proof, since this part makes use of a very restricted strategy space as mentioned
above. Instead of using the full tuple (I, C, P, M) to denote the TFM, we will use the following
simpliﬁed notation:

1. Allocation rule x: given a bid vector b := (b1, . . . , bm) ∈ Rm, the allocation rule x(b) outputs a
vector (x1, x2, . . . , xm) ∈ {0, 1}m, indicating whether each transaction (i.e., bid) in b is conﬁrmed
in the next block.

2. Payment rule p: given a bid vector b := (b1, . . . , bm) ∈ Rm, the payment rule p(b) outputs a
vector (p1, p2, . . . , pm) ∈ Rm, indicating the price paid by each transaction in b. It is guaranteed
that pi ≤ bi for i ∈ [m], i.e., a user never pays more than its bid.

3. Miner-revenue rule µ: given a bid vector b := (b1, . . . , bm) ∈ Rm, the miner-revenue rule µ(b)

outputs a single value in R denoting the amount paid to the miner.

More speciﬁcally, one can view:

• x as the composition of the inclusion rule I and the blockchain-enforced conﬁrmation rule C;
• p as the composition of the inclusion rule I and the blockchain-enforced payment rule P; and
• µ as the composition of the inclusion rule I and the blockchain-enforced miner-revenue rule M.

Additional notations. For convenience, we often use the notation xi(b) and pi(b) to denote
whether the i-th transaction in b is conﬁrmed in the next mined block, and what price it actually
pays. We assume that if xi(b) = 0, then, pi(b) = 0 — in other words, if the i-th transaction is
not conﬁrmed in the next block, then the i-th user pays nothing. Let b = (b1, b2, . . . , bm) be a bid
vector. We often use the notation b−i = (b1, b2, . . . , bi−1, bi+1, . . . , bm) to denote everyone except
user i’s bids; and the notation (b−i, bi) and b are used interchangeably.

Notations for randomized mechanisms. We use the same notations (x, p, µ) to denote a
randomized mechanism but their meaning is modiﬁed as follows. The allocation rule now outputs
the probability that each bid is conﬁrmed, that is, xi(b) ∈ [0, 1] is the probability that user i’s bid
is conﬁrmed given the included bids are b. Also, we view pi(b) as the expected payment of user i
and µ(b) as the expected miner-revenue.

We say that a TFM enjoys non-trivial miner revenue iﬀ µ(·) is not the constant 0 function, i.e.,

the miner sometimes can receive positive revenue.

4.2 Preliminary: Myerson’s Lemma

If a single-parameter TFM satisﬁes UIC (even when the user’s strategy space is restricted only to
untruthful bidding), the mechanism’s allocation rule x and payment rule p must satisfy the famous
Speciﬁcally, we only need a special case of Myerson’s Lemma: the
Myerson’s Lemma [Mye81].

20

mechanism can be randomized, and each user’s bid is either conﬁrmed or unconﬁrmed. In this
case, the allocation rule xi returns a real number in [0, 1], which is the probability that user i’s bid
is conﬁrmed. Additionally, pi is the expected payment of user i. Myerson’s Lemma implies the
following:

Lemma 4.1 (Myerson’s Lemma). Let (x, p, µ) be a single-parameter TFM that is UIC. Then, it
must be that

1. The allocation rule x is monotone, where monotone is deﬁned as follows. Consider b :=
(b1, . . . , bm), and let b−i be the vector obtained when we remove bi from b. An allocation
rule x is said to be monotone iﬀ for any b := (b1, . . . , bm), and any b′
i > bi, it must be that
xi(b−i, b′

i) ≥ xi(b−i, bi).

2. The payment rule p is deﬁned as follows. For any user i, bids b−i from other users, and bid bi

from user i, it must be

pi(b−i, bi) = bi · xi(b−i, bi) −

xi(b−i, t)dt.

(1)

bi

0

Z

Deterministic special case. When the mechanism is deterministic, the allocation rule xi returns
either 0 or 1. In this case, the unique payment rule can be simpliﬁed as

pi(b−i, bi) =

min{z ∈ [0, bi] : xi(b−i, z) = 1}
0

(cid:26)

if xi(b−i, bi) = 1,
if xi(b−i, bi) = 0.

Conceptually, user i only needs to pay the minimal price which makes its bid conﬁrmed.

To prove our impossibility for randomized mechanisms, we need to open up Myerson’s Lemma
and use the following technical lemma that is used in the proof of Myerson’s Lemma. More specif-
ically, the proof of Myerson’s Lemma showed that if a mechanism is UIC, then a user i’s payment
must satisfy the following inequality (also called a “payment sandwich”) where the allocation rule
x is monotone:

r ·

xi(b−i, r′) − xi(b−i, r)

≤ p(b−i, r′) − p(b−i, r) ≤ r′ ·

xi(b−i, r′) − xi(b−i, r)

(cid:0)

(cid:1)

Assume that the above payment sandwich holds for a non-decreasing function xi(b−i, ·), and more-
over, p(b−i, 0) = 0, then Myerson showed that the payment rule is of a unique form as shown in
Equation (1). To prove this, Myerson essentially proved the following technical lemma.

(cid:1)

(cid:0)

Lemma 4.2 (Technical lemma implied by the proof of Myerson’s Lemma [Mye81, Har]). Let f (z)
be a non-decreasing function. Suppose that z · (f (z′) − f (z)) ≤ g(z′) − g(z) ≤ z′ · (f (z′) − f (z)) for
any z′ ≥ z ≥ 0, and moreover, g(0) = 0. Then, it must be that

g(z) = z · f (z) −

f (t)dt.

z

0

Z

21

4.3 Deterministic Mechanisms: UIC + 1-SCP =⇒ Zero Miner Revenue

As a warmup, we ﬁrst prove a lower bound for deterministic mechanisms. Then, in Section 4.4, we
generalize the proof to randomized mechanisms. The following theorem states that no deterministic
TFM with non-trivial miner revenue can achieve UIC and 1-SCP simultaneously, no matter whether
the block size is ﬁnite or inﬁnite.

Theorem 4.3 (Deterministic TFM: UIC + 1-SCP =⇒ 0 miner revenue). There is no deterministic
TFM with non-trivial miner revenue that achieves UIC and 1-SCP at the same time. Moreover,
the theorem holds no matter whether the block size is ﬁnite or inﬁnite.

The rest of this section will be dedicated to proving the theorem. The following claim states
that if an individual user changes its bid in a way that does not aﬀect whether it is conﬁrmed, then
the miner’s revenue should not change.

Claim 4.4. Suppose that a TFM (x, p, µ) satisﬁes UIC and 1-SCP. Suppose that xi(b−i, bi) =
xi(b−i, b′

i). Then, it must be that µ(b−i, bi) = µ(b−i, b′

i).

Proof. Since the TFM satisﬁes UIC, the tuple (x, p) satisﬁes Myerson’s Lemma. We know that
xi(b−i, bi) = xi(b−i, b′
In the former case, pi(b−i, bi) =
pi(b−i, b′
i) = 0. In the latter case, by Myerson’s Lemma, no matter whether user i’s bid is bi or b′
i,
its payment equals the minimal amount it bids that still allows the transaction to be conﬁrmed.
Therefore, in either case, we have that pi(b−i, bi) = pi(b−i, b′

i) = 0 or xi(b−i, bi) = xi(b−i, b′

i) = 1.

Suppose that µ(b−i, bi) 6= µ(b−i, b′

i). Without loss of generality, we may assume that µ(b−i, b′

i) >
µ(b−i, bi). In this case, imagine that all users’ true values are represented by the vector (b−i, bi).
If user i bids bi truthfully, the coalition’s
Now, consider the coalition of the miner and user i.
joint utility is U := µ(b−i, bi) + bi − pi(b−i, bi). However, if user i’ strategically bids b′
i instead,
the coalition’s joint utility is U ′ := µ(b−i, b′
i),
U ′ − U = µ(b−i, b′
i) − µ(b−i, bi) > 0. This shows that the coalition can gain if user i bids untruth-
fully, thus violating 1-SCP.

i). Since pi(b−i, bi) = pi(b−i, b′

i) + bi − pi(b−i, b′

i).

Lemma 4.5. Let (x, p, µ) be any TFM with non-trivial miner revenue. Then, there exists a bid
vector b = (b1, . . . , bm) and a user i such that µ(b−i, 0) < µ(b).

Proof. Since the mechanism enjoys non-trivial miner revenue, there exists a bid vector b(0) =
(b1, . . . , bm) such that µ(b(0)) > 0. Now, consider the following sequence of bid vectors: for i ∈ [m],
let b(i) be obtained by setting the ﬁrst i coordinates of b(0) to 0. Observe that b(m) = 0.

Since a user can pay at most its bid, we have µ(b) ≤ |p(b)|1 ≤ |b|1 for any bid vector b.
Therefore, µ(b(m)) ≤ |b(m)|1 = 0. Since µ(b(0)) > 0, there exists an i ∈ [m − 1] such that
0 = µ(b(i)) < µ(b(i−1)).

Lemma 4.6. If there exists a bid vector b = (b1, . . . , bm) and a user i such that µ(b−i, 0) < µ(b),
then the TFM (x, p, µ) is either not UIC or not 1-SCP.

Proof. For the sake of reaching a contradiction, suppose that (x, p, µ) is both UIC and 1-SCP. By
Myerson’s Lemma, we have xi(b−i, 0) ≤ xi(b). Due to Claim 4.4, it must be xi(b−i, 0) = 0 and
xi(b) = 1.

Let ∆ = µ(b) − µ(b−i, 0) > 0 and ǫ = 1

2 · min(∆, pi(b)) > 0. Imagine that everyone else except
user i is bidding b−i, and user i’s true value is vi = pi(b) − ǫ > 0. Due to Myerson’s Lemma, since
vi < pi(b), user i’s bid would be unconﬁrmed if it were to bid truthfully. In this case, by Claim 4.4,
the miner’s utility is µ(b−i, 0) and user i’s utility is zero.

22

However, the miner can sign a side contract and ask user i to bid pi(b) instead. By Myerson’s
Lemma, at this moment, user i’s bid will indeed be conﬁrmed. By Claim 4.4, the miner’s utility
is now µ(b) and user i’s utility is now vi − pi(b) = −ǫ. Consequently, their joint utility becomes
µ(b) − ǫ, which has increased by ∆ − ǫ > 0. This violates 1-SCP.

Proof of Theorem 4.3. Theorem 4.3 follows directly from the combination of Lemma 4.5 and
Lemma 4.6.

4.4 Randomized Mechanisms: UIC + 1-SCP =⇒ Zero Miner Revenue

We now generalize Theorem 4.3 to even randomized mechanisms.
In a randomized TFM, the
random coins could come from either the miner or the blockchain itself. Since we are proving
an impossibility, without loss of generality, we may assume that the blockchain comes with an
unpredictable random source. Our impossibility result actually does not care where the random
coins come from.

Earlier in Section 2.2, we presented the intuition for this impossiblity. Therefore, below, we

directly jump to the formal description.

Notations for randomized mechanisms. Recall that for randomized mechanisms, the allo-
cation rule now outputs the probability that each bid is conﬁrmed; that is, xi(b) ∈ [0, 1] is the
probability that user i’s bid is conﬁrmed given the included bids are b. Also, pi(b) is now the
expected payment of user i and µ(b) is the expected miner-revenue.

For convenience, we deﬁne the following quantity:

πb−i(r) = pi(b−i, r) − µ(b−i, r)

One can think of πb−i(r) as a virtual user i’s payment in the virtual auction (see Section 2.2). The
following theorem is a generalization of Theorem 4.3 to even randomized mechanisms.

Theorem 4.7 (Randomized TFM: UIC + 1-SCP =⇒ 0 miner revenue). There is no randomized
TFM with non-trivial miner revenue that achieves UIC and 1-SCP at the same time. Moreover,
the theorem holds no matter whether the block size is ﬁnite or inﬁnite.

We will now prove this theorem. First, we introduce a useful lemma.

Lemma 4.8. Let (x, p, µ) be any randomized TFM. If (x, p, µ) is 1-SCP, then, for any bid vector
b, user i, and r, r′ such that r < r′, it must be

r ·

xi(b−i, r′) − xi(b−i, r)

≤ πb−i(r′) − πb−i(r) ≤ r′ ·

xi(b−i, r′) − xi(b−i, r)

.

Proof. First, we prove the case of r · (xi(b−i, r′) − xi(b−i, r)) ≤ πb−i(r′) − πb−i(r). For the sake of
reaching a contradiction, suppose there exists a vector b, a user i and r < r′ such that

(cid:1)

(cid:0)

(cid:1)

(cid:0)

r ·

xi(b−i, r′) − xi(b−i, r)

> πb−i(r′) − πb−i(r).

(2)

(cid:0)

(cid:1)

Imagine that the real bid vector is (b−i, r) and user i’s true value is r. If they do not have a side
contract, the miner’s expected utility is µ(b−i, r) and user i’s expected utility is r · xi(b−i, r) −
pi(b−i, r). However, the miner can sign a contract with user i and ask user i to bid r′ instead.
In this case, the miner’s expected utility becomes µ(b−i, r′) and user i’s expected utility becomes
r · xi(b−i, r′) − pi(b−i, r′) since the user’s true value is still r. By Eq.(2), their joint expected utility
increases by r · (xi(b−i, r′) − xi(b−i, r)) − (πi(b−i, r′) − πi(b−i, r)) > 0. This violates 1-SCP.

23

The other case πb−i(r′) − πb−i(r) ≤ r′ · (xi(b−i, r′) − xi(b−i, r)) can be proven by a similar
argument, so we only sketch the proof. Suppose the inequality does not hold, that is, suppose that
πb−i(r′) − πb−i(r) > r′ · (xi(b−i, r′) − xi(b−i, r)). Imagine that the real bid vector is (b−i, r′) and
user i’s true value is r′. The miner can sign a contract with user i and ask user i to bid r instead. In
this case, their joint expected utility increases by πb−i(r′)−πb−i(r)−r′·(xi(b−i, r′) − xi(b−i, r)) > 0.
This violates 1-SCP.

Proof of Theorem 4.7 We now continue with the proof of Theorem 4.7. Consider the following
quantity:

πb−i(r) = pi(b−i, r) − µ(b−i, r) − (pi(b−i, 0) − µ(b−i, 0))

By Lemma 4.8, and the fact that deﬁnition of
it must be that

e

πb−i(r) and πb−i(r) diﬀers by only a ﬁxed constant,

r ·

xi(b−i, r′) − xi(b−i, r)

≤

e

πb−i(r′) −

πb−i(r) ≤ r′ ·

xi(b−i, r′) − xi(b−i, r)

.

(3)

(cid:0)

Now, observe that the above expression exactly agrees with the “payment sandwich” in the proof
πb−i(0) = 0 by deﬁnition; and x
of Myerson’s Lemma [Mye81, Har]. Furthermore, we have that
must be monotone because the TFM is UIC and satisﬁes Myerson’s Lemma. Due to Lemma 4.2,
it must be that

πb−i(·) obeys the unique payment rule speciﬁed by Myerson’s Lemma, that is,

e

e

e

(cid:0)

(cid:1)

(cid:1)

e

πb−i(r) = bi · xi(b−i, bi) −

bi

0
Z

xi(b−i, t)dt.

On the other hand, since the TFM is UIC, its payment rule itself must also satisfy the same
expression, that is,

e

bi

We therefore have that

pi(b−i, r) = bi · xi(b−i, bi) −

xi(b−i, t)dt.

0
Z

πb−i(r) = pi(b−i, r) − µ(b−i, r) − (pi(b−i, 0) − µ(b−i, 0)) = pi(b−i, r)

In other words, µ(b−i, r) = µ(b−i, 0) − p(b−i, 0), which is a constant that is independent of user
i’s bid r when b−i is ﬁxed.

e

We now argue that this actually implies µ(b−i, r) = 0, i.e., a possibly randomized TFM that
is UIC and 1-SCP must always have 0 miner revenue. Suppose this is not true, i.e., suppose there
exists a randomized TFM with non-trivial miner revenue (x, p, µ) that is UIC and 1-SCP. Since it
enjoys non-trivial miner revenue, there exists a bid vector b(0) = (b1, . . . , bm) such that µ(b(0)) > 0.
Now, consider the following sequence of bid vectors: for i ∈ [m], let b(i) be obtained by setting the
ﬁrst i coordinates of b(0) to 0. Observe that b(m) = 0.

Recall that we have argued for a ﬁxed b−i, the miner revenue µ(b−i, ·), is a constant function
independent of user i’s bid. Thus, µ(b(i−1)) = µ(b(i)) for all i ∈ [m]. Consequently, we obtain
µ(b(0)) = µ(b(m)). However, users can only pay their bids at most, so we have µ(b(m)) ≤ |b(m)|1 =
0. This contradicts the assumption that µ(b(0)) > 0.

4.5 UIC + 1-SCP + Finite Block Size =⇒ Impossibility

Theorem 4.7 holds no matter whether the block size is ﬁnite or inﬁnite. In this section, we prove
a corollary stating that if the block size is ﬁnite, then no non-trivial TFM can satisfy UIC and
1-SCP simultaneously. Particularly, assuming ﬁnite block size, the only TFM that satisﬁes both

24

UIC and 1-SCP is the one that never conﬁrms any transaction, and always pays the miner nothing.
This corollary holds assuming the following strategic behavior is possible: an individual user or
a user colluding with the miner can bid untruthfully; and the miner can arbitrarily decide which
transactions to include in the block (as long as it respects the block’s validity constraint).

Corollary 4.9 (UIC + 1-SCP + ﬁnite block size =⇒ impossibility). Suppose the size of a block
is ﬁnite. Then, the only randomized TFM (x, p, µ) that satisﬁes both UIC and 1-SCP is the trivial
mechanism that never conﬁrms any transaction no matter how users bid, and always pays the miner
nothing.

Proof. For the sake of reaching a contradiction, suppose that there is a non-trivial TFM that
satisﬁes UIC and 1-SCP. By Theorem 4.7, any TFM that satisﬁes both UIC and 1-SCP must have
constant zero miner revenue. Henceforth, we may assume that the miner always gets zero payment.
Let B denote an upper bound on the block size. Since the TFM is non-trivial, there ex-
ists a bid vector b = (b1, . . . , bm) and a user i∗ such that xi∗(b) > 0. Now,
let ǫ be any
positive number, let n > B·(bi∗ +ǫ)
xi∗ (b)·ǫ be a suﬃciently large integer. Consider another bid vector
b′ = (b1, . . . , bm, bm+1, . . . , bm+n) where bj = bi∗ + ǫ for all j ∈ [m + 1, m + n]. Imagine that the
real bid vector is actually b′ and each user bids truthfully, i.e., user j’s true value is vj = bj for all
j ∈ [m + n]. Since the block size is at most B, there must be a user j ∈ [m + 1, m + n] who bids bj
is included with probability at most B/n < xi∗ (b)·ǫ
bi∗ +ǫ .

Consider the coalition of the miner and user j. If everyone bids truthfully and the miners runs
n < (bi∗ +ǫ)· xi∗ (b)·ǫ
the honest mechanism, then their joint utility is strictly less than bj · B
bi∗ +ǫ = xi∗(b)·ǫ
— since the miner always gets 0 revenue and user j’s utility is upper bounded by bj · B
n . However,
the miner can sign a contract with user j. The contract asks user j to change the bid from bj to
bi∗, and the miner pretends that the actual bid vector is b, where the coordinate bi∗ actually comes
from user j. In this case, the coalition’s joint utility is (vj − bi∗) · xi∗ (b) = ǫ · xi∗(b). Therefore, the
coalition can increase its expected utility by deviating. This violates 1-SCP.

5 Rethinking the Incentive Compatibility Notions

So far in our impossibility results, we have assumed it is free of charge for a strategic player to inject a
fake transaction or overbid (i.e., bid higher than its true value), as long as the oﬀending transaction
is not conﬁrmed in the present block. Not only so, in fact, the same model was implicitly or
explicitly adopted in earlier works on transaction fee mechanism design [Rou20, Rou21, BEOS19],
too.

Such a model, however, may be overly draconian, since there is actually some cost associated
with cheating that the existing model does not charge. In reality, the TFM is not a standalone
auction, it is repeatedly executed as blocks get conﬁrmed. Although an overbid or fake transaction
need not pay fees to the present miner if it is not conﬁrmed, in real life, any transaction that has
been submitted to the network cannot be retracted. Therefore, the oﬀending transaction could
be conﬁrmed and paying fees in a future block (e.g., paid to a diﬀerent miner or simply burnt).
Consequently, a risk-averse miner-user coalition may be deterred from such deviations for fear of
losing the oﬀending transaction’s fees to a future block.
Therefore, a natural and interesting question is:

If we ﬁx the existing model and more carefully account for the cost of such cheating, can this
help us circumvent the impossibility results?

25

One challenge we are faced with, however, is the diﬃculty of accurately characterizing the cost
of such cheating. If an overbid or fake transaction is conﬁrmed in a future block, it is hard for us to
predict how much the oﬀending transaction will end up paying, since the payment amount may not
be equal to the bid, and the payment amount depends on the environment (e.g., the other bids),
as well as the mechanism itself.

Despite this diﬃculty, we still want to understand whether this direction is worth exploring. A
reasonable approach is to start by asking what is the worst-case cost. Once we understand what is
the worst-case cost, we can consider how to deﬁne a more general, parametrized cost model.

1. Worst-case cost. A worthwhile ﬁrst step is to consider the worst-case cost for the aforementioned
deviation. Speciﬁcally, whenever a strategic player injects a fake transaction or overbids and
the oﬀending transaction cannot be conﬁrmed in the present block, the strategic player assumes
the worst case scenario, i.e., the oﬀending transaction can end up paying fees as high as its bid
in the future.

Assuming the worst-case cost is useful in several ways. First, it is useful for proving lower
bounds. If we can prove lower bounds even for the worst-case cost, it would directly imply lower
bounds if in reality, the cost is actually smaller than the worst case. Second, assuming the
worst-case cost is also equivalent to considering strategic players who are paranoid — they only
want to deviate if they will surely beneﬁt, and there is no possible scenario in which they will
lose. In other words, we are asking whether there is a mechanism that can at least discourage
such paranoid players from deviating.

2. General, parametrized cost model. As mentioned, it is challenging to accurately capture or
predict the cost of overbid or fake transactions that are unconﬁrmed in the present. In practice,
however, one might be able to measure the cost of such cheating from historical data. This
motivates a more generalized cost model, where we assume that there is some discount factor
γ ∈ [0, 1], and the cost of such cheating is actually γ times the worst-case cost.

5.1 Deﬁning γ-Strict Utility

As we argued, the utility notions in prior work ignore certain costs associated with cheating. We
therefore deﬁne a more reﬁned utility notion that charges such cost parametrized by a “strictness”
parameter γ ∈ [0, 1].
In other words, when γ = 1, we are charging the worst-case cost, and
equivalently, we are asking whether there are incetive compatible TFMs against paranoid players
who only want to deviate if there is a sure gain and no risk of losing. We will also be using γ = 1
to prove lower bounds, and this gives stronger lower bound results. When γ = 0, we are charging
no cost — in this case, our new incentive compatibility deﬁnitions would be equivalent to the old
notions in Section 3.

Recall that the term “strategic player” can refer to a user, a miner, or a miner-user coalition. An
oﬀending transaction is one whose bid exceeds the transaction’s true value: it can be an untruthful
bid or an injected fake transaction, since we may assume that a fake transaction’s true value is 0.
In the worst-case scenario, an oﬀending transaction that is not conﬁrmed in the present block may
be charged a transaction fee equal to its full bid, when it is conﬁrmed in a future block (possibly
mined by a diﬀerent miner). Let v be the true value of the oﬀending transaction (and v = 0 if the
oﬀending transaction is fake), and let b ≥ v be the bid value. Therefore, in the worst-case scenario,
the oﬀending transaction can cost b − v in utility, due to losing fees to a future block.

In practice, if we can measure the actual cost from historical data, we may be able to learn a
parameter γ ∈ [0, 1], and model the actual cost as γ times the worst-case cost, that is, γ · (b − v).

26

γ-strict utility. We now formally deﬁne the utility function of a strategic player:

γ-strict utility

• If the strategic player includes the miner, then let u ← µ where µ is the miner’s revenue in

the present block; else let u ← 0.

• For any real or fake transaction the strategic player has submitted with true value v and a

bid of b:

– if the transaction is conﬁrmed in the present block, let u ← u + v − p where p denotes

its payment.

– if the transaction is not conﬁrmed in the present block and moreover b > v, then let

u ← u − γ · (b − v). See also Remark 4.

• Output the ﬁnal utility u.

Deﬁnition 4 (Incentive compatibility under γ-strict utility). Let X ∈ {UIC, MIC, c-SCP}. We
can now deﬁne X under γ-strict utility just like in Deﬁnitions 1, 2, and 3, respectively, except that
now we adopt the aforementioned γ-strict utility.

Deﬁnition 5 (Weak incentive compatibility). For convenience, for the special case γ = 1, we also
refer to our incentive compatibility notions as weak incentive compatibility. More speciﬁcally, we
use the following aliases:

weak UIC = UIC under 1-strict utility

weak MIC = MIC under 1-strict utility

c-weak-SCP = c-SCP under 1-strict utility

Remark 4. Since the miner has the ability to include an arbitrary set of transactions in the block,
without loss of generality, we may assume that the following deviations never take place since they
do not help the miner or the miner-user coalition:

1. the miner or the miner-user coalition never bids untruthfully for any transaction not included

in the block;

2. miner or the miner-user coalition never injects a fake transaction that is not included in the

block.

Therefore, one can equivalently view our new utility deﬁnition as only charging an additional
cost for overbid or fake transactions that are unconﬁrmed but included in the block. Note that
any transaction included in the block must have been broadcast to the network and cannot be
retracted.

5.2 Burning Second-Price Mechanism

Earlier in Section 2.3, we presented the burning second-price mechanism which can be parametrized
with any γ ∈ (0, 1] and c ≥ 1; we additionally explained how to realize the on-chain random coins
needed for the mechanism. We now prove Theorem 2.1, that is, for any c ≥ 1 and γ ∈ (0, 1], the
burning second-price auction satisﬁes UIC, MIC, and c-SCP under γ-strict utility.

We prove the properties one by one. Throughout this proof, we assume the γ-strict utility
notion. We may assume that γ ∈ (0, 1], since if γ = 0, the burning second-price auction always
conﬁrms nothing and it trivially satisﬁes all these properties.

27

UIC. According to the utility deﬁnition for the user, any injected fake transaction cannot lead to
an increase in the user’s utility. Therefore, we may assume that the user does not inject any fake
transactions, and the only strategic behavior is bidding untruthfully.

Let b = (b1, · · · , bm) be an arbitrary bid vector, where b1 ≥ · · · ≥ bm and user i bids truthfully
(i.e. bi = vi). Suppose i ≥ k + 1 and thus bi ≤ bk+1. If user i bids honestly, its utility is 0 since it
is unconﬁrmed. Imagine that user i changes its bids to b′
i. There are two cases. First, user i’s new
bid b′
i is still not ranked among the top k (possibly after the tie-breaking). In this case, its utility
i > vi. Second, the new bid b′
is either zero if b′
i is now ranked among the top
k. We have b′

i ≥ bk+1. Further, user i’s utility becomes

i < vi or negative if b′

(1 −

γ
c

) · γ(b′

i − bi) +

γ
c

· (bi − bk),

i is not conﬁrmed, and the second term captures the cost

where the ﬁrst term captures the cost if b′
if b′

i is conﬁrmed. Since b′
i − bi < 0 and bi − bk ≤ 0, its utility only decreases.
The case of i ≤ k can be shown by a similar argument. In this case, if user i bids honestly, it is
among the top k, and its utility is at least 0. Now, imagine user i changes its bid to b′
i. There are
two cases. First, if b′
i cause user i to be no longer among the top k, then its utility is 0. Second,
with the new bid b′
i, user i is still among the top k. If it underbids its utility is the same as bidding
honestly. If it overbids, its utility is the same as bidding honestly conditioned on it is conﬁrmed,
and its utility decreases by γ(b′

i − bi) conditioned on it is not conﬁrmed.

MIC. A miner has two kinds of strategies to deviate from honest behavior: not to choose the
highest bids and to inject fake bids. Without loss of generality, we assume that the miner chooses
the included bids ﬁrst, and then replaces some of the real bids with fake bids. We may also assume
that all injected fake bids are included in the block. We will show that both steps would not increase
the miner’s utility. Let (c1, . . . , cB) be the highest B bids in the bid vector, where c1 ≥ · · · ≥ cB.
The miner’s revenue is γ(ck+1 + · · · + cB). Now, suppose the miner does not choose the highest
bids. Let (d1, . . . , dB) be the resulting bids, where d1 ≥ · · · ≥ dB — we may assume that there are
always inﬁnitely many 0-bids that are “for free”, and the miner can choose these 0-bids too. Then,
miner’s revenue becomes γ(dk+1 + · · · + dB). Since (c1, . . . , cB) are the highest B bids, we have
cj ≥ dj for all j ∈ [B]. Thus, miner’s revenue does not increase.

We will next show that whenever the miner replaces an included real bid with a fake bid, the
miner’s utility does not increase. Notice that if the fake bid is conﬁrmed, it costs the (k + 1)-th
price among the included bids. If the fake bid b is unconﬁrmed, it costs γ · b, since its true value
is zero. Let e = (e1, . . . , eB) be an arbitrary bid vector where e1 ≥ · · · ≥ eB. The bids e may or
may not be the highest bids and some of them may be fake. Suppose the miner replaces ei with
the fake bid f . There are four possible cases.

1. i ≤ k and f is among the top k

2. i ≤ k and f is not among the top k

3. i > k and f is among the top k

4. i > k and f is not among the top k

Henceforth, no matter which case, let e′
B denote the included bids after replacing ei
with f . Let µ := γ(ek+1 + · · · + eB) be the miner’s revenue before replacing ei with the fake bid f ,
and let µ′ := γ(e′

B) be the miner’s revenue after replacing ei with the fake bid f .

1 ≥ · · · ≥ e′

k+1 + · · · + e′

28

In the ﬁrst case, for each bid among the top k, the probability that it is conﬁrmed is γ/c, so

the extra cost for the miner is

(1 −

γ
c

) · γ · f +

γ
c

· ek+1 ≥ 0

where the ﬁrst term captures the expected cost if f is not conﬁrmed, and the second term captures
the expected cost if f is conﬁrmed. In this case, it is easy to see that e′
k+j = ek+j for any j > 0,
and thus µ′ = µ. Therefore, miner’s expected utility does not increase.

In the second case, f must be unconﬁrmed, so it costs the miner γ · f additionally to inject f .
Also, since f is not among the top k, it must be f ≤ ek+1. Because ek+1 (or another bid equal to
ek+1) is among the new top k, the miner’s revenue becomes γ(ek+2 + · · · eB + f ). Thus, the miner
revenue decreases by γ(ek+1 − f ).
Including the extra cost γ · f , miner’s utility actually decreases
by

γ(f + ek+1 − f ) ≥ γ · ek+1.

In the third case, it must be f ≥ ek. Moreover, ek becomes the largest deﬁnitely unconﬁrmed
c · ek ≥ γ · ek. However, it is not hard to see that

c ) · γ · f + γ
bid, so miner’s extra cost is (1 − γ
µ′ − µ ≤ γ · ek. Therefore, overall, the miner’s expected utility does not increase.

In the fourth case, f is unconﬁrmed, so it costs the miner γ · f additionally. If f ≤ ei, then it
k+j ≤ ek+j for any j > 0. Therefore, we have µ′ ≤ µ, and the miner’s revenue does not
B) − (ek+1 + · · · + eB) = f − ei. Thus, the
B) − γ(ek+1 + · · · + eB) ≤ γ(f − ei) ≤ γ · f , which is

must be e′
increase. Otherwise, if f > ei, we have (e′
increase in miner revenue is γ(e′
strictly smaller than the extra cost. Thus the miner’s expected utility does not increase.

k+1 + · · · + e′

k+1 + · · · + e′

Finally, because e is an arbitrary vector which may include fake bids already, we conclude that

the miner’s expected utility does not increase even if there are multiple fake bids.

c-SCP. A coalition of a miner and up to c user(s) has three kinds of strategies to deviate from
the honest behavior: the miner may not include the highest bids, the miner can inject fake bids,
and some of the user(s) can bid untruthfully. Let C be the set of colluding users, where |C| ≤ c.
Without loss of generality, we assume the coalition prepares the block in the following order.

1. The miner chooses the included bids arbitrarily. We may imagine that there are inﬁnitely

many 0-bids that are “for free” and the miner can choose from these as well.

2. The miner replaces some of the included real bids (not including the users in C) with fake
bids. Without loss of generality, we may assume that all injected fake bids are included in
the block.

3. A subset of users in C change their bids and bid untruthfully.

We now show that the joint utility of the coalition does not increase after each step.

The ﬁrst step of c-SCP. We may imagine that the miner deletes the real bids one by one, and
then includes the highest among the remaining bids. We argue that after deleting each bid, the
coalition’s expected utility does not increase. Let e = (e1, . . . , em) be the current bid vector where
e1 ≥ · · · ≥ em, which may already have some bids deleted from the real bid vector. Suppose the
miner deletes a bid from e. If the deleted bid is not among the top B, then it does not aﬀect the
coalition’s utility. If the deleted bid is ranked between [k + 2, B], then the miner’s utility cannot
increase and no user’s utility increases.

If the deleted bid is among the top k, then the miner’s revenue decreases by at least γ · (ek+1 −
c · (ek+1 − ek+2)

ek+2). Every user who was among the top k before and after this deletion has γ

29

increase in expected utility. The bid ek+1 (or another bid of equal value) now becomes among the
top k, and its increase in expected utility is also γ
c · (ek+1 − ek+2). The utility of the user who got
deleted decreases. All other users’ utilities are unaﬀected. Thus, as long as the number of colluding
users |C| ≤ c, the increase in utility for users in C is upper bounded by γ · (ek+1 − ek+2). Overall,
the coalition does not gain in expected utility.

If the deleted bid is ranked k + 1 in e, the miner’s decrease in revenue is at least γ ·(ek+1 − ek+2).
For each user among the top k in e, its increase in utility is γ
c · (ek+1 − ek+2). The utility of all
other users are unaﬀected. Thus, as long as |C| ≤ c, the increase in utility for users in C is upper
bounded by γ · (ek+1 − ek+2). Overall, the coalition does not gain in expected utility.

The second step of c-SCP. Let e be an initial bid vector which may already have some bids
deleted, and some real bids replaced with fake bids. Suppose the miner replaces some ei where
i ∈ [B] with a fake bid f . Due to the proof of MIC, the miner’s utility does not increase after the
second step. If no user’s expected utility increases after replacing a real bid with a fake one, then
the coalition’s expected utility cannot increase. Therefore, we only need to consider the cases in
which there exists some user whose expected utility increases after replacement. Recall that in the
proof of MIC, we divided into four possible cases. In cases 1 and 3, no user’s expected utility would
increase. Below, we focus on cases 2 and 4.

In case 2, i ≤ k and f is not among the top k. In this case, for every user j ∈ [k] and j 6= i,
its expected utility increases by γ
c (ek+1 − max(f, ek+2)). The bid ek+1 now becomes the top k, and
its utility also increases by γ
c (ek+1 − max(f, ek+2)). The bid ei’s expected utility decreases, and
all other users’ expected utilities are unaﬀected. However, the miner’s utility decreases by at least
γ · (ek+1 − max(f, ek+2)). Therefore, as long as |C| ≤ c, the coalition’s expected utility does not
increase.

In case 4, i > k and f is not among the top k. For some user’s utility to increase, it must be that
i = k + 1 and f < ek+1, i.e., the payment price must have decreased to max(f, ek+2). Similarly, for
every user j ∈ [k], its increase in expected utility is γ
c (ek+1 − max(f, ek+2)), and every other user’s
utility is unaﬀected. The miner’s decrease in utility is at least γ · (ek+1 − max(f, ek+2)). Therefore,
as long as |C| ≤ c, the coalition’s expected utility does not increase.

The third step of c-SCP. At this step, the colluding users change their bids one by one.
Without loss of generality, we assume the colluding users change their bids in an ascending order
according to their true values; that is, the users with lower true values change their bids ﬁrst. Let
e = (e1, . . . , eB) be an arbitrary bid vector included in the block, where e1 ≥ · · · ≥ eB. The bids e
may or may not be the highest bids and some of them may be fake or overbidding bids. Note that
if any user whose bid is not included in the block changes its bid, the coalition’s joint utility cannot
increase. Thus, we may assume that a colluding user i included in the block changes its bid. Since
the colluding users change their bids one by one, that means user i has not changed its bid before,
and ei must be the user’s true value. Henceforth, we often use ei to refer to the user that placed
this bid without risking ambiguity. We will show that the joint utility of miner and all users in C
would not increase if ei changes its bid to bi.

When ei is replaced with bi, there are four possible cases.

1. i > k and bi is among the top k

2. i > k and bi is not among the top k

3. i ≤ k and bi is among the top k

4. i ≤ k and bi is not among the top k

30

Henceforth, no matter which case, let e′
with bi.

1 ≥ · · · ≥ e′

B denote the included bids after replacing ei

c ) · γ · (ei − bi) + γ

In the ﬁrst case, ek becomes the largest unconﬁrmed bid. ei’s utility was zero before, and it
becomes (1 − γ
c · (ei − ek) afterwards. Since bi ≥ ek ≥ ei, the decrease in utility is at
least γ(ek − ei). Besides ei, all other users’ utilities cannot increase. The miner’s revenue increases
by at most γ(ek − ek+1) ≤ γ(ek − ei). Thus, the coalition’s expected joint utility does not increase.
k′
i=1 ek+i = bi −ei. Thus the miner’s change in revenue
k+1. There are two

k+i −
is γ · (bi − ei). For the users who are among the top k, their payment become e′
subcases.

In the second case, we have

k′
i=1 e′

P

P

• If ei is overbidding (bi > ei), it must be e′

k+1 ≥ ek+1, so the utilities of the users among top k do
not increase. ei’s utility reduces from zero to γ(ei − bi) < 0. Since the miner’s revenue increases
at most by γ(bi − ei), the coalition’s joint expected utility does not increase.

• If ei is underbidding (bi < ei), it must be ek+1 ≥ e′

j for
all j. Further, ei’s utility is still zero; and the miner’s revenue decreases at least γ(ei − bi) ≥
γ · (ek+1 − e′
k+1). The utility of each user among top k increases only by γ(ek+1 − e′
k+1)/c. All
other users’ utilities are unaﬀected. Thus, even if the miner colludes with c users, their joint
expected utility does not increase.

k+1. In this case, it must be ej ≥ e′

In the third case, ei’s utility and miner’s utility do not change individually. Moreover, all other
k+1. Thus, the joint utility of the coalition

users’ utilities do not change either, because ek+1 = e′
does not change.

In the fourth case, the miner’s revenue reduces from γ(ek+1 +· · ·+eB) to γ(ek+2 +· · ·+eB +bi) =

γ(ek+1 − bi). We now consider each user’s change in utility.

• Since the user ei’s bid is replaced with bi and now becomes unconﬁrmed, its utility reduces from

γ(ei − ek+1)/c to zero. Also, note that ei (who now bids bi) must belong to C.

• For anyone that was among top k before and after the replacement, its new payment is max(bi, ek+2)

if conﬁrmed. Thus its expected utility increases by γ

c · (ek+1 − max(bi, ek+2)).

• Now consider the user that bids ek+1. This is the most complicated case. Let v be this user’s
true value. If this user is a coalition member, and its bid ek+1 was previously changed, then we
know that v ≤ ei since we are changing the coalition users’ bids in ascending order of their true
value. In all other cases, v = ek+1 ≤ ei.

After the replacement of ei with bi, conditioned on not being conﬁrmed, the user’s utility does
not change since previously it was always unconﬁrmed. Conditioned on being conﬁrmed, the
user’s utility increases by at most v − max(bi, ek+2) + max(0, γ · (ek+1 − v)), where the part
max(0, γ · (ek+1 − v)) is because the user might be overbidding, i.e., v < ek+1, and before
the replacement it was always unconﬁrmed. Therefore, the user’s expected gain in utility is
γ
c (v − max(bi, ek+2) + max(0, γ · (ek+1 − v))).
• For every other user, its utility is unaﬀected.

Now, suppose that the user bidding ek+1 belongs to the coalition. We know that ei, whose bid
is being changed to bi, belongs to the coalition too. The joint utility of ek+1 and ei increases by
γ
c (v − max(bi, ek+2) + max(0, γ · (ek+1 − v))) − γ
c (ei − ek+1). If ek+1 ≥ v, their increase in utility is

31

upper bounded by

v − max(bi, ek+2) + γ · (ek+1 − v)

−

γ
c

(ei − ek+1)

(cid:2)

v − max(bi, ek+2) + γ · (ek+1 − v) − ei + ek+1

(cid:3)

(cid:2)

(cid:3)
ek+1 − max(bi, ek+2) + γ · (ek+1 − v) − (ei − v)

(cid:2)

ek+1 − max(bi, ek+2) + γ · (ek+1 − v) − (ek+1 − v)

(cid:3)

(cid:2)
(ek+1 − max(bi, ek+2))

(cid:3)

γ
c
γ
c
γ
c
γ
c
γ
c

=

=

≤

≤

If ek+1 < v, their increase in utility is upper bounded by γ
γ
c (ek+1 − max(bi, ek+2)), too.

c (v − max(bi, ek+2) − ei + ek+1) ≤

All other users’ expected utilities are either unaﬀected or increases by at most γ

c (ek+1 −
max(bi, ek+2)). Therefore, as long as |C| ≤ c, the coalition’s joint utility cannot increase. Suppose
that the user bidding ek+1 does not belong to the coalition. This case is easier since all users’
expected utilities cannot increase by more than γ
c (ek+1 − max(bi, ek+2)). Therefore, as long as
|C| ≤ c, the coalition’s joint utility cannot increase.

6 Randomness is Necessary for Weak Incentive Compatibility

Recall that when c = 1, our burning 2nd price auction becomes deterministic; but for all c > 1,
the mechanism is randomized. In this section, we show that the randomness is in fact necessary
for c ≥ 2. To state this impossibility result, we ﬁrst need to introduce a new notion that captures
“non-degenerate” mechanisms, that is, we consider mechanisms that sometimes conﬁrm 2 or more
transactions:

Deﬁnition 6 (2-user-friendly). We call a mechanism is 2-user-friendly if there exists a bid vector
b such that xi(b) = xj(b) = 1 for some i 6= j.

We prove the following impossibility result — throughout this section, we will assume that
γ = 1 (also called weak incentive compatibility), since this makes our impossibility result stronger.
The same impossibility result trivially extends to the case when γ < 1 as well.

Theorem 6.1. Suppose the block size is ﬁnite. Let (x, p, µ) be a deterministic mechanism.
(x, p, µ) is 2-user-friendly, then it cannot achieve weak UIC and 2-weak-SCP at the same time.

If

We stress that the 2-user-friendly restriction is in fact necessary for the above impossibility to
hold. In particular, in Appendix B.1, we give a deterministic mechanism that always conﬁrms only
one transaction, and satisﬁes weak UIC, weak MIC, and c-weak-SCP for any c.
Moreover, in
Appendix B.2, we additionally show that the ﬁnite block size requirement is also necessary for the
above impossibility to hold.

We presented a roadmap of the proof of Theorem 6.1 in Section 2.4. Therefore, we now directly
jump to the detailed proof. To prove Theorem 6.1, we ﬁrst prove that Myerson’s lemma still holds
for any deterministic, weakly UIC mechanism.

Fact 6.2. Myerson’s lemma holds for any deterministic, weakly UIC mechanism.

Proof. Recall that in the deﬁnition of UIC or weak UIC, a user’s strategy space involves not
only bidding untruthfully, but also injecting fake transactions. To prove that Myerson’s lemma

32

holds for weak UIC, we only care about bidding untruthfully, and we do not care about injecting
fake transactions. Henceforth, if a mechanism disincentivizes an individual user from overbidding
or underbidding under the old utility notion, we say that it is user-DSIC (short for dominant-
strategy-incentive-compatible). Similarly, if a mechanism disincentivizes an individual user from
overbidding or underbidding under the new utility notion, we say that it is weakly user-DSIC.
Clearly, UIC implies user-DSIC and weak UIC implies weakly user-DSIC. Since Myerson’s lemma
holds for user-DSIC, it suﬃces to show that any deterministic TFM that is weakly user-DSIC must
be user-DSIC, too.

Suppose for the sake of contradiction that there is a deterministic TFM that is weakly user-
DSIC but not user-DSIC. This means that there is an untruthful bidding strategy that is proﬁtable
under the old utility notion (i.e., 0-strict utility) but not proﬁtable any more under the new utility
In comparison with the old utility, the only diﬀerence in the new
notion (i.e., 1-strict utility).
utility is that “overbidding but unconﬁrmed” is charged an additional cost. Therefore, such an
untruthful bidding strategy as mentioned above must be overbidding but unconﬁrmed. However,
we know that under the old utility notion, such an untruthful bidding strategy results in utility 0
and thus is not proﬁtable. Thus the user does not want to adopt this strategy even under the old
utility. This leads to a contradiction.

Lemma 6.3. Let (x, p, µ) be a deterministic mechanism which is weak UIC and 2-weak-SCP. Let
b = (b1, . . . , bm) be an arbitrary bid vector, where there exists a user i having a conﬁrmed bid, i.e.,
xi(b) = 1. Then, for any bid vector b′ = (b−i, b′

i) such that xi(b′) = 1, the followings holds.

1. Miner’s revenue does not change; that is, µ(b) = µ(b′).

2. For any user j, if xj(b) = 1 and bj > pj(b), it must be xj(b′) = 1 and pj(b) = pj(b′).

Proof. Because xi(b) = xi(b′) = 1, we know that pi(b) = pi(b′) by Myerson’s lemma. Recall that
there is no cost for overbidding as long as the bid is conﬁrmed. Therefore, user i’s utility does not
change no matter it bids bi or b′
i. However, if µ(b) 6= µ(b′), the miner can sign a side contract to ask
user i to bid the price that makes miner’s revenue higher, thus violating 2-weak-SCP. For example,
suppose µ(b) < µ(b′), then, in case the actual bid vector is b (where everyone’s bidding its true
value), the coalition of user i and the miner can gain by having user i bid b′
i instead of its true
value bi. Similarly, if µ(b) > µ(b′), a symmetric argument holds. Thus, it must be µ(b) = µ(b′).
We next prove that xj(b′) = 1 for any user j with xj(b) = 1 and bj > pj(b). For the sake of
reaching a contradiction, suppose that xj(b′) = 0. We now show that the coalition of the miner,
user i, and user j can gain if everyone’s true value is b′. Suppose user i were to bid its true value b′
i,
user j’s utility would be 0 since xj(b′) = 0. Therefore, the coalition is better oﬀ having user i bid
bi instead. In this case, user j’s utility would be bj − pj(b) > 0. Furthermore, as we have shown,
µ(b′) = µ(b), and moreover, by Myerson’s Lemma, user i’s payment and utility do not change as
long as it bids high enough to be conﬁrmed. Thus the coalition gains positively by having user i
bid bi instead of its true value b′

i. This violates 2-weak-SCP.

Finally, we prove that pj(b) = pj(b′) for any user j with xj(b) = 1 and bj > pj(b). Because
we have shown xj(b) = xj(b′) = 1, user j’s utility is vj − pj(b) if user i bids bi, and vj − pj(b′)
if user i bids b′
i. Suppose for the sake of contradiction that pj(b) 6= pj(b′). There are two cases.
First, suppose that pj(b) > pj(b′). Imagine now that everyone’s true value is b′. In this case, the
miner can collude with both user i and user j, and have user i bid bi rather than its true value to
increase the coalition’s joint utility. This violates 2-weak-SCP. Similarly, we can rule out the casw
where pj(b) < pj(b′) due to a symmetric argument.

33

Lemma 6.4. Let (x, p, µ) be a deterministic mechanism that achieves weak UIC and 1-weak-SCP.
Then, for all users i, j, if xi(b) = xj(b) = 1, it must be pi(b) = pj(b). In other words, all conﬁrmed
users must pay the same price.

Proof. Suppose i and j are two conﬁrmed users; that is xi(b) = xj(b) = 1. For the sake of reaching
a contradiction, we assume that pi(b) 6= pj(b). There are two possible cases:

1. At least one user’s bid is higher than its payment; that is, either bi > pi(b) or bj > pj(b) (or

both).

2. Both users pay their bids; that is, bi = pi(b) and bj = pj(b).

j) such that bi > pi(b′) and b′

We start from the ﬁrst case. Without loss of generality, assume bi > pi(b). According to Lemma
6.3, user j can increase its bid without changing user i’s conﬁrmation and payment. Furthermore,
by Myerson’s lemma, user j’s payment should not change. Thus, we have another bid vector
b′ = (b−j, b′
j > pj(b′). Using Lemma 6.3 again, we can increase
user i’s and user j’s bid arbitrarily while remaining their conﬁrmation and payment. Consequently,
we have a bid vector c = (c1, . . . , cm) such that user i and user j have the same bid. Formally,
xi(c) = xj(c) = 1, ci > pi(c) = pi(b), cj > pj(c) = pj(b) and ci = cj. Without loss of generality,
we assume pi(c) > pj(c). Imagine that the real bid vector is c. In this case, miner’s utility is µ(c),
and user i’s utility is ci − pi(c). The miner can sign a contract with user i, and switch user i’s and
user j’s positions in the bid vector. Since users i and j are bidding the same, the miner’s revenue is
unaﬀected if their positions are switched. On the other hand, user i and user j’s payments will be
switched as a result. Thus, user i’s utility has increased to ci − pj(b). This violates 1-weak-SCP.
Next, we analyze the second case. Without loss of generality, we assume bi = pi(b) > bj = pj(b).
By Myerson’s lemma, user j can increase its bid without changing its payment. Thus, user j can
increase its bid to bi, and we have a bid vector b′ = (b−j, bi). By Lemma 6.3, miner’s revenue
should not change, so we have µ(b) = µ(b′). If xi(b′) = 1, it goes back to the ﬁrst case, so we
assume xi(b′) = 0. Now, imagine that the real bid vector is b′. In this case, miner’s utility is
µ(b′) = µ(b), and user i’s utility is zero. However, the miner can sign a contract with user i, and
ask it to bid bj instead. Consequently, the miner prepares a bid vector b, where bj comes from user
i. In this case, miner’s utility is still µ(b′) = µ(b), while user i’s utility becomes bi − pj(b) > 0.
This violates 1-weak-SCP.

Lemma 6.5. Let (x, p, µ) be a deterministic mechanism that achieves weak UIC and 2-weak-SCP.
Then, for all users i, j, if xi(b) = 1 and xj(b) = 0, it must be bi ≥ bj. In other words, the conﬁrmed
bids must be the highest k bids for some k ∈ N where k may be a function of the bid vector.

Proof. For the sake of reaching a contradiction, suppose that there exist two users i, j such that
xi(b) = 1 and xj(b) = 0, while bi < bj. By Myerson’s lemma, user i can increase its bid to bj
without changing its conﬁrmation and payment. Thus, we have a bid vector b′ = (b−i, bi = bj) such
that xi(b′) = 1 and pi(b′) = pi(b). There are two possible cases: either xj(b′) = 1 or xj(b′) = 0.
First, we assume xj(b′) = 1. Imagine the real bid vector is b which also represents everyone’s
true value. In this case, miner’s utility is µ(b), user i’s utility is bi−pi(b), and user j’s utility is zero.
However, the miner can sign a contract with user i and user j, and ask user i to bid bj instead.
By Lemma 6.4, we have pi(b′) = pj(b′). Because pi(b′) = pi(b) and pi(b) ≤ bi < bj, we have
pj(b′) < bj. Besides, by Lemma 6.3, µ(b) = µ(b′). Therefore, after signing the contract, miner’s
utility is still µ(b), user i’s utility is still bi − pi(b), while user j’s utility becomes bj − pj(b′) > 0.
This violates 2-weak-SCP.

34

Next, we assume xj(b′) = 0. Imagine the real bid vector is b′ which also represents everyone’s
true value. Recall that in b′, user i and user j are bidding the same; however, user i is conﬁrmed
but user j is not. Furthermore, user i is bidding strictly higher than its payment as we have shown
above. The coalition of the miner and user j can strictly beneﬁt, if the miner switched user i and
user j’s positions in the bid vector; since this does not aﬀect the miner’s utility, but user j’s utility
now becomes positive. This violates 1-weak-SCP.

Notation for the universal payment. According to Lemma 6.4, all conﬁrmed users must pay
the same price. Thus, we may simplify the notation, and deﬁne p(b) to be the universal payment
price for all conﬁrmed users under the bid vector b. If no one is conﬁrmed under b, then we deﬁne
p(b) = 0.

Lemma 6.6. Let (x, p, µ) be a deterministic mechanism that achieves weak UIC and 2-weak-SCP.
Let b be a bid vector such that at least one user is conﬁrmed. Then, for any unconﬁrmed user i, it
must be bi ≤ p(b).

Proof. For the sake of reaching a contradiction, suppose there exists an unconﬁrmed user i such
that bi − p(b) = ∆ for some ∆ > 0. Let j be a conﬁrmed user in b. By Lemma 6.5, we know that
bj ≥ bi. Now, consider another bid vector b′ = (b−j, p(b) + ∆/2). By Myerson’s Lemma, user j
is still conﬁrmed and is still paying p(b). However, notice that user j’s new bid p(b) + ∆/2 < bi.
By Lemma 6.5, user i must be conﬁrmed too under the bid vector b′, and by Lemma 6.4, it would
be paying the same as user j, which is p(b). Now, imagine that everyone’s true value is the vector
b. If everyone bids honestly, the miner’s utility is µ(b), user j’s utility is bj − p(b), and user i’s
utility is zero. If the miner colludes with users i, j, the coalition can beneﬁt by having user j bid
p(b) + ∆/2 instead. In this case, miner’s utility is still µ(b) due to Lemma 6.3, user j’s utility is
still bj − p(b), while user i’s utility increases to ∆/2. This violates 2-weak-SCP.

Lemma 6.7. Let (x, p, µ) be a deterministic, weak UIC, and 1-weak-SCP mechanism. Then, for
any bid vector b, any user k, and any 0 < ∆ ≤ bk, it must be that µ(b)−∆ ≤ µ(b−k, bk −∆) ≤ µ(b).

Proof. We ﬁrst prove the direction µ(b−k, bk − ∆) ≤ µ(b). We want to show that if the users’ true
value is b, but now user k bids bk − ∆ instead of its true value bk, then the miner revenue should
not increase. There are two cases.

• First, if user k is unconﬁrmed under b or conﬁrmed but paying its full bid bk, then its utility
is 0 under b. In this case, obviously decreasing user k’s bid should not make the miner beneﬁt;
since otherwise the coalition of user k and the miner can beneﬁt by having user k bid bk − ∆
instead, thus violating 1-weak-SCP.

• Second, suppose that user k is initially conﬁrmed under b and moreover, bk > p(b). We can ﬁrst
decrease user k’s bid to exactly max(bk − ∆, p(b)), and let b′ := (b−k, max(bk − ∆, p(b))) be the
resulting new bid vector. Due to Myerson’s Lemma, Lemma 6.3, and Lemma 6.4, xk(b′) = 1,
µ(b′) = µ(b), and p(b′) = p(b). Then, we can decrease user k’s bid from max(bk − ∆, p(b)) to
bk − ∆, and due to the same argument as the ﬁrst case, the miner’s revenue should not increase.

We next prove the other direction, that is, µ(b) − ∆ ≤ µ(b−k, bk − ∆). If no one is conﬁrmed
under b, the statement trivially holds. Henceforth, we assume that at least one user is conﬁrmed
under b. Again, there are two cases.

35

• First, suppose that user k is not conﬁrmed under b or conﬁrmed but paying its full bid bk. Due
to Lemma 6.6, we know that bk ≤ p(b). By Myerson’s Lemma, user k should be unconﬁrmed
or conﬁrmed but paying full bid under b′ := (b−k, bk − ∆). Now, suppose everyone’s true value
is actually b′, notice that user k’s utility is 0. We argue that if user k bids bk instead of its
true value bk − ∆, it should not make the miner revenue increase by more than ∆. If so, the
coalition of user k and the miner can strictly beneﬁt by having user k bid bk instead of its true
value bk − ∆, since the cost of such overbidding is at most ∆ under the new utility notion. This
violates 1-weak-SCP.

• Second, suppose that user k is conﬁrmed under b and moreover bk > p(b). In this case, due
to Myerson’s Lemma, Lemma 6.3, and Lemma 6.4, the miner’s revenue should not be aﬀected
when we reduce user k’s bid to max(p(b), bk − ∆). We now further decrease user k’s bid from
max(p(b), bk − ∆) to bk − ∆ — due to the same analysis as the ﬁrst case, the miner’s revenue
should not increase by more than ∆ in this process.

Lemma 6.8. Let (x, p, µ) be a deterministic mechanism which is weak UIC and 2-weak-SCP. Let
b = (b1, . . . , bm) be an arbitrary bid vector. Suppose that there exist three diﬀerent users i, j, k such
that xi(b−k, 0) = xj(b−k, 0) = 1, and moreover, bi − p(b−k, 0) > bk and bj − p(b−k, 0) > bk. Then,
it must be that xi(b) = xj(b) = 1 and p(b) ≤ p(b−k, 0) + bk/2.

Proof. We ﬁrst prove that xi(b) = xj(b) = 1. Suppose not, without loss of generality, let us
suppose xi(b) = 0 since the case xj(b) = 0 has a symmetric proof. Imagine that the real bid vector
is b which also represents everyone’s true value. Suppose the miner and user i form a coalition, and
they replace user k’s bid with an injected 0-bid. Due to Lemma 6.7, the miner’s utility decreases by
at most bk as a result. However, user i now becomes conﬁrmed and its utility is bi − p(b−k, 0) > bk.
Therefore, the coalition strictly gains which violates 1-weak-SCP.

We next prove that p(b) ≤ p(b−k, 0) + bk/2. For the sake of reaching a contradiction, suppose
p(b) > p(b′) + bi/2. Imagine the real bid vector is b which is also everyone’s true value. In this
case, miner’s utility is µ(b), user i’s utility is bi − p(b), and user j’s utility is bj − p(b). However,
the miner can collude with user i and user j, and miner replaces bk with an injected 0. Notice
that injecting a 0-bid costs nothing. In this case, miner’s utility becomes µ(b′) ≥ µ(b) − bk, where
the inequality follows from Lemma 6.7. On the other hand, user i’s utility becomes bi − p(b′),
and user j’s utility becomes bj − p(b′). Because p(b) > p(b′) + bk/2, user i’s and user j’s utilities
each increases more than bk/2. Consequently, the coalition’s joint utility increases, which violates
2-weak-SCP.

Lemma 6.9. Let (x, p, µ) be a deterministic mechanism which is weak UIC and 1-weak-SCP. Let
b = (b1, . . . , bm) be an arbitrary bid vector. Let i and k be two diﬀerent users, and suppose that
xi(b) = 1 and bi − p(b) > bk. Then, xi(b−k, 0) = 1 and p(b−k, 0) ≤ p(b) + bk.

Proof. For the sake of contradiction, suppose either xi(b−k, 0) = 0 or p(b−k, 0) > p(b)+bk. Imagine
that the real bid vector is b′ := (b−k, 0), which also represents everyone’s true value. Now, the
miner replaces user k’s 0-bid in b′ with an injected bid bk. Injecting this bid costs at most bk. Due
to Lemma 6.7, the miner’s utility cannot decrease, i.e., µ(b) ≥ µ(b′). However, consider user i’s
utility. If xi(b′) = 0 but xi(b) = 1, user i’s utility has increased from 0 to bi − p(b) > bk. Else, if
xi(b′) = xi(b) = 1, but p(b′) > p(b) + bk, then user i’s utility increases by strictly more than bk
too. In either case, the coalition of the miner and user i can strictly increase their joint utility by
replacing user k’s bid with the injected bk bid, which violates 1-weak-SCP.

36

Lemma 6.10. Let (x, p, µ) be a deterministic mechanism which is 2-user-friendly, weak-UIC and
2-weak-SCP. Then, there exists a bid vector b = (b1, . . . , bm) where two diﬀerent users i, j are
conﬁrmed, and moreover, bi > pi(b) and bj > pj(b).

Proof. Since (x, p, µ) is 2-user-friendly, there exists a bid vector b such that at least two users’ bids
are conﬁrmed. There are three possible cases:

1. There are two users i, j such that bi > pi(b) and bj > pj(b).

2. Only a single conﬁrmed user bids strictly above its payment. Without loss of generality,
we may assume user j is conﬁrmed and bj > pj(b); however, for any conﬁrmed user i 6= j,
bi = pi(b), and there exists at least one such i.

3. For any conﬁrmed bid bi, it holds that bi = pi(b).

The ﬁrst case is exactly what we want. For the second case, we can raise i’s bid by an arbitrary
amount ∆ > 0, and the new bid vector is (b−i, bi + ∆). By Myerson’s Lemma, i should still be
conﬁrmed and paying the same price. Due to Lemma 6.3, j should still be conﬁrmed and paying
the same price, too. Therefore, the bid vector (b−i, bi + ∆) satisﬁes the claim we want to prove.
Moreover, due to Lemma 6.3, it must be µ(b) = µ(b−i, bi + ∆).7

We now focus on the third case which is the trickiest. Due to Lemma 6.4, it must be that
everyone conﬁrmed has the same bid, and thus bi = bj. Fix an arbitrary ∆ > 0. Consider
the bid vector b∗ which is the same as b except that user i and user j’s bids are replaced with
bi + ∆. We claim that the bid vector b∗ satisﬁes the claim we want to prove.
In other words,
xi(b∗) = xj(b∗) = 1 and bi + ∆ > p(b∗). Suppose this is not the case. There are three cases:

1. both i and j are not conﬁrmed under b∗;
2. exactly one of them is not conﬁrmed under b∗ — without loss of generality, we may assume that
j is not conﬁrmed under b∗. In this case, by Lemma 6.6, it must be that pi(b∗) = bi + ∆;

3. both i and j are conﬁrmed under b∗ but bi + ∆ = p(b∗).

In all of these cases, user i and j both have utility 0 if the true values are b∗.

Let b′

:= (b−i, bi + ∆).

By Lemma 6.7, µ(b∗) ≥ µ(b′) ≥ µ(b∗) − ∆. By Lemma 6.3,
µ(b′) = µ(b). Thus, µ(b∗) ≥ µ(b) ≥ µ(b∗) − ∆.8 Now, suppose the true values are b∗. The
miner can collude with users i and j, and have them bid bi = bj instead. Both users i and j
are paying bi in this case. Therefore, each of them has utilty ∆ now. On the other hand, the
miner’s utility decreases by at most ∆, and therefore the coalition’s utility increases. This violates
2-weak-SCP.

Proof of Theorem 6.1. By Lemmas 6.4 and 6.10, there exists a bid vector b = (b1, . . . , bm)
such that x1(b) = x2(b) = 1, b1 > p(b) and b2 > p(b) — we can always relabel the bids to make
any two conﬁrmed users with positive utility labeled as users 1 and 2.

Let B denote the block size, and we deﬁne Γ = 2B+8 · |b|1 · max(m, B + 1) to be a suﬃciently
large number. Now, we consider a bid vector c = (c1, c2, . . . , cm), where c1 = c2 = Γ and ci = 0 for
all i ≥ 3. We are going to show that x1(c) = x2(c) = 1. By the Myerson’s Lemma and Lemma 6.3,
from b, we can increase b1 without changing the conﬁrmation and the payment of b1 and b2, so
x1(Γ, b2, . . . , bm) = 1 and x2(Γ, b2, . . . , bm) = 1. Similarly, we can then increase b2 and we obtain

7µ(b) = µ(b−i, bi + ∆) is not important for this proof, while this fact will be useful in the proof of Lemma B.5.
8µ(b∗) ≥ µ(b) is not important for this proof, while this fact will be useful in the proof of Lemma B.5.

37

x1(Γ, Γ, b3, . . . , bm) = 1, x2(Γ, Γ, b3, . . . , bm) = 1 and p(Γ, Γ, b3, . . . , bm) = p(b). Next, we reduce
all remaining bids to zero one by one. Repeatedly applying Lemma 6.9 and observing that Γ is
m
suﬃciently large, we have that x1(c) = x2(c) = 1, and the payment increases by
i=3 bi at most,
so p(c) ≤ p(b) +

m
i=3 bi < |b|1.

P

Without loss of generality, we may henceforth assume that m > B. If not, that is, if m < B,
we can always add 0 bids one by one until there are at least B + 1 bids — we claim that this
does not change the miner’s utility nor user 1 or 2’s conﬁrmation status and payment. To see this,
notice that adding or removing a 0-bid is free of charge for the miner or a miner-user coalition.
Therefore, adding or removing a 0-bid should not change the joint utility of the miner and user
1 by 1-weak-SCP. This implies that user 2’s conﬁrmation status and payment should not change,
since otherwise, user 2’s utility would change, and thus the joint utility of the miner and users 1
and 2 would change. This means that the coalition of the miner and users 1 and 2 can cheat by
adding or removing a 0-bid to increase their joint utility, thus violating 2-weak-SCP. By a symmetric
argument, user 1’s conﬁrmation status or payment should not change either. Now, since the joint
utility of the miner and user 1 should not change due to adding or removing a 0-bid, the miner’s
utility should be unaﬀected too.

P

Now, we consider another bid vector d = (d1, d2, . . . , dm), where di = Γ for all i ∈ [B + 1] and
di = 0 for i > B + 1. We are going to show that xi(d) = 1 for all i ∈ [B + 1] — note that this is
suﬃcient for reaching a contradiction since the block size is only B. To see this, we start from c,
and increase the bids of each user j ∈ {3, . . . , m} one by one. Intuitively, Lemma 6.8 guarantees
that if the payment grows at all during the process, it must grow slower than the increase in a
user’s bid, so at some point, user j’s bid will catch up with the payment, as long as there is still a
large enough gap left between Γ and the payment. Formally, since Γ − p(c) > 2|b|1, by Lemma 6.8,
it must be that p(Γ, Γ, 2|b|1, 0, . . . , 0) ≤ p(c) + |b|1 < 2|b|1, and x3(Γ, Γ, 2|b|1, 0, . . . , 0) = 1.
We now further increase user 3’s bid to Γ, and by Lemma 6.3, users 1 to 3 remain conﬁrmed
and p(Γ, Γ, Γ, 0, . . . , 0) < 2|b|1. By the same reasoning, since Γ − p(Γ, Γ, Γ, 0, . . . , 0) > 4|b|1,
by Lemma 6.8, it must be that p(Γ, Γ, Γ, 4|b|1, . . . , 0) ≤ p(Γ, Γ, Γ, 0, . . . , 0) + 2|b|1 < 4|b|1, and
x4(Γ, Γ, Γ, 4|b|1, 0, . . . , 0) = 1. Therefore, p(Γ, Γ, Γ, Γ, 0, . . . , 0) < 4|b|1. We can now repeat this
process and raise the bid of each user i ∈ [B + 1] to Γ. It is not hard to check that our choice of Γ
is suﬃciently large for the reasoning to go through in all steps.

7 Necessity for Blocks to Contain Unconﬁrmed Transactions

Observe that in our buring second-price auction, not all transactions in the block are conﬁrmed. In
particular, only the top k have a chance of being conﬁrmed, and remaining B − k included bids are
not conﬁrmed. Instead, they serve the role of setting the price, i.e., they are used by the blockchain
to compute the payment for each conﬁrmed bid and the miner revenue.
In the cryptocurrency
community, there is an ongoing debate whether including unconﬁrmed transactions in a block is a
good idea. The argument against this approach is that “real estate” on the blockchain is a scarce
resource, so we ideally do not want to waste space including unconﬁrmed transactions in the block.
We argue that having unconﬁrmed transactions in the block indeed can lead to more versatile
mechanisms. To show this, we argue that if “included” must be equal to “conﬁrmed”, then, even
weakly incentive mechanisms are not possible. More speciﬁcally, we prove the following corollary:

Corollary 7.1 (Impossibility for “included = conﬁrmed”). Assume that all transactions included in
the block must be conﬁrmed. Then, no (possibly randomized) TFM (x, p, µ) with non-trivial miner
revenue can satisfy weak UIC, weak MIC, and 1-weak-SCP at the same time — this impossibility
holds no matter whether the block size is ﬁnite or inﬁnite.

38

Moreover, if the block size is ﬁnite, then the only (possibly randomized) TFM that achieves weak
UIC, weak MIC, and 1-weak-SCP is the trivial mechanism that always conﬁrms nothing and pays
the miner nothing.

Myerson’s lemma still holds. To prove this corollary, an important stepping stone is to prove
that Myerson’s lemma still holds for any weak UIC, weak MIC, and 1-weak-SCP (randomized)
mechanism where “included = conﬁrmed”. It turns out that this is somewhat non-trivial to prove.
Recall that in a randomized mechanism, the random coins come from two sources: 1) the miner
can ﬂip random coins to decide which transactions to include in the block; 2) once the inclusion
choices are made, the blockchain ﬂips random coins to determine which of the included transactions
are conﬁrmed, how much each conﬁrmed transaction pays, and how much the miner gets. In other
words, the randomness in the inclusion rule is chosen by the miner, whereas the randomness in the
conﬁrmation, payment, and miner-revenue rules are chosen by the blockchain. A strategic miner
may choose its random coins arbitrarily and not uniformly at random, to increase its expected gain.
On the other hand, we assume that the blockchain’s randomness is trusted. In other words, we
assume that the blockchain can toss fresh random coins that are revealed after the miner commits
to its inclusion decision — this makes our impossibility result stronger, since if the blockchain’s
randomness is revealed to the miner earlier, it makes mechanism design even harder.

Terminology and notation. Fix an arbitrary bid vector b = (b1, . . . , bm). Let S ⊆ {b1, . . . , bm}
denote a subset of these bids to include in the block. We often call S an inclusion outcome. Note
that if “included = conﬁrmed”, the miner is essentially choosing which transactions are conﬁrmed
directly, too. Whenever the miner picks an inclusion outcome S ⊆ {b1, . . . , bm}, it can calculate its
expected utility denoted E(µ|S) where the expectation is taken over the choice of the blockchain’s
random coins. We use the notation E(µ) to denote the miner’s expected utility under b, had it
executed the TFM honestly.

Fix an arbitrary bid vector b = (b1, . . . , bm). We say that an inclusion outcome S ⊆ {b1, . . . , bm}
is possible (w.r.t. b), if it is encountered with non-zero probability in an honest execution of the
TFM over b.

Lemma 7.2. Suppose that a randomized TFM satisﬁes weak MIC, and moreover, any transaction
included in the blockchain must be conﬁrmed. Fix an arbitrary bid vector b = (b1, . . . , bm). For any
possible inclusion outcome S ⊆ {b1, . . . , bm} it must be that E(µ|S) = E(µ).

As a direct corollary, for any possible inclusion outcomes S, S′ ⊆ {b1, . . . , bm} it must be that

E(µ|S) = E(µ|S′).

Proof. Suppose that there is a possible inclusion outcome S where E(µ|S) 6= E(µ). It must be that
there is a possible inclusion outcome S∗ where E(µ|S∗) > E(µ). In this case, instead of choosing
the miner coins at random as prescribed by the mechanism, it strictly beneﬁts the miner to choose
the speciﬁc inclusion outcome S∗. This violates weak MIC.

Lemma 7.3. Suppose that a randomized TFM satisﬁes weak MIC and 1-weak-SCP, and moreover,
any transaction included in the blockchain must be conﬁrmed. Suppose that under some bid vector
b = (b1, . . . , bm), there is at least one possible inclusion outcome that includes bi, and at least one
possible inclusion outcome that does not include bi. Then, consider any possible inclusion outcome
S that includes bi, it must be that conditioned on S, user i pays its full bid bi with probability 1.

Proof. Suppose that the claim does not hold, i.e., there is a possible inclusion outcome that includes
bi, but user i pays pi < bi; and moreover, there is at least one possible inclusion outcome that does

39

not include bi. Let S∗ be a possible inclusion outcome that includes bi that minimizes the payment
of user i. In this case, the miner can form a coalition with user i, and the miner can choose the
inclusion outcome S∗ with probability 1. Due to weak MIC and Lemma 7.2, the miner’s utility is
still E(µ) when it adopts this strategy, i.e., the same as playing honestly. However, user i’s utility
is positive and is maximized under S∗. Furthermore, since there is at least one possible inclusion
outcome that does not include bi where user i’s utility is 0, it must be that user i’s expected utility is
strictly greater under this strategy than playing honestly. Therefore, the coalition strictly beneﬁts
under this strategy, which violates 1-weak-SCP.

Lemma 7.4. Suppose that a randomized TFM satisﬁes weak UIC, weak MIC, and 1-weak-SCP, and
moreover, any included transaction must be conﬁrmed. Then, the TFM must satisfy the constraints
imposed by the Myerson’s Lemma.

Proof. Recall that a mechanism disincentivizes an individual user from overbidding or underbidding
under the old utility notion, we say that it is user-DSIC (short for dominant- strategy-incentive-
compatible). Similarly, if a mechanism disincentivizes an individual user from overbidding or un-
derbidding under the new utility notion, we say that it is weakly user-DSIC. Clearly, UIC implies
user-DSIC and weak UIC implies weakly user-DSIC, since in our deﬁnitions of (weak) UIC, the
user can misbehave in more ways besides over- or under-bidding. Since Myerson’s lemma holds
for user-DSIC, it suﬃces to show that any (randomized) TFM where “included = conﬁrmed” and
satisfying weak user-DSIC, weak MIC, and 1-weak-SCP must also satisfy user-DSIC.

Suppose that this is not true, i.e., there is some TFM where “included = conﬁrmed” and
satisfying weak user-DSIC, weak MIC, and 1-weak-SCP, however, the TFM does not satisfy user-
DSIC. Notice that if a user underbids, its utility is the same under the old and new utility notions.
Therefore, there must exist a bid vector b = (b1, . . . , bm) some user j ∈ [m], and a bid b′
j > bj,
such that the user j is incentivized to overbid under the old utility notion, but not incentivized
to overbid under the new utility notion. There are the following cases, and we rule each one out,
which allows us to reach a contradiction. Below we use the terms “included” and “conﬁrmed”
interchangeably, and we deﬁne b′ := (b−j, b′

j).

• Case 1: user j is conﬁrmed with probability 1 under b′. In this case, user j’s utility is the same
under the old and new utility deﬁnitions, and therefore, it is not possible that user j wants to
deviate under the old utility but does not want to under the new utility notion.

• Case 2: user j is unconﬁrmed with probability 1 under b′. In this case, under the old utility,
j. Therefore, user j does not want to deviate under the

user j’s utility is 0 even when it bids b′
old utility notion which contradicts our assumption.

• Case 3: user j sometimes conﬁrmed and sometimes unconﬁrmed under b′. Since the TFM is
weak MIC and 1-weak-SCP, and satisﬁes “included = conﬁrmed”, by Lemma 7.3, whenever the
user j is conﬁrmed, it must pay its full bid. Therefore, under the old utility notion, if user j
bids b′
j instead, its utility is always 0. This means that the user does not want to deviate under
the old utility notion, which contradicts our assumption.

Proof of Corollary 7.1. We now continue with the proof of Corollary 7.1. The proof of
Lemma 4.8 also makes use of the strategic deviation where a user colluding with the miner overbids
relative to its true value. Speciﬁcally, the proof of Lemma 4.8 relies on the fact that such overbid-
ding comes for free if the oﬀending transaction is not conﬁrmed. In general, this is not true under

40

the new utility function associated with weak incentive compatibility. However, we now argue that
if “included” must be equal to “conﬁrmed”, then, the eﬀect of this deviation (where the overbid
transaction is not conﬁrmed) can alternatively be realized in a way that is free of charge.

More concretely, instead of having the colluding user actually carry out the overbidding, we
instead exploit the miner’s ability to include an arbitrary subset of the mempool in the block. Let
b be the current mempool, which includes the colluding user’s bid b. If in the proof of Lemma 4.8,
the miner wants the user to overbid b′ > b instead, it can simply pretend that the colluding user’s
bid is b′. In other words, the miner can simulate running the mechanism on b\{b} ∪ {b′}. As a
result, the transaction b′ would not be conﬁrmed, and thus b′ would not be included in the block,
either. Therefore, the fact that the colluding user has not authorized/signed the transaction b′ does
not matter in carrying out this deviation9.

It is easy to see that as long as Myerson’s Lemma holds and any overbid transaction that is
not conﬁrmed in the present block comes for free, Lemma 4.8 still holds. Therefore, we conclude
that Lemma 4.8 still holds even under weak UIC and 1-weak-SCP, if we insist that “included” be
equal to “conﬁrmed”. Now, as long as Lemma 4.8 and Myerson’s Lemma still hold, the proof of
Theorem 4.7 follows in the same way as before, and so does the proof of Corollary 4.9.

If we restrict ourselves to deterministic mechanisms, we can actually prove a counterpart of
Corollary 7.1 without having to even rely on weak MIC. This is formally stated in the following
corollary:

Corollary 7.5. Assume that all transactions included in the block must be conﬁrmed. Then, no
deterministic TFM (x, p, µ) with non-trivial miner revenue can satisfy weak UIC and 1-weak-SCP
at the same time — this impossibility holds no matter whether the block size is ﬁnite or inﬁnite.
Moreover, if the block size is ﬁnite, then the only deterministic TFM that achieves weak UIC and
1-weak-SCP is the trivial mechanism that always conﬁrms nothing and pays the miner nothing.

Proof. Almost the same as the proof of Corollary 7.1, except that now, since the TFM is promised
to be deterministic, we can use Fact 6.2 instead of Lemma 7.4 to establish the fact that Myerson’s
lemma still holds.

8 Conclusion and Open Questions

Mechanism design in decentralized settings (e.g., cryptocurrencies) departs signiﬁcantly from the
classical literature in terms of modeling and assumptions, and thus is relatively little understood.
For example, our work shows that even how to formally deﬁne incentive compatibility is subtle
and requires careful thought. Our work helps to unravel the mathematical structures of incentive
compatible TFMs, and we hope that our deﬁnitional contributions can serve as a basis for future
work in this space. Part of our contribution is also to expose the general lack of understanding in
this fascinating area of mechanism design. The following are some open questions we expose:

• Are there other reasonable relaxations in the modeling and in incentive compatible notions that

allow us to circumvent the impossibility results we showed?

• Can we formally model the TFM as a repeated game and reason about potential strategic
behavior over a longer time scale? Although our approach which adopts the γ parameter captures
potential costs in the future, right now we still model the auction as one-shot.

9In other words, b′

exists only in the simulation in the miner’s head, but is not released to the public network.

41

• Can cryptography help in the design of transaction fee mechanisms? For example, the elegant
work of Ferreira and Weinberg [FW20] showed that using cryptographic commitments can help
overcome some of the lower bound results shown by Akbarpour and Li [AL20]. Whether we can
apply such techniques to TFMs is an interesting future direction.

• So far, we assume that the block reward (besides the transaction fees) paid to the miner is a
constant as in today’s major blockchains. Since the constant block reward does not aﬀect our
game theoretic analysis, we do not capture it in our model. It is interesting to explore what the
mathematical implications are when the block reward need not be a constant. For example, this
may mean that the miner revenue could even exceed the total user payment.

• Our burning second price mechanism demonstrates a tradeoﬀ between resilience and eﬃciency of
the mechanism which is inevitable as shown by our impossibility result. However, we currently do
know know whether the burning second price mechanism achieves optimal eﬃciency (in terms
of the utilization of on-chain space and money burnt) for every choice of γ. This is another
exciting direction for future work.

Acknowledgments

We gratefully acknowledge helpful technical discussions with Kai-Min Chung during an early phase
of the project. We also thank T-H. Hubert Chan for insightful technical discussions.

References

[AL20]

[BCD+]

Mohammad Akbarpour and Shengwu Li. Credible auctions: A trilemma. Econometrica,
Econometric Society, 2020.

Vitalik Buterin, Eric Conner, Rick Dudley, Matthew Slipper, and Ian Norden.
Ethereum improvement proposal 1559: Fee market change for eth 1.0 chain.
https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1559.md.

[BEOS19] Soumya Basu, David A. Easley, Maureen O’Hara, and Emin G¨un Sirer. Towards a
functional fee market for cryptocurrencies. CoRR, abs/1901.06830, 2019.

[BSKN21] Adithya Bhat, Nibesh Shrestha, Aniket Kate, and Kartik Nayak. Randpiper -
reconﬁguration-friendly random beacons with quadratic communication. In ACM CCS,
2021.

[CKS00] Christian Cachin, Klaus Kursawe, and Victor Shoup. Random oracles in constantino-
ple: Practical asynchronous byzantine agreement using cryptography. In in Proc. 19th
PODC, pages 123–132, 2000.

[CM12]

Jing Chen and Silvio Micali. Collusive dominant-strategy truthfulness. J. Econ. Theory,
147(3):1300–1312, 2012.

[DKIR21] Sourav Das, Vinith Krishnan, Irene Miriam Isaac, and Ling Ren. Spurt: Scalable
distributed randomness beacon with transparent setup. Cryptology ePrint Archive,
Report 2021/100, 2021. https://ia.cr/2021/100.

[DM17]

Alan Deckelbaum and Silvio Micali. Collusion, eﬃciency, and dominant strategies.
Games Econ. Behav., 103:83–93, 2017.

42

[EW09]

Joseph Engelberg and Jared Williams. ebay’s proxy bidding: A license to shill. Journal
of Economic Behavior and Organization, 72:509–526, 10 2009.

[FMPS21] Matheus V. X. Ferreira, Daniel J. Moroz, David C. Parkes, and Mitchell Stern. Dy-
namic posted-price mechanisms for the blockchain transaction-fee market. CoRR,
abs/2103.14144, 2021.

[FW20] Matheus V. X. Ferreira and S. Matthew Weinberg. Credible, truthful, and two-round
(optimal) auctions via cryptographic commitments. In Proceedings of the 21st ACM
Conference on Economics and Computation (EC), page 683–712, 2020.

[GH05]

Andrew V. Goldberg and Jason D. Hartline. Collusion-resistant mechanisms for single-
parameter agents. In SODA 2005, pages 620–629, 2005.

[GHK+06] Andrew V. Goldberg, Jason D. Hartline, Anna R. Karlin, Michael E. Saks, and Andrew

Wright. Competitive auctions. Games Econ. Behav., 2006.

[GL79]

Jerry Green and Jean-Jacques Laﬀont. On coalition incentive compatibility. The Review
of Economic Studies, 46(2):243–254, 04 1979.

[GMR90] Daniel A. Graham, Robert C. Marshall, and Jean-Francois Richard. Phantom bidding

against heterogeneous bidders. Economics Letters, 32(1):13–17, 1990.

[Har]

[HR08]

Jason
http://users.eecs.northwestern.edu/~hartline/omd.pdf.

Hartline.

Lectures

optimal

on

mechanism

design.

Jason D. Hartline and Tim Roughgarden. Optimal mechansim design and money burn-
ing. In STOC, 2008.

[kCK09] Yeon koo Che and Jinwoo Kim. Optimal collusion-proof auctions. Journal of Economic

Theory, pages 565–603, 2009.

[LSZ19]

[MM12]

Ron Lavi, Or Sattath, and Aviv Zohar. Redesigning bitcoin’s fee market. In The World
Wide Web Conference, WWW 2019, pages 2950–2956, 2019.

Robert C. Marshall and Leslie M. Marx. The Economics of Collusion: Cartels and
Bidding Rings. The MIT Press, 2012.

[Mye81]

Roger B. Myerson. Optimal auction design. Math. Oper. Res., 6(1):58–73, February
1981.

[NB15]

Alexey Nikitkov and Darlene Bay. Shill bidding: Empirical evidence of its eﬀective-
ness and likelihood of detection in online auction systems.
International Journal of
Accounting Information Systems, 16:42–54, 2015.

[NRTV07] Noam Nisan, Tim Roughgarden, Eva Tardos, and Vijay V. Vazirani. Algorithmic Game

Theory. Cambridge University Press, USA, 2007.

[pri21]

Private communication with Tim Roughgarden and Matt Weinberg, 2021.

[Rou20]

Tim Roughgarden.
Ethereum blockchain:
https://timroughgarden.org/papers/eip1559.pdf, 2020.

Transaction
An economic

analysis

of EIP-1559.

fee mechanism design

for

the
Manuscript,

43

[Rou21]

Tim Roughgarden. Transaction fee mechanism design. In EC, 2021.

[She09]

Sher.

Itai
the
https://ideas.repec.org/p/min/wpaper/2008-4.html, 2009.

Optimal

bidding

shill

in

vcg

mechanism.

[SYM99] Yuko Sakurai, Makoto Yokoo, and Shigeo Matsubara. Limitation of the generalized
vickrey auction in electronic commerce: robustness against false-name bids. AAAI,
1999.

[Vic61] William Vickrey. Counterspeculation, auctions, and competitive sealed tenders. Journal

of ﬁnance, 1961.

[Yao]

Andrew Chi-Chih Yao. An Incentive Analysis of Some Bitcoin Fee Designs (Invited
Talk). In ICALP 2020.

[Yok08] Makoto Yokoo. False-Name-Proof Auction, pages 308–310. Springer US, Boston, MA,

2008.

A Relations Between Incentive Compability Notions

The notions UIC, MIC, and 1-SCP are incomparable as depicted in Figure 2.

UIC

second-price
ﬁrst-price

\

\

s

e

c

o

ﬁ

r

s

t

-

n

p

\

\

d

-

p

r

i

c

e

r

i

c

e

MIC

1st-price-or-free
\
\
posted-price (no burning)

1-SCP

Figure 2: Relationship among incentive compatibility notions. The same chart holds for UIC,
MIC, and 1-SCP under γ-strict-utility for any γ ∈ [0, 1].

We explain Figure 2 in more detail below:

• UIC 6⇒ MIC, UIC 6⇒ 1-SCP: the second-price auction satisﬁes UIC, but does not satisfy MIC or
1-SCP. This was pointed out in several earlier works [BEOS19,Rou20,Rou21]. Recall that in the
second-price auction, the highest B bids are included in the block, the top B − 1 are conﬁrmed
and they pay the B-th price, where B is the block size. The miner gets all payment.

• MIC 6⇒ UIC, 1-SCP 6⇒ UIC: the ﬁrst-price auction satisﬁes MIC and c-SCP for any c ≥ 1, but
is not UIC. This was also pointed out in earlier works [BEOS19, Rou20, Rou21]. Recall that in
the ﬁrst-price auction, the top B bids are included and conﬁrmed, they each pay their bid, and
the miner gets all payment.

44

• MIC 6⇒ 1-SCP: the posted-price auction satisﬁes MIC but not 1-SCP. Recall that in the posted-
price auction, there is a ﬁxed reserve price r. Everyone bidding at least r is included and
conﬁrmed and pays exactly r. The miner gets all payment. It is easy to check that the mechanism
is indeed MIC. However, it is not 1-SCP, since if a user’s true value is 0 < r′ < r, the miner can
collude with the user, have the user bid r instead, and the joint utility of the coalition strictly
increases.

• 1-SCP 6⇒ MIC: this is the most subtle to see. We construct the following “ﬁrst-price-or-free”
mechanism which is c-SCP for any c ≥ 1, but not MIC. The mechanism is not MIC since if there
is only one bid, it makes sense for the miner to inject a fake bid to increase its utility. We show
that the mechanism satisﬁes c-SCP for any c ≥ 1 below.

First-price-or-free mechanism

• Choose all bids in the current bid vector to include in the block. Let b = (b1, . . . , bm) be

the included bids of the block, where b1 ≥ · · · ≥ bm.

• Only the highest bid (b1) is conﬁrmed. Every other bid is unconﬁrmed.
• If there is only one bid in the block (m = 1), the only conﬁrmed user pays nothing. Other-

wise, if m ≥ 2, the only conﬁrmed user pays b1.

• The miner gets all the payment.

Theorem A.1. The ﬁrst-price-or-free mechanism is c-SCP for all c ≥ 1.

Proof. Suppose there is only one user with true value v∗. The miner and that user is the only
possible coalition. If they play honestly, that user’s bid is the only bid in the block, so it must be
conﬁrmed. Thus, in the honest case, the joint utility is v∗. If the coalition now deviates, then the
conﬁrmed bid is either a fake bid or the colluding user’s bid. In either case, the coalition’s utility
cannot exceed v∗.

Suppose the number of users is m ≥ 2. There are two cases. First, suppose the highest bid
b1 does not belong to the coalition if all colluding users are bidding truthfully. In this case, the
coalition’s utility is b1 when it behaves honestly, and b1 ≥ v∗ where v∗ denotes the highest true
value of any colluding user. Second, the highest bid b1 belongs to the coalition if colluding users
are bidding truthfully. In this case, the coalition’s utility is b1 = v∗ if it behaves honestly. In either
case, we show that if the coalition deviates, it cannot gain. Suppose b′
1 is the new highest bid after
deviating. If b′
1 belongs to the coalition, then the miner revenue oﬀsets the coalition’s payment,
and thus the coalition’s utility cannot exceed the highest true value of any colluding user. If b′
1
does not belong to the coalition, it must be that b′

1 ≤ b1, and the coalition’s utility is b′

1 ≤ b1.

Relationship for incentive compatibility notions under γ-strict-utility. Note that in Fig-
ure 2, for each arrow X 6⇒ Y shown by some example mechanism, it is easy to check that the same
mechanism also shows that X 6⇒ weak Y . Thus, Figure 2 in fact also holds for UIC, MIC, and
1-SCP under γ-strict-utility, for any choice of γ ∈ [0, 1].

B Additional Results for Weak Incentive Compatibility

In this section, we present some additional results that further unfold the mathematical landscape
of weakly incentive compatible mechanisms.

45

B.1 The Solitary Mechanism

Earlier in Section 6, we ruled out the existence of a deterministic, 2-user-friendly mechanism that
satisﬁes weak UIC and 2-weak-SCP simultaneously, assuming ﬁnite block size. In this section, we
show that the 2-user-friendly restriction is necessary for this theorem to hold. In particular, we
describe a mechanism called the solitary mechanism, which always conﬁrms a single transaction,
and satisﬁes weak UIC, weak MIC, and c-weak-SCP for all c ∈ N.

The solitary mechanism

• Choose the highest two bids to include in the block.
• Only the highest bid is conﬁrmed. Other bids are all unconﬁrmed. The highest bid pays

the second highest bid, and the miner is paid the second highest bid.

Theorem B.1 (The solitary mechanism). The solitary mechanism satisﬁes weak UIC, weak MIC,
and c-weak-SCP for all c > 0. The theorem holds no matter the block size is inﬁnite or ﬁnite.

Proof. We prove the three properties one by one.

Weak UIC. A user has two kinds of strategies to deviate from the honest behavior: to bid
strategically or to inject fake transactions. Since the payment is decided by the second highest bid,
injecting fake transactions can only increase the payment, no matter whether the user is bidding
truthfully or not. Moreover, since this is exactly a classical second-price auction, bidding truthfully
is known to be DSIC for an individual user, even under the old utility notion where overbidding is
never penalized. Therefore, bidding untruthfully is not incentive compatible under the new utility
notion as well.

Weak MIC. The miner has two kinds of strategies to deviate from honest behavior: not to
choose the highest two bids and to inject fake bids. Without loss of generality, we assume that
the miner chooses the included bids ﬁrst, and replaces some of them with fake bids then. We will
show that both steps would not increase the miner’s utility.

The miner’s revenue is decided by the second highest bid that is included, so if miner does not
choose the highest two bids to include, its revenue can only decrease or remain the same. Next,
suppose that the miner replaces one or both of the included bids with fake ones.
If after the
replacement, the highest bid is a fake one, then the miner has to pay the fee for the highest bid
which is equal to its revenue. Therefore, the miner’s utility cannot be greater than 0. If after the
replacement, the highest bid is not a fake one but the second highest bid is a fake one, and the
bid amount is b. Then, the miner revenue is b. However, the cost to inject the fake bid b is also b.
Thus, the miner does not gain overall.

Weak c-SCP. Consider an arbitrary coalition of the miner and a subset of the users. Suppose
the coalition plays honestly:

• if the top conﬁrmed bidder is in the coalition, the coalition’s utility is top bidder’s true value

denoted v1;

• if the top conﬁrmed bidder is not in the coalition, then the coalition’s utility is the true value

of the 2nd bidder v2 ≤ v1.

46

Now, consider an arbitrary strategy where two bids are included and the higher of the two
gets conﬁrmed. Each included bid can either come from some user, or is a fake bid. Without loss
of generality, we may equivalently assume that a fake bid belongs to some imaginary user which
belongs to the coalition, and its true value is 0. We may use the fake indices 0 and −1 to refer to
the one or two imaginary users. There are the following cases:

• Case 1: The conﬁrmed user i belongs to the coalition. In this case, the coalition’s utility is upper
bounded by (the possibly imaginary) user i’s true value vi. If i has the highest true value, it
means the coalition’s utility is upper bounded by v1; else if i does not have the highest true
value, it means that the coalition’s utility is upper bounded by v2. Either way, the coalition’s
utility cannot exceed the aforementioned honest case.

• Case 2: The conﬁrmed user i does not belong to the coalition. In this case, suppose that the
included but unconﬁrmed user is denoted j where j is possibly an imaginary user. The coalition’s
utility is bj − max(0, bj − vj) ≤ vj where bj is user j’s bid, vj is its true value, and the part
max(0, bj − vj) is the penalty due to overbidding. Since the conﬁrmed user i does not belong
to the coalition, it must be a real user and it must be bidding its truthful value, i.e., bi = vi.
Note that the bj cannot be bidding higher than bi since bj is unconﬁrmed but bi is conﬁrmed.
Therefore, vj ≤ bj ≤ bi = vi. This also implies that that vj ≤ v2, and thus the coalition’s
utility is also upper bounded by v2. Recall that the coalition’s utility is at least v2 had it played
honestly; therefore, the coalition does not gain anything in comparison with playing honestly.

B.2 The Solitary-Or-Posted-Price Mechanism

Earlier in Section 6, we ruled out the existence of a deterministic, 2-user-friendly mechanism that
satisﬁes weak UIC and 2-weak-SCP simultaneously, assuming ﬁnite block size. In this section, we
show that the ﬁnite block size restriction is necessary for this lower bound to hold, by showing a
deterministic, 2-user-friendly mechanism that satisﬁes weak UIC, weak MIC, and 2-weak-SCP, but
only under inﬁnite block size.

The solitary-or-posted price mechanism

Parameters:

a reserve price r.

Mechanism:

• Choose the top two bids as well as every other bid that is at least r to include in the block.
• Every bid at least r is conﬁrmed, and the highest bid in the block is always conﬁrmed (even

if it is smaller than r).

• Let b2 be the second highest bid in the block. Every conﬁrmed bid pays min(b2, r), and

miner is paid min(b2, r). The remaining payment is burnt.

Theorem B.2 (Solitary-or-posted-price mechanism). Suppose the block size is inﬁnite. The solitary-
or-posted-price mechanism satisﬁes weak UIC, weak MIC, and c-weak-SCP for all c > 0.

Proof. We prove the three properties one by one.

47

Weak UIC. A user has two kinds of strategies to deviate from the honest behavior: to bid
strategically or to inject fake transactions. Since the payment is decided by min(b2, r), injecting
fake transactions can only increase the payment, no matter whether the user is bidding truthfully
or not.

Suppose the real bid vector is b = (b1, . . . , bm), where b1 ≥ · · · ≥ bm. Suppose user i bids
i be user i’s true value and strategic

truthfully and other users may bid arbitrarily. Let vi and b′
bid, respectively.

• Case 1: b2 ≥ r. User i is facing a posted-price auction such that it if conﬁrmed if and only
i ≥ r. In this case, it is not hard to see that no matter user i overbids or underbids, its

if b′
utility does not increase.

• Case 2: b2 < r. When vi = b1, then user i’t utility is vi − b2 ≥ 0 in the honest case. If
user i overbids, it still pays b2 so the utility does not change. If user i underbids, it is either
conﬁrmed with the same payment, or becomes unconﬁrmed. In either case, the utility does
not increase.

Weak MIC. The miner has two strategies to deviate: not to choose the highest two bids and
to inject fake bids. Without loss of generality, we assume that the miner chooses the included
bids ﬁrst, and replaces some of them with fake bids then. We will show that both steps would
not increase the miner’s utility. The miner’s revenue is decided by the second highest bid that is
included, so if miner does not choose the highest two bids to include, its revenue can only decrease
or remain the same.

Now, suppose the miner replaces some of the included bids with fake ones. If any fake bid is
conﬁrmed, then the fake bid must be paying an amount equal to the miner revenue, and thus the
miner’s utility is at most 0. If no fake bid is conﬁrmed, and some fake bid is unconﬁrmed and its
bid amount is b. Then, it must be that b is the second highest bid and the highest bid is smaller
than r. In this case, the miner gets revenue b; however, it costs b to inject this fake bid. Thus, the
miner does not gain overall.

Weak c-SCP. Suppose there are m users, and their true values are (v1, . . . , vm) where v1 ≥ · · · ≥
vm. Henceforth, we also call the user with the highest true value v1 the top user. There are two
possible cases.

• Case 1: v2 < r. When everyone behaves honestly, the miner’s revenue is v2, user 1’s utility is
v1 − v2, and all other users are zero since they are unconﬁrmed. Suppose the miner colludes with
a subset of users, and they prepare a bid vector e = (e1, . . . , em) where e1 ≥ · · · ≥ em. Each bid
ei in e is either a non-colluding bid coming from a non-coalition user in which case ei = vi, or
it is a colluding bid, i.e., one that comes from a colluding user or a fake bid. If only one user i
is conﬁrmed in e, there are two possibilities.

– Suppose user i is not in the coalition. The utility of the coalition is miner’s revenue (e2)
minus potential extra cost if there are overbid or fake bids that are unconﬁrmed. If i is not
the top user, then e2 ≤ vi ≤ v2. This means the utility of the coalition cannot exceed v2,
which can be achieved by playing honestly.
If i is top user, to make the miner’s revenue larger than the honest case, it must be that e2
is a colluding bid and e2 > v2. Let v′ be the true value of this colluding user or v′ = 0 if
e2 is fake. Since e2 is unconﬁrmed in e, its utility becomes v′ − e2. Thus, the utility of the
coalition cannot exceed v′ ≤ v2, which can be achieved by playing honestly.

48

– Suppose user i is in the coalition. The utility of the coalition is vi minus potential extra cost.
However, if top user is also in the coalition, the utility of the coalition is v1 in the honest
case, and is at most vi ≤ v1 in the strategic case. If the top user is not in the coalition, the
utility of the coalition is v2 in the honest case, and is at most vi ≤ v2 in the strategic case.

If there are two or more conﬁrmed bids in e, the miner’s revenue becomes r, while each conﬁrmed
user needs to pay r. In this case, the utility of the top user decreases by r − v2. The utilities
of all other bids (including fake ones) are non-positive, since if they are conﬁrmed, they have to
pay r which is higher than their true values. Since v2 < r, there must be a colluding user (that
is not the top user) bidding b′ ≥ r or the miner injects a fake bid b′ ≥ r. Let v′ be the true value
of this colluding user or v′ = 0 if the bid is fake. The utility of this bid is v′ − r. The joint utility
of this colluding or fake bid and the miner is v′ ≤ v2, so the joint utility does not increase.
• Case 2: v2 ≥ r. When everyone behaves honestly, the miner’s utility is r, user i’s utility is vi − r
for all conﬁrmed user i, and all other users are zero since they are unconﬁrmed. In this case,
miner’s utility is already maximized. Suppose the miner colludes with a subset of users, and
they prepare a bid vector e. If there is only one conﬁrmed bid in e, then only the conﬁrmed
user can beneﬁt by the deviation since its payment decreases. However, the amount that the
conﬁrmed user gains is exactly what the miner loses, so the joint utility of any coalition does
not increase. If there are two or more conﬁrmed bids in e, then every user’s utility is maximized
when they bid truthfully, since the payment is ﬁxed at r regardless of others’ bids.

B.3 Necessity of Burning

Earlier in Section 6, we ruled out the existence of a deterministic, 2-user-friendly mechanism that
satisﬁes weak UIC and 2-weak-SCP simultaneously, assuming ﬁnite block size. In this section, we
show that if the mechanism is not allowed to use a burning mechanism, i.e., if the miner’s payment
must be the sum of all users’ payment, then, the same lower bound would hold even under inﬁnite
block size. This lower bound also shows that the burning in the solitary-or-posted-price mechanism
is necessary.

Theorem B.3. Let (x, p, µ) be a deterministic mechanism without burning. If (x, p, µ) is 2-user-
friendly, then it cannot achieve UIC and 2-weak-SCP at the same time.

The remainder of this section will focus on proving Theorem B.3. We ﬁrst prove a useful lemma
that says in a mechanism satisfying the desired properties, if in some bid vector, all unconﬁrmed
bids are bidding 0, then all conﬁrmed bids must be paying 0.

Lemma B.4. Let (x, p, µ) be a deterministic mechanism without burning that is weak UIC and
2-weak-SCP. Suppose there exists a bid vector b = (b1, . . . , bm) that conﬁrms at least one bid, and
moreover, all unconﬁrmed bids are 0. Then, all conﬁrmed bids must pay 0.

Proof. Due to Lemma 6.4, let p := p(b) denote the universal payment for b. Let ǫ < p/2m be
a suﬃciently small positive number. By Lemma 6.3 and Myerson’s Lemma, we can change all
conﬁrmed bids in b to p + ǫ such that all conﬁrmed bids in b remain conﬁrmed, and their payment
unaﬀected. Let b′ be the resulting bid vector, and let u ∈ [m] be the number of conﬁrmed users
in b′, and recall all unconﬁrmed users bid 0. Since there is no burning, µ(b′) = u · p. Let i be
a conﬁrmed user in b′. Now, suppose that the real bid vector is actually b′′ := (b′
−i, p − ǫ), and
this also represents everyone’s true value. User i becomes unconﬁrmed in b′′ by Myerson’s Lemma.

49

Thus µ(b′′) ≤ (p + ǫ) · (u − 1). In this case, the miner can collude with user i and ask it to bid p + ǫ
instead. In this case, user i’s utility is −ǫ, however, the miner’s revenue is p · u > µ(b′′) + ǫ. Thus,
the coalition can strictly gain from this deviation, which violates 1-weak-SCP.

Lemma B.5. Let (x, p, µ) be a deterministic mechanism without burning which is 2-user-friendly,
weak-UIC, 2-weak-SCP, and with non-trivial miner revenue. Then, there exists a bid vector b =
(b1, . . . , bm) where two diﬀerent users i, j are conﬁrmed, and moreover, µ(b) > 0, bi > pi(b) and
bj > pj(b).

Proof. It suﬃces to show that there exists a bid vector b such that µ(b) > 0 and at least two
users’ bids are conﬁrmed. If so, we can use the same argument in the proof of Lemma 6.10 to
show that there exists a bid vector b′ such that µ(b′) > 0, and moreover at least two users’ bids
are conﬁrmed, and they are both bidding strictly higher than their payment. In particular, cases
1 and 2 follow just like the proof of Lemma 6.10. For case 3, suppose that b is a bid vector such
that µ(b) > 0 and two diﬀerent users i and j are conﬁrmed, and both bid exactly their payment.
In this case, the proof of Lemma 6.10 constructed a new bid vector b′ which is otherwise equal to
b except that bi and bj now bid bi + ∆ for an arbitrary ∆ > 0, and showed that under b′, both i
and j are conﬁrmed and bidding strictly above payment. Here, we only need to additionally argue
that µ(b′) > 0. This can be achieved by choosing ∆ to be suﬃciently small, and then applying
Lemma 6.7.

Therefore, below, we focus on proving that there exists a bid vector b such that µ(b) > 0 and
at least two users’ bids are conﬁrmed. Suppose this is not true. In other words, for any bid vector
b satisfying µ(b) > 0, only one user is conﬁrmed. We will show that this contradicts 2-weak-SCP.
Since the mechanism is 2-user-friendly, Lemma 6.10 guarantees that there exists a bid vector
c = (c1, . . . , cm) such that x1(c) = x2(c) = 1 and c1 > p(c) and c2 > p(c). By our assumption, it
must be µ(c) = 0. Because there is no burning, we have p(c) = 0. By Lemma 6.3, we can increase
user 1’s and user 2’s bids arbitraily without changing their conﬁrmation and payment. As a result,
we obtain c′ = (Γ, Γ, c3, . . . , cm), where Γ = |c|1. By Lemma 6.9, we can now reduce each bid
b3, . . . , bm down to zero one by one, without changing user 1’s and user 2’s conﬁrmation. Formally,
we obtain a bid vector c′′ = (Γ, Γ, 0, . . . , 0) such that x1(c′′) = x2(c′′) = 1. By our assumption,
both conﬁrmed users in c′′ are paying 0.

Since the mechanism has non-trivial miner revenue, there must exist a bid vector b where
µ(b) > 0. By our assumption, only one user denoted i is conﬁrmed in b. By Lemma B.4, there
must be another user j bidding non-zero. Suppose b also represents everyone’s true value. In this
case, miner’s utility is µ(b), user i’s utility is bi − µ(b), and user j’s utility is zero. The miner can
collude with user i and user j, and ask them to bid Γ instead. Then, the coalition prepares a bid
vector c′′ = (Γ, Γ, 0, . . . , 0) where the ﬁrst two bids are user i and user j’s bids. In this case, the
miner’s utility is zero, while user i’s utility is bi and user j’s utility is bj. The joint utility increases
by bj > 0, which violates 2-weak-SCP.

The proof of Theorem B.3. By Lemma 6.4 and Lemma B.5, there exists a bid vector b(0) =
(b1, . . . , bm) such that µ(b(0)) > 0, x1(b(0)) = x2(b(0)) = 1, b1 > p(b(0)) and b2 > p(b(0)) — note
that we can always relabel the bids to make the ﬁrst two bids represent two conﬁrmed bids.

Now, one by one, we reduce every unconﬁrmed bid down to zero and increase every conﬁrmed

bid to a suﬃciently large value Γ > |b|1. Formally, for i = 1, . . . , m, we deﬁne

b(i) =

(b(i−1)
−i
(b(i−1)
−i

, 0),
, Γ),

(

if xi(b(i−1)) = 0,
if xi(b(i−1)) = 1.

50

By Lemma 6.3, when increasing user 1’s and user 2’s bids, their conﬁrmation, payment, and miner
revenue do not change. Later on, when increasing any conﬁrmed user i’s bid where i > 2, any
previous user bidding Γ would still remain conﬁrmed and pay the same. When decreasing any
unconﬁrmed user i’s bid to 0 where i > 2, since Γ is suﬃciently large, and by Lemma 6.9, any
previous user bidding Γ would remain conﬁrmed, and although their payment may change, change
in the payment is slow. Thus, at the end, users 1 and 2 are conﬁrmed in the ﬁnal vector b(m).
By Lemma B.4 and the fact that there is no burning, it must be that µ(b(m)) = 0.

Let i∗
be the smallest integer i ∈ {1, . . . , m} such that µ(b(i)) = 0. Then, we have µ(b(i∗−1)) > 0 and
µ(b(i∗)) = 0. By Lemma 6.3, increasing a conﬁrmed user’s bid does not change miner revenue, so
user i∗ must be unconﬁrmed in b(i∗−1). Imagine the real bid vector is b(i∗−1) which also represents
everyone’s true value. In this case, the miner’s revenue is µ(b(i∗−1)), user 1’s utility is Γ−p(b(i∗−1)),
and user i∗’s utility is zero. The miner can collude with user 1 and user i∗, and ask user i∗ to bid Γ
instead. The coalition now prepares a bid vector µ(b(i∗)) where the second coordinate Γ actually
comes from user i∗ and bi∗ = 0 is a fake bid injected by the miner. Since there is no burning and
µ(b(i∗)) = 0, the payment must be zero. Therefore, the miner’s revenue becomes zero, while user
1’s utility becomes Γ, and user i∗’s utility becomes bi∗. By Lemma 6.7, we have bi∗ ≥ µ(b(i∗−1)),
and thus the coalition strictly gains from this deviation, which violates 2-weak-SCP.

C A More Detailed Discussion of Related Work

In this section, we discuss some known fee mechanisms, monopolistic price [LSZ19], random sam-
pling optimal price (RSOP) [GHK+06,LSZ19], BEOS mechanism [BEOS19], and analyze why they
fail to achieve UIC, MIC, and 1-SCP at the same time. Roughgarden [Rou20,Rou21] also provided
a summary of known results — we provide some more details in this section.

C.1 Monopolistic Price

The monopolistic price mechanism was introduced by Lavi et al. [LSZ19]. We describe the mecha-
nism below.

Monopolistic Price

Parameters:

the block size B

Mechanism:

• Inclusion rule. Given the bid vector b1 ≥ b2 ≥ · · · , the miner calculates

k∗ = arg max

k · bk.

k∈[B]

(4)

Then, the miner chooses (b1, b2, . . . , bk∗) to be the block.

• Conﬁrmation rule. All transactions in the block are conﬁrmed.
• Payment rule and miner revenue rule. All transactions in the block pay the lowest bid in

the block, and all payments go to the miner.

As Example 2.2 in Lavi et al. [LSZ19] pointed out, monopolistic price is not UIC. However,
as conjectured by Lavi et al. [LSZ19] and proven by Yao [Yao], the strategic gain of the users by

51

deviating from truthful bidding goes to zero as the number of users goes to inﬁnity. Moreover,
monopolistic price is also not 1-SCP. Consider the following example. Suppose there are only two
bids in the mempool, (10, 6).
If the miner is honest, it will choose both bids. In this case, the
miner’s revenue is 2 · 6 = 12, and the utility of the second user is 0. However, the miner can sign
a contract with the second user and ask it to bid 10 instead. Now, the miner’s revenue becomes
2 · 10 = 20, and the utility of the second user becomes −4. Their joint utility becomes 16, which
increases by 4. It violates 1-SCP.

As the authors in [LSZ19] pointed out, a myopic miner has no incentive to deviate. We formulate

the notion as the following proposition.

Proposition C.1. Monopolistic price is MIC.

Proof. The miner has two kinds of strategies to deviate from honest behavior: not to choose the
highest k∗ bids and to inject fake bids, where k∗ is decided by Eq.(4). Without loss of generality,
we assume that the miner chooses the included bids ﬁrst, and replaces some of them with fake bids
then. We will show that both steps would not increase the miner’s utility.

Notice that choosing the highest k∗ bids always gives the optimal revenue by Eq.(4). Next,
suppose the miner may or may not follow the inclusion rule, and prepares c = (c1, . . . , ct), where c
may or may not include some fake bids and c1 ≥ · · · ≥ ct. In this case, the revenue is t · ct. Now,
suppose the miner injects one more fake bid f . If f ≥ ct, the revenue becomes (t + 1) · ct, while
the miner needs to pay ct for injecting f . Thus, the overall utility does not increase. If f < ct, the
revenue becomes (t + 1) · f , while the miner needs to pay f for injecting f . Thus, the overall utility
becomes t · f , which is less than not injecting f .

Finally, notice that the argument above holds no matter B is ﬁnite or inﬁnite.

C.2 Random Sampling Optimal Price

Random sampling optimal price (RSOP) was introduced by Goldberg et al. [GHK+06], and Lavi
et al. [LSZ19] analyzed the incentive compatibility in the context of fee mechanism. We describe
the mechanism below.

Random Sampling Optimal Price (RSOP)

Parameters:

the block size B

Mechanism:

• Inclusion rule. Choose the highest B bids into the block.
• Conﬁrmation rule. Let C and D be empty sets. For each bid, it is put in C with probability
1/2 and in D with probability 1/2.
In other words, C and D form a partition for all
bids in the block. Let C = (c1, . . . , c|C|) where c1 ≥ · · · ≥ c|C|, and D = (d1, . . . , d|D|)
, where
where d1 ≥ · · · ≥ d|D|. Then, a bid b is conﬁrmed if it is in C and b ≥ ck∗
k∗
D = arg maxk∈[|D|] k · dk or it is in D and b ≥ dk∗
C = arg maxk∈[|C|] k · ck.
• Payment rule. All conﬁrmed transactions in C pay ck∗

and all conﬁrmed transactions in D

, where k∗

D

C

C

pay dk∗
C

.

• Miner revenue rule. All payments go to the miner.

RSOP is UIC by our deﬁnition, because each user’s conﬁrmation and payment do not depend
on its own bid, but depends on the bids in the other set. As pointed out in Example 5.3 and

52

Example 5.5 in Lavi et al. [LSZ19], the miner is incentived to inject some fake bids or not to choose
the highest bids from the mempool, so RSOP is not MIC.

By modifying Example 5.3 in [LSZ19], we obtain the following example saying that RSOP is
not 1-SCP. Suppose there are only two users in the mempool, and the true value of the ﬁrst user
is 1. Now, the second user bids 3 (its true value does not matter). If both the miner and the ﬁrst
user are honest, two bids either fall to the same set or fall into diﬀercent sets, each with probability
1/2. If they fall to the same set, the miner’s revenue is zero, and the utility of the ﬁrst user is 1;
if they fall into diﬀercent sets, the miner’s revenue is 1, and the utility of the ﬁrst user is 0. Thus,
the expected joint utility is 1. However, the miner can sign a contract with the ﬁrst user and ask
it to bid 2 instead. If they fall to the same set, the miner’s revenue is zero, and the utility of the
ﬁrst user is 1; if they fall into diﬀercent sets, the miner’s revenue is 2, and the utility of the ﬁrst
user is 0. Their joint utility becomes 3/2, which violates 1-SCP.

C.3 The BEOS Mechanism

The following mechanism was introduced by Basu et al. [BEOS19], and we formulate in terms of
inclusion, conﬁrmation, payment, and miner revenue rule. Roughgarden [Rou20, Rou21] argued
that BEOS mechanism does not satisfy UIC, MIC, or 1-SCP, and we brieﬂy explain why below for
completeness.

BEOS mechanism

Parameters:

• the block size B
• ﬁll threshold K, where 0 ≤ K ≤ B
• interval I for proﬁt-sharing
• minimum entry fee f

Mechanism:

• Inclusion rule. Choose the highest t non-zero bids from mempool to include in the block,
so the block is (b1, . . . , bt) where b1 ≥ · · · ≥ bt. If t < K, the miner further chooses one of
the following options with higher revenue.

– The miner declares the mempool is too empty.

– The miner chooses to pay ﬁll penalty, which is bt · (K − t).

• Conﬁrmation rule. If the miner declares the mempool is too empty, only the transactions

≥ f are conﬁrmed. Otherwise, all transactions in the block are conﬁrmed.

• Payment rule. If t ≤ K, all transactions in the block pay the lowest conﬁrmed bid in the
block. Otherwise, if t > K, the highest K bids all pay bK , and all other bids pay nothing.
• Miner revenue rule. Let S denote the fee of the current block, which is sum of all payment in
the block and the ﬁll penalty (if there is any). The miner is paid S/I and the corresponding
fees in the upcoming I − 1 blocks.

Because the bid (bk) who decides the payment is also conﬁrmed, that user can try to bid lower

strategically so that it is still conﬁrmed. Therefore, the BEOS mechanism violates UIC.

53

As the authors [BEOS19] pointed out, the BEOS mechanism is not MIC, while the strategic
gain of the miner by deviating from the mechanism decreases as the reward is splitting into more
future blocks (I). To see why it is not MIC, consider the following example. Suppose K = 4 and
I = 3, and the mempool is (5, 5, 5, 1). Since it is possible to make the block full, an honest miner
should include all four transactions in the mempool, and earn (1 · 4)/3 = 4/3 from this block.
However, if the miner only includes (5, 5, 5) and pays the ﬁll penalty 5, the fee from this block is
(5 · 4)/3 = 20/3. Thus, the miner’s utility from this block is the diﬀerence between the total fee
and the ﬁll penalty, 20/3 − 5 = 5/3 > 4/3.

The same example also suggests the mechanism is not 1-SCP. In the honest case, the miner’s
revenue is 4/3 and the utility of the fourth user is v − 1, where v is the true value. However, the
miner can sign a contract with the fourth user and ask it to bid 5 instead. In this case, the miner’s
revenue becomes 20 and the utility of the fourth user becomes v − 5. Their joint utility increases.

C.4 Dynamic Posted-Price

Ferreira et al. [FMPS21] proposed the dynamic posted-price mechanism. On the single block level,
their mechanism is exactly the posted-price without burning. Their contribution is to design a rule
to decide the posted-price for each block given the blockchain history. As explained in Appendix
A, the posted-price auction satisﬁes UIC and MIC, but it is not 1-SCP.

54

