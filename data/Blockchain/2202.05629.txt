2
2
0
2

b
e
F
1
1

]

R
C
.
s
c
[

1
v
9
2
6
5
0
.
2
0
2
2
:
v
i
X
r
a

BlockMeter: An Application Agnostic Performance Measurement
Framework For Private Blockchain Platforms

Ifteher Aloma, Md Sadek Ferdousb,c,∗∗ and Mohammad Jabed Morshed Chowdhuryd

aShahjalal University of Science and Technology, Sylhet, Bangladesh
bBRAC University, Dhaka, Bangladesh
cImperial College London, London, UK
dLa Trobe University, Melbourne, Australia

A R T I C L E I N F O

Keywords:
Blockchain
distributed consensus
scalability
performance
platform agnostic
performance benchmarking
performance matrices

A B S T R A C T

Blockchain Technology is an emerging technology with the potential to disrupt a number of
application domains. Though blockchain platforms like Bitcoin and Ethereum have seen immense
success and acceptability, their nature of being public and anonymous make them unsuitable for many
enterprise level use-cases. To address this issue, Linux Foundation has started an open source umbrella
initiative, known as the Hyperledger Platforms. Under this initiative, a number of private blockchain
platforms have been developed which can be used for diﬀerent enterprise level applications. However,
the scalability and performance of these private blockchains must be examined to understand their
suitability for diﬀerent use-cases. Recent researches and projects on performance benchmarking for
private blockchain systems are very speciﬁc to use-cases and are generally tied to a blockchain
platform. In this article, we present BlockMeter, an application agnostic performance benchmarking
framework for private blockchain platforms. This framework can be utilised to measure the key
performance matrices of any application deployed on top of an external private blockchain application
in real-time. In this article, we present the architecture of the framework and discuss its diﬀerent
implementation aspects. Then, to showcase the applicability of the framework, we use BlockMeter
to evaluate the two most widely used Hyperledger platforms, Hyperledger Fabric and Hyperledger
Sawtooth, against a number of use-cases.

1. Introduction

The concept of Blockchain Technology is undeniably
an ingenious invention of Satoshi Nakamoto with the intro-
duction of Bitcoin [1]. Equipped with a number of valuable
properties [2, 3], Blockchain technology has the potential to
be one of the frontier technologies in the very near future. To
investigate its potentiality, it is being actively investigated,
within the academia, industries and the Governments around
the world, how blockchain technology can be integrated with
the existing use-cases or even how it can be leveraged to
disrupt the traditional application domains, such as banking,
ﬁnance, e-government, healthcare industries, IoT, agricul-
ture and so on [4, 5]. Many industries in these application do-
mains are investigating to shift their infrastructures towards
blockchain.

To cater to this need, in addition to Bitcoin, a number of
new blockchain platforms, such as Ethereum [6], Cardano,
Algorand [7], Polkadot [8] and others have emerged. These
blockchain platforms are equipped with novel features such
as smart contract and oﬀer additional advantages in terms
of scalability and performance in comparison to Bitcoin.
However, these platforms are public in nature, meaning any-
one can verify every single block, even observe every single

⋆ Corresponding Author: M. S. Ferdous

ifteher.alom@gmail.com (I. Alom); sadek.ferdous@bracu.ac.bd

(M.S. Ferdous); m.chowdhury@latrobe.edu.au (M.J.M. Chowdhury)

ORCID(s): 0000-0002-8361-4870 (M.S. Ferdous); 0000-0003-4476-8882

(M.J.M. Chowdhury)

activity and submit transactions anonymously or pseudony-
mously which make them unsuitable for enterprise level ap-
plications where privacy and identity are key requirements.
In addition, there are issues with respect to scalability and
performance of these blockchain platforms for any large-
scale adoption in real-life settings [9, 10].

To address these issues, Linux Foundation [11], a non-
proﬁt technology consortium, has started an open source
umbrella initiative, known as the Hyperledger Platforms.
The goal of this initiative is to achieve a industry-wide col-
laboration for developing enterprise-grade blockchain plat-
forms. Under this initiative, a number of private Blockchain
platforms have been developed which can be used for diﬀer-
ent applications. However, to utilise and select a particular
blockchain platform for a speciﬁc use-case, one must be able
to compare the available platform against a set of criteria and
select the best suitable one.

One of the key factors that can help in the decision mak-
ing of whether or not we should adopt a particular blockchain
platform for a given application is the performance of the
selected platform. There are a number of criteria that can
be used to compare diﬀerent blockchain platforms, however,
the latency and throughput are often regarded as key matri-
ces for any blockchain based application.

Recently,

there have a been a number of research
and projects on performance benchmarking of private
blockchain systems [12, 9, 10, 13]. However, these projects
are speciﬁc to use-cases and are generally tied to a
blockchain platform. This means that the method presented
in those works cannot be used to evaluate the suitability of

Ifteher Alom et al.

Page 1 of 16

 
 
 
 
 
 
BlockMeter: An Application Agnostic Performance Measurement Framework For Private Blockchain Platforms

any application for a speciﬁc blockchain platform. Further-
more, many of the experiments presented in those works
have been conducted in simulated environments. Hyper-
ledger Project itself has a tool called Caliper [14], unfor-
tunately, it cannot measure the performance of blockchain
applications deployed externally. To mitigate these limita-
tions, in this article, we present BlockMeter, an application
agnostic, real-time performance benchmarking framework
for private blockchain platforms. This framework can be
utilised to measure the key performance matrices of any
application deployed on top of an external private blockchain
application in real-time.
Contributions: The major contributions of this article are
presented below:

• We analyse diﬀerent performance metrics for private

blockchain platforms.

• We present the architecture of BlockMeter, an appli-
cation agnostic blockchain performance platform.

• We discuss diﬀerent implementation aspects of Block-
Meter and describe how it can be integrated with
diﬀerent use-cases.

• Finally, to showcase the applicability of BlockMeter,
we utilise BlockMeter to evaluate the two most widely
used Hyperledger platforms, Hyperledger Fabric and
Hyperledger Sawtooth, against a number of use-cases
and blockchain network conﬁgurations.

Structure: In Section 2, we brieﬂy discuss about blockchain
and its diﬀerent aspects and explain diﬀerent terminologies
used in our research and the blockchain platforms on which
we have conducted our experiments. Section 3 discusses
brieﬂy about some of the relevant research works within the
scope of this article. In Section 4, we present the high level
architecture of BlockMeter and discuss its implementation
methodologies and protocol ﬂows. In Section 5, we present
the conducted experiments and their corresponding results
and in Section 6 we compare diﬀerent types of applications
and their performance with respect to two blockchain plat-
forms. We discuss diﬀerent aspects related to BlockMeter in
Section 7. Finally, in Section 8, we conclude our article with
a hint of future goals and expectations.

2. Background

Blockchain Technology is a promising invention that can
be used to create immutable ledgers for a wide range of
applications in a number of areas such as ﬁnance, banking,
government, supply chains, academia and business enter-
prises [4, 5, 15]. Its development and applications are only
in their emerging stages and a lot of eﬀorts are being put by
researchers in the academia and industries to explore how
this technology can be exploited in practical use-cases in
diﬀerent application domains.

In this section some of the relevant key concepts are
discussed. In the following, we brieﬂy describe about

blockchain (Section 2.1), the Hyperledger projects (Section
2.2), Hyperledger Fabric (Section 2.3), Hyperledger Saw-
tooth (Section 2.4) and Hyperledger Caliper (Section 2.5).

2.1. Blockchain

In the year 2009 a digital currency named Bitcoin was
introduced using Blockchain technology. First published in
the previous year in a white paper authored by someone with
the presumed pseudonym Satoshi Nakamoto [16], Bitcoin
promised the ability to carry out ﬁnancial transactions with-
out relying on a central authority (e.g. government backed
central bank), utilising diﬀerent cryptographic mechanisms.
All transactions are kept on a ledger or the blockchain, which
can be publicly accessed, ensuring transparency [17].

Since then, Bitcoin has become the most widely-
used decentralised digital currency. Its main technological
breakthrough is due to its underlying mechanism called
blockchain, which is a smartly engineered decentralised
system featuring an immutable append-only ledger of trans-
actions shared and validated by a set of distributed network
of Peer-to-Peer (P2P) nodes [3]. The ledger is essentially
an ordered data structure consisting of many blocks of data
linked together by cryptographic protocols. Each block con-
tains some transactions where each transaction is a record of
an action undertaken by a user to transact a certain amount
of currency/data to another user/users. Each block refers to
its previous block using a cryptographic hash, which refers
to its previous block and so on, hence forming a chain which
is colloquially known as blockchain.

A smart-contract is a computer program which is de-
ployed and executed on top of a computing platform un-
derpinned by a blockchain. Such smart-contracts can be
deployed using the notion of transactions. Additionally,
transactions are used to invoke diﬀerent functionalities of
a smart-contract which ultimately changes the state of the
blockchain. Being underpinned by a blockchain platform
ensures that a smart-contract facilitates code immutability
a sought-after feature in many application domains.

Despite the vast number of blockchain platforms and
implementations available at this moment, we can broadly
classify them into two types: permissionless (public) and
permissioned (private) [2].

A public blockchain allows any user to create a personal
address and begin interacting with the network, by submit-
ting transactions, and ultimately, adding entries to the ledger.
Additionally, all users also have the opportunity to contribute
as a node to the network, employing the veriﬁcation pro-
tocols to help verify transactions and reach a distributed
consensus regarding the state of the blockchain. On the
other hand, a private blockchain acts as closed ecosystems,
where only authorised users are able to join the network,
see the recorded history, or issue transactions. Indeed, such
blockchains are governed by speciﬁc members of a consor-
tium or organisation and only the approved members and
computer entities have the possibility of running nodes on
the network, validating transaction blocks, issuing transac-
tions, executing smart-contracts or reading the transaction

Ifteher Alom et al.

Page 2 of 16

BlockMeter: An Application Agnostic Performance Measurement Framework For Private Blockchain Platforms

history [18]. Bitcoin [19] and Ethereum (Main-net) [6]
are examples of public blockchains, whereas Hyperledger
platforms [20] and Quoram [21] are examples of private
blockchain systems.

As the popularity of Bitcoin, Ethereum and a few
other derivative technologies grew, interests in applying the
underlying technology of the blockchain and distributed
ledger to more innovative enterprise use cases also grew.
However, many enterprise use cases require performance
characteristics that the currently available public blockchain
platforms are unable to deliver. In addition, in many use
cases, the identity of the participants is a hard requirement,
such as in the case of ﬁnancial transactions where Know-
Your-Customer (KYC) and Anti-Money Laundering (AML)
regulations must be followed [22]. In other words, in order to
utilise blockchain technology in many enterprise use cases,
we need to consider the following basic requirements [22]:
(1) Participants must be identiﬁed/identiﬁable, (2) High
transaction throughput performance, (3) Low latency of
transaction conﬁrmation and (4) Privacy and conﬁdentiality
of transactions and data.

Therefore, in case of enterprise/business applications
and use cases, mostly permissioned blockchains are utilised
to restrict its access within the members of an organisation
or consortium.

2.2. Hyperledger

Hyperledger is an open source collaborative project un-
dertaken to advance cross-industry blockchain technologies
[23]. It is a global collaboration, hosted by The Linux
Foundation, which includes leaders from ﬁnance, banking,
Internet of Things, supply chains, manufacturing and Tech-
nology. The Hyperledger project aims to accelerate industry-
wide collaborations for developing high performance and
reliable blockchain and distributed ledger based tools, stan-
dards and guidelines that could be used across various
industry sectors to enhance the eﬃciency, performance of
various business processes [24]. The various projects under
Hyperledger umbrella include the following:

• Hyperledger Fabric [22] - an enterprise-grade, per-
missioned blockchain platform for building various
blockchain-based products, solutions and applications
for business use-cases.

• Hyperledger Burrow [25] - a permissioned blockchain
node that handles transactions and smart-contract on
the Ethereum Virtual Machine, providing transaction
ﬁnality and high transaction throughput on a proof-of-
stake Tendermint consensus engine.

• Hyperledger Sawtooth [26] - an enterprise-level, per-
missioned, modular blockchain platform for building
blockchain applications and networks using an inno-
vative Proof of Elapsed Time [27] consensus algo-
rithm.

• Hyperledger Iroha [28] - an easy to incorporate, ef-
ﬁcient and trustworthy byzantine fault-tolerant tool

having essential functionalities for assets, information
and identity management.

• Hyperledger Composer [29] - a set of tools that al-
lows users to easily build, test and operate their own
blockchain application. Unfortunately, currently the
project is dysfunctional.

• Hyperledger Caliper [14] - a blockchain benchmark
tool that is used to evaluate the performance of a
speciﬁc blockchain implementation.

2.3. Hyperledger Fabric

Hyperledger Fabric [30] is one of the projects under
the Hyperledger umbrella. It is a permissioned blockchain
framework, sometimes referred as a distributed operating
system [31] because of its highly modular and conﬁgurable
architecture, enabling innovations, versatilities and optimi-
sations for a broad range of industry use cases including
banking, ﬁnance, insurance, healthcare, human resources,
supply chain and even digital music delivery. Being per-
missioned means that
the participants within the same
blockchain network are known to each other, rather than
anonymous and the trust requirement is dependant upon the
application developed on top of it. This means that while the
participants may not fully trust one another (they may, for
example, be competitors in the same industry), a network can
be operated under a governance model where a level of trust
can be established because of activating a legal agreement
or framework for handling disputes [22].

One crucial feature of Fabric is the support of gen-
eral purpose programming languages for deploying smart-
contracts, known as chaincode in Fabric terminology. Cur-
rently, Fabric supports several languages such as Golang,
JavaScript, Java and others [32]. Each Fabric chaincode has
two public functions, the Init function which is called when
the chaincode is deployed and the Invoke function which
is called every time the chaincode is called to access the
ledger. A Hyperledger Fabric has diﬀerent types of nodes.
The committing peers maintain the ledger by holding a copy
of it, while the endorsing peers are responsible for saving
a copy of the ledger as well as receiving requests from
the clients and validating them against the chaincode and
endorsement policies (rules that govern who is allowed to do
what within the blockchain platform). Finally, the orderers
are responsible for batching and maintaining the order of
transactions over the entire network. Ordering service may
be single or multiple (by using Apache Kafka [33]. Since
multiple organisations may participate in the same Fabric
network, the Membership Service Provider (MSP) provides
each peer with cryptographic identities and each organisa-
tion have a Certiﬁcation Authority (CA) [12]. Hyperledger
Fabric incorporates a new concept called channels that en-
ables conﬁdential transactions. A channel in Fabric is an
instance of the blockchain with its own chaincode that can
be accessed only by a predeﬁned subset of participants.

Ifteher Alom et al.

Page 3 of 16

BlockMeter: An Application Agnostic Performance Measurement Framework For Private Blockchain Platforms

2.4. Hyperledger Sawtooth

Hyperledger Sawtooth [26] is another blockchain plat-
form under the Hyperledger ecosystem. It has been designed
to be highly scalable and eﬃcient in terms of performance.
Sawtooth supports diﬀerent consensus protocols [34] like
Practical Byzantine Fault Tolerance (PBFT) and Proof of
Elapsed Time (PoET) which depends on Intel Software
Guard Extencsion (Intel SGX). Intel SGX is a Trusted Ex-
ecution Environment (TEE) built into the newer generation
of Intel processors. SGX allows processing of instructions
within a secure enclave inside the processor [35].

The architecture of Sawtooth consists of four main com-
ponents: validator, transaction processor, consensus engine
and a REST API. The validator node is the heart of the sys-
tem that is responsible for handling transactions, generating
and storing blocks. The transaction processor node holds
the business logic for validating transactions. The consensus
engine uses an algorithm for ordering the transactions into
blocks. The REST API node receives transactions from
the clients and communicates with the validator nodes for
getting the responses.

2.5. Hyperledger Caliper

Hyperledger Caliper [14] is a performance benchmark
tool under the Hyperledger umbrella. It provides a generic
method for the performance evaluation of several blockchain
technologies. Caliper has a layered architecture that allows
the separation of benchmark parameters from the ledger
implementation.

The generic benchmark layer monitors the resource
consumption, evaluates the recorded data and generates a
report at the end of the test. Blockchain interfaces allow
diﬀerent blockchain implementations to communicate with
the benchmark layer. The adaptation layer consists neces-
sary modules for diﬀerent ledger implementations [12]. The
adaptation layer is used to integrate any existing blockchain
system into Caliper framework using network conﬁguration
ﬁles. The corresponding adapter implements the ’Caliper
Blockchain NBIs (North Bound Interfaces)‘ by using cor-
responding blockchain’s native SDK.

The interface and Core layers implement core functions

and provide NBIs. Four kinds of NBIs are provided [36]:

• Blockchain operating interfaces performs operations
such as deploying smart-contracts, invoking contracts
and querying states from the ledger.

• Resource Monitor performs operations to start/stop a
monitor and fetch resource consumption status of any
backend blockchain system, including CPU, memory,
network IO and others.

• Two kinds of monitors are provided - one is to
watch local/remote docker containers, and another is
to watch local processes.

• Performance Analyzer: It contains operations to read
predeﬁned performance statistics and print bench-
mark results. Key metrics are recorded while invoking

blockchain NBIs. Those metrics are used later to
generate the statistics.

• Report Generator: It contains operations to generate

an HTML format test report.

The major interaction with Caliper takes place via two
conﬁguration ﬁles. The ﬁrst one is a ledger speciﬁc conﬁgu-
ration ﬁle that consists the network details like roles, chain-
code, policies and others. The second ﬁle is used to specify
parameters regarding the tests and workloads that are to be
carried out like labels and number of tests, number of clients,
transaction rate and workload callback. The benchmarking
criteria in Caliper so far include success rate, transaction
throughput, transaction latency and resource consumption.
However, the main limitation of using Hyperledger Caliper
for benchmarking or for analysing the performance of a
blockchain application is that we cannot execute the test
operations on a externally deployed blockchain platform.
Caliper requires the platform speciﬁcations to be fed into
its architecture and it deploys a blockchain platform ac-
cordingly. However. in real life blockchain platform may be
deployed in a complex system environment (for example
using docker containers, using virtual machines connected
remotely, over a local organisation network and so on) which
cannot be replicated in Caliper. In short Caliper performs
its operations in a closed and controlled environment which
leaves a gap between the observed performance and real-
ity. In addition, Caliper only tests the performance of the
underlying blockchain platform, completely detaching the
overlay application and thus, it is diﬃcult to benchmark a
fully integrated application using Caliper. Because of all
these factors, it is diﬃcult to create an application agnostic
benchmarking framework for real-life deployments using
Caliber.

2.6. Performance metrics

There are a number of parameters which can be utilised
to compare and analyse the performance of blockchain sys-
tems. From our research and references form existing works
as discussed in Section 3, we have identiﬁed a number of
such parameters that are mostly used in private blockchain
platforms and these parameters are: throughput, latency and
resource consumption. Next, we present a brief discussion
of these parameters.

• Throughput: Throughput is deﬁned as the number of
transactions that are successfully completed and com-
mitted to the ledger in unit time. Throughput is deter-
mined by the capacity of the network. In other words,
network infrastructure must be suﬃcient to handle
the traﬃc. Theoretically, throughput will increase as
the input load is increased, up to the the maximum
network capacity [37]. However, network capacity,
apart from physical setup, also depends on the internal
logic execution and access control mechanism. In
terms of performance evaluation, high throughput is
a key requirement in most of the applications at en-
terprise levels. It is generally expected that the system

Ifteher Alom et al.

Page 4 of 16

BlockMeter: An Application Agnostic Performance Measurement Framework For Private Blockchain Platforms

is capable of tackling maximum requests even under
high traﬃc within a business environment.

type, consensus mechanisms and block-size have signiﬁcant
impact in the performance of the ledger [13].

• Latency: Latency can be deﬁned as the time elapsed
between a transaction submit and transaction com-
pletion. Latency is dependent on propagation delay,
transit and queuing of the system. The protocol ﬂow
of the system plays a crucial role in either increasing
or decreasing the latency. High latency is a major issue
with the most of the established blockchain platforms
like Bitcoin, because of its huge ledger [38]. This is
why enterprises are looking for private blockchain
systems to avoid additional overheads. The system
should respond within minimal delay under high traf-
ﬁc, keeping up with all the protocols at the same time.

• Resource consumption: Resource consumption is
referred to as the extent to which resources such as
CPU and main memory of the host system is used by
diﬀerent nodes of the blockchain network during its
execution. A blockchain system requires a network of
nodes which have diﬀerent roles and perform various
operations in order to maintain the integrity of the
network and ledger. Despite the various beneﬁts that
a blockchain platform provides, one of the major sub-
jects of discussion is its signiﬁcant requirements for
resources. Public blockchain systems such as Bitcoin
and Ethereum are maintained by power and resource
hungry mining rigs [39]. This is another reason busi-
nesses are looking for private blockchain systems that
can be eﬃcient in utilising the resources [40].

At the application level, the task that we are trying
to solve may require one or more chaincode and speciﬁc
conﬁgurations and may interact with the ledger at various
frequencies. Moreover, the language and the framework of
the chaincode also might have some impact because of the
compilation and execution time. Having said that, these
matrices are primarily the indicators of the performance of
a system for a speciﬁc workload that is under test.

A Workload can be deﬁned as the load that is executed
on a blockchain platform to evaluate its performance and its
ability to handle a speciﬁc use case. Elementary workloads
aim to focus on a single aspect of the network. These include
DoNothing (minimal chaincode functionality: read/write),
CPUHeavy (heavy computation chaincode) and DataHeavy
(chaincode involving large size data and parameters). These
generic workloads are simulated implementations of real-
istic use cases. For example, Fabcar (a demo application
supplied with the Fabric codebase), that performs read, write
and insert operations on a predeﬁned set of records using
key value pairs can be taken in the category of a DoNothing
chaincode.

Apart from the matrices discussed above, factors like
network topology, distribution of roles and resources allo-
cated to the nodes, validation and endorsement policies also
aﬀect the network performance. At the ledger level the dis-
tribution of chaincode among the peers, storage (database)

3. Related Work

The performance analysis of private blockchain plat-
forms is a relatively new dimension of research, however,
there are already a few works in this domain. In this section,
we brieﬂy review and analyse the existing works.

Leppelsack et al. have described a generic implementa-
tion of a framework that can measure the performance of
Hyperledger Fabric under diﬀerent workloads using diﬀer-
ent chaincode [12]. To simulate the workload Hyperledger
Caliper has been used. Caliper deploys the network, installs
the chaincode and submits transactions at a predeﬁned rate
and reports the latency and resource consumption of diﬀer-
ent nodes. Four diﬀerent experiments have been conducted
using a Fabric network consisting of a single orderer and two
organisations, each having two peers. The impact of varying
transaction rate, chaincode, block-size and network loss have
been studied graphically.

The experiments show that the ledger system builds
up a backlog after the transaction rate exceeds 300 tps
(Transaction per Second). The DoNothing chaincode results
in a delayed backlog while others have backlog built up
earlier. The DataHeavy chaincode creates a slight latency
for a workload of 10KB while the CPUHeavy chaincode has
a signiﬁcant latency. A reduced block-size improved the per-
formance for higher transaction rates. While the reduction of
10 transaction per block to 5 resulted in doubling the latency
at high transaction rates. For a low transaction rate of 100
tps a network loss of 5% resulted in almost 60% increase in
transaction latency.

It is clear that transaction rate, workload, block-size and
network loss all together have signiﬁcant impact on the
performance of Hyperledger Fabric, however, none of them
alone can be considered as a bottleneck. Some of these
factors like the block-size can be tuned and optimised based
on the use case, while some factors like network loss may
not be controllable.

The authors in [9], have demonstrated the development
and analysis of the ﬁrst private blockchain evaluation frame-
work - Blockbench. The authors have used the framework to
study the performance of three diﬀerent private blockchains-
Ethereum, Parity and Hyperledger Fabric under diﬀerent
workloads. According to their experimental results, the cur-
rent state and performance of private blockchain systems
are not mature enough to replace the existing database sys-
tems. Blockbench framework allows integration of various
blockchain platforms via simple Application Programming
Interfaces (API) which is also a feature of our project. Dif-
ferent kinds of chaincode have been used to simulate various
use cases. The measurement matrices include throughput,
latency, resource consumption of the nodes, scalability.
The evaluation mainly focuses on comparison of diﬀerent

Ifteher Alom et al.

Page 5 of 16

BlockMeter: An Application Agnostic Performance Measurement Framework For Private Blockchain Platforms

blockchain implementation based on the matrices. The im-
pact of ledger speciﬁc conﬁgurations (e. g. block-size) has
not been considered.

The authors in [10], have presented an evaluation of Hy-
perledger Fabric and Ethereum. For both of the blockchain
technologies they have implemented an application with
diﬀerent smart contracts. The execution times of the smart
contracts are recorded and compared. However, the main
focus lies in the performance of these blockchain platforms
by varying the amount of transactions that are executed. Met-
rics on the ledger layer including execution time, transaction
latency and transaction throughput have been inspected.
These metrics are evaluated for both platforms with varying
numbers of transactions. Overall this allows to compare
the performance of diﬀerent workloads as well as making
statements on the pros and cons of the two technologies.

The experiments show the diﬀerences in execution time
of varying number of transactions, with diﬀerent platforms
and diﬀerent functions. The execution time increases as
the number of transactions in the data set increases. The
execution time of Hyperledger Fabric is consistently lower
than Ethereum and the gap between the execution time of
Fabric and Ethereum also grows larger as the number of
transactions increase.

As the number of transactions in the data set grows, the
latency of transactions in Ethereum worsens considerably
more compared to Hyperledger Fabric. It has been also found
that Fabric has higher throughput than Ethereum in all of the
experimental data sets. However, for similar computational
resources, Ethereum can handle more concurrent transac-
tions.

The authors have suggested that estimating the expected
number of transactions will be very crucial in selecting
suitable platforms as they can alter subsequent throughput,
execution time, and latency. Particularly, latency can play a
crucial role in applications involving money transfer as well
as other forms of trading.

The authors in [13] have conducted a comprehensive
empirical study to understand and optimise the performance
of Hyperledger Fabric, a permissioned blockchain platform,
by varying conﬁguration parameters such as block-size, en-
dorsement policy, channels, resource allocation, and state
database choices. The experiments have been conducted
using a two-phased approach. In the ﬁrst phase, the impacts
of various Fabric conﬁguration parameters such as block-
size, endorsement policy, channels, resource allocation, state
database choice on the transaction throughput and latency
have been studied. It has been found that endorsement policy
veriﬁcation, sequential policy validation of transactions in a
block, and state validation and commit (with CouchDB) have
been the three major bottlenecks.

In the second phase, they have focused on optimising
Hyperledger Fabric v1.0 based on the observations gained in
the ﬁrst phase. Several optimisations have been introduced
and studied, such as aggressive caching for endorsement

policy veriﬁcation in the cryptography component, paral-
lelising endorsement policy veriﬁcation and bulk read/write
optimisation for CouchDB during state validation.

4. Architecture, Implementation & Protocol

Flow
The core theme of BlockMeter is that it advocates the
concept of an application agnostic performance measure-
ment framework for private blockchain systems. Based on
the analysis as discussed above in section 2.6, we have
worked out a Proof of Concept (PoC), to evaluate our pro-
posal and formulate some insights on the performance of two
popular Hyperledger blockchains.

In this section, we present the architecture of BlockMeter
(Section 4.1) and the protocol ﬂow (Section 4.3) which illus-
trates how diﬀerent components of the architecture interact
for a particular testing scenario. Based on the architecture,
we have developed a Proof of Concept (PoC) in order to
evaluate its applicability. The implementation details for the
PoC are described in Section 4.2.

4.1. Architecture

The architecture, as described in ﬁgure 1, consists of
several modules. Each module performs a speciﬁc task by
receiving some data, applying a set of instructions on it and
then forwarding it to the next module. Next, we elucidate the
architecture and its diﬀerent components.

• Transactions Handler: It is one of the central com-
ponents that receives incoming requests and initiates
the process. Its main role is to translate incoming
HTTP requests into blockchain platform speciﬁc data-
frames. Every blockchain platform has its own prereq-
uisites and conditional input ﬁelds that are used at var-
ious levels of the transaction processing, this module
encapsulates the incoming request into a blockchain
object. At the end of the process, when the transaction
is completed, the object is parsed to get the necessary
information and the client is notiﬁed with a response.

• Performance Monitor: This can be called the crux
of the system as it is responsible for collecting the
performance data as the transactions are being cas-
caded from the framework to the blockchain and vice
versa. Several methods are embodied into this module
to collect data like transaction start time, end time,
and the status of the docker containers. The data thus
collected are continually uploaded to speciﬁc ﬁles
in the directory, which can be retrieved for further
analysis.

• Transaction Processor: This component

translates
client requests into objects that can be perceived by
a particular blockchain platform within its ecosys-
tem. The respective Software Development Kit (SDK)
for each blockchain platform provides the necessary
functions and libraries to achieve this task. In our

Ifteher Alom et al.

Page 6 of 16

BlockMeter: An Application Agnostic Performance Measurement Framework For Private Blockchain Platforms

has been assigned a particular path where the client
requests are received and relayed to the the transaction
processor. Finally, upon the completion of the request
the response is sent back to the client.

• Performance Data: Upon completion of each round of
load testing we receive the data recorded by the perfor-
mance monitor. The data consists of request start times
and end times, throughput count and system statistics
from the docker containers that host the blockchain
application. These data can be parsed and studied for
further analysis based on the requirements and criteria
of evaluation.

4.2. Implementation

In order to develop and implement the PoC, we would
need to integrate diﬀerent private blockchain platforms with
the framework. From all the available private blockchain
platforms, we have selected Hyperledger Fabric and Saw-
tooth from the Hyperledger Umbrella Projects [23] for the
PoC as these two are popular private blockchain platforms.
The implementation instance of the developed PoC based
on the proposed architecture of HyerpScale is illustrated in
Figure 2.

At the Blockchain Application level (Blockchain Appli-
cation part of Section 4 and in Figure 1), we have we have
conﬁgured two blockchain networks as discussed before.
The Hyperledger Fabric network consists of a number of
diﬀerent types of nodes as discussed earlier. Similarly, for
the Sawtooth network, required validating nodes and trans-
action processor nodes have been set up. For both cases,
the blockchain application have been deployed using AWS
EC2 instances and Docker (used for virtualisation). The
network topology and structure have been varied for diﬀerent
experiments (discussed in Section 5).

The Target SDK for Hyperledger Fabric are available
in Golang, Java, Python and NodeJS while Hyperledger
Sawtooth SDK are available in python, NodeJS and Rust.
We have used the NodeJS SDKs in our implementation to
create a middleware (the Transaction Processor in section
4), which accepts client requests and complies them into
platform speciﬁc objects that can communicate with the
backend blockchain network using the SDK functions as
discussed in Section 4.2

The Performance recorder is a server set up using
NodeJS and Express [41] (a web application framework
for NodeJS). The server has been hosted on an AWS EC2
machine exposing two POST APIs. The requests are routed
to the blockchain network at the backend using an instance of
the appropriate class. This server also facilitates transaction
throughput monitoring which tracks the number transactions
being completed per second and resource monitoring which
records the resource consumption of the peer nodes every
three seconds (because each request for the docker statistics
takes more than two seconds to respond).

Two API ends, acting as the Gateway APIs, are ex-
posed from the NodeJS-Express server. A client application
submits transaction requests to diﬀerent APIs based on the

Figure 1: Architecture of BlockMeter

framework we have exploited the SDK to develop such
a middleware for Hyperledger Fabric and Hyperledger
Sawtooth platforms. More blockchain platforms can
be incorporated here to make the support range wider
and comprehensive.

• Blockchain Application This module comprises of the
use-case or client application under test. It is respon-
sible for setting up a blockchain based application
and its constituent elements independently. The corre-
sponding transaction processor of the blockchain plat-
form performs the operations that has to be undertaken
during the performance testing thereby making our
proposed tool capable of monitoring the performance
under real traﬃc and congestion of the surrounding
environment.

• API Gateway: In order to serve requests from the
client application each supported blockchain platform

Ifteher Alom et al.

Page 7 of 16

Application usingBlockchain Platform AApplication usingBlockchain Platform BBlockchain Platform ABlockchain Platform BDistributed network ofnodes hosting thebusiness logic.TransactionProcessor  ATransactionProcessor  BAPI GatewayAPI forBlockchainAAPI forBlockchainBDistributed network ofnodes hosting thebusiness logic.Performance MonitorRecord latency,throughput and resourceusagePerformance DataData recorded in terms oflatency, throughput andresource usageTransaction HandlerRoute each transaction toits platform transactionprocessorBlockMeter: An Application Agnostic Performance Measurement Framework For Private Blockchain Platforms

4.3. Protocol Flow

Now, we illustrate a protocol ﬂow utilising the frame-
work in Figure 3. This ﬂow showcases the interactions
between diﬀerent components of the architecture when used
in a testing scenario.

• User Creation: A number of user accounts have
been created for each blockchain platform. These
user credentials consist of the user names and their
respective public and private keys that are used to
sign the transaction requests before submitting them
to the blockchain platform. These accounts have been
used to simulate scenarios where a number of users
simultaneously use the application built on top of that
particular blockchain platform.

• Payload Creation: In order to perform an operation
in the blockchain (i.e. invoking a particular function
of the smart-contract in the blockchain) we need to
provide the necessary parameters. In this step such
parameters are created programmatically with random
payload.

• Traﬃc/Load Generation: The payload and parame-
ters generated earlier are imported into Apache JMeter
[43] that injects them into HTTP requests and hits the
framework’s Gateway API. JMeter is an open source
software quality evaluation tool maintained by the
Apache Software Foundation [44]. It is primarily used
for load testing, unit testing and basic performance
monitoring of web based applications. Using JMeter,
the number of requests/load generated per second is
varied over the span of each experiment.

• Transaction Request: As illustrated in Figure 3, the
JMeter acts as the source to generate transaction re-
quests. These requests are essentially HTTP requests
consisting of transaction particulars for the respective
blockchain platform. We can feed in diﬀerent conﬁgu-
ration parameters, e.g. the number of simulated users,
the frequency of user requests and so on, from a pre-
loaded CSV. JMeter submits these user requests to
the API Gateway. Upon the receipt of HTTP requests
at the API gateway of the framework, an instance of
each request is created and performance matrices are
initialised attached to it. Each request is validated for
valid parameters and the data is normalised into the
required structure.

• Request Pre-processing: Once the transaction pa-
rameters are retrieved from the requests, the API
gateway forwards these to the Transactions Handler
where an instance of the transaction is created and
the restructured data object is sent to the correspond-
ing transaction processor of the blockchain platform,
where the request is pre-processed as per the platform
requirements. This includes the creation of a signed
transaction instance that consists of the payload and
execution instructions.

Figure 2: Reference Implementation of BlockMeter

blockchain platform that is under test. The request is con-
verted into a transaction proposal and then submitted to the
corresponding transaction handler which pre-processes the
transaction for further processing as discussed in Section 4.3.
The Fabcar [42] (a baseline barebone application pro-
vided in the Hyperledger Fabric repository which performs
simple blockchain operations such as read, write and update)
application has been used as the basis for the Blockchain
Application that performs simple ledger operations like
create, read and update. For the Sawtooth platform, we
have developed a transaction processor similar to the Fabcar
application, so that we can compare the results under similar
testing scenarios. Several network conﬁgurations consisting
of single and multiple ordering and validating nodes have
been deployed using Docker so as to identify the variation
in performance with respect to diﬀerent network conﬁgura-
tions.

Ifteher Alom et al.

Page 8 of 16

Performance MonitorTransactions  HandlerFabric APISawtooth APIFabric Transaction  ProcessorSawtooth Transaction ProcessorPerformance DataHyperledger SawtoothBlockchainHyperledger Fabric BlockchainApplication using Hyperledger SawtoothSimple App Read/WriteData heavy/ CPU HeavyApplication using Hyperledger FabricSimple App Read/WriteData heavy/ CPU HeavyBlockMeter: An Application Agnostic Performance Measurement Framework For Private Blockchain Platforms

Figure 3: Protocol Flow

• Performance Monitoring: Once a transaction in-
stance is ready to be submitted to the blockchain, the
performance monitor is notiﬁed with a signal to start
recording performance matrices and the usage status
of docker containers/instances that are hosting the
blockchain network. Finally, the Performance Data
consisting of transaction latency, transaction through-
put and resource consumption are recorded in JSON
format into the ﬁle system. The records are then
normalised, reformatted and converted into tabular
format using NodeJS [45] which are then visually
analysed using python libraries.

• Transaction Response: After successfully passing
through all protocols and validation policies of the
blockchain network, a response is received at the
framework. At this stage, performance matrices for the
transaction instance is ﬁnalised and Apache JMeter is
responded with a success status code.

5. Experiments

To show the applicability of the developed performance
measurement framework, we have designed and carried out a
number of experiments. In this section we present the details
on various aspects of the experiments conducted using the
framework.

5.1. Experimental Setup

The principal motivation of the experiments is to show-
case how the developed framework can be utilised to gauge
the performance, in terms of throughput, latency and re-
source consumption, of diﬀerent private blockchain plat-
forms, Hyperledger Fabric and Sawtooth in this instance.

Towards this aim, we have conducted several experi-
ments and load testing by simulating some of the typical
use cases under varying testing conditions (like low and
high request traﬃc and number of operating nodes of the
blockchain platform). To conduct these experiemnts, our

system has been deployed in Amazon Web Services (AWS)
EC2 instances powered by 4 VCPUs and 16 Gigabytes of
RAM. The diﬀerent blockchain network conﬁgurations have
been initiated with various orderer nodes using docker in
AWS EC2 instances as well.

Every use case involves a streamlined ﬂow of opera-
tions (refer to Protocol Flow in section 4.3) that is initi-
ated/requested by the Apache JMeter in the experiment, fol-
lowed by a set of pre-processing at the framework and ﬁnally,
concluded by appending the transaction to a blockchain.
Next, we present a brief overview of the courses of actions
involved in this regard.

In order to demonstrate a comparison of the performance
matrices between the chosen blockchain platforms, we have
selected three diﬀerent types of applications that are exem-
plary to typical user applications.

• Simple Application: A simple key-value store that
stores certain values against unique IDs within the
blockchain. We have used the Fabcar application as
the simple application. This application performs op-
erations such as insert, update and delete on the data. It
is a representative of a typical read/write application.

• Data Heavy Application: This application handles
large amount of data in every transaction. It performs
read and write operation on records that are 10 Kilo-
bytes in size. For our experiment we have used a mod-
iﬁed version of the Fabcar application. It represents a
use case of a data intensive application.

• CPU Heavy Application: In this application we have
modiﬁed the chaincode to introduce a CPU intensive
task consisting of repeated arithmetic operations on
random numbers. Every transaction is constrained to
perform the mathematical operation before it comes to
completion. This is an example of a use case of a typ-
ical application that involves intensive computation.

These three applications represent three broad categories
of applications that may use blockchain in their backend

Ifteher Alom et al.

Page 9 of 16

A new instance of transactionis submitted to be pre-processedaccording the platform SDKTransactions HandlerPerformanceMonitorPerformance matricesinitializedBlockchain BasedApplication BackendHTTP Requests forwarded toa middleware that initiates anew transaction and startsperformance trackingAPI GatewayUser Traffic Simulatedand submitted asHTTP RequestsJMeterPerformanceDataPerformance data recordedin terms of latency, tps etc.Transaction submitted tothe blockchain-basedapplication backendTransaction ProcessorBlockMeter: An Application Agnostic Performance Measurement Framework For Private Blockchain Platforms

(a) Throughput vs Load

(b) Latency vs Load

(c) Memory usage: Orderer vs Peer

(d) Memory usage by number of nodes

Figure 4: Performance of Hyperledger Fabric

data validation and processing. These ﬁndings will give us
an insight on the performance of Hyperledger Fabric and
Hyperledger Sawtooth when use cases require handling of
some intense tasks.

In a nutshell, the procedure involved in a single round
of an experiment began by importing randomly generated
payload at Apache JMeter which was then translated into a
transaction and submitted to the blockchain platform while
tracing the performance in terms of latency, throughput
and resource consumption at the same time. For diﬀerent
scenarios, diﬀerent simultaneous cycles, rate of incoming
traﬃc or the load were varied steadily. For Hyperledger
Fabric, experiments began at 10 requests per second that
gradually was increased to 1000. For Hyperledger Sawtooth,
we began at 10 transactions per second (tps), but had to wind
up at 600 tps (details discussed in section 7). At the end of the
experiments the data recorded by the performance monitor
is represented using graphs to facilitate a comprehensive
performance analysis of the underlying platform.

5.2. Findings

In this section, we explore the overall performance of
Hyperledger Fabric and Hyperledger Sawtooth in terms of
throughput, latency and resource consumption under vary-
ing numbers of operating nodes (orderers and peers in Fabric
and validators and processors in Sawtooth).

Hyperledger Fabric: The performance results of the exper-
iments involving Hyperledger Fabric have been plotted in
Figure 4. An important observation from Figure 4a is that
the transaction throughput of Fabric has increased steadily
with increasing traﬃc. However, the trend levelled oﬀ and
began to decrease when the input traﬃc load crossed 600
per second. The increase in the number of operating nodes
(ordering service and peers) did result in an increase of the
throughput slightly for every single transaction load group.
The primary reason for such behaviour is that a typical
blockchain transaction has to ﬁlter through a number of
security policies and requirements before it is appended to
the main blockchain. This intricate secure mechanism of the

Ifteher Alom et al.

Page 10 of 16

01020304050601025501002004006008001000Throughput (per second)Transaction Load (per second)1 Orderer2 Orderers3 Orderers0.002.004.006.008.0010.0012.0014.0016.001025501002004006008001000Latency (in seconds)Transaction Load (per second)1 Orderer2 Orderers3 Orderers0501001502002501025501002004006008001000Memory Usage (in MB)Transaction Load (per second)OrdererPeer0501001502002503003504004505001025501002004006008001000Memory Usage (in MB)Transaction Load (per second)1 Orderer2 Orderers3 OrderersBlockMeter: An Application Agnostic Performance Measurement Framework For Private Blockchain Platforms

(a) Throughput vs Load

(b) Latency vs Load

(c) Memory usage: Validator vs Transaction Processor

(d) Memory usage by number of nodes

Figure 5: Performance of Hyperledger Sawtooth

blockchain system incurs a delay and backlog which results
in a comparatively lesser throughput under higher traﬃc.

The latency in the transaction response increases signif-
icantly as the number of transactions arriving per second in-
creases (Figure 4b). The situation did not improve even when
multiple ordering service and peer nodes are conﬁgured into
the network. The time in seconds clearly demonstrates that
we need more optimisation and improvement in the archi-
tecture of the Fabric platform. The complex architecture and
protocol ﬂow of Fabric system can be accounted for the
delayed response. Moreover, more operational nodes means
more synchronising overhead which may overrun the added
computation. However, there are several tweaks that we can
make: like setting the block-size and block creation timeout
that may improve the response time depending upon the
situation and type of application [13].

The memory usage increases as the number of trans-
actions arriving per second is increases as seen in Figure
4c. In Fabric, peer nodes consume more memory as they
perform signiﬁcant amount of tasks for validation as well

as store a copy of the blockchain. As a consequence its
memory consumption is higher and keeps growing as more
transactions are appended. Multiple ordering nodes further
increases the memory usage as seen in Figure 4d. However,
the numbers in megabytes are not signiﬁcant given the
availability of memory in modern computing devices.

Hyperledger Sawtooth: It can be observed from Figure
5a that transaction throughput has increased gradually with
increasing traﬃc. Also, multiple validating nodes lead to
a slight improvement in the throughput performance. Hy-
perledger Sawtooth uses a hardware dependent consensus
algorithm known as Proof of Elapsed Time (PoET) that re-
lies upon Software Guard Entension (SGX) capability of the
processor [46]. Intel SGX is a new type of Trusted Execution
Environment (TEE) integrated into the new generation of
Intel processors. SGX enables the execution of code within
a secure enclave inside the processor, whose validity can
be veriﬁed using a remote attestation process supported by
the SGX [47]. The working principle of PoET algorithm

Ifteher Alom et al.

Page 11 of 16

012345678102550100200400600Throughput (per second)Transaction Load (per second)1 Validator2 Validator3 Validator0.0010.0020.0030.0040.0050.0060.0070.0080.0090.00102550100200400600Latency (in seconds)Transaction Load (per second)1 Validator2 Validator3 Validator050100150200250102550100200400600Memory Usage (in MB)Transaction Load (per second)ValidatorTransaction Processor050100150200250300350400450500102550100200400600Memory Usage (in MB)Transaction Load (per second)1 Validator2 Validator3 ValidatorsBlockMeter: An Application Agnostic Performance Measurement Framework For Private Blockchain Platforms

(a) Throughput vs Load

(b) Latency vs Load

Figure 6: Hyperledger Fabric Application Performance

involves a leader election, waiting time, and SGX facility. As
a result the performance is poorer in comparison to Fabric
which uses Ordering Service and endorsement policies for
consensus.

In terms of transaction latency of Sawtooth, the graph
in Figure 5b shows that the response time increased signiﬁ-
cantly as the transaction load is increased. With the addition
of multiple validating nodes and transaction processors the
delay is improved slightly. However, the results reveal that
Sawtooth is way behind Hyperedger Fabric when it comes
to response latency. As highlighted earlier, the consensus
algorithm of Sawtooth and the underlying mechanism that is
reliant on SGX facility and leader election is the key reason
for such delayed transaction processing. More importantly,
this excessive backlog has accounted for almost a system
freeze when inbound traﬃc reached 800 requests per second
and higher.

With respect to the the memory usage, Sawtooth shows
a higher rate of memory consumption than Fabric. Figure 5c
illustrates that the memory usage increases almost steadily
as the transaction arrival rate is increased. Multiple validator
nodes further increase the resource availability and usage
(Figure 5d). In Sawtooth, transaction processors consumer
higher portion of the memory as it performs most of the
validation and stores a copy of the blockchain.

6. Comparison of Diﬀerent Applications

The comparative results of the application centric exper-
iments for Fabric and Sawtooth are plotted in Figure 6 and
Figure 7 respectively.

With respect to the throughput of Hyperledger Fab-
ric (Figure 6a), Simple application provides the maximum
throughput as expected. The CPU Heavy application gives
the minimum throughput and Data Heavy application shows
a slightly better output. As observed earlier in Section 5.2,
we can observe the throughput falling when input traﬃc

exceeds 600 transactions per second. As expected, in case
of latency (Figure 6b), CPU Heavy application has the
highest response delay, followed by Data Heavy application
and simple application. The CPU Heavy application be-
ing overwhelmed with intensive computation and the Data
Heavy application loaded with large size parameters, such
behaviours are understandable. What is striking though is
that these numbers might deter enterprise application devel-
opment where quicker response may be a key requirement.
On the other hand, Hyperledger Sawtooth has shown a
much deteriorating result in case of both throughput and
latency (Figure 7). Although throughput has increased grad-
ually with increasing traﬃc (Figure 7a), the latency has
increased drastically (Figure 7b). It can almost certainly be
said that applications at production environment require a
much better output for these areas of performance. It is
observed that Simple, Data Heavy and CPU Heavy with
increasing payload size and logical complexity respectively,
accounted for a slightly poorer performance. As discussed in
Section 5.2, the consensus algorithm of Sawtooth platform
is a major reason for this poor performance. It goes without
saying Sawtooth blockchain framework has a lot of scopes
for improvement in comparison to Fabric.

7. Discussion

As blockchain technology and its areas of applications in
the mainstream are being heavily contemplated, it is crucial
to have a methodology to eﬃciently measure its practicality
in terms of performance under various conditions. In the
course of our research we have realised that performance
measurement and analysis in the domain of blockchain, have
been primarily limited to public blockchain platforms like
Bitcoin [19] and Ethereum [6]. Very few research works have
considered private blockchain platforms and in them they
have compared private blockchain platforms with popular

Ifteher Alom et al.

Page 12 of 16

01020304050601025501002004006008001000Throughput (per second)Transaction Load (per second)SimpleData HeavyCPU Heavy01020304050601025501002004006008001000Latency (in seconds)Transaction Load (per second)SimpleData HeavyCPU HeavyBlockMeter: An Application Agnostic Performance Measurement Framework For Private Blockchain Platforms

(a) Throughput vs Load

(b) Latency vs Load

Figure 7: Hyperledger Sawtooth Application Performance

public blockchains, which is not very fruitful as the two sys-
tems function quite diﬀerently and are intended to dissimilar
audiences.

This article presents BlockMeter, an application agnostic
performance measurement framework for private blockchain
platforms. The application agnostic feature stems from the
idea that it is not coupled with any particular application.
Indeed, any blockchain application can utilise the framework
to measure and compare the performance of diﬀerent pri-
vate blockchain platforms for that particular application by
submitting/simulating user interactions via any load testing
software such as Apache JMeter. This has been possible as
our framework exposes diﬀerent APIs which act as the entry
point for outside applications to interact with the system. The
PoC that we have developed currently measures the perfor-
mance of Hyperledger Fabric and Hyperledger Sawtooth.

From the diﬀerent related work and analysis, it has
been found that the latency and throughput are the two key
decisive elements of performance in the ﬁeld of blockchain
applications. As such, we have focused more on these ma-
trices to determine the performance of the applications in
our experiments. With the advent of silicon chips, memory
and computing capability have sky rocketed in recent times.
In addition, power and energy consumption are directly
linked to resource usability and eﬃciency of a computer
system. Hence, we have also incorporated a resource usage
recording mechanism within BlockMeter, allowing us to
consider resource usage as a performance determiner. That is
why the throughput, latency and resource consumption have
been included as measurement matrices with our framework.

Advantages: To summarise, BlockMeter has the following
advantages:

• BlockMeter is capable of measuring performance ma-
trices like latency, throughput and resource usage
of an independently deployed blockchain application.

The recorded matrices are key indicators of the sys-
tem’s performance and can act as determining factors
of its applicability for a particular business applica-
tion.

• The performance framework can be easily integrated
with applications developed using Hyperledger Fabric
and Hyperledger Sawtooth platforms, The application
speciﬁc conﬁguration are minimal as the main execu-
tion system (i,e the blockchain and its conﬁguration)
is independent from the framework.

• Our tests have been conducted by hosting BlockMeter
and deploying the blockchain applications on Amazon
AWS EC2 [48] machines. This has helped us evaluate
the performance in a more realistic environment in
contrast to a controlled local test setting.

• BlockMeter has been designed in a modular fashion
that allows more blockchain platforms to be easily
integrated into it.

Comparative analysis: Next, we analyse how BlockMeter
fares in comparison to other relevant works discussed in
Section 3. The comparative analysis is summarised in Table
1 against a number of criteria. Table 2 highlights the key
points that give BlockMeter an upper hand over Caliper [36].
In the tables, the symbol ‘
’ has been used to denote a cer-
tain criteria is satisﬁed by the respective work whereas the
symbol ‘

’ indicates that a certain criteria is not satisﬁed.

(cid:32)

(cid:35)

As it can be seen from table 1, BlockMeter uses an API
based approach for ensuring that it is not tied to a particular
application, thus facilitating its application agnostic feature.
In contrast, the top level applications are tightly coupled in
most of the works. This means, signiﬁcant changes need to
be made whenever a new application is integrated within

Ifteher Alom et al.

Page 13 of 16

012345678102550100200400600Throughput (per second)Transaction Load (per second)SimpleData HeavyCPU Heavy0102030405060708090100102550100200400600Latency (in seconds)Transaction Load (per second)SimpleData HeavyCPU HeavyBlockMeter: An Application Agnostic Performance Measurement Framework For Private Blockchain Platforms

H. F. Leppelsack
[12]

Blockbench
[9]

S. Pongnumkul, et al.
[10]

P. Thakkar et al.
[13]

BlockMeter

Related Work

Architecture
Design

Blockchain
Platforms

Evaluation
Tool

Evaluation
Matrices

Application
Type

API Based
Modular
Framework
App. Agnostic

Fabric
Sawtooth

Caliper
Other

Latency
Throughput
Resource

Read/Write
Data Heavy
CPU Heavy

Testing
Environment

Web Service
Local Server

(cid:35)
(cid:35)
(cid:35)
(cid:35)

(cid:32)
(cid:35)

(cid:32)
(cid:35)

(cid:32)
(cid:32)
(cid:35)

(cid:32)
(cid:32)
(cid:32)

(cid:35)
(cid:32)

Table 1
Comparative analysis of existing works with BlockMeter

(cid:32)
(cid:32)
(cid:32)
(cid:35)

(cid:32)
(cid:35)

(cid:35)
(cid:32)

(cid:32)
(cid:32)
(cid:35)

(cid:32)
(cid:32)
(cid:32)

(cid:35)
(cid:32)

(cid:35)
(cid:35)
(cid:35)
(cid:35)

(cid:32)
(cid:35)

(cid:35)
(cid:32)

(cid:35)
(cid:32)
(cid:32)

(cid:32)
(cid:35)
(cid:35)

(cid:32)
(cid:35)

(cid:35)
(cid:35)
(cid:35)
(cid:35)

(cid:32)
(cid:35)

(cid:35)
(cid:32)

(cid:35)
(cid:32)
(cid:32)

(cid:32)
(cid:35)
(cid:35)

(cid:35)
(cid:32)

(cid:32)
(cid:32)
(cid:32)
(cid:32)

(cid:32)
(cid:32)

(cid:35)
(cid:32)

(cid:32)
(cid:32)
(cid:32)

(cid:32)
(cid:32)
(cid:32)

(cid:32)
(cid:35)

their systems. Also, BlockMeter provides a modular frame-
work, giving it the ﬂexibility to add additional blockchain
platforms easily. This is also absent in most of the works.

The evaluation matrices provide the key insights from
a performance evaluation framework. Most of the related
researches have focused only on latency and throughput
for their analysis while others also considered resource
consumption. However, BlockMeter is the only one which
considered all three evaluation matrices. BlockMeter also
considered three diﬀerent types of applications as per with
many works. BlockMeter is also equipped with a perfor-
mance monitoring mechanism that makes it self suﬃcient
for recording performance data, whereas most of the related
work had to rely on Caliper [36] or some other tools.

Also, most of the researches have been conducted
in local servers or controlled environments which elimi-
nates many overhead that arises in real life environments.
For example, some works deployed their implementations
within local servers. The BlockMeter framework and the
blockchain platforms have been deployed in AWS EC2 [48]
virtual machines via web service settings which allowed us
to perform the tests in a more realistic setting. Moreover,
some of the research have used Hyperledger Caliper [49]
or general load testing tools for the evaluation which limits
the scope of experiment as the target blockchain is deployed
internally by the testing tool itself, rather than a realistic and
independent externally deployed platform.

Next, we present a comparative analysis between Caliper
and BlockMeter. The result of the analysis is summarised in
Table 2 where the symbols denote the semantics discussed
previously. From the table, it can be observed that BlockMe-
ter provides a number of advantages and beneﬁts in compari-
son to Caliper [36]. To begin with, Caliper is designed with a

Feature

Caliper [36]

BlockMeter

Application agnostic
performance evaluation

API based load injection
and application testing

Loosely coupled modular
architecture

Scope for integrating other
blockchain platforms

Quick set-up and usability
with external application

Latency, throughput and
resource monitoring

Experimental data summary

Table 2
Caliper vs BlockMeter

(cid:35)

(cid:35)

(cid:35)

(cid:35)

(cid:35)

(cid:32)

(cid:32)

(cid:32)

(cid:32)

(cid:32)

(cid:32)

(cid:32)

(cid:32)

(cid:32)

much tightly-coupled layers of components that limit its ﬂex-
ibility to be modiﬁed and conﬁgured to speciﬁc needs for a
particular application. On the contrary, BlockMeter provides
a very modular architecture that enables anyone to easily
conﬁgure it for any application. Furthermore, BlockMeter
provides an API gateway for any application to interact with
the underlying blockchain framework, thus facilitating an
application agnostic performance evaluation. Also, unlike
Caliper, the components of BlockMeter are designed to
support easier integration with other blockchain platforms
beyond the Hyperledger project. However, BlockMeter and
Caliper have certain common aspects as well. Both are

Ifteher Alom et al.

Page 14 of 16

BlockMeter: An Application Agnostic Performance Measurement Framework For Private Blockchain Platforms

capable of monitoring similar performance matrices (la-
tency, throughput and resource usage) and generate tabular
summary based on the recorded experiment data.

Limitations: Our developed BlockMeter framework is ca-
pable of measuring crucial performance matrices of private
blockchain platforms, nevertheless, it has some limitations.

• The current implementation is limited to only two
private blockchain platforms, Hyperledger Fabric
and Hyperledger Sawtooth. There are other private
blockchain platforms emerging as well. However, we
have designed the framework in such a way that other
blockchains with similar architectural setup can be
easily integrated and we have plans for full-ﬂedged
support for other Hyperledger projects [24].

• Our existing implementation does not provide a cen-
tral dashboard with the summary of the executed tests.
An automated visual interface would be very helpful
for any end user to get primary insights of the test
results.

• Our implementation is generally focused on com-
parison and analysis of private blockchain platforms
with are more favourable for enterprise applications.
However, public blockchains are also being used by a
huge number of users. We would also like to explore
the possibility of adding a sub-module for crypto-
currency based blockchains to study and analyse their
performance.

8. Conclusion

Blockchain is a promising technology that aims to solve
many of the security and integrity issues of our traditional
data processing systems. However, this elegantly engineered
system is still under development phases. In recent times, a
great deal of interest has been observed within the academia
and industry which is a result of frequent research and
popularity of cryptocurrencies like Bitcoin and Ethereum.
As a result, a blockchain is being considered a viable
option in multiple application domains including govern-
ment, ﬁnance, telecommunications and others. One of the
major obstacles in the acceptability of blockchain is how
it might perform in diﬀerent application domains. Also,
how diﬀerent blockchain platforms would fair against each
other in a number of criteria. This is particularly true for
private blockchain platforms which require enterprise level
performances. In order to address this issue, in this article,
we have presented BlockMeter, an application agnostic per-
formance measurement framework that enables to compare
the performance of diﬀerent private blockchain platforms,
against some matrices, for any given application. We believe
that this research will be a foundation for many performance
evaluation tools. Such an evaluation tool could be an im-
portant component for many enterprises who are willing to
integrate their applications with a blockchain platform.

To show the applicability of our framework, we have
evaluated the performance of two popular private blockchain
platforms, Hyperledger Fabric and Hyperledger Sawtooth
under diﬀerent applications with diﬀerent conﬁguration pa-
rameters. From our experimental ﬁndings we have found
Hyperledger Fabric and Hyperledger Sawtooth to be capable
of handling complex computation and large data sets under
comparatively lower traﬃc. However, under a very high
request rate, Hyperledger Fabric has managed to deliver
to some extent while Hyperledger Sawtooth has its perfor-
mance degraded. This implicates that both of these platforms
might require signiﬁcant improvements to improve their
performance. It is to be noted that all the experiments have
been carried out under some default parameters (block-size:
10, batch timeout: 2s). These parameters could be tweaked to
achieve better optimisation and improved performance [13].
As of now, we have integrated support for two blockchain
platforms from the Hyperledger projects. We intend to in-
corporate other private blockchain platforms from the Hy-
perledger project and beyond and experiment with them to
understand how they would perform against each other. This
will enable us or anyone interested to compare a wide range
of private blockchain platforms for any given application.
During the period of the current project and experiments,
Hyperledger projects have also undergone several updates
and it will be interesting to see how these updates have
impacted their performance, if any.

Acknowledgement

This article is the results of the research project funded

by the AWS Cloud Credits for Research Program.

References
[1] Satoshi Nakamoto et al. Bitcoin: A peer-to-peer electronic cash

system. 2008.

[2] Md Sadek Ferdous, Mohammad Jabed Morshed Chowdhury, and
Mohammad A. Hoque. A survey of consensus algorithms in public
blockchain systems for crypto-currencies. Journal of Network and
Computer Applications, 182:103035, 2021.

[3] Mohammad Jabed Morshed Chowdhury, Md Sadek Ferdous, Ka-
manashis Biswas, Niaz Chowdhury, ASM Kayes, M Alazab, and Paul
Watters. A comparative analysis of distributed ledger technology
platforms. IEEE Access, 7(1):167930–167943, 2019.

[4] Mohammad Jabed Morshed Chowdhury, Md Sadek Ferdous, Ka-
manashis Biswas, Niaz Chowdhury, and Vallipuram Muthukku-
marasamy. A survey on blockchain-based platforms for iot use-cases.
The Knowledge Engineering Review, 35, 2020.

[5] Md Sadek Ferdous, Kamanashis Biswas, Mohammad Jabed Morshed
Chowdhury, Niaz Chowdhury, and Vallipuram Muthukkumarasamy.
In Advances in
Integrated platforms for blockchain enablement.
Computers, volume 115, pages 41–72. Elsevier, 2019.

[6] Ethereum.

[Online] Available at https://www.ethereum.org/. Ac-

cessed on: 2020-07-10.

[7] Algorand. Algorand developer docs.

[Online] Available at https:

//developer.algorand.org/docs/. Accessed on: 2021-12-27.

[8] Polkadot. Getting started.

[Online] Available at https://wiki.

polkadot.network/docs/getting-started. Accessed on: 2021-12-27.
[9] Tien Tuan Anh Dinh, Ji Wang, Gang Chen, Rui Liu, Beng Chin
Ooi, and Kian-Lee Tan. Blockbench: A framework for analyzing

Ifteher Alom et al.

Page 15 of 16

BlockMeter: An Application Agnostic Performance Measurement Framework For Private Blockchain Platforms

private blockchains. In Proceedings of the 2017 ACM International
Conference on Management of Data, pages 1085–1100. ACM, 2017.
[10] Suporn Pongnumkul, Chaiyaphum Siripanpornchana, and Suttipong
Thajchayapong. Performance analysis of private blockchain platforms
in varying workloads.
In 2017 26th International Conference on
Computer Communication and Networks (ICCCN), pages 1–6. IEEE,
2017.

[11] Linux Foundation. Case study: Hyperledger. [Online] Available at
https://www.linuxfoundation.org/tools/hyperledger/. Accessed on:
2021-12-27.

[12] Hendrik Folke Leppelsack. Experimental performance evaluation
of private distributed ledger implementations. Master’s thesis, De-
partment of Informatics, Technical University of Munich, 80333
München, Germany, 2018.

[13] Parth Thakkar, Senthil Nathan, and Balaji Viswanathan. Perfor-
mance benchmarking and optimizing hyperledger fabric blockchain
platform. In 2018 IEEE 26th International Symposium on Modeling,
Analysis, and Simulation of Computer and Telecommunication Sys-
tems (MASCOTS), pages 264–276. IEEE, 2018.

[14] Hyperledger Foundation. Hyperledger caliper. [Online] Available at
https://www.hyperledger.org/use/caliper. Accessed on 2022-01-05.
[15] Ifteher Alom, Romana Mahjabin Eshita, Anam Ibna Harun, Md Sadek
Ferdous, Mirza Kamrul Bashar Shuhan, Mohammad Jabed M Chowd-
hury, and Mohammad Shahidur Rahman. Dynamic management of
identity federations using blockchain.
In 2021 IEEE International
Conference on Blockchain and Cryptocurrency (ICBC), pages 1–9.
IEEE, 2021.

[16] Satoshi Nakamoto. Bitcoin: A peer-to-peer electronic cash system.

Technical report, Manubot, 2019.

[17] When and why was Bitcoin Created? Plus500, July 2021 2021.

Accessed: 2021-07-31.

[18] Blockonomi.

Permissioned vs permissionless blockchains:
[Online] Available at https:

Understanding the diﬀerences.
//blockonomi.com/permissioned-vs-permissionless-blockchains/.
Accessed on 2019-06-29.

[19] Bitcoin.

[Online] Available at https://www.bitcoin.org/. Accessed

on: 2020-07-10.

In Proceedings of the thirteenth EuroSys conference, pages 1–15,
2018.

[32] Hyperledger Fabric. Hyperledger fabric sdks.

[Online] Avail-
able at https://wiki.hyperledger.org/display/fabric/Hyperledger+
Fabric+SDKs Accessed on: 2022-01-05.

[33] Apache Software. Apache kafka.

[Online] Available at https://

kafka.apache.org/. Accessed on 2020-02-03.

[34] Hyperledger Sawtooth.

Overview.

[Online] Available at

[35] Wikipedia.

https://sawtooth.hyperledger.org/docs/core/releases/latest/
introduction.html#dynamic-consensus. Accessed on 2021-12-26.
Software guard extensions.

[Online] Avail-
able at https://en.wikipedia.org/wiki/Software_Guard_Extensions.
Accessed on 2020-01-27.

[36] Hyperledger Foundation. Hyperledger caliper.

[Online] Available
at https://hyperledger.github.io/caliper/v0.4.2/getting-started/.
Accessed on 2022-01-05.

[37] Riko Herwanto, Hari Sabita, and Fajrin Armawan. Measuring
throughput and latency distributed ledger technology: Hyperledger.
Journal of Information Technology Ampera, 2(1):17–31, 2021.
[38] Rajitha Yasaweerasinghelage, Mark Staples, and Ingo Weber. Predict-
ing latency of blockchain-based systems using architectural modelling
and simulation. In 2017 IEEE International Conference on Software
Architecture (ICSA), pages 253–256. IEEE, 2017.

[39] Vedran Juričić, Matea Radošević, and Ena Fuzul. Optimizing the
resource consumption of blockchain technology in business systems.
Business Systems Research: International journal of the Society for
Advancing Innovation and Research in Economy, 11(3):78–92, 2020.
[Online] Available
explained.

[40] IBM.
at
https://www.ibm.com/blogs/blockchain/2017/05/
the-difference-between-public-and-private-blockchain/. Accessed
on 2022-01-07.

Blockchain

[41] Express.js.

[Online] Available at https://www.expressjs.com/. Ac-

cessed on: 2020-07-10.

[42] Hyperledger Fabric. Understanding the fabcar network.

[On-
line] Available at https://hyperledger-fabric.readthedocs.io/en/
release-1.4/understand_fabcar_network.html. Accessed on 2019-07-
13.

[20] Hyperledger.

[Online] Available at https://www.hyperledger.org/.

[43] Apache Software. Apache jmeter.

[Online] Available at https:

Accessed on: 2020-07-10.
[21] Quorum. Quorum blockchain.

[Online] Available at https://www.

goquorum.com/. Accessed on: 2020-07-10.

[22] Hyperledger Fabric.

Introduction.

[Online] Available at https:

//hyperledger-fabric.readthedocs.io/en/release-1.2/whatis.html.
Accessed on 2019-06-29.

//jmeter.apache.org/. Accessed on 2019-07-13.
[44] The Apache Software Foundation. Projects lists.

[Online] Avail-
able at https://www.apache.org/index.html#projects-list. Accessed
on 2022-01-07.

[45] Node.js. [Online] Available at https://nodejs.org/en/. Accessed on:

2020-07-10.

[23] Hyperledger. About hyperledger. [Online] Available at https://www.

[46] Intel.

What

is intel sgx?

[Online] Available at https:

hyperledger.org/about. Accessed on 2019-06-29.

[25] Hyperledger Burrow.

[24] Investopedia. Hyperledger.

[Online] Available at https://www.
investopedia.com/terms/h/hyperledger.asp. Accessed on 2019-06-29.
[Online] Available at https:
//hyperledger.github.io/burrow/#/README. Accessed on 2021-12-26.
[Online] Available at
Introduction.

Introduction.

[26] Hyperledger Sawtooth.

https://sawtooth.hyperledger.org/docs/core/releases/1.0.0rc7/
introduction.html. Accessed on 2021-12-26.

[27] Investopedia.

of

elapsed

time

(cryptocurrency).

[Online] Available
proof-elapsed-time-cryptocurrency.asp. Accessed on 2020-02-03.

https://www.investopedia.com/terms/p/

Proof
at

//www.intel.com/content/www/us/en/architecture-and-technology/
software-guard-extensions.html Accessed on: 2021-10-20.

[47] Md Sadek Ferdous, Mohammad Jabed Morshed Chowdhury, Moham-
mad A Hoque, and Alan Colman. Blockchain consensus algorithms:
A survey. arXiv preprint arXiv:2001.07091, 2020.

[48] Amazon. Amazon ec2 features. [Online] Available at https://aws.

amazon.com/ec2/features/ Accessed on: 2021-10-20.

[49] Hyperledger Caliper. Architecture.

[Online] Available at https://
hyperledger.github.io/caliper/docs/2_Architecture.html. Accessed
on 2019-07-12.

[28] Hyperledger

Iroha.

[Online] Avail-
able at https://iroha.readthedocs.io/en/develop/overview.html. Ac-
cessed on 2021-12-26.

Dynamic consensus.

[29] Hyperledger Composer.

Introduction.

[Online] Available at

https://hyperledger.github.io/composer/latest/introduction/
introduction.html. Accessed on 2021-12-26.

[30] Hyperledger Foundation. Hyperledger fabric. [Online] Available at

https://www.hyperledger.org/use/fabric Accessed on: 2022-01-05.

[31] Elli Androulaki, Artem Barger, Vita Bortnikov, Christian Cachin,
Konstantinos Christidis, Angelo De Caro, David Enyeart, Christopher
Ferris, Gennady Laventman, Yacov Manevich, et al. Hyperledger
fabric: a distributed operating system for permissioned blockchains.

Ifteher Alom et al.

Page 16 of 16

