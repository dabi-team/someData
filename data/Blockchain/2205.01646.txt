Implementation of an eﬃcient, portable and platform-agnostic cryptocurrency mining
algorithm for Internet of Things devices

aSchool of Computer Science and Engineering, Vellore Institute of Technology, Chennai, Tamil Nadu, India

Kinshuk Duaa

2
2
0
2

y
a
M
3

]

R
C
.
s
c
[

1
v
6
4
6
1
0
.
5
0
2
2
:
v
i
X
r
a

Abstract

Recently, there has been a remarkable amount of research being done in both, the ﬁelds of Blockchain and Internet of Things
(IoT). Blockchain technology synergises well with IoT, solving key problems such as privacy, concerns with interoperability and
security. However, the consensus mechanisms that allows trustless parties to maintain an agreement, the same algorithms that
underpins cryptocurrency mining, are usually extremely computationally expensive, making implementation on low-power IoT
devices diﬃcult. More importantly, mining requires downloading and synchronizing hundred of gigabytes worth of blocks which is
far beyond the capabilities of most IoT devices. In this paper, we present an eﬃcient, portable and platform-agnostic cryptocurrency
mining algorithm using the Stratum protocol to avoid downloading the entire blockchain. We implement the algorithm in four
diﬀerent platforms- PC, ESP32, an emulator and an old PlayStation Portable (PSP) to demonstrate that it is indeed possible for
any device to mine cryptocurrencies with no assumptions except the ability to connect to the internet. To make sure of ease of
portability on any platform and for reproducibility of the reported results we make the implementation publicly available with
detailed instructions at: https://anonymous.4open.science/r/cryptominer.

Keywords: Bitcoin, Cryptocurrency, Blockchain, Internet of Things

1. Introduction

The concept of a decentralized, trustless digital currency
was ﬁrst described in 2008 by Satoshi Nakamoto, while the
source code of the ﬁrst implementation was released under an
open source license in 2009 [1, 2]. Even though over 6000 cryp-
tocurrencies [3] have been developed, Bitcoin ﬁrmly holds the
ground as the most used cryptocurrency. Bitcoin uses a proof
of work system to implement a distributed timestamp server on
a peer-to-peer basis. The distributed timestamp solves the core
issue of double-spending on a distributed ledger with no central
authority. A fundamental concept of Bitcoin and other simi-
lar cryptocurrencies that use proof-of-work consensus mecha-
nism is that ”work”, using computational power, required for
proof of work, must be done to ensure the reliability of the
blockchain which in turn creates the cryptocurrency as a re-
sult. This is known as mining and the devices that mine the
cryptocurrencies are known as miners. The ﬁrst block of a net-
work is known as the genesis block. In case of bitcoin it was
mined by Nakamoto who received 50 bitcoins as a reward, this
represented the ﬁrst ever Bitcoin or cryptocurrency transaction
[4]. The SHA-256 cryptographic hash function is used in the
proof of work system to generate the hash digest used for val-
idating the transactions and the blockchain [1]. The SHA-256
function is virtually found in all modern devices that connect to
the internet because a majority of the websites use HTTPS (Hy-
pertext Transfer Protocol Secure) which uses SSL/TLS which

Email address: kinshukdua@gmail.com (Kinshuk Dua)

in turn requires the SHA-256 cryptographic hash function. A
lot of old and low cost embedded IoT systems lack the neces-
sary pre-requisites (such as the C standard library) required to
work with existing SHA-256 libraries or do not have the abil-
ity to access the built in SHA-256 function used for the SSL
certiﬁcate. Furthermore, the libraries are developed to be cross-
platform which means that optimizations for the speciﬁc mi-
croproccessor used in the embedded system cannot be imple-
mented. Moreover, most IoT devices lack high capacity stor-
age needed to store the entire blockchain. This paper proposes
a SHA-256 based cryptocurrency mining algorithm using the
Stratum protocol used for combining the processing power of
multiple miners. Since Bitcoin is the most popular cryptocur-
rency with the most number of public pools available it was
chosen as the cryptocurrency to be mined and the rest of the pa-
per focuses on it, however the algorithm is portable and can be
used to mine any cryptocurrency with relatively little change.
For the implementation, we chose 4 diﬀerent platforms- an x64
PC, a PSP emulator, an old embedded device (Sony’s PlaySta-
tion Portable) as it is low powered, obsolete and has minimal
networking capabilities and ﬁnally an ESP32 a new low-cost
IoT device to show that any computing device capable of con-
necting to the internet (including IoT devices) can be converted
to a cryptocurrency miner.

2. Motivation

Cryptocurrencies have enjoyed unprecedented growth in the
past few years, more than one in ten Americans invested into

Preprint submitted to Elsevier

May 4, 2022

 
 
 
 
 
 
cryptocurrencies in the last year [5] and around 80% of people
in Asia were aware of cryptocurrencies in 2019 [6]. Recently,
China has launched a national cryptocurrency and the country
of El Salvador has even adopted Bitcoin as a legal tender. As we
move into a more digitized world, cryptocurrencies will become
even more widespread.

For cryptocurrencies that depend on the proof-of-work con-
sensus mechanism like Bitcoin, mining is of utmost importance
as it guarantees security, prevents tempering, conﬁrms trans-
actions and generates new currencies (Section 3.1). However,
mining is a computationally expensive task and usually requires
dedicated hardware. Moreover, the entire blockchain needs to
be replicated on all the nodes which requires hundreds of GBs
of storage and is therefore, not currently feasible or possible
in low powered IoT devices. We summarize our contributions
below-

1. To show that it is possible to run a mining algorithm on
any device connected to the internet. By showcasing an
eﬃcient implementation of the mining algorithm on a de-
vice not meant for cryptocurrency mining, We show that
it is possible to harness the computing power that might
otherwise go to waste. We can cluster multiple such min-
ers running on heterogeneous clients and then substitute
them in place of a high powered dedicated device. The
average person generates about 7.3 Kgs of e-waste in an
year, a lot of the times discarding perfectly functional de-
vices [7]. By reusing obsolete or unused devices not only
can we reduce the overall e-waste generated but also give
people an incentive to do so.

2. To showcase an algorithm for implementing consensus
mechanisms for blockchains on resource-constrained de-
vices. Blockchain solves a lot of problems faced by IoT
devices like privacy concerns and inadequate interoper-
ability by providing privacy, transparency, reliability and
security [8], however as noted above, it is diﬃcult or out-
right impossible to store the whole blockchain on the de-
vice thus making many solutions purely theoretical. We
show that it is indeed possible to implement blockchains
on IoT devices even if they don’t have enough storage or
built-in protocols for mining.

3. To improve security of small and/or private networks.
Private or small blockchain networks can beneﬁt hugely
from more devices and thus more computing power as
addition of more devices and thus more computing power
increases the security of the whole network. The algo-
rithm can even also be modiﬁed to run other internet based
distributed computations that require consensus mecha-
nisms.

4. To introduce the possibility that cryptocurrency mining
malware might target IoT devices seeing that there is now
a ﬁnancial motive to do so. Especially since, IoT devices
are known to be insecure and vulnerable to attacks[9].

5. When Proof of Stake (PoS) becomes commonplace it might

2

be worthwhile to use algorithm similar to ours on low-
power devices to restrict electricity cost.

3. Brief Review of Bitcoin mining

Because of the open source nature of Bitcoin, thousands of
new alternative cryptocurrencies have since popped up over the
years, each with its own separate client, consensus algorithm,
platform and mechanisms.
In this paper however, the focus
will only be on cryptocurrencies that use the SHA-256 proof of
work consensus mechanism. Even though only the bitcoin min-
ing algorithm is described here in detail, the algorithm can be
trivially modiﬁed to support most other cryptocurrencies which
use the SHA-256 proof of work algorithm.

3.1. The Bitcoin mining algorithm

Each bitcoin is deﬁned as a chain of digital signatures in
the form of transactions. The holder of the coin can transfer the
currency by digitally signing a hash of the last transaction along
with public key of the future owner of the coin and appending
the same to the end of the current chain of signatures. To ver-
ify the legitimacy of the coin, anyone can verify the chain of
signatures since all transactions are public in bitcoin.

To ensure that the previous owner of the coin didn’t already
transfer the coin in an earlier transaction (and thus to prevent
double spending) the hash of the block along with the times-
tamp is published to all the nodes of the bitcoin network. Each
timestamp includes all the previous timestamps to reinforce the
ones before it.

To implement the distributed timestamp server on the peer-
to-peer network, bitcoin uses the hashcash [10] proof of work
algorithm with SHA-256 being used as the cryptographic hash
function. The algorithm is a complex cryptographic puzzle with
the goal of getting the hash value less than the given target
value. First the timestamp and the hash of the previous block is
appended to the end of the transaction root and hashed. Then
a special number called nonce (short for ”number only used
once”) is appended to the newly generated hash and this whole
number is again hashed. This ﬁnal hash digest is compared
with the special number called the target value. If the hash is
less than or equal to the target then the block is said to be mined
and the miner is rewarded with a ﬁxed number of bitcoins. The
target is a 256-bit number that all miners on the networks share,
the target has a speciﬁc number of zeroes in front of it. Since
the SHA-256 is a cryptographic hash function, the only way
to make sure that the hash is less than or equal to the target
is to brute force the nonce, which means the average work re-
quired is exponential with respect to the leading zeroes in the
target. Although other methods instead of brute-forcing exist
such as the SAT solving [11], the average work required will
always remain exponential. To compensate for increasing hard-
ware speed and varying interest in running nodes over time, the
proof-of-work target is adjusted, it is determined by a moving
average targeting an average number of blocks per hour. If the
blocks are being mined too fast, the target value is decreased
[1].

3.2. The original Bitcoin client

The ﬁrst implementation of the bitcoin architecture described
by Satoshi Nakamoto was in the form of the open-source bitcoin-
client released in 2009, which used the OpenSSL library to Im-
plement the SHA-256 algorithm. The OpenSSL library is avail-
able as an open-source software with oﬃcial build instructions
for Windows, Android, DOS, OpenVMS and Unix-like plat-
forms. However the library has to be manually cross compiled
to the desired platform for it to work on a new hardware ar-
chitecture such as the MIPS microprocessor used in this paper
and even still there is no way to ensure compatibility without
painstakingly going through and rewriting thousands of lines of
codes. Starting with version 0.3.22 the ability to mine coins on
the original bitcoin client was removed [12]. This was done be-
cause at the time specialized mining clients were getting much
more eﬃcient, especially on dedicated hardware such as GPUs,
compared to the CPU mining capabilities that the original client
had [13].

3.3. GPU mining

Since mining consists of applying the same hash function
while iterating over the the nonce, the task is embarrassingly
parallel [14]. We can use methods like loop-unrolling and take
advantage of SIMD execution and run the computation in par-
allel on thousands of cores found in modern GPUs.

In less than an year after the release of the ﬁrst bitcoin
client, the mining capabilities found on the bitcoin client was
rendered obsolete because at the time the GPU miners were
over 100 times more eﬃcient than the CPU miner found on
the original client [13]. Presently even GPU mining is obsolete
since dedicated hardware like Field-programmable gate array
(FPGA) and later Application-speciﬁc integrated circuit (ASIC)
took over as the most eﬃcient (and only proﬁtable) way to mine
cryptocurrencies.

3.4. Pool Mining

As mining became increasingly mainstream, the diﬃculty
of the bitcoin network increased exponentially (Figure 1). This
was caused by massive increase in the total hash rate of the
network (Figure 2). Both the graphs look almost identical, if
we compare the total hash rate and the diﬃculty we can see that
the diﬃculty is directly proportional to the total hash rate of the
network (Figure 3).

The diﬃculty increases every 2016 blocks. The target is

related to the diﬃculty with the formula

diﬃculty = diﬃculty 1 target
Where ‘diﬃculty 1 target‘ is the target value of the genesis

target

block.

Even with expensive, extremely powerful and eﬃcient de-
vices it takes a very long time to generate a block. For example,
with the current diﬃculty of 13912524048946 it will take the
fastest commercially available ASIC miner with a hashrate of
100 TH/s around 19 years (Eq. 1) to mine one block.

13912524048946 × 232
100 · 1012 × 24 × 3600 × 365

≈ 18.95 years

(1)

3

Figure 1: The plot of the actual bitcoin network diﬃculty over time

Figure 2: Plot of the Total Network Hashrate (in TH/s) over time.

To ﬁx the volatility of the block rewards, user slush on a bitcoin
forum devised a mechanism for users to cluster their resources
because there was an overlap in hash calculations done by dif-
ferent users which led to wastage of computing power- ”...ev-
erybody counts sha256 hashes from the same range. Two sepa-
rate CPUs with 1000khash/s isn’t the same as one 2000khash/s
machine!”. This led to the creation of the ﬁrst Bitcoin mining
pool [15].

Even though the time to mine a block remains constant (≈
10 mins), the whole network is trying to mine that same block,
so the probability of a single miner, especially one with a low
hashrate, being successful is miniscule.

Soon thereafter pools became the primary way to mine bit-
coins, since mining pools guaranteed smaller but more frequent
rewards and thus were less volatile and more proﬁtable. Cur-
rently, mining pools account for an astonishing 93.2% of all
mining hashrate in the network [16].

3.4.1. Stratum Protocol

Most early pools worked on the ‘getwork‘ protocol imple-
mented in the oﬃcial bitcoin client [13, 15]. In 2012 in order to
solve the drawbacks of the then widely used ‘getwork‘ protocol,

201120132015201720192021Year0.00.51.01.52.0Difficulty1e13201120132015201720192021Year0.00.20.40.60.81.01.21.41.6Total Hash rate (TH/s)1e8Figure 3: Plot of Diﬃculty and Hashrate (in TH/s) based on data from 2009-
2021

Stratum was introduced. Stratum is a line-based protocol imple-
mented with TCP sockets, it uses JSON-RPC (JavaScript Ob-
ject Notation - Remote Procedure Call) to encode the messages
and provide a eﬃcient way to communicate between the server
and mining devices. It oﬀers better performance because it is
based on TCP in contrast to getwork which was based on HTTP
and had the associates overheads and uses long polling. Long
polling prevents idling of miners on network latency and scales
much better especially with fast miners [17]. Even though Stra-
tum is widely used it lacks a formal Bitcoin Improvement Pro-
posal (BIP) and hence has no oﬃcial speciﬁcation [18].

The Stratum Protocol has the following methods (each method

must be followed by a line break) :

(a) Client methods

Figure 4: Stratum protocol on ESP32

{"params": ["username", "jobid",
(cid:44)→

"extranonce2", "ntime", "nonce"], "id": 3,
"method": "mining.submit"}

1. mining.subscribe - subscribes the client for mining

(cid:44)→

job notiﬁcations

{"id": 1, "method": "mining.subscribe",
(cid:44)→

"params": ["User agent/Empty string",
"session id", "host pool address",
"port"]}

(cid:44)→

(cid:44)→

Response:

{"id": 1, "result": [ [
(cid:44)→

["mining.set_difficulty", "subscription id
1"], ["mining.notify", "subscription id
2"]], "extranonce2", "size of
extranonce2"], "error": null}

(cid:44)→

(cid:44)→

(cid:44)→

2. mining.authorize - authorizes the client with the given

credentials

{"id": 2, "method": "mining.authorize",
"params": ["username", "password"]}
(cid:44)→

Response:

{"error": null, "id": 2, "result": true}

3. mining.submit - submits the solution for the job

4

Response:

{"error": null, "id": 3, "result": true}

OR

{"id": 3, "result": null, "error": [21, "Job
(cid:44)→

not found", null]}

(b) Server methods

1. mining.notify - notiﬁes the workers about the job

"params": ["job_id", "previous hash",

{"id": null, "method": "mining.notify",
(cid:44)→
"start of coinbase",
"end of coinbase", ["merkle branch"],
"version", "encoded network difficulty",
(cid:44)→

"ntime", false]}

2. mining.set target - sets the diﬃculty for all the work-

sers from the next job onwards

{ "id": null, "method":
(cid:44)→

"mining.set_difficulty", "params": [2]}

0.00.20.40.60.81.01.21.4Total Hash rate (TH/s)1e80.000.250.500.751.001.251.501.752.00Difficulty1e134. Implementation

4.1. Hardware Speciﬁcation

The hashing algorithm is implemented on a variant of the
MIPS R4000 microprocessor and the communication via the
Stratum protocol is done using the Wi-Fi IEEE 802.11b com-
patible ARM9 processor.

MIPS R4000

The R4000 is a 64-bit, highly integrated RISC microproces-
sor based on the Microprocessor without Interlocked Pipelined
Stages (MIPS) Instruction Set Architecture with support for su-
perpipelining, ﬂoating point instructions [19]. The variant used
in this paper had a clock speed of 20-333 Mhz.

PlayStation Portable

The Sony PlayStation Portable (PSP) was a popular hand-
held game console. Originally released in 2004, the PSP was
equipped with the aforementioned R4000-based processor, 32
Megabytes of RAM (4 Megabytes of embedded DRAM), 4.2
inch TFT LCD with 480×272 pixel resolution and an ARM9
Processor with 802.11b Wi-Fi connectivity. In 2007, PSP-2000,
a revised version of the PSP was released which was thinner and
lighter but more importantly had double the system RAM (64
Megabytes) [20, 21]. The PSP supports multiple threads, but
because of the presence of only one core, it oﬀers no practical
improvement [22].

ESP32

ESP32 is a low-cost, low-power, general purpose, micro-
processor with integrated Bluetooth and Wi-Fi and no inbuilt
storage. It comes with a Xtensa dual-core 32-bit LX6 micro-
processor, operating at 160 or 240 MHz and 320 KiB RAM,
making it perfect for implementing the algorithm.

4.2. SHA-256

Two implementations of the SHA-256 algorithm were tested

1. A naive implementation adapted from [23].

2. A heavily optimised implementation adapted from CG-

miner [24].

4.3. Implementation Details

The code is largely self contained requiring no additional
libraries aside from the source code to make it truly portable
and platform independent. Only some low level functionalities
have to provided by the underlying platform.

1. Ability to exchange TCP messages

2. Run-time memory allocation

3. Basic Memory management (for concatenating bytes and

comparing string)

Since almost all IoT and embedded devices have these basic
abilities, we can run the proposed cryptocurrency mining algo-
rithm on them.

4.4. Algorithm

The algorithm consists of the following steps:

1. Connect to the mining pool and get mining jobs.

i. Connect to the Stratum pool server using a TCP

Socket.

ii. Call the mining.subscribe method to initialize a con-

nection with the pool server.
The server will return:

• Subscription ID for mining.set diﬃculty.
• Subscription ID for mining.notify.
• Hexcoded extranonce1.
• Size of extranonce2.

iii. Authorize the worker with mining.authorize method.

The result of the authorization is returned.

iv. Almost immediately after subscription, the miner

will start receiving mining job.
A mining job consists of:

• Job ID - Used for submitting the job.
• Previous hash.
• Initial part of the coinbase.
• Final part of the coinbase.
• Merkle branches - a list of pre-prepared hashes
of the transactions for generating merkle root.

• Encoded current network diﬃculty.
• ntime - Current time in Unix time format.
• Block version.
• Whether to discard all previous jobs.

2. Generate the blockheader for each job.

i. Generate a unique extranonce2 (of appropriate size)

for the given job.

ii. Build the coinbase transaction by concatenating ini-
tial part of the coinbase, extranonce1, extranonce2,
and ﬁnal part of the coinbase.

iii. Apply double SHA-256 on the coinbase transac-

tion.

iv. Set the coinbase transaction’s hash as the merkle

root.

v. For each hash in the list of pre-prepared hashes, ap-
pend the hash to the merkle root and take double
SHA-256. Set the output of the double SHA-256
digest as the new merkle root and repeat.

vi. Concatenate block version, previous hash, newly
generated merkle root in reverse order, ”current”
time, encoded network diﬃculty, ntime and store
it as the blockheader.

3. Mine a block by iterating the nonce.

i. Initialize the 32 bit nonce with zero.

5

ii. Append the nonce to the block header.
iii. Take the double SHA-256 of the block header.
iv. If the hash is smaller than or equal to the target,
submit the job along with the winning nonce and
extranonce2 to the server using the mining.submit
command.
The status of the submitted job is returned (accepted
or rejected).

v. Otherwise increment the nonce and repeat steps i.

through iv..

vi. If the nonce overﬂows, increment the extranonce2

and restart from step 2 to generate a new block header.

For the complete algorithm refer to Algorithm 1.

5. Experimental Results

Algorithm 1 The mining algorithm
(cid:46) + is concatenation operator
(cid:46) ++ is the increment operator
(cid:46) & is the Bitwise AND operator
(cid:46) (cid:29) is the Bitwise Shift Right operator
(cid:46) × is the multiplication operator
(cid:46) − is the subtraction operator
(cid:46) 0x implies that the number is represented in the Hexadeci-
mal notation
function getTarget(nCompact)
nSize ← nCompact (cid:29) 24
nWord ← nCompact & 0x007ﬀﬀf
if nSize ≤ 3 then

nWord ← nWord (cid:29) (8 × (3− nSize))

else

nWord ← nWord (cid:29) (8 × ( nSize −3))

We benchmarked the mining algorithm on four separate plat-

forms with diﬀerent conditions-

end if
return nWord

1. A modern 64-bit Processor

2. A PSP Emulator

3. A PSP-2000 system

4. An ESP32 Embedded system

For benchmarking purposes, we generated a fake blockheader
with a target of 0, thus making the target impossible to reach,
then we calculated the hash rate using the execution time for
diﬀerent number of iterations. The number of iterations were
doubled after each run.

5.1. 64-bit Processor

We ran the experiment on an Intel Core i5 8265U with 8 GB
of RAM. The benchmarking program was compiled using gcc
version 8.1.0 with no extra compiler ﬂags. Both the naive and
the optimized SHA-256 implementations were tested and com-
pared. The CPU utilization was around 28-29% for the duration
of the test, while the RAM utilization was 0.4 MB throughout.
The experiment was repeated 4 times. For some small number
of iterations, sometimes the execution times was recorded as 0
due to the execution being too fast, in those cases the values
were ignored for the average, if the value was 0 for all trials,
then the data point was removed.

The results of the test are tabulated in Table 1.
We plotted the the hash rate with respect to the the Log2 of
the number of iterations (Figure 5), since the number of itera-
tions were doubled after each run.

The average hashrate using naive algorithm was 162207.92
H/s, the maximum hashrate was 251567.33 H/s and the mini-
mum was 31000 H/s. For the optimized algorithm, the aver-
age hashrate was 346371.69 H/s, the maximum hashrate was
827329.16 H/s and the minimum was 15000 H/s. On average
the optimized algorithm was 2.17 times faster than the naive
approach. In the best case scenario the optimized algorithm ran
3.27 times faster. In the worst case scenario the performance
was equal.

end function
function doubleSHA2(message)

return SHA256(SHA256(message))

end function
sock ← TCP socket.connect(server address, port)
JobQueue
mining.subscribe(U seragent, session id, server address, port)
sid1, sid2, extranonce1, extranonce2 size ← sock.listen()
mining.authorize(username, password)
jobid, prevhash, coin1, coin2, merkle branch, nbits, ntime,
ver, discard ← sock.listen()
if discard then

JobQueue.empty()

end if
JobQueue.push( jobid)
extranonce2 ← random(extranonce2 size)
target ← getTarget(nbits)
repeat

coinbase ← coin1 + extranonce1 + extranonce2 + coin2
merkle root ← doubleSHA2(coinbase)
for each hash ∈ merkle branch do

merkle root ← doubleSHA2(merkle root + hash)

end for
blockheader = ver + prevhash + reverse(merkle root) +

ntime + nbits
nonce ← 0
for nonce ← 0 to 232 − 1 do

blockhash ← doubleSHA2(blockheader + nonce)
if blockhash ≤ target then

mining.submit(username, jobid, extranonce2, ntime, nonce)

break

end if

end for
extranonce2++
until blockhash ≤ target

6

Average Hashrate (H/s)

Naive

Optimized

-
31000.00
63000.00
105833.33
77916.67
115177.78
120720.09
251567.33
188053.53
214270.29
210652.88
194289.33
201467.11
202249.55
193006.37
195606.63
161461.30
166913.84
173939.69
190644.65
186388.04

15000.00
31000.00
63000.00
127000.00
255000.00
383250.00
253618.75
827329.16
374599.43
441157.30
383179.96
338385.94
369246.27
395596.56
369746.15
381831.79
377883.33
470727.05
468077.87
478027.26
470148.65

Number of
iterations

16
32
64
128
256
512
1024
2048
4096
8192
16384
32768
65536
131072
262144
524288
1048576
2097152
4194304
8388608
16777216

Table 1: Experimental Results on x64 processor

Figure 5: Results of Benchmark on PC

5.2. Emulator

We ran the experiment on the PPSSPP Emulator [25].
The results of the test are tabulated in Table 2.
The data follows the same general trends as the 64-bit pro-

cessor.

The average hashrate using naive algorithm was 3396.89
H/s, the maximum hashrate was 3585.86 H/s and the minimum
was 1834.86 H/s. For the optimized algorithm, the average
hashrate was 6915.08 H/s, the maximum hashrate was 8196.62
H/s and the minimum was 3676.47 H/s. On average the opti-
mized algorithm was 2.06 times faster than the naive approach.
In the best case scenario the optimized algorithm ran 3.02 times
faster. In the worst case scenario the performance was approxi-
mately equal.

The results were much more consistent, compared to the PC

run.

5.3. PSP-2000

We ran the experiment on PSP-2000 with the processor’s

clockspeed set to 333 Mhz.

The results of the test are tabulated in Table 3.
Once again data follows the same general trends as the 64-

bit processorand the emulator.

The average hashrate using naive algorithm was 3396.89
H/s, the maximum hashrate was 3585.86 H/s and the minimum
was 1834.86 H/s. For the optimized algorithm, the average
hashrate was 6915.08 H/s, the maximum hashrate was 8196.62

7

Figure 6: Results of Benchmark on the Emulator

H/s and the minimum was 3676.47 H/s. On average the opti-
mized algorithm was 2.06 times faster than the naive approach.
In the best case scenario the optimized algorithm ran 3.02 times
faster. In the worst case scenario the performance was approxi-
mately equal.

The results were even more consistent than the emulator.
The average hashrate was around 10% lower than the emulator
and around 50 times lower than the PC which is to be expected
since there is a huge power diﬀerence, not to mention that the
the microprocessor is almost 30 years old. However, for a pro-
cessor that came out 20 years before Bitcoin was even devel-
oped, the hashrate is higher than expected and might be useful
in certain scenarios.

5.4. ESP32

The results of the test are tabulated in Table 4.
The average hashrate using naive algorithm was 11200.67
H/s, the maximum hashrate was 11513.16 H/s and the mini-
mum was 7299.27 H/s. For the optimized algorithm, the av-
erage hashrate was 13316.56 H/s, the maximum hashrate was
13565.89 H/s and the minimum was 8928.57 H/s. On average
the optimized algorithm was 1.19 times faster than the naive
approach. In the best case scenario the optimized algorithm ran
1.36 times faster. In the worst case scenario the optimized al-
gorithm was 1.18 faster.

5.07.510.012.515.017.520.022.525.0Log(number of iterations)0100000200000300000400000500000600000700000800000HashrateNaive SHA-256Optimized SHA-2562.55.07.510.012.515.017.520.0Log(number of iterations)2000300040005000600070008000HashrateNaive SHA-256Optimized SHA-256Average Hashrate (H/s)

Number of
iterations

Naive

Optimized

2
4
8
16
32
64
128
256
512
1024
2048
4096
8192
16384
32768
65536
131072
262144
524288
1048576

3557.8614
1834.8624
2754.8209
3216.9118
3448.2759
3285.2904
3585.8615
3556.1280
3568.4299
3553.5466
3563.7149
3542.0495
3559.8976
3557.0436
3555.6086
3557.6478
3558.4293
3559.6915
3561.3188
3560.4792

3676.4706
5545.2865
6465.4857
6944.4444
7179.2497
6722.8684
7346.9860
7223.7960
7234.3739
8196.6233
7217.7598
7178.9208
7154.5116
7177.0398
7173.5082
7167.1899
7172.5261
7173.3474
7175.0318
7176.3186

Table 2: Experimental Results on the Emulator

Surprisingly the diﬀerence between the naive and the op-
timized was very small compared to all other platforms, the
results were consistent after the small disturbance in the start.
Even though the hardware is much newer it’s only about twice
as fast as the PSP-2000.

6. Conclusion

This research represents the ﬁrst published work in liter-
ature to mine traditional cryptocurrencies like Bitcoin on low-
power IoT devices without the need of connecting to an external
device. Our algorithm is platform independent and can be eas-
ily ported to most IoT systems, it makes no assumptions about
the hardware, including the support for the C standard library.
To illustrate this we implemented the algorithms on both an old
unsupported hardware and a modern low-cost IoT device. In
both cases we were successfuly able to mine Bitcoins as well
as connect to the Bitcoin blockchain. To make it as eﬃcient
as possible, we optimized the SHA-256 algorithm reaching al-
most twice the hashrate of the naive algorithm in most cases.
Results were very consistent, the PSP was able to reach a max-
imum hashrate of 8196.62 H/s while the ESP32 was able to
reach 13565.89 H/s. The source code is made publicly avail-
able with detailed instructions so that it can be ported to any
platform.

Average Hashrate (H/s)

Number of
iterations

Naive

Optimized

2
4
8
16
32
64
128
256
512
1024
2048
4096
8192
16384
32768
65536
131072
262144
524288
1048576

1615.5089
2461.0336
2887.7888
3099.8140
3174.2781
3243.9112
3271.6781
3283.3323
3292.1864
3294.9831
3297.2148
3297.9007
3298.3937
3298.7126
3298.7734
3298.8467
3298.8771
3298.8890
3298.8936
3298.8996

3003.0030
4622.4961
5464.4809
5870.8415
6079.6235
6119.4755
6205.7271
6223.9145
6244.5009
6255.1209
6253.5132
6259.0083
6259.5621
6260.1475
6260.4605
6260.6111
6260.6526
6260.6793
6260.7004
6260.7034

Table 3: Experimental Results on PSP-2000

Figure 7: Results of Benchmark on PSP-2000

8

2.55.07.510.012.515.017.520.0Log(number of iterations)20003000400050006000HashrateNaive SHA-256Optimized SHA-256Average Hashrate (H/s)

Number of
iterations

Naive

Optimized

2
4
8
16
32
64
128
256
512
1024
2048
4096
8192
16384
32768
65536
131072
262144
524288
1048576
2097152
4194304
8388608

7299.2701
9677.4194
11513.1579
11450.3817
11443.3370
11446.2209
11456.9238
11455.0110
11457.1422
11458.3333
11458.4791
11458.1351
11458.3158
11458.3100
11458.3271
11458.3237
11458.3330
11458.3316
11458.3334
11458.3332
11458.3334
11458.3333
11458.3333

8928.5714
13157.8947
13565.8915
13513.5135
13531.2091
13539.6518
13533.6743
13530.0048
13533.5558
13532.2830
13531.9160
13531.7774
13531.9093
13531.9417
13531.9132
13531.8738
13531.9002
13531.8868
13531.8983
13531.8967
13531.8944
13531.8934
13531.8922

Table 4: Experimental Results on ESP32

Figure 8: Results of Benchmark on ESP32

9

Figure 9: Comparison of all the implemented platforms

05101520Log(number of iterations)70008000900010000110001200013000HashrateNaive SHA-256Optimized SHA-25605101520Log(number of iterations)400060008000100001200014000HashrateEmulatorPSPESP32References

[1] S. Nakamoto, Bitcoin: A peer-to-peer electronic cash system, Decentral-

ized Business Review (2008) 21260.

[2] U. W. Chohan, A history of bitcoin, Available at SSRN 3047875 (2017).
[3] Coinmarketcap website (August 2021).
URL http://coinmarketcap.com/

[4] K. J. O’Dwyer, D. Malone, Bitcoin mining and its energy footprint

(2014).

[5] Norc amerispeak omnibus survey (June 2021).

https://www.norc.org/NewsEventsPublications/

URL
PressReleases/Pages/more-than-one-in-ten-americans-
surveyed-invest-in-cryptocurrencies.aspx

[6] Bnm-oecd* conference on ﬁnancial education and ﬁnancial consumer

protection in asia-paciﬁc (Dec 2019).
URL
malaysia-conference-presentations.pdf

https://www.oecd.org/financial/education/oecd-

[7] V. Forti, C. P. Balde, R. Kuehr, G. Bel, The global e-waste monitor 2020:

Quantities, ﬂows and the circular economy potential (2020).

[8] H.-N. Dai, Z. Zheng, Y. Zhang, Blockchain for internet of things: A sur-

vey, IEEE Internet of Things Journal 6 (5) (2019) 8076–8094.

[9] M. A. Khan, K. Salah, Iot security: Review, blockchain solutions, and
open challenges, Future generation computer systems 82 (2018) 395–411.

[10] A. Back, et al., Hashcash-a denial of service counter-measure (2002).
[11] N. T. Courtois, M. Grajek, R. Naik, Optimizing sha256 in bitcoin min-
ing, in: International Conference on Cryptography and Security Systems,
Springer, 2014, pp. 131–144.

[12] Bitcoin version 0.3.22 homepage (June 2011).

URL https://bitcoin.org/en/release/v0.3.22

[13] R. Skudnov, Bitcoin clients (2012).
[14] M. Vilim, H. Duwe, R. Kumar, Approximate bitcoin mining, in: 2016
53nd ACM/EDAC/IEEE Design Automation Conference (DAC), IEEE,
2016, pp. 1–6.

[15] First mention of pool mining (June 2010).

URL https://bitcointalk.org/index.php?topic=1976.0

[16] Bitcoin pool mining stats (August 2021).
URL https://btc.com/stats/pool

[17] Stratum v1 docs (2012).

URL https://braiins.com/stratum-v1/docs
[18] First mention of stratum protocol (September 2010).

URL https://bitcointalk.org/?topic=108533.0

[19] S. Mirapuri, M. Woodacre, N. Vasseghi, The mips r4000 processor, IEEE

Micro 12 (2) (1992) 10–22.

[20] M. Hachman, Sony psp new article (August 2004).

URL
details-psp-chip-specs

https://www.extremetech.com/extreme/56942-sony-

[21] S. Conrad, C. Rodriguez, C. Marberry, P. Craiger, Forensic analysis of the
sony playstation portable, in: IFIP International Conference on Digital
Forensics, Springer, 2009, pp. 119–129.

[22] Multithreading - psp development wiki (June 2017).

URL
Multithreading

https://en.wikibooks.org/wiki/PSP_Development/

[23] Sha-256 algorithm naive implementation (September 2021).

URL https://github.com/amosnier/sha-2

[24] Cgminer sha-256 implementation (November 2013).

URL
sha2.c

https://github.com/ckolivas/cgminer/blob/master/

[25] H. Rydgård, Ppsspp github repository (January).

URL https://github.com/hrydgard/ppsspp

10

