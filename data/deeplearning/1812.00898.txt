8
1
0
2

c
e
D
3

]

G
L
.
s
c
[

1
v
8
9
8
0
0
.
2
1
8
1
:
v
i
X
r
a

Generating Diverse Programs with Instruction
Conditioned Reinforced Adversarial Learning

Aishwarya Agrawal
Georgia Tech∗
aishwarya@gatech.edu

Mateusz Malinowski
DeepMind
mateuszm@google.com

Felix Hill
DeepMind
felixhill@google.com

Ali Eslami
DeepMind
aeslami@google.com

Oriol Vinyals
DeepMind
vinyals@google.com

Tejas Kulkarni
DeepMind
tkulkarni@google.com

Abstract

Advances in Deep Reinforcement Learning have led to agents that perform well
across a variety of sensory-motor domains. In this work, we study the setting in
which an agent must learn to generate programs for diverse scenes conditioned on
a given symbolic instruction. Final goals are speciﬁed to our agent via images of
the scenes. A symbolic instruction consistent with the goal images is used as the
conditioning input for our policies. Since a single instruction corresponds to a di-
verse set of different but still consistent end-goal images, the agent needs to learn
to generate a distribution over programs given an instruction. We demonstrate that
with simple changes to the reinforced adversarial learning [8] objective, we can
learn instruction conditioned policies to achieve the corresponding diverse set of
goals. Most importantly, our agent’s stochastic policy is shown to more accurately
capture the diversity in the goal distribution than a ﬁxed pixel-based reward func-
tion baseline. We demonstrate the efﬁcacy of our approach on two domains: (1)
drawing MNIST digits with a paint software conditioned on instructions and (2)
constructing scenes in a 3D editor that satisﬁes a certain instruction.

1

Introduction

Virtual worlds are being increasingly used to make advancements in deep reinforcement learning
research [8, 5, 7, 13]. However, these worlds are typically hand-designed, and therefore their con-
struction at scale is expensive. In this work, we build generative agents that output programs for
diverse scenes that can be used to create virtual worlds, conditioned on an instruction. Thus, with
a short text string, we can obtain a distribution over multiple diverse virtual scenes, each consistent
with the instruction. We experiment with two instruction-conditioned domains: (1) drawing MNIST
digits with a paint software, and (2) constructing scenes in a 3D editor; both are shown in Figure 1.

We build our agents on top of recently introduced reinforced adversarial learning framework [8],
where ﬁnal goals are speciﬁed to the agent via images of the virtual scenes. Unlike [8] where,
either random noise (unconditional generation) or the goal image (reconstruction) is used as the
conditioning input, in our work, a symbolic instruction is used as the conditioning input for our
policies. Since, a single instruction corresponds to a diverse set of, yet consistent goal images, the
agent needs to learn to generate a controlled distribution over programs such that all programs are
consistent with the instruction. A discriminator that takes an image (generated or an example goal
image) and the corresponding instruction acts as a reward learning function to provide training signal

∗This work was done while Aishwarya was interning at DeepMind.

Preprint. Work in progress.

 
 
 
 
 
 
Figure 1: We build agents that can generate programs for diverse scenes conditioned on a given
symbolic instruction. (a) Conditioned on a given instruction (e.g., “There is a small sphere”.), the
agent learns to generate programs for 3D scenes such that all scenes have a small sphere. We
can see that the generated scenes show diversity in unspeciﬁed attributes (color and location of the
sphere). (b) Conditioned on a simple instruction (e.g., “Draw zero”, “Paint 1”, etc.), the agent learns
to generate programs that draw the corresponding MNIST digits. We can see that the generated
drawings of a given label show diversity in style. (c) and (d): Results corresponding to (a) and (b)
respectively for the ﬁxed pixel-based reward function baseline. We can see that the scenes / drawings
rendered from the generated programs are either not consistent with the input instruction (c) or do
not show sufﬁcient diversity (d).

to the generator. Thus, the generator learns to generate the distribution of programs consistent with
the symbolic instruction. In particular, this setting leads to more accurate and more diverse programs
than hand-crafted discriminators such as L2-distance (in pixel space) between the generated and goal
images.

Language conditioned policies with adversarial reward induction has also been explored in [5].
However, [5] do not evaluate whether the agent is capable of capturing the diversity in the programs.
Moreover, we train our agents on more visually complex tasks involving 3D scenes.

Our work also draws inspiration from Visual Question Answering and Analysis-by-Synthesis:

Visual Question Answering. Visual question answering is a well-established subﬁeld of com-
puter vision that tests a machine’s understanding of vision, language, spatial arrangement of objects,
knowledge based and commonsense reasoning via question-answer pairs about images [22, 23, 9,
4, 2, 17, 1, 3]. Our work draws inspiration from this line of research, especially [17] by focusing
on similar aspects of the scene comprehension. However, in our work, the machine’s task is not to
generate an answer, but to generate a scene by sequentially generating programs. The latter involves
very different challenges (e.g., reward learning, modeling diversity in generated outputs, operating
in rich action space). (e.g., reward learning, modeling diversity in generated outputs, operating in
a rich action space). Finally, we also believe that architectures based on latent programs, or sim-
ulators are under-represented in the visual question answering community [22, 6, 18, 16, 24, 29]
even though they offer clear beneﬁts such as interpretability, compositionality, and can potentially
generalize better to new instances. This aspect of generalization has recently been recognized as one
of the major bottlenecks of the current state of affairs [3].

2

(a)(c)(b)(d)Analysis-by-Synthesis. Representing images or videos by latent programs has also shown promise
in learning meaningful representations of data [32, 26, 19, 20, 19, 22, 31, 8, 5]. Such frameworks not
only improve the interpretability of otherwise obscured decision making systems, but also have the
potential to generalize better to unseen data, owing to stronger inductive biases. For instance, [19]
use latent programs to infer novels poses of 3D objects, [31] show how to invert physical simulation
which in turn can be used for inferring objects’ dynamics, and [32] achieve the state-of-the-art on
the CLEVR visual question answering problem.

Contributions. We (1) extend the recently proposed reinforced adversarial learning framework
[8] to instruction conditioned policies, (2) present the experimental results on two instruction-
conditioned domains (drawing MNIST digits with a paint software and constructing scenes in a 3D
editor), and (3) show that the proposed setting leads to more accurate and more diverse programs
than a ﬁxed pixel-based reward function baseline.

2 Approach

Figure 2: An overview of our approach. Given an instruction the generator (policy network) outputs
a program which is rendered by a non-differentiable (denoted by dashed arrows) renderer into an im-
age. This process repeats for a ﬁxed number of time steps. The ﬁnal image is fed to a discriminator,
along with the instruction (the same that is given to the generator), that produces a reward.

Our goal is to train a generator agent G that is capable of generating programs for diverse scenes (x)
conditioned on an instruction q that are indistinguishable from the ground truth data samples pd(x|q).
Towards this goal, we frame our problem within the reinforcement adversarial learning setting [10,
25]. The generator is modeled by a recurrent policy network which, at every time step, takes a
symbolic instruction as input, and outputs a program which is executed by a renderer to produce
an image (Figure 2 shows the whole pipeline). For instance, if the instruction is “Draw zero”, the
generator uses the available painting tools (location, pressure, and brush size) to sequentially paint
the digit 0 on the canvas. Similarly, with the input “There is a red sphere” the generator manipulates
the scene by adding / changing objects so that the resulting scene has a red sphere. The role of
the discriminator D is to decide if the distribution over generated images given an instruction (pg)
follows the ground truth distribution of images given the instruction (pg ≈ pd).

Discriminator. To train the discriminator, we use LSTM [15] to transform the text instruction
into a ﬁxed-length vector representation. Using CNNs, we transform the input image into a spatial
Inspired by architectures used in visual question answering [21] and text-to-image Gen-
tensor.
erative Adversarial Networks [27], we concatenate each visual spatial vector with the replicated
LSTM vector, and process both modalities by 4 layers of 1-by-1 CNNs. These representations are
then summarized by a permutation-invariant sum-pooling operator followed by an MLP that pro-
duces a scalar score which is used as the reward for the generator agent (Figure 3a). We train the
discriminator by minimizing the minimax objective from [11]: LD = −Ex∼pd [log (D(x|q))] −
Ex∼pg [log (1 − D(x|q))] + R, where R denotes gradient penalty, gently enforcing Lipschitz conti-
nuity [12].

Generator. Generator’s goal is to generate programs that lead to scenes that match data distribution
pd(x|q). Here, programs are deﬁned as a sequence of commands a = (a1, a2, . . . , aN ). Every
command in this sequence is transformed into scenes through a domain-speciﬁc transformation T (·).
For instance, if T is a 3D renderer, and a is a program that describes a scene, T (a) is the image
created by executing the program by the renderer. The loss function for the generator is set up

3

Policy Network(Generator)Environment(Renderer)InstructionProgramFinalImageInstructionExample Goal ImageRewardDiscriminatorIntermediate ImageFigure 3: (a) Discriminator’s architecture. It takes as inputs the instruction and an image (either
the image generated by the agent or a goal image from the dataset), learns a joint embedding, and
outputs a scalar score evaluating the ‘realness’ of the input pair. (b) Policy Network’s architecture,
unrolled over time. At each time step, it takes – an instruction, the rendered image from the previous
time step (blank canvas initially) and the previous action, learns a joint embedding and passes it to
an LSTM whose output is fed to a decoder which samples the actions.
adversarially to that for D, i.e. LG = −Ex∼pg [D(x)]. Due to the non-differentiability of the
renderer, we train the network with the REINFORCE [30] and advantage actor-critic (A2C), LG =
− (cid:80)

t log π(at|st; θ) [Rt − V π(st)], following [8]. Figure 3b depicts the architecture.

3 Experiments

MNIST digit painting. We constructed a dataset consisting of simple, templated instructions
such as “Draw zero.”, “Paint 5.” etc. paired with random images for the corresponding MNIST
digit. Each instruction follows the template: < Action > < ClassLabel > with Action :=
Draw | P ut | P aint | Add | Create and < ClassLabel > is speciﬁed either numerically (‘0’)
or in word format (‘zero’). This dataset has 60K image-instruction pairs (one instruction per image)
in total. Following [8], we use the ‘libmypaint’ painting library as our rendering environment. The
agent produces a sequence of strokes on a canvas C using a brush. Each action involves predicting
5 discrete quantities – end point and control point of the brush (on 32 x 32 grid), pressure applied to
the brush (10 levels), brush size (4 levels) and a binary ﬂag to choose between producing a stroke
and skipping (not painting anything). So, the size of the action space is 83,886,080.

Figure 1b shows samples of MNIST digits painted by our agent when conditioned on the corre-
sponding instructions. We can see that the agent draws the correct digit most of the time and for
a given instruction, shows diversity in the generated samples, unlike the ﬁxed pixel-based reward
function baseline (L2) whose outputs do not show sufﬁcient diversity (Figure 1d). Moreover, the
baseline takes twice as much time as our agent before it starts generating MNIST-like images.

Quantitatively, to evaluate the correctness (whether the generated samples are consistent with the
instruction) and diversity (for a given instruction, whether the generated samples are diverse), we
report Inception Score [28] (a combined score of quality and diversity) and Fr´echet Inception Dis-
tance (FID) [14] (a measures of how close the generated image distribution is to the real image
distribution) for 1000 samples using a pretrained MNIST classiﬁer (Table 1). We can see that our
learned Discriminator outperforms the ﬁxed pixel-based reward baseline (L2).

3D scene construction. Inspired by CLEVR [17], we constructed a dataset consisting of images of
3D scenes and textual instructions. Each scene consists of a 3D object (cylinder, sphere, cube) of
varying sizes, colors that are placed at different locations on the 32 x 32 grid. The instructions are
generated using templates of the form “There is a < Attribute >< Shape >”, where attributes are
either colors (8 values) or sizes (2 values), and shapes are: cubes, spheres or cylinders. This dataset
has 32,318 image-instruction pairs in total. We use a 3D editor as our rendering environment.
The agent is provided with an empty scene and it adds objects sequentially. Each action involves

4

CNN1x1+MLP Previous actionCNNt-1tCNN++++CNN1x1+LSTMCNNCNN++++t+1There is a red sphere.LSTM(b)LSTMThere is a red sphere.MLP Previous actionLSTMDecoderDecoderLast StateNext StateRendererRendererat-1atCNNCNN1x1+MLP (a)There is a red sphere.LSTMscoreApproach
L2
Discriminator

MNIST Digit Painting
FID
Inception Score
283.5
1.22
259.7
1.39

3D Scene Construction
Correctness Diversity in Colors Diversity in Sizes

1.4
6.8

0.77
1.48

0.09
0.53

Table 1: Quantitative evaluation of Discriminator and L2 (in pixel space). The former outperforms
the latter on the two domains that we use in our experiments. Depending on the domain, we report
Inception Score, Correctness, Diversities – the higher the better, and FID – the lower the better.

predicting 5 discrete quantities – location of the object (on 32 x 32 grid), object shape, size and color
and a ﬂag to choose between adding a new object, changing the previously added object, or doing
nothing. So, the size of the action space is 147,456.

Figure 1(a) shows samples of scenes generated by our agent when conditioned on the corresponding
instructions. We can see that the generated scenes are consistent with the instruction and also show
diversity in the attribute of the object which is not mentioned in the instruction (e.g., diversity in
colors when the instruction is ‘There is a small sphere.’). The ﬁxed pixel-based reward function
baseline (L2) (Figure 1(c)), fails poorly in following the instruction.

Quantitatively, we evaluate the correctness and diversity for the unspeciﬁed attribute (for samples
which are correct) as reported in Table 1 for 10 samples for each instruction. Each sample is judged
as correct / incorrect based on human evaluation. For measuring the diversity, we compute the
entropy of the corresponding attribute distribution (number of correct samples for each of the 8
colors / 2 sizes). We can see that our learned Discriminator outperforms the L2 baseline.

Acknowledgments: The authors wish to acknowledge Igor Babuschkin, Caglar Gulcehre, Pushmeet
Kohli, Piotr Trochim, and Antonio Garcia for their advice in this project.

References

[1] Aishwarya Agrawal, Aniruddha Kembhavi, Dhruv Batra, and Devi Parikh. C-vqa: A compositional split

of the visual question answering (vqa) v1. 0 dataset. arXiv preprint arXiv:1704.08243, 2017.

[2] Aishwarya Agrawal, Jiasen Lu, Stanislaw Antol, Margaret Mitchell, C Lawrence Zitnick, Devi Parikh,
and Dhruv Batra. Vqa: Visual question answering. International Journal of Computer Vision, 123(1):
4–31, 2017.

[3] Aishwarya Agrawal, Dhruv Batra, Devi Parikh, and Aniruddha Kembhavi. Dont just assume; look and
answer: Overcoming priors for visual question answering. In Proceedings of the IEEE Conference on
Computer Vision and Pattern Recognition (CVPR), 2018.

[4] Stanislaw Antol, Aishwarya Agrawal, Jiasen Lu, Margaret Mitchell, Dhruv Batra, C Lawrence Zitnick,
and Devi Parikh. Vqa: Visual question answering. In Proceedings of the IEEE International Conference
on Computer Vision (ICCV), pp. 2425–2433, 2015.

[5] Dzmitry Bahdanau, Felix Hill, Jan Leike, Edward Hughes, Pushmeet Kohli, and Edward Grefen-
arXiv preprint

stette. Learning to follow language instructions with adversarial reward induction.
arXiv:1806.01946, 2018.

[6] Sreyasi Nag Chowdhury, Mateusz Malinowski, Andreas Bulling, and Mario Fritz. Contextual media
retrieval using natural language queries. ACM International Conference on Multimedia Retrieval (ICMR),
2016.

[7] Abhishek Das, Samyak Datta, Georgia Gkioxari, Stefan Lee, Devi Parikh, and Dhruv Batra. Embod-
In Proceedings of the IEEE Conference on Computer Vision and Pattern

ied Question Answering.
Recognition (CVPR), 2018.

[8] Yaroslav Ganin, Tejas Kulkarni, Igor Babuschkin, SM Eslami, and Oriol Vinyals. Synthesizing pro-
grams for images using reinforced adversarial learning. In Proceedings of the International Conference
on Machine Learning (ICML), 2018.

[9] Donald Geman, Stuart Geman, Neil Hallonquist, and Laurent Younes. Visual turing test for computer vi-
sion systems. Proceedings of the National Academy of Sciences of the United States of America (PNAS),
pp. 201422953, 2015.

[10] Ian Goodfellow, Jean Pouget-Abadie, Mehdi Mirza, Bing Xu, David Warde-Farley, Sherjil Ozair, Aaron
Courville, and Yoshua Bengio. Generative adversarial nets. In Advances in Neural Information Processing
Systems (NIPS), pp. 2672–2680, 2014.

5

[11] Ian J. Goodfellow, Jean Pouget-Abadie, Mehdi Mirza, Bing Xu, David Warde-Farley, Sherjil Ozair, Aaron

Courville, and Yoshua Bengio. Generative adversarial nets. In NIPS, 2014.

[12] Ishaan Gulrajani, Faruk Ahmed, Martin Arjovsky, Vincent Dumoulin, and Aaron C Courville. Improved
training of wasserstein gans. In Advances in Neural Information Processing Systems (NIPS), pp. 5767–
5777, 2017.

[13] Karl Moritz Hermann, Felix Hill, Simon Green, Fumin Wang, Ryan Faulkner, Hubert Soyer, David
Szepesvari, Wojciech Marian Czarnecki, Max Jaderberg, Denis Teplyashin, Marcus Wainwright, Chris
Apps, Demis Hassabis, and Phil Blunsom. Grounded language learning in a simulated 3d world. CoRR,
abs/1706.06551, 2017.

[14] Martin Heusel, Hubert Ramsauer, Thomas Unterthiner, Bernhard Nessler, G¨unter Klambauer, and Sepp
Hochreiter. Gans trained by a two time-scale update rule converge to a nash equilibrium. CoRR,
abs/1706.08500, 2017.

[15] Sepp Hochreiter and J¨urgen Schmidhuber. Long short-term memory. Neural computation, 9(8):1735–

1780, 1997.

[16] Ronghang Hu, Jacob Andreas, Marcus Rohrbach, Trevor Darrell, and Kate Saenko. Learning to reason:

End-to-end module networks for visual question answering. In ICCV, 2017.

[17] Justin Johnson, Bharath Hariharan, Laurens van der Maaten, Li Fei-Fei, C Lawrence Zitnick, and Ross
Girshick. Clevr: A diagnostic dataset for compositional language and elementary visual reasoning. In
Computer Vision and Pattern Recognition (CVPR), 2017 IEEE Conference on, pp. 1988–1997. IEEE,
2017.

[18] Justin Johnson, Bharath Hariharan, Laurens van der Maaten, Judy Hoffman, Li Fei-Fei, C Lawrence
Zitnick, and Ross B Girshick. Inferring and executing programs for visual reasoning. In Proceedings of
the IEEE International Conference on Computer Vision (ICCV), 2017.

[19] Tejas D Kulkarni, Pushmeet Kohli, Joshua B Tenenbaum, and Vikash Mansinghka. Picture: A probabilis-
tic programming language for scene perception. In Proceedings of the IEEE Conference on Computer
Vision and Pattern Recognition (CVPR), pp. 4390–4399, 2015.

[20] Tejas D Kulkarni, William F Whitney, Pushmeet Kohli, and Josh Tenenbaum. Deep convolutional inverse
graphics network. In Advances in Neural Information Processing Systems (NIPS), pp. 2539–2547, 2015.
[21] Mateusz Malinowski and Carl Doersch. The visual qa devil in the details: The impact of early fusion and

batch norm on clevr. arXiv preprint arXiv:1809.04482, 2018.

[22] Mateusz Malinowski and Mario Fritz. A multi-world approach to question answering about real-world
In Advances in Neural Information Processing Systems (NIPS), pp.

scenes based on uncertain input.
1682–1690, 2014.

[23] Mateusz Malinowski and Mario Fritz. Towards a visual turing challenge. arXiv preprint arXiv:1410.8027,

2014.

[24] David Mascharka, Philip Tran, Ryan Soklaski, and Arjun Majumdar. Transparency by design: Closing the
gap between performance and interpretability in visual reasoning. In Proceedings of the IEEE Conference
on Computer Vision and Pattern Recognition (CVPR), 2018.

[25] Volodymyr Mnih, Adria Puigdomenech Badia, Mehdi Mirza, Alex Graves, Timothy Lillicrap, Tim Harley,
David Silver, and Koray Kavukcuoglu. Asynchronous methods for deep reinforcement learning.
In
International conference on machine learning, pp. 1928–1937, 2016.

[26] Vinod Nair, Josh Susskind, and Geoffrey E Hinton. Analysis-by-synthesis by learning to invert generative
black boxes. In International Conference on Artiﬁcial Neural Networks (ICANN), pp. 971–981. Springer,
2008.

[27] Scott E. Reed, Zeynep Akata, Xinchen Yan, Lajanugen Logeswaran, Bernt Schiele, and Honglak Lee.

Generative adversarial text to image synthesis. CoRR, abs/1605.05396, 2016.

[28] Tim Salimans, Ian J. Goodfellow, Wojciech Zaremba, Vicki Cheung, Alec Radford, and Xi Chen. Im-

proved techniques for training gans. CoRR, abs/1606.03498, 2016.

[29] Misha Wagner, Hector Basevi, Rakshith Shetty, Wenbin Li, Mateusz Malinowski, Mario Fritz, and Ales
Leonardis. Answering visual what-if questions: From actions to predicted scene descriptions. arXiv
preprint arXiv:1809.03707, 2018.

[30] Ronald J Williams. Simple statistical gradient-following algorithms for connectionist reinforcement learn-

ing. Machine learning, 8(3-4):229–256, 1992.

[31] Jiajun Wu, Erika Lu, Pushmeet Kohli, Bill Freeman, and Josh Tenenbaum. Learning to see physics via
visual de-animation. In Advances in Neural Information Processing Systems (NIPS), pp. 153–164, 2017.
[32] Kexin Yi, Jiajun Wu, Chuang Gan, Antonio Torralba, Pushmeet Kohli, and Joshua B Tenenbaum.
Neural-symbolic vqa: Disentangling reasoning from vision and language understanding. arXiv preprint
arXiv:1810.02338, 2018.

6

