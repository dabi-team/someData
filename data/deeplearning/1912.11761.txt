0
2
0
2

v
o
N
6
2

]
T
S
.
n
i
f
-
q
[

8
v
1
6
7
1
1
.
2
1
9
1
:
v
i
X
r
a

Alpha Discovery Neural Network, the Special Fountain of
Financial Trading Signals

Jie Fang*
Tsinghua Shenzhen International
Graduate School
Shenzhen, China
fangx18@mails.tsinghua.edu.cn

Zhikang Xia
Tsinghua Shenzhen International
Graduate School
Shenzhen, China
xzk19@mails.tsinghua.edu.cn

Shutao Xia†
Tsinghua Shenzhen International
Graduate School
Shenzhen, China
xiast@sz.tsinghua.edu.cn

Xiang Liu
Tsinghua Shenzhen International
Graduate School
Shenzhen, China
liuxiang19@mails.tsinghua.edu.cn

Jianwu Lin
Tsinghua Shenzhen International
Graduate School
Shenzhen, China
lin.jianwu@sz.tsinghua.edu.cn

Yong Jiang
Tsinghua Shenzhen International
Graduate School
Shenzhen, China
jiangy@sz.tsinghua.edu.cn

ABSTRACT
Genetic programming (GP) is the state-of-the-art in financial auto-
mated feature construction task. It employs reverse polish expression
to represent features and then conducts the evolution process. How-
ever, with the development of deep learning, more powerful feature
extraction tools are available. This paper proposes Alpha Discovery
Neural Network (ADNN), a tailored neural network structure which
can automatically construct diversified financial technical indicators
based on prior knowledge. We mainly made three contributions.
First, we use domain knowledge in quantitative trading to design the
sampling rules and object function. Second, pre-training and model
pruning has been used to replace genetic programming, because
it can conduct more efficient evolution process. Third, the feature
extractors in ADNN can be replaced by different feature extractors
and produce different functions. The experiment results show that
ADNN can construct more informative and diversified features than
GP, which can effectively enriches the current factor pool. The fully-
connected network and recurrent network are better at extracting
information from the financial time series than the convolution neu-
ral network. In real practice, features constructed by ADNN can
always improve multi-factor strategies′ revenue, sharpe ratio, and
max draw-down, compared with the investment strategies without
these factors.

CCS CONCEPTS
• Applied computing → Economics; • Computing methodologies
→ Machine learning algorithms.

*First Author
†Corresponding Author

Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
KDD-MLF-2020, August 24, 2020, San Diego, CA, USA
© 2020 Association for Computing Machinery.

KEYWORDS
Automated Financial Feature Construction, Genetic Programming,
Deep Neural Network, Quantitative Trading, Evolution Process

ACM Reference Format:
Jie Fang, Shutao Xia, Jianwu Lin, Zhikang Xia, Xiang Liu, and Yong Jiang.
2020. Alpha Discovery Neural Network, the Special Fountain of Financial
Trading Signals. In Proceedings of KDD-MLF-2020. ACM, San Diego, CA,
USA, 8 pages.

INTRODUCTION

1
In quantitative trading, predicting the future return of stocks is one
of the most important and challenging tasks. Various factors can be
used to predict the future return of stocks. Such as the history price,
volume and company′s financial data, etc. Normally, researchers
define the features constructed from price and volume as technical
indicators, the features constructed from the company′s financial
data as fundamental data. On this task, various famous multi-factor
models have been proposed, and many classical technical and fun-
damental factors have been constructed. For example, Fama-French
Three-Factor Model [6] leverages three important factors that can
provide the majority of information to explain the stock return. Later
on, there are Fama-French Five Factor Model [7], and many other
factors constructed by human experts. However, there are two short-
comings. First, it′s very expensive to hire human experts. Second, a
human can′t construct some nonlinear features from high dimension
data. Thus, both academic researchers and institutional investors
have paid more and more attention to automated financial feature
construction task [23].

Feature construction is a process that discovers the relationships
between features, and augments the space of features by inferring or
creating new features. In this process, new features can be generated
from a combination of existing features [21]. A more straightforward
description is that the algorithms use operators, hyper-parameters
and existing features to construct a new feature. Sometimes both
feature construction and feature selection can be merged together
in one procedure. These methods consist of the wrapper, filtering,
and embedded [3]. Filtering is easy but achieves poor performance;
it utilizes only some criteria to choose a feature and sometimes it

 
 
 
 
 
 
KDD-MLF-2020, August 24, 2020, San Diego, CA, USA

Jie Fang, Shutao Xia, Jianwu Lin, Zhikang Xia, Xiang Liu, and Yong Jiang

can help us to monitor the feature construction process. Wrapper
performs well by directly applying the model′s results as an object
function. Thus, it can treat an individually trained model as a newly
constructed feature. However, a considerable amount of computa-
tional resources and time are required. Embedded is a method that
uses generalized factors and a pruning technique to select or com-
bine features, which serves as a middle choice between filtering and
wrapper. The most well-known and frequently employed automated
feature construction method is Genetic Programming (GP), which
is a kind of wrapper method that reverses polish expression to rep-
resent features and then simulates the evolution process. However,
different domains require different object functions, and the input
data′s data structure may differ [16]. Thus, it′s very important to
do this task within a specific domain. This method has been shown
to work well in many industries, such as object detection [17], fi-
nance [24], and database management [29]. However, the drawback
of the method is that the constructed formulas are very similar and
may cause co-linearity. In the financial feature construction task,
the benchmark is genetic programming algorithm. It uses genetic
programming to conduct the evolution process of formulaic fac-
tors [1] [27]. WorldQuant [15] made public 101 formulaic alpha
factors, which are also constructed by using this method. However,
this method didn′t produce diversified features. The constructed
features are similar, and they didn′t contain a very high level of
information.

With the development of deep learning, more and more researchers
begin to use the neural network to extract features from raw data and
then add a fully-connected layer to reshape the feature′s output. Sim-
ilarly, a trained model represents a newly constructed feature. Yang
Zhong [30] leverages it on pattern recognition tasks, he employs
a CNN model to construct facial descriptors, and this method pro-
duces features that have considerably more information than the past
method. K Shan [25] conducts experiments on this task and employs
a deeper and wider convolution neural network. Hidasi B [12] uses
a recurrent neural network to pre-locate the feature-rich region and
successfully constructs more purified features. In a text classification
task, Botsis T [2] leverages recurrent neural networks to build a rule-
based classifier among text data, in which each classifier represents
a part of the text. S Lai [18] proposes a network structure that uses
both a recurrent neural network and a convolution neural network to
extract text information. With the help of a neural network′s strong
fitting ability, we can produce highly informative features by tailor-
ing the network structure for different industries. In financial feature
construction tasks, researchers have begun to use a neural network
to give an embedding representation of financial time series. More
specifically, Fuli Feng [8] leverages LSTM to embedding various
stock time series, and then uses adversarial training to make a binary
classification on stock′s future return. Leonardo [22] adopts well
designed LSTM to extract features from unstructured news data, and
then form a continuous embedding. The experiment result shows
that these unstructured data can provide much information and they
are very helpful for event-driven trading. Zhige Li [? ] leverages
a Skip-gram architecture to learn stock embedding inspired by a
valuable knowledge repository formed by fund manager′s collective
investment behaviors. This embedding can better represent the dif-
ferent affinities over technical indicators. With a similar idea, we
use a neural network to give a brief embedding of long financial

time series. This embedding can help to summarize the most im-
portant information in the high dimension data. Different from the
previous work, we mainly make three contributions in this paper.
First, we strictly design the sampling rules. All the stocks on the
same trading day are regarded as one batch, which meets economic
principles. Second, we didn′t simply use the stock return to serve
as object function, but we use the spearman coefficient of stock′s
return and stock′s feature value to serve as object function. We are
the first to use this object function in neural network and we also
have fixed its un-derivable problem. Third, we adopt pre-training and
model pruning to add up enough diversity into our constructed fea-
tures, which helps this system to produce more diversified features
than the benchmark. In this paper, we proposed a novel network
structure called ADNN, which is tailored for stock time series. This
framework can use different deep neural networks to automatically
construct financial factors. ADNN has outperformed the benchmark
on this task, from the perspective of all frequently compared indi-
cators. What′s more, we find some interesting differences between
different feature extractors on this task, and we conduct experiments
to comprehend them.

2 ALGORITHM INTRODUCTION
2.1 Benchmark
In quantitative trading, investors commonly construct factors, and
regard these factors as trading signals. In automated financial feature
construction task, what we want is to let a algorithm to automatically
construct new factors, to determine the variable, operator and hyper-
parameters.

The benchmark on this task is GP. It uses a reverse polish expres-
sion to represent the feature′s formula and then leverages binary tree
to store its explicit expression. In each training iteration, researchers
leverage GP to conduct the evolution process. This evolution pro-
cess includes merging different formulas, cutting some parts of the
formula and changing some parts of the formula, etc. The training
process is shown in Figure 1.

Figure 1: This is the GP′s evolution process. Each tree represent
a formulaic factors, and the right tree will get survived accord-
ing to the object function.

As shown in Figure 1, researchers add diversity into the con-
structed features by changing a part of the reverse polish expression.
For example, we have a frequently used factor 1, shown in formula 1.

Alpha Discovery Neural Network, the Special Fountain of Financial Trading Signals

KDD-MLF-2020, August 24, 2020, San Diego, CA, USA

And then we make a small change on factor 1, in order to construct
a new factor, shown in formula 2.

𝐹𝑎𝑐𝑡𝑜𝑟 1 =

𝐹𝑎𝑐𝑡𝑜𝑟 2 =

ℎ𝑖𝑔ℎ 𝑝𝑟𝑖𝑐𝑒 − 𝑙𝑜𝑤 𝑝𝑟𝑖𝑐𝑒
𝑣𝑜𝑙𝑢𝑚𝑒.𝑠ℎ𝑖 𝑓 𝑡 (1)
ℎ𝑖𝑔ℎ 𝑝𝑟𝑖𝑐𝑒 − 𝑣𝑜𝑙𝑢𝑚𝑒
𝑣𝑜𝑙𝑢𝑚𝑒.𝑠ℎ𝑖 𝑓 𝑡 (1)

(1)

(2)

Factor 1 means the relative strength of price compared with vol-
ume, which has economic meaning. However, factor 2 is totally
different from factor1, and it is really hard to explain. Because in
this algorithm, the parent factor and child factor have little in com-
mon. The parent factor has high IC, but the child factor may not
successfully inherent the good characteristics from its parent factor.
As a result, we think GP is not a good method to construct new
factors, due to its low efficient evolution process on this task.

2.2 Alpha Discovery Neural Network
The network structure of the ADNN is shown in Figure 2. The major
contributions of this novel network structure includes 1). ADNN
uses Spearman Correlation to serve as a loss function, which mimics
human practices of quantitative investment. And the sampling rules
also meet economic principle. 2). A meaningful derivable kennel
function is proposed to replace the un-derivable operator 𝑟𝑎𝑛𝑘 ().
3). We use pre-training and pruning to replace the GP′s evolution
process, which is more efficient.

Figure 2: Alpha discovery neural network′s structure.

As shown in Figure 2, in each back-propagation, ADNN randomly
samples 𝐷 trading days′ data, and then calculate the Spearman
Coefficient of factor value and factor return in each trading day. 𝐷
should be larger than 3, and taking 𝐷 trading day′s information into
account can help the neural network to get a more stable convergence.
Quantitative investors care more about the relative strength of each
stock on the same trading day, rather than its absolute strength.
Thus, doing calculation in each trading day and using the Spearman
Coefficient to serve as loss function is reasonable.

In each batch, we assume that there are 𝑚 stocks that belong to
this trading day. The input tensor′s shape is (𝑚, 5, 𝑛), because there
are 𝑚 samples, and 5 types of time series, which is the open price,
high price, low price, close price, and volume. Each time series′
input length is 𝑛. We also name the output tensor as factor value,

with shape (𝑚, 1). The factor return tensor′s shape is (𝑚, 1), which
means the revenue that we can earn from this asset for a long period
of time. The length of the holding time is 𝑎. Here, we assume that all
the feature extractors in Figure 2 are Multi-layer Perceptron (MLP),
which is easy for us to give a general mathematics description. In
the experiment part, we will show the experiment results based on
more complicated and diversified feature extractors. 𝑤𝑖 means the
kernel matrix in 𝑖 𝑡ℎ layer, 𝑏𝑖 means the bias matrix in 𝑖 𝑡ℎ layer, 𝑎𝑖
means the activate function in 𝑖 𝑡ℎ layer, and there will be 𝑝 layers
in total.

𝑥 = 𝑙𝑝 = 𝑎𝑝 (𝑤𝑝
𝑙1 = 𝑎1 (𝑤1

𝑇 𝐼𝑛𝑝𝑢𝑡 + 𝑏1).

𝑇 𝑙𝑝−1 + 𝑏𝑝 ),

𝑦 = 𝐹𝑎𝑐𝑡𝑜𝑟 𝑅𝑒𝑡𝑢𝑟𝑛 =

𝑐𝑙𝑜𝑠𝑒 𝑝𝑟𝑖𝑐𝑒𝑡 +𝑎
𝑐𝑙𝑜𝑠𝑒 𝑝𝑟𝑖𝑐𝑒𝑡

− 1

(3)

(4)

We apply a Spearman Correlation to calculate the correlation
between a factor value and a factor return. This setting can help us
to obtain powerful features that are suitable to forecast the future
stock return. And this setting also makes our batch size and sampling
rules become meaningful. Only the data belongs to the same trading
day, should be involved in the same batch. However, Spearman
Correlation uses operator rank() to gid rid of some anomalies in
financial time series. Rank() is not derivable, which is not acceptable
for the neural network. Thus, we use a derivable kernel function g(x)
to replace rank().

𝑔(𝑥) =

1
1 + 𝑒𝑥𝑝 (−𝑝 ∗

𝑥− ¯𝑥
2∗𝑠𝑡𝑑 (𝑥) )

(5)

≤

As shown in formula 5, at first, it projects x into a normal distri-
bution which is zero-centralized. Next, it uses a hyper-parameter p
to make sure that the 2.5%-97.5% of data should lay in the range
between [𝑚𝑒𝑎𝑛 − 2𝑠𝑡𝑑, 𝑚𝑒𝑎𝑛 + 2𝑠𝑡𝑑]. Thus, p equals to 1.83. we
can get p=1.83. For example, one out-lier 𝑥𝑖 = ¯𝑥 + 2𝑠𝑡𝑑 (𝑥), and
𝑔 (𝑥𝑖 )−𝑔 ( ¯𝑥)
𝑥𝑖 − ¯𝑥
¯𝑥 , so the result is 𝑠𝑡𝑑 ≤ 0.362 ¯𝑥. It means if one
𝑔 ( ¯𝑥)
distribution′s standard deviation is large, and it is larger than 0.362 ¯𝑥,
the g(x) can shorten the distance between outliers and the central
point. If the distribution′s standard deviation is very small, g(x) will
make it worse. However, even in this case, we can make sure that
95% of the points are between [𝑚𝑒𝑎𝑛 − 2𝑠𝑡𝑑, 𝑚𝑒𝑎𝑛 + 2𝑠𝑡𝑑], which is
acceptable. The final object function is defined in formula 6, where
E(x) represents the expected value of x, ¯𝑥 represents the average
value of x. And in each batch, we calculate the average value from 𝑞
trading days, which can make the optimization process more stable.

𝐼𝐶 (𝑥, 𝑦) =

𝐸 (𝑔(𝑥) − ¯𝑔(𝑥), 𝑔(𝑦) − ¯𝑔(𝑦))
𝐸 (𝑔(𝑥) − ¯𝑔(𝑥))𝐸 (𝑔(𝑦) − ¯𝑔(𝑦)))

,

𝐿𝑜𝑠𝑠 = −

1
𝑞

𝑞
∑︁

𝑖=1

𝐼𝐶 (𝑥𝑖, 𝑦𝑖 ).

(6)

2.3 Put prior knowledge into network
Combining with model stealing [14] and pruning on input data
can improve the signal′s diversity. Model stealing means that if
the input 𝑥 and the output 𝑦 are known, our network can obtain a
suitable parameter 𝑤 to fit this projection. However, this technique

KDD-MLF-2020, August 24, 2020, San Diego, CA, USA

Jie Fang, Shutao Xia, Jianwu Lin, Zhikang Xia, Xiang Liu, and Yong Jiang

is not always helpful to learn a distribution without tailoring the
network structure. If we have a fixed network structure, and we
have no idea about the target distribution, the techniques such as
removing the outliers, will be very helpful for the continuous prior
knowledge. Using high-temperature T also works for the discrete
prior knowledge.

Pre-training uses 𝑓 (𝑥) = 𝑎(𝑤𝑇 𝑥 + 𝑏) to embed the input data
(the data is embedded by MLP (Several fully-connected layers with
tanh and relu activation functions. The number of neural in each
layer should be decided by the length of input time series), 𝑤 means
kernel matrix, 𝑏 means bias matrix, 𝑎 means activation function) and
then use this embedded layer to mimic the prior knowledge. In this
part, we use the mean squared error as the object function.

arg min
𝑎,𝑏,𝑤

1
𝑛

𝑁
∑︁

𝑖=1

(𝑦𝑖 − 𝑓 (𝑥𝑖 ))2

(7)

Almost all technical indicators can be easily learned by using
MLP. Here, MSE or MAE can′t represent the real pre-training per-
formance, because all factor values are really small, which makes
all MSE value very small. In order to have a better measurement
𝑦𝑖 −𝑓 (𝑥𝑖 )
of the performance, 1
| is used to measure its error
𝑦𝑖
𝑛
rate. Some classical technical indicators, such as MA, EMA, MACD,
RSI, BOLL, and other typical financial descriptors are selected as
prior knowledge for pre-training, shown in Table 1.

𝑖=1 |

(cid:205)𝑁

Table 1: Here are the formula of some classical technical indi-
cators and financial descriptors. They serve as prior knowledge
for ADNN. Close refers to stock close price, volume refers to
stock volume, and AdjClose refers to adjusted close price.

Technical Indicator Mathematical Expression
𝑥𝑛−𝑘

(cid:205)𝑁

MA
EMA
MACD

PVT

TOP10

DC

BOLL

𝑘=0

𝑘=0

(cid:205)∞

𝑀𝐴10
𝑀𝐴10𝑡𝑜𝑝10%

𝑀𝐴𝑁 (𝑥𝑛) = 1
𝑁
( 𝑁 −1
𝑁 +1 )𝑘𝑥𝑛−𝑘
𝐸𝑀𝐴𝑁 (𝑥𝑛) = 2
𝑁 +1
𝑀𝐴𝐶𝐷 = 𝐸𝑀𝐴𝑚 (𝑖) − 𝐸𝑀𝐴𝑛 (𝑖)
𝑃𝑉𝑇 (𝑖) = 𝑃𝑉𝑇 (𝑖 − 1) + 𝑣𝑜𝑙𝑢𝑚𝑒 (𝑖)∗
(𝑐𝑙𝑜𝑠𝑒 (𝑖) − 𝑐𝑙𝑜𝑠𝑒 (𝑖 − 1))/𝑐𝑙𝑜𝑠𝑒 (𝑖 − 1)
𝑀𝐴10 = 𝑀𝐴 (𝐶𝑙𝑜𝑠𝑒, 10)
𝑇𝑂𝑃10 =
− 1
𝐻 = 𝑀𝐴 (𝐻𝑖𝑔ℎ × 𝐴𝑑 𝑗𝐶𝑙𝑜𝑠𝑒/𝐶𝑙𝑜𝑠𝑒, 𝑛)
𝐿 = 𝑀𝐴 (𝐿𝑜𝑤 × 𝐴𝑑 𝑗𝐶𝑙𝑜𝑠𝑒/𝐶𝑙𝑜𝑠𝑒, 𝑛)
𝑀 = 1
2 (𝐻 + 𝐿)
𝐷𝐶 = 𝐴𝑑 𝑗𝐶𝑙𝑜𝑠𝑒/𝑀
𝑆𝑡𝑑𝑉 = 𝑀𝑆𝑡𝑑𝑣 (𝐶𝑙𝑜𝑠𝑒, 𝑛)
𝑀𝑒𝑎𝑛 = 𝑀𝐴 (𝐶𝑙𝑜𝑠𝑒, 𝑛)
𝐿𝐵 = 𝑀𝑒𝑎𝑛 − 𝑆𝑡𝑑𝑣
𝐵𝐵𝐿 = 𝐿𝐵
𝐶𝑙𝑜𝑠𝑒
𝑀𝑆𝑡𝑑𝑣𝑛,𝑡 = 𝑆𝑡𝑑𝑣 (𝐶𝑙𝑜𝑠𝑒𝑡 −𝑛:𝑡 )

Why is pre-train with prior knowledge needed? Because knowl-
edge is the source of diversity, we should keep it. According to the
concept of Muti-task Learning, pre-training can keep some part of
the domain knowledge in the network. In order to keep more diver-
sity after the pre-training process, pruning is needed. Permanently
pruning the useless elements in the embedding matrix can help us to
keep the diversity, and filter out noisy signals from prior knowledge.
High pruning rate will lose too much information, but low-level
pruning rate is hard to keep the diversity. The ideal pruning rate
should be about 0.2-0.5, which means 20%-50% of the elements in
the mask matrix should be 0. All the setting is the same as [9], and
here are more explanations. After embedding the data as f(x), we get
its parameter matrix 𝑤. Then we create a mask matrix 𝑚 to prune the
parameters. For example, 𝑤𝑖 𝑗 in the parameter matrix is relatively
small, which means this element is useless, and we should set 𝑚𝑖 𝑗 =0
to prune it. If the 𝑤𝑖 𝑗 is not useless, then we set 𝑚𝑖 𝑗 =1. This method
can help us to further keep the diversity in the neural network, and let
the network focus on improving the current situation. The pruning
process is shown in formula 8, here 𝑚 ∗ 𝑤 means the Hadamard
Product.

(8)

𝑓 (𝑥) = (𝑚 ∗ 𝑤)T𝑥 + 𝑏
After pre-training and pruning the network, we use the object
function shown in formula 6 to train ADNN. We simply reshape
the input data into a picture. And then we use the Saliency Map to
look at how the raw data contribute to the final constructed factor.
The training process is shown in Figure 3, the y-axis is [open price,
high price, low price, close price, volume], the x-axis is the length
of input time series.

Figure 3: How ADNN leads the prior knowledge to become a
better technical indicator. ADNN can adjust the raw data′s con-
tribution according to the objective function, and make it better
compared with its initial state.

Some descriptors with different parameters such as DC(5) and
DC(15) will be regarded as different prior knowledge because they
have given enough diversity to ADNN. The testing error rate of
pre-training these factors, shown in Table 1, is 0.081 ± 0.035. We
think this error rate is acceptable, and it can bring enough diversity
into the network.

Prior knowledge performs like a seed, which is the source of
diversity in this system. Although the features constructed by ADNN
is not explicit, and it′s hard to explain, compared with GP. However,
there are some strong points of ADNN. As mentioned above, ADNN
can conduct a more efficient evolution process. After warming up
the system, we can know how many differences have been put into

Alpha Discovery Neural Network, the Special Fountain of Financial Trading Signals

KDD-MLF-2020, August 24, 2020, San Diego, CA, USA

the constructed factors. Second, although we can′t fully understand
its formular, we at least know that whether this factor is momentum
or reverse. For example, 𝑐𝑙𝑜𝑠𝑒 [𝑡] − 𝑐𝑙𝑜𝑠𝑒 [𝑡 − 1] is a momentum
factor, but 𝑐𝑙𝑜𝑠𝑒 [𝑡 − 1] − 𝑐𝑙𝑜𝑠𝑒 [𝑡] is a reverse factor. Third, unlike
the traditional factors, whose raw data′s contribution is discrete. The
raw data′s contribution in ADNN is continuous, which helps it to
extract high dimension information. Human experts can′t construct
factors by extracting high dimension data, this huge differences can
help to avoid factors crowding. After all, the trading opportunities is
limited, people can′t share the same trading signals. [10].

We conduct experiments on different feature extractors. There are
two motivations to conduct experiments on different feature extrac-
tors. First, different feature extractors require different input data′s
data structure. After performing a literature review and consulting
professional experts in the market, we discover many different ways
to organize the input data. However, none of them can prove that
their structure is the best. Thus, experiments on these structures
should be performed. The second motivation is that different ex-
tractors have their own strong comings and short comings. Some of
them aim at extracting temporal information but the others aim at
spatial information. Some of them designed for a long time series,
but some of them are designed for quick training. We think all these
differences can make our factor pool more diversified.

3 EXPERIMENTS
3.1 Experiment setting
We use daily trading data in the Chinese A-share stock market (in the
following part, we call it A-share market data), including the daily
open price, high price, low price, close price and trading volume, in
the past 30 trading days. The raw data is standardized by using its
time-series mean and standard deviation in the training set. Both the
mean and standard deviation are calculated from the training set. We
attempt to use these inputs to predict the stock return in the next 5
trading days (using 3-15 trading days is recommended). Moreover,
we should obey the market policy when we form a trading strategy.
We have done a lot of experiments to select reasonable hyper-
parameters. For each experiment, 250 trading days serve as the
training set, the following 30 trading days serve as the validation
set, and the following 90 trading days serve as the testing set. The
constructed factors can keep high IC during the next 90 trading days.
Most importantly, we want to stress a counter-intuitive setting. The
training period should be no longer than 250 trading days because
financial features are non-stationary. If we request a feature that can
work well for a very long period of time, then we will only find this
feature in the over-fitting situation. Thus, we design a rolling forecast
structure that we will automatically find powerful features for each
trading day. Each automatically constructed features will have their
own highlight time on this trading day. What′s more, these factors
not only work well on this single day. Actually, his performance can
last several trading days, with a moderate decay.

To make a fair comparison, the same setting is deployed for the
GP algorithm. This algorithm′s logic references relative work [27]
and [1]. Besides, the input data′s period and type should be the same.
In this paper, we analyze the construed features′ performance from
different perspectives. Normally, institutional investors use Informa-
tion Coefficient (IC), shown in formula 6, to measure how much

information carried by a feature. For diversity, the cross-entropy is
used to measure the distance between two different features′ distri-
butions on the same trading day.

𝐷𝑖𝑠𝑡𝑎𝑛𝑐𝑒 (𝑓1, 𝑓2) =

∑︁ 𝑠𝑜 𝑓 𝑡𝑚𝑎𝑥 (𝑓1)𝑙𝑜𝑔

1
𝑠𝑜 𝑓 𝑡𝑚𝑎𝑥 (𝑓2)

(9)

In formula 9, 𝑓1 and 𝑓2 refers to different features′ distribution
in the same trading day. The softmax function can help us get rid
of the effect from scale without losing its rank information. And
k-means is used to cluster the distance matrix of this relative distance
between two features. The average distance between each cluster
center refers to the diversity of this algorithm on this trading day.
Besides measurements of IC and diversity, the performance of a
trading strategy based on the constructed features are also measured,
such as absolute return, max-drawdown [5], and sharp-ratio [26]. Ba-
sically, all these indicators are really important to assess a feature′s
performance.

3.2 Beat the state-of-the-art technique
The network structure shown in Figure 2 can equip ADNN with
different deep neural networks. In order to show the general situa-
tion, we equip ADNN with 4 fully-connected layers. Each layer has
128 neural, tanh activate function, L2 Regularization, and dropout
technic. This general and simple setting is enough to beat the GP.
We put forward three schemes help to show how ADNN beat the
GP. Only GP means only using genetic programming, Only ADNN
means only use ADNN to construct factors, GP&ADNN means use
GP′s value to initialize ADNN and then construct factors. All the ex-
periments are conducted out of the sample, and we have summarized
it in Table 2.

Table 2: The performance of different schemes.

Object
Only GP
GP&ADNN
Only ADNN

Information Coefficient Diversity

0.094
0.122
0.107

17.21
25.44
21.65

As shown in table 2, Only ADNN is better than Only GP, which
means ADNN outperforms GP on this task. And we also find that
GP&ADNN is the best, it means that our method can even improve
the performance of GP.

In real practice, we should leverage the constructed factors to
form a multi-factor strategy and compare its performance with GP.
The specific strategy setting is same as section 3.4, and we have
repeated this experiment on different periods of time. The long-term
backtest result is shown in Table 3, Only ADNN always has better
performance than the Only GP. It shows that ADNN has also beaten
the SOTA in real practice. Similar to the conculsions made above,
if we combine these two methods together, the combined factors′
strategy has the best performance in backtesting.

All the results shown above is based on the most basic feature
extractors. So will there be more powerful feature extractors to
discover knowledge from financial time series? And what is the
suitable input data structure for financial time series?

KDD-MLF-2020, August 24, 2020, San Diego, CA, USA

Jie Fang, Shutao Xia, Jianwu Lin, Zhikang Xia, Xiang Liu, and Yong Jiang

Table 3: Strategy′s absolute return for each scheme.

Time
Train:2015.01-2015.12
Test: 2016.02-2016.03
Train:2016.01-2016.12
Test: 2017.02-2017.03
Train:2017.01-2017.12
Test: 2018.02-2018.03
Train:2018.01-2018.12
Test: 2019.02-2019.03

Only GP GP&ADNN Only ADNN

ZZ500

+2.59%

+5.74%

+4.52%

+1.67%

+5.40%

+10.26%

+8.33%

+2.53%

-5.27%

-4.95%

-4.16%

-6.98%

+13.00%

+15.62%

+15.41%

+13.75%

3.3 Comparing different feature extractors
All experiments are conducted in the same setting mentioned in sec-
tion 3.1, and the results are summarized after generating 50 features.
For the hardware equipment, we use 20 g GPU (NVIDIA 1080Ti)
and 786 g CPU (Intel Xeon E5-2680 v2, 10 cores). Based on this
setting, we show the amount of time that we need to train 50 neural
networks. Moreover, the time to restore 50 trained networks and
obtain their feature values will be substantially faster than traditional
features. Because most traditional features are constructed with com-
plicated explicit formulas, these formulas are not suitable for matrix
computing. Using neural networks to represent features in matrix
computing, which can have a faster testing speed.

Table 4: The higher are the information coefficient (IC) and
diversity, the better is their performance. Normally, a good
feature′s long-term IC should be higher than 0.05, but it can-
not be higher than 0.2 in an A-share market.

Type
Baseline
Vanilla

Spatial

Temporal

Network
GP
FCN
Le-net
Resnet-50
LSTM
TCN

0.072
0.124
0.123
0.108
0.170
0.105
Transformer 0.111

IC Diversity
17.532
22.151
20.194
21.403
24.469
21.139
25.257

Time
0.215 hours
0.785 hours
1.365 hours
3.450 hours
1.300 hours
2.725 hours
4.151 hours

Shown in Table 4, basically, all neural networks can produce more
diversified features than using GP. But temporal extractors are espe-
cially better at producing diversified features, such as LSTM [13]
and Transformer [28]. As for TCN [19], the author who put forward
this network structure proves its ability to capture the temporal rules
buried in data. However, there is a huge difference. TCN relies on a
convolution neural network, but LSTM and Transformer still contain
recurrent neural networks (Normally, the transformer uses a recur-
rent neural network to embedded the input data). The existence of a
recurrent neural network structure may contribute to the difference
in diversity. For Le-net [20] and Resnet [11], they don′t provide us
with more informative features. It looks like that the convolution
network structure is not suitable to extract information from the
financial time series.

3.4 Real-world use case
In real practice, we combines traditional factors and the factors
constructed by ADNN to form a quantitative investment strategy.
What we want is to see if ADNN can enrich the factor pool and
improve the traditional multi-factor strategy.

We form a frequently used multi-factors strategy to test its perfor-
mance in the real case. In the training set, the sample whose return
ranked in the top 30% in each trading day is labeled as 1 and the
sample whose return ranked in the last 30% of each trading day is la-
beled as 0. We abandon the remaining samples in the training set [6].
After training these features with XGBoost [4] using binary logis-
tics mode, the prediction result reflects the odds that this stock has
outstanding performance in the following 5 trading days. It defines
the 50 features constructed by human experts as PK 50, the features
constructed by ADNN as New 50, and the features constructed by
both GP and PK as GP-PK 50. In separate experiments, we use
XGBoost to pre-train both PK 50 and New 50 in the training set and
then using the weight score from XGBoost to choose the 50 most
important features as Combined 50. This feature selection process
only happens once, and only be conducted in training set.

Table 5: Back testing starts from Jan 2019 to June 2019. The
investment target is all A-share, except for the stock can′t
be traded during this period of time. Strategy′s commission
fee is 0.5%. SR refers to Sharpe Ratio, MD represents Max-
Drawdown.

Type

Baseline

Target
ZZ500
HS300
PK

GP

Vanilla

FCN

Spatial

Le-net

Resnet-50

LSTM

Temporal

TCN

Transformer

Group
Stock Index
Stock Index
PK 50
GP 50
GP-PK 50
New 50
Combined 50
New 50
Combined 50
New 50
Combined 50
New 50
Combined 50
New 50
Combined 50
New 50
Combined 50

Revenue
SR
MD
19.60% 13,50% 1.982
18.60% 20.30% 1.606
24.70% 18.90% 2.314
17.60% 25.30% 1.435
25.40% 14.80% 2.672
20.60% 15.80% 2.189
29.60% 15.70% 3.167
18.00% 16.90% 1.800
27.50% 16.40% 2.921
19.90% 15.40% 1.962
29.30% 17.20% 2.787
19.50% 13.00% 2.205
29.90% 15.00% 3.289
22.40% 14.70% 2.440
26.90% 16.80% 2.729
21.10% 15.90% 2.203
27.20% 15.10% 2.806

As shown in Table 5, HS300 and ZZ500 are important stock
indices in the A-share stock market. Revenue represents the annu-
alized excess return, by longing portfolio and shorting the index.
The max drawdown is the worst loss of the excess return from its
peak. The Sharpe ratio is the annually adjusted excess return divided
by a certain level of risk. These indicators can show the strategy′s
performance from the perspective of both return and risk.

For the New 50, although they have higher IC than the PK 50,
their overall performance is not always better than PK 50. Because

Alpha Discovery Neural Network, the Special Fountain of Financial Trading Signals

KDD-MLF-2020, August 24, 2020, San Diego, CA, USA

the overall performance of a multi-factor strategy is determined by
both diversity and information volume (IC), we guess the diversity
of PK 50 is remarkably higher than the diversity of New 50. We
also did experiment to verify this guess. Thus, although every single
new factor is better than the old factor, their overall performance
not always be better. ADNN′s diversity is larger than the GP, but
for further research, making ADNN′s diversity even larger is still
badly needed. In the real world use case, all investors have their
own reliable and secret factor pool, what they want is that the new
constructed factors can bring in margin benefits. Thus, they will use
both new and old factors to do trading. That′s the reason why Com-
bined 50 can represent ADNN′s contribution in the real situation. In
all cases, Combined 50 is better than PK 50 and GP-PK 50, which
means that the ADNN not only perform better than GP, but also can
enrich investors′ factor pool. We also plots the exceed return curve
of these strategies, shown in Figure 4.

the network focused on temporal information. Then the diversity
is clustered into three groups using k-means; this method has been
mentioned in section 3.1. To show the distributions more clearly,
we cluster them into three groups. Then we initialize one of the
cluster centers at (0, 0) and then determine the other two cluster
centers according to their relative distance and a given direction.
This direction will only influence the outlook of this graph, but
not influence the shared space between two different clusters. In the
following experiments, we plot all the factors′ distributions to help us
understand the characteristics of different types of feature extractors.
Here, we focus on the sparsity and common area shared by each
group. Because these two indicators can help us to comprehend
which feature extractor really contributes, and how much special
information it has discovered.

Figure 4: Different feature extractors′ exceed return in testing
set, hedge on HS300 Index.

Shown in Figure 4, all these curves are similar, due to the fact that
they all shared some factors from PK 50. And all the schemes pow-
ered by ADNN performs better than GP. During this period of time,
they have beaten the market more than 10 percent. It is reasonable
because all the features are only constructed from price and volume
data. They don′t contain any fundamental data or even sentiment
data. What′s more, we will get a lot of extra information during
the feature construction process. This information is helpful in the
feature selection process. That′s the main reason why some wrap-
per methods will do feature selection and construction at the same
time. For further research, the current structure can be improved to
conduct both the feature construction and feature selection process
at the same time. This paper directly leverages this reasonable and
fair feature selection method, because it only focuses on the feature
construction task.

3.5 Comprehend the result
From the experiment result, we have found that different feature
extractors perform differently. In this part, we try to comprehend
this result. We construct 50 features by using FCN, 50 features from
the network focused on spatial information and 50 features from

Figure 5: Cluster different neural networks, spatial network
against temporal network.

As shown in Figure 5(left), the features constructed by the LSTM
have the sparsest distribution, which means that the network struc-
ture that focuses on temporal information is excellent at extracting
information from the financial time series. However, a large space is
shared by FCN and Le-net. We can regard Le-net′s information as
a subset of FCN. Combined with the convolution neural network′s
poor performance in sections 3.2 and 3.3, it looks like that the
convolution neural network structure does not have a substantial
contribution to extracting information from the financial time series.
Figure 5(right) is an extra experiment, whose result supports this
conclusion as well.

Figure 6: Cluster different types of neural networks. More com-
plicated, compared with the networks used in Figure 5.

From Figure 6, we can draw the same conclusions as above.
What′s more, the network used in Figure 5 is simple, but the network

KDD-MLF-2020, August 24, 2020, San Diego, CA, USA

Jie Fang, Shutao Xia, Jianwu Lin, Zhikang Xia, Xiang Liu, and Yong Jiang

used in Figure 6 is relatively more complicated. Compare Figure
5 and Figure 6, we can find that the complex network takes larger
space. It shows that complicated neural network bigger diversity.
Thus, we think the complicated neural network′s strong point is
that they have less possibility to get co-linearity. Commonly, the
complex network has large parameter set. And at most of the time,
its impressive performance comes from its large parameter set. A
very complicated neural network will be helpful remember some
stationary rules. But for the non-stationary stock market, the rules
in training set maybe different from the rules in testing set. If we
only rely on large parameter set to remember the rules, it may bring
over-fitting risk. And currently, most of the tradings are still made by
human, which means the majority of trading signals are still linear.
Thus, at present, the very complicated neural network can′t have a
promising performance in the stock market.

However, while the stock market is developing, more and more
investors crowd into this game. We think that the factor crowding
phenomenon will become more and more clear. In addition, as more
and more trading is made by algorithms, the non-linear part in the
trading signals will be larger. Thus, for quantitative trading, we
believe that the complicated and tailored neural network structure
will have its supreme moment in the near future.

4 CONCLUSION
In this paper, we put forward the alpha discovery neural network,
which can automatically construct financial features from raw data.
We designed its network structure according to the economic prin-
ciple, and equip it with different advanced feature extractors. The
numerical experiment shows that ADNN can produce more infor-
mative and diversified features than the benchmark on this task. In
real practice, ADNN can also achieve better revenue, sharpe-ratio
and max-drawdown than genetic programming. What′s more, dif-
ferent feature extractors play different roles. We have done plenty
of experiments to verify it and try to comprehend its function. For
further research, we will leverage this framework to automatically
construct useful features based on the companies′ fundamental data
and sentiment data.

ACKNOWLEDGMENTS
This work is supported in part by the National Natural Science
Foundation of China under Grant 61771273 and the R&D Program
of Shenzhen under Grant JCYJ20180508152204044.

REFERENCES
[1] Franklin Allen and Risto Karjalainen. 1999. Using genetic algorithms to find
technical trading rules. Journal of financial Economics 51, 2 (1999), 245–271.
[2] Taxiarchis Botsis, Michael D Nguyen, Emily Jane Woo, Marianthi Markatou, and
Robert Ball. 2011. Text mining for the Vaccine Adverse Event Reporting System:
medical text classification using informative feature selection. Journal of the
American Medical Informatics Association 18, 5 (2011), 631–638.

[3] Girish Chandrashekar and Ferat Sahin. 2014. A survey on feature selection

methods. Computers & Electrical Engineering 40, 1 (2014), 16–28.

[4] Tianqi Chen, Tong He, Michael Benesty, Vadim Khotilovich, and Yuan Tang.
2015. Xgboost: extreme gradient boosting. R package version 0.4-2 (2015), 1–4.
[5] Jaksa Cvitanic and Ioannis Karatzas. 1994. On portfolio optimization under"

drawdown" constraints. (1994).

[6] Eugene F. Fama and Kenneth R. French. 1993. Common risk factors in the
returns on stocks and bonds. Journal of Financial Economics 33, 1 (1993), 3 – 56.
https://doi.org/10.1016/0304-405X(93)90023-5

[7] Eugene F. Fama and Kenneth R. French. 2015. A five-factor asset pricing model.
Journal of Financial Economics 116, 1 (2015), 1–22. https://EconPapers.repec.
org/RePEc:eee:jfinec:v:116:y:2015:i:1:p:1-22

[8] Fuli Feng, Huimin Chen, Xiangnan He, Ji Ding, Maosong Sun, and Tat-Seng
Chua. 2019. Enhancing Stock Movement Prediction with Adversarial Training.
Papers. arXiv.org. https://EconPapers.repec.org/RePEc:arx:papers:1810.09936

[9] Jonathan Frankle and Michael Carbin. 2018. The lottery ticket hypothesis: Finding
sparse, trainable neural networks. arXiv preprint arXiv:1803.03635 (2018).
[10] T. Clifton Green, Ruoyan Huang, Quan Wen, and Dexin Zhou. 2019. Crowd-
sourced employer reviews and stock returns. Journal of Financial Economics 134,
1 (2019), 236 – 251. https://doi.org/10.1016/j.jfineco.2019.03.012

[11] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. 2016. Deep resid-
ual learning for image recognition. In Proceedings of the IEEE conference on
computer vision and pattern recognition. 770–778.

[12] Balázs Hidasi, Massimo Quadrana, Alexandros Karatzoglou, and Domonkos Tikk.
2016. Parallel recurrent neural network architectures for feature-rich session-based
recommendations. In Proceedings of the 10th ACM conference on recommender
systems. ACM, 241–248.

[13] Sepp Hochreiter and Jürgen Schmidhuber. 1997. Long short-term memory. Neural

computation 9, 8 (1997), 1735–1780.

[14] Mika Juuti, Sebastian Szyller, Samuel Marchal, and N Asokan. 2019. PRADA:
protecting against DNN model stealing attacks. In 2019 IEEE European Sympo-
sium on Security and Privacy (EuroS&P). IEEE, 512–527.

[15] Zura Kakushadze. 2016. 101 Formulaic Alphas. Papers 1601.00991. arXiv.org.

https://ideas.repec.org/p/arx/papers/1601.00991.html

[16] Krzysztof Krawiec. 2002. Genetic programming-based construction of features
for machine learning and knowledge discovery tasks. Genetic Programming and
Evolvable Machines 3, 4 (2002), 329–343.

[17] Mark J Kwakkenbos, Sean A Diehl, Etsuko Yasuda, Arjen Q Bakker, Caroline MM
Van Geelen, Michaël V Lukens, Grada M Van Bleek, Myra N Widjojoatmodjo,
Willy MJM Bogers, Henrik Mei, et al. 2010. Generation of stable monoclonal
antibody–producing B cell receptor–positive human memory B cells by genetic
programming. Nature medicine 16, 1 (2010), 123.

[18] Siwei Lai, Liheng Xu, Kang Liu, and Jun Zhao. 2015. Recurrent convolutional neu-
ral networks for text classification. In Twenty-ninth AAAI conference on artificial
intelligence.

[19] Colin Lea, Michael D Flynn, Rene Vidal, Austin Reiter, and Gregory D Hager.
2017. Temporal convolutional networks for action segmentation and detection. In
proceedings of the IEEE Conference on Computer Vision and Pattern Recognition.
156–165.

[20] Yann LeCun, Léon Bottou, Yoshua Bengio, Patrick Haffner, et al. 1998. Gradient-
based learning applied to document recognition. Proc. IEEE 86, 11 (1998),
2278–2324.

[21] Huan Liu and Hiroshi Motoda. 1998. Feature extraction, construction and selec-

tion: A data mining perspective. Vol. 453. Springer Science & Business Media.
[22] Sidra Mehtab and Jaydip Sen. 2019. A Robust Predictive Model for Stock Price
Prediction Using Deep Learning and Natural Language Processing. Papers.
arXiv.org. https://EconPapers.repec.org/RePEc:arx:papers:1912.07700

[23] Hiroshi Motoda and Huan Liu. 2002. Feature selection, extraction and construction.
Communication of IICM (Institute of Information and Computing Machinery,
Taiwan) Vol 5, 67-72 (2002), 2.

[24] Cristóbal Romero, Sebastián Ventura, and Paul De Bra. 2004. Knowledge dis-
covery with genetic programming for providing feedback to courseware authors.
User Modeling and User-Adapted Interaction 14, 5 (2004), 425–464.

[25] Ke Shan, Junqi Guo, Wenwan You, Di Lu, and Rongfang Bie. 2017. Auto-
matic facial expression recognition based on a deep convolutional-neural-network
structure. In 2017 IEEE 15th International Conference on Software Engineering
Research, Management and Applications (SERA). IEEE, 123–128.

[26] William F Sharpe. 1994. The sharpe ratio. Journal of portfolio management 21, 1

(1994), 49–58.

[27] James D Thomas and Katia Sycara. 1999. The importance of simplicity and
validation in genetic programming for data mining in financial data. In Proceed-
ings of the joint AAAI-1999 and GECCO-1999 Workshop on Data Mining with
Evolutionary Algorithms.

[28] Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones,
Aidan N Gomez, Łukasz Kaiser, and Illia Polosukhin. 2017. Attention is all you
need. In Advances in neural information processing systems. 5998–6008.
[29] Robert J Watts and Alan L Porter. 2007. Mining conference proceedings for
corporate technology knowledge management. International Journal of Innovation
and Technology Management 4, 02 (2007), 103–119.

[30] Yang Zhong, Josephine Sullivan, and Haibo Li. 2016. Face attribute prediction
using off-the-shelf cnn features. In 2016 International Conference on Biometrics
(ICB). IEEE, 1–7.

