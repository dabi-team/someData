7
1
0
2

y
a
M
5
1

]

G
L
.
s
c
[

1
v
6
9
3
5
0
.
5
0
7
1
:
v
i
X
r
a

Learning Probabilistic Programs Using
Backpropagation

Avi Pfeﬀer
Charles River Analytics

June 21, 2021

Abstract

Probabilistic modeling enables combining domain knowledge with learn-
ing from data, thereby supporting learning from fewer training instances
than purely data-driven methods. However, learning probabilistic models
is diﬃcult and has not achieved the level of performance of methods such
as deep neural networks on many tasks.
In this paper, we attempt to
address this issue by presenting a method for learning the parameters of
a probabilistic program using backpropagation. Our approach opens the
possibility to building deep probabilistic programming models that are
trained in a similar way to neural networks.

1 Introduction

One of the biggest attractions of probabilistic modeling is that it enables you
to combine domain knowledge with learning from data. Neural networks have
proven to be extremely eﬀective at learning but usually require a lot of data.
The ability to incorporate explicit domain knowledge could signiﬁcantly reduce
the amount of data required. Another appealing property of probabilistic mod-
els is that they can be interpretable and are often easier to explain than neural
networks. Probabilistic programming provides a modular, composable, and ex-
pressive framework for representing probabilistic models. However, probabilis-
tic programs have generally been considered not as good as neural networks as
learning machines, possibly because inference and learning of complex models
is quite hard. This paper is an attempt to address this issue by providing a
way to learn probabilistic programs using back-propagation, similar to neural
networks. The hope is that this will provide probabilistic programs with similar
scalability properties to neural networks. A second beneﬁt is that we provide a
framework that allows the entire range of possibilities, from purely knowledge-
driven to purely data-driven, and everything in between, to be represented,
reasoned with, and learned in a coherent way.

This work builds on that of Binder et al. [RBKK95, BKRK97] (along with
Buntine [Bun94] and Thiesson [Thi97]), who showed how to learn the condi-

1

 
 
 
 
 
 
tional probability distributions of a Bayesian network with known structure
and incomplete observations using gradient descent. Binder et al. also showed
how to use parameterized representations of CPTs, such as noisy-or and linear
Gaussians, and they also showed how to handle situations where parameters are
used in more than one CPT, such as dynamic models. Their work has everything
needed to learn a probabilistic program using gradient descent.

Unfortunately, Binder et al’s method requires performing inference to com-
pute the gradient.
Inference can be expensive in probabilistic models and is
prohibitive as the inner loop of a gradient descent algorithm. As a result, their
method has largely been ignored for learning Bayesian networks, with most
practitioners using EM. EM also requires inference at each step, but usually
requires far fewer iterations than gradient descent to converge. However, EM is
also considered a slow algorithm that is ultimately unsatisfying.

In this paper, we describe a method for learning the parameters of a proba-
bilistic program using gradient descent in a way that does not require inference.
All that is required is the ability to generate samples from the prior distribution
of the program, which is easy. In each iteration of the algorithm, a number of
samples is generated. Only the subset of the program necessary for generation
of the samples is expanded. These samples are an approximate representation of
the distribution deﬁned by the program. A loss function that compares the em-
pirical data distribution to this distribution is formulated. The gradient of this
loss with respect to the program parameters is computed using reverse-mode
automatic diﬀerentiation, or backpropagation.

We are releasing an early version of this paper in the hope of generating

discussion and getting feedback.

2 Related Work

Generative adversarial nets (GANs) [GPAM+14] are generative neural networks
that have demonstrated considerable success at unsupervised learning of gener-
ative probabilistic models from rich data sets. However, GANs are not inter-
pretable and it can be hard to include prior knowledge in the network, unlike a
probabilistic program. Also, a minor point is that GANs don’t support inference
directly, but inference can be performed with an auxiliary network.

Stan [CGH+16] is based on reverse-mode automatic diﬀerentiation, like ours.
However, Stan uses this for Hamiltonian Monte Carlo, whereas we use it for
back-propagation. Stan also requires a more restricted form of model than we
do. Stan requires that the model be diﬀerentiable with respect to the variables
in the model. In our framework, the model can be non-diﬀerentiable and even
discontinuous with respect to the variables. It need only be diﬀerentiable with
respect to the learnable parameters of the model. This makes it applicable to
general-purpose probabilistic programming languages like Church.

Edward [TKD+16] is a probabilistic programming language that enables
explicit representation of inference models. These inference models are im-
plemented in Tensor Flow, enabling many of the scalability beneﬁts of neural

2

networks. The main diﬀerence between Edward and our approach is that Ed-
ward requires the inference model to be written explicitly whereas our approach
is black box, with inference being worked out automatically. Having to specify
an inference model can be an advantage, because it enables you to encode al-
gorithms (e.g. variational methods) that couldn’t be easily derived. However,
it might be hard to scale to more complex models and would be particularly
diﬃcult for non-experts to use.

Le, Beydin, and Wood [LBW16] use neural networks to support inference in
probabilistic programs, speciﬁcally to help create good proposals for sequential
importance sampling. Their work diﬀers from ours in that they do not learn
the probabilistic program itself but rather an auxiliary network that assists in
inference.

It is naturally possible to give ordinary neural networks a Bayesian inter-
pretation, as in Bayesian deep learning [WY16]. A variety of speciﬁc forms of
Bayesian generative neural network frameworks trainable by backpropagation
have been developed, such as deep belief nets [HOT06], deep Boltzmann ma-
chines [SH09], deep generative models [RMW14], and deep generative stochastic
networks [BTLAY14]. In contrast to our approach, each of these frameworks
deﬁnes a speciﬁc kind of neural network with a given structure. In contrast,
ours is a general framework that applies to programs in a generic probabilistic
programming language.

3 Overview of Approach

We start with a functional probabilistic programming language like Church or
Figaro. Some of the parameters of the language are designated to be learned by
our method. For example, if we have an expression ﬂip(p), we might say that p
is a learnable parameter. Similarly, if we have an expression representing a con-
ditional probability distribution between two categorical variables, the entries
in the conditional probability table could be learnable parameters. The param-
eters of continuous distributions, such as the mean and variance of a Gaussian,
could also be learnable. Optionally, a prior-like function can be provided for
each learnable parameter. This prior should be interpreted as a regularization
function, where higher values of this prior are preferred.

We require that for every construct in the language, three things can be done:
(1) sample the value of the expression given its arguments; (2) compute the
conditional density of a value given its arguments; (3) compute the derivative of
the conditional density with respect to the parameter. The conditional density
needs to be diﬀerentiable with respect to the parameter but not with respect to
the variables in the model.

A probabilistic program deﬁnes a probability density function over values
produced by the program. We deﬁne an error function on a program that
measures, loosely speaking, how well this density function models a training
set. We use stochastic gradient descent to learn the parameters of the program
that minimize this error function.

3

In each iteration of gradient descent, we generate a set of samples from
the distribution deﬁned by the program, using the current parameter values.
We estimate the error function using these samples. In addition, because we
are only generating a speciﬁc set of samples, we can restrict out attention to
expressions that are evaluated to generate these samples, rather than the full
set of expressions that can be evaluated, which can be inﬁnite. The result of
this sampling is a data structure we call a parameterized probabilistic network
(PPN).

We then use reverse mode automatic diﬀerentiation on this PPN to compute
the gradient. The result is a backpropagation algorithm. It turns out that to
compute this derivative exactly, we need to compute the derivative of the con-
ditional density of a node given an ancestor set, and some analysis is needed
to determine exactly which conditional densities need to be computed. As an
approximation, however, we can assume that the parents of a node are indepen-
dent for the purpose of derivative computation, which results in a simple and
eﬃcient algorithm.

4 Technical Details

4.1 Representation

We assume some Church-like functional probabilistic programming language in
which some of the parameters are designated to be learned by our method. We
require that all primitives of the language be diﬀerentiable with respect to the
parameters and that we have a way to compute densities and derivatives using
those primitives. The goal of learning will be to minimize some loss function
with respect to these parameters. It turns out that traditional loss functions
like negative log likelihood of the data with respect to the model don’t work
well with this method, but natural loss functions can be deﬁned.

We will use the probabilistic program to create a network trainable using
backpropagation. We call this network a parameterized probabilistic network
(PPN). A PPN consist of a directed acyclic graph. Associated with each node
X), where X are the parents
Y is a conditional probability density function p(Y
of Y in the graph. Y must specify a way to sample values of Y given X, and a
x) that is diﬀerentiable in the parameter θY . We are
function fY (x, y; θY ) = p(y
also given a way to calculate ∂fY (x,y;θY )
for any value of X and Y . In addition,
the parameters θY also have a (possibly unnormalized) prior p(θY ). This prior
should be thought of as a regularization function rather than a true prior in the
Bayesian sense; p(θY ) indicates how much a particular value of θY is preferred.
If unspeciﬁed, p(θY ) = 1.

∂θY

|

|

Any sink of the graph Z may be an output node. There may be multiple
output nodes. Let Z represent all the output nodes. For each output node Z, we
are given a local error function EZ(z). The error is assumed to be (a) additive
across diﬀerent values z of Z; and (b) additive across the output nodes Z. The
overall loss of the network is deﬁned to be the expected value of this error,

4

regularized by the priors of the parameters. Due to linearity of expectation, we
can deﬁne the score of the network, with respect to a particular set of parameters
Θ, to be

L(Θ) =

p(z)EZ(z)dz

Z∈Z Z
X

−

Y
X

log p(θY )

(1)

We can see now why a typical formulation of the loss as the negative log
likelihood of the data given by the model cannot be used, because it does not
decompose additively over the diﬀerent values z of Z. Instead, a natural formu-
lation for the error function EZ(z) is the negative log probability of the value z
according to the data. For example, we can use Parzen windows to create a pdf
from the training data and use that pdf to estimate the density of the point z.
If we choose a sample of the data ζ1, . . . , ζn, we can deﬁne

EZ (z) =

log

{

−

n

1
n√2πσ2

e− (z−ζi)2

2σ2

}

,

(2)

i=1
X
where σ2 is some variance. The value of σ2 could be determined using a valida-
tion set.

4.2 Learning

Our goal is to minimize the loss L(Θ) using stochastic gradient descent. The
second term of Equation (1) is easy to diﬀerentiate.

∂

{−

Y log p(θY )
}
∂θY

P

= −

p′(θY )
p(θY )

(3)

Z∈Z

We call the ﬁrst term of Equation (1) E(Θ). We will diﬀerentiate E(Θ) =
p(z)EZ (z)dz using a backpropagation algorithm. Backpropagation re-
quires a speciﬁc set of values for the nodes in the network. Since we have a
P
generative model, we can sample values for all the nodes in the network. For
probabilistic programming, the set of nodes is very large or potentially inﬁnite,
but a given set of samples will only instantiate a subset of the nodes, as long as
the program terminates with probability one.

R

For forward propagation, we generate a set of N samples from the proba-
bilistic program. In the process of creating the program, we add a node to the
PPN representing each expression that gets evaluated. If the same expression
gets evaluated in multiple samples, it is represented by the same node. For any
node Y , let y1, ..., ynY be the distinct values generated, let #Y be the num-
ber of samples in which the expression represented by Y is evaluated, and let
#yi be the number of times value yi is generated. Similarly, for a set of nodes
Y = Y 1, ..., Y m, #yi is the number of samples in which the joint value y1
i , ..., ym
i
appears. During the process of generation, we also create a topological order
over the nodes according to the order in which they are evaluated.

5

To initialize the backward propagation process, we apply the error to each

output node as follows:

∂E
∂Θ

=

=

=

≃

∂

p(z)EZ (z)dz

∂Θ

Z∈Z
X

R

Z Z
X

Z Z
X

nZ

Z
X

i=1
X

EZ(z)

∂p(z)
∂Θ

dz +

EZ(z)

∂p(z)
∂Θ

dz

#zi
#Z

EZ (zi)

∂p(zi)
∂Θ

p(z)

∂EZ(z)
∂Θ

dz

Z Z
X

(4)

(5)

(6)

(7)

The third step holds because EZ(z) does not depend on Θ. We have therefore
reduced the problem to computing the derivative of the probability density of
a particular value zi with respect to the parameters Θ. We actually generalize
this slightly, providing a method to compute the derivative of the conditional
probability density of any value of a variable given a speciﬁc value of ancestors
of the variable.

Notation: Let Y be any node. ¯ΘY denotes all the parameters of nodes that
precede Y in the ordering. For any set of ancestors U of Y , we now deﬁne a
procedure to compute ∂p(yi|uj)

and ∂p(yi|uj )

.

∂θY

∂ ¯ΘY

Let the parents of Y be X. First, we approximate

uj)

∂p(yi
|
∂θY

=

=

=

≃

p(x
|

uj)p(yi
∂θY

|

x, uj)dx

uj)fY (x, yi; θY )dx

p(x
|

R
p(x
|

uj)

∂θY
∂fY (x, yi; θY )
∂θY

dx

#xk, uj
#uj

∂fY (xk, yi; θY )
∂θY

∂

∂

R

Z
nX

k=1
X

(8)

(9)

(10)

(11)

The second line holds because X, being the parents of Y , render Y condi-
ui) does
, this part is

tionally independent of U given X. The third line holds because p(x
|
not depend on θY . Because we know how to calculate ∂fY (xk,yi;θY )
done.

∂θY

Next, we approximate

uj)

∂p(yi
|
∂ ¯ΘY

=

=

=

∂

∂

R

p(x
|

uj )p(yi
∂ ¯ΘY

|

x, uj )dx

uj )fY (x, yi; θY )dx

p(x
|

∂ ¯ΘY

R
fY (x, yi; θY )

uj)

∂p(x
|
∂ ¯ΘY

dx

Z

6

(12)

(13)

(14)

#xk
#X

nX

k=1
X

≃

fY (xk, yi; θY )

uj)

∂p(xk
|
∂ ¯ΘY

(15)

We have again reduced the problem to compute the partial derivative of a
conditional probability density. However, there may be more than one variable
in X and these variables might not be conditionally independent given U. We
therefore introduce the notion of a sepset: A sepset for X given U is a set of
nodes V such that all the variables in X are conditionally independent given
V. Technically, any such sepset will work but we will generally prefer small
U
sepsets. Let X = X 1, ..., X m. We can now write

∪

(16)

(17)

(18)

(19)

p(xi

|

uj) =

Z

uj )p(xi

p(v

|

|

v, uj)dv

m

=

p(v

ui)

|

p(xk
i |

v, uj)dv

Z
nV

ℓ=1
X

≃

k=1
Y

m

#vℓ, uj
#uj

p(xk
i |

vℓ, uj)

k=1
Y

Therefore,

uj)

∂p(xi
|
∂ ¯ΘY

≃

=

≃

=

#vℓ, uj
#uj

#vℓ, uj
#uj

#vℓ, uj
#uj

nV

ℓ=1
X
nV

ℓ=1
X
nV

ℓ=1
X
nV

ℓ=1  
X
m

k=1
X

m
k=1 p(xk
i |
∂ ¯ΘY

vℓ), uj)

∂

Q
m





k=1
X
m

h=1,h6=k
Y
m

m

p(xh
i |

vℓ, uj)



vℓ, uj)

∂p(xk
i |
∂ ¯ΘY

(20)



#xh

i , vℓ, uj
#vℓ, uj 

vℓ, uj)

∂p(xk
i |
∂ ¯ΘY

(21)



k=1
X

m

#vℓ, uj
#uj

h=1
Y
#vℓ, uj

#xk

i , vℓ, uj

h=1,h6=k
Y
#xh
i , vℓ, uj
#vℓ, uj !
∂p(xk
vℓ, uj)
i |
∂ ¯ΘY



(22)

(23)

The rewriting in the last line is to reduce the complexity of the algorithm by
performing the multiplication separately from the initial summation. We have
now reduced the problem to computing the partial derivative of the conditional
probability density of the value of any variable given a speciﬁc value of its
ancestors, so we can recurse. Done!

4.3 Complexity

Note that for any set of variables V, NV
N , where N is the number of
samples. Also, let M be the maximum number of parents of any node, let K

≤

7

be the number of nodes, let Q be the number of output nodes, and let D be the
number of training set examples used in an iteration of the algorithm.

Equation (3) is computed K times. According to Equation (2), the cost
of computing EZ (zi) is O(D). Equation (7) computes EZ (zi) once for every
output node Z and every sample zi, so the total cost of computing Equation
(7) is O(QDN ). The cost of computing Equations (11) and (15) is O(N ), while
the cost of computing Equation (23) is O(M N ).

The key question is how many times Equations (11), (15), and (23) are
computed. This does not seem to be trivial to work out and there may be
some graph theoretic property. We hypothesize that it’s exponential in the
size of the largest sepset, but analysis is needed. If the total number of times
is O(L), then the overall cost of performing one step of gradient descent is
O(K + QDN + LM N ).

4.4 Approximation

If the complexity of computing the gradient exactly is too high, we can use an
approximation scheme where we use smaller sepsets. An extreme version of this
will use empty sepsets, assuming all parents are independent for the purpose
of computing the gradient. We then only need to compute the derivatives of
unconditional pdfs. Proceeding from Equation (7), we compute

We also compute

∂p(yi)
∂ ¯ΘY

=

=

≃

=

≃

=

∂p(yi)
∂θY

=

≃

R
nX

j=1
X

p(x)p(yi
∂θY

x)dx

|

#xj
#X

∂fY (xj , yi; θY )
∂θY

x)dx

p(x)p(yi
∂ ¯ΘY

|

fY (x, yi; θY )

fY (x, yi; θY )

fY (x, yi; θY )

R

Z

Z

Z

dx

∂p(x)
∂ ¯ΘY
m
k=1 p(xk))
∂(
∂ ¯ΘY
m

Q

m

dx

k=1
X




m

h=1,h6=k
Y

m

nX

j=1
X
nX

fY (xj , yi; θY )



k=1
X

m

j=1  
X

fY (xj , yi; θY )

h=1
Y

8

p(xh)



∂p(xk)
∂ ¯ΘY


#xh
j
#X h 

∂p(xk
j )
∂ ¯ΘY


#X k
#xk
j

∂p(xk)
∂ ¯ΘY

m

k=1
X

h=1,h6=k
Y
#xh
j
#X h

!

(24)

(25)

(26)

(27)

(28)

(29)

(30)

(31)

Equations (25) and (31) are computed O(K) times at a cost of O(M N ) each.
Therefore, the total cost of the algorithm, per iteration of gradient descent, is
O(QDN + KM N ). Since the number of output nodes Q is at most the total
number of nodes K, this can be summarized as O(KN (D + M )). Thus, the
complexity is linear in the number of nodes in the network, the number of
samples taken, the number of training instances used per iteration, and the
maximum number of parents of any node.

We note that although this scheme assumes that the parents are indepen-
dent for the purposes of backpropagation, all dependencies between the parents
are taken into account when generating the samples. How this approximation
scheme will perform on practical problems is an open question.

Similar to frameworks for approximate inference in graphical models like
mini-buckets [DR03], we could also consider a whole range of approximations
where we limit the size of sepsets that are allowed. We do not discuss this
possibility further here.

5 Discussion

The most important questions with the method are whether it can provide
similar scalability of learning to deep neural networks. Two particular issues,
that have been solved for deep nets, are vanishing of the gradient as the network
becomes deep and convergence of the learning to local minima. Our hope is that
our use of sampled training set batches will help with the local minima problem.
For the vanishing gradient problem, the key question is the sensitivity of the
output of the network to parameters early in the network. If an early variable
is critical to the output, the sensitivity should be high and our method should
discover this. Also, as opposed to traditional neural networks, the variables
closest to the data are at the end of the network, so the vanishing gradient
problem may be less signiﬁcant anyway.

Even after the model has been learned, using it requires inference. Inference
in probabilistic models is hard, which is one advantage of neural networks.
However, signiﬁcant strides have been made in this area in the last few years,
including using neural networks in the inference process itself. Our method
is orthogonal to the work on inference; we will beneﬁt from any advances in
the inference area. One might ask, if we are relying on inference anyway, why
not use full Bayesian inference and learn the parameters of the model through
inference? In our experience, simultaneously learning parameters in a high
dimensional space and perform probabilistic inference on the underlying model
is often intractable. If the parameters can be learned separately, the underlying
inference will often be much easier.

Our goal will be to evaluate our approach across a number of dimensions.
First, a natural point of comparison is Stan. Stan also uses reverse mode auto-
matic diﬀerentiation but for the purpose of inference using Hamiltonian Monte
Carlo. Also, Stan implements a more limited language because model primi-
tives need to be diﬀerentiable in the model variables, not just the parameters.

9

We would like to compare the eﬃciency and accuracy of learning using our
approach and Stan’s and also whether our approach can scale to models that
cannot easily be represented in Stan. Stan has been heavily engineered for ef-
ﬁciency, so any comparison will require some eﬀort on our part to create an
eﬃcient implementation.

A second natural comparison is GANs. GANs are generative neural network
models that have proven highly eﬀective at generating data. Our hope is that
by enabling domain knowledge to be explicitly included in models, it will be
possible to train our models using far less data.

Ultimately, it will be interesting to see whether it is possible to represent
and learn new kinds of deep probabilistic models in this framework. For ex-
ample, imagine a functional LDA-style model. A topic consists of a probability
distribution over transformations over some data structure, such as an image
or a graph. The generative model consists of choosing a topic, then choosing a
sequence of transformations from the topic, and applying them sequentially to
a starting value using function composition. The transformations are all prob-
abilistic functions that can be parameterized by parameters that are learned
using the methods in this paper. This is a very general model in which LDA is
a special case.

References

[BKRK97]

John Binder, Daphne Koller, Stuart Russell, and Keiji Kanazawa.
Adaptive probabilistic networks with hidden variables. Machine
Learning, 29(2):213–244, 1997.

[BTLAY14] Yoshua Bengio, Eric Thibodeau-Laufer, Guillaume Alain, and Ja-
son Yosinski. Deep generative stochastic networks trainable by
backprop. In International Conference on Machine Learning, 2014.

[Bun94]

Wray L. Buntine. Operations for learning with graphical models.
JAIR, 2:159–225, 1994.

[CGH+16] Bob Carpenter, Andrew Gelman, Matt Hoﬀman, Daniel Lee, Ben
Goodrich, Michael Betancourt, Michael A Brubaker, Jiqiang Guo,
Peter Li, and Allen Riddell. Stan: A probabilistic programming
language. Journal of Statistical Software, 20, 2016.

[DR03]

Rina Dechter and Irina Rish. Mini-buckets: A general scheme for
bounded inference. Journal of the ACM (JACM), 50(2):107–153,
2003.

[GPAM+14] Ian Goodfellow, Jean Pouget-Abadie, Mehdi Mirza, Bing Xu,
David Warde-Farley, Sherjil Ozair, Aaron Courville, and Yoshua
Bengio. Generative adversarial nets. In Advances in neural infor-
mation processing systems, pages 2672–2680, 2014.

10

[HOT06]

[LBW16]

Geoﬀrey E Hinton, Simon Osindero, and Yee-Whye Teh. A
fast learning algorithm for deep belief nets. Neural computation,
18(7):1527–1554, 2006.

Infer-
Tuan Anh Le, Atilim Gunes Baydin, and Frank Wood.
ence compilation and universal probabilistic programming. arXiv
preprint arXiv:1610.09900, 2016.

[RBKK95]

Stuart Russell, John Binder, Daphne Koller, and Keiji Kanazawa.
Local learning in probabilistic networks with hidden variables. In
IJCAI, volume 95, pages 1146–1152. Citeseer, 1995.

[RMW14]

Danilo Jimenez Rezende, Shakir Mohamed, and Daan Wierstra.
Stochastic backpropagation and approximate inference in deep
generative models. arXiv preprint arXiv:1401.4082, 2014.

[SH09]

[Thi97]

Ruslan Salakhutdinov and Geoﬀrey E Hinton. Deep boltzmann
machines. In AISTATS, volume 1, page 3, 2009.

Bo Thiesson. Score and information for recursive exponential mod-
els with incomplete data. In Proceedings of the Thirteenth confer-
ence on Uncertainty in artiﬁcial intelligence, pages 453–463. Mor-
gan Kaufmann Publishers Inc., 1997.

[TKD+16] Dustin Tran, Alp Kucukelbir, Adji B Dieng, Maja Rudolph, Dawen
Liang, and David M Blei. Edward: A library for probabilistic mod-
eling, inference, and criticism. arXiv preprint arXiv:1610.09787,
2016.

[WY16]

Hao Wang and Dit-Yan Yeung. Towards bayesian deep learning:
A survey. arXiv preprint arXiv:1604.01662, 2016.

11

