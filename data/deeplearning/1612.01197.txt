6
1
0
2
c
e
D
4

]
L
C
.
s
c
[

1
v
7
9
1
1
0
.
2
1
6
1
:
v
i
X
r
a

Neural Symbolic Machines:
Learning Semantic Parsers on Freebase
with Weak Supervision (Short Version) ∗

Chen Liang†, Jonathan Berant‡, Quoc Le, Kenneth Forbus, Ni Lao

Northwestern University, Evanston, IL
{chenliang2013,forbus}@u.northwestern.edu
Tel-Aviv University, Tel Aviv-Yafo, Israel
joberant@cs.tau.ac.il
Google Inc., Mountain View, CA
{qvl,nlao}@google.com

Abstract

Extending the success of deep neural networks to natural language understanding
and symbolic reasoning requires complex operations and external memory. Re-
cent neural program induction approaches have attempted to address this problem,
but are typically limited to differentiable memory, and consequently cannot scale
beyond small synthetic tasks. In this work, we propose the Manager-Programmer-
Computer framework, which integrates neural networks with non-differentiable
memory to support abstract, scalable and precise operations through a friendly
neural computer interface. Speciﬁcally, we introduce a Neural Symbolic Ma-
chine, which contains a sequence-to-sequence neural "programmer", and a non-
differentiable "computer" that is a Lisp interpreter with code assist. To successfully
apply REINFORCE for training, we augment it with approximate gold programs
found by an iterative maximum likelihood training process. NSM is able to learn a
semantic parser from weak supervision over a large knowledge base. It achieves
new state-of-the-art performance on WEBQUESTIONSSP, a challenging semantic
parsing dataset. Compared to previous approaches, NSM is end-to-end, therefore
does not rely on feature engineering or domain speciﬁc knowledge.

1

Introduction

Deep neural networks have achieved impressive performance in classiﬁcation and structured predic-
tion tasks with full supervision such as speech recognition [9] and machine translation [14, 2, 16].
Extending the success to natural language understanding and symbolic reasoning requires the ability
to perform complex operations and make use of an external memory. There were several recent
attempts to address this problem in neural program induction [7, 12, 13, 11, 19, 8, 1], which learn
programs by using a neural sequence model to control a computation component. However, the mem-
ories in these models are either low-level (such as in Neural Turing machines[19]), or differentiable
so that they can be trained by backpropagation. This makes it difﬁcult to utilize efﬁcient discrete
memory in a traditional computer, and limits their application to small synthetic tasks.

∗The long version with more details can be found at https://arxiv.org/abs/1611.00020.
†Work done while the author was interning at Google
‡Work done while the author was a visiting scholar at Google

1st Workshop on Neural Abstract Machines & Program Induction (NAMPI), @NIPS 2016, Barcelona, Spain.

 
 
 
 
 
 
To better utilize efﬁcient memory and operations, we propose a Manager-Programmer-Computer
(MPC) framework for neural program induction, which integrates three components:

1. A "manager" that provides weak supervision through input and a reward signal indicating
how well a task is performed. Unlike full supervision, this weak supervision is much easier
to obtain at large scale (see an example task in Section 3).

2. A "programmer" that takes natural language as input and generates a program that is a
sequence of tokens. The programmer learns from the reward signal and must overcome the
hard search problem of ﬁnding good programs. (Section 2.2).

3. A "computer" that executes the program. It can use all the operations that can be imple-
mented as a function in a high level programming language like Lisp. The non-differentiable
memory enables abstract, scalable and precise operations, but it requires reinforcement
learning. It also provides a friendly neural computer interface to help the "programmer"
reduce the search space by detecting and eliminating invalid choices (Section 2.1).

Within the MPC framework, we introduce the Neural Symbolic Machine (NSM) and apply it to
semantic parsing. NSM contains a sequence-to-sequence neural network model ("programmer")
augmented with a key-variable memory to save and reuse intermediate results for compositional-
ity, and a non-differentiable Lisp interpreter ("computer") that executes programs against a large
knowledge base. As code assist, the "computer" also helps reduce the search space by checking for
syntax and semantic errors. Compared to existing neural program induction approaches, the efﬁcient
memory and friendly interface of the "computer" greatly reduce the burden of the "programmer" and
enable the model to perform competitively on real applications. On the challenging semantic parsing
dataset WEBQUESTIONSSP [18], NSM achieves new state-of-the-art results with weak supervision.
Compared to previous work, it is end-to-end, therefore does not require any feature engineering or
domain-speciﬁc knowledge.

2 Neural Symbolic Machines

Now we describe in details a Neural Symbolic Machine that falls into the MPC framework, and how
it is applied to learn semantic parsing from weak supervision.
Semantic parsing is deﬁned as follows: given a knowledge base (KB) K, and a question q =
(w1, w2, ..., wk), produce a program or logical form z that when executed against K generates the
right answer y. Let E denote a set of entities (e.g., ABELINCOLN)4, and let P denote a set of
properties (or relations, e.g., PLACEOFBIRTHOF). A knowledge base K is a set of assertions
(e1, p, e2) ∈ E × P × E, such as (HODGENVILLE, PLACEOFBIRTHOF, ABELINCOLN)).

2.1 "Computer": Lisp interpreter with code assist

Operations learned by current neural network models with differentiable memory, such as addition or
sorting, do not generalize perfectly to inputs that are larger than previously observed ones [7, 13].
In contrast, operations implemented in ordinary programming language are abstract, scalable, and
precise, because no matter how large the input is or whether it has been seen or not, they will
be processed precisely. Based on this observation, we implement all the operations necessary for
semantic parsing with ordinary non-differentiable memory, and allow the "programmer" to use them
with a high level general purpose programming language.

We adopt a Lisp interpreter with predeﬁned functions listed in 1 as the "computer". The programs
that can be executed by it are equivalent to the limited subset of λ-calculus in [17], but easier for
a sequence-to-sequence model to generate given Lisp’s simple syntax. Because Lisp is a general-
purpose and high level language, it is easy to extend the model with more operations, which can be
implemented as new functions, and complex constructs like control ﬂows and loops.

A program C is a list of expressions (c1...cN ). Each expression is either a special token "RETURN"
indicating the end of the program, or a list of tokens enclosed by parentheses "( F A0 ... AK )". F is
one of the functions in Table 1, which take as input a list of arguments of speciﬁc types, and, when
executed, returns the denotation of this expression in K, which is typically a list of entities, and saves

4We also consider numbers (e.g., “1.33”) and date-times (e.g., “1999-1-1”) as entities.

2

it in a new variable. Ak is F ’s kth argument, which can be either a relation p ∈ P or a variable v.
The variables hold the results from previous computations, which can be either a list of entities from
executing an expression or an entity resolved from the natural language input.

( Hop v p ) ⇒ {e2|e1 ∈ v, (e1, p, e2) ∈ K}
( ArgMax v p ) ⇒ {e1|e1 ∈ v, ∃e2 ∈ E : (e1, p, e2) ∈ K, ∀e : (e1, p, e) ∈ K, e2 ≥ e}
( ArgMin v p ) ⇒ {e1|e1 ∈ v, ∃e2 ∈ E : (e1, p, e2) ∈ K, ∀e : (e1, p, e) ∈ K, e2 ≤ e}
( Equal v1 v2 p ) ⇒ {e1|e1 ∈ v1, ∃e2 ∈ v2 : (e1, p, e2) ∈ K}
Table 1: Predeﬁned functions. v represents a variable. p represents a relation in Freebase. ≥ and ≤
are deﬁned on numbers and datetime.

To create a better neural computer interface, the interpreter provides code assist by producing a list
of valid tokens for the "programmer" to pick from at each step. First, a valid token should not cause a
syntax error, which is usually checked by modern compilers. For example, if the previous token is
"(", the next token must be a function, and if the previous token is "Hop", the next token must be a
variable. More importantly, a valid token should not cause a semantic error or run-time error, which
can be detected by the interpreter using the value or denotation of previous expressions. For example,
given that the previously generated tokens are "(", "Hop", "v", the next available token is restricted to
the set of relations that are reachable from entities in v. By providing this neural computer interface,
the interpreter reduces the "programmer"’s search space by orders of magnitude, and enables weakly
supervised learning on a large knowledge base.

2.2 "Programmer": key-variable memory augmented Seq2Seq model

The "computer" implements the operations (functions) and stores the values (intermediate results)
in variables, which simpliﬁes the task for the "programmer". The "programmer" only needs to map
natural language into a program, which is a sequence of tokens that references operations and values
in the "computer". We use a standard sequence-to-sequence model with attention and augment it with
a key-variable memory to reference the values.

A typical sequence-to-sequence model consists of two RNNs, an encoder and a decoder. We used
a 1-layer GRU [5], which is a simpliﬁed variant of LSTM, for both the encoder and the decoder.
Given a sequence of words w1, w2...wm, each word wt is mapped to a multi-dimensional embedding
qt (see details about the embeddings in Section 3). Then, the encoder reads in these embeddings
and updates its hidden state step by step using: ht+1 = GRU (ht, qt, θEncoder), where θEncoder are
the GRU parameters. The decoder updates its hidden states ut by ut+1 = GRU (ut, ct−1, θDecoder),
where ct−1 is the embedding of last step’s output token at−1 (see details about the embeddings in
Section 3), and θDecoder are the GRU parameters. The last hidden state of the encoder hT is used as
the decoder’s initial state. We adopt a dot-product attention similar to that of [6]. The tokens of the
program a1, a2...an are generated one by one using a softmax over the vocabulary of valid tokens for
each step (Section 2.1).

Figure 1: Semantic Parsing with NSM. The key embeddings of the key-variable memory are the
output of the sequence model at certain encoding or decoding steps. For illustration purposes, we also
show the values of the variables in parentheses, but the sequence model never sees these values, and
only references them with the name of the variables such as “R1”. A special token “GO” indicates
the start of decoding, and “RETURN” indicates the end of decoding.

To achieve compositionality, we augment the model with a key-variable memory (Figure 1). Each
entry in the key-variable memory has two components: a continuous multi-dimensional embedding

3

KeyValueR1m.USAExecute( Argmax R2 Population )ExecuteReturnm.NYCKeyValue......R3m.NYCKeyValueR1m.USAR2(list of US cities)Execute( Hop R1 !CityIn )HopR1!CityIn()Largestcity(HopR1inUSGO!CityInArgmaxR2()Population)R2PopulationReturnArgmax)(Entity Resolverkey vi, and a corresponding variable Ri that references certain result in the "computer". During
encoding if a token ("US") is the last token of a resolved entity (by an entity resolver), then the
resolved entity id (m.USA) is saved in a new variable in the "computer", and the key embedding
for this variable is the average GRU output of the tokens spanned by this entity. During decoding
if an expression is completely ﬁnished (the decoder reads in ")"), it gets executed, and the result is
stored as the value of a new variable in the "computer". This variable is keyed by the GRU output of
that step. Every time a new variable is pushed into the memory, the variable token is added to the
vocabulary of the decoder.

2.3 Training NSM with Weak Supervision

To efﬁciently train NSM from weak supervision, we apply the REINFORCE algorithm [15, 19].
However, the REINFORCE objective is known to be very hard to optimize starting from scratch.
Therefore, we augment it with approximate gold programs found by an iterative maximum likelihood
training process. During training, the model always puts a reasonable amount of probability on the
best programs found so far, and anchoring the model to these high-reward programs greatly speeds
up the training and helps to avoid local optimum. More details of the training procedure can be found
in the long version.

3 Experiments and analysis

Modern semantic parsers [4], which map natural language utterances to executable logical forms,
have been successfully trained over large knowledge bases from weak supervision[17], but require
substantial feature engineering. Recent attempts to train an end-to-end neural network for semantic
parsing [6, 10] have either used strong supervision (full logical forms), or have employed synthetic
datasets.

We apply NSM to learn a semantic parser with weak supervision and no manual engineering. we
used the challenging semantic parsing dataset WEBQUESTIONSSP [18], which consists of 3,098
question-answer pairs for training and 1,639 for testing. These questions were collected using Google
Suggest API and the answers were originally obtained [3] using Amazon Mechanical Turk and
updated by annotators who are familiar with the design of Freebase [18]. We further separate out 620
questions in the training set as validation set. For query pre-prosessing we used an in-house named
entity linking system to ﬁnd the entities in a question. The quality of the entity resolution is similar to
that of [17] with about 94% of the gold root entities being included in the resolution results. Similar
to [6], we also replaced named entity tokens with a special token "ENT". For example, the question
"who plays meg in family guy" is changed to "who plays ENT in ENT ENT".

Following [17] we use the last public available snapshot of Freebase KB. Since NSM training requires
random access to Freebase during decoding, we preprocess Freebase by removing predicates that are
not related to world knowledge (starting with "/common/", "/type/", "/freebase/")5, and removing all
text valued predicates, which are rarely the answer. This results in a graph with 23K relations, 82M
nodes, and 417M edges.

We evaluate performance using the ofﬁcal measures for WEBQUESTIONSSP. Because the answer to
a question can contain multiple entities or values, precision, recall and F1 are computed based on the
output for each individual question. The average F1 score is reported as the main evaluation metric.
The accuracy@1 measures the percentage of questions that are answered exactly. The comparison
with previous state-of-the-art [18, 17] is shown in Table 2. Besides the better performance, our model
does not rely on domain-speciﬁc rules or feature engineering. More ablation studies and analysis are
included in the long version.

Model
STAGG
NSM – our model

Avg. Prec. Avg. Rec. Avg. F1 Acc.
58.8
73.1
59.4
74.8

67.3
70.9

66.8
69.0

Table 2: Comparison to previous state-of-the-art, average F1 is the main evaluation metric. Our
model achieves better results without hand-crafted rules and feature engineering.

5Except that we kept “/common/topic/notable_types”.

4

References

[1] Jacob Andreas, Marcus Rohrbach, Trevor Darrell, and Dan Klein. Learning to compose neural

networks for question answering. CoRR, abs/1601.01705, 2016.

[2] Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio. Neural machine translation by jointly

learning to align and translate. CoRR, abs/1409.0473, 2014.

[3] Jonathan Berant, Andrew Chou, Roy Frostig, and Percy Liang. Semantic parsing on freebase

from question-answer pairs. In EMNLP, volume 2, page 6, 2013.

[4] Jonathan Berant and Percy Liang. Semantic parsing via paraphrasing. In ACL (1), pages

1415–1425, 2014.

[5] Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Dzmitry Bahdanau, Fethi Bougares,
Holger Schwenk, and Yoshua Bengio. Learning phrase representations using rnn encoder–
decoder for statistical machine translation. In Proceedings of the 2014 Conference on Empirical
Methods in Natural Language Processing (EMNLP), pages 1724–1734, Doha, Qatar, October
2014. Association for Computational Linguistics.

[6] Li Dong and Mirella Lapata. Language to logical form with neural attention. In Association for

Computational Linguistics (ACL), 2016.

[7] Alex Graves, Greg Wayne, and Ivo Danihelka. Neural turing machines. arXiv preprint

arXiv:1410.5401, 2014.

[8] Alex Graves, Greg Wayne, Malcolm Reynolds, Tim Harley, Ivo Danihelka, Agnieszka Grabska-
Barwinska, Sergio G. Colmenarejo, Edward Grefenstette, Tiago Ramalho, John Agapiou,
AdriÃ P. Badia, Karl M. Hermann, Yori Zwols, Georg Ostrovski, Adam Cain, Helen King,
Christopher Summerﬁeld, Phil Blunsom, Koray Kavukcuoglu, and Demis Hassabis. Hybrid
computing using a neural network with dynamic external memory. Nature, advance online
publication, October 2016.

[9] Geoffrey Hinton, Li Deng, Dong Yu, George E Dahl, Abdel-rahman Mohamed, Navdeep
Jaitly, Andrew Senior, Vincent Vanhoucke, Patrick Nguyen, Tara N Sainath, et al. Deep neural
networks for acoustic modeling in speech recognition: The shared views of four research groups.
IEEE Signal Processing Magazine, 29(6):82–97, 2012.

[10] Robin Jia and Percy Liang. Data recombination for neural semantic parsing. In Association for

Computational Linguistics (ACL), 2016.

[11] Łukasz Kaiser and Ilya Sutskever.

Neural gpus learn algorithms.

arXiv preprint

arXiv:1511.08228, 2015.

[12] Arvind Neelakantan, Quoc V. Le, and Ilya Sutskever. Neural programmer: Inducing latent

programs with gradient descent. CoRR, abs/1511.04834, 2015.

[13] Scott Reed and Nando de Freitas. Neural programmer-interpreters. In ICLR, 2016.

[14] Ilya Sutskever, Oriol Vinyals, and Quoc V Le. Sequence to sequence learning with neural
networks. In Advances in neural information processing systems, pages 3104–3112, 2014.

[15] Ronald J. Williams. Simple statistical gradient-following algorithms for connectionist reinforce-

ment learning. In Machine Learning, pages 229–256, 1992.

[16] Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V. Le, Mohammad Norouzi, Wolfgang
Macherey, Maxim Krikun, Yuan Cao, Qin Gao, Klaus Macherey, Jeff Klingner, Apurva Shah,
Melvin Johnson, Xiaobing Liu, Lukasz Kaiser, Stephan Gouws, Yoshikiyo Kato, Taku Kudo,
Hideto Kazawa, Keith Stevens, George Kurian, Nishant Patil, Wei Wang, Cliff Young, Jason
Smith, Jason Riesa, Alex Rudnick, Oriol Vinyals, Greg Corrado, Macduff Hughes, and Jeffrey
Dean. Google’s neural machine translation system: Bridging the gap between human and
machine translation. CoRR, abs/1609.08144, 2016.

[17] Wen-tau Yih, Ming-Wei Chang, Xiaodong He, and Jianfeng Gao. Semantic parsing via
staged query graph generation: Question answering with knowledge base. In Association for
Computational Linguistics (ACL), 2015.

[18] Wen-tau Yih, Matthew Richardson, Chris Meek, Ming-Wei Chang, and Jina Suh. The value of
semantic parse labeling for knowledge base question answering. In Association for Computa-
tional Linguistics (ACL), 2016.

5

[19] Wojciech Zaremba and Ilya Sutskever. Reinforcement learning neural turing machines. arXiv

preprint arXiv:1505.00521, 2015.

6

