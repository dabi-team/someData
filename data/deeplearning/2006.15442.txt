A General Machine Learning Framework for
Survival Analysis

Andreas Bender((cid:0))1[0000−0001−5628−8611], David R¨ugamer1[0000−0002−8772−9202],
Fabian Scheipl1[0000−0001−8172−3603], and Bernd Bischl1[0000−0001−6002−6980]

LMU Munich, Department of Statistics, Ludwigstr. 33, 80539 Munich
andreas.bender@stat.uni-muenchen.de

Abstract. The modeling of time-to-event data, also known as survival
analysis, requires specialized methods that can deal with censoring and
truncation, time-varying features and eﬀects, and that extend to settings
with multiple competing events. However, many machine learning methods
for survival analysis only consider the standard setting with right-censored
data and proportional hazards assumption. The methods that do provide
extensions usually address at most a subset of these challenges and often
require specialized software that can not be integrated into standard
machine learning workﬂows directly. In this work, we present a very
general machine learning framework for time-to-event analysis that uses a
data augmentation strategy to reduce complex survival tasks to standard
Poisson regression tasks. This reformulation is based on well developed
statistical theory. With the proposed approach, any algorithm that can
optimize a Poisson (log-)likelihood, such as gradient boosted trees, deep
neural networks, model-based boosting and many more can be used in
the context of time-to-event analysis. The proposed technique does not
require any assumptions with respect to the distribution of event times
or the functional shapes of feature and interaction eﬀects. Based on
the proposed framework we develop new methods that are competitive
with specialized state of the art approaches in terms of accuracy, and
versatility, but with comparatively small investments of programming
eﬀort or requirements for specialized methodological know-how.

Keywords: Survival Analysis · Gradient Boosting · Neural Networks ·
Competing Risks · Multi-State Models

1

Introduction

Survival analysis is a branch of statistics that provides a framework for the
analysis of time-to-event data, i.e., the outcome is deﬁned by the time it takes
until an event occurs. Analysis of such data requires specialized techniques
because, in contrast to standard regression or classiﬁcation tasks,

(a) the outcome can often not be observed fully (censoring, truncation),
(b) the features can change their value during the observation period (time-

varying features (TVF),

1
2
0
2

r
p
A
7
1

]
L
M

.
t
a
t
s
[

2
v
2
4
4
5
1
.
6
0
0
2
:
v
i
X
r
a

 
 
 
 
 
 
2

A. Bender et al.

(c) the association of the feature(s) with the outcome changes over time (time-

varying eﬀects (TVE)),

(d) one or more other events occur that make it impossible to observe the event

of interest (competing risks (CR)),

(e) more generally, in a multi-state setting, observation units can move from and

to diﬀerent states (multi-state models (MSM)).

Failure to take these issues into consideration usually results in biased esti-
mates, incorrect interpretation of feature eﬀects on the outcome, loss of predictive
accuracy or a combination thereof. In this work, we use a reformulation of the
survival task to a standard regression task that provides a holistic approach to
survival analysis. Within this framework, censoring, truncation and time-varying
features (TVF) can be incorporated by speciﬁc data transformations and exten-
sions to time-varying eﬀects (TVE) as well as competing risks and multi-state
models can be re-expressed in terms of interaction eﬀects. This abstraction of the
survival task away from specialized algorithms is illustrated schematically in Fig-
ure 1. Task-appropriate pre-processing (leftmost subgraph) yields a standardized
data format that allows the estimation of feature-conditional hazard rates using
any learning algorithm that can minimize the negative Poisson log-likelihood,
such as, GBT, deep neural networks (DNN), regularization based methods, and
others (middle subgraph).

Fig. 1. An abstraction of survival analysis for diﬀerent tasks. The structure of the
piece-wise exponential data (PED) depends on the task requirements, e.g., left trun-
cation or competing risks. Given the appropriate pre-processing, the estimation step
is computationally independent of the survival task, except for an appropriate use of
interaction terms.

InputPEDpredictionvisualization...Gradient Boosted TreesDeep LearningModel Based Boosting .........Bayesian RegressionPreprocessing Computation Post-processingmultiple statesright censoringleft-truncationcompeting eventsTVFA General Machine Learning Framework for Survival Analysis

3

Our contributions
We deﬁne a general machine learning framework for survival analysis based on
piece-wise exponential models (cf. Section 2). Within this framework, diﬀerent
concepts speciﬁc to time-to-event data analysis can be understood in terms
of data augmentation and inclusion of interaction terms. By re-expressing the
survival task as a Poisson regression task, a large variety of algorithms become
available for survival analysis. Based on the proposed approach, we implement a
gradient boosted trees algorithm with comparatively low development eﬀort and
show that it achieves state-of-the-art performance (cf. Section 3).

Related work
The machine learning community has developed many highly eﬃcient methods
for high-dimensional settings in diﬀerent domains, including survival analysis.
The individual methods and implementations, however, often only support a
subset of the cases relevant for time-to-event analysis mentioned above. For
example, the random survival forest (RSF) proposed in [22] was later extended
to the competing risks setting [21], but does not support left-truncation, TVF
and TVE, or multistate models. Another popular implementation of random
forests [35] only supports right censored data and proportional hazards models.
An extension of RSF, the oblique RSF (ORSF, [23]) was shown to outperform
other RSF based algorithms, but has the same limitations. With respect to TVF
and TVE, a review of tree- and forest-based methods for survival analysis stated
that “the modeling of time–varying features and time–varying eﬀects deserves
much more attention” [6]. Similarly, a more recent review of machine learning
methods for survival analysis [34] only lists the time-dependent Cox model [25,
Ch. 9.2], and L1- and L2-regularized extensions thereof, as a possibility for the
inclusion of TVF.

Deep learning based methods for time-to-event data have also received much
attention lately. An early use of neural networks for Cox type models was proposed
by [10]. More recently, [31] presented a framework for deep single event survival
analysis based on a joint latent process for features and survival times using
deep exponential families. For competing risks data, a deep learning framework
based on Gaussian processes was described in [1]. Another recent framework is
DeepHit, which can handle competing risks using a custom loss function [28] and
was extended to handle TVF [27], but did not discuss left-truncation, multistate
models and TVE.

Boosting has also been a popular technique for high-dimensional survival
analysis. For example, [5] propose a Cox-type boosting approach for the estimation
of proportional sub-distribution hazards. A ﬂexible multi-state model based on
the stratiﬁed Cox partial likelihood in the context of model-based boosting
[17] is presented in [32]. Furthermore, an implementation of gradient boosted
trees (GBT) for the Cox PH model is also available for the popular XGBoost
implementation [8], which was also shown to perform well compared with the
ORSF [23]. Recently, [29] derived a custom algorithm for gradient boosted trees
that support TVF and demonstrate that their inclusion improves predictive
performance compared to boosting algorithms that don’t take TVF into account.

4

A. Bender et al.

Compared to methods based on Cox regression, few publications have devel-
oped methods based on the piece-wise exponential model, on which the framework
proposed here is based. Among them is an early application of neural networks
to survival analysis suggested in [30] and extended by [4]. The latter oﬀers a
general framework based on the representation of generalized linear models via
feed forward neural networks, but does not discuss MSM. Piece-wise exponential
trees with TVF and splits based on the piece-wise exponential survival function
were suggested by [19]. A spline based estimation of the hazard function was
discussed in [7], which could also be represented via neural networks (cf. [11]).
A ﬂexible estimation of piece-wise-exponential model based multi-state models
with shared eﬀects using structured fusion Lasso was developed in [33]. All of
these methods can be viewed as special cases within the proposed framework.
For example, [4] could be extended to diﬀerent neural network architectures and
MSMs, [19] could be extended to forests.

2 Survival Analysis as Poisson Regression

In the context of survival analysis, an observation usually consists of a tuple
(ti, δi, xi), where ti is the observed event time for observation unit i = 1, . . . , n,
δi ∈ {0, 1} is the event- or status-indicator (i.e. 1 if event occurred, 0 if the
observation of censored) and xi is the p-dimensional feature vector. The presence
of censoring requires special estimation techniques, as the time-to-event can
not be observed when censoring occurs before the event of interest. Thus ti =
min(Ti, Ci), where Ti and Ci random variables of the event time and censoring
time, respectively. A classic example is the time until death when censoring occurs
as patients drop out of the study (unrelated to the event of interest, Ti ⊥ Ci).
Left-truncation occurs when the event of interest already occurred before the
subject could be included into the sample and thus presents a form of sampling
bias. In some settings, another event could preclude observation of the event
of interest or change the probability of its occurrence. In this case we speak
of competing risks (CR), thus the observation consists of (ti, δi, k, xi), where
k = 1, . . . , K indicates the type of event that occurred at, ti if δi = 1. More
generally, there might be multiple states that the observation units can transition
from and to. We then speak of multi-state models (MSM) and k is an indicator
for diﬀerent transitions (cf. Eq. (8)).

In general, the goal of survival analysis is to estimate the conditional distri-
bution of event times deﬁned by the survival probability S(t|x) = P (T > t|x).
While some methods focus on the estimation of S(t|x) directly, it is often more
convenient to estimate the (log-)hazard

λ(t|x) := lim
∆t→0

P (t ≤ T < t + ∆t|T ≥ t, x)
∆t

from which S(t|x) follows as

(cid:18)

S(t|x) = exp

−

(cid:19)

λ(s|x)ds

.

(cid:90) t

0

(1)

(2)

A General Machine Learning Framework for Survival Analysis

5

Here we represent (1) via

λ(t|x(t)) = exp(g(x(t), t)),

(3)

where g is a general function of potentially TVF x(t), that can include high-order
feature interactions, non-linearity and time-dependence of feature eﬀects (TVE)
via an interaction with t.

In this work, we approximate (3) using the piece-wise exponential model [13].
Let ti the observed event or censoring time and δi ∈ {0, 1} the respective censoring
or event indicator for observation units i = 1, . . . , n. The distribution of censoring
times can depend on features but is assumed to be independent of the event time
process T . By partitioning the follow-up, i.e., the time span under investigation,
into j = 1, . . . , J intervals with cut-points κ0 = 0 < · · · < κJ and partitions
(κ0, κ1], . . . , (κj−1, κj], . . . (κJ−1, κJ ], we can rewrite (3) using piece-wise constant
hazard rates

λ(t|xi(t)) ≡ exp(g(xij, tj)) := λij, ∀t ∈ (κj−1, κj],

(4)

with tj a representation of time in interval j, e.g., tj := κj and xij the value of the
TVF in interval j. Depending on the desired resolution, additional cut-points can
be introduced at each time point at which feature values are updated, otherwise
multiple feature values have to be aggregated in one interval. This model assumes
that only the current value of xij aﬀects the hazard in interval j, but more
sophisticated approaches have been suggested within this framework that take
into account the entire history of TVF [3]. Piece-wise constant hazards imply
piece-wise exponential log-likelihood contributions

(cid:96)i = log(λ(ti; xi)δiS(ti; xi)) =

Ji(cid:88)

j=1

(δij log λij − λijtij) ,

(5)

where Ji is the last interval in which observation unit i was observed, such that
ti ∈ (κJi−1, κJi ] and

(cid:40)

δij =

ti ∈ (κj−1, κj] ∧ δi = 1

1
0 else

, tij =

(cid:40)

ti − κj−1
κj − κj−1

δij = 1
else

.

(6)

Concrete examples for the type of data transformations required to obtain (6)
for right-censored data (including TVF) are provided in [2] (cf. Tables 1 and 2.
iid∼ P oisson(µij = λijtij) and with f (δij)

Using the working assumption δij

the Poisson density function, [13] showed that the Poisson log-likelihood

(cid:96)i = log



f (δij)

 =





Ji(cid:89)

j=1

Ji(cid:88)

j=1

(δij log λij + δij log tij − λijtij)

(7)

is proportional to (5) and therefore the former can be minimized using Poisson
regression. Note that (7) can be directly extended to the setting with left-
truncated event times [16] by replacing j = 1 with ji, the ﬁrst interval in which

6

A. Bender et al.

observation unit i is in the risk set. The expectation is deﬁned by µij = λijtij =
exp(g(xij, tj) + log(tij)). For estimation, log(tij) is included as an oﬀset, thus
the hazard rate µij
= λij = g(xij, tj) is deﬁned as the conditional expectation of
tij
having an event in interval j divided by the time under risk. Note that the Poisson
assumption is simply a computational vehicle for the estimation of the hazard
(4) rather than an assumption about the distribution of the event times. Despite
the partition of the follow-up into intervals, this is a method for continuous event
times as the information about the time under risk in each interval is contained
in the oﬀset and thus used during estimation. The number and placement of cut
points controls the approximation of the hazard and could thus be viewed as a
potential tuning parameter. In our experience, however, setting cut-points at the
unique event times {ti : δi = 1, i = 1, . . . , n} in the training data always leads
to a good approximation (at least with enough regularization) as the number of
cut-points will increase in areas with many events. For larger data sets, however,
we recommend to set these cut-points on a smaller representative sub-sample of
the data set (cf. Section 4).

For the extension of (3) to MSMs, we deﬁne

λ(t|x, k) = exp (f (x(t), t, k)) , k = 1, . . . , K,

(8)

k where mk is the initial state and m(cid:48)

as the transition speciﬁc hazard for the transition indexed by k, i.e., k is an
index of transitions mk → m(cid:48)
k a transient
or absorbing state. The set of possible transitions is given by {mk → m(cid:48)
k : k =
1, . . . , K} ⊆ {m → m(cid:48) : m, m(cid:48) ∈ {0, . . . , M }, m (cid:54)= m(cid:48)}, where M + 1 denotes
the total number of possible states. f (x(t), t, k) is a function of potentially
time-varying features x(t), including multivariate and/or non-linear eﬀects. The
dependency of f (x(t), t, k) on time t (TVE) and transition k (MSM) is expressed
in terms of interactions by deﬁning ˜x := (x(t), t, k) and f (x(t), t, k) = f (˜x(t)).
Let ti,k be the event or censoring time w.r.t. transition mk → m(cid:48)
k and δi,k ∈ {0, 1}
the respective transition indicator. As extension of (6) we deﬁne

δij,k =

(cid:40)
1
0

ti,k ∈ (κj−1, κj] ∧ δi,k = 1
else,

, tij,k =

(cid:40)

ti,k − κj−1
κj − κj−1

δij,k = 1
else

.

k, m(cid:48)

Table 1 shows how the data must be transformed in order to estimate (8) via
PEMs for the competing risks setting, i.e., k = 1, . . . , K is an index of transitions
mk = 0 → m(cid:48)
k ∈ {1, . . . , M }; a concrete example is given in Table 2. For each
i = 1, . . . , n, there is one row for each interval the observation unit was under risk
for a speciﬁc transition. Thus, one data set is created for each transition such that
transitions to state m(cid:48)
k are encoded as 1 and everything else, i.e., censoring and
transition to other states is encoded as 0. These transition-speciﬁc data sets, each
containing a feature vector with the transition index k, are then concatenated.
Note that we used the same interval split points κj for all transitions in Table 1.
However, it would also be possible to choose transition speciﬁc cut-points κj,k,
or, more generally, even use multiple time-scales [20]. In the general multi-state
setting, the number of observation units under risk might depend on the transition

A General Machine Learning Framework for Survival Analysis

7

and the intervals visited by i are deﬁned by (ti,m, κji,k ], . . . , (κJi,k−1, κJi,K ], where
ti,m is the time-point at which i enters state m.

Table 1. Data structure after transformation to the piece-wise exponential data format
in the competing risks setting. Horizontal lines indicate a new observation unit i =
1, . . . , n. Double horizontal lines indicate a new transition indexed k = 1, . . . , K. As
before, Ji is the interval in which i was observed last, i.e., ti ∈ (κJi−1, κJi ]. Features
x depend on time via xi,p(t) = xij,p ∀t ∈ (κj−1, κj], p = 1, . . . , P . This is not a strict
requirement, as additional split points could be set at each time point a feature value is
updated. See Table 2 for a concrete example.

j

...

...

...

...

...

tj
t1
t2
...

t1
...
t1
...

i
δij,k
tij k
xij,P
xij,1 . . .
1 1 δ11,1
t11 1 x11,1 . . . x11,P
1 2 δ12,1
t12 1 x12,1 . . . x12,P
...
...
...
...
...
...
1 J1 δ1J1,1 tJ1 t1J1 1 x1J1,1 . . . x1J1,P
t21 1 x21,1 . . . x21,P
2 1 δ21,1
...
...
...
...
...
tn1 1 xn1,1 . . . xn1,P
n 1 δn1,1
...
...
...
...
...
...
n Jn δnJn,1 tJn tnJn 1 xnJn,1 . . . xnJn,P
t1
t11 2 x11,1 . . . x11,P
1 1 δ11,2
...
...
...
...
...
...
...
...
...
...
...
...
t11 K x11,1 . . . x11,P
1 1 δ11,K t1
...
...
...
...

...
...

...
...

...
...

...

...

...

...

...

...

...

In Section 3 we evaluate the suggested approach using an implementation
based on GBT that we refer to as GBT (PEM). As a concrete computing
engine we used the extreme gradient boosting (XGBoost) library [8] without
any alterations to the algorithm. Therefore all features of the library can be
used directly when estimating the hazard on the transformed data set. Note,
however, that depending on the algorithm used, one must be able to specify an
oﬀset during estimation and potentially some other, algorithm or implementation
speciﬁc settings. For example, when using XGBoost to estimate the GBT (PEM),
the objective function needs to be set to the Poisson objective and the base
score must be set to 1, because the default of 0.5 would imply a wrong oﬀset,
while log(1) = 0. The oﬀset (log(tij)) must be attached to the data via the
base margin argument during estimation. In contrast, for the prediction of the
conditional hazard λ(t|xi) = λij based on new data points, the oﬀset should be
omitted, otherwise the algorithm will predict ˆµij = ˆλij · tij (the expectation)

8

A. Bender et al.

Table 2. Data transformation for a hypotethical competing risks example (K = 2) for
3 subjects, i = 1, . . . , 3. Subject i = 1 experienced an event of type k = 2 at t1 = 1.3,
subject i = 3 experienced an event of type k = 1 at time t3 = 2.7, subject 2 was censored
at t2 = 0.5. Tables present the transformed data with intervals (0, 1], (1, 1.5], (1.5, 3] for
causes k = 1 (left) and k = 2 = K (right). These can be used to estimate cause speciﬁc
hazards, by applying the algorithm to each of the tables separately or cause speciﬁc
hazards with potentially shared eﬀects, by stacking the tables and using k as a feature.

i
1
1
2
3
3
3

j
1
2
1
1
2
3

δij
0
0
0
0
0
1

tj
1
1.5
1
1
1.5
3

tij
1
0.3
0.5
1
0.5
1.2

k
1
1
1
1
1
1

i
1
1
2
3
3
3

j
1
2
1
1
2
3

δij
0
1
0
0
0
0

tj
1
1.5
1
1
1.5
3

tij
1
0.3
0.5
1
0.5
1.2

k
2
2
2
2
2
2

(cid:16)

instead of ˆλj(x) (the hazard). When predicting the cumulative hazard or survival
probability, however, the time under risk in each interval must be taken into
− (cid:82) ˆλ(t|xi)dt
account, such that ˆS(t|xi) = exp
, where
j(t) indicates the interval for which t ∈ (κj−1, κj] and ˜tj = min(κj −κj−1, t−κj−1)
is the time spent in interval j. A prototype implementation of the GBT (PEM)
algorithm that takes these issues into account and also provides the necessary
helper functions for data transformation, estimation, tuning, prediction and
evaluation is provided at https://github.com/adibender/pem.xgb.

(cid:16)
− (cid:80)j(t)
j=1

ˆλij ˜tj

= exp

(cid:17)

(cid:17)

3 Experiments

We perform a set of benchmark experiments with real world and synthetic data
sets, exclusively using openly and directly available data, including a subset of
data sets from recent publications on oblique random survival forests (ORSF, [23])
and DeepHit [28]. DeepHit and ORSF both have been shown to outperform other
approaches such as RSF [22], conditional forests [18], regularized Cox regression
[12] and DeepSurv [31]. We compare our approach in benchmarks against the
two algorithms, which are evaluated separately based on evaluation measures
used in the respective publications to ensure comparability. All code to perform
respective analyses as well as additional supplementary ﬁles are provided in a
GitHub repository: https://github.com/adibender/machine-learning-for-
survival-ecml2020.

The data sets used for single event comparisons are listed in Table 3. The
“synthetic (TVE)” data set is created based on an additive predictor g(x, t) =
f0(x0, t) · 6 − 0.1 · x1 + f2(x2, t) + f3(x3, t), where f0, f2 and f3 are bivariate,
non-linear functions of the inputs (see code repository for details) and x0, . . . , x3

A General Machine Learning Framework for Survival Analysis

9

feature columns comprised in x. Additionally, 20 noise variables are drawn from
the uniform distribution U (0, 1).

For the comparison with ORSF, we use the Integrated Brier Score IBS(τ ) =
(cid:82) τ
0 (cid:99)BS(u, ˆS)du, where (cid:99)BS(t, ˆS) is the estimated Brier Score at time t weighted
1
τ
by the inverse probability of censoring weights [15] and ˆS the estimated survival
probability function of the respective algorithm. In addition, [23] report the time-
dependent C-Index [14]. We only consider the IBS here as it measures calibration
as well as discrimination, while the C-index only measures the latter. Note that
the IBS depends on the speciﬁc evaluation time τ and diﬀerent methods might
perform better at diﬀerent evaluation times. Therefore, we calculate the IBS for
three diﬀerent time-points, the 25%, 50% and 75% quantiles of the event times
in the test data, in the following referred to as Q25, Q50 and Q75, respectively.

Table 3. Data sets used in benchmark experiments for comparison with ORSF.

p censoring
n
name
61.90
412
14
1 PBC
78.20
614 1690
2 Breast
56.40
8
686
3 GBSG 2
4 Tumor
51.70
7
776
24 ∼ 33%
5 synthetic (TVE) 1000

For comparison with DeepHit, we use the metabric data set (cf. [28]) for
single event comparison as well as two CR data sets. The “MGUS 2” data is
described in [26]. The “synthetic (TVE CR)” data set is simulated using an
additive predictor identical to the one used for the “synthetic (TVE)” data
simulation for the ﬁrst cause. The predictor for the second cause, has a simpler
structure f0(x0, t) + 2 · x4 − .1 · x5, however, with non-proportional baseline hazard
with respect to x0 ∈ {−1, 1}. The number of noise variables is limited to 10
for this setting. Here we report the weighted C-index alongside the weighted
Brier Score as it was the main measure reported in [28]. The proposed GBT
(PEM) approach for CR (cf. Section 2) is a cause speciﬁc hazards model, however,
the parameters of both causes are estimated jointly and the hazards of both
causes can have shared eﬀects (see Figure 2). The simulation setting, therefore,
constitutes a diﬃcult setup because there are no shared eﬀects and optimization
w.r.t. the ﬁrst cause will favor parameters that allow ﬂexible models while the
optimization w.r.t. the second cause favors sparse models and thus parameters
that would restrict ﬂexibility.

3.1 Evaluation

We compare four algorithms, the non-parametric Kaplan Meier estimate (Refer-
ence) as a minimal baseline, the Cox proportional hazards model [9] (baseline
for linear, time-constant eﬀects), the Oblique Random Survival Forest (ORSF)

10

A. Bender et al.

Table 4. Data sets used for the comparison with DeepHit. MGUS2 and Synthetic
(TVE CR) are data set with two competing risks and additional right-censoring.

name
1981 79
METABRIC
MGUS 2
1384 6
Synthetic (TVE CR) 500 14

n p censoring (%)
55.20
29.6
∼ 23%

[23] and DeepHit [28]. For each experimental replication for a speciﬁc data set,
70% of the data is randomly assigned as training data and the remaining 30%
is used to calculate the evaluation measures at three time points Q25, Q50 and
Q75. Algorithms are tuned on the training data using random search with a
ﬁxed budget and 4-fold cross-validation. Each algorithm is then retrained on
the entire training data set using the best set of parameters before making ﬁnal
predictions on the test set. The random search consists of 20 iteration for each
algorithm. For the GBT (PEM), we deﬁne the search space as follows (possible
range in brackets): maximum tree depth {1, . . . , 20}, minimum loss reduction
[0, 5], minimum child weight {5, . . . , 50}, subsample percentage (rows) [0.5, 1],
subsample percentage of features in each tree [.5, 1], L2-regularization [1, 3]. The
learning rate is set to 0.05 and number of rounds to 5000, with early stopping
after 50 rounds without improvement. For the ORSF we tune the elastic net
mixing parameter (0, 1), the parameter that penalizes complexity of the linear
predictor in each node (0.25, 0.75), minimum number of events to split node
{5, . . . , 20} and minimum observations to split node {10, 40}. For DeepHit, we
use 50 random search iterations, where we search through {1,2,3,5} shared layers
with {50, 100, 200, 300} dimensions, {1,2,3,5} cause-speciﬁc network layers with
{50,100,200,300} dimensions, ReLU, eLU or Tanh as activation function in these
layers, a batch size in {32,64,128}, a maximum of 50000 iterations, a dropout rate
of 0.6 (taken from the original paper) and a learning rate of 0.0001. The network
speciﬁc parameters α and γ are also chosen in accordance with the original paper
and set to 1 and 0, respectively, while the network speciﬁc parameter β is varied
in the random search with possible values in {0.1, 0.5, 1, 3, 5}.

3.2 Results

The results for the experiments based on single-event scenarios comparison with
ORSF are summarized in Table 5. The proposed method performs well in many
settings in comparison to ORSF. Notably, both algorithms are often not much
better than the Cox PH models indicating that the PH assumption is not violated
strongly in those data sets and the sample size might be too small to detect small
deviations w.r.t. to non-linearity of feature eﬀects, interaction eﬀects and time-
varying eﬀects. The “synthetic (TVE)” setting illustrates that in the presence
of strong, non-linear and non-linearly TVE our approach clearly outperforms
the other methods. For the PBC data we additionally ran an analysis including
TVF with GBT (PEM). In this case, the inclusion of TVF resulted in a worse
performance (IBS of 4.3 (Q25), 6.4 (Q50) and 9.2 (Q75)), which indicates that the

A General Machine Learning Framework for Survival Analysis

11

inclusion of TVF lead to overﬁtting or that simple inclusion of the last observed
value and carrying the last value forward is not appropriate in this setting.

Table 5. Results of benchmark experiments for single event data comparing GBT
(PEM) with ORSF. Bold numbers indicate the best performance for each setting.

data

Kaplan-Meier Cox-PH ORSF GBT (PEM)

Breast

GBSG 2

Q25
Q50
Q75
Q25
Q50
Q75
Q25
Q50
Q75
Q25
synthetic (TVE) Q50
Q75
Q25
Q50
Q75

Tumor

PBC

1.9
4.1
7.2
3.1
6.8
12.5
5.4
9.1
14.0
9.8
19.2
23.7
6.7
12.3
17.6

-
−
−
3.1
6.5
11.4
3.7
5.3
8.1
7.3
10.3
11.1
6.0
11.2
16.3

2.0
4.0
6.7
2.9
6.2
11.1
4.0
6.1
8.6
7.0
9.9
11.7
5.5
10.8
16.2

2.0
4.0
6.7
3.0
6.4
11.3
3.8
5.5
7.8
4.6
6.7
8.6
5.8
10.9
16.2

Table 6 summarizes the results of comparisons with DeepHit. The GBT (PEM)
again shows good overall performance. For the synthetic data set our method
clearly outperforms the other approaches because it is capable of estimating
non-linearity as well as time-variation. On the MGUS 2 data set, DeepHit shows
the best performance for cause 1, while GBT (PEM) outperforms the other
approaches for cause 2. On the synthetic data, the cause-speciﬁc Cox-PH model
shows good discrimination (C-Index) for the second cause, but is worse than
GBT (PEM) and DeepHit w.r.t. to the Brier Score.

4 Algorithmic Details and Complexity Analysis

We now brieﬂy describe algorithmic details and discuss the complexity of the
resulting algorithms when using the proposed framework.

Algorithmic Details
The proposed framework is general in the sense that it transforms a survival task
into a regression task. Nevertheless, diﬀerent methods (and algorithms) have
diﬀerent strengths and weaknesses and diﬀerent strategies can be applied to
specify various alternative models within this framework. For example, in tree
based methods, time-variation of feature eﬀects could be controlled by allowing
interactions of the time variable only with a subset of features, e.g. based on prior

12

A. Bender et al.

Table 6. Results of benchmark experiments comparing GBT (PEM) with DeepHit for
single event and CR data. Bold numbers indicate the best performance for each setting.

cause 1

cause 2

data

METABRIC

MGUS 2

synthetic (TVE, CR)

index

C-Index

−
−
−
−
−
−

Brier Score DeepHit

63.7 65.1 64.7
68.6 63.3 54.9

method
Cox-PH
Brier Score DeepHit

Q25 Q50 Q75 Q25 Q50 Q75
−
13.3 22.1 26.4
−
−
14.3 23.5 27.0
−
−
GBT (PEM) 12.8 21.3 25.9 −
−
−
Cox-PH
−
DeepHit
−
GBT (PEM) 71.9 71.5 67.7 −
−
Cox-PH (CS) 23.6 43.7 64.3 13.4 20.5 22.3
22.8 41.0 57.8 14.9 27.0 41.5
GBT (PEM) 22.9 41.6 60.5 13.0 20.1 22.1
Cox-PH (CS) 66.7 65.9 62.4 68.8 69.4 70.1
59.6 57.0 52.3 65.5 67.2 68.6
DeepHit
GBT (PEM) 68.4 62.9 60.5 72.6 70.9 70.8
9.4 13.1 25.1 35.5 44.3 50.6
Cox-PH
9.5 16.0 28.9 33.0 38.8 41.0
Brier Score DeepHit
GBT (PEM) 7.2 11.6 20.6 30.1 38.0 43.6
90.2 89.5 85.4 86.5 83.9 81.6
Cox-PH
DeepHit
92.3 90.8 84.6 82.0 80.1 79.8
GBT (PEM) 93.9 92.2 87.5 80.9 80.8 81.0

C-Index

C-Index

information, and similarly in order to control shared vs. transition speciﬁc eﬀects
in the multi-state setting. Tree-based methods are particularly intuitive when
it comes to understanding the integration of TVE and extension to multi-state
models via interaction terms into the model. This is illustrated in Figure 2. For
example, in panel (A) of Figure 2, features and split points before the split w.r.t.
time indicate feature eﬀects common to all time-points. Once the data in panel
(A) is split w.r.t. time t, the predicted hazard will be diﬀerent for intervals with
κj < 3 and κj ≥ 3 for observations with x1 < .5. Similarly, in a multi-state setting
(panel (B) in Figure 2), splits above the split w.r.t. k indicate shared eﬀects for
all transitions, while splits below indicate diﬀerent eﬀects for transitions k < 2
vs. k ≥ 2. Forcing a split w.r.t. to k at the root node would be equivalent to an
estimation of cause speciﬁc hazards on each subset and no shared eﬀects.

Neural networks are particularly ﬂexible when it comes to the speciﬁcation
of diﬀerent PEMs. For example, the network could be split in two subnetworks,
one for the temporal component, one for features, which is equivalent to the
speciﬁcation of a proportional hazards model, while allowing for non-linearity and
high-dimensional interactions in feature eﬀects. Similarly, deﬁning subnetworks
of the time variable for each category of a categorical feature would imply a
stratiﬁed proportional hazards model.

Complexity Analysis
As described in the literature review, various approaches exist that account for

A General Machine Learning Framework for Survival Analysis

13

Fig. 2. Illustration of how TVE and shared vs. transitions speciﬁc eﬀects can be
understood in terms of feature interactions in tree based models.

special survival characteristics like TVF, CR or continuous time-scale prediction
by altering the underlying method. While adapting the structure of the algorithm
itself potentially increases the complexity of the method, our approach leaves the
algorithm of choice unchanged as diﬀerent time points and transitions are simply
included as features. This allows to employ commonly used prediction methods
without introducing further algorithmic complexity. We note, however, that our
approach might be improved upon in terms of scaling with respect to the number
of intervals J relative to the number of observations n. In the worst case, the
number of total data points is quadratic in n (or more precisely O(n(n + 1)/2))
when one interval cut-point is introduced for each observed event or censoring
time. We therefore propose a reﬁnement of the presented method that improves
run-times without forfeiting performance. Instead of setting cut-points at all
unique event times, we suggest to deﬁne cut points more sparsely, for example,
based on a sub-sample of the original data.

To investigate this strategy we conduct a scaling experiment where the sample
size was consecutively doubled starting from n = 400 up to n = 3200. For each
sample size, ten replications of one experiment as described for the “synthetic
TVE” setting in Section 3 were performed and the elapsed time (hours) as well as
performance (IBS) for two diﬀerent strategies of cut-point selection was measured.
The ﬁrst strategy (full) uses all event times (ti where δi = 1) as cut-points. The
second strategy (sub-sample) is equivalent to the ﬁrst strategy, but event times
were chosen based on a sub-sample of n(cid:48) = 200, selected randomly from the
training data in each iteration. Results in Table 7 show that the “sub-sample”
strategy leads to an approximately linear increase in computation time while
the performance remains virtually unchanged. Potentially, a sparser choice of

x1tx2x1 < .5x1 ≥ .5t < 3t ≥ 3x1kx2x1 < .5x1 ≥ .5k < 2k ≥ 2(A)(B)14

A. Bender et al.

cut-points could also lead to a more robust and thus improved hazard estimation,
as more events are available in each interval, but we did not conduct a formal
investigation in that regard.

Table 7. Results of the scaling experiments with n the number of observation in the
simulated data. “strategy” refers to the way interval cut-points were selected with
“full” splits at all unique event times (ti where δi = 1) and “sub-sample” refers to the
selection of cut-points based on unique event times based on a random sub-sample of
size n(cid:48) = 200 (but all observations were used for estimation). Mean time (in hours) and
IBS over 10 replications are reported for each setting.

time (hours) full

strategy

n
400 800 1600 3200
0.10 0.48 2.49 8.94
sub-sample 0.09 0.20 0.51 1.04
full
8.10 6.50 6.40 5.90
sub-sample 8.00 6.40 6.20 5.90

IBS

5 Conclusion

We have presented a general machine learning framework for time-to-event analy-
sis based on a data augmentation strategy that reduces a large variety of survival
analysis tasks to the optimization of a Poisson likelihood. We demonstrated its
versatility and state-of-the-art performance. The availability of Poisson regression
for most machine learning frameworks provides additional practical advantages.
For example, photon-ML [37] is a scalable machine learning library for Apache
Spark [36] that has no native support for survival analysis, but implements
generalized linear mixed models. Therefore, survival modeling with high cardinal-
ity random eﬀects (frailty) is directly available using our framework. Similarly,
lightGBM [24], a high-performance implementation of GBT, currently has no
implementation of survival methods, but could be also used for high-dimensional
survival tasks based on PEMs, including reliability analysis or churn analysis
with intermediate states.

Acknowledgements:

This work has been funded by the German Federal Ministry of Education and
Research (BMBF) under Grant No. 01IS18036A. The authors of this work take
full responsibilities for its content.

A General Machine Learning Framework for Survival Analysis

15

References

1. Alaa, A.M., van der Schaar, M.: Deep multi-task gaussian processes for survival
analysis with competing risks. In: Proceedings of the 31st International Conference
on Neural Information Processing Systems, pp. 2326–2334 (2017)

2. Bender, A., Groll, A., Scheipl, F.: A generalized additive model approach to time-

to-event analysis. Statistical Modelling p. 1471082X17748083 (2018)

3. Bender, A., Scheipl, F., Hartl, W., Day, A.G., K¨uchenhoﬀ, H.: Penalized estimation
of complex, non-linear exposure-lag-response associations. Biostatistics (2018)
4. Biganzoli, E., Boracchi, P., Marubini, E.: A general framework for neural network
models on censored survival data. Neural Networks 15(2), 209–218 (Mar 2002)
5. Binder, H., Allignol, A., Schumacher, M., Beyersmann, J.: Boosting for high-
dimensional time-to-event data with competing risks. Bioinformatics 25(7), 890–896
(Apr 2009), publisher: Oxford Academic

6. Bou-Hamad, I., Larocque, D., Ben-Ameur, H.: A review of survival trees. Statistics

Surveys 5, 44–71 (2011)

7. Cai, T., Hyndman, R.J., Wand, M.P.: Mixed model-based hazard estimation. Journal

of Computational and Graphical Statistics 11(4), 784–798 (2002)

8. Chen, T., Guestrin, C.: XGBoost: A Scalable Tree Boosting System. Proceedings
of the 22nd ACM SIGKDD International Conference on Knowledge Discovery and
Data Mining - KDD ’16 pp. 785–794 (2016), arXiv: 1603.02754

9. Cox, D.R.: Regression Models and Life-Tables. Journal of the Royal Statistical

Society. Series B (Methodological) (Vol. 34, No. 2.), 187–220 (1972)

10. Faraggi, D., Simon, R.: A neural network model for survival data. Statistics in

Medicine 14(1), 73–82 (1995)

11. Fornili, M., Ambrogi, F., Boracchi, P., Biganzoli, E.: Piecewise Exponential Artiﬁ-
cial Neural Networks (PEANN) for Modeling Hazard Function with Right Censored
Data. In: Formenti, E., Tagliaferri, R., Wit, E. (eds.) Computational Intelligence
Methods for Bioinformatics and Biostatistics. pp. 125–136. Lecture Notes in Com-
puter Science, Springer International Publishing, Cham (2014)

12. Friedman, J.H., Hastie, T., Tibshirani, R.: Regularization Paths for Generalized
Linear Models via Coordinate Descent. Journal of Statistical Software 33(1), 1–22
(Feb 2010), number: 1

13. Friedman, M.: Piecewise exponential models for survival data with covariates. The

Annals of Statistics 10(1), 101–113 (1982)

14. Gerds, T.A., Kattan, M.W., Schumacher, M., Yu, C.: Estimating a time-dependent
concordance index for survival prediction models with covariate dependent censoring.
Statistics in Medicine 32(13), 2173–2184 (Jun 2013)

15. Gerds, T.A., Schumacher, M.: Consistent Estimation of the Expected Brier Score
in General Survival Models with Right-Censored Event Times. Biometrical Journal
48(6), 1029–1040 (Dec 2006)

16. Guo, G.: Event-History Analysis for Left-Truncated Data. Sociological Methodology

23, 217–243 (1993)

17. Hothorn, T., B¨uhlmann, P.: Model-based boosting in high dimensions. Bioinfor-

matics 22(22), 2828–2829 (2006)

18. Hothorn, T., Hornik, K., Zeileis, A.: Unbiased recursive partitioning: a conditional
inference framework. Journal of Computational and Graphical Statistics 15(3),
651–674 (2006)

19. Huang, X., Chen, S., Soong, S.j.: Piecewise Exponential Survival Trees with Time-
Dependent Covariates. Biometrics 54(4), 1420–1433 (1998), publisher: [Wiley,
International Biometric Society]

16

A. Bender et al.

20. Iacobelli, S., Carstensen, B.: Multiple time scales in multi-state models. Statistics

in Medicine 32(30), 5315–5327 (Dec 2013)

21. Ishwaran, H., Gerds, T.A., Kogalur, U.B., Moore, R.D., Gange, S.J., Lau, B.M.:
Random survival forests for competing risks. Biostatistics 15(4), 757–773 (Oct
2014), publisher: Oxford Academic

22. Ishwaran, H., Kogalur, U.B., Blackstone, E.H., Lauer, M.S.: Random survival

forests. The Annals of Applied Statistics 2(3), 841–860 (2008)

23. Jaeger, B.C., Long, D.L., Long, D.M., Sims, M., Szychowski, J.M., Min, Y.I.,
Mcclure, L.A., Howard, G., Simon, N.: Oblique random survival forests. The Annals
of Applied Statistics 13(3), 1847–1883 (Sep 2019)

24. Ke, G., Meng, Q., Finley, T., Wang, T., Chen, W., Ma, W., Ye, Q., Liu, T.Y.:
LightGBM: A Highly Eﬃcient Gradient Boosting Decision Tree. In: Guyon, I.,
Luxburg, U.V., Bengio, S., Wallach, H., Fergus, R., Vishwanathan, S., Garnett,
R. (eds.) Advances in Neural Information Processing Systems 30, pp. 3146–3154.
Curran Associates, Inc. (2017)

25. Klein, J.P., Moeschberger, M.L.: Survival analysis: techniques for censored and

truncated data. Springer Science & Business Media (2006)

26. Kyle, R.A., Therneau, T.M., Rajkumar, S.V., Oﬀord, J.R., Larson, D.R., Plevak,
M.F., Melton, L.J.: A Long-Term Study of Prognosis in Monoclonal Gammopathy
of Undetermined Signiﬁcance. New England Journal of Medicine 346(8), 564–569
(Feb 2002)

27. Lee, C., Yoon, J., Schaar, M.v.d.: Dynamic-DeepHit: A Deep Learning Approach
for Dynamic Survival Analysis With Competing Risks Based on Longitudinal Data.
IEEE transactions on bio-medical engineering 67(1), 122–133 (2020)

28. Lee, C., Zame, W.R., Yoon, J., Schaar, M.v.d.: DeepHit: A Deep Learning Approach
to Survival Analysis With Competing Risks. In: Thirty-Second AAAI Conference
on Artiﬁcial Intelligence (Apr 2018)

29. Lee, D.K.K., Chen, N., Ishwaran, H.: Boosted nonparametric hazards with time-
dependent covariates. arXiv:1701.07926 [stat] (Nov 2019), arXiv: 1701.07926
30. Liestbl, K., Andersen, P.K., Andersen, U.: Survival analysis and neural nets. Statis-

tics in Medicine 13(12), 1189–1200 (1994)

31. Ranganath, R., Perotte, A., Elhadad, N., Blei, D.: Deep Survival Analysis.

arXiv:1608.02158 (Aug 2016)

32. Reulen, H., Kneib, T.: Boosting multi-state models. Lifetime Data Analysis pp.

1–22 (May 2015)

33. Sennhenn-Reulen, H., Kneib, T.: Structured fusion lasso penalized multi-state

models. Statistics in Medicine 35(25), 4637–4659 (2016)

34. Wang, P., Li, Y., Reddy, C.K.: Machine Learning for Survival Analysis: A Survey.

ACM Computing Surveys (CSUR) 51(6), 110:1–110:36 (Feb 2019)

35. Wright, M.N., Ziegler, A.: ranger: A Fast Implementation of Random Forests for
High Dimensional Data in C++ and R. Journal of Statistical Software 77(1), 1–17
(Mar 2017)

36. Zaharia, M., Xin, R.S., Wendell, P., Das, T., Armbrust, M., Dave, A., Meng, X.,
Rosen, J., Venkataraman, S., Franklin, M.J., Ghodsi, A., Gonzalez, J., Shenker, S.,
Stoica, I.: Apache spark: A uniﬁed engine for big data processing. Commun. ACM
59(11), 56–65 (Oct 2016)

37. Zhang, X., Zhou, Y., Ma, Y., Chen, B.C., Zhang, L., Agarwal, D.: Glmix: Generalized
linear mixed models for large-scale response prediction. In: Proceedings of the 22nd
ACM SIGKDD International Conference on Knowledge Discovery and Data Mining.
pp. 363–372 (2016)

