8
1
0
2

r
a

M
2
2

]
L
C
.
s
c
[

2
v
9
8
5
6
0
.
2
0
7
1
:
v
i
X
r
a

Neural Multi-Step Reasoning for Question Answering
on Semi-Structured Tables

Till Haug, Octavian-Eugen Ganea and Paulina Grnarova

Department of Computer Science
ETH Zurich, Switzerland
till@veezoo.com, octavian.ganea@inf.ethz.ch, paulina.grnarova@inf.ethz.ch

Abstract. We explore neural network models for answering multi-step reason-
ing questions that operate on semi-structured tables. Challenges arise from deep
logical compositionality and domain openness. Our approach is weakly super-
vised, trained on question-answer-table triples. It generates human readable logi-
cal forms from natural language questions, which are then ranked based on word
and character convolutional neural networks. A model ensemble achieved at the
moment of publication state-of-the-art score on the WikiTableQuestions dataset.

1

Introduction

Teaching computers to answer complex natural language questions requires sophis-
ticated reasoning and human language understanding. We investigate generic natural
language interfaces for simple arithmetic questions on semi-structured tables. Typical
questions for this task are topic independent and may require performing multiple dis-
crete operations such as aggregation, comparison, superlatives or arithmetics.

We propose a weakly supervised neural model that eliminates the need for expen-
sive feature engineering in the candidate ranking stage. Each natural language question
is translated using the method of [8] into a set of machine understandable candidate
representations, called logical forms or programs. Then, the most likely such program
is retrieved in two steps: i) using a simple algorithm, logical forms are transformed
back into paraphrases (textual representations) understandable by non-expert users, ii)
next, these strings are further embedded together with their respective questions in a
jointly learned vector space using convolutional neural networks over character and
word embeddings. Multi-layer neural networks and bilinear mappings are further em-
ployed as effective similarity measures and combined to score the candidate interpreta-
tions. Finally, the highest ranked logical form is executed against the input data to re-
trieve the answer. Our method uses only weak-supervision from question-answer-table
input triples, without requiring expensive annotations of gold logical forms.

We empirically test our approach on a series of experiments on WikiTableQues-
tions, to our knowledge the only dataset designed for this task. An ensemble of our best
models reached state-of-the-art accuracy of 38.7% at the moment of publication.

 
 
 
 
 
 
2

2 Related Work

We brieﬂy mention here two main types of QA systems related to our task1: seman-
tic parsing-based and embedding-based. Semantic parsing-based methods perform a
functional parse of the question that is further converted to a machine understandable
program and executed on a knowledgebase or database. For QA on semi-structured ta-
bles with multi-compositional queries, [8] generate and rank candidate logical forms
with a log-linear model, resorting to hand-crafted features for scoring. As opposed,
we learn neural features for each question and the paraphrase of each candidate logi-
cal form. Paraphrases and hand-crafted features have successfully facilitated semantic
parsers targeting simple factoid [1] and compositional questions [10]. Compositional
questions are also the focus of [7] that construct logical forms from the question embed-
ding through operations parametrized by RNNs, thus losing interpretability. A similar
fully neural, end-to-end differentiable network was proposed by [11].

Embedding-based methods determine compatibility between a question-answer pair
using embeddings in a shared vector space [2]. Embedding learning using deep learning
architectures has been widely explored in other domains, e.g. in the context of sentiment
classiﬁcation [3].

3 Model

We describe our QA system. For every question q : i) a set of candidate logical forms
{zi}i=1,...,nq is generated using the method of [8]; ii) each such candidate program
zi is transformed in an interpretable textual representation ti ; iii) all ti’s are jointly
embedded with q in the same vector space and scored using a neural similarity function;
iv) the logical form z∗
i is selected as the machine-
understandable translation of question q and executed on the input table to retrieve the
ﬁnal answer. Our contributions are the novel models that perform steps ii) and iii), while
for step i) we rely on the work of [8] (henceforth: PL2015).

i corresponding to the highest ranked t∗

3.1 Candidate Logical Form Generation

We generate a set of candidate logical forms from a question using the method of [8].
Only brieﬂy, we review this method. Speciﬁcally, a question is parsed into a set of can-
didate logical forms using a semantic parser that recursively applies deduction rules.
Logical forms are represented in Lambda DCS form [6] and can be executed on a table
to yield an answer. An example of a question and its correct logical form are below:
How many people attended the last Rolling Stones concert?
R[λx[Attendance.Number.x]].argmax(Act.RollingStones,Index).

1 An extensive list of open-domain QA publications can be found here: https://aclweb.

org/aclwiki/Question_Answering_(State_of_the_art)

3

3.2 Converting Logical Forms to Text

In Algorithm 1 we describe how logical forms are transformed into interpretable textual
representations called ”paraphrases”. We choose to embed paraphrases in low dimen-
sional vectors and compare these against the question embedding. Working directly
with paraphrases instead of logical forms is a design choice, justiﬁed by their inter-
pretability, comprehensibility (understandability by non-technical users) and empirical
accuracy gains. Our method recursively traverses the tree representation of the logi-
cal form starting at the root. For example, the correct candidate logical form for the
question mentioned in section 3.1, namely How many people attended the
last Rolling Stones concert?, is mapped to the paraphrase Attendance
as number of last table row where act is Rolling Stones.

3.3

Joint Embedding Model

We embed the question together with the paraphrases of candidate logical forms in a
jointly learned vector space. We use two convolutional neural networks (CNNs) for
question and paraphrase embeddings, on top of which a max-pooling operation is ap-
plied. The CNNs receive as input token embeddings obtained as described below.

Algorithm 1 Recursive paraphrasing of a Lambda DCS logical form. The + operation
means string concatenation with spaces. Lambda DCS language is detailed in [6].

(cid:46) z is the root of a Lambda DCS logical form

(cid:46) e.g. count, max, min...

t ← AGGREGATION(z) + PARAPHRASE(z.child)

t ← PARAPHRASE(z.relation) + PARAPHRASE(z.child)

(cid:46) join on relations, e.g. λx.Country(x, Australia)

case Join

switch z do

case Reverse

case Aggregation

1: procedure PARAPHRASE(z)
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18: end procedure

case Superlative

t ← z.value

case LambdaFormula

case Value

return t

t ← PARAPHRASE(z.child)

t ← PARAPHRASE(z.body)

case Arithmetic or Merge

(cid:46) reverses a binary relation

(cid:46) lambda expression λx.[...]

(cid:46) e.g. plus, minus, union...

(cid:46) e.g. argmax(x, value)

t ← PARAPHRASE(z.lef t) + OPERATION(z) + PARAPHRASE(z.right)

t ← OPERATION(z) + PARAPHRASE(z.value) + PARAPHRASE(z.relation)

(cid:46) t is the textual paraphrase of the Lambda DCS logical form

(cid:46) i.e. constants

Token Embedding The embedding of an input word sequence (e.g. question, para-
phrase) is depicted in Figure 1 and is similar to [4]. Every token is parametrized by

4

Fig. 1: Conversion of a sentence into a token embedding matrix using word embeddings
and char CNNs. The resulting matrix is again fed to a CNN/RNN (not pictured) to
produce a sentence embedding. Fig. inspired from [4].

learnable word and character embeddings. The latter help dealing with unknown tokens
(e.g. rare words, misspellings, numbers or dates). Token vectors are then obtained us-
ing a CNN (with multiple ﬁlter widths) over the constituent characters , followed by a
max-over-time pooling layer and concatenation with the word vector.

Sentence Embedding We map both the question q and the paraphrase t into a joint vec-
tor space using sentence embeddings obtained from two jointly trained CNNs. CNNs’
ﬁlters span a different number of tokens from a width set L. For each ﬁlter width l ∈ L,
we learn n different ﬁlters, each of dimension Rl×d, where d is the word embedding
size. After the convolution layer, we apply a max-over-time pooling on the resulting
feature matrices which yields, per ﬁlter-width, a vector of dimension n. Next, we con-
catenate the resulting max-over-time pooling vectors of the different ﬁlter-widths in L
to form our sentence embedding. The ﬁnal sentence embedding size is n|L|.

Neural Similarity Measures Let u, v ∈ Rd be the sentence embeddings of question
q and of paraphrase t. We experiment with the following similarity scores: i) DOT-
PRODUCT : uT v ; ii) BILIN : uT Sv , with S ∈ Rd×d being a trainable matrix; iii)
FC: u and v concatenated, followed by two sequential fully connected layers with ELU
non-linearities; iv) FC-BILIN: weighted average of BILIN and FC. These models de-
ﬁne parametrized similarity scoring functions Φ : Q × T → R, where Q is the set of
natural language questions and T is the set of paraphrases of logical forms.

3.4 Training Algorithm

For training, we build two sets P (positive) and N (negative) consisting of all pairs
(q, t) ∈ Q × T of questions and paraphrases of candidate logical forms generated

5

as described in Section 3.1. A pair is positive or negative if its logical form gives the
correct or respectively incorrect gold answer when executed on the corresponding table.
During training, we use the ranking hinge loss function (with margin θ):

L(P, N ) =

(cid:88)

(cid:88)

p∈P

n∈N

max(0,θ − Φ(p) + Φ(n))

4 Experiments

Dataset: For training and testing we use the train-validation-test split of WikiTable-
Questions [8], a dataset containing 22,033 pairs of questions and answers based on
2,108 Wikipedia tables. This dataset is also used by our baselines, [8,7]. Tables are not
shared across these splits, which requires models to generalize to unseen data. We ob-
tain about 3.8 million training triples (q, t, l), where l is a binary indicator of whether
the logical form gives the correct gold answer when executed on the corresponding
table. 76.7% of the questions have at least one correct candidate logical form when
generated with the model of [8].

Baseline Systems
Neural Programmer [7]
(single model)
Neural Programmer [7]
(15 ensemble models)
PL2015 [8]

P@1

34.2%

37.7%

37.1%

Our Models
CNN-DOTPRODUCT
CNN-BILIN
CNN-FC
RNN-FC-BILIN
CNN-FC-BILIN (best single model)
CNN-FC-BILIN (15 ensemble models)

P@1
31.4%
20.4%
30.4%
29.6%
34.8%
38.7%

Table 1: Precision@1 of various baselines and our models on the WikiTableQuestions
dataset.

Question

Which association entered last?

What is the total of all the medals?

How many episodes were originally
aired before December 1965?

Paraphrase (gold vs predicted)
association of last row
association of row with highest number of joining year
count all rows
number of total of nation is total
count original air date as date <= 12 1965
count original air date as date <12 1965

Table 2: Example of common errors of our model.

Training Details: Our models are implemented using TensorFlow and trained on
a single Tesla P100 GPU. Training takes approximately 6 hours. We initialize word
vectors with 200 dimensional GloVe ([9]) pre-trained vectors. For the character CNN

6

we use widths spanning 1, 2 and 3 characters. The sentence embedding CNNs use
widths of L = {2, 4, 6, 8}. The fully connected layers in the FC models have 500
hidden neurons, which we regularize using 0.8-dropout. The loss margin θ is set to 0.2.
Optimization is done using Adam [5] with a learning rate of 7e-4. Hyperparameters are
tunned on the development data split of the Wiki-TableQuestions table. We choose the
best performing model on the validation set using early stopping.

Results: Experimental results are shown in Table 1. Our best performing single
model is FC-BILIN with CNNs, Intuitively, BILIN and FC are able to extract differ-
ent interaction features between the two input vectors, while their linear combination
retains the best of both models. An ensemble of 15 single CNN-FC-BILIN models
was setting (at the moment of publication) a new state-of-the-art precision@1 for this
dataset: 38.7%. This shows that the same model initialized differently can learn dif-
ferent features. We also experimented with recurrent neural networks (RNNs) for the
sentence embedding since these are known to capture word order better than CNNs.
However, RNN-FC-BILIN performs worse than its CNN variant.

There are a few reasons that contributed to the low accuracy obtained on this task by
various methods (including ours) compared to other NLP problems: weak supervision,
small training size and a high percentage of unanswerable questions.

Error Analysis: The questions our models do not answer correctly can be split
into two categories: either a correct logical form is not generated, or our scoring models
do not rank the correct one at the top. We perform a qualitative analysis presented in
Table 2 to reveal common question types our models often rank incorrectly. The ﬁrst
two examples show questions whose correct logical form depends on the structure of the
table. In these cases a bias towards the more general logical form is often exhibited. The
third example shows that our model has difﬁculty distinguishing operands with slight
modiﬁcation (e.g. smaller and smaller equals), which may be due to weak-supervision.

System
CNN-FC-BILIN
w/o Dropout
w/o Char Embeddings
w/o GloVe (random init)
w/o Paraphrasing

P@1
34.1%
33.3%
33.8%
32.4%
33.1%

System
Lookup

Aggregation &
Next/Previous

Superlatives
Arithmetic & Comparisons

Amount
10.8%

39.8%

30.1%
19.3%

Table 3: Ablation studies. Left: Component contributions to our model. Right: Types of
questions answered correctly by our system.

Ablation Studies: For a better understanding of our model, we investigate the
usefulness of various components with an ablation study shown in Table 3. In particular,
we emphasize that replacing the paraphrasing stage with the raw strings of the Lambda
DCS expressions resulted in lower precision@1, which conﬁrms the utility of this stage.
Analysis of Correct Answers: We analyze how well our best single model per-
forms on various question types. For this, we manually annotate 80 randomly chosen
questions that are correctly answered by our model and report statistics in Table 3.

7

5 Conclusion

In this paper we propose a neural network QA system for semi-structured tables that
eliminates the need for manually designed features. Experiments show that an ensemble
of our models reaches competitive accuracy on the WikiTableQuestions dataset, thus
indicating its capability to answer complex, multi-compositional questions. Our code is
available at https://github.com/dalab/neural_qa .

Acknowledgments

This research was supported by the Swiss National Science Foundation (SNSF) grant
number 407540 167176 under the project ”Conversational Agent for Interactive Access
to Information”.

References

1. Jonathan Berant and Percy Liang. Semantic parsing via paraphrasing. In ACL (1), pages

1415–1425, 2014.

2. Antoine Bordes, Sumit Chopra, and Jason Weston. Question answering with subgraph em-

beddings. arXiv preprint arXiv:1406.3676, 2014.

3. Yoon Kim. Convolutional neural networks for sentence classiﬁcation. In In EMNLP. Cite-

seer, 2014.

4. Yoon Kim, Yacine Jernite, David Sontag, and Alexander M Rush. Character-aware neural
language models. In Proceedings of the Thirtieth AAAI Conference on Artiﬁcial Intelligence,
pages 2741–2749. AAAI Press, 2016.

5. Diederik Kingma and Jimmy Ba. Adam: A method for stochastic optimization. arXiv

preprint arXiv:1412.6980, 2014.

6. Percy Liang. Lambda dependency-based compositional semantics. arXiv:1309.4408, 2013.
7. Arvind Neelakantan, Quoc V Le, Martin Abadi, Andrew McCallum, and Dario Amodei.
Learning a natural language interface with neural programmer. arXiv:1611.08945, 2016.
8. Panupong Pasupat and Percy Liang. Compositional semantic parsing on semi-structured
tables. In In Proceedings of the Annual Meeting of the Association for Computational Lin-
guistics. Citeseer, 2015.

9. Jeffrey Pennington, Richard Socher, and Christopher D Manning. Glove: Global vectors for

word representation. In EMNLP, volume 14, pages 1532–1543, 2014.

10. Yushi Wang, Jonathan Berant, Percy Liang, et al. Building a semantic parser overnight. In

ACL (1), pages 1332–1342, 2015.

11. Pengcheng Yin, Zhengdong Lu, Hang Li, and Ben Kao. Neural enquirer: learning to query
tables in natural language. In Proceedings of the Twenty-Fifth International Joint Conference
on Artiﬁcial Intelligence, pages 2308–2314. AAAI Press, 2016.

