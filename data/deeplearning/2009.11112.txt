0
2
0
2

p
e
S
3
2

]

G
L
.
s
c
[

1
v
2
1
1
1
1
.
9
0
0
2
:
v
i
X
r
a

ANNDOTNET - DEEP LEARNING TOOL ON .NET PLATFORM

Bahrudin I. Hrnjica∗
Faculty of Engineering Sciences
University of Bihac
77000, Bihac
Bosnia and Herzegovina
bahrudin-hrnjica@unbi.ba

September 24, 2020

ABSTRACT

ANNdotNET – is an open source project for deep learning written in C# with ability to create, train,
evaluate and export deep learning models. The project consists of the Graphical User Interface module
capable to visually prepare data, ﬁne tune hyper-parameters, design network architecture, evaluate
and test trained models. The ANNdotNET introduces the Visual Network Designer, (VND) for
visually design almost any sequential deep learning network. Beside VND, ANNdotNET implements
Machine Learning Engine, (MLE) based on CNTK - deep learning framework, with ability to train
and evaluate models on GPU. For model evaluation ANNdotNET contains rich set of visual and
descriptive performance parameters, history of the training process and set of export/deployment
options. The advantage of using ANNdotNET over the classic code based ML approach is more focus
on deep learning network design and training process instead of focusing on coding and debugging.
It is ideal for engineers not familiar with supported programming languages. The project is hosted at
http://github.com/bhrnjica/anndotnet.

Keywords ANNdotNET · .NET · ANN · Deep Learning · Machine Learning

1

Introduction

ANNdotNET – is .NET based solution consisting of set of tools for running deep learning models. The process of
creating, training, evaluating and exporting models is provided by the GUI based Application and does not require
knowledge for supported programming language. The ANNdotNET GUI Tool implements functionalities for data
preparation prior to training process. The module consists of functionalities for data cleaning, feature selection, category
encoding, missing values handling, creation of training and validation set. Once the data is prepared, the user can create
empty DL model to start building, training and evaluate it.

ANNdotNET introduces the Visual Network Designer, VND for visually design deep neural networks. Design process
is completely visual and no coding is required. It helps the user to focus on deep network design rather than debugging
the code. VND supports the most popular and widely used network layers such as Dense, LSTM, Convolutional,Pooling,
DropOut, etc. Also VND can be used in order to design more complex layers such as AutoEncoders, Embedding, etc.

ANNdotNET introduces the ANNdotNET Machine Learning Engine (MLE) which is responsible for training and
evaluation of DL models. The MLE relies on Microsoft Cognitive Toolkit (CNTK) open source library developed by
Microsoft[2].

For evaluation and test of the trained DL models, ANNdotNET provides set of visually presented performance
parameters that can be used for regression, binary and multi-class classiﬁcation models, history of the training process,
early stopping, etc.

∗Personal web page: http://bhrnjica.net, GitHub: http://github.com/bhrnjica.

 
 
 
 
 
 
SEPTEMBER 24, 2020

Information collected during DL creation process are stored in the set of hierarchically organized ﬁles. In ANNdotNET
stores information into several different ﬁle types such as: project ﬁle (*.ann), mlconﬁng ﬁle (*.mlconﬁg), data ﬁle
(*.txt), history ﬁle (*.history). Each ﬁle stores different kind of information important for the ML project.

1.1 ANNdotNET key features

As a desktop application ANNdotNET is suitable in several scenarios over the classic code based ML approaches:

• more focus on network development and training process using classic desktop approach, instead of focusing

on coding,

• less time spending on debugging source code, more focusing on different conﬁguration and parameter variants,

• fast development of deep learning network which can be quickly tested and implemented

• ideal for engineers/users who are not familiar with programming languages,

• in case the problem requires more complex scenarios where additional coding implementation is required, the

ANNdotNET provides high level API for such implementation,

• all ML conﬁgurations developed with GUI tool,can be handled with command line based tool and vice versa.

1.2 ANNdotNET Start Page

In order to easy start working with, ANNdotNET comes with dozens of pre-calculated deep learning projects included
in the installer. They can be accessed from the Start page. The pre-calculated projects are based on famous datasets from
several categories: regression, binary and multi class classiﬁcation problems, image classiﬁcations, times series, etc. In
pre-calculated projects the user can ﬁnd how to use various types of deep neural network conﬁgurations. Also, each
pre-calculated project can be modiﬁed in terms of change its network conﬁguration, learning and training parameters,
as well as create new ml conﬁgurations based on the existing data set.

Figure 1: ANNdotNET Start Window

The set of pre-calculated deep learning projects are not static. ANNdotNET Examples Feed contains dynamic list of
deep learning projects loaded from the GitHub repository. By Adding new deep learning project into the examples feed,
every user running ANNdotNET can use it through the feed.

2

SEPTEMBER 24, 2020

2

Introduction of the project

2.1 Hardware requirements

ANNdotNET support training and model evaluation on modern NVIDIA GPUs, however the training and evaluation
can also be performed on CPU with older x64 processors with at least 2 GB of RAM. The minimal processors and
memory requirements depends of training model.

2.2 Software requirements

In order to run and develop ANNdotNET based solution the following software requirements must be met:

• Windows 8 x64 or higher,

• .NET Framework 4.7.2 and newer,

• .NET Core 2.0 and newer,

• Visual Studio 2019 (Community, Professional or Enterprise),

• Git source control tool.

In order to run and use GUI Tool for training deep learning models the machine requires the following software
components:

• Windows 8 x64 or higher,

• .NET Framework 4.7.2 and newer,

• .NET Core 2.0 and newer,

2.3 Organization of the source code

The ANNdotNET project is Visual Studio based solution consisted of several projects grouped into logical folders. In
order to build the solution at least Visual Studio 2019 Community version should be installed on the local machine.

ANNdotNET solution can be grouped on several components:

• The library

• Command Tool

• GUI Tool

• Excel AddIn

• Unit Tests and Test applications

The library consists of visual studio projects which logically separate the implementation. It provides foundation of
data processing and preparation, neural network conﬁguration and layers implementation, training and handling with
minibatches. Within the library folder each project exposes set of API for the model evaluation, testing, export and
deployment.

Command Tool is console-based tool which can be run from Visual Studio and can perform model training and
evaluation using console output.

GUI Tool is Windows desktop application which provides rich set of options and visualizations during machine learning
steps: project and model creation, data preparation, model training, model evaluation and validation, export options and
model deployment.

Excel AddIn is implementation of Microsoft Ofﬁce AddIn for model deployment into Excel. Using ANNdotNET
Excel AddIn, trained model can be used in Excel like ordinary excel formula. This is very handy for model deployment
into production when only Excel is need in order to use the model.

Unit Tests – set of unit tests and console projects for testing the implementation of the solution.

3

SEPTEMBER 24, 2020

3 GUI tool, projects, models and related ﬁles

The basic object in ANNdotNET is machine learning conﬁguration ﬁle, shortly named mlconﬁg. The mlconﬁg, with
ﬁle extension ∗.mlconf ig, holds information about features, labels, learning and training parameters, neural network
architecture and set of paths required for training and evaluation, best trained model, training history etc. Simply said it
is the representation of a deep learning model. Beside mlconﬁg ﬁle ANNdotNET supports project ﬁle. The project ﬁle
(∗.ann) holds the information about whole ML project. It can consists of one or more mlconﬁg ﬁles, data ﬁles and
project info ﬁle.

The user start working in ANNdotNET by creating new project. Then a data is loaded in order to start working
on data preparation and feature selection. Once the project creation and data preparation are completed the new
model (mlcof ing ﬁle) can be created. Example of a project ”BreastCancerP roject” with two models named:
F eedF orward and CategoryEmbedding are shown in Figure 2. The project is based on famous Breast Cancer data
set [1].

Figure 2: ANNdotNET with opened Brest Cancer DL project. The Project explorer shows Breast Cancer project with
data set. Data is organized in columns. Each column is identiﬁed as features or label. Also for each column several
additional information is deﬁned such: column type, missing value handling and data normalization.

As can be seen the project is consisted of two DL models (two mlconﬁg ﬁles). Each model is created from different
network architecture, different kind of training parameters and the same data set. Figure 2 also show Project explorer
-tree control which shows a hierarchical representation of a project and related models. The user start with project
creation, data loading and preparation and then can create as many models as necessary.

3.1 File structure in ANNdotNET

While creating a new project the project ﬁle and project folder are created on disk. Illustration of a ﬁle and folder
structure can be described as follow: Assume one create a new project called P roject01. The folder named P rojecet01
is created, at the same time as project ﬁle named P roject01.ann. Those two items are shown on the following image:

Once the project is created, one can load the data set ﬁle. The data set ﬁle is the ﬁle that contains data used for
training and evaluation of the deep learning model. The structure of the data set is classic table-based textual data. For
example one can load https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data
ﬁle directly into ANNdotNET and start processing the data in order to implement deep learning model. Once the data is
loaded, ANNdotNET processes the ﬁle and saved the copy of the data into the root of the project folder.

During data set ﬁle processing the new ﬁle is created in the project folder and named according to the ANNdotNET
naming convention e.g. [P rojectN ame]_rawdata.txt

4

SEPTEMBER 24, 2020

Figure 3: Project ﬁle and folder structure in ANNdotNET

Figure 4: Raw data set ﬁle within the project folder

Now that the project has been created and data set have loaded and processed the next step is to start building DL model.
Each time the new DL model is created a coresponded mlfoncig ﬁle is created on disk. Within a project there can be
created arbitrary number of DL models with different structure and size of training and validation data sets and also
with different network, learning and training parameters.

As an example 5 shows the ANNdotNET project with 4 DL models: M odel0, M odel1, M odel2 and M odel3.

Figure 5: Models and related mlconﬁg ﬁles and folders structure

During the models creation separate folder and mlconﬁg ﬁle were created. This kind of ﬁle structure offers clean and
easy way to follow ﬁle structures and information generated in each model (Figure 6), as well an easy way to transfer
mlcoﬁng ﬁle to different project.

5

SEPTEMBER 24, 2020

Figure 6: Models and related mlconﬁg ﬁles and folders structure

Depending of stage of completeness, the model may consist of the following folders and ﬁles:

• data contains training, validation and testing ml ready data set,
• log contains ﬁles of training information
• models ﬁles of CNTK format created during various phase of training
• temp_ models folder holding temporary model ﬁles during training. All content from the folder is deleted

once the training process is completed.

• model checkpoint state ﬁles model ﬁles stored current the state of the trainer. The ﬁles are needed in case

when the user want to continue with training based on the previous training state.

All model mlconﬁg ﬁle is always placed at the root of the project folder.

3.2 ANNdotNET project ﬁle

ANNDotNET project is stored in annproject ﬁle. It contains information about data set and DL models. Each project
also consists of project info ﬁle. It is a Rich Text Format (RTF) ﬁle containing the necessary information about the
project. The annproject ﬁle is text based ﬁle consisting of:

1. project contains information of the project and related models
2. data contains information about raw data set.
3. parser parser information while parsing data set ﬁle.

The project keyword deﬁned the basic project property like:

• N ame name of the project,
• V alidationSetCount the size of validation data set,
• P recentigeSplit is the validation data set size in percentage while creating it,
• M LConf igs list of created ml conﬁgurations,
• Inf o project info ﬁle.

For example, the following text represent typical annproject:

! a n n p r o j c t

f i l e

f o r d a i l y s o l a r p r o d u c t i o n

p r o j e c t : | Name : S o l a r P r o d u c t i o n

| V a l i d a t i o n S e t C o u n t : 2 0 | P r e c e n t i g e S p l i t : 1

| MLConfigs : LSTMMLConfig | I n f o :

6

SEPTEMBER 24, 2020

! raw d a t a s e t and m e t a d a t a
d a t a : | RawData : S o l a r P r o d u c t i o n _ r a w d a t a . t x t

i n f o r m a t i o n

| Column01 : t i m e ; I g n o r e ; I g n o r e ; I g n o r e ;

| Column02 : s o l a r . p a s t ; Numeric ; F e a t u r e ; I g n o r e ;
| Column03 : s o l a r . c u r r e n t ; Numeric ; L a b e l ; I g n o r e ;

! p a r s e r
p a r s e r : | R o w S e p a r a t o r : r n | C o l u m n S e p a r a t o r :

i n f o r m a t i o n

;

| H e a d e r : 0 | S k i p L i n e s : 0

The code above deﬁned the example of the annproject named SolarP roduction, with raw data set stored in
SolarP roduction_rawdata.txt ﬁle that contains three columns: time, solar.past and solar.total. The ﬁrst column
(time) is marked as ignored which means it will be excluded from the model training. The solar.past column is
marked as feature and solar.current is marked as label. Both feature and label are numeric column. Those information
is enough that ANNdotNET tool can created mlreadydatasets.

The parser keyword is used while the raw datset is loaded into the application memory.

3.3 mlconﬁg ﬁle

The basic object in ANNdotNET is deep learning model which is represented by the mlconf ig ﬁle.

The structure of the mlconf ig ﬁle is described by the 8 keywords:

• conf igid − unique identiﬁer of the mlconﬁg ﬁle,
• metadata − meta information about data set,
• f eatures − deﬁnes features for the model,
• labels - deﬁnes labels for the model,
• network - deﬁnes neural network architecture to be trained,
• learning - deﬁnes learning parameters,
• training - deﬁnes training parameters,
• path – deﬁnes paths to ﬁles needed during training and evaluation.

Each of the above keyword consists of several parameters and values. The syntax of the mlconﬁg ﬁle allows you to
create as many empty lines as you like. In case you want to add comment in the ﬁle, the sentence must begin with
exclamation "!". Order of the keywords is irrelevant.

The following content represent typical mlconf ig ﬁle:

! ∗ ∗ ∗ ∗ ∗ ∗ ∗ ANNdotNET v1 . 0 ∗ ∗ ∗ ∗ ∗ ∗ ∗ ∗ ∗ ∗ ∗ ∗
! I r i s m l c o n f i g f i l e

i r i s . m l c o n f i g

i d e n t i f i e d o f
! c o n f i g i d r e p r e s e n t
m o d e l i d : 3 3 f e 0 9 6 8 −d640 −4b53 −97dc −982 d c f 2 b 1 c a d

t h e u n i q u e

t h e

c o n f i g u r a t i o n

! m e t a d a c o n t a i n s
i n f o r m a t i o n a b o u t d a t a
m e t a d a t a : | Column01 : s e p a l _ l e n g t h ; Numeric ; F e a t u r e ; I g n o r e ;

s e t .

| Column02 : s e p a l _ w i d t h ; Numeric ; F e a t u r e ; I g n o r e ;
| Column03 : p e t a l _ l e n g t h ; Numeric ; F e a t u r e ; I g n o r e ;
| Column04 : p e t a l _ w i d t h ; Numeric ; F e a t u r e ; I g n o r e ;
| Column05 : s p e c i e s ; C a t e g o r y ; L a b e l ; I g n o r e ; s e t o s a ; v e r s i c o l o r ; v i r g i n i c a

! I n f o r m a t i o n a b o u t
! The l i n e
c o n t a i n s
f e a t u r e s : | N u m F e a t u r e s

f e a t u r e s .
two g r o u p s o f

4 0 | P r o d u c t 10 0

f e a t u r e s : N u m e r i c F e a t u r e s and P r o d u c t

f e t a u r e

! I n f o r m a t i o n a b o u t
l a b e l s : | s p e c i e s 3 0

l a b e l

7

! Network c o n f i g u r a t i o n
n e t w o r k : | L a y e r : N o r m a l i z a t i o n 0 0 0 None 0 0
| L a y e r : Dense 5 0 0 ReLU 0 0
| L a y e r : Dense 3 0 0 S o f t m a x 0 0

SEPTEMBER 24, 2020

! L e a r n i n g p a r a m e t e r
l e a r n i n g : | Type : SGDLearner

i n f o r m a t i o n

| LRate : 0 . 0 1 | Momentum : 1

| L o s s : C r o s s E n t r o p y W i t h S o f t m a x | E v a l : C l a s s i f i c a t i o n A c c u r a c y | L1 : 0 | L2 : 0

! T r a i n i n g p a r a m e t e r s
t r a i n i n g : | Type : d e f a u l t

i n f o r m a t i o n

| B a t c h S i z e : 6 5 | Epochs : 1 0 0 0 | N o r m a l i z a t i o n : 0

| R an d o m iz e B a tc h : F a l s e
| P r o g r e s s F r e q u e n c y : 5 0 | C o n t i n u e T r a i n i n g : 0
| T r a i n e d M o d e l : m o d e l s \ \ model \ _ a t \ _ 9 5 2 o f 1 0 0 0 \ _ e p o c h s \ _TimeSpan \ _636720117054117391

| S a v e W h i l e T r a i n i n g : 1

! Components o f
p a t h s : | T r a i n i n g : d a t a \ m l d a t a s e t _ t r a i n

t h e m l c o n f i g p a t h s

| V a l i d a t i o n : d a t a \ m l d a t a s e t _ v a l i d | T e s t : d a t a \ m l d a t a s e t \ _ v a l i d
| TempModels : temp \ _ m o d e l s

| Models : m o d e l s

| R e s u l t : FFModel \ _ r e s u l t . c s v | Logs : l o g

mlconﬁg ﬁle can be deﬁned using only text editor and then use ANNdotNET for training and evaluation. Full description
of the ﬁle can be found at the project repository documentation.

4 ML Engine - training and evaluation of deep learning models

ANNdotNET introduces the ANNdotNET Machine Learning Engine (MLEngine) which is responsible for training
and model evaluation deﬁned in the mlconﬁg ﬁle. The ML Engine relies on Microsoft Cognitive Toolkit, CNTK open
source library for deep learning. Through all application ML Engine exposed all great features of the CNTK e.g. GPU
support for training and evaluation, different kind of learners, but also extends CNTK features with more evaluation
functions (RMSE, MSE, Classiﬁcation Accuracy, Coefﬁcient of Determination, etc.), Extended Mini-batch Sources,
Trainer and model evaluation.

ML Engine also contains the implementation of neural network layers which supposed to be high level CNTK API very
similar as layer implementation in Keras[11] and other python based deep learning APIs. With this implementation the
ANNdotNET implements the Visual Network Designer (VND) which allows to design neural network conﬁguration of
any size with any type of the layers. The following layers are implemented:

Normalization Layer – takes the numerical features and normalizes its values at the beginning of the network. Dense –
classic neural network layer with activation function LSTM – special version of recurrent network layer with option for
peephole and self-stabilization. Embedding – Embedding layer, Drop – drop layer,

Complete list of supported layer can be found in the project documentation.

Designing deep neural networks can be simplify by using pre-deﬁned network layer with capability to created any
network we usually implement through the source code.

4.1 Training and learning parameters

IN deep learning there are two kind of parameters. The learning and training parameters. The learning parameters are
parameters needed during network learning. This includes:

• Learner - optimization method used during learning process,
• learning rate - the number between 0 and 1 using which determines the step size at each iteration while moving

toward a minimum of a loss function.

• Loss function used to determine how well learner models the given data,
• Evaluation function to measure how close the model predict the output values.

ANNDotNET supports mini-batch training which allows to make different type of training strategies.The training
parameters includes: number of epochs, mini-batch size and progress frequency. Epochs and mini-batch size are self

8

SEPTEMBER 24, 2020

explanatory. However, the progress frequency is the number of epoch skip until the next epoch is shown in the output.
In ANNdotNET the full list of training parameters includes:

• Epoch - the number of full cycles when training.
• Mini-batch size number of samples in the batch which going into the network,
• Progress frequency - shows output of the training progress at every n epoch,
• Randomize mini-batch - randomize mini-batch during training process,
• Continue training - The parameters indicate if the model will be continue with training, or the training will

start from scratch,

• Save good models during training - saves model which has better performance parameters than previous one.

Training process can be visually monitored by using two graphs:

• Mini- batch training - shows the value of the loss and evaluation functions for each mini-batch.
• Model evaluation - shows the values of evaluation function for training and validation data set for the current

iteration.

Figure 7: Training module in ANNdotNET. During training the training progress is monitored by two diagrams
mini-batch training and model evaluation.

The visualization of the training progress can give the user a better picture how training process behave. Is the training
process converges, is it going to over-ﬁtted area. The user can stop the training process at any time. Once the training
process is stopped or completed the best model is determined based on the selected training strategy (with or without
early stopping).

4.2 Training with early stopping

In ANNdotNET the early stopping is implemented so that the best trained model is selected after the training process.
The best model is selected among other models saved during the training. This is kind of training strategy leads that
regardless of the epoch number the best model is always selected without over-ﬁtting.

9

SEPTEMBER 24, 2020

4.3 DL Model evaluation

The model evaluation module evaluate the best trained model and presents the performance parameters both for training
and validation sets. Depending of the ML type (regression, binary or multi class classiﬁcation) performance parameters
are calculated and presented. Figure 8 shows the evaluation of the regression DL model. However, it is supported both
binary and multi class classiﬁcation model evaluation.

Figure 8: Evaluation of regression model

5 Visual Network Designer

Building network is one of the most challenging task in deep learning and it is followed once the set of features and
labels are deﬁned. The ﬁrst layer in the network is the input layer which directly depends of the input data (features).
On the other hand, the output layer is deﬁned by the output data (labels). The ﬁrst and the last layers in the network are
deﬁned by the training set while hidden layers are deﬁned with speciﬁc architecture. ANNdotNET introduces the Visual
Network Designer (VND) which allows to visually create different types of deep network architecture. VND supports
basic network layers such dense, dropout, LSTM, convolution and allows to create a network with any combination
of the layers. By using proper combination of the basic network layers one can create network such Feed Forward
networks, Deep Feed Forward networks, Convolutions Network, Recurrent LSTM based Network, Auto-Encoder,
CUDAStackedLSTM network, CUDAStackedGRU network, etc. VND supports creation popular network architecture
such AlexNet and similar, or create popular layers such as Autoencoder-Decoder, etc.

Beside classic neural network layers, ANNdotNET implements custom layers such as Normalization and Scale Layer.
Normalization layer normalizes the training data set by calculating the standard deviation and mean of each numeric
feature and produces the z-Score as output. With the normalization layer each numeric feature has zero mean and
standard deviation of one. This is typical normalization method in training deep leaning models. Scale layer is suitable
when normalizing the input data in image recognition tasks.

VND is accessible from the Network Settings tab page in the DL Model. The concept of VND is based on sequential list
of network layers, so the designer can add, insert remove any available network layer mentioned above. Figure 6 shows
an example of CNN network architecture designed to model popular Cat vs. Dog data set[3]. As can be seen, the ﬁgure
shows ﬁrst several network layers sequentially ordered in the list. On the left side one can ﬁnd the information of data
set (training and validation), the input and the output layer, as well as learning parameters (learning rate, momentum,
loss and evaluation functions). In order to change the current network or design new one there are set of options located
at the top of the layer list. There are Combo Box with all supported network layers followed by buttons to add, remove
and insert network layer. Once the network is designed the Graph option can visually represents the while network with
its weights, inputs and output parameters.

10

SEPTEMBER 24, 2020

Figure 9: Visual Network Designer presenting convolutions network architecture capable to predict Cat/Dog data set

6 ANNdotNET Excel Addin

ANNdotNET supports the deployment of the DL model into Microsoft Excel Application by using Excel Add-in. With
the Add-in the DL model is used like ordinary formula which can be run from the formula bar. In order to run DL
model within Excel, the model should be exported and saved on known location. In Excel, calling the model is achieved
by typing the formula:

= AN N dotN ET ([cellrange], [modelpath])

Figure 10: Trained model deployed in Excel

Figure above shows Iris model exported in Excel. The predicted values are calculated directly in Excel by calling
ANNdotNET funtion within Excel and pointing to cell range and exported model path.

6.1 ANNdotNET as A Cloud Solution

By using the ANNdotNET, it is possible to incorporate Deep Learning, (DL) tasks into a cloud solution, so that the
complete DL process can be automatized and deﬁned into one workﬂow using cloud services.

11

SEPTEMBER 24, 2020

It can be detected three common tasks in DL cloud solution:

• Data preparation
• Training ML model
• Model Deployment

In all three phases ANNdotNET can be incorporated and used.

Figure 11: Architecture of Deep Learning Cloud Solution

The typical scenario can be described on the following:

Once the model conﬁguration is loaded using the mlconﬁg ﬁle, the training process can be started by deﬁning the
number of epochs, or by deﬁning the early stopping criteria. The training process can be monitored by reading the
training progress information. The information helps the user to decide is the training process converging at the expected
speed, or when to stop the training process in order to prevent model over-ﬁtting. The training module that shows
training history is shown on Figure 11. The model deployment is the last phase of the ML cloud solution, and deﬁnes
several options that can be used for different scenarios. The most common option is to generate a simple web service
that contains the implementation of the model evaluation. The web service returns the model output in an appropriate
format. The model can also be deployed in Excel, to allow the model to behave as an Excel formula. Excel deployment
is achieved by implementing additional Excel add-in. The deployment ML model in Excel is usually suitable when
dealing with the input data which is relatively easy to represent in Excel.

The complete cloud ML solution is depicted in Figure 11. By using the ANNdotNET, it is possible to transform data
and prepare it for training. Moreover, ANNdotNET provides components for training, evaluation, testing and deploying
deep learning models. Its components can be used in similar cloud solutions depicted in Figure 11, particularly for
"data transformation" and "deep learning" cloud solution components.

7 Application of ANNdotNET for developing deep learning models

In this section successful applications are going to be presented. The applications can be classiﬁed with the domain
problems.

ANNdotNET has been successfully used in many deep learning and ANN research papers and online articles. [6] used
ANNdotNET in order to develop LSTM based deep learning models for predicting Vrana lake water level in 6 and 12
months ahead located in Croatia. Authors also used the tool to develop Feed Forward model for comparison results. [5]
used ANNdotNET in order to develop deep learning models to predict lake level for 100 lakes in Poland. Furthermore
[4] used ANNdotNET in order to develop deep learning model for predicting energy demands in one of the mayor city
in Cyprus.

ANNdotNET has been used to develop deep learning model for sentiment analysis [7] and Time Series prediction [9].

Beside using recurrent LSTM and feed forward deep networks successful application has been achieved in using
convolutions networks mainly for image classiﬁcations. Using popular CIFAR-10 [10] data set ANNdotNET achieve
prediction with average accuracy higher than 0.96 [8]. Using Kaggle Cats vs. Dogs data set[3] ANNdotNET achieved

12

SEPTEMBER 24, 2020

the accuracy higher than 0.95 which can be found as standard example. Also MNIST [12] data set used in order to
created deep learning model based on convolutions network with prediction accuracy with more than 0.95. It is also
part of the standard package. It is also worth mention that ANNdotNET installation package comes with 12 complete
and ready to used deep learning project made based on most popular data sets from different problem domains like
regressions, binary classiﬁcations, multi class classiﬁcation, time series and image classiﬁcations.

8 Conclusion

ANNdotNET is deep learning framework implemented on .NET Framework which is developed for building, training
and evaluation of deep learning models. The tool can be used as regular Desktop application providing rich set of
user interfaces. The project is completely open sourced and hosted at http://github.com/bhrnjica/anndotnet.
The project is mainly targeting academicians, researchers and hobbies to work with designing deep learning networks.
ANNdotNET can also be used through the development environment in order to develop more complex scenario for
custom data processing or network design with multiple inputs and outputs or non supported network layers.

References

[1] W.N. Street, W.H. Wolberg and O.L. Mangasarian., (1993) Nuclear feature extraction for breast tumor diagnosis.
IS&T/SPIE 1993 International Symposium on Electronic Imaging: Science and Technology, volume 1905, pages
861-870, San Jose, CA.

[2] Yu, D., Eversole, A., Seltzer, M., Yao, K., Kuchaiev, O., Zhang, Y.,

. . . Huang, X. (2014), An Intro-
duction to Computational Networks and the Computational Network Toolkit. Microsoft Research. Retrieved
from https://www.microsoft.com/en-us/research/publication/an-introduction-to-computational-networks-and-the-
computational-network-toolkit/

[3] Kaggle Cats and Dogs Dataset, Retrieved from https://www.kaggle.com/c/dogs-vs-cats/data, accessed

sept. 2020.

[4] Hrnjica B., Mehr A.D., (2020), Energy Demand Forecasting Using Deep Learning. In: Al-Turjman F. (eds) Smart
Cities Performability, Cognition, & Security. EAI/Springer Innovations in Communication and Computing. Springer,
Cham. https://doi.org/10.1007/978-3-030-14718-1_4

[5] Zhu, S., Hrnjica, B., Ptak, M., Choi´nski, A., & Sivakumar, B. (2020), Forecasting of water level in multiple temperate
lakes using machine learning models. Journal of Hydrology. https://doi.org/10.1016/j.jhydrol.2020.124819

[6] Hrnjica, B., Bonacci, O., (2019), Lake Level Prediction using Feed Forward and Recurrent Neural Networks. Water

Resources Management 33, 2471–2484 (2019). https://doi.org/10.1007/s11269-019-02255-2

[7] Hrnjica, B., (2018), Sentiment Analysis using ANNdotNET, CodeProject article, Retrieved from https://www.
codeproject.com/Articles/1263862/Sentiment-Analysis-using-ANNdotNET, accessed sept. 2020.
[8] Hrnjica, B.,(2018), Create CIFAR-10 Deep Learning Model With ANNdotNET GUI Tool, CodeProject article,
Retrieved from https://www.codeproject.com/Articles/1273368/Create-CIFAR-10-Deep-Learning-Model-With-
ANNdotNET, accessed sept. 2020.

[9] Hrnjica, B., (2017), CNTK 106 Tutorial – Time Series Prediction with LSTM using C#, CodeProject article, Re-
trieved from https://www.codeproject.com/Articles/1220142/CNTK-Tutorial-Time-Series-Prediction-with-LSTM-
usi, accessed sept. 2020.

[10] Krizhevsky, A. (2009). Learning Multiple Layers of Features from Tiny Images. . . . Science Department, Univer-

sity of Toronto, Tech. . . . . https://doi.org/10.1.1.222.9220

[11] Chollet, Francois and others, (2015), Keras, =https://github.com/fchollet/keras
[12] LeCun, Yann and Cortes, Corinna and Burges, CJ, 2010, MNIST handwritten digit database, ATT Labs [Online].

Vol 2, Available: http://yann.lecun.com/exdb/mnist

13

