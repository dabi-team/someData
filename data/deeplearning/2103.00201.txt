1
2
0
2

b
e
F
7
2

]

G
L
.
s
c
[

1
v
1
0
2
0
0
.
3
0
1
2
:
v
i
X
r
a

Characterization of Neural Networks Automatically
Mapped on Automotive-grade Microcontrollers

Giulia Crocioni
Giambattista Gruosso
giulia.crocioni@mail.polimi.it
giambattista.gruosso@polimi.it
Politecnico di Milano
DEIB
Milano, Italy

Danilo Pau
Davide Denaro
danilo.pau@st.com
davide.denaro@st.com
STMicroelectronics
Agrate Brianza, Italy

Luigi Zambrano
Giuseppe Di Giore
luigi.zambrano@st.com
giuseppe.di-giore@st.com
STMicroelectronics
Arzano (NA), Italy

ABSTRACT
Nowadays, Neural Networks represent a major expectation for
the realization of powerful Deep Learning algorithms, which are
able to determine the behaviors and operations of several physical
systems. Computational resources required for model, training and
running are large, especially when related to the amount of data
that Neural Networks typically need to be able to generalize. The
latest TinyML technologies allow the integration of pre-trained
models on embedded systems, giving the opportunity to make
computing at the edge faster, cheaper, and safer. Although these
technologies originated in the consumer and industrial worlds,
there are many sectors that can greatly benefit from them, such
as the automotive industry. In this paper, we present a framework
for implementing Neural Network-based models on a family of
automotive Microcontrollers, showing their efficiency in two case
studies applied to vehicles: intrusion detection on the Controller
Area Network bus, and residual capacity estimation in Lithium-Ion
batteries, widely used in Electric Vehicles.

KEYWORDS
datasets, neural networks, gaze detection, text tagging

ACM Reference Format:
Giulia Crocioni, Giambattista Gruosso, Danilo Pau, Davide Denaro, Luigi
Zambrano, and Giuseppe Di Giore. 2021. Characterization of Neural Net-
works Automatically Mapped on Automotive-grade Microcontrollers. In Pro-
ceedings of TinyML Research Symposium (TinyML Research Symposium‚Äô21).
ACM, New York, NY, USA, 7 pages.

1 INTRODUCTION
Machine Learning (ML) is one of the most groundbreaking technolo-
gies driving the fourth industrial revolution, enabling the mining
of valuable information from large amounts of data that the human
brain alone is not able to capture [34, 37]. In recent years, research
in ML is evolving at a huge speed, bringing great advances in several
ML sub-fields, such as Deep Learning (DL), Deep Neural Networks
(DNNs), and Deep Generative Models (DGMs) [27]. Primary sources
that generate data include social media platforms, industrial control

Permission to make digital or hard copies of part or all of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for third-party components of this work must be honored.
For all other uses, contact the owner/author(s).
TinyML Research Symposium‚Äô21, March 2021, San Jose, CA
¬© 2021 Copyright held by the owner/author(s).

systems, and sensors used in the Internet of Things (IoT). Devel-
oping meaningful and reliable models using such a large amount
of information requires extremely powerful resources in terms of
processing capabilities. However, in recent years there has been
a growing interest in embedding ML models into Microcontroller
Units (MCUs), small computers with integrated memory which are
often the core of embedded technology [10, 34, 41]. Embedded sys-
tems are widely used in healthcare, energy, consumer electronics,
and automotive, and are often required to process information and
make real-time decisions relying on resource constrained hardware.
Thanks to the latest TinyML technologies, pre-trained models can
be integrated on embedded systems, giving the opportunity to make
computing at the edge faster, cheaper, and safer.

Although TinyML technologies originated in the consumer and
industrial worlds, there are many sectors that can greatly benefit
from them, such as the automotive industry [1, 24, 29, 30]. In fact,
automotive control units are typically limited in terms of computa-
tional power and data storage capacity. The goal of architectures
embedded on automotive MCUs is to analyze data as they are
received, while the training phase is performed offline on more
powerful systems. Therefore, in the tool-chain it is essential to
adopt efficient models whose training phase takes place offline,
and to consider that the on-board control units must perform the
primary functions for which they are designed, from the on-board
devices management to the engine control.

In this paper, we present a framework for implementing NN-
based models on a family of automotive MCUs, showing their effi-
ciency in two case studies applied to vehicles: intrusion detection
on the Controller Area Network (CAN) bus, and residual capacity
estimation in Lithium-Ion (Li-Ion) batteries, widely used in Electric
Vehicles (EVs). The rest of the paper is organized as follows. In
Section 2 related works on TinyML approaches and automotive
applications are reviewed. Section 3 describes the family of automo-
tive MCUs chosen for the experiments, and the development tool
used for models integration on the MCUs. The following Sections
present two TinyML case studies applied to vehicles. In particular,
Section 4 describes an Intrusion Detection System (IDS) on CAN
bus traffic, and Section 5 describes an architecture for the estimation
of the remaining releasable capacity of Li-Ion batteries. Section 6
presents an accurate and original analysis of the models complexity.
Finally, conclusions are summarized in Section 7, in which the main
findings of the paper are discussed.

 
 
 
 
 
 
TinyML Research Symposium‚Äô21, March 2021, San Jose, CA

Crocioni Gruosso, et al.

2 RELATED WORKS
In recent years, modern vehicles have been equipped with dozens
of Electronic Control Units (ECUs), embedded systems that control
many vehicles functions, and whose functional requirements have
become increasingly complex [9].

Figure 1: In-vehicle communication system example, taken
from [22].

Figure 1 shows an example of an In-vehicle communication
system [22] that contains several sub-networks with different func-
tionalities interconnected by means of a gateway. In such a sys-
tem, it becomes increasingly important to use traditional control
techniques combined with ML and Artificial Intelligence (AI) meth-
ods. Since MCUs in automotive embedded electronics are resource-
constrained, there is a growing interest in integrating TinyML tech-
nologies, that have already been widely used in other consumer
applications. New ML solutions in automotive are being developed
each year in both industry and literature [1, 24, 29, 30]. In this paper,
we present a methodology to embed ML models into automotive-
grade MCUs, and we apply it on two typical applications, that are
described below.

2.1 Intrusion Detection Systems
A CAN bus is a multi-master message protocol, which is used to
interconnect ECUs in automotive systems (e.g., modern vehicles)
[14]. This communication protocol meets the requirements for
real-time communication, and low implementation cost. With a
maximum transfer rate of 1 Mbit/sec, CAN bus is the de facto
standard for ECUs interconnections [22]. Vehicles manufacturers
must carefully design interconnections between critical and non-
critical sub-networks, trying to prevent attacks on ECUs, such as
the ones that exploit vulnerabilities in the infotainment system.
Researchers demonstrated that it is possible to exploit a feature
defined in the CAN standard, and to disable the braking system
[15, 26]. Although the CAN protocol was originally designed to be
secure, every vehicle using CAN bus is open to attack [23]. Some
CAN bus vulnerabilities already found by researchers are listed
below:

‚Ä¢ It is a multicast message protocol with no intrinsic addressing
and authentication mechanism. Therefore, a compromised

ECU can access every message in its sub-network, and can
send messages with a false identity.

‚Ä¢ It is a bandwidth-constrained protocol for nowadays vehicles,
making it challenging to introduce message encryption.
‚Ä¢ Most nodes are automotive-grade MCUs with limited mem-
ory and computational capability, making it difficult to im-
plement complex security protocols.

The introduction of an IDS can be a suitable countermeasure to
CAN bus vulnerabilities. One of the intrusion detection methods
is the anomaly-based approach. An intuitive description of this
method is to consider a monitoring system, an ECU, that listens to
CAN bus traffic and learns normal behavior. The intruder activities
raise abnormal traffic, and this alerts the trained IDS.

2.2 Battery Releasable Capacity
In recent years, Li-Ion batteries are receiving significant interest
because of their several advantages in terms of high specific energy
and power [25]. Rechargeable battery stacks based on Li-Ion cells
are used to power many systems, including portable devices, such
as smartphones, and automotive systems, such as Hybrid Electric
Vehicles (HEV) and Electric Vehicles (EV) [2, 13, 31]. To increase the
safety, reliability, and cost-effectiveness of a battery, it is essential
to improve the Battery Management System (BMS) features. [32]. In
this regard, battery capacity estimation is essential as it allows the
calculation of the State of Health (SoH). SoH is a measure of battery
functionality in energy storage and delivery, and represents a fun-
damental parameter for the Battery Health Monitoring (BHM) [8].
Due to internal aging processes, capacity decays over the battery‚Äôs
lifetime even if it is not used, causing battery performance to de-
crease. Typically, a 20% reduction in rated capacity is considered the
limit for safe use of the component (i.e., ùê∂ùëöùëéùë• ‚â§ 0.8ùê∂ùëüùëéùë°ùëíùëë ), under
which the battery performance may not be reliable [7, 11]. There-
fore, SoH diagnosis and accurate releasable capacity estimation are
essential for safety risks reduction, critical failure prevention, and
appropriate battery replacement [12]. Data-driven methods based
on ML techniques are widely used for battery capacity estimation
[7]. They compute the releasable capacity starting from measur-
able parameters, such as voltage and current, which can be easily
extracted from a vehicle via CAN bus [28]. Since SoH is highly
non-linear and not directly observable, DL algorithms are shown
to be more flexible and efficient than traditional methods [5].

3 SPC5-STUDIO-AI: AUTOMATED

CONVERSION OF PRE-TRAINED NEURAL
NETWORKS

SPC5-Studio-AI is a plug-in component of the SPC5-STUDIO de-
velopment environment, which supports the Chorus SPC58 MCU
family. This tool provides the capability to automatically gener-
ate, execute, and validate pre-trained NN models on automotive-
grade MCUs. It converts the models to optimized ANSI C code
for SPC58 MCUs, and automatically profiles their complexity. Sev-
eral DL frameworks are supported, such as Keras, TensorFlow Lite,
ONNX, Lasagne, Caffe, and ConvNetJS. Thanks to a well-defined
short number of public APIs, the ANSI C library can be imported
into application-specific projects, such as the two case studies pre-
sented in Sections 4 and 5. Moreover, SPC5-Studio-AI provides NN

Characterization of Neural Networks Automatically
Mapped on Automotive-grade Microcontrollers

TinyML Research Symposium‚Äô21, March 2021, San Jose, CA

validation and complexity profiling measuring key metrics such as
validation error, memory requirements (i.e. Flash and RAM), and
execution time, directly on MCUs. This plugin is integrated within
SPC5-STUDIO development environment (currently version 6.0.0).

Figure 2: SPC5-Studio.AI block diagram

SPC5-Studio.AI was used to embed and to validate the developed
NNs on three automotive-grade MCUs, suitable for applications
which require low-power, connectivity and security [35]: SPC584B,
SPC58EC, and SPC58NH. The main features of the chosen MCUs are
shown in Table 1. Power consumption was computed considering
each MCU at its maximum frequency, and with all cores enabled.

Table 1: Main features of the automotive-grade MCUs used
for the complexity analysis.

Device

Flash
[Mb]

RAM
[Mb]

Clock
[MHz]

I/D Cache

FPU

Power
Consumption
[mA]

SPC584B
SPC58EC
SPC58NH

2
4
10

192
512
1024

120
180
200

Yes
Yes
Yes

Yes
Yes
Yes

102.0
132.6
239.6

4 CASE STUDY 1: INTRUSION DETECTION IN

AN AUTOMOTIVE NETWORK

In this Section, we present a Long Short-Term Memory (LSTM) Au-
toencoder to detect CAN bus anomalies raised by abnormal traffic,
using the SynCAN dataset [17]. After embedding and validating
the pre-trained Autoencoder into the aforementioned automotive
MCUs, its complexity was profiled.

4.1 Dataset
A CAN bus is a multi-master message broadcast system, in which
each message (or packet) has a standard format consisting of a
timestamp, an identifier ID, and up to 8 bytes of payload. The
ID represents the type of message, and the payload may carry
one or more meaningful signals. Thus, the CAN bus traffic in a

Figure 3: The structure of a CAN data frame, taken from [6].

subnetwork can be represented as time series. Figure 3 shows the
typical structure of a CAN data frame as referenced in [6].

The data for the analysis were taken from SynCAN (Synthetic
CAN bus data), a synthetic dataset created to benchmark, evaluate,
and compare different CAN IDSs on different attack scenarios [17].
The dataset is composed of normal and abnormal traffic signals, the
latter divided according to the attack type:

(1) Plateau attack. A signal overwritten to a constant value over

a time period.

(2) Continuous change attack. A signal slowly drifted from its

true value.

(3) Playback attack. An already recorded time series of values

of the signal itself, over a time period.

(4) Suppress attack. A signal completely suppressed.
(5) Flooding attack. A signal to deny access to the other ECUs.
The anomaly detector developed was trained on the normal
traffic signals, and was tested on the abnormal ones, corresponding
to the attacks.

4.2 Long Short-Term Memory Autoencoder
The architecture used for the anomaly detector was an LSTM Au-
toencoder, that demonstrated to be effective in learning the normal
behavior of a simulated CAN bus traffic, as shown by [18].

The implemented Autoencoder consists of a dense layer, two
LSTM layers, and a dense output layer. Input features are 24 con-
secutive messages related to network traffic of 20 different signals.
Thus, input data are provided in the three-dimensional format:
number of samples, time steps (24), and features (20). The LSTM
layers have 18 output units, and the dense output layer consists of
20 nodes. The network is made by 6272 parameters. The overall
topology is shown in Table 2.

Table 2: The implemented Autoencoder consists of a dense
layer, two LSTM layers, and a dense output layer. Input data
are provided in the three-dimensional format: number of
samples, time steps (24), and features (20).

Layer Output shape

Input
Dense
LSTM
LSTM
Dense

24x20
24x20
24x18
24x18
24x20

The network hyperparameters were tuned using Keras-Tuner
[38]. The anomaly score was evaluated using the Mean Absolute
Error (MAE) between the true network traffic and its reconstruction,
made by the Autoencoder. Figure 4 shows the reconstruction error

TinyML Research Symposium‚Äô21, March 2021, San Jose, CA

Crocioni Gruosso, et al.

(MAE) obtained on each attack type test set, with green representing
normal CAN bus traffic and red malicious one. For all the attack
types, the mean precision and recall are 0.86 and 0.81, respectively.

5 CASE STUDY 2: CAPACITY ESTIMATION IN

LITHIUM-ION RECHARGEABLE
BATTERIES

In this Section, we present a Convolutional Neural Network (CNN)
LSTM architecture to predict the maximum releasable capacity
of Li-Ion batteries, using the datasets made available by NASA
[33]. After embedding and validating the pre-trained NN into the
aforementioned automotive MCUs, its complexity was profiled.

5.1 Dataset
The data were extracted from one of the Li-Ion battery datasets
made available by NASA Ames Prognostics Center of Excellence
(PCoE) database [33]. In all the experiments, Li-Ion rechargeable
batteries were run through impedance, charge, and discharge opera-
tional profiles, measuring battery impedance, temperature, voltage,
current, and capacity. Due to the greater variability of discharge
experimental conditions, which implies a greater complexity of
the estimation, in the analysis only discharge cycles have been
considered. The battery capacity can be obtained starting from a
fully charged battery and integrating the discharge current over
time, until it reaches a certain threshold voltage [21]. Considering
that the discharge may not be complete in real-world conditions,
only some samples for each discharge cycle were selected. Out-
put current, battery terminal voltage, temperature, and the time
difference between samples were selected as model features. The
capacity value corresponding to each discharge cycle was used
as target for the prediction. Different batteries were used for the
testing and training phases, thus getting closer to a real use case.
During the training phase, a validation set was used to evaluate the
loss function and to tune the parameters (hold-out method) [3].

5.2 Convolutional and Long Short-Term

Memory Network

The architecture used for estimating the maximum releasable ca-
pacity was a CNN LSTM. In fact, the CNN structure allows the
extraction of significant patterns from time series by reducing noise
[4], and its temporal and spatial structure is particularly suitable
for learning complex input features [20]. Among Recurrent Neural
Networks (RNNs), the LSTM architecture has been very successful
with the long-term dependencies of time series [19, 36]. Moreover,
while standard RNNs experience the vanishing gradient problem,
LSTM networks can overcome it.

The input data are provided in the format that CNN expects, i.e.
the three-dimensional one: number of samples, time steps (20), and
features (4). The convolutional layer is initialized with 32 filters,
of size 4x4, and it uses the ReLu activation function after output
normalization. A max pooling layer is added to summarize the input
features. Then, an LSTM layer with 32 output units [40] and with
TanH activation function is used. The output is given by the dense
single node output layer. The network is made by 8961 parameters.
The developed CNN LSTM architecture is shown in Figure 5.

Adaptive Moment Estimation (Adam) optimization algorithm
was used to train the network, and the Mean Squared Error (MSE)
was the chosen loss function to minimize. Features were scaled
using MinMaxScaler, which preserves the shape of the original dis-
tribution [16]. The capacity estimation error is computed using the
MAE. Due to the randomness present during the training procedure
(e.g. random weights initialization in NNs), at each run the results
can be different. Thus, the model was trained and tested 10 times,
each time using a different value for the pseudo-random number
generator. The mean MAE obtained is 0.0434, below the EVs accept-
able SOH error range of ¬±0.05 [39]. The capacity estimation results
of the CNN LSTM together with the ground truth values are shown
in Figure 6. Further analysis has been made on the aforementioned
dataset comparing different ML models [8], but it is out of the scope
of this paper.

6 COMPLEXITY PROFILING
The proposed NNs were evaluated with three automotive-grade
MCUs (i.e., SPC584B, SPC58EC, and SPC58NH). The AI plug-in of
the SPC5-STUDIO allowed the analysis of their performances in
terms of Flash [Kb], Random Access Memory (RAM) [Kb], and av-
erage inference time [ms]. Tables 3 and 4 show the results obtained,
for each NN.

Table 3: Flash [Kb], RAM [Kb], and average inference time
[ms] required by the LSTM Autoencoder, for each MCU.

Device

Flash [Kb] RAM [Kb] Average inference time [ms]

SPC584B
SPC58EC
SPC58NH

24.92
24.92
24.92

4.05
4.05
4.05

11
8
6

Table 4: Flash [Kb], RAM [Kb], and average inference time
[ms] required by the CNN LSTM, for each MCU.

Device

Flash [Kb] RAM [Kb] Average inference time [ms]

SPC584B
SPC58EC
SPC58NH

35.13
35.13
35.13

2.25
2.25
2.25

6.34
4.38
3.86

Note that only the average inference time differs between the
MCUs, since it decreases linearly as the clock frequency increases.
Flash, RAM, and the average run time percentages are shown in
Figures 7 and 8, for each layer of each model. Due to its greater
complexity, the LSTM layer is the most expensive both in terms of
Flash (%), RAM (%), and average execution time (%), for both the
architectures. The validation of the NNs was run on each of the
chosen MCUs with 100% cross-accuracy, which uses the outputs of
the original model as ground truth values for those of the C-model.

7 CONCLUSION
In this work, we presented a framework for the implementation of
Neural Network-based models on automotive-grade MCUs, applied
to two applications of interest: intrusion detection on the CAN bus,

Characterization of Neural Networks Automatically
Mapped on Automotive-grade Microcontrollers

TinyML Research Symposium‚Äô21, March 2021, San Jose, CA

Figure 4: LSTM Autoencoder reconstruction error (MAE) on each attack type test set, with green representing normal CAN
bus traffic and red malicious CAN bus traffic.

Figure 5: The implemented CNN-LSTM Architecture con-
sists of a 1D convolutional layer, a max pooling layer, a
LSTM layer, and a dense output layer. Input data are pro-
vided in the three-dimensional format: number of samples,
time steps (20), and features (4).

Figure 6: Capacity estimation results for CNN LSTM versus
ground truth values.

and residual capacity estimation in Li-Ion batteries. The models
training phases took place offline, and the pre-trained architec-
tures were embedded on three automotive-grade MCUs, designed
to deliver longevity, safety, and data integrity. The models were

tested and validated, demonstrating their effectiveness, and their
complexity on the MCUs was profiled. Future works will focus on
implementing the models taking into account the safety require-
ments of embedded automotive applications.

TinyML Research Symposium‚Äô21, March 2021, San Jose, CA

Crocioni Gruosso, et al.

Figure 7: Flash, RAM, and average execution time percent-
ages obtained for each LSTM Autoencoder layer.

Figure 8: Flash, RAM, and average execution time percent-
ages obtained for each CNN LSTM layer.

REFERENCES
[1] D. Anguita, A. Ghio, S. Pischiutta, and S. Ridella. 2007. A Hardware-friendly
Support Vector Machine for Embedded Automotive Applications. In 2007 Inter-
national Joint Conference on Neural Networks. IEEE, New York, USA, 1360‚Äì1364.
https://doi.org/10.1109/IJCNN.2007.4371156

[2] L. Bascetta, G. Gruosso, and G. S. Gajani. 2018. Analysis of Electrical Vehicle
behavior from real world data: a V2I Architecture. In 2018 International Conference
of Electrical and Electronic Technologies for Automotive, AEIT (Ed.). IEEE, Milano-
Italy, 1‚Äì4. https://doi.org/10.23919/EETA.2018.8493203

[3] Christopher M. Bishop. 1995. Neural Networks for Pattern Recognition. Oxford

University Press, Inc., USA, 1‚Äì372.

[4] Anastasia Borovykh, Sander Bohte, and Cornelis W. Oosterlee. 2017. Conditional
Time Series Forecasting with Convolutional Neural Networks. http://arxiv.org/
abs/1703.04691 arXiv: 1703.04691.

[5] Ephrem Chemali. 2018. Intelligent State-of-Charge and State-of-Health Estima-
tion Framework for Li-Ion Batteries in Electrified Vehicles Using Deep Learning
Techniques. Ph.D. Dissertation. MC Master University, Canada.

[6] Kyong-Tak Cho and Kang G. Shin. 2016. Fingerprinting Electronic Control Units
for Vehicle Intrusion Detection. In Proceedings of the 25th USENIX Conference
on Security Symposium (Austin, TX, USA) (SEC‚Äô16). USENIX Association, USA,
911‚Äì927.

[7] Yohwan Choi, Seunghyoung Ryu, Kyungnam Park, and Hongseok Kim. 2019.
Machine Learning-Based Lithium-Ion Battery Capacity Estimation Exploiting
Multi-Channel Charging Profiles. IEEE Access 7 (2019), 75143‚Äì75152.

[8] G. Crocioni, D. Pau, J. Delorme, and G. Gruosso. 2020. Li-Ion Batteries Parameter
Estimation With Tiny Neural Networks Embedded on Intelligent IoT Microcon-
trollers. IEEE Access 8 (2020), 122135‚Äì122146. https://doi.org/10.1109/ACCESS.

2020.3007046

[9] Kevin Daimi, M. Saed, Scott Bone, and J. Robb. 2016. Securing Vehicle‚Äôs Electronic

Control Units. In ICNS 2016.

[10] Robert David, Jared Duke, Advait Jain, Vijay Janapa Reddi, Nat Jeffries, Jian Li,
Nick Kreeger, Ian Nappier, Meghna Natraj, Shlomi Regev, Rocky Rhodes, Tiezhen
Wang, and Pete Warden. 2020. TensorFlow Lite Micro: Embedded Machine
Learning on TinyML Systems. arXiv:2010.08678

[11] EEMB Co., Ltd. 2010. Lithium-ion Battery DATA SHEET. EEMB Co., Ltd. Battery

Model: LIR18650 2600mAh.

[12] Alexander Farmann, Wladislaw Waag, Andrea Marongiu, and Dirk Uwe Sauer.
2015. Critical review of on-board capacity estimation techniques for lithium-ion
batteries in electric and hybrid electric vehicles. Journal of Power Sources 281
(May 2015), 114‚Äì130.

[13] G.S. Gajani, L. Bascetta, and G. Gruosso. 2019. Data-driven approach to model
electrical vehicle charging profile for simulation of grid integration scenarios.
IET Electrical Systems in Transportation 9, 4 (2019), 168‚Äì175. https://doi.org/10.
1049/iet-est.2019.0002 cited By 2.

[14] Robert Bosch GmbH. 1991. CAN Specification, Version 2.0. Bosh.
[15] Andy Greenberg. 2015. Hackers Remotely Kill a Jeep on the Highway‚ÄîWith
Me in It. https://www.wired.com/2015/07/hackers-remotely-kill-jeep-highway/.
Accessed on 19 October 2020.

[16] Jeff Hale. 2019.

Scale, Standardize, or Normalize with Scikit-Learn.

http://towardsdatascience.com/scale-standardize-or-normalize-with-scikit-
learn-6ccc7d176a02, Accessed on 31 October 2019.

[17] M. Hanselmann, T. Strauss, K. Dormann, and H. Ulmer. 2020. CANet: An Unsu-
pervised Intrusion Detection System for High Dimensional CAN Bus Data. IEEE
Access 8 (2020), 58194‚Äì58205.

[18] M. Hanselmann, T. Strauss, K. Dormann, and H. Ulmer. 2020. CANet: An Unsu-
pervised Intrusion Detection System for High Dimensional CAN Bus Data. IEEE
Access 8 (2020), 58194‚Äì58205. https://doi.org/10.1109/ACCESS.2020.2982544
[19] Sepp Hochreiter and J√ºrgen Schmidhuber. 1997. Long Short-Term Memory.
Neural Comput. 9, 8 (Nov. 1997), 1735‚Äì1780. https://doi.org/10.1162/neco.1997.9.
8.1735

[20] M. Ibrahim, M. Torki, and M. ElNainay. 2018. CNN based Indoor Localization us-
ing RSS Time-Series. In 2018 IEEE Symposium on Computers and Communications
(ISCC). IEEE, New york, 01044‚Äì01049. https://doi.org/10.1109/ISCC.2018.8538530
[21] Angel Kirchev. 2015. Chapter 20 - Battery Management and Battery Diagnostics.
In Electrochemical Energy Storage for Renewable Sources and Grid Balancing.
Elsevier, Amsterdam, 411 ‚Äì 435.

[22] J. Li. 2016. CANsee-An Automobile Intrusion Detection System.
[23] S.-F. Lokman, A.T. Othman, and M.-H. Abu-Bakar. 2019. Intrusion detection
system for automotive Controller Area Network (CAN) bus system: a review.
Eurasip Journal on Wireless Communications and Networking 2019, 1 (2019), 1‚Äì17.
https://doi.org/10.1186/s13638-019-1484-3

[24] A. Luckow, K. Kennedy, M. Ziolkowski, E. Djerekarov, M. Cook, E. Duffy, M.
Schleiss, B. Vorster, E. Weill, A. Kulshrestha, and M. C. Smith. 2018. Artificial
Intelligence and Deep Learning Applications for Automotive Manufacturing. In
2018 IEEE International Conference on Big Data (Big Data). IEEE, New York, USA,
3144‚Äì3152. https://doi.org/10.1109/BigData.2018.8622357

[25] V. Marano, S. Onori, Y. Guezennec, G. Rizzoni, and N. Madella. 2009. Lithium-ion
batteries life estimation for plug-in hybrid electric vehicles. In 2009 IEEE Vehicle
Power and Propulsion Conference. IEEE, Dearborn, MI, 536‚Äì543.

[26] C Miller and C. Valasek. 2015. Remote exploitation of an unaltered passenger

vehicle.

[27] Matiur Rahman Minar and Jibon Naher. 2018. Recent Advances in Deep Learning:

An Overview. CoRR (2018). arXiv:1807.08169

[28] Minxin Zheng, Bojin Qi, and Hongjie Wu. 2008. A Li-ion battery management
system based on CAN-bus for electric vehicle. In 2008 3rd IEEE Conference on
Industrial Electronics and Applications. IEEE, Singapore, 1180‚Äì1184.

[29] S. Moon, M. Min, J. Nam, J. Park, D. Lee, and D. Kim. 2017. Drowsy Driving
Warning System Based on GS1 Standards with Machine Learning. In 2017 IEEE
International Congress on Big Data (BigData Congress). IEEE, New York, USA,
289‚Äì296. https://doi.org/10.1109/BigDataCongress.2017.44

[30] Yedu C. Nair, Sachin Kumar, and K. P. Soman. 2017. Real-Time Automotive
Engine Fault Detection and Analysis Using BigData Platforms. In Proceedings of
the 5th International Conference on Frontiers in Intelligent Computing: Theory and
Applications. Springer Singapore, Singapore, 507‚Äì514.

[31] Y. Nishi. 2001. Lithium ion secondary batteries; past 10 years and the future.
Journal of Power Sources 100 (2001), 101‚Äì106. https://doi.org/10.1016/S0378-
7753(01)00887-4

[32] H. Rahimi-Eichi, U. Ojha, F. Baronti, and M. Chow. 2013. Battery Management
System: An Overview of Its Application in the Smart Grid and Electric Vehicles.
IEEE Industrial Electronics Magazine 7, 2 (June 2013), 4‚Äì16. https://doi.org/10.
1109/MIE.2013.2250351

[33] B. Saha and K. Goebel. 2019. Battery Data Set, NASA Ames Prognostics
Data Repository. Dataset number 5, http://ti.arc.nasa.gov/project/prognostic-
datarepository, Accessed on 10 October 2019.

Characterization of Neural Networks Automatically
Mapped on Automotive-grade Microcontrollers

TinyML Research Symposium‚Äô21, March 2021, San Jose, CA

[34] R. Sanchez-Iborra and A. F. Skarmeta. 2020. TinyML-Enabled Frugal Smart
Objects: Challenges and Opportunities. IEEE Circuits and Systems Magazine 20, 3
(2020), 4‚Äì18. https://doi.org/10.1109/MCAS.2020.3005467

[35] STMicroelectronics. 2020. SPC5 G, General Purpose MCUs. https://www.st.com/
en/automotive-microcontrollers/spc5-g-general-purpose-mcus.html, Accessed
on 8 November 2020.

[36] Ilya Sutskever. 2013. Training Recurrent Neural Networks. Ph.D. Dissertation.

University of Toronto, CAN. Advisor(s) Hinton, Geoffrey.

[37] Niladri Syam and Arun Sharma. 2018. Waiting for a sales renaissance in the
fourth industrial revolution: Machine learning and artificial intelligence in sales
research and practice.
Industrial Marketing Management 69 (2018), 135‚Äì146.
https://doi.org/10.1016/j.indmarman.2017.12.019

[38] Keras Team. 2020. Keras Tuner documentation. https://keras-team.github.io/

keras-tuner/, Accessed on 19 October 2020.

[39] Prakash Venugopal and Vigneswaran T. 2019. State-of-Health Estimation of
Li-ion Batteries in Electric Vehicle Using IndRNN under Variable Load Condition.
Energies 12, 22 (November 2019), 1‚Äì29.

[40] Shiva Verma. 2019. Understanding Input and Output shapes in LSTM -
Keras. https://medium.com/@shivajbd/understanding-input-and-output-shape-
in-lstm-keras-c501ee95c65e, Accessed on 10 March 2020.

[41] P. Warden and D. Situnayake. [n.d.]. TinyML: Machine Learning with TensorFlow
Lite on Arduino and Ultra-low-power Microcontrollers. O‚ÄôReilly Media, Incorpo-
rated. https://books.google.it/books?id=sB3mxQEACAAJ

