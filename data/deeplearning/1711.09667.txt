Ref: International Conference on Artiﬁcial Neural Networks (ICANN), Springer LNCS,
Vol. 9887, pp. 88–96, Barcelona, Spain, 2016.

Winner of Best Paper Award in ICANN 2016

DeepChess: End-to-End Deep Neural Network
for Automatic Learning in Chess

Eli (Omid) David1,2, Nathan S. Netanyahu2,3, and Lior Wolf1

1 The Blavatnik School of Computer Science, Tel Aviv University, Tel Aviv, Israel
mail@elidavid.com, wolf@cs.tau.ac.il
2 Department of Computer Science, Bar-Ilan University, Ramat-Gan, Israel
nathan@cs.biu.ac.il
3 Center for Automation Research, University of Maryland, College Park, MD, USA
nathan@cfar.umd.edu

Abstract. We present an end-to-end learning method for chess, relying on
deep neural networks. Without any a priori knowledge, in particular without
any knowledge regarding the rules of chess, a deep neural network is trained
using a combination of unsupervised pretraining and supervised training. The
unsupervised training extracts high level features from a given position, and
the supervised training learns to compare two chess positions and select the
more favorable one. The training relies entirely on datasets of several million
chess games, and no further domain speciﬁc knowledge is incorporated.
The experiments show that the resulting neural network (referred to as
DeepChess) is on a par with state-of-the-art chess playing programs, which
have been developed through many years of manual feature selection and
tuning. DeepChess is the ﬁrst end-to-end machine learning-based method
that results in a grandmaster-level chess playing performance.

Introduction

1
Top computer chess programs are based typically on manual feature selection and
tuning of their evaluation function, usually through years of trial and error. While
computer chess is one of the most researched ﬁelds within AI, machine learning has
not been successful yet at producing grandmaster level players.

In this paper, we employ deep neural networks to learn an evaluation function
from scratch, without incorporating the rules of the game and using no manually
extracted features at all. Instead, the system is trained from end to end on a large
dataset of chess positions.

Training is done in multiple phases. First, we use deep unsupervised neural net-
works for pretraining. We then train a supervised network to select a preferable
position out of two input positions. This second network is incorporated into a new
form of alpha-beta search. A third training phase is used to compress the network
in order to allow rapid computation.

Our method obtains a grandmaster-level chess playing performance, on a par
with top state-of-the-art chess programs. To the best of our knowledge, this is the
ﬁrst machine learning-based method that is capable of learning from scratch and
obtains a grandmaster-level performance.

2 Previous Work
Chess-playing programs have been improved signiﬁcantly over the past several decades.
While the ﬁrst chess programs could not pose a challenge to even a novice player,

7
1
0
2

v
o
N
7
2

]
E
N
.
s
c
[

1
v
7
6
6
9
0
.
1
1
7
1
:
v
i
X
r
a

 
 
 
 
 
 
2

E.O. David et al.

the current advanced chess programs have been outperforming the strongest hu-
man players, as the recent man vs. machine matches clearly indicate. Despite these
achievements, a glaring deﬁciency of today’s top chess programs is their severe lack
of a learning capability (except in most negligible ways, e.g., “learning” not to play
an opening that resulted in a loss, etc.).

During more than ﬁfty years of research in the area of computer games, many
learning methods have been employed in several games. Reinforcement learning has
been successfully applied in backgammon [16] and checkers [13]. Although reinforce-
ment learning has also been applied to chess [1,10], the resulting programs exhibit a
playing strength at a human master level at best, which is substantially lower than
the grandmaster-level state-of-the-art chess programs. These experimental results
conﬁrm Wiering’s [17] formal arguments for the failure of reinforcement learning in
rather complex games such as chess. Very recently, a combination of a Monte-Carlo
search and deep learning resulted in a huge improvement in the game of Go [15].
However, Monte-Carlo search is not applicable to chess, since it is much more tac-
tical than Go, e.g., in a certain position, all but one of the moves by the opponent
may result in a favorable result, but one refutation is suﬃcient to render the position
unfavorable.

In our previous works, we demonstrated how genetic algorithms (GA’s) could be
applied successfully to the problem of automatic evaluation function tuning when
the features are initialized randomly [3,4,5,6]. Although to the best of our knowledge,
these works are the only successful automatic learning methods to have resulted in
grandmaster-level performance in computer chess, they do not involve learning the
features themselves from scratch. Rather, they rely on the existence of a manually
created evaluation function, which consists already of all the required features (e.g.,
queen value, rook value, king safety, pawn structure evaluation, and many other
hand crafted features). Thus, GAs are used in this context for optimization of the
weights of existing features, rather than for feature learning from scratch.

Learning to Compare Positions

3
The evaluation function is the most important component of a chess program. It
receives a chess position as an input, and provides a score as an output. This score
represents how good the given position is (typically from White’s perspective). For
example, a drawish position would have a score close to 0, a position in which
white has two pawns more than black would have a score of +2, and a position
in which black has a rook more than white, would be scored around −5. A good
evaluation function considers typically a large number (i.e., on the order of hundreds
and even thousands) of properties in addition to various piece-related parameters,
such as king safety, passed pawns, doubled pawns, piece centrality, etc. The resulting
score is a linear combination of all the selected features. The more accurately these
features and their associated values capture the inherent properties of the position,
the stronger the corresponding chess program becomes.

In this paper, we are interested in developing such an evaluation function from
scratch, i.e., with absolutely no a priori knowledge. As a result, we do not provide
our evaluation function with any features, including any knowledge about the rules
of chess. Thus, for our training purposes, we are limited to observing databases of
chess games with access only to the results of the games (i.e., either a win for White
or Black, or a draw).

DeepChess: End-to-End Deep Neural Network for Automatic Learning in Chess

3

Fig. 1: Architecture illustration of DeepChess.

Since the real objective of an evaluation function is to perform relative compar-
isons between positions, we propose a novel training method around this concept.
The model receives two positions as input and learns to predict which position is
better. During training, the input pair is selected as follows: One position is selected
at random from a game which White eventually won and the other from a game
which Black eventually won. This relies on the safe assumption that, on average, po-
sitions taken from games that White won are preferable (from White’s perspective)
to those taken from games that White lost. Additionally, the proposed approach
allows for the creation of a considerably larger training dataset. For example, if we
have a million positions from games that White had won, and a million positions
from games that White had lost, we can create 2 × 1012 training pairs (multiplied
by 2 because each pair can be used twice, as [win,

loss] and [loss, win]).

Our approach consists of multiple stages. First, we train a deep autoencoder on
a dataset of several million chess positions. This deep autoencoder functions as a
nonlinear feature extractor. We refer to this component as Pos2Vec, since it converts
a given chess position into a vector of values which represent the high level features.
In the second phase, we use two copies of this pretrained Pos2Vec side by side, and
add fully connected layers on top of them, with a 2-value softmax output layer.
We refer to this structure as DeepChess. It is trained to predict which of the two
positions results in a win. Note that similar to the most successful object detection
methods [11], we found a 2-value output to outperform one binary output. Figure 1
illustrates the neural network architecture.

Dataset: We employed the games dataset of CCRL (www.computerchess.org.
uk/ccrl), which contains 640,000 chess games, out of which White won 221,695
games and Black won 164,387 games, the remaining games ended in a draw. Our
experiments show that the inclusion of games that ended in a draw is not beneﬁcial,
so we only use games which ended in a win.

4

E.O. David et al.

From each game we randomly extracted ten positions, with the restriction that
the selected position cannot be from one of the ﬁrst ﬁve moves in the game, and
that the actual move played in the selected position is not a capture. Capture moves
are misleading as they mostly result in a transient advantage since the other side
is likely to capture back right away. The dataset thus contains 2,216,950 positions
from games which White won (W positions), and 1,643,870 positions from games
which White lost (L positions), for a total of 3,860,820 positions.

Each position is converted to a binary bit-string of size 773. There are two sides
(White and Black), 6 piece types (pawn, knight, bishop, rook, queen, and king),
and 64 squares. Therefore, in order to represent a position as a binary bit-string, we
would require 2 × 6 × 64 = 768 bits (this is known as bitboard representation). There
are an additional ﬁve bits that represent the side to move (1 for White and 0 for
Black) and castling rights (White can castle kingside, White can castle queenside,
Black can castle kingside, and Black can castle queenside).

Training Pos2Vec: We ﬁrst trained a deep belief network (DBN) [2], which would
later serve as the initial weights for supervised training. The DBN is based on stacked
autoencoders which are trained using layer-wise unsupervised training. The network
consists of ﬁve fully connected layers of sizes: 773–600–400–200–100. We initially
trained the ﬁrst layer (i.e., a 3-layer (773–600–773) autoencoder), before ﬁxing its
weights and training the weights of a new (600–400–600) autoencoder, and so on.

We used a random subset of 2,000,000 chess positions for training the DBN, of
which 1,000,000 were White win (W ) positions and 1,000,000 were Black win (L)
positions. The DBN uses a rectiﬁed linear unit (ReLU), i.e., f (x) = max(0, x), and
a learning rate that starts from 0.005 and is multiplied by 0.98 at the end of each
epoch. No regularization is used. The DBN is trained for 200 epochs.

Training DeepChess: As described earlier, this Siamese network is the core com-
ponent of our method. We used the previously trained Pos2Vec DBN as the initial
weights for the supervised network. Placing two disjoint copies of Pos2Vec side by
side, we added on top of them four fully connected layers of size 400, 200, 100,
and 2, which are connected to both Pos2Vec components. The ﬁrst ﬁve layers of
Pos2Vec thus serve as high level feature extractors, and the last four layers compare
the features of the positions to determine which one is better.

During the supervised training phase, the entire network including the Pos2Vec
parts is modiﬁed. We tie the weights of the two Pos2Vec-based feature extraction
components, i.e., we use shared weights.

We trained this network for 1000 epochs. In each epoch, we created 1,000,000
random input pairs, where each pair consists of one position selected at random from
the 2,116,950 W positions, and one position selected at random from the 1,543,870 L
positions. (we set aside 100,000 W positions and 100,000 L positions for validation).
The pair is then randomly ordered as either (W, L) or (L, W ). Since the number of
potential training pairs is 6.5 × 1012, virtually all training samples in each epoch
are new, thus guaranteeing that no overﬁtting would take place. For this reason, we
do not use any regularization term. The activation used in all layers is the ReLU
function. The learning rate starts from 0.01, and is multiplied by 0.99 after each
epoch. The cross entropy loss is used. The training and validation accuracies obtained
were 98.2% and 98.0%, respectively. This is remarkable, considering that no a priori
knowledge of chess, including the very rules of the games are provided.

DeepChess: End-to-End Deep Neural Network for Automatic Learning in Chess

5

Improving Inference Speed by Network Distillation: Before incorporating the
trained network into a chess program and evaluating its performance, we ﬁrst had to
address the problem that the network is too computationally expensive in prediction
(inference) mode, running markedly slower than a typical evaluation function in a
chess program. Several previous works have demonstrated how a considerably smaller
neural network could be trained to mimic the behavior of a much more complex
neural network [8,12]. These network compression or distilling approaches train the
smaller network to produce the same output as the larger network (learning from
soft targets).

We ﬁrst trained a smaller four-layer network of 773–100–100–100 neurons to
mimic the feature extraction part of DeepChess, which consists of the ﬁve layers 773–
600–400–200–100. We then added three layers of 100–100–2 neurons (originally 400–
200–100–2) and trained the entire network to mimic the entire DeepChess network..
Further optimization was achieved by realizing that while most of the weights
are concentrated in the ﬁrst layer of the two Pos2Vec components (733–100 layer),
there are at most 32 chess pieces in a given position and less than 5% of the weights
in the input layer would be activated. Thus the amount of ﬂoating point operations
required to be performed during inference is much reduced.

Table 1 summarizes the validation results post compression. The distilled network
is comparable to the full original network. When training from scratch using the
smaller network size (with pretraining but without ﬁrst training the larger network
and then distilling it), the performance is much reduced.

4 A Comparison-Based Alpha-Beta Search

Chess engines typically use the alpha-beta search algorithm [9]. Alpha-beta is a
depth-ﬁrst search method that prunes unpromising branches of the search tree ear-
lier, improving the search eﬃciency. A given position is the root of the search tree,
and the legal moves for each side create the next layer nodes. The more time avail-
able, the deeper this search tree can be processed, which would result in a better
overall playing strength. At leaf nodes, an evaluation function is applied.

In an alpha-beta search, two values are stored; α which represents the value of
the current best option for the side to move, and β which is the negative α of the
other side. For each new position encountered if value > α, this value would become
the new α, but if value > β, the search is stopped and the search tree is pruned,
because value > β means that the opponent would not have allowed the current
position to be reached (better options are available, since value > β is equivalent to
−value < α for the other side). Given a branching factor of B and search depth D,
alpha-beta reduces the search complexity from BD for basic DFS, to BD/2.

In order to incorporate DeepChess, we use a novel version of an alpha-beta algo-
rithm that does not require any position scores for performing the search. Instead of
α and β values, we store positions αpos and βpos. For each new position, we compare
it with the existing αpos and βpos positions using DeepChess, and if the comparison
shows that the new position is better than αpos, it would become the new αpos, and
if the new position is better than βpos, the current node is pruned. Note that since
DeepChess always compares the positions from White’s perspective, when using it
from Black’s perspective, the predictions should be reversed.

6

E.O. David et al.

Position hashing: When searching a tree of possible moves and positions, many of
the positions appear repeatedly in diﬀerent parts of the search tree, since the same
position can arise in diﬀerent move orders. To reduce the required computation,
we store a large hash table for positions and their corresponding feature extraction
values. For each new position, we ﬁrst query the hash table, and if the position has
already been processed, we reuse the cached values. Since we use a symmetric feature
extraction scheme, where the weights are shared, each position needs only be stored
once.

5 Experiments

We provide both quantitative and qualitative results.

5.1 Static Understanding of Chess Positions

In order to measure the chess understanding of DeepChess, we ran it on a manually
generated dataset consisting of carefully designed inputs. Each input pair in this
dataset contains two nearly identical positions, where one contains a certain feature
and the other one does not. Starting from simple piece values (e.g., two identical
positions where a piece is missing from one), to more complex imbalances (e.g.,
rook vs. knight and a bishop), the predictions of DeepChess show that it has easily
learned all of the basic concepts regarding piece values. We then measured more
subtle positional features, e.g., king safety, bishop pair, piece mobility, passed pawns,
isolated pawns, doubled pawns, castling rights, etc. All of these features are also well
understood by DeepChess.

More interestingly, DeepChess has learned to prefer positions with dynamic at-
tacking opportunities even when it has less material. In many cases, it prefers a
position with one or two fewer pawns, but one that oﬀers non-material positional
advantages. This property has been associated with human grandmasters, and has
always been considered an area in which computer chess programs were lacking.
While the scores of current evaluation functions in state-of-the-art chess programs
are based on a linear combination of all the features present, DeepChess is a non-
linear evaluator, and thus has a far higher potential for profound understanding
of chess positions (also similar to human grandmaster analysis of positions). Fig-
ure 2 shows a few examples where this preference of DeepChess for non-materialistic
advantages leads to favoring positional sacriﬁces, as played by human grandmasters.

Tal - Larsen
Move: Nd5

Aronian - Leko
Move: Re5

Alekhine -Golombek
Move: d5

Seirawan - Kozul
Move: c5

Fig. 2: Examples where DeepChess prefers to play the same positional sacriﬁces that
were played by grandmasters. It is White’s turn to move in all the above positions.

DeepChess: End-to-End Deep Neural Network for Automatic Learning in Chess

7

Method

Accuracy

Uncompressed
Compressed
Small

98.0%
97.1%
95.4%

Match
RD
DeepChess 30min - Crafty 59.0 - 41.0 +63.2
DeepChess 30min - Falcon
51.5 - 48.5 +10.4
DeepChess 120min - Falcon 63.5 - 36.5 +96.2

Result

Table 1: Validation accuracy
of the Uncompressed and com-
pressed networks, and a small
network trained from scratch.

Table 2: DeepChess vs. Falcon and Crafty
(RD is the Elo rating diﬀerence). Time control:
30 minutes per game for Falcon and Crafty.
30 minutes or two hours for DeepChess.

5.2 Playing Strength vs. State-of-the-Art Competitors

We used the Falcon chess engine as a baseline for our experiments. Falcon is
a grandmaster-level chess program, which has successfully participated in several
World Computer Chess Championships (WCCCs); in particular, it won second place
at the World Computer Speed Chess Championship in 2008. Falcon’s extensive
evaluation function consists of more than 100 parameters, and its implementation
contains several thousands of lines of code.

Despite all the computational improvements mentioned earlier for DeepChess,
and numerous other implementation improvements which result in substantial ad-
ditional computational speedup, DeepChess is still four times slower than Falcon’s
own evaluation function. Nevertheless, we incorporate DeepChess into Falcon, com-
pletely replacing the evaluation function of the program.

To measure the performance of DeepChess, we conducted a series of matches
against Falcon, and also against the chess program Crafty. Crafty has success-
fully participated in numerous WCCCs, and is a direct descendant of Cray Blitz,
the WCCC winner of 1983 and 1986. It has been frequently used in the literature as
a standard reference.

Each of the matches of DeepChess vs. Falcon and Crafty consisted of 100
games under a time control of 30 minutes per game for each side. Table 2 provides
the results. As can be seen, DeepChess is on a par with Falcon. Falcon uses a
manually tuned evaluation function developed over nearly ten years, containing more
than a hundred parameters which grasp many subtle chess features. And yet, without
any chess knowledge whatsoever (not even basic knowledge as the rules of chess), our
DeepChess method managed to reach a level which is on a par with the manually
tuned evaluation function of Falcon. The results also show that DeepChess is over
60 Elo [7] stronger than Crafty, a program which has won two WCCCs and has
been manually tuned for thirty years.

DeepChess performs on a par with Falcon despite the fact that it is four times
slower. We ran a separate experiment where we allowed DeepChess to use four
times more time than Falcon (2 hours vs 30 minutes). Running 100 such matches,
DeepChess resoundingly defeated Falcon with a result of 63.5 - 36.5, corresponding
to a 96 Elo performance diﬀerence. This shows that DeepChess is actually not on
par with Falcon’s evaluation function, but is considerably superior to it. In order
to utilize the full potential of this enhanced chess understanding, it is critical to
decrease the runtime of the neural network in the inference mode.

8

E.O. David et al.

6 Concluding Remarks

We presented the ﬁrst successful end-to-end application of machine learning in com-
puter chess. Similarly to human chess masters, DeepChess does not assign numeral
evaluation values to diﬀerent positions, but rather, compares diﬀerent positions that
may arise, and opts for the most promising continuation.

Having observed the playing style of DeepChess, we note that it plays very aggres-
sively, often sacriﬁcing pieces for long term positional gains (i.e., non-tactical gains).
This playing style resembles very much the playing style of human grandmasters.
While computer chess programs have long been criticized for being materialistic,
DeepChess demonstrates the very opposite by exhibiting an adventurous playing
style with frequent positional sacriﬁces.

References

1. J. Baxter, A. Tridgell, and L. Weaver. Learning to play chess using temporal-diﬀerences.

Machine Learning, 40(3):243–263, 2000.

2. Y. Bengio, P. Lamblin, D. Popovici, and H. Larochelle. Greedy layer-wise training of

deep networks. NIPS, 2007.

3. O.E. David, M. Koppel, and N.S. Netanyahu. Genetic Algorithms for Mentor-Assisted

Evaluation Function Optimization. GECCO, 2008.

4. O.E. David, H.J. van den Herik, M. Koppel, and N.S. Netanyahu. Simulating human
Grandmasters: Evolution and coevolution of evaluation functions. GECCO, 2009.
5. O.E. David, M. Koppel, and N.S. Netanyahu. Expert-driven genetic algorithms for sim-
ulating evaluation functions. Genetic Programming and Evolvable Machines, 12(1):5–
22, 2011.

6. O.E. David, H.J. van den Herik, M. Koppel, and N.S. Netanyahu. Genetic Algo-
rithms for Evolving Computer Chess Programs. IEEE Trans. Evolutionary Compu-
tation, 18(5):779–789, 2014.

7. A.E. Elo. The rating of chessplayers, past and present, Batsford, London, 1978.
8. G. Hinton, O. Vinyals, and J. Dean. Distilling knowledge in a neural network. Deep

Learning and Representation Learning Workshop, NIPS, 2014.

9. D.E. Knuth and R.W. Moore. An analysis of alpha-beta pruning. Artiﬁcial Intelligence,

6(4):293–326, 1975.

10. M. Lai. Giraﬀe: Using deep reinforcement learning to play chess. Master’s Thesis, Im-

perial College London, 2015.

11. S. Ren, K. He, R. Girshick, and J. Sun. Faster R-CNN: Towards real-time object

detection with region proposal networks. NIPS, 2015.

12. A. Romero, N. Ballas, S. Ebrahimi Kahou, A. Chassang, C. Gatta, and Y. Bengio.

FitNets: Hints for thin deep nets. ICLR, 2015.

13. J. Schaeﬀer, M. Hlynka, and V. Jussila. Temporal diﬀerence learning applied to a
high-performance game-playing program. Joint Conf. Artiﬁcial Intelligence, 2001.
14. J. Schaeﬀer, N. Burch, Y. Bj¨ornsson, A. Kishimoto, M. M¨uller, and R. Lake. Checkers

is Solved. Science, 317:1518–1522, 2007.

15. D. Silver et al. Mastering the game of Go with deep neural networks and tree search.

Nature, 529:484–489, 2016.

16. G. Tesauro. Practical issues in temporal diﬀerence learning. Machine Learning, 8(3-

4):257–277, 1992.

17. M.A. Wiering. TD learning of game evaluation functions with hierarchical neural ar-

chitectures. Master’s Thesis, University of Amsterdam, 1995.

