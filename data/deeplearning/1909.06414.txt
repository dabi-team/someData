Learning Household Task Knowledge from WikiHow Descriptions

Yilun Zhou
MIT CSAIL
yilun@
mit.edu

Julie A. Shah
MIT CSAIL
julie a shah@
csail.mit.edu

Steven Schockaert
Cardiff University
SchockaertS1@
cardiff.ac.uk

9
1
0
2

p
e
S
3
1

]
L
C
.
s
c
[

1
v
4
1
4
6
0
.
9
0
9
1
:
v
i
X
r
a

Abstract

Commonsense procedural knowledge is im-
portant for AI agents and robots that operate
in a human environment. While previous at-
tempts at constructing procedural knowledge
are mostly rule- and template-based, recent ad-
vances in deep learning provide the possibil-
ity of acquiring such knowledge directly from
natural language sources. As a ﬁrst step in this
direction, we propose a model to learn em-
beddings for tasks, as well as the individual
steps that need to be taken to solve them, based
on WikiHow1 articles. We learn these embed-
dings such that they are predictive of both step
relevance and step ordering. We also experi-
ment with the use of integer programming for
inferring consistent global step orderings from
noisy pairwise predictions.

1

Introduction

For AI agents to serve as competent (digital
or physical) assistants in everyday environments,
they need an understanding of the common tasks
that people perform. In contrast to factual knowl-
edge, which is encoded to some extent in knowl-
edge graphs such as Freebase (Bollacker et al.,
2008), there are currently no resources that cap-
ture such knowledge in a comprehensive way.

As a natural solution, in this paper, we con-
sider the problem of learning procedural knowl-
edge from text descriptions, focusing on house-
hold tasks as a case study. There are two reasons
for this particular focus. First, household tasks re-
quire a rich amount of commonsense knowledge,
which makes them challenging to deal with for AI
agents. Second, learning such knowledge has im-
portant applications in the context of household
robots and smart home technologies, among oth-
ers.

1https://www.wikihow.com

The biggest challenge associated with house-
hold tasks is the lack of explicit structured infor-
mation. While specialized datasets for some as-
pects of household tasks are available (e.g. cook-
ing recipes (Yagcioglu et al., 2018), in-home nav-
igation commands (Matuszek et al., 2013), hu-
man action trajectories for chores (Koppula and
Saxena, 2013)), general information only exists in
natural language format as descriptions intended
for human consumption. With recent advances in
deep learning and text mining, it is natural to won-
der whether, and to what extent, we can acquire
knowledge about household tasks from existing
textual sources. To start answering this question,
in this paper we tap into WikiHow, one of the
largest online databases of procedural knowledge.
Our aim is to jointly learn two types of knowl-
edge: (i) whether a certain step pertains to a cer-
tain task and (ii) how to order two (potentially non-
sequential) steps for a given task. We evaluate our
learned model both in terms of the performance
achieved on these two tasks and by analyzing the
resulting embeddings.

2 Related Work

Knowledge Representation A large number of
knowledge graphs have already been constructed,
capturing a wide variety of human knowledge.
These graphs, such as Freebase (Bollacker et al.,
2008) and ConceptNet (Liu and Singh, 2004), all
share the common structure of using nodes to rep-
resent concepts and using edges to represent rela-
tions. Among many applications, Williams et al.
(2017) showed that ConceptNet can enable better
story understanding by capturing some aspects of
commonsense knowledge.

However, there is little procedural knowledge
in ConceptNet.
Instead, planning approaches
have traditionally been used to model such knowl-

 
 
 
 
 
 
edge.
In classical planning languages, such as
PDDL (McDermott et al., 1998), the environment
is described with a set of predicates and actions
are deﬁned in terms of pre-conditions and post-
conditions. This turns planning into a search prob-
lem. While efﬁcient and provably optimal in small
domains, it is hard to model the full spectrum of
real world environments with such exact deﬁni-
tions. By contrast, in our work we take a comple-
mentary approach, acquiring implicit knowledge
from large amounts of data.

Embedding learning Vector space embeddings
are commonly used to represent the semantics
of linguistic constructs such as words and sen-
tences as vectors in a high-dimensional space. At
word level, embedding models such as word2vec
(Mikolov et al., 2013) and GloVe (Pennington
et al., 2014) are trained based on linguistic con-
text, i.e. the representation of a word depends on
the words surrounding mentions of that word in
some text corpus. At sentence level, embeddings
can be trained from context or learned for one or
several downstream applications (Radford et al.,
2018; Devlin et al., 2018).

Embeddings for various other kinds of data
have also been studied. For example, Chung and
Glass (2018) learn vector representations from au-
dio data. Moreover, a large number of methods
for embedding graph and network structures have
been proposed (Goyal and Ferrara, 2018).

Script knowledge
In our work, we learn em-
beddings for natural language instructions targeted
to facilitate commonsense knowledge acquisition.
One of the ways in which such embeddings can
be used is to rank step instructions for a spe-
ciﬁc task. Speciﬁcally, given the name of the
task and two steps, all expressed in natural lan-
guage, we want our model to predict which step
should be done ﬁrst, using only the embeddings of
the task name and steps as input. This problem
falls into the general category of learning script
knowledge, for which several models have already
been proposed. For example, Chambers and Ju-
rafsky (2009) proposed one of the ﬁrst models to
learn script knowledge based on estimated mu-
tual information between events. Modi and Titov
(2014) learned embeddings for events such that a
linear ranking function operating on embedding
space can be used to infer event orders. Pichotta
and Mooney (2016a) learned orders from parsed

event representation with a LSTM model. Pichotta
and Mooney (2016b) used a sentence-level LSTM
model that does not require explicit event parsing
and extraction.

Knowledge Acquisition from WikiHow There
have been many works on collecting knowledge
from the web. With speciﬁc focus on WikiHow,
Chu et al. (2017) used information retrieval and
embedding-based clustering to distill a knowledge
base of task execution. By using the OpenIE sys-
tem (Angeli et al., 2015), they inferred relations
between tasks and steps so that the distilled knowl-
edge base recognizes that the task in a WikiHow
article A is equivalent to a step B in another Wik-
iHow article C, and the user, when reading article
C can look up detailed instructions for step B by
reading the automatically linked article A. In this
way, a hierarchical structure among articles can be
extracted.

Park and Motahari Nezhad (2018) used a neu-
ral network model to learn speciﬁc relations be-
tween the steps of each task. Speciﬁcally, three re-
lations is method of, is subtask of, and
is alternative of are learned using a hier-
archical attention neural network that achieved su-
perior performance than standard approaches us-
ing an information extraction pipeline.

3 Method

3.1 Dataset Description

We collected a corpus consisting of all WikiHow
articles under the category of “Home and Gar-
den2”, which we believe is most relevant for our
purpose of understanding household procedural
knowledge. Each WikiHow article describes a par-
ticular task, which is composed of a number of
steps. Some example tasks are shown in Table
1. Each step is represented by a gist and an ex-
planation. The gist is a brief and concise sum-
mary of the step, such as “purchase packing sup-
plies”. The corresponding explanation gives ad-
ditional contexts and details to the gist. For the
previous example, the explanation is as follows:

“Furniture should generally not be
placed in a truck without wrapping it in
some sort of protective material. After
you’ve completed your inventory, con-

2https://www.wikihow.com/Category:

Home-and-Garden

Remove Staples with Your Bare Hands
Buy a Shipping Container
Pick Up Broken Glass Splinters
Clean Fireplace Glass
Clean an Espresso Machine

Table 1: A random sample of task titles

Shake your clothes
Move the bowl
Dig a hole about 2 ft deep
Take out the trash
Steam clean older carpets

Table 2: A random sample of task steps

sider what you’ll need to move each
piece of furniture...”

Some additional examples of step gists as shown
in Table 2.

An additional particularity with WikiHow is
that there are two types of article structures. About
30% of all articles have ﬂat structures, which
means that an article has a list of individual
steps. The remaining ones have 2-level hierarchi-
cal structures, which means that an article has sev-
eral titled subsections, and each subsection has a
list of individual steps. For example, an article on
“clean kitchen” may include subsections on “or-
ganize kitchen shelves”, “clean countertop”, and
“remove oil stain on ﬂoor”. We found that subsec-
tion titles are semantically and syntactically very
similar to article titles, so we simply consider each
subsection as a separate task. With this prepro-
cessing, the dataset contains 12,431 articles with a
total of 162,771 individual steps.3

3.2 Model Architecture

A task title t is a list of l natural language words
(w1, ..., wl). For each word, we use the pre-trained
GloVe embedding (Pennington et al., 2014) to
look up its vector representation. This embedding
is ﬁxed during training. Words which are not in the
GloVe vocabulary are represented using a special
<unk> token, the embedding for which is learned.
We use (cid:126)vi to denote the embedding corresponding
to the word wi. Hence the task title t is repre-

3The dataset and the model

implementation can be
downloaded at https://github.com/YilunZhou/
wikihow-embedding/

(a) Embedding of task title, step gist, and step explanation

(b) Step relevance prediction

(c) Step order prediction

Figure 1: Model architecture

sented as t = ((cid:126)v1, ..., (cid:126)vl). The representations for
step gists and step explanations are analogous.

Figure 1 shows the general workﬂow of our
model. First, three LSTM networks are used to
encode the task titles, step gists and step expla-
nations. The input to each of these LSTMs is a
list of word vectors, as explained above, and the
outputs are the corresponding embeddings, which
are taken as the last hidden state of the LSTM en-
coder. The initial hidden units and memory units
of the LSTMs are initialized to 0 (and not updated
during training).

3.3 Step Relevance Prediction

Predicting the relevance of a step to a task is a bi-
nary classiﬁcation problem. We ﬁrst concatenate
the embeddings for the task title, step gist, and
step explanation together to form the input vector.
Then this vector is passed through a hidden layer
and an output layer to get the probability that the
step is relevant to the task. Negative log-likelihood
(NLL) loss is used during training.

   Fill The Bucket With Clean Water . LSTM Network  Text Embedding  Word Embedding Layer   Task Title Step Gist Step Explanation Hidden Layer Relevance Prediction  Step 1 Gist Step 1 Explanation Step 2 Gist Step 2 Explanation Task Title Hidden Layer Order Prediction 3.4 Step Ranking Prediction

Given the task name and two steps from the Wik-
iHow description of that task, we use a similar
fully connected network to predict whether a step
should happen before another step from the con-
catenation of embeddings of the task and the two
steps, also with NLL loss.

3.5

Joint Prediction of Step Ordering

Given an unordered set of steps, for a given task,
the aforementioned neural network can be applied
to make a prediction for pairwise step orderings.
However, since these predictions are made inde-
pendently, they may be conﬂicting with each other
(e.g. A is predicted before B, B is predicted before
C, and C is predicted before A). Furthermore, we
recognize that sometimes two steps can be done in
parallel, and a penalty should not be incurred for
incorrectly predicting the ordering in which these
two steps happen to be ordered in WikiHow. Thus,
to be fully ﬂexible with the possibility of “ambigu-
ous” ordering, we employ an integer programming
(IP) formulation.

For each pair of steps (i, j), with i (cid:54)= j, we
introduce two binary variables xij and xji. The
meaning of xij = 1 is that step i has to occur
(strictly) before step j, while xij = 0 means that
either step i has to occur (strictly) after step j (if
xji = 1), or that the ordering does not matter (if
xji = 0). Then we set up the following IP prob-
lem:

maximize

(cid:88)

wijxij,

i,j
subject to xij ∈ {0, 1}

∀i, j,

since wij ≤ 0 due to wij being a log probabil-
ity, the optimal solution is achieved by choosing
xij = 0 for each i and j. Indeed, no penalty is in-
curred if all pairwise relations are predicted to be
ambiguous. For this reason, we have the ﬁnal con-
straint which imposes that at least D pairs should
be ordered. Note that for a task with T steps, D
can be at most T (T − 1)/2 (i.e. half of all total
pairs). Otherwise the second constraint would be
unsatisﬁable.

3.6 Learning and Inference

We used PyTorch (Paszke et al., 2017) to imple-
ment the feed-forward and back-propagation of
training, with Adam (Kingma and Ba, 2014) as
the optimizer. To solve the integer programming
problem, we used CVXPY (Diamond and Boyd,
2016).

4 Experiments

4.1 Data Preparation

We used a 80%/10%/10% split of training, valida-
tion, and test data. All reported statistics are from
the test set, which is held out during training. Ta-
ble 3 summarizes the results.

For step relevance prediction tasks, we collected
each positive example by sampling a task title and
a random step associated with the task. For nega-
tive examples, we sampled task titles and steps in-
dependently and made sure that the step does not
belong to the task. The number of positive and
negative examples are balanced.

For step ordering, for each example we sample
a task and two steps. Then we randomly denote
one of them as step 1 and the other as step 2, and
set up the label accordingly.

∀i, j,

xij + xji ≤ 1
xij + xjk − xik ≤ 1
(cid:88)

xij ≥ D.

∀i, j, k,

4.2 Training Details

i,j

In the objective function, we choose wij = log
Pr(i before j), where this log probability is pre-
dicted by the neural network. The ﬁrst constraint
enforces the binary nature of xij. The second con-
straint requires that xij and xji cannot be both 1,
as that would mean that step i is both strictly be-
fore and after step j, which is not possible. The
if step i is
third constraint enforces transitivity:
strictly before step j, and step j is also strictly be-
fore step k, then we must have that step i is strictly
before step k. At this stage, it is easy to see that

We used 500-dimensional embeddings through-
out, but we found that the learning performance is
not sensitive to the embedding dimension, as long
as it is over 100. We zero-initialized the hidden
and memory cells of the LSTM encoders. The
learning rate for the Adam optimizer was set to
0.001.

4.3 Learning Performance

Our model performance is summarized in the ﬁrst
In addition, we also tried directly using a
row.
bag of word representation as the representation
for step explanation, while still keeping the LSTM

Step relevance

Step ranking

LSTM step
explanation

bag step
explanation

no step
explanation

0.911

0.752

0.902

0.664

0.844

0.657

Table 3: Model performance on two prediction prob-
lems

Figure 2: Training (blue) and validation (orange) loss
and accuracy for two tasks

encoder for step gist (second row). Speciﬁcally,
the embedding of the step explanation is calcu-
lated as the average of all embedding vectors for
words in the explanation. We also tried not using
step explanation information at all, whose perfor-
mance is shown in the third row.

We see that for both relevance and ranking
predictions, the full model with step explanation
encoded by an LSTM model performs the best.
However, using a bag of words vector representa-
tion of step explanations still performs better than
not using the step explanation at all, although the
improvement is small in the case of step ranking
prediction.

The learning curve in Figure 2 shows that while
the model is able to get very high accuracy on the
training set, the validation accuracy stabilizes af-
ter a few thousand iterations, indicating that the
model is overﬁtting to the training set afterwards.
The test performance in Table 3 was calculated on
the test set using the model iteration that achieves
the highest validation accuracy.

Figure 3: Rank order inference using integer program-
ming

4.4

Integer Programming Inference

In this section, we study if using integer program-
ming inference can provide better ordering perfor-
mance if we allow the ordering among some pairs
to be undecided (i.e. if we set D to be strictly
less than half the total number of pairs). Figure
3 presents the result.

The horizontal axis shows the proportion of am-
biguous pairs allowed, and the vertical axis shows
the proportion of ordering errors. For comparison,
we would achieve the red dashed line if we ran-
domly mark pairs as ambiguous, and thus not pe-
nalized. We can see that the integer programming
inference method is indeed better at identifying
ambiguous pairs that, when marked as such, would
lead to better performance. However, the improve-
ment is not very substantial, maybe because at
training time, the neural network tries to satisfy
ambiguous pairs in a way that is more or less
arbitrarily deﬁned by the training data, bringing
the overall performance down. Thus, one speciﬁc
idea for future work would be to allow the neural
network to intentionally make ambiguous predic-
tions, for which it would not be penalized. Clearly,
however, some form of regularization would need
to be in place to prevent the network from making
the ambiguous prediction too frequently.

4.5 Embedding Visualization

Figure 4 visualizes the embedding of 50 randomly
selected tasks, using t-SNE (Maaten and Hinton,
2008) to reduce the dimension to 2. We can see
that several clusters of semantically related tasks
can be identiﬁed, which are indicated by ellipses.

Figure 4: Embedding visualization.

5 Conclusion and Future Work

References

In this paper, we collected a dataset of natural lan-
guage instructions for a diverse set of household
tasks. We learned a joint embedding of task ti-
tle and step text for two problems, predicting if a
step belongs to a task title and ordering two steps
given the task title. We showed that the step rele-
vance can be predicted with a high accuracy if we
include the step explanation as part of our model.
However, step ordering turned out to be a more
challenging problem. We believe that this is at
least partly due to noise in the dataset, especially
the fact that the ordering of some steps tends to be
exchangeable. We also noticed some issues that
are speciﬁc to WikiHow. For example, the steps
which are mentioned for some tasks are more like
tips and suggestions.

In terms of future work, one direction is to
ground the learned knowledge into some physi-
cal systems, such as an in-home robotic platform.
Another direction is to try to recognize steps that
do not have well-deﬁned orders (Section 4.4), al-
though this is likely to require some additional su-
pervision signal.

6 Acknowledgments

Steven Schockaert has been supported by ERC
Starting Grant 637277.

Gabor Angeli, Melvin Jose Johnson Premkumar, and
Christopher D Manning. 2015. Leveraging linguis-
tic structure for open domain information extraction.
In Proceedings of the 53rd Annual Meeting of the
Association for Computational Linguistics and the
7th International Joint Conference on Natural Lan-
guage Processing (Volume 1: Long Papers), vol-
ume 1, pages 344–354.

Kurt Bollacker, Colin Evans, Praveen Paritosh, Tim
Sturge, and Jamie Taylor. 2008. Freebase: a collab-
oratively created graph database for structuring hu-
man knowledge. In Proceedings of the 2008 ACM
SIGMOD international conference on Management
of data, pages 1247–1250. AcM.

Nathanael Chambers and Dan Jurafsky. 2009. Un-
supervised learning of narrative schemas and their
In Proceedings of the Joint Confer-
participants.
ence of the 47th Annual Meeting of the ACL and the
4th International Joint Conference on Natural Lan-
guage Processing of the AFNLP: Volume 2-Volume
2, pages 602–610. Association for Computational
Linguistics.

Cuong Xuan Chu, Niket Tandon, and Gerhard Weikum.
2017. Distilling task knowledge from how-to com-
munities. In Proceedings of the 26th International
Conference on World Wide Web, pages 805–814. In-
ternational World Wide Web Conferences Steering
Committee.

Yu-An Chung and James Glass. 2018. Speech2vec:
A sequence-to-sequence framework for learning
arXiv preprint
word embeddings from speech.
arXiv:1803.08976.

Jeffrey Pennington, Richard Socher, and Christopher
Manning. 2014. GloVe: Global vectors for word
representation. In Proceedings of the Conference on
Empirical Methods in Natural Language Processing
(EMNLP), pages 1532–1543.

Karl Pichotta and Raymond J Mooney. 2016a. Learn-
ing statistical scripts with lstm recurrent neural net-
In Thirtieth AAAI Conference on Artiﬁcial
works.
Intelligence.

Karl Pichotta and Raymond J Mooney. 2016b. Using
sentence-level lstm language models for script infer-
ence. arXiv preprint arXiv:1604.02993.

Alec Radford, Karthik Narasimhan, Tim Salimans, and
Improving language under-

Ilya Sutskever. 2018.
standing by generative pre-training.

Bryan Williams, Henry Lieberman, and Patrick H Win-
ston. 2017. Understanding stories with large-scale
common sense. In COMMONSENSE.

Semih Yagcioglu, Aykut Erdem, Erkut Erdem, and Na-
zli Ikizler-Cinbis. 2018. Recipeqa: A challenge
dataset for multimodal comprehension of cooking
recipes. arXiv preprint arXiv:1809.00812.

Jacob Devlin, Ming-Wei Chang, Kenton Lee, and
Kristina Toutanova. 2018. Bert: Pre-training of deep
bidirectional transformers for language understand-
ing. arXiv preprint arXiv:1810.04805.

Steven Diamond and Stephen Boyd. 2016. Cvxpy:
A python-embedded modeling language for convex
optimization. The Journal of Machine Learning Re-
search, 17(1):2909–2913.

Palash Goyal and Emilio Ferrara. 2018. Graph embed-
ding techniques, applications, and performance: A
survey. Knowledge-Based Systems, 151:78–94.

Diederik P Kingma and Jimmy Ba. 2014. Adam: A
method for stochastic optimization. arXiv preprint
arXiv:1412.6980.

Hema Koppula and Ashutosh Saxena. 2013. Learning
spatio-temporal structure from rgb-d videos for hu-
man activity detection and anticipation. In Interna-
tional conference on machine learning, pages 792–
800.

Hugo Liu and Push Singh. 2004. Conceptneta practi-
cal commonsense reasoning tool-kit. BT technology
journal, 22(4):211–226.

Laurens van der Maaten and Geoffrey Hinton. 2008.
Journal of machine

Visualizing data using t-sne.
learning research, 9(Nov):2579–2605.

Cynthia Matuszek, Evan Herbst, Luke Zettlemoyer,
and Dieter Fox. 2013. Learning to parse natural lan-
guage commands to a robot control system. In Ex-
perimental Robotics, pages 403–415. Springer.

Drew McDermott, Malik Ghallab, Adele Howe, Craig
Knoblock, Ashwin Ram, Manuela Veloso, Daniel
Weld, and David Wilkins. 1998. Pddl-the planning
domain deﬁnition language.

Tomas Mikolov, Ilya Sutskever, Kai Chen, Greg S Cor-
rado, and Jeff Dean. 2013. Distributed representa-
tions of words and phrases and their compositional-
ity. In Advances in Neural Information Processing
Systems (NIPS), pages 3111–3119.

Ashutosh Modi and Ivan Titov. 2014.

Inducing neu-
ral models of script knowledge. In Proceedings of
the Eighteenth Conference on Computational Natu-
ral Language Learning, pages 49–57.

Hogun Park and Hamid Reza Motahari Nezhad. 2018.
Learning procedures from text: Codifying how-to
procedures in deep neural networks. In Companion
of the The Web Conference 2018 on The Web Con-
ference 2018, pages 351–358. International World
Wide Web Conferences Steering Committee.

Adam Paszke, Sam Gross, Soumith Chintala, Gre-
gory Chanan, Edward Yang, Zachary DeVito, Zem-
ing Lin, Alban Desmaison, Luca Antiga, and Adam
Lerer. 2017. Automatic differentiation in pytorch.

