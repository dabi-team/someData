8
1
0
2

n
a
J

5
2

]
h
p
-
t
n
a
u
q
[

4
v
2
4
5
2
0
.
9
0
6
1
:
v
i
X
r
a

Quantum-Assisted Learning of Hardware-Embedded Probabilistic Graphical Models

Marcello Benedetti,1, 2, 3 John Realpe-G´omez,1, 4, 5 Rupak Biswas,1, 6 and Alejandro Perdomo-Ortiz1, 2, 3, 7, ∗
1Quantum Artiﬁcial Intelligence Laboratory, NASA Ames Research Center, Moﬀett Field, California 94035, USA
2Department of Computer Science, University College London, WC1E 6BT London, United Kingdom
3Cambridge Quantum Computing Limited, CB2 1UB Cambridge, United Kingdom
4SGT Inc., Greenbelt, Maryland 20770, USA
5Instituto de Matem´aticas Aplicadas, Universidad de Cartagena, Bol´ıvar 130001, Colombia
6Exploration Technology Directorate, NASA Ames Research Center, Moﬀett Field, California 94035, USA
7USRA Research Institute for Advanced Computer Science, Mountain View, California 94043, USA

Mainstream machine-learning techniques such as deep learning and probabilistic programming
rely heavily on sampling from generally intractable probability distributions. There is increasing
interest in the potential advantages of using quantum computing technologies as sampling engines to
speed up these tasks or to make them more eﬀective. However, some pressing challenges in state-of-
the-art quantum annealers have to be overcome before we can assess their actual performance. The
sparse connectivity, resulting from the local interaction between quantum bits in physical hardware
implementations, is considered the most severe limitation to the quality of constructing powerful
generative unsupervised machine-learning models. Here we use embedding techniques to add re-
dundancy to data sets, allowing us to increase the modeling capacity of quantum annealers. We
illustrate our ﬁndings by training hardware-embedded graphical models on a binarized data set of
handwritten digits and two synthetic data sets in experiments with up to 940 quantum bits. Our
model can be trained in quantum hardware without full knowledge of the eﬀective parameters speci-
fying the corresponding quantum Gibbs-like distribution; therefore, this approach avoids the need to
infer the eﬀective temperature at each iteration, speeding up learning; it also mitigates the eﬀect of
noise in the control parameters, making it robust to deviations from the reference Gibbs distribution.
Our approach demonstrates the feasibility of using quantum annealers for implementing generative
models, and it provides a suitable framework for benchmarking these quantum technologies on
machine-learning-related tasks.

I.

INTRODUCTION

Sampling from high-dimensional probability distribu-
tions is at the core of a wide spectrum of machine-
learning techniques with important applications across
science, engineering, and society; deep learning [1] and
probabilistic programming [2] are some notable exam-
ples. While much of the record-breaking performance
of machine-learning algorithms regularly reported in the
literature pertains to task-speciﬁc supervised learning al-
gorithms [1, 3], the development of the more humanlike
unsupervised learning algorithms has been lagging be-
hind. An approach to unsupervised learning is to model
the joint probability distribution of all the variables of in-
terest. This is known as the generative approach because
it allows us to generate synthetic data by sampling from
the joint distribution. Generative models ﬁnd application
in anomaly detection, reinforcement learning, handling of
missing values, and visual arts, to name a few [4]. Even
in some supervised contexts, it may be useful to treat
the targets as standard input and attempt to model the
joint distribution [5]. Generative models rely on a sam-
pling engine that is used for both inference and learn-
ing. Because of the intractability of traditional sampling
techniques like the Markov chain Monte Carlo (MCMC)
method, ﬁnding good generative models is among the

∗ Correspondance: alejandro.perdomoortiz@nasa.gov

hardest problems in machine learning [1, 3, 6–8].

Recently, there has been increasing interest in the
potential that quantum computing technologies have
for speeding up machine learning [9–38] or implement-
ing more eﬀective models [39]. This goes beyond the
original focus of the quantum annealing computational
paradigm [40–42], which was to solve discrete opti-
mization problems [43–51]. Empirical results suggest
that, under certain conditions, quantum annealing hard-
ware samples from a Gibbs or a Boltzmann distribu-
tion [21, 25, 52–54].
In principle, the user can adjust
the control parameters so that the device implements
the desired distribution. Figure 1 shows an example
of how, ideally, one could use a quantum annealer for
the unsupervised task of learning handwritten digits. In
practice, however, there exist device-dependent limita-
tions that complicate this process. The most pressing
ones are as follows [10, 11, 21, 52, 55]: (i) The eﬀec-
tive temperature is parameter dependent and unknown,
(ii) The interaction graph is sparse, (iii) the parameters
are noisy, and (iv) the dynamic range of the parame-
ters is ﬁnite. Suitable strategies to tackle all of these
issues need to be developed before we can assess whether
or not quantum annealers can indeed sample more eﬃ-
ciently than traditional techniques on conventional com-
puters, or whether they can implement more eﬀective
models. A relatively simple technique for the estimation
of parameter-dependent eﬀective temperature was devel-
oped in Ref. [21] and shown to perform well for training
restricted Boltzmann machines. More recently, general-

 
 
 
 
 
 
2

Sherrington-Kirkpatrick model [60–62], we show that our
model’s generative performance improves with training
and converges to the ideal value. These results provide
strong evidence that quantum annealers can indeed be
eﬀectively used as samplers, and that their domain of
application extends well beyond what was originally in-
tended.

We emphasize that the objective of this work is not
to address the question of quantum speedup in sampling
applications but rather to provide the ﬁrst clear experi-
mental evidence that quantum annealers can be trained
robustly and used in generative models for unsupervised
machine-learning tasks. We use available techniques to
transform the data set of interest into another data set
with higher and redundant resolution, which is subse-
quently used to train models natively embedded in quan-
tum hardware. We then use a gray-box model approach,
which does not require us to estimate the eﬀective tem-
perature, nor the eﬀective transverse ﬁeld; this approach
has the potential to correct for errors due to nonequi-
librium deviations [53], noise in the programmable pa-
rameters [63], and sampling biases in available state-of-
the-art devices [64]. Hence, while the derivation of our
quantum-assisted algorithm relies on the assumption that
the quantum annealer is sampling from a Gibbs distri-
bution, we do not expect that this assumption must be
strictly valid for our algorithm to work well. Because we
are optimizing a hard-to-evaluate convex function, the
generative performance depends mostly on the quality
and eﬃciency of the sampling required to estimate such
function, an ideal situation for the purpose of benchmark-
ing. Recently, our model and training methodology have
been used to make progress in benchmarking quantum
annealers for sampling [65], in contrast with the broadly
explored topic of benchmarking combinatorial optimiza-
tion.

The outline of this article is as follows. In Sec. II, we
describe how graphical models with eﬀectively arbitrary
pairwise connectivity can be embedded and realized in
quantum hardware. Here, we emphasize the parameter-
setting problem, which is essential for any implementa-
tion in hardware. In Sec. III, we derive an algorithm that
tackles the parameter-setting problem while learning the
model from data. In Sec. IV, we discuss the implementa-
tion details. In Sec. V, we describe the experiments per-
formed on two synthetic data sets and a coarse-grained
binarized version of the OptDigits data set; we show that
the model introduced here, trained by using the D-Wave
2X (DW2X) hosted at NASA Ames Research Center, dis-
plays good generative properties and can reconstruct and
classify data with good accuracy. In Sec. VI, we report
the conclusions of our work, discuss the implementation
of our approach in other hardware architectures such as
the Lechner-Hauke-Zoller (LHZ) scheme [66], and present
potential research directions.

FIG. 1. Quantum-assisted unsupervised learning.
(a) Dur-
ing the training phase, samples generated by the quantum
annealer are compared with samples from the data set of,
say, black-and-white images. The control parameters are then
modiﬁed according to a learning rule (see Sec. III). This pro-
cess is iterated a given number of times, also known as epochs.
(b) After being trained we can use the quantum annealer, for
instance, to reconstruct missing information in a data point,
e.g., unknown values of some pixels (red region). To do this,
we program the quantum annealer with the control parame-
ters learned except for the ﬁelds of those qubits that represent
known pixels. These ﬁelds are instead set to large values hmax,
so the qubits are clamped to the known values of the corre-
sponding pixels. We then generate samples to infer the values
of the unknown pixels.

izations and alternative techniques have been introduced
in Ref. [52].
In the context of machine learning, these
techniques need to estimate temperature at each itera-
tion, implying a computational overhead.

Here, we put forward an approach that completely
sidesteps limitation (i), i.e., the need to estimate temper-
ature at each iteration of the learning process. Further-
more, we propose a graphical model embedded in hard-
ware that eﬀectively implements all pairwise interactions
between logical variables representing the data set and
that learns the parameter setting from data, improving
on limitation (ii) . Since the essential components for
estimating the gradient needed in the learning process
take place on quantum hardware, our approach is more
robust to the noise in the parameters, also improving on
limitation (iii).

Our work here is based on a quantum maximum-
entropy model: a quantum Boltzmann machine with no
hidden variables, whose learning in the classical limit
is also known as the inverse Ising problem [56, 57].
We show that the resulting models embedded in quan-
tum hardware can model well both a coarse-grained bi-
narized version of the optical recognition of handwrit-
ten digits (OptDigits) [58] and the synthetic bars-and-
stripes (BAS) data set [59]. Moreover, using data sets
of conﬁgurations extracted from random instances of the

Vs.SampleLEARNING RULEControl parametersMODEL SAMPLESDATASETSampleQUANTUM ANNEALERLearned control parametersNOTKNOWNRECONSTRUCTEDIMAGECORRUPTEDIMAGEClamp known qubitsJij , hmaxQUANTUM ANNEALERQUANTUM ANNEALERJij , hiJij , hi(a)(b)II. HARDWARE-EMBEDDED MODELS

A. Quantum annealing and quantum models

The dynamics of a quantum annealer are characterized

by the time-dependent Hamiltonian

H(τ ) = −A(τ )

(cid:88)

i∈V

ˆXi − B(τ )HP ,

(1)

where τ = t/ta is the ratio between time t and annealing
time ta, while A(τ ) and B(τ ) are monotonic functions
satisfying A(0) (cid:29) B(0) ≈ 0 and B(1) (cid:29) A(1) ≈ 0. The
ﬁrst term in Eq. (1) above corresponds to the transverse
ﬁeld in the x direction, characterized by the Pauli oper-
ators ˆXi for each qubit i. The second term in Eq. (1)
corresponds to the problem-encoding Hamiltonian

HP = −

(cid:88)

Jij ˆZi ˆZj −

(i,j)∈E

hi ˆZi,

(cid:88)

i∈V

(2)

where ˆZi refers to the ith qubit in the z direction, which
is deﬁned on an interaction graph G = (V, E). Here, V
and E refer to the corresponding set of vertices and edges,
respectively.

As discussed in Ref. [53], the dynamics of a quantum
annealer are expected to remain close to equilibrium un-
til they slow down and start deviating away from equi-
If the time between such
librium to ﬁnally freeze out.
dynamical slow-down and freeze-out is small enough, the
ﬁnal state of the quantum annealer is expected to be close
to the quantum Gibbs distribution

ρ =

e−βQAH(τ ∗)
Z

,

(3)

corresponding to the Hamiltonian in Eq. (1) at a given
point τ = τ ∗, called freeze-out time. Here, βQA is
the physical temperature of the quantum annealer, and
Z is the normalization constant. The density ma-
trix in Eq. (3) is fully speciﬁed by the eﬀective pa-
rameters Wij = β Jij, bi = β hi, and c = β Γ, where
β = βQAB(τ ∗) is the eﬀective inverse temperature [21,
53] and Γ = A(τ ∗)/B(τ ∗) is the eﬀective transverse ﬁeld.
If A(τ ∗) (cid:28) B(τ ∗), the ﬁnal state of the quantum an-
nealer is close to a classical Boltzmann distribution over
a vector of binary variables z ∈ {−1, +1}N ,

P (z) =

e−βE(z)
Z

,

where

E(z) = −

(cid:88)

(i,j)∈E

Jijzizj −

(cid:88)

i∈V

hizi

(4)

(5)

is the energy function given by the eigenvalues of HP [see
Eq. (2)].

The case where A(τ ∗) cannot be neglected is less ex-
plored in the literature and allows the implementation

3

of quantum Boltzmann machines [25]. All conditions de-
scribed above, as well as the freeze-out time, depend on
the speciﬁc instance of control parameters Jij and hi that
are programmed. As shown in Sec. III, our algorithm can
also train hardware-embedded models despite these un-
known dependencies. The potential to train quantum
models [25, 26, 65] opens new exciting opportunities for
quantum annealing. These eﬀorts resonate with foun-
dational research interested in quantifying or identifying
the particular computational resources that could be as-
sociated with quantum models [39, 67].

B. Enhancing modeling capacity

In this section, we deﬁne the general setting to train
a hardware-embedded probabilistic graphical model ca-
pable of representing graphs with arbitrary connectiv-
ity. Although we implement the general case of all-to-all
connectivity as the most complex topology with pairwise
interactions, working with models with simpler topolo-
gies can be easily represented with less numbers of qubits
within this hardware-embedded setting.

In combinatorial optimization, one seeks a conﬁgura-
tion of binary variables z associated with the lowest en-
ergy in Eq. (5). The typical strategy to embed dense
graphs in quantum hardware is to represent logical binary
variables by subgraphs of the interaction graph of phys-
ical qubits. The value of all control parameters should
be ﬁne-tuned such that the ground state of the original
problem is preserved and therefore still favored in the
physical implementation of the quantum annealing algo-
rithm; this is known as the parameter-setting problem
(see Sec. II C-C and Refs. [49, 68, 69]).

In machine learning, the scenario is diﬀerent. When
learning a model such as the one in Eq. (3) or Eq. (4),
one seeks the conﬁguration of control parameters Jij and
hi that maximizes a suitable function of the data set. No-
tice that in combinatorial optimization problems, it is de-
sirable to have the optimal conﬁguration or ground state
with probability close to one. In machine learning, how-
ever, all conﬁgurations are signiﬁcant, as are their corre-
sponding probabilities. By mapping the original problem
to quantum hardware as routinely done in combinatorial
optimization applications, we may end up implementing
a distribution that diﬀers from the intended one.

An additional complication is that ﬁnding optimal pa-
rameters for a physical device is hampered by lack of
precision, by noise, and by having to infer an instance-
dependent eﬀective temperature at each step of the learn-
ing. To avoid computing such an eﬀective temperature
at each learning iteration and to mitigate the eﬀects of
persistent biases [63], lack of precision, and noise in the
control parameters, we take a gray-box model approach.
In other words, although we assume that samples gener-
ated by the quantum annealer are distributed according
to Eq. (3), we do not need complete knowledge of the
actual parameters being implemented. This leads to the

condition that the ﬁrst- and second-order moments of
the model and data distributions should be equal for the
parameters to be optimal. The resulting model is never-
theless tied to the speciﬁc machine being used.

Using a generic logical graph as scaﬀolding, we asso-
ciate each of its logical variables with a subgraph of the
hardware interaction graph. This can be done by us-
ing existing minor embedding techniques; however, the
parameter-setting problem remains. As an example,
Figs. 2(a) and 2(b) show a simple graph that cannot be
directly implemented in DW2X hardware and a possible
minor embedding, respectively. The additional couplings
inside a subgraph are part of the hardware-embedded
graphical model and have to be learned along with the
model parameters that couple diﬀerent subgraphs.
In
other words, the ﬁne-tuning of all the couplings is done
by the learning algorithm, which has the potential to
learn corrections to the noise aﬀecting the physical com-
ponents, under the assumption that these defects still
respect the direction of the gradient driving the learn-
ing algorithm. The embedding also allows us to map the
data set into an extended data set with higher resolution,
where some of the original variables are represented re-
dundantly [see Figs. 2(c) and 2(d)]. Then, the learning
algorithm runs entirely on such extended space by train-
ing from scratch the whole hardware-embedded model on
the extended data set. We now discuss, in more detail,
the parameter-setting problem and how it is tackled in
the type of machine-learning applications studied here.

C. Parameter-setting problem

Let us deﬁne the parameter-setting problem as follows:
Find values of control parameters to embed problems in
hardware such that the performance of the device is “op-
timal”. The meaning of optimal depends on the task of
interest. In optimization problems, parameters are op-
timal if they provide the largest probability of ﬁnding a
ground state [69]. In the type of machine-learning appli-
cations considered here, parameters are optimal if sam-
ples generated by the device capture, as much as possible,
the statistics of the data set. In a sense, machine learning
is parameter setting. We discuss how this is quantiﬁed
in Sec. III.

Previous research [69] suggests a possible mechanism
underlying the parameter-setting problem. The au-
thors investigated the Sherrington-Kirkpatrick model
and found that the optimal choice of the additional pa-
rameters could be obtained by forcing both the spin glass
and the ferromagnetic structures to cross the quantum
critical point together during the annealing. Roughly
speaking, the quantum phase transition happens when
the energies associated with the problem-encoding sys-
tem and the transverse ﬁeld Γ are of the same order of
magnitude. This implies that the optimal embedding pa-
rameters are O(JSG
N ), where N is the number of spins
and JSG is the typical value of the couplings, that is, the

√

4

FIG. 2. Hardware-embedded models.
(a) We ﬁrst deﬁne a
graph with arbitrary connectivity between the logical vari-
ables that directly encode the data set to be modeled; here,
we show a fully connected graph on four variables as an exam-
ple. Such a graph serves as a scaﬀolding to build hardware-
embedded models with enhanced modeling capacity. (b) We
then embed the scaﬀolding graph in quantum hardware by
using minor embedding techniques; this requires the intro-
duction of auxiliary qubits, couplings, and ﬁelds. In the ex-
ample shown here, the logical variable 1 (red) is encoded using
two qubits, 1A and 1B, which are connected by an auxiliary
coupler J AB
11 ; the same is true for variable 2 (blue). The
black links correspond to couplings between qubits represent-
ing diﬀerent logical variables. In optimization problems, we
are given values for the couplings and ﬁelds on the graph of
logical variables, as in diagram (a). To solve such optimiza-
tion problems on a quantum annealer, we ﬁrst have to pick
values for all control parameters such that the ground state
of the physical system coincides with the optimal solution of
the problem being solved. The selection of control parame-
ters can be done via handcrafted rules when information is
available about the model [69] or via heuristic approaches in
the more general scenario [49]. The optimal choice of control
parameters, i.e., the one that maximizes the probability of
ﬁnding the ground state, is known as the parameter-setting
problem, and it is an open research question.
In machine-
learning applications, instead, the control parameters are not
given but have to be found; they are the variables of the
problem. In this case, embedding techniques are used both
to transform the original data set [as shown in diagram (c)]
into a data set with higher resolution due to redundant vari-
ables [as shown in diagram (d)] and to ﬁnd a representation
of such an extended dataset in hardware. This allows us to
deﬁne encoding and decoding maps f and g, respectively, to
transform between the two data representations. Then, we
forget about the scaﬀolding graph and train the hardware-
embedded model on the extended data set. Thus, although
the ﬁnal hardware-embedded model might be interpreted as
an embedding of a logical model, this is certainly not the case
during learning, which automatically tackles the parameter-
setting problem; in a sense, machine learning is parameter
setting. While here we use standard embedding techniques to
deﬁne the maps f and g, such functions could, in principle,
be learned from data, eﬀectively automating the embedding
problem, too.

standard deviation (see, e.g., Fig. 2 in Ref. [69]). The
intuition provided by this study does not necessarily ap-
ply to more realistic problems. In machine learning, even
when starting from a fully connected model, the learning
could still lead to a sparse ﬁnal model.

As we discuss in Sec. III, our approach lets the data
guide the process by treating the whole quantum an-
nealer as a neural network. In this case, both the inter-
and intra-subgraph parameters are modiﬁed according to
the statistical errors made by the quantum annealer in
producing samples that resemble the data. This process
implicitly corrects for noise and defects on the parame-
ters, problems that are expected to aﬀect any near-term
quantum technology. The price to pay is a relatively
small overhead as discussed in Sec. III.

In the following, we focus on hardware-embedded
graphical models with eﬀective all-to-all connectivity, as
that is the most general case. Therefore, our derivations
and the model proposed here include any topology with
pairwise connectivity.

D. Fully connected inspired models

More

The sparse interaction topology of state-of-the-art
quantum annealers strongly limits their capacity to
model complex data. For this reason, we use embedding
strategies based on utilizing several qubits to represent
a given variable in the data set. This amounts to trans-
forming the data set of interest into a higher-resolution
data set, with redundant variables, and modeling it with
a hardware-embedded model.
speciﬁcally,

set
D = {s1, . . . , sD}, where
can be
i.e.,
represented as an array of
Ising variables,
sd = (sd
i ∈ {−1, +1}, for i = 1, . . . , N .
We refer to the s variables as logical variables. We
need to deﬁne a map f from the data space to the
qubit space that produces an extended binary data set
(cid:101)D = {z1, . . . , zD}, where z = f (s).
In this work, we
choose the map f to replicate the state of each logical
variable si inside the corresponding subgraph i, i.e.,

each data point

a binary data

N ), with sd

1, . . . , sd

consider

5

ij

h(k)
is the local ﬁeld for qubit k of subgraph i; and J (kl)
i
is the coupling between qubit k of subgraph i and qubit
l of subgraph j. When i = j, it speciﬁes the interactions
within the subgraph, while when i (cid:54)= j, it speciﬁes the
interactions among subgraphs; J (kl)
ij = 0 if there is no
available interaction between the corresponding qubits
in the quantum hardware. The binary variables z(k)
en-
coding the extended data set can be interpreted as the
eigenvalues of the Pauli matrix ˆZ (k)

.

i

i

After learning the parameters of (cid:101)HP in Eq. (7), we need
a map g from qubit space to data space that transforms
samples generated by the quantum annealer into samples
that resemble the original data set. Here, we choose g to
assign the state of the majority of physical variables in
subgraph i to the corresponding logical variable si, i.e.,

si = sign

(cid:32) Qi
(cid:88)

(cid:33)

z(k)
i

.

k=1

(8)

i

i

The rationale behind this choice is that, ideally, samples
from the trained model are expected to have all qubits
z(k)
in a subgraph i having exactly the same state, i.e.,
i
i = z(l)
z(k)
for k, l = 1, . . . , Qi. In this case, we could pick
whichever qubit z(k)
as representative of the logical vari-
able si, and this choice would be equivalent to the choice
in Eq. (8). However, we expect the choice in Eq. (8) to be
more robust to the diﬀerent sources of noise in quantum
annealers by exploiting such a redundancy in the spirit
of error-correction codes [61, 62]. While we have a pri-
ori ﬁxed mappings f and g using embedding techniques,
such functions could also be learned from data, as we will
discuss elsewhere.

III. LEARNING ALGORITHM

Let ρD be the diagonal density matrix whose diago-
nal elements encode the empiric data distribution. A
quantum Boltzmann machine [25], characterized by the
density matrix ρ deﬁned in Eq. (3), can be trained by
minimizing the quantum relative entropy [26],

z(k)
i = si,

for k = 1, . . . , Qi,

(6)

S (ρD(cid:107)ρ) = TrρD ln ρD − TrρD ln ρ.

(9)

where Qi is the number of qubits in subgraph i.

The task then turns into learning the parameters of a
model on the extended data set (cid:101)D. To do this, we deﬁne
a problem Hamiltonian over M = (cid:80)N

i=1 Qi qubits,

(cid:101)HP = −

1
2

N
(cid:88)

Qi,Qj
(cid:88)

i,j=1

k,l=1

J (kl)
ij

ˆZ (k)
i

ˆZ (l)

j −

N
(cid:88)

Qi
(cid:88)

i=1

k=1

h(k)
i

ˆZ (k)
i

.

(7)
Here, N is the number of logical variables, which equals
the number of subgraphs realized in hardware; ˆZ (k)
is the
Pauli matrix in the z direction for qubit k of subgraph i;

i

The learning rule is given by the equations

J (kl)
ij

(t + 1) = J (kl)

ij

(t) + η

h(k)
i

(t + 1) = h(k)

i

(t) + η

∂S
∂J (kl)
ij
∂S
∂h(k)
i

,

,

(10)

(11)

where t indicates the iteration and η > 0 is the learning
rate. Assuming we can neglect the dependence of the
time lapsed between the dynamical slow-down and freeze-
and h(k)
out in the instance of control parameters J (kl)

ij

i

programmed, we obtain

1
β

∂S
∂J (kl)
ij
∂S
1
∂h(k)
β
i

= (cid:104) ˆZ (k)
i

j (cid:105)ρD − (cid:104) ˆZ (k)
ˆZ (l)

i

ˆZ (l)

j (cid:105)ρ,

= (cid:104) ˆZ (k)
i

(cid:105)ρD − (cid:104) ˆZ (k)

i

(cid:105)ρ,

(12)

(13)

Here, (cid:104)·(cid:105)ρD denotes the ensemble average with respect to
the density matrix ρD that involves only the data and is
commonly referred to as the positive phase. Similarly,
(cid:104)·(cid:105)ρ denotes the ensemble average with respect to the
density matrix ρ that exclusively involves the model and
is called the negative phase.

If A(τ ∗) (cid:28) B(τ ∗) during our experiments, we are in-
deed dealing with classical models. Then, the learning
rule above coincides with that for maximizing the aver-
age log-likelihood of the data [70].

However, the more general quantum case we just de-
scribed provides a more accurate representation of the
experiments we have performed, which are described be-
low. To provide a strong argument as to which is the
case, though, we need to carry out numerical simulations
of the open quantum systems dynamics undergone by
quantum annealers. We leave this for future work. How-
ever, our approach would also be valid for quantum an-
nealers capable of sampling from any desired ﬁxed value
of the transverse ﬁeld, a capability that may be available
in the near future.

i

ij

The Hamiltonian in Eq. (7) is designed to overcome
connectivity limitations of hardware-embedded graphical
models. In what follows, we show that the adaptation of
standard learning procedures to the quantum maximum-
entropy model proposed here works very well even in the
presence of unknown hardware noise on couplings J (kl)
and local ﬁelds h(k)
. Moreover, we can learn suitable
intra-subgraph couplings at a rate dictated by the con-
trast of the strength of pairwise correlations in the model
and in the data, without the need for hard-coded values.
Classically, the exact computation of the model’s
statistics is a computational bottleneck due to the in-
tractability of computing the partition function and the
exponential number of terms in the conﬁguration space.
An eﬃcient approximation of the statistics is therefore re-
quired, and it is usually carried out by standard sampling
techniques such as MCMC [70, 71]. In this work, we in-
stead implement an algorithm that relies on the working
assumption that quantum annealers can generate sam-
ples from a Gibbs-like distribution. However, even if this
assumption is not strictly valid, our approach can still
work as long as the estimated gradients have a positive
projection in the direction of the true gradient. Quantum
annealers have the potential to improve machine-learning
algorithms in two ways: (i) by enabling the exploration
of a wider class of models, i.e., quantum models, which
some theoretical results [39] suggest may be able to cap-
ture higher complexity, and (ii) by speeding up the gen-
eration of samples. If the transverse ﬁeld at the freezing
point is negligible, the samples generated by the quantum

6

annealer are expected to approximately follow a classical
Boltzmann distribution.

The learning procedure implemented by Eqs. (12) and
(13) can be interpreted as quantum entropy maximiza-
tion under constraints on the ﬁrst- and second-order mo-
ments [72–74]. In Ref. [24], a maximum entropy approach
was implemented on a D-Wave device in the context of
information decoding, which is a hard optimization prob-
lem. Instead, we use quantum maximum-entropy infer-
ence for a hard machine-learning task, i.e., in unsuper-
vised learning of generative models.

i

Equation. (10) implies that the intra-subgraph cou-
plings J (kl)
increase at a varying rate proportional to
ii
1 − (cid:104) ˆZ (k)
ˆZ (l)
i (cid:105), which, in principle, leads to inﬁnite val-
ues in the long term.
In practice, the rate of growth
decreases as the learning progresses since the statistics of
the samples generated by the quantum annealer resemble
the data more and more. In general, the gradient-descent
learning rule tends to produce too-large values for all the
parameters because it pushes the model as much as possi-
ble towards a distribution with all the mass concentrated
on the data. This problem in known as overﬁtting, and it
is usually approached by regularization techniques. One
regularization method may consist in penalizing large pa-
rameters by adding a term to Eq. (9) accordingly. An-
other approach may be to employ a stopping criterion
based on some measure of generalization or predictive
capabilities of the model evaluated at each iteration on
data not used during training. Under a proper choice
of regularization, the intra-subgraph couplings utilized
in our approach should not grow indeﬁnitely anymore.
However, regularization in the general setting of quan-
tum machine learning is still an open research question.
Regarding the complexity of the algorithm, a fully con-
nected model with N logical variables has O(N 2) param-
eters. When embedding such a fully connected model
into a sparse graph like the Chimera graph of the DW2X,
we end up with O(N 2) qubits, but the number of pa-
rameters is still O(N 2). This result occurs because we
go from a dense graph of N variables to a sparse graph
of O(N 2) variables. Each qubit in the DW2X interacts
with, at most, six neighbors, so the number of additional
parameters is a small constant factor.
In our experi-
ments, this factor is about 3 (see Table I). Because of
this factor, there is a small computational overhead for
learning those intra-subgraph parameters. This overhead
could be neglected because the main bottleneck is still
in the generation of samples which is at least as hard
as any non-deterministic polynomial time problem (NP-
hard) An exact analog occurs in combinatorial optimiza-
tion where a quadratic overhead is expected for embed-
ding fully connected problems in hardware. In combina-
torial optimization, such overheads are usually neglected
because the main bottleneck is the NP-hard problem of
reaching low-energy conﬁgurations.

A few additional remarks are in order: (i) The as-
sumption that the model is based on a Gibbs distribu-
tion is reﬂected in that the second moment between two

variables inﬂuences only the update of the corresponding
coupling between them.
If such a second moment in-
creases (decreases), so does the corresponding coupling.
This leaves open the possibility for the model to ef-
fectively self-correct for relatively small deviations from
equilibrium, persistent biases, noise, and lack of preci-
sion, as long as the estimated gradient has a positive
projection in the right direction, in the spirit of simul-
taneous perturbation stochastic approximation [11, 75].
(ii) The actual shape of a Gibbs distribution is instead
characterized by the variables βJ (kl)
. Writing
Eqs. (10) and (11) in terms of these new variables, we ob-
serve that the actual learning takes place at an eﬀective
learning rate that can vary since the eﬀective tempera-
ture is instance dependent [21]. (iii) The positive phases
in Eqs. (12) and (13) are constants to be estimated ex-
clusively from the data points, as there are no hidden
units in our approach. In the case of generic models with
hidden variables, this term becomes diﬃcult to compute,
in general, and we have to rely on approximations, e.g.,
via sampling or mean-ﬁeld techniques. (iv) The related
problem of estimating the parameters of a classical Ising
model is called the inverse Ising problem [56, 57, 76], and
some of the main alternative techniques are mean-ﬁeld
and pseudo-likelihood methods.

and βh(k)

ij

i

IV.

IMPLEMENTATION DETAILS

A. Device and embeddings

We run experiments on the DW2X quantum annealer
located at NASA Ames Research Center. The device
is equipped with 1152 qubits interacting according to a
graph known as Chimera connectivity. For the DW2X
device hosted at NASA Ames, only 1097 qubits are func-
tional and available to be used. Assuming all 1152 qubits
were available, an eﬃcient embedding schema [77] would
allow us to implement a fully connected graph with up
to 48 logical variables. Since only 1097 qubits are avail-
able, such a schema cannot be used, and the size of the
largest fully connected model that can be implemented
is reduced. For the embeddings of the instances stud-
ied here, we run the find embedding heuristic [78] of-
fered by D-Wave’s programming interface and use the
best embedding found within the 500 requested trials.
We judge the quality of an embedding not only by the
total number of physical qubits needed to represent the
logical graph, but also by considering and preferring a
smaller maximum subgraph size for the logical units. For
example, in the case of the 46-variable fully connected
graph, we found an embedding with 917 qubits and a
maximum subgraph size of 34. We selected,
instead,
an embedding with a larger number of qubits, 940, but
with a considerably smaller maximum subgraph size of
28. (Figure 8 in the Appendix shows the selected em-
bedding, where each subgraph is represented by a num-
ber and a color.) Table I shows details for each of the

7

embeddings used in our experiments. Finally, the pa-
rameter range allowed by DW2X is J (kl)
ij ∈ [−1, +1] and
h(k)
∈ [−2, +2]. We initialized all the parameters to
i
small values in [−10−6, +10−6] in order to break the sym-
metry.

Logical
variables

Physical
variables

Min Max

Chip
usage

Logical
parameters

Physical
parameters

15
42
46

76
739
940

5
11
12

6
25
28

7%
67%
86%

120
903
1081

252
2644
3389

TABLE I. Main characteristics of the diﬀerent embeddings
used here, for each of the fully connected graphs. All embed-
dings were generated by the find embedding [78] heuristic
provided by D-Wave’s programming interface. The table in-
cludes information about the minimum (Min) and maximum
(Max) subgraph size, the percentage of used qubits relative
to those available (Chip usage), and the total number of pa-
rameters for the logical and physical graphs.

B. Data sets and preprocessing

We tested our ideas on the real OptDigits data set [58],
the synthetic BAS data set [59], and a collection of syn-
thetic data sets generated from random Ising instances.
The OptDigits data set requireds the preprocessing
steps shown in Fig. 3. First, each picture is 8 × 8 and
has a categorical variable indicating the class it belongs
to. Using standard one-hot encoding for the class (i.e.,
cd
i = −1 for i (cid:54)= j, cd
j = +1, where j indexes the class
for picture d), we would need to embed a fully connected
graph of 74 variables, 64 for the pixels and 10 for the
class, exceeding what we can embed in the DW2X. We
removed the leftmost and rightmost columns as well as
the bottom row from each picture, reducing the size to
7 × 6 and retaining the readability. Second, we selected
only four classes of pictures, those corresponding to digits
“one” to “four”, reducing the one-hot encoding to four
variables. The four classes account for 1545 pictures in
the training set and 723 pictures in the test set, and they
are in almost equal proportion in both. Finally, the orig-
inal four-bit gray scale of each pixel is thresholded at the
midpoint and binarized to {−1, +1} in order for the data
to be represented by qubits in the DW2X. Figure 4 (a)
shows some pictures from the test set.

The BAS data set consists of N × M pictures gen-
erated by setting the pixels of each row (or column) to
either black (−1) or white (+1), at random. A reason to
use this synthetic data set is that it can be adapted to
the number of available variables in the DW2X. Having
found an embedding for the 42-variable fully connected
graph, we generated a 7 × 6 BAS data set consisting of
192 pictures of 42 binary variables each. Then, we ran-
domly shuﬄed the pictures and split the data set into
training and test sets of size 96 each. Figure 5(a) shows
some pictures from the test set.

Finally, for the collection of synthetic data sets, we

8

as possible. Gradient hyperparameters come from ad-
vanced techniques known to improve generalization and
speed up learning. We adopt standard L2 regulariza-
tion for the pairwise interactions and momentum for all
the parameters, hence introducing two hyperparameters
in Eqs. (10) and (11) (see Ref. [71] for discussion about
implementation details and best practices). For these hy-
perparameters, we tried a small grid of values and chose
the value that would allow the quantum-assisted algo-
rithm to produce visually appealing samples. All the
experiments were performed using the hyperparameters
shown in Table III.

Domain

device

gradient

Hyperparameter
annealing time

Value
5µs
programming thermalization 1µs
1µs
False
0.0025
10−5
0.5

readout thermalization
auto scale
learning rate
L2 regularization
momentum

TABLE III. Settings used in all the experiments except those
in Section V C, where gradient hyperparameters were tuned.

V. RESULTS

A. Reconstruction of pictures

The ﬁrst task we address is verifying that the model is
indeed able to learn the joint probability distribution of
variables given a data set. One way to do this is to check
whether the learned model can reconstruct corrupted pic-
tures. To generate a reconstruction, we ﬁrst need to en-
force the value of each correct pixel to all qubits of the
corresponding subgraphs, as illustrated in Fig. 1(b). The
qubits can be clamped to the desired value by using a
strong local ﬁeld in the corresponding direction. Notice
that clamping variables in quantum annealers is some-
what diﬀerent from its classical counterpart. Applying a
strong local ﬁeld to a qubit can substantially bias it to-
wards a given value, but it still remains a dynamical vari-
able. In classical computation, clamping a variable com-
pletely freezes it. We then generated samples from the
learned model and assigned values to each corrupted pixel
si using the majority-vote map [Eq. (8)] for all qubits in
the corresponding subgraph i. To further mitigate the
noise associated with this, we generated multiple recon-
structions, 100 for each corrupted picture, and took a
second majority vote over them. This approach is very
robust as we did not observe any mismatch between the
desired clamped variables and the corresponding read-
outs. We chose to interrupt the training of the models as
soon as any of the parameters left the dynamic range of
the device. Since the intra-subgraph couplings always in-
crease, we expect these to be the ﬁrst to get out of range,
and we observed this result in the experiments described
below. We use two data sets, OptDigits and BAS.

FIG. 3. OptDigits preprocessing steps. The original 8 × 8
pictures are cropped to 7 × 6 arrays by removing columns
from the left and the right, as well as by deleting a row from
the bottom. Finally, the four-bit gray scale is thresholded at
the midpoint and binarized to {−1, +1}. Figure 4 (a) shows
some pictures from the test set.

√

preferred to work with small-sized Ising instances that
allowed us to carry out exhaustive computations. In par-
ticular, we chose 10 random instances of a Sherrington-
Kirkpatrick model with N = 15 logical variables. Pa-
rameters Jij [cf. Eqs. (4) and (5)] were sampled from
a Gaussian with mean µ = 0 and standard deviation
N , parameters hi were set to 0, and the inverse
σ = ζ/
temperature was set to β = 1. In this setting, a spin-glass
transition is expected when ζc = 1 in the thermodynamic
limit, although ﬁnite-size corrections are expected to be
relevant for this small size. In order to obtain interesting
structures within the probability distributions, we chose
ζ = 2 and veriﬁed that the overlap distribution [60, 61]
of each instance was indeed nontrivial. Moreover, we
checked the performance of the closed-form solutions ob-
tained by mean-ﬁeld techniques in Ref. [57]. The mean-
ﬁeld method failed to produce (real-valued) solutions in
seven out of the ten random instances, while it performed
well in the remaining three instances, adding further evi-
dence that these instances had nontrivial features in their
energy landscape. Finally, we generated a training set of
D = 150 samples for each instance by exact sampling
from its corresponding Boltzmann distribution. Table II
summarizes the characteristics of each dataset used in
our experiments.

Dataset Variables Training points Test points
OptDigits
BAS 7 × 6*
Ising*

723
96
Not applicable

42 + 4
42
15

1545
96
150

TABLE II. Main characteristics of the datasets used here, i.e.
number of variables, number of training points and number
of test points when applicable. The * symbol indicates a
synthetic dataset.

C. Choice of hyperparameters

We distinguish two kinds of hyperparameters: those
associated with the device and those referring to the gra-
dient. Device hyperparameters aﬀect the time needed
to obtain samples. We set them to their correspond-
ing minimum values in order to obtain samples as fast

1. Optical recognition of handwritten digits

els has been correctly modeled, and we can most likely
rule out a simple memorization of the patterns.

9

We trained a model on the real data set OptDigits, a
sample of which is shown in Fig. 4 (a). Since the training
set contains a relatively large number of data points, we
opted for a minibatch learning approach [71], where 200
data points were used at each iteration to compute the
positive phase of the gradient. The negative phase is
computed on 200 samples from DW2X. We trained for
6000 iterations, after which an intra-subgraph coupling
went outside the dynamic range of the device.

To evaluate the model, we added a 50% uniformly dis-
tributed “salt-and-pepper” noise [Fig. 4(b), red pixels]
to each picture of the test set and used the model to
reconstruct it. Notice that, given a corrupted picture,
it is not always possible to obtain perfect reconstruction
as multiple solutions could be correct. Therefore, we do
not compute any error measure, but rather visually in-
spect the reconstructions. Figures 4(c)- 4(f) show some
reconstructions obtained by models learned after 1, 100,
1000, and 6000 iterations, respectively. We can observe
that qualitatively good reconstructions are already avail-
able from early stages of training. However, the large
degree of corruption in the original image gives rise to
things such as thicker reconstructions [Fig. 4(f), third
row, fourth column], thinner reconstructions [Fig. 4(e),
fourth row, second column], change of digit “three” to
“one” [Fig. 4(e), third row, ﬁfth column], among others.

2. Bars and stripes

We performed a similar test on the 7×6 BAS, a sample
of which is shown in Fig. 5 (a). We computed the posi-
tive phase once using all 96 training data points. Then,
we ran the learning procedure, and for each iteration,
we computed the negative phase out of 96 samples ob-
tained from the DW2X. The learning process stopped at
iteration 3850, after which an intra-subgraph coupling
exceeded the maximum value allowed.

To evaluate the model, we blacked-out a 5 × 4 block
[Fig. 5(b), red pixels corresponding to 47.6% of the im-
age] from each of the 96 test pictures and used the model
to reconstruct it. We can observe from Fig. 5(e) that re-
constructed pictures are qualitatively similar to the orig-
inal ones. To have a quantitative estimate of the quality
of the reconstruction, we computed the expected num-
ber of incorrect pixel values (or mistakes) per reconstruc-
tion. After one iteration [Fig. 5(c)], we obtained a rate
of 10.45 mistakes out of 20 corrupted pixels, correspond-
ing to about 50% performance as expected. The number
of mistakes decreased to 3.73 (18.6%) after 100 iterations
[Fig. 5(d)], 0.59 (2.95%) after 1000 [Fig. 5(f)], and ﬁnally
0.13 (0.65%) at the end of training [Fig. 5(e)]. The lat-
ter result corresponds to almost perfect reconstruction.
Notice that, by deﬁnition, pictures from the test set are
never used during training. Hence, these results provide
evidence that the joint probability distribution of the pix-

B. Generation and classiﬁcation of pictures

To investigate the generative and classiﬁcation capa-
bilities of the model, we introduced a one-hot encoding
of the four classes of the OptDigits data set, therefore in-
troducing four additional logical variables, for a total of
46. We trained this larger model on the OptDigits data
set, also including the classes.

We performed a simple classiﬁcation task that does
not require turning the generative model into a discrim-
inative one by additional post-training. We classify each
test picture as c∗ = arg maxc P (c|s), where s is the vec-
tor encoding the pixels and c is the vector encoding the
classes. To approximate the probability, we clamped the
subgraphs, by applying strong local ﬁelds, to the pixel
values corresponding to the picture to be classiﬁed and
sampled the four class variables from DW2X. We gener-
ated 100 samples for each picture and assigned the pic-
ture to the most frequent class. After 6000 learning iter-
ations, this simple procedure led to an accuracy of 90%
on the test pictures. This is a signiﬁcant result, given
that a random guess achieves 25% accuracy. However, it
is to be expected that a ﬁne-tuned discriminative model
can achieve better accuracy.

Finally, Fig. 6 shows samples obtained from the DW2X
by ﬁrst setting the class variables, by applying strong
local ﬁelds, to classes one to four (one class per col-
umn), along with human-generated pictures from the
test set. Rows correspond to either human-generated
pictures from the test set or machine-generated pic-
tures. We defer the details of this visual Turing test
to Ref. [79]. Machine-generated pictures are remarkably
similar, though not identical, to those drawn by humans.
Notice that human-generated digits may be ambiguous
because of a variety of calligraphy styles encoded in low-
resolution pictures. This ambiguity has been captured by
the model, as shown by the machine-generated pictures.

C. Learning of an Ising model

In the previous section, we showed that quantum an-
nealing can be used to successfully train the hardware-
embedded models introduced here on both real and syn-
thetic data sets of pictures. Here, we compare physical
and logical models trained by quantum annealing (QA),
simulated thermal annealing (SA) [80], and exact gradi-
ent. To simplify this task, we now deal with synthetic
data sets composed of D = 150 samples generated ex-
haustively from small-sized Boltzmann distributions as
described in Sec. IV B. This is similar in spirit to the ap-
proach usually taken in the literature on the inverse Ising
problem [56, 57]. However, we do not quantify the qual-
ity of the trained model by the quadratic error between

10

FIG. 4. OptDigits experiment. (a) We show 36 samples from the test set, with each pixel being either dark blue (+1) or white
(−1). See Fig. 3 and the main text for a description of the preprocessing steps. (b) A uniform salt-and-pepper noise shown in
red corrupts each picture. The model cannot use information from the red area. (c)-(f) Reconstructions obtained after 1, 10,
1000, and 6000 learning iterations. A light blue pixel indicates a tie of the majority vote over the corresponding subgraph. We
can visually verify that the model has learned to generate digits. The learning stops at iteration 6000 because further iterations
would bring some parameters out of the dynamic range of the DW2X device.

FIG. 5. BAS experiment. (a) We show 36 samples from the test set, with each pixel being either dark blue (+1) or white (−1).
(b) A 5 × 4 block of noise shown in red corrupts each picture. The model cannot use information from the red area and yet
the remaining pixels contain enough information to reconstruct the original picture. (c)-(f) Reconstructions obtained after 1,
10, 1000, and 3850 learning iterations. The average number of mistaken pixels is 50% in (c), 18.6% in (d), 2.95% in (e), and
ﬁnally 0.65% in (f). This is an almost perfect reconstruction. The learning stops at iteration 3850 because further iterations
would bring some parameters out of the dynamical range of the DW2X device.

FIG. 6. Visual Turing test. (a)-(h) The reader is invited to distinguish between human-generated pictures from the test set
and machine-generated pictures sampled from the model. Columns identify classes one to four; rows identify the source–human
or machine. The solution is given in Ref. [79].

the parameters of the original model and those obtained
by the learning algorithms, as it is usually done, for three
reasons: (i) The physical model implemented in quantum
hardware has a larger number of parameters than the
logical model from which the data are generated, and
a direct comparison is not straightforward. (ii) In our
gray-box model approach, we do not have direct access
to the eﬀective parameters implemented in the quantum
annealer, so we have to estimate the eﬀective tempera-
ture that can introduce errors. (iii) To our knowledge,
there is no direct connection between generic distances in
parameter space, as measured by the quadratic error, and
distances in probability space, which are those that have
actual operational meaning, except perhaps when the pa-
rameters are close enough. Indeed, to measure distances
in parameter space that correspond to distances in prob-
ability space it is necessary to use the Fisher information
metric. For instance, it is known that, close to a critical
point, a slight variation in the parameters can lead to
drastically diﬀerent probability distributions [81].

Instead, our evaluation strategy exploits the fact that
we have full knowledge of the probability distribution
Q(s) that generated the data. At each learning itera-
tion, or epoch, we sample a set S = {s(1), . . . , s(L)} of
L points from the model P (s) and evaluate the average
log-likelihood that such samples were generated by Q(s),

Λav(S) =

1
L

L
(cid:88)

(cid:96)=1

log Q(s((cid:96)))

= −β

1
L

L
(cid:88)

(cid:96)=1

E(s((cid:96))) − log Z(β);

(14)

for simplicity, we chose L = D = 150. Notice that
Eq. (14) requires full knowledge of the distribution that
generated the data. This is unfeasible for real data sets
since the whole point of learning a model is precisely that
we do not know the true underlying distribution. How-
ever, this proxy is related to the generalization properties
of the trained model since it corresponds to the likeli-
hood that new arbitrary samples generated by the model
were actually generated by the true underlying distribu-
tion. We expect this to be a faithful proxy since achieving
good generalization performance is the main objective of
machine-learning techniques. However, we should take
into account that Λav(S) is not expected to be maxi-
mized by the generated samples but rather to match the
value Λav(D) of the original data set.

In this set of experiments, we performed 500 learning
iterations and did not use gradient enhancements such
as momentum and regularization in order to simplify
the quantitative analysis. First, we veriﬁed whether the
larger number of parameters in the physical graph pro-
vides a practical advantage against the logical models.
While exact gradient calculations are feasible in the 15-
variable logical graph, they are infeasible for the 76-qubit
physical graph considered here (see details in Table I).
We opted for a sampling procedure based on SA where

11

each sample follows its own independent linear schedule,
therefore avoiding the problem of autocorrelation among
samples. We used a linear schedule β(t) = t/tmax for the
inverse temperature and performed a preliminary study
in order to set the optimal number of Monte Carlo spin
ﬂips per sample, tmax. We incrementally increased this
number and observed the change in learning performance
via the proxy Λav. We choose tmax = 15200 Monte Carlo
spin ﬂips, as multiples of this number did not result in
improved learning speed nor in better values of Λav. We
expect this procedure to be essentially equivalent to ex-
act gradient within the 500 learning iteration considered
here. Figure 7 shows mean and 1 standard deviation of
the performance indicator for the 10 synthetic instances
considered here. Figure 7(a) indicates that SA-based
learning on the physical graph (red squares) is slower
than exact gradient learning on the logical graph (blue
band) when the same learning rate is used. Even though
both methods approach the optimal Λav of the data set
(green band), the larger number of parameters does not
speed up learning. Despite this, Fig. 7(b) shows that
quantum-assisted learning with η = 0.0025 (red circles)
outperforms exact gradient. This indicates that a varying
eﬀective learning rate could be induced by the instance-
dependent eﬀective temperature [21] at which a quantum
annealer samples. Indeed, by increasing the learning rate
of the exact gradient method to η = 0.01 (orange band),
we were able to outperform quantum-assisted learning.
In turn, however, quantum-assisted learning can outper-
form exact gradient if the same larger learning rate is
used (purple triangles). The fast initial learning could
also be caused by a nonvanishing transverse ﬁeld at the
freeze-out point (see Sec. III above for a discussion).
Because of the interplay between eﬀective temperature
and learning rate, the experiments presented here can-
not conﬁrm nor rule out the presence of these quantum
eﬀects. Open-quantum-systems simulations on small sys-
tems might give us greater control and allow us to have
further insights into the interplay of the mechanisms pro-
posed here. We leave this task for future work.

VI. CONCLUSIONS

Whether quantum annealing can improve algorithms
that rely on sampling from complex high-dimensional
probability distributions, or whether they can provide
more eﬀective models are important open research ques-
tions. However, quantum annealers face several chal-
lenges that need to be overcome before we can ad-
dress such a question from an experimental perspective.
Besides the problem of proper temperature estimation,
which has been addressed recently [21, 52], some of the
most pressing challenges are sparse connectivity which
limits the capacity of the models that can be imple-
mented, low precision, and limited range of the control
parameters, as well as diﬀerent sources of noise that af-
fect the performance of state-of-the-art quantum anneal-

12

FIG. 7. Comparison of diﬀerent learning settings. The plots show mean and 1 standard deviation of the proxy Λav for 10
random instances and for diﬀerent learning procedures. We use exact gradient for the 15-variable logical graph and quantum
annealing (QA) or simulated thermal annealing (SA) for the corresponding 76-qubit physical graph. A learning procedure is
considered successful if it can generalize, that is, if it matches the proxy of the training set (green band). (a) The logical
model (blue band) matches faster than the physical model (red squares) when the same learning rate is used. This suggests
that the larger number of parameters does not help the physical model. (b) Quantum annealing on the physical graph (red
circles) enables faster matching than exact gradient on the logical graph (blue band) when the same learning rate η = 0.0025
is used. However, the exact-gradient procedure equipped with a larger learning rate η = 0.01 (orange band) outperforms the
quantum-assisted algorithm. In turn, the quantum-assisted algorithm outperforms all other learning procedures when equipped
with the larger learning rate η = 0.01 (purple triangles). Notice that neither the computation of Λav nor the exact-gradient
learning is tractable, in general.

ers [55].

By combining standard embedding techniques with the
data-driven automatic setting of embedding parameters,
we substantially improve the robustness and the com-
plexity of machine-learning models that can be mod-
eled with quantum annealers. By working on a gray-box
model framework, which requires only partial informa-
tion about the actual distribution from which the quan-
tum annealer is sampling, this approach also avoids the
need for estimating temperature during the learning of
the models and has the potential to help mitigate the dif-
ferent sources of noise on the device. The resulting model
can be interpreted as a visible-only quantum Boltzmann
machine with all pairwise interactions among logical vari-
ables. We validated our ideas qualitatively by training
the fully connected hardware-embedded model for recon-
struction and generation of pictures, and quantitatively
by computing a proxy on data sets extracted from ran-
domly generated Boltzmann distributions.

Another advantage of our approach is that the learn-
ing rules are embedding-agnostic. More precisely, the
underlying hardware embedding for the scaﬀolding logi-
cal model can be found by either heuristic algorithms [78]
or by known eﬃcient schemes [77, 82], and the learning
strategy is the same. While we have a priori ﬁxed map-
pings f and g using embedding techniques, such func-
tions could also be learned from data, as we will discuss
elsewhere.

Furthermore, the strategy for training can be straight-
forwardly extended to other proposed hardware archi-
tectures, such as the LHZ scheme [66]. More speciﬁcally,
the data from the machine-learning task can be easily
mapped to the physical qubits of that scheme by fol-
lowing the equivalent of our Eq. (6). One diﬀerence is
that the gradient updates [see Eqs. (12) and (13)] for the
programmable parameters in this case will involve the
updates of bias terms and the penalties for the quartic
terms, under that choice of hardware implementation.
This does not pose any challenges with our approach ei-
ther, and the ﬁnal results of the same iterative learning
procedure detailed here would be a trained quantum or
classical model. By using this gray-box model, one can
also get samples from a LHZ-type device and use it for
useful tasks such as the digit reconstruction or genera-
tion as illustrated in this work. The question of whether
there is any advantage of either implementation for the
machine-learning tasks proposed here is a question that
would need to be addressed in future work.

Natural extensions of the model will be inclusion of
latent variables, also known as hidden units, support for
continuous variables, and the development of techniques
for the quantum annealer to also learn the embedding
if
from data. Hidden units are needed, for example,
visible patterns require constraints that cannot be en-
forced by pairwise interactions alone [70]. Continuous
variables are needed for a correct modeling of real data

sets. This has been the focus of recent work [37, 38],
where we used the same gray-box model developed here
but on a fully connected graph of 60 hidden units (in-
stead of visible units). We performed experiments on
a hardware-embedded model with 1644 qubits, further
supporting the robustness-to-noise claims in this work
and the value of this approach as a template for other
quantum-assisted frameworks.

Another possible direction for future work is the ex-
tension of our learning algorithm to more general, possi-
bly nonequilibrium, distributions. As we discussed, our
learning algorithm might still work when there are rela-
tively small deviations from the thermal distribution we
assumed, as long as the estimated gradient has a positive
projection on the direction of the true gradient. Indeed, if
we had no information on the state reached by the quan-
tum annealer, we would have to rely on model-free (e.g.,
black-box) techniques based, for instance, on randomly
choosing a direction to update the control parameters,
which may be highly ineﬃcient [11, 75]. On the other
hand, if we had complete knowledge of the ﬁnal state
reached by the quantum annealer, we could beneﬁt from
model-based techniques, as we have done here. A pos-
sible hybrid algorithm may be based on a model, e.g., a
Gibbs distribution, that captures the most relevant fea-
tures of the quantum annealer state and some unknown
corrections.
In this way, the algorithm may choose a
direction in parameter space informed by the model, in-
stead of just randomly, and use the black-box techniques
to correct for mistakes.

From a more fundamental perspective, several key
questions remain open: When and why could the quan-
tum annealer do better than classical MCMC approaches,
or when and why could it provide more eﬀective models?
Our results show that the quantum-assisted learning al-
gorithm has a faster learning during the initial stage,
in the scenario where both classical (exact gradient es-
timation and SA) and our hybrid quantum-classical ap-
proach are set under the same conditions in terms of hy-
perparameters. Given that an instance-dependent eﬀec-
tive temperature can imply a varying learning rate, this
faster learning is probably due to the quantum-assisted
algorithm automatically adjusting its learning rate.
In
this respect, it is important to investigate if such a learn-
ing schedule is optimal and,
if so, whether it can be
eﬀectively simulated by classical means. Still, we can-
not discard that some nontrivial quantum eﬀects play a
role here. Indeed, as pointed out in Ref. [26], and as we
further discussed above, the learning rules for classical
and quantum Boltzmann machines coincide when there
are no hidden variables. The potential to train quantum
models [25, 26, 65] opens new exciting opportunities for
quantum annealing. These eﬀorts resonate with founda-
tional research interested in quantifying or identifying the
computational resources that could be associated with
quantum models [39, 67].

Arguably, this question of whether or not there is quan-

13

tum speedup in sampling applications is one of the most
important questions propelling our research. Years of ex-
perience accumulated with the use of quantum annealers
for combinatorial optimization suggest that the answer
may not be straightforward [83, 84], with the ﬁrst com-
prehensive benchmarking study on an industrial applica-
tion performed only recently [51]. Benchmarking quan-
tum annealing for machine learning can be approached
by following well-established guidelines used in optimiza-
tion (see Ref. [85]). However, the iterative nature of most
machine-learning applications makes the task far more
time-consuming. Almost all the hyperparameters (e.g.,
learning rate, annealing time, number of samples per it-
eration, etc.) can be adjusted throughout the learning,
hence requiring us to ﬁnd an optimal schedule for both
classical and quantum algorithms. To obtain acceptable
statistics, the study should be carried out on several data
sets and diﬀerent system sizes, where the time required to
optimize the hyperparameters above grows quickly with
In nonconvex problems (in parameter
the system size.
space), even if the samples used at each iteration are of
high quality, the learning algorithm can ﬁnd suboptimal
solutions. In convex problems like the one we considered
here, the performance of the learning algorithm mostly
relies on the quality of the samples. This makes our ap-
proach appealing for the purpose of benchmarking. Still
it is required to assess the quality of the whole distribu-
tion of states and not just the ground state as in combi-
natorial optimization applications. In this work, we focus
on providing a proof-of-principle demonstration and ex-
perimental evidence that quantum annealers can be used
for complex machine-learning tasks, such as in the case of
unsupervised generative modeling on fully visible, prob-
abilistic, graphical models with arbitrary pairwise con-
nectivity. We hope this work continues opening new op-
portunities for quantum annealing and, more broadly, for
quantum machine-learning research.

ACKNOWLEDGEMENTS

This work was supported in part by the AFRL Infor-
mation Directorate under Grant No. F4HBKC4162G001,
the Oﬃce of the Director of National
Intelligence
(ODNI), and the
Intelligence Advanced Research
Projects Activity (IARPA), via IAA 145483. The views
and conclusions contained herein are those of the au-
thors and should not be interpreted as necessarily rep-
resenting the oﬃcial policies or endorsements, either ex-
pressed or implied, of ODNI, IARPA, AFRL, or the U.S.
Government. The U.S. Government is authorized to re-
produce and distribute reprints for Governmental pur-
pose notwithstanding any copyright annotation thereon.
M. B. was partially supported by the UK Engineering
and Physical Sciences Research Council (EPSRC) and
by Cambridge Quantum Computing Limited (CQCL).

Appendix A: Example

14

Figure 8 shows the embedding of a fully connected graph with 46 logical units into 940 physical qubits.

FIG. 8. Embedding. We show 46 logical variables embedded into DW2X’s chimera graph using 940 physical variables. Qubits
belonging to a logical variable are identiﬁed by the same number and linked by edges of the same color. This embedding uses
86% of DW2X’s qubits.

[1] Yann LeCun, Yoshua Bengio,

and Geoﬀrey Hinton,

“Deep learning,” Nature 521, 436 – 444 (2015).

[2] Zoubin Ghahramani, “Probabilistic machine learning
and artiﬁcial intelligence,” Nature 521, 452 – 459 (2015).
[3] Ian Goodfellow Yoshua Bengio and Aaron Courville,

“Deep learning,” (2016), MIT Press.

[4] Ian Goodfellow, “Nips 2016 tutorial: Generative adver-

sarial networks,” arXiv:1701.00160 (2016).

[5] Andrew Y Ng and Michael I Jordan, “On discriminative
vs. generative classiﬁers: A comparison of logistic regres-
sion and naive bayes,” in Advances in neural information
processing systems (2002) pp. 841–848.

[6] Ruslan Salakhutdinov, “Learning deep generative mod-
els,” Annual Review of Statistics and Its Application 2,
361–385 (2015).

[7] Alistair Sinclair and Mark Jerrum, “Approximate count-
ing, uniform generation and rapidly mixing markov
chains,” Inf. Comput. 82, 93–133 (1989).

[8] Arnoldo Frigessi, Fabio Martinelli, and Julian Stander,
“Computational complexity of Markov chain Monte
Carlo methods
for ﬁnite Markov random ﬁelds,”
Biometrika 84, 1–18 (1997).

[9] Harmut Neven, Vasil S Denchev, Marshall Drew-Brook,
Jiayong Zhang, William G Macready, and Geordie Rose,
“Binary classiﬁcation using hardware implementation
of quantum annealing,” in Demonstrations at NIPS-09,
24th Annual Conference on Neural Information Process-
ing Systems (2009) pp. 1–17.

[10] Zhengbing Bian, Fabian Chudak, William G Macready,
and Geordie Rose, The Ising model: teaching an old prob-
lem new tricks, Tech. Rep. (D-Wave Systems, 2010).
[11] Misha Denil and Nando De Freitas, “Toward the imple-
mentation of a quantum RBM,” NIPS Deep Learning and
Unsupervised Feature Learning Workshop (2011).
[12] Nathan Wiebe, Daniel Braun, and Seth Lloyd, “Quan-
tum algorithm for data ﬁtting,” Physical review letters
109, 050505 (2012).

[13] Kristen L. Pudenz and Daniel A. Lidar, “Quantum adia-
batic machine learning,” Quantum Information Process-
ing 12, 2027–2070 (2013).

[14] Seth Lloyd, Masoud Mohseni, and Patrick Rebentrost,
“Quantum algorithms for supervised and unsupervised
machine learning,” arXiv:1307.0411 (2013).

[15] Patrick Rebentrost, Masoud Mohseni, and Seth Lloyd,
“Quantum support vector machine for big data classiﬁ-
cation,” Phys. Rev. Lett. 113, 130503 (2014).

[16] Guoming Wang, “Quantum algorithm for linear regres-

sion,” Physical Review A 96, 012335 (2017).

[17] Z. Zhao, J. K. Fitzsimons, and J. F. Fitzsimons, “Quan-
tum assisted Gaussian process regression,” ArXiv e-
prints (2015), arXiv:1512.03929 [quant-ph].

[18] Seth Lloyd, Masoud Mohseni,

and Patrick Reben-
trost, “Quantum principal component analysis,” Nature
Physics 10, 631–633 (2014).
[19] Maria Schuld, Ilya Sinayskiy,

and Francesco Petruc-
cione, “Prediction by linear regression on a quantum
computer,” Physical Review A 94, 022342 (2016).
[20] Krysta M. Svore Nathan Wiebe, Ashish Kapoor, “Quan-

tum deep learning,” arXiv:1412.3489 (2015).

[21] Marcello Benedetti, John Realpe-G´omez, Rupak Biswas,
and Alejandro Perdomo-Ortiz, “Estimation of eﬀective

15

temperatures in quantum annealers for sampling appli-
cations: A case study with possible applications in deep
learning,” Phys. Rev. A 94, 022308 (2016).

[22] Scott Aaronson, “Read the ﬁne print,” Nature Physics

11, 291–293 (2015), commentary.

[23] Steven H. Adachi and Maxwell P. Henderson, “Appli-
cation of quantum annealing to training of deep neural
networks,” arXiv:1510.06356 (2015).

[24] Nicholas Chancellor, Szilard Szoke, Walter Vinci, Gabriel
Aeppli, and Paul A Warburton, “Maximum-entropy in-
ference with a programmable annealer,” Scientiﬁc reports
6 (2016).

[25] Mohammad H. Amin and Evgeny Andriyash and Jason
Rolfe and Bohdan Kulchytskyy and Roger Melko, “Quan-
tum Boltzmann Machine,” arXiv:1601.02036 (2016).
[26] Maria Kieferova and Nathan Wiebe, “Tomography and
generative data modeling via quantum boltzmann train-
ing,” arXiv preprint arXiv:1612.05204 (2016).

[27] Iordanis Kerenidis and Anupam Prakash, “Quantum rec-
ommendation systems,” arXiv preprint arXiv:1603.08675
(2016).

[28] Lucas Lamata, “Basic protocols in quantum reinforce-
ment learning with superconducting circuits,” Scientiﬁc
Reports 7 (2017).

[29] Unai Alvarez-Rodriguez,

Lucas

Pablo
Escandell-Montero, Jos´e D Mart´ın-Guerrero,
and
Enrique Solano, “Quantum machine learning with-
out measurements,” arXiv preprint arXiv:1612.05535
(2016).

Lamata,

[30] Peter Wittek and Christian Gogolin, “Quantum en-
hanced inference in markov logic networks,” Scientiﬁc
Reports 7 (2017).

[31] Thomas E. Potok, Catherine Schuman, Steven R. Young,
Robert M. Patton, Federico Spedalieri, Jeremy Liu,
Ke-Thia Yao, Garrett Rose, and Gangotree Chakma,
“A study of complex deep learning networks on high
performance, neuromorphic, and quantum computers,”
arXiv:1703.05364 (2017).

[32] Maria Schuld, Ilya Sinayskiy, and Francesco Petruccione,
“An introduction to quantum machine learning,” Con-
temporary Physics 56, 172–185 (2015).

[33] Jonathan Romero, Jonathan P Olson, and Alan Aspuru-
Guzik, “Quantum autoencoders for eﬃcient compression
of quantum data,” Quantum Sci. Technol. 2, 045001
(2017).

[34] Jeremy Adcock, Euan Allen, Matthew Day, Stefan Frick,
Janna Hinchliﬀ, Mack Johnson, Sam Morley-Short, Sam
and Stasja Stanisic, “Ad-
Pallister, Alasdair Price,
vances in quantum machine learning,” arXiv preprint
arXiv:1512.02900 (2015).

[35] Jacob Biamonte, Peter Wittek, Nicola Pancotti, Patrick
Rebentrost, Nathan Wiebe,
and Seth Lloyd, “Quan-
tum machine learning,” arXiv preprint arXiv:1611.09347
(2016).

[36] C. Ciliberto, M. Herbster, A. Davide Ialongo, M. Pontil,
A. Rocchetto, S. Severini, and L. Wossnig, “Quantum
machine learning: a classical perspective,” ArXiv e-prints
(2017), arXiv:1707.08561 [quant-ph].

[37] Alejandro Perdomo-Ortiz, Marcello Benedetti, John
Realpe-G´omez,
and Rupak Biswas, “Opportunities
and challenges for quantum-assisted machine learning

in near-term quantum computers,” arXiv:1708.09757
(2017).

[38] Marcello Benedetti, John Realpe-G´omez, and Alejandro
Perdomo-Ortiz, “Quantum-assisted helmholtz machines:
A quantum-classical deep learning framework for indus-
trial datasets in near-term devices,” arXiv:1708.09784
(2017).

[39] Mile Gu, Karoline Wiesner, Elisabeth Rieper,

and
Vlatko Vedral, “Quantum mechanics can reduce the com-
plexity of classical models,” Nature Communications 3,
762 (2012).

[40] AB Finnila, MA Gomez, C Sebenik, C Stenson, and
JD Doll, “Quantum annealing: a new method for min-
imizing multidimensional functions,” Chemical Physics
Letters 219, 343–348 (1994).

[41] Tadashi Kadowaki and Hidetoshi Nishimori, “Quantum
annealing in the transverse ising model,” Phys. Rev. E.
58, 5355 (1998).

[42] Edward Farhi, Jeﬀrey Goldstone, Sam Gutmann, Joshua
Lapan, Andrew Lundgren, and Daniel Preda, “A quan-
tum adiabatic evolution algorithm applied to random in-
stances of an NP-Complete problem,” Science 292, 472–
475 (2001).

[43] Frank Gaitan and Lane Clark, “Ramsey numbers and
adiabatic quantum computing,” Phys. Rev. Lett. 108,
010501 (2012).

[44] A. Perdomo-Ortiz, N. Dickson, M. Drew-Brook, G. Rose,
and A. Aspuru-Guzik, “Finding low-energy conforma-
tions of lattice protein models by quantum annealing,”
Sci. Rep. 2, 571 (2012).

[45] Zhengbing Bian, Fabian Chudak, Robert Israel, Brad
and Aidan Roy,
Lackey, William G Macready,
“Discrete optimization using quantum annealing on
sparse ising models,” Frontiers in Physics 2 (2014),
10.3389/fphy.2014.00056.

[46] B. O’Gorman, R. Babbush, A. Perdomo-Ortiz,
and V. Smelyanskiy, “Bayesian
A. Aspuru-Guzik,
network structure learning using quantum annealing,”
The European Physical Journal Special Topics 224,
163–188 (2015).

[47] Eleanor G. Rieﬀel, Davide Venturelli, Bryan O’Gorman,
Minh B. Do, Elicia M. Prystay, and Vadim N. Smelyan-
skiy, “A case study in programming a quantum annealer
for hard operational planning problems,” Quantum In-
formation Processing 14, 1–36 (2015).

[48] A. Perdomo-Ortiz, J. Fluegemann, S. Narasimhan,
R. Biswas, and V. N. Smelyanskiy, “A quantum anneal-
ing approach for fault detection and diagnosis of graph-
based systems,” Eur. Phys. J. Special Topics 224, 131–
148 (2015).

[49] Alejandro Perdomo-Ortiz, Joseph Fluegemann, Rupak
Biswas, and Vadim N Smelyanskiy, “A performance es-
timator for quantum annealers: gauge selection and pa-
rameter setting,” arXiv:1503.01083 (2015).
[50] Davide Venturelli, Dominic J.J. Marchand,

and Galo
Rojo, “Quantum annealing implementation of job-shop
scheduling,” arXiv:1506.08479 (2015).

[51] Alejandro Perdomo-Ortiz, Alexander Feldman, Asier
Ozaeta, Sergei V. Isakov, Zheng Zhu, Bryan O’Gorman,
Helmut G. Katzgraber, Alexander Diedrich, Hartmut
Neven, Johan de Kleer, Brad Lackey, and Rupak Biswas,
“On the readiness of quantum optimization machines for
industrial applications,” arXiv:1708.09780 (2017).

16

[52] Jack Raymond, Sheir Yarkoni, and Evgeny Andriyash,
“Global warming: Temperature estimation in annealers,”
arXiv:1606.00919 (2016).

[53] Mohammad H. Amin, “Searching for quantum speedup
in quasistatic quantum annealers,” Phys. Rev. A 92,
052323 (2015).

[54] Marcello Benedetti, Exploring Quantum Annealing for
Data Mining, Master’s thesis, Universit´e Lumi`ere Lyon
2, France (2015).

[55] V. Dumoulin, I. J. Goodfellow, A. C. Courville,

and
Y. Bengio, “On the challenges of physical implementa-
tions of RBMs,” in Proceedings of the Twenty-Eighth
AAAI Conference on Artiﬁcial Intelligence, July 27 -31,
2014, Qu´ebec City, Qu´ebec, Canada. (2014) pp. 1199–
1205.

[56] Elad Schneidman, Michael J. Berry, Ronen Segev,
and William Bialek, “Weak pairwise correlations imply
strongly correlated network states in a neural popula-
tion,” Nature 440, 1007–1012 (2006).

[57] Federico Ricci-Tersenghi, “The bethe approximation for
solving the inverse ising problem: a comparison with
other inference methods,” Journal of Statistical Mechan-
ics: Theory and Experiment 2012, P08015 (2012).
[58] M. Lichman, “UCI machine learning repository,” (2013).
[59] David J. C. MacKay, Information Theory, Inference
& Learning Algorithms (Cambridge University Press,
2003).

[60] M. Mezard, G. Parisi, and M.A. Virasoro, Spin Glass
Theory and Beyond, Lecture Notes in Physics Series
(World Scientiﬁc, 1987).

[61] Marc Mezard and Andrea Montanari,

Information,
Physics, and Computation (Oxford University Press,
Inc., New York, NY, USA, 2009).

[62] H. Nishimori, Statistical Physics of Spin Glasses and In-
formation Processing: An Introduction, International se-
ries of monographs on physics (Oxford University Press,
2001).

[63] Alejandro Perdomo-Ortiz, Bryan O’Gorman, Joseph
Fluegemann, Rupak Biswas, and Vadim N. Smelyan-
skiy, “Determination and correction of persistent biases
in quantum annealers,” Sci. Rep. 6, 18628 (2016).
[64] Salvatore Mandr`a, Zheng Zhu, and Helmut G. Katz-
graber, “Exponentially biased ground-state sampling of
quantum annealing machines with transverse-ﬁeld driv-
ing hamiltonians,” Phys. Rev. Lett. 118, 070502 (2017).
[65] Dmytro Korenkevych, Yanbo Xue, Zhengbing Bian,
Fabian Chudak, William G Macready, Jason Rolfe, and
Evgeny Andriyash, “Benchmarking quantum hardware
for training of fully visible boltzmann machines,” arXiv
preprint arXiv:1611.04528 (2016).

[66] Wolfgang Lechner, Philipp Hauke, and Peter Zoller, “A
quantum annealing architecture with all-to-all connectiv-
ity from local interactions,” Science advances 1, e1500838
(2015).

[67] John Realpe-G´omez, “Quantum as self-reference,” arXiv

preprint arXiv:1705.04307 (2017).

[68] Vicky Choi, “Minor-embedding in adiabatic quantum
computation: I. the parameter setting problem,” Quan-
tum Information Processing 7, 193–209 (2008).

[69] Davide Venturelli, Salvatore Mandr`a, Sergey Knysh,
Bryan O’Gorman, Rupak Biswas, and Vadim Smelyan-
skiy, “Quantum optimization of
fully connected spin
glasses,” Phys. Rev. X 5, 031040 (2015).

[70] David H Ackley, Geoﬀrey E Hinton, and Terrence J Se-
jnowski, “A learning algorithm for boltzmann machines,”
Cognitive science 9, 147–169 (1985).

[71] Geoﬀrey E. Hinton, “A practical guide to training
restricted boltzmann machines.” in Neural Networks:
Tricks of the Trade (2nd ed.), Lecture Notes in Com-
puter Science, Vol. 7700, edited by Grgoire Montavon,
Genevieve B. Orr, and Klaus-Robert Mller (Springer,
2012) pp. 599–619.

[72] Edwin T Jaynes, “Information theory and statistical me-

chanics. ii,” Physical review 108, 171 (1957).

[73] E. T. Jaynes, “Information theory and statistical me-

chanics,” Phys. Rev. 106, 620–630 (1957).

[74] E.T. Jaynes and G.L. Bretthorst, Probability Theory:
The Logic of Science (Cambridge University Press, 2003).
[75] James C. Spall, Introduction to Stochastic Search and
Optimization, 1st ed. (John Wiley & Sons, Inc., New
York, NY, USA, 2003).

[76] Marc M´ezard and Thierry Mora, “Constraint satisfac-
tion problems and neural networks: A statistical physics
perspective,” Journal of Physiology-Paris 103, 107 – 113
(2009), Neuromathematics of Vision.

[77] Vicky Choi, “Minor-embedding in adiabatic quantum
computation: Ii. minor-universal graph design,” Quan-
tum Information Processing 10, 343–353 (2011).

[78] Jun Cai, William G Macready, and Aidan Roy, “A prac-
tical heuristic for ﬁnding graph minors,” arXiv:1406.2741
(2014).

[79] Blocks (a)-(d) show machine-generated pictures while
blocks (e)-(h) show human-generated pictures. We have

17

not performed the standard Turing test, where each pair
of ﬁgures is shown in isolation. Ours is, in principle, a
harder test for the machine as, the redundancy of hav-
ing all human- and machine-generated images together
enhances the probability of a human to spot diﬀerences
between the two types of images. This is compensated by
the low resolution of the images, which might hint at an
easier test for the machine, if shown one by one, given
the distortion of the images.
[80] S Kirkpatrick, CD Gelatt,

and MP Vecchi, “Opti-
mization by simulated annealing,” Science 220, 671–680
(1983).

[81] Iacopo Mastromatteo and Matteo Marsili, “On the criti-
cality of inferred models,” Journal of Statistical Mechan-
ics: Theory and Experiment 2011, P10012 (2011).
[82] Christine Klymko, Blair D. Sullivan, and Travis S. Hum-
ble, “Adiabatic Quantum Programming: Minor Embed-
ding With Hard Faults,” arXiv:1210.8395 (2012).
[83] Joshua Job and Daniel Lidar, “Test-driving 1000 qubits,”

arXiv:1706.07124 (2017).

[84] Helmut G. Katzgraber, “Viewing vanilla quantum an-
nealing through spin glasses,” arXiv:1708.08885 (2017).
[85] Troels F Rønnow, Zhihui Wang, Joshua Job, Sergio
Boixo, Sergei V Isakov, David Wecker, John M Martinis,
Daniel A Lidar, and Matthias Troyer, “Deﬁning and de-
tecting quantum speedup,” Science 345, 420–424 (2014).

