Machine Learning Algorithms for b-Jet Tagging at the
ATLAS Experiment

Michela Paganini
on behalf of the ATLAS Collaboration
Yale University, Department of Physics, 217 Prospect Street, New Haven, CT 06511-8499

E-mail: michela.paganini@cern.ch

Abstract. The separation of b-quark initiated jets from those coming from lighter quark
ﬂavors (b-tagging) is a fundamental tool for the ATLAS physics program at the CERN Large
Hadron Collider. The most powerful b-tagging algorithms combine information from low-level
taggers, exploiting reconstructed track and vertex information, into machine learning classiﬁers.
The potential of modern deep learning techniques is explored using simulated events, and
compared to that achievable from more traditional classiﬁers such as boosted decision trees.

1. Introduction
With the increase in the expected integrated luminosity delivered in the remaining years of Run 2
by the Large Hadron Collider [1] (LHC), a growing emphasis is put on algorithmic improvements
at the reconstruction level [2] to leverage the full sensitivity potential for measurements and
searches of interest to the ATLAS [3] physics program.

The task of identifying jets that contain b-hadrons and separating them from jets initiated by
lighter quark ﬂavors is of particular signiﬁcance due to the prominence of b-hadrons in ﬁnal states
of interesting physics processes, and to the abundant background light-ﬂavored-jet production
at hadron colliders such as the LHC. This task, commonly referred to as b-tagging, is broadly
applied to both precise standard model measurements and searches for signatures of new physics
phenomena. b-tagging can be cast as a classiﬁcation problem with the objective of correctly
assigning jet ﬂavors using the trajectories of charged particles (tracks) reconstructed in the

7
1
0
2

v
o
N
3
2

]
x
e
-
p
e
h
[

1
v
1
1
8
8
0
.
1
1
7
1
:
v
i
X
r
a

Figure 1: The set of b-tagging algorithms currently in use in the ATLAS experiment at the LHC
includes ﬁve low-level taggers (IP3D, RNNIP, SMT, SV1, and JetFitter), as well as two
high level taggers (MV2, and DL1) which take as inputs combinations of the outputs of the
low-level taggers.

 
 
 
 
 
 
inner detector [4], and then associated to jets reconstructed from clusters of energy in the
electromagnetic [5] and hadronic [6] calorimeters.

We present the current hierarchy of algorithms used for b-tagging in ATLAS (Figure 1), and
outline the latest Monte Carlo-based optimization results [7], with speciﬁc focus on deep learning-
powered improvements, which include the use of fully-connected and recurrent neural networks.
These are the algorithms to be used to analyze the data recorded in 2017-2018.

2. Heavy hadron topology
The typical heavy hadron topology presents one or more vertices that are displaced from the hard-
scatter interaction point. The longer lifetimes of heavy-ﬂavor hadrons correspond to macroscopic
decay lengths that can be resolved by the ATLAS vertexing detectors. The hadron’s decay is
governed by its heavy quark decay chain. A b-hadron will usually decay through a cascade to
a c-hadron, strange hadron, etc. Therefore, in a b-initiated event, the goal is to reconstruct not
only the primary vertex whence the event initiates, but also a secondary, and possibly tertiary
vertex along the decay cascade. Finally, the heavy-ﬂavor hadrons’ non-negligible branching ratio
to semi-leptonic decays (≈ 21%) suggests using the presence of soft muons within jets as yet
another discriminating feature for ﬂavor tagging.

Jets used for b-tagging are reconstructed using the anti-kt algorithm [8] with radius R = 0.4,

and pass the following selection criteria [7]:
• if (cid:12)

T > 20 GeV • (cid:12)

(cid:12) > 2.5

• pjet

(cid:12)ηjet(cid:12)

(cid:12)ηjet(cid:12)

(cid:12) < 2.4 and pjet

T < 60 GeV: JVTjet > 0.59

where JVT is the output of the Jet Vertex Tagger algorithm [9] used to suppress jets from pile-up
interactions. At training time, the selection cuts are applied to uncalibrated jets, while at test
time the kinematic inputs are calibrated.

Tracks are associated to the nearest jet based on an angular separation criterion that varies

as a function of the jet pT [10].

At truth level, using the kinematic properties of the jet under investigation and the hadrons

in the event, the logic of the devised labeling scheme goes as follows:

if (∆R(jet, B) < 0.3) & (pTB > 5 GeV) then

jet ﬂavor ← b

else if (∆R(jet, C) < 0.3) & (pTC > 5 GeV) then

jet ﬂavor ← c

else if (∆R(jet, τ ) < 0.3) & (pTτ > 5 GeV) then

jet ﬂavor ← τ

else

jet ﬂavor ← light

end if

where ∆R(a, b) ≡ (cid:112)(φa − φb)2 + (ηa − ηb)2 1 and pT identiﬁes the component of the momentum
that is perpendicular to the beam direction.

3. Low-level taggers
Given the unique topology of heavy hadron decays (Section 2), ATLAS deploys a suite of low-level
b-tagging algorithms that aim at exploiting diﬀerent discriminative aspects of b-quark jets.

1 ATLAS uses a right-handed coordinate system with its origin at the nominal interaction point in the centre
of the detector and the z-axis along the beam pipe. The x-axis points from the interaction point to the centre
of the LHC ring, and the y-axis points upwards. Cylindrical coordinates (r, φ) are used in the transverse plane,
φ being the azimuthal angle around the z-axis. The pseudorapidity is deﬁned in terms of the polar angle θ as
η = − ln tan(θ/2).

3.1. Secondary vertex-based b-tagging algorithms
Physically grounded algorithms have been designed to look for displaced vertices. ATLAS uses an
inclusive secondary vertex algorithm, SV1 [11], which looks for displaced tracks and groups them
in a secondary vertex, and a multi-vertex ﬁnding algorithm, JetFitter [12], which reconstructs
the topology and ﬁts the entire decay chain along the hadron line of ﬂight.

3.2. Impact parameter-based b-tagging algorithms
Another low-level b-tagging approach exploits the impact parameter properties of tracks and how
they diﬀer in the heavy ﬂavor and light ﬂavor scenarios. The goal is to compute the likelihood
of tracks associated to jets originating at the primary vertex.

We deﬁne the transverse impact parameter, d0, as the distance of closest approach of the
track to the primary vertex in the r − φ plane (the plane perpendicular to the beam direction
ˆz), and the longitudinal impact parameter, z0, as the distance from the primary vertex to the
intersection of the track projection onto the longitudinal plane with the beam axis [13]. The sign
of the impact parameters indicates whether the track crosses the jet axis in front of or behind
the primary vertex with respect to the jet direction of ﬂight. While tracks in light jets have
impact parameter signiﬁcances that are close to zero, those generated from b-hadron decays and
consistent with the secondary vertex hypothesis are more likely to deviate from zero [13].

The tracks used for impact parameter-based tagging satisfy:

T > 1 GeV

• ptrack
• |d0| < 1 mm and |z0 sin θ| < 1.5 mm
Si ≤ 2 with N holes
• N hits

Si ≥ 7 and N holes

pixel ≤ 1

where a hole is deﬁned as a missing expected hit and the subscripts on N identify diﬀerent inner
detector components.

IP3D Traditionally,

impact parameter tagging uses a binned 2D likelihood method
3.2.1.
impact parameter
in diﬀerent track grade categories using the transverse and longitudinal
signiﬁcances. The IP3D tagger is based on a log likelihood ratio discriminant, computed –
assuming no correlation among tracks – as the following sum of per-track contributions:

IP3D LLR =

N
(cid:88)

i=1

log

pbi
pui

(1)

where N is the number of tracks associated to the jet, and pb, pu are the template PDFs for the
b and light ﬂavor hypotheses.

However, in a b-hadron decay, several charged particles with large impact parameters can
emerge from the secondary (or tertiary) vertex.
In this scenario, the tracksâĂŹ impact
parameters are intrinsically correlated: once a track with large impact parameter is found, ﬁnding
a second track with large impact parameter becomes more likely. On the other hand, such a
correlation should not be observed if there is no displaced decay, which is often the case for
light-ﬂavor jets. IP3D’s treatment of tracks as independent limits its power as its formulation
(Eq. 1) disregards known track correlations.

3.2.2. RNNIP The traditional IP3D tagger has been augmented by the introduction of
RNNIP [14], a Recurrent Neural Network-based b-tagging classiﬁer.

Recurrent Neural Networks (RNNs) are generally used to learn sequence-based dependencies
for arbitrary-length input sequences. The fundamental unit is a cell that holds an internal
state vector. To allow information to persist, RNNs use loops that feed the output of the

Figure 2: Anatomy of an LSTM cell with
output, input, and forget gates.

Figure 3: Diagram of the RNNIP tagger
from input (left) to output (right).

cell back into the cell itself at the following step. Much of the recent success of RNNs comes
from the formulation of Long Short-Term Memory [15] (LSTM) units and later variants such
as Gated Recurrent Units [16] (GRUs). These modiﬁcations at the cell level mitigate issues
related to vanishing and exploding gradients, to improve the knowledge persistence of long-term
dependencies. They do so with diﬀerent internal gating mechanisms that modify the cell state
in order to regulate the relative importance of long-term versus short-term information, allowing
the unit to learn when to read, write and reset the memory. The inner structure of an LSTM
unit is depicted in Figure 2, while Figure 3 shows its usage in the context of the tagger.

This architecture is the natural candidate for processing inputs in sequence format. RNNIP
represents jets as a sequence of tracks ordered by their absolute transverse impact parameter
signiﬁcance. Each track is described by a vector of features: transverse and longitudinal impact
parameter signiﬁcances, jet pT fraction carried by the track, distance between the track and the
jet axis, and a learned 2D embedding of the track quality.

This four-class tagger predicts a jet ﬂavor probability associated with each ﬂavor (b, c, τ , and
light), which could be used to select a class using a maximum a posteriori estimation. For the
purpose of calibrating multiple eﬃciency points, this information is instead combined into the
discriminant

RNNIP(fc, fτ ) = log

(cid:18)

pb
fc · pc + fτ · pτ + (1 − fc − fτ ) · pu

(cid:19)

(2)

where each background importance can be varied by varying their fraction (fc, fτ ) after training.

3.3. Muon-based b-tagging algorithm
The Soft Muon Tagger [7] (SMT) relies on information from the reconstructed muons from
semi-leptonic decays of heavy-ﬂavor hadrons. SMT provides orthogonal information to impact
parameter- and vertex-based taggers. This tagger uses a group of 6 hand-engineered variables
and combines them in a boosted decision tree to obtain a discriminant.

4. High-level taggers
4.1. MV2
The recently improved MV2 tagger is a gradient boosted decision tree trained using the ROOT
TMVA library [17] to perform a binary classiﬁcation of jets into b and non-b. Three variants are
investigated which diﬀer in the quantity of input variables.
MV2: this baseline model uses 24 input variables from lower level taggers (IP2D, IP3D, SV1,
JetFitter) and kinematic properties. The full list is available in Ref. [18];
MV2Mu: adds the output of the SMT BDT to the list of inputs;

MV2MuRnn: adds the output of RNNIP to the list of inputs.

Importance sampling is performed to achieve a ﬂat 2D distribution in pT and η. The hyper-
parameters of the model were optimized for the 2016 Run [13] to 1000 trees with maximum depth
of 30, and minimum node size of 0.05% of the training sample.

4.2. DL1
DL1 [19] is deep neural network whose architecture is a mixture of fully-connected, maxout [20],
and batch normalization [21]
layers with rectiﬁed linear units [22] as activation functions.
Dropout [23] is used as a stochastic regularization technique.

As with RNNIP, DL1 is trained using Keras [24], and incorporated into the ATLAS Athena
code base [25] via the custom C++ network evaluator provided through the LWTNN library [26].
rootpy [27] and root_numpy [28] were used to convert the input ﬁle format.

The network is trained to minimize the cross-entropy loss using the Adam optimizer [29]. A
thorough grid search is performed to select the network structure and hyper-parameters such as
the number of hidden layers, number of nodes per layer, and the learning rate.

The three output nodes calculate the probabilities associated with each jet ﬂavor (here: pb,
pc, pu) as highly non-linear functions of the input features. A ﬁnal discriminant for b-tagging
is obtained by combining the outputs into one tunable function of the fraction of c-jets in the
background, fc:

DL1(fc) = log

(cid:18)

pb
fc · pc + (1 − fc) · pu

(cid:19)

(3)

A similar equation can be derived for c-tagging, by swapping the b and c labels. Although the
c-fraction can be varied depending on the background composition of each analysis, in order to
facilitate the comparison with MV2, fc is herein set to the natural occurring fraction in a typical
t¯t sample, i.e. 7%. This parameter regulates the trade-oﬀ between c and light rejections at a
given b tagging eﬃciency.

While DL1 and MV2 have been found to have similar performance, DL1 has emerged out of
need for improved ﬂexibility and power in future R&D cycles. The neural network can be easily
trained with minimal standalone code; it is GPU-enabled; it is modular and can be eﬀortlessly
extended to include more input variables. It is also amenable to be trained using an adversarial
loss to minimize data-Monte Carlo discrepancies [30], and it grants the possibility for future
end-to-end trainings in conjunction with RNNIP.

5. Performance in Simulation
The high level taggers are trained on a newly introduced hybrid sample which combines t¯t with a
broad Z(cid:48) sample at mZ(cid:48) = 4 TeV to increase the representation of high pT jets at training time.
Figure 4 shows that RNNIP improves light rejection by a factor of 2 and c rejection by a factor
of 1.2 compared to IP3D, and outperforms it across the entire pT spectrum. A sizable fraction
of b-jets is tagged correctly by only one of the two algorithms, where IP3D is more eﬃcient at
low track multiplicity and short decay length, while RNNIP is superior at high multiplicity.

The three MV2 versions are evaluated on exclusive t¯t and Z(cid:48) samples; results from the latter
are presented in Figure 5. Including muon information improves b-to-light jet separation, but the
improvement vanishes at high pT. On the other hand, b-to-c separation does not strongly beneﬁt
from the muon-in-jet information for eﬃciencies > 50% because of lepton presence in both b and
c decays. MV2MuRnn further improves performance, especially in the high-pT region where
the RNNIP tagger is most performant. For example, when evaluating on Z(cid:48) events (Figure 5),
at pjet
T = 1 TeV the RNN improves the light-jet rejection by a factor ∼ 1.5 and the c-jet rejection
by a factor of ∼ 1.3, compared to the baseline MV2 2017 conﬁguration.

(a)

(b)

Figure 4: Performance comparison in bins of pT, as it appeared in Ref. [7], between IP3D and
RNNIP for light jet (a) and c-jet rejection (b) in simulated t¯t events at a constant b-eﬃciency
of 70%.

(a)

(b)

Figure 5: Performance comparison in bins of pT, as it appeared in Ref. [7], between MV2 in
the 2016 conﬁguration (brown), MV2 in the 2017 conﬁguration (black), MV2Mu (red) and
MV2MuRnn (blue) for light jet (a) and c-jet rejection (b) in simulated Z(cid:48) events at a constant
b-eﬃciency of 77%. The ratio plots use the 2016 MV2 conﬁguration as baseline.

6. Conclusion
ATLAS developed new algorithms to identify b-jets using machine learning techniques. Their
performance was investigated using Monte Carlo simulation of p¯p events with
s = 13 TeV in
the ATLAS detector. These methods augment the already rich suite of b-tagging algorithms
adopted by the ATLAS collaboration, by extracting complementary features and enhancing the
overall ﬂavor tagging performance.

√

ATLAS analysts can also expect an increased level of agreement between the train (Monte
Carlo) and test (data) domains due to improvements in the tracking simulation with respect
to the 2016 conﬁguration, which reduces the performance losses associated with out-of-domain
model application.

Acknowledgements
This work was supported in part by the Oﬃce of High Energy Physics of the U.S. Department
of Energy under contract DE-FG02-92ER40704.

References
[1] Evans L and Bryant P 2008 JINST 3 S08001
[2] Mitrevski J 2015 Journal of Physics: Conference Series 664 072034
[3] ATLAS Collaboration 2008 JINST 3 S08003
[4] ATLAS Collaboration 2010 The European Physical Journal C 70 787–821 ISSN 1434-6052
[5] 1996 ATLAS liquid argon calorimeter: Technical design report Tech. Rep. CERN-LHCC-96-41 CERN Geneva
[6] 1996 ATLAS tile calorimeter: Technical design report Tech. Rep. CERN-LHCC-96-42 CERN Geneva
[7] 2017 Optimisation and performance studies of the ATLAS b-tagging algorithms for the 2017-18 LHC run
Tech. Rep. ATL-PHYS-PUB-2017-013 CERN Geneva URL http://cds.cern.ch/record/2273281

[8] Cacciari M, Salam G P and Soyez G 2008 Journal of High Energy Physics 2008 063
[9] 2014 Tagging and suppression of pileup jets with the ATLAS detector Tech. Rep. ATLAS-CONF-2014-018

CERN Geneva URL https://cds.cern.ch/record/1700870

[10] ATLAS Collaboration 2016 JINST 11 P04008
[11] 2017 Secondary vertex ﬁnding for jet ﬂavour identiﬁcation with the ATLAS detector Tech. Rep. ATL-PHYS-

PUB-2017-011 CERN Geneva URL http://cds.cern.ch/record/2270366
[12] Piacquadio G and Weiser C 2008 Journal of Physics: Conference Series 119 032032
[13] 2016 Optimisation of the ATLAS b-tagging performance for the 2016 LHC Run Tech. Rep. ATL-PHYS-PUB-

2016-012 CERN Geneva URL http://cds.cern.ch/record/2160731

[14] 2017 Identiﬁcation of Jets Containing b-Hadrons with Recurrent Neural Networks at the ATLAS Experiment
Tech. Rep. ATL-PHYS-PUB-2017-003 CERN Geneva URL http://cds.cern.ch/record/2255226

[15] Hochreiter S and Schmidhuber J 1997 Neural Comput. 9 1735–1780 ISSN 0899-7667
[16] Chung J, Gulcehre C, Cho K and Bengio Y 2014 (Preprint cs.NE/1412.3555)
[17] Hoecker A, Speckmayer P, Stelzer J, Therhaag J, von Toerne E and Voss H 2007 PoS ACAT 040 (Preprint

physics/0703039)

[18] 2015 Expected performance of the ATLAS b-tagging algorithms in Run-2 Tech. Rep. ATL-PHYS-PUB-2015-

022 CERN Geneva URL https://cds.cern.ch/record/2037697

[19] ATLAS Collaboration 2017 URL http://cds.cern.ch/record/2274065
[20] Goodfellow I J, Warde-Farley D, Mirza M, Courville A and Bengio Y 2013 Maxout networks Proceedings of
the 30th International Conference on International Conference on Machine Learning - Volume 28 ICML’13
(JMLR.org) pp III–1319–III–1327

[21] Ioﬀe S and Szegedy C 2015 Batch normalization: Accelerating deep network training by reducing internal
covariate shift Proceedings of the 32nd International Conference on International Conference on Machine
Learning - Volume 37 ICML’15 (JMLR.org) pp 448–456

[22] Nair V and Hinton G E 2010 Rectiﬁed linear units improve restricted boltzmann machines Proceedings
of the 27th International Conference on International Conference on Machine Learning ICML’10 (USA:
Omnipress) pp 807–814 ISBN 978-1-60558-907-7

[23] Srivastava N et al. 2014 J. Mach. Learn. Res. 15 1929–1958 ISSN 1532-4435
[24] Chollet F et al. 2015 Keras URL https://github.com/fchollet/keras
[25] 2005 ATLAS Computing: technical design report URL http://cds.cern.ch/record/837738
[26] Guest D H, Smith J W, Paganini M, Kagan M, Lanfermann M and Krasznahorkay A 2017 lwtnn/lwtnn:

Version 2.4 DOI: 10.5281/zenodo.848256

[27] Dawe N, Waller P, Friis E K et al. 2015 rootpy: 0.8.0 DOI: 10.5281/zenodo.18897
[28] Dawe N, Ongmongkolkul P and Stark G 2017 The Journal of Open Source Software 2
[29] Kingma D P and Ba J 2014 (Preprint cs.LG/1412.6980)
[30] Ganin Y et al. 2015 (Preprint stat.ML/1505.07818)

