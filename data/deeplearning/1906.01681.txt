9
1
0
2

n
u
J

4

]

G
L
.
s
c
[

1
v
1
8
6
1
0
.
6
0
9
1
:
v
i
X
r
a

Learning dynamic polynomial proofs

Alhussein Fawzi
DeepMind
afawzi@google.com

Mateusz Malinowski
DeepMind
mateuszm@google.com

Hamza Fawzi
University of Cambridge
hf323@cam.ac.uk

Omar Fawzi
ENS Lyon
omar.fawzi@ens-lyon.fr

Abstract

Polynomial inequalities lie at the heart of many mathematical disciplines. In this
paper, we consider the fundamental computational task of automatically searching
for proofs of polynomial inequalities. We adopt the framework of semi-algebraic
proof systems that manipulate polynomial inequalities via elementary inference
rules that infer new inequalities from the premises. These proof systems are known
to be very powerful, but searching for proofs remains a major difﬁculty. In this
work, we introduce a machine learning based method to search for a dynamic
proof within these proof systems. We propose a deep reinforcement learning
framework that learns an embedding of the polynomials and guides the choice of
inference rules, taking the inherent symmetries of the problem as an inductive bias.
We compare our approach with powerful and widely-studied linear programming
hierarchies based on static proof systems, and show that our method reduces the
size of the linear program by several orders of magnitude while also improving
performance. These results hence pave the way towards augmenting powerful and
well-studied semi-algebraic proof systems with machine learning guiding strategies
for enhancing the expressivity of such proof systems.

1

Introduction

Polynomial inequalities abound in mathematics and its applications. Many questions in the areas
of control theory [Par00], robotics [MAT13], geometry [PP04], combinatorics [Lov79], program
veriﬁcation [MFK+16] can be modeled using polynomial inequalities. For example, deciding the
stability of a control system can be reduced to proving the nonnegativity of a polynomial [PP02].
Producing proofs of polynomial inequalities is thus of paramount importance for these applications,
and has been a very active ﬁeld of research [Las15].

To produce such proofs, we rely on semi-algebraic proof systems, which deﬁne a framework for
manipulating polynomial inequalities. These proof systems deﬁne inference rules that generate new
polynomial inequalities from existing ones. For example, inference rules can state that the product
and sum of two non-negative polynomials is non-negative. Given a polynomial f (x), a proof of
global non-negativity of f consists of a sequence of applications of the inference rules, starting from
a set of axioms, until we reach the target statement. Finding such a path is in general a very complex
task. To overcome this, a very popular approach in polynomial optimization is to use hierarchies
that are based on static proof systems, whereby inference rules are unrolled for a ﬁxed number of
steps, and convex optimization is leveraged for the proof search. Despite the great success of such
methods in computer science and polynomial optimization [Lau03, CT12], this approach however
can suffer from a lack of expressivity for lower levels of the hierarchy, and a curse of dimensionality
at higher levels of the hierarchy. Moreover, such static proofs signiﬁcantly depart from our common

Preprint. Under review.

 
 
 
 
 
 
conception of the proof search process, which is inherently sequential. This makes static proofs
difﬁcult to interpret.

In this paper, we use machine learning to guide the search of a dynamic proof of polynomial
inequalities. We believe this is the ﬁrst attempt to use machine learning to search for semi-algebraic
proofs. Speciﬁcally, we list our main contributions as follows:

• We propose a novel neural network architecture to handle polynomial inequalities with built-in

support for the symmetries of the problem.

• Leveraging the proposed architecture, we train a prover agent with DQN [MKS+13] in an
unsupervised environment; i.e., without having access to any existing proof or ground truth
information.

• We illustrate our results on the maximum stable set problem, a well known combinatorial problem
that is intractable in general. Using a well-known semi-algebraic proof system [LS91, SA90],
we show that our dynamic prover signiﬁcantly outperforms the corresponding static, unrolled,
method.

Related works. Semi-algebraic proof systems have been studied by various communities e.g., in real
algebraic geometry, global optimization, and in theoretical computer science. Completeness results
for these proof systems have been obtained in real algebraic geometry, e.g., [Kri64, Ste74]. In global
optimization, such proof systems have led to the development of very successful convex relaxations
based on static hierarchies [Par00, Las01, Lau03]. In theoretical computer science, static hierarchies
have become a standard tool for algorithm design [BS14], often leading to optimal performance.
Grigoriev et al. [GHP02] studied the proof complexity of various problems using different semi-
algebraic proof systems. This fundamental work has shown that problems admitting proofs of very
large static degree can admit a compact dynamic proof. While most previous works has focused on
understanding the power of bounded-degree static proofs, there has been very little work on devising
strategies to search for dynamic proofs, and our work is a ﬁrst step in this direction.
Recent works have also studied machine learning strategies for automated theorem proving [BLR+19,
HDSS18, KUMO18]. Most such works build on existing theorem provers (assuming the existence of
low-level pre-deﬁned tactics) and seek to improve the choice of these tactics. In contrast, our work
does not rely on existing theorem provers and instead uses elementary inference rules in the context
of semi-algebraic systems. We see these two lines of works as complementary, as building improved
provers for polynomial inequalities can provide a crucial tactic that integrates into general ATP
systems. We ﬁnally note that prior works have applied neural networks to combinatorial optimization
problems [BLP18], such as the satisﬁability problem [SLB+18]. While such techniques seek to
show the existence of good-quality feasible points (e.g., a satisfying assignment), we emphasize
that we focus here on proving statements for all values in a set (e.g., showing the nonexistence of
any satisfying assignment) – i.e., ∃ vs ∀. Finally, we note that the class of polynomial optimization
contains combinatorial optimization problems as a special case.
Notations. We let R[x] denote the ring of multivariate polynomials in x = (x1, . . . , xn). For
α ∈ Nn and x = (x1, . . . , xn), we let xα = xα1
n . The degree of a monomial xα is
|α| = (cid:80)n
i=1 αi. The degree of any polynomial in R[x] is the largest degree of any of its monomials.
For n ∈ N, we use [n] to denote the set {1, . . . , n}. We use | · | to denote the cardinality of a ﬁnite set.

1 · · · xαn

2 Problem modeling using polynomials

To illustrate the scope of this paper, we review the connection between optimization problems and
proving the non-negativity of polynomials. We also describe the example of the stable set problem,
which we will use as a running example throughout the paper.

Polynomial optimization. A general polynomial optimization problem takes the form

maximize

f (x)

subject to

x ∈ S.

(1)

where f (x) is a polynomial and S is a semi-algebraic set deﬁned using polynomial equations and
inequalities S = {x ∈ Rn : gi(x) ≥ 0, hj(x) = 0 ∀i, j}, where gi, hj are arbitrary polynomials.
Such problem subsumes many optimization problems as a special case. For example using the
polynomial equality constraints x2
i = xi restricts xi to be an integer in {0, 1}. As such, integer

2

programming is a special case of (1). Problem (1) can also model many other optimization problems
that arise in theory and practice, see e.g., [Las15].

Optimization and inequalities. In this paper we are interested in proving upper bounds on the
optimal value of (1). Proving an upper bound of γ on the optimal value of (1) amounts to proving
that

∀x ∈ S,

γ − f (x) ≥ 0.

(2)

We are looking at proving such inequalities using semi-algebraic proof systems. Therefore, developing
tractable approaches to proving nonnegativity of polynomials on semialgebraic sets has important
consequences on polynomial optimization.
Remark 1. We note that proving an upper bound on the value of (1) is more challenging than
proving a lower bound. Indeed, to prove a lower bound on the value of the maximization problem (1)
one only needs to exhibit a feasible point x0 ∈ S; such a feasible point implies that the optimal value
is ≥ f (x0). In contrast, to prove an upper bound we need to prove a polynomial inequality, valid for
all x ∈ S (notice the ∀ quantiﬁer in (2)).

Stable sets in graphs. We now give an example of a well-known combinatorial optimization problem,
and explain how it can be modeled using polynomials. Let G = (V, E) denote a graph of n = |V |
nodes. A stable set S in G is a subset of the vertices of G such that for every two vertices in S, there
is no edge connecting the two. The stable set problem is the problem of ﬁnding a stable set with
largest cardinality in a given graph. This problem can be formulated as a polynomial optimization
problem as follows:

maximize
x∈Rn

(cid:80)n

i=1 xi

subject to xixj = 0 for all (i, j) ∈ E,

(3)

x2
i = xi for all i ∈ {1, . . . , n}.
i = xi is equivalent to xi ∈ {0, 1}. The variable x ∈ Rn is interpreted as the
The constraint x2
characteristic function of S: xi = 1 if and only if vertex i belongs to the stable set S. The cardinality
of S is measured by (cid:80)n
i=1 xi, and the constraint xixj = 0 for ij ∈ E disallows having two nodes in S
that are connected by an edge. Finding a stable set of largest size is a classical NP-hard problem, with
many diverse applications [Lov79, Sch03]. As explained earlier for general polynomial optimization
problems, showing that there is no stable set of size larger than γ corresponds to showing that
γ − (cid:80)n

i=1 xi ≥ 0 for all x verifying the constraints of (3).

3 Static and dynamic semi-algebraic proofs

A semi-algebraic proof system is deﬁned by elementary inference rules, which produce non-negative
polynomials. Speciﬁcally, a proof consists in applying these inference rules starting from a set of
axioms gi(x) ≥ 0, hj(x) = 0 until we reach a desired inequality p ≥ 0.1
In this paper, we will focus on proving polynomial inequalities valid on the hypercube [0, 1]n =
{x ∈ Rn : 0 ≤ xi ≤ 1, ∀i = 1, . . . , n}. As such, we consider the following inference rules, which
appear in the so-called Lovász-Schrijver (LS) proof system [LS91] as well as in the Sherali-Adams
framework [SA90]:

g ≥ 0
xig ≥ 0

g ≥ 0
(1 − xi)g ≥ 0

gi ≥ 0
i λigi ≥ 0, ∀λi ≥ 0

(cid:80)

,

(4)

where A
B denotes that A implies B. The proof of a statement (i.e., non-negativity of a polynomial
p) consists in the composition of these elementary inference rules, which exactly yields the desired
polynomial p. Starting from the axiom 1 ≥ 0, the composition of inference rules in Eq. (4) yields
functions of the form (cid:80)
α,β λα,βxα(1−x)β, where α = (α1, . . . , αn) ∈ Nn and β = (β1, . . . , βn) ∈
Nn are tuples of length n, and λα,β are non-negative coefﬁcients. It is clear that all polynomials
of this form are non-negative for all x ∈ [0, 1]n, as they consist in a composition of the inference
rules (4). As such, writing a polynomial p in this form gives a proof of non-negativity of p on the
hypercube. The following theorem shows that such a proof always exists provided we assume p(x) is

1In the setting discussed in Section 2, the desired inequality is p = γ − f ≥ 0, where f is the objective

function of the optimization problem in (1).

3

strictly positive for all x ∈ [0, 1]n. In words, this shows that the set of inference rules (4) forms a
complete proof system2:
Theorem 1 ([Kri64] Positivstellensatz). Assume p is a polynomial such that p(x) > 0 for all
x ∈ [0, 1]n. Then there exists an integer l, and nonnegative scalars λα,β ≥ 0 such that

p(x) =

(cid:88)

λα,βxα(1 − x)β.

|α|+|β|≤l

(5)

Static proofs. Theorem 1 suggests the following approach to
proving non-negativity of a polynomial p(x): ﬁx an integer l
and search for non-negative coefﬁcients λα,β (for |α|+|β| ≤ l)
such that (5) holds. This static proof technique is one of the
most widely used approaches for ﬁnding proofs of polynomial
inequalities, as it naturally translates to solving a convex op-
timization problem [Lau03]. In fact, (5) is a linear condition
in the unknowns λα,β, as the functional equality of two poly-
nomials is equivalent to the equality of the coefﬁcients of each
monomial. Thus, ﬁnding such coefﬁcients is a linear program
where the number of variables is equal to the number of tuples
(α, β) ∈ Nn × Nn such that |α| + |β| ≤ l, i.e., of order Θ(nl)
for l constant. The collection of these linear programs gives
a hierarchy, indexed by l ∈ N, for proving non-negativity
of polynomials. Theorem 1 shows that as long as p > 0 on
[0, 1]n there exists l such that p can be proved nonnegative by
the l’th level of the hierarchy. However, we do not know a
priori the value of l. In fact this value of l can be much larger
than the degree of the polynomial p. In other words, in order
to prove the non-negativity of a low-degree polynomial p, one
may need to manipulate high-degree polynomial expressions
and leverage cancellations in the right-hand side of (5) – see
illustration below for an example.

Figure 1: Illustration of a dynamic
vs. static proof. Each concentric cir-
cle depicts the set of polynomials
that can be proved non-negative by
the l’th level of the hierarchy. The
wiggly area is the set of polynomi-
als of degree e.g., 1. A dynamic
proof (black arrows) of p ≥ 0 seeks
an (adaptive) sequence of inference
rules that goes from the initial set of
axioms (dots in L0) to target p.

Dynamic proofs. For large values of l, the linear program associated to the l’th level of the hierarchy
is prohibitively large to solve. To remedy this, we propose to search for dynamic proofs of non-
negativity. This technique relies on proving intermediate lemmas in a sequential way, as a way to
ﬁnd a concise proof of the desired objective. Crucially, the choice of the intermediate lemmas is
strongly problem-dependent – it depends on the target polynomial p, in addition to the axioms and
previously derived lemmas. This is in stark contrast with the static approach, where hierarchies
are problem-independent (e.g., they are obtained by limiting the degree of proof generators, the
xα(1 − x)β in our case). In spite of the beneﬁts of a dynamic proof system, searching for these
proofs is a challenging problem on its own, where one has to decide on inference rules applied at
each step of the proof. Finally, we also believe such a dynamic proving approach is more aligned
with human reasoning, which is also a sequential process where intuition plays an important role in
deriving new lemmas by applying suitable inference rules that lead to interpretable proofs.

Illustration. To illustrate the difference between the static and dynamic proof systems, consider
the stable set problem in Sect. 2 on the complete graph on n nodes, where each pair of nodes is
connected. It is clear that the maximal stable set has size 1; this can be formulated as follows:3






x2
i = xi, i = 1, . . . , n
xixj = 0, ∀i (cid:54)= j
xi ≥ 0, 1 − xi ≥ 0, i = 1, . . . , n
In the static framework, we seek to express the polynomial 1 − (cid:80)n
equalities xixj = 0. One can verify that
i=1 xi = (cid:81)n
1 − (cid:80)n

i=1(1 − xi)

⇒ 1 −

mod

n
(cid:88)

i=1

xi ≥ 0.

(6)

i=1 xi as in (5), modulo the

(xixj = 0, ∀i (cid:54)= j).

(7)

2The result is only true for strictly positive polynomials. More precisely, the proof system in (4) is only

refutationally complete.

3Note that redundant inequalities xi ≥ 0 and 1 − xi ≥ 0 have been added for sake of clarity in what follows.

4

L2L1L0The proof in Equation (7) is a static proof of degree n because it involves the degree n product
(cid:81)n
i=1(1 − xi). This means that the proof (7) will only be found at level n of the static hierarchy,
which is a linear program of size exponential in n. One can further show that it is necessary to go to
level at least n to ﬁnd a proof of (6) (cf. Supp. Mat).

In contrast, one can provide a dynamic proof of the above where the degree of any intermediate
lemma is at most two. To see why, it sufﬁces to multiply the polynomials 1 − xi sequentially, each
time eliminating the degree-two terms using the equalities xixj = 0 for i (cid:54)= j. The dynamic proof
proceeds as follows (note that no polynomial of degree greater than two is ever formed).

1 − x1 ≥ 0

multiply by
1 − x2 ≥ 0
−−−−−−−→ (1 − x1)(1 − x2) ≥ 0
multiply by
1 − x3 ≥ 0
−−−−−−−→ (1 − x1 − x2)(1 − x3) ≥ 0

reduce using
x1x2 = 0
−−−−−−→ 1 − x1 − x2 ≥ 0

reduce using
x1x3 = x2x3 = 0
−−−−−−−−−−→ 1 − x1 − x2 − x3 ≥ 0

...

multiply by
1 − xn ≥ 0
−−−−−−−→ (1 − x1 − . . . − xn−1)(1 − xn) ≥ 0

reduce using
xixn = 0 for i < n
−−−−−−−−−−−→ 1 − x1 − . . . − xn ≥ 0.

4 Learning dynamic proofs of polynomials

4.1 Reinforcement learning framework for semi-algebraic proof search

We model the task of ﬁnding dynamic proofs as an interaction between the agent and an environment,
formalized as a Markov Decision Process (MDP), resulting in a sequence of states, actions and
observed rewards. The agent state st at time step t is deﬁned through the triplet (f, Mt, Et), where:

• Mt denotes the memory at t; i.e., the set of polynomials that are known to be non-negative at t.
This contains the set of polynomials that are assumed to be non-negative (i.e., axioms gi), as well
as intermediate steps (i.e., lemmas), which are derived from the axioms through inference rules,

• Et denotes the set of equalities; i.e., the set of polynomials identically equal to zero,
• f denotes the objective polynomial to bound (cf Section 2).

At each time t, the agent selects an action at from a set of legal actions At, obtained by applying
one or more inference rules in Eq. (4) to elements in Mt.4 Observe that since elements in Mt are
non-negative, the polynomials in At are also non-negative. The selected action at ∈ At is then
appended to the memory Mt+1 at the next time step. After selecting at, a reward rt is observed,
indicating how close the agent is to ﬁnding the proof of the statement, with higher rewards indicating
that the agent is “closer” to ﬁnding a proof – see Sect. 4.2 for more details.
The goal of the agent is to select actions that maximize future returns Rt = E[(cid:80)T
t(cid:48)=t γt(cid:48)−trt(cid:48)], where
T indicates the length of an episode, and γ is the discount factor. We use a deep reinforcement
learning algorithm where the action-value function is modeled using a deep neural network qθ(s, a).
Speciﬁcally, the neural network takes as input a state-action pair, and outputs an estimate of the return;
we use the DQN [MKS+13] algorithm for training, which leverages a replay memory buffer for
increased stability [Lin92]. We refer to [MKS+13, Algorithm 1] for more details about this approach.

Note that in contrast to many RL scenarios, the action space here grows with t, as larger memories
mean that more lemmas can be derived. The large action space makes the task of ﬁnding a dynamic
proof particularly challenging; we therefore rely on dense rewards (Sect. 4.2) and specialized
architectures (Sect. 4.3) for tackling this problem.

4.2 Reward signal

We now describe the reward signal rt. One potential choice is to assign a positive reward (rt > 0)
when the objective γ∗ ≥ f is reached (where γ∗ is the optimal bound) and zero otherwise. However,
this suffers from two important problems: 1) the reward is sparse, which makes learning difﬁcult,
2) this requires the knowledge of the optimal bound γ∗. Here, we rely instead on a dense, and

4In practice, we limit ourselves to the ﬁrst two inference rules (i.e., multiplication by xi and 1 − xi), and ﬁnd
linear combinations using the LP strategy described in Section 4.2. This yields action spaces At of size 2n|Mt|.

5

unsupervised reward scheme. Speciﬁcally, at each step t, we solve the following linear program:

min
γt,{λ}

γt

subject to γt − f =

|Mt|
(cid:88)

i=1

λimi, λ ≥ 0,

(8)

where {mi} denote the polynomials in Mt. Note that the constraint in Eq. (8) is a functional equality
of two polynomials, which is equivalent to the equality of the coefﬁcients of the polynomials. In
words, Eq. (8) computes the optimal upper bound γt on f that can be derived through a non-negative
linear combination of elements in the memory; in fact, since (cid:80)|Mt|
i=1 λimi is non-negative, we have
f ≤ γt. Crucially, the computation of the bound in Eq. (8) can be done very efﬁciently, as Mt is
kept of small size in practice (e.g., |Mt| ≤ 200 in the experiments).

Then, we compute the reward as the relative improvement of the bound: rt = γt+1 − γt, where
rt is the reward observed after taking action at. Note that positive reward is observed only when
the chosen action at leads to an improvement of the current bound. We emphasize that this reward
attribution scheme alleviates the need for any supervision during our training procedure; speciﬁcally,
the agent does not require human proofs or even estimates of bounds for training.

4.3 Q-network with symmetries

The basic objects we manipulate are polynomials and sets of polynomials, which impose natural
symmetry requirements. We now describe how we build in symmetries in our Q-network qθ.

Our Q-network qθ, takes as input the state st = (f, Mt, Et), as well as the action polynomial at.
We represent polynomials as vectors of coefﬁcients of size N , where N is the number of possible
monomials. While sets of polynomials (e.g., Mt) can be encoded with a matrix of size c × N , where
c denotes the cardinality of the set, such an encoding does not take into account the orderless nature
of sets. We, therefore, impose our Q-value function to be invariant to the order of enumeration of
elements in M, and E; that is, we require that the following hold for any permutations π and χ:

Symmetry I (orderless sets).

(cid:16)

qθ

{mi}|Mt|

i=1 , {ej}|Et|

j=1, f, a

(cid:17)

(cid:16)

= qθ

{mπ(i)}|Mt|

i=1 , {eχ(j)}|Et|

j=1, f, a

(cid:17)

.

To satisfy the above symmetry, we consider value functions of the form:

(cid:16)

qθ

{mi}|Mt|

i=1 , {ej}|Et|

j=1, f, a

(cid:17)

= ζθ(3) (σ(V ), σ(W )) ,

i=1 , W = {vθ(2)(ej, f, a)}|Et|

where V = {vθ(1)(mi, f, a)}|Mt|
j=1, vθ(1) and vθ(2) are trainable neural net-
works with additional symmetry constraints (see below), σ is a symmetric function of the arguments
(e.g., max, sum), and ζθ(3) is a trainable neural network.
In addition to the above symmetry, vθ has to be well chosen in order to guarantee invariance under
relabeling of variables (that is, xi → xπ(i) for any permutation π). In fact, the variable names do
not have any speciﬁc meaning per se; relabeling all polynomials in the same way results in the exact
same problem. We therefore require that the following constraint is satisﬁed for any permutation π:

Symmetry II (variable relabeling).

vθ(m, f, a) = vθ(πm, πf, πa),

(9)

where πm indicates a permutation of the variables in m using π. For example, if π is such that
π(1) = 2, π(2) = 3 and π(3) = 1, and m = x1 + 2x1x3 then πm = x2 + 2x1x2. Note that in the
above constraint, the same permutation π is acting on m, f and a.
We now describe how we impose this symmetry. Given two triplets of monomials (xα1 , xα2, xα3)
and (xβ1, xβ2, xβ3 ), we say that these two triplets are equivalent (denoted by the symbol ∼) iff
there exists a permutation π such that βi = π(αi) for i = 1, 2, 3. For example, (x1x2, x2
2, x2x3) ∼
(x1x3, x2
3, x2x3). The equivalence class [(xα1 , xα2, xα3)] regroups all triplets of monomials that
are equivalent to (xα1 , xα2, xα3). We denote by E the set of all such equivalence classes. Our ﬁrst
step to construct vθ consists in mapping the triplet (m, f, a) to a feature vector which respects the
variable relabeling symmetry. To do so, let m, f, a be polynomials in R[x]; we consider a feature
function that is trilinear in (m, f, a); that is, it is linear in each argument m, f and a. For such a
function, T : R[x] × R[x] × R[x] → Rs (where s denotes the feature size), we have: T (m, f, a) =
(cid:80)
), then we set T (xα, xβ, xγ) =

α,β,γ mαfβaγT (xα, xβ, xγ). If (xα, xβ, xγ) ∼ (xα(cid:48)

, xβ(cid:48)

, xγ(cid:48)

6

Figure 2: Structure of Q-network. {mi} denotes the set of axioms and lemmas, a denotes the action,
f is the objective function, and ej denotes the set of equality polynomials.

n

15
20
25
30
35
40
45
50

Dyn.
(deg. 2)

3.43
3.96
4.64
5.44
6.37
7.23
8.14
8.89

Static hierarchy
l = 4
l = 3

l = 5

5.01
6.67
8.33
10.0
11.67
13.33
15.0
16.67

3.94
5.04
6.26
7.50
8.75
10.0
11.25
12.50

3.48
4.32
5.08
6.03
7.02
8.00
9.00
10.0

l = 2

7.50
10.0
12.50
15.0
17.5
20.0
22.5
25.0

Random

Size of LP

Dyn.

130
140
150
160
170
180
190
200

Static l = 5
5.9 × 103
2.6 × 104
7.6 × 104
1.9 × 105
4.2 × 105
8.3 × 105
1.5 × 106
2.6 × 106

5.91
8.91
12.7
15.6
19.6
23.5
28.1
31.6

Table 1: Evaluation of different methods on 100 randomly sampled problems on the maximal stable
set problem. For each method, the average estimated bound is displayed (lower values correspond to
better – i.e., tighter – bounds). Moreover, the average size of the linear program in which the proof is
sought is reported in the last two columns. The proof size is limited to 100 for the dynamic proof,
leading to an LP of size 100 + 2n, as the problem has 2n inequality axioms (xi ≥ 0, 1 − xi ≥ 0).
Note that the static linear program at level l cannot give a bound smaller than n/l; we prove this
result in Theorem 1 in Supp. Mat.

, xγ(cid:48)

, xβ(cid:48)

T (xα(cid:48)
). In other words, the function T has to be constant on each equivalence class. Such
a T will satisfy our symmetry constraint that T (m, f, a) = T (πm, πf, πa) for any permutation π.
For example, the above equality constrains T (1, x1, x1) = T (1, xi, xi) for all i since (1, x1, x1) ∼
(1, xi, xi), and T (x1, x2, x3) = T (xi, xj, xk) for i (cid:54)= j (cid:54)= k as (x1, x2, x3) ∼ (xi, xj, xk). Note,
however, that T (1, x1, x1) (cid:54)= T (1, xi, xj) for i (cid:54)= j; in fact, (1, x1, x1) (cid:54)∼ (1, xi, xj). Finally, we set
vθ = uθ ◦ T where uθ is a trainable neural network. Fig. 2 summarizes the architecture we use for the
Q-network. We refer to Supp. Mat. for more details about architectures and practical implementation.

5 Experimental results

We illustrate our dynamic proving approach on the stable set problem described in Section 2. This
problem has been extensively studied in the polynomial optimization literature [Lau03]. We evaluate
our method against standard linear programming hierarchies considered in this ﬁeld. The largest
stable set in a graph G is denoted α(G).

Training setup. We train our prover on randomly generated graphs of size n = 25, where an edge
between nodes i and j is created with probability p ∈ [0.5, 1]. We seek dynamic proofs using the
proof system in Eq. (4), starting from the axioms {xi ≥ 0, 1 − xi ≥ 0, i = 1, . . . , n} and the
polynomial equalities xixj = 0 for all edges ij in the graph and x2
i = xi for all nodes i. We
restrict the number of steps in the dynamic proof to be at most 100 steps and limit the degree of any
intermediate lemma to 2. We note that our training procedure is unsupervised and does not require
prior proofs, or knowledge of α(G) for learning. We use the DQN approach presented in Sect. 4 and
provide additional details about hyperparameters and architecture choices in the Supp. Mat.

7

Mapping TMaxMaxTrainable neural networksTrainable neural networkCombination of equality and memoryfeattures’Proof that 3 − (cid:80)7

i=1 xi ≥ 0:

[Step 0] 0 <= -x2 - x3 + 1 = (-x3 + 1) * (-x2 + 1)
[Step 1] 0 <= -x5 - x6 + 1 = (-x6 + 1) * (-x5 + 1)
[Step 2] 0 <= -x4 - x5 + 1 = (-x4 + 1) * (-x5 + 1)
[Step 3] 0 <= -x1 - x7 + 1 = (-x7 + 1) * (-x1 + 1)
[Step 4] 0 <= -x1 - x2 + 1 = (-x1 + 1) * (-x2 + 1)
[Step 5] 0 <= -x2*x4 - x2*x5 + x2 = [Step 2] * (x2)
[Step 6] 0 <= x1*x5 - x1 + x2*x5 - x2 - x5 + 1 = [Step 4] * (-x5 + 1)
[Step 7] 0 <= x5*x7 - x5 - x6 - x7 + 1 = [Step 1] * (-x7 + 1)
[Step 8] 0 <= x2*x4 - x2 - x3 - x4 + 1 = [Step 0] * (-x4 + 1)
[Step 9] 0 <= -x1*x5 - x5*x7 + x5 = [Step 3] * (x5)
0 <= 1 * [Step 5] + 1 * [Step 7] + 1 * [Step 8]
+ 1 * [Step 9] + 1 * [Step 6] = 3 − (cid:80)7
i=1 xi.

Table 2: An example of proof generated by our agent. Axioms are shown in blue, and derived
polynomials (i.e., intermediate lemmas) are shown in red. Note that coefﬁcients in the proof are all
rational, leading to an exact and fully veriﬁable proof. See more examples of proofs in the Supp. Mat.

We compare our approach to the following static hierarchy of linear programs indexed by l:

min. γ s.t.

γ −

n
(cid:88)

i=1

(cid:88)

xi =

|α|+|β|≤l

λα,βxα(1 − x)β mod

(cid:18) xixj = 0, ij ∈ E
x2
i = xi, i ∈ V

(cid:19)

.

(10)

This hierarchy corresponds to the level l of the Sherali-Adams hierarchy applied to the maximum
stable set problem [LS14, Section 4], which is one of the most widely studied hierarchies for
combinatorial optimization [Lau03]. Observe that the linear program (10) has Θ(nl) variables and
constraints for l constant. By completeness of the hierarchy, we know that solving the linear program
(10) at level l = n yields the exact value α(G) of the maximum stable set.

Results. Table 1 shows the results of the proposed dynamic prover on a test set consisting of random
graphs of different sizes.5 We compare the value obtained by the dynamic prover with a random
prover taking random legal actions (from the considered proof system), as well as with the Sherali-
Adams hierarchy (10). The reported values correspond to an average over a set of 100 randomly
generated graphs. We note that for all methods, bounds are accompanied with a formal, veriﬁable,
proof, and are hence correct by deﬁnition.

Our dynamic polynomial prover is able to prove an upper bound on α(G) that is better than the one
obtained by the Sherali-Adams hierarchy with a linear program that is smaller by several orders of
magnitude. For example on graphs of 50 nodes, the Sherali-Adams linear program at level l = 5 has
more than two million variables, and gives an upper bound on α(G) that is worse than our approach
which only uses a linear program of size 200. This highlights the huge beneﬁts that dynamic proofs
can offer, in comparison to hierarchy-based static approaches. We also see that our agent is able to
learn useful strategies for proving polynomial inequalities, as it signiﬁcantly outperforms the random
agent. We emphasize that while the proposed agent is only trained on graphs of size n = 25, it still
outperforms all other methods for larger values of n showing good out-of-distribution generalization.
Note ﬁnally that the proposed architecture which incorporates symmetries (as described in Sect. 4.3)
signiﬁcantly outperforms other generic architectures, as shown in the Supp. Mat.

Table 3 provides an example of a proof produced by our automatic prover, showing that the largest
stable set in the cycle graph on 7 nodes is at most 3. Despite the symmetric nature of the graph
(unlike random graphs in the training set), our proposed approach leads to human interpretable, and
relatively concise proofs. In contrast, the static approach involves searching for a proof in a very
large algebraic set.

6 Conclusion

Existing hierarchies for polynomial optimization currently rely on a static viewpoint of algebraic
proofs and leverage the convexity of the search problem. We propose here a new approach for
searching for a dynamic proof using machine learning based strategies. The framework we propose
for proving inequalities on polynomials leads to more natural, interpretable proofs, and signiﬁcantly

5Despite training the network on graphs of ﬁxed size, we can test it on graphs of any size, as the embedding

dimension is independent of n. In fact, it is equal to the number of equivalence classes |E |.

8

1234567outperforms static proof techniques. We believe that augmenting polynomial systems with ML-
guided dynamic proofs will have signiﬁcant impact in application areas such as control theory,
robotics, veriﬁcation, where many problems can be cast as proving polynomial inequalities. One very
promising avenue for future research is to extend our dynamic proof search method to other more
powerful semi-algebraic proof systems; e.g., based on semi-deﬁnite programming.

References

[BS14]

[BLP18]

Yoshua Bengio, Andrea Lodi, and Antoine Prouvost. Machine learning for combinatorial
optimization: a methodological tour d’horizon. arXiv preprint arXiv:1811.06128, 2018.
[BLR+19] Kshitij Bansal, Sarah M Loos, Markus N Rabe, Christian Szegedy, and Stewart Wilcox.
HOList: An environment for machine learning of higher-order theorem proving (ex-
tended version). arXiv preprint arXiv:1904.03241, 2019.
Boaz Barak and David Steurer. Sum-of-squares proofs and the quest toward optimal
algorithms. In Proceedings of International Congress of Mathematicians (ICM), 2014.
Eden Chlamtac and Madhur Tulsiani. Convex relaxations and integrality gaps. In
Handbook on semideﬁnite, conic and polynomial optimization, pages 139–169. Springer,
2012.
Dima Grigoriev, Edward A Hirsch, and Dmitrii V Pasechnik. Complexity of semi-
algebraic proofs. In Annual Symposium on Theoretical Aspects of Computer Science,
pages 419–430. Springer, 2002.

[GHP02]

[CT12]

[HDSS18] Daniel Huang, Prafulla Dhariwal, Dawn Song, and Ilya Sutskever. Gamepad: A learning
environment for theorem proving. arXiv preprint arXiv:1806.00608, 2018.
Jean-Louis Krivine. Quelques propriétés des préordres dans les anneaux commutatifs
unitaires. Comptes Rendus Hebdomadaires des Seances de l’Academie des Sciences,
258(13):3417, 1964.

[Kri64]

[Las01]

[Las15]

[Lau03]

[KUMO18] Cezary Kaliszyk, Josef Urban, Henryk Michalewski, and Miroslav Olšák. Reinforcement
learning of theorem proving. In Advances in Neural Information Processing Systems,
pages 8822–8833, 2018.
Jean B Lasserre. Global optimization with polynomials and the problem of moments.
SIAM Journal on Optimization, 11(3):796–817, 2001.
Jean B Lasserre. An introduction to polynomial and semi-algebraic optimization,
volume 52. Cambridge University Press, 2015.
Monique Laurent. A comparison of the Sherali-Adams, Lovász-Schrijver, and Lasserre
relaxations for 0–1 programming. Mathematics of Operations Research, 28(3):470–496,
2003.
Long-Ji Lin. Self-improving reactive agents based on reinforcement learning, planning
and teaching. Machine learning, 8(3-4):293–321, 1992.
László Lovász. On the Shannon capacity of a graph. IEEE Transactions on Information
theory, 25(1):1–7, 1979.
László Lovász and Alexander Schrijver. Cones of matrices and set-functions and 0–1
optimization. SIAM journal on optimization, 1(2):166–190, 1991.
Monique Laurent and Zhao Sun. Handelman’s hierarchy for the maximum stable set
problem. Journal of Global Optimization, 60(3):393–423, 2014.

[Lov79]

[Lin92]

[LS91]

[LS14]

[MAT13] Anirudha Majumdar, Amir Ali Ahmadi, and Russ Tedrake. Control design along
trajectories with sums of squares programming. In 2013 IEEE International Conference
on Robotics and Automation, pages 4054–4061. IEEE, 2013.

[MFK+16] Alexandre Maréchal, Alexis Fouilhé, Tim King, David Monniaux, and Michaël Périn.
Polyhedral approximation of multivariate polynomials using Handelman’s theorem. In
International Conference on Veriﬁcation, Model Checking, and Abstract Interpretation,
pages 166–184. Springer, 2016.

[MKS+13] Volodymyr Mnih, Koray Kavukcuoglu, David Silver, Alex Graves, Ioannis Antonoglou,
Daan Wierstra, and Martin Riedmiller. Playing atari with deep reinforcement learning.
arXiv preprint arXiv:1312.5602, 2013.

9

[Par00]

[PP02]

[PP04]

[SA90]

[SB18]
[Sch03]

Pablo A Parrilo. Structured semideﬁnite programs and semialgebraic geometry methods
in robustness and optimization. PhD thesis, California Institute of Technology, 2000.
Antonis Papachristodoulou and Stephen Prajna. On the construction of Lyapunov
functions using the sum of squares decomposition. In Proceedings of the 41st IEEE
Conference on Decision and Control, 2002., volume 3, pages 3482–3487. IEEE, 2002.
Pablo A Parrilo and Ronen Peretz. An inequality for circle packings proved by semidef-
inite programming. Discrete & Computational Geometry, 31(3):357–367, 2004.
Hanif D Sherali and Warren P Adams. A hierarchy of relaxations between the continuous
and convex hull representations for zero-one programming problems. SIAM Journal on
Discrete Mathematics, 3(3):411–430, 1990.
Richard S Sutton and Andrew G Barto. Reinforcement learning: An introduction. 2018.
Alexander Schrijver. Combinatorial optimization: polyhedra and efﬁciency, volume 24.
Springer Science & Business Media, 2003.

[SLB+18] Daniel Selsam, Matthew Lamm, Benedikt Bünz, Percy Liang, Leonardo de Moura,
and David L Dill. Learning a SAT solver from single-bit supervision. arXiv preprint
arXiv:1802.03685, 2018.
Gilbert Stengle. A nullstellensatz and a positivstellensatz in semialgebraic geometry.
Mathematische Annalen, 207(2):87–97, 1974.

[Ste74]

A Proofs

A.1 Static hierarchy for stable set.

We ﬁrst prove that the static proof on the stable set problem cannot achieve a better bound than n/l, a
result that is highlighted in the experimental section of the main paper.
Theorem 2. Let γl be the value of the linear program in Equation (10) of the main paper; that is,

γl = min. γ s.t.

γ −

n
(cid:88)

i=1

(cid:88)

xi =

|α+β|≤l

λα,βxα(1 − x)β mod

(cid:18) xixj = 0, ij ∈ E
x2
i = xi, i ∈ V

(cid:19)

. (11)

Then γl ≥ n/l.

Proof. Assume we have the expression

γ −

n
(cid:88)

i=1

xi =

(cid:88)

|α+β|≤l

λα,βxα(1 − x)β mod

(cid:18) xixj = 0, ij ∈ E
x2
i = xi, i ∈ V

(cid:19)

where the coefﬁcients λα,β are nonnegative. We will show that γ ≥ n/l.

• The constant coefﬁcient on the right-hand side of (12) is

(cid:88)

β

λ∅,β.

(12)

(13)

• For i ∈ {1, . . . , n}, the coefﬁcient of xi in the expression on the right-hand side of (12) is

(cid:88)

−

β:i∈β

λ∅,β +

(cid:88)

λi,β

β:i /∈β

(14)

The presence of the ﬁrst term is clear and comes from the fact that (1−x)β = 1−(cid:80)
(terms of degree at least two). For the second term in (14) note that

i∈β xi +

xi(1 − x)β = xi − xi

(cid:88)

j∈β

xj + (terms of degree at least 3)

(15)

If i ∈ β then the term xi on the RHS of (15) will be cancelled by x2
why in the second summation in (14) we have to take only the β’s such that i /∈ β.

i = xi. This explains

10

Equating coefﬁcients we see that we must have:

(cid:40)

γ = (cid:80)
1 = (cid:80)

|β|≤l λ∅,β
β:i∈β λ∅,β − (cid:80)
Since the coefﬁcients λα,β are nonnegative, the second line of (16) tells us that (cid:80)
all i ∈ {1, . . . , n}. We thus get that

∀i ∈ {1, . . . , n}.

β:i /∈β λi,β

(16)

β:i∈β λ∅,β ≥ 1 for

γ =

(cid:88)

|β|≤l

λ∅,β ≥

1
l

n
(cid:88)

(cid:88)

i=1

|β|≤l,i∈β

λ∅,β ≥

n
l

as desired.

Note that when applying Theorem 2 to the complete graph (for which α(G) = 1), we see that the nth
level of the hierarchy is necessary in order to obtain an optimal bound of 1.

B Implementation details

We now provide implementation details regarding the proposed prover.

B.1 Computing T

Our architecture relies on the computation of the trilinear mapping T , which maps triplets of
polynomials to feature vectors in Rs, where s denotes a user-speciﬁed feature size. Note that T can
be re-written as follows
T (m, f, a) =

mαfβaγT (xα, xβ, xγ)

(17)

(cid:88)

α,β,γ

(cid:88)

=

T (xα, xβ, xγ)

(cid:88)

mα(cid:48)fβ(cid:48)aγ(cid:48),

(18)

[(xα,xβ ,xγ )]∈E

(xα(cid:48) ,xβ(cid:48) ,xγ(cid:48) )∈[(xα,xβ ,xγ )]

where we used the property that T is the same for elements of the same equivalence class. We
represent the mapping T in practice with a matrix T of size s × |E | (with each column equal to
T (xα, xβ, xγ), for the different equivalence classes in E ). In practice, we compute the tensor product
m ⊗ f ⊗ a ∈ RN ×N ×N (where each polynomial m, f, a is represented as a vector of size the
number of monomials N ); Eq. (18) then corresponds to the matrix vector multiplication between the
matrix T and the vector z ∈ R|E |, where zi = (cid:80)
[m ⊗ f ⊗ a]α,β,γ, and ei denotes the i-th
equivalence class.

(α,β,γ)∈ei

B.2 Architecture details

(cid:17)

(cid:16)

qθ

j=1, f, a

i=1 , {ej}|Et|

= ζ (σ(V ), σ(W )) ,

We now describe in more detail the speciﬁcs of the architecture used for our Q-network. Recall from
Section 4 in the main paper that we consider a Q-network of the form
{mi}|Mt|
i=1 , W = {vθ(2)(ej, f, a)}|Et|

where V = {vθ(1)(mi, f, a)}|Mt|
j=1. To satisfy the re-labeling symmetry,
recall that we set vθ = uθ ◦ T . In practice, we set uθ(i) to be a two-layer fully connected neural
network with ReLU non-linearity. We set the size of the intermediate layers and output layer to
500. The σ operator is set to max. Moreover, the function ζ is built in two-steps; we ﬁrst take a
max operation to aggregate the features from equalities and memory elements (and hence obtain
a feature vector of size 500), followed by a two-layer fully connected neural network with ReLU
non-linearities. The size of the intermediate features is also set to 500, while the output of the neural
network is a scalar representing the q value. Note that we have experimented with larger feature
sizes/deeper networks, and we did not observe signiﬁcant improvements of this choice.

We illustrate in Fig. 3 the learning curves obtained with the proposed architecture, as well as a
baseline architecture which does not consider built-in symmetries for variable relabeling. Speciﬁcally,
the mapping T is replaced with a linear mapping of the vector resulting from the concatenation of the
input polynomials. We see that the proposed architecture leads to signiﬁcantly better bound compared
to the baseline vanilla architecture.

11

Figure 3: Learning curves showing the average estimated upper bound on a validation set vs.
number of enivronment steps. The learning curve of the proposed architecture (which incorporates
symmetries) is shown in blue. To show the importance of the built-in symmetries, we compare it
to a vanilla architecture (red), where T is chosen to be a standard linear mapping on the vector
of concatenated polynomials in the input (rather than the trilinear mapping described in Eq. (17)).
Illustration on the stable set problem with n = 20.

B.3 Leveraging the structure of the Q-network for faster training

For training the prover agent, we use the DQN algorithm in [MKS+13, Algorithm 1]. In Q-Learning,
the state-action value function needs to be computed for every action, as the (cid:15)-greedy strategy chooses
the action with largest q-value with probability 1 − (cid:15). To accelerate the computation of the q value
for all actions, we leverage the structure of our Q-network. Speciﬁcally, at time step t, we distinguish
between two classes of actions: 1) new actions, which are made possible due to the the newly derived
inequality at; e.g., atxi, or at(1 − xi) 2) old actions, which do not depend on the new element added
to the memory. While we do need to compute the q values for all new actions, observe that we can
re-use computations from previous time steps to speed up the computation of q(st+1, a) where a is
an old action. Speciﬁcally, we note that the only difference between st and st+1 is that at has been
added to the memory; that is, Mt+1 = Mt ∪ {at}. Hence, observe that

max
m∈Mt+1

vθ(1)(m, f, a) = max (Ft, vθ(1)(at, f, a)) ,

where Ft = maxm∈Mt(vθ(1)(m, f, a)). By caching Ft, we can therefore signiﬁcantly speed up the
computation of the q-value for old actions, which allows us to scale to larger problem instances. This
leads to signiﬁcant speed-ups in our setting where the number of actions is large; speciﬁcally, we
have |At| = 2n|Mt|.

B.4 Hyperparameters

We now describe the hyperparameters we use for learning our prover agent. We use RMSProp
optimizer with a learning rate 10−5, and train our model for 1e6 steps. We set the size of the replay
memory to 100, and the degree of any intermediate polynomial to 2. We use a batch size of 32,
discount factor of 0.99, (cid:15) = 0.1, an (cid:96)1 loss for the TD-error [SB18], and initialize the weights of the
network with one ﬁxed seed (0). The training is performed on a single GPU (NVIDIA V100).

C Complementary experimental results

Table 3 shows more examples of proofs. Fig. 4 shows a comparison between the dynamic and static
approaches in terms of the obtained bound and the size of the LP for 100 instances of random graphs
of size n = 50.

12

07k13k19k25k31k37k43kNumber of environment steps46810121416182022Upper Boundproposed architecturewithout symmetry IIFigure 4: Comparison of dynamic and static results on 100 problem instances of size n = 50 nodes.
A problem instance is represented by a point in the plane, where the y axis denotes the difference
between the static bound and the dynamic bound (i.e., γstatic − γdynamic), and the x axis represents the
number of proof generators involved in the LP. The dashed line represents the size of the LP when
using our dynamic approach (which is limited to 100, excluding the axioms). Note that static proofs
require a very large number of polynomials in the LP proof search. In contrast, our dynamic approach
allows to reach better results with 4 − 5 orders of magnitude less polynomials. This is despite training
our prover on graphs of signiﬁcantly smaller size (25 nodes).

13

102103104105106107#polynomials in LP proof search0510152025Static bound - Dynamic boundStatic LS (deg. 2)Static LS (deg. 3)Static LS (deg. 4)Static LS (deg. 5)Proof that 1 − (cid:80)7

i=1 xi ≥ 0:

[Step 0] 0 <= -x3 - x7 + 1 = (-x3 + 1) * (-x7 + 1)
[Step 1] 0 <= -x3 - x6 - x7 + 1 = [Step 0] * (-x6 + 1)
[Step 2] 0 <= -x3 - x4 - x6 - x7 + 1 = [Step 1] * (-x4 + 1)
[Step 3] 0 <= -x3 - x4 - x5 - x6 - x7 + 1 = [Step 2] * (-x5 + 1)
[Step 4] 0 <= -x2 - x3 - x4 - x5 - x6 - x7 + 1 = [Step 3] * (-x2 + 1)
[Step 5] 0 <= -x1 - x2 - x3 - x4 - x5 - x6 - x7 + 1 = [Step 4] * (-x1 + 1)
0 <= 1 * [Step 5] = 1 − (cid:80)7

i=1 xi.

Proof that 5 − (cid:80)10

i=1 xi ≥ 0:

[Step 0] 0 <= -x1 - x3 + 1 = (-x3 + 1) * (-x1 + 1)
[Step 1] 0 <= -x4 - x6 + 1 = (-x6 + 1) * (-x4 + 1)
[Step 2] 0 <= -x10 - x3 + 1 = (-x3 + 1) * (-x10 + 1)
[Step 3] 0 <= -x5 - x7 + 1 = (-x7 + 1) * (-x5 + 1)
[Step 4] 0 <= -x2 - x8 + 1 = (-x8 + 1) * (-x2 + 1)
[Step 5] 0 <= -x1 - x3 - x9 + 1 = [Step 0] * (-x9 + 1)
0 <= 1 * [Step 5] + 1 * (x3) + 1 * [Step 2]

+ 1 * [Step 4] + 1 * [Step 1] + 1 * [Step 3] = 5 − (cid:80)10

i=1 xi.

Proof that 4 − (cid:80)10

i=1 xi ≥ 0:

[Step 0] 0 <= -x6 - x8 + 1 = (-x6 + 1) * (-x8 + 1)
[Step 1] 0 <= -x6 - x9 + 1 = (-x6 + 1) * (-x9 + 1)
[Step 2] 0 <= -x4 - x9 + 1 = (-x9 + 1) * (-x4 + 1)
[Step 3] 0 <= -x10 - x7 + 1 = (-x10 + 1) * (-x7 + 1)
[Step 4] 0 <= -x2 - x3 + 1 = (-x3 + 1) * (-x2 + 1)
[Step 5] 0 <= -x4 - x5 + 1 = (-x4 + 1) * (-x5 + 1)
[Step 6] 0 <= x10*x9 - x10 - x7 - x9 + 1 = [Step 3] * (-x9 + 1)
[Step 7] 0 <= -x10 - x5 + 1 = (-x10 + 1) * (-x5 + 1)
[Step 8] 0 <= -x7 - x9 + 1 = (-x9 + 1) * (-x7 + 1)
[Step 9] 0 <= -x1 - x5 + 1 = (-x1 + 1) * (-x5 + 1)
[Step 10] 0 <= -x3 - x4 + 1 = (-x3 + 1) * (-x4 + 1)
[Step 11] 0 <= -x2 - x7 + 1 = (-x7 + 1) * (-x2 + 1)
[Step 12] 0 <= -x10 - x8 + 1 = (-x10 + 1) * (-x8 + 1)
[Step 13] 0 <= x3*x9 - x3 - x4 - x9 + 1 = [Step 2] * (-x3 + 1)
[Step 14] 0 <= x1*x3 - x1 - x2 - x3 + 1 = [Step 4] * (-x1 + 1)
[Step 15] 0 <= x4*x6 - x4 - x6 - x9 + 1 = [Step 1] * (-x4 + 1)
[Step 16] 0 <= -x6 + x8*x9 - x8 - x9 + 1 = [Step 0] * (-x9 + 1)
[Step 17] 0 <= x3*x5 - x3 - x4 - x5 + 1 = [Step 5] * (-x3 + 1)
[Step 18] 0 <= -x3 - x8 + 1 = (-x3 + 1)) * (-x8 + 1)
[Step 19] 0 <= x3*x7 + x3*x9 - x3 + x4*x7 - x4 - x7 - x9 + 1 = [Step 13] * (-x7 + 1)
[Step 20] 0 <= x10*x4 - x10 - x4 - x5 + 1 = [Step 5] * (-x10 + 1)
[Step 21] 0 <= -x10*x6 - x5*x6 + x6 = [Step 7] * (x6)
[Step 22] 0 <= x10*x9 - x10 + x5*x7 + x5*x9 - x5 - x7 - x9 + 1 = [Step 6] * (-x5 + 1)
[Step 23] 0 <= -x3*x7 - x7*x8 + x7 = [Step 18] * (x7)
[Step 24] 0 <= -x3*x7 - x3*x9 + x3 = [Step 8] * (x3)
[Step 25] 0 <= x4*x6 - x4 + x5*x6 + x5*x9 - x5 - x6 - x9 + 1 = [Step 15] * (-x5 + 1)
[Step 26] 0 <= -x1*x3 - x3*x5 + x3 = [Step 9] * (x3)
[Step 27] 0 <= x3*x6 + x3*x9 - x3 + x4*x6 - x4 - x6 - x9 + 1 = [Step 13] * (-x6 + 1)
[Step 28] 0 <= x3*x6 + x3*x9 - x3 - x6 + x8*x9 - x8 - x9 + 1 = [Step 16] * (-x3 + 1)
[Step 29] 0 <= x3*x6 - x3 - x6 - x8 + 1 = [Step 0] * (-x3 + 1)
[Step 30] 0 <= x1*x4 - x1 - x4 - x5 + 1 = [Step 5] * (-x1 + 1)
[Step 31] 0 <= x2*x4 + x2*x5 - x2 + x3*x5 - x3 - x4 - x5 + 1 = [Step 17] * (-x2 + 1)
[Step 32] 0 <= -x2 + x3*x7 - x3 - x7 + 1 = [Step 4] * (-x7 + 1)
[Step 33] 0 <= -x1*x4 - x2*x4 + x4 = [Step 14] * (x4)
[Step 34] 0 <= -x2*x5 - x5*x7 + x5 = [Step 11] * (x5)
[Step 35] 0 <= x1*x9 - x1 - x6 - x9 + 1 = [Step 1] * (-x1 + 1)
[Step 36] 0 <= -x10 + x7*x8 - x7 - x8 + 1 = [Step 3] * (-x8 + 1)
[Step 37] 0 <= -x10*x4 - x4*x7 + x4 = [Step 3] * (x4)
[Step 38] 0 <= x10*x6 - x10 - x6 - x8 + 1 = [Step 0] * (-x10 + 1)
[Step 39] 0 <= -x1*x9 - x5*x9 + x9 = [Step 9] * (x9)
[Step 40] 0 <= -x10*x9 - x8*x9 + x9 = [Step 12] * (x9)
[Step 41] 0 <= -x3*x6 - x4*x6 + x6 = [Step 10] * (x6)
0 <= 1/5 * [Step 19] + 1/5 * [Step 20] + 1/5 * [Step 27]
+ 1/5 * [Step 29] + 1/5 * [Step 33] + 1/5 * [Step 30]
+ 1/5 * [Step 36] + 3/5 * [Step 41] + 1/5 * [Step 23]
+ 1/5 * [Step 34] + 3/5 * [Step 35] + 2/5 * [Step 21]
+ 3/5 * [Step 24] + 1/5 * [Step 14] + 3/5 * [Step 32]
+ 1/5 * [Step 40] + 1/5 * [Step 37] + 1/5 * [Step 22]
+ 2/5 * [Step 25] + 1/5 * [Step 28] + 3/5 * [Step 39]
+ 2/5 * [Step 38] + 1/5 * [Step 26] + 1/5 * [Step 31] = 4 − (cid:80)10

i=1 xi.
Table 3: Examples of proofs generated by our agent. Axioms are shown in blue, and derived
polynomials (intermediate lemmas) are shown in red. Note that the coefﬁcients in the proofs are all
rational, leading to exact and fully veriﬁable proofs. The ﬁrst graph is the complete graph, the second
graph is a randomly generated graph, and the third graph is the Petersen graph.

14

12345671234567891012345678910