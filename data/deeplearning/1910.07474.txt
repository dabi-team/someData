9
1
0
2

t
c
O
6
1

]

G
L
.
s
c
[

1
v
4
7
4
7
0
.
0
1
9
1
:
v
i
X
r
a

arxiv submission 1–7

Universal Marginaliser for Deep Amortised Inference for
Probabilistic Programs

Robert Walecki, Kostis Gourgoulias, Adam Baker, Chris Hart, Chris Lucas,
Max Zwiessele, Albert Buchard, Maria Lomeli, Yura Perov, Saurabh Johri
Babylon Health, London, United Kingdom

Abstract
Probabilistic programming languages (PPLs) are powerful modelling tools which allow to
formalise our knowledge about the world and reason about its inherent uncertainty. Infer-
ence methods used in PPL can be computationally costly due to signiﬁcant time burden
and/or storage requirements; or they can lack theoretical guarantees of convergence and
accuracy when applied to large scale graphical models. To this end, we present the Uni-
versal Marginaliser (UM), a novel method for amortised inference, in PPL. We show how
combining samples drawn from the original probabilistic program prior with an appropri-
ate augmentation method allows us to train one neural network to approximate any of
the corresponding conditional marginal distributions, with any separation into latent and
observed variables, and thus amortise the cost of inference. Finally, we benchmark the
method on multiple probabilistic programs, in Pyro, with diﬀerent model structure.

1. Introduction
By encoding our knowledge of the world in a very expressive statistical formalism, PPLs
allow for complex reasoning and decision making under uncertainty. They have been suc-
cessfully applied to problems in a wide range of real-life applications including information
technology, engineering, systems biology and medicine, among others. A Bayesian Network
(BN) is a particular example of a probabilistic program where nodes and edges are used to
deﬁne a distribution P (X, Y ). Here, X are the latent variables and Y are the observations.
Ancestral sampling can be used to draw samples from this distribution. However, computing
the posterior distribution P (X | Y ) is computationally expensive. If we increase the model
complexity, then the cost of inference will increase accordingly, limiting the feasibility of
available algorithms. Some approximate inference methods are: variational inference (Wain-
wright et al., 2008) and Monte Carlo methods such as importance sampling (Neal, 2001).
Variational inference methods can be fast but do not target the true posterior. Monte Carlo
inference is consistent, but can be computationally expensive. Importance sampling meth-
ods (Cheng and Druzdzel, 2000; Neal, 2001) are eﬃcient MCMC scheme which converge
asymptotically to the global optimum. The caveat is that constructing good importance
sampling proposals for large programs is hard and either requires expert knowledge (Shwe
and Cooper, 1991) or is restricted to Bayesian networks with binary nodes (Douglas et al.,
2017).
In this work we present an amortised inference technique, the Flexible Universal
Marginaliser (UM-Flex∗), which allows us to “reuse inferences so as to answer a variety
of related queries” (Gershman and Goodman, 2014). More importantly, the model is capa-

c(cid:13) .

 
 
 
 
 
 
ble to automatically adapt to diﬀerent output and input shapes and types (real-valued and
categorical).

Amortised inference has been popular for Sequential Monte Carlo and has been used to
learn in advance either parameters (Gu et al., 2015; Perov et al., 2015; Paige and Wood,
2016a; Perov, 2016; Le et al., 2016) or a discriminative model (Morris, 2001; Paige and Wood,
2016b; Le et al., 2017; Germain et al., 2015). More recently, Ritchie et al. (2016) applied deep
amortised inference to learn network parameters and later perform approximate inference
on a Probabilistic Graphical Model (PGM). Such models either follow the control ﬂow of
a predeﬁned sequential procedure, or are restricted to a predeﬁned set of observed nodes.
Similarly, to the recently introduced Transformer Network architecture (Vaswani et al.,
2017), which use a masking scheme to learn to predict the next word in a sentence, our model
relies on masking to learn to approximate the marginals of all possible queries. In contrast,
rather than using a ﬁxed mask over nodes, our masking function is probabilistic. Other
related methods, such as variational auto encoders Ivanov et al. (2018) or neural networks
Belghazi et al. (2019) have also been proposed to perform inference given conditional on a
subset of variables. However, they are developed mainly for image tasks like inpainting and
denoising where they treats each output (pixel) in the same fashion. Our proposed model
is able to learn from the prior samples from a generative model written as a probabilistic
program with a bounded number of random choices without any separation into hidden
and observed variables beforehand. Furthermore, the outputs can be in categorical and
continuous form (or mixed). This allows us to use the same trained discriminative model
to approximate any possible posterior P (X | Y ) with any possible separation of variables
into latent variables X and observed variables Y . This property of one discriminative model
being able to amortise inference for any possible separation of nodes into unobserved and
observed ones is especially important for complex models of the world and for modelling
behaviour of AI agents. To achieve such property, we use the Universal Marginaliser (UM)
(Douglas et al., 2017; Walecki et al., 2018), an amortised inference-based method for eﬃcient
computation of conditional posterior probabilities in probabilistic programs.

2. Universal Marginaliser
The Universal Marginaliser (UM) is based on a feed-forward neural network, used to perform
fast, single-pass approximate inference on probabilistic programs at any scale. In this section
we introduce the notation and discuss the UM building and training algorithm.
Notation: A probabilistic program can be deﬁned by a probability distribution P over
sequences of executions on random variables X = {X1, . . . , XN }. The random variables are
divided into two disjoint sets, Y ⊂ X the set of observations within the program, and X ⊂
X \ Y the set of latent states. We utilise a neural network to learn an approximation to the
values of the conditional posteriors P (Xi | Y ) for each variable Xi ∈ X given an instantiation
Y of observations. For a set of variables Xi with i ∈ 1, ..., N , the desired neural network
maps the vectorised representation of Y to the values (p1, . . . , pN ) = UM(Y ) ≈ P (Xi|Y ).
This NN is used as a function approximator, hence can approximate any posterior marginal
distribution given an arbitrary set of observations Y . For this reason, such a discriminative
model is called the Universal Marginaliser (UM). Once the weights of the NN are optimised,
it can be used as an approximation for the marginals of hidden variables X given the

2

Universal Marginaliser for Deep Amortised Inference for Probabilistic Programs

observations Y . It also can be used to compute the hidden variable proposal for each Xi
sequentially given all previous X1, ..., Xi−1 and observations (i.e. using the chain rule for
joint distribution calculation and ancestral sampling algorithm (Koller and Friedman, 2009,
Algorithm 12.2).

2.1. UM architecture

In order to train the UM with minimum hyperparameter tuning eﬀorts, we design the UM
architecture automatically to the speciﬁcities of the target probabilistic program. This is
done based on rules that are considered as good practise when building NN. For example,
we deploy categorical cross-entropy (mean square error) loss for nodes with categorical (con-
tinuous) states. The number of inner layers, dropout probability and the type of activation
function was also selected based on the type of program. Furthermore, we use the ADAM
optimisation method with an initial learning rate of 0.001 and a learning rate decay of 10−4.
The two model parameters to be set by the user or found by hyperparameter optimisation
are h, the number of hidden layers and s, the number of hidden nodes per layer. We sug-
gest to use a deeper and more complex network for larger probabilistic programs. The UM
framework is implemented in the Pyro PPL (Bingham et al., 2018) and the deep learning
platform, in PyTorch.

2.2. UM training algorithm

Due to regions of low probability and the combinatorial explosion of the possible queries
in complex models, it is often impossible to sample eﬃciently all possible queries from the
generative model. However, the dynamic masking procedure used by the UM generalises
well across all queries, learning from smaller batches sampled directly from the probabilistic
program. This improves memory eﬃciency during training and ensures that the network
receives a large variety of observations, accounting for low probability regions in P . The
UM is then trained in three steps as follows:
A) Sample from program. For each iteration, we sample a batch of observations from
the prior of the program and use it for training (see appendix Fig. 3 for an example of such
a program).
B) Masking. In order for the network to approximate the marginal posteriors at test time,
and be able to do so for any input observations, each sample Si is prepared by masking.
The network will receive as input a vector where a subset of the nodes initially observed are
replaced by the priors. This augmentation can be deterministic, i.e., always replace speciﬁc
nodes, or probabilistic. We use a constantly changing probabilistic method for masking.
This is achieved by randomly masking i nodes where i is a random number, sampled from
a uniform distribution between 0 and N . This number changes with every iteration and so
does the total number of masked nodes.
C) Training multi-output NN. We train the NN by minimising multiple losses, where
each loss is speciﬁcally designed for each of the random variables in the probabilistic program.
We use categorical cross-entropy loss for categorical values and mean square error for nodes
with continuous values. We also use a diﬀerent optimiser for each output and minimise the
losses independently. This ensures that the global learning rates are also updated speciﬁcally
for all random variables. An example of an output of a probabilistic program and the
corresponding network is depicted in the appendix (3).

3

2.3. Experiments

We compared two types of training methods with three diﬀerent network architectures and
eight diﬀerent probabilistic programs (see Fig. 1). We ﬁrst used the standard universal
marginaliser in form of a neural network, where the losses of all outputs are summed and
jointly minimised. We refer to this method as UMs, where s indicates the size of the
network. We compared this method with the proposed ﬂexible universal marginaliser.
The ﬂexible design allows the method to automatically build the network architecture for
diﬀerent types of probabilistic programs. Furthermore, a diﬀerent parameter optimiser and
loss function was used for each type of outputs. We refer to this method as UM-Flexs. The
architectures of UM1 and UM-Flex1 are identical. The networks have 2 hidden layers with
10 nodes each. UM2 and UM-Flex2 have 4 hidden layers with 35 nodes each and UM3 and
UM-Flex3 have 8 hidden layers with 100 nodes. The quality of the predicted posteriors was
measured by using a test set consisting of 100 sets of observations via importance sampling
with one million samples. Tab. 1 shows the performance in terms of correlation of various
neural networks for marginalisation. Higher correlations indicate a better NN architecture.

(a)

(b)

(c)

Figure 1: Examples for the diﬀerent types of graphs. Grid9 (a): grid graph with 9 nodes.
Star9 (b): star graph with 9 nodes and Chain6: (c) chain-like structured graph wit 6 nodes.

UM1
UM2
UM3
UM-Flex1
UM-Flex2
UM-Flex3

Chain4 Chain16 Chain32 Grid9 Grid16
0.698
0.903
0.795
0.932
0.631
0.927
0.703
0.945
0.823
0.935
0.609
0.913

0.875
0.852
0.837
0.859
0.890
0.846

0.926
0.904
0.919
0.928
0.958
0.922

0.877
0.824
0.843
0.875
0.889
0.923

Star4
0.914
0.920
0.900
0.919
0.919
0.933

Star8
0.822
0.821
0.756
0.907
0.908
0.882

Star32
0.667
0.804
0.783
0.697
0.811
0.789

Table 1: Results in terms of correlation between conditional posteriors and UM predictions.

2.4. Discussion
The UM can be used either directly as an approximation of probabilities or it can be used as
a proposal for amortised inference. This abstract proposes an idea of automatic generation
and training of a neural network given a probabilistic program and samples from its prior,
such that one neural network can be used as a proposal for performing the posterior inference
given any possible evidence set. Such framework could be implemented in one of probabilistic
programming platforms, e.g.
in Pyro. While this approach directly could be applied only
to the models with bounded number of random choices, it might be possible to map the
names of random choices in a program with ﬁnite but unbounded number of those random
choices to the bounded number of names using some schedule, hence performing a version
of approximate inference in sequence.

4

Universal Marginaliser for Deep Amortised Inference for Probabilistic Programs

References

Mohamed Ishmael Belghazi, Maxime Oquab, Yann LeCun, and David Lopez-Paz.
arXiv preprint

Learning about an exponential amount of conditional distributions.
arXiv:1902.08401, 2019.

Eli Bingham, Jonathan P. Chen, Martin Jankowiak, Fritz Obermeyer, Neeraj Pradhan,
Theofanis Karaletsos, Rohit Singh, Paul Szerlip, Paul Horsfall, and Noah D. Goodman.
Pyro: Deep Universal Probabilistic Programming. The Journal of Machine Learning
Research, 20(1):973–978, 2018. URL http://arxiv.org/abs/1810.09538.

Jian Cheng and Marek J. Druzdzel. AIS-BN: An adaptive importance sampling algorithm
for evidential reasoning in large Bayesian networks. Journal of Artiﬁcial Intelligence
Research, 2000.

L. Douglas, I. Zarov, K. Gourgoulias, C. Lucas, C. Hart, A. Baker, M. Sahani, Y. Perov,
and S. Johri. A universal marginaliser for amortized inference in generative models. In
Approximate inference NIPS workshop 2017, 2017.

Mathieu Germain, Karol Gregor, Iain Murray, and Hugo Larochelle. MADE: masked au-
toencoder for distribution estimation. In Proceedings of the 32nd International Conference
on Machine Learning (ICML-15), pages 881–889, 2015.

Samuel Gershman and Noah Goodman. Amortized inference in probabilistic reasoning. In

Proceedings of the Cognitive Science Society, volume 36, 2014.

Shixiang Gu, Zoubin Ghahramani, and Richard E Turner. Neural adaptive sequential monte
carlo. In Advances in Neural Information Processing Systems, pages 2629–2637, 2015.

Oleg Ivanov, Michael Figurnov, and Dmitry Vetrov. Variational autoencoder with arbitrary

conditioning. arXiv preprint arXiv:1806.02382, 2018.

Daphne Koller and Nir Friedman. Probabilistic graphical models: principles and techniques.

MIT press, 2009.

Tuan Anh Le, Atilim Gunes Baydin, and Frank Wood. Inference compilation and universal

probabilistic programming. arXiv preprint arXiv:1610.09900, 2016.

Tuan Anh Le, Atilim Gunes Baydin, Robert Zinkov, and Frank Wood. Using synthetic
data to train neural networks is model-based reasoning. arXiv preprint arXiv:1703.00868,
2017.

Quaid Morris. Recognition networks for approximate inference in bn20 networks. In Pro-
ceedings of the Seventeenth Conference on Uncertainty in Artiﬁcial Intelligence, UAI’01,
pages 370–377, San Francisco, CA, USA, 2001. Morgan Kaufmann Publishers Inc. ISBN
1-55860-800-1. URL http://dl.acm.org/citation.cfm?id=2074022.2074068.

Radford M Neal. Annealed importance sampling. Statistics and computing, 11(2):125–139,

2001.

5

B. Paige and F. Wood. Inference networks for sequential Monte Carlo in graphical models.

In International Conference on Machine Learning, 2016a.

Brooks Paige and Frank Wood. Inference networks for sequential Monte Carlo in graphical

models. In International Conference on Machine Learning, pages 3040–3049, 2016b.

Yura N Perov. Applications of probabilistic programming (Master’s thesis, 2015). arXiv

preprint arXiv:1606.00075, 2016.

Yura N Perov, Tuan Anh Le, and Frank Wood. Data-driven sequential Monte Carlo in

probabilistic programming. arXiv preprint arXiv:1512.04387, 2015.

Daniel Ritchie, Paul Horsfall, and Noah D Goodman. Deep amortized inference for proba-

bilistic programs. arXiv preprint arXiv:1610.05735, 2016.

Michael Shwe and Gregory Cooper. An empirical analysis of likelihood-weighting simula-
tion on a large, multiply connected medical belief network. Computers and Biomedical
Research, 24(5):453–475, 1991.

Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan N Gomez,
Łukasz Kaiser, and Illia Polosukhin. Attention is all you need. In Advances in neural
information processing systems, pages 5998–6008, 2017.

Martin J Wainwright, Michael I Jordan, et al. Graphical models, exponential families, and
variational inference. Foundations and Trends R(cid:13) in Machine Learning, 1(1–2):1–305, 2008.

Robert Walecki, Albert Buchard, Kostis Gourgoulias, Chris Hart, Maria Lomeli, AKW
Navarro, Max Zwiessele, Yura Perov, and Saurabh Johri. Universal marginalizer for amor-
tised inference and embedding of generative models. arXiv preprint arXiv:1811.04727,
2018.

6

Universal Marginaliser for Deep Amortised Inference for Probabilistic Programs

Appendix A. Appendix

A.1. Implementation

def probProg ( t1 , v ) :

fo r i

in [ 2 , 3 ,

. . . , 5 0 ] :

i f abs ( t [ i −1]) < 1 :

t [ i ] ~ B e r n o u l l i ( abs ( t [ i − 1 ] ) )

e l s e :

t [ i ] ~ Gaussian ( t [ i −1] , v )

return t1 ,

t2 ,

. . . ,

t 5 0

Figure 2: Example for probabilistic program.

Figure 3: UM learning algorithm. The samples from the program are masked and used to
train the UM with diﬀerent losses for each output. Note that only the ﬁrst two components
are shown in the scatter plot.

7

def probProg ( t0 , v ) :

f o r i

in [ 2 , 3 ,

. . . , 5 0 ] :

i f abs ( t [ i −1]) < 1 :

t [ i ] ~ B e r n o u l l i ( abs ( t [ i − 1 ] ) )

e l s e :

t [ i ] ~ Gaussian ( t [ i −1] , v )

return t0 ,

t1 ,

. . . ,

t 5 0

def

inputGen ( ) :

t 0 ~ Gaussian ( 0 , 3 )
v ~ Gamma( 3 , 1 )
return t0 , v

UM = generateUM ( probProg )
UM. t r a i n ( probProg ,

inputGen )

Figure 4: Building probabilistic program and UM training.

# UM f o r a p p r o x i m a t i n g P(Y|X)
# E v i d e n c e ( e x c e p t
data = { t 1 =0.3 ,

t 5 and t 8 ) :
t 5 0 =0.5}

. . .

,

y5 , y8 = UM. c o n d M a r g i n a l s (

o b s e r v = data ,
s i t e s = [ " t 5 " , " t 8 " ]

)

# UM + Importance Sampling
y5 , y8 = Sample (

model = probProg ,
g u i d e = UM. guide ,
o b s e r v = data ,
s i t e s = [ " t 5 " , " t 8 " ] ,
num_samples=100000

)

Figure 5: Conditional posteriors and guide distribution.

8

