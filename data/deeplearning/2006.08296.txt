Deep-CAPTCHA: a deep learning based
CAPTCHA solver for vulnerability assessment

Zahra Noury ∗, Mahdi Rezaei †
Faculty of Computer and Electrical Engineering, Qazvin Azad University
Faculty of Environment, Institute for Transport Studies, The University of Leeds
∗zahra.noury@qiau.ac.ir, †m.rezaei@leeds.ac.uk

0
2
0
2

n
u
J

4
2

]

V
C
.
s
c
[

2
v
6
9
2
8
0
.
6
0
0
2
:
v
i
X
r
a

Abstract— CAPTCHA is a human-centred test to distinguish
a human operator from bots, attacking programs, or other
computerised agent that tries to imitate human intelligence. In
this research, we investigate a way to crack visual CAPTCHA
tests by an automated deep learning based solution. The goal of
this research is to investigate the weaknesses and vulnerabilities of
the CAPTCHA generator systems; hence, developing more robust
CAPTCHAs, without taking the risks of manual try and fail
efforts. We develop a Convolutional Neural Network called Deep-
CAPTCHA to achieve this goal. The proposed platform is able
to investigate both numerical and alphanumerical CAPTCHAs.
To train and develop an efﬁcient model, we have generated a
dataset of 500,000 CAPTCHAs to train our model. In this paper,
we present our customised deep neural network model, we review
the research gaps, the existing challenges, and the solutions to
cope with the issues. Our network’s cracking accuracy leads
to a high rate of 98.94% and 98.31% for the numerical and
the alpha-numerical test datasets, respectively. That means more
works is required to develop robust CAPTCHAs, to be non-
crackable against automated artiﬁcial agents. As the outcome of
this research, we identify some efﬁcient techniques to improve the
security of the CAPTCHAs, based on the performance analysis
conducted on the Deep-CAPTCHA model.

1.

Introduction

CAPTCHA, abbreviated for Completely Automated Public
Turing test to tell Computers and Humans Apart is a computer
test for distinguishing between humans and robots. As a result,
CAPTCHA could be used to prevent different types of cyber
security treats, attacks, and penetrations towards the anonymity
of web services, websites, login credentials, or even in semi-
autonomous vehicles [13] and driver assistance systems [27]
when a real human needs to take over the control of a
machine/system.

In particular, these attacks often lead to situations when
computer programs substitute humans, and it tries to automate
services to send a considerable amount of unwanted emails,
access databases, or inﬂuence the online pools or surveys [4].
One of the most common forms of cyber-attacks is the DDOS
[8] attack in which the target service is overloaded with unex-
pected trafﬁc either to ﬁnd the target credentials or to paralyse
the system, temporarily. One of the classic yet very successful
solutions is utilising a CAPTCHA system in the evolution
of the cybersecurity systems. Thus, the attacking machines
can be distinguished, and the unusual trafﬁcs can be banned
or ignored to prevent the damage. In general, the intuition
behind the CAPTCHA is a task that can distinguish humans

Fig. 1: Samples of different alphanumerical CAPTCHAs

and machines by offering them problems that humans can
quickly answer, but the machines may ﬁnd them difﬁcult, both
due to computation resource requirements and the algorithm
complexity [5]. CAPTCHAs can be in form of numerical or
alpha-numerical strings, voice, or image sets. Figure 1 shows
a few samples of the common alpha-numerical CAPTCHAs
and their types.

One of the commonly used practices is using text-based
CAPTCHAs. An example of these types of questions can be
seen in Figure 2, in which a sequence of random alphanumeric
characters or digits or combinations of them are distorted
and drawn in a noisy image. There are many techniques
and ﬁne-details to add efﬁcient noise and distortions to the
CAPTCHAs to make them more complex. For instance [4]
and [9] recommends several techniques to add various type of
noise to improve the security of CAPTCHAs schemes such
as adding crossing lines over the letters in order to imply an
anti-segmentation schema. Although these lines should not be
longer than the size of a letter; otherwise, they can be easily

 
 
 
 
 
 
Fig. 2: Examples of a ﬁve-digit text-based CAPTCHA image.

detected using a line detection algorithm. Another example
would be using different font types, size, and rotation at the
character level. One of the recent methods in this regard can
be found in [28] which is called Visual Cryptography.

On the other hand, there are a few critical points to avoid
while creating CAPTCHAs. For example, overestimating the
random noises; as nowadays days the computer vision-based
algorithms are more accurate and cleverer in avoiding noise in
contrast to humans. Besides, it is better to avoid very similar
characters such as the number ’0’ and the letter ’O’, letter
’l’ and ’I’ which cannot be easily differentiated, both by the
computer and a human.

the

Besides

text-based CAPTCHAs, other

types of
CAPTCHAs are getting popular recently. One example would
be image-based CAPTCHAs that include sample images of
random objects such as street signs, vehicles, statues, or
landscapes and asks the user to identify a particular object
among the given images [22]. These types of CAPTCHAs are
especially tricky due to the context-dependent spirit. Figure 3
shows a sample of this type of CAPTCHAs.

However,

in this paper, we will

focus on text-based
CAPTCHAs as they are more common in high trafﬁc and
dense networks and websites due to their lower computational
cost.

Before going to the next section, we would like to mention
another application of the CAPTCHA systems that need to be
discussed, which is its application in OCR (Optical Character
Recognition) systems. Although current OCR algorithms are
very robust, they still have some weaknesses in recognising
different hand-written scripts or corrupted texts, limiting the
usage of these algorithms. Utilising CAPTCHAs proposes
an excellent enhancement to tackle such problems, as well.
Since the researchers try to algorithmically solve CAPTCHA
challenges this also helps to improve OCR algorithms [7].
Besides, some other researchers, such as Ahn et al. [6],
suggest a systematic way to employ this method. The proposed
solution is called reCAPTCHA, and it merely offers a web-
based CAPTCHA system that uses the inserted text to ﬁne-
tune its OCR algorithms. The system consists of two parts:
First, the preparation stage which utilises two OCR algorithms
to transcribe the document independently. Then the outputs are
compared, and then the matched parts are marked as correctly
solved; and ﬁnally, the users choose the mismatched words to
create a CAPTCHA challenge dataset [14].

This research tries to solve the CAPTCHA recognition
problem, to detect its common weaknesses and vulnerabilities,
and to improve the technology of generating CAPTCHAs, to
ensure it will not lag behind the ever-increasing intelligence
of bots and scams.

Fig. 3: A sample of recently became accessible CAPTCHAs

The rest of the paper is organised as follows: in Section 2.,
we review on the literature by discussing the latest related
works in the ﬁeld. Then we introduce the details of the
proposed method in Section 3.. The experimental results will
be provided in Section 4., followed by the concluding remarks
in Section 5..

2. Related Works

In this this section, we brieﬂy explore some of the most

important and the latest works done in this ﬁeld.

Geetika Garg and Chris Pollett [1] performed a trained
Python-based deep neural network to crack ﬁx-lengthed
CAPTCHAs. The network consists of two Convolutional
Maxpool layers, followed by a dense layer and a Softmax
output layer. The model is trained using SGD with Nesterov
momentum. Also, they have tested their model using recurrent
layers instead of simple dense layers. However, they proved
that using dense layers has more accuracy on this problem.

In another work done by Sivakorn et al. [2], they have cre-
ated a web-browser-based system to solve image CAPTCHAs.
Their system uses the Google Reverse Image Search (GRIS)
and other open-source tools to annotate the images and then
try to classify the annotation and ﬁnd similar images, leading
to an 83% success rate on similar image CAPTCHAs.

Stark et al. [3] have also used a Convolutional neural
network to overcome this problem. However, they have used
three Convolutional layers followed by two dense layers and
then the classiﬁers to solve six-digit CAPTCHAs. Besides,
they have used a technique to reduce the size of the required
training dataset.

In researches done in [4] and [9] the authors suggest
addition of different types of noise including crossing line
noise or point-based scattered noise to improve the complexity
and security of the CAPTCHAs patterns.

Furthermore, in [11], [12], [18], and [31], also CNN based
methods have been proposed to crack CAPTCHA images. [24]
has used CNN via the Style Transfer method to achieve a better
result. [29] has also used CNN with a small modiﬁcation,
in comparison with the DenseNet [32] structure instead of
common CNNs. Also, [33] and [21] have researched Chinese
CAPTCHAs and employed a CNN model to crack them. On
the other hand, there are other approaches which do not use
convolutional neural networks, such as [15]. They use classical
image processing methods to solve CAPTCHAs. As another
example, [17] uses a sliding window approach to segment the
characters and recognise them one by one.

Another fascinating related research ﬁeld would be the
adversarial CAPTCHA generation algorithm. Osadchy et al.
[16] add an adversarial noise to an original image to make the
basic image classiﬁers misclassifying them, while the image
still looks the same for humans. [25] also uses the same
approach to create enhanced text-based images.

Similarly, [26] and [10], use the Generative Models and
Generative Adversarial Networks from different point of views
to train a better and more efﬁcient models on the data.

3. Proposed Method

Deep learning based methodologies are widely used in
almost all aspects of our life, from surveillance systems to
autonomous vehicles [23], Robotics, and even in the recent
global challenge of the COVID-19 pandemic [35].

To solve the CAPTCHA problem, we develop a deep
neural network architecture named Deep-CAPTCHA using
customised convolutional layers to ﬁt our requirements. Below,
we describe the detailed procedure of processing, recognition,
and cracking the alphanumerical CAPTCHA images. The
process includes input data pre-processing, encoding of the
output, and the network structure itself.

3.1. Preprocessing

Applying some pre-processing operations such as image
size reduction, colour space conversion, and noise reduction
ﬁltering can have a tremendous overall increase on the network
performance.

The original size of the image data used in this research
is 135 × 50 pixel which is too broad as there exist many
blank areas in the CAPTCHA image as well as many co-
dependant neighbouring pixels. Our study shows by reducing
the image size down to 67 × 25 pixel, we can achieve almost
the same results without any noticeable decrease in the systems
performance. This size reduction can help the training process
to become faster since it reduces the data without having much
reduction in the data entropy.

Colour space to Gray-space conversion is another prepro-
cessing method that we used to reduce the size of the data
while maintaining the same level of detection accuracy. In

Algorithm 1: Median ﬁlter noise ﬁltering
Input: image, window size
Output: resultImage
for x from 0 to image width do

for y from 0 to image height do

i = 0 for fx from 0 to window width do
for fy from 0 to window height do

window[i] := image[x + fx][y + fy];
i := i + 1;

end

end
sort entries in window;
resultImage[x][y] := window[window width *
window height / 2];

end

end

this way, we could further reduce the amount of redundant
data and ease the training and prediction process. Converting
from a three-channel RGB image to a grey-scale image does
not affect the results, as the colour is not crucial on the text-
based CAPTCHA systems.

The last preprocessing technique that we consider is the
application of a noise reduction algorithm. After a careful
experimental analysis on the appropriate ﬁltering approaches,
we decided to implement the conventional Median-Filter to
remove the noise of the input image. The algorithm eliminates
the noise of the image by using the median value of the
surrounding pixels values instead of the pixel
itself. The
algorithm is described in Algorithm 1 in which we generate the
resultImage from the input ’image’ using a predeﬁned window
size.

3.2. Encoding

Unlike the classiﬁcation problems where we have a speciﬁc
number of classes in the CAPTCHA recognition problems,
the number of classes depends on the number of digits and
the length of the character set in the designed CAPTCHA.
This leads to exponential growth depending on the number
of classes to be detected. Hence, for a CAPTCHA problem
with ﬁve numerical digits, we have around 100,000 different
combinations. As a result, we are required to encode the output
data to ﬁt into a single neural network.

The initial encoding we used in this research was to employ
nb input = D × L neurons, where D is the length of
the alphabet set, and L is the character set length of the
CAPTCHA. The layer utilises the Sigmoid activation function:

S(x) =

1
1 + e−x

(1)

Where x is the input value and S(x) is the output of the
Sigmoid function. By increasing the x, the S(x) conversing to
1 and by reducing it the S(x) is getting close to −1. Applying
Sigmoid function adds a non-linearity feature to neurons which

Fig. 4: In this ﬁgure, both approaches for representing the output data are illustrated. Method A) in this method, we have
one single Sigmoid layer, which represents three numerical characters (3-digits CAPTCHA, each of which can represent ten
different status- 0 to. Method B) we have three separate Softmax layers. In this example, both methods illustrate 621.

improves the learning potential and also the complexity of
those neurons in dealing with non-linear inputs.

faster than RNNs, yet can achieve very accurate results if the
model is well designed.

These sets of neurons can be arranged in a way so that
the ﬁrst set of D neurons represent the ﬁrst letter of the
CAPTCHA; the second set of D neurons represent the second
letter of the CAPTCHA, and so on. In other words, assuming
D = 10, the 15th neuron tells whether the ﬁfth letter from
the second character matches with the predicted alphabet
or not. A visual representation can be seen in Figure 4.A,
where the method encompasses three numerical serial digits
that represent 621 as the output. However,
this approach
seemed not to be worthy due to its incapability of normalising
the numerical values and also the impossibility of using the
Softmax function as the output layer of the intended neural
network.

Therefore, we employed L parallel Softmax layers, instead:

σ(z)i =

ezi
j=1 ezj

(cid:80)K

(2)

where i is the corresponding class for which the Softmax
is been calculated, zi is the input value of that class, and K
is the maximum number of classes.

Each Softmax layer individually represents D neurons as
Figure 4.B and these D neurons in return represent
the
alphabet that is used to create the CAPTCHAs (for example
0 to 9, or A to Z).

L unit

is represents the location of

in the
CAPTCHA pattern (for example, locations 1 to 3). Using
this technique allows us to normalise each Softmax unit
individually over its neurons, D. In other words, each unit
can normalise its weight over the different alphabets; hence it
performs better, in overall.

the digit

The structure of our proposed network is depicted in Figure
5. The network starts with a Convolutional layer with 32 input
neurons, the ReLU activation function, and 5 × 5 Kernels. A
2×2 Max-Pooling layer follows this layer. Then, we have two
sets of these Convolutional-MaxPooling pairs with the same
parameters except for the number of neurons, which are set
to 48 and 64, respectively. We have to note that all of the
Convolutional layers have the “same” padding parameter.

After the Convolutional layers, there is a 512 dense layer
with the ReLU activation function and a 30% drop-out rate.
Finally, we have L separate Softmax layers, where L is the
number of expected characters in the CAPTCHA image.

The loss function of the proposed network is the Binary-
cross entropy as we need to compare these binary matrices all
together:

Hp(q) = −

1
N

N
(cid:88)

i=1

yi. log(p(xi))+(1−yi). log(1−p(xi)) (3)

were N is the number of samples and p is the predictor
model. The xi and yi represent the input data and the label
of the ith sample, respectively. Since the label could be either
zero or one, therefore only one part of this equation would be
active for each sample.

We also employed Adam optimiser, which is brieﬂy de-
scribed in Equations 4 to 8 where mt and vt representing an
exponentially decaying average of the past gradients and past
squared gradients, respectively.

mt = β1mt−1 + (1 − β1)gt
vt = β2vt−1 + (1 − β2)g2
t

(4)

(5)

3.3. Architecture of the Network

Although the Recurrent Neural Networks (RNNs) can be
one of the options to predict CAPTCHA characters, in this re-
search we have focused on sequential models as they perform

β1 and β2 are conﬁgurable constants. gt is the gradient
of the optimising function and t is the learning iteration.
In Equations 6 and 7, momentary values for m and v are
calculated as follows:

Fig. 5: The Architecture of the proposed Deep-CAPTCHA Network

ˆmt =

ˆvt =

mt
1 − βt
1

vt
1 − βt
2

(6)

(7)

Finally, using Equation 8 and by updating θt

in each
iteration, the optimum value of the function could be attained.
ˆmt and ˆvt are calculated via Equations 6 and 7 and η, the
step size (also known as learning rate) is set to 0.0001 in our
approach.

θt+1 = θt −

√

η
ˆvt + (cid:15)

ˆmt

(8)

The intuition behind using Adam optimiser is its capability
in training the network in a reasonable time. This can be easily
inferred from Figure 6a in which the Adam optimiser achieves
the same results in comparison with Stochastic Gradient
Descent (SGD), but with a much faster convergence.

After several experiments, we trained the network for 50
epochs with a batch size of 128 for each. As can be inferred
from Figure 6a, even after 30 epochs the network tends to
an acceptable convergence. As a result, 50 epochs seem to
be sufﬁcient for the network to perform steadily. Furthermore,
Figure 6e would also suggest the same inference based on the
measured accuracy metrics.

4. Experimental Results

After developing the above-described model, we trained the
network on 500,000 randomly generated CAPTCHAs using
Python ImageCaptcha Library [38]. See Figure 7 for some of
the randomly generated numerical CAPTCHAs with the ﬁxed
lengths of ﬁve-digits.

To be balanced, the dataset consists of ten randomly gener-

ated images from each permutation of a ﬁve-digit text.

4.1. Performance Analysis

We tested the proposed model on another set of half a
million CAPTCHA images as our test dataset. As represented
in Table I, the network reached the overall performance and
accuracy rate of 99.33% on the training set and 98.94% on

TABLE I: Accuracy metric and total loss value for the Train
and Test portion of the dataset.

Softmax

Sigmoid

Loss

Accuracy

Loss

Accuracy

Train

0.013

99.33%

Test

0.075

98.94%

0.037

0.116

98.73%

90.04%

TABLE II: Accuracy metric of the dataset for each digit and
the complete CAPTCHA as a set of 5 integrated digits.

Train Accuracy

Test Accuracy

Digit 1
Digit 2
Digit 3
Digit 4
Digit 5
CAPTCHA

99.91%
99.85%
99.84%
99.83%
99.90%
99.33%

99.87%
99.75%
99.72%
99.75%
99.85%
98.94%

the test dataset. We have to note that the provided accuracy
metrics are calculated based on the number of correctly
detected CAPTCHAs as a whole (i.e. correct detection of all
ﬁve individual digits in a given CAPTCHA); otherwise, the
accuracy of individual digits are even higher, as per the Table
II.

We have also conducted a confusion matrix check to visu-
alise the outcome of this research better. Figure 8 shows how
the network performs on each digit regardless of the position
of that digit in the CAPTCHA string. As a result, the network
seems to work extremely accurately on the digits, with less
than 1% misclassiﬁcation for each digit.

4.2. Vulnerability Assessment

By analysing the network performance and visually
inspecting 100 misclassiﬁed samples we pointed out some
important results as follows that can be taken into account to
decrease the vulnerability of the CAPTCHA generators:

(a) Loss - Adam

(b) Loss - SGD

(c) Train Accuracy - Adam

(d) Train Accuracy - SGD

(e) Test Accuracy - Adam

(f) Test Accuracy - SGD

Fig. 6: (a) and (b): Loss values of the test and training process for Adam and SGD optimiser, respectively. (c) and (d): The
accuracy metrics of the network for the same optimisers on the training dataset. (e) and (f): The accuracy metrics of the
network using the given optimisers on the test dataset.

While an average human could solve the majority of the
the following weaknesses were
that caused failure by the Deep-

misclassiﬁed CAPTCHAs,
identiﬁed in our model
CAPTCHA solver:

• In 85% of the misclassiﬁed samples, the gray-level in-
tensity of the generated CAPTCHAs were considerably
lower than the average intensity of the Gaussian dis-
tributed pepper noise in the CAPTCHA Image.

• In 54% of the cases, the digits 3, 8, or 9 were the cause

of the misclassiﬁcation.
• In 81.8% of the cases,
rotated for 10◦ or more.

the misclassiﬁed digits were

• Confusion between the digits 1 and 7 was also another
cause of the failures, particularly in case of more than
20◦ counter-clockwise rotation for the digit 7.

Consequently, in order to cope with the existing weakness
and vulnerabilities of the CAPTCHA generators, we strongly
suggest mandatory inclusion of one or some of the digits 3,

TABLE III: The accuracy results of different CAPTCHA
recognition methods. (∗ denotes the accuracy result that only
calculated for numerical CAPTCHAs.)

References

Methodology

Accuracy

Wang et al. [29]

Current paper

Wei et al. [36]

Current paper

Goodfellow [14]

Du et al. [37]

1- DFCR
2- DenseNet-121
3- ResNet-50
Proposed Method∗
( Numerical )

4- SVM
5- CNN

Proposed Method
( Alphanumerical )
6- SVHN Network ∗
7- VGG 16
8- VGG CNN M 1024
9- ZF

Yu et al. [20]

10-TOD-CNN

99.96%
99.90%
99.90%

98.90%

98.81%
98.43%

98.30%

97.84%

97.50%
97.20%
96.60%

92.37%

The reason behind having 31 neurons is that we have used
all Latin alphabets and numbers except for i, l, 1, o, 0 due to
their similarity to each other and existing difﬁculties for an
average human to tell them apart. Although we have used both
upper and lower case of each letter to generate a CAPTCHA,
we only designate a single neuron for each of these cases in
order to simplicity.

In order to compare our solution, ﬁrst, we investigated the
research done by Wang et al. [29] which includes evaluations
on the following approaches: DenseNet-121 and ResNet-50
which are ﬁne-tuned model of the original DenseNet and
ResNet networks to solve CAPTCHAs as well as DFCR
which is an optimised method based on the DenseNet network.
The DFCR has claimed an accuracy of 99.96% which is the
best accuracy benchmark among other methods. However, this
model has only been trained on less than 10,000 samples
and only on four-digit CAPTCHA images. Although the
quantitative comparison in Table III shows the [29] on top of
our proposed method, the validity of the method can neither
be veriﬁed on larger datasets, nor on complex alphanumerical
CAPTCHAs with more than half a million samples, as we
conducted in our performance evaluations.

The next comparing method is [36] which uses an SVM
based method and also implementation of the VGG-16 net-
work to solve CAPTCHA problems. The critical point of this
method is the usage of image preprocessing, image segmen-
tation and one by one character recognition. These techniques
have lead to 98.81% accuracy on four-digit alphanumerical
CAPTCHAs. The network has been trained on a dataset
composed of around 10,000 images. Similarly, TOD-CNN [20]
have utilised segmentation method to locate the characters in
addition to using a CNN model which is trained on a 60,000
dataset. The method uses a TensorFlow Object Detection
(TOD) technique to segment the image and characters.

Goodfellow et al. [14] have used DistBelief implementation

Fig. 7: Samples of the Python numerical Image-Captcha
Library used to train the Deep-CAPTCHA.

7, 8 and 9 (with/without counter-clockwise rotations) with
a signiﬁcantly higher rate of embedding in the generated
CAPTCHAs comparing to the other digits. This will make the
CAPTCHAs harder to distinguish for automated algorithms
such as the Deep-CAPTCHA, as they are more likely to be
confused with other digits, while the human brain has no
difﬁculties in identifying them.

A similar investigation was conducted for the alphabetic
part of the failed detections by the Deep-CAPTCHA and the
majority of the unsuccessful cases were tied to either too
oriented characters or those with close contact to neighbouring
characters. For instance, the letter “g” could be confused with
“8” in certain angles, or a “w” could be misclassiﬁed as an
“m” while contacting with an upright letter such as “T ”. In
general, the letters that can tie together with one/some of the
letters: w, v, m, n can make a complex scenario for the Deep-
CAPTCHA. Therefore we suggest more inclusion of these
letters, as well as putting these letters in close proximity to
others letter, may enhance the robustness of the CAPTCHAs.
lower
grayscale intensity) alpha-numerical characters would also
help to enhance the difﬁculty level of the CAPTCHAs.

research also suggests brighter colour

Our

(i.e.

4.3. Performance Comparison

In this section, we compare the performance of our proposed
method with 10 other state-of-the-art techniques. The compar-
ison results are illustrated in Table III followed by further
discussions about speciﬁcation of each method.

As mentioned in earlier sections, our approach is based
on Convolutional Neural Network that has three pairs of
Convolutional-MaxPool layers followed by a dense layer that
is connected to a set of Softmax layers. Finally, the network
is trained with Adam optimiser.

In this research we initially focused on optimising our
network to solve numerical CAPTCHAs; However, since many
existing methods work on both numerical and alphanumeri-
cal CAPTCHAs, we developed another network capable of
solving both types. Also, we trained the network on 700,000
alphanumerical CAPTCHAs. For a better comparison and
to have a more consistent approach, we only increased the
number of neurons in each Softmax units from 10 to 31 to
cover all common Latin characters and digits.

Fig. 8: Confusion Matrix of the trained network on the test data. Although the digits are accurately labelled, the vertical bar
is scaled non-linearly to point out the differences with a better visualisation.

of CNNs to recognise numbers more accurately. The dataset
used in this research was the Street View House Numbers
(SVHN) which contains images taken from Google Street
View.

Finally, the last discussed approach is [37] which compares
VGG16, VGG CNN M 1024, and ZF. Although they have
relatively low accuracy compared to other methods, they have
employed R-CNN methods to recognise each character and
locate its position at the same time.

In conclusion, our methods seem to have relatively sat-
isfactory results on both numerical and alphanumerical
CAPTCHAs. Having a simple network architecture allows us
to utilise this network for other purposes with more ease.
Besides, having an automated CAPTCHA generation tech-
nique allowed us to train our network with a better accuracy
while maintaining the detection of more complex and more
comprehensive CAPTCHAs comparing to state-of-the-art.

5. Conclusion

We designed, customised and tuned a CNN based deep
neural network for numerical and alphanumerical based
CAPTCHA detection to reveal the strengths and weaknesses
of the common CAPTCHA generators. Using a series of
paralleled Softmax layers played an important role in detection
improvement. We achieved up to 98.94% accuracy in compari-
son to the previous 90.04% accuracy rate in the same network,
only with Sigmoid layer, as described in section 3.2. and Table
I.

Although the algorithm was very accurate in fairly random
CAPTCHAs, some particular scenarios made it extremely

challenging for Deep-CAPTCHA to crack them. We believe
taking the addressed issues into account can help to create
more reliable and robust CAPTCHA samples which makes it
more complex and less likely to be cracked by bots or AI-
based cracking engines and algorithms.

As a potential pathway for future works, we suggest solving
the CAPTCHAs with variable character length, not only lim-
ited to numerical characters but also applicable to combined
challenging alpha-numerical characters as discussed in section
4.. We also recommend further research on the application
of Recurrent Neural Networks as well as the classical image
processing methodologies [30] to extract and identify the
CAPTCHA characters, individually.

References

[1] Garg, Geetika, and Chris Pollett. ”Neural network captcha crackers.” In
2016 Future Technologies Conference (FTC), pp. 853-861. IEEE, 2016.
[2] Sivakorn, Suphannee, Iasonas Polakis, and Angelos D. Keromytis. ”I am
robot:(deep) learning to break semantic image captchas.” In 2016 IEEE
European Symposium on Security and Privacy (Euro S&P), pp. 388-403.
IEEE, 2016.

[3] Stark, Fabian, Caner Hazrbas, Rudolph Triebel, and Daniel Cremers.
”Captcha recognition with active deep learning.” In Workshop new
challenges in neural computation, vol. 2015, p. 94. Citeseer, 2015.
[4] Bostik, Ondrej, and Jan Klecka. ”Recognition of CAPTCHA characters
by supervised machine learning algorithms.” IFAC-PapersOnLine 51, no.
6 (2018): 208-213.

[5] Von Ahn, Luis, Manuel Blum, Nicholas J. Hopper, and John Langford.
”CAPTCHA: Using hard AI problems for security.” In International
Conference on the Theory and Applications of Cryptographic Techniques,
pp. 294-311. Springer, Berlin, Heidelberg, 2003.

[6] Von Ahn, Luis, Benjamin Maurer, Colin McMillen, David Abraham, and
Manuel Blum. ”recaptcha: Human-based character recognition via web
security measures.” Science 321, no. 5895 (2008): 1465-1468.

[31] Stark, Fabian, Caner Hazrbas, Rudolph Triebel, and Daniel Cremers.
”Captcha recognition with active deep learning.” In Workshop new
challenges in neural computation, vol. 2015, p. 94. Citeseer, 2015.
[32] Huang, Gao, Zhuang Liu, Laurens Van Der Maaten, and Kilian Q.
Weinberger. ”Densely connected convolutional networks.” In Proceedings
of the IEEE conference on computer vision and pattern recognition, pp.
4700–4708. 2017.

[33] Jia, Yang, Wang Fan, Chen Zhao, and Jungang Han. ”An Approach
for Chinese Character Captcha Recognition Using CNN.” In Journal of
Physics: Conference Series, vol. 1087, no. 2, p. 022015. IOP Publishing,
2018.

[34] Banday MT, Shah NA, ”Image Flip Captcha”. ISC International Journal

of Information Security (ISeCure) vol.1, no. 2, p. 105–123

[35] Rezaei M, Shahidi M, ”Zero-Shot Learning and its Applications from
Autonomous Vehicles to COVID-19 Diagnosis: A Review”. In arXiv
prepreint arXiv:2004.14143 (2020).

[36] Wei, Li, Xiang Li, TingRong Cao, Quan Zhang, LiangQi Zhou, and
WenLi Wang. ”Research on Optimization of CAPTCHA Recognition
Algorithm Based on SVM.” In Proceedings of the 2019 11th International
Conference on Machine Learning and Computing, pp. 236-240. 2019.
[37] Du, Feng-Lin, Jia-Xing Li, Zhi Yang, Peng Chen, Bing Wang, and
Jun Zhang. ”CAPTCHA Recognition Based on Faster R-CNN.” In
International Conference on Intelligent Computing, pp. 597-605. Springer,
Cham, 2017.

[38] Python Image Captch Librady https://github.com/lepture/captcha, Last

access: 15 June 2020.

[7] Kaur, Kiranjot, and Sunny Behal. ”Designing a Secure Text-based

CAPTCHA.” Procedia Comput. Sci 57 (2015): 122-125.

[8] Nazario, Jose. ”DDoS attack evolution.” Network Security 2008, no. 7

(2008): 7-10.

[9] Yousef, Mohamed, Khaled F. Hussain, and Usama S. Mohammed. ”Ac-
curate, data-efﬁcient, unconstrained text recognition with convolutional
neural networks.” arXiv preprint arXiv:1812.11894 (2018).

[10] Ye, Guixin, Zhanyong Tang, Dingyi Fang, Zhanxing Zhu, Yansong
Feng, Pengfei Xu, Xiaojiang Chen, and Zheng Wang. ”Yet another text
captcha solver: A generative adversarial network based approach.” In
Proceedings of the 2018 ACM SIGSAC Conference on Computer and
Communications Security, pp. 332-348. 2018.

[11] Karthik, CHBL-P., and Rajendran Adria Recasens. ”Breaking microsofts

CAPTCHA.” Technical report (2015).

[12] Kopp, Martin, Matej Nikl, and Martin Holena. ”Breaking captchas with

convolutional neural networks.” ITAT 2017 Proceedings (2017): 93-99.

[13] Rezaei, M. and Klette, R. ”Look at the Driver, Look at the Road:
No Distraction! No Accident!”, CVF Computer Vision and Pattern
Recognition, pp. 129–136, (2014).

[14] Goodfellow, Ian J., Yaroslav Bulatov, Julian Ibarz, Sacha Arnoud, and
Vinay Shet. ”Multi-digit number recognition from street view imagery us-
ing deep convolutional neural networks.” arXiv preprint arXiv:1312.6082
(2013).

[15] Wang, Ye, and Mi Lu. ”An optimized system to solve text-based

CAPTCHA.” arXiv preprint arXiv:1806.07202 (2018).

[16] Osadchy, Margarita, Julio Hernandez-Castro, Stuart Gibson, Orr Dunkel-
man, and Daniel Prez-Cabo. ”No bot expects the DeepCAPTCHA! Intro-
ducing immutable adversarial examples, with applications to CAPTCHA
generation.” IEEE Transactions on Information Forensics and Security
12, no. 11 (2017): 2640-2653.

[17] Bursztein, Elie, Jonathan Aigrain, Angelika Moscicki, and John C.
Mitchell. ”The end is nigh: Generic solving of text-based captchas.” In
8th USENIX Workshop on Offensive Technologies (WOOT 14). 2014.

[18] Zhao, Nathan, Yi Liu, and Yijun Jiang. ”CAPTCHA Breaking with Deep

Learning.” (2017).

[19] Chen, Jun, Xiangyang Luo, Yanqing Guo, Yi Zhang, and Daofu Gong.
”A survey on breaking technique of text-based CAPTCHA.” Security and
Communication Networks 2017 (2017).

[20] Yu, Ning, and Kyle Darling. ”A Low-Cost Approach to Crack Python
CAPTCHAs Using AI-Based Chosen-Plaintext Attack.” Applied Sciences
9, no. 10 (2019): 2010.

[21] Algwil, Abdalnaser, Dan Ciresan, Beibei Liu, and Jeff Yan. ”A security
analysis of automated Chinese turing tests.” In Proceedings of the 32nd
Annual Conference on Computer Security Applications, pp. 520-532.
2016.

[22] Sivakorn, Suphannee, Jason Polakis, and Angelos D. Keromytis. ”Im
not a human: Breaking the Google reCAPTCHA.” Black Hat (2016).
[23] Rezaei, Mahdi, and Reinhard Klette, ”Simultaneous Analysis of Driver
Behaviour and Road Condition for Driver Distraction Detection.”, Inter-
national Journal of Image and Data Fusion, (2011).

[24] Kwon, Hyun, Hyunsoo Yoon, and Ki-Woong Park. ”CAPTCHA Image
Generation Using Style Transfer Learning in Deep Neural Network.” In
International Workshop on Information Security Applications, pp. 234–
246. Springer, Cham, 2019.

[25] Kwon, Hyun, Yongchul Kim, Hyunsoo Yoon, and Daeseon Choi.
”Captcha image generation systems using generative adversarial net-
works.” IEICE TRANSACTIONS on Information and Systems 101, no.
2 (2018): 543–546.

[26] George, Dileep, Wolfgang Lehrach, Ken Kansky, Miguel Lzaro-Gredilla,
Christopher Laan, Bhaskara Marthi, Xinghua Lou et al. ”A generative
vision model that trains with high data efﬁciency and breaks text-based
CAPTCHAs.” Science 358, no. 6368 (2017): eaag2612.

[27] Rezaei, M. and Sarshar, M., and Sanaatiyan MM/ ”Toward next gener-
ation of driver assistance systems: A multimodal sensor-based platform.”
Computer and Atomation Eengineering, (2010), pp. 62–67.

[28] Yan, Xuehu, Feng Liu, Wei Qi Yan, and Yuliang Lu. ”Applying Visual
Cryptography to Enhance Text Captchas.” Mathematics 8, no. 3 (2020):
332.

[29] Wang, Jing, Jiao Hua Qin, Xu Yu Xiang, Yun Tan, and Nan Pan.
”CAPTCHA recognition based on deep convolutional neural network.”
Math. Biosci. Eng. 16, no. 5 (2019): pp. 5851–5861.

[30] Rezaei, Mahdi, and Reinhard Klette. ”Object Detection, Classiﬁcation,

and Tracking”. Springer International Publishing, 2017.

