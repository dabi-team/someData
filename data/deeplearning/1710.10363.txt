Diff-DAC: Distributed Actor-Critic for Average Multitask
Deep Reinforcement Learning
Sergio Valcarcel Macua(cid:63) and Aleksi Tukiainen(cid:63)

Daniel Garc´ıa-Oca ˜na Hern´andez† and David Baldazo†

Enrique Munoz de Cote(cid:63) and Santiago Zazo†
(cid:63)PROWLER.io
†Information Processing and Telecommunications Center - Universidad Polit´ecnica de Madrid

0
2
0
2

t
c
O
5
2

]

G
L
.
s
c
[

6
v
3
6
3
0
1
.
0
1
7
1
:
v
i
X
r
a

Abstract

We propose a fully distributed actor-critic algorithm approxi-
mated by deep neural networks, named Diff-DAC, with appli-
cation to single-task and to average multitask reinforcement
learning (MRL). Tasks share state-action sets and reward
function, but have different state transition distribution. Each
agent has access to data from its local task only, but it aims
to learn a policy that performs well on average for the whole
set of tasks. During the learning process, agents communicate
their value-policy parameters to their neighbors, diffusing the
information across the network, so that they converge to a
common policy, with no need for a central node. The method
is scalable, since the computational and communication costs
per agent grow with its number of neighbors. We derive Diff-
DAC’s from duality theory and provide novel insights into the
standard actor-critic framework, showing that it is actually an
instance of the dual ascent method that approximates the solu-
tion of a linear program. Experiments suggest that Diff-DAC
can outperform the single previous distributed MRL approach
(i.e., Dist-MTLPS) and even the centralized architecture.1

1

Introduction

Within a decade, billions of interconnected devices will
be processing and exchanging data throughout the global
economy (van der Meulen 2015). Centralised reinforcement
learning (RL) architectures where all devices interact with
a central station might be unfeasible. Fully distributed RL
algorithms, where agents communicate only with neighbors
and without central control, offer a solution to this problem,
since the communication cost per agent scales linearly with
its number of neighbors. In this distributed approach, each
agent learns by interacting with its own environment, but is
able to cooperate and beneﬁt from the learning process of the
whole network. When all agents’ environments are equal,
they learn to perform a single task; when environments are
different but related, they learn to generalize across all tasks
(Taylor and Stone 2009). The latter is known as the multi-
task reinforcement learning (MRL) problem. We propose an
algorithm named Diffusion-based Distributed Actor-Critic
(Diff-DAC) for both single-task and MRL problems.

Most previous MRL approaches assumed access to data
from all tasks (Bou-Ammar et al. 2014; Parisotto, Ba, and

1Presented at Adaptive Learning Agents workshop (ALA2018),

July 14th, 2018, Stockholm, Sweden.

Salakhutdinov 2016; Teh et al. 2017). But if the number of
tasks is large and their data are geographically distributed,
the communication cost of transmitting the data to a central
station might be prohibitive.

The idea of making scalable MRL with distributed opti-
mization was ﬁrst proposed by El Bsat, Bou-Ammar, and
Taylor (2017) with the Dist-MTLPS method, which ex-
tended a distributed implementation of ADMM due to Wei
and Ozdaglar (2012). Our work improves over Dist-MTLPS
in a number of ways: i) Dist-MTLPS relies on linear func-
tion approximation, which requires ﬁnding salient features,
and it only considers policies in the natural exponential fam-
ily of distributions. Diff-DAC, on the other hand, uses deep
learning architectures to avoid costly feature engineering,
and is able to learn more expressive policies. ii) The dis-
tributed ADMM updates of the agents are done in sequential
order, requiring ﬁnding a cyclic path that visits all agents,
which is generally an NP-hard problem (Karp 1972). Diff-
DAC uses a diffusion strategy (Sayed 2014), where each
agent interacts with its neighbors, with no ordering, and pos-
sibly asynchronously (Zhao and Sayed 2015). iii) Sequential
strategies are sensitive to agent or link failures, since they
stop the information ﬂow; while diffusion strategies are ro-
bust since the agents can still operate even if parts of the
network become isolated.

As far as we know, all other previous works on distributed
RL only considered tabular or linear function approxima-
tions (e.g., (Kar, Moura, and Poor 2013; Valcarcel Macua
et al. 2015; Tutunov, Bou-Ammar, and Jadbabaie 2016)),
and do not apply immediately to expressive nonlinear ap-
proximations. In particular, reference (Kar, Moura, and Poor
2013) added a consensus rule to tabular Q-learning; a prin-
cipled nonlinear extension raises questions like whether we
should we add consensus to the target network updates, and
would be an alternative contribution to our actor-critic ap-
proach. The Dist-GTD method due to (Valcarcel Macua et
al. 2015) is for policy evaluation with linear approximation,
and tts extension to control and nonlinear approximations
isn’t trivial even for the single-agent GTD. Finally, refer-
ence (Tutunov, Bou-Ammar, and Jadbabaie 2016) proposed
a second order method, implying the inversion of the Hes-
sian at every agent, which might be problematic for neural
networks with hundreds of neurons. Other related works suf-
fer from similar drawbacks.

 
 
 
 
 
 
Contributions. (1) We propose a fully distributed actor-
critic deep reinforcement learning algorithm named Diff-
DAC for the single and average multitask problem that
scales gracefully to large number of tasks. (2) We re-derive
the actor-critic framework from duality theory and show that
it is an instance of dual-ascent to approximate the saddle-
point of the Lagrangian of a linear program (LP). This
derivation formalizes previous intuitions (Pfau and Vinyals
2016) and provides novel insights, like a policy gradient
that includes the advantage function explicitly, rather than
as a variance reduction technique. (3) Experimental results
suggest that Diff-DAC outperforms Dist-MTLPS, and that
it is more stable and achieves better local optima than the
centralized approach, without replay memory or target net-
works.

2 Problem Formulation
In this section, we formalize tasks as Markov decision pro-
cesses (MDPs), deﬁne a family of tasks and introduce the
multitask optimization problem.

Consider a parametric family of MDPs deﬁned over ﬁ-
nite2 state-action sets, S and A. Each MDP of the family
has different state transition distribution, Pθ(s(cid:48)|s, a), that
depend on some parameter θ ∈ Θ, where Θ is a measur-
able compact set. The task family is given as a probability
distribution over the parameter set, f , so that the parameter
is a random variable3: θ = θ ∼ f . All MDPs in the faminly
share the reward function, r(s, a), and the distribution over
the initial state, µ(s), ∀s, s(cid:48) ∈ S, a ∈ A,

Let π : S × A (cid:55)→ [0, 1] be a stationary policy, such that
π(a|s) denotes the probability of taking action a at state s.
Let v : Π × S (cid:55)→ R denote the value function, such that
vπ
θ (s) is the value at state s when following policy π:
(cid:34) ∞
(cid:88)

(cid:35)

γtr(st, at) (cid:12)

(cid:12) s0 = s

,

θ (s) (cid:44) Eπ,Pθ
vπ

(1)

t=0

where Eπ,Pθ [·] is the expected value when at ∼ π(·|st) and
st+1 ∼ Pθ(·|st, at); and 0 < γ < 1 is the discount factor.
Introduce the vector of values: vπ
θ

θ (s))s∈S ∈ R|S|.

Suppose we have observed N tasks that correspond to pa-
k=1. Our goal is to learn a stationary policy

rameters {θk}N
that maximizes the global average value:

(cid:44) (vπ

maximize
π

(cid:32) N
(cid:88)

(cid:33)

vπ
θk

,

µ(cid:62)

k=1

(2)

We assume bounded rewards:

|r(s, a)| ≤ Rmax < ∞, ∀(s, a) ∈ S × A,
(3)
for some scalar Rmax. Under this assumption we can easily
ensure existence of solution to (2).
When all task parameters {θk}N

k=1 are equal, (2) is the
single-task RL problem; when they differ, (2) becomes an
MRL problem where we aim to learn a single policy that
performs optimally in average for the whole set of tasks.

2The proposed Diff-DAC algorithm uses function approxima-
tion so that is able to work in continuous state-action sets as well.
3We use boldface font to denote random variables and regular

font to denote instances or deterministic variables.

(cid:80)N

Figure 1: Example of network and detailed neighborhood.
Blue nodes represent agents, and edges represent their con-
nectivity. This network consists of N = 25 agents, with av-
erage neighborhood size: |N | = 1
k=1 |Nk| = 4.2. On
N
the right, the ﬁgure zooms over neighborhood Nk (green
area), where each agent k runs its own task instance of
the swing-up cart-pole task (with diffent pole lenght and
mass, deﬁned by parameter θk). As explained later, agent
k transmits its neural network weights, ξk,i and wk,i, to its
neighbors j and l; and it receives their weights ξj,i, wj,i and
ξl,i, wl,i, and combines them with coefﬁcients cjk and clk,
respectively.

3 Networked Multiagent Setting
In this section we introduce the networked multiagent set-
ting that learns in a fully distributed manner.

We have a network of N agents, which is expressed as a
graph, N . Each node, denoted k = 1, . . . , N , corresponds
to an agent that learns from data coming from its own task4,
with parameter θk ∼ f . The edges in the graph represent
communication links. We assume that the graph is connected
(i.e., there is at least one path between every pair of agents).
The graph can be represented by a non-negative matrix of
size N × N , denoted C (cid:44) (clk)N
l,k=1, such that the element
clk ≥ 0 represents the weight given by agent k to informa-
tion coming from l. Each agent k is only allowed to commu-
nicate within its own neighborhood, Nk, which is deﬁned as
the set of agents to which it is directly connected, includ-
ing k itself: Nk (cid:44) {l ∈ {1, . . . , N } : clk > 0}. In order to
ensure that the information ﬂows through the network, we
require the following standard conditions on the connectiv-
ity matrix C, which make it doubly-stochastic and primitive
(Sayed 2014; Valcarcel Macua et al. 2015):

C (cid:62)1 = 1, C1 = 1, and clk ≥ 0, k, l = 1, . . . , N,

trace [C] > 0,

(4)
(5)

where 1 is a vector of ones. Although conditions (4)–(5)
seem restrictive, it turns out that there are procedures for
every agent k to ﬁnd the weights {clk}l∈Nk
in a fully dis-
tributed manner, such that C satisﬁes the required condi-
tions. One of such procedures is the Hastings rule (Zhao and
Sayed 2012), (Sayed 2014, p.492).

4For simplicity, we assume that each agent is allocated with
one task, similar to (El Bsat, Bou-Ammar, and Taylor 2017). The
extension to multiple tasks per agent is trivial.

4 Multitask Actor-Critic from Duality

Theory

In this section, we reformulate MRL as a linear program
(LP), and show that by applying dual ascent to the La-
grangian, we get a tabular model-based actor-critic method
that solves (2).

Introduce the average dynamics:

P(s(cid:48)|s, a) (cid:44) 1
N

N
(cid:88)

k=1

Pθk (s(cid:48)|s, a).

(6)

The following lemma is key in our derivations, since it allow
us to consider the multitask problem as a single MDP, with
state-action transitions given P.
Lemma 1. P is a row-stochastic matrix.

Proof. Stochastic matrices lie in a compact convex set (Horn
and Johnson 1990, p.527), so that their convex combination
lies in the same set (Boyd and Vandenberghe 2004, p.24).

Thus, we can use standard (i.e., single-task) optimal
control results (Puterman 2005, pp. 143–151) for our set-
ting. Let V denote the set of bounded real functions on
S, with componentwise partial order and norm (cid:107)v(cid:107) (cid:44)
sups∈S |v(s)|.
Corollary 1. For any stationary policy, π, the Bellman
equation for the new MDP deﬁned by P is given by:

v(s) =

(cid:88)

a∈A

(cid:32)

π(a|s)

r(s, a) + γ

(cid:88)

s(cid:48)∈S

(cid:33)

P(s(cid:48)|s, a)v(s(cid:48))

, (7)

Introduce the multitask Bellman operator T : V (cid:55)→ V:
(cid:35)
P(s(cid:48)|s, a)v(s(cid:48))

(cid:0)T v(cid:1) (s) (cid:44) max

r(s, a) + γ

(cid:88)

(cid:34)

. (8)

a∈A

s(cid:48)∈S

Similar to single task optimal control theory (Puterman
2005, Sec. 9.1), we can reformulate (2) as an LP.

minimize
v∈R|S|

µ(cid:62)v

s.t.

v(s) ≥ r(s, a) + γ

∀(s, a) ∈ S × A,

P(s(cid:48)|s, a)v(s(cid:48))

(9)

(cid:88)

s(cid:48)∈S

Since problem (9) satisﬁes Slater condition, strong-
duality holds (Boyd and Vandenberghe 2004, Sec. 5.2.3) and
the primal and dual optimal values are attained and equal.
The Lagrangian of (9) is given by:

L(v, d) = µ(cid:62)v +

(cid:88)

(cid:18)

d(s, a)

r(s, a)

(s,a)∈S×A

P(s(cid:48)|s, a)v(s(cid:48)) − v(s)

(cid:19)

,

(10)

+ γ

(cid:88)

s(cid:48)∈S

where the dual variable d (cid:44) (d(s, a))(s,a)∈S×A ∈ R|S||A| is
a nonnegative vector of length |S||A|. Let v(cid:63) denote the opti-
mal primal variable. Let d(cid:63) denote an optimal dual variable,

which might not be unique. The saddle point condition of
(10) is given by:

min
v

max
d

L(v, d) = L(v(cid:63), d(cid:63)) = max

d

min
v

L(v, d). (11)

There are multiple approaches to ﬁnd a saddle point. We fo-
cus on the dual-ascent scheme (Arrow, Hurwicz, and Uzawa
1958), which consists in alternating between: i) Finding a
primal solution, given the dual variable; and ii) ascending in
the direction of ∇dL(v, d), given the primal variable.

First, we show how to update the primal variable given d:

v ← arg min
v∈R|S|

L(v, d).

(12)

Since problem (9) is linear, if we derive the KKT conditions,
we can see that the ﬁrst-order condition holds ∀v ∈ R|S|.
Thus, the only condition that depends on v is complementary
slackness:

(cid:88)

(cid:32)

d(s, a)

r(s, a) + γ

(s,a)∈S×A

= 0.

P(s(cid:48)|s, a)v(s(cid:48)) − v(s)

(cid:33)

(cid:88)

s(cid:48)∈S

(13)

Similar to the standard single-task problem (Puterman 2005,
Sec. 6.9), it can be shown that our dual variable is the dis-
counted steady-state state-action visitation measure, so that
we can obtain the policy from d:

π(a|s) =

d(a, s)
ρ(s)

, where ρ(s) (cid:44) (cid:88)

d(a(cid:48), s).

(14)

a(cid:48)∈A

Hence, the Bellman equation (7), typically used to derive the
critic in actor-critic methods, is sufﬁcient to guarantee (13).
Second, for the dual variable, we simply perform gradient

ascent in the Lagrangian, yielding a recursion of the form:

d ← [d + α∇dL(v, d)]+ ,

(15)

where α is the step-size, [·]+ denotes projection on the non-
negative quadrant, and the ∇d denotes gradient w.r.t. dual
variable d:

∇dL(v, d) =

(cid:18) ∂L(v, d)
∂d(s, a)

(cid:19)

.

(16)

(s,a)∈S×A

Interestingly, note that the partial derivatives of the La-
grangian in (16) are indeed the so named advantage function
extended to our multitask problem:

A(s, a) (cid:44) r(s, a) + γ

(cid:88)

s(cid:48)∈S

P(s(cid:48)|s, a)v(s(cid:48)) − v(s)

=

∂L(v, d)
∂d(s, a)

.

(17)

If we learn d(cid:63), we can use (14) to obtain π(cid:63), so that recursion
(15) can be seen as an actor update. Thus, (7) and (15) deﬁne
a novel tabular model-based actor-critic method. In the fol-
lowing, we extend this approach to a model-free distributed
actor-critic method with neural network approximations.

5 Distributed Deep Actor-Critic
In order to use diffusion strategies (Sayed 2014) to derive
a distributed optimization method, we have to express the
global objective as a convex combination of each agent’s lo-
cal objective. Thus every agent can optimize its objective
from local data; and by communicating with their neighbors,
all agents converge to a common solution that optimizes the
global objective. We do this for both critic and actor.

5.1 Distributed policy evaluation: Critic
When computing the critic for large (or continuous) state-
action sets, it is common to approximate the value func-
tion with some parametric function vξ(s) ≈ v(s), where
ξ ∈ RMv denotes the parameter vector of length Mv. We
choose neural networks with multiple hidden layers (i.e.,
deep learning) as parametric approximators. Hence, we can
learn the network weights, ξ, by transforming (7) into a non-
linear regression problem:

minimize
ξ∈RMv

J(ξ) (cid:44) E

(cid:104)
(vξ (st) − yt)2(cid:105)

,

where the target values are given by:
(cid:44) r(st, at) + γ

(cid:88)

yt

P(s(cid:48)|st, at)vξ(s(cid:48)).

(18)

(19)

s(cid:48)∈S
In order to derive a diffusion-based distributed critic, we
have to reformulate the problem as minimizing the convex
combination of costs that depend only on a single task each.
The cost for each individual task takes the form:

(cid:101)Jk(ξ) (cid:44) E

(vξ (st) − yk,t)2(cid:105)
(cid:104)
where yk,t is the target from task k at time t, given by
Pθk (s(cid:48)|st, at)vξ(s(cid:48)),

yk,t = rθk (st, at) + γ

, k = 1, . . . , N,

(cid:88)

(20)

s(cid:48)∈S

such that yt = 1/N (cid:80)N
k=1 yk,t. Now, in order to obtain a
cost that is a combination of the individual costs, we can use
Jensen’s inequality to upper bound J(ξ) by another function,
(cid:101)J(ξ), and use this upper bound as surrogate cost:
(cid:101)J(ξ) (cid:44) 1
N


(vξ (st) − yk,t)2(cid:105)

(cid:101)Jk(ξ) =

N
(cid:88)

N
(cid:88)

1
N

k=1

E

(cid:104)

k=1
(cid:32)

(cid:33)2

≥ E



(vξ (st) − yk,t)

 = J(ξ).

(21)

1
N

N
(cid:88)

k=1

Now, we can apply diffusion stochastic-gradient-descent
(SGD) strategies (Sayed 2014), which consist of two steps:
adaptation and combination. During the adaptation step,
each agent performs SGD on its individual cost, (cid:101)Jk, to obtain
some intermediate-parameter update. Then, each agent com-
bines the intermediate-parameters from its neighbors. These
two steps are described by the following updates, which run
in parallel for all agents k = 1, . . . , N :

(cid:98)ξk,i+1 = ξk,i − αi+1 (cid:98)∇ξ (cid:101)Jk(ξk,i),
ξk,i+1 =

clk (cid:98)ξl,i+1,

(cid:88)

(22a)

(22b)

l∈Nk

where i is the iteration index; αi
is the step-size; and
(cid:98)∇ξ (cid:101)Jk(ξk,i) is the stochastic gradient evaluated at ξk,i, es-
timated from samples {(sk,t, ak,t, rk,t+1, sk,t+1)}Tk,i
t=0 of
the i-th episode, of
length Tk,i, gathered by the k-
th agent. We use Monte Carlo estimates for the target
yk,t = (cid:80)Tk,i
j=t γj−trk,j+1 (for simplicity), where rk,j+1 (cid:44)
rθk (sk,j, ak,j) is a shorthand. Then, the stochastic gradient
is given by:

(cid:98)∇ξ (cid:101)Jk(ξk,i) =

1
Tk,i

Tk,i
(cid:88)

t=0

∇ξvξk,i (sk,t) (cid:0)vξk,i (sk,t) − yk,t

(cid:1) .

(23)

We remark that each agent learns from its current episode,
without replay buffer, similar to A3C (Mnih et al. 2016), but
in a fully distributed fashion, as opposed as having multiple
threads updating the same neural network at a single loca-
tion.

5.2 Distributed policy gradient: Actor
For large state-action sets, it is convenient to approximate
the policy with a parametric function. Again, we consider
expressive deep neural networks for the policy. From (14),
we can rewrite the Lagrangian as:

L(v, π, ρ) = µ(cid:62)v +

(cid:88)

π(a|s)ρ(s)A(s, a).

(24)

(s,a)∈S×A

Let πw ≈ π denote the parametric approximation of the
actual policy, where w ∈ RMπ is the parameter vector of
length Mπ. Replacing π with πw in (24), we obtain an ap-
proximate Lagrangian, (cid:101)L(v, w, ρ) ≈ L(v, π, ρ), of the form:

(cid:101)L(v, w, ρ) = µ(cid:62)v +

(cid:88)

(s,a)∈S×A

πw(a|s)ρ(s)A(s, a).

(25)

Thus, in order to approximate the saddle point condition
(11), we can move in the ascent direction of the gradient
of (25) w.r.t. the policy parameter, which is given by:

∇w (cid:101)L(v, w, ρ) = ∇πw (cid:101)L(v, w, ρ)∇wπw

= (cid:0)∇wπw(a1|s1), . . . , ∇wπw(a|A||s|S|)(cid:1)(cid:62)

(cid:32)

(cid:33)

∂ (cid:101)L(v, w, ρ)
∂πw(a|s)

(s,a)∈S×A

(cid:88)

∇wπ(a|s)

∂L(v, w, ρ)
∂πw(a|s)

=

=

=

(s,a)∈S×A
(cid:88)

ρ(s)

(cid:88)

s∈S
(cid:88)

s∈S

ρ(s)

a∈A
(cid:88)

a∈A

∇wπw(a|s)A(s, a)

πw(a|s)∇w log πw(a|s)A(s, a), (26)

where we used: ∇wπw(a|s) = πw(a|s)∇w log πw(a|s).

Interestingly, (26) is similar to previous policy gradient
theorems (Sutton et al. 1999), with the important difference
that it yields the advantage function explicitly; while previ-
ous works motivated the baseline mainly as a variance re-
duction technique (Williams 1992; Bhatnagar et al. 2009).

(cid:98)wk,i+1 = wk,i + βi+1 (cid:98)∇w (cid:101)Lk(vξk,i , wk,i, ρ),
clk (cid:98)wl,i+1,
wk,i+1 =

(cid:88)

(30a)

(30b)

15:
16:

l∈Nk

In order to derive a fully distributed actor, let us write the
multitask advantage function (17) as the convex combina-
tion of advantage functions for the individual tasks:

A(s, a) =

1
N

N
(cid:88)

k=1

Ak(s, a) (cid:44) rθk (s, a) + γ

Ak(s, a),

(27)

(cid:88)

s(cid:48)∈S

Pθk (s(cid:48)|s, a)v(s(cid:48)) − v(s). (28)

Hence, we write the approximate Lagrangian for each task:
(cid:101)Lk(v, w, ρ) (cid:44) µ(cid:62)
θk

πw(a|s)ρ(s)Ak(s, a), (29)

v +

(cid:88)

(s,a)∈S×A

such that (cid:101)L(v, w, ρ) = 1
N

(cid:80)N

k=1 (cid:101)Lk(v, w, ρ) .

Similar to the critic, once we have expressed the multitask
approximate Lagrangian as the convex combination of the
approximate Lagrangian of each individual task, we can ap-
ply diffusion SGD to perform the actor update, with smaller
step-size, βi+1 ≤ αi+1, to approximate convergence of the
critic at every actor update:

where each agent estimates its stochastic gradient as:

(cid:98)∇w (cid:101)Lk(vξk,i , w, ρ) =

1
Tk,i

Tk,i
(cid:88)

t=0

∇w log πw(ak,t|sk,t) (cid:98)Ak,t,

(31)

and (cid:98)Ak,t can be any approximation of the advantage func-
tion (Schulman et al. 2017). We use the simple estimate:

(cid:98)Ak,t =

Tk,i
(cid:88)

j=t

γj−trk,j+1 − vξk,i (sk,t).

(32)

Two remarks: i) In order to simplify the implementation,
we set the target yk,t to be the empirical return, so that the
stochastic gradient of the critic in (23) is the negative advan-
tage estimate: (cid:98)∇ξ (cid:101)Jk(ξk,i) = − (cid:98)Ak,t. ii) Note that replacing
ξk,i with ξk,i+1 in (30a)–(30b) and (31)–(32), in a Gauss-
Seidel fashion, might lead to faster convergence.

A detailed description of Diff-DAC is given in Algorithm

1.

6 Numerical Experiments
We evaluate the performance of Diff-DAC on three MRL
problems of varying levels of difﬁculty. We use γ = 0.99
for all tasks:

Cart-pole balance: We use the OpenAI Gym (Brockman
et al. 2016) implementation, but with continuous force. The
action follows a Gaussian distribution with mean in the inter-
val [−10, 10]. The episode ﬁnishes when the pole is beyond
12 degrees from vertical, cart moves more than 2.4 units
from the center, or run for 200 time-steps. The single task
uses parameters (0.1, 0.5, 1.0) for the pole mass, pole half-
length and cart mass, respectively. The MRL problem con-
sists of 25 tasks: pole mass in {0.1, 0.325, 0.55, 0.775, 1},

Algorithm 1: Diff-DAC. This algorithm runs in par-
allel at every agent k = 1, . . . , N .
Input: Maximum number of episodes E, maximum
number of steps per episode T , learning rate
sequences (αi, βi).
1: Initialize critic, vξk,0, and actor, πwk,0, networks,

∀k ∈ N .

Initialize empty trajectory, Mk = {}.
Initialize step counter: t = 0.
Observe sk,0.
while t < T and not terminal state:
Select action ak,t ∼ πwk,t (·|sk,t).
Execute ak,t and observe rk,t+1 and sk,t+1.
Store tuple (sk,t, ak,t, rk,t+1, sk,t+1) in Mk.
Update step counter: t ← t + 1.

2: Initialize episode counter, i = 0.
3: while i < E:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:

end while
for each sample t ∈ Mk:

Compute advantage function:
(cid:98)Ak,t = (cid:80)|Mk|

j=t γj−trk,j+1 − vξk,i (sk,t)

end for
Compute distributed critic gradient:

αi+1
|Mk|

|Mk|
(cid:88)

t=0

∇ξvξk,i (sk,t) (cid:98)Ak,t

(cid:98)ξk,i+1 = ξk,i +

ξk,i+1 =

(cid:88)

l∈Nk

clk (cid:98)ξl,i+1

17:

Compute distributed actor update:

(cid:98)wk,i+1 = wk,i

+

βi+1
|Mk|

wk,i+1 =

(cid:88)

l∈Nk

clk (cid:98)wl,i+1

|Mk|
(cid:88)

t=0

∇w log πwk,i (ak,t|sk,t) (cid:98)Ak,t

Update episode counter: i ← i + 1.

18:
19: end while
Return: Critic and actor weights: ξk,E, wk,E.

pole length in {0.05, 0.1625, 0.275, 0.3875, 0.5}, and cart
mass 1.

Inverted pendulum: The pendulum consists of a
rigid pole and an actuated joint, with maximum torque
clipped to interval [−2, 2]. The pendulum starts at a ran-
dom angle in [−π, π], with uniform distribution. The
to take the pendulum to the upright posi-
goal
tion and balance. The MRL problem consists of 25
tasks with mass in {0.8, 0.9, 1.0, 1.1, 1.2}, and length in
{0.8, 0.9, 1.0, 1.1, 1.2}. The single task pole mass and
length are (1.0, 1.0).

is

Cart-pole swing-up: We extend cart-pole balance to the
case where the pole starts from the bottom and the task is to

swing up the pole to the upright position and balance. The
reward function is r = 2
1+ed + cos(ψ), where d is the Eu-
clidean distance of the pole from the track center and upright
position, and ψ is the pole angle. This is a much more difﬁ-
cult task than standard cart-pole and more difﬁcult than the
inverted pendulum due to more complex dynamics. The cart-
pole swing-up MRL problem consists of 25 tasks, where
pole mass is in {0.1, 0.2, 0.3, 0.4, 0.5}, pole half-length is
in {0.2, 0.4, 0.6, 0.8, 1.0}, and cart mass is 0.5. The single
task uses parameters (0.5, 0.25, 0.5) for the pole mass, pole
half-length and cart mass respectively.

We compare Diff-DAC with Dist-MTLPS for the MRL
problem in the cart-pole balance environment. In particu-
lar, we compare against two variants of Dist-MTLPS, which
consist in using two standard policy search methods, namely
Reinforce (Williams 1992) and PoWER (Kober and Peters
2009), for solving the individual tasks. We only compare
Diff-DAC with Dist-MTLPS in the cart-pole balance task,
since the other two environments are uncontrollable with lin-
ear policies from raw data. Our goal is to compare the per-
formance of the single but expressive neural network policy
provided by Diff-DAC with the task-specialised but less ex-
pressive linear policies provided by Dist-MTLPS.

We also compare Diff-DAC with Cent-AC, which has
only one agent (central coordinator) that gathers and pro-
cess samples from all the tasks synchronously and has the
same neural network architectures and hyperparameters as
Diff-DAC. We remark that we use two versions of exactly
the same vanilla actor-critic algorithm, where their only dif-
ference is whether there is a single agent with access to all
the data (Cent-AC) or multiple networked agents with access
to local datasets (Diff-DAC).

Although experimenting with more environments and
benchmarking with more algorithms would be helpful, test-
ing in these simple environments is already useful, since
they illustrate the behavior of the algorithms, without hav-
ing to handle complex neural network architectures.

The network consists of N = 25 agents, randomly
deployed in a 2D world, with average degree |N | (cid:44)
(cid:80)N
k=1 |Nk| ≈ 4.2 (connectivity is determined by the dis-
tance between agents). For Figure 5, we also include two ad-
ditional networks of N = 25 and |N | = 7.4, and N = 100
and |N | = 20. Matrix C was obtained with the Hastigs-rule
(Sayed 2014, p.492) in all cases, so that (4)–(5) hold. We
remark that the network topologies used in the experiments
are not related to any form of task similarity, but they just
reﬂect the sparse connectivity that appears naturally when
agents and data are geographically distributed.

The critic and actor neural networks consist of 2 hidden
layers of 400 neurons each with ReLu activation functions.
The output layer for the critic network is linear. The output
of the actor network includes a tanh activation function that
determines the mean of a normal distribution, and a Softplus
activation function that determines the variance for the nor-
mal distribution. We also included an extra penalty in the
loss function equal to the entropy of the policy, with penalty
coefﬁcient 0.0005. Thus, both the mean and the variance are
learned for the policy. We use ADAM optimizer (Kingma

and Ba 2015), with learning rate 0.01 for critic and 0.001
for actor. Diff-DAC performs a learning step (i ← i + 1)
every ﬁfth episode.

The return of the tasks is reported as the (udiscounted) to-
tal rewards every 20 episodes and is averaged over 10 test
episodes at each point. Figures show the median and ﬁrst
and third quartiles of the distribution of the average return
of all the tasks. Each epoch consists of 5 episodes per epoch
and per agent in Diff-DAC, and 5N episodes in total per
epoch for Dist-MTLPS and Cent-AC, so that the three algo-
rithms simulate the same number of episodes. Every experi-
ment was repeated at least 6 times.

In Figure 2 (bottom), we observe that Diff-DAC learns
faster
than Dist-MTLPS Reinforce and reaches better
asymptotic performance. Dist-MTLPS PoWER converges
faster than Diff-DAC, however the asymptotic performance
of the latter is much better. This is remarkable since Dist-
MTLPS learns one different policy per task, while Diff-DAC
learns a single policy common to all tasks.

We also observe that Diff-DAC converges slower than
the Cent-AC, which was expected since the latter can com-
pute the gradients with data from all tasks at every itera-
tion, while the former has to wait until the parameters are
diffused across the network. However, Diff-DAC usually
achieves higher asymptotic performance and less variance,
in both single task and multitask problems, which was also
expected due to the already reported enhanced robustness
against local optima of diffusion strategies for nonconvex
optimization problems (Valcarcel Macua 2017, Ch. 4). This
is shown in Figure 2 (top), where Cent-AC tends to reach
the optimal faster, but is unstable. We guess that this may
be alleviated by adding a replay buffer (Mnih et al. 2013;
Lillicrap et al. 2015) or randomizing agents’ samples to re-
duce their correlation, simulating asynchronocity (similar to
asynchronous methods like A3C (Mnih et al. 2016)). How-
ever, our goal with these experiments is not to compare with
SOTA centralized algorithms—which use several advance-
ments to stabilise or improve performance—, but to evaluate
whether diffusion is not only a feasible distributed strategy
but also a valid alternative to stabilize learning. Thus, we de-
cided to use vanilla central actor-critic vs. vanilla distributed
actor-critic, where their only difference is having a single
agent with all the data vs. having multiple agents with local
datasets.

Finally, Figure 5 shows a simple experiment that stud-
ies the inﬂuence of the network topology. We evaluate Diff-
DAC for the single-task cart-pole balance problem and see
that for the same network size, N = 25, a relatively sparse
network, |N | ≈ N/6, achieves performance similar to a
more dense network, |N | ≈ N/3. In addition, we see that
larger number of agents N = 100 improves the asymptotic
performance.

7 Conclusions

We considered MRL where tasks are parametrized MDPs
with parameters drawn from some distribution, and we de-
rived an algorithm that learns a policy that performs well
on average for the observed set of tasks. We deﬁned aver-

1

n
r
u
t
e
r

0.5

0

1

0.8

0.6

0.4

0.2

0

n
r
u
t
e
r

Centralized AC

Diff-DAC

0

200

400

600

800

Dist-MTLPS PoWER
Dist-MTLPS Reinforce
Centralized AC
Diff-DAC

0

200

400

600

800

epochs

Figure 2: Cart-pole balance with continuous action for
single-task (top) and multitask (bottom). Cent-AC is faster
than distributed approaches, but Diff-DAC achieves the best
asymptotic performance.

Centralized AC

Diff-DAC

1

n
r
u
t
e
r

0.5

0

1

n
r
u
t
e
r

0.5

0

2,000

4,000

6,000

8,000

Centralized AC

Diff-DAC

0

0

2,000

4,000

6,000

8,000

epochs

Figure 3: Inverted pendulum for single-task (top) and mul-
titask (bottom). Diff-DAC learns in both the single-task
and multitask robustly. The central method learns the task
quickly but is unstable.

age global variables that allowed us to use standard optimal
control theory and reformulate our MRL problem as an LP.
From this LP, we derived an exact, model-based actor-critic

Centralized AC

Diff-DAC

0

2,000

4,000

6,000

8,000

Centralized AC

Diff-DAC

1

n
r
u
t
e
r

0.5

0

1

n
r
u
t
e
r

0.5

0

0

2,000

4,000

6,000

8,000

epochs

Figure 4: Cart-pole swing-up for single-task (top) and mul-
titask (bottom). Diff-DAC learns to swing-up and balance
the pole consistently, while Cent-AC achieves much inferior
performance.

n
r
u
t
e
r

1

0.8

0.6

0.4

0.2

0

N = 25, N = 4.2
N = 25, N = 7.4
N = 100, N = 20

0

100

200

300

400

epochs

Figure 5: Inﬂuence of network topology in single-task cart-
pole balance with continuous action. Diff-DAC combines
the experience of all agents, relatively insensitive to network
sparsity.

algorithm as an instance of dual ascent for ﬁnding the sad-
dle point of the Lagrangian. This saddle-point derivation is
interesting in itself and provides novel insights in the actor-
critic framework. By approximating the exact method with
deep neural networks, we obtained the Diff-DAC algorithm,
which can scale to large number of tasks.

Simulation results showed that Diff-DAC can be faster
and achieve higher asymptotic performance than the state
of the art distributed algorithm for solving the MRL prob-
lem (i.e., Dist-MTLPS). This is a remarkable result since
the Diff-DAC agents converge to a single common pol-
icy that behaves better than the task-dependent linear poli-
cies obtained by Dist-MTLPS. Moreover, Diff-DAC can

solve complex problems that are uncontrollable from raw
data by linear policies, while Dist-MTLPS requires (usu-
ally costly) feature engineering. Diff-DAC is also very sta-
ble and achieves similar or usually higher asymptotic per-
formance than the centraliized approach in both single and
multitask problems. This suggests that the sparse connectiv-
ity among agents induces a regularization effect that helps
them to achieve better local optimum. We consider this form
of regularization an interesting line of rsearch.

Diff-DAC can be also extended to zero-shot learning by
taking the task parameter θk as an additional input to each
agent’s value/policy networks, so that when a new task ap-
pears, it can input its parameter in the neural networks and
adapt its behvarior to this task without further training.

Finally, it would be interesting to apply the proposed
framework to derive distributed variants of other algorithms
like PPO (Schulman et al. 2017).

8 Acknowledgements
We thank Haitham Bou-Ammar and Peter Vrancx for in-
sightful discussions.

S.;

Sutton, R.

and Vanden-
2004. Convex Optimization. Cambridge

References
[Arrow, Hurwicz, and Uzawa 1958] Arrow, K. J.; Hurwicz,
L.; and Uzawa, H. 1958. Studies in Linear and Non-linear
Programming. Stanford University Press.
[Bhatnagar et al. 2009] Bhatnagar,
S.;
Ghavamzadeh, M.; and Lee, M. 2009. Natural actor-critic
algorithms. Automatica 45(11):2471–2482.
[Bou-Ammar et al. 2014] Bou-Ammar, H.; Eaton, E.; Ru-
volo, P.; and Taylor, M. 2014. Online multi-task learning
for policy gradient methods. In Proc. Int. Conf. on Machine
Learning (ICML), 1206–1214.
[Boyd and Vandenberghe 2004] Boyd, S.,
berghe, L.
University Press.
[Brockman et al. 2016] Brockman, G.; Cheung, V.; Petters-
son, L.; Schneider, J.; Schulman, J.; Tang, J.; and Zaremba,
W. 2016. OpenAI Gym.
[El Bsat, Bou-Ammar, and Taylor 2017] El Bsat, S.; Bou-
Ammar, H.; and Taylor, M. E. 2017. Scalable multitask
In AAAI Conf. on
policy gradient reinforcement learning.
Artiﬁcial Intelligence (AAAI), 1847–1853.
[Horn and Johnson 1990] Horn, R., and Johnson, C. 1990.
Matrix Analysis. Cambridge University Press.
[Kar, Moura, and Poor 2013] Kar, S.; Moura, J. M. F.; and
Poor, H. V. 2013. QD-learning: A collaborative distributed
strategy for multi-agent reinforcement learning through con-
sensus + innovations. IEEE Transactions on Signal Process-
ing 61(7):1848–1862.
[Karp 1972] Karp, R. M. 1972. Reducibility among combi-
natorial problems. In Complexity of computer computations.
Springer. 85–103.
2015.
[Kingma and Ba 2015] Kingma, D., and Ba, J. L.
Adam: A method for stochastic optimization. In Proc. Int.
Conf. on Learning Representations (ICLR).

[Kober and Peters 2009] Kober, J., and Peters, J. R. 2009.
Policy search for motor primitives in robotics. In Advances
in Neural Information Processing Systems (NIPS), 849–856.
[Lillicrap et al. 2015] Lillicrap, T. P.; Hunt, J. J.; Pritzel, A.;
Heess, N.; Erez, T.; Tassa, Y.; Silver, D.; and Wierstra, D.
2015. Continuous control with deep reinforcement learning.
[Mnih et al. 2013] Mnih, V.; Kavukcuoglu, K.; Silver, D.;
Graves, A.; Antonoglou, I.; Wierstra, D.; and Riedmiller, M.
2013. Playing atari with deep reinforcement learning. arXiv
preprint arXiv:1312.5602.
[Mnih et al. 2016] Mnih, V.; Badia, A. P.; Mirza, M.; Graves,
A.; Lillicrap, T.; Harley, T.; Silver, D.; and Kavukcuoglu,
K. 2016. Asynchronous methods for deep reinforcement
learning. In International Conference on Machine Learning,
1928–1937.
[Parisotto, Ba, and Salakhutdinov 2016] Parisotto, E.; Ba,
J. L.; and Salakhutdinov, R. 2016. Actor-mimic: Deep mul-
titask and transfer reinforcement learning. In Proc. Int. Conf.
on Learning Representations (ICLR).
2016.
[Pfau and Vinyals 2016] Pfau, D., and Vinyals, O.
Connecting generative adversarial networks and actor-critic
methods. arXiv preprint arXiv:1610.01945.
2005. Markov Deci-
[Puterman 2005] Puterman, M. L.
sion Processes: Discrete Stochastic Dynamic Programming.
John Wiley & Sons, 2nd edition.
[Sayed 2014] Sayed, A. H. 2014. Adaptation, learning, and
optimization over networks. Foundations and Trends in Ma-
chine Learning 7(4-5):311–801.
[Schulman et al. 2017] Schulman, J.; Wolski, F.; Dhariwal,
P.; Radford, A.; and Klimov, O. 2017. Proximal policy op-
timization algorithms. arXiv preprint arXiv:1707.06347.
[Sutton et al. 1999] Sutton, R. S.; Mcallester, D.; Singh, S.;
and Mansour, Y. 1999. Policy gradient methods for re-
inforcement learning with function approximation. In Ad-
vances in Neural Information Processing Systems (NIPS),
1057–1063.
[Taylor and Stone 2009] Taylor, M. E., and Stone, P. 2009.
Transfer learning for reinforcement learning domains: A sur-
vey. Journal of Machine Learning Research 10(Jul):1633–
1685.
[Teh et al. 2017] Teh, Y. W.; Bapst, V.; Czarnecki, W. M.;
Quan, J.; Kirkpatrick, J.; Hadsell, R.; Heess, N.; and Pas-
canu, R. 2017. Distral: Robust multitask reinforcement
learning. arXiv preprint arXiv:1707.04175.
[Tutunov, Bou-Ammar, and Jadbabaie 2016] Tutunov,
Bou-Ammar, H.; and Jadbabaie, A.
distributed newton method for reinforcement learning.
IEEE Conf. on Decision and Control (CDC), 1003–1008.
[Valcarcel Macua et al. 2015] Valcarcel Macua, S.; Chen, J.;
Zazo, S.; and Sayed, A. H. 2015. Distributed policy evalu-
ation under multiple behavior strategies. IEEE Transactions
on Automatic Control 60(5):1260–1274.
[Valcarcel Macua 2017] Valcarcel Macua, S. 2017. Dis-
tributed optimization, control and learning in multiagent
networks. Ph.D. Dissertation, Universidad Polit´ecnica de
Madrid.

R.;
2016. An exact
In

[van der Meulen 2015] van der Meulen, R. 2015. Gartner
says 6.4 billion connected ”things” will be in use in 2016,
up 30 percent from 2015. http://www.gartner.com/
newsroom/id/3165317.
[Wei and Ozdaglar 2012] Wei, E., and Ozdaglar, A. 2012.
Distributed alternating direction method of multipliers. In
IEEE Annual Conf. Decision and Control (CDC), 5445–
5450.
[Williams 1992] Williams, R. J. 1992. Simple statistical
gradient-following algorithms for connectionist reinforce-
ment learning. Machine learning 8(3-4):229–256.
[Zhao and Sayed 2012] Zhao, X., and Sayed, A. H. 2012.
Performance limits for distributed estimation over LMS
adaptive networks. IEEE Transactions on Signal Process-
ing 60(10):5107–5124.
[Zhao and Sayed 2015] Zhao, X., and Sayed, A. H. 2015.
Asynchronous adaptation and learning over networks—part
IEEE Transactions on
i: Modeling and stability analysis.
Signal Processing 63(4):811–826.

