POSTER: AST-Based Deep Learning for Detecting
Malicious PowerShell

Gili Rusak, Abdullah Al-Dujaili, Una-May O’Reilly
CSAIL, MIT, USA
gili@stanford.edu,aldujail@mit.edu,unamay@csail.mit.edu

8
1
0
2

t
c
O
3

]
E
S
.
s
c
[

1
v
0
3
2
9
0
.
0
1
8
1
:
v
i
X
r
a

ABSTRACT
With the celebrated success of deep learning, some attempts to
develop effective methods for detecting malicious PowerShell pro-
grams employ neural nets in a traditional natural language pro-
cessing setup while others employ convolutional neural nets to
detect obfuscated malicious commands at a character level. While
these representations may express salient PowerShell properties,
our hypothesis is that tools from static program analysis will be
more effective. We propose a hybrid approach combining tradi-
tional program analysis (in the form of abstract syntax trees) and
deep learning. This poster presents preliminary results of a fun-
damental step in our approach: learning embeddings for nodes of
PowerShell ASTs. We classify malicious scripts by family type and
explore embedded program vector representations.

CCS CONCEPTS
• Security and privacy → Malware and its mitigation; • Com-
puting methodologies → Neural networks;

KEYWORDS
powershell scripts; malware; deep learning; abstract syntax trees

ACM Reference Format:
Gili Rusak, Abdullah Al-Dujaili, Una-May O’Reilly. 2018. POSTER: AST-
Based Deep Learning for Detecting Malicious PowerShell. In Proceedings of
2018 ACM SIGSAC Conference on Computer & Communications Security (CCS
’18). ACM, New York, NY, USA, 3 pages. https://doi.org/10.1145/3243734.
3278496

1 INTRODUCTION
PowerShell is a popular scripting language and a command-line
shell. Originally only compatible with Windows, Powershell has
gained a multitude of users over the last several years, especially
with its cross-platform and open-source version, PowerShell Core.
PowerShell is built on the .NET framework and allows third-party
users to write cmdlets and scripts that they can disseminate to others
through PowerShell [4]. Along with increasing usage, PowerShell
has also unfortunately been subject to malicious attacks through
different types of computer viruses [10]. PowerShell scripts can
easily be encoded and obfuscated making it increasingly difficult
to detect malicious activity [6]. According to the FireEye Dynamic
Threat Intelligence (DTI) cloud, malicious PowerShell attacks have

Permission to make digital or hard copies of part or all of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for third-party components of this work must be honored.
For all other uses, contact the owner/author(s).
CCS ’18, October 15–19, 2018, Toronto, ON, Canada
© 2018 Copyright held by the owner/author(s).
ACM ISBN 978-1-4503-5693-0/18/10.
https://doi.org/10.1145/3243734.3278496

Figure 1: AST-based deep learning for malicious PowerShell detec-
tion.

been rising throughout the past year [5]. Detecting these malicious
behaviors with Powershell can be challenging for a number of rea-
sons. Attackers can perform malicious activity without deploying
binaries on the attacked machines [10]. Additionally, PowerShell is
automatically downloaded on Windows machines. Further, attack-
ers have shifted towards sophisticated obfuscation techniques that
make detecting malicious scripts difficult [9]. Notably, attackers use
the -EncodedCommand flag to pass Base-64 encoded commands by-
passing the Powershell execution regulations. Recently, emerging
research has deployed machine learning based models to detect mal-
ware in general [1, 7] and malicious PowerShell in particular [5, 6],
where deep learning is employed to analyze malicious PowerShell
scripts inspired by natural language understanding and computer
vision approaches. Though these approaches may support learn-
ing the features necessary to distinguish malicious scripts, with
the wide range of obfuscation options used in Powershell scripts,
we speculate that they might overlook some of the rich structural
data in the codes. We therefore propose to break away from text-
based deep learning and to use structure-based deep learning. Our
proposition is motivated by the successful use of Abstract Syntax
Trees (ASTs) in manually crafting features to detect obfuscated
PowerShell scripts [2]. While this use case does consider structural
information, manually-crafted features can be vulnerable to high-
level obfuscation (e.g., AST-based techniques [3]). Therefore, in this
paper, we propose to learn representations of PowerShell scripts in
an end-to-end deep learning framework based on their parsed ASTs.
Specifically, we build on the work of Peng et al. [8] to learn repre-
sentations (embeddings) for AST nodes. These representations can
then be incorporated in any of the tasks associated with PowerShell
analysis, including malware detection as shown in Fig. 1.

2 BACKGROUND

Deep Learning for PowerShell. Hendler et al. [6] proposed to use
several deep learning models to distinguish benign and malicious
PowerShell commands. With a dataset of 6, 290 malicious and 60, 098
clean PowerShell commands, they implemented both Natural Lan-
guage Processing (NLP) based detectors and detectors based on
character-level Convolutional Neural Networks (CNNs) for text
classification and treated the text as a raw signal at the character

PowerShell ScriptsParsed Abstract Syntax Trees (ASTs)Unsupervised Representation LearningNeural Net (N)...Task-Specific Supervised LearningNeural Net (N)maliciousmaliciousbenign10 
 
 
 
 
 
level. According to their results on different architectures (including
a 9-layer CNN, a 4-layer CNN, and a long short-term memory net),
all of the detectors obtained high AUC levels between 0.985 and
0.990. The authors suggest that the best performing classifier was
an ensemble classifier that combined traditional NLP techniques
with a CNN-based classifier. However, worse performance on their
held out test set was observed with higher false positive rates. In
a recent blog, FireEye [5] apply a supervised classifier to detect
malicious PowerShell commands leveraging a prefix-tree based
stemmer for the PowerShell syntax. The input to the machine learn-
ing model is a vectorized representation of the stemmed tokens.
The above propositions focused on detecting malicious PowerShell
commands rather than scripts which are a more difficult challenge.
Moreover, the features are derived from the commands’ textual
form, which may not capture the command’s functional semantics
and are prone to character frequency tampering.

AST for PowerShell. Bohannon and Holmes [2] studied obfus-
cated PowerShell scripts. They presented a baseline character fre-
quency analysis and used Cosine similarity to detect obfuscation
in PowerShell scripts. They identify promising preliminary results
and note a significant difference between obfuscated and non-
obfuscated codes. Like [6], the authors run into the issue of false
negatives and suggest taking advantage of PowerShell Abstract
Syntax Trees (ASTs) since PowerShell’s API allows for simple AST
extraction. Based on the parsed ASTs, the authors crafted 4098
distributional features (e.g., distribution of AST types). The engi-
neered feature vectors led to robust obfuscation classifiers on the
test set. Similar to the character frequency tampering challenge in
text-based representations, the AST-based distributional features
can be vulnerable to AST-based obfuscation [3].

Deep Learning with AST. Peng et al. [8] developed a technique to
build program vector representations, or embeddings, of different
abstract syntax node types based on a corpus of ASTs for deep
learning approaches. They used nearest-neighbors similarity and
k-means clustering to determine the accuracy of their resulting
embeddings. They reported qualitative and quantitative results
suggested that deep learning is a promising direction for program
analysis. In this project, we build on [8]’s findings and further study
this claim.

3 METHODS
To learn a robust representation of PowerShell scripts, we take a
hybrid approach combining traditional program analysis and deep
learning approaches. We convert the PowerShell scripts to their
AST counterparts, and then build embedding vector representations
of each AST node type based on a corpus of PowerShell programs.

PowerShell scripts to Abstract Syntax Trees. The considered dataset
was composed of Base-64 encoded PowerShell scripts. Thus, as a
preprocessing step, each PowerShell script/command was decoded.
Given a decoded PowerShell script, we determined its abstract syn-
tax tree representation by recursively traversing the script’s prop-
erties using [object.PSObject.Properties] and storing items
of type [System.Management.Automation.Language.Ast]. We
stored the parent-child relationships among the AST nodes in a
depth-first-search order as a text file. There were 37 different AST

node types. With multi-core machines, ASTs generation can be
carried out in parallel.

Preliminary Analysis of Abstract Syntax Trees. After collecting the
tree structures of our PowerShell scripts corpus, we conducted an
exploratory analysis on the ASTs and their statistics. Furthermore,
we used a random forest classifier to label a PowerShell script by
its malware family type. As will be shown in Section 4, few simple
AST-based features were indicative of the malware family.

Abstract Syntax Trees to Vector Representations. Having outlined
our approach to the problem of malicious PowerShell programs,
we herein take a fundamental step towards learning robust AST-
based representations. We employed [8, Algorithm 1] on the Pow-
erShell dataset to learn real-valued vector representations of the
62 AST node types. To this end, we parsed each constructed AST
to a list of data structures to which we refer by subtrees. A sub-
tree of an AST represents a non-leaf node and its immediate child
nodes, each labeled by its type. Next, we shuffled the subtrees to
avoid reaching a local minima specific to a given script. For each
subtree, with parent node p and n child nodes {ci }1≤i ≤n , define
li = (# leaves of ci )/(# leaves of p). Similar to [8], we define a loss
function to measure how well the learnt vectors are describing the
subtrees. Let T be the number of distinct AST types whose embed-
dings we are trying to learn. Let V ∈ RNf ×T be the embedding
matrix of the AST node types and define vec(p) ⊂ V ∈ RNf ×1 as
the embedding vector that corresponds to the type of node p. The
same holds for {vec(ci )}1≤i ≤n . Additionally, let Wl ,Wr ∈ RNf ×Nf
be weight matrices and b ∈ RNf ×1 be a bias vector. Further, define
Wi as the weights matrix of node i as

Wi = n − i
n − 1

Wl

+ i − 1
n − 1

Wr .

Let the distance metric d be defined by

d = || vec(p) − tanh(

n
(cid:213)

i=1

liWi · vec(ci ) + b)||2
2 .

(1)

(2)

Let dc be the distance function applied on a negative example of
a given subtree where k ≤ n of the children nodes {ci }1≤i ≤n are
changed to different AST types. Given the parameters: V ,Wl ,Wr , b,
we optimized max(0, △ + d − dc ) , the distance between a normal
subtree’s construction and that of a corrupted adversarial subtree.
We used the Adam optimizer to find optimal embedding vectors
and adjust the hyperparameters △ and k. By default, △ = 3, k = 3.

4 EXPERIMENTS

Setup. We utilize a corpus of hand-annotated and thoroughly
analyzed malicious PowerShell scripts [9]. This dataset consists of
4, 079 known malicious Powershell scripts annotated and classified
based on their family types. These include ShellCode Inject, Power-
fun Reverse, and others. The code repository will be made available
at https://github.com/ALFA-group.

Experiment 1: Malware Family Classification. As a preliminary
experiment, we attempted to classify malicious PowerShell scripts
by family types. We used properties from the abstract syntax tree
representation to conduct this classification. Specifically, we used
only two features: depth and number of nodes per PowerShell AST.

Figure 2: Heatmap for the confusion matrix results on the held out
test set in the Malware Family Classification experiment.

Figure 3: Dendrogram of node types and their relationships in the
Learning Node Representations experiment.

We used the family types as the labels of our classifier. Since the
dataset used suffered from a class-imbalance problem, we weighted
the classes when training the classifier (in this case a random forest
classifier) based on how many examples each class contained. After
hyperparameter tuning on maximum depth, we fit a classifier with
a maximum depth of 11. Due to sparsity of the dataset we used, we
limited our experiment to family types with more than 40 examples
per family, resulting in eight different families. We randomly split
the data into 70/30 train/test split. The confusion matrix of the
held-out test data is shown in Fig. 2. To our surprise, we found that
two naive AST-based features—AST node count and AST depth—
were enough to achieve an 3-fold cross-validation accuracy of 85%.
Notably, even very simple features performed well because of the
inherent program analysis background. This serves as a motivating
example for the effectiveness of ASTs and exemplifies the power of
harnessing ASTs to understand program representations.

Experiment 2: Learning AST Node Representations. Extending
these results, we build program vector representations of the dataset.
As a case study, we analyzed a random sample of 10, 000 malicious
subtrees from the total of 107, 000 subtrees in the malicious Power-
Shell corpus. This collection contained 37 distinct AST node types
comprising 175 unique subtrees. We built the embedding matrix for
these node types using the method described earlier. We trained
our model for 200 epochs until the loss stabilized towards 0. The
qualitative results are summarized in a dendrogram in Fig. 3. It
shows the relationships of embeddings with similar ones. Notably,
the TryStatement and CatchClause node types are neighbors, as
well as ForStatement and DoWhileStatement, and Command and
CommandParameter. This is promising since one would expect such
commands to serve similar functions in scripts. This preliminary
experiment has limitations: for example, one would expect the
ForEachStatement to land near the ForStatement as well. Addi-
tional training on the full malicious dataset is required to fully
assess the validity of these methods. As next steps, we hope to
make use of these embeddings to build robust classifiers to clas-
sify a malicious script based on family. Afterwards, we will use
these embeddings to build robust classifiers to determine if a given
PowerShell script is malicious or not.

5 CONCLUSION
PowerShell scripts have targeted industries including Higher Edu-
cation, High Tech, Professional and Legal Services, and Healthcare.
This paper motivated the use of static program analysis (in the
form of abstract syntax trees) to supplement deep learning tech-
niques with rich structural information about the code, instead
of text-based representations. We seek to use deep learning in an
end-to-end unsupervised framework to identify intrinsic common
patterns in our programs since even ASTs can be obfuscated. We
saw that the depth and node count of an AST were enough to dis-
tinguish malware families and we took our first fundamental step
in learning representations of PowerShell programs.

ACKNOWLEDGEMENT
This work was supported by the MIT-IBM Watson AI Lab and CSAIL Cy-
berSecurity Initiative. We thank Palo Alto Networks for the dataset.

REFERENCES
[1] Abdullah Al-Dujaili et al. 2018. Adversarial Deep Learning for Robust Detection
of Binary Encoded Malware. In 2018 IEEE Security and Privacy Workshops (SPW).
IEEE, 76–82.

[2] Daniel Bohannon and Lee Holmes. 2017. Revoke-Obfuscation: PowerShell
Obfuscation Detection Using Science. https://www.fireeye.com/blog/threat-
research/2017/07/revoke-obfuscation-powershell.html. (2017).

[3] Ryan Cobb. 2017.

AbstractSyntaxTree-Based PowerShell Obfuscation.

https://cobbr.io/AbstractSyntaxTree-Based-PowerShell-Obfuscation.html.
(2017).

[4] JuanPablo Jofre et al. 2018.

PowerShell Scripting | Microsoft Docs.

https://docs.microsoft.com/en-us/powershell/scripting/powershell-
scripting?view=powershell-6. (2018).

[5] Victor Fang. 2018. Malicious PowerShell Detection via Machine Learning.
https://www.fireeye.com/blog/threat-research/2018/07/malicious-powershell-
detection-via-machine-learning.html. (2018).

[6] Danny Hendler et al. 2018. Detecting Malicious PowerShell Commands using
Deep Neural Networks. In Proceedings of the 2018 on Asia Conference on Computer
and Communications Security. ACM, 187–197.

[7] Alex Huang et al. 2018. On Visual Hallmarks of Robustness to Adversarial

Malware. arXiv preprint arXiv:1805.03553 (2018).

[8] Hao Peng et al. 2015. Building program vector representations for deep learning.
In International Conference on Knowledge Science, Engineering and Management.
Springer, 547–553.

[9] Jeff White. 2017. Pulling Back the Curtains on EncodedCommand PowerShell
Attacks. https://researchcenter.paloaltonetworks.com/2017/03/unit42-pulling-
back-the-curtains-on-encodedcommand-powershell-attacks/. (2017).

[10] Candid Wueest. 2016.

in Attacks.
(2016). https://www.symantec.com/content/dam/symantec/docs/security-center/
white-papers/increased-use-of-powershell-in-attacks-16-en.pdf

The Increased Use of PowerShell

