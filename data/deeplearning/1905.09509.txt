Leveraging Uncertainty in Deep Learning for Selective
Classification

Mehmet Yigit Yildirim
Arizona State University
Tempe, AZ
yigityildirim@asu.edu

Mert Ozer
Arizona State University
Tempe, AZ
mozer@asu.edu

Hasan Davulcu
Arizona State University
Tempe, AZ
hdavulcu@asu.edu

9
1
0
2

y
a
M
3
2

]

G
L
.
s
c
[

1
v
9
0
5
9
0
.
5
0
9
1
:
v
i
X
r
a

ABSTRACT
The wide and rapid adoption of deep learning by practitioners
brought unintended consequences in many situations such as in the
infamous case of Google Photos’ racist image recognition algorithm;
thus, necessitated the utilization of the quantified uncertainty for
each prediction. There have been recent efforts towards quantifying
uncertainty in conventional deep learning methods (e.g., dropout
as Bayesian approximation); however, their optimal use in decision
making is often overlooked and understudied. In this study, we
propose a mixed-integer programming framework for classification
with reject option (also known as selective classification), that in-
vestigates and combines model uncertainty and predictive mean to
identify optimal classification and rejection regions. Our results in-
dicate superior performance of our framework both in non-rejected
accuracy and rejection quality on several publicly available datasets.
Moreover, we extend our framework to cost-sensitive settings and
show that our approach outperforms industry standard methods
significantly for online fraud management in real-world settings.

CCS CONCEPTS
• Computing methodologies → Supervised learning by clas-
sification; Cost-sensitive learning; Uncertainty quantification.

KEYWORDS
classification with reject option, selective classification, deep learn-
ing, uncertainty, cost-sensitive learning

ACM Reference Format:
Mehmet Yigit Yildirim, Mert Ozer, and Hasan Davulcu. 2019. Leveraging
Uncertainty in Deep Learning for Selective Classification. In Proceedings
of ACM Conference (Conference’17). ACM, New York, NY, USA, 10 pages.
https://doi.org/10.1145/nnnnnnn.nnnnnnn

1 INTRODUCTION
Machine learning classifiers are far from outputting perfect results
due to several reasons: data quality, feature informativeness, model
selection, and hyper-parameter tuning are just some of the factors
contributing to the variability of the outcomes. Although well-
trained models offer a high level of accuracy on the macro level,

Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
Conference’17, July 2017, Washington, DC, USA
© 2019 Association for Computing Machinery.
ACM ISBN 978-x-xxxx-xxxx-x/YY/MM. . . $15.00
https://doi.org/10.1145/nnnnnnn.nnnnnnn

making confident inferences for individual instances is difficult,
nevertheless necessary.

Bayesian literature offers a rich set of classification techniques
[21, 22] for jointly quantifying uncertainty and prediction at in-
ference level. A recent application of dropout neural networks
as Bayesian approximation of deep Gaussian Process by Gal and
Ghahramani open a new avenue of quantifying uncertainty in tra-
ditional deep learning settings where a simple dropout mechanism
is applicable [10].

The gained ability to effectively represent the uncertainty within
existing deep learning architectures has been an essential step for
democratizing AI safety [1]. Nevertheless, the following question
remains open: how can one make use of the model uncertainty to
make optimal decisions? The approach we focus on in this study
is called selective classification also known as classification with
reject option where the classifier rejects making a decision when
uncertain.

Selective classification is critical for many applications, and the
concept of “rejection" can have different meanings in various con-
texts. In medical diagnosis, a doctor might order diagnostic tests
before making a decision. In fraud management, an expert human
analyst would start a manual investigation. In self-driving cars, the
human driver would be given control to operate the vehicle. In all
cases, rejecting most of the instances would defeat the purpose,
and being inaccurate could result in fatal consequences. Hence,
a practical framework for selective classification must be able to
operate accurately under defined rejection capacity constraints.

A recent study in the medical domain [18] has demonstrated
the potential of the model uncertainty for selective classification.
However, the authors’ utilization of the measure is solely based
on a simple ranking of it, which makes their work unsuitable for
many online or streaming settings. To the best of our knowledge,
how model uncertainty compares to or interacts with the more
traditional ways of conducting selective classification such as using
Bayes risk [4] has not been explored.

Hence, we propose a Mixed-Integer Programming (MIP) formu-
lation for selective classification called MIPSC to address these re-
quirements. MIPSC finds optimal classification and rejection regions
by investigating the relationship between the model uncertainty
and predictive mean with the desired rejection capacity without
having to define arbitrary rejection costs. Furthermore, we develop
cost-sensitive extensions to our MIP model and exhibit the frame-
work’s extensibility and usability in real-world problems such as
fraud management, where defining domain-specific and example-
dependent costs are necessary.

Main contributions of this paper are:

 
 
 
 
 
 
Conference’17, July 2017, Washington, DC, USA

Yildirim et al.

(1) Introducing the first mixed integer programming solution

for selective classification,

(2) Utilizing predictive mean and model uncertainty of dropout

NNs for optimal decision making,

(3) Presenting an online fraud management case in a real-world

setting.

Rest of the paper is organized as follows: Section 2 gives a brief
background on uncertainty representation in AI, selective classifica-
tion, and mixed-integer programming. In Section 3, we describe our
selective classification model, MIPSC, and describe how to extend
it to cost-sensitive settings. Then, we demonstrate the effectiveness
of both our cost-insensitive and cost-sensitive models in Section 4.
Finally, we conclude our paper in Section 5.

2 RELATED WORK
2.1 Uncertainty Representation and

Applications

Many practitioners and researchers make use of the probability
outputs from the trained model (i.e., softmax output in deep learn-
ing) as an uncertainty measure; however, many classifiers output
distorted probabilities [19] and may lead to misleading actions.
Moreover, even when corrected by proposed probability calibra-
tion methods such as Isotonic Regression [17] or Platt Scaling [20],
posterior probabilities as point estimates lack the detail and infor-
mation to provide a correct interpretation of the model uncertainty.
So, Bayesian approaches such as [21, 22] are the intuitive methods
to quantify and represent the model uncertainty correctly. Due to
the computational complexity of the Bayesian methods, Gal and
Ghahramani propose using Monte Carlo sampling over dropout neu-
ral networks as an approximation to Bayesian inference [10]. This
approach’s effectiveness is demonstrated in a medical-domain ap-
plication [18]. Our work builds upon this framework by combining
model uncertainty and predictive mean optimally for classification
with reject option.

2.2 Selective Classification
Selective classification or classification with reject option has been
studied since the 1970s and it has started gaining traction again
in the recent decade. It is defined as giving an option to the classi-
fier to express uncertainty and to reject making a certain predic-
tion. Chow’s work [4], being the first study in the field, introduces
the concept and proposes a decision-theoretic framework to find
the Bayesian-optimal reject threshold. Tortorella [24], and Santos-
Pereira and Peres [23] propose cost-sensitive learning extensions
to classification with reject option methods with arbitrary cost-
functions. Herbei and Wegkamp [16] develop excess risk bounds
for the classification with a reject option for both cost-sensitive and
cost-insensitive cases. On the other hand, El-Yaniv and Wiener [7]
find these cost models unsuitable as it is difficult to quantify the
cost of rejection in many cases. Instead, authors focus on theoreti-
cal risk-coverage (RC) trade-off without considering explicit costs.
Researchers have been adapting this idea to different classifiers,
and recently Geifman and El-Yaniv’s work [11] on modifying deep
neural networks for selective classification was proposed. Our work
differs fundamentally from Geifman and El-Yaniv’s work [11] by

(1) not being built-in within the deep neural network itself; so it
becomes compatible with any existing trained models and systems,
and (2) utilizing dropout MC sampling for uncertainty estimation.

2.3 Mixed-Integer Programming
Mixed-Integer programming (MIP) is a powerful modeling tool that
has been around for decades. MIP has been commonly utilized by
the operations research community; however, practitioners and
researchers from other domains hesitated to adopt it due to its
computational and theoretical complexity [3]. During the last three
decades, algorithmic advances in integer optimization combined
with hardware improvements have enabled a 200 billion factor
speedup in solving MIP problems [2]. Now, mixed integer linear
techniques are viewed as mature, fast, and robust; thus are applied
to the problems with up to millions of variables [12]. Machine
learning community also started employing MIP techniques in
several problems, such as for optimal feature selection[2] and for
deriving interpretable machine learning algorithms [13]. The key
factors for our decision to use an MIP formulation are (1) its ability
to naturally express the problem, the objective, and the constraints,
(2) its capability to provide an exact optimal solution, and (3) its
ease of extensibility to more specific settings.

3 PROPOSED MODELS
In this work, we propose a mixed integer programming model
which finds optimal regions in deep neural network classifier output
to reject making a classification. To take not only the output of
the deep neural network classifier but also its uncertainty into
consideration, we choose to use dropout NNs (DNN) [9] throughout
our modeling and experiments. Dropout NNs have been proven to
approximate deep Gaussian processes which generate predictive
mean(µ) and model uncertainty(σ ) in the form of standard deviation.
In the following sections, we explain how we make use of both
outputs (predictive mean and model uncertainty) of dropout NNs
for selective classification.

3.1 Mixed-Integer Programming based

Selective Classification

Here, we define a mixed-integer programming model for selective
classification to make optimal decisions of classifications and re-
jections under uncertainty in deep learning. Equivalent to other
selective classification models, the aim is to “reject" making an
automated classification for certain instances to increase the per-
formance on non-rejected samples. Similar to many supervised
algorithms, our MIP model has two main workflows: training and
inference. In the training phase, given an already trained dropout
neural network (DNN), we learn the optimal criteria to reject sam-
ples by maximizing the accuracy for the non-rejected samples. A
natural objective for this task is:

maximize
ϕD,ϕR

(cid:205)
i ∈ϕD

[f (xi )=yi ]

(cid:205)
i ∈ϕD

1

where xi ∈ IRn is the set of features for an instance i, yi ∈ {0, 1}
is the label for that instance, and f : IRn → {0, 1} is the previously
trained deep neural network, ϕR is the set of rejected instances,

Leveraging Uncertainty in Deep Learning for Selective Classification

Conference’17, July 2017, Washington, DC, USA

and ϕD is the set of non-rejected (classification decision made)
instances.

However, as intuitive this objective function is; it is also non-
convex. So, we design a convex proxy by minimizing the number of
mistakes made after rejections and utilizing a heuristic regularizer
which prevents rejecting samples without increasing the accuracy
in the non-rejected sample space. These properties give rise to our
objective function as follows:

minimize
ϕD,ϕR

(cid:205)
i ∈ϕD

[f (xi ) (cid:44) yi ] + 1−ρ
(cid:205)
1
i ∈ϕ

(cid:205)
i ∈ϕR

1

where ρ is the classification accuracy of the trained deep neural
(cid:208) ϕR is the set of all instances. This convex
network and ϕ = ϕD
minimization objective exploits the idea that the number of rejec-
tions should not exceed the expected number of mistakes if the
deep neural network was used without rejection to classify the
instances.

So, what does our model use to determine the rejection popu-
lation (ϕR ) and the decision population (ϕD )? As introduced by
Gal and Ghahramani [10], our model uses the “model uncertainty"
concept and enhances it with predictive mean to express when the
DNN is not confident with its prediction.

For every instance in the training set, we characterize the poste-
rior probability distribution by taking T Monte-Carlo (MC) samples
using dropouts. Then, we summarize this predictive distribution by
calculating the first moment, predictive mean (µi ) and the second
moment, model uncertainty (σi ) as described by Gal and Ghahra-
mani [10]. Finally, we map the points (µi ,σi ) for every instance i to
a 2D space to characterize the posterior distribution of the whole
sample space. One intuitively expects more homogeneous regions
to be near lower values of the model uncertainty and extremes of
the predictive mean. This intuition can also be observed in Figure
1. Hence, our formulation aims to exploit and optimize upon this
structure and identifies the thresholds that define our model’s clas-
sification and rejection regions. Before formally defining our model,
we introduce the notation that we refer to throughout this section
in Table 1.

We indicate the positive classification decision for instance i
with pi ∈ {0, 1}. The negative classification decision for instance i
is coded with the variable ni ∈ {0, 1}. Finally, rejection decision for
instance i is characterized with ri ∈ {0, 1}. For instance i, only one
of the indicator variables pi , ni, ri can be equal to 1 indicating the
decision made for that instance. These decisions are made based
on decision thresholds determined by solving the optimization
problem defined below.

We characterize five decision areas of classification and rejection
and graphically demonstrate these areas in Figure 1. A1 defines
the decision region for positive classification, while A4 represents
the decision region for negative classification. A2 and A5 are re-
jection regions due to their high model uncertainty. Thresholds to
determine these regions are not tied together for the purpose of
handling imbalance or class specific patterns in the data. Finally,
A3 is another rejection region housing instances having predictive
means close to 0.5. In this region, model uncertainty becomes trivial
due to its context: it does not matter how "certain" the model is
when making a decision similar to a coin toss.

Var

Definition

Ground truth label of instance i
Positive classification indicator for instance i
Negative classification indicator for instance i
Rejection indicator for instance i
Predictive mean for instance i
Uncertainty for instance i
Left boundary for rejection
Right boundary for rejection
Upper uncertainty boundary for positive decisions
Upper uncertainty boundary for negative decisions
Left area indicator for instance i
Right area indicator for instance i
Down-left area indicator for instance i
Down-right area indicator for instance i

yi
pi
ni
ri
µi
σi
µL
µR
σL
σR
Li
Ri
DLi
DRi
rCap Rejection capacity
ρ
M
ϵ

Deep neural network accuracy without rejection
Very large Big-M constant
Very small constant

Table 1: Notation Table for MIPSC and MIPCSC

Boundaries for these regions (σL, σR , µL, µR ) are determined by
the following set of constraints operating in a supervised fashion
through the objective. This is the essential process executed by
solving our MIP formulation.

Figure 1: Graphical Illustration of the MIPSC model

Here, we start describing our constraints formally. The following
constraint regulates the samples which do not reside in the rejection
region A3 based on their predictive means but on the right hand
side of A3 such that i ∈ A4 ∪ A5:

µi > 0.5 + µR iff Ri = 1
Now, we would like to distinguish the instances between A4 and
A5 optimally such that our model would make a negative classifi-
cation decision only when DNN is certain enough. The following
constraints characterize the samples that conform to A4 such that
i ∈ A4:

(1)

σi < σR iff DRi

= 1

(2)

Conference’17, July 2017, Washington, DC, USA

Yildirim et al.

Ri + DRi > 1 iff ni = 1
Similarly, the following constraint defines the samples which do not
reside in the rejection region A3 based on their predictive means
but on the left hand side of A3 such that i ∈ A1 ∪ A2:

(3)

µi < 0.5 − µL iff Li = 1
Further, we would like to distinguish the instances between A1
and A2 optimally such that our model would make a positive classi-
fication decision only when DNN is certain enough. The following
constraints characterize the samples that conform to A1 such that
i ∈ A1:

(4)

σi < σL iff DLi

= 1

(5)

Li + DLi > 1 iff pi = 1
As we have constrained our positive and negative classification
decision regions, we reject the remaining instances covered by the
constraint below:

(6)

pi + ni + ri = 1

(7)

where the reject decision is assigned when our model cannot make
a positive or negative classification decision for instance i due to
DNN uncertainty or predictive mean.

Finally we would like to limit the number of rejections based on

the application needs. This is given as:

m
(cid:213)

(cid:0)

i=1

(cid:1) ≤ rCap

ri

(8)

Combining our objective function and constraints together, then,
setting M to be a very large positive constant and fixing ϵ to be a
very small positive constant give rise to the formal definition of
our model as follows:

minimize
µL, µR,σL,σR

m
(cid:213)

i=1

(piyi + ni (1 − yi )) + 1 − ρ
m

m
(cid:213)

i=1

ri s.t.

µR + MRi ≥ µi − 0.5 ≥ µR − M(1 − Ri ) + ϵ, ∀i
M(1 − Li ) − µL − ϵ ≥ µi − 0.5 ≥ −µL − MLi , ∀i
σL + M(1 − DLi ) − ϵ ≥ σi ≥ σL − MDLi , ∀i
σR + M(1 − DRi ) − ϵ ≥ σi ≥ σR − MDRi , ∀i
+ Li ≥ 2pi ≥ DLi
+ Li − 1, ∀i
+ Ri ≥ 2ni ≥ DRi
+ Ri − 1, ∀i
pi + ni + ri = 1, ∀i

DLi
DRi

m
(cid:213)

(cid:0)

i=1

(cid:1) ≤ rCap

ri

∀pi , ri , ni , Ri , Li , DLi , DRi ∈ {0, 1}
∀i ∈ {1...m}, and µL, µR , σL, σR , ρ ∈ IR

(9)

(10)

(11)

(12)

(13)

(14)

(15)

(16)

(17)

(18)

(19)

In this formulation, constraint (10) is derived from (1), (11) is
derived from (4), (12) is derived from (5), (13) is derived from (2),
(14) is derived from (6), and (15) is derived from (3) following the
Big-M method [15].

Following the training, the inference is rather straightforward.
After acquiring the predictive mean and model uncertainty from
DNN for the new sample, a user of our model can arithmetically
decide the region the new sample belongs to and make the decision
based on the optimal thresholds identified.

3.2 Cost-Sensitive Selective Classification
Many classification with reject option problems are cost-sensitive
by nature[6]. An optimal decision-maker should take into various
costs and benefits regarding making a correct, an incorrect, or a
rejection decision for each case individually.

For instance, in medical diagnosis, consequences from a false
negative decision can be fatal if the diagnosis in question is cancer
but not as critical if it is common cold. Within the same context, a
doctor can order more tests with varying costs if uncertain depend-
ing on the severity of the illness under study.

In fraud management, consequences that arise from not being
able to identify a $5 fraudulent transaction would not be as critical
as compared to a $1000 fraudulent transaction. Moreover, a rejection
decision (e.g. initiating a thorough investigation) could be costly, so,
might not make financial sense for a $5 transaction whereas it could
be financially sensible for a $1000 transaction. Finally, the cost of a
false positive decision (stopping a good transaction) is not the same
as a false negative decision (not catching a fraudulent transaction).
All these varying factors need to be considered to come up with an
optimal fraud management strategy.

Thus, we follow Elkan’s definition [8] and extend MIPSC to
“example and class-dependent cost sensitive" settings where each
instance belonging to each class has a different cost or benefit of
making a correct or incorrect classification and propose Mixed-
Integer Programming based Cost-Sensitive Selective Classification
(MIPCSC) for cost-sensitive applications. A graphical interpreta-
tion of this extension can be viewed in Figure 2. Since the example-
dependent value adds another dimension to our problem, we extend
the previously introduced five decision regions (A1, A2, A3, A4, A5)
in Figure 1 to three dimensions. Unlike MIPSC, this model would
not make a rejection decision just because of the uncertainty in
the assessment if it does not make financial sense. Reiterating on
the previous example, it is not logical to conduct a fraud investi-
gation that would cost $50 for a $5 transaction regardless of the
uncertainty. So, in MIPCSC, none of the regions A1, A2, A3, A4, A5
are complete rejection regions; but every region Ai has a rejection
threshold (tDR , tU R , tDL, tU L, tM ) based on the risk associated with
it as shown in Figure 2.

Please refer to Table 1 and Table 2 for the notation used for defin-
ing MIPCSC. Formally, we retain our decision variables σL,σR ,µL,µR
∈ IR to define the areas (A1, A2, A3, A4, A5), then introduce five
thresholds tDR , tU R , tDL, tU L, tM ∈ IR for each region based on the
third dimension, value (cost/benefit). Instead of having one positive
decision as in MIPSC, we define three positive decisions for instance
i, pi1, pi2, pi3 ∈ {0, 1}; each corresponding to areas A1, A2, A3. Like-
wise, there are three of negative decisions, ni1, ni2, ni3 ∈ {0, 1},

Leveraging Uncertainty in Deep Learning for Selective Classification

Conference’17, July 2017, Washington, DC, USA

A2 region and its value is less than the region’s value threshold,
then our model makes a positive decision.

= 1
Li + (1 − DLi ) + SU Li > 2 iff pi2 = 1

ti < tU L iff SU Li

(22)

(23)

Similar to the positive decision regions, now, we focus on the
negative decision regions: A4 and A5. The following constraint
focuses in the region A4 and finds the value threshold for rejection
in that region. If the transaction corresponds to A4 region and its
value is less than the region’s value threshold, then our model
makes a negative decision. Intuitively, this decision would mean
that the expected value of the negative classification decision is
superior to the expected value of a rejection decision in A4.

= 1
ti < tDR iff SDRi
+ SDRi > 2 iff ni1 = 1

Ri + DRi

(24)

(25)

Now, we would like to find our decision threshold for A5. Simi-
larly to the previous constraints, if the transaction corresponds to
A5 region and its value is less than the region’s value threshold,
then our model makes a negative decision.

= 1
Ri + (1 − DRi ) + SU Ri > 2 iff ni2 = 1

ti < tU R iff SU Ri

(26)

(27)

Finally, we move onto our middle region, A3. Here, we would
like our model to make a positive or negative decision using the
predictive mean of 0.5 as the threshold and considering the value
threshold we optimally determine by solving the problem, tM .

µi > 0.5 iff Qi = 1
= 1
ti < tM iff SMi
+ (1 − Qi ) > 3 iff pi3 = 1
+ Qi > 3 iff ni3 = 1

(2 − Li − Ri ) + SMi

(2 − Li − Ri ) + SMi

(28)

(29)

(30)

(31)

Figure 2: Graphical Illustration of the MIPCSC Model

operating in the regions A5, A4, and A3. Finally, we assign the cost
of rejection c to every reject decision.

Variable Definition

ωtp
ωt n
ωf n
ωf p
ti
c
pi j
ni j
tDL
tU L
tM
tDR
tU R
SDLi
SDRi
SU Li
SU Ri
SMi
Qi

True-positive decision benefit multiplier
True-negative decision benefit multiplier
False-negative decision cost multiplier
False-positive decision cost multiplier
Value for instance i
Cost of rejection
Positive classification indicator for instance i and area j
Negative classification indicator for instance i and area j
Down-left area value boundary for rejection
Upper-left area value boundary for rejection
Middle area value boundary for rejection
Down-right area value boundary for rejection
Upper-right area value boundary for rejection
Surface-down-left area indicator for instance i
Surface-down-right area indicator for instance i
Surface-up-left area indicator for instance i
Surface-up-right area indicator for instance i
Surface-down-middle area indicator for instance i
Greater than 0.5 indicator for instance i
Table 2: Additional Notation Table for MIPCSC

Inheriting constraints (1), (2), (4), and (5); we extend our con-

straints as follows.

The first extra constraint focuses on the region A1 and finds the
value threshold for rejection in that region. If the DNN output of
transaction corresponds to A1 region and its example-dependent
value is less than the region’s value threshold, then our model
makes a positive decision. Intuitively, this decision would mean
that the expected value of the positive classification decision is
superior to the expected value of a rejection decision in A1.

= 1
ti < tDL iff SDLi
+ SDLi > 2 iff pi1 = 1

Li + DLi

(20)

(21)

Now, we would like to find our decision threshold for A2. Simi-
larly to the previous constraints, if the transaction corresponds to

As we have constrained our positive and negative classification
decision regions, we reject the remaining instances covered by the
constraint below:

3
(cid:213)

j=1

[pi j ] +

3
(cid:213)

j=1

[ni j ] + ri = 1, ∀i

(32)

where the reject decision is assigned when making positive or
negative classification decision for instance i yields an inferior
expected benefit or superior cost compared to a reject decision.

Following our definition and our constraints, we propose our
cost-sensitive framework called Mixed-Integer Programming based
Cost-Sensitive Selective Classification (MIPCSC) formally as fol-
lows:

Conference’17, July 2017, Washington, DC, USA

Yildirim et al.

maximize
µL, µR,σL,σR,
tD L,tU L,tM ,tD R,tU R

ωtp (

n
(cid:213)

3
(cid:213)

pi j (1 − yi )ti +

n
(cid:213)

i=1

ri (1 − yi )ti )

i=1

j=1

m
(cid:213)

3
(cid:213)

i=1
m
(cid:213)

i=1
m
(cid:213)

j=1
3
(cid:213)

j=1
3
(cid:213)

i=1

j=1

+ωt n (

−ωf n (

−ωf p (

ni jyiti +

m
(cid:213)

i=1

riyiti )

ni j (1 − yi )ti )

pi jyiti ) − c

m
(cid:213)

i=1

ri

µR + MRi ≥ µi − 0.5 ≥ µR − M(1 − Ri ) + ϵ, ∀i
M(1 − Li ) − µL − ϵ ≥ µi − 0.5 ≥ −µL − MLi , ∀i
σL + M(1 − DLi ) − ϵ ≥ σi ≥ σL − MDLi , ∀i
σR + M(1 − DRi ) − ϵ ≥ σi ≥ σR − MDRi , ∀i
0.5 + MQi ≥ µi ≥ 0.5 + M(Qi − 1) + ϵ, ∀i
tDL + M(1 − SDLi ) − ϵ ≥ ti ≥ tDL − SDLi , ∀i
tU L + M(1 − SU Li ) − ϵ ≥ ti ≥ tU L − SU Li , ∀i
tM + M(1 − SMi ) − ϵ ≥ ti ≥ tM − SMi , ∀i
tDR + M(1 − SDRi ) − ϵ ≥ ti ≥ tDR − SDRi , ∀i
tU R + M(1 − SU Ri ) − ϵ ≥ ti ≥ tU R − SU Ri , ∀i
+ Li + SDLi ≥ 3pi1, ∀i
DLi
+ Li + SDLi − 2 ≤ 3pi1, ∀i
DLi
(1 − DLi ) + Li + SDLi ≥ 3pi2, ∀i
(1 − DLi ) + Li + SDLi − 2 ≤ 3pi2, ∀i
+ Ri + SDRi ≥ 3ni1, ∀i
DRi
+ Ri + SDRi − 2 ≤ 3ni1, ∀i
DRi
(1 − DRi ) + Ri + SDRi ≥ 3ni2, ∀i
(1 − DRi ) + Ri + SDRi − 2 ≤ 3ni2, ∀i
+ (1 − Qi ) ≥ 4pi3, ∀i
+ (1 − Qi ) − 3 ≤ 4pi3, ∀i
+ Qi ≥ 4ni3, ∀i
+ Qi − 3 ≤ 4ni3, ∀i
3
(cid:213)

(1 − Li ) + (1 − Ri ) + SMi

(1 − Li ) + (1 − Ri ) + SMi

(1 − Li ) + (1 − Ri ) + SMi

3
(cid:213)

[pi j ] +

[ni j ] + ri = 1, ∀i

(1 − Li ) + (1 − Ri ) + SMi

(33)

(34)

(35)

(36)

(37)

(38)

(39)

(40)

(41)

(42)

(43)

(44)

(45)

(46)

(47)

(48)

(49)

(50)

(51)

(52)

(53)

(54)

(55)

(56)

j=1

j=1

m
(cid:213)

(cid:0)

i=1

(cid:1) ≤ rCap

ri

(57)

∀pi j , ri , ni j , Ri , Li , SDLi , DLi , DRi , SU Li ,
SMi , SDRi , SU Ri ∈ {0, 1}
µL, µR , σL, σR , tDL, tU L, tU L, tU R , tM , ∈ IR
∀i, j ∈ {1...m}

(58)

(59)

(60)

Next, (44) and (45) are derived from (21), (46) and (47) are derived
from (23), (48) and (49) are derived from (25), and (50) and (51) are
derived from (27).

Finally, (52) and (53) are derived from (30), and (54) and (55) are
derived from (31) following the Big-M method, as shown in [15].

Inference using MIPCSC also follows similar steps to MIPSC.
After predictive mean, model uncertainty, and the cost/benefit for
the new sample are obtained, a user can arithmetically decide the
region the new sample belongs to and make the decision based on
the optimal thresholds identified.

4 EXPERIMENTS
4.1 Experimental Setup
We develop two sets of experiments for classification with reject
option and its cost-sensitive extension. For both tasks, we divide
the dataset into four distinct sets; the first to train the dropout
neural network(DNN), the second to find optimal dropout rate and
regularization coefficient to quantify uncertainty, the third to train
the proposed MIP models, and the fourth to test the performance
of the proposed MIP models.

To quantify model uncertainty and predictive mean, we train a
dropout neural network of 2 hidden layers with relu activations
and dropout applied before each layer. For the implementation of
DNN, we make use of the source codes of the original authors made
publicly available at their website1. We apply a grid search among
dropout rates of (0.05, 0.01, 0.02) and regularization coefficients (0.1,
0.25) to achieve optimal DNN configuration. We run trained and
optimized DNN 100 times with its dropouts open. We use empirical
mean and standard deviation of these 100 softmax outputs as the
predictive mean and the model uncertainty to train our MIP models.
We train our MIP models with varying rCap’s of [0.1,0.15,0.2,0.25].
We iterate these process 32 times and report average as each model’s
representative performance.

4.2 Evaluation Metrics
Conventional measures of performance introduced for supervised
classification tasks do not represent the performance of a model
with reject option under study, comprehensively [5]. Here we
present four recently introduced metrics for classification with
reject option[5] and cost sensitive learning[25]. Ideally, a classifier
with reject option should classify as many instances as possible
correctly and reject to classify the ones that it would misclassify. A
cost-sensitive classifier with reject option makes these decisions
based on the profit or loss it would get from each instance. We use
c for accurately classified and non-rejected samples, c for misclas-
sified and non-rejected samples, r for misclassified and rejected
samples, r for accurately classified and rejected samples.

Non-rejected Accuracy measures the performance of classifi-

cation of the model on non-rejected samples. It is defined as;

c
c + c

In this formulation, constraint (38) is derived from (28), (39) is
derived from (20), (40) is derived from (22), (41) is derived from (29),
(42) is derived from (24), and (43) is derived from (26).

1https://github.com/yaringal/DropoutUncertaintyExps

Leveraging Uncertainty in Deep Learning for Selective Classification

Conference’17, July 2017, Washington, DC, USA

Instances

Features Majority Class

Store

Transactions

Fraud-Ratio Avg. Amount($)

australian
breast
diabetic
haberman
heart
house
ionoshpere
pima
seismic
sonar

689
699
1151
306
303
435
351
768
2584
208

14
19
19
4
20
48
34
8
18
60

67%
65%
54%
74%
54%
61%
65%
66%
93%
53%

Table 3: UCI Dataset Statistics

Classification Quality measures the performance of both clas-

sification and rejection of the model. It is defined as

c + r
c + r + c + r

Rejection Quality measures the relative performance of rejec-

tion to the overall performance of classification. It is defined as;
r /r
(c + r )/(c + r )
Profit Gain measures the level of gained profit from the model
outcome relative to perfectly classifying every instance without
any rejection and assigning every instance to the majority class.
Let $model be the profit gain of the model under study, $or acl e be
the profit gain of the perfect model, and $major ity be the profit
gain of the majority class assigning model, we define profit gain as;

$model − $major ity
$or acl e − $major ity

4.3 Experiments with UCI Datasets
In this section, we discuss how the performance of our framework
MIPSC is on several publicly available datasets. We experiment
with ten datasets from UCI classification repository. We set up
experiments of binary classification with reject option on datasets
coming from various application areas. We refer readers to Table 3
for simple statistics of datasets. They span applications of credit card
applications(australian), medical diagnosis(breast, diabetic, heart,
haberman, pima), housing prices (house) and discriminating various
types of signals (ionosphere, seismic, sonar). The variety of imbalance
from 53% to 93% among our datasets also helps us to stress our
framework to label imbalances.

4.3.1 Baselines. We compare the MIPSC with three other baselines.
• Random baseline chooses samples to reject randomly.
• Predictive mean baseline chooses the closest samples to
have 0.5 predictive mean to be rejected until the rejection
capacity parameter is met[4, 14].

• Model uncertainty baseline chooses the samples with the
highest standard deviation to be rejected until the rejection
capacity parameter is met [10, 18].

Comparison with random baseline helps us to investigate if using
predictive mean or model uncertainty adds any value to find optimal

Digital Goods
Office Supplies
Sporting Goods

67,215
10,678
6,968

8.1%
17.2%
3.5%

$79.29
$330.10
$296.34

Table 4: Online Purchase Transactions Dataset Statistics

decisions when rejecting. Comparing MIPSC with predictive mean
and model uncertainty separately allows us to investigate if they
are complementary in optimal decision making for classification
with reject option.

4.3.2 Results. Figure 3 shows the performance of MIPSC, and the
other baselines. We make the following major observations;

• In all ten datasets and three evaluation metrics, MIPSC al-
most always achieves superior performance compared to the
baselines,

• Higher rejection capacities yield higher non-rejected accu-

racy, as expected,

• Model uncertainty baseline consistently performs the second
best signaling a better characterization of rejection than
predictive mean,

• Predictive mean can be complementary in classification with
rejection task as evidenced by MIPSC higher performance
than model uncertainty baseline. By itself, predictive mean
baseline achieves similar performances to the random base-
line.

As noted earlier, these ten datasets have varying degrees of im-
balances. It is promising to see the consistent superiority of our
framework compared to the baselines regardless of the imbalances.
Our approach achieves up to 15.01% higher classification quality
score, up to 6.65% higher non-rejected accuracy, and higher rejec-
tion quality score at billion scale (note that rejection capacity is
an unbounded metric). Even though our method achieves better
classification quality score in the house dataset, model uncertainty
baseline appears to have higher non-rejected accuracy and rejec-
tion quality. We attribute this phenomenon to overfitting of our
model (100% training dataset non-rejected accuracy and classifi-
cation quality), and it will constitute part of our future work for
introducing regularization for our model.

4.4 Online Fraud Management
In this section, we discuss the contribution of our cost-sensitive
framework MIPCSC over industry-standard baselines in online
fraud management tasks. We design our experiments with three
real-world e-commerce one week worth of online transaction datasets
coming from digital goods, office supplies, and sporting goods stores.
Summary statistics of our datasets can be seen in Table 4.

In online fraud management, our base task is to classify each
transaction instance as legitimate or fraudulent. Different than a
standard classification task, benefits and costs of each true and false
classification vary with the transaction amount of each transaction
instance. Moreover, true classification of a legitimate transaction
and a fraudulent transaction do not bring the same amount of ben-
efit. False classification of a legitimate transaction or a fraudulent

Conference’17, July 2017, Washington, DC, USA

Yildirim et al.

Figure 3: Performance of the MIPSC and other baselines under varying rejection capacities. Notice the superior performance
of MIPSC over the recent state-of-the-art and other baselines in all of the three performance metrics for various publicly
available datasets.

transaction incurs different costs as well (i.e., customer insult, fraud
loss).

4.4.1 Parameter Settings. Our task also involves rejecting making
classification when uncertain. In online fraud management domain,
“rejecting to make a decision" equates to sending the transaction
instance to an expert to be reviewed. This process of rejecting
to make a decision also comes with a cost. By taking all these
aforementioned costs and benefits of the task into consideration,
here we present the final profit gain that our framework and several
other fraud management strategies achieve on three real-world
datasets. For our experiments we set the model parameters c as 3,

ωtp as 0.2, ωf p as 2.4, and ωf n as 3 following business standards
from well-accredited business reports2.

We note that ωtp corresponds to classifying legitimate trans-
actions correctly, thus profit gain. ωf p corresponds to classifying
fraudulent transactions as legitimate, thus fraud loss. In our setting,
when a merchant is not able to detect fraudulent transaction (false
positive), it is liable for the product’s cost itself, shipping costs,
and extra chargeback fees. ωf n corresponds to classifying a legit-
imate transaction as fraudulent, thus consumer insult. Stopping
customer’s valid transaction requests due to fraudulent activity

2CyberSource: 2017 North America online fraud benchmark Report. Report. Cyber-
Source Corporation (2017)

Leveraging Uncertainty in Deep Learning for Selective Classification

Conference’17, July 2017, Washington, DC, USA

various rejection capacities. It is clear that MIPCSC is ro-
bust to the underlying DNN performance giving the highest
profit gain in all cases,

• Constant inferior performance of the Risk baseline suggests
that simply combining uncertainty with a value aspect does
not help to make a cost-optimal decision.

The necessity of a framework like MIPCSC becomes apparent
observing its constant effectiveness. It achieves up to 23% higher
profit gain compared to the business standards of fraud manage-
ment today. This translates to saving up to $40,570 in the retailer’s
weekly online business. Extrapolating the amount to yearly revenue
gain (assuming uniform distribution over weeks), MIPCSC provides
extra $2M profit gain compared to its closest competitor baseline.

5 CONCLUSION
In this paper, we introduced MIPSC: a novel and extensible selec-
tive classification model that effectively utilizes uncertainty in deep
learning and combines it with predictive mean to make optimal
decisions. We demonstrated MIPSC’s effectiveness using state-of-
the-art selective classification metrics in publicly available datasets
from various domains. We found that predictive mean is comple-
mentary to model uncertainty for making optimal reject decisions.
Furthermore, we showcased a real-world use-case of online fraud
management using our cost-sensitive extension, MIPCSC. Future
work includes (1) experimenting with other Bayesian frameworks,
(2) optimizing the MIP performance by designing novel column gen-
eration techniques, and (3) extending the frameworks to non-binary
settings.

REFERENCES
[1] Dario Amodei, Chris Olah, Jacob Steinhardt, Paul Christiano, John Schulman, and
Dan Mané. 2016. Concrete problems in AI safety. arXiv preprint arXiv:1606.06565
(2016).

[2] Dimitris Bertsimas, Angela King, Rahul Mazumder, et al. 2016. Best subset
selection via a modern optimization lens. The annals of statistics 44, 2 (2016),
813–852.

[3] Robert E Bixby. [n. d.]. Mixed-integer programming: It works better than you

may think.

[4] C Chow. 1970. On optimum recognition error and reject tradeoff. IEEE Transac-

tions on information theory 16, 1 (1970), 41–46.

[5] Filipe Condessa, Jose Bioucas-Dias, and Jelena Kovacevic. 2017. Performance
measures for classification systems with rejection. Pattern Recognition 63 (2017),
437 – 450. https://doi.org/10.1016/j.patcog.2016.10.011

[6] Pedro Domingos. 1999. Metacost: A general method for making classifiers cost-
sensitive. In Proceedings of the fifth ACM SIGKDD international conference on
Knowledge discovery and data mining. ACM, 155–164.

[7] Ran El-Yaniv and Yair Wiener. 2010. On the foundations of noise-free selective
classification. Journal of Machine Learning Research 11, May (2010), 1605–1641.
[8] Charles Elkan. 2001. The foundations of cost-sensitive learning. In International

joint conference on artificial intelligence, Vol. 17. LEA, 973–978.

[9] Yarin Gal. 2016. Uncertainty in deep learning. University of Cambridge (2016).
[10] Yarin Gal and Zoubin Ghahramani. 2016. Dropout as a Bayesian approximation:
Representing model uncertainty in deep learning. In international conference on
machine learning. 1050–1059.

[11] Yonatan Geifman and Ran El-Yaniv. 2017. Selective Classification for Deep
In Advances in Neural Information Processing Systems 30,
Neural Networks.
I. Guyon, U. V. Luxburg, S. Bengio, H. Wallach, R. Fergus, S. Vishwanathan, and
R. Garnett (Eds.). Curran Associates, Inc., 4878–4887. http://papers.nips.cc/paper/
7073-selective-classification-for-deep-neural-networks.pdf

[12] Björn Geißler, Alexander Martin, Antonio Morsi, and Lars Schewe. 2012. Using
In Mixed integer nonlinear

Piecewise Linear Functions for Solving MINLP s.
programming. Springer, 287–314.

[13] Siong Thye Goh and Cynthia Rudin. 2014. Box drawings for learning with
imbalanced data. In Proceedings of the 20th ACM SIGKDD international conference
on Knowledge discovery and data mining. ACM, 333–342.

Figure 4: Profit Gain of MIPCSC vs. baselines for fraud man-
agement.

usually results in losing that customer’s future lifetime transac-
tions. We set ωt n as 0, since preventing fraud does not provide any
discernible financial benefit.

4.4.2 Baselines. We compare the MIPCSC with four other base-
lines. We adopt two of them from the previous section (model
uncertainty and random) and introduce two new cost-sensitive
baselines.

• Transaction amount baseline rejects to classify the in-
stances with the largest transaction amounts until the rejec-
tion capacity is met. Majority of the transaction processors
follows this conservative strategy.

• Risk baseline rejects to classify the instances based on both
model uncertainty and transaction amount. It multiplies the
model uncertainty and transaction amount and rejects to
classify the ones with the highest value until the rejection
capacity is met.

Comparing MIPCSC with transaction amount baseline helps
to assess whether our approach performs better than the most
conservative fraud management strategy. Comparing MIPCSC with
risk baseline assist with understanding if our approach is capable of
making better assessments of cost-sensitive decisions than a simple
arithmetic cost-sensitive risk measurement.

4.4.3 Results. Figure 4 shows the performance of MIPCSC com-
pared to the other baselines. Our key observations are given as
follows:

• Under varying capacities of rejection, MIPCSC always achieves

the highest profit gain,

• In the Digital Goods dataset, underlying DNN performs
worse than outputting a trivial solution, thus causes un-
certainty based baselines to obtain negative profit gain at

Conference’17, July 2017, Washington, DC, USA

Yildirim et al.

[14] Yves Grandvalet, Alain Rakotomamonjy, Joseph Keshet, and Stéphane Canu.
2009. Support Vector Machines with a Reject Option. In Advances in Neural
Information Processing Systems 21, D. Koller, D. Schuurmans, Y. Bengio, and
L. Bottou (Eds.). Curran Associates, Inc., 537–544. http://papers.nips.cc/paper/
3594-support-vector-machines-with-a-reject-option.pdf

[20] John Platt et al. 1999. Probabilistic outputs for support vector machines and com-
parisons to regularized likelihood methods. Advances in large margin classifiers
10, 3 (1999), 61–74.

[21] Nicholas G Polson, Vadim Sokolov, et al. 2017. Deep learning: a Bayesian per-

spective. Bayesian Analysis 12, 4 (2017), 1275–1304.

[15] Igor Griva, Stephen G Nash, and Ariela Sofer. 2009. Linear and nonlinear opti-

[22] Carl Edward Rasmussen. 2006. Gaussian processes for machine learning. MIT

mization. Vol. 108. Siam.

Press.

[16] Radu Herbei and Marten H Wegkamp. 2006. Classification with reject option.

Canadian Journal of Statistics 34, 4 (2006), 709–721.

[17] Joseph B Kruskal. 1964. Nonmetric multidimensional scaling: a numerical method.

Psychometrika 29, 2 (1964), 115–129.

[18] Christian Leibig, Vaneeda Allken, Murat Seçkin Ayhan, Philipp Berens, and
Siegfried Wahl. 2017. Leveraging uncertainty information from deep neural
networks for disease detection. Scientific reports 7, 1 (2017), 17816.

[19] Alexandru Niculescu-Mizil and Rich Caruana. 2005. Obtaining Calibrated Proba-

bilities from Boosting.. In UAI. 413.

[23] Carla M. Santos-Pereira and Ana M. Pires. 2005. On optimal reject rules and ROC
curves. Pattern Recognition Letters 26, 7 (2005), 943 – 952. https://doi.org/10.
1016/j.patrec.2004.09.042

[24] Francesco Tortorella. 2000. An optimal reject rule for binary classifiers. In Joint
IAPR International Workshops on Statistical Techniques in Pattern Recognition (SPR)
and Structural and Syntactic Pattern Recognition (SSPR). Springer, 611–620.
[25] Mehmet Yigit Yildirim, Mert Ozer, and Hasan Davulcu. 2018. Cost-Sensitive
Decision Making for Online Fraud Management. In Artificial Intelligence Applica-
tions and Innovations, Lazaros Iliadis, Ilias Maglogiannis, and Vassilis Plagianakos
(Eds.). Springer International Publishing, Cham, 323–336.

