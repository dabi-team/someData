JOURNAL OF LATEX CLASS FILES, VOL. 14, NO. 8, AUGUST 2015

1

Universal Stego Post-processing for Enhancing
Image Steganography

Bolin Chen, Weiqi Luo*, Senior Member,

IEEE, Peijia Zheng, Member,

IEEE, Jiwu Huang, Fellow, IEEE

0
2
0
2

b
e
F
9
1

]

M
M

.
s
c
[

2
v
8
7
8
3
0
.
2
1
9
1
:
v
i
X
r
a

Abstract—It is well known that the designing or improving
embedding cost becomes a key issue for current steganographic
methods. Unlike existing works, we propose a novel framework
to enhance the steganography security via post-processing on
the embedding units (i.e., pixel values and DCT coeﬃcients) of
stego directly. In this paper, we ﬁrstly analyze the characteristics
of STCs (Syndrome-Trellis Codes), and then design the rule
for post-processing to ensure the correct extraction of hidden
message. Since the steganography artifacts are typically reﬂected
on image residuals, we try to reduce the residual distance between
cover and the modiﬁed stego in order to enhance steganography
security. To this end, we model the post-processing as a non-linear
integer programming, and implement it via heuristic search. In
addition, we carefully determine several important issues in the
proposed post-processing, such as the candidate embedding units
to be modiﬁed, the direction and amplitude of post-modiﬁcation,
the adaptive ﬁlters for getting residuals, and the distance measure
of residuals. Extensive experimental results evaluated on both
hand-crafted steganalytic features and deep learning based ones
demonstrate that the proposed method can eﬀectively enhance
the security of most modern steganographic methods both in
spatial and JPEG domains.

Index Terms—Stego Post-processing, Syndrome-Trellis Codes,

Steganography, Steganalysis.

I. Introduction

I MAGE steganography is a technique to hide secret message

into cover images via modifying some image components in
an imperceptible manner. On the contrary, image steganalysis
aims to detect
the existence of secret message hidden by
image steganography. During the past decade, many eﬀective
steganography methods have been proposed with the develop-
ment of the steganalytic techniques.

Image steganography can be divided into two categories,
that is, spatial steganography and JPEG steganography. In
modern research, both of them are usually designed under the
framework of distortion minimization [1], in which the design
of embedding cost is the key issue. Typically, the embedding
cost tries to measure the statistical detectability of each em-
bedding unit (i.e. pixel or DCT coeﬃcient). The smaller the
embedding cost, the more likely the corresponding unit will be
modiﬁed during the subsequent operation of Syndrome-Trellis
Codes (STCs) [2]. Up to now, there are many eﬀective cost
have been proposed in spatial domain. Most of them such

This work was presented in part at the 7th ACM Workshop on Information

Hiding and Multimedia Security, Paris, France, July 2019.

B. Chen, W. Luo and P. Zheng are with the School of Data and Computer
Science, and Guangdong Key Laboratory of Information Security Technol-
ogy, Sun Yat-sen University, Guangzhou 510006, P.R. China. Corresponding
author: Weiqi Luo (e-mail: luoweiqi@mail.sysu.edu.cn).

Jiwu Huang is with the College of Information Engineering, Shenzhen

University, Shenzhen 518052, P.R. China.

as HUGO [3], WOW [4], S-UNIWARD [5], HILL [6] and
MIPOD [7] adopt an additive cost, meaning that they assume
the embedding impact for each unit is independent. Some
methods such as CMD (Clustering Modiﬁcation Directions)
[8], Synch [9] and DeJoin [10] improve the existing additive
cost via sequentially embedding message and updating the
cost to synchronize the modiﬁcation direction. These methods
usually achieve better security performance since the mutual
impacts of adjacent embedding units are taken into considera-
tion. For JPEG steganography, the additive cost-based methods
include UED [11], J-UNIWARD [5], UERD [12], BET [13],
and the non-additive one includes BBC [14], which aims to
preserve the spatial continuity at block boundaries. To enhance
security, some other steganography methods aim to adjust
existing costs via highlighting the details in an image [15],
[16] or reassigning lower costs to controversial units [17], [18].
Recently, some deep learning techniques such as Generative
Adversarial Network (GAN) [19] and adversarial example [20]
have been applied in steganography. For instance, ASDL-GAN
[21] and UT-GAN [22], [23] can learn costs that are directly
related to the undetectability against the steganalyzer. ADV-
EMB [24] and method [25] adjust the costs according to
the gradients back-propagated from the target Convolutional
Neural Network (CNN)-based steganalyzer.

Note that above steganography methods mainly focus on
designing embedding costs, and usually employ the STCs to
minimize the total costs in subsequent data hiding. However,
most existing embedding costs seem empirical, which would
not be eﬀective to measure the statistical detectability of
embedding units. In addition, minimizing the total costs using
STCs would not always produce high security stegos. Unlike
existing works, we propose a novel framework to enhance
the security of current steganography methods both in spatial
and JPEG domains via stego post-processing, which aims
to reduce the residual distance between cover and modiﬁed
stego. We ﬁrstly formulate the stego post-processing as a
non-linear integer programming problem, and solve it using
a heuristic search method - Hill Climbing. To achieve good
security performance, the adaptive ﬁlters for obtaining image
residuals and the distance measure are carefully designed. In
addition, four acceleration strategies according to the char-
acteristics of post-modiﬁcation are considered to speed up
our algorithm. Experimental results show that the proposed
method can signiﬁcantly enhance the security performance
of the existing steganography methods, especially when the
payloads and/or quality factors are large. Note that this paper
is an extension of our previous work [26]. Compared to our
preliminary work [26], the main diﬀerences of this paper are

 
 
 
 
 
 
JOURNAL OF LATEX CLASS FILES, VOL. 14, NO. 8, AUGUST 2015

2

as follows: 1) Instead of using a ﬁxed ﬁlter in [26] to obtain
image residuals, in this paper, we carefully design multiple
adaptive ﬁlters which can better suppress image content while
preserve the artifacts left by data hiding; 2) The method in this
extended version signiﬁcantly accelerates the post-processing
via restricting the position of modiﬁed units, the direction
and amplitude of modiﬁcation, and adopting a fast method
for convolution; 3) More extensive experimental results and
analysis are given in this paper. For instance, both conventional
and deep learning steganalytic models are used for security
evaluation. In addition to BOSSBase [27], other two pub-
lic databases (i.e., BOWS2 [28] and ALASKA [29]) which
include 90,005 images are used for evaluation. We provide
more analysis on statistical characteristics of post-modiﬁcation
and the processing time. In addition, both spatial and JPEG
steganographic methods are considered in this paper; 4) The
extensive experimental results show that the proposed method
can achieve higher security than the work [26].

Compared to those works (e.g. CMD [8], BBC [14], and
methods [15], [16], [17], [18]) which also aim to enhance
existing steganography methods, the main diﬀerences of the
proposed method are as follows:

• First of all, almost all related works try to modify embed-
ding costs of existing steganography during data hiding,
while the proposed method tries to modify embedding
units (pixel values or DCT coeﬃcients) directly after
the data hiding with the existing steganopgraphy is com-
pleted. Note that the early steganography OutGuess [30]
divides the cover into two non-overlapping parts: one part
for data hiding, the other part for histogram correction.
From this point of view, OutGuess can be regarded as an
enhanced steganography based on post-processing. How-
ever, the embedding capacity of OutGuess is signiﬁcantly
reduced since it has to reserve a relatively high proportion
of embedding units for histogram correction. What is
more, it can be easily detected by the modern steganalytic
methods based on higher order statistics.

• The principle of related works is quite diﬀerent. For
instance, CMD aims at clustering modiﬁcation directions
and BBC aims at preserving the block boundary conti-
nuity, OutGuess [30] aims at preserving the histogram,
while the proposed method aims at reducing the residual
distance between cover and the resulting stego. Since
the proposed method is performed on the stego, it is
not contradictory to those steganographic works based on
STC embedding. As shown in Section IV, most modern
steganographic methods, such as MIPOD, CMD-HILL,
J-UNIWARD and BET-HILL, can be further improved
after using the proposed post-processing.

• Most existing works are usually designed under a special
domain. For instance, the spatial steganographic methods
such as MIPOD and CMD are diﬃcult to be adopted in
JPEG with satisfactory results. Similarly, those eﬀective
works for JPEG steganography may not eﬀective in spatial
domain. Comparatively, the proposed method is eﬀective
in both domains.

The rest of this paper is arranged as follows. Section II
describes STCs and their robustness against post-modiﬁcation.
Section III describes the proposed framework. Section IV
presents experimental results and discussions. Finally,
the
concluding remarks of this paper are given in Section V.

II. Robustness Analysis of STCs

Most current steganographic methods are constructed under
the framework of distortion minimization. After the embedding
costs are carefully designed, some coding methods are then
used to embed secret message into cover image in order to
minimize the total cost. In practical applications, STCs is
widely used in modern steganography methods both in spatial
and JPEG domains. Since the extraction of hidden message
after using the proposed method is related to STCs, we will
give a brief overview of STCs and its robustness against post-
modiﬁcation in the following.

A. Review of Syndrome-Trellis Codes

STC is one of the popular coding methods which is able
to embed secret message into the cover image eﬃciently
while approaching the optimal coding performance. It can be
used to solve binary or non-binary embedding problem under
the steganography framework of distortion minimization. For
binary problem, the message embedding and extraction for
spatial steganography 1 can be formulated as follows:

Emb(X, m) = arg min

P(Y)∈C(m)
E xt(Y ) = HP(Y )

D(X, Y )

(1)

(2)

where Emb() is the function for data embedding. E xt() is
the function for message extraction. X is a cover image. Y is a
stego image. m is a secret message. P is a parity function such
as P(Y ) = Y mod 2. H is a parity-check matrix of a binary
linear code C. C(m) = {z|Hz = m} is the coset corresponding
to syndrome m. STCs constructs the parity-check matrix H
by placing a small submatrix ˆH along the main diagonal. The
height of the submatrix ˆH is a parameter that can be used to
balance the algorithm performance and speed. Using parity-
check matrix H constructed in this way, equation (1) can be
solved optimally by Viterbi algorithm with linear time and
space complexity w.r.t. n, which is the dimension of X.

For the q-ary (q > 2) embedding problem, STCs solves it
eﬃciently via multi-layered construction. It decomposes the
q-ary problem into a sequence of similar binary problem and
then applies the above solution for binary problem. The q-ary
problem can be solved optimally if each binary problem is
solve optimally. Refer to [2] for more details of STC.

B. Analysis of Robustness of STCs

From equation (2), the value of extracted message is deter-
mined by H and P(y). In a covert communication, since H
is ﬁxed for a cover image, the message extraction completely
relies on P(y). Therefore, if there exists a modiﬁcation matrix

1Similar results can be obtained for JPEG steganography.

JOURNAL OF LATEX CLASS FILES, VOL. 14, NO. 8, AUGUST 2015

3

STCs to embed secret message into cover to get the resulting
stego. Quite diﬀerent from the existing works, the proposed
framework aims to enhance the steganography security via
reducing image residual distance between cover and stego
using stego post-processing. Since most current steganography
methods, such as HILL [6] and UERD [12], employ ternary
STCs for data embedding, the ternary case (i.e. k = 2) is
considered in our experiments. Please note that it is easy to
extend our method for diﬀerent k.

1) Main Idea of Stego Post-processing: It is well known
that the steganography will introduce detectable artifacts into
image residuals, and thus most eﬀective steganalyzers based
on hand-crafted features (e.g. SRM [31], GFR [32]) and deep
learning (e.g. Xu-Net [33], Ye-Net [34], and J-Xu-Net [35]) are
mainly based on analyzing image residuals in spatial domain.
As illustrated in Fig. 2, these steganalytic methods usually
contain 3 components, that is, high-pass ﬁlters to obtain image
residuals, feature extraction operator of image residuals and a
classiﬁer based on the features. Since the steganography signal
is rather weak compared to image content, good high-pass
ﬁlters can eﬀectively suppress image content and improve the
signal-to-noise ratio (note that for steganalysis, noise here is
image content), which is very helpful for steganalysis. From
this point of view, if the image residual distance between cover
and modiﬁed stego image is smaller, the security performance
is expected to be better. Therefore,
the main idea of the
proposed framework is to reduce such distance via stego post-
processing. Combined with the robustness analysis on STCs
in section II-B, the proposed stego post-processing can be
formulated as the following optimization problem:

minimize
Z

Dist(Res(Z), Res(X))

subject to Z = Y + 22 × N,

N ∈ Z,
Z ∈ V.

(4)

where Res(X) 2 denotes the image residual of image X
in spatial domain, Dist(Res(Z), Res(X)) denotes the distance
between two image residuals Res(Z) and Res(X); X is a
cover image, Y is a stego image obtained with an existing
steganography method, Z is a modiﬁed version of Y with
our post stego-processing; N is an integer matrix; V denotes
the available range of embedding units of Z. Taking spatial
steganography for instance, every unit in V should be an
integer in the range of [0, 255].

Note that the proposed framework tries to modify a resulting
stego Y obtained with an existing steganography method under
the framework of distortion minimization, thus any modiﬁca-
tion on Y will inevitably increase the total distortion. However,
we expect that the steganography security would become better
since the residual distance between cover X and the resulting
stego Z is reduced after stego post-processing.

Fig. 1: The framework of modern steganography vs.
proposed stego post-processing.

the

Fig. 2: The framework of modern image steganalytic methods.

∆ such that P(Y + ∆) = P(Y ), we can extract exactly the same
secret message from Y + ∆ and Y , which shows the robustness
of STCs against the modiﬁcation ∆ in this case. Generally,
image steganography embeds message into lower bits of the
cover image for not introducing visually perceptible artifacts.
Therefore, the parity function P of q-ary STCs returns the
to k th LSBs of the input image, where k = (cid:100)log2 q(cid:101).
1st
Based on this characteristic, q-ary STCs’ robustness against
post-modiﬁcation can be formulated as follows:

E xt(Y ) = E xt(Y + ∆), ∆i j = 2k × ni j, ni j ∈ Z

(3)

where Y and ∆ are matrices of the same size n1 × n2, ∆i j
denotes the i j th element of the modiﬁcation matrix ∆

Taking a stego image Y obtained by ternary STCs (i.e. q =
3) for example, in this case, k = (cid:100)log2 q(cid:101) = 2. ∆i, j = 22 × ni j =
4ni j, ni j ∈ Z. Therefore, we conclude that adding a multiple
of 4 to any elements of the stego image will not confuse the
message extraction at all.

III. Proposed Framework and Method

In this section, we ﬁrst describe the framework of stego
post-processing, and then present some implementation details,
including the selection of some important parameters and four
strategies to speed up processing. Finally, we will give the full
description of the proposed algorithm under this framework.

A. Framework of Stego Post-processing

As shown in Fig. 1, the current steganography ﬁrstly designs
costs for all embedding units of a cover image, and then uses

2For spatial steganography, X, Y and Z denote pixel values of the corre-
sponding images. For JPEG steganography, they denote the DCT coeﬃcients.
The image residual is obtained and analyzed in spatial domain both for spatial
and JPEG steganography.

CoverCostStegoEnhancedStegoCurrent SteganographyStego Post-processingSTCsCost FunctionPost-processingResidualsHigh-pass FiltersFeaturesResultsFeature ExtractorClassiﬁerImagesKB Filter, KV Filter,…Co-occurence,Conv Layer,…Ensemble Classiﬁer,FC Layer,…JOURNAL OF LATEX CLASS FILES, VOL. 14, NO. 8, AUGUST 2015

4

Algorithm 1 Pseudo-code for
the stego post-processing.
X, Y, Z denote the values are of size n1 × n2. The for loop
in Line 6 traverses all embedding units row by row.

1: Input: cover image X; stego image Y
2: Output: modiﬁed stego image Z
3: Initialize Z = Y
4: RX = Res(X)
5: RZ = Res(Z)
6: for i ∈ {1, ..., n1},
7:
8:
9:
10:
11:

while Zi j + s ∈ V do

for s ∈ {+4, −4} do

j ∈ {1, ..., n2} do

T = Z
Ti j = Zi j + s
RT = Res(T)
DT X = Dist(RT, RX )
DZ X = Dist(RZ, RX )
if DT X < DZ X then
Update Zi j = Ti j
Update RZ = RT

12:
13:
14:
15:
16:
17:

else

break

end if
end while

18:
19:
20:
21:
22: end for
23: return Z

end for

Fig. 3: The proposed method to update a target embedding
unit within a stego image.

2) Implementation of the Framework: Since the modiﬁca-
tions are limited on integers, and the distance function Dist() is
usually non-linear, the optimization problem described in the
previous section is a non-linear integer programming, which
is very hard to ﬁnd the optimal solution. In our experiments,
we employ a greedy algorithm, i.e., Hill Climbing, to ﬁnd
an approximate solution. Speciﬁcally, from an initial stego
Y , we sequentially process the embedding units one by one
to iteratively reduce its residual distance to cover X until all
embedding units are dealt with.

Fig. 3 illustrates how the proposed method updates a target
embedding unit within a stego image. Let X denote cover,
Z denote the candidate stego which is initialized as the
stego Y with an existing steganography method, T denote
the temporary variable for the modiﬁed version of Z after
changing a target unit Zi j according to the rule described in
section II (i.e. T = Z, Ti j = Ti j + 22 × n, n ∈ Z). By doing
so, we can assure that the secret messages extracted from Z
and Y are exactly the same after modiﬁcation. To determine
whether the modiﬁed stego T is better than the candidate one
Z, we ﬁrstly apply Res() function on cover image X and two
stego images Z, T, and get the corresponding image residuals
Res(X), Res(Z) and Res(T) separately. And then we calculate
the distance between the residual of cover Res(X) and the two
image residuals Res(Z) and Res(T) separately according to
a certain Dist() function, denoted as DZ X and DT X . Finally,
we will update the candidate stego Z as the temporary T if
DZ X > DT X , otherwise we keep Z unchanged.

We repeat the above operations for all embedding units, and
the whole pseudo-code of the proposed framework is illus-
trated in Algothrim 1. The inputs of the algorithm are cover X
and the corresponding stego Y using an existing steganography
method. The algorithm ﬁrst initializes the candidate stego Z as
Y , and then updates Z using three loops. In the ﬁrst loop (i.e.
line 6 - 22), it traverses all the embedding units row by row. In
the second loop (i.e. line 7 - 21), it considers the direction of
post-modiﬁcation to an embedding unit (positive + or negative
−). In the third loop (i.e. line 8 - 20), it considers diﬀerent
amplitudes of post-modiﬁcation to an embedding units (e.g.
4, 8, 12, · · · ). After the three loops, the algorithm ﬁnally outputs
a modiﬁed stego Z, which usually has smaller residual distance
compared with the input stego Y .

3) Hyper-Parameters: The residual function Res() in Al-
gorithm 1 is the key issue that would signiﬁcantly aﬀect
the security performance of the proposed framework. In the
following, we will discuss the design of adaptive ﬁlter.

As described in section III-A1, most modern steganalytic
features are mainly derived from image residuals. Thus, the
selection of high-pass ﬁlters is very important for steganalysis.
Until now, there are many available ﬁlters in existing works,
such as various ﬁlters in SRM [31] and GFR [32]. Note
that these ﬁlters are ﬁxed for all images. Inspired from [36],
we employ an adaptive way to learn high-pass ﬁlters for
each image. Speciﬁcally, we ﬁrst compute the convolution
of the image with a prediction ﬁlter whose center element
is 0, which amounts to predicting target pixels via their
surrounding pixels; and then we determine the elements in the

Cover XCandidateStego ZModiﬁedStego TResidual FunctionResidual FunctionResidualFunctionResidual Res(X)Residual Res(Z)Residual Res(T)Distance FunctionDistance FunctionDistance DZXDistance DTXDTX<DZX ?Update Zwith TKeep ZunchangedModify ZijYesNoJOURNAL OF LATEX CLASS FILES, VOL. 14, NO. 8, AUGUST 2015

5

prediction ﬁlter by minimizing the mean square error between
the predicted pixels and actual ones via lease squares; ﬁnally,
we set the center of prediction ﬁlter as -1 to obtain the ﬁnal
ﬁlter, which calculate the residual between the predicted and
actual values. Diﬀerent from work [36] which learns a ﬁlter
of size w × w (w > 2) with symmetry constraint, we ﬁrst
learn a base ﬁlter of size 1 × w without symmetry constraint
for any given image and its transposed version. Thus, the
resulting basic ﬁlter (denoted as B) is a predictor of horizontal
direction while its transposed version BT is a predictor of
vertical direction. And then we get the outer product of B and
BT , denoted as B ⊗ BT , which can calculate the residual based
on the prediction of both horizontal and vertical directions.
In our method, we can obtain diﬀerent residual functions via
the combination of the elements in set {B, BT, B ⊗ BT } with
diﬀerent size w. Based on our experiments, we ﬁnally select
the ﬁlters {B, BT, B ⊗ BT } of size 7 for spatial steganography
while ﬁlters {B, BT } of size 3 for JPEG steganography. Please
note that we take into account several residuals by summing
them up. More experimental results on the hyper-parameter
selection are shown in section IV-A.

In Algorithm 1 (line 12-13), the distance function Dist() is
used to measure the residual distance between cover and stego.
Diﬀerent distances will lead to diﬀerent post-modiﬁcation,
and thus aﬀect security performance. We have tested several
typical distance measures, including Manhattan, Euclidean,
Chebychev and Hamming, and found that the Manhattan dis-
tance usually performs well on various steganography methods
in both spatial and JPEG domains. Thus, we employ the
Manhattan distance as follows in our experiments.

d(p, q) = ||p − q||1 =

n
(cid:213)

i=1

|pi − qi |

(5)

where p = (p1, p2, ..., pn), q = (q1, q2, ..., qn).

B. Acceleration Strategies

Several issues would signiﬁcantly aﬀect the processing time
of the proposed Algorithm 1. First of all, there are three nested
loops. The ﬁrst loop will traverse all embedding units of the
input stego Y . Taking an image of size 512 × 512 for example,
there are totally 262144 (= 512 × 512) units to be dealt with.
For each unit, two directions (i.e. positive or negative in the
second loop) and diﬀerent modiﬁcation amplitudes (i.e. 4, 8,
. . ., in the third loop) need to be considered. If we can reduce
the iteration number of these loops, the algorithm speed will
be improved. Furthermore, the ﬁltering operation to get image
residuals in the innermost loop is time-consuming. As a result,
a fast method for ﬁltering is needed. In the following sections,
we will describe four acceleration strategies separately.

1) Restriction on Position of Post-Modiﬁcation: To reduce
the number of embedding units to be dealt with in the ﬁrst
loop, we conduct experiment to report the post-modiﬁcation
rate in the set of units modiﬁed with steganography. Table
I and Table II show the average results on 10,000 images
from BOSSBase [27] for steganography methods in spatial and
JPEG domains. From Tables I and II, we observe that for those
embedding units modiﬁed by the stego post-processing, more

TABLE I: The post-modiﬁcation rate in the set of units
modiﬁed with steganography (%) evaluated on diﬀerent spatial
steganography methods (0.4 bpp).

S-UNI MIPOD HILL

CMD-HILL

Average

65.18

66.31

65.93

65.56

65.75

TABLE II: The post-modiﬁcation rate in the set of units
modiﬁed with steganography (%) evaluated on diﬀerent JPEG
steganography methods (0.4 bpnz).

QF

75
95

J-UNI

UERD

BET-HILL

Average

68.18
65.30

52.26
54.67

50.22
53.70

56.89
57.89

TABLE III: The ratio of the post-modiﬁcations whose direc-
tion is opposite to that of steganography modiﬁcations (%)
evaluated on diﬀerent spatial steganography methods (payload
0.4 bpp).

S-UNI MIPOD HILL

CMD-HILL

Average

99.59

98.91

99.01

96.28

98.45

of them are located at the small set of the units modiﬁed with
steganography. Taking S-UNIWARD for instance, over 65%
of post-modiﬁcation are located at the set of units modiﬁed
with steganography, which occupies only 7.39% of all units.
Since the steganography modiﬁcation rate is relatively lower
in the experiment (less than 11% for spatial steganography for
payload 0.4 bpp, and less than 4% for JPEG steganography for
payload 0.4 bpnz), we consider dealing with those embedding
units that have been previously modiﬁed with the steganogra-
phy while skipping most unchanged units.

2) Restriction on Direction of Post-Modiﬁcation: In the
previous section, we limited the post-modiﬁcation to be per-
formed on those embedding units which have been modi-
ﬁed with steganography. To speed up the second loop, we
will analyze the relationship between the directions of post-
modiﬁcation and steganography modiﬁcation. We consider the
post-modiﬁcation that locate in the units that has modiﬁed by
steganography and report the ratio of the post-modiﬁcations
whose direction is opposite to that of steganography mod-
iﬁcations in Table III and Table IV. The two tables show
the average results on 10,000 images from BOSSBase [27]
in diﬀerent cases. From the two tables, we observe that the
direction of post-modiﬁcation is usually contrary to that of
steganography modiﬁcation. On average, such ratio is over
98% and over 86% for spatial and JPEG steganography sepa-
rately. In our method, therefore, we will limit the direction
of post-modiﬁcation. This property is reasonable since the
detectable artifacts left by steganography usually become more
obvious when the direction of post-modiﬁcation is the same
as that of steganography modiﬁcation.

3) Restriction on Amplitude of Post-Modiﬁcation:
In
section II-B, we showed that adding a multiple of 4 to
any embedding unit of the stego image would not confuse
the message extraction. However, most existing literatures
have shown that the security performance of steganography

JOURNAL OF LATEX CLASS FILES, VOL. 14, NO. 8, AUGUST 2015

6

TABLE IV: The ratio of the post-modiﬁcations whose direc-
tion is opposite to that of steganography modiﬁcations (%)
evaluated on diﬀerent JPEG steganography methods (payload
0.4 bpnz).

Algorithm 2 Pseudo-code for the stego post-processing. Im-
ages X, Y, Z are of size n1×n2. F is the adaptive ﬁlter generated
based on predictor learned from X. The for loop in Line 6
traverses all embedding units row by row.

QF

75
95

J-UNI

UERD

BET-HILL

Average

95.76
90.70

92.42
85.11

89.53
83.54

92.57
86.45

usually becomes poorer when the steganography modiﬁcation
becomes relatively larger. To enhance steganography security,
we expect that most amplitudes of the post-modiﬁcation are
the smallest ones, i.e. 4, for the ternary STCs. According
to our experiments on 10,000 images from BOSSBase [27],
we observe that the amplitude of 100% and over 98% post-
modiﬁcation is equal
to 4 for spatial (i.e. S-UNIWARD,
MIPOD, HILL, CMD-HILL) and JPEG (i.e. J-UNIWARD,
UERD, BET-HILL) steganography methods separately, which
ﬁts our expectations very well. Therefore, we limit the ampli-
tude for the post-modiﬁcation to 4 in our method.

4) Eﬃcient Convolution: In the three previous subsections,
we try to reduce the loop count of the three loops in Algorithm
1 separately. In this section, we will speed up the key operation
the Res() function to obtain image residual
- i.e.
in the
innermost loop (i.e. line 11) in Algorithm 1.

In section III-A3, we determine to employ several adaptive
convolution ﬁlters with a smaller size (i.e. w = 3 or w = 7,
which is signiﬁcantly smaller than the image size n1 and n2,
i.e. n1 = n2 = 512 or 256 in our experiments) to update image
residual of temporary stego T. Please note that the convolution
is linear and it just aﬀects a small region of embedding units
that around the ﬁlter center. Thus, there is no need to perform
the convolution on the whole temporary stego T to obtain
its residual, since just an element within T is diﬀerent from
the candidate stego Z (refer line 9-10 in Algorithm 1). An
equivalent and eﬃcient method is employed in our method.
When the image residual of Z is available (i.e. RZ ), the image
residual of T can be calculated based on the following formula:

RT = conv(T, F) = conv(Z ± δi j × 4, F)
= conv(Z, F) ± conv(δi j, F) × 4
= RZ ± conv(δi j, F) × 4

(6)

where δi j is a matrix of the same size n1 × n2, and its elements
are all 0 except that the element at position (i, j) is 1.

Due to the characteristic of matrix δi j, it is very fast to
get the RT via modifying a small region corresponding to the
position (i, j) within RZ , that is, a region of size w × w for
spatial steganography or a region of size (w + 7) × (w + 7)
3 for JPEG steganography. By doing so, we can obtain over
500 times acceleration both in spatial and JPEG steganography
based on our experiments.

1: Input: cover image X; stego image Y
2: Output: enhanced stego images Z
3: Initialize Z = Y
4: RX = conv(X, F)
5: RZ = conv(Z, F)
6: for i ∈ {1, ..., n1},
7:
8:
9:
10:
11:

s = (Xi j − Yi j) × 4
T = Z
Ti j = Zi j + s
if

s == 0 or Ti j (cid:60) V then
continue

j ∈ {1, ..., n2} do

12:
13:
14:
15:
16:
17:

end if
RT = Update a small region of RZ
DZ X = (cid:205) |RZ − RX |
DT X = (cid:205) |RT − RX |
if DT X < DZ X then
Update Zi j = Ti j
Update RZ = RT

end if

18:
19:
20: end for
21: return Z

C. The Proposed Method

The pseudo-code for the proposed stego post-processing is
illustrated in Algorithm 2. Note that the source code of the
Algorithm 2 can be available at GitHub. 4 According to the
ﬁrst three acceleration strategies, we observe that only one loop
(i.e. line 6-20 in Algorithm 2) is remaining here compared to
Algorithm 1, and most embedding units in this loops will be
skipped (i.e. line 10-12 in Algorithm 2). According to the
analysis in Section III-B - 4), the execution time is unbearable
without using the fast method for obtaining temporary image
residual . Thus the fast method is employed in both Algorithm
1 and Algorithm 2. For a fair comparison, both algorithms
are implemented with Matlab and on the same server with
CPU Intel Xeon Gold 6130. The processing time and the
security performance of two algorithms would be evaluated
in the following.

1) Comparison on Processing Time: In this experiment,
we will compare the processing time of the algorithm before
and after using the ﬁrst three acceleration strategies. Four
spatial steganography methods and three JPEG steganograpy
methods are considered 5. The comparative results are shown
in Table V and Table VI. From the two tables, we observe that
the processing time of the proposed method (i.e. Algorithm 2)
is signiﬁcantly shorter than the original one (i.e. Algorithm 1).
On average, we gain over 12 and 9 times speed improvement
for the spatial and JPEG steganography separately.

3Note that here: 1). The Inverse Discrete CosineTransform (IDCT) in JPEG
decompression is linear. 2) Modifying a DCT coeﬃcient in JPEG will aﬀect
an 8 × 8 image block in spatial domain.

4Source codes are available at: https://github.com/bolin-chen/universal-spp
5Please refer to Section IV for more details about the experimental settings.

JOURNAL OF LATEX CLASS FILES, VOL. 14, NO. 8, AUGUST 2015

7

TABLE V: Processing time (s) for Algorithm 1 and Algorithm
2 in spatial domain (0.4 bpp).

S-UNI MIPOD HILL

CMD-HILL

Average

Algorithm 1
Algorithm 2

3.75
0.27

3.72
0.29

3.75
0.29

3.72
0.33

3.74
0.30

TABLE VI: Processing time (s) for Algorithm 1 and Algorithm
2 in JPEG domain (0.4 bpnz).

QF

Strategy

J-UNI

UERD

BET-HILL

Average

75

95

Algorithm 1
Algorithm 2
Algorithm 1
Algorithm 2

4.65
0.50
4.83
0.54

4.66
0.49
4.85
0.53

4.64
0.49
4.81
0.53

4.65
0.49
4.83
0.53

TABLE VII: Detection accuracies (%) for Algorithm 1 and
Algorithm 2 in spatial domain (0.4 bpp). The steganalytic
feature set is SRM. In all following tables, the value with
an asterisk (*) denotes the best result.

S-UNI MIPOD

HILL

CMD-HILL

Average

Baseline
Algorithm 1
Algorithm 2

79.68
78.34
78.31*

75.66
72.83*
73.19

75.72
72.96
72.42*

70.06
69.35
68.93*

75.28
73.37
73.21*

TABLE VIII: Detection accuracies (%) for Algorithm 1 and
Algorithm 2 in JPEG domain (0.4 bpnz). The steganalytic
feature set is GFR.

QF

Strategy

J-UNI

UERD

BET-HILL

Average

75

95

Baseline
Algorithm 1
Algorithm 2
Baseline
Algorithm 1
Algorithm 2

89.66
88.81
88.54*
72.79
72.26
71.75*

89.59
88.15
87.48*
76.00
73.72
73.46*

87.13
84.76
84.59*
69.22
66.31*
66.88

88.79
87.24
86.87*
72.67
70.76
70.70*

TABLE IX: Detection accuracies (%) for diﬀerent ﬁlter sets
in spatial steganography (0.4 bpp). In all following tables, the
underlined value denotes the pooper result compared to the
baseline steganography.

Filter Set

S-UNI MIPOD

HILL

CMD-HILL

Average

Baseline
{B ⊗ BT }
{B, BT }
{B, BT , B ⊗ BT }

79.68
78.82*
79.42
79.16

75.66
74.58
75.69
74.37*

75.72
73.87
75.13
73.75*

70.06
70.37
70.02
69.95*

75.28
74.41
75.07
74.31*

TABLE X: Detection accuracies (%) for diﬀerent ﬁlter sets in
JPEG steganography (0.4 bpnz).

QF

Filter Set

J-UNI

UERD

BET-HILL

Average

75

95

Baseline
{B ⊗ BT }
{B, BT }
{B, BT , B ⊗ BT }
Baseline
{B ⊗ BT }
{B, BT }
{B, BT , B ⊗ BT }

89.66
94.97
88.54*
88.56
72.79
80.56
71.75*
72.09

89.59
95.43
87.48*
87.67
76.00
85.42
73.46*
73.80

87.13
92.99
84.59
84.54*
69.22
75.81
66.88
66.67*

88.79
94.46
86.87*
86.92
72.67
80.60
70.70*
70.85

TABLE XI: Detection accuracies (%) for diﬀerent sizes of
basic ﬁlter B for spatial steganography (0.4 bpp). The ﬁlter
set is {B, BT, B ⊗ BT }. The steganalytic feature set is SRM.

Size

S-UNI MIPOD

HILL

CMD-HILL

Average

Baseline
3
5
7
9

79.68
79.16
78.28*
78.31
78.37

75.66
74.37
73.32
73.19*
73.29

75.72
73.75
72.46
72.42*
73.15

70.06
69.95
69.33
68.93*
69.22

75.28
74.31
73.35
73.21*
73.51

TABLE XII: Detection accuracies (%) for diﬀerent sizes of
basic ﬁlter B for JPEG steganography (0.4 bpnz). The ﬁlter
set is {B, BT }. The steganalytic feature set is GFR.

2) Comparison on Security Performance: In this experi-
ment, we will compare the security performances of Algorithm
1 and Algorithm 2. The experimental results are shown in
Table VII and Table VIII. From the two tables, we observe that
both algorithms can enhance the steganography security in all
cases. Although we have signiﬁcantly simpliﬁed the Algorithm
1 for acceleration, the performance of Algorithm 2 would not
drop. On the contrary, it is able to outperform Algorithm 1
slightly on average.

QF

Size

J-UNI

UERD

BET-HILL

Average

75

95

Baseline
3
5
7
9
Baseline
3
5
7
9

89.66
88.54*
88.87
88.81
88.89
72.79
71.75*
72.09
72.04
72.34

89.59
87.48*
87.82
87.99
88.06
76.00
73.46*
73.92
73.99
74.17

87.13
84.59*
84.95
85.35
85.33
69.22
66.88
66.81*
66.90
66.90

88.79
86.87*
87.21
87.38
87.43
72.67
70.70*
70.94
70.98
71.14

IV. Experimental Results and Discussions

In our experiments, we collect 10,000 gray-scale images
of size 512 × 512 from BOSSBase [27], and randomly divide
them into two non-overlapping and equal parts, one for training
and the other for testing. Like most existing literatures, we
use the optimal simulator for data embedding. Four typical
spatial steganography methods (i.e. S-UNIWARD [5], MIPOD
[7], HILL [6] and CMD-HILL [8]) and three typical JPEG
steganography methods (i.e. J-UNIWARD [5], UERD [12]
and BET-HILL [13]) are considered. The spatial steganalytic
detectors include two conventional feature sets (i.e. SRM [31],
maxSRM [37]) and a CNN-based one (i.e. Xu-Net [33]).
Similarly, the JPEG steganalytic detectors also include two

conventional ones (i.e. GFR [32], SCA-GFR [38] ) and a CNN-
based one (i.e. J-Xu-Net [35]). The ensemble classiﬁer [39] is
used for conventional steganalytic features.

A. Hyper-Parameter Selection

The residual function Res() is the key issue in the proposed
algorithm that will signiﬁcantly aﬀect
the security perfor-
mance. We employ several adaptive ﬁlters to get image resid-
uals. In this section, we try to select proper hyper-parameter
about the adaptive ﬁlters, including the adaptive ﬁlter set and
the size of basic ﬁlter B.

JOURNAL OF LATEX CLASS FILES, VOL. 14, NO. 8, AUGUST 2015

8

TABLE XIII: Detection accuracies (%) for diﬀerent steganography methods in spatial domain. In all following tables, we name
the enhanced version of some steganography such as “A” with the proposed Stego Post-Processing as “A-SPP” for short.

Steganography

S-UNI
S-UNI-SPP
MIPOD
MIPOD-SPP
HILL
HILL-SPP
CMD-HILL
CMD-HILL-SPP

0.1

0.2

60.09
59.76*
58.25
58.37
56.65
56.09*
55.09
54.55*

68.29
67.55*
65.68
63.83*
64.14
62.60*
60.53
60.13*

SRM
0.3

74.74
73.27*
71.44
69.11*
70.44
67.68*
65.86
64.95*

0.4

0.5

0.1

0.2

maxSRMd2
0.3

0.4

0.5

0.1

0.2

79.68
78.31*
75.66
73.19*
75.72
72.42*
70.06
68.93*

83.61
82.22*
80.20
77.52*
79.67
76.47*
74.41
72.73*

63.72
63.31*
60.77
59.36*
62.43
60.82*
59.79
59.40*

70.71
70.09*
67.37
65.21*
69.32
66.82*
65.54
64.42*

76.58
75.16*
72.92
70.15*
73.72
71.48*
69.74
68.81*

80.69
79.17*
77.41
73.79*
78.30
75.72*
73.35
71.83*

84.36
82.75*
81.34
78.33*
81.92
79.23*
76.46
75.50*

55.72
55.24*
58.06
56.98*
58.04
56.29*
54.81
54.39*

64.86
63.71*
65.52
62.38*
65.50
62.08*
60.19
59.07*

Xu-Net
0.3

73.62
70.66*
71.11
66.80*
71.40
66.92*
64.66
62.65*

0.4

0.5

78.60
75.37*
75.66
71.36*
77.26
71.36*
69.64
67.44*

82.72
79.73*
80.43
75.23*
80.23
75.50*
73.39
70.25*

TABLE XIV: Detection accuracies (%) for diﬀerent steganography methods in JPEG domain.

QF

Steganography

0.1

0.2

75

95

J-UNI
J-UNI-SPP
UERD
UERD-SPP
BET-HILL
BET-HILL-SPP
J-UNI
J-UNI-SPP
UERD
UERD-SPP
BET-HILL
BET-HILL-SPP

59.03
59.06
60.42
59.60*
58.26
57.82*
52.41
52.31*
54.18
54.11*
52.24
52.06*

71.00
70.92*
72.46
71.52*
69.12
67.58*
57.92
57.66*
60.62
60.01*
56.75
56.21*

GFR
0.3

81.82
81.23*
82.27
81.11*
78.96
77.04*
65.15
64.55*
68.49
66.66*
62.30
61.22*

0.4

0.5

0.1

0.2

SCA-GFR
0.3

0.4

0.5

0.1

0.2

J-Xu-Net
0.3

0.4

0.5

89.66
88.54*
89.59
87.48*
87.13
84.59*
72.79
71.75*
76.00
73.46*
69.22
66.88*

94.50
93.46*
94.14
92.54*
92.10
90.42*
80.63
78.98*
82.77
79.68*
75.59
72.86*

64.33
63.72*
70.36
70.07*
65.19
64.08*
53.59
53.52*
59.33
59.06*
54.14
53.42*

76.91
76.36*
82.17
81.08*
76.98
75.22*
59.94
59.47*
67.89
66.81*
59.47
58.19*

85.94
85.07*
88.91
88.04*
86.11
83.85*
67.21
65.98*
74.57
72.85*
65.36
63.39*

91.75
90.87*
93.17
92.10*
92.01
89.73*
73.90
72.65*
80.53
77.93*
71.73
69.18*

95.47
94.65*
95.88
94.83*
95.58
93.59*
80.00
78.27*
85.44
82.65*
77.81
75.04*

65.28
65.23
77.44
77.06*
65.63
64.28*
50.26
50.08*
50.12
50.04*
50.47
49.90*

77.66
77.53*
88.04
88.18
77.70
76.62*
57.88
57.72*
73.37
72.74*
58.49
56.58*

86.13
85.97*
93.01
92.58*
84.88
83.27*
66.43
65.34*
82.39
82.30*
65.36
64.09*

91.72
91.46*
96.13
95.95*
90.43
89.57*
73.38
72.42*
88.97
88.17*
73.01
72.60*

95.01
94.57*
97.46
97.58
95.20
93.73*
79.03
79.18
92.79
92.12*
80.00
78.07*

1) Adaptive Filter Set: As described in section III-A3, we
ﬁrst learn a basic ﬁlter B for each image, and then produce two
ﬁlters via transpose and outer product, and then we obtain three
adaptive ﬁlters, that is, B, BT and B ⊗ BT . For simpliﬁcation,
three combinations of above ﬁlters are evaluated, that is, {B ⊗
BT }, {B, BT } and {B, BT, B⊗ BT }. In addition, the ﬁlter size of
B is ﬁxed as 3 in this experiment, and the steganalytic features
SRM and GFR are used for security evaluation for the spatial
(0.4 bpp) and JPEG steganography (0.4 bpnz) separately. The
detection accuracies evaluated on test set are shown in Table
IX and Table X. From Table IX, we observe that the three
ﬁlter sets can improve the security performance of the four
spatial steganography methods except using the ﬁlter {B ⊗ BT }
on CMD-HILL. On average, the set {B, BT, B ⊗ BT } achieves
the best performance, and it gains an average improvement of
0.97% compared to the baseline steganpgraphy. From Table
X, we observe {B, BT } and {B, BT, B ⊗ BT } can improve the
security performance while {B⊗BT } will signiﬁcantly drop the
performance. On average, the ﬁlter set {B, BT } performs the
best and it achieves an improvement of around 1.90% for both
quality factors. The above results show that diﬀerent adaptive
ﬁlter sets have a great inﬂuence on security performance. The
ﬁlter sets {B, BT, B ⊗ BT } and {B, BT } usually perform the
best in spatial and JPEG domain separately.

2) Size of Basic Filter B: In previous section, we ﬁxed
the size of basic ﬁlter B as 3, and selected the proper ﬁlter
set for spatial and JPEG steganography separately. In this
section, we ﬁrst ﬁxed the selected ﬁlter set, and evaluate
their performances with diﬀerent sizes of the basic ﬁlter B,
including w = 3, 5, 7, 9. The detection accuracies are shown in

Table XI and Table XII. From the two tables, we observe that
the four ﬁlter sizes can improve the performance of various
steganography methods in both spatial and JPEG domains.
In spatial domain, the average performance becomes the best
when the size of B is 7 instead of 3, which will further gain
an improvement of 1.10%. In JPEG domain, the proper size
of B is still 3 based on our experiments.

important

We should note that the hyper-parameter determined previ-
ously is just a suboptimal solution. Due to time constraint,
we probably ﬁnd a better solution via brute force method
according to several
issues, such as the combi-
nations of adaptive ﬁlters with diﬀerent sizes, the speciﬁc
steganography with a given payload, and the steganalytic
models under investigation and so on. For simplicity, we just
apply the ﬁlter set {B, BT, B ⊗ BT } with ﬁlter size w = 7 for
spatial steganography, and the ﬁlter set {B, BT } with ﬁlter size
w = 3 for JPEG steganography for all embedding payloads and
steganalytic models in the following section.

B. Steganography Security Evaluation

In this section, we will evaluate the security performance on
diﬀerent steganography methods for diﬀerent payloads ranging
from 0.1 bpp/bpnz to 0.5 bpp/bpnz. Three diﬀerent stegana-
lyzers in spatial domain, including SRM [31], maxSRM [37],
and Xu-Net [33], and three steganalyzers in JPEG domain,
including GFR [32], SCA-GFR [38], and J-Xu-Net [35], are
used for security evaluation. The average detection accuracies
on test set are shown in Table XIII and Table XIV. From the
two tables, we obtain the three following observations:

• Almost in all cases, the proposed method can eﬀectively
improve the steganography security both in spatial and

JOURNAL OF LATEX CLASS FILES, VOL. 14, NO. 8, AUGUST 2015

9

TABLE XV: Post-Modiﬁcation Rate (%(cid:24)(cid:24)) for steganography
methods in spatial domain.

Steganography

S-UNI
MIPOD
HILL
CMD-HILL

0.1

3.81
3.26
6.64
2.67

0.2

11.21
12.87
17.53
7.44

0.3

21.30
27.14
31.30
13.81

0.4

33.92
45.17
47.54
21.91

0.5

48.89
66.34
66.09
31.78

TABLE XVI: Post-Modiﬁcation Rate (%(cid:24)(cid:24)) for steganography
methods in JPEG domain.

QF

Steganography

75

95

J-UNI
UERD
BET-HILL
J-UNI
UERD
BET-HILL

0.1

0.37
0.39
0.66
1.33
1.84
2.21

0.2

1.42
1.52
2.11
5.73
7.16
7.87

0.3

3.07
3.28
4.19
13.13
15.48
16.24

0.4

5.21
5.59
6.64
23.00
26.09
26.53

0.5

7.87
8.41
9.59
34.74
38.48
38.23

JPEG domains. The improvement usually increases with
increasing embedding payload.

• In spatial domain, we can achieve greater improvements
on MIPOD and HILL compared to S-UNIWARD and
CMD-HILL. Taking the payload of 0.5 bpp for instance,
we obtain about 3% improvement on both MIPOD and
HILL, while less than 2% for two other steganogra-
phy methods under two hand-crafted steganalytic feature
sets, i.e. SRM and maxSRM. Furthermore, the proposed
method seems more eﬀective to the CNN-based stegan-
alyzer (i.e. Xu-Net). For instance, we can obtain about
5% improvement for MIPOD and HILL for the payload
of 0.5 bpp, which is a signiﬁcant improvement on current
steganography methods.

• In JPEG domain, the proposed method can gain more
improvement on UERD and BET-HILL compared to J-
UNIWARD. Taking the payload 0.5 bpnz and QF = 95
for instance, it obtain an improvement of about 3% for
both UERD and BET-HILL under the steganalytic feature
GFR, while only 1.65% for J-UNIWARD. In addition,
the proposed method seems less eﬀective to CNN-based
steganalyzer (i.e. J-Xu-Net) compared to the hand-crafted
feature sets. In some cases, the security will drop slightly
(less than 0.15%) after using the proposed method.

C. Analysis on Post-Modiﬁcation

In this section, we will analyze some statistical characteris-
tics on the post-modiﬁcation with our method, including the
modiﬁcation rate and its relation to the density of steganogra-
phy modiﬁcation.

1) Post-Modiﬁcation
modiﬁcation rate as follows:

Rate: We

deﬁne

the

post-

RPM =

|Z (cid:44) Y |
|Y |

=

|Z (cid:44) Y |
|X |

(7)

where X, Y, Z denote the set of embedding units in cover,
stego, and the modiﬁed version with the proposed method
separately. Note that |X | = |Y | = |Z | since the number of
embedding units is the same for the three images. Table XV

and Table XVI show the average results evaluated on 10,000
images from BossBase. From the two tables, we observe that
RPM will increase with increasing embedding payloads, and
RPM is usually less than 67%(cid:24)(cid:24) and 39%(cid:24)(cid:24) for spatial and
JPEG steganography separately even the embedding payload
is as high as 0.5bpp / 0.50bpnz.

Fig. 4 shows the violin plots of RPM for HILL and BET-
HILL in diﬀerent cases. From the two ﬁgures, we observe that
the median number of RPM usually increases with increasing
payload. Even when the payload is as high as 0.5 bpp / 0.5
bpnz, the median number of RPM is less than 80%(cid:24)(cid:24) / 40%(cid:24)(cid:24),
which means that we can achieve great improvement (refer to
Table XIII and Table XIV) via just modifying a tiny fraction
of embedding units for any given stego images Y .

2) Post-Modiﬁcation Rate vs. Density of Steganography
Modiﬁcation: From Fig. 4, we also observe that for a given
payload, the values of RPM will change a lot for diﬀerent
images. Taking HILL for 0.1 bpp for instance, the minimum
of RPM is close to 0, while the maximum become close
to 30, meaning the range of RPM is over 20 in this case.
Furthermore, the range will increase with increasing payload
or quality factor. In this section, we will analyze the factor
which aﬀects the values of RPM .

Fig. 5 shows the steganography modiﬁcations and the post-
modiﬁcations of two typical images using HILL for payload
0.1 bpp. From Fig. 5, we observe that for the ﬁrst image,
the steganography modiﬁcations seem uniformly dispersed
throughout the whole image, while it is highly concentrated
on a small part for the second one. After performing our
method, the numbers of the post-modiﬁcation are 1 and 523
separately. Thus we expect that there should be a positive
correlation between the relative post-modiﬁcation rate RP M
and the density of steganography modiﬁcation. To verify this,
we deﬁne the density of steganography modiﬁcation in the
following way. We ﬁrst compare the diﬀerence between cover
X and stego Y , and divide the diﬀerence (i.e. Y (cid:44) X) into
5×5 overlapping small blocks. And then we just consider those
blocks which contain steganography modiﬁcation, denoted as
as Bi, i = 1, 2 . . . N. For each block Bi, we calculate the
proportion of steganography modiﬁcation |Bi |/25, where |Bi |
denotes the number of steganography modiﬁcation in block
Bi, 0 < |Bi |/25 ≤ 1. Finally, we deﬁne the density of
steganography modiﬁcation for the stego image Y as follows.

DY = 1
N

N
(cid:213)

n=1

|Bi |
25

(8)

Based on this deﬁnition, the densities of two images in Fig.5
are 0.05 and 0.27 respectively. We further calculate RP M and
the density for 10,000 images in BOSSBase, and show the
scatter plot for HILL (0.1 bpp) and BET-HILL (0.1 bpnz,
QF=75) in Fig 6. For display purpose, we remove outlying
data (less than 0.15% with larger values) in this ﬁgure. From
Fig. 6, it is obvious that RPM increases with increasing density.
In this case, the corresponding Pearson correlation coeﬃcients
are 0.95 and 0.70 respectively, meaning the linear relationships
between the RPM and the density are relatively strong, which

JOURNAL OF LATEX CLASS FILES, VOL. 14, NO. 8, AUGUST 2015

10

(a) HILL

(b) BET-HILL

Fig. 4: The violin plots of the Post-Modiﬁcation Rates for HILL and BET-HILL

(a) No.7353

(b) Steganography Modiﬁcation

(c) Post-Modiﬁcation

(d) No.1265

(e) Steganography Modiﬁcation

(f) Post-Modiﬁcation

Fig. 5: Steganography modiﬁcation using HILL (0.1 bpp) and the proposed post-modiﬁcation for two typical image examples.
The densities of steganography modiﬁcation for the two images are 0.05 and 0.27 respectively, and the corresponding numbers
of post-modiﬁcation are 1 and 523 respectively.

0.10.20.30.40.5020406080100120140160Payload (bpp)R PM (in ‱)75­0.175­0.275­0.375­0.475­0.595­0.195­0.295­0.395­0.495­0.5020406080100120140QF & Payload (bpnz)R PM (in ‱)JOURNAL OF LATEX CLASS FILES, VOL. 14, NO. 8, AUGUST 2015

11

(a) HILL for 0.1 bpp

(b) BET-HILL for 0.1 bpnz (QF=75)

Fig. 6: The scatter plot of RPM vs. the density of steganography modiﬁcation, the corresponding Pearson correlation coeﬃcients
for the two cases are 0.95 and 0.70 respectively.

TABLE XVII: Processing time (s) comparison with diﬀerent
methods in spatial domain.

results are shown in Table XVII and Table XVIII. From the
two tables, we have two following observations:

S-UNI
S-UNI-SPP
MIPOD
MIPOD-SPP
HILL
HILL-SPP
CMD-HILL Embed
CMD-HILL SPP

0.1

0.30
0.17
1.68
0.17
0.19
0.18
0.32
0.19

0.2

0.28
0.20
1.78
0.20
0.19
0.21
0.33
0.23

0.3

0.29
0.23
1.84
0.25
0.19
0.25
0.32
0.28

0.4

0.28
0.27
1.90
0.29
0.19
0.29
0.32
0.33

0.5

0.29
0.31
1.90
0.34
0.19
0.34
0.32
0.38

TABLE XVIII: Processing time (s) comparison with diﬀerent
methods in JPEG domain.

QF

Steganography

75

95

J-UNI
J-UNI-SPP
UERD
UERD-SPP
BET-HILL
BET-HILL-SPP
J-UNI Embed
J-UNI SPP
UERD
UERD SPP
BET-HILL
BET-HILL SPP

0.1

3.07
0.47
0.08
0.47
0.68
0.47
3.06
0.48
0.08
0.48
0.69
0.48

0.2

3.07
0.48
0.08
0.48
0.69
0.48
3.06
0.50
0.07
0.50
0.74
0.50

0.3

3.07
0.49
0.07
0.49
0.69
0.48
3.08
0.52
0.07
0.51
0.71
0.51

0.4

3.07
0.50
0.07
0.49
0.69
0.49
3.04
0.54
0.07
0.53
0.71
0.53

0.5

3.06
0.50
0.07
0.50
0.69
0.50
3.05
0.56
0.07
0.55
0.71
0.56

ﬁts our expectation well. Similar results can be found for other
steganographic methods and payloads.

D. Evaluation on Processing Time

In this section, we will evaluate the processing time of the
proposed method. To achieve convincing results, we report
the average results on 100 images randomly selected from
BOSSBase. For comparison, we also provide the processing
time of the corresponding steganography method. The average

• For a given steganography method, the processing time
usually increases with increasing payload since more
steganography modiﬁcation should be dealt with. Taking
HILL for instance, the time processing is 0.18s for 0.1
bpp, while it becomes 0.34s for 0.5 bpp.

• For the same reason, for a given JPEG steganography
method and a payload, the processing time usually in-
creases with increasing quality factor. Taking BET-HILL
for 0.5 bpnz for instance, the processing time is 0.50s for
QF=75, while it increases to 0.56s for QF=95.

Overall, the processing time of the proposed method is
very short (less than 0.60s per image in all cases), which is
comparable to or even much shorter than that of the current
steganography method.

E. Security Evaluation on Other Image Databases

In this section, we will evaluate the security performance on
two other databases including 10,000 gray-scale images of size
512 × 512 from BOWS2 [28] and 80,005 gray-scale images of
size 256×256 6 from ALASKA [29]. For BOWS2, the partition
of image dataset and hyper-parameters are the same as previ-
ous ones used for the BOSSBase. For ALASKA, we randomly
select 60,005 images for training while the other 20,000 for
testing. In addition, the current best CNN-based steganalysis,
i.e., SRNet [40], is used for security evaluation on ALASKA7.
For comparison, the detection accuracy improvements on the
three image databases (i.e. BOSSBase, BOWS2 and ALASKA)
are shown in Table XIX and Table XX. From the two tables,
we obtain two following observations:

6The images are resampled using "imresize()" in Matlab with default

settings from images of size 512 × 512.

7Since SRNet is originally designed for images of size 256 × 256, and it
needs suﬃcient training data to get good results, we do not use SRNet to
evaluate the security on BOSSBase and BOWS2.

0.050.10.150.20.250.30510152025Data PointsLine of Best FitDensityR PM (in ‱)0.040.060.080.10.120.14012345Data pointsLine of best fitDensityR PM (in ‱)JOURNAL OF LATEX CLASS FILES, VOL. 14, NO. 8, AUGUST 2015

12

TABLE XIX: Detection accuracies improvements (%) for spatial steganography on three image databases (i.e. BOSSBase,
BOWS2 and ALASKA).

Steganography

Database

S-UNI

MIPOD

HILL

CMD-HILL

BOSSBase
BOWS2
ALASKA
BOSSBase
BOWS2
ALASKA
BOSSBase
BOWS2
ALASKA
BOSSBase
BOWS2
ALASKA

SRM
0.3

1.47
2.33
0.65
2.33
3.32
1.34
2.76
4.75
1.05
0.91
2.71
0.46

0.1

0.33
0.23
0.21
-0.12
0.57
0.25
0.56
1.52
0.03
0.54
0.65
0.46

0.5

1.39
1.97
1.08
2.68
4.94
1.86
3.20
5.04
1.25
1.68
4.12
1.11

maxSRMd2
0.3

0.5

0.1

0.41
1.66
0.38
1.41
1.47
0.64
1.61
2.76
0.92
0.39
0.94
0.30

1.42
2.73
1.18
2.77
4.92
1.82
2.24
4.54
1.86
0.93
3.00
1.18

1.61
2.11
0.98
3.01
4.03
2.17
2.69
4.22
1.79
0.96
3.67
1.58

Xu-Net
0.3

2.96
4.66
2.48
4.31
5.23
4.47
4.48
5.92
4.11
2.01
3.22
1.69

0.1

0.48
1.00
-0.14
1.08
1.92
1.32
1.75
2.66
0.93
0.42
1.96
-0.09

0.5

2.99
2.98
3.48
5.20
5.21
4.61
4.73
5.67
6.11
3.14
4.64
2.01

SRNet
0.3

-
-
0.60
-
-
0.81
-
-
0.41
-
-
0.20

0.5

-
-
0.57
-
-
1.16
-
-
0.62
-
-
0.21

0.1

-
-
0.72
-
-
0.55
-
-
0.88
-
-
0.06

Average

1.45
2.19
1.02
2.52
3.51
1.75
2.67
4.12
1.67
1.22
2.77
0.76

TABLE XX: Detection accuracies improvements (%) for JPEG steganography on three image databases (i.e. BOSSBase, BOWS2
and ALASKA).

QF

Steganography

Database

J-UNI

75

UERD

BET-HILL

J-UNI

95

UERD

BET-HILL

BOSSBase
BOWS2
ALASKA
BOSSBase
BOWS2
ALASKA
BOSSBase
BOWS2
ALASKA
BOSSBase
BOWS2
ALASKA
BOSSBase
BOWS2
ALASKA
BOSSBase
BOWS2
ALASKA

GFR
0.3

0.59
1.01
0.38
1.16
1.07
1.08
1.92
1.80
1.07
0.60
0.95
0.36
1.83
1.50
0.96
1.08
1.08
0.89

0.1

-0.03
-0.16
0.06
0.82
-0.11
0.47
0.44
0.47
-0.03
0.10
0.03
0.06
0.07
-0.11
0.14
0.18
-0.04
0.19

0.5

1.04
1.06
1.44
1.60
1.43
1.65
1.68
2.15
1.85
1.65
2.66
1.47
3.09
3.85
2.26
2.73
4.13
1.81

0.1

0.61
0.03
0.28
0.29
0.63
0.14
1.11
1.33
0.16
0.07
0.08
0.04
0.27
0.27
0.02
0.72
0.23
0.24

SCA-GFR
0.3

0.87
0.69
1.18
0.87
0.96
1.21
2.26
2.36
1.26
1.23
1.27
0.23
1.72
2.20
1.58
1.97
2.09
1.03

0.5

0.82
1.18
1.20
1.05
1.08
1.77
1.99
1.68
2.01
1.73
2.60
1.52
2.79
2.96
2.58
2.77
3.05
2.17

0.1

0.05
0.40
0.06
0.38
1.25
0.22
1.35
0.97
0.32
0.18
-0.04
0.03
0.08
0.01
-0.15
0.57
0.20
-0.03

J-Xu-Net
0.3

0.16
0.08
0.92
0.43
2.35
0.82
1.61
2.38
1.85
1.09
1.41
0.47
0.09
1.93
1.73
1.27
2.32
0.42

0.5

0.44
1.28
1.58
-0.12
0.52
1.80
1.47
1.45
3.58
-0.15
1.34
1.76
0.67
-0.17
2.96
1.93
1.64
1.91

SRNet
0.3

-
-
0.52
-
-
1.01
-
-
2.37
-
-
0.36
-
-
1.45
-
-
1.68

0.1

-
-
-0.24
-
-
0.13
-
-
0.84
-
-
0.00
-
-
0.64
-
-
0.02

0.5

-
-
0.98
-
-
0.27
-
-
2.57
-
-
1.23
-
-
1.73
-
-
3.21

Average

0.51
0.62
0.70
0.72
1.02
0.88
1.54
1.62
1.49
0.72
1.14
0.63
1.18
1.38
1.33
1.47
1.63
1.13

• Almost in all cases, the proposed method can eﬀectively
enhance the steganography security. In many cases, we
can achieve over 3% and 2% for spatial and JPEG
domains separately, which is a signiﬁcant improvement
on modern steganography. In a few cases, the security
performance will drop slightly (less than 0.24%). On av-
erage, our method can enhance the steganography security
for all cases (refer to the ﬁnal column in two tables) .
• The improvement is diﬀerent for the three image datasets.
Compared to the results on BOSSBase and ALASKA, we
can achieve greater improvements on BOWS2 in many
cases, especially for steganography methods in spatial
domain. In addition, the improvement would changes for
diﬀerent steganalytic methods. The improvement evalu-
ated on the current best CNN-based steganalytic detector
(i.e., SRNet) is relatively smaller than that on the there
other detectors.

F. Comparison with Our Previous Method

In this section, we will compare the steganography security

and the processing time with our previous work [26].

TABLE XXI: Detection accuracies improvements (%) of our
previous method [26] and the proposed method for diﬀerent
steganography methods in spatial domain (0.4 bpp).

Steganography

S-UNI MIPOD HILL

CMD-HILL

Average

Method [26]
Proposed

0.96
1.37*

0.85
2.47*

1.69
3.30*

0.10
1.13*

0.90
2.07*

TABLE XXII: Detection accuracies improvements (%) of our
previous method [26] and the proposed method for diﬀerent
steganography methods in JPEG domain (0.4 bpnz QF=95) .

Steganography

J-UNI

UERD

BET-HILL

Average

Method [26]
Proposed

-0.19
1.04*

-0.11
2.54*

0.06
2.34*

-0.08
1.97*

1) Comparison on Security Performance: For simpliﬁ-
cation, we evaluate spatial steganography methods for pay-
load 0.4 bpp using SRM, and evaluate JPEG steganography
methods for payload 0.4 bpnz with QF 95 using GFR both
on BOSSBase. The experimental results are shown in Table
XXI and Table XXII separately. From the two tables, we

JOURNAL OF LATEX CLASS FILES, VOL. 14, NO. 8, AUGUST 2015

13

TABLE XXIII: Processing time (s) for our previous method
[26] and the proposed method for spatial steganography (0.4
bpp).

Steganography

S-UNI MIPOD HILL

CMD-HILL

Average

Method [26]
Proposed

2.03
0.27

2.03
0.29

2.03
0.29

2.03
0.33

2.03
0.30

TABLE XXIV: Processing time (s) for our previous method
[26] and the proposed method for JPEG steganography (0.4
bpnz QF=95)

Steganography

J-UNI

UERD

BET-HILL

Average

Method [26]
Proposed

2.79
0.54

2.78
0.53

2.78
0.53

2.78
0.53

observe that in spatial domain, both methods can enhance
steganography security. On average, the previous method and
the proposed method achieve an improvement of about 1%
and 2% separately. In JPEG domain, our previous method
[26] does not work eﬀectively, while the proposed method
still achieves an average improvement of about 2%.

2) Comparison on Processing Time: The average pro-
cessing time evaluated on 100 randomly selected images
from BOSSBase are shown in Table XXIII and Table XXIV
separately. From the two tables, we observe that the proposed
method is signiﬁcantly faster than the previous method. On
average, the proposed method are able to achieve about 7 times
acceleration in spatial domain, and about 5 times acceleration
in JPEG domain.

The above results show that the proposed method is much

more eﬀective and faster than the previous one [26] 8.

V. Conclusion

In this paper, we propose a novel method to enhance the
steganography security via stego post-processing. The main
contributions of this paper are as follows.

• Unlike existing works which focus on embedding costs
design (e.g., HILL and UNIWARD) or enhancement (e.g.,
CMD and BBC) according to some predetermined rules
(such as complexity-ﬁrst, spreading, clustering [41], and
preserving the continuity of block boundary) during data
embedding, the proposed method tries to directly modify
embedding units of stego to reduce the residual distance
when the embedding processing is completed with an
existing steganography.

• The proposed method is universal, because it can be
eﬀectively applied in those steganographic methods using
STCs for data hiding,
including most modern image
steganography methods both in spatial and JPEG do-
mains. In addition, the number of modiﬁed embedding
units is tiny with the proposed method.

• On average,

the proposed method can enhance the
steganography security in all cases. In many cases, we

8Note that the fast method for updating image residual in section III-B4 is

also employed in our previous work for comparison.

can even achieve over 3% and 2% for the modern stegano-
graphic methods in spatial and JPEG domain separately.
Note that such an improvement is signiﬁcant, especially
for enhancing the advanced steganography, such as CMD-
HILL and BET-HILL.

In our experiments, we try to reduce the Manhattan dis-
tance between cover residual and stego resudial via post-
modiﬁcation. Other steganalytic measures, such as the co-
occurrence matrices of image residual in SRM and some deep
learning based features will be considered in our future work.
In addition, we will combine the technique of adversarial
example to further improve the steganography security.

References

[1] J. Fridrich and T. Filler, “Practical methods for minimizing embedding
impact in steganography,” in Security, Steganography, and Watermarking
of Multimedia Contents IX, vol. 6505, 2007, p. 650502.

[2] T. Filler, J. Judas, and J. Fridrich, “Minimizing additive distortion
in steganography using syndrome-trellis codes,” IEEE Transactions on
Information Forensics and Security, vol. 6, no. 3, pp. 920–935, 2011.

[3] T. Pevn`y, T. Filler, and P. Bas, “Using high-dimensional image models
to perform highly undetectable steganography,” in Springer International
Workshop on Information Hiding, 2010, pp. 161–177.

[4] V. Holub and J. Fridrich, “Designing steganographic distortion using
directional ﬁlters,” in IEEE International Workshop on Information
Forensics and Security, 2012, pp. 234–239.

[5] V. Holub, J. Fridrich, and T. Denemark, “Universal distortion function
for steganography in an arbitrary domain,” Springer EURASIP Journal
on Information Security, vol. 2014, no. 1, p. 1, 2014.

[6] B. Li, M. Wang, J. Huang, and X. Li, “A new cost function for spatial
image steganography,” in IEEE International Conference on Image
Processing, 2014, pp. 4206–4210.

[7] V. Sedighi, R. Cogranne, and J. Fridrich, “Content-adaptive steganog-
raphy by minimizing statistical detectability,” IEEE Transactions on
Information Forensics and Security, vol. 11, no. 2, pp. 221–234, 2016.
[8] B. Li, M. Wang, X. Li, S. Tan, and J. Huang, “A strategy of clustering
modiﬁcation directions in spatial image steganography,” IEEE Transac-
tions on Information Forensics and Security, vol. 10, no. 9, pp. 1905–
1917, 2015.

[9] T. Denemark and J. Fridrich, “Improving steganographic security by
synchronizing the selection channel,” in ACM Workshop on Information
Hiding and Multimedia Security, 2015, pp. 5–14.

[10] W. Zhang, Z. Zhang, L. Zhang, H. Li, and N. Yu, “Decomposing joint
distortion for adaptive steganography,” IEEE Transactions on Circuits
and Systems for Video Technology, vol. 27, no. 10, pp. 2274–2280, 2017.
[11] L. Guo, J. Ni, and Y. Q. Shi, “Uniform embedding for eﬃcient
JPEG steganography,” IEEE transactions on Information Forensics and
Security, vol. 9, no. 5, pp. 814–825, 2014.

[12] L. Guo, J. Ni, W. Su, C. Tang, and Y.-Q. Shi, “Using statistical image
model for JPEG steganography: uniform embedding revisited,” IEEE
Transactions on Information Forensics and Security, vol. 10, no. 12, pp.
2669–2680, 2015.

[13] X. Hu, J. Ni, and Y.-Q. Shi, “Eﬃcient JPEG steganography using domain
transformation of embedding entropy,” IEEE Signal Processing Letters,
vol. 25, no. 6, pp. 773–777, 2018.

[14] W. Li, W. Zhang, K. Chen, W. Zhou, and N. Yu, “Deﬁning joint
distortion for JPEG steganography,” in ACM Workshop on Information
Hiding and Multimedia Security, 2018, pp. 5–16.

[15] K. Chen, W. Zhang, H. Zhou, N. Yu, and G. Feng, “Deﬁning cost
functions for adaptive steganography at the microscale,” in IEEE In-
ternational Workshop on Information Forensics and Security, 2016, pp.
1–6.

[16] K. Chen, H. Zhou, W. Zhou, W. Zhang, and N. Yu, “Deﬁning cost
functions for adaptive JPEG steganography at the microscale,” IEEE
Transactions on Information Forensics and Security, vol. 14, no. 4, pp.
1052–1066, 2018.

[17] W. Zhou, W. Zhang, and N. Yu, “A new rule for cost reassignment in
adaptive steganography,” IEEE Transactions on Information Forensics
and Security, vol. 12, no. 11, pp. 2654–2667, 2017.

[18] W. Zhou, W. Li, K. Chen, H. Zhou, W. Zhang, and N. Yu, “Contro-
versial ’pixel’ prior rule for JPEG adaptive steganography,” IET Image
Processing, vol. 13, no. 1, pp. 24–33, 2018.

JOURNAL OF LATEX CLASS FILES, VOL. 14, NO. 8, AUGUST 2015

14

[19] I. Goodfellow, J. Pouget-Abadie, M. Mirza, B. Xu, D. Warde-Farley,
S. Ozair, A. Courville, and Y. Bengio, “Generative adversarial nets,”
in Advances in neural information processing systems, 2014, pp. 2672–
2680.

[20] C. Szegedy, W. Zaremba, I. Sutskever, J. Bruna, D. Erhan, I. Goodfellow,
and R. Fergus, “Intriguing properties of neural networks,” arXiv preprint
arXiv:1312.6199, 2013.

[21] W. Tang, S. Tan, B. Li, and J. Huang, “Automatic steganographic
distortion learning using a generative adversarial network,” IEEE Signal
Processing Letters, vol. 24, no. 10, pp. 1547–1551, 2017.

[22] J. Yang, D. Ruan, J. Huang, X. Kang, and Y.-Q. Shi, “An embedding
cost learning framework using gan,” IEEE Transactions on Information
Forensics and Security, 2019, To be appeared.

[23] J. Yang, D. Ruan, X. Kang, and Y.-Q. Shi, “Towards automatic em-
bedding cost learning for JPEG steganography,” in ACM Workshop on
Information Hiding and Multimedia Security, 2019, pp. 37–46.

[24] W. Tang, B. Li, S. Tan, M. Barni, and J. Huang, “Cnn-based adversarial
embedding for image steganography,” IEEE Transactions on Information
Forensics and Security, vol. 14, no. 8, pp. 2074–2087, 2019.

[25] S. Bernard, T. Pevn`y, P. Bas, and J. Klein, “Exploiting adversarial
embeddings for better steganography,” in ACM Workshop on Information
Hiding and Multimedia Security, 2019, pp. 216–221.

[26] B. Chen, W. Luo, and P. Zheng, “Enhancing steganography via stego
post-processing by reducing image residual diﬀerence,” in ACM Work-
shop on Information Hiding and Multimedia Security, 2019, pp. 63–68.
[27] P. Bas, T. Filler, and T. Pevn`y, “"break our steganographic system": The
ins and outs of organizing boss,” in Springer International Workshop on
Information Hiding, 2011, pp. 59–70.

[28] P. Bas and T. Furon, “Bows2,” http://bows2.ec-lille.fr, 2007.
[29] R. Cogranne, Q. Giboulot, and P. Bas, “The alaska steganalysis chal-
lenge: A ﬁrst step towards steganalysis âĂİinto the wildâĂİ,” in ACM
Workshop on Information Hiding and Multimedia Security, 2019, pp.
125–137.

[30] N. Provos, “Defending against statistical steganalysis.” in Usenix security

symposium, vol. 10, 2001, p. 323?336.

[31] J. Fridrich and J. Kodovsky, “Rich models for steganalysis of digital
images,” IEEE Transactions on Information Forensics and Security,
vol. 7, no. 3, pp. 868–882, 2012.

[32] X. Song, F. Liu, C. Yang, X. Luo, and Y. Zhang, “Steganalysis of
adaptive JPEG steganography using 2d gabor ﬁlters,” in ACM Workshop
on Information Hiding and Multimedia Security, 2015, pp. 15–23.
[33] G. Xu, H.-Z. Wu, and Y.-Q. Shi, “Structural design of convolutional
neural networks for steganalysis,” IEEE Signal Processing Letters,
vol. 23, no. 5, pp. 708–712, 2016.

[34] J. Ye, J. Ni, and Y. Yi, “Deep learning hierarchical representations for
image steganalysis,” IEEE Transactions on Information Forensics and
Security, vol. 12, no. 11, pp. 2545–2557, 2017.

[35] G. Xu, “Deep convolutional neural network to detect j-uniward,” in ACM
Workshop on Information Hiding and Multimedia Security, 2017, pp.
67–73.

[36] A. D. Ker and R. Böhme, “Revisiting weighted stego-image steganaly-
sis,” in Security, Forensics, Steganography, and Watermarking of Mul-
timedia Contents X, vol. 6819, 2008, p. 681905.

[37] T. Denemark, V. Sedighi, V. Holub, R. Cogranne, and J. Fridrich,
“Selection-channel-aware rich model for steganalysis of digital images,”
in IEEE International Workshop on Information Forensics and Security,
2014, pp. 48–53.

[38] T. D. Denemark, M. Boroumand, and J. Fridrich, “Steganalysis features
for content-adaptive JPEG steganography,” IEEE Transactions on Infor-
mation Forensics and Security, vol. 11, no. 8, pp. 1736–1746, 2016.

[39] J. Kodovsky, J. Fridrich, and V. Holub, “Ensemble classiﬁers for ste-
ganalysis of digital media,” IEEE Transactions on Information Forensics
and Security, vol. 7, no. 2, pp. 432–444, 2012.

[40] M. Boroumand, M. Chen, and J. Fridrich, “Deep residual network
for steganalysis of digital images,” IEEE Transactions on Information
Forensics and Security, vol. 14, no. 5, pp. 1181–1193, 2018.

[41] B. Li, S. Tan, M. Wang, and J. Huang, “Investigation on cost assignment
image steganography,” IEEE Transactions on Information

in spatial
Forensics and Security, vol. 9, no. 8, pp. 1264–1277, 2014.

