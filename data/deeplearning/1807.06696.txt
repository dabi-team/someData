Integrating Algorithmic Planning and Deep Learning
for Partially Observable Navigation

Peter Karkus1,2, David Hsu1,2 and Wee Sun Lee2

8
1
0
2

l
u
J

7
1

]

O
R
.
s
c
[

1
v
6
9
6
6
0
.
7
0
8
1
:
v
i
X
r
a

Abstract— We propose to take a novel approach to robot
system design where each building block of a larger system
is represented as a differentiable program, i.e. a deep neural
network. This representation allows for integrating algorithmic
planning and deep learning in a principled manner, and thus
combine the beneﬁts of model-free and model-based methods.
We apply the proposed approach to a challenging partially
observable robot navigation task. The robot must navigate to a
goal in a previously unseen 3-D environment without knowing
its initial location, and instead relying on a 2-D ﬂoor map and
visual observations from an onboard camera. We introduce the
Navigation Networks (NavNets) that encode state estimation,
planning and acting in a single, end-to-end trainable recurrent
neural network. In preliminary simulation experiments we
successfully trained navigation networks to solve the challenging
partially observable navigation task.

I. INTRODUCTION

Humans employ two primal approaches to decision-making:
reasoning with models and learning from experiences. The
learning. By
former is called planning, and the latter,
integrating planning and learning methods, AlphaGo has
recently achieved super-human performance in the challenging
game of Go [1]. Robots must also integrate planning and
learning to address truly difﬁcult decision-making tasks, and
ultimately to achieve human-level robotic intelligence.

Robots act in the real world that is inherently uncertain and
only partially observable. Under partial observability the robot
cannot determine its state exactly. Instead, it must integrate
information over the past history of its actions and observa-
tions. Unfortunately, this drastically increases the complexity
of decision making [2]. In the model-based approach, we
may formulate the problem as a partially observable Markov
decision process (POMDP). Approximate algorithms have
made dramatic progress on solving POMDPs [3], [4], [5],
[6], [7]; however, manually constructing POMDP models or
learning them from data remains difﬁcult [8], [9], [10]. In the
model-free approach, we circumvent the difﬁculty of model
construction by directly searching for a solution within a
policy class [11], [12]. The key issue is then choosing priors
that allow efﬁcient policy search.

Deep neural networks (DNNs) have brought unprecedented
success in many domains [13], [14], [1]. Priors on the
network architecture make learning efﬁcient, e.g. convolutions
allow for local, spatially invariant features [15]. DNNs
provide a distinct new approach to partially observable

1NUS Graduate School for Integrative Sciences and Engineering
2School of Computing
National University of Singapore, 119077, Singapore.
{karkus, dyhsu, leews}@comp.nus.edu.sg

Fig. 1: Integrating planning and learning through algorithmic
priors. The policy is represented by a model connected to
an algorithm that solves the model. Both the model and the
algorithm are encoded in a single neural network.

decision-making [16], [17], [18], [19]. In particular, DQN,
a convolutional architecture, has successfully tackled Atari
games with complex visual input [14]. Combining DQN
with recurrent LSTM layers allows them to deal with partial
observability [18], [19]. However, such architectures are
fundamentally limited, because their priors fail to exploit
the underlying sequential nature of planning.

We want to combine the strength of algorithmic planning
and deep learning in order to scale to the challenges of real-
world decision-making. The question is then: how do we
integrate the structure of algorithmic planning into a deep
learning framework, i.e. what are the suitable priors on a DNN
for decision making under partial observability? We propose
algorithmic priors that integrate algorithmic planning and
deep learning by embedding both a model and an algorithm
that solves the model, in a single DNN architecture (Fig. 1).
We apply this approach to a challenging partially observable
navigation task, where a robot is placed in a previously unseen
3-D maze and must navigate to a speciﬁed goal while avoiding
unforeseen obstacles. In this decision-making task the state
of the robot is partially observable. The robot receives a 2-D
ﬂoor map, but it does not know its initial location on the
map. Instead, it must infer it from long sequences of sensor
observations from an onboard monocular camera.

We introduce the Navigation Networks (NavNet), a re-
current neural network (RNN) that employs algorithmic
priors for navigation under partial observability. NavNets
extend our work on QMDP-nets that addressed partially
observable planning in simpliﬁed domains [20]. In contrast
to QMDP-nets, NavNets embed the entire solution structure
of partially observable navigation: localization, planning and
acting. Localization must now deal with camera images;
and a reactive actor policy is now responsible for avoiding
unforeseen obstacles. In preliminary experiments NavNets
successful learned policies from expert demonstrations that
generalize over simulated 3-D environments. Results indicate
that
integrating algorithmic planning and deep learning
enables reasoning with partial observations in large-scale,

Neural networkpolicyModelAlgorithm 
 
 
 
 
 
visual domains. In our experiments the robot is restricted to
a grid, and actions are simple, discrete motion commands;
however, the approach could be applied to continuous control
in the future.

II. RELATED WORK

The idea of embedding speciﬁc computation structure in
a neural network architecture has been gaining attention
recently. Previous work addressed decision making in fully
observable domains such as value iteration in Markov decision
processes [21], searching in graphs [22], [23], [24], optimal
control [25] and quadratic program optimization [26], [27].
These works do not address the issue of partial observability
which drastically increases the computational complexity
of decision making [2]. Another group of work addressed
probabilistic state estimation [28], [29], [30], [31], but they
do not deal with decision making or planning.

Both Shankar et al. [32] and Gupta et al. [33] addressed
planning under partial observability. The former focuses on
learning a model rather than a policy, where the model
does not generalize over environments. The latter proposes
a network learning approach to robot navigation with the
focus on mapping instead of partially observable planning.
They address a navigation problem in unknown environments
where the location of the robot is always known. In our
setting the robot location is partially observable: it must be
inferred from camera images and a 2-D map.

Finally, we introduced QMDP-nets [20] that use algorith-
mic priors for learning partially observable decision making
policies in simpliﬁed domains. In this work we extend QMDP-
nets to tackle a much more complex navigation domain that
requires reasoning with visual observations and accounting
for unforeseen obstacles.

III. ALGORITHMIC PRIORS

We propose to use planning algorithms as “priors” on
a DNN architecture for efﬁciently learning under partial
observability. We search for a policy in the form of a DNN,
but impose the structure of both a model and a planning
algorithm on the DNN architecture (Fig. 1). The weights of
the neural network then correspond to the model parameters,
which are learned. We do not want to rely on data alone
for learning the computational steps of planning. Instead, we
explicitly encode a planning algorithm in a network learning
architecture, and thus combine the strengths of model-free
policy search and model-based planning. The core idea for
encoding an algorithm in a DNN is is to view neural networks
as differentiable programs, where algorithmic operations are
realized as layers of the neural network. For example, a
weighted sum becomes a convolutional layer, a maximum
operation becomes a max-pool layer.

We expect that embedding a model in the network allows
efﬁcient generalization over a large task space. Embedding
an algorithm allows learning end-to-end and thus circumvents
the difﬁculties of traditional model-based learning. Moreover,
we may learn abstractions that compensate for the limitations
of an approximate algorithm through end-to-end training [20].

Fig. 2: NavNets are recurrent neural networks with algo-
rithmic priors. A NavNet represents a policy, it maps from
observations to actions, but it encodes the entire solution
structure of navigation – state estimation, planning and acting
– in a single, differentiable neural network.

Ultimately, we envision a fundamentally new approach
to robotic systems design, where all building blocks are
implemented as differentiable programs, and thus can be
jointly optimized for the overall system objective.

IV. NAVIGATION NETWORKS

We deﬁne a partially observable navigation task that is
prevalent in mobile robot applications. A robot is placed in
a previously unseen indoor environment and must navigate
to a speciﬁed goal. The robot receives a 2-D ﬂoor map that
indicates walls and the goal; however, the robot does not know
its own location on the map initially. Instead, it must estimate
it based on past actions and observations from an onboard
monocular camera. Although being uncertain of its location,
the robot must choose actions that lead to the goal, while
avoiding walls and other, previously unforeseen obstacles that
are not indicated on its ﬂoor map, e.g., furniture.

We introduce the Navigation Network, a deep RNN archi-
tecture that employs algorithmic priors speciﬁc to navigation
under state uncertainty (Fig. 2). Robot navigation is typically
addressed by decomposing the problem to localization,
planning and control. We apply the same decomposition, but
encode all three components in a uniﬁed DNN representation.
More speciﬁcally, the weights of a NavNet encode an abstract
POMDP model, which is learned. The network also encodes
an algorithm that solves the POMDP model. First, a Bayesian
histogram ﬁlter integrates information from sequences of
visual observations and past actions into a belief, i.e. a
probabilistic estimate of the state. Second, a QMDP planner
creates a high-level plan given the map and the current belief.
Finally, an actor policy takes the high-level plan and a camera
observation and outputs an action. The actor generally chooses
actions that execute the plan; however, it may also need to
deviate from the plan to account for unforeseen obstacles
blocking the path.

The navigation network encodes a POMDP model,

M (V) = (S, A, O, T = fT (·|V), Z = fZ(·|V), R = fR(·|V)),
which is explicitly conditioned on the ﬂoor map, V. The
states s ∈ S are cells in a grid with orientation, actions
a ∈ A are discrete actions of the robot, and observations
o ∈ O are camera images. The spaces S, A and O are ﬁxed
across environments and are chosen a-priori. The rewards
R = fR(·|V), transition model T = fT (·|V) and observation
model Z = fZ(·|V) are conditioned on the environment, i.e.

BayesianFilterQMDPPlannerPOMDP Model--------ActorRecurrent Neural NetworkFig. 3: Bayesian ﬁlter (left) and QMDP planner (right) encoded in the navigation network. Belief tensors are in blue; learned
POMDP components are in green; planned value tensors are in red; other tensors are in yellow. We use cnn(k, f ) to denote
convolution with k×k kernel and f ﬁlters. Activations and reshape operations are omitted for clarity. The planner outputs
action values, q(a), which are then combined with a few steps of history and fed to the actor policy show in Fig. 5.

We embed the ﬁlter and the planner in a single neural
network (Fig. 2) by implementing both as differentiable
programs, i.e. we express the algorithmic operations (1 – 5)
as convolutional, linear and max-pool layers. The operations
are applied to the components of the POMDP model, fT ,
fZ and fR, all of which are represented by neural networks
and are learned. We do not use supervision on the model
components. Instead, we expect a useful model to emerge
through training the policy end-to-end.

The neural network implementation of the Bayesian ﬁlter
and the QMDP planner are shown in Fig. 3. The architecture
is similar to QMDP-nets [20], with the notable exception of
the observation model and the reactive actor component.

In our experiments the robot is restricted to a discrete
grid of size M ×N and has L possible orientations, where
M = N = 19 and L = 4. The input map is a M ×N image.
The belief is then represented by a M ×N ×L tensor. fT (·)
is a single 3×3 convolution with L · |A| output channels,
one for each discrete orientation and action pair. fR(·|V) is a
two-layer CNN, where the input is the map V and the output
is a M ×N ×L·|A| tensor corresponding to rewards for each
state-action pair.

The observation model, fZ, is the most complex component
of the learned POMDP model. The network architecture is
show in Fig. 4. Unlike in QMDP-nets, we must now deal with
visual observations. This involves inferring the environment
geometry from a camera image and matching it against the
2-D ﬂoor map. Learning the joint probability distribution
Z(s, o|V) for the large space of image observations would
be hard. Instead, we directly represent the unnormalized
conditional z(s) = p(s|ot, V) by a neural network and use it
directly in the belief update equation, (2).

Navigation networks also include a low-level actor policy
that executes the high-level plan while avoiding obstacles
that the plan could not account for. The network architecture
is shown in Fig. 5. The actor takes in a camera observation,
ot, and a vector representation of the high-level plan, πt;
and outputs a low-level action, ui. In our experiments u and
a are deﬁned in the same discrete space corresponding to
actions in a discrete grid; but u could be continuous velocity
or torque signals in future work. The high-level plan, πt, is
represented by a vector of the computed Q values for each
high-level action, i.e. qt(a) for a ∈ A. In addition, we found
that a few steps of history helps the actor to avoid certain

Fig. 4: Observation model that maps from a camera image
ot and the ﬂoor map V to the distribution z(s) = p(s|ot, V).
We use max(k) to denote max-pooling with k×k kernel.

Fig. 5: The actor component maps from a camera image and
a vector representation of the high-level plan, πt, to an action,
ut. The Fo component in Fig. 4 and Fig. 5 has the same
structure but the weights are not tied. We use fc(h) to denote
a fully connected layer with h output units.

the ﬂoor map V. They are represented by distinct neural
network blocks, and are learned through end-to-end training.
The Bayesian ﬁlter updates the belief iteratively through

1(s) = (cid:80)

s(cid:48)

b(cid:48)t

−

S T (s(cid:48), at

1, s)bt

−

1(s(cid:48)),

−

∈

bt(s) = ηZ(s, ot)b(cid:48)t

1(s),

−

(1)

(2)

where bt(s) is the belief over states s ∈ S at time t; ot ∈ O
1 ∈ A;
is the observation received after taking action at
and η is a normalization factor.

−

The QMDP algorithm approximates the solution to the
planning problem through dynamic programming. It ﬁrst
takes K steps of value iteration,
Qk+1(s, a) = R(s, a) + γ (cid:80)
s(cid:48)

S T (s, a, s(cid:48))Vk(s(cid:48)),

(3)

∈

Vk(s) = maxa Qk(s, a).

(4)

where k = 1..K is the planning step, V and Q are state and
state-action values, respectively. The algorithm then computes
action values, an approximation of their future value,

q(a) = (cid:80)

s

∈

S QK(s, a)bt(s).

(5)

FafTf0TR(s,a)Qk(s,a)Q0k(s,a)Vk(s)QK(s,a)fR:cnn(3,150)-cnn(1,16)fT:cnn(3,16)f0T:cnn(3,16)Fa:onehot19x19x419x19x4x419x19x419x19x41x1x1x419x19x419x19x4x419x19x419x19x4x419x19x119x19x4x419x19x4x419x19x44x1(⇡t)ut 1bt 1(s)b0t 1(s,a)b0t 1(s)bt(s)wat 1zt(s)qt(a)60x80x363x119x19x3219x19x6319x19x119x19x9519x19x4Fz:cnn(1,128)-cnn(1,4)Fo:cnn(3,128)-max(3)-cnn(3,128)-cnn(3,1)-max(3)FV:cnn(5,150)-cnn(1,32)zt(s)60x80x363x132x195x1Fu:fc(1024)-fc(4)TABLE I: Summary of results comparing navigation network
policies (NavNet) and a clairvoyant QMDP policy (QMDP).

Objects on ﬂoor map
Collider objects

NavNet success rate
(excluding collisions)
NavNet collision rate
NavNet steps to goal

QMDP success rate
QMDP collision rate
QMDP steps to goal

Task A
walls only
walls only

Task B
all objects
all objects

Task C
walls only
all objects

97.5%
(97.0%)
1.5%
37.7

81.1%
0.0%
32.8

96.5%
(95.5%)
1.5%
34.4

84.1%
0.0%
31.1

91.5%
(83.0%)
14.5%
36.5

62.6%
0.0%
32.1

learned policies in a separate set of 200 random environments.
For training we used successful trajectories produced by a
clairvoyant QMDP policy, 5 trajectories for each environment.
The clairvoyant expert has access to all objects on the map
and receives binary observations that deﬁne the occupancy
of grid cells in front of the robot.

The training was carried out by backpropagation through
time using a cross-entropy loss between demonstrated and
predicted action outputs, thus learning a policy end-to-end
without supervision on the underlying POMDP model. We
used multiple steps of curriculum. First, we trained a policy
in synthetic grids that share the underlying structure of
planning, but only involves simple binary observations. We
then trained further for Task A, Task B and Task C in a
sequence, gradually increasing the difﬁculty1. We used the
full network architecture described in the previous section
for Task C, while for Task A and Task B we replaced the
actor component by a single fully connected layer.

VI. RESULTS

Preliminary results are summarized in Table I. We report
success rate (trials that reached the goal); success rate
excluding collisions (collision free trials that reached the goal);
collision rate (trials that involved one or more collisions); and
average steps to goal (number of steps required to reach the
goal, averaged for successful trials only). Learned policies
were able to successfully reach the goal in a reasonable
number of steps with no collisions for the majority of the
environments.

We compared to a clairvoyant QMDP policy that has access
to much simpler binary observations and a map showing
all obstacles; and which plans with the “true” underlying
POMDP model. The true POMDP model would give a perfect
solution to our learning problem if the planning algorithm is
exact; but not necessarily if the algorithm is approximate. In
fact, an “incorrect”, but useful model may compensate the
limitations of an approximation algorithm, in a way similar
to reward shaping in reinforcement learning [35]. In our
experiments learned NavNets performed signiﬁcantly better

1For Task C we initialized the planner and ﬁlter weights from Task A,
while the weights of the visual processing block in the actor component
were initialized from Task B.

Fig. 6: Examples for ﬂoor maps and camera observations from
the training set (top) and test set (bottom). The environment
layout and the textures are randomly generated.

oscillating behaviors. Therefore, in πt we include four steps
of past action values, qt
τ (a), and four steps of previous
action outputs, ut

τ , where τ = 1..4.

−

1

−

−

V. PRELIMINARY EXPERIMENTS
We evaluated the navigation networks for variants of the
partially observable navigation task in a custom-built, high-
ﬁdelity simulator based on the Unity 3D Engine [34]. The
robot is placed in a randomly generated 3-D environment,
where it is restricted to a 19×19 discrete grid and 4 possible
orientations. Actions are simple motion commands: move
forward, turn left, turn right, and stay put. The robot does not
know its own state initially. Instead, it receives a 2-D map of
the environment (19×19 binary image) and must estimate its
location based on camera observations (60×80 RGB images)
rendered from the 3-D scene. We place additional objects in
the environment at random locations, without fully blocking
passages. The objects are picked randomly from a set of
23 common household furniture such as chairs, tables, beds,
etc. Examples are shown in Fig. 6. We evaluate collisions
simply by assuming the robot occupies the entire grid cell it
is located in.

•

•

We deﬁne three variants of the navigation task as follows:
Task A. In this setting objects (apart from walls) act
solely as visual obstruction: the robot can go through
them, and they are not shown on the ﬂoor map. With this
tasks we evaluate the ability of localizing given camera
images and a ﬂoor map, and navigating to distant goals
in a new environment.
Task B. The robot can no longer move through objects,
but the robot’s map – unlike a typical real-life ﬂoor map
– includes all objects in the environment such as chairs,
tables, etc. The robot must recognize objects and their
relative position from camera images, and account for
them for both localization and planning.
Task C. In this most difﬁcult setting the robot must
avoid all objects in the environment including furniture,
while its ﬂoor map only indicates walls. Planning is
unaware of objects not shown on the map, therefore the
actor may need to deviate locally from the high-level
plan in order to avoid unanticipated obstacles.

•

We trained navigation networks from expert demonstrations
in a set of 10k random environments. We then evaluated the

than the clairvoyant QMDP. The QMDP algorithm is the
same for both the clairvoyant QMDP and the NavNets, but
end-to-end training allowed learning a model that is more
effective for the approximate QMDP algorithm. We note that
the clairvoyant QMDP was used to generate the expert data for
training, but we excluded unsuccessful demonstrations. When
including both successful and unsuccessful demonstrations
NavNets did not perform better than QMDP, as expected.

The algorithmic priors on the DNN architecture enabled
policies to generalize efﬁciently to previously unseen 3-D
environments, by carrying over the shared structure of the
underlying reasoning required for planning. While we defer
direct comparison with alternative DNN architectures to
future work, we note that in previous reports DNNs without
algorithmic priors were unable to learn navigation policies
even in much simpler settings [20].

While initial results are promising, the success rate and
collision rate in the more difﬁcult setting (Task C) are not
yet satisfactory for a real-world application. We observed
that many failures are caused by the inability of avoiding
obstacles that were not anticipated by the plan. A possible
reason for this is that without memory, the actor can only alter
the plan when an obstacle is visible. It also cannot choose
good alternative paths locally, because it is unaware of the
goal and the plan apart from the value of the immediate
next step. We may address these deﬁciencies by feeding in
multiple steps of past camera observations to the actor, as
well as a larger local “section” of the high-level plan.

VII. DISCUSSION

We proposed algorithmic priors to integrate planning with
deep learning. In this section we discuss when algorithmic
priors can be expected to be effective; and identify key
challenges for future research.

When comparing to standard model-free learning we should
consider the following. Certain tasks are hard because they
require a complex model to describe, however, solving the
model can yield a simple policy. Other tasks require a complex
policy, but the policy can be derived from a moderately
complex model through tractable planning. Model-free policy
learning can be effective in the former case, while we expect
algorithmic priors to be critically important in the latter
case. We can apply the same reasoning when decomposing a
complex problem to sub-problems: we can employ different
degrees of algorithmic priors depending on the nature of
a sub-task. For example, in navigation networks the ﬁlter
and planner components encode strong algorithmic priors
for dealing with partial observability, but we do not employ
algorithmic priors for the low-level actor, because this sub-
task is expected to be reactive in nature.

How does the approach compare to traditional model-
based learning? Model learning is often hard because of the
difﬁculty of inferring model parameters from the available
data; or because small model errors are ampliﬁed through
planning. Embedding the model and the algorithm in the same
neural network allows learning end-to-end, which may in turn
circumvent the difﬁculties of conventional model learning.

In order to embed an algorithm in a neural network, we
must implement it as a differentiable program. However,
some algorithmic operations are not differentiable, such
as indexing, sampling or argmax. We may deal with such
operations by developing their differentiable approximations,
e.g. soft-indexing in QMDP-nets [20]; or by analytically
approximating gradients of larger computational blocks [26].
Another concern is that repeated computation, as well as more
sophisticated algorithms, render large neural networks, that
are in turn hard to train. Differential programs are certainly
limited in terms of algorithmic computation, but they allow
learning abstract models or a suitable search space end-to-
end, and thus may reduce the required planning computation
signiﬁcantly. Results on navigation networks and QMDP-nets
demonstrate that this is indeed possible; however, we believe
that learning more aggressive abstractions will be important
in scaling to more difﬁcult tasks.

In partially observable domains, a particularly important
issue is the representation of beliefs, i.e. probability distribu-
tions over states. Modern POMDP algorithms make planning
tractable by sampling from the belief and reasoning with par-
ticles [6], [7]. Our recent work on particle ﬁlter networks [30],
as well as the concurrent work of Jonschkowski et al. [31],
encoded particle ﬁltering in a differentiable neural network
for probabilistic state estimation. An exciting line of future
work may encode more sophisticated POMDP algorithms in
neural networks that plan with particle beliefs.

VIII. CONCLUSION

We proposed to integrate planning and learning through
algorithmic priors. Algorithmic priors impose the structure
of planning on a DNN architecture, by viewing DNNs
as differentiable programs instead of parametric function
approximators. Implementing all components of a larger
robotic system by differentiable programs would allow jointly
optimizing the entire system for a given task. In this paper
we made a step towards this vision by encoding state
estimation, planning and acting in a single neural network
for a challenging partially observable navigation task.

There are several exciting directions for future work that
deal with high-dimensional state spaces for planning; encode
more capable algorithms in the neural network; or explore
how differentiable modules can be effectively pre-trained and
transferred over domains.

REFERENCES

[1] D. Silver, A. Huang, C. J. Maddison, A. Guez, L. Sifre, G. Van
Den Driessche, J. Schrittwieser, I. Antonoglou, V. Panneershelvam,
M. Lanctot et al., “Mastering the game of Go with deep neural networks
and tree search,” Nature, vol. 529, no. 7587, pp. 484–489, 2016.
[2] C. H. Papadimitriou and J. N. Tsitsiklis, “The complexity of Markov
decision processes,” Mathematics of Operations Research, vol. 12,
no. 3, pp. 441–450, 1987.

[3] J. Pineau, G. J. Gordon, and S. Thrun, “Applying metric-trees to
belief-point POMDPs,” in Advances in Neural Information Processing
Systems, 2003, p. None.

[4] M. T. Spaan and N. Vlassis, “Perseus: Randomized point-based value
iteration for POMDPs,” Journal of Artiﬁcial Intelligence Research,
vol. 24, pp. 195–220, 2005.

[5] H. Kurniawati, D. Hsu, and W. S. Lee, “Sarsop: Efﬁcient point-based
POMDP planning by approximating optimally reachable belief spaces.”
in Robotics: Science and Systems, 2008.

[6] D. Silver and J. Veness, “Monte-carlo planning in large POMDPs,”
in Advances in Neural Information Processing Systems, 2010, pp.
2164–2172.

[7] N. Ye, A. Somani, D. Hsu, and W. S. Lee, “Despot: Online POMDP
planning with regularization,” Journal of Artiﬁcial Intelligence Re-
search, vol. 58, pp. 231–266, 2017.

[8] M. L. Littman, R. S. Sutton, and S. Singh, “Predictive representations
of state,” in Advances in Neural Information Processing Systems, 2002,
pp. 1555–1562.

[9] G. Shani, R. I. Brafman, and S. E. Shimony, “Model-based online
learning of POMDPs,” in European Conference on Machine Learning,
2005, pp. 353–364.

[10] B. Boots, S. M. Siddiqi, and G. J. Gordon, “Closing the learning-
planning loop with predictive state representations,” The International
Journal of Robotics Research, vol. 30, no. 7, pp. 954–966, 2011.
[11] J. Baxter and P. L. Bartlett, “Inﬁnite-horizon policy-gradient estimation,”
Journal of Artiﬁcial Intelligence Research, vol. 15, pp. 319–350, 2001.
[12] J. A. Bagnell, S. Kakade, A. Y. Ng, and J. G. Schneider, “Policy
search by dynamic programming,” in Advances in Neural Information
Processing Systems, 2003, pp. 831–838.

[13] A. Krizhevsky, I. Sutskever, and G. E. Hinton, “Imagenet classiﬁcation
with deep convolutional neural networks,” in Advances in Neural
Information Processing Systems, 2012, pp. 1097–1105.

[14] V. Mnih, K. Kavukcuoglu, D. Silver, A. A. Rusu, J. Veness, M. G.
Bellemare, A. Graves, M. Riedmiller, A. K. Fidjeland, G. Ostrovski
et al., “Human-level control through deep reinforcement learning,”
Nature, vol. 518, no. 7540, pp. 529–533, 2015.

[15] Y. LeCun, B. Boser, J. S. Denker, D. Henderson, R. E. Howard,
W. Hubbard, and L. D. Jackel, “Backpropagation applied to handwritten
zip code recognition,” Neural computation, vol. 1, no. 4, pp. 541–551,
1989.

[16] S. Hochreiter and J. Schmidhuber, “Long short-term memory,” Neural

Computation, vol. 9, no. 8, pp. 1735–1780, 1997.

[17] B. Bakker, V. Zhumatiy, G. Gruener, and J. Schmidhuber, “A robot
that reinforcement-learns to identify and memorize important previous
observations,” in International Conference on Intelligent Robots and
Systems, 2003, pp. 430–435.

[18] M. J. Hausknecht and P. Stone, “Deep recurrent Q-learning for partially

observable MDPs,” arXiv preprint, arXiv:1507.06527, 2015.

[19] P. Mirowski, R. Pascanu, F. Viola, H. Soyer, A. Ballard, A. Banino,
M. Denil, R. Goroshin, L. Sifre, K. Kavukcuoglu et al., “Learning to
navigate in complex environments,” arXiv preprint arXiv:1611.03673,
2016.

[20] P. Karkus, D. Hsu, and W. S. Lee, “QMDP-net: Deep learning for
planning under partial observability,” in Advances in Neural Information
Processing Systems, 2017, pp. 4697–4707.

[21] A. Tamar, S. Levine, P. Abbeel, Y. Wu, and G. Thomas, “Value iteration
networks,” in Advances in Neural Information Processing Systems,
2016, pp. 2146–2154.

[22] J. Oh, S. Singh, and H. Lee, “Value prediction network,” in Advances
in Neural Information Processing Systems, 2017, pp. 6120–6130.
[23] G. Farquhar, T. Rocktäschel, M. Igl, and S. Whiteson, “TreeQN and
ATreeC: Differentiable tree planning for deep reinforcement learning,”
arXiv preprint, arXiv:1710.11417, 2017.

[24] A. Guez, T. Weber, I. Antonoglou, K. Simonyan, O. Vinyals, D. Wier-
stra, R. Munos, and D. Silver, “Learning to search with MCTSnets,”
arXiv preprint, arXiv:1802.04697, 2018.

[25] M. Okada, L. Rigazio, and T. Aoshima, “Path integral networks: End-
to-end differentiable optimal control,” arXiv preprint arXiv:1706.09597,
2017.

[26] B. Amos and J. Z. Kolter, “Optnet: Differentiable optimization as a
layer in neural networks,” in International Conference on Machine
Learning, 2017, pp. 136–145.

[27] P. Donti, B. Amos, and J. Z. Kolter, “Task-based end-to-end model
learning in stochastic optimization,” in Advances in Neural Information
Processing Systems, 2017, pp. 5484–5494.

[28] T. Haarnoja, A. Ajay, S. Levine, and P. Abbeel, “Backprop KF: Learning
discriminative deterministic state estimators,” in Advances in Neural
Information Processing Systems, 2016, pp. 4376–4384.

[29] R. Jonschkowski and O. Brock, “End-to-end learnable histogram
ﬁlters,” in Workshop on Deep Learning for Action and Interaction
at NIPS, 2016. [Online]. Available: http://www.robotics.tu-berlin.de/
ﬁleadmin/fg170/Publikationen_pdf/Jonschkowski-16-NIPS-WS.pdf

[30] P. Karkus, D. Hsu, and W. S. Lee, “Particle ﬁlter networks: End-to-
end probabilistic localization from visual observations,” arXiv preprint
arXiv:1805.08975, 2018.

[31] R. Jonschkowski, D. Rastogi, and O. Brock, “Differentiable particle
ﬁlters: End-to-end learning with algorithmic priors,” in Proceedings of
Robotics: Science and Systems, 2018.

[32] T. Shankar, S. K. Dwivedy, and P. Guha, “Reinforcement learning via
recurrent convolutional neural networks,” in International Conference
on Pattern Recognition, 2016, pp. 2592–2597.

[33] S. Gupta, J. Davidson, S. Levine, R. Sukthankar, and J. Malik,
“Cognitive mapping and planning for visual navigation,” arXiv preprint
arXiv:1702.03920, 2017.

[34] “Unity 3D game engine.” [Online]. Available: http://unity3d.com
[35] A. Y. Ng, D. Harada, and S. Russell, “Policy invariance under
reward transformations: Theory and application to reward shaping,” in
International Conference on Machine Learning, 1999, pp. 278–287.

