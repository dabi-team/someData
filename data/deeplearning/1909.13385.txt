Steady state programming of controlled nonlinear systems via deep dynamic
mode decomposition

Aqib Hasnain, Nibodh Boddupalli, Shara Balakrishnan, and Enoch Yeung

0
2
0
2

n
u
J

9

]
S
D
.
h
t
a
m

[

3
v
5
8
3
3
1
.
9
0
9
1
:
v
i
X
r
a

Abstract— This paper describes the optimal selection of a
control policy to program the steady state of controlled nonlin-
ear systems with hyperbolic ﬁxed points. This work is motivated
by the ﬁeld of synthetic biology, in which saddle points are
common (along with limit cycles), and the aim is to program
cells to perform both digital and analog computation, though
developing genetic digital computation has been the main
focus. We frame the analog computing challenge of generating
a steady state input-output function inside living cells. To
program the steady state, a data-driven approach is taken
wherein an approximation of the Koopman operator, identiﬁed
via deep dynamic mode decomposition, is used to describe the
dynamics of the system linearly. The new representation of the
dynamics are then used to solve an optimization problem for
the input which maximizes a direction in state space. Some
added structure on the Koopman operator learning process for
controlled systems is given for dynamics that are separable
in the state and input. Finally, the methods are demonstrated
on simulation examples of an incoherent feedforward loop
and a combinatorial promoter system, two common network
architectures seen in the ﬁeld of synthetic biology.

I. INTRODUCTION

The ﬁeld of synthetic biology is concerned with designing
and constructing biological modules, biological systems, and
biological machines [4] and can be traced back to the
1960s when logic in genetic regulation was discovered [13].
The key goal is to program living cells to exhibit desired
functionality. Biomolecular processes are typically nonlinear,
stochastic, and non-modular making the design and construc-
tion process difﬁcult. This is where control theory meets
synthetic biology to produce robust functionality [6].

Thus far, the main focus of the ﬁeld of synthetic biology
has been in designing and building digital logic genetic cir-
cuits. A wide variety of digital computation using synthetic
genetic circuits has been achieved including but not limited
to switches [10], counters [9], logic gates [32], classiﬁers
[8], edge detectors [35], and most recently digital displays
[21], [31]. The state-of-the-art software called CELLO [22]
automates the design of digital logic genetic circuits and has
paved the way for larger genetic circuits to be developed.
Moreover, network reconstruction algorithms which infer
dynamic network architectures have been developed to debug
failure modes in these digital logic devices [12], [34], [37],

A. Hasnain (aqib@ucsb.edu) and Nibodh Boddupalli are with the
Department of Mechanical Engineering, University of California, Santa
Barbara

S. Balakrishnan is with the Department of Electrical and Computer

Engineering, University of California, Santa Barbara

E. Yeung (eyeung@ucsb.edu) is with the Department of Mechani-
cal Engineering, Center for Control, Dynamical Systems, and Computation,
and Biomolecular Science and Engineering, University of California, Santa
Barbara

[40]. However, there are cellular mechanisms and limitations
that make it unclear whether or not digital computation can
scale up to perform complex computations in living cells.

i) it

is two-fold,

Biological systems such as colonies of bacteria inherently
implement hybrid-analog computing [28], which was a staple
paradigm of computation in the 1950s and 1960s. Analog
computers need to be custom designed for a speciﬁc task
and are less reliable than their digital counterparts. However,
the beneﬁts of analog computing, combined with the non-
von Neumann sense of computing,
is
customizable to address desired functionality (also seen as a
disadvantage as noted prior), and ii) it gives rise to a type of
computation where memory and processing are collocated,
making for a more efﬁcient computing architecture. We want
to exploit the analog, tunable nature to perform biological
computation. Speciﬁcally, we aim to design an input-output
function in bacteria that takes chemical inducers as input
and outputs the maximum steady state concentration. The
bacterial colony as a whole can be viewed as the central
processing unit with memory [1]. In cellular computing, data
may be thought of as being encoded by biomolecules such
as DNA strands and molecular biology tools may act on the
data to perform various operations [24].

There exists no general

theory for how cells perform
computation. Likewise, there is no general theory for many
of the known biomolecular mechanisms. This provides dif-
ﬁculty when designing and constructing synthetic biological
components. Hypothesis-driven modeling is one approach to
better understand these biomolecular mechanisms and how
to control them [14], [39]. A downside of hypothesis-driven
modeling is that the models can be difﬁcult to validate, often
requiring iteration upon iteration of experimentation to ﬁt
model parameters. Futhermore, when the biological process
occurs in new environmental conditions, it is likely that
new experimental data will need to be collected for model
reﬁnement.

The above issues and more motivate the need for purely
data-driven algorithms to accelerate the advancement of
design of genetic circuits. We frame the analog computing
challenge - is it possible to harness the natural dynamics
of the cell to generate a steady state input-output function?
Speciﬁcally, how do we utilize time-series measurements of a
biological system to design control inputs to achieve a target
steady state output from living cells in a data-driven fashion?
For this, we turn to Koopman operator theory, which is a
powerful tool for data-driven analysis of nonlinear dynamical
systems. Researchers working in this space have shown that
it is possible to identify and learn the fundamental modes of a

 
 
 
 
 
 
nonlinear dynamical system from data [20], [27]. The Koop-
man operator is an inﬁnite-dimensional linear operator that
represents nonlinear dynamics as a dynamically equivalent
linear system. The development of Dynamic Mode Decom-
position (DMD) [29] has led to rapid growth in the use of
Koopman spectral analysis of nonlinear dynamical systems
in areas such as system identiﬁcation [2], [19], prediction
and control [16], [17], [25], [26], and sensor placement [11],
[33]. More recently, learning higher dimensional Koopman
operators from data has become computationally tractable,
largely due to advances in integrating machine learning
and deep learning to generate efﬁcient representations of
observable bases [18], [23], [36], [41].

Previously, researchers have explored control strategies
to reprogram the steady states of cooperative monotone
dynamical systems [30] and in [5], a synthetic genetic
feedback controller that dynamically steers the concentration
of a genetic regulatory networks key transcription factors
was developed to reprogram the steady state. We propose
to alter the steady state, or generate a genetic program
with output being steady state values, of nonlinear systems
with hyperbolic ﬁxed points by designing an optimal control
policy for the Koopman model identiﬁed directly from data.
Speciﬁcally, we utilize deep Dynamic Mode Decomposition
(deepDMD) [33] to learn approximate Koopman invariant
subspaces of dynamical systems to program their steady
state. The framework can be extended to systems with other
types of attractors and can be modiﬁed to solve many optimal
control problems e.g. target state and reference tracking.

In section II, we brieﬂy review Koopman operator theory
for discrete-time nonlinear systems the numerical approxi-
mations of the Koopman operator. Section III describes the
steady state programming framework and discusses issues
that arise when dealing with mixed terms of the state and
input. Lastly, we demonstrate our method on two nonlinear
systems that are commonly seen in biomolecular feedback
systems and synthetic biology.

II. KOOPMAN OPERATORS AND THEIR
FINITE-DIMENSIONAL APPROXIMATION

In this section we brieﬂy review Koopman operator theory
as it applies to controlled systems. See [15] for an overview
of the ﬁeld. In this paper, we consider discrete-time dynam-
ical systems to be consistent with the nature of time-series
data.

A. Koopman operator theory for control systems

Consider a non-afﬁne control discrete-time nonlinear dy-

namical system of the form

xk+1 = f (xk, uk),

(1)

where xk ∈ Rn is the state of the system, uk ∈ Rm is the
control input, and f : Rn ⊕ Rm → Rn is the analytic and
unknown transition mapping. The dynamics can be always
be decomposed in the following way

xk+1 = fx(xk) + fxu(xk, uk) + fu(uk),

(2)

where fx, fxu, fu are terms only in x, mixed terms in x and
u, and only in u, respectively. The Koopman operator acts
on a set of observables and we consider each observable as
an element of an inﬁnite-dimensional Hilbert space F.

The observables ψ : Rn ⊕ Rm → R are functions of the
state and the input such that they can be functions of only x,
mixed terms of both x and u, and only of u. The observables
can also be thought of as vector-valued functions of the state
and the input such that ψ : Rn ⊕ Rm → Ro.

Then the Koopman operator, K : F → F acts on the

Hilbert space of observables to produce linear dynamics

Kψ(xk, uk) (cid:44) ψ(f (xk, uk), uk+1)

so that

ψ(xk+1, uk+1) = Kψ(xk, uk)

(3)

(4)

which can be decomposed similarly to (2) into the three
components












ψx(xk+1)
ψxu(xk+1, uk+1)
ψu(uk+1)



 =



Kx Kxu Ku
K21 K22 K23
K31 K32 K33





ψx(xk)
ψxu(xk, uk)
ψu(uk)



(5)
where ψx : Rn → RnL, ψxu : Rn ⊕ Rm → RML, and
ψx : Rm → RmL.

Assumption 1: We assume that the inputs uk are exoge-

nous disturbances without state space dynamics.
The above Assumption 1 allows us to be concerned only
with the ﬁrst block equation in (5), i.e.

ψx(xk+1) = Kxψx(xk) + Kxuψxu(xk, uk) + Kuψu(uk).

(6)
We refer the readers to [42] for more discussion on this
decomposition and a proof for the existence of Koopman
operators for nonlinear systems.

B. Finite dimensional approximations

1) Dynamic mode decomposition with control: Dynamic
mode decomposition with control (DMDc) developed in [25],
[26] is an extension of DMD for systems with external
actuation and is used to identify a ﬁnite dimensional approx-
imation to the Koopman operator, K. The idea is to ﬁnd the
best-ﬁt linear operators A and B to provide the following
relationship:

xk+1 = Axk + Buk

for measurement xk, present control uk, and future measure-
ment xk+1. To do this, data snapshots are collected from the
dynamical system (1) of the state and input over time and
formed into the following data matrices:

Xp = (cid:2)x0 x1
Xf = (cid:2)x1 x2
Up = (cid:2)u0 u1

. . . xN −1
(cid:3) ,
. . . xN
. . . uN −1

(cid:3) ,

(cid:3) ,

where N is the number of snapshots collected. The above
matrices are known as snapshot matrices since each column
represents a snapshot at time k of the state of the dynamical
system. If data is collected from more than one trajectory, the

additional time-series can be appended as additional columns
in the snapshot matrices. To identify the best-ﬁt
linear
operators, the algorithm solves the following optimization
problem:

(cid:2)A B(cid:3) = arg min

A,B

= arg min
A,B

N −1
(cid:88)

||xi+1 − Axi − Bui||2,

i=0
||Xf − AXp − BUp||F ,

= Xf

(cid:21)†

(cid:20)Xp
Up

where † represents the Moore-Penrose pseudinverse. Here
A corresponds to Kx and B to Ku while Kxu = 0. Thus
DMDc is limited in its system identiﬁcation capabilites as
it does not account for mixed terms of x and u in its
formulation. If trajectories of the dynamical system without
inputs is available, the state transition matrix A can ﬁrst be
identiﬁed and treated to be a constant in the learning of the
control matrix B from the trajectories with inputs [12]. This
disambiguates the impact of the control input on the state
dynamics.

2) Deep dynamic mode decomposition with control:
Another approach to learning Koopman invariant subspaces
for controlled nonlinear systems is given in [38], but a
difﬁculty in this approach is that the user must choose the
observables manually. We use the deep learning approach
deep Dynamic Mode Decomposition (deepDMD) developed
in [41] to identify an efﬁcient representation of the invariant
subspace. The approach here is to represent the observable
functions as many compositions of linear transformations
and ReLU (Rectiﬁed Linear Units) functions and learn both
the observables and the Koopman operator simultaneously.
The neural network is tasked with solving the following
optimization problem

min
Kx,Kxu,Ku,θ

||Ψx(Xf , θ) − KxΨx(Xp, θ)

− KxuΨxu(Xp, Up, θ) − KuΨu(Up, θ)||F
+ λ1||K||2 + λ2||θ||1

where the parameters θ are the neural networks biases and
weights and λ1 and λ2 are regularization parameters. The
snapshot matrix Ψx, is now represented as
Ψx(Xp, θ) = (cid:2)ψx(x0, θ) ψx(x1, θ)

. . . ψx(xN −1, θ)(cid:3)

and the other snapshot matrices are similarly formed. The
neural network identiﬁes a model that relates the data in
observable space as

ψx(xk+1) = Kxψx(xk) + Kxuψxu(x, u) + Kuψu(u),

where we have dropped the dependency on θ for brevity.

III. STEADY STATE PROGRAMMING

In this section, when we refer to the Koopman operator, we
are referring to the ﬁnite-dimensional approximation of the
actual Koopman operator. The focus of this paper is to design
an input u to maximize a single direction of the state at

equilibrium. We emphasize that we are not solving a dynamic
control policy planning problem, but that the control policy
is a constant input that maximizes the equilibrium value of
a single direction in state space. Furthermore, we consider
nonlinear systems which have hyperbolic ﬁxed points. At
steady state we have the optimization problem

min
u∈U

−ˆe(cid:62)

i xk,e

s.t. xk,e = f (xk,e, uk),

(7)

where U is a bounded set of inputs, ˆei is the unit column
vector in the ith direction of the state (the state we aim to
maximize), and the subscript e denotes equilibrium values.
Since the form of f is unknown, it is difﬁcult to design
an input which solves this program. Therefore, we propose
to identify a Koopman invariant subspace by extending
the states and the inputs into a space of observables. The
identiﬁed Koopman model then allows us to formulate the
optimization problem in the lifted space where the problem
has some tractability.

A. Steady state programming using DMD with linear control

For a linear time-invariant system with (I − A) invertible,
if u does not come from a bounded set U but from an
unbounded set ˆU and the observable mapping is the identity,
there is no bounded u that solves optimization problem (7).
To see this, under the conditions above, the optimization
problem (7) becomes

min
u∈ ˆU

−ˆe(cid:62)

i (I − A)−1Buk

and note that the objective is linear in u. Differentiating with
respect to u we have

∂
∂uk

− ˆe(cid:62)

i (I − A)−1Buk = −ˆe(cid:62)

i (I − A)−1B

and so for any (A, B), there is no bounded u∗ that solves
the optimization problem. If u comes from the bounded set
U, then the minimum value of the objective on U occurs on
the boundary ∂U due to the maximum modulus principle.
This results from the fact that the objective function to be
optimized is linear in u and therefore it is an uninteresting
case. This case corresponds to identifying a linear model
using DMD with control, where the observable mapping is
simply the identity and the measurement snapshots are all
that is used to compute the state-transition matrix and the
control matrix. For nonlinear systems that can be represented
linearly by considering a linear basis, the above approach
will work effectively. However, we aim to develop a method
which can handle nonlinear systems that require a basis that
is a nonlinear function of the original states.

B. Steady state programming using deepDMD with nonlin-
ear control

Consider the case where the observable mapping is not

the identity.

Assumption 2: We assume that the state transition Koop-
man operator Kx has nL linearly independent eigenvectors

and that none of the corresponding nL eigenvalues are equal
to 1.
At equilibrium, (6) becomes

ψx(xe) = Kxψx(xe) + Kxuψxu(xe, uk) + Kuψu(uk) (8)

and under Assumption 2, (I − Kx) is invertible, so we have
ψx(xe) = (I − Kx)−1 [Kxuψxu(xe, uk) + Kuψu(uk)] .

For the optimization problem (7) we now have
−ˆe(cid:62)

i ψx(xe)

min
ψu(uk)∈UΨ

s.t. ψx(xe) = (I − Kx)−1

(9)

[Kxuψxu(xe, uk) + Kuψu(uk)]

stating that we want to ﬁnd the input ψu(u) that maximizes
the equilibrium value of a single direction in observable
space. Here UΨ is a bounded set of lifted inputs. If we assume
away the mixed terms of x and u then the problem becomes
immediately tractable as we have ψx(xe) as a function of just
terms in ψu(u). However, assuming away the mixed terms
seemingly requires a strong assumption about the nonlineari-
ties present in original dynamics. Speciﬁcally it assumes that
the input affects the state dynamics through additive means
only. This is typically not the case in biological systems.
Another important point to make is that this is an implicit
optimization of ψx(xe), another layer of difﬁculty when
dealing with the mixed terms.

Since we transform the state space coordinates to an
abstract observable-space, we want to keep the interpretabil-
ity of the original system intact. Therefore we make the
following assumption:

Assumption 3: We assume state-inclusive and input-

inclusive observables ψx(x) and ψu(u), respectively, i.e.

ψx(x) =

ψu(u) =

(cid:21)

(cid:20) x
ϕx(x)
(cid:20) u
ϕu(u)

,

(cid:21)

(10)

with ϕx(x) ∈ RnL−n and ϕu(u) ∈ RmL−m.
Again, since the mixed terms of x and u cause issues in
solving program (9), we want to examine the structure of
these terms when an EDMD [38] with control approach is
used. A typical EDMD dictionary may consist of functions
such as monomials, polynomials (Legendre and Hermite),
radial basis functions, trigonometric functions, and logistic
functions. It can be shown that for most of these common
dictionary elements, the mixed terms are separable in x and
u. To illustrate what we want to achieve, consider an example
system with state-inclusive (n = 2 and m = 2) observables
with up to second order monomials in the state and input.
Then for ψx : Rn → RnL=5 and ψu : Rm → RmL=5 we
have that

ψx(x) =









x1
x2
x1x2
x2
1
x2
2









, ψu(u) =

















u1
u2
u1u2
u2
1
u2
2

where we have left out the zeroth order terms for brevity. For
this example, the subscripts on the states and inputs represent
different components of the state and input, not timepoints.
As we have no knowledge of the form of the dynamics f ,
we may consider forming all possible combinations of ψx(x)
and ψu(u) and using those elements to form ψxu(x, u),














x1ψu(u)
x2ψu(u)
x1x2ψu(u)
x2
1ψu(u)
x2
2ψu(u)







or ψxu(x, u) =







u1ψx(x)
u2ψx(x)
u1u2ψx(x)
u2
1ψx(x)
u2
2ψx(x)







ψxu(x, u) =

with ψxu : Rn ⊕ Rm → RML=25, such that ML = nL × mL.
Note that ψxu(x, u) can now be written as a matrix times
ψu(u) or a matrix times ψx(x) as

ψxu(x, u) =

or

ψxu(x, u) =









Dx(x1)
Dx(x2)
Dx(x1x2)
Dx(x2
1)
Dx(x2
2)









ψu(u) = Mxψu(u)

(11)









Du(u1)
Du(u2)
Du(u1u2)
Du(u2
1)
Du(u2
2)









ψx(x) = Muψx(x)

(12)

where Dx(·) ∈ RnL×mL and Du(·) ∈ RmL×nL are diagonal
matrices with their argument as the diagonal elements. The
matrices Mx ∈ RML×mL and Mu ∈ RML×nL consist of
terms only in x and only in u, respectively.

is that

A more general statement

if f (x, u) in (2) is
separable into some G(u)h(x), then the mixed observable
ψxu(x, u) are also similarly separable. To see this, consider
continuous-time dynamics ˙x = f (x, u) for ease of presen-
tation. If f (x, u) is multiplicatively separable in x and u, it
can be written as

f (x, u) = W G(u)h(x),

(13)

with the weight matrix W ∈ Rn×ML, the matrix G(u) ∈
RML×nL is a function of u, and the vector h(x) ∈ RnL.
From the Koopman generator [3], we have that

˙ψx(x) =

∂ψx(x)
∂x

f (x, u) =

∂ψx(x)
∂x

W G(u)h(x).

(14)

and therefore, any mixed terms are entirely separable in
the observable space as well. This may mean that the deep
learning approach can take care of the necessity of having
mixed terms without explicitly learning the Kxu parameters.
Using the idea that we can separate the mixed terms as in

(11) and (12), (8) can be written as

ψx(xe) = Kxψx(xe) + KxuMuψx(xe) + Kuψu(uk) (15)

or as

ψx(xe) = Kxψx(xe) + KxuMxψu(uk) + Kuψu(uk). (16)

From (15) we have that at equilibrium,

ψx(xe) = (I − Kx − KxuMu)−1Kuψu(uk)

if (I − Kx − KxuMu) is invertible. From (16) we have that
at equilibrium,

ψx(xe) = (I − Kx)−1 [KxuMx + Kuψu(uk)]

and from Assumption 2 (I − Kx) is invertible.

Of these two options, if we use (16) to program the steady
state of nonlinear systems, it only requires that (I −Kx) to be
invertible, which has already been assumed. Equation (15) on
the other hand requires that (I −Kx −KxuMu) be invertible.
An advantage is that the right hand side is entirely a function
of u whereas (16) has a right hand side which is a function
of both u and x, requiring implicit optimization. From this
analysis, we can again rewrite the steady state programming
problem (9) as

min
ψu(uk)∈UΨ

−ˆe(cid:62)

i ψx(xe)

s.t. ψx(xe) = (I − Kx − KxuMu)−1Kuψu(uk)
or s.t. ψx(xe) = (I − Kx)−1 [KxuMx + Kuψu(uk)]
or s.t. ψx(xe) = (I − Kx)−1Kuψu(uk)

(17)
where the last constraint comes from setting Kxu = 0 i.e.
stating that ψxu terms are unimportant. We consider this last
case since deepDMD offers the ﬂexibility to learn accurate
Koopman invariant subspaces even without considering the
mixed terms, as will be demonstrated.

This program is in its most general form nonlinear and will
yield local optima. EDMD or any neural network approach
do not provide a structure to guarantee a global optimum
for this problem and is thus NP-hard. We use the Sequential
Least Squares Quadratic Programming (SLSQP) solver from
the scipy.optimize python package to solve program (17).
If DMD is used for steady state programming, any convex
optimization solver will sufﬁce.

IV. NUMERICAL RESULTS

A. Example: Feedforward Loop

We consider the following nonlinear dynamical system
describing a feedforward loop of ﬁve proteins (states) under
the inﬂuence of two inducers (inputs):

˙x0 =

k0u0
1 + u1
Kd4

− δ0x0

Fig. 1.
99 step prediction from a new initial condition using the neural
network identiﬁed Koopman model of the feedforward loop (18). Predictions
are given by dashed lines while the true trajectory is given by dotted lines.

production and Kd, δ, k are constant parameters. For sim-
ulation, a fourth-order Runge-Kutta scheme is used. 100
timesteps from 100 different initial conditions each with a
different input are used for training and testing. The inputs
are always step inputs in these simulations. The neural
network is a dense feedforward network with the output
being the observable basis which spans the approximate
Koopman invariant subspace. We take the case where the
mixed terms are assumed to be zero. To evaluate accuracy
of our Koopman model, we perform a multi-step prediction
test. Predictions on a single test trajectory (a trajectory that
the neural network has not seen) is given in Figure 1. This
prediction is done starting from an initial condition and
predicting 99 steps into the future and compared with the
actual trajectory. The error for this trajectory is ≈ 5% and
similar errors are computed for 49 other test trajectories.
We then solve program (17) and obtain the optimal step
input (0 < u∗ < 10) to achieve a maximum steady state
for both state x0 and state x3 as can be seen in Figure 2.
Each trajectory starts from the same initial condition, but
only the trajectory corresponding to the black dashed line
sees the optimal input and all the other trajectories see a
random input between (0 < u < 10). It can be seen that
the optimal input computed from our framework does give
the maximum steady state when applied to the system. Note
that the optimal input was applied to the original nonlinear
system, not to the identiﬁed Koopman model.

˙x1 =

k1u1
1 + x0
Kd1
˙x2 = k2x1 + k3u0 − δ2x2

− δ1x1

B. Example: Combinatorial promoter

(18)

˙x3 =

˙x4 =

k4u1
1 + x2
Kd2

k5u0
1 + x3
Kd3

− δ3x3

− δ4x4.

The states, x, describe the concentration of proteins, the
inputs u are inducers which activate or repress the protein

For a second example, we consider a combinatorial pro-
moter which takes both a repressor and an activator as
input, allowing genes to be switched on and off based on
the concentration of the activator and repressor [7]. The
dynamics are given by the following set of differential
equations

020406080100Time0.00.20.40.60.8PredictedTruthFig. 2.
Results of the optimal input computed from the steady state
programming problem applied to states x0 (left) and x3 (right) of the
feedforward loop (18). The trajectory corresponding to the optimal input
is given in black dashed lines and the other trajectories correspond to other
inputs that are suboptimal.

˙x0 = −k1f x0u0 + k1rx2
˙x1 = −k2f x1u1 + k2rx3 − k4f x1x4 + k4rx6 − k5f x1x5

+ k5rx7 + 0.2x10

˙x2 = k1f x0u0 − k1rx2 − k3f x2x4 + k3rx5 − k6f x2x6

+ k6rx7

˙x3 = k2f x1u1 − k2rx3 − 0.2x3
˙x4 = −k3f x2x4 + k3rx5 − k4f x1x4 + k4rx6
˙x5 = k3f x2x4 − k3rx5 − k5f x1x5 + k5rx7 − k7f x5x8

+ k7rx9 + k8f x9

˙x6 = −k6f x2x6 + k6rx7 − k4rx6 + k4f x1x4
˙x7 = k5f x1x5 − k5rx7 + k6f x2x6 − k6rx7
˙x8 = −k7f x5x8 + (k7r + k8f )x9
˙x9 = k7f x5x8 − (k7r + k8f )x9
˙x10 = k8f x9 − δx2
9

(19)
where the inputs u are the repressor or activator and are
continuous, monotonically increasing functions of time. For
simulation, a fourth-order Runge-Kutta scheme is used. 1000
timesteps from 80 different initial conditions each with a
different input are used for training and testing. The neural
network is the same as in Example 1. We again take the
case where the mixed terms are assumed to be zero since
the deep learning approach is ﬂexible enough to provide
a model that predicts well many steps into the future. We
again solve program (17) and obtain the optimal step input
(0.01 < u∗ < 1) to achieve a maximum steady state for
both state x6 and state x10 as can be seen in Figure 3.
Each trajectory starts from the same initial condition, but
only the trajectory corresponding to the black dashed line
sees the optimal input and all the other trajectories see a
random input between (0.01 < u < 1). For this example
of a combinatorial promoter, the learned optimal input gives

Fig. 3.
Results of the optimal input computed from the steady state
programming problem applied to states x6 (left) and x10 (right) of the
combinatorial promoter system (19). The trajectory corresponding to the
optimal input is given in black dashed lines and the other trajectories
correspond to other inputs that are suboptimal.

the maximum steady state value for each direction in state
space. Again, we want to emphasize that the optimal input
was identiﬁed using the Koopman model, but it was applied
to the original nonlinear system.

These numerical results demonstrate that it is possible, by
harnessing the natural analog computational power of cells
and through a data-driven operator theoretic framework, to
generate steady state input-output functions.

V. CONCLUSIONS

In this paper we presented a formulation for programming
the steady state of controlled nonlinear systems with hy-
perbolic ﬁxed points. We used deep dynamic mode decom-
position (deepDMD) with control to compute approximate
Koopman invariant subspaces and Koopman operators which
represent the original nonlinear system as an approximate
linear system. This allowed us to pose and solve an optimiza-
tion problem wherein we maximize the steady state value
of a single direction in state space. The formulation can be
extended to handle various cases e.g. maximize the ratio of
two directions in state space at steady state. The formulation
can be slightly revised to solve common optimal control
tasks e.g. reaching a target state and dynamic reference
tracking. The method can also be extended to nonlinear
systems with other types of attractors. It was shown that
mixed terms of the state and the input can provide difﬁculties
and we discuss a way of dealing with these terms. Finally, we
demonstrated our method on two example nonlinear systems
that are commonly dealt with in biological processes and
brieﬂy discuss broader biological computation implications.

ACKNOWLEDGEMENTS

The authors thank Igor Mezic, Robert Egbert, Bassam
Bamieh, Sai Pushpak, Sean Warnick, and Umesh Vaidya
for stimulating conversations. This work was supported by

a Defense Advanced Research Projects Agency (DARPA)
Grant No. DEAC0576RL01830 and an Institute of Collab-
orative Biotechnologies Grant. Any opinions, ﬁndings and
conclusions or recommendations expressed in this material
are those of the author(s) and do not necessarily reﬂect the
views of the Defense Advanced Research Projects Agency
(DARPA), the Department of Defense, or the United States
Government.

REFERENCES

[1] E. Ben-Jacob. Learning from bacteria about natural

information
processing. Annals of the New York Academy of Sciences, 1178(1):78–
90, 2009.

[2] N. Boddupalli, A. Hasnain, S. P. Nandanoori, and E. Yeung. Koopman
operators for generalized persistence of excitation conditions for
nonlinear systems. In 2019 IEEE 58th Conference on Decision and
Control (CDC), pages 8106–8111. IEEE, 2019.

[3] M. Budiˇsi´c, R. Mohr, and I. Mezi´c. Applied koopmanism. Chaos: An
Interdisciplinary Journal of Nonlinear Science, 22(4):047510, 2012.
[4] D. E. Cameron, C. J. Bashor, and J. J. Collins. A brief history of
synthetic biology. Nature Reviews Microbiology, 12(5):381–390, 2014.
[5] D. Del Vecchio, H. Abdallah, Y. Qian, and J. J. Collins. A blueprint
for a synthetic genetic feedback controller to reprogram cell fate. Cell
systems, 4(1):109–120, 2017.

[6] D. Del Vecchio, A. J. Dy, and Y. Qian. Control theory meets synthetic
biology. Journal of The Royal Society Interface, 13(120):20160380,
2016.

[7] D. Del Vecchio and R. M. Murray. Biomolecular feedback systems.

Princeton University Press Princeton, NJ, 2015.

[8] A. Didovyk, O. I. Kanakov, M. V. Ivanchenko, J. Hasty, R. Huerta,
and L. Tsimring. Distributed classiﬁer based on genetically engineered
bacterial cell cultures. ACS synthetic biology, 4(1):72–82, 2015.
[9] A. E. Friedland, T. K. Lu, X. Wang, D. Shi, G. Church, and J. J.
Collins. Synthetic gene networks that count. science, 324(5931):1199–
1202, 2009.

[10] T. S. Gardner, C. R. Cantor, and J. J. Collins. Construction of a genetic
toggle switch in escherichia coli. Nature, 403(6767):339–342, 2000.
[11] A. Hasnain, N. Boddupalli, and E. Yeung. Optimal reporter placement
in sparsely measured genetic networks using the koopman operator.
arXiv preprint arXiv:1906.00944, 2019.

[12] A. Hasnain, S. Sinha, Y. Dorfan, A. E. Borujeni, Y. Park, P. Maschhoff,
U. Saxena, J. Urrutia, N. Gaffney, D. Becker, et al. A data-driven
method for quantifying the impact of a genetic circuit on its host. In
2019 IEEE Biomedical Circuits and Systems Conference (BioCAS),
pages 1–4. IEEE, 2019.

[13] F. Jacob and J. Monod. Genetic regulatory mechanisms in the synthesis
of proteins. Journal of molecular biology, 3(3):318–356, 1961.
[14] S. Jayanthi, K. S. Nilgiriwala, and D. Del Vecchio. Retroactivity
controls the temporal dynamics of gene transcription. ACS synthetic
biology, 2(8):431–441, 2013.

[15] E. Kaiser, J. N. Kutz, and S. L. Brunton. Data-driven approxima-
arXiv preprint

tions of dynamical systems operators for control.
arXiv:1902.10239, 2019.

[16] M. Korda and I. Mezic. Linear predictors for nonlinear dynamical sys-
tems: Koopman operator meets model predictive control. Automatica,
93:149–160, 2018.

[17] M. Korda and I. Mezic. Optimal construction of koopman eigenfunc-

tions for prediction and control. hal-02278835, 2019.

[18] B. Lusch, J. N. Kutz, and S. L. Brunton. Deep learning for universal
linear embeddings of nonlinear dynamics. Nature communications,
9(1):4950, 2018.

[19] A. Mauroy and J. Goncalves. Koopman-based lifting techniques for
IEEE Transactions on Automatic

nonlinear systems identiﬁcation.
Control, 2019.

[20] I. Mezic. Spectral properties of dynamical systems, model reduction

and decompositions. Nonlinear Dynamics, 41(1-3):309–325, 2005.

[21] F. A. Millacura, B. Largey, and C. E. French. Parallel: a novel
population-based approach to biological logic gates. Frontiers in
Bioengineering and Biotechnology, 7:46, 2019.

[22] A. A. Nielsen, B. S. Der, J. Shin, P. Vaidyanathan, V. Paralanov, E. A.
Strychalski, D. Ross, D. Densmore, and C. A. Voigt. Genetic circuit
design automation. Science, 352(6281):aac7341, 2016.

[23] S. E. Otto and C. W. Rowley. Linearly recurrent autoencoder networks
for learning dynamics. SIAM Journal on Applied Dynamical Systems,
18(1):558–593, 2019.

[24] G. Paun, G. Rozenberg, and A. Salomaa. DNA computing: new

computing paradigms. Springer Science & Business Media, 2005.

[25] J. L. Proctor, S. L. Brunton, and J. N. Kutz. Dynamic mode
decomposition with control. SIAM Journal on Applied Dynamical
Systems, 15(1):142–161, 2016.

[26] J. L. Proctor, S. L. Brunton, and J. N. Kutz. Generalizing koopman
theory to allow for inputs and control. SIAM Journal on Applied
Dynamical Systems, 17(1):909–930, 2018.

[27] C. W. Rowley, I. Mezic, S. Bagheri, P. Schlatter, and D. S. Henningson.
Journal of Fluid Mechanics,

Spectral analysis of nonlinear ﬂows.
641:115, 2009.

[28] R. Sarpeshkar. Analog synthetic biology. Philosophical Transactions
the Royal Society A: Mathematical, Physical and Engineering

of
Sciences, 372(2012):20130110, 2014.

[29] P. J. Schmid. Dynamic mode decomposition of numerical and
experimental data. Journal of ﬂuid mechanics, 656:5–28, 2010.
[30] R. Shah and D. Del Vecchio. Reprogramming cooperative monotone
In Submitted to IEEE Conference on Decision

dynamical systems.
and Control, 2018.

[31] J. Shin, S. Zhang, B. S. Der, A. A. Nielsen, and C. A. Voigt. Pro-
gramming escherichia coli to function as a digital display. Molecular
Systems Biology, 16(3), 2020.

[32] V. Singh. Recent advances and opportunities in synthetic logic gates
engineering in living cells. Systems and synthetic biology, 8(4):271–
282, 2014.

[33] S. Sinha, U. Vaidya, and R. Rajaram. Operator theoretic framework for
optimal placement of sensors and actuators for control of nonequilib-
rium dynamics. Journal of Mathematical Analysis and Applications,
440(2):750–772, 2016.

[34] E. Sontag, A. Kiyatkin, and B. N. Kholodenko.

Inferring dynamic
architecture of cellular networks using time series of gene expression,
protein and metabolite data. Bioinformatics, 20(12):1877–1886, 2004.
[35] J. J. Tabor, H. M. Salis, Z. B. Simpson, A. A. Chevalier, A. Levskaya,
E. M. Marcotte, C. A. Voigt, and A. D. Ellington. A synthetic genetic
edge detection program. Cell, 137(7):1272–1281, 2009.

[36] N. Takeishi, Y. Kawahara, and T. Yairi. Learning koopman invariant
subspaces for dynamic mode decomposition. In Advances in Neural
Information Processing Systems, pages 1130–1140, 2017.

[37] C. Ward, E. Yeung, T. Brown, B. Durtschi, S. Weyerman, R. Howes,
J. Goncalves, H. Sandberg, and S. Warnick. A comparison of
network reconstruction methods for chemical reaction networks.
In
Proceedings of the Foundations for Systems Biology and Engineering
Conference, pages 197–200, 2009.

[38] M. O. Williams, M. S. Hemati, S. T. Dawson, I. G. Kevrekidis, and
C. W. Rowley. Extending data-driven koopman analysis to actuated
systems. IFAC-PapersOnLine, 49(18):704–709, 2016.

[39] E. Yeung, A. J. Dy, K. B. Martin, A. H. Ng, D. Del Vecchio, J. L.
Beck, J. J. Collins, and R. M. Murray. Biophysical constraints arising
from compositional context in synthetic gene networks. Cell systems,
5(1):11–24, 2017.

[40] E. Yeung, J. Kim, J. Gonc¸alves, and R. M. Murray. Global network
identiﬁcation from reconstructed dynamical structure subnetworks:
In 2015 54th IEEE
Applications to biochemical reaction networks.
Conference on Decision and Control (CDC), pages 881–888. IEEE,
2015.

[41] E. Yeung, S. Kundu, and N. Hodas. Learning deep neural network rep-
resentations for koopman operators of nonlinear dynamical systems. In
2019 American Control Conference (ACC), pages 4832–4839. IEEE,
2019.

[42] E. Yeung, Z. Liu, and N. O. Hodas. A koopman operator approach for
computing and balancing gramians for discrete time nonlinear systems.
In 2018 Annual American Control Conference (ACC), pages 337–344.
IEEE, 2018.

