8
1
0
2

y
a
M
0
1

]

G
L
.
s
c
[

2
v
1
5
5
3
0
.
5
0
8
1
:
v
i
X
r
a

A Uniﬁed Framework of Deep Neural Networks by
Capsules

Yujian Li
College of Computer Science
Faculty of Information Technology
Beijing University of Technology
Beijing, China 100124
liyujian@bjut.edu.cn

Chuanhui Shan
College of Computer Science
Faculty of Information Technology
Beijing University of Technology
Beijing, China 100124
chuanhuishan@emails.bjut.edu.cn

Abstract

With the growth of deep learning, how to describe deep neural networks uniﬁedly
is becoming an important issue. We ﬁrst formalize neural networks mathematically
with their directed graph representations, and prove a generation theorem about the
induced networks of connected directed acyclic graphs. Then, we set up a uniﬁed
framework for deep learning with capsule networks. This capsule framework could
simplify the description of existing deep neural networks, and provide a theoretical
basis of graphic designing and programming techniques for deep learning models,
thus would be of great signiﬁcance to the advancement of deep learning.

1

Introduction

Deep learning has made a great deal of success in processing images, audios, and natural languages
[1-3], inﬂuencing academia and industry dramatically. It is essentially a collection of various methods
for effectively training neural networks with deep structures. A neural network is usually regarded as
a hierarchical system composed of many nonlinear computing units (or neurons, nodes). The most
popular neural network was once multilayer perceptron (MLP) [4]. A MLP consists of an input layer,
a number of hidden layers and an output layer, as shown in Figure 1. The depth of it is the number of
layers excluding the input layer. If the depth is greater than 2, a neural network is now called “deep”.
For training MLPs, backpropagation (BP) is certainly the most well-known algorithm in common
use [4], but it seemed to work only for shallow networks. In 1991, Hochreiter indicated that typical
deep neural networks (DNNs) suffer from the problem of vanishing or exploding gradients [5]. To
overcome training difﬁculties in DNNs, Hinton et al. started the new ﬁeld of deep learning in 2006
[6, 7].

Besides deep MLPs, DNNs also include convolutional neural networks (CNNs) and recurrent neural
networks (RNNs). Here, we omit RNNs for saving space. Theoretically, a CNN can be regarded
as a special MLP or feedforward neural network. It generally consists of an input layer, alternating
convolutional and pooling layers, a fully connected layer, and an output layer, as shown in Figure
2. Note that “convolutional layers” are also called "detection layers", and “pooling layers" are also
called “downsampling layers”. There have been a large number of CNN variants, for example, LeNet
[8], AlexNet [1], VGGNet [9], GoogLeNet [10], ResNet [11], Faster R-CNN [12], DenseNet [13],
Mask R-CNN [14], YOLO [15], SSD [16], and so on. They not only take the lead in competitions of
image classiﬁcation and recognition as well as object localization and detection [9-12], but also in
other applications such as deep Q-networks [17], AlphaGo [18], speech recognition [2], and machine
translation [3]. To cope with the disadvantages of CNNs, in 2017 Hinton et al. further proposed a
capsule network [19], which is more convincing from the neurobiological point of view. So many
deep models are dazzling with different structures. Some of them have added shortcut connections,

Preprint. Work in progress.

 
 
 
 
 
 
Figure 1: The structure of a MLP.

Figure 2: The structure of a CNN.

parallel connections, and even nested structures to traditional layered structures. How to establish a
uniﬁed framework for DNNs is becoming a progressively important issue in theory. We are motivated
to address it.

This paper is organized as follows. In Section 2, we propose a mathematical deﬁnition to formalize
neural networks, give their directed graph representations, and prove a generation theorem about the
induced networks of connected directed acyclic graphs. In Section 3, we use the concept of capsule
to extend neural networks, deﬁne an induced model for capsule networks, and establish a uniﬁed
framework for deep learning with a universal backpropagation algorithm. Finally, in Section 4 we
make a few conclusions to summarize the signiﬁcance of the capsule framework to advance deep
learning in theory and application.

2 Formalization of Neural networks

2.1 Mathematical deﬁnition

A neural network is a computational model composed of nodes and connections. Nodes are di-
vided into input nodes and neuron nodes. Input nodes can be represented by real variables, e.g.
x1, x2, · · · , xn . The set of input nodes is denoted as X = {x1, x2, · · · , xn} . A neuron node can
receive signals through connections both from input nodes and the outputs of other neuron nodes,
and perform a weighted sum of these signals for a nonlinear transformation. Note that the weight
measures the strength of a connection, and the nonlinear transformation is the effect of an activation
function. Let F be a set of activation functions, such as sigmoid, tanh, ReLU, and so on.

On X and F , a neural network can be formally deﬁned as a 4-tuple net = (S, H, W, Y ), where S is
a set of input nodes, H is a set of neuron nodes, W is a set of weighting connections, and Y is a set
of outputs. The neural network is recursively generated by four basic rules as follows:

1) Rule of variable. For any z ∈ X, let yz = z. If S = {z}, H = ∅, W = ∅, Y = {yz}, then the
4-tuple net = (S, H, W, Y ) is a neural network.
2) Rule of neuron. For any nonempty subset S ⊆ X, ∀f ∈ F , ∀b ∈ R, construct a node
h (cid:54)∈ X that depends on (f, b) and select a set of weighting connections wxi→h(xi ∈ S). Let
yh = f ((cid:80)
xi∈S wxi→hxi + b) be the output of node h. If H = {h}, W = {wxi→h|xi ∈ S}, and
Y = {yh}, then net = (S, H, W, Y ) is a neural network.

3) Rule of growth. Suppose net = (S, H, W, Y ) is a neural network. For any nonempty subset
N ⊆ S ∪ H, ∀f ∈ F , ∀b ∈ R, construct a node h (cid:54)∈ S ∪ H that depends on (f, b) and select a

2

Figure 3: (a)A trivial network; (b)A 1-input-1-neuron network.

Figure 4: Three 1-input-2-neuron networks.

set of weighting connections wzj→h(zj ∈ N ). Let yh = f ((cid:80)
zj ∈N wzj→hyzj + b) be the output
of node h. If S(cid:48) = S, H (cid:48) = H ∪ {h}, W (cid:48) = W ∪ {wzj→h|zj ∈ N }, and Y (cid:48) = Y ∪ {yh}, then
net(cid:48) = (S(cid:48), H (cid:48), W (cid:48), Y (cid:48)) is also a neural network.

k=1 Ak, ∀f ∈ F , ∀b ∈ R, construct a node h (cid:54)∈ (cid:83)K

4) Rule of convergence. Suppose netk = (Sk, Hk, Wk, Yk)(1 ≤ k ≤ K) are K neural networks,
satisfying that ∀1 ≤ i (cid:54)= j ≤ K, (Si ∪ Hi) ∩ (Sj ∪ Hj) = ∅. For any nonempty subsets Ak ⊆
Sk ∪ Hk(1 ≤ k ≤ K), N = (cid:83)K
k=1(Sk ∪ Hk) that
depends on (f, b), select a set of weighting connections wz→h(z ∈ N ). Let yh = f ((cid:80)
z∈N wz→hyz +
b) be the output of the node h. If S = (cid:83)K
k=1 Wk) ∪
{wz→h|z ∈ N }, and Y = ((cid:83)K
Among the four generation rules, it should be noted that the rule of neuron is not independent. This
rule can be derived from the rule of variable and the rule of convergence. Moreover, the weighting
connection wz→h should be taken as a combination of the weight and the connection, rather than just
the weight. Additionally, if a node h depends on (f, b), f is called the activation function of h, and b
is called the bias of h.

k=1 Yk) ∪ {yh}, then net = (S, H, W, Y ) is also a neural network.

k=1 Hk) ∪ {h}, W = ((cid:83)K

k=1 Sk, H = ((cid:83)K

2.2 Directed graph representation

Let X be a set of real variables and F be a set of activation functions. For any neural network
net = (S, H, W, Y ) on X and F , a directed acyclic graph Gnet = (V, E) can be constructed with
the vertex set V = S ∪ H and the directed edge set E = {z → h|wz→h ∈ W }. Gnet = (V, E)
is called the directed graph representation of net = (S, H, W, Y ). Two cases of the representation
generation are discussed in the following.

1)The case of X = {x1}
Using the rule of variable, for x1 ∈ X, let yx1 = x1. If S = {x1}, H = ∅, W = ∅, and Y = {yx1},
then net = (S, H, W, Y ) is a neural network. Since this network has only one input node without any
function for nonlinear transformation, it is also called a trivial network, as shown in Figure 3(a). Using
the rule of neuron, for a nonempty subset S = {x1} ⊆ X, ∀f ∈ F , ∀b ∈ R, construct a node h1 (cid:54)∈ S
that depends on (f, b), select a weighting connection wx1→h1, and let yh1 = f (wx1→h1x1 + b). If
H = {h1}, W = {wx1→h1 }, and Y = {yh1}, then net = (S, H, W, Y ) is a neural network, which
has one input and one neuron. It is also called a 1-input-1-neuron network, as shown in Figure 3(b).
Using the rule of growth on the network, three new neural networks with different structures can be
generated, as shown in Figures 4(a-c). Likewise, they are called 1-input-2-neuron networks. Using
the rule of growth on the three networks, twenty-one new neural networks with different structures
can be totally generated further. Seven out of them for Figure 4(a) are displayed in Figures 5(a-g).
They are called 1-input-3-neuron networks.

2)The case of X = {x1, x2}
Using the rule of variable, for x1, x2 ∈ X, let yx1 = x1 and yx2 = x2. If S1 = {x1}, S2 = {x2},
H1 = H2 = ∅, W1 = W2 = ∅, Y1 = {yx1}, and Y2 = {yx2 }, then net1 = ({x1}, ∅, ∅, {yx1}) and
net2 = ({x2}, ∅, ∅, {yx2 }) are neural networks. Obviously, both of them are trivial networks. Using

3

Figure 5: Seven 1-input-3-neuron networks.

Figure 6: A 2-input-1-neuron network.

the rule of neuron, for a nonempty subset S ⊆ X, if S = {x1} or S = {x2}, the neural network can
be similarly constructed with the case of X = {x1}.
If X = {x1, x2}, ∀f ∈ F , ∀b ∈ R, construct a node h1 (cid:54)∈ S that depends on (f, b), select a set
of weighting connections wxi→h1 (xi ∈ S) and let yh1 = f ((cid:80)
xi∈S wxi→h1xi + b). If H = {h1},
W = {wx1→h1, wx2→h1 }, and Y = {yh1 }, then net = (S, H, W, Y ) is a neural network. This is a
2-input-1-neuron network, as depicted in Figure 6. Using the rule of growth on this network, seven
2-input-2-neuron networks with different structures can be generated, as shown in Figures 7(a-g).

Finally, the rule of convergence is necessary. In fact, it cannot generate all neural networks only using
the three rules of variable, neuron and growth. For example, the network in Figure 8(c) cannot be
generated without using the rule of convergence on the two in Figures 8(a-b).

2.3

Induced network and its generation theorem

Suppose G = (V, E) is a connected directed acyclic graph, where V denotes the vertex set and E
denotes the directed edge set. For any vertex h ∈ V , let INh = {z|z ∈ V, z → h ∈ E} be the set of
vertices each with a directed edge to h, and OU Th = {z|z ∈ V, h → z ∈ E} be the set of vertices
for h to have directed edges each to. If INh = ∅, then h is called an input node of G. If OU Th = ∅,
then h is called an output node of G. Otherwise, h is called a hidden node of G. Let X stand for

Figure 7: Seven 2-input-2-neuron networks.

4

Figure 8: A necessary explanation for the rule of convergence.

the set of all input nodes, O for the set of all output nodes, and M for the set of all hidden nodes.
Obviously, V = X ∪ M ∪ O, and M = V − X ∪ O.

Furthermore, let yh be the output of node h, and wz→h be the weighting connection from z to h.
Then, a computational model of graph G can be deﬁned as follows:

1) ∀z ∈ X, yz = z.
2) ∀h ∈ M ∪ O, select f ∈ F and b ∈ R to compute yh = f ((cid:80)

z∈INh

wz→hyz + b).

If S = X, H = M ∪ O, W = {wz→h|z → h ∈ E}, and Y = {yh|h ∈ V }, then netG =
(S, H, W, Y ) is called an induced network of graph G. The following generation theorem holds on
the induced network.

Generation Theorem: For any connected directed acyclic graph G = (V, E), its induced network
netG is a neural network that can be recursively generated by the rules of variable, neuron, growth,
and convergence.

Proof: By induction on |V | (i.e. number of vertices), we prove the theorem as follows.
1) When |V | = 1, we have |X| = 1 and |O| = 0, so the induced network netG is a neural network
that can be generated directly by the rule of variable.
2) When |V | = 2, we have |X| = 1 and |O| = 1, so the induced network netG is a neural network
that can be generated directly by the rule of growth.
3) Assume that the theorem holds for |V | ≤ n. When |V | = n + 1 ≥ 3, the induced network netG
has at least one output node h ∈ O. Let Eh = {z → h ∈ E} denote the set of edges heading
to the node h. Moreover, let V (cid:48) = V − {h} and E(cid:48) = E − Eh. Based on the connectedness of
G(cid:48) = (V (cid:48), E(cid:48)), we have two cases to discuss in the following:

i) If G(cid:48) = (V (cid:48), E(cid:48)) is connected, then applying the induction assumption for |V (cid:48)| ≤ n, the
induced network netG(cid:48) = (S(cid:48), H (cid:48), W (cid:48), Y (cid:48)) can be recursively generated by the rules of
variable, neuron, growth, and convergence. Let N = INh. In netG = (S, H, W, Y ),
we use f ∈ F and b ∈ R to stand for the activation function and bias of node h, and
wz→h(z ∈ N ) for the weighting connection from node z to the node h. Then, netG can
be obtained by using the rule of growth on netG(cid:48), to generate the node h and its output
yh = f ((cid:80)

z∈N wz→hyz + b).

ii) Otherwise, G(cid:48) comprises a number of disjoint connected components Gk = (Vk, Ek)(1 ≤
k ≤ K). Using the induction assumption for |Vk| ≤ n(1 ≤ k ≤ K), the induced
network netGk = (Sk, Hk, Wk, Yk) can be recursively generated by the rules of variable,
neuron, growth, and convergence. Let Ak = (Sk ∪ Hk) ∩ INh, and N = (cid:83)K
k=1 Ak. In
netG = (S, H, W, Y ), we use f ∈ F and b ∈ R to stand for the activation function and
bias of the node h, and wz→h(z ∈ N ) for the weighting connection from node z to node
h. Then, netG can be obtained by using the rule of convergence on netGk (1 ≤ k ≤ K), to
generate the node h and its output yh = f ((cid:80)

z∈N wz→hyz + b).

As a result, the theorem always holds.

3 Capsule framework of Deep learning

3.1 Mathematical deﬁnition of capsules

In 2017, Hinton et al. pioneered the idea of capsules and considered a nonlinear “squashing” capsule
[19]. From the viewpoint of mathematical models, a capsule is essentially an extension of the

5

Figure 9: Mathematical model of a general capsule.

Figure 10: The capsule structure of a MLP.

traditional activation function. It is primarily deﬁned as an activation function with a vector input and
a vector output. More generally, a capsule can be an activation function with a tensor input and a
tensor output.

As shown in Figure 9, a general capsule may have n input tensors X1, X2, · · · , Xn, n weight tensors
W1, W2, · · · , Wn, and a capsule bias B, and n weighting operations ⊗1, ⊗2, · · · , ⊗n. Note that a
weighting operation may be taken as an identity transfer, a scalar multiplication, a vector dot product,
a matrix multiplication, a convolution operation, and so on. Meantime, Wi ⊗i Xi(1 ≤ i ≤ n) and B
must be tensors with the same dimension. The total input of the capsule is U = (cid:80)
i Wi ⊗i Xi + B,
and the output Y is a tensor computed by a nonlinear capsule function cap, namely,

Y = cap(U ) = cap(

(cid:88)

Wi ⊗i Xi + B).

i

(1)

For convenience, we use F to stand for a nonempty set of capsule functions, and T for the set of all
tensors.

3.2 Capsule Networks

Suppose G = (V, E) is a connected directed acyclic graph, where V denotes the vertex set and E
denotes the directed edge set. For any vertex H ∈ V, let INH be the set of vertices each with a
directed edge to H, and OU TH be the set of vertices for H to have a directed edge each to. If
INH = ∅, then H is called an input node of G. If OU TH = ∅, then H is called an output node of
G. Otherwise, H is called a hidden node of G. Let X stand for the set of all input nodes, O for the
set of all output nodes, and M for the set of all hidden nodes. Obviously, V = X ∪ M ∪ O, and
M = V − X ∪ O.

Furthermore, let YH be the output of node H, and (WZ→H , ⊗Z→H ) be the tensor-weighting con-
nection from Z to H. If ∀H ∈ M ∪ O, ∀Z ∈ INH , WZ→H ⊗Z→H YZ and B are tensors with the
same dimension, then a tensor-computational model of graph G can be deﬁned as follows:

1) ∀Z ∈ X , YZ = Z.

2) ∀H ∈ M ∪ O,

select cap

∈ F and B ∈

T to compute YH =

cap((cid:80)

Z∈INH

WZ→H ⊗Z→H YZ + B).

If S = X , H = M ∪ O, W = {(WZ→H , ⊗Z→H )|Z → H ∈ E}, and Y = {YH |H ∈ V}, then
netG = (S, H, W, Y) is called a tensor-induced network of graph G. This network is also called a
capsule network.

Using a capsule network, a MLP can be simpliﬁed as a directed acyclic path of capsules. For
example, the MLP in Figure 1 has ﬁve layers: an input layer, three hidden layers, and an output
layer. On the whole, each layer could be thought of as a capsule. Let X = (x1, x2, · · · , x5)T
stand for the input capsule node, Hi = (capi, Bi)(i = 1, 2, 3) for the hidden capsule nodes, and
O = (cap4, B4) for the output capsule node. Note that capsule function capi and capsule bias Bi are
deﬁned by the elementwise activation function and the bias vector respectively of the correspond-
ing layer in the MLP. If the weighting operations ⊗X→H1, ⊗H1→H2, ⊗H2→H3 , and ⊗H3→O are

6

Figure 11: The Capsule structure of a CNN, with “∗” standing for convolution, “→” for identity
transfer, “(cid:47)” for tensor reshaping, and “×” for matrix multiplication.

all taken as matrix multiplication “×”, then we have (WX→H1 , ⊗X→H1) = ((wX→H1
)7×5, ×),
(WH1→H2 , ⊗H1→H2) = ((wH1→H2
)7×7, ×) and
m,n
(WH3→O, ⊗H3→O) = ((wH3→O
)4×7, ×), which are the tensor-weighting connections from X
to H1, H1 to H2, H2 to H3 and H3 to O. Finally, let YHi(i = 1, 2, 3) stand for the output vec-
tor of Hi, and YO for the output vector of O. Setting YHO = X and YH4 = YO, we obtain
YHi = capi(WHi−1→Hi × YHi−1 + Bi). Therefore, the capsule structure of the MLP is a directed
acyclic path, as displayed in Figure 10.

)7×7, ×), (WH2→H3 , ⊗H2→H3) = ((wH2→H3

m,n

m,n

m,n

Besides MLPs, capsule networks can also be used to simplify the structures of other DNNs. Let
us consider the CNN in Figure 2. This CNN has 7 layers: one input layer, two convolutional lay-
ers, two downsampling (pooling) layers, one fully connected layer, and one output layer. On the
whole, each of the layers could be thought of as a capsule. Let X stand for the input capsule node,
Hi = (capi, Bi)(i = 1, · · · , 5) for the hidden capsule nodes, and O = (cap6, B6) for the output cap-
sule node. Note that cap1 and cap3 are capsule functions deﬁned by elementwise ReLUs. cap2 and
cap4 are capsule functions deﬁned by downsampling “↓”. cap5 is an identity function. cap6 is a cap-
sule function deﬁned by softmax. In addition, Bi(i = 1, · · · , 6) are capsule biases each deﬁned by the
bias tensor of the corresponding layer in the CNN. Let both ⊗X→H1 and ⊗H2→H3 be the convolution
operation “∗”, both ⊗H1→H2 and ⊗H3→H4 be the identity transfer “→”, ⊗H4→H5 be the tensor-
reshaping operation “(cid:47)”, and ⊗H5→O be the matrix multiplication “×”. Then, (WX→H1 , ⊗X→H1 ) =
(WX→H1, ∗),
(WH2→H3 , ⊗H2→H3) = (WH2→H3, ∗),
(WH3→H4 , ⊗H3→H4) = (””, →), (WH4→H5 , ⊗H4→H5) = (””, (cid:47)), and (WH5→O, ⊗H5→O) =
(WH5→O, ×), which are the tensor-weighting connections from X to H1, H1 to H2, H2 to H3, H3
to H4, H4 to H5, and H5 to O. Finally, let YHi(i = 1, 2, 3, 4, 5) stand for the output tensor of Hi,
and YO for the output tensor of O. This leads to the following computations:

(WH1→H2 , ⊗H1→H2) = (””, →),






YH1 = cap1(WX→H1 ∗ X + B1) = ReLU(WX→H1 ∗ X + B1),
YH2 = cap2(WH1→H2 ⊗H1→H2 YH1 + B2) = cap2(→ YH1 + B2) =↓ YH1 + B2,
YH3 = cap3(WH2→H3 ∗ X + B3) = ReLU(WH2→H3 ∗ YH2 + B3),
YH4 = cap4(WH3→H4 ⊗H3→H4 YH3 + B4) = cap4(→ YH3 + B4) =↓ YH3 + B4,
YH5 = cap5((cid:47)YH4 + B5) = (cid:47)YH4,
YO = cap6(WH5→O × YH5 + B6) = sof tmax(WH5→O × YH5 + B6).

(2)

Therefore, the capsule structure of the CNN is also a directed acyclic path, as depicted in Figure 11.

Besides simplifying the description of existing DNNs, the capsule networks can also be used to
graphically design a variety of new structures for complex DNNs, such as displayed in Figure 12.

3.3 Universal backpropagation of capsule networks

Suppose G = (V, E) is a connected directed acyclic graph. Let X = {X1, X2, · · · , Xn} stand
for the set of all input nodes, O = {O1, O2, · · · , Om} for the set of all output nodes, and M =
V − X ∪ O = {H1, H2, · · · , Hl} for the set of all hidden nodes. netG = (S, H, W, Y) is an tensor-
induced network of graph G. This is also a capsule network. If the number of nodes |S ∪ H| ≥ 2,
then for ∀H ∈ H,

(cid:26)UH = (cid:80)

Z∈INH

YH = capH (UH ) = capH ((cid:80)

WZ→H ⊗Z→H YZ + BH ,

Z∈INH

WZ→H ⊗Z→H YZ + BH ).

(3)

For any output node H ∈ O, let YH and TH be its actual output and expected output for input X ,
respectively. The loss function between them is deﬁned as LH = Loss(YH , TH ). Accordingly, we

7

Figure 12: Structure of a general capsule network.

Algorithm 1: One iteration of the universal backpropagation algorithm.
1) Select a learning rate η > 0,
2) ∀H ∈ M ∪ O, ∀Z ∈ INH , initialize WZ→H and BH ,
3) ∀H ∈ O, compute δH = ∂Loss(YH ,TH )
4) ∀H ∈ M, compute δH = (cid:80)
P ∈OU TH
∂UH
5) Compute ∆WZ→H = δH ·
∂WZ→H
6) Update WZ→H ← WZ→H − η · ∆WZ→H ,BH ← BH − η · ∆BH .

· ∂capH
∂UH
· ∂capH
δP · ∂UP
∂YH
∂UH
and ∆BH = δH ,

∂YH

,

,

have the total loss function L = (cid:80)
(or sensitivity) for capsule node H. By the chain rule, we further obtain:

H∈O LH . Let δH = ∂L
∂UH

denote the backpropagated error signal

∀H ∈ O,






δH
∂L
∂BH

∂L
∂WZ→H

= ∂L
∂UH
= ∂L
∂UH
= ∂L
∂UH

= ∂Loss(YH ,TH )
∂YH
· ∂UH
= δH ,
∂BH
·

∂UH
∂WZ→H

= δH ·

· ∂capH
∂UH

,

∂UH
∂WZ→H

.

∀H ∈ M,


δH



∂L
∂BH

∂L
∂WZ→H

= (cid:80)

= ∂L
∂UH
= (cid:80)
= ∂L
∂UH
= ∂L
∂UH

P ∈OU TH
· ∂UH
∂BH
·

P ∈OU TH
δP · ∂UP
∂YH
= δH ,

∂UH
∂WZ→H

= δH ·

∂UH
∂WZ→H

.

∂L
∂UP
· ∂capH
∂UH

· ∂UP
∂YH
,

· ∂YH
∂UH

(4)

(5)

Note that in formulae (4)-(5), ∂capH
depends on the speciﬁc form of capsule function capH . For
∂UH
example, when capH is an elementwise sigmoid function, the result is ∂capH
= sigmoid(UH )(1 −
∂UH
sigmoid(UH )). Meanwhile,
also depend on the speciﬁc choice of the weighting
operation ⊗Z→H .

and ∂UP
∂YH

∂UH
∂WZ→H

Based on formulae (4)-(5), a universal backpropagation algorithm can be designed theoretically for
capsule networks, with one iteration detailed in Algorithm 1. In practice, this algorithm should be
changed to one of many variants with training data [20].

4 Conclusions

Based on the formalization of neural networks, we have developed capsule networks to establish a
uniﬁed framework for deep learning. This capsule framework could not only simplify the description
of existing DNNs, but also provide a theoretical basis of graphical designing and programming for
new deep learning models. As future work, we will try to deﬁne an industrial standard and implement
a graphic platform for the advancement of deep learning with capsule networks, and even with a
similar extension to recurrent neural networks.

8

References

[1] Krizhevsky, A., Sutskever, I. & Hinton, G.E. (2012) Imagenet classiﬁcation with deep convolutional neural
networks. In F. Pereira, C.J.C. Burges, L. Bottou and K.Q. Weinberger (eds.), Advances in neural information
processing systems 25, pp. 1097–1105. Cambridge, MA: MIT Press.

[2] Amodei, D., Ananthanarayanan, S. & Anubhai, R. et al. (2016) Deep speech 2: End-to-end speech recognition
in English and Mandarin. International Conference on Machine Learning, pp. 173–182.

[3] Wu, Y., Schuster, M. & Chen, Z. et al. (2016) Google’s Neural Machine Translation System: Bridging the
Gap between Human and Machine Translation. arXiv preprint arXiv:1609.08144.

[4] Rumellhart, D.E. (1986) Learning internal representations by error propagation. Parallel distributed
processing: Explorations in the microstructure of cognition 1:319-362.

[5] Schmidhuber, J. (2014) Deep learning in neural networks: An overview. Neural Network 61:85-117.

[6] Hinton, G.E. & Salakhutdinov, R.R. (2006) Reducing the dimensionality of data with neural networks.
Science 313(5786):504-507.

[7] Hinton, G.E., Osindero, S. & Teh, Y.W. (2006) A fast learning algorithm for deep belief nets. Neural
computation 18(7):1527-1554.

[8] LeCun, Y., Bottou, L. & Bengio Y, et al. (1998) Gradient-based learning applied to document recognition.
Proceedings of the IEEE 86(11):2278-2324.

[9] Simonyan, K. & Zisserman, A. (2014) Very Deep Convolutional Networks for Large-Scale Image Recognition.
Computer Science.

[10] Szegedy, C. Liu, W. & Jia, Y. et al. (2015) Going deeper with convolutions. IEEE Conference on Computer
Vision and Pattern Recognition.

[11] He, K. Zhang, X. & Ren, S. et al. (2016) Deep residual learning for image recognition. Proceedings of the
IEEE conference on computer vision and pattern recognition, pp. 770–778

[12] Ren, S., He, K. & Girshick, R. et al. (2015) Faster r-cnn: Towards real-time object detection with region
proposal networks. Advances in neural information processing systems, pp. 91–99.

[13] Huang, G., Liu, Z. & Weinberger, K.Q. et al. (2017) Densely connected convolutional networks. Proceedings
of the IEEE conference on computer vision and pattern recognition, pp. 1(2):3.

[14] He, K., Gkioxari, G. & Dollár, P. et al. (2017) Mask r-cnn. Computer Vision (ICCV), 2017 IEEE International
Conference on. IEEE, pp. 2980–2988.

[15] Redmon, J., Divvala, S. & Girshick, R. et al. (2016) You only look once: Uniﬁed, real-time object detection.
Proceedings of the IEEE conference on computer vision and pattern recognition, pp. 779–788.

[16] Liu, W., Anguelov, D. & Erhan, D. et al. (2016) Ssd: Single shot multibox detector. European conference
on computer vision. Springer, Cham, pp. 21–37.

[17] Mnih, V., Kavukcuoglu, K. & Silver, D. et al. (2015) Human-level control through deep reinforcement
learning. Nature 518(7540):529.

[18] Silver, D., Schrittwieser, J. & Simonyan, K. et al. (2017) Mastering the game of Go without human
knowledge. Nature 550(7676):354-359.

[19] Sabour, S., Frosst, N. & Hinton, G.E. (2017) Dynamic routing between capsules. In I. Guyon, U.V. Luxburg,
S. Bengio, H. Wallach, R. Fergus, S. Vishwanathan and R. Garnett (eds.), Advances in Neural Information
Processing Systems 30, pp. 3859-3869. Cambridge, MA: MIT Press.

[20] Ruder, S. (2016) An overview of gradient descent optimization algorithms. arXiv preprint arXiv:1609.04747.

9

