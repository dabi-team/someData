Bug-Fix Variants: Visualizing
Unique Source Code Changes across GitHub Forks

Daigo Imamura, Takashi Ishio, Raula Gaikovina Kula, Kenichi Matsumoto
Graduate School of Science and Technology
Nara Institute of Science and Technology
Ikoma, Nara, Japan
{imamura.daigo.ia0, ishio, raula-k, matumoto}@is.naist.jp

2
2
0
2

g
u
A
5

]
E
S
.
s
c
[

1
v
4
7
0
4
0
.
8
0
2
2
:
v
i
X
r
a

Abstract—Forking is a common practice for developers when
building upon on already existing projects. These forks create
variants, which have a common code base but then evolve the
code in different directions, which is speciﬁc to that forked project
requirements. An interesting side-effect of having multiple forks
is the ability to select between different evolution directions of the
code which is based on developers ﬁxing bugs in the code base.
However, the key issue that this decentralized form of information
is difﬁcult to analyze. In this study, we propose a visualization
to analyze active changes in fork repositories that have not been
merged back to the original project. Our visualization shows
code commit activities in multiple forks with highlight on bug ﬁx
commits in the history of forks. While the commit activity of each
repository is visualized similarly to the code frequency view of
GitHub, our view shows only commits unique to fork repositories.
To illustrate the effectiveness of our visualization, we have applied
our view to two use cases: identifying forks from a repository
no longer maintained, and identifying a bug ﬁx among forks. In
the ﬁrst case, we identify a fork of a suspended project named
Obfuscator-LLVM. Our view shows the original repository and
its most active fork that continue the development on the top. In
the second case, we identify a bug ﬁx in a fork of Clipy project.
Our view shows that the most active fork has its own bug ﬁxes;
we could easily identify a patch for the bug highlighted in the
view. As a new ideas paper, we then present our outline of three
research questions to spark real world use-cases and goals for
our visualization has the potential to uncover. A prototype of our
visualization is available at https://naist-se.github.io/vissoft2022/
Index Terms—software evolution, source code reuse, git diff

I. INTRODUCTION

Forking of free and open-source repositories has become
a popular practice in software development. There are two
reasons why developers create forks. The ﬁrst is so software
developers can contribute to an existing projects by creating
their own copy of a repository, then later send pull requests
to the original repository [2] (i.e., social forks). The second
reason is when software developers may create forks (i.e.,
hard forks) to release their own variant of the project that are
independently developed of the original project [11]. Some
hard forks are created to revive dead projects. There forks
are created as noncompetetive alternatives to the original
projects [16].

While forking provides a convenient way for developers
to introduce new features and ﬁx bugs, the decentralization
generates information that
is widespread and not easy to
process, analyze and summarize. For instance, St˘anciulescu

et al. [17] reported a case that the main repositry did not
include useful features shared in multiple forks. Hata et al. [3]
also reported that individual repositories modify cloned source
ﬁles in different ways for their own purposes. Ren et al. [12]
analyzed the duplicate development caused by unawareness
of activities in other forks. Finding useful changes in the
multitude of forks is extremely hard for the community
members [17].

Prior fork visualizations exist, but it is difﬁcult to compare
source code changes against
the whole set of forks. For
example, GitHub provides a network graph [1]. However,
the view does not work for a large number of forks as it
tries to show all forks recorded in GitHub [15]. Although
fork summary generation techniques [13], [15] have been
proposed to extract a list of features added to a fork, the users
still need to choose a small number of forks to be analyzed
by the methods. GitHub provides the function to view the
commit history of a single repository, but does not support
the comparison of multiple repositories.

In this study, we propose a visualization to provide an
overview of development activities in fork repositories. This is
so that users can analyze i) useful forks from revived projects,
ii) active hard forks including additional features and iii) bug
ﬁxes that have not been merged to the original project. To
automatically select a small number of forks, we measure the
number of unique commits in each fork. Our key idea is to
ﬁlter out noise (i.e., social forks or those not related to ﬁxing
bugs) in forked repositories [15]. We assume that hard forks
are likely to develop their versions by ﬁxing bugs. Hence, they
are more likely to have unique commits not included in other
forks.

We have implemented our visualization as a prototype; the
tool takes as input a GitHub repository URL and generates a
HTML page with an interactive plot. Users can interactively
check unique commits in active forks. As case studies, we have
used the view to analyze two groups of forks; the ﬁrst scenario
is to identify an active fork from an archived repository. The
second scenario is to identify a bug ﬁx in a fork that has not
been merged to the original project.

In the remainder of the paper, Section II explains our
visualization. Section III explains the two use case scenarios.
Section IV describes the current status and future work.

 
 
 
 
 
 
Fig. 1. An example zoomed in view for two forks. The size of the bubble indicates the number of added lines by the commit in a log scale. Note that green
is added code, while blue indicates a bug ﬁx.

II. OUR VISUALIZATION

B. Visual Designs

We propose a visualization of fork repositories to identify-
ing forks such that revive a dead project and/or include bug
ﬁxes that have not been merged back to the original project if
they exist. Our method takes as input a project repository R0
and its fork repositories R1, · · · , Rn, and provides an interac-
tive view to investigate the contents of the fork repositories.

A. Repository Selection

It is assumed that a popular repository tends to have a huge
number of forks. However, most of them are social forks. They
include a simple copy without source code changes and a
working copy whose changes have been merged to the original
repository. The remaining forks are hard forks introducing
their own changes. But many of them also become inactive
eventually [16]. To distinguish active hard forks from those
forks, we measure the number of divergent commits d(Ri)
for each fork repository deﬁned as follows:

d(Ri) = |Commits(Ri) \ Commits(R0)|

where Commits(R) represents a set of commits in all
branches recorded in the repository R. Our current implemen-
tation uses commit IDs to compare commits. It should be noted
that a pull request sent to R0 is represented by commits in a
branch whose name is the pull request ID in R0. Hence, code
changes in pull requests are excluded from d(Ri).

If a fork includes many unique source code changes that
have not been merged to the original repository, we consider
the fork as important for users. Suppose that the repositories
R1, · · · , Rn are sorted by the descending order of d(Ri). We
extract unique commits from each fork as follows:

U (Ri) = Commits(Ri) \

Commits(Rj)

(cid:91)

j<i

We selected the bubble chart as it depicts a time-series on
the horizontal axis. For the vertical axis, we placed the list
of repositories. Fig. 1 shows an example of our view for two
artiﬁcial repositories. In the view, the original repository R0
is always located at the top. Its fork repositories are listed
below. As active forks are more important, the order of fork
repositories is decided by d(Ri).

To easily identify the repositories, we show the GitHub
user name of the owner of the repository on the left side.
We use only the user name because most of forks use the
same repository name as the original repository. This is the
same choice as the GitHub network graph. On the right side,
there is a full name and link to the GitHub repository page.
To enable a user to quickly check whether the repository
includes a bug ﬁx or not, we also shows the number of bug
ﬁx commits in the repository. We detect bug ﬁx commits using
the heuristics that have been used in existing work [8], [14]. A
commit is regarded as bug ﬁx if it includes one of keywords
“fix”, “bug”, “error”, or “issue” and a number starting
with a “#” likely representing an issue ID on an issue tracking
system.

Each bubble represents a unique commit. The vertical posi-
tion indicates that the repository includes the unique commit.
The horizontal position indicates the timestamp of the commit.
The size of the bubble is the number of added lines of code.
We ignore the number of deleted lines because we assume that
commits just deleting code unlikely introduces a new feature.
To limit the size of a bubble, we use a logarithmic function.
To enable users to identify bug ﬁx commits, we use two
colors, green and blue, for bubbles. A green bubble represents
a regular commit because the GitHub code frequency view
uses green to show the number of added lines. A blue bubble
represents a bug ﬁx commit.

C. Interactivity

The constraint j < i is to remove commits in more active
forks. We do not use j (cid:54)= i because it may exclude commits
that are shared in multiple forks but not in the main repository.
If U (Ri) = φ, the repository is excluded from visualization.
In the repository selection step, we prefer the number of
commits to the total number of added lines of code of commits.
This is because the number of changed lines is affected by
non-essential changes such as source code layout [7].

Unfortunately, we are unable to depict the interactive fea-
tures in the paper. For interactive purposes, we enable users
to ﬁlter bug ﬁx commits in the view. A user can see a commit
message by hovering on a bubble. Furthermore, clicking on
a bubble opens the commit page on GitHub so that a user
can see actual source code changes performed by the commit.
Upon acceptance, we plan to release an online interactive
demonstration for readers to explore.

Fig. 2. Case 1: Visualization of the Obfuscator-LLVM project. This ﬁgure shows only the top 3 repositories of the view due to space limitation.

D. Implementation

We have implemented our prototype comprising two com-
ponents: analyzer and visualizer. The analyzer component
takes as input a GitHub repository URL specifying R0. The
tool obtains a list of fork repositories (R1, · · · , Rn) using
GitHub API. The list
includes not only direct forks but
also forks of forks. Then, we download all commit IDs and
messages in the repositories and computes d(Ri) and U (Ri)
for each repository. For each unique commit, we calculate the
number of added lines to source ﬁles as the change size using
the git command. As the command regards the change size
of a merge commit as zero, merge commits are excluded from
visualization. To extract the change size, the current version
of the tool makes local clones of fork repositories including
unique commits. While a user can scroll down a large view,
our implementation analyzes and shows only the top-10 forks
by default to reduce both the size of a view and the analysis
time. The analysis result is saved in a JSON format.

The visualizer component

is a graphical user interface
working on D3.js. It loads the JSON ﬁle generated by the
analyzer and then produces an interactive bubble chart in
the SVG graphic format that can be manipulated on a web
browser. The interactive view provides a ﬁltering feature to
show only bug-ﬁx commits. In addition, the view allows users
to specify a time period to be visualized.

III. CASE STUDIES

We now present two cases where our visualization can be
used to identify useful forks, with potential interest to the user.

A. Case 1. Identifying active fork repositories

In the ﬁrst case study, suppose that we need to search
for active forks of a repository that
is inactive by both
maintainers or contributors. The project obfuscator-llvm [5]
is a code obfuscation tool that works at source-code level
independently of the programming language and of the target
architecture. While it is dependent on (and works for) the
LLVM compilation suite [10], the ofﬁcial repository supports
only LLVM 3.3 through 4.0. The repository has 994 forks as
of June 2022. 66 out of 994 include at least one commit unique
to the fork repositories.

Fig. 2 shows our view of the project. The top repository
is the original repository. As indicated, the original repository

is no longer being updated. The second repository includes a
large number of unique commits. Unfortunately they are not
development activities of the owner; the repository imported
commits from its dependencies (i.e., LLVM 12) so that the
repository owner can release a precompiled binary1. The third
repository2 is the active repository that updates the obfuscation
tool to support LLVM 5 and later. The timeline shows that the
repository has continued the development as of 2022.

In addition to the active fork, we found several variants
in the view, although they are omitted from Fig. 2 due to
space limitation. The fourth repository3 has a unique branch
named dop-llvm; according to the ﬁrst commit message
on the branch,
the branch is for Dynamic Opaque Predi-
cate Obfuscator. Similarly, the ﬁfth repository4 has a branch
named data-flow-transformation. The branch in-
cludes many small commits within a short period. Although we
could not identify the usage of the version, the commit mes-
sages say that the branch is to implement pointer manipulation
and control-ﬂow obfuscation. The sixth repository5 imported
LLVM and changed build ﬁles. The seventh repository is
forked from the sixth repository and further changed the build
process. The repository releases LLVM Obfuscator Pass with
its own README ﬁle. It says that the fork does not require
origin LLVM codes for compiling6. The eighth repository
imported LLVM 9.0 to its llvm_9.0-dev branch7. The
branch is likely for debugging because the README ﬁle
on the branch describes the information of a bug including
problematic command line options and a log of the case.
The nineth repository has few commits to update for Apple
M18. The tenth repository is a cherry-picking repository that
imported only a certain pull request that has been merged to
the original repository9.

While analyzing 994 forks of the original repository using
the raw list of forks on GitHub are unrealistic, our view
enabled us to investigate only the most active forks. We

1https://github.com/hudjefa/obfuscator-llvm/releases/tag/v12.0.0
2https://github.com/heroims/obfuscator
3https://github.com/dinghaowu/obfuscator
4https://github.com/kaikj/obfuscator
5https://github.com/spelle/obfuscator
6https://github.com/RyanKung/obfuscator/blob/llvm-11/README.md
7https://github.com/Magic-King/obfuscator/tree/llvm_9.0-dev
8https://github.com/lemon4ex/obfuscator/commits/apple-llvm-20210628
9https://github.com/mbazaliy/obfuscator/commits/llvm-3.5

ﬁnd interesting changes in the active forks;
the clues to
understand the changes in those fork repositories are their
commit messages, branch names, and README ﬁles repre-
senting the intention of the fork owner. As our view shows
unique commits on the timeline, we could easily open the
corresponding web pages on GitHub. The commit web pages
including the branch names and change details helped us to
investigate changes performed by the fork owners.

version 1.2.1.616 that is different from the second repository.
The other repositories listed in the ﬁgure are old forks as
indicated in the timeline. They are forked around ﬁve years
ago and no longer maintained.

Key Finding: Using our visualization we are able to
identify forks that might have ﬁxed bugs of interest.
In this case, the original repository is no longer main-
tained anymore.

Key Finding: Using our visualization we are able to
identify the most active forks. After a deeper investiga-
tion, these active forks had interesting changes related
to the commit messages, branch names and README
ﬁles.

B. Case 2. Identifying a patch in a fork repository

In this example, consider the case of searching a repository
that has solved a particular problem. There is a repository of
tools to enhance the Mac clipboard function called Clipy10.
This program has been reported to have a problem that
prevents it from starting under certain conditions, but a fork
that solves this problem exists. The latest release from the
original repository is 1.2.1 on October 2018. The original
repository has updated dependent libraries but not ﬁxed any
recent issues. A hard fork by a user has ﬁxed many issues
and releases newer versions. 1.2.1211 on December 2021 is
available on the fork. The issue comments in the original
repository sometimes refer to the fork12.

Fig. 3 shows our view of the project. While the project
has 487 forks, the ﬁgure shows only the top-10 out of 61
forks including at least one unique commits. The top is the
original repository. The second repository is the active fork
that has ﬁxed many issues. Fig. 4 shows only the bug ﬁx
commits using the ﬁltering feature. Some blue bubbles having
the same horizontal position in the 2018-2019 period are the
same bug ﬁxes in the two repositories. They have different
commit IDs due to early unique commits in the fork. On the
other hand, some bug ﬁxes are available only in the fork. A
bug ﬁx commit in 202113 is an update for a launch problem
on Apple M1 processor14; the ﬁx in the fork appeared in an
issue discussion in the original repository15.

The view also shows that the other forks do not have their
own bug ﬁxing commits. For example, the third repository has
some recent unique commits but they are on a branch named
“feature/Search.” The commits are likely to introduce
its own feature. The fourth repository also changed code
related to search function according to the commit mes-
sages. The ﬁfth repository has branches including a keyword
personal-build. The repository releases its own patched

IV. CONCLUSION AND FUTURE OUTLOOK

As a new ideas paper, we propose a visualization as an
alternative to summarizing and selecting important information
for relevant forks. Through two case studies, we show how
our tool is able to detect any fork that is revived, and how
to identify the evolution directions which a certain bug is
being patched. On the other hand, these preliminary results
raise other questions that would be interesting to get feedback.
We acknowledge that the limitation of this study is that the
evaluation is incomplete. Future work is to improve the tool so
that it is scalable and useful. Although our view can show an
overview of active forks, a user still has to manually inspect
them one by one. We would like to investigate factors to
automatically identify active and useful forks, such as the
number of open issues, the number of pull requests to forks,
version numbers related to unique commits, or the timestamp
of the last commit. We also plan to conduct a comprehensive
empirical study to strengthen our claims.

Our goal is to foster discussion among the visualization
community that leads to collaborations between other research
groups to adopt, and expand our visualization idea. Hence, we
outline the following research questions that this study might
spark as follows:

• How can this visualization complement or compare to
using textual summarizing techniques? In future work,
integrating a summary generation technique for forks
[13], [15] would be effective to improve the usefulness
of the visualization.

• How can we use clone-and-own techniques to expand
from not only bug-ﬁxing, but other kinds of techniques
to evolve the code? We are also interested in clone-and-
own detection techniques such as [4], [6] to analyze forks
that are unrecorded in GitHub.

• Can we leverage maintainer or contributor information
(social data), to present some interesting evolution from
a socio-technical perspective? Similar to tracking the life
and death of software ecosystems [9], another direction
is taking human factors into account, e.g. analyzing how
forks are supported by the community.

10https://github.com/Clipy/Clipy
11https://github.com/ian4hu/Clipy/releases/tag/1.2.12
12https://github.com/Clipy/Clipy/issues/374#issuecomment-534025090
13https://github.com/ian4hu/Clipy/commit/d40ea4cf8
14https://github.com/ian4hu/Clipy/issues/57
15https://github.com/Clipy/Clipy/issues/430

ACKNOWLEDGMENT

This work is supported by JSPS KAKENHI Grant Numbers

JP20H05706 and JP18H04094.

16https://github.com/hgwr/Clipy/releases/tag/build-1.2.1.6

Fig. 3. Case 2: Visualization for the Clipy project

Fig. 4. Our view has a ﬁltering feature to show only bug ﬁx commits. Hovering on a commit shows that its commit message as tooltip. A click on the circle
opens its corresponding commit page on GitHub.

REFERENCES

[1] L. Dabbish, C. Stuart, J. Tsay, and J. Herbsleb, “Social coding in GitHub:
transparency and collaboration in an open software repository,” in the
ACM 2012 conference on Computer Supported Cooperative Work, Feb.
2012, pp. 1277–1286.

[2] G. Gousios, M. Pinzger, and A. v. Deursen, “An exploratory study of
the pull-based software development model,” in the 36th Intnl Conf. on
Software Engineering, May 2014, pp. 345–355.

[3] H. Hata, R. G. Kula, T. Ishio, and C. Treude, “Same File, Different
Changes: The Potential of Meta-Maintenance on GitHub,” in 2021
IEEE/ACM 43rd International Conference on Software Engineering,
May 2021, pp. 773–784.

[4] T. Ishio, Y. Sakaguchi, K. Ito, and K. Inoue, “Source File Set Search for
Clone-and-Own Reuse Analysis,” in 2017 IEEE/ACM 14th International
Conference on Mining Software Repositories, May 2017, pp. 257–268.
[5] P. Junod, J. Rinaldini, J. Wehrli, and J. Michielin, “Obfuscator-LLVM
– software protection for the masses,” in Proc. of the IEEE/ACM 1st
International Workshop on Software Protection, May 2015, pp. 3–9.
[6] N. Kawamitsu, T. Ishio, T. Kanda, R. G. Kula, C. De Roover, and K. In-
oue, “Identifying Source Code Reuse across Repositories Using LCS-
Based Source Code Similarity,” in Proc. of 2014 IEEE 14th International
Working Conference on Source Code Analysis and Manipulation, Sep.
2014, pp. 305–314.

[7] D. Kawrykow and M. P. Robillard, “Non-essential changes in version
histories,” in 2011 33rd International Conference on Software Engineer-
ing, May 2011, pp. 351–360.

[8] S. Kim, T. Zimmermann, E. J. Whitehead Jr., and A. Zeller, “Predicting
Faults from Cached History,” in the 29th International Conference on
Software Engineering, May 2007, pp. 489–498.

[9] R. G. Kula and G. Robles, Towards Engineering Free/Libre Open Source

Software (FLOSS) Ecosystems for Impact and Sustainability, July 2019,
ch. The Life and Death of Software Ecosystems, pp. 97–105.

[10] C. Lattner and V. Adve, “LLVM: a compilation framework for lifelong
program analysis and transformation,” in International Symposium on
Code Generation and Optimization, Feb. 2004, pp. 75–86.

[11] A. Rastogi and N. Nagappan, “Forking and the Sustainability of
the Developer Community ParticipationAn Empirical Investigation on
Outcomes and Reasons,” in Proc. of 2016 IEEE 23rd International
Conference on Software Analysis, Evolution, and Reengineering, vol. 1,
Mar. 2016, pp. 102–111.

[12] L. Ren, S. Zhou, C. Kästner, and A. W ˛asowski, “Identifying redundan-
cies in fork-based development,” in 2019 IEEE 26th International Con-
ference on Software Analysis, Evolution and Reengineering (SANER),
2019, pp. 230–241.

[13] Z. Zhang, X. Mao, C. Zhang, and Y. Lu, “ForkXplorer: an approach
of fork summary generation,” Frontiers of Computer Science, vol. 16,
no. 2, p. 162202, Oct. 2021.

[14] H. Zhong and Z. Su, “An empirical study on real bug ﬁxes,” in the
37th International Conference on Software Engineering - Volume 1, May
2015, pp. 913–923.

[15] S. Zhou, c. St˘anciulescu, O. Leßenich, Y. Xiong, A. W ˛asowski, and
the
C. Kästner, “Identifying features in forks,” in Proceedings of
40th International Conference on Software Engineering, ser. ICSE ’18.
New York, NY, USA: Association for Computing Machinery, 2018, p.
105–116. [Online]. Available: https://doi.org/10.1145/3180155.3180205
[16] S. Zhou, B. Vasilescu, and C. Kastner, “How has forking changed in
the last 20 years? a study of hard forks on GitHub,” in Proc. of the
ACM/IEEE 42nd International Conference on Software Engineering,
Jun. 2020, pp. 445–456.
¸Stefan St˘anciulescu, S. Schulze, and A. W ˛asowski, “Forked and in-
tegrated variants in an open-source ﬁrmware project,” in 2015 IEEE

[17]

International Conference on Software Maintenance and Evolution, Sep.
2015, pp. 151–160.

