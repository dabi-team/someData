To appear at the 2022 IEEE Computer Society Annual Symposium on VLSI – ISVLSI 2022.

Optimization of BDD-based
Approximation Error Metrics Calculations

Vojtech Mrazek
Brno University of Technology, Faculty of Information Technology
Brno, Czech Republic
mrazek@ﬁt.vutbr.cz

2
2
0
2

y
a
M
6

]

R
A
.
s
c
[

1
v
7
6
2
3
0
.
5
0
2
2
:
v
i
X
r
a

Abstract—Software methods introduced for automated design
of approximate implementations of arithmetic circuits rely on
fast and accurate evaluation of approximate candidate imple-
mentations. To accelerate the evaluation of circuit error, we
propose four novel algorithms for the exact worst-case and mean
absolute error analysis based on Binary Decision Diagrams. As
these algorithms do not compute any absolute values in the
characteristic function, which basically compares a candidate
approximate circuit with a golden circuit, the error evaluation is
signiﬁcantly faster than the standard BDD-based error analysis.
On average, the proposed algorithms are three times faster (in
some cases, 30 times faster) than the baseline for 8- to 32-bit
approximate adders. These results were obtained from more than
49 thousand runs with different conﬁgurations of the method.
The proposed error evaluation algorithms are available as an
open-source software https://github.com/ehw-ﬁt/bdd-evaluation.
calculation,

Index Terms—approximate

computing,

error

binary-decision diagrams

I. INTRODUCTION

Minimizing power consumption is one of the most signif-
icant objectives for current digital circuit design. In many
applications, such as image or signal processing, the users
are also often willing to accept certain errors if they are
accompanied by reduced power consumption or other im-
provements. This paradigm, called approximate computing [1],
systematically tries to ﬁnd the best trade-offs between the
quality of output and hardware parameters such as area, power
consumption, or latency. One of the most widely used methods
is replacing the standard arithmetic circuits with approximate
implementations [1]. The circuit approximation techniques can
be classiﬁed as manual (e.g., [2]) and automated (e.g., [3], [4]).
From a broader perspective, the automated methods usually
provide better trade-offs between the error and other circuit
parameters. These methods typically start with an exact circuit
and modify it using the following iterative scheme: (i) generate
candidate approximate circuits, (ii) evaluate these circuits,
and (iii) select the best candidate for the next iteration. As
many candidate circuits are usually generated, it is essential
to quickly analyze their error [4].

Let f : Bn → Bm be an n-input m-output Boolean function
that describes the correct functionality (the accurate function)
and f (cid:48) : Bn → Bm be an approximation of it with error ε,
formally ∀x ∈ Bn : f (x) ≈ f (cid:48)(x); f (cid:48)(x) = f (x) + ε(x). If
there is no analytical model of the error function ε (which
can, in fact, be easily derived only for a few approximation
techniques such as bit-truncation), the error of f (cid:48) has to be
determined for all possible input combinations, i.e. |Bn| = 2n.

The evaluation time grows exponentially with n, but can
effectively be reduced by parallel circuit simulation [5] or
formal veriﬁcation techniques such as SAT, BDDs or algebraic
solvers [4], [6].

The formal veriﬁcation techniques achieve very good per-
formance for the error evaluation [4]. However, some of them
do not scale for some types of circuits or error metrics. For
example, SAT solving is applicable for determining the worst-
case error but useless for the mean error. BDD-based methods
are not applicable to structurally complex circuits such as
multipliers.

In this paper, we deal with efﬁcient error analysis methods
using BDDs. The calculation is based on the so-called charac-
teristic function |f −f (cid:48)| represented as a Boolean equation [7].
Keszocze [6] introduced a technique that does not need to
compute the absolute value which represents the performance
bottleneck. On the other hand, this algorithm assumes that
∀x : f (cid:48)(x) ≤ f (x) and can produce only such solutions
that satisfy this assumption. However,
this assumption is
not realistic is general-purpose approximation engines (such
as [4]) in which arbitrary candidate approximations must be
evaluated.

This paper aims to propose new algorithms for the exact
error analysis that further simplify the characteristic function
without postulating any speciﬁc constraint on the evaluated
function f (cid:48).

We propose four error calculation algorithms (two for
the worst-case error and two for the mean-absolute error).
These algorithms omit the absolute value calculation while
the average error evaluation time is reduced 3× compared to
the standard BDD-based approach. Moreover, they also reduce
the memory complexity, and in some cases, the speedup is
10 − 30×.

The proposed error analysis algorithms were employed in a
circuit approximation method based on CGP, which is inspired
in [4]. In our experiments, the error evaluation was executed
for billions of adders. The resulting approximate adders exhibit
better trade-offs than the approximate adders published in the
EvoApprox library [8]. All approximate implementations are
available for download (TBD). The C++ implementation of
the error analysis algorithms is provided as an open-source
software https://github.com/ehw-ﬁt/bdd-evaluation.

II. APPROXIMATE COMPUTING

Approximate computing aims to introduce an error into
a software or hardware implementation. It can be done on

 
 
 
 
 
 
various levels: algorithmic, functional, or physical. We focus
on the functional approximation (i.e., modiﬁcation of Boolean
functions describing the logic behavior of digital circuits) of
arithmetic circuits that may be used as basic building blocks
in complex systems.

A. Error metrics

There are various application-independent error metrics
used in the literature [2]. The worst-case arithmetic error,
sometimes denoted as error magnitude or error signiﬁcance,
is deﬁned as

ewce(f, f (cid:48)) = max
∀x∈Bn

|int(f (x)) − int(f (cid:48)(x))|,

(1)

where int(x) represents a function int : Bm → Z returning an
integer value of the m-bit binary vector x. Typically, a natural
unsigned binary representation is considered, i.e. int(x) =
(cid:80)m
i=1 2i · xi. The worst-case error represents the fundamental
metric that is useful to guarantee that the approximate output
differs from the correct output by at most the error bound e.
The average-case arithmetic error (also known as mean
absolute error) is deﬁned as the sum of absolute differences
in magnitude between the original and approximate circuit,
averaged over all inputs:

emae(f, f (cid:48)) = 2−n (cid:88)
∀x∈Bn

|int(f (x)) − int(f (cid:48)(x))|.

(2)

Note that

the values produced by the “absolute” error
metrics emae and ewce can be very high. Hence, these values
can be expressed relatively to the output range, using division
by 2m − 1, i.e. the maximal output value.

In the metric error formulas, the enumeration of all possible
input vectors is present. For n greater than approx. 24, it is
not feasible to enumerate Bn in a reasonable time even when
a highly parallel circuit simulator is employed.

This issue can partly be eliminated by utilizing a formal
veriﬁcation approach for the error calculation. Formal tech-
niques typically construct a virtual miter circuit to compute the
characteristic function. Reduced Ordered Binary Decision Di-
agrams (BDD) or SAT solving-based methods were employed
in the area of approximate circuits. ROBDDs are suitable for
the formal error analysis of less complex circuits (such as
adders) for which the BDD does not grow exponentially with
n. SAT solving can effectively handle determining the worst-
case error for up to 32-bit multipliers but does not provide
suitable results for other error metrics. Details of BDDs are
elaborated in Section II-C.

B. Automated design techniques

The automated approximation algorithms iteratively modify
a given accurate circuit to achieve the best trade-off between
the error and other circuit parameters. The most recent algo-
rithms use various approaches for circuit representation and
error evaluation. Soeken et al. proposed an algorithm that
directly modiﬁes the BDD [6], [7]. This algorithm satisﬁes the
assumption of the fast error evaluation, but its design space
is limited. Another approach is to use some internal circuit

representation. Hashemi et al. divided the original circuit into
subcircuits and approximated each of them. Finally, the error
was evaluated for many candidate solutions [3]. A speciﬁc
internal circuit representation is used in Cartesian Genetic
Programming (CGP) [4] which is a heuristic design-space
exploration algorithm. Candidate circuits are represented as
directed acyclic graphs in a ﬁxed grid of nodes. The algorithm
randomly changes the connections between nodes and the
nodes’ functions. It uses the following ﬁtness function for a
given error metric e (e.g., emae or ewce) and the acceptable
error threshold τ

(cid:40)

F(f (cid:48)) =

size(f (cid:48))
∞

if e(|f − f (cid:48)|) ≤ τ
otherwise

.

(3)

This algorithm starts with an accurate solution and reduces its
size while keeping the error constraint satisﬁed. The result of
the search is the smallest circuit satisfying the constraint τ .

C. BDDs

This work exploits the Reduced Ordered Binary Decision
Diagrams (ROBDDs, also referred to as BDDs). ROBDD
is a canonical rooted acyclic graph-based representation of
a Boolean function, where each node represents either an
input variable or terminal node, and the edges represent the
value assignment. There are two terminal nodes – true and
false. ROBDDs have been traditionally used to solve the
equivalence checking problem due to their canonical property
(i.e., the ROBDDs of two logic functions are isomorphic if the
functions are functionally equivalent and the input variables
have the same order). The tools, developed for constructing
and manipulating ROBDDs, can exactly answer the following
questions: (1) whether a variable (signal) in the circuit is
satisﬁable, i.e., whether an input vector exists which generates
a true value of the signal; and (2) the probability that a selected
variable is true. Although these questions are answered fast
(by ﬁnding some paths in the ROBDD), the construction of the
ROBDD is not trivial, and in some circuits such as multipliers,
the ROBDDs grow exponentially with n.

Since there is no signiﬁcant difference in the performance of
major tools operating with ROBDDs [9], we selected BuDDy
and CUDD tools, which also support dynamic variables re-
ordering for evaluation. In these tools,
the BDD node is
represented by a structure. Starting with an input node, these
tools allow adding new nodes by applying logical operations
(¬, ∧, ∨, ⊕, . . . ) to two existing nodes. Therefore, one can
construct an arbitrary Boolean function.

1) Conventions and notations: Henceforth, we denote an
n-input m-output Boolean function as f . Without
loss of
generality the functions can be represented by the BDDs
f = (fn, fn−1, . . . f2, f1) where each output bit fi is a BDD
node. For integer functions, fsign denotes the sign bit fn.

For one-output function (i.e., BDD node) the tools can

provide the probability that a selected node fi is true

#SAT(fi) = 2−n · |{x : fi(x) = True}|

and a Boolean value SAT(fi) answering whether the node fi
becomes true for any input.

We also implemented two arithmetic Boolean functions as
BDDs. The Addition function add(a, b) creates a Ripple-
carry adder with output nodes of functions a and b as inputs.
Similarly, subtraction subtract(a, b) is constructed in the same
way, but the b outputs are inverted, and the carry input is set.
Note that the input vectors must be (sign-) extended to handle
both signed and unsigned variants of a and b.

2) Existing algorithms (BASELINE): In [7], Soeken et al.
proposed the error analysis based on calculating characteristic
function r = |f (x) − f (cid:48)(x)|. For the resulting vector r they
calculate the maximal (wce) and average (mae) values. Their
best-performing algorithm is based on a binary search (Alg.
1). Firstly, the values are subtracted (ln. 1), which is captured
by a signed function ε, and the absolute value is obtained
(unsigned r). The absolute value has to deal with the two’s
complement and increments the value if the result is negative
(ln. 4). The binary search starts with the MSB, computes the
worst-case error wce and also the function µ : µ(x) = 1 if
and only if r(x) = wce.

Algorithm 1: Baseline WCE calculation using two’s
complement

: Functions f and f (cid:48) as ROBDDs

Input
Output: Worst-case error (wce)

// subtract results

// absolute value

// two’s complement

1 ε ← subtract(f, f (cid:48)) ;
2 for i ← 1 to |ε| − 1 do
3

ri ← εi ⊕ εsign ;
4 r ← add(r, {εsign}) ;
5 µ ← True;
6 wce ← 0;
7 for i ← |r| to 1 do // binary search
8

if SAT(µ ∧ ri) then

9

10

wce ← wce + 2i−1;
µ ← µ ∧ ri;

11 return wce;

The average (mean absolute error) is calculated (Alg. 2)
with the same characteristic function r. The weighted sum
of positive-bit probabilities is computed. Finally, the sum is
divided by 2n while n is the number of inputs of functions f
and f (cid:48).

Keszocze showed that the subtraction and absolute value
calculation are the most time-consuming parts of the evalua-
tion [6],. He also proposed a fast algorithm for determining
the MAE without the characteristic function. This algorithm
needs to satisfy a condition that ∀x : f (cid:48)(x) ≤ f (x). Automated
iterative approximation algorithms typically cannot satisfy this
condition, therefore, we are not able to employ this algorithm
in a CGP-based approximation engine.

III. PROPOSED MAE AND WCE CALCULATION
We present improvements of the baseline error evaluation
algorithms to omit the absolute value calculation. We pro-

Algorithm 2: Baseline MAE calculation using two’s
complement
Input
Output: Mean absolute error (mae)

: Functions f and f (cid:48) as ROBDDs

1 ε ← subtract(f, f (cid:48)) ;
2 for i ← 1 to |ε| − 1 do
3

ri ← εi ⊕ εsign ;
4 r ← add(r, {εsign}) ;
5 mae ← 0;
6 for i ← 1 to |r| do
7

// subtract results

// absolute value

// two’s complement

mae ← mae + 2i−1 · #SAT(ri) ;

8 return mae ;

pose two approaches — one replaces the absolute value by
approximation in ones’ complement, the second one handles
the positive and negative branches separately.

A. Ones’ complement (ONES’)

In the baseline Algorithms 1,2 (ln. 4), the increment of r
vector by a sign bit is needless. In the proposed algorithm
(Alg. 3), we omitted this addition. We obtain the exact wce
for positive r; and wce decreased by 1 if the maximal error is
in the negative r. Because this condition is expressed in the
MSB node of ε, the error can be compensated (ln. 10 - 11).

Algorithm 3: Proposed WCE calculation using ones’
complement
Input
Output: Worst-case error (wce)

: Functions f and f (cid:48) as ROBDDs

1 ε ← subtract(f, f (cid:48)) ;
2 for i ← 1 to |ε| − 1 do
3

ri ← εi ⊕ εsign ;

// subtract results

// absolute value

4 µ ← True;
5 wce ← 0;
6 for i ← |r| to 1 do // binary search
7

if SAT(µ ∧ ri) then

8

9

wce ← wce + 2i−1;
µ ← µ ∧ ri;

10 if SAT(µ ∧ εsign) then // complement corr.
11

wce ← wce + 1 ;

12 return wce;

A similar approach is used in the average error calculation
(Alg. 4). The error by 1 can be corrected by adding the
proportion of negative numbers ε, i.e. #SAT(εsign) (ln. 7).

B. Omitting the absolute values (NOABS)

The second proposed approach exploits the fact that we can
build two BDD trees for the resulting vector ε — one for the
positive part ¬εsign ∧εi and one for the negative part εsign ∧εi.
The worst-case error calculation is shown in Alg. 5. Since
the absolute error is calculated using XOR operations which

Algorithm 4: Proposed MAE calculation using ones’
complement

: Functions f and f (cid:48) as ROBDDs

Input
Output: Mean absolute error (mae)

1 ε ← subtract(f, f (cid:48)) ;
2 for i ← 1 to |ε| − 1 do
3

ri ← εi ⊕ εsign ;

// subtract results

// absolute value

4 mae ← 0;
5 for i ← 1 to |r| do
6

mae ← mae + 2i−1 · #SAT(ri) ;

7 mae ← mae + #SAT(εsign) ;
8 return mae ;

Algorithm 6: Proposed MAE calculation without the
absolute value (NOABS)
Input
Output: Mean absolute error (mae)

: Functions f and f (cid:48) as ROBDDs

// subtract results

1 ε ← subtract(f, f (cid:48)) ;
2 mae ← 0;
3 for i ← 1 to |ε| − 1 do
4

mae ← mae + 2i−1 · #SAT(εi ∧ ¬εsign) ;
mae ← mae + 2i−1 · #SAT(¬εi ∧ εsign) ;

5

// correction

6 mae ← mae + #SAT(εsign) ;
7 return mae ;

// complement corr.

make the resulting BDDs more complex, the WCE value is
calculated directly from the signed result of subtraction ε.
If the sign bit is negative, a binary search of the maximal
value is performed as wcep. On the other hand, the negative
part is transformed to searching the minimal value wcen.
The subtraction result ε is expressed as two’s complement.
Therefore, the negative wcen is incremented by 1, and the
maximal value is returned (ln. 14).

Algorithm 5: Proposed WCE calculation without the
absolute value (NOABS)

: Functions f and f (cid:48) as ROBDDs

Input
Output: Worst-case error (wce)

1 ε ← subtract(f, f (cid:48)) ;
/* positive error

// subtract results
*/

noabs) transformed from the BDD function to mathematical
corrections.

IV. EXPERIMENTS

A. Experimental setup

To evaluate the quality of the proposed error calculation al-
gorithms, we employed them in the CGP-based approximation
of adders (both signed and unsigned). The overall scheme of
the approximation engine is given in Figure 1. In the search
loop, tens of thousands of candidate approximate adders were
generated and their errors calculated. We collected all results
and analyzed them statistically.

2 µp ← ¬εsign;
3 wcep ← 0;
4 for i ← |ε| − 1 to 1 do // binary search
5

if SAT(µp ∧ εi) then

wcep ← wcep + 2i−1;
µp ← µp ∧ εi;

8 µn ← εsign;
9 wcen ← 0;
10 for i ← |ε| − 1 to 1 do // binary search
11

if SAT(µn ∧ ¬(cid:15)i) then

wcen ← wcen + 2i−1;
µn ← µn ∧ ¬εi;

6

7

12

13

/* negative error

*/

14 return max(wcep, wcen + 1);

The mean average error calculation (Alg. 6) employs two
BDD trees — for the positive part anded with the unset sign
bit ¬εsign and for the negative inverted anded with a set sign
bit εsign. The negative part introduces an error by one, which
can easily be compensated by adding the probability at line 6.
All the proposed algorithms follow the scheme of WCE and
MAE calculation introduced by Soeken et al. [7] However, the
absolute value calculation is partially (in ones’) or totally (in

Fig. 1. Experimental setup of CGP-based search engine employing the
proposed error calculation algorithms.

The key component of the calculation is the BDD library,
which provides an abstraction to BDD trees. It implements the
functions deciding the satisﬁability SAT(d) and calculating
the probability #SAT(d). We compared two state-of-the-art
libraries — BuDDy and CuDD. The cache memory of BuDDy
was set to 107 accordingly to the documentation. Similarly,
default size of CuDD cache (218 = 262, 144) was used.

The maximal allowed MAE and WCE errors that are the
key parameters of CGP exponentially vary from 2 to 0.2 ·
2n+1 (20% of the output range). As a CGP seed, three adder
types are considered: carry-look-ahead, carry-skip, and ripple-
carry adders, unsigned and signed versions, for bit-widths 8
to 32 (of each operand). Since the CGP approximation is a

stochastic approach, 5 independent runs are executed for each
setup. Finally, the best adders are synthesized using Synopsys
Design Compiler with 45 nm technology.

All experiments were executed on a computer cluster with
nodes having 2 CPU Intel Xeon E5-2670 2,6 GHz, 16-core,
20 MB cache, and 64 GB RAM. Each run was a single thread
(with 2 GB of memory), and 32 runs were executed on the
node. In total, 49,716 independent runs were performed to
evaluate the above-mentioned setups.

B. CGP Approximation with BDD-based error evaluation

Table I shows that BuDDy library leads to a faster error
the baseline algorithm for
evaluations than CuDD, except
32-bit adders. The results are aggregated over all the error
thresholds. On average, CuDD is 2x slower than BuDDy. The
addition of 8 inputs (n) leads to a 4-20x slow down for both
libraries.

TABLE I
THE AVERAGE EVALUATION TIME [S] FOR DIFFERENT BDD LIBRARIES

Error

Bit-width
n/2

Baseline

Ones’

Noabs

BuDDy

CuDD

BuDDy

CuDD

BuDDy

CuDD

MAE

WCE

8
12
16
20
24
32

8
12
16
20
24
32

0.0001
0.0009
0.0044
0.1818
1.4713
7.3208

0.0001
0.0007
0.0038
0.0446
0.8281
5.4822

0.0003
0.0017
0.0084
0.2066
1.8158
6.1494

0.0002
0.0010
0.0051
0.0910
0.9924
4.1673

0.0001
0.0003
0.0013
0.0063
0.2438
3.5416

0.0001
0.0002
0.0011
0.0055
0.1044
2.2896

0.0002
0.0009
0.0039
0.0223
0.6416
4.7556

0.0001
0.0005
0.0023
0.0114
0.1896
2.8677

0.0001
0.0004
0.0017
0.0113
0.3537
4.1580

0.0001
0.0002
0.0009
0.0038
0.0267
2.0623

0.0003
0.0013
0.0056
0.1041
0.8289
4.7180

0.0001
0.0005
0.0018
0.0072
0.0657
2.2698

Henceforth, only the BuDDy library is used in the following
experiments. Table II shows the average evaluation time for
different error evaluation algorithms. Both proposed imple-
mentations achieve signiﬁcant speedup compared to the base-
line implementation. On the average, the ones’ implementation
performs better for MAE calculation, but WCE calculation is
executed faster without the absolute value (noabs). We can see
an enormous speedup for 20-bit and 24-bit adders for MAE
and WCE, respectively. This is caused by the fact that the
proposed algorithms produce smaller BDD trees that can ﬁt
the cache. Increasing the cache size could move this peek for
larger sizes, but we are also limited by CPU caches and RAM.
We separately analyzed the impact of signed and unsigned
versions of adders. The signed adders need the subtractor in
the characteristic function to be extended by one bit. This
extension slows down the error calculation by 3 - 17% for the
proposed algorithms.

C. Error characterisation of 16-bit adders

We analyzed the behavior of the proposed error calculation
algorithms in the design of 16-bit approximate adders in
greater detail. The average evaluation time depends on the
selected error analysis algorithm, error threshold, and the seed
circuit. Figure 2 shows the average evaluation time for differ-
ent error thresholds. The slowest evaluations are in the middle

TABLE II
AN AVERAGE EVALUATION TIME AND SPEEDUP WITH BUDDY LIBRARY

Error

Bit-width
n/2

Evaluation time [s]

Speedup

baseline

ones’

noabs

ones’

noabs

MAE

WCE

8
12
16
20
24
32

8
12
16
20
24
32

0.0001
0.0009
0.0044
0.1818
1.4713
7.3208

0.0001
0.0007
0.0038
0.0446
0.8281
5.4822

0.0001
0.0003
0.0013
0.0063
0.2438
3.5416

0.0001
0.0002
0.0011
0.0055
0.1044
2.2896

0.0001
0.0004
0.0017
0.0113
0.3537
4.1580

0.0001
0.0002
0.0009
0.0038
0.0267
2.0623

1.91×
2.58×
2.21×
3.11×
2.55×
3.47×
28.76× 16.06×
4.16×
6.03×
1.76×
2.07×

2.48×
2.37×
3.19×
2.84×
3.33×
4.20×
8.13× 11.89×
7.93× 31.04×
2.66×
2.39×

part of thresholds regardless of the evaluation algorithm. It
is caused by the following: (i) For small
the
BDDs representing f (cid:48)s are not much different from the golden
circuits f .(ii) For large thresholds, BDDs representing f (cid:48)s
are simpliﬁed (because of the approximation), and their sizes
are reduced. We can see the proposed algorithms achieved
signiﬁcantly faster evaluations than the baseline.

thresholds,

Fig. 2. Effect of the threshold value τ on the average evaluation time in
CGP-based approximations.

One of the inputs of the approximation algorithm is the
seed circuit. This circuit acts as a parent while all candidate
solutions are derived using a chain of mutations. We use this
circuit as a golden circuit r in the characteristic function ε =
f − f (cid:48). Interestingly, the speed is not related to the size of
the circuit (CLA:171, CSkA: 129, and RCA: 77 nodes, signed
versions have two additional nodes). Although the RCA is the
smallest one (and produces more approximated circuits), the
evaluation speed is lower.

We analyzed the error-metric evaluation for all resulting

2371427661322636561311262265541310826215Worst case error threshold0246810121416Evaluation time [ms]2371427661322636561311262265541310826215Mean absolute error threshold05101520Evaluation time [ms]baselineones'noabsdesigned larger approximate adders, including the signed and
unsigned variants that are not included in the library. These
circuits were introduced to the new version of EvoApproxLib.

Fig. 5. Comparison of synthesized circuits designed with CGP with two
ﬁtness functions using proposed error calculations.

V. CONCLUSION

We proposed new BDD-based algorithms for the fast error
evaluation of approximate adders and subtractors. Compared
with the baseline implementation, these algorithms reduced the
evaluation time 3x times on average. Moreover, they do not
need any assumption about f (cid:48). These algorithms enabled us to
accelerate the approximate circuit design process. Our future
work will be devoted to adapting the principle for different
arithmetic error metrics and the application of the proposed
circuits.

Acknowledgement This work has been supported the Czech

Science Foundation grant (GJ20-02328Y).

REFERENCES

[1] J. Han and M. Orshansky, “Approximate computing: An emerging
paradigm for energy-efﬁcient design,” in 2013 18th IEEE European Test
Symposium (ETS), 2013, pp. 1–6.

[2] H. Jiang, C. Liu, L. Liu, F. Lombardi, and J. Han, “A review, classiﬁca-
tion, and comparative evaluation of approximate arithmetic circuits,” J.
Emerg. Technol. Comput. Syst., vol. 13, no. 4, Aug. 2017.

[3] S. Hashemi, H. Tann, and S. Reda, “Blasys: approximate logic synthesis

using boolean matrix factorization,” in DAC’18.

IEEE, 2018.

[4] M. ˇCeˇska, J. Matyaˇs et al., “Approximating complex arithmetic circuits
with formal error guarantees: 32-bit multipliers accomplished,” in IC-
CAD’17, 2017, pp. 416–423.

[5] R. Hrbacek and L. Sekanina, “Towards highly optimized cartesian genetic
programming: From sequential via simd and thread to massive parallel
implementation,” in GECCO ’14, 2014.

[6] O. Keszocze, “Bdd-based error metric analysis, computation and opti-

mization,” IEEE Access, vol. 10, pp. 14 013–14 028, 2022.

[7] M. Soeken, D. Große, A. Chandrasekharan, and R. Drechsler, “Bdd
minimization for approximate computing,” Jan 2016, pp. 474–479.
[8] V. Mrazek, R. Hrbacek et al., “Evoapprox8b: Library of approximate
adders and multipliers for circuit design and benchmarking of approxi-
mation methods,” in DATE’17.

[9] T. van Dijk, E. M. Hahn et al., “A comparative study of bdd packages
for probabilistic symbolic model checking,” in Dependable Software
Engineering: Theories, Tools, and Applications, 2015, pp. 35–51.

Fig. 3. Effect of selected seed and golden model implementation for the
average evaluation speed

approximate implementations of 16-bit adders using consid-
ered BDD-based algorithms. Figure 4 illustrates the execution
time and the total number of created BDD nodes for three
main parts of the error evaluation procedure. The part named
loading represents transforming the netlist of functions f and
f (cid:48) into BDDs. The second part, called subtracting, consists
of the ripple-carry subtractor creation. The last part, called
calculating, includes building BDDs that represent the cal-
culation of the absolute value and the ﬁnal evaluation. We
can see that the ﬁrst part
is negligible in contrast to the
subtracting and calculating parts. The baseline implementation
has an enormous proportion of the calculating part, but the
number of BDD nodes is relatively smaller. However, the
overall evaluation time roughly correlates with the number of
BDD nodes.

Fig. 4. Time spent and number of created nodes in three steps of the error
calculation algorithms. Error probability eep [7] is included for complexity
illustration.

D. Synthesis and comparison to SoA

The resulting approximate adders are synthesized to obtain
hardware parameters (we focus on energy). Both error metrics
are evaluated. Figure 5 shows trade-offs between ewce and
the energy. In addition to the area estimation in the ﬁtness
function (eq. 3), we also used CGP with the area-delay
product (ADP) in the ﬁtness function. However, this setup
did not improve the results in terms of energy. The resulting
approximate adders outperform relevant approximate adders
published in the EvoApproxLib library [8]). Moreover, we

baselineones'noabs01234567Evaluation time [ms]MAEbaselineones'noabsWCECLA signedCLA unsignedCSkA signedCSkA unsignedRCA signedRCA unsignedEPbaselineMAEbaselineMAEones'MAEnoabsWCEbaselineWCEones'WCEnoabs0.0000.0250.0500.075Time [s]loadingsubtractingcalculatingEPbaselineMAEbaselineMAEones'MAEnoabsWCEbaselineWCEones'WCEnoabs0246BDD nodes×104loadingsubtractingcalculating10110010110205101520Energy [1012 J]8-bit unsigned addersProposed (Area)Proposed (Area×delay)EvoApproxLib103102101100101102Worst-case error [%]020406080Energy [1012 J]16-bit unsigned addersProposed (Area)Proposed (Area×delay)EvoApproxLib