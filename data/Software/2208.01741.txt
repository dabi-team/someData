Requirements Engineering in Open Innovation:
A Research Agenda

Johan Linåker
Lund University, Sweden
Johan.Linaker@cs.lth.se

Björn Regnell
Lund University, Sweden
Bjorn.Regnell@cs.lth.se

Hussan Munir
Lund University, Sweden
Hussan.Munir@cs.lth.se

2
2
0
2

l
u
J

1
3

]
E
S
.
s
c
[

1
v
1
4
7
1
0
.
8
0
2
2
:
v
i
X
r
a

ABSTRACT
In recent years Open Innovation (OI) has gained much at-
tention and made ﬁrms aware that they need to consider
the open environment surrounding them. To facilitate this
shift Requirements Engineering (RE) needs to be adapted
in order to manage the increase and complexity of new re-
quirements sources as well as networks of stakeholders. In
response we build on and advance an earlier proposed soft-
ware engineering framework for fostering OI, focusing on
stakeholder management, when to open up, and prioritiza-
tion and release planning. Literature in open source RE
is contrasted against recent ﬁndings of OI in software en-
gineering to establish a current view of the area. Based on
the synthesized ﬁndings we propose a research agenda within
the areas under focus, along with a framing-model to help
researchers frame and break down their research questions
to consider the diﬀerent angles implied by the OI model.

Categories and Subject Descriptors
D.2.1 [Software Engineering]: Requirements

Keywords
Software engineering, Requirements engineering, Open in-
novation, Open source, Stakeholder management, Prioriti-
zation, Release planning

1.

INTRODUCTION

Due to the eruption of new ways in communicating and
lowered barriers for
working distributed, along with e.g.
startups and increased access to knowledge sources, soft-
ware producing ﬁrms now need to explore and exploit their
outside surroundings to a higher degree than before to com-
plement their internal innovation capabilities [1]. This phe-
nomenon is captured by the paradigm of Open Innovation
(OI), deﬁned by Chesbrough [1] as “a paradigm that assumes
that ﬁrms can and should use external ideas as well as in-
ternal ideas, and internal and external paths to market, as

they look to advance their technology”. The OI model in-
corporates multiple applications.
In Software Engineering
(SE) the most common example probably is Open Source
Software (OSS) [16], which has been around for decades
and proven to be a useful and important building block in
product strategies among software producing ﬁrms. The
emergence of the OI paradigm has highlighted this fact even
more in the sense that OSS may be used to better leverage
and advance ﬁrms’ internal technical and innovation capi-
tal [24]. Requirements Engineering (RE), which is pivotal
for a software development project to succeed, needs to take
the changes implied by OI in regard and adapt accordingly,
e.g.
to consider how ﬁrms should reach out, explore and
manage the new potential stakeholders, users and customers,
for which requirements can be elicited from or outsourced to.
In this paper we build on and advance the proposed SE
framework for fostering OI by Wnuk and Runeson [26]. We
also propose a research agenda with several research ques-
tions regarding RE practices in relation to OI and how these
could or should be adapted in order to enable for and opti-
mize the outcome for ﬁrms using an OI strategy. The pro-
posed research agenda suggests a number of research direc-
tions in diﬀerent sub-disciplines of RE. The research ques-
tions elaborated on in this paper are in line with the proposal
by Wnuk et al. [26] to “. . . focus on release-planning, stake-
holder analysis, trade-oﬀ between eﬀort (cost) and value and
the degree of innovation in candidate features needed in evolv-
ing systems, to take signiﬁcant future market shares in open
innovation software development”, and our main conjecture
is that these trade-oﬀs constitute essential and hard prob-
lems of future software RE, and these problems are further
complicated in an OI context.

In section two, the methodology is presented in short. In
section three, synthesized results from OSS RE and OI liter-
ature are presented. In section four a model is presented to
help frame RE in an OSS and OI setting along with sugges-
tions for future research. The paper is concluded in section
ﬁve.

2. METHODOLOGY

Based on the research direction within RE in OI suggested
by Wnuk et al. [26], we conducted a literature survey of RE
practices in OSS within the areas of stakeholder identiﬁca-
tion and management, contribution strategies and opening
up criteria, and prioritization and release planning. These
results were compared and contrasted against recent ﬁnd-
ings of OI in SE reported by Munir et al. [16]. Findings
where synthesized in the categories Stakeholder manage-

 
 
 
 
 
 
ment, When to open up, and Prioritization and release plan-
ning. Building further, we constructed a research agenda
within the areas under focus, along with a framing-model
to help researchers frame and break down their research
questions to consider the diﬀerent angles implied by the OI
model.

3. CONTRASTING LITERATURE

On the basis of our literature survey, we elaborate and
contrast between RE in OI and OSS in regards to the areas of
Stakeholder management, When to open up a ﬁrms software,
and Prioritization and Release planning.

3.1 Stakeholder Management

We refer to the deﬁnition of Glinz and Wieringa [7] and
deﬁne a stakeholder as “. . . a person or organization who in-
ﬂuences a system’s requirements or who is impacted by that
system”, with system meaning an OSS project. With stake-
holder management we consider both identiﬁcation of the
stakeholders and analysis of their interest or intent in an
OSS project and its community. This is a problematic area
due to that the open environment implied by OI allows for
an inﬂux of new and earlier unknown stakeholders into a
ﬁrm’s formerly closed domain. Staying aware of who else
are present in a community and what their intents are may
therefore prove diﬃcult. Ignorance may constitute a risk and
jeopardize a ﬁrm’s stake in the OSS. Also, with an aware-
ness, opportunities could arise as stakeholders with align-
ing intents and complementary competences may be found.
Another issue besides awareness, is managing conﬂicts and
diﬀerent needs of the stakeholders [16]. As they may have
clashing intents with business stakes involved, creating a
common vision becomes troublesome [2].
In such cases it
may be beneﬁcial to know who are aligned and those to per-
suade, as some stakeholders could be unknown and reside
silent until confronted.

Stakeholder management may hence be considered as an
important area to master for a ﬁrm to adapt itself to an OSS
community, as well as to gain and maintain a proﬁtable po-
sition with sustainable inﬂuence in the community’s gover-
nance structure [2]. Consequently, it may further be consid-
ered an enabling factor for ﬁrms to more eﬀectively be able
to perform other RE practices such as elicitation, prioritiza-
tion and release planning in relation to the community [7].
In an OSS community stakeholders may be identiﬁed by
the natural means they communicate, both electronically
(e.g. mailing lists, forums, IRC) and in-person (e.g. con-
ferences, hackathons). For the former type, a multitude of
quantitative analytical methods exists to identify present
stakeholders (e.g. [13, 12]). Tools also exist, which allow for
further analysis to be performed on the earlier mentioned
software repositories, but also on other types, e.g. source
code repositories and issue trackers [19]. However, quanti-
tative analysis can only bring you to a certain point. To get
a clearer view, a qualitative analysis could be performed as
well, either by observing, engaging or a combination of them
both. Regards should be taken to both the electronic and
in-person communication channels. As social events and live
meetings are becoming increasingly popular, ﬁrms may need
to consider distributing their presence oﬄine as well [21].
Some stakeholders may not be as vocal online as they are
oﬄine, why these could risk going unnoticed. Furthermore,
by showing one self and giving notice on one’s intents and

knowledge, this may attract some stakeholders to come out
of the shadows.

Diﬀerent kinds of stakeholders may be found in diﬀerent
communication channels, Knauss et al. [11] describe how re-
quirements are communicated between stakeholders in two
diﬀerent ﬂows in an open-commercial software ecosystem,
which also transfers to an OSS community. First, an emer-
gent requirements ﬂow captures requirements as developers
and users ﬁnd new ways of using the software and present
these on a work-item level, much as how e.g. prototypes and
other informalisms are used as post-hoc assertions in OSS
RE [20]. Secondly, a strategic ﬂow is used to communicate
the business goals and strategies of the diﬀerent stakehold-
ers.

For analyzing the stakeholders’ intents similar methodolo-
gies may be applied as for identiﬁcation. Regarding quanti-
tative methods, Gonzalez-Barahona et al. [8] describes how
patterns may be found in how other stakeholders contribute
(e.g.
feature implementations, bug-ﬁxes, discussions), how
the projects generals stance is on certain topics, and how
stakeholders work together (e.g. on implementation, decision-
making). This information may then be used to analyze
their intents and strategies (e.g. what functionality they
value most, in what direction they are striving towards, how
committed they are), and to ﬁnd potential collaboration op-
portunities. Modeling the relationships between the stake-
holders may be a further step to help create a better picture.
Fricker [6] suggests how relations amongst stakeholders in
software ecosystems may be modeled as requirements value
chains, whilst Damien et al. [3] suggests using social network
analysis for stakeholders in distributed development.

3.2 When to Open Up

Reasons for opening up and releasing a software project,
or parts of it, could be many, and often of a strategic na-
ture [2]. On an upper management level, such decisions may
be rare, and with time to analyze. In cases where ﬁrms do
continuous development and exploitation of OSS, the ques-
tion can be more common. Such lower level decisions may
not have the time needed to be processed through traditional
ﬂows in large software producing ﬁrms. The pace of RE may
vary between OSS communities, but in instances where the
RE process is of a just-in-time character decisions may need
to made quick. For ﬁrms having a maintainer’s role, feature
requests from the OSS community could be reoccurring and
developers and lower level managers need to know when they
should implement such requests, reject or leave be for others
in the community to act on. In the role of a contributor, this
includes when to implement certain feature requests posted
in the community, as well as if and when they should con-
tribute their internal feature implementations. A feature’s
diﬀerentiating value needs to be weighed against the cost of
maintaining it internally, e.g. though patching each release
of the OSS [25, 23]. Structuring such strategies would help
developers prioritize and spend resources on implementing
features which has the highest business value to the ﬁrm [25].
If not, this could be a notable cost, but also a strategic loss
if diﬀerentiating parts are wrongly revealed.

Through selective revealing [9], certain parts of the code
could be broken out and contributed. Separating the parts
of diﬀerentiating value may however still prove diﬃcult [25].
One way of tackling this issue would be to provide certain
parts as enablers, while the innovative features are kept in-

ternal [24]. Another strategy could be to disclose the tech-
nology, but under such circumstances that it will not be of
value for competitors, e.g. through licensing [24]. Related
questions include when in the product and technology life-
cycle this should be done [22], and how to make it happen
practically as the packaging of the selected part or feature
must be accepted by the community and integrate well with
the architecture and other functionality. Often features are
analyzed and judged by the community based on a prototype
or ﬁnished implementation [20]. This again could be com-
municated in several ways, e.g. electronically or live at social
community gatherings [21]. Certain situations may require
pro-active judgment and contribution. In an example where
a ﬁrm wants a community to head in a certain direction and
add support for a certain functionality or environment [2],
the right way to go could be to incrementally contribute fea-
tures building up to the end-goal. Again comes the question
on how this should be done practically.

Hence, such practices and guidelines on how and when
ﬁrms should contribute or receive contributions need to be
integrated into the RE processes in order to streamline de-
velopment and keep it aligned with the ﬁrms business goals
and long-term strategy. Thereby, selective revealing or con-
tribution strategies [16, 25, 23] may link together the strate-
gic intents of the ﬁrm with its lower level RE processes to
better exploit its engagement with the OSS community and
maximize the innovation outcome.

3.3 Prioritization and Release Planning

Prioritization is an RE practice where the selection of re-
quirements for a certain release is decided. Release planning
is about packaging the right features into the right prod-
uct, in time with as high satisfaction among the stakehold-
ers as possible.
In OI this area has had limited coverage
with some exceptions [25, 17] compared to the ﬁeld of OSS
(e.g. [14, 27, 15, 5]). Michlmayr et al. [15] describes how re-
lease strategies used by OSS communities can be classiﬁed
into feature-based and time-based. The former performs a
release when a set goals have been fulﬁlled, e.g. a certain
set of features has been implemented. The latter performs
releases according to a preset schedule. Hybrid versions has
also been reported [27]. Literature has however favored the
time-based strategy [14, 27]. With ﬁxed release dates and
intervals, ﬁrms can better adapt their internal plans so that
additional patchwork and diﬀerentiating features may be
added in time for product shipment to market [14]. Other
issues reported by Michlmayr et al. [14], which could be re-
frained with a time-based release strategy, are rushed imple-
mentations, workload accumulation, outdated software and
delayed releases.

In regards to OI, Nayebi et al. [17] proposes a decision sup-
port methodology called Analytical Open Innovation, which
considers information gathered through crowdsourcing from
customers and stakeholders, and analyzes their expectations.
This information can help adapt product composition and
release planning to predicted trends and anticipated user
expectations. Wnuk et al. [25] reports on how release plan-
ning is conceived as more challenging in an OI context. One
reason is that innovative features included in the normal
requirements ﬂow are killed because they do not meet dead-
lines and sharp acceptance criteria imposed by the market.
A separate ﬂow for innovative requirements is proposed so
that innovative requirements are able to mature in their own

pace. Once mature enough they would then be able to enter
the normal and more ”harsher” requirements ﬂow. Further
reason for release planning being extra complicated is due to
the lack of control over the process used in the OSS commu-
nities [25]. An example describes how it would have been
a better decision do adopt the OSS and sell it with mini-
mum changes, rather than have spent resources on adding
diﬀerentiating features, which is a common challenge in OSS
release planning [14]. This could imply a need for ﬁrms to
better understand the release processes used by OSS com-
munities, as well as to propagate for more structured and
predictable processes.

Utilizing the overﬂow of information and access to new
data sources constitutes an opportunity to be exploited, as
exempliﬁed by the analytical approach suggested by Nayebi
et al. [17]. The factor of a requirements innovativeness and
how this should be regarded in the prioritization and release
planning processes is another example where this could be
proﬁtable. Establishing metrics that regards a feature’s in-
novation capability, output and performance [4] would be
helpful inputs to optimize the innovation outcome through
the prioritization and release planning processes. There are
frameworks that considers innovativeness in the release plan-
ning process (e.g. [18, 10]) but the area still lacks thoroughly
investigated and validated models, especially in regards to
the OI context.

4. FUTURE RESEARCH

Based on the contrasting between RE in OSS and OI in
the previous section, we formulate suggestions for future re-
search directions. To further frame and break down ques-
tions suggested, and help researchers consider the many an-
gles implied OI, we begin by deﬁning a framing-model.

The OI model is often illustrated by a funnel [1], here
presented in Figure 1. The funnel itself represents the ﬁrm
internally, which in a SE context we deﬁne as the software
development process. This may in turn be illustrated either
as an iterative process, or just as one single development cy-
cle (e.g. from RE, design, implementation, test, to release).
The funnel is full of holes representing openings between the
ﬁrm’s development process and the open environment. The
arrows going in and out represent transactions and exchange
of knowledge between the two. This may for example con-
stitute of feature requests or bug reports, design proposals
or feature road maps, feature implementations or bug ﬁxes,
test cases, complete sets of code as in plugins, components,
platforms or even products. From a more speciﬁc RE per-
spective this includes activities such as elicitation, prioritiza-
tion and release planning, which are performed interactively
between the internal and the open environment.

Firstly, based on Figure 1, we make a distinction between
an internal and external RE process. The internal concerns
the normal process connected to a ﬁrm’s internal product de-
velopment. The external concerns the one used in an OSS
community with which the ﬁrm interacts. This distinction
makes it clearer to illustrate how e.g. an internal release pro-
cess have to consider the external release process of an OSS
community, how the external stakeholder management may
diﬀer from the internal, or how parts of the internal software
may be revealed to an existing or new OSS community, as
well as sourced externally from an OSS community.

A second distinction can be made between practices in-
ferred from the OI and OSS RE literature respectively. In

4.1 Stakeholder Management

RQ A1 How to identify new and stay aware of present stake-
holders in an open environment (e.g. [13, 12, 21])?

RQ A2 How to continuously prioritize and judge impor-
tance of the stakeholders in an open environment
(e.g. [8])?

RQ A3 How to manage, adapt and act in shifting gover-
nance structures in an open environment with mul-
tiple stakeholders and ﬂuctuating partnership types
(e.g. feature-by-feature, project, and product)?

RQ A4 How to leverage the requirements ﬂows to position
oneself strategically in an open environment [11]?

4.2 When to Open Up

RQ B1 How to determine what artifacts (e.g. ideas, spill-
over requirements, IP, plug-ins, products) to open
up and to what degree (e.g. selective revealing [9])?

RQ B2 How to determine when the right moment is to open

up the artifact for external involvement [22]?

RQ B3 How to determine the way in which an artifact is
co-develop, outsource) and

to be developed (e.g.
with/by whom (e.g. single partners, groups or ecosys-
tems) [22]?

4.3 Prioritization and Release Planning

RQ C1 What release strategy is optimal under what condi-
tions, and how should related practices and tools be
adopted [15]?

RQ C2 How should care be taken to involvement of other

corporate stakeholders [14]?

RQ C3 How should the internal release processes be tailored
to ﬁt with the OSS community’s in regards to in-
novative requirements? Speciﬁcally, how would a
separate requirements ﬂow ﬁt and be structured in
such a context [25]?

RQ C4 How should risks and dependencies of features be

managed and considered in an open environment [25]?

RQ C5 How should innovativeness be considered as a deci-

sion factor (e.g. [18, 10])?

RQ C6 What other decision factors may be considered rel-

evant?

5. CONCLUSIONS

OI makes up a central opportunity as well as a challenge
with which SE practices has yet to catch up, in order to
fully accommodate and maximize the innovation outcome
that ﬁrms aspire to achieve [26]. This includes RE, which
is pivotal for a software development project to succeed. In
response we build on and advance the proposed SE frame-
work for fostering OI by Wnuk and Runeson [26], focusing
on stakeholder management, when to open up, and priori-
tization and release planning. After performing a literature
survey on OSS RE, we contrast it against recent ﬁnding

Figure 1: The OI model illustrated with interactions be-
tween the ﬁrm (funnel) and its external collaborative actors.
Adopted from Chesbrough [1].

OSS RE literature, the scope has mainly been on a tech-
nical level with a starting points from seminal reports by
e.g. Scacchi [20] and Erenkrantz [5]. In the OI literature,
RE has had limited coverage with a few notable exceptions
focused mainly on release planning [25, 17]. Focus has in-
stead been on how ﬁrms on a strategic level may inﬂuence
or connect itself to OSS communities, and how OSS should
be leveraged from a strategic point of view and integrated in
diﬀerent kinds of business models [24, 16]. Similar reports
on the governance structures, how these function and should
be managed are also reported in the gray area between OSS
and OI. This distinction opens up for an interpretation of
RE in OSS and OI on two levels, a strategic and an opera-
tional.

Finally, a third distinction can be made in regards to
which direction the internal and external RE processes in-
teract. A ﬁrm may e.g.
reveal or outsource a feature to
the OSS community (inside-out process), acquire a feature
from the OSS community (outside-in process), or collabo-
rate jointly with the OSS community on a feature (coupled
process) [1].

These three distinctions are presented together in Table 1.
Although all aspects of the framing-model may not be ap-
plicable in each case, it oﬀers a tool to help angle and break
down research questions to a possibly more concrete level.
E.g. how a ﬁrm should adapt its release process towards
an OSS community may be angled from the internal release
process and the external release process used by the OSS
community. Broken down further in regards to direction,
we can separate between how and when a ﬁrm should adopt
a new release, or contribute a feature to get it included in a
certain release. And furthermore, we can distinct between
how the ﬁrm should align these processes with their business
goals and communicate on a strategic level, against techni-
cally managing dependencies and risks of features internally
and externally on an operational level.

Table 1: Conceptualization of RE in the ﬁeld of OSS and OI.

Internal
RE process

Direction

External
RE process

Strategic level
Operational level

The suggested research questions below should be further

viewed from the framing-model presented in Table 1.

of OI in SE [16] to establish a current view of the area.
Based on the synthesized ﬁndings we propose a research
agenda along with framing-model to help researchers frame
and break down their research questions to consider the dif-
ferent angles implied by the OI model.

We acknowledge that the literature survey may not give
a complete view of the current state of RE in OSS and OI.
However, we believe it can still explain current practices to
a valuable extent and provide a valid basis for our proposed
research agenda. Further, the proposed framing-model and
research agenda are not to be seen as exhaustive but rather
show suggested directions and help researchers break new
territory in the ﬁeld of RE in OI and OSS.

6. REFERENCES
[1] H. W. Chesbrough. Open innovation: The new

imperative for creating and proﬁting from technology.
Harvard Business Press, 2003.

[2] L. Dahlander and M. Magnusson. How do ﬁrms make

use of open source communities? Long Range
Planning, 41(6):629–649, 2008.

[3] D. Damian, S. Marczak, and I. Kwan. Collaboration
patterns and the impact of distance on awareness in
requirements-centred social networks. In 15th IEEE
International Requirements Engineering Conference,
pages 59–68. IEEE, 2007.

[4] H. Edison, N. Bin Ali, and R. Torkar. Towards

innovation measurement in the software industry.
Journal of Systems and Software, 86(5):1390–1407,
2013.

[5] J. R. Erenkrantz. Release management within open
source projects. Proceedings of the 3rd Open Source
Software DevelopmentWorkshop, pages 51–55, 2003.

[6] S. Fricker. Requirements value chains: Stakeholder

management and requirements engineering in software
ecosystems. In Requirements Engineering: Foundation
for Software Quality, pages 60–66. Springer, 2010.

[7] M. Glinz and R. J. Wieringa. Guest editors’
introduction: Stakeholders in requirements
engineering. IEEE Software, 24(2):18–20, 2007.
[8] J. M. Gonzalez-Barahona, D. Izquierdo-Cortazar,
S. Maﬀulli, and G. Robles. Understanding how
companies interact with free software communities.
IEEE software, (5):38–45, 2013.

[9] J. Henkel, S. Sch¨oberl, and O. Alexy. The emergence
of openness: How and why ﬁrms adopt selective
revealing in open innovation. Research Policy,
43(5):879–890, 2014.

[10] M. Khurum and S. Barney. Innovative features
selection using real options theory. In Third
International Workshop on Software Product
Management, pages 11–14. IEEE, 2009.

[11] E. Knauss, D. Damian, A. Knauss, and A. Borici.

Openness and requirements: Opportunities and
tradeoﬀs in software ecosystems. In 22nd IEEE
International Requirements Engineering Conference,
pages 213–222. IEEE, 2014.

[12] P. Laurent and J. Cleland-Huang. Lessons learned
from open source projects for facilitating online
requirements processes. In Requirements Engineering:
Foundation for Software Quality, pages 240–255.
Springer, 2009.

[13] S. L. Lim, D. Damian, and A. Finkelstein.

Stakesource2.0: using social networks of stakeholders
to identify and prioritise requirements. In Proceedings
of the 33rd international conference on Software
engineering, pages 1022–1024. ACM, 2011.

[14] M. Michlmayr, B. Fitzgerald, and K.-J. Stol. Why and
how should open source projects adopt time-based
releases? IEEE Software, 32(2):55–63, 2015.
[15] M. Michlmayr, F. Hunt, and D. Probert. Release

management in free software projects: Practices and
problems. In Open Source Development, Adoption and
Innovation, pages 295–300. Springer, 2007.

[16] H. Munir, K. Wnuk, and P. Runeson. Open innovation
in software engineering: A systematic mapping study.
Empirical Software Engineering, 2015.

[17] M. Nayebi and G. Ruhe. An open innovation approach
in support of product release decisions. In Proceedings
of the 7th International Workshop on Cooperative and
Human Aspects of Software Engineering, pages 64–71.
ACM, 2014.

[18] B. Regnell. Are my features innovative enough? a

multi-variable innovation strategy model proposal. In
Requirements Engineering: Foundation for Software
Quality, pages 60–66. Springer, 2012.
[19] G. Robles, J. M. Gonz´alez-Barahona,

D. Izquierdo-Cortazar, and I. Herraiz. Tools for the
study of the usual data sources found in libre software
projects. International Journal of Open Source
Software and Processes, 1(1):24–45, 2009.
[20] W. Scacchi. Understanding the requirements for

developing open source software systems. IEE
Proceedings-Software, 149(1):24–39, 2002.
[21] W. Stam. When does community participation

enhance the performance of open source software
companies? Research Policy, 38(8):1288–1299, 2009.

[22] F. Van der Linden, B. Lundell, and P. Marttiin.

Commodiﬁcation of industrial software: A case for
open source. Software, IEEE, 26(4):77–83, 2009.
[23] K. Ven and H. Mannaert. Challenges and strategies in

the use of open source software by independent
software vendors. Information and Software
Technology, 50(9):991–1002, 2008.

[24] J. West. How open is open enough?: Melding

proprietary and open source platform strategies.
Research policy, 32(7):1259–1285, 2003.

[25] K. Wnuk, D. Pfahl, D. Callele, and E.-A. Karlsson.
How can open source software development help
requirements management gain the potential of open
innovation: an exploratory study. In Proceedings of the
ACM-IEEE international symposium on Empirical
software engineering and measurement, pages 271–280.
ACM, 2012.

[26] K. Wnuk and P. Runeson. Engineering open

innovation–towards a framework for fostering open
innovation. In Software Business. From Physical
Products to Software Services and Solutions, pages
48–59. Springer, 2013.

[27] H. K. Wright and D. E. Perry. Subversion 1.5: A case
study in open source release mismanagement. In ICSE
Workshop on Emerging Trends in Free/Libre/Open
Source Software Research and Development, pages
13–18. IEEE, 2009.

