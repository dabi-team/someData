Using Neural Networks by Modelling Semi-Active
Shock Absorber

Moritz Zink
Technische Universit¨at Ilmenau
Ilmenau, Germany
moritzzink@gmail.com

Martin Schiele
Technische Universit¨at Ilmenau
Ilmenau, Germany
martin.schiele@tu-ilmenau.de

Valentin Ivanov
Technische Universit¨at Ilmenau
Ilmenau, Germany
valentin.ivanov@tu-ilmenau.de

2
2
0
2

l
u
J

9
1

]

Y
S
.
s
s
e
e
[

1
v
1
4
1
9
0
.
7
0
2
2
:
v
i
X
r
a

Abstract—A permanently increasing number of on-board au-
tomotive control systems requires new approaches to their digital
mapping that improves functionality in terms of adaptability
and robustness as well as enables their easier on-line software
update. As it can be concluded from many recent studies,
various methods applying neural networks (NN) can be good
candidates for relevant digital twin (DT) tools in automotive
control system design, for example, for controller parameter-
ization and condition monitoring. However, the NN-based DT
has strong requirements to an adequate amount of data to be
used in training and design. In this regard, the paper presents
an approach, which demonstrates how the regression tasks can
be efﬁciently handled by the modeling of a semi-active shock
absorber within the DT framework. The approach is based on
the adaptation of time series augmentation techniques to the
stationary data that increases the variance of the latter. Such a
solution gives a background to elaborate further data engineering
methods for the data preparation of sophisticated databases.

Index Terms—Neural Network Regression, Deep Learning,

Vehicle Dynamics, Data Augmentation, Data Cleaning

I. MOTIVATION

The chassis engineering of modern vehicles considers semi-
active and active suspensions as an efﬁcient
tool for the
improvement of the ride comfort and driving safety. Analysis
of relevant research literature demonstrates that the topic of the
suspension control is well elaborated from the methodological
viewpoint and is characterized by variety of the available
control techniques [1], [2], [3], [4], [5]. In a general case, the
suspension control has a goal to achieve an optimum state,
where requirements both to the road holding and ride quality
will be sufﬁciently fulﬁlled. This well-known trade-off can be
illustrated with Fig. 1.

The (semi-)active suspension design implies sophisticated
strategies requiring a thorough parameterization of the con-
troller with considerable computational and time efforts. In
this regard, a certain support can be provided by using artiﬁcial
intelligence (AI) tools that can be conﬁrmed with results of
some recent studies, e.g. [6], [7], [8], [9]. The presented
work will demonstrate the use of AI technique based on the
reinforcement learning (RL).

Fig. 1. Trade-off of the suspension design (adapted from the project OWHEEL
https://cordis.europa.eu/project/id/872907).

Fig. 2. Principle of Reinforcement Learning.

training of the agent on the real automotive system can be
difﬁcult due to the following potential reasons:

• risk of accident;
• very long test duration;
• limited data availability for the agent without previous

performing of huge number of driving maneuvers.

The RL uses concept of an agent, which can operate au-
tonomously in an environment and can learn from its feedback
[10], Fig. 2. Therefore, an adequate environment must be
provided for the agent. It should be noted that the real-time

To ensure an efﬁcient way for providing training samples
to the agent, the training environment can be built based on
a digital twin with NN [11]. Although it is possible to use
a NN for the controller design directly [12], an advanced

 
 
 
 
 
 
approach can include elements of an autonomous self-learning
control system [13]. In this way, the system behavior of the
shock absorber can de facto be emulated ofﬂine. In addition,
digital twins can represent derived quantities that can only
be deﬁned with additional measuring systems, which are not
available on mass-production cars. This procedure has been
used in the presented study to directly detect critical wheel
load ﬂuctuations and to prevent them at an early stage through
targeted adaptation of the shock absorber characteristic curve.

II. MODELING SHOCK ABSORBER USING A NEURAL
NETWORK

Various principles are available for the technical real-
ization of semi-active and active shock absorbers, such as
electromechanical, electro-hydraulic, magnetorheological and
electrorheological systems. The absorber analyzed in this study
corresponds to the design outlined in [3]. In the considered
case, the absorber realizes the damping force FD as function
of the absorber velocity ˙∆Displ via the pressure modulation of
a proportional valve, which changes the ﬂow resistance and,
therefore, the damping parameter kD:

FD = kD · f ( ˙∆Displ).

(1)

In the present system, the principle of the adjustable pro-
portional valve was used, which can be continuously varied
by the applying control current.

For the simulation purposes, the generic environment from
Fig. 2 has to be replaced by a data-driven model of the shock
absorber, a so-called digital twin, which mirrors exactly the
behavior of the technical system. At that a neural network
is used as modeling tool. If the shock absorber operation is
represented as an unknown function f (x) = y, where x is for
the input variables of the system ”shock absorber” as a vector
and y is for the change of the rod position ∆Displacement,
then the model must approximate this function:

f (x) = ∆Displacement.

(2)

The input vector x is provided to the model

to form
examples in a sequence S together with the correlating output
variable, which are then fed into the network [9]:

S = [(x1, y1), ..., (xm, ym)] ∈ (X × Y )m.

(3)

In the considered case, the input variable vector is described

by the following entries:

• Vehicle velocity, V , [km/h];
• Current, I, [A];
• Rod position, Displacement, [mm];.
The goal is now to represent the unknown function by the
input variables just mentioned by the neural network, which
are also explained on Fig. 3:

Fig. 3.

Input Parameters for Prediction Procedure.

Fig. 4. Neural Network Architecture for the Regression Task.

simple but sufﬁcient for the purposes of the study. To build
a regression model, fully connected neurons can be used,
which are then cascaded into layers and build a multi-layer
perceptron (MLP). For a continuous value to be predicted,
only one neuron is used in the output layer, making ˆy ∈ R,
Fig. 4.

III. DATA

Because only one semi-active shock absorber is being
discussed, a quarter vehicle model is basically sufﬁcient for
the purposes of this study. At that the vehicle pitch and roll
dynamics is not considered. The data provision for training the
corresponding neural network has been done on the basis of
real driving tests on the experimental vehicle with parameters
from Table I. The vehicle has been instrumented with the
necessary sensors to measure all relevant variables as the
current and the displacement. The vehicle velocity estimator
has also been included for mapping the previously deﬁned
variables from (4).

TABLE I
VEHICLE SPECIFICATION

Vehicle type
Curb weight
Tires
Wheel base
Track width

all-wheel-drive sport utility vehicle (SUV)
2275 kg
235/55 R19
2660 mm
1625 mm

f (V, I, Displacement) ≈ ∆Displacement = ˆy.

(4)

Although there are many complex architectures and ways
the presented case is relatively

to build neural networks,

During the road tests the vehicle was driven over a ﬁxed
obstacle, Fig. 5, with the variation of the shock absorber
current and the vehicle velocity. In addition, a test was carried

out in a stationary position, in which the force was transferred
to the vehicle body at a constant current. The table outlining
the test program is given in Appendix. After recording the
data, a scaling (5) is performed to transfer all the variables to
a range of values of W = [0, 1], following the approach from
[12]. This step is required to ensure a more stable training of
the model [14].

xscaled =

x − xmin
xmax − xmin

.

(5)

Fig. 7. Shock Absorber Reaction after Obstacle Was Hit.

IV. INDEXING AND AUGMENTATION RESULTS

It can be identiﬁed from Fig. 6 and Fig. 7 that about
165,000 data points were collected. However, the most of them
are without any information content, as they simply ﬂuctuate
around a constant value. This is due to the very high sampling
rate of the sensor system of 1000 Hz, which could not be
changed in the stored vehicle model. With these data, it is
impossible to obtain meaningful results of the model: because
of the dominance of the noise, only its mean value would
be learned. As the absolute values must not be changed, the
application of a moving average is not a sensible alternative
since a compression of the raw data inﬂuences it to a not
inconsiderable extent.

To address the mentioned problems, an approach is pro-
posed to extract relevant, meaningful features. For this pur-
pose, the ”Indexing” procedure has been developed. A pro-
prietary ﬁltering process is being developed for this purpose.
Only those data were selected, which also have the necessary
i.e., for which the ∆Displ value lies
information content,
above/below a certain limit. Afterwards the index of these
output y-data is being stored. The input variables (x-data) with
the same index are selected and all others were deleted. This
way a data set can be generated without containing any empty
information. This ensures, if the generalization is sufﬁciently
good, that the model can be interpolated between the highest
and lowest data points. However, after applying ”Indexing”
procedure, there are too few data points left to train that would
lead to extreme overﬁtting during the training, Fig. 8.

To initially increase the amount of data and to main-
tain the relative signiﬁcance,
the technique of so-called
”Data Augmentation” has been used. This usually involves
making geometric or non-geometric changes to images or
extending time series data using various techniques [15]. At
this point it was decided, inspired by images and time series,
to add a Gaussian noise to the data to increase the variance
of these:

p (x) =

√

1
2πσ2

e− (x − µ)2
2σ2

.

(6)

Fig. 5. Driving Test with Obstacle.

To get a better understanding of the inherent data values,
the original data can be found feature-wise in the Appendix.
Fig. 6 shows a clearly noisy image of the previously scaled
data. Furthermore, Fig. 7 shows for one particular experiment
what happens in the moment when the obstacle is hit at the
speciﬁc velocity with the selected current (Fig. 7 is the red
marking on Fig. 6). The approach to apply the processing
steps is discussed next.

Fig. 6. Scaled Noisy Data.

histogram of the available data and to perform an ”oversam-
pling” based on the class of values, which are most frequently
represented in the data set where the underrepresented exam-
ples are added to the data set more often. This approach is
chosen to feed uniformly all data for model training. This
ensures that all values are selected with the same prediction
probability, and the model does not act in a biased manner.

Fig. 10 and Fig. 11 highlight this approach, and Fig. 12 is
now showing the ﬁnalized train data set. Note: In Fig. 11 no
oversampling was performed for a range of values (see red
marking), since no data below a certain limit was available
in the driving mode. The values close to 0 result from the
stationary test.

Fig. 8. Cleaned Data by Indexing.

In 6 the parameter µ represents the mean value and σ the
standard deviation, with the values for µ=0 and σ=0.05 chosen
in the experiments. This noise was used and applied to the
original data set. Subsequently, two resulting data sets (original
and augmented) were merged. The data available after this
procedure are shown in Fig. 9.

Fig. 10. Non-oversampled Data Histogram (corresponding to Fig. 9).

Fig. 9. Cleaned and Augmented Data.

V. OVERSAMPLING AND REGRESSION TASKS

An unbalanced data set often leads to poor results both in
classiﬁcation and regression tasks, because the most frequently
occurring classes are highly overrepresented and thus, ﬁrst,
are fed to the model more often during training and, second,
attempts are made to reduce the error with respect to the most
frequently occurring class [16].

However, the probability distribution of the values of the
training data do not need to correspond to those in the ”real”
world. For regression tasks in the technical environment, where
each state is to be approached about the same number of times,
the aim is to have a data set as balanced as possible.

While there are some established approaches for unbalanced
classiﬁcation problems (SMOTE, ClusterCentroids etc.), the
selection of the procedures for solving regression problems is
a non trivial task. At this point it was decided to compute a

Fig. 11. Oversampled Data Histogram (analog to Fig. 9).

VI. TRAINING RESULTS

Further the training results are discussed in relation to the
prediction of the change of the piston rod position as the target
value, Fig. 13.

Fig. 12. Completely Prepared Data Set.

Fig. 14. Test Results with Complete Preparation.

TABLE II
STATISTICAL RESULTS FOR FIG. 10

R2 M SE M AE
0.05
0.94

0.01

only the augmentation method is removed, the result is being
deteriorated, Fig. 15, Table IV. Without any pre-processing
strategy, no meaningful mapping of the data course can be
guaranteed Fig. 16, Table V.

TABLE III
STATISTICAL RESULTS FOR FIG. 14

R2 M SE M AE
0.13
0.65

0.03

TABLE IV
STATISTICAL RESULTS FOR FIG. 15

R2 M SE M AE
0.16
0.50

0.04

VII. DISCUSSION / CONCLUSIONS

For data-driven approaches, high quality of the data is essen-
tial to ensure a valid result of the model. Especially with few
data, it is highly relevant to keep the model complexity rather
low (Fig. 4). Otherwise, there is a risk of overﬁtting, which
then implies advanced regularization techniques (Dropout, L2-
Norm, Batch Normalization etc.). It further increases the num-
ber of hyperparameters within the model [17], [18]. Hence,
instead of using the approach that a complex model is always
needed for complex data, a sensible and well-considered pre-
processing strategy is also crucial for neural networks.

It was shown in this study that the developed approach to
data preparation is sufﬁcient even for sophisticated regression
tasks. At this point it should be noted that a more complex

Fig. 13. Explanation of Target Value.

The data are now used to train the network from Fig. 4.

The test for previously unseen data leads to Fig. 14.

The correlating dimensionless values that quantify the
model quality are shown in Table II and consist of the Mean
Squared Error MSE (7), the Mean Absolute Error MAE (8)
and the R2-Value (9). Note: Although the R2 value is generally
not a suitable metric for evaluating a non-linear regression, it
can provide information on the comparability of the results,
therefore it was decided to include this parameter for validation
purposes.

M SE =

1
N

N
(cid:88)

i=1

(cid:16)
Yi − ˆYl

(cid:17)2

.

M AE =

1
N

N
(cid:88)

i=1

(cid:12)
(cid:12)Yi − ˆYl
(cid:12)

(cid:12)
(cid:12)
(cid:12) .

R2 = 1 −

(cid:16)

(cid:17)2

(cid:80)N

i=1
(cid:80)N

Yi − ˆYl
i=1 (Yi − µ )2 .

(7)

(8)

(9)

It can be seen that without oversampling the quality of
the prediction decreases signiﬁcantly, Fig. 14, Table III. If

TABLE V
STATISTICAL RESULTS FOR FIG. 13

R2 M SE M AE
0.22
0.00

0.08

model could not always achieve better results. Furthermore,
the proposed method is suitable to generate digital twins,
which represent the desired system behavior sufﬁciently accu-
rate. The generated digital twin can be used in a further work
to reﬂect the behavior of the shock absorber accurately as a
training environment for the agent, where an optimal control
strategy with high driving dynamics and good ride comfort
can be applied by varying the current by the agent within the
shock absorber.

In addition, the model can also be used for active suspension
controller parameterization, since the representation of the real
system is more accurately in this way than by conventional
models. A pre-simulation is also conceivable, for example,
to investigate the shock absorber behavior in a protected
environment in the event of an accident. Furthermore, real-
time (condition-) monitoring of the shock absorber functions
is also possible by comparing the behavior of the digital twin
to the physical shock absorber. If this deviates from each other
for some cases, this can be an indication of (i) a malfunction
and therefore a damage on the shock absorber or (ii) critical
wear.

APPENDIX

TABLE VI
TEST PROGRAM

Testrun
1
2
3
4
5
6
7
8
9
10
11
12
13
14

Current [A]
0.4
1
1.2
1.5
0.4
1
1.2
1.5
0.4
1
1.2
1.5
0.4
1.6 (max. current)

Velocity [km/h]
10
10
10
10
15
15
15
15
20
20
20
20
0 (standing still)
25

REFERENCES

[1] Savaresi, S.M., Poussot-Vassal, C., Spelta, C., Sename, O. and Dugard,
L., 2010. Semi-active suspension control design for vehicles. Elsevier.
[2] Sun, W., Gao, H. and Shi, P., 2020. Advanced control for vehicle active
suspension systems (Vol. 204). Berlin/Heidelberg, Germany: Springer
International Publishing.

[3] Savitski, D., Schleinin, D., Ivanov, V., Augsburg, K. and Ferrara, A.,
2017. Sliding mode approach in semi-active suspension control. Book:
Sliding Mode Control of Vehicle Dynamics.

Fig. 15. Test Results without Oversampling.

Fig. 16. Test Results without Oversampling and Augmentations.

Fig. 17. Test Results without Indexing, Oversampling and Augmentations.

Fig. 18. Original Data Unscaled, Displacement.

Fig. 21. Original Data Unscaled, V ehicle velocity V .

[4] Theunissen, J., Sorniotti, A., Gruber, P., Fallah, S., Ricco, M., Kvasnica,
M. and Dhaens, M., 2019. Regionless explicit model predictive control
of active suspension systems with preview. IEEE Transactions on
Industrial Electronics, 67(6), pp.4877-4888.

[6]

[5] Van Der Westhuizen, S. F., and Els, P. S. (2013). Slow active suspension
control for rollover prevention. Journal of Terramechanics, 50(1), 29-36.
ˇSabanoviˇc, E., Kojis, P.,
ˇS., Shyrokau, B., Ivanov, V.,
Dhaens, M. and Skrickij, V., 2021. Feasibility of a Neural Network-
Based Virtual Sensor for Vehicle Unsprung Mass Relative Velocity
Estimation. Sensors, 21(21), p.7139.

ˇSukeviˇcius,

[7] Yuan, H., Nguyen, V. and Zhou, H., 2021. Research on semi-active
air suspensions of heavy trucks based on a combination of machine
learning and optimal fuzzy control. SAE International Journal of Vehicle
Dynamics, Stability, and NVH, 5(10-05-02-0011).

[8] Kim, G., Lee, S.Y., Oh, J.S. and Lee, S., 2021. Deep Learning-Based
Estimation of the Unknown Road Proﬁle and State Variables for the
Vehicle Suspension System. IEEE Access, 9, pp.13878-13890.

[9] Savaia, G., Formentin, S. and Savaresi, S.M., 2020. Semi-active sus-
pension control design via Bayesian optimization. IFAC-PapersOnLine,
53(2), pp.14312-14317.

[10] Sutton, R.S. and Barto, A.G., 2018. Reinforcement learning: An intro-

duction. MIT press.

[11] Schiele, M. and Augsburg, K., Verfahren zur Bereitstellung einer rech-
nergest¨utzten Steuerung f¨ur ein technisches System. Patent DE 10 2019
128 655 B4. 25.11.2021.

[12] Alyukov, A., Rozhdestvenskiy, Y. and Aliukov, S., 2020. Active Shock
Absorber Control Based on Time-Delay Neural Network. Energies,
13(5), p.1091.

[13] Kiran, B.R., Sobh, I., Talpaert, V., Mannion, P., Al Sallab, A.A.,
Yogamani, S. and P´erez, P., 2021. Deep reinforcement learning for
autonomous driving: A survey. IEEE Transactions on Intelligent Trans-
portation Systems.

[14] G´eron, A., 2020. Praxiseinstieg Machine Learning mit Scikit-Learn,
Keras und TensorFlow: Konzepte, Tools und Techniken f¨ur intelligente
Systeme. Aktuell zu TensorFlow 2. O’Reilly.

[15] Wen, Q., Sun, L., Yang, F., Song, X., Gao, J., Wang, X. and Xu, H.,
2020. Time series data augmentation for deep learning: A survey. arXiv
preprint arXiv:2002.12478.

[16] Yu, L. and Zhou, N., 2021. Survey of Imbalanced Data Methodologies.

arXiv preprint arXiv:2104.02240.

[17] Srivastava, N., Hinton, G., Krizhevsky, A., Sutskever, I. and Salakhutdi-
nov, R., 2014. Dropout: a simple way to prevent neural networks from
overﬁtting. The journal of machine learning research, 15(1), pp.1929-
1958.

[18] Van Laarhoven, T., 2017. L2 regularization versus batch and weight

normalization. arXiv preprint arXiv:1706.05350.

Fig. 19. Original Data Unscaled, ∆Displacement.

Fig. 20. Original Data Unscaled, Current I.

