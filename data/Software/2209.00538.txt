2
2
0
2

p
e
S
1

]
E
S
.
s
c
[

1
v
8
3
5
0
0
.
9
0
2
2
:
v
i
X
r
a

Predictive Semantics for Past-CTL Runtime Monitors
Giorgio Audrito
Volker Stolz
Gianluca Torta
Dipartimento di Informatica,
Høgskulen på Vestlandet
Dipartimento di Informatica,
Università degli Studi di Torino
Bergen, Norway
Università degli Studi di Torino
Turin, Italy
volker.stolz@hvl.no
Turin, Italy
giorgio.audrito@unito.it
gianluca.torta@unito.it

ABSTRACT
The distributed monitoring of swarms of devices cooperating to
common global goals is becoming increasingly important, as such
systems are employed for critical applications, e.g., in search and
rescue missions during emergencies. In this paper, we target the
distributed run-time verification of global properties of a swarm
expressed as logical formulas in a temporal logic. In particular,
for the implementation of decentralized monitors, we adopt the
Field Calculus (FC) language, and exploit the results of previous
works which have shown the possibility of automatically translating
temporal logic formulas into FC programs. The main limitation of
such works lies in the fact that the formulas are expressed in the
past-CTL logic, which only features past modalities, and is therefore
ineffective in predicting properties about the future evolution of a
system. In this paper, we inject some limited prediction capability
into the past-CTL logic by providing an extended semantics on a
multi-valued logic, then assessing how this affects the automated
translation into field calculus monitors.

CCS CONCEPTS
• Computing methodologies → Self-organization; • Computer
systems organization → Embedded and cyber-physical systems; •
Theory of computation → Modal and temporal logics.

KEYWORDS
runtime verification, aggregate computing, temporal logic

1 DISTRIBUTED RUNTIME VERIFICATION
Runtime monitoring is a lightweight verification technique dealing
with the observation of a system execution with respect to a speci-
fication [13]. Specifications are usually trace- or stream-based, with
events mapped to atomic propositions in the underlying logic of
the specification language. Popular specification languages include
regular expressions and the Linear Time Logic (LTL). Distributed
runtime monitoring comprises both monitoring of distributed sys-
tems, and using distributed systems for monitoring. Distribution
is particularly challenging for verification purposes, as it requires
to deal with issues such as synchronisation, communication faults,
lack of global time, and so on.

In this paper, we address the design of distributed and decen-
tralised runtime monitors [9], assuming that every agent of the
system (e.g., a swarm of drones) executes independently, and oc-
casionally synchronizes or communicates with other agents via
a given communication platform. Following Francalanza et al.’s
terminology, we model agents as processes and consider any two
processes as remote to each other. Every process produces a local
trace of events, which is a sequence of sets of observable values de-
rived from the agent’s sensors or behaviour. Agents are allowed to

appear or disappear from the system, thus different local traces are
never aligned in time, i.e., events in the same position of each trace
do not necessarily happen at the same time. Monitors check prop-
erties of the system by analysing their traces. We follow an online
evaluation strategy, where the monitors are executed together with
the processes themselves, being hosted at the same location and
communicating with neighbour monitors. We assume that every
agent is executing the same monitor, and this allows us to connect
with the traditional setup of runtime verification despite the dis-
tributed setting: from the perspective of a single monitor, a single
trace is evaluated, although this trace may contain events from re-
mote nodes. Our approach is able to ignore failures, which usually
make distributed systems harder to manage: a non-responsive node
does not disrupt the distributed monitoring process, although influ-
encing its verdict. We do not explicitly address message corruption
or faulty sensors, delegating this issue to integrity measures on the
communication layer.

Unlike previous works on distributed runtime verification [8], we
propose an automated synthesis of monitors into the Field Calculus
(FC) language from high-level specifications in a logic with time
modalities. In particular, building on our previous work [4], we
extend the semantics presented there to a multi-valued logic, thus
allowing a limited, yet useful, level of future prediction.

After introducing Aggregate Computing (the computational
model underpinning FC) in section 2, we briefly review classic
two-valued Past-CTL logic and its translation to FC in section 3.
Section 4 introduces the extended multi-valued Past-CTL and its
translation to FC, while section 5 presents some examples of the
extended logic in action, before we conclude with section 6.

2 AGGREGATE COMPUTING
The aggregate computing paradigm [7] has been proposed as a
generalisation of previous approaches to programming swarms
of devices. One of its most notable features is the ability to ex-
press complex, distributed processes through function composition,
which supports reusability of collective adaptive behaviour. This
aim is achieved through the notion of computational field, defined
as a global data structure mapping devices of the distributed system
to computational values. Fields can be computed from a set of input
fields (e.g., from sensors) either at a low-level, through simple pro-
gramming language constructs, or at a high-level by composition
of general-purpose building blocks of reusable collective behaviour,
and can be ultimately fed to actuators to implement full-fledged
collective adaptive services.

The Field Calculus (FC) [6] is a minimal language for expressing
aggregate computations over swarms of devices, each capable of
asynchronously performing simple local computations, and of inter-
acting with a neighbourhood by local exchanges of messages. The

 
 
 
 
 
 
Giorgio Audrito, Volker Stolz, and Gianluca Torta

(cid:12) 𝑞 (cid:12)
(cid:12) ⊤ (cid:12)
(cid:12) (¬𝜙) (cid:12)
𝜙 ::= ⊥ (cid:12)
(cid:12) (AP 𝜙) (cid:12)
(cid:12)
(cid:12) (P 𝜙) (cid:12)
(cid:12) (AY 𝜙) (cid:12)
(cid:12) (Y 𝜙) (cid:12)
(cid:12)

(cid:12) (𝜙 ∧𝜙) (cid:12)
(cid:12) (EP 𝜙) (cid:12)
(cid:12) (EY 𝜙) (cid:12)

(cid:12) (𝜙 ∨𝜙) (cid:12)
(cid:12) (H 𝜙) (cid:12)
(cid:12) (𝜙 S 𝜙) (cid:12)

(cid:12) (𝜙 ⇒𝜙) (cid:12)
(cid:12) (AH 𝜙) (cid:12)
(cid:12) (𝜙 AS 𝜙) (cid:12)

(cid:12) (𝜙 ⇔𝜙)
(cid:12) (EH 𝜙)

(cid:12) (𝜙 ES 𝜙)

logical

temporal

Figure 1: An event structure, split in the causal past of 𝜖 (red
events), causal future (green) and concurrent (black).

FC provides abstraction mechanisms that avoid the need of explicit
management of message exchanges, device position, density, and so
on. Notably, every device periodically and asynchronously executes
the same program following these steps:

(1) gather contextual information from sensors, local memory,
and recently collected messages (i.e., neighbouring values
mapping from neighbour devices 𝛿 to values v);

(2) evaluate the program with the information just gathered as

input;

(3) store the program result locally, broadcast it to neighbours,

and possibly feed it to actuators

Through the repetitive execution by devices of rounds as above,
across space and time, a global behaviour emerges; the whole net-
work can thus be viewed as a single aggregate machine equipped
with a neighbouring relation. The semantics of FC programs can
be given through the classical notion of event structure [11].

Definition 2.1 (Event Structure). An event structure E = ⟨𝐸, ⇝⟩ is
a finite set of events 𝐸 together with an acyclic neighbouring relation
⇝⊆ 𝐸 × 𝐸 modelling message passing. We say that a sequence of
neighbour events 𝜖1 ⇝ . . . ⇝ 𝜖𝑛 is a message path.

Event neighbouring induces the causality relation < ⊆ 𝐸 × 𝐸,
defined as the transitive closure of ⇝ and modelling causal depen-
dence. An example structure is shown in Figure 1. In practice, event
structures arise from device neighbourhood graphs changing over
time. For instance, device 3 in Figure 1 appears at a certain point in
time, with devices 4 and 1 as neighbours, but after a few steps its
neighbours become devices 2 and 4.

In the following, we will present some small snippets of field
calculus code, exploiting standard programming language notation
together with the following two domain-specific constructs.

• nbr(e0){e}. Each device 𝛿 evaluates this expression by broad-
casting the value of e to neighbours, and producing a neigh-
bouring value mapping each neighbour 𝛿 ′ of 𝛿 (including 𝛿
itself) to the latest value that 𝛿 ′ has shared for e. If this is
the first execution of the expression, there is no previously
shared value for 𝛿, and the value of e0 is used in its place.
For example, in program nbr(false){𝑞()}, 𝑞 is a Boolean
function returning an observable. In the event 𝜖 of Figure 1,
the program computes a map associating devices 2, 3 and 4
to their value of 𝑞 in their last red event.

Figure 2: Syntax of past-CTL.

• share(e0){(x) => e}. In each device, the result of such an

expression is obtained by first:
– gathering a neighbouring value 𝑛 (similarly as nbr);
– evaluating e by substituting 𝑛 to x, obtaining the overall

value v for e; and finally

– broadcasting v to neighbours, which will use it in their

next rounds to produce their neighbouring value 𝑛.

For example, consider the following function declaration:

def ever(q) {

share (false) { (n) => anyHood(n) || q }

}

Function ever computes whether a boolean proposition q has ever
held in the past, through a single share construct. This construct
gathers neighbours’ boolean estimates into a neighbouring value 𝑛,
which is then substituted for variable n. In the first round of execu-
tion, the boolean false is used for the current device. The share
body returns true if q holds now, or any neighbour has already
recognised that the proposition held in its past, thus realising a
gossip routine.

3 PAST-CTL TEMPORAL LOGIC
In order to express and monitor properties of distributed systems
evolving in time, the past-CTL temporal logic [10, 12] has been
shown to be naturally translatable into field calculus monitors
[4]. Figure 2 presents the syntax of the past-CTL logic. It is based
on atomic propositions 𝑞 representing observables, features usual
logical operators as well as temporal modalities. These modalities
are almost identical to those in traditional CTL, with two main
differences: (i) temporal operators are interpreted in the past (and
thus their names are changed accordingly), along message paths
that all happened (and are not alternative realities) — this ensures
that formulas have a definite truth value computable at runtime;
(ii) there are un-quantified versions of the operators along with
quantified versions, which refer to the linear past on a single device
(and thus behave as past-LTL operators).

Past-CTL formulas can be interpreted in event structures (Fig. 1),
giving a truth value for each event. The modalities take inspira-
tion from the words Yesterday, Since, Previously, Historically. We
choose Y, EY, S, AS, and ES as primitive, with the following informal
meaning:

• Y 𝜙 means “𝜙 held in the previous event on the same device”;
• EY 𝜙 means “𝜙 held in some previous event on any device”

(i.e., in some neighbouring event);

• 𝜙 S𝜓 means “𝜓 held in some past event on the same device,

and 𝜙 has held on the same device since then”;

12345devicetimeǫPredictive Semantics for Past-CTL Runtime Monitors

• similarly, 𝜙 AS𝜓 (resp. 𝜙 ES𝜓 ) means “for all paths (resp. for
some path) of messages reaching the current event, 𝜓 held
in some event of the path and 𝜙 has held since then”.

The other operators can be derived from them by usual means,
through AY 𝜙 ≜ ¬ EY ¬𝜙; P 𝜙 ≜ ⊤ S 𝜙 (similarly for AP, EP with
AS, ES); H 𝜙 ≜ ¬ P ¬𝜙 (similarly for AH, EH with EP, AP).

A possible translation of past-CTL formulas into field calculus is
shown in Figure 3 (top), by recursion on sub-formulas. We trans-
late atomic propositions 𝑞 into built-in function calls q() getting
their Boolean value from some external environment, and logical
operators into their field calculus representation. We assume that:

• nbr and share are as in Section 2;
• allHood, anyHood, locHood are built-in operators collaps-
ing a Boolean neighbouring value 𝑛 into the conjunction
(resp. the disjunction, the local value) of its constituent val-
ues.

See [4] for more details on the recursive mapping of past-CTL

to field calculus.

4 MULTI-VALUED PAST-CTL
We can inject some limited foresight ability into past-CTL by con-
sidering a multi-valued logic. The intention of multi-valued logics
in runtime verification is to separate an incomplete decision (“not
enough information yet”) from a final verdict (“we have reached
a stable verdict”). Due to the modal operators in temporal logics,
two additional truth-values are often used: for the □-modality (“al-
ways”), a value that indicates that so far the property has not been
violated, and conversely for the ⋄-modality (“eventually”) that a
witness has not been observed yet. For distributed runtime verifica-
tion, we obtain another dimension that we can adequately cover
with additional truth-values by distinguishing whether the current
verdict holds only for the current device, or for the entire “cone” of
future events.

We hence obtain the 6-valued logic ⊥ < ⊥− < ⊥· < ⊤· < ⊤− <
⊤, to be interpreted so that for any event structure E′ extending
the current one E:

• ⊥ means “every future event 𝜖 ′ ≥ 𝜖 in E′ will evaluate the

formula as ⊥” (similar for ⊤);

• ⊥− means “every future event 𝜖 ′ ≥ 𝜖 in E′ on the same
device as 𝜖 will evaluate the formula at most as ⊥−” (similar
for ⊤−);

• ⊥· means that the formula is false in the current event and
no additional information is available (similar for ⊤·).
Notice that a formula can never reach both ⊥ and ⊤ in different
events. In practice, the interpretation of any formula becomes nec-
essarily ⊥ or ⊤ if in any of its previous events it is ⊥ or ⊤. Similarly,
the interpretation of any formula becomes necessarily ⊥− or ⊤− (in
both the two-valued and the multi-valued interpretations) if in the
previous event on the same device it is ⊥− or ⊤−. In the following,
we take this behaviour for granted and provide the interpretation
of a formula only for events which have no preceding events where
the same formula is ⊥ or ⊤, and have no preceding events on the
same device where the same formula is ⊥− or ⊤−.

Let E⟦𝜙⟧(𝜖) be the value computed for the multi-valued past-
CTL formula 𝜙 at event 𝜖 in the event structure E. A locally-com-
putable multi-valued semantic interpretation of past-CTL formulas
can be defined by refining the usual two-valued semantics with the
following observations:

• E⟦𝜙1 AS 𝜙2⟧(𝜖) = E⟦𝜙2⟧(𝜖) if E⟦𝜙2⟧(𝜖) ≤ ⊥− and 𝜙1 AS 𝜙2

is false in 𝜖;

is true in 𝜖;

• E⟦𝜙1 ES 𝜙2⟧(𝜖) = E⟦𝜙1⟧(𝜖) if E⟦𝜙1⟧(𝜖) ≥ ⊤− and 𝜙1 ES 𝜙2

• E⟦𝜙1 S 𝜙2⟧(𝜖) = ⊥− if E⟦𝜙2⟧(𝜖) ≤ ⊥− and 𝜙1 S 𝜙2 is false

in 𝜖, and similarly with ⊤− if 𝜙1 S 𝜙2 is true;

• E⟦AY 𝜙⟧(𝜖) = E⟦𝜙⟧(𝜖) if E⟦𝜙⟧(𝜖) ≤ ⊥− and AY 𝜙 is false

in 𝜖;

• E⟦EY 𝜙⟧(𝜖) = E⟦𝜙⟧(𝜖) if E⟦𝜙⟧(𝜖) ≥ ⊤− and EY 𝜙 is true

in 𝜖;

• E⟦Y 𝜙⟧(𝜖) = ⊥− if E⟦𝜙⟧(𝜖) ≤ ⊥− and Y 𝜙 is false in 𝜖, and

similarly with ⊤− if Y 𝜙 is true.

The resulting translation into field calculus monitors is shown
in Fig. 3 (bottom). We assume that operators anyHood, allHood,
locHood are extended to work on the extended logic values, respec-
tively collapsing the neighbouring value 𝑛 into the conjunction
(resp. the disjunction, the local value) of its constituent values. A
conjunction (resp. disjunction) of extended logic values is com-
puted as the minimum (resp. maximum) of its arguments. Negation

⊤
Y 𝜙
𝜙1S 𝜙2
𝜙1AS 𝜙2
𝜙1ES 𝜙2

⊤
Y 𝜙
EY 𝜙
𝜙1S 𝜙2
𝜙1AS 𝜙2
𝜙1ES 𝜙2

𝑞

q()

true
def Y(f) { locHood(nbr(false){f}) }
def S(f1,f2) { share (false) {(old) => f2 | (f1 & locHood(old))} }
def AS(f1,f2) { share (false) {(old) => f2 | (f1 & allHood(old))} }
def ES(f1,f2) { share (false) {(old) => f2 | (f1 & anyHood(old))} }

¬𝜙
EY 𝜙

!𝜙
def EY(f) { anyHood(nbr(false){f}) }

𝜙1 | 𝜙2

𝜙1 ∨ 𝜙2

𝑞

q()

⊤
def Y(f) { if (locHood(nbr(⊥·){f}) >= ⊤·) {⊤· | f & ⊤−} else {⊥− | f & ⊥·} }
def EY(f) { if (anyHood(nbr(⊥·){f}) >= ⊤·) {⊤· | f} else {⊥·} }
def S(f1,f2) { share (⊥·) {(old) => f2 | (f1 & if (locHood(old) >= ⊤·) {⊤−} else {⊥−})} }
def AS(f1,f2) { share (⊥·) {(old) => f2 | (f1 & if (allHood(old) >= ⊤·) {⊤·} else {⊥})} }
def ES(f1,f2) { share (⊥·) {(old) => f2 | (f1 & if (anyHood(old) >= ⊤·) {⊤} else {⊥·})} }

𝜙1 ∨ 𝜙2

𝜙1 | 𝜙2

¬𝜙

!𝜙

Figure 3: Translation of a primitive set of past-CTL operators into field calculus. Original translation into Boolean logic (top)
and extended translation into multi-valued logic (bottom).

also works as usual; and assuming that the extended logic values
are implemented as an enumeration type, ¬𝑣 can be computed
through the subtraction ⊤ − 𝑣. The translation of the modalities
mirrors closely the one in Boolean logic, incorporating extra terms
to implement the observations above.

As a simple example to illustrate the translation, consider for-
mula Y 𝜙, which becomes function Y(f) in field calculus. According
to Fig. 3 (bottom), the value of Y(f) depends on whether the previ-
ous value of f in the current device was true (i.e., ≥ ⊤·) or false;
this is checked in the if condition that, thanks to locHood applied
to nbr extracts the previous (yesterday) value of f in the current
device. If such a value is false, Y(f) will definitely take a false value,
but in the multi-valued logic we need to distinguish between ⊥−
and ⊥·, which is done with expression (⊥− | f & ⊥·). The dis-
junction takes the maximum between the two operands; if f has a
value greater or equal to ⊥·, the right operand of | yields ⊥· (since
the disjunction takes the minimum of its operands), and the overall
value of Y(f) becomes ⊥· because the first operand of | is smaller.
If, on the other hand, f has a value less or equal than ⊥−, the right
operand of | yields the value of f, and the overall value of Y(f)
becomes ⊥− because the first operand of | is larger (or equal). Thus,
a locally final decision is made (returning ⊥−) provided that the
previous value is false, and the current value is less or equal than
⊥−. A similar reasoning applies for ⊤ as well; and there is no option
to return a ⊤ or ⊥ value (as in fact according to the semantics there
is never enough information to do so). Note that this is exactly in
accordance with the multi-valued semantics E⟦Y 𝜙⟧(𝜖) discussed
above.

Notice that this translation is as efficient as the original one,
resulting in a program of complexity proportional to the number of
connectives used. Further, it is coherent with the previously given
translation: collapsing extended logic values to Boolean values di-
rectly converts the extended translation into the original translation.
Finally, it can be shown by induction that the extended translation
reflects the semantics of logic values, so that in particular:

• if a formula evaluates to ⊤ (resp. ⊥) in any event, it is going

to evaluate to ⊤ (resp. ⊥) in any following event;

• if a formula evaluates to ⊤− (resp. ⊥−) in any event, it is
going to evaluate to ⊤− (resp. ⊥−) in any following event of
the same device.

Notice that this property is in fact an instance of impartiality [13]:
once a decision is made, it cannot be retracted.

5 EXAMPLES
Consider a networking scenario with two primitive propositions:

• 𝑓 : the system is functional in the event;
• 𝑏: a backup has been provided in the event.

As a paradigmatic sample application of the multi-valued semantics,
we can consider monitoring whether “a backup has been made”. We
can model this sentence as the past-CTL formula EP 𝑏, which can
be expanded into primitive operators as ⊤ ES 𝑏. This formula can be
either false so far, as no backup has yet been made, or true forever
after a backup is completed. The multi-valued semantics captures
this fact, by returning either ⊥· (false so far) or ⊤ (true forever).

Additionally, we could also consider monitoring whether “the
system is always functional”. We can model this sentence as the

Giorgio Audrito, Volker Stolz, and Gianluca Torta

past-CTL formula AH 𝑓 , which can be expanded into primitive
operators as ¬(⊤ ES ¬𝑓 ). Similarly as before, the multi-valued se-
mantics succeeds in capturing the fact that either the formula is ⊤·
(true so far) or ⊥ (false forever).

Finally, as a more complex example, we could consider moni-
toring whether “every device is aware of a backup, since the time
when it knew that the system was always functional”. This sentence
can be modeled in past-CTL as (EP 𝑏) S(AH 𝑓 ), which is a combi-
nation of the previous examples. This formula always starts out
as currently true (⊤·), until either a failure happens or a backup is
made. If the failure happens first, the formula will become false
forever in the device (⊥−). If instead the backup happens first, the
formula will become true forever in the device (⊤−). Again, the
multi-valued semantics successfully captures this fact and allows
the user to recognize it without need of particular logical knowledge
and reasoning on his side.

6 CONCLUSION
In this paper, we presented the temporal logic past-CTL together
with its automatic translation into aggregate monitors in field calcu-
lus. Then, we discussed how the logic semantics could be extended
into a 6-valued logic, to inject some limited foresight ability, while
retaining the translatability into efficient, resilient and lightweight
aggregate monitors. Finally, examples show how this extended
semantic can help capturing the future behaviour of a system in
some scenarios. In the future, we plan to test this approach on a
simulated realistic case study (such as the ones presented in [1–3]),
and expand on this investigation by adding future modalities to
the logic itself, possibly also integrating it with spatial logics as
outlined in [5].

REFERENCES
[1] Giorgio Audrito, Roberto Casadei, and Gianluca Torta. 2021. Fostering resilient
execution of multi-agent plans through self-organisation. In ACSOS 2021, Com-
panion Volume. IEEE, 81–86. https://doi.org/10.1109/ACSOS-C52956.2021.00076
[2] Giorgio Audrito, Roberto Casadei, and Gianluca Torta. 2021. Towards Integration
of Multi-Agent Planning with Self-Organising Collective Processes. In ACSOS
2021, Companion Volume. IEEE, 297–298. https://doi.org/10.1109/ACSOS-C52956.
2021.00042

[3] Giorgio Audrito, Ferruccio Damiani, Giuseppe Martino Di Giuda, Silvia Meschini,
Laura Pellegrini, Elena Seghezzi, Lavinia Chiara Tagliabue, Lorenzo Testa, and
Gianluca Torta. 2021. RM for users’ safety and security in the built environment.
In VORTEX 2021. ACM, 13–16. https://doi.org/10.1145/3464974.3468445

[4] Giorgio Audrito, Ferruccio Damiani, Volker Stolz, Gianluca Torta, and Mirko
Viroli. 2022. Distributed runtime verification by past-CTL and the field calculus.
J. Syst. Softw. 187 (2022), 111251. https://doi.org/10.1016/j.jss.2022.111251
[5] Giorgio Audrito and Gianluca Torta. 2021. Towards aggregate monitoring of
spatio-temporal properties. In VORTEX 2021. ACM, 26–29. https://doi.org/10.
1145/3464974.3468448

[6] Giorgio Audrito, Mirko Viroli, Ferruccio Damiani, Danilo Pianini, and Jacob Beal.
2019. A Higher-Order Calculus of Computational Fields. ACM Trans. Comput.
Log. 20, 1 (2019), 5:1–5:55. https://doi.org/10.1145/3285956

[7] Jacob Beal, Danilo Pianini, and Mirko Viroli. 2015. Aggregate Programming for
the Internet of Things. IEEE Computer 48, 9 (2015), 22–30. https://doi.org/10.
1109/MC.2015.261

[8] Adrian Francalanza, Andrew Gauci, and Gordon J. Pace. 2013. Distributed system
contract monitoring. J. Log. Algebraic Methods Program. 82, 5-7 (2013), 186–215.
https://doi.org/10.1016/j.jlap.2013.04.001

[9] Adrian Francalanza, Jorge A. Pérez, and César Sánchez. 2018. Runtime Verification
for Decentralised and Distributed Systems. In Lectures on Runtime Verification -
Introductory and Advanced Topics. Lecture Notes in Computer Science, Vol. 10457.
Springer, 176–210. https://doi.org/10.1007/978-3-319-75632-5_6

[10] Nicola Gigante, Angelo Montanari, and Mark Reynolds. 2017. A One-Pass Tree-
Shaped Tableau for LTL+Past. In Logic for Programming, Artificial Intelligence
and Reasoning (LPAR) (EPiC Series in Computing, Vol. 46). EasyChair, 456–473.

Predictive Semantics for Past-CTL Runtime Monitors

http://www.easychair.org/publications/paper/340363

1016/0304-3975(95)00035-U

[11] Leslie Lamport. 1978. Time, Clocks, and the Ordering of Events in a Distributed
System. Commun. ACM 21, 7 (1978), 558–565. https://doi.org/10.1145/359545.
359563

[12] François Laroussinie and Philippe Schnoebelen. 1995. A Hierarchy of Temporal
Logics with Past. Theor. Comput. Sci. 148, 2 (1995), 303–324. https://doi.org/10.

[13] Martin Leucker and Christian Schallhart. 2009. A brief account of runtime
verification. J. Log. Algebr. Program. 78, 5 (2009), 293–303. https://doi.org/10.
1016/j.jlap.2008.08.004

