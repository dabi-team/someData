A Contribution Management Framework for Firms
Engaged in Open Source Software Ecosystems
- A Research Preview

Johan Linåker and Björn Regnell

Lund University, Lund, Sweden
{johan.linaker,bjorn.regnell}@cs.lth.se

Abstract. [Context and motivation] Contribution Management helps ﬁrms en-
gaged in Open Source Software (OSS) ecosystems to create contribution strate-
gies which motivate what they should contribute and when, but also what they
should focus their resources on and to what extent. The motivation for developing
tailored contribution strategies is to maximize return on investment and sustain
the inﬂuence needed in the ecosystem. [Question/Problem] We aim to develop
a framework to help ﬁrms understand their current situation and create a start-
ing point to develop an eﬀective contribution management process. [Principal
ideas/results] Through a design science approach, a prototype framework is cre-
ated based on literature and validated iteratively with expert opinions through in-
terviews. [Contribution] In this research preview, we present our initial results
after our ﬁrst design cycle and consultation with one experienced OSS manager
at a large OSS oriented software-intensive ﬁrm. The initial validation highlights
importance of stakeholder identiﬁcation and analysis, as well as the general need
for contribution management and alignment with internal product planning. This
encourages future work to develop the framework further using expert and case
validation.

Keywords: requirements engineering, open source, software ecosystem, open in-
novation, co-opetition, scoping, contribution strategy, contribution management

Introduction

1
Requirements Engineering (RE) concerns capturing the needs of the customer and trans-
lating these into a product that satisﬁes the elicited needs [1]. For software-intensive
ﬁrms, RE can therefore be considered as a pivotal part in the product planning and
spans over diﬀerent time horizons and abstractions, from requirements management,
to release-planning, roadmapping and portfolio management [2]. Firms operating in an
Open Source Software (OSS) ecosystem have to consider participation in two such RE
instances; one that regards the internal product planning facilitated by themselves, and
one that regards the external product planning of the OSS project facilitated by the OSS
ecosystem. In the latter, to impose their own agendas, ﬁrms have to collaborate and
compete with other actors in the ecosystem that all have a stake in the OSS project that
underpins the ecosystem [3].

To gain the inﬂuence needed in order to impose their agenda, align their internal
RE with the ecosystem’s RE and to maximize Return On Investment (ROI), ﬁrms need
consider how to participate in the OSS ecosystem in terms of what they contribute and

2
2
0
2

l
u
J

1
3

]
E
S
.
s
c
[

1
v
0
3
6
2
0
.
8
0
2
2
:
v
i
X
r
a

 
 
 
 
 
 
when (cf. requirements scoping [4]), but also what they should focus their resources on
and to what extent. We choose to label this process as contribution management and
guidelines that come as output contribution strategies [4]. To create these strategies, we
believe that ﬁrms need to understand how they draw value [5] from the OSS project
and their ecosystems [3], and identify the related business requirements [6]. Further,
ﬁrms need to understand the relation between the OSS projects, their ecosystems, and
the ﬁrms’ internal product planning [2], and as a consequence how important is it to be
able to inﬂuence the RE in the OSS ecosystems [7]. These factors need to align with the
reasons for why ﬁrms make contributions and dedicate resources to the OSS project and
its ecosystem, i.e., the foundations for the contribution management process.

We aim to develop a contribution management framework to help ﬁrms understand
their current situation and create a starting point that can help them construct guide-
lines for what they should contribute to the OSS ecosystems and when, i.e., contribution
strategies [4]. We apply a design science approach [8] by ﬁrst building on literature [9],
and then consult with experts for opinions in an iterative fashion. In this research pre-
view we present our initial results after our ﬁrst design cycle and consultation with an
experienced OSS manager at a large OSS oriented software-intensive ﬁrm.

2 Research Methodology
We consider the problem context of aligning the contribution management with a ﬁrm’s
internal product planning [2] and business requirements [6] as a design problem. We
adopt a design science approach [8] and deﬁne our design problem to:

– Improve alignment between a ﬁrm’s contribution management towards OSS projects with the
ﬁrm’s internal product planning and business requirements, by designing a framework that
can help the ﬁrm to create guidelines for what should be contributed and when, in order for
its developers to better decide what to contribute and how to prioritize their work.
The treatment addressing the stated design problem includes the framework (i.e., the
artifact [8]) as well as the interaction between it and the problem context, which in our
case is constituted by ﬁrms engaged in an OSS ecosystem.

In our study, we identify and explain the problem based on literature [9] and de-
velop a prototype of an artifact along with a potential interaction set-up. As a validation
model, we will use expert opinions where the prototype and interaction set-up is simu-
lated through interviews. Based on the output of each interview, the treatment is reﬁned
and again validated in a new cycle. The interviews are semi-structured with introductory
questions that covers current involvement in OSS ecosystems, contribution practices,
and how internal RE functions relative the ecosystems’. In the second part, the frame-
work is presented for the interviewee with an explanation and open discussion on its
structure and content. In the third part, the interviewee and interviewer walk through the
framework for an OSS ecosystem of the interviewee’s choice. The interview ends with
a discussion of usage scenarios, potential improvements and changes of the framework.
The interviews are audio-recorded and transcribed.

In this research preview, the results from the ﬁrst design cycle is presented where
our initial treatment design was validated with an OSS manager of a large OSS oriented
software-intensive ﬁrm. Based on the output from the ﬁrst interview, some factors in the
original prototype was reordered and made clearer. E.g., the engagement and revealing
strategies, originally elicited from Dahlander et al. [10] was made more explicit, while

Fig. 1: Overview of the ﬁrst iteration of the proposed contribution management frame-
work.

the ecosystem stakeholder analysis and identiﬁcation was abstracted as a general input
to all levels. For the framework, see Fig. 1.

3 Structure of the Framework

In this section we present the structure of the framework. As illustrated in Fig. 1, it con-
sists of six levels: Business Criticality, Product Criticality, Engagement Strategy, Re-
vealing Strategy, Focus Areas, and Contribution Drivers. These levels are used to frame
and explain how the ﬁrm engages or should engage with a speciﬁc OSS ecosystem. Busi-
ness and Product Criticality represents the role and importance of the OSS project and its
ecosystem in relation to the ﬁrm’s internal business requirements and product planning.
Engagement and Revealing Strategy represents the way in how the ﬁrm interacts and
contributes to OSS project and its ecosystem. Focus areas is used to separate between
parts of an OSS project which are valued diﬀerently in terms of previous framework lev-
els. Contributions Drivers are what motivate what, when and to whom a software artifact
should be revealed, or where resources should be invested and to what extent, i.e., con-
tribution management. The framework presents a list of possible drivers, but not all may
be relevant or even listed. These should be identiﬁed and be in alignment with previous
framework levels. As input to all framework levels, the ﬁrm should perform stakeholder
identiﬁcation and analysis on the OSS ecosystem. The output from the framework (i.e.,
how an OSS project is viewed in terms of Business and Product Criticality, what strate-
gies are used, and what drivers that are relevant for which focus areas) may diﬀer with
time and should be in alignment with the ﬁrm’s internal product planning, why it can be
divided into diﬀerent time horizons (e.g., Strategic, Tactical, and Operational). Below
we present each part of the framework in more detail.
Time Horizons: To capture the short to long-range views, three horizons are deﬁned: (1)
the strategic horizon which looks beyond one year, (2) the tactical horizon which looks
up to one year ahead, and (3) the operational horizon which is the practice at the current
point in time. The precise time intervals are to be adapted relative each ﬁrm’s internal
product planning [2]. The important aspect is how the engagement with the ecosystem
should be adapted as time and development progresses.
Ecosystem Stakeholder Population: What stakeholders that are present and what their
agendas are may aﬀect how a ﬁrm judges the business criticality of the OSS project, to
what extent the ﬁrm should engage the ecosystem, and what they choose to reveal, and

when [9]. E.g., The presence of competitors may aﬀect what is to be considered diﬀer-
ential and not. Some stakeholders may be unknown and indirect competitors pending on
their agendas [11]. Similarly, the presence of existing and potential partners may oﬀer
opportunities for closer collaborations, some of which are too speciﬁc or diﬀerential to
share with the rest of the ecosystem. Knowing who are the most inﬂuential and what
their interests are may hint how the OSS project’s roadmap aligns with the ﬁrm’s, how
easy it is to aﬀect, but also who that should be inﬂuenced to create traction in a direction
favorable for the ﬁrm [7]. Additionally, it may provide an input to if the OSS ecosystem
is worth engaging in the ﬁrst place, and also to help monitor the general health of it [3].

Business Criticality: Refers to how the ﬁrm draws value [5] from the OSS project and its
ecosystem, and how the related business requirements [6] are deﬁned. From a business
model perspective, the business criticality of the OSS may be judged based on the ratio-
nale of how it helps the ﬁrm to create, deliver, and capture value [12]. E.g., [13,14], as a
direct part of the product oﬀering through an open core or platform-extension model, as
a basis for support, subscriptions and professional services, or as part of a duel-licensing
model. However, it may also be the case that the value comes indirect when the OSS is
used as an enabler for the ﬁrms’ product oﬀerings, e.g., as a development component or
as part in the infrastructure supporting the product. It may also a combination of such
direct and indirect factors. E.g., in asymmetric business models, software is made OSS
to instead capture value from additional products, services and data gathering that is
managed through the OSS [15]. Even though considered a diﬃcult process [16], ﬁrms
must be able to determine the strategic importance of the OSS in regard to diﬀerentia-
tion and added value [5] in order to decide if and how much the ﬁrm should invest and
interact with the ecosystem [4].

Product Criticality: Refers to how the ﬁrm uses the OSS project in their future plans
and actions in regards to their product over a series of releases, i.e., how integrated the
OSS project is with the product and how the internal product planning [2] needs to align
with that of the OSS project. This aﬀects what requirements need to be present in both
or separately, and therefore what should be contributed or not. Further, if the ﬁrm uses
a product-line approach with an underlying platform from which it creates its products,
there may be an interest to contribute back to the OSS project in order to enable reuse.
If they focus on developing single products and reuse more opportunistic, there may be
less of a long-term perspective so less may be contributed back.

Engagement strategy: Pending on the business and product criticality of the OSS project,
the ﬁrm may need to have an inﬂuence on the development going on in the ecosystem.
By actively engaging and contributing back to the ecosystem ﬁrms can increase their
level of inﬂuence. Dahlander & Magnusson [17] describes three types of relationships
in regards to activity and inﬂuence on the ecosystem. Firstly, symbiotic relationships
imply giving back to the ecosystem and is associated with a high inﬂuence for the ﬁrm.
Second, commensalistic relationships imply interacting with the ecosystem but to the
required minimum, and is associated with a low inﬂuence for the ﬁrm. Finally, parasitic
relationships imply no interaction or giving back to the ecosystem, and is related to no,
or very limited inﬂuence. Dahlander & Magnusson [17] highlights that these are to be
considered as a continuum.

Revealing strategy: Pending on the business and product criticality, and the level of
engagement, diﬀerent strategies may be enforced in regards of what to reveal. E.g., by
selectively revealing, diﬀerentiating parts can be kept closed while commodity parts can
be made open [11, 18]. Further, with licensing schemas (cf. Dual-licensing [13]), parts
can be opened fully but under such circumstances that competitors cannot exploit the
OSS that may hurt the focal ﬁrm [14]. Alternatively, everything may be disclosed under
open and transparent conditions [13], or even closed for that matter. Diﬀerent strategies
may be applied to diﬀerent parts of an OSS project, as well as combined.
Focus Area(s): Areas or modules of strategic importance and/or extra value to the ﬁrm.
For some OSS projects, it may necessary to consider diﬀerent parts or sub projects sep-
arately in regards to this framework.
Contribution Drivers: Pending on previous levels in the framework, the ﬁrm can iden-
tify which drivers that motivate what should be contributed and shared with the OSS
ecosystem, and when, but also what resources should be dedicated and to what extent.
Those listed in table 1 are not to be considered exhaustive, nor all relevant per default.
There may be further drivers which are speciﬁc for the focal ﬁrm and how it makes use
of the OSS project and its ecosystem.

4 Discussion and Conclusions
Target audience for the framework are ﬁrms engaged in OSS ecosystems. We believe that
the interaction between the ﬁrm and the framework should be managed in a workshop
format. Further, as in the traditional roadmapping process [16], we believe that the par-
ticipants should be cross-functional and include those concerned with the use of OSS in
the ﬁrm, e.g., legal, management, marketing, product managers, project managers, com-
munity managers, and developers. In the workshop, each level of the framework should
be addressed and discussed to create a uniﬁed view of the current state of practice and
how it can be optimized in order for the diﬀerent levels of the framework to align.

By identifying its contribution drivers, ﬁrms may understand what the alternative
cost is to not contribute back to an OSS project and its ecosystem. By aligning this to their
internal product planning and business requirement, we believe that they can motivate
what should be contributed and not. For some ﬁrms this may be part of an improvement
and maturity process in which the ﬁrm starts to understand how they should act in order
to inﬂuence and draw value from the OSS project and its ecosystem. With time ﬁrms
may realize how they can make use of OSS projects and their ecosystems on a general
level, e.g., how to adapt business models, but also to adopt new ones.

Pending on the ecosystem’s stakeholder population, there may be multiple agendas
present, all of which may not align. The agendas may reveal potential competitors and
partners, of which some stakeholders may hold both roles as typical in co-opetition.
All these factors impact how an OSS project and its ecosystem should be used and
engaged [9]. This highlights the importance for stakeholder identiﬁcation and analy-
sis processes to be in place in order to provide necessary input when working with the
framework and the improvement process. By using the same framework in the analysis
to proﬁle other stakeholders, a ﬁrm may benchmark and learn more about how they can
adjust their requirements scoping, e.g., in order to gain better inﬂuence in the ecosystem.
In this paper we have created an initial version of our framework based on one design
cycle. The initial validation highlights the importance of stakeholder identiﬁcation and

Table 1: Contribution Drivers for why to contribute to an OSS project and ecosystem.

Compliancy Drivers

Parts required for compliance with licenses, patents, standards, and law.

Development Drivers

Parts that can ease future maintenance and avoid unnecessary internal patch-work
Parts that may allow for better synced release cycles
Parts that may reduce integration costs
Parts that allows for third party products and services
Parts that would beneﬁt from external development and testing due to lack of internal resources,
or a wish for increased quality and innovation
Parts necessary to maintain an absorptive and learning capacity
Parts necessary to keep a low entrance barrier for new developers

Strategic & Governance Drivers:

Parts necessary to maintain a common standard in the ecosystem and at the market
Parts that may allow for a ﬁrst-mover advantage, if in the interest of the ﬁrm
Parts that may force a competitor to adapt
Parts required to maintain or reach a certain level in the ecosystem governance hierarchy

Relation & Reputation Drivers:

Parts that may add to the ﬁrm’s reputation as a competitive edge
Parts necessary to maintain relationships with ecosystem participants or external partners
Parts needed to maintain an open attitude internally of ﬁrm
Parts necessary to maintain interest among ecosystem participants and attract others
Parts necessary to maintain competitive edge to other OSS ecosystems
Parts necessary to maintain legitimacy and goodwill among ecosystem participants
Parts requested by ecosystem participants and customers
Parts that may help to identify potential employees

Diﬀerential Drivers:

Parts that may enable internally diﬀerential parts
Parts that are non-diﬀerentiating for possible competitors in the ecosystem
Parts regarded as commodity

analysis, the need for suggested alignment as well as for context speciﬁc contribution
strategies in general.

In future work, we plan to reiterate the framework using further expert validation,
and also develop an initial set of workshop guidelines for how the framework may be
used in an interactive manner. After stabilization is reached in the structure of the frame-
work, it will be piloted in a workshop format with ﬁrms engaged in OSS ecosystems.
Consideration will be taken to background of experts and ﬁrms to strengthen external
validity, e.g., in regards to size of development organization and usage of OSS in relation
to the business model of ﬁrm, but also type of OSS project and ecosystem population.
The long term goal is to create a strategic support for contribution management based on

the proposed framework in this research preview. The strategic support should allow for
tailored contribution strategies to be created, communicated and followed-up through
the development organization. The support should further take input from continuous
stakeholder identiﬁcation and analysis of the concerned ecosystems. The work aims to
help ﬁrms engaged in OSS ecosystems to gain the inﬂuence needed in order to impose
their agenda, align their internal RE with the ecosystem’s RE and to maximize their ROI.

References

1. Aybüke Aurum and Claes Wohlin. Requirements engineering: setting the context. In Engi-

neering and managing software requirements, pages 1–15. Springer, 2005.

2. Samuel A Fricker. Software product management.

In Software for People, pages 53–81.

Springer, 2012.

3. Slinger Jansen, Sjaak Brinkkemper, and Anthony Finkelstein. Business network management
as a survival strategy: A tale of two software ecosystems. Proccedings of the 1st International
Workshop on Software Ecosystems, pages 34–48, 2009.

4. Krzysztof Wnuk, Dietmar Pfahl, David Callele, and Even-André Karlsson. How can open
source software development help requirements management gain the potential of open in-
novation: an exploratory study. In Proceedings of the ACM-IEEE international symposium
on Empirical software engineering and measurement, pages 271–280. ACM, 2012.

5. Aybüke Aurum and Claes Wohlin. A Value-Based Approach in Requirements Engineering:
Explaining Some of the Fundamental Concepts, pages 109–115. Springer Berlin Heidelberg,
Berlin, Heidelberg, 2007.

6. Karl Wiegers and Joy Beatty. Software requirements. Pearson Education, 2013.
7. Johan Linåker, Patrick Rempel, Björn Regnell, and Patrick Mäder. How ﬁrms adapt and inter-
act in open source ecosystems: Analyzing stakeholder inﬂuence and collaboration patterns. In
Requirements Engineering: Foundation for Software Quality, pages 63–81. Springer, 2016.
8. Roel J Wieringa. Design science methodology for information systems and software engi-

neering. Springer, 2014.

9. Hussan Munir, Krzysztof Wnuk, and Per Runeson. Open innovation in software engineering:

a systematic mapping study. Empirical Software Engineering, pages 1–40, 2015.

10. Linus Dahlander and Mats Magnusson. How do ﬁrms make use of open source communities?

Long Range Planning, 41(6):629–649, 2008.

11. Frank Van der Linden, Björn Lundell, and Pentti Marttiin. Commodiﬁcation of industrial

software: A case for open source. IEEE Software, 26(4):77–83, 2009.

12. Alexander Osterwalder and Yves Pigneur. Business model generation: a handbook for vi-

sionaries, game changers, and challengers. John Wiley & Sons, 2010.

13. Henry W Chesbrough and Melissa M Appleyard. Open innovation and strategy. California

management review, 50(1):57–76, 2007.

14. Joel West. How open is open enough?: Melding proprietary and open source platform strate-

gies. Research policy, 32(7):1259–1285, 2003.

15. Stijn Schuermans, Andreas Constantinou, and Michael Vakulenko. Assymetric business mod-

els: The secret weapon of software-driven companies, 2014.

16. Marko Komssi, Marjo Kauppinen, Harri Töhönen, Laura Lehtola, and Alan M. Davis.
Roadmapping problems in practice: value creation from the perspective of the customers.
Requirements Engineering, 20(1):45–69, 2015.

17. Linus Dahlander and Mats G. Magnusson. Relationships between open source software com-
panies and communities: Observations from nordic ﬁrms. Research Policy, 34(4):481 – 493,
2005.

18. Joachim Henkel. Selective revealing in open innovation processes: The case of embedded

linux. Research Policy, 35(7):953–969, 2006.

