Analyzing Impact of Dependency Injection on
Software Maintainability

Peter Sun and Dae-Kyoo Kim
Computer Science and Engineering
Oakland University
Rochester, MI, USA
{pysun,kim2}@oakland.edu

2
2
0
2

y
a
M
2
1

]
E
S
.
s
c
[

1
v
1
8
3
6
0
.
5
0
2
2
:
v
i
X
r
a

Abstract—Dependency injection (DI) is generally known to
improve maintainability by keeping application classes separate
from the library. Particularly within the Java environment, there
are many applications using the principles of DI with the aim to
improve maintainability. There exists some work that provides
an inference on the impact of DI on maintainability, but no
conclusive evidence is provided. The fact that there are no
publicly available tools for quantifying DI makes such an evidence
more difﬁcult to be produced. In this paper, we propose a novel
metric, DCBO, to measure the proportion of DI in a project
based on weighted couplings. We describe how DCBO can serve
as a more meaningful metric in computing maintainability when
DI is also considered. The metric is implemented in the CKJM-
Analyzer, an extension of the CKJM tool that utilizes static code
analysis to detect DI. We discuss the algorithmic approach behind
the static analysis and prove the soundness of the tool using a
set of open-source Java projects.

Index Terms—Dependency injection, coupling, maintainability.

I. INTRODUCTION

Software development has grown increasingly dependent on
external libraries that are built by other companies. While it
provides convenience in development, it signiﬁcantly increases
the cost of software maintenance especially for the changes
that involve the dependency with libraries. The use of external
libraries also requires signiﬁcant overheads such as extra
code to be imported and compiled, resulting in performance
bottlenecks.

Component frameworks (e.g., Spring [1]) help mitigate
development cost. A key feature of component frameworks for
object-oriented programming (OOP) is dependency injection
(DI). DI is a pattern of sending (”injecting”) necessary ﬁelds
(”dependencies”) into an object, instead of requiring the object
to initialize those ﬁelds itself. Existing literature [2]–[5] sug-
gests that the use of DI can help improve the maintainability of
software systems. On the other hand, there are also warnings
against using DI due to possible negative effects [6], [7].

Razina and Janzen [2] compared the maintainability of
Spring projects and non-Spring projects where Spring projects
are assumed to have DI. However, as they mentioned in their
work, they found no obvious correlation between the use of DI
and maintainability. While their initial hypothesis that Spring
projects would have lower coupling than non-Spring projects
was disproved, they did see a few projects in the Spring
group that had a signiﬁcant decrease in coupling correlating

to an increase in DI. However, we think that their hypothesis
was rejected because it is possible – and more than likely
– that non-Spring projects also have DI. This is difﬁcult to
assess in their work because how DI was counted was not
described, which is critical for determining whether the non-
Spring projects had DI considered in the same way as Spring
projects. For example, if Razina and Janzen only analyzed
XML ﬁles for DI (as implied in their work),
is more
likely that non-Spring projects can implement DI in non-XML
conﬁgured methods.

it

In this paper, we present a novel metric, Dependency
Injection-Weighted Coupling Between Objects (DCBO) and
CKJM-Analyzer [8], a command-line interface (CLI) extend-
ing the original CKJM tool [9] to analyze DI and compute
metric means across all classes within Java projects. DCBO
weighs coupling between objects depending on whether it is
soft-coupled (e.g., with DI) or hard-coupled (e.g., with the
new keyword or with using an object generator that requires
parameter information from the user). We developed CKJM-
Analyzer to more easily iteratively analyze Java projects for
CKJM metrics and incorporate algorithms to compute the
proportion of DI in Java classes. We believe CKJM-Analyzer
will be very useful for statistical analysis on Java projects with
respect to CKJM metrics. We validate the metric and tool with
a set of open-source Java projects.

The remainder of the paper is organized as follows. Sec-
tion II gives an overview of the related work on the effect of
DI in software systems, as well as work in measuring coupling
weight. Section III presents a background on DI. Section IV
describes DCBO and its algorithmic approach implemented in
the CKJM-Analyzer tool. Section V describes the data analysis
results from CKJM-Analyzer on small sample projects and
open-source projects. Section VI discusses the results with
regards to the impact of DI in maintainability, the effect of
DCBO on coupling analysis, limitations and potential future
work. Section VII concludes the paper with discussion on
future research work.

II. RELATED WORK

Razina and Janzen [2] studied the impact of DI on main-
tainability. They count the number of DIs in a Spring project
(i.e., a project built on the Spring framework which is built
[1]) and divide the number by the sum of CBOs of
on DI

 
 
 
 
 
 
the project for normalization. Maintainability is measured in
terms of CBO, RFC, and LCOM using the CKJM tool [9].
They formed two groups of projects – Spring projects and non-
Spring projects with an assumption that Spring projects use the
DI pattern and non-Spring projects do not. They conducted
ANOVA analysis on those groups to ﬁnd out correlation
between the use of DI and maintainability. However, they
found no obvious correlation between the use of DI and
maintainability.

While their initial hypothesis that Spring projects would
have lower coupling than non-Spring projects was disproved,
they did see a few projects in the Spring group that had a
signiﬁcant decrease in coupling correlating to an increase in
DI. We think that their hypothesis was rejected because it is
possible - and more than likely - that non-Spring projects also
have DI. This is difﬁcult to assess in Razina and Janzen’s paper
because they did not describe how DI was counted, which
is critical for determining whether the non-Spring projects
had DI considered in the same way as Spring projects. For
example, if Razina and Janzen only analyzed XML ﬁles for DI,
it is more likely that non-Spring projects can implement DI in
non-XML conﬁgured methods. They considered non-weighted
CBO to evaluate the effect of DI. We think non-weighted
CBO is insufﬁcient to determine the effect of DI. Section IV
describes DCBO and why we believe it more accurately
assesses the effect of DI on coupling and maintainability, and
section V details experimental results that show unweighted
CBO remaining the same regardless of DI proportion in
experimental projects.

The work by Crasso et al. [5] suggests that the use of
DI can provide cleaner web-based interfaces. The model
they developed demonstrates a signiﬁcant improvement in the
precision of interfaces for web applications with DI applied.
An improvement was observed in web service queries, and
the authors think it is due to DI code containing more “mean-
ingful terms” or having higher accuracy in words/phrases that
relate to search queries. Additionally, the authors observed a
small performance hit and overhead increase when using DI,
primarily because of the DI pattern requiring more memory in
service adaptors. The authors argue that the slight increase in
memory and overhead is minimal, especially because DI-based
web services provide more accurate queries. The authors do
not directly mention maintainability, but suggest that DI makes
it easier to outsource Web Service development.

There exists also some work [6], [10] discussing a negative
impact of DI. The work by Roubtsov et al. [6] presents
bad smells caused by DI on modularity. They observed that
a specialized form of DI using syntactic metadata has a
higher probability of violating modularity rules, which leads
to less cohesion. Similarly, the work by Laigner et al. [7]
presents a catalog of DI anti-patterns (e.g., framework cou-
pling, intransigent injection) which increase coupling (e.g., by
DI annotations, unnecessary dependencies) while decreasing
maintainability as opposite to “good” patterns (e.g., GoF
patterns [11]).

Saidulu [10] proposed a metric coined Weighted Coupling
Between Objects (WCBO). They rank the weight of class
coupling with bipartite graphs and use the metric to assess
fault proneness. Our work differs from Saidulu’s approach in
that we weight coupling via DI.

III. DEPENDENCY INJECTION
DI, which is a speciﬁc form of Dependency Inversion
Principle [3], is a design pattern to improve the maintainability
of software systems by reducing coupling through injecting
dependencies in classes using an external injector which is a
class object or ﬁle (e.g, an XML-based conﬁguration ﬁle in
the Spring framework). As coupling is reduced. consequently
the complexity of classes is also dminished. DI also makes
it easier to pinpoint dependency-related errors as dependency
injection is localized in one place (viz. the injector).

According to Yang et al [3], a dependency may be injected
in four ways [3] – (i) via constructor parameters, which is
known as Constructor No Default (CND); (ii) via method
parameters, which is known as Method No Default (MND);
(iii) via constructor parameters or a default object (using the
new command), which is known as Constructor With Default
(CWD); and (iv) via method parameters or via a default
object, which is known as Method With Default (MWD).
Consider the code snippet below. In the code, the DogPenCND
class implements CND, the DogPenMND class implements
the DogPenCWD class implements CWD, and the
MND,
DogPenMWD class implements MWD.

1

2

3

4

5

6

7

8

9

10

11

12

13

14

15

16

17

18

19

20

21

22

23

24

25

26

27

28

29

30

31

32

33

34

public class Dog {

String name;
Dog() {

this.name = "Dog";

}

}

public class DogPenCND {

Dog dog;
DogPen(Dog dog) {

this.dog = dog;

}

}

public class DogPenMND {

Dog dog;
void AddDog(Dog dog) {
this.dog = dog;

}

}

public class DogPenCWD {

Dog dog;
DogPen() {

this.dog = new Dog();

}

}

public class DogPenMWD {

Dog dog;
void AddDog() {

this.dog = new Dog();

}

}

the

code

snippet

Typically, the implementation of services is speciﬁed in the
injector which is often used as a clue for the use of DI. When
a change needs to be made in the service, it is done through
the injector without changing the client. In this way, the client
remains unchanged and thus, the code becomes more ﬂexible
and reusable.
Consider

The
DogPenGeneratorCND class acts as the injector, injecting
the Dog class into each DogPenCND object. In this way,
each different DogPenCND object does not need to generate
its own Dog dependency. This is particularly helpful when
the same dependency is injected in multiple different objects.
The CND and MND structures follow this beneﬁt.
public class DogPenGeneratorCND() {
Dog dog = new Dog("Dog1");
DogPenCND pen1 = new DogPenCND(dog);
DogPenCND pen2 = new DogPenCND(dog);
DogPenCND pen3 = new DogPenCND(dog);

below.

5

1

3

2

4

6

}

In contrast, the CWD and MWD structures do not entirely
follow the injector beneﬁt. Consider the code snippet below. If
developers use the ”default” constructor or method available
in the CWD/MWD structures, it requires the object itself to
generate its own dependency object.

1

2

3

4

5

public class DogPenGeneratorCWD() {

DogPenCWD pen1 = new DogPenCWD();
DogPenCWD pen2 = new DogPenCWD();
DogPenCWD pen3 = new DogPenCWD();

}

DI comes with a few technical hindrances. Firstly, it requires
all
the dependencies to be resolved before compilation if
the compiler is not conﬁgured to recognize injected depen-
dencies. That is, the compiler cannot recognize the presence
of injected dependencies unless it is conﬁgured. Secondly,
the frameworks built upon DI are often implemented with
reﬂection or dynamic programming, which can hinder the use
of IDE automation such as ﬁnding references, showing call
hierarchies, and safe refactoring [12].

IV. ANALYZING THE IMPACT OF DI ON MAINTAINABILITY

In this section, we describe the proposed approach for
analyzing the impact of DI on software maintainability. The
following are the research questions we seek to answer in this
work.

Is CBO a sufﬁcient metric to determine DI in a system?
We believe this is an important question to address because
previous research has argued that DI should reduce coupling,
and therefore reduce CBO [2]. It should follow, therefore, that
an inverse relationship between DI and CBO (increase in DI
will decrease CBO) can be quantiﬁed. We use experimental
analysis to determine whether that inverse relationship exists.
Does weighted DI in a system yield greater maintainability?
This is the motivation behind our proposal for the new metric,
DCBO. We show in Section V that CBO values are consistent
when Java projects are implemented with any of the four DI
deﬁnitions proposed by Yang et al. [3], and we further show
how DCBO - which weighs the deﬁnitions differently - can

provide a more meaningful metric in determining the effect of
DI on maintainability.

In particular, we hope to expand on the work done by Razina
and Janzen [2] who focused on Spring framework projects
to assess whether DI improves maintainability. We aim to
provide an open-source software solution in computing DI
within projects, and propose a new metric in accordance with
an updated DI deﬁnition.

A. Dependency Injection Weighted-Coupling Between Objects

Yang et al. [3] acknowledged a reduction in reusability
with respect
to the CWD and MWD patterns because of
the “default” object, but did not believe that was signiﬁcant
enough to remove the CWD and MWD deﬁnitions [3]. We
argue that only CND and MND conform to the DI pattern (cf.
Section III) and with respect to CWD and MWD, the “default”
object incurs twice the coupling penalty compared to injecting
dependencies via parameters. In other words, DI via parameter
injection (CND/MND [3]) requires only one change where
the dependency is generated and injected into various classes,
whereas DI via default object
injection (CWD/MWD [3])
requires N number of changes, where N is the number of
classes that depend on that object. We propose DCBO to
quantify the effect of DI on coupling in Java classes. We weigh
coupling in two parts:

• Half of the total weight of 2 is added if a coupled
dependency exists (i.e., half of the total CBO metric).
A total weight of 2 is added every time a coupling
exists, because of the two-way nature of the CBO metric
computation.

• Half of the total weight of 2 is added if the dependency
the class is coupled to is not injected via DI (i.e., the
class uses a default object).

Given that, we quantify DCBO using the following equa-
tion, where DIP is the number of parameters that are injected
via DI using the CND/MND [3] pattern.

DCBO = CBO − DIP

(1)

CKJM-Analyzer was developed to address a need for an
open-source solution that can quantify DI in Java projects. At
a high level, it is a .NET command line interface (CLI) [8] run
on a Windows operating system (OS) that wraps the CKJM
extended tool [13] and provides additional functionality to
compute DI proportion, project-speciﬁc metric means, and
DCBO. In the CKJM-Analyzer tool, we compute DCBO for
every class using Formula 1, and ﬁnally return the mean for
every project in the ﬁnal report. We acknowledge that while
the weights assigned in DCBO should sufﬁciently cover DI
implementations via parameter injection, it does not account
for whether that injected object will enforce further coupling.
For example, the injected object could call an internal function
that requires multiple parameters, forcing the user to perform
changes wherever that function is called, even though that
object is injected via parameter injection. In that case, DCBO
would compute its coupling weight as 0.5, but practically the

weight should remain as 1 since the user will need to perform
multiple changes.

B. Dependency Injection Detection Algorithm

In this section, we discuss the speciﬁc algorithm imple-
mented to detect DI. It identiﬁes DI patterns analogous to CND
and MND, but does not consider the default object injection
as a DI pattern (viz. CWD and MWD). CKJM-Analyzer
iteratively executes CKJM-DI on every Java class within
a project and performs additional computations. Below is
pseudocode for the algorithmic implementation to detect DI. In
the code, GetParams() returns a list of all parameters the class
uses in its constructors or methods. Then, GetClassNames()
returns a list of all class names, essentially all of the available
non-primitive dependencies in the project. The intersection
of params and classNames is a list of all non-primitive
parameters that the class has, which follows CND/MND DI
pattern. Then, diPara is multiplied by 2 when computing the
proportion because coupling is a two-way relation (i.e., the
object using the dependency and the dependency itself will
each increment coupling by 1). Given that the computation
returns a proportion (di), we deem the lowest DI proportion
to be 0 (0%) and the highest DI proportion to be 1 (100%).

1

2

3

4

5

6

7

8

double diPara = 0.0;
double cbo = 0.0;
foreach classFile in project:
var params = GetParams();
var classNames = GetClassNames();
diPara += Intersect(params, classNames);
cbo += GetCBO();

double di = diPara * 2 / cbo;

C. Maintainability Algorithm

Maintainability is deﬁned as “the ease with which a
software system or component can be modiﬁed to correct
faults, improve performance or other attributes, or adapt to a
changed environment”–IEEE. There have been many models
proposed to quantify maintainability [14]–[16], but we propose
a simpliﬁed model based on metrics analyzed by Razina
and Janzen [2]. We believe comparing normalized metrics
across projects would more accurately reﬂect how maintain-
ability changes when DI proportion changes. We compute
maintainability using the CBO, LCOM and RFC metrics. We
then normalize CBO as NCBO using the module complexity
formula proposed by Okike [17], CM = 1 − 1
1+IS , where CM
is the module complexity (normalized CBO), and IS is the
coupling complexity (CBO). We also normalize RFC as NRFC
using the module complexity formula. We normalize LCOM
as NLCOM using the Best-Fit normalization approach [17],
where NLCOM = 1/LCOM if LCOM is not 0, otherwise
NLCOM = 0 if LCOM is 0. Given that, maintainability can
be computed as MAI.

M AI = 1 −

N CBO
3

−

N LCOM
3

−

N RF C
3

(2)

where the value of MAI, NCBO, NLCOM, and NRFC is in the
range of [0, 1]. A MAI score of 1 is the highest maintainability,

and a MAI score of 0 is the lowest maintainability. As CBO,
LCOM, and RFC increase, the system becomes more complex
and less maintainable. That is, a system with very high CBO,
LCOM and RFC will result in a system that is extremely
difﬁcult to maintain. However, MAI does not take into account
dependency injection and thus, it cannot capture the impact
of dependency injection on maintainability. So, we substitute
NCBO with NDCBO (normalized DCBO) to consider depen-
dency injection. We propose DMAI (Dependency Injection-
Weighted Maintainability);

DM AI = 1 −

N DCBO
3

−

N LCOM
3

−

N RF C
3

(3)

CKJM-Analyzer parses the metric results from CKJM-DI,
computes the metric means, and calculates maintainability
with Formula 2, as well as dependency injection-weighted
maintainability with Formula 3.

V. DATA ANALYSIS

In this section, we use CKJM-Analyzer to analyze artiﬁ-
cially generated Java projects, as well as open-source projects.

A. Experimental Data

We ﬁrst test CKJM-Analyzer and DCBO using artiﬁcially
generated Java projects. In an effort
to showcase CKJM-
Analyzer use and DCBO, we created simple Java projects [18]
and performed DI analysis using our tools (viz. CKJM-
Analyzer and CKJM-DI) [8], [19]. Each project contains
a Dog class and ten DogPen classes. The projects range
from di 0 that has every DogPen class initializing its own
Dog dependency class (following the CWD pattern [3]), and
di 100 that has every DogPen class using an injected Dog
dependency class (following the CND pattern [3]). A total of
11 projects were created, and CKJM-Analyzer was executed
on the projects.

Table I shows the results of non-normalized metrics from
the application. Of the metrics included in the MAI metric,
only RFC sees a small decrease as DI increases. Both CBO
and LCOM remain unchanged regardless of the amount of
DI in the system. CBO stays consistent because it does not
weigh CND differently from CWD, and sees all patterns of
DI proposed by Yang et al. [3] as the same type of coupling.
Contrarily, DCBO has a noticeable decrease as DI increases
- increasing DI From 0% to 100% decreases DCBO coupling
by 50%. DCBO weighs CWD more heavily than CND, and
therefore shows a reduction in coupling as DI increases in the
system.

Table II shows the normalized metric and MAI results with
unweighted CBO which are visualized in Figure 1. The results
show that given the small decrease in RFC as DI increases,
there is a slight overall increase in MAI as DI increases.

Table III shows the normalized metric and MAI results with
DCBO, and Figure 2 visualizes the results. The results show
that NDCBO decreases as DI increases, which increases MAI
more than the unweighted CBO results.

Project
di 0
di 10
di 20
di 30
di 40
di 50
di 60
di 70
di 80
di 90
di 100

DI
0.0
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
1.0

CBO
1.82
1.82
1.82
1.82
1.82
1.82
1.82
1.82
1.82
1.82
1.82

DCBO
1.82
1.73
1.64
1.55
1.45
1.36
1.27
1.18
1.09
1.00
0.91

LCOM RFC
2.91
2.82
2.73
2.64
2.55
2.45
2.36
2.27
2.18
2.09
2.00

0
0
0
0
0
0
0
0
0
0
0

LOC
108
106
104
102
100
98
96
94
92
90
88

DI
0.0
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
1.0

NDCBO
0.64
0.63
0.62
0.60
0.59
0.57
0.56
0.54
0.52
0.50
0.47

NRFC
0.74
0.73
0.73
0.72
0.71
0.71
0.70
0.69
0.68
0.67
0.66

NLCOM DMAI
0.54
0.54
0.55
0.56
0.56
0.57
0.58
0.59
0.60
0.61
0.62

0
0
0
0
0
0
0
0
0
0
0

TABLE I
CKJM-ANALYZER EXPERIMENTAL ANALYSIS RESULTS

TABLE III
NORMALIZED WEIGHTED CKJM-ANALYZER EXPERIMENTAL RESULTS

DI
0.0
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
1.0

NCBO
0.65
0.65
0.65
0.65
0.65
0.65
0.65
0.65
0.65
0.65
0.65

NRFC
0.74
0.74
0.73
0.73
0.72
0.71
0.70
0.69
0.69
0.68
0.67

NLCOM MAI
0.54
0.54
0.54
0.54
0.55
0.55
0.55
0.55
0.56
0.56
0.56

0
0
0
0
0
0
0
0
0
0
0

TABLE II
NORMALIZED UNWEIGHTED CKJM-ANALYZER EXPERIMENTAL RESULTS

Fig. 2. Experimental Maintainability Analysis Using DCBO

TABLE IV
HOLM / SHAFFER TABLE FOR α = 0.05

algorithms
“No DI” DMAI vs. “DI” DMAI
“No DI” MAI vs. “DI” MAI

p
0.0143
0.0500

TABLE V
EXPERIMENTAL FRIEDMAN STATISTICAL ANALYSIS

Fig. 1. Experimental Maintainability Analysis Using CBO

Finally, we perform Friedman statistical analysis [20] by
splitting the data set in half – projects with DI < 0.5 are
labeled“No DI”, and projects with DI > 0.5 are labeled “DI”
– and determining whether there is a signiﬁcant difference
with respect to MAI or DMAI. The output of the statistical
tool described in Derrac et al. [21] is displayed in Table V.

According to the tool, when α = 0.05, Bergmann’s pro-
cedure rejects “No DI” DMAI vs. “DI” DMAI, indicating
signiﬁcance in maintainability with respect to DI using DCBO.
However, Bergmann’s procedure does not reject “No DI” MAI
vs. “DI” MAI, indicating no signiﬁcance in maintainability
with respect to DI using unweighted CBO.

B. Open-Source Data

We test CKJM-Analyzer using open-source projects com-
piled from Yang et al.’s work [3] and Tempero et al.’s
work [22]. We found the projects in online repositories as a
jar ﬁle or a folder of class ﬁles. There are several motivations
for analysis. First, we want to see whether the experimental
observations (CBO remains the same regardless of DI, while
DCBO decreases while DI increases) are reproducible in real-
world projects. Second, we also want to assess the practicality
of the proposed maintainability metric.

Table VI shows the non-normalized metric results from
the open-source analysis. The range of DI proportion present
across projects is much smaller than the experimental results
(0.1-0.5 instead of 0.0-1.0).

Table VII shows the normalized metric results. In the
results, small increases in MAI and DMAI as DI increases
are observed. Figure 3 visualizes the normalized coupling and
maintainability results as trendlines. Similar to the experimen-

Project
argouml
poi
ireport
wro4j
ﬁtjava
jhotdraw
ant
hsqldb
advancedGwt
ganttproject
jGap
jchempaint
pdfBox
picocontainer
mars
tomcat
jfreechart
jHotDraw
log4j
colt
xerces

DI
0.12
0.17
0.20
0.23
0.25
0.26
0.26
0.28
0.30
0.30
0.31
0.33
0.33
0.34
0.36
0.36
0.36
0.37
0.38
0.48
0.50

CBO
9.89
7.65
4.00
7.00
3.83
8.70
8.52
10.05
8.38
6.66
8.10
8.63
11.10
7.76
7.33
5.20
10.03
5.89
6.04
6.75
5.36

DCBO
9.30
6.99
3.59
6.21
3.34
7.55
7.40
8.66
7.13
5.66
6.82
7.23
9.27
6.44
6.02
4.26
8.20
4.80
4.88
5.13
4.02

LCOM RFC
23.12
36.49
26.55
91.11
15.35
41.64
15.93
23.27
16.49
22.54
19.97
77.32
25.94
50.50
37.85
223.99
23.21
122.34
26.32
133.69
21.68
77.25
26.60
144.77
25.31
68.27
14.93
16.92
17.84
28.50
19.29
35.08
33.22
200.44
25.55
98.71
19.91
44.27
18.73
53.22
20.36
96.51

LOC
262584
124773
21378
29059
5178
66843
54268
145646
33199
66120
970716
880275
158833
8931
108126
54343
160004
370465
36336
101730
196673

TABLE VI
CKJM-ANALYZER OPEN-SOURCE ANALYSIS RESULTS

tal results, there is a greater decrease in NDCBO compared
to NCBO as DI increases, and a greater increase in DMAI
compared to MAI as DI increases.

DI
0.12
0.17
0.20
0.23
0.25
0.26
0.26
0.28
0.30
0.30
0.31
0.33
0.33
0.34
0.36
0.36
0.36
0.37
0.38
0.48
0.50

NCBO
0.91
0.88
0.80
0.88
0.79
0.90
0.89
0.91
0.89
0.87
0.89
0.90
0.92
0.89
0.88
0.84
0.91
0.85
0.86
0.87
0.84

NLCOM NRFC MAI
0.37
0.38
0.41
0.38
0.41
0.38
0.37
0.37
0.38
0.39
0.38
0.38
0.37
0.37
0.38
0.39
0.37
0.39
0.39
0.39
0.40

0.96
0.96
0.94
0.94
0.94
0.95
0.96
0.97
0.96
0.96
0.96
0.96
0.96
0.94
0.95
0.95
0.97
0.96
0.95
0.95
0.95

0.03
0.01
0.02
0.04
0.04
0.01
0.02
0.00
0.01
0.01
0.01
0.01
0.01
0.06
0.04
0.03
0.00
0.01
0.02
0.02
0.01

NDCBO
0.90
0.87
0.78
0.86
0.77
0.88
0.88
0.90
0.88
0.85
0.87
0.88
0.90
0.87
0.86
0.81
0.89
0.83
0.83
0.84
0.80

DMAI
0.37
0.38
0.42
0.38
0.41
0.38
0.38
0.37
0.39
0.39
0.39
0.38
0.37
0.38
0.39
0.40
0.38
0.40
0.40
0.40
0.41

TABLE VII
NORMALIZED CKJM-ANALYZER OPEN-SOURCE ANALYSIS RESULTS

We perform Friedman statistical analysis [20] by splitting
the data set in half. Given the nature of the data set, the cutoff
point for the open-source projects differs from the cutoff point
for the experimental projects – projects ≤ 0.3 are labeled “No
DI”, and projects > 0.3 are labeled “DI”. The analysis shows
no signiﬁcance for either MAI or DMAI, but a much lower
p value is observed when maintainability is analyzed using
DCBO as compared to CBO.

Fig. 3. Open-Source Maintainability and Coupling Analysis Trendlines

TABLE VIII
HOLM / SHAFFER TABLE FOR α = 0.05

algorithms
NDI-DMAI vs. DI-DMAI
NDI-MAI vs. DI-MAI

p
0.2253
0.9999

VI. DISCUSSION

In this section, we discuss the implications of the experi-
mental and open-source project results, as well as future steps.
Experimental results prove the soundness of CKJM-
Analyzer and DCBO: According to Table I, only RFC de-
creased as DI increased, while CBO and LCOM remained
the same. Our argument
that CBO does not weigh DI’s
impact on the system is shown given the coupling value
did not change. More speciﬁcally, as we are now drawing a
distinction between CND/MND and CWD/MWD patterns [3],
the experimental results show that CBO views a dependency
added via parameter injection the same as one added via new
initialization (the “default” object). In other words, CBO views
coupling the same, regardless of whether class implements the
CND/MND or the CWD/MWD pattern.

The Friedman analysis on the experimental data in Table V
shows a signiﬁcant change in DMAI when comparing “No DI”
projects with “DI” projects, but no signiﬁcant change in MAI
when comparing “No DI” projects with “DI” projects. This in-
dicates that, when using DCBO as the coupling metric instead
of CBO, a signiﬁcant increase in maintainability is observed in
systems with higher DI. Under the speciﬁc conditions where
the primary difference in projects is the amount of DI they
contain, DCBO would signiﬁcantly impact maintainability,
while CBO would not signiﬁcantly impact maintainability.

Open-source project results do not reﬂect experimental
results: When splitting the data set in half to compare “No DI”
against ”DI” projects, no signiﬁcant increase in maintainability
was found using either CBO or DCBO. We believe there are
a few reasons for this. Firstly, the range of DI proportion
analyzed in open-source projects (0.1-0.5) was much lower
than the range of DI proportion analyzed in experimental
projects (0.0-1.0). Secondly, we did not consider XML-based
DI, which may contribute to an increase in DI and DCBO.

[2] E. Razina and D. S. Janzen, “Effects of dependency injection on main-
tainability,” in Proceedings of the 11th IASTED International Conference
on Software Engineering and Applications, Cambridge, MA, 2007, pp.
7–12.

[3] H. Y. Yang, E. Tempero, and H. Melton, “An empirical study into use
of dependency injection in java,” in Proceedings of the 19th Australian
Conference on Software Engineering, 2008.

[4] Y. Lee and K. H. Chang, “Reusability and maintainability metrics
for object-oriented software,” in Proceedings of the 38th annual on
Southeast regional conference, 2000, pp. 88–94.

[5] M. Crasso, C. Mateos, A. Zunino, and M. Campo, “Empirically as-
sessing the impact of dependency injection on the development of Web
Service applications,” Journal of web Engineering, vol. 9, no. 1, pp.
66–94, 2010.

[6] S. Roubtsov, A. Serebrenik, and M. van den Brand, “Detecting mod-
ularity” smells” in dependencies injected with Java annotations,” in
Proceedings of the 14th European Conference on Software Maintenance
and Engineering, 2010, pp. 244–247.

[7] R. Laigner, M. Kalinowski, L. Carvalho, D. Mendonc¸a, and A. Garcia,
“Towards a Catalog of Java Dependency Injection Anti-Patterns,” in
Proceedings of the 33rd Brazilian Symposium on Software Engineering,
2019, pp. 104–113.

[8] “CKJM-Analyzer.” [Online]. Available: https://github.com/Narnian12/

ckjm-analyzer

[9] “D Spinellis. Chidamber and kemerer

java metrics,” accessed:

2020-9-22. [Online]. Available: http://www.spinellis.gr/sw/ckjm/
[10] A. Saidulu, “Assessing Weight of the Coupling between Objects towards
Defect Forecasting in Object Oriented Programming,” Global Journal
of Computer Science and Technology, vol. 14, no. 8, pp. 35–39, 2014.
[11] E. Gamma, R. Helm, R. Johnson, R. E. Johnson, and J. Vlissides, Design
Addison-

patterns: elements of reusable object-oriented software.
Wesley, 1995.

[12] M. Fowler, Inversion of control containers and the dependency injection

pattern, 2004, accessed: 2020-8-06.

[13] S. R. Chidamber and C. F. Kemerer, “A metrics suite for object oriented
design,” IEEE Transactions on Software Engineering, vol. 20, no. 6, pp.
476–493, 1994.

[14] R. Lincke, J. Lundberg, and W. L¨owe, “Comparing Software Metrics
Tools,” in Proceedings of the 2008 international symposium on Software
testing and analysis, 2008, pp. 131–142.

[15] P. Oman and J. Hagemeister, “Metrics for assessing a software system’s
maintainability,” in Proceedings Conference on Software Maintenance,
1992, pp. 337–344.

[16] B. C. Wagey, B. Hendradjaya, and M. S. Mardiyanto, “A proposal
of software maintainability model using code smell measurement,”
in Proceedings of International Conference on Data and Software
Engineering, 2015, pp. 25–30.

[17] E. Okike, “An Evaluation of Chidamber and Kemerer’s Lack of
Cohesion in Method (LCOM) Metric Using Different Normalization
Approaches,” African Journal of Computing and ICT, vol. 1, no. 2,
pp. 35–54, 2008.

[18] “ckjm-di-projects.” [Online]. Available: https://github.com/Narnian12/

ckjm-di-projects

[19] “ckjm-di.” [Online]. Available: https://github.com/Narnian12/ckjm-di
[20] S. Garcia and F. Herrera, “An extension on ’statistical comparisons of
classiﬁers over multiple data sets’ for all pairwise comparisons,” Journal
of Machine Learning Research, vol. 9, pp. 2677–2694, 2008.

[21] J. Derrac, S. Garc´ıa, S. Hui, P. N. Suganthan, and F. Herrera, “Analyz-
ing convergence performance of evolutionary algorithms: A statistical
approach,” Information Sciences, vol. 289, pp. 41–58, 2008.

[22] E. Tempero, C. Anslow, J. Dietrich, T. Han, J. Li, M. Lumpe, H. Melton,
and J. Noble, “The qualitas corpus: A curated collection of java code for
empirical studies,” 2010 Asia Paciﬁc Software Engineering Conference,
pp. 336–345, 2010.

Lastly, we did not deﬁne a set cutoff for when to deem a
project as implementing DI (i.e. how much DI should be
present in the system to determine it uses DI). Given that the
threshold was different from the experimental and open-source
analyses, having a lower cutoff (0.3 for the open-source results
compared to 0.5 for the experimental results) could reduce the
impact on maintainability between “No DI” and “DI” projects.
Different normalization techniques and metrics should be
considered when computing maintainability: The normaliza-
tion techniques employed on CBO, LCOM and RFC worked
best on CBO because CBO values were closest to 1. LCOM
had consistently high values, which normalized very close
to 0, while RFC normalized very close to 1. Only CBO
and DCBO saw substantial differences in their normalized
values. In particular, LCOM has been viewed as a difﬁcult
metric to compare [17] because it is not normalized and the
values have a high variance (as shown in the open-source
results in Section V). Future research should consider other
techniques to provide more meaningful normalization, or limit
comparisons to similar projects so that metrics can be better
compared (similar to Razina and Janzen’s work [2]).

CKJM-Analyzer and DCBO may be useful in building
more maintainable software: This paper covers only a small
section of how DI can impact the maintainability of a project.
In particular, we argued that DI via parameter injection in-
stead of new object (”default” object) construction improves
maintainability by reducing the number of ﬁles that need to
be changed should the injected class’ constructor parameters
change. Given the observation that DI does not impact CBO,
CKJM-Analyzer and DCBO explicitly incorporate DI as a fac-
tor in weighing coupling differently and, therefore, impacting
maintainability. One future work of CKJM-Analyzer would
be determining which portions of the software are using the
CWD/MWD patterns and replacing them with the CND/MND
patterns [3]. Another work would be making CKJM-Analyzer
cross-platform as right now it is only usable on the Windows
OS.

VII. CONCLUSION

We have presented CKJM-Analyzer, a command line tool
to analyze DI and maintainability, as well as DCBO, a
weighted coupling metric that explicitly considers parameter-
injected patterns of DI as a more maintainable framework.
The algorithm used to detect DI is deﬁned and the formulae
to compute maintainability are discussed. The experimental
results show that DI signiﬁcantly improves maintainability
when DCBO is considered, but does not signiﬁcantly improve
maintainability when CBO is considered. More research is
needed to determine whether open-source projects show that
same signiﬁcance. We argue that DI may contribute to more
maintainable software by reducing the developer ”effort” when
a dependency change is required.

REFERENCES

[1] R. Johnson, J. Hoeller, K. Donald, C. Sampaleanu, R. Harrop, T. Ris-
berg, and A. A. et al, The spring framework-reference documentation.
interface, 2004.

