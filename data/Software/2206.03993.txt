FINDING AND FOLLOWING OPTIMAL TRAJECTORIES FOR AN OVERACTUATED
FLOATING ROBOTIC PLATFORM

A. Bredenbeck1,3, S. Vyas2,3, W. Suter3, M. Zwick3, D. Borrmann1, M. Olivares-Mendez4, and A. Nüchter1
1Informatics VII, University of Würzburg, Germany
2Robotics Innovation Centre (RIC), DFKI
3Automation and Robotics Group, ESA, Noordwijk, Netherlands
4SpaceR-SnT, University of Luxembourg, Luxembourg

2
2
0
2

l
u
J

9
1

]

O
R
.
s
c
[

2
v
3
9
9
3
0
.
6
0
2
2
:
v
i
X
r
a

ABSTRACT

The recent increase in yearly spacecraft launches and the
high number of planned launches have raised questions
about maintaining accessibility to space for all interested
parties. A key to sustaining the future of space-ﬂight is
the ability to service malfunctioning - and actively re-
move dysfunctional spacecraft from orbit. Robotic plat-
forms that autonomously perform these tasks are a topic
of ongoing research and thus must undergo thorough test-
ing before launch. For representative system-level test-
ing, the European Space Agency (ESA) uses, among
other things, the Orbital Robotics and GNC Lab (ORGL),
a ﬂat-ﬂoor facility where air-bearing based platforms ex-
hibit free-ﬂoating behavior in three Degrees of Freedom
(DoF). This work introduces a representative simulation
of a free-ﬂoating platform in the testing environment and
a software framework for controller development. Fi-
nally, this work proposes a controller within that frame-
work for ﬁnding and following optimal trajectories be-
tween arbitrary states, which is evaluated in simulation
and reality.

Key words: Space Robotics; Optimization and Optimal
Control.

1.

INTRODUCTION

Space debris is widely recognized as a signiﬁcant prob-
lem for safely operating spacecraft in orbit [1–4]. Espe-
cially the popular orbits experience more usage and are
slowly becoming crowded. Despite extensive require-
ments for ensuring a safe de-orbit of a satellite some
spacecraft and debris already are and will remain in or-
bit indeﬁnitely. Many experts in the community argue
that Active Space Debris Removal (ASDR) will play a
key role in maintaining accessibility to these popular or-
bits [5–7]. Automatic robotic systems for ASDR are topic
of ongoing research and thus require stringent testing on
a full system level before launch. At the cost of reducing
the system to three DoF, air-bearing platforms on ﬂat-
ﬂoors provide a representative environment to test tech-
nologies in the free-ﬂoating domain, which is otherwise

difﬁcult to emulate. Such a facility is present at ESTEC,
an ESA facility. The ORGL, as described in detail in [8,
9 m epoxy ﬂat-ﬂoor and houses
9], consists of a 5 m
multiple ﬂoating platforms. The ﬂoating platforms func-
tions are twofold: Firstly, it functions as a target for test-
ing new technologies in ASDR. Secondly, it provides a
base for tested modules that are mounted on top of the
stack and thus are tested independently of the basic mo-
tion.

×

This works has two main contributions. Firstly it in-
troduces a high-ﬁdelity simulation and visualization of
a generic ﬂoating platform that resembles the ﬂoat-
ing platform at the ORGL using the robotics simulator
Gazebo [10]. Secondly, this work proposes a modular
control architecture for ﬂoating platforms equipped with
binary thrusters and a Reaction-Wheel (RW).

The remainder of this work is structured as follows: ﬁrst,
section 2 introduces a system model. Afterwards sec-
tion 3 explains the developed simulation before section 4
explains the control framework and showcases it on an
example of an optimal trajectory ﬁnding and tracking
controller. Finally, section 5 summarizes the results and
gives an outlook on future work.

2. SYSTEM DESCRIPTION

One of the ﬂoating platforms within the ORGL, consists
of a modular stack that resembles a realistic satellite ac-
tuator assembly. In the following this work ﬁrst describes
the used hardware and then continues to introduce the dy-
namic model used to approximate the overall system.

2.1. Hardware

The ﬂoating platform consists of three modules as de-
picted in Figure 1. They each serve an individual func-
tion:

• Air Cushion Robotic Platform (ACROBAT)

is
equipped with three air-bearings and provides a
ﬂoating base.

 
 
 
 
 
 
Table 1: Mass, Moment of Inertia (MoI) and size proper-
ties of the subsystems and the overall sum.

Subsystem Mass
ACROBAT 154 kg
50 kg
SATSIM
13.66 kg
RECAP
4.01 kg
RW
221.67 kg
Σ

MoI
10.090 kgm2
1.416 kgm2
0.67 kgm2
0.047 kgm2
12.223 kgm2

Radius
Height
35 cm
62.5 cm
35 cm
20 cm
35 cm
20 cm
–
–
102.5 cm –

• Satellite Simulator (SATSIM) is equipped with four
pairs of counter-facing, radially aligned, solenoid-
valve-based thrusters. Each provides approximately
¯f = 10 N of thrust. Further it houses two com-
pressed air tanks that function as the propellant stor-
age.

• Reaction Control Autonomy Platform (RECAP) is a

RW and provides a torque on the system.

When mounted together they form the full ﬂoating plat-
form. Table 1 shows the inertial parameters of the indi-
vidual modules and the overall system.

2.2. Dynamic Model

This work models the system as an assembly of per-
fect geometry shapes, which are denoted as links. Links
are connected via different joints and forces and torques
(wrenches) act on individual joints or links.

As depicted in Figure 2, the model consists of a large
cylinder, representing the main chassis, eight small rect-
angular boxes, representing the eight thrusters, and a
smaller cylinder representing the RW. The thrusters are
connected via ﬁxed joints whereas the RW connects to
the main chassis via a revolut joint.

Figure 1: The modular ﬂoating platform stack consisting
of the three modules ACROBAT (blue), SATSIM (green)
and RECAP (red) – the ﬂoating base, thruster assembly
and RW respectively. The stack is pictured in its mount-
ing crane used to hoist it on the ﬂat-ﬂoor.

This work denotes the forces produced by the thrusters
at the i-th instance as fi attacking at the origin of the
rectangular box link, and the torque the motor produces
on the revolut joint that connects the RW as τ . Since the
thrusters are solenoid valves they only allow for the states
on and off, i.e. fi
[0, 7]. Thus, the control
} ∀
∈ {
vector u consists of the eight forces by the thrusters and
the torque on the RW:

0, ¯f

∈

i

u = [τ

f0

f1

f2

f3

f4

f5

f6

f7]T .

(1)

The following state vector x describes the system state
when moving along the three DoF:

x = (cid:2)x y

θ

˙x

˙y

˙θ ωRW

(cid:3)T

,

(2)

where x, y, θ describe the system position and orientation
with respect to the world coordinate system and ωRW de-
scribes the current angular velocity of the RW.

Assuming a perfectly ﬂat ﬂoor and zero friction between
the main chassis and the ﬂoor the resulting state equation

Figure 2: Deﬁnitions of coordinate systems and wrenches
supplied by the actuators. The position of the system is
deﬁned in some world coordinate system and the orien-
tation as the angle between the world coordinate system
and the local coordinate system. The torque τ and the
RW velocity ωRW are deﬁned in mathematical positive
direction and the forces for all individual thrusters are
also numbered in mathematically positive direction. Nat-
urally, counting starts at zero.

is:

˙x =



+







0
0
−1
Ib
1
Iw
+ w ,

(cid:20)03×3

I 3×3
04×7

(cid:21)
0

x

−sθ
m
cθ
m
r
Ib

sθ
m
−cθ
m
−r
Ib

−cθ
m
−sθ
m
r
Ib

sθ
m
−cθ
m
r
Ib

−sθ
m
cθ
m
−r
Ib

cθ
m
sθ
m
r
Ib









−cθ
m
−sθ
m
−r
Ib

(3)

u

03×7
cθ
m
sθ
m
−r
Ib
01×6

where sθ and cθ denote the sine and cosine of the respec-
tive angle, m is the system mass, Iw and Ib are the MoI
of the RW and the overall system respectively, and w in-
corporates all external disturbances. Note that each coor-
dinate individually exhibits simple double integrator be-
havior.

The system pose is measured via a global Motion-
Capture (MoCap) system and the current RW velocity via
a motor encoder. Thus the output matrix of the state space
system is identity and noise v is assumed to be Additive
White Gaussian Noise (AWGN):

y = Ix + v .

(4)

3. SIMULATION

This section introduces the simulation used to emulate the
dynamic model described in section 2.2. This allows for
faster and safer prototyping before testing on the physical
hardware. To increase the transferability of the results
from simulation to the physical system some real-world
approximations are incorporated.

3.1. Sensor Noise

In any physical system sensors are subject to noise. As
captured by the measurement equation (4), this work as-
sumes the noise to be AWGN. I.e.
in the simulation a
term drawn from the zero-mean, two dimensional Gaus-
sian distributions, with the standard deviations σposition,
σvelocity is added to the (x, y) position and ( ˙x, ˙y) veloc-
ity before publishing. The same is done for the angular
velocity ˙θ with a standard deviation σang−velocity. Since
the orientation θ is not in euclidean space the sensor noise
cannot directly be added. Instead a noise angle is drawn
from a zero-mean Gaussian distribution with standard de-
viation σangle and the equivalent unit quaternion is com-
puted. The true pose is then multiplied with this noise
quaternion before publishing the resulting noisy orienta-
tion.

3.2. Uneven Floor

The ﬂat-ﬂoor at the ORGL is one of the ﬂattest of its
kind, however, the small slopes that exist on the ﬂoor are
enough to introduce signiﬁcant disturbances into the sys-
tem. The simulation models this unevenness in Gazebo

Figure 3: Height-map used to simulate the unevenness
of the ﬂat-ﬂoor. Blue colors imply low regions and red
colors high regions. All regions outside the main ﬂat-
ﬂoor are set to some arbitrary medium height.

using a Digital Elevation Model (DEM). In particular,
the measurements from [8] provide the base for the
DEM. Gazebo natively supports the creation of DEM
from a gray-scale png image. It requires the image to
be quadratic and the resolution to be of the form 2N +
1 where N
0 . Hence, to strike a balance between
resolution and computational complexity the height-map
is chosen to be of resolution 513 px
513 px, which is
equivalent to approximately 2 cm/px. Figure 3 shows
the resulting height-map.

N+

×

∈

4. CONTROL

For each controller one has to make choices on design
and architecture. With the goal of modularity and the
constraints of the system in mind this section ﬁrst intro-
duces the modular control architecture and then continues
to showcase a speciﬁc implementation.

4.1. Architecture

The architecture consists of two main building blocks: a
trajectory planner that pre-computes optimal trajectories
and a trajectory tracker that follows those trajectories.
The problem of ﬁnding optimal binary control actions is
of the problem class Mixed-Integer Non-Linear Program-
ming (MINLP) which are considered computationally in-
tractable, even for smaller dimensional state-spaces [11].
Thus, this work proposes to use a simpliﬁed model that
relaxes the binary condition on the thrusters for the plan-
ner and parts of the tracker. These continuous control
values are then translated on the binary thrusters using
some modulation scheme. Thus, the tracker consists of
a feedback controller that computes controls of the sim-
pliﬁed model online, a modulator that translates the con-
tinuous control onto the binary thrusters and an observer

In particular, the system state and control action are dis-
cretized along time at N knot points where the ﬁrst and
last correspond to the starting and the desired ﬁnal state.
The state as well as the control action are subject to linear
bounding box constraints and the system dynamics, i.e. at
each knot point the state and control action must yield the
next state when propagated through the system dynamics
as in equation (3), while not exceeding the state and con-
trol limits. Direct collocation [14] (Hermite-Simpson) is
chosen as the transcription method.

The optimization problem is solved ofﬂine using the
programming interface “Drake” [15] to the open source
solver “IPOPT” [16]. To compute the continuous online
control to follow the trajectory this work uses a Time-
Varying Linear Quadratic Regulator (TVLQR) as intro-
duced in [17]. The continuous control is further fed to
the modulator, which is implemented as a Σ∆-Modulator
as in [18]. Finally, the system state is estimated using a
classic Kalman Filter [19].

Results The previously introduced controller is tested
in simulation, on a perfectly ﬂat ﬂoor and on a ﬂoor de-
scribed by the DEM, as well as on the physical system. In
simulation the tested trajectory is a set of 40 states where
each lies on a circle of radius 0.5 m with a constant tan-
gential velocity. Between each consecutive pair of states
the trajectory planner ﬁnds an optimal trajectory. Fig-
ure 5 shows the resulting position, velocity and required
continuous actuation.

Figure 6 shows the simulated results. As displayed quali-
tatively by the groundtrack the system follows the desired
trajectories in simulation with a small error. Table 2 dis-
plays the average errors along the trajectory and conﬁrms
this quantitatively. On the perfectly ﬂat ﬂoor the average
euclidean error stays below 3.5 cm and the angular er-
ror below 5°. The average euclidean error approximately
doubles for the uneven ﬂoor but remains below 8 cm and
the average angular error remains the same. The average
angular error is similar for both cases because the system
model has a single-cylinder as the main chassis, which
only experiences disturbance forces due to the uneven
ﬂoor. However, it experiences no disturbance torques
since the cylinder has a single contact to the uneven ﬂoor.

On the physical system the controller is tested by follow-
ing an optimal straight line trajectory connecting two zero
velocity states and a semi-circle (half of the simulated tra-
jectory). Figure 7 and 8 show the results on the physical
system.

Compared to the previous, simulated results the perfor-
mance signiﬁcantly decreases, increasing the average eu-
clidean error by approximately an order of magnitude (cf.
table 2). For the straight-line trajectory the largest error
occurs along the x-axis. This is due to the slope of the
ground introducing larger disturbance along that direc-
tion. In particular the region between the local maximum
at (1.75, 1.5) and the minimum at (0.5, 1.5) (cf. Figure 3)
imposes a signiﬁcant acceleration. Thus, the controller

Figure 4: The basic building blocks of the control frame-
work: a trajectory planner that pre-computes trajectories,
and a trajectory tracker that follows the trajectories.

that estimates the current system state using the most re-
cent measurements and binary control actions. Figure 4
visualizes this overall structure.

The software used in this work realizes the controller in
Robot-Operating-System 2 (ROS2) [12]. Hence, each
module and sub-module represents an individual node
that communicates via topics, services, and actions. In
particular, each module can be replaced by a different
version that implements the respective interface and pub-
lishes to the correct topics.

4.2. Finding and Following Optimal Trajectories

Using this architecture this work showcases a controller
that pre-computes trajectories that minimize the force ap-
plied by the thrusters and follows them.

Control Law The optimal trajectories are computed for
the simpliﬁed system in which the thrusters can provide
continuous force. In this simpliﬁed system the problem of
ﬁnding an optimal trajectory that minimize the quadratic
actuation, weighted by some matrix R, is equivalent to
solving a quadratic program as described in [13]. The re-
sulting optimization problem over all states X and con-
trol values U at all knot-points k

[1, N ] is:

∈

(cid:40) N
(cid:88)

k=1

min
X,U

(cid:41)

ukRuT
k

k

∀

∈

[1, N

−

1] s.t.

x(0) = xinit, x(tf ) = xf inal
xmin

xk

≤

≤
xk =

uk

xmax, umin
∆t
6

≤
(fk + 4fk+1/2 + fk+1)

≤

umax

xk+1

−

where

xk+1/2 =

uk+1/2 =

1
2
1
2

(xk + xk+1) +

(uk + uk+1)

∆t
8

(fk

−

fk+1)

(5)

+Trajectory TrackerState - Observer Trajectory Planner  FeedbackControlSystemdynamics -ModulatorConditions Sensors+Noise+Disturbance    +Physical

With
DEM

Straight-
Line

Simulated Circular
Without
DEM
0.0238 m 0.0566 m 0.256 m 0.317 m
0.0224 m 0.0506 m 0.200 m 0.311 m
0.0327 m 0.0759 m 0.325 m 0.444 m
4.52°

Semi-
Circle

51.2°

4.36°

23.8°

ex
ey
e|x,y|
eθ

Table 2: The average error of the system trying to follow
trajectories (simulated and on the physical system) for the
individual coordinates and the euclidean distance. Both
cases, with and without an DEM, are shown. The error
is computed from the desired trajectory and the ground-
truth pose obtained from the simulation.

remains in an equilibrium distance to the trajectory where
the cost of actuation is equivalent to the penalty due to the
pose error. Furthermore, in both trajectories the RW sat-
urates on both ends of the allowable range as depicted in
Figure 8. At each instance a larger deviation from the de-
sired orientation is observed which implies that large de-
sired changes in angular momentum of the entire system
quickly lead to RW saturation. For the semi-circle the
effect is even more signiﬁcant. Once the RW saturates
the system starts oscillating about the desired orientation,
falling into a large limit cycle of the orientation control
using the thrusters. The average euclidean distance to
the desired semi-circle is 0.444 m and the angular error
is 51.2°. Within the semi-circle trajectory one particular
downside of the a-priori planning approach is displayed.
The system slides down a steep slope (approximately at
the local blue minimum at (0, 2)) and gets ahead of the
trajectory. Since the trajectory follower does not recom-
pute the planned trajectory and only attempts to move the
system to a currently desired state, it returns to a previ-
ous location. It then follows the trajectory, resulting in
a loop in the ground-track. However, as shown by the
groundtracks, the general shape of the desired trajecto-
ries remains consistent. Further, as displayed by Figure 8
the thruster usage is of low frequency, never exceeding
the one-and two ﬁre per second threshold for the straight
line and the semi-circle respectively.

The major decrease from the simulation to the physical
system is attributed to two main factors: errors in the sys-
tem model and lack of control authority. The controller
would especially beneﬁt from a full system identiﬁcation
in terms of inertial parameters and individual thrust vec-
tor determination for each thruster. Moreover, given the
large weight of the system and the comparably low force
capabilities by the thrusters, high actuation is required to
compensate even small disturbances induced by the un-
evenness of the ﬂat-ﬂoor.

Figure 5: The optimal, pre-computed circular trajectory.
Each dot in the ground-track (top graph) represents one
state (position on the circle, constant tangential velocity),
in between which the trajectory planner computes an op-
timal trajectory.

5. SUMMARY

For system-level testing of spacecraft a ﬂat-ﬂoor in com-
bination with air-bearing based platforms provide a rep-
resentative setup for development and validation. At the
ESA the ORGL takes on this role. This work introduces

−1.0−0.50.00.51.0x [m]0.000.250.500.751.001.251.501.752.00y [m]−1012Coordinate [m]xy0100200300400500600Time [s]−1000100Orientation [°]θ−0.010.000.01m/s◌̇x◌̇y0.00.5°/s◌̇θ0100200300400500600Time◌̇[s]−25025RPMωRW−0.050−0.0250.0000.025Torque [Nm]0100200300400500600Time [s]0.000.010.02Force [N]f0f1f2f3f4f5f6f7Figure 6: Ground-track, individual coordinates, and velocity of the system following a circular trajectory in simulation.
Left: ideally even ﬂoor. Right: the ﬂoor is slightly uneven and induces disturbances. An animation of the trajectory is
given at https://youtu.be/1A5xJVEAU9w?t=42.

−1.0−0.50.00.51.0x[m]0.00.51.01.52.0y[m]RawObservedTrue−1.0−0.50.00.51.0x[m]0.00.51.01.52.0y[m]RawObservedTrue0.00.20.40.60.81.0Height[mm]−1012Coordinate[m]xnoisyynoisyˆxˆyxy0100200300400500600700t[s]−1000100Orientation[◦]θnoisyˆθθ−1012Coordinate[m]xnoisyynoisyˆxˆyxy0100200300400500600700t[s]−1000100Orientation[◦]θnoisyˆθθ−0.10.00.1Velocity[m/s]ˆ˙xˆ˙y˙x˙y0100200300400500600700t[s]−20020AngularVelocity[◦/s]ˆ˙θ˙θ−0.10.00.1Velocity[m/s]ˆ˙xˆ˙y˙x˙y0100200300400500600700t[s]−20020AngularVelocity[◦/s]ˆ˙θ˙θFigure 7: Ground-track and individual coordinates of the controller following a straight-line trajectory (top row) and
a semi-circular trajectory (bottom row) on the real system. After reaching the ﬁnal pose of the trajectory plots (right)
in the coordinate plots, the desired value is indicated as a dashed line. Videos of the trajectories are given at https:
//youtu.be/1A5xJVEAU9w?t=243

(a)

(b)

Figure 8: Actuation of following trajectories on the physical system (cf. Figure 7). Figure 8a shows the actuation for the
straight line, Figure 8b for the semi-circle. For both the top left shows the torque exerted by the motor onto the RW, the
top right the resulting RW velocity (raw and observed), and the bottom the thruster activity for all eight thrusters.

0.00.51.0x[m]0.000.250.500.751.001.251.501.752.00y[m]OptimalFollowed012Coordinate[m]x0y0xy020406080100120t[s]0100200300Orientation[◦]θ0θ012x[m]−0.50.00.51.01.52.02.53.0y[m]OptimalTrajectoryFollowedTrajectory012Coordinate[m]x0y0xy050100150200250300t[s]0100Orientation[◦]θ0θ020406080100120t[s]−1.5−1.0−0.50.00.51.01.5Torque[Nm]020406080100120t[s]−500−400−300−200−1000RW-Speed[RPM]ˆωRWωRWf0f1f2f3f4f5f6020406080100120t[s]f7050100150200250300t[s]−1.5−1.0−0.50.00.51.01.5Torque[Nm]050100150200250300t[s]−500−400−300−200−1000RW-Speed[RPM]ˆωRWωRWf0f1f2f3f4f5f6050100150200250300t[s]f7a simulation, developed with ROS2 and Gazebo, of the
ﬂoating platform within the ORGL at the ESA. The sim-
ulation uses an approximate model of the ﬂoating plat-
form and takes the small unevenness of the ﬂat-ﬂoor as
well as sensor noise into account to model and visualize
trajectories of the system. This allows for pre-validation
and testing of newly developed algorithms in software be-
fore testing it in hardware. Further, this work introduces
an open-source ROS2 framework for controllers of free-
ﬂoating platform. Using the example of an optimal tra-
jectory ﬁnding and following controller the functionality
of the development framework as well as the accuracy of
the simulation are showcased.

In future work the ﬁdelity of the simulation will be further
improved. Among other things this will include a more
accurate simulated representation of the system geome-
try, a full system identiﬁcation of the ﬂoating platform,
including individual thrusters thrust vectors, and step re-
sponses for all actuators.

ACKNOWLEDGMENTS

The authors acknowledge the support of Stardust
Reloaded project which has received funding from the
European Union’s Horizon 2020 research and innovation
programme under the Marie Skłodowska-Curie grant
agreement No 813644 and the Elite Network Bavaria
(ENB) for providing funds for the academic degree
program “Satellite Technology”.
To abide by the FAIR principles of science, all soft-
ware created for this work is available as open source:
https://gitlab.com/anton.bredenbeck/
ff-trajectories.

REFERENCES

[1] Richard Crowther. “Space Junk–Protecting Space
for Future Generations”. In: Science 296.5571
(2002), pp. 1241–1242.

[2] Christopher J. Newman and Mark Williamson.
“Space Sustainability: Reframing the Debate”. In:
Space Policy 46 (2018), pp. 30–37.

[3] Thomas Schildknecht. “Optical surveys for space
debris”. In: The Astronomy and Astrophysics Re-
view 14.1 (2007), pp. 41–111.

[5]

[4] Shin-Ichiro Nishida et al. “Space debris removal
system using a small satellite”. In: Acta Astronau-
tica 65.1-2 (2009), pp. 95–102.
Joyeeta Chatterjee, Joseph N. Pelton, and Firooz
Allahdadi. “Active Orbital Debris RemovalActive
orbital debris removaland the Sustainability of
Space”. In: Handbook of Cosmic Hazards and
Planetary Defense. Ed. by Joseph N. Pelton and
Firooz Allahdadi. Cham: Springer International
Publishing, 2015, pp. 921–940. ISBN: 978-3-319-
03952-7.

[6] Susanne Peters et al. “Research Issues and Chal-
lenges in Autonomous Active Space Debris Re-
moval”. In: Proceedings of the International As-
tronautical Congress (2013).

[7] C. Priyant Mark and Surekha Kamath. “Review of
Active Space Debris Removal Methods”. In: Space
Policy 47 (2019), pp. 194–206.

[8] Hendrik Kolvenbach and Kjetil Wormnes. “Recent
Developments on ORBIT, a 3-DoF Free Floating
Contact Dynamics Testbed”. In: Proceedings of
the i-SAIRAS (2016).

[9] Martin Zwick et al. “ORGL - ESA’S TEST FA-
CILITY FOR APPROACH AND CONTACT OP-
ERATIONS IN ORBITAL AND PLANETARY
the i-
ENVIRONMENTS”. In: Proceedings of
SAIRAS (2018).

[10] N. Koenig and A. Howard. “Design and use
paradigms for Gazebo, an open-source multi-robot
simulator”. In: 3 (2004), 2149–2154 vol.3.
[11] Pietro Belotti et al. “Mixed-integer nonlinear op-
timization”. In: Acta Numerica 22 (2013), pp. 1–
131.

[12] Dirk Thomas, William Woodall, and Esteve
Fernandez. “Next-generation ROS: Building on
DDS”. In: (Sept. 2014).

[13] Matthew Kelly. “An Introduction to Trajectory
Optimization: How to Do Your Own Direct Collo-
cation”. In: SIAM Review 59 (Jan. 2017), pp. 849–
904.

[14] C. HARGRAVES and Stephen Paris. “Direct Tra-
jectory Optimization Using Nonlinear Program-
ming and Collocation”. In: AIAA J. Guidance 10
(July 1987), pp. 338–342.

[15] Russ Tedrake and the Drake Development Team.
Drake: Model-based design and veriﬁcation for
robotics. 2019.

[16] Andreas Wächter and Lorenz T. Biegler. “On
the implementation of an interior-point ﬁlter line-
search algorithm for large-scale nonlinear pro-
gramming”. In: Mathematical Programming 106
(2006), pp. 25–57.

[17] Russ Tedrake. Underactuated Robotics: Al-
gorithms
for Walking, Running, Swimming,
Flying, and Manipulation (Course Notes for
MIT 6.832). Downloaded on 21.12.2021 from
http://underactuated.mit.edu/.

[18] Richard Zappulla.

“Experimental Evaluation
Methodology for Spacecraft Proximity Maneuvers
in a Dynamic Environment”. PhD thesis. Naval
Postgraduate School Monterey United States,
2017.

[19] Rudolph Emil Kalman. “A New Approach to Lin-
ear Filtering and Prediction Problems”. In: Trans-
actions of the ASME–Journal of Basic Engineer-
ing 82.Series D (1960), pp. 35–45.

