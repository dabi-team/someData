Balanced Knowledge Distribution among Software Development Teams -
Observations from Open-Source and Closed-Source Software Development

SAAD SHAFIQ, Johannes Kepler University, Austria
CHRISTOPH MAYR-DORN, Johannes Kepler University, Austria
ATIF MASHKOOR, Johannes Kepler University, Austria
ALEXANDER EGYED, Johannes Kepler University, Austria

In software development teams, developer turnover is among the primary reasons for project failures as it leads to a great void of

knowledge and strain for the newcomers. Unfortunately, no established methods exist to measure how knowledge is distributed

among development teams. Knowing how this knowledge evolves and is owned by key developers in a project helps managers reduce

risks caused by turnover. To this end, this paper introduces a novel, realistic representation of domain knowledge distribution: the
ConceptRealm. To construct the ConceptRealm, we employ a latent Dirichlet allocation model to represent textual features obtained
from 300k issues and 1.3M comments from 518 open-source projects. We analyze whether the newly emerged issues and developers

share similar concepts or how aligned the developers’ concepts are with the team over time. We also investigate the impact of leaving

members on the frequency of concepts. Finally, we evaluate the soundness of our approach to closed-source software, thus allowing
the validation of the results from a practical standpoint. We find out that the ConceptRealm can represent the high-level domain
knowledge within a team and can be utilized to predict the alignment of developers with issues. We also observe that projects exhibit

many keepers independent of project maturity and that abruptly leaving keepers harm the team’s concept familiarity.

Additional Key Words and Phrases: software evolution, developer knowledge, software engineering

ACM Reference Format:
Saad Shafiq, Christoph Mayr-Dorn, Atif Mashkoor, and Alexander Egyed. 2018. Balanced Knowledge Distribution among Software
Development Teams - Observations from Open-Source and Closed-Source Software Development. In Proceedings of Make sure to
enter the correct conference title from your rights confirmation email (Conference acronym ’XX). ACM, New York, NY, USA, 33 pages.
https://doi.org/XXXXXXX.XXXXXXX

1 INTRODUCTION

Among the prime reasons for the failure of software projects are high budget costs and time overruns [8]. One of the

causes of these failures is the underestimation of employee turnover rate [9, 12]: (core) developers leaving and new

developers joining for various reasons [49, 64] resulting in project delays. Many companies now involve risk managers

to overcome the risk of such failures [32, 34]. The critical aspect of turnover is the loss of knowledge [13]. This is

especially relevant in open-source software (OSS) development, which is much more prone to developer turnover than

closed-source projects [22] and hence is more prone to an imbalanced distribution of knowledge across team members.

One essential element in making this risk more manageable is identifying keepers, i.e., core developers of a team

possessing essential knowledge related to the project. To characterize the knowledge possessed by the team regarding

Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not
made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. Copyrights for components
of this work owned by others than ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or republish, to post on servers or to
redistribute to lists, requires prior specific permission and/or a fee. Request permissions from permissions@acm.org.

© 2018 Association for Computing Machinery.
Manuscript submitted to ACM

1

2
2
0
2

l
u
J

6
2

]
E
S
.
s
c
[

1
v
1
5
8
2
1
.
7
0
2
2
:
v
i
X
r
a

 
 
 
 
 
 
Conference acronym ’XX, June 03–05, 2018, Woodstock, NY

Shafiq, et al.

various artifacts, the term “concept” has been employed in the literature [2, 3]. A concept represents the knowledge

regarding the domain and implementation of the software project. Similar to topic modeling [31], a concept is a

collection of terms that are highly similar and coherent to each other (see Section 5.4 for a more detailed definition and

discussion).

It is generally not well understood to what extent concepts are distributed in software development teams. Several

researchers have extracted concepts from artifacts such as source code but hardly attempted to link concepts to

developers. One such prior work that focuses on the developer-centric concept is by Dey et al. [14] who analyzed

developer familiarity specific to using third-party libraries in source code. Their approach thus describes a skill set in

lower-level libraries. In contrast, our approach focuses on establishing the concepts that describe the actual software

system under development. To provide developers and team leads with tools that help, for example, to manage and

assess the risk of developer turnover or identify developers with particular expertise, we need not only to determine

existing concepts and their distribution in the team but also how this distribution changes over time. This allows

assessing whether certain concepts are still relevant, whether concept distribution measures to reduce turnover risk

indeed have the expected effect, and whether new concepts need to be considered.

Events such as developer turnover can cause projects high costs. These costs include hiring and training of newcom-

ers [37], resulting in poor product quality and delays in software projects. Furthermore, with core members leaving the

projects, there is also a substantial loss of important tacit knowledge [27, 36, 37]. The organizations have employed

various strategies to reduce such losses, e.g., maintaining updated documentation and enabling active learning sessions

within teams [38]. However, capturing the tacit knowledge owned by the core developers is still an ongoing research

topic.

To this end, this paper aims to construct a novel representation – called the ConceptRealm – of domain knowledge
distribution in a team. We treat the ConceptRealm as a representation of the problem space (as captured in issues)
and the corresponding developers’ familiarity with it. We build the ConceptRealm from the textual features obtained
from issues, and their comments as these reflect the focus of the team better than slowly changing artifacts such as

documentation or requirements. In addition, we examine the distribution of concepts among projects and the reasons for
the differences that exist among them. Lastly, we aim to use ConceptRealm to derive implications for recommendation
algorithms to balance knowledge within the team. We evaluate this representation on OSS projects and a field study on

the closed-source project.

In this work, we introduce a novel representation to capture this tacit knowledge with the help of concepts. Applying

our approach to more than 500 open-source projects comprising more than 300k issues and over a million comments,

we determined that we can extract meaningful concepts that allow identifying concept keepers and that when such

keepers leave the project, a drop in that concept’s familiarity within the team is likely to follow. We also find that most

investigated open source projects exhibit keepers for their most essential concepts regardless of project age.

To determine the relevance of results from a practical standpoint, we have evaluated it using an industrial case study
from Dynatrace1. Dynatrace is a product-based company providing organizations with a diverse software intelligence
platform promoting observability and infrastructure to facilitate cloud automation in their systems. This project consists

of 49457 issues and 25807 comments in total. We extracted the concepts from this project in a similar way as from OSS

projects. However, we also had access to the teams assigned to the issues in this project which further strengthened our

1https://www.dynatrace.com/

2

Balanced Knowledge Distribution among Software Development Teams

Conference acronym ’XX, June 03–05, 2018, Woodstock, NY

findings. The industrial validation of our results attests that the ConceptRealm is a practical approach for supporting
stakeholders that need to manage the risk of developer turnover by aiming for balanced concept distribution.

The contributions of this article are six-fold:

• a novel representation called ConceptRealm to capture the high-level domain knowledge and its distribution

across team members.

• analysis of the fluctuations of concepts throughout an (ongoing) project’s lifetime.
• an approach to compare the keeping extent of developers across projects and monitor the impact when they

leave2 the project.

• an industrial case study to demonstrate the practicality and usefulness of the proposed approach.
• a dataset consisting of concepts extracted from issues and comments and how strongly these issues and comments

belong to a particular concept.

• an in-depth analysis of distribution differences among open- and closed-source projects.

The remainder of the article is organized as follows: Section 2 discusses the related work. The motivation of this
study is explained in Section 3. The ConceptRealm and corresponding metrics are introduced in Section 4. Section 5
describes the evaluation methodology employed in this study. We provide results in Section 6. We discuss these results

and their implications in Section 7. Section 8 discusses the threats to validity of this research. Lastly, we conclude this

article with an outlook on future work in Section 9.

2 BACKGROUND AND RELATED WORK

In this section, we describe the related work on the representation of developers’ knowledge complemented with an

elaboration on the word representations and topic modeling techniques that are considered influential in capturing the

context of OSS development in literature.

2.1 Socio-technical factors

The geographically distributed nature of OSS projects has changed the standard practices of traditional software

engineering. In OSS projects, a large number of contributors voluntarily take on the tasks of their own accord. In

addition, due to the scattered locations of these contributors, they mostly rely on means of digital communication

instead of meeting face to face in a collocated space. As Conway [11] said, designs are copies of the communication

structure of the organization. The interest in the existence of socio-technical factors in OSS projects developed in

the early days when researchers started analyzing the social aspects of OSS projects such as electronic means of

communication along with code writing [18, 52]. Since then, many studies have been conducted on investigating the

effects of socio-technical factors on pull request quality in an OSS development environment [16, 17, 57].

Researchers have also studied collaboration from various perspectives such as exploring team distribution, and

communication patterns [1, 20, 30, 42, 45, 53, 54]. A study conducted by Von Krogh et al. [60] focused on identifying the

communication patterns that appear in the new contributors joining the project. The authors have called this a “joining

script”, which implies how much expertise newcomers require before being given access to make contributions to the

projects. However, the study has made further research implications to explore the evolution of developers’ expertise

alignment with the expertise of the newcomers joining the project.

2For simplicity, we will refer to developers that become less engaged with the project as leaving members through the rest of the paper.

3

Conference acronym ’XX, June 03–05, 2018, Woodstock, NY

Shafiq, et al.

Ducheneaut et al. [19] performed an ethnographic study on the interaction between the OSS mailing lists and

the codebases of OSS repositories in order to understand the solitary learning process of an individual and also the

political process such as forming allies in the development process. The study concluded that a successful contribution

goes beyond technical expertise. For individuals, defining their identity in OSS eventually leads them in becoming

contributors to the project. Apart from this, OSS is also entangled with a political aspect, which refers to the opaque

connections in the network necessary to sustain the project. New contributors must understand the black-box nature of

connections in order to form allies that could support them in their contributions.

Panichella et al. [45] investigated evolving collaboration via three communication channels including mailing lists,

issue trackers, and IRC logs. The goal of this study was to determine whether the interaction of developers over

social network impact code changes. The study was evaluated using seven open-source projects. Results showed that

developers tend to use two out of three channels to communicate and an intense chat does not essentially correlate

with high code impact.

Wu et al. [62] studied the effects of centrality measures on OSS projects. In particular, social network analysis

measures, such as project density and leadership centrality, were used to evaluate the influence. This study revealed

these communication patterns have long-term effects on the success of OSS projects. In addition, higher centrality

within a team promotes communication and exchange of information whereas high project density has negative effects

on communication, thus a balance between density and centrality measures is required to ensure long-term success in

OSS projects.

Gerosa et al. [23] studied the factors affecting the motivations of contributors that drive them to contribute to OSS

projects using a survey and compared the findings stated in previous work by Hars et al. [25]. The survey was conducted

in 2020 and revealed that OSS contributors tend to contribute more because of intrinsic reasons. Also, some motivations

have not been shifted since the last survey, however, social aspects such as altruism, kinship, and reputation have

drastically increased. Moreover, older contributors are more interested to help (altruism) and tend to increase social

interaction while young developers mostly contribute to OSS projects to improve their resumes.

As opposed to the previous studies, our study considers the communication channel of the comments features

provided by the JIRA platform in order to extract the knowledge in the form of concepts for each developer.

2.2 Representation of domain expertise

Extraction of concepts from source code has already been studied in the literature. Abebe et al. [2] employed natural

language processing (NLP) to extract ontologies from program code. The extracted ontologies turned out to be helpful

in reducing the search space when programmers query for code location using ontology concepts.

Dey et al. [15] proposed Skill Space to conceptualize domain expertise. The proposed method can be applied to
individual developers, projects, programming languages, and APIs. The aim of the study was to analyze the assumptions

regarding whether developers focus on similar new APIs, projects, or languages they frequently use. One of the major

contributions of this study is the ability to compare the three entities (developers, projects, and APIs) in the same space,

thus enabling developers to evaluate the expertise of a new developer aspiring to collaborate. However, the study is

limited to the APIs for the capturing of domain expertise and did not consider other sources such as communication

and collaboration within teams.

Omoronyia et al. [40] proposed a contextual awareness model based on developers’ activities on source code. The

model illustrates the association of developers and artifacts with the work context, such as which tasks or artifacts

4

Balanced Knowledge Distribution among Software Development Teams

Conference acronym ’XX, June 03–05, 2018, Woodstock, NY

consumed the highest effort among the developers, and further provides a social graph that highlights the potential

bottlenecks of modifying or removing tasks or artifacts.

Cetin et al. [10] categorized developers in a software development team into three categories: Jacks, Mavens, and

Connectors. Algorithms were proposed for each category using artifact traceability graphs. The study was evaluated

on three OSS projects by using the extraction of top commenters on these artifacts in order to validate the results of

the model implementing these algorithms. Results showed the proposed model successfully identified the individuals

belonging to the aforementioned categories in the projects.

Vadlamani et al. [59] studied the developer’s expertise based on the findings from Github3 and StackOverflow4
collaborative platforms. An exploratory survey was conducted with 73 developers as subjects to understand their

perspectives on contributing to collaborative platforms. The results from the quantitative analysis revealed that

knowledge and experience are the most suitable predictors of expertise. However, the results from the qualitative

analysis show that the soft skills of the developers are of core importance in determining expertise. The study concluded

that an individual should possess both in order to be an expert.

In contrast to the aforementioned studies, rather than focusing on the solution space, such as source code and APIs,

to determine the domain expertise of developers, the underlying focus of this study is to provide a coarser-grained and

practical representation of domain knowledge through problem space such as the emergence of issues and the issue

focused involvement of developers.

2.3 Topic modeling in software engineering

Topic modeling has been utilized in the past to classify documents into various topics for the purpose of sentiment

analysis [33, 63], detecting toxicity in text [39], or generating recommendations [29]. For instance, Hong et al. [26]

utilized topic models to predict potential categories of Twitter messages. Two models were evaluated in this study:

Latent Dirichlet Allocation (LDA) and Author-Topic model. The results reveal that the Author-topic model performs

significantly worse than the standard LDA model.

Jiang et al. [29] proposed approaches to recommend the most suitable commenter for a pull request. These approaches

were evaluated using 8 projects as subjects in the case study. Results of this study show that the activeness-based

approach outperforms the rest of the approaches including text and file similarity. This study also suggests that the

activeness attribute is of core importance in order to recommend suitable commenters.

Panichella et al. [44] introduced a novel solution known as LDA-GA to build LDA models tailored specifically to

perform software engineering activities. These activities include traceable link recovery, feature location, and labeling

of software artifacts. The solution is based on genetic algorithms in order to determine the best LDA configurations

tailored to software engineering activities. LDA-GA is compared with existing heuristics for LDA configuration. The

results show that LDA-GA is capable of identifying the best suitable configurations, thus improving the accuracy of

LDA models employed for software engineering datasets.

In our work, we aim to employ a topic modeling technique in order to extract and classify the topics present within

the issues and comments exhibiting developers’ interaction, and monitor the changes that occur over the course of the

development of the project.

3https://github.com/
4https://stackoverflow.com

5

Conference acronym ’XX, June 03–05, 2018, Woodstock, NY

Shafiq, et al.

2.4 Word representations in software engineering

Word representations are an important way to understand and describe natural language. It has been employed in many

software engineering activities. Trivedi et al. [58] proposed a deep learning approach based on the LSTM model to detect

the existence of nano-patterns in code. To achieve this, the code is first preprocessed by utilizing word embeddings

in order to train the model. The approach is evaluated on a Java code resulting in an accuracy of 88.3% in predicting

nano-patterns in the code. Ferrari et al. [21] used word embeddings to understand the variations in the terms and

identify possible ambiguities in the requirements from different domains.

Guo et al. [24] introduced a solution based on deep learning in order to detect traceable links between source artifacts

and target pairs. The proposed solution employs word embeddings and a customized recurrent neural network (RNN)

model in order to generate these traceable links. A large corpus aggregated from PTC and Wikipedia is used to evaluate

the approach. The results showed significantly higher MAP scores for the proposed approach as compared to previous

tracing methods VSM and LSI.

Ferrari et al. [21] proposed a natural language-based approach to detect ambiguous terms in requirements from

different domains and provided an ambiguity score in order to rank them. The aim is to construct domain-specific

language models and compare their word embeddings to understand the variations in the terms and identify possible

ambiguities in the requirements from different domains. The results show that in some cases the proposed approach

was effective while in most cases evaluation was not accurate due to the presence of high-level abstract terms and other

factors.

Shafiq et al. [55, 56] proposed recommendation approaches to prioritize issues and allocate incoming tasks to the

most suitable roles in software development. The approaches utilized textual attributes of issues and tasks and converted

them into word embeddings, which were later used as features for the training of machine learning models.

In this paper, we are employing TF-IDF [47] representations of the bag of word [65] embeddings in order to capture

the relevance of words within issues and their comments. These representations are further employed in the process to
construct the ConceptRealm, which is described in detail in Section 5.3.

2.5 Turnover in software development

The developer volatility in organizations is inevitable as developers may switch to other teams within an organization

or even join other organizations leading to a turnover. This induces a loss of expertise and a great gap in the knowledge

possessed by the individual developer leaving.

A study showed that a newcomer takes a considerable amount of time to get a deep understanding of the project

similar to the leaving core developer leading to a great loss in productivity [28]. Moreover, the more orphaned code

there is in the project, the more defects it will produce [43].

Robillard et al. [49] studied the loss of knowledge induced by developer turnover by conducting interviews with 27

practitioners and managers from 3 companies. The study pointed out various dimensions of turnover. For instance,

leaving developers might be available later for knowledge transfer. On the other hand, results also showed that

developers who temporarily leave the organization have the same impact as the permanently leaving member as experts

are not available during the desperate times of resolving newly emerging issues.

Bao et al. [5] investigated the most effective machine learning model to predict developers that are about to leave.

Data were obtained from monthly reports that were submitted by 3638 developers in 6 years. The results of this study

6

Balanced Knowledge Distribution among Software Development Teams

Conference acronym ’XX, June 03–05, 2018, Woodstock, NY

also showed the random forest appeared to be the best among other alternatives and revealed the most important

factors that influence the turnover of developers.

Rigb et al. [48] assessed the risk of developer turnover and investigated ways to cope with this risk to make projects

more flexible. The analysis was performed on two projects: one closed-source project Avaya and one open-source

project Chrome. Mockus et al. [37] studied the impact of core developers leaving the project using Avaya as a subject in

a case study.

3 MOTIVATION

Changes in human resources are inevitable throughout the development process of software projects. For example,

an active developer may not work on the same module for an indefinite period or may leave for other reasons [64].

Therefore, the addition of new developers and changes in their priorities are unavoidable. This will lead to an imbalanced

knowledge distribution between the old team members and the new ones. Project managers, therefore, will have the

task to strike a balance in task assignment between an experienced and a less experienced developer so that knowledge

is sufficiently spread across the team.

In addition, prior studies have shown that the developer turnover rate is relatively higher in OSS projects compared

to closed-source projects [13]. Therefore, many companies call for risk managers to avoid such situations and improve

developer retention rate [32, 34]. For this purpose, this study aims at constructing a general representation of domain
knowledge denoted as the ConceptRealm within a team, which would help to identify the concepts possessed by the key
developers and how they change over time. Furthermore, this coarse-grained representation of developers’ domain

knowledge would allow managers to be aware of their team’s dynamics and valuable information surrounding the

issues emerging within the team for newcomers.

3.1 Illustrative example

Consider a simplified development scenario snapshot depicted in Fig. 1 comprising three developers D1 to D3, three

concepts C1 to C3, and four issues I1 to I4. The arrows among these elements represent the degree to which an issue,

a developer, is associated with a particular concept (thicker arrow indicating stronger association). Section 4 then

describes in more detail how we derive these concepts and how we create the relations between these elements.

From Fig. 1, we observe that two developers are knowledgeable in concepts C1 and C2, while only one developer

(D3) is familiar with C3. If D3 were to leave the team, no remaining developer would be in a good position to handle

new incoming issues associated with concept C3. Whether this is a problem depends on whether C3 is an important

concept. In this work, we treat frequency as a measure of how many issues are associated with a concept (again, the

formalization of frequency is provided in Section 4.2). To this end, we need to understand how the frequency of concepts

changes over time and how that change is reflected by developers’ level of familiarity with these concepts.

4 DEFINING THE CONCEPTREALM

4.1 Concept

We define a concept as a set of highly coherent terms that appear in the text of an issue. A text may belong to either title,

description of the issue, or the comment made by the author on that issue. Each term has a probability indicating how

strongly the term is associated to the concept. The total number of terms in each concept may vary from one project to

another, however, the terms with the highest probabilities (top 10) belonging to a concept are considered in this study.

7

Conference acronym ’XX, June 03–05, 2018, Woodstock, NY

Shafiq, et al.

Fig. 1. Team and Dev-level concepts association - D (Developers), C (Concepts), I (Issues)

These highly coherent terms are essential to describe the tacit knowledge of a particular issue or a comment. Abebe

et al. [3] describe a concept as a domain (e.g., software development, project configuration) or an implementation (e.g.,

data structures such as arrays and lists) knowledge. In this paper, we focus on issues and comments for extracting

concepts, hence our concepts describe primarily the problem domain and to a lesser extent the solution/technical

domain. There is a designated weight assigned to each association of issues/comments to the concept. This weight is

used to indicate the strength, i.e., how closely aligned the concept is to the respective issue or comment.

An example of how concepts along with their associated weights are obtained from an issue is shown in Fig. 2. This
figure further highlights that the sum of weights (𝑤i ) for all concepts describing a single issue “I1” equals 1. Similarly,
the sum of weights (𝑤c) for all concepts describing a single comment made by the developer “D1” equates to 1. In
essence, there are two major elements required for the construction of the ConceptRealm: (1) issue-level concepts and
(2) comment-level concepts.

Issue-level representation. The issue-level concept representation refers to the concepts appearing in the issues.
4.1.1
We derive these concepts from the title and description of the issues. Each concept associated with an issue represents

the domain knowledge regarding that particular issue.

4.1.2 Comment-level representation. The comment-level representation, on the other hand, refers to the concepts
appearing among the developers, mainly through the source of comments. We derive these concepts using the comment’s

body. This level would help us understand invaluable insights, such as the identification of key developers in the team

(the concept keepers), distribution of concepts within developers, and ultimately help us monitor the impact on change

in these concepts when keepers leave.

4.2 Evaluation metrics

To gauge the rate at which the concepts appear over the years within the team and among the developers, we introduce

“frequency” as an indicative metric. As opposed to weight, the frequency metric refers to the popularity of a concept

showing an approximation of how much a developer or team focuses on the concept with respect to time windows.

8

Balanced Knowledge Distribution among Software Development Teams

Conference acronym ’XX, June 03–05, 2018, Woodstock, NY

Fig. 2. Representation of concepts - I (Issue), C (Concepts), D (Developer), and W (Weight)

This metric allows us to quantify each concept with respect to each time window and further compare across multiple

projects.

As the number of concepts varies across the teams we need an additional processing step to ensure the concept

frequency changes can be compared across teams. For example, in a team with five concepts, a single concept might

more easily experience a frequency increase of 0.1, compared to a team with 20 concepts, as an increase in the frequency

of one concept always comes with the decrease of frequency of other concepts (recall Fig. 2) and vice versa. Hence,

directly using frequency will skew teams with fewer concepts to exhibit higher frequency variation than teams with

many concepts. To this end, we scale the “frequency” metric with the number of concepts. Fig. 3 shows the effect

of number of concepts on the frequency of the concept. To analyze teams and individual developers, ultimately we

introduce two frequency metrics. For the issue-level representation, the relative frequency of a concept is measured

using the following equation:

𝑓 𝑟𝑒𝑞𝑖𝑠𝑠𝑢𝑒 (𝐶) =

𝑤i

(cid:205)𝑛

𝑖=1
𝑛

∗ |𝐶 |

(1)

where 𝑤i is the weight value for each concept per issue 𝑖, 𝑛 is the total number of issues, and 𝐶 is the set of concepts

in the project.

For the developer-level representation, the frequency is measured as follows:

𝑓 𝑟𝑒𝑞𝑐𝑜𝑚𝑚𝑒𝑛𝑡 (𝑑, 𝐶) =

(cid:205)𝑛

𝑖=1

𝑤c (𝑑)
𝑛

∗ |𝐶 |

(2)

where 𝑤c (𝑑) is the weight value for each concept per comment 𝑐 for a developer 𝑑; 𝑛 is the total number of comments
made by 𝑑, and 𝐶 is the set of concepts in the project. From this follows that the sum of concept frequency values at the
team level as well as the sum of concept frequency values summed across all developers each equal |𝐶 |.

9

Conference acronym ’XX, June 03–05, 2018, Woodstock, NY

Shafiq, et al.

Fig. 3. Change in concept frequency

5 STUDY DESIGN

Overcoming the aforementioned problems due to turnovers during a project requires a careful understanding of

the knowledge in possession of the individuals within a team. The goal of this study is to provide a representation
constituting this knowledge called the ConceptRealm, ultimately providing invaluable insights to the managers. The
guidelines to direct this research are provided by Basili et al. and Runeson et al. [6, 51].

The Purpose of this study is to investigate the predictive ability of these concepts and to monitor the change in
these concepts during the course of project evolution. The Issue is the imbalanced distribution of knowledge caused
by the change in the team structure. The aim is to monitor the transitions of concepts emerging at both the team and
the developer level. The Viewpoint is of the managers or team leads that can leverage the ConceptRealm to identify
whether such concepts align with the developers and predict the impact of potential leaving members in the team. The
Process/Context of this study encompasses the issues and comments made by the developers obtained from OSS projects
in issue tracking platforms.

5.1 Research questions

In the remainder of this paper, we focus on the following six research questions.

10

Balanced Knowledge Distribution among Software Development Teams

Conference acronym ’XX, June 03–05, 2018, Woodstock, NY

RQ1: Are the extracted concepts meaningful?

In order to validate that the extracted concepts are indeed meaningful and not just noise, we investigate whether

concepts help to predict who will work on an issue. To this end, we assume that a team member familiar with a concept

in the past is more likely to work on a future issue (related to that concept) compared to the most active member of the

team.

RQ2: To what degree do concepts change over time at the issue-level and the comment-level?

This question aims to provide insights into the typical extent to which concepts within a software development team

evolve over the course of multiple years, ultimately highlighting the changes in the knowledge distribution within

the team. To this end, we observe whether the changes in concept frequency at the issue-level are also reflected at

the comment-level and thus whether the issue-level concept changes are representative of an individual developer’s

interest in concepts. The point to observe is whether concepts remain stable, and if not, how much does the change of

concepts differ for different teams?

RQ3: Are concept metrics able to measure the effect of a leaving developer on team knowledge?

In order to support a manager or team lead in estimating/predicting the impact of a leaving member, we need to show

that developers that act as a keeper of a concept indeed may result in the remaining team members becoming less able

to contribute knowledge associated with this concept. We hypothesize that the more a keeper holds the knowledge of a

concept, the more that concept will drop in significance upon that keeper’s departure. Additionally, we hypothesize

that a developer that shares the weakest level of concept familiarity as other team members will have a negligible effect

on the raise for drop in the concept’s frequency upon leaving.

RQ4: Is there a difference in project/concept distribution for those developers in the negative quadrant

compared to the positive quadrant

We aim to investigate the difference in the concept distribution for developers that reside in the negative quadrant,

i.e., their concept decreased when they became inactive, and in the positive quadrant, i.e., the concept increased on

their departure from the project. We also observe these differences within projects to have a general perspective of the

distribution of concepts.

RQ5: What are implications for assignee recommendation algorithm that should also result in more

evenly distributed knowledge?

In this question, we want to understand how ConceptRealm can help improve the current assignee recommendation
algorithms in achieving a balanced distribution of concepts thus helping in maintaining a similar distribution of

knowledge among developers in the project.

RQ6: How effective ConceptRealm can be in the detection of concepts and identifying the impact of leav-

ing developers in the industry?

Analysis of our OSS projects leaves an open-ended question of whether the information obtained from ConceptRealm
can be effective for managers/developers. To investigate further, we evaluated the usefulness of concepts and the effect

of leaving members using an industrial case study from Dynatrace.

To answer these research questions, we follow the approach depicted in Fig. 4. We build on an existing, vetted dataset

by Ortu et al. [41] consisting of Jira issues and comments as briefly introduced further below. After data preprocessing,

we apply concept extraction and subsequently concept frequency metrics at the issue and comment-level. This data is

then subject to further analysis to answer RQ1 to RQ6.

11

Conference acronym ’XX, June 03–05, 2018, Woodstock, NY

Shafiq, et al.

Fig. 4. Study design overview

5.2 Dataset

The base dataset provided by Ortu et al. [41] contains issues from 1238 projects from four Jira repositories, which
include Apache5, Spring6, JBoss7, and CodeHaus.8 Note that the projects in the dataset are restricted to 2015. However,
this would not impact the results of this study, as the study [23] showed that aside from social aspects, motivations

to contribute to OSS projects among developers have not shifted since the commercialization of OSS development.

Presently, older contributors may lead to better knowledge distribution but it does not hold for every project. Apart

from this, we did not find any significant change in developers’ OSS interactions till this study was conducted [23].

Most vital for our analysis, they have ensured that all comments are from actual developers and not from infrastructure

bots, such as integration servers and build pipelines, which they kept in a separate database table. We further filtered

the number of projects down to 518 to include only projects that have a set of textual terms sufficiently diverse but also

frequent enough to build a reliable set of concepts. Specifically, we applied the following filter criteria:

excluded projects by filtering out most rare (tokens that are present in less than 15 issues (no_below = 15)) and

frequent words (tokens that are present in more than half (no_above = 0.5) of the project) in the project for the purpose

of keeping only the words, which help in capturing the context.

5https://issues.apache.org/
6https://jira.spring.io/
7https://www.jboss.org/
8https://www.codehaus.org/

12

Balanced Knowledge Distribution among Software Development Teams

Conference acronym ’XX, June 03–05, 2018, Woodstock, NY

We hypothesized that project age might influence the number of concept changes. Hence we checked the age of

projects and clustered them into age groups. In doing so, we found that projects with an age of fewer than 3 years and

greater than 10 years were small in number. Thus, to maintain a similar distribution of projects, we grouped the projects

into eight age brackets ranging from 3 to 10 years. The final pool of projects is 518 with over 300k issues and 1.3M

comments. Table 1 provides additional details on how these numbers are distributed per age (year) bracket. Ultimately,

we extended this base data subset with concepts and their association with developers and teams for each year. This
extended dataset along with the scripts to construct the ConceptRealm and to reproduce all results of this paper are
available as a replication package [4].

Age

Projects

Issues Comments

Devs Median(Devs)

3
4
5
6
7
8
9
10

53
73
65
72
73
57
63
62

19556
20310
29539
38946
77341
44601
34853
73814

61332
60706
111919
157838
308092
203544
140549
257657

2663
3149
5482
6511
11052
8548
7839
16326

20.0
26.0
34.0
52.0
59.0
99.5
92.5
143.0

Table 1. Distribution of projects across age brackets

5.3 Data pre-processing

In order to gain meaningful insights from LDA, the dataset is required to go through a systematic cleaning process. We

first eliminated stopwords from the textual features in the dataset, which include the title, description, and comment

body of each issue. We further performed the lemmatization process using WordNet [35]. Lemmatization refers to the
process of extracting the dictionary form of a word – also known as lemma – while removing inflectional post-fixes.
We further performed Porter’s stemming process [46] on the lemma, which refers to the removal of word endings to a
stem that could possibly be a word not present in the dictionary.

TF-IDF representation. The preprocessed issues and comments are then converted to vector embeddings using
the doc2bow algorithm. Doc2bow is an implementation provided by the Genism9 library to generate bag of words
embeddings from the documents (referred to as text of issues and comments in this study). For each word in a document,

these embeddings are represented as one-hot encoded vectors. These word embeddings are later converted to Term

Frequency-Inverse Document Frequency (TF-IDF) vector space. TF refers to the number of times a word has appeared

in an issue or a comment whereas, TF-IDF [47] is a simple and efficient algorithm to match words that are relevant to

the issue based on the entire corpus. This TF-IDF representation is then used as input to the construction of the LDA

model.

5.4 Concept extraction

In order to obtain a meaningful set of terms, we have trained an LDA model on the aforementioned TF-IDF representation

of issues and comments data for each project. LDA [7] is a statistical model commonly employed to generate and

9https://radimrehurek.com/gensim/

13

Conference acronym ’XX, June 03–05, 2018, Woodstock, NY

Shafiq, et al.

classify document topics. We are referring to these topics as concepts throughout this paper. The LDA model is then

used to generate the concepts that best capture the spectrum of issues. The LDA model is further used to associate

each issue with the respective concept. In essence, once the LDA model is trained on the corpus we use the model to

generate probability scores for each concept given an issue. These probability scores indicate how close the concept is

to the issue. Similarly, with the comments on each issue made by the developers, we have used the same LDA model to
associate these comments with the respective concept. We call this resulting association the ConceptRealm.

Sanity check. We have followed the guidelines described by Panichella et al. [44] in order to get the optimal LDA
configuration for each project. We first created LDA models fed with the same text corpus and a different number of

concepts ranging from 1-30. We chose this range as the average optimal number of concepts obtained for each project

later appeared to be less than 20. Also, there is a low risk of overestimating the number of concepts as compared to

underestimating the number of concepts as suggested by Wallach et al. [61]. For every LDA model created, we then

calculated the Jaccard similarity value (as suggested by Abebe et al. [3] and exemplified in equation 3) for each concept

and compared it with all concepts (Concept Overlap). We also calculated the coherence (as expressed in equation 4)

within all the concepts across the LDA models. The coherence was calculated using the best performing measure “Cv” as
supported by the benchmark study [50]. We used the coherence module from Gensim10 library, which is well known in
concept modeling and NLP. Finally, we selected the optimal (i.e., highest coherence and lowest concept overlap) number

of concepts to build the final LDA model for each project. We calculated this optimal number by taking the maximum
from the difference between coherence and overlap, i.e., 𝑀𝐴𝑋 (𝑐𝑜ℎ𝑒𝑟𝑒𝑛𝑐𝑒 − 𝑜𝑣𝑒𝑟𝑙𝑎𝑝). An example of determining the
optimal number of concepts can be seen in Fig. 5. The horizontal lines represent the average concept overlap and

concept coherence, whereas the vertical line identifies the optimal number of concepts for the given project.

jaccard(𝐶1, 𝐶2) =

|𝐶1 ∩ 𝐶2|
|𝐶1 ∪ 𝐶2|

coherence =

𝜙 (𝑤𝑖, 𝑤 𝑗 )

∑︁

𝑖< 𝑗

(3)

(4)

6 RESULTS

In this section, we answer the above-introduced research questions.

6.1 Validating the extracted concepts

Addressing RQ-1, we analyzed the meaningfulness of concepts by comparing the past concepts associated with

developers and whether they are assigned to new issues exhibiting similar concepts vs most active developers of the

same project. Note that the goal is not how well we can predict the assigned team member, but whether our approach

produces concepts that are meaningful enough to describe a team member’s familiarity with the domain and hence

being likely to work on such an issue.

We first selected a random year from each project and divided it into half based on the issue creation date. The

reason for selecting one random year is due to the fact that we want to avoid the evolution of these concepts, which

would be significant when evaluating for more than a year. Note that these concepts are different than the year-wise

concepts generated by the LDA model to address the aforementioned research questions. Consequently, the past data

10https://pypi.org/project/gensim/

14

Balanced Knowledge Distribution among Software Development Teams

Conference acronym ’XX, June 03–05, 2018, Woodstock, NY

Fig. 5. Example of determining the optimal concept number

(i.e., issues from the year’s Q1 and Q2) become the training set and future data (i.e., issues from the year’s Q3 and Q4)

become the test set. We then trained the LDA model on the training data and generated a set of concepts. Later we used

this model to classify each issue and comment in the data as one of the dominant concepts. For each issue in the test set

(second half of a year) we determine (a) how well the assigned developer matches the issue’s strongest concept (i.e.,

via the frequency value) and (b) how well the most active developer matches the issue’s strongest concept. Then we

derive the mean over these two ’groups’ and determine the difference. These two groups (lists of frequency values) as

also used as the input to the pairwise t-test. (The diff itself is not used for the t-tests). Consequently, we performed a

pairwise t-test to measure if there is a significant difference among the developers who become assignees for the new

issues exhibiting similar past concepts vs most active developers from the test sample. Before applying, we ensured that

the assumptions of the test are met, i.e., independent samples from the same group and normally distributed data. This
test was applied to 243 projects11. For the pairwise t-test, two groups are being compared for each project, (1) set of
tuples: developers with strongest concepts assigned to issues and (2) group of most active developers. The test gives as

output the means for both groups, a higher mean for a group indicates stronger alignment with the issues which, in our

case, is the former group. The accuracy metric in the table 2 is just added to show how many developers are actually

assigned to the issues that had the strongest similar concept in the past.

The results of the t-test showed that out 211 of 243 projects demonstrate a significant difference (p-value < 0.05)

supporting the hypothesis that developers highly associated with a concept in the past are more likely to be assigned to

new issues that are also aligned with the same concept compared to a most active team member. Table 2 shows the

average difference in means between the variables along with the number of projects (p-value < 0.05) with respect to

each project duration range. The table also shows accuracy which indicates the percentage of developers that were

assigned to issues aligning with their strongest concepts. The high number of accuracy values for projects across all

age brackets further strengthens our assumption. Note that with this experiment we don’t suggest a new assignee

11For this RQ, concepts are extracted from a smaller data set, i.e., half a year of comments and issues, hence some projects didn’t yield sufficiently frequent
words as outlined in the section 5.2 and thus were not included for answering RQ1.

15

Conference acronym ’XX, June 03–05, 2018, Woodstock, NY

Shafiq, et al.

Duration
(yrs)

Projects
(P < 0.05)

totalProjects meanDiff meanAccuracy

(%)

3
4
5
6
7
8
9
10

18
27
29
31
34
20
22
30

22
34
32
34
39
22
24
36

0.67
0.58
0.88
0.78
0.72
0.94
0.67
0.68

75.52
82.13
78.72
79.14
82.21
83.68
75.75
81.13

Table 2. Pairwise t-test results: average (across projects) of mean difference (within a project) in comment-level concept frequency
between assigned developers vs most active developers

recommendation metric but demonstrate the usefulness of determining concepts, hence that the extracted concepts are

neither arbitrary nor noise.

Summary of RQ-1: Extracted concepts are meaningful as for a large majority of projects (211/243) they allow to
better predict the issue’s assignee than choosing the most active developer in the project.

6.2 Measuring concept evolution

Addressing RQ-2: “To what degree do concepts change over time at the issue-level and the comment-level?” We

calculated the variance of the year-to-year frequency changes for each concept within a project. As a single large

frequency change of one concept and otherwise stable concepts will result in a larger variance for a 3-year project

compared to the same single frequency change in a 10-year project (more data points over which to aggregate) we

compare the frequency changes only for projects of the same age. These age groups range from 3 - 10 years. Typically,

only a small set of concepts experience a frequency change from one year to the next. Hence, we take the 75th-percentile

of concept frequency change variance per project to obtain more insights into how much those more fluctuating

concepts change. The set of 75th-percentile variance values from each project (grouped by age) then produces the

boxplots in Fig. 6.

From Fig. 6, we observe that projects in each age bracket exhibit various degrees of concept evolution. Hence, for

example, measuring a 75th-percentile variance value of 0.15 for a particular project, we cannot infer what age this

project might be. Yet, we observe that younger projects tend to come with a slightly lower variance than older projects.

Overall, we notice that projects with a duration of 7 years have concepts that vary the most while projects of age 3

have concepts that vary the least. To give another insight into the concept evolution, we provide the issue-level concept

frequency values for the most stable and the most volatile projects of ages 3, 6, and 10 in Fig. 7. Given the stable projects

(similar behavior observable also in other age brackets but not shown due to page restrictions) we notice that the

majority of concepts are of the roughly equal frequency with the occasional “core” concept exhibiting higher but stable

frequency.

6.3 Developer (comment-level) and issue-level concept frequency alignment

We further investigated to what extent comment-level concept frequency deviates from issue-level frequency, and

whether changes at issue-level come with similar strong changes at the comment-level.

16

Balanced Knowledge Distribution among Software Development Teams

Conference acronym ’XX, June 03–05, 2018, Woodstock, NY

Fig. 6. 75th-percentile variance of issue-level concept frequency by project duration

(a) project duration = 3 years

(b) project duration = 6 years

(c) project duration = 10 years

Fig. 7. Projects with min and max variance of the frequency of concepts at the issue-level

17

Conference acronym ’XX, June 03–05, 2018, Woodstock, NY

Shafiq, et al.

In order to evaluate whether the comment-level concepts align with the issue-level concepts, we calculated for

every developer (comment) and issue-level concept frequency, the mean squared error (MSE) of the issue-level concept

frequency, and the developer-specific concept frequency. We then take the mean MSE across all projects of the same age

bracket as an indicator of whether developer (comment) to issue-level concept alignment shows some project age-based

trend. Fig 8 shows these mean MSE values. From the graph, we observe that mean MSE decreases as the projects get

older, hence an increasing alignment of comment-level concept frequency with issue-level concept frequency. This

phenomenon could be the result of more developers becoming increasingly familiar with larger areas of the project and

thus resulting in an increasingly shared domain knowledge.

Fig. 8. Issue | Comment-level concept MSE

An important aspect to gain insight into is whether there exists a small group of developers in OSS projects that

possess the most knowledge of an important concept. We call these developers as keepers. When these keepers (or a

non-negligible subset) are to leave, a significant amount of domain knowledge could be lost. To determine the set of

keepers, we select for each project and year the most important issue-level concept and select all developers active in

that year. We then sort all developers in descending order by their normalized frequency of that concept (recall the sum

of frequency for a concept equals one). We then count for how many developers we need to sum up their weight to

achieve an arbitrary threshold (here 0.5). The lower this threshold is set, the smaller the set of keepers will become. As

the keeper count increases, we no longer would consider such a set of developers to be actual keepers but rather to

describe well-distributed concept familiarity.

Fig. 9 displays for each year of a project’s duration the number of keepers for the most important concepts (at a

threshold of 0.5) as a boxplot. Overall the boxplot shows that a single, two, or three keepers are quite common across

all project years (i.e., see the median). Hence, even mature projects (esp. in their 7th, 8th, or 9th year) that would have

had time to distribute know-how, are prone to have a single or two keepers for their most important concept (i.e., the

median is 2 or lower). In contrast, keepers tend to be less prominent in a project’s third year.

18

Balanced Knowledge Distribution among Software Development Teams

Conference acronym ’XX, June 03–05, 2018, Woodstock, NY

Fig. 9. Amount of keepers for the most important concept per year across all projects (without outliers).

Summary of RQ-2: The frequency of concepts changes over the course of software development. However, a
slightly higher variance appears to exist in older projects. Furthermore, a small set of keepers is prevalent in

the majority of projects regardless of their project age. This observation is in line with an open-source project

exhibiting a small set of core developers.

6.4 Measuring the effect of leaving members

To answer RQ-3 “Are concept metrics able to measure the effect of a leaving developer on team knowledge?” we first

need to identify leaving members, then determine their prior absolute concept frequency, and subsequently measure

the concept frequency upon their departure.

We identify a leaving developer based on their activity level in terms of comments. To this end, we count the number

of comments of a developer for each quarter (thus splitting each year into four 3-month time windows). We then tag a
developer as having left in quarter 𝑞𝑡 if their number of comments in 𝑞𝑡 is lower than 10% of the average comment count
across the prior four quarters (𝑞𝑡 −1 to 𝑞𝑡 −4) and stays that low for the subsequent three quarters (𝑞𝑡 to 𝑞𝑡 +3). Choosing
quarters as the time window size strikes a balance between insensitivity to regular periods of lower activity such as

vacation time and accurately pinpointing a developer’s actual departure. Note that our definition allows developers to

remain present within the project but merely at a very low activity level, hence having a similar effect as a developer

that has actually left the team. Applying this threshold to our data set identified 456 developers that exhibited a sharp

drop in commenting activity.

One would expect that a leaving developer has a negative effect on concept frequency, most so on the concept that

the developer is most familiar with (their strongest concept as measured by their commenting activity).

We need to ensure that the concept frequency changes (due to the leaving developer) are caused by the concept

distribution and not just by the shift in commenting behavior (i.e., the remaining team members taking over). Especially

when the leaving developer is one of the core developers of the project we might see a drop in concept frequency

across all concepts independent of concept distribution. Indeed, when we measure the rank of the leaving developers

19

Conference acronym ’XX, June 03–05, 2018, Woodstock, NY

Shafiq, et al.

by calculating their rank based on the number of comments they made during 𝑞𝑡 −1 to 𝑞𝑡 −4 we find that most of the
leaving developers are found within the top 10.

Hence, to measure the effect of the concept distribution, we measure if a concept’s absolute frequency drops more

𝑖=1

or less than the median absolute concept frequency. Specifically, we calculated the absolute concept frequency, i.e.,
acf(c) = (cid:205)𝑛
𝑤c (𝑛) for each concept c over all comments regardless of the developer, and acf(d,c) for the frequency of
concept c when only considering developer d over the time windows before and after a developer left, i.e., 𝑞𝑡 −1 to 𝑞𝑡 −4
and 𝑞𝑡 to 𝑞𝑡 +3, respectively. We thus obtain 𝑓 𝑟𝑒𝑞𝑝𝑟𝑒,𝑐 and 𝑓 𝑟𝑒𝑞𝑝𝑜𝑠𝑡,𝑐 and then determine the increase or decrease in
concept frequency by taking the difference, i.e., 𝑑𝑖 𝑓 𝑓𝑐 = 𝑓 𝑟𝑒𝑞𝑝𝑜𝑠𝑡,𝑐 − 𝑓 𝑟𝑒𝑞𝑝𝑟𝑒,𝑐 .

For a particular concept, we can then plot the impact of a leaving developer in terms of change in absolute concept

frequency compared to the median concept frequency change. We did this in Fig. 10 and Fig. 11 for the strongest

and weakest concepts of the leaving developer. For Fig. 10, we identified the concept the leaving developer was most
familiar with based on their absolute concept frequency 𝑚𝑎𝑥 (𝑎𝑐 𝑓 (𝑑, 𝑐)) from the prior four quarters. We then printed
the difference 𝑑𝑖 𝑓 𝑓𝑐 for this concept in the scatter plot. Likewise, we printed the values for the concept the developer
was least familiar with (i.e., 𝑚𝑖𝑛(𝑎𝑐 𝑓 (𝑑, 𝑐))) in Fig. 11.

The red diagonal line indicates the situations where the concept frequency change equals the median frequency

change. A data point below the diagonal in the negative range describes an under-proportional drop in concept frequency

while a data point above the diagonal in the negative range describes an over-proportional drop in concept frequency.

In the positive range, a value under the diagonal indicates an over-proportional increase in concept frequency.

If concepts are equally distributed across team members, we would see the data point in both scatter plots roughly

equally distributed on and around the diagonal. Fig. 10 and Fig. 11, however, clearly show a different behavior. From

Fig. 10 we observe for most data points that the concept frequency of the concept the developer was most familiar

with dropped stronger than the median frequency change. For the least familiar concepts (in Fig. 11), we see a less

severe drop in absolute concept frequency for most data points. Interestingly, for the minority of data points where

the absolute concept frequency increased in the time after departure, we observe a slightly inverse phenomenon: the

least familiar concept does not increase as much as the median, and the most familiar concept increased more than the

median. Further investigations are needed to understand whether the concept distribution in these few team contexts

is different from the situations where a leaving developer leads to a drop in median absolute concept frequency or

whether other factors can explain this result. To this end, the amount of commenting the leaving developer did as

measured by the past comment rank (indicated by a data point’s color in Fig. 10 and Fig. 11) seems to make no impact.

Summary of RQ-3: We find that a leaving developer’s effect on the concept frequency is not explained by the
number of comments but by the developer’s concept frequency. In most cases, the developer’s most familiar

concept will experience an over-proportional drop in frequency, while the developer’s least familiar concept will

experience an under-proportional drop.

6.5 Knowledge distribution in OSS projects

To address RQ-4: Is there a difference in project/concept distribution for those developers in the negative quad-
rant compared to the positive quadrant? We first examined the 𝑑𝑖 𝑓 𝑓𝑐 of the developer’s absolute concept frequency
𝑚𝑎𝑥 (𝑎𝑐 𝑓 (𝑑, 𝑐)) with respect to the median concept frequency change as illustrated in Fig. 10. As part of the observation,
we then analyzed the differences in projects with data points appearing in the negative and positive quadrants. 25

20

Balanced Knowledge Distribution among Software Development Teams

Conference acronym ’XX, June 03–05, 2018, Woodstock, NY

Fig. 10. Comparison of leaving developer’s strongest concept frequency change to median concept frequency change

Fig. 11. Comparison of leaving developer’s weakest concept frequency change to median concept frequency change

21

Conference acronym ’XX, June 03–05, 2018, Woodstock, NY

Shafiq, et al.

projects had data points in both the quadrants leaving 132 projects with data points only in the negative quadrant,

whereas 4 projects with data point only in the positive quadrant.

Due to the minimal number of projects appearing in the positive quadrant, we decided to investigate developer-
wise concept distribution. We calculated the difference of the 𝑑𝑖 𝑓 𝑓𝑐 of the developer’s absolute concept frequency
𝑚𝑎𝑥 (𝑎𝑐 𝑓 (𝑑, 𝑐)) with the median concept frequency change such as 𝑚𝑎𝑥 (𝑎𝑐 𝑓 (𝑑, 𝑐)) − 𝑚𝑒𝑑𝑖𝑎𝑛𝑐ℎ𝑎𝑛𝑔𝑒 which showed us
how far on average the strongest concept of the developer is from the team in terms of frequency. We then calculated

the Entropy of the top 5 developers’ frequencies in the project which essentially indicates the equality of the distribution

among the team. Where an entropy of 0 indicates an unequal distribution of concepts in the project while 1 represents

an equal distribution. Ultimately, we draw the plots 12 and 13 to see the correlation between the entropy and the

difference between strongest/weakest concept frequency change and median concept frequency change. Apparently, in

Fig. 12, we found that the entropy is considerably lower as the diff decreases in the negative quadrant which implies

that concepts are mostly not equally distributed among the teams with lower change with some exceptions. In the

future, we will investigate the data points that are in the region of entropy beyond 0.5.

Looking at the Fig. 13, we see a similar behavior, however, there is a comparatively low number of data points in the

positive quadrant which implies that the difference between strongest/weakest concept frequency change and median

concept frequency change can only serve as one factor for the distribution of knowledge among the teams as other

factors might also be the reason for influencing the Entropy.

Fig. 12. Entropy vs 𝐻𝑖𝑔ℎ𝑀𝑒𝑑𝐷𝑖 𝑓 𝑓𝑁 𝑒𝑔 (OSS projects)

Summary of RQ-4: Concepts in most OSS projects do not seem to be distributed in equal proportions among
the team suggesting a lack of knowledge familiarity. One reason for that could be the team factor as the different

teams might not usually share knowledge with each other.

6.6 Implications for recommendation algorithms

Addressing RQ5: What are the implications for the assignee recommendation algorithm that should also result in

more evenly distributed knowledge? A naive intuition would be to recommend developers based on their past concept

22

Balanced Knowledge Distribution among Software Development Teams

Conference acronym ’XX, June 03–05, 2018, Woodstock, NY

Fig. 13. Entropy vs 𝐻𝑖𝑔ℎ𝑀𝑒𝑑𝐷𝑖 𝑓 𝑓𝑃 𝑜𝑠 (OSS projects)

Type

Split Mean reciprocal rank

Equal
Unequal

all
all

0.14896954002884027
0.368514437643808

Table 3. Naive approach

familiarity with the issues. To see whether this approach holds to the existing dataset, we divided projects into unequal

and equal distribution groups, i.e., for unequal projects if max_gate > median + 0.01, and for equal projects, if max_game

< median - 0.01. We hypothesize that developers that are less familiar with concepts should be recommended for projects

in which concepts are unequally distributed while top-ranked developers in terms of concept familiarity should be

recommended for equally distributed projects. Then, we rank each developer based on concept frequency meaning

developers with higher concept frequency will have lower ranks.

We calculate mean reciprocal ranks (MRR) with values ranging from 0 to 1. Where 1 indicates devs with higher

concept frequency are assigned to issues while 0 indicates devs with lower concept frequency are assigned to issues.

Table 3 shows the mean reciprocal ranks for each split in both groups. For equally distributed projects, we observed

that the mean reciprocal rank is lower than unequally distributed projects which implies that developers with low

familiarity with the concepts are typically assigned to new issues in equally distributed projects as opposed to unequally

distributed projects. This strengthens our assumption that projects with equally distributed concepts tend to assign

developers who are generally less familiar with the concepts while projects with unequally distributed concepts tend to

assign higher-ranked developers thus resulting in an imbalanced distribution of concepts which leads to the dependency

on the keepers.

Summary of RQ-5:
Supporting our hypothesis, we observed that OSS projects that have equally distributed concepts tend to assign

developers who are less familiar with these concepts thus gaining equal distribution of concepts while in contrast,

projects with unequally distributed concepts tend to assign top-ranked developers.

23

Conference acronym ’XX, June 03–05, 2018, Woodstock, NY

Shafiq, et al.

6.7 Industrial evaluation

Addressing RQ6: How effective ConceptRealm can be in the detection of concepts and identifying the impact of leaving
developers in the industry? We have performed a preliminary field study of our approach with the help of an industrial

case study from Dynatrace and an open-ended questionnaire with a core practitioner.

6.7.1 Data extraction. We first prepared a python script to extract the issues’ attributes from this closed-source JIRA
project. We obtained project data spanning the course of six years. Before extraction, we were also required to anonymize

some of the attributes to maintain the integrity of sensitive information, e.g., assignee/reporter names, user ids, team

names, team roles, etc. In total, we obtained 49457 issues and 168608 comments. Issues extracted were then passed

through the preprocessing and concept extraction as highlighted in the aforementioned Section 5.3 and Section 5.4,
respectively. While constructing ConceptRealm, we treated each team as an individual OSS project in order to have
team-level insights. Fortunately, the difference from the OSS projects is that, with access to this closed-source project

data, we also had the opportunity to observe concepts of individual teams within this project. This would allow us to

generate a very granular set of concepts that can be vital in determining the high-level domain knowledge present

within teams as well as individual developers. Thus, we investigated the team-based concept distribution within this

project in order to be able to observe any team-related patterns.

6.7.2 Open-ended questionnaire with the practitioner. Additionally, we prepared an open-ended questionnaire in line
with our aforementioned research questions and communicated with the lead product manager from Dynatrace. This

lead product manager has in-depth experience in the project and is directly responsible for managing the teams of this

project.

We have provided a list of 10 inactive developers that were identified from our approach along with their concepts

and years when they left. To reduce bias, we provided two issues for each developer to ensure accurate evaluation. This

would allow us to understand whether the leaving developers are correctly identified and had previously worked on

issues with similar concepts.

Questions of the questionnaire include:

(1) Q1 - Are these engineers humans and not development bots? [Yes, No, Maybe]

(2) Q2 - Are these the latest assigned engineers who are also working on similar issues fixing/implementation?

[Yes, No, Maybe]

(3) Q3 - Could these engineers (their familiarity with the product) be accurately described by the concept?

[Yes, No, Too generic]

(4) Q4 - Are the issues described accurately by their concept? [Yes, No, Maybe]

(5) Q5 - Did these engineers leave their team roughly in the identified year and quarter? [Yes, No, Maybe]

6.7.3 Questionnaire results. We are interested in knowing the practical efficacy of our approach. For this purpose, we
calculate accuracy for each question as to the total number of ’Yes’ provided by the practitioner divided by the total

number of developers.

Findings from the questionnaire show that most of the developers (> 60%) identified as leaving members by Concep-
tRealm are valid. In addition, the practitioner confirmed that the concepts associated with the developers by ConceptRealm
are indeed aligned to the issue they are working on. Table 4 shows the results of the questionnaire. The practitioner

also pointed out that some concepts appear to be too generic. This is due to the fact that concepts were generated based

on the entire project corpus and were not team-specific when showed to the practitioner. Nevertheless, these findings

24

Balanced Knowledge Distribution among Software Development Teams

Conference acronym ’XX, June 03–05, 2018, Woodstock, NY

Developers

Questions
Q1 Q2 Q3 Q4 Q5

✓
✓
✓
✓
✓
✓
✓

✓
✓
✓
✓
✓
✓

✓
✓

✓
✓
✓
✓
✓
✓

n
o
i
t
a
u
l
a
v
E

Dev 1
Dev 2
Dev 3
Dev 4
Dev 5
Dev 6
Dev 7
Dev 8
Dev 9
Dev 10

✓
✓
✓
✓
✓
✓
✓
✓
✓
✓

Table 4. Questionnaire results

support the hypotheses postulated in this study regarding ConceptRealm and further highlight the importance of using
such an approach in practice.

6.7.4 Comparison with OSS projects. Compared to OSS projects, we observe similar patterns in the evolution of the
frequency of concepts for the closed-source project over the course of 6 years. Fig. 14 shows the variation in concept

frequency for the top 10 teams in the closed-source project. The concept frequency of most of the teams is apparently

stable across the duration except for Team10. Further investigation on this revealed that for the year 2017, this team

had only 3 active developers, thus, causing an increase in the frequency for this year.

Fig. 14. Team Concept Frequency Variation

Contrary to OSS projects, the closed-source project seems to have a higher number of keepers for each year. Fig. 15

shows the number of keepers for each year of the project.

Observing the impact of leaving developers with the strongest concepts in the team for the closed-source project,

we see a similar trend as shown in Fig. 16, i.e., the change in the frequency of developers (leaving ones) strongest

25

Conference acronym ’XX, June 03–05, 2018, Woodstock, NY

Shafiq, et al.

Fig. 15. Dynatrace keepers

concept tends to be lower than the median change in concept frequency of the team implying a higher drop in concept

frequency of the leaving member.

Fig. 16. 𝑀𝑒𝑑𝑖𝑎𝑛𝐷𝑖 𝑓 𝑓 − ℎ𝑖𝑔ℎ𝑑𝑖 𝑓 𝑓 (Dynatrace project)

To be able to better understand, we focus only on the negative quadrant. As shown in Fig. 17, we see similar behavior

in the negative quadrant, the entropy is lower as the difference between strongest/weakest concept frequency change

and median concept frequency decreases, which implies concepts are not equally distributed among the teams in the

closed-source project as well.

26

Balanced Knowledge Distribution among Software Development Teams

Conference acronym ’XX, June 03–05, 2018, Woodstock, NY

Fig. 17. ℎ𝑖𝑔ℎ𝑚𝑒𝑑𝑖𝑎𝑛𝑑𝑖 𝑓 𝑓 − 𝑒𝑛𝑡𝑟𝑜𝑝𝑦 (Dynatrace project)

Summary of RQ-6:
Based on the results from the closed-source project, we observed that ConceptRealm is able to correctly identify
the keepers in the project and developers with mutual concepts are indeed aligned with the issues having similar

concepts. Moreover, we see similar trends in the closed-source project as compared to OSS projects which
strengthened the generalization capability and overall consistent behaviour of ConceptRealm.

7 DISCUSSION AND IMPLICATIONS

7.1 Discussion

Having obtained the results for the six RQs, here we now discuss these results and their implications.

The results of RQ1 show that our approach produces meaningful concepts as these can be applied to characterize

the assignees of issues. It is not a concern that the results are not significant for all projects as other factors aside

from concept familiarity typically determine an issue’s assignee. Specifically, our baseline assumption that a developer

working on issues of a particular concept in the past will also work on issues of that concept in the future does not

necessarily have to always hold but is generally valid. The primary focus of answering RQ1 was on establishing our

approach’s ability to produce useful concepts, not to suggest an issue assignment metric. Hence, we do not suggest that

the developer with the highest concept frequency should be an issue’s assignee but that rather concept familiarity is

one important contributing factor that could be exploited for that purpose. Rather we believe that the observation of

such a correlation motivates measures to distribute concept familiarity within a developer group to enable them to

work on a broader range of issues - mitigating unexpected turnover.

Investigations of RQ2 have revealed that some projects have widely fluctuating concept frequency, while others

are very stable, regardless of year. Across all projects, the data showed that the projects with longer duration exhibit

higher variation in their concepts frequency than younger projects. We hypothesize that this phenomenon (on average)

is due to short-duration projects focusing primarily on their core idea and refining it, while long-duration projects

are on average more prone to have matured concepts (thus requiring less focus and ceasing in frequency) and have

27

Conference acronym ’XX, June 03–05, 2018, Woodstock, NY

Shafiq, et al.

new concepts emerge that represent new needs. Yet, this indication of a concept evolution life-cycle is very light and

we stress that the nature of the project is probably much more influential on concept evolution than its age. More

investigations are needed to determine which factors exactly drive concept evolution.

Moreover, a significant amount of projects have a small number of concept keepers. Especially matured projects (i.e.,

project years 7 to 9) often have a single or two developers accounting for half of the familiarity with the project’s most

important concept. One could have expected that older projects are more likely to have distributed concept familiarity.

Instead, the available data let us assume that experts, or key owners, become established that know one or multiple

particular concepts very well and take on related issues. Finally, our analysis of abruptly leaving team members in

RQ3 highlights that when these developers represent a larger share of concept familiarity of an otherwise unequally

distributed concept, and that this concept is less well supported upon the developer’s departure.

This is essentially the case when the developer that possesses the strongest concept becomes less engaged with the

project, this strongest concept will most often see less activity in the time following their “departure” (as measured via

comment frequency). This, in general, highlights the challenge of knowledge transfer in OSS projects. Combining our

observations from RQ2 (many projects with keepers) and RQ3, we conclude that keepers rarely leave the project or,

if they leave, then they would not do so in an abrupt manner. This observation may be subject to survivor bias, i.e.,

having only ongoing/successful projects in the data set. Additional investigation on abandoned projects should yield

more insights into whether one of the abandonment causes is the departure of a keeper.

To gain a more in-depth understanding of why is this case, we observed from RQ4, that the concepts in OSS

projects do not seem to be equally distributed among the developers and when they leave, a significant drop in their

concept frequency is likely to follow. Reasons behind this behavior could be the lack of knowledge sharing among the

developers/teams and perhaps the geographically remote nature of teams in OSS projects.

We also investigated the implications that can be inferred from ConceptRealm for modern-day assignee recommenda-
tion algorithms for RQ5. We separated the OSS projects into two equally and unequally distributed concept groups

based on a threshold that we intuitively defined. This threshold helps us to include projects that are skewed towards the

extremes of the two proportions. i.e., < median - 0.01 and > median + 0.01. We also discovered that developers who are

top-ranked based on their concept frequency tend to be assigned to new issues in the projects thus making an unequal

distribution of concepts. While developers that are less familiar with the concepts are mostly assigned to new issues

which in turn results in equal distribution of concepts. This also strengthens our hypothesis that projects tend to have

an equal distribution of knowledge when developers that have low concept familiarity are assigned to new issues.

For RQ6, we also investigated the usefulness of ConceptRealm by extracting the data from the closed-source project
from Dynatrace. Due to easy access to the teams, we decided to perform the team-wise analysis of the project. We

evaluated each research question based on each team within the Dynatrace project. We observed that the variation of

concepts within teams of the closed-source project is similar to the OSS projects. Moreover, we investigated how similar

the impact of leaving members is within a closed-source project as compared to OSS projects. We found a similar drop

in concept frequency for strongest concept keepers when they depart the team or the project. This is essentially relevant

to the assumptions we postulated for the OSS projects which apparently are also correct for the closed-source project.

Then, we conducted an open-ended questionnaire with the lead practitioner of Dynatrace. Findings from this

questionnaire indicate that this approach is indeed helpful in identifying the individual that possesses the strongest

concepts in the project and vice versa. Similarly, this approach also helps in understanding whether the issues are being

assigned to the right person that might or might not be familiar with the concepts associated with that issue.

28

Balanced Knowledge Distribution among Software Development Teams

Conference acronym ’XX, June 03–05, 2018, Woodstock, NY

Compared to the OSS projects, the closed-source project is quite similar except for the number of keepers which might

differ due to the size of the project. In essence, this approach guides the practitioner in making such development-oriented

decisions and further highlights the overall team clusters present within the project.

7.2 Implications

The primary focus of this paper is on introducing the ConceptRealm and demonstrating its usefulness with the example of
keeper analysis. From the results, we conclude that this research has important implications for the scientific community

as well as practitioners.

Implications for researchers. The definition of the concept realm, especially the metrics for concept frequency,
7.2.1
allows to measure concept familiarity distribution in a team (and subsequently identify key developers in a project).
Concept frequency thus constitutes another factor that may help to characterize successful projects. The ConceptRealm
thus becomes another tool to study the assignments of developers to issues and subsequently the coordination among

team members. Applying our approach to other artifacts aside from issues and their comments offers the opportunity

to compare concepts extracted from requirements, documentation, or source code, and how these concepts differ from
those extracted from issues. The ConceptRealm thus serves as another view onto a development team, and especially for
open source systems, the reliance on key developers. This subsequently serves as a basis to compare against concept

distribution and evolution in industry projects.

Implications for practitioners. While the ConceptRealm is not readily integrated into a software engineering
7.2.2
support tool, it would ultimately become an important basis for measuring concept distribution in development teams

(open source and industrial).

In contrast to OSS development, we would expect that concepts are much more distributed, i.e., shared, in industrial

settings due to two main aspects: first, team members are more stable and continuously available, and second, manage-

ment actively aims to reduce the impact of turnover by encouraging concept distribution. Further studies are needed to

provide more insights into this aspect.

Knowing the OSS systems have volunteering members that might not be as stringent to the project as a company’s

contract-based employees, we believe that the proposed representation could greatly help in measuring the concept

distribution of teams within these industrial projects as well but the distribution might vary compared to OSS systems.

However, further studies are required to investigate this aspect.

The combination of the issue-level frequency with the keeper analysis allows us to identify not just any concept that

is poorly spread in the team but, more importantly, identify those that are currently important for the project (i.e., at the

team-level). Having only one or a few keepers of low-frequency concepts might be acceptable as a leaving keeper will
have less impact than a keeper for a high-frequency concept. Along these lines, the ConceptRealm helps stakeholders
to identify the developers with the highest familiarity with a concept and steer the assignment of new issues more

towards developers that are perhaps not optimally but sufficiently suitable in order to improve the concept spreading.
For newcomers, the ConceptRealm may help to identify the pre-existing concepts and who is familiar with them to
more effectively identify the right person for questions, reviewing, or bug reports. The ConceptRealm can be leveraged
to identify and estimate the impact of leaving keepers and prioritize concepts that need to be better distributed.

29

Conference acronym ’XX, June 03–05, 2018, Woodstock, NY

Shafiq, et al.

8 THREATS TO VALIDITY

External validity: We address researcher bias by relying on a large data set of real open source projects of non-negligible
size. While the data source was limited to the issue tracker Jira, this study was not specific to Jira as any textual source

from an issue tracker can be used, and the use of issue trackers is very common nowadays with little difference among

the popular trackers respective to the extracted data (i.e., issue description and comments). While other sources such as

discussion lists may also provide useful information where issue comments are less intensively used, previous research

has shown that these serve similar purposes [45] and hence could be used as a substitute data source.

Internal validity: Also, we aimed to avoid introducing bias in identifying the number of concepts for each project. To
this end, we performed a sanity check as outlined in Section 5.4 with the construction of a sufficiently large number of

LDA models, measured the overlap and cohesion of the obtained concepts, and selected the number of optimal concepts

yielding the highest cohesion and lowest concepts overlap.

Construct validity: One key study design decision was to consider only issues and their comments (rather than
also/instead of considering source code, requirements, or documentation, etc.). On the one hand, this allows to include

also team members that are not necessarily contributing source code, and, at the same time, allows to observe concept

changes over time without having to tediously extract the exact changes a developer made to a particular artifact at a

particular time (hence remaining also programming language agnostic). While we haven’t analyzed to what extent

concepts might emerge differently when including source code, we restricted our evaluation to issue-centric aspects

such as assignment rather than, e.g., pull request reviewing.

Conclusion validity: The findings of this study, as the title highlight, apply primarily in the context of open-source
software development. Hence, we cannot conclude that industrial projects experience similar levels of concept evolution

and similar levels of keepers. Our approach, however, should be well applicable to industrial software development

contexts where a significant amount of know-how is captured in issues and their comments. Contexts, where most

interaction among developers is occurring face to face, might not benefit from our approach as the extracted developer-

centric concept frequency values are likely to not accurately reflect the team’s actual concept familiarity distribution.

9 CONCLUSION

This paper analyzed how concepts evolve within OSS development teams. For this purpose, we constructed a practical
and general representation of domain knowledge denoted as the ConceptRealm, which characterizes a developer’s
concept familiarity extracted from the developer’s involvement in issue tracking systems. Our analysis of OSS projects

shows that our approach produces valuable concepts that can be applied, for example, to characterize future developer-
issue associations. Another application of the ConceptRealm is for investigating (and ultimately estimating) the impact
of leaving team members. For example, we found that a concept’s keeper that leaves the team will likely result in a
subsequent drop in the frequency of the respective concept. Furthermore, we also evaluated ConceptRealm using an
industrial case study which attested to the usefulness of this approach. We believe this representation allows managers

better to align issues with the developers’ concept familiarity and helps identify key individuals in the team. The
ConceptRealm could thus serve as the basis of novel recommendation systems.

Having established the basis for measuring concept familiarity in a team, we intend to focus more on applying these

metrics to investigate in more detail the impact and role of keepers in OSS projects and compare these findings to teams

and their concept distribution evolution in larger closed-source systems. This in-depth keeper analysis will also focus

on their role in abandoned projects.

30

Balanced Knowledge Distribution among Software Development Teams

Conference acronym ’XX, June 03–05, 2018, Woodstock, NY

ACKNOWLEDGMENTS

The research reported in this paper has been partly funded by the Linz Institute of Technology, and the Austrian Federal

Ministry of Transport, Innovation and Technology, the Austrian Federal Ministry for Digital and Economic Affairs and

the Province of Upper Austria and Styria in the frame of the COMET Program managed by FFG. We would also like to

acknowledge the support from Philipp Lengauer at Dynatrace for providing us with the data and helping us with the

evaluation.

REFERENCES
[1] Nik Nailah Binti Abdullah, Shinichi Honiden, Helen Sharp, Bashar Nuseibeh, and David Notkin. 2011. Communication patterns of agile requirements
engineering. Proceedings of the 1st Workshop on Agile Requirements Engineering - AREW ’11 (2011), 1–4. https://doi.org/10.1145/2068783.2068784
[2] Surafel Lemma Abebe and Paolo Tonella. 2010. Natural language parsing of program element names for concept extraction. IEEE International

Conference on Program Comprehension (2010), 156–159. https://doi.org/10.1109/ICPC.2010.29

[3] Surafel Lemma Abebe and Paolo Tonella. 2015. Extraction of domain concepts from the source code. Science of Computer Programming 98 (2015),

680–706. https://doi.org/10.1016/j.scico.2014.09.012

[4] Anonymous. 2022. Replication package for the paper - "Measuring Concept Distribution in Open Source Software Development Teams". https:

//doi.org/10.5281/zenodo.5167218

[5] Lingfeng Bao, Zhenchang Xing, Xin Xia, David Lo, and Shanping Li. 2017. Who Will Leave the Company?: A Large-Scale Industry Study of
Developer Turnover by Mining Monthly Work Report. In IEEE International Working Conference on Mining Software Repositories. IEEE, 170–181.
https://doi.org/10.1109/MSR.2017.58

[6] Victor R Basili, Gianluigi Caldiera, and H Dieter Rombach. 1994. The goal question metric approach. Encyclopedia of software engineering 2 (1994),

528–532.

[7] David M Blei, Andrew Y Ng, and Michael I Jordan. 2003. Latent Dirichlet Allocation. Journal of Machine Learning Research 3 (2003), 993–1022.

arXiv:1111.6189v1

[8] Michael Bloch, Sven Blumberg, and Jürgen Laartz. 2012. Delivering large-scale IT projects on time, on budget, and on value. Harvard Business

Review Fall (2012), 2–7.

[9] Barry W. Boehm. 2007. Software risk management: Principles and practices. Software Management, Seventh Edition January (2007), 365–374.

https://doi.org/10.1109/9780470049167.ch11

[10] H Alperen Çetin. 2020. Identifying Key Developers using Artifact Traceability Graphs. In 16th ACM International Conference on Predictive Models

and Data Analytics in Software Engineering. 1–10. https://doi.org/10.1145/3416508.3417116

[11] M E Conway. 1968. How do committees invent. Datamation 14, 4 (1968), 28–31.
[12] Valerio Cosentino, Javier Luis Canovas Izquierdo, and Jordi Cabot. 2015. Assessing the bus factor of Git repositories. In 2015 IEEE 22nd International
Conference on Software Analysis, Evolution, and Reengineering, SANER 2015 - Proceedings. IEEE, 499–503. https://doi.org/10.1109/SANER.2015.7081864
[13] Claudia O. De Melo, Daniela S. Cruzes, Fabio Kon, and Reidar Conradi. 2013. Interpretative case studies on agile team productivity and management.

Information and Software Technology 55, 2 (2013), 412–427. https://doi.org/10.1016/j.infsof.2012.09.004

[14] Tapajit Dey, Andrey Karnauch, and Audris Mockus. 2021. Replication Package for Representation of Developer Expertise in Open Source Software.
In 2021 IEEE/ACM 43rd International Conference on Software Engineering: Companion Proceedings (ICSE-Companion) (ICSE ’21). IEEE, 236–237.
https://doi.org/10.1109/ICSE-Companion52605.2021.00109

[15] Tapajit Dey, Andrey Karnauch, and Audris Mockus. 2021. Representation of Developer Expertise in Open Source Software. (2021), 995–1007.

https://doi.org/10.1109/icse43902.2021.00094

[16] Tapajit Dey and Audris Mockus. 2020. Effect of technical and social factors on pull request quality for the NPM ecosystem. International Symposium

on Empirical Software Engineering and Measurement (2020). https://doi.org/10.1145/3382494.3410685 arXiv:2007.04816

[17] Tapajit Dey and Audris Mockus. 2020. Which Pull Requests Get Accepted and Why? A study of popular NPM Packages. In arXiv. arXiv:2003.01153
[18] DILAN and MAHENDRAN. 2002. Serpents and Primitives: An Ethnographic Excursion into an Open Source Community. Ph.D. Dissertation. University

of California, Berkeley, Berkeley, CA.

[19] Nicolas Ducheneaut. 2005. Socialization in an open source software community: A socio-technical analysis. Computer Supported Cooperative Work:

CSCW: An International Journal 14, 4 (2005), 323–368. https://doi.org/10.1007/s10606-005-9000-1

[20] Kate Ehrlich and Marcelo Cataldo. 2014. The communication patterns of technical leaders. In Proceedings of the 17th ACM conference on Computer

supported cooperative work & social computing. 733–744. https://doi.org/10.1145/2531602.2531671

[21] Alessio Ferrari and Andrea Esuli. 2019. An NLP approach for cross-domain ambiguity detection in requirements engineering. Automated Software

Engineering (2019). https://doi.org/10.1007/s10515-019-00261-7

[22] Matthieu Foucault, Marc Palyart, Xavier Blanc, Gail C. Murphy, and Jean Remy Falléri. 2015. Impact of developer turnover on quality in open-source
software. 2015 10th Joint Meeting of the European Software Engineering Conference and the ACM SIGSOFT Symposium on the Foundations of Software
Engineering, ESEC/FSE 2015 - Proceedings (2015), 829–841. https://doi.org/10.1145/2786805.2786870

31

Conference acronym ’XX, June 03–05, 2018, Woodstock, NY

Shafiq, et al.

[23] Marco Gerosa, Igor Wiese, Bianca Trinkenreich, Georg Link, Gregorio Robles, Christoph Treude, Igor Steinmacher, and Anita Sarma. 2021. The
shifting sands of motivation: Revisiting what drives contributors in open source. Proceedings - International Conference on Software Engineering
(2021), 1046–1058. https://doi.org/10.1109/ICSE43902.2021.00098 arXiv:2101.10291

[24] Jin Guo, Jinghui Cheng, and Jane Cleland-huang. 2017. Semantically Enhanced Software Traceability Using Deep Learning Techniques. In IEEE/ACM

39th International Conference on Software Engineering Semantically. IEEE, 3–14. https://doi.org/10.1109/ICSE.2017.9

[25] A. Hars and S. Ou. 2001. Working for free? - Motivations of participating in open source projects. Proceedings of the Hawaii International Conference

on System Sciences 00, c (2001), 163. https://doi.org/10.1109/hicss.2001.927045

[26] Liangjie Hong and Brian D. Davison. 2010. Empirical study of topic modeling in Twitter. SOMA 2010 - Proceedings of the 1st Workshop on Social

Media Analytics (2010), 80–88. https://doi.org/10.1145/1964858.1964870

[27] Mark A. Huselid. 1995. The Impact Of Human Resource Management Practices On Turnover, Productivity, And Corporate Financial Performance.

Academy of Management Journal 38, 3 (1995), 635–872. https://doi.org/10.1109/SPAWDA.2011.6167273

[28] Daniel Izquierdo-Cortazar, Gregorio Robles, Felipe Ortega, and Jesus M. Gonzalez-Barahona. 2009. Using software archaeology to measure knowledge
loss in software projects due to developer turnover. Proceedings of the 42nd Annual Hawaii International Conference on System Sciences, HICSS (2009),
1–10. https://doi.org/10.1109/HICSS.2009.498

[29] Jing Jiang, Yun Yang, Jiahuan He, Xavier Blanc, and Li Zhang. 2017. Who should comment on this pull request? Analyzing attributes for more
accurate commenter recommendation in pull-based development. Information and Software Technology 84 (2017), 48–62. https://doi.org/10.1016/j.
infsof.2016.10.006

[30] Takeshi Kakimoto, Yasutaka Kamei, Masao Ohira, and Ken-ichi Matsumoto. 2006. Social network analysis on communications for knowledge
collaboration in OSS communities. Proceedings of the 2nd International Worksho[ on Supporting Knowledge Collaboration in Software Development:
KCSD2006 January 2006 (2006), 1–7.

[31] Zhifang Liao, Yanbing Li, Dayu He, Jinsong Wu, Yan Zhang, and Xiaoping Fan. 2017. Topic-Based Integrator Matching for Pull Request. 2017 IEEE
Global Communications Conference, GLOBECOM 2017 - Proceedings 2018-Janua, 1 (2017), 1–6. https://doi.org/10.1109/GLOCOM.2017.8254426
[32] Bin Lin, Gregorio Robles, and Alexander Serebrenik. 2017. Developer turnover in global, industrial open source projects: Insights from applying
survival analysis. In Proceedings - 2017 IEEE 12th International Conference on Global Software Engineering, ICGSE 2017. IEEE, 66–75. https:
//doi.org/10.1109/ICGSE.2017.11

[33] Bin Lu, Myle Ott, Claire Cardie, and Benjamin K. Tsou. 2011. Multi-aspect sentiment analysis with topic models. In Proceedings - IEEE International

Conference on Data Mining, ICDM. IEEE, 81–88. https://doi.org/10.1109/ICDMW.2011.125

[34] John McManus. 2012. Risk management in software development projects. https://doi.org/10.4324/9780080498089
[35] George A. Miller. 1995. WordNet: A Lexical Database for English. Commun. ACM 38, 11 (1995), 3941. https://doi.org/10.1016/0099-3964(69)90010-6
[36] Audris Mockus. 2009. Succession: Measuring transfer of code and developer productivity. In Proceedings - International Conference on Software

Engineering. IEEE, 67–77. https://doi.org/10.1109/ICSE.2009.5070509

[37] Audris Mockus. 2010. Organizational volatility and its effects on software defects. In Proceedings of the ACM SIGSOFT Symposium on the Foundations

of Software Engineering. 117–126. https://doi.org/10.1145/1882291.1882311

[38] Srinivas Nidhra, Muralidhar Yanamadala, Wasif Afzal, and Richard Torkar. 2013. Knowledge transfer challenges and mitigation strategies in global
software development—A systematic literature review and industrial validation. International Journal of Information Management 33, 2 (2013),
333–355. https://doi.org/10.1016/j.ijinfomgt.2012.11.004

[39] Adewale Obadimu, Esther Mead, Muhammad Nihal Hussain, and Nitin Agarwal. 2019. Identifying toxicity within youtube video comment. In
Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), Vol. 11549 LNCS.
Springer International Publishing, 214–223. https://doi.org/10.1007/978-3-030-21741-9_22

[40] Inah Omoronyia, John Ferguson, Marc Roper, and Murray Wood. 2009. Using developer activity data to enhance awareness during collaborative

software development. Computer Supported Cooperative Work 18, 5-6 (2009), 509–558. https://doi.org/10.1007/s10606-009-9104-0

[41] Marco Ortu, Giuseppe Destefanis, Bram Adams, Alessandro Murgia, Michele Marchesi, and Roberto Tonelli. 2015. The JIRA repository dataset:
Understanding social aspects of software development. ACM International Conference Proceeding Series 2015-Octob, October (2015). https:
//doi.org/10.1145/2810146.2810147

[42] Marco Ortu, Tracy Hall, Michele Marchesi, Roberto Tonelli, David Bowes, and Giuseppe Destefanis. 2018. Mining communication patterns in
software development: A GitHub analysis. ACM International Conference Proceeding Series (2018), 70–79. https://doi.org/10.1145/3273934.3273943
[43] Tobias Otte, Robert Moreton, and Heinz D. Knoell. 2008. Applied quality assurance methods under the open source development model. Proceedings

- International Computer Software and Applications Conference (2008), 1247–1252. https://doi.org/10.1109/COMPSAC.2008.65

[44] Annibale Panichella, Bogdan Dit, Rocco Oliveto, Massimilano Di Penta, Denys Poshynanyk, and Andrea De Lucia. 2013. How to effectively use topic
models for software engineering tasks? An approach based on Genetic Algorithms. Proceedings - International Conference on Software Engineering
(2013), 522–531. https://doi.org/10.1109/ICSE.2013.6606598

[45] Sebastiano Panichella, Gabriele Bavota, Massimiliano Di Penta, Gerardo Canfora, and Giuliano Antoniol. 2014. How developers’ collaborations
identified from different sources tell us about code changes. Proceedings - 30th International Conference on Software Maintenance and Evolution,
ICSME 2014 (2014), 251–260. https://doi.org/10.1109/ICSME.2014.47

[46] M. F. Porter. 1980. An algorithm for suffix stripping. Program 14, 3 (1980), 130–137. https://doi.org/10.1108/eb046814

32

Balanced Knowledge Distribution among Software Development Teams

Conference acronym ’XX, June 03–05, 2018, Woodstock, NY

[47] Juan Ramos. 2003. Using TF-IDF to Determine Word Relevance in Document Queries. Proceedings of the first instructional conference on machine

learning 242, 1 (2003), 29–48.

[48] Peter C. Rigb, Yue Cai Zhu, Samuel M. Donadell, and Audris Mockus. 2016. Quantifying and mitigating turnover-induced knowledge loss:
Case studies of chrome and a project at avaya. Proceedings - International Conference on Software Engineering 14-22-May- (2016), 1006–1016.
https://doi.org/10.1145/2884781.2884851

[49] Martin P. Robillard. 2021. Turnover-induced knowledge loss in practice. In Proceedings of the 29th ACM Joint Meeting on European Software
Engineering Conference and Symposium on the Foundations of Software Engineering, Vol. 1. Association for Computing Machinery, 1292–1302.
https://doi.org/10.1145/3468264.3473923

[50] Michael Röder, Andreas Both, and Alexander Hinneburg. 2015. Exploring the space of topic coherence measures. WSDM 2015 - Proceedings of the

8th ACM International Conference on Web Search and Data Mining (2015), 399–408. https://doi.org/10.1145/2684822.2685324

[51] Per Runeson and Martin Höst. 2009. Guidelines for conducting and reporting case study research in software engineering. Empirical Software

Engineering 14, 2 (2009), 131–164. https://doi.org/10.1007/s10664-008-9102-8

[52] Warren Sack, Françoise Détienne, Nicolas Ducheneaut, Jean Marie Burkhardt, Dilan Mahendran, and Flore Barcellini. 2006. A methodological
framework for socio-cognitive analyses of collaborative design of open source software. Computer Supported Cooperative Work 15, 2-3 (2006),
229–250. https://doi.org/10.1007/s10606-006-9020-5

[53] Saad Shafiq and Irum Inayat. 2017. Towards studying the communication patterns of Kanban teams: A research design. In Proceedings - 2017 IEEE

25th International Requirements Engineering Conference Workshops, REW 2017. 303–306. https://doi.org/10.1109/REW.2017.34

[54] Saad Shafiq and Irum Inayat. 2019. Communication Patterns of Kanban Teams and their Impact on Iteration Performance and Quality. In 2019 45th
Euromicro Conference on Software Engineering and Advanced Applications (SEAA). IEEE, 164–168. https://doi.org/10.1109/SEAA.2019.00033
[55] Saad Shafiq, Atif Mashkoor, Christoph Mayr-Dorn, and Alexander Egyed. 2021. NLP4IP: Natural Language Processing-based Recommendation
Approach for Issues Prioritization. In 2021 47th Euromicro Conference on Software Engineering and Advanced Applications (SEAA). IEEE, Palermo,
Italy, 99–108. https://doi.org/10.1109/SEAA53835.2021.00022

[56] Saad Shafiq, Atif Mashkoor, Christoph Mayr-Dorn, and Alexander Egyed. 2021. TaskAllocator: A Recommendation Approach for Role-based Tasks
Allocation in Agile Software Development. In 2021 IEEE/ACM Joint 15th International Conference on Software and System Processes (ICSSP) and 16th
ACM/IEEE International Conference on Global Software Engineering (ICGSE). IEEE, 39–49. https://doi.org/10.1109/ICSSP-ICGSE52873.2021.00014
arXiv:2103.02330

[57] A. I. Tikhonov, A. G. Shaikhullin, A. M. Dolgushin, and R. F. Babikov. 2014. Influence of Social and Technical Factors for Evaluating Contribution in

GitHub. In Measurement Techniques, Vol. 18. 1406–1407. https://doi.org/10.1007/BF00823309

[58] Anubhav Trivedi. 2020. Code Nano-Pattern Detection using Deep Learning. In Proceedings of the 13th Innovations in Software Engineering Conference

on Formerly known as India Software Engineering Conference.

[59] Sri Lakshmi Vadlamani and Olga Baysal. 2020. Studying Software Developer Expertise and Contributions in Stack Overflow and GitHub. Proceedings
- 2020 IEEE International Conference on Software Maintenance and Evolution, ICSME 2020 (2020), 312–323. https://doi.org/10.1109/ICSME46990.2020.
00038

[60] Georg Von Krogh, Sebastian Spaeth, and Karim R. Lakhani. 2003. Community, joining, and specialization in open source software innovation: A

case study. Research Policy 32, 7 (2003), 1217–1241. https://doi.org/10.1016/S0048-7333(03)00050-7

[61] Hanna Wallach, David Mimno, and Andrew McCallum. 2009. Rethinking LDA: Why Priors Matter. In Advances in Neural Information Processing
Systems, Y Bengio, D Schuurmans, J Lafferty, C Williams, and A Culotta (Eds.), Vol. 22. Curran Associates, Inc. https://proceedings.neurips.cc/paper/
2009/file/0d0871f0806eae32d30983b62252da50-Paper.pdf

[62] Jing Wu and Khim Yong Goh. 2009. Evaluating longitudinal success of open source software projects: A social network perspective. Proceedings of

the 42nd Annual Hawaii International Conference on System Sciences, HICSS (2009), 1–10. https://doi.org/10.1109/HICSS.2009.199

[63] Fu Xianghua, Liu Guo, Guo Yanyan, and Wang Zhiqiang. 2013. Multi-aspect sentiment analysis for Chinese online social reviews based on topic

modeling and HowNet lexicon. Knowledge-Based Systems 37 (2013), 186–195. https://doi.org/10.1016/j.knosys.2012.08.003

[64] Jifeng Xuan, He Jiang, Zhilei Ren, and Weiqin Zou. 2012. Developer prioritization in bug repositories. Proceedings - International Conference on

Software Engineering (2012), 25–35. https://doi.org/10.1109/ICSE.2012.6227209

[65] Yin Zhang, Rong Jin, and Zhi Hua Zhou. 2010. Understanding bag-of-words model: A statistical framework. International Journal of Machine

Learning and Cybernetics 1, 1-4 (2010), 43–52. https://doi.org/10.1007/s13042-010-0001-0

33

