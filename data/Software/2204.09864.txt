2
2
0
2

r
p
A
1
2

]

R
C
.
s
c
[

1
v
4
6
8
9
0
.
4
0
2
2
:
v
i
X
r
a

Using SGX for Meta-Transactions Support in
Ethereum DApps

Emanuel Onica and Ciprian Amariei

Alexandru Ioan Cuza University of Ia¸si, Romania
eonica@info.uaic.ro, ciprian.amariei@gmail.com

Abstract. Decentralized applications (DApps) gained traction in the
context of the blockchain technology. Ethereum is currently the public
blockchain that backs the largest amount of the existing DApps. On-
boarding new users to Ethereum DApps is a notoriously hard issue to
solve. This is mainly caused by lack of cryptocurrency ownership, needed
for transaction fees. Several meta-transaction patterns emerged for de-
coupling users from paying these fees. However, such solutions are mostly
oﬀered via oﬀ-chain, often paid relayer services and do not fully address
the security issues present in the meta-transaction path. In this paper,
we introduce a new meta-transaction architecture that makes use of the
Intel Software Guard Extensions (SGX). Unlike other solutions, our ap-
proach would oﬀer the possibility to deploy a fee-free Ethereum DApp on
a web server that can directly relay meta-transactions to the Ethereum
network while having essential security guarantees integrated by design.

Keywords: DApps · Blockchain · Ethereum · Meta-Transactions · SGX.1

1

INTRODUCTION

Blockchain networks created the context for developing new applications that
leverage decentralized trust. The role of nodes in a blockchain network is to
maintain a replicated data structure, the main part of it being commonly re-
ferred as the ledger. Nodes validate transactions sent by clients that change
the replicated data. Transaction blocks are formed and mutually agreed in a
decentralized manner. Finally, conﬁrmed blocks are appended to the ledger.

Newer blockchains provide support for smart contracts, small programs exe-
cuted on the blockchain nodes. Transactions can trigger functions operating over
a contract state stored as part of the blockchain replicated data. This signiﬁ-
cantly expanded the range of blockchain applications, from the ﬁntech area to
games and others, coined under the generic name of DApps. Ethereum [24] was
the ﬁrst platform to support smart contracts, and is still dominating the DApps
market [4, 11]. An Ethereum DApp is most often implemented as a web applica-
tion deployed on a web server having part of its backend using smart contracts
on the blockchain. The frontend can query the blockchain for information. Also,
actions performed by end-users can trigger transactions to smart contracts. A
simpliﬁed view of the DApp interaction ﬂow is depicted in Figure 1.

1 Author’s version. The ﬁnal authenticated publication is available online at

https://doi.org/[to be completed].

 
 
 
 
 
 
2

Emanuel Onica and Ciprian Amariei

Fig. 1: Typical ﬂow for Ethereum
DApp interaction.

Fig. 2: Interaction ﬂow when relaying
using SGX meta-transactions.2

Users onboarding is a known major issue in Ethereum DApps development [13,
17, 23]. This stems from the requirements a user must fulﬁll for enabling DApp
interaction with the blockchain backend. Ethereum transactions charge a fee.
This fee is required to regulate the transaction processing load and as incen-
tive for the network nodes, and must be paid by the transaction initiator. This
implies Ethereum cryptocurrency ownership by the user of the application. Un-
fortunately this prevents DApps to target many users that might not even be
familiar with the notion of cryptocurrency or simply are not willing to pay.

Meta-transactions [15, 20] emerged as a solution for users onboarding. In
essence, this implies wrapping end-user transaction data in transactions paid
by a diﬀerent entity, which can be either the DApp owner or another sponsor.
Although the concept seems simple, the implementation and deployment are not.
Some important issues arise when integrating meta-transaction relaying with a
DApp. The funds paying for transactions must be secured, as well as the integrity
of the end-user transaction data. The few maintained solutions are typically
oﬀered as third party relayer services [3,5,8]. These address transaction integrity
but disregard the protection of funds allocated for paying transactions. Some also
charge a relayer fee or require consistent changes in the DApp architecture. This
complicates the task of a developer in ﬁnding a suitable DApp design.

In this paper we introduce the SGX meta-transaction architecture, intended
to facilitate secure meta-transaction relaying integration for DApp developers.
Our purpose is to permit meta-transaction wrapping to be handled securely
by the DApp host, which will act as transaction relayer. For this, we use a
trusted execution environment (TEE), namely the Intel Software Guard Exten-
sions (SGX) [14]. This changes the transaction path as depicted in Figure 2.

Our paper is structured as follows. In Section 2 we present some background
on Ethereum DApps and the context of meta-transactions. In Section 3 we intro-
duce our architecture and an initial proof-of-concept implementation. We discuss
some extensions in Section 4. Finally, we conclude in Section 5.

2 Simple queries not changing the smart contract state are considered free in Ethereum,

otherwise these should follow the same path as transactions.

Using SGX for Meta-Transactions Support in Ethereum DApps

3

2 BACKGROUND

Users interacting with Ethereum DApps can trigger transactions, such as cryp-
tocurrency transfers or calling functions in smart contracts that change the
blockchain data. The latter is the more general case and our focus. Transactions
come at a cost quantiﬁed in gas units. This cost increases with the complexity of
operations executed in the smart contract. The user must pay a transaction fee
equal to the cost in gas multiplied with a price per gas unit set in the Ethereum
cryptocurrency. This price per gas unit is composed of a variable base network
fee to which a priority fee can be added to speed up transaction processing.

Two types of accounts are deﬁned in Ethereum: externally owned accounts
(EOAs) and contract accounts. Any account is identiﬁed by an address and has
a balance in the Ethereum currency. Transactions can be submitted by EOAs,
essentially user accounts controlled by private keys used to sign the transactions.
The fees of veriﬁed transactions are deducted from the EOA balance. The main
part included in a transaction message is either or both of a data payload encod-
ing a smart contract function call and a currency value to be transferred. Other
transaction ﬁelds include an incremental nonce bound to the EOA, a gas limit,
the maximum gas price, the recipient address and the EOA’s signature.

We consider DApps where the interaction does not imply a payment and users
can have a zero balance in Ethereum currency. In such cases, a meta-transaction
would wrap the original end-user’s transaction data, and must be signed and
paid by an EOA address capable of covering the transaction fees. The DApp
developer is faced with the challenge of implementing a signature delegation
pattern to such an EOA address, providing appropriate trust guarantees.

Deployed solutions typically require DApps to use oﬀ-chain relayer services [3,
5, 8]. Integrating a third party service into the transaction path comes with an
inherent risk to the transaction integrity. Therefore, these solutions focus on
ensuring that the service itself cannot tamper the original data when wrapping
it into a meta-transaction. Provided APIs require the user’s EOA signature to be
present in their sent data and to adapt the smart contracts backend of the DApp
to verify that. However, this does not protect the private key used for signing
the meta-transaction itself. The relayer service must be provided with funds for
paying the meta-transaction. This makes critical storing securely the relayer’s
signing key. If an attacker gains access to this key it can drain the relayer funds,
by simply signing transactions transferring the relayer’s balance to the attacker.
In a normal transaction scenario, keeping the signing key safe is solely the
responsibility of the end-user who operates with her own funds. In the relayed
meta-transaction scenario this guarantee should be provided by the relayer. Un-
fortunately, none of the relayer implementations we are aware of oﬀers details
on how it secures the meta-transaction signing key. Some relayer providers do
not even specify whether they host their service on their private infrastructure
or on a public cloud, case proven vulnerable to sensitive data leaks [19, 22, 25].
We propose a meta-transaction architecture that does not depend on an ex-
ternal relayer and overcomes the security issues above. This simpliﬁes integrating
meta-transaction support in a DApp and saves fees charged by external relayers.

4

Emanuel Onica and Ciprian Amariei

3 BASIC SOLUTION DESIGN

The purpose of our design is to provide easy integration for safe meta-transaction
support with the DApp backend implementation and to use the DApp host as a
secure relayer. Eliminating a third party relayer service from the transaction path
automatically eliminates the concern of this party tampering with the transac-
tions. However, we consider the web server host where the DApp is deployed
untrusted with respect to preserving the conﬁdentiality of sensitive information.
The main threat we tackle is an attack trying to leak private credentials from
this host, such as the key used in signing the meta-transactions.

To prevent private key leakage we employ the use of Intel SGX, a widely
available TEE solution. Its core abstraction is an enclave, which isolates sensitive
code execution within an encrypted memory region. An enclave implementation
can provide a set of functions - ECalls, to be called from untrusted code outside
the enclave for executing code in secure isolation within the enclave. Another set
of functions, the OCalls are used when the code inside the enclave initiates calls
to untrusted code. The deﬁnition of ECalls and OCalls forms the interface of the
enclave. An enclave can be remotely attested in order to verify the integrity of
the enclave code and if this is executed on a genuine SGX capable processor. The
remote attestation can also be used to establish a shared secret base for encrypted
communication between the enclave and the party requesting the attestation.

We use an SGX enclave integrated with the DApp for the sensitive operations
in the transaction ﬂow. Once the DApp is deployed, the DApp owner must exe-
cute an enclave initialization protocol. This protocol establishes a set of master
credentials, namely an Ethereum account address and the corresponding signing
key, to be used within the enclave. These credentials are randomly generated in
the enclave and can be sent to the DApp owner via a secure channel established
as part of the attestation. The DApp owner will use the master account address
to transfer funds for covering the meta-transaction fees. The master signing key
must be safely stored by the DApp owner and is not used in normal operation
outside enclave space. This key is required to be sent to the DApp owner only
to maintain control over the funds in case of enclave failure.

After this initialization the enclave is ready to operate on transaction data
sent by a user. We deﬁne a SGX meta-transaction as a meta-transaction pre-
pared and signed within the secure enclave space. A simpliﬁed overview of the
enclave integration within the transaction ﬂow is presented in Figure 3. The
transaction data contains the serialized encoding of the smart contract function
call and the contract address. This is received at the DApp web backend and
passed via an ECall to the enclave. Additional information necessary to form
an Ethereum transaction such as gas related parameters can be passed with the
transaction data or established in the enclave space. The SGX meta-transaction
is prepared within the enclave using an encoding required by Ethereum, wrap-
ping the data and the rest of ﬁelds including a sequentially increasing nonce. This
nonce is associated to the enclave’s master Ethereum address and is required for
transaction ordering. Finally, the enclave code signs the SGX meta-transaction
using the master signing key and passes it to the web backend through an OCall.

Using SGX for Meta-Transactions Support in Ethereum DApps

5

Fig. 3: High level overview of the SGX meta-transaction ﬂow.

Following the above steps, the web backend code of the DApp can relay the
signed SGX meta-transaction to the Ethereum blockchain. The enclave main-
tains a trusted keystore, secured using the sealing key - a hardware key unique
per CPU accessible only in the enclave. The keystore is loaded in the enclave
memory when needed and can be stored encrypted on disk. The structure of this
keystore can be adapted to ﬁt the needs of the DApp. In its simplest form it
holds the set of master credentials. Once the web backend receives the transac-
tion conﬁrmation an ECall will trigger the nonce increment in the keystore.

We have implemented a proof-of-concept of the above design wrapping the
SGX enclave within a native Node.js module [10]. This module allows the DApp
backend to trigger the necessary meta-transaction ﬂow operations within the en-
clave. Most Ethereum DApp implementations use JavaScript libraries [1, 6] for
interacting with the blockchain network. Therefore, providing our solution as a
Node.js module makes seamless the integration with most DApps. We performed
a functionality test of our transaction ﬂow on a mockup DApp where the user
can change a value in a smart contract deployed on the Ethereum Ropsten test
network. Our SGX meta-transaction constructed within the enclave was success-
fully validated by the network.3 We tested the implementation on a SGX capable
machine equipped with an Intel i7-7700 CPU running Ubuntu 18.04.5 LTS. The
measured time overhead for preparing the signed SGX meta-transaction was in
the range of 3ms including logging, orders of magnitude smaller than the average
conﬁrmation time of an Ethereum transactions block at almost 14s.

4 DISCUSSION AND OPEN DIRECTIONS

The description in the previous section is limited to the bare necessities in the
transaction ﬂow. In the following we examine some of the extensions we consider.
A more complex structure of the keystore could include multiple Ethereum
credentials generated for signing meta-transactions. This scenario could ﬁt al-
locating separate funds for diﬀerent users or attempts to scale the transaction
ﬂow. Exporting multiple addresses and safely storing their private keys would
be, however, prone to increased security risks for the DApp owner. Therefore,
for such a scenario we consider keeping these keys conﬁned in the enclave space.

3 The record of the ﬁrst SGX meta-transaction relayed via our implementa-
tion is available at the following address: https://ropsten.etherscan.io/tx/
0xdcb13cdaaf847ddce26307988ac4938c9037e03b747276f46b222df2a42d302b

6

Emanuel Onica and Ciprian Amariei

The master account address would act as a central deposit for funding the meta-
transactions signed by each of the secondary accounts. This would be done by
periodical value transactions sent to these internal accounts and will obviously
add an extra cost. However, a simple value transaction has the smallest cost in
Ethereum and tuning the periodicity of funding can minimize the overhead.

A particular case is of DApps where the Ethereum identity of a user must be
preserved in the transactions: DApps using tokens, either fungible, essentially
virtual coins built over Ethereum, or NFTs. The approach in other solutions [5,
8, 15, 16] is to include a signature using user’s own Ethereum credentials in the
meta-transaction and adapt the smart contract logic to verify it. Our design in
Section 3 can easily accommodate such changes in the carried transaction data.
EIP-2771 [21] proposes a contract level protocol for validating data signed
with user’s Ethereum credentials in meta-transactions. While we can integrate
our solution also with this architecture, we note that its main scope is to guar-
antee integrity against a relayer controlled by an untrusted third party. In our
design the DApp owner controls the relayer. Nevertheless, we could consider a
possible integrity attack escalation over the web server. This can be mitigated
by a TLS channel terminated within the enclave over which the end-user will
send the transaction data. This guarantees the integrity up to the enclave on
the relaying host. Further, the SGX meta-transaction is securely signed in the
enclave, therefore it cannot be altered until veriﬁed in the blockchain network.
We have considered various TLS implementations in conjunction with SGX for
such an extension [2,7,9,12]. Some provide performance advantages, while others
seem to be easier to integrate with our web oriented architecture. For brevity
we leave further technical details for a future extended report of our work.

Finally, an aspect to consider is the solution deployment. An attractive option
would be to deploy the DApp over a public cloud platform. Currently the support
for SGX oﬀered in virtualized environments comes with a performance impact
as discussed in [18]. Further analysis is required, but we believe the transaction
conﬁrmation time plus the network latency would still overshadow the additional
penalties inﬂicted by the virtualization.

5 CONCLUSION

We introduced in this paper a new architecture for relaying Ethereum meta-
transactions. Unlike external, sometimes paid services, our solution takes a dif-
ferent approach aiming for a secure integration of meta-transaction relaying sup-
port directly within the DApp. Our design introduces the SGX meta-transaction
prepared and signed within a secure enclave space. This provides independence
to a DApp developer, it relaxes integrity concerns by not needing to trust an
extra third party and oﬀers solid guarantees on preventing leaks that could lead
to losing funds allocated for paying the meta-transaction fees.

We emphasize that our proposed architecture is a work-in-progress. We brieﬂy
discussed multiple extensions we consider. We believe that our proof-of-concept
integrating SGX meta-transactions via a Node.js module already shows the prac-
ticality of our design and promising potential for use within DApps.

Using SGX for Meta-Transactions Support in Ethereum DApps

7

References

1. Web3.js - Ethereum JavaScript API (2016), https://web3js.readthedocs.io/

en/v1.7.0/, Online - Accessed on 17/02/2022

2. Wolfssl with Intel SGX (2017), https://www.wolfssl.com/wolfssl-with-intel-

sgx/, Online - Accessed on 27/01/2022

3. Biconomy (2021), https://docs.biconomy.io/, Online - Accessed on 27/01/2022
4. DappRadar - The World’s Dapp Store (2021), https://dappradar.com/, Online -

Accessed on 27/01/2022

5. Ethereum Gas Station Network (GSN) (2021), https://docs.opengsn.org/, On-

line - Accessed on 27/01/2022

6. Ethers.js (2022), https://docs.ethers.io/v5/, Online - Accessed on 27/01/2022
7. Gramine (2022), https://gramine.readthedocs.io/en/latest/, Online - Ac-

cessed on 17/02/2022

8. Infura Transactions (ITX) (2022), https://docs.infura.io/infura/features/

transactions, Online - Accessed on 17/02/2022

9. Intel Software Guard Extensions SSL (2022), https://github.com/intel/intel-

sgx-ssl, Online - Accessed on 27/01/2022

10. Native abstractions for Node.js (2022), https://nodejs.org/api/addons.html,

Online - Accessed on 31/03/2022

11. State of the DApps - Explore Decentralized Applications (2022), https://www.

stateofthedapps.com/, Online - Accessed on 27/01/2022

12. Aublin, P.L., Kelbert, F., O’Keeﬀe, D., Muthukumaran, D., Priebe, C., Lind, J.,
Krahn, R., Fetzer, C., Eyers, D., Pietzuch, P.: TaLoS: Secure and Transparent
TLS Termination inside SGX Enclaves (2017), https://github.com/lsds/TaLoS,
Online - Accessed on 27/01/2022

13. Chandra, S., Aggarwal, S.: Web3: Onboarding the next billion users - The road
ahead (2022), https://cointelegraph.com/news/web3-onboarding-the-next-
billion-users-the-road-ahead, Online - Accessed on 31/03/2022

14. Costan, V., Devadas, S.: Intel SGX Explained. Cryptology ePrint Archive, Re-
port 2016/086 (2016), https://eprint.iacr.org/2016/086, Online - Accessed on
27/01/2022

15. Griﬃth, A.T.: Ethereum Meta Transactions

to drive
mass Ethereum adoption (2018), https://medium.com/@austin_48503/ethereum-
meta-transactions-90ccf0859e84, Online - Accessed on 27/01/2022

- Lowering barriers

16. Griﬃth, A.T.: Native Meta Transactions (2018), https://medium.com/gitcoin/
native-meta-transactions-e509d91a8482, Online - Accessed on 31/03/2022
17. Khatri, Y.: Ethereum onboarding solution provider UniLogin is shutting down
due to high gas fees (2020), https://www.theblockcrypto.com/post/78358/
ethereum-onboarding-unilogin-shutting-down-high-gas-fees, Online - Ac-
cessed on 31/03/2022

18. Ngoc, T.D., Bui, B., Bitchebe, S., Tchana, A., Schiavoni, V., Felber, P., Hagimont,
D.: Everything You Should Know About Intel SGX Performance on Virtualized
Systems. Proceedings of the ACM on Measurement and Analysis of Computing
Systems 3(1), 5:1–5:21 (2019)

19. Ristenpart, T., Tromer, E., Shacham, H., Savage, S.: Hey, You, Get Oﬀ of My
Cloud: Exploring Information Leakage in Third-Party Compute Clouds. In: Pro-
ceedings of the 16th ACM Conference on Computer and Communications Security.
pp. 199–212. CCS ’09 (2009)

8

Emanuel Onica and Ciprian Amariei

20. Rush, N.: Making uPort Smart Contracts Smarter, Part 3: Fixing User Ex-
perience with Meta Transactions (2017), https://medium.com/uport/making-
uport-smart-contracts-smarter-part-3-fixing-user-experience-with-
meta-transactions-105209ed43e0, Online - Accessed on 31/03/2022

21. Sandford, R., Siri, L., Tirosh, D., Weiss, Y., Forshtat, A., Croubois, H., Tomar, S.,
McCorry, P., Venturo, N., Vogelsteller, F.: EIP-2771: Secure Protocol for Native
Meta Transactions (2020), https://eips.ethereum.org/EIPS/eip-2771, Online
- Accessed on 27/01/2022

22. Varadarajan, V., Zhang, Y., Ristenpart, T., Swift, M.: A Placement Vulnerabil-
ity Study in Multi-Tenant Public Clouds. In: Proceedings of the 24th USENIX
Conference on Security Symposium. pp. 913–928. SEC’15 (2015)

23. Whinfrey, C.: Gas Spectrum Transactions

(2019), https://medium.com/
authereum/gas-spectrum-transactions-bd34b65107b, Online - Accessed on
31/03/2022

24. Wood, G.: Ethereum: A Secure Decentralised Generalised Transaction Ledger - Yel-
low Paper (2021), https://ethereum.github.io/yellowpaper, Online - Accessed
on 27/01/2022

25. Zhang, Y., Juels, A., Reiter, M.K., Ristenpart, T.: Cross-Tenant Side-Channel
Attacks in PaaS Clouds. In: Proceedings of the 2014 ACM SIGSAC Conference on
Computer and Communications Security. pp. 990–1003. CCS ’14 (2014)

