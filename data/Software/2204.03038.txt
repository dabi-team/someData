Proceedings of the 2022 International Symposium on Flexible Automation
ISFA2022
July 3-7, 2022, Yokohama, Japan

ISFA2022-031

SAFE INTERACTIVE INDUSTRIAL ROBOTS USING
JERK-BASED SAFE SET ALGORITHM

2
2
0
2

Ruixuan Liu, Rui Chen, Changliu Liu ∗†
Robotics Institute
Carnegie Mellon University
Pittsburgh, PA, USA

p
e
S
0
2

]

O
R
.
s
c
[

2
v
8
3
0
3
0
.
4
0
2
2
:
v
i
X
r
a

ABSTRACT

The need to increase the ﬂexibility of production lines is
calling for robots to collaborate with human workers. How-
ever, existing interactive industrial robots only guarantee intrin-
sic safety (reduce collision impact), but not interactive safety
(collision avoidance), which greatly limited their ﬂexibility. The
issue arises from two limitations in existing control software for
industrial robots: 1) lack of support for real-time trajectory mod-
iﬁcation; 2) lack of intelligent safe control algorithms with guar-
anteed collision avoidance under robot dynamics constraints. To
address the ﬁrst issue, a jerk-bounded position controller (JPC)
was developed previously. This paper addresses the second limi-
tation, on top of the JPC. Speciﬁcally, we introduce a jerk-based
safe set algorithm (JSSA) to ensure collision avoidance while
considering the robot dynamics constraints. The JSSA greatly
extends the scope of the original safe set algorithm, which has
only been applied for second-order systems with unbounded ac-
celerations. The JSSA is implemented on the FANUC LR Mate
200id/7L robot and validated with HRI tasks. Experiments show
that the JSSA can consistently keep the robot at a safe distance
from the human while executing the designated task.

1 Introduction

Industrial robots are widely used in many applications
[4, 17]. The contemporary need requires robots to work in-
telligently in unstructured and dynamic environments, such as

∗This work is in part supported by Siemens and Ford Motor Company. The

robot arm is donated by FANUC Corporation.

†Contact author: ruixuanl, ruic3, cliu6@andrew.cmu.edu

(a)

(b)

FIGURE 1: Examples of HRI. (a) Human-robot co-assembly [10]. (b) Robot
handover.

human-robot interaction (HRI) [2, 3, 7]. Figure 1 shows exam-
ples of HRI, where the robot co-assembles an object with the
human in Fig. 1(a) and the robot delivers a desired workpiece to
the human in Fig. 1(b).

Interactive industrial robots are rarely deployed to real ap-
plications mainly due to safety concerns. To ensure safety, most
existing industrial robots either only work in highly-controlled
spaces, i.e., within designated work cells with fences to sepa-
rate from workers [13], or simply halt upon unexpected environ-
mental changes, i.e., human enters the work zone [14]. Existing
collaborative industrial robots (i.e., FANUC CR series) ensure
intrinsic safety by reducing the impact upon collision. However,
they are not able to actively avoid collision (interactive safety),
which hinders close interaction with human workers. Many ex-
isting works have been proposed to address the interactive safety
concern [1, 5, 6, 15]. However, the real application of those
methods is difﬁcult since most industrial robot drivers do not
provide the ﬂexibility for executing the safe control algorithms
during control loops. A jerk-bounded position control driver
(JPC) [12] was developed previously, which provides a uniﬁed

1

Copyright © 2022 by ASME

 
 
 
 
 
 
interface for robot control under dynamics constraints and en-
ables real-time trajectory modiﬁcation on industrial robots. The
developed JPC enables high-frequency motion-level control and
allows the integration of safe control algorithms.

To address the real-time interactive safety, the safe set algo-
rithm (SSA) [9] was developed. This paper investigates methods
to integrate SSA into JPC so that the safe control runs in real-
time within the control loop to ensure interactive safety. How-
ever, there are several challenges. First, a new safety index is
needed to ensure control feasibility with bounded jerks (as re-
quired by JPC) while guaranteeing the robot to stay in the safe
region (or forward invariance of the safe set). Second, it is difﬁ-
cult to optimize hyperparameters to ensure the best performance
with the new safety index. To address the above-mentioned chal-
lenges, this paper extends SSA to a jerk-based control system,
called jerk-based SSA (JSSA), and integrates JSSA to JPC. A
new safety index is introduced to accommodate the third-order
system and the robot dynamics constraints. To optimize the per-
formance of JSSA, an extensive sensitivity analysis is conducted
on the hyperparameters of JSSA. Results show that JSSA gen-
erates provably safe control commands that satisfy the dynamic
constraints (i.e., bounded jerk) in real-time and allows the indus-
trial robot to safely interact with humans.

The contributions of this paper are the following. 1) To the
best of our knowledge, this is the ﬁrst paper that studies safe
control algorithms (in particular, SSA) on a third-order system,
while previous works focus on second-order systems [8, 9, 10].
2) This paper integrates the JSSA to JPC [12], which allows the
safe control algorithm to run in a real-time control loop on in-
dustrial robots. 3) This paper studies the inﬂuence of JSSA’s
hyperparameters on the system performance through extensive
sensitivity analysis. 4) This paper demonstrates the integrated
JSSA on a FANUC LR Mate 200id/7L robot arm in real HRI
tasks.

The remainder of this paper is organized as follows. Sec-
tion 2 formulates the problem that JSSA addresses. Section 3
presents the jerk-based SSA (JSSA). Section 4 shows the exper-
iment results of JSSA on the industrial robot in simulation and
real HRI tasks. Lastly, section 5 concludes the paper.

2 Problem Formulation
2.1 System Modeling
Robot System Modeling: We model the dynamics of a robot
arm using a discrete-time jerk control system to enforce the jerk
bound. For an n-DOF robot, the robot state in the joint space is
denoted as q = [θ1; . . . ; θn; ˙θ1; . . . ; ˙θn; ¨θ1; . . . ; ¨θn]. We have
the robot dynamics as

qk+1 =





In τIn
0 In
0 0

1
2 τ 2In
τIn
In





 qk +





 uk,

1
6 τ 3In
1
2 τ 2In
τIn

(1)

2

...
θ ∈ U = {u | umin ≤ u ≤
where τ is the sampling time. And u =
umax}, where umin ≤ 0 ≤ umax, denotes the bounded jerk con-
trol input. In ∈ Rn×n is an identity matrix. This paper considers
discrete-time systems. The proposed method can be extended to
continuous-time systems, which will be left for future work.

Environment Modeling: We use E = D ∪ O to encode the en-
vironment, where D = [D1; . . . ; DnD] denotes the states of nD dy-
namic agents (i.e., humans), and O = [O1; . . . ; OnO] denotes the
states of nO static agents (i.e., table). Di, Oi ∈ R9 encode the
Cartesian position, velocity and acceleration of the agents. This
paper assumes the velocity and acceleration are bounded for all
agents. The model of the static agents is

Oi

k+1 = Oi
k.

(2)

k, uDi
And the dynamic agents are modeled as Di
k ),
where uD is the “imaginary” control of the dynamic agent D. uD
summarizes all inﬂuencing factors (e.g., the goal of the agent, the
robot motion, etc), and fD is an unknown function that models
the agent dynamics. In this paper, we linearly model the dynam-
ics as

k+1 = fDi(Di

Dk+1 =





I3 τI3
0 I3
0 0

1
2 τ 2I3
τI3
I3

(cid:124)

(cid:123)(cid:122)
AC(τ)





Dk +





(cid:125)

(cid:124)



uD
k .



(cid:125)

1
6 τ 3I3
1
2 τ 2I3
τI3
(cid:123)(cid:122)
BC(τ)

(3)

Note that the system is underactuated (i.e., E is not always con-
trollable by u). By assuming the humans have continuous mo-
tion without sudden change, this paper adopts a constant veloc-
ity model without the loss of generality. Thus, the dynamic agent
model (3) can be reduced to

Dk+1 = AC(τ)Dk,

(4)

where D has the acceleration entries being zero-valued terms.
Note that it is feasible to model the full dynamics of the human
behavior using a nonlinear model and identify the “imaginary”
control online using adaptation algorithms [11], which will be
left for future work. With the robot state q and the environment
state E, the state of the overall system is x = [q; E].

2.2 Safety Speciﬁcation

We use X to denote the system state space. The safety spec-
iﬁcation requires that x ∈ X is constrained in a closed subset
XS ⊆ X. Note that the safety considered in this paper is colli-
sion avoidance, meaning that at any given time, there should be

Copyright © 2022 by ASME

3.1 Safety Index Synthesis

This paper considers the safety speciﬁcation as collision
avoidance in the 3D Cartesian space, where φ0 = dmin − d and
the safe set is deﬁned as XS = {x = [q; E] | φ0(x) ≤ 0} (the
shaded area in Fig. 3(a)). The constant dmin is the safety mar-
gin, whereas d is the real-time minimum distance between the
robot and the agents, which can be computed using capsule rep-
resentations [10]. Note that this paper considers only the mini-
mum distance between the robot and all agents, which indicates
that the safeguard is designed to avoid imminent collision. This
strategy works under the assumption that there is only one criti-
cal obstacle at a given time (sparse obstacle environment), which
is realizable in a typical HRI setting. Consideration of multiple
distance constraints will be left for future work.

Given the safety speciﬁcation, our goal is to synthesize a
safety index φ to satisfy the following two conditions. 1) There
always exists a feasible control input to keep φ (xk+1) ≤ 0 for any
state that φ (xk) ≤ 0

US(xk) = {uS ∈ U | φ (xk+1) ≤ 0} (cid:54)= /0,

(5)

S (φ ) ⊆ XS, where X ∗

where US is the set of safe control. 2) By always choosing the
control in the set US, forward invariance within XS is guaran-
teed, i.e., X ∗
S (φ ) is the set of reachable states
that start from X0 = {x ∈ XS | ˙φ0 = ¨φ0 = . . . = φ (m−1)
= 0} with
the control input selected from US in (5). And m is the relative
degree from φ0 to u.

0

0

, where φ ∗

0 + λ1 ˙φ0 + λ2 ¨φ0 + . . . + λm−1φ (m−1)

To meet the second requirement, we directly leverage the
theorem in [9], which proved that if 1) the safety index is deﬁned
as φm = φ ∗
0 deﬁnes
the same set as φ0 ({x | φ0 ≤ 0} ≡ {x | φ ∗
0 ≤ 0}); and all roots
of 1 + λ1s + λ2s2 + . . . + λm−1sm−1 = 0 are negative real; and 2)
there is always a feasible control to realize the control strategy
˙φ ≤ 0 when φ = 0, then the set X ∗
S (φm) is forward invariant in-
side XS. Note these results are proved in continuous time. In the
following discussion, we ignore the continuous-time to discrete-
time gap in the derivation, which is valid when the sampling time
is sufﬁciently small. The formal analysis with discrete-time sys-
tems will be left for future work.

Since (1) deﬁnes a jerk control system, then φ should in-
clude the ﬁrst and second derivatives of φ0. Moreover, we intro-
duce φ ∗
min − d2 to nonlinearly shape the gradient φ at the
boundary of the safe set. Therefore, the safety index φ is param-
eterized as

0 = d2

φ =φ ∗
=d2

0 + λ1 ˙φ0 + λ2 ¨φ0,
min − d2 − λ1 ˙d − λ2 ¨d,

(6)

where λ1, λ2 ∈ R are tunable coefﬁcients, and all roots of 1 +
λ1s + λ2s2 = 0 are negative real. To meet the ﬁrst require-

3

Copyright © 2022 by ASME

FIGURE 2: Illustration of the JSSA problem.

no collision between the robot and the agents. An initial safety
index φ0(x) : X (cid:55)→ R is speciﬁed to quantify the safety, such that
XS = {x | φ0(x) ≤ 0}. We assume φ0 is user-deﬁned.

2.3 Nominal Control

It is assumed that the robot system has a nominal controller
such that for a given user-speciﬁed task, the nominal controller
generates a jerk control sequence u = [u1; u2; . . . ] that controls
the robot to execute the task. Since the robot shares the envi-
ronment with the dynamic agents and needs to ensure safety, the
nominal control is subject to modiﬁcation by JSSA.

2.4 Problem: Safeguard with JSSA

The core problem is to synthesize a safeguard that moni-
tors the nominal control and modiﬁes it if necessary, i.e., uS
k =
JSSA(uk, qk, Ek), which is also shown in Fig. 2. The safe control
uS
k should ensure forward invariance in the safe set, i.e., xk+1 ∈ XS
for all k. In other words, the system should never leave the safe
set after entering it. A naive approach to design JSSA is to di-
rectly enforce the safety constraint φ0(xk+1) ≤ 0 by choosing a
closest uS
k to uk that satisﬁes the constraint. However, due to dy-
namic limits, it is not guaranteed that there is always a feasible
control u ∈ U that can satisfy the constraint. Hence, we need
to design a new safety index φ to ensure control feasibility and
forward invariance.

3 Jerk-based Safe Set Algorithm

This section introduces the jerk-based safe set algorithm
(JSSA), following the design principles of the original SSA [9].
The original SSA contains the following parts: Ofﬂine: 1) de-
signing the safety index φ and 2) system modeling (discussed in
section 2.1); and Online: 1) environment update and 2) real-time
computation of the safe control uS. The proposed JSSA differs
from other SSA-related works in that 1) this paper introduces a
new safety index that is suitable for a jerk-based control system;
2) we use JSSA to safely guard JPC.

Safe ControlNominal ControlRobot State Static AgentDynamic AgentJSSA1.Safety Constraint: collision avoidance.2.Forward Invariance:...
p R is the jerk control input in the Cartesian space.
where j =
And the dynamics of H follows either (2) or (4). Deﬁne the rela-
tive state between the critical point pair as

δk+1 = Mk+1 − Hk+1

= AC(τ)Mk + BC(τ) jk − Hk+1

(9)

Note that the jerk control model (1) is in the joint space and (9)
has the control input j in the Cartesian space. Let J ∈ R3×n be the
jacobian matrix of the n-DOF robot without the rotation entries,
we have ˙pR = J ˙θ . And thus, to relate u and j, we have

jk = ¨J · [0, In, 0] · qk + 2 · ˙J · [0, 0, In] · qk + J · uk.

(10)

We can then express (9) in terms of u as

S (φ0)

(a) X ∗

S (φ ∗)
FIGURE 3: Relationship between X ∗

(b) X ∗

(c) X ∗

S (φ )

S (φ0), X ∗

S (φ ∗), and X ∗

S (φ ).

ment that US is non-empty, we need to impose additional con-
straints on λ1 and λ2 to ensure that when φ = 0, ˙φ < 0. Since
...
˙φ = −2d ˙d − λ1 ¨d − λ2
d depends on the control u, we
just need to choose λ1 and λ2 such that the following inequal-
ity holds:

...
d and

max
x s.t. φ (x)=0

min
u∈U

−2d ˙d − λ1 ¨d − λ2

...
d (u) ≤0.

δk+1 = ∆ + BC(τ) · J · uk,

(7)

∆ = AC(τ)Mk + BC(τ) · ( ¨J · ˙θk + 2 ˙J · ¨θk) − Hk+1.

This paper empirically veriﬁes the design by solving the mini-
max problem approximately using samples. As a future work,
we will derive explicit conditions on λ1 and λ2 from (7).

Fig. 3 illustrates the possible forward invariant set under dif-
ferent designs of the safety index: a) φ0, b) φ ∗ = φ0 + λ1 ˙φ0 +
λ2 ¨φ0, and c) φ in (6). These sets ignores the dynamic constraints
by assuming US is always non-empty, hence may not be “true”
forward invariant sets. The red surfaces in Fig. 3 indicate the cor-
responding safety index equals 0, where the red intensity on each
surface increases as ¨φ0 increases. The blue transparent surfaces
are φ0 = 0. The shaded area shows the possible forward invariant
set X ∗
S (φ ). In Fig. 3(c), we introduce nonlin-
earity to the safety index by substituting φ0 with φ ∗
0 . The shaded
area X ∗
S (φ ) hence has a nonlinear boundary. Note that the shaded
forward invariant set in the nonlinear case only shows a subset of
the maximal forward invariant set, while the exact form of X ∗
S (φ )
is left for future work.

S (φ ∗) and X ∗

S (φ0), X ∗

3.2 Real-Time Control Synthesis

Given the ofﬂine designed safety index φ and the system
model, this section derives the real-time safe control uS. To
ensure safety, uS ∈ US (5). Due to the complex geometries of
the robots and the agents, this paper uses the minimum dis-
tance between the robot and all agents (critical point pair). Let
M = [pR; ˙pR; ¨pR; ], H = [pH ; ˙pH ; ¨pH ] ∈ R9 be the critical point
pair states on the robot and the agents. Note that H can be a point
either on O or D. The dynamics of M can be written as

(11)

(12)

And the safety components can be calculated as

d2 =δ T

δ ,

˙d =

1
d

δ T









(cid:124)

I3 0 0
0 0 0
0 0 0
(cid:123)(cid:122)
U1



δ ,







0 I3 0
0 0 0
0 0 0
(cid:123)(cid:122)
U2

(cid:125)

(cid:124)

(cid:125)

¨d = −

˙d2
d

+

1
d

δ T





(cid:124)

0 0 0
0 I3 0
0 0 0
(cid:123)(cid:122)
U3



δ +



1
d

δ T





(cid:125)

(cid:124)



δ .



(cid:125)

0 0 I3
0 0 0
0 0 0
(cid:123)(cid:122)
U4

Therefore, the constraint φ (xk+1) ≤ 0 can be translated to

0 ≥ φ d =d2

min

(cid:112)

3

2 − λ1δ TU2δ −

δ TU1δ − (δ TU1δ )
δ TU2δ
(cid:112)
δ TU1δ

λ2(−(

)2 + δ TU3δ + δ TU4δ ),

(cid:112)

≈d2

min

∆TU1∆ − (∆TU1∆)

3

2 − λ1∆TU2∆+

λ2(

(∆TU2∆)2
∆TU1∆

− ∆TU3∆ − ∆TU4∆)

− 2(λ1∆TU2 + λ2∆TU3 + λ2∆TU4)BC(τ)J
(cid:123)(cid:122)
(cid:125)
L

(cid:124)

u

(13)

=S − Lu,

Mk+1 = AC(τ)Mk + BC(τ) jk,

(8)

4

where the higher-ordered u terms are eliminated for approxima-
tion due to small τ. Thus, the safe control uS is computed by

Copyright © 2022 by ASME

FIGURE 4:
JSSA Implementation Diagram. The nominal controller is the
JPC [12] (purple) and the JSSA is integrated (orange). The integrated controller
is deployed to the Speedgoat real-time target machine, which is connected in
between of the host and the robot. Black-bounded modules: 1kHz. Red-bounded
modules: 125Hz.

projecting the nominal control to the safe control set. The uS can
be solved by the following optimization

(uS

k − uk)TV (uS

k − uk),

min
uS
k

(14)

s.t. LuS

k ≥ S, uS

k ∈ U.

where V ∈ Rn×n is a positive deﬁnite cost matrix.

3.3 JSSA Integration to JPC

This paper integrates the JSSA to the JPC to safely guard the
nominal control generated by JPC. Given a user-speciﬁed task
P = [P1; P2; . . . ; PN], a sequence of N joint trajectory points with
sampling time T , the JPC generates an open-loop jerk control
u = [u1; u2;
. . . ; u(N·T )/τ ] to track P. The JSSA checks if the
nominal control is safe according to (13) and modiﬁes it using
(14) if necessary.

Fig. 4 shows the implementation diagram of the integration.
The JSSA module is connected to the downstream of the buffer
that stores the nominal u. The JSSA module internally tracks the
robot state, takes environment measurements and the nominal
control, then outputs the safe control uS. The position control
signal is integrated after JSSA to ensure the jerk bound constraint
on ﬁnal commands.

Note that the JPC is an open-loop controller. After JSSA
modiﬁes the pre-computed buffer output, the remaining buffer
would deviate from the original task P. Meanwhile, simply com-
manding the robot back to the trajectory might violate the jerk
bound constraint. Therefore, JSSA adopts a replan mechanism
to get back on track as shown in Fig. 4. It sends a replan request
to the host after JSSA turns inactive (i.e., robot back to safe set)
so that the host plans a new user task and JPC generates a new
nominal control sequence that ensures bounded jerk and resumes
the original task. Notably, the host replan time is unknown to the
controller. Thus, the JSSA also sends an internal replan request

(a)

(b)

(c)

FIGURE 5: Visualization of JSSA collision avoidance in simulation. M and
H indicate the critical point pair. The arrows indicate the motion of the robot
and the human. (a) The human moves toward the robot. (b) The robot avoids
collision when the human gets too close. (c) The robot continues the task (stay at
home) when the human leaves.

to stabilize the robot once the robot is safe and avoids drifting
away during the time waiting for the new task from the host.

4 Experiment Results

In this section, we study the performance of JSSA on the
FANUC LR Mate 200id/7L robot, a 6-DOF industrial robot, in
both simulation and real human-robot interaction. The FANUC
robot provides a position control interface via Ethernet (called
stream motion), which requires a 125Hz position control se-
quence, τ = 0.008 s, with bounded jerk.
In addition, accord-
ing to our practical experience, the position control interface re-
quires a 1kHz communication for stable performance. Similar
to the hardware implementation in [12], we have a Speedgoat
baseline real-time target machine (SG) in between as shown in
Fig. 4. The SG and the robot have stable Ethernet communica-
tion at 1kHz. The JSSA is integrated to the JPC in the real-time
control loop, which is deployed to the SG. In the following dis-
cussion, the implementation has the jerk bound for each joint set
to ±[3798; 3408; 3505; 7011; 7011; 10712]◦/s3, λ1 = 3, λ2 = 1,
V = I6, dmin = 0.05m. By sampling in the state space, we have
numerically veriﬁed the chosen λ1 and λ2 in the experiments sat-
isfy the contraint in (7).

4.1 Collision Avoidance Simulation

We test the JSSA for collision avoidance in simulation. Fig-
ure 5 shows the simulation environment. We use capsules to sim-
plify the geometries of the robot (5 capsules) and the human (6
capsules). M and H indicate the critical point pair. The arrows
indicate the motion of the robot and the human. The robot task is
to stay at home position. The human only has motion in the XY
plane, which is generated by the human moving the mouse. Ini-
tially, the human is far away from the robot, and thus, the robot
stays idle. Then, the human starts approaching in front of the
robot as shown in Fig. 5(a). As the human gets closer, JSSA de-
tects the potential collision and modiﬁes the nominal control to
lift the robot up to avoid collisions (Fig. 5(b)). As the human
moves away from the robot (Fig. 5(c)), the robot task becomes
feasible and safe. Thus, the robot returns to the home position.

Figure 6 illustrates the detailed proﬁle of the collision avoid-

5

Copyright © 2022 by ASME

User CommandState MachineSend CommandReceive CommandTrajectory ComputationUser commandState Machine StateUser-specified Trajectory WaypointsDecision BufferBounded Jerk CommandRobot FeedbackPosition CommandBounded Jerk CommandJSSA ImplementationRequested FeedbackBuffer stateJSSAEnvironmentPosition CommandHost Replan RequestInternal Replan RequestReal-time Target MachineMHMHMH2
1
0

2

0

m

s
/
m

−2

0

3

0

2
s
/
m

−3

0

6

3

0

1
0

0

0

Minimum Distance between the Human and the Robot

Minimum Relative Distance
Safety Margin

0

1

2

3

4

5

Critical Velocity between the Human and the Robot

1

2

3

4

5

Critical Acceleration between the Human and the Robot

1

1

1

2

3

4

Critical Link ID

3

2
JSSA Activity (On/Off)

4

2

3

4

Time (s)

5

5

5

6

X
Y
Z

6

X
Y
Z

6

Robot
Human

6

6

FIGURE 6: The simulation proﬁle of the collision avoidance performance
of JSSA (λ1 = 3, λ2 = 1) on the FANUC robot. Human link ID: 1) Head. 2)
Core body. 3) Right arm. 4) Left arm. 5) Right leg. 6) Left leg. Robot link ID
corresponds to the link number from the base to the end-effector.

ance process visualized in Fig. 5. The ﬁrst plot demonstrates that
the JSSA consistently maintains a minimum distance larger than
the safety margin to avoid collision with the human. The closest
distance the human reaches is 0.446 m. The second and the third
plot displays the relative velocity and acceleration proﬁles at the
critical point pair. Note that the velocity is not smooth since the
sampled human velocity is not smooth. The fourth plot indicates
the critical link id of the robot and the human. The critical link is
the link that contains the critical point. We can see for the robot,
the critical link remains to be 5 (end-effector) throughout the task
because the human approaches in front of the robot. For the hu-
man, the critical link is initially 4 (left arm), then 2 (core body),
then 1 (head), and then 2 as the human steps back. The last plot
shows the JSSA activity. We observe that the JSSA is triggered
at 1.856 s and ends at 4.240 s. When the JSSA is triggered, there
is still a decent margin in the minimum distance as shown in the
ﬁrst plot. This is because the relative velocity and acceleration
trigger the JSSA to actively avoid potential collisions. The safe
jerk control remains approximately in the range of ±2000◦/s3
for all joints, which is bounded within the jerk limit.

(a) Safety index with increased λ1.

(b) Safety index with increased λ2.

FIGURE 7: Relationship of φ when adjusting λ1 and λ2.

includes 1) the minimum relative distance, 2) JSSA ﬁrst trigger
time, 3) JSSA last trigger time, 4) JSSA active duration, 5) mean
critical velocity, and 6) mean critical acceleration.

We observe that by increasing λ1, the JSSA active duration
time increases. Moreover, the ﬁrst trigger time is earlier and the
last trigger time is delayed. The minimum relative distance also
increases. These phenomenons indicate that the JSSA is more
conservative since it is easier to be triggered and the robot stays
further away from the collision. Figure 7(a) demonstrates the
phase portrait change when λ1 increases. The transparent blue
plane indicates φ0 = 0. The blue and the gradient red planes in-
dicate φ = 0 with smaller and larger λ1 respectively. The red
arrows indicate the change of the plane. We can see as λ1 in-
creases, the JSSA is easier to be triggered when ˙φ0 > 0 (larger ap-
proaching speed), making the system more conservative. Thus,
λ1 adjusts the sensitivity to approaching speed.

On the other hand, we observe that the minimum distance
decreases as λ2 increases from table 1. The average acceleration
is suppressed, indicating the system has smoother and less vio-
lent behavior. Figure 7(b) displays the phase portrait when λ2
changes. Similarly, the blue transparent plane indicates φ0 = 0.
The blue and red planes indicate φ = 0 with smaller and larger
λ2 respectively. We can see as λ2 increases, the JSSA is easier
to be triggered when ¨φ0 ≥ 0 (obstacle accelerating toward the
robot), while relaxed when ¨φ0 < 0 (obstacle accelerating away
from the robot). Note that in our test case, although the human is
approaching the robot, he is decelerating since he stops and turns
back (Fig. 5(b)). Thus, the JSSA is relaxed and a closer distance
to the human is allowed. In addition, the JSSA ﬁrst trigger time
is delayed as λ2 increases as shown in table 1. Thus, λ2 adjusts
the sensitivity to the relative acceleration.

4.2 Safety Index Parameter Tuning

4.3 JSSA vs SSA

This section analyzes the effect of the hyperparameters in
φ (i.e., λ1 and λ2). We study the system performance when
λ1, λ2 ∈ {6, 7, 8}, with the same human trajectory in Fig. 5. Ta-
ble 1 demonstrates an extensive sensitivity analysis. Each entry

The original SSA [9] considers the acceleration-based con-
trol system. In this section, we compare the performance of JSSA
min − d2 − λ1 ˙d, and λ1 = 3. The SSA
and SSA, which has φ = d2
is applied on the acceleration to compute the safe acceleration

6

Copyright © 2022 by ASME

6

λ1

7

8

λ2

6

7

8

(0.317; 1.848; 4.832; 0.536; 0.640; 0.304)

(0.343; 0.080; 4.848; 0.760; 0.654; 0.382)

(0.382; 0.080; 5.024; 1.064; 0.639; 0.413)

(0.284; 1.848; 4.544; 0.688; 0.665; 0.305)

(0.313; 0.080; 4.840; 0.864; 0.649; 0.312)

(0.342; 0.080; 4.840; 0.960; 0.641; 0.345)

(0.284; 1.856; 4.816; 0.736; 0.631; 0.303)

(0.291; 1.856; 4.840; 0.776; 0.643; 0.261)

(0.316; 0.080; 5.024; 0.944; 0.633; 0.299)

TABLE 1: Comparison of the JSSA performance with different λ1 and λ2. Each entry includes (minimum relative distance (m), JSSA ﬁrst trigger time (s), JSSA last
trigger time (s), JSSA duration (s), average critical velocity (m/s), average critical acceleration (m/s2)).

Minimum Distance between the Human and the Robot

Minimum Relative Distance
Safety Margin

0

1

2

3

4

5

Critical Velocity between the Human and the Robot

2
1
0

2

0

m

s
/
m

−2

0

1
0

0

1

1

2

2

3

4

SSA Activity (On/Off)

3

4

Time (s)

5

5

6

X
Y
Z

6

6

FIGURE 8: The simulation proﬁle of the collision avoidance performance of
SSA (λ1 = 3) on the FANUC robot.

(a)

(b)

(c)

FIGURE 9: Visualization of the robot handover. The robot delivers the power
drill to the human. M and H indicate the critical point pair. The arrows indicate
the motion of the robot and the human. (a) The human places his hand to request
the power drill. (b) As the robot delivers, the human raises his hand closer to the
robot, and thus, the robot avoids. (c) The robot safely ﬁnishes handover with the
human’s hand higher than the initial position.

control ¨qS. The jerk control is calculated as uS
. We
saturate the jerk control at the boundary to ensure uS ∈ U. The
human follows the same trajectory as in Fig. 5.

k+1 =

¨qS
k+1− ¨qk
τ

Figure 8 demonstrates the system proﬁle of the SSA. By fre-
quently saturating the uS that violates the jerk bound, the system
has a more aggressive behavior (2nd plot) and the distance pro-
ﬁle ﬂuctuates and has a closer minimum distance (0.360 m). In
general, the SSA is less conservative [16] comparing to JSSA,
which is also shown by having a smaller minimum relative dis-
tance. However, since the system has a decelerating dynamic
agent, the SSA (duration: 0.872 s) is easier to be triggered com-
paring to JSSA (duration: 0.352 s).

m

1

0

2

0

m

1

0

0

0.7

m

0

1

0

0

0

Minimum Distance between the Human and the Robot

Minimum Relative Distance
Safety Margin

2

2

4

8
Robot End-effector Tracking

6

4

6

8

Robot End-effector Distance from the Goal

2

2

4

6

JSSA Activity (On/Off)

4

6
Time (s)

8

8

10

X
Y
Z
Goal X
Goal Y
Goal Z

10

10

JSSA
Replan

10

FIGURE 10: The system proﬁle of the real-time robot handover performance
of JSSA on the FANUC robot.

4.4 Real-time Human-Robot Interaction (Handover)

To further demonstrate the JSSA, we conduct a real-time
HRI task: robot handover1. The robot delivers a power drill to
the right hand of the human as shown in Fig. 9, where the right
hand is a dynamic obstacle that determines the goal location. The
human initially places his hand relatively low (Fig. 9(a)). As the
robot is delivering, the human moves his hand upward and to-
wards the robot (Fig. 9(b)). Since the human hand moves, the
robot safely avoids the collision and adjusts its motion accord-
ingly to safely ﬁnish the handover task (Fig. 9(c)). We track the
human pose using a Kinect camera.

Figure 10 demonstrates the performance of the JSSA in the
HRI (robot handover) task. The ﬁrst plot indicates that the JSSA
maintains a safe distance between the robot and the human even
though they approach each other. From the fourth plot, we ob-
serve that the JSSA is triggered at 4.392 s, which is the time that

1This human-robot interaction study only involves one human performing
hand motions. The harm or discomfort anticipated are no greater than those or-
dinarily encountered in daily life.

7

Copyright © 2022 by ASME

MHMHMHthe human starts moving. The JSSA is continuously triggered
as the human continuously moves his hand closer. We also ob-
serve that the replan mechanism is triggered along with the JSSA,
which allows the robot to resume the task after JSSA becomes in-
active. From the third plot, we observe that the JSSA makes the
robot cautious during delivery as it slightly moves away from the
goal from 5 s to 7 s. When the human hand settles down, the
robot then continues to safely ﬁnish the task as the end-effector
eventually reaches the goal (2nd plot) and the tracking error be-
comes 0 (3rd plot).

5 Conclusion

This paper presented a safe set algorithm for jerk-based con-
trol systems (JSSA) for interactive industrial robots. We de-
signed JSSA to actively monitor and modify the robot jerk com-
mands to ensure safety in dynamic environments. We synthe-
sized a new safety index that makes a subset of the user-speciﬁed
safe set forward invariant and ensures control feasibility under
robot dynamic constraints. We implemented the JSSA on a
FANUC robot where the ﬂexible jerk commands are handled on-
line via a jerk-bounded position controller (JPC). We validated
that JSSA was able to actively avoid collision in real-time HRI
tasks and performed a sensitivity analysis of system behaviors
on hyperparameters. As future work, we aim to extend JSSA to
continuous-time systems as well as more complex tasks; derive
the formal constraints on the hyperparameters of φ ; formally de-
ﬁne the forward invariant set given by φ ; integrate multiple col-
lision constraints.

REFERENCES

[1] Aaron D. Ames, Jessy W. Grizzle, and Paulo Tabuada. Con-
trol barrier function based quadratic programs with applica-
tion to adaptive cruise control. In 53rd IEEE Conference on
Decision and Control, pages 6271–6278, 2014.

[2] George Charalambous, Sarah Fletcher, and P. Webb.
Human-automation collaboration in manufacturing: Iden-
tifying key implementation factors. Contemporary Er-
gonomics and Human Factors 2013, pages 59–66, 01 2013.
[3] Henrik I. Christensen, Nancy M. Amato, Holly A. Yanco,
Maja J. Matari´c, Howie Choset, Ann W. Drobnis, Ken
Goldberg, Jessy W. Grizzle, Gregory Hager, John M.
Hollerbach, Seth Hutchinson, Venkat N. Krovi, Daniel Lee,
Billy Smart, Jeffrey C. Trinkle, and Gaurav S. Sukhatme.
A roadmap for us robotics - from internet to robotics 2020
edition. Found. Trends Robotics, 8:307–424, 2021.

[4] Varun Gopinath, Fredrick Ore, and Kerstin Johansen. Safe
assembly cell layout through risk assessment – an applica-
tion with hand guided industrial robot. Procedia CIRP, 63:
430–435, 2017.

[5] Luis Gracia, Fabricio Garelli, and Antonio Sala. Reactive

sliding-mode algorithm for collision avoidance in robotic
systems. IEEE Transactions on Control Systems Technol-
ogy, 21(6):2391–2399, 2013.

[6] O. Khatib. Real-time obstacle avoidance for manipulators
In Proceedings. 1985 IEEE Interna-
and mobile robots.
tional Conference on Robotics and Automation, volume 2,
pages 500–505, 1985.

[7] J. Kr¨uger, T.K. Lien, and A. Verl. Cooperation of human
and machines in assembly lines. CIRP Annals, 58(2):628–
646, 2009.

[8] Hsien-Chung Lin, Changliu Liu, Yongxiang Fan, and
Masayoshi Tomizuka. Real-time collision avoidance al-
In 2017 IEEE Con-
gorithm on industrial manipulators.
ference on Control Technology and Applications (CCTA),
pages 1294–1299, 2017.

[9] Changliu Liu and Masayoshi Tomizuka. Control in a safe
set: Addressing safety in human-robot interactions. ASME
Dynamic Systems and Control Conference, 11 2014.
[10] Changliu Liu and Masayoshi Tomizuka. Algorithmic safety
In 2016
measures for intelligent industrial co-robots.
IEEE International Conference on Robotics and Automa-
tion (ICRA), pages 3095–3102, 2016.

[11] Ruixuan Liu and Changliu Liu. Human motion prediction
using adaptable recurrent neural networks and inverse kine-
IEEE Control Systems Letters, 5(5):1651–1656,
matics.
2021.

[12] Ruixuan Liu, Rui Chen, Yifan Sun, Yu Zhao, and Changliu
Liu. Jerk-bounded position controller with real-time task
modiﬁcation for interactive industrial robots. TechRxiv, Jan
2022.

[13] George Michalos, Panagiotis Karagiannis, Nikos Dim-
itropoulos, Dionisis Andronas, and Sotiris Makris. Human
Robot Collaboration in Industrial Environments, pages 17–
39. Springer International Publishing, 2022.

[14] Valeria Villani, Fabio Pini, Francesco Leali, and Cristian
Secchi. Survey on human–robot collaboration in indus-
trial settings: Safety, intuitive interfaces and applications.
Mechatronics, 55:248–266, 2018.

[15] Tianhao Wei and Changliu Liu. Safe control algorithms
using energy functions: A uni ed framework, benchmark,
and new directions. In IEEE 58th Conference on Decision
and Control (CDC), pages 238–243, 2019.

[16] Yihang Yao, Tianhao Wei, and Changliu Liu. Safe con-
trol of arbitrary nonlinear systems using dynamic exten-
sion. arXiv, 2111.04615, 2021.

[17] George Q. Zhang, Xiongzi Li, Remus Boca, Jeremy
Newkirk, Biao Zhang, Thomas A. Fuhlbrigge, Helen K.
Feng, and Nick J. Hunt. Use of industrial robots in
additive manufacturing - a survey and feasibility study.
In ISR/Robotik 2014; 41st International Symposium on
Robotics, pages 1–6, 2014.

8

Copyright © 2022 by ASME

