2
2
0
2

g
u
A
3
1

]
E
S
.
s
c
[

1
v
5
5
6
6
0
.
8
0
2
2
:
v
i
X
r
a

Intertwining Ecosystems: A Large Scale Empirical
Study of Libraries that Cross Software Ecosystems

Kanchanok Kannee, Supatsara Wattanakriengkrai, Ruksit Rojpaisarnkit,
Raula Gaikovina Kula, Kenichi Matsumoto

Nara Institute of Science and Technology, Japan

Abstract

An increase in diverse technology stacks and third-party library usage has led
developers to inevitably switch technologies. To assist these developers, main-
tainers have started to release their libraries to multiple technologies, i.e., a
cross-ecosystem library. Our goal is to explore the extent to which these cross-
ecosystem libraries are intertwined between ecosystems. We perform a large-
scale empirical study of 1.1 million libraries from ﬁve diﬀerent software ecosys-
tems, i.e., PyPI for Python, CRAN for R, Maven for Java, RubyGems for Ruby,
and NPM for JavaScript to identify 4,146 GitHub projects that release libraries
to these ﬁve ecosystems. Analyzing their contributions, we ﬁrst ﬁnd that a
signiﬁcant majority (median of 37.5%) of contributors of these cross-ecosystem
libraries come from a single ecosystem, while also receiving a signiﬁcant por-
tion of contributions (median of 24.06%) from outside their target ecosystems.
We also ﬁnd that a cross-ecosystem library is written using multiple program-
ming languages. Speciﬁcally, three (i.e., PyPI, CRAN, RubyGems) out of the
ﬁve ecosystems has the majority of source code is written using languages not
speciﬁc to that ecosystem. As ecosystems become intertwined, this opens up
new avenues for research, such as whether or not cross-ecosystem libraries will
solve the search for replacement libraries, or how these libraries ﬁt within each
ecosystem just to name a few.

1. Introduction and Motivation

Popular use of third-party libraries has become prominent in contemporary
software engineering [1], which is evident by the emergence of diﬀerent library
repositories like NPM, PyPI, CRAN, Maven, and so on. These massive reposi-
tories also depend on each other, thus forming a complex software ecosystem of
dependencies, across these diﬀerent technology stacks.

Email addresses: kanchanok.kannee.kg8@is.naist.jp (Kanchanok Kannee),

wattanakri.supatsara.ws3@is.naist.jp (Supatsara Wattanakriengkrai),
rojpaisarnkit.ruksit.rn1@is.naist.jp (Ruksit Rojpaisarnkit), raula-k@is.naist.jp
(Raula Gaikovina Kula), matumoto@is.naist.jp (Kenichi Matsumoto)

Preprint submitted to Elsevier

August 16, 2022

 
 
 
 
 
 
(a) The README ﬁle of the Bokeh project repository on that is hosted on GitHub

(b) https://www.npmjs.com/package/@bokeh/bokehjs (c) https://pypi.org/project/bokeh/

Figure 1: Our running example of Bokeh, a cross-ecosystem library that is released to the
PyPI (Bokeh) and npm (BokehJS) ecosystems

For various reasons, a developer may realize that a library used in their
applications requires replacement. One reason may be due to the availability
of newer versions that ﬁx defects, patch vulnerabilities, and enhance features.
In such cases, the developer seeks an appropriate replacement and has lead to
various eﬀorts in library recommendation [2]. Another case is when a developer
is forced to switch programming languages. With an increase of the diversity in
technology stacks and third-party library usage [3], developers eventually will
face the need to switch a programming language and their subsequent libraries
speciﬁc to that language [4, 5, 6]. In this case, developers would have to search
for a replacement library that they are familiar with.

In the case of switching technologies (i.e., programming languages), main-
tainers now provide an option by releasing a version speciﬁc for that ecosystem.
We refer to this phenomenon as a cross-ecosystem library. Figure 1 depicts a

2

cross-ecosystem library that serves two diﬀerent ecosystems (cf. Figure 1b and
Figure 1c). The library is Bokeh1, which is a popular interactive visualization
library for modern web browsers. Figure 1 shows the oﬃcial GitHub repository
that hosts the common repository, while there are two versions of the library
hosted on both the oﬃcial PyPI2 and NPM3 registry. In 2022, the Python re-
lease of Bokeh had over 2.94K dependent repositories, and 590 other libraries
in the ecosystem that rely on this library.
It has 120 releases and was ﬁrst
released on October 25th, 2013. The GitHub repository that hosts the cross-
ecosystem library is mainly implemented in Python (i.e., 56.7%) and TypeScript
(i.e., 41.1%). According to its homepage, BokehJS is written primarily in Type-
Script and not in JavaScript. Furthermore, Bokeh attracts has 603 contributors
to its GitHub repository.

Our goal is to explore the extent to which these cross-ecosystem libraries are
intertwined within these ecosystems. By studying developer contributions and
programming language diversity, we set out to investigate the extent to which
cross-ecosystem libraries by mining ﬁve of the most popular and widely adopted
library ecosystems (i.e., CRAN, Maven, PyPI, RubyGems, and NPM). Our
study is a large-scale quantitative analysis of 1,110,059 libraries to identify
4,146 cross-ecosystem library with 567,864 contributors. After preliminary re-
sults showed that cross-ecosystem libraries are being depended upon, we formu-
lated two research questions that analyze cross-ecosystem library repository on
GitHub:

• (RQ1)

What

percent

of

contributors

to

a

cross-ecosystem library repository are from diﬀerent ecosystems?
Motivation: Prior work [7] shows that the ecosystem plays an important
role in the sustained activities of a software project. Hence, we would
like to test the assumption that a cross-ecosystem libraries may require
involvement from a target ecosystem.
Results: A signiﬁcant majority (median of 37.5%) of contributors come
from a single ecosystem instead of from both ecosystems. Interestingly,
we ﬁnd there is a signiﬁcant portion of contributors do not belong to any
ecosystem (median of 24.06%).

• (RQ2) How diverse

are

languages

programming

the
cross-ecosystem library repository?
Motivation: To complement RQ1, the motivation for RQ2 is to specif-
ically analyze which programming languages are implemented in a
cross-ecosystem library. As shown in the motivating example, some
libraries are only front-end implementation. Hence, we would like to
understand the extent to which these libraries are implemented for the
diﬀerent programming languages that serve the ecosystem (e.g., NPM for

for

a

1https://github.com/bokeh/bokeh
2https://pypi.org/project/bokeh/
3https://www.npmjs.com/package/@bokeh/bokehjs

3

Table 1: Overview of dataset for the preliminary analysis.

# Lib. Releases

As of 12 Jan 2020
with GitHub Repo URL initial libraries

NPM
PyPI
CRAN
Maven
RubyGems

Total
# cross-ecosystem library pairs

818,787
138,001
5,551
36,762
110,958
1,110,023

4,146

2,357,829
420,350
21,526
456,756
176,987
3,433,448

JavaScript).
Results: Three (PyPI, CRAN, RubyGems) out of the ﬁve ecosystems
show the majority of the source code is written using languages that
are not speciﬁc to an ecosystem (i.e., Python, Java, JavaScript, R, and
Ruby).

In addition to the insights revealed by the study, our contributions are two-
fold. The ﬁrst contribution is a large quantitative study that covers over 1.1
million libraries, 0.5 million contributors from ﬁve diﬀerent software ecosystems.
The second contribution is a replication package with all data and scripts that
contains all the algorithms used in the study. Our preliminary appendix is
available at https://zenodo.org/record/6983864#.YvVmGuxBy3I.

2. Preliminary Analysis

To motivate the importance of a cross-ecosystem library on the ecosystem,
we performed a preliminary study to answer the question (P1) How dependent
is the ecosystem to a cross-ecosystem library release?

Data Collection. We selected ﬁve popular and well-studied software ecosystems.
NPM is a package manager for the JavaScript programming language that was
recently purchased by Microsoft via GitHub4. PyPI is the library ecosystem
that serves the Python programming language, which is interpreted high-level
general-purpose programming language. CRAN is the library ecosystem that
serves the R programming language, which is a free software environment for
statistical computing and graphics 5. Maven is the library ecosystem that serves
the Java programming language, which is a general-purpose programming lan-
guage that follows the object-oriented programming paradigm and can be used
for desktop, web, mobile, and enterprise applications6. RubyGems is the library

4https://www.npmjs.com/
5https://www.r-project.org/
6https://www.java.com/

4

Figure 2: Identifying the 4,146 cross-ecosystem libraries from the ﬁve ecosystems. For exam-
ple, we identiﬁed 22 libraries across CRAN and PyPI.

ecosystem that serves the Ruby programming language, which is a dynamic,
open-source programming functional programming language with a focus on
simplicity and productivity7.

To identify a cross-ecosystem library, we use the GitHub library repository
as the linking heuristic. For instance, as shown in our motivating example, the
GitHub library repository URL serves as a link between two analogical libraries.
Our assumption is that GitHub should be the common platform by which cross-
ecosystem libraries may decide to host their libraries. We also use this ﬁlter as
a quality check, to ensure that library quality.

Similar to prior work [8, 9, 10], we then queried the libraries.io dataset for
library ecosystems that indeed listed a GitHub repository URL as their library
repository. For each library ecosystem, we collect a list of all libraries from the
Libraries.io8 dataset. We mined the dataset version (1.6.0)9. Once we were able
to collect the list of libraries that hosted their library repository on GitHub, we
then proceed to cross-reference between libraries that are hosted in diﬀerent
library ecosystems. The results are shown in Table 1, where we extracted a
total of 1,110,023 from 3,433,448 libraries. As shown in Figure 3, we noticed
that the cross-ecosystem library is usually comprised in pairs. In other words,
we identify a cross-ecosystem library as having releases to two ecosystems (e.g.,

7https://www.ruby-lang.org/en/
8https://libraries.io/
9https://zenodo.org/record/3626071#.YdRu_hNBzFo

5

5523110643033829328013739820500522506668172290028761200583025028040NPMPyPIMavenRubyGemsCRANNPMPyPIMavenRubyGemsCRANTable 2: Summary statistics of #Dependent showing statistical diﬀerence including signiﬁ-
cance where cross-ecosystem is more dependent than regular libraries.

# Dependent (regular)

cross-ecosystem pair
NPM ∩
PyPI
NPM ∩
Maven
NPM ∩
RubyGems
CRAN ∩
PyPI
Maven ∩
PyPI
Maven ∩
RubyGems
PyPI ∩
RubyGems

Mean Median
53(1)
26(0)
71(1)
5(0)
19(1)
16(0)
12(0)
-
20(0)
23(0)
34(0)
56(0)
7(0)
8(0)
The eﬀect sizes level: N(negligible), and S(small)
*:p-value < 0.05

2664.71(761.39)
405.35(29.43)
2884.94(761.39)
75.06(59.35)
4003.08(761.39)
2291.94(335.90)
21.43(19)
-
94.21(59.35)
91.42(29.43)
269.47(59.35)
1104.91(335.90)
132.66(29.43)
569.63(335.90)

Signiﬁcance
* S
-
-
* N
-
-
-
-
-
-
* S
* S
* S
* S

NPM ∩ PyPI).

Approach. To answer this preliminary question, we collected dependent metrics,
which is the number of other libraries that declare the library as a dependency.
Note that for the analysis, we compare against a pair of ecosystems (i.e., NPM
∩ PyPI). For example, Font-Awesome10 is one of the top open-source libraries
on GitHub.
the library has a dependency score for both the PyPI (i.e., 29
dependents) and Maven (i.e., 22 dependents). We used the libraries.io dataset
to append to our existing dataset.

For evaluation, we set up an experiment to compare the cross-ecosystem li-
brary against other regular libraries. As a result, we will report the statistical
summary (i.e., mean, median, and standard deviation). Furthermore, we sta-
tistically validate our results using the Mann-Whitney U test [11], [12] which
is a non-parametric statistical test. To show the power of diﬀerences between
metrics from cross-ecosystem libraries and regular libraries, we investigate the
eﬀect size using Cliﬀ’s δ, which is a non-parametric eﬀect size measure [13]. The
interpretation of Cliﬀ’s δ is shown as follows: (1) δ < 0.147 as Negligible, (2)
0.147 ≤ δ < 0.33 as Small, (3) 0.33 ≤ δ < 0.474 as Medium, or (4) 0.474 ≤ δ
as Large. To analyze Cliﬀ’s δ, we use the cliﬀsDelta package. 11

10https://github.com/fortawesome/Font-Awesome
11https://github.com/neilernst/cliffsDelta

6

Table 3: Summary statistics of appended data to the 1,110,023 libraries to answer our RQs.

As of March 2022
Median

Max

RQ1 -# Contrib.

per cross-ecosystem lib.
per lib.
RQ2 -# Lang. per lib.

8
4
2

1,727
16,606
44

Total

49,674
567,864
120

Results. Table 2 shows the evidence that the cross-ecosystem library inﬂuences
ecosystems. We ﬁnd that the cross-ecosystem library has more dependents than
the regular library for every pair of cross-ecosystem libraries, e.g., the median
of the number of dependents for the cross-ecosystem library that was released
to the NPM and PyPI ecosystem: 53 dependent < 1 dependents. Statistically,
we ﬁnd that the number of dependents between cross-ecosystem and regular
libraries are signiﬁcantly diﬀerent (p-value < 0.05), with a negligible to small
association as the reported eﬀect size. Furthermore, as shown in Table 2, we
show that cross-ecosystem library combinations that include RubyGems, which
is the pair of Maven with RubyGems and PyPI with RubyGems had a signiﬁ-
cantly larger number of dependents than regular libraries.

Summary: We ﬁnd that cross-ecosystem libraries are relied upon more when
compared to regular libraries, especially for Maven, RubyGems, and PyPI.

3. Findings

Motivated by the preliminary results, which show evidence that cross-
ecosystem libraries are relied upon by the ecosystem, we now continue to answer
each research question that relates to their contributions and diversity of pro-
gramming language composition.

3.1. Data Preparation

As shown in Table 3, extending our dataset from the preliminary study, we
mined and collected contributor information (RQ1) and programming language
(RQ2). It is important to note that RQ1 analyzes all cross-ecosystem libraries
against regular libraries, while RQ2 only analyzes the cross-ecosystem libraries.
To answer RQ1 and RQ2, we use the GitHub API to collect all con-
tributors that made commits to all repositories. We use the API request
https://api.github.com/repos/{owner}/{repo}/commits to collect all the
commit information.

After collecting all contributors for each library, we then merged the
list based on the ecosystem, so that we have a merged list-
contributors’
ing of contributors.
For RQ2, we use the GitHub API to collect the
lines of code that each programming language. We use the API command
https://api.github.com/repos/{owner}/{repo}/languages to retrieve all

7

Figure 3: Answering RQ1, we show how contributions for a cross-ecosystem library originate
from a single ecosystem.

these informations. This process was extremely time-consuming, taking almost
two months to slowly collect all this information.

3.2. Distribution of Contributors (RQ1)

Approach. To answer RQ1, we investigate whether a cross-ecosystem library at-
tracts contributions from the targeted ecosystems. Taking our example shown
in Figure 1, we would like to understand the extent to which both the PyPI and
NPM ecosystems support the GitHub Bokeh repository. In terms of our moti-
vating example, we calculate the percentage of the 533 contributors from the
Bokeh repository has also made contributions to a regular PyPI or NPM repos-
itory. For data collection, we ﬁrst collected all contributors from the 1,110,059
projects. For our analysis, we calculate a percentage of contributors from each
cross-ecosystem library into these three classiﬁcations:

• Both (%) Percentage of contributors that have made prior contributions

to libraries that belong to both ecosystems.

• Single (%) Percentage of contributors that have made prior contributions

to a single ecosystem.

• Independent (%) Percentage of contributors do not have any contribu-

tions to any ecosystem libraries.

8

Table 4: Statistical signiﬁcance test results related to RQ1.

Contributions (%)
S
-
N

Single-Both *
-
Both-Neither *
The eﬀect sizes level: small(S) and negligible(N)
*:p-value <0.05

Since we are dealing with a large dataset, we used the PySpark12 arrays to clas-
sify and merge contributors into these three groups. Hence, for a cross-ecosystem
library, we calculate these ratios with the hypothesis that most contributors
would come from a single ecosystem.

To statistically conﬁrm our classiﬁcation of contributors, we use McNemar’s
Chi-Square test [14]. This is a non-parametric statistical test to use to ﬁnd the
change in proportion for paired data and to ﬁnd the change in proportion for our
paired data. We test the null hypothesis that ‘the percentage of contributions
classiﬁed is the same’ We also measure the eﬀect size using Cohen’s d, a non-
parametric eﬀect size measure by Cohen [15]. Eﬀect size is analyzed as follows:
(1) d < 0.2 as Negligible, (2) 0.2 ≤ d < 0.5 as Small, (3) 0.5 ≤ d < 0.8 as
Medium, or (4) 0.8 ≤ d as Large.

Most contributors originate from a single ecosystem. From Figure 3 we make
two observations. First, we ﬁnd that there is a higher percentage of contribution
(a median of 37.5%) that is supported by only one ecosystem. (see Figure 3). It
is important to note that our analysis does not identify the originating ecosys-
tem.

The second observation is that a signiﬁcant portion of contributors (median
of 24.06%) that do not belong to either ecosystem. The result shows that these
contributors may be just speciﬁc to the project itself. This is more than con-
tributors that belong to both ecosystems (median of 20%). The result indicates
that these libraries may need to have their own base of contributors in order to
sustain maintenance activities.

In terms of statistical signiﬁcance, Table 4 shows evidence that the null
hypothesis on whether ‘percentage of contributions from three types are the
same’ is rejected. We see signiﬁcant diﬀerences (p-value < 0.05) where a library
that has a higher percentage of single ecosystem contributors will have a lower
percentage of contributors from both ecosystems. Furthermore, libraries with a
higher percentage of independent contributors will have fewer contributors from
both ecosystems.

12https://spark.apache.org/docs/latest/api/python/

9

(a) NPM

(b) PyPI

(c) CRAN

(d) Maven

(e) RubyGems

Figure 4: Answering RQ2, we show the percentage of Programming language per ecosystem.

Summary: A signiﬁcant majority (median of 37.5%) of contributors come
from a single ecosystem instead of from both ecosystems. Interestingly, we ﬁnd
there is a signiﬁcant portion of contributors do not belong to any ecosystem
(median of 24.06%).

3.3. Programming Language Diversity (RQ2)

Approach. To answer RQ2, we collect and analyze the proportion of program-
ming languages used in a cross-ecosystem library. Using our running example,
we would like to understand the extent to which the programming language
implemented to correspond to the software ecosystem. For example, we expect
a PyPI library like Bokeh should have a higher proportion of its code written
in Python. For our analysis, we compare the percentage of the programming
language against the ﬁve programming languages that correspond with each
ecosystem. This is Python for PyPI, Java for Maven, JavaScript, R for CRAN,
and Ruby for RubyGems. Finally, we grouped all other languages as others.
Similar to RQ1, we use the McNemar’s Test and Cohen’s d to statistically con-
ﬁrm diﬀerences in languages.

A cross-ecosystem library is written using multiple programming languages..
Figure 4 shows evidence that a majority of code written for three out of the
ﬁve ecosystems is from other languages. Speciﬁcally for PyPI it is 40.45%,

10

mmedian=0.00mmedian=85.01mmedian=6.50mmedian=0.00mmedian=0.00mmedian=0.000%25%50%75%100%PythonJavaJavaScriptRRubyOthersLanguageLine of code (%)mmedian=0.00mmedian=2.57mmedian=40.45mmedian=16.63mmedian=0.00mmedian=0.000%25%50%75%100%PythonJavaJavaScriptRRubyOthersLanguageLine of code (%)mmedian=0.00mmedian=0.00mmedian=77.12mmedian=15.31mmedian=6.97mmedian=0.000%25%50%75%100%PythonJavaJavaScriptRRubyOthersLanguageLine of code (%)mmedian=0.00mmedian=94.46mmedian=4.29mmedian=0.00mmedian=0.00mmedian=0.000%25%50%75%100%PythonJavaJavaScriptRRubyOthersLanguageLine of code (%)mmedian=0.00mmedian=7.85mmedian=20.74mmedian=0.00mmedian=0.00mmedian=4.920%25%50%75%100%PythonJavaJavaScriptRRubyOthersLanguageLine of code (%)Table 5: A breakdown of the top ﬁve languages for the Others category in Figure 4.

Other
HTML
Shell
CSS
Makeﬁle
C, C++, C#, PHP, TypeScript
Total

Percent (%)
63.75
23.92
10.17
2.15
0.01
100.00

Table 6: Contingency Table that shows statistical signiﬁcance test results that relate to RQ2.

Python Java
* L
* L
* L
-
* L

NPM
PyPI
CRAN
Maven
RubyGems
The eﬀect sizes level: large(L), medium(M), small(S) and negligible(N)
*:p-value <0.05

Lines of Code (%)
JavaScript R
* L
* L
* L
-
* L

Ruby
* L
* L
*L
-
* S

* N
* M
-
* N
* S

* L
* M
* L
-
* L

77.12% for cross-ecosystem library that serves the CRAN ecosystem and 20.74%
from RubyGem libraries. The second related ﬁnding is that JavaScript is a pri-
mary programming language, especially for NPM (85.01%), Maven ( 94.45%),
and RubyGem (7.85%) libraries. Table 5 shows a deeper analysis of the other
languages shown in Figure 4. We can see that many of the code for a cross-
ecosystem library is written in HTML, which could be accounted for either
documentation and other kinds of meta ﬁles that are needed in a library. This
result suggests that a signiﬁcant portion of a cross-ecosystem library is for doc-
umentation and other conﬁguration ﬁles (Shell, CSS, and makeﬁles).

Table 6 shows the statistical results, where the null hypothesis of whether
‘cross-ecosystem library written in corresponding programming languages’ is re-
jected. We ﬁnd each ecosystem is signiﬁcant and mostly uses other languages
besides programming languages that serve the ecosystem. Additionally, we ﬁnd
that NPM and Maven have signiﬁcantly used JavaScript more than other lan-
guages.

Summary:
Three (PyPI, CRAN, RubyGems) out of the ﬁve ecosystems
show the majority of the source code is written using languages that are not
speciﬁc to an ecosystem (i.e., Python, Java, JavaScript, R, and Ruby).

4. Implications

Based on our ﬁndings, we now discuss implications and present possible

research directions for each stakeholder.

11

For Library Maintainers. Should maintainers consider releasing to diﬀerent
ecosystems? The good news that is highlighted in the preliminary study is
that cross-ecosystem libraries are already relied upon by the diﬀerent ecosys-
tems. For maintainers that are considering to release to multiple ecosystems,
they should ensure that already have an existing community of contributors
that continue to support them. This is because RQ1 indicates that most cross-
ecosystem libraries are not likely to receive contributions from both ecosystems.
On the other hand, another interesting result in RQ1 was that a cross-ecosystem
library has contributions that are independent of the ecosystem. In terms of
programming language, we show that a cross-ecosystem library is written in
a diverse set of programming languages, sometimes not related to the target
ecosystem. Hence, these maintainers should be competent with multiple pro-
gramming languages. Furthermore, we see that our research opens up new re-
search directions, as we are not sure of the motivations why maintainers decide
to support multiple ecosystems, and whether or not they see this phenomenon
as being beneﬁcial in terms of solving the problem by replacement libraries,
and attracting both new contributors or users. We consider all these are future
work.

For Library Users and Contributors. Will cross-ecosystem libraries solve the
need to ﬁnd replacement libraries? From the results of the preliminary study, we
can conclude that these libraries that decided to release to multiple ecosystems
have an already established user base of clients in the original ecosystem. This
result might suggest that the libraries are quality candidates for replacement,
and maybe users are more comfortable using a library that comes from the same
maintainers of a library that they are already familiar with. In terms of RQ1,
since the results show that these libraries still rely heavily on contributions from
the original ecosystem, contributors might consider supporting these libraries,
this might also include learning a new programming language, as shown in
RQ2. The results do suggest that with the increase in technology stacks and
languages, contributors, users and maintainers may need to become proﬁcient
in multiple programming languages. However, our results do not report that
clients are indeed choosing a cross-ecosystem library, so this would have to be
future work. Another interesting avenue is how these libraries will compete
with already established libraries in the new ecosystem that provide the same
functionalities.

For Software Ecosystems and Researchers. How will cross-ecosystem libraries
impact ecosystem-level topics like governance, and management?. From a re-
search perspective, the growing intertwining between diﬀerent ecosystems will
bring forth interesting implications at the ecosystem level. For instance, to
what extent do these libraries abide by the speciﬁc rules, and regulations that
are enforced by each ecosystem? and how are bug ﬁxes and speciﬁcally security
vulnerabilities propagated through diﬀerent ecosystems? Since RQ1 states that
their libraries are more likely to receive contributions from the original ecosys-
tem, does that mean that the boundaries between these two ecosystems become

12

closer? Also, RQ2 states that since these libraries are composed of diﬀerent pro-
gramming languages, does this mean that software ecosystems do not need to
be deﬁned by programming language, and how do very speciﬁc communities like
the ’Pythonic’ culture of the PyPI community react to such statements? All
these questions should have implications and open up new potential research
directions for the software engineering community.

5. Threats to Validity

In this section, we outline the threats to the validity of our study.
Construct Validity - A key threat in the construct validity exists in the
matching approach using the GitHub URL cross-ecosystem library. Although
we do miss out on other cross-libraries that may exist between two ecosystems,
except for CRAN, the GitHub platform is the most central repository as evi-
dent by their popularity for PyPI, Maven, and RubyGems. Also, due to this
heuristic, we only are able to detect cross-ecosystem libraries hosted on GitHub,
which might be a bias against ecosystems that might not share their projects on
GitHub. Since GitHub is one of the largest platform of Open Source Software,
especially for the NPM ecosystem, we are conﬁdent of our results.

Internal Validity - We discuss two threats to internal validity. The ﬁrst
threat is in regard to the tool selection for the statistical analysis. By using
diﬀerent tools and techniques, results may be diﬀerent, e.g., statistical testing.
However, we are conﬁdent that the threat is minimum since all employed tools
and techniques are used in prior works and are well-known to the software
engineering community. We are also aware that our results are dependent on
the dataset. However, by using two diﬀerent reliable data sources (libraries.io,
and GitHub API), we are conﬁdent in our results.

External Validity - The results of our analyses are limited to the ﬁve
ecosystems: NPM, PyPI, CRAN, Maven, and RubyGems, which threaten the
generalization of our claims to other ecosystems. Still, we believe that our
analyses could easily be applied to other ecosystems and are seen as immediate
future work.

6. Related work

In this section, we discuss key ideas from related works and how our work

aligns and complements the existing literature.

On Analogical Libraries and Library Recommendation These studies
relate to the analogical libraries from various ecosystems. Cossette and Walker
[2], highlighted that analogical library recommendation tools should beware of
false predictions as the consequences are serious. Ouni et al. [16] proposed an
approach to recommend libraries by using a search base algorithm. They sug-
gested that the history of library usage and semantics of each library can be used
to improve the eﬃciency of the recommendation technique. Chen et al. [5] pre-
sented a new approach to recommend analogical libraries from tags of millions

13

of Stack Overﬂow questions by using the word embedding technique. From the
study by Teyton et al. [17], they identiﬁed sets of analogical libraries by using
library migration graphs that show how existing libraries have performed mi-
grations among them. These migration graphs allow developers to discover and
select library replacements easier. Studies such as [18, 19] created a library rec-
ommendation system in order to developers capture unaware suitable libraries
based on the set of used dependencies in the project. Chen et al. [20] created
a knowledge base of analogical libraries which mined from tags of millions of
Stack Overﬂow questions. They then implemented a proof-of-concept web ap-
plication to recommend an analogical library. Several studies focused on helping
developers to migrate the libraries and API of their project to new ecosystems.
Zhong et al. [21] presented a tool that maps API from Java to C# called MAM
(i.e., Mining API Mapping). This tool can reduce the errors (e.g., compilation
error, defect) during the library migration to the new ecosystem. Teyton et al.
[6] automatically extracted function mappings from the analysis of software li-
braries that previously performed the library migration. Vel´azquez-Rodr´ıguez
and De Roover [22] proposes MUTAMA, a multi-label classiﬁcation approach
to the Maven library tagging problem based on information extracted from the
byte code of each library. In our work, we perform an empirical study on the
cross-ecosystem library which is a library that is cross-cutting diﬀerent library
ecosystems. Prior works, instead, focus on libraries from the same ecosystem.

On Software Categorization These studies focus on categorizing libraries
by using various kinds of their characteristics. Kawaguchi et al. [23] proposed
MUDABlue, a tool that automatically categorizes software systems by using
the information from source code. MUDABlue allows a software system to be a
member of multiple categories. MUDABlue has three major aspects: (1) it relies
on no other information than the source code, (2) it determines category sets
automatically, and (3) it allows a software system to be a member of multiple
categories. MUDABlue not only correctly determined the categories as speciﬁed
by the authors of the software, it determined some additional categories that
were missed by the manual categorization. We have also shown that MUDABlue
is more advanced than the research systems described in the literature.

In this work, we a cross-ecosystem library is a kind of software category
that spans across ecosystems. Hence, it would be interesting to understand how
cross-ecosystem libraries are categorized.

On Open Source Software Retention, Engagement, and Sustained
Contributions - The common motivations to make contributions to OSS
projects are the joy of programming, the identiﬁcation with a community, career
advancement, and learning [24]. Additionally, Roberts et al. [25] explored the
interrelationships between OSS developer motivations, revealing the motivations
are not always complementary. When comparing motivations between individ-
ual developers and companies, Bonaccorsi and Rossi-Lamastra [26] observed
that companies are more motivated by economic and technological reasons.

In this work, we would like to understand how cross-ecosystem libraries
are able to engage and retain contributions from multiple ecosystems. In this
case, the motivation is to ensure that the library can have sustained activity,

14

especially if the ecosystem becomes dependent on this library.

7. Conclusion and Future Directions

Developers may inevitably face the need to switch programming languages,
which ultimately may result in replacing third-party libraries. An alternative
to replacement libraries is for maintainers to release diﬀerent releases for dif-
ferent ecosystems (i.e., cross-ecosystem library).
In a large-scale study that
covers over 1.1 million libraries, we ﬁnd that contributors to a cross-ecosystem
library belong to one ecosystem, and more likely to be implemented using mul-
tiple programming languages. Insights from this study lay the groundwork and
open up new opportunities for library maintainers, users, contributors, and re-
searchers into understanding how these diﬀerent ecosystems are becoming more
intertwined with each other.

Declaration of Interest

Funding- This work has been supported by JSPS KAKENHI Grant

Number JP20H05706, JP20K19774

Conﬂicts of interest- Raula Gaikovina Kula is on the Editorial Board.

Availability of replication package- Our replication package is openly

available at https://zenodo.org/record/6983864#.YvVmGuxBy3I.

Author contributions-

• Kanchanok Kannee: Conceptualisation, Methodology, Software, Original

Writing draft, Visualisation.

• Supatsara Wattanakriengkrai :

Investigation, Data collection, Original

Writing, Review.

• Ruksit Rojpaisarnkit: Data Curation, Investigation, Original Writing

• Raula Gaikovina Kula: Conceptualisation, Funding Acquisition, review

and editing drafts, Supervision, project administration.

• Kenichi Matsumoto : Funding Acquisition, review and editing drafts, Su-

pervision, project administration.

References

[1] R. G. Kula, D. M. German, A. Ouni, T. Ishio, K. Inoue, Do devel-
opers update their library dependencies?, Empirical Softw. Engg. 23
(2018) 384–417. URL: https://doi.org/10.1007/s10664-017-9521-5.
doi:10.1007/s10664-017-9521-5.

15

[2] B. E. Cossette, R. J. Walker, Seeking the ground truth: A retroactive
study on the evolution and migration of software libraries, in: Proceedings
of the ACM SIGSOFT 20th International Symposium on the Foundations
of Software Engineering, FSE ’12, 2012.

[3] S. Islam, R. G. Kula, C. Treude, B. Chinthanet, T. Ishio, K. Matsumoto,
Contrasting third-party package management user experience,
in: 2021
IEEE International Conference on Software Maintenance and Evolution
(ICSME), 2021, pp. 664–668. doi:10.1109/ICSME52107.2021.00077.

[4] C. Chen, S. Gao, Z. Xing, Mining analogical libraries in q amp;a discus-
sions – incorporating relational and categorical knowledge into word em-
bedding, in: 2016 IEEE 23rd International Conference on Software Analy-
sis, Evolution, and Reengineering (SANER), volume 1, 2016, pp. 338–348.
doi:10.1109/SANER.2016.21.

[5] C. Chen, S. Gao, Z. Xing, Mining analogical libraries in q amp;a discus-
sions – incorporating relational and categorical knowledge into word em-
bedding, in: 2016 IEEE 23rd International Conference on Software Analy-
sis, Evolution, and Reengineering (SANER), volume 1, 2016, pp. 338–348.
doi:10.1109/SANER.2016.21.

[6] C. Teyton, J.-R. Falleri, X. Blanc, Automatic discovery of function map-
pings between similar libraries, in: 2013 20th Working Conference on Re-
verse Engineering (WCRE), 2013, pp. 192–201. doi:10.1109/WCRE.2013.6
671294.

[7] M. Valiev, B. Vasilescu, J. Herbsleb, Ecosystem-level determinants of sus-
tained activity in open-source projects: A case study of the pypi ecosys-
tem,
in: Proceedings of the 2018 26th ACM Joint Meeting on European
Software Engineering Conference and Symposium on the Foundations of
Software Engineering, ESEC/FSE 2018, 2018, p. 644–655.

[8] A. Zerouali, T. Mens, G. Robles, J. M. Gonzalez-Barahona, On the diver-
sity of software package popularity metrics: An empirical study of npm, in:
2019 IEEE 26th International Conference on Software Analysis, Evolution
and Reengineering (SANER), IEEE, 2019, pp. 589–593.

[9] A. Decan, T. Mens, P. Grosjean, An empirical comparison of dependency
network evolution in seven software packaging ecosystems, Empirical Soft-
ware Engineering 24 (2019) 381–416.

[10] M. Alfadel, D. E. Costa, E. Shihab, M. Mkhallalati, On the use of de-
pendabot security pull requests,
in: 2021 IEEE/ACM 18th International
Conference on Mining Software Repositories (MSR), IEEE, 2021, pp. 254–
265.

[11] H. B. Mann, D. R. Whitney, On a test of whether one of two random
variables is stochastically larger than the other, The annals of mathematical
statistics (1947) 50–60.

16

[12] F. Wilcoxon, Individual comparisons by ranking methods. biometrics bul-

letin, 1 (6), 80-83, 1945.

[13] J. Romano, J. D. Kromrey, J. Coraggio, J. Skowronek, L. Devine, Exploring
methods for evaluating group diﬀerences on the nsse and other surveys: Are
the t-test and cohen’sd indices the most appropriate choices,
in: annual
meeting of the Southern Association for Institutional Research, Citeseer,
2006, pp. 1–51.

[14] Q. McNemar, Note on the sampling error of the diﬀerence between corre-
lated proportions or percentages, Psychometrika 12 (1947) 153–157. URL:
https://doi.org/10.1007/bf02295996. doi:10.1007/bf02295996.

[15] J. Cohen, Statistical power analysis for the behavioral sciences, Routledge,

2013.

[16] A. Ouni, R. G. Kula, M. Kessentini, T. Ishio, D. M. German, K. Inoue,
Search-based software library recommendation using multi-objective opti-
mization, Information and Software Technology (IST) 83 (2017) 55–75.

[17] C. Teyton, J.-R. Falleri, X. Blanc, Mining library migration graphs,

in:
2012 19th Working Conference on Reverse Engineering, 2012, pp. 289–298.
doi:10.1109/WCRE.2012.38.

[18] P. T. Nguyen, J. Di Rocco, D. Di Ruscio, M. Di Penta, Crossrec: Support-
ing software developers by recommending third-party libraries, Journal of
Systems and Software 161 (2020) 110460.

[19] F. Thung, D. Lo, J. Lawall, Automated library recommendation, in: 2013
20th Working Conference on Reverse Engineering (WCRE), 2013, pp. 182–
191.

[20] C. Chen, Z. Xing, Y. Liu, What’s spain’s paris? mining analogical libraries
from q&a discussions, Empirical Software Engineering 24 (2019) 1155–1194.

[21] H. Zhong, S. Thummalapenta, T. Xie, L. Zhang, Q. Wang, Mining api
mapping for language migration, in: Proceedings of the 32nd ACM/IEEE
International Conference on Software Engineering-Volume 1, 2010, pp. 195–
204.

[22] C. Vel´azquez-Rodr´ıguez, C. De Roover, Mutama: An automated multi-
label tagging approach for software libraries on maven, in: 2020 IEEE 20th
International Working Conference on Source Code Analysis and Manipu-
lation (SCAM), 2020, pp. 254–258. doi:10.1109/SCAM51674.2020.00034.

[23] S. Kawaguchi, P. K. Garg, M. Matsushita, K. Inoue, Mudablue: An auto-
matic categorization system for open source repositories, Journal of Sys-
tems and Software 79 (2006) 939–953.

17

[24] A. Hars, S. Ou, Working for free? motivations of participating in open
in: Proceedings of the 34th Annual Hawaii International

source projects,
Conference on System Sciences, 2001.

[25] J. Roberts, I.-H. Hann, S. Slaughter, Understanding the motivations, par-
ticipation, and performance of open source software developers: A longitu-
dinal study of the apache projects, Management Science 52 (2006) 984–999.

[26] A. Bonaccorsi, C. Rossi-Lamastra, Comparing motivations of individual
programmers and ﬁrms to take part in the open source movement. from
community to business, Knowledge and Policy (2006) 40–64.

18

