Physics-Informed Transfer Learning Strategy  
to Accelerate Unsteady Fluid Flow Simulations 

Joongoo Jeon1,2, Juhyeong Lee2, Hamidreza Eivazi1, Ricardo Vinuesa1, Sung Joong Kim2 

1FLOW, Engineering Mechanics, KTH Royal Institute of Technology 
2Department of Nuclear Engineering, Hanyang University 

Email: jgjeon@hanyang.ac.kr, juhyeonglee@hanyang.ac.kr, hamidre@kth.se, 
rvinuesa@mech.kth.se, sungjkim@hanyang.ac.kr 

solve 

real-world  viscous 

Abstract  -  Since  the  derivation  of  the  Navier–
Stokes  equations,  it  has  become  possible  to 
numerically 
flow 
problems  (computational  fluid  dynamics  (CFD)). 
However,  despite  the  rapid  advancements  in  the 
performance of central processing units (CPUs), the 
computational  cost  of  simulating  transient  flows 
with extremely small time/grid-scale physics is still 
unrealistic. In recent years, machine learning (ML) 
technology has received significant attention across 
industries, and this big wave has propagated various 
interests in the fluid dynamics community. Recent 
ML–CFD  studies  have  revealed  that  completely 
suppressing the increase in error with the increase 
in interval between the training and prediction times 
in  data-driven  methods 
is  unrealistic.  The 
development  of  a  practical  CFD  acceleration 
methodology that applies ML is a remaining issue. 
Therefore,  the  objectives  of  this  study  were 
developing  a  realistic  ML  strategy  based  on  a 
physics-informed  transfer  learning  and  validating 
the accuracy  and  acceleration  performance  of this 
strategy  using  an  unsteady  CFD  dataset.  This 
strategy  can  determine  the  timing  of  transfer 
learning  while  monitoring  the  residuals  of  the 
cross-coupling 
governing 
computation 
our 
hypothesis  that  continuous  fluid  flow  time-series 
prediction 
the 
intermediate CFD simulations periodically not only 
reduce  the  increased residuals  but  also  update  the 
network  parameters.  Notably,  the  cross-coupling 
strategy with a grid-based network model does not 
for 
compromise 
computational  acceleration.  The  simulation  was 
accelerated by 1.8 times in the laminar counterflow 
CFD  dataset  condition  including  the  parameter-
software 
time.  Open-source  CFD 
updating 
OpenFOAM  and  open-source  ML 
software 
TensorFlow were used in this feasibility study. 

is  feasible  was  validated,  as 

framework.  Consequently, 

simulation 

equations 

accuracy 

the 

in 

a 

Keywords-  machine  learning;  computational  fluid 
dynamics; transfer learning; physics-informed loss 
function; simulation acceleration 

1. INTRODUCTION 

In  the  early  1800s,  Stokes  from  England  and 
Navier  from  France  derived  nonlinear  partial 
differential  equations  describing  the  relationships 
between  the  velocity,  pressure,  temperature,  and 
density  of  a  moving  fluid  (Temam,  2001).  These 
remarkable  equations  called  the  Navier–Stokes 
equations  can  solve  real-world  viscous  flow 
problems  by  adding  a  viscous  effect  term  in  the 
Euler  equation.  Under  general  flow  conditions, 
analytically solving the Navier–Stokes equations is 
difficult. In the past, many studies aimed to solve 
these equations by simplifying them using several 
(Kovasznay, 
assumptions  and  approximations 
computer 
1948).  However, 
performance 
them 
have 
numerically, instead of analytically which limit the 
solvable 
flow  conditions.  Various  numerical 
schemes  such  as  finite  difference  (Varol  et  al., 
2008),  finite  volume  (Jeon  et  al.,  2019),  finite 
element, and spectral methods (Eivazi et al., 2022) 
have been adopted to investigate fluid behavior and 
are  called  computational  fluid  dynamics  (CFD) 
simulations. 

advances 
allowed 

in 
solving 

However, despite the rapid advancements in the 
performance of central processing units (CPUs), the 
computational  cost  of  simulating  transient  flows 
having  extremely  small  time/grid-scale  physics  is 
still unrealistic. These complex flows are typically 
turbulent 
time-averaged 
Reynolds  stress  tensor  or  reacting  flows requiring 
thermal  radiation  and  reaction  heat  calculations. 
Jeon et al. observed that simulating a turbulent jet 
under pipe rupture conditions required 70 h of CPU 
time per second of physical time (CPU time/s), with 

flows  possessing  a 

Preprint, Copyright 2022 by authors 

 
 
 
 
 
 
 
 
 
 
 
parallelization  across  32  cores  (Jeon  et al., 2019). 
Recently, laminar flame simulations required 16 h 
CPU  time/s  with  parallelization  across  32  cores 
(Jeon  et  al.,  2021).  Tolias  et  al.  needed 
(with 
approximately  10–100  h  CPU 
parallelization  across  4–32  cores)  to  investigate 
unsteady 
by  CFD 
simulations based on a domain size of 20.0 × 14.4 
×  12.0 m  (Tolias  et  al.,  2018).  Even  with  parallel 
core  computation,  simulations  on  the  scale  of 
minutes and hours are extremely limited on general 
laboratory unit machines. 

deflagration 

hydrogen 

time/s 

In 

learning 

recent  years,  machine 

(ML) 
technology  has  received  the  most  attention  across 
industries,  and  this  major  trend  has  generated 
various interests in the fluid dynamics community 
(Morimoto  et  al.,  2022;  Vinuesa  et  al.,  2020).  A 
summary of the studies applying ML techniques to 
CFD simulations can be found in Ref. (Jeon, Lee, & 
Kim,  2022).  As  Vinuesa  noted,  one  of  the  main 
motivations of applying ML is the acceleration of 
conventional  CFD  (Vinuesa  and  Brunton,  2021). 
Many  recent  studies  have  demonstrated 
that 
networks  trained  using  past  time-series  data  can 
predict future time-series data with good agreement 
(Jeon et al., 2022). However, simultaneously, these 
studies  have revealed  that completely  suppressing 
the error increase caused by the increase in interval 
between the training and prediction times in data-
driven  methods  is  unrealistic  (Jeon  et  al.,  2022; 
Vinuesa  and  Brunton,  2021;  Lee  and  You,  2019). 
Unlike first-principles simulations, neural networks 
cannot explicitly solve the Navier–Stokes equations 
with  internal  iterations  for  reducing  the  residuals. 
The  nonlinear  Navier–Stokes  equations  can  be 
accurately  approximated  by  combining  linear  and 
activation functions only near the time range used 
for the network training.  

One approach to solve this inconsistent network 
performance  problem  is  to  use  a  super-deep 
learning method, which can fully solve the Navier–
Stokes  equations  by  significantly  increasing  the 
training  data  and  network  sizes.  Gou  et  al. 
demonstrated that steady flow fields under different 
obstacle conditions can be predicted using a single 
training  set  of  100,000  field  images  (Guo  et  al., 
2016).  However,  a  greater  number  of  images  are 
needed  for  network  training  for  unsteady  flow 
prediction.  Lee  et  al.  identified  that  a  network 
trained  on  500,000  images  can  predict  the  future 
time-series data of a circular cylinder flow (Lee and 
You, 2019). For such a large amount of training data, 
the  application  of  an  ML  technique  for  CFD 
acceleration is impractical.  

learning  approach).  Therefore, 

The  aforementioned  efforts  highlight  that  the 
development  of  a  practical  CFD  acceleration 
methodology applying ML is currently problematic. 
Our hypothesis is that continuous CFD time-series 
prediction  is  possible  if  the  intermediate  CFD 
simulations  periodically  not  only  reduce 
the 
increased  residuals  but  also  update  the  network 
parameters  with  the  latest  CFD  time-series  data 
the 
(transfer 
objectives of this study are (1) to develop a realistic 
ML strategy based on transfer learning approach for 
CFD acceleration and (2) to validate the accuracy 
and acceleration performance of this strategy using 
an unsteady CFD dataset. Section 2 introduces the 
novel ML strategy with cross-coupling computation 
framework. Section 3 describes the CFD dataset and 
the 
the  data  exchange  methodology  using 
OpenFOAM  code.  Sections  4  and  5  compare  the 
performance of this strategy with that  of a single-
training  ML  approach.  Finally,  Section  6 
summarizes and concludes this paper. 

2. TRANSFER LEARNING STRATEGY 

2.1. Cross-coupling computation framework 

to 

In  this  study,  we  propose  a  novel  ML  strategy 
based on an ML–CFD cross-coupling computation. 
As  shown  Fig.  1(a),  CFD  calculations  are 
performed on the initial time series by solving the 
first  principles,  similar 
the  general  fluid 
simulations.  Subsequently,  the  calculated  CFD 
time-series  data  are  used  to  train  the  constructed 
neural networks. In other words, the parameters in 
the networks are determined using the latest CFD 
results.  The  number  of  time  steps  included  in  the 
first training dataset may depend on the complexity 
of the simulations. The trained networks can rapidly 
predict  subsequent  CFD  time-series  data  without 
having to perform expensive simulations.  

to 

The  main  algorithm  for  this  strategy  is  that  the 
ML  calculation  crosses  over 
the  CFD 
calculations when the residuals of the ML-predicted 
time-series  approach  the  tolerance  level.  Here,  a 
residual is the magnitude of the conservation error 
in the governing equations, as defined in a typical 
CFD  solver.  This  residual-based  crossing  method 
seems  reasonable  because  CFD  solvers  also 
calculate  continuous  time  series  based  on  an 
allowable  residual  range.  The  intermediate  CFD 
simulations calculate the variable fields of the next 
time  step  while  again  reducing  the  conservation 
error  below  the  tolerance  level.  These  latest  CFD 
results  are  used  as  training  datasets  to  update  the 
learning 
neural  network  parameters  (transfer 

Preprint, Copyright 2022 by authors 

 
 
 
 
 
approach).  The  evolved  neural  networks  again 
accelerate the  CFD simulations  by  calculating  the 
multistep  data;  this  process  is  repeated  until  the 
calculations are completed.  

to  overcome 

Our previous study suggested the above concept 
as  an  alternative 
inherent 
limitations  of  data-driven  methods  (error  increase 
over time  step);  however,  it  has  not been  verified 
whether reducing the residuals actually lead to error 
reduction (Jeon et al., 2022). The key advantage of 
this  cross-coupling  strategy  is  that  it  can  be 

the 

individually  applied  to  each  simulation.  Although 
some network optimization guidelines are required 
depending  on  the  simulation  complexity,  network 
training  using  numerous  simulation  results  is 
unnecessary. A grid-based training network, such as 
a  finite-volume  method  network  model,  can  be 
trained  using  a  very  small  amount  of  time-series 
data  (Jeon  et  al.,  2022;  Takbiri-Borujeni  and 
Ayoobi, 2019). 

Fig. 1. (a) Framework of transfer learning strategy to efficiently accelerate CFD simulations. Cross point can 
be determined in unsupervised manner by calculating residuals of conservation equations. (b) Training and 
(c) prediction procedures of FVMN with tier-derivative system based on MLP (same as network model in 
Fig.  12(a)  of  Ref. (Jeon et  al.,  2022),  but more  detailed  version).  FVMN  model,  which introduces  FVM 
principles, and residual calculation algorithm are combined to reinforce physics-informed strategy. 

Preprint, Copyright 2022 by authors 

 
 
 
 
 
 
 
 
 
Fig. 2 shows the tasks to implement and verify 
the  cross-coupling  strategy  of  this  study.  First, an 
effective  neural  network  model  is  necessary  to 
accurately predict continuous time-series data with 
a  small  amount  of  CFD  time-series  training  data. 
The  network  type,  architecture,  and  loss  function 
significantly affect the network speed and accuracy 
for  time-series  predictions.  Convolutional  neural 
networks  (CNNs)  are  unsuitable  for  this  cross-
coupling  strategy  because  they  require  numerous 
images  as  the  training  data  (Lee  and  You,  2019; 
Guo  et  al.,  2016).  Concurrently,  many  recent 
studies  have  reported  the  strong  performance  of 
recurrent neural networks (RNNs) and long short-
term  memory  (LSTM)  in  time-series  prediction 
(Eivazi  et  al.,  2021;  Srinivasan  et  al.,  2019).  The 
objective of these recurrent models is predicting a 
future  time  series  from  an  earlier  time-series  data 
while minimizing the information loss (Eivazi et al., 
2021; Stevens and Colonius, 2020).  

However, the efficacy of these recurrent models 
is  unsuitable  for  this  strategy,  to  rapidly  update 
network  parameters  by  short  intermediate  CFD 
simulations. Therefore, a novel network model that 
is  appropriate for this  strategy  must  be  developed 
and  verified.  Second,  it  is  essential  to  develop  a 
computational  coupling  method  for  ML  and  CFD 
and  determine  the  appropriate  training/prediction 
time  series  ratio.  For  the  free  input  and  output  of 
CFD  data  without  data  loss,  OpenFOAM  code, 
which 
software 
an  open-source  CFD 
(Greenshields,  2018),  was  used  in  this  study.  The 
applied  neural  networks  and  the  coupling  method 
are described in the following sections.  

is 

Fig.  2.  Essential  tasks  for  implementing  cross-
coupling  strategy:  developing  optimized  network 
model 
computational 
building 
framework combining ML and CFD solver. 

novel 

and 

2.2. Finite volume method network (FVMN) 

Most  commercial  codes  and  the  OpenFOAM 
code  generally  solve  the  governing  equations 
numerically using a finite-volume method (FVM). 
Although  previous  studies  have  predicted  CFD 
time-series  data  using  ML  algorithms  (Takbiri-

sufficiently  considered 

Borujeni  and  Ayoobi,  2019;  Ansari  et  al.,  2017), 
they  have  not 
the 
characteristics  of  the  adopted  FVM  in  these 
network models. A general grid-to-grid multilayer 
perceptron  (MLP)  can  predict  data  in  the  training 
dataset;  however,  such  a  network  has  limitations 
when  predicting  data  beyond  the  training  set,  and 
ultimately,  future  time-series  data.  CNNs,  which 
perform  very  well  in  computer  vision,  have  been 
employed in flow-field predictions (Guastoni et al., 
2021);  however,  a  considerably  large  number  of 
images are required to determine the parameters of 
the kernels, as discussed in the previous section. For 
example,  recent  CNN  studies  used  approximately 
100,000  and  500,000  field  images  as  training 
datasets  for  steady  and  unsteady  flow  field 
predictions, respectively (Lee and You, 2019; Guo 
et  al.,  2016).  CNNs  significantly  improve  image 
prediction accuracy by a reasonable assumption of 
the  stationarity  of  statistics  (Krizhevsky  et  al., 
2012).  

However, it should be noted that grids in a CFD 
snapshot  are  more  strongly  related  to  each  other 
than pixels in a normal image by the stationarity of 
the governing equations. In other words, a unique 
characteristic of a CFD field image is that all grids 
interact  with  neighboring  grids  using  the  same 
governing equations. Similar to the replacement of 
image 
the  conventional  MLP  approaches 
processing with CNN ones with the stationarity of 
statistics  assumption,  the  characteristics  of  CFD 
data  allow  the  development  of  a  more  effective 
network model.  

in 

Recently, Jeon et al. developed an FVM network 
(FVMN)  model  to  predict  a  CFD  time  series  by 
introducing  FVM  principles  into  the  network 
architecture and the loss function (Jeon et al., 2022). 
The  basic  procedure  was  similar  to  those  of 
previous  MLP  models;  however,  their  FVMN 
model  employs  tier-input  and  derivative-output 
systems  in  the  network  architecture.  In  previous 
models,  the  CFD  time-series  data  at  times 𝑡  and 
(𝑡 + 1) are used as the input and output variables in 
the  training  process,  respectively.  The  parameters 
(weight  and  bias)  in  the  neural  networks  are 
iteratively  updated  using  a  backpropagation 
function  converges 
algorithm  until 
loss 
the 
(Rumelhart  et  al.,  1986).  Specifically, 
parameters  are  simply  determined  by  minimizing 
the mean square error (MSE) loss of the predicted 
values, 𝜙(𝜃),  and  the  ground-truth  values, 𝜙,  as 
expressed in Eq. (1). The validation loss for the 20% 
dataset is monitored to prevent overfitting. 

the 

Preprint, Copyright 2022 by authors 

 
 
 
 
 
 
 
𝐽(𝜃) = 1
𝑛

∑

𝑛
𝑘=1

𝑘
{((𝜙𝑡+𝛿𝑡)

𝑘
− (𝜙𝑡+𝛿𝑡)

(𝜃))

2

}

(1) 

In contrast, in the abovementioned FVMN model, 
a  derivative-output  system  is  designed  for  the 
output variables (Jeon et al., 2022). In the fluid flow 
analysis, the scales of the actual variable values in 
the previous time step are significantly larger than 
the change in the magnitude up to the next time step. 
Thus,  accurately  predicting  the  change  using  an 
actual  value-based  loss  function  is  difficult.  Note 
that,  in  other  engineering  fields,  several  neural 
network  studies  have  successfully  improved  the 
performance  by  the  scale  separation  of the  output 
variables (Kim et al., 2021). Jeon et al. confirmed 
the  significant  effect  of  scale  separation  on 
improving  the  network  performance,  using  a 
reacting-flow  CFD  dataset  and  by  simultaneously 
conducting  reaction  and  radiation  calculations 
(Jeon  et  al.,  2022).  Consequently,  the  parameters 
are  learned  by  minimizing  the  MSE  loss  of  the 
𝑡)/𝛿𝑡, 
variation in each variable, 𝛿𝜙𝑖 = (𝜙𝑖
as  expressed  in  Eq.  (2).  Note  that, 𝑖  denotes  the 
variable type, and the time derivative is included for 
brevity  in  the  following  equations.  Moreover,  a 
unified validation loss for checkpoints (Eq. (3)) is 
applied  to  implement  a  physics-informed  loss 
function.  

𝑡+𝛿𝑡 − 𝜙𝑖

𝐽𝑡𝑟𝑎𝑖𝑛,𝑖(𝜃) = 1

𝑛𝑡𝑟𝑎𝑖𝑛

∑

𝑛𝑡𝑟𝑎𝑖𝑛
𝑘=1

2
{((𝛿𝜙𝑖)𝑘 − (𝛿𝜙𝑖)𝑘(𝜃))

}

𝐽𝑣𝑎𝑙(𝜃) = 1
𝑛𝑣𝑎𝑙

𝐼
∑ ∑
𝑖=1

𝑛𝑣𝑎𝑙
𝑘=1

2
{((𝛿𝜙𝑖)𝑘 − (𝛿𝜙𝑖)𝑘(𝜃))

}

(2) 

(3) 

Additionally,  a  tier-input  system  allows  the 
network model to solve the mass and heat transport 
among  neighboring  cells,  which  is  considered  the 
most  important  process  in  an  FVM.  The  physical 
quantities  at  point  𝜙𝑖,𝑗  and  its  neighboring  grid 
points 
 are 
𝜙𝑖−1,𝑗, 𝜙𝑖+1,𝑗, 𝜙𝑖,𝑗−1, and 𝜙𝑖,𝑗+1
included in the input matrix, whereas previous MLP 
models only include 𝜙𝑖,𝑗. Jeon et al. confirmed that 
their  FVMN  approach,  which  embodies 
the 
numerical  principles  of  the  CFD  solver,  has  a 
noticeable advantage of increasing the accuracy of 
time-series  data  prediction.  The  total  number  of 
training/validation  examples, 𝑛,  is  identical  to  the 
number of grid points in the computational domain 
(grid-based  training  approach).  As  discussed  in 
Section  1,  grids  in  a  CFD  snapshot  are  more 
strongly related to each other than pixels in a normal 
image  owing  to  the  stationarity  of  the  governing 
equations.  Therefore,  different  from  an  image-
based training approach, which requires numerous 
images as training examples (e.g., CNNs), this grid-

equations)  depends  on 

based training approach can train the network very 
efficiently with a small amount of time-series data. 
Interestingly, as expressed in Eq. (4), Jeon et al. 
also  developed  a  physics-informed  loss  function 
that  calculates  the  balance  of  each  governing 
equation by the summation of the physical fluxes to 
further  assimilate  the  FVMN  model  to  the  FVM 
𝑘, for each grid 
(Jeon et al., 2022). The residual, 𝜀𝑗
𝑘 and governing equation j is iteratively calculated 
to  determine  the  parameters  in  a  mini  batch.  The 
number of governing equations (e.g., continuity and 
Navier–Stokes 
the 
simulation  conditions,  where  𝑤1  and  𝑤2  are  the 
weighting  factors  used  to  adjust  the  scale  of  each 
function. The unified validation loss is the same as 
in  Eq.  (3).  In  their  case  study,  the  total  residual 
converged to a lower value without compromising 
the training/validation error when the residual term 
was included in the loss function. Interestingly, the 
magnitude  of  the  total  residual  was  even  smaller 
than that of a network trained by a double dataset 
size.  Thus,  providing  the  governing  equation 
information  in  the  loss  function  is  as  effective  in 
increasing  the  network  performance  as  increasing 
the amount of the training data. Figs. 1(b) and (c) 
show  the  FVMN  framework  during  the  network 
training and prediction stages of this study. A more 
detailed  description  of  the  FVMN,  including  the 
physics-informed loss function, can be found in Ref. 
(Jeon,  Lee,  &  Kim).  In  particular,  the  results  of 
comparing  the  sum  of  the  training  loss  of  the 
network (∑ 𝐽𝑡𝑟𝑎𝑖𝑛,𝑖(𝜃)), unified validation loss, and 
total  residual  confirm  the  efficacy  of  the  physics-
informed loss function. 

𝐽𝑡𝑟𝑎𝑖𝑛,𝑖(𝜃) = 𝑤1
𝑛𝑡𝑟𝑎𝑖𝑛
𝑤2
𝑘
𝜀𝑗
𝑛

𝐽
∑ ∑
𝑗=1

𝑛
𝑘=1

∑

𝑛𝑡𝑟𝑎𝑖𝑛
𝑘=1

2
{((𝛿𝜙𝑖)𝑘 − (𝛿𝜙𝑖)𝑘(𝜃))

}

+

(4) 

2.3. Physics-informed monitoring function 

To introduce a cross point (data exchange point) 
in the unified ML–CFD framework (Fig. 1(a)), the 
trend of the error variation in the predicted ML time 
series must be appropriately monitored. However, 
unlike in the training stage (which is a supervised 
problem), ground-truth data (i.e., CFD results) are 
unavailable  in  the  prediction  stage,  because  the 
CFD  simulations  are  replaced  by  ML  prediction. 
Therefore, monitoring the error by comparing to the 
ground-truth  data  cannot  ascertain  whether  the 
tolerance is exceeded in each ML time step. It has 
been  confirmed  that  the  reduction  in  the  residual 
caused  by  the  physics-informed  loss  function 
contributes  to  the  improvement  in  the  prediction 

Preprint, Copyright 2022 by authors 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
the 

that 

residuals  calculated 

accuracy.  However,  a  more  notable  finding  has 
been 
in  an 
unsupervised  manner  can  monitor  the  network 
accuracy  in  an  ML  zone  (Jeon  et  al.,  2022). 
Therefore, we postulated that the error trend can be 
monitored  by  calculating  the  residuals  of  the 
conservation equations by the same method as that 
of first-principles calculations. This optimal use of 
the physics-informed loss function as a monitoring 
function  makes  the  residual-based  cross-coupling 
strategy feasible. Verification of this key concept is 
discussed in Section 5.  

Eqs.  (5)  and  (6)  present  the  conservation 
equation for a general variable 𝜙 at a grid point 𝑃 
after  discretization,  where  𝑎𝑝  is 
the  center 
coefficient,  𝑎𝑛𝑏  is  the  neighboring  grid-point 
coefficient, and 𝑏 is the contribution of the source 
term (Fluent, 2011). 

𝑎𝑃𝜙𝑃 = ∑ 𝑎𝑛𝑏𝜙𝑛𝑏 + 𝑏
𝑛𝑏

𝑎𝑝 = ∑ 𝑎𝑛𝑏 − 𝑆𝑝
𝑛𝑏

(5) 

(6) 

As expressed in Eq. (7), in general CFD solvers, 
the average residual can be calculated as the sum of 
the imbalance amounts over all computational grid 
points  (Fluent,  2011).  Generally,  determining 
convergence  by  observing  the  unscaled  residuals 
calculated using Eq. (7) is difficult because there is 
no explicit standard. Therefore, the solvers employ 
the  initial  residual  values  as  the  standard  (Fluent, 
2011). In this study, the residual values in the ML-
predicted  time  series  were  also  monitored  by  a 
scaling based on the residual values in the training 
dataset.  The  detailed  residual  equations  designed 
according  to  the  CFD  modeling  in  this  study  are 
introduced subsequently in Section 4. 

sequentially in a form similar to the field files of the 
0 directory. The field files saved in each time-step 
directory include all cell data of the corresponding 
time step. Utilizing the advantage of the complete 
freedom  to  access  and  modify  the  time  step 
directory  in  OpenFOAM,  unlike  in  commercial 
CFD codes, the performance of the cross-coupling 
strategy  can  be  evaluated.  Fig.  3(b)  shows  an 
example  0  directory  when  the  cross-coupling 
strategy is implemented. Although the 0 directory 
typically  contains  only 
the  results  from  an 
OpenFOAM  solver,  the  time  series  predicted  by 
ML  is  alternately  stored,  in  this  strategy.  When 
crossing from the CFD zone to the ML zone, in this 
framework (Fig.  1(a)),  the  OpenFOAM field data 
are preprocessed into the input format of the FVMN. 
When crossing from the ML zone to the CFD zone, 
the  predicted  ML  field  data  are  directly  saved  as 
OpenFOAM  field  data,  following  which 
the 
OpenFOAM  solver  calculates  the  next  time-step 
field data.  

Fig. 3. (a) OpenFOAM case directory structure. (b) 
Example 0 directory containing both CFD and ML 
calculation 
to  deal  with  ML–CFD 
framework. 

results 

𝑅𝜙 = ∑

𝑐𝑒𝑙𝑙𝑠 𝑃

|∑ 𝑎𝑛𝑏𝜙𝑛𝑏 + 𝑏

𝑛𝑏

− (∑ 𝑎𝑛𝑏 − 𝑆𝑝

𝑛𝑏

)𝜙𝑃|

(7) 

3. CFD DATASET 

2.4. Implementing method in OpenFOAM 

3.1. CFD modeling and simulation 

In  this  study,  we explored the  feasibility  of  the 
cross-coupling strategy using the open-access CFD 
code,  OpenFOAM,  which  is  written  in  C++ 
(Greenshields, 2018). It contains various solvers for 
different  types of numerical  problems and  several 
utilities for pre- and postprocessing (Greenshields, 
2018).  OpenFOAM  is  available  under  the  GNU 
general public license, which allows users to access 
its  libraries  and  modify  its  source  code.  Fig.  3(a) 
shows the case directory structure of OpenFOAM. 
The  case  directory  contains  three  subdirectories 
required  to  conduct  a  simulation.  In  unsteady 
problems, the calculated time-series data are saved 

strategy, 

two-dimensional 

To  investigate  the  feasibility  of  the  cross-
coupling 
(2D) 
incompressible  counterflow  simulations  were 
performed as a case study. The counterflow was a 
collided  flow  pattern  with  fluids  entering  at 
different  velocities  from  opposite 
inlets.  An 
icoFoam,  was  employed, 
OpenFOAM  solver, 
which  is  a  transient  solver  for  the  incompressible 
laminar  flow  of  Newtonian  fluids.  To  solve  the 
continuity  equation,  the  icoFoam  solver  uses  the 
pressure-implicit with splitting of operators (PISO) 
algorithm,  which  is  presented  in  Fig.  4.  The 
momentum  equation  solved  using  icoFoam  is 

Preprint, Copyright 2022 by authors 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
expressed in Eq. (8), where 𝐮 is the velocity vector, 
𝑝 is  the  kinematic  pressure  scaled  by  the  density, 
and 𝜈 is the fluid kinematic viscosity. In this study, 
a  virtual  fluid  with  a  kinematic  viscosity  of 
0.01 𝑚2/𝑠 was modelled as the working fluid.  

ⅆ𝐮

ⅆ𝑡

+ 𝛻 ∙ (𝐮⨂𝐮) − 𝛻 ∙ (𝜈𝛻𝐮) = −𝛻𝑝 

(8) 

To develop a unified computational framework, 
understanding  the  PISO  algorithm  and  comparing 
its  characteristics  with  those  of  ML  calculation 
procedures  are  necessary.  To  solve  Eq.  (8),  an 
algebraic  equation  is  derived  from  the  governing 
equation and used to update the velocity vector, 𝐮∗, 
as  shown  in  Fig. 4.  After  the  velocity  update, the 
face flux, 𝜙, is calculated using  Eq. (9). The face 
flux  is  a  surface  scalar  value  calculated  using  the 
velocity value at the center point of the surface and 
the  surface  area,  where 𝐮𝐟  is  the  velocity  of  the 
mesh surface, and 𝑆𝑓 is the surface area of the mesh. 
Components 𝐴 and 𝐻 are the decomposed velocity 
matrix  and  vector,  respectively.  The  face  flux, 𝜙, 
constrains  the  continuity  equation  and  is  used  to 
solve the pressure equation to update 𝑝∗. In the last 
part  of  the  PISO  algorithm,  the  velocity,  𝐮∗ ,  is 
updated to 𝐮∗∗ by a momentum correction, and the 
loop is terminated. In the current unified framework, 
the  ML  zone  uses  the  latest  updated  pressure, 𝑝∗, 
and velocity, 𝐮∗∗, to predict the next time-step field 
data. 

𝜙 = 𝐮𝐟 ∙ 𝑆𝑓 = (𝐻

𝐴

)
𝑓

∙ 𝑆𝑓 −   (1

𝐴

)
𝑓

𝑆𝑓 ∙ 𝛻𝑓

⊥𝑝 

(9) 

Fig. 4. Schematic of PISO (algorithm in icoFoam 
solver of OpenFOAM. 

from 

returning 

the  ML 

to  CFD 
When 
calculations, 
the  predicted  ML  velocity  and 
pressure fields are postprocessed to fit the format of 
the  OpenFOAM  field  file.  In  normal  simulation 
processes, icoFoam uses the previous velocity and 
pressure fields and reads the 𝜙 data generated in the 
previous time step. However, in the ML part, neural 
networks  inherently  cannot  provide  the  𝜙  data 
generated  in  the  internal  iterations,  such  as  in  the 
icoFoam  solver.  If  the 𝜙 field  is  not  saved  in  the 

times 

step,  OpenFOAM 

simply 
previous 
recalculates the 𝜙 data using Eq. (10), with the ML-
predicted  velocity  and  pressure  fields  from  the 
latest  time  series.  In  Eq.  (10),  Interpolate(u) 
provides the velocity data interpolated at the center 
point of the mesh surface, and mesh.Sf() denotes the 
surface vector. To interpolate the field values of two 
adjacent 
cells,  OpenFOAM  offers  various 
interpolation schemes, such as linear, quadratic, and 
upwind. In this study, to maintain the continuity of 
the PISO algorithm, the 𝜙 field in the previous step 
was  generated  by  Eq.  (9)  using  the  final  velocity 
value.  Although  internal  iterations  cannot  be 
implemented  in  our  ML  algorithm,  a  significant 
reduction in the calculation error by the matching of 
the 𝜙 calculation method with the CFD solver was 
confirmed.  Future  studies  will  be  devoted  to 
implementing the complete coupling of the ML and 
CFD frameworks.  

𝜙 = 𝐼𝑛𝑡𝑒𝑟𝑝𝑜𝑙𝑎𝑡𝑒(𝐮) ∙ 𝑚𝑒𝑠ℎ. 𝑆𝑓() 

(10) 

is  used  as 

To  generate  the  geometry  and  mesh  for  the 
counterflow simulations, we used the open-source 
software, SALOME 9.6.0, which provides a generic 
pre-  and  postprocessing  platform  for  numerical 
simulations.  As  shown  in  Fig.  5,  a  simple 
rectangular  2D  geometry 
the 
computational domain in this study. The heights of 
the  left  and  right  walls  were  1  m  each,  and  the 
widths of the top and bottom walls were 2 m each. 
Inlets  of  0.2  m  dimensions  were  located  at  the 
middle of the left and right walls, and the top and 
bottom  walls  were  defined  as  the  outlets.  The 
remaining boundaries were set as walls. The mesh 
was  constructed  using  uniform  20,000  hexahedral 
cells.  Because  the  change  in  the  physical  flux 
balance  coefficient  in  the  non-uniform  mesh 
structure  is  not  considered  in  the  current  neural 
networks,  all  grids  had  the  same  volumes  and 
distances to adjacent cells. An overall mesh quality 
inspection 
the  maximum 
nonorthogonality was zero, and that the maximum 
skewness  was  close  to  zero.  An  asymmetric  inlet 
velocity condition was modeled to amplify the flow 
complexity. The inlet velocity at inlet 1 located in 
the  middle  of the  left  wall  was  2  m/s,  and  that  at 
inlet 2 was 1 m/s. The internal pressure and velocity 
fields were initialized to zero. The total simulation 
time  and  the  time  step  were  4  s  and  0.01  s, 
respectively. 

confirmed 

that 

Preprint, Copyright 2022 by authors 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
3.2. Datasets 

Fig. 6 shows the results obtained from the above-
mentioned simulations, where 𝑝, 𝑢, and 𝑣 represent 
the  pressure  field,  x-velocity,  and  y-velocity, 
respectively. A stagnation plane was formed in the 
region  where  two  flows  collided.  Because  the 
velocity  at  inlet  1  was  twice  that  at  inlet  2,  the 
stagnation plane gradually moved to the right of the 
center.  In  contrast,  the  y-velocity  field  showed  a 
symmetric field along the central axis (𝑦 = 0). At 2 
s, the pressure field also showed a biased field to the 

right  side,  and  the  intensity  of  the  y-velocity 
increased compared to that at 1 s. At 3 s, the velocity 
and pressure fields were stabilized near inlet 2, and 
after this time, the simulations proceeded without a 
field  variation.  The  1.00–1.11  s 
noticeable 
timeseries  dataset,  which  was  one  of  the  most 
unsteady  phases,  was  used  to  investigate  the 
feasibility of the cross-coupling strategy. The input 
and  output  variables  for  the  FVMN  model  were 
extracted from the ML domain (with total number 
of points n = 180 × 100), similar to the method in 
Jeon et al.’s study. 

Fig.  5.  A  schematic  showing  geometry  and  boundaries  of  counterflow  simulation.  Asymmetric  inlet 
conditions (left: 2 m/s, right: 1 m/s) are modeled for flow complexity. 

Fig. 6. Time-series variable field until formation of stabilized counterflow. As two opposed flows collide, 
stagnation plane is generated and moved along x-axis until steady-state is reached. Most unsteady 1.00–
1.11 s time series dataset is used to investigate feasibility of ML–CFD strategy. 

Preprint, Copyright 2022 by authors 

 
 
 
 
 
 
 
 
 
 
 
4. LIMITATION OF SINGLE TRAINING 
APPROACH 

4.1.  Optimization  of  hyperparameters  and 
application of physics-informed loss function 

In 

this 

study, 

Because 

advance. 

function). 

𝑡−𝛿𝑡 , 𝜙𝑖,𝑗−1

𝑡−𝛿𝑡, 𝜙𝑖−1,𝑗
𝑡 − 𝜙𝑖,𝑗

Following  the  establishment  of  the  ML–CFD 
coupled computation framework and the setting of 
the  CFD  dataset,  the  CFD  time-series  prediction 
accuracy  of  the  FVMN  model  was  evaluated. 
Neural  networks  contain  hyperparameters  that 
significantly affect the network accuracy and speed 
loss 
performance  (e.g.,  network  architecture, 
function, number of layers, number of neurons, and 
activation 
these 
hyperparameters  cannot  be  determined  during  the 
training processes, it is necessary to optimize them 
in 
the  FVMN 
hyperparameters  were  optimized  based  on  the 
absolute error in the training/validation dataset (100% 
grid of 1.02 s) following the method in Ref. (Jeon, 
Lee,  &  Kim,  2022).  Note  that  the  network  was 
trained with the training (80% grids of 1.01 and 1.02 
s)  and  validation  (20%  grids  of  1.01  and  1.02  s) 
datasets, which is expressed in Eqs. (11) to (14). At 
this  time,  the  dataset  of  𝑡  represents  a  dataset 
containing 
𝑡−𝛿𝑡 }
𝑡−𝛿𝑡 , 𝜙𝑖,𝑗+1
𝑡−𝛿𝑡 , 𝜙𝑖+1,𝑗
and 
{𝜙𝑖,𝑗
𝑡−𝛿𝑡) output  (Fig.  1(b)).  Although  there 
(𝜙𝑖,𝑗
was  an  individual  network  according  to  each 
variable  (i.e.,  𝑝, 𝑢, 𝑎𝑛𝑑 𝑣 ),  the  validation  loss 
function  was  unified.  Here,  we  considered  𝑛𝑡 =
28,800 𝑎𝑛𝑑 𝑛𝑣 = 7,200,  where 𝑛𝑡  and 𝑛𝑣 are  the 
numbers of training and validation examples (grid-
based training approach). Because we observed that 
the pressure field error significantly increased in a 
single  training/validation  dataset  (1.01  s),  the 
hyperparameters were optimized based on a double 
training/validation  dataset  (1.01  and  1.02  s). 
Consequently, 2 hidden layers, 64 nodes per layer, 
the MSE, and the rectified linear unit function were 
employed.  Many  studies  have  reported  that  the 
degradation  of  the  network  performance  despite 
increasing the network size is a typical problem in 
neural  network  methods,  which  is  called  the 
overfitting problem (Srivastava et al., 2014). In this 
study,  overfitting  was  identified  in  the  validation 
dataset  when  the  numbers  of  hidden  layers  and 
nodes  were  increased.  The  Adam  optimizer  was 
used to iteratively update the parameters during the 
training stage (Kingma and Ba, 2014).  

input 

𝐼

𝐽𝑡𝑟𝑎𝑖𝑛,𝑢(𝜃) = 1

𝑛𝑡𝑟𝑎𝑖𝑛

∑

𝑛𝑡𝑟𝑎𝑖𝑛
𝑘=1

2
{((𝛿𝑢)𝑘 − (𝛿𝑢)𝑘(𝜃))

}

𝐽𝑡𝑟𝑎𝑖𝑛,𝑣(𝜃) = 1

𝑛𝑡𝑟𝑎𝑖𝑛

∑

𝑛𝑡𝑟𝑎𝑖𝑛
𝑘=1

2
{((𝛿𝑣)𝑘 − (𝛿𝑣)𝑘(𝜃))

}

(12) 

(13) 

2
𝐽𝑣𝑎𝑙(𝜃) = 1
{((𝛿𝑝)𝑘 − (𝛿𝑝)𝑘(𝜃))
𝑛𝑣𝑎𝑙
2
((𝛿𝑣)𝑘 − (𝛿𝑣)𝑘(𝜃))

𝑛𝑣𝑎𝑙
𝑘=1

∑

} 

2
+ ((𝛿𝑢)𝑘 − (𝛿𝑢)𝑘(𝜃))

+

(14) 

the 

To  confirm  the  reliability  of  the  constructed 
network model, the variation in the validation loss 
function  during 
training  procedure  was 
examined.  Fig.  7  shows  that  the  loss  function 
gradually  reduces  with  the  epoch  number  and 
converges  well  after  500  epochs.  Because  this 
strategy  determines  the  cross  point  based  on 
residuals,  the  variation  in  the  residuals  during  the 
training process is also a key factor for verifying the 
feasibility of this strategy. As expressed in Eqs. (15) 
and (16), the average of the residuals in the entire 
mesh  (𝑛 = 36,000)  is  calculated  in  a  manner 
similar  to  that  used  in  CFD  solvers.  The  average 
residual values were scaled by the average values in 
the ground-truth data (1.01 and 1.02 s). 

the 

loss 

physics-informed 

 Notably,  although  both  residual  values  were 
excluded in the loss function, they were effectively 
reduced  with  the  validation  loss  function.  In  this 
study,  because  the  residual  magnitudes  reduced 
with the MSE loss function below a CFD acceptable 
level, 
function 
calculating residuals was only used for monitoring 
purposes  (prediction  stage),  not  for 
training 
purposes  (training  stage).  A  recent  ML  study  that 
included the residual size in the loss function also 
emphasized  the  monitoring  role,  instead  of  the 
accuracy  improvement  advantage  of  the  physics-
informed  loss  function  (Jeon  et  al.,  2022).  The 
results  presented  in  the  following  sections  were 
obtained  based  on  the  optimized  network.  In 
addition,  the  two  residuals  of  the  governing 
equations  were  monitored  during  the  ML  time-
series prediction to determine the cross point of the 
ML–CFD cross-coupling computation. If it can be 
confirmed that reducing the residuals by the cross 
computation  leads  to  an  error  reduction,  the 
proposed cross-coupling strategy can be verified. 

𝑅𝑐 = 1
𝑛

∑

𝑛

𝑘=1 = 1
𝑘
𝜀𝑐

𝑛

∑ |𝛻 ∙ 𝐮|𝑘

𝑛
𝑘=1

(15) 

∑

𝑅𝑚 = 1
𝑛
+ 𝑢 𝜕𝑣
𝜕𝑥

|𝜕𝑣
𝜕𝑡

𝑛
𝑘=1

𝑚
𝜀𝑐

+ 𝑣 𝜕𝑣
𝜕𝑦

= 1
𝑛
+ 𝜕𝑝
𝜕𝑦

𝑛
𝑘=1

(|𝜕𝑢
+ 𝑢 𝜕𝑢
∑
𝜕𝑡
𝜕𝑥
𝜕𝑥2 + 𝜕2𝑣
− 𝜈 (𝜕2𝑣

𝜕𝑦2)|)

+ 𝑣 𝜕𝑢
𝜕𝑦
𝑘

+ 𝜕𝑝
𝜕𝑥

− 𝜈 (𝜕2𝑢

𝜕𝑦2)| +

𝜕𝑥2 + 𝜕2𝑢
(16) 

𝐽𝑡𝑟𝑎𝑖𝑛,𝑝(𝜃) = 1

𝑛𝑡𝑟𝑎𝑖𝑛

∑

𝑛𝑡𝑟𝑎𝑖𝑛
𝑘=1

2
{((𝛿𝑝)𝑘 − (𝛿𝑝)𝑘(𝜃))

}

(11) 

Preprint, Copyright 2022 by authors 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
  
 
 
 
 
 
residuals illustrate the increase in absolute error in 
Fig. 8(top). At 1.06 s, the momentum residual scale 
changes from 10−7 to 10−6. In CFD simulations, a 
change  in  the  residual  scale  is  an  indicator  of 
convergence  problem  occurrence.  In  summary, 
treating  a  long-term  time  series  using  this  single-
training  approach  is  difficult  because  of  the 
growing residual problem. 

Fig.  7.  Variations  in  validation  loss  and  residuals 
versus epoch number in network training (1.01 and 
1.02  s  dataset).  After  500  epochs,  both  validation 
loss and residual values are stabilized below CFD 
simulation level. 

4.2.  Performance  evaluation  of  single-training 
approach 

In this section, the evaluation of the accuracy of 
the 
the  single-trained  network  by  comparing 
predicted  time-series  data  with  the  ground-truth 
data (original  CFD  data)  is  presented.  Fig.  8(top) 
shows  the  variations  in  the  maximum  absolute 
errors when predicting continuous time-series data 
with the network trained using the 1.01 and 1.02 s 
dataset.  Although  the  absolute  error  in  the  initial 
time series is negligible compared to the mean scale 
of each variable, the error gradually increases with 
time. Previous studies also revealed that completely 
suppressing the increase in error when the interval 
between the training and prediction times increases 
is  unrealistic  (Lee  and  You,  2019).  In  CFD 
simulations,  the  residual  of  each  conservation 
equation is prevented from exceeding the allowable 
range using an internal iteration algorithm at each 
time step (Fluent, 2011).  

However,  the  residuals  increase  in  the  ML-
predicted  time  series  because  the  neural  network 
cannot  converge  the  residuals  of  the  governing 
equations  with  the  pressure  field  projected  by  the 
inner  iterations.  As  shown  in  Fig.  8(bottom),  the 
residual  scales  in  the  ground-truth  time  series 
(training  dataset:  1.01–1.02  s)  are 10−6 and 10−7 
for  the  continuity  and  Navier–Stokes  equations, 
respectively.  In  the  ML-predicted  time  series,  the 
residual of the continuity equation remains almost 
constant,  whereas 
the  Navier–Stokes 
that  of 
equations  gradually  increases.  Because  both  the 
pressure  and  velocity  fields  are  associated  with 
solving the Navier–Stokes equations, the increasing 

Fig.  8.  Variations  in  maximum  absolute  errors  of 
pressure  (Pa),  x-axis  velocity  (m/s),  and  y-axis 
velocity (m/s) (top) and calculated residual of each 
governing equation (bottom) in ML-predicted time 
series.  As  residual  of  Navier–Stokes  equation 
increases,  absolute  error  from  ground  truth  also 
increased. After four time series of ML calculations, 
residual scale shifts from 10−7 to 10−6. 

5. PERFORMANCE EVALUATION OF 
TRANSFER LEARNING STRATEGY 

5.1. Efficacy of intermediate CFD simulations 

The key concept of the ML–CFD cross-coupling 
strategy  is  to  consistently  prevent  residuals  in  the 
ML-predicted  time  series  from  exceeding  the 
tolerances  by  conducting 
intermediate  CFD 
simulations.  Specifically,  if  the  residuals  of  the 

Preprint, Copyright 2022 by authors 

 
 
 
 
 
 
 
 
 
 
 
the 
governing  equations  can  be  kept  below 
tolerance levels by this cross-coupling computation, 
long-term  CFD  time  series  calculations  become 
feasible.  As  shown  in  Fig.  1(a),  the  intermediate 
CFD  simulations  aim  to  generate  the  next  time-
series  field  while  matching  the  magnitudes  of  the 
left and right terms of each conservation equation. 
Eq.  (17)  expresses  the  left  and  right  terms  in  the 
Navier–Stokes equation. 

𝑡

𝑡+1 −𝐮𝑀𝐿
𝐮𝐶𝐹𝐷
𝛿𝑡

+ 𝛻 ∙ (𝐮𝐶𝐹𝐷

𝑡+1 ⊗ 𝐮𝐶𝐹𝐷

𝑡+1 ) = 𝛻 ∙ (𝜈𝛻𝐮𝐶𝐹𝐷

𝑡+1 ) − 𝛻𝑝𝑡+1 

(17) 

This  residual-based  coupling  strategy  seems 
reasonable  because  general  CFD  simulations  also 
determine  whether  the  next  time  step  can  be 
calculated based on the sizes of the residuals. For 
example, the residuals of the continuity and Navier–
Stokes  equations  of  the  CFD  dataset  in  this  study 
were  maintained  at  a  scale  of  10−6– 10−7 .  As 
written in  Eq. (18), internal iterations in the CFD 
algorithm can reduce the residual of the momentum 
equation,  including  the  momentum  change  in  the 
grid  and  the  inflow/outflow  momentum  with  the 
range 
neighboring  grid, 
(argmin𝑝∗,𝐮∗ ∑ 𝜀𝑛 ).  In  this section,  we  discuss  the 
examination  of  the  feasibility  of  the  intermediate 
CFD simulations for residual and error reductions. 

to  an  acceptable 

𝑡
𝐮∗−𝐮𝑀𝐿
𝛿𝑡

+ 𝛻 ∙ (𝐮∗ ⊗ 𝐮∗) − 𝛻 ∙ (𝜈𝛻𝐮∗) + 𝛻𝑝∗ = 𝜀 

(18) 

Fig. 9(top) shows the efficacy of the intermediate 
CFD  simulations  in  the  cross-coupling  strategy 
based  on  the  same  time-series  data  mentioned  in 
Section 4.2. Before entering the second CFD zone, 
the  calculation  procedures  for  the  ML  and  ML–
CFD  cases  were  the  same.  The  cross  point  was 
determined  as  the  time  step  (1.06  s)  when  the 
residual  scale  of  the  Navier–Stokes  equations 
changed  from 10−7 to 10−6.  Because  the  strategy 
monitors  the  residuals  of each  ML time  series, as 
described  in  Section  4.1,  this  cross  point  can  be 
determined depending on the tolerance setting. The 
intermediate CFD simulation results were obtained 
from  the  time  step  at  which  the  𝜙 -calculation 
method  became  identical.  Notably,  the  increased 
absolute error began to diminish as the computation 
entered the CFD zone. Because approximately three 
time  series  were  calculated  using  first  principles, 
the error values converged to the initial ML time-
series error level.  

As shown in Fig. 9(bottom), the residual of the 
Navier–Stokes equations increases at the first time 
step after entering the CFD zone and subsequently 

effectively returns  to the initial  range (10−7).  We 
conclude that the error recovery effect is obtained 
by  adjusting  the  residuals  of  the  mass  and 
momentum  conservation  equations.  In  the  results 
for  the  time  series  data  after  1.06  s,  using  first 
principles prevents the divergence of errors, unlike 
in the single-training ML approach. As described in 
Section  3,  the  initial  residual  increases  in  the 
intermediate CFD simulations is caused by use of 
different  𝜙 -calculation  methods.  Solving  this 
problem  by  the  unification  of  the  calculation 
method by integrating the PISO and ML algorithms 
will be the focus of our future study. 

Fig. 9 Comparison of maximum absolute errors of 
pressure  (Pa),  x-axis  velocity  (m/s),  and  y-axis 
velocity (m/s) (top) and calculated residual of each 
governing equation (bottom) in ML and ML–CFD 
time series. As residual of Navier–Stokes equations 
is stabilized by intermediate CFD simulations, error 
recovery effect is observed. 

Because this strategy uses the concept of partial 
is 
acceleration, 
significantly affected by the ratio of the number of 
ML-predicted  time  series  to  the  number  of  CFD-

the  acceleration  performance 

Preprint, Copyright 2022 by authors 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
simulated  time  series.  Therefore,  optimizing  the 
ratio to achieve maximum simulation acceleration 
without losing accuracy is essential. Fig. 10 shows 
the  variation  in  the  maximum  absolute  errors 
according  to  the  number  of  ML-predicted  time 
series.  A  long  time  series  calculated  using  ML 
implies  large  maximum  errors  at  the  time  of 
entering the CFD zone. Because the magnitudes of 
the  residuals  to  be  adjusted  in  the  CFD  zone  also 
increase, the absolute  amount  of  error recovery  is 
the  largest  in  the  ML-CFD-3  case.  However, 
because  the  error  increase in  the  ML  zone  is also 
nonlinear, there is no significant difference in terms 
of the number of time steps that can be predicted in 
ML. Specifically, in all cases, the converged error 
in  the  CFD  zone  is  similar  to  that  of  the  ML-
predicted time series before 2–3 time steps from the 
cross point. Because the error recovery effect of the 

CFD  simulations  is  also  dominant  for  2–3  time 
steps,  a  1:1  ML-CFD  cross  computation  seems 
reasonable  under  these  network  and  simulation 
conditions.  

Fig. 11 shows the improvement in the accuracy 
of the cross-coupling strategy compared to that of 
the single-ML training approach as error contours 
(based  on 
the  1.10  s  variable  fields).  The 
intermediate CFD simulations allowed the variable 
fields to satisfy the conservation equations between 
neighboring grids to an acceptable level by internal 
iterations  using  the  pressure-projection  method. 
Therefore,  error  divergences  were  prevented  even 
in  the  stiff  regions  near  the  stagnation  plane.  The 
proposed strategy is confirmed not only to reduce 
the maximum error but also significantly decrease 
the overall error in the computational domain. 

Fig. 10. Error recovery performance of intermediate CFD simulations according to number of ML-
predicted time series. Numbers of ML-predicted time series are 4, 5, and 8 for ML–CFD-1, 2, and 3 cases, 
respectively. Numbers of time steps secured for ML prediction are similar in all cases (2–3 time steps). 

Fig. 11. Comparison of variable error fields of single-ML training approach and cross-coupling strategy 
based on 1.10 s field. It was identified that errors in stiff regions (near stagnation plane) significantly 
reduced.  

Preprint, Copyright 2022 by authors 

 
 
 
 
 
 
 
 
 
5.2.  Feasibility  of  continuous  cross-coupling 
computation 

the 

absolute 

error.  However, 

In the previous section, it was confirmed that the 
intermediate CFD simulations returned the residual 
magnitudes  to  the  initial  scale  and  ultimately 
reduced 
to 
demonstrate  the  CFD-accelerating  ability  of  the 
proposed  strategy,  the  repeatability  of  the  cross-
coupling effects over a continuous time series needs 
to be verified. From the second ML zone, the first 
ML-predicted time  series  was  calculated from  the 
that  had  undergone  cross-
CFD 
computation.  This  initial  condition  differed  from 
that  in  the  first  ML  zone  (in  Section  4.2),  which 
starts  from  the  CFD  ground-truth  time.  If  the 
absolute errors and residuals from the second ML 
zone increase as gradually as those in the first ML 
zone, the feasibility of the cross-coupling strategy 
can be confirmed.  

time  series 

Fig. 12 shows the periodic patterns of both errors 
compared to the ground truth data and the residuals 
of  the  governing  equations  (same  time  series  in 
Sections 4.2 and 5.1). The time series was predicted 
by ML (FVMN model) again from 1.10 s, unlike in 
the method in Section 5.1, where we continuously 
calculated  the  time  series  with  CFD  from  1.06  s. 
The  return  point  was  determined  as  the  time  at 
which  the  residual  scale  again  decreased  to 10−7. 
First,  as  expressed  in  Eq.  (19),  the  parameters 
determined by training using the 1.01–1.02 s dataset 
are  updated  using 
the  1.09–1.10  s  dataset 
(𝛿𝑝∗, 𝛿 𝑢∗, 𝛿𝑣∗). From 1.11 s, the time series field 
is  calculated  with  the  parameter-updated  FVMN. 
Notably, compared to the training time of the CFD 
time  series  data  for  the  first  ML  calculation,  the 
transfer learning time for the second calculation is 
very  short.  A  detailed  comparison  of  time  is 
presented in the next section. 

𝐽𝑣𝑎𝑙(𝜃) = 1
𝑛𝑣𝑎𝑙
(𝛿𝑢∗)𝑘(𝜃))2 + ((𝛿𝑣∗)𝑘 − (𝛿𝑣∗)𝑘(𝜃))2} 

𝑛𝑣𝑎𝑙
𝑘=1

∑ {((𝛿𝑝∗)𝑘 − (𝛿𝑝∗)𝑘(𝜃))2 + ((𝛿𝑢∗)𝑘 −

(19) 

levels  of 

As  shown  in  Fig. 12(top),  for all  variables,  the 
increase  in  the  slope  of  the  absolute  error  in  the 
second ML zone is slightly smaller or similar to that 
of the first ML zone. This seems reasonable because 
the  residual 
two  conservation 
equations in the previous CFD zone are identical, as 
shown Fig. 12(bottom). The increasing slope of the 
residuals in the second ML zone is also sufficiently 
gradual  to  propose  a  cross-coupling  strategy.  The 
periodic  variations  in  the  absolute  error  and 
residuals  are  identical  to  that  in  the  general  CFD 
simulations with acceptable residuals. Owing to the 

the 

characteristic of CFD of allowing a certain residual 
scale,  a  small  absolute  error  can  exist  even  in 
converged  CFD  simulations.  Consequently,  it  is 
confirmed  that  the  transfer  learning  strategy  does 
not  compromise  the  simulation  accuracy  for  the 
computational  acceleration.  The  evaluation  of  the 
practical acceleration performance of the strategy is 
discussed in the next section.  

Fig. 12. Periodic variations in maximum absolute 
error of each variable (top) and calculated residual 
of each governing equation (bottom) in 
continuous ML–CFD-predicted time series. CFD 
acceleration is achieved without loss of accuracy 
using physics-informed cross-coupling strategy.  

5.3. Evaluation of acceleration performance 

Although the long-term computational potential 
of  the  cross-coupling  strategy  was  verified,  the 
acceleration  performance  should  be  evaluated  to 
determine  its  practicality.  Fig.  13  compares  the 
computational timelines of this strategy and general 
CFD simulations. The CFD simulation speed can be 
quantified as the average computation time for one 
time step. However, in this strategy, four types of 
times comprise the total computation time: network 
training time 𝑡𝑡𝑟, parameter updating time 𝑡𝑢𝑝, ML 
computation time for one time step 𝑡𝑀𝐿, and CFD 
computation time for 1 time step 𝑡𝐶𝐹𝐷. Because the 
training time is required only once at the beginning, 
in long-term unsteady simulations, the sum of the 
other  three  times  ( 𝑡𝑢𝑝, 𝑡𝑀𝐿, 𝑡𝐶𝐹𝐷 )  represents  the 
quantified  simulation  speed.  Parameter  updating 

Preprint, Copyright 2022 by authors 

 
 
 
 
 
 
 
 
  
 
 
 
the  acceleration  performance. 

time  (transfer  learning  time)  is  always  required 
when  transitioning  from  CFD  simulations  to  ML 
calculations,  and  it  is  an  important  factor  for 
evaluating 
In 
summary,  the  acceleration  performance, 𝜓,  in  the 
cross-computation can be evaluated using Eq. (20). 
Note that 𝑛𝐶𝐹𝐷 and 𝑛𝑀𝐿 are the numbers of ML and 
CFD time steps calculated in a bundle, respectively, 
as depicted in Fig. 13. 

Fig. 13. Comparison of computational timelines of 
general  CFD  and ML–CFD  simulations.  In  cross-
coupling  strategy,  one  parameter  update  time 𝑡𝑢𝑝 
per bundle is included in calculation process. 

𝜓 =  

𝑛𝐶𝐹𝐷𝑡𝐶𝐹𝐷
𝑛𝐶𝐹𝐷𝑡𝐶𝐹𝐷+𝑡𝑢𝑝+𝑛𝑀𝐿𝑡𝑀𝐿

(20) 

The  acceleration  performance  of  this  strategy 
depends on the complexity of the CFD simulation 
and  the  size  of  the  optimized  neural  networks.  In 
this study, the performance was evaluated based on 
the  CFD  dataset  and  the  neural  network  model 
discussed above. Based on Fig. 14, the number of 
epochs  required  to  update  the  parameters  is 
determined.  Up  to  500  epochs,  variations  are 
observed in the validation loss and residuals in the 
first  network  training  using  the  1.01–1.02  s  time 
series  dataset  (same  as  in  Fig.  7).  The  network 
retains  the  parameters  determined  in  this  first 
training in the first ML zone, and before the second 
ML zone, the parameters are updated with the latest 
CFD  dataset  (1.09–1.10  s  dataset).  When  the 
training  dataset  is  changed  to  the  1.09–1.10  s 
dataset (from epoch 501), both the validation loss 
and  residuals  slightly  increase  with  the  existing 
parameters. However, all values are stabilized after 
2 epochs. The scaled residual of the Navier–Stokes 
equations also rapidly decreases to less than unity. 
Notably,  the  parameters  already  trained  with  the 
previous CFD dataset can be updated very rapidly 
from  the  recent  CFD  dataset  despite  the  time  gap 
(1.01–1.02 s to 1.09–1.10 s). In all cases shown in 
Fig.  10,  the  residuals  and  the  validation  loss  are 
confirmed to be stabilized only after 2 epochs. 

Fig. 14. Variations in validation loss and residuals 
according  to  epoch  number  in  network  training 
(1.01–1.02 s dataset up to 500 epochs and 1.09–1.10 
s dataset after 500 epochs). As dataset is changed, 
loss and residuals increase instantaneously but are 
immediately stabilized. 

Fig.  15  compares  the  average  computational 
speeds  for  calculating  1  time  step  obtained  using 
ML  and  CFD  in  this  study.  The  CPU  and  GPU 
systems  were  an  Intel  Xenon  Gold  (56  cores/112 
threads) 6258R processor (2.70 GHz) and NVIDIA 
TESLA  A100  (CUDA  core,  40  GB  MEM), 
respectively.  Two  systems  with  similar  monetary 
values  were  used  to  compare  the  computational 
speed (~USD 10,000). At 20,000 grids, the average 
times for the ML and CFD calculations were 0.012 
s  and  0.033  s,  respectively.  At  this  time,  the  ML 
average ML computation time was measured using 
the  time  module  in  Python.  Note  that  the  speed 
difference becomes increasingly pronounced as the 
non-linear  matrix  computation 
the  CFD 
simulation increases in complexity. At 500,000 grid 
points with the same boundary/initial condition, the 
average  times  for  the  ML  and  CFD  calculations 
were  0.035  and  0.55  s,  respectively.  Specifically, 
the FVMN could compute the CFD time series 15 
times faster than the CFD solver.  

in 

Thus, the simulation was accelerated by 1.8 times 
in  the  assumed  1:1  ML–CFD  cross-coupling 
computation  condition  considering  the  parameter-
updating time (refer to Eq. (21)). Although the 1:1 
ML–CFD  cross-coupling  computation  condition 
may 
acceleration 
performance,  the  validated  acceleration  capability 
can  contribute  to  future  studies  investigating 
improved  performance  following  network  and 
residual tolerance optimization. 

noticeable 

achieve 

not 

Preprint, Copyright 2022 by authors 

 
 
 
 
 
 
 
 
 
 
 
 
 
increased  residual  but  also  quickly  update  the 
network parameters with the latest CFD time-series 
data.  Consequently,  the  feasibility  of  the  cross-
coupling strategy was verified using a counterflow 
CFD dataset.  

First, the intermediate CFD simulations returned 
the  residual  magnitudes  to  the  initial  scale  and 
ultimately  reduced  the  absolute  error.  Second,  the 
network  evolved  using  the  intermediate  CFD 
simulations  satisfied  the  absolute  error  and  the 
residuals in the ML-predicted time series within an 
acceptable range. Thus, the acceleration of the CFD 
simulations  by  the  ML  zone  is  feasible  without 
compromising the accuracy of long-term fluid flow 
time-series prediction. Specifically, the simulation 
was  accelerated  by  1.8  times  in  the  assumed  1:1 
ML–CFD  cross-computation  condition  including 
the parameter-updating time.  

We expect that the acceleration performance of 
this strategy will be better for turbulent or reacting 
flow CFD problems. Observing the variation in the 
acceleration  performance  according  to  the  CFD 
complexity  will  be  the focus  of a  future study.  In 
addition, in the dataset of this study, all grids had 
the  same  volumes  and  distances  to  adjacent  cells 
because  the  change  in  physical  flux  balance 
coefficient  in  the  nonuniform  mesh  structure  was 
not  considered.  The  extension  of  this  strategy  to 
increasing 
nonuniform  mesh  conditions  with 
complexity of the geometry remains an issue. 

ACKNOWLEDGEMENT 

This  study  was  supported  by  the  Nuclear  Safety 
Research Program through the Korea Foundation of 
Nuclear  Safety  (KoFONS)  using  the  financial 
resources  granted  by  the  Nuclear  Safety  and 
Security  Commission  (NSSC)  of  the  Republic  of 
Korea (Grant No. 2003006-0120-CG100). Ricardo 
Vinuesa  acknowledges  the  financial  support  from 
the Göran Gustafsson Foundation. 

REFERENCES 
-  Ansari,  A.,  et  al.  (2017).  Data  Driven  Smart  Proxy  for 
CFD:  Application  of  Big  Data  Analytics  &  Machine 
Learning  in  Computational  Fluid  Dynamics,  Part  One: 
Proof  of  Concept;  NETL-PUB-21574;  NETL  Technical 
Report  Series;  US  Department  of  Energy,  National 
Energy Technology Laboratory: Morgantown, WV, 2017. 
2017,  National  Energy  Technology  Lab.  (NETL), 
Pittsburgh, PA, and Morgantown, WV. 
Eivazi,  H.,  et  al.  (2021).  Recurrent  neural  networks  and 
Koopman-based frameworks for temporal predictions in a 
low-order  model  of  turbulence.  International  Journal  of 
Heat and Fluid Flow, 90, 108816. 

- 

Fig.  15.  Comparison  of  computational  speeds  of 
ML  and  CFD for  1  time  step.  Using  ML  method, 
CFD time series can be calculated 3 and 15 times 
faster in cases with 20,000 and 500,000 grid points, 
respectively. 

𝜓 =  

6𝑡𝐶𝐹𝐷
3𝑡𝐶𝐹𝐷+𝑡𝑢𝑝+3𝑡𝑀𝐿

(21) 

fast 

to  observe 

In  this  study,  a  laminar  flow  CFD  dataset  was 
used to investigate the feasibility of the ML–CFD 
strategy.  Because  this  CFD  simulation  employed 
relatively  simple  physics  that  did  not  include 
turbulence or reaction models, the simulation was 
exceedingly 
the  dramatic 
effectiveness of this strategy. In calculations where 
the nonlinearity of the governing equations is more 
prominent, the CFD simulation time is expected to 
increase  sharply  compared  to  the  parameter-
updating time and the computation time in the ML 
domain. Specifically, the acceleration performance 
of  this  strategy  will  be  better  for  turbulent  or 
reacting  flow  CFD  problems.  Observing 
the 
variation in the acceleration performance according 
to the CFD complexity will be the focus of a future 
study.  

6. CONCLUSION 

Because recent ML–CFD studies have revealed 
that  completely  suppressing  the  increase  in  error 
with  previous  single-training  ML  approaches  is 
impractical, the development of ML strategies for 
CFD acceleration is a challenging task in the fluid 
dynamics industry. In this study, a realistic transfer 
learning  strategy  based  on  the  cross-coupling 
computation of ML and CFD was established. Our 
hypothesis  was  that  continuous  CFD  time-series 
prediction  is  possible  if  the  intermediate  CFD 
the 
simulations  periodically  not  only  reduce 

Preprint, Copyright 2022 by authors 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
- 

Tolias, I., et al. (2018). Numerical simulations of vented 
hydrogen  deflagration  in  a  medium-scale  enclosure. 
Journal of Loss Prevention in the Process Industries, 52, 
125–139. 

-  Varol,  Y.,  et  al.  (2008).  Analysis  of  adaptive-network-
based  fuzzy  inference  system  (ANFIS)  to  estimate 
buoyancy-induced flow field in partially heated triangular 
enclosures.  Expert  Systems  with  Applications,  35(4), 
1989–1997. 

-  Vinuesa, R., et al. (2020). The role of artificial intelligence 
in achieving the Sustainable Development Goals. Nature 
Communications, 11(1), 1–10. 

-  Vinuesa,  R.  &  Brunton,  S.  L.  (2021).  The  potential  of 
fluid 

to  enhance  computational 

machine 
dynamics. arXiv preprint arXiv:2110.02085. 

learning 

- 

- 

- 

Eivazi, H., et al. (2022). Towards extraction of orthogonal 
and parsimonious non-linear modes from turbulent flows. 
Expert Systems with Applications, 202, 117038. 
Ferreira,  V.,  et  al.  (2009).  Assessment  of  a  high‐order 
finite  difference  upwind  scheme  for  the  simulation  of 
convection–diffusion problems. International Journal for 
Numerical Methods in Fluids, 60(1), 1–26. 
Fluent, A. (2011). Ansys fluent theory guide. ANSYS Inc., 
USA, 15317 (pp. 724–746). 

-  Greenshields, C.J. (2009), OpenFOAM user guide Version 

6. The OpenFOAM Foundation (pp. 237). 

-  Guastoni, L., et al. (2021). Convolutional-network models 
to predict wall-bounded turbulence from wall quantities. 
Journal of Fluid Mechanics, 928. 

- 

-  Guo, X., Li, W., & Iorio, F. (2016). Convolutional Neural 
Networks for Steady Flow Approximation. in Proceedings 
of the 22nd ACM SIGKDD International Conference on 
Knowledge Discovery and Data Mining. 
Jeon,  J.,  et  al.  (2019).  Identification  of  Hydrogen 
Flammability 
in  steam  generator  compartment  of 
OPR1000  using  MELCOR  and  CFX  codes.  Nuclear 
Engineering and Technology, 51(8), 1939-1950. 
Jeon,  J.,  et  al.  (2021).  Identification  of  the  extinction 
mechanism of lean limit hydrogen flames based on Lewis 
number  effect.  International  Journal  of  Heat  and  Mass 
Transfer, 174, 121288. 
Jeon,  J.,  Lee,  J.,  &  Kim,  S.  J.  (2022).  Finite  volume 
method  network  for 
the  acceleration  of  unsteady 
computational fluid dynamics: Non-reacting and reacting 
flows. International Journal of Energy Research, In Press. 
-  Kim, S., et al. (2021). Stiff Neural Ordinary Differential 

- 

- 

Equations. arXiv preprint arXiv:2103.15341. 

-  Kingma,  D.P.  &  Ba,  J.  (2014).  Adam:  A  method  for 
stochastic optimization. arXiv preprint arXiv:1412.6980. 
-  Kovasznay, L. I. G. (1948). Laminar flow behind a two-
dimensional  grid.  in  Mathematical  Proceedings  of  the 
Cambridge Philosophical Society. Cambridge University 
Press. 

-  Krizhevsky,  A.,  Sutskever,  I.,  &  Hinton,  G.  E.  (2012). 
Imagenet  classification  with  deep  convolutional  neural 
networks.  Advances  in  Neural  Information  Processing 
Systems, 25. 
Lee,  S.  &  You,  D.  (2019).  Data-driven  prediction  of 
unsteady flow over a circular cylinder using deep learning. 
Journal of Fluid Mechanics, 879, 217–254. 

- 

- 

- 

- 

-  Morimoto, M., et al. (2021). Generalization techniques of 
neural  networks  for  fluid  flow  estimation.  Neural 
Computing and Applications, 34(5), 3647–3669. 
Rumelhart, D. E., Hinton, G. E., & Williams, R. J. (1986). 
Learning  representations  by  back-propagating  errors. 
Nature, 323(6088), 533–536. 
Srinivasan,  P.  A.,  et  al.  (2019).  Predictions  of  turbulent 
shear flows using deep neural networks. Physical Review 
Fluids, 4(5), 054603. 
Srivastava,  N.,  et  al.  (2014).  Dropout:  a  simple  way  to 
prevent  neural  networks  from  overfitting.  Journal  of 
Machine Learning Research, 15(1), 1929–1958. 
Stevens,  B.  &  Colonius,  T.  (2020).  Finitenet:  A  fully 
time-
convolutional 
dependent  partial  differential  equations.  arXiv  preprint 
arXiv:2002.03014. 
Takbiri-Borujeni, A. &Ayoobi. M. (2019). Application of 
Physics-based  Machine  Learning 
in  Combustion 
Modeling. in 11th US National Combustion Meeting. 
Temam, R. (2001).  Navier-Stokes equations: theory and 
numerical analysis. American Mathematical Society (Vol. 
343). 

lstm  network  architecture 

for 

- 

- 

- 

Preprint, Copyright 2022 by authors 

 
 
