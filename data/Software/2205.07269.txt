Querying Spatial-Temporal-Spectral Data Using a
Graphical Query Builder

Adela Gorczynska
The University of Adelaide
Adelaide, SA
Australia

Peter Fule
Swordﬁsh Computing
Adelaide, SA
Australia

Christoph Treude
The University of Melbourne
Melbourne, VIC
Australia

2
2
0
2

y
a
M
5
1

]
E
S
.
s
c
[

1
v
9
6
2
7
0
.
5
0
2
2
:
v
i
X
r
a

Abstract—Constructing complex queries on data which com-
bines spatial, temporal, and spectral aspects is a challenging
and error-prone process. Query interfaces of general-purpose
database management systems fall short in providing intuitive
support for users to effectively and efﬁciently construct queries.
To address this situation, we developed GRAPHICALQUERY-
BUILDER, a tool which provides interactive and immediate
feedback during query construction and visually represents
search space and queries. A user study with ten professionals
showed that users were able to complete queries on average 40%
faster and 40 percentage points more accurately compared to a
Microsoft Access baseline.

Index Terms—Spatial-temporal-spectral data, querying, graph-

ical query builder

I. INTRODUCTION AND MOTIVATION

Effectively constructing queries on advanced database sys-
tems that contain domain-speciﬁc data which does not follow
basic numerical or textual patterns is challenging and error-
prone [1], [2]. To support decision making in such scenarios,
visual and interactive query systems have been proposed,
often focusing on speciﬁc domains, such as spreadsheets [3],
sports [4], Linked Open Data [5], geographical data [6], or
spatio-temporal data [7], [8].

Many studies provide evidence that visual interfaces outper-
form textual interfaces in high-complexity scenarios. Speier
et al. [9] report that visual-based query interfaces have been
shown to increase decision quality and decrease decision time
as well as decrease confusion when entering a query. In
addition, graphical displays are much easier to interpret and
understand compared to a tabular display. Some examples
of visual interfaces include presenting address data values
on a map compared to a table format, using slider bars or
buttons as opposed to entering manually, or providing an
immediate visual display as users input their query. However,
further research is needed on how to construct such visual
and interactive query interfaces in many domains, such as for
geospatial data [10].

In this paper, we introduce GRAPHICALQUERYBUILDER,
a tool speciﬁcally designed for querying spatial-temporal-
spectral data. To the best of our knowledge, domain-speciﬁc
query tools for this kind of data do not currently exist, and
professionals have to rely on general-purpose tools such as
relational database queries in their decision making processes.
Spatial-temporal-spectral data is common in domains such as

remote sensing [11] and unmanned aerial vehicles (UAV) [12],
with use cases such as ﬁnding space in the spectrum to put
in a new radio tower, or identifying the source of interference
on a radio,

We built GRAPHICALQUERYBUILDER in collaboration
with an industry partner working with a transmitter dataset.
The dataset contains name, location, hours of operation, centre
frequency, and bandwidth for the transmissions of a set of
transmitters. GRAPHICALQUERYBUILDER was designed to
enable users to easily extract useful information including
interference between signals from different
conﬂicts (e.g.,
transmitters) and gaps within the data. The interface allows
users to continually reﬁne queries based on their needs and to
view their queries as they are being built. This minimises the
possibility of incorrect query input and clearly shows users
what they are querying for.

Our main contribution is the assessment of the effectiveness
of the interplay of individual interface components in the
spatial-temporal-spectral domain. We evaluated GRAPHICAL-
QUERYBUILDER in a user study with ten professionals which
showed that they were able to complete a set of queries 40%
faster than with a Microsoft Access baseline and with much
higher accuracy on their ﬁrst attempt: 17/20 queries were cor-
rectly entered on ﬁrst try via GRAPHICALQUERYBUILDER,
compared to 9/20 with the Microsoft Access baseline.

II. GRAPHICALQUERYBUILDER

Table I shows a small sample of the spatial-temporal-
spectral data which GRAPHICALQUERYBUILDER is optimised
for. For each transmitter, the data contains a name (usually the
name of the location of the transmitter), its exact location spec-
iﬁed using longitude and latitude, its hours of operation, and
the frequency range. The frequency range is either speciﬁed
using the centre frequency and bandwidth (as for the examples
in Table I) or using the minmum and maximum frequency (not
shown in the table). Note that the ranges for frequencies vary
greatly from a few hertz to several gigahertz (i.e., 109 Hz).
Table II shows example queries that need to be run on this
data.

The following sections explain the design of GRAPHI-
CALQUERYBUILDER, divided into front-end and back-end.
Figure 1 shows a screenshot of the tool’s user interface.

 
 
 
 
 
 
TABLE I
SAMPLE DATA

Name

Location

Hours

Centre Frequency

Bandwidth

38°40’11.86” , -90° 7’ 9.73”
Mobile Phone Tower 123
Railway Station Shortwave
38°37’45.52” , -90°14’ 6.69”
Emergency Communications System 38°37’36.84” , 90°11’57.61”
Stadium
38°37’58.90” , 90°11’22.36”
International Aeronautical Distress
University Satcom

38°37’20.28” , 90°13’57.76”

0:00–24:00
5:00–23:00
0:00–24:00
8:00–20:00
00:00–24:00
20:00–10:00

900MHz
26MHz
32Hz
30MHz
406.5MHz
2.564GHz

3kHz
2kHz
10kHz
1kHz
1kHz
15MHz

TABLE II
SAMPLE TASKS

Anything that transmits at 90MHz +/- 1 MHz?
What frequencies are active between 1:00 and 4:00?
What frequencies are available between 3:00 and 8:00?
Anything that transmits within 1km of (cid:104)Location(cid:105)?
What times are transmissions made in (cid:104)Location(cid:105)?
Anything that does not transmit within the range 90 MHz–100 MHz?

Anything that transmits in the range 78 MHz–85 MHz, within 1km of (cid:104)Location1(cid:105)?
Anything that transmits within 1km of (cid:104)Location1(cid:105) or within 10km of (cid:104)Location2(cid:105)?
Anything that transmits at 25 MHz, in the city of (cid:104)Location1(cid:105) at Noon?
Anything that transmits between hours 19:00–23:00 in the range 90 MHz–100 MHz or at 56000 +/- 8000 kHz?
Anything that transmits in the range 55MHz–60MHz, within 1km of (cid:104)Location1(cid:105) between 05:00–09:00?
Anything that transmits between hours 1:00–3:00, within 10km of (cid:104)Location2(cid:105) at 67500 kHz?

e
l
p
m
S

i

d
e
c
n
a
v
d
A

A. Front-end

The front-end was designed to satisfy the following require-

ments:

• Allow users to query by the transmitter’s name, location,
range from location, hours of operation, frequency and/or
bandwidth.

• Accommodate simple to advanced queries (i.e., search by

two or more parameters).
• Be intuitive to the extent

its behaviour without
assistance.

that users can understand
training or

the need of special

• Allow users to perform a query with minimum amount

of effort.

• Deliver expected results the ﬁrst time rather than having
their

the query (with variations) to get

users repeat
intended result.

GRAPHICALQUERYBUILDER’s front-end is implemented in
Angular.1 As shown in Figure 1, the key feature of GRAPH-
ICALQUERYBUILDER’s user interface is the visualisation of
the query as it is being built. This visual aspect allows users to
verify that they are inputting the correct values of their query
and it helps them understand what they are querying for.

The query component allows users to search by name,
location, hours of operation, and frequency. Upon ‘name’
selection, a drop-down ﬁeld appears allowing users to choose
the appropriate name. Users have the choice to enter ‘location’
via address or latitude and longitude. A marker is placed on
the map at the location entered. Users can enter their desired
range in kilometres which appears as a circle on the respective
marker. Users can also edit the circle on the map to adjust

1https://angular.io/

the range value. Upon ‘hours of operation’ selection, a ‘from’
and ‘to’ hour ﬁeld is displayed. Once users select from both
ﬁelds, a visualisation representing the input hour range appears
on the hours of operation axis. Finally, users have the choice
to query by a ‘centre frequency’ or a ‘frequency range’. A
visualisation representing the input frequency appears on the
frequency visualisation. Note the log scale to accommodate
the wide range of frequencies from one hertz to one terahertz
(i.e., 1012 Hz).

In addition, each query has an ‘include’ checkbox, selected
on default. If the query is included, the visualisation colour
is green and if excluded, the visualisation colour is red. The
query interface allows users to add properties to their query
as they need, via the ‘+’ button as well as remove properties,
via the ‘–’ button. Users can also select whether the query is
joined by ‘AND’ or ‘OR’ by selecting either option.

B. Back-end

The back-end was designed to satisfy the following require-

ments:

• Efﬁciently store data in a relational database.
• Retrieve and display expected data based on query exe-

cution.

GRAPHICALQUERYBUILDER’s backend is implemented in
Django2 and connects to a relational PostgreSQL database.3
The SQL statement is generated from the user interface web
page and passed to the REST APIs deﬁned in the Django
application. Django will then send the appropriate response
back to web page, built with Angular, in JSON format. The
results are displayed in a table, see Figure 2.

2https://www.djangoproject.com/
3https://www.postgresql.org/

Fig. 1. User interface of GRAPHICALQUERYBUILDER

III. EVALUATION METHODOLOGY

To evaluate whether GRAPHICALQUERYBUILDER is able
to support users in querying spatial-temporal-spectral data, we
asked two research questions:

RQ1 How accurately can professionals formulate queries
with GRAPHICALQUERYBUILDER compared to a
baseline?

RQ2 How quickly can professionals complete queries with
GRAPHICALQUERYBUILDER compared to a base-
line?

To answer our research questions, we compared GRAPH-
ICALQUERYBUILDER against Microsoft Access,4 a com-
mercial database management system with a graphical user
interface. Other specialised industry products, such as the
Australian Communications and Media Authority (ACMA)
search for registered transmitters,5 did not contain details
time of operation).
needed for our usage scenarios (e.g.,
We recruited ten professionals from our industry partner to
participate in a user study. All participants were familiar with
SQL and the schema of the data. None of these professionals
are authors of this paper or were involved in the design of
GRAPHICALQUERYBUILDER. Each participant was asked to
complete four tasks (see next paragraph), two with Microsoft
Access and two with GRAPHICALQUERYBUILDER.

Our

industry partner provided us with several sample
queries which they regularly use on spatial-temporal-spectral

4https://www.microsoft.com/en-au/microsoft-365/access
5https://web.acma.gov.au/rrl/register search.search dispatcher

data. These queries were used as a guide while developing
GRAPHICALQUERYBUILDER and for the construction of a set
of tasks for participants to complete during the evaluation. The
tasks were designed so that they would test each property of
GRAPHICALQUERYBUILDER individually and well as com-
bined with other properties. The tasks were similar in nature
to the sample tasks shown in Table II. Some tasks were made
to be simple, by querying with a single condition, for the
purpose of getting participants accustomed to both tools. An
example simple query is “Anything that transmits at 90MHz
+/- 1 MH”. Other queries were more advanced, involving
three conditions. An example advanced query is “Anything
that transmits between hours 1:00 – 3:00, within 10km of
(cid:104)Location(cid:105) at 67500 kHz”. Each participant completed one
simple and one advanced task with each of the tools, for a
total of four tasks per participant.

To evaluate whether the output of the users’ query sub-
missions was correct, the corresponding SQL statements were
written and executed on the same data to compare the out-
put. The time it
took each user to complete each query
was recorded and we asked participants about their overall
experience after completing all queries.

IV. EVALUATION RESULTS

Participants were able to complete tasks on average 40%
faster with GRAPHICALQUERYBUILDER compared to the
Microsoft Access baseline (approximately two and a half
minutes compared to approximately four minutes). In addition,
only 9/20 queries were correctly entered on ﬁrst try via Mi-

Fig. 2. GRAPHICALQUERYBUILDER results display (excerpt)

crosoft Access compared to 17/20 correctly entered queries via
GRAPHICALQUERYBUILDER. Figure 2 shows example output
of GRAPHICALQUERYBUILDER.

All participants provided positive feedback with regard to
GRAPHICALQUERYBUILDER’s ease of use, intuitiveness, and
efﬁciency. Some participants mentioned that current methods
for data analysis are performed with tools similar to Microsoft
Access.

During the evaluation, several suggestions were made for
improvements to GRAPHICALQUERYBUILDER. One partici-
pant suggested giving users the ability to modify the input via
visualisation elements other than the map. Another suggested
including an option to export the results as a comma separated
values (CSV) ﬁle. We will consider these suggestions for
future versions of GRAPHICALQUERYBUILDER.

SUMMARY

study to evaluate GRAPHICALQUERY-
In a user
BUILDER with ten professionals completing four tasks
each:

RQ1 Users were able to enter queries 40 percentage
points more accurately compared to baseline.
RQ2 Users were able to enter queries 40% faster com-

pared to baseline.

V. RELATED TOOLS

There have been a variety of approaches to designing and

developing graphical query builders.

Film Finder [13] was an early example of using graphi-
cal user interface components to improve user accessibility.
Film Finder created visual components for ﬁltering each
column of the dataset. GRAPHICALQUERYBUILDER extends
that research by creating a more complete query creation
user interface. GRAPHICALQUERYBUILDER can build more
complex queries, such as multiple inclusion/exclusion ranges
and areas, and works with spatial data.

Two examples of a graphical query builders that work with
spatial and frequency data are the Australian Communications
and Media Authority (ACMA) and FM Query Broadcast
Station Search by the Federal Communications Commission.6
Both these tools allow a user to search for registered transmit-
ters within their respective countries. They both allow users to
ﬁlter the data set through graphical components. The ACMA
search also allows users to gradually build the query by adding

search terms. Both tools require the user to submit the query
before showing the results, and users do not have the option to
continue adding conditions to an existing query, which are fea-
tures supported by GRAPHICALQUERYBUILDER. These are
both important tools in the area of spatio-temporal-frequency
search, but have signiﬁcant shortcoming that we felt could be
improved on.

Visual SQL, by Chartio,7 features a ﬂexible drag-and-
drop interface which allows users to explore and visualise
data. Users can import any dataset into the tool, which can
automatically show the data structure to help users understand
the data and enable them to construct queries. Once an initial
query is built, users can quickly see the results in a chosen
form (table, graph), modify the query, or narrow the output by
adding conditions. While Visual SQL is a powerful tool, it is
not customised for spatial, temporal, or spectral data, which
is what motivated us to build GRAPHICALQUERYBUILDER.
It would likely have been feasible to implement GRAPHICAL-
QUERYBUILDER with Visual SQL, but we expect it would
not have impacted the evaluation results.

Erwig and Schneider introduced STQL, a Spatio-Temporal
Query Language [14]. However, the authors concede that a
query language is not enough for end users because “end users
need an easy access to spatio-temporal data and queries” [14].
They point to visual querying as a potential solution. GRAPH-
ICALQUERYBUILDER builds on this research by creating a
visual approach to query building. It includes a subset of SQTL
functionality, just what was required by our industry partner.
To the best of our knowledge STQL is not publicly available,
which prevented us from using it as a baseline.

Many of these related tools show what can be done with
graphical approaches to querying data. An important aspect
of this paper is the measurement of the effectiveness of the
approach.

VI. CONCLUSIONS AND FUTURE WORK

GRAPHICALQUERYBUILDER allows users

to navigate
through a large, complex dataset of spatial-temporal-spectral
data with increased ease and simplicity. It is powerful to use,
allowing users to query by transmitter name, location range,
hours of operation, and frequency. Users can execute simple
and complex queries more quickly, efﬁciently, and accurately
than with the baseline tool. User can continually add queries
based on their needs, and receive immediate visual feedback
on their queries. We believe these features contributed to the
results in improved user speed and accuracy, and positive user
responses when querying the data.

For future development of GRAPHICALQUERYBUILDER,

our industry partner has expressed interest in:

• The ability to control ‘AND’ and ‘OR’ conditionals with

brackets to allow more complex query structures.

• A query interface that updates based on the imported data

format.

• Import and export of more data formats.
• More visual elements for constructing the queries.

6https://www.fcc.gov/media/radio/fm-query

7https://chartio.com/blog/why-we-made-sql-visual-and-how-we-ﬁnally-did-it/

REFERENCES

[1] V. M. Cavalcanti, U. Schiel, and C. de Souza Baptista, “Querying spatio-
temporal databases using a visual environment,” in Proceedings of the
Working Conference on Advanced Visual Interfaces, 2006, pp. 412–419.
[2] T. Reschenhofer and F. Matthes, “Supporting end-users in deﬁning
complex queries on evolving and domain-speciﬁc data models,” in
Proceedings of the IEEE Symposium on Visual Languages and Human-
Centric Computing.
IEEE, 2016, pp. 96–100.
[3] J. Cunha, J. P. Fernandes, J. Mendes, R. Pereira, and J. Saraiva, “Es-sql:
Visually querying spreadsheets,” in Proceedings of the IEEE Symposium
on Visual Languages and Human-Centric Computing.
IEEE, 2014, pp.
203–204.

[4] K. Richly, “Leveraging spatio-temporal soccer data to deﬁne a graphical
the IEEE

query language for game recordings,” in Proceedings of
International Conference on Big Data.

IEEE, 2018, pp. 3456–3463.

[5] G. Vega-Gorgojo, L. Slaughter, M. Giese, S. Heggestøyl, A. Soylu, and
A. Waaler, “Visual query interfaces for semantic datasets: An evaluation
study,” Journal of Web Semantics, vol. 39, pp. 81–96, 2016.

[6] Z. Dobesova and P. Dobes, “Comparison of visual languages in geo-
graphic information systems,” in Proceedings of the IEEE Symposium
on Visual Languages and Human-Centric Computing.
IEEE, 2012, pp.
245–246.

[7] X. Li and S. Chang, “An interactive visual query interface on spa-
tial/temporal data,” in Proceedings of the Tenth International Conference
on Distributed Multimedia Systems. Citeseer, 2004, pp. 257–262.
[8] T. Emrich, H.-P. Kriegel, N. Mamoulis, M. Renz, and A. Zuﬂe,
“Querying uncertain spatio-temporal data,” in Proceedings of the 28th
International Conference on Data Engineering.
IEEE, 2012, pp. 354–
365.

[9] C. Speier and M. G. Morris, “The inﬂuence of query interface design

on decision-making performance,” MIS quarterly, pp. 397–423, 2003.

[10] M. A. Erskine, D. G. Gregg, J. Karimi, and J. E. Scott, “Business
decision-making using geospatial data: A research framework and liter-
ature review,” Axioms, vol. 3, no. 1, pp. 10–30, 2014.

[11] Q. Zhang, Q. Yuan, C. Zeng, X. Li, and Y. Wei, “Missing data
reconstruction in remote sensing image with a uniﬁed spatial–temporal–
spectral deep convolutional neural network,” IEEE Transactions on
Geoscience and Remote Sensing, vol. 56, no. 8, pp. 4274–4288, 2018.
[12] K. Chen, G. Reichard, A. Akanmu, and X. Xu, “Geo-registering uav-
captured close-range images to gis-based spatial model for building
fac¸ade inspections,” Automation in Construction, vol. 122, p. 103503,
2021.

[13] N. K. Jog and B. Shneiderman, “Starﬁeld visualization with interactive
smooth zooming,” in Working Conference on Visual Database Systems.
Springer, 1995, pp. 3–14.

[14] M. Erwig and M. Schneider, “Stql – a spatio-temporal query language,”
Springer, 2002, pp.

in Mining spatio-temporal information systems.
105–126.

