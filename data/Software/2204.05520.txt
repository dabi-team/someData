Noname manuscript No.
(will be inserted by the editor)

OptimizedDP: An Eﬃcient, User-friendly Library
For Optimal Control and Dynamic Programming

Minh Bui · George Giovanis · Mo
Chen · Arrvindh Shriraman

2
2
0
2

r
p
A
2
1

]

Y
S
.
s
s
e
e
[

1
v
0
2
5
5
0
.
4
0
2
2
:
v
i
X
r
a

the date of receipt and acceptance should be inserted later

Abstract This paper introduces OptimizedDP, a high-performance software
library that solves time-dependent Hamilton-Jacobi partial diﬀerential equa-
tion (PDE), computes backward reachable sets with application in robotics,
and contains value iterations algorithm implementation for continuous action-
state space Markov Decision Process (MDP) while leveraging user-friendliness
of Python for diﬀerent problem speciﬁcations without sacriﬁcing eﬃciency
of the core computation. These algorithms are all based on dynamic pro-
gramming, and hence can have bad execution runtime due to the large high-
dimensional tabular arrays. Although there are existing toolboxes for level set
methods that are used to solve the HJ PDE, our toolbox makes solving the
PDE at higher dimensions possible as well as having an order of magnitude im-
provement in execution times compared to other toolboxes while keeping the
interface easy to specify diﬀerent dynamical systems description. Our toolbox
is available online at https://github.com/SFU-MARS/optimized dp.

Keywords Hamilton-Jacobi Reachability Analysis · Dynamic Programming ·
Numerical Computation · Value Iteration · Optimal Control · Level Set
Methods

1 Introduction

Dynamic programming based algorithms are crucial to many optimization
problems. Despite its poor scalability due to exponential complexity, global
optimal solutions to many control and optimization problems are only feasible
via dynamic programming approach. Furthermore, dynamic programming also
provides important reasoning about solutions of many complex algorithms.

E-mail: {buiminhb, ggiovani, mochen}@sfu.ca, {ashriram}@cs.sfu.ca
Simon Fraser University

 
 
 
 
 
 
2

Minh Bui et al.

Such algorithms that we would like to address in this work are continuous
Markov Decision Process (MDP) value iteration algorithm, and level-set based
algorithms that solve the HJ PDEs, whose solutions are crucial to guarantee-
ing safety of autonomous systems and the surrounding environment [1]. Our
motivation for addressing the former in this toolbox is that none of the exist-
ing computational eﬃcient machine learning libraries support value iteration
with continuous state space and action. And our reasons for this toolbox to
support solving HJ PDEs are discussed as follow.

As the numerical algorithm for solving the HJ PDE to obtain the Backward
Reachable Tube (BRT) and Backward Reachable Set (BRS) deﬁned in [1] is
quite complex and involves many ﬂoating-point operations on a large dimen-
sional grid, it takes signiﬁcant eﬀort and time to write the algorithm, prototype
the system dynamics, waiting for output results (which can be hours/days),
and validating the results. Scalability is probably the biggest downside of the
framework but these aforementioned factors shy roboticists away more from
applying reachability analysis to their research. To address these problems,
there have been some toolboxes that were implemented: HelperOC as a wrap-
per of the level set toolbox ToolboxLS [6], and the BEACLS library written
in C++ and CUDA [9]. HelperOC and ToolboxLS are both written in MAT-
LAB, which contains a rich set of visualizing plots and contours functions,
and is user-friendly and quite powerful in prototyping mathematical models.
However, this toolbox suﬀers from slow runtime with the MATLAB software
package being proprietary. BEACLS, on the other hand, executes the level-set
based numerical algorithm much faster than the MATLAB counterpart but
has a very diﬃcult interface to specify a problem setting and hence making
the time spent on prototyping systems a bottleneck.

In this paper, we introduce our new toolbox that obtains the BRS and BRT
much more eﬃciently which can assist researchers better in prototyping and
applying optimal control algorithms to their system model. The advantages of
our toolbox compared to the existing ones are the signiﬁcant improvement of
the execution runtime and the user-friendly interface for problem speciﬁcations
in Python. The eﬃcient implementation of the toolbox also allows reachability
analysis to be done on dynamical systems of up to six dimensions, which was
not the case previously.

The toolbox supports the following: level-set based algorithms solving the
Hamilton-Jacobi PDEs to obtain BRT and BRS, one-shot computation of
time-to-reach (TTR) value function [10], and value iterations for Markov De-
cision Process (MDP) with continuous state space and action space. Our tool-
box is implemented in Python and HeteroCL [5]. The front-end used to ini-
tialize various problem formulation is written in Python while the backend
implementing the algorithms are written in HeteroCL. HeteroCL is a python-
based domain-speciﬁc language (DSL) that is based on Tensor Virtual Machine
(TVM) [2], a framework that optimizes deep learning programs as computa-
tion graph structures. HeteroCL is built on top of TVM that allows imperative
programming in its syntax, which allows more ﬂexibility in writing diverse al-
gorithm implementations. Similar to TVM, HeteroCL decouples algorithm def-

Title Suppressed Due to Excessive Length

3

initions from the scheduling transformations that can optimize the runtime of
the programs. For our implementation, we attribute the considerable improve-
ment in running time to the scheduling optimizing scheme available that we use
and also the optimization done on graphs by the TVM framework. Our toolbox
is available online at https://github.com/SFU-MARS/optimized dp.

In the next few subsections, we will provide an overview of related software
packages, optimizedDP’s software structure, features, description of the algo-
rithms in the toolbox, and ﬁnally implementation details of those algorithms.

1.1 Related work

We are aware of other existing toolboxes that are most commonly used for
solving HJ PDE:

ToolboxLS [6] is a library that contains many subroutines written in
MATLAB for solving a variety of cases of an HJ PDE. HelperOC is a wrapper
around ToolboxLS that utilizes these subroutines for convenient computation
of BRT and BRS through solving the time-dependent HJ PDE. HelperOC con-
tains many diﬀerent examples of system dynamics used in BRT computation.
In comparison with optimizedDP, ToolboxLS and HelperOC is more mature
and contains more advanced numerical schemes to approximate derivatives
and numerical integration as well as diverse MATLAB subroutines used for
visualizing plots. One downside to ToolboxLS and HelperOC is that the tool-
box can be quite slow for large problems and not possible for problems with
systems that have higher than 4 dimensions. Another minor disadvantage of
ToolboxLS is that it is written in MATLAB, a proprietary software package
whose licenses have to be renewed yearly.

BEACLS is a library that contains implementations of all the features
available in ToolboxLS and HelperOC in C++ and CUDA with support
on GPU. This toolbox tries to solve the computational ineﬃciency issue that
ToolboxLS faces. However, the biggest downside of this toolbox is that it’s
quite hard to use due to the problem speciﬁcation having to be written in
C++.

Our toolbox optimizedDP introduced here is an ongoing eﬀort that tries
to combine the best features of the two toolboxes: codes that are easy to use,
understand while keeping computations eﬃcient. In addition, we are also aware
of other software libraries for solving value iteration in MDP:

Markov Decision Process for Python is a software package written in
Python that includes many algorithm implementations for MDP such as value
iteration, policy iteration, relative value iteration, etc. However, the package
does not support continuous state space and action space in value iteration.
This package is available at https://pymdptoolbox.read thedocs.io/en/latest/
index.html.

POMDP [4] is a software package written in Julia that contains a variety
of algorithm solvers for MDP and reinforcement learning algorithms such as
Deep Q-learning, Monte Carlo Tree Search, etc. The package also contains

4

Minh Bui et al.

many examples for diﬀerent types of problem initialization and has an easy-to-
use interface. But like Markov Decision Process for Python, the package
does not support continuous state space and action space value iteration in
MDP.

2 Overview of the software toolbox structure

Fig. 1: The overall structures of OptimizedDP. The red-colored ﬁles are written in Python
and uses Numpy library for problem speciﬁcations, grid initialization, and plotting utilities.
The green-colored ﬁles are written in a mix of HeteroCL and Python. The system dynamics
ﬁle has to be provided by users and needs to be a Python object that contains problem
parameters, and subroutines that determine optimal controls, optimal disturbances and
compute the rate of change for each system state. These system object’s subroutines are
then called by the rest of the green-colored ﬁles that provide implementations of the core
algorithms.

The general structure of our toolbox is shown in Figure 1. To begin the
computation, users ﬁrst specify a problem speciﬁcation ﬁle that imports the
ﬁle solver.py, which contains deﬁnitions of APIs calls for three diﬀerent types
of computations. The problem speciﬁcation ﬁle can be quite straightforward
to users as it is mostly written with Python and Numpy libraries. To assist
users in initializing their problem speciﬁcations, there are provided python
libraries that include grid generations (ﬁle grid processing.py), initialization of
signed distance initial value function (ﬁle ShapesFunction.py). These functions
could be extended or customized towards users’ needs, as long as the APIs are
called correctly. The only HeteroCl part of the problem speciﬁcations is the
system dynamics description, which is passed to the backend solvers to build
a computational graph at the beginning.

The solver.py ﬁle maps the problem speciﬁcation to the corresponding al-
gorithm implementations. Each algorithm is implemented in HeteroCL which

solver.pyHJ pde solver functionTTR Computation functionValue Iteration functionProblem specificationsSpatial Derivativesgrid_processing .pyShapesFunction .pyplotting_utilities.pySystem DynamicsPythonHeteroCL & PythonUser-definedTitle Suppressed Due to Excessive Length

5

creates a computational graph of the algorithm and then returns an executable.
The executables are used as a function to which parameters of the problem
are passed. Once the results are computed and converted to a Numpy ar-
ray, available visualization package libraries in Python can be used to dis-
play the result. To make visualization of high dimension array easier, the ﬁle
plotting utilities.py creates a wrapper around the plotly’s Isosurface function
that can be called to visualize 3D value function representing various slices of
the multidimensional result array. In addition, certain computation modules
can be cross-used among diﬀerent algorithms implementation. Speciﬁcally, the
module spatial derivatives computation is both used in solving HJ PDE and
computing TTR value function.

3 Features And Algorithms Supported

3.1 Continuous Markov Decision Process (MDP)

& Value Iteration

Markov Decision Process is a model that is useful to study the optimal behavior
of a target system in react to the change of external environments. An MDP
is usually described by a tuple (S, A, T, R, γ, H) where S is the state space, A
is the action space, T is the transition probability matrix, γ is the discount
factor and H is the time horizon. The key assumption of MDP is that the next
state transition of a system is only dependent on the current state and action.
This assumption is described by the following relation

P(St+1|St, At) = P(St+1|St, At..., S0, A0)

(1)

where St ∈ S, and At ∈ A. In MDP, the discounted return Gt at time step t
is deﬁned as:

Gt = Rt+1 + γRt+2 + γ2Rt+3 + ... = Σn

k=0γkRt+k

And the state value function Vπ(s) under a policy π : S → A is as follow

Vπ(s) = Eπ[Gt|St = s] = Eπ[Rt + γVπ(s(cid:48))|St = s]

(2)

(3)

In MDP, the objective of the target system is to act according to an optimal
policy π∗ : S → A that can maximize the expected rewards received at each
state over time. The main goal in MDP is to discover π∗ along with the ex-
pected rewards received at every state. This objective and the basic properties
of MDP are the backbone of all reinforcement learning algorithms.

Our toolbox provides an implementation of the value iteration algorithm for
continuous state and action space (shown in Algorithm 1), which computes
expected rewards Vπ∗ (s) at every state given all the possible actions a state s
can take.

6

Minh Bui et al.

Algorithm 1 Continuous MDP - Value Iteration Algorithm

for a in A do

1: Discretize S, A
2: Vt=0 ← 0
3: Repeat:
4: for s in S do
5:
6:
7:
8:
9:
10:
11:
12: end for

end for

Break

Q(s, a) ← R(s, a) + (cid:80)
Vt+1(s) ← max(Vt+1(s), Q(s, a))
∆ ← |Vt(s) − Vt+1(s)|
If ∆ < threshold:

s(cid:48) p(s(cid:48)|s, a)Vt−1(s(cid:48))

Note that on line 6 of algorithm 1, (s(cid:48)) is obtained by considering the

nearest neighbour that is the closest discretized state on grid.

3.2 Time-dependent Hamilton-Jacobi (HJ) Par-

tial Diﬀerential Equation (PDE)

Our toolbox supports numerical computation for solving two HJ PDEs.
The ﬁrst PDE, which is solved in order to obtain BRS and BRT deﬁned in [1],
is as follow:

Dsφ(z, s) + H(z, ∇φ(z, s)) = 0

H(z, ∇φ(z, s)) = min
d(·)

max
u(·)

∇φ(z, s)T f (z, u, d)

(4)

φ(z, 0) = φ0(z), s ∈ [t, 0]

The algorithm based on level-set methods for solving the above equation is
implemented as in algorithm 2.

Currently, the toolbox solves the above PDE for up to 6 dimensions. Al-
though the toolbox developed by [6] supports an arbitrary number of dimen-
sions through the usage of various operation tricks supported by MATLAB,
each of the temporary variables such as spatial derivatives, system dynamics,
etc. for each grid point is stored in a multidimensional array. This approach is
not ideal for the performance of an already expensive computation in two ways
(illustrated in Fig. 2 ). Firstly, the approach does introduce extra overhead of
memory in the implementation. These redundant overheads increase linearly
as we go up the dimensional ladder, which can limit the number of dimensions
to which the algorithm can be performed. Secondly, each of the components
for all grid points has to be computed before the ﬁnal output, which results
in bad cache locality for high-dimensional problems.

Title Suppressed Due to Excessive Length

7

Algorithm 2 Time-dependent HJ PDE algorithm

1: Initialize φ0
2: // Compute Hamiltonian term, max and min derivative
3: for every grid point index i do
4:
5:

∇φ(z, s)(cid:62)f (z, u)

Compute ∇φ(z, s)
uopt ← arg max
u∈U
˙z ← f (z, uopt)
Hi ← ∇φ(z, s)(cid:62) ˙z
minD ← min(minD, ∇φ(z, s))
maxD ← max(maxD, ∇φ(z, s))

6:
7:
8:
9:
10: end for
11: // Compute artificial dissipation
12: for every grid point index i do
(cid:12)
(cid:12)
(cid:12)
(cid:12)

αi ← maxp∈[minD,maxD]

13:

(cid:12)
(cid:12)
(cid:12)
(cid:12)

∂H
∂p
D+Vi − D−Vi
2
, αi)

14:

Hi ← Hi − αi
d ← max(αmax
αmax
15:
16: end for
17: // Compute integration time step
(cid:12)
(cid:12)αmax
d
∆zd

18: ∆t ← (ΣN

)−1

d=1

(cid:12)
(cid:12)

d

19: // First order Runge-Kutta (RK) integrator.
20: Vt+1 ← H∆t + Vt

Fig. 2: In [6], each temporary variables are stored in multidimensional arrays. As we in-
crease N , the number of dimensions, the number of temporary multi-dimensional array goes
up linearly. If the depth of the computation is large, the total amount memory used for tem-
porary variables will exceed system’s DRAM capabilities, limiting computations to small
problems only.

Fig. 3: OptimizedDP’s implementation of algorithm 2 does not buﬀer temporary variables
into multidimensional arrays. Instead, within each grid iteration, a grid point value in Vnew
is directly computed.

N dimensionsN arraysSpatial Derivativesterms8

Minh Bui et al.

3.3 Time-independent Hamilton-Jacobi (HJ) Par-

tial Diﬀerential Equation (PDE)

In addition, optimizedDP provides an implementation of the Lax-Friedrich
sweeping algorithm described in [10] (also shown in algorithm 3) for eﬃciently
computing time-to-reach BRS without numerical integration. Given a target
set T ⊆ Rn, the time-to-reach (TTR) function is deﬁned as follow:

φ(z) = min
d(·)

max
u(·)∈U

min{t | z(t) ∈ T }

(5)

By dynamic programming principle, this TTR φ(z) can be obtained by

solving the following HJI PDE:

H(z, ∇φ(z)) = 0

φ(z) = 0, z ∈ T

(6)

H(z, ∇φ(z)) = min
d(·)

max
u(·)

(−∇φ(z)T f (z, u, d) − 1)

The advantages of algorithm 3 compared to obtaining the TTR function
through solving the time-dependent HJ PDE are less memory is required and
the convergent result generally requires fewer iterations.

Algorithm 3 Lax-Friedrich sweeping algorithm for TTR

1: Initialize φ(z) ← 0 for z ∈ T and φ(z) ← 100 for z (cid:54)∈ T
2: while |φ − φold| < (cid:15) do
3:
4:
5:
6:

φ ← φold
for grid index i not in boundary do:

∇φ(z, s)(cid:62)f (z, u)

Compute ∇φ(z, s)
uopt ← arg max
u∈U
˙z ← f (z, uopt)
Hi ← ∇φ(z, s)(cid:62) ˙z
∂H
∂p
c ← ∆z
σ
φnew
i ← c(−Hi + σ
φi ← min(φnew
, φi)

σ ←

(cid:12)
(cid:12)
(cid:12)
(cid:12)

(cid:12)
(cid:12)
(cid:12)
(cid:12)

i

7:
8:

9:

10:

11:
12:
13:
14:
15:
16:
17: end while

φi+1+φi−1
2∆z

)

end for
// Update the grid points at boundary
φnew
1 ← min(max(2φ2 − φ3, φ3), φ1)
φnew
N ← min(max(2φN −1 − φN −2, φN −2), φN )

Title Suppressed Due to Excessive Length

9

3.4 Common Components and Features

3.4.1 Grid

Similar to the ToolboxLS [6], our toolbox allows users to create a Cartesian
grid, implemented as a Python object, by specifying the number of grid nodes,
upper bound, and lower bound for each dimension, and periodic dimension.
The ghost points at the boundary for non-periodic dimension, by default, are
extrapolated based on the formula described in the ﬁle addGhostExtrapolate.m
in ToolboxLS.

3.4.2 Initial Condition

To initialize diﬀerent implicit surface shapes, we have implemented many ini-
tial conditions which represent shapes such as cylinders, spheres, and lower/upper
planes. In addition, there are utility functions that operate on these geome-
try shapes such as union, intersection. All of these functions are written with
Python and Numpy, and could be easily extended by users using the attribute
grid.vs exposed by the grid object.

3.4.3 Time Integration

OptimizedDP provides the standard ﬁrst-order accurate strong stability pre-
serving (SSP) Runge-Kutta (RK) integrator. The maximum timestep used for
integration is determined by the Courant–Friedrichs–Lewy (CFL) [3] condi-
tion.

3.4.4 Spatial Derivatives

Currently, OptimizedDP provides an implementation of derivatives approx-
imation method that includes ﬁrst order upwind approximation and second
order accurate essentially non-oscillatory (ENO) [7] scheme.

3.4.5 Visualization

OptimizedDP provides an interface that helps visualize 3D isosurface of im-
plicit surface for high dimensional systems. This interface allows users to spec-
ify the slice indices for higher dimensional systems and set the threshold value
of isosurface for visualization. At its core, the interface calls the function Iso-
surface available in plotly library, which will show the isosurface plot in a
browser. Users can also opt to use other software packages for visualization
once the ﬁnal result is obtained.

10

Minh Bui et al.

4 Implementation Details

We decided to implement each algorithm mentioned in the above section for
every dimension separately, each with its own nested loop implementation.
Even though this can be a tedious process for development, there are few
advantages for this approach. First, we would like to keep the algorithm im-
plementation descriptive, intuitive, and easy to be understood by users who
are familiar with the algorithms. More importantly, we would like to opti-
mize the computation using some of the schedule transformations available in
HeteroCL without introducing extra redundancy and overhead in the code.
Currently, the toolbox supports core algorithm implementations for up to 6
dimensions. In our experience, this is the limit beyond which tabular dynamic
programming is no longer practical on a personal computer of maximum 32GB
DRAM.

In this section, we are going to discuss in more detail the optimization
techniques enabled in HeteroCL used in our implementations, and note that
not all of them are applicable to all the algorithms implementation.

4.1 Cache-Aware Optimized (Algorithm 1, 2, 3)

This optimization applies to all of the algorithm implementations. One im-
portant factor that can have a substantial impact on the performance of a
program when dealing with high dimensional arrays is memory locality. By
knowing the memory layout of the N-dimensional array, our grid iterations
follow this layout order which takes advantages of the cache spatial locality.
To abide by Numpy’s memory layout, the implementations, by default, assign
the highest dimension being the most inner loop and the lowest dimension
being the most outer loop. Users can deﬁne their grid’s dimension order so as
this nested loop order matches with the system dynamic’s data re-use pattern,
which can potentially result in computation savings.

Fig. 4: Nested loop order that follows the linear memory map will take advantage of the
main memory’s spatial locality

123467891011121314151617i123467891011121314151617Linear memory mapjTitle Suppressed Due to Excessive Length

11

Fig. 5: Computation can be parallelized by applying the parallel primitive

Fig. 6: Each grid computation is assigned a thread for parallel computation

Another technique that can take advantage of the temporal locality of the
cache is blocking, which is not implemented by default since the blocking size
that can speed up the computation on diﬀerent machines vary diﬀerently. But
this can be easily implemented by users as HeteroCL allows loop transforma-
tions such as loop splitting, reorder, etc. through transformative primitives (in
a few lines of codes) without worrying about aﬀecting the implementation’s
accuracy.

4.2 Parallel threading (Algorithm 2)

One important characteristic of algorithm 2 is that each grid point, within the
same iteration, can be computed independently, and therefore in parallel. Note
that this parallelization of computation only applies to solve time-dependent
HJ PDE equations, which can be beneﬁcial to the acceleration of the compu-
tation greatly. In particular, each computation of algorithm 2 on a grid point
can be assigned a thread to it (shown in Fig. 6). In HeteroCL, this could be
done by applying the transformation primitive parallel to a loop computation
as shown in Fig.5.

Under this primitive is an implementation of multi-threading in C++ pro-
vided by the TVM framework. The general idea of this multi-threading imple-
mentation is that there is a pool of threads where each thread pops and assigns
itself a task (computation) from a task queue. The number of threads used is

Thread 1Thread 2Thread 3Thread 412

Minh Bui et al.

equal to the maximum number of hyper-threads available in the system. More
details about the implementation are available online in the HeteroCL code
base.

4.3 Alternating sweeping directions (Algorithm

1, 3)

This optimization is more algorithmic and less on the computer system level,
and is applied to in-place value updating. In our toolbox, this approach is used
in the implementation of value iteration algorithm and time-to-reach value
function. The main idea is that the traversing directions on a multidimensional
grid do not have to be ﬁxed and can be alternated in diﬀerent iterations until
convergence. This technique has been shown to compute time-to-reach value
function for 2D systems [10].

Fig. 7: Each grid iteration can have alternating traversing direction for each dimension

The beneﬁt of this optimization is that ﬁnal value results would typically
converge at a faster rate than iterating in a ﬁxed direction. As we go up the
dimensional ladder, the total number of diﬀerent possible alternating directions
increases exponentially. Because of that, for each implementation, we have a
total of 8 diﬀerent iterating directions.

5 Results

In this section, we ﬁrst compare the performance of optmizedDP against the
time-dependent HJ PDE implementation in ToolboxLS and BEACLS for vari-

ijijjjiiTitle Suppressed Due to Excessive Length

13

ous number of dimensions. These results are performed on a 16-thread Intel(R)
Core(TM) i9-9900K CPU at 3.60GHz.

Table 1: Performance against ToolboxLS and HelperOC

Dimensions
Grid points

3D
1003

4D
604

1st Order ENO scheme

5D
405

6D
256

OptimizedDP
MATLAB [6]
Speedup
Maximum diﬀerence

OptimizedDP
MATLAB
Speedup
Maximum diﬀerence

19 seconds
196 seconds
× 10
7.0×10−6

0.56 seconds
3.8 seconds
×7
1.4×10−6
2nd Order ENO scheme
0.7 seconds
12 seconds
×17
0.037

23 seconds
678 seconds
× 29
0.25

7 seconds

24 hours

223 seconds Not possible

× 32
1.4×10−6

N/A
N/A

10 seconds
754 seconds Not possible

1 day

× 75.4
0.1

N/A
N/A

Table 2: Performance against C++ BEACLS on CPU

Dimensions
Grid points

3D
1003

4D
604

5D
405

1st Order ENO scheme

OptimizedDP 0.56 seconds
1.5 seconds
×3

BEACLS
Speedup

19 seconds
244 seconds
× 13

0.72 seconds
4.84 seconds
× 6.7

OptimizedDP
BEACLS
Speedup

2nd Order ENO scheme
23 seconds
6420 seconds
× 279

0.7 seconds
3 seconds
×4

0.98 seconds
8.28 seconds
× 8.44

For 3D system example, we compute BRT for the following canonical pair-

wise Dubins Car’s system dynamics:

˙x = −va + vb cos θ + ay
˙y = va sin θ − ax
˙θ = b − a

(7)

where x, y, θ are the relative positions and heading, va and vb are the evaders
and pursuer’s velocity, a and b are the control input of the evader and pursuer
respectively. 3D plots of the BRT are shown in Figure. 8.

14

Minh Bui et al.

(a) Right side view (45 degree)

(b) Left side view

(c) Front view

(d) Right side view (90 degree)

Fig. 8: Sub-zero level set is the green surface shown in the plots

For 6D system example, we have the following system dynamics used for
computing tracking error bound of an underwater vehicle with disturbances
as deﬁned in [8]:

˙xα = ur + Vf,x(x, z, t) + dx − bx
˙zα = wr + Vf,z(x, z, t) + dz − bz

˙ur =

(( ¯m − m)Af,x(x, z, t)

1
m − X ˙u
− (Xu + X|u|u|ur|)ur + TA) + du

˙wr =

(( ¯m − m)Af,z(x, z, t)

1
m − Z ˙w
− (−g(m − ¯m)) − (Zw + Z|w|w|wr|)wr
+ TB) + dw

˙x = ur + Vf,x(x, z, t) + dx
˙z = wr + Vf,z(x, z, t) + dz

(8)

where x, z denote the vehicle position, ur, wr represent relative velocities be-
tween vehicle and water ﬂow, xα, zα denote relative position between tracker
and planner. The control inputs are TA, TB, planning inputs are bx, bz, and dis-
turbances are dx, dz, du, dw. The problem parameters are m, ¯m, X ˙u, Z ˙w, Xu, Xw,
X|u|u, Z|w|w. Contour plots of distances between the tracker and planner are
shown in Figure 9.

Title Suppressed Due to Excessive Length

15

Fig. 9: 2D contour plots of relative distances between the planner and tracker at diﬀerent
array indices and time. Each of the color on the vertical bar represents a distance value

Since there is no existing library that implements value iteration and al-
gorithm 3 for time-independent HJ PDE, we only compare a version of value
iteration written in pure Python, a commonly used language for reinforcement
learning and MDP, with optimizedDP’s implementation.

Table 3: Value Iteration for 3D grid

Grid points

25 × 25 × 9
OptimizedDP 0.17 seconds
42.4 seconds
× 249

Python
Speedup

40 × 40 × 20
0.45 seconds
315 seconds
× 700

50 × 50 × 30
0.98 seconds
773 seconds
× 789

It can be observed that as the problem size increases, the gap in per-
formance between optimizedDP and other existing implementations becomes
larger. This proves that our toolbox is better for working with high-dimensional
problems.

6 Limitation and future work

OptimizedDP toolbox is still a work in progress. Despite having better per-
formance in terms of computational eﬃciency, optimizedDP is still missing
some features that are available in other toolboxes. To make the toolbox more
complete, we plan on adding new features to the toolbox such as higher order

16

Minh Bui et al.

ENO scheme for derivatives approximation, more complex custom functions
such as interpolation that can be used within a heteroCL graph.

References

1. Chen, M., Tomlin, C.J.: Hamilton–Jacobi Reachability: Some Recent Theoreti-
cal Advances and Applications in Unmanned Airspace Management.
Annual
Review of Control, Robotics, and Autonomous Systems 1(1), 333–358 (2018).
DOI 10.1146/annurev-control-060117-104941.
URL https://doi.org/10.1146/
annurev-control-060117-104941

2. Chen, T., Moreau, T., Jiang, Z., Zheng, L., Yan, E., Cowan, M., Shen, H., Wang, L.,
Hu, Y., Ceze, L., Guestrin, C., Krishnamurthy, A.: Tvm: An automated end-to-end
optimizing compiler for deep learning (2018)

3. Courant, R., Friedrichs, K., Lewy, H.: On the partial diﬀerence equations of mathe-
IBM Journal of Research and Development 11(2), 215–234 (1967).

matical physics.
DOI 10.1147/rd.112.0215

4. Egorov, M., Sunberg, Z.N., Balaban, E., Wheeler, T.A., Gupta, J.K., Kochenderfer,
M.J.: POMDPs.jl: A framework for sequential decision making under uncertainty. Jour-
nal of Machine Learning Research 18(26), 1–5 (2017). URL http://jmlr.org/papers/
v18/16-300.html

5. Lai, Y.H., Chi, Y., Hu, Y., Wang, J., Yu, C.H., Zhou, Y., Cong, J., Zhang, Z.: Hete-
rocl: A multi-paradigm programming infrastructure for software-deﬁned reconﬁgurable
computing. Int’l Symp. on Field-Programmable Gate Arrays (FPGA) (2019)

6. Mitchell, I.: The ﬂexible, extensible and eﬃcient toolbox of level set methods. J. Sci.

Comput. 35, 300–329 (2008). DOI 10.1007/s10915-007-9174-4

7. Osher, S., Shu, C.W.: High-order essentially nonoscillatory schemes for hamilton–jacobi
equations. Siam Journal on Numerical Analysis - SIAM J NUMER ANAL 28 (1991).
DOI 10.1137/0728049

8. Siriya, S., Bui, M., Shriraman, A., Chen, M., Pu, Y.: Safety-guaranteed real-time tra-
In: 2020 59th

jectory planning for underwater vehicles in plane-progressive waves.
IEEE Conference on Decision and Control (CDC), pp. 5249–5254 (2020). DOI
10.1109/CDC42340.2020.9303858
9. Tanabe, K., Chen, M.: Beacls

Available at https://github.com/

(2021).

HJReachability/beacls

10. Yang, I., Becker-Weimann, S., Bissell, M.J., Tomlin, C.J.: One-shot computation of
reachable sets for diﬀerential games. In: Proceedings of the 16th International Confer-
ence on Hybrid Systems: Computation and Control, HSCC ’13, p. 183–192. Association
for Computing Machinery, New York, NY, USA (2013). DOI 10.1145/2461328.2461359.
URL https://doi.org/10.1145/2461328.2461359

