A Generic Bundle Forwarding Interface

Felix Walter

D3TN GmbH
Dresden, Germany
<ﬁrstname>.<lastname>@d3tn.com

2
2
0
2

p
e
S
2
1

]
I

N
.
s
c
[

1
v
9
3
0
5
0
.
9
0
2
2
:
v
i
X
r
a

Abstract—A generic interface for determining the next hop(s)
for a DTN bundle is a valuable contribution to DTN research and
development as it decouples the topology-independent elements
of bundle processing from the topology-dependent forwarding
decision. We introduce a concept that greatly increases ﬂexibility
regarding the evaluation and deployment of DTN forwarding and
routing techniques and facilitates the development of software
stacks applicable to heterogeneous topologies.

I. MOTIVATION

A universal deployment of Delay- and Disruption-tolerant
Networking (DTN) will consist of a huge number of diverse,
heterogeneous (sub-)networks, such as networks with:
• persistent low-latency end-to-end connectivity,
• short or long-latency, asymmetric or unidirectional, but

precisely-scheduled contacts between the nodes,

• probabilistic encounters (e.g., if nodes move somewhat
randomly but stay in local vicinity most of the time),

• or totally random connectivity.

Further variations of these characteristics can be imagined.
To prevent the need to develop specialized implementations
of the DTN protocols for every (sub-)network, we advocate
for a ﬂexible interface attached to common core infrastructure.

II. GENERIC INTERFACE CONCEPT

As sketched in Figure 1, our concept introduces a dedi-
cated component integrating with the Bundle Protocol Agent
(BPA), which we call the Bundle Dispatcher Module (BDM).
Communication occurs via a network or IPC socket using a
low-overhead data exchange format with wide compatibility
such as Protobuf or Cap’n Proto.

A. Event-based Bundle Processing

To achieve a loose coupling of the components and in-
creased ﬂexibility with respect to the BDM implementation,
the interface leverages an event-based approach: The BPA
posts information about changes in connectivity, bundles that
require a forwarding decision, bundles expiring, etc. via a
publish-subscribe interface. A module subscribing to these
events can then decide a) whether or not to act on them and
b) invoke behavior to realize the forwarding decision. This
approach further provides the ﬂexibility to attach multiple
subscribers beside the BDM, e.g., for monitoring purposes.

To pass information about bundles to the BDM, a Bundle
Metadata data structure is deﬁned, containing the bundle
headers, extension blocks, and further metadata like times-
tamps, but excluding the payload for performance reasons.

Fig. 1. High-level overview of the Bundle Dispatcher Module concept as
extension to Figure 2 from the DTN Bundle Protocol speciﬁcation, RFC
9171 [1]. The concept will be implemented in µD3TN [2].

B. Bundle Processing Actions

As counterpart to the event-based information ﬂow from the
BPA to the BDM, a Remote Procedure Call (RPC) mechanism
is provided by the BPA, which offers functions for updating
the stored bundles and associated forwarding decisions. In
this context, we propose to attach a list of Bundle Processing
Actions to each bundle, that deﬁnes in-order what should be
done next with the given bundle and can be updated by the
BDM. At least two actions must be supported by every BPA:
• SendTo(node): Forward the bundle to the speciﬁed next-
hop node. Note that this action may occur multiple times
or contain a multicast identiﬁer.

• Drop: Remove the “Forward pending” retention con-

straint if the previous action was successful.

This list can get implementation-dependent extensions, e.g.,
actions to fragment bundles, control their storage, and so on.
Like in some Software-Deﬁned Networking implementations,
there might be a function to query the supported actions for
announcing such extensions in a straight-forward manner.

The BPA executes the action lists beginning with the bundle
that was updated ﬁrst, which allows the BDM to control the
order of bundle forwarding. It should be noted that an empty
action list is a valid state: In this case, the BPA will keep
the bundle in memory until its lifetime expires or the BDM
triggers an update on the action list. For maximum ﬂexibility,
the action list can have a conﬁgurable default assigned to
bundles upon reception, thus, even allowing BPA operation
without a dedicated BDM in simple cases (e.g., if there is a
persistent “default gateway” contact).

Bundle Protocol Agent(BPA)CLABundle Dispatcher Module (BDM)CLACLAsApp. AgentRouting AlgorithmRouting Algo.Config e.g. Contact PlanEventsBundle Handling InstructionsBundlesADUsPersistent Storage 
 
 
 
 
 
C. BPA-BDM Interaction

The two complementary mechanisms provide for a ﬂexible
interaction between BPA and BDM and the implementation
of basically arbitrary forwarding techniques. Figures 2 and 3
depict how two possible example cases would be handled.

Fig. 2. Example sequence diagram for injecting a new Application Data
Unit (ADU) addressed to node Z for which the next hop is node Y, assuming
opportunistic single-copy forwarding in the BDM (simpliﬁed).

Fig. 3. Example sequence diagram for receiving and forwarding a bundle
addressed to node Z for which the next hop is node Y, assuming contact-based
routing in the BDM (simpliﬁed).

D. Inter-BDM Communication

Some forwarding techniques require the exchange of spe-
ciﬁc data, e.g., PRoPHET [8] needs to distribute delivery
predictability values between nodes. A BDM implementation

has three options to exchange such data: a) attach it to bundles
as extension blocks (the used metadata structure contains
them), b) inject bundles on its own by registering as a BP
application, or c) use an independent mechanism or channel.

III. RELATED WORK
The presented concept enables a DTN software stack
that can adapt to heterogeneous topologies, for which some
alternative approaches exist. DTN2 [3] implements bundle
forwarding in dedicated C++ classes that can be triggered
by over 60 different events and can access the bundle data
structure in memory. The Interplanetary Overlay Network
(ION) [4] consists of multiple daemons that access a shared
data structure. The forwarding decision is made in a separate
daemon, which is chosen depending on the destination end-
point scheme. ProgDTN [5] is a novel approach executing
a JavaScript program from within the BPA that represents a
function returning the forwarding decision and can be ﬂexibly
exchanged. Overall, however, none of these implementations
provides as much ﬂexibility to implement and exchange the
forwarding component as the approach introduced here.

IV. SUMMARY AND OUTLOOK
This paper outlined a clean, low-overhead, event-driven
socket interface to support a dedicated bundle forwarding
component that can be ﬂexibly exchanged and, thus, provides
adaptability to heterogeneous topologies. At the time of writ-
ing, a combined Rust (of the BPA) and Python 3 (of the BDM)
implementation in µD3TN [2] is almost complete and the inte-
gration of techniques such as Schedule-Aware Bundle Routing
(SABR) [6] and IP-based Neighbor Discovery (IPND) [7]
is ongoing. The pending evaluation of this interface will be
based on an extended ﬁeld test using drones and a satellite
link to emulate a heterogeneous DTN internetwork.

ACKNOWLEDGMENTS
The presented concept stems from a long series of dis-
cussions in which most of the team at D3TN was involved.
Speciﬁcally, without the extensive contributions of the follow-
ing people, the concept would not be as advanced: Marius
Feldmann, Juan Andres Fraire, Tobias Nöthlich, and Georg
Alexander Murzik. The concept is developed as part of the
REDMARS2 project that is funded by Germany’s Federal
Ministry of Education and Research (FKZ16KIS1356).

REFERENCES

[1] S. Burleigh et al., “Bundle Protocol Version 7,” RFC 9171, IETF, 2022.
[2] “µD3TN,” [online] Available: https://d3tn.com/ud3tn.html.
[3] “DTN Reference Implementation (DTN2),” [online] Available: https:

//github.com/delay-tolerant-networking/DTN2.

[4] “Interplanetary Overlay Network (ION),” [online] Available: http://

sourceforge.net/projects/ion-dtn/.

[5] M. Sommer et al., “ProgDTN: Programmable Disruption-tolerant Net-
working,” in International Conference on NETworked SYStems, Online,
2022. Available: https://dtn7.github.io/assets/sommer2022progdtn.pdf
[6] “Schedule-Aware Bundle Routing,” CCSDS 734.3-B-1, Washington,

DC, USA, 2019.

[7] D. Ellard et al., “DTN IP Neighbor Discovery,” Internet-Draft, IRTF,
2015. https://datatracker.ietf.org/doc/html/draft-irtf-dtnrg-ipnd-03
[8] A. Lindgren et al., “Probabilistic routing protocol for intermittently

connected networks,” RFC 6693, IRTF, 2012.

AppAgentAppAgentBPABPABDMBDMCLA_ACLA_ANew link to node YEvent: LinkUP(Y)Send ADU #1 to ZCreate Bundle #1Event: Bundle(Metadata #1)Next hop for #1 is YSet actions for #1to [SendTo(Y), Drop]Send Bundle #1 to YTX success for Bundle #1Delete Bundle #1CLA_ACLA_ABPABPABDMBDMCLA_BCLA_BNew link to node WEvent: LinkUP(W)Bundle #2 receivedEvent: Bundle(Metadata #2)Next hop for #2 is Y,schedule Bundle for contactNew link to node YEvent: LinkUP(Y)Set actions for Bundle #2to [SendTo(Y), Drop]Send Bundle #2 to YTX success for Bundle #2Delete Bundle #2