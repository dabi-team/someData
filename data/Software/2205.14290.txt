2
2
0
2

y
a
M
8
2

]

Y
C
.
s
c
[

1
v
0
9
2
4
1
.
5
0
2
2
:
v
i
X
r
a

Building net-native agreement systems

Joshua Z. Tan and Luke V. Miller

May 2022

Abstract

Agreements and contracts are everywhere, but they are built on layers
and layers of legal and social institutions. Software is slowly entering
into this stack. In this article, we introduce agreement paths, a general
model for understanding and decomposing digital agreement systems, and
Agreement Engine, an open-source software service for building net-native
agreement systems. We demonstrate Agreement Engine by building two
example agreement systems: Scarce Knowledge, an app for crowdfunding
essays, and Twitter Social Capital, a bot that allows users to form and
enforce Twitter agreements.

1

Introduction

Agreements are the building blocks of modern societies. Whenever you want to
work with other people—whether it’s starting a business, building open-source
software, or slaying a (virtual) dragon—you will need to ﬁrst form an agreement
with those people to communicate expectations, safeguard rights, or divvy up
rewards. When we change the agreements that people can form, for example
through policies that aﬀect communication technology, social trust, or the rule
of law, we change the kinds of economies and politics that people produce.

But what determines the agreements that people can form? Or, to put it an-
other way: for a given kind of agreement (legal, informal, computational, etc.),
how can we build systems for authoring and enforcing such agreements? Such
agreement systems range widely: from a state’s business registration process,
to the small claims court system, to the Ethereum smart contract system, to
the guild systems of online games like World of Warcraft or EVE Online, to
informal systems of agreement that govern everything from bazaars to traﬃc
circles.

In this article, we introduce agreement paths, a general formalism for mod-
eling agreement systems, and Agreement Engine, a software service for building
net-native agreement systems. In doing so, we emphasize (1) the growing im-
portance of agreement systems that are implemented partially or wholly online
and (2) the beneﬁts of a more rigorous and interoperable framework for engi-
neering such systems. We also present two experimental agreement systems,
Scarce Knowledge and Twitter Social Capital, built using Agreement Engine.

1

 
 
 
 
 
 
Finally, we contextualize our contributions within the larger project of building
net-native agreement systems and close out with a discussion of the user expe-
rience of legal contracts compared to smart contracts or informal agreements.

2 Background and related work

What do the following have in common?

1. A signed rental contract

2. A one-line email: “cool, meet you at 9pm outside the bar”

3. A (multi-party) smart contract

4. A bid on eBay

5. A video of two people exchanging nods

Answer: they are all manifestations of mutual assent, a.k.a. agreements.
Mutual assent is just a piece of jargon that means “we agree”—it’s an abstract
relation (what the law calls a ‘meeting of the minds’) between two or more
subjects that share a common intention or belief. Agreements are manifestations
of mutual assent, meaning that they bear witness to the claim that a common
intention or belief exists [1]. To put it another way: every agreement constitutes
evidence of mutual assent, though not every such agreement is thereby made
enforceable.

Many agreements also incur obligations, where an obligation is an action
that one has to do. These obligations usually assume certain mechanisms for
enforcement, where enforcement is the act of compelling compliance with an
obligation. For example: an email thread between two friends agreeing to meet
at a bar (1) is explicit evidence of mutual assent and (2) creates a social obliga-
tion to meet at said bar where (3) the obligation to show up is enforced by an
implied social norm: don’t break promises to friends or you’ll lose your friends
and/or be reputed as a ﬂake. A bid on eBay, on the other hand, (1) is evi-
dence of the bidder’s agreement to buy the item at that price and (2) creates an
obligation to pay the seller at that price if they win the auction where (3) that
obligation is presumptively legally enforceable (4) either through eBay’s auto-
mated escrow system or through eBay’s (less-automated) unpaid item policy.
[2]

This (1)-(2)-(3) pattern of agreement-obligation-enforcement is extremely
common in society and in the law. We call this pattern a contract system, and
we call agreements that ﬁt this pattern contracts. There is substantial the-
oretical and empirical work on contract systems within comparative law [3],
contract law [4], philosophy [5], and economics [6], mostly focusing on national
legal contract systems. Social scientists have also studied informal agreement

2

systems—informal only in the sense that they do not directly involve a court sys-
tem—through an institutional lens. [7] And most recently, smart contract sys-
tems—systems of agreements automatically enforced through code—have ma-
tured from early conceptual models [8] into large, blockchain-based platforms
such as Ethereum [9] and Cosmos [10].

In what follows, we will focus on a number of features shared between tradi-
tional legal contract systems, informal agreement systems, and smart contract
systems.

Term
Agreement
Obligation
Enforcement
Contract
Contract system
Legal contract

Smart contract

Informal agreement

Joint account
Registration

Authentication

Deﬁnition
A manifestation of mutual assent between a number of parties
An action that one has to do
The act of compelling compliance with an obligation
An agreement that creates an obligation with an enforcement mechanism
A system for creating and enforcing contracts
An agreement recognized and enforced by the state, typically through a system
of laws, courts, and enforcement agencies
An agreement written in code and enforced by a technical system such as a
virtual world or blockchain
An agreement not intended to be enforced through a legal or technical
mechanism1 but instead through social norms, reputational incentives, and/or
extralegal means that do not depend on a formal institutional enforcement mech-
anism
A digital representation of an n-person agreement, akin to a user account
The process of recording or representing a completed agreement and related data,
usually by a qualiﬁed authority
The process of checking the data, status, and/or registration of an agreement,
usually by an enforcement mechanism

Table 1: A glossary of the many terms in this paper.

3 Modeling agreement systems

Imagine that you are driving through the streets of Delhi. A worn-down yellow
tuk-tuk beeps; you slow, and it merges in front of you. At the next stop light, you
wince as a big garbage truck rumbles to a stop just behind your back window.
A young chai wallah weaves through the cars with a tray of plastic cups; you
wave him over and trade him a few rupees for a cup. The tuk-tuk ahead of you
moves on; you accelerate too, swerving past a bicycle vendor on the corner, and
turn onto a crowded traﬃc circle. As you inch forward, a red hatchback edges
up at the next turn, signaling right. You slow, graciously; the hatchback moves
gingerly up until it works up the courage and enters ahead of you into the wide
stream of cars heading downtown.

Every day, we negotiate agreements with each other. We signal; we gesture;
we infer; we agree; we act.
It is second nature to us. Most of these rich
interactions do not produce well-deﬁned artifacts in the form of enforceable

1Informal agreements can include very explicit terms and consequences, and some are
actually more diligently enforced than any formal contract, e.g. a loan shark’s “if you don’t
pay me back, I’m going to beat you up”. The diﬀerence is that there is no formal institutional
structure or system for enforcement.

3

contracts. But most do take place within systems that support and facilitate
them, systems that have a passing resemblance, if you stare at them closely, to
more formal systems like the courts. Our goal in this section is to understand
and characterize some of these similarities.

We present agreement paths, a formalism for modeling systems of agreements
that abstracts over the content and type of an agreement. While agreement
paths are general enough to apply to many types of agreements, they are not
intended to be a general analytic instrument for scholars of agreements in philos-
ophy, economics, or law. Agreement paths are intended to highlight the elements
of an agreement system that can be digitized. Our goal is not to present a general
model for analyzing or classifying agreement systems but to model the compo-
nents that are present in digital agreement systems like DocuSign Agreement
Cloud, Ethereum, Aragon Court, or Kleros. This way we can more easily (1)
recognize these digital agreement systems when they occur on the internet, (2)
amend these systems as we amend institutions for agreement in the real world,
(3) identify the places where digital processes can enter into oﬄine agreement
systems, and (4) build more modular and “swappable” agreement systems.

Every agreement path can be broken down into six stages: authoring, regis-
tration, execution, authentication, appeal, and enforcement. An authoring pro-
cess allows parties to negotiate and author agreements with each other. A
registration process records the data pertaining to an completed agreement, of-
ten including the agreement’s identity, content, parties, and status along with
secondary authentication data (e.g. the name of a witness). Once registered,
the agreement is executed or enacted by the parties to the agreement. During
execution, a party may trigger an appeal to exit the execution process for what-
ever reason (this external appeals process should be distinguished from actions
deﬁned within the content of the agreement for resolving disputes).2 Following
an appeal, an authentication process veriﬁes the data, validity, and/or regis-
tration status of an agreement. Finally, an enforcement process interprets the
content of an agreement, often but not always with accompanying evidence, in
order to enforce its execution or compensate for any outstanding obligations.
See Figure 1.

Figure 1: The six stages of an agreement path.

2An appeal (or the right to appeal) is a part of the meaning of the agreement that is

independent of the “content” of the agreement. It is enabled by the agreement system.

4

ExecutionAuthoringRegistrationEnforcementAuthenticationAppealFor example, Alice and Bob might negotiate the terms of an employment
contract over email, trading versions back and forth (authoring). Once they
are both satisﬁed, they convert the ﬁnal agreement to a PDF and each sign it
digitally, trading the signed and counter-signed copies over email (registration).
With the contract signed, Bob begins working for Alice, and in return Alice
pays Bob a salary, as per the contract (execution). At some point, Alice stops
paying Bob and stops responding to calls or email; Bob is forced to ﬁle a lawsuit
to get back his wages (appeal). As part of this lawsuit, he appends copies of
the emails and the signed employment contracts (authentication). The lawsuit
enters the legal system. A small claims court rules against Alice, who does not
show up to contest the lawsuit, and orders Alice to pay Bob (enforcement) by
sending a letter to Alice’s last-known address. Alice does not respond to the
letter, at which point the trial court issues a contempt order for Alice to be
arrested (appeal).

Figure 2: A simple employment contract negotiated over email and enforced via
a trial court.

Not all agreement paths are as straightforward as the one above.
For example, Ghost Knowledge [11] is a website that allows people to crowd-
fund “bounties” for speciﬁc authors or researchers to write essays. Once pledges
go past a certain threshold, Ghost Knowledge messages the authors on social
media, who then either accept or reject the bounty; if they accept, the money
is put into an escrow account to be released once the essay is published.

5

Pay salaryEmailDigital signature (pdf), emailCourt letterAppend emails, signed pdfsLawsuitContempt orderPolice arrestWarrant systemFigure 3: The agreement path of Ghost Knowledge, a website for crowdfunding
written essays.

Ghost Knowledge was built and released using no-code tools including Airtable,

PayPal, and the Twitter API. A substantial portion of the author interactions
involved manual messaging by the founders.
[12] We will come back to Ghost
Knowledge in the next section, when we recreate a version of it using the Agree-
ment Engine tool.

6

Twitter handleEmail addressEssay contentIdeal authorPledged contributionCollect pledge funds via PayPalCreate request recordReach out to authorCheck Airtable record$500 ReachedIf author fails to write the essayAdd to fundraising recordTwitter handleEmail addressSupported requestPledged contributionAuthor acceptsAuthor rejectsWebsite request formWebsite pledge formAuthor contactedAuthor submits essay to GKAuthor writes essayUpdate AirtableGK remitsGK pays funds to authorGK refunds pledgesScope
Authoring

Registration

Execution

Appeal

Authentication

Enforcement

Deﬁnition
An authoring process allows end-users to negotiate
and author agreements with each other.
The process of recording or representing a com-
pleted agreement and related data, usually by a
qualiﬁed authority
A special layer of the enforcement process related
Includes things
to the content of an agreement.
such as enactment, delivery, and any number of
triggers speciﬁed in the content of the agreement,
e.g. revisions, termination clauses, and so forth.
A process that triggers an authentication and en-
forcement process. Appeals can be pre-speciﬁed
within an agreement, but they always call an ex-
ternal process that is not speciﬁed in the agreement
itself.
The process of checking the data, status, and/or
registration of an agreement, usually by an enforce-
ment mechanism
An enforcement mechanism interprets the content
of an authenticated agreement, often (but not al-
ways) with accompanying evidence, in order to en-
force or compensate for any outstanding obliga-
tions.

Examples
Ghost knowledge negotiation (No-
code form + Twitter DMs)
Signing a physical document, click-
ing accept on a digital form

Payment, sending of goods, execu-
tion of contract calls

Communication between parties to
revise a contract.
an adjudication
Non-example:
clause speciﬁed in the contract
itself.
Admission of evidence in a court-
room,
on
YouTube
justice system,
Kleros jury, U.S.
moderator intervention on a social
media platform

reporting

video

a

Table 2: Deﬁnitions of the stages of an agreement path.

Figure 4: Additional examples of the key processes in an agreement system:
authoring, registration, execution, appeal, authentication, and enforcement.

7

Gesture or speechWritingEmail, Slack, Zoom, or any communication technologyMS Word, Google DocsTwitterBlockchainSmart contract frameworks, e.g. Ethereum, Aragon, PolicyKitSignaturesPDF signatures + verified email accountsNotary publicDigital signature platforms, e.g. DocuSign or HelloSignAgreement EngineBlockchain authentication protocolSmart contract compiler; wallet credentialsAuthoringAuthenticationRegistrationSignaturesPDF signatures + verified email accountsNotary publicDigital signature platforms, e.g. DocuSign or HelloSignAgreement EngineBlockchain authentication protocolSmart contract compiler; wallet credentials[GRAPHIC of authoring vs enforcing platformse.g. Google Docs, Ethereum, Twitter, or any social platforme.g. your neighborhood council, a state court, Kleros, or a specific online community or DAOKleros enforcement: one of the parties must put some money into an escrow account whose contents are controlled by the jury.]Signed contractsNotarized contractsDigitally-signed contractsJoint accountsHosted smart contractShared mental stateChat transcriptVideo recordingsPDFText (document)Tweet threadBlockchain stateSmart contract codeagreement contentidentifying infoLegal (e.g. courts)Financial penalties, e.g. through escrowTSC penaltyCode-based enforcementForce / violenceEnforcementSigned contractsNotarized contractsDigitally-signed contractsJoint accountsHosted smart contractauthenticated contractOther processes, e.g. collection, discovery, etc.Agreement PathModeling agreement systemsTraffic circleMental state-License plateLicense plate scannerPolice stopArrestBusiness registration systemForm provided by state gov’tForm + articles of incorporation (written contract)Department of State internal processBusiness name, address, officers, ID numberQuery the state’s corporation registryLegal corporationCourt systemSmall claims courtWriting, word processing softwareWritten contractSign, e-sign, and/or use notary publicSigned contractSignature analysis, other evidence, or testimony (of notary or witnesses)Legal contractCourt systemDocuSign Agreement CloudDirect upload, or CRM integratorWritten contractDocuSignDocuSign database internal IDDocuSign login + queryLegal contractTriggered processes,court systemEthereum smart contracts + KlerosSoliditySmart contractRegister wallet/address, fund it, then deploy code at addressWallet private keyVerify wallet ID + gas feeLive smart contractCode-based enforcement, or Kleros escrowBlockchain consensus protocolGeneral-purpose programming languageConsensus protocol + first blockInitialize validating nodes and run the protocolNew transactions / next block + node IDsConsensus algorithmValidated blockUpdated blockchain stateWebsite identity system-UserAccount registrationUser account informationLogin process, including passwords, 2FA, etc.Verified user identity, e.g. expressed in a cookieLogged-in website functionalityTwitter Social CapitalTweet to @agreementengineTweet threadStore in databaseTwitter accountQuery databaseTSC contractTSC systemScarce KnowledgeCustom Web UIWritten agreementStore in databaseSubmitted essay and metadataQuery databaseReport submittedDev team interventionevidence relevant to agreementExecutionAppealtriggertriggerdispute info4 Constructing and composing agreement paths

Agreement paths, on their own, are a conceptual model intended to support the
composition and substitution of diﬀerent processes within agreement systems.
In this section, we present Agreement Engine, a software tool for building net-
native agreement systems. Agreement Engine implements the agreement path
model.

To be clear, Agreement Engine itself is neither a system for authoring in-
dividual agreements nor a system for enforcing them. However, it has built-in
interfaces with existing authoring and enforcement systems.

4.1 Agreement processes

From a top-down perspective, each agreement system created in Agreement
Engine can be considered a state machine composed of many processes. Each
process represents a distinct and independent service: authoring, registration,
authentication, and so on. Within a given path, not all processes need to be
computational, as long as they have a formal representation. When a process is
active, all data input to the agreement is routed to it for processing. The process
can then decide to wait for additional input, transition to another process, or
terminate the agreement. Processes can also take action immediately when
they are activated or right before the process ends, instead of asynchronously
upon receiving input. Using this method, we can chain discrete processes into
agreement paths which exhibit more complex behavior.

In our archetypical agreement system model, this starts with an Authoring

process and ends with an Enforcement process.

8

Figure 5: Diagram of a single agreement instance and connected systems

4.2 Agreement interfaces and instances

Within Agreement Engine, agreement paths are high-level data structures that
model a single agreement system along with an arbitrary number of agreements
authored within that system. Paths can manage processes by keeping track
of which process is currently active, handling state transitions, and providing
access to each agreement’s private data model. Agreement paths also ﬁlter and
redirect agreement input and output via a set of agreement interfaces. Interfaces
ﬁlter incoming data from various sources so that it can be preprocessed and
routed to the correct agreement instance (or used to create a new agreement
instance). As seen in Figure 5, a single instance of an agreement path, or simply
referred to as an agreement instance, acts as a passthrough for the currently-
active process. It allows the agreement to be viewed as a single object from
the outside, while facilitating more complex decision-making from the inside.
Each agreement instance has its own state and data model in order to track the
path it is associated with, the stage within that path, and any additional data
relevant to its execution. Paths can manage any number of agreements, as seen
in Figure 6.

9

Agreement PathProcessProcessProcessProcessProcessInterfaceInterfaceData ModelInterfaceFigure 6: Diagram of a server with multiple paths and active agreements

4.3 Agreement servers

Agreement servers allow for multiple paths (and thus multiple agreement in-
stances) to be run at the same time. The server receives requests and routes
them to the corresponding path where the interfaces decide which agreement
instance should receive the data. This system allows for arbitrary data to be
handled, whether it’s from a local process, a webhook, or another web server.
The server provides the infrastructure for agreements to connect to the internet
and interface with other platforms and software. For example, suppose we have
a server running on a web server with the domain name “myagreements.com.”
We could conﬁgure a new agreement path called “Employment” for managing
employment contracts. Now our agreements can receive data sent to “mya-
greements.com/Employment” via REST API calls from other applications, or
webhooks from platforms such as Twitter or Slack.

10

Agreement PathInterfaceInterfaceInterfaceProcessProcessProcessProcessProcessRouteServerAgreement PathInterfaceInterfaceInterfaceProcessProcessProcessProcessProcessRouteWebserverTwitterMetagovTSCAgreementAgreementAgreementAgreementAgreementAgreementAgreementAgreement4.4 Example: Scarce Knowledge

Figure 7: The agreement path for Scarce Knowledge

Let’s look at an example agreement system built using Agreement Engine. This
demo, which we call Scarce Knowledge, recreates a version of the Ghost Knowl-
edge platform that we described in the previous section. Figure 7 shows the
agreement path of this version. Requests to Scarce Knowledge are initiated by
a user-facing website with a simple form that forwards data to Agreement En-
gine. Once pledged contributions surpass $500, a process transition is triggered.
This is done via a Twitter interface that sends a direct message to the requested
author. The next few processes return to the website to handle ﬁnal essay sub-
mission. Finally, an email automation service is called to forward the essay to
those who supported it. By using Agreement Engine, we were able to manage
a complex decision-making process with several approval steps that span a user
facing frontend, Twitter, and a mail automation service. In a production im-
plementation this would also include PayPal integration. Figure 8 below shows

11

Twitter handleEmail addressEssay contentIdeal authorPledged contributionMaintenanceAuthoringOutreachResolution$500 ReachedCompletionFundraisingTwitter handleEmail addressSupported requestPledged contributionAcceptedRejectedWebsite FormWebsite FormAuthor ContactedAuthPledge Funds CollectedPayPal (Simulated)Author Writes EssaySubmitted to WebsiteAuthFunds Disbursed (Simulated)Registrationpart of the user interface ﬂow for this agreement path implementation using a
simple website and Twitter direct messages.

4.5 Example: Twitter Social Capital

Let’s look at another example agreement system implemented in Agreement En-
gine. Twitter Social Capital (TSC) is a Twitter-based agreement system that
allows users to register and enforce agreements with each other by tweeting at
the @agreementengine bot. New agreements are authored by tagging another
user and using the keyword “agreement” Users can then reply to the tweet with
“upheld” or “broken” to indicate the status of the agreement. If users disagree
on the outcome they are given the chance to change their responses and come
to a consensus. Finally, the bot publicly records the result of the agreement. As
seen in Figure 9, by using Agreement Engine we were able to create a branching
and looping control ﬂow to resolve disputes and only terminate when an agree-
ment is reached. This example uses an interface to the Metagov Gateway to
send and receive tweets. The technical details of interfaces are discussed later,
but this implementation demonstrates the ﬂexibility of Agreement Engine in
integrating with other platforms.

12

Figure 8: User interface diagram for “Scarce Knowledge”

13

Figure 9: The agreement path for Twitter Social Capital (TSC)

14

User tweets "agreement" and tags another userAuthoringRegistrationExecutionUser replies "upheld" or "broken" in the threadDisputeResolutionBot notifies users of disputeEnforcementAgreementBot publicly announces the outcome of the agreementFigure 10: Example tweets from the TSC Twitter bot that we built using the
Agreement Engine.

15

Feature

Notary public

Supports authoring

No

Yes
No

For legal consumption
For consumption by online
community
Many enforcement mecha-
nisms
Many authoring platforms No
No
Includes
process for enforcement

decision-making

No, just the law

through Gen and

DocuSign Agreement
Cloud
Yes,
other integrators
Yes
No

Kleros
or
Agreements
No

Aragon

No
Yes

No, just the law

No, just escrow

Some, e.g. Salesforce
No

No, just Ethereum
Yes, digital jury

Table 3: Comparison of diﬀerent registration services.

5 Using the Agreement Engine library

When creating an agreement system using the Agreement Engine Python li-
brary, there are three main components that should be considered: the server,
paths, and interfaces. Let’s construct a simple agreement to explore how this
works.

class MyInterface(Interface):

def filter(self):

return True

def match(self):

return self.new_agreement()

Figure 11: Example interface code

First we need to deﬁne an interface. This is how a path decides whether
incoming data should be routed to an existing agreement or a new one should
be created.
In the example code above, we create an interface that handles
all input, and always creates a new agreement. Real applications will decide
when diﬀerent interfaces should govern input data, and how to match existing
agreements. For example, the Scarce Knowledge example uses two interfaces to
communicate with the user facing web server and the Twitter API.

16

class MyPath(AgreementPath):

class Authoring(AgreementProcess):
def on_receive(self, data):

self.model.set('data', 'received', data)
self.path.terminate()

interfaces = [

MyInterface

]

init = Authoring

Figure 12: Example agreement path code

Next we deﬁne our agreement path, this is the primary structure that rep-
resents our agreement system. It will contain all of our processes and deﬁne
the path that an agreement takes through them.
In this example we have a
single authoring process that records the data we received to the agreement’s
data model (a simple JSON format with diﬀerent ﬁelds) and then terminates.
We also set up the interfaces that the path is using, and the initial process
that a new agreement will start in. Paths can implement more complex logical
ﬂow such as branches or loops. Our example paths use four processes that can
terminate early upon detecting invalid data inputs.

server = Server('db.json')
server.add_path(MyPath)
server.run()

Figure 13: Example server code

Finally we create the server that actually receives and sends requests. All
we need to do is deﬁne a JSON ﬁle to store our agreement data and add our
paths. Servers can support any number of paths, as long as they have unique
names. Each path will receive a unique API URL for receiving requests. The
URL for a path on a local server will look like http://127.0.0.1/MyPath.

6 The challenge of composition and re-use

One of the ﬁrst lessons we learned was that enforcement mechanisms, or any
agreement process, are not as hot-swappable as we would like to think that
they are. The Agreement Engine Python library supports reusing processes by
“transplanting” them from existing agreement paths into new ones, allowing us

17

to build up a library of quickly usable processes, but there are some limitations.
When modeling these systems conceptually, we can abstract away from the exact
data being passed around by diﬀerent functions, but in order to implement the
system in software, we need to explicitly state what data is being stored in an
agreement, accessed in diﬀerent processes, or passed to external functions. But
this data resists standardization.

To see the problem, imagine a simple example where we want to swap the
authoring processes of Scarce Knowledge and TSC. Scarce Knowledge receives
new agreements via form submission on a website, while TSC receives new
agreements by tweeting at the @agreementengine account. These two methods
are both simple and have the same output types (agreements), but problems
emerge if we attempt to swap them. The TSC agreement system works by
reading tweets that reply to a root tweet, using it to identify unique agreement
interactions, and all interactions remain on Twitter. On the other hand, Scarce
Knowledge ties together a few diﬀerent platforms: a simple website, Twitter
direct messages, and an email plugin, and the actual content of the agreement
has to be synthesized from these platforms. In other words, it is hard to design
processes to be completely disentangled from the ones that come before or after
them.

Here we come to one of the fundamental tradeoﬀs: immediate ﬂexibility vs
long-term interoperability. Currently, Agreement Engine provides useful soft-
ware abstractions including the interface and path model which make it easy to
set up simple agreement systems. Users don’t have to worry about the details of
how the web server functions, or how to get data to speciﬁc agreements. Instead
they can focus on the actual logic of the agreement, and what decisions should
be made based on the incoming data. In future versions of Agreement Engine,
we want to introduce similar software abstractions to path composition—i.e.
other words, we want to standardize the interfaces and possible interactions
between agreement stages. From a systems perspective, we believe that the
beneﬁt of interoperability between diﬀerent agreement paths is more important
than preserving the short-term ﬂexibility of being able to code whatever logic
one likes.

7 Discussion

The ﬁrst version of Agreement Engine was a net-native service for registering
net-native agreements, especially on Twitter, and in a way it still serves that
purpose.3 It only evolved into a tool for implementing agreement systems as we
tried to navigate the diﬃculties of creating, testing, and swapping net-native
enforcement mechanisms for these agreements.

3There is a subtlety here. Within any agreement path there will be a registration process
that tracks whether something is an agreement. This registration may store the tracking
data anywhere, including outside of the Agreement Engine. However, for practical purposes
an agreement path also needs to represent and track the state of an agreement as it passes
between stages. So, in eﬀect, Agreement Engine functions as a registration service.

18

We discussed the swapping problem above. But engaging with agreement
systems has also led us to a range of more social and less technical questions.
Would diﬀerent systems for agreement foster new solutions to persistent coor-
dination and collective action problems? How do we reason about the tradeoﬀs
between these systems? And by better understanding the properties and aﬀor-
dances of such systems, could we generate new kinds of agreements with novel
properties and aﬀordances? And on the practical side: who will be the ﬁrst
users of something like Agreement Engine?4

Our approach to engaging with these questions is empirical—through more
experiments and better experiments. After all, Agreement Engine is ultimately
a tool for generating and experimenting with new agreement systems. Here are
some other agreement systems that we would (eventually) like to build with it:

1. A Twitter agreement, enforced by staking one’s reputation on Reddit

2. A Markdown ﬁle with a code of conduct hosted on GitHub, enforced by a

GitHub Group’s owner

3. A text contract published via Google Doc, enforced by a jury of Slack

users

4. A smart contract not on Ethereum, enforced by placing tokens in escrow

on Kleros

5. A grant agreement from one DAO to another DAO, enforced by a third

DAO

8 Acknowledgements

We would like to thank Lawrence Lessig, Nathan Schneider, and Miriam Ashton
for helpful comments in the development of this project.

9 Bibliography

References

[1] Legal Information Institute. Agreement, December 2021.

[2] eBay Inc. eBay unpaid item policy, December 2021.

[3] Mathias Reimann and Reinhard Zimmerman. The Oxford Handbook of
Comparative Law. Oxford University Press, November 2006. Publication
Title: The Oxford Handbook of Comparative Law.

4Our hypothesis is that our ﬁrst users will be communities who want to build customized
contract frameworks such as Ghost Knowledge that help produce highly-speciﬁc contracts for
a particular community.

19

[4] Robert Merkin and S´everine Saintier. Poole’s Textbook on Contract Law.
Oxford University Press, Oxford, New York, 15th edition, August 2021.

[5] Daniel Markovits and Emad Atiq. Philosophy of Contract Law. In Ed-
ward N. Zalta, editor, The Stanford Encyclopedia of Philosophy. Meta-
physics Research Lab, Stanford University, winter 2021 edition, 2021.

[6] Patrick Bolton and Mathias Dewatripont. Contract Theory. MIT Press,

Cambridge, MA, USA, December 2004.

[7] Elinor Ostrom. Governing the Commons: The Evolution of Institutions
for Collective Action. Cambridge University Press, 1st edition edition,
November 1990.

[8] Nick Szabo. Smart contracts: building blocks for digital markets. EX-

TROPY: The Journal of Transhumanist Thought, 18(2), 1996.

[9] Vitalik Buterin. A next-generation smart contract and decentralized appli-

cation platform, 2013.

[10] Jae Kwon and Ethan Buchman. Cosmos Whitepaper.

[11] Sari

Azout.

Knowledge.
https://web.archive.org/web/20210708204302/https://www.ghostknowledge.com/.

Accessible

Ghost

at

[12] Sari Azout. Interview with Sari Azout, September 2021.

20

