Noname manuscript No.
(will be inserted by the editor)

Understanding the Role of External Pull Requests
in the NPM Ecosystem

Vittunyuta Maeprasart (cid:0) · Supatsara
Wattanakriengkrai · Raula Gaikovina
Kula · Christoph Treude · Kenichi
Matsumoto

Received: date / Accepted: date

Abstract The risk to using third-party libraries in a software application is
that much needed maintenance is solely carried out by library maintainers.
These libraries may rely on a core team of maintainers (who might be a single
maintainer that is unpaid and overworked) to serve a massive client user-base.
On the other hand, being open source has the beneﬁt of receiving contribu-
tions (in the form of External PRs) to help ﬁx bugs and add new features. In
this paper, we investigate the role by which External PRs (contributions from
outside the core team of maintainers) contribute to a library. Through a pre-
liminary analysis, we ﬁnd that External PRs are prevalent, and just as likely to
be accepted as maintainer PRs. We ﬁnd that 26.75% of External PRs submit-
ted ﬁx existing issues. Moreover, ﬁxes also belong to labels such as breaking
changes, urgent, and on-hold. Diﬀerently from Internal PRs, External PRs
cover documentation changes (44 out of 384 PRs), while not having as much
refactoring (34 out of 384 PRs). On the other hand, External PRs also cover
new features (380 out of 384 PRs) and bugs (120 out of 384). Our results
lay the groundwork for understanding how maintainers decide which external
contributions they select to evolve their libraries and what role they play in
reducing the workload.

Keywords Third-party libraries, Pull Requests, OSS sustainability, Software
Ecosystems

(cid:0) Corresponding author - Vittunyuta Maeprasart · Supatsara Wattanakriengkrai · Raula
Gaikovina Kula · Kenichi Matsumoto
Nara Institute of Science and Technology, Japan
E-mail:
moto}@is.naist.jp
Christoph Treude
University of Melbourne, Australia
E-mail: ctreude@gmail.com

{maeprasart.vittunyuta.mn2,

wattanakri.supatsara.ws3,

raula-k, matu-

2
2
0
2

l
u
J

8

]
E
S
.
s
c
[

1
v
3
3
9
4
0
.
7
0
2
2
:
v
i
X
r
a

 
 
 
 
 
 
2

Vittunyuta Maeprasart (cid:0) et al.

1 Introduction and Motivation

Third-party libraries provide a means by which software teams can quickly
build an application, avoiding the need to start from scratch. Popular usage
has led to the explosion of third-party library inter-connecting networks of
dependencies that form large ecosystems (Islam et al, 2021; Decan et al, 2018;
He et al, 2021). For example, the NPM ecosystem of libraries (aka packages)
is a critical part of the JavaScript world, with open source contributions from
hundreds of thousands of open source developers and maintainers. Evidence
of its impact was its purchase by Microsoft’s GitHub in early 2020 (Friedman,
2020). Despite their popularity, libraries are prone to maintenance and evo-
lution issues. In particular, threats such as vulnerabilities (Chinthanet et al,
2021; Durumeric et al, 2014) and transitive dependency changes (Dey et al,
2019) may cause a library to risk becoming obsolete (Kula et al, 2018), or
worse, pose an important security risk.

Recent events such as the Log4Shell vulnerability (Nichols, 2022; Berger,
2021) and the faker sabotage (Sharma, 2022) illustrate concerns about how
maintainers become overwhelmed with their workload. This is especially the
case when there is a small core maintainer team (sometimes a single main-
tainer) that is depended upon by a massive user base. For instance, it was
reported that ‘a developer of two popular libraries, decided to inject mali-
cious code into them, citing that the reason behind this mischief on the devel-
oper’s part appears to be retaliation—against mega-corporations and commer-
cial consumers of open-source projects who extensively rely on cost-free and
community-powered software but do not, according to the developer, give back
to the community’ (Roth, 2022). Another example is when the maintainers of
a vulnerable library expressed their frustration when maintaining a library in
a tweet, ‘... maintainers have been working sleeplessly on mitigation measures;
ﬁxes, docs, CVE, replies to inquiries, etc. Yet nothing is stopping people to
bash us, for work we aren’t paid for, for a feature we all dislike yet needed to
keep due to backward compatibility concerns...’ (Yazıcı, 2021).

Recent initiatives such as the Alpha-Omega project allow industry (Google
and Microsoft) to partner with maintainers to systematically ﬁnd and ﬁx vul-
nerabilities that have not yet been discovered in open source code (OpenSSF,
2022). Although these critical contributions are indeed signiﬁcant, little is
known about the other external contributions that these libraries constantly
receive from the ecosystem. Although prior work shows that external contri-
butions are needed, analysis is at a higher level of granularity. For instance,
Samoladas et al (2010) show that OSS projects require a constant stream of
contributions, while Nakakoji et al (2003) and Raymond (1999) depict external
contributions as more casual contributions. In this light, it is unknown how
external contributions ease maintainer workload, and how they diﬀer from
maintainer contributions (i.e., ﬁxing bugs, new features, documentation, etc.).
In this study, we analyze contributions submitted as Pull Requests (PRs)
in the NPM ecosystem. Based on prior work (Valiev et al, 2018), we classify a
PR contribution based on the access level (i.e., can merge a PR into the code

Understanding the Role of External Pull Requests in the NPM Ecosystem

3

Fig. 1: An External PR which is linked to an issue using the keyword solves.

base) of the submitter. In other words, we deﬁne an External PR as a PR sub-
mitted by a contributor who is not a maintainer, such as the example shown
in Figure 1 where a contributor submits a PR that solves an already existing
issue. In contrast, an Internal PR is a PR submitted by a maintainer. Fi-
nally, a Bot PR is a PR submitted by an automated bot such as dependabot.1
We collect 1,076,123 PRs from 47,959 NPM packages to ﬁrst conduct a pre-
liminary study. The results indicated that External PRs are indeed prevalent
with a large number being received by a NPM package (75.02% on average).
Furthermore, NPM contributors have a high (88.87% on average) rate of sub-
mitting External PRs. We ﬁnd that on average, External PRs’ (55.65% per
package) acceptance is higher than Internal PRs’ (51.04% per package). En-
couraged by these results, and to further explore the role of External PRs, we
carried out an empirical study to answer these two research questions:

– (RQ1) To what extent do External PRs ease maintainer workload
by ﬁxing existing issues? Our motivation for this research question is
to conﬁrm the extent to which External PRs ﬁx an issue that is already
part of the maintainers’ workload.

– (RQ2) How diﬀerent are the code changes when comparing Exter-
nal PRs to Internal PRs? For a qualitative understanding of External
PRs, for this RQ, we extract and compare External PRs with Internal PRs.

The results of RQ1 show that 26.75% of External PRs submitted to a
package are linked to an already existing issue. Furthermore, we ﬁnd evidence
that there are External PRs that require the attention of the core team (e.g.,
referencing breaking changes, urgent, and on-hold labels). For RQ2, similar to
other PR types (internal and bots), we ﬁnd that External PRs are most likely
to contain changes to add new features (170 out of 384 PRs) to a package.
However, diﬀerent to Internal and Bot PRs, External PRs tend to focus on
documentation (44 out of 384) as opposed to features (380 out of 384) for bots,
and refactoring (34 out of 384) for Internal PRs.

The rest of the paper is organized as follows. Section 2 provides the data
preparation processes for our datasets and the preliminary study. Section

1 https://github.com/dependabot

4

Vittunyuta Maeprasart (cid:0) et al.

3 provides approach and ﬁndings for each RQ. Section 4 discusses lesson
learnt from our work. Section 5 exposes potential threats to validity. Sec-
tion 6 reviews previous studies related to our study. Section 7 concludes the
paper. We provide a replication dataset that includes all our scripts, tools
and datasets for researchers to use in the future at: https://github.com/
NAIST-SE/External-PullRequest.

2 Data Preparation and Preliminary Study

In this section, we present our data preparation and preliminary study.

2.1 Data Collection

As shown in Figure 2, we separate our data collection process into three stages.

Stage One - Data Collection. For this study, we have two data sources to
construct our dataset. The ﬁrst data source is the NPM registry which contains
a listing of the available NPM packages. We select the NPM packages due to
their popularity (cf. Section 1) and having been the subject of many studies
(Chinthanet et al, 2021; Cogo et al, 2019; Decan et al, 2018; Abdalkareem et al,
2017; Zerouali et al, 2018; Dey et al, 2019; Dey and Mockus, 2020). Following
related work, we obtained this listing following the method of Chinthanet et al
(2021), ending up with 107,242 original NPM packages. The second data source
is for obtaining the PR information. For this, we use the GitHub API2. We
obtained 1,076,123 PRs from 47,959 packages. Note that we ﬁlter out packages
that do not have any PR (i.e., 8,991 packages with no dependencies and 67
packages had no PRs submitted), to ensure that our dataset contains active
packages with PRs. The collected PRs contain the PR information, e.g., PR
title, description, status, label, and code patches.

To ensure a quality dataset, we further ﬁlter out libraries that have no
other library depending on them. This ﬁlter ensures that each package meets
the minimum requirements for our analysis. In the end, we obtained 945,921
PRs from 38,925 packages. Data collection was performed in January 2021.
The summary statistics of the collection process are shown in Table 1.

Stage Two - Data classifying for quantitative analysis (Classiﬁed Dataset).
In this stage, we classify whether a PR is an External PR, an Internal PR,
or a Bot PR. As shown in Table 1, by identifying the 116,265 contributors to
the 945,291 PRs, we ﬁnd that 290,552 (i.e., 30.74%) of the ﬁltered PRs are
External PRs, while 340,465 or 36.02% of the ﬁltered PRs are Internal PRs. To
identify Bot PRs, in addition to parameters from the GitHub REST API, we
follow prior work proposed by Dey et al (2020) and Golzadeh et al (2020), to
collect a list of bots provided by GitHub. After performing this classiﬁcation

2 https://docs.github.com/en/rest/reference/pulls#get-a-pull-request

Understanding the Role of External Pull Requests in the NPM Ecosystem

5

Fig. 2: Overview of the data preparation. It consists of three stages: (i) Data
collection, (ii) Data classifying for quantitative analysis for RQ1, and (iii) Data
sampling and qualitative analysis for RQ2

Table 1: Statistics of the collected dataset and ﬁltered dataset (after stage 1:
Data collection), and classiﬁed dataset (after stage 2: Quantitative classifying)

Collected Dataset

Repository snapshot
# original NPM packages
# collected NPM Packages
# NPM Pull Requests

27 Oct 2013 — 22 Jan 2021
107,242
47,959
1,076,123

After Filtering Process

# NPM Packages
# NPM Pull Requests
# contributors

38,925
945,291
116,265

Classiﬁed Dataset (RQ1)

# Bot PR
# External PR
# Internal PR

314,274 (33.24%)
290,552 (30.74%)
340,465 (36.02%)

Sample Dataset (RQ2)

# Pull Requests

1,152

as shown in Table 1, we identiﬁed 314,274 Bot PRs from the ﬁltered dataset.
A summary of the detected bots is shown in Table 2.

Stage 3. Data sampling for qualitative analysis (Sample Dataset). From the
classiﬁed dataset obtained in Stage 2, we draw a statistically representative
random sample of 384 External PRs, 384 Internal PRs, and 384 Bot PRs.
These sample sizes allow us to generalize the conclusions about the ratio of
PRs with a speciﬁc characteristic to all studied PRs with a conﬁdence level of

1) Data Collection107,242 original npmpackagesGathered PRs from 27 Oct 2013 –22 Jan 2021 Collected Dataset1,076,123 PRs of 47,959 packages2) Data classifyingfor quantitative analysisClassified External, Internal or Bot PRnpm registry3) Data sampling for qualitative analysisGitHubAPIPR label analysis (RQ1)Statistical sampling Sample DatasetExternal 384 PRsInternal 384 PRsBot 384 PRsPR type analysis (RQ2)Classified DatasetExternal 290,552PRsInternal 340,465 PRsBot 314,274 PRsFiltered packages with at least 1 PR and 1 dependentFiltered Dataset945,291 PRs of 38,925 packagesFilter the PR with at least 1 label6

Vittunyuta Maeprasart (cid:0) et al.

Table 2: Summary of Bots detected

bot name
greenkeeperio-bot
dependabot-preview[bot]
greenkeeper[bot]
renovate[bot]
dependabot[bot]
others

Total

# PR
114,945 (36.57%)
67,933 (21.62%)
62,837 (19.99%)
36,796 (11.71%)
25,339 (8.06%)
6,424 (2.05%)
314,274

95% and a conﬁdence interval of 5%, as suggested by a prior work Hata et al
(2019) and using the calculator.3

2.2 Preliminary study

To understand the impact of External PR, we ﬁrst want to explore the extent
to which NPM packages receive PRs from external contributors, and how
many External PRs are submitted by contributors. We then study the extent
to which library maintainers accept External PRs. Hence, we ask the following
three preliminary questions.

(A1) From a Package Perspective Approach: We ﬁrst identify the pro-
portion of External PRs in relation to all submitted PRs. We deﬁne the pro-
portion of the External PRs of a package and submitted by a contributor as
follows. For an NPM package pkg and a contributor contrib. we calculate
the proportion as:

– Ext-PRrate (pkg): #ExternalP R

submitted to a pkg. In this case, a higher
proportion means that there are more External PRs received by that pack-
age.

#all−P R

where all-PR is the sum of PRs (External PRs, Internal PRs, Bot PRs) per
package. For statistical validation, we apply Spearman’s rank correlation co-
eﬃcient or Spearman’s ρ, a non-parametric measure of rank correlation, to
analyze the correlations between the number of External PRs. Spearman’s ρ
value ranges from -1 to 1. We analyze as follows: (1) |ρ| < 0.20 is Negligible or
no relationship, (2) 0.20 ≤ |ρ| < 0.30 is Weak positive/negative relationship,
(3) 0.30 ≤ |ρ| < 0.40 is Moderate positive/negative relationship, (4) 0.40 ≤
|ρ| < 0.70 is Strong positive/negative relationship, (5) 0.70 ≤ |ρ| < 1 is Very
strong positive/negative relationship, or (6) |ρ| = 1 is Perfect relationship.

Results: From the perspective of a package, we discuss two ﬁndings. The
ﬁrst ﬁnding is that, from Figure 3a, we show visually that External PRs are
indeed prevalent, as shown by the high Ext-PRrate (pkg). The ﬁndings show
that on average, 75.02% of PRs received by NPM packages are External PRs.

3 https://www.surveysystem.com/sscalc.htm

Understanding the Role of External Pull Requests in the NPM Ecosystem

7

(a) The proportion of External
PRs a package received (Ext-PRrate
(pkg)), i.e., mean of 75.02%

(b) The proportion of External PRs a
contributor submitted (Ext-PRrate
(contrib.)), i.e., mean of 88.87%

Fig. 3: Prevalent of Packages Receiving an External PR showing in (a) and
Contributor submission an External PR showing in (b).

(A2) From a Contributor Perspective Approach: Similar to A1 we iden-
tify the proportion of External PRs in relation to all submitted PRs. However,
we now deﬁne the proportion of External PRs submitted by a contributor as
follows. For an NPM package pkg and a contributor contrib. we calculate
the proportion as:

– Ext-PRrate (contrib.): #ExternalP R

submitted by a contrib. In this
case, a higher proportion means that there are more External PRs submit-
ted by a contributor. Our statistical validation is the same as P1.

#all−P R

Results: Similar to the package perspective, we discuss two ﬁndings for the
analysis of contributor submissions of External PRs. The ﬁrst ﬁnding is that,
from Figure 3b, we conﬁrm visually that a high percentage of contributions
submitted by a contributor are External PRs. This is evident by an average
of 88.87% being External PRs per contributor.

(A3) Acceptance Ratios Approach: We identify whether or not there is
a diﬀerence in how External PRs are accepted. To do so, we classify the dif-
ferent state changes of a PR. Similar to prior work Wang et al (2021), there
are several states of a PR, that is Accepted PR – where the PR has been
closed and merged, and Abandoned PR – where the PR has been closed but
has not been merged. After identifying the state of each PR, we performed
two analyses. It is important to note that a PR can be either open or closed,
merged or not merged. Hence, since we are only concerned with acceptance
(closed and merged) and abandonment (closed and not merged), we ignore
other state (open and not merged). Similarly to RQ1, we calculate the distri-
bution of acceptance at the package level of analysis. Hence, we use proportions
as follows:

package020406080100Ext-PRrate (pkg)contributor020406080100Ext-PRrate (contrib.)8

Vittunyuta Maeprasart (cid:0) et al.

Fig. 4: Distributions of PR state by the type of PR. Note that External (Pink),
Internal (Green), and Bot (Blue) PRs are shown separately.

– state-External PR(x): #state−ExternalP R

that is submitted to a pkg. A
higher proportion indicates that External PRs have a higher acceptance or
abandonment rate for that package.

ExternalP R

– state-Internal PR(x): #state−InternalP R

that is submitted to a pkg. A
higher proportion indicates that Internal PRs have a higher acceptance or
abandonment rate for that package.

InternalP R

– state-Bot PR(x): #state−BotP R

that is submitted to a pkg. A higher pro-
portion indicates that Bot PRs have a higher acceptance or abandonment
rate for that package.

BotP R

where x refers to either an accept or abandon state. Using these metrics,
the ﬁrst analysis is the distribution of the External PRs that were eventually
accepted. We test the following null hypothesis:

– H2.1null There is no diﬀerence between the acceptance and abandonment

of External PRs

Similarly to P1 and P2, we use the Mann-Whitney test to test statistical
signiﬁcance. We also measure the eﬀect size using Cliﬀ’s δ, a non-parametric
eﬀect size measure (Cliﬀ, 1993). The eﬀect size is analyzed as follows: (1) |δ|
< 0.147 as Negligible, (2) 0.147 ≤ |δ| < 0.33 as Small, (3) 0.33 ≤ |δ| < 0.474
as Medium, and (4) 0.474 ≤ |δ| as Large. We use the cliﬀsDelta4 package
to analyze Cliﬀ’s δ. For the second analysis, we compare the distributions
between the three diﬀerent PR types (External PR, Internal PR, Bot PR).
For statistical validation, we test the following hypothesis:

– H2.2null There is no diﬀerence in PR acceptance between external, internal

or bot PRs

First, we apply the Kruskal-Wallis H-test (Kruskal and Wallis, 1952), which
is a non-parametric statistical test to use when comparing more than two

4 https://github.com/neilernst/cliffsDelta

accepted PRabandoned PR020406080100proportion of PR in a packageExternalInternalBotUnderstanding the Role of External Pull Requests in the NPM Ecosystem

9

Table 3: Summary statistics of each PR states of External PR, Internal PR,
Bot PR i.e., Mean, Median, and SD.

PR

% PR per pkg

Mean Median

SD

state-External PR(accept)
state-Internal PR(accept)
state-Bot PR(accept)

state-External PR(abandon)
state-Internal PR(abandon)
state-Bot PR(abandon)

55.65%
51.04%
30.94%

29.36%
8.29%
31.18%

50.00% 33.88%
50.00% 33.54%
22.73% 26.78%

20.00% 27.19%
9.53%
21.05% 28.10%

5.31%

Table 4: Statistical test of External PR acceptance ratios

External PR

Cliﬀ ’s δ

state-External PR(accept) > state-External PR(abandon)* medium

Mann-Whitney U with *:p-value < 0.001

Table 5: Contingency table showing Dunn’s test and Cliﬀ’s δ between Internal
PR, External PR, and Bot PR

Cliﬀ ’s δ (accept state | abandon state)
Bot PR

Internal PR

External PR

External PR -
Internal PR
Bot PR

negligible* | large* medium* | negligible
-

medium* | large*
-

Dunn test *:p-value < 0.001

groups. If there is signiﬁcance, we then will conduct the Dunn test (Dinno,
2015) to determine exactly which type of PRs are diﬀerent to External PRs.
Additionally, we measure eﬀect size using Cliﬀ’s δ.

Results: Figure 4 shows the acceptance ratios of all PR types per NPM
package. Note that the pink violin plot highlights the external PRs, split into
accepted and abandoned rates. Visually, we can see that both shapes are dif-
ferent. In terms of the accepted External PRs, we can see that the violin plot
has a heavy top shape, indicating that there are many packages in the 90
to 100 percent ratio. On the other hand, looking at the abandoned ratio, we
see that the violin plot is much thinner. Complementary to the visual results,
Table 3 shows that statistically, External PRs have a 55.65% likelihood on
average to be accepted. On the other hand, the chances for an External PR to
get abandoned is also lower, with a 29.36% chance on average. For statisti-
cal validation, Table 4 conﬁrms that there is indeed a statistical diﬀerence
and conﬁrms that H2.1null There is no diﬀerence between the acceptance and
abandonment of External PRs is accepted with a medium eﬀect size.

Returning to Figure 4, we can also compare External PRs against the
other PR types (i.e., Internal PR and Bot PR). Interestingly, we can identify
two ﬁndings. The ﬁrst is that the shape of the violin plots of External PRs

10

Vittunyuta Maeprasart (cid:0) et al.

and Internal PRs are almost identical, with Bot PRs being diﬀerent in terms
of acceptance. Complementing this result, Table 3 supports this, with both
internal and external PRs having the same 50% chance of being accepted.
Diﬀerent from this, the evidence suggests that Bot PRs are least likely to be
accepted (i.e., 30.94% on average). However, when it comes to abandonment,
External PRs and Internal PRs diﬀer. As shown in both the violin plot and
the statistics in Table 3, we see that developers are less likely to reject an
Internal PR (8.29%) as opposed to an External PR (29.36). Similarly to
External PRs, Bot PRs have the highest chance of being abandoned (31.18%).
For statistical validation, Table 5 conﬁrms that there is indeed a statistical
diﬀerence and conﬁrms that H2.2null There is no diﬀerence in PR acceptance
between external, internal or bot PRs is accepted.

Preliminaries: Findings indicate that External PRs are indeed preva-
lent with a large number being received by NPM packages (75.02%
on average). Furthermore, NPM contributors have a high (88.87% on
average) rate of submitting External PRs. We ﬁnd that on average,
External PRs’ (55.65% per package) acceptance is higher than Internal
PRs’ (51.04% per package).

3 Empirical Study

Motivated by the results of the preliminary study, we are now able to under-
stand the need for External PR.

3.1 Approach

To answer RQ1, we conduct two analyses. For the ﬁrst analysis, we assume
that developers’ attention will be caught by PRs that resolve existing issues
raised in a library. Hence, we identify PRs that were created in response to
an already existing issue that was raised in the library. To do so, we link
PRs to issues, following the process explained in the GitHub documentation5.
Concretely, we search for keywords (i.e., close, closes, closed, ﬁx, ﬁxes, ﬁxed,
resolve, resolves, resolved) in the description of the PR (cf. Section 2 for ex-
ample). For our results, we will present statistics on the rate of PRs that can
be linked to issues using proportions as follows:

– Linked External PR: #Linked−ExternalP R

submitted to a pkg. In this
case, a higher proportion means that there are more linked External PRs
for that package.

#ExternalP R

5 https://docs.github.com/en/issues/tracking-your-work-with-issues/

linking-a-pull-request-to-an-issue

Understanding the Role of External Pull Requests in the NPM Ecosystem

11

Table 6: Manually curated keywords of PR labels that ‘require attention’.

Require attention

False positives

identiﬁed keywords in labels

attention, blocked, blocker, break, breaking,
broken, change, confusing, critical, denied,
density, diﬃcult, diﬃculty, eﬀort, exclamation,
failed, failing, followup, hard, high, hold,
important, incompatible, inconvenient, leak,
memory, must, needed, notable, performance,
prio, priority, required, risk, risky,
securities, security, severity, urgent.
easy, low, medium, minor, no, non, review

– Linked Internal PR: #Linked−InternalP R

submitted to a pkg. In this
case, a higher proportion means that there are more linked Internal PRs
for that package.

#InternalP R

Note that for this analysis, we decided not to report linked issues for Bots,
due to a large amount of noise of keywords generated by the auto-generated
messages that reference ﬁxes outside of the project.

For the second analysis, we assume that a PR might be labeled with words
that might grab the attention of any core member, for example, a PR to ﬁx a
potential breaking change. For this analysis, we ﬁrst needed to ﬁlter out PRs
that did not contain any labels. From the classiﬁed dataset, we ended up with
245,693 (78.18%) Bot PRs, 26,797 (9.22%) External PRs and 50,144 (14.73%)
Internal PRs containing a label. Once we collected the PRs with labels, we
performed three steps as part of pre-prossessing the labels. In the ﬁrst step,
we remove non-textual symbols such as emojis, punctuation, and other non-
English characters from the labels. For the second step, we tokenize the label
so that similar words can be grouped together. Finally, in our last step, we
apply lemmatization to derive the common base form. For the implementation,
we used the Python packages re6 and nltk7.

Table 6 shows the curated list of keywords used to identify labels that
would raise the attention of the core team. Following related work (Mäntylä
et al, 2017), we identiﬁed words that would raise the attention (arousal) with
words that show the priority levels of a label. Using the base common words for
each label, we then systematically and manually checked all unique common
base labels to infer their importance. The analysis involved two authors who
manually scanned the words to classify keywords together, with one pointing
out a label then the other mutually agreeing, similar to Subramanian et al
(2022). Furthermore, to remove false positives (such as the label ‘low severity’),
we also collected a list of non-critical keywords. We will report the percentage
of these labels for all PR types (i.e., External PR, Internal PR, and Bot PR).
Furthermore, we will report the number of PRs and also the top ﬁve labels
within each type of PR.

6 https://pypi.org/project/regex/
7 https://www.nltk.org/

12

Vittunyuta Maeprasart (cid:0) et al.

To answer RQ2, we perform a qualitative analysis to characterize the
diﬀerences in PR types between Internal PRs, External PRs, and Bot PRs.
In particular, we manually classify the sample PRs based on the taxonomy of
Subramanian et al (2022) as deﬁned below:
– Documentation: Changes and additions made to documentation ﬁles such
as READMEs and/or comments explaining code. Note: Only PRs, where
the majority change is documentation, are classiﬁed as documentation
change.

– Feature: Adding new functionality/features to the project. Following Sub-
ramanian et al (2022), we consider dependency updates as a feature change.

– Bug: Fixing unexpected behaviour in code.
– Refactoring: Restructuring code to make it more understandable/readable

and/or conform to coding standards.

– GIT related issues: Solving merge conﬂicts, adding elements to .gitignore

ﬁles and other changes related to GIT.

– Test cases: Adding test cases and/or adding code to facilitate testing.
– Other : Anything that does not fall into the above categories.

We conducted manual coding to classify our sample PRs, a technique
that is popular in various qualitative studies of software engineering (Wat-
tanakriengkrai et al, 2022). First, three authors of this paper independently
coded the PR types for 45 samples (i.e., containing 15 from External PR,
Internal PR, and Bot PR in a ﬁrst iteration. They consider the PR title, de-
scription, conversation, and code changes. We then calculated the inter-rater
agreement between the categorization results of the ﬁrst three authors using
Cohen’s kappa (McHugh, 2012). The kappa agreement varies from 0 to 1 where
0 is no agreement and 1 is perfect agreement. This process is iterated until
there is a kappa agreement of more than 0.8 or “almost perfect” (Viera and
Garrett, 2005).

For this analysis, we obtain a kappa agreements of 0.91 for overall (Exter-
nal PR, Internal PR, and Bot PR), 0.95 for External PR, 0.90 for Internal
PR, and 0.95 for Bot PR in the second round of iterations. After this high
agreement score, the remaining data in the samples of 384 Internal PRs, 384
External PRs, and 384 Bot PRs is divided into three parts, and each part
is coded separately by three authors of the paper. We apply Pearson’s chi-
squared test (χ2) (F.R.S., 1900) to test whether content of PR to External
PR and Internal PR are independent or not. To show the power of diﬀerences
between each External PR and Internal PR, we investigate the eﬀect size us-
ing Cramér’s V (φ(cid:48)), which is a measure of association between two nominal
categories (Cramér, 2016). According to Cohen (1988), our grouping has one
degree of freedom (df*), hence, eﬀect size is analyzed as follows: (1) φ(cid:48) < 0.07
as Negligible, (2) 0.07 ≤ φ(cid:48) < 0.20 as Small, or (3) 0.30 ≥ φ(cid:48) as Large.

3.2 Findings

In this section, we present our ﬁndings to answer our two research questions.

Understanding the Role of External Pull Requests in the NPM Ecosystem

13

Table 7: Summary statistic of the linked External PR and linked Internal
PR i.e., Mean, Median, and SD (RQ1)

PR

#linked PR

% linked-PR per pkg
SD

Mean Median

Linked-External PR
Linked-Internal PR

22,662
35,980

26.75%
42.57%

16.67%
33.33%

25.68%
32.93%

Table 8: Ratio of PRs that were labeled as ‘require attention’.

# PR
with label

# PR
attention label

# attention
label

External PR
Internal PR
Bot PR

Total

26,797
50,144
245,693

322,634

984 (3.63%)
2,177 (4.34%)
3,392 (1.38%)

166 (61.25%)
205 (75.65%)
26 (9.59%)

6,553 (2.03%)

271 (100%)

Table 9: Top ﬁve attention unique labels of each PR type.

Top ﬁve attention unique labels (#)

External PR breaking (78), P3: important (50), P1: urgent (46), on hold (45),

Internal PR

Bot PR

Breaking Change (40)
breaking (311), breaking change (141), P2: required (104),
change/patch (96), performance (80)
security (3248), breaking (28), CH: Security (23),
Type: Security (21), Security (11)

PRs linked to existing issues. In Table 7, we report the percentage of linked
External PRs. We ﬁnd that internal PRs are more likely to be linked with an
average of 42.57% per package. This result may not be surprising, as we assume
that any core team would be focused on resolving any existing issues in their
projects. Interestingly, on average 26.75% of External PRs per package are also
linked. This evidence shows that a quarter of External PRs were in response
to an existing issue.

Labels that require attention. Table 8 shows the frequency count of PRs
that might raise developer attention. As expected, the number of these PRs
should not be large, as they indicate critical problems for a library. Yet, when
looking at the percentages, we deduce that although small, External PRs do
have relatively comparative ratios (3.63%) compared to Internal PRs (4.34%)
and Bot PRs (1.38%). It is important to note that since labeled PRs account
for a small portion of PRs (i.e, 245,693 (78.18%) Bot PRs, 26,797 (9.22%)
External PRs and 50,144 (14.73%) Internal PRs), at this stage we cannot make
any statistical generalizations. Instead, the evidence shows that External PRs
contain PRs that require the attention of developers and might provide ﬁxes
to critical issues.

14

Vittunyuta Maeprasart (cid:0) et al.

Table 10: Examples of PR content with title and reason for classiﬁcation.

PR Content

PR title

Reason for classiﬁcation

Documentation Update WritingTests.md

Feature
Bug

Refactoring

GIT related
issues
Test cases

Other

(onl, 2017c)
feat: Add twitch icon (onl, 2019a)
BIG-21501 - EU Cookie warning
(Bugﬁx) (onl, 2016)
Major refactoring (onl, 2019b)

Merging cards theme into master
(onl, 2017a)
Remove TLS account creation
tests (onl, 2017b)
Mark the package as having
no side eﬀects (onl, 2019c)

The PR modiﬁes the ﬁle named
‘WritingTests.md’
PR’s title includes ‘feat’ keyword.
PR’s title and description contain
‘bugﬁx’ keyword.
PR’s title includes ‘refactoring’
keyword.
The PR is for merging another
branch to master.
PR’s description explains about
test integration.
The PR modiﬁes a conﬁg ﬁle
(package.json)

In terms of the content of the PRs that require the attention of developers,
as shown in Table 9, the top ﬁve unique labels for External PR include breaking
(78), important (50), urgent (46), on-hold (45) and breaking change (40).
Diﬀerently Internal PR includes labels such as required (104), change/patch
(96), and performance (80), which Bot PR include labels related to security.
Interestingly, Bot PRs seem to specialize in ﬁxing security issues, while only
having 9.59% of the total unique label keywords. This result is consistent with
the intuition that many of the bots detected were dependency management
tooling, which may include security vulnerability ﬁxing. Based on these results,
we now return to answer the ﬁrst research question (RQ1) To what extent
do External PRs ease maintainer workload by ﬁxing existing issues?

Summary for RQ1: We ﬁnd that 26.75% of External PRs submitted
to a package are linked to an already existing issue. Furthermore, we
ﬁnd evidence that there are External PRs that require the attention of
the core team (e.g., referencing breaking changes, urgent, and on-hold
labels).

Most External PR relate to New Features. Table 10 shows examples of each
PR change type, while Figure 5 depicts the frequency count for each type in
our sampled dataset. A key ﬁnding of our result is that most PRs were related
to creating a new feature, which is consistent with the results of Subramanian
et al (2022). In terms of types, Bot PRs (380 out of 384 PRs) were the most
frequent for bots and also for the category. The most likely reason is that the
NPM ecosystem has been popular for using bots to assist with dependency
management. Libraries in the ecosystem have been the target of popular bots
such as dependabot, greenkeeper, and other dependency management bots.
This is conﬁrmed by related work (Rombaut et al, 2022).

External PR also relate to features, bugs, and documentation, but not refactorings

or GIT related issues. When comparing between the diﬀerent types of PRs,

Understanding the Role of External Pull Requests in the NPM Ecosystem

15

170

161

120

111

Documentation

Feature

Bug

Refactoring

GIT related issues

44

33

24

34

15

0

2

0

1
2

0

Test cases

Other

9
11

0

13
18

380

Internal
External
Bot

0

50

100

150

200

250

300

350

400

450

Fig. 5: Frequency count of seven PR types comparing Internal PR, External
PR, and Bot PR

we ﬁnd that External PRs target features (170 PRs), bugs (120 PRs), and
documentation (44 PRs). Internal PRs similarly add features (161 PRs), ﬁx
bugs (111 PRs), but in addition, have more refactoring-related PRs (34 PRs),
and GIT-related issues (15 PRs). We ﬁnd that statistically, External PR and
Internal PR have diﬀerent PR contents. (i.e., χ2 = 14.837, p-value < 0.021).
Cramér’s V eﬀect size (φ(cid:48)), indicated a small level of association. We now re-
turn to answer the ﬁnal research question (RQ2) How diﬀerent are the
code changes when comparing External PRs to Internal PRs?

Summary for RQ2: Similar to other PR types (internal and bots),
External PRs are most likely to contain changes to add new features
(170 out of 384 PRs) to a package. However, unlike Internal and Bot
PRs, External PRs tend to focus on documentation (44 out of 384) as
opposed to features (380 out of 384) for bots, and refactoring (34 out
of 384) for Internal PRs.

4 Lessons Learnt

Returning to the goal of the study, we ﬁnd that External PRs are almost as
important as Internal PRs submitted by members of the core team. Hence,

16

Vittunyuta Maeprasart (cid:0) et al.

we make the following recommendations and highlight challenges and future
work that this work sparks.

– Libraries Need External PRs. Based on the preliminary study, RQ1 and
RQ2, we ﬁnd evidence that the ability of a library to attract and sustain
External PRs is crucial. We ﬁnd that most packages receive External PRs,
and an ecosystem contributor is likely to submit External PRs. Thus we
show that it is important for library packages to have a constant ﬂow of
external contributions. This might be even more important in cases where
a library has a single maintainer. Hence, we suggest that libraries consider
strategies to attract the community to their library. One interesting avenue
for future work would be exploring the motivations for why an external
submitter would make a contribution and what factors might attract them
to make a contribution.

– External PRs attract the attention of maintainers. RQ1 shows that Exter-
nal PRs can contain changes that attract the attention of the core team.
This is good news, as this assistance might provide new ideas or lend a
hand to often overworked maintainers. With just over a quarter of Exter-
nal PRs being linked to an already existing issue, this means that these
PRs are directly related to actionable and existing problems that can be
immediately reviewed and merged into the codebase. Potential research
directions would be understanding those External PRs that are not linked.
Also, in this study, our evidence only comes from mining the artifacts; the
next logical step would be to conduct interview or survey studies to conﬁrm
that maintainers see these External PRs as assisting them in maintenance,
rather than adding another layer of work for them. Another future research
direction would be to explore whether the continued supply of diﬀerent
types of External PRs (RQ2) is a positive factor for the sustainability of a
library (to avoid becoming obsolete).

– External PRs meet documentation needs. Results from RQ2 show that Ex-
ternal PRs meet needs that are diﬀerent from Internal PRs, i.e., they are
more likely to help with documentation and feature requests. This is es-
pecially good news for very active projects such as software libraries that
require constant updates to ﬁx bugs and add new features. It is good for
maintainers to know that there is a community that helps them manage
new features, deprecation, and other critical aspects that need to be com-
municated back to their users. A potential research direction is to investi-
gate how these documentation needs can be met by automated approaches,
to further reduce the workload of maintainers. These results might also in-
dicate that creating an External PR might not require much technical skill
or coding experience, as the focus can be on updating the documentation
or correcting inconsistencies in its usage.
On the other hand, we ﬁnd that External PRs are less likely to submit
refactoring changes for a project. This is intuitive, as performing such op-
erations requires more in-depth knowledge of the code.

Understanding the Role of External Pull Requests in the NPM Ecosystem

17

5 Threats to Validity

Internal validity - We discuss three internal threats. The ﬁrst threat is the cor-
rectness of the techniques used in the mining and extracting of our datasets.
As we use the listed NPM packages and pull request information based on
Chinthanet et al (2021), we are conﬁdent that our result can be replicated. Fur-
thermore, we contribute a full dataset that can be used by future researchers.
The second threat is related to tool selection (e.g., statistical testing). This is
because diﬀerent data sources and tests may lead to diﬀerent results. To mit-
igate this threat, we use standard tests such as Spearman’s rank correlation
coeﬃcient, Mann-Whitney U test, and Kruskal-Wallis H-test for statistical val-
idation from popular and well-known Python packages (i.e., SciPy Statistical
functions8 (scipy.stats)) The third threat is through our qualitative analysis
or manual classiﬁcation in RQ2. We mitigate these threats by reporting the
agreement among three raters using Cohen’s kappa. In this case, all three
raters discussed reﬁning the types of PR content until they achieved a high
kappa agreement (more than 0.8).

Construct validity - Threats to the construct validity of this work are re-
lated to the categorizations and assumptions in the study. A threat is the
identiﬁcation of External PRs, which is prone to false positives. Diﬀerent from
prior work by Valiev et al (2018), we deﬁne a core contributor as a contributor
who has the ability to merge a PR. The bot classiﬁcation is based on prior ap-
proaches by Dey et al (2020) and Golzadeh et al (2020). Furthermore, for RQ1,
our identiﬁcation of keywords is prone to generalization issues. We acknowl-
edge these threats, but are conﬁdent as we carefully use empirical standards
for systematic classiﬁcation, with all data available for replication. Finally, we
do not take into account the internal activities of maintainers. We believe that
this is outside the scope of this work, however, will be considered for future
work.

External validity - The main threat to external validity exists in the gener-
alizability of our results to other package ecosystems. In this study, we focused
solely on the NPM JavaScript ecosystem which has around 2 million packages,
with over 180 million downloads in July 2022. However, we have no reason to
believe that our analysis is not applicable to other ecosystems that have similar
package management systems, e.g., PyPI for Python. Although we analyzed a
large number of repositories on GitHub, we cannot generalize our ﬁndings to
industry or open-source repositories in general. Some open-source repositories
are hosted outside of GitHub, e.g., on GitLab or private servers. To mitigate
threats to reliability, we are careful to state that these recommendations and
implications may only be speciﬁc to the NPM community, and extension is
seen as immediate future work.

8 https://docs.scipy.org/doc/scipy/reference/stats.html

18

6 Related work

Vittunyuta Maeprasart (cid:0) et al.

Our work is situated between two research ﬁelds. We now introduce and high-
light related literature.

Studies on Third-party Libraries Third-party libraries have been studied
in various aspects, including third-party library reuse Heinemann et al (2011);
Abdalkareem et al (2017); Xu et al (2020), third-party API library Alrubaye
et al (2020); Thung (2016), library migration He et al (2021); Cogo et al
(2019), Huang et al (2020), and security vulnerabilities in third-party libraries
Chinthanet et al (2021); Decan et al (2018). Only a few studies have focused on
understanding developer contributions to third-party libraries, which we be-
lieve plays an important role in library sustainability. In terms of sustainability
of packages, Dey et al (2019) observed that users contribute and demand ef-
fort primarily from packages that they depend on directly with only a tiny
fraction of contributions and demand going to transitive dependencies, with
a case study of NPM packages. Recently, Dey and Mockus (2020) revealed
the signiﬁcant eﬀects of technical and social factors on the developer contri-
bution quality for NPM packages. Although these papers are complementary,
to the best of our knowledge, the characteristics of external contributions for
third-party libraries have not been studied comprehensively. Diﬀerently, in
our work, we focus on external contributions to third-party libraries, looking
at their prevalence and their characteristics.

Studies On OSS Sustainability To sustain OSS projects, previous stud-
ies have extensively investigated the motivations and barriers to developers’
joining and retention.

Motivations to make OSS contributions - The common motivations to make
contributions to OSS projects are the joy of programming, the identiﬁcation
with a community, career advancement, and learning Hars and Ou (2001).
Additionally, Roberts et al (2006) explored the interrelationships between mo-
tivations of OSS developers, revealing that motivations are not always com-
plementary. When comparing motivations between individual developers and
companies, Bonaccorsi and Rossi-Lamastra (2006) observed that companies
are more motivated by economic and technological reasons. Lee et al (2017)
found that the most common motivation of one-time contributors is to ﬁx
bugs that aﬀect their work, while the highly mentioned motivation of casual
contributors is “scratch their own itch” Pinto et al (2016). In our work, al-
though we do not study the motivations for contributing to a library, our study
is related to characterizing OSS contributions.

Barriers to participation in OSS projects - A study by Fagerholm et al
(2014) observed that mentoring increases the chance of developers’ active par-
ticipation. In the pull-based model, a survey by Gousios et al (2016) revealed
that the most commonly reported challenge is the lack of responsiveness of
project integrators. Steinmacher et al (2013) investigated the ﬁrst interactions
of newcomers in an OSS project. Their results showed that these interactions

Understanding the Role of External Pull Requests in the NPM Ecosystem

19

aﬀected the onboarding of newcomers. Furthermore, they analyzed pull re-
quests of quasi-contributors and found that non-acceptance demotivated or
prevented them from placing another contribution Steinmacher et al (2018).
Assavakamhaenghan et al (2021) tried to understand the correlation between
the ﬁrst response given to the ﬁrst contribution and future contributions. Li
et al (2021) observed the signiﬁcant impacts of pull request abandonment on
project sustainability. Complementary, in our work, we also analyze pull re-
quests but with a focus on third-party libraries rather than more generic OSS
projects.

Developers’ retention and engagement in OSS projects A study by Zhou
and Mockus (2012) found that developers’ willingness and participation envi-
ronment signiﬁcantly impact the chance of becoming long-term contributors.
In addition, Schilling et al (2012) showed that developers’ retention in OSS
projects is aﬀected by the level of development experience and conversational
knowledge. Valiev et al (2018) conducted a mixed-methods study to investigate
ecosystem-level factors that aﬀect the sustainability of open-source Python
projects. Their results show that projects with more contributors are less likely
to become dormant. Iaﬀaldano et al (2019) conducted interviews with OSS de-
velopers to explore what drives them to become temporarily or permanently
inactive in a project. The reported reasons were personal (e.g., life events) or
project-related (e.g., role change and changes in the project). Recent stud-
ies have also focused on understanding what contributions attract newcomers
(Subramanian et al, 2022), (Rehman et al, 2020). Meanwhile, the usefulness of
automated pull requests, i.e., bots, has attracted interest from researchers in
these research areas. Through an empirical study of OSS projects with bots,
developers revealed that these bots are useful for maintaining projects (Wessel
et al, 2018). Mirhosseini and Parnin (2017) observed that bots can encourage
developers to contribute to OSS projects, especially to update dependencies.
Alfadel et al (2021) studied Dependabot, a bot used to automatically update
vulnerable dependencies. They found that 65% of the created security-related
pull requests are accepted. In our work, we also observed PRs submitted by
bots, ﬁnding that bots such as Dependabot are prevalent in Bot PRs.

7 Conclusion

This work investigates the extent to which third-party libraries receive support
from external contributors (i.e., External PRs) that are not part of the core
team. By mining PRs and analyzing them through mixed methods of statisti-
cal analysis and qualitative analysis, we show that External PRs are prevalent
and just as likely to be accepted as Internal PRs. Our results reinforce the call
of core teams that need support. Future work includes research into encourag-
ing and sustaining External PRs, understanding how External PRs could be
automated, or could be the focus for newcomers to the ecosystem. We envi-
sion that this work can inspire awareness and initiatives to support third-party
libraries.

20

Vittunyuta Maeprasart (cid:0) et al.

Acknowledgement

This work is supported by Japanese Society for the Promotion of Science
(JSPS) KAKENHI Grant Numbers 20K19774 and 20H05706.

Statements and Declarations

Raula Gaikovina Kula and Christoph Treude are members of the EMSE Edi-
torial Board.

References

(2016) Big-21501 - eu cookie warning (bugﬁx) by mickr · pull request
#50 · bigcommerce/stencil-utils. https://github.com/bigcommerce/
stencil-utils/pull/50, (Accessed on 01/20/2022)

(2017a) Merging cards

request
#445 · marklogic-community/slush-marklogic-node. https://github.com/
marklogic-community/slush-marklogic-node/pull/445, (Accessed on
01/20/2022)

into master by grtjn · pull

theme

(2017b) Remove tls account creation tests by dmitrizagidulin · pull
solid/node-solid-server. https://github.com/solid/

request #495 ·
node-solid-server/pull/495, (Accessed on 01/20/2022)

(2017c) Update writingtests.md by mattmilburn · pull request #2654 · re-
duxjs/redux. https://github.com/reduxjs/redux/pull/2654, (Accessed
on 01/20/2022)

(2019a) feat: Add ‘twitch‘ icon by ahtohbi4 · pull request #677 · feath-
ericons/feather. https://github.com/feathericons/feather/pull/677,
(Accessed on 01/20/2022)

(2019b) Major refactoring by szmarczak · pull request #921 · sindresorhus/-
(Accessed on

got. https://github.com/sindresorhus/got/pull/921,
01/20/2022)

(2019c) Mark the package as having no side eﬀects by stof · pull request #77
· d3/d3-format. https://github.com/d3/d3-format/pull/77, (Accessed
on 01/20/2022)

Abdalkareem R, Nourry O, Wehaibi S, Mujahid S, Shihab E (2017) Why do
developers use trivial packages? an empirical case study on npm. In: Pro-
ceedings of the 2017 11th joint meeting on foundations of software engineer-
ing, pp 385–395

Alfadel M, Costa DE, Shihab E, Mkhallalati M (2021) On the use of de-
pendabot security pull requests. In: 2021 IEEE/ACM 18th International
Conference on Mining Software Repositories (MSR), IEEE, pp 254–265
Alrubaye H, Mkaouer MW, Khokhlov I, Reznik L, Ouni A, Mcgoﬀ J (2020)
Learning to recommend third-party library migration opportunities at the
api level. Applied Soft Computing URL https://www.sciencedirect.com/
science/article/pii/S1568494620300806

Understanding the Role of External Pull Requests in the NPM Ecosystem

21

Assavakamhaenghan N, Wattanakriengkrai S, Shimada N, Kula RG, Ishio T,
ichi Matsumoto K (2021) Does the ﬁrst-response matter for future contribu-
tions? a study of ﬁrst contributions. Proceedings of the 18th international
conference on mining software repositories

Berger A (2021) Log4j vulnerability explained: What is log4shell? https:
(Accessed on

//www.dynatrace.com/news/blog/what-is-log4shell/,
07/04/2022)

Bonaccorsi A, Rossi-Lamastra C (2006) Comparing motivations of individual
programmers and ﬁrms to take part in the open source movement. from
community to business. Knowledge and Policy pp 40–64

Chinthanet B, Kula RG, McIntosh S, Ishio T, Ihara A, Matsumoto K (2021)
Lags in the release, adoption, and propagation of npm vulnerability ﬁxes.
Empirical Software Engineering 26(3):1–28

Cliﬀ N (1993) Dominance statistics: Ordinal analyses to answer ordinal ques-

tions. Psychological bulletin p 494

Cogo FR, Oliva GA, Hassan AE (2019) An empirical study of dependency
downgrades in the npm ecosystem. IEEE Transactions on Software Engi-
neering pp 1–1

Cohen J (1988) Statistical Power Analysis for the Behavioral Sciences. Rout-

ledge

Cramér H (2016) Mathematical Methods of Statistics (PMS-9), Volume 9.

Princeton university press

Decan A, Mens T, Constantinou E (2018) On the impact of security vulnera-
bilities in the npm package dependency network. In: Proceedings of the 15th
International Conference on Mining Software Repositories, pp 181–191
Dey T, Mockus A (2020) Eﬀect of technical and social factors on pull request
quality for the npm ecosystem. In: Proceedings of the 14th ACM / IEEE
International Symposium on Empirical Software Engineering and Measure-
ment (ESEM), Association for Computing Machinery, New York, NY, USA,
ESEM ’20

Dey T, Ma Y, Mockus A (2019) Patterns of eﬀort contribution and demand
and user classiﬁcation based on participation patterns in npm ecosystem.
PROMISE’19, p 36–45

Dey T, Mousavi S, Ponce E, Fry T, Vasilescu B, Filippova A, Mockus A (2020)
Detecting and characterizing bots that commit code. In: Proceedings of the
17th international conference on mining software repositories, pp 209–219
Dinno A (2015) Nonparametric pairwise multiple comparisons in independent

groups using dunn’s test. The Stata Journal 15(1):292–300

Durumeric Z, Li F, Kasten J, Amann J, Beekman J, Payer M, Weaver N,
Adrian D, Paxson V, Bailey M, Halderman JA (2014) The matter of heart-
bleed. In: Proceedings of the 2014 Conference on Internet Measurement
Conference, Association for Computing Machinery, New York, NY, USA,
IMC ’14, p 475–488

Fagerholm F, Guinea AS, Münch J, Borenstein J (2014) The role of mentoring
and project characteristics for onboarding in open source software projects.
In: Proceedings of the 8th ACM/IEEE International Symposium on Em-

22

Vittunyuta Maeprasart (cid:0) et al.

pirical Software Engineering and Measurement, Association for Computing
Machinery, New York, NY, USA, ESEM ’14

Friedman N (2020) npm is joining github | the github blog. https://github.
blog/2020-03-16-npm-is-joining-github/, (Accessed on 07/04/2022)
FRS KP (1900) X. on the criterion that a given system of deviations from the
probable in the case of a correlated system of variables is such that it can
be reasonably supposed to have arisen from random sampling. The Lon-
don, Edinburgh, and Dublin Philosophical Magazine and Journal of Science
50(302):157–175

Golzadeh M, Legay D, Decan A, Mens T (2020) Bot or not? detecting bots in
github pull request activity based on comment similarity. In: Proceedings
of the IEEE/ACM 42nd International Conference on Software Engineering
Workshops, pp 31–35

Gousios G, Storey MA, Bacchelli A (2016) Work practices and challenges in
pull-based development: The contributor’s perspective. In: 2016 IEEE/ACM
38th International Conference on Software Engineering (ICSE), pp 285–296
Hars A, Ou S (2001) Working for free? motivations of participating in open
source projects. In: Proceedings of the 34th Annual Hawaii International
Conference on System Sciences

Hata H, Treude C, Kula RG, Ishio T (2019) 9.6 million links in source code
comments: Purpose, evolution, and decay. In: Proceedings of the 41st In-
ternational Conference on Software Engineering, IEEE Press, ICSE ’19, p
1211–1221

He H, He R, Gu H, Zhou M (2021) A large-scale empirical study on java
library migrations: Prevalence, trends, and rationales. In: Proceedings of
the 29th ACM Joint Meeting on European Software Engineering Conference
and Symposium on the Foundations of Software Engineering, Association for
Computing Machinery, New York, NY, USA, ESEC/FSE 2021, p 478–490
Heinemann L, Deissenboeck F, Gleirscher M, Hummel B, Irlbeck M (2011)
On the extent and nature of software reuse in open source java projects. In:
Schmid K (ed) Top Productivity through Software Reuse, Springer Berlin
Heidelberg, Berlin, Heidelberg, pp 207–222

Huang K, Chen B, Shi B, Wang Y, Xu C, Peng X (2020) Interactive, eﬀort-
aware library version harmonization. In: Proceedings of the 28th ACM Joint
Meeting on European Software Engineering Conference and Symposium on
the Foundations of Software Engineering, pp 518–529

Iaﬀaldano G, Steinmacher I, Calefato F, Gerosa M, Lanubile F (2019) Why
do developers take breaks from contributing to oss projects? a preliminary
analysis. In: Proceedings of the 2nd International Workshop on Software
Health, IEEE Press, SoHeal ’19, p 9–16

Islam S, Kula RG, Treude C, Chinthanet B, Ishio T, Matsumoto K (2021) Con-
trasting third-party package management user experience. In: 2021 IEEE In-
ternational Conference on Software Maintenance and Evolution (ICSME),
pp 664–668

Kruskal WH, Wallis WA (1952) Use of ranks in one-criterion variance analysis.

Journal of the American statistical Association 47(260):583–621

Understanding the Role of External Pull Requests in the NPM Ecosystem

23

Kula RG, German DM, Ouni A, Ishio T, Inoue K (2018) Do developers update
their library dependencies? Empirical Software Engineering pp 384–417
Lee A, Carver JC, Bosu A (2017) Understanding the impressions, motivations,
and barriers of one time code contributors to ﬂoss projects: A survey. In:
2017 IEEE/ACM 39th International Conference on Software Engineering
(ICSE), pp 187–197

Li Z, Yu Y, Wang T, Yin G, Li S, Wang H (2021) Are you still working on
this an empirical study on pull request abandonment. IEEE Transactions
on Software Engineering PP:1–1, DOI 10.1109/TSE.2021.3053403

Mäntylä MV, Novielli N, Lanubile F, Claes M, Kuutila M (2017) Bootstrap-
ping a lexicon for emotional arousal in software engineering. In: Proceedings
of the 14th International Conference on Mining Software Repositories, IEEE
Press, MSR ’17, p 198–202

McHugh ML (2012) Interrater reliability: the kappa statistic. Biochemia med-

ica 22(3):276–282

Mirhosseini S, Parnin C (2017) Can automated pull requests encourage soft-
ware developers to upgrade out-of-date dependencies? In: Proceedings of the
32nd IEEE/ACM International Conference on Automated Software Engi-
neering, IEEE Press, ASE 2017, p 84–94

Nakakoji K, Yamamoto Y, NISHINAKA Y, Kishida K, Ye Y (2003) Evolution
patterns of open-source software systems and communities. International
Workshop on Principles of Software Evolution (IWPSE)

Nichols S (2022) Log4shell vulnerability continues to menace developers.

https://bit.ly/3yEDDrn, (Accessed on 07/04/2022)

OpenSSF (2022) Openssf announces the alpha-omega project to improve
software supply chain security for 10,000 oss projects - open source
security foundation. https://openssf.org/press-release/2022/02/01/
openssf-announces-the-alpha-omega-project-to-improve-software-supply-chain-security-for-10000-oss-projects/,
(Accessed on 07/04/2022)

Pinto G, Steinmacher I, Gerosa MA (2016) More common than you think:
An in-depth study of casual contributors. In: 2016 IEEE 23rd International
Conference on Software Analysis, Evolution, and Reengineering (SANER),
vol 1, pp 112–123

Raymond E (1999) The cathedral and the bazaar. Knowledge, Technology &

Policy 12(3):23–49

Rehman I, Wang D, Kula RG, Ishio T, Matsumoto K (2020) Newcomer can-
didate: Characterizing contributions of a novice developer to github. Pro-
ceedings of the 36th international conference on software maintainance and
evolution

Roberts J, Hann IH, Slaughter S (2006) Understanding the motivations, partic-
ipation, and performance of open source software developers: A longitudinal
study of the apache projects. Management Science 52:984–999

Rombaut B, Roseiro Côgo F, Adams B, Hassan AE (2022) There’s no such
thing as a free lunch: Lessons learned from exploring the overhead introduced
by the greenkeeper dependency bot in npm. ACM Transactions on Software
Engineering and Methodology

24

Vittunyuta Maeprasart (cid:0) et al.

Roth E (2022) Open source developer corrupts widely-used libraries, aﬀect-
ing tons of projects. https://www.theverge.com/2022/1/9/22874949/
developer-corrupts-open-source-libraries-projects-affected,
(Accessed on 07/04/2022)

Samoladas I, Angelis L, Stamelos I (2010) Survival analysis on the duration
of open source projects. Information & Software Technology 52:902–922
Schilling A, Laumer S, Weitzel T (2012) Who will remain? an evaluation of
actual person-job and person-team ﬁt to predict developer retention in ﬂoss
projects. In: 2012 45th Hawaii International Conference on System Sciences,
pp 3446–3455

Sharma A (2022) npm libraries ‘colors’ and ‘faker’ sabotaged in protest
by their maintainer—what to do now? https://blog.sonatype.com/
npm-libraries-colors-and-faker-sabotaged-in-protest-by-their-maintainer-what-to-do-now,
(Accessed on 07/04/2022)

Steinmacher I, Wiese I, Chaves AP, Gerosa MA (2013) Why do newcomers
abandon open source software projects? In: 2013 6th International Workshop
on Cooperative and Human Aspects of Software Engineering (CHASE), pp
25–32

Steinmacher I, Pinto G, Wiese IS, Gerosa MA (2018) Almost there: A study
on quasi-contributors in open source software projects. In: Proceedings of
the 40th International Conference on Software Engineering, Association for
Computing Machinery, New York, NY, USA, ICSE ’18, p 256–266

Subramanian VN, Rehman I, Nagappan M, Kula RG (2022) Analyzing ﬁrst
contributions on github: What do newcomers do? IEEE Software pp 93–101
Thung F (2016) Api recommendation system for software development. In:
2016 31st IEEE/ACM International Conference on Automated Software En-
gineering (ASE), IEEE, pp 896–899

Valiev M, Vasilescu B, Herbsleb J (2018) Ecosystem-level determinants of sus-
tained activity in open-source projects: A case study of the pypi ecosystem.
In: Proceedings of the 2018 26th ACM Joint Meeting on European Software
Engineering Conference and Symposium on the Foundations of Software
Engineering, ESEC/FSE 2018, p 644–655

Viera A, Garrett J (2005) Understanding interobserver agreement: The kappa

statistic. Family medicine 37:360–3

Wang D, Xiao T, Thongtanunam P, Kula RG, Matsumoto K (2021) Under-
standing shared links and their intentions to meet information needs in mod-
ern code review: A case study of the openstack and qt projects. Empirical
Software Engineering 26

Wattanakriengkrai S, Chinthanet B, Hata H, Kula RG, Treude C, Guo J,
Matsumoto K (2022) Github repositories with links to academic papers:
Public access, traceability, and evolution. Journal of Systems and Software
183:111117

Wessel M, de Souza BM, Steinmacher I, Wiese IS, Polato I, Chaves AP, Gerosa
MA (2018) The power of bots: Characterizing and understanding bots in
oss projects. Proc ACM Hum-Comput Interact 2(CSCW)

Understanding the Role of External Pull Requests in the NPM Ecosystem

25

Xu B, An L, Thung F, Khomh F, Lo D (2020) Why reinventing the wheels? an
empirical study on library reuse and re-implementation. Empirical Software
Engineering 25

Yazıcı V (2021) Volkan yazıcı on twitter: "log4j maintainers have been work-
ing sleeplessly on mitigation measures; ﬁxes, docs, cve, replies to inquiries,
etc. yet nothing is stopping people to bash us, for work we aren’t paid
for, for a feature we all dislike yet needed to keep due to backward com-
patibility concerns." / twitter. https://twitter.com/yazicivo/status/
1469349956880408583?lang=en, (Accessed on 07/04/2022)

Zerouali A, Constantinou E, Mens T, Robles G, Gonzalez-Barahona J (2018)

An empirical analysis of technical lag in npm package dependencies

Zhou M, Mockus A (2012) What make long term contributors: Willingness
and opportunity in oss community. In: 2012 34th International Conference
on Software Engineering (ICSE), pp 518–528

