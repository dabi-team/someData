2
2
0
2

p
e
S
8

]
E
C
.
s
c
[

1
v
3
3
8
3
0
.
9
0
2
2
:
v
i
X
r
a

emgr – EMpirical GRamian Framework
Version 5.99
Software Release Paper

Christian Himpe∗

Abstract

Version 5.99 of the empirical Gramian framework – emgr – completes a
development cycle which focused on parametric model order reduction of
gas network models while preserving compatibility to the previous devel-
opment for the application of combined state and parameter reduction for
neuroscience network models. Secondarily, new features concerning empir-
ical Gramian types, perturbation design, and trajectory post-processing,
as well as a Python version in addition to the default MATLAB / Octave
implementation, have been added. This work summarizes these changes,
particularly since emgr version 5.4, see Himpe, 2018 [Algorithms 11(7): 91],
and gives recent as well as future applications, such as parameter identi-
ﬁcation in systems biology, based on the current feature set.

Keywords: Control Theory, System Theory, Nonlinear Systems, System

Gramians, Empirical Gramians

1 Project History and Overview

The empirical Gramian framework (emgr) is an open-source MATLAB (and
Octave-compatible) software package for the computation of empirical system
Gramians and empirical covariance matrices, which are (approximations to the)
essential operators in (nonlinear) system theory.

Originally, emgr was started to provide reusable computational kernels with
a uniﬁed interface, while the interface is inspired by the gram function of the
Control System Toolbox [MathWorks, nd] and the “Nonlinear Model Reduction
Routines” [Sun and Hahn, nd].

The ﬁrst release (version 0.9) coincided with the “MoRePaS 2” workshop1
in 2012, while a ﬁrst summary of the capabilities is published in [Himpe and
Ohlberger, 2013] (based on version 1.3), and detailed descriptions of emgr are
given in [Himpe, 2017] (based on version 3.9) and [Himpe, 2018] (based on
version 5.4). Marking the ten-year anniversary of emgr’s development, ver-
sion 5.99 [Himpe, 2022] was released. And relative to version 5.4, various major
features have been added, which this work summarizes.

∗ORCiD: 0000-0003-2194-6754, Contact: christian.himpe@wwu.de, Institute for Numeri-

cal Analysis, University of Münster, Orleans-Ring 10, 48149 Münster, Germany

1see:

https://web.archive.org/web/20121219154629/http://www.morepas.org:

80/workshop2012/index.html

1

 
 
 
 
 
 
The (empirical) system Gramian matrices have a multitude of system theo-
retic applications, which include model reduction, parameter identiﬁcation, con-
trol conﬁguration selection, sensitivity analysis, optimal placement, nonlinearity
quantiﬁcation, or system characterization via indices and invariants. Beyond
system and control theory, areas such as uncertainty quantiﬁcation use numeri-
cally approximations of operators which are computable as empirical Gramians,
for example Hessians [Lieberman et al., 2013]. Recent interesting uses for system
Gramians in particular applications are: pose detection [Avant and Morganson,
2019], traﬃc networks [Bianchin and Pasqualetti, 2020], tau functions [Blower
and Newsham, 2021], and vulnerability analysis [Babazadeh, 2022].

2 New Features

A detailed description of the features up to and including emgr 5.4 is given
in [Himpe, 2018]. This section summarizes the major new features imple-
mented since version 5.4 onwards until the latest version 5.99. These features
are grouped in to ﬁve categories: Gramian variants, input functions, trajectory
weighting, parameter identiﬁability, and Python version.

2.1 Gramian Variants

emgr provides seven empirical Gramians: controllability, observability, cross, lin-
ear cross, sensitivity, identiﬁability and joint Gramian. Of those, only the cross-
Gramian derived empirical Gramians (cross, linear cross and joint Gramian)
used to provide a variant, speciﬁcally for non-square or non-symmetric sys-
tems [Himpe, 2018, Sec. 3.1.5]. Over the recent releases, variants also for the
controllability- and observability-based Gramians were added.

It is noted here, that the loadability Gramian from [Tolks and Ament, 2017]
is not a system Gramian but a standard Gram matrix [Wikipedia contributors,
2022], and hence does not need to be computed via emgr.

2.1.1 Output Controllability Gramian

The output reachability Gramian, or more generally the output controllability
Gramian [Kreindler and Sarachik, 1964], encodes the controllability of the out-
put y : R → RQ instead of the controllability of the state x : R → RN . It has
various applications in system theory, for example in control conﬁguration selec-
tion [Halvarsson, 2008], while more recently the empirical output-controllability
covariance matrix (EOCCM) [Méndez-Blanco and Özkan, 2021] is employed
for parameter identiﬁability. An empirical output controllability Gramian can
always be computed via the empirical controllability Gramian, given a linear
output operator C of the underlying system,

cWOC = C cWCC (cid:124).
However in version 5.8, direct computation of the output controllability Gramian
was included; not only to provide a more memory eﬃcient computation for large-
scale systems by computing an empirical output controllability Gramian from
output trajectory data directly, instead of state trajectories, but also to approx-
imate the output controllability for systems with nonlinear output operators.
Following the format of [Himpe, 2018], it is deﬁned as:

2

Deﬁnition 1 (Empirical Output Controllability Gramian)
Given non-empty sets Eu and Su, the empirical output controllability Gramian
cWOC ∈ RQ×Q is deﬁned as:

|Su|
X

M
X

Z T

cWOC :=

1
|Su|

1
c2
k
Ψkm(t) = (ykm(t) − ¯ykm)(ykm(t) − ¯ykm)(cid:124) ∈ RQ×Q,

Ψkm(t) dt

m=1

k=1

0

with the output
ˆukm(t) = ckem ◦ u(t) + ¯u, ck ∈ Su, em ∈ Eu, and oﬀsets ¯u ∈ RM , ¯xkm ∈ RN .

trajectories ykm(t) ∈ RQ for the input conﬁgurations

2.1.2 Average Observability Gramian

An idea similar to the non-symmetric (empirical) cross Gramian [Himpe, 2018,
Sec. 3.1.5], is an average observability Gramian, which is hinted at in [Rong and
Michael, 2016]. Practically, this means for multiple output systems, that all
outputs are summed up yielding a single (average) output. This variant, added
in version 5.7, also extends to the augmented empirical observability Gramian,
and thus the empirical identiﬁability Gramian.

The empirical local observability Gramian [Krener and Ide, 2009], could have
been a potential variant, yet, [Rong and Michael, 2016, Sec. II.A] illustrates why
the standard empirical observability Gramian suﬃces.

2.2

Input Functions

Already up to version 5.4, emgr provided means to pass a custom function of
a single (time) argument as input function for the empirical Gramian compu-
tation or select from the included default input functions:
impulse, decaying
chirp, or pseudo-random binary sequence. Subsequently, two more default in-
put functions were implemented:

2.2.1 Step Function Input

Since for (semi-discrete) hyperbolic partial diﬀerential equation models, with in-
puts and outputs at the boundaries, step functions are a relevant training input,
which was demonstrated heuristically in [Grundel et al., 2019], in version 5.7 a
constant “step” function was added as default input function:

ustep(t) := 1.

This training input became the default for data-driven reduced order gas net-
work models in the morgen platform [Himpe et al., 2021], which utilizes emgr
as model reduction back-end.

2.2.2 Sine Cardinale Input

A smooth alternative to impulse input is a sine cardinale (sinc) input, as it was
employed in [Arjona et al., 2011]. In version 5.8, a scaled sinc input function

3

has been included into the set of default inputs:

usinc(t) :=

( sin(th−1)
th−1
1

t 6= 0,
t = 0,

for time-step width h > 0.

2.3 Trajectory Weighting

As mentioned in [Himpe, 2018, Sec. 5.3] trajectory weighting, could be imple-
mented by using the custom inner product interface. However, a set of weighting
functions has been included, originally motivated by time domain weighting.
Nonetheless, trajectory independent weightings like in [Mitra, 1969] are still
achieved via the inner product interface.

2.3.1 Time-Weighting

Time-domain weighting of Gramians was initially proposed in [Schelfhout and
De Moor, 1995], particularly, using monomials of the time variable, and also
provides an error bound [Sreeram, 2002] if used in conjunction with balanced
truncation [Breiten and Stykel, 2021].
In version 5.8, linear and a quadratic
time-domain weighting was included, based on a time-weighted linear system
Gramian and [Himpe, 2018, Sec. 3.1]:

Z ∞

W∗ =

→ cW∗ =

1
r!
1
. . .

tr eA1x(t) D eA2x(t) dt

0
X

· · ·

X 1
. . .

1
r!

Z

tr Ψ(t) dt

for r ∈ {1, 2} and all computable empirical Gramians. Practically, such time-
weighting emphasizes “later” parts of a simulated trajectory in the empirical
Gramian, over the “earlier” parts, like the initial state / output. Note, that the
scaling factor 1
r! from [Sreeram, 2002] is included for convenience, in case for a
typical use in conjunction with balanced truncation.

2.3.2 Reciprocal Time-Weighting

Furthermore, in the latest version 5.99 a time-reciprocal weighting, also based
on a weighted linear system Gramian and [Himpe, 2018, Sec. 3.1]:

Z ∞

W∗ =

→ cW∗ =

0
1
. . .

1
√
πt

X

· · ·

eA1x(t) D eA2x(t) dt

Z

X 1
. . .

1
√
πt

Ψ(t) dt

following [Glover, 1987, Sec. 3.2] was included, i.e. to allow numerical veriﬁca-
tion of the lower error bound presented in there, and to provide a time-weighting
emphasizing “earlier” parts of a simulated trajectory, in contrast to the typical
time-weighting. Note, that practically at time t = 0 the scaling factor is set

q 2

to

π∆t , which was determined heuristically to be suitable.

4

2.3.3 Column-Based Weighting

The column-based weighting originates in an approach to suboptimal control
from [Hyun et al., 2017, Def. 2], and deﬁnes a weighted Gramian which normal-
izes the state x (or output y) at each time instance by its length, i.e.:

ˆx(t) := x(t) · kx(t)k−1
2 ,
ˆy(t) := y(t) · ky(t)k−1
2 .

2.3.4 Row-Based Weighting

The row-based weighting is based on component-wise scale normalization. This
means each component i of the utilized state x or output y trajectories for the
Gramians is normalized by its (absolute) maximum value, i.e.:

ˆyi(t) := xi(t) · kxik−1
∞ ,
ˆyi(t) := yi(t) · kyik−1
∞ ,

which means all component (output) trajectories evolve in the interval [−1, 1].

2.4 Parameter Identiﬁability

More recently parameter identiﬁcation of nonlinear systems with low-dimensional
state-space, but high-dimensional parameter-space became a use-case for
emgr, [Falkenhagen et al., 2022]. This motivated the following enhancements:

2.4.1 Schur Complement

Initially, parameter identiﬁcation was the basis for the combined state and pa-
rameter reduction [Himpe, 2017] of nonlinear systems with high-dimensional
state and parameter spaces, but homogeneous parameters, hence the matrix-
inverse inside the Schur complement is only roughly approximated by a trun-
cated Neumann series.

To improve accuracy of the empirical (cross-)identiﬁability Gramian, a more
accurate Schur complement option was added in version 5.99, which computes
the inner inverse as Moore-Penrose pseudo-inverse:

WI,exact = WP − W

(cid:124)

M W +

O WM ,
(cid:124)

W (cid:124)

m(WX + W

X )+Wm.

W ¨I,exact = −

1
2

2.4.2 Parameter Centering

Originally parameter-related Gramians (empirical sensitivity, identiﬁability, joint
Gramian) required a minimum and maximum parameter to deﬁne the range
of perturbation. Recently in version 5.99, a mode was added, which requires
minimum, maximum and nominal parameter, which then sets up a range of
perturbation with respect to the nominal value instead of the minimum or (log-
arithmic) mean.

5

2.5 Python Version

Since version 5.6, a Python (version 3) variant of emgr is also maintained2, that
provides the same features, and closely resembles the MATLAB interface and
function signature. The elaborate testing, prototype and wrapper code, as for
the MATLAB variant, is not available yet. However, a combinatorial testing of
conﬁgurations is supported3.

3 Application Demonstration

A current application for emgr’s empirical Gramians is, after combined state and
parameter reduction for brain connectivity inference [Himpe, 2017], and para-
metric model order reduction for gas networks [Himpe et al., 2021], parameter
identiﬁcation for systems biology models.

Such application is exemplarily demonstrated on a benchmark model – the

IL13-Induced JAK/STAT signaling model from [Raue et al., 2014], which is

also tested in [Villaverde et al., 2016] and [Stigter and Joubert, 2021]. This

model has dim(u(t)) = 1 input, dim(x(t)) = 10 states, dim(y(t)) = 8 outputs

and dim(θ) = 23 parameters, and the following nonlinear vector ﬁeld as well as

linear output function (in simpliﬁed form):



θ6x2(t) − θ5x1 − c1θ1x1(t)u1(t)

θ5x1(t) − θ6x2(t)



θ2x3(t)(x6(t) − c3) + c1θ1x1(t)u1(t)


−θ3x4(t) − θ2x3(t)(x6(t) − c3)



θ3x4(t) − θ4x5(t)


−c2 θ8(x6(t) − c3) − θ7x3(t)x6(t)











θ13x1(t)+1 − θ7x4(t)x6(t)
θ13x1(t)+1
θ9x7(t)(x6(t) − c3) − c2x10(t)(x7(t) − c4)
−θ11(x7(t) − c4)
−c1θ12x9(t)u1(t)
θ14x8(t)
θ15+x8(t) − θ16x10(t)

























,

x1(t) + x3(t) + x4(t)
θ18(x3(t) + x4(t) + x5(t) + c5 − x9)
θ19(x4(t) + x5(t))
θ20(c3 − x6(t))
θ21x8(t)



















,

˙x(t) =

y(t) =



















2see: py/emgr.py
3see: py/emgrtest.py

11 x8(t)

θ17θ22θ−1
x10(t)
c4 − x7(t)

6

Figure 1: Singular values of the empirical
JAK/STAT benchmark system’s parameters.

identiﬁability Gramian for the

with constants c1 = 2.265, c2 = 91, c3 = 2.8, c4 = 165, and c5 = 0.34.
Additionally, the initial state has a parameter dependency:

x0 = (cid:2)1.3

θ23

0

0

0

c3

c4

0

c5

0(cid:3)(cid:124)

.

As initial-state-parameters are not supported by default in emgr, but can be
emulated by providing a solver wrapper[Himpe, 2018, Sec. 5.5] which sets the
parameter in the initial states and passes the updated initial state to the actual
solver.

To assess the parameter identiﬁability, the empirical identiﬁability Gramian
is computed via the augmented empirical observability Gramian, of which its sin-
gular value decomposition WI = U ΣU (cid:124) is analyzed. This numerical experiment
is conducted in MATLAB 2022a on a AMD Ryzen 5 4500U with 16GiB RAM.
The singular values Σii are plotted in Fig. 1 and indicate that the singular
vectors, associated to the seven smallest singular values, {u17, . . . , u23} contain
linear combinations of the original parameters that are least identiﬁable. To
reconstruct the contributions of those, these singular vectors are summed af-
ter taking their element-wise absolute value, ¯u2 := P23
k=17 |uk|, which yields
the overall contribution of original parameter fractions to the “unidentiﬁable”
singular vectors. The dominant contribution is given by the ﬁve structurally
unidentiﬁable parameters {θ11, θ15, θ17, θ21, θ22}, as well as by the practically
unidentiﬁable parameters {θ4, θ14, θ16, θ19}. The remaining practically uniden-
tiﬁable parameters {θ3, θ12} are not contributing. However, all structurally
unidentiﬁable parameters are located, and particularly, all identiﬁable parame-
ters do not contribute (the respective elements of ¯u2 have relative magnitudes
below 10−7) to the singular vectors of small singular values. Thus, the results of
the empirical-Gramian-based parameter identiﬁcation agrees with other studies
on this system in terms structural identiﬁability. Furthermore, the matrix of
singular vectors associated to the dominant singular values, represents a lower-
dimensional reparametrization of the system.

7

1357911131517192123n-th Singular Value10-6010-4010-20100Magnitude4 Summary

In a decade of research in empirical system Gramians and working on emgr, I
conclude that an empirical-Gramian-based approach typically gives an accept-
able approximate answer, no matter the system’s complexities, which makes
this data-driven mathematical technology a somewhat universal tool for linear
and nonlinear control and system-theory and engineering. Lastly, I note that
more information and documentation on emgr can be found on:

https://gramian.de

Code Availability

The source code of the numerical experiments is licensed under BSD-2-
Clause License, can be obtained from:

doi:10.5281/zenodo.7048585

and is authored by: C. Himpe.

References

[Arjona et al., 2011] Arjona, M. A., Cisneros-Gonazález, M., and Hernández,
C. (2011). Parameter estimation of a synchronous generator using a sine
cardinal perturbation and mixed stochastic-deterministic algorithms. IEEE
Transactions on Industrial Electronics, 58(2):486–493.

[Avant and Morganson, 2019] Avant, T. and Morganson, K. A. (2019). Observ-
ability properties of object pose estimation. In Proceedings of the American
Control Conference, pages 5134–5140.

[Babazadeh, 2022] Babazadeh, M. (2022). Gramian-based vulnerability analysis
of dynamic networks. IET Control Theory & Application, 16(6):625–637.

[Bianchin and Pasqualetti, 2020] Bianchin, G. and Pasqualetti, F. (2020).
Gramian-based optimization for the analysis and control of traﬃc networks.
IEEE Transactions on Intelligent Transportation Systems, 21(7):3013–3024.

[Blower and Newsham, 2021] Blower, G. and Newsham, S. L. (2021). Tau func-
tions associated with linear systems. In Operator Theory, Functional Analysis
and Applications, pages 63–94.

[Breiten and Stykel, 2021] Breiten, T. and Stykel, T. (2021). Balancing-related
model reduction methods. In Benner, P., Grivet-Talocia, S., Quarteroni, A.,
Rozza, G., Schilders, W., and Silveira, L. M., editors, System- and Data-
Driven Methods and Algorithms, volume 1 of Model Order Reduction, chap-
ter 2, pages 15–56. De Gruyter.

[Falkenhagen et al., 2022] Falkenhagen, U., Himpe, C., Kloft, C., Knoechel, J.,
and Huisinga, W. (2022). Sample-based robust model order reduction for
nonlinear systems biology models. In In Preparation.

8

[Glover, 1987] Glover, K. (1987). Model reduction: A tutorial on Hankel-norm
IFAC Proceedings Volume (10th

methods and lower bounds on L2 errors.
Triennial IFAC Congress on Automatic Control), 20(5):293–298.

[Grundel et al., 2019] Grundel, S., Himpe, C., and Saak, J. (2019). On empirical

system Gramians. Proc. Appl. Math. Mech., 19(1):e201900006.

[Halvarsson, 2008] Halvarsson, B. (2008). Comparison of some Gramian based
interaction measures. In 2008 IEEE Int Symposium on Computer-Aided Con-
trol System Design, pages 128–143.

[Himpe, 2017] Himpe, C. (2017). Combined State and Parameter Reduction
for Nonlinear Systems with an Application in Neuroscience. PhD thesis,
Westfälische Wilhelms-Universität Münster. Sierke Verlag Göttingen, ISBN
9783868448818.

[Himpe, 2018] Himpe, C. (2018). emgr – the Empirical Gramian Framework.

Algorithms, 11(7):91.

[Himpe, 2022] Himpe, C. (2022). emgr – EMpirical GRamian framework (ver-

sion 5.99). https://gramian.de.

[Himpe et al., 2021] Himpe, C., Grundel, S., and Benner, P. (2021). Model
order reduction for gas and energy networks. Journal of Mathematics in
Industry, 11:13.

[Himpe and Ohlberger, 2013] Himpe, C. and Ohlberger, M. (2013). A uniﬁed

software framework for empirical Gramians. J. Math., 2013:1–6.

[Hyun et al., 2017] Hyun, N.-s. P., Murali, V., and Verriest, E. I. (2017). Mini-
mum sensitivity analysis for accurate open-loop controllers in linear systems
using weighted Gramians. In Proceedings of the IEEE 56th Annual Conference
on Decision and Control, pages 114–119.

[Kreindler and Sarachik, 1964] Kreindler, E. and Sarachik, P. E. (1964). On the
concepts of controllability and observability of linear systems. IEEE Trans.
Autom. Control, 9(2):129–136.

[Krener and Ide, 2009] Krener, A. and Ide, K. (2009). Measures of unobserv-
ability. In Proceedings of the 48th IEEE Conference on Decision and Control,
2009 held jointly with the 2009 28th Chinese Control Conference, pages 6401–
6406.

[Lieberman et al., 2013] Lieberman, C. E., Fidkowski, K., Willcox, K., and Van
large-scale

Bloemen Waanders, B. (2013). Hessian-based model reduction:
inversion and prediction. Int. J. Numer. Methods Fluids, 71(2):135–150.

[MathWorks, nd] MathWorks (n.d.). Control System Toolbox.

[Méndez-Blanco and Özkan, 2021] Méndez-Blanco, C. S. and Özkan, L. (2021).
large-scale nonlinear models based on
Local parameter identiﬁability of
the output sensitivity covariance matrix. IFAC-PapersOnLine (16th IFAC
Symposium on Advanced Control of Chemical Processes ADCHEM 2021),
54(3):415–420.

9

[Mitra, 1969] Mitra, D. (1969). W matrix and the geometry of model equiv-
alence and reduction. Proceedings of the Institution of Electrical Engineers,
116(6):1101–1106.

[Raue et al., 2014] Raue, A., Karlsson, J., Saccomani, M. P., and Jirstrand, M.
(2014). Comparison of approaches for parameter identiﬁability analysis of
biological systems. Bioinformatics, 30(10):1440–1448.

[Rong and Michael, 2016] Rong, Z. and Michael, N. (2016). Detection and pre-
diction of near-term state estimation degradation via online nonlinear observ-
ability analysis. In IEEE International Symposium on Safety, Security, and
Rescue Robotics (SSRR), pages 28–33.

[Schelfhout and De Moor, 1995] Schelfhout, G. and De Moor, B. (1995). Time-
domain weighted balanced truncation. In 3rd European Control Conference,
pages 1–4.

[Sreeram, 2002] Sreeram, V. (2002). Frequency response error bounds for time-
weighted balanced truncation. In Proceedings of the 41st IEEE Conference
on Decision and Control, pages 3330–3331.

[Stigter and Joubert, 2021] Stigter, J. D. and Joubert, D. (2021). Comput-
ing measures of identiﬁability, observability and controllability for a dynamic
system model with the StrucID app. IFAC PapersOnLine (19th IFAC Sym-
posium on System Identiﬁcation), 54(7):138–143.

[Sun and Hahn, nd] Sun, C. and Hahn, J. (n.d.). Nonlinear Model Reduction

Routines for MATLAB.

[Tolks and Ament, 2017] Tolks, C. and Ament, C. (2017). Model order re-
duction of glucose-insulin homeostasis using empirical Gramians and bal-
anced truncation. IFAC-PapersOnline (Proceedings of the 20th IFAC World
Congress), 50(1):14735–14740.

[Villaverde et al., 2016] Villaverde, A. F., Barreiro, A., and Papachristodoulou,
A. (2016). Structural identiﬁability of dynamic systems biology models. PLOS
Computational Biology, 12(10):e1005153.

[Wikipedia contributors, 2022] Wikipedia contributors (2022). Gram matrix
— Wikipedia, the free encyclopedia. https://en.wikipedia.org/w/index.
[Online; accessed 23-August-
php?title=Gram_matrix&oldid=1093332712.
2022].

10

