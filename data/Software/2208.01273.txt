Industry 4.0 Asset Administration Shell (AAS):
Interoperable Skill-Based Service-Robots

Vineet Nagrath
Service Robotics
Technische Hochschule Ulm
89075 Ulm, Germany
Vineet.Nagrath@thu.de

Timo Blender
Service Robotics
Technische Hochschule Ulm
89075 Ulm, Germany
Timo.Blender@thu.de

Nayabrasul Shaik
Service Robotics
Technische Hochschule Ulm
89075 Ulm, Germany
Nayabrasul.Shaik@thu.de

Christian Schlegel
Service Robotics
Technische Hochschule Ulm
89075 Ulm, Germany
Christian.Schlegel@thu.de

2
2
0
2

g
u
A
2

]

O
R
.
s
c
[

1
v
3
7
2
1
0
.
8
0
2
2
:
v
i
X
r
a

Abstract—This paper describes our use of Industry 4.0 Asset
Administration Shells (AASs) in the context of service robots. We
use AASs with software components of service robots and with
complete service robot systems.

The AAS for a software component serves as a standardized
digital data sheet. It helps sysem builders at design time in
ﬁnding and selecting software components that match system-
level requirements of the systems to be built.

The AAS for a system comprises a data sheet for the system
and furthermore collects at runtime operational data and it
allows for skill-level commanding of the service robot.

AASs are generated and ﬁlled as part of our model-driven
development and composition workﬂow for service robotics.
AASs can serve as a key enabler for a standardized integration
and interaction with service robots.

Index Terms—service robotics, asset administration shell, skill-

based, model-driven software development

I. INTRODUCTION

An advanced service robot

is the promise of a multi-
purpose ﬂexible machine. It shall robustly fulﬁll tasks even
in open-ended environments and in workspaces shared with
e.g. persons. Users want to use a service robot as an assistant
that can be adapted with low effort to new tasks. Service
robots are not isolated machines anymore but they have to
interact with complex infrastructure and machinery (ﬁg. 1).
Identifying and selecting service robots that match upcoming
tasks is crucial as is the identiﬁcation and selection of ﬁtting
software components to equip a service robot with the required
capabilities.

The AAS is one of the key concepts of Industry 4.0 to
achieve ﬂexibility and variability within factories and across
value networks. An industry 4.0 Asset Administration Shell
(AAS) describes an asset in a standardized manner. It envi-
sions a standardized exchange of information about an asset
and describes how to interact with it. Submodels structure
information and one can present even the same information
within different and co-existing submodels that all address a
different domain.

This work-in-progress paper is supported by the German Federal Min-
istry for Economic Affairs and Energy (BMWi) in the programme ”De-
velopment of Digital Technologies (PAiCE)” under grant agreement No.
01MA17003D, project SeRoNet - Eine Plattform zur arbeitsteiligen Entwick-
lung von Serviceroboter-L¨osungen and by EFRE Program Baden-W¨urttemberg
2014-2020 (ZAFH Intralogistik).

Fig. 1. Our service robots for intralogistic tasks like transportation and
order picking in simulation, in our lab environment and in relevant real-
world settings. The robots are of type FESTO Robotino with a conveyor belt,
Segway mobile platform with a UR5 manipulator (called Larry) and MiR
250 mobile robot with both, a UR5e manipulator and a conveyor belt (called
Macy). The different types of robots are part of a mixed ﬂeet offering different
capabilities with respect to navigation and manipulation. Their software is built
with SMARTMDSD and they can now be commanded via their AASs.

At present many standardization efforts for submodels [1]
and efforts for harmonizing AASs take place and a bunch
of new AAS submodel templates are under development [2].
Nevertheless, there is still a tremendous need for real-world
examples that underpin what makes a reasonable scope and a
good template for a concrete AAS submodel and which kind
of submodels come with real beneﬁts.

We extended SMARTMDSD [3] to support the generation
of AASs for software components and service robot systems,
respectively. The implementation of the AAS uses the Eclipse
BaSyx SDK [4]. As ﬁrst use-cases, the AAS allows at runtime
to command a service robot at skill-level and to collect
individual performance indicators. The gained insights now
shape our next steps in extending our AAS submodels for
service robots.

II. THE SERVICE ROBOTICS BUSINESS ECOSYSTEM

The business ecosystem for service robotic software com-
ponents and systems now gains more and more momentum
[5] [6] [7] [8] [9]. Fig. 2 gives an overview on the service
robotics business ecosystem with selected roles, assets, market

 
 
 
 
 
 
places and role-speciﬁc tool support. The core is to manage the
interfaces between the different roles and the different assets
such that all the participants can work independently of each
other. The overall objective is to enable composability and
compositionality of the assets in the ecosystem while adhering
to the principle of separation of roles. Of course, this comes
with structures like service-oriented software components with
e.g. standardized state automatons and conﬁguration interfaces
to enable composition of control ﬂows and data ﬂows at design
time (see ﬁg. 3 and 4) and even at runtime. The full details
can be found in [5].

Fig. 4. The view of the system builder in SMARTMDSD: component selec-
tion, component composition, adding task plots and performing deployment.

example, the digital data sheet represents all the information
you need to know in order to predict how this asset behaves
in your setting and to decide whether it ﬁts your needs. A
digital data sheet is a model of the asset comprising all the
information a user needs to know. It is not suited for synthesis
of an asset and does not disclose internals. In that sense, the
various aspects of a digital data sheet of the service robotics
ecosystem are in line with submodels of an AAS.

III. AAS AT DESIGN TIME

A. AAS for a Software Component at Design Time

Fig. 5 shows an AAS of a software component. The
semantics of the submodels and their elements is either deﬁned
by a pre-given standard for a submodel or it is given via the
reference into the (domain-speciﬁc) models used by the model-
driven toolchain SMARTMDSD.

The submodel ComponentDeﬁnition gets directly ﬁlled from
the model of the software component used in SMARTMDSD
by the component developer to develop and build the software
component. In the same way, the submodel Capabilities gets
ﬁlled by the skills assigned by component developers to the
(sets of) software component(s) and available in the SMART-
MDSD model(s) of the (sets of) software component(s).
The submodel TechnicalData comprises typical data sheet
information in the form of name/value pairs like the license,
the kind of environment in which the asset can be used etc. The
submodel Operations comprises a standard set of operations
to invoke the skills listed in the Capabilities.

There exist different interaction patterns for AASs [10]: ﬁle
exchange is called type 1, access via an API is called type 2
and peer-to-peer interaction is called type 3. We use an AAS
for a (set of) software component(s) as type 1 AAS (download
the AAS by the system builder as AASX XML ﬁle to ﬁnd,
check, select software components) or as type 2 AAS (use an
API to a local server of the downloaded AAS to view, extract
and process relevant information for making your decisions).

Fig. 2. Overview on the service robotics ecosystem with different roles,
assets with digital data sheets, tool support and market places. It is based on
compsability, compositionality and separation of roles. The open-source and
free-to-use Eclipse-based model-driven toolchain SMARTMDSD is the easiest
way to participate in the service robotics software business ecosystem as it
provides role-speciﬁc support for the different ecosystem participants (such
as component developers, system builders, and others).

Fig. 3. The toolchain SMARTMDSD can be extended by plugins (e.g. to
support the generation of AASs). Mixed-Port Components interface between
composable software components (indicated by the red ports: these fully
adhere to the ecosystem composition structures) and other worlds (such as
ROS, OPC UA, and others: these do not adhere to the ecosystem composition
structures but there is a need to interface to them).

Although these composition structures have been driven by
the needs of service robot systems, they are in line with the
needs and the concepts of many industry 4.0 scenarios. For

Fig. 5. The XML ﬁle of the AAS of the software component for accessing the Webots robot simulator displayed via the AASX Package Explorer. The AAS
of a software component comprises the submodels ComponentDeﬁnition, Capabilities, TechnicalData, Operations, Nameplate and Documentation.

B. AAS for a System at Design Time

Fig. 6 shows an AAS of a service robot system. Again, the
submodels get ﬁlled from the models available via SMART-
MDSD when composing the system as system builder. The
BillOfMaterials lists the components used in the system com-
position and the Capabilities is the complete list of all skills
given by all the used software components and all the task
plots added in the system composition step. However, there
are good reasons to present only a subset of the skills and
task plots to the outside and it might even be of interest to not
give full insight into the bill of materials. Thus, in the future,
we intend to exploit the access control mechanisms of AASs.
For a service robot system, we again use the AAS of the
system as type 1 AAS (download of the AAS ﬁle) for ﬁnding,
checking and selecting a service robot or as type 2 AAS
(use an API to a local server of the downloaded AAS ﬁle
to view, extract and process relevant information for making
your decision). The AAS of a service robot system can also
hold accumulated operational data to support decisions such
as e.g. hours of operation, maintenance data and more.

IV. AAS AT RUNTIME

A. AAS for Software Components at Runtime

Right now, we do not use the AASs of the software
components onboard of a service robot system at runtime to
interact with individual software components (parameterizing
software components, invoking their skills, etc.). At runtime,
the parameterizations of software components, the selection of
modes and the invocation of capabilities (in our terms skills)
onboard the robot is done without the indirection of the AAS
as we have access to the ﬁrst class citizen models of the

software components which come straight from the model-
driven software development, composition and deployment
processes.

B. AAS for a System at Runtime

Fig. 7 shows the type 2 use of an AAS of a service
robotic system at runtime. The Capabilities can be used with
Operations. Individual instances of a capability can be pushed
(command it for execution) which returns an identiﬁer that
is then used for the get status operation (query the state
the get output
of execution of the referenced command),
operation (get its result) and the delete operation (remove the
referenced command either before its execution or remove it
after its completion and after you got its output).

A commanded capability can be in the states pending
(execution not yet started), executing (in execution), success
(execution successfully completed), error (completed but with-
out success or with errors) or deleted (the identiﬁer does not
refer to a known commanded instance of a capability).

We do not provide an individual operation per capability but
a generic set of operations to be used with all the capabilities.
You can also push several instances of the same capability as
they all get unique identiﬁers. It is the robot which arranges
the order of the execution by itself. A robot rejects a pushed
command if e.g. the parameters or constraints do not ﬁt or
cannot be matched. It then runs immediately into an error for
that command with further details in the result so that the
reason for the reject can be checked.

This kind of command interface is quite typical for complex
systems like service robots which have their own management
of resources and skills. We do not make an allocation of the
service robot, select a particular mode, set the parameters for

Fig. 6. The XML ﬁle of the AAS of the robot system Larry deployed in the Webots robot simulator displayed via the AASX Package Explorer. The AAS
of a service robotic system comprises the submodels BillOfMaterials, TechnicalData, Operations, Nameplate, Documentation and Capabilities.

Fig. 7. Using the AAS of a service robot system at runtime for commanding tasks and for reporting operational data. The outside access to the AAS conforms
to the standardized structures of the AAS information models and be done via whatever technology is supported by the BaSyx SDK. Inside the AAS, we
connect to a Mixed Port Component via Web Sockets (yellow ports). The AAS is implemented via the Java version of the BaSyx SDK while the software
built with SMARTMDSD is C++. We could also use e.g. OPC UA for the yellow ports given that the BaSyx SDK fully covers the needed mechanisms. The
yellow ports could be removed in case the BaSyx C++ SDK is completed. The Mixed Port Component holds the business logic to interact with the composable
software components of the robotic system (red ports). The advantage of the decoupling via the yellow ports is that we are free to implement any business
logic inside the Mixed Port Component.

OPEN ACCESS

This paper

the terms of

is licensed under

the Cre-
ative Commons Attribution 4.0 International License (http:
//creativecommons.org/licenses/by/4.0/), which permits use,
sharing, adaptation, distribution and reproduction in any
medium or format, as long as you give appropriate credit to the
original author(s) and the source, provide a link to the Creative
Commons license and indicate if changes were made.

REFERENCES

[1] Plattform Industrie 4.0 in cooperation with ZVEI, Speciﬁcation Sub-
model Templates of the Asset Administration Shell, Federal Ministry for
Economic Affairs and Energy (BMWi), November 2020.

[2] “IDTA - Industrial Digital Twin Association.” [Online]. Available:

https://industrialdigitaltwin.org/en/content-hub/submodels

[3] “SmartMDSD - Integrated Software Development Environment for
system composition in an robotics software business ecosystem.”
[Online]. Available: https://wiki.servicerobotik-ulm.de/tutorials:start
[4] “Eclipse BaSyx for Industry 4.0.” [Online]. Available: https://www.

eclipse.org/basyx/

[5] C. Schlegel, A. Lotz, M. Lutz, and D. Stampfer, Composition, Separation
of Roles and Model-Driven Approaches as Enabler of a Robotics
Software Ecosystem. Cham: Springer International Publishing, 2021,
pp. 53–108.

[6] “RobMoSys - Composable Models and Software for Robotics Systems:
Towards an EU Digital Industrial Platform for Robotics.” [Online].
Available: https://robmosys.eu/

[7] “SeRoNet

– Eine
von Serviceroboter-L¨osungen.”
seronet-projekt.de/

Plattform zur

arbeitsteiligen Entwicklung
https://www.

[Online]. Available:

[8] “EU Digital

Industrial Platform for Robotics.” [Online]. Avail-
https://sparc-robotics-portal.eu/documents/22888/327288/2020+

able:
ERF+TG+Software.pdf/348b1f49-56ed-4f75-bef6-52a75bd60df9
[9] “Marktplatz f¨ur Servicerobotik Bausteine und Systeme.” [Online].

Available: https://xito.one/ecosystem.html

[10] Asset Administration
in

Shell Reading Guide, Platform Industrie
[Online].
January
https://www.plattform-i40.de/IP/Redaktion/EN/Downloads/

4.0
Available:
Publikation/AAS-ReadingGuide202201.html

cooperation with

IDTA,

2022.

[11] A. Sidorenko, M. Volkmann, W. Motsch, A. Wagner, and M. Ruskowski,
“An OPC UA Model of the Skill Execution Interaction Protocol for
the Active Asset Administration Shell,” Procedia Manufacturing,
vol. 55, pp. 191–199, 2021,
[Online]. Available:
https://www.sciencedirect.com/science/article/pii/S2351978921002249

fAIM 2021.

this very mode and then invoke the related operation. We also
do not let the service robot go into a bidding process for
offered jobs (as would be the case with a type 3 AAS). Instead,
we enable every entitled entity to push a job to the robot for
execution and have both, the immediate rejection by the robot
without execution as well as the execution with either success
or error and details of the outcome reported via the results.

Another important part of the runtime use of the AAS is
to collect all the operational data such as kilometers travelled,
success rates of task completion, time needed for tasks etc.
the AAS allows for a standardized interface to
Basically,
access this information, to monitor a service robot, to assess
its performance and to command it.

V. CONCLUSION AND FUTURE WORK

An AAS for a service robot has valuable use-cases at
design time and at runtime. It is not meant to have all the
communication inside a service robot organized via an AAS
or by only using OPC UA. It is about the right granularity
of providing a standardized access to complex machines and
let them interact via standardized means and protocols. It got
obvious that a type 1 AAS can serve as a digital data sheet
whereas a type 2 AAS with a skill-based approach ﬁts best
for embedding service robots into Industry 4.0 settings [11].
Already now, one can use the virtual machine and the related
tutorials to get an impression and to play around with our
AASs for service robotic systems.

The next steps are extensions of the skill-based interface
to better include a kind of bidding in the commanding so
that we do not just end up in an error state with rejected
the set of
as explanation. Thereto, we will extend both,
constraints and parameters that can be given with a push
and enrich the information that is returned in acknowledging
respectively rejecting a given command.

It is important to note that we can easily adjust our submodel
templates to upcoming standardizations as we use a model-
driven approach with DSLs (domain speciﬁc languages) to
map from our SMARTMDSD models to AAS submodel
templates.

RESOURCES

Ready-to-run downloads and tutorials:

• https://wiki.servicerobotik-ulm.de/virtual-machine
• https://wiki.servicerobotik-ulm.de/tutorials:start

AAS for components and systems:

• https://wiki.servicerobotik-ulm.de/tutorials:start#adding

aas to components and systems

• https://wiki.servicerobotik-ulm.de/tutorials:start#

interacting with the aas

A bigger picture of the kind of service robotic systems and
applications we are addressing:

• https://www.youtube.com/user/RoboticsAtHsUlm/videos

