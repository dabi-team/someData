Do Fewer Tiers Mean Fewer Tears? Eliminating Web Stack Components to
Improve Interoperability

Adrian Ramsingh, Jeremy Singer, Phil Trinder
University of Glasgow
ﬁrstname.lastname@glasgow.ac.uk

2
2
0
2

l
u
J

6
1

]
L
P
.
s
c
[

1
v
9
1
0
8
0
.
7
0
2
2
:
v
i
X
r
a

Abstract

Web applications are structured as multi-tier stacks of
components. Each component may be written in a different
language and interoperate using a variety of protocols. Such
interoperation increases developer effort, can introduce se-
curity vulnerabilities, may reduce performance and require
additional resources. A range of approaches have been ex-
plored to minimise web stack interoperation.

This paper explores a pragmatic approach to re-
ducing web stack interoperation, namely eliminating a
tier/component. That is, we explore the implications of
eliminating the Apache web server in a JAPyL web stack:
Jupyter Notebook, Apache, Python, Linux, and replacing it
with PHP libraries. We conduct a systematic study to inves-
tigate the implications for web stack performance, resource
consumption, security, and programming effort.

1 Introduction

The architecture of a modern web application comprises
a multi-tier stack of components. The classic example
is the 4-tier Linux, Apache, MySQL, and PHP (LAMP)
stack [12], cf. Figure 1. The components are written in dif-
ferent languages and interoperate using standard protocols
like HTTP or SQL.

A diverse set of components and languages raises a num-
(1) Interoperation increases developer
ber of challenges.
effort: the developer must be ﬂuent in all of the languages,
components and their interactions, i.e. be a full stack devel-
oper. (2) Interoperation can introduce security vulnerabil-
ities like SQL injection. (3) Interoperation reduces perfor-
mance as requests must be handled by multiple components,
and data must be marshalled between them. (4) Interoperat-
ing multiple components consumes additional resources as
memory and compute time is required for each component.
A range of approaches have been used to improve inter-
operation in web stacks. Some stacks focus on a single lan-
guage, e.g. MEAN focuses on Javascript [6]. Other stacks

Figure 1. 4-Tier LAMP Architecture

use a common VM to minimise the interoperation over-
heads between languages, e.g.
the .NET framework uses
the Common Language Runtime [9]. Sometimes web stack
languages are combined, e.g. PyHyp combines Python and
PHP [2]. The most radical approach is to combine all
web stack languages into a single tierless language, such
as Links [5] or Hop [20].

We take a less radical but more pragmatic approach to
simplifying web stacks. We investigate the implications of
replacing a tier or component, with code libraries. That
is, we explore the implications of eliminating the Apache
web server in a Jupyter Notebook web stack called JAPyL
(Jupyter, Apache, Python, Linux), replacing it with a PHP
threaded library.

This paper explores the following hypotheses for web
stack tiers.
(1) Does reducing the number of tiers im-
prove web stack performance i.e. latency, throughput. (Sec-
tion 4.2)? (2) Does reducing the number of tiers reduce
resource consumption, i.e. core utilization and memory us-

 
 
 
 
 
 
age (Section 4.3)? (3) What are the security implications
of eliminating a tier (Section 4.4)? (4) Does reducing the
number of tiers make the construction of web applications
easier, i.e. lines of code, cyclomatic complexity, size of in-
teroperation code (Section 4.5)?

As a basis for investigating these hypotheses we con-
struct and compare two web stacks. The ﬁrst, JAPyL, is
a conventional 4-tier stack comprising a Jupyter notebook,
an Apache web server, and a Python kernel, running on
Linux (Section 3.1). The second, JPL, is a 3-tier stack that
eliminates the Apache server and comprises a Jupyter note-
book, PHP React (thread) library and kernel on Linux (Sec-
tion 3.2).

2 Related Work

2.1

Interoperability Challenges

Traditional web stacks like LAMP require the developer
to interoperate a number of components, and this raises a
number of challenges.

Increased Developer Effort. The developer must ef-
fectively use multiple components and languages, and their
interfaces i.e. be a full stack developer [17].

Semantic Friction, or computational impedance mis-
match, arises when the developer must interoperate differ-
ent programming language paradigms. For example, many
web stacks interoperate an imperative programming lan-
guage with a relational database language, e.g. PHP & SQL
[11].

Security Vulnerabilities. Interoperating multiple com-
ponents increases the attack surface of the application, e.g.
in LAMP, interoperating Apache with PHP can leave the
stack vulnerable to Cross Site Scripting (XSS) if security
headers are not implemented or web forms are not properly
sanitized [7].

Performance Overheads can be introduced by inter-
operation, e.g. data must be marshalled between compo-
nents [14], and memory and compute resources must be
available for each component.

2.2 Reducing Webstack Interoperation

Some approaches to reducing interoperation in modern

multi-tier web stacks are as follows.

Interoperation is reduced by consistently using a sin-
gle language as far as possible throughout the stack. For
example, the MEAN web stack uses JavaScript as the pri-
mary programming language and composes MongoDB, Ex-
pressJS, AngularJS & NodeJS [6]. MEAN typically out-
performs LAMP by 2.5x or more due to the computational
inefﬁciencies of PHP, and the inefﬁciency of Apache in han-
dling I/O operations [4].

A Common Language Runtime or virtual machine can
ease interoperation. For example, the .NET Framework typ-
ically composes WinForms, ADO.NET, Framework Class
Library and the Common Language Runtime (CLR) [9].
Having the CLR as a common runtime facilitates the in-
teroperation of a number of Microsoft technologies like
ASP.NET, VB.NET, C#, F#, etc. However .NET is propri-
etary and only available on the Windows Operating System.
Interoperating a wider range of languages on a common
VM is also possible, e.g. the Trufﬂe framework interoper-
ates JavaScript, Ruby, Python, JAVA, Scala, C++, etc. It
does so using the GraalVM compiler and an abstract syntax
tree interpreter. The platform is, however, experimental and
has some performance overheads, e.g. the Trufﬂe VM does
not marshal objects at the language boundary but rather di-
rectly passes them from one language to the next [10].

Combining web stack languages.

Interoperation in
our JPL webstack could be reduced by using PyHyp [2],
a language that combines the Python used in Jupyter and
PHP. PyHyp is, however, relatively immature and JPL uses
Python and PHP as established technologies.

Tierless Languages. The most radical approach is to
combine all of the webstack languages into a single tier-
less language, as exempliﬁed by languages like Links [5] or
Hop [20]. Here developers write both client and server as a
single program in a single language. The client and server
code is simultaneously checked by the compiler, and com-
piled to the required component languages. For example,
Links compiles to HTML & JavaScript for the client side
and to SQL on the server-side to interact with the database
system. While conceptually appealing, tierless languages
face some challenges in practice. For example, Appendix
A [1] shows an instance where Links requires additional de-
veloper effort compared to PHP and MySQL. Tierless lan-
guages have had limited uptake to date, and tiered architec-
tures remain commonplace.

2.3 Hosting Jupyter Notebooks

The Jupyter Platform has gained in popularity especially
in the realm of data science because it allows users to pro-
cess, analyse & manipulate data; and create analytical and
statistical models with just a few lines of code that can be
tested straight from a browser user interface. In addition,
Jupyter Notebooks allows for the interoperation of differ-
ent languages, such as the popular R-Python combination
used by data scientists, through custom techniques such as
subkernels and magics.

Generally, the standard way to make Jupyter Notebooks
web accessible is to use the Jupyter, Apache, Python, Linux
(JAPyL) web stack (Figure 2), and embed the Notebook
into a webpage or site with an Apache Web Server as a
Reverse Proxy [18]. Here, Apache is usually interposed

2

between the client and the Jupyter Server, taking requests
from clients and forwarding them to Jupyter. This is done
in order to create an extra layer of security to protect the
Jupyter Server [16]. Appendix B [1] provides an example
of the conﬁgurations a developer has to implement in both
Apache and the Jupyter Server to allow for communication
between the two components.

Figure 3. JAPyL Defense-in-Depth Security
Model

3.1.2 Declarative Conﬁguration and Security

The security mechanisms are typically declaratively speci-
ﬁed in either the Jupyter Server or Apache [15]. Often se-
curity features are implemented as runtime parameters. Ap-
pendix C [1] provides examples of some of the declarative
security mechanisms used in JAPyL.

It is commonly believed that such declarative speciﬁ-
cations in some domain-speciﬁc language such as HTML,
XML, or Apache Conﬁgs makes things easier for the de-
veloper by raising the level of abstraction. Nonetheless
the developer must be ﬂuent in a range of languages, and
for JAPyL these are (1) Jupyter Conﬁgurations (2) Jupyter
Notebook Interoperability Techniques i.e. Kernel, Subker-
nel & Magic Implementations (3) Several different lan-
guages including JSON, Apache Conﬁgs, etc [16].

Figure 2. 4-Tier JAPyL Architecture

3 Case Studies

We explore the implications of eliminating a tier in a web
stack, focusing on how the interoperation changes. Specif-
ically we compare two Jupyter notebook stacks: JAPyL
that composes Jupyter, Apache, Python and Linux in 4 tiers
(Figure 2); and JPL that replaces Apache with a PHP thread
library and composes Jupyter, PHP and Linux (Figure 4) in
3 tiers.

3.1 JAPyL

3.2

JPL

JAPyL is a conventional 4-tier architecture composing

Jupyter, Apache, Python and Linux (Figure 2).

3.1.1 Security Conﬁgurations

In addition to the Reverse Proxy JAPyL also utilises a
Defense-in-Depth multi-layered security approach (Fig-
ure 3). That is, various security mechanisms are deployed
throughout the stack. The intention is that if an attacker tar-
gets the Jupyter Notebook online and is able to penetrate
one layer, another layer may thwart the attack.

The JAPyL Defense-in-Depth model comprises: (1) Se-
curity Headers (2) SSL Encryption (3) URL Port Spooﬁng
(4) IP Whitelisting / Blacklisting (5) Read Only Notebook
Cells (6) Password Authentication (7) Password Encryption
(8) Port Spooﬁng.

JPL (Jupyter, PHP, Linux) is a 3-tier architecture that
carefully replicates the web service and security mecha-
nisms of JAPyL (Figure 4). The Apache tier is replaced
by the ReactPHP thread library, and some hand-coded PHP
security code.

3.2.1

Imperative Conﬁguration and Security

In contrast to JAPyL’s declarative speciﬁcation of conﬁgu-
ration and security much of the implementation is imper-
ative. That is, only PHP was written to perform the nec-
essary conﬁgurations as demonstrated by the examples in
Appendix E [1].

Using an imperative paradigm means that the level of ab-
straction has decreased compared with JAPyL. However the
developer has the expressiveness to implement the neces-

3

sary functionalities, and can potentially implement features
not supported by the JAPyL DSLs [8].

Figure 4. 3-Tier JPL Architecture

Stacks are mostly deployed in virtualized environments
like Docker [21], it is far easier to obtain accurate core
and memory resource measurements on the Raspberry Pi.
Where possible, the components used in the JAPyL and JPL
stacks are identical, and as follows: Docker 18.09, Rasp-
bian Stretch, Jupyter Server 5.7.8, Ubuntu 16.04. JAPyL
uses Apache Server 2.4.34, and JPL ReactPHP 0.8.4. Ex-
periments for the Docker platforms is conducted on an In-
tel Core i3 system, Windows 10 Operating System with
2.23GHz and 8GB of RAM.

Two existing Jupyter Notebooks not written by the au-
thors are downloaded from GitHub. They are selected to
be well designed [19], i.e.
to have a notebook title & in-
troduction, descriptions of the model parameters, and of the
data parameters, and to import packages. The notebooks are
simply loaded by the JAPyL and JPL stacks.

To minimise variability, the reported results are the me-

dian of three consecutive benchmark executions.

3.2.2 Why PHP?

4.2 Performance: Latency and Throughput

The rationale for using PHP to eliminate a web component
is twofold. Not only is it one of the most popular and ma-
ture web programming technologies, but also offers a range
of technical beneﬁts [13], as follows. PHP provides sim-
ple parsing and marshalling, e.g. parsing JSON and XML
with a single line of code. PHP supports multiple major
databases including MySQL, dBase, IBM DB2, InterBase,
FrontBase, ODBC, PostgreSQL, SQLite, etc. PHP is a ma-
ture technology, and supported by a range of frameworks
like CakePHP, CodeIgniter, Zend, Larvarel that not only
make development faster but also provide ﬂexible coding
styles and interfaces for programmers.

For our interoperability study, the most signiﬁcant ben-
eﬁt of PHP is that it follows the familiar object oriented
paradigm. Hence developers can, for example, create cus-
tom classes, and interoperate relatively smoothly with other
object oriented languages in the stack like Java and, cru-
cially for our study, Python.

Languages that are very similar interoperate with less se-
mantic friction. Python and PHP are indeed similar, and
have even been combined into PyHyp [2]. That is both lan-
guages support class creation, encapsulation, functions, im-
mutable data, inheritance, object creation, polymorphism,
and shared state and shared memory.

4 Evaluation

4.1 Experiment Design

Given the reduced number of tiers in JPL compared with
JAPyL and that PHP is similar to Python, it is reasonable to
expect JPL to outperform JAPyL.

Figure 5 shows the request latencies of JAPyL and JPL
as the number of concurrent connections varies from 50 to
1000 on all platforms. Contrary to our expectations it shows
that JPL latency is two or three times greater than JAPyL.
The results are almost similar for the RaspberryPi as shown
in Figure 6.

Figure 5. JAPyL vs JPL Latencies (Docker)

We evaluate the performance and programmability of
JPL by comparing it
to JAPyL stacks on two plat-
forms: Docker & native Raspberry Pi 3. While Jupyter

Figure 7 shows the request throughput of JAPyL and
JPL as the number of connections varies. It also confounds
our expectation by revealing that JPL throughput is two
orders of magnitude lower than for JAPyL. We attribute

4

Figure 6. JAPyL vs JPL Latencies (Raspber-
ryPi)

Figure 8. JAPyL vs JPL Throughput (Rasp-
berryPi)

this to relatively poor thread management in the PHP React
[13], compared with Apache that is designed
library
for high degrees of parallelism and to effectively utilise
multicore systems [12].

on the Raspberry Pi platform. Again, contrary to expecta-
tion JPL utilisation is typically 20% greater than JAPyL.

Figure 7. JAPyL vs JPL Throughput (Docker)

4.3 Resource Usage: Core Utilization, Memory

Overhead

As the JPL stack eliminates Apache and runs fewer com-
ponents it is reasonable to expect JPL to consume less re-
source than JAPyL.

Figure 9 shows the CPU utilisation of JAPyL and JPL as
they process https requests with 100 concurrent connections

5

Figure 9. JAPyL vs JPL CPU Resource Utili-
sation (RaspberryPi)

A possible explanation for this is memory leaks. This
refers to a long running PHP request where the amount of
memory utilised will slowly increase over time. There is
some memory in PHP which just cannot be freed up on a
regular basis due to its reliance on reference counting to
manage memory [13].

Memory Usage Table 1 shows the memory residencies
of the JAPyL and JPL on the Docker Platform while being
initialized and hosting the relevant notebooks. With fewer

components in JPL, overall size might be expected to be
smaller, but it is 135MB greater. Table 2 reveals why: PHP
is much larger than Apache.

Table 1. Memory Residencies

Stack
JAPyL
JPL

Size(MB)
645
860

Table 4. Lines of Code (LOC)

Functionality
Embed Notebook
Host Webpage
Reverse Proxy
Security Conﬁgs
Language Processing
Messaging
Total

JAPyL JPL
36
26
23
31
63
85
364

10
29
33
21
527
11
631

Table 2. Component Size

4.5.2 Code Complexity

Object
Apache
PHP

Size(MB)
165
390

4.4 Security

Table 3 shows that the JAPyL Defense-in-Depth security
model can be replicated in JPL, but requires key functions to
be hand coded. In some cases, such as the security header
feature, JPL was able to surpass JAPyL as the implemen-
tation could be automated with just a few lines of code as
demonstrated in Appendix E [1]. That is, hand coding en-
ables greater security than relying on Apache’s declarative
security options.

Table 3. JAPyL vs JPL Security Implementa-
tions

Read Only Cells

JSON Coding
Password Encryption Command Line Command Line

JSON Coding

Port Spooﬁng
SSL Encryption
IP Whitelisting
IP Blacklisting
Security Headers

Hand Coded
Apache Conﬁgs
Hand Coded
Hand Coded
Hand Coded

Hand Coded
Hand Coded
Hand Coded
Hand Coded
Automated

4.5 Programmability

4.5.1 Code Size

Code size is widely recognised as a measure of developer
effort and of maintainability. Table 4 enumerates the lines
of code required to implement the functionalities of the
JAPyL and JPL stacks. Implementing the JPL web stack
requires 267 fewer lines of code, or 42% less code. This
is to be expected because there are fewer languages and
paradigms to be implemented as shown in Table 5. JAPyL
utilises 3 programming languages compared to 2 in JPL.

6

Language Implementation Code complexity is depen-
dent on how many paradigms the programmer must use
and how many control ﬂows must be managed [3]. Our
expectation is that since JPL uses fewer programming lan-
guages and paradigms than JAPyL in implementation, the
code complexity will be less.

However, our experiments reveal that the structural code
complexity needed to interoperate the components and PHP
language in JPL is slightly higher when compared to JAPyL
based on Cyclomatic Complexity. Table 6 shows that
JAPyL has a rating of 19 when compared to 21 in JPL. This
means that the code in JPL has more control ﬂows that have
to be managed.

This is crucial because despite having fewer lines of
codes, a higher complexity number means that the program-
mer may have to deal with more control paths in the JPL
code which could lead to more unexpected results and de-
fects such as poor performance and higher resource con-
sumption due to interoperation. Casti et al. state that just
because a system or application has fewer components or
layers does not usually make make it simpler or less com-
plex. You still have to take into account the processes and
behaviour interactions which may be impacted as well as
the compatibility factor between system components and
languages [3].

5 Conclusion

Summary We have explored whether reducing the num-
ber of tiers/components eases the construction of web ap-
plications by reducing interoperability. We did so by sys-
tematically comparing the 4-tier JAPyL and 3-tier JPL web
stacks (Section 3). The key ﬁndings from our case study are
as follows.

Performance. Eliminating the Apache component, and
associated interoperation, in JPL and replacing it with a
PHP threaded library increases latency (Figure 5) and re-
duces throughput (Figure 7). We believe this reﬂects that
the Apache thread management is far superior to that pro-
vided by the PHP React library (Section 4.2).

Table 5. Implementation Languages and Paradigm Comparison.

JAPyL

JPL
HTML Declarative
Declarative
PHP
Declarative
PHP
Declarative
PHP
Object-Oriented
PHP
Data Serialization
PHP
3
2

Paradigms
JPL
Declarative
Imperative
Imperative
Imperative
Object-Oriented
Imperative
2

Languages

Functionality
Embed Notebook
Host Webpage
Reverse Proxy
Security Settings
Language Processing
Messaging
Total

JAPyL
HTML
Apache Conﬁgs
Apache Conﬁgs
Apache Conﬁgs
Python
JSON
4

Table 6. Cyclomatic Complexity (cc)

Functionality
Embed Notebook
Host Webpage
Reverse Proxy
Security Conﬁgs
Language Processing
Messaging
Total

JAPyL JPL

1
1
1
1
13
2
19

1
1
1
5
1
12
21

Resource Consumption Despite replacing Apache, JPL
consumes more resources. JPL uses 30% more core cycles,
and (Figure 9), and we believe that this is due to Apache be-
ing better at thread management. JPL uses 33% more mem-
ory (Table 1) as PHP is much larger (390Mb) than Apache
(165Mb) (Section 4.3).

Security provided by JPL and JAPyL is almost identical,
although hand-written PHP in JPL can provide additional
capabilities, e.g. automating the handling of security head-
ers. This is a beneﬁt of the lower-level imperative security
coding (Section 4.4).
Programmability

Apache
tier/component results in the following.
There is a
reduction in number of programming languages and
paradigms utilised (Table 5) and a smaller code size (Ta-
ble 4) when compared to JAPyL. This means less developer
effort for stack implementation and reduced chances of
semantic friction.

Eliminating

the

Reﬂection. We anticipated that eliminating a tier/ com-
ponent would simplify the stack. By reducing interopera-
tion we hoped to improve performance and security, and to
reduce resource consumption and programming effort. Our
JAPyL/JPL study confounded these expectations. It is pos-
sible that substituting Apache with PHP was a poor deci-
sion, and that using a language with better memory man-
agement and support for multi-threading, like Erlang or Go,
would meet these expectations.

Future work will further investigate replacing mono-
lithic stack components with programming language tech-

7

nologies for a variety of stacks, domains, and program-
ming languages. We intend that tier elimination has min-
imal impact on an application stack’s function, but seek to
explore potential non-functional beneﬁts. To this end we
are currently comparing a conventional, and a tierless Clean
iTask/mTask, implementation of a smart campus IoT stack.

References

[1] R. Adrian, S. Jeremy, and P. Trinder. Online ap-
pendix: Do fewer tiers mean fewer tears?, 2020.
http://www.dcs.gla.ac.uk/˜ramsad/
papers/FewerTiersAppendix.pdf.

[2] E. Barrett, C. F. Bolz, L. Diekmann, and L. Tratt. Fine-
grained language composition: A case study. arXiv
preprint arXiv:1503.08623, 2015.

[3] J. L. Casti. On system complexity:

Identiﬁcation,
measurement, and management. In Complexity, lan-
guage, and life: Mathematical approaches, pages
146–173. Springer, 1986.

[4] I. K. Chaniotis, K.-I. D. Kyriakou, and N. D. Tselikas.
Is node. js a viable option for building modern web
applications? a performance evaluation study. Com-
puting, 97(10):1023–1044, 2015.

[5] E. Cooper, S. Lindley, P. Wadler, and J. Yallop. Links:
In International
Web programming without tiers.
Symposium on Formal Methods for Components and
Objects, pages 266–296. Springer, 2006.

[6] B. Dayley. Node.js, MongoDB, and AngularJS web
development. Addison-Wesley Professional, 2014.

[7] D. Endler. The evolution of cross site scripting attacks.
Technical report, Technical report, iDEFENSE Labs,
2002.

[8] B. N. Freeman-Benson. Kaleidoscope: mixing ob-
In
jects, constraints, and imperative programming.

[21] A. Zonca and R. S. Sinkovits. Deploying jupyter note-
books at scale on xsede resources for science gateways
In Proceedings of the Practice and
and workshops.
Experience on Advanced Research Computing, pages
1–7. 2018.

ACM SIGPLAN Notices, volume 25, pages 77–88.
ACM, 1990.

[9] J. J. Gough and K. J. Gough. Compiling for the.
Net Common Language Runtime. Prentice Hall PTR,
2001.

[10] M. Grimmer, R. Schatz, C. Seaton, T. W¨urthinger,
M. Luj´an, and H. M¨ossenb¨ock. Cross-language in-
ACM
teroperability in a multi-language runtime.
Transactions on Programming Languages and Sys-
tems (TOPLAS), 40(2):8, 2018.

[11] C. Ireland, D. Bowers, M. Newton, and K. Waugh.
A classiﬁcation of object-relational impedance mis-
match. In 2009 First International Confernce on Ad-
vances in Databases, Knowledge, and Data Applica-
tions, pages 36–43. IEEE, 2009.

[12] J. Lee and B. Ware. Open Source Web Development
with LAMP: Using Linux, Apache, MySQL, Perl, and
PHP. Addison-Wesley Professional, 2003.

[13] R. Lerdorf, K. Tatroe, B. Kaehms, and R. McGredy.
Programming Php. ” O’Reilly Media, Inc.”, 2002.

[14] W. H. Li, D. R. White, and J. Singer.

Jvm-hosted
languages:
they talk the talk, but do they walk the
walk? In Proceedings of the 2013 International Con-
ference on Principles and Practices of Programming
on the Java Platform: Virtual Machines, Languages,
and Tools, pages 101–112. ACM, 2013.

[15] J. W. Lloyd. Practical advtanages of declarative pro-
gramming. In GULP-PRODE (1), pages 18–30, 1994.

[16] M. Milligan.

Interactive hpc gateways with jupyter
In Proceedings of the Practice and
and jupyterhub.
Experience in Advanced Research Computing 2017 on
Sustainability, Success and Impact, page 63. ACM,
2017.

[17] C. Northwood. The Full Stack Developer: Your Essen-
tial Guide to the Everyday Skills Expected of a Modern
Full Stack Web Developer. Springer, 2018.

[18] I. Ristic. Apache security. O’Reilly Media, 2005.

[19] A. Rule, A. Tabard, and J. D. Hollan. Exploration and
explanation in computational notebooks. In Proceed-
ings of the 2018 CHI Conference on Human Factors
in Computing Systems, page 32. ACM, 2018.

[20] M. Serrano, E. Gallesio, and F. Loitsch. Hop: a lan-
In OOPSLA

guage for programming the web 2. 0.
Companion, pages 975–985, 2006.

8

