2
2
0
2

r
a

M
4
2

]
E
S
.
s
c
[

2
v
9
0
4
2
1
.
3
0
2
2
:
v
i
X
r
a

Continuous Software Engineering in the Wild

Eriks Klotins1[0000−0002−1987−2234] and Tony Gorschek1,2[0000−0002−3646−235X]

1 Software Engineering Research Lab (SERL)
Blekinge Institute of Technology
eriks.klotins@bth.se, tony.gorschek@bth.se
2 fortiss GmbH, Germany

Abstract. Software is becoming a critical component of most products
and organizational functions. The ability to continuously improve soft-
ware determines how well the organization can respond to market oppor-
tunities. Continuous software engineering promises numerous advantages
over sprint-based or plan-driven development. However, implementing a
continuous software engineering pipeline in an existing organization is
challenging.
In this invited position paper, we discuss the adoption challenges and ar-
gue for a more systematic methodology to drive the adoption of continu-
ous engineering. Our discussion is based on ongoing work with several in-
dustrial partners as well as experience reported in both state-of-practice
and state-of-the-art.
We conclude that the adoption of continuous software engineering pri-
marily requires analysis of the organization, its goals, and constraints.
One size does not ﬁt all purposes, meaning that many of the principles
behind continuous engineering are relevant for most organizations, but
the level of realization and the beneﬁts may still vary. The main hin-
drances to continuous ﬂow of software arise from sub-optimal organiza-
tional structures and the lack of alignment. Once those are removed, the
organization can implement automation to further improve the software
delivery.

Keywords: Continuous software engineering · process improvement ·
continuous integration and delivery

1

Introduction

Software is a critical component of most products, services, manufacturing pro-
cesses, and back-oﬃce functions. The ability to continuously improve software is
crucial for organizations to respond to market opportunities swiftly and remain
competitive. Software is also becoming increasingly more complex. Organizations
seek to improve both the eﬀectiveness and the eﬃciency of software engineering
to enable further growth without increasing overhead and losing ﬂexibility.

Continuous software engineering is a paradigm aiming to streamline software
engineering by delivering software frequently and in small increments, and by
doing so reaping diﬀerent beneﬁts from fast customer feedback, to continuous

 
 
 
 
 
 
2

E. Klotins et al.

value delivery to said customers. Smaller increments are potentially easier to
plan, develop, integrate, and verify. On the customers’ side, more minor updates
ought to create less disruption and are easier to adopt in contrast to big-bang
software updates requiring downtime and catching up with the new features.
Software vendors can collect more focused telemetry and customer feedback to
steer further product development [2]. More frequent and smaller software up-
dates enable customers to provide more focused feedback empowering them to
participate in steering the product more actively. In turn, this allows collabora-
tive and experience-based business models [2].

Continuous integration and delivery (CI/CD) is part of continuous software
engineering. We consider how organizations can apply continuous principles
throughout the whole software engineering process throughout inception, devel-
opment, integration, veriﬁcation, delivery, operation, use, collection of feedback,
and planning the next software iteration steps [1]

However, few organizations have adopted continuous engineering beyond au-
tomating tests and other repetitive development tasks. To the best of our knowl-
edge, an industrial-scale end-to-end pipeline from inception of a feature to col-
lecting and analyzing customer feedback has yet to be demonstrated in peer-
reviewed literature [7].

The potential beneﬁts of continuous software engineering have gained much
attention. Beneﬁts like ﬂexibility, eﬃciency, and improved time-to-market are
appealing to most companies. However, the ability to retroﬁt an existing or-
ganization, what parameters determine the suitability, and what trade-oﬀs are
associated with adopting continuous software engineering remain largely unex-
plored.

This invited position paper discusses the potential, and highlights challenges
hindering the widespread adoption of continuous software engineering. This is
a position paper based on ongoing research with a dozen companies from mul-
tiple domains, featuring diﬀerent market positions and customers, as part of
the KKS research proﬁle project Software Engineering Rethought (see http:
//rethought.se).

Overall, we observe that end-to-end continuous software engineering, as per
many recommendations, may not be applicable everywhere [2,1]. However, orga-
nizations can adopt parts of the pipeline to streamline software engineering [4].
The challenge lies in the critical evaluation of the current situation and the
goals of the company to maximize the gains from adopting continuous software
engineering principles.

This paper is structured as follows: Section 2 presents the potential of an
end-to-end continuous software engineering. In section 3, we discuss challenges
and the need for further research, before concluding our paper in section 4.

2 Continuous Software Engineering in a Nutshell

The idea of continuous software engineering originates from lean principles in
manufacturing. One of the key principles in lean is to reduce waste and maximize

Continuous Software Engineering in the Wild

3

customer value by implementing the ﬂow. That is, linking all relevant production
steps together and minimizing the lead time of each step. In software engineering,
this principle can be implemented by delivering small increments of software [6].
To enable the development and delivery of small software increments, soft-
ware vendors need to implement a software delivery pipeline. The pipeline picks
up the latest changes in the source code and automatically performs testing, in-
tegration, delivery, and other required steps to make the latest changes available
to end-users. Once end-users start using the software, feedback and telemetry is
relayed back to the software vendor for analysis and decision support to steer
further product decisions.

In an idealized scenario, end-users gain access to the latest features and start
generating feedback minutes after developers have ﬁnished the development [1,2].
The state-of-the-art view on the end-to-end pipeline, along with the key
steps, is shown in Fig, 1. The ﬁgure shows an idealized scenario that requires
adaptations to ﬁt any real-life scenario.

In the ﬁgure, we show the key steps of the pipeline denoted with rectangular
boxes. The arrows represent the ﬂow of software and related artifacts through
the pipeline. Dashed lines represent levels of stakeholders involved in product
development.

Fig. 1. An overview of state-of-the-art continuous software engineering pipeline

We diﬀerentiate between four levels of stakeholders, present how continuous
software engineering aﬀects each level, and present several potential opportuni-
ties (PT) associated with adopting continuous engineering. The PT’s are ideal-

5 Continuous use2 Continuous development1 Continuous product planning3 Continuous Deployment4 Continuous Delivery6 Continuous Monitoring5.1 Continuous TrustLevel II: Product Level III: OperationsLevel IV: End-user / customerLevel I: Engineering 2.1 Continuous veriﬁcation2.3 Continuous architecture2.2 Continuous integration2.4 Continuous conﬁguration management7 Cross-cutting concerns7.1 Continuous compliance7.2 Continuous security7.3 Continuous budgeting7.4 Continuous innovation7.5 Continuous experimentation7.6 Continuous improvement5.2 Continuous feedback2.5 Continuous NFR testingBeneﬁts:  Less pain of preparing releasesInvestments: Automated acceptance testingBeneﬁts:  Improved customer satisfaction, trust, feedbackInvestments: Maintenance of longitudinal relationshipsBeneﬁts:  Improved quality, scalability, streamlined processInvestments: Automation, modularisationBeneﬁts: Investments:  Data collection and maintenanceBeneﬁts: More ﬂexibility to react to changing environmentInvestments: Organisational changesBeneﬁts: Improved time-to-market, easier roll-out of new featuresInvestments:  Adjusting existing customer  agreements and business models4

E. Klotins et al.

ized positive outcomes that can be a result of realizing good continuous practices,
used here to highlight potential beneﬁts only for illustration purposes.

Level I: Engineering organization receives plans from the product planning or-
ganization and turns these plans into working software for deployment (Step 3).
The engineering organization implements build, test, integration, and deploy-
ment automation; ensures the organization and software architecture supports
incremental and parallel work. Note that the exact engineering activities are
case-speciﬁc. In the ﬁgure, we illustrate the most common activities.

PT 1: Automation and parallel work on small increments are shown to
improve eﬃciency quality, reduce stress and improve developer satisfaction. In-
dependent, cross-functional teams taking responsibility for speciﬁc features and
modular architectures allow scaling of development organization with minimal
need for additional overhead.

Level II: Product organization uses various inputs to devise plans for further
product development (Step 2). These plans guide the engineering organization.
Once the engineering is complete, the engineering organization returns working
software (Step 3).

PT 2: Working with lightweight plans and quick turnaround time allows
product organization to rapidly adjust and explore new market opportunities.
In dynamic markets, extensive market research and analysis could be counter-
productive as the results are already outdated when they arrive. Instead, organi-
zations could adopt a more experiment-driven approach and try out new ideas.
It is possible if testing new ideas and recovering from unsuccessful experiments
are reasonable eﬀort and risk.

Level III: Operations takes the working software from the product organization
and makes it available for the end-users (Step 4). The working software generates
feedback and telemetry, enabling monitoring of customer behavior (Step 6) and
input for further planning (Step 1).

PT 3: Automating deliveries and frequently delivering to customers helps
improve time-to-market and reduces release pains. Release pain is associated
with developers required to put in extra eﬀort to make sure the upcoming release
is ready for customers. For large releases, it is associated with additional stress
and workload. However, when releasing small incremental updates, the stress
and workload associated with each release are minimized.

PT 4: Implementing telemetry and automated collection of feedback al-
lows monitoring the software in use and making adjustments as needed. Quick
turnaround time allows rapid release of patches and bug ﬁxes, thus reducing the
adverse eﬀects of slipped defects. From the customers perspective, automated,
seamless updates remove the need to update the software manually.

Level IV: End-user/customer organization receives and uses the software (Step
5). Frequent upgrades and continuous access to new features enable service and
experience-oriented business models. Such models encourage trust (Step 5.1),

Continuous Software Engineering in the Wild

5

and the end-users are incentivised to actively participate in the product devel-
opment by providing feedback (Step 5.2).

PT 5: Both customers and the vendor can beneﬁt from more closer ex-
perience and service based collaboration model. It facilitated trust and created
incentives for customers not to switch to another vendor.

Cross-cutting concerns transcends organizational levels. For instance, continuous
improvement (Concern 7.6) attempts to measure and ﬁne-tune the whole cycle
continuously. Continuous experimentation allows a product organization to set
up quick experiments to test market responses to new ideas (Concern 7.5).

PT 6: Continuous collection of data and frequent execution of the delivery
process allows to systematically and continuously improve the process with every
iteration.

PT 7: Transparency in planning and road maps of the development company
can achieve a number of beneﬁts. (i) Internal coordination in the development
organization of what is in the pipe short- and medium term. (ii) Customers can
be prepared of what is coming to prepare and plan for changes and beneﬁts. (iii)
Customers and the development organization can rather via transparency act as
partners as interested customers can be active in the planning and release work.
In summary, adopting an end-to-end continuous software delivery pipeline
as shown in Fig. 1 allows the software vendor to increase internal eﬃciency and
streamline value creation.

3 Challenges and Future Needs

Despite many potential advantages, the utilization of continuous software engi-
neering remains scarce relative to plan-driven or sprint-based engineering mod-
els. Several of our partner companies have started adopting initiatives mov-
ing towards continuous software engineering. However, the adoption is far from
straightforward and hindered by many challenges. In this section, we present
challenges that, in our view and experience, should be solved to support an
industry-wide adoption of continuous engineering principles.

Challenge 0: Should you do it? The tendency to go for one-size-ﬁts-all solutions
and the power of “the next thing everyone is doing” can cause as much damage
as beneﬁt. A key is to start with an analysis of both the capacity and goals of the
development organization, as well as the capacity and needs of the customer’s
organizations.

The development organization needs to specify goals and to break down
these goals to a level where success (or failure) to achieve these goals can be
”measured” by the organization, continuously as changes are realized. This is
paramount to a risk analysis, and also a cost beneﬁt analysis anchored in reality
and objective observations. A signiﬁcant bonus is that this activity also enables
creating a common understanding of the potential, implications and direction of
the changes from items impacting individual teams, to entire departments and

6

E. Klotins et al.

the whole organization, as well as how they are dependent and tie together. In
this, it is important to separate between the treatment (change/tool/action/new
way of working) and the goals and attainment of the goals to enable an evidence-
based change continuously.

At the same time, knowing your customer and the impact of continuous on
them and the relationship with them is critical. What is the beneﬁt for the
customer? Is the domain and agreements between the customer and the devel-
opment company suitable for a continuous environment? One speciﬁc example
could be if the customer wants continuous changes in the product, and is there a
telemetrics/data feedback system in place to report on new features and changes
enabling feedback? In some domains and for some development organizations a
continuous model is non-controversial, but in some other domains most of the
beneﬁts attained via try-and-learn-improve are impossible to achieve. For ex-
ample, an organization and customer operating in (even partly) safety-critical
products, or where down-time of products incur substantial consequences, the
beneﬁt/risk/cost calculation is signiﬁcantly diﬀerent.

Signiﬁcant research needs to be conducted, and usable and useful models
need to be developed, to establishing cost-eﬀective ways to continuously evalu-
ate and course correct the continuous changes needed to achieve a continuous
product development environment; maybe inspired by a hierarchically connected
Goal-Question-Metric model [3] - back-ﬁlled by metrics and data collected via
the continuous feedback cycle. As such, a goal and measurement program is cre-
ated (and scaled to be usable and useful for the organization in question) and
it is important to realize that it might lead to the conclusion that continuous
engineering in its entirety and complete idealized form might not ﬁt your organi-
zation. However, there are probably many parts of continuous engineering that
are beneﬁcial for most organizations. Start there.

Challenge 1: Determining adoption goals and constraints. We observe that or-
ganizations often put forward aims like improving speed and eﬃciency to drive
the adoption of continuous engineering. However, such aims are too vague to
be measured and drive systematic improvements. When interpreted by diﬀerent
parts of the organization, vague goals may come at odds, or even worse result in
diﬀerent interpretations of said goals resulting in diﬀerent direction of work and
sub-optimizations.

For example, an R&D unit could interpret the eﬃciency as maximizing the
delivery of new experimental features. For operations, eﬃciency could mean min-
imizing resources to ensure services availability. Without a joint view of what
eﬃciency means and how it is measured in the given organizational context, in-
ternal deadlocks may arise, hindering the company’s adoption eﬀort and optimal
operation.

Attaining speciﬁc goals often imply trade-oﬀs. As in the earlier example, it
could be challenging to launch many innovative features and reach high stability
of services simultaneously. Such trade-oﬀs need to be identiﬁed and analyzed to
understand the associated constraints and degrees of freedom.

Continuous Software Engineering in the Wild

7

The analysis of organizational goals, constraints, and trade-oﬀs should drive
the organizational change towards continuous software engineering. One powerful
tool in coordinating an organization, and making goals clear is to break-down
goals into measurable eﬀects or metrics. This requires a number of steps. The
terms ”value”, ”eﬃciency”, or ”eﬀectiveness” need to be deﬁned for each part of
the organization [3]. These deﬁnitions need to be coordinated and streamlined
- in essence shared. Then, metrics on how to ascertain level of success have to
be detailed very early. How to measure if you are improving towards a goal is a
prerequisite before adopting any treatment or change. For example, if you say a
speciﬁc practice or set of practices should be realized to improve customer value,
what type of customer value, and how do you measure it? This analysis would
also pinpoint bottlenecks, ineﬃciencies, and areas of improvement, in addition
to acting as a coordinating force as an organization realizes changes. You need
to be able to measure beneﬁts of a change as well as you measure the cost of
said change.

Challenge 2: Considering the return-of-investment perspective Retroﬁtting an or-
ganization with a new continuous engineering pipeline and new ways of working
is a substantial investment. The investments should be justiﬁed with potential
beneﬁts and be aligned with organizational objectives (Challenge 1). Notably,
the organization must be prepared to realize the potential and materialize the
beneﬁts.

For example, an organization may invest in data collection (PT 5) and gain
the potential of improved data-driven decisions (PT 2). However, if the rest of
the organization is not ready to use the data in decision support, the potential is
not realized, and the investment is wasted. Furthermore, customers may be slow
in adopting new features, thus delaying the feedback and nullifying its value to
the organization.

The organization should perform a cost-beneﬁt analysis to gauge the viability
of any goals, new practices, and working methods. Adoption champions should
do such analysis in parallel with determining adoption goals, trade-oﬀs, and
constraints, see Challenge 1.

To address Challenges 1-2, we propose a model supporting inventory of goals,
trade-oﬀs, and return-of-investment calculation to support the systematic adop-
tion of continuous practices. As a part of this analysis, the break-down of goals
into deﬁning the terms used to establish a common vocabulary, then establish-
ing how to ”measure” goal attainment by breaking down goals into measurable
items. This also allows for course corrections during the changes associated with
retroﬁtting.

Challenge 3: Focus on cost savings instead of value and potential creation. Our
industry partners often mention the need to reduce cost and improve eﬃciency
(PT 1) as reasons for considering continuous software engineering. Potential
beneﬁts like new value streams, improved time-to-market, and new business
models are rarely, if at all, mentioned.

8

E. Klotins et al.

The question if adopting continuous practices would provide some cost sav-
ings is ﬂawed. We compare such a question to asking whether eating health-
ier will be cheaper.Both eating healthier and adopting continuous engineering
will likely cost more. Developing tests, maintaining test suites and automation
infrastructure, collecting and maintaining test data, refactoring software archi-
tectures, and driving organizational adjustments will push the overall cost of
software engineering upwards. At the same time, speed and ﬂexibility will open
up opportunities for new oﬀerings enabling the organization to become faster at
responding to market opportunities, among other beneﬁts. Eating healthier may
cost more, but may enable you a better and longer life.

We propose emphasizing the business value arising from streamlining soft-
ware delivery over the exclusive focus on potential cost savings. More cross-
disciplinary studies are needed to explore the business value perspective. We ob-
serve that continuous shares many characteristics with so called ”digital trans-
formation”. Considering how continuous engineering ﬁts into the broader or-
ganizational transformation could help to shift the focus from cost savings to
unlocking the organizational potential [5].

Challenge 4: Remembering Conway’s law. In 1967, M. Conway formulated an
adage that organizations develop systems that mimic their communication struc-
ture. In software engineering terms, software architecture should follow organi-
zational structures. To change the prior, one needs to change the latter ﬁrst.

Best practices of continuous software engineering dictate that development
work should be done by real cross-functional teams that own the development
of whole features. A team should have full responsibility from generating im-
provement ideas to development, testing, delivery, and telemetry analysis. This
practice allows maintaining a modular architecture and to minimize the gap
between organizational structures and software architectures.

From discussions with our partner companies, we learned that organizations
often ﬁnd their software architectures monolithic and poorly suited for paral-
lel development, automation, and modular deployments. The software travels
through various organizational silos, each performing a speciﬁc function without
the complete picture. Handover from one silo to another creates friction and
bottlenecks.

Attempts to break the software monolith often lead to failure as the sur-
rounding organization remains the same. Changing the organizational structures
is often extremely challenging due to internal inertia and resistance to changes.
We propose to explore the adoption of continuous engineering practices from
the organizational view ﬁrst. That is, analyze what organization silos and bottle-
necks currently limit the continuous ﬂow of software. Once organizational ineﬃ-
ciencies are addressed, the software delivery process can be further improved with
tools such as automation. In addition, the detailed goals and following follow-up
(metrics) should be owned by the parts of the organization (the teams) that own
the module or part of the architecture. This way you can measure the ﬁt of the
organization to the goals of development. For example, a change in organiza-
tional structure might result in (metric) less waiting times between teams.

Continuous Software Engineering in the Wild

9

Challenge 5: Ever-increasing complexity Contemporary market-driven software
engineering exists in a dynamic environment. It faces mercurial market inﬂu-
ences, changing organizational goals, technologies, and the growing size and
complexity of software and the surrounding organization.

A single person, or a small group of people, can no longer grasp the com-
plexity and make optimal and timely decisions using their expertise alone. This
increase in complexity has far-reaching implications for how organizations make
decisions.

One viable way forward could be to consider data collection and analysis as
an integral part of the product and the engineering process. The organization
can use data to support decisions both on what features to develop (What to
build? ) and how to improve the engineering process (How to build? ).

Furthermore, retrospective analysis, that is, analyzing past events, has lim-
ited use in an increasingly changing environment. There is a potential to ex-
plore the applicability of inferential statistical methods, simulations, and ma-
chine learning techniques to make relevant predictions. This is however subject
to signiﬁcant research initiative to develop transparent tools and methods that
can be trusted by practitioners to predict and simulate developments, at least
in the short-term.

4 Conclusions

This invited position paper analyzes continuous software engineering and pin-
points several challenges of adopting ongoing software engineering from our
collaboration with industrial partners. The challenges emphasize the need for
systematic methods to analyze organizational goals, context, structures, con-
straints, among other contextual factors, to remove ineﬃciencies and realize the
full potential of software-intensive products and services.

We wish to highlight that most ineﬃciencies and obstacles to streamlined
value delivery can be traced to the lack of organizational alignment and coor-
dination. The spirit of continuous engineering is to identify and remove such
hindrances systematically. In the end, continuous software engineering is more
about being pragmatic and disciplined in engineering than it is about automa-
tion.

References

1. Fitzgerald, B., Stol, K.J.: Continuous software engineering: A roadmap and agenda.

Journal of Systems and Software 123, 176–189 (2017)

2. Humble, J., Kim, G.: Accelerate: The science of lean software and devops: Building

and scaling high performing technology organizations. IT Revolution (2018)

3. Khurum, M., Gorschek, T., Wilson, M.: The software value map—an exhaustive col-
lection of value aspects for the development of software intensive products. Journal
of software: Evolution and Process 25(7), 711–741 (2013)

10

E. Klotins et al.

4. Klotins, E., Gorschek, T.: Towards cost-beneﬁt evaluation for continuous* software
engineering activities. In review by Empirical Software Engineering Journal xx(x),
xx–xx (2021)

5. Klotins, Eriks, P.A.E.: The uniﬁed perspective of digital transformation and con-
tinuous software engineering. In: Proceedings of 5th International Workshop on
Software-intensive Business (IWSIB) (2022)

6. Poppendieck, M., et al.: Principles of lean thinking. IT Management Select 18(2011),

1–7 (2011)

7. Shahin, M., Babar, M.A., Zhu, L.: Continuous integration, delivery and deployment:
a systematic review on approaches, tools, challenges and practices. IEEE Access 5,
3909–3943 (2017)

