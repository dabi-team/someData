A Language-Independent Analysis Platform for Source Code

Konrad Weiss
konrad.weiss@aisec.fraunhofer.de
Fraunhofer AISEC
Garching near Munich, Bavaria, Germany

Christian Banse
christian.banse@aisec.fraunhofer.de
Fraunhofer AISEC
Garching near Munich, Bavaria, Germany

2
2
0
2

r
a

M
6
1

]

R
C
.
s
c
[

1
v
4
2
4
8
0
.
3
0
2
2
:
v
i
X
r
a

ABSTRACT
In this paper, we present the CPG analysis platform, which en-
ables the translation of source code into a programming language-
independent representation, based on a code property graph. This
allows security experts and developers to capture language level
semantics for security analyses or identify patterns with respect
to code compliance. Through the use of fuzzy parsing, also incom-
plete or non-compilable code, written in different programming
languages, can be analyzed. The platform comprises an analysis
library and interfaces to query, interact with or visualize source
code graphs. This set of CPG tools allows finding common weak-
nesses in heterogeneous software environments, independently of
the underlying programming language.

KEYWORDS
code analysis, code property graph, software security, static analysis

1 INTRODUCTION
Ensuring the correct behavior of software is crucial to avoid security
issues stemming from incorrect implementations. To ensure secure
and compliant software even in the presence of ever-growing and
more complex software systems, automated source code analysis
tools are required. More specifically, static analysis methods are
the key to consider all possible executions of a program and check
whether they are running in conformance to defined expectations.
Large source code bases are difficult to analyze, as methods that
exhaustively simulate program states easily run into state explo-
sion problems. Representing a finite source code base in a graph
avoids such problems while still representing all program execu-
tions. Query results on such graphs are complete but not sound
representations of program execution.

Research into the graph-based analysis of source code has in-
troduced the idea of a code property graph (CPG) [5]. A CPG is
a representation of source code in the form of a labeled directed
multi-graph. Each node and edge is assigned a set of key-value pairs,
named properties. Nodes represent syntactic elements of program-
ming language, whereas edges capture the relations between them.
These relations can be single edges, e.g. edges from call expression
to potential targets of the invocation, or connected sub-graphs that
form complex structures, e.g. control-flow and data-flow edges.

In this paper, we present a language-independent analysis plat-
form for source code based on an adaption of such a graph. With
this analysis framework, we can run different analysis such as data
flow analysis or type state analysis on a graph representation of
source code. Our contributions are

• A language-independent graph representation and query

• An architecture of a source code analysis platform based on

this graph

• An extensible open-source implementation1 of the platform
to analyze Java, C/C++, Go, Python, TypeScript and LLVM-IR

2 DESIGN GOALS
With our platform, we aim to support security experts during an
audit of source code and developers to perform an automated analy-
sis e.g. in their CI/CD pipeline. These scenarios drive the following
goals, that we aim to fulfill in the design and implementation of
our platform:

• G1: Allow analysis of incomplete code to support its
usage during the early development lifecycle and auditing
where only parts of the code are available.

• G2: Create a language-independent representation to
allow for definitions of rules for multiple languages and
analysis of language-heterogeneous systems, such as the
Cloud.

• G3: (Semi-)automated use to enable application in audit-

ing as well as development environments.

• G4: Model language level semantics to increase precision
by allowing differentiation according to nuanced language
semantics.

3 GRAPH STRUCTURE
In this section, we describe the structure of our CPG, which is used
to represent source code of different programming languages. This
structure aims to provide a superset of language features found
in most object-oriented languages, such as C++, Java or Go. This
includes structural elements, such as functions, methods, classes
as well as expressions/statements, e.g., calls, operators, literals or
conditions.

3.1 Abstract Syntax Tree
An abstract syntax tree (AST) is a tree structure representing the
syntactic elements of source code in its nodes. The root the tree is
a TranslationUnitDeclaration node, which represents the code
contained in one file. The complete graph then comprises the set of
all trees. Different types of AST child nodes exist in the tree, each
representing different semantics within a program:

• Structural Entities represent entities that give the code its
structure. Usually, they can be used as entities or instanti-
ated as such. Examples are nodes representing namespaces,
classes or structs.

• Value Declarations are identifiers that contain or return val-
ues and therefore are used to model local variables, parame-
ters, functions, methods and constructors.

capability of source code

1https://github.com/Fraunhofer-AISEC/cpg

 
 
 
 
 
 
• Nodes of Program Execution model statements and expres-
sions. Statements are syntactic units which are executed in
sequence and thus form the program logic of imperative
programs. In contrast, expressions are syntactic units which
evaluate to a value and are of a specific value type. Expres-
sions can be nested and can be a child of a statement.

The individual node types are realized through sub-classing and
therefore model a semantically rich hierarchy, represented by Java
classes2 in our reference implementation and by node labels in
the graph which contributes to G4. For example, a MemberCall-
Expression, representing a call to a class member, inherits from
CallExpression, which in turn is derived from Expression.

The edges of the AST represent the directed parent-child relation
between syntactic elements. The edge also stores the information
which relation the child holds to the parent, e.g. LHS for the left-
hand side of an expression. Indices are stored on edges wherever
the syntactic order is relevant for program execution, as graphs
generally do not support the concept of order between nodes.

The following semantics of program execution, such as control
and data flow, are then modeled as edges between the AST nodes.

3.2 Control Flow and Evaluation Order
The CPG adapts the concept of a control-flow graph (CFG) into
an evaluation order graph (EOG), that interconnects statements
and expressions in the order that they are evaluated, to represent
control flow on a finer-grained level. This is necessary to correctly
capture side effects that come from the order of execution inside
an expression, e.g. a() + b() or a > 1 ? a : 0. To build the
EOG of an expression a + 5, first a, then 5 and lastly their common
parent node a + 5 is connected, similar to a post-order traversal of
these nodes. This model of evaluation order follows the notion a
compiler would follow for expression evaluation, and is extended to
non-expression nodes that have an execution order. The evaluation
order is from left to right with few exceptions:

• Constructs that explicitly change the control flow of a pro-

gram, such as if or other conditional expressions.

• Nodes representing code that is not executed in the order of
code appearance, e.g. the body of a for-loop being executed
before its iteration expression, but after the initializer.

The root node of branching nodes is connected after the branch-
ing expression, e.g. condition or selector, and before the branching
targets to allow algorithms that have traversed the branching ex-
pression to get information on the semantic root before having to
handle the branch. EOG edges at such branching positions save ad-
ditional information on the result of the branching expression that
leads to the branch’s execution, e.g. true or false for conditions.

3.3 Data Flow
Operations or entities that handle data are represented in a data-
flow graph (DFG) within the CPG. To model data flows through the
program, the following DFG edges connect nodes:

• A child contains an edge to its parent if the parent’s value

depends on the child’s value.

Weiss and Banse

• A referenced variable is the start or end of an DFG edge if

the variable is written to or read from.

• Edges are drawn from argument expressions of a call to the

respective parameters of the call target.

• either an edge is drawn from the write reference to the ref-

erenced declaration

• or an edge is drawn from the last valid writing expression
to the point-of-use if the control-flow-sensitive data flow
analysis was enabled.

The resulting data-flow sub-graph is control-flow sensitive but not
context-sensitive.

3.4 Additional program semantics
The CPG contains additional nodes and edges to model program
semantics that are necessary for program analysis:

• The type system of a program and used language is modeled
by adding its complex hierarchical structure as nodes and
edges forming a type sub-graph, that contributes to G4.
• REFERS_TO edges are drawn between references and the

declaration they target.

• INVOKES edges are drawn between calls and identified call
targets in a best-effort approach to give an inter-procedural
extension to the intra-procedural EOG.

4 ARCHITECTURE AND IMPLEMENTATION
The CPG project is composed of several tools built around a li-
brary for iterative graph construction of source code in form of a
Java/Kotlin-based open source implementation3. Figure 1 depicts
the workflow of translating source code into the graph representa-
tion as well as its visualization and analysis by a user. The following
sections will elaborate on the individual components.

4.1 Analysis Library
The CPG library comprises several components, which are used to
configure the analysis and translation of heterogeneous code into an
in-memory graph structure. Java, C and C++ are the main languages
currently supported by the platform. Additionally, experimental
frontends for Python, Golang, TypeScript and LLVM-IR exist.

Language Frontends. Source code files are dispatched to a
language-specific frontend by their file extension. The frontend
can then either use a parsing library accessible from the JVM or use
the Java Native Interface (JNI) to use language-native techniques
to retrieve the AST for a particular language4. A language frontend
is expected to perform the following tasks:

• Language dependent AST children are translated into the
language independent CPG AST structure to enable G2, as
described in Section 3.1.

• Entities that are implicitly present but not located in the
source code are added explicitly to the graph, e.g. implicit
this fields and missing return statements.

• Identifiers are collected in a scope tree to later resolve access

to names in a fuzzy manner.

2See https://fraunhofer-aisec.github.io/cpg/ for a complete model of the graph in the
de.fraunhofer.aisec.cpg.graph package

3https://github.com/Fraunhofer-AISEC/cpg
4We make use of JNI in our experimental frontends for Go and Python

A Language-Independent Analysis Platform for Source Code

Figure 1: CPG analysis platform showing the workflow when analyzing source code

Scope Manager. In most programming languages, the declara-
tion of a name is not globally valid, but its validity is restricted to
an area associated with a language construct, such as a class or a
function. This area of validity is called a scope. The scope manager
tracks the currently active scope stack while the frontend traverses
AST nodes. This allows for tracking and resolving declarations by
absolute or relative name and managing control flow jumps that
are bound to the scope of an enclosing language feature, e.g. loops,
try-statements. After building the scopes in the language frontends,
the scope manager holds several scope trees that allow random
access in future passes.

Passes. As mentioned before, the frontend produces partially
connected AST trees. Afterwards, passes are used to enrich the CPG
by implicit execution information and program semantics such as
usage-references, data-flows, and evaluation order. These semantics
are built between the language independent AST nodes and are
themselves language independent contributing to G2. However,
they still allow for language-specific customization. Passes depend
on the prior execution of other passes when needing their semantics
in the graph. Lastly, passes also support inference. Nodes are added
and marked as IMPLICIT, for entities that are not directly visible
in source code, or INFERRED, when part of missing source code.
This allows for fuzzy parsing and analysis of incomplete code and
works towards G1 by adding missing declarations of entities due
to missing dependencies or code components.

The library’s functionality can be extended by any dependent
applications through registration of newly implemented language
frontends and passes or adapting existing components through
subclassing and overwriting.

4.2 Persistence and Visualization
The CPG tool contains a persistence component that stores the
in-memory graph into a Neo4J graph database. This allows manual
exploration through interaction in a visual interface, as well as run-
ning arbitrary analysis queries written in graph-query languages.

4.3 CLI Console
Our platform offers a simple shell based on the interactive Kotlin in-
terpreter ki5 which supports semi-automated and manual analysis

5https://github.com/Kotlin/kotlin-interactive-shell

by auditors, as well as automatic runs of security checks for devel-
opment contexts, therefore realizing our goal G3. This is achieved
by providing functionality for the traversal and inspection of the
in-memory graph, an extendable set of built-in commands for graph-
interaction as well as a collection of security related analysis exam-
ples, such as a null-pointer detection.

5 EVALUATION
In this section, we assess the viability of the CPG platform in terms
of runtime performance and code coverage. The evaluation is con-
ducted over a set of 100 Java and 100 C++ open source repositories
that we arbitrarily selected on GitHub. Because analysis passes are
executed after all files are translated and use algorithms whose
execution times are not necessarily linear to the lines of code, we
compute the execution times based on the overall repositories’
SLoC and not on individual files. The collection of the repositories
is not part of the measurements. The evaluation was performed on
a virtual machine with a 3.3 GHz vCPU, 63 GiB of Memory and 388
GB of disk space running Ubuntu 20.04.

Execution Time (ET). We measure the execution time (ET ) in
seconds / SLoC to give an impression of the expected runtime based
on actual source code lines. By measuring a metric relative to the
size of the repository, we aim to counter the effect that the reposi-
tories in the evaluation data set were of different sizes.

Code Coverage. Similar to code coverage in unit testing frame-
works, we built a code coverage metric that shows how many of the
original language constructs, based on the AST, were successfully
represented in our final graph. The coverage is based on SLoC, with
a line associated with an AST node being counted as:

• uncovered, if no handler was implemented for the AST node
• covered if a leaf-node was properly handled or if the children
of a non-leaf node were finished processing and the line is
not in any of the children’s uncovered or partial set.

• partial, if the line is contained in one child’s uncovered set

and another child’s covered set.

The algorithm to compute coverage sets in SLoC is defined recur-
sively and shows inaccuracies in the representation. All remaining
source lines, i.e. those not contained in any set so far, are added
to uncovered, as these lines were not visited. Note that in contrast
to AST children that cannot be handled, AST children that are not

EOG-PasstranslatebuildCPGASTScope ManagerScopesuseVariable ResolverpersistFinalGraphLanguage FrontendSource CodeEnrichment Passes...Graph-VisualizationGraphDBUserCPG-ConsoleTable 1: Runtime and coverage evaluation of 100 Repositories per Language.

Lang. Repos[#]
Java
C++

97
88

Total ET[s]
1042.10
687.98

ET Passes[%]
37.5
46.0

Total SLoC[#]
211,541
148,036

ET / SLoC[ms] Avg. SLoC[#]

Cov.[%] Uncov.[%]

4.92
4.65

2180
1682

99.16
96.10

0.7
3.8

Partial[%]
0.12
0.05

Weiss and Banse

type hierarchy than Joern, while keeping resulting queries language
independent. CodeQL in contrast, uses a loose system of generic
AST type-interfaces and highly language-specific implementations
that do not allow for language-independent queries.

7 CONCLUSION
In this paper, we present the CPG tool, a platform of tools to analyze
source code written in different programming languages using a
uniform graph representation. We show, using an evaluation of 200
source code repositories, that the CPG is suitable to analyze small to
medium-size repositories, independently of the programming lan-
guage. It offers coverage of the most common language constructs,
especially for the C/C++ and Java languages. The evaluation of our
translation execution times, shows that suitable scenarios include
security audits or checks during CI/CD runs. However, further im-
provements are necessary to allow real-time code analysis in the
early development cycle. Future work, therefore, includes the paral-
lelization of code translation as well as the incremental construction
of graphs and program semantics.

REFERENCES
[1] David B. Effendi et al. 2021. Plume. https://github.com/plume-oss/plume.
[2] Inc. GitHub. 2021. CodeQL. https://codeql.github.com/.
[3] Wim Keirsgieter. 2021. Graft. https://github.com/wimkeir/graft.
[4] Fabian Yamaguchi et al. 2021. Code Property Graph - Specification and Tooling.

https://github.com/ShiftLeftSecurity/codepropertygraph.

[5] Fabian Yamaguchi, Nico Golde, Daniel Arp, and Konrad Rieck. 2014. Modeling and
discovering vulnerabilities with code property graphs. In 2014 IEEE Symposium on
Security and Privacy. IEEE, 590–604.

forwarded to the handlers cannot be counted and their respective
code is added to covered. For this reason, the results have to be
considered an upper bound to the coverage.

Discussion. Table 1 shows the results of the analysis. 3 Java
and 12 C++ repositories did exceed the maximum analysis time
of 5 minutes and ran into a timeout. We did not consider them
in the final analysis, which may limit representability of larger
code repositories. Based on the remaining repositories, 211,541 and
148,036 SLoC were analyzed in 1042 and 687 seconds, respectively,
which suggests that the platform can be used to analyze small to
medium code repositories in acceptable time. The runtime per SLoC
can be used to estimate the analysis runtime of larger repositories
for the specific language. However, non-linear increases in runtime
could appear for larger code repositories.

While the analysis of C++ Code was faster per SLoC, the coverage
metrics show that this may be due to slightly less code coverage.
The execution of graph enriching passes took up less than half of
the total time, 37 % for Java and 46 % for C++. This is not surprising
as most enriched semantics are intra-procedural. The coverage
metric was previously mentioned to be imprecise and represents an
upper bound to the handled source code elements. In conjunction
with a lower bound metric, this upper bound would allow assessing
the effectiveness of the current implementation. Upper bounds of
99% and 96% are not surprising as the implementation of analysis
tools puts priority on frequently used language features.

6 RELATED WORK
Existing tools and techniques that build CPG analysis differ in their
level of abstraction and their support for programming languages.
For example, Joern [4] is a security analysis platform for several lan-
guages, such as C/C++, Java or JavaScript. Plume [1] and Graft [3]
represent tools that translate Java byte-code into a graph structure.
Next to CPG-related tools, CodeQL (formerly known as Semmle) [2]
is a query language and engine for semantic code analysis with ex-
tensions that are specific to the supported programming languages.
Our platform differs from other tools with respect to the degree
of extensibility and language abstraction. Providing an extensi-
ble platform is one of the declared goals of the CPG tool. This is
achieved by providing a well-defined API to applications that allows
to register new language frontends (to add support for additional
languages) or passes that add additional semantics. When adding
support for additional languages, developers only need to focus on
translating an AST provided by a language parser into the generic
CPG AST nodes (see Section 3.1). All other steps, such as call re-
solving, control- and data-flow construction will be executed by the
existing language-independent passes. This provides reusability of
implementations similar to Joern but differing both from CodeQL.
In its level of language abstraction, the CPG tool meets a bal-
ance between Joern and CodeQL. We keep more language-specific
semantics by modeling a more differentiated set of AST nodes and

