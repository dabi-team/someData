2
2
0
2

r
a

M
8
2

]
E
S
.
s
c
[

1
v
4
8
4
4
1
.
3
0
2
2
:
v
i
X
r
a

Does Coding in Pythonic Zen Peak Performance?
Preliminary Experiments of Nine Pythonic Idioms at Scale

Pattara Leelaprute
Faculty of Engineering, Kasetsart
University
pattara.l@ku.ac.th

Bodin Chinthanet
Nara Institute of Science and
Technology
bodin.ch@is.naist.jp

Supatsara Wattanakriengkrai
Nara Institute of Science and
Technology
wattanakri.supatsara.ws3@is.naist.jp

Raula Gaikovina Kula
Nara Institute of Science and
Technology
raula-k@is.naist.jp

Pongchai Jaisri
Faculty of Engineering, Kasetsart
University
pongchai.j@ku.th

Takashi Ishio
Nara Institute of Science and
Technology
ishio@is.naist.jp

ABSTRACT
In the ﬁeld of data science, and for academics in general, the
Python programming language is a popular choice, mainly be-
cause of its libraries for storing, manipulating, and gaining insight
from data. Evidence includes the versatile set of machine learning,
data visualization, and manipulation packages used for the ever-
growing size of available data. The Zen of Python is a set of guiding
design principles that developers use to write acceptable and ele-
gant Python code. Most principles revolve around simplicity. How-
ever, as the need to compute large amounts of data, performance
has become a necessity for the Python programmer. The new idea
in this paper is to conﬁrm whether writing the Pythonic way peaks
performance at scale. As a starting point, we conduct a set of pre-
liminary experiments to evaluate nine Pythonic code examples by
comparing the performance of both Pythonic and Non-Pythonic
code snippets. Our results reveal that writing in Pythonic idioms
may save memory and time. We show that incorporating list com-
prehension, generator expression, zip, and itertools.zip_longest id-
ioms can save up to 7,000 MB and up to 32.25 seconds. The results
open more questions on how they could be utilized in a real-world
setting. The replication package includes all scripts, and the results
are available at https://doi.org/10.5281/zenodo.5712349

KEYWORDS
Python, Pythonic, Idioms, Performance

ACM Reference Format:
Pattara Leelaprute, Bodin Chinthanet, Supatsara Wattanakriengkrai, Raula
Gaikovina Kula, Pongchai Jaisri, and Takashi Ishio. 2022. Does Coding
in Pythonic Zen Peak Performance? Preliminary Experiments of Nine
Pythonic Idioms at Scale. In Proceedings of 30th IEEE/ACM International
Conference on Program Comprehension (ICPC 2022). ACM, New York, NY,
USA, 5 pages. https://doi.org/XXXXXXX.XXXXXXX

Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
ICPC 2022, May 16–17, 2022, Pittsburgh, PA, USA
© 2022 Association for Computing Machinery.
ACM ISBN 978-x-xxxx-xxxx-x/YY/MM. . . $15.00
https://doi.org/XXXXXXX.XXXXXXX

1 INTRODUCTION
The Python programming language is one of the most popular and
versatile programming language to learn, especially for profession-
als and students that deal with data analysis and in the ﬁeld of data
analytics. According to an anaconda report in 2021 1, 63% of re-
spondents said they used Python frequently or always while 71%
of educators said they’re teaching machine learning and data sci-
ence with Python, which has become popular because of its ease of
use and easy learning curve, while 88% of students said they were
being taught Python in preparation to enter the data science/ma-
chine learning ﬁeld. Furthermore, in 2021, Python was ranked at
number one on the TIOBE Index based on the number of skilled
engineers worldwide, courses, and third-party vendors.2 Further-
more, it is ranked as being the second most popular on GitHub.3
Like other programming communities, the Python community
has over time developed their own agreed consensus on how to
write Python [5]. From programmer blogs, mailing lists, and down
to oﬃcial documentation, the term ‘Pythonic’ is used liberally by
the Python community. Hence, the Zen of Python is a set of 19 de-
sign principles [9] for writing computer programs that inﬂuence
the design of the Python programming language [1]. The princi-
ples include concepts such as “Beautiful is better than ugly", “Ex-
plicit is better than implicit", and “Simple is better than complex".
Intuitively, Non-Pythonic code may look imperfect to an experi-
enced Python developer. Farooq and Zaytsev [5], shows that the
scope of the term ‘Pythonic’ appears to go far beyond concrete
source code, referring to a way of thinking about problems and po-
tential solutions. Researchers have only begun to study how devel-
opers use Pythonic idioms. Recent work is now concerned with the
diﬀerent aspects of Pythonic detection and usage [4, 7, 8, 10, 13].
In recent times, the Python language is been utilized by both
the researcher and practitioner for data analysis. Python is not
only popular in many diﬀerent settings not only with software
engineers as users, but with data scientists, and students alike
for machine learning, visualization, and data analysis. Evidence
of this popularity can be the rise of Jupyter notebooks [11] and
data repositories such as Kaggle 4, and the rise of libraries (such

1https://www.anaconda.com/state-of-data-science-2021
2https://www.tiobe.com/tiobe-index/
3https://octoverse.github.com/#top-languages-over-the-years
4https://www.kaggle.com/

 
 
 
 
 
 
ICPC 2022, May 16–17, 2022, Pittsburgh, PA, USA Pattara Leelaprute, Bodin Chinthanet, Supatsara Wattanakriengkrai, Raula Gaikovina Kula, Pongchai Jaisri, and Takashi Ishio

as Scikit-learn,5 TensorFlow,6 and Keras7). With the increase in
software artifacts becoming available on sites such as GitHub, the
Pythonic programmer need to handle size, complexity and mem-
ory constraints.

The new idea in this paper is to start preliminary investigations
into the performance of Pythonic code in terms of memory and exe-
cution. In a case study of nine Pythonic idioms (i.e., list comprehen-
sion, dict comprehension, generator expression, yield, lambda, de-
faultdict, deque, zip, zip_longest), we run a performance test under
diﬀerent input level settings (up to 100,000,000 integer instances)
to test memory and execution usage. Results indicate that some
performance beneﬁts are realized at larger computations for some
idioms. Encouraged by the results, our future plan includes empir-
ical evaluation on real-world applications.

2 A CATALOG OF NINE PYTHONIC IDIOMS
We target nine Pythonic idioms identiﬁed in prior works [4, 5] and
acknowledged to have performance beneﬁts through a literature
review and developer interviews. We now explain each idiom and
show its example.8

1. List comprehension is a concise way of constructing new lists
from other sequences, such as applying an operation to each ele-
ment (similar to ‘map’ in other languages).

# Note : n is integer
r e s u l t _ l i s t = [ el for el in range ( n ) ]

2. Dict comprehension is similar to list comprehension but is used

for constructing dictionaries, e.g., ‘Maps’ in other languages.

# Note : n is integer
d i c t _ c o m p r = { k : k ∗ 2 for k in range ( n ) }

3. Generator expression is also similar to a list comprehension,

but for lazily generating sequences.

# Note : n is integer
result = sum ( ( x ∗ 2 for x in range ( n ) ) )

4. yield. creates generators instead of utilizing return. It is an
easier way to write generators than to build an iterator (using the
__next__ magic method).

# Note : n is integer
def t w o _ t i m e s _ r a n g e ( n ) :
for it in range ( n ) :
yield it ∗ 2

5. lambda. implements anonymous functions.

# Note : n is integer
#
result = sum ( map ( lambda it : it ∗ 2 + 2 , n_list ) )

n_list is list of n integer elements

6. collections.defaultdict. is similar to a simple dictionary, but
when accessing a non-existent key, a default value is added and
returned in place of raising an exception.

# Note : n is integer
#
from c o l l e c t i o n s import d e f a u l t d i c t
def a d d _ n e w _ v a l u e _ i n _ d i c t _ py t h on i c ( n_list ) :

n_list is list of n integer elements

num_dict = d e f a u l t d i c t ( int )
for key in n_list :

5https://scikit-learn.org
6https://www.tensorﬂow.org
7https://keras.io
8These examples were synthesized from an online catalog of Pythonic idioms pro-
vided by Alexandru et al. [4]: https://pythonic-examples.github.io

num_dict [ key ]

- = key

return num_dict

7. collections.deque is a generalization of constructing stacks and

queues.

# Note : n is integer
from c o l l e c t i o n s import deque
def a d d _ n e w _ v a l u e _ i n _ q u e u e _ p yt h o ni c ( n ) :

num_queue = deque ( [ ] )
for num in range ( n ) :
if num % 4 == 0 :

num_queue . append ( num )

elif num % 4 == 1 :

num_queue . a p p e n d l e f t ( num )

elif num % 4 == 2 :

num_queue . pop ( )

else :

num_queue . popleft ( )

return num_queue

8. zip. accepts two or more iterables and returns a new itera-
tor where each i-th element yielded is a tuple containing the i-th
elements of each input.

# Note : n is integer
#
#
for a , b in zip ( a_list , b_list ) :

a_list is list of n integer elements
b_list is list of n /2 integer instances

result = min ( a , b )

9. itertools consist of several functions such as zip_longest,

starmap, tee, and groupby.

# Note : n is integer
#
#
from itertools import z i p _ l o n g e s t
for a , b in z i p _ l o n g e s t ( a_list , b_list , fillvalue = - 1 ) :

a_list is list of n integer elements
b_list is list of n /2 integer instances

result = min ( a , b )

EXPERIMENT SETUP

3
We now describe our experiment setup used for the study. As afore-
mentioned, we provide scripts and datasets as a replication pack-
age.

3.1 Tools for measurements
For our experiment environment, we implemented a framework to
measure memory usages and execution times. Using the memory-
proﬁler library [2], we measured the full memory usage of a Python
process with the execution timestamp.

For the environment speciﬁcation, we used a single machine
with AMD Ryzen Threadripper 3970X CPU and 128 GB of DDR4
RAM. Note that our framework was executed on Ubuntu 20.04 op-
erating system with CPython version 3.9.7 and used only a single
process per execution.

3.2 Input Parameters
For the experiment, we performed at total of 9 runs, each time
increasing the input size of the computation. Hence, for each of
the nine Pythonic and non-Pythonic code, we input a list of inte-
ger instances from 1 and multiply it by 10 up to 108 (i.e., in total
9 diﬀerent input sizes). Each run was labeled as Run = 1 to 9 re-
spectively. This way, the highest setting is 100,000,000 of random
numbers in the single list. Due to the fact that each run could be
non-deterministic and other factors that may impact the run time,
we repeat each run experiment for 100 times.

Does Coding in Pythonic Zen Peak Performance?
Preliminary Experiments of Nine Pythonic Idioms at Scale

ICPC 2022, May 16–17, 2022, Pittsburgh, PA, USA

To calculate the improvements, we ﬁnd the diﬀerence in medi-
ans of both memory usage and execution time for each run. Note
that we only report if there is improvement over the non-Pythonic
code. Overall, we ﬁnd that the improvements in both megabytes
(MB) and seconds increase at the runs increase, as is shown by Ta-
ble 1.

On the other hand, there is no signiﬁcant diﬀerence from
Dict comprehension,
lambda (equally 3,882.95 MB), collec-
tions.defaultdict (equally 14,337.73 MB) and collections.deque
(equally 19.00 MB). We believe that this is because both idioms use
a multiple iterators in parallel, so it does not allocate extra space
for pairing those items in the lists.

Observation 1: Results indicate that performance diﬀer-
ences become apparent at higher input computations.

3.3 Data Analysis
For the rest of the analysis, we focus on the highest run setting
(i.e., Run = 9). We then report the median and mean memory (in
megabytes MB) and execution times (in seconds).

In order to statistically validate the diﬀerences between the per-
formance of Pythonic and Non-pythonic codes, we apply an inde-
pendent sample t-test [12]. We test the null hypothesis that “the
performance of Pythonic and Non-pythonic codes are the same”. The
parameters are set the eﬀect size using Cohen’s d which indicate
diﬀerences between two means based on the standard deviation
of the population. The interpretation is listed as follows: (1) 0 ≤ d
< 0.1 as Very small, (2) 0.1 ≤ d < 0.35 as Small, (3) 0.35 ≤ d < 0.65
as Medium, (4) 0.65 ≤ d < 0.9 as Large, or (5) d ≥ 0.9 as Very large.
For a statistical test, we use NumPy [6], SciPy [14], and researchpy
[3].

4 ANALYSIS 1 - MEMORY CONSUMPTION
Table 2 shows the summary statistics of memory usage for each
Pythonic and Non-pythonic code at the highest input points (size
is in Run = 9). Under these settings, we ﬁnd that ﬁve out of
nine Pythonic idioms had signiﬁcant memory performance im-
provements when compared to the Non-pythonic counterparts
(i.e., highlighted in green, statistically signiﬁcant diﬀerence and
have large eﬀect size). The Pythonic idiom that peak performance
is List comprehension, Generator expression, yield, zip and iter-
tools.zip_longest. We also ﬁnd that using itertoools.zip_longest
can save more memory than other idioms (i.e., a median diﬀerence
of 6,965.85 MB, an eﬀect size is 65,805.65 standard deviations or
very large).

Observation 2: Five out of nine Pythonic idioms statisti-
cally signiﬁcantly consume less memory than their Non-
pythonic counterparts. (i.e., List comprehension, dict com-
prehension, generator expression, yield, lambda, zip and
itertools.zip_longest )

5 ANALYSIS 2 - EXECUTION TIME
Table 3 shows summary statistics for execution times at the
highest setting (Run = 9). Here we ﬁnd that eight out of nine
Pythonic idioms improve the execution times (i.e., statistically sig-
niﬁcant diﬀerence and have very large eﬀect size are highlighted
in green in the Table). The Pythonic idioms are List comprehen-
sion, Dict comprehension, Generator expression, yield, lambda,
collections.deque, zip and itertools.zip_longest. We can see that
using Pythonic idiom can save up to 32.25 seconds (i.e., from iter-
tools.zip_longest).

Also from Table 3, we ﬁnd that collections.defaultdict took more
execution times than Non-pythonic code style (i.e., 25.41 seconds
> 18.57 seconds, highlighted in yellow). As stated in the oﬃcial
Python document, defaultdict is a subclass of the built-in dict
class. We suspect that the new mechanism of defaultdict causes
the slower speed than the built-in dict, even though it helps devel-
opers write a shorter code. Note that with our experiment setup,
the time diﬀerences are still within one minute.

Observation 3: Eight out of nine idioms were faster in ex-
ecution than the Non-pythonic counterparts at scale. The
only exception was the collections.defaultdict idiom.

Table 1: Summary statistics of median improvement of Pythonic code over Non-Pythonic code in terms of memory usages
and execution times (MB | seconds) from Run = 1 to 9 (i.e., 100 to 108 integer instances). “-” refers to no improvement.

Δ @1

Δ @2

Δ @3

Δ @4

Runs (MB|secs)
Δ @6

Δ @5

Δ @7

Δ @8

Δ @9

List comprehension
Dict comprehension
Generator expression
yield
lambda
collections.defaultdict
collections.deque
zip
itertools.zip_longest

0.05 | -
0.01 | -
- | -
- | -
0.02 | -
- | -
0.01 | -
0.04 | -
0.01 | -

- | -
- | -
0.03 | -
0.03 | -
- | -
0.03 | -
- | -
- | -
- | -

- | -
- | -
- | -
0.04 | -
0.05 | -
- | -
- | -
- | -
0.02 | -

0.02 | -
- | -
0.01 | -
- | -
- | -
- | -
- | -
- | -
- | -

- | -
0.02 | -
0.21 | -
0.19 | -
- | -
0.01 | -
0.02 | -
0.28 | -
0.79 | -

0.07 | 0.01
0.03 | -
3.82 | -
4.10 | -
- | -
- | -
0.05 | -
3.61 | 0.01
7.26 | 0.04

0.02 | 0.06
- | 0.04
38.61 | 0.01
38.92 | 0.02
0.02 | 0.01
- | -
- | 0.02
34.90 | 0.12
70.01 | 0.35

0.05 | 0.58
- | 0.45
386.36 | 0.11
386.58 | 0.17
- | 0.05
- | -
- | 0.22
348.50 | 1.13
696.79 | 3.28

0.05 | 5.78
- | 4.46
3,863.95 | 1.10
3,864.13 | 1.70
- | 0.53
- | -
- | 2.07
3,481.89 | 11.02
6,964.85 | 32.25

ICPC 2022, May 16–17, 2022, Pittsburgh, PA, USA Pattara Leelaprute, Bodin Chinthanet, Supatsara Wattanakriengkrai, Raula Gaikovina Kula, Pongchai Jaisri, and Takashi Ishio

Table 2: Summary statistics and comparison of memory usages (in MB) between Pythonic and Non-pythonic codes. This result
is taken from Run = 9 (i.e., 108 integer instances). Δ is improvement of Pythonic code over Non-Pythonic code (based on
median).

Pythonic

Non-Pythonic

Median

Mean

SD Median

Mean

List comprehension
Dict comprehension
Generator expression
yield
lambda
collections.defaultdict
collections.deque
zip
itertools.zip_longest

3,883.11
13,248.52
19.00
19.04
3,882.95
14,337.73
19.00
5,815.28
5,815.28

3,883.07
13,248.54
19.03
19.04
3,882.97
14,337.76
19.05
5,815.30
5,815.30

0.14
0.10
0.13
0.13
0.10
0.09
0.13
0.10
0.11

3,883.15
13,248.50
3,882.95
3,883.17
3,882.95
14,337.73
19.00
9,297.17
12,780.13

3,883.18
13,248.51
3,882.97
3,883.18
3,882.97
14,337.75
19.04
9,297.18
12,780.15

Δ

0.05
-
3,863.95
3,864.13
-
-
-
3,481.89
6,964.85

t-test
(p-value < 0.001)
X
-
X
X
-
-
-
X
X

SD

0.11
0.10
0.11
0.11
0.10
0.11
0.13
0.10
0.10

Cohen’s d

0.83 (Large)
0.30 (Small)
32,593.93 (Very large)
32,540.98 (Very large)
0.01 (Very small)
0.10 (Small)
0.05 (Very small)
33,629.04 (Very large)
65,805.65 (Very large)

Table 3: Summary statistics and comparison of execution times (in seconds) between Pythonic and Non-pythonic codes. This
result is taken form Run = 9 (i.e., 108 integer instances). Δ is improvement of Pythonic code over Non-Pythonic code (based
on median).

Pythonic

Non-Pythonic

Median Mean

SD Median Mean

SD

List comprehension
Dict comprehension
Generator expression
yield
lambda
collections.defaultdict
collections.deque
zip
itertools.zip_longest

3.04
10.98
6.19
7.06
11.99
25.41
12.33
15.8
28.18

3.04
11.01
6.23
7.12
11.99
25.53
12.32
15.79
28.39

0.02
0.16
0.17
0.22
0.17
0.56
0.09
0.37
0.89

8.82
15.44
7.29
8.76
12.52
18.57
14.4
26.82
60.44

8.85
15.45
7.3
8.76
12.51
18.65
14.41
26.85
60.44

0.24
0.32
0.09
0.06
0.14
0.38
0.11
0.45
0.91

Δ

5.78
4.46
1.10
1.70
0.53
-
2.07
11.02
32.25

t-test
(p-value < 0.001)
X
X
X
X
X
X
X
X
X

Cohen’s d

34.14 (Very large)
17.24 (Very large)
7.58 (Very large)
10.28 (Very large)
3.36 (Very large)
14.28 (Very large)
20.95 (Very large)
26.85 (Very large)
35.36 (Very large)

6 IMPLICATIONS AND FUTURE

CHALLENGES

We now discuss the implications and challenges for our research
directions.

6.1 Limitations
A key limitation of this work is that our code examples may not re-
ﬂect what is practiced in real-world application. Furthermore, we
are unsure the extent to which we could ﬁnd and replace the non
Pythonic code with their Pythonic counterparts. Another key lim-
itation is the execution environment. Currently our setup is using
a high-powered machine. This might not be realistic in a setting
where the user may use a lower speciﬁcation machine or have less
available memory. We also need to consider whether or not these
Pythonic codes are prevalent in the wild. Finally, in this study, we
only focus on nine Pythonic examples. There may be other forms
of Pythonic writing that are not covered by this research. We envi-
sion that all these limitations open up future avenues for research.

6.2 Implications
The main takeaway message for the paper is that writing Pythonic
code does matter at scale. We are not sure to what extent that this
may relate to real-world examples but shows that it is worth ex-
ploring in the future.

For Python programmers, our results are encouraging for data
scientist and other Python programmers that deal with large com-
putations and limited memory and time. Furthermore, as a com-
munity, it is another reason to encourage newcomers to exploit
the beneﬁts of writing the Pythonic way. For instance, it is worth-
while to incorporate list comprehension, generator expression, zip
and itertools.zip_longest as they save both time and memory. One
example of a set of Python programmers would be the maintainers
of PyPI libraries that deal with large datasets.

For researchers, based on these results similar to [10], tool sup-
port could be used to assist with suggestions to change non-
Pythonic to their Pythonic versions. The tool could be helpful for
novices, or for developers that programming in multiple languages
and are unaware of the Pythonic way.

For educators, it would be useful to introduce such idioms to stu-
dents that would like to fully maximize their usage of the language.
We suggest that this could be part of the more advanced level of
usage of the Python programming language.

6.3 Challenges and Future Directions
We identify three key challenges for future research directions. The
ﬁrst challenge is to detect and retrieve Pythonic idioms in the wild.
The second challenge for analyzing Python code in the wild is auto-
matic compiling real-world code. The ﬁnal challenge is to evaluate
whether or not the savings in performance makes a diﬀerence in
that certain scenario. In this case, we would have to conduct a user

Does Coding in Pythonic Zen Peak Performance?
Preliminary Experiments of Nine Pythonic Idioms at Scale

ICPC 2022, May 16–17, 2022, Pittsburgh, PA, USA

study to get developer perspectives. Also, we would have to focus
on speciﬁc tasks such as machine learning models to concretely
evaluate the beneﬁts. Apart from analyzing source code of soft-
ware projects, we also would like to explore other sources such as
the Kaggle dataset for data scientists.

ACKNOWLEDGMENT
This work has been supported by Japan Society for the Promo-
tion of Science KAKENHI Grants Grant Number JP20H05706 and
JP20K19774.

International Workshop on Empirical Software Engineering in Practice
(IWESEP).

[14] Pauli Virtanen, Ralf Gommers, Travis E. Oliphant, Matt Haberland,
Tyler Reddy, David Cournapeau, Evgeni Burovski, Pearu Peterson,
Warren Weckesser, Jonathan Bright, Stéfan J. van der Walt, Matthew
Brett, Joshua Wilson, K. Jarrod Millman, Nikolay Mayorov, Andrew
R. J. Nelson, Eric Jones, Robert Kern, Eric Larson, C J Carey, İlhan
Polat, Yu Feng, Eric W. Moore, Jake VanderPlas, Denis Laxalde, Josef
Perktold, Robert Cimrman, Ian Henriksen, E. A. Quintero, Charles R.
Harris, Anne M. Archibald, Antônio H. Ribeiro, Fabian Pedregosa,
Paul van Mulbregt, and SciPy 1.0 Contributors. 2020. SciPy 1.0: Funda-
mental Algorithms for Scientiﬁc Computing in Python. Nature Meth-
ods 17 (2020), 261–272.

REFERENCES
[1] 2021.

Glossary — Python

3.10.0
https://docs.python.org/3/glossary.html#Pythonic.
on 11/17/2021).

documentation.
(Accessed

[2] 2022.

PyPI.
https://pypi.org/project/memory-proﬁler/. (Accessed on 03/18/2022).
(Ac-

[3] 2022. researchpy - PyPI. https://pypi.org/project/researchpy/.

memory-proﬁler

·

cessed on 03/18/2022).

[4] Carol V. Alexandru, José J. Merchante, Sebastiano Panichella, Sebas-
tian Proksch, Harald C. Gall, and Gregorio Robles. 2018. On the Us-
age of Pythonic Idioms. In ACM SIGPLAN International Symposium on
New Ideas, New Paradigms, and Reﬂections on Programming and Soft-
ware (Onward! 2018). 1–11.

[5] Aamir Farooq and Vadim Zaytsev. 2021. There Is More Than One
Way to Zen Your Python. In ACM SIGPLAN International Conference
on Software Language Engineering (SLE).

[6] Charles R. Harris, K. Jarrod Millman, Stéfan J. van der Walt, Ralf
Gommers, Pauli Virtanen, David Cournapeau, Eric Wieser, Julian
Taylor, Sebastian Berg, Nathaniel J. Smith, Robert Kern, Matti Picus,
Stephan Hoyer, Marten H. van Kerkwijk, Matthew Brett, Allan Hal-
dane, Jaime Fernández del Río, Mark Wiebe, Pearu Peterson, Pierre
Gérard-Marchant, Kevin Sheppard, Tyler Reddy, Warren Weckesser,
Hameer Abbasi, Christoph Gohlke, and Travis E. Oliphant. 2020. Ar-
ray programming with NumPy. Nature 585, 7825 (Sept. 2020), 357–
362.

[7] José J. Merchante and Gregorio Robles. 2017.

From Python to
Pythonic: Searching for Python idioms in GitHub. In Seminar Series
on Advanced Techniques and Tools for Software Evolution (SATToSE).

[8] Dmitry Orlov. 2020. Finding Idioms in Source Code Using Subtree
Counting Techniques. In Leveraging Applications of Formal Methods,
Veriﬁcation and Validation: Engineering Principles. 44–54.

[9] Tim Peters. 2004.

https://www.python.org/dev/peps/pep-0020/.
11/16/2021).

PEP 20 – The Zen of Python | Python.org.
(Accessed on

[10] Purit Phan-udom, Naruedon Wattanakul, Tattiya Sakulniwat, Chaiy-
ong Ragkhitwetsagul, Thanwadee Sunetnanta, Morakot Choetkier-
tikul, and Raula Gaikovina Kula. 2020. Teddy: Automatic Recommen-
dation of Pythonic Idiom Usage For Pull-Based Software Projects. In
IEEE International Conference on Software Maintenance and Evolution
(ICSME).

[11] Luigi Quaranta, Fabio Calefato, and Filippo Lanubile. 2021. KG-
from Kaggle.

Torrent: A Dataset of Python Jupyter Notebooks
https://doi.org/10.5281/zenodo.4468523

[12] Amanda Ross and Victor L. Willson. 2017. Independent Samples T-Test.

SensePublishers, Rotterdam, 13–16.

[13] Tattiya Sakulniwat, Raula Gaikovina Kula, Chaiyong Ragkhitwet-
sagul, Morakot Choetkiertikul, Thanwadee Sunetnanta, Dong Wang,
Takashi Ishio, and Kenichi Matsumoto. 2019. Visualizing the Usage of
Pythonic Idioms Over Time: A Case Study of the with open Idiom. In

