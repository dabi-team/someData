2
2
0
2

r
a

M
3
2

]

A
N
.
h
t
a
m

[

1
v
0
8
1
2
1
.
3
0
2
2
:
v
i
X
r
a

Preconditioned Least-Squares Petrov–Galerkin Reduced
Order Models

Payton Lindsay1, Jeﬀrey Fike2, Irina Tezaur3∗, Kevin Carlberg4

1Computational Solid Mechanics and Structural Dynamics Department
Sandia National Laboratories
Albuquerque, NM 87185, USA

2Aerosciences Department
Sandia National Laboratories
Albuquerque, NM 87185, USA

3Quantitative Modeling and Analysis Department
Sandia National Laboratories
Livermore, CA 94551, USA

4University of Washington
Seattle, WA 98195, USA

March 24, 2022

Abstract

In this paper, we introduce a methodology for improving the accuracy and eﬃciency of
reduced-order models (ROMs) constructed using the least-squares Petrov–Galerkin (LSPG)
projection method through the introduction of preconditioning. Unlike prior related work,
which focuses on preconditioning the linear systems arising within the ROM numerical solution
procedure to improve linear solver performance, our approach leverages a preconditioning
matrix directly within the minimization problem underlying the LSPG formulation. Applying
preconditioning in this way has the potential to improve ROM accuracy for several reasons. First,
preconditioning the LSPG formulation changes the norm deﬁning the residual minimization,
which can improve the residual-based stability constant bounding the ROM solution’s error.
The incorporation of a preconditioner into the LSPG formulation can have the additional eﬀect
of scaling the components of the residual being minimized to make them roughly of the same
magnitude, which can be beneﬁcial when applying the LSPG method to problems with disparate
scales (e.g., dimensional equations, multi-physics problems). Importantly, we demonstrate that
an ‘ideal preconditioned’ LSPG ROM (a ROM in which the preconditioner is the inverse of

∗Email: ikalash@sandia.gov

1

 
 
 
 
 
 
P. Lindsay, J. Fike, I. Tezaur, K. Carlberg

Preconditioned LSPG ROMs

the Jacobian of its corresponding full order model) emulates projection of the full order model
solution increment onto the reduced basis. This quantity deﬁnes a lower bound on the error of
a ROM solution for a given reduced basis. By designing preconditioners that approximate the
Jacobian inverse—as is common in designing preconditioners for solving linear systems—it is
possible to obtain a ROM whose error approaches this lower bound. The proposed approach
is evaluated on several mechanical and thermo-mechanical problems implemented within the
Albany HPC code and run in the predictive regime, with prediction across material parameter
space. We demonstrate numerically that the introduction of simple Jacobi, Gauss-Seidel and ILU
preconditioners into the Proper Orthogonal Decomposition (POD)/LSPG formulation reduces
signiﬁcantly the ROM solution error, the reduced Jacobian condition number, the number
of nonlinear iterations required to reach convergence, and the wall time (thereby improving
eﬃciency). Moreover, our numerical results reveal that the introduction of preconditioning
can deliver a robust and accurate solution for test cases in which the unpreconditioned LSPG
method fails to converge.

Keywords: Reduced order model (ROM), proper orthogonal decomposition (POD), Least-squares
Petrov–Galerkin (LSPG) projection, preconditioners, computational solid mechanics, mechanical,
thermo-mechanical.

1 Introduction

Numerous modern-day science and engineering problems require the simulation of complex systems
with tens of millions of unknowns. Despite improved algorithms and the availability of massively
parallel computing resources, “high-ﬁdelity” models are, in practice, often too computationally
expensive for use in time-critical settings such as design, fast turnaround analysis and control. The
situation is particularly grave in applications involving multi-query analyses (e.g., optimization,
uncertainty quantiﬁcation), which require simulations to be repeated many times to explore the
design space or to properly characterize uncertainty. The necessary calculations can present an
intractable computational burden even with the projected growth in computing power as we approach
the exascale computing age.

Reduced-order modeling is a promising strategy for reducing the computational cost of such
simulations while preserving high levels of ﬁdelity. Reduced-order models (ROMs) are models
constructed from high-ﬁdelity simulations that retain the essential physics and dynamics of their
corresponding full order models (FOMs), but have a much lower computational cost. Although some
consider a data-ﬁt or low-ﬁdelity model a ROM, herein the term “reduced order model” refers to a
projection-based ROM. In projection-based model reduction, the state variables are restricted to
reside in a low-dimensional subspace, typically computed oﬄine through a data-compression process
performed on a set of snapshots collected from a high-ﬁdelity simulation or physical experiment,
followed by truncation. There are numerous approaches in the literature for computing a low-
dimensional subspace e.g., Proper Orthogonal Decomposition (POD) [72, 41], Dynamic Mode
Decomposition (DMD) [62, 68] balanced POD (BPOD) [61, 82], balanced truncation [37, 50], and
the reduced basis method (RBM) [63, 80]. Herein, without loss of generality, we restrict attention
to the POD approach for calculating the reduced bases due to its prevalence and simplicity. Once
a reduced basis is computed, the ROM dynamical system is obtained by projecting the governing
equations, or some discretized form of these equations, onto the low-dimensional subspace. For
nonlinear problems, an additional approximation, referred to as “hyper-reduction”, is usually required
to gain a computational speed-up. Since ROMs are, by construction, low-dimensional and inexpensive

2

P. Lindsay, J. Fike, I. Tezaur, K. Carlberg

Preconditioned LSPG ROMs

to evaluate, these models can enable real-time analysis and alleviate the computational burden
posed by high-dimensional uncertainty quantiﬁcation (UQ) problems critical to many applications.
In order to serve as a viable predictive tool, a ROM should possess certain fundamental math-
ematical properties, such as consistency (with respect to its corresponding high-ﬁdelity model),
stability (in space as well as in time), and convergence (to the solution of its corresponding high-
ﬁdelity model). Galerkin projection, the most popular approach, is considered continuous optimal,
as the resulting ROM minimizes the time-continuous residual in the l2 norm [15], and preserves
problem structure [21, 22, 47] for certain classes of problems (e.g., Lagrangian dynamical systems).
However, the method can give rise to nonphysical instabilities [60, 45, 13, 44, 12, 11, 10, 18] and
inaccurate long-time responses [71, 55, 15]. Additionally, it lacks in general an a priori convergence
guarantee [62]. The least-squares Petrov–Galerkin (LSPG) projection method has been proposed
[17] to remedy some of these diﬃculties via symmetrization of the discrete Jacobian. This method
performs projection at the level of the fully discrete partial diﬀerential equations (PDEs), i.e.,
after the PDEs have been discretized in space and time, and computes a solution that minimizes
the (cid:96)2-norm of the time-discrete residual arising in each time step. This procedure ensures that
adding basis vectors yields a monotonic decrease in the least-squares objective function deﬁning the
underlying minimization problem. The method can maintain eﬃciency through the incorporation of
hyper-reduction approaches such as gappy POD [31], the discrete empirical interpolation method
(DEIM) [25] or the Energy-Conserving mesh Sampling and Weighing (ECSW) method [33, 24, 32],
introduced to maintain eﬃciency of the method for nonlinear problems. When combined with gappy
POD, the LSPG approach is equivalent to the Gauss–Newton with approximated tensors (GNAT)
method [18]. While LSPG projection does not necessarily guarantee a priori accuracy and stability,
it has been shown numerically to possess better stability and accuracy properties than the Galerkin
method for a variety of problems [17, 18, 75, 77, 76, 15]. We note that the LSPG method has been
extended in the time domain [27, 57], to allow for nonlinear trial manifolds rather than linear trial
subspaces [48], to operate in a domain-decomposition setting [40], and to account for physics-based
constraints [67].

The aim of the present paper is to develop a methodology for improving the accuracy of
ROMs constructed using the LSPG projection method for a wide range of applications through the
introduction of preconditioning. As shown in [15], LSPG errors are subject to a stability constant
that is dictated by the residual. The use of preconditioning within the LSPG formulation improves
the conditioning of the system, which improves the stability constants. Intuitively, this aligns the
(cid:96)2-norm of the residual more closely with the (cid:96)2-norm of the (time-local) state error. To motivate
the main contributions of this paper, we ﬁrst provide a brief overview of related work involving
projection-based ROMs and preconditioning.

1.1 Overview of related work

The idea of preconditioning began to make an appearance within the model-reduction literature
approximately a decade ago. The bulk of the literature on this subject falls into two categories,
which we overview succinctly below.

The ﬁrst category of methods are aimed at developing ROM-based preconditioners for high-ﬁdelity
models. In [19, 58], the authors present a novel class of ROM-based preconditioners for the iterative
high-ﬁdelity solution of transient parabolic and self-adjoint PDEs. The preconditioners are obtained
by nesting appropriate projections of ROMs into the classical preconditioned Conjugate Gradient
(CG) iteration within the FOM. Several authors explore the idea of developing a ROM-based

3

P. Lindsay, J. Fike, I. Tezaur, K. Carlberg

Preconditioned LSPG ROMs

preconditioner to speed-up the numerical solution of the pressure system arising in high-ﬁdelity
reservoir modeling [8, 43]. In [8], Astrid et al. employ ROM concepts to develop a new preconditioner
to speed up the pressure solution during a two-stage preconditioning procedure in a fully implicit
time-integration scheme within a high-ﬁdelity reservoir simulator. In [43], Jiang introduces a ROM-
based preconditioner within a stationary Richardson iteration for the pressure system in a similar
high-ﬁdelity reservoir simulation.

The second category of methods explore the idea of introducing a preconditioner within the
ROM workﬂow to speed up the online evaluation of the ROM. This work is motivated by the
observation that the repeated solution of linear systems, characterized by dense matrices, can be
the main computational bottleneck in eﬃcient scaling of ROMs [69]. Commonly, the linear systems
arising within the ROM workﬂow are solved using direct methods. This approach can be reasonable
for small ROMs, but for larger ROMs containing numerous parameters, it was shown in [30] that
a direct method can be more expensive to solve than the original FOM. Preconditioned iterative
methods have been developed for alleviating this diﬃculty. In [29] and [30], preconditioners that
are precomputed in the oﬄine stage of the model reduction are introduced into a reduced basis
ROM formulation with and without the application of discrete empirical interpolation to handle
the nonlinear terms in the ROM. These preconditioners are derived from preconditioners used in
solving the FOM, and are shown to be more eﬃcient than direct solvers for problems depending on
a moderately large number of parameters. Singh et al. develop strategies for reusing preconditioners
in projection-based model reduction algorithms for parametric [70] and non-parametric [69] ROMs
to improve scalability of ROM solution over direct methods. These authors introduce a novel Sparse
Approximate Inverse (SPAI) preconditioner for ROMs constructed via moment matching using
the Bilinear Iterative Rational Krylov Algorithm (BIRKA) algorithm. These preconditioners are
aimed at systems where the linear system may change substantially between nonlinear iterations, as
happens with highly nonlinear problems. Several other authors consider preconditioners constructed
using IRKA methods, for which the most computationally demanding part is the solution of linear
shifted systems. The ROM matrices in this case are sparse. Ahmad et al. [6] propose variants of the
IRKA that use preconditioned versions of the shifted BiCG algorithm, and develop a polynomial
preconditioner that can simultaneously be applied to all shifted systems. The idea of updating
incomplete factorization preconditioners within the IRKA approach is explored in [7]. The use of
randomized matrices to construct preconditioners for ROMs has been studied recently by several
authors [83, 9].
In [83], the authors propose to use randomized linear algebra for the eﬃcient
construction of a preconditioner by interpolation of matrix inverse. It is shown that, in addition
to improving the online performance of a given ROM, these preconditioners can be also used to
improve the quality of residual-based error estimates in the context of the reduced basis method.
Building on [83], Balabanov [9] addresses the eﬃcient construction (using random sketching) of
parameter-dependent preconditioners that can be used to improve the quality of Galerkin projections
or for eﬀective error certiﬁcation for reduced basis and POD ROMs with ill-conditioned operators.
It is worthwhile to remark that the idea of preconditioning an LSPG ROM is related to several
other recently-introduced methodologies for improving ROM accuracy, namely the idea of scaling
the ROM residual prior to its minimization and the idea of modifying the norm in which the residual
is minimized. In [81], Washabaugh proposed an approach for improving the accuracy of ROMs
for systems of PDEs in which diﬀerent variables have drastically diﬀerent scales (e.g., applications
where dimensional equations are employed). Speciﬁcally, it was shown in this reference that scaling
the ROM residual to get all the equations to be roughly the same order of magnitude (equivalent to
the application of a diagonal preconditioner) can result in more accurate ROMs. In a similar vein, it

4

P. Lindsay, J. Fike, I. Tezaur, K. Carlberg

Preconditioned LSPG ROMs

was demonstrated in [26] that normalizing snapshot data prior to computing POD modes in order
to remove dimensional eﬀects increases numerical robustness of ROMs for hypersonic aerodynamic
simulations, especially in cases with non-equilibrium thermo-chemical eﬀects. More recently, in [56],
Parish and Rizzi developed a set of dimensionally-consistent inner products and demonstrated that
these inner products have a positive impact on both Galerkin and LSPG ROMs with application to
the compressible Euler equations. In [28], Collins et al. examined an optimal test basis for LSPG
ROMs that are obtained by solving an adjoint-like system, which transforms the residual error
minimization problem to be equivalent to a least-squares state error minimization problem. The
resulting test functions can be seen as incorporating the action of a preconditioner matrix that
approximates the inverse of the Jacobian matrix from a ROM’s corresponding FOM. In [5], Abgrall
et al. proposed a residual minimization model reduction approach, in which the norm in which the
residual is minimized is the L1 norm. If the resulting L1 residual minimization is solved iteratively
using reweighted least-squares, the procedure can be interpreted as a least-squares solve.

1.2 Contributions and organization

A distinguishing feature of the present work that diﬀerentiates it from most of the references described
above is the premise that the introduction of a preconditioner into the LSPG formulation can not
only lead to performance gains (by reducing the condition number of the reduced Jacobian), but can
actually improve a ROM’s accuracy. Unlike prior work, e.g., [30, 29, 69], the idea herein is not to
simply precondition the linear systems arising within the LSPG algorithm to improve linear solver
performance, but rather to insert a preconditioner matrix directly into the minimization problem
underlying the LSPG formulation. Doing this has the eﬀect of changing the norm deﬁning the
residual minimization problem underlying the LSPG method, which can improve the residual-based
stability constant bounding the method’s error. We additionally demonstrate that:

• an ideal preconditioned LSPG ROM (a ROM in which the preconditioner is the inverse of the
Jacobian of its corresponding FOM) emulates projection of the FOM solution increment onto
the reduced basis, which deﬁnes a lower bound on the error of a ROM for a given reduced
basis;

• it is possible to obtain a ROM whose error approaches this lower bound by improving the

quality of the preconditioner employed within the LSPG formulation;

• the addition of certain preconditioners into the LSPG formulation can have the eﬀect of scaling
the components of the residual being minimized to make them roughly of the same magnitude,
which can minimize bias and reduce the number of nonlinear iterations required for convergence
when applying the LSPG method to problems with disparate scales (e.g., dimensional PDEs,
multi-physics problems);

• while our approach is not speciﬁcally based on preconditioning the linear systems arising
within the LSPG iteration process, it has the eﬀect of reducing the condition numbers of an
LSPG ROM’s reduced Jacobians.

We evaluate the performance and predictive accuracy of several preconditioned POD/LSPG ROMs
on one mechanical and two thermo-mechanical problems implemented within the open-source HPC
multi-physics ﬁnite element code known as Albany [65]. We point out that the vast majority of
the current ROM literature uses Galerkin projection for the reduction step of the ROM workﬂow

5

P. Lindsay, J. Fike, I. Tezaur, K. Carlberg

Preconditioned LSPG ROMs

when considering solids and structures [1, 79, 33, 24, 32, 20, 23]; herein, we demonstrate that the
preconditioned LSPG method can also be eﬀective for this class of problems. For the mechanical
problem, we demonstrate that preconditioning is needed to obtain a convergent POD/LSPG ROM.
For the thermo-mechanical problems, we demonstrate that, while it is possible to obtain a convergent
unpreconditioned POD/LSPG ROM for certain basis dimensions, the addition of preconditioning
reduces the error by between two and seven orders of magnitude, all while reducing the overall
wall time by as much as 12×. The wall time improvements can be attributed to a preconditioner’s
ability to reduce not only the condition number of the reduced Jacobians arising within the LSPG
algorithm, but also the total number of nonlinear iterations required for ROM convergence.

The remainder of this paper is organized as follows. In Section 2, we provide an overview of the
POD/LSPG approach to model reduction applied to a generic system of nonlinear algebraic equations,
which might arise from the discretization of a PDE. We introduce the notion of preconditioning
within the LSPG residual minimization problem in Section 3. We demonstrate that the use of a
preconditioner has the eﬀect of changing the norm in which the LSPG residual minimization problem
is solved, and show that the use of an ideal preconditioner (the inverse of a Jacobian matrix in a
particular Newton iteration) will lead to an l2-optimal projection of the solution increment onto the
reduced basis. In Section 4, we describe succinctly the Albany multi-physics ﬁnite element code and
our implementation of model reduction capabilities within this code, including a partitioned/“blocking
vector” approach for applying ROM Dirichlet boundary conditions within a ﬁnite element code that
does not remove the constrained (Dirichlet) degrees of freedom from the global ﬁnite element system
prior to performing its numerical solution. We study the performance of the proposed preconditioned
LSPG ROMs in the context of several mechanical and thermo-mechanical solid mechanics problems
in Section 5, demonstrating the eﬃcacy of the proposed preconditioning strategy. Finally, conclusions
are oﬀered in Section 6.

2 Problem formulation

2.1 Full-order model

Since the methodology described herein can be applied to a wide range of FOMs arising in a variety
of applications, let us consider the following generic system of nonlinear algebraic equations deﬁning
our FOM:

r(w) = 0.

(1)

Here, w ∈ RN is the state vector and r : RN → RN is the nonlinear residual operator. Systems of
the form (1) are obtained by fully discretizing a set of governing PDEs using a spatial discretization
method and, in the case of a dynamics problem, a time-integration scheme. Assuming we solve (1)
using a (globalized) Newton’s method, the following sequence of solutions is generated:

J (k)δw(k) = −r(k),

k = 1, . . . , K,

w(k) = w(k−1) + αkδw(k).

(2)

(cid:0)w(k)(cid:1) ∈ RN ×N is the FOM Jacobian, r(k) := r (cid:0)w(k)(cid:1) ∈ RN is the FOM residual,
Here, J (k) := ∂r
∂w
w(0) is an initial guess for the solution, αk ∈ R is the step length (obtained using a line-search
method, or set to one, as commonly done), and K is the number of Newton iterations.

6

P. Lindsay, J. Fike, I. Tezaur, K. Carlberg

Preconditioned LSPG ROMs

2.2 Reduced order models

Our task is to build a ROM for (1) using the projection-based model reduction approach. This
approach consists of three steps:

(i) calculation of a reduced basis,

(ii) projection of the governing equations (in our case, (1)) onto the subspace spanned by the

reduced basis, and

(iii) hyper-reduction to handle eﬃciently the projection of the nonlinear terms.

We describe each of these steps succinctly in the following subsections. As mentioned earlier in
the introduction, we restrict our attention herein to reduced bases calculated using the POD. The
numerical implementation of the model reduction algorithms outlined in this section within the
Albany multi-physics ﬁnite element code is discussed later, in Section 5.

2.2.1 Reduced basis calculation via the POD

The ﬁrst step in the projection-based approach to model reduction is the calculation of a basis of
reduced dimension M (cid:28) N (where N denotes the number of degrees of freedom (dofs) in the full
order model (1)) using the POD. The POD is a mathematical procedure that, given an ensemble of
data and an inner product, denoted generically by (·, ·), constructs a basis for the ensemble that is
optimal in the sense that it describes more energy (on average) of the ensemble in the chosen inner
product than any other linear basis of the same dimension M . The ensemble {wp : p = 1, . . . , P }
is typically a set of P instantaneous snapshots of a numerical solution ﬁeld, collected for P values
of a parameter of interest, or at P diﬀerent times. Following the so-called “method of snapshots”
[72], given a snapshot matrix W := [w1, ..., wP ] ∈ RN ×P , a POD basis ΦM of dimension M ≤ P is
obtained by ﬁrst computing the (thin) singular value decomposition (SVD)

W = U ΣV T ,
(3)
where the left singular vector matrix U := [u1, ..., uP ] ∈ RN ×P is orthogonal (U T U = I), the
diagonal singular value matrix Σ = diag(σi) contains the ordered singular values σ1 ≥ σ2 ≥ ... ≥
σP ≥ 0 of W , and the right singular vector matrix V ∈ RP ×P is also orthogonal, like U (V T V = I).
Given (3), the sought-after POD basis is obtained by selecting the ﬁrst M ≤ P left singular vectors
of W :

It follows that ΦM has orthonormal columns and satisﬁes ΦT

M ΦM = I.

Once ΦM is calculated, we approximate the solution to (1) by

ΦM := [u1, ..., uP ] ∈ RN ×M .

˜w = w0 + ΦM ˆw = w0 +

M
(cid:88)

i=1

φi ˆwi

(4)

(5)

where φi := ui for i = 1, ..., M , ˆw := [ ˆw1 · · · ˆwM ]T ∈ RM denote the generalized coordinates, and
w0 ∈ RN denotes a reference solution, often taken to be the initial condition in the case of an
unsteady simulation. Substituting the approximation (5) into (1) yields

(6) is a system of N equations in M unknowns ˆw. As this is an over-determined system, it may not
have a solution.

r(w0 + ΦM ˆw) = 0.

(6)

7

P. Lindsay, J. Fike, I. Tezaur, K. Carlberg

Preconditioned LSPG ROMs

2.2.2 Least-Squares Petrov–Galerkin (LSPG) projection

As discussed earlier, the LSPG approach [17] to model reduction has shown some promise in
mitigating the stability problems and other disadvantages of other approaches, e.g., the Galerkin
projection method. In the LSPG approach, the ROM solution in (5) is obtained by solving the
following least-squares optimization problem:

ˆwPG ∈ arg min
y∈RM

(cid:107)r(w0 + ΦM y)(cid:107)2
2.

(7)

Here, the approximate (Petrov–Galerkin) solution is ˜wPG := w0 + ΦM ˆwPG. The name “LSPG”
ROM comes from the observation that solving (7) amounts to solving a nonlinear least-squares
problem. The two most popular approaches for this are the Gauss–Newton approach and the
Levenberg–Marquardt (trust-region) method. Following the work of Carlberg et al. [18], we adopt
the Gauss–Newton approach1. This approach implies solving a sequence of linear least-squares
problems of the form

δ ˆw(k)

PG ∈ arg min
y∈RM

(cid:107)J (k)ΦM y + r(k)(cid:107)2
2,

k = 1, . . . , KPG,

(8)

PG + αkδ ˆw(k)
PG = ˆw(k−1)
ˆw(k)
PG,
PG = w0 + ΦM ˆw(k−1)
˜w(k)
PG ,
where KPG is the number of Gauss–Newton iterations. It can be shown that the approximation
upon convergence is ˜wPG = ˜w(KPG)
PG .2 Note that the normal equations for (8)
take the form

and ˆwPG = ˆw(KPG)

(10)

(9)

PG

PGδ ˆw(k)
J (k)

PG = −r(k)
PG,

k = 1, . . . , KPG,

PG := Ψ(k)
J (k)

M

T

J (k)ΦM ,

PG := Ψ(k)
r(k)

M

T

r(k),

(11)

(12)

where

and

M := J (k)ΦM .
Equation (8) can be solved numerically using a variety of methods, including solving the normal
equations (11), or by employing more numerically stable methods such as the QR decomposition
and the SVD; see [18] for more details.

(13)

Ψ(k)

Remark 1. It is clear from (12) and (13) that LSPG projection can be interpreted as a Petrov–
Galerkin process of the Newton iteration with trial basis ΦM and test basis Ψ(k)

M deﬁned in (13).

Remark 2. When Newton’s method is employed to solve the reduced state equations for the LSPG
method, the ROM solution procedure can be viewed as minimizing at each iteration the error in the
search direction:

δ ˆw ∈ arg min
y∈RM

(cid:107)ΦM y − δw(k)(cid:107)2

Θ = arg min
y∈RM

(cid:107)ΦM y + J (k)−1

r(k)(cid:107)2

Θ,

(14)

1The LSPG approach is the basis for the Gauss–Newton with Approximated Tensors (GNAT) method of Carlberg

et al. [18].

2In the event of an unsteady simulation, the initial guess for the generalized coordinates is taken to be the

generalized coordinates at the previous time step.

8

P. Lindsay, J. Fike, I. Tezaur, K. Carlberg

Preconditioned LSPG ROMs

J (k) and ||x||Θ :=

where Θ := J (k)T
xT Θx. Since Θ is always a symmetric positive-deﬁnite
matrix, the LSPG approach has the eﬀect of symmetrizing the discrete ROM Jacobian. As shown in
[17], when (14) is satisﬁed, the error measure (cid:107)ΦM y − δw(k)(cid:107)Θ decreases monotonically as vectors
are added to the POD basis.

√

2.2.3 Hyper-reduction

The LSPG projection approach described in Section 2.2.2 is ineﬃcient for nonlinear problems.
This is because the solution of the ROM system requires algebraic operations that scale with the
dimension of the original full order model N . This problem can be circumvented through the use of
hyper-reduction. A number of hyper-reduction approaches have been proposed, including DEIM
[25], “best points” interpolation [53, 54], collocation [49], gappy POD [31] and the ECSW method
[33, 24, 32]. The basic idea behind these approaches is to compute the residual at some small number
of points q with q (cid:28) N , encapsulated in a “sampling matrix” Z. This set of q points is typically
referred to as the “sample mesh”. The “sample mesh” is computed oﬄine using a greedy algorithm
following the notion of gappy data reconstruction [31], as described in detail in [18] and [16]. The
LSPG projection approach combined with gappy POD hyper-reduction is equivalent to the GNAT
method [18]. In this method, the nonlinear least-squares problem (7) is replaced with

ˆwGNAT ∈ arg min
y∈RM

(cid:107)(ZW )+Zr(w0 + ΦM y)(cid:107)2
2,

(15)

where W ∈ RN ×M is a reduced basis for the residual r and the ‘+’ symbol denotes the pseudo-inverse.
It is straightforward to demonstrate that the Gauss–Newton iterations corresponding to (15) take
the form

δ ˆw(k)

GNAT ∈ arg min
y∈RM

(cid:12)
(cid:12)
(cid:12)

(cid:104)

J (k)ΦM y + r(k)(cid:105)(cid:12)
(cid:12)
(cid:12)

(cid:12)
(cid:12)
(cid:12)

2

2

,

k = 1, . . . , KGNAT,

(cid:12)
(cid:12)(ZW +)Z
(cid:12)
ˆw(k)

GNAT = ˆw(k−1)
˜w(k)

GNAT + αkδ ˆw(k)
GNAT = w0 + ΦM ˆw(k−1)
GNAT,

GNAT,

(16)

(17)

(18)

where KGNAT denotes the number of Gauss–Newton iterations. It is noted that the gappy POD
approximation in (15) and (16) aims to approximate the entire residual and Jacobian (via least-
squares approximation) rather than simply sub-sample those quantities.

3 Preconditioned reduced order models

Having overviewed our basic ROM workﬂow, we now introduce the concept of preconditioned ROMs
to the general LSPG formulation described in Section 2.2.2. Let M ∈ RN ×N denote a non-singular
preconditioner matrix. In the present work, a preconditioned LSPG ROM is obtained by inserting
M into the least-squares optimization problem (7) to yield:

ˆwPPG ∈ arg min
y∈RM

(cid:107)M r(w0 + ΦM y)(cid:107)2
2,

(19)

where ˆwPPG denotes the generalized coordinates of the preconditioned Petrov–Galerkin ROM. It is
noted that M r(w) = 0 is equivalent to (1) provided M is non-singular.

9

P. Lindsay, J. Fike, I. Tezaur, K. Carlberg

Preconditioned LSPG ROMs

Similar to the standard LSPG approach, if (19) is solved using a Gauss–Newton algorithm, one

obtains the following sequence of linear least-squares problems:
J (k)ΦM y + r(k)(cid:17)(cid:12)
(cid:12)M (k) (cid:16)
(cid:12)
(cid:12)
ˆw(k)
PPG = ˆw(k−1)
PPG + αkδ ˆw(k)
PPG,
˜w(k)
PPG = w0 + ΦM ˆw(k−1)
PPG ,

PPG ∈ arg min
y∈RM

δ ˆw(k)

(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)

(cid:12)
(cid:12)
(cid:12)

2

2

,

k = 1, . . . , KPG,

(20)

(21)

(22)

where KPPG is the number of Gauss–Newton iterations. In (20), the superscript (k) has been
added to M (k) to indicated that, just like the Jacobian J (k), the preconditioner may change in each
Gauss–Newton iteration. We will assume that the sequence of preconditioners M (k) is non-singular.
The normal equations corresponding to (20) are

J (k)
PPGδ ˆw(k)

PPG = −r(k)

PPG,

k = 1, . . . , KPPG

(23)

where

J (k)
PPG := ΦT

M (J (k))T (M (k))T M (k)J (k)ΦM ,

r(k)
PPG := ΦT

M (J (k))T (M (k))T M (k)r(k).

(24)

In the remainder of this section, we bring to light and discuss the implications of several important

properties of preconditioned LSPG ROMs constructed via the approach described above.

Theorem 1. An “ideal” preconditioned ROM (a ROM in which M (k) = J (k)−1
for each Gauss–
Newton iteration k) emulates the projection of the FOM solution increment onto a given POD
basis:

δ ˜w(k) = ΦM

(cid:0)ΦT

M ΦM

(cid:1)−1

ΦT

M δw(k).

(25)

Since (25) is the upper limit on the ROM accuracy given a basis ΦM , it follows that the most
accurate ROM possible is realizable through the introduction of preconditioning.

Proof. Assume J (k) is full rank and let M (k) = J (k)−1
these normal equations to

. Substituting this M (k) into (23) reduces

ΦT

M ΦM δ ˆw(k)

PPG = −ΦT

M J (k)−1

r(k),

k = 1, . . . , KPPG .

(26)

Recognizing that the right-hand side of (26) contains the FOM solution increment δw(k) =
−J (k)−1

r(k), (26) is equivalent to

δ ˆw(k)

PPG = (ΦT

M ΦM )−1ΦT

M δw(k),

k = 1, . . . , KPPG ,

(27)

so that, from (5), δ ˜w(k) is given by (25).

Theorem 2. Introducing preconditioning into the LSPG formulation as in (20) has the eﬀect of
modifying the norm Θ in which the solution increment minimization is performed (14). For a
generic non-singular preconditioner matrix M (k), the LSPG ROM solution procedure can be can be
viewed as minimizing at each iteration the error in the search direction (14) in the norm given by

10

P. Lindsay, J. Fike, I. Tezaur, K. Carlberg

Preconditioned LSPG ROMs

Θ = (J (k))T (M (k))T M (k)J (k). For an ideal preconditioner (M (k) = J (k)−1
to an l2-optimal projection of the solution increment δw(k) onto the reduced basis ΦM :

), Θ = I, which leads

δ ˆw(k)

PPG ∈ arg min
y∈RM

(cid:107)ΦM y − δw(k)(cid:107)2
2

(28)

Proof. It is straightforward to see that
J (k)ΦM y + r(k)(cid:17)

(cid:107)M (k) (cid:16)

2 = (cid:107)M (k)J (k) (cid:16)
(cid:107)2

Θ,
(29)
where Θ = (J (k))T (M (k))T M (k)J (k). The claim follows immediately. Substituting M (k) = J (k)−1
and δw(k) = −J (k)−1

r(k) into (29) gives (28).

2 = (cid:107)ΦM y + J (k)−1
(cid:107)2

r(k)(cid:107)2

ΦM y + J (k)−1

r(k)(cid:17)

While selecting M (k) = J (k)−1

is infeasible in practice, an important corollary of Theorem 1
is that by selecting a preconditioner matrix that approximates J (k)−1
, it is possible to improve
the accuracy of a given LSPG ROM, with the ROM solution approaching the most accurate ROM
solution possible (for a given basis ΦM ) as M (k) → J (k)−1
. Moreover, if M (k) is selected such
that cond (cid:0)M (k)J (k)(cid:1) < cond (cid:0)J (k)(cid:1) (where cond(A) denotes the condition number of a matrix
A), it is possible to improve the condition numbers of the reduced Jacobians (24) arising in the
Gauss–Newton iteration process.

We end this section by remarking that there is an additional beneﬁt of introducing a preconditioner
into the LSPG formulation (7) as in (19). It has been observed [81, 26, 56] that minimizing the
raw (unweighted) residual r can be problematic for systems of PDEs where diﬀerent variables have
drastically diﬀerent magnitudes, which happens frequently in various applications where dimensional
equations are employed. Residual components corresponding to certain variables can be very
large compared to the residual components corresponding to other variables, thereby biasing the
minimization procedure. As shown in [81, 26, 56], scaling the ROM residual to get all the equations
to be roughly the same order of magnitude can remedy this problem. From (19), it is can be seen
that the introduction of a preconditioner M can have the same eﬀect.

4 Implementation in the Albany multi-physics ﬁnite element code

The preconditioned LSPG ROMs described herein have been implemented with a version3 of the
Albany code base [3], described succinctly in this section. Albany is an open-source4 C++
object-oriented, parallel, unstructured-grid, implicit ﬁnite element code for solving general PDEs,
developed using the “Agile Components” code development strategy [66] with mature modular
libraries from the Trilinos [39] project5. Over the years, Albany has hosted a number of science
and engineering applications, including the Aeras global atmosphere code [73], the Albany Land-Ice
(ALI) [78] ice sheet model solver, the Quantum Computer Aided Design (QCAD) [36] simulator,
the ACE thermo-mechanical terrestrial model of Arctic coastal erosion [34], and the Laboratory for
Computational Mechanics (LCM) [74, 52, 51] research code. This last project comprises Albany
LCM and is speciﬁcally targeted at solid mechanics applications, such as the ones considered in this

3Available on github at the following URL: https://github.com/sandialabs/Albany/releases/tag/MOR_

support_end.

4Albany is available on GitHub: https://github.com/sandialabs/Albany.
5Trilinos is available on GitHub: https://github.com/trilinos/Trilinos.

11

P. Lindsay, J. Fike, I. Tezaur, K. Carlberg

Preconditioned LSPG ROMs

paper. A more detailed description of Albany, including a detailed description of its underlying
design and the physics implemented therein, can be found in [65].

In the subsections below, we describe the main ingredients enabling the construction of precondi-
tioned LSPG ROMs within the Albany code base. We present also a special partitioned/“blocking
vector” approach for applying ROM Dirichlet boundary conditions within this code base, which
does not remove the constrained dofs from the global ﬁnite element system prior to performing its
numerical solution. This implementation is extensible to other ﬁnite element codes with similar
boundary condition treatment.

4.1 The model reduction workﬂow in Albany

As described in Section 2.2, the basic workﬂow in building a ROM consists of three steps: calculation
of a reduced basis, projection of the governing equations onto the reduced basis, and calculation of
a sample mesh using hyper-reduction. The implementation of this workﬂow within Albany for a
generic nonlinear problem is demonstrated in Algorithm 1.

Algorithm 1: Albany model reduction workﬂow. Example input ﬁles can be found in
the GitHub repository corresponding to this version of Albany [3], in the directory
Albany-MOR support ends/tests/small/MOR/MOR MechanicalCube.

Given: Albany, AlbanyRBGen, AlbanyMeshSample executables, and corresponding input ﬁles:

fomInput.xml, reducedBasisInput.xml, meshReduceInput.xml, romInput.xml

# Run the full order model to get the snapshots
./Albany fomInput.xml

# Compute reduced basis (RBGen required)
./AlbanyRBGen reducedBasisInput.xml

# Compute sample nodes and reduced mesh
./AlbanyMeshSample meshReduceInput.xml

# Run the ROM with hyper-reduction (sample mesh)
./Albany romInput.xml

First, the main Albany executable is run in FOM mode to collect the relevant snapshots for
a given problem, which are written to an output Exodus ﬁle. Next, the reduced basis and
sample mesh are calculated in Albany as a pre-processing step by utilities known as AlbanyRBGen
and AlbanyMeshReduce, respectively, using data collected from a high-ﬁdelity simulation. The
AlbanyRBGen utility employs the RBGen module within the Anasazi package of Trilinos [2] to
calculate a reduced basis ΦM using the POD algorithm outlined in Section 2.2.1. While it is possible
to use AlbanyRBGen to generate a scalar POD basis (i.e., a separate POD basis built for each of
the unknowns to a vector-valued problem), the utility was designed to construct vector POD bases,
and vector POD bases were employed in the numerical experiments in Section 5. We note that
AlbanyRBGen does not orthonormalize the POD modes with respect to the mass matrix for dynamic
solid mechanics problems, meaning the resulting bases are l2 (as opposed to L2(Ω)) orthogonal.

Hyper-reduction in Albany is also handled as a pre-processing step using another Albany utility,
AlbanyMeshSample, which creates the “sample mesh” by using either the collocation or the gappy
POD approach [17, 18] applied to the snapshot data (see Section 2.2.3). Following the calculation

12

P. Lindsay, J. Fike, I. Tezaur, K. Carlberg

Preconditioned LSPG ROMs

of ΦM and sample mesh, the main Albany executable is run again, this time in ROM mode, with
ΦM and the sample mesh as inputs. During this step, Albany solves the optimization problem
(7) (or (19) if preconditioning is used) using the Gauss–Newton method, and evaluates the ROM
solution. The details of the implementation of the projection step of the model reduction procedure
in Albany are described below in Section 4.2. The linear least-squares problem arising within
each Gauss–Newton step is solved using the normal equations approach ((11) or (23)). Solutions to
these linear systems are obtained using Krylov iterative methods (Conjugate Gradient or GMRES),
implemented within the AztecOO library [38] in Trilinos.

4.2 Projection via the Albany::ModelEvaluator wrapper
The implementation of the projection step of the model reduction procedure within Albany re-
lies heavily on the EpetraExt::ModelEvaluator nonlinear model abstraction available within
this code [59], whose concrete implementation in Albany is referred to hereafter as the Al-
bany::ModelEvaluator. The Albany::ModelEvaluator provides an extensible interface to the
underlying application code (Albany) for a variety of solver and analysis algorithms within Trili-
nos. Suppose we are solving a nonlinear algebraic system that can be written as

r(w, µ) = 0,

(30)

where r is the residual, w is the solution and µ is a vector of parameters, using the basic Newton
method. The Newton solution procedure requires querying the application for various quantities,
including the residual (30), and the Jacobian, deﬁned as dr/dw, calculated in Albany using
automatic diﬀerentiation within the Sacado library. The objective of the model evaluator interface
is to provide these quantities to Trilinos solvers through the Albany::ModelEvaluator interface,
which is agnostic to the physics, model and data structure that are needed to support the relevant
matrix and vector abstractions within the solver. The Albany::ModelEvaluator has utility beyond
this simple nonlinear solver example:
it works in a similar fashion to perform time integration,
continuation, sensitivity analysis, stability analysis, optimization and uncertainty quantiﬁcation. For
these more sophisticated analysis cases, it returns additional quantities besides r and dr/dw, e.g.,
the time-derivative of w (denoted by ˙w), sensitivities of r with respect to parameters µ (denoted
by dr/dµ), etc.

The model reduction capabilities in Albany are implemented by creating a wrapper around the
Albany::ModelEvaluator class within this code, known as the MOR::ReducedOrderModelEvaluator.
This class is only activated when reduced order model options are enabled in an Albany input
ﬁle, and takes the objects returned by the Albany::ModelEvaluator, e.g., the residual r (30) and
Jacobian dr/dw, together with a reduced basis ΦM , and returns the reduced residual and Jacobian
deﬁned in (8) for the LSPG method. The ROM formulation within Albany is generic enough to
create ROMs for various solvers and physics sets enabled in Albany; herein we focus on quasi-static
mechanical and thermo-mechanical problems from the LCM suite within Albany solved using
the LOCA continuation package within Trilinos [4]. There are currently two projection options
implemented in Albany for the type of reduced order model, Galerkin and LSPG projection. Herein,
attention is restricted to the latter approach.

4.3

Implementation of boundary conditions

In model reduction, it is customary to work with equations governing the unconstrained dofs, i.e.,
the dofs modulo any Dirichlet boundary conditions imposed. While in the standard ﬁnite element

13

P. Lindsay, J. Fike, I. Tezaur, K. Carlberg

Preconditioned LSPG ROMs

method formulation, constrained dofs are typically removed from the nonlinear system being solved,
it is not uncommon for ﬁnite element codes to retain these dofs. This approach is taken in the
boundary condition implementation within Albany. Speciﬁcally, in place of the system (1), the
governing equations in Albany take the form

¯r( ¯w) = 0.

(31)

In (31), ¯w ∈ R ¯N and ¯r : R ¯N → R ¯N denote the “extended” state and residual, respectively, with
¯N = N + NDBC, where NDBC and N are the number of constrained (Dirichlet) and unconstrained
dofs in the system, respectively. The extended variables can be rearranged to take the form:

¯w :=

(cid:18) w

(cid:19)

wDBC

¯r :=

(cid:18) r

rDBC

(cid:19)

,

(32)

where wDBC ∈ RNDBC denote the constrained dofs that extend the solution w ∈ RN . Assuming
(31) is solved using a globalized Newton method as in (2), Albany solves the following sequence of
problems

¯J (k)δ ¯w(k) = −¯r(k),

k = 1, . . . , K,

(33)

(34)

where

¯w(k) = ¯w(k−1) + αkδ ¯w(k),

¯J (k) =

(cid:18) J (k)
0

(cid:19)

,

0
¯J (k)
DBC

¯r(k) :=

(cid:18) r(k)
0

(cid:19)

.

In (34), the entries of ¯J (k)

DBC ∈ RNDBC×NDBC are deﬁned as follows: [ ¯J (k)

δij
for i = 1, ..., NDBC and j = 1, ..., NDBC, where δij denotes the Kronecker delta. In other words, ¯J (k)
DBC
is the diagonal part of the Dirichlet boundary condition (DBC) restriction of the FOM Jacobian
J (k) ∈ RN ×N . The remaining variables appearing in (33) were deﬁned earlier in section 2.1. Remark
that the implementation (33) maintains symmetry of the original system: since δw(k)
DBC = 0 for all
rows corresponding to Dirichlet boundary conditions, these rows are fully decoupled from all the
other rows, and the corresponding columns can be trivially zeroed.

DBC]ij :=

∂ ¯r
∂wDBC

w(k)
DBC

ij

(cid:104)

(cid:16)

(cid:17)(cid:105)

A consequence of the above discussion is that care must be taken to ensure boundary conditions
are properly applied in ROMs constructed within the Albany code. When computing the reduced
basis ΦM using Albany’s AlbanyRBGen utility (step 2 of Algorithm 1), all constrained dofs (dofs for
which Dirichlet BCs are imposed) are excluded from the snapshot matrix on which POD is performed.
The resulting basis modes are then augmented with a set of modes, denoted by ΦDBC ∈ RNDBC×MDBC,
deﬁned on a so-called blocking region of the domain when performing the projection-based reduction.
These modes, ΦDBC, are used as modes for the Dirichlet dofs, with common dofs grouped together
into blocks. For instance, individual components (x, y, z) of a certain nodeset might be grouped into
a block. Speciﬁcally,

Φ ¯M :=

(cid:18) ΦM

(cid:19)

0

0 ΦDBC

,

(35)

where the columns of ΦDBC ∈ RNDBC×MDBC are constructed from the (normalized) summation of
the canonical unit vectors of each block of common Dirichlet dofs, i.e. ΦDBC := [u1, u2, . . . , uMDBC],
where ui := bi/ (cid:107)bi(cid:107), bi = (cid:80)
ej, and Ci is the set of dofs for each block of dofs comprising the
blocking region as described above.

j∈Ci

14

P. Lindsay, J. Fike, I. Tezaur, K. Carlberg

Preconditioned LSPG ROMs

Performing an LSPG projection amounts to solving the following system

Ψ(k)

¯M ( ¯w0 + Φ ¯M

¯ˆwPG)T ¯r( ¯w0 + Φ ¯M

¯ˆwPG) = 0,

where

Ψ(k)

¯M (w) := ¯J (k)Ψ ¯M =

(cid:18) J (k)ΦM
0

0
¯J (k)
DBCΦDBC

(cid:19)

,

¯ˆwPG :=

(cid:18) ˆwPG
ˆwDBC

(cid:19)

.

(36)

(37)

and ˆwPG ∈ RM and ˆwDBC ∈ RMDBC are the ROM solution (equations (5) and (7)) and blocking
solution, respectively.

4.4 Preconditioned ROMs in Albany

To precondition the LSPG ROMs constructed by the Albany code base, we rely on the Ifpack suite
of preconditioners [64] within Trilinos. The speciﬁc preconditioners tested herein are summarized
in Table 1. In all Ifpack preconditioned cases, the eﬀect of preconditioning is to pre-multiply the
terms J (k)Φ and r(k) in (8) by an approximation of the FOM Jacobian inverse, M (k) ≈ J (k)−1
.
We limit our attention to three Ifpack preconditioners: a Jacobi preconditioner, a Gauss-Seidel
preconditioner and an incomplete LU (ILU) preconditioner with a level-of-ﬁll of 1. The Jacobi
preconditioner approximates J (k)−1
by an inverse of the diagonal of the Jacobian J (k), whereas
the Gauss-Seidel preconditioner is constructed by inverting the elements of the upper triangular
part of J (k). Our ILU preconditioner is another simple preconditioner, obtained by performing an
incomplete LU factorization of J (k) and allowing only one non-zero diagonal above and one non-zero
diagonal below the main diagonal. For a detailed description of these preconditioners and their
implementations within Ifpack, the interested reader is referred to [64]. By considering several
preconditioners, we are able to study numerically how the ROM error changes as the preconditioner
is M (k) is improved. In addition to the preconditioners provided by Ifpack, we consider also, when
computationally feasible to calculate, the ideal preconditioned case, in which M (k) is calculated by
computing the action of the inverse of the Jacobian matrix J (k)−1
. As shown earlier, in Theorem 1,
calculating M (k) = J (k)−1
is equivalent to directly computing the FOM solution increment δwk by
solving J (k)δwk = −r(k), then projecting that solution increment onto the ROM space to obtain
the ROM solution increment δ ˆw(k)
PG, as in (25). Since this approach solves the FOM system at every
iteration instead of a modiﬁed ROM system as with the other approaches, the dominant source of
error with this approach will be in the projection, i.e., how much the basis ΦM has been truncated,
and we expect the errors with this approach to be very low.

Table 1: Summary of preconditioners evaluated

Preconditioner Name
Jacobi
Gauss-Seidel
ILU
Ideal

Description of Preconditioner
Jacobi
Gauss-Seidel
Incomplete LU factorization with 1 level-of-ﬁll

J (k)−1

(equivalent to projected solution increment (25))

15

P. Lindsay, J. Fike, I. Tezaur, K. Carlberg

Preconditioned LSPG ROMs

5 Numerical examples

5.1 Governing equations

The predictive ability of the Albany model reduction capabilities described in Section 4 are evaluated
on three problems based on the quasi-static mechanics and thermo-mechanics PDEs implemented
within Albany’s LCM suite. The last of these cases is a problem of practical scale and involves a
realistic geometry. Before presenting our test cases, we brieﬂy summarize the PDEs being solved.

5.1.1 Mechanical formulation

Consider a body deﬁned by an open set Ω ⊂ R3 undergoing a motion described by the mapping
x = ϕ(X) : Ω × R3, where X ∈ Ω. Let F := Grad ϕ be the deformation gradient. Let also
ρ0B : Ω → R3 be the body force, with ρ0 the mass density in the reference conﬁguration. It is
straightforward to show [52] that the Euler-Lagrange equations for a canonical quasi-static mechanical
problem take the form:

Div P + ρ0B = 0,

in Ω.

(38)

Here, P = ∂W/∂F denotes the ﬁrst Piola-Kirchhoﬀ stress and, assuming an elastic material
model6, W = W (F ) is the Helmholtz free-energy density. Assume that the boundary of the body is
Γ = ∂ϕΩ∪∂T Ω, where ∂ϕΩ is a prescribed position boundary, ∂T Ω is a prescribed traction boundary,
and ∂ϕΩ ∩ ∂T Ω = ∅. Denoting the prescribed boundary positions or Dirichlet boundary conditions
by χ : ∂ϕΩ → R3, and the prescribed boundary tractions or Neumann boundary conditions are
T : ∂T Ω → R3, (38) is supplemented by the following constraints:

ϕ(X) = χ on ∂ϕΩ, P N = T on ∂T Ω.

(39)

Embedded within the Helmholtz free-energy density W (F ) is a constitutive or material model. For
the numerical examples given here, we employ a Neohookean constitutive model extended to the
compressible regime, which is consistent with a nonlinear elastic material [42]. Following common
practice in solid mechanics, we decompose W (F ) into its volumetric and deviatoric components:

W (F ) = W vol(F ) + W dev(F ).

(40)

For a Neohookean material, the components comprising W (F ) in (40) are given by:

W vol(F ) :=

1
2

κ

(cid:20) 1
2

(J 2 − 1) − log J

(cid:21)

, W dev(F ) :=

1
2

(cid:104)

(cid:105)
J −2/3trace(b) − 3

.

µ

(41)

In (41), κ denotes the bulk modulus, given by

κ =

E
3(1 − 2ν)

,

(42)

where E is the elastic modulus and ν is Poisson’s ration; µ denotes the shear modulus, given by

µ =

E
2(1 + ν)

.

(43)

6The Albany LCM code contains a wide range of constitutive models for solid mechanics, and includes models
for both elastic and plastic materials. Since the results presented herein assume an elastic material, we restrict our
presentation to the elastic case. For plastic materials, the Helmholtz free-energy density is also a function of the
internal variables, denoted by Z: W = W (F , Z).

16

P. Lindsay, J. Fike, I. Tezaur, K. Carlberg

Preconditioned LSPG ROMs

J := det(F ) is the determinant of the deformation gradient, and

b := FM F T
M ,

(44)

is the left Cauchy-Green deformation, tensor, where FM denotes the mechanical part of the
deformation gradient. For a pure mechanics problem, FM = F . The mechanical equations (38) are
solved for the displacements, the primary unknowns in these equations.

5.1.2 Thermo-mechanical formulation

In the case of a quasi-static thermo-mechanical problem, the mechanics equations (38) are augmented
with the following generic steady-state heat conduction equation:

∇ · q(T ) = f ,

in Ω,

(45)

where q denotes the heat ﬂux, T denotes the temperature and f is a source term. Equation (45)
can include boundary conditions of both the Dirichlet and Neumann type, e.g.,

T (X) = Tp on ∂ϕΩ, q(T ) = qp on ∂T Ω,

(46)

where Tp and qp are prescribed temperature and heat ﬂux values, respectively. In this case, a
temperature dependence is introduced into the Helmholtz free-energy density (41): W = W (F , T ).
For the Neohookean formulation considered herein, temperature eﬀects are introduced in the form
of thermal expansion. More speciﬁcally, the mechanical part of the deformation gradient appearing
in (44) now takes the form:

where

FM := F F −1
T ,

FT := exp [α(T − Tref)] I

(47)

(48)

is the thermal part of the deformation gradient, with I denoting the identity tensor. In (48), α is
the thermal expansion coeﬃcient and Tref is the reference temperature. For the problems considered
here, the heat ﬂux in (45) takes the form:

q(T ) = K · ∇T,

(49)

where K is the thermal diﬀusivity tensor.

5.2 Evaluation criteria

Recall that we denote the FOM solution as w and the approximate ROM solution as ˜w = w0 +ΦM ˆw
(5). Let wi and ˜wi denote the FOM and ROM solutions, respectively, corresponding to time ti, for
i = 1, ..., P , where P denotes the number of snapshots collected. Building on these deﬁnitions, we
deﬁne the global relative error in the approximate ROM solution as:

(cid:15) :=

P
(cid:88)

i=0

(cid:107)wi − ˜w(cid:107)2

P
(cid:88)

i=0

(cid:107)wi(cid:107)2

.

17

(50)

P. Lindsay, J. Fike, I. Tezaur, K. Carlberg

Preconditioned LSPG ROMs

For mechanical problems, w and ˜w represent the displacement ﬁeld solutions, whereas for thermo-
mechanical problems, these vectors include also the temperature ﬁeld. In the subsequent sections,
the proposed preconditioned LSPG ROMs are evaluated using the metric (50). We emphasize that
the evaluations performed herein are in the predictive regime. That is, we calculate errors by running
the proposed ROMs with diﬀerent parameter values than the parameter values used to generate the
training data from which the ROMs were constructed. More details on the training/testing for each
problem considered are provided in the subsections below. Following the usual convention in solid
mechanics, the FOMs and ROMs for all three test cases considered are run dimensionally.

In addition to reporting the global relative error for each of the ROMs evaluated, we also
report the total CPU-time of the online stage of the model reduction procedure for each ROM.
The speciﬁcations of the run-time environment for each benchmark problem are described in the
following subsections. As the purpose of this work is to present a preliminary study examining the
viability of preconditioning within the LSPG framework, hyper-reduction, which would potentially
introduce another source of error, was not employed in our study. Evaluating the performance of
LSPG ROMs with preconditioning and hyper-reduction will be the subject of future work. It is
noted that special hyper-reduction techniques, e.g., the ECSW method [33, 24, 32] of Chapman,
Farhat et al. and the structure-preserving/“matrix gappy POD” method of Carlberg et al. [20, 23],
are needed to preserve the Lagrangian structure of ROMs for solid mechanics problems such as the
ones discussed herein. These are not available within the Albany code base at the present time.
Lastly, for each problem considered, we report also either the average condition number of all
reduced Jacobians obtained during the Gauss–Newton iteration process or the total number of
nonlinear iterations required for ROM convergence. The latter metric is adopted for the larger
thermo-mechanical pressure vessel problem (Section 5.4), as estimating reduced Jacobian condition
numbers is not feasible for a problem of that size.

5.3 Mechanical and thermo-mechanical beam

Our ﬁrst example involves a simple three-dimensional (3D) beam geometry Ω of size 0.16 × 0.016 ×
0.032 m centered at (0, 0, 0), discretized using 320 hexahedral elements, which gives rise to 525 nodes
(Figure 1). The geometry Ω is divided into ﬁve material blocks, as shown in in Figure 1(a). The
purpose of having several material blocks is to enable the speciﬁcation of diﬀerent material models
and/or material parameters in diﬀerent parts of the domain. As mentioned earlier, we consider a
nonlinear elastic material model known as the Neohookean model, which is prescribed in all the
blocks comprising Ω; however, as discussed below, diﬀerent material parameters are speciﬁed in
diﬀerent blocks.

In order to complete the problem deﬁnition, it is necessary to specify well-posed boundary
conditions on our beam geometry Ω. We prescribe boundary conditions on four of Ω’s boundaries,
shown in Figure 1(b) and denoted by Γw, Γb, Γt and Γn. Γw corresponds to x = −0.08 and is shown
in red; Γb corresponds to y = −0.008 and is shown in yellow; Γn corresponds to z = −0.016 and is
shown in blue; Γt corresponds to y = 0.008 and is shown in green. In both versions of our problem
formulation (mechanical and thermo-mechanical; Sections 5.3.1 and 5.3.2, respectively), Γw is ﬁxed
in the x-direction, Γn is ﬁxed in the z-direction and Γt is ﬁxed in the y-direction. Additionally, the
following linearly-varying time-dependent pressure Neumann boundary condition is applied on Γb

P (t) = (7.2599 × 104)t Pa,

t ≥ 0,

(51)

where t is a pseudo-time variable, described in more detail below. For the thermo-mechanical version

18

P. Lindsay, J. Fike, I. Tezaur, K. Carlberg

Preconditioned LSPG ROMs

(a) Discretization of Ω

(b) Ω’s boundaries

Figure 1: Computational domain for the beam problem. In subﬁgure (a), diﬀerent colors indicate diﬀerent material
blocks. Subﬁgure (b) distinguishes in color the diﬀerent boundaries on which boundary conditions are prescribed.

of the beam problem (Section 5.3.2), an additional temperature boundary condition is prescribed on
Γw; we defer discussion of this boundary condition until Section 5.3.2. For both variants of this
problem, the mechanical and the thermo-mechanical beam, the system, initially at rest, is solved
quasi-statically by performing a homotopy continuation with respect to the pseudo-time variable t
appearing in (51). This amounts to incrementing the applied boundary conditions (e.g., the pressure
load (51)) with respect to t.

5.3.1 Mechanical beam

We will ﬁrst investigate the purely mechanical response of the beam described above; hence, the
governing PDEs are those described in Section 5.1.1. For this problem, the displacement boundary
conditions represent 235 constrained dofs out of the 1575 total, leaving this problem with 1340 free
dofs.

For the study performed herein, diﬀerent material parameters are speciﬁed within diﬀerent
sets of blocks. Let block Ba denote the union of blocks 1, 2 and 4 (shown in green, yellow and
cyan, respectively, in Figure 1(a)) and let block Bb denote the union of blocks 3 and 5 (shown in
magenta and blue, respectively, in Figure 1(a)). In block Ba, we set the Young’s modulus, Poisson’s
ratio and density to the following values: Ea = 1.103 × 1011 Pa, νa = 0.32 and ρa = 7920 kg/m3,
respectively. The values of these same parameters in block Bb, denoted by Eb, νb and ρb, were
varied for the purpose of ROM training and testing, are provided in Table 2. These values were
generated by performing Latin Hypercube (LHC) sampling within the following parameter ranges:
Eb ∈ [1.27725 × 1011 Pa, 2.12875 × 1011 Pa], νb ∈ [0.24, 0.4], ρb ∈ [5940 kg/m3, 9900 kg/m3]. After
generating the training data by quasi-static advancement of the problem to time T = 7200 s with a
time-step of 10 s, and building a set of LSPG POD ROMs (with and without preconditioning) for a
wide range of ROM sizes M (ranging from 1 to 721) from the resulting set of 3605 snapshots, the
ROMs were tested in four additional regimes, corresponding to four diﬀerent values of the material
parameters in block Bb. The values of Eb, νb and ρb for each of these training cases are provided in
Table 2. It is emphasized that the parameter variations in Table 2 led to nontrivial diﬀerences in the
displacement ﬁeld, which varied by as much as 20% between the diﬀerent training and testing cases.

19

P. Lindsay, J. Fike, I. Tezaur, K. Carlberg

Preconditioned LSPG ROMs

Table 2: Mechanical beam problem: summary of parameters speciﬁed in the material model in block Bb for the
training and testing stages of the ROM process.

Regime Case Eb(×1011) [Pa]

training

testing

1
2
3
4
5
1
2
3
4

1.38002
2.11826
1.82559
1.56036
1.68463
1.50293
1.54545
1.47145
1.703

νb
0.28028
0.332646
0.395908
0.350415
0.256473
0.244704
0.304329
0.367092
0.32

ρb [kg/m3]
9194.74
7683.22
6150.4
9067.35
7466.27
6466.96
6774.12
8362.44
7920

The main results for the mechanical beam problem are summarized in Figures 2–5. The reader
can observe that the classical (unpreconditioned) LSPG solution does not appear in these plots.
The LSPG solution is not included in our results summary because the unpreconditioned LSPG
ROMs were not able to converge to a nonlinear solver tolerance smaller than O(1) for any of the
basis sizes considered. Figure 2 plots the ROM global relative error (cid:15) (calculated using (50)) as a
function of the basis dimension for various preconditioned LSPG ROMs, including the projected
solution increment ROM, indicated with a black dashed line. It can be seen that, in general, as the
preconditioner is improved (from Jacobi, to Gauss-Seidel, to ILU), the accuracy of the resulting
ROM solution is improved, approaching the ideal projected solution increment solution, as expected
from the discussion in Section 3. Next, in Figure 3, we report wall times for the four ROMs evaluated
for each of our testing cases. The wall times reported are averaged over four processors of a Linux
workstation having 20 Intel Xeon CPU E5-2670 v2 CPUs. The reader can observe that the more
sophisticated ILU preconditioner results in slightly larger wall times in general compared to the
Jacobi and Gauss-Seidel preconditioners. This is due to a larger preconditioner construction
time associated with the ILU preconditioner. As expected, the ideal preconditioner solution, which
requires calculating the action of J (k)−1
in every iteration as discussed in Section 4.4, is in general
the costliest to obtain. The results in Figures 2 and 3 are combined in Figure 4, which shows a
Pareto plot for the mechanical beam problem, in which the global relative error (cid:15) is plotted as
a function of the wall time. From this plot, it is possible to identify the optimal preconditioner
to use, based on one’s error and CPU-time requirements. The blue line in this plot traces points
having Pareto optimality, which deﬁne the so-called Pareto front. Finally, in Figure 5, we report
the average condition number of the reduced Jacobian, J (k)
PPG (see (23)) over all Gauss–Newton
iterations for each of the testing cases summarized in Table 2. Although the LSPG ROMs were not
convergent for this problem, we include condition numbers for the LSPG ROMs in this plot. The
reader can observe that, as expected, the addition of a preconditioner M (k) improves the condition
number of the corresponding ROM relative to the baseline LSPG ROM. For all ROMs evaluated,
condition numbers grow steadily with the basis dimension M ; however, preconditioning using the
relatively simple preconditioners considered herein (the ﬁrst three rows of Table 1) is able to reduce
the condition number of the reduced Jacobian of the LSPG ROM by up to an order of magnitude.
By design, the ideal preconditioner (equivalent to the projected solution increment) gives rise to a
ROM system having a perfect condition number of one for all basis dimensions.

20

P. Lindsay, J. Fike, I. Tezaur, K. Carlberg

Preconditioned LSPG ROMs

(a) Testing case 1

(b) Testing case 2

(c) Testing case 3

(d) Testing case 4

Figure 2: Mechanical beam problem: global relative errors (cid:15) (50) for various ROMs as a function of the basis dimension
for the four testing cases in Table 2.

5.3.2 Thermo-mechanical beam

We now turn our attention to the thermo-mechanical version of the beam problem, in which
the mechanical equations of Section 5.1.1 are augmented with the thermal equation in Section
5.1.2. In the current Albany implementation, the thermal and mechanical equations are coupled
monolithically within the code, with the coupling occurring at the level of the material model, as
described earlier in Section 5.1.2.

In addition to the displacement and pressure (51) boundary conditions described previously in
Section 5.3.1, we impose a temperature Dirichlet boundary condition on Γw in Figure 1(a). The value
of the prescribed temperature varies linearly from 293 to 393 K over the course of the simulation:

As before, the variable t in (52) is a pseudo-time variable which is incremented quasi-statically via

T (t) = (100t + 293) K,

t ≥ 0.

(52)

21

P. Lindsay, J. Fike, I. Tezaur, K. Carlberg

Preconditioned LSPG ROMs

(a) Testing case 1

(b) Testing case 2

(c) Testing case 3

(d) Testing case 4

Figure 3: Mechanical beam problem: wall times (in s, averaged over 4 processors) for various ROMs as a function of
the basis dimension for the four testing cases in Table 2.

homotopy continuation to emulate time-dependent behavior in a quasi-static framework. Note that
the temperature boundary condition (52) is not the only one advanced in time quasi-statically;
the pressure Neumann boundary condition (51) is also incremented, as discussed earlier in Section
5.3.1. As before, we use the Neohookean material model for the mechanical problem, and specify
diﬀerent material properties in block Ba and Bb.
In block Bb, the mechanical properties are
Ea = 1.103 × 109 Pa (Young’s modulus), νa = 0.32 (Poisson’s ratio) and ρa = 7.92 × 10−5 kg/m3
(density). As discussed in Section 5.1.2, the Helmholtz free-energy density A appearing in (38) is a
function of the temperature T in the thermo-mechanical case. This thermo-mechanical formulation
requires one to specify a reference temperature. In block Ba, we use a reference temperature of
Ta,ref = 293 K. In block Bb, the mechanical properties of the Neohookean material as well as the
reference temperature, denoted by Tb,ref are varied for both the training and the testing cases, as
summarized in Table 3. Additionally, we assume the material is isotropic, i.e., K := kI3 in (49),

22

P. Lindsay, J. Fike, I. Tezaur, K. Carlberg

Preconditioned LSPG ROMs

Figure 4: Mechanical beam problem: Pareto plot showing the total wall time (in s, averaged over 4 processors) versus
the global relative error (cid:15). Results for all four testing cases in Table 2 are used to generate this ﬁgure.

where I3 is the 3 × 3 identity matrix, with thermal diﬀusivity ka = kb = 1.1870 × 103 m2/s in both
blocks. We also assume the thermal expansion coeﬃcient (48) is the same in both blocks, taking the
value αa = αb = 1 × 10−5 K−1. There are no applied forces and the system is initially at rest, with
an initial temperature of 293 K. For the quasi-static advancement of the system, we use a step size
of 1 s and run the problem for a total of 720 steps. The displacement and temperature boundary
conditions represent 260 constrained dofs out of the 2100 total dofs, leaving this problem with 1840
free dofs. As for the mechanical version of this problem, the parameter ranges in Table 3 are selected
such that nontrivial variations in the solution are observed; speciﬁcally, the displacement varies by
as much as 60% as the material properties are perturbed according to Table 3.

The ROM was trained with six sets of parameters in block Bb, chosen using LHC sampling and
summarized in Table 3. The following parameter ranges for the LHC sampling were employed:
Eb ∈ [1.27725×109 Pa, 2.12875×109 Pa], νb ∈ [0.24, 0.40], ρb ∈ [5.94×10−5 kg/m3, 9.9×10−5 kg/m3],
Tb,ref ∈ [219.75 K, 366.25 K]. This training generated a total of 4318 snapshots, which were used to
build various LSPG/POD ROMs (with and without preconditioning) ranging in size from 1 to 721
modes, like in the mechanical variant of this problem. These ROMs were tested in the predictive
regime over four additional sets of parameters, also summarized in Table 3.

23

P. Lindsay, J. Fike, I. Tezaur, K. Carlberg

Preconditioned LSPG ROMs

(a) Testing case 1

(b) Testing case 2

(c) Testing case 3

(d) Testing case 4

Figure 5: Mechanical beam problem: average reduced Jacobian condition number for various ROMs as a function of
the basis dimension for the four testing cases in Table 2.

Table 3: Thermo-mechanical beam problem: summary of parameters speciﬁed in the material model in block Bb for
the training and testing stages of the ROM process.

Regime Case Eb(×109) [Pa]

training

testing

1
2
3
4
5
6
1
2
3
4

2.01313
1.71637
1.96881
1.28954
1.61326
1.54724
1.52473
1.31153
1.37015
1.703

ρb(×10−5) [kg/m3]
7.94827
6.93965
9.37181
9.14636
6.32164
7.31561
8.80694
7.58234
7.73303
7.92

Tb,ref [K]
273.657
318.406
301.406
365.378
223.434
245.778
266.674
333.462
345.942
293

νb
0.285907
0.332083
0.3478
0.29427
0.262464
0.374118
0.27925
0.345538
0.246513
0.32

24

P. Lindsay, J. Fike, I. Tezaur, K. Carlberg

Preconditioned LSPG ROMs

The main results for the thermo-mechanical beam problem are summarized in Figures 6–10.
It is interesting to observe that, despite the multi-physics and multi-scale nature of this problem,
the classical (unpreconditioned) LSPG ROMs, plotted in red in these ﬁgures, deliver convergent
solutions for the smaller basis dimensions considered.

Figures 6 and 7 report the global relative error (cid:15) in each of the ROM solutions, computed using
(50). The reader can observe by examining this ﬁgure that, while convergence with basis reﬁnement
is observed up to a point (until M ≈ 7 modes) for the unpreconditioned LSPG ROM, for larger basis
dimensions, the error grows steadily before reaching a point where a lack of convergence is observed.
The results are markedly diﬀerent for the preconditioned ROMs. By introducing preconditioning,
it is possible to reduce (cid:15) by between two and six orders of magnitude, depending on the basis
dimension, and there are no convergence issues, like for the unpreconditioned cases. Moreover, one
can see that all the preconditioned LSPG ROMs achieve errors which are close to (less than one
order of magnitude greater than) the error obtained by the projected solution increment ROM,
which represents an ideal preconditioned LSPG ROM.

We next investigate the eﬀect of preconditioning on the overall run time of the ROM problem
(Figure 8). As for the mechanical version of this problem, we report wall times averaged over eight
processors of a Sandia National Laboratories’ Linux cluster known as Uno, which has 201 dual-socket
eight-core 2.7 GHx Intel Sandy Bridge CPUs. The reader can observe from Figure 8 that for the
majority of testing cases and basis dimensions, the preconditioned LSPG ROMs considered achieve
smaller wall time than the baseline (unpreconditioned) LSPG ROM. Combining these results with
our earlier error results (Figures 6–7), we can conﬁdently conclude that preconditioning is extremely
advantageous for the thermo-mechanical beam problem: in general, for the same computational
cost, one is able to achieve a much smaller global relative error with preconditioning. This result is
conﬁrmed in the Pareto plot shown in Figure 9. As before, the black line in Figure 8 represents the
ideal preconditioned ROM. This ROM has a much higher computational cost than the other ROMs
evaluated, as expected.

Finally, in Figure 10, we report average condition numbers of the reduced Jacobians J (k)
PPG (see
eq. (23)) encountered during the Gauss–Newton iteration process for each of the ROMs considered.
The most striking observation that can be made from this ﬁgure is that the regular LSPG Jacobians
are very ill-conditioned, with condition numbers ranging between O(1014) and O(1020) depending
on M , the basis dimension. These condition numbers are between seven to ten times greater than
the condition numbers for the mechanical variant of this problem (see Figure 5). The extreme
ill-conditioning exhibited by the thermo-mechanical beam problem can be attributed to the extreme
diﬀerences in scales between the thermal and the mechanical problems: whereas the temperature
solution is O(100), the displacement solution varies between O(10−7) and O(10−5) during the
duration of the simulation, a diﬀerence of between seven and nine orders of magnitude. Our results
demonstrate that, by introducing a simple preconditioning strategy into the LSPG formulation,
it is possible to bring down the reduced Jacobian condition numbers by as many as ten orders of
magnitude, thereby alleviating to a large extent the scaling issue introduced by the large diﬀerence in
scales between the thermal and mechanical problems (a similar result was discovered by Washabaugh
in [81], but for a diﬀerent application, namely computational ﬂuid dynamics). Experience involving
other solid mechanics applications within Albany [52] suggests that further improvements can be
made by introducing physics-speciﬁc block preconditioners into the framework; however, a study of
this sort goes beyond the scope of this work. As before, the condition number of the reduced Jacobian
for the projected solution increment ROM is identically one regardless of the basis dimension.

25

P. Lindsay, J. Fike, I. Tezaur, K. Carlberg

Preconditioned LSPG ROMs

(a) Testing case 1

Figure 6: Thermo-mechanical beam problem: global relative errors (cid:15) (50) for various ROMs as a function of the basis
dimension for testing cases 1–2 in Table 3.

(b) Testing case 2

5.4 Thermo-mechanical pressure vessel

The last test case considered aims at studying the thermo-mechanical response of a 3D pressured
cylindrical vessel shown in Figure 12(b). This problem is substantially larger and more realistic than
the beam problem considered earlier in Section 5.3. Our approach herein is to model a quarter of the
pressure vessel (denoted by Ω), as shown in Figure 12(a), and apply appropriate symmetry boundary
conditions on the relevant sides to emulate a simulation on the pressure vessel in its entirety. We

26

P. Lindsay, J. Fike, I. Tezaur, K. Carlberg

Preconditioned LSPG ROMs

(a) Testing case 3

Figure 7: Thermo-mechanical beam problem: global relative errors (cid:15) (50) for various ROMs as a function of the basis
dimension for testing cases 3–4 in Table 3.

(b) Testing case 4

discretize our domain Ω using a mesh comprised of 77,768 hexahedral elements, which give rise
to 92,767 nodes. Similar to the beam problem, the domain Ω is comprised of ﬁve element blocks,
depicted in green (block 1), yellow (block 2), blue (block 3), magenta (block 4) and cyan (block
5), as shown in Figure 11, so as to enable to speciﬁcation of diﬀerent materials and/or material
properties in diﬀerent parts of the domain.

Figure 12 depicts the boundaries on which boundary conditions are applied for the thermo-

27

P. Lindsay, J. Fike, I. Tezaur, K. Carlberg

Preconditioned LSPG ROMs

(a) Testing case 1

(b) Testing case 2

(c) Testing case 3

(d) Testing case 4

Figure 8: Thermo-mechanical beam problem: wall times (in s, averaged over 8 processors) for various ROMs as a
function of the basis dimension for the four testing cases in Table 2.

mechanical pressure vessel problem. Let Γ denote the boundary of our computational domain Ω.
As shown in Figure 12(a), we decompose Γ as Γ := Γ1 ∪ Γ2 ∪ Γ3 ∪ Γ4 ∪ Γ5 where Γi ∩ Γj = ∅ for
i, j = 1, ..., 5 and i (cid:54)= j. In Figure 12(a), Γ1 is shown in green, Γ2 is shown in blue, Γ3 is shown in
yellow, Γ4 is shown in gray and Γ5 is shown in red. It is noted that Γ5 consists of a single point
located in the center of the top of the pressure vessel. Since we are modeling a quarter of the
pressure vessel, symmetry boundary conditions are applied on the displacements on Γ1, Γ2 and Γ5.
These BCs emulate performing a simulation on the full cylindrical pressure vessel geometry (Figure
12(b)). In addition to the displacement boundary conditions mentioned previously, we impose the
time-dependent pressure Neumann boundary condition (51) and a time-dependent temperature
Dirichlet boundary condition (52) on Γ3. This amounts to heating and pressurizing our vessel from
the inside. The boundary conditions account for a total of 5020 constrained dofs out of the 371,068
total dofs, leaving this problem with 366,048 free dofs.

28

P. Lindsay, J. Fike, I. Tezaur, K. Carlberg

Preconditioned LSPG ROMs

Figure 9: Thermo-mechanical beam problem: Pareto plot showing the total wall time (in s, averaged over 4 processors)
versus the global relative error (cid:15). Results for all four testing cases in Table 3 are used to generate this ﬁgure.

Similar to the beam problem (Section 5.3), we group together diﬀerent element blocks for
the purpose of specifying the material model parameters for the mechanical problem’s material
model, which we take to be Neohookean. Let Ba denote the union of blocks 3 and 5 (magenta
and blue, respectively, in Figure 12) and let Bb denote the the union of blocks 1, 2 and 4 (green,
yellow and cyan, respectively, in Figure 12). We ﬁx the mechanical parameters in block Ba to
have the following values for the Young’s modulus, Poisson’s ratio, and density, respectively:
Ea = 1.103 × 109 Pa, νa = 0.32, and density ρa = 7.92 × 10−3 kg/m3. The thermal equation requires
us to specify a reference temperature, which is set to Ta,ref = 293 K within the thermal model.
Similar to the thermo-mechanical version of the beam problem (Section 5.3.2), these analogous
parameters in block Bb are varied using LHC for the purpose of training and testing our ROMs;
the values of these parameters are given in in Table 4 and were sampled from the following ranges:
Eb ∈ [1.27725×109 Pa, 2.12875×109 Pa], νb ∈ [0.24, 0.40], ρb ∈ [5.94×10−3 kg/m3, 9.9×10−3 kg/m3],
Tb,ref ∈ [219.75 K, 366.25 K]. The following additional parameters are also speciﬁed within the
thermal model in both blocks Ba and Bb. As for the thermo-mechanical beam problem (Section
5.3.2), we assume the materials are isotropic in both blocks (K := kI3), with thermal diﬀusivity
ka = kb = 1.1870 × 103 m2/s. Additionally, we assume the thermal expansion coeﬃcient (48) is the
same in both blocks, and prescribe it the value αa = αb = 1 × 10−5 K−1. There are no applied forces,
and the system is initially at rest with an initial temperature of 293 K. The system is advanced
using a quasi-static approach, in which the a homotopy continuation is performed with respect to
the pseudo-time variable t in (52). The simulation proceeds for a total of 720 steps with a step size
of 1 s.

In this example, we trained the ROM over four sets of parameters, summarized in the top part
of Table 4. Snapshots were collected every continuation step, and POD bases of various numbers of
modes, from 2 to 790, were constructed using our ensemble of 2160 snapshots. Once our ROMs

29

P. Lindsay, J. Fike, I. Tezaur, K. Carlberg

Preconditioned LSPG ROMs

(a) Testing case 1

(b) Testing case 2

(c) Testing case 3

(d) Testing case 4

Figure 10: Thermo-mechanical beam problem: average reduced Jacobian condition number for various ROMs as a
function of the basis dimension for the four testing cases in Table 3.

were constructed, they were evaluated in the predictive regime on two additional cases, summarized
in the bottom part of Table 4. The ﬁnal displacement FOM solutions and conﬁgurations for the
two testing cases are plotted in Figure 13. The reader can observe that the solutions are noticeably
diﬀerent, indicating that our parameter variations led to nontrivial changes in the problem solution.

30

P. Lindsay, J. Fike, I. Tezaur, K. Carlberg

Preconditioned LSPG ROMs

(b) Focus on block 1

(a) All material blocks

(c) Focus on block 2

Figure 11: Thermo-mechanical pressure vessel problem: computational domain. Diﬀerent colors indicate diﬀerent
material blocks; blocks 1, 2, 3, 4 and 5 are represented in green, yellow, magenta, cyan and blue, respectively.
Subﬁgures (b) and (c) zoom in on the regions circled in green and yellow respectively in subﬁgure (a), and depict the
location of blocks 1 and 2, respectively.

(a) Boundaries

(b) Full geometry with mesh

Figure 12: Thermo-mechanical pressure vessel problem. (a) Illustration of boundaries on which boundary conditions
are applied, distinguished by diﬀerent colors. Γ1 is shown in green, Γ2 is shown in blue, Γ3 is shown in yellow, Γ4
is shown in gray and Γ5 is shown in red. (b) Illustration of full pressure vessel geometry following application of
symmetry boundary conditions on Γ1, Γ2 and Γ5.

Table 4: Thermo-mechanical pressure vessel problem: summary of parameters speciﬁed in the material model in block
Bb for the training and testing stages of the ROM process.

Regime Case Eb(×109) [Pa]

training

testing

1
2
3
4
1
2

1.64424
1.77118
1.9893
1.45551
2.06416
1.703

ρb(×10−3) [kg/m3]
8.33058
9.67843
7.17625
6.67746
7.79804
7.92

Tb,ref [K]
311.094
267.396
223.746
331.116
252.102
293

νb
0.39524
0.300065
0.32161
0.266385
0.391368
0.32

31

P. Lindsay, J. Fike, I. Tezaur, K. Carlberg

Preconditioned LSPG ROMs

(a) Testing case 1

(b) Testing case 2

Figure 13: Thermo-mechanical pressure vessel problem: ﬁnal displacement and conﬁguration for the two testing cases
in Table 4, obtained by running Albany in FOM mode.

The main results for thermo-mechanical pressure vessel problem are summarized in Figures 14–18.
Similar to the thermo-mechanical beam problem considered in Section 5.3.2, the unpreconditioned
LSPG ROMs fail to converge for the two larger basis dimensions evaluated. The ideal preconditioned
ROM solution is not plotted, as calculating this solution is too computationally expensive for this
problem. Figure 14 plots the global relative errors (cid:15) (50) as a function of the basis dimension for the
two testing cases of interest. The reader can observe that the unpreconditioned LSPG approach
is unable to deliver a solution with a relative error smaller than O(10%). In contrast, all three
preconditioned LSPG ROMs produce solutions that are between four and six orders of magnitude
more accurate. This result is conﬁrmed by Figure 15, which plots the ﬁnal displacement and
conﬁguration obtained using the FOM and two LSPG ROMs having 32 modes, an unpreconditioned
LSPG ROM and an LSPG ROM preconditioned using the Gauss-Seidel preconditioner, for testing
case 1. It can be seen that the preconditioned LSPG ROM (Figure 15(c)) is indistinguishable
from the FOM (Figure 15(a)); in contrast, the unpreconditioned ROM solution (Figure 15(b)) is
visibly incorrect. Turning our attention back to Figure 14, it can be seen that, by improving the
preconditioner, it is possible to improve solution accuracy. Figure 16 depicts the wall times required
to run the various LSPG ROMs evaluated for each of the testing cases. Our simulations for the
thermo-mechanical pressure vessel problem were performed on 64 cores (4 nodes) of the Skybridge
high-capacity cluster located at Sandia National Laboratories, which contains 1848 nodes, each
having 16 2.6 GHz Intel Sandy Bridge processors. It can be seen from this ﬁgure that a speedup
of as large as 12× is attainable through the introduction of preconditioning into the LSPG ROM
formulation. Figures 14 and 16 together demonstrate that LSPG ROMs are substantially faster and
more accurate than unpreconditioned LSPG ROMs. This result is reinforced by Figure 17, which
depicts a Pareto plot and front for the thermo-mechanical pressure vessel problem. As before, it
is possible to use this ﬁgure to determine the ideal preconditioner to use based on one’s error and
CPU-time requirements.

Our ﬁnal ﬁgure, Figure 18, plots the total number of nonlinear iterations required to attain a
convergent solution for the various ROMs evaluated in this section. We present this result in lieu of
the average condition number of the reduced Jacobian J (k)
PPG, as the thermo-mechanical pressure
vessel problem is too large to calculate the latter quantity. Comparing Figure 18 with Figure 16,

32

P. Lindsay, J. Fike, I. Tezaur, K. Carlberg

Preconditioned LSPG ROMs

(a) Testing case 1

(b) Testing case 2

Figure 14: Thermo-mechanical pressure vessel problem: global relative errors (cid:15) (50) for various ROMs as a function
of the basis dimension for the two testing cases in Table 4.

(a) FOM

(b) LSPG ROM

(c) Gauss-Seidel Preconditioned LSPG ROM

Figure 15: Thermo-mechanical pressure vessel problem: comparison of FOM and M = 32 ROM solutions (ﬁnal
displacement and conﬁguration) for testing case 1.

33

P. Lindsay, J. Fike, I. Tezaur, K. Carlberg

Preconditioned LSPG ROMs

(a) Testing case 1

(b) Testing case 2

Figure 16: Thermo-mechanical pressure vessel problem: wall times (in s, averaged over 64 processors) for various
ROMs as a function of the basis dimension for the two testing cases in Table 4.

Figure 17: Thermo-mechanical pressure vessel problem: Pareto plot showing the total wall time (in s, averaged over 4
processors) versus the global relative error (cid:15). Results for all four testing cases in Table 3 are used to generate this
ﬁgure.

one can see that the wall time improvements achieved through the introduction of preconditioning
are likely due to the reduction in the total number of nonlinear iterations required to achieve a
convergent ROM solution: by preconditioning the LSPG formulation, one can reduce the number of

34

P. Lindsay, J. Fike, I. Tezaur, K. Carlberg

Preconditioned LSPG ROMs

nonlinear iterations by up to a factor of 12×. It is interesting to observe that, unlike for the classical
LSPG formulation, the number of nonlinear iterations remains approximately constant regardless of
the basis dimension for the preconditioned LSPG ROMs. The reduction in the number of nonlinear
iterations when preconditioning is employed can be attributed to the scaling eﬀect of the ROM
preconditioner for this multi-scale and multi-physics problem.

(a) Testing case 1

(b) Testing case 2

Figure 18: Thermo-mechanical pressure vessel problem: total number of nonlinear iterations for various ROMs as a
function of the basis dimension for the two testing cases in Table 4.

6 Conclusions

Projection-based model reduction can enable real-time and multi-query analyses in a variety of
applications. The LSPG method to building projection-based ROMs has shown particular promise,
as it can generate stable and accurate solutions for applications where standard Galerkin techniques
have failed [17, 18, 75, 77, 76, 15]. Despite its superior performance over Galerkin projection, we
have observed that, when run in the predictive regime, the LSPG method sometimes exhibits a
lack of convergence or delivers a solution whose error surpasses the engineering tolerance required
by the application. The approach is most likely to suﬀer from these deﬁciencies when applied to
problems with disparate scales, such as dimensional PDEs or multi-physics problems [81, 26, 56].
This is because, when there are diﬀerences in scale between components of a PDE system, residual
components corresponding to certain variables can be very large compared to the residual components
corresponding to other variables, which can bias the residual minimization procedure underlying the
LSPG formulation.

In this paper, we have demonstrated that the accuracy, robustness, eﬃciency and convergence
properties of the LSPG method for projection-based model reduction can be improved substantially
through the introduction of preconditioning. While this approach can reduce the condition number
of the matrix problems arising in the LSPG iteration procedure, it is unlike other existing ROM
preconditioning approaches (e.g., [30, 29, 69]), as the preconditioning is introduced directly into
the LSPG residual minimization problem. Doing so ensures that all residual components are on
approximately the same scale, even when the method is applied to multi-scale and multi-physics

35

P. Lindsay, J. Fike, I. Tezaur, K. Carlberg

Preconditioned LSPG ROMs

problems having variables of drastically diﬀerent magnitudes. We demonstrated that preconditioning
the LSPG method in this way is equivalent to modifying the norm in which residual minimization is
performed, which can improve the residual-based stability constant bounding the method’s error.
We additionally showed that, by designing a preconditioner that approximates the inverse of the
Jacobian matrix, it is possible to create an LSPG ROM whose accuracy approaches the upper limit
on ROM accuracy for a given reduced basis: an ideal preconditioned ROM, which is equivalent to
the projection of the FOM solution increment onto the reduced basis.

We studied the eﬃcacy of the proposed approach using one mechanical and two thermo-mechanical
examples simulated using the Albany HPC multi-physics ﬁnite element code [65], into which we
have implemented the POD/LSPG method to model reduction. Our test cases include a realistic
simulation involving a thermo-mechanical vessel pressurized from the inside, having approximately
370,000 dofs. We developed a partitioned/“blocking vector” approach for applying ROM Dirichlet
boundary conditions strongly within this code, which does not remove the constrained dofs from the
global ﬁnite element system prior to performing its numerical solution. We considered three simple
preconditioners, a Jacobi preconditioner, a Gauss-Seidel preconditioner, and an ILU preconditioner,
implemented within the Ifpack Trilinos library, on which Albany has a dependence. Our ROMs
were evaluated in the predictive regime, with prediction performed across the material parameter
space. For the ﬁrst test case, known as the mechanical beam problem, the classical LSPG method
failed to deliver a convergent solution regardless of the basis dimension. In contrast, all three
preconditioned ROMs converged robustly and eﬃciently, with global relative errors as small as
O(0.01%). While the classical LSPG method achieved convergence for the smaller basis dimensions
considered in our two thermo-mechanical test cases, we demonstrated that the introduction of
preconditioning can reduce the global relative error by up to six orders of magnitude and the
wall time by as much as 12×. The wall time gains are attributed to a reduction in the reduced
Jacobian condition number and a reduction in the total number of nonlinear iterations required
for convergence, both achieved via the proposed preconditioning strategy. For thermo-mechanical
problems, which exhibit extreme diﬀerences in scale between the displacement and temperature
solutions, the introduction of even a simple preconditioner such as Jacobi reduced the reduced
Jacobian condition number by as many as ten orders of magnitude.

The results discussed herein pave the way for several subsequent studies, which will be the subject
of future work. First, we plan to extend our preconditioned LSPG formulation to include hyper-
reduction using Lagrangian structure-preserving methods such as [33, 24, 32, 20, 23], and intend to
repeat the present numerical experiments with hyper-reduction enabled. It would additionally be
interesting to study: (1) the eﬃcacy of more sophisticated preconditioners within our framework,
e.g., multi-grid preconditioners that take advantage of rigid body mode information and block
preconditioners for multi-physics applications, and (2) the performance of our framework with more
sophisticated reduced bases, e.g., nonlinear manifold reduced bases constructed using an auto-encoder
or some other type of neural network [35, 48, 46]. Lastly, we plan to investigate the viability of
our approach for a larger set of applications, including problems in the ﬁeld of Computational
Fluid Dynamics (CFD) and problems in which the ROM is used to perform prediction in time.
Our preliminary results [76, 14] suggest that preconditioning improves accuracy and eﬃciency
in problems involving compressible cavity ﬂows, hypersonic aerodynamics, thermal ablation and
reacting hypersonic ﬂows.

36

P. Lindsay, J. Fike, I. Tezaur, K. Carlberg

Preconditioned LSPG ROMs

7 Acknowledgements

Support for this work was received through the U.S. Department of Energy’s (DOE) Advanced
Simulation and Computing (ASC) Program at Sandia National Laboratories. The writing of this
manuscript was funded in part by the third author’s Presidential Early Career Award for Scientists
and Engineers (PECASE). Sandia National Laboratories is a multi-mission laboratory managed
and operated by National Technology and Engineering Solutions of Sandia, LLC., a wholly owned
subsidiary of Honeywell International, Inc., for the U.S. Department of Energy’s National Nuclear
Security Administration under contract DE-NA0003525.

The numerical results presented herein were generated by running the Albany open-source
HPC code. The version of the code that was used can be downloaded from the following URL:
https://github.com/sandialabs/Albany/releases/tag/MOR_support_end. Additionally, to en-
sure transparency and reproducibility, we have made available the Albany input ﬁles needed to
reproduce our results. These input ﬁles can be downloaded from the following github repository:
https://github.com/ikalash/PrecondLSPGROMsSM.

The authors wish to thank Alejandro Mota for assisting with the formulation of the mechanical
and thermo-mechanical problems described herein. The authors would also like to thank Eric Parish
for providing useful feedback on the ﬁrst full draft of this work, which resulted in an improved
manuscript.

References

[1] Structure-preserving model reduction for mechanical systems. Physica D: Nonlinear Phenomena,

184(1):304–318, 2003.

[2] Anasazi: a block eigensolvers package. https://docs.trilinos.org/dev/packages/anasazi/

doc/html/index.html, 2020.

[3] MOR support end tag. https://github.com/SNLComputation/Albany/releases/tag/MOR_

support_end, 2020.

[4] NOX and LOCA: object-oriented nonlinear solver and continuation packages. https://docs.

trilinos.org/dev/packages/nox/doc/html, 2020.

[5] R. Abgrall and R. Crisovan. Model reduction using l1-norm minimization as an application
to nonlinear hyperbolic problems. International Journal for Numerical Methods in Fluids,
87(12):628–651, 2018.

[6] M. Ahmad, D. Szyld, and M. van Guzen. Preconditioned multishift BiCG for H2-optimal model

reduction. SIAM J. Matrix Anal. Appl., 38:401–424, 2017.

[7] H. Anzt, E. Chow, J. Saak, and J. Dongarra. Updating incomplete factorization preconditioners

for model order reduction. Numer. Algor., 73:611–630, 2016.

[8] P. Astrid, S. Weiland, K. Willcox, and T. Backx. Missing point estimation in models described by
proper orthogonal decomposition. IEEE Transactions on Automatic Control, 53(10):2237–2250,
2008.

37

P. Lindsay, J. Fike, I. Tezaur, K. Carlberg

Preconditioned LSPG ROMs

[9] O. Balabanov. Randomized linear algebra for model order reduction. Ph.D. Thesis, Universitat

Politecnica de Catalunya, 2019.

[10] M. Balajewicz, I. Tezaur, and E. Dowell. Minimal subspace rotation on the stiefel manifold for
stabilization and enhancement of projection-based reduced order models for the compressible
navier-stokes equations. J. Comput. Phys., 321:224–241, 2016.

[11] M.J. Balajewicz, E.H. Dowell, and B.R. Noack. Low-dimensional modelling of high-Reynolds-
number shear ﬂows incorporating constraints from the Navier-Stokes equation. J. Fluid Mech.,
729:285–308, 2013.

[12] M.F. Barone, I. Kalashnikova, M.R. Brake, and D.J. Segalman. Reduced order modeling of
ﬂuid/structure interaction. Sandia National Laboratories Report, SAND No. 2009-7189, Sandia
National Laboratories, Albuquerque, NM, 2009.

[13] M.F. Barone, I. Kalashnikova, D.J. Segalman, and H. Thornquist. Stable Galerkin reduced

order models for linearized compressible ﬂow. J. Comput. Phys., 288:1932–1946, 2009.

[14] P. Blonigan. Personal correspondence, 2021.

[15] K. Carlberg, M. Barone, and H. Antil. Galerkin v. least-squares Petrov–Galerkin projection in

nonlinear model reduction. J. Comput. Phys., 330:693–734, 2017.

[16] K. Carlberg, J. Cortial, D. Amsallem, M. Zahr, and C. Farhat. The GNAT nonlinear model
reduction method and its application to ﬂuid dynamics problems. AIAA Paper 2011-3112, 6th
AIAA Theoretical Fluid Mechanics Conference, Honolulu, HI, June 27–30, 2011.

[17] K. Carlberg, C. Farhat, and C. Bou-Mosleh. Eﬃcient non-linear model reduction via a least-
squares Petrov–Galerkin projection and compressive tensor approximations. International
Journal for Numerical Methods in Engineering, 86(2):155–181, April 2011.

[18] K. Carlberg, C. Farhat, J. Cortial, and D. Amsallem. The GNAT method for nonlinear model
reduction: Eﬀective implementation and application to computational ﬂuid dynamics and
turbulent ﬂows. J. Comput. Phys., 24(2):623–647, 2013.

[19] K. Carlberg, V. Forstall, and R. Tuminaro. Krylov-subspace recycling via the POD-augmented
conjugate-gradient method. SIAM Journal on Matrix Analysis and Applications, 37(3):1304–
1336, 2016.

[20] K. Carlberg, R. Tuminaro, and P. Boggs. Eﬃcient structure-preserving model reduction for
nonlinear mechanical systems with application to structural dynamics. AIAA Paper 2012-
1969, 53rd AIAA/ASME/ASCE/AHS/ASC Structures, Structural Dynamics and Materials
Conference, Honolulu, HI, April 23–26, 2012.

[21] K. Carlberg, R. Tuminaro, and P. Boggs. Preserving Lagrangian structure in nonlinear model
reduction with application to structural dynamics. SIAM J. Sci. Comput., 2:B153–B184, 2015.

[22] K. Carlberg, R. Tuminaro, and P. Boggs. Preserving lagrangian structure in nonlinear model
reduction with application to structural dynamics. SIAM J. Sci. Comput, 47(2):B153–B184,
2015.

38

P. Lindsay, J. Fike, I. Tezaur, K. Carlberg

Preconditioned LSPG ROMs

[23] K. Carlberg, R. Tuminaro, and P. Boggs. Preserving Lagrangian structure in nonlinear model
reduction with application to structural dynamics. SIAM Journal on Scientiﬁc Computing,
37(2):B153–B184, 2015.

[24] Todd Chapman, Philip Avery, Pat Collins, and Charbel Farhat. Accelerated mesh sampling for
the hyper reduction of nonlinear computational models. International Journal for Numerical
Methods in Engineering, 109(12):1623–1654, 2017.

[25] S. Chaturantabut and D.C. Sorensen. Nonlinear model reduction via discrete empirical interpo-

lation. SIAM J. Sci. Comput., 32:2737–2764, 2010.

[26] D. Ching, P. Blonigan, F. Rizzi, and J. Fike. Reduced order modeling of hypersonic aerodynamics
with grid tailoring. AIAA SciTech Forum, January 3-7, 2022, San Diego, CA and virtual, 2022.

[27] Y. Choi and K. Carlberg. Space-time least-squares petrov-galerkin projection for nonlinear

model reduction. arXiv e-Print, (1703.04560), 2017.

[28] Gary Collins, Krzysztof Fidkowski, and Carlos E. Cesnik. Petrov-Galerkin Projection-Based

Model Reduction with an Optimized Test Space.

[29] H. Elman and Virginia Forstall. Preconditioning techniques for reduced basis methods for

parameterized elliptic partial diﬀerential equations. SIAM J. Sci. Comput., 37, 2015.

[30] Howard C. Elman and Virginia Forstall. Numerical solution of the parameterized steady-state
navier-stokes equations using empirical interpolation methods. Computer Methods in Applied
Mechanics and Engineering, 317(C), 12 2016.

[31] R. Everson and L. Sirovich. Karhunen-Loeve procedure for gappy data. J. Optical Society of

America A, pages 1657–1664, 1995.

[32] Charbel Farhat, Philip Avery, Todd Chapman, and Julien Cortial. Dimensional reduction of
nonlinear ﬁnite element dynamic models with ﬁnite rotations and energy-based mesh sampling
and weighting for computational eﬃciency. International Journal for Numerical Methods in
Engineering, 98(9):625–662, 2014.

[33] Charbel Farhat, Todd Chapman, and Philip Avery. Structure-preserving, stability, and accuracy
properties of the energy-conserving sampling and weighting method for the hyper reduction
of nonlinear ﬁnite element dynamic models. International Journal for Numerical Methods in
Engineering, 102(5):1077–1110, 2015.

[34] Jennifer Frederick, Alejandro Mota, Irina Tezaur, and Diana Bull. A thermo-mechanical
terrestrial model of arctic coastal erosion. Journal of Computational and Applied Mathematics,
397:113533, 2021.

[35] S. Fresca, L. Dede, and A. Manzoni. A Comprehensive Deep Learning-Based Approach to
Reduced Order Modeling of Nonlinear Time-Dependent Parametrized PDEs. Journal of
Scientiﬁc Computing, 87(61), 2021.

[36] X. Gao, E. Nielsen, R. Muller, R. Young, A. Salinger, N. Bishop, M. Lilly, and M. Carroll.
Quantum computer aided design simulation and optimization of semiconductor quantum dots.
Journal of Applied Physics, 114:1–19, 2013.

39

P. Lindsay, J. Fike, I. Tezaur, K. Carlberg

Preconditioned LSPG ROMs

[37] S. Gugercin and A.C. Antoulas. A survey of model reduction by balanced truncation and some

new results. Int. J. Control, 77(8):748–766, 2004.

[38] M. Heroux. AztecOO User Guide. Sandia Report, SAND2014-3796, 2014.

[39] M. Heroux, R. Bartlett, V. Howle, R. Hoekstra, J. Hu, T. Kolda, R. Lehoucq, K. Long,
R. Pawlowski, E. Phippsand A. Salinger, H. Thornquist, R. Tuminaro, J. Willenbring,
A. Williams, and K. Stanley. An overview of the trilinos project. ACM Trans. Math. Softw.,
31:397–423, 2005.

[40] Chi Hoang, Youngsoo Choi, and Kevin Carlberg. Domain-decomposition least-squares Petrov–
Galerkin (DD-LSPG) nonlinear model reduction. Computer Methods in Applied Mechanics and
Engineering, 384:113997, 2021.

[41] P. Holmes, J.L. Lumley, and G. Berkooz. Turbulence, Coherent Structures, Dynamical Systems

and Symmetry. Cambridge University Press, 1996.

[42] G. Holzapfel. Nonlinear solid mechanics: a continuum approach for engineering. Wiley, 1st

edition, 2000.

[43] R. Jiang. Pressure preconditioning using proper orthogonal decomposition. M.S. Thesis,

Stanford University, Stanford, CA (Advisor: H. Tchelepi), 2013.

[44] I. Kalashnikova, S. Arunajatesan, M.F. Barone, B.G. van Bloemen Waanders, and J.A. Fike.
Reduced order modeling for prediction and control of large-scale systems. Sandia National
Laboratories Report, SAND No. 2014-4693. Sandia National Laboratories, Albuquerque, NM,
2014.

[45] I. Kalashnikova and M.F. Barone. On the stability and convergence of a Galerkin reduced
order model (ROM) of compressible ﬂow with solid wall and far-ﬁeld boundary treatment. J.
Comput. Phys.Int. J. Numer. Meth. Engng., 83:1345–1375, 2010.

[46] Y. Kim, D. Widemann, Y. Choi, and T. Zohdi. Eﬃcient nonlinear manifold reduced order

model. ArXiV pre-print, https://arxiv.org/pdf/2011.07727.pdf, 2021.

[47] Sanjay Lall, Petr Krysl, and Jerrold E Marsden. Structure-preserving model reduction for
mechanical systems. Physica D: Nonlinear Phenomena, 184(1):304–318, 2003. Complexity and
Nonlinearity in Physical Systems – A Special Issue to Honor Alan Newell.

[48] Kookjin Lee and Kevin T. Carlberg. Model reduction of dynamical systems on nonlinear
manifolds using deep convolutional autoencoders. Journal of Computational Physics, 404:108973,
2020.

[49] P. LeGresley. Application of proper orthogonal decomposition (pod) to design decomposition

methods. Ph.D. thesis, Stanford University, 2006.

[50] B. Moore. Principal component analysis in linear systems: Controllability, observability, and

model reduction. IEEE Transactions on Automatic Control, 26(1), 1981.

[51] A. Mota, I. Tezaur, and G. Phlipot. The Schwarz alternating method for dynamic solid

mechanics. Int. J. Numer. Meth. Engng (in press), 2022.

40

P. Lindsay, J. Fike, I. Tezaur, K. Carlberg

Preconditioned LSPG ROMs

[52] Alejandro Mota, Irina Tezaur, and Coleman Alleman. The schwarz alternating method in solid
mechanics. Computer Methods in Applied Mechanics and Engineering, 319:19 – 51, 2017.

[53] N.C. Nguyen, A.T. Patera, and J. Peraire. A ‘best points’ interpolation method for eﬃcient
approximation of parametrized functions. Int. J. Numer. Meth. Engng., 73:521–543, 2008.

[54] N.C. Nguyen and J. Peraire. An eﬃcient reduced-order modeling approach for non-linear
parametrized partial diﬀerential equations. Int. J. Numer. Meth. Engng., 76:27–55, 2008.

[55] B. Noack, R. Papas, and P. Monkewitz. The need for a pressure-term representation in empirical
galerkin models of incompressible shear ﬂows. Journal of Fluid Mechanics, 523:339–365, 2005.

[56] E. Parish and F. Rizzi. On the impact of dimensionally-consistent and physics-based inner
products for pod-galerkin and least-squares model reduction of compressible ﬂows. ArXiV
pre-print, 2022.

[57] Eric J Parish and Kevin T Carlberg. Windowed least-squares model reduction for dynamical

systems. Journal of Computational Physics, 426:109939, 2021.

[58] Damiano Pasetto, Massimiliano Ferronato, and Mario Putti. A reduced order model-based
preconditioner for the eﬃcient solution of transient diﬀusion equations. International Journal
for Numerical Methods in Engineering, 109(8):1159–1179, 2017.

[59] R. Pawlowski, R. Bartlett, N. Belcourt, R. Hooper, and R. Schmidt. A therory manual for multi-
physics code coupling in LIME. Sandia National Laboratories Report, SAND No. 2011-2195,
Sandia National Laboratories, Albuquerque, NM, 2011.

[60] D. Rempfer and H.F. Fasel. Dynamics of three-dimensional coherent structures in a ﬂat-plate

boundary layer. Journal of Fluid Mechanics, 275:257–283, 1994.

[61] C.W. Rowley. Model reduction for ﬂuids using balanced proper orthogonal decomposition. Int.

J. Bif. Chaos, 15(3):997–1013, 2005.

[62] C.W. Rowley, T. Colonius, and R.M. Murray. Model reduction for compressible ﬂows using

POD and Galerkin projection. Physica D, 189:115–129, 2004.

[63] G. Rozza. Reduced basis approximation and error bounds for potential ﬂows in parametrized

geometries. Commun. Comput. Phys., 9(1):1–48, 2011.

[64] M. Sala and M. Heroux. Robust algebraic preconditioners with IFPACK 3.0. Technical Report

SAND-0662, Sandia National Laboratories, 2005.

[65] A. Salinger, R. Bartlett, A. Bradley, Q. Chen, I. Demeshko, X. Gao, G. Hansen, A. Mota,
R. Muller, E. Nielsen, J. Ostien, R. Pawlowski, M. Perego, E. Phipps, W. Sun, and I. Tezaur.
Albany: Using agile components to develop a ﬂexible, generic multiphysics analysis code. Int.
J. Multiscale Comput. Engng, 14:415–438, 2016.

[66] A. Salinger, I. Tezaur, M. Perego, et al. Component-based application code development, part 1:
The agile components strategy and albany code. Advancing X-cutting Ideas for Computational
Climate Science (AXICCS) 2016, Rockville, MD, 2016.

41

P. Lindsay, J. Fike, I. Tezaur, K. Carlberg

Preconditioned LSPG ROMs

[67] Alexander Schein, Kevin T Carlberg, and Matthew J Zahr. Preserving general physical
properties in model reduction of dynamical systems via constrained-optimization projection.
International Journal for Numerical Methods in Engineering, 122(14):3368–3399, 2021.

[68] P.J. Schmid. Dynamic mode decomposition of numerical and experimental data. Journal of

Fluid Mechanics, 656:5–28, 2010.

[69] N. P. Singh and K. Ahuja. Reusing preconditioners in projection based model order reduction

algorithms. IEEE Access, 8:133233–133247, 2020.

[70] Navneet Pratap Singh and Kapil Ahuja. Preconditioned linear solves for parametric model
order reduction. International Journal of Computer Mathematics, 97(7):1484–1502, 2020.

[71] S. Sirisup and G.E. Karniadakis. A spectral viscosity method for correcting the long-term

behavior of POD models. J. Comput. Phys., 194:92–116, 2004.

[72] L. Sirovich. Turbulence and the dynamics of coherent structures, part iii: dynamics and scaling.

Q. Appl. Math., 45(3):583–590, 1987.

[73] W. Spotz, T. Smith, I. Demeshko, and J. Fike. Aeras: A next generation global atmosphere

model. Procedia Computer Science, 51:2097–2106, 2015.

[74] W. Sun, J. Ostien, and A. Salinger. A stabilized assumed deformation gradient ﬁnite element
formulation for strongly coupled poromechanical simulations at ﬁnite strain. International
Journal for Numerical and Analytical Methods in Geomechanics, 37:2755–2788, 2013.

[75] I. Tezaur, J. Fike, K. Carlberg, M. Balajewicz, M. Barone, and E. Mussoni. Model reduction for
compressible cavity simulations towards uncertainty quantiﬁcation of structural loading. Sandia
National Laboratories Report, Sand No. 2016-9463. Sandia National Laboratories, Albuquerque,
NM, 2016.

[76] I. Tezaur, J. Fike, K. Carlberg, and M. Barone. Captive carry reduced order modeling. Sandia
National Laboratories Report, Sand No. 2018-10824. Sandia National Laboratories, Albuquerque,
NM, 2018.

[77] I. Tezaur, J. Fike, K. Carlberg, M. Barone, D. Maddix, E. Mussoni, and M. Balajewicz.
Advanced ﬂuid reduced order models for compressible ﬂow. Sandia National Laboratories
Report, Sand No. 2017-10335. Sandia National Laboratories, Albuquerque, NM, 2017.

[78] I. Tezaur, M. Perego, A. Salinger, R. Tuminaro, and S. Price. Albany/felix: A parallel,
scalable and robust ﬁnite element higher-order stokes ice sheet solver built for advanced analysis.
Geoscientiﬁc Model Development, 8:1–24, 2015.

[79] P. Tiso and D. Rixen. Discrete empirical interpolation method for ﬁnite element structural

dynamics. Topics in Nonlinear Dynamics, 1:203–212, 2013.

[80] K. Veroy and A.T. Patera. Certiﬁed real-time solution of the parametrized steady incompressible
Navier-Stokes equations: rigorous reduced-bases a posteriori error bounds. J. Num. Meth.
Fluids, 47:773–788, 2005.

[81] K. Washabaugh. Faster ﬁdelity for better design. Ph.D. Thesis, Stanford University, 2016.

42

P. Lindsay, J. Fike, I. Tezaur, K. Carlberg

Preconditioned LSPG ROMs

[82] K. Willcox and J. Peraire. Balanced model reduction via the proper orthogonal decomposition.

AIAA Journal, 40(11):2323–2330, 2002.

[83] O. Zahm and A. Nouy.

Interpolation of inverse operators for preconditioning parameter-

dependent equations. SIAM J. Sci. Comput., 38:A1044–A1074, 2016.

43

