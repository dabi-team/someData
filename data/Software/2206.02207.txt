OBAMA, an Ontology-Based Software Tool for Agile
Method Adoption

Soreangsey Kiva, Yves Wauteletc, Samedi Hengb,
Manuel Kolpa

aLouRIM, UCLouvain, Louvain-La-Neuve, Belgium
{soreangsey.kiv, manuel.kolp}@uclouvain.be
bHEC Li`ege, Universit´e de Li`ege, Li`ege, Belgium
samedi.heng@uliege.be
cKULeuven, Leuven, Belgium
{yves.wautelet@kuleuven.be

Abstract

Tools like Prot´eg´e support the creation and edition of one or more ontologies

in a single workspace. They nevertheless require a user to be familiar with

this kind of abstractions and their supporting techniques such as a reasoner

and SPARQL queries. This paper presents a step-by-step implementation of a

prototype-tool that allows retrieving and displaying easily the information about

agile practices contained in an ontology using Python programming language.

Future development includes the ﬂexible insertion, modiﬁcation, and removal of

knowledge by the user.

Keywords: Knowledge Representation, Ontology, Python Programming

Language, Prototype-Tool.

2
2
0
2

n
u
J

5

]
E
S
.
s
c
[

1
v
7
0
2
2
0
.
6
0
2
2
:
v
i
X
r
a

Preprint submitted to Software Impacts

June 7, 2022

 
 
 
 
 
 
Code metadata

Current code version

v1.0

Permanent link to code/repository

https://github.com/soreangsey/ontology.git

used for this code version

Permanent

link to Reproducible

doi.org/10.24433/CO.8008250.v1

Capsule

Legal Code License

MIT license

Code versioning system used

None

Software code languages, tools, and

Python, owlready2, wxPython, Web Ontol-

services used

ogy Language (OWL)

Compilation requirements, operat-

doi.org/10.24433/CO.8008250.v1 (See re-

ing environments & dependencies

quirements.txt)

If available Link to developer docu-

None

mentation/manual

Support email for questions

soreangsey.kiv@uclouvain.be

1. Introduction

A lot of diﬀerent practices are grouped under the umbrella of agile soft-

ware development. Being agile does not necessarily mean adopting all of these

practices (Eilers et al., 2020; Rahman et al., 2018). Organizations or individ-

ual software development teams often select a method (like Scrum, XP, SAFe,

etc.) and try to adapt it in a speciﬁc business context. Then, all the practices

prescribed by the chosen method do then not need to be implemented in the

speciﬁc business environment and a customized on-demand implementation is

generally preferable (Abbas et al., 2010; Kiv et al., 2021a).

The Ontology-Based for Agile Method Adoption (OBAMA) tool1 is a soft-

ware system that aggregates a lot of knowledge on the adoption of agile practices

1A demo in the form of a video of the tool can be found at https://bit.ly/3B5dcJN.

2

found within the scientiﬁc literature. First, it fully implements an ontology de-

picting the relevant concepts in the ﬁeld of systematic (agile) practices adoption

built out of a systematic literature review. Second, it hosts a lot of knowledge

gathered from literature reporting on the experience in adopting speciﬁc agile

practices. Finally, through SPARQL queries, practitioners can easily access the

most relevant information when adopting speciﬁc agile practices. The process

to retrieve relevant information from the ontology using available tools such as

Prot´eg´e tool requires users to follow some steps including (1) creating a new

instance to represent a development team, (2) describing the team’s properties

(3) executing the reasoner to automatically link the team instance to the other

instances based on inference rules, (4) and using SPARQL to retrieve the desired

concerns. Since this information retrieval process is complicated and requires a

user to have some preliminary knowledge, a user-friendly tool to simplify it is

deemed important to build.

The tool presented in this paper is part of a larger research eﬀort to build

and validate an ontology for agile practice adoption. A primary ontology for

practices adoption was presented in Kiv et al. (2017a,b, 2019) while the entire

research to build the ontology validating and populating it has been depicted

in (Kiv et al., 2022). Ontology creation has been used previously in the domain

of agile methods like in Wautelet et al. (2014) with the aim of creating require-

ments (conceptual) models and assist in software engineering (see Wautelet et al.

(2017)); it is here used as a database structure to support the knowledge re-

trieval of agile practice adoption in a ﬂexible and custom manner. This paper

serves as a reference for the OBAMA tool, it describes the technology supporting

the software as well as its architecture and impact.

In Section 2.1, we provide a basic explanation about each of the impor-

tant components needed to develop the tool. Section 2.2 explains the technical

architecture of our tool, with a set of steps from loading until displaying the

information to the users. Section 2.3 describes the functionality of the tool.

Finally, we conclude with the result, the impact and future research directions

in Section 3

3

2. Software Description

2.1. Main Technologies Supporting the OBAMA-Tool

There are four main technologies used for the development of our supporting

tool are:

• An ontology ﬁle written in Web Ontology Language (OWL) (McGuinness

et al., 2004). This ﬁle constitutes the database for storing the collected

knowledge about agile practice adoption;

• The Python programming language was chosen because it provides an

extensive Application Programming Interface (API ) to easily work with

the ontology;

• Owlready2, an ontology-oriented programming package in Python that al-

lows loading, modifying, saving, and executing a reasoner on the ontology

(Lamy, 2017). Since the HermiT OWL reasoner included in Owlready2

is written in Java programming language, we need to install Java.exe to

execute it;

• wxPython, a cross-platform GUI toolkit that we use to create the interface

(Precord, 2015).

These technologies are described in this section.

2.1.1. The Ontology File Written in Web Ontology Language

All the descriptions of concepts, relationships, and inserted knowledge re-

lated to agile practice adoption are written in the OWL format. The ontology

ﬁle can be seen as the database ﬁle of the system.

OWL is an ontology language recommended by the World Wide Web Con-

sortium (W3C) and it provides three sub-languages: OWL Lite, OWL Descrip-

tion Logic (DL), OWL Full (McGuinness et al., 2004). OWL Lite is the core

language for creating an ontology with a minimum number of restrictions and

constraints. OWL DL is a restricted version of OWL Full.

It has some re-

strictions on the context in which language construction can be used to ensure

4

decidability. OWL Full uses the same vocabulary as the above presented OWL

DL version. However, it is much more expressive and has fewer restrictions

than other versions. We use OWL Full for our ontology creation as it is more

descriptive and less restrictive, which makes it the most convenient choice for

usage. OWL can be seen as an extension of the Resource Description Framework

(RDF ) vocabulary because each OWL document is an RDF. Like RDF, OWL

vocabulary includes a set of XML syntaxes that are used to describe knowledge

in triples, “Subject-Predicate-Object”, just like a statement in a natural lan-

guage. For example, within the RDF format statement “practice is composed

of an activity”: practice is the subject, is composed of

is the predicate, and

activity is the object.

Following the procedure of ontology creation (Noy & McGuinness, 2001), we

started by deﬁning the key concepts (classes) and then hierarchically reﬁned the

concepts into sub-classes. In the concept reﬁnement process, one of the decisions

to take was whether we should introduce a new sub-class or simply distinguish

through instances with diﬀerent property values (Noy & McGuinness, 2001).

For instance, there are seventeen diﬀerent types of situation that can aﬀect the

agile adoption result, including team size, project size, type of communication,

team distribution, etc. In this case, we need to decide whether we should repre-

sent each type of situation by a sub-classe or an instance. According to (Noy &

McGuinness, 2001), we can identify a class when each type has a diﬀerent rela-

tionship with other class(es). Based on this principle, as each type of situation

has a diﬀerent eﬀect (hurt or harm) on the requisite, we represent each type

of situation by a sub-class in our ontology model. An example of OWL syntax

to create class and sub-class in our ontology is illustrated in Figure 1. In the

example, Role and Situation are the main classes where Communication is the

sub-class of Situation.

Once all classes were created, we continued with the deﬁnition of their prop-

erties that include two types: data and object. (1) The data property is used to

link the individuals (i.e., instances) and data value. Every class in our model has

only two data properties (i.e., Name and Description). Based on the literature,

5

Figure 1: Example of OWL syntax to create classes.

Figure 2: Example of OWL syntax to deﬁne object property.

these two data properties are the only common elements used to describe each

class by agile practitioners. These properties are String types. (2) Object prop-

erty is used to link individuals (i.e., instances) and individuals (i.e., instances).

Both links are built in the form of “Domain - data/object property - Range”.

For instance, the relationship “Practice - Achieve - Goal” has Achieve as an

object property where Practice is its domain and Goal is its the range. Figure

2 is an example of OWL syntax to deﬁne an object property. In the example,

the object property Achieve is the reverse of another object property named

Achieved by. In addition, either a team or practice (domain) can achieve either

goal or principle (range).

Finally, we created the individuals (i.e., instances) based on the knowledge

we had extracted from the literature. We started by creating an individual of a

class Team for each case study. We then continued to create other individuals

for the other information related to that team, for instance, the practice the

team adopted and the activity it performed as part of the practice, etc. When

6

Figure 3: Example of OWL syntax to create an individual and deﬁne its relationships.

all the individuals were created, we built their relationships by deﬁning their

object properties. Figure 3 is an example of OWL syntax to create an individual

Team42: Sprint review and deﬁne its relationships with other individuals.

2.1.2. SPARQL

SPARQL is a query language that was standardized in 2008 by the W3C

that is used for querying RDF data (Prud’hommeaux & Seaborne, 2005). Most

forms of SPARQL queries contain a set of basic triple graph patterns (subject,

predicate, object) where each pattern matches a sub-graph of RDF data and

the terms from that sub-graph may be substituted for the variables (Schmidt

et al., 2010). To query for the information in our ontology, each SPARQL query

comprises 4 parts of information in the following order. (1) A preﬁx that is the

abbreviation of the Uniform Resource Identiﬁers (URIs), (2) the information

to return from the query, (3) the triple patterns, and (4) the query modiﬁers

to ﬁlter and order the query results. Figure 4 is an example of how to write

a SPARQL query to select all the solutions to solve the problems that are

encountered by Daily meetings.

2.1.3. OWLReady2

Owlready2 is a module for ontology-oriented programming in Python that

we use to access the ontology, execute the reasoner, and query the information.

The general structure of the Owlready2 is made of ﬁve main components as

7

Figure 4: Example of SPARQL query.

shown in Figure 5. They include (1) an optimized RDF quadstore implemented

with an SQL database (i.e., SQLite3) and stored either in memory or on disk in

a ﬁle, (2) meta-classes for OWL classes and constructs, (3) optional ontology-

speciﬁc Python source ﬁles deﬁning methods to insert into OWL classes, (4)

the HermiT OWL reasoner for performing automatic classiﬁcation and (5) the

SPARQL engine from the RDFlib Python module that is used for RDF query

(Lamy, 2017).

The general algorithm that we use to query the ontology is OWLReady2

as shown in Figure 6. First, the ontology is imported into RDF quadstore and

their concepts and/or entities are saved in Python objects. Then, the HermiT

reasoner is executed. After that, the updated entities of the ontology are au-

tomatically stored in a memory in RDF format. We then perform SPARQL

queries using the RDFlib graph. Finally, a Python function captures and con-

verts the results into Strings and stores them in a list-type variable.

2.1.4. wxPython

wxPython is a cross-platform toolkit that is used to create desktop Graphical

User Interface (GUI ) applications. wxPython provides a set of methods and

8

Figure 5: OWLReady2 Architecture (Lamy, 2017)

Figure 6: Ontology query in Python programming language.

9

Figure2:GeneralarchitectureofOwlready.programmingmodule,wechosePythonbecauseitisadynamicobject-orientedprogramminglanguage,becauseitiseasytouseandwidelyusedinthebiomedicaldomain,andalsobecausewealreadydevelopedseveraltoolsinthislanguage,includingagenericAPIformedicalterminologies[43].5.DescriptionofOwlready5.1.GeneralarchitectureFigure2showsthegeneralarchitectureofOwlready.Itin-cludes5components:(1)anoptimizedRDFquadstore,imple-mentedwithanSQLdatabaseinSQLite3andstoredeitherinmemoryorondiskinaﬁle,(2)metaclassesforOWLclassesandconstructs,(3)optionalontology-speciﬁcPythonsourceﬁles,deﬁningmethodstoinsertintoOWLclasses,(4)theHermiTOWLreasoner[11],forperformingautomaticclassiﬁcation,(5)theSPARQLenginefromtheRDFlibPythonmodule.Owlreadyisinchargeofimportingontologiesinthequadstore,dynamicallyloadingtheirentitiesandwrappingtheminPythonobjects,im-portingPythonsourceﬁlesassociatedwiththeontologies,andexecutingthereasoner.Owlreadypresentstotheprogrammerauniﬁedinterface,mixingOWLstatements(properties,classhier-archy,individuals)withPythonstatements(methoddeﬁnitions).Thequadstorerelationaldatabaseincludestwotables:a2-columntablemappingIRI(InternationalizedResourceIdentiﬁer)toshorteralphanumericcodes,anda4-columntablecontainingRDFquadsoftheforms(subject,predicate,object,ontology),whereobjectcanbeanIRIoranRDFliteral.Owlreadyusesalazyparserfordynamicallyloadingtheentitiesfromthequad-storeondemand:whenanentity(class,propertyorindividual)isaccessedinPython,itisloadedinmemoryfromRDF,wrappedinaPythonobject,storedinacacheandreturned.IfthewrapperPythonobjectismodiﬁed,theRDFquadstoreisautomaticallyup-dated,byadding,removingorchangingRDFtriples.Whenthewrapperisnolongerreferencedandthecacheisfull,itisde-stroyed.Then,theentitymaybeloadedagainfromRDFiftheprogramneedstoaccessitagain.User-deﬁnedPythonmethodscanalsobeassociatedwithOWLclasses;inthiscase,aspeciﬁcannotation(“python_module”)canbeusedtolinkanontologywiththenameoftheassociatedPythonmodule.Finally,theHer-miTreasonercanbeusedforperformingautomaticclassiﬁcationofclassesandindividuals(seesection5.5).Thisarchitecturesupportsbigontologies,storedintheopti-mizedquadstore.Itallowsafastaccessfor“pokingaround”enti-tiesinontologies.5.2.MappingOWLtothePythonobjectmodelTheobjectiveofthemappingbetweenOWLontologiesandthePythonobjectmodelwastoobtainthemosttransparentaccesstoontologiesinPython,fromaprogrammer’spointofview.Theprogrammershouldbeabletomanipulatetheclassesandtheindi-vidualsoftheontologyasiftheywerenormalPythonclassesandobjects.OwlreadycanexpressalmostallOWL2.0constructs,includingclasses,individuals,objectproperties,dataproperties,annotations,propertydomainsandranges,constraineddatatypes,disjoints,classexpressionssuchasintersections,unions,propertyvaluerestrictionsandone-of,...OurimplementationinPythonreliesonmetaclasses.AnOWLclassisrepresentedinPythonbyaninstanceofthemetaclass,i.e.aPythonclass.Table2showsthevariousspecialmethodsthathavebeenredeﬁnedinordertoadaptOWLontologiestothePythonobjectmodel.Thesespecialmethodsaredeﬁnedeitheratthemetaclasslevel(i.e.theyareappliedonclasses)orattheclasslevel(i.e.theyareappliedoninstances).Intheprevioussection,weidentiﬁed6majordifferencesbe-tweendynamicobjectmodelsandontologies.Thefollowingpara-graphsdescribehowwedealtwitheachofthem.Fordifference#1(closed-oropen-worldassumption),wechoosetokeeptheclosed-worldassumptionwhenprogramminginPython.Whenreasoning,thedefaultistorelyontheopen-worldassumption,althoughwewillproposeasimplesolutionforlocalclosedworldreasoninginsection5.5.Fordifference#2(classdisjointsandequivalentclasses),weaddedanAllDisjoint()constructwhichstatesthatthegivenclassesarepairwisedisjoint.OWLproposestwowaysfordeclar-ingdisjointclasses:thedisjointWithrelation(whenonlytwoclassesareinvolved)andtheAllDisjointconstruct(supportingmorethantwoclasses).Onthecontrary,Owlreadypresentsasin-glewayforrepresentingdisjoints,correspondingtoAllDisjoint.disjointWithrelationsareautomaticallytranslatedintoAllDis-joints,andAllDisjointswithtwoentitiesarestoredinthequad-storeasdisjointWithrelations.Wealsoaddedan“equivalent_to”attributetoclasses.WereimplementedthePythonmethodsforcheckingsubclassesandinstances,totakeintoaccountequivalentclasses.Forexample,ifA≡B,whentestingCvA,wealsotestforCvB.Fordifference#3(individualdistinctionandsameindividuals),weaddedanAllDistinct()constructwhichstatesthatthegivenlistofinstancesaredistinct.Fordifference#4(multipleinstantiation),whenaninstancere-ceivesmorethanoneclass,weautomaticallycreateanewclassinheritingfromalltheclasses,andweassociatethisnewclasstotheinstance.ThisemulatesmultipleinstantiationinPython.Fordifference#5(propertiesasﬁrst-orderconstructs),wede-ﬁnedpropertiesassubclassesoftheObjectPropertyortheDat-aPropertyclass.Thisallowsinheritancerelationsbetweenprop-ertiesinPython.Fordifference#6(annotations),annotationsbehavelikeprop-erties,buttheycanbeappliedtoanyentities(unlikepropertiesthatareappliedtoindividuals)and,whenappliedtoclasses,theirvaluesarenotinheritedbysubclasses.Owlreadyemulatesthisbe-haviorinPython,usingthe__getattr__()and__setattr__()specialmethods.OWLprovidesvariousdatatypes,whicharerepresentedbyRDFliterals.Owlreadysupportsthefollowingdatatypes:boolean,integer,ﬂoat,string,normalizedstring,localizedstring,date,timeanddatetime.Anormalizedstringisastringwithoutlinebreak.AlocalizedstringisanRDFliteralinagivenlan-guage.Literalsarestoredinthequadstoreasastringwhichis6objects that programmers can use to simply and easily create programs with a

robust and highly functional GUI (Precord, 2015). Technically, wxPython is a

wrapper over a C++ GUI API called wxWidgets which are essential building

blocks of a GUI application. wxPython provides a lot of widgets that can be

divided into six groups. (1) Base Widgets provide basic functionality for derived

widgets, (2) top-level widgets provide diﬀerent functions independently of each

other, (3) containers that contain other widgets, (4) dynamic widgets that can

be edited by users, (5) static widgets that are used to only display information

but cannot be edited by the users, and (6) random widgets such as status-

bar, toolbar, and menu-bar, etc. There is a speciﬁc relation among widgets in

wxPython that is developed by inheritance. Widgets form a hierarchy; they can

inherit functionality from other widgets. The advantages of wxPython include

being open-source, cross-platform, easy to write, and easy to understand.

2.2. Tool Architecture

The architecture of the tool is illustrated in Figures 7 and 8 with two diﬀerent

scenarios. One is to retrieve all the information while the other is to retrieve

the information based on the user’s inputs.

2.2.1. Technical architecture for all the information related to a practice

In the scenario where all the information in ontology is retrieved and listed,

the retrieval process occurs only the ﬁrst time the program is executed, and

the returned information is then stored in the permanent memory for future

usage. As there is no any change to the information, loading the information

from the memory saves much more time than re-loading from the ontology ﬁle.

The program is executed in 9 steps, from loading data from the ontology to

displaying the results for the users.

1. The program imports the ontology from the source ﬁle (OWL), loads their

entities recursively, and wraps them in a Python object named OwlReady

Object;

10

Figure 7: Technical architecture for all the information related to practice.

2. The HermiT reasoner is then executed to auto-generate the classiﬁcation

of the classes, properties, and individuals based on the inference rules.

After that, it updates the Owlready Object;

3. The program loads all the pre-written queries to retrieve the information

related to all the concerns (one query for one concern) and stores them in

a list-type variable;

4. RDFLib SPARQL engine then iteratively runs all the queries from the

list;

5. The results of each query retrieved by the RDFLib SPARQL engine are

then converted and stored in another list-type variable;

6. Once all the queries are run, all the query results are stored in permanent

memory for future usages;

7. From the GUI, users select a concern from the list;

8. The program loads the information related to the selected concern from

the memory;

9. Finally, the information is displayed in table format.

2.2.2. Technical architecture for the information related to practice based on

inputs

In the scenario where the information is retrieved based on the users’ inputs,

the retrieval process occurs each time the users click on the button “Calculate

11

Module, object or varialeMethodSource fileReasoner(HermiT)2. Updateontology withinferences1. Load ontology9. Display results5. Return queriesresultsRDFLib SPARQLengine4. Execute queriesOWLReady objectPython runtimememoryInput page 1 or 26. Store queries results3. Load queriesOWL/XMLList of concernsPre-definedQueriesList of resultsUsers7. Select a concernUser Interface(wxPython)OwlReady28. Load resultsresult” in the “Input page 1” or the “Input page 2”. There are 11 steps in total

from loading data from the ontology to displaying results for the user.

1. From the GUI, users provide the input values (goals or/and situations);

2. The program imports the ontology source ﬁle, loads their entities recur-

sively, and wraps them in a Python object named OwlReady Object. This

step is done in the previous scenario;

3. The program then creates a temporary ontology object of the class Team

where the input values are its properties;

4. The HermiT reasoner is then executed to auto-generate the classiﬁcation

of the classes, properties, and individuals based on the inference rules.

By doing so, the temporary ontology object are now linked to the other

individuals based on pre-deﬁned inference rules. After that, it updates

the Owlready Object;

5. The program loads all the pre-written queries to retrieve the information

related to all the concerns (one query for one concern) and stores them in

a list-type variable;

6. The RDFLib SPARQL engine then iteratively runs all the queries from

the list;

7. The results of each query retrieved by RDFLib SPARQL engine are then

converted into Strings and stored in another list-type variable;

8. All the query results are stored in a temporary memory;

9. From the GUI, users select a concern from the list;

10. The program loads the information related to the selected concern from

the memory;

11. Finally, the information is displayed in the table format.

2.3. Functionality of the Tool

In this paper, we thus focus on the prototype-tool that allows retrieving and

displaying information. This tool is meant to help practitioners see how useful

the ontology could be when the knowledge is available. The part where a user

12

Figure 8: Technical architecture for questions and answers based on the inputs.

can insert, modify, and delete knowledge will be developed at a later stage. It

was created in a notebook-style where each functionality is put on a diﬀerent

page as shown in Figure 9.

• The ﬁrst page, called “Welcome page”, serves to introduce to users the

purpose of the tool and some usage guidelines;

• The second page “All the information related to practice” allows users

to access all the information related to agile practice adoption that we

have inserted. All concerns are listed in a combo-box. By choosing a

concern from the list, the information will be displayed underneath in a

table format;

• If users want to ﬁlter the information based on goals, they need to provide

input values in the “Input page 1”. Since most goals in adopting agile

methods can be mapped to the Agile Manifesto (Kiv et al., 2018), we

provide on this page a list of agile values and principles from which users

can choose;

• If users want to ﬁlter the information based on their situations, they need

to provide their input values in the “Input page 2”. On this page, we

provide 13 situational factors which have been collected through an SLR

(Campanelli & Parreiras, 2015). Each of the factors has a list of diﬀerent

13

Reasoner(HermiT)4. Updateontology withinferences2. Load ontology11. Display results7. Return queriesresultsRDFLib SPARQLengine6. Execute queriesOWLReady objectPython runtimememoryInput page 1 or 21. Input data3. Create new instance 8. Store queriesresults5. Load queriesOWL/XMLList of concernsPre-definedQueriesList of resultsUsers9. Select a concernUser Interface(wxPython)OwlReady210. Load resultsModule, object or varialeMethodSource filevalues from which users can choose. In both “Input page 1” or “Input

page 2”, there is a button “Calculate result” that allows starting the data

retrieval process;

• Our tool retrieves the information based on users’ inputs before it displays

the results in the page “Information related to practice based on input”.

Users can ﬁnd the desired information by choosing a concern from the list.

Our ontology ﬁle and source code in Python programming language can be

found at (Kiv et al., 2021b).

Figure 9: Screenshot of OBAMA tool.

3. Impact and Conclusion

Ontologies have been widely used in many ﬁelds, but not many research ar-

ticles address the diﬃculties of working with ontologies for an average user and

how to overcome this problem. The purpose of this paper is to elaborate on

how to create a user-friendly tool in Python to help users retrieve information

without any required preliminary knowledge. As said, the software is aimed to

be used by practitioners, especially novice ones since their potentially limited

14

experience makes the software tool especially relevant for them. By using our

tool, practitioners can easily get general information on agile practice adoption.

They can also ﬁlter for only relevant information based on their goals and con-

text. The tool has been evaluated by agile practitioners on a set of criteria

related to eﬃciency in Kiv et al. (2022). Results allow us to declare that all

the features in our tool are eﬃcient enough for users. Most experts “Somewhat

agree” or “Agree” that they can access, understand and input the information

easily. Even though we cannot say it is already satisfying enough for massive

adoption by users yet, but this result is overall still reassuring. It is also im-

portant to notice that, most experts “Agree” that our tool helps them decide

whether or not an agile practice is suitable for their team.

The tool has been developed in a laboratory setting and validated by prac-

titioners on the mentioned elements. More work is currently made with novice

agilists in real-life settings to further evaluate the tool but also improve it to

align at best to their requirements.

References

Abbas, N., Gravell, A. M., & Wills, G. B. (2010). Using factor analysis to

generate clusters of agile practices (a guide for agile process improvement).

In AGILE Conference (pp. 11–20). doi:https://doi.org/10.1109/AGILE.

2010.15.

Campanelli, A. S., & Parreiras, F. S. (2015). Agile methods tailoring–a sys-

tematic literature review. Journal of Systems and Software, 110 , 85–100.

doi:https://doi.org/10.1016/j.jss.2015.08.035.

Eilers, K., Simmert, B., & Peters, C. (2020). Doing agile vs. being agile-

understanding their eﬀects to improve agile work. In International Conference

on Information Systems (ICIS).

Kiv, S., Heng, S., Kolp, M., & Wautelet, Y. (2017a). An intentional perspec-

tive on partial agile adoption. In J. Cardoso, L. A. Maciaszek, M. van Sin-

15

deren, & E. Cabello (Eds.), Proceedings of the 12th International Conference

on Software Technologies, ICSOFT 2017, Madrid, Spain, July 24-26, 2017

(pp. 116–127). SciTePress. URL: https://doi.org/10.5220/0006429301160127.

doi:10.5220/0006429301160127.

Kiv, S., Heng, S., Kolp, M., & Wautelet, Y. (2018). Agile manifesto

and practices selection for tailoring software development: A systematic

literature review.

In International Conference on Product-Focused Soft-

ware Process Improvement (pp. 12–30).

doi:https://doi.org/10.1007/

978-3-030-03673-7_2.

Kiv, S., Heng, S., Kolp, M., & Wautelet, Y. (2019). Agile methods knowledge

representation for systematic practices adoption. In P. Kruchten, S. Fraser, &

F. Coallier (Eds.), Agile Processes in Software Engineering and Extreme Pro-

gramming - 20th International Conference, XP 2019, Montr´eal, QC, Canada,

May 21-25, 2019, Proceedings (pp. 19–34). Springer volume 355 of Lecture

Notes in Business Information Processing. URL: https://doi.org/10.1007/

978-3-030-19034-7 2. doi:10.1007/978-3-030-19034-7\_2.

Kiv, S., Heng, S., Wautelet, Y., & Kolp, M. (2017b). Towards a goal-oriented

framework for partial agile adoption. In E. Cabello, J. Cardoso, L. A. Ma-

ciaszek, & M. van Sinderen (Eds.), Software Technologies - 12th Interna-

tional Joint Conference, ICSOFT 2017, Madrid, Spain, July 24-26, 2017,

Revised Selected Papers (pp. 69–90). Springer volume 868 of Communica-

tions in Computer and Information Science. URL: https://doi.org/10.1007/

978-3-319-93641-3 4. doi:10.1007/978-3-319-93641-3\_4.

Kiv, S., Heng, S., Wautelet, Y., & Kolp, M. (2021a). Towards a systematic

socio-intentional framework for agile methods tailoring. In 2021 IEEE 23rd

Conference on Business Informatics (CBI) (pp. 143–152). IEEE volume 2.

Kiv, S., Heng, S., Wautelet, Y., Poelmans, S., & Kolp, M. (2021b). Obama -

ontology-based for agile method adoption [source code]. doi:https://doi.

org/10.24433/CO.8008250.v1.

16

Kiv, S., Heng, S., Wautelet, Y., Poelmans, S., & Kolp, M. (2022). Using an

ontology for systematic practice adoption in agile methods: Expert system

and practitioners-based validation. Expert Systems with Applications, (p.

116520).

Lamy, J.-B. (2017). Owlready: Ontology-oriented programming in python

with automatic classiﬁcation and high level constructs for biomedical ontolo-

gies. Artiﬁcial intelligence in medicine, 80 , 11–28. doi:https://doi.org/10.

1016/j.artmed.2017.07.002.

McGuinness, D. L., Van Harmelen, F. et al. (2004). Owl web ontology language

overview. W3C recommendation, 10 , 2004.

Noy, N. F., & McGuinness, D. L. (2001). Ontology development 101: A guide

to creating your ﬁrst ontology. https://protege.stanford.edu/publications/

ontology development/ontology101.pdf.

Precord, C. (2015). WxPython Application Development Cookbook . Packt Pub-

lishing Ltd.

Prud’hommeaux, E., & Seaborne, A. (2005). SPARQL Query Language for

RDF . Technical Report W3C. https://www.w3.org/TR/rdf-sparql-query/.

Rahman, A., Agrawal, A., Krishna, R., Sobran, A., & Menzies, T. (2018).

“doing” agile versus “being” agile, .

Schmidt, M., Meier, M., & Lausen, G. (2010). Foundations of sparql query

optimization. In International Conference on Database Theory (pp. 4–33).

Wautelet, Y., Heng, S., Kiv, S., & Kolp, M. (2017). User-story driven develop-

ment of multi-agent systems: A process fragment for agile methods. Comput.

Lang. Syst. Struct., 50 , 159–176.

Wautelet, Y., Heng, S., Kolp, M., & Mirbel, I. (2014). Unifying and extend-

ing user story models.

In M. Jarke, J. Mylopoulos, C. Quix, C. Rolland,

Y. Manolopoulos, H. Mouratidis, & J. Horkoﬀ (Eds.), Advanced Information

17

Systems Engineering - 26th International Conference, CAiSE 2014, Thessa-

loniki, Greece, June 16-20, 2014. Proceedings (pp. 211–225). Springer volume

8484 of Lecture Notes in Computer Science.

18

