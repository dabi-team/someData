2
2
0
2

y
a
M
3
1

]

O
R
.
s
c
[

1
v
4
6
5
6
0
.
5
0
2
2
:
v
i
X
r
a

An Ethical Black Box for Social Robots: a draft
Open Standard

Alan F.T. Winﬁeld1(cid:63), Anouk van Maris1, Pericle Salvini2, and Marina Jirotka2

1 Bristol Robotics Lab, University of the West of England, Bristol
2 Department of Computer Science, University of Oxford

Abstract. This paper introduces a draft open standard for the robot
equivalent of an aircraft ﬂight data recorder, which we call an ethical
black box. This is a device, or software module, capable of securely
recording operational data (sensor, actuator and control decisions) for
a social robot, in order to support the investigation of accidents or near-
miss incidents. The open standard, presented as an annex to this paper,
is oﬀered as a ﬁrst draft for discussion within the robot ethics commu-
nity. Our intention is to publish further drafts following feedback, in the
hope that the standard will become a useful reference for social robot
designers, operators and robot accident/incident investigators.

Keywords: ethical black box, social robots, traceability, transparency,
robot ethics, responsible robotics

1

Introduction

In [9] we argued the case that robots and autonomous systems should be equipped
with the equivalent of an aircraft Flight Data Recorder to continuously record
sensor and relevant internal status data. We call this an ethical black box (EBB).
We argued that an ethical black box will play a key role in the processes of dis-
covering why and how a robot caused an accident, and thus an essential part of
establishing accountability and responsibility.

We propose that the EBB needs a standard speciﬁcation. A standard speciﬁ-
cation has several beneﬁts. First, a standard approach to EBB implementation in
social robots will greatly beneﬁt accident and incident (near miss) investigations
[10]. Second, an EBB will provide social robot designers and operators with data
on robot use that can support both debugging and functional improvements to
the robot. Third, an EBB can be used to support robot ‘explainability’ functions
to allow, for instance, the robot to answer ‘Why did you just do that?’ questions
from its user. And fourth, a standard allows EBB implementations to be readily
shared and adapted for diﬀerent robots and, we hope, encourage manufacturers
to develop and market general purpose robot EBBs.

This paper is structured as follows. Section 2 provides a brief recap of the his-
tory of data loggers, and associated standards, in aviation, critical infrastructure

(cid:63) alan.winﬁeld@brl.ac.uk

 
 
 
 
 
 
and road vehicles. In section 3 we give a brief high-level description of the EBB,
and in section 4 we argue the case for a standardised EBB, and a draft open
standard as a starting point. In section 5 we conclude the paper by outlining the
draft open standard in Annex A.

2 A brief introduction to Data Loggers

The term ‘black box’ was ﬁrst used informally in the late 1940s for navigational
instruments, within the Royal Air Force. The term was then extended to cover
any kind of apparatus within a sealed container. From the mid 1960s the collo-
quial use of the ‘black box’ has narrowed to refer to the Flight Data Recorder
(FDR), now ﬁtted as standard in aircraft.

Black box – or ﬂight data recorders – were introduced in 1958, for larger
aircraft, and since then have vastly expanded in scope in what ﬂight data they
record. Initially FDRs included time navigation data about the position of sur-
faces and the pilots’ movement of controls; latterly sensor data on the internal
and external environment as well as the functioning of components and sys-
tems are also recorded, alongside autopilot settings such as selected headings,
speeds, altitudes and so on [3]. FDRs on modern aircraft record more than 1000
parameters [2].

The transfer of the black box concept into settings other than aviation is not
new. Data loggers for critical infrastructure such as Supervisory Command and
Data Acquisition (SCADA) systems are also standard practice [6,7]. The largest
deployment of black box technology outside aviation is within the automobile
and road haulage industries for data logging [8,11]. Data loggers for vehicles are
generally known as Event Data Recorders (EDRs). Standards for EDRs include
IEEE 1616 ‘Standard for Motor Vehicle Event Data Recorder (MVEDR)’ ﬁrst
published in 2004 and revised in 2021 [1].

3 The Ethical Black Box

All robots collect sense data, and – on the basis of that sense data and some
internal decision making process (AI) – send commands to actuators. This is of
course a simpliﬁcation of what in practice will be a complex set of connected
systems and processes but, at an abstract level, all intelligent robots will have the
three major subsystems shown in blue, in Fig. 1. A social robot is no diﬀerent,
except that it is designed to interact directly with humans.

We deﬁne the ethical black box (EBB) as a system for securely recording
date- and time-stamped operational data from a social robot. We use the term
ethical black box to emphasise our view that to deploy social robots without an
EBB would be irresponsible.

The Ethical Black Box (EBB) and its data ﬂows, shown in red in Fig. 1
will need to collect and store data from all three robot subsystems: sensor data,
actuator demands and actual positions, and robot decisions — ideally with the
reasons for those decisions. All of these data will need to be date and time

Figure 1. Robot sub-systems with an Ethical Black Box and key dataﬂows.

stamped. An important property of the EBB is that the data ﬂows from the robot
to the EBB are strictly one-way. It is important that the EBB is a passive sub-
system, accepting data from the robot controller, and not aﬀecting the robot’s
operation.

4 Why do we need a standardised EBB?

We contend that social robots should not only be ﬁtted with an EBB, but that
EBB should follow a standard speciﬁcation. There are several beneﬁts from a
standard EBB:

1. A standard approach to EBB implementation in social robots will greatly
beneﬁt accident and incident (near-miss) investigations. In [10] we argue that
social robots bring greater risks than industrial robots, and hence the likeli-
hood of harms — including psychological, societal or environmental harms
— is greater. Without the data provided by the EBB the investigation of
accidents or near-miss incidents in order to discover what happened, why it
happened and how to prevent it happening again is diﬃcult, if not impossi-
ble.

2. An EBB will provide social robot designers and operators with data on
robot use that can support both debugging and functional improvements to
the robot. Thus it becomes a powerful diagnostic tool during research and
development.

3. An EBB can be used to support robot explainability functions to allow, for
instance, the robot to answer “Why did you just do that?” questions from
its user [5].3 And

4. a standard allows EBB implementations to be readily shared and adapted
for diﬀerent robots and, we hope, both encourage manufacturers to develop
and market general purpose robot EBBs, and regulators to require EBBs.

Bruce Perens, creator of The Open Source Deﬁnition, outlines a number of

criteria an open standard must satisfy, including:

1. “Availability: Open standards are available for all to read and implement.
2. Maximize End-User Choice: Open Standards create a fair, competitive mar-

ket for implementations of the standard.

3. No Royalty: Open standards are free for all to implement, with no royalty

or fee.

4. No Discrimination: Open standards and the organizations that administer
them do not favor one implementor over another for any reason other than
the technical standards compliance of a vendor’s implementation.

5. Extension or Subset: Implementations of open standards may be extended,

or oﬀered in subset form.”4

5 The Draft Open Standard

In Annex A we set out the ﬁrst draft of an Open Standard for an EBB for
social robots. Following the model of the Internet open standards this draft is
a Request for Comments (RFC). Subsequent drafts will incorporate feedback.
The standard is written following BS 0:2021 A Standard for Standards [4].

Annex A sets out the requirements for an EBB Software Module that could
be integrated within a robot’s controller, or as a stand alone software process
connected, via a network connection, to the robot.

Annex A details the normative requirements for the data structures and for-
matting. These data structures fall into three categories: Meta Data, which stores
information about the robot that the EBB is connected to, Data Data, which
stores information on the number of records and dates and times of the oldest
and most recent records in the EBB, and Robot Data, which stores operational
data on the robot. The ﬁnal category Robot Data will comprise most of the
data stored in the EBB. All three structures are date- and time-stamped and
have a common format. Annex A also provides examples of records for each of
these three data structures together with an example of a complete set of EBB
records, and how often particular robot data records might be written.

The overall aim of the standard is to provide a technical speciﬁcation for an
EBB for Social Robots. This speciﬁcation, alongside an open-source library of
model implementations, will provide a resource to enable developers to build an
EBB into their robots.
3 Noting that this would require the robot’s control system to access it’s own EBB -

and thus violate the principle of the EBB’s passivity.

4 https://opensource.com/resources/what-are-open-standards

Acknowledgments

This work has been conducted within project RoboTIPS: Developing Responsi-
ble Robots for the Digital Economy supported by EPSRC grant ref EP/S005099/1.

References

1. IEEE standard for motor vehicle event data recorder (mvedr). IEEE Std 1616-2021

(Revision of IEEE Std 1616-2004), pages 1–184, 2021.

2. National Transport Safety Board. Flight Data Recorder Handbook for Aviation

Accident Investigations. Oﬃce of Aviation Safety, Washington, USA, 2002.

3. D. R. Grossi. Aviation recorder overview, national transportation safety board

[NTSB]. J. Accid. Investig., 2(1):31–42, 2006.

4. British Standards Institute. BS 0 2021, a Standard for Standards — principles of

standardization. BS 0 2021, pages 1–42, 2021.

5. Vincent J. Koeman, Louise A. Dennis, Matt Webster, Michael Fisher, and Koen
Hindriks. The “why did you do that?” button: Answering why-questions for
end users of robotic systems. In Louise A. Dennis, Rafael H. Bordini, and Yves
Lesp´erance, editors, Engineering Multi-Agent Systems, pages 152–172, Cham, 2020.
Springer International Publishing.

6. Thomas Morris and Kalyan Pavurapu. A retroﬁt network transaction data logger
and intrusion detection system for transmission and distribution substations. In
2010 IEEE International Conference on Power and Energy, pages 958–963, 2010.
7. Jeong Seok Oh. A practical study on data logger for gas industry. In James J.
Park, Vincenzo Loia, Gangman Yi, and Yunsick Sung, editors, Advances in Com-
puter Science and Ubiquitous Computing, pages 860–864, Singapore, 2018. Springer
Singapore.

8. P. R. Thom and C. A. MacCarley. A spy under the hood: controlling risk and

automotive EDR. Risk Manag. Mag, 55(2):22––26, 2008.

9. A. F. Winﬁeld and M. Jirotka. The case for an ethical black box.

In Y. Gao,
S. Fallah, Y. Jin, and C. Lekakou, editors, Towards Autonomous Robotic Systems
(TAROS 2017) Lecture Notes in Computer Science Vol. 10454, pages 262–273.
Springer, Cham, 2017.

10. Alan F. T. Winﬁeld, Katie Winkle, Helena Webb, Ulrik Lyngs, Marina Jirotka, and
Carl Macrae. Robot Accident Investigation: A case study in responsible robotics.
In Ana Cavalcanti, Brijesh Dongol, Rob Hierons, Jon Timmis, and Jim Woodcock,
editors, Software Engineering for Robotics. Springer, Cham, 2021.

11. M. Worrell. Analysis of bruntingthorpe crash test data, impact. J. Inst. Traﬃc

Accid. Investigators, 21(1):4–10, 2016.

Annex A: Draft Standard for an Ethical Black Box
Software Module for Social Robots

Request For Comments, Draft 0.1

A.1 Scope

This draft open standard sets out normative technical requirements for a data
logger for Social Robots, which we call an Ethical Black Box (EBB). This draft is

a Request For Comments (RFC), inviting feedback and suggestions for improve-
ments. Further drafts will incorporate revisions in response to this feedback.

The aim of the standard is to provide researchers, developers and operators
with a technical speciﬁcation for an EBB for Social Robots. This speciﬁcation,
alongside an open source library of model implementations, will provide a re-
source to enable developers to build an EBB into their robots.

The standard sets out the speciﬁcation for a software module for an EBB,
which may be implemented either as a software module alongside the robot’s
control system, or as a stand alone software process within a system connected
(i.e. via a network connection) to the robot. This module may also be imple-
mented within a hardware EBB physically connected to the robot, although the
speciﬁcation of the hardware is outside the scope of this draft.

A.2 Normative References

– BS 0:2021, A standard for standards — Principles of standardization
– BS ISO 8373:2021, Robotics — Vocabulary

A.3 Terms and Deﬁnitions

For the purposes of this document, the following terms and deﬁnitions apply.

Ethical Black Box (EBB): A system for securely recording date- and

time-stamped operational data from a social robot.

Social Robot: An intelligent service robot designed to interact with humans.

For deﬁnitions of intelligent service robot refer to BS ISO 8373:2021.

A.4 EBB Normative Requirements for Data

This section sets out requirements for the data that should be captured by the
EBB.

EBB data organisation The data stored in the EBB shall comprise three
types of record: meta data, data data and robot data. The EBB shall contain one
meta data (MD) record only, one data data (DD) record only, and a number of
robot data (RD) records. The maximum number of RD records shall be ﬁxed for
each EBB according to the limits of its storage capacity. The general organisation
of EBB data is shown in Table 1.

The EBB RD logs shall be written in order starting from RD record 1, and
proceeding to RD record n. After record n has been written the EBB shall
write the next RD record overwriting RD record 1, and write subsequent RDs
in record 2, and so on. In this way the EBB always stores the most recent set of
RD records, up to its maximum capacity of n records.

Meta Data, Data data and Robot Data records have the same overall struc-

ture, as shown in 2.

Each EBB record consists of a 2 character record labels ‘MD’, ‘DD’ or ‘RD’

followed by a variable number of ﬁelds.

EBB records
Meta data (MD) record
Data data (DD) record
Robot data (RD) record 1
Robot data (RD) record 2
...
Robot data (RD) record n
Table 1. General organisation of EBB data

length
2 chars

format
ASCII text

Record
Record type ‘MD’, ‘DD’ or ‘RD’
Number of ﬁelds and chars in record 12 chars ASCII 000:00000000
10 chars ASCII yyyy:mm:dd
Date record written
12 chars ASCII hh:mm:ss:ms
Time record written
Data record 1
variable
...
Data record m
Checksum

see below
ASCII

variable
4 chars

see below

Table 2. Common structure of Meta Data, Data Data and Robot Data Records

Each ﬁeld in a record consists of a 4 character label, followed by data elements
deﬁned according to the label. EBB ﬁelds are deﬁned below for each of the 3
types of record. Note that several ﬁelds are common to all 3 record types.

The EBB Meta Data Record The Meta Data Record shall store information
about the robot that the EBB is ﬁtted to (name, version or model no, and serial
no), the robot’s developer/manufacturer and operator, the contact details of the
person responsible for the robot, and information on the EBB itself.

Table 3 deﬁnes each ﬁeld in the MD record, and includes both required and
optional ﬁelds. Here a string is deﬁned as a variable length ASCII sequence
terminated by the null character ASCII \0.

Notes on the MD ﬁelds:

1. The record size recS, has a 12 char data element formatted as 3 numeric
chars and 8 numeric chars separated by a colon, i.e. 000:00000000. It follows
that the maximum permissible number of ﬁelds in a record is 999, and the
maximum number of characters is 99,999,999. Note also that the size and
character count must include the recS ﬁeld.

2. The EBB date ﬁeld ebbD is 12 ASCII characters with colon separated year,

month, and day, i.e. yyyy:mm:dd.

3. The EBB time ﬁeld ebbT is 10 ASCII characters with colon separated hour,

minute, second and millisecond, i.e. hh:mm:ss:ms.

4. The record checksum chkS shall be computed using a 64-bit non-cryptographic

hash function, to be determined.

An example of a complete Meta Data Record is shown in 4.

label data
recS record size, ﬁeld and chars, including recS ﬁeld
ebbD EBB date record written
ebbT EBB time record written
botN robot name
botV robot version no
botS robot serial no
botM robot manufacturer
opeR robot operator
resP name and contact details of responsible person
ebbN EBB name and version no
chkS checksum for complete record

length
12 chars
10 chars
12 chars
string
string
string
string
string
string
string
8 hexadecimal chars

requirement
required
required
required
required
optional
optional
required
optional
required
required
required

Table 3. Meta Data Fields

ﬁeld
MD
recS 010:00000000
ebbD 2022:04:20
ebbT 16:40:20:000
botN NAO\0
botV 4\0
botM Aldebaran\0
opeR Bristol Robotics Lab\0
resP A Winﬁeld +44 117 328 6913\0 person responsible
ebbN PyEBB v1.2\0
chkS AF5679FC

comment
record label
number of ﬁelds:chars in record
date 20 April 2022
time 16:40 and 20.000 seconds
NAO robot
v4
Manufacturer
Operator

this EBB
checksum for this record

Table 4. An example Meta Data Record

The EBB Data Data Record The Data Data Record shall store information
about the robot data records stored in the EBB.

Table 3 deﬁnes each ﬁeld in the DD record, and includes both required and

optional ﬁelds.

Notes on the DD ﬁelds:

1. For notes on recS ebD1, ebT1, ebDM, ebTM and chkS see notes on Table 3

above.

2. Field ebbX is an oﬀset, in number of bytes, from the start of the EBB storage
media to the next writable position for an RD record. Note that this will
need to be reset back to RD 1 once the storage media is full.

3. Field sysX ‘system exclusive’ is manufacturer/operator deﬁnable. The data
is formatted as 2 chars and a string separated by a colon, i.e. 00:string. The
2 characters are to allow the manufacturer to deﬁne up to 99 sysX ﬁelds,
and the string allows for variable length data.

4. Given that all ﬁelds in the DD record are required and have a ﬁxed length the
recS ﬁeld will have the default value 010:00000130, as shown in the example

label data
recS record size, ﬁeld and chars
ebbN total number of EBB Data Records stored in EBB
ebbX index to the start of next writable RD record
ebD1 date of oldest RD record written
ebT1 time of oldest RD record written
ebDM date of most recent RD record written
ebTM time of most recent RD record written
sysX manufacturer deﬁnable ﬁeld
chkS Checksum for complete record

length
12 chars
10 chars
16 chars
10 chars
12 chars
10 chars
12 chars
variable
8 hexadecimal chars

requirement
required
required
required
required
required
required
required
optional
required

Table 5. Data Data Fields

DD record in Table 6. Only if the record includes sysX ﬁeld(s) will chkS have
a diﬀerent value.

An example of a complete Data Data Record is shown in 6.

comment
record label
number of ﬁelds:chars in record
date 20 April 2022
time 16:40 and 20.000 seconds
400 records in EBB

ﬁeld
DD
recS 010:000000130
ebbD 2022:04:20
ebbT 16:40:20:000
ebbN 0000000400
ebbX 00000000001545060 oﬀset to next RD position in storage media
ebD1 2022:03:01
ebT1 08:00:30:000
ebDM 2022:05:01
ebTM 18:59:30:100
chkS FF5678AC

ﬁrst RD date 1 March 2022
ﬁrst RD time 08:00 and 30.000 seconds
Most recent RD date 1 May 2022
Most recent RD time 18:59 and 30.100 seconds
checksum for this record

Table 6. An example Data Data Record

EBB Robot Data Records The Robot Data Records store operational data
from the robot

Table 7 deﬁnes each ﬁeld in the RD record, and includes both required and

optional ﬁelds.

Notes on the RD ﬁelds:

1. For notes on recS, and chkS see notes on Table 3 above. For notes on sysX

see notes on Table 5.

2. Field botT is needed in case the robot’s clock shows a diﬀerent time to the
EBB’s clock. The format of botT is the same as ebbT : 10 ASCII chars, for
hours, minutes, seconds and milliseconds 00:00:00:000.

label data
botT robot time
actD actuator no and demand value
actV actuator no and actual value
batL battery level
tchS touch sensor no and value
irSe infra red sensor no and value
lfSe line following sensor no and value
gyrV gyro no and value
accV accelerometer no and value
tmpV temperature sensor no and value
micI microphone no and input
camF camera no and frame grab
txtC text input command
txtR text reply
decC robot decision code and reason
wiﬁ WiFi status and signal strength
sysX manufacturer deﬁnable ﬁeld
chkS checksum for complete record

length
10 chars
12 chars 000:±0000.00
12 chars 000:±0000.00
3 chars
6 chars 00:000
6 chars 00:000
6 chars 00:000
20 chars 00:±0000:±0000:±0000
20 chars 00:±0000:±0000:±0000
8 chars 00:±0000
variable, 2 chars:8 chars:wav hex
variable, 2 chars:8 chars:jpg hex
variable, string
variable, string
variable, 4 chars 0000:string
4 chars 0:00
variable, 2 chars 00:string
8 hexadecimal chars

requirement
required
optional
optional
optional
optional
optional
optional
optional
optional
optional
optional
optional
optional
optional
optional
optional
optional
required

Table 7. Robot Data Fields

3. Fields actD and actV each contain values for the actuator number and the
actuator demand, or actual positions respectively. The data is formatted
000:±0000.00 thus allowing for a maximum of 999 actuators, and positive or
negative values of up to ±9999.99.

4. Fields tchS, irSe, lfSe each contain values for sensor number and the sensor
value. The data is formatted 00:000 thus allowing for up to 99 sensors, and
sensor values between 0...999.

5. Field micI allows for storage of a wav audio clip captured by the robot’s
microphone(s). The data has three colon separated elements, 2 chars for the
microphone number, 8 chars for the length of the wav clip, and the hexadec-
imal representation of the wav binary. This allows for up to 99 microphones
and wav clips of up to 99,999,999 bytes.

6. Field camF allows for storage of a jpg still frame grabbed by the robot’s
camera(s). The data has three colon separated elements, 2 chars for the
camera number, 8 chars for the length of the jpg clip, and the hexadecimal
representation of the jpg binary. This allows for up to 99 cameras and jpg
clips of up to 99,999,999 bytes.

7. Fields txtC and txtR allow for storage of text input commands to the robot,
and text responses from the robot, respectively. The input command might
be typed by the robot’s user, or spoken and then converted from speech to
text by the robot’s speech recognition system. The output text might be
displayed visually or spoken by the robot’s speech synthesis system. The
data elements for both txtC and txtR are null terminated strings.

8. Field decC allows for storage of the robot’s internal decision of its next action
(i.e. turn left, turn right, stop, speak an alert, etc), together (optionally)
with a reason for that decision. The data is formatting as a 4 char decision
code, followed by a string. This allows for up to 9999 decisions to be logged.
The determination of which numeric value to use for each robot decision is
outside the scope of this standard, and left to the robot’s manufacturer or
operator. If there is no reason the string shall be stored as an empty null
string terminated by ASCII \0.

9. Field wiﬁ allows for storage of the robot’s WiFi connection status and sig-
nal strength. The colon separated data is formatted as 1 character connec-
tion status, connected (1) or not connected (0), and 2 characters for signal
strength, from 00..99.

An example of a complete Robot Data Record is shown in Table 6, for a

simple diﬀerential drive wheeled robot, with 8 IR sensors.

ﬁeld
RD
recS 017:00000nnn
ebbD 2022:04:20
ebbT 16:40:20:000
batL 255
actV 001:-175.54
actV 002:102.09
irSe 001:0.05
irSe 002:0.05
irSe 003:0.05
irSe 004:0.05
irSe 005:0.05
irSe 006:0.23
irSe 007:0.15
irSe 008:0.05
decC 0020:obstacle detected\0 turning left to avoid obstacle on right
wiﬁ 1:255
chkS CFA3569A

comment
record label
number of ﬁelds:chars in record
RD date
Rd time
battery level
left wheel angle
right wheel angle
IR sensor 1
IR sensor 2
IR sensor 3
IR sensor 4
IR sensor 5
IR sensor 6
IR sensor 7
IR sensor 8

WiFi connected, good signal
checksum for this record
Table 8. An example Robot Data Record

A.4.2 EBB Timing Not all EBB records need to be written with the same
frequency. In general those RD records which capture actuator movements and
short range sensor inputs will need to be written with the highest frequency; a
default setting for these might be once every 2 seconds. RD records that capture
camera images might be written with a lower frequency, especially if the robot
moves slowly, say once every 10 seconds, or less. A third group of RD records are

those that capture aperiodic events, such as a user’s commands and the robot’s
response (if there is one).

Table 9 illustrates the EBB timing, with three kinds of event logged: high
frequency motor and sensor values captured once every 2 seconds (in RD 1, 2,
4, 6 etc), lower frequency camera frame grabs once every 10 seconds (in RD 3,
RD 10 and RD 17), and the sporadic events of user commands to override the
robot’s autonomous operation, in RD 5 and RD 13. For clarity only the ebbT
time ﬁelds are shown in full. Abbreviated camF and txtC ﬁelds are also shown
in RD 3, 5, 10, 13 and 17.

recS... ebbD... ebbT 08:40:20:000 ebbD1... ebbT1... ebbN... ebDM... ebbTM... chkS...

label ﬁelds
MD recS... ebbD... ebbT 08:40:20:000 BotN ePuck BotM... Resp... chkS...
DD
RD 1 recS... ebbD... ebbT 08:40:22:000 botT... actV... batL... irSE... chkS...
RD 2 recS... ebbD... ebbT 08:40:24:000 botT... actV... batL... irSE... chkS...
RD 3 recS... ebbD... ebbT 08:40:25:000 botT... camF 01:00307200:... chkS...
RD 4 recS... ebbD... ebbT 08:40:26:000 botT... actV... batL... irSE... chkS...
RD 5 recS... ebbD... ebbT 08:40:27:100 botT... txtC Halt\0 chkS...
RD 6 recS... ebbD... ebbT 08:40:28:000 botT... actV... batL... irSE... chkS...
RD 7 recS... ebbD... ebbT 08:40:30:000 botT... actV... batL... irSE... chkS...
RD 8 recS... ebbD... ebbT 08:40:32:000 botT... actV... batL... irSE... chkS...
RD 9 recS... ebbD... ebbT 08:40:34:000 botT... actV... batL... irSE... chkS...
RD 10 recS... ebbD... ebbT 08:40:35:000 botT... camF 01:00307200:... chkS...
RD 11 recS... ebbD... ebbT 08:40:36:000 botT... actV... batL... irSE... chkS...
RD 12 recS... ebbD... ebbT 08:40:38:000 botT... actV... batL... irSE... chkS...
RD 13 recS... ebbD... ebbT 08:40:27:100 botT... txtC Run\0 chkS...
RD 14 recS... ebbD... ebbT 08:40:40:000 botT... actV... batL... irSE... chkS...
RD 15 recS... ebbD... ebbT 08:40:42:000 botT... actV... batL... irSE... chkS...
RD 16 recS... ebbD... ebbT 08:40:44:000 botT... actV... batL... irSE... chkS...
RD 17 recS... ebbD... ebbT 08:40:45:000 botT... camF 01:00307200:... chkS...

Table 9. Example EBB illustrating variable frequency of RD sampling

