aflow.org: a web ecosystem of databases, software and tools

Marco Esters,1 Corey Oses,1 Simon Divilov,1 Hagen Eckert,1 Rico Friedrich,1, 2, 3
David Hicks,1, 4 Michael J. Mehl,1 Frisco Rose,1 Andriy Smolyanyuk,1, 5
Arrigo Calzolari,6 Xiomara Campilongo,1 Cormac Toher,1, 7 and Stefano Curtarolo1, ∗

1Department of Mechanical Engineering and Materials Science and Center for
Autonomous Materials Design, Duke University, Durham, NC 27708, USA
2Institute of Ion Beam Physics and Materials Research,
Helmholtz-Zentrum Dresden-Rossendorf, 01328 Dresden, Germany
3Theoretical Chemistry, Technische Universität Dresden, 01062 Dresden, Germany
4LIFT, American Lightweight Materials Manufacturing Innovation Institute, Detroit, MI 48216, USA
5Institute of Solid State Physics, Technische Universität Wien, A-1040 Wien, Austria
6CNR-NANO Research Center S3, Via Campi 213/a, 41125 Modena, Italy
7Department of Materials Science and Engineering and Department of Chemistry and Biochemistry,
University of Texas at Dallas, Richardson, Texas 75080, USA
(Dated: August 5, 2022)

To enable materials databases supporting computational and experimental research, it is critical to develop platforms that
both facilitate access to the data and provide the tools used to generate/analyze it — all while considering the diversity of
users’ experience levels and usage needs. The recently formulated FAIR principles (Findable, Accessible, Interoperable, and
Reusable) establish a common framework to aid these eﬀorts. This article describes aflow.org, a web ecosystem developed
to provide FAIR-compliant access to the AFLOW databases. Graphical and programmatic retrieval methods are oﬀered,
ensuring accessibility for all experience levels and data needs. aflow.org goes beyond data-access by providing applications to
important features of the AFLOW software, assisting users in their own calculations without the need to install the entire
high-throughput framework. Outreach commitments to provide AFLOW tutorials and materials science education to a global
and diverse audiences will also be presented.

CONTENTS

I. Introduction

II. The aflow.org Repository

A. Database Content and Organization
B. Accessing and Searching the Database

1. The AFLOW REST-API
2. AFLUX: The AFLOW search API
3. AFLOW-OPTIMADE Integration
4. The AFLOW Search GUI

III. The Prototype Encyclopedia

IV. Web Applications
A. AFLOW Online
B. AFLOW-CHULL Online
C. AFLOW-ML Online

V. Education and Outreach

A. AFLOW keywords

References

∗ stefano@duke.edu

2

2
2
4
4
4
6
7

8

12
12
14
16

17

18

30

2
2
0
2

g
u
A
4

]
i
c
s
-
l
r
t

m

.
t
a
m
-
d
n
o
c
[

3
v
2
4
8
9
0
.
7
0
2
2
:
v
i
X
r
a

 
 
 
 
 
 
I.

INTRODUCTION

II. THE AFLOW.ORG REPOSITORY

2

The advantage of big data has long been recognized
in computational materials science, resulting in large
databases of experimental and hypothetical materials.
The Automatic FLOW Framework for Materials Discov-
ery (AFLOW) is the largest database for computation-
ally investigated materials, with over 3.5 million materi-
als entries [1] and over 1,100 crystallographic prototypes
to classify crystals and generate input structures.

The data should not just be publicly available, but
also easily accessible to users with varying usage re-
quirements,
from casual single-entry access to high-
throughput retrieval. To provide a common frame-
the FAIR princi-
work for such an infrastructure,
ples for data stewardship were developed, where FAIR
stands for “Findable”, “Accessible”, “Interoperable”, and
“Reusable” [2].

This article introduces the AFLOW web ecosystem,
which consists of the AFLOW databases and web inter-
faces to access features of the AFLOW software. We will
start with the aflow.org repository, its data structure, and
how it conforms with the FAIR data principles. Next, it
will be shown how to access and retrieve that data us-
ing both graphical, low-throughput and programmatic,
high-throughput methods. Additionally, the Prototype
Encyclopedia — a database over 1,100 crystallographic
prototypes — will be discussed along with its tools to
create structures for ab-initio calculations.

To create the AFLOW database, a variety of tools
has been developed and bundled into the open-source
AFLOW software suite. These features include structure
manipulation and creation [3–5], symmetry and struc-
ture analysis [6, 7], and post-processing tools [8, 9].
While packaging these tools into a monolithic codebase
is ideal for generating standardized data, the individ-
ual tools are also useful for many applications outside
high-throughput calculations. For these purposes, a sin-
gle large codebase is detrimental: users may only require
a subset (thus not using the majority of features), there
is a steep learning curve to ﬁnd and properly use the de-
sired feature, and the lack of a graphical user interface
requires that users be comfortable using the command
line. To alleviate these issues, AFLOW provides web ap-
plications that interface to a large variety of AFLOW
features (AFLOW Online), create convex hulls for ther-
modynamic analysis (AFLOW-CHULL), and use AFLOW
machine learning applications (AFLOW-ML). These ap-
plications will be introduced after the discussion about
the AFLOW database.

Lastly, we will present the AFLOW School and semi-
nar series. Making software usable and accessible goes
beyond just making it open source. Tutorials are an in-
valuable way to reduce the barrier to entry for new users.
The Schools and seminars represent AFLOW’s commit-
ment to providing free education about its software and
materials science to a global and diverse audience.

A. Database Content and Organization

The full data set generated by the high-throughput
AFLOW process [1] is currently over 40 TB. Stored data
includes input criteria and other calculation details (to
facilitate reproducibility and fulﬁll the “Reusable” cri-
terion of the FAIR principles), calculated results, and
derivative output. To ensure the robust, long-term ful-
ﬁllment of the FAIR criteria of accessibility and ﬁnd-
ability for such a large data store, the AFLOW reposi-
tory [1] is organized in a human-navigable hierarchical
directory structure, allowing speciﬁc entries to be ac-
cessed independently of the database engine. Speciﬁ-
cally, the repository is organized into project, set and
calculation layers, as illustrated in Figure 1. At the
project layer, the calculations are divided into diﬀerent
catalogs based on the origin and composition of the en-
tries [10, 11]. Within each catalog, entries are grouped
into sets based on shared lattice type or alloy system.
The entries within each set contain the results of density
functional theory (DFT) calculated properties for partic-
ular structures.

contains

The AFLOW-ICSD catalog

the DFT-
calculated properties for over 60,000 experimentally ob-
served materials listed in the Inorganic Crystal Structure
Database (ICSD) [12, 13]. Internally, this catalog is or-
ganized by lattice type, and then by individual mate-
rials entry. The entries in this catalog are grouped by
Bravais lattice type into 14 sets: BCC, BCT, CUB, FCC,
HEX, MCL, MCLC, ORC, ORCC, ORCF, ORCI, RHL, TET, and
TRI. The name of each materials entry is generated using
the format <composition>_ICSD_<ICSD number>. To
aid reproducibility, the species labels in the composition
part of the entry name are the full VASP pseudopoten-
tial (POTCAR) names used for that calculation. Since
the materials in this catalog are already known to exist,
the primary interest is in accurately calculating electronic
structure and thermo-mechanical properties. Therefore,
calculations for this catalog are generally performed us-
ing the Hubbard U correction to the DFT exchange-
correlation functional [14, 15] where appropriate, using
a set of standardized U values [16].

The entries in the other catalogs, such as LIB1, LIB2,
and LIB3, are generated by decorating crystal structure
prototypes to predict new hypothetical compounds, and
contain unary, binary, and ternary materials, respec-
tively. Within each catalog, the entries are grouped
by element and exchange-correlation functional in the
case of LIB1, and by alloy system in the cases of LIB2
and LIB3. LIB1 contains a total of 4k entries, while
LIB2 currently has 364k entries and LIB3 has about
2.6 million. Within each alloy system, the individual
materials entries are named according to the relevant
crystal prototype. For example, the directory path for
the composition AlCu2Mg in the Heusler structure is
LIB3_WEB/AlCu_pvMg_pv/T0001.AB2C, where LIB3_WEB

3

FIG. 1. AFLOW data structure.
search tree and (b) a machine-readable, balanced search tree.

Illustration of the AFLOW data structure as (a) a human-readable, but unbalanced

is the project layer corresponding to LIB3, AlCu_pvMg_pv
is the set layer corresponding to the Al-Cu-Mg alloy sys-
tem (using the Al, Cu_pv and Mg_pv pseudopotential
POTCARs), and T0001.A2BC is the A2BC decoration of
the Heusler prototype T0001. For these catalogs, the em-
phasis is on the discovery of new thermodynamically sta-
ble or metastable materials, and on their use to generate
the thermodynamic density of states for the prediction
of the formation of disordered materials such as metal-
lic glasses [17] or high entropy alloys [18]. Therefore,
calculations in these catalogs are performed using the
GGA-PBE exchange-correlation functional [19] without
Hubbard U corrections [16] so as to produce consistent
energy diﬀerences, enabling the calculation of accurate
formation enthalpies.

Categorizing data based on the number of species,
composition, and crystal prototype is an intuitive,
human-readable choice. However, this data structure in-
troduces ineﬃciencies that make it unsuitable for ma-
chine reading. The number of possible element combina-
tions and crystal prototypes increases with the number
of species. This results in an unbalanced search tree as
illustrated in Figure 1(a). For instance, the catalog of
binary (LIB2) and ternary entries (LIB3) may have 103
and 105 entries, respectively. In the alloy layer, the num-
ber of entries may be unevenly distributed as well. This
data structure is ineﬃcient to query and index: walking
and searching through LIB3 is signiﬁcantly slower than
through LIB2, resulting in uneven performance and pre-
venting eﬃcient parallelization. Using other materials
properties to structure the data would present similar
challenges as no property is evenly distributed across all
systems.

The AFLOW Unique IDentiﬁer (AUID) system elim-

It consists of
inates this computational
the aflow namespace declaration, followed by a quasi-
random 64-bit (8-byte) hash, for example:

ineﬃciency.

aflow:d3aa24a7307877b5.

This identiﬁer has the capacity for 264 ≈ 1019 entries
and can be further extended by using diﬀerent names-
paces. The AUIDs are generated by hashing the alpha-
betically ordered output ﬁles (OUTCAR) of the AFLOW
run using a 64-bit cyclic redundancy check (CRC64) al-
gorithm. Since the content of these ﬁles depends on pa-
rameters speciﬁc to the calculation, such as the options
of the VASP calculations or the input and ﬁnal struc-
ture, the resulting AUID is globally unique to the entry.
Changing the cut-oﬀ energy, for example, would result in
a diﬀerent identiﬁer. Using OUTCAR ﬁles as the basis
for the algorithm also makes the AUID reproducible and
thus persistent, fulﬁlling the “Findable” criterion of the
FAIR data sharing principles [2].

The byte expression of the AUID oﬀers a new way to
structure data where each layer is represented by an in-
dividual byte of the AUID. This scheme is shown in Fig-
ure 1(b). While this leads to a larger number of branches,
they are smaller (∼ 102 entries) with an even distribu-
tion of AUIDs across each byte layer due to the quasi-
randomness of the hash. These balanced search trees are
fast to query and index and also enable eﬃcient paral-
lelization.

Due to this computational eﬃciency, AUIDs are used
throughout the AFLOW software and web applications
when interfacing with the AFLOW database. However,
using a hash-based identiﬁer has the major drawback that
it is not human-readable as opposed to a material-based
identiﬁer such as:

103103102102102103105101103ijijiijjijijcalc. layerproject layerLIB2LIB3ICSD...<latexit sha1_base64="t7zjpHg1g1jto/dvb11JVwHUpiA=">AAAB7XicbVDLSsNAFL2pr1pfVZdugkVwVRItPnYFQVxWsA9oQ5lMJu3YyUyYmQgl9B/cuFDErf/jzr9xkgZR64ELh3Pu5d57/JhRpR3n0yotLa+srpXXKxubW9s71d29jhKJxKSNBROy5yNFGOWkralmpBdLgiKfka4/ucr87gORigp+p6cx8SI04jSkGGkjdQYsEFoNqzWn7uSwF4lbkBoUaA2rH4NA4CQiXGOGlOq7Tqy9FElNMSOzyiBRJEZ4gkakbyhHEVFeml87s4+MEtihkKa4tnP150SKIqWmkW86I6TH6q+Xif95/USHF15KeZxowvF8UZgwWws7e90OqCRYs6khCEtqbrXxGEmEtQmokodwmeHs++VF0jmpu6f1xm2j1rwu4ijDARzCMbhwDk24gRa0AcM9PMIzvFjCerJerbd5a8kqZvbhF6z3L9Ztj3Q=</latexit>set layerAgAlAsYZnZrbcctriZrMgAgAl...<latexit sha1_base64="aRmAxpNTy38AbyOynkxlFsHZV6M=">AAAB7XicbVBNS8NAEJ3Ur1q/qh69LBbBU0m0aL0VvHisYD+gDWWz2bRrN9mwuxFK6H/w4kERr/4fb/4bN2kQtT4YeLw3w8w8L+ZMadv+tEorq2vrG+XNytb2zu5edf+gq0QiCe0QwYXse1hRziLa0Uxz2o8lxaHHac+bXmd+74FKxUR0p2cxdUM8jljACNZG6g65L7QaVWt23c6BlolTkBoUaI+qH0NfkCSkkSYcKzVw7Fi7KZaaEU7nlWGiaIzJFI/pwNAIh1S5aX7tHJ0YxUeBkKYijXL150SKQ6VmoWc6Q6wn6q+Xif95g0QHTTdlUZxoGpHFoiDhSAuUvY58JinRfGYIJpKZWxGZYImJNgFV8hCuMlx8v7xMumd157zeuG3UWs0ijjIcwTGcggOX0IIbaEMHCNzDIzzDiyWsJ+vVelu0lqxi5hB+wXr/AtI3j2Y=</latexit>...<latexit sha1_base64="aRmAxpNTy38AbyOynkxlFsHZV6M=">AAAB7XicbVBNS8NAEJ3Ur1q/qh69LBbBU0m0aL0VvHisYD+gDWWz2bRrN9mwuxFK6H/w4kERr/4fb/4bN2kQtT4YeLw3w8w8L+ZMadv+tEorq2vrG+XNytb2zu5edf+gq0QiCe0QwYXse1hRziLa0Uxz2o8lxaHHac+bXmd+74FKxUR0p2cxdUM8jljACNZG6g65L7QaVWt23c6BlolTkBoUaI+qH0NfkCSkkSYcKzVw7Fi7KZaaEU7nlWGiaIzJFI/pwNAIh1S5aX7tHJ0YxUeBkKYijXL150SKQ6VmoWc6Q6wn6q+Xif95g0QHTTdlUZxoGpHFoiDhSAuUvY58JinRfGYIJpKZWxGZYImJNgFV8hCuMlx8v7xMumd157zeuG3UWs0ijjIcwTGcggOX0IIbaEMHCNzDIzzDiyWsJ+vVelu0lqxi5hB+wXr/AtI3j2Y=</latexit>...<latexit sha1_base64="aRmAxpNTy38AbyOynkxlFsHZV6M=">AAAB7XicbVBNS8NAEJ3Ur1q/qh69LBbBU0m0aL0VvHisYD+gDWWz2bRrN9mwuxFK6H/w4kERr/4fb/4bN2kQtT4YeLw3w8w8L+ZMadv+tEorq2vrG+XNytb2zu5edf+gq0QiCe0QwYXse1hRziLa0Uxz2o8lxaHHac+bXmd+74FKxUR0p2cxdUM8jljACNZG6g65L7QaVWt23c6BlolTkBoUaI+qH0NfkCSkkSYcKzVw7Fi7KZaaEU7nlWGiaIzJFI/pwNAIh1S5aX7tHJ0YxUeBkKYijXL150SKQ6VmoWc6Q6wn6q+Xif95g0QHTTdlUZxoGpHFoiDhSAuUvY58JinRfGYIJpKZWxGZYImJNgFV8hCuMlx8v7xMumd157zeuG3UWs0ijjIcwTGcggOX0IIbaEMHCNzDIzzDiyWsJ+vVelu0lqxi5hB+wXr/AtI3j2Y=</latexit>unbalancedtree structureL1L2L8...<latexit sha1_base64="rBmA3EFOx2v49zT+XY21QQC0Aug=">AAAB7XicbVBNS8NAEN34WetX1aOXYBE8lUSL1lvBi8cK9gPaUDabTbt2sxt2J4US+h+8eFDEq//Hm//GTRpErQ8GHu/NMDPPjznT4Dif1srq2vrGZmmrvL2zu7dfOTjsaJkoQttEcql6PtaUM0HbwIDTXqwojnxOu/7kJvO7U6o0k+IeZjH1IjwSLGQEg5E6g2kgQQ8rVafm5LCXiVuQKirQGlY+BoEkSUQFEI617rtODF6KFTDC6bw8SDSNMZngEe0bKnBEtZfm187tU6MEdiiVKQF2rv6cSHGk9SzyTWeEYaz/epn4n9dPIGx4KRNxAlSQxaIw4TZIO3vdDpiiBPjMEEwUM7faZIwVJmACKuchXGe4/H55mXTOa+5FrX5XrzYbRRwldIxO0Bly0RVqolvUQm1E0AN6RM/oxZLWk/VqvS1aV6xi5gj9gvX+BeGHj3A=</latexit>aflow:00aflow:01aflow:ff00ff...<latexit sha1_base64="aRmAxpNTy38AbyOynkxlFsHZV6M=">AAAB7XicbVBNS8NAEJ3Ur1q/qh69LBbBU0m0aL0VvHisYD+gDWWz2bRrN9mwuxFK6H/w4kERr/4fb/4bN2kQtT4YeLw3w8w8L+ZMadv+tEorq2vrG+XNytb2zu5edf+gq0QiCe0QwYXse1hRziLa0Uxz2o8lxaHHac+bXmd+74FKxUR0p2cxdUM8jljACNZG6g65L7QaVWt23c6BlolTkBoUaI+qH0NfkCSkkSYcKzVw7Fi7KZaaEU7nlWGiaIzJFI/pwNAIh1S5aX7tHJ0YxUeBkKYijXL150SKQ6VmoWc6Q6wn6q+Xif95g0QHTTdlUZxoGpHFoiDhSAuUvY58JinRfGYIJpKZWxGZYImJNgFV8hCuMlx8v7xMumd157zeuG3UWs0ijjIcwTGcggOX0IIbaEMHCNzDIzzDiyWsJ+vVelu0lqxi5hB+wXr/AtI3j2Y=</latexit>...<latexit sha1_base64="t7zjpHg1g1jto/dvb11JVwHUpiA=">AAAB7XicbVDLSsNAFL2pr1pfVZdugkVwVRItPnYFQVxWsA9oQ5lMJu3YyUyYmQgl9B/cuFDErf/jzr9xkgZR64ELh3Pu5d57/JhRpR3n0yotLa+srpXXKxubW9s71d29jhKJxKSNBROy5yNFGOWkralmpBdLgiKfka4/ucr87gORigp+p6cx8SI04jSkGGkjdQYsEFoNqzWn7uSwF4lbkBoUaA2rH4NA4CQiXGOGlOq7Tqy9FElNMSOzyiBRJEZ4gkakbyhHEVFeml87s4+MEtihkKa4tnP150SKIqWmkW86I6TH6q+Xif95/USHF15KeZxowvF8UZgwWws7e90OqCRYs6khCEtqbrXxGEmEtQmokodwmeHs++VF0jmpu6f1xm2j1rwu4ijDARzCMbhwDk24gRa0AcM9PMIzvFjCerJerbd5a8kqZvbhF6z3L9Ztj3Q=</latexit>abalancedtree structurebL300ff...<latexit sha1_base64="aRmAxpNTy38AbyOynkxlFsHZV6M=">AAAB7XicbVBNS8NAEJ3Ur1q/qh69LBbBU0m0aL0VvHisYD+gDWWz2bRrN9mwuxFK6H/w4kERr/4fb/4bN2kQtT4YeLw3w8w8L+ZMadv+tEorq2vrG+XNytb2zu5edf+gq0QiCe0QwYXse1hRziLa0Uxz2o8lxaHHac+bXmd+74FKxUR0p2cxdUM8jljACNZG6g65L7QaVWt23c6BlolTkBoUaI+qH0NfkCSkkSYcKzVw7Fi7KZaaEU7nlWGiaIzJFI/pwNAIh1S5aX7tHJ0YxUeBkKYijXL150SKQ6VmoWc6Q6wn6q+Xif95g0QHTTdlUZxoGpHFoiDhSAuUvY58JinRfGYIJpKZWxGZYImJNgFV8hCuMlx8v7xMumd157zeuG3UWs0ijjIcwTGcggOX0IIbaEMHCNzDIzzDiyWsJ+vVelu0lqxi5hB+wXr/AtI3j2Y=</latexit>...<latexit sha1_base64="rBmA3EFOx2v49zT+XY21QQC0Aug=">AAAB7XicbVBNS8NAEN34WetX1aOXYBE8lUSL1lvBi8cK9gPaUDabTbt2sxt2J4US+h+8eFDEq//Hm//GTRpErQ8GHu/NMDPPjznT4Dif1srq2vrGZmmrvL2zu7dfOTjsaJkoQttEcql6PtaUM0HbwIDTXqwojnxOu/7kJvO7U6o0k+IeZjH1IjwSLGQEg5E6g2kgQQ8rVafm5LCXiVuQKirQGlY+BoEkSUQFEI617rtODF6KFTDC6bw8SDSNMZngEe0bKnBEtZfm187tU6MEdiiVKQF2rv6cSHGk9SzyTWeEYaz/epn4n9dPIGx4KRNxAlSQxaIw4TZIO3vdDpiiBPjMEEwUM7faZIwVJmACKuchXGe4/H55mXTOa+5FrX5XrzYbRRwldIxO0Bly0RVqolvUQm1E0AN6RM/oxZLWk/VqvS1aV6xi5gj9gvX+BeGHj3A=</latexit>00ff...<latexit sha1_base64="aRmAxpNTy38AbyOynkxlFsHZV6M=">AAAB7XicbVBNS8NAEJ3Ur1q/qh69LBbBU0m0aL0VvHisYD+gDWWz2bRrN9mwuxFK6H/w4kERr/4fb/4bN2kQtT4YeLw3w8w8L+ZMadv+tEorq2vrG+XNytb2zu5edf+gq0QiCe0QwYXse1hRziLa0Uxz2o8lxaHHac+bXmd+74FKxUR0p2cxdUM8jljACNZG6g65L7QaVWt23c6BlolTkBoUaI+qH0NfkCSkkSYcKzVw7Fi7KZaaEU7nlWGiaIzJFI/pwNAIh1S5aX7tHJ0YxUeBkKYijXL150SKQ6VmoWc6Q6wn6q+Xif95g0QHTTdlUZxoGpHFoiDhSAuUvY58JinRfGYIJpKZWxGZYImJNgFV8hCuMlx8v7xMumd157zeuG3UWs0ijjIcwTGcggOX0IIbaEMHCNzDIzzDiyWsJ+vVelu0lqxi5hB+wXr/AtI3j2Y=</latexit>slowqueries and indexingfasterqueries and indexing282800ff...<latexit sha1_base64="aRmAxpNTy38AbyOynkxlFsHZV6M=">AAAB7XicbVBNS8NAEJ3Ur1q/qh69LBbBU0m0aL0VvHisYD+gDWWz2bRrN9mwuxFK6H/w4kERr/4fb/4bN2kQtT4YeLw3w8w8L+ZMadv+tEorq2vrG+XNytb2zu5edf+gq0QiCe0QwYXse1hRziLa0Uxz2o8lxaHHac+bXmd+74FKxUR0p2cxdUM8jljACNZG6g65L7QaVWt23c6BlolTkBoUaI+qH0NfkCSkkSYcKzVw7Fi7KZaaEU7nlWGiaIzJFI/pwNAIh1S5aX7tHJ0YxUeBkKYijXL150SKQ6VmoWc6Q6wn6q+Xif95g0QHTTdlUZxoGpHFoiDhSAuUvY58JinRfGYIJpKZWxGZYImJNgFV8hCuMlx8v7xMumd157zeuG3UWs0ijjIcwTGcggOX0IIbaEMHCNzDIzzDiyWsJ+vVelu0lqxi5hB+wXr/AtI3j2Y=</latexit>00ff...<latexit sha1_base64="aRmAxpNTy38AbyOynkxlFsHZV6M=">AAAB7XicbVBNS8NAEJ3Ur1q/qh69LBbBU0m0aL0VvHisYD+gDWWz2bRrN9mwuxFK6H/w4kERr/4fb/4bN2kQtT4YeLw3w8w8L+ZMadv+tEorq2vrG+XNytb2zu5edf+gq0QiCe0QwYXse1hRziLa0Uxz2o8lxaHHac+bXmd+74FKxUR0p2cxdUM8jljACNZG6g65L7QaVWt23c6BlolTkBoUaI+qH0NfkCSkkSYcKzVw7Fi7KZaaEU7nlWGiaIzJFI/pwNAIh1S5aX7tHJ0YxUeBkKYijXL150SKQ6VmoWc6Q6wn6q+Xif95g0QHTTdlUZxoGpHFoiDhSAuUvY58JinRfGYIJpKZWxGZYImJNgFV8hCuMlx8v7xMumd157zeuG3UWs0ijjIcwTGcggOX0IIbaEMHCNzDIzzDiyWsJ+vVelu0lqxi5hB+wXr/AtI3j2Y=</latexit>...<latexit sha1_base64="rBmA3EFOx2v49zT+XY21QQC0Aug=">AAAB7XicbVBNS8NAEN34WetX1aOXYBE8lUSL1lvBi8cK9gPaUDabTbt2sxt2J4US+h+8eFDEq//Hm//GTRpErQ8GHu/NMDPPjznT4Dif1srq2vrGZmmrvL2zu7dfOTjsaJkoQttEcql6PtaUM0HbwIDTXqwojnxOu/7kJvO7U6o0k+IeZjH1IjwSLGQEg5E6g2kgQQ8rVafm5LCXiVuQKirQGlY+BoEkSUQFEI617rtODF6KFTDC6bw8SDSNMZngEe0bKnBEtZfm187tU6MEdiiVKQF2rv6cSHGk9SzyTWeEYaz/epn4n9dPIGx4KRNxAlSQxaIw4TZIO3vdDpiiBPjMEEwUM7faZIwVJmACKuchXGe4/H55mXTOa+5FrX5XrzYbRRwldIxO0Bly0RVqolvUQm1E0AN6RM/oxZLWk/VqvS1aV6xi5gj9gvX+BeGHj3A=</latexit>00ff...<latexit sha1_base64="aRmAxpNTy38AbyOynkxlFsHZV6M=">AAAB7XicbVBNS8NAEJ3Ur1q/qh69LBbBU0m0aL0VvHisYD+gDWWz2bRrN9mwuxFK6H/w4kERr/4fb/4bN2kQtT4YeLw3w8w8L+ZMadv+tEorq2vrG+XNytb2zu5edf+gq0QiCe0QwYXse1hRziLa0Uxz2o8lxaHHac+bXmd+74FKxUR0p2cxdUM8jljACNZG6g65L7QaVWt23c6BlolTkBoUaI+qH0NfkCSkkSYcKzVw7Fi7KZaaEU7nlWGiaIzJFI/pwNAIh1S5aX7tHJ0YxUeBkKYijXL150SKQ6VmoWc6Q6wn6q+Xif95g0QHTTdlUZxoGpHFoiDhSAuUvY58JinRfGYIJpKZWxGZYImJNgFV8hCuMlx8v7xMumd157zeuG3UWs0ijjIcwTGcggOX0IIbaEMHCNzDIzzDiyWsJ+vVelu0lqxi5hB+wXr/AtI3j2Y=</latexit>282800ff...<latexit sha1_base64="aRmAxpNTy38AbyOynkxlFsHZV6M=">AAAB7XicbVBNS8NAEJ3Ur1q/qh69LBbBU0m0aL0VvHisYD+gDWWz2bRrN9mwuxFK6H/w4kERr/4fb/4bN2kQtT4YeLw3w8w8L+ZMadv+tEorq2vrG+XNytb2zu5edf+gq0QiCe0QwYXse1hRziLa0Uxz2o8lxaHHac+bXmd+74FKxUR0p2cxdUM8jljACNZG6g65L7QaVWt23c6BlolTkBoUaI+qH0NfkCSkkSYcKzVw7Fi7KZaaEU7nlWGiaIzJFI/pwNAIh1S5aX7tHJ0YxUeBkKYijXL150SKQ6VmoWc6Q6wn6q+Xif95g0QHTTdlUZxoGpHFoiDhSAuUvY58JinRfGYIJpKZWxGZYImJNgFV8hCuMlx8v7xMumd157zeuG3UWs0ijjIcwTGcggOX0IIbaEMHCNzDIzzDiyWsJ+vVelu0lqxi5hB+wXr/AtI3j2Y=</latexit>00ff...<latexit sha1_base64="aRmAxpNTy38AbyOynkxlFsHZV6M=">AAAB7XicbVBNS8NAEJ3Ur1q/qh69LBbBU0m0aL0VvHisYD+gDWWz2bRrN9mwuxFK6H/w4kERr/4fb/4bN2kQtT4YeLw3w8w8L+ZMadv+tEorq2vrG+XNytb2zu5edf+gq0QiCe0QwYXse1hRziLa0Uxz2o8lxaHHac+bXmd+74FKxUR0p2cxdUM8jljACNZG6g65L7QaVWt23c6BlolTkBoUaI+qH0NfkCSkkSYcKzVw7Fi7KZaaEU7nlWGiaIzJFI/pwNAIh1S5aX7tHJ0YxUeBkKYijXL150SKQ6VmoWc6Q6wn6q+Xif95g0QHTTdlUZxoGpHFoiDhSAuUvY58JinRfGYIJpKZWxGZYImJNgFV8hCuMlx8v7xMumd157zeuG3UWs0ijjIcwTGcggOX0IIbaEMHCNzDIzzDiyWsJ+vVelu0lqxi5hB+wXr/AtI3j2Y=</latexit>...<latexit sha1_base64="rBmA3EFOx2v49zT+XY21QQC0Aug=">AAAB7XicbVBNS8NAEN34WetX1aOXYBE8lUSL1lvBi8cK9gPaUDabTbt2sxt2J4US+h+8eFDEq//Hm//GTRpErQ8GHu/NMDPPjznT4Dif1srq2vrGZmmrvL2zu7dfOTjsaJkoQttEcql6PtaUM0HbwIDTXqwojnxOu/7kJvO7U6o0k+IeZjH1IjwSLGQEg5E6g2kgQQ8rVafm5LCXiVuQKirQGlY+BoEkSUQFEI617rtODF6KFTDC6bw8SDSNMZngEe0bKnBEtZfm187tU6MEdiiVKQF2rv6cSHGk9SzyTWeEYaz/epn4n9dPIGx4KRNxAlSQxaIw4TZIO3vdDpiiBPjMEEwUM7faZIwVJmACKuchXGe4/H55mXTOa+5FrX5XrzYbRRwldIxO0Bly0RVqolvUQm1E0AN6RM/oxZLWk/VqvS1aV6xi5gj9gvX+BeGHj3A=</latexit>00ff...<latexit sha1_base64="aRmAxpNTy38AbyOynkxlFsHZV6M=">AAAB7XicbVBNS8NAEJ3Ur1q/qh69LBbBU0m0aL0VvHisYD+gDWWz2bRrN9mwuxFK6H/w4kERr/4fb/4bN2kQtT4YeLw3w8w8L+ZMadv+tEorq2vrG+XNytb2zu5edf+gq0QiCe0QwYXse1hRziLa0Uxz2o8lxaHHac+bXmd+74FKxUR0p2cxdUM8jljACNZG6g65L7QaVWt23c6BlolTkBoUaI+qH0NfkCSkkSYcKzVw7Fi7KZaaEU7nlWGiaIzJFI/pwNAIh1S5aX7tHJ0YxUeBkKYijXL150SKQ6VmoWc6Q6wn6q+Xif95g0QHTTdlUZxoGpHFoiDhSAuUvY58JinRfGYIJpKZWxGZYImJNgFV8hCuMlx8v7xMumd157zeuG3UWs0ijjIcwTGcggOX0IIbaEMHCNzDIzzDiyWsJ+vVelu0lqxi5hB+wXr/AtI3j2Y=</latexit>2828ICSD_WEB/ORCC/Ag5S4Sb1_ICSD_16987.

The data structures presented in this section are thus
complementary. The AFLOW database provides both
methods of access to its materials entries.

B. Accessing and Searching the Database

1. The AFLOW REST-API

To facilitate accessibility and interoperability to the
40 TB of data generated by the high-throughput AFLOW
process [1], the backing store is exposed via the AFLOW
Data REST-API [1] in a hierarchical organization. This
direct exposure of our results not only grants the end user
a high degree of utility via direct access, but more impor-
tantly, guarantees data provenance that promotes repro-
ducibility. The hierarchy of the AFLOW Data REST-API
categorizes this abundance of information into meaning-
ful high-level classiﬁcations, allowing for exploration of
self-similar materials that are related by stoichiometric
and/or crystallographic properties. Once a selection of
materials has been determined, the full range of available
properties and procedural data are retrievable.

The organizational hierarchy of both the underlying
data store and the REST-API
is project-dependent,
as described in Section II A. Each project is equiv-
alent to one of the catalogs listed in this section,
and in the REST-API is denoted by the project lay-
ers ICSD_WEB, LIB1_WEB, LIB2_WEB, and LIB3_WEB.
Each project layer contains multiple set layers, which
correspond to speciﬁc alloy systems in the case of
LIB1_WEB, LIB2_WEB, LIB3_WEB, etc.
For instance:
aﬂowlib.duke.edu/AFLOWDATA/LIB2_RAW exposes
the set layer for binary entries, where each set cor-
responds to a diﬀerent binary alloy system, allowing
for pairwise atomic species examination. Within
each set is the entry layer, consisting of decorated
structural prototypes which provide
stoichiometric
and structural variation for each alloy system. Each
entry contains the calculated results for a particular
structure and composition,
organized as keyword-
value pairs. The calculated values of thermodynamic,
mechanical, electronic, magnetic, chemical and crystallo-
graphic properties can be directly accessed by querying
a Uniform Resource Identiﬁer
the form
<server>/<project>/<set>/<entry>/?<keyword>,
where <server> is aflowlib.duke.edu/AFLOWDATA,
<project> is the appropriate project layer, <set> is
the alloy system, <entry> is the structural prototype,
and <keyword> corresponds to the materials property of
interest. For example, the formation enthalpy per atom
of AlCu2Mg in the Heusler structure can be accessed
at
aflowlib.duke.edu/AFLOWDATA/LIB3_WEB/AlCu_
pvMg_pv/T0001.AB2C/?enthalpy_formation_atom,
where the project is LIB3_WEB, the set is the al-
the pro-
loy system AlCu_pvMg_pv,

the entry is

(URI) of

4

the

and

label

is
keyword
totype
T0001.A2BC,
enthalpy_formation_atom.
list with de-
scriptions of the REST-API keywords is provided in the
Appendix of this work, combining the original list from
Ref. 10 with the additions in the appendices of Refs. 11
and 20.

A full

the

the

has

that

part

server

The information required to construct the URI for
each entry in the database is available through the AURL
(AFLOW Uniform Resource Locator) keyword, which is
returned by default for each result in an AFLUX search.
The AURL for each entry is similar in form to the ﬁrst
part of the URI: <server>/<project>/<set>/<entry>,
form
except
aflowlib.duke.edu:AFLOWDATA. By
the
“:” with a “/”, the base URI for the corresponding entry
can be constructed. The AURL is particularly useful when
trying to retrieve data not directly accessible through
AFLUX such as calculation input or output ﬁles. For ex-
ample, the ﬁle with the relaxed structure for a particular
entry, CONTCAR.relax, can be downloaded at the URI
<server>/<project>/<set>/<entry>/CONTCAR.relax,
which can be constructed from the AURL. AURLs can also
be used to systematically access all of the entries in a
particular set.

replacing

The ability to explore related entries predicated on a
multitude of properties leads directly to novel materials
discovery and use. The AFLOW Data REST-API dissem-
inates our methods and results, without restriction, to
a global research audience in order to promote scientiﬁc
and engineering advancement.

2. AFLUX: The AFLOW search API

The AFLUX API provides programmatic search function-
ality for the AFLOW database [11]. Queries are sub-
mitted through a URI and can thus be conducted with
commonly available tools such as wget, curl, Python’s
urllib module, or a web browser. Results are re-
turned in easily parsed formats, such as JSON. This
makes AFLUX platform-independent and enables inte-
gration into computational workﬂows written in all com-
monly used languages.

AFLUX is a domain-speciﬁc language, i.e., no prior
knowledge on the underlying database structure or for-
mat is needed. It requires only a very small set of op-
erators, shown in Table I, which further reduces barriers
to using it. An AFLUX call, or a summons, is written in
the query portion of the URL:

aflow . org / API / aflux /? < summons >

The summons is composed of a matchbook and directives:

aflow . org / API / aflux /? < matchbook > , < directive >

The matchbook consists of the search criteria whereas
directives guide the form of the results.
The AFLUX matchbook. To search for and ﬁlter by
properties, they need to be added to the matchbook. The

TABLE I. List of AFLUX operators, their symbols, and
their scope. Inter-property operators can connect properties.
Intra-property operators apply to the property alone.
Operator
BLOCK
NOT
AND
OR
LOOSE
STRING
MUTE

Scope
inter- & intra-property
intra-property
inter- & intra-property
inter- & intra-property
intra-property
intra-property
intra-property

Symbol
( )
!
,
:
*
’ ’
$

following summons lists the band gap (Egap of each re-
turned entry:

aflow . org / API / aflux /? Egap

Or in short:

< matchbook > = Egap

A full list of properties can be found in Appendix A.
Multiple properties can be returned by using the AND (,)
operator. For instance,

< matchbook > = Egap , spin_atom

returns both the band gap and the magnetic moment per
atom of each material. Properties can be restricted to a
speciﬁc value using the BLOCK (parentheses) operator:

< matchbook > = species ( Cr )

This
summons will only return entries containing
Chromium (Cr). These restrictions also work for numer-
ical values. The matchbook

< matchbook > = Egap (1)

returns all entries with a band gap of exactly 1 eV.
Set logic. AFLUX supports basic logical operators:
NOT (!), AND (,), and OR (:). NOT can be used to exclude
values from the results. For example, to show entries
without Cr, the matchbook should be:

< matchbook > = species (! Cr )

The AND operator, previously used to retrieve multiple
properties, can also be employed as an intra-property
operator. The following summons will return all entries
containing Cr and O:

< matchbook > = species ( Cr , O )

To get all entries that include Cr or Mn, but not neces-
sarily both, the OR operator can be used:

5

< matchbook > = species (( Cr : Mn ) ,( O : S : Se : Te ) )

Value ranges and substrings. Exact matches may
not always be desired, especially for numeric quantities
like the band gap (Egap). The LOOSE operator (*) can
be used to build inequalities. It is a positional operator
where N ∗ returns values ≥ N and ∗N returns values
≤ N , for example:

< matchbook > = Egap (0.6*)

returns entries with band gaps of 0.6 eV and higher. This
can be combined with the AND operator to form a toler-
ance range:

< matchbook > = Egap (0.6* ,*1.5)

This returns entries with 0.6 eV ≤ Egap ≤ 1.5 eV. It is
also possible to select results that satisfy multiple ranges
by using the OR operator:

< matchbook > = Egap ((0.5* ,*0.7) :(1.4* ,*1.6) )

To get a strictly greater than 1.6 eV match condition, the
NOT operator can be combined with the LOOSE operator:

< matchbook > = Egap (!*1.6)

Using the LOOSE operator without any value will discard
null results, which are returned by default. The match-
book

< matchbook > = Egap (*)

will only return entries for which Egap has been calcu-
lated.

The LOOSE operator can also be used for substring
searches. The position of the LOOSE operator determines
where the substring ought to be located. The match-
books

< matchbook > = P e a r s o n _ s y m b o l _ r e l a x ( ’c ’*)
< matchbook > = P e a r s o n _ s y m b o l _ r e l a x (* ’F ’*)
< matchbook > = P e a r s o n _ s y m b o l _ r e l a x (* ’8 ’)

ﬁnd entries with substrings at the beginning, in the mid-
dle, and at the end, respectively. Single quotes (STRING
operator) are required for substring searches. They can
also be used to avoid collisions with AFLUX operators as
in

< matchbook > = auid ( ’ aflow :1 dcf91da07337d8d ’)

Without STRING, AFLUX would search for auid=’aflow’
OR auid=’1dcf91da07337d8d’, resulting in an empty
response.
Removing redundancies. Properties in a search re-
sult may be ubiquitous and therefore of little use. For
example, in the matchbook

< matchbook > = species ( Cr : Mn )

< matchbook > = Egap (0.6* ,*1.5) , nspecies (3)

When combined with the BLOCK operator, these logical
queries can become arbitrarily complex. The following
matchbook will return all materials with either Cr or
Mn (or both) and at least one chalcogen:

each returned material will have three species, bloating
the response with redundant information. AFLUX can
suppress the output of a match criterion via the MUTE ($)
operator:

6

< matchbook > = Egap (0.6* ,*1.5) ,

This allows a property to be matched, but not displayed.
Aliases. Complex AFLUX summons can become cum-
bersome to type. For example, to search for materials
containing a transition metal and a chalcogen, the match-
book needs to contain:

< matchbook > = species (( Sc : Ti : V :...: Hg ) ,( O : S : Se :

,→ Te ) )

Paging can also be used to sort results. Positive and
negative values for J sort results in ascending and de-
scending order, respectively. This also works for J = 0
to return all results in descending order:

< directive > = paging ( -0)

When the output format is JSON, using the paging
directive returns the results as a dictionary. The MUTE
operator can be used to format the data as an array in-
stead:

where . . . contains 25 more species. AFLUX contains pre-
deﬁned aliases to simplify this summons to:

< directive > =

< matchbook > = species ( TransitionMetals ,

,→ Chalcogens )

supported aliases can be found at

A list of all
aﬂow.org/API/aﬂux/?help(aliases).
AFLUX directives. Directives determine the size and
format of an AFLUX response and provide documenta-
tion. The currently supported directives are as follows:

• format,
• paging,
• help.

The format directive. By default, AFLUX returns
search results as miniﬁed JSON. The format directive
can be used to change the output format:

< directive > = format (

Supported formats are json, aﬂow, and html. Using json
formats the response as a human-readable JSON ﬁle. The
aﬂow format returns the data in the aﬂowlib.out format,
i.e., as key-value pairs separated by |. Finally, html dis-
plays the results as an HTML table.
The paging directive: response size and sorting.
The size of the AFLOW repository can lead to very large
responses when the search criteria are broad. This can
overwhelm systems communicating with AFLUX, espe-
cially when a web browser is used. As a result, AFLUX
limits the number of entries it returns at once. The
paging directive controls this response sizing and enu-
meration:

< directive > = paging (

This returns the J th page with K results per page. For
example, the directive:

< directive > = paging (3 ,100)

can be used to retrieve the results 201 – 300 (3rd page
with 100 entries per page). The default values are J = 1
and K = 64.
If J is larger than the number of avail-
able pages, the response will be an empty array or an
empty string for json and aﬂow format, respectively. This
can be used as a stop condition in a while-loop for high-
throughput retrieval. Setting J or K to zero results in
special behavior: J = 0 returns all results at once; K = 0
returns the number of results, regardless of the value of
J.

This is the default behavior when paging is not added
to the directive.
The help directive: AFLUX documentation. Usage
information on AFLUX can be obtained using help. The
directive:

< directive > = help ( general )

produces a general help ﬁle that serves as the documenta-
tion for AFLUX. The same output can be found when no
argument to help is given or when both the matchbook
and the directive are empty.
Information on available
properties (see Appendix A) can be:

< directive > = help ( properties )

Replacing “properties” with a list of keywords will limit
the output to the selected properties. All available help
ﬁles are listed in the following directive:

< directive > = help ( help )

3. AFLOW-OPTIMADE Integration

for

repositories,

interoperability with other databases
To facilitate
in accordance with the FAIR criteria, as well as
to broaden accessibility and ﬁndability,
the OP-
[21] has been implemented
TIMADE common API
within the AFLOW database.
OPTIMADE is a
searching materials data across
common API
a range of
including AFLOW, NO-
MAD [22], Materials Project [23], Materials Cloud [24],
and OQMD [25].
The full speciﬁcation is avail-
able at https://github.com/Materials-Consortia/
OPTIMADE/blob/master/optimade.rst.
to
AFLUX, searches are encoded within the query part of
URL, and can include logic operations such as AND, OR
and NOT; searches for diﬀerent element combinations us-
ing the operators HAS ALL, HAS ANY and HAS ONLY; sub-
string comparisons using CONTAINS, STARTS WITH and
ENDS WITH; and searches for property values within spe-
ciﬁc ranges using >, < and =. Data is returned in as a
JSON object, in a standardized format to maximize in-
teroperability.

Similar

The OPTIMADE API for AFLOW can be accessed at
aﬂow.org/API/optimade. Available queryable endpoints

7

FIG. 2. Infrastructure for responding to OPTIMADE queries. Illustration of the workﬂow for processing an OPTI-
MADE query. The query is translated to AFLUX (via the generator) for retrieving the data and the AFLOW response is
converted to OPTIMADE (via the translator) before returning to the client.

include ones for structures and calculations. The
server takes the OPTIMADE query, converts it to an
AFLUX query for the AFLOW database, then reads the
AFLUX response and translates it into the standardized
format, as illustrated in Figure 2.

AFLOW keywords can be included in Optimade
queries of the AFLOW database by appending the
preﬁx “_aﬂow_” to the front of the keyword. For
example, lead-free halide cubic perovskites with a band
gap exceeding 3 eV can be searched for in the AFLOW
database using optimade with the following query:
aﬂow.org/API/optimade/v1/structures?ﬁlter=elements
HAS ANY "F","Cl","Br","I" AND NOT elements HAS
_aﬂow_aﬂow_prototype_label_relax
"Pb"
CONTAINS AB3C_cP5_221_a_c_b.
lists
of the keywords available to use with OPTIMADE
the info end-
to query AFLOW are available at
points aﬂow.org/API/optimade/v1/info/structures and
aﬂow.org/API/optimade/v1/info/calculations.

AND

Full

4. The AFLOW Search GUI

Programmatic access to data is essential for integrating
the AFLOW data into workﬂows, but is not suitable for
casual searches or for users unfamiliar with coding or the
AFLUX language. To fulﬁll these usage requirements,
aflow.org provides a search application, which can be be

accessed at aﬂow.org/search/.
It consists of four com-
ponents: the search bar, an element ﬁlter, a properties
ﬁlter, and the search results. The search bar, at the top
of the page (see Figures 3(a) and (b)), contains a text
ﬁeld for the elements of interest, the button to conduct
a search, and the “Display” slider. The text ﬁeld also
contains buttons that can limit the search to the ICSD
catalog or extend it to the entire AFLOW database. The
“Display” slider toggles between having the element and
property ﬁlters on separate slides and to have them both
displayed on a single page, depending on the preferences
of the user.

The element ﬁlter is shown in Figure 3(a) and takes
shape of the periodic table. Elements can be added to the
query by clicking on its chemical symbol or by directly
typing them into the search bar. Groups of elements
can also be selected using the element group selector.
Hovering over each button reveals which elements belong
to each group, as demonstrated for the chalcogens in the
ﬁgure. Next to the element group selectors is a set of
logical operators. Elements or element groups can be
excluded using the NOT button or combined using AND, OR,
or XOR (exclusive or). AND is automatically added when
clicking on two elements successively. Parentheses can
be used to make these combinations arbitrarily complex.
Using the AFLUX [11] syntax, these logic statements can
also be directly entered into the search bar. However,
using the buttons can prevent syntax errors because they

aflow.orgrepositoryclientgeneratorOPTIMADE query èAFLUX queryAFLOW responsetranslatorAFLOW responseèOPTIMADE responseAFLOW serveraflow.org/API/optimade/v1/structures?QUERYincoming OPTIMADE queryoutgoing OPTIMADEresponseonly accept valid operators, e.g., by disallowing using
OR immediately after AND. In either case, the syntax is
validated before submitting a search. Lastly, the number
of species can be set with “# of species” selector. Both
ranges or an exact number are possible.

The property selectors can be displayed by clicking on
the arrow next to the “Property Filters” label or by ﬂip-
ping the “Display” slider and is shown in Figure 3. Avail-
able properties are organized into diﬀerent categories,
such as electronic, mechanical, or symmetry properties
of the relaxed structure. A property can be added to
the search query by clicking the “Add” button. The text
ﬁeld above the categories and descriptions serves as a
search ﬁeld to provide a convenient way to add a prop-
erty to the list of ﬁlters. Selections can be removed via
In
the “×” button at the right-hand side of its card.
the example shown in Figure 3(b), “Bravais lattice” and
“VRH bulk modulus (AEL)” were added to the search
query (“space group” and “Pearson symbols” are added
by default). The ﬁgure also shows that the values for
these two properties were set to restricted to retrieve
only face-centered cubic compounds with a VRH bulk
modulus of 0 – 100 GPa. Additionally, the “Bravais lat-
tice” property has “Display column” unchecked, which
will result in it not being displayed in the results table.
Since the Bravais lattice will be the same value for every
material, this will help focus the search output.

Figure 3(c) shows the results of this query. The driver
of the search is AFLUX [11] — its summons is shown
in the ﬁeld below the “Reset Search” button. The re-
sults table is divided into pages and always contains the
ENTRY and DATA columns. ENTRY consists of the empirical
formula and the AUID of the entry. The link points to
the material’s entry page, which will be discussed later.
The DATA column contains links to the RestAPI page of
the entry and its aflowlib.out and alowlib.json ﬁles.
The remaining columns contain the requested properties
for which “Display column” is switched on — column vis-
ibility can be toggled after the search as well. The tables
can be sorted by each visible column except DATA and
array properties.

The entry page contains the calculated properties and
downloadable ﬁles for the material. As for the search
page, properties are organized into categories to facili-
tate navigation. Two example sections — thermal prop-
erties and mechanical properties — are shown in Fig-
ure 3(d). Each property has its own card containing its
value and unit. The property cards also contain links
to their RestAPI entries [10]. The “Downloadable Files”
section at the bottom of the page is structured the same
way and contains various input and output ﬁles such as
VASP inputs, Bader charges, and outputs of the AFLOW
modules used for the entry. The input ﬁles and cal-
culation parameter sections fulﬁll the FAIR “Reusable”
criterion and help reproduce the results calculated by
AFLOW.

There are also two interactive applets on this page:
one for a crystal structure visualization and another one

8

for electronic structures. Figure 3(e) shows the struc-
ture viewer tool. It is available for both the conventional
and primitive cell of the material and is based on JS-
mol [26, 27]. Apart from basic structure viewing options,
it oﬀers visualizations for the symmetry elements of the
structure calculated by AFLOW-SYM [6]. The “Symme-
try” tab shows all available operations and displays their
types, symbols in the Schoenﬂies and Hermann-Mauguin
notation, whether they contain translation, their sym-
metry plane or axis in fractional coordinates, and their
rotation angles. The axes and planes, as well as the in-
version points (for inversions and rotoinversions) can be
displayed, as shown in Figure 3(e). The “Apply” buttons
start animations that visualize the selected symmetry op-
eration — a supercell of the structure can be displayed as
a visual aid. Where available, the applet can also display
Bader isosurfaces for each atom in the primitive cell for
diﬀerent cut-oﬀ values.

The other interactive applet shows the electronic struc-
ture of the material (see Figure 3(f)). Bands of both spin
channels can be traced with a mouse, showing the en-
ergy of the band at every step. Zooming in and dragging
along the k-path axis is possible as well. The lines of
the density of states (DOS) can also be traced, but the
value of the DOS is shown instead of the energy. By de-
fault, the total DOS and the projections along the orbitals
are shown, but the projected DOS of each symmetrically-
inequivalent atom is accessible using the “Switch DOS”
drop-down menu. Static high-quality images of both the
total and projected DOS are available through the button
underneath the applet.

III. THE PROTOTYPE ENCYCLOPEDIA

Beginning researchers in computational materials science
often ﬁnd it diﬃcult to determine exactly which struc-
ture is to be studied. Take as an example a study of
the behavior of the “high-temperature” (as classiﬁed in
1969 [28]) superconductor Nb3Al. Performing computa-
tions for this material requires knowledge of its crystal
structure, including both the unit cell dimensions and
the position of each atom in that cell, but novices in the
ﬁeld may have diﬃculty in ﬁnding this information in
the literature. The original Nb3Al article refers to the
β-W structure and hints that the structure is similar to
that of V3Sn and Nb3Sn. Searching further, our hypo-
thetical researcher might ﬁnd references to Cr3Si as the
“prototype” of this structure, or it might simply be re-
ferred to as a mysterious “A15” superconductor. These
sources assume that the structure is so well known that
it is not necessary to specify the atomic positions or the
space group of the structure, and might not even mention
that the crystal is cubic. This problem persists across the
literature, obfuscating the relevant crystal structure in-
formation needed to perform computational studies.

To address this challenge, the AFLOW Encyclopedia of
Crystallographic Prototypes (or Prototype Encyclopedia

9

FIG. 3. The AFLOW Search page and materials entry page.
(a) Element selection, (b) property ﬁlter, and (c)
search results of the search page. (d) Thermomechanical properties, (e) structure visualization and symmetry section, and (f )
interactive electronic structure of the entry page for spinel CdCr2S4.

dcefabfor brevity) serves as an extensive catalog of crystalline
prototypes hosted at aﬂow.org/prototype-encyclopedia/.
Based on the “Crystal Lattice Structures” website started
by researchers at the U.S. Naval Research Laboratory’s
(NRL) Complex Systems Theory Branch (now the Cen-
ter for Computational Materials Science), the Curtarolo
Group at Duke University has continued and extended
this eﬀort via the Prototype Encyclopedia. A web page
for each structure can be found online, detailing its space
group, lattice constants, and atomic (Wyckoﬀ) positions.
To assist new researchers and students, each page ex-
panded this basic information by explicitly describing
the position of each atom in the structure’s primitive
cell given the Wyckoﬀ positions of its site. It also lists
compounds with the same structure as the prototype,
and included many of the common Strukturbericht sym-
bols [29]. A simple search of the website would then
reveal the structure of Nb3Al [30].
In addition to on-
line search capabilities, users can generate geometry ﬁles
based on these structures with underlying AFLOW pro-
totyping functionality.

There are currently three parts to the AFLOW Pro-
totype Encyclopedia. Each release resulted in a major
update to the website — adding a page for each new
prototype — and is accompanied with an article in Com-
putational Materials Science. A summary of each part is
as follows:

• Part 1 [31]:

comprised of 288 structures found
on the original “Crystal Lattice Structures” page.
It also includes a discussion of topics in crystal-
lography (found both online and in the article),
namely three-dimensional systems, including crys-
lattice types, symmetry operations,
tal systems,
and Wyckoﬀ positions.

• Part 2 [32]: added 302 new structures,

includ-
ing at least one structure from each of the 230
three-dimensional space groups. Additional topics
in crystallography are discussed, including enan-
tiomorphic space groups, the Wigner-Seitz descrip-
tion of primitive cells in a periodic system, and de-
scriptions of the seventeen two-dimensional plane
groups.

• Part 3 [33]: added 510 new structures, including
the structure of each inorganic Strukturbericht pro-
totype found in the original German publications
from 1937 through 1943 and later additions to made
by Smithells [34, 35] and Pearson [36]. The article
concluded with a list of the Strukturbericht sym-
bols and the ﬁrst complete index of the inorganic
Strukturbericht prototypes.

To date, there are 1,100 structure prototypes in the Pro-
totype Encyclopedia, and it is expected to continue to
grow.
Prototype page content. Our hypothetical new user
can now easily search for the mysterious Nb3Al or “A15”
structure. Once on the Library’s home page (Fig-
ure 4(a)), the user enters “Nb3Al” in the search box,
revealing the Cr3Si (A15) prototype (Figure 4(b)). Click-

10

ing on the link reveals the page shown in Figures 4(c-l).
This page describes the structure in detail:

• The title includes the AFLOW label for the struc-
ture. The label also serves as the basis for the web
page URL (Figure 4(c)).

• A rendering of the structure, using Jmol [26, 27].
Users can rotate and zoom in on the structure, as
shown in Figure 4(d). They may also change the
window to see a supercell of the structure. Right-
clicking on the image brings up the standard Jmol
menu, and the user can even access the Jmol con-
sole for more options.

• The chemical formula of the prototype of the struc-

ture (Figure 4(e)).

• The AFLOW prototype label (Figure 4(e)).
• The Strukturbericht designation,

if any (Fig-

ure 4(e)).

• The Pearson symbol [37], showing the crystal class
and the number of atoms in the unit cell (Fig-
ure 4(e)).

• The space group symbol (Figure 4(e)).
• The format of the AFLOW prototype command
which was used the generate the structure (Fig-
ure 4(e)).

• A list of known compounds which have this struc-
ture, if any. This list is updated when similar com-
pounds are found in the literature (Figure 4(f)).
• Any comments about the structure (Figure 4(g)).
This may include links to other structures associ-
ated with the prototype or related to the current
crystal structure.

• The vectors deﬁning the primitive unit cell of the

structure (Figure 4(h)).

• The basis vectors: the position of each atom in
the cell is described in terms of the primitive vec-
tors and the Cartesian coordinates, as a function
of the lattice parameters and the Wyckoﬀ positions
(Figure 4(i)). The atoms are grouped by Wyckoﬀ
position and atomic species.

• The reference to the structure in the literature, if
any, including a link to the publication, if available
(Figure 4(j)).

• If the above reference was found in another publi-
cation or website, that reference and its associated
link are given (Figure 4(k)).

Finally, each page contains a link to the AFLOW proto-
type generator for this structure (Figure 4(l)). The user
can change the chemistry of the prototype, and enter
new lattice constants and Wyckoﬀ coordinates appropri-
ate to that structure. Once entered, this information can
be used to update the page showing the new structure.
Information about the structure can be obtained in a
variety of formats, including popular electronic structure
programs and the standard Crystallographic Information
File (CIF).
Searching structures by crystallographic descrip-
tors. The Prototype Encyclopedia website includes re-
sources which serve as a useful reference for beginning

11

The AFLOW Prototype Encyclopedia web page.
including a search bar.

(a) The main web page with a diﬀerent methods
FIG. 4.
to ﬁnd speciﬁc prototypes,
(b) An example response page when searching for “Nb3Al”. The
prototype page for Cr3Al, the “A15” prototype of Nb3Al described in the text can be found at aﬂow.org/prototype-
encyclopedia/A3B_cP8_223_c_a.html. Each page contains the following: (c) title, (d) Jmol viewer, (e) prototype desig-
nations, (f) a list of compounds/elements exhibiting this structure, (g) notable comments, (h) primitive vectors, (i) basis
vectors, (j) references, (k) additional references where the structure was found, and (l) an automatic prototype generator.

cdefghijklabaflow.org/prototype-encyclopediasearch resultsprototype entry pagestudents in crystallography, adapted from published ar-
ticles [31–33].

All periodic systems in three-dimensional space belong
to one of seven crystal systems, each with the same holo-
hedry (rotational symmetry). Diﬀerent possible trans-
lational symmetries in each class lead to the fourteen
Bravais lattices. This information is summarized under
the “Crystal Info” tab on the home page. This tab pro-
vides a brief description of each crystal class, the Bravais
lattices included in the class, and the space groups asso-
ciated with each Bravais lattice. Although each lattice
can be described by a large (inﬁnite) variety of primi-
tive vectors, AFLOW makes a standard choice for each
lattice [3], which we show here. So, for example, if a
structure is known to have a body-centered orthorhombic
lattice, clicking the “Orthorhombic” tag under “Crystal
Info” and scrolling down to “Body-Centered Orthorhom-
bic” will show:

• the standard primitive vectors of the lattice,
• an image of the primitive unit cell and the associ-

ated conventional unit cell,

• and list the nine space groups which are associated

with this lattice.

Each crystal structure is associated with a Pearson
Symbol, which summarizes the crystal system, the Bra-
vais lattice, and the number of atoms in the conventional
unit cell of the structure. The “Pearson Symbol” tab on
the home page is an index of all the crystal structures
If the body-centered orthorhombic system
by symbol.
described above has eight atoms in the conventional cell,
then the user ﬁnds and selects the “Orthorhombic Struc-
tures” link on the Pearson Symbol page. The resulting
page lists all of the orthorhombic structures currently
in the Prototype Encyclopedia. Searching for “oI8” (or-
thorhombic class “o”, body-centered lattice “I”, and eight
atoms for unit cell) leads to the three crystal structures
with this Pearson symbol found in the current database.
The “Space Group” tab indexes the structure by
space group. To continue with the above example, the
oI8 structured ferroelectric NaNO2 is in space group
Imm2 #44. This structure can be found under the Or-
thorhombic Space Group link of the Space Group page,
along with the other four structures currently in this
space group that are currently in the database.

Similarly, the Strukturbericht tab lists all of the struc-
tures which have been given a Strukturbericht designa-
tion. The NaNO2 structure described above is labeled
F 55, and can be found by clicking on the “Strukturbericht
Type F” link on this web page and scrolling down to this
label.

The “Prototype Index” tab lists every structure in the
Encyclopedia. This index can be sorted by prototype
formula, the number of atomic species, the number of
atoms in the primitive cell, the Pearson Symbol, Struk-
turbericht designation (if any), AFLOW prototype label,
space group label, space group number, and structure
name (if available). The default formula chemical order-
ing on this page is alphabetical by element, so we can ﬁnd

12

or sample structure by ordering by prototype structure
and scrolling down to NNaO2.
Generic search functionality. The prototypes within
the Encyclopedia can be searched online via diﬀerent cri-
teria. In the navigation bar, the users can type the chemi-
cal formula, mineral, or common name to search for spe-
ciﬁc materials/prototypes. This function also searches
through the “similar elements/compounds” to consider
atom decorations beyond the “prototype material” for a
given prototype. Matching prototypes are returned on
a separate page, with hyperlinks to navigate the corre-
sponding entries. By selecting “Search” in either the nav-
igation bar or the main web page, users will be redirected
to a separate webpage, enabling searches via “Name”
(same functionality as with the navigation bar), “Space
Group”, “Pearson Symbol”, and/or “Strukturbericht Des-
ignation”. To further narrow down results, users can type
in each search ﬁeld to perform compound queries.
Comparing to the Encyclopedia with AFLOW-
In the “AFLOW-XtalFinder“ tab, users
XtalFinder.
can upload structures to determine if they match to one
of the prototypes in the Encyclopedia. Leveraging rou-
tines in the AFLOW-XtalFinder module [7], this func-
tionality automatically determines i.
the input struc-
ture’s ideal prototype designation (i.e., label and degrees
of freedom), ii. structurally similar prototypes (isocon-
ﬁgurational) in the Encyclopedia, and iii.
symmetri-
cally similar prototypes (isopointal) in the Encyclope-
dia. Uploaded geometries can be in a variety of com-
mon ﬁle formats (auto-detected), namely, VASP [38–40],
Quantum ESPRESSO [41], FHI-AIMS [42], ABINIT [43],
WYCCAR [6], CIF, and ELK [44]. If an uploaded struc-
ture does not match to an existing AFLOW prototype,
a message will appear on the web page. Users are en-
couraged to ﬁll out the displayed submission form pro-
viding references/citations to the structure, any notable
comments about the structure, and user information (op-
tional). Submission of new structures will be considered
for possible inclusion into future iterations of the Proto-
type Encyclopedia.
Future outlook. The Prototype Encyclopedia contin-
ues to be expanded, with updates to the database posted
periodically. Over 600 new structures are already pre-
pared for future release. We invite users to submit new
structures for inclusion in the database. See The AFLOW
Prototype Encyclopedia: Part 3,
[33] and AFLOW-
XtalFinder at aﬂow.org/prototype-encyclopedia/xtal-
ﬁnder.html for more information.

IV. WEB APPLICATIONS

A. AFLOW Online

Autonomous computational frameworks such as AFLOW
are powerful tools with a rich diversity of features. How-
ever, the size of the codebase presents a large barrier to
entry to users who wish to use only speciﬁc functionality,

13

FIG. 5. The AFLOW Online interface. (a) The structure input section, (b) a representative feature section, (c) the
corresponding output section.

only use these functions occasionally, or are not experi-
enced with using a command line. A graphical user in-
terface, ideally available online, is more suitable for these
use cases. AFLOW Online is such a platform and im-
plements many commonly-used features of the AFLOW
software. It can be accessed at aﬂow.org/aﬂow-online/.
The interface consists of a structure input section, a
section containing select AFLOW features, and an output
section. The structure input section (Figure 5(a)) con-
tains the structure that is used to perform the AFLOW
calculation. It supports all formats that the AFLOW soft-
ware supports, which includes VASP [38–40], Quantum
ESPRESSO [41], ABINIT [43], ELK [44], FHI-AIMS [42],
and Crystallographic Information Files (CIF). In a sepa-
rate tab, a PARTCAR ﬁle for the features of AFLOW’s
Partial OCCupation module (AFLOW-POCC) can be en-
tered [5]. Magnetic moments can be added to the struc-
ture by entering the spins as a comma-separated list into
the “Magnetic moments” ﬁeld after activating the “Mag-
netic Structure” button. There are two other settings in
this section: the “Output Type” drop-down menu can
toggle between free text and JSON output (where avail-
able), and “Symmetry Tol.” sets the symmetry tolerance
to either “tight” or “loose”, as deﬁned in the AFLOW-

SYM module [6].

Below the structure input section are all AFLOW mod-
ules that are available via AFLOW Online. They are cat-
egorized based on the type of tasks they perform. Fig-
ure 5(b) shows two example categories: symmetry and
structure comparison [6, 7]. The symmetry section con-
tains all features provided by AFLOW-SYM: it calculates
space groups, Wyckoﬀ positions, Pearson symbols, proto-
type labels, symmetry groups, information on both direct
and reciprocal lattice, and equivalency between atoms.

The structure comparison section is the interface to
AFLOW-XtalFinder [7]. It provides the options to com-
pare the input structure to the AFLOW database and the
prototype encyclopedia, as well as determining unique
atom decorations, in a simple button-drop-down setup.
The application for comparing multiple structures is dif-
ferent: the button and drop down select the comparison
mode (structure and material), but the structure is not
taken from the input structure section. Instead, it has
its own section where multiple inputs can be added in
separate tabs. Magnetic moments can also be added for
each structure using the “Structures are magnetic” but-
ton nearby.

To submit a calculation, the button for the feature of

abcinterest needs to be clicked — tooltips are available to
help users select the appropriate functionality. Some op-
tions require additional input, e.g., through a drop-down
menu.
In the example shown in Figure 5(b) (“Lattice
information”), users can choose between real space, re-
ciprocal space, and a superlattice with equal decorations.
Pressing the “Submit” button will start the calculation
and the screen is scrolled to the output section where the
results will be displayed once available. Figure 5(c) shows
such a submission with the real space lattice information
calculated by AFLOW for KFeO2. Output is stored for
each submitted calculation and can be accessed by click-
ing on the corresponding tab — in this case, the prior
calculation is a conversion of the input structure to the
conventional unit cell. Output can be removed using the
“×” buttons.

AFLOW Online also provides tools to prepare ab-initio
calculations. Its structure ﬁle manipulation tools allow
conversion between diﬀerent structure ﬁle formats, coor-
dinate systems (Cartesian and fractional), and unit cell
formats (primitive, AFLOW standard primitive [4], stan-
dard conventional, Niggli, and Minkowksi). It also has
modules for calculating the dimensions of a k-point mesh
based on k-points per reciprocal atom or a maximum
distance in reciprocal space, and to output the standard
k-point path for band structure calculations based on the
AFLOW standard [3]. The format for the k-points are in
VASP’s KPOINTS ﬁle format. Disordered materials can
also be set up using AFLOW-POCC [5]. Based on an
input PARTCAR, the ideal supercell size can be deter-
mined, and the list of representative structures can be
generated in POSCAR format. The latter can be con-
verted into the desired format using the structure ﬁle
manipulation tools.

[8, 9]

the AFLOW Coordination Corrected
Finally,
is avail-
(AFLOW-CCE) module
Enthalpies
able as well.
It can calculate the corrections to the
formation enthalpy for ionic materials calculated from
density functional theory and supports the PBE, LDA,
It requires knowledge of the
and SCAN functionals.
oxidation states in the material, which AFLOW can
determine automatically. However, users also have the
option to provide these numbers directly. The deter-
mined oxidation states and the coordination numbers of
the cations can also be output separately through the
appropriate buttons.

AFLOW Online is thus a user-friendly tool that pro-
vides a variety of features implemented in AFLOW for
structural analysis, to support ab-initio calculations, and
to correct energies from density functional theory. It is
designed to be used in low-throughput settings without
installing the entire AFLOW framework and without re-
quiring a command line. Thus, it is particularly suited
for new users and for users with little or no scripting
experience.

14

B. AFLOW-CHULL Online

The AFLOW-CHULL web application (aﬂow.org/aﬂow-
chull) was developed to provide an enhanced, command-
line-free platform for the AFLOW-CHULL module and
was introduced in Ref. 45. The application oﬀers an in-
teractive visualization of binary and ternary convex hulls,
enabling the selection and investigation of entries of inter-
est. The ternary convex hull allows mouse-enabled pan
and zoom, and has been a useful instructional tool for
understanding the stability analysis and grasping higher
dimensional hulls with multi-component systems. Hulls
can be selected from a responsive periodic table inter-
face that reacts to the input based on the data avail-
ability. The number of entries is used as an indicator
of the convergence of the analysis [45–48]: green (fully
reliable, Nentries ≥ 200), orange (potentially reliable,
100 ≤ Nentries < 200), red (unreliable, Nentries < 100),
and gray (unavailable, Nentries = 0).

To accelerate loading speeds for repeated queries, a
caching layer has been added. It saves the results of each
request and loads them up automatically. The caching
layer is cleared periodically and fresh calculations em-
ploying the most up-to-date database are triggered with
a new request. Longer wait times for non-cached queries
should be expected. Once the results are retrieved, the
application loads the visualization viewport, prompting
a redirect to the URL endpoint of the selected hull, e.g.,
/hull/BeOsV. While the URL is ubiquitous, it is depen-
dent on the cached state at the time the query is submit-
ted.

Users can select and highlight points on both binary
and ternary hulls. When a point is selected, its name will
appear within the sidebar. If the selected point is above
the convex hull (meta-stable), the hull visualization will
highlight the distance to the hull (vertical line) and tie-
line/tie-surface directly below formed by stable phases
(Figures 6(a) and (b)), corresponding to the decomposi-
tion reaction in the thermodynamic limit. For example,
in Figure 6(a), the reduced decomposition reaction is

Ag

0.375

Au0.625

−137
meV/atom
−−−−−−→

1
2

Ag

0.5

Au0.5 +

1
2

Ag

0.25

Au0.75,

where the distance to the hull is the energy gained from
phase separation. If the selected point is on the convex
hull (stable), the hull visualization will show the stability
criterion [45, 49] (Figures 6(c) and (d)): the distance of
the point from the pseudo-hull constructed without it, il-
lustrated by the dotted lines and blue surfaces on binary
and ternary hulls, respectively. This distance quantiﬁes
the eﬀect of the phase on the convex hull, as well as its
susceptibility to destabilization by a new phase that has
yet to be explored. The stability criterion helped ﬁnd
two new magnetic phases, the ﬁrst ever discovered with
computation [49]. Clicking on the name of one of the
selected points on the sidebar will bring up the informa-
tion component (Figure 6(e)), providing a selection of
properties, such as the distance to the hull and stability

15

FIG. 6. Distance to the hull and stability criterion visualizations online. Example visualizations are provided of (a
and b) the distance to the hull (and corresponding decompositions) and (c and d) stability criterion for binary (AgAu) and
ternary (BeOsV) convex hulls. An inset of the original BeOsV hull is included in (b) for reference. (e) A snapshot of the
information component populated with non-ground state and ground state entries.

criterion, with a link to the aflow.org entry page (“More
Info”) oﬀering the full set of properties for the entry.

New to the stability analysis is the calculation of the
N + 1 enthalpy gain [50]: the distance to the hull for
an N -compound (binaries are 2-compounds) from the
pseudo-hull constructed with {1, . . . , N − 1}-compounds.
The descriptor was used to establish the role of disor-
der in stabilizing multi-component systems [50]. It was
shown that, with an increasing number of species, the av-
erage enthalpy gained rapidly diminishes with respect to
the conﬁgurational entropy gained. The descriptor cor-

responds to the formation enthalpy for binaries, and for
ternaries becomes the distance from the pseudo-hull con-
structed with the full set of unaries (A, B, and C) and
binaries (A-B, B-C, and A-C). An example visualization
of the analysis is provided in Figure 7, where the full As-
CoTi convex hull and its {1, 2}-pseudo-hull are shown in
Figures 7(a) and (b), respectively. A stable ternary, not
included in the pseudo-hull construction, is highlighted in
red. The pseudo-hull can be visualized from the Options
menu.

cabde16

FIG. 7. Visualization of the N + 1 enthalpy gain descriptor. The original AsCoTi convex hull is plotted in (a) and the
pseudo-hull composed only of unaries and binaries is shown in blue in (b). A stable ternary — not included in the pseudo-hull
construction — is highlighted in red.

C. AFLOW-ML Online

The AFLOW machine learning (AFLOW-ML) online ap-
plication provides a user interface to leverage machine-
learning models trained on AFLOW data, as shown in
Figure 8. The application can be accessed through a web
browser at aﬂow.org/aﬂow-ml, or through the AFLOW-
ML API described below. The application takes in struc-
tural and/or compositional information as an input and
outputs predictions, including electronic, thermomechan-
ical, and superconducting properties. This application
provides an accessible medium to retrieve machine learn-
ing predictions without the need to install specialized
software libraries or machine learning packages.

i.

Currently, AFLOW-ML supports

three diﬀerent
machine-learning models:
The property-labeled
materials fragments model [51], plmf, has been trained
using data from the aflow.org repository, and predicts
properties such as the electronic band gap, speciﬁc heat
capacities, bulk and shear moduli, Debye temperature,
and coeﬃcient of thermal expansion. It is based on struc-
tural information, using a Voronoi tesellation to identify
bonded or “connected” atoms to form a crystal graph,
and thus requires a structure ﬁle describing the material.
Atoms in the graph are labeled with their correspond-
ing elemental properties, and pieces of the graph form
the property-labeled materials fragments that form the
ii. The molar fraction
feature vector for the model.
descriptor model [52], mfd, predicts vibrational proper-
ties such as vibrational free energy and entropy, and is
based only on the chemical composition of the material.
iii. The AFLOW Superconductor model [53], asc, pre-
dicts the superconducting critical temperature of materi-
als based on their chemical composition, and accepts the
chemical formula as input.

Using the online application involves, ﬁrst, select-
ing the required model
from the three listed and
then, posting either a structure ﬁle (in the case of
the plmf and mfd models) or a chemical
formula
(for asc) into the “Input” box, as illustrated in Fig-
ure 8(a). Structures can be in any format that AFLOW
can read, including VASP POSCAR [38–40], Quantum
ESPRESSO [41], ABINIT [43], ELK [44], FHI-AIMS [42],
and Crystallographic Information Files (CIF) [54]. Ad-
ditionally, structures within the aflow.org repository can
be imported via the sidebar. The structure is then sub-
mitted and the model is run using the “RUN PREDIC-
TION” button. When the prediction is complete (which
usually takes several seconds, depending on the mate-
rial, model, and the demand on the server), a card will
be displayed containing the predicted property values, as
shown in Figure 8(b).

The AFLOW-ML API [55] oﬀers programmatic ac-
cess to the AFLOW-ML online application, and pro-
vides a simpliﬁed abstraction that facilitates leverag-
ing powerful machine-learning models. This distills
the prediction process down to its essence:
from a
structure ﬁle, return a prediction. Using the API
is a two-step process as illustrated in Figure 8(c):
ﬁrst a structure ﬁle is posted (i.e.
uploaded) to
the endpoint <server>/<model>/prediction on the
aflow.org server using standard HTTP libraries or ded-
icated programs such curl or wget, where <server>
is aflow.org/API/aflow-ml, and <model> speciﬁes the
machine-learning model to use in the prediction (cur-
rent options: plmf and mfd). For example, the full
endpoint for uploading for the plmf model would be
aflow.org/API/aflow-ml/plmf/prediction. When a
prediction is submitted, a JSON response object is
returned that includes a task id.
Second, the re-
sults of the prediction need to be retrieved from

ab17

FIG. 8. AFLOW-ML. (a) The AFLOW-ML Online web interface, with three diﬀerent models available; (b) card with
prediction results for AFLOW-ML Online; (c) the AFLOW-ML API enables programmatic access to the models.

the /prediction/result/ endpoint on the aflow.org
server by appending the task id to the end of the URL,
i.e. /prediction/result/{id}/. This endpoint moni-
tors the prediction task and responds with a JSON object
that details its status. When complete, the endpoint re-
sponds with the results of the prediction, represented as
a JSON object containing a key-value pair for each pre-
dicted property.

The AFLOW-ML API can also be accessed using the
AFLOW-ML Python client, which is available for down-
load at aﬂow.org/src/aﬂow-ml/. Upon installation, the
Python client can be accessed through the command-
line interface using the command aflow-ml. Predictions
tasks can be submitted by specifying the structure ﬁle
name and the machine-learning model. For example,
a structure in the ﬁle test.poscar can be submitted
to the plmf machine-learning model using the command

aflowml test.poscar --model=plmf, where the model
is speciﬁed using the ﬂags --model or -m. The results can
be saved to a ﬁle usng the ﬂag -s or --save, and the out-
put ﬁlename can be speciﬁed using the ﬂag --outfile
(the default ﬁlename is prediction.txt). The output
format can be set using the --output ﬂag, while the out-
put can be limited to speciﬁc predicted ﬁelds using the
--fields ﬂag. Verbose mode can be activated using the
ﬂags -v or --verbose.

V. EDUCATION AND OUTREACH

In addition to the rational data dissemination discussed
above, the AFLOW consortium is engaged in global edu-
cation and outreach activities to train the next cadre of
materials researchers.

PredictionnoyesPOSCAREndpoint <model>/predictionResponsetask object (which includes {id})Endpoint/prediction/result/{id}Responsestatusor prediction objectstatus = "SUCCESS"POSTGETabcAFLOW Schools. We oﬀer tutorials, virtual and in-
person, teaching the structure of our repositories and the
strategies to retrieve data to a diverse audience. Particu-
lar emphasis is put on the discussion of the features of the
AFLOW C++ code and python interfaces, so that they
can be easily adapted into workﬂows. These schools cover
the AFLOW code, DFT, symmetry determination, proto-
types, convex hulls, partial occupation, coordination cor-
rected enthalpies, elastic and Gibbs library extensions,
database integration, machine learning within AFLOW,
prototype crystal ﬁnder, and harmonic and quasihar-
monic phonon calculations. Videos, slides presentations,
and other educational materials are available online at
aﬂow.org/aﬂow-school/.

AFLOW Seminars. We organize biweekly free virtual
scientiﬁc seminars in the ﬁeld of materials science and
materials physics. Speakers are experts in experimen-
tal, theoretical or computational techniques, covering a
variety of sub-ﬁelds. These seminars attract a global au-
dience from over 50 countries on ﬁve continents, provid-
ing access to scientiﬁc talks that would otherwise require
considerable resources to attend. More information can
be found online at aﬂow.org/seminars/.

Appendix A: AFLOW keywords

The AFLOW database contains a large variety of mate-
rials properties that can be queried through the appro-
priate keyword using the REST-API or AFLUX. AFLOW
goes beyond data and provides rich metadata in multi-
ple ways: i. through the keywords, which contain identi-
ﬁers for the methods and modules used to compute the
property (e.g., ael_bulk_modulus_reuss describes the
bulk modulus calculated with the Reuss method using
the AFLOW-AEL module); ii. by serving detailed infor-
mation on how the data was generated with each en-
try, such as input parameters needed to reproduce re-
sults (e.g., cut-oﬀ energies and pseudopotentials), soft-
ware versions, data sources, and more; and iii. by pro-
viding metadata for the keywords themselves — includ-
ing references to the methods used — that can be ac-
cessed at aﬂow.org/API/aapi-schema/. This fulﬁlls the
“Reusable” criterion of the FAIR principles, which re-
quires describing the context of the data so that users
can assess its suitability for their particular purpose.

This appendix contains all available keywords at the
time of this publication.
It provides a description for
each keyword along with references to the methods used
to calculate the property, units (where applicable), the
data type of the property, and an example value. The
list is also available online at aﬂow.org/documentation/
where it is continuously updated.

ael_applied_pressure

18

[20]

Returns the applied pressure for the AEL calculations.

Type: number
Unit: GPa
Example: ael_applied_pressure=0.0

ael_average_external_pressure

[20]

Returns the average external pressure for the AEL cal-
culations.

Unit: GPa
Example: ael_average_external_pressure=0.079875

Type: number

ael_bulk_modulus_reuss

[11, 20]

Returns the bulk modulus calculated, using the Reuss
method, by AEL.

Unit: GPa
Example: ael_bulk_modulus_reuss=105.315

Type: number

ael_bulk_modulus_voigt

[11, 20]

Returns the bulk modulus calculated, using the Voigt
method, by AEL.

Unit: GPa
Example: ael_bulk_modulus_voigt=105.315

Type: number

ael_bulk_modulus_vrh

[11, 20]

Returns the bulk modulus calculated, using the Voigt-
Reuss-Hill average, by AEL.

Unit: GPa
Example: ael_bulk_modulus_vrh=105.315

Type: number

ael_compliance_tensor

[20]

Returns the compliance tensor calculated by AEL.

Type: numbers

Unit: GPa−1
Example: 74.2667,49.5167,49.5167,0,0,0;49.5167,74.266
7,49.5167,0,0,0;49.5167,49.5167,74.2667,0,0,0;0,0,0,27.28
33,0,0;0,0,0,0,27.2833,0;0,0,0,0,0,27.2833

ael_debye_temperature

[20]

Returns the Debye temperature calculated by AEL.

Unit: K
Example: ael_debye_temperature=163.348

Type: number

ael_elastic_anisotropy

[11, 20]

Returns the elastic anisotropy calculated by AEL.

Unit: none
Example: ael_elastic_anisotropy=0.0008165

Type: number

ael_poisson_ratio

[11, 20]

ael_stiffness_tensor

Returns the isotropic Poisson ratio calculated by AEL.

Returns the stiﬀness tensor calculated by AEL.

19

[20]

Type: number
Unit: none
Example: ael_poisson_ratio=0.216

ael_pughs_modulus_ratio

[20]

Returns the Pugh’s modulus ratio calculated by AEL.

Unit: none
Example: ael_pughs_modulus_ratio=0.332265

Type: number

ael_shear_modulus_reuss

[11, 20]

Returns the shear modulus calculated, using the Reuss
method, by AEL.

Unit: GPa
Example: ael_shear_modulus_reuss=73.787

Type: number

ael_shear_modulus_voigt

[11, 20]

Returns the shear modulus calculated, using the Voigt
method, by AEL.

Unit: GPa
Example: ael_shear_modulus_voigt=73.799

Type: number

ael_shear_modulus_vrh

[11, 20]

Returns the shear modulus calculated, using the Voigt-
Reuss-Hill average, by AEL.

Type: numbers

Unit: GPa
Example: 0.0288595,-0.0115446,-0.0115446,0,0,0;-0.011
5446,0.0288595,-0.0115446,0,0,0;-0.0115446,-0.0115446,0
.0288595,0,0,0;0,0,0,0.0366524,0,0;0,0,0,0,0.0366524,0;0,0
,0,0,0,0.0366524

ael_youngs_modulus_vrh

[20]

Returns the Young modulus calculated, using the Voigt-
Reuss-Hill average, by AEL.

Unit: GPa
Example: ael_youngs_modulus_vrh=31.6223

Type: number

aflow_prototype_label_orig

[7]

Returns the AFLOW prototype label for the unrelaxed
structure.

Type: string
Unit: none
Example: aflow_prototype_label_orig=A2BC4_cF56
_227_c_b_e

aflow_prototype_label_relax

[7]

Returns the AFLOW prototype label for the relaxed
structure.

Type: string
Unit: none
Example: aflow_prototype_label_relax=A2BC4_cF5
6_227_c_b_e

Unit: GPa
Example: ael_shear_modulus_vrh=73.793

Type: number

ael_speed_sound_average

aflow_prototype_params_list_orig

[7]

[11, 20]

Returns the AFLOW prototype parameter labels for the
unrelaxed structure.

Returns the average speed of sound calculated by AEL.

Unit: m/s
Example: ael_speed_sound_average=1540.09

Type: number

Unit: none
Example: aflow_prototype_params_list_orig=a,x3

Type: strings

ael_speed_sound_longitudinal

[11, 20]

Returns the longitudinal speed of sound calculated by
AEL.

Unit: m/s
Example: ael_speed_sound_longitudinal=2147.05

Type: number

aflow_prototype_params_list_relax

[7]

Returns the AFLOW prototype parameter labels for the
relaxed structure.

Unit: none
Example: aflow_prototype_params_list_relax=a,x3

Type: strings

ael_speed_sound_transverse

[11, 20]

Returns the transverse speed of sound calculated by
AEL.

Unit: m/s
Example: ael_speed_sound_transverse=1405.57

Type: number

aflow_prototype_params_values_orig

[7]

Returns the AFLOW prototype parameter values for the
unrelaxed structure.

Unit: none
Example: aflow_prototype_params_values_orig=10.
336,0.757

Type: numbers

aflow_prototype_params_values_relax

[7]

agl_gruneisen

20

[11, 20, 56]

Returns the AFLOW prototype parameter values for the
relaxed structure.

Unit: none
Example: aflow_prototype_params_values_relax=10
.336,0.757

Type: numbers

Returns the Grüneisen parameter calculated by AGL.

Unit: none
Example: agl_gruneisen=2.06

Type: number

agl_heat_capacity_Cp_300K

[11, 20, 56]

aflow_version

[1, 10]

Returns the heat capacity per cell, at constant pressure,
calculated by AGL at 300 K.

Returns the version number of AFLOW used to perform
the calculation.

Unit: kB/cell
Example: agl_heat_capacity_Cp_300K=5.502

Type: number

Unit: none
Example: aflow_version=aflow30641

Type: string

aflowlib_date

agl_heat_capacity_Cv_300K

[11, 20, 56]

Returns the heat capacity per cell, at constant volume,
calculated by AGL at 300 K.

[10]

Returns the date when the AFLOW post-processor gen-
erated the entry in the library.

Unit: kB/cell
Example: agl_heat_capacity_Cv_300K=4.901

Type: number

Unit: none
Example: aflowlib_date=20140204_13:10:39_GMT-5

Type: string

aflowlib_version

[10]

Returns the version of the AFLOW post-processor which
generated the entry in the library.

agl_poisson_ratio_source

[11, 20, 56]

Returns the source of the Poisson ratio used for AGL
calculations.

Type: string
Unit: none
Example: agl_poisson_ratio_source=ael_poisson_rat
io_0.350433

Type: string
Unit: none
Example: aflowlib_version=3.1.103

agl_acoustic_debye

agl_thermal_conductivity_300K

[11, 20, 56]

[11, 20, 56]

Returns the thermal conductivity calculated by AGL at
300 K.

Returns the acoustic Debye temperature calculated by
AGL.

Unit: W m−1 K−1 Type: number
Example: agl_thermal_conductivity_300K=24.41

Type: number
Unit: K
Example: agl_acoustic_debye=492

agl_bulk_modulus_isothermal_300K

[11, 20, 56]

Returns the isothermal bulk modulus calculated by AGL
at 300 K.

Unit: GPa
Example: agl_bulk_modulus_isothermal_300K=96.6

Type: number

agl_bulk_modulus_static_300K

[11, 20, 56]

Returns the static bulk modulus calculated by AGL at
300 K.

Unit: GPa
Example: agl_bulk_modulus_static_300K=99.6

Type: number

agl_thermal_expansion_300K

[11, 20, 56]

Returns the thermal expansion coeﬃcient calculated by
AGL at 300 K.

Unit: K−1
Example: agl_thermal_expansion_300K=4.997e-05

Type: number

agl_vibrational_entropy_300K_atom

[20, 56]

Returns the vibrational entropy per atom calculated by
AGL at 300 K.

Unit: meV/(K atom) Type: number
Example: agl_vibrational_entropy_300K_atom=0.45
4761

agl_vibrational_entropy_300K_cell

[20, 56]

agl_debye

[11, 20, 56]

Returns the vibrational entropy per cell calculated by
AGL at 300 K.

Returns the Debye temperature calculated by AGL.

Unit: K
Example: agl_debye=620

Type: number

Unit: meV/(K cell) Type: number
Example: agl_vibrational_entropy_300K_cell=9.095
21

agl_vibrational_free_energy_300K_atom

[20, 56]

Bravais_lattice_lattice_system_orig

21

[1, 6]

Returns the vibrational free energy per atom calculated
by AGL at 300 K.

Returns the Bravais lattice of the lattice system for the
unrelaxed structure.

Unit: meV/atom
Example: agl_vibrational_free_energy_300K_atom=
-57.1897

Type: number

Unit: none
Example: Bravais_lattice_lattice_system=cubic

Type: string

agl_vibrational_free_energy_300K_cell

[20, 56]

Returns the vibrational free energy per cell calculated by
AGL at 300 K.

Unit: meV/cell
Example: agl_vibrational_free_energy_300K_cell=-
1143.79

Type: number

auid

[10]

Returns the AFLOWLIB unique identiﬁer (AUID) for
the entry.

Unit: none
Example: auid=aflow:e9c6d914c4b8d9ca

Type: string

aurl

[10]

Returns
(AURL) for the entry.

the AFLOWLIB uniform resource locator

Type: string
Unit: none
Example: aurl=aflowlib.duke.edu:AFLOWDATA/LIB
3_RAW/Bi_dRh_pvTi_sv/T0003.ABC:LDAU2

bader_atomic_volumes

[57]

Returns the volume of each atom calculated by the Atoms
in Molecules (AIM) Bader analysis.

Unit: Å3
Example: bader_atomic_volumes=15.235,12.581,13.0
09

Type: numbers

bader_net_charges

[57]

Returns the partial charge of each atom calculated by the
Atoms in Molecules (AIM) Bader analysis.

Unit: e−
Example: bader_net_charges=0.125,0.125,-0.25

Type: numbers

Bravais_lattice_lattice_type

[1, 6]

Returns the lattice centering type for the relaxed struc-
ture.

Unit: none
Example: Bravais_lattice_lattice_type=BCC

Type: string

Bravais_lattice_lattice_type_orig

[1, 6]

Returns the lattice centering type for the unrelaxed struc-
ture.

Unit: none
Example: Bravais_lattice_lattice_type_orig=BCC

Type: string

Bravais_lattice_lattice_variation_type

[1, 6]

Returns the Bravais lattice variation of the lattice system
for the relaxed structure.

Type: string
Unit: none
Example: Bravais_lattice_lattice_variation_type=B
CC

Bravais_lattice_lattice_variation_type_orig [1,
6]

Returns the Bravais lattice variation of the lattice system
for the unrelaxed structure.

Type: string
Unit: none
Example: Bravais_lattice_lattice_variation_type_or
ig=BCC

Bravais_lattice_orig

[1, 3, 6, 10]

Returns the Bravais lattice of the crystal for the unre-
laxed structure.

Unit: none
Example: Bravais_lattice_orig=MCLC

Type: string

Bravais_lattice_relax

[1, 3, 6, 10]

Returns the Bravais lattice of the crystal for the relaxed
structure.

Unit: none
Example: Bravais_lattice_relax=MCLC

Type: string

Bravais_lattice_lattice_system

[1, 6]

Bravais_superlattice_lattice_system

[1, 6]

Returns the Bravais lattice of the lattice system for the
relaxed structure.

Returns the Bravais superlattice of the lattice system for
the relaxed structure.

Unit: none
Example: Bravais_lattice_lattice_system=cubic

Type: string

Type: string
Unit: none
Example: Bravais_superlattice_lattice_system=cubic

Bravais_superlattice_lattice_system_orig

[1, 6]

catalog

Returns the Bravais superlattice of the lattice system for
the unrelaxed structure.

Type: string
Unit: none
Example: Bravais_superlattice_lattice_system_orig
=cubic

Bravais_superlattice_lattice_type

[1, 6]

Returns the Bravais superlattice centering type for the
relaxed structure.

Unit: none
Example: Bravais_superlattice_lattice_type=BCC

Type: string

Bravais_superlattice_lattice_type_orig

[1, 6]

Returns the Bravais superlattice centering type for the
unrelaxed structure.

Type: string
Unit: none
Example: Bravais_superlattice_lattice_type_orig=B
CC

Bravais_superlattice_lattice_variation_type [1,
6]

Returns the Bravais superlattice variation of the lattice
system for the relaxed structure.

Type: string
Unit: none
Example: Bravais_superlattice_lattice_variation_typ
e=BCC

Bravais_superlattice_lattice_variation_type_orig

[1, 6]

Returns the Bravais superlattice variation of the lattice
system for the unrelaxed structure.

Type: string
Unit: none
Example: Bravais_superlattice_lattice_variation_typ
e_orig=BCC

calculation_cores

[10]

Returns the number of CPUs used by the calculation.

Unit: none
Example: calculation_cores=32

Type: number

Returns the database name for the calculation.

Unit: none
Example: catalog=icsd

Type: string

code

Returns the software name and version used to perform
the calculation.

Unit: none
Example: code=vasp.4.6.35

Type: string

composition

[10]

Returns the number of atoms per type in the simulation
cell.

Unit: none
Example: composition=2,6,6

Type: numbers

compound

[10]

Returns the chemical formula of the structure.

Unit: none
Example: compound=Co2Er6Si6

Type: string

crystal_class

Returns the crystal class for the relaxed structure.

Unit: none
Example: crystal_class=tetrahedral

Type: string

crystal_class_orig

Returns the crystal class for the unrelaxed structure.

Unit: none
Example: crystal_class_orig=tetrahedral

Type: string

crystal_family

Returns the crystal family for the relaxed structure.

Unit: none
Example: crystal_family=cubic

Type: string

22

[1]

[10]

[6]

[6]

[6]

[6]

calculation_memory

[10]

crystal_family_orig

Returns the maximum RAM used by the calculation.

Returns the crystal family for the unrelaxed structure.

Type: number
Unit: MB
Example: calculation_memory=32

Unit: none
Example: crystal_family_orig=cubic

Type: string

calculation_time

[10]

crystal_system

[6]

Returns the total time taken by the calculation.

Returns the crystal system for the relaxed structure.

Unit: seconds
Example: calculation_time=32

Type: number

Unit: none
Example: crystal_system=cubic

Type: string

crystal_system_orig

[6]

eentropy_cell

23

[10]

Returns the crystal system for the unrelaxed structure.

Unit: none
Example: crystal_system_orig=cubic

Type: string

Returns the electronic entropy per cell used to converge
the calculation.

Unit: eV/cell
Example: eentropy_cell=0.0011

Type: number

data_api

Returns the REST API version for the entry.

Unit: none
Example: data_api=aapi1.0

Type: string

[10]

Egap

[1, 3, 10, 16]

Returns the electronic band gap.

Unit: eV
Example: Egap=2.5

Type: number

data_source

Returns the data source for the entry.

Unit: none
Example: data_source=aflowlib

Type: string

[10]

Egap_type

[1, 3, 10, 16]

Returns the electronic band gap type.

Unit: none
Example: Egap_type=insulator_direct

Type: string

delta_electronic_energy_convergence

[11, 16]

energy_atom

Returns the change in total energy from the last step of
the self-consistent ﬁeld (SCF) iteration.

Unit: eV
Example: delta_electronic_energy_convergence=6.09
588e-05

Type: number

delta_electronic_energy_threshold

[11, 16]

Returns the threshold for the self-consistent ﬁeld (SCF)
convergence.

Unit: eV
Example: delta_electronic_energy_threshold=0.0001

Type: number

density

Returns the mass density of the unit cell.

Unit: g/cm3
Example: density=7.76665

Type: number

dft_type

[10, 16]

Returns the level of theory used in the calculation,
i.e., pseudopotential type, exchange-correlation func-
tional used, and use of GW.

Unit: none
Example: dft_type=PAW_PBE

Type: strings

Returns the total ab-initio energy per atom.

Unit: eV/atom
Example: energy_atom=-82.1656

Type: number

energy_cell

Returns the total ab-initio energy per cell.

Unit: eV/cell
Example: energy_cell=-82.1656

Type: number

[1, 10]

[1, 10]

energy_cutoff

[10, 16]

Return the plane-wave energy cut-oﬀ used for the calcu-
lation.

[10]

Unit: eV
Example: energy_cutoff=384.1,384.1,384.1

Type: number

enthalpy_atom

Returns the enthalpy per atom.

Unit: eV/atom
Type: number
Example: enthalpy_atom=-82.1656

enthalpy_cell

Returns the enthalpy per cell.

Unit: eV/cell
Example: enthalpy_cell=-82.1656

Type: number

[10]

[10]

eentropy_atom

[10]

Returns the electronic entropy per atom used to converge
the calculation.

Unit: eV/atom
Example: eentropy_atom=0.0011

Type: number

enthalpy_formation_atom

[1, 10]

Returns the formation enthalpy per atom.

Unit: eV/atom
Example: enthalpy_formation_atom=-33.1587

Type: number

enthalpy_formation_cell

Returns the formation enthalpy per cell.

Unit: eV/cell
Example: enthalpy_formation_cell=-33.1587

Type: number

entropic_temperature

Returns the entropic temperature.

Unit: K
Example: entropic_temperature=1072.1

Type: number

files

[1, 10]

kpoints_relax

24

[3, 10, 11, 16]

Returns the k-point grid used for the structural relax-
ation calculation.

Unit: none
Example: kpoints_relax=14,14,14

Type: numbers

[47, 58]

kpoints_static

[3, 10, 11, 16]

Returns the k-point grid used for the static calculation.

Unit: none
Example: kpoints_static=14,14,14

Type: numbers

[10]

Returns the input and output ﬁles used in the simulation.

Unit: none
Example: files=Bi_dRh_pv.33.cif,Bi_dRh_pv.33.png
,CONTCAR.relax,CONTCAR.relax1,

Type: strings

lattice_system_orig

[1, 3, 6, 10]

Returns the lattice system for the unrelaxed structure.

Unit: none
Example: lattice_system_orig=rhombohedral

Type: string

forces

[10]

Returns the forces on the atoms for the relaxed structure.

lattice_system_relax

[1, 3, 6, 10]

Unit: eV/Å
Example: forces=0,-0.023928,0.000197;0,0.023928,-0.00
0197;...

Type: numbers

Returns the lattice system for the relaxed structure.

Unit: none
Example: lattice_system_relax=rhombohedral

Type: string

geometry

[1, 3, 6, 10]

Returns the lattice parameters of the relaxed simulation
cell.

Unit: none
Example: geometry=18.82,18.82,18.82,32.41,32.41,32.4
1

Type: numbers

lattice_variation_orig

[1, 3, 6, 10]

Returns the lattice variation for the unrelaxed structure.

Unit: none
Example: lattice_variation_orig=rhombohedral

Type: string

geometry_orig

lattice_variation_relax

[1, 3, 6, 10]

[1, 3, 6, 10]

Returns the lattice variation for the relaxed structure.

Returns the lattice parameters of the unrelaxed simula-
tion cell.

Unit: none
Example: geometry_orig=18.82,18.82,18.82,32.41,32.4
1,32.41

Type: numbers

kpoints_bands_nkpts

[3, 10, 11, 16]

Returns the number of points, between the high-
symmetry k-points, used for the band structure calcu-
lation.

Type: number
Unit: none
Example: kpoints_bands_nkpts=20

kpoints_bands_path

[3, 10, 11, 16]

Unit: none
Example: lattice_variation_relax=rhombohedral

Type: string

ldau_j

[10, 16]

Returns the J parameters of the DFT+U calculation.

Unit: eV
Example: ldau_j=0,0,0

Type: numbers

ldau_l

Returns the orbitals of the DFT+U calculation.

Unit: none
Example: ldau_l=2,0,0

Type: numbers

[10, 16]

[10, 16]

Returns the high-symmetry k-point path used for the
band structure calculation.

ldau_type

Unit: none
Example: kpoints_bands_path=G-X-W-K-G-L-U-W-
K-K-U-X

Type: strings

Returns the type of DFT+U calculation performed.

Unit: none
Example: ldau_type=2

Type: number

ldau_u

[10, 16]

nspecies

25

[1, 10]

Returns the U parameters of the DFT+U calculation.

Returns the number of unique species in the structure.

Unit: eV
Example: ldau_u=5,0,0

Type: numbers

Unit: none
Example: nspecies=3

Type: number

loop

[10]

Pearson_symbol_orig

[1, 3, 6, 10]

Returns information about the type of post-processing
that was performed.

Unit: none
Example: loop=thermodynamics,bands,magnetic

Type: strings

Returns the Pearson symbol for the unrelaxed structure.

Unit: none
Example: Pearson_symbol_orig=mS32

Type: string

natoms

Returns the number of atoms in the simulation cell.

Unit: none
Example: natoms=12

Type: number

[10]

Pearson_symbol_relax

[1, 3, 6, 10]

Returns the Pearson symbol for the relaxed structure.

Unit: none
Example: Pearson_symbol_relax=mS32

Type: string

[10]

Pearson_symbol_superlattice

[1, 6]

nbondxx

Returns the nearest neighbors distances for the relaxed
structure.

Unit: Å
Example: nbondxx=1.2599,1.0911,1.0911,1.7818,1.259
9,1.7818

Type: numbers

node_CPU_Cores

[10]

Returns information about the number of CPUs on the
node/cluster where the calculation was performed.

Unit: none
Example: node_CPU_Cores=12

Type: number

node_CPU_MHz

[10]

Returns information about the speed of CPUs on the
node/cluster where the calculation was performed.

Unit: MHz
Example: node_CPU_MHz=12

Type: number

node_CPU_Model

[10]

Returns information about the model of CPUs on the
node/cluster where the calculation was performed.

Type: string
Unit: none
Example: node_CPU_Model=12

Returns the Pearson symbol of the superlattice for the
relaxed structure.

Unit: none
Example: Pearson_symbol_superlattice=cI52

Type: string

Pearson_symbol_superlattice_orig

[1, 6]

Returns the Pearson symbol of the superlattice for the
unrelaxed structure.

Unit: none
Example: Pearson_symbol_superlattice_orig=cI52

Type: string

point_group_Hermann_Mauguin

[1, 6]

Returns the point group, in Hermann-Mauguin notation,
for the relaxed structure.

Unit: none
Example: point_group_Hermann_Mauguin=-43m

Type: string

point_group_Hermann_Mauguin_orig

[1, 6]

Returns the point group, in Hermann-Mauguin notation,
for the unrelaxed structure.

Type: string
Unit: none
Example: point_group_Hermann_Mauguin_orig=-43
m

node_RAM_GB

[10]

point_group_orbifold

[1, 6]

Returns information about the RAM on the node/cluster
where the calculation was performed.

Returns the point group orbifold for the relaxed struc-
ture.

Unit: Gb
Example: node_RAM_GB=12

Type: number

Unit: none
Example: point_group_orbifold=*332

Type: string

point_group_orbifold_orig

[1, 6]

point_group_type_orig

26

[1, 6]

Returns the point group orbifold for the unrelaxed struc-
ture.

Unit: none
Example: point_group_orbifold_orig=*332

Type: string

Returns the point group type for the unrelaxed structure.

Type: string
Unit: none
Example: point_group_type_orig=non-centrosymmet
ric,non-enantiomorphic,non-polar

point_group_order

[1, 6]

positions_cartesian

[10]

Returns the point group order for the relaxed structure.

Unit: none
Example: point_group_order=24

Type: number

point_group_order_orig

[1, 6]

Returns the point group order for the unrelaxed struc-
ture.

Unit: none
Example: point_group_order_orig=24

Type: number

point_group_Schoenflies

[1, 6]

Returns the point group, in Schoenﬂies notation, for the
relaxed structure.

Unit: none
Example: point_group_Schoenflies=T_d

Type: string

point_group_Schoenflies_orig

[1, 6]

Returns the point group, in Schoenﬂies notation, for the
unrelaxed structure.

Unit: none
Example: point_group_Schoenflies_orig=T_d

Type: string

point_group_structure

[1, 6]

Returns the point group structure for the relaxed struc-
ture.

Unit: none
Example: point_group_structure=symmetric

Type: string

point_group_structure_orig

[1, 6]

Returns the point group structure for the unrelaxed
structure.

Returns the Cartesian coordinates of the atoms for the
relaxed structure.

Unit: Å
Example: positions_cartesian=0,0,0;18.18438,0,2.8502
7;...

Type: numbers

positions_fractional

[10]

Returns the fractional coordinates of the atoms for the
relaxed structure.

Unit: none
Example: positions_fractional=0,0,0;0.25,0.25,0.25;...

Type: numbers

pressure

[10]

Returns the hydrostatic pressure on the simulation cell
for the unrelaxed structure.

Unit: kbar
Example: pressure=10.0

Type: number

pressure_residual

[11]

Returns the hydrostatic pressure, corrected by the Pulay
stress, on the simulation cell for the relaxed structure.

Unit: kbar
Example: pressure_residual=10.0

Type: number

prototype

[1, 10]

Returns the AFLOW prototype for the unrelaxed struc-
ture.

Type: string
Unit: none
Example: prototype=T0001.A2BC

Pulay_stress

[11, 16]

Returns the Pulay stress correcton for the calculation.

Unit: none
Example: point_group_structure_orig=symmetric

Type: string

Unit: kbar
Example: pulay_stress=10.0

Type: number

point_group_type

[1, 6]

PV_atom

[10]

Returns the point group type for the relaxed structure.

Type: string
Unit: none
Example: point_group_type=non-centrosymmetric,n
on-enantiomorphic,non-polar

Returns the pressure multiplied by volume per atom for
the relaxed structure.

Unit: eV/atom
Example: PV_atom=12.13

Type: number

PV_cell

[10]

reciprocal_volume_cell_orig

27

[1, 3, 6]

Returns the pressure multiplied by volume per atom for
the relaxed structure.

Returns the volume of the reciprocal cell for the unre-
laxed structure.

Unit: eV/cell
Example: PV_cell=12.13

Type: number

Unit: Å−3
Example: reciprocal_volume_cell_orig=0.4733

Type: number

reciprocal_geometry

[1, 3, 6]

Returns the reciprocal lattice parameters of the relaxed
simulation cell.

Unit: none
Example: reciprocal_geometry_relax=0.8747,0.9747,0
.8747,60.0,60.0,60.0

Type: numbers

reciprocal_geometry_orig

[1, 3, 6]

Returns the reciprocal lattice parameters of the unre-
laxed simulation cell.

Unit: none
Example: reciprocal_geometry_orig=0.8747,0.9747,0.
8747,60.0,60.0,60.0

Type: numbers

scintillation_attenuation_length

[10, 59, 60]

Returns the scintillation attenuation length.

Unit: cm
Example: scintillation_attenuation_length=2.21895

Type: number

sg

[1, 6, 10]

Returns the space groups for the structure, before the
ﬁrst relaxation step (unrelaxed), after the ﬁrst relaxation
step and after the last relaxation step (relaxed), using a
loose tolerance.

Unit: none
Example: sg=Fm-3m#225,Fm-3m#225,Fm-3m#225

Type: strings

reciprocal_lattice_type

[1, 3, 6]

sg2

[1, 6, 10]

Returns the reciprocal lattice centering type for the re-
laxed structure.

Unit: none
Example: reciprocal_lattice_type=FCC

Type: string

reciprocal_lattice_type_orig

Returns the space groups for the structure, before the
ﬁrst relaxation step (unrelaxed), after the ﬁrst relaxation
step and after the last relaxation step (relaxed), using a
tight (default) tolerance.

[1, 3, 6]

Unit: none
Example: sg2=Fm-3m#225,Fm-3m#225,Fm-3m#225

Type: strings

Returns the reciprocal lattice centering type for the un-
relaxed structure.

Unit: none
Example: reciprocal_lattice_type_orig=FCC

Type: string

reciprocal_lattice_variation_type

[1, 3, 6]

Returns the reciprocal lattice centering type variation for
the relaxed structure.

Unit: none
Example: reciprocal_lattice_variation_type=FCC

Type: string

reciprocal_lattice_variation_type_orig

[1, 3, 6]

Returns the reciprocal lattice centering type variation for
the unrelaxed structure.

Type: string
Unit: none
Example: reciprocal_lattice_variation_type_orig=F
CC

reciprocal_volume_cell

[1, 3, 6]

Returns the volume of the reciprocal cell for the relaxed
structure.

spacegroup_orig

[1, 6, 10]

Returns the space group for the unrelaxed structure.

Unit: none
Example: spacegroup_orig=225

Type: number

spacegroup_relax

[1, 6, 10]

Returns the space group number for the relaxed struc-
ture.

Unit: none
Example: spacegroup_relax=225

Type: number

species

Returns the unique species.

Unit: none
Example: species=Y,Zn,Zr

Type: strings

species_pp

Returns the pseudopotential of the species.

[1, 10]

[10, 16]

Unit: Å−3
Example: reciprocal_volume_cell=0.4733

Type: number

Unit: none
Example: species_pp=Y,Zn,Zr

Type: strings

species_pp_version

[10]

valence_cell_std

28

[10]

Returns the pseudopotential version of the species.

Unit: none
Example: species_pp_version=Y,Zn,Zr

Type: strings

Returns the sum of the valence electrons, based on the
outermost shell(s), of the atoms in the simulation cell.

Unit: none
Example: valence_cell_std=22

Type: number

species_pp_ZVAL

[16, 57]

Returns the number of valence electrons of the species.

volume_atom

[1, 10]

Unit: e−
Example: species_pp_ZVAL=3

Type: numbers

spin_atom

Returns the volume per atom of the simulation cell for
the relaxed structure.

[1, 10]

Unit: Å3/atom
Example: volume_atom=100.984

Type: number

Returns the magnetization of the simulation cell per
atom.

volume_cell

[1, 10]

Unit: µB/atom
Example: spin_atom=2.16419

Type: number

Returns the volume of the simulation cell for the relaxed
structure.

[1, 10]

Unit: Å3
Example: volume_cell=100.984

Type: number

spin_cell

Returns the magnetization of the simulation cell.

Unit: µB/cell
Example: spin_cell=2.16419

Type: number

spinD

[1, 10]

Returns the magnetic moment on each atom.

Unit: µB
Example: spinD=0.236,0.236,-0.023,1.005

Type: numbers

spinF

Wyckoff_letters

[6]

Returns the Wyckoﬀ letters of each site for the relaxed
structure.

Unit: none
Example: Wyckoff_letters=g,c,a

Type: strings

Wyckoff_letters_orig

[6]

[1, 10]

Returns the Wyckoﬀ letters of each site for the unrelaxed
structure.

Returns the magnetization of the simulation cell at the
Fermi energy.

Unit: µB/cell
Example: spinF=0.410879

Type: number

stoichiometry

[10]

Returns the normalized composition of the structure.

Type: numbers
Unit: none
Example: stoichiometry=0.5,0.25,0.25

Unit: none
Example: Wyckoff_letters_orig=g,c,a

Type: strings

Wyckoff_multiplicities

[6]

Returns the Wyckoﬀ multiplicity of each site for the re-
laxed structure.

Unit: none
Example: Wyckoff_multiplicities=24,8,2

Type: numbers

stress_tensor

[11]

Wyckoff_multiplicities_orig

[6]

Returns the stress tensor for the relaxed structure.

Unit: kbar
Example: stress_tensor=-0.96,-0,-0,-0,-0.96,-0,-0,-0,-0.
96

Type: numbers

Returns the Wyckoﬀ multiplicity of each site for the un-
relaxed structure.

Unit: none
Example: Wyckoff_multiplicities_orig=24,8,2

Type: strings

valence_cell_iupac

[10]

Wyckoff_site_symmetries

[6]

Returns the sum of the valence electrons, based on IU-
PAC standards, of the atoms in the simulation cell.

Returns the Wyckoﬀ symmetry of each site for the re-
laxed structure.

Unit: none
Example: valence_cell_iupac=22

Type: number

Unit: none
Example: Wyckoff_site_symmetries=m..,.-3.,m-3.

Type: strings

Wyckoff_site_symmetries_orig

[6]

Returns the Wyckoﬀ symmetry of each site for the unre-
laxed structure.

Unit: none
Example: Wyckoff_site_symmetries_orig=m..,.-3.,m-
3.

Type: strings

29

Acknowledgments. The authors thank Yoav Lederer, Ohad
Levy, Eric Gossett, Cheryl Li, Harry Wang, Mana Rose,
William Schmitt, and Stuart Ki for fruitful discussions. Re-
search sponsored by DOD-ONR All the authors acknowl-
edge support by DOD-ONR (N00014-21-1-2132, N00014-20-

1-2525, N00014-20-1-2299) and by NSF (NRT-HDR DGE-
2022040). C.T. acknowledges support from NSF (DMR-
2219788). R.F. acknowledges support from the Alexander
von Humboldt foundation under the Feodor Lynen research
fellowship.

30

[1] S. Curtarolo, W. Setyawan,

S. Wang,

J. Xue,
K. Yang, R. H. Taylor, L. J. Nelson, G. L. W. Hart,
S. Sanvito, M. Buongiorno Nardelli, N. Mingo, and
O. Levy, AFLOWLIB.ORG: A distributed materials
properties repository from high-throughput ab initio cal-
culations, Comput. Mater. Sci. 58, 227–235 (2012), doi:
10.1016/j.commatsci.2012.02.002.

[2] M. D. Wilkinson, M. Dumontier, IJ. J. Aalbersberg,
G. Appleton, M. Axton, A. Baak, N. Blomberg, J.-W.
Boiten, L. B. da Silva Santos, P. E. Bourne, J. Bouw-
man, A. J. Brookes, T. Clark, M. Crosas, I. Dillo, O. Du-
mon, S. Edmunds, C. T. Evelo, R. Finkers, A. Gonzalez-
Beltran, A. J. G. Gray, P. Groth, C. Goble, J. S.
Grethe, J. Heringa, P. A. C. ’t Hoen, R. Hooft, T. Kuhn,
R. Kok, J. Kok, S. J. Lusher, M. E. Martone, A. Mons,
A. L. Packer, B. Persson, P. Rocca-Serra, M. Roos,
R. van Schaik, S.-A. Sansone, E. Schultes, T. Sengstag,
T. Slater, G. Strawn, M. A. Swertz, M. Thompson, J. van
der Lei, E. van Mulligen, J. Velterop, A. Waagmeester,
P. Wittenburg, K. Wolstencroft, J. Zhao, and B. Mons,
The FAIR Guiding Principles for scientiﬁc data man-
agement and stewardship, Sci. Data 3, 160018 (2016),
doi:10.1038/sdata.2016.18.

[3] W. Setyawan and S. Curtarolo, High-throughput elec-
tronic band structure calculations: Challenges and
tools, Comput. Mater. Sci. 49, 299–312 (2010), doi:
10.1016/j.commatsci.2010.05.010.

[4] S. Curtarolo, W. Setyawan, G. L. W. Hart, M. Jahnátek,
R. V. Chepulskii, R. H. Taylor, S. Wang, J. Xue, K. Yang,
O. Levy, M. J. Mehl, H. T. Stokes, D. O. Demchenko, and
D. Morgan, AFLOW: An automatic framework for high-
throughput materials discovery, Comput. Mater. Sci. 58,
218–226 (2012), doi:10.1016/j.commatsci.2012.02.005.
[5] K. Yang, C. Oses, and S. Curtarolo, Modeling Oﬀ-
Stoichiometry Materials with a High-Throughput Ab-
Initio Approach, Chem. Mater. 28, 6484–6492 (2016),
doi:10.1021/acs.chemmater.6b01449.

[6] D. Hicks, C. Oses, E. Gossett, G. Gomez, R. H. Tay-
lor, C. Toher, M. J. Mehl, O. Levy, and S. Cur-
tarolo, AFLOW-SYM: platform for the complete, au-
tomatic and self-consistent symmetry analysis of crys-
tals, Acta Crystallogr. Sect. A 74, 184–203 (2018), doi:
10.1107/S2053273318003066.

[7] D. Hicks, C. Toher, D. C. Ford, F. Rose, C. De Santo,
O. Levy, M. J. Mehl, and S. Curtarolo, AFLOW-
XtalFinder:
a reliable choice to identify crystalline
prototypes, npj Comput. Mater. 7, 30 (2021), doi:
10.1038/s41524-020-00483-4.

[8] R. Friedrich, D. Usanmaz, C. Oses, A. Supka, M. Fornari,
M. Buongiorno Nardelli, C. Toher, and S. Curtarolo, Co-
ordination corrected ab initio formation enthalpies, npj
Comput. Mater. 5, 59 (2019), doi:10.1038/s41524-019-
0192-1.

[9] R. Friedrich, M. Esters, C. Oses, S. Ki, M. J. Bren-

ner, D. Hicks, M. J. Mehl, C. Toher, and S. Cur-
tarolo, Automated coordination corrected enthalpies with
AFLOW-CCE, Phys. Rev. Materials 5, 0438031 (2021),
doi:10.1103/PhysRevMaterials.5.043803.

[10] R. H. Taylor, F. Rose, C. Toher, O. Levy, K. Yang,
M. Buongiorno Nardelli,
and S. Curtarolo, A
RESTful API for exchanging materials data in the
AFLOWLIB.org consortium, Comput. Mater. Sci. 93,
178–192 (2014), doi:10.1016/j.commatsci.2014.05.014.
[11] F. Rose, C. Toher, E. Gossett, C. Oses, M. Buongiorno
Nardelli, M. Fornari, and S. Curtarolo, AFLUX: The
LUX materials search API for the AFLOW data repos-
itories, Comput. Mater. Sci. 137, 362–370 (2017), doi:
10.1016/j.commatsci.2017.04.036.

[12] G. Bergerhoﬀ, R. Hundt, R. Sievers, and I. D.
Brown, The inorganic crystal
structure data base,
J. Chem. Inf. Comput. Sci. 23, 66–69 (1983), doi:
10.1021/ci00038a003.

[13] V. L. Karen and M. Hellenbrandt, Inorganic crystal
structure database: new developments, Acta Cryst. A58,
c367 (2002).

[14] A.

I. Liechtenstein, V.
I. Anisimov, and J. Za-
inter-
anen, Density-functional
theory and strong
actions: Orbital ordering in Mott-Hubbard insula-
tors, Phys. Rev. B 52, R5467–R5470 (1995), doi:
10.1103/PhysRevB.52.R5467.

[15] S. L. Dudarev, G. A. Botton, S. Y. Savrasov, C. J.
Humphreys, and A. P. Sutton, Electron-energy-loss spec-
tra and the structural stability of nickel oxide: An
LSDA+U study, Phys. Rev. B 57, 1505–1509 (1998), doi:
10.1103/PhysRevB.57.1505.

[16] C. E. Calderon, J. J. Plata, C. Toher, C. Oses, O. Levy,
M. Fornari, A. Natan, M. J. Mehl, G. L. W. Hart,
M. Buongiorno Nardelli, and S. Curtarolo, The AFLOW
standard for high-throughput materials science calcula-
tions, Comput. Mater. Sci. 108 Part A, 233–238 (2015),
doi:10.1016/j.commatsci.2015.07.019.

[17] E. Perim, D. Lee, Y. Liu, C. Toher, P. Gong, Y. Li,
W. N. Simmons, O. Levy, J. J. Vlassak, J. Schroers,
and S. Curtarolo, Spectral descriptors for bulk metal-
lic glasses based on the thermodynamics of competing
crystalline phases, Nat. Commun. 7, 12315 (2016), doi:
10.1038/ncomms12315.

[18] Y. Lederer, C. Toher, K. S. Vecchio, and S. Curtarolo,
The search for high entropy alloys: A high-throughput
ab-initio approach, Acta Mater. 159, 364–383 (2018), doi:
10.1016/j.actamat.2018.07.042.

[19] J. P. Perdew, K. Burke, and M. Ernzerhof, Gen-
Simple,
doi:

eralized Gradient Approximation Made
Phys. Rev. Lett.
10.1103/PhysRevLett.77.3865.

3865–3868

(1996),

77,

[20] C. Toher, C. Oses, J. J. Plata, D. Hicks, F. Rose,
O. Levy, M. de Jong, M. Asta, M. Fornari, M. Buon-
giorno Nardelli, and S. Curtarolo, Combining the

AFLOW GIBBS and elastic libraries to eﬃciently
and robustly screen thermomechanical properties of
solids, Phys. Rev. Materials 1, 015401 (2017), doi:
10.1103/PhysRevMaterials.1.015401.

[21] C. W. Andersen, R. Armiento, E. Blokhin, G. J. Conduit,
S. Dwaraknath, M. L. Evans, A. Fekete, A. Gopaku-
mar, S. Gražulis, A. Merkys, F. Mohamed, C. Oses,
G. Pizzi, G.-M. Rignanese, M. Scheidgen, L. Talirz,
C. Toher, D. Winston, R. Aversa, K. Choudhary, P. Col-
inet, S. Curtarolo, D. Di Stefano, C. Draxl, S. Er, M. Es-
ters, M. Fornari, M. Giantomassi, M. Govoni, G. Hautier,
V. Hegde, M. K. Horton, P. Huck, G. Huhs, J. Hum-
melshøj, A. Kariryaa, B. Kozinsky, S. Kumbhar, M. Liu,
N. Marzari, A. J. Morris, A. Mostoﬁ, K. A. Persson,
G. Petretto, T. Purcell, F. Ricci, F. Rose, M. Scheﬄer,
D. Speckhard, M. Uhrin, A. Vaitkus, P. Villars, D. Waro-
quiers, C. Wolverton, M. Wu, and X. Yang, OPTIMADE:
an API for exchanging materials data, Sci. Data 8, 217
(2021), doi:10.1038/s41597-021-00974-z.

[22] C. Draxl and M. Scheﬄer, NOMAD: The FAIR concept
for big data-driven materials science, MRS Bull. 43, 676–
682 (2018), doi:10.1557/mrs.2018.208.

[23] A. Jain, S. P. Ong, G. Hautier, W. Chen, W. D.
Richards, S. Dacek, S. Cholia, D. Gunter, D. Skinner,
G. Ceder, and K. A. Persson, Commentary: The Materi-
als Project: A materials genome approach to accelerating
materials innovation, APL Mater. 1, 011002 (2013), doi:
10.1063/1.4812323.

[24] L. Talirz, S. Kumbhar, E. Passaro, A. V. Yakutovich,
V. Granata, F. Gargiulo, M. Borelli, M. Uhrin, S. P.
Huber, S. Zoupanos, C. S. Adorf, C. W. Andersen,
O. Schütt, C. A. Pignedoli, D. Passerone, J. VandeVon-
dele, T. C. Schulthess, B. Smit, G. Pizzi, and N. Marzari,
Materials Cloud, a platform for open computational sci-
ence, Sci. Data 7, 299 (2020), doi:10.1038/s41597-020-
00637-5.

[25] J. E. Saal, S. Kirklin, M. Aykol, B. Meredig, and
C. Wolverton, Materials Design and Discovery with
High-Throughput Density Functional Theory: The Open
Quantum Materials Database (OQMD), JOM 65, 1501–
1509 (2013), doi:10.1007/s11837-013-0755-4.

[26] Jmol: an open-source Java viewer for chemical structures

in 3D, http://www.jmol.org/.

[27] R. M. Hanson, Jmol — a paradigm shift in crystallo-
graphic visualization, J. Appl. Crystallogr. 43, 1250–1260
(2010), doi:10.1107/S0021889810030256.

[28] R. H. Willens, T. H. Geballe, A. C. Gossard, J. P. Maita,
A. Menth, G. W. Hull Jr., and R. R. Soden, Superconduc-
tivity of Nb3Al, Solid State Commun. 7, 837–841 (1969),
doi:10.1016/0038-1098(69)90773-X.

[29] P. P. Ewald and C. Hermann, eds., Strukturbericht 1913-
1928 (Akademische Verlagsgesellschaft M. B. H., Leipzig,
1931).

archived
be

[30] An
can
http://web.archive.org/web/20101222152521/cst-
www.nrl.navy.mil/lattice.

of
the Wayback Machine

ﬁnal web

copy
via

found

the

page
at

[31] M. J. Mehl, D. Hicks, C. Toher, O. Levy, R. M.
Hanson, G. L. W. Hart, and S. Curtarolo, The
AFLOW Library of Crystallographic Prototypes: Part
1, Comput. Mater. Sci. 136, S1–S828 (2017), doi:
10.1016/j.commatsci.2017.01.017.

31

AFLOW Library of Crystallographic Prototypes: Part
2, Comput. Mater. Sci. 161, S1–S1011 (2019), doi:
10.1016/j.commatsci.2018.10.043.

[33] D. Hicks, M. J. Mehl, M. Esters, C. Oses, O. Levy,
G. L. W. Hart, C. Toher, and S. Curtarolo, The
AFLOW Library of Crystallographic Prototypes: Part
3, Comput. Mater. Sci. 199, 110450 (2021), doi:
10.1016/j.commatsci.2021.110450.

[34] C. J. Smithells, Metals Reference Book (Butterworths

Scientiﬁc, London, 1949).

[35] C. J. Smithells, Metals Reference Book (Butterworths

Scientiﬁc, London, 1955), second edn.

[36] W. B. Pearson, A Handbook of Lattice Spacings and
Structures of Metals and Alloys, no. N.R.C. No. 4303
in International Series of Monographs on Metal Physics
and Physical Metallurgy (Pergamon Press, Oxford, Lon-
don, Edinburgh, New York, Paris, Frankfort, 1958), 1964
reprint with corrections edn.

[37] W. B. Pearson, A Handbook of Lattice Spacings and
Structures of Metals and Alloys, Volume 2, International
Series of Monographs on Metal Physics and Physical
Metallurgy, vol. 8 (Pergamon Press, Oxford, London,
Edinburgh, New York, Toronto, Sydney, Paris, Braun-
schweig, 1967). N.R.C. No. 8752.

[38] G. Kresse and J. Hafner, Norm-Conserving and Ultrasoft
Pseudopotentials for First-Row and Transition-Elements,
J. Phys.: Condens. Matter 6, 8245–8257 (1994), doi:
10.1088/0953-8984/6/40/015.

[39] G. Kresse and J. Furthmüller, Eﬃciency of ab-initio to-
tal energy calculations for metals and semiconductors us-
ing a plane-wave basis set, Comput. Mater. Sci. 6, 15–50
(1996), doi:10.1016/0927-0256(96)00008-0.

[40] G. Kresse and J. Furthmüller, Eﬃcient iterative schemes
for ab initio total-energy calculations using a plane-wave
basis set, Phys. Rev. B 54, 11169–11186 (1996), doi:
10.1103/PhysRevB.54.11169.

[41] P. Giannozzi, S. Baroni, N. Bonini, M. Calandra, R. Car,
C. Cavazzoni, D. Ceresoli, G. L. Chiarotti, M. Cococ-
cioni, I. Dabo, A. Dal Corso, S. de Gironcoli, S. Fabris,
G. Fratesi, R. Gebauer, U. Gerstmann, C. Gougoussis,
A. Kokalj, M. Lazzeri, L. Martin-Samos, N. Marzari,
F. Mauri, R. Mazzarello, S. Paolini, A. Pasquarello,
L. Paulatto, C. Sbraccia, S. Scandolo, G. Sclauzero, A. P.
Seitsonen, A. Smogunov, P. Umari, and R. M. Wentz-
covitch, QUANTUM ESPRESSO: a modular and open-
source software project for quantum simulations of mate-
rials, J. Phys.: Condens. Matter 21, 395502 (2009), doi:
10.1088/0953-8984/21/39/395502.

[42] V. Blum, R. Gehrke, F. Hanke, P. Havu, V. Havu,
X. Ren, K. Reuter, and M. Scheﬄer, Ab initio molec-
ular simulations with numeric atom-centered orbitals,
Comput. Phys. Commun. 180, 2175–2196 (2009), doi:
10.1016/j.cpc.2009.06.022.

[43] X. Gonze, J. M. Beuken, R. Caracas, F. Detraux,
M. Fuchs, G. M. Rignanese, L. Sindic, M. Verstraete,
G. Zerah, F. Jollet, M. Torrent, A. Roy, M. Mikami,
P. Ghosez, J. Y. Raty, and D. C. Allan, First-principles
computation of material properties: the ABINIT software
project, Comput. Mater. Sci. 25, 478–492 (2002), doi:
10.1016/S0927-0256(02)00325-7.

[44] The ELK Code: http://elk.sourceforge.net/ (2020). (ac-

cessed January 6, 2021).

[32] D. Hicks, M. J. Mehl, E. Gossett, C. Toher, O. Levy,
R. M. Hanson, G. L. W. Hart, and S. Curtarolo, The

[45] C. Oses, E. Gossett, D. Hicks, F. Rose, M. J.
Mehl, E. Perim, I. Takeuchi, S. Sanvito, M. Schef-

ﬂer, Y. Lederer, O. Levy, C. Toher, and S. Curtarolo,
AFLOW-CHULL: Cloud-Oriented Platform for Au-
tonomous Phase Stability Analysis, J. Chem. Inf. Model.
58, 2477–2490 (2018), doi:10.1021/acs.jcim.8b00393.
[46] S. Curtarolo, D. Morgan, and G. Ceder, Accuracy of ab
initio methods in predicting the crystal structures of met-
als: A review of 80 binary alloys, Calphad 29, 163–211
(2005), doi:10.1016/j.calphad.2005.01.002.

[47] G. L. W. Hart, S. Curtarolo, T. B. Massalski,
and O. Levy, Comprehensive Search for New Phases
and Compounds in Binary Alloy Systems Based on
Platinum-Group Metals, Using a Computational First-
Principles Approach, Phys. Rev. X 3, 041035 (2013), doi:
10.1103/PhysRevX.3.041035.

[48] R. H. Taylor, S. Curtarolo, and G. L. W. Hart,
experimental discovery of magnesium
doi:

Guiding
alloys, Phys. Rev. B 84,
10.1103/PhysRevB.84.084101.

(2011),

084101

the

[49] S. Sanvito, C. Oses, J. Xue, A. Tiwari, M. Žic, T. Archer,
P. Tozman, M. Venkatesan, J. M. D. Coey, and S. Cur-
tarolo, Accelerated discovery of new magnets in the
Heusler alloy family, Sci. Adv. 3, e1602241 (2017), doi:
10.1126/sciadv.1602241.

[50] C. Toher, C. Oses, D. Hicks, and S. Curtarolo, Unavoid-
able disorder and entropy in multi-component systems,
npj Comput. Mater. 5, 69 (2019), doi:10.1038/s41524-
019-0206-z.

[51] O. Isayev, C. Oses, C. Toher, E. Gossett, S. Curtarolo,
and A. Tropsha, Universal fragment descriptors for pre-
dicting properties of inorganic crystals, Nat. Commun. 8,
15679 (2017), doi:10.1038/ncomms15679.

[52] F. Legrain, J. Carrete, A. van Roekeghem, S. Cur-
tarolo, and N. Mingo, How Chemical Composition Alone
Can Predict Vibrational Free Energies and Entropies
of Solids, Chem. Mater. 29, 6220–6227 (2017), doi:
10.1021/acs.chemmater.7b00789.

[53] V. Stanev, C. Oses, A. G. Kusne, E. Rodriguez,

32

J. Paglione, S. Curtarolo, and I. Takeuchi, Ma-
chine learning modeling of superconducting critical tem-
perature, npj Comput. Mater. 4, 29 (2018), doi:
10.1038/s41524-018-0085-8.

[54] S. R. Hall, F. H. Allen, and I. D. Brown, The Crystallo-
graphic Information File (CIF): a New Standard Archive
File for Crystallography, Acta Crystallogr. Sect. A 47,
655–685 (1991), doi:10.1107/S010876739101067X.
[55] E. Gossett, C. Toher, C. Oses, O. Isayev, F. Legrain,
F. Rose, E. Zurek, J. Carrete, N. Mingo, A. Trop-
sha, and S. Curtarolo, AFLOW-ML: A RESTful API
for machine-learning predictions of materials proper-
ties, Comput. Mater. Sci. 152, 134–145 (2018), doi:
10.1016/j.commatsci.2018.03.075.

[56] C. Toher, J. J. Plata, O. Levy, M. de Jong, M. Asta,
M. Buongiorno Nardelli, and S. Curtarolo, High-
throughput computational screening of thermal conductiv-
ity, Debye temperature, and Grüneisen parameter using
a quasiharmonic Debye model, Phys. Rev. B 90, 174107
(2014), doi:10.1103/PhysRevB.90.174107.

[57] W. Chai, C. Oses, R. Anselm, D. Hicks, C. Toher, S. Cur-
tarolo, and G. Henkelman, ABADER: Self-Consistent
Charge Density Analysis for Molecules and Crystals, in
preparation (2022).

[58] S. Curtarolo, G. L. W. Hart, M. Buongiorno Nardelli,
N. Mingo, S. Sanvito, and O. Levy, The high-throughput
highway to computational materials design, Nat. Mater.
12, 191–201 (2013), doi:10.1038/nmat3568.

[59] W. Setyawan, R. M. Gaumé, S. Lam, R. S. Feigelson, and
S. Curtarolo, High-Throughput Combinatorial Database
of Electronic Band Structures for Inorganic Scintilla-
tor Materials, ACS Comb. Sci. 13, 382–390 (2011), doi:
10.1021/co200012w.

[60] W. Setyawan, R. M. Gaumé, R. S. Feigelson, and S. Cur-
tarolo, Comparative Study of Nonproportionality and
Electronic Band Structures Features in Scintillator Ma-
terials, IEEE Trans. Nucl. Sci. 56, 2989–2996 (2009), doi:
10.1109/TNS.2009.2027019.

