2
2
0
2

n
u
J

7
1

]
E
S
.
s
c
[

1
v
8
6
7
8
0
.
6
0
2
2
:
v
i
X
r
a

C-Pack of IPAs: A C90 Program Benchmark of
Introductory Programming Assignments

Pedro Orvalho
pmorvalho@tecnico.ulisboa.pt
INESC-ID/IST - U. Lisboa
Lisboa, Portugal

Mikoláš Janota
mikolas.janota@cvut.cz
Czech Technical University in Prague
Prague, Czech Republic

Vasco Manquinho
vasco.manquinho@tecnico.ulisboa.pt
INESC-ID/IST - U. Lisboa
Lisboa, Portugal

ABSTRACT
Due to the vast number of students enrolled in Massive Open On-
line Courses (MOOCs), there has been an increasing number of
automated program repair techniques focused on introductory pro-
gramming assignments (IPAs). Such techniques take advantage
of previous correct student implementations in order to provide
automated, comprehensive, and personalized feedback to students.
This paper presents C-Pack-IPAs, a publicly available benchmark
of students’ programs submitted for 25 different IPAs. C-Pack-IPAs
contains semantically correct, semantically incorrect, and syntac-
tically incorrect programs plus a test suite for each IPA. Hence,
C-Pack-IPAs can be used to help evaluate the development of novel
semantic, as well as syntactic, automated program repair frame-
works focused on providing feedback to novice programmers.

CCS CONCEPTS
• Applied computing → Computer-assisted instruction; • The-
ory of computation → Program semantics; Program analy-
sis; Program reasoning; • Computing methodologies → Ma-
chine learning.

KEYWORDS
dataset, benchmark, Introductory Programming Assignments, Pro-
gramming Exercises, Automated Program Repair, Semantic Pro-
gram Repair, Syntactic Program Repair, Program Clustering, Pro-
gram Analysis, Programming Education, Computer-Aided Educa-
tion, MOOCs, C, C90, IPAs

1 INTRODUCTION
Nowadays, thousands of students enroll every year in programming-
oriented Massive Open Online Courses (MOOCs) [3]. On top of
that, due to the current pandemic situation, even small program-
ming courses are being taught online. Providing feedback to novice
students in introductory programming assignments (IPAs) in these
courses requires substantial effort and time by the faculty. Hence,
there is an increasing need for systems that provide automated,
comprehensive, and personalized feedback to students in incorrect
programming assignments. Therefore, automated program repair
has become crucial to provide automatic personalized feedback to
each novice programmer [15].

Typically, a programming assignment in Computer Science courses
follows a pattern: the lecturer defines a computational problem; stu-
dents program a solution; each solution is submitted and checked
for correctness using pre-defined tests. If the student’s tentative
solution does not pass a given test, it is deemed incorrect without
helpful feedback that would help the student. If a student program
does not pass a portion of the pre-defined tests, she usually asks the

Table 1: High-level Description of C-Pack-IPAs Benchmark.

Labs

#IPAs

#Correct
Submissions

Lab02
Lab03
Lab04
Total

10
7
8
25

316
145
192
653

#Semantically
Incorrect
Submissions
161
255
97
513

#Syntactically
Incorrect
Submissions
50
29
19
98

lecturer for feedback on why her code does not have the expected
behavior. If her program does not pass at least one pre-defined
test, that means her implementation is semantically incorrect. Un-
fortunately, it is not feasible to have personalized feedback from
a lecturer in many cases due to the growing number of student
enrolments. Therefore, automated semantic program repair frame-
works [2, 3, 5, 6, 9–12, 14, 16] are ideal for providing hints on how
students should repair their incorrect programming assignments.
This paper presents C-Pack-IPAs, a C90 Program benchmark
of introductory programming assignments (IPAs). C-Pack-IPAs is
a collection of students’ programs submitted for 25 different IPAs
and the test suite used for each IPA. The set of IPAs is described
in Section 3. For each IPA, C-Pack-IPAs has a set of semantically
correct and incorrect implementations evaluated with the IPA’s
test suite. C-Pack-IPAs also contains a set of syntactically faulty
programs submitted for each IPA. This paper aims to introduce
C-Pack-IPAs that contains semantically and syntactically incorrect
students’ implementations. Thus, C-Pack-IPAs can help evaluate
novel semantic, as well as syntactic, automated program repair
frameworks whose goal is to assist novice programmers.

2 C-PACK-IPAS
C-Pack-IPAs is a pack of student programs developed during an
introductory programming course in the C programming language.
These programs were collected over three distinct practical classes
at Instituto Superior Técnico for 25 different IPAs. The set of submis-
sions was split into three groups: semantically correct, semantically
incorrect, and syntactically incorrect submissions. The students’
submissions that satisfied the set of input-output test cases for
each IPA were considered semantically correct. The submissions
that failed at least one input-output test but successfully compiled
were considered semantically incorrect implementations. Lastly,
the students’ submissions that did not successfully compile were
considered syntactically incorrect implementations.

Table 1 presents the number of submissions gathered. For 25
different programming exercises, this dataset contains 653 different
correct programs, 513 semantically incorrect submissions, and 98

 
 
 
 
 
 
Table 2: The number of semantically correct student submissions received for 25 different programming assignments over
three lab classes for two different years.

P. Orvalho, M. Janota, and V. Manquinho

Year 1

Year 2

Lab02
Lab03
Lab04

Lab02
Lab03
Lab04

E1 E2 E3 E4 E5 E6 E7 E8 E9 E10 Total
25
238
20
113
22
152

25
17
22

25
16
19

24
-
-

23
17
19

23
-
-

23
7
22

25
16
18

23
-
13

22
20
17

E1 E2 E3 E4 E5 E6 E7 E8 E9 E10 Total
13
6
6

78
32
40

8
4
4

8
5
7

7
6
4

6
-
3

8
7
4

7
-
-

6
-
-

8
3
6

7
1
6

syntactically incorrect implementations. C-Pack-IPAs is publicly
available at GitHub: https://github.com/pmorvalho/C-Pack-IPAs.
Table 2 presents the number of correct submissions for each one
of the 25 different programming exercises over three lab classes
for two different years. In addition, Table 3 presents the number of
semantically incorrect submissions, and Table 4 shows the distribu-
tion of syntactically incorrect submissions for each IPA.

Furthermore, C-Pack-IPAs only contains students’ submissions
that gave their permission to use their programs for academic pur-
poses. Each student’s identification was anonymized for privacy
reasons, and all the comments were removed from their programs.
A unique identifier was assigned to each student. These identifiers
are consistent among different IPAs and different years of the pro-
gramming course. For example, if the identifier stu_3 appears in
more than one programming exercise, it corresponds to the same
student. If some students take the course more than once, they are
always assigned to the same anonymized identifier.

3 IPAS DESCRIPTION
The set of IPAs corresponds to three different lab classes of the
introductory programming course to the C programming language
at Instituto Superior Técnico. Each lab class focuses on a differ-
ent topic of the C programming language. In Lab02, the students
learn how to program with integers, floats, IO operations (mainly
printf and scanf), conditionals (if-statements), and simple loops
(for and while-loops). In Lab03, the students learn how to program
with loops, nested loops, auxiliary functions, and chars. Finally, in
Lab04, the students learn how to program with integer arrays and
strings. The textual description of each programming assignment
can be found in the public GitHub repository, and the input/output
tests used to evaluate semantically the set of students’ submissions.
Moreover, there is also a reference implementation for each IPA
in the public git repository that can be used by program repair
frameworks that only accept a single reference implementation to
repair incorrect programs.

4 RELATED WORK
Over the last few years, several program repair tools [3–5, 14]
have exploited diverse correct implementations from previously en-
rolled students for each IPA to repair new incorrect student submis-
sions. On the one hand, some syntactic program repair tools [4, 15]
have been developed to help students with compilation errors. On
the other hand, semantic program repair has also been used to

help repair students’ programs semantically [2, 3, 5, 8, 14]. How-
ever, the number of publicly available benchmarks to help develop
and evaluate new program repair tools is significantly small. The
ITSP dataset [16] has been used by other automated software re-
pair tools [1, 16] that use only one reference implementation. This
dataset is also a collection of C programs although it is well balanced,
i.e., the number of correct submissions is closer to the number of
incorrect submissions in this dataset. The IntroClass dataset [7] is
a collection of C programs submitted to six different IPAs and has
the information about the number of defects in each program and
the total number of unique defects for each IPA. Codeflaws [13] is
a dataset of programs submitted for programming competitions on
the Codeforces website. More program benchmarks are available
for other languages than the C programming language. For exam-
ple, the dataset of Python programs used to evaluate Refactory [5]
is also publicly available. More datasets for automated program
repair applied to industry software are also available 1.

5 CONCLUSION
C-Pack-IPAs, a C90 Program benchmark of introductory program-
ming assignments (IPAs), is a publicly available benchmark of
students’ submissions for 25 different programming assignments.
C-Pack-IPAs has a set of semantically correct and incorrect im-
plementations as well as syntactically faulty programs submitted
for each IPA. To the best of our knowledge, C-Pack-IPAs is one
of the few, if not the only, benchmark of IPAs written in the C
programming language that contains both semantically and syn-
tactically incorrect students’ implementations and diverse correct
implementations for the same IPA. Thus, C-Pack-IPAs can help
evaluate novel semantic, as well as syntactic, automated program
repair frameworks whose goal is to assist novice programmers in
introductory programming courses.

ACKNOWLEDGMENTS
We would like to thank all the students who gave permission to
use their programs for our research. Secondly, we would like to
thank Instituto Superior Técnico. This research was supported
by Fundação para a Ciência e Tecnologia (FCT) through grant
SFRH/BD/07724/2020 and projects UIDB/50021/2020 and PTDC/CCI-
COM/32378/2017. Any opinions, findings, conclusions, or recom-
mendations expressed in this material are those of the author and
do not necessarily reflect the views of FCT.

1https://program-repair.org/benchmarks.html

C-Pack-IPAs: A C90 Program Benchmark of IPAs

P. Orvalho, M. Janota, and V. Manquinho

Table 3: The number of semantically incorrect student submissions received for 25 different programming assignments over
three lab classes for two different years.

Year 1

Year 2

Lab02
Lab03
Lab04

Lab02
Lab03
Lab04

E1 E2 E3 E4 E5 E6 E7 E8 E9 E10 Total
31
107
32
195
5
67

10
35
11

12
67
3

7
20
5

5
17
5

3
16
10

9
-
10

21
-
-

6
8
18

3
-
-

E1 E2 E3 E4 E5 E6 E7 E8 E9 E10 Total
28
14
6

60
70
30

2
10
1

7
16
2

1
11
1

4
-
-

2
9
9

4
6
1

3
-
-

7
4
4

2
-
6

Table 4: The number of syntactically incorrect student submissions received for 25 different programming assignments over
three lab classes for two different years.

Year 1

Year 2

Lab02
Lab03
Lab04

Lab02
Lab03
Lab04

E1 E2 E3 E4 E5 E6 E7 E8 E9 E10 Total
6
6
2

29
23
12

1
-
-

0
4
1

2
-
-

4
2
1

1
1
1

4
2
5

2
-
2

4
1
0

5
7
0

E1 E2 E3 E4 E5 E6 E7 E8 E9 E10 Total
6
1
0

21
6
7

0
-
-

3
0
0

0
-
-

0
2
4

1
1
1

5
1
1

6
1
1

0
-
0

0
0
0

H. C. Cheng, and Klaus Pohl, editors, 35th International Conference on Software
Engineering, ICSE ’13, pages 772–781. IEEE Computer Society, 2013.

[12] Reudismam Rolim, Gustavo Soares, Loris D’Antoni, Oleksandr Polozov, Sumit
Gulwani, Rohit Gheyi, Ryo Suzuki, and Björn Hartmann. Learning syntactic
program transformations from examples. In Sebastián Uchitel, Alessandro Orso,
and Martin P. Robillard, editors, ICSE 2017, pages 404–415. IEEE / ACM, 2017.

[13] Shin Hwei Tan, Jooyong Yi, Yulis, Sergey Mechtaev, and Abhik Roychoudhury.
Codeflaws: a programming competition benchmark for evaluating automated
program repair tools.
In Sebastián Uchitel, Alessandro Orso, and Martin P.
Robillard, editors, Proceedings of the 39th International Conference on Software
Engineering, ICSE 2017, Buenos Aires, Argentina, May 20-28, 2017 - Companion
Volume, pages 180–182. IEEE Computer Society, 2017.

[14] Ke Wang, Rishabh Singh, and Zhendong Su. Search, align, and repair: data-driven
feedback generation for introductory programming exercises. In PLDI 2018, pages
481–495. ACM, 2018.

[15] Michihiro Yasunaga and Percy Liang. Graph-based, self-supervised program
repair from diagnostic feedback. In ICML 2020, volume 119 of Proceedings of
Machine Learning Research, pages 10799–10808. PMLR, 2020.

[16] Jooyong Yi, Umair Z. Ahmed, Amey Karkare, Shin Hwei Tan, and Abhik Roy-
choudhury. A feasibility study of using automated program repair for intro-
ductory programming assignments. In Eric Bodden, Wilhelm Schäfer, Arie van
Deursen, and Andrea Zisman, editors, ESEC/FSE 2017, pages 740–751. ACM, 2017.

REFERENCES
[1] Umair Z. Ahmed, Zhiyu Fan, Jooyong Yi, Omar I. Al-Bataineh, and Abhik
Roychoudhury. Verifix: Verified repair of programming assignments. CoRR,
abs/2106.16199, 2021.

[2] Umair Z. Ahmed, Zhiyu Fan, Jooyong Yi, Omar I. Al-Bataineh, and Abhik Roy-
choudhury. Verifix: Verified repair of programming assignments. ACM Trans.
Softw. Eng. Methodol., jan 2022.

[3] Sumit Gulwani, Ivan Radicek, and Florian Zuleger. Automated clustering and
program repair for introductory programming assignments. In PLDI 2018, pages
465–480. ACM, 2018.

[4] Rahul Gupta, Soham Pal, Aditya Kanade, and Shirish K. Shevade. Deepfix: Fixing
common C language errors by deep learning. In Satinder P. Singh and Shaul
Markovitch, editors, AAAI 2017, pages 1345–1351. AAAI Press, 2017.

[5] Yang Hu, Umair Z. Ahmed, Sergey Mechtaev, Ben Leong, and Abhik Roychoud-
hury. Re-factoring based program repair applied to programming assignments.
In 34th IEEE/ACM International Conference on Automated Software Engineering,
ASE 2019, San Diego, CA, USA, November 11-15, 2019, pages 388–398. IEEE, 2019.
[6] Yalin Ke, Kathryn T. Stolee, Claire Le Goues, and Yuriy Brun. Repairing programs
with semantic code search (T). In Myra B. Cohen, Lars Grunske, and Michael
Whalen, editors, 30th IEEE/ACM International Conference on Automated Software
Engineering, ASE 2015, pages 295–306. IEEE Computer Society, 2015.

[7] Claire Le Goues, Neal Holtschulte, Edward K Smith, Yuriy Brun, Premkumar
Devanbu, Stephanie Forrest, and Westley Weimer. The manybugs and introclass
benchmarks for automated repair of c programs. IEEE Transactions on Software
Engineering, 41(12):1236–1256, 2015.

[8] Xiao Liu, Shuai Wang, Pei Wang, and Dinghao Wu. Automatic grading of
programming assignments: an approach based on formal semantics. In Sarah
Beecham and Daniela E. Damian, editors, Proceedings of the 41st International
Conference on Software Engineering: Software Engineering Education and Training,
ICSE (SEET) 2019, pages 126–137. IEEE / ACM, 2019.

[9] Sergey Mechtaev, Jooyong Yi, and Abhik Roychoudhury. Directfix: Looking for
simple program repairs. In Antonia Bertolino, Gerardo Canfora, and Sebastian G.
Elbaum, editors, 37th IEEE/ACM International Conference on Software Engineering,
ICSE 2015, pages 448–458. IEEE Computer Society, 2015.

[10] Sergey Mechtaev, Jooyong Yi, and Abhik Roychoudhury. Angelix: scalable
multiline program patch synthesis via symbolic analysis. In Laura K. Dillon,
Willem Visser, and Laurie A. Williams, editors, ICSE 2016, pages 691–701. ACM,
2016.

[11] Hoang Duong Thien Nguyen, Dawei Qi, Abhik Roychoudhury, and Satish Chan-
In David Notkin, Betty

dra. Semfix: program repair via semantic analysis.

