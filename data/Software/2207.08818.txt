2
2
0
2

l
u
J

8
1

]
E
S
.
s
c
[

1
v
8
1
8
8
0
.
7
0
2
2
:
v
i
X
r
a

SeLoC-ML: Semantic Low-Code Engineering for
Machine Learning Applications in Industrial IoT

Haoyu Ren1,3 , Kirill Dorofeev1 , Darko Anicic1 , Youssef Hammad1,3 ,
Roland Eckl2, and Thomas A. Runkler1,3

1 Siemens AG, Otto-Hahn-Ring 6, 81739 Munich, Germany
{haoyu.ren, kirill.dorofeev, darko.anicic, youssef.hammad,
thomas.runkler}@siemens.com
2 Siemens AG, Siemenspromenade 1, 91058 Erlangen, Germany
eckl.roland@siemens.com
3 Technical University of Munich, Arcisstr. 21, 80333 Munich, Germany

Abstract. Internet of Things (IoT) is transforming the industry by
bridging the gap between Information Technology (IT) and Operational
Technology (OT). Machines are being integrated with connected sen-
sors and managed by intelligent analytics applications, accelerating dig-
ital transformation and business operations. Bringing Machine Learning
(ML) to industrial devices is an advancement aiming to promote the con-
vergence of IT and OT. However, developing an ML application in Indus-
trial IoT (IIoT) presents various challenges, including hardware hetero-
geneity, non-standardized representations of ML models, device and ML
model compatibility issues, and slow application development. Successful
deployment in this area requires a deep understanding of hardware, algo-
rithms, software tools, and applications. Therefore, this paper presents
a framework called Semantic Low-Code Engineering for ML Applica-
tions (SeLoC-ML), built on a low-code platform to support the rapid
development of ML applications in IIoT by leveraging Semantic Web
technologies. SeLoC-ML enables non-experts to easily model, discover,
reuse, and matchmake ML models and devices at scale. The project
code can be automatically generated for deployment on hardware based
on the matching results. Developers can beneﬁt from semantic applica-
tion templates, called recipes, to fast prototype end-user applications.
The evaluations conﬁrm an engineering eﬀort reduction by a factor of at
least three compared to traditional approaches on an industrial ML clas-
siﬁcation case study, showing the eﬃciency and usefulness of SeLoC-ML.
We share the code and welcome any contributions4.

Keywords: Machine Learning · Neural Network · Industrial Internet of
Things · Semantic Web · Knowledge Graph · Low-Code Engineering.

1

Introduction

One of the biggest challenges in industrial digitization is to bridge the gap be-
tween Operational Technology (OT) and Information Technology (IT). OT is

4 https://github.com/Haoyu-R/SeLoC-ML

 
 
 
 
 
 
2

H. Ren et al.

centered on a physical world composed of machines, manufacturing equipment,
and other hardware, where a massive amount of data is generated. However, IT
is focused on the contemporary digital world, using data centers, servers, and
smart applications to consume the data. These two domains have traditionally
functioned in isolation [6]. The rise of Industry 4.0, along with increasing con-
nectivity between humans, machines, and sensors, is driving the convergence of
IT and OT, shifting data-supported decision-making from the individual to the
system level and enhancing factory eﬃciency. However, IT/OT convergence is
diﬃcult to achieve. One example is the deployment of Machine Learning (ML)
on industrial devices, where ML presents the IT world and industrial devices
present the OT world.

ML is one of the fast-growing technical advancements. Applying ML, specif-
ically Neural Network (NN), in the industry by leveraging sensor and system
data can provide reliable insights into the factory and accelerate smart manu-
facturing. Standard ML applications transfer massive ﬁeld data to the cloud and
centrally process the data against NN models. Concerns have been raised because
this data transfer causes numerous issues, such as high energy consumption and
latency, privacy leaks, bandwidth congestion.

With the Internet of Things (IoT) growth, factories will be equipped with
increasingly powerful, connected, and intelligent devices. This plays a key role
in the continuing industrial evolution. Oﬄoading ML intelligence from the cloud
to the Industrial IoT (IIoT) devices enables performing ML tasks near data
sources and reducing reliance on data transfer, which addresses the latency and
security concerns. However, applying on-device ML in the industry where mass
deployment happens is still challenging.

IIoT devices are specialized to fulﬁll diﬀerent tasks. They come in all shapes
and sizes, diﬀer in terms of onboard sensors, available memory and storage ca-
pacities, and have various runtime platforms. In the context of on-device ML,
they rely on NN models to interpret sensor data, make predictions about their
environments, and take intelligent actions locally. NN models are developed with
various structures, e.g., diﬀerent combinations of layers and individualized pre-
and postprocessing blocks. Additionally, most trained NN models are distributed
as binary ﬁles without a clear and standardized description of their usages. The
diversiﬁcation and proliferation of hardware (IIoT devices) and software (NN
models) widen the gap between each other.

Many compatibility issues must be carefully investigated to run ML properly
on the devices, such as sensor input format, memory constraints, and sensor
availability. Speciﬁcally, we want to answer two sets of questions:

1. How do we achieve the co-management of IIoT devices and NN models?
(a) How do we determine which devices may execute a speciﬁc NN?
(b) Given a device, how do we determine which trained NN model is compat-
ible with it? Does the model meet requirements for accuracy, memory,
and latency?

2. How do we accelerate the engineering and deployment of ML applications in
IIoT? How might cross-domain collaborations be facilitated and the solution
be made accessible to all?

Semantic Low-Code Engineering for ML Applications in Industrial IoT

3

We present a framework called Semantic Low-Code Engineering for ML
Applications (SeLoC-ML), a system for managing and deploying ML on devices
in IIoT at scale. Here, we propose to use formalized semantic models to describe
heterogeneous IIoT devices and NN models, respectively. With ontology schemas,
we can model the knowledge about devices and NN models semantically in a
uniﬁed language and centrally store it in a Knowledge Graph (KG), making
the knowledge searchable like Web resources. As a result, many features are
enabled, such as vendor-agnostic knowledge discovery and matchmaking model
requirements with device capabilities.

Another aspect of our work is deploying NN models on the devices and inte-
grating ML applications into end-user IIoT applications. More crucially, we aim
to make the approach accessible and understandable to non-experts. We propose
integrating SeLoC-ML into a low-code platform, allowing developers without
necessary expertise to use semantic services and deploy ML models declaratively,
advancing IT/OT convergence. In the background, user inputs are parsed, and
corresponding SPARQL queries5 are formulated to retrieve the information from
the central graph database automatically. Additionally, diﬀerent deployment op-
tions will become available depending on matching results, allowing developers
to generate projects and deploy ML on the devices with minimal eﬀort. Last
but not least, we leverage semantic application templates, so-called recipes [24],
to assist developers in integrating ML applications into greater pipelines and
creating end-user applications rapidly. We support application development by
matching the data types used in recipes with the data points provided by the
devices, which are deﬁned by common semantic models.

As an example of this approach, we present the solution on a Siemens Pro-
grammable Logic Controller (PLC) SIMATIC S7-15006 using the Siemens low-
code platform Mendix7 [12]. We demonstrate in Mendix how to search and
matchmake an NN model with a SIMATIC S7-1500 Technology Module Neural
Processing Unit (TM NPU)8 connected with an Intel RealSense camera9. The
goal is to ﬁnd an trained NN model compatible with the TM NPU for classify-
ing diﬀerent types of objects on a conveyor belt. Following a successful match,
an engineering project for Totally Integrated Automation (TIA) Portal10 - a
Siemens Integrated Development Environment (IDE) for industrial automation
- can be automatically created and ready for deployment. Later, we present how
to use a semantic recipe to orchestrate the ML application and easily build an
end-user application in Mendix to monitor the classiﬁcation results. The evalu-
ation results show that SeLoC-ML can reduce engineering eﬀort by a factor of
at least three compared to conventional approaches.

5 https://www.w3.org/TR/rdf-sparql-query
6 https:

//new.siemens.com/global/en/products/automation/systems/industrial/plc/simatic-s7-1500.html

7 https://www.mendix.com
8 https://new.siemens.com/global/en/products/automation/systems/industrial/plc/simatic-s7-1500/

simatic-s7-1500-tm-npu.html

9 https://www.intel.com/content/www/us/en/architecture-and-technology/realsense-overview.html
10 https://new.siemens.com/global/en/products/automation/industry-software/automation-software/

tia-portal.html

4

H. Ren et al.

The remainder of this paper ﬁrst presents related work on ML in IoT, Seman-
tic Web technologies, ML management, and low-code programming in Section 2.
Section 3 describes SeLoC-ML from the semantic system to low-code platform
integration. Section 4 demonstrates SeLoC-ML on an industrial classiﬁcation
problem using Siemens products as an example. In Section 5, we evaluate the
approach, compare it with the traditional workﬂow and provide the beneﬁts of
SeLoC-ML. Finally, Section 6 concludes the paper and discusses future work.

2 Related Work

Advancements of on-device ML On-device ML is more than just an algo-
rithm. It is about the proliferation of hardware, progress on algorithms, emerg-
ing ecosystem, and transformative applications. Ultra-low-power devices have
been designed for always-on applications [7] [11]. Various algorithms have been
proposed to fully exploit ML models on the devices without compromising per-
formance [22] [17]. Collaborative ecosystems can further squeeze the potential
from the synergism of hardware and software [5] [16]. Last but not least, many
applications have been brought from a proof-of-concept to products [8] [1].

Semantic Web Technologies Semantic Web technology provides means for
building, storing, and handling diverse data sources of diﬀerent structures, mak-
ing it an ideal candidate for information modeling and integration in IoT. Evi-
dence has shown the beneﬁts of semantics in industrial domains [19] [13]. In the
context of IoT, ontologies like Sensor, Observation, Sample, and Actuator On-
tology (SOSA) [10], Semantic Sensor Network Ontology (SSN) [3], and Semantic
Smart Sensor Network Ontology (S3N) [20] are few prominent semantic mod-
els for describing intelligent IoT devices, their properties, and interactions. The
Thing Description (TD) [2] ontology developed by the World Wide Web Con-
sortium (W3C) Web of Things (WoT)11 working group speciﬁes the metadata
and interfaces of IoT devices. iotschema.org 12 is yet another semantic model in
the IoT domain, which is used to enrich the data among connected things. This
study is interested in combining these semantic schemas with our proposed NN
model ontology [18] for modeling the heterogeneous knowledge about devices
and NN models in IIoT.

Management of on-device ML There are hundreds of billions of IoT de-
vices today, and new ML models are developed and distributed daily. To man-
age these resources at scale, it is necessary to increase the interoperability and
transparency of the ecosystem. Open Neural Network Exchange (ONNX)13 aims
to provide a shared exchange format that allows developers to use ML models

11 https://www.w3.org/WoT
12 http://iotschema.org/docs/full.html
13 https://onnx.ai

Semantic Low-Code Engineering for ML Applications in Industrial IoT

5

across diﬀerent deep learning frameworks. However, it fails to provide descrip-
tions of models in a formal way. To overcome this limitation, TensorFlow Lite
Metadata14 and Model Card [14] are introduced to formally document ML mod-
els. Few databases [26] [15] are introduced for tracking ML models. Nevertheless,
they do not scale well since many manual works are required, and their informa-
tion models do not express the relationships between ML models and hardware.
ML models need to be studied together with the speciﬁcations of hardware to
achieve joint management.

Low-Code Engineering Despite remarkable IT/OT integration achievements,
the current state of developing complex IIoT applications is still far from satis-
factory [25]. The concept of low-code engineering and corresponding platforms,
such as Mendix [12], are introduced to support fast application development
without a prerequisite of having enhanced coding skills [9]. Low-code concepts
ﬁnd their applications in the manufacturing domain [21] [27], allowing to quickly
build industrial applications based on the services provided by the machines on
the shop ﬂoor. To match the business requirements with the existing function-
alities of the machines and compose them meaningfully, we use the notion of
recipes [24] as an easy way to model such compositions. Recipes can be seen
as application templates [23] developed to solve a class of problems and can be
later easily conﬁgured for a speciﬁc use case.

3 Approach

We present SeLoC-ML considering the interoperability and deployment obsta-
cles in ML applications in IIoT. This section starts by introducing the framework
setup. The proposed architecture relies on a semantic system designed to cover
but not be limited to the use case addressed in this study. We illustrate the
semantic system, from the ontology to the semantic services. Next, a simpliﬁed
KG and two SPARQL queries are presented to exemplify the system’s advan-
tages. We then propose integrating SeLoC-ML into the Siemens Mendix low-code
platform allowing developers to easily identify and matchmake components, de-
ploy NN models to the devices upon matching, and quickly prototype IIoT user
applications.

3.1 Framework Architecture

Figure 1 presents the SeLoC-ML framework. The ﬁgure on the left illustrates
that developers are faced with a gap between software (NN models) and hard-
ware (IIoT devices). We ﬁrst propose to utilize two semantic models to describe
IIoT devices and NN models, respectively. Here, any formalized semantic models
can be applied, but for demonstrating the technology in the industrial environ-
ment, we choose the standardized W3C TD [2] to describe devices. Aligning with

14 https://www.tensorflow.org/lite/convert/metadata

6

H. Ren et al.

Fig. 1. Framework architecture of SeLoC-ML.

the TD, we design a semantic ontology [18] with a conversion tool for describing
NN models in terms of their metadata, structures, and hardware requirements.
Thus, knowledge about heterogeneous IIoT devices and NN models can be trans-
lated into uniﬁed semantic descriptions against their ontologies and be hosted
together in a KG, as shown on the right side of the ﬁgure. The bottom of the ﬁg-
ure shows that even non-experts can easily scrape the KG with Mendix. Mendix
will automatically formulate queries based on user inputs and retrieve desired
answers from the graph. Upon matchmaking, diﬀerent deployment options are
made available. A ready-to-be-deployed engineering project can be generated
based on user conﬁgurations and the retrieved semantic information. This is
known as ML-as-a-service [4]. Finally, developers can leverage semantic applica-
tion templates recipes to accelerate user application development.

3.2 Semantic System

Ontology We presented an ontology15 [17] to describe NN models in the con-
text of IoT, as shown in Figure 2. By reusing existing schemas, such as S3N and
SOSA, we aligned the ontology with other Web standards and avoided reinvent-
ing the wheel. For research and demonstration purposes, the ontology has been
designed to guarantee its interoperability and compatibility with TD, which we
applied to describe IIoT devices. The ontology can render three diﬀerent forms
of information about a NN: 1) metadata, such as the date of creation, cate-
gory, and literal description; 2) structure, such as the input and output layers;
3) hardware requirements, such as memory and sensors.

As references, we provide interested readers with examples of semantic de-
scriptions of IoT devices and NN models in our repository. Additionally, scripts
are available, which can generate a semantic representation of a given NN model
along with some user inputs since not all information can be obtained by parsing
the NN model, such as dataset and author information.

15 https://tinyml-schema-collab.github.io

described byNN ModelsstoreSemantic  Description  KnowledgeGraphconvertQuery              Low-code PlatformIoT DevicesGapdiscover  & matchmakedeployconfigure & instantiate{}TDdescribed byThings Description               User Application Semantic Low-Code Engineering for ML Applications in Industrial IoT

7

Fig. 2. Ontology of NN model in IoT.

Knowledge Graph We can design a central KG that stores information from
NN models and IoT devices using the semantic schemas introduced above. For
an example, we used GraphDB16 to demonstrate a simpliﬁed KG composed of
nine IoT devices and 22 NN models. As depicted in Figure 3, the NN model and
device nodes are drawn on the left and right sides of the ﬁgure, respectively. An
NN model called Move is expanded in the center, displaying its properties. We
collect NN models trained using TensorFlow, one of the most prominent deep
learning frameworks. However, our approach can be easily scaled to cover diﬀer-
ent devices, NN models, and frameworks. As previously mentioned, we provide
the code and examples for creating KG and interacting with it.

Discovery and Matchmaking Many speciﬁc uses and services can be enabled
once the KG has been created. We use two simple queries to answer two questions
against the KG example introduced above for a demonstration. More queries can
be found in our repository. The used namespaces and corresponding preﬁxes are
given as follows:

# Our NN ontology
nnet: <http://tinyml-schema.org/

networkschema/>

# Schema.org Vocabulary
schema: <https://schema.org> .
# Units of Measure Vocabulary
om: <http://www.ontology-of-units-of

-measure.org/resource/om-2/> .

# SSN Ontology
ssn: <http://www.w3.org/ns/ssn/> .

16 https://www.ontotext.com/products/graphdb

# S3N Ontology
s3n: <http://w3id.org/s3n/> .
# Extension of the SOSA ontology
sosa_extend: <http://tinyml-schema.org/

sosa_extend#> .

# Extension of the SSN ontology
ssn_extend: <http://tinyml-schema.org/
ssn_extend#> .

# Extension of the S3N ontology
s3n_extend: <http://tinyml-schema.org/
s3n_extend#> .

s3n:Algorithmschema:name:trainingDataset:inputLayer:outputLayer:middleLayers3n:hasProcedureFeatureschema:runtimePlatform:NeuralNetwork:hasType:hasActivation:Layerschema:Textschema:urlrdfs:classrdf:propertyrdfs:subClassOfssn:Inputssn:Output:hasInputInfo:NetworkInput:hasOutputInfo:NetworkOutput:shapeIn:shapeOutschema:Numberschema:Numberschema:Textschema:Textschema:Number:hasIndexschema:Text:hasMetric:hasMetricValueschema:Numberschema:identifierschema:Textschema:codeRepositoryschema:citationschema:url:hasCategoryschema:descriptionschema:Text:hasMultiplyAccumulateOpsschema:Numberschema:dateCreatedschema:Dateschema:creatorschema:Textssn-system:inConditions3n:ProcedureFeatures3n:Memorys3n_extend:Flashs3n_extend:RAM<enumeration>:Activation:Relu:Tanh......<enumeration>:Quantization:Int8:Int16......<enumeration>:LayerType:FullyConnected:Quantize:DepthwiseConv2D......<enumeration>:Metric:Top_1_accuracy:Top_5_accuracy......<enumeration>:NetworkCategory:Classification:ObjectDetection:FeatureExtraction:Unsupervised......schema:Text:hasQuantizationschema:urlssn_extend:provideInputsosa_extend:hasSensorInfososa:Sensorsosa_extend:Microphonesosa_extend:Camerasosa_extend:Gyroscope......ssn:hasOutputssn:hasInputschema:SoftwareSourceCode8

H. Ren et al.

Fig. 3. A simpliﬁed KG containing 22 ML models and nine devices.

1. We have an IoT device on which we want to deploy an NN model. The device
is equipped with a camera, and it has 144 and 621 Kb of available RAM and
Flash, respectively. We want to determine all possible NN models that can
be executed on this device.

2. We trained an NN model for motion classiﬁcation using gyroscope and ac-
celerometer data. Given that the minimum RAM and Flash requirements
for running this model are 121 and 610 Kb, respectively, we want to know
which available devices can run this model.

Query 1:

Query 2:

SELECT ?uuid ?MACs ?RAM ?Flash ?Description
WHERE {

SELECT ?Device ?RAM ?Flash
WHERE {

?nn a nnet:NeuralNetwork ;

schema:identifier ?uuid ;
schema:description ?Description ;
ssn:hasInput ?input;
nnet:hasMultiplyAccumulateOps ?MACs ;
s3n:hasProcedureFeature ?x_1 ;
s3n:hasProcedureFeature ?x_2 .
?x_1 ssn-system:inCondition ?cond_1 .
?x_2 ssn-system:inCondition ?cond_2 .
?cond_1 a s3n_extend:RAM ;
schema:minValue ?RAM ;
schema:unitCode om:kilobyte .

?cond_2 a s3n_extend:Flash ;
schema:minValue ?Flash ;
schema:unitCode om:kilobyte .

?sensor ssn_extend:provideInput ?input;

a sosa_extend:Camera .

FILTER (?RAM <= 144)
FILTER (?Flash <= 621)

}

?Device a s3n:SmartSensor ;

ssn:hasSubSystem ?system_1 ;
ssn:hasSubSystem ?system_2 ;
ssn:hasSubSystem ?system_3 .

?system_1 a sosa_extend:Accelerometer .
?system_2 a sosa_extend:Gyroscope .
?system_3 a s3n:MicroController ;

s3n:hasSystemCapability ?x .

?x ssn-system:hasSystemProperty ?cond_1 .
?x ssn-system:hasSystemProperty ?cond_2 .
?cond_1 a s3n_extend:RAM ;
schema:value ?RAM ;
schema:unitCode om:kilobyte .

?cond_2 a s3n_extend:Flash ;
schema:value ?Flash ;
schema:unitCode om:kilobyte .

FILTER (?RAM >= 121)
FILTER (?Flash >= 610)

}
ORDER BY ?RAM

Result:
uuid: 2c... ; MACs: 7158144; RAM: 94 Kb; ...
uuid: 49... ; MACs: 7387976; RAM: 116 Kb; ...

Result:
Device: 002; RAM: 172 Kb; Flash: 628 Kb.
Device: 003; RAM: 187 Kb; Flash: 785 Kb.

Visual graph typetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypecitationcodeRepository2 predicates2 predicateshasCategoryhasInputhasMetrichasOutputinputLayermiddleLayermiddleLayermiddleLayermiddleLayeroutputLayertrainingDatasetsensor provides inputsensor provides inputin conditionin conditiontypetypetypetypetypetypetypetypetypetypetypetypetypeNeuralNetworkMicro_Speech_Yes_No_1Anomaly_Detection_AutoencoderMagic_Wand_2ARM_CNN_Small_keyword_spottingPerson_DetectionMicro_Speech_Yes_No_2Micro_Speech_Forward_BackwardVisual_Alarm_Clockworkpieces_conveyorbelt_mobilnetMoveVoice_TurnSnoring_GuardianMapping_DanceHello_WorldMicro_Speech_Up_Down_GoMicro_Speech_Yes_No_4ARM_MicroNet_VWW_3simatic_mobilnetARM_DS_CNN_Small_Magic_Wand_1Micro_Speech_Yes_No_3ARM_MicroNet_Small_anomaly_detectionMOVEmodel_repoprocedureFeature_2procedureFeature_1Classificationinput_6b5a8bb5-c357-4e34-94cb-f7af…metric_1_6b5a8bb5-c357-4e34-94cb-f7af…output_6b5a8bb5-c357-4e34-94cb-f7af…inputLayer_6b5a8bb5-c357-4e34-94cb-f7…middleLayer_1_6b5a8bb5-c357-4e34-94cb…middleLayer_2_6b5a8bb5-c357-4e34-94cb…middleLayer_3_6b5a8bb5-c357-4e34-94cb…middleLayer_4_6b5a8bb5-c357-4e34-94…outputLayer_6b5a8bb5-c357-4e34-94cb-f…viewsensor_1_6b5a8bb5-c357-4e34-94cb-f7af…sensor_2_6b5a8bb5-c357-4e34-94cb-f7af…Flash requirement.RAM requirement.Top_1_accuracyAccelerometerClassSmart-SensorSSI_Web-322-000-000-001adafruit_pybadge-322-000-000-005adafruit_tflite_micro_kit-322-000-000-006arduino_nano_ble_33-322-000-000-002arduino_nano_ble_33_tinyml_kit-322-000…ms200-322-000-000-002npu_s7_realsense-322-000-000-007syntiant_tinyml-322-000-000-004targetV-322-000-000-003      mouse and keyboard actions ISWC Saved graph ISCW was edited.Semantic Low-Code Engineering for ML Applications in Industrial IoT

9

Fig. 4. Semantic similarity search.

3.3 Low-Code Platform Integration

Semantic Web techniques are not easy to learn and use. Likewise, on-device ML
is another entirely diﬀerent ﬁeld that is challenging to understand. To motivate
cross-domain collaborations and simplify IT/OT convergence, we encourage inte-
grating SeLoC-ML into a low-code platform – Mendix. Mendix allows developers
to design, build, deploy, and operate IoT applications rapidly.

Semantic Management of on-device ML We created a Mendix application
with a user-friendly Graphical User Interface (GUI) connected with a KG in the
background. The application package is published in our repository. Three main
semantic services are provided in the application:

1. Discovery: Developers can browse through all available NN models and

IIoT devices in the graph database and inspect their details.

2. Matchmaking: Once the developer selects an IIoT device/NN model in
the application, SPARQL queries are automatically formulated to retrieve
all compatible NN models/devices.

3. Semantic similarity search: Imagine if hundreds of thousands of IIoT de-
vices and NN models were hosted in the KG, it would be tedious to examine
them one after another manually. Semantic similarity search17 enables users
to explore relevant objects in the KG by typing a search text, similar to
Google Search. In our example, users can search the stored components by
ﬁlling in the provided form with their requirements, as shown in Figure 4.

ML-as-a-service Moreover, depending on the matched devices, diﬀerent de-
ployment options become available, and corresponding project code can be gener-
ated by parsing the retrieved information. Of course, speciﬁc user conﬁgurations
will be asked to complete the project creation. We aim to provide a high-level
abstraction for deployment, which is as hardware-agnostic as possible.

17 https://graphdb.ontotext.com/documentation/standard/semantic-similarity-searches.html

10

H. Ren et al.

Fig. 5. Comparison between the traditional, template, and semantic approach.

Rapid User Applications Development Further, we use Mendix to rapidly
prototype an IIoT application using the concept of recipes. Recipes provide
platform-agnostic application templates that can be easily deployed and con-
ﬁgured for common automation tasks. They specify the application logic and
the information about input and output required by the tasks [23]. Device data
is described using standardized semantic models, such as OPC Uniﬁed Archi-
tecture (OPC UA) companion speciﬁcations18. Such a semantic model is stored
in the knowledge graph and, at the same time, it is used for developing the
recipes logic in Mendix. End-user applications can be instantiated by matching
the data points provided by system components with the data types required by
the recipe. As a result, developers quickly orchestrate an end-user application,
ready to be delivered.

4 Workﬂow Comparison and Case Study

This section ﬁrst outlines SeLoC-ML by comparing it with the State-of-the-Art
approaches. Figure 5 presents three diﬀerent workﬂows for constructing ML ap-
plications in IIoT. Traditionally, after the project planning, ML developers are
engaged to engineer an ML model systematically, from data collection and la-
beling to model building and training. Afterward, embedded engineers take over

18 https://opcfoundation.org/about/opc-technologies/opc-ua/ua-companion-specifications/

Problemdiscover  & matchmakePlanning & Setup (e.g.,Hardware Selection)Collect Data &Data LabellingModelConverterDeploymentProjectDataDeploymentProjectML-as-a-service  IoT DevicesModelBuildingTrainingTestingML Framework(e.g., TensorFlow)Traditional / Template ApproachSemantic ApproachintegrateKnowledgeGraph              Low-code            Platformconvert store&query               User Application TraditionalApproachTemplate  ApproachEngineering witha code templateEngineeringfrom srcatchSemantic Low-Code Engineering for ML Applications in Industrial IoT

11

the work, where the trained model is optimized and converted for the target
runtime platform through Model Optimizer. An embedded project is then engi-
neered with the ML model and uploaded to the device. Later, software engineers
design a user application to integrate the ML application and report the results
to end-users. As can be seen, it is diﬃcult to feature an IIoT ML application that
requires cross-domain expertise and a signiﬁcant amount of engineering work.

SeLoC-ML oﬀers an all-in-one solution based on Mendix low-code platform
to alleviate the situation. SeLoC-ML is generic enough, but for easily quantifying
the evaluation and demonstrating its beneﬁts, we illustrate it on an industrial
ML classiﬁcation use case where a NN model is to be discovered and applied on
a Siemens TM NPU. Of course, the SeLoC-ML framework can be quickly scaled
and applied to other domains and/or use cases.

In-use: Building an ML Application on Siemens SIMATIC

Fig. 6. Festo Didactic working station controlled by a SIMATIC S7-1500 PLC with a
connected TM NPU.

The case study is conducted on a Festo Didactic workstation19 controlled
by a Siemens SIMATIC S7-1500 PLC, as shown in Figure 6. In the running
example, the vacuum gripper on the left side puts workpieces on the conveyor
belt, transporting them to the following process. Diﬀerent workpieces need to be
classiﬁed for diﬀerent downstream handlings, and unidentiﬁed objects should be
sorted out before the next step. A TM NPU connected with an Intel RealSense
camera is installed on the workstation, controlled by the SIMATIC S7-1500 PLC.
TM NPU enables the execution of ML models directly on Siemens PLCs. Our
goal is to leverage Mendix to discover, conﬁgure, and deploy an NN model on the
TM NPU for classifying workpieces on the conveyor belt using images captured
by the camera.

19 https://www.festo-didactic.com/int-en/learning-systems/process-automation-control-theory

12

H. Ren et al.

Discovery and Matchmaking We explore all the reusable ML models in the
KG that can run on the SIMATIC TM NPU without spending much time going
through the traditional approach and generating a new model from scratch. This
can be done in Mendix with a simple click, and all compatible ML models will
show up in a pop-up window, as depicted in Figure 7. After reviewing the results,
we select the model workpieces conveyorbelt mobilnet for our use case.

Fig. 7. Discovery and matchmaking results.

Deploying ML on Hardware After matchmaking, diﬀerent deployment op-
tions become available depending on the selected devices and their runtime plat-
forms. In our case, Mendix creates relevant ﬁles for the TM NPU and PLC
project. As shown in Figure 7, speciﬁc conﬁgurations still need to be given by
users, but most of the information in the project is ﬁlled automatically by parsing
the retrieved semantic descriptions. With all project ﬁles loaded to the hardware,
the ML application is now ready for execution.

Creating a User Application using Recipe The classiﬁcation results from
the TM NPU are made available via an OPC UA server. We created a recipe
that provides a template for visualizing object classiﬁcation results based on
their color for our running example. To instantiate the recipe, Mendix matches
the data supplied by the PLC with the data types deﬁned in the recipe, based on
the deﬁnitions given in the OPC UA companion speciﬁcation. The application
developer must acknowledge the match before the application can run. Then,
Mendix runtime gets the results of the NN processing, available in the address
space of the respective OPC UA server, and represents them in the dashboard,
enabling real-time monitoring, as illustrated in Figure 8.

Semantic Low-Code Engineering for ML Applications in Industrial IoT

13

Fig. 8. End-user application that monitors the classiﬁcation results.

5 Evaluation

This section ﬁrst compares SeLoC-ML with the traditional approach qualita-
tively. Further, a quantitative analysis is conducted. For that, the example from
the last section is chosen based on our available products to quickly generate
results.

5.1 Qualitative Analysis

Reliability and Flexibility Reliability is one of the essential factors in the
industry since a single failure can cause signiﬁcant losses. Unfortunately, it is
not easy to achieve successful ML applications in IIoT using the conventional
workﬂow since many processes are involved, each of which requires extensive
domain knowledge and labor. This can potentially raise the failure probability.
SeLoC-ML provides consistent services within one tool that can automate the
engineering work by complying with semantic standards, reducing error, and
guaranteeing reliability. Moreover, it is important to provide ﬂexible solutions
to keep pace with the fast-evolving IIoT world. SeLoC-ML is generic enough to
be applied in other scenarios, avoiding examination on a per-instance basis.

Scalability and Interoperability It is more beneﬁcial to reuse existing ML
models than to invent a new one every time since reusability means less cost and
better scalability. However, one of the major concerns in IIoT is heterogeneity.
Numerous trained NNs could be used for various industrial applications, but it
is unclear how to apply them in a concrete use case or on speciﬁc hardware.
As the IIoT network expands, millions of devices from diﬀerent vendors emerge,
making manual management of a massive amount of hardware and software
almost impossible. The proposed approach presents information in a uniﬁed lan-
guage. This ensures that both humans and machines can consistently interpret
the stored data and enable automatic development at scale. Besides, our se-
mantic framework is vendor-independent and platform-neutral, enhancing the
transparency and interoperability of the ecosystem.

14

H. Ren et al.

5.2 Quantitative Analysis

We quantitatively evaluate the approach using the conveyor belt example, de-
scribed in Section 4, since this industrial application is representative and similar
results have been achieved on other use cases and platforms. We present the ex-
perimental results in the following steps: 1) we describe the ﬁle structure in the
deployment project; 2) we compare the semantic approach (SeLoC-ML) against
the other two methods regarding the engineering eﬀort for generating the project,
scalability, error rate, and tools required.

A minimum of ﬁve engineering artifacts should be engineered and created in
the project: a conﬁguration of the ML model used, and a user logic for processing,
as well as the corresponding logic in the PLC for exchanging the data with TM
NPU and consuming its results, as shown in Table 1.

Table 1. Project ﬁles

Function

conﬁgure the ML model on TM NPU
conﬁgure on-device ML model execution

npu app.conf
main.py
DataTypes.udt deﬁne data type(s) for PLC/TM NPU interaction
fbLogic.scl
deﬁne function block to interact with TM NPU
ControlData.db deﬁne data block to store the data internally in PLC memory

We compare the implementation eﬀort for programming our running exam-
ple project for three diﬀerent implementations: 1) traditional approach: pro-
gramming the whole application from scratch; 2) template approach: providing
a user with the pre-developed ready code template that need to be addition-
ally conﬁgured for a speciﬁc application; 3) semantic approach: SeLoC-ML. We
count the number of Lines of Code (LOC) needed to be manually programmed
to implement the running example for every solution. Here, we deﬁne LOC to
include the number of lines developers need to program and other conﬁguration
input that they must provide, for example, the user input in Mendix, as shown
in Figure 7. Table 2 presents the results of measuring the engineering eﬀort.

Table 2. Engineering eﬀort in LOC based on the running example

npu.conf main.py datatypes.udt fbLogic.scl dataBlock.db Total

Traditional approach
Template approach
Semantic approach

20
10
4

284
19
6

40
3
1

408
3
1

14
3
1

766
38
13

Moreover, we studied the ﬂexibility of the approaches in terms of their scal-
ability, i.e., the ability to add new data to the interaction between the PLC and
TM NPU. This is especially important when switching between diﬀerent use
cases and/or NNs. Compared to the traditional approach, both template and
semantic approaches showed a signiﬁcant reduction of the LOC. It is worth not-

Semantic Low-Code Engineering for ML Applications in Industrial IoT

15

ing that the semantic approach scales better than the template approach, as we
managed to reduce the engineering eﬀort by a factor of three with SeLoC-ML.
Another aspect to consider is the error rate. Getting the most of the code
generated will decrease the number of errors made during programming. Once
the code generation process is validated, the produced code will be errorless.

Additionally, we consider the number of tools needed to create the entire
project for PLC and TM NPU. Using our approach, we generate the entire so-
lution in one place using our Mendix application. Both traditional and template
approaches require an engineer to have competencies in at least three diﬀer-
ent tools: a model converter tool is needed for creating the NN conﬁguration
(npu.conf ), some IDE for python programming to edit the user logic for NN
processing (main.py), and TIA Portal for PLC programming. Table 3 provides
an overview of the tools required for each solution.

Table 3. Engineering tools used for programming the running example

npu.conf

main.py

*.udt, *.scl, *.db Total

Traditional approach Model Converter Python IDE

TIA Portal

Template approach Model Converter Python IDE

TIA Portal

Semantic approach

Mendix

3

3

1

6 Conclusion and Future Work

We have experienced various challenges in implementing ML in IIoT due to the
heterogeneity of the ecosystem. This study presents SeLoC-ML for managing and
deploying ML on the IIoT devices at scale by leveraging Semantic Web technol-
ogy. Many out-of-the-box features were enabled using KG, such as knowledge
discovery, similarity search, and matchmaking software (NN models) and hard-
ware (devices). By integrating SeLoC-ML in the low-code platform, Mendix, we
open new possibilities even for non-experts to easily access these semantic func-
tionalities, use ML-as-a-service for deploying ML models to hardware across the
platforms, and prototype end-user applications. The ontology and code examples
are available online and can be freely used and further extended.

The next steps, which are already underway, include further improvement
and integration of our approach to the production processes. As illustrated in
our repository, we have developed SeLoC-ML to support other platforms than in
our running example presented in the paper, such as, Arduino20. We intend to
conduct additional analysis on other scenarios and platforms and collect feedback
to further advance the robustness and scalability of our system. We hope to
foster the collaboration between the ML and the Semantic Web communities.
Therefore, provisioning the framework and making the toolchain available for
everyone is also one of our next steps.

20 https://www.arduino.cc/

16

H. Ren et al.

References

1. Bejarano-Carbo, A., An, H., Choo, K., Liu, S., Sylvester, D., Blaauw, D., Kim,
H.S.: Millimeter-Scale Ultra-Low-Power Imaging System for Intelligent Edge Moni-
toring (2022). https://doi.org/10.48550/ARXIV.2203.04496, https://arxiv.org/
abs/2203.04496

2. Charpenay, V., K¨abisch, S., Kosch, H.: Introducing Thing Descriptions and Inter-
actions: An Ontology for the Web of Things. In: 2016 International Semantic Web
Conference. pp. 55–66. Springer, Kobe, Japan (2016)

3. Compton, M., Barnaghi, P., Bermudez, L., Garcia-Castro, R., Corcho, O., Cox, S.,
Graybeal, J., Hauswirth, M., Henson, C., Herzog, A., et al.: The SSN Ontology of
the W3C Semantic Sensor Network Incubator Group. Journal of Web Semantics
17, 25–32 (2012). https://doi.org/10.2139/ssrn.3198991

4. Doyu, H., Morabito, R., Brachmann, M.: A Tinymlaas Ecosystem for Machine
Learning in IoT: Overview and Research Challenges. In: 2021 International Sympo-
sium on VLSI Design, Automation and Test (VLSI-DAT). pp. 1–5. IEEE, Hsinchu,
Taiwan (2021). https://doi.org/10.1109/vlsi-dat52063.2021.9427352

5. Duan,

S., Xu, X., Ren,

Classiﬁer

Computing
https://doi.org/10.48550/ARXIV.2203.04894,
04894

for

S.: A Brain-Inspired
on
Inference

Low-Dimensional
(2022).
Devices
https://arxiv.org/abs/2203.

Tiny

6. Garimella, P.K.: IT-OT Integration Challenges in Utilities. In: 2018 IEEE 3rd
International Conference on Computing, Communication and Security (ICCCS).
pp. 199–204. IEEE (2018). https://doi.org/10.1109/cccs.2018.8586807

7. Giordano, M., Prabhu, K., Koul, K., Radway, R.M., Gural, A., Doshi,
R., Khan, Z.F., Kustin, J.W., Liu, T., Lopes, G.B., et al.: CHIMERA:
A 0.92 TOPS, 2.2 TOPS/W Edge AI Accelerator with 2 MByte On-
In:
Chip Foundry Resistive RAM for Eﬃcient Training and Inference.
2021 Symposium on VLSI Circuits. pp. 1–2. IEEE, Kyoto, Japan (2021).
https://doi.org/10.23919/VLSICircuits52068.2021.9492347

8. Gomez, J., Patel, S., Sarwar, S.S., Li, Z., Capoccia, R., Wang, Z., Pinkham, R.,
Berkovich, A., Tsai, T.H., De Salvo, B., et al.: Distributed On-Sensor Compute
System for AR/VR Devices: A Semi-Analytical Simulation Framework for Power
Estimation (2022). https://doi.org/10.48550/ARXIV.2203.07474, https://arxiv.
org/abs/2203.07474

9. Ihirwe, F., Di Ruscio, D., Mazzini, S., Pierini, P., Pierantonio, A.: Low-
code Engineering for Internet of Things: A State of Research. In: Proceed-
ings of the 23rd ACM/IEEE International Conference on Model Driven En-
gineering Languages and Systems: Companion Proceedings. pp. 1–8 (2020).
https://doi.org/10.1145/3417990.3420208

10. Janowicz, K., Haller, A., Cox, S.J., Le Phuoc, D., Lefran¸cois, M.: SOSA: A
lightweight Ontology for Sensors, Observations, Samples, and Actuators. Journal
of Web Semantics 56, 1–10 (2019). https://doi.org/10.1016/j.websem.2018.06.003
11. Jiao, B., Zhang, J., Xie, Y., Wang, S., Zhu, H., Kang, X., Dong, Z.,
Zhang, L., Chen, C.: A 0.57-GOPS/DSP Object Detection PIM Accelera-
In: Proceedings of the 26th Asia and South Paciﬁc De-
tor on FPGA.
sign Automation Conference. pp. 13–14. ASPDAC ’21, ACM, New York,
USA (2021). https://doi.org/10.1145/3394885.3431659, https://doi.org/10.
1145/3394885.3431659

Semantic Low-Code Engineering for ML Applications in Industrial IoT

17

12. Litman, M., Field, D.: Mendix as a Solution for Present Gaps in Computer Pro-

gramming in Higher Education. AMCIS 1(1), 1 (2018)

13. Mehdi, G., Kharlamov, E., Savkovi´c, O., Xiao, G., Kalaycı, E.G., Brandt, S., Hor-
rocks, I., Roshchin, M., Runkler, T.: Semantic Rule-based Equipment Diagnos-
tics. In: International Semantic Web Conference. pp. 314–333. Springer (2017).
https://doi.org/10.1007/978-3-319-68204-4 29

14. Mitchell, M., Wu, S., Zaldivar, A., Barnes, P., Vasserman, L., Hutchin-
I.D., Gebru, T.: Model Cards for Model Re-
son, B., Spitzer, E., Raji,
porting.
the Conference on Fairness, Accountability,
and Transparency. pp. 220–229. FAT* ’19, ACM, New York, USA (2019).
https://doi.org/10.1145/3287560.3287596, https://doi.org/10.1145/3287560.
3287596

In: Proceedings of

15. Nguyen, A., Weller, T., F¨arber, M., Sure-Vetter, Y.: Making Neural Networks
FAIR. In: Iberoamerican Knowledge Graphs and Semantic Web Conference. pp.
29–44. Springer, Mexico (2020). https://doi.org/10.1007/978-3-030-65384-2 3
16. Rashid, H.A., Ovi, P.R., Busart, C., Gangopadhyay, A., Mohsenin, T.: TinyM2Net:
A Flexible System Algorithm Co-designed Multimodal Learning Framework
for Tiny Devices (2022). https://doi.org/10.48550/ARXIV.2202.04303, https:
//arxiv.org/abs/2202.04303

17. Ren, H., Anicic, D., Runkler, T.A.: TinyOL: TinyML with Online-
International
Joint Conference
IEEE, Shenzhen, China (2021).

Learning
on Neural Networks
https://doi.org/10.1109/ijcnn52387.2021.9533927

2021
(IJCNN). pp. 1–8.

on Microcontrollers.

In:

18. Ren, H., Anicic, D., Runkler, T.A.: How to Manage Tiny Ma-
(2022).
An
Perspective
https://arxiv.org/abs/2202.

at
chine
https://doi.org/10.48550/ARXIV.2202.09113,
09113

Industrial

Learning

Scale:

19. Rojas, J.A., Aguado, M., Vasilopoulou, P., Velitchkov, I., Assche, D.V., Colpaert,
P., Verborgh, R.: Leveraging Semantic Technologies for Digital Interoperability in
the European Railway Domain. In: International Semantic Web Conference. pp.
648–664. Springer (2021). https://doi.org/10.1007/978-3-030-88361-4 38

20. Sagar, S., Lefran¸cois, M., Reba¨ı, I., Khemaja, M., Garlatti, S., Feki, J., M´edini, L.:
Modeling Smart Sensors on Top of SOSA/SSN and WoT TD with the Semantic
Smart Sensor Network (S3N) Modular Ontology. In: ISWC 2018: 17th Internal
Semantic Web Conference. pp. 163–177 (2018)

21. Sanchis, R., Garc´ıa-Perales, O., Fraile, F., Poler, R.: Low-Code as Enabler of Dig-
ital Transformation in Manufacturing Industry. Applied Sciences 10(1) (2020).
https://doi.org/10.3390/app10010012, https://www.mdpi.com/2076-3417/10/1/
12

22. Song, J., Lin, F.: PocketNN: Integer-only Training and Inference of Neural Net-
works without Quantization via Direct Feedback Alignment and Pocket Activa-
tions in Pure C++ (2022). https://doi.org/10.48550/ARXIV.2201.02863, https:
//arxiv.org/abs/2201.02863

23. Thuluva, A.S., Anicic, D., Rudolph, S., Adikari, M.: Semantic Node-RED for Rapid
Development of Interoperable Industrial IoT Applications. Semantic Web 11(6),
949–975 (2020). https://doi.org/10.3233/sw-200405

24. Thuluva, A.S., Br¨oring, A., Medagoda, G.P., Don, H., Anicic, D., Seeger, J.:
Recipes for IoT Applications. In: Proceedings of the Seventh International Con-
ference on the Internet of Things. IoT ’17, Association for Computing Ma-
chinery, New York, NY, USA (2017). https://doi.org/10.1145/3131542.3131553,
https://doi.org/10.1145/3131542.3131553

18

H. Ren et al.

25. Udoh, I.S., Kotonya, G.: Developing IoT Applications: Challenges and Frame-
works. IET Cyber-Physical Systems: Theory & Applications 3(2), 65–72 (2018).
https://doi.org/10.1049/iet-cps.2017.0068

26. Vartak, M., Subramanyam, H., Lee, W.E., Viswanathan, S., Husnoo, S., Madden,
S., Zaharia, M.: ModelDB: A System for Machine Learning Model Management. In:
Proceedings of the Workshop on Human-In-the-Loop Data Analytics. HILDA ’16,
ACM, New York, USA (2016). https://doi.org/10.1145/2939502.2939516, https:
//doi.org/10.1145/2939502.2939516

27. Waszkowski, R.:

Low-code Platform for Automating Business Pro-
(2019).

IFAC-PapersOnLine

376–381

52(10),

cesses
https://doi.org/10.1016/j.ifacol.2019.10.060

in Manufacturing.

