Literature Review to Collect Conceptual Variables of Scenario
Methods for Establishing a Conceptual Scenario Framework

Young-Min Baek
ymbaek@se.kaist.ac.kr
Korea Advanced Institute of Science and Technology
(KAIST)
Daejeon, Republic of Korea

Esther Cho
esthercho@se.kaist.ac.kr
Korea Advanced Institute of Science and Technology
(KAIST)
Daejeon, Republic of Korea

2
2
0
2

y
a
M
7
1

]
E
S
.
s
c
[

1
v
0
9
2
8
0
.
5
0
2
2
:
v
i
X
r
a

Donghwan Shin
donghwan.shin@uni.lu
University of Luxembourg
Esch-sur-Alzette, Luxembourg

ABSTRACT
Over recent decades, scenarios and scenario-based software/system
engineering have been actively employed as essential tools to han-
dle intricate problems, validate requirements, and support stake-
holders’ communication. However, despite the widespread use of
scenarios, there have been several challenges for engineers to more
willingly utilize scenario-based engineering approaches (i.e., sce-
nario methods) in their projects. First, the term scenario has nu-
merous published definitions, thus lacking in a well-established
shared understanding of scenarios and scenario methods. Second,
the conceptual basis for engineers developing or employing sce-
narios is missing. To establish shared understanding and to find
common denominators of scenario methods, this study leverages
well-defined metamodeling and conceptualization that systemati-
cally investigate the concepts under analysis and define core entities
and their relations. By conducting a semi-systematic literature re-
view, conceptual variables are collected and conceptualized as a
conceptual meta-model. As a result, this study introduces scenario
variables (SVs) that represent constructs/semantics of scenario de-
scriptions, according to 4 levels of constructs of a scenario method.
To evaluate the comprehensibility and applicability of the defined
variables, we analyze five existing scenario methods and their in-
stances in automated driving system (ADS) domains. The results
showed that our conceptual model and its constituent scenario vari-
ables adequately support the understanding of a scenario method
and provide a means for comparative analysis between different
scenario methods.

KEYWORDS
Scenario, Scenario Method, Scenario-based Software Engineering,
Conceptual Framework, Scenario Variable, Conceptualization

ACM Reference Format:
Young-Min Baek, Esther Cho, Donghwan Shin, and Doo-Hwan Bae. 2022.
Literature Review to Collect Conceptual Variables of Scenario Methods

Conference’17, July 2017, Washington, DC, USA
© 2022 Association for Computing Machinery.
This is the author’s version of the work. It is posted here for your personal use. Not
for redistribution. The definitive Version of Record was published in Proceedings of
ACM Conference (Conference’17), https://doi.org/10.1145/nnnnnnn.nnnnnnn.

Doo-Hwan Bae
bae@se.kaist.ac.kr
Korea Advanced Institute of Science and Technology
(KAIST)
Daejeon, Republic of Korea

for Establishing a Conceptual Scenario Framework. In Proceedings of ACM
Conference (Conference’17). ACM, New York, NY, USA, 22 pages. https:
//doi.org/10.1145/nnnnnnn.nnnnnnn

1 INTRODUCTION
Over recent decades, scenarios have been considered a familiar
technique in software and systems engineering fields, as artifacts or
tools/techniques. A scenario, which is originally derived from the
Latin word scena, meaning “scene”, typically describes something
that might happen or is expected to happen and deals with intricate
problems and specifications during a development process [5, 10].
Scenarios also have become frequently-used means to capture and
communicate specifications for better understanding among diverse
stakeholders from different backgrounds [17]. Unlike conventional
specifications that strictly describe a system, scenarios are able
to provide more readable stories involving imaginable contexts
and support generation of executable inputs and exceptions under
potential execution/runtime environment.

Aided by the scenario’s versatility, scenario-based engineering
approaches, called scenario methods, have been actively employed as
essential tools for a variety of engineering purposes (e.g., scenario-
based analysis & design [16, 17, 29], simulation [26, 37, 42], test-
ing [20, 28]). Compared to engineering that does not utilize sce-
narios, scenario methods facilitate more effective communication
and decision making process due to the comprehensible nature of
scenarios. Because scenarios have the capability to capture (and
lucidly explain) specifications and ease inconsistencies during the
development process, they have been used as a medium or a proxy
for making the specification more intuitively readable and under-
standable. By providing a credible and coherent story that involves
future possibilities and their contextual information based on hy-
potheses, scenarios are able to flexibly and agilely provide links
between different levels of specifications, such as requirements,
design artifacts, and the executables.

Despite the widespread use of such scenario methods, several
challenges exist for scenario engineers to practically apply the
scenario method for their development projects. Major reasons
disturbing the application of scenario methods can be summarized
as (i) the lack of shared understanding of scenarios, and (ii) the

 
 
 
 
 
 
lack of a conceptual basis or framework for analyzing and devel-
oping a scenario method. As a consequence of these issues, many
researchers apply ill-structured scenarios in their own methods or
use modeling or specification methods that do not fit the purpose
adequately.

First, due to the lack of a well-established understanding of sce-
narios, scenario engineers are still making use of scenarios that
were developed in an incoherent, ill-structured, casual/informal,
or ad-hoc ways. Depending on a target of a scenario method and
how engineers see the target problem, scenarios and their seman-
tics can be defined and classified in various ways. In particular,
under a growing tendency to employ quantitative scenarios (e.g.,
scenario-based statistical analysis of risks) rather than qualitative
ones (e.g., downscaled scenarios assuming that trends are similar
across scales) [12], engineers need to utilize the scenario methods
in the right context, based on well-established understanding of
scenarios. Since scenarios are often regarded as “accessories” or
secondary artifacts, shared understanding of a scenario method has
been lacking. Compared to other software and systems engineering
artifacts, such as requirements/use-case specifications, test cases,
and simulation input specifications, distinct characteristics of sce-
narios have not been adequately explained and provided. In other
words, the term scenario has a variety of published definitions from
a vast and bewildering array of domains [1, 45].

Second, another major hurdle of applying the scenario method
is the lack of a conceptual basis or framework for developing, se-
lecting, and evaluating the methods. For an effective analysis of the
method, theoretical or conceptual framework should be provided to
enable the identification and organization of core concepts, which
outlines the essential features of diverse methods. There have been
various studies to define scenarios and build typologies in a number
of engineering domains over the years [37, 40]. However, to the
best of our knowledge, comprehensive investigation of scenario
data and variables of scenario methods has not been conducted yet.
One of the best approaches to establish a shared understanding
and a conceptual basis is to use metamodeling and conceptualiza-
tion [11, 27], which define core concepts as meta-classes and analyze
relationships between the classes. By providing a higher level/layer
of abstract concepts and their associations, the conceptual basis is
able to attain its extensibility and flexibility so that engineers can
be systematically guided. To design a well-established framework,
the concepts should be thoroughly identified, defined, and orga-
nized. Therefore, the conceptualization process should include the
investigation of the concepts, relationships, and their attributes.

In this study, as a first step to establish a conceptual basis, a semi-
systematic literature review on publications that study scenarios or
utilize scenario methods is conducted. It allows us to grasp various
meanings and purposes of employing scenario methods and to
identify commonly (or frequently) used conceptual variables and
data. Specifically, the data collected from the selected publications
are defined as scenario variables (SVs), and they are classified into 4
levels of classes (method-level, suite-level, scenario-level, and event-
level) to define constructs of a scenario specification. Among 1071
publications searched, 354 publications were finally selected based
on selection criteria. From the finally selected publications, 100
highly-related publications were inspected to collect the variables.
This study further conceptualizes the SVs by meta-modeling to

2

develop a Conceptual Scenario Model (CSM), which can be used as
a communication and analysis tool to establish and strengthen the
shared understanding and to enable scenario assessment.

For the evaluation of our conceptual model and its constituent
scenario variables, this study analyzes actual scenario instances
developed in an automated driving system (ADS) domain. The ADS
domain is an application domain that most actively employs sce-
nario methods for various engineering tasks, such as safety analysis,
simulation, and testing. In addition, there has been much effort to
standardize scenario-based engineering, such as ASAM OpenSCE-
NARIO (and OpenDRIVE) [14] and PEGASUS method [30]. Through
the real-world (or simulation) scenarios for ADSs, applicability and
validity of our conceptual model and variables are evaluated.

The remainder of this paper is structured as follows. Sections 2
and 3 introduces related work and background knowledge, and Sec-
tion 4 presents an overall approach of this study. Section 5 conducts
a semi-systematic literature review, and Section 6 defines scenario
variables collected from the investigation. Section 7 performs a case
study with real-world scenario methods/instances, and Section 8
analyzes and evaluates the applicability and expressiveness of the
SVs. Section 9 concludes the paper and presents the future work.

2 RELATED WORK
This section introduces several scenario methods, including scenario-
based/driven analysis, design, simulation, testing, and validation.
To differentiate scenarios utilized in automated driving system
(ADS) domains, the methods are classified into general-purpose
(Section 2.1) and ADS scenarios (Section 2.2) as domain-specific
scenarios.

2.1 General-Purpose Scenario Development

Methods

General-purpose (GP) scenario methods typically aim to provide
common standards and agreements for scenario specification and
validation. Major advantages of utilizing GP methods are from (i)
utilizing well-known modeling languages (e.g., graph-based, dia-
grammatic modeling languages) and (ii) intuitive and widely ac-
cepted semantics of the language.

The most traditional and simplest method to define scenarios
might be using a graph or tree-based model to describe and test
possible sequences of states or events/actions. By analyzing alter-
native paths (branches) of possible scenarios, functional behaviors
of a system under study are defined as threads, and executable
sequences in the exploration along the tree are defined as scenarios
in Scenario Tree (ST) [43]. By extending ST, Scenario Search Tree
(SST) [7] was also developed to explicitly include conceptual vari-
ables apart from the functionality, states, or events. Although both
approaches model system behaviors well (i.e., almost similar to a
system’s behavioral model), they have limitations in expressing
contextual information and environmental conditions, which can
influence the system behaviors.

For more sophisticated representation of scenarios, ACDATE/ Sce-
nario model specifies scenarios based on the Actors, Conditions, Data,
Actions, Timing, and Events (ACDATEP if Policies are included) [44].
This approach supports scenario-oriented requirements engineer-
ing and scenario planning through the Integrated ACDATE/Scenario

Model (IASM) of command & control systems. By analyzing and
formally specifying relationships between the system and the sce-
nario, this model facilitates static analysis of the models to check the
completeness & consistency and analyze service properties, such
as reliability. Although it is evident that this method has the expres-
siveness to support generic behavioral modeling of various system
types, low-level (i.e., code-like) and fixed set of semantics limit
flexible and extensible abstraction for the scenario specification.

To introduce and realize scenario-based programming, the vi-
sual languages message sequence charts (MSCs) and live sequence
charts (LSCs) are used to describe flows of how the system (and its
interface) has to react to user inputs [8, 38]. Like a UML sequence
diagram, they contain participants (and their lifelines), environ-
ment, and interactions (messages) between them to depict runtime
behaviors of a system. By adding liveness and execution seman-
tics to behaviors of MSC, LSCs are able to graphically represent
event patterns, conditions, constraints, and predicates (e.g., what is
mandated or what is not allowed).

Aside from these methods, many existing approaches have uti-
lized variants of the UML/SysML-style sequence diagram (e.g.,
Action Sequence Charts (ASCs) [21], Modal Sequence Diagram
(MSD) [17, 18]), semi-formal diagrams (e.g., process mining for sce-
nario discovery [47]), and formal modeling languages (e.g., Petri
Nets (PNs) [13], Hybrid Automata (HA) [6], and Extended Finite
State Machine (EFSM) [52]).

One limitation of GP methods is the high level of abstraction.
Consequently, the semantics may not be specialized as domain-
specific approaches (e.g., military [41, 51], autonomous driving,
aviation [23, 24], and programming/platform-specific scenarios
1, Scenario Modeling Language for Kotlin [50]))
(Gherkin Scenario
require. On the other hand, GP methods often focus on behavioral
and interactive descriptions instead of provisioning contextual in-
formation. To judge from domain-specific perspectives, the missing
or insufficiently identified contexts can lead to a decline in overall
effectiveness of scenario methods.

2.2 Scenario Methods in ADS Domains
Domain-specific scenario methods have been frequently employed
and utilized in domains that contain critical systems, such as safety
and mission critical systems. In general, these critical systems are
not developed by a single development team, but by numerous
stakeholders and engineering groups from different backgrounds
that participate in one large development project. Therefore, scenar-
ios play a significant role in allowing engineers to clearly capture
specifications and facilitate more visible communication between
stakeholders, during the whole development phases. The ADS do-
main, where scenario methods are the most actively employed, also
utilizes scenarios to engineer many critical features, dynamics and
behaviors, processes, and regulations/policies, according to a given
standard(s).

The ASAM OpenSCENARIO [14] is a standard by Association for
Standardization of Automation and Measuring Systems (ASAM) for
2
scenario development of traffic simulation along with OpenDRIVE

3. Contrary to OpenDRIVE and OpenCRG, which pro-
and OpenCRG
vide static contents, OpenSCENARIO provides vendor-independent
dynamic traffic elements and maneuver libraries. Therefore, the
family of standards supports multi-layered environment for sce-
nario development and simulation to test, validate, and certify safety
operations in driver assistance systems and autonomous driving
environments. The standard mainly supports flexible modeling of
automated driving maneuvers by providing storyboard-based logi-
cal scenarios. Consequently, constructs of this standard are very
domain-specific (e.g., maneuver, trajectory, vehicle, driver, traffic en-
vironment), which follow domain experts’ knowledge and existing
standards/regulations, rather than basing on generic concepts.

PEGASUS Method [30] is a method for generating logical sce-
narios and scenario-based testing of automated driving functions.
Based on a given processing chain, the method defines three major
components, which are events, scenarios, and test cases. The process
of PEGASUS method not only suggests the artifacts, but also in-
cludes concrete data (format), knowledge, models as databases. Also,
6-Layer Model (6LM)—from road network to digital information—
was also introduced within the PEGASUS project to comprehen-
sively engineer the ADS traffic environment for its operational
safety. Based on the PEGASUS method and 3 abstraction levels of
scenarios defined by T. Menzel et al. [32], a graphical modeling lan-
guage/framework, called SceML, was recently introduced [36]. The
SceML supports modeling of multiple abstraction levels and modu-
larization of sub-scenarios using a graph-based scenario model.

Similarly, Scenario Description Language (SDL) suggested by X.
Zhang [53] is a modeling language to specify scenarios of auto-
mated driving systems. The major strength of the SDL is the identi-
4)
fication of various models and data (e.g., accident database, STPA
needed for the scenario development. The developed scenarios com-
prehensively include the scenery, dynamic elements, base scenar-
ios/elements, and can define contextual and causal elements/factors
accordingly. Their research focuses on the testing of control ac-
tion specific to the driving system domain and possible unsafe
causes/hazards (i.e., corner cases). Consequently, the scenario ele-
ments are defined specifically at a domain-level.

Compared to general-purpose methods, the scenario methods
in ADS engineering fields have focused more on the contextual
information, such as non-ego vehicles, traffic of the road network,
and weather conditions. Also, similarly to other critical systems
(e.g., military & aviation fields), the ADS scenarios distinguish nor-
mal baseline scenarios from critical scenarios, according to the
criticality (e.g., safety or mission) of behaviors under study. Even
though the domain-specific approaches more practically support
ontological analysis and application of domain knowledge, the
lack of commonly shared conceptual variables leads to low ex-
tensibility and flexibility of the methods. The introduced studies
are just a few of scenario studies in ADS domains. Scene-focused
scenarios (e.g., Ontology-based Scene Creation [3], Scenic [15]),
infrastructure/environment-focused scenarios [48], and risk/hazard-
focused scenarios [4] also hold important positions in scenario-
based ADS testing and simulation. Some other scenario instances
will be analyzed in Section 7.

1
Gherkin Syntax, https://cucumber.io/docs/gherkin/reference/
2Open Dynamic Road Information for Vehicle Environment

3Open Curved Regular Grid
4System-Theoretic Process Analysis

3

3 BACKGROUND
3.1 Scenario and Scenario Method
As discussed in Section 1, the terms scenario and scenario method
have a variety of published definitions from a vast and bewildering
array of domains [1, 45]. Since the term originated from film indus-
try, a scenario originally refers to an outline for a screenplay, which
is a script (prescribed form) of a series of scenes. The scenario is
defined as “a postulated sequence or development of events” in Oxford
Dictionaries, and the scenario typically refers to “a description of
how the view of the world changes with time, usually from a specific
perspective,” as the OpenSCENARIO standard defines. On the other
hand, some other publications simply define a scenario as “evolution
(temporal/causal development) of scenes” or “a path of in a transition
graph consisting of at least one state/event.” For better understanding
of this paper and consistently using the terms, this section generally
defines Scenario and Scenario Method in our way.

3.1.1

Scenario.

Definition 1 (Scenario). A scenario (or a scenario specification)
is a coherently described course of significant events to concretize
paths of possible dynamics under a particular context(s), on the basis
of specific purpose and hypothetical extrapolation.

The above definition includes four important keywords: course
of events, possible dynamics, context, and hypothesis. The possible
dynamics of a system and its environment are represented by the
course of events, which describe an articulated behavior thread and
its path. Here, the path can be probable, plausible, or just possible,
depending on the level of complexity and uncertainty [49]. Also,
a scenario should include specific contextual information, which
is expected to affect both the execution of a scenario and the oc-
currences of its events. By providing particular contexts to the
dynamics description, a scenario plays a role as a device to capture
and lucidly explain given specifications. Lastly, there is no scenario
without a goal (i.e., hypothesis made from a particular viewpoint);
if there is no goal, it is just a plot/story. By determining a specific
viewpoint and identifying solid objectives and their values, goal-
oriented hypotheses can be defined. In other words, a hypothesis
informs what an engineer want to observe/analyze/validate, thus
they are frequently derived from system’s goals, requirements, evi-
dences (e.g., historical data), and theories. If a model is developed
in accordance with the above requirements, it can be considered
a scenario specification, but a set of specific semantics must be
determined by an underlying formalism (i.e., a modeling language).
At this level/stage, types, uses, and purposes of scenarios are not
determined. Although there have been many attempts to define
the typologies of scenarios [9, 33, 46], two classification methods
are primarily used. The first approach, mainly used in military and
aviation domains, classifies scenarios as operational, conceptual,
and executable scenarios [11, 25, 37, 39], based on the maturity
level of the scenarios. The other approach, mainly used in auto-
mated driving system (ADS) fields, distinguishes three types of
scenarios as functional, logical, and concrete scenarios [31, 32]. Both
approaches divide the levels in terms of the abstraction levels and
explanation methods of scenarios. For example, operational and
functional scenarios are typically written as a narrative and gen-
erally explained by domain experts. On the other hand, executable

Figure 1: Illustration of a scenario method

and concrete scenarios represent low-level data and execution mech-
anism (e.g., algorithm), and they explain how an execution method
(e.g., real-world, simulator, testing engine, training) should run the
scenario. It is clear that the specification and modeling of multiple
abstraction levels of scenarios should be appropriately supported
for more systematic scenario-based engineering.

3.1.2

Scenario Method.

Definition 2 (Scenario Method). A scenario method is any
engineering method or approach that develops, uses/utilizes, manages
a scenario(s) for a particular engineering purpose.

Scenarios of a scenario method are typically products of con-
cretization. They provide links between analysis/design artifacts
and executable artifacts (e.g., implementation or V&V artifacts) by
giving logical or concrete contexts to them. As Figure 1 shows, a
scenario plays a role as a proxy to capture the specification (e.g.,
analysis & design artifacts) and give contexts to executable models.
The contextual information is derived from the analysis of avail-
able execution environment, such as testing, simulation, real-world
execution, or training. By delivering logical or concrete contexts,
scenarios provide links and narrow the gap between engineering
activities of different phases. Also, a scenario engineer refers to an
engineer who utilizes (or is related to) the scenario method, and a
scenario stakeholder, including scenario engineers, refers to a person
who can either affect or be affected by the method.

3.2 Conceptual Framework
A conceptual framework provides a ground to explore diverse per-
spectives on a subject research area of interest by explaining the
importance of a topic in both practical and theoretical sense. To pro-
vide a comprehensive understanding of the universe of discourse
(e.g., phenomenon), the conceptual framework provides an inter-
pretative approach by articulating concepts as constructs in which
each concept plays an integral role [22]. Major roles are (a) to iso-
late key variables (i.e., core concepts) as a focal framework and (b)
conceptualize the variables so as to focus and set boundaries. As
Figure 2 illustrates, intellectual traditions can be empirically studied
(and also observed) to establish a conceptual framework that orga-
nizes the things of the past, such as terms/concepts, data, models,
experience, and experiments, etc. By detailing methods to answer
research questions of the research area, conceptual frameworks
have been suggested to find solutions specific to a set of problems
or ideas from a practical perspective.

4

a conceptual model: By analyzing the scenario variables collected
at the previous step, this study defines a semantic domain, which a
scenario method must provide, by building a Scenario Conceptual
Model (SCM). Scenario engineers can get help in applying scenario
methods (and developing scenarios) through the variables of the
SCM in the future.

5 LITERATURE REVIEW OF SCENARIO

METHODS

5.1 Design of Literature Review
Targets of this survey are (a) scenarios defined or specified/modeled
in selected publications, and (b) scenario-based/driven engineering
approaches (i.e., methods, techniques, methodologies) suggested or
utilized in the reviewed publications. The ultimate goal of this liter-
ature review is to develop a conceptual basis for scenario methods.
Therefore, this study focuses on identifying as much conceptual
data and defining them as conceptual scenario variables, shortly
SVs.

5.1.1 Research Questions. This study mainly focuses on semantics
to be considered in scenario methods, and thus diverse properties of
scenarios defined in the publications are collected and analyzed. To
recognize them, our review will answer the following key questions:
RQ1: How do the publications define scenarios and what data and

properties are related to scenarios?

RQ2: How can the investigated conceptual variables be classified
into different levels of constructs (i.e., concepts, properties,
or data values) and be conceptualized?

RQ3: What are the remaining challenges to design or apply a

scenario method?

To answer the first question, all relevant scenario data are col-
lected from finally selected publications. They are defined as sce-
nario variables (SVs) and possible values that can be assigned to the
variables (See Section 6). The second question is answered by clas-
sifying and conceptualizing the variables, and multiple levels and a
conceptual model of a scenario method are developed to answer
the question in Section 6. In Section 8.2, the third question will
be answered by discussing salient issues and challenges engineers
may encounter during the conceptualization.

Search Engines and Search Keywords. In the survey, initial
5.1.2
raw publications were first collected using the most well-known
search engines in the engineering and science fields, Scopus and
Web of Science (WoS). Because Google Scholar only supports simple
keywords and filtering options, it provides relatively less system-
atic search results. Therefore, we used Google Scholar only as a
supplementary engine for tracking additional references from the
selected publications.

The first step of our literature review process is the construction
of search queries and keywords. To design finer queries and to pre-
liminarily check how often scenarios are used in software/systems
engineering domains, we searched arbitrary publications only using
the keywords of “software engineering,” “system(s) engineering,”
and “scenario” on both search engines5. The initial search returned
46,842 results (46,018 from Scopus and 824 results from WoS) when

5This search was done on 4th February, 2022.

5

Figure 2: High-level description of the conceptual frame-
work for scenario methods

Our ultimate goal is the construction of a conceptual framework
for scenario methods. Consequently, key variables of the scenario
methods (i.e., things of the past mentioned above) first needed to be
systematically collected and conceptualized. The subject research
area that this study focuses on is “scenario methods." The particular
target aspect is the development of scenarios, such as modeling
and specification method. By distinctly setting a conceptual bound-
ary for scenario methods, future studies can be guided using our
conceptual scenario framework. In order to ensure reflexivity and
dialogic engagement, selected variables must be able to cultivate
research questions of scenario methods and play a role as a compass
system to establish practical and extensible knowledge.

4 OVERALL APPROACH
In an effort to establish a conceptual basis for scenario methods,
an in-depth and rigorous investigation of various types of scenario
methods needs to be preceded. To extensively investigate the meth-
ods and set clearer boundary of the universe of discourse, this study
conducts a semi-systematic literature review to collect conceptual
variables and answer research questions. Through the survey, mean-
ingful issues, challenges, and future research directions are also
derived and discussed.

This study follows the three steps in Figure 3. Step 1. Collec-
tion of publications: We design search queries and selection criteria
(i.e., inclusion and exclusion criteria) to systematically obtain as
diverse scenario methods and concepts as possible. Step 2. Identifi-
cation of conceptual variables from the publications: Our literature
review aims to systematically collect information and data for the
development of a conceptual framework consisting of conceptual
variables. Therefore, the survey is conducted based on specific re-
search questions and 4 levels of properties, to generate meaningful
analysis and statistics. Step 3. Conceptualization of the variables as

Figure 3: Overall approach of this study

Following are the search queries for Scopus and Web of Science,

respectively6.

ALL("software engineering" OR "system engineering" OR
"systems engineering") AND TITLE-ABS-KEY(("scenario*"
OR "scenario-based" OR "scenario-driven") AND "event*")
AND TITLE-ABS-KEY("requirement*" OR "validation*" OR
"test*" OR "simulation*") AND PUBYEAR > 1999 AND (LIMIT-
TO (SUBJAREA , "COMP")) AND (LIMIT-TO (LANGUAGE ,
"English"))
"software engineering" OR "system engineering" OR "sys-
tems engineering" (All Fields) and "scenario*" OR "scenario-
based" OR "scenario-driven" (All Fields) and "event*" (All
Fields) and "requirement*" OR "validation*" OR "test*" OR
"simulation*" (All Fields) and 2000-2021 (Year Published) and
English (Language) and Engineering or Computer Science
(Research Areas)

The reason why this is a semi-systematic literature review is that
(a) we only use two major search engines (Scopos, WoS) and (b) the
search keywords are not incrementally designed or refined dur-
ing the survey process. In other words, our survey does not use a
snowball method to find more literature from selected publications.
Therefore, the selection process, introduced in Section 5.2, only ex-
cludes publications that are away from our interests and intentions,
which are aligned with the questions in Section 5.1.1.

Selection Criteria. Based on the target questions in Section 5.1.1,

5.1.3
inclusion and exclusion criteria are defined to efficiently examine
the publications.

Inclusion Criteria. This review aims to include the following
publications to collect data, concepts, and values of scenarios or
scenario methods.

• Studies of scenario development, such as modeling and speci-
fication methods (and languages), techniques, processes, and
methodologies

• Scenario-based or -driven engineering studies, which ex-
plicitly specify scenarios for specific engineering purposes,
such as scenario-based requirements engineering, validation,
design, testing, simulation, and verification

6Note that the research area was limited to computer science and engineering (i.e.,
COMP) for both search engines.

6

Figure 4: Increasing trend of scenario methods in software
and systems engineering fields (This chart is made by Sco-
pus)

“software engineering” and “scenario” were included in the key-
word, and 42,850 results (42,060 from Scopus and 790 results from
WoS) are returned when “system(s) engineering” and “scenario”
were included. The results showed that there is a growing evidence
that both engineering domains have increasingly utilized scenario
methods over the years (See Figure 4).

Because the initial search did not set the boundaries of engineer-
ing activities and assumptions, a substantial amount of results were
returned accordingly. To research a tuned set of scenarios and sce-
nario methods used in software/systems engineering domains, we
refined the search and determined three main keywords. First, like
the initial search, “software/system(s) engineering” was included
in the search term to limit the engineering domain of publications
to software and systems engineering studies. Second, “scenario”
was certainly included to research scenarios and scenario-based
methods, techniques, and methodologies. To get more elaborate
results, “scenario-based/driven” and “event” were also included in
the actual search query to retrieve scenario methods that consider
events. Finally, “requirement,” “validation,” “test,” and “simulation”
were included in the query, because they were deemed the four most
representative engineering activities employing scenario methods.

Exclusion Criteria. This survey excluded the publications col-
lected from the search engines based on the following criteria.
There are two levels of exclusion processes, which are title-abstract-
exclusion-criteria for rounds 2 and 3, and ARP-FSP-exclusion-criteria
for rounds 4 and later (See Section 5.2).

• title-abstract-exclusion-criteria: Exclusion criteria for title and

abstract review
– Inapt publication type (e.g., whole proceedings, an entire

book, newspaper articles, web pages, etc.)

– Unrelated engineering domain, which is not related to
software or systems engineering (e.g., chemical, biological,
medical engineering or non-engineering publications)
– Unrelated system or application domain (e.g., political or

organizational system, international ecosystem)

– Unrelated approach, which does not utilize scenarios for
an engineering purpose, and less than or equal to 3 pages
• ARP-FSP-exclusion-criteria: Exclusion criteria for reviewing
abstract-reviewed publications (ARPs) and finally-selected
publications (FSPs)
– Scenarios only used as a term to simply represent a system,

a system type, a paradigm, or a case

– Scenarios (or scenario methods) not explicitly used or

mentioned (i.e., unable to retrieve in a document)

– Absence of scenario instances or insufficient semantic data

of scenarios or events

– Totally informal scenarios (i.e., narrative descriptions)
• relevance-criteria: Criteria to pick out more relevant publica-

tions from the FSPs
– The number of search result of keywords (i.e., appearance
count in each publication): numOfScenario, numOfEvent

– Presence of a scenario-describing figure(s) or table(s)

5.2 Selection of Publications & Data Collection
This section describes the overall process of collecting and review-
ing publications for the survey, which is depicted in Figure 5.

Round 1 (R1): Collect Publications and Remove Duplicates. We
initially collected publications from the search engines using the
search terms. As explained in Section 5.1.2, Scopus and WoS were
selected as search engines, and the search queries are designed for
both engines to collect relevant references. The initially collected
publications are called raw publications (RPs) and the set of pub-
lications after the duplicate removal is called duplicate-removed
publications (DRPs).

Round 2 (R2): Review Titles. In the following steps, we reviewed
and excluded publications based on the selection criteria for each
step. In R2, we reviewed the title of the DRPs based on the title-
abstract-exclusion-criteria to obtain title-reviewed publications (TRPs).
Major purposes of reviewing titles are as follows. First, this selection
was intended to remove improper publication types. When search-
ing only with keywords, the entire proceedings of a conference or
an entire book may be included, which should be excluded. Second,
publications that study either unrelated engineering domains or
unrelated system/application domains should be removed from the
publication list. Since they are more likely to be out of scope or not

7

Figure 5: A publication selection process for the literature
review

fit the purpose of this investigation, they are simply considered as
unrelated studies. However, because the titles alone do not provide
detailed information on the purposes and application domains, we
additionally excluded the publications by conducting the abstract
review in R3.

Round 3 (R3): Review Abstracts. In R3, we reviewed abstracts
of TRPs, along with their introduction and conclusion sections, if
needed. Like R2, this round also uses the title-abstract-exclusion-
criteria to exclude less relevant publications and generate a set
of abstract-reviewed publications (ARPs). Because we could deduce
details about the complex information and reasons for utilizing
scenarios from the abstract sections rather than from only the titles,
we manually reviewed abstract sections of TRPs.

Round 4 (R4): Review Overall Approaches and Uses of Scenarios.
In this final selection round, key parts of the ARPs were reviewed
based on the ARP-FSP-exclusion-criteria. While reviewing overall
approaches, we manually searched “scenario" and assessed whether
scenarios and scenario instances are explicitly defined and whether
they are developed and prepared to serve the authors’ purpose (i.e.,
course of events to describe dynamics and contexts). Even though
most of the previously reviewed publications contained the term
“scenario," some of them did not use scenarios explicitly or scenarios
sometimes did not provide enough semantic information (e.g., flow,
contexts, events/actions, conditions, etc.). Since it is needed to verify
the partial information that can be obtained from the abstracts and
overall approaches of the publications, we had to confirm specific

Table 1: Selection of publications from Round 1 to Round 4

Criteria

Output

Selected Excluded

Round
R1-a: Collect
Publications

R1-b: Remove
Publications

R2: Review Titles

R4-a: Review
Overall Approaches
& Uses of Scenarios

R4-b: Select 100
Most-Relevant
Publications

-

title-abstract-
selection-criteria

Raw Publications
(RPs)

Duplicate-removed
Publications (DRPs)

Title-reviewed
Publications (TRPs)

Abstract-reviewed
Publications (ARPs)

1071

992

851

765

79

141

86

Finally Selected
Publications (FSPs)

354

411

relevance-criteria

FSP-100

100

254

R3: Review Abstracts ARP-FSP-

selection-criteria

uses of scenarios. Through this final round, this survey obtained
a set of finally-selected publications (FSPs), which are reviewed by
full read. After collecting the FSPs, for a feasible review, 100 most-
relevant publications are prioritized for the full-read review, and
they are listed in Appendix A (For convenience, we call FSP-100
simply as FSP).

Also, the overall description and the exact numbers of selected
and excluded publications are summarized in Table 1. The overall
process for data collection is illustrated in Figure 5. First, any type
of “conceptualizable” data constituting or surrounding scenarios
(and scenario methods) were identified, which is called raw data.
After the initial collection, the raw data can be identified as either
variables or possible values of the variables.

6 CONCEPTUALIZATION OF SCENARIO

VARIABLES

To identify and collect core concepts related to general scenario
methods, literature review was conducted, and raw data was col-
lected from the selected publications in the previous section. On
the basis of the collection, this section conceptualizes the data as
well-established variables and classifies them into different levels.

6.1 Abstraction of Scenario Data as Conceptual

Scenario Variables (SVs)

A Scenario Variable (SV for short) is any concept related to scenarios
or scenario methods that can have a concrete value (or a set of
values). While collecting the SVs, there were many relations of
inclusion between the SVs in terms of their semantics. For example,
EventTemporal(Attribute) can include EventTemporalData, which
can have a set of concrete data variables, such as start_time, duration,
or delay. In this case, the SVs are further classified into primary
variables and subordinate variables, as Table 2 summarizes. The
data collection and variable identification processes were manually
conducted by the authors, and the detailed definitions for each
variable type are introduced after the classification of the SVs (See
Section 6.2).

8

Figure 6: Four levels of scenario constructs

6.2 Classification of SVs to Four Levels
The SVs collected from the FSPs were categorized according to
four levels of a scenario method. Figure 6 portrays the hierarchical
structure of the levels and their key elements. The biggest reason for
classification is to distinguish the variables in terms of their shared
aspects and to give communal rationale for each level. In other
words, each level is expected to be engineered by different types
of stakeholders to deal with more focused issues, knowledge, and
information (e.g., a system engineer has much knowledge about
system states and features (actions or functions) to specify the
event-level scenario constructs). Following are the descriptions of
the levels and SVs included in each level. The primary SVs are
defined in Appendix B.

6.2.1 Method-level SVs. The highest-level of SVs are related to the
development or selection of a scenario method to be employed
for an engineering purpose(s). Specifically, method-level SVs elicit
dialogic engagement of different stakeholders to determine overall
goal and scope of a scenario method to be utilized. An appropri-
ate scenario method is determined to analyze a universe of dis-
course, which consists of relevant goals/requirements (e.g., safety
requirements, properties, or standards), plans, required decisions,
technologies, and potential risks/hazards at a project level.

To provide overall information and understanding of a scenario
method, method-level variables are mainly involved in the meta-
data of a scenario method (MethodMetaData), a purpose(s) of the
method (MethodPurpose), a specification method (SpecMethod), and
an execution method (ExecMethod).

Scenario Suite-level SVs. Multiple scenarios of a scenario
6.2.2
suite (i.e., a set of coherent scenarios) share the same viewpoint
and its goals/values. Therefore, scenario engineers need to sys-
tematically identify and analyze the information shared among
multiple scenarios to make a coherent and aligned scenario set.
For this reason, the most important activity while collecting the
suite-level variables is to reasonably determine a target(s) and an

Table 2: Scenario variables (SVs) identified and collected from the literature review

Level* Primary SV

M

St

Scn

Evn

MethodPurpose
SpecMethod
ExecMethod
SuiteMetaData
SuiteViewpoint
SuiteOntology
SuiteConstituents
SuiteInput
SuiteScenarioComposition
ScenarioMetaData
ScenarioElements
ScenarioTarget
ScenarioInput
ScenarioOutput
ScenarioCondition
ScenarioTemporal
ScenarioGeospatial
ScenarioChange
ScenarioExternalInteraction
ScenarioUncertainty
EventMetaData
EventInput
EventOutput
EventCondition
EventBehavioral
EventInteraction
EventTemporal
EventGeospatial
EventUncertainty

Subordinate SVs
TargetProblem, TargetVisionIntent (UseOfScenario), TargetWoI, Hypothesis, StrategyTactic, Assumption
SpecType, SpecSemantics, SpecSyntax, SpecLanguage, SpecFormality
ExecType, ExecDriver, ExecCondition, ExecAutomation, ExecOutput, ExecMedia, ExecCoverage
SuiteMetaInformation, SuiteComplexity
SuiteGoal(Value), SuitePerspective, SuiteBaselineScenario
SystemOntology (ControlOntology), InfraOntology, EnvOntology, SituationOntology, IntangibleFactorOntology
SuiteScenarioPool, SuiteEventPool, SuiteDataPool
SuiteInputConfiguration, SuiteInputData, SuiteInputModel
InterScenarioAssociation, InterScenarioConcurrency, InterScenarioCausality
ScenarioType
ScenarioParticipant, ScenarioEvent, ScenarioInterEventRelationship, ScenarioEventTransitionPath, ScenarioEventPattern
ScenarioTargetCriticality, ScenarioTargetAnomaly
ScenarioInputConfiguration(Mode), ScenarioInputParameter, ScenarioInputModel
ScenarioOutputData, ScenarioOutputModel, ScenarioIndicatorOracle
ScenarioConstraint, ScenarioPrecondition, ScenarioPostcondition, ScenarioInvariant
ScenarioTemporalScale, ScenarioClock, ScenarioTmpData
ScenarioGeospatialScale, ScenarioGeoLocationType
ScenarioChangeAttribute
ScenarioUserInteraction, ScenarioEnvInteraction, ScenarioInterSysInteraction
EventTransitionUncertainty, ScenarioEnvUncertainty
EventType, EventSource, EventFrequency
EventInputParameter, EventInputModel
EventOutputData, EventOutputLog
EventConstraint, EventPrecondition, EventPostcondition, EventInvariant
EventActor, EventAction, EventOccurrenceMeasure, EventHandler
EventCommAction, EventCommMsg
EventTemporalData, EventSynchronization
EventGeospatialData
SystemUncertainty, CommunicationUncertainty, HumanUncertainty, EventEnvUncertainty

*M(-Lv): Method-level, St(-Lv): Suite-level, Scn(-Lv): Scenario-level, Evn(-Lv): Event-level

objective(s) by narrowing the gap between the scenario engineers
from different backgrounds. After setting the target, the scenario
development should be followed by the ontological analysis (e.g.,
system ontology, environment ontology, infrastructure ontology)
and relevant data investigation to clearly determine a boundary the
scenario method deals with.

For the acquisition of suite-level information, shared models
(including knowledge and data) and potentially available compo-
nents, such as reusable scenarios, events, and data (ScenarioPool,
EventPool, and DataPool, respectively) are identified. The most repre-
sentative suite-level models are goal models, ontologies, and shared
inputs/knowledge/data. The selection of the suite-level information
is determined by the selected scenario method. Another important
information at the suite level is InterScenarioRelationship, which
relates two or more scenarios to be incorporated as a single suite.
The relationship spans from simple associations and dependencies
to causal, concurrent, alternative, and interaction relationships.

Scenario-level SVs. On the basis of information acquired as
6.2.3
the higher level variables, scenario-level SVs focus on a single sce-
nario specification. According to the specification method men-
tioned in Section 6.2.1, an abstraction level and semantics (i.e.,
contents of scenarios) can be defined differently. Also, some con-
tents need to be included and specified in a way that an execution
method (e.g., testing or simulation engine) requires.

9

Major scenario-level variables include the meta-data of an in-
dividual scenario (ScenarioMetaData), its constituent events (Con-
stituentEvents), relationships among the events (InterEventRelation-
ship), a target(s) to be modeled (ScenarioTarget), inputs and outputs
(ScenarioInput, ScenarioOutput), scenario-level pre-/post-conditions
(ScenarioCondition), scenario-level configurable data (ScenarioCon-
fig), uncertainties to be considered (ScenarioUncertainty), and so
on.

6.2.4 Event-level SVs. The lowest and the most detailed level of
information is described by a set of event-level SVs, which represent
behavioral aspects and dynamics of a scenario. As conventional
modeling approaches define, an event refers to any occurrence that
a system is designed to respond to and is denoted by its name and
specific action(s). An event can be executed by either an internal
trigger or an external trigger only if its precondition is met. Several
studies distinguish event, act, action, activity, and stimuli, with
respect to their different causes and types. Also, some studies de-
fine an action as an internally-triggered active behavior and an
event as an external factor interacting with a system. Although
we agree with the need of diverse definitions of behavior occur-
rences/executions, our conceptual framework defines the variables
based on an assumption that all the behavioral information and
data is an event and its occurrence. Also, concrete scenarios include
concrete data values for the event occurrences or action executions
at a lower level than the event-level variables. However, our con-
ceptualization abstracts the data-level variables as the parameters

or inputs of the events. Event-level variables represent singular
behavioral aspects regardless of the types of events, such as act,
action, stimuli and internal/external change of states.

6.3 Conceptual Scenario Model (CSM)
On the basis of collected variables, we conceptualize and elaborate
them as a Conceptual Scenario Model (CSM), as the meta-model of
Figure 77. By defining the formerly defined SVs as meta-classes, the
CSM is designed to conceptualize crucial information of a scenario
method and specification. The CSM has three types of meta-classes,
which are described by different colors of boxes in the figure. Also,
CSM aims to systematically define relationships between the meta-
classes based on the four-levels defined for the SVs to be utilized as
constructs for the scenario development. Although a specific guide-
line to specify a real scenario is not provided by simply identifying
the concepts, this paper aims to provide a basis for developing a
scenario specification method, specialized for a specific engineering
purpose or application domain by defining the CSM.

According to the scenario definition in Section 3.1.1, a meta-
model for specifying scenarios should include four key meta-classes
to satisfy scenario requirements: Goal/Hypothesis, Path/Flow (i.e.,
course of events, possibilities), Context, and Constituent Events. In
addition, according to the range and type of information focused in
the scenario levels, it contains the following meta-classes: World-of-
Interest (WoI), Situation, Scene, and Dynamics. Therefore, the most
important role of CSM is to relate and organize these meta-classes
extracted from two sources to complement each other.

First, conceptual analysis of the WoI should be preceded in ap-
plying a scenario method. The most representative method to de-
termine the boundary of WoI is ontology, which is an explicit spec-
ification of a conceptualization [19]. The ontology is utilized as
a framework that unifies different points of view on an area of
interest without specifying a particular perspective. By systemati-
cally defining ontologies, the system and system environment can
be characterized. An ontology model not only conceptualizes and
assembles entities, but also establishes independent information
management system, provides consistency of information utilized
in various engineering activities and phases, and improves inter-
operability. Therefore, when systematic information of the WoI’s
operational domain (e.g., taxonomy) is provided, more complete and
reasonable construction of ontology is possible. For example, for
WoI analysis of Highway Autonomous Driving, ontologies such as
highway ontology (e.g., road network, traffic, regulatory elements),
vehicle ontology (e.g., driving functions, maneuvers), and weather
ontology (e.g., temperature, humidity, precipitation) can be con-
structed. In addition, ontological analysis for vehicle safety can be
guided through Operational Design Domain (ODD)8. However, from
a scenario engineer’s perspective, the WoI components are often
black-box, which may hinder the analysis of internal properties of
entities solely based on ontology.

Second, main contents constituting scenarios and purposes of
scenario specification are extracted from the specific goals and hy-
potheses of a scenario method, which are aligned with the goals

7To provide a compact meta-model, attributes of the CSM meta-classes are omitted
from the CSM diagram.
8SAE J3016: Taxonomy and Definitions for Terms Related to Driving Automation
Systems for On-Road Motor Vehicles (Revised on 2021-04-30)

10

of a System-of-Interest (SoI) under study (simply a System under
9 (SuT)). Consequently, many conventional SE processes guide
Test
use case and scenario specification based on the SoI goals or re-
quirements specification. Each hypothesis is defined differently
depending on the viewpoints despite the same WoI. Based on the
viewpoints, key meta-classes of specific path/flow, context, and
event can be defined (or articulated). A WoI contains various situa-
tions, thus setting the viewpoint allows analysis and specification
of the target situation and behaviors of the SOI (SUT).

Once the viewpoint is configured for the WoI, the dynamics to
be specified, analyzed, and observed through scenarios need to be
defined. Usually defined as path/flow, dynamics are described as
a sequence of events or sequence of scenes, and their granularity
often aligns with a use case, a task, or a mission. Scenario-level
context is defined to incorporate situations interacted or affected
by the execution of scenarios. For describing a particular context,
methods such as context diagram and (runtime) environment anal-
ysis can be utilized, which aims to analyze conditions, constraints,
and assumptions affecting the flow and execution of behaviors from
a specific viewpoint. Even when specifying identical system behav-
iors, alternative paths and hypotheses can be defined and validated
within a scenario suite based on various contexts.

The last level of scenario specification is event, which specifically
defines behavioral information and properties. Event-level primary
SVs collected from the literature review are input, output, behavior,
interaction, temporal information, geospatial information, and un-
certainty. These SVs are utilized as data for real execution of events
and configured as a parameter, which is one of the event-level
inputs. Event-level context contains trigger conditions for a pre-
condition and event transition for internal/external events to occur,
which are defined as the EventCondition variable (See Table 2). For
example, an ADS scenario specifies events such as driving functions,
maneuvers (e.g., full-brake), external events (e.g., pedestrian cross-
ing), and environmental event (e.g., weather change). Each event
can contain both temporal and spatial information and requires
logical/concrete parameters (e.g., vehicle performance, acceleration
rate, initial traffic scene) and contextual information for realistic
occurrence of an event.

7 EVALUATION
7.1 Target Scenario Development Methods and

Instances

To evaluate the conceptual scenario variables (SVs) and conceptual
scenario model (CSM) defined and developed in this paper, this
section analyzes/evaluates five scenario development/specification
methods in Automated Driving System (ADS) domain. Because the
ADS domain, along with military and aviation domains, is one of the
most active field of research and standardization of scenario-based
engineering, scenario methods of the ADS field were selected as the
application domain. Based on official documents and publications
of each method, available scenario instances and conceptual data
within each instance were manually extracted and inspected.

As introduced in Section 2.2, the first and second methods are
ASAM OpenSCENARIO (v2.0), a standard of ADAS for testing and

9Here, we consider the term ‘test’ as any type of analysis activity, such as simulation,
testing, and verification.

Figure 7: Conceptual Scenario Model (CSM)

validation of ADSs, and PEGASUS, a methodology of scenario-
based safety analysis and testing. These methods define engineer-
friendly domain-specific scenario description language for express-
ing highly-automated maneuver descriptions at multiple abstrac-
tion levels. Both methods also support the development of scenario
execution models (i.e., test/simulation scenarios) for industrial ap-
plication. Additionally, other methods proposed by B. Schutt et
al. [36], J. Bach et al. [2], C. M. Richard et al. [34], and D. J. Fre-
montet al. [15] were analyzed in terms of scenario constructs. The
first four methods develop scenarios for the test development, while
the fifth method aims for scenario-based task analysis and workload
estimation, and the sixth method aims to propose a probabilistic
programming language for scene generation.

Due to the space constraints in this paper, similar SVs centered
around primary SVs were merged to identify data corresponding
to 3 method-level SVs, 3 suite-level SVs, 8 scenario-level SVs, and
7 event-level SVs. Similar to the literature review, data was ex-
tracted and analyzed based on keywords from exemplary scenario
instances and explanation introduced in each method’s representa-
tive publication(s), as shown in Table 3.

7.2 Evaluation of Scenario Variables
Analysis of the SVs does not show whether a scenario development
method is superior or more effective than other methods. However,
it provides information on which semantic domain each method
primarily focuses on and to support scenario development in terms

11

of how the types of data differ in comparison to other methods. Be-
cause the SVs in this paper were defined by looking into the actual
scenario instances, various conceptual data used in leading scenario
methods were analyzed at meta-class levels. The information con-
tained in each cell of Table 3 can be viewed as a class or instantiated
data for an actual scenario specification. This section explains the
observation and implications from the SV-based analysis.

First, the investigated methods contain different types of data de-
pending on the engineering activity, phase, and purpose even when
applied in the same application domain. As described above, a set of
data included in a scenario development method is considered as a
semantic domain for scenario specification. Therefore, it is helpful
in establishing the general requirements needed for appropriately
employing a scenario method. For example, C. M. Richard et al.’s
approach provides semantics (e.g., workload demand, bottlenecks)
focused on engineering activity of scenario-wide task analysis, but
does not provide an actual test development. On the other hand, J.
Bach et al.’s approach supports visualization tools (scenario editors)
to effectively support the development of test scenarios, while other
methods support the specification by providing (formal) scenario
description languages.

Second, central information each method describes through sce-
narios was roughly analyzed using the data obtained from the SVs.
For example, when utilizing scene-centric scenarios (i.e., sequence
of driving/traffic scenes), J. Bach et al.’s method and D. J. Fremont
et al.’s method may be more appropriate than B. Schütt et al.’s
approach. Additionally, when safety-related features are explicitly

n
o
i
t
p
i
r
c
s
e
D
e
n
e
c
S
V
A
T
G

]
9
1
0
2

,
t
n
o
m

e
r
F

.
J

.

D
[

t
h
g
i
L
n
e
e
r
G
n
o
n
r
u
T
t
f
e
L

]
6
0
0
2

,

d
r
a
h
c
i
R

.

M

.

C
[

t
h
g
i
L
w
o
l
l
e
Y
n
o
t
h
g
i
a
r
t
S

t
h
g
i
L
d
e
R
n
o
n
r
u
T
t
h
g
i
R

t
h
g
i
L
d
e
R
n
o
p
o
t
S

c
i
t
e
h
t
n
y
S

f
o
n
o
i
t
a
r
e
n
e
G

(

,
)
n
o
i
t
a
m

i
t
s
E
e
c
r
u
o
s
e
R
&

(

s
i
s
y
l
a
n
A

n
o
i
t
u
b
i
r
t
s
i
D
e
n
e
c
S

,

)
n
o
i
t
a
r
u
g
fi
n
o
C

(

)
t
e
S

a
t
a
D

s
l
i
a
t
e
D
o
i
r
a
n
e
c
S

,

m
a
r
g
a
i
D
t
n
e
m
g
e
S

s
i
s
y
l
a
n
A
y
t
e
f
a
S

,

g
n
i
n
n
a
l

P

d
n
a

l
a
i
t
a
p
S
d
e
s
a
b
-
l
e
d
o
M

,

n
o
i
t
c
a
r
t
s
b
A

l
a
r
o
p
m
e
T

n
o
i
t
a
z
i
l
a
u
s
i
V

,

e
s
a
b
a
t
a
D

(
y
t
i
r
a
l
u
d
o
M

,
l
e
v
e
L
n
o
i
t
c
a
r
t
s
b
A

)
y
r
a
r
b
i
L

t
n
e
m
p
o
l
e
v
e
D
t
s
e
T

t
n
e
m
g
e
S
/
k
s
a
T
e
d
i
W
-
o
i
r
a
n
e
c
S

t
n
e
m
p
o
l
e
v
e
D
t
s
e
T

t
n
e
m
p
o
l
e
v
e
D

t
s
e
T

,
s
i
s
y
l
a
n
A
y
t
e
f
a
S
d
e
s
a
b
-
t
s
e
T

n
o
i
t
a
d
i
l
a
V
&
n
o
i
t
a
c
fi
i
r
e
V

,

g
n
i
s
s
o
r
C
e
l
c
i
h
e
V
e
s
o
l
C

,
l
a
v
i
r
r
A
d
e
z
i
n
o
r
h
c
n
y
S

,

n
o
i
t
a
z
i
l
a
i
t
i
n
i
e
R
h
t
i

W
e
k
a
t
r
e
v
O
t
s
a
F

s
s
e
n
e
t
e
l
p
m
o
C
t
s
e
T

,

n
o
i
t
a
l
u
m
i
S
d
e
s
a
b
-
t
s
e
T

e
s
o
p
r
u
P
d
o
h
t
e
M

)
e
t
e
r
c
n
o
C
/
l
a
c
i
g
o
L
/
l
a
n
o
i
t
c
n
u
F
(

s
w
o
l
F
f
O
n
o
i
t
i
s
o
p
m
o
c
e
D

l
e
v
e
L
n
o
i
t
c
a
r
t
s
b
A

,
)
e
t
e
r
c
n
o
C

/
t
c
a
r
t
s
b
A

(

l
e
v
e
L
n
o
i
t
c
a
r
t
s
b
A

d
o
h
t
e
M
c
e
p
S

M

s
e
l
b
a
i
r
a
v
o
i
r
a
n
e
c
s
y
r
a
m

i
r
p
f
o
s

m
r
e
t
n
i

s
d
o
h
t
e
m
n
o
i
t
a
c
fi
i
c
e
p
s
o
i
r
a
n
e
c
s

f
o
s
i
s
y
l
a
n
A

:

3
e
l
b
a
T

w
o
l
l
o
F
-

t
n
e
m
n
o
r
i
v
n
E
t
n
e
d
i
c
n
I

,

n
i
-
t
u
C

)
o
i
r
a
n
e
c
S
t
n
e
d
i
c
c
A

,

g
n
i
k
a
t
r
e
v
O

,
r
e
g
n
a
h
C
e
n
a
L
e
l
b
u
o
D

,

m
a
J
c
ffi
a
r
T

d
n
a
-
h
c
a
o
r
p
p
A
e
n
a
l
-
e
l
g
n
i
S

n
o
i
t
c
e
s
r
e
t
n
I
n
a
b
r
U

S

l
e
d
o
M
a
l
s
e
T

(

s
o
i
r
a
n
e
c
S
y
r
a
l
p
m
e
x
E
S
U
S
A
G
E
P

]
6
1
0
2

,

h
c
a
B

.
J
[

]
0
2
0
2

,

tt
ü
h
c
S
a
r
a
b
r
a
B
[

d
o
h
t
e

M
S
U
S
A
G
E
P

,

m
a
J
c
ffi
a
r
T
f

O
d
n
E

.

0
2
V
O
I
R
A
N
E
C
S
n
e
p
O
M
A
S
A

,

e
l
c
i
h
e
V
g
n
i
d
e
c
e
r
P
w
o
l
S

,

n
i
-
t
u
C

s
e
c
n
a
t
s
n
I

e
c
r
u
o
S

,
s
t
n
i
a
r
t
s
n
o
C

t
f
o
S
/
d
r
a
H

,

n
o
i
t
i
d
n
o
C
r
e
v
i
r
D

,

n
o
i
t
i
d
n
o
C
c
ffi
a
r
T

n
o
i
t
i
d
n
o
C
n
o
i
t
i
s
n
a
r
T

n
o
i
t
i
d
n
o
C
d
a
o
R
/
c
ffi
a
r
T

s
t
n
i
a
r
t
s
n
o
C
e
c
r
u
o
s
e
R

,
s
t
n
i
a
r
t
s
n
o
C
e
m
T

i

)
n
o
i
t
a
u
t
i
S
(

,

g
n
i
n
i
a
r
T

,

e
m
a
G
n
o
i
t
a
l
u
m
i
S

g
n
i
g
g
u
b
e
D

,

g
n
i
t
s
e
T

g
n
i
t
s
e
T

a
i
r
e
t
i
r
C

l
i
a
F
/
s
s
a
P

,
r
e
k
c
e
h
C
y
t
e
f
a
S

,

a
i
r
e
t
i
r
C
e
c
n
a
t
p
e
c
c
A

,
c
i
r
t
e
M

)
d
e
s
a
b
-
n
o
i
t
a
l
u
m
i
S
(

,

g
n
i
t
s
e
T
d
e
s
a
b
-
n
o
i
t
a
l
u
m
i
S

a
i
r
e
t
i
r
C

l
i
a
F
/
s
s
a
P

,

g
n
i
p
y
t
o
t
o
r
P
g
n
i
t
s
e
T

,

,
)
l
e
n
n
a
h
C

(

t
n
e
m
e
r
u
s
a
e
M

,

g
n
i
t
s
e
T
d
e
s
a
b
-
n
o
i
t
a
l
u
m
i
S

d
o
h
t
e
M
c
e
x
E

f

s
r
a
C
O
s
e
g
a
m

I
,
y
t
r
e
p
o
r
P

)
t
l
u
a
f
e
D
(
o
i
r
a
n
e
c
S

,
s
t
n
e
m
e
r
i
u
q
e
R

a
t
a
D

l
a
n
o
i
t
a
r
e
p
O

/
l
a
c
i
r
o
t
s
i
H

d
e
s
u
c
o
f
-
S
D
A

,

d
e
s
u
c
o
f

,
t
n
e
m
e
l
E
y
r
o
t
a
l
u
g
e
R

s
t
n
e
m
g
e
S
o
i
r
a
n
e
c
S

d
e
s
u
c
o
f
-
e
n
e
c
S

-
e
n
e
c
S
c
ffi
a
r
T
/
e
r
u
t
c
u
r
t
s
a
r
f
n
I

,
t
n
e
m
e
l
E
y
r
o
t
a
l
u
g
e
R

,

e
n
e
c
S

,
s
t
e
S

e
l
u
R

,
l
e
d
o
M
n
i
a
m
o
D

d
e
s
u
c
o
f
-
c
ffi
a
r
T
/
S
D
A

t
n
a
p
i
c
i
t
r
a
P

,

e
l
c
i
h
e
V

s
r
e
y
a
L
n
o
i
t
p
e
c
r
e
P

,

e
v
i
t
a
n
r
e
t
l

A
-
n
i
a
M

,

e
p
y
T
r
e
v
u
e
n
a
M

y
t
i
l
a
s
u
a
C

)
n
a
i
r
t
s
e
d
e
P

,

e
l
c
i
h
e
V

(

r
o
t
c
A
d
e
s
u
c
o
f
-
S
D
A

d
e
s
u
c
o
f
-
y
t
e
f
a
S

,

d
e
s
u
c
o
f
-
S
D
A

o
i
r
a
n
e
c
S

l
a
n
o
i
t
c
n
u
F

-
c
A

,

a
t
a
D
r
e
s
U
d
a
o
R

,

e
c
r
u
o
S
a
t
a
D
l
a
e
R
/
l
a
u
t
r
i
V

,
t
s
e

l
e
d
o
M
n
i
a
m
o
D

,
s
l
a
o
G
l
a
n
o
i
t
c
n
u
F

,

e
c
n
e
u
q
e
S
c
ffi
a
r
T

-
o
t
a
l
u
g
e
R

,

e
e
r
T
e
r
u
l
i
a
F

,
t
n
e
m
u
g
r
A
y
t
e
f
a
S

,

e
n
e
c
S

,

n
o
i
t
a
r
u
g
fi
n
o
C

,
)
h
p
a
r
G

(

,

e
n
e
c
S
e
t
a
l
p
m
e
T
/
p
a
M

g
n
i
s
u
(

g
n
i
t
t
e
S

-
r
e
t
n
I
f

O
n
o
i
g
e
R

,
l
e
d
o
M
e
c
n
a
t
p
e
c
c
A

,
t
n
e
m
e
l
E
y
r

,
)
e
t
a
v
i
r
P
/
d
e
n
fi
e
D
-
r
e
s
U

/
l
a
b
o
l
G

(
n
o
i
t
c
A

t
i
n
I

d
e
s
a
b
-
n
o
i
t
a
u
t
i
S

)
c
s
i

M

r
o

l
a
c
i
t
i
r
C
-
y
r
a
n
i
d
r
O

l
e
d
o
M
t
n
e
d
i
c

e
v
i
t
a
n
r
e
t
l

A
-
e
n
i
l
e
s
a
B

,

,

y
t
i
l
a
s
u
a
C
d
e
s
a
b
-
e
n
e
c
S

n
o
i
t
i
s
o
p
m
o
C

y
g
o
l
o
t
n
O

s
t
u
p
n
I

t
S

e
g
a
r
e
v
o
C

,
s
r
o
t
a
u
l
a
v
E

d
e
s
u
c
o
f
-
c
ffi
a
r
T
/
S
D
A

&
t
n
i
o
p
w
e
i
V

,

e
l
i
F
o
i
r
a
n
e
c
S

,
s
t
c
e
j
b
O

s
r
e
t
e
m
a
r
a
P
l
a
b
o
l
G

,
t
n
e
m
e
t
a
t
S

,
)
s
k
c
e
n
e
l
t
t
o
B
h
t
i

w

(
d
n
a
m
e
D

,
s
e
n
o
t
s
e
l
i

M

,

n
o
i
t
a
r
u
g
fi
n
o
C

,

d
a
o
l
k
r
o
W
n
o
i
t
p
m
u
s
s
A

s
r
e
t
e
m
a
r
a
P

,

e
t
u
o
R

,
t
n
a
p
i
c
i
t
r
a
P

r
e
t
e
m
a
r
a
P

,
)
n
a
i
r
t
s
e
d
e
P

,
)
e
l
c
i
h
e
V

(

r
o
t
c
A

,

k
s
i
R

,
l
e
v
e
L
E
A
S

,

e
l
b
a
v
o
M

(

s
e
l
c
i
h
e
V

(

s
t
c
e
j
b
O
o
i
r
a
n
e
c
S
/
s
e
i
t
i
t
n
E

r
e
h
t
a
e

,

W
n
o
i
t
a
u
t
i
S

)
e
g
n
a
R
(

s
r
e
t
e
m
a
r
a
P

,
s
r
o
s
n
e
S

)
n
o
i
t
u
b
i
r
t
s
i
D

(

s
r
e
t
e
m
a
r
a
P

,
)
r
e
v
i
r
D

,
)
y
r
a
n
o
i
t
a
t
S

)
n
o
i
t
u
b
i
r
t
s
i
D
y
c
n
e
u
q
e
r
F
(

,

n
o
i
t
i
d
n
o
C
y
r
a
n
o
i
t
a
t
S

,
r
e
h
t
a
e

W

,

e
l
i
F

e
c
n
e
r
e
f
e
R
g
o
l
a
t
a
C

,

p
u
o
r
G
r
e
v
u
e
n
a
M

e
l
fi
o
r
P
d
a
o
l
k
r
o
W

a
t
a
D
d
e
d
r
o
c
e
R

,
s
e
s
a
C

t
s
e
T

e
l
i
F
o
i
r
a
n
e
c
S

y
t
i
r
u
c
e
S
d
n
a
y
t
i
l
i
b
a
b
o
r
P

,

n
o
i
t
a
c
fi
i
c
e
p
S
t
s
e
T

,
t
n
e
m
e
l
E
/
y
r
a
r
b
i
L
o
i
r
a
n
e
c
S

s
t
u
p
t
u
O

s
t
n
e
m
g
e
S
o
i
r
a
n
e
c
S
e
l
c
i
h
e
V

,

,
)
k
r
o
w
t
e
N
d
a
o
R
(
y
r
e
n
e
c
S

,
r
e
l
e
e
h
W

(
r
o
t
c
A

,
r
e
h
t
a
e

W

,
)
r
e
h
t
a
e

W

(
n
o
i
t
i
d
n
o
C
t
n
e
m
n
o
r
i
v
n
E

,

e
r
u
d
e
c
o
r
P

,

e
t
u
o
R
y
r
o
t
S

,

,

a
t
a
D
-
a
t
e
M
o
i
r
a
n
e
c
S

s
t
u
p
n
I

n
c
S

l
a
i
t
n
e
u
q
e
S

n
e
v
i
r
d
-
t
n
e
v
E
d
e
s
a
b
-
t
c
A

,

,

n
o
i
t
c
e
n
n
o
C
t
n
e
v
E

k
s
a
T

n
o
i
t
p
i
r
c
s
e
D
r
o
i
v
a
h
e
B

r
o
i
v
a
h
e
B
l
e
v
e
l
-
i
t
l
u
M

n
o
i
t
p
i
r
c
s
e
D

c
n
y
S

,

n
i
o
J

y
t
i
l
a
c
i
t
i
r
C

,
s
n
o
i
t
c
n
u
F
g
n
i
v
i
r
D

d
e
t
a
m
o
t
u
A
f
o
n
o
i
t
p
i
r
c
s
e
D

t
n
e
v
E
e
r
u
l
i
a
F
/
y
t
l
u
a
F

,
t
n
e
v
E
e
s
a
B

R
O
X

,

n
e
v
i
r
d
-
t
n
e
v
E

,

d
e
z
i
n
o
r
h
c
n
y
S

n
o
i
t
p
i
r
c
s
e
D
t
s
e
T

s
t
n
e
v
E

t
e
g
r
a
T

,
l
e
l
l
a
r
a
P

,
l
a
i
t
n
e
u
q
e
S
/
l
a
i
r
e
S

-
t
n
e
u
t
i
t
s
n
o
C

s
e
m
o
c
t
u
o
)
l
u
f
m
r
a
h
(

f
o
e
c
n
e
r
r
u
c
c
o
f
o

s
t
l
u
s
e
R
t
n
e
m
e
r
u
s
a
e
M
r
e
t
e
m
a
r
a
P

c
ffi
a
r
T

,

n
o
i
t
i
d
n
o
C
t
n
e
m
n
o
r
i
v
n
E

s
t
n
i
a
r
t
s
n
o
C
y
t
i
t
n
E

,

n
o
i
t
i
d
n
o
C
t
n
e
m
n
o
r
i
v
n
E

n
o
i
t
i
d
n
o
C

n
o
i
t
u
b
i
r
t
s
i
D

,

y
r
t
e
m
o
e
G

n
o
i
t
c
a
r
t
s
b
A
t
c
e
j
b
O
o
g
E

n
o
i
t
u
b
i
r
t
s
i
D
y
t
i
l
i
b
a
b
o
r
P

,

,

e
s
i
o
N
n
o
i
t
a
t
u
M

l
a
v
r
e
t
n
I

,
s
e
n
o
t
s
e
l
i

M

l
a
r
o
p
m
e
T

e
r
u
t
c
u
r
t
s
a
r
f
n
I
,
t
u
o
y
a
L
n
o
i
g
e
R

,

,
s
e
l
b
a
i
r
a
V
,
s
n
o
i
t
a
u
q
E

s
e
u
l
a
V
d
e
m
u
s
s
A

s
g
n
i
t
a
R
d
a
o
l
k
r
o
W

,

i

e
m
a
r
F
e
m
T
/
e
n
i
l
e
m
T

i

n
o
i
t
c
a
r
t
s
b
A
l
a
i
t
a
p
S

k
r
o
w
t
e
N
d
a
o
R
f
o

f
o
n
o
i
t
c
a
r
t
s
b
A
l
a
i
t
a
p
S

k
r
o
w
t
e
N
d
a
o
R

)
y
r
t
e
m
o
e
G

,

y
t
i
s
n
e
D
c
ffi
a
r
T

,

y
a
w
h
g
i
H

,

e
n
a
L
(
d
a
o
R
f
o
n
o
i
t
c
a
r
t
s
b
A
l
a
i
t
a
p
S

d
o
o
h
i
l
e
k
i
L
e
c
n
e
r
r
u
c
c
O

i

e
m
T
d
n
E
/
t
r
a
t
S

,

y
t
i
u
n
i
t
n
o
C
-
e
m
T

i

e
c
r
u
o
S
t
n
e
v
E

r
e
t
e
m
a
r
a
P
n
o
i
t
c
A

,

y
t
i
l
a
c
i
t
i
r
C

,

y
t
i
l
i
b
a
l
l
o
r
t
n
o
C
y
t
i
r
e
v
e
S

,

n
o
i
t
i
d
n
o
C
n
o
i
t
c
A

)
e
d
o
N
n
o
i
t
i
d
n
o
C

(

)
t
i
n
U
h
t
i

w

(

r
e
t
e
m
a
r
a
P
t
n
e
v
E

y
c
n
e
u
q
e
r
F
t
n
e
v
E

,

n
o
i
t
i
d
n
o
C
r
e
v
u
e
n
a
M

,

e
c
n
a
t
s
i
D

(
n
o
i
t
i
d
n
o
C
r
e
v
u
e
n
a
M

n
o
i
t
i
d
n
o
C
t
n
e
m
n
o
r
i
v
n
E

e
t
a
t
S
t
n
a
p
i
c
i
t
r
a
P

,
)
d
e
e
p
S

,

e
m
T

i

r
o
t
o
m
o
h
c
y
s
P
/
e
v
i
t
i
n
g
o
C
/
l
a
u
t
p
e
c
r
e
P

)
t
n
e
c
a
j
d
A

(
n
o
i
t
c
a
r
e
t
n
I

V
2
V

,

k
s
a
T

,

n
o
i
t
c
a
r
e
t
n
I

,

n
o
i
t
p
e
c
r
e
P

n
o
i
t
c
n
u
F

S
A
D
A

n
o
i
s
i
V

,
)
o
g
E
(

r
o
t
c
A

t
n
e
v
E

,

y
t
i
v
i
t
c
A
,
r
o
t
c
A

,
r
e
v
u
e
n
a
M

,
t
c
A

,
t
n
a
p
i
c
i
t
r
a
P

r
e
v
u
e
n
a
M
n
o
i
t
c
A

,

,
r
o
t
c
A

r
e
v
u
e
n
a
M
n
o
i
t
c
A

,

,
t
n
e
v
E

)
y
r
o
t
c
e
j
a
r
T

,

y
a
w
h
g
i
H

,

e
n
a
L

,

n
o
i
t
c
e
s
r
e
t
n
I
(

k
r
o
w
t
e
N
d
a
o
R
f
o
n
o
i
t
c
a
r
t
s
b
A
l
a
i
t
a
p
S

l
a
i
t
a
p
s
o
e
G

y
g
e
t
a
r
t
S
l
o
r
t
n
o
C

,
r
e
t
e
m
a
r
a
P
t
n
e
v
E

,

n
o
i
t
c
e
r
i
D
/
n
o
i
t
i
s
o
P
y
r
a
r
t
i
b
r
A

n
o
i
t
u
b
i
r
t
s
i
D
c
i
t
s
a
h
c
o
t
S

&
s
e
g
n
a
h
C

y
t
n
i
a
t
r
e
c
n
U

t
u
p
n
I

,
s
t
n
i
a
r
t
s
n
o
C
e
r
a
w
d
r
a
H
/
e
r
a
w

t
f
o
S

,

n
o
i
t
i
d
n
o
C
n
o
i
t
a
n
i
m
r
e
T

e
n
i
l
e
m
T

i

,

i

e
m
T
o
i
r
a
n
e
c
S

l
a
r
o
p
m
e
T

s
t
n
i
a
r
t
s
n
o
C
n
o
i
t
c
A
/
r
e
t
e
m
a
r
a
P

,

n
o
i
t
i
d
n
o
C
n
o
i
t
c
A

,
)
r
e
g
g
i
r
T
p
o
t
S

,
r
e
g
g
i
r
T
t
r
a
t
S
(
n
o
i
t
i
d
n
o
C
t
n
e
v
E

t
n
u
o
C
n
o
i
t
u
c
e
x
E

n
o
i
t
i
d
n
o
C

t
u
p
t
u
O

n
v
E

n
o
i
t
a
l
u
c
l
a
C

,

n
o
i
t
c
A
t
n
e
m
n
o
r
i
v
n
E

,
r
e
v
u
e
n
a
M

,
t
n
e
v
E
,
r
o
t
c
A

,
t
c
A

&
l
a
r
o
i
v
a
h
e
B

n
o
i
t
c
a
r
e
t
n
I

,
t
e
s
ff
O

,

e
t
a
n
i
d
r
o
o
C
l
a
c
o
L

,
t
o
p
S

,

n
o
i
t
i
s
o
P

,

n
o
i
t
c
e
r
i
D

e
c
n
a
t
s
i
D

n
o
i
t
u
b
i
r
t
s
i
D
y
t
i
l
i
b
a
b
o
r
P

,

n
o
i
t
a
r
u
D
g
n
i
m
T
)
e
v
i
t
a
l
e
R
(

i

e
m
T

i

e
m
T

i

e
c
n
e
r
e
f
e
R
e
m
T

i

,

e
m
T

i

)
e
v
i
t
a
l
e
R
(
,
n
o
i
t
a
r
u
D

d
e
e
p
S

,

n
o
i
t
c
e
r
i
D
e
c
n
a
t
s
i
D

,

e
c
n
a
t
s
i
D

,

n
o
i
t
i
s
o
P
e
n
a
L

,

,

n
o
i
t
c
e
r
i
D
,
s
u
i
d
a
R

,

d
e
e
p
S
/
y
t
i
c
o
l
e
V

,

,

e
c
n
a
t
s
i
D
e
t
a
n
i
d
r
o
o
C

d
e
e
p
S

,

e
t
a
n
i
d
r
o
o
C
)
n
a
i
s
e
t
r
a
C

(

l
a
i
t
a
p
s
o
e
G

l
a
r
o
p
m
e
T

n
o
i
t
a
m
r
o
f
n
I

f
o
n
o
i
t
u
b
i
r
t
s
i
D

d
e
v
i
e
c
r
e
P

n
o
i
t
u
b
i
r
t
s
i
D
y
t
i
l
i
b
a
b
o
r
P

,

y
t
i
l
i
b
a
l
l
o
r
t
n
o
C

,

f

e
c
n
e
r
r
u
c
c
O
O
y
t
i
l
i
b
a
b
o
r
P

)
s

m
a
r
a
P
f
o
(

y
t
i
l
i
b
a
i
r
a
V

,

n
o
i
t
a
u
t
c
u

l
F

y
t
i
c
o
l
e
V

n
o
i
t
a
t
n
e
i
r
O

,

n
o
i
t
i
s
o
P

,
)
e
t
u
l
o
s
b
A
/
e
v
i
t
a
l
e
R
(

e
c
n
a
t
s
i
D

,

e
l
g
n
A
/
n
o
i
t
c
e
r
i
D

t
n
e
v
E
c
i
t
s
a
h
c
o
t
S

y
t
n
i
a
t
r
e
c
n
U

included in the scenarios, PEGASUS method supports the identifi-
cation of required inputs (e.g., SafetyArgument, AcceptanceModel,
FailureTree). Consequently, the result of SV-based analysis can be
utilized to understand and analyze the specific aspect of a scenario
method, and data types and target purpose required in each aspect
can be confirmed.

Based on the analysis results of Table 3, we could carry out com-
parative analysis of scenario semantics of the investigated studies,
with respect to four levels (method, suite, scenario, and event).

Method-level. Although the method-level data shared similar-
ities, the level of abstraction supported by SpecMethod and the
observation/evaluation/validation criteria of ExecMethod differed.
Most methods in the ADS domain utilized means of generating
logical or concrete scenarios from abstract/functional scenarios,
which shows the necessity of supporting multiple abstraction levels
for both specification and execution.

Suite-level. Suite-level data could be classified according to the
viewpoints, which showed significant difference in inputs of each
method. The widely used viewpoints in ADS domain were ADS
(i.e., ego vehicle) and traffic infrastructure. The ontologies of target
vehicle, infrastructure, and environment were defined differently
depending on the viewpoint. In addition, the composition method
to coherently formulate multiple scenarios decided scenario classi-
fication criteria (e.g., ordinary-critical, baseline-alternative) within
a scenario suite according to MethodPurpose at method-level. Be-
cause ADSs are safety-critical systems which a malfunction of a
driving function can cause catastrophic damages/loss, scenario de-
velopment that engages safety argument is especially in demand.
Additionally, unlike simple programs defined at a functional or log-
ical levels, the suite-level inputs on physical setting, environment,
and regulatory artifacts were usually required. When data-driven
approach is supported (PEGASUS Method, C. M. Richard et al.’s),
historical data related to driving function and ADS users are also
often required. Compared to the first five methods, Scenic, proposed
by D. J. Fremont et al., is more specialized to develop realistic scenes
and images of the scenes, thus it requires more specific require-
ments and data to create the scenes.

Scenario-level. Based on the scenario-level inputs of ADS scenar-
ios, the detailed specification of environmental context each sce-
nario faces (or interacts with) were crucial compared to other soft-
ware domains. All the analyzed methods utilized the environmen-
tal and operational context such as weatherCondition and station-
aryCondition to process the runtime context of each scenario. These
data are used to define scenario-level condition (e.g., initialCon-
dition, terminalCondition) and constraints (e.g., hardware/software
Constraints, regulatoryConstraints).

The most central data at the scenario level is provided by param-
eterization. Logical scenario utilizes parameter range to specify the
scenario dynamics, and concrete scenario provides a set of concrete
parameter values within the range. To extract more than one exe-
cutable and realistic concrete scenarios from the logical scenario,
the (frequency) distribution of each parameter value also can be
provided. In addition, the parameter is delivered to more than one
event for defining the overall probability of occurrence and event
transitions.

13

Additionally, due to the characteristic of ADS scenarios which
defines the dynamics of participants according to the flow of time
within a region, temporal and geospatial abstraction are considered
as important data. Based on the target timeframe/timeline of each
scenario, temporal abstraction is detailed through phases, stages,
or milestones. Geospatial abstraction mainly details a road net-
work (e.g., layout, geometry) and geospatial changes to effectively
represent scenario-level participants’ movements.

Event-level. Event-level data mostly contained similar semantic
domain, including behavioral, temporal, spatial, and uncertainty
properties. According to the scenario specification method, the unit
behavior of an event may differ, which are often act, action (e.g.,
maneuver), communication (e.g., interrupt, stimuli), and activity.
For not only the intended execution of each behavior, but also
the representation of uncertainty and non-determinism of event
occurrence, probability is frequently specified. Because an event
is a unit accessing actual states or data of scenario participants
(i.e., entities), the semantic domain of temporal and spatial data to
capture the information on when/where to occur varied depending
on the method.

8 DISCUSSION
8.1 Threats to Validity

Content and Construct Validity. Content validity involves the sys-
tematic examination of the survey contents to determine whether
they cover a representative sample of the domain to be measured.
Construct validity generally refers to the degree to which a survey
is legitimately conducted (i.e., legitimate experimental setup) and
the survey measures what it says it measures. In other words, the
content validity describes whether a systematic investigation was
conducted to collect the representative data, and the construct va-
lidity describes whether the survey was conducted with a proper
and correct way.

To satisfy the content validity, this study designed search key-
words and queries to software and systems engineering domain,
which has a high potential for employing scenario methods. How-
ever, because the selection of more than 50K publications was not
feasible, the search was limited to event-based methods and target
engineering activities, such as requirements engineering, design,
simulation, and testing. Since these activities (and their engineer-
ing domains) were discovered as frequent use cases of scenario
methods through our preliminary investigation, our data collection
was expected to collect representative data of the overall contents
related to scenarios and scenario methods.

Although various survey approaches were considered, this study
designed a semi-systematic literature review to primarily satisfy
the construct validity. Still, there are three elements that can hider
this validity. First, 100 publications were finally selected based on
the subjective selection criteria (relevance-criteria of Table 1) to
conduct a full-read review. Since in-depth analysis and manual col-
lection of conceptual data on all of the finally-selected publications
require several hours of tedious work, 100 publications were further
selected from the 354 publications to conduct a questionnaire-based
investigation (i.e., full-read). Second, a keyword-based search was

conducted on the textual description of each publication investi-
gated. In other words, because we had to find the target data using
a keyword in PDF files (e.g., we searched “cond*” for finding pre-
/post-conditions), the data could not be collected if an investigated
paper did not explicitly write the term to be searched. Third, manual
inspection of conceptual data was conducted in the full-read step.
However, we designed and used a questionnaire and look-up tables
to minimize the missed data and to maximize the consistency of
the data collection.

Internal and External Validity. Internal validity refers to an in-
ductive estimate of the degree to which conclusions about causal
relationships can be made, based on the measures, research setting,
and whole research design (i.e., subjectiveness). External validity
refers to the extent to which the internally valid results of a study
can be held to be true for other cases (i.e., generalizability). In other
words, the internal validity determines whether the rationale of
the internal results (e.g., scenario variables in this study) can be
provided from the collected survey data, and the external validity
determines whether the generalization of this study (i.e., extension
to other studies, cases, and domains) is possible.

First, this study aimed to satisfy the validities by defining the
characteristics and concepts from the data consolidation and classi-
fication, excluding the authors’ subjective definitions. As discussed
above, we reviewed the publications not only from a technical as-
pect, but also based on scenario descriptions developed and used in
actual approaches (e.g., scenario instances). The conceptual model,
an abstraction of the entire collected data set, is expected to include
comprehensive results from the scenario investigation separate
from the settings constructed in this study. In other words, all of
the conceptual variables defined in this study are based on the
concepts, terms, and data from the survey, and thus satisfying the
internal validity.

Also, the investigated scenario methods were employed for both
academic purposes and industrial/practical uses. Consequently, the
scenario variables of our study can be considered generic concepts
for a variety of engineering and application domains. In the case
of domain-specific methods, the survey did not collect the entire
domain-specific elements; instead they are generalized and mapped
to higher-level concepts during the data collection. In addition, even
though the variables are defined as generic concepts, we evaluated
the applicability and extensibility of the variables using specialized
scenario instances of a particular domain (ADS scenarios in this
study). Therefore, the scenario variables and conceptual scenario
model we developed have external validity as they can be extended
and applied to external cases.

8.2 Remaining Challenges
The RQ3 of our survey needs to be answered by identifying chal-
lenges ahead in developing and applying scenario methods. Even
though we systematically collected and conceptualized the SVs,
practical/industrial application of the scenario methods remains
several issues.

Inaccessible information of black-box participants. Most of the
investigated scenarios are developed under the assumption that
the information of the scenario participants who are included or

14

exhibit behaviors in a scene or an event is accessible. Scenario
exercise is an execution stage of the specified scenario with the
actual context input. At this time, there may be a limitation or
restriction on data access that were not considered in the scenario
planning/development stage. As the scale and the complexity of
systems increase (e.g., System-of-Systems), there are more cases
where the internal property and data of the constituent systems (or
subsystems) are not directly accessible or controllable. To resolve
this, many existing research defines various abstraction levels (e.g.,
function/abstract - logical - concrete/executable, in order of con-
creteness) and supports the specification of the parameter ranges
of the property and data at the logical level. To define EventBe-
havioral and EventAction of the event-level SVs, analysis on the
accessible data need to be performed. When there is a lack of in-
formation, EventUncertainty based on a cause need to be correctly
and reasonably defined.

Composition of multiple scenarios as a suite. Although most sce-
nario methods provided specific semantics and syntax to specify
a scenario, these methods do not discuss how to formulate and
integrate multiple scenarios into a scenario suite. As defined in the
SuiteScenarioComposition of suite-level SV, multiple scenarios in a
scenario suite sharing a same viewpoint may have inter-scenario
relationships, such as association (general interaction), dependency,
concurrency, and causality. In addition, an event included in a sce-
nario can depend or interact with an event of a different scenario,
which can affect the scenario composition and future exercises. Ul-
timately, a developed scenario suite should be coherently organized.
Multiple scenarios in a suite should depict the occurrence such
that a scenario engineer can strategically and effectively utilize
scenarios (e.g., prioritizing scenario groups in a suite).

Scenario-level assessment of test/simulation complexity. As men-
tioned above, scenarios can be a useful communication tool through-
out the software/system development. However, the complexity
of functional or operational scenarios—which are written in a nar-
rative style—from goal/requirements engineering stage and exe-
cutable/concrete scenarios for test/simulation many significantly
differ. For example, to describe an executable real-world-like situa-
tion in aviation or ADS scenarios, real sensor data and actuation
mechanisms need to be described in detail [35]. Based on our in-
vestigation, most scenarios developed at the system analysis and
architecture stage do not accompany an analysis on the cost at the
execution stage. Therefore, a standardized method to evaluate the
complexity of executing the developed scenario suite and scenar-
ios, and an appropriate development process need to be provided
to resolve when the complexity is above a certain threshold (e.g.,
decomposing to multiple sub-scenarios for upscaling in the future).

Top-down and bottom-up approaches for scenario development.
Scenario itself is an important artifact that needs to be complete and
error-free similar to software code. However, detailed analysis and
scenario development of countless contextual alternatives may cost
as much as an actual system development. Although SpecMethod
and ExecMethod of method-level SV were defined to analyze how
to develop/specify and execute a scenario, most studies besides the
investigated standards (e.g., OpenSCENARIO/OpenDRIVE and PEGA-
SUS Method) do not specifically scrutinize the scenario development

process. Except for method-level of the 4 levels, suite-scenario-event
levels have a hierarchical structure where a higher-level contains
lower-level elements, and thus top-down or bottom-up approach
may be selected depending on where to start the development
process.

Agile development of scenarios. For smaller scale software (e.g.,
mobile app), agile development process has been suggested and
actively employed to react to frequent changes and to increase
transparency in developing use cases and usage scenarios. However,
process for developing scenarios of large-scale complex systems
(e.g., ADS incident scenario) is usually unidirectional, hierarchical,
and data-centered. These characteristics challenge repetitive re-
finement needed to respond to goal/requirement changes and new
contextual information. In future research, study on agile scenario
development and support for existing methods are needed to reduce
cost and increase efficiency in scenario development and mainte-
nance. In particular, for co-simulation where multiple components
(or subsystems) are modeled and simulated in distributed environ-
ment, the process to improve scenarios based on the feedback from
testing/simulation results is especially required.

9 CONCLUSION
This study stemmed from the lack of conceptual basis in exist-
ing studies that suggested or utilized scenario methods. For this
reason, many scenario engineers, such as methodologists and de-
velopers, have encountered some challenges and difficulties when
employing the methods without well-established understanding. To
resolve this issue, this work emphasizes the necessity of a concep-
tual framework for scenario methods and conducts a study as part
of developing a conceptual scenario framework. First, to provide
comprehensive understanding of scenarios and scenario methods,
this study conducted a semi-systematic literature review, which
investigates and collects conceptual scenario variables (SVs) used
in diverse scenario methods. Second, the collected variables (29
primary SVs, and 91 subordinate SVs) were conceptualized and
organized as a conceptual scenario model (CSM), by meta-modeling
4 level (method-level, suite-level, scenario-level, and event-level) con-
structs of scenario methods. To evaluate the applicability of the SVs
and CSM, three representative scenario instances were analyzed
with respect to construct variables of CSM.

The ultimate goal of this study was to develop a conceptual
scenario framework that can be utilized in various engineering
activities and application domains. Based on the SVs and CSM,
the framework will provide a scenario modeling method including
a modeling language to promote the application of the scenario
methods. Also, by defining dimensions (and facets), it is expected
that dimension-based analysis and positioning of scenario methods
are enabled by the framework, instead of analyzing the entire set
of variables. Lastly, as discussed in Section 8, there are remaining
challenges for scenario engineers to practically employ the sce-
nario methods, especially for actual engineering activities, such
as simulation, testing, and verification. Our future work will con-
centrate on the framework’s practical capability to support the
scenario-based engineering in a particular application domain (i.e.,
domain-specific).

15

REFERENCES
[1] Ian Alexander. 2000. Scenarios in Systems Engineering: A Range of Techniques for
Engineering Better Systems. http://www.scenarioplus.org.uk/papers/scenarios/
intro_to_scenarios.htm

[2] Johannes Bach, Stefan Otten, and Eric Sax. 2016. Model based scenario specifi-
cation for development and test of automated driving functions. In 2016 IEEE
Intelligent Vehicles Symposium (IV). 1149–1155. https://doi.org/10.1109/IVS.2016.
7535534

[3] Gerrit Bagschik, Till Menzel, and Markus Maurer. 2018. Ontology based Scene
Creation for the Development of Automated Vehicles. https://doi.org/10.1109/
IVS.2018.8500632

[4] Gerrit Bagschik, Andreas Reschka, Torben Stolte, and Markus Maurer. 2016.
Identification of Potential Hazardous Events for an Unmanned Protective Vehicle.
In 2016 IEEE Intelligent Vehicles Symposium (IV). 691–697. https://doi.org/10.
1109/IVS.2016.7535462

[5] Lena Börjeson, Mattias Höjer, Karl-Henrik Dreborg, Tomas Ekvall, and Göran
Finnveden. 2006. Scenario types and techniques: Towards a user’s guide. Futures
38, 7 (2006), 723–739. https://doi.org/10.1016/j.futures.2005.12.002

[6] Alessandro Cimatti, Sergio Mover, and Stefano Tonetta. 2011. Efficient Scenario
Verification for Hybrid Automata. 317–332. https://doi.org/10.1007/978-3-642-
22110-1_25

[7] Steven J. Cunning and J. Rozenblit. 2005. Automating test generation for discrete
event oriented embedded systems. Journal of Intelligent and Robotic Systems 41
(2005), 87–112.

[8] Haitao Dan, Robert M. Hierons, and Steve Counsell. 2012. A framework for
pathologies of message sequence charts. Information and Software Technology 54,
11 (2012), 1283–1295. https://doi.org/10.1016/j.infsof.2012.06.010

[9] Marco Dean. 2019. Scenario Planning: A Literature Review. (11 2019). https:

//doi.org/10.13140/RG.2.2.12629.24802

[10] Antonio Di Leva, Emilio Sulis, Angela Lellis, and Ilaria Amantea. 2020. Business
Process Analysis and Change Management: The Role of Material Resource Planning
and Discrete-Event Simulation. 211–221. https://doi.org/10.1007/978-3-030-
23665-6_15

[11] Umut Durak, Okan Topçu, Robert Siegfried, and Halit Oğuztüzün. 2014. Scenario
Development: A Model-Driven Engineering Perspective. https://doi.org/10.5220/
0005009501170124

[12] Max Fancourt. 2016. Scenario Development: A Review of Approaches (ISBN: 978-
92-807-3586-4). Technical Report. UNEP World Conversation Monitoring Centre
(UNEP-WCMC).

[13] João Pascoal Faria and Ana Cristina Ramada Paiva. 2014. A toolset for confor-
mance testing against UML sequence diagrams based on event-driven colored
Petri nets. International Journal on Software Tools for Technology Transfer 18
(2014), 285–304.

[14] Association for Standardization of Automation and Measuring Sys-
ASAM OpenSCENARIO: Version 2.0.0 Concepts.

tems (ASAM). 2020.
https://www.asam.net/index.php?eID=dumpFile&t=f&f=3460&token=
14e7c7fab9c9b75118bb4939c725738fa0521fe9

[15] Daniel J. Fremont, Tommaso Dreossi, Shromona Ghosh, Xiangyu Yue, Alberto L.
Sangiovanni-Vincentelli, and Sanjit A. Seshia. 2019. Scenic: A Language for
Scenario Specification and Scene Generation. In Proceedings of the 40th ACM SIG-
PLAN Conference on Programming Language Design and Implementation (Phoenix,
AZ, USA) (PLDI 2019). Association for Computing Machinery, New York, NY,
USA, 63–78. https://doi.org/10.1145/3314221.3314633

[16] Michel Godet. 2000. The Art of Scenarios and Strategic Planning: Tools and
Pitfalls. Technological Forecasting and Social Change 65, 1 (2000), 3–22. https:
//doi.org/10.1016/S0040-1625(99)00120-1

[17] Joel Greenyer, Daniel Gritzner, Timo Gutjahr, Florian König, Nils Glade, Assaf
Marron, and Guy Katz. 2017. ScenarioTools–A tool suite for the scenario-based
modeling and analysis of reactive systems. Science of Computer Programming
149 (2017), 15–27.

[18] Joel Greenyer, Max Haase, Jörg Marhenke, and Rene Bellmer. 2015. Evaluating
a formal scenario-based method for the requirements analysis in automotive
software engineering. 1002–1005. https://doi.org/10.1145/2786805.2804432
[19] Thomas R. Gruber. 1995. Toward principles for the design of ontologies used
for knowledge sharing? International Journal of Human-Computer Studies 43, 5
(1995), 907–928. https://doi.org/10.1006/ijhc.1995.1081

[20] Aaron Heinz and Johann Schweiger Wolfram Remlinger. 2017. Track- / Scenario-

based Trajectory Generation for Testing Automated Driving Functions.

[21] Patrick Heymans and Eric Dubois. 1998. Scenario-Based Techniques for Support-
ing the Elaboration and the Validation of Formal Requirements. Requirements
Engineering 3 (1998), 202–218.

[22] Yosef Jabareen. 2009. Building a Conceptual Framework: Philosophy, Definitions,
and Procedure. International Journal of Qualitative Methods 8, 4 (2009), 49–62.
https://doi.org/10.1177/160940690900800406

[23] Shafagh Jafer, Bharvi Chhaya, and Umut Durak. 2017. Graphical Specification
of Flight Scenarios with Aviation Scenario Defintion Language (ASDL). https:
//doi.org/10.2514/6.2017-1311

[49] Keith Wiebe, Monika Zurek, Steven Lord, Natalia Brzezina, Gnel Gabrielyan,
Jessica Libertini, Adam Loch, Resham Thapa-Parajuli, Joost Vervoort, and Henk
Westhoek. 2018. Scenario Development and Foresight Analysis: Exploring Op-
tions to Inform Choices. Annual Review of Environment and Resources 43, 1 (2018),
545–570. https://doi.org/10.1146/annurev-environ-102017-030109

[50] Carsten Wiecher, Sergej Japs, Lydia Kaiser, Joel Greenyer, Roman Dumitrescu, and
Carsten Wolff. 2020. Scenarios in the loop: integrated requirements analysis and
automotive system validation. In Proceedings of the 23rd ACM/IEEE International
Conference on Model Driven Engineering Languages and Systems: Companion
Proceedings. 1–10.

[51] Robert L. Wittman. 2009. Defining a Standard: The Military Scenario Definition
Language Version 1.0 Standard. In Proceedings of the 2009 Spring Simulation
Multiconference (San Diego, California) (SpringSim ’09). Society for Computer
Simulation International, San Diego, CA, USA, Article 73, 5 pages.

[52] Teng Zhang, John Wiegley, Theophilos Giannakopoulos, Gregory Eakman, Clé-
ment Pit-Claudel, Insup Lee, and Oleg Sokolsky. 2018. Correct-by-Construction
Implementation of Runtime Monitors Using Stepwise Refinement. In Depend-
able Software Engineering. Theories, Tools, and Applications, Xinyu Feng, Markus
Müller-Olm, and Zijiang Yang (Eds.). Springer International Publishing, Cham,
31–49.

[53] Xizhe Zhang, Siddartha Khastgir, and Paul Jennings. 2020. Scenario Description
Language for Automated Driving Systems: A Two Level Abstraction Approach.
In 2020 IEEE International Conference on Systems, Man, and Cybernetics (SMC).
973–980. https://doi.org/10.1109/SMC42975.2020.9283417

[24] Shafagh Jafer, Bharvi Chhaya, Umut Durak, and Torsten Gerlach. 2016. Formal
Scenario Definition Language for Aviation: Aircraft Landing Case Study. https:
//doi.org/10.2514/6.2016-3521

[25] Shafagh Jafer, Bharvi Chhaya, Jessica Updegrove, and Umut Durak. 2018. Schema-
based Ontological Representations of a Domain-Specific Scenario Modeling Lan-
guage.

[26] Shafagh Jafer and Umut Durak. 2017. Tackling the Complexity of Simulation
Scenario Development in Aviation. In Proceedings of the Symposium on Modeling
and Simulation of Complexity in Intelligent, Adaptive and Autonomous Systems
(Virginia Beach, Virginia) (MSCIAAS ’17). Society for Computer Simulation Inter-
national, San Diego, CA, USA, Article 4, 10 pages.

[27] Dimitris Karagiannis. 2013. Meta-Modeling as a Concept: The Conceptualization

of Modeling Methods. In GI-Jahrestagung.

[28] Siddartha Khastgir, Simon Brewerton, John Thomas, and Paul Jennings. 2021.
Systems Approach to Creating Test Scenarios for Automated Driving Systems.
Reliability Engineering & System Safety 215 (2021), 107610. https://doi.org/10.
1016/j.ress.2021.107610

[29] Kei Kurakawa. 2004. A scenario-driven conceptual design information model
and its formation. Research in Engineering Design 15 (09 2004), 122–137. https:
//doi.org/10.1007/s00163-004-0050-z

[30] Jens Mazzega, Daniel Lipinski, Ulrich Eberle, Helmut Schittenhelm, and Walther

Wachenfeld. 2019. PEGASUS METHOD. Technical Report.

[31] Till Menzel, Gerrit Bagschik, Leon Isensee, Andre Schomburg, and Markus Maurer.
2019. From Functional to Logical Scenarios: Detailing a Keyword-Based Scenario
https://doi.org/10.
Description for Execution in a Simulation Environment.
48550/ARXIV.1905.03989

[32] Till Menzel, Gerrit Bagschik, and Markus Maurer. 2018. Scenarios for Develop-
ment, Test and Validation of Automated Vehicles. https://doi.org/10.1109/IVS.
2018.8500406

[33] Philip Notten. 2006. Chapter 4 Scenario development: a typology of approaches.

Think Scenarios, Rethink Education (01 2006).

[34] Christian M. Richard, John L. Campbell, and James L. Brown. 2006. Task Analysis

of Intersection Driving Scenarios: Information Processing Bottlenecks.

[35] Scott Schnelle, Mohamed Kamel Salaani, Sughosh Rao, Frank Barickman, and
Devin H. Elsasser. 2019. Review of Simulation Frameworks and Standards Related
to Driving Scenarios.

[36] Barbara Schütt, Thilo Braun, Stefan Otten, and Eric Sax. 2020. SceML: A Graph-
ical Modeling Framework for Scenario-Based Testing of Autonomous Vehi-
cles. In Proceedings of the 23rd ACM/IEEE International Conference on Model
Driven Engineering Languages and Systems (Virtual Event, Canada) (MOD-
ELS ’20). Association for Computing Machinery, New York, NY, USA, 114–120.
https://doi.org/10.1145/3365438.3410933

[37] Robert Siegfried, Alexander Laux, Martin Rother, Dieter Steinkamp, Günter
Herrmann, Johannes Lüthi, and Matthias Hahn. 2012. Scenarios in military
(distributed) simulation environments.

[38] Ernst Sikora, Marian Daun, and Klaus Pohl. 2010. Supporting the Consistent
Specification of Scenarios across Multiple Abstraction Levels, Vol. 6182. 45–59.
https://doi.org/10.1007/978-3-642-14192-8_6

[39] SISO-GUIDE-006-2018 2014. Guideline on Scenario Development for (Distributed)

Simulation Environments. STO Technical Report. Brussels: NATO.

[40] SISO-GUIDE-006-2018 2018. Guideline on Scenario Development for Simulation
Environments. Standard. Guideline for Scenario Development (GSD) Product
Development Group, Orlando, FL.

[41] SISO-STD-007-2008 2008. Standard for Military Scenario Definition Language
(MSDL). Standard. Simulation Interoperability Standards Organization, Inc.
[42] Hajime Tomizawa. 2007. AUTOMATED SCENARIO GENERATION SYSTEM IN

A SIMULATION. (01 2007).

[43] Wei-Tek Tsai, Xiaoying Bai, Ray Paul, and Lian Yu. 2001. Scenario-based func-
tional regression testing. In 25th Annual International Computer Software and
Applications Conference. COMPSAC 2001. IEEE, 496–501.

[44] Wei-Tek Tsai, C. Fan, Zhichao Cao, B. Xiao, Hao Huang, Weiren Song, Xu Liu,
Xiaoming Wei, Ringku Paul, Yuan Chen, and Dai Zhang. 2021. A Scenario-
Based Service-Oriented Rapid Multi-Agent Distributed Modeling and Simulation
Framework for SoS/SOA and Its Applications. (08 2021).

[45] Jessica Updegrove and Umut Durak. 2018. Schema-based Ontological Represen-
tations of a Domain-Specific Scenario Modeling Language. Journal of Simulation
Engineering 1 (01 2018).

[46] Philip W.F van Notten, Jan Rotmans, Marjolein B.A van Asselt, and Dale S
Rothman. 2003. An updated scenario typology. Futures 35, 5 (2003), 423–443.
https://doi.org/10.1016/S0016-3287(02)00090-3

[47] Jianyi Wang, Lihong Jiang, and Hongming Cai. 2014. Scenario-Based Method
for Business Process Analysis and Improvement in SOA. In 2014 IEEE 11th Inter-
national Conference on e-Business Engineering. 19–25. https://doi.org/10.1109/
ICEBE.2014.16

[48] Mingyun Wen, Jisun Park, Yunsick Sung, Yong Woon Park, and Kyungeun
Cho. 2021. Virtual Scenario Simulation and Modeling Framework in Au-
tonomous Driving Simulators. Electronics 10, 6 (2021). https://doi.org/10.3390/
electronics10060694

16

A FINALLY SELECTED 100 PUBLICATIONS FOR THE FULL-READ

Table 4: FSP-100

No
1
2
3

F. Authors
Lee J.
Ohnishi
Nakajima T.

Search Engine Title
Scopus

Year
2001
2002 WoS
2003

Scopus

Alfonso A.
Tsai

Scopus

2004
2005 WoS

4
5

6
7
8

9
10
11
12

13
14
15

Cunning S.J.
Auguston M.
Saiedian H.

Alspaugh T.A.
Letier E.
Ohnishi A.
Alrajeh D.

Damas C.
Sapna P.G.
Some S.S.

Diallo M.H.
Ghanmi A.
Chen Z.
Gonzalez R.A.

16
17
18
19
20 Mittal S.

2005
2005
2005

2005
2005
2006
2006

2006
2008
2008

2008
2009
2009
2009
2009

Scopus
Scopus
Scopus

Scopus
Scopus
Scopus
Scopus

Scopus
Scopus
Scopus

Scopus
Scopus
Scopus
Scopus
Scopus

21
22

23
24

25
26
27
28

Zulkernine M.
Park J.-Y.

2009
2010

Scopus
Scopus

Trinh T.-B.
Huang Y.-S.

2010
2010

Scopus
Scopus

Aceituna
Huang Y.-S.
Kim
Stroeve S.H.

Scopus

2010 WoS
2011
2011 WoS
2011

Scopus

Song I.-G.
Dumas X.
Li J.
Li J.
Singh S.K.
Harel D.
Lo D.

29
30
31
32
33
34
35
36 Waeselynck H.
37
Intana A.
38 Maoz S.
39
40

Szimanski F.
Brenner C.

2011
2011
2011
2011
2012
2012
2012
2012
2013
2013
2013
2013

Scopus
Scopus
Scopus
Scopus
Scopus
Scopus
Scopus
Scopus
Scopus
Scopus
Scopus
Scopus

Verifying scenarios with time Petri-nets
The consistency management of scenarios from different viewpoints
Automatic Testing of Embedded Software Based on State-Transition Requirement
Specifications
Visual timed event scenarios
A robust testing framework for verifying Web services by completeness and
consistency analysis
Automating test generation for discrete event oriented embedded systems
Environment behavior models for scenario generation and testing automation
Scenario-based requirements analysis techniques for real-time software systems:
A comparative evaluation
Scenarios, state machines and purpose-driven testing
Monitoring and control in requirements analysis
Improvement of the correctness of scenarios with rules
Inferring operational requirements from scenarios and goal models using inductive
learning
Scenarios, goals, and state machines: A win-win partnership for model synthesis
Automated scenario generation based on UML activity diagrams
An approach for supporting system-level test scenarios generation from textual
use cases
Toward architecture evaluation through ontology-based requirements-level scenarios
A Framework for the design of a military operational supply network
An abstract approach to describing scenario-based specifications
Crisis response simulation combining discrete-event and agent-based modeling
DEVS/SOA: A Cross-Platform Framework for Net-centric Modeling and Simulation
in DEVS Unified Process
Towards model-based automatic testing of attack scenarios
A graph-based representation of game scenarios; Methodology for minimizing
anomalies in computer game
A runtime approach to verify scenario in multi-agent systems
Critical scenarios and their identification in parallel railroad level crossing traffic
control systems
SQ(2)E: An Approach to Requirements Validation with Scenario Question
A simulation-based equipment environment for flexible manufacturing systems
A Validation Process for Real Time Transactions
Contrasting safety assessments of a runway incursion scenario by event sequence
analysis versus multi-agent dynamic risk modelling
An approach to identifying causes of implied scenarios using unenforceable orders
Application of partial-order methods for the verification of closed-loop SDL systems
Simulation and uniform design-based automatic generation of risk scenarios
Simulation-based automatic generation of risk scenarios
A novel approach for deriving test scenarios and test cases from events
Behavioral programming
Scenario-based and value-based specification mining: Better together
TERMOS: A formal language for scenarios in mobile computing systems
Adding value to WSN simulation through formal modelling and analysis
Counter play-out: Executing unrealizable scenario-based specifications
Improving business process models with agent-based simulation and process mining
The scenariotools play-out of modal sequence diagram specifications with
environment assumptions

17

F. Authors
Abe T.
De Nicola A.

Year
2013
2014

Search Engine Title
Scopus
Scopus

No
41
42

43

44

Rasheed A.

2014

Scopus

Ha S.

2014

Scopus

45 Wang J.
46
47

Hu D.
Simeone D.

2014
2014
2014

Scopus
Scopus
Scopus

48
Rieke R.
49 Moallemi M.

2014
2014

Scopus
Scopus

50
Intana A.
51 Muta H.
Shiota E.
52
Jurkiewicz J.
53
Jun T.
54

Goto K.
Guilly T.L.
Bergenthum R.
Kim K.

55
56
57
58
59 White M.

2015
2015
2015
2015
2015

2015
2015
2015
2015
2015

Scopus
Scopus
Scopus
Scopus
Scopus

Scopus
Scopus
Scopus
Scopus
Scopus

60
61

62
63
64

65
66

67
68
69
70
71
72
73

74

75

76

77
78

Ko D.
Houser A.

2015
2016

Scopus
Scopus

Kawazoe H.
Shiota E.
Ko D.

2016
2016
2016

Scopus
Scopus
Scopus

Bakar N.A.A.
Aslani M.

2017
2017

Scopus
Scopus

Bao Y.
Steinberg S.
Cassol V.J.
Apaolaza A.
Beal J.
Saeedloei N.
Jafer S.

2017
2017
2017
2017
2017
2017
2018

Scopus
Scopus
Scopus
Scopus
Scopus
Scopus
Scopus

Zhang T.

2018

Scopus

Li M.

2018

Scopus

Furfaro A.

2018

Scopus

Steinberg S.
Gritzner D.

2018
2018

Scopus
Scopus

Modeling security threat patterns to derive negative scenarios
A semantics-based approach to generation of emergency management scenario
models
Adaptive routing update approach for vanet using local neighbourhood change
information
DEVS-based scenario manager of multibody dynamics simulator for shipbuilding
production process (WIP)
Scenario-based method for business process analysis and improvement in SOA
Ontology-based scenario modeling and analysis for bank stress testing
Operational scenarios simulation to support building design: A hospital design
case study
Monitoring security compliance of critical processes
Threat modeling for aircraft access to national airspace system wide information
management program
A model-based trace testing approach for validation of formal co-simulation models
A multi-objective genetic algorithm using intermediate features of simulations
A visualization tool for scenario-based software development
Automated events identification in use cases
Analysis of induced Traffic Alert and Collision Avoidance System collisions in
unsegregated airspace using a Colored Petri Net model
Support of scenario creation by generating event lists from conceptual models
To Do and Not to Do: Constrained Scenarios for Safe Smart House
Verification of Scenarios in Petri Nets Using Compact Tokenflows
Modeling of complex scenarios using LVC simulation
Generating Reproducible and Replayable Bug Reports from Android Application
Crashes
Automatic use case flow pattern generation using verb clustering
A formal approach to modeling and analyzing human taskload in simulated air
traffic scenarios
A test framework for large-scale message broker system for consumer devices
Scenario retrieval method using differential scenario
Suggesting Alternative Scenarios Using Use Case Specification Patterns for
Requirement Completeness
A simulation model for crowd evacuation of fire emergency scenario
Adaptive traffic signal control with actor-critic methods in a real-world traffic
network with different traffic disruption events
An object-oriented XML description specification for scenario entity
Distributing scenario-based models: A replicate-and-project approach
Simulating Crowds in Egress Scenarios
WevQuery: Testing hypotheses about web interaction patterns
Self-adaptation to device distribution in the internet of things
From scenarios to timed automata
A framework for rapid configuration of collaborative aviation system-of-systems
simulations
Correct-by-Construction Implementation of Runtime Monitors Using Stepwise
Refinement
An interactive model-driven simulation approach for dynamic behavior analysis
in armed conflicts
Cybersecurity compliance analysis as a service: Requirements specification
and application scenarios
Efficient distributed execution of multi-component scenario-based models
Synthesizing Executable PLC Code for Robots from Scenario-Based GR(1)
Specifications

18

No
79

F. Authors
Greenyer J.

Year
2018

Search Engine Title
Scopus

80

81
82
83

84

85

86
87

88
89

90

Papelis Y.

2018

Scopus

Ami A.S.
Anthi E.
Naweed A.

2018
2019
2019

Scopus
Scopus
Scopus

Kuhn T.

2019

Scopus

Na H.S.

2019

Scopus

Butler M.
De Nicola A.

2019
2019

Scopus
Scopus

Fremont D.J.
Greenyer J.

2019
2019

Scopus
Scopus

Katz G.

2019

Scopus

91 Mozo A.

2019

Scopus

92

93

94
95

96

97

Zhu F.

2019

Scopus

Shah S.A.A.

2019

Scopus

Hejase M.
Paranjape I.

2020
2020

Scopus
Scopus

Irshad L.

2020

Scopus

Arani M.

2020

Scopus

98 Morando L.

2020

Scopus

99

Padrah Z.

2021

Scopus

100

Snook C.

2021

Scopus

Towards systematic and automatic handling of execution traces associated
with scenario-based models
Using event templates to accellerate scenario development in virtual training
environments
Mobicomonkey: Context testing of Android apps
A Supervised Intrusion Detection System for Smart Home IoT Devices
A team drives the train: Human factors in train controller perspectives of the
controller-driver dynamic
Automated scenario-based evaluation of embedded software and system
architectures
Agent-based discrete-event simulation model for no-notice natural disaster
evacuation planning
Behaviour-driven formal model development of the ETCS Hybrid Level 3
Creative design of emergency management scenarios driven by semantics:
An application to smart cities
Scenic: A language for scenario specification and scene generation
Towards Automated Defect Analysis Using Execution Traces of
Scenario-Based Models
On-the-fly construction of composite events in scenario-based modeling
using constraint solvers
Scalable Prediction of Service-Level Events in Datacenter Infrastructure
Using Deep Neural Networks
Reusability and composability analysis for an agent-based hierarchical
modelling and simulation framework
An effective back-off selection technique for reliable beacon reception in
VANETs
A Methodology for Model-Based Validation of Autonomous Vehicle Systems
A Modular Architecture for Procedural Generation of Towns, Intersections and
Scenarios for Testing Autonomous Vehicles
Automated generation of fault scenarios to assess potential human errors and
functional failures in early design stages
Scenario-Based Simulation Approach for An Integrated Inventory Blood
Supply Chain System
Social Drone Sharing to Increase the UAV Patrolling Autonomy in
Emergency Scenarios
Development and validation of an isa100.11a simulation model for accurate
industrial wsn planning and deployment
Domain-specific scenarios for refinement-based methods

19

B DEFINITION OF SCENARIO VARIABLES

Level Variable Name
MethodPurpose
M

SpecMethod

ExecMethod

St

SuiteMetaData

SuiteViewpoint

SuiteOntology

SuiteConstituents

SuiteInput

SuiteScenarioComposition

Table 5: Primary SV definitions

Definition/Use
To define the target problem domain and specific vision/goal
to be solved by utilizing the scenario method. Clearly de-
fines purpose, configures hypotheses containing the as-
sumptions and evidence needed for decision-making, pro-
vides information for deciding strategies to improve the
effectiveness/efficiency of the method. Also to determine
a specific use(s) of scenarios (e.g. predictive (forecasting,
what-if), explorative (external, strategic), normative (pre-
serving, transforming))
To express the information on the method to de-
velop/specify scenario model used or required in the sce-
nario method. Since SpecMethod produces a specific sce-
nario instance, formality is decided by the semantics and
syntax of the outcome. Generally describes the Scenario
Modeling Method and Modeling Language and often used
at a narrative or draft scenario logic-level.
To express the information on the method to exercise or
execute a developed scenario model. Classified as testing,
simulation and training types, and used as the engine or
driver required by the formalism and execution environ-
ment. Contains data to be considered, such as condition,
automation, output, media, and measure.

To store the suite-level metadata containing more than one
scenario. Provides an overview of the shared viewpoint of
constituent scenarios and events at a macro-level, accessible
data, and characteristics (e.g. complexity, scale).
To configure the shared viewpoint, goal/value, and baseline
between multiple scenarios. Common category of multiple
scenarios are generally decided based on the MethodPur-
pose of method-level
To determine the boundary of the scenario method by defin-
ing the entity, situation, and factor, etc., utilized (or accessed)
by scenario(s) in a suite. Apart from system, infrastructure,
and environment, which constitute a complex system, situ-
ation and intangible factor in World-of-Interest (WoI) are
defined. Depending on the need, Relationship and Entity-
Constraint can also be defined.
To define the pool of scenario constructs constituing the
suite. Instead of simply defining the component model, mod-
els defined as constituents can be combined or repeatedly
reused.
To define the inputs shared by multiple scenarios. Since a
suite is a unit of sharing a viewpoint, data applied to more
than one scenario is used as suite-level input.
To define the inter-scenario relationship to coherently
organize/combine multiple scenarios. Depending on the
SpecMethod or MethodPurpose, method to compose sce-
narios within a suite may differ. The most general method is
baseline/expected scenario composition. Can contain many
alternative relationships and concurrency may be defined
for parallel execution.

20

Subordinate SVs
TargetProblemDomain
TargetVisionIntent
Hypothesis
StrategyTactic
Assumption

SpecType
SpecSemantics
SpecSyntax
SpecLanguage
SpecFormality

ExecType
ExecDriver
ExecCondition
ExecAutomation
ExecOutput
ExecMedia
ExecMeasure
SuiteMetaInformation
SuiteScaleComplexity

SuiteGoalValue
SuitePerspective
SuiteBaselineScenario

SystemOntology
InfraOntology
EnvOntology
SituationOntology
IntangibleFactorOntology

SuiteScenarioPool
SuiteEventPool
SuiteDataPool

SuiteInputConfiguration
SuiteInputData
SuiteInputModel
InterScenarioAssociation
InterScenarioConcurrency

Level Variable Name
Scn

ScenarioMetaData

ScenarioElements

ScenarioTarget

ScenarioInput

ScenarioOutput

ScenarioCondition

ScenarioTemporal

ScenarioGeospatial

ScenarioChange

Definition/Use
To define a single scenario type and unit. Scenario type is
defined differently depending on the application domain.
Scenario unit has a strong relation to temporal/geospatial
scale.
To define components inside a single scenario. A sce-
nario contains various paths and patterns in a sequence
of scenes/events, and describes these data as a whole. Since
elements in a scenario are reusable, each element are de-
composable. (e.g., complex event -> unit events)

To define a target the scenario aims to represent or analyze.
Contains information on not only the general behaviors
abstracted as events, but also the criticality and anomaly
to be validated along with the appropriate scenario-level
inputs.
To store data on the necessary inputs to specify a scenario.
Contains data, model, and variables used in a scenario spec-
ification, utilized as event-level parameters.
To store data on the obtained outputs from specifying a sce-
nario. Generally defines how a specified scenario is utilized
as other model and data.
To define the conditions throughout the execution path (e.g.,
sequence of events (interactions)) of a single scenario. Uti-
lized to define constraint, precondition, and postcondition
of a scenario. Depending on the condition, alternative exe-
cution path is decided. A scenario can form the boundary
condition as exogenous variable type. Can be defined as an
invariant when the value needs to be maintained during
scenario execution (i.e. hard constraint).
To describe the temporal information needed in a single
scenario.

To describe the geospatial information needed in a single
scenario.
To describe the change and causes of change that can occur
in a single scenario.

ScenarioExternalInteraction To describe other scenarios and external elements that can

be interacted from a single scenario perspective.

ScenarioUncertainty

Evn

EventMetaData

EventInput

EventOutput

To define uncertain or non-deterministic factor a single
scenario may encounter during execution. To define the
dimensions of uncertainty considered at a scenario level.
Describes information on how to identify specific sources of
uncertainty and how the uncertainty is manifested. Aims to
describe uncertainty in alternative event and event transi-
tions and to enable analysis on the complexity and deviation
of scenario.
To store the event type/classification and event metatdata.
EventMetaData may be determined by ScenarioMetaData
or ScenarioInput. Manages data on concrete source (and
variable type) of event and occurrence frequency.
To describe the required inputs for a single event definition
or specification. Because data or model corresponding to
EventInput configure event-level property, generally input
specific information of behavior as a parameter type.
To define the expected output and product from a single
event execution/occurrence.

21

Subordinate SVs
ScenarioType
ScenarioUnit

ScenarioParticipant
ScenarioScene
ScenarioEvent
ScenarioInterEventRelationship
ScenarioEventTransitionPath
ScenarioEventPattern
ScenarioTargetBehavior
ScenarioTargetCriticality
ScenarioTargetAnomaly

ScenarioInputConfiguration
ScenarioInputParameter
ScenarioInputModel
ScenarioOutputData
ScenarioOutputModel
ScenarioIndicatorOracle
ScenarioConstraintInvariant
ScenarioPrecondition
ScenarioPostcondition

ScenarioTemporalScale
ScenarioClock
ScenarioTemporalData
ScenarioGeospatialScale
ScenarioGeoLocationType
ScenarioChangeAttribute

ScenarioUserInteraction
ScenarioEnvInteraction
ScenarioInterElementInteraction
EventTransitionUncertainty
ScenarioEnvUncertainty

EventType
EventSource
EventFrequency

EventInputParameter
EventInputModel

EventOutputData
EventExecutionLog

Level Variable Name
EventCondition

Definition/Use
To define a single event occurrence and conditions for event
transition.

EventBehavioral

To describe behavioral information of an event by specifying
an actor and action(s).

EventInteraction

EventTemporal

EventGeospatial

EventUncertainty

To express the event behavior and message included in the
communication. Unlike EventBehavioral variable, which
defines the behavior of a single actor, EventInteraction de-
fines properties of EventNode involved by more than one
Scenario Participants.
To describe the temporal information needed in a single
event.
To describe the geospatial information needed in a single
event.
To describe the uncertainty to be considered for a single
event occurrence or transition. Uncertainty is classified
based on the source to types such as occurrence, partici-
pant/entity, communication, human-induced, and environ-
ment.

Subordinate SVs
EventConstraint
EventPrecondition
EventPostcondition
EventInvariant
EventActor
EventAction
EventOccurrenceMeasure
EventHandler
EventCommAction
EventCommMessage

EventTemporalData
EventSynchronization
EventGeospatialData

OccurrenceUncertainty
ParticipantUncertainty
CommunicationUncertainty
HumanUncertainty
EventEnvUncertainty

22

