Towards Receiver-Agnostic and Collaborative Radio
Frequency Fingerprint Identiﬁcation

Guanxiong Shen, Junqing Zhang, Member, IEEE, Alan Marshall, Senior Member, IEEE,
Roger Woods, Senior Member, IEEE, Joseph Cavallaro, Fellow, IEEE, and Liquan Chen, Senior Member, IEEE

1

2
2
0
2

l
u
J

6

]
P
S
.
s
s
e
e
[

1
v
9
9
9
2
0
.
7
0
2
2
:
v
i
X
r
a

it

Abstract—Radio frequency ﬁngerprint identiﬁcation (RFFI) is
an emerging device authentication technique, which exploits the
hardware characteristics of the RF front-end as device identiﬁers.
RFFI is implemented in the wireless receiver and acts to extract
the transmitter impairments and then perform classiﬁcation. The
receiver hardware impairments will actually interfere with the
feature extraction process, but its effect and mitigation have
not been comprehensively studied. In this paper, we propose a
receiver-agnostic RFFI system that is not sensitive to the changes
is implemented by employing
in receiver characteristics;
adversarial training to learn the receiver-independent features.
Moreover, when there are multiple receivers, this functionality
can perform collaborative inference to enhance classiﬁcation
accuracy. Finally, we show how it is possible to leverage ﬁne-
tuning for further improvement with fewer collected signals. To
validate the approach, we have conducted extensive experimental
evaluation by applying the approach to a LoRaWAN case study
involving ten LoRa devices and 20 software-deﬁned radio (SDR)
receivers. The results show that receiver-agnostic training enables
the trained neural network to become robust to changes in
receiver characteristics. The collaborative inference improves
classiﬁcation accuracy by up to 20% beyond a single-receiver
RFFI system and ﬁne-tuning can bring a 40% improvement for
under-performing receivers.

Index Terms—Internet of Things, LoRa/LoRaWAN, device
authentication, radio frequency ﬁngerprint, adversarial training,
collaborative fusion

I. INTRODUCTION

T HE number of Internet of things (IoT) devices has

exploded in recent years with the emergence of different
standards such as Bluetooth low energy (BLE), WiFi, LoRa,
Sigfox, etc. The authentication of IoT devices is critical for

Manuscript received xxx; revised xxx; accepted xxx. Date of publication
xxx; date of current version xxx. The work was in part supported by
UK Royal Society Research Grants under grant ID RGS/R1/191241 and
National Key Research and Development Program of China under grant
ID 2020YFE0200600. The review of this paper was coordinated by xxx.
(Corresponding author: Junqing Zhang.)

G. Shen, J. Zhang, and A. Marshall are with the Department of Elec-
trical Engineering and Electronics, University of Liverpool, Liverpool,
L69 3GJ, United Kingdom. (email: Guanxiong.Shen@liverpool.ac.uk; jun-
qing.zhang@liverpool.ac.uk; alan.marshall@liverpool.ac.uk)

R. Woods is with the School of Electronics, Electrical Engineering and
Computer Science, Queen’s University Belfast, Belfast, BT9 5AG, United
Kingdom. (email: r.woods@qub.ac.uk)

J. Cavallaro is with the Department of Electrical and Computer Engineering,

Rice University, Houston, USA. (email: cavallar@rice.edu)

L. Chen is with the School of Cyber Science and Engineering, Southeast
University, Nanjing, 210096, China and also with the Purple Mountain
Laboratories for Network and Communication Security, Nanjing, 211111,
China. (e-mail: lqchen@seu.edu.cn)

Color versions of one or more of the ﬁgures in this paper are available

online at http://ieeexplore.ieee.org.
Digital Object Identiﬁer xxx

ensuring that received messages are sent from authorized
and legitimate devices [1]. Conventional device authentication
schemes usually rely on cryptographic solutions and use soft-
ware addresses (e.g. MAC address) as device identiﬁers, but
they are highly susceptible to tampering, resulting in possible
spoof attacks [2]. Cryptographic solutions include public key-
based authentication and symmetric key-based authentication.
For the former, public-key cryptography is quite complex and
its implementation might be beyond the resources affordable
in IoT devices. Indeed, it is quite challenging to securely and
efﬁciently establish symmetric keys in IoT [3].

identiﬁcation (RFFI)

Radio frequency ﬁngerprint

is a
promising non-cryptographic device authentication technique.
Like human ﬁngerprints, wireless devices have unique radio
frequency ﬁngerprints (RFFs) resulting from the impairments
of the hardware components in the transmitter front-end which
are usually challenging to mimic. The impairments generally
include oscillator drift, mixer imperfection, power ampliﬁer
nonlinearity, etc. These have been modelled in previous stud-
ies [4], [5] and deemed to be suitable for device identiﬁcation.
The RFFI system extracts unique features from wireless sig-
nals transmitted by IoT devices to infer their identities. The
RFFI can be formulated as a multi-class classiﬁcation problem,
and there are numerous examples of where deep learning has
been used to boost RFFI performance [5]–[30].

A major challenge for RFFI is that the received signal
not only contains the characteristics of the transmit chain
but is also affected by the receiver chain. The changes in
receiver hardware characteristics can seriously affect RFFI
performance, but their impacts have been, however, usually
overlooked in previous studies. Most existing RFFI work
assumes that the same receiver is used during training and in-
ference and that the receiver characteristics do not change over
time [7]–[10], [22], [26]. However, this assumption does not
always hold in practical IoT applications. For instance, mobile
IoT devices will be served by different access points/gateways,
depending on their coverage. Furthermore, even if the same
the hardware characteristics of low-cost
receiver is used,
receivers may vary over time. Therefore, there is an urgent
need for a receiver-agnostic RFFI system that can be deployed
in a highly practical manner.

As wireless transmissions are broadcast and can be captured
by any receivers within range, it is, therefore, possible to
design a collaborative RFFI protocol that can enhance system
performance. In IoT applications, multiple receivers can be
present with numerous gateways in LoRaWAN and multiple
access points in WiFi enterprise networks, but critically, to

 
 
 
 
 
 
2

the best of our knowledge, there are only two papers that
have explored using multiple receivers in RFFI systems [18],
[31]. However, the algorithm in [31] is not applicable to deep
learning-based RFFI systems, and the method proposed in [18]
is only evaluated with limited experimental work.

In this paper, a receiver-agnostic and collaborative RFFI
protocol is designed which is robust to receiver characteris-
tic variations. In particular, multiple receivers were used to
collect sufﬁcient packets from devices under test (DUTs) in
order to train a receiver-agnostic neural network. During the
inference, receivers are equipped with the trained receiver-
agnostic neural network model. Once a packet is captured,
the receivers initially make independent inferences which are
then fused to permit better classiﬁcation performance. For
our experimental evaluation, we used LoRa/LoRaWAN as a
case study as it is a suitable technique to demonstrate the
ideas. Speciﬁcally, we employed ten commercial-off-the-shelf
(COTS) LoRa nodes as DUTs and 20 software-deﬁned radio
the work
(SDR) platforms as the LoRa gateways. Whilst
focuses on LoRa/LoRaWAN as a case study, our receiver-
agnostic approach is applicable to any RFFI system and the
collaborative protocol is suitable for any wireless technique
with multiple receivers operating simultaneously. The detailed
contributions of this work include:

• The receiver effects on RFFI are experimentally investi-
gated. The RFFI system implemented on low-end SDR
receivers (e.g., RTL-SDR) shows an accuracy drop of
40% over four continuous days, which is probably due to
the unstable hardware characteristics. Moreover, we show
that changing the receiver in an RFFI system can result in
serious performance degradation. For example, the neural
network trained with an RTL-SDR only achieves less than
20% accuracy when the test was using a USRP B200
SDR.

• A receiver-agnostic neural network for RFFI is proposed
using adversarial training. We guide the neural network
to learn receiver-independent features so that it is robust
to performance degradation caused by receiver drift and
change. We propose two training strategies for receiver-
agnostic RFFI, namely homogeneous and heterogeneous
training, depending on the diversity of the training re-
ceivers. The results show that the neural network trained
with heterogeneous adversarial training achieves better
performance than the homogeneous one. Its classiﬁcation
accuracy is over 75% for all of the 20 SDRs and even ex-
ceeds 95% on receivers other than RTL-SDRs. Compared
to the conventional approach, receiver-agnostic training
effectively prevents drastic performance degradation on
previously unseen receivers.

• A collaborative RFFI system with soft or adaptive soft
fusion schemes is proposed and experimentally evaluated
in both residential and ofﬁce building environments. All
the receivers are equipped with the same receiver-agnostic
neural network. They make independent inferences at the
edge and upload them to a network server. The inferences
are then fused by soft fusion or adaptive soft fusion
schemes to achieve higher accuracy. The experimental

results show that collaborative RFFI can improve the
classiﬁcation accuracy by up to 20% compared to the
single-receiver RFFI system.

• A further ﬁne-tuning technique is proposed to mitigate
receiver effects as even after receiver-agnostic training,
the neural network still may not reach satisfactory ac-
curacy on some unseen receivers. To address this, we
propose a ﬁne-tuning approach that can collect a few
packets with the new receiver to slightly adjust the neural
network parameters. The neural network achieves higher
performance with ﬁne-tuning because it better adapts to
the new receiver by re-learning the characteristics of
the received signal. Experimental results show a further
accuracy improvement of up to 40% on receiver-agnostic
neural networks.

The code and dataset will be released to the community upon
formal acceptance of the paper.

The rest of the paper is organized as follows. Section II
introduces conventional RFFI systems and deﬁnes the research
challenge. Section III gives a system overview and elaborates
on each of the system modules. Section IV gives details of
the LoRa/LoRaWAN case study. A controlled experimental
evaluation of the receiver-agnostic training and collaborative
RFFI system carried out in a residential room, is given in
Section V. Section VI provides the experimental results in
an ofﬁce building in which the collaborative RFFI is further
evaluated. Related work is provided in Section VII and Sec-
tion VIII concludes this paper.

II. CONVENTIONAL APPROACH AND PROBLEM
STATEMENT

A. Conventional Deep Learning-based RFFI Approach

An RFFI system aims to classify K IoT end nodes, i.e.
devices under test (DUTs), in a wireless network by analyzing
the received physical layer signals, as shown in Fig. 1. The
received baseband signal y(t) can be mathematically given as

(cid:16)

y(t) = G

h(t) ∗ F k(x(t))

(cid:17)

+ n(t),

(1)

where G(·) denotes the hardware effects of the receiver, h(t)
is the wireless channel impulse response, F k(·) represents
the transmitter chain effect of DUT k, n(t) is the additive
white Gaussian noise (AWGN) and ∗ denotes the convolution
operation. The goal of an RFFI system is to predict
the
transmitter label k by analyzing the collected signal, y(t).
Deep learning algorithms are seen as a suitable solution due
to their excellent feature extraction capabilities.

As shown in Fig. 1, a conventional deep learning-based
RFFI system1 comprises two stages, namely training and
inference. In the training stage,
the receiver ﬁrst collects
signals from the K end nodes operating in the IoT network.
The signal collection procedure is elaborated in Section III-B.
The collected signals are stored as a training dataset, Dtrain,
given as

Dtrain = {(ym, pm)}Mtrain

m=1

,

(2)

1In some literature conventional RFFI refers to system based on handcrafted
features. In this paper, conventional RFFI refers to a typical deep learning-
based system, in contrast to our proposed receiver-agnostic RFFI.

3

which is probably different from the true label, (cid:96). This can
lead to misclassiﬁcation.

As will be experimentally demonstrated in Section V, both
changing a new receiver for inference and the drift of receiver
features over time can seriously degrade RFFI performance. A
solution capable of training receiver-agnostic neural networks
is urgently needed.

III. RECEIVER-AGNOSTIC AND COLLABORATIVE RFFI
SYSTEM

A. System Overview

This paper presents a receiver-agnostic and collaborative
RFFI system. It involves two essential stages, as shown in
Fig. 2(a) and 2(b), namely training a receiver-agnostic neural
network and collaborative inference of multiple receivers.
There is also an optional ﬁne-tuning stage shown in Fig. 2(c).
These stages are summarized below.

1) Train a Receiver-Agnostic Neural Network: As dis-
cussed in Section II-B, neural networks trained with a conven-
tional approach suffer from varying receiver characteristics.
Therefore, we propose to leverage adversarial
training to
obtain a receiver-agnostic neural network.

During the training stage, there are K DUTs and I train-
ing receivers. Each receiver carries out the signal collection
(Section III-B) separately to capture wireless transmissions
from the DUTs within range. The captured signals, i.e. IQ
samples, along with the transmitter and receiver labels, com-
prise the training dataset. The dataset is then augmented with a
wireless channel simulator to improve the channel robustness
of the neural network (Section III-C). The augmented time-
domain IQ samples can be converted to appropriate signal
representations to be used as the input to the neural network
(Section III-D). We can then obtain a receiver-agnostic neural
network by adversarial training (Section III-E).

2) Collaborative Inference of Multiple Receivers: During
the inference, K end nodes and J receivers are involved.
Note that the J inference receivers can be different from the
I training ones. Take the kth end node as an example, its
transmission will be captured by all receivers in the range
thanks to the broadcast nature of wireless transmissions. Each
receiver will be equipped with the receiver-agnostic neural
network. They will ﬁrst carry out inferences independently,
and then the results will be fused to obtain a more reliable
prediction of the transmitter label. This part will be explained
in Section III-F.

3) Fine-Tuning: Fine-tuning can be performed at the re-
ceiver to further improve classiﬁcation accuracy when the
receiver-agnostic neural network does not perform well. A few
packets can be collected by the under-performing receiver to
slightly update the parameters of the trained neural network,
which will be elaborated in Section III-G. Note that ﬁne-tuning
is optional, which can be adopted when further improvement
is required.

B. Signal Collection

The wireless transmissions will be ﬁrst captured by the an-
tenna and then downconverted to the baseband. The baseband

Fig. 1: Overview of a conventional deep learning-based RFFI
system.

where ym is the mth training sample and pm is the corre-
sponding one-hot encoded DUT label, given as

pm = O((cid:96)m),

(3)

where O(·) denotes one-hot encoding operation, (cid:96)m is the
ground truth DUT label of the mth training sample, Mtrain
is the number of training samples. After building the train-
ing dataset, we deﬁne a neural network f and optimize its
parameters Θ using Dtrain as deﬁned below:

Θ = argmin

(cid:88)

Θ

(y,p)∈Dtrain

L(f (y; Θ), p)

(4)

where L(·) is the loss function that is usually cross-entropy
in RFFI systems.

In the inference stage, the receiver captures a signal y(cid:48)(t)
and feeds it into the well-trained neural network f (·; ·) for
prediction. A probability vector ˆp is obtained via inference
and is mathematically deﬁned as

ˆp = f (y(cid:48); Θ),

(5)

where ˆp = {ˆp1, ..., ˆpk, ˆpK} is a probability vector over all
the K DUTs, and ˆpk is the estimated probability for the kth
DUT. The predicted transmitter label, ˆ(cid:96), is derived by simply
selecting the index of element with the highest probability as
deﬁned below:

ˆ(cid:96) = argmax

(ˆp).

(6)

k

B. Problem Statement

As highlighted in the introduction, the receiver effect G(cid:48)(·)
during inference is probably different from the receiver distor-
tion G(·) during training. In this case, the signal captured by
the new receiver, y(cid:48)(t), has different characteristics from the
training signals, y(t). This distribution shift violates the basic
independent and identically distributed (i.i.d) assumption of
deep learning. For instance, when we feed y(cid:48)(t) collected by
another receiver into the neural network to make a prediction,
then the predicted label, ˆ(cid:96), is given as:

ˆ(cid:96) = argmax

(f (y(cid:48); Θ))

k(cid:48)

(7)

Receiver DUT 1DUT k…DUT K…Training datasetTraining StageReceiver DUT kInference StageIoTIoTIoTTrainingNeural NetworkSignal CollectionSignal CollectionIoTNeural NetworkPredicted DUT Label4

Fig. 2: Overview of the proposed receiver-agnostic and collaborative RFFI system. (a) Training of a receiver-agnostic neural
network. (b) Collaborative inference using multiple receivers. (c) Fine-tuning of a trained neural network.

signal will then undergo several steps including synchroniza-
tion & preamble extraction, frequency offset compensation,
and signal normalization.

1) Synchronization & Preamble Extraction: Synchroniza-
tion is used to ﬁnd the accurate start of the received packet.
We then extract the preamble part for RFFI, in order to prevent
the neural network from learning the identiﬁable information
contained in the packet header or payload.

2) Frequency Offset Compensation: There are two reasons

for performing frequency offset compensation:

• The frequency offset feature is easy to spoof by simply
changing the transmitter carrier frequency, making the
system vulnerable to attacks [14], [25], [32].

• The frequency offset is sensitive to temperature changes.
A slight temperature change may make the system fail to
work properly [9], [10], [33].

3) Signal Normalization: This is a standard operation in
deep learning-based RFFI systems to prevent the neural net-
work from classifying devices based on the received power.
The normalization is achieved by dividing the signal by its
root mean square value.

The processed signals along with the transmitter and re-

ceiver labels are stored in the training dataset, given as

X train = {(ym, pm, qm)}Mtrain

m=1

,

(8)

where ym is the mth training signal, i.e. IQ samples, and
Mtrain is the total number of captured transmissions. pm =
{p1, ..., pk, ..., pK} and qm = {q1, ..., qi, ..., qI } are the cor-
responding one-hot encoded transmitter and receiver labels,
respectively. Note that X train for receiver-agnostic training
additionally includes receiver labels, q, compared to the train-
ing dataset Dtrain for conventional RFFI systems given in (2).

C. Data Augmentation

As revealed in (1), variations of channel impulse response
h(t) can affect
the received signal y(t). As discussed in
Section II-B, the characteristic change of y(t) can seriously
degrade the RFFI performance. It is therefore necessary to
mitigate the channel effects on the RFFI system.

Data augmentation has been widely used to address the
channel problem in RFFI [11], [13], [16], [22], [24], [32]. The
training signals are replicated and passed through a channel
simulator to emulate multipath and Doppler effects. With data
augmentation, the training process can cover as many channel
distributions as possible that may be present during inference,
thus improving the system’s robustness to channel variations.

D. Signal Representation

After data augmentation, the signals y can be converted
to suitable signal representations S as neural network inputs.
There have been many types of signal representations in
previous studies, such as error signal [25], channel independent
spectrogram [11], frequency spectrum [8], and differential
constellation trace ﬁgure [17], to name but a few. Note that the
unprocessed IQ samples y can also serve as neural network
inputs after separating I and Q components as two independent
dimensions.

After signal representation, the data used for adversarial
training becomes {(Sm, pm, qm)}R·Mtrain
, where Sm is the
signal representation converted from ym. R is the replication
factor which indicates how many times the training set is
enlarged during data augmentation.

m=1

E. Adversarial Training

Adversarial training is an effective method to solve the prob-
lem of data distribution shift in deep learning [34]. Speciﬁc

Training datasetDUT 1DUT k…DUT K…Receiver 1……Receiver iReceiver ITrained Neural NetworkWireless transmissionSignal CollectionIoTIoTIoTData AugmentationSignal CollectionSignal CollectionAdversarial Training…Receiver 1Receiver j…Receiver JInference FusionIoTSignal CollectionSignalRepresentationSignal CollectionSignalRepresentationSignal CollectionSignalRepresentationDUT kDUT 1DUT k…DUT K…IoTIoTIoTSignal CollectionSignalRepresentationReceiver jFine-TuningFine-tuning datasetFine-tuned Neural Network(a)(b)(c)SignalRepresentationTrained Neural Network5

where ˆqi
is the estimated probability of the packet being
captured by the ith receiver and qi is the ground truth. Our
goal during training is to ﬁnd feature extractor parameters, θ,
that restrict the performance of the receiver classiﬁer.

4) Gradient Reversal Layer: The gradient reversal layer
was ﬁrst proposed in [34] to address the distribution shift
problem. It does not affect forward propagation and only takes
effect during backpropagation. We leverage it to guide the
feature extractor to learn receiver-independent features.

As discussed in Section II, the objective of an RFFI system
is to predict from which DUT the signal is sent, which is
identical to the goal of the transmitter classiﬁer. Therefore, the
performance of the transmitter classiﬁer should be maximized
during training, which can be achieved by minimizing the
transmitter classiﬁer loss, Ltx. In contrast, the goal of the
receiver classiﬁer is to predict the receiver label from the
extracted feature vector. However, this conﬂicts with the objec-
tive of the proposed receiver-agnostic RFFI protocol since we
expect the feature vector to not contain any receiver-related
information. This is equivalent to ensuring that the receiver
classiﬁer cannot predict the correct receiver label from the
feature extractor. Therefore, the performance of the receiver
classiﬁer should be restricted during training, which can be
achieved by limiting the minimization process of Lrx.

The gradient reversal layer can be used to limit the perfor-
mance of the receiver classiﬁer. In a standard gradient descent
process, the θ in the feature extractor is updated by

θ ← θ − µ(

∂Ltx
∂θ
where µ is the learning rate. The role of the gradient reversal
layer is to multiply ∂Lrx
by a negative factor −λ during
∂θ
backpropagation, modifying the updating process to

∂Lrx
∂θ

(13)

+

),

).

− λ

θ ← θ − µ(

∂Ltx
∂θ

∂Lrx
∂θ
the parameters θ of the feature extractor
In other words,
are updated in the opposite direction as instructed by the
receiver classiﬁer. Therefore, the receiver classiﬁer cannot be
improved as its feedback is not correctly followed. With this
adversarial approach, we can train a feature extractor to extract
transmitter-speciﬁc but receiver-independent information.

(14)

Once the training is completed, the receiver classiﬁer is
removed since we do not need to predict the receiver label
in an RFFI system. In the inference stage, the transmitter
classiﬁer is directly connected to the feature extractor to
predict the transmitter identity.

F. Collaborative Inference

As illustrated in Fig. 2(b), each receiver uses the signal col-
lection module explained in Section III-B to capture wireless
transmissions. The captured signal is then converted to signal
representation S and fed into the receiver-agnostic neural
network. The output of the neural network at receiver j is a list
of probabilities ˆpj. After this, the predicted probability vector
ˆpj and the estimated SNR of the received packet, γj, are
gathered for collaborative identiﬁcation. This can be performed
on a cloud server or a central node.

Fig. 3: Model architecture during adversarial training.

to RFFI, we leverage it to guide the neural network to learn
receiver-independent features. As shown in Fig. 3, there are
three components in adversarial training, namely the feature
extractor, transmitter classiﬁer, and receiver classiﬁer. Their
parameters are updated in an adversarial approach.

1) Feature Extractor: The feature extractor, g(·), converts
the input signal representation, S, to a feature vector, given as

f eature = g(S; θ),

(9)

where θ denotes the learnable parameters2 in the feature
extractor which will be continuously updated during training.
The feature extractor can be designed as a convolutional neural
network (CNN), recurrent neural network (RNN) such as long
short term memory (LSTM) network, etc, depending on the
characteristics of the input S. For example, CNN is usually
good at processing images while RNN/LSTM performs well
for time-series signals.

2) Transmitter Classiﬁer: The transmitter classiﬁer accepts
the extracted feature and makes predictions on the transmitter
label. The output of the transmitter classiﬁer, ˆp, is a list of
probabilities. The kth element, ˆpk, is mathematically given as

ˆpk =

ezk
k=1 ezk

(cid:80)K

,

(10)

where zk is the output of the kth neuron before the softmax
activation. We use cross-entropy for the transmitter classiﬁer
loss Ltx, which is widely adopted in classiﬁcation problems
and is mathematically given as

K
(cid:88)

Ltx = −

pk log(ˆpk),

(11)

k=1
where pk is the corresponding ground truth in p. Our goal
during training is to ﬁnd feature extractor parameters θ that
minimize Ltx to guarantee the performance of the transmitter
classiﬁer.

3) Receiver Classiﬁer: The receiver classiﬁer predicts the
receiver label from the extracted feature vector. Its loss is
deﬁned as cross-entropy as well, given as

Lrx = −

I
(cid:88)

i=1

qi log(ˆqi),

(12)

2θ is different from the Θ in (4). θ only denotes the parameters of the

feature extractor while Θ represents that of the entire neural network.

Transmitter Classifierfeatureෝ𝒑ෝ𝒒Signal RepresentationReceiver ClassifierFeatureextractorAdversarial TrainingGrad. Reversal Layer6

The predictions from all the J receivers are then fused. Two
fusion schemes are proposed, namely soft fusion and adaptive
soft fusion. In the soft fusion scheme, the predictions ˆpj are
directly summed, which is given as

ˆpf used =

1
J

J
(cid:88)

j=1

ˆpj,

(15)

where ˆpfused = {ˆpf used
, ..., ˆpf used
} is the fusion
k
result. While in the adaptive soft fusion scheme, inferences
from gateways with higher SNRs are assigned higher weights
in the fusion process, which is mathematically expressed as

, ..., ˆpf used
K

1

ˆpf used =

1
J

J
(cid:88)

j=1

γj
j=1 γj

(cid:80)J

ˆpj.

(16)

After fusion, the label corresponding to the highest value in

ˆpfused is returned as the ﬁnal prediction, formulated as

ˆ(cid:96)f used = argmax

(ˆpf used),

(17)

k

where ˆ(cid:96)f used is the ﬁnal predicted label.

G. Fine-Tuning

The trained receiver-agnostic neural network performs well
on most receivers. However, sometimes its performance is still
not satisfactory. This issue can be alleviated by ﬁne-tuning,
which refers to slightly adjusting the parameters of the neural
network to make it better suited to a new task.

As shown in Fig. 2(c), we need to ﬁrst collect very few
labelled signals yj using the under-performing receiver j and
store them in a ﬁne-tuning dataset X tune, given as

X tune = (cid:8)(yj

m, pm)(cid:9)Mtune
m=1 ,

(18)

where Mtune is the number of ﬁne-tuning packets. Note that
compared to the training dataset X train in (8), X tune does not
contain receiver labels because no adversarial training is used
during ﬁne-tuning. These packets are too few to train a neural
network from scratch, but sufﬁcient for ﬁne-tuning. Then we
convert yj to the selected signal representation Sj, and the data
served for ﬁne-tuning becomes (cid:8)(Sj
m=1 . With these
data, the parameters of the receiver-agnostic neural network
can be adjusted with a low learning rate. The cross-entropy
loss given in (11) is used during ﬁne-tuning.

m, pm)(cid:9)Mtune

Once ﬁne-tuning is completed, the ﬁne-tuned neural net-
work is updated at the under-performing receiver to obtain
higher classiﬁcation performance.

IV. CASE STUDY: LORA/LORAWAN-BASED
IMPLEMENTATION

A. LoRa/LoRaWAN Primer

1) LoRa Physical Layer: LoRa is a low-power wide-
area network (LPWAN) modulation technique based on
chirp spread spectrum (CSS) technology. The information
is encoded in a modulated linear chirp whose frequency
changes linearly within a LoRa symbol. Due to the fre-
the spectrograms
quency varying nature of LoRa signals,

(a)

(b)

Fig. 4: The preamble part of a LoRa packet. (a) In-phase
component. (b) Spectrogram generated by STFT.

Fig. 5: LoRaWAN star-of-stars topology.

derived from time-frequency analysis algorithms such as short-
time Fourier transform (STFT) are often used for repre-
sentation/visualization [9], [35], [36]. The preamble part of
a LoRa packet and its spectrogram are shown in Fig. 4,
respectively. The preamble part of a LoRa packet contains
eight unmodulated LoRa symbols.

2) LoRaWAN Star-of-Stars Topology: LoRaWAN deﬁnes
a star-of-stars network topology, which is shown in Fig. 5.
It allows one LoRa end node to establish wireless commu-
nication links (dashed lines) with multiple gateways at the
same time. The LoRa gateways are connected to a server
by using, e.g., WiFi, cellular communications or Ethernet
(solid lines). They relay the captured messages to the network
server for collaborative decoding. The server runs network and
application layer protocols.

The star-of-stars topology of LoRaWAN is suitable for
implementing and exploring our proposed receiver-agnostic
and collaborative RFFI protocol. Firstly, there are multiple
gateways in a LoRaWAN network, and we desire a receiver-
agnostic neural network that can be directly equipped on
all LoRa gateways. Secondly, LoRaWAN already allows one
LoRa transmission to be captured by multiple gateways. Ap-

12345678Time (ms)-1-0.500.51Amplitude12345678Time (ms)-400-2000200400Frequency (kHz)…………GatewaysLoRatransmissionsEnd nodesServerWiFi, Ethernet or Cellularplying collaborative RFFI to LoRa/LoRaWAN does not require
any changes to the existing communication protocol. More-
over, the LoRa network server has vast computing resources
thus the computing-expensive, receiver-agnostic training can
be done efﬁciently.

B. Signal Collection

The LoRa signal collection is implemented using existing
algorithms. The used LoRa packet synchronization algorithm
is presented in [37], and LoRa frequency offset estimation and
compensation algorithms are introduced in [9], [10].

C. Data Augmentation

The channel simulator for data augmentation is the same as
that in [11]. The channel model includes multipath, Doppler
effects as well as AWGN. More speciﬁcally, the exponential
power delay proﬁle (PDP) is employed to characterize the
multipath effect and the Jakes model
is used to describe
the Doppler spectrum. The root mean square delay spread,
maximum Doppler frequency, Rician K-factor and SNR are
uniformly distributed in [5 ns, 300 ns], [0 Hz, 10 Hz], [0, 10],
[0 dB, 50 dB], respectively.

D. Signal Representation

The channel

independent spectrogram proposed in [11]
is used as the signal representation. The reason is twofold.
Firstly, it is an effective approach to mitigate channel effects,
which has been experimentally veriﬁed in [11]. Secondly, it
is a time-frequency representation that is suitable for CSS
modulation. Time-frequency representation has been widely
used as neural network inputs in LoRa-related deep learning
systems [11], [36].

A channel independent spectrogram of the preamble part of
a LoRa packet is shown in Fig. 6 as the input to the neural
network. In this paper, it is calculated with a window length
of 128 and an overlap of 64. Interested readers should refer
to [11] for more details.

E. Adversarial Training

The neural network shown in Fig. 6 is designed to process
the converted channel independent spectrograms. The feature
extractor refers to the neural network designed in [11]. It
has nine convolutional layers with skip connections and each
activated by a ReLU function. We perform L2 normalization
on the extracted feature vector, which can increase system
performance [28]. Both the transmitter and receiver classiﬁers
consist of a 128-neuron dense layer activated by the ReLU
function and a softmax layer for classiﬁcation.

F. Collaborative Inference

The architecture of LoRaWAN is suitable for collaborative
RFFI. When multiple LoRa gateways capture one packet,
they perform independent inference using the receiver-agnostic
neural network. The predictions and estimated SNRs are
uploaded to the LoRaWAN network server and then fused to
make a more reliable inference.

7

Fig. 6: Model architecture during adversarial training for the
LoRa case study.

G. Fine-tuning

Fine-tuning can be leveraged to improve the performance of
under-performing LoRa gateways, as detailed in Section III-G.
Fine-tuning is feasible on edge LoRa gateways because the
ﬁne-tuning data set is small and it can stop within a few
training epochs. Nevertheless, we must recall that this is an
optional process.

V. EXPERIMENTAL EVALUATION IN CONTROLLED
ENVIRONMENTS

In this section, we experimentally evaluate the performance
of the proposed receiver-agnostic and collaborative RFFI sys-
tem in controlled environments, using the LoRa-based case
study implementation.

7x7 Conv. 32 3x3 Conv. 32 3x3 Conv. 32 3x3 Conv. 32 3x3 Conv. 323x3 Conv. 643x3 Conv. 643x3 Conv. 643x3 Conv. 641x1 Conv. 64 ReLUAddAvg. Pool 2DDense 512 ReLUAddAddAddL2 Norm.Dense 128 ReLUSoftmaxDense 128 ReLUSoftmaxGrad. Reversal LayerFeature ExtractorTx ClassifierRx Classifierfeatureෝ𝒑ෝ𝒒Adversarial TrainingChannel Independent Spectrogram8

(a)

(b)

Fig. 7: Experimental devices. (a) Ten LoRa DUTs. (b) 20 SDR
receivers.

TABLE I: Software-Deﬁned Radios Receivers.

SDR name

Model

RTL-1 ∼ RTL-9

RTL-SDR

PLUTO-1, PLUTO-2

ADALM-PLUTO

B200-1, B200-2

B200 mini-1,
B200 mini-2
B210-1, B210-2

USRP B200

USRP B210

N210-1 ∼ N210-3

USRP N210

ADC

8 bit

12 bit

12 bit

RF Chipset

RTL2832U

AD9363

AD9364

12 bit

14 bit

AD9361
UBX RF
Daughterboard

USRP B200 mini

12 bit

AD9364

A. Experimental Setup

1) Device Information: We used ten LoRa devices as the
DUTs to be identiﬁed and 20 SDR platforms to emulate the
LoRa receivers/gateways.

• LoRa DUT: As shown in Fig. 7(a), we employed ten
LoRa devices of two models, i.e., ﬁve of LoPy43 and ﬁve
of mbed SX12614. We conﬁgured all LoRa DUTs with
a spreading factor of seven and bandwidth of 125 kHz.
The carrier frequency was set to 868.1 MHz.

• SDR Receiver: As shown in Fig. 7(b), 20 SDR platforms
of six models were used to investigate the receiver
effect. The detailed SDR information is given in Table I.
These SDR platforms are made of different RF chipsets
and analog-to-digital converters (ADCs) of different res-
their hardware characteristics can be
olutions so that
considered distinct. We used the MATLAB Hardware
Support for SDR5 to access the SDR receivers. Though
the MATLAB drivers for SDR receivers are different,
all the SDRs run the same code to perform the signal
collection procedure introduced in Section III-B. Their
receiver sampling rates were all set to 1 MHz.

Note that we collect packets from ten DUTs with each of the
20 SDR receivers. Therefore, there are 200 DUT-SDR pairs
in total in the dataset.

2) Dataset Description: We collected datasets from various
SDRs to evaluate the receiver effect. In this section, all the
datasets were collected in a typical residential room with line-
of-sight (LOS) between the DUT and SDR receiver. The dis-
tance between the DUT (transmitter) and SDR (receiver) was

3https://pycom.io/product/lopy4/
4https://os.mbed.com/components/SX126xMB2xAS/
5https://www.mathworks.com/discovery/sdr.html

one meter, hence the received signal had a quite high SNR. In
such controlled environments, the wireless channel remained
constant. It allows us to investigate the algorithm performance
with little inﬂuence from channel effects. We captured 800
packets from each LoRa DUT-SDR pair, which were then
pre-processed and augmented to construct the training dataset.
Every test dataset contained 100 packets from each DUT-SDR
pair. The detailed descriptions will be given in the following
subsections.

3) CNN Training Conﬁguration: We trained various CNN
models with different conﬁgurations, which differ in two
aspects, namely the number of training receivers I, and the
types of training receivers. Since each subsection serves a
speciﬁc evaluation purpose, we trained different CNN models
with specially collected training datasets and evaluated them
with corresponding test datasets. A summary is given in
Table II. It is worth noting that all the trained CNN models
have the same structure, as introduced in Section III-E.

The number of training receivers, I, is increased from one
to ﬁve. When I = 1, the training can be simpliﬁed to the
conventional approach introduced in Section II. In this case,
the deep learning model is constructed by directly connecting
the feature extractor and transmitter classiﬁer shown in Fig. 6.
When there are multiple receivers in the training dataset,
we further divide the adversarial training into two categories,
namely homogeneous and heterogeneous schemes, based on
the diversity of the I training receivers.

• Homogeneous training: a low diversity of the I training
receivers, i.e., the hardware characteristics of the I re-
ceivers are similar to each other.

• Heterogeneous training: a high diversity of the I training
receivers, the hardware characteristics of the I receivers
are signiﬁcantly different from each other.

For example, when I = 5, homogeneous training receivers
are all RTL-SDRs while heterogeneous training receivers are
deliberately selected from different SDR models, namely RTL-
1, PLUTO-1, B200-1, B200 mini-1, and B210-1.

4) Training Hyperparameters: All the CNN models in this
paper were trained with the same settings. 10% of the training
data was split out for validation. The CNN parameters were
optimized by the stochastic gradient descent (SGD) optimizer
(momentum 0.9) with an initial learning rate of 0.001 and a
batch size of 64. The validation loss was monitored during
training, and the learning rate was reduced by a factor of
0.2 when the validation loss did not drop within 10 epochs.
Training stopped when the validation loss did not change
within 20 epochs. The deep learning model was implemented
using the Tensorﬂow library.

When ﬁne-tuning was adopted, a lower learning rate of
0.00001 and a smaller batch size of 32 were used. The ﬁne-
tuning process stopped after 20 epochs and no learning rate
scheduler was employed.

5) Evaluation Metric: The RFFI system is evaluated using
the overall classiﬁcation accuracy, which is calculated by
dividing the number of correctly predicted packets by the total
number of packets, given as

Accuracy =

Number of correctly classiﬁed packets
Total number of packets

.

(19)

DUT1-5DUT6-10N2101-3B210 1-2B200 1-2PLUTO 1-2B200 mini 1-2RTL 1-9TABLE II: Summary of Experimental Evaluation

9

Test Data

RTL-1 Day 1, Day 2, Day 3, Day 4

N210-1 Day 1, Day 2, Day 3, Day 4

Twenty SDRs

Twenty SDRs

RTL-1 Day 1, Day 2, Day 3, Day 4

Section

Purpose

V-B 1)

The effect of receiver drift on RFFI

V-B 2)

The effect of receiver change on RFFI

The effect of receiver-agnostic training
on receiver drift problem

Training Data

RTL-1 Day 1

N210-1 Day 1

RTL-1

N210-1

RTL-1 to RTL-5

V-C 1)

V-C 2)

The effect of receiver-agnostic training
on receiver change problem

RTL-1 to RTL-5

Twenty SDRs

RTL-1, PLUTO-1, B200 -1, B200 mini-1, B210 -1

Twenty SDRs

RTL-1, PLUTO-1, B200 -1, B200 mini-1, B210 -1

N210-1 Day 1, Day 2, Day 3, Day 4

V-C 3)

Impact of number of training receivers

V-C 4)

The effect of ﬁne-tuning

V-D 1)

V-D 2)

VI-B

Collaborative RFFI in a balanced SNR
scenario

Collaborative RFFI in an imbalanced
SNR scenario

The effect of collaborative RFFI in real
environments

Different number of RTL-SDRs

Different number of SDRs of various models

RTL-1 to RTL-5

N210-1

N210-1

Twenty SDRs

RTL-1, PLUTO-1, B200 -1, B200 mini-1, B210 -1

Twenty SDRs

RTL-1 to RTL-5

Data from seven SDRs with various SNRs

RTL-1, PLUTO-1, B200 -1, B200 mini-1, B210 -1

Data from seven SDRs with various SNRs

RTL-1 to RTL-5

Data from N210-1 to N210-3

RTL-1, PLUTO-1, B200 -1, B200 mini-1, B210 -1

Data from N210-1 to N210-3

RTL-1, PLUTO-1, B200 -1, B200 mini-1, B210 -1

Data collected at six locations

B. Evaluation of Conventional Training

In this section, the impact of the receiver on RFFI systems
is experimentally examined. We found that
the hardware
characteristics of low-cost SDRs drift over time, making
the conventional RFFI system unstable. Moreover, changing
another receiver for signal acquisition also results in serious
performance degradation. As only one receiver is involved
during training and inference, all the CNN models used in
this subsection are trained with the conventional scheme.

1) Receiver Drift: We select RTL-6 and N210-1 to rep-
resent low-end and high-end SDR platforms, respectively, to
study the receiver drift problem. We speciﬁcally train two
CNNs and test
them with the datasets collected on four
continuous days:

• Training dataset from RTL-6 Day 1. Test datasets from

RTL-6 Day 1, Day 2, Day 3, and Day 4.

• Training dataset from N210-1 Day 1. Test datasets from

N210-1 Day 1, Day 2, Day 3, and Day 4.

The classiﬁcation results are given in Fig. 8(a). It can be
observed that the CNN trained with N210-1 is relatively stable
over time. The accuracy nearly does not change during the four
days. However, the performance of RTL-6 degrades seriously
by more than 40% on Day 2, 3, and 4. The experimental
settings are exactly the same except for the receiver, therefore
we reckon the performance difference is due to the unstable
hardware characteristics of RTL-SDR. The features of RTL-6
on Day 2, 3, and 4 may be different from Day 1.

2) Receiver Change: As discussed in Section II, using
different receivers for training and inference can lead to a sharp
performance decline. To study the receiver change problem,
we made the following evaluation:

• Training dataset from RTL-1. Test datasets from the 20

different SDR receivers.

(a)

(b)

Fig. 8: Evaluation of the receiver drift problem. (a) Conven-
tional training. (b) Receiver-agnostic training.

• Training dataset from N210-1. Test datasets from the 20

different SDR receivers.

As illustrated in Fig. 9(a), the accuracy is high only when
the same receiver is used for training and testing. The CNN
trained with RTL-1 performs poorly on other receivers, espe-
cially on USRP B-series, i.e., B200, B200 mini, and B210. The
B200-1 leads to the worst result, with only 20% accuracy. It

Day 1, RTL-6Day 2, RTL-6Day 3, RTL-6Day 4, RTL-6Day 1, N210-1Day 2, N210-1Day 3, N210-1Day 4, N210-1Test datasets020406080100Accuracy (%)Train Day 1, RTL-6Train Day 1, N210-1Day 1, RTL-6Day 2, RTL-6Day 3, RTL-6Day 4, RTL-6Day 1, N210-1Day 2, N210-1Day 3, N210-1Day 4, N210-1Test datasets020406080100Accuracy (%)Homo. adversarial trainingHete. adversarial training10

(a)

(b)

(c)

Fig. 9: Evaluation of the receiver change problem, the effect of
receiver-agnostic training, and ﬁne-tuning. Test on 20 differ-
ent receivers. (a) Conventional training. (b) Receiver-agnostic
training. (c) Receiver-agnostic training with ﬁne-tuning.

drops 70% compared to the result with RTL-1. In comparison,
the CNN trained with N210-1 performs slightly better. Its
performance does not degrade on N210-2, which is likely
because N210-2 has similar hardware characteristics to the
training receiver N210-1. Beyond that, we can still observe a
signiﬁcant accuracy decline in other SDR receivers.

C. Evaluation of Receiver-Agnostic Training

As discussed in Section V-B, the drift of hardware character-
istics of low-cost receivers can compromise RFFI stability. In
addition, changing another receiver for RFFI also reduces sys-
tem performance. The receiver-agnostic training can mitigate
the performance reduction effectively. We train two CNN mod-
els using homogeneous and heterogeneous adversarial training
strategies, respectively. Five training receivers are involved
unless otherwise stated. The training and test conﬁguration
is emphasized in each individual subsection.

1) Effect on Receiver Drift: First, we evaluate the per-
formance of receiver-agnostic training on the receiver drift
problem. We designed the following evaluation schemes:

• Train with the homogeneous scheme (RTL-1 to RTL-5).
Test on RTL-6 and N210-1 for four consecutive days.
• Train with the heterogeneous scheme (RTL-1, PLUTO-
1, B200-1, B200 mini-1, B210-1). Test on RTL-6 and
N210-1 for four consecutive days.

The results are given in Fig. 8(b). We can see that the CNN
trained with the heterogeneous scheme (blue bars) performs
well on all the test datasets. Moreover, we do not observe
any signiﬁcant performance variation on the RTL-6 datasets
collected over four continuous days, indicating that the system
is relatively stable after employing the receiver-agnostic train-
ing. In contrast, the CNN trained with a homogeneous scheme
is still unsatisfactory. In particular, it only achieves around
50% accuracy on the RTL-6 Day 1 dataset. This suggests
that the CNN trained with the homogeneous scheme has a
poor generalization ability, possibly due to the low diversity
of training receivers.

2) Effect on Receiver Change: The proposed receiver-
agnostic training can mitigate the performance degradation
caused by receiver changes. In other words, the CNN trained
with receiver-agnostic training can be directly applied to new
receivers that are not included in the training process. We
conduct the following evaluations:

• Train with the homogeneous scheme (RTL-1 to RTL-5).

Test on the 20 different SDR receivers.

• Train with the heterogeneous scheme (RTL-1, PLUTO-
1, B200-1, B200 mini-1, and B210-1). Test on the 20
different SDR receivers.

The results of receiver-agnostic training are provided in
Fig. 9(b). The accuracy of all test datasets is greatly improved
compared to the results of conventionally trained CNNs in
Fig. 9(a). The accuracy is always above 75% for the CNN
trained with the heterogeneous scheme. We can also ﬁnd that
the heterogeneous training scheme performs better than the
homogeneous one, except on RTL-2 to RTL-5. The reason
for the exception is that RTL-2 to RTL-5 are included during
homogeneous training but not in heterogeneous training, as
illustrated in Table II. The CNN trained with a homogeneous
scheme does not generalize well to USRP B series SDRs,
i.e., B200, B200 mini, B210, which is likely because the
hardware difference is huge among the training RTL-SDRs
and the testing USRP B-series SDRs.

is not

3) Impact of the Number of Training Receivers: We train
CNNs with different numbers of receivers both for homo-
geneous and heterogeneous schemes. These CNNs are then
included in the I training
tested on N210-1 that
receivers. As the result given in Fig. 10, in both homogeneous
and heterogeneous training, the accuracy gradually increases
with the number of receivers. However, the improvement is
marginal after I reaches three. The heterogeneous scheme
ﬁnally achieves higher accuracy than the homogeneous one.
4) Effect of Fine-Tuning: As revealed in Fig. 9(b), although
the CNNs trained with a receiver-agnostic scheme can be
directly deployed on a new receiver, they still cannot achieve

RTL-1RTL-2RTL-3RTL-4RTL-5RTL-6RTL-7RTL-8RTL-9PLUTO-1PLUTO-2B200-1B200-2B200 mini-1B200 mini-2B210-1B210-2N210-1N210-2N210-3Test SDR020406080100Accuracy (%)Train with RTL-1Train with N210-1RTL-1RTL-2RTL-3RTL-4RTL-5RTL-6RTL-7RTL-8RTL-9PLUTO-1PLUTO-2B200-1B200-2B200 mini-1B200 mini-2B210-1B210-2N210-1N210-2N210-3Test SDR020406080100Accuracy (%)Homo. adversarial trainingHete. adversarial trainingRTL-1RTL-2RTL-3RTL-4RTL-5RTL-6RTL-7RTL-8RTL-9PLUTO-1PLUTO-2B200-1B200-2B200 mini-1B200 mini-2B210-1B210-2N210-1N210-2N210-3Test SDR020406080100Accuracy (%)Fine-tune + Homo. adversarial trainingFine-tune + Hete. adversarial training11

Fig. 10: The effect of the number of training receivers I
on RFFI performance. Test on N210-1, not included in the
I training receivers. Both homogeneous and heterogeneous
strategies are evaluated.

satisfactory performance in some cases. For instance, the CNN
trained with the homogeneous scheme performs extremely
poorly on USRP B-series SDRs, i.e., B200, B200 mini, and
B210.

Fine-tuning the trained CNN model can further improve
the performance of new receivers. We use 20 packets from
each DUT-SDR pair for ﬁne-tuning and the results are shown
in Fig. 9(c). It is clear that ﬁne-tuning leads to signiﬁcant
improvements of up to 40% compared to the results in
Fig. 9(b). We also ﬁnd that the homogeneous scheme still
underperforms the heterogeneous counterpart even after ﬁne-
tuning.

We further investigate the effect of the number of packets
used for ﬁne-tuning. We collect different amounts of packets
with B200-2 and N210-1 to ﬁne-tune the CNNs and then eval-
uate the performance after ﬁne-tuning. Note that both B200-2
and N210-1 are not included during any training process, thus
we are evaluating the RFFI performance on new receivers.
As shown in Fig. 11, the classiﬁcation accuracy increases
with the number of ﬁne-tuning packets for both receivers.
The CNN trained with a homogeneous scheme improves more
signiﬁcantly because the heterogeneous training can already
achieve high accuracy. It can also be observed that after the
number of ﬁne-tuning packets reaches 50, the improvement is
less noticeable.

The results show that RFFI performance can be signiﬁcantly
improved with less than 50 packets from each DUT-SDR pair,
which is affordable for an IoT network. However, this requires
the gateway to be able to retrain the neural network, i.e. to be
capable of forward/backward propagation, parameter updating,
etc. Therefore, ﬁne-tuning is not an appropriate solution for
low-cost and energy-constrained gateways.

5) Summary: In conclusion, receiver-agnostic training can
effectively mitigate the performance degradation caused by
receiver drift and change. It is recommended to use a het-
erogeneous scheme since better generalization ability can be
achieved. Fine-tuning can further improve the system perfor-
mance even with only 20 packets from each DUT.

D. Evaluation of Collaborative RFFI

In this subsection, we evaluate the proposed collaborative
RFFI scheme. We add artiﬁcial AWGN to the test data to
emulate signals collected at various SNRs.

(a)

(b)

Fig. 11: The effect of the number of ﬁne-tuning packets. Both
homogeneous and heterogeneous schemes are evaluated. Fine-
tuning is not employed when the number of packets is zero.
(a) Test on B200-2. (b) Test on N210-1.

1) Balanced SNR Scenario: We ﬁrst consider a simple case
where the signals collected by different receivers have the
same SNR. In this case, the adaptive fusion in (16) can be
simpliﬁed as the simple fusion in (15) since all receivers
are assigned the same weights. Seven SDRs that are not
included during the receiver-agnostic training are selected for
evaluation, namely PLUTO-2, B200-2, B200 mini-2, B210-2,
N210-1, N210-2, and N210-3. Then the CNN trained with
the heterogeneous scheme is directly applied without ﬁne-
tuning. The classiﬁcation results are shown in Fig. 12. It can
be observed that the improvement becomes more signiﬁcant
as more receivers get involved in the collaborative inference.
When SNR is between 15-20 dB, the collaborative inference
using seven SDR receivers performs 20% better than using an
individual receiver.

2) Imbalanced SNR Scenario: A more common scenario
in practice is that the SNRs of packets collected by different
LoRa receivers are different. In this case, soft fusion and
adaptive soft fusion may lead to different results.

We employ N210-1 to N210-3 for evaluation. The SNR
of N210-3 was adjusted from 0 dB to 40 dB, while SNRs of
N210-1 and N210-2 are ﬁxed to 10 dB and 20 dB, respectively.
The results are shown in Fig. 13. The accuracy of N210-3
gradually increases with SNR. It reaches close to 100% when

2345020406080100Accuracy (%)Homo. adversarial trainingHete. adversarial training0102030405060708090100Number of fune-tuning packets5060708090100Accuracy (%)Fine-tune + Homo. trainingFine-tune + Hete. training0102030405060708090100Number of fune-tuning packets5060708090100Accuracy (%)Fine-tune + Homo. trainingFine-tune + Hete. training12

Fig. 12: Collaborative RFFI in a balanced SNR scenario. In
this case, soft fusion is equivalent to adaptive soft fusion. The
CNN is trained with a heterogeneous strategy without ﬁne-
tuning. Test on seven SDR receivers that are not included
during training.

Fig. 14: Floor plan.

Fig. 13: Collaborative RFFI in an imbalanced SNR scenario.
Three SDR receivers not included during training are used.
The SNR of N210-3 is adjusted from 0 dB to 40 dB, while
N210-1 and N210-2 are ﬁxed at 10 dB and 20 dB, respectively.

the SNR of N210-3 is over 35 dB. We also show the average
accuracy of N210-1 and N210-2 in the ﬁgure, which is around
40% and 60%, respectively.

Fig. 15: Estimated SNRs of the received LoRa packets at
locations A-F. Marker colors and symbols represent SDR
receiver and location, respectively.

VI. EXPERIMENTAL EVALUATION IN AN OFFICE
ENVIRONMENT

In this section, we further investigate the proposed receiver-
agnostic and collaborative RFFI scheme and conduct exper-
iments that are closer to practical applications. Although a
preliminary evaluation has been made in Section V,
is
achieved by adding artiﬁcial noise to emulate different SNRs,
which still cannot perfectly match the real applications. To
further evaluate the collaborative RFFI scheme, we emulate
a LoRaWAN network by deploying three SDRs in an ofﬁce
building.

it

A. Experimental Setup

In this imbalanced SNR scenario, both soft fusion and
adaptive soft fusion schemes are effective when the SNR of
N210-3 is below 25 dB. Their accuracy is always higher than
any individual receiver. However, we can also see that the
adaptive soft fusion is less effective when the SNR of N210-
3 is over 25 dB. The reason is the SNR of N210-3 is high
and the inferences from N210-1 and N210-2 are assigned
very low weights. Compared to the adaptive soft fusion, when
the SNR of N210-3 is over 25 dB, the soft fusion scheme
without weighting leads to even lower accuracy than N210-3
itself. This indicates assigning weights according to SNR is
necessary for the collaborative RFFI, thus the adaptive soft
fusion scheme is recommended.

The experimental settings are basically the same as in
Section V. We collect the test datasets in a typical ofﬁce
building using N210-1, N210-2, and N210-3. The ﬂoor plan
is given in Fig. 14. N210-1 is placed in an ofﬁce while
N210-2 and N210-3 are placed in another meeting room. The
LoRa DUTs are in turn located at six locations A-F. More
speciﬁcally, we run the three SDR receivers simultaneously to
collect 300 packets from each DUT-SDR pair at one location
and then repeat the collection after moving the DUTs to the
next location. The average estimated SNRs of the collected
packets at locations A-F are shown in Fig. 15.

We directly use the CNN trained with the heterogeneous
scheme to classify the signals collected at locations A-F to

0510152025303540SNR (dB) of each receiver020406080100Accuracy (%)7 receivers5 receivers3 receivers2 receivers1 receiver0510152025303540SNR (dB) of N210-3020406080100Accuracy (%)Adaptive soft fusionSoft fusionTest on N210-1 at 10 dBTest on N210-2 at 20 dBTest on N210-3 at various SNRsN210-1N210-2N210-3Receiver LocationsTransmitter LocationsABCDEF15 m35 mDUT 1DUT 2DUT 3DUT 4DUT 5DUT 6DUT 7DUT 8DUT 9DUT 10DUT index102030405060SNR (dB)N210-1N210-2N210-3Loc. ALoc. BLoc. CLoc. DLoc. ELoc. F13

based RFFI studies are devoted to leveraging advanced neural
network models to better extract
transmitter impairments.
These models include CNN [5]–[17], [19], [22]–[25], [27],
[28], [38], LSTM [9], [12], [22], [26], and multiple layer
perceptron (MLP) [8], [9], [12], gated recurrent unit (GRU)
models [12], etc. These models are effective in improving
identiﬁcation performance, however, there are still challenges
that are overlooked in previous studies.

One challenge is that RFFI systems are affected by the
receiver hardware characteristics as the captured physical layer
signal is distorted by the receiver chain. To the best of the
authors’ knowledge, there have been few studies investigating
the receiver effects. Zhang et al. [5] revealed how the change
of receiver characteristics affects the RFFI performance, but
the work is mostly simulation-based and does not present
a countermeasure. Merchant et al.
[39] undertook experi-
ments using high-end receivers and observed the performance
degradation caused by the receiver effect. However, the low-
end receivers are not investigated. Elmaghbub et al.
[27]
experimentally revealed that using different receivers during
training and inference degrades system performance, but no
solutions are designed.

Leveraging multiple receivers in RFFI can enhance system
performance. To the authors’ best knowledge, there are only
two papers that have investigated the RFFI using multiple
receivers/antennas [18], [31]. Andrews et al.
[31] have
investigated how to combine the observations from multiple
antennas and compared three combination methods, but it is
based on traditional frequency features and is not available in
deep learning-based RFFI systems. He et al.
[18] employed
a support vector machine (SVM), MLP, and LSTM to fuse
the extracted decomposed features and compared the fusion
performance. However, it is mainly based on simulation with
limited experimental results. A collaborative RFFI scheme
for deep learning-based approaches needs to be designed and
experimentally evaluated.

VIII. CONCLUSION

In this paper, we propose a receiver-agnostic and collab-
orative RFFI scheme and use LoRa/LoRaWAN as a case
study for experimental evaluation. Experiments are conducted
with ten COTS LoRa DUTs and 20 SDR receivers in both
residential and ofﬁce building environments. The conventional
deep learning-based RFFI systems are seriously affected by
the changes in receiver hardware characteristics. We exper-
imentally ﬁnd that the performance of an RFFI system im-
plemented with low-cost SDR receivers (RTL-SDR) drops
40% over four continuous days. This may be due to the
unstable characteristics of the hardware components in the
RTL-SDR. We also ﬁnd that changing a new SDR for signal
collection results in a sharp decline in identiﬁcation accuracy,
up to 70% in some cases. To make the neural network
receiver-agnostic, we leverage an adversarial approach during
its training process. More speciﬁcally, a gradient reversal layer
is employed to guide the neural network to learn receiver-
independent features. We evaluate the receiver-agnostic neural
network with 20 different SDR receivers and the identiﬁcation

Fig. 16: Collaborative RFFI in an ofﬁce building. The DUTs
are in turn placed at six locations. N210-1, N210-2, and
N210-3 act as LoRa gateways. The CNN trained with a
heterogeneous scheme is used without ﬁne-tuning.

evaluate the collaborative RFFI scheme. It is also worth noting
that the training data is collected in a residential room in a LOS
scenario, which is different from the test environments.

B. Experimental Results

The classiﬁcation results are illustrated in Fig. 16. At
locations A-B, our system performs well on each individual
receiver with an accuracy of over 85%, thanks to the high
SNR, which demonstrates the receiver-agnostic neural network
is effective. As the (cid:13) and (cid:53) markers shown in Fig. 15,
the signals collected at locations A and B are always above
30 dB. However, the performance of the individual receiver
gradually decreases at locations C-F as the SNR decreases with
the increasing distance. Speciﬁcally, as the ∗ and (cid:66) markers
shown in Fig. 15, the SNRs of signals collected at locations C
and D are between 15 dB and 30 dB, leading to an accuracy of
around 60% for each individual receiver. At locations E and F,
represented by (cid:3) and ♦, respectively, the distance between the
DUT and all the receivers is above 20 meters, which makes
the SNRs of the received signals low to 10 dB and reduces
the accuracy for each individual receiver to about 40%.

The collaborative inference is an effective approach to
improve performance with higher accuracy than any individual
receiver. As shown in Fig. 16, the improvement is relatively
limited at locations A and B, because the accuracy of each
individual receiver is already high. In contrast, the enhance-
ment of collaborative inference is particularly signiﬁcant when
the SNR is lower. Speciﬁcally, the classiﬁcation accuracy can
be improved by over 10% at locations C and D. This is
consistent with the controlled experiments shown in Fig. 12,
when the SNR is between 15 dB and 30 dB the improvement
of collaborative inference is most signiﬁcant. As depicted in
Fig. 15, the signal SNRs at N210-1, N210-2, and N210-3
are not much different when DUTs are placed at the same
location. In other words, there is no extremely imbalanced
SNR scenario described in Section V-D. Therefore, the soft
fusion and adaptive soft fusion schemes achieve nearly the
same accuracy.

VII. RELATED WORK

In recent years, RFFI has beneﬁted greatly from the fast
development of deep learning techniques. Most deep learning-

Location ALocation BLocation CLocation DLocation ELocation FTest locations020406080100Accuracy (%)Test on N210-1Test on N210-2Test on N210-3Soft fusionAdaptive soft fusion14

performance is always maintained above 75%. Fine-tuning can
be done by slightly adjusting the parameters of the neural
network using a few collected packets, which can further im-
prove the performance of the receiver-agnostic neural network.
The experimental results show that ﬁne-tuning can lead to
up to 40% accuracy improvement. Collaborative RFFI with
multiple receivers can enhance identiﬁcation performance. The
predictions made by individual receivers can be fused by
weighted averaging. The results show that the collaborative
RFFI can increase the identiﬁcation accuracy by up to 20%.
Finally, we conduct a more realistic experiment by deploying
three USRP N210 SDRs in an ofﬁce building. The receiver-
agnostic neural network performs well on these SDRs and the
collaborative inference can improve the identiﬁcation accuracy
by 10%.

REFERENCES

[1] Q. Xu, R. Zheng, W. Saad, and Z. Han, “Device ﬁngerprinting in wire-
less networks: Challenges and opportunities,” IEEE Commun. Surveys
Tuts., vol. 18, no. 1, pp. 94–104, 2015.

[2] V. Hassija, V. Chamola, V. Saxena, D. Jain, P. Goyal, and B. Sikdar, “A
survey on IoT security: application areas, security threats, and solution
architectures,” IEEE Access, vol. 7, pp. 82 721–82 743, 2019.

[3] J. Zhang, G. Li, A. Marshall, A. Hu, and L. Hanzo, “A new frontier for
IoT security emerging from three decades of key generation relying on
wireless channels,” IEEE Access, vol. 8, pp. 138 406–138 446, 2020.
[4] W. Wang, Z. Sun, S. Piao, B. Zhu, and K. Ren, “Wireless physical-
layer identiﬁcation: Modeling and validation,” IEEE Trans. Inf. Forensics
Security, vol. 11, no. 9, pp. 2091–2106, 2016.

[5] J. Zhang, R. Woods, M. Sandell, M. Valkama, A. Marshall, and
J. Cavallaro, “Radio frequency ﬁngerprint identiﬁcation for narrowband
systems, modelling and classiﬁcation,” IEEE Trans. Inf. Forensics Secu-
rity, vol. 16, pp. 3974–3987, 2021.

[6] S. Hanna, S. Karunaratne, and D. Cabric, “Wisig: A large-scale WiFi
signal dataset for receiver and channel agnostic RF ﬁngerprinting,” IEEE
Access, vol. 10, pp. 22 808–22 818, 2022.

[7] A. Al-Shawabka, F. Restuccia, S. D’Oro, T. Jian, B. C. Rendon,
N. Soltani, J. Dy, K. Chowdhury, S. Ioannidis, and T. Melodia, “Ex-
posing the ﬁngerprint: Dissecting the impact of the wireless channel
on radio ﬁngerprinting,” in Proc. IEEE Int. Conf. Comput. Commun.
(INFOCOM), Jul. 2020, pp. 646–655.

[8] P. Robyns, E. Marin, W. Lamotte, P. Quax, D. Singel´ee, and B. Preneel,
“Physical-layer ﬁngerprinting of LoRa devices using supervised and
learning,” in Proc. ACM Conf. Security Privacy Wireless
zero-shot
Mobile Netw. (WiSec), 2017, pp. 58–63.

[9] G. Shen, J. Zhang, A. Marshall, L. Peng, and X. Wang, “Radio frequency
ﬁngerprint identiﬁcation for LoRa using deep learning,” IEEE J. Sel.
Areas Commun., vol. 39, no. 8, pp. 2604–2616, 2021.

[10] ——, “Radio frequency ﬁngerprint identiﬁcation for LoRa using spec-
trogram and CNN,” in Proc. IEEE Int. Conf. Comput. Commun. (INFO-
COM), Virtual Conference, May 2021, pp. 1–10.

[11] G. Shen, J. Zhang, A. Marshall, and J. R. Cavallaro, “Towards scalable
and channel-robust radio frequency ﬁngerprint identiﬁcation for LoRa,”
IEEE Trans. Inf. Forensics Security, vol. 17, pp. 774–787, 2022.
[12] D. Roy, T. Mukherjee, M. Chatterjee, E. Blasch, and E. Pasiliao, “RFAL:
Adversarial learning for RF transmitter identiﬁcation and classiﬁcation,”
IEEE Trans. on Cogn. Commun. Netw., vol. 6, no. 2, pp. 783–801, 2019.
[13] M. Cekic, S. Gopalakrishnan, and U. Madhow, “Wireless ﬁngerprinting
via deep learning: The impact of confounding factors,” in Proc. Asilomar
Conf. Signals, Systems, and Computers, 2021, pp. 677–684.

[14] J. Yu, A. Hu, G. Li, and L. Peng, “A robust RF ﬁngerprinting
approach using multisampling convolutional neural network,” IEEE
Internet Things J., vol. 6, no. 4, pp. 6786–6799, 2019.

[15] T. Jian, Y. Gong, Z. Zhan, R. Shi, N. Soltani, Z. Wang, J. G. Dy, K. R.
Chowdhury, Y. Wang, and S. Ioannidis, “Radio frequency ﬁngerprinting
on the edge,” IEEE Trans. Mobile Comput., 2021.

[16] N. Soltani, G. Reus-Muns, B. Salehihikouei, J. Dy, S. Ioannidis, and
K. Chowdhury, “RF ﬁngerprinting unmanned aerial vehicles with non-
standard transmitter waveforms,” IEEE Trans. Veh. Technol., vol. 69,
no. 12, pp. 15 518–15 531, 2020.

[17] L. Peng, J. Zhang, M. Liu, and A. Hu, “Deep learning based RF
ﬁngerprint identiﬁcation using differential constellation trace ﬁgure,”
IEEE Trans. Veh. Technol., vol. 69, no. 1, pp. 1091–1095, 2019.
[18] B. He and F. Wang, “Cooperative speciﬁc emitter identiﬁcation via mul-
tiple distorted receivers,” IEEE Trans. Inf. Forensics Security, vol. 15,
pp. 3791–3806, 2020.

[19] Y. Qian, J. Qi, X. Kuai, G. Han, H. Sun, and S. Hong, “Speciﬁc emitter
identiﬁcation based on multi-level sparse representation in automatic
identiﬁcation system,” IEEE Trans. Inf. Forensics Security, vol. 16, pp.
2872–2884, 2021.

[20] J. Gong, X. Xu, and Y. Lei, “Unsupervised speciﬁc emitter identiﬁcation
method using radio-frequency ﬁngerprint embedded InfoGAN,” IEEE
Trans. Inf. Forensics Security, vol. 15, pp. 2898–2913, 2020.

[21] S. Rajendran, Z. Sun, F. Lin, and K. Ren, “Injecting reliable radio
frequency ﬁngerprints using metasurface for the Internet of Things,”
IEEE Trans. Inf. Forensics Security, vol. 16, pp. 1896–1911, 2020.
[22] A. Al-Shawabka, P. Pietraski, S. B Pattar, F. Restuccia, and T. Melodia,
“DeepLoRa: Fingerprinting LoRa devices at scale through deep learning
and data augmentation,” in Proc. ACM Int. Symposium Mob. Ad Hoc
Netw. Comput. (MobiHoc), Shanghai, China, Jul. 2021.

[23] M. Piva, G. Maselli, and F. Restuccia, “The tags are alright: Robust
large-scale RFID clone detection through federated data-augmented
radio ﬁngerprinting,” in Proc. ACM Int. Symposium Mob. Ad Hoc Netw.
Comput. (MobiHoc), Shanghai, China, Jul. 2021.

[24] N. Soltani, K. Sankhe, J. Dy, S. Ioannidis, and K. Chowdhury, “More is
better: Data augmentation for channel-resilient RF ﬁngerprinting,” IEEE
Commun. Mag., vol. 58, no. 10, pp. 66–72, 2020.

[25] K. Merchant, S. Revay, G. Stantchev, and B. Nousain, “Deep learning for
RF device ﬁngerprinting in cognitive communication networks,” IEEE
J. Sel. Topics Signal Process., vol. 12, no. 1, pp. 160–167, 2018.
[26] R. Das, A. Gadre, S. Zhang, S. Kumar, and J. M. Moura, “A deep
learning approach to IoT authentication,” in Proc. IEEE Int. Conf.
Commun. (ICC), 2018, pp. 1–6.

[27] A. Elmaghbub and B. Hamdaoui, “LoRa device ﬁngerprinting in the
wild: Disclosing RF data-driven ﬁngerprint sensitivity to deployment
variability,” IEEE Access, vol. 9, pp. 142 893–142 909, 2021.

[28] R. Xie, W. Xu, Y. Chen, J. Yu, A. Hu, D. W. K. Ng, and A. L. Swindle-
hurst, “A generalizable model-and-data driven approach for open-set
RFF authentication,” IEEE Trans. Inf. Forensics Security, vol. 16, pp.
4435–4450, 2021.

[29] H. Ruotsalainen, G. Shen, J. Zhang, and R. Fujdiak, “LoRaWAN
physical layer-based attacks and countermeasures, a review,” Sensors,
vol. 22, no. 9, p. 3127, 2022.

[30] G. Shen, J. Zhang, A. Marshall, M. Valkama, and J. Cavallaro, “Radio
frequency ﬁngerprint identiﬁcation for security in low-cost IoT devices,”
in Proc. Asilomar Conf. Signals, Systems, and Computers, 2021, pp.
309–313.

[31] S. Andrews, R. M. Gerdes, and M. Li, “Crowdsourced measurements
for device ﬁngerprinting,” in Proc. ACM Conf. Security Privacy Wireless
Mobile Netw. (WiSec), 2019, pp. 72–82.

[32] K. Merchant and B. Nousain, “Enhanced RF ﬁngerprinting for IoT
devices with recurrent neural networks,” in Proc. IEEE Mil. Commun.
Conf. (MILCOM), 2019, pp. 590–597.

[33] S. D. Andrews, “Extensions to radio frequency ﬁngerprinting,” Ph.D.

dissertation, Virginia Tech, 2019.

[34] Y. Ganin and V. Lempitsky, “Unsupervised domain adaptation by back-
propagation,” in Proc. Int. Conf. Mach. Learn. (ICML), Lille, France,
July 2015, pp. 1180–1189.

[35] M. A. B. Temim, G. Ferr´e, B. Laporte-Fauret, D. Dallet, B. Minger,
and L. Fuch´e, “An enhanced receiver to decode superposed LoRa-like
signals,” IEEE Internet Things J., vol. 7, no. 8, pp. 7419–7431, 2020.
[36] C. Li, H. Guo, S. Tong, X. Zeng, Z. Cao, M. Zhang, Q. Yan, L. Xiao,
J. Wang, and Y. Liu, “NELoRa: Towards ultra-low SNR LoRa com-
munication with neural-enhanced demodulation,” in Proc. ACM Conf.
Embedded Netw. Sensor Systems (SenSys), 2021, pp. 56–68.

[37] P. Robyns, P. Quax, W. Lamotte, and W. Thenaers, “A multi-channel
software decoder for the LoRa modulation scheme,” in Proc. Int. Conf.
Internet Things, Big Data Security (IoTBDS), Mar. 2018, pp. 41–51.

[38] S. Rajendran and Z. Sun, “RF impairment model-based IoT physical-
layer identiﬁcation for enhanced domain generalization,” IEEE Trans.
Inf. Forensics Security, vol. 17, pp. 1285–1299, 2022.

[39] K. Merchant and B. Nousain, “Toward receiver-agnostic RF ﬁngerprint
veriﬁcation,” in Proc. IEEE Globecom Workshops (GC Wkshps).
IEEE,
2019, pp. 1–6.

