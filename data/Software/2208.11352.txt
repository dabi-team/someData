2
2
0
2

g
u
A
4
2

]
E
S
.
s
c
[

1
v
2
5
3
1
1
.
8
0
2
2
:
v
i
X
r
a

Ai4EComponentLib.jl: A Component-base Model Library in
Julia

Yuebao Yang1, Jingyi Yang2, Mingtao Li∗
Xi’an Jiaotong University

August 25, 2022

Abstract

Ai4EComponentLib.jl1(Ai4EComponentLib) is a component-base model library based on Ju-
lia language, which relies on the diﬀerential equation solver DiﬀerentialEquations.jl[1] and the
symbolic modeling tool Modelingtoolkit.jl[2]. To handle problems in diﬀerent physical domains,
Ai4EComponentLib tries to build them with component-base model. Supported by a new gen-
eration of symbolic modeling tools, models built with Ai4EComponentLib are more ﬂexible and
scalable than models built with traditional tools like Modelica. This paper will introduce the
instance and general modeling methods of Ai4EComponentLib model library.

1 Motivation

In the ﬁeld of modeling and simulation, there are already many modeling tools, such as Modelica[3],
gProms[4], Simulink[5] and so on. They play an important role in diﬀerent ﬁelds, and these tools have
become essential tools for scientiﬁc researchers. But that doesn’t mean they are perfect. Taking the
open source Modelica as an example, Modelica has its own compiler that can compile the modeling
language into C language, which is a complete solution chain for simulation problems. Its disadvantage
is that it is not easy to expand and it cannot generate solutions of optimization problems (parameter
identiﬁcation, optimal control problems), etc. The ModelingToolkit in the Julia ecosystem solves the
problem of insuﬃcient scalability. Based on the work of ModelingToolkit, Ai4EComponentLib has
built some model libraries, hoping to take advantage of its high scalability in the future.

2 Ai4EComponentLib System Design

The method of Ai4EComponentLib design system is the same with the traditional component modeling
idea. But due to the high scalability of ModelingToolkit, we will look at this problem with a higher
level of abstraction. The core of component-base model is the process, and the changes in energy and
matter in the process. Two key points when designing the system are: internal process and external
connection. To design a system is to design their processes and connections.

In a system, there are 3 components A, B and C in the system. As shown in the Figure1, each
component has its own input and output nodes (such as a1, a2, etc.), and its inputs and outputs are
shown by arrows.

2.1

Internal Process

Each component has its own characteristics, which is reﬂected in the process of the reaction between
the input and output in the node or the exchange of material and energy. And it varies from component
to component. These components are the mapping of real world to models and are abstractions of
diﬀerent physical phenomena.

∗Corresponding author
1https://ai4energy.github.io/Ai4EComponentLib.jl/dev/

1

 
 
 
 
 
 
Figure 1: System with 3 components A, B and C.

For example, a1, a2, a3 of Component A in the above Figure1. Inside the components, they have

a speciﬁc mathematical relationship.

f (a1, a2, a3) = 0

Here, f (a1, a2, a3) is a general functional form, which can be a diﬀerential equation or an algebraic
equation. Take a resistor component as an example, the same voltage diﬀerence is applied across
a diﬀerent resistor, and the current ﬂowing through it is diﬀerent.
If the resistance changes with
time, then the current of the system also changes with time. "Diﬀerent resistance" and "time-varying
resistance" are both characteristics of components, which are described by diﬀerent equations f when
designing components. These equations determine what happens to "matter and energy" as it ﬂows
through the component. Once the components in the system are designed, the function of the whole
system can be determined by these components.

2.2 External connection

When building system connections, we focus on the matter and energy of the connection points.

• If it is a circuit system. The a2 in Figure1 of the circuit system is used as the outlet of the
component, and the current and voltage values are necessary attributes. And currents and
voltage exist at the inlet and outlet of each component. So current and voltage are the connetor
of the circuit system.

• If it is a pipe system(without considering potential energy). The a2 in Figure1 of the pipe
system is used as the outlet of the component, and the pressure and velocity of the water ﬂow
are necessary attributes. Water pressure and velocity properties exist at the inlet and outlet of
each component. So pressure and velocity are the connetor of the pipe system.

The speciﬁc components needs to be build according to the physical model of the system. For
example, Kirchhoﬀ’s laws in circuits and Bernoulli’s equation for pipe system. The governing equations
are the basic theory for designing the system.

2

In the external connection, the conservation law must generally be followed - the conservation of

energy and the conservation of mass:






|a2| = |b1|
|b3| = |c2|
|a3| = |c1|

For state variables, such as voltage, water pressure, gas pressure. Generally there are:






a2 = b1
b3 = c2
a3 = c1

(1)

(2)

For process variables such as current, water ﬂow, gas ﬂow. Generally there are (specify that inﬂow

is positive and outﬂow is negative):






a2 + b1 = 0
b3 + c2 = 0
a3 + c1 = 0

(3)

3 Case Study

3.1

Incompressible System

When the liquid in the pipe is an incompressible ﬂuid, the governing equation of the system is
Bernoulli’s equation[6].

p
ρg

+

v2
2g

+ h = constant

(4)

Where, p is pressure,v is velocity, h is height. Bernoulli’s equation describes the law of conservation
of energy for the ﬂow of liquid inside a pipe. The internal process of the component is the increase or
decrease of energy.

3.1.1 Pipe Components

For a straight pipeline, there are generally resistance losses along the route and local resistance losses
inside the component. As the liquid ﬂows from one port of the pipe to the other, the total energy of
the liquid decreases. Along the way resistance loss and local resistance loss are internal processes of
the pipeline assembly. Its equation is:

pin
ρg

+

8q2
in
2π2D4g

+ zin =

pout
ρg

+

8q2
out
2π2D4g

+ zout + hf + hm

(6)

Where the subscript in represents the pipeline inlet, out represents the pipeline outlet, hf represents

the resistance loss along the way, and hm represents the local resistance loss.

Where f is the friction factor, L is the pipe length, and D is the pipe diameter.

hf = f

L
D

8q2
π2D4g

hm = K

8q2
π2D4g

(7)

(8)

Where K is the local resistance coeﬃcient.
The external connection of the pipeline is mainly pressure and ﬂow (the height is not considered).
Pressure is a state variable, and ﬂow is a process variable. Between the two components a, b, there
are:

pa = pbqa + qb = 0

3

3.1.2 Centrifugal Pump Components

The internal process of a centrifugal pump is to add energy to the ﬂuid.

pin
ρg

+

8q2
in
2π2D4g

+ zin =

pout
ρg

+

8q2
out
2π2D4g

+ zout + Ht

where Ht represents the added energy when passing through the centrifugal pump.

Ht =

(rω)2
g

−

ω cot β
2πbg

Q = c0ω2 − c1ωQ = a0 − a1Q

(9)

(10)

Where a0, a1 represent the characteristic parameters of the pump, and Equation 10 is actually the

theoretical head- ﬂow curve of the pump.

3.1.3 Components and Systems

Before building the main components of the system such as pumps and pipes, we should build the
Connector in ModelingToolkit (the variables in the Connector are pressure and ﬂow in the pipeline
system). Detailed code can be viewed in the code repository.

(cid:7)

# Component: SimplePipe(pipe with fixed friction factor `f`)
function SimplePipe(; name, L=10.0, D=25E-3, f=0.01, ρ=1.0E3, zin=0.0, zout=0.0, K_inside=0.0)

@named in = PipeNode(z=zin)
@named out = PipeNode(z=zout)
ps = @parameters D = D L = L f = f K_inside = K_inside
eqs = [

_NodeEnergy(in, D, ρ) ~ _NodeEnergy(out, D, ρ) + _h_f(in, f, L, D) + _h_m(in, K_inside, D)
0 ~ in.q + out.q

]
compose(ODESystem(eqs, t, [], ps, name=name), in, out)

end

# Component: CentrifugalPump
function CentrifugalPump(; name, D=25E-3, ω=2500, c_0=4.4e-4, c_1=5.622, ρ=1.0E3)

@named in = PipeNode()
@named out = PipeNode()
a_0 = c_0 * abs2(ω * 2π / 60)
a_1 = c_1 * ω * 2π / 60
ps = @parameters D = D
eqs = [

_NodeEnergy(in, D, ρ) + a_0 - a_1 * abs(in.q) ~ _NodeEnergy(out, D, ρ)
0 ~ in.q + out.q

]
compose(ODESystem(eqs, t, [], ps, name=name), in, out)

end

# Component: Sink_P
function Sink_P(; name, p=101325)
@named port = PipeNode(z=0.0)
eqs = [

port.p ~ p

]
compose(ODESystem(eqs, t, [], [], name=name), port)

end(cid:6)

It becomes simple and fast to build the following system from the above components, as shown in

Figure2.

(cid:7)

@named A = Sink_P()
@named B = Sink_P()

system = [A, B, Pump]

@named Pipe1 = SimplePipe(L=2.0);
push!(system, Pipe1);
@named Pipe2 = SimplePipe(L=3.0);
push!(system, Pipe2);
@named Pipe3 = SimplePipe(L=7.0);
push!(system, Pipe3);
@named Pipe4 = SimplePipe(L=9.0);
push!(system, Pipe4);
@named Pipe5 = SimplePipe(L=5.0);

4

(cid:4)

(cid:5)

(cid:4)

Figure 2: An Example of Pipe System

5

push!(system, Pipe5);
@named Pipe6 = SimplePipe(L=4.0);
push!(system, Pipe6);
@named Pipe7 = SimplePipe(L=5.0);
push!(system, Pipe7);
@named Pipe8 = SimplePipe(L=1.0);
push!(system, Pipe8);
@named Pipe9 = SimplePipe(L=10.0);
push!(system, Pipe9);
@named Pipe10 = SimplePipe(L=2.0);
push!(system, Pipe10);
@named Pipe11 = SimplePipe(L=2.0);
push!(system, Pipe11);
@named Pipe12 = SimplePipe(L=3.0);
push!(system, Pipe12);
@named Pipe13 = SimplePipe(L=12.0);
push!(system, Pipe13);
@named Pipe14 = SimplePipe(L=1.0);
push!(system, Pipe14);
@named Pipe15 = SimplePipe(L=2.0);
push!(system, Pipe15);
@named Pipe16 = SimplePipe(L=3.0);
push!(system, Pipe16);
@named Pipe17 = SimplePipe(L=6.0);
push!(system, Pipe17);
@named Pipe18 = SimplePipe(L=6.0);
push!(system, Pipe18);
@named Pipe19 = SimplePipe(L=6.0);
push!(system, Pipe19);
@named Pipe20 = SimplePipe(L=1.0);
push!(system, Pipe20);
@named Pipe21 = SimplePipe(L=1.0);
push!(system, Pipe21);
@named Pipe22 = SimplePipe(L=7.0);
push!(system, Pipe22);
@named Pipe23 = SimplePipe(L=3.0);
push!(system, Pipe23);
@named Pipe24 = SimplePipe(L=3.0);
push!(system, Pipe24);
@named Pipe25 = SimplePipe(L=2.0);
push!(system, Pipe25);

eqs = [

connect(A.port, Pump.in)
connect(Pump.out, Pipe1.in)
connect(Pipe1.out, Pipe2.in, Pipe5.in)
connect(Pipe2.out, Pipe3.in, Pipe6.in)
connect(Pipe3.out, Pipe4.in, Pipe7.in)
connect(Pipe4.out, Pipe10.out, Pipe14.in)
connect(Pipe5.out, Pipe11.in, Pipe12.in)
connect(Pipe6.out, Pipe8.in, Pipe9.in)
connect(Pipe7.out, Pipe9.out, Pipe10.in)
connect(Pipe12.out, Pipe8.out, Pipe13.in)
connect(Pipe13.out, Pipe14.out, Pipe15.in)
connect(Pipe11.out, Pipe19.in, Pipe16.in)
connect(Pipe16.out, Pipe17.in, Pipe20.in)
connect(Pipe17.out, Pipe18.in, Pipe21.in)
connect(Pipe18.out, Pipe15.out, Pipe22.in)
connect(Pipe19.out, Pipe20.out, Pipe23.in)
connect(Pipe21.out, Pipe22.out, Pipe24.in)
connect(Pipe23.out, Pipe24.out, Pipe25.in)
connect(B.port, Pipe25.out)

](cid:6)

3.2 Thermodynamic System

3.2.1 Math work

In a thermodynamic cycle system, there are several typical internal processes[7].

• Isothermal Process: T

P = constant

• Isobaric Process: T

v = constant

• Isentropic Process: pvk = constant

• Isometric Process: pv = constant

6

(cid:5)

The energy changes in these processes are ultimately reﬂected in the pressure, density, enthalpy,
entropy, and temperature of the ﬂuid. In the thermodynamic cycle, the external connection contains
these 5 state variables.

When build a thermodynamic system, although governing equations for diﬀerent internal processes
can be used, there will always be some discrepancies between the theoretical equations and the real
world. Therefore, when building a thermal system, we can take advantage of the scalability feature
of ModelingToolkit—calling an external property library. Calling the property library can reduce the
error of some theoretical calculations.

Taking an isothermal process as an example, the state of the starting point of the process is known.

The governing equation of its internal process is:

Then determine another state variable at the end of the process, the other states at the end can

be obtained from two known states. Then there are the following 4 combinations:

T1 = T2

(11)

T2, p2 ⇒ s2, D2, h2
T2, s2 ⇒ p2, D2, h2
T2, D2 ⇒ s2, p2, h2
T2, h2 ⇒ s2, p2, D2

(12)

Using the CoolProp property library, enter the two parameters on the left side of the equation, and
we can get any parameter on the right side of the equation. Therefore, the internal equations can be
replaced by the external CoolProp library.

3.2.2 Components and Systems

Taking the isenthalpic process as an example, the internal equation is:

h1 = h2

If a parameter p is given, the function choose_equations will automatically generate code that calls

CoolProp through p, h to get the values of other parameters.

(cid:7)

function IsoenthalpyProcess(; name, inter_state="Q_0", fluid="Water")

@assert inter_state != "H" "IsoenthalpyProcess can't accept H. Please chose another state."
@named oneport = StreamPort()
@unpack ∆h, out = oneport
eqs = [

∆h ~ 0

]
push!(eqs, chose_equations(out, inter_state, "H", fluid)...)
return extend(ODESystem(eqs, t, [], []; name=name), oneport)

end(cid:6)

Consider the reheat cycle depicted in Figure3:
The code is as follows. For more detailed, please check the code repository and documentation.

(cid:7)

@named pump = IsentropicProcess(inter_state="P")
@named pump_P = DThermalStates(state="P", value=-1.0E5, u0=18.0E6)

@named boiler = IsobaricProcess(inter_state="T")
@named boiler_T = ThermalStates(state="T", value=550+ 273.15)

@named turbine = IsentropicProcess(inter_state="P")
@named turbine_P = ThermalStates(state="P", value=3.0e6)

@named reboiler = IsobaricProcess(inter_state="T")
@named reboiler_T = ThermalStates(state="T", value=450 + 273.15)

@named returbine = IsentropicProcess(inter_state="P")
@named returbine_P = ThermalStates(state="P", value=4.0e3)

@named condenser = IsothermalProcess(inter_state="Q_0")

eqs = [

connect(pump.out, boiler.in, pump_P.node)

7

(cid:4)

(cid:5)

(cid:4)

Figure 3: Reheat Rankine Cycle

connect(boiler.out, turbine.in, boiler_T.node)
connect(turbine.out, reboiler.in, turbine_P.node)
connect(reboiler.out, returbine.in, reboiler_T.node)
connect(returbine.out, condenser.in, returbine_P.node)
connect(condenser.out, pump.in)

](cid:6)

(cid:5)

4 Advantages of Component-base Models

To summarize, components are essentially equations that describe the real world. The governing
equations inside the component are the most important part, which lead the change of the system.
External connections describe the relationship between components by connection equations. The
connection equation does not aﬀect the real system evolution, but only assists building the system.

Components-base model are designed to disassemble large systems into small components. The
advantage is that it is convenient for users to build the system, and the disadvantage is that these
connection variables will consume computing resources to be simpliﬁed after the system is built. In
fact, the beneﬁts of a componentized model far outweigh the cost of consuming a little computing
resources.

For example, if the system composed of components A,B,C are regarded as a whole X. Then A,B,C
become the internal structure of X, and its mathematical form is also a diﬀerential algebraic equation,
which is not diﬀerent from the mathematical form of components A,B,C. The only diﬀerence is the
number of equations. System X can be treated as a component which has three external interfaces:
input interface x1, x2 and output interface x3, as the Figure4 shows.

Now, the system and subsystem have a complete concept of closure. If A,B,C are not a minimum
system at this time, it can be further subdivided into smaller components. A,B,C can be called a
subsystem of system X, and system A,B,C also has its own subsystem.

If A,B,C have only a few equations in total, then A,B,C are not required to be constructed as a
subsystem of X. We directly ﬂatten the equation inside X manually. But if A,B,C have thousands of
equations, and they also have their own subsystems. Is ﬂattening them manually still a good way?

8

Figure 4: System X composed of components A,B,C

Therefore, the problems that are divided into components is of great signiﬁcance when build a
giant system. Once the most critical internal structure are determined, people can concentrate on
implementing the system (subsystem) at a high level of abstraction.

The rest of the simpliﬁcation work is left to the computer! If people constantly ﬂatten the equation
and build the system from scratch, wouldn’t it be a waste of human resources? The value of human
thinking should be reﬂected in the design of the system, not in the ﬂattening of the equation.

5 Conclusion

The component-base model has its own advantages and has a broader application prospect. The
callback system of ModelingToolkit and the solver of DiﬀerentialEquations can handle simulation
problems more ﬂexibly. OptControl.jl[8] based on ModelingToolkit can transform the component
model system into an optimal control problem solved by JuMP. In addition, there is SciML’s2 parameter
identiﬁcation toolkit and so on. With the support of the Julia community, a component-base model is
not only equations for simulation, but it can also be a state space model in control problems, optimizing
constraints in problems. Because the essence of components - equations can be described by the most
basic Julia element - functions.

References

[1] Christopher Rackauckas and Qing Nie. Diﬀerentialequations.jl–a performant and feature-rich
ecosystem for solving diﬀerential equations in julia. Journal of Open Research Software, 5(1),
2017.

[2] Yingbo Ma, Shashi Gowda, Ranjan Anantharaman, Chris Laughman, Viral Shah, and Chris Rack-
auckas. Modelingtoolkit: A composable graph transformation system for equation-based modeling.
arXiv preprint arXiv:2103.05244, 2021.

[3] Michael Tiller. Introduction to physical modeling with Modelica. Springer Science & Business Media,

2001.

[4] Mariano Asteasuain, Stella Maris Tonelli, Adriana Brandolin, and Jose Alberto Bandoni. Dynamic
simulation and optimisation of tubular polymerisation reactors in gproms. Computers & Chemical
Engineering, 25(4-6):509–515, 2001.

[5] Devendra K Chaturvedi. Modeling and simulation of systems using MATLAB® and Simulink®.

CRC press, 2017.

2https://sciml.ai/

9

[6] Bruce Roy Munson, Theodore Hisao Okiishi, Wade W Huebsch, and Alric P Rothmayer. Fluid

mechanics. Wiley Singapore, 2013.

[7] Michael J Moran and George Tsatsaronis. Engineering thermodynamics.
Thermal Engineering Second Edition, pages 1–112. CRC Press, 2017.

In CRC Handbook of

[8] Jingyi Yang, Yuebao Yang, and Mingtao Li. Optcontrol. jl: An interpreter for optimal control

problem. arXiv preprint arXiv:2207.13229, 2022.

10

