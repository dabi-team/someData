To appear in the Proceedings of the 2022 IEEE 61th Conference on Decision and Control

Task-driven Modular Co-design of Vehicle Control Systems

Gioele Zardini, Zelio Suter, Andrea Censi, Emilio Frazzoli

2
2
0
2

p
e
S
0
2

]

Y
S
.
s
s
e
e
[

2
v
0
4
6
6
1
.
3
0
2
2
:
v
i
X
r
a

Abstract— When designing autonomous systems, we need to
consider multiple trade-offs at various abstraction levels, and
the choices of single (hardware and software) components need
to be studied jointly. In this work we consider the problem of
designing the control algorithm as well as the platform on which
it is executed. In particular, we focus on vehicle control systems,
and formalize state-of-the-art control schemes as monotone
feasibility relations. We then show how, leveraging a monotone
theory of co-design, we can study the embedding of control
synthesis problems into the task-driven co-design problem of a
robotic platform. The properties of the proposed approach are
illustrated by considering urban driving scenarios. We show
how, given a particular task, we can efﬁciently compute Pareto
optimal design solutions.

I. INTRODUCTION

The design of embodied intelligence involves the choice
of material parts, such as sensors, computing units, and
actuators, and software components, including perception,
planning, and control routines. While researchers mostly
focused on particular problems and trade-offs related to
speciﬁc disciplines in robotics, we know very little about
the optimal co-design of autonomous systems. Traditionally,
the design optimization of selected components is treated
in a compartmentalized manner, hindering the collaboration
of multiple designers, and,
importantly, modular design
automation. In particular, existing techniques do not allow
one to consider simultaneously the speciﬁcity and formality
of technical results for selected disciplines (e.g., decision
making and perception), and more practical trade-offs related
to energy consumption, computational effort, performance,
and cost of developed robotic systems. To capture both sides
of the coin, one needs a comprehensive task-driven co-design
automation theory, allowing multiple domains to interact,
focusing both on the component and on the system level [1],
[2]. What control scheme should one choose to solve a
speciﬁc task? Which sensors are really needed to perform
state estimation in selected situations? How does the answer
to the previous questions change when considering energetic,
computational, and ﬁnancial constraints?

In this work we propose an approach for the co-design
of the control system and of the platform on which it is
executed, focusing on the example of autonomous vehicles
(AVs), extending our previous efforts on the subject [3], [4].
Related literature: The need for design automation
techniques has been recognized in [5]–[9], and traditionally
researchers have been focusing on particular instances of co-
design of sensing, actuation, and control [10]–[28].

The trade-offs characterizing sensing and control are pre-
dominant in the literature. Although sensor selection typi-
cally cannot be solved in a closed form, it has been shown
that particular cases feature enough structure for efﬁcient

The authors are with the Institute for Dynamic Systems and Control, ETH

Z¨urich, Switzerland. (gzardini@ethz.ch)

This work was supported by the Swiss National Science Foundation under

NCCR Automation, grant agreement 51NF40 180545.

Fig. 1: In this work we illustrate how to leverage a monotone theory of
co-design to embed vehicle control design in a co-design problem with
implementation (CDPI) for a full robotic platform. The proposed results
enable designers to formulate and solve the full
task-driven co-design
problem of a AV, characterized by choices related to hardware and software
components. By ﬁxing a task (e.g., desired speed and curvature of the
trajectory considered), one can ﬁnd the set of designs fulﬁlling the task and
minimizing selected resources, including quality of execution, performance,
effort (discomfort), costs, and safety.

optimization schemes [10], [11]. In particular, the authors
of [12] study sensing-constrained task-driven LQG control,
and authors of [13]–[17] focus on the design of robots which
can solve path planning problem. While in [18] researchers
provide a framework to jointly optimize sensor selection and
control, by minimizing the information a sensor needs to
acquire, authors of [19], [20] propose techniques for optimal
control with communication constraints. Methodologies to
co-design robot architectures have been investigated in [21]–
[23], and robot design trade-offs are presented in [24]–
[26]. Finally [27] study optimal actuator placement in large-
scale networks control, and [28] proposes techniques for
algorithmic design for embodied intelligence in synthetic
cells. In conclusion, while existing techniques for robotic
platforms co-design highlight important trade-offs, they do
not allow one to smoothly formulate and solve co-design
problems involving control synthesis.

Statement of contributions: In this work we show how
to leverage a monotone theory of co-design to frame the
design of vehicle control strategies in the task-driven co-
design of an entire AV. We show how to formulate each
relevant control technique as a monotone design problem
with implementation (MDPI), characterized by feasibility
relations between tasks, control performance, accuracy, mea-
surements’ and system’s noises, and intermittent observations
schemes. Furthermore, we instantiate our discoveries in state-
of-the-art case studies, in which we perform the task-driven
co-design of an AV in urban driving scenarios, extending

systemnoisesystemnoiseenvironmenttaskVehicleSpeed sensingLong. sensingEffort345Longitudinalcontrol1Lateralcontrol2+dynamic performance [m/s ⋅ m/s2 ⋅ m/s2] max. steering sens. performancecostcostcost [CHF]costtotalcost[CHF]total efforttotal errortotal disc.totalmass [g]totalpower [W]massmassmassmass [g]power [W]powerpowerpoweracquisition freq. [Hz]sens. performanceacquisition freq. [Hz]efforterrordiscomfortefforterrordiscomfortcontrol freq. [Hz]time [s]control freq. [Hz]time [s]Speed sensingsens. performanceacquisition freq. [Hz]Impl. control+++DiscomfortErrorComputing9computation[op/s]computation[op/s]comp.[op/s]Impl. control678101112 
 
 
 
 
 
functionalities

resources

MDPI

command

Control

Actuation

control input

system noise

Plant

output

(a) A monotone design problem with implementation (MDPI) is a monotone relation
between partially ordered sets (posets) of functionalities and resources.

d

e(cid:22)

d

e

(cid:23)

d

(b) Series.

(c) Parallel.

(d) Loop.

Fig. 2: MDPIs can be composed in different ways.

previous basic results presented in [3], [4] We illustrate
how, given the model of the AV, a task, and behavior
speciﬁcations, we can answer several questions regarding the
optimal co-design of the full robotic platform.

II. MONOTONE CO-DESIGN THEORY
In this section, we summarize the main concepts related
to the monotone theory of co-design [1], [2], which will
be instrumental for the development of the key results in
this work. The reader is assumed to be familiar with basic
concepts of order theory [29] (some of which reported for
convenience in Appendix A). The monotone theory of co-
design is based on the atomic notion of a MDPI.

Deﬁnition 1 (MDPI). Given posets F, R, (functionalities
and resources), we deﬁne a MDPI as a tuple (cid:104)Id, prov, reqs(cid:105),
where Id is the set of implementations, and prov, reqs are
maps from Id to F and R, respectively:

F

prov
←−− Id

reqs
−−→ R.

We compactly denote the MDPI as d : F
to each MDPI we associate a monotone map ¯d, given by:
¯d : Fop × R → (cid:104)P(Id), ⊆(cid:105)

R. Furthermore,

(cid:104)f ∗, r(cid:105) (cid:55)→ {i ∈ Id : (prov(i) (cid:23)F f ) ∧ (reqs(i) (cid:22)R r)},
where (·)op reverses the order of a poset. The expres-
sion ¯d(f ∗, r) returns the set of implementations (design
choices) S ⊆ Id for which functionalities f are feasible with
resources r. We represent a MDPI in diagrammatic form as
in Fig. 2a.

Remark (Monotonicity). Consider a MDPI for which we
know ¯d(f ∗, r) = S.

• f (cid:48) (cid:22)F f ⇒ ¯d(f (cid:48)∗, r) = S(cid:48) ⊇ S. Intuitively, decreasing
the desired functionalities will not increase the required
resources;

• r(cid:48) (cid:23)R r ⇒ ¯d(f ∗, r(cid:48)) = S(cid:48)(cid:48) ⊇ S. Intuitively, increasing
the available resources cannot decrease the provided
functionalities.

For related examples and detailed explanations we refer to
our draft book [2].
Remark. In practical cases, one can populate the feasibility
relations of MDPIs with analytic relations (e.g. cost func-
tions, precise relationships), numerical analysis of closed-
form relations, and simulations (e.g., POMDPs). For detailed
examples refer to [3], [4].

Deﬁnition 2. Given a MDPI d, we deﬁne monotone maps
• hd : F → AR, mapping a functionality to the minimum

antichain of resources providing it;

state estimate

Estimation

Computing

measurements

Sensor

observation
noise

Fig. 3: Classic data-ﬂow diagram for an autonomous system.

• h(cid:48)

d : R → AF, mapping a resource to the maximum
antichain of functionalities provided by it.

Solving MDPIs requires ﬁnding such maps, in the sense
that one of the queries consists in ﬁxing a desired function-
ality, and ﬁnding the set of minimum resources providing it.
Furthermore, if such maps are Scott continuous, and posets
involved are complete, one can rely on Kleene’s ﬁxed point
theorem to ﬁnd the solution to the queries “ﬁx a functionality
and ﬁnd minimum resources to achieve it” and “ﬁx a resource
and ﬁnd maximum functionalities that can be achieved”.
Individual MDPIs can be composed in several ways to form
a co-design problem (a multigraph of co-design problems),
allowing one to decompose a large problem into smaller
subproblems, and to interconnect them. In Fig. 2 we report
the main interconnections, and an exhaustive list is presented
in [2]. Series composition happens when a functionality of a
MDPI is required by another MDPI (e.g., the energy provided
by a battery is needed by an electric motor to produce
torque). The symbol “(cid:22)” is the posetal relation, which
represents a co-design constraint: the resource one problem
requires, cannot exceed the functionality another problem
provides. Parallel composition formalizes decoupled pro-
cesses happening together, and loop composition describes
feedback.1 Notably, MDPIs are closed under compositions
(i.e., a composition of MDPIs is an MDPI). We call the
composition (multigraph) of MDPIs a co-design problem
with implementation (CDPI).

III. FUNCTIONAL DECOMPOSITION APPROACH
In this section, we report the key ingredients to under-
stand our co-design approach, and to appreciate the results
presented in Section IV [3], [4].

First, it is important to distinguish between data-ﬂow and
logical dependencies. While Fig. 3 represents the classic
data-ﬂow diagram for an autonomous system, the co-design
diagram in Fig. 1 formalizes logical dependencies through
functional decomposition. In this kind of diagrams,
the
“arrows” are inverted: decision making needs state infor-
mation, which is estimated through sensing data, provided
by a sensor, which will have a cost, a weight, and some
power consumption. The functional decomposition exercise
results in a collection of sub-tasks, each of which can be
abstracted as a MDPI (Fig. 4a). Embodied intelligence taks,
and in particular control tasks, share a common interface,
constituted of task-driven functionalities, such as perfor-
mance (e.g., control effort and control error, comfort, safety),
and functionalities shared with other parts of the system,
such as scenarios/environments (e.g., robustness to system
and measurement noises, density of obstacles). Providing

1We proved that the formalization of feedback makes the category of

MDPIs a traced monoidal category [2].

environment

function-speciﬁc
performance

Task

cost [CHF]
power [W]
computation [op/s]
mass [g]

(a) Co-design abstraction of tasks in embodied intelligence.

holonomic constraints:

− ˙xr sin(θ) + ˙yr cos(θ) = 0,
− ˙xf sin(θ + δ) + ˙yf cos(θ + δ) = 0.

We compute the rear velocity as vr = ˙pr(pf − pr)/(cid:107)pf −
pr(cid:107). By considering the state space s = [xr, yr, θ, δ, vr], and
control inputs u = [vs, ar], the dynamics read

(b) Translating functional decomposition into co-design diagrams.

Fig. 4: Functional decomposition provides us with sub-tasks, each of which
we can model as a MDPI with environment and task performance as
functionalities and cost, power, computation, power, and mass as resources.
Interconnecting several tasks composing a functional decomposition is a
MDPI (a task), and resources can be combined via an associative operation,
such as + or max.

observation noise V
system noise W
dropping probability p

Control

tracking error
control effort

Fig. 5: General co-design problem for a control problem, highlighting
the monotonicity in selected nuisances. For instance, if the probability of
dropping observations increases, the tracking error will not decrease.

functionalities comes at a price, which in robotics can be
typically expressed in terms of monetary cost, power usage,
computation effort, and mass of the system.

Starting from the task abstraction, one can turn the func-
tional decomposition into a co-design diagram, by intercon-
necting dependent tasks and identifying common functional-
ities and resources (Fig. 4b).

IV. CO-DESIGN OF VEHICLE CONTROL SYSTEMS

In [3] we show how to use the monotone theory of co-
design presented in Section II to embed (variations of) LQG
control design in an MDPI for an entire robotic platform.
While ﬁnding interesting applications, the presented results
were limited to a particular control technique. In the present
work, we extend our theoretical results by showing how one
can also embed the design of other important control schemes
in a MDPI, in the context of designing a AV.

We present

the considered control

techniques, as well
as their interpretation as MDPIs of the form as in Fig. 5.
Theoretical results are sketched in Lemmas, intuitive proof
sketches are provided in Appendix B, and exhaustive proofs
will be reported in an extended version of this work. The
main idea is to show monotonicities between important
quantities for control systems (as shown in Fig. 5), to embed
their design in MDPIs and solve co-design problems for a
robotic platform.

A. Vehicle model

Dynamics: We consider

the kinematic single-track
model from [30], [31] and extend it by considering model
uncertainty. Consider pr = [xr, yr] and pf = [xf , yf ] as
the positions of the rear and front wheel with respect to
the inertial coordinate frame. The heading θ describes the
vehicle’s orientation (the angle between pf − pr and the
inertial frame). The steering angle δ describes the front wheel
orientation with respect to the vehicle’s one. Finally l is
the distance between front and rear axles. We can write
the no-slip condition for the wheels with the following non-

˙s = f (s, u) + w =








vr cos(θ)
vr sin(θ)
vr tan(δ)/l
vs
ar








+ w,

(1)

where vs ∈ [ ˙δmin, ˙δmax] and ar ∈ [ ˙vr,min, ˙vr,max] are control
inputs, δ ∈ [δmin, δmax] ⊂ [−π/2, π/2], vr ∈ [vr,min, vr,max],
and w is a standard Brownian process with effective noise
covariance W. The motion of the front wheel is then:

˙xf = vf cos(θ + δ),
˙yf = vf sin(θ + δ),
vf = vr/ cos(δ).

Furthermore, the angular velocity is ω = vf sin(δ)/l.

Measurement model: We consider the discrete-time

measurement model

yk = γk(sk + vk),

(2)

where γk ∈ {0, 1} represents an intermittent observations
process (e.g.,
linear Gaussian
linear Gaussian Bernoulli,
Markov, and linear Gaussian semi-markov [32]), and vk is a
standard Brownian process with effective noise covariance V
(parametrizing the ﬁdelity of the measurement,
the
quality of the sensor).
Remark.
the
Loewner order on the set of Hermitian matrices of or-
der n, denoted Mn. Take two Hermitian matrices A, B. We
say A (cid:22)L B if and only if B − A is positive semi-deﬁnite.

In this work we will use, among others,

i.e.,

Deﬁnition 3. Consider sequences of Hermitian matri-
ces P, Q of length N ∈ N. We deﬁne the poset of sequences
of Hermitian matrices of length N by setting P (cid:22)S Q if and
only if Pi (cid:22)L Qi for all i ∈ N .

B. State estimation

Following the literature, we consider an extended Kalman
ﬁlter (EKF) with the discrete-time measurement model in
Eq. (2). We summarize the estimation procedure.
Initialization:
ˆs(t0) = E [s(t0)] , P0|0 = E[(s(t0)−ˆs(t0))(s(t0)−ˆs(t0))(cid:124)].
Prediction update: Solve
˙ˆs(t) = f (ˆs(t), u(t)),

˙P(t) = F(t)P(t) + P(t)F(t)(cid:124) + W(t), F(t) =

∂f
∂s

(cid:12)
(cid:12)ˆs(t),u(t),

with ˆs(tk−1) = ˆsk−1|k−1, and P(tk−1) = Pk−1|k−1, to
obtain ˆsk|k−1 = ˆs(tk) and Pk|k−1 = P(tk).
Measurement update: Compute

Kk = Pk|k−1(Pk|k−1 + V)−1,
ˆsk|k = ˆsk|k−1 + Kk(yk − ˆsk|k−1),
Pk|k = (I − Kk)Pk|k−1,

+total resourcesresources 1resources 2subtask 1subtask 2task performanceenvironmentfunctionaldecompositionimplementsub-task 2implementsub-task 1functiontasksub-task 2sub-task 1Stanley control: This is a geometric type of vehicle
control based on the single-track bicycle model (i.e., the
orientation and position of the front wheel with respect to the
reference path are considered for generating control actions).
Given the error, one can write the desired steering angle at
any time as δ(t) = θe(t)+ arctan(gep(t)/vf ), where g is the
Stanley gain (Fig. 6b). We denote by ep,tot the total control
positional error and by δtot the total control effort along a
path.

Lemma 3. The total Stanley control lateral tracking er-
ror ep,tot is monotonic in W and the sequence of estimate
covariances P.

Lemma 4. The total Stanley control effort δtot is monotonic
in W and the sequence of estimate covariances P.

Pure Pursuit: Given a reference path, the control law
ﬁts a semi-circle through the vehicle’s current conﬁguration
to a point on the reference path, which has a distance (called
“lookahead”) L from the car (Fig. 6c). We consider the
algorithm presented in [34], and extend it by requiring the
vehicle’s heading to be tangent to the circle. The curvature
of the semi-circle is κ = 2 sin(α)/L. Given a constant
rear velocity vr, the angular velocity of a vehicle following
the semi-circle is ˙θ = 2vr sin(α)/L. From Eq. (1), one
has δ = arctan(2l sin(α)/L), where α is the angle between
the vehicle’s orientation and the vector from the current
conﬁguration (cid:104)x, y(cid:105) and the target one (cid:104)xt, yt(cid:105). Again, the
control error e(t) = [ep(t), θe(t)] is expressed as the distance
between the vehicle’s front axle and the reference point on
the path, and the angle between the vehicle’s heading and
the tangent to the path at the reference point. The control
procedure is then: a) Find current location of the vehicle,
b) ﬁnd the path-point closest to the vehicle, c) ﬁnd the goal
point, d) transform it to the vehicle coordinates, e) calculate
the curvature and set the steering angle accordingly, f) update
vehicle’s position [33].

Lemma 5. The total pure pursuit control lateral tracking
error ep,tot is monotonic in W and in the sequence of
estimate covariances P.

Lemma 6. The total pure pursuit control effort δtot is mono-
tonic in W and in the sequence of estimate covariances P.

LQR with adaptive state space control: The error is
given by e(t) = [ep, θe], where ep is the positional error
perpendicular to the path tangent, and θe is the difference
between the path tangent and the vehicle orientation. The
method linearizes the error dynamics around [0, 0] at every
time instant, and solves an inﬁnite horizon optimization
problem for the linearized system. The error dynamics for
small errors can be formulated as

˙e(t) =

(cid:20)0
0

(cid:21)

vr
0

e(t) +

(cid:21)

(cid:20) 0
vr/l

δ(t),

and the quadratic cost function to minimize takes the form

J(T ) =

(cid:90) T

0

e(t)(cid:124)Qe(t) + δ2(t)Rdt.

Lemma 7. The total LQR control lateral tracking error ep,tot
is monotonic in W and in the sequence of estimate covari-
ances P.

(a) Functional decomposition for urban driving.

ep

θe

(cid:104)xt, yt(cid:105)

L

α

(b) Stanley control.

(c) Pure pursuit control.

Fig. 6: (a) Functional decomposition for the self-driving task of a AV. (b,c):
Geometric lateral control with Stanley and pure pursuit techniques.

where P represents the covariance estimate.

Given this model, one can prove the monotonicity of
the covariance estimate with respect to the noise and mea-
surement covariances, and to the probability of loosing
observations. These results will be important when building
the control MDPIs.

Lemma 1. The sequence of covariance estimates P pro-
duced by the EKF is monotone in V and W. In other words:

(cid:104)V, W(cid:105) (cid:22)L×L (cid:104)V(cid:48), W(cid:48)(cid:105) ⇒ P(V, W) (cid:22)S P(V(cid:48), W(cid:48)).

Lemma 2. The sequence of covariance estimates P is
monotone in the probability of dropping observations.

C. Control

We instantiate the functional decomposition approach for
the self-driving task of a AV. In particular, one can decom-
pose this task into lateral and longitudinal control (Fig. 6a).
Longitudinal control can be then split into speed tracking
and emergency braking.

1) Lateral control: The lateral control action can be
formulated as choosing the steering velocity to track a given
reference path. The vehicle’s speed is typically considered
constant at each time step (decoupling the longitudinal and
lateral control problems). Controllers consider the ﬁrst four
states/equations of Eq. (1) (denoted by z) and receive a
state estimate at discrete times ˆzk = zk + µk, where µk
is a standard Brownian process with effective noise covari-
ance Pk (as per state estimation procedure and measurement
model). The control error e(t) = [ep(t)
is generally
expressed as the distance between the vehicle’s front axle and
the reference point on the path, and the angle between the
vehicle’s heading and the tangent to the path at the reference
point. In the following, we list the standard lateral control
techniques we considered, and their properties [30], [33].

(cid:124)
θe(t)]

urbandrivingfollowtrajectorylateralcontrollongitudinalcontrolpath trackingemergency brakingspeed trackingLemma 8. The total LQR control effort δtot is monotonic
in W and in the sequence of estimate covariances P.

Proof. The proof of the theorem follows easily from the
proofs of the previous lemmas.

Nonlinear Model Predictive Control (NMPC): The
NMPC method with receding horizon strategy aims at mini-
mizing the positional error ek (expressed with respect to the
point on the path which is closest to the vehicle’s center of
mass at instant k) and control effort δ over nh ∈ N steps.
The formulation of the optimization problem is as follows:

u(cid:63)
k = argmin

Uk

nh+1
(cid:88)

i=0

e

(cid:124)
(cid:124)
k+iRuk+i,
k+iQek+i + u

Uk = {uk, . . . , uk+nh−1},
ek = ˆe(tk),
(cid:90) k+i

ek+i =

vf sin(θe(τ ) − u(τ ))dτ,

k+i−1

where ˙θe follows Eq. (3), and where one only applies u(cid:63)
0
each time. This technique is characterized by different path
approximation techniques (e.g., linear, quadratic, and cubic),
integration techniques, and by different lateral error reference
points on the vehicle (e.g., rear or center of gravity).

Lemma 9. The total NMPC lateral control tracking error is
monotonic in W and the sequence of estimate covariances P.

Lemma 10. The total NMPC lateral control effort is mono-
tonic in W and the sequence of estimate covariances P.

2) Speed control: The control goal is to track a certain
target velocity vt. From Eq. (1),
the velocity dynamics
are ˙vr = ar + wvr . The system receives an estimation of the
current velocity through the measurement model at each time
instant k: ˆvr,k = vr,k + ρk, where ρk is a standard Brownian
process with effective noise covariance qk (as per state
estimation procedure and measurement model). The control
input is typically formulated via a PID control scheme (i.e.,
just by choosing speciﬁc tuning parameters kp, ki, kd):

u(t) = kp(vt − ˆv(t)) + ki

(cid:90) t

0

(vt − ˆv(τ ))dτ − kd

∂ˆv
∂t

.

Lemma 11. The total PID control tracking error is mono-
tonic in W and the sequence of estimate covariances q.

Lemma 12. The total PID control effort is monotonic in W
and the sequence of estimate covariances q.

3) Brake control: The topic of (emergency) braking has
been treated in detail
in [4], where longitudinal sensors
(ordered by their performance, expressed via false positives,
false negatives, and accuracy curves) were used to detect
potential obstacles. Clearly, the more uncertain the obstacle
detection, the more potentially dangerous will the braking
maneuver be. We delay the treatment of this particular topic
to future works, and refer the interested reader to [4].

D. Control as MDPI

We can now combine the results presented for estimation
(Section IV-B) and for control (Section IV-C) to formulate a
co-design theorem.

Theorem 13. The presented controllers (PID, Stanley, Pure
Pursuit, LQR, and NMPC) can be written as MDPIs of the
form in Fig. 5.

Discussion: The presented theorem allows one to frame
standard vehicle control systems as MDPIs. This result pro-
vides an interface to smoothly include control synthesis in the
robot co-design problem. We remark that theory and results
can be generalized to the case of uncertain parameters [35].

V. CO-DESIGN OF AN AUTONOMOUS VEHICLE
We now show the ability of the proposed framework to
embed aspects of task-driven vehicle control synthesis into
the co-design of an entire platform. The guiding example of
this work is the one of a AV, but the same principle can
be generalized to other autonomous systems and abstraction
levels [36], [37]. We ﬁrst present the setting of the case study,
then detail the modeling of the AV as an interconnection of
MDPIs, and ﬁnally describe selected results to showcase the
potential of the approach.

A. Setting

We consider urban scenarios, extending and customizing
the ones proposed in the CommonRoads framework [38]. We
implemented the mentioned autonomy pipelines in our own
simulator. While the proposed approach has been tested on
several scenarios (e.g., racing, pursue-evasion, exploration),
for exposition purposes we focus on two examples. We ﬁrst
look at the case in which an AV needs to perform a 90°
degrees, and then look at a lane change example (Fig. 7a,
Fig. 7b). The task of the AV consists in following a trajectory
(with customized curvature severity) at a desired speed. By
ﬁxing a particular task we want to ﬁnd the autonomy pipeline
for the AV to minimize selected resource usages.

B. Co-design model

We now consider the co-design diagram for an AV pre-
sented in Fig. 1, and describe the principles behind each
block. While we explicitly showed how to think about control
schemes as MDPIs, this can be done for the other blocks
as well, and all the conditions can be checked empirically
or analytically. The co-design diagram can be thematically
subdivided into control, perception,
implementation, and
evaluation blocks.

1) Control: Hereafter, we describe the longitudinal 1
and lateral 2 design blocks. Both provide the fulﬁllment
of a task, in a speciﬁc environment (e.g., characterized by
the time of the day, or the density of obstacles on the
road [4]), and with robustness to a particular uncertainty in
the AV model. The vehicle is characterized by a dynamic
performance (e.g., parametrized by the reachable speed,
acceleration, and steering angle) 3 . For the control laws to
be implemented, observations (with particular uncertainties)
to
from sensors are required (for the longitudinal case,
estimate speed and presence of obstacles, and for the lateral
case, to estimate position and heading), which are received
at particular frequencies. Control techniques will need to be
implemented at certain frequencies and will cause speciﬁc
control efforts and errors (in the longitudinal control case,
expressed in terms of velocity deviation, and in the lateral
control case, as lateral deviation), as well as discomfort
(e.g., intensity of the steering, or gravity of accelerations)
and dangerous situations (e.g., increasing the probability to

hit obstacles). For these blocks, models can be obtained
analytically and via simulations.

2) Perception: Observations are provided to controllers
via sensors at particular frequencies, requiring monetary
costs, power consumptions, and mass to be transported
( 4 , 5 , 6 ). For these blocks, models are typically obtained
from sensor catalogues, photogrammetry, and simulations.
Particular observation schemes can also be artiﬁcially per-
turbed, and observation dropping schemes can be applied.
For details see [4].

3) Implementation: Control routines need to be imple-
mented ( 7 , 8 ) at certain frequencies requiring computa-
tion, provided by physical computers 9 . Computers come
at a monetary cost, power consumption, and mass to be
transported. The computation required for particular pro-
cesses can be estimated via benchmarking (indeed, different
implementations of the same concept will require different
computational performance). Models for computers can be
derived from catalogues.

4) Evaluation: Different choices for the above thematic
blocks will give rise to different outcomes, each character-
ized by various performance metrics, such as total monetary
cost of the platform, control effort, control error, danger,
and discomfort ( 10 , 11 , 12 ). Furthermore, the mass and
power required by the components will be provided by the
phyiscal vehicle. Here, models can be customized to ﬁt
speciﬁc applications.

C. Co-design results

We now solve the co-design problem presented in the
previous section focusing on a selection of queries.2 By
ﬁxing a task (i.e., a desired scenario, speed, and average
curvature), we can characterize optimal design solutions in
terms of monetary cost, control effort, control error, danger,
and discomfort. The design space is characterized by the
controllers presented in Section IV and their parameters, var-
ious sensors for the different perception blocks, and computer
models, all listed for convenience in Table I. For simplicity of
exposition, we do not consider obstacle detection modeling
(already treated in depth in [4]), and focus on path tracking
and speed control. Note that this represents just a sample of
the designs we can look at. (For instance, we neglect control
frequencies).

1) Control effort and control error trade-offs: We ﬁrst
consider a case in which we want the vehicle to perform
a 90° turn with a low curvature, at 8 m/s, with a standard
battery electric vehicle. By solving the co-design problem,
we obtain a Pareto front of optimal designs, which we can
interpret by looking at its 2D-projections. We ﬁrst look at the
trade-offs between total control effort and total control error
(Fig. 7a). In red, the Pareto front of optimal solutions, which
are not comparable since no instance leads simultaneously
to lower control error and control effort. The upper set of
feasible resources is given in solid red. Furthermore, for each
point lying on the Pareto front, we are able to report details
including the chosen control
about

the optimal designs,

2The solution techniques for this kind of optimization problems and
their complexity are described in [1, Proposition 5] and in our talk at
https://bit.ly/3ellO6f. Once the co-design diagram is created,
one can directly solve it via a solver based on formal
language. We
are writing a book on the subject, and teaching classes; see https:
//applied-compositional-thinking.engineering.

NMPC linear, no rear
Q = 0.01 · 1
R = 5.0, nh = 20.0
kp = 0.1, kI = 0.01, kd = 0.05
OS2128, Ace13gm
Nvidia Xavier

NMPC cubic, no rear
Q = 0.1 · 1
R = 1.0
kp = kI = 0.1, kd = 0.01
OS0128, Ace22gm
Jetson TX1

(a) Trade-off (antichain) of total control error and effort for a 90° turn, with low
curvature at 8 m/s, with corresponding design choices.

Stanley, g = 0.05
kp = 2.0, kI = kd = 0.01
Ace7gm, Ace22gm
Jetson Nano

NMPC cubic, rear
Q = 10.0 · 1
R = 1.0, nh = 10.0
kp = 2, kI = kd = 0.01
OS2128, KistlerSMotion
Jetson TX1

(b) Trade-off (antichain) of cost and control error for lane change with high curvature
at 15 m/s, with corresponding design choices.

(c) Monotonicity of the MDPI: higher cruise speed or curvature will require higher
control error and effort.

Fig. 7: Trade-offs for selected case studies. The red lines represent an-
tichains, and the red areas the corresponding upper sets of resources.

technique and its parameters, as well as considered sensors
and computer. As one can see in Fig. 7a, low control effort
(discomfort) can be achieved with a speciﬁc combination of
controllers and parameters, at the cost of an important control
error. Similarly, low control error can be achieved by another
design, with increased control effort.

2) Monetary cost and control error trade-offs: We look
at
the task of lane changing, choosing a high curvature
and a speed of 15 m/s. We can now solve the co-design
problem with the updated task. To showcase the richness
of the insights we can produce, we now report the trade-
offs between monetary costs and control error for the AV
(Fig. 7b). Clearly, to achieve lower control error one needs
to pay more. Interestingly, investing 39,000 CHF instead of
54,000 CHF only deteriorates the error by 10%.

Average curvaturelowhighSpeed [m/s]hhhhVariable

Options

L ∈ {0.01, 0.05, 0.5, 1.0, 2.0}
g ∈ {0.05, 0.1, 0.5, 1.0, 1.5, 2.0}
R ∈ {0.001, 0.05, 0.5, 1.0, 10.0}, Q ∈ {0.1 · 1, 1.0 · 1, 10.0 · 1, 0.2 · (1 − 0.9e3), 1.0 · (1 − 0.9e3), 5.0 · (1 − 0.9e3)}
nh ∈ {10.0, 15.0, 20.0, 25.0}, R ∈ {0.05, 0.5, 1.0, 5.0}, Q ∈ {0.01 · 1, 0.1 · 1, 1.0 · 1, 10.0 · 1}
kp ∈ {0.1, 0.5, 1.0, 2.0}, kI ∈ {0.01, 0.1, 0.5, 1.0}, kd ∈ {0.01, 0.05, 0.1, 1, 0}

PP
Stanley
LQR
NMPC
PID
Computers RPi 4B, Jetson Nano/TX1,2/AGX Xavier, Xavier NX
Sensors

Basler Ace251gm/222gm/13gm/7gm/5gm/15um, Flir Pointgrey, KistlerSMotion, OS032/128, OS232/128, HDL 32/64

TABLE I: Variables and options for the AV co-design problem.

3) Monotonicity: We consider the task of lane changing,
now showcasing the monotonicity properties of the devel-
oped framework. We look at varying tasks, starting from a
low speed of 8 m/s and low curvature and increasing speed to
15 m/s and high curvature. Fig. 7c shows multiple co-design
queries. In particular, for each functionality (left plot), we
report the Pareto front and the upper set of optimal resources
(right plot), by using the map deﬁned in Deﬁnition 2.
Monotonicity can be seen in the dominance of subsequent
Pareto fronts (right plot), illustrated in increasing red tonality
via inclusion of the upper sets.

VI. CONCLUSIONS
We presented how a monotone theory of co-design allows
one to simultaneously synthesize state-of-the-art vehicle con-
trol systems and design the entire robotic platform. The pro-
posed approach promotes modularity and compositionality,
and captures heterogeneous task-driven design abstraction
levels, ranging from control synthesis and parameter tuning
to hardware selection.

Outlook: The proposed results open the stage for im-
portant further developments. First, we want to connect the
present work with our efforts in modeling sensor curves [4],
to consider scenarios with moving obstacles and include
more granular sensor modeling approaches. Second, we want
to enlarge the library of control schemes which one can
embed in the co-design framework (e.g., studying sliding-
mode controllers, dynamic switching of controllers), better
model digitalisation, include the notion of planning in the
models, and present extensive case studies. Third, we want
to leverage our recent results in the co-design theory to query
for robustness against multiple, heterogeneous tasks (indeed,
one can argue that urban driving will require the ability to
solve different ones). Fourth, we want to study systems which
might show complications when embedded in our framework
(e.g., Hammerstein-Wiener systems). Finally, we want to
showcase compositionality by connecting the present work
to our work in mobility [37].

APPENDIX

A. Background on orders
Deﬁnition 4 (Poset). A poset is a tuple P = (cid:104)P, (cid:22)P (cid:105), where
P is a set and (cid:22)P is a partial order, deﬁned as a reﬂexive,
transitive, and antisymmetric relation.

Deﬁnition 5 (Opposite of a poset). The opposite of a
poset (cid:104)P, (cid:22)P (cid:105) is the poset (cid:104)P, (cid:22)op
P (cid:105), which has the same
elements as P, and the reverse ordering.

Deﬁnition 6 (Product poset). Let (cid:104)P, (cid:22)P (cid:105) and (cid:104)Q, (cid:22)Q(cid:105) be
posets. Then, (cid:104)P × Q, (cid:22)P×Q(cid:105) is a poset with

(cid:104)p1, q1(cid:105) (cid:22)P×Q (cid:104)p2, q2(cid:105) ⇔ (p1 (cid:22)P p2) ∧ (q1 (cid:22)Q q2).

This is called the product poset of (cid:104)P, (cid:22)P (cid:105) and (cid:104)Q, (cid:22)Q(cid:105).

Deﬁnition 7 (Monotonicity). A map f : P → Q between
two posets (cid:104)P, (cid:22)P (cid:105), (cid:104)Q, (cid:22)Q(cid:105) is monotone iff x (cid:22)P y implies
f (x) (cid:22)Q f (y). Monotonicity is compositional.

B. Proof sketches
Proof sketch for Lemma 1. One can prove the statement by
induction. The monotonicity holds in the initialization. To
prove the induction step, one can ﬁrst write the prediction
update, and leverage properties of the differential Lyapunov
equation involved. Finally, one uses the results of the induc-
tion step in the measurement update, to prove the result.

Proof sketch for Lemma 2. The statement can be proven by
following the substitution principle [3]. If the estimator is
given a set of observations, it can simulate having less (i.e.,
having a higher dropping probability) by artiﬁcially ignoring
selected samples. This can also be proven analytically, by
comparing measurement updates in the EKF in the two cases.

Proof sketch for Lemma 3. First, one can derive the error
dynamics

˙ep(t) = vf sin(θe(t) − δ(t)) + ρe(t),
˙θe(t) = −vf sin(δ(t))/L + wθ,

(3)

where ρe and wθ are Brownian processes as per given
models. By leveraging properties of the system and mea-
surement noises, one can then show that at any time instant,
by larger W or P, one cannot obtain a smaller expected total
lateral error (to parity of initial condition).

Proof sketch for Lemma 4. The expected lateral positional
and orientation errors converging more rapidly to zero imply
a commanded steering angle converging more rapidly to zero
in expectation. This can be formally proven by taking the
expectation of the steering angle formulation as presented in
the Stanley part.

Proof sketch for Lemma 5. First, one can derive the lateral
error dynamics

˙ep = −vrealong(t) sin(δ(t))/L + ρe(t),

where ρe is a Brownian process and

ealong(t) = [xt − x(t)

yt − y(t)] ·

(cid:21)
(cid:20)cos(θ(t))
sin(θ(t))

.

Then, one can leverage properties of the system and mea-
surement noises to prove the statement.

Proof sketch for Lemma 6. This can be shown by following
the procedure in Lemma 5 and looking at
the behavior
of δ(t).

Proof sketch for Lemma 7 and Lemma 8. One can derive
the expected error dynamics for the original, nonlinear sys-
tem, and leveraging properties of the noise perturbations, one
can derive both monotonicity results.

Proof sketch for Lemma 11. One can easily write the ex-
pression for the expected value of the speed tracking error
between any two control steps. Given the properties of the
perturbations in the system model and in the measurement
model, one can show that this expression is monotonic in
system noise and state estimation uncertainty.

Proof sketch for Lemma 12. By explicitly looking at the ex-
pression for the expected value of the acceleration resulting
from the control, one proceed as for Lemma 11 and show
the monotonicity.

Proof sketch for Lemma 9 and Lemma 10. First, one can
derive the error dynamics, which are equivalent to Eq. (3).
One can prove that at each step, the map describing the
input on the
dependency of the optimal (initial) control
lateral error is s-shaped (for positive deﬁnite Q).
initial
Furthermore, in the presence of heading error, the s-shaped
curve is translated proportionally along the input axis. From
these facts, one can prove the statements.

REFERENCES

[1] A. Censi, “A mathematical
arXiv:1512.08055, 2015.

theory of co-design,” arXiv preprint

[2] A. Censi, J. Lorand, and G. Zardini, Applied Compositional Thinking
for Engineers, 2022, work in progress book. [Online]. Available:
https://bit.ly/3qQNrdR

[3] G. Zardini, A. Censi, and E. Frazzoli, “Co-design of autonomous
systems: From hardware selection to control synthesis,” in 2021
European Control Conference (ECC), 2021, pp. 682–689.

[4] G. Zardini, D. Milojevic, A. Censi, and E. Frazzoli, “Co-design of
embodied intelligence: A structured approach,” in 2021 IEEE/RSJ
International Conference on Intelligent Robots and Systems (IROS),
2021, pp. 7536–7543.

[5] Q. Zhu and A. Sangiovanni-Vincentelli, “Codesign methodologies and
tools for cyber–physical systems,” Proceedings of the IEEE, vol. 106,
no. 9, pp. 1484–1500, 2018.

[6] B. Zheng, P. Deng, R. Anguluri, Q. Zhu, and F. Pasqualetti, “Cross-
layer codesign for secure cyber-physical systems,” IEEE Transactions
on Computer-Aided Design of Integrated Circuits and Systems, vol. 35,
no. 5, pp. 699–711, 2016.

[7] A. Saoud, P. Jagtap, M. Zamani, and A. Girard, “Compositional
abstraction-based synthesis for interconnected systems: An approxi-
mate composition approach,” IEEE Transactions on Control of Net-
work Systems, vol. 8, no. 2, pp. 702–712, 2021.

[8] S. A. Seshia, S. Hu, W. Li, and Q. Zhu, “Design automation of cyber-
physical systems: Challenges, advances, and opportunities,” IEEE
Transactions on Computer-Aided Design of Integrated Circuits and
Systems, vol. 36, no. 9, pp. 1421–1434, 2016.

[9] A. Prorok, M. Malencia, L. Carlone, G. S. Sukhatme, B. M. Sadler, and
V. Kumar, “Beyond robustness: A taxonomy of approaches towards
resilient multi-robot systems,” arXiv preprint arXiv:2109.12343, 2021.
[10] S. Joshi and S. Boyd, “Sensor selection via convex optimization,”
IEEE Transactions on Signal Processing, vol. 57, no. 2, pp. 451–462,
2008.

[11] V. Gupta, T. H. Chung, B. Hassibi, and R. M. Murray, “On a stochastic
sensor selection algorithm with applications in sensor scheduling and
sensor coverage,” Automatica, vol. 42, no. 2, pp. 251–260, 2006.
[12] V. Tzoumas, L. Carlone, G. J. Pappas, and A. Jadbabaie, “Lqg control
and sensing co-design,” IEEE Transactions on Automatic Control,
2020.

[13] Y. Zhang and D. A. Shell, “Abstractions for computing all robotic
sensors that sufﬁce to solve a planning problem,” in 2020 IEEE
International Conference on Robotics and Automation (ICRA).
IEEE,
2020, pp. 8469–8475.

[14] D. A. Shell, J. M. O’Kane, and F. Z. Saberifar, “On the design of
minimal robots that can solve planning problems,” IEEE Transactions
on Automation Science and Engineering, pp. 1–12, 2021.

[15] S. Smith, A. Saoud, and M. Arcak, “Monotonicity-based symbolic

control for safety in real driving scenarios,” 2021.

[16] S. Karaman and E. Frazzoli, “High-speed motion with limited sensing
range in a poisson forest,” in 2012 IEEE 51st IEEE Conference on
Decision and Control (CDC).

IEEE, 2012, pp. 3735–3740.

[17] Y. V. Pant, H. Yin, M. Arcak, and S. A. Seshia, “Co-design of
control and planning for multi-rotor uavs with signal temporal logic
speciﬁcations,” in 2021 American Control Conference (ACC).
IEEE,
2021, pp. 4209–4216.

[18] T. Tanaka and H. Sandberg, “Sdp-based joint sensor and controller
design for information-regularized optimal lqg control,” in 2015 54th
IEEE Conference on Decision and Control (CDC).
IEEE, 2015, pp.
4486–4491.

[19] S. Tatikonda and S. Mitter, “Control under communication con-
straints,” IEEE Transactions on automatic control, vol. 49, no. 7, pp.
1056–1068, 2004.

[20] D. Soudbakhsh, L. T. Phan, O. Sokolsky, I. Lee, and A. Annaswamy,
“Co-design of control and platform with dropped signals,” in Proceed-
ings of the ACM/IEEE 4th international conference on cyber-physical
systems, 2013, pp. 129–140.

[21] A. A. C. Collin, “A systems architecture framework towards hard-
ware selection for autonomous navigation,” Ph.D. dissertation, Mas-
sachusetts Institute of Technology, 2019.

[22] A. Collin, A. Siddiqi, Y. Imanishi, E. Rebentisch, T. Tanimichi, and
O. L. de Weck, “Autonomous driving systems hardware and software
architecture exploration: optimizing latency and cost under safety
constraints,” Systems Engineering, vol. 23, no. 3, pp. 327–337, 2020.
[23] G. Bravo-Palacios, A. Del Prete, and P. M. Wensing, “One robot
for many tasks: Versatile co-design through stochastic programming,”
IEEE Robotics and Automation Letters, vol. 5, no. 2, pp. 1680–1687,
2020.

[24] M. Lahijanian, M. Svorenova, A. A. Morye, B. Yeomans, D. Rao,
I. Posner, P. Newman, H. Kress-Gazit, and M. Kwiatkowska,
“Resource-performance tradeoff analysis for mobile robots,” IEEE
Robotics and Automation Letters, vol. 3, no. 3, pp. 1840–1847, 2018.
[25] J. M. O’Kane and S. M. LaValle, “Comparing the power of robots,”
The International Journal of Robotics Research, vol. 27, no. 1, pp.
5–23, 2008.

[26] J.-P. Merlet, “Optimal design of robots,” in Robotics: Science and

systems, 2005.

[27] B. Guo, O. Karaca, T. Summers, and M. Kamgarpour, “Actuator
placement under structural controllability using forward and reverse
greedy algorithms,” IEEE Transactions on Automatic Control, vol. 66,
no. 12, pp. 5845–5860, 2020.

[28] A. Pervan and T. D. Murphey, “Algorithmic design for embodied
intelligence in synthetic cells,” IEEE Transactions on Automation
Science and Engineering, vol. 18, no. 3, pp. 864–875, 2020.

[29] B. A. Davey and H. A. Priestley, Introduction to lattices and order.

Cambridge university press, 2002.

[30] B. Paden, M.

ˇC´ap, S. Z. Yong, D. Yershov, and E. Frazzoli, “A
survey of motion planning and control techniques for self-driving
urban vehicles,” IEEE Transactions on intelligent vehicles, vol. 1,
no. 1, pp. 33–55, 2016.

[31] J. Kong, M. Pfeiffer, G. Schildbach, and F. Borrelli, “Kinematic and
dynamic vehicle models for autonomous driving control design,” in
2015 IEEE intelligent vehicles symposium (IV).
IEEE, 2015, pp.
1094–1099.

[32] A. Censi, “Kalman ﬁltering with intermittent observations: Conver-
gence for semi-markov chains and an intrinsic performance measure,”
IEEE Transactions on Automatic Control, vol. 56, no. 2, pp. 376–381,
2010.

[33] M. Rokonuzzaman, N. Mohajer, S. Nahavandi, and S. Mohamed,
“Review and performance evaluation of path tracking controllers of
autonomous vehicles,” IET Intelligent Transport Systems, vol. 15,
no. 5, pp. 646–670, 2021.

[34] R. C. Coulter, “Implementation of the pure pursuit path tracking
algorithm,” Carnegie-Mellon UNIV Pittsburgh PA Robotics INST,
Tech. Rep., 1992.

[35] A. Censi, “Uncertainty in monotone codesign problems,” IEEE
Robotics and Automation Letters, vol. 2, no. 3, pp. 1556–1563, 2017.
[36] G. Zardini, N. Lanzetti, M. Pavone, and E. Frazzoli, “Analysis and
control of autonomous mobility-on-demand systems,” Annual Review
of Control, Robotics, and Autonomous Systems, vol. 5, no. 1, 2022.

[37] G. Zardini, N. Lanzetti, A. Censi, E. Frazzoli, and M. Pavone, “Co-
design to enable user-friendly tools to assess the impact of future
mobility solutions,” arXiv preprint arXiv:2008.08975, 2022.

[38] M. Althoff, M. Koschi, and S. Manzinger, “Commonroad: Composable
benchmarks for motion planning on roads,” in 2017 IEEE Intelligent
Vehicles Symposium (IV).

IEEE, 2017, pp. 719–726.

