2
2
0
2

y
a
M
7
1

]
E
S
.
s
c
[

1
v
2
0
2
8
0
.
5
0
2
2
:
v
i
X
r
a

An Application of Scenario Exploration to Find
New Scenarios for the Development and Testing of
Automated Driving Systems in Urban Scenarios

Barbara Sch¨utt∗, Marc Heinrich∗, Sonja Marahrens†, J. Marius Z¨ollner∗, Eric Sax∗
∗FZI Research Center for Information Technology, Karlsruhe, Germany
{schuett, heinrich, zoellner, sax}@fzi.de
†IPG Automotive GmbH, Karlsruhe, Germany
sonja.marahrens@ipg-automotive.com

Abstract—Veriﬁcation and validation are major challenges
for developing automated driving systems. A concept that gets
more and more recognized for testing in automated driving is
scenario-based testing. However, it introduces the problem of
what scenarios are relevant for testing and which are not. This
work aims to ﬁnd relevant, interesting, or critical parameter
sets within logical scenarios by utilizing Bayes optimization and
Gaussian processes. The parameter optimization is done by
comparing and evaluating six different metrics in two urban
intersection scenarios. Finally, a list of ideas this work leads to
and should be investigated further is presented.

Index Terms—Advanced Driving Assistance Systems, Auto-

mated Driving, Scenario-based Testing, Scenario Exploration

I. INTRODUCTION

The development of semi-automated, automated and au-
tonomous vehicles has played an important role in the software
and hardware departments of automotive manufacturers during
recent years. The consulting company Gartner has already
anticipated autonomous things as a ”hot topic” several times
in previous years and is now going one step further. The
current report ”Top 10 Strategic Technology Trends for 2022”
predicts autonomic systems as a main area of interest: systems
that can not only make autonomous decisions, but additionally
are able to adapt and change their behavior according to the
environment [Gartner, 2021].

One type of autonomous or autonomic system are automated
vehicles. A major challenge besides their development is to
ensure that the system is sufﬁciently safe and can be approved
and permitted on public roads. A widely discussed testing
approach is scenario-based testing: According to [Otten et al.,
2018], one goal is to take realistic ﬁeld trial test drives into
simulation environments, where predeﬁned scenarios often
serve as a basis for the derivation of relevant test cases in
automated assessment and, thus, reducing the needed amount
of real test drives. Moreover, the proper representation and
usage of scenarios during the development process support
a seamless development and testing of automated driving
functions, as well as the speciﬁcation of requirements and au-
tomated derivation of test cases [Bach et al., 2016]. However,
the speciﬁcation of scenarios can include parameter ranges,
where only a sub-set of these ranges might bring insight into

the performance of an automated driving function or hold
critical scenarios. Additionally, introducing new parameters
or parameter ranges in a scenario increases the number of
scenarios exponentially.

Novelty and Main Contribution to the State of the Art

The novelty and main contribution of this paper is a param-
eter evaluation for ﬁnding challenging and critical scenario
parameters in predeﬁned parameter ranges. Thus, we

• optimize the parameters for different intersection scenar-
ios with different criticality metrics to ﬁnd interesting
scenarios and to save simulation time, and

• use the information gained by the optimization process
to further assess these parameters and their meaning
for redeﬁning parameter ranges and the evaluation and
assessment of an automated driving function.

Structure

The paper is structured as follows: Section II brieﬂy in-
troduces topics related to this work, e.g., scenario abstraction
levels or Bayes optimization. Section III explains the proposed
exploration algorithm and setup,
including the simulation
environment setup and evaluation. In section IV, we conclude
and give a short overview of possible future work.

II. RELATED WORK

In the context of this work, the terms scenario and scene
are used as summarized by [Steimle et al., 2021]. A scene is a
snapshots of a trafﬁc constellation. A scenario is a sequence of
scenes and describes the temporal development of the behavior
of different actors within this sequence.

Finding new scenarios is a relevant step for deﬁning new
test cases to assess an automated driving system’s safety.
[Bussler et al., 2020] use evolutionary learning to ﬁnd relevant
parameter sets within logical scenarios and utilize Euclidean
distance and time-to-collision for their ﬁtness evaluation to
ﬁnd more critical scenarios. Another approach proposed by
[Baumann et al., 2021] uses reinforcement learning combined
with the metrics headway and time-to-collision to gain new
test cases. Additionally, [Abeysirigoonawardena et al., 2019]

 
 
 
 
 
 
use Bayes Optimization and Euclidean distance to generate
training scenarios for a driving function to learn to avoid
pedestrians by reinforcement learning. However, their work
does not produce a scenario set suitable for testing since
their approach always uses the current state of the driving
function which changes over the course of the experiments.
Further, there are other approaches to ﬁnd new scenarios, e.g.,
extracting scenarios from recorded data sets as shown by [King
et al., 2021] and [Zofka et al., 2015] or by experts planning
and designing scenarios from scratch.

A. Scenario Abstraction Levels

[Menzel et al., 2018] suggest three abstraction levels for
scenario representation. The most abstract level of scenario
representation is called functional and describes a scenario
via linguistic notation using natural, non-structured language
terminology. The main goal for this level is to create scenarios
that are easily understandable and open for discussion between
experts. It describes the base road network and all actors
with their maneuvers, such as a right-turning vehicle or road
crossing cyclist. The next abstraction level is the logical level
and reﬁnes the representation of functional scenarios by a
detailed representation with the help of state-space variables.
These variables or parameters can, for instance, be ranges for
road width, vehicle positions, and their speed, or time and
weather conditions. The most detailed level is called concrete
and describes operating scenarios with concrete values for
each parameter in the parameter space. Therefore, one logical
scenario can yield many concrete scenarios, depending on the
number of variables, size of parameter ranges, and step size
for these ranges.

B. Bayes Optimization and Gaussian Process

Bayes optimization (BO) proceeds by maintaining a global
statistical model of a given objective function f (x) iteratively
and consists of two main steps [Greenhill et al., 2020]: The
ﬁrst step is the Gaussian process, which is used to represent
the predicted mean µt(x) and the uncertainty σt(x) for each
point x of the input space, with the given set of observations
D1:t = {(x1, y1), (x2, y2), ...(xt, yt)}, where xt is the process
input and yt the corresponding output at time t. After that,
an Acquisition function is used to evaluate the beliefs about
the objective function regarding the input space, based on the
predicted mean µt(x) and uncertainty and chooses the most
promising setting σt(x).

C. Scenario Metrics

Scenario metrics are used to assess the quality of a scenario
regarding the aspect that needs to be evaluated. According
to [Sch¨utt et al., 2021], scenario quality can be assessed at
three different levels of resolution: nanoscopic (a scenario
segment is evaluated, e.g., a single time step), microscopic
(a complete scenario is evaluated, e.g., one concrete scenario),
and macroscopic (a set of scenarios is evaluated, e.g., a logical
scenario). Before a metric for the evaluation process is chosen,
the usage, goals, and purpose of a scenario need to be clear,

e.g., [Sch¨onemann et al., 2018] propose a hazard analysis
and risk evaluation to determine safety goals and show their
approach on the example of a valet parking system. The
formulated safety goals can be used in following steps to
choose the metrics for scenario evaluation or to determine the
performance of an automated driving system concerning its
requirements.

D. Simulation Tools

Commercial tools for automotive simulation among others
are available from dSPACE [dSPACE, 2021], and IPG [IPG
Automotive GmbH, 2021]. Both simulation tools provide
modules for map and scenario creation, sensor models and
dynamic models, to name some examples. A further tool is
Carla, an open-source simulator with a growing community
and based on the game engine Unreal [Dosovitskiy et al.,
2017]. It offers several additional modules, e.g., a scenario tool
which includes its own scenario format, a graphical tool for
creating scenarios, a ROS-bridge, and SUMO support. SUMO
is an open-source software tool for modeling microscopic
trafﬁc simulation from DLR [Lopez et al., 2018]. It specializes
on big scale of trafﬁc simulation and can be used for evaluating
trafﬁc lights cycles, evaluation of emissions (noise, pollutants),
trafﬁc forecast, and many others.

III. DIRECTED SCENARIO EXPLORATION

A. Optimization Setup

Start
parameter set

Choose new
parameter set

Optimization

1

5

4

Simulation of
concrete scenario

Evaluation of
simulation results

Termination
criterion met

2

3

6

Fig. 1. Optimization workﬂow

The optimization is an iterative process and is outlined in
Fig. 1. First, a start parameter set is selected (1), and simulated
as summarized in step (2). The results are evaluated (3), a new
parameter set is chosen (5) by the optimization algorithm (4),
and it is simulated again (2). This step is repeated until a ter-
mination criterion is met (6). The open-source project common
Bayesian optimization library (COMBO) is employed in the
experiments since it offers Bayesian optimization that uses
automatic hyperparameter tuning, Thompson sampling as a
method of picking the next best candidate, and random feature
maps for better performance [Ueno et al., 2016]. Throughout
this work, Bayesian optimization and Gaussian processes were
used. However, other optimization algorithms might be used
since the focus of this work does not lie on the optimization
itself.

B. Simulator Setup

The simulation tool CarMaker 1 serves as a basis for the
simulator setup [IPG Automotive GmbH, 2021]. As an open
integration and test platform, CarMaker provides a central
control unit running the closed-loop simulation. It includes
all proprietary and external models according to the given
scenario and constraints. In this case, proprietary models of the
complete simulation environment comprise the road, environ-
ment and trafﬁc models. Six external models were integrated
as FMUs (Functional Mock-up Unit) via an extended version
of the Open Simulation Interface (OSI) [ASAM OSI, 2021],
realizing a setup with three sensor models (camera,
lidar
[Linnhoff et al., 2021], and radar), an autonomous driving
function (see section III-C), a motion control model and a
vehicle dynamics model. This simulator setup is shown in
Fig 2. The output quantities of each simulation are handed
over to the optimization setup described in section III-A.
The next scenario to be executed is then chosen directly by
the optimization setup via script commands, leading to the
optimization workﬂow pictured in Fig 1.

C. Driving Function

To calculate the trajectory of the ego vehicle, a lightweight
and highly automated driving function is used. The function
is centered around a modiﬁed, curvature-aware version of the
Intelligent Driver Model (IDM) as used in [Zofka et al., 2016],
initially introduced in [Treiber et al., 2000]. To achieve a
modular system, the function is implemented using the Robot
Operating System (ROS) framework [Quigley et al., 2009].
The system comprises six modules, as shown in Fig. 3: a
sensor fusion module to join the information from the three
sensors, a tracking algorithm to keep track of occluded trafﬁc
participants, a ﬁlter module to extract the relevant objects,
a routing algorithm, a localization part to create an estimate
of the own global position using odometry information, and
ﬁnally, a trajectory module, planning a trajectory with a
velocity proﬁle.

The routing algorithm uses a high-deﬁnition map to extract
the road topology. The relevant objects identiﬁed within the
object ﬁlter are projected onto the path of the ego vehicle.
Thereby, a distance and differential velocity can be calculated
to be used within the IDM. Filtering is done considering the
type of an object, as well as its position relative to the road
network and the ego vehicle. Moreover, the curvature of the
path is considered by converting it to a velocity limit using
maximum lateral acceleration. This velocity limit is treated as
a separate object for the IDM to achieve smooth cornering
behavior.

A gateway architecture was used to comply with the stan-
dardized FMI/OSI interface described in section III-B while
maintaining the platform’s independence. Thereby, a TCP
proxy was integrated into the simulator as an FMU. The proxy
forwards the messages via TCP to the communication layer of
the driving function, where the messages are then converted

1CarMaker from IPG Automotive in version 8.0.2

into equivalent ROS messages. With this, the driving function
can be run within a docker environment.

D. Logical Scenario

As shown in Fig. 4, two logical intersection scenarios are
used for the experiments. Each scenario consists of an ego
vehicle (E), a pedestrian (P), a second car (C), and a truck
(T). Both scenarios vary in the actors’ starting position and
maneuvers. In scenario A, the ego vehicle is turning right
and, therefore, crosses the trajectories of the pedestrian and
the truck but not the car’s trajectory, whereas, in scenario B,
the ego vehicle is turning left and crosses the trajectories of
all three adversary trafﬁc participants. The two scenarios lead
to different behaviors of the ego vehicle since it reacts to other
participants blocking its route. The following ranges were
chosen as parameter ranges, for which the optimal parameter
sets have to be found during the scenario exploration:

• Pedestrian delay: The pedestrian waits for a given time
tPdelay in s before crossing the road, where tPdelay ∈
{0.0, ..., 7.0}. 50 samples with a step size of 0.14 s were
taken.

• Ego position: The ego vehicle starts at a given s-
coordinate sEstart in m along the road, where sEstart ∈
{27.99, ...77.99}. 250 samples with a step size of 0.2 m
were taken.

• Car speed: The maximum speed vCmax that the other
car is allowed to achieve in m/s, where vCmax ∈
{12.5, ..., 30.0}. 50 samples with a step size of 0.35 m/s
were taken.

This setup results in 625.000 scenarios. If each scenario
takes approximately 30 s for simulation execution and cal-
culation of criticality metrics, the execution of all 625.000
scenarios takes more than 217 days of non-stop simulation on
a single machine. Additionally, the simulation time grows ex-
ponentially, with scenarios getting more complex by additional
parameters and parameter ranges.

E. Optimization Problem

The goal of the scenario exploration is to ﬁnd all critical
scenarios involving the ego vehicle and the pedestrian, the
most vulnerable road user (VRU) in this scenario. Therefore,
the criticality between the ego vehicle and the pedestrian is
optimized. The criticality is measured by criticality metrics,
and the optimization aims to ﬁnd scenarios evaluated to
what degree they contain a potentially critical situation. Five
criticality metrics were utilized as the objective function to be
optimized by the Bayesian optimization:

• Euclidean Distance: Direct distance between the center

of mass of two vehicles.

• Trajectory Distance: Distance between two trafﬁc par-

ticipants along their trajectories and road network.

• Worst-time-to-collision (WTTC): Metricetric based on
time-to-collision (TTC) [Hayward, 1972], but without the
TTC’s limitation to car following scenarios [Wachenfeld
et al., 2016].

IPG
CarMaker

Simulation
Control

Logging
Engine

Trafﬁc
Models

Environment
Models

Camera Sensor

Lidar Sensor

Radar Sensor

Vehicle
Dynamics

Motion
Control

y
x
o
r
p

n
o
i
t
c
n
u
f

D
A
H

TCP

HAD
function

s
l
e
d
o
M
n
o
i
t
a
l
u
m
i
S

Simulation Setup

Model FMU

Fig. 2. Modular structure of the simulation environment

Target
Position
Sensor
Information

Sensor
Fusion

Routing

Trajectory
Planning

Trajectory

Object
Tracking

Object
Filter

Odometry

Local-
ization

Fig. 3. Modular structure of the driving function

a)

b)

T

P

C

T

P

C

E

E

Fig. 4. Two experimental scenarios: a) ego turns right, b) ego turns left. C:
car, E: ego vehicle, P: pedestrian, T: truck.

• Gap time (GT): The predicted distance in time between
the two trafﬁc participants crossing an intersection [Allen
et al., 1978].

• Post-encroachment-time (PET): The actual distance in
time between the two trafﬁc participants crossing an
intersection [Allen et al., 1978].

All metrics above require to minimize their output value to

optimize the criticality within the logical scenario.

Fig. 5. Bayes optimization results of both scenarios on a one-dimensional pa-
rameter space. The metrics used for optimization are Euclidean and trajectory
distance, gap time, post-encroachment-time, and worst-time-to-collision.

F. Experiments and Results

All experiments evaluate the criticality of the scenario
regarding the ego vehicle and the pedestrian as the most VRU
in this scenario. Some scenarios might lead to critical situ-
ations between the ego vehicle and other trafﬁc participants.
However, these scenarios are neglected. In general, different
metrics cannot be compared directly, e.g., a critical scenario in
Fig 6 b) which is indicated by a red dot is not equally critical
to a red colored scenario in Fig 6 c).

1) Experiment 1:

In the ﬁrst set of experiments, only
the pedestrian delay is varied and optimized throughout all
simulations, with a set value of sEstart = 60.0 m in scenario
A, sEstart = 67.0 m in scenario B, and vCmax = 15.0 m/s
in both scenarios. The results are shown in Fig. 5 a) for

b)a)distance in mdistance in m2pedestrian delay in spedestrian delay in sScenario AScenario Btime in stime in sEuclid. Distance [m]Trajectory Distance [m]Gap Time [s]PET [s]WTTC [s]00.02460122334567012334456712.55.07.510.001scenario A and in b) for scenario B. In scenario A, critical
scenarios are found for a delay near 0.0 s, and for all metrics
except PET, there are no changes in criticality for a delay over
approximately 1.5 s. Although PET values change after that,
scenarios are not critical since the result is growing. Further,
[Allen et al., 1978] set the threshold for critical scenarios
to P ET < 1.5 s. The used criticality metrics in scenario B
indicate no change in criticality for a varying pedestrian delay,
and therefore, the pedestrian delay has no inﬂuence on the
outcome of scenario B for the chosen values of the other two
parameters.

2) Experiment 2: In the second setup, all three parame-
ters are varied and optimized as described in section III-A
and III-D. The results for these experiments are shown in
Fig. 6, where a) shows results for the Euclidean distance, b)
trajectory distance, c) post-encroachment-time, d) worst-time-
to-collision, and e) gap time. In both scenarios, the car speed
seems to have no or almost no visible inﬂuence on simulation
results regarding the criticality of the pedestrian’s situation.
Therefore, a three-dimensional plot can be reduced to the
two dimensions of pedestrian delay and ego s-coordinate.
However, this does not mean that there is no inﬂuence at all,
and outliers or deviations in the plot that are not congruent
with other values around them might be inﬂuenced by the
car’s speed. An explanation for the lack of inﬂuence could
be, that in scenario A, the ego vehicle’s trajectory and the
car’s trajectory are not intersecting, and the ego has no need
to react to the car. Also, the other car is starting close to the
intersection in both scenarios, it might simply not have had
enough time to accelerate until it reaches the intersection and
always pass the ego vehicle at the same speed.

In general, scenario A has three different outcomes regard-
ing the criticality of the pedestrian’s situation: the ego vehicle
reaches the intersection and stops for the pedestrian who is
crossing the street. This result can be observed in scenarios
at the bottom left corner in Fig. 6 a)-e) where the criticality
decreases for most metrics. The second result consists of the
ego vehicle passing the intersection before the pedestrian or
the truck, which are mostly scenarios at the top half and right
half in Fig 6 a)-e). The last variant are scenarios where the
ego vehicle reaches the intersection right after the truck and,
therefore, cannot see the pedestrian. These scenarios are the
critical scenarios around the diagonal near the bottom left
corner in Fig. 6 a)-e).
In scenario B,

the ego vehicle not only reacts to the
pedestrian and the truck but also the other car. The outcomes
of scenario B are the same as in scenario A. However, they
are distributed differently over the parameter space: the less
critical area in the bottom left corner, which can be clearly
observed in Fig. 6 b) and d) results from a parameter set,
where the ego vehicle intersects the pedestrian’s path after they
crossed the road. The left part of Fig. 7 shows a screenshot of
this situation taken during the simulation. On the right side,
where the s-coordinate has its highest value, the ego vehicle
passes the intersection before the pedestrian, followed by a
critical line around 70 m with near-collisions. In the middle

and left part of the s-coordinate, the ego vehicle waits for the
pedestrian to pass, and the critical cluster at delay 2 s results
from interference with the truck.

The comparison of the results of both scenarios leads to the

following conclusions:

• Scenario A has a higher variance in criticality than

scenario B,

• car speed has no recognizable inﬂuence in scenario A and

almost no inﬂuence in B,

• some metrics are more sensitive, e.g., trajectory distance

and gap time, and

• some metrics lead to similar patterns in criticality, e.g.,
bottom left corner in scenario A or scenarios with a small
ego vehicle s-coordinate in scenario B.

3) Experiment 3: In the third setup, the pedestrian delay
tPdelay is replaced by a new variable yCstart to see if the car
speed has more inﬂuence on the scenario outcome:
• Car position: The y-coordinate yCstart

in m fulﬁls
yCstart ∈ {15.0, ..., 50.0}. 50 samples with a step size
of 0.7 m were taken.

All three variables are varied and optimized, and the ﬁve
previously mentioned metrics are used. The results for scenario
A do not show any inﬂuence of the car’s speed or y position on
the outcome. This is not surprising since there is no trajectory
intersection between the ego vehicle and the car. The results
show, the outcome only depends on the s-coordinate. As Fig. 8
shows, in scenario B the ego s-coordinate still has the most
inﬂuence on the outcome. However, in some areas in the
parameter space car speed and y-coordinate also affect the
scenario criticality.

G. Results

In our experiments, we could show that even though differ-
ent metrics were used, they led to similar critical scenario clus-
ters although, these metrics are not comparable in the severity
of the measured criticality and their sensitivity. Moreover,
our approach led to a reduction of the amount of necessary
simulation:
instead of executing more than half a million
scenarios, only about 430 were executed in experiments 2 and
3, respectively. Additionally, we were able to show that the
variable car speed has no inﬂuence in scenario A and can be
neglected to reduce the number of scenarios or replaced by
another variable with more inﬂuence.

IV. CONCLUSION AND FUTURE WORK

In this work, we used an optimization algorithm to ﬁnd
critical scenarios for the develoing and testing of automated
and highly automated driving systems. Bayes optimization
with Gaussian process was utilized in combination with ﬁve
criticality metrics from the automotive domain to calculate
the process output. This approach was used in two different
experiments and evaluated accordingly.

Derived from the evaluation of the experiments and the
results of this work, additional questions arise. Results of
the same scenario, models, criticality metrics, and the same

Fig. 6. Bayes optimization results of both scenarios on a three-dimensional parameter space. The metrics used for optimization are Euclidean (a) and trajectory
(b) distance, post-encroachment-time (c), worst-time-to-collision (d), and gap time (e) and are shown in a two-dimensional space since the variable car speed
has almost no inﬂuence on the scenario outcome.

Fig. 7. Screenshot from a less critical scenario (left) and critical scenario
where the ego vehicle almost hits the pedestrian (right).

driving function could be used by different simulation tools
and compared regarding their deviation. Furthermore, it is
harder to measure criticality for other scenarios, i.e., scenarios
with more trafﬁc participants. Our experiments only focused
on criticality metrics between the ego vehicle and the most
VRU, the pedestrian. However, such a choice might not always
be obvious or changing during one scenario, e.g., in urban rush
hour trafﬁc with a high density of trafﬁc participants. Metrics
to evaluate the relation between the ego and more than one
adversary trafﬁc participant or the whole scenario situation are
needed to make more objective conclusions. In future work,
the problem of ﬁnding more objective metrics for scenarios
will be approached to be able to ﬁnd critical situations between
the ego vehicle and the sum of all other trafﬁc participants.

ACKNOWLEDGEMENTS

This research is funded by the “Simulationsbasiertes En-
twickeln und Testen von automatisiertem Fahren (SET Level)-
Simulation-Based Development and Testing of Automated
Driving,” a successor project
to the project “Projekt zur
Etablierung von generell akzeptierten G¨utekriterien, Werkzeu-
gen und Methoden sowie Szenarien und Situationen zur

Fig. 8. Exemplary Bayes optimization results of scenario B on a three-
dimensional parameter space for the metric post-encroachment-time.

Freigabe hochautomatisierter Fahrfunktionen (PEGASUS)”
and a Project in the PEGASUS Family, promoted by the
German Federal Ministry for Economic Affairs and Energy
(BMWi) under the grant number 19 A 19004.

REFERENCES

[Abeysirigoonawardena et al., 2019] Abeysirigoonawardena, Y., Shkurti, F.,
and Dudek, G. (2019). Generating adversarial driving scenarios in high-
In 2019 International Conference on Robotics and
ﬁdelity simulators.
Automation (ICRA), pages 8271–8277. IEEE.

[Allen et al., 1978] Allen, B. L., Shin, B. T., and Cooper, P. J. (1978).

Analysis of trafﬁc conﬂicts and collisions. Technical report.

Scenario AScenario AScenario AScenario AScenario AScenario BScenario BScenario BScenario BScenario B024602460246024602460246ego s-coordinate in mego s-coordinate in mego s-coordinate in mego s-coordinate in mego s-coordinate in mego s-coordinate in mego s-coordinate in mego s-coordinate in mego s-coordinate in mego s-coordinate in mpedestrian delay in s024640608021765342.52.04.03.03.52176534421412106842141210680.40.21.00.60.821653421653421340.20.10.60.50.30.4024602460246pedestriandelay in spedestrian delay in spedestriandelay in spedestrian delay in spedestriandelay in spedestriandelay in spedestrian delay in spedestrian delay in spedestrian delay in s406080406080406080406080406080406080406080406080406080Euclidean Distance in mEuclidean Distance in mTrajectory Distance in mTrajectory Distance in mPost-Encroachment-Time in sPost-Encroachment-Time in sWorst-Time-To-Collision in sWorst-Time-To-Collision in sGap Time in sGap Time in sa)a)b)b)c)c)d)e)e)d)Scenario Bcar speed in m/s15302520806040ego s-coordinatein m20304050car y-coordinate in mPost-Encroachment-Time in s876534[ASAM OSI, 2021] ASAM OSI (2021). ASAM OSI® (Open Simulation

Interface). Accessed: Dec. 15, 2021.

[Bach et al., 2016] Bach, J., Otten, S., and Sax, E. (2016). Model based
scenario speciﬁcation for development and test of automated driving
functions. In 2016 IEEE Intelligent Vehicles Symposium (IV), pages 1149–
1155. IEEE.

[Baumann et al., 2021] Baumann, D., Pfeffer, R., and Sax, E. (2021). Au-
tomatic generation of critical test cases for the development of highly
In 2021 IEEE 93rd Vehicular Technology
automated driving functions.
Conference (VTC2021-Spring), pages 1–5. IEEE.

[Bussler et al., 2020] Bussler, A., Hartjen, L., Philipp, R., and Schuldt, F.
(2020). Application of evolutionary algorithms and criticality metrics
for the veriﬁcation and validation of automated driving systems at urban
In 2020 IEEE Intelligent Vehicles Symposium (IV), pages
intersections.
128–135. IEEE.

[Dosovitskiy et al., 2017] Dosovitskiy, A., Ros, G., Codevilla, F., Lopez, A.,
and Koltun, V. (2017). CARLA: An open urban driving simulator.
In
Proceedings of the 1st Annual Conference on Robot Learning, pages 1–
16.

[dSPACE, 2021] dSPACE (2021). SIMPHERA - Web-based solution for
simulation and validation in autonomous driving development. Accessed:
Jan. 19, 2022.

[Wachenfeld et al., 2016] Wachenfeld, W., Junietz, P., Wenzel, R., and Win-
ner, H. (2016). The worst-time-to-collision metric for situation identiﬁca-
tion. In 2016 IEEE Intelligent Vehicles Symposium (IV), pages 729–734.
IEEE.

[Zofka et al., 2015] Zofka, M. R., Kuhnt, F., Kohlhaas, R., Rist, C., Schamm,
T., and Z¨ollner, J. M. (2015). Data-driven simulation and parametrization of
trafﬁc scenarios for the development of advanced driver assistance systems.
In 2015 18th International Conference on Information Fusion (Fusion),
pages 1422–1428. IEEE.

[Zofka et al., 2016] Zofka, M. R., Kuhnt, F., Kohlhaas, R., and Z¨ollner, J. M.
(2016). Simulation framework for the development of autonomous small
In 2016 IEEE International Conference on Simulation,
scale vehicles.
Modeling, and Programming for Autonomous Robots, SIMPAR 2016, San
Francisco, CA, USA, December 13-16, 2016, pages 318–324.

[Gartner, 2021] Gartner

Top strategic technology trends for
https://www.gartner.com/en/information-technology/insights/top-

(2021).

2022.
technology-trends. Accessed: 2021-10-25.

[Greenhill et al., 2020] Greenhill, S., Rana, S., Gupta, S., Vellanki, P., and
Venkatesh, S. (2020). Bayesian optimization for adaptive experimental
design: A review. IEEE Access, 8:13937–13948.

[Hayward, 1972] Hayward, J. C. (1972). Near miss determination through
In Unknown. Publisher: Pennsylvania State

use of a scale of danger.
University University Park.

[IPG Automotive GmbH, 2021] IPG Automotive GmbH (2021). CarMaker.

Accessed: Dec. 20, 2021.

[King et al., 2021] King, C., Braun, T., Braess, C., Langner, J., and Sax, E.
(2021). Capturing the variety of urban logical scenarios from bird-view
trajectories. In VEHITS, pages 471–480.

[Linnhoff et al., 2021] Linnhoff, C., Rosenberger, P., and Winner, H. (2021).
Reﬁning object-based lidar sensor modeling — challenging ray tracing as
the magic bullet. IEEE Sensors Journal, 21(21):24238–24245.

[Lopez et al., 2018] Lopez, P. A., Behrisch, M., Bieker-Walz, L., Erdmann,
J., Fl¨otter¨od, Y.-P., Hilbrich, R., L¨ucken, L., Rummel, J., Wagner, P., and
In The
Wießner, E. (2018). Microscopic trafﬁc simulation using sumo.
21st IEEE International Conference on Intelligent Transportation Systems.
IEEE.

[Menzel et al., 2018] Menzel, T., Bagschik, G., and Maurer, M. (2018).
Scenarios for development, test and validation of automated vehicles. In
2018 IEEE Intelligent Vehicles Symp. (IV), pages 1821–1827. IEEE.
[Otten et al., 2018] Otten, S., Bach, J., Wohlfahrt, C., King, C., Lier, J.,
Schmid, H., Schmerler, S., and Sax, E. (2018). Automated assessment and
evaluation of digital test drives. In Advanced Microsystems for Automotive
Applications 2017, pages 189–199. Springer.

[Quigley et al., 2009] Quigley, M., Conley, K., Gerkey, B., Faust, J., Foote,
T., Leibs, J., Wheeler, R., Ng, A. Y., et al. (2009). Ros: an open-source
In ICRA workshop on open source software,
robot operating system.
volume 3, page 5. Kobe, Japan.

[Sch¨onemann et al., 2018] Sch¨onemann, V., Winner, H., Glock, T., Otten, S.,
Sax, E., Boeddeker, B., Verhaeg, G., Tronci, F., and Padilla, G. G. (2018).
Scenario-based functional safety for automated driving on the example of
valet parking. In Future of Information and Communication Conference,
pages 53–64. Springer.

[Sch¨utt et al., 2021] Sch¨utt, B., Steimle, M., Kramer, B., Behnecke, D.,
and Sax, E. (2021). A taxonomy for quality in simulation-based de-
arXiv preprint
velopment and testing of automated driving systems.
arXiv:2102.06588.

[Steimle et al., 2021] Steimle, M., Menzel, T., and Maurer, M. (2021). To-
wards a consistent terminology for scenario-based development and test
approaches for automated vehicles: A proposal for a structuring framework,
a basic vocabulary, and its application. arXiv preprint arXiv:2104.09097.
[Treiber et al., 2000] Treiber, M., Hennecke, A., and Helbing, D. (2000).
Congested trafﬁc states in empirical observations and microscopic sim-
ulations. Phys. Rev. E, 62:1805–1824.

[Ueno et al., 2016] Ueno, T., Rhone, T. D., Hou, Z., Mizoguchi, T., and
Tsuda, K. (2016). Combo: an efﬁcient bayesian optimization library for
materials science. Materials discovery, 4:18–21.

