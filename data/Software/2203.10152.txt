2
2
0
2

r
a

M
8
1

]
E
N
.
s
c
[

1
v
2
5
1
0
1
.
3
0
2
2
:
v
i
X
r
a

Automated Materials Spectroscopy Analysis
using Genetic Algorithms

Miu Lun Lau1, Min Long1, and Jeﬀ Terry2

1 Boise State University, Boise ID USA,
andylau@u.boisestate.edu, minlong@boisestate.edu
2 Illinois Institute of Technology, Chicago, Illinois,
terryj@iit.edu

Abstract. We introduce a Genetic Algorithm (GA) based, open-source
project to solve multi-objective optimization problems of materials char-
acterization data analysis including EXAFS, XPS and nanoindentation.
The modular design and multiple crossover and mutation options make
the software extensible for additional materials characterization appli-
cations too. This automation of the analysis is crucial in the era when
instrumentation acquires data orders of magnitude more rapidly than it
can be analyzed by hand. Our results demonstrated good ﬁtness scores
with minimal human intervention.

Keywords: Genetic Algorithm, EXAFS, X-Ray

1

Introduction

Advanced data analysis techniques for materials characterization data sets
are of growing interest to the material science community due to its capability
in detecting and potentially predicting the properties of materials. The per-
formance of this process is limited by two main factors: the signiﬁcant inputs
from users needed to retrieve important structural parameters and the quantity
of high quality data that is now collected due to advances in instrumentation.
The experiential data collected from modern instruments are orders of magni-
tude larger than can be analyzed by trained personnel. For example, the Fourth
Generation Synchrotron Light Sources that are coming online are expected to
produce data at rates 2-3 orders of magnitude greater than the current collec-
tion rates that are as high as 6 GB/s [1]. Advances in processing are necessary
to make in-situ real-time characterization of materials feasible. Processing large
quantities of data can result in reproducibility problems [2] when inexperience
users make errors that then slowing research productivity, which discourages
the quest for research excellence, and inhibits eﬀective technology transfer and
manufacturing innovation.

In order to address the need to analyze massive datasets both quickly and
accurately through solving multi-objective optimization problems, we have been
developing an open-source code base featuring a Genetic Algorithm (GA) that

 
 
 
 
 
 
2

Miu Lun Lau et al.

can analyze a variety of materials characterization data types with minimal hu-
man input to retrieve important parameters [3]. Although it is still under active
development, it has already demonstrated the ability to automatically analyze
extended X-ray Absorption Fine Structure (EXAFS) data, giving a reproducible
description of the local atomic structure of materials.

The GA-based EXAFS analysis package called EXAFS Neo [4] is written pri-
marily in Python. It requires the installation of Larch software package [5] and
utilizes a version of FEFF8.5l [6] code contained within Larch for calculating
the initial scattering paths. The code was not parallelized and we found that
parallelization was really not needed for eﬀective use as an analysis tool. How-
ever, we strongly recommended that users execute multiple calculations of the
same data set simultaneously for further error analysis. The included graphical
user interface (GUI) allows for populating multiple parameter sets for simultane-
ous exploration of parameter space. Several tutorial video demonstrations of the
EXAFS Neo package are available for viewing at the package download website [4].
Due to the modular design, this open-source software can be extended to other
materials characterization datasets. Our recent eﬀorts include extensions for the
analysis of X-ray Photoelectron Spectroscopy (XPS) and nanoindentation data.
We will brieﬂy introduce the materials characterization analysis in Section II,
with a focus on the group of parameters not commonly seen in other GA codes.
The design and implementation of GA for this problem is given in Section III.
We evaluate the experimental results and give performance analysis of the code
in Section IV. Finally, a summary of the work is given in Section V.

2 Analysis of Materials Characterization Data

We use EXAFS as an example to demonstrate the process of materials
characterization analysis. The principles discussed here are directly applicable
to the anslysis of other characterization tools such as XPS and nanoindenta-
tion. EXAFS is used to study local structure around a speciﬁc element on the
atomic scale. It can be applied to a wide range of materials including liquids,
amorphous solids, and crystalline materials. The absorption spectrum, µ(E),
with energy, E, of X-ray photons can be represented as a combination of the
background µ0 absorption and oscillations due to scattering events χ(E), i.e.,
µ(E) = µ0(1 + χ(E)). This equation is usually rewritten using the photoelectron
(cid:126)2 (E − E0)]1/2, where m is the electron mass, (cid:126) is the Plank’s
wavenumber k = [ 2m
constant, and E0 is called the energy of the absorption edge. This results in the
following equation for χ(k):

χ(k) =

µ(k) − µ0(k)
µ0(k)

.

(1)

The oscillations χ(k) result from the interference of scattered photoelectron
waves. Scattering can involve single or multiple scattering events. In single scat-
tering events, the electron wave scatters from only one neighboring atom before
returning to the source atom. In multiple scattering events, the wave may travel

Automated Materials Spectroscopy Analysis using Genetic Algorithms

3

to multiple nearby atoms through a variety of paths before returning to the
source atom. The trajectories of the photoelectron waves are described as paths.
These parameters describing these paths become the gene components of the
chromosomes in the GA code.

The measured X-ray absorption spectrum (XAS) [7] consists of two distinct
regions: the X-ray Absorption Near Edge Structure (XANES) region and the
Extended X-ray Absorption Fine Structure (EXAFS) region, which begins at
the end of the XANES region and extends beyond the absorption edge until the
oscillations damp out. The high energy endpoint is dependent upon the nature of
the scattering atoms. The EXAFS region is used to study interatomic distances,
coordination numbers, and lattice dynamics, from which one can often infer the
surface chemistry of complex systems.

The interference that leads to the measured EXAFS oscillations is due to the
interactions of the emitted photoelectron wave, ejected from inner core shells
by resonant radiation, with the waves scattered by neighboring atoms. These
scattered electron waves modulate the wavefunction of the original photoelec-
tion. If the interference is destructive, a photon cannot be absorbed because the
electron wave cannot be created. Conversely, if the interference is constructive,
more photons are absorbed. Sayers et al. [8] was ﬁrst to invert the measured ex-
perimental EXAFS data into quasi-radial distribution functions using a simple
point scattering theory. Extensions to this simple methodology result in the full
EXAFS equation:

χ(k) =

(cid:88)

i(paths)

(S2

0 Ni)Fi(k)
kR2
i

e−2σ2

i k2

e−2Ri/λ(k) sin[2kRi + φi(k) + δc(k)],

(2)

where i represents an individual scattering path, Ri is half of the scattering
distance, φi(k) is phase shift due to scattering, and δc(k) is the phase shift
due to the potential of the absorbing atom. Ni is the degeneracy of the path,
and S2
0 is the amplitude reduction factor that arises from quantum mechanical
considerations. S2
0 and Ni are coupled together to describe the amplitude of each
scattering path. Fi(k) is the eﬀective scattering amplitude for the waves in path
and σ2 is the Debye-Waller factor, which accounts for the thermal and static
disorder.

We can observe from Eqn. (2) that the EXAFS signal is a summation of
sinusoidal waves of varying amplitudes from scattering paths containing the
neighboring atoms. The waves are inherently spherical in nature and are aﬀected
by the type of atoms, temperature, neighboring atoms, as well as inelastic losses.
The scattering events χ(k) typically decay rapidly with increased wave number
k, which leads to lower signal to noise values at high-k. The χ(k) function is
often weighted by k2 or k3 to highlight the contribution from the high-k regions
of the spectrum. Analysis of the spectrum of k2χ(k) in terms of k is known as
K-space analysis.

A Fourier Transformation can be applied to the K-space data which leads
to R-space EXAFS data. This R-space data is not a true radial distribution

4

Miu Lun Lau et al.

Fig. 1. EXAFS spectra of copper metal of K edge in K and R-space. The data was
taken from XASLAB https://xaslib.xrayabsorption.org/spectrum/91/.

function, unfortunately. It can be used to limit the analysis to a speciﬁc range
of individual scattering paths. An example of K and R-space EXAFS data is
shown in Figure 1. The transformed spectra is:

χ(r) =

√

iδk
πNmax

Nmax(cid:88)

n=1

χ(k)Ω(k)kw

n exp(2iπn/Nmax)

(3)

where δk is the spacing in the k-space spectrum; Nmax is the array size; Ω(k)
is the input window function, used to reduced oscillation from truncation of the
input spectrum; and kw

n is the k weight applied to the data.

3 Design and Implementation of GA Analysis Code

Conventional analysis of EXAFS can be very diﬃcult depending on the num-
ber of scattering paths needed to ﬁt the experimental data. Each path is char-
acterized by a set of four parameters: [(S2
i , Ri]. We use ∆E0 to
correct energy mismatch of the absorption edge between experiment and theory.
It should be identical for all scattering paths from the same calculation. Many
software packages have been developed for EXAFS analysis, including Larch [5],
Demeter [9], WinXAS [10]. However these tools require signiﬁcant knowledge of
condensed matter physics, and can be diﬃcult for novice users to use. They can
also be quite time-consuming to use.

0 Ni), ∆E0, σ2

To address some of these issues, we have been developing an automated
Materials Characterization Software package for EXAFS, XPS, and nanoinden-
tation analysis. The code is GA-based for such a multi-objective optimization
problem. We should point out we are not the ﬁrst to apply GA to EXAFS anal-
ysis [11]. However a comprehensive study (e.g., crossover and mutation options)
of GA algorithms and their eﬀects on uncovering the parameters for materials
characterization analysis have not been studied. This is the goal of this paper.
GA is a heuristic optimization method inspired by the Darwinian theory of
evolution [12][13]. At the start of the algorithm, a population consisting of n

Automated Materials Spectroscopy Analysis using Genetic Algorithms

5

temporary solutions (individuals) is generated randomly throughout the solu-
tion domains. Each solution is considered as a chromosome consisting of the
parameters of interest and each parameter represents a gene of the chromosome.
The GA evaluates the ﬁtness of each solution in a population using a ﬁtness
function to determine the evolution of the next generation of solutions. To im-
prove the accuracy of the ﬁnal solution and the convergence rate of the involved
iterations, a number of evolutionary inspired operators (e.g., crossover, muta-
tion) are applied to each solution throughout subsequent generations. Since GA
is also a stochastic process, it requires multiple runs of identical parameters to
evaluate if the resulting solution reaches a global optimum. Compared to other
search methods, GA operates by performing a multi-dimensional search, and
encourages information exchange among the diﬀerent solutions. We will brieﬂy
describe how various operators aﬀect the optimization process and our imple-
mentation for EXAFS analysis. The literature of [14] is listed for reference on
general principles of GA.

3.1 Chromosome Representations of [S2

0 , ∆E0, σ2, ∆Ri]

The conventional GA cannot be applied directly but has to be customized
for automated materials characterization analysis due to the reasons discussed in
Section II. Unlike the conventional GA, where binary strings are used as individ-
ual chromosome in each individual, our software uses a ﬂoating point representa-
0 , ∆E0, σ2, ∆Ri]. ∆Ri is
tion of a set of parameters as individual components: [S2
used instead of Ri because we must ﬁnd how to modify the theoretical paths to
reproduce the experimental data. S2
0 Ni) is adopted because we
assume the degeneracy parameter Ni is static and taken from the ideal atomic
structure of the compounds under evaluation. In addition, all our parameters
are constrained to valid physical ranges to prevent unreasonable values from be-
ing introduced, such as non-positive amplitude or Debye-Waller factors. When
the number of “paths” of interest are determined, e.g., npath, each individual in
evolutionary population will consists of multiple (e.g.,npath) sets of parameters.

0 other than (S2

3.2 Crossover and Mutation

To allow convergence toward the global optimal solution, the best solutions
of each generation are selected to be parents of the future populations, mirroring
observation seen in nature. The selection process is based upon the ﬁtness values
in the population. We employed a selection approach similar to rank selection,
where each solution was sorted based on their ﬁtness values, from best performing
to the least. A certain percentage of the best performing solutions are selected for
retention in the populations. To ensure biodiversity and reduce the risk of getting
trapped in local extrema, a percentage of random solutions is generated as well.
The main challenge regarding the march toward the optimal solution involves
maintaining a balance between population diversity and selective pressure. A
large population diversity leads to slow convergence on the optimum solution,
while a low population diversity leads to premature convergence.

6

Miu Lun Lau et al.

Crossover or Recombination is described as the operation of combining parental

materials of two or more solutions during which the information is inherited and
exchanged to produce a new solution. In nature most species have two par-
ents but in GA the crossover operations can extend to more than two parents.
Following the crossover operator, two individuals are selected to generate sub-
sequent individuals throughout the GA. There are numerous techniques for the
crossover operator in the literature.[14] For example, in the single-point cross
over, the chromosomes of two parent solutions are swapped before and after
a single point. In the double-point crossover, however, there are two cross over
points and the chromosomes between the points are swapped only. We developed
three crossover methods in our GA code and tested them for EXAFS analysis.
The details of results will be discussed in Section IV.

Mutation operators modify existing solution by disturbing them by random
chance. The mutation usually occurs in the “gene” level. For example, an oﬀ-
spring in binary representation of “0101” can become “0111” depending upon
the probability of mutation or mutation rate. The exploration of additional por-
tions of phase space by the mutation operator can help to ﬁnd the global optimal
solution by allowing the escape from local optimal solutions. The mutation rate
is usually set to be very low, but allows for perturbations in the ranges of val-
ues. Conventionally, the mutation operator remains ﬁxed throughout the entire
optimization process. This can lead to ill-condition where the mutation opera-
tor is not suﬃcient to steer the solution out of a local extreme, which leads to
premature convergence of the solution set. A self-adaptive mutation operator
can mitigate premature convergence by increasing or decreasing the chance of
mutation at each generation, which allows the algorithm to continuously reﬁne
the search area.

In our GA code, we implemented an algorithm based on the Rechenberg
1/5 success rule [15], which increases the mutation probability (σ) based on the
“success ratio,” Si, at the current generation. It is deﬁned as the probability of
generating an improved ﬁtness value compared to the previous population. This
probability can be further extended to the Crossover operator as well but was
limited to the Mutation operator in this work. The mutation rate will increase
in subsequent generation if Si is greater than 1/5, and decrease if it is less.

3.3 Fitness Calculation and Exit Conditions

The ﬁtness calculation is used to compare the quality of individuals within
the given population. Typically, the ﬁtness is computed every generation to
ensure the solution is converging toward the optimal. However, the calculation
can be very expensive and most approaches aim to minimize the number of
ﬁtness function calls. The ﬁtness function employed for EXAFS is determined
by computing the diﬀerences between the GA model and experimental data at
each data point using a χ2 model:

χ2 =

Nindep
N

N
(cid:88)

(cid:0)ymodel

i

i=1

(cid:1)2

.

− ydata
i
(cid:15)2
i

(4)

Automated Materials Spectroscopy Analysis using Genetic Algorithms

7

i

represents the model data (e.g., χ(k)) at i, ydata

ymodel
represents the experimen-
i
tal data, Nindep is the number of independent points, N is the total number of
data points, and (cid:15)i is the measure of uncertainty at each data point. Depending
upon the collection methodology of the EXAFS data, the ratio Nindep/N can
range from 1/10 when the EXAFS signal is over-sampled to speed data collection
to 1 when the data is collected stepwise. In fact, this ratio can vary across the
energy range of the collected EXAFS data. For other materials characterization
analysis techniques like XPS and nanoindentation, we can utilize similar ﬁtness
functions (e.g., Eqn. 4) but with the appropriate theoretical functions used to
replace Eqn. 2 to construct the GA model. This modularized approach makes
our GA-based code an excellent platform for expansion to other applications.

The principles of GA present the reasoning that an optimal solution can
be reached after enough iterations. However, practical applications may deviate
from this ideal case because it is possible that the optimal solution has not been
found before iterations stop. Therefore, it is important to implement proper exit
conditions to terminate the running of the code. Our code uses two method for
determining when the algorithm reaches exit conditions. The ﬁrst one is to set
a maximum number of iteration by users. The second method is more adaptive.
When the solution doesn’t improves for a number of generations, we exit with
the assumption that an optimal has been reached. In our software, we provided
both methods of controlling the exit condition of the code.

3.4 Error Analysis

GA is a probabilistic optimization method where the solution can not be
expected to be identical over repeated runs. It is critical to perform a set of
individual, independent runs (e.g., 50) with varying conditions (e.g., population
size, generation number, mutation rate) to evaluate the accuracy of the solution
and determine the range of errors. In our GA code, we use the Global Random
Analysis method [16] to estimate errors of the GA-optimized parameters. The
error of each individual parameter (e.g., S2
0 , ∆E0, σ2, ∆Ri) in the simplest of
X-ray absorption cases can be quantiﬁed using a Poisson distribution and the
standard deviation is roughly equal to the square root of the absorption du-
ration time [17]. It is worth noting that this quantiﬁcation can only be used
when the sample is uniform in composition and thickness, and cannot be ap-
plied to heterogeneous samples or samples which have suﬀered any irradiation
damage. However, these limitation do potentially aﬀect the error analysis of this
methodology as they do in conventional EXAFS analysis.

During each generation, the individuals of the best ﬁtness value are stored
and used to construct the covariance matrix which contains the error for each pa-
rameter in the solution. Random perturbations of three parameters are selected
in a bounded range: population size (100-5000), total number of generations (10-
50), and mutation rate (0%-100%). For example, one individual run of 50 runs
could randomly select a condition in the bounded ranges like population size
200, generation number 30, mutation rate 20% and other runs may select other

8

Miu Lun Lau et al.

Table 1. GA ﬁtted parameters and errors from the synthetic data set.

Path N

S2
0

∆E0 (eV)

σ2 (˚A2)

∆R (˚A)

#

1
2
3
4
5

Model True Model True

Model

True

Model

True

12 0.62±0.03 0.62 -0.3±0.7 -0.91 0.0041±0.0004 0.004 0.0512±0.003 0.05
6 0.72±0.08 0.66 -0.3±0.7 -0.91 0.0015±0.0007 0.001 0.0118±0.005 0.01
48 0.5±0.2 0.74 -0.3±0.7 -0.91 0.0102±0.0044 0.014 0.0615±0.032 0.08
48 0.3±0.2 0.45 -0.3±0.7 -0.91 0.0068±0.0043 0.009 0.0467±0.043 0.00
24 0.22±0.08 0.14 -0.3±0.7 -0.91 0.0081±0.0024 0.005 0.0538±0.012 0.05

conditions. The GA code is run using each set of new starting conditions. The
combined results are utilized for global random analysis.

4 Experiment Results

The majority of the code is implemented and written in Python. All our ex-
periments were conducted on the Idaho National Laboratory High Performance
Computing (HPC) cluster ‘Sawtooth’ which is comprised of Xeon Platinum 8268
Processors. Each optimization was repeated 100 times to compute the standard
deviations and error matrix, and for each experiment we requested four CPU
cores and 12.0 GB of memory. To validate our GA code before applying it to
analysis of real experimental EXAFS data, we ﬁrst applied the code to a set of
synthetic data, which is generated from ﬁve known scattering paths. Gaussian
noise with a signal to noise ratio of 20 was added to the synthetic spectra.

Tab. 1 shows a set of GA ﬁtted parameters with the corresponding errors
generated from the synthetic data. The true values are also listed for comparison.
Since the scattering with single path has the shortest traveling distance, it has
the largest contribution to the absorption spectrum and is of particular interest.
It can be seen from the ﬁrst row (Path 1), all of the ﬁtted parameters: S2
0 , E0,
σ2, and δR match extremely well to the true values, indicating a high conﬁdence
of accuracy using our GA model. For the weaker scattering paths, the errors are
found to be larger but are comparable to conventional analysis methods.

Fig. 2 shows the GA ﬁtted spectra in both K-space and R-space in comparison
with the true synthetic data. The included Gaussian noise was higher than what
is usually observed in real experimental EXAFS data. This choice was made
to test the performance of our GA code under extreme conditions. It can be
seen that the GA code was able to obtain good matches to the actual values,
especially in lower k ranger, which contribute to the ﬁtted parameters with the
highest level of signal to noise ratio.

Fig. 3 shows the eﬀects of varying both the mutation and crossover opera-
tors, to explore their contributions to the change of the ﬁtness value. We can
observe the average ﬁtness value signiﬁcantly decreases (i.e., betters) along with
the evolution of generations. The crossover operator has the largest contribu-
tion to the improvement of the ﬁtness value in the early stages of the evolving

Automated Materials Spectroscopy Analysis using Genetic Algorithms

9

Fig. 2. EXAFS spectra ﬁts of the synthetic experimental spectra with added Gaussian
noise. Left: Spectra were ﬁtted in K-space over the region from 2.5 to 12.5 ˚A−1. Right:
Spectra in R space in a range from 0 to 5 ˚A.

Fig. 3. The eﬀect of the crossover (red) and mutation (blue) operators on the overall
calculation of ﬁtness value.

generations, which can be seen from the signiﬁcant heights of red bars in Fig.
3. The mutation operator contributes less in general compared to the crossover
operator in early stages and even has zero contribution in a few cases. However,
the mutation operator contribution dominates at the late stages of the evolution.
This is because the mutation probability increases as the generations evolve un-
der the Rechenberg algorithm, which leads to an increase in amount of phase
space probed by the mutation that occur. Mutation is also used to check if the
solution is in global optimal.

Next, we will employ three metrics to evaluate the quality of our ﬁts in both K
and R spaces: Coeﬃcient of Variation (R2), Mean Absolute Error (MAE), and
Root Mean Square Error (RMSE) [18]. R2 measures the residuals of spectra,
MAE measures errors within the same unit spectrum but gives similar weights
to outliers, and RSME is used to address amplitude errors from outliers.

10

Miu Lun Lau et al.

4.1 Crossover Analysis and Mutation Analysis

We provided three crossover methods in our GA code. Users can examine
their eﬀects and select the best option for their speciﬁc problems. The ﬁrst
method “uniform random crossover” utilizes uniform crossover where each gene
is selected randomly from either parent with equal probability. The second
method “AND crossover” utilizes a mixing rule where each gene in child is a
result of an AND logic operation on to each gene from its parents. The third
method“OR crossover” utilizes the similar mixing rule using an OR logic oper-
ator.

Table 2. Error analysis for three crossover and three mutations methods.

Crossover

Mutation

Method 1(uniform random) 2(AND) 3(OR) 1(maximum) 2(nested) 3(metropolis)

R2-K
R2-R

MAE-K
MAE-R

RMSE-K
RMSE-R

0.99856
0.99661

0.03912
0.03455

0.00231
0.00211

0.95530 0.94321
0.98541 0.97431

0.17298 0.03345
0.04561 0.04733

0.05333 0.00255
0.01044 0.00355

0.99900
0.99632

0.03389
0.03700

0.00175
0.00264

0.98625
0.99163

0.11349
0.04119

0.05250
0.00604

0.99920
0.99656

0.03047
0.03611

0.00142
0.00247

Tab. 2 shows that the ﬁrst method returns the highest contribution to the
true value in both K and R spaces. The second and third methods may produce
lower accuracy than the uniform random crossover in our application. This is
because our solution set only contains a limited number of four parameters,
therefore it is ideal to use uniform random crossover to promote information
exchange and diversity as much as possible between individuals. For this reason,
we adopted the uniform random crossover in the following experiments.

We also provided three mutation methods in our GA code for users. They all
use the same starting mutation probability at each generation σi and compare
it with some random number to determine if a new mutation is necessary. The
ﬁrst method “maximum mutation” generates a complete new individual in units
of the parameters if a random generated number reaches the mutation probabil-
ity. It is a simple method and maximizes the number of possible mutations in
the population. It ensures that suﬃcient genetic diversity is introduced within
the overall population. The second method “nested mutation” introduces a sec-
ondary random number to control the actual mutation. The new individual can
only be generated in units of gene when the both random numbers are less than
the mutation rate at each generation. This method ﬁts a more traditional GA
where the actual mutation rate for each gene is typical set very low (e.g., 1 to
5%).

Automated Materials Spectroscopy Analysis using Genetic Algorithms

11

Algorithm 1 Mutation method 2:
Nested Mutation. Note: Removing
lines 4,5,6,8,9 can lead to Mutation
method 1: Maximum Mutation.
Input: Mutation Rate σ, Individual Pi
Output: Individual Pi
1: for Pi in Populations (P ) do
2:
3:
4:

Generate a number x in [0..100]
if x < σ then

for number of variables in each
scattering paths do

Generate a number y in
[0..100]
if y < σ then

Generate new individual

5:

6:
7:
8:
9:
10:
end if
11: end for

end if
end for

Algorithm 2 Mutation method 3:
Metropolis Mutation
Input: Mutation Rate σ, Individual Pi,

Fitness f orig

i

Generate a random x in [0..100]
if x < σ then

Output: Individual Pi
1: for Pi in Populations (P ) do
2:
3:
4:
5:
6:
7:
8:

Mutate the Scattering Paths
Calculate New Fitness f mut
if f mut
i

< f orig
i
Accept the Mutation

then

exp(−(fmut −

else
forig)/K(i)) < t then

if

i

Accept the Mutation

Reject the Mutation

else

9:
10:
11:
12:
end if
13:
14: end for

end if

i

− f orig
i

)/K(i)) < t. The f mut

The third method “metropolis mutation” is modeled after the Metropolis-
Hasting algorithm [19], which rejects the mutation if the ﬁtness value is less
than current ﬁtness value, or accepts it if the following criterion is satisﬁed:
exp(−(f mut
are ﬁtness values after
and before the mutation, t is a random uniform value ∈ [0, 1], and where
KiK(i) = −δf / ln(1 − i/imax) is a parameter called the cooling rate. The δf
is the absolute diﬀerence in ﬁtness value between subsequent generations, i is
the current generation number, and imax is the maximum generation. This cool-
ing rate allows the possibility of accepting parameters outside of the predeﬁned
range, while assuming that the mutation rate will decrease at a linear rate.

and f orig

i

i

Table 2 compares the diﬀerent mutation methods. We can see that the value
of R2 for mutation method 1 and method 3 is very similar, but the ﬁtness
value for the method 2 performed the worst. This indicates that analyzing a
relatively small parameter set in the EXAFS application would require a large
mutation rate to enhance the mutation possibilities and ensure the diversity of
the population.

4.2 Cut oﬀ Analysis for Selecting Scattering Paths

One of the main diﬃculties in obtaining an accurate ﬁt using GA for EXAFS
analysis lies in determining the number of scattering paths that may potentially
be observed in an EXAFS measurement and selecting from that set the actual
paths required to replicate the experimental results. The list of most signiﬁcant
paths can be diﬃcult to obtain due to the eﬀectively inﬁnite number of potential
path combinations. On the other hand, there is no universally optimized ﬁxed set
of paths for all applications and it is important to deselect insigniﬁcant scattering

12

Miu Lun Lau et al.

paths with low contribution to the spectra. The analysis tools must be able to
handle these cases.

We have developed a process to analyze the contribution from potential scat-
tering paths and uncover the scattering paths with the largest contribution to the
spectra. We ﬁrst calculate the integrated area below the spectrum curve and the
contribution from each individual path. We selected the paths that contribute
more than a user-selectable, pre-deﬁned cut oﬀ percentage of these areas (e.g.,
1%). In this manner, we obtain a list of signiﬁcant paths for further analysis.

Fig. 4 shows χ2, from Eq. 4, as a function of the cut oﬀ percentage. We
analyzed four data sets of copper K-edge EXAFS spectra from metallic copper
collected at temperatures of 10K, 50K, 150K and 298K to test the path selection
method based on the cut oﬀ area percentage. The experimental data were ob-
tained from XASLAB. The initial number of scattering paths that we employed
was 42 which represented a full set of scattering paths with distances from 2.5527
˚A to 7.6580 ˚A. These paths were used to ﬁt the experimental data over the K-
space range from 3 ˚A−1 to 17.0 ˚A−1. After performing the cut oﬀ calculation, a
subsequent optimized set of paths was obtained and applied to a second round of
GA optimization that only used the optimized scattering path list and excluded
all paths with insigniﬁcant contributions to the measured spectrum.

The results of utilizing the cut oﬀ can be evaluated by using the ﬁnal ﬁtness
value score (i.e., χ2). However, we must strike a balance between the number
of scattering paths and the accuracy of the ﬁnal ﬁtness value. We tested our
algorithm by using multiple cut oﬀ percentages to observe the eﬀects on the
ﬁnal average ﬁtness value. We selected seven diﬀerent cut oﬀ percentages: 10%,
5%, 2%, 1%, 0.67%, 0.5% and 0.3%.

We observed that when the cut oﬀ percentage decreased from 10% to 1%,
the average χ2 score decreased (indicating improvement) for all of temperatures.
When the cut oﬀ percentage went below 1%, the χ2 score tended to increase
due to the increased number of paths that were included in the calculation. The
increased number of paths led to insigniﬁcant changes in the overall ﬁtness score.
In our experiments, we found that the best cut-oﬀ ratio was in the range of 1%,
although we allow users to select other cut oﬀ values for their applications.

4.3 Computational Performance

It is worth noting that there is no emerging need to parallelize our GA code
since the same data set must be run/analyzed multiple times (e.g., 100) to gauge
the errors compared to the experiments. However, parallelization is applicable
if the number of IO operations is reduced signiﬁcantly. In our current GA code,
evolutionary operators perform very frequent IO operations.

We measured the scalability of our GA code in terms of the number of scat-
tering paths. There are two major factors which can aﬀect the complexity of
the computation. The ﬁrst is the number of sample points in the spectra, which
is usually determined by the experimental conditions of the measurement, or
instrumentation setting. The second is the number of scattering paths selected
by users to represent the exploration range of atomic structure of interests. Fig.

Automated Materials Spectroscopy Analysis using Genetic Algorithms

13

5 shows the average time spent per generation as a function of the number of
selected paths. We can see that the algorithms scales very well, with a time
complexity O(n).

Fig. 4. χ2 as a function of the cut oﬀ
percentage for Cu foil EXAFS Spectra
in K-edge at various temperatures.

Fig. 5. The complexity increases as the
number of scattering paths increases.

5 Conclusion

We have developed a GA based software with the capability of eﬃciently
performing automated materials characterization analysis of both complex X-ray
spectra and nanoindentation data. We provided multiple crossover and mutation
options in the code from which users can choose to optimize the analysis for their
speciﬁc materials systems under study. We have extensively tested our software
under various synthetic and experimental conditions. Our results demonstrated
good scores of ﬁtting without human inputs. We also tested the code with various
cut oﬀ percentage to obtain the best scattering paths set. We note that caution
must be exercised in selecting the data set over which to perform the cut oﬀ
analysis. It must be representative of the entire collection of data to be analyzed
for the results to be meaningful. The extensibility of our code base is a major
advantage. Adding new analysis techniques does not require any new debugging
of the core module of the GA code.

6 Acknowledgments

This work was supported by author ML’s startup fund. It is also supported
through Idaho National Laboratory (INL) Laboratory Directed Research and
Development (LDRD) Program under DOE Idaho Operations Oﬃce Contract
DE-AC07-05ID14517. This research made use of the resources of the High Per-
formance Computing Center at INL, which is supported by the Oﬃce of Nuclear
Energy of the U.S. Department of Energy and the Nuclear Science User Facilities
under Contract No. DE-AC07-05ID14517.

14

Miu Lun Lau et al.

References

[1] B. Blaiszik, K. Chard, R. Chard, I. Foster, and L. Ward, “Data automation

at light sources,” vol. 2054, Jan. 2019, p. 020 003.

[2] G. H. Major, T. G. Avval, B. Moeini, and et al., “Assessment of the fre-
quency and nature of erroneous x-ray photoelectron spectroscopy analyses
in the scientiﬁc literature,” Journal of Vacuum Science & Technology A,
vol. 38, no. 6, p. 061 204, 2020.

[3] J. Terry, M. L. Lau, J. Sun, and et al., “Analysis of extended x-ray ab-
sorption ﬁne structure (exafs) data using artiﬁcial intelligence techniques,”
Applied Surface Science, vol. 547, p. 149 059, 2021, issn: 0169-4332.

[4] EXAFS Neo, https://github.com/laumiulun/EXAFS-Neo-Public.
[5] M. Newville, “Larch: An analysis package for xafs and related spectro-

scopies,” in J Phys Conf Ser, vol. 430, 2013, p. 012 007.

[6] J. J. Rehr, J. J. Kas, F. D. Vila, M. P. Prange, and K. Jorissen, “Parameter-
free calculations of x-ray spectra with FEFF9,” Physical Chemistry Chem-
ical Physics, vol. 12, no. 21, p. 5503, 2010.

[7] G. Bunker, Introduction to XAFS. Cambridge University Press, 2009.
[8] D. E. Sayers, E. A. Stern, and F. W. Lytle, “New technique for inves-
tigating noncrystalline structures: Fourier analysis of the extended x-ray
absorption ﬁne structure,” Phys. Rev. Lett., vol. 27, no. 18, p. 1204, 1971.
[9] B. Ravel and M. Newville, “ATHENA, ARTEMIS, HEPHAESTUS: Data
analysis for x-ray absorption spectroscopy using IFEFFIT,” Journal of
Synchrotron Radiation, vol. 12, no. 4, pp. 537–541, Jun. 2005.
[10] WinXAS v3.2, http://www.winxas.de, Retrieved: 2020-10-30.
[11] G. Bunker, N. Dimakis, and G. Khelashvili, “New methods for exafs anal-
ysis in structural genomics,” Journal of Synchrotron Radiation, vol. 12,
no. 1, pp. 53–56, 2005.

[12] J. H. Holland, “Genetic algorithms,” Scientiﬁc American, vol. 267, no. 1,

pp. 66–73, 1992.

[13] D. E. Goldberg and J. H. Holland, “Genetic algorithms and machine learn-

ing,” Machine Learning, vol. 3, no. 2, pp. 95–99, 1988.

[14] A. E. Eiben, J. E. Smith, et al., Introduction to Evolutionary Computing.

[15]

Springer, 2003, vol. 53.
I. Rechenberg, “Evolutionsstrategie’94,” in Werkstatt Bionik und Evolu-
tionstechnik, 1994.

[16] D. R. Redhouse, “Uncertainty quantiﬁcation of a genetic algorithm for

neutron energy spectrum adjustment,” Ph.D. dissertation, 2017.

[17] P. L. Meyer, Introductory probability and statistical applications. Oxford

and IBH Publishing, 1965.

[18] P. R. Bevington, D. K. Robinson, J. M. Blair, A. J. Mallinckrodt, and
S. McKay, “Data reduction and error analysis for the physical sciences,”
Computers in Physics, vol. 7, no. 4, pp. 415–416, 1993.

[19] S. Chib and E. Greenberg, “Understanding the metropolis-hastings algo-
rithm,” The American Statistician, vol. 49, no. 4, pp. 327–335, 1995.

