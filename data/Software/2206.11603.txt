2
2
0
2

n
u
J

3
2

]
E
S
.
s
c
[

1
v
3
0
6
1
1
.
6
0
2
2
:
v
i
X
r
a

SUBMITTED TO IEEE TRANSACTIONS ON SOFTWARE ENGINEERING

1

The Role of Emotional Intelligence in Handling
Requirements Changes in Software Engineering

Kashumi Madampe, Member, IEEE, Rashina Hoda, Member, IEEE, and John Grundy, Senior
Member, IEEE

Abstract—Background: Requirements changes (RCs) are inevitable in Software Engineering. Research shows that emotional
intelligence (EI) should be used alongside agility and cognitive intelligence during RC handling. Objective: We wanted to study the role
of EI in–depth during RC handling. Method: We conducted a socio–technical grounded theory study with eighteen software
practitioners from Australia, New Zealand, Singapore, and Sri Lanka. Findings: We found causal condition (software practitioners
handling RCs), intervening condition (mode of work), causes (being aware of own emotions, being aware of others’ emotions), direct
consequences (regulating own emotions, managing relationships), extended consequences (sustaining productivity, setting and
sustaining team goals), and contingencies: strategies (open and regular communication, tracking commitments and issues, and ten
other strategies) of using EI during RC handling. We also found the covariances where strategies co-vary with the causes and direct
consequences, and ease/ difﬁculty in executing strategies co-vary with the intervening condition. Conclusion: Open and regular
communication is key to EI during RC handling. To the best of our knowledge, the framework we present in this paper is the ﬁrst
theoretical framework on EI in Software Engineering research. We provide recommendations including a problem–solution chart in the
form of causes, direct consequences, and mode of work against the contingencies: strategies for software practitioners to consider
during RC handling, and future directions of research.

Index Terms—emotions, emotional intelligence, affects, requirements, changes, human factors, software engineering, software teams,
socio-technical grounded theory, agile, well-being, workplace awareness

(cid:70)

1 INTRODUCTION

A S agile methods become the predominant approach

to Software Engineering, the frequent introduction of
requirements changes (RCs) – such as additions, modi-
ﬁcations, and deletions of functional and non-functional
requirements in the software development process – has
also become common [1]. From receiving, developing and
testing to delivering of the RCs, software practitioners use
various techniques [2], and show several emotions, such as
excitement, anxiety, and fatigue, during the RC handling life
cycle [3].

Emotional intelligence (EI) is the ability to process emo-
tional information and use it in reasoning and other cog-
nitive activities [4]. Our previous studies show that for
effective handling of these RCs it is not sufﬁcient to rely
only on agility and cognitive intelligence (one’s abilities to
learn, remember, reason, solve problems, and make sound
judgements [4]), but EI is needed as well. To the best of
our knowledge there exists no literature on EI in handling
RCs. Given its vital importance, we decided to study this in
depth, hence the central focus of this study is:

“The role of software practitioners’ emotional
intelligence during requirements changes handling”

For our

investigation, we used a Socio–technical
Grounded Theory (STGT) for data analysis [5]. STGT is an
ideal approach to study complex undiscovered phenomena

• K. Madampe, R. Hoda, and J. Grundy are with HumaniSE Lab, De-
partment of Software Systems and Cybersecurity, Monash University,
Australia.
E-mail: kashumi.madampe@monash.edu

in socio–technical contexts such as ours. The data collection
and analysis were iterative (2 iterations: iteration 1 ( 1 ),
iteration 2 ( 2 )) and interleaved. We collected qualitative
data by conducting eighteen semi-structured face-to-face
and online interviews ( 1 1: ten interviews, 2 2: eight in-
terviews) with software practitioners from Australia (N=8),
New Zealand (N=8), Sri Lanka (N=1), and Singapore (N=1).
The interviews in 1 lasted approximately 60 minutes, and
the interviews in 2 lasted approximately 30 minutes. The
interviews were also accompanied by pre–interview ques-
tionnaires ( 1 : 10 minutes to ﬁll; 2 : 30 minutes to ﬁll) to
gather data on the context of the participants.

We analysed data using STGT data analysis techniques
such as open coding, constant comparison, and memo-
ing. We identiﬁed that EI plays an important role in RC
handling. Based on our analysis, we describe the six C’s
associated with our study focus: the context, condition,
causes, consequences, contingencies (or strategies), and co-
variances related to EI in RC handling that we present as
a theoretical framework to guide research and practice. The
key contributions of our work are:

• Adding new knowledge to the growing literature on
human aspects in software engineering by explaining
the phenomenon of software practitioners’ emotional
intelligence during RC handling;

• Documenting the most common strategies whereby
software practitioners use their emotional intelligence
during RC handling;

1. Approved by The University of Auckland Human Participants

Ethics Committee. Approval Number: 023015

2. Approved by Monash Human Research Ethics Committee. Ap-

Manuscript received June, 2022; revised xxxx.

proval Number: 23578

 
 
 
 
 
 
SUBMITTED TO IEEE TRANSACTIONS ON SOFTWARE ENGINEERING

2

• Presenting a set of practical recommendations derived

from our ﬁndings for SE practitioners; and

• Identifying some key future research directions for SE

researchers.

2 DEFINITIONS, BACKGROUND, AND A MOTIVAT-
ING EXAMPLE
2.1 Deﬁnitions

We use some specialist terminology throughout our paper.
We deﬁne them as below (cited deﬁnitions are from direct
sources, and uncited deﬁnitions are our own). The terms are
listed in their order of appearance in the paper.
• Emotion: A sequence of

synchronised
changes in the states of all the ﬁve organismic subsystems
(information processing, support, executive, action, and
monitoring) in response to the evaluation of an external
or internal stimulus event as relevant to central concerns
of the organism [6]

interrelated,

• Emotional intelligence: Type of intelligence that involves
the ability to process emotional information and use it in
reasoning and other cognitive activities [4]

• Emotion regulation: Any process that decreases, main-
tains, or increases emotional intensity over time, thereby
modifying the spontaneous ﬂow of emotions [7], [8], [9]
• Emotional response: An emotional reaction, such as hap-

piness, fear, or sadness, to give a stimulus [4]

• Empathy: Understanding a person from his or her frame
of reference rather than one’s own, or vicariously expe-
riencing that person’s feelings, perceptions, and thoughts
[4]

• Central phenomenon: The focus of the study [10]
• Context: This is where the central phenomenon took
place. This includes participants’ demographics, and their
team and project information [10]

• Condition: A factor that affects the central phenomenon

[10]

• Causal condition: The condition that gave rise to the

central phenomenon [10]

• Intervening condition: A condition that alters the central

phenomenon in some way [11]

• Cause: The result of the central phenomenon [10]
• Consequence: The output of the cause [10]
• Direct consequence: The immediate output of the cause
• Extended consequence:The immediate output of the di-

rect consequence

• Contingency: Any event that can occur given a speciﬁc

cause or condition [10]

• Strategy: An action that can be executed
• Variable: Context, condition, cause, consequence, or con-
tingency which are the elements of the central phe-
nomenon [10]

• Covariance: The change of one variable with another [10]

2.2 Background

2.2.1 Requirements Change Handling

Agile methods are widely used in software engineering
contexts and promote the idea of introducing RCs even
late in development [12]. However, software practitioners
encounter many challenges such as lack of requirements

traceability [13], incorrect requirements prioritisation [13],
minimal requirements documentation [1], [14], [13], [15],
contractual issues [13], and customer agreement [13] in
handling these new RCs.

In addition to these challenges, in our earlier work we
found that RCs in agile contexts are challenging to handle
when their complexity is high, cascading impact is high, size
is large, the effort required is high, the deﬁnition is imprecise
or unclear, the priority is high, the access to customer is
difﬁcult or irregular, and the cross-functionality is forced
[16]. Even though there are practices (e.g., face–to–face com-
munication [17], [18], [19], [20] iterative requirements [21],
[22], [20] [19], prototyping [21], [22], [23] review meetings
[22], [19], and prioritisation [21], [22], [19], see Table 2)
that are available to mitigate these challenges and handle
RCs, most of these challenges result in varying emotional
responses in software practitioners [3], [16].

2.2.2 Emotional Intelligence

There are several deﬁnitions for EI. Salovey and Mayer,
who proposed the concept of EI, deﬁne it as “a type of
intelligence that involves the ability to process emotional
information and use it in reasoning and other cognitive
activities” [4]. This concept was made popular by Daniel
Goleman, who proposed in his work with his colleagues [24]
the key aspects of EI, such as self-awareness – awareness of
own emotions, social awareness – awareness of others’ emo-
tions, self-management – regulating own emotions, and rela-
tionship management – managing relationships. The ﬁndings
on causes and direct consequences we present in this paper
were named using these four aspects. As researchers found
assessing EI is worthy of attention, several EI assessment
measures currently exist. These EI measures fall into ability–
based or mixed–based model categories. The EI measures
that are currently available and their details are summarised
online3, hence we do not explain about them here.

In our earlier work we found that agility, cognitive
intelligence, and EI of SE practitioners need to be used
together to handle RCs effectively [16]. Studies focusing on
agility and cognitive intelligence are prominent in Software
Engineering research. However, studies focusing on EI are
very limited ([25], [26]). Kosti et al. [26] show that there are
connections between the EI of the developers and their work
preferences. They say that, people with higher EI prefer be-
ing responsible of the entire development process, and like
to prioritise the tasks by themselves rather than a manager
doing that for them. According to [25], the inﬂuence of EI on
software developers’ stress is negative, and EI fosters trust
among developers. As yet, there exist no studies focusing
exclusively on EI during RC handling.

2.3 Motivating Example

Consider Kash, who is a developer in a software team. She
receives a new RC to work with her colleagues. Because the
change was unexpected and impacts her current work, she
feels frustrated about this new work (awareness of own emo-
tions). She also perceives that for similar reasons her team-
mates are also frustrated (awareness of others’ emotions).

3. https://www.eiconsortium.org/measures/measures.html

SUBMITTED TO IEEE TRANSACTIONS ON SOFTWARE ENGINEERING

3

She then thinks it is better to share how she feels with her
team during their retrospective meeting (a strategy for being
aware of own emotions, and regulating own emotions). She
understands that she has to be open to new RCs as she is
working in a software development context (a strategy to
regulate her own emotions). She also thinks that if herself
and her team have open and regular communication about
new RCs then it will help everyone to bond and have better
relationships within the team (a strategy to manage team
relationships). Furthermore, she ﬁnds that these approaches
allow her to sustain her own productivity within the team, but
also to set and sustain team goals. However, when working
in an ofﬁce environment (in–person), she ﬁnds that some
strategies that she uses to be aware of her emotions and
her teammates’ emotions, to regulate her emotions, and to
manage relationships with teammate, are easier to apply in–
person than remotely.

3 APPROACH

An overview of our study approach is given in Fig. 1. We
collected data from practitioners in Australia, New Zealand,
Singapore, and Sri Lanka in two iterations (one for high
level understanding of general issues in RC handling and
emotional responses to RCs, and the other with a ﬁner
focus on emotional intelligence). We used socio–technical
grounded theory (STGT) [5] techniques such as open coding,
constant comparison, and memoing to analyse the data.
The steps we followed consisted of developing the study
protocol (pre–interview questionnaire development, inter-
view guide formation), conducting a pilot study, collecting
data, and analysing data. We elaborate on these steps in the
following sub–sections.

3.1 Protocol Development

Pre–interview Questionnaire Development. We collected
participants’ demographics (Section 4.1.1), team, and project
information (Section 4.1.2), through a pre–interview ques-
tionnaire. Having a pre–interview questionnaire helped us
gain a better understanding of the participants and the
context they are planning to discuss in the interviews in
advance, and also allowed us to have enough time to focus
the interview on the RC handling situation. The questions
in the pre–interview questionnaires of 1 and 2 were the
same, except that 2 had an additional question about the
impact of Covid–19 on RC handling, and an EI scale. All
the pre–interview questions were mandatory and close–
ended except for the question on Covid–19, which was an
optional open–ended question. The approximate time spent
on ﬁlling the pre–interview questionnaire per participant
was 30 minutes in 2 , and 10 minutes in 1 . As we recruited
participants from a software company in 2 , we had an
additional step where a senior management level employee
reviewed the pre–interview questionnaire to ensure the
questions were in line with company policies.

Interview Guide Design. To get an in–depth under-
standing of the role of EI in handling RCs, we collected
qualitative data through semi–structured interviews. One
advantage of conducting interviews was the ability to ask
the participants follow up questions, which is a limitation in

open–ended questions in surveys. To guide our interviews,
we designed the interview guides (one for each iteration)
with an estimated time of 60 minutes and 30 minutes
respectively. The interview guide in 1 focused on general
issues of emotions experienced during RC handling, and 2
focused solely on EI during RC handling.

In 1 , we started the interview by asking the participants
to walk through a scenario where they had RCs, and then
we asked follow-up questions such as “how did you feel
when you received the RC?” and so on. As the study
progressively focused on EI, in 2 , we included questions
to cover the four aspects of EI as deﬁned by Goleman et al.
[24], i.e., self-awareness, self-management, social awareness,
and relationship management. This was done to ensure the
proper treatment of EI as deﬁned in Psychology. However,
the actual terms were not used in the interview questions
and interviewees were allowed to express their experiences
freely. Therefore, in the interview guide of 2 , we ﬁrst asked
the participant to describe the situation that they used when
answering the pre–interview questionnaire. Then we de-
signed the rest of the questions to elicit more data to answer
our research questions. For example, the starting question
“Let’s talk about the RC handling situation you used to
answer the questions in the pre–interview questionnaire.
Can you describe it for me?” followed by questions such
as “how did that make you feel?,” “what did you do to
manage how you felt?,” “how did your teammates react?,”
“how did you work as a team in that situation?,” what could
have been different for you not to experience so?” (if the
situation was challenging) and “how did the feelings you
had affect the progress of working on that RC?.” We also
prepared a slide with a list of emotions, similar to [3], to
help participants recall how they felt in answering questions
related to how they felt when handling RCs.

Explanatory Statement and Advertisement Prepara-
tion. Explanatory statement. In both iterations, we docu-
mented the details of the study in a statement in which
we explained what the participants are expected to do,
and further crucial
information such as the impact of
participation/non–participation/withdrawal of participa-
tion in the study, and conﬁdentiality.

Advertisement. We designed an advertisement to gauge
the interest of potential participants. The advertisement
provided a high level view of the study. Especially since 2
focused on EI, both the advertisement and the explanatory
statement avoided the words “emotions” and “intelligence”
to reduce the drop–rate of potential participants and any
biases that could occur when answering the questions.

3.2 Transitional Piloting

As we transitioned from 1 , asking more generally about
emotions when handling RCs, to 2 with a deeper focus on
EI, we decided to pilot our revised protocols with an in-
dustry practitioner. An experienced software architect from
Sri Lanka helped us pilot our revised protocols. It became
apparent that if the pre–interview questionnaire was ﬁlled
in advance, the participant was likely to forget it by the
interview time. Due to this experience, we decided to ask
the participants in our study to ﬁll in the pre–interview
questionnaire an hour before the scheduled interview time.

SUBMITTED TO IEEE TRANSACTIONS ON SOFTWARE ENGINEERING

4

Fig. 1. STGT Study Approach (Protocol development includes pre–interview questionnaire development, interview guide formation, and explanatory
statement and advertisement preparation)

This made us change our initial scheduling plan in 2 by
having two blocks scheduled for the participants – one to
ﬁll in the pre–interview questionnaire, and the other for the
interview.

3.3 Data Collection

The study commenced with the use of convenience sam-
pling and later moved to using theoretical sampling.

Participant Recruitment. In 1 , we made an open call by
sharing the advertisement with the explanatory statement
on social media such as LinkedIn, Twitter and Facebook.
We recruited ten participants in this iteration. In 2 , we
sent the same artefacts (but with different content) to per-
sonal contacts and also recruited six participants from a
large software company. An employee who works at this
company shared the advertisement and the explanatory
statement with the potential participants. They also helped
in scheduling the pre–interview questionnaire ﬁlling time
and interviews. The participant demographics, project and
team information, and the scenarios participants used in the
study are given in Section 4.

Distribution of the Pre–interview Questionnaire. The
ﬁrst author shared a link to the pre–interview questionnaire
with potential participants who showed their interest in par-
ticipating in the study one or two days before the interview.
In 1 , the pre–interview was hosted by Google Forms at The
University of Auckland. The pre–interview questionnaire of
2 was hosted on Qualtrics at Monash University. The ﬁrst
author made sure that pre–interview questionnaires were
not ﬁlled way ahead of the interview, but only just before
the interview, by checking Google Forms and Qualtrics.

Conducting Semi–structured Interviews. In 1 , the ﬁrst
author conducted the seven interviews face–to–face, and
three interviews online (Skype). In 2 , the ﬁrst author
conducted all the interviews online (Zoom) with the par-
ticipants due to the Covid–19 pandemic. The average time
spent on interviews remained the same as we planned (60
minutes and 30 minutes respectively).

3.4 Data Analysis

In 1 , the audio-recorded interviews were transcribed by
the ﬁrst author and a professional transcriber under conﬁ-
dential agreement. In 2 , we used otter.ai4 to transcribe the
interviews. Furthermore, MAXQDA was used to analyse the
qualitative data. We analysed the qualitative data collected
from the interviews and from the open–ended question
on Covid–19 using open coding and constant comparison
techniques in Socio–Technical Grounded Theory (STGT) [5].
We used STGT data analysis techniques as STGT is designed
to uncover the insights in socio–technical environments, and
due to positive experience using it in our previous studies
[3], [16].

Open Coding and Constant Comparison. Fig. 2 shows
an example of STGT analysis. In this example, the raw
data “Open and honest communication always and pulling
people up when there’s any type of emotion” resulted in the
code “Open [+honest] and regular communication [moti-
vate when having negative emotions] with others,” which
is the researcher’s interpretation of data in small chunks
of meaningful words. These codes were then constantly
compared, and similar codes were grouped to develop
the concept “Open and regular communication.” The same
constant comparison technique was applied to the concepts
to come up with the category “Strategies.”

Memoing. Memos were written in detail as interview
reﬂections (See Appendix for an example), especially in 2 .
Conceptual memos (See Appendix for an example) were
written throughout the data collection and analysis process.
Memoing helped in identifying relationships between cat-
egories. All ﬁndings were then visualised in Miro (visual
memo).

Final Output – A Theoretical Framework. Together, the
above led to the development of a theoretical framework
presented in Fig. 3. To visualise our framework, we con-
sulted Glaser’s six Cs model [10] and Strauss and Corbin’s
paradigm model [11].

4. https://otter.ai/

Data collection: Pre-interview questionnaire + semi-structured interviewsData analysis: Grounded Theory analysisSix Cs of software practitioners’ emotional intelligence during requirements changes handling1.Context2.Conditions3.Causes4.Consequences5.Contingencies6.CovariancesIteration 1: Data collection: Pre-interview questionnaire + semi-structured interviewsData analysis: Grounded Theory analysisIteration 2: 10 participantsNew Zealand, Australia8 participantsAustralia, Sri Lanka, SingaporeData collection and analysis: convenience sampling, theoretical sampling, open coding, constant comparison, memoingPresenting findingsProtocol Development +Pilot StudyProtocol DevelopmentSUBMITTED TO IEEE TRANSACTIONS ON SOFTWARE ENGINEERING

5

Fig. 2. Emergence of the Category: Strategies from raw data → codes → concepts → category through constant comparison

4 FINDINGS

Within the context of software teams in Australia, New
Zealand, Sri Lanka, and Singapore, we found conditions,
causes, consequences, contingencies: strategies, and covari-
ances, which altogether are the six Cs of software practition-
ers’ Emotional Intelligence during Requirements Change
handling. The six Cs are shown in Fig. 3. In this section, ﬁrst
we explain the context, then the conditions, and after that
causes and consequences, contingencies, and covariances in
order.

4.1 Context

4.1.1 Participant Demographics

4.1.2 Participants’ Team and Project Information

While all of our participants were working in team con-
texts, they used examples from their current/most recent
projects to share their experiences with us. All participants
used agile methods in their projects. The team and project
information are summarised in Table 2.

4.2 Conditions

Our ﬁndings indicate that the EI of practitioners during RC
handling comes to play under the causal and intervening
conditions. The causal condition we found was software
practitioners handling RCs, and the intervening condition we
found was the mode of work.

Eighteen software practitioners participated in our study.
We had an equal number of participants from Australia and
New Zealand (N=8; 44.44% each). The remaining two par-
ticipants were from Sri Lanka and Singapore. 10% (N=6) of
our participants played more than one role in their projects.
They included managers and Scrum Masters (N=5; 27.78%
each); developers (N=4; 22.22%); and other roles such as
Business Analyst, Product Owner, Tester, Senior Solutions
Architect/ Principle Architect, and Global Head of Projects.
They had a mean total experience of 14.39 years (min–
total–experience=2 years; max–total–experience=56 years),
and a mean agile experience of 6.81 years (min–agile–
experience=1; max–agile–experience=18 years). The detailed
demographic information of the participants is given in
Table 1.

4.2.1 Causal Condition: Practitioners Handling RCs

–Shared by all participants.

When ﬁlling the pre–interview questionnaire, each par-
ticipant used a speciﬁc RC handling scenario from their
current or most recent software development project. These
scenarios caused several emotional responses in them, and
emotions of others’ around them, which they became aware
of, regulated the emotions, and managed the relationships.
Hence, practitioners’ handling of RCs is the causal condition
of our study. The majority of their scenarios were about
modiﬁcation of requirements (N=9), and the rest were addi-
tions (N=6), deletions (N=2), and a combination of a deletion
and an addition (N=1). The summary of scenarios used by
the participants and the causal condition derived from the
scenarios are given in Table 3.

“Open and honest communication always and pulling people up when there’s any type of emotion” –P2“And say, look we’re all in this boat together, none of us is going to stop this from happening, you know, you have a conversation.Figure out what’s in it for them and all of that.But, and ultimately, it’s going to take a couple of hits before they realise” –P6“If someone wants to talk more details, we can have more insights. So here we put more information like pictures, some kind of a conversation which they had, why they had as well, what are the emotions or feelings behind that as well” –P5 “We are having retrospectives like this at the end of each sprint. So, this is something that we do bi weekly… So basically, we have like a board where each of us like we put in our cards and the things that went well during the sprint as well as things that did not go so well during the sprint. So, most of the time, like at least is one card in each of those columns by individual team member” –P17Open [+honest] and regular communication [motivate when having negative emotions] with othersOpen communication [RC in detail, emotions] with othersOpen communication [emotions] with othersOpen communication [emotions] with others at retrospectivesOpen and regular communicationShare how individuals feel with peersShare how individuals feel with peersShare how individuals feel with manager/ peersShare how individuals feel with peersStrategies+10 more strategiesRaw DataCodesConceptsCategorySUBMITTED TO IEEE TRANSACTIONS ON SOFTWARE ENGINEERING

6

Fig. 3. Six Cs of Software Practitioners’ Emotional Intelligence during RC Handling (*These are four aspects of Emotional Intelligence as deﬁned
by Goleman et al. [24], which we used to name the concepts. They are depicted on different sides of the central phenomenon because of the
relationships among them.)

4.2.2 Intervening Condition: Mode of Work

–Shared by P11–P18.

Table 3 indicates the modes of work (in–person, and
remote) of our participants, which we captured through
the pre-interview questionnaire. The majority of our par-
ticipants worked in–person (N=11) and the rest worked
remotely (N=7). There was no hybrid work at the time of
data collection. Our STGT analysis shows that the mode of
work intervenes in the execution of the strategies, hence it is
an intervening condition. For example, remote work makes
it difﬁcult to have open and regular communication, but in–
person work makes that easy. For instance,

“I think the face to face has more high bandwidth. But
there are lots of circumstances where remote or just not real
time is more efﬁcient and more effective. I think, in difﬁcult
conversations I prefer face to face. I think it’s easier to have
a difﬁcult conversation face to face...” – P13

Similarly, empathising with others is claimed to be more
difﬁcult when working remotely, and easier when working
in–person. On the other hand, tracking commitments and

decisions is claimed to be easier in remote work and more
difﬁcult when working i–person. As P17 said,

“So the communication is pretty transparent. Now that
we’re doing this remotely. Because it can track any sort of
communication that we’re doing with the decision making
and reasoning. So we always Zoom recordings, so that
they are decision driven meetings. Also there are like Slack
conversations like there are team channels where there is
like a lot of to and fro between people who are making the
important decisions. And so the rest of the team you can
also be about, the reasoning why these decisions are being
made as well. So in terms of data being transparent, I feel
it’s much more better when we’re doing it remotely, rather
than in person when we just have meetings and boards and
all. Sometimes there’s no note taker, or sometimes we are
not actually recording it. So there are no meeting notes to
refer back to. So a lot of times important information stages
get forgotten after some point in time, but when you do it
remotely, you have like an entire history of conversations
that happen in the decisions.” – P17

CovariancesSoftware practitioners’ emotional intelligence during RC handlingEase/difficulty in executing strategies vary with intervening conditionsCovariance CConsequencesAustralia –New Zealand –Sri Lanka -SingaporeSoftware development teamsContextSharing how individuals feel with manager/peers (one-to-one/many), open and regular communication (many-to-many), building personal rapports with others, empathise, being open to RCs, focusing on learning from the RC, pre/post control of expectations about RC, understanding/using the level of autonomy individual has over RC implementation, tracking commitments and decisions, having a dedicated lead for RC, having team/social rituals, working as a single cross-functional teamStrategies vary with the direct consequencesCovariance B4.14.3Contingencies: StrategiesBeing aware of own emotions, being aware of others’ emotionsCauses*4.3Conditions4.24.44.5Strategies vary with the causesCovariance ARegulating own emotions, managing relationshipsDirect*Sustaining productivity, setting and sustaining team goalsExtendedSoftware practitioners handling RCsCausalMode of work(in-person, remote)InterveningSUBMITTED TO IEEE TRANSACTIONS ON SOFTWARE ENGINEERING

7

TABLE 1
Demographic Information of the Participants (P#: Participant ID; XT: Total Experience (years); XTA: Total agile experience (years); NZ: New
Zealand; AU: Australia; SG: Singapore; SL: Sri Lanka; XP: Extreme Programming; FDD: Feature Driven Development; DSDM: Dynamic Systems
Development Method; TDD: Test Driven Development.)

P#

Country

XT

XTA Agile Methods Experience

Role in the Project

P1
NZ
P2
NZ
P3
NZ
P4
AU
P5
NZ
P6
NZ
P7
NZ
P8
NZ
NZ
P9
P10 AU
SG
P11
P12
SL
P13 AU
P14 AU
P15 AU
P16 AU
P17 AU
P18 AU

20
56
24
25
15
26
3
19.5
7
2
6
3
8
11
6.5
19.5
3.5
4

12
16
4
8
4.6
1
2
18
5
2
4
3
8
11
6.5
10
3.5
4

Scrum, XP, Scrum XP combo, Kanban, FDD, Scrumban
Scrum, XP, Scrum XP combo, Kanban
Scrum, Kanban
Scrum, XP, Kanban, FDD, DSDM
Scrum, XP, Scrum XP combo
Scrum
Scrum, Kanban
Scrum, XP, Scrum XP combo, Kanban, Spotify, Company methods
Scrum, Kanban, FDD
Scrum, Kanban
Scrum
Scrum, Scrum and XP combo, Kanban
Scrum, Scrum XP comobo, Kanban, FDD, Spotify, Waterfall
Scrum, Kanban, Waterfall
Scrum
Scrum, Kanban, FDD, Waterfall
Scrum, TDD
Scrum, Kanban

Tester/ Scrum Master
Manager
Business Analyst
Global Head of Projects
Scrum Master
Scrum Master
Scrum Master
Senior Solutions Architect/ Principle Architect
Tester
Scrum Master/ Business Analyst/ Manager
Developer/ Product Owner
Agile Coach/ Scrum Master
Manager
Developer
Manager
Manager/ Developer/ Tester
Developer
Developer

TABLE 2
Information of Current/ Most Recent Project of the Participants (Other: Product Support and Rewrite/Update of Existing Functionality; XP: Extreme
Programming; DSDM: Dynamic Software Development Method; Some Participants’ Projects Belonged to More Than One Category, and Some
Participants Used More Than One Software Development Method)

Project Domain

# of Participants

Project Category

# of Participants Development Method Used

# of Participants

Transport
IT
Finance & Banking
Business Services
Facilities
Media and Communications

3

1

1
1
1

11

Software as a Service
New Development
Migration
Maintenance
Other

10

3

4

6

2

XP
Kanban
Scrum
DSDM
ScrumKanban Combo
ScrumXP Combo
ScrumWaterfall Combo

4

6

11

1
1
1
1

Team Size

# of People

Iteration Length

# of Weeks

Minimum
Maximum
Mean
Standard Deviation

4
50
10.61
10.56

Minimum
Maximum
Mean
Standard Deviation

1
5
2
0.84

Practices Followed (Order of the bars in each graph below: Never → Sometimes → About half of the Time → Most of the Time → Always)

Collective Estimation
Customer Demos
Daily Standup/ Team Meeting
Deﬁnition of Done
Iteration Planning

Product Backlog
Short Iterations/ Sprints
Release Planning
Retrospectives
Review Meetings

Scrum/ Kanban Board
Self-assignment
Sprint Backlog
User Stories
Pair Programming

4.3 Causes and Consequences

EI is the ability to process emotional information and use it
in reasoning and other cognitive activities. We identiﬁed be-
ing aware of one’s own emotions, and being aware of others’
emotions, as the causes of using EI during RC handling; and
regulating own emotions, and managing relationships, as
the direct consequences of the causes. Additionally, we iden-
tiﬁed sustaining productivity, and setting and sustaining
team goals, as extended consequences. In this section, we
describe causes and consequences together, and extended
consequences separately.

4.3.1 Being Aware of Own Emotions (cause) and Regulat-
ing Own Emotions (direct consequence)
–Shared by all participants.

Software practitioners feel a wide range of emotions
when handling RCs. These span across both high and
low pleasurable emotions [3]. The common emotions our
participants mentioned that they feel during RC handling
were excited, at ease, calm, content, relaxed, anxious, annoyed,
frustrated, nervous, stressed, and depressed. Additionally, some
participants mentioned the intensity of the emotion they
felt, such as very mildly anxious. This indicates that the
participants had an awareness of their emotions.

Apart from the emotions they felt, they also mentioned
why it is important to be aware of their own emotions when
handling RCs. These include: (a) understanding that emo-
tions are inﬂuenceable/inheritable, (b) understanding that
it is not necessary to expresses negative emotions always,
and (c) not allowing own negative emotions to impact team

SUBMITTED TO IEEE TRANSACTIONS ON SOFTWARE ENGINEERING

8

TABLE 3
Scenarios used in the interviews, respective causal, and intervening conditions

P#

Scenario used in the study

Causal condition
(RC handling)

Intervening condition
(mode of work)

P1

P2
P3
P4
P5
P6
P7
P8

Modifying a function after a customer requesting something different from
what was being started but was still aligning with sprint goal
Modifying a function
Modifying a function
Adding new features to increase the business value after a market analysis
Modifying a function
Modifying a function
Late addition of a missed requirement
Modifying a feature after a release
Modifying a function after a customer requesting something different from
what was being started in the middle of a sprint
P10 Adding a new feature after requesting a feature request
P11
P12 Adding multiple new requirements to upgrade an existing system
P13 Discovering new edge cases during development

Removal of features that end users no longer require

P9

Modiﬁcation

Modiﬁcation
Modiﬁcation
Addition
Modiﬁcation
Modiﬁcation
Addition
Modiﬁcation

Modiﬁcation

Addition
Deletion
Addition
Addition

In–person

In–person
In–person
In–person
In–person
In–person
In–person
In–person

In–person

In–person
Remote
In–person
Remote

Working on a modiﬁcation due to a requirement that incepted considering
only the ideal product/ design case but not considering
the realities of engineering
Removal of a no longer necessary requirement that caused engineering
dilemmas
Working on a modiﬁcation due to the development of a requirement based
on wrong assumptions
Requirement was a workaround for customer requirement and not exactly
what customer requested which also resulted in a new requirement instead
of the workaround
Enhancing the product to include a new requested requirement

P14

P15

P16

P17

P18

Modiﬁcation

Remote

Deletion

Remote

Modiﬁcation

Remote

Deletion +
Addition

Addition

Remote

Remote

goals; which are collectively, regulating own emotions. For
example,

So when the team is anxious, I also get a little bit anxious,
I need to hide that and sort of address the issue with the
excitement and energy that I have. Because if I address a
team being anxious, the team will sort of inherit that and
they will start being very reactive. And they might even
not show up for a daily Scrum if they get like that – P12
Our participants stated that emotions inﬂuence their
communication with others through the tone, especially in
the case of seniors in the team, as they inﬂuence others
via communication such as talking. Also, their actions have
an outsized impact on subordinates in the team; therefore,
it is important to be aware of own emotions to mitigate
inheritance of negative emotions.

I’ve seen the value that having someone who is particularly
someone more senior in the project who is aware of their
feelings, has been able to guide the rest of the team, kind of
through that experience of the requirements changes. – P15

4.3.2 Being Aware of Others’ Emotions (cause) and Man-
aging Relationships (direct consequence)
–Shared by all participants.

All of the participants in our study worked in team
contexts. In team contexts, there exists a high chance for
individuals to witness others’ expressing their emotions.
Our participants were able to identify the emotions that
others in their teams felt when handling the RCs. According
to our ﬁndings, the main emotion the participants identiﬁed
in others was anxiety. They were also able to recognise
differences in emotions others felt according to their role
and the level of seniority. As P15 shared,

“there was a very senior member in the team who was just
like very calm and very clear and kind of helped the team
navigate that emotional journey” – P15

The key reasons why it is necessary to be aware of
others’ emotions in handling RCs, as mentioned by our
participants, were (a) understanding the inﬂuence of others’
emotions on decision making, (b) fostering better communi-
cation, and (c) to empathise better; which collectively helps
in managing relationships. Our study participants believed
that not understanding others’ emotions properly can lead
to wrong decisions. Thus it is necessary to gauge team mem-
bers’ feelings to understand and question their decisions,
and to understand any individual biases in making deci-
sions. They also mentioned that for better communication it
is necessary to know if others are emotion-driven or not, so
that they can potentially tailor their approach to working
with them. As per our analysis, being aware of others’
emotions helps empathise better. That is, it helps them to
identify what triggers different emotions of others and to
interact with others in the team with an understanding.
It also helps them to better understand how ‘the team is
feeling’ and helps them to better perceive the work the team
is doing. They can also get an idea if others understand
what they are doing, and see if the team shares the same
feelings to maintain the project velocity. For example, as P17
mentioned,

“That is something that I’ve recently learned that it is
important to know how others are feeling as well. Because
at the end of the day, the velocity of the work that we’re
doing as a team, not just depends upon you, but it depends
upon the rest of the team as well, so unless everybody is

SUBMITTED TO IEEE TRANSACTIONS ON SOFTWARE ENGINEERING

9

like pretty enthusiastic about the work we’re doing, things
do not get done. So it’s really important to be aware of how
the rest of the team is feeling as well.’–P17

(S1, S2), being aware of others’ emotions (S2–S4, S11, S12),
regulating own emotions (S1, S2, S5–S8), and managing
relationships (S2, S3, S9–S12).

4.3.3 Extended Consequences

We found the direct consequences of regulating one’s own
emotions and managing relationships helps in sustaining
productivity and setting and sustaining team goals.

Sustaining Productivity. –Shared by P1, P6, P8, P11–
P18. Our participants said that not being able to regulate
their negative emotions impacts their productivity during
RC handling. For example, spiraling of emotions (feeding
the negative emotions back to themselves to make the
situation worse) and the team feeling overwhelmed can
harm productivity. They also mentioned that if they felt
that they lacked autonomy, did not feel a sense of project
ownership, and/or were not able to change this situation,
this resulted in lower productivity levels. However, accord-
ing to our ﬁndings, being able to regulate their emotions
does not cause a negative impact on their productivity.
For example, if they focus on learning from the RC what
they could do better next time (S6), this helps prevent their
negative emotions from impacting their productivity. They
also stated that emotions can lead to both improved or
reduced productivity, depending on how they are handled.
Thus they consider emotions as a catalyst and use them to
improve productivity. As P15 said,

“Sometimes those emotions are good catalysts. I think the
the nervousness, as I said, kind of catalysing me to take
this discussion and kind of have I’ve had this revisit of
what we’ve decided previously, like, I think that was like
productive because without the emotion without that sort
of need to protect the team, I otherwise would have just
stuck to the plan and kind of had, you know, inertia carry
me forward. So yeah, I think it’s interesting. I think they
can be both productive and unproductive, depending on
how their channels handled.” – P15
Setting and Sustaining Team Goals. –Shared by P1, P2,
P13, P15, P17. Having better relationships and regulating
negative emotions were claimed to help set and sustain team
goals. For example, as P13 mentioned, at the beginning of
the project, the team gets together and decides the direction
of the project, i.e., sets a team goal which they do via open
communication. And as P2 said,

“We try to keep emotion out of what we do because emotion
is not helpful in situations where you have an end goal to
deliver” – P2

4.4 Contingencies: Strategies

We identiﬁed twelve strategies (given in Table 4) that our
software practitioners use to support EI during RC han-
dling. Namely, sharing how individuals feel with manager/
peers (one–to–one/ many) (S1), open and regular commu-
nication (many–to–many) (S2), building personal rapport
with others (S3), empathise (S4), being open to RCs (S5),
focusing on learning from the RC (S6), pre/ post control of
expectations about the RC (S7), understanding/ using the
level of autonomy an individual has over RC implementa-
tion (S8), tracking commitments and decisions (S9), having
a dedicated lead for RC (S10), having team/ social rituals
(S11), and working as a single cross functional team (S12).
These strategies help in being aware of their own emotions

4.4.1 Sharing How Individuals Feel with Manager/ Peers
(one–to–one/ many) (S1)
–Shared by P4, P5, P8, P9, P11–P18.

This strategy not only helps in being aware of one’s own
emotions, but also helps in regulating one’s own emotions.
As our participants mentioned, they share how they feel
with others individually and in their team when necessary
by talking, messaging, having regular catch ups with the
manager and at weekly, monthly, and quarterly frequencies.
For example,

“And then like if that helps you realise and understand
yourself a bit more I think having someone you can vent
to, or write a message to or talk to about like a difﬁcult
situation is, is one of the most useful things, ways I’ve
dealt with it.” – P13
However, some participants mentioned that it is difﬁcult
for them to share their emotions openly in group settings,
especially during agile retrospectives. Some also mentioned
that junior members and new members ﬁnd it difﬁcult to
express their emotions in group settings, where they second
guess if their emotions are valid. On the other hand, partici-
pants mentioned that senior members express conﬁdently
how they feel. This shows that sharing emotions openly
happens when adapted to the team context or the company
culture or conﬁdence that comes with the position (senior)
and experience. Some participants also mentioned that in
large groups or when their degree of psychological safety
is low, team members are unwilling to express their “raw”
emotions in front of others in the team. In contrast, they said
that small groups better promote the freedom to express
these emotions. Therefore, sharing how one feels in one-to-
many situations is subjective. However, some participants
mentioned that they anonymously share how they feel
during agile retrospectives, and retrospectives help reframe
emotions to get them out of doom spirals.

4.4.2 Open and Regular Communication (many–to–many)
(S2)
–Shared by P1, P2, P4–P18.

Open and regular communication strategies serve in
many ways. It helps being aware of own emotions, be-
ing aware of others’ emotions, regulating own emotions,
and managing relationships. This strategy is very much
connected to strategy S1. Our participants mentioned that
they have quick discussions during a sprint meeting on
resource allocation for the RC, discuss the complexity of
existing tasks to decide on RC assignment, discuss team
velocity, communicate the mistakes with others in the team,
identify risks open to the team very clearly, and question
the rationale for RC/ last minute RC through open and
regular communication. They mentioned that it helps them
“voice out” their opinions and feelings, and therefore helps
in being aware of own emotions, and regulate their emo-
tions. They also mentioned that open communication with
a reduced number of communication layers promotes better
communication about RCs, and clarity about the RC. For
example,

SUBMITTED TO IEEE TRANSACTIONS ON SOFTWARE ENGINEERING

10

“Perhaps the problems come in when you have more
layers between managers and software developers and the
customer and those layers don’t have as much an under-
standing like it’s going through a marketing department.
I did have this happen to me in previous role marketing
department accept changes without shipping the timeline
and then feed that down. And that’s when you get anger
and frustration because that’s when you start going to like,
we’re not working together anymore. Perhaps that’s the key
phrases. when you’re all working together change doesn’t
matter.” – P16

Another such occasion is having weekly one-on-ones with
another team’s architect where multiple teams work to-
gether on an RC. Teams also tend to ask questions from the
technical lead during the project, and the technical leads/
managers provide input where necessary to the team. The
participants mentioned that they use voice conversations
for complex issues and for fast feedback. Additionally, they
have quick calls on Slack to discuss if the messaging threads
are long. They also mentioned that they openly do Q&A
sessions to discuss decisions made by management when
the team had less autonomy in decision making, and they
discuss timeline impacts and timeline shifts. This further
enhances relationships among members in the team and
with the manager. Open and regular communications also
allow members to express how they feel freely, making
others in the team aware of how they feels.

4.4.3 Building Personal Rapport with Others (S3)

–Shared by P2, P4–P6, P12, P14, P18.

Building personal rapport with others helps being aware
of others’ emotions during RC handling and also better
manage relationships. Our participants mentioned that they
build personal rapport through talking to identify emo-
tionally driven people, and also they would like to build
relationships proactively ahead of the project. As P13 men-
tioned,

“..proactively building relationships ahead of a project. So
knowing that a project is coming up in one or two quarters,
starting to build relationships with people now so that when
I do have to come to them and say, Hi, I need help with this
project. They already know who I am. They already know
the kind of stuff that I’m going to need from them.” – P13
Some managers also mentioned that they build personal
rapport only where necessary. One non-manager mentioned
that they build personal rapport with necessary people only
to a limited degree.

4.4.4 Empathise (S4)

–Shared by P3–P5, P8, P10–P16.

Empathising leads to being aware of others’ emotions.
Empathising during RC handling divides into three sub
categories: empathise (emotion); empathise (cognition); and
empathise → take action → help resolve. According to
our ﬁndings, all three can be seen in managers, and team
members have the ﬁrst two.

Empathise

(emotion): This

is where managers em-
pathise with their team members. Managers try to under-
stand/perceive team’s emotions via team leads by asking
about the vibe of the team, team members having emotional
empathy towards peers, and towards the feature leader. For
example, one way that managers empathise is observing the

emotion dynamics (change in emotions over time) of their
subordinates. They do this via weekly one on one meetings
where they dig deep into team members’ emotions. As
shared by P8,

“people who are experienced, actually worked, coaching,
working one-on-one and just being empathetic to the people
in the team.” – P8
Empathise (cognition): This is understanding the rationale
for an emotion. For example, understanding why the team
members feel negative emotions, understanding/perceiving
why a feature lead (dedicated lead of the RC) is getting
anxious due to release date shifts, a team’s disappointment
on priority shift due to RC, understanding/perceiving some
members in the team having negative emotions opposite to
their own, understanding/perceiving when members who
are not familiar with the RC are a little fatigued, and espe-
cially managers understanding team members’ positions in
life and work. P4 mentioned,

“You know, I’m quite open with my, like last week I was
just ﬁlthy grumpy and I openly said to my team, I said
look, I’m just seriously grumpy. It’s when I was starting to
get sick, and I was like I’m seriously grumpy, I’m actually
just going to go home. And they were like rest, enjoy, just
have the afternoon off, you know, because they knew that
was what was best for me” – P4
Empathise → take action → help resolve: According to our
ﬁndings, this is seen in managers. Managers help others
understand emotions/avoid channelling emotions to de-
cisions, take necessary actions to minimise their negative
emotion arousal, and listen and validate why they have
concerns. For example, managers console team members
who are feeling down, help others to move towards the
goal rather than thinking about negative emotions such as
frustration, they talk with team members about their emo-
tions and how to navigate them, weigh cost over beneﬁts
to determine the decision to project the team’s feelings, let
subordinates express their concerns without them feeling
the need to justify the concern, and put in contact with
people who can help subordinates with solving the issue
they have, or, if possible, step in to resolve the issue with
regard to the RC. For example,

”trying to learn people’s patterns and drivers so that we
can give those opportunities as early, and you know, this
particular engineer, nine times out of 10, if we just leave
him alone for a couple of hours he solves his problem. And
so that’s his modus operandi, he’s like argh, and then he
just goes away, thinks, and then he solves his problem. And
we’re like that’s awesome, because we know that and we
can support him, you know, hashtag united, and say here’s
what we can do to support.” – P4

4.4.5 Being Open to RCs (S5)

–Shared by P1, P2, P4–P10, P13, P16, P18.

According to our ﬁndings, one of the key strategies for
managing one’s own emotions is being more open to RCs.
Understanding RCs as a natural phenomenon in agile soft-
ware development contexts and considering them a normal
practice help the practitioners be open to RCs, and thereby
better manage any negative emotions that could arise due
to new RCs.

“When we look when we discover edge cases, like I feel like
it’s, as I said, it’s sort of normal practice for us, like we

SUBMITTED TO IEEE TRANSACTIONS ON SOFTWARE ENGINEERING

11

expect to discover these things. So there’s nothing really
jarring about it” – P14
Our participants also mentioned that RCs could be dis-
covered during development, due to technical reasons, edge
cases, or even when assumptions are wrong. However, un-
derstanding that there is always a reason for the emergence
of an RC, and that handling new RCs is for the best of the
product, also helps being open to RCs.

”knowing that there is a reason even if you don’t know
what it is, there is a reason. I guess it is sort of assuming
best intent that you know, a customer wants their software
they haven’t just done this on a whim.” – P16
“...I don’t feel like I have really had negative experiences
with requirements changes. And I think that’s true to the
fact that every time they come through. You understand.
Like, it comes with a reason why. And if you understand
the reason why I think we pretty much usually it’s ﬁne.”
–P13

4.4.6 Focusing on Learning from the RC (S6)

–Shared by P1–P5, P9, P13.

Our participants said that focusing on learnings from
their RCs allowed them to manage their emotions during
RC handling. For example, RCs could have emerged due to
failures/ mistakes. In such occasions, considering the fail-
ures/ mistakes as lessons, and understanding the beneﬁts
of doing so, have helped our participants to manage their
emotions. As P13 said,

“Understand that with every setback, there is a learning
and the learning is really what you work with.” – P13
RCs also could lead to them learning new information,
and our participants said that they use the new learnings to
steer the decisions, which is an additional beneﬁt. One way
of steering the decisions through learnings, as mentioned by
P15, is by having quick learnings through experiments and
changing decisions quickly.

4.4.7 Pre/ Post Control of Expectations about the RC (S7)

–Shared by P1, P2, P4, P6, P7, P9, P14, P16, P18.

According to our ﬁndings, practitioners may curate their
expectations proactively to avoid low pleasurable emotions.
They put in effort to avoid the problem causing low plea-
surable emotions by removing the unknowns, and reframe
expectations to get past the low pleasurable emotions. For
example,

“It’s not like oh my god, I’ve got to change, I’ve set these
expectations. We are very good at treating releases as ﬂuid,
you know, when they change it’s like we just sort of have
this perception, it’s not like we change it because we just
can’t be bothered doing something.” – P4
“I think when I ﬁrst started out, it would freak me out, and
I’d think, oh what could, how did I not see this, but you
can’t, you can’t plot everything.” – P7

4.4.8 Understanding/ Using the Level of Autonomy an Indi-
vidual has Over RC Implementation (S8)

–Shared by P2, P3, P7, P10, P12, P14, P15, P18.

Understanding/using the level of autonomy an indi-
vidual has over RC implementation can assist practitioners
manage their emotions. Our participants described several
aspects related to autonomy, which help them manage their
emotions when handling RCs: having autonomy to align

with the reason for RC, learning that autonomy can affect
change and help deal with RCs, understanding the im-
possibility of controlling the situation/changing decisions
about RC as an individual in certain occasions, and making
situations better when there is less autonomy. In addition,
the entire team learning the boundaries where they can
affect change, i.e., understanding the level of autonomy they
have, also aids in managing emotions during RC handling.
For example,

“I think autonomy like this part of autonomy is actually
important. Because when you understand why, and you’re
actually aligned with the reason why you’re more likely
to to not care about the fact that this thing has changed.
You’re just going to try and solve it.” – P13

4.4.9 Tracking Commitments and Decisions (S9)

–Shared by P4, P8, P10, P14, P17.

Tracking commitments and decisions throughout the
process of RC handling aids in managing team relation-
ships. This is also supported by the use of appropriate
tools. For example, our participants mentioned that they
use Jira tickets to track commitments, and document/record
decisions using Conﬂuence when asynchronous communi-
cation within the team exists, hence helps in managing the
relationships within the team. As P10 said,

“We use conﬂuence for a lot of our changes for that
space, depending on the size of the change if it’s sort of
budget effecting, that’s what it really, it’s documented quite
heavily. But for like changes in my team, it’s more the
change is just documented as a comment in here” – P10

4.4.10 Having a Dedicated Lead for RC (S10)

–Shared by P13, P16–P18.

Having a dedicated lead for a new RC helps to achieve
better relationships within the team. According to our ﬁnd-
ings, having a dedicated lead who is accountable, respon-
sible, and trustworthy helps them have better relationships
within the team, as they are the one who sets proper com-
munication within the team and also helps to successfully
implement and deliver the RC. For example, as P13 said,

“we have what we call feature lead within the team. And
essentially, is someone who prays down the stories, runs
their solution, runs this mission sessions and make sure
that the feature is on track in terms of timeline, and all that
kind of stuff. So the visually does all that. I didn’t do any
of that. So I rely on the feature lead to tell me when they
needed me, okay to provide input.” – P13

4.4.11 Having Team/ Social Rituals (S11)

–Shared by P2, P4, P6, P16.

Having team/ social rituals is another strategy used by
our participants to be aware of others’ emotions and main-
tain better relationships among team members. Some of the
rituals our participants mentioned that they have include:
having a project pre-mortem to discuss what to expect;
having one-on-one coffee sessions within the team; having
daily sessions to go through code within the team; and
maintaining communication ‘touchstones’ within the team.
This strategy allows the team to bond, hence know how
others feel, and thereby have better communication and
relationships. P16’s experience with project pre-mortems as
they shared,

SUBMITTED TO IEEE TRANSACTIONS ON SOFTWARE ENGINEERING

12

“We also as a team like whole series, we have a series of
rituals. One quick one that a colleague has brought on is
things like Project pre-mortem. Okay. Yeah. So instead of
a post-mortem, which, like you’ve ﬁnished your project,
back over a pre-mortem is when you try and do that at
the start of a project. And you’re good to go. Okay, what
to go wonderfully, what could go terribly. And everyone’s
involved in that. So everyone’s got a really good idea of
what the lay of the land is. So when a change comes, it’s
never really a big surprise, or it’s, everyone was part of the
process. So no one feels like, Oh, you shouldn’t have got
this because there’s plenty of opportunity for everyone to
have contributed.” – P16

4.4.12 Working as a Single Cross–Functional Team (S12)
–Shared by P1, P2, P4, P6–P12, P14, P16.

Working as a single cross–functional team helps team
members to be aware of others’ emotions and manage rela-
tionships. Working on an RC is not a single function task.
Various teams may be involved from receiving the RC, to
developing and testing, to delivering the RC. One important
fact our participants shared with us is that it is necessary
to work as a single cross-functional team, especially when
it comes to large organisations. For example, managers of
the teams involved in the RC communicate with each other
and receive/ take the responsibility ON the RC, build the
sense of community across the people who are working on
the product together, and treat teams of all disciplines as
a single cross–functional team, so that other teams are not
considered as external contributors. This allows one to know
how others in a cross-disciplinary team feel, and also to have
better understanding and relationships with them.

“What we’ve done is rather than treating the separate
disciplines as external contributors, we treat all of the
disciplines as cross–functional single team, okay. And, like
I said, build that sense of community across the people who
are working on the product together. And in doing that we
control for the feeling of the other. And then their change.
There’s more of an understanding that there’s a human on
the other side of the change, who was also trying to do the
best thing they’re trying to do. So vice versa, the engineers
have more of an understanding of who the product of the
design team are, and why they might be doing the things
they’re doing. And similarly, the design of the product
team, have more of an empathy for the engineers who are
saying we can’t do that it’s not possible and the perfect
design that you put together that would look really great.”
– P13

4.5 Covariances

Covariance occurs when one variable changes with the
changes of the other. In our case, the variables are the six
Cs. For example, for different causes (cause is a variable),
there are different contingencies: strategies (contingency:
strategy is the other variable which changes with the cause).
We found three covariances in our study, (A) strategies
vary with the causes, (B) strategies vary with the direct
consequences, and (C) Ease/ difﬁculty in executing strate-
gies vary with intervening conditions. We have summarised
these covariances in Table 4.

Strategies vary with causes (Covariance A). The strategies
used to be aware of own emotions and to be aware of oth-
ers’ emotions co-vary. However, they also share a common
strategy (S2).

Strategies vary with direct consequences (Covariance B).
Similar to covariance A, the strategies used to regulate
one’s own emotions and to manage relationships co-vary.
Common strategies (S2, S4, S9–S12) exist for both direct
consequences.

Ease/ difﬁculty in executing strategies vary with intervening
conditions (Covariance C). Unlike covariance A and B, covari-
ance C consists of a dimension. I.e., the ease/ difﬁculty in
executing the strategies with intervening conditions, which
is the mode of work. This covariance applies to the strategies
S2, S4, and S9.

5 DISCUSSION

In this section, we discuss the implications of our ﬁndings
for practitioners, including recommendations, and implica-
tions for researchers with corresponding ideas for future
work.

5.1 Implications for Practitioners

Recommendation 1. Communicate openly and regularly.
As shown in Table 4, open and regular communication is the
only strategy that can assist in achieving all four aspects of
EI. Therefore, it is highly beneﬁcial if software practitioners
practice open and regular communication during RC han-
dling.

Recommendation 2. Embrace RCs. RCs are unavoidable
in software contexts. According to our ﬁndings, resisting
RCs does not help, but in contrast, embracing them helps in
improving EI when handling RCs. Consequently, this helps
in improving the product delivery as well.

Recommendation 3. Be team players. Half of the strate-
gies that we found (S1–S4, S11, S12) can be said to be inter–
personal strategies. Therefore, improving EI is necessary not
only from an individual perspective, but also to be a better
team player.

Recommendation 4. Junior members and new mem-
bers: don’t be afraid to share what you feel with others
when handling RCs. Our ﬁndings show that junior mem-
bers and new members tend not to share how they feel
with others, and second guess the emotions they feel. While
sharing emotions in group settings depends on whether the
person feels comfortable, sharing how one feels with others
helps in improving EI when handling RCs. This also highly
relies on the psychological safety within the team.

Recommendation 5. Use appropriate tools and their
features to execute strategies according to the mode of
work. Our ﬁndings indicate that execution of strategies is
impacted by the mode of work. Software teams can think
how to avoid the mode of work (remote/ in–person) being
an intervening condition. For example, P13 mentioned that
they use the “huddle” feature in Slack to have quick calls
instead of instant messaging when the discussions are long.
Such features can be used in remote working settings to
enhance open and regular communication.

Recommendation 6. Use the problem–solution chart we
have presented: Strategies to use during RC handling to
support emotional intelligence. In Table 4, the strategies
we have listed can be used during RC handling to help
team members raise awareness of their own emotions, to be

SUBMITTED TO IEEE TRANSACTIONS ON SOFTWARE ENGINEERING

13

TABLE 4
Covariances

Covariance

Strategies

A

Causes

B

C

Direct consequences

Mode of work

Being aware of
own emotions

Being aware of
others’ emotions

Regulating own
emotions

Managing
relationships

Remote
working

In–person
working

S1

S2

S3

S4
S5
S6

S7

S8

Sharing how individuals feel with
manager/peers (one-to-one/many)
Open and regular communication
(many-to-many)
Building personal rapports with
others
Empathise
Being open to RCs
Focusing on learning from the RC
Pre/post control of expectations
about RC
Understanding/using the level of
autonomy individual has over RC
implementation
Tracking commitments and decisions

S9
S10 Having a dedicated lead for RC
S11 Having team/social rituals

S12

Working as a single cross-functional
team

¥

¥

¥
¥

¥

¥

¥

¥

¥

¥

¥

¥

¥

Difﬁcult

Easy

Difﬁcult

Easy

Easy

Difﬁcult

¥

¥

¥
¥
¥

¥

aware of others’ emotions, to regulate their own emotions,
and to help manage their relationships. This table can be
used as a problem–solution guide. For example, to be aware
of others’ emotions, one can consider using the strategies,
sharing how individuals feel with manager/ peers (S1), or
open and regular communication (S2).

5.2 Implications for Researchers

The theoretical framework. Fig. 3 outlines our theoretical
framework for improving EI during RC handling. This
framework can be used to get a better understanding about
the central phenomenon of emotional intelligence of soft-
ware practitioners during RC handling.

What about the strategies used by practitioners on
the other side of the world? The eighteen interviews we
conducted saturated what we found, and the ﬁndings are
limited predominantly to the Australasian region, possibly
exhibiting territorial, organisational and cultural speciﬁci-
ties. Researchers may replicate our study in other regions
of the world to see if the practitioners use the same strate-
gies, or whether they use different strategies. Researchers
can then expand our theoretical framework to bring more
understanding and knowledge on the central phenomenon
to include other parts of the world as well.

Applicability of strategies in situations beyond RC
handling. The strategies we found are limited to RC han-
dling. These could be applicable for situations beyond RC
handling. Researchers may consider studying this further by
conducting a study such as a survey to know if the strategies
we have listed can be used in other scenarios as well.

Mode of work intervening in the executing of all strate-
gies. We only have found how mode of work intervenes
executing some of the strategies we found, i.e., how the
mode of work intervenes S2, S4, and S9. A future study
can consider if the mode of work intervenes the execution
of other strategies as well.

6 EVALUATION AND LIMITATIONS

Evaluation. We evaluate our method application against
credibility and rigour, and our outcome against original-
ity, relevance, and density, as per the STGT evaluation
guidelines [5]. Credibility: We have provided details on how
participants were recruited (social media, personal contacts,
and from a large software company), the applied sampling
method (convenience sampling and theoretical sampling),
how iterative and interleaved data collection and analysis
occurred, and the memos written (textual: interview reﬂec-
tions, conceptual memos; visual: Miro board). Rigour: We
have provided an example of open coding, and constant
comparison, embedded sanitised evidence (quotes). Origi-
nality: To the best of our knowledge, this is the ﬁrst study
on EI in handling RCs (conﬁrmed through related work).
Relevance: Our previous studies ([3], [16]) prove how rele-
vant the central phenomenon is for RC handling contexts.
Density: The ﬁndings are layered and full of real examples
(quotes).

Limitations. In our study, we collected data from eigh-
teen software practitioners engaged in requirements change
handling in software engineering. While this is a relatively
small number of participants, each interview was between
30–60 minutes long, sharing detailed accounts and experi-
ences on the relevant issues. Qualitative analysis of these in-
terviews provided rich insights into the various components
of EI as it applies to requirements change handling, as is ev-
ident from the multi-faceted nature of the theoretical frame-
work. The participants represented the Australasian region
and among them the majority were from Australia and
New Zealand. Therefore, the applicability of the ﬁndings
is limited to the contexts studied in these regions. Future
work can study emotional intelligence in other contexts and
expand the applicability of our ﬁndings. When working in a
team, coding by a single researcher can lead to a potentially
restricted view of the data. To address this, the ﬁrst author

SUBMITTED TO IEEE TRANSACTIONS ON SOFTWARE ENGINEERING

14

analysed all data, shared the ﬁndings with the second and
third authors. During weekly meetings, the second author
went through the codes of the ﬁrst iteration to conﬁrm the
reliability. In 2 , the ﬁrst author wrote extensive memos
of interview reﬂections and conceptual memos, visualised
ﬁndings using Miro, and shared with both the second and
third authors during the process. We also had fortnightly
discussions on ﬁndings.

7 CONCLUSION

We set out to study the role of emotional intelligence dur-
ing requirements change handling in software engineering.
Through an empirical study, we identiﬁed the six Cs of soft-
ware practitioners’ emotional intelligence during require-
ments change handling, including the context, conditions,
causes, consequences, and contingencies (strategies). We found
that there exist covariances among causes, consequences, and
strategies, and mode of work intervenes the execution of the
strategies we identiﬁed. These are inclusive of, but also go
beyond, the four known aspects of emotional intelligence
– self-awareness (being aware of own emotions), social
awareness (being aware of others’ emotions), self regulation
(regulating own emotions), and relationship management
(managing relationships) [24]. Based on our ﬁndings, we
provide a problem–solution chart that can be used to choose
the most appropriate strategy to be aware of one’s own
emotions, aware of others’ emotions, regulate own emo-
tions, manage relationships, whether the team is working
remotely or in–person. Further, we present a set of recom-
mendations for software practitioners, and a set of potential
future work for researchers.

REFERENCES

[1] K. Madampe, R. Hoda, and J. Grundy, “A Faceted Taxonomy of
Requirements Changes in Agile Contexts,” IEEE Transactions on
Software Engineering, 2021.

[2] K. Madampe, R. Hoda, J. Grundy, and P. Singh, “Towards Under-
standing Technical Responses to Requirements Changes in Agile
Teams,” in IEEE/ACM 42nd International Conference on Software
Engineering Workshops (ICSEW20), (Seoul, Republic of Korea), p. 4,
ACM, New York, NY, USA, 2020.

[3] K. Madampe, R. Hoda, and J. Grundy, “The Emotional Roller
Coaster of Responding to Requirements Changes in Software
Engineering,” IEEE Transactions on Software Engineering, p. 1, 2022.
[4] G. R. VandenBos, APA Dictionary of Psychology. American Psycho-

logical Association, 2007.

[5] R. Hoda, “Socio-Technical Grounded Theory for Software Engi-
neering,” IEEE Transactions on Software Engineering, pp. 1–1, 8 2021.
[6] K. R. Scherer, “Toward a dynamic theory of emotion,” Geneva

Studies in Emotion, 1987.

[7] P. Koval, E. A. Butler, T. Hollenstein, D. Lanteigne, and P. Kuppens,
“Emotion regulation and the temporal dynamics of emotions:
Effects of cognitive reappraisal and expressive suppression on
emotional inertia,” Cognition and Emotion, vol. 29, pp. 831–851, 7
2015.
J. J. Gross and R. Thompson, “Emotion regulation: Conceptual
foundations. In J.J. Gross (Ed.), Handbook of emotion regulation.
New York: Guilford Press.,” in Handbook of Emotion Regulation,
vol. 3, 2007.
S. Koole, “The psychology of emotion regulation: An integrative
review,” 2009.

[9]

[8]

[12] K. Beck, M. Beedle, A. V. Bennekum, A. Cockburn, W. Cun-
ningham, M. Fowler, J. Grenning, J. Highsmith, A. Hunt, R. Jef-
fries, J. Kern, B. Marick, R. C. Martin, S. Mellor, K. Schwaber,
J. Sutherland, and D. Thomas, “Manifesto for Agile Software
Development,” 2001.

[13] I. Inayat, S. S. Salim, S. Marczak, M. Daneva, and S. Shamshirband,
“A systematic literature review on agile requirements engineering
practices and challenges,” Computers in Human Behavior, vol. 51,
pp. 915–929, 10 2015.

[14] E. Bjarnason, K. Wnuk, and B. Regnell, “A case study on beneﬁts
and side-effects of agile practices in large-scale requirements en-
gineering,” in Proceedings of the 1st Agile Requirements Engineering
Workshop, AREW’11 - In Conjunction with ECOOP’11, 2011.

[15] M. K¨apyaho and M. Kauppinen, “Agile requirements engineering
with prototyping: A case study,” 2015 IEEE 23rd International
Requirements Engineering Conference, RE 2015 - Proceedings, pp. 334–
343, 11 2015.

[16] K. Madampe, R. Hoda, and J. Grundy, “Emotion-Centric Require-
ments Change Handling in Software Engineering,” arXiv preprint
arXiv:2205.05827, 2022.

[17] Z. Bakalova, M. Daneva, A. Herrmann, and R. Wieringa, “Agile
Requirements Prioritization: What Happens in Practice and What
Is Described in Literature,” Lecture Notes in Computer Science (in-
cluding subseries Lecture Notes in Artiﬁcial Intelligence and Lecture
Notes in Bioinformatics), vol. 6606 LNCS, pp. 181–195, 2011.

[18] N. Baruah, “Requirement management in agile software environ-
ment,” in Procedia Computer Science, vol. 62, pp. 81–83, Elsevier
B.V., 2015.

[19] F. G. De Oliveira Neto, J. Horkoff, E. Knauss, R. Kasauli, and
G. Liebel, “Challenges of aligning requirements engineering and
system testing in large-scale agile: A multiple case study,” Pro-
ceedings - 2017 IEEE 25th International Requirements Engineering
Conference Workshops, REW 2017, pp. 315–322, 9 2017.

[20] L. Jun, W. Qiuzhen, and G. Lin, “Application of agile requirement
engineering in modest-sized information systems development,”
Proceedings - 2010 2nd WRI World Congress on Software Engineering,
WCSE 2010, vol. 2, pp. 207–210, 2010.

[21] D. Albuquerque, E. Guimaraes, M. Perkusich, A. Costa, E. Dan-
tas, F. Ramos, and H. Almeida, “Deﬁning agile requirements
change management: A mapping study,” in Proceedings of the ACM
Symposium on Applied Computing, pp. 1421–1424, Association for
Computing Machinery, 3 2020.

[22] B. Ramesh, L. Cao, and R. Baskerville, “Agile requirements engi-
neering practices and challenges: an empirical study,” Information
Systems Journal, vol. 20, pp. 449–480, 9 2010.

[23] S. Wagner, D. M´endez Fern´andez, M. Kalinowski, and M. Felderer,
“Agile Requirements Engineering in Practice: Status Quo and
Critical Problems,” vol. 21, no. 1, 2018.

[24] D. Goleman, R. Boyatzis, and A. McKee, “The emotional reality of
teams,” Journal of Organizational Excellence, vol. 21, no. 2, 2002.
[25] A. Rezvani and P. Khosravi, “Emotional intelligence: The key to
mitigating stress and fostering trust among software developers
working on information system projects,” International Journal of
Information Management, vol. 48, 2019.

[26] M. V. Kosti, R. Feldt, and L. Angelis, “Personality, emotional
intelligence and work preferences in software engineering: An
empirical study,” Information and Software Technology, vol. 56, no. 8,
2014.

ACKNOWLEDGMENTS
This work is supported by a Monash Faculty of IT schol-
arship. Grundy is supported by ARC Laureate Fellowship
FL190100035. Our sincere gratitude goes to the large soft-
ware company who gave us the opportunity to recruit
participants, and to everyone at the company who helped
with reviewing the pre–interview questionnaire, recruiting
participants, reading the draft and providing valuable feed-
back, and to all the participants who took part in this study.

[10] B. Glaser and A. Strauss, Grounded Theory: The Discovery of

Grounded Theory. 1967.

[11] A. Strauss and J. Corbin, Basics of qualitative research techniques.

1998.

APPENDIX A
MEMOS

SUBMITTED TO IEEE TRANSACTIONS ON SOFTWARE ENGINEERING

15

Interview Reﬂection (Written right after the interview with P17)
The participant is a new recruit. They said they got confused when changes happen last minute. Also, relaxed when
a requirement which was not exactly what customer requested got removed. They also appreciated “transparent
communication”, which is the open communication that everyone talked about. Openness seems to be contributing
a lot to keep the participants positive during requirements change handling. Open communication seems to belong
to both own emotion regulation and managing relationships. The participant likes to work remotely - has joined
the company remotely as well. They believe that information losses are prevented when working remotely as all
decisions, and all communications, are recorded (recording decisions). P13 mentioned documenting all details on
RCs as well. Documentation seems to be important in all cases. They also mentioned with date shifts, the feature
lead is especially anxious. P16 is a feature lead, and they talked a lot about date shifts. But as P16 is an experienced
person, according to what they said, they seem to be handling the negative emotions well as they accept the
concept of RCs, and use open communication. The key ideas at this point by looking at all interviews conducted
up to now during iteration 2 are, accepting RCs as a natural phenomenon helps to regulate one’s own emotions,
open communication helps to regulate one’s own emotions and enhances better relationships within the team and
beyond, and all teams involved from various disciplines working as a single cross-functional team helps maintain
the positivity as an individual/ as an organisation.

Conceptual Memo (Written about the condition: Mode of work)
There are pros and cons of remote and in–person RC handling. Empathising is difﬁcult in remote working, but easy
when handling the RCs in–person. Empathising is used as a strategy in being aware of others’ emotions. Similarly,
“enables recording decisions” is a pro in remote RC handling and “losing information in decision making” is a con
in in–person RC handling. But recording decisions is a strategy used to manage relationships. The same applies to
open communication. So, the mode of work intervenes in the execution of the strategies.

Kashumi Madampe is a ﬁnal year PhD candidate at Monash Uni-
versity, Melbourne, Australia. Ms. Madampe did part of her current
research at The University of Auckland, New Zealand. Prior to the
PhD candidature, she was a software project manager and a busi-
ness analyst. Her research interests are software engineering, agile,
human–computer/AI interaction, grounded theory, and natural language
processing. She serves as a peer reviewer for ACM Computing Sur-
veys Journal, Automated Software Engineering Journal, Journal of
Systems and Software, and in several conference program commit-
tees. She also served as the XP2021 poster co–chair, ASE2021 and
CHASE2021 publicity and social media co–chair. More details about
her research can be found at https://kashumim.com. Contact her at
kashumi.madampe@monash.edu.

Rashina Hoda is an Associate Professor in Software Engineering at the
Faculty of Information Technology, Monash University, Melbourne. Her
research focuses on human and social aspects of software engineering,
socio-technical grounded theory, and serious game design. She serves
on the IEEE Transactions on Software Engineering review board, IEEE
Software advisory board, as ICSE2021 social media co–chair, CHASE
2021 program co–chair, and ICSE2023 SEIS co-chair. For details see
www.rashina.com. Contact her at rashina.hoda@monash.edu.

John Grundy received the BSc (Hons), MSc, and PhD degrees in
computer science from the University of Auckland, New Zealand.
He is an Australian Laureate fellow and a professor of software
engineering at Monash University, Melbourne, Australia. He is an
associate editor of
the IEEE Transactions on Software Engineer-
the Automated Software Engineering Journal, and IEEE Soft-
ing,
ware. His current interests include domain–speciﬁc visual languages,
model–driven engineering, large-scale systems engineering, and soft-
ware engineering education. More details about his research can
be found at https://sites.google.com/site/johncgrundy/. Contact him at
john.grundy@monash.edu.

