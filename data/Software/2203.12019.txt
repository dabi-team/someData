OSSCAR, an open platform for collaborative development of computational
tools for education in science

Dou Dua,b,c, Taylor J. Bairdc, Sara Bonellac, Giovanni Pizzia,b,∗

aTheory and Simulation of Materials (THEOS), École Polytechnique Fédérale de Lausanne, CH-1015 Lausanne, Switzerland
bNational Centre for Computational Design and Discovery of Novel Materials (MARVEL), École Polytechnique Fédérale de Lausanne, CH-1015
Lausanne, Switzerland
cCECAM Centre Européen de Calcul Atomique et Moléculaire, École Polytechnique Fédérale de Lausanne, CH-1015 Lausanne, Switzerland

Abstract

In this paper we present the Open Software Services for Classrooms and Research (OSSCAR) platform. OSSCAR
provides an open collaborative environment to develop, deploy and access educational resources in the form of web
applications. To minimize eﬀorts in the creation and use of new educational material, it combines software tools that
have emerged as standards with custom domain-speciﬁc ones. The technical solutions adopted to create and distribute
content are described and motivated on the basis of reliability, sustainability, ease of uptake and use. Examples from
courses in the domains of physics, chemistry, and materials science are shown to demonstrate the style and level of
interactivity of typical applications. The tools presented are easy to use, and create a uniform and open environment
exploitable by a large community of teachers, students, and researchers with the goal of facilitating learning and
avoiding, when possible, duplication of eﬀorts in creating teaching material. Contributions to expand the educational
content of the OSSCAR project are welcome.

Keywords: Jupyter, Notebooks, Computational physics, Computational chemistry, Computational materials science,
Education

1. Introduction

Software-based tools, such as notebooks or illus-
trative codes, are increasingly employed in scientiﬁc
courses to enrich and complement more standard teach-
ing approaches. These tools can provide an interactive
environment for teachers to demonstrate, via live exam-
ples and engaging visualization, complex and abstract
concepts that may otherwise be diﬃcult to transmit. At
the same time, students can gain intuition, facilitate un-
derstanding and strengthen learning [1] by exploiting
them as simple virtual laboratories, e.g., to experiment
in real time with the eﬀect of relevant parameters in
equations. Given these advantages, and with the grow-
ing relevance of remote education, software-based edu-
cational tools are becoming more common. For exam-
ple, Quantum Physics Online [2] publishes online Java
applets with visualizations that illustrate topics typically
covered in undergraduate and master level courses in

∗Corresponding author
Email address: giovanni.pizzi@epfl.ch (Giovanni Pizzi)

that area. Considering more domain-speciﬁc examples,
the Soft Matter Demos [3] or NanoHub [4] websites
present simulations and visualizations to stimulate in-
terest in these domains, with a limited interest in course-
work. Other open-source platforms oﬀer visual tools for
education in chemistry in the form of interactive simu-
lations [5]. Use of e-tools based on Google Colab was
recently explored [6] to support the teaching of thermo-
dynamics and provide some introduction to coding in
chemistry classes taught in Columbia. Further impetus
to develop on-line teaching tools was added by the re-
cent pandemic crisis [7, 8, 9], with several interesting
studies on their eﬀectiveness [10, 11, 12].

In spite of their great potential, widespread adop-
tion and sharing of software-based tools for teaching is,
however, still hindered by diﬀerent barriers. On the side
of the teachers, the time investment to create bespoke
material for diﬀerent classes might be considerable and
eﬀorts frustrated by the lack of agile development and
deployment environments. Moreover, curating the ma-
terial to counteract software obsolescence, guaranteeing
resilience to changes in versioning of the adopted lan-

2
2
0
2

r
a

M
2
2

]
h
p
-
d
e
.
s
c
i
s
y
h
p
[

1
v
9
1
0
2
1
.
3
0
2
2
:
v
i
X
r
a

 
 
 
 
 
 
guage, and facilitating updates when content evolves are
all non-trivial challenges. Furthermore, given that the
same type of material is needed for classes across diﬀer-
ent areas and in diﬀerent institutions, the risk of eﬀort
duplication is very high. No “public library” of soft-
ware teaching tools exists to reduce this risk and limit
the teachers’ eﬀort only to the creation of new, original
material. On the side of the students, uptake and us-
age of these tools can be problematic depending on the
technology employed to deploy them and the level of
user-friendliness of the platforms to access them. Also,
the lack of a coherent platform may force them to spend
considerable eﬀort to migrate from one technological
solution to another when changing class.

In this paper, a new platform that attempts to over-
come these barriers is presented:
the Open Software
Services for Classrooms and Research (OSSCAR). OS-
SCAR is inspired by the software architecture devel-
oped as part of AiiDAlab [13], a platform designed
to provide easy access to research-oriented software,
workﬂows and tools via a web interface. OSSCAR
adapts and applies these concepts and technologies for
education purposes. Speciﬁcally, as detailed in Sec. 3,
OSSCAR combines and builds upon a set of well-
established software tools to create a web-based collab-
orative environment targeted at providing educational
resources and enhancing awareness and adoption of best
practices in Open Science. The programming language
chosen is Python, and we use Jupyter [14, 15, 16] and
JupyterLab [17] as the programming interface and en-
vironment. Within this framework, common visualiza-
tion tools and widgets are employed (and new ones are
developed) to create interactive notebooks illustrating
speciﬁc topics or proposing exercises. Jupyter note-
books are then automatically converted into web appli-
cations exploiting the Voila program [18]. The web
applications hide all code and show only the outputs
(including, in particular, the widgets to interact with the
application) in a user-friendly format accessible through
any browser, circumventing the need for speciﬁc soft-
ware installation and set up.

The contributions of OSSCAR are along three main
lines, detailed in the rest of the paper, and that we sum-
marize here: 1) provide custom graphical components
(widgets) for domain-speciﬁc visualization types (see
Sec. 3.2); 2) provide custom educational content tai-
lored for a number of courses in the ﬁelds of com-
putational physics, chemistry and materials science;
these are developed in the form of self-contained mod-
ules that can be combined and reused also beyond the
courses for which they were originally developed (see
Sec. 6); 3) provide clear documentation (on http://

2

www.osscar.org), transferring know-how gathered in
the past years on how to combine various open tech-
nologies to easily develop new educational applications
(see Sec. 7) and open to input and feedback from the
community.

In the following, we ﬁrst demonstrate the appear-
ance and structure of an OSSCAR notebook via the
example of a classic problem in quantum mechanics:
the double-well potential. We then provide technical
details on the tools employed to develop new note-
books and justify our choices. Next, we show some
selected examples, based on notebooks developed for
Master-level courses in Physics, Chemistry and Mate-
rials Science. These examples, all related to quantum-
mechanical problems, also suggest that OSSCAR note-
books can act as modules to be combined in various
ways for diﬀerent classes.

While technologically mature, OSSCAR is at the
early stages of development in terms of content. It is
intended as an open repository to be built in collabo-
ration with the community of students and teachers in
scientiﬁc disciplines, and we invite contributions from
interested groups.

2. An OSSCAR interactive web application exam-
ple: a quantum-mechanical double-well potential

In this section, we discuss a prototypical OSSCAR
application: the interactive visualization of the eigen-
values and eigenvectors obtained by solving the one-
dimensional (1D) Schrödinger equation for a dou-
ble square-well potential [19]. To provide a general
overview of a typical application, we mainly focus on
the key components that are shared among the OSS-
CAR notebooks, rather than on the speciﬁc content of
this example. Note that, since the web applications are
implemented as Jupyter notebooks, as mentioned in
the Introduction and described in more detail in Sec. 3,
in the following we will use the terms notebooks and
applications (almost) interchangeably.

To clarify the reasons behind the overall structure and
graphical appearance of the application, we start by dis-
cussing how we expect these notebooks to be employed
by teachers and students. In our experience, there are
two main use cases, that we shall call A and B. In use
case A, the notebooks are used for independent learning
by students. Students might have simply found the ap-
plication online, or might have been referred to it with a
web link, for example in a class. In this case, before they
are presented with the interactive visualization itself, it
is important to provide users with a short explanation
of the goals of the application and with some guidance

Figure 1: The interactive web application to demonstrate the numerical solution of the Schrödinger equation for a 1D double square-well potential.
The web application is hosted at https://osscar-quantum-mechanics.materialscloud.io. a) The whole webpage, showing the typical
structure of an OSSCAR notebook: introductory text (zoomed in panel b) including a link to the background theory, the goals of the notebook and
a set of tasks and exercises for the students, followed by the interactive visualization (better displayed in panel c), and a legend.

on how to best interact with it to achieve the learning
objectives.

In use case B, instead, teachers might use the appli-
cations for live demonstrations during their classes to
complement and enrich standard lecturing (textbooks,
blackboard, slides, . . . ) thus improving students’ learn-
ing eﬀectiveness [20]. We include in use case B also
the case of teaching assistants that present the notebook
content as part of their discussion sessions, because the
requirements are relatively similar. In this second sce-
nario, the introductory part of a notebook is not rele-
vant, since the topic has already been introduced and
discussed by the teachers, who will instead focus on us-
ing the interactive part. In this case, it is essential that
applications can be accessed very rapidly (in a matter of
seconds), because they will be used only for the mini-
mal time required to convey the message (typically no
more than a couple of minutes), before the teachers con-

tinue with their lectures. (The students might also use
the applications after the lecture is ended to revise the
course content, falling back into use case A.)

With these two use cases in mind, we now discuss the
structure of a typical OSSCAR notebook, as illustrated
in Fig. 1. Each application starts with a brief textual
section that we see at the top of Fig. 1(a), including a
short list of educational goals, a link to additional back-
ground theory, as well as a list of tasks to guide the ex-
ploration of the interactive part of the notebook. Author-
ship is also acknowledged at the top of each notebook
to give due credit to contributors and encourage collab-
orative contributions by other teachers and also by stu-
dents. This ﬁrst section addresses the needs of use case
A, to quickly assess if the notebook covers the topics
of interest and to provide guidance for interacting with
the application via a set of tasks for the students. At the
same time, this section is kept to a minimum to cover the

3

Interactive figuresControllers(a)(b)(c)needs of use case B (or of students already familiar with
the application): being short, the section is easy to skip,
so one can jump directly to the interactive visualization.
In particular, the background theory is discussed in a
diﬀerent, linked, page (and also there only as a brief
overview of the physical problem, favoring links to ex-
isting online material to avoid content duplication). Fur-
thermore, the solutions for the students’ tasks are hidden
by default. This latter design choice not only keeps the
ﬁrst textual section short, but also encourages students
to answer the questions themselves rather than read di-
rectly the solutions, promoting active learning and thus
improving learning eﬀectiveness [21, 22].

Below this textual introduction, we ﬁnd the interac-
tive visualization section, better displayed in Fig. 1(b).
This is the core of the web application. Each interactive
visualization is composed of two main groups of com-
ponents: the interactive ﬁgures and the controllers. The
controllers are “widgets” (discussed in more detail in
Sec. 3.2) such as sliders, dropdown menus, checkboxes
or buttons, that allow one to tune some parameters of
the model or the visualization itself and whose eﬀect is
dynamically reﬂected in the interactive ﬁgures.

In this speciﬁc example, the top part with the ﬁgures
displays the potential energy (thick black line, formed
by two square wells) and the wavefunctions (colored
thin lines) at the height of the corresponding eigenval-
ues. The right part of the plot displays the eigenval-
ues only, represented as thick horizontal lines (with the
same color of the corresponding wavefunctions).

In the controllers section of this ﬁgure, ﬁve sliders
are used to tune the width and depth of the two square
wells and the distance between the two. Two radio but-
tons allow the students to decide whether to display the
wavefunction ψ(x) or the probability density |ψ(x)|2. A
sixth slider can be used to determine the “zoom factor”
of the wavefunctions (i.e., the multiplicative factor in
front of the wavefunction, that is only used to have a
nice visualization but does not aﬀect the simulation).

In typical notebooks the ﬁgures, in addition to be-
ing dynamic (i.e., changing their content as soon as the
value of one of the controllers is modiﬁed), can also be
interactive: for instance, in this speciﬁc example, a click
on one of the wavefunctions (or on the corresponding
eigenvalue on the right-hand side) displays its plot and
numerical value, while hiding all other wavefunctions.
A button “Show all” in the controllers section allows
one to display again all the wavefunctions.

Finally, at the bottom of the page (see Fig. 1(a)), there
is a legend that describes in more detail the ﬁgure com-
ponents and the functionality of each controller. This
is placed at the bottom of the page as a useful refer-

ence, mostly to cover the needs of use case A, but we
strive to design the interactive visualizations so that all
ﬁgures and controls are as intuitive and self-explanatory
as possible, reducing to a minimum the need to read the
legend.

A collection of OSSCAR web applications can be
considered as a “living book”, with powerful interac-
tion and visualization capabilities that go beyond what
is achievable on printed text or static images, and can
convey more eﬀectively advanced content to students,
facilitating their understanding.
In addition, the tasks
presented at the top of the notebook help students to
focus their attention on core concepts. For instance,
one of the tasks of this notebook suggests investigating
the phenomenon of quantum tunneling and anticross-
ing of states as a function of the distance between the
two wells: by moving the slider to alter the gap dis-
tance, students can vividly observe in real time how
the wavefunctions and their energies change, something
that would be diﬃcult to achieve through traditional
teaching.

Finally, at the very top of each page, we also provide
a link to the source code of the notebook. We discuss the
additional advantages of providing immediate access to
the notebook source code in Sec. 7.

3. Technology to develop interactive web applica-

tions

One of our key design goals for OSSCAR is to make
it simple enough for teachers with basic coding experi-
ence to develop further applications. Consequently, as
mentioned in the Introduction, the majority of the soft-
ware stack is deliberately composed of existing open,
well documented and well maintained software. The
motivation behind doing this is to maximize the life-
time and accessibility of the notebooks by ensuring that
they do not depend on custom software and technology
that might become unsupported soon. Let us now de-
tail the core technological components of the OSSCAR
platform.

3.1. Development

environment:

Jupyter/JupyterLab

Python

and

We choose Python as the programming language for
the interactive notebooks. Python is a common pro-
gramming language for data science and scientiﬁc com-
puting that has gained popularity in the past years in
many computational scientiﬁc disciplines [23]. This
is probably due to both Python’s syntax, which is rel-
atively easy to learn and quite readable even for peo-
ple with little programming experience, and to the very

4

large number of free Python packages that can be easily
installed via, e.g., the pip [24] or conda [25] package
management tools.

Python allows for relatively rapid development, even
if (being an interpreted language) it might be slow for
expensive computations. The need for performant sim-
ulations is less of an issue for education-oriented ap-
plications than for scientiﬁc production runs, since the
main goal is not to obtain results with ultimate preci-
sion and speed, but rather to demonstrate the simplest
approximation that captures the essential aspects of the
model (so that students can focus on the core concepts,
and not on the numerical optimizations). In spite of this,
in both use cases described in Sec. 2 it is very important
that simulations can be performed almost in real time
(or in any case, in a matter of seconds). Indeed, in use
case A students might easily lose focus if they have to
click a button and wait for minutes before the results
appear. Moreover, slow execution time limits the inter-
active capabilities of the applications and the number of
diﬀerent input parameters that students can experiment
with. Similarly, teachers in use case B need to be able
to demonstrate rapidly the relevant results to students
before continuing with their lectures.

While in our experience Python is often fast enough,
there are cases in OSSCAR where strategies to speed
up the simulations are required (e.g., when performing
simulations with millions of iterations, or when dealing
with large matrices). We list some of these strategies
in Appendix A.

For the purpose of creating interactive visualizations,
however, the programming language itself is not suf-
ﬁcient, but one also needs a library to enable pow-
erful displays of the results via a graphical user in-
terface (GUI). A relatively large number of GUI li-
braries are available for Python. Our choice is to use
Jupyter notebooks (using a “classic” Jupyter server,
or the more recent JupyterLab environment), that pro-
vide a notebook interface to interact with Python code1.
Jupyter has very rapidly gained popularity, also in the
scientiﬁc context [26, 27] (including for teaching [28]),
as a very powerful approach to distribute understand-
able and reusable code.

Having a notebook interface means that the whole
code is divided in cells, and each cell contains only a
part of the code that can be executed independently, and
whose output is displayed underneath the cell. The ad-
vantage is that the notebooks do not contain only the
source code, but can also include contextual rich-text

annotations, descriptions, and widgets (such as plots,
buttons, . . . – see discussion in Sec. 3.2), combining in a
single consistent document both the code and its docu-
mentation and visualization.

One of the reasons why we choose Jupyter in OS-
SCAR, besides its popularity (and thus availability of
visualization and widget libraries), is that the GUI is
web-based and displays directly in the web browser. As
such, it works on any computer operating system (OS)
and does not require additional installation of custom
software, contrary to typical GUIs that might require
one to install OS-speciﬁc code and libraries. Having
a simple web-based interface is one of the key require-
ments in OSSCAR to make the use of the applications
straightforward. We discuss in the next sections how
to implement interactive visualizations within Jupyter
notebooks, and then discuss in Sec. 4 how to completely
hide the Python code and provide students with a very
simple and intuitive web interface.

3.2. Widgets: components for interaction

Visualization plays a crucial role in human learn-
ing [29]. This is important, for instance, when deal-
ing with multi-dimensional representations, where in-
teractive 3D plots can be very eﬀective in representing
datasets. In particular, in ﬁelds such as computational
physics, interactive ﬁgures can greatly facilitate expla-
nation of abstract concepts compared to text, bare equa-
tions or static ﬁgures. In Appendix B we discuss some
plotting libraries for 2D and 3D plots that we use in OS-
SCAR, with some minimal usage examples.

However, while plots are essential to display the re-
sults of a simulation or the values of a function, one
additional type of component is crucial to enable inter-
activity and decide the relevant parameters in the con-
troller section (e.g., the width or depth of the quantum
well in the example of Fig. 1). As previously mentioned,
these components are called widgets and allow the user
both to supply inputs and to trigger events (e.g., via a
click on a button). The Python library ipywidgets pro-
vides a large number of common native widgets work-
ing within Jupyter notebooks, such as sliders, check-
boxes, dropdowns, text areas and buttons.

We show in Appendix C a simple example, both to il-
lustrate how easy the code to interact with these widgets
can be, and to discuss how one can implement instanta-
neous reaction to events.

3.2.1. OSSCAR custom widgets

1We note for completeness that Jupyter(Lab) can actually work

also with programming languages other than Python.

When Jupyter-ready widgets are not already avail-
able, OSSCAR develops bespoke widgets customized

5

for speciﬁc needs, embedded in our applications and
realized as open source. A typical example are cus-
tom visualizations necessary to display domain-speciﬁc
content, especially for 3D visualization. While general-
purpose 3D libraries exist, they often require one to de-
ﬁne the data to visualize at a very low level (e.g. by
providing the coordinates of the triangles composing a
surface mesh). This is however very cumbersome and
requires lengthy custom code, while a teacher would
strongly beneﬁt from a simple domain-speciﬁc widget
requiring only minimal input. Widgets with this goal are
provided by OSSCAR as shown in the two examples in
Fig. 2. Panel (a) shows a widget to plot the isosurfaces
of molecular orbitals [19]. It leverages the NGLview vi-
sualizer [30], but exposes a simpler interface to directly
plot volumetric data associated to molecules. Panel (b),
instead, shows a custom widget to compute and display
interactively the ﬁrst Brillouin zone (BZ) [19] of a crys-
tal. It is based on the JavaScript visualizer developed
as part of the SeeK-path library [31], and it exposes to
teachers a very simple Python interface: one just needs
to provide the three real-space lattice vectors to generate
the BZ, where high-symmetry points are automatically
displayed and labelled, together with the suggested path
to compute band structures. Another example of a cus-
tom widget developed in OSSCAR, not shown here, is
an interactive periodic table that allows users to select
multiple chemical elements (with each of them being in
one of a range of possible states, e.g., to select elements
to be either included or excluded for searches and ﬁlter-
ing).

We emphasize that developing a new widget might
not be straightforward, as it requires relatively advanced
knowledge of both Python and JavaScript, as well as ex-
perience with speciﬁc frameworks and libraries in the
two languages. However, once a Jupyter widget has
been developed and published, its use is very straight-
forward, typically requiring only a couple of lines of
Python code. Therefore, the custom OSSCAR widgets
are a powerful catalyst that we provide to facilitate and
promote the creation of interactive notebooks with pow-
erful visualizations, and we expect to keep developing
new ones with input and contributions from the more
expert user community.

4. Convert notebooks into web applications

In the use cases A and B described in Sec. 2, the pri-
mary goal of the interactive visualizations is to deliver
physics knowledge, with less emphasis on program-
ming and algorithms behind the notebook. The code

6

Figure 2:
(a) A custom OSSCAR widget to display the molecu-
lar orbitals of a molecule (in this example, benzene), wrapping the
NGLView Jupyter widget. (b) A custom OSSCAR widget to com-
pute and plot the ﬁrst BZ of any crystal, together with the labels of
high-symmetry points and a suggested path to compute a band struc-
ture.

might actually be distracting the ﬁrst time a student in-
teracts with the application, and therefore we prefer to
hide it in order to retain clarity in the presentation.

A number of tools have been developed to convert
Jupyter notebooks into shareable web applications,
including appyters [32], nbinteract [33], bokeh [34],
Voila [18], and appmode [35]. In OSSCAR we opted
to use Voila, a subproject of Project Jupyter that can
turn Jupyter notebooks into live standalone web ap-
plications, by executing the whole notebook and ren-
dering only the output cells into a web page format,
while all of the source code is hidden. For instance,
Fig. 1 shows the page obtained for the double quantum
well after rendering the notebook with Voila. Addi-
tionally, Voila keeps the Python code active (i.e., an
active connection is maintained between the web fron-
tend and the so-called “Python kernel” in Jupyter).
This is crucial to allow the Python callbacks (see, e.g.,
Fig. C.8) to be executed when the users interact with the
widgets. Other solutions, instead, convert the notebook
into a static webpage [36, 37]. While this approach has
the advantages of easier deployment (see also Sec. 5),
it limits the interaction possibilities. In addition, Voila
supports the development of custom templates to mod-
ify the overall appearance of web applications. In OSS-
CAR, we have developed our own template that is also
shown in Fig. 1 (e.g., the header and footer with the
OSSCAR logo are part of this template) to provide a
uniform and consistent look and feel for all notebooks.
While the code can be completely hidden from the
user and thus made fully private using Voila, we stress
that in OSSCAR we strive to provide a solution that
fully complies with the Open Science principles: not
only regarding open availability of the applications for
reuse in other classes, but also releasing open source

(a)(b)all code for inspection and reuse. Therefore, all source
code of the OSSCAR notebooks is available as open
source on GitHub, and each notebook displays a link
to it at the top of each page (see also Sec. 7).

5. Deployment on web/cloud servers

The ﬁnal aspect of making the notebooks available to
a broad audience is their deployment. This is crucial,
as most users will not have the time (nor, often, the ex-
pertise) to install locally Python, Jupyter and all the
dependencies to run the notebooks. Therefore, easy ac-
cess to the applications with just a web link becomes
essential to make them straightforward to use.

However, deployment (especially if it has to be ef-
ﬁcient) often comes with some costs associated to it.
For instance, hosting content on most public cloud ser-
vices is not free, while self-hosted servers might also
have a non-negligible cost associated to the human time
needed to maintain the service (perform system security
updates, recover after system crashes, . . . ). Therefore,
in OSSCAR we have investigated various solutions and,
while we did not ﬁnd a single one that covers all require-
ments, we identify, use and suggest three diﬀerent (free)
solutions to deploy and deliver the web applications, de-
pending on the student and teacher needs. These are
brieﬂy described below, highlighting pros and cons of
each solution.

5.1. mybinder.org

mybinder.org is a website oﬀering a free cloud so-
lution to deploy Jupyter notebooks, and has been al-
ready used to serve course content to students [38].
mybinder.org allows one to generate a unique URL
associated to a GitHub repository that contains note-
books and code. When a user opens the link,
mybinder.org automatically fetches the code and runs
it
in an isolated environment for each user (using
Docker [39] containers behind the scene) so that each
user does not interact with others using the application
at the same time.

mybinder.org requires minimal eﬀort for teachers.
One ﬁrst has to create a public GitHub repository with
the notebooks and some basic conﬁguration ﬁles that,
as detailed in their documentation, primarily consist of
a list of Python dependencies that need to be installed
in order to make the notebooks functional. Then, on
the mybinder.org homepage, one can easily obtain a
unique link (that can be distributed to students, or pub-
lished on a webpage) to access the deployed applica-
tion. The link can be obtained simply by providing the

Figure 3: Input GitHub details to generate the mybinder.org link.

GitHub repository name, the Git branch name and the
notebook URL (see Fig. 3). Furthermore, using Voila
together with mybinder.org is very straightforward:
one can just declare Voila among the dependencies,
and then prepend the string /voila/render/ to the
notebook URL to trigger the Voila extension at load
time.

Being free, open and requiring almost zero mainte-
nance eﬀort, this service is extremely useful, but there
are two shortcomings. The most critical one is that ev-
ery time that the page is loaded, the initialization might
take a signiﬁcant amount of time (from a few tens of
seconds to some minutes). This might be problematic
for the needs of the two use cases described in Sec. 2,
and in particular for use case B, where a teacher might
want to use the application only for a very short amount
of time. In addition, being a free service, the computing
power is also very limited, which can be an issue for
sophisticated notebooks performing advanced simula-
tions. Nevertheless, we strongly encourage any teacher
developing a notebook to provide a mybinder.org link
in their homepage, as this makes the notebooks imme-
diately accessible (even if with a lag of a few tens of
seconds) to any web user, without any setup needed.

5.2. dokku deployment

In order to speed up the startup time of each note-
book, we also deploy the OSSCAR notebooks on cus-
tom resources using an open-source software called
dokku [40].
dokku is an extensible Platform-as-a-
Service software that makes deployment of applications
In particular, one just needs to place
extremely easy.
all their code and notebooks inside a Git repository, and
push the content to the dokku server to update the de-
ployed version.

Similarly to mybinder.org, dokku transparently
creates a Docker container. This container is, however,
the same one for all users and user isolation is obtained
thanks to Voila. This requires special care when im-
plementing the notebooks to avoid unexpected interac-

7

tions between users, e.g., if ﬁles with the same name
are generated on the server. The startup time, however,
is considerably reduced, typically to 5 seconds or less.
Unfortunately, this solution also has some shortcom-
ings.
In addition to having to understand the deploy-
ment model to prevent unexpected interaction among
diﬀerent users,
installing and maintaining a dokku
server requires the availability of an online server (that
might not be free) and most importantly it requires ex-
pertise in managing and deploying web servers. In our
case, we leverage the dokku service provided by the
Materials Cloud portal [41], with servers hosted at the
Swiss National Supercomputing Center (CSCS), that
kindly provides the resources to host the OSSCAR ap-
plications. For instance, the applications for quantum
mechanics described later in Sec. 6 can be accessed at
the address https://osscar-quantum-mechanics.
materialscloud.io. If, however, a teacher does not
have access to such a deployment, this solution might
not be viable (we note, however, that similar hosted
commercial solutions exist, such as heroku.com for
instance, that might have a free tier for small non-
commercial applications).

5.3. Institutional JupyterHub servers

Because of the widespread adoption of Jupyter,
many universities, research centers and computer cen-
tres are now oﬀering to their users (teachers, students,
researchers) access to locally hosted JupyterHub in-
stallations. JupyterHub is an open server facilitating
the provision of multi-user access to notebooks.

This solution could be ideal for courses given at uni-
versities where this service exists and all students have
access to it. The added beneﬁt of this deployment ap-
proach is that each student has access to their persistent
home folder, where they can not only install and use
the applications, but also easily modify the code and
run the modiﬁed versions, possibly contributing back
their changes to the original repository. This solution
is therefore particularly suitable if the teachers want to
encourage the students to modify and adapt the code of
the notebooks.

One example of such an institutional JupyterHub is
the NOTO platform at EPFL (https://noto.epfl.
ch). We show how a notebook appears inside the
JupyterLab interface provided by NOTO in Fig. 4,
but we stress that many more universities are already
providing a similar service, also thanks to the fact that
JupyterHub and JupyterLab are open source and of-
ﬁcially supported as part of Project Jupyter.

We ﬁnally mention that in terms of use cases covered,
also Google Colab [42] can be considered to fall within

Figure 4: An example of how an OSSCAR notebook is displayed in
the JupyterLab interface, in this speciﬁc example available via the
EPFL NOTO platform.

this category, where rather than institutional credentials
one would need instead a Google login.

6. OSSCAR notebooks for computational science

In addition to proposing guidelines for best practices
in developing open teaching content, and developing
custom widgets for computational-science content, one
of the main goals in OSSCAR is to generate open and
free learning content in the broad domain of computa-
tional physics, chemistry, and materials science.

OSSCAR currently oﬀers a number of interactive
notebooks covering the topics of quantum mechan-
ics, band theory of crystals, statistical mechanics, and
molecular dynamics. The choice of the topics stems
primarily from the content of two courses taught by
some of the authors at EPFL (“Computational meth-
ods in molecular quantum mechanics” and “Atomistic
and quantum simulations of materials”). The notebooks
have been already used in the past year with very pos-
itive feedback from students. In particular, anonymous
surveys were conducted at the end of one of the courses.
The results indicate that for the majority of students
(over 70%) the inclusion of interactive visualizations
during the classes was both motivating, and helped them
to better understand the core course concepts by be-
ing actively engaged in the learning process. Further-
more, the same proportion of students also accessed and
used the interactive visualizations to improve their un-
derstanding after the lectures, while revising the course
content (use case A in Sec. 2). Students also provided
valuable feedback for improvement of the notebooks,
and, in both classes, some even demonstrated interest
in generating new educational content using the same
OSSCAR approach.

Without aiming at presenting an exhaustive list,
in the following we brieﬂy show some selected

8

Figure 5: Three interactive web applications developed in OSSCAR and used to complement teaching in classes of computational simulations.
The web applications are hosted at https://osscar-quantum-mechanics.materialscloud.io. a) Construction of a norm-conserving pseu-
dopotential. b) Monte-Carlo simulations to sample the canonical distribution of a given potential energy surface. c) Electronic band structure and
ﬁrst BZ of an empty-lattice free-electron crystal.

examples of applications developed in OSSCAR,
to demonstrate with practical examples the general
concepts and technologies (such as the widgets)
described earlier. More applications are available
online, and we expect the list to continue growing
in the future.
The source codes of all notebooks
are available on the GitHub repository at https:
//github.com/osscar-org/quantum-mechanics
and can be directly inspected on our dokku server
at
https://osscar-quantum-mechanics.
materialscloud.io.

Fig. 5 presents three diﬀerent OSSCAR notebooks.
As mentioned in Appendix B, we use matplotlib to
render 2D interactive ﬁgures. This is the case, for in-
stance, for the two plots in Fig. 5(a), an application illus-

trating the construction of norm-conserving pseudopo-
tentials [19]. The two panels display the hydrogen-atom
potential and the pseudopotential that was generated
(bottom panel) and one of the wavefunctions and the
corresponding pseudo-wavefunction (top panel). Users
can select the principal quantum number n and the an-
gular quantum number l of the wavefunction in the con-
trollers region, as well as the cutoﬀ radius Rc determin-
ing the core region.

In Fig. 5(b) we instead show an application that il-
lustrates the use of Monte-Carlo simulations with the
Metropolis–Hastings algorithm [43, 44] to sample the
canonical distribution at a given temperature T for a po-
tential that can be selected among various possibilities
(a 2D double-well potential is selected and shown in the

9

(a)(b)(c)ﬁgure). Students can set the starting coordinates (x, y)
of the simulation, select the temperature T , and tune the
simulation parameters (maximum move size and total
number of iterations), to investigate both physical (tem-
perature and potential-barrier height) and numerical ef-
fects on the eﬃciency and ergodicity of the simulation.
This application displays various types of ﬁgures: a 3D
visualization of the potential energy surface (top left,
displayed with plotly as discussed in Appendix B),
the probability histogram as a color map obtained from
the simulation (top right, displayed using matplotlib),
and the total energy as a function of the Monte-Carlo
move (bottom right). This notebook is also an example
of the Multiple Representation Principle, where com-
plementary representations of related quantities are dis-
played to facilitate learning, thanks to the diﬀerent in-
formational content of each of them [45].

Finally, Fig. 5(c) shows an application to compute
and show the band structure and BZ of a simple empty-
lattice free-electron crystal (for simple, face-centered
and body-centered cubic lattices) [19]. The notebook
can be used to explain the concept of reciprocal space,
discuss how band structure paths are selected, and com-
pare band structures of actual materials with the free-
electron case. While the band structure plot (on the
right) uses the same matplotlib library that we em-
ploy for 2D plots, the left part uses the custom OSSCAR
BZ visualizer already described in Fig. 2(b).

6.1. A library of focused self-contained applications

From a learning perspective, we strive to design
each web application to be self-contained and focused
on conveying one single core concept. When more
complex concepts need to be explained, we prefer
and suggest splitting the content into a sequence of
propaedeutic smaller notebooks, each focusing on a sin-
gle (sub)topic. This makes each application easy to use
even without teacher supervision, and the series of note-
books guides the students in a progressive learning pro-
cess. To demonstrate this modular approach, we show
in Fig. 6 four diﬀerent examples of notebooks focusing
on basic quantum-mechanical concepts, in addition to
the double quantum well already presented in Fig. 1.

The ﬁrst notebook of the series is shown in Fig. 6(a),
focusing on the numerical solution of the Schrödinger
equation for a single 1D ﬁnite square-well potential
[46]. Being one of the simplest quantum models, it al-
lows students to start familiarizing themselves with the
visualization of quantum eigenstates, and to inspect the
eﬀect of quantum conﬁnement [47].

The second notebook in the series is the double quan-
tum well already discussed in Fig. 1: having two wells,

it allows students to investigate their interplay and the
eﬀect of quantum tunneling. A slightly more advanced
model is presented in the notebook of Fig. 6(b), where a
1D asymmetric quantum-well system is now proposed,
described by the expression V(x) = x4 − 0.6x2 + µx.
The parameter µ can be tuned via a slider to determine
the amount of asymmetry between the two wells. The
lower panel, showing the eigenenergies of the three low-
est states in the system as a function of µ, helps students
to focus on the phenomenon of avoided crossing [48].

Fig. 6(c) goes back to the same single quantum-well
model of Fig. 6(c). However, the teaching focus in
this case is not on the solutions of the equation, but on
the algorithm to obtain them. In particular, this note-
book aims at describing the shooting method using Nu-
merov’s algorithm [49]. The vertical sliders on the left
allow one to choose a “guess” energy, that will be used
to determine a wavefunction with the correct boundary
condition for x → −∞ (vanishing wavefunction). How-
ever, only the actual eigenvalues of the system will re-
turn a wavefunction that fulﬁlls the vanishing boundary
condition also at x → +∞. The students can then try
various values to understand how the algorithm works.
For convenience, we also provide an “Auto search” but-
ton, which implements the full algorithm and aids in
quickly ﬁnding the correct solutions.

Finally, the most advanced notebook is shown in
Fig. 6(d). Unlike the previous applications (solving
the time-independent Schrödinger equation), this note-
book demonstrates the solution of the time-dependent
Schrödinger equation using the split-operator Fourier
transform (SOFT) numerical method [48, 50]. After
choosing a potential energy shape, a wavepacket is con-
structed and its time evolution is computed and dis-
played. The various panels enable the monitoring of the
wavepacket evolution in real and reciprocal space (top
panels), as well as the kinetic and potential energy of the
packet and the conservation of the total energy (bottom
left panel) and of the norm of the wavefunction (bottom
right panel) to inspect the robustness of the algorithm.

7. Documentation, tutorials, and source code to en-

gage teachers and students

As we mentioned earlier, the overarching goal of OS-
SCAR is to encourage an open-science approach for
education, encouraging other teachers to develop their
own educational interactive web applications and invit-
ing them to share them on this platform.

The previous sections describe a number of strate-
gies that are all instrumental to this objective. As an
additional eﬀort toward this core goal, in OSSCAR we

10

Figure 6: Four OSSCAR applications of diﬀerent levels (from basic to advanced) addressing the general topic of the solution of the Schrödinger
equation, to demonstrate how an advanced topic can be split into smaller self-contained notebooks. a) Numerical solution of the 1D time-
independent Schrödinger equation for a single quantum-well potential. b) Avoided crossing in a 1D asymmetric quantum well. c) Explanation
of the shooting method and Numerov algorithm to solve the Schrödinger equation. d) Numerical solution of the 1D time-dependent Schrödinger
equation using the split-operator Fourier transform (SOFT) method and time evolution of a wavepacket.

also provide online extensive documentation and tuto-
rials, accessible from the OSSCAR homepage (https:
//www.osscar.org). The documentation, in conjunc-
tion with the library of notebooks, assists and encour-
ages teachers in developing further teaching content.
Indeed, the existing notebooks are all released with
open-source licenses and hosted on GitHub repositories
of the OSSCAR organization (https://github.com/
osscar-org). These serve as examples for develop-
ment of new applications. In addition, the repositories
not only contain the notebooks with the source code of
all applications, but also all conﬁguration ﬁles needed
for deployment on, e.g., mybinder.org or on dokku.
Therefore, each repository is a complete template to de-
velop a new web application. Teachers can extract the
notebooks or just the conﬁguration ﬁles, modify them
for their individual needs, and, if they wish, contribute

new notebooks for diﬀerent courses.

Furthermore, as discussed in Sec. 2, we provide a di-
rect link at the top of each application to directly access
the source code, aiming at multiple objectives. First, in-
terested students (after having interacted with the note-
book) can inspect the code to see which algorithms have
been used to solve the equations, and possibly adapt the
codes and algorithms to gain an even deeper understand-
ing of the subject. Second, code access encourages both
students and other teachers to provide feedback and im-
provements via GitHub issues and pull requests, in a
fully collaborative and open approach and in the spirit
of Open Science. Third, by engaging the students in the
preparation of the content, teachers can implement and
encourage in their courses approaches of peer instruc-
tion and cooperative learning, that have been shown to
increase student engagement and understanding [51].

11

(a)(b)(c)(d)8. Conclusions

We presented OSSCAR, an open web-based platform
for educational content. OSSCAR provides a collabo-
rative environment where teachers can easily develop,
deploy, and distribute to students interactive notebooks
that facilitate scientiﬁc learning via visualization, exam-
ples, and numerical experimentation. The platform aims
at hosting a growing number of modules, each tackling
a speciﬁc topic and with the potential to be combined
and organized in multiple ways, based on the needs of
each class. This free online library will hopefully pro-
vide a set of “oﬀ-the-shelf” tools to complement clas-
sical teaching, and attract contributions by a large com-
munity of teachers recognizing the advantage of sharing
and improving over duplicating. New content is wel-
come and can be easily created in the OSSCAR envi-
ronment, that relies on user-friendly and common lan-
guages and software, such as Python and Jupyter, as
the key development tools. Easy deployment of the
notebooks is achieved by their automatic conversion
into web applications via the Voila software, and then
by hosting them on existing or custom web cloud solu-
tions. Students can thus access the material directly via
their web browser, avoiding the need of tailored instal-
lations for each individual course. They learn by per-
forming speciﬁc tasks, solving exercises, and – impor-
tantly – experimenting in real time with the interactive
content of the notebooks. Further information on the
OSSCAR project and the documentation can be found
on the project web page: https://www.osscar.org.
Examples, custom widgets and templates for the devel-
opment of OSSCAR web applications are available on
GitHub at https://github.com/osscar-org.

Acknowledgements

We acknowledge ﬁnancial support from the EPFL
Open Science Fund via the OSSCAR project. We ac-
knowledge CECAM for dedicated OSSCAR dissemina-
tion activities. We acknowledge the NCCR MARVEL
(a National Centre of Competence in Research, funded
by the Swiss National Science Foundation, grant No.
182892), the European Centre of Excellence MaX “Ma-
terials design at the Exascale” (grant No. 824143) and
the European Union’s Horizon 2020 research and inno-
vation programme under grant agreement No. 957189
(BIG-MAP), also part of the BATTERY 2030+ initia-
tive under grant agreement No. 957213, for their sup-
port in the deployment of the applications on the Ma-
terials Cloud (via dokku). The authors are grateful to

12

Michele Ceriotti, Nicola Marzari, Ignacio Pagonabar-
raga and Berend Smit for fruitful discussions, Cécile
Hardebolle for feedback and useful discussions on how
to better design the notebooks to increase their learning
eﬀectiveness, Pierre-Olivier Vallès for the support for
the deployment on the EPFL NOTO JupyterHub plat-
form, Guoyuan Liu for implementing two notebooks,
and the students of the courses where the OSSCAR con-
tent was used for providing valuable feedback on style
and content.

Appendix A. Strategies to speed up Python simula-

tions

The ﬁrst and foremost approach to accelerate simu-
lations is to optimize, rethink or adapt the algorithm.
However, the use of packages such as NumPy [52] and
SciPy [53] (nowadays standard dependencies of a vast
majority of scientiﬁc Python code) helps in making a
wide range of complex but common operations (such
as matrix operations, advanced optimization routines,
...) easy to use and as eﬃcient as compiled languages,
since internally the core computational routines are im-
plemented in C, C++ or Fortran. Furthermore, other
technologies and libraries exist to speed up Python code.
We mention here only few examples, used in some OS-
the Numba [54] package, to write
SCAR notebooks:
Python codes using only simple types and arrays and
to convert them to C codes on the ﬂy with a just-in-
time (JIT) compiler; and the Cython [55] package (and
f2py [56], now part of NumPy) to write computationally
expensive routines directly in C (and Fortran, respec-
tively), and then call those from Python.

Appendix B. Libraries for visualization and plot-

ting

One of the most typical tools for visualization in
scientiﬁc applications are plots in two or three dimen-
sions. Many libraries for such common plots are avail-
able in Python and are interfaced with Jupyter, in-
cluding matplotlib [57], plotly [58], bqplot [59]
or ParaView [60].

With the approach that we describe in this paper, we
do not limit or prescribe which libraries can be em-
ployed to develop new applications. Nevertheless, we
made some considered decisions on our ﬁrst choice li-
braries, trying to select the smallest set of diﬀerent li-
braries that can cover use cases most commonly en-
countered, are fast enough for large datasets, and have
wide community support. By favoring reuse of the same

libraries in multiple notebooks, we provide a consistent
user experience to students, and at the same time the
notebooks become a suite of examples of how to inter-
act with the chosen libraries.

In particular,

in the OSSCAR notebooks we use
matplotlib as the main plotting package for two-
dimensional (static, animated and interactive) plots,
such as charts or color plots. As an example,
the
interactive ﬁgures in Fig. 1(c) are produced using
matplotlib. For the purpose of illustration, in the fol-
lowing we show a short, but fully functioning, Python
code to demonstrate the simple syntax required to gen-
erate basic plots 2.

We can generate two panels side by side with the fol-

lowing code:

1 % matplotlib notebook
2 import pylab as plt
3 fig , axes = plt . subplots (1 , 2)

where the ﬁrst line enables interactive plots, the second
imports the main plotting module of the matplotlib
library, and the third generates the empty panels.

The code deﬁnes axes as a list of two subplots, with
axes[0] being the left one and axes[1] the right one.
We can now plot a curve on the left panel with:

1 axes [0]. plot (x , y )

In this instruction, x is a Python list of x coordinates
of each of the points, and y the corresponding list of y
coordinates. Similarly, we can use axes[1].plot to
plot curves on the right panel.

We also mention that matplotlib ﬁgures support
dynamical updates. For instance, one can remove all
curves from the left panel (e.g., when redrawing the ﬁg-
ure if a controller value is changed by the user) with:

1 axes [0]. clear ()

or replace the y data of the ﬁrst curve (lines[0]) of the
right panel (axes[1]) with the data in the list new_y
via:

1 axes [1]. lines [0]. set_ydata ( new_y )

In addition, the matplotlib library oﬀers a large
number of diﬀerent types of plots, the possibility of
showing text and annotations in the plots and more gen-
erally to customize almost any aspect of the plots. It is
also possible to interact with the plots and detect, for
instance, the position of a mouse click.

2Naturally, slightly longer code is needed to achieve more reﬁned
results, e.g. to change the panels aspect ratio, the color of the plots,
etc.

13

Figure C.7: Creation of a slider widget (from the ipywidgets pack-
age) to enable the user to control a (ﬂoating point) numerical value.
The parameters passed to the initializer allow to decide the default ini-
tial value and the range (min, max) of allowed inputs, together with
a textual description of the widget. In subsequent cells, it is possi-
ble (from Python) to retrieve the current value of the widget, or set its
value programmatically, using the .value property.

While matplotlib can also generate

three-
dimensional plots, in our experience its performance
was often not good enough for smooth and pleasant
interaction (e.g., noticeable latency when rotating or
zooming). Therefore, for three-dimensional plots we
that showed better
use instead the plotly library,
performance. An example is given by the plot of the
potential energy surface in Fig. 5(b).

Appendix C. An example widget and instantaneous

reaction to events

Each widget can be created via Python code directly
in a notebook cell. For example, Fig. C.7 shows the
code used to create the slider to control the depth of the
ﬁrst square well in Fig. 1, and retrieve its value program-
matically from Python.

Beside being able to check the value of the slider in
speciﬁc points of the code, an essential part of the inter-
activity comes from a very small time delay between
user actions (button clicks, change of the value of a
slider, . . . ) and the adaptive reaction of the notebook.
In OSSCAR, this is achieved using the traitlets li-
brary [61].
In particular, every time the attributes of
a widget are modiﬁed, the widget emits an event of
type “change”. We can then deﬁne callback functions
that are triggered every time there is a change, and bind
them to the event using the observe method of the wid-
get. For instance, in Fig. C.8 we show a code snippet
deﬁning a callback function slider_value_change
to replot the function in the ﬁgure generated using
axes[0].plot discussed in Appendix B after changes
triggered by the sw1_depth slider.

Finally, we mention that events can be associated to
any widget, including plots, thus allowing to tune the
value of certain parameters not only from the controllers
section, but also by clicking directly on the visualiza-
tions (and, in this case, adapting the value of the con-
trollers accordingly). This approach allows for the im-

1 # define the callback function to replot
2 def s l i d e r _ v a l u e _ ch a n g e ( c ) :
3

...
axes [0]. plot (x , V )
...

4

5

6
7 # bind the callback , so that it is

triggered every time

8 # that the value of sw1_depth changes
9 sw1_depth . observe ( slider_value_change ,

names = " value " )

Figure C.8: A minimal example of how to deﬁne a callback and bind
it to any change of value of the slider of Fig. C.7.

plementation of reciprocative dynamic linking between
components, that has been shown to improve represen-
tational competence in students [62].

References

[1] T. de Jong, M. C. Linn, Z. C. Zacharia, Physical and vir-
tual laboratories in science and engineering education, Science
340 (6130) (2013) 305–308.

[2] M.

Joﬀre, Quantum physics

online,

https://www.

quantum-physics.polytechnique.fr (2019).

[3] F. Smallenburg, L. Filion, R. M. Alkemade, A. Ulugöl, Soft mat-
ter demos, https://www.softmatterdemos.org (2022).
[4] Network for Computational Nanotechnology, Nanohub,

https://nanohub.org (2022).

[5] The LabXchange

team,

Labxchange,

https://www.

labxchange.org (2022).

[6] W. Vallejo, C. Díaz-Uribe, C. Fajardo, Google colab and virtual
simulations: Practical e-learning tools to support the teaching
of thermodynamics and to introduce coding to students, ACS
Omega (Feb. 2022).

[7] H. Kawasaki, S. Yamasaki, Y. Masuoka, M. Iwasa, S. Fukita,
R. Matsuyama, Remote teaching due to covid-19: An explo-
ration of its eﬀectiveness and issues, International Journal of
Environmental Research and Public Health 18 (5) (2021).
[8] M. Youmans, Going remote: How teaching during a crisis is
unique to other distance learning experiences, J. Chem. Educ.
97 (9) (2020) 3374—-3380.

[9] M. M. Zalat, M. S. Hamed, S. A. Bolbol, The experiences, chal-
lenges, and acceptance of e-learning as a tool for teaching during
the covid-19 pandemic among university medical staﬀ, PLOS
ONE 16 (3) (03 2021).

[10] Z. Almahasees, K. Mohsen, M. O. Amin, Faculty’s and stu-
dents’ perceptions of online learning during covid-19, Frontiers
in Education 6 (2021).

[11] J. R. Hoehn, M. F. J. Fox, A. Werth, V. Borish, H. J.
Lewandowski, Remote advanced lab course: A case study anal-
ysis of open-ended projects, Phys. Rev. Phys. Educ. Res. 17
(2021) 020111.

[12] R. Kobayashi, T. P. M. Goumans, N. O. Carstensen, T. M.
Soini, N. Marzari, I. Timrov, S. Poncé, E. B. Linscott, C. J.
Sewell, G. Pizzi, F. Ramirez, M. Bercx, S. P. Huber, C. S.
Adorf, L. Talirz, Virtual computational chemistry teaching
laboratories—hands-on at a distance, Journal of Chemical Ed-
ucation 98 (10) (2021) 3163–3171.

[13] A. V. Yakutovich, K. Eimre, O. Schütt, L. Talirz, C. S. Adorf,
C. W. Andersen, E. Ditler, D. Du, D. Passerone, B. Smit,

14

N. Marzari, G. Pizzi, C. A. Pignedoli, Aiidalab – an ecosys-
tem for developing, executing, and sharing scientiﬁc workﬂows,
Computational Materials Science 188 (2021) 110165.

[14] T. Kluyver, B. Ragan-Kelley, F. Pérez, B. Granger, M. Bus-
sonnier, J. Frederic, K. Kelley, J. Hamrick, J. Grout, S. Cor-
lay, P. Ivanov, D. Avila, S. Abdalla, C. Willing, J. development
team, Jupyter notebooks - a publishing format for reproducible
computational workﬂows, in: F. Loizides, B. Scmidt (Eds.), Po-
sitioning and Power in Academic Publishing: Players, Agents
and Agendas, IOS Press, Netherlands, 2016, pp. 87–90.

[15] Project
(2022).

Jupyter,

Jupyter,

https://docs.jupyter.org

[16] B. E. Granger, F. Pérez, Jupyter: Thinking and storytelling with
code and data, Computing in Science Engineering 23 (2) (2021)
7–14.

[17] Project

Jupyter,

Jupyterlab,

https://github.com/

jupyterlab/jupyterlab (2022).

[18] Voila Development Team, Voila, https://github.com/

voila-dashboards/voila (2022).

[19] G. Grosso, G. Pastori Parravicini, Solid State Physics, Academic

Press, Oxford, UK, 2013.

[20] R. R. Hake, Interactive-engagement versus traditional methods:
A six-thousand-student survey of mechanics test data for intro-
ductory physics courses, American Journal of Physics 66 (1)
(1998) 64–74.

[21] C. Crouch, A. P. Fagen, J. P. Callan, E. Mazur, Classroom
demonstrations: Learning tools or entertainment?, American
Journal of Physics 72 (6) (2004) 835–838.

[22] S. Freeman, S. L. Eddy, M. McDonough, M. K. Smith, N. Oko-
roafor, H. Jordt, M. P. Wenderoth, Active learning increases
student performance in science, engineering, and mathemat-
ics, Proceedings of the National Academy of Sciences 111 (23)
(2014) 8410–8415.

[23] J. M. Perkel, Programming: Pick up python, Nature 518 (7537)

(2015) 125–126.

[24] PyPi Development Team, Pip, https://pypi.org/project/

pip (2021).

[25] Conda Development Team, Conda, https://docs.conda.io

(2021).

[26] J. M. Perkel, By jupyter, it all makes sense, Nature 563 (7729)

(2018) 145–146.

[27] L. A. Barba, L. J. Barker, D. S. Blank, J. Brown, A. B. Downey,
T. George, L. J. Heagy, K. T. Mandli, J. K. Moore, D. Lippert,
K. E. Niemeyer, R. R. Watkins, R. H. West, E. Wickes, C. Will-
ing, , M. Zingale, Teaching and learning with jupyter, https:
//jupyter4edu.github.io/jupyter-edu-book (2019).

[28] C. J. Weiss, Scientiﬁc computing for chemists: An undergrad-
uate course in simulations, data processing, and visualization,
Journal of Chemical Education 94 (5) (2017) 592–597. doi:
10.1021/acs.jchemed.7b00078.

[29] J. K. Gilbert, M. Reiner, M. Nakhleh, Visualization: Theory and
practice in science education, Springer Netherlands, 2008.
[30] H. Nguyen, D. A. Case, A. S. Rose, NGLview–interactive
molecular graphics for jupyter notebooks, Bioinformatics 34 (7)
(2017) 1241–1242.

[31] Y. Hinuma, G. Pizzi, Y. Kumagai, F. Oba, I. Tanaka, Band struc-
ture diagram paths based on crystallography, Computational
Materials Science 128 (2017) 140–184.

[32] D. J. Clarke, M. Jeon, D. J. Stein, N. Moiseyev, E. Kropi-
wnicki, C. Dai, Z. Xie, M. L. Wojciechowicz, S. Litz, J. Hom,
J. E. Evangelista, L. Goldman, S. Zhang, C. Yoon, T. Ahamed,
S. Bhuiyan, M. Cheng, J. Karam, K. M. Jagodnik, I. Shu,
A. Lachmann, S. Ayling, S. L. Jenkins, A. Ma’ayan, Appyters:
Turning jupyter notebooks into data-driven web apps, Patterns
2 (3) (2021) 100213.

[33] S. Lau, J. Hug, nbinteract: generate interactive web pages from
jupyter notebooks, Master’s thesis, EECS Department, Univer-
sity of California, Berkeley (2018).

[34] Bokeh Development Team, Bokeh: Python library for interac-
tive visualization, https://bokeh.pydata.org/en/latest
(2018).

[35] Ole Schütt, appmode, https://github.com/oschuett/

appmode (2022).

[36] Jupyter Development Team, nbconvert, https://nbconvert.

readthedocs.io (2022).
[37] Jupyter Book Community,
//jupyterbook.org (2022).

Jupyter

book,

https:

[38] B. Kim, G. Henke, Easy-to-use cloud computing for teaching
data science, Journal of Statistics and Data Science Education
29 (sup1) (2021) S103–S111.

[39] Docker, Inc., Docker, https://www.docker.com (2021).
[40] Dokku Development Team, Dokku: The smallest paas imple-
mentation you’ve ever seen, https://dokku.com (2021).
[41] L. Talirz, S. Kumbhar, E. Passaro, A. V. Yakutovich, V. Granata,
F. Gargiulo, M. Borelli, M. Uhrin, S. P. Huber, S. Zoupanos,
C. S. Adorf, C. W. Andersen, O. Schütt, C. A. Pignedoli,
D. Passerone, J. VandeVondele, T. C. Schulthess, B. Smit,
G. Pizzi, N. Marzari, Materials cloud, a platform for open com-
putational science, Scientiﬁc Data 7 (1) (2020) 299.

A. P. Bardelli, A. Rothberg, A. Hilboll, A. Kloeckner, A. Sco-
patz, A. Lee, A. Rokem, C. N. Woods, C. Fulton, C. Masson,
C. Häggström, C. Fitzgerald, D. A. Nicholson, D. R. Hagen,
D. V. Pasechnik, E. Olivetti, E. Martin, E. Wieser, F. Silva,
F. Lenders, F. Wilhelm, G. Young, G. A. Price, G.-L. Ingold,
G. E. Allen, G. R. Lee, H. Audren, I. Probst, J. P. Dietrich, J. Sil-
terra, J. T. Webber, J. Slaviˇc, J. Nothman, J. Buchner, J. Kulick,
J. L. Schönberger, J. V. de Miranda Cardoso, J. Reimer, J. Har-
rington, J. L. C. Rodríguez, J. Nunez-Iglesias, J. Kuczynski,
K. Tritz, M. Thoma, M. Newville, M. Kümmerer, M. Boling-
broke, M. Tartre, M. Pak, N. J. Smith, N. Nowaczyk, N. She-
banov, O. Pavlyk, P. A. Brodtkorb, P. Lee, R. T. McGibbon,
R. Feldbauer, S. Lewis, S. Tygier, S. Sievert, S. Vigna, S. Peter-
son, S. More, T. Pudlik, T. Oshima, T. J. Pingel, T. P. Robitaille,
T. Spura, T. R. Jones, T. Cera, T. Leslie, T. Zito, T. Krauss,
U. Upadhyay, Y. O. Halchenko, Y. Vázquez-Baeza, S. 1.0 Con-
tributors, Scipy 1.0: fundamental algorithms for scientiﬁc com-
puting in python, Nature Methods 17 (3) (2020) 261–272.
[54] S. K. Lam, A. Pitrou, S. Seibert, Numba: a llvm-based python
jit compiler, Proceedings of the Second Workshop on the LLVM
Compiler Infrastructure in HPC (2015).

[55] S. Behnel, R. Bradshaw, C. Citro, L. Dalcin, D. S. Seljebotn,
K. Smith, Cython: The best of both worlds, Computing in Sci-
ence Engineering 13 (2) (2011) 31–39.

[42] Google LLC, Google Colab, https://colab.research.

[56] NumPy Developers, F2py user guide and reference manual,

google.com (2022).

https://numpy.org/doc/stable/f2py (2021).

[43] D. Frenkel, B. Smit, Understanding molecular simulation: from

[57] J. D. Hunter, Matplotlib: A 2d graphics environment, Comput-

algorithms to applications, Vol. 1, Elsevier, San Diego, 2001.

ing in Science & Engineering 9 (3) (2007) 90–95.

[58] Jon Mease, Bringing ipywidgets Support to plotly.py, in: Fatih
Akici, David Lippa, Dillon Niederhut, M. Pacer (Eds.), Proceed-
ings of the 17th Python in Science Conference, 2018, pp. 69 –
76.

[59] bqplot Development Team, bqplot, https://github.com/

bqplot/bqplot (2022).

[60] J. AHRENS, B. GEVECI, C. LAW, 36 - paraview: An end-user
tool for large-data visualization, in: C. D. Hansen, C. R. John-
son (Eds.), Visualization Handbook, Butterworth-Heinemann,
Burlington, 2005, pp. 717–731.

[61] IPython Development Team, Traitlets, https://traitlets.

readthedocs.io (2015).

[62] M. Patwardhan, S. Murthy, Designing reciprocative dynamic
linking to improve learners’ representational competence in in-
teractive learning environments, Research and Practice in Tech-
nology Enhanced Learning 12 (2017) 10.

[44] W. H. Press, B. P. Flannery, S. A. Teukolsky, W. T. Vetterling,
Numerical recipes in C, The Art of Scientiﬁc Computing, Sec-
ond Edition, Cambridge University Press, Cambridge, 1992.
[45] S. Ainsworth, The multiple representation principle in multime-
dia learning, in: R. Mayer (Ed.), The Cambridge Handbook of
Multimedia Learning, Cambridge University Press, 2014, pp.
464–486.

[46] J. Izaac, J. Wang, Computational quantum mechanics, Springer,

2018.

[47] R. Shankar, Principles of quantum mechanics, Springer Science

& Business Media, 2012.

[48] D. J. Tannor, Introduction to quantum mechanics: a time-
dependent perspective, University Science Books, Sausalito,
California, 2007.

[49] J. Thijssen, Computational Physics, Cambridge University

Press, Delft, 2007.

[50] J. A. Fleck, J. Morris, M. Feit, Time-dependent propagation
of high energy laser beams through the atmosphere, Applied
physics 10 (2) (1976) 129–160.

[51] C. H. Crouch, E. Mazur, Peer instruction: Ten years of expe-
rience and results, American Journal of Physics 69 (9) (2001)
970–977.

[52] C. R. Harris, K. J. Millman, S. J. van der Walt, R. Gom-
mers, P. Virtanen, D. Cournapeau, E. Wieser, J. Taylor, S. Berg,
N. J. Smith, R. Kern, M. Picus, S. Hoyer, M. H. van Kerk-
wijk, M. Brett, A. Haldane, J. F. del Río, M. Wiebe, P. Peter-
son, P. Gérard-Marchant, K. Sheppard, T. Reddy, W. Weckesser,
H. Abbasi, C. Gohlke, T. E. Oliphant, Array programming with
numpy, Nature 585 (7825) (2020) 357–362.

[53] P. Virtanen, R. Gommers, T. E. Oliphant, M. Haber-
land, T. Reddy, D. Cournapeau, E. Burovski, P. Peterson,
W. Weckesser, J. Bright, S. J. van der Walt, M. Brett, J. Wil-
son, K. J. Millman, N. Mayorov, A. R. J. Nelson, E. Jones,
R. Kern, E. Larson, C. J. Carey, ˙I. Polat, Y. Feng, E. W.
Moore, J. VanderPlas, D. Laxalde, J. Perktold, R. Cimrman,
I. Henriksen, E. A. Quintero, C. R. Harris, A. M. Archibald,
A. H. Ribeiro, F. Pedregosa, P. van Mulbregt, A. Vijaykumar,

15

