2
2
0
2

y
a
M
2
2

]
I

A
.
s
c
[

1
v
8
8
0
6
0
.
6
0
2
2
:
v
i
X
r
a

Social Practices: a Complete Formalization

F.P.M. Dignum
Ume˚a University & Utrecht University
Ume˚a, Sweden & Utrecht, The Netherlands

DIGNUM@CS.UMU.SE

Abstract

Multi-agent models are a suitable starting point to model complex social interactions. However,
as the complexity of the systems increase, we argue that novel modeling approaches are needed that
can deal with inter-dependencies at different levels of society, where many heterogeneous parties
(software agents, robots, humans) are interacting and reacting to each other.
In this paper, we
present a formalization of a social framework for agents based on the concept of Social Practices
as high level speciﬁcations of normal (expected) behavior in a given social context. We argue that
social practices facilitate the practical reasoning of agents in standard social interactions. Thus they
can support deliberations for complex situations just like conventions and norms. However, they
also come with a social context that gives handles for social planning and deliberation in top of
the normal functional deliberation. The main goal of this paper is to give a formalization of social
practices that can be used as a basis for implementations and deﬁning precise structures within
which social learning can take place.

1. Introduction and Motivation

Interactions do not exist in a vacuum, but are surrounded by many social and physical constructs
that shape and constrain that interaction [1]. Understanding and modeling the context of interac-
tions is essential in the design of systems that are both realistic and computationally feasible. In
fact, if context is not properly considered “the patterns and the outcomes of the interactions are
inherently unpredictable, and predicting the behavior of the overall system based on its constituent
components is extremely difﬁcult (sometimes impossible) because of the high likelihood of emergent
(and unwanted) behavior” [25]. E.g. imagine the situation that normally Fred takes the children to
school on the way to work and his wife Sonja picks up her colleague and goes to work in a different
direction. On a day that Fred has an important presentation to give in the morning, Sonja might
decide to take the children to school in order to give Fred more time and peace of mind for his pre-
sentation. Even though it might not be the most cost effective solution, given the social context, it is
the best overall behavior. It also has effect on the relation between Fred and Sonja and future inter-
actions. In human societies, we use social practices as means to cope with uncertainty of outcome
of interaction. Interactions are embedded in a broad network of societal and institutional contexts,
and social practices provide means to deal with this complexity. Endowing agents with means to
represent and reason with social practices will enable smooth, ﬂexible, context-aware human-agent
interaction.

Applied to human-agent interactions, such as companion robots, human-agent-robot teamwork,
or persuasive applications, social practices can simplify and guide the deliberation of the agent in
complex contexts.
In these domains, the agent is expected to support the user but there are no
predeﬁned protocols or ﬁxed objectives, so agent actions must be based on a close observation of
the situation and evaluation of possible user aims, and reaction to user actions and environment

1

 
 
 
 
 
 
changes. This is exactly the reason for social practices in human interactions. Social practices refer
to everyday practices and the way these are typically performed by (most of) the members in the
society. Although conventions and norms have similar aims as social practices, we will show that
for the kind of applications where the human-agent interaction does not consist of a single action
or action sequence, social practices provide an added value. Even though the subject of emergence
and evolution of social practices is an important one, there is very little formal theory available on
this aspect and thus for simplicity in this paper we assume social practices to be given and ﬁxed.
I.e. we will not elaborate on how the practice come to be, or how they are maintained and shared.
Our conceptual agent architecture therefore takes a set of social practices as given, and the focus is
on how the agent uses practices in its deliberation and planning. However, in the discussion section
we will sketch some possible ways in which the framework for social practices as we will develop
it in this paper can be made more dynamic.

In the core of this paper, we present a formalization of the theory of social practices as proposed
in [37, 33] to be used as basis for a cognitive architecture. Our approach can be seen as a middle way
between using ﬁxed interaction scripts and full free deliberation reactive to user and environment
sensing. We build on the concept of landmark [17] in the sense, that social practices enable the
speciﬁcation of possible (abstract) plans without needing to represent every single component of
the interaction. An agent will adopt a social practice, based on its evaluation of the context, and
‘ﬁll-in the gaps’, using its own capabilities and according to its own intentions. We provide a logic
semantics for social practices, based on modalities to represent expectation, capability, roles, norms
and contexts.

The objective of this paper is to provide a ﬁrst step towards an architecture for social intelligent
agents that use social contexts as the main starting point for interaction. In particular, we describe
a formal speciﬁcation of the constructs needed to represent and reason with social practices, such
that it fulﬁls the objectives of the agent, without needing to represent every possible aspect of the
interaction, or path in a protocol.

In the next section we will give some more background on social practice theory and also will
discuss how social practices relate to other social concepts such as conventions and norms.
In
section 3 we describe the main characteristics of social practices, translating from the rather vague
notions used in social science to more concrete concepts more akin to computer science applications.
In section 4 we develop the formal logic necessary to formalize all aspects of social practices as
given in section 3. Then we can start to give a formal account of all the elements of social practices
in section 5. In section 6 we show how this formalization can be used by an agent to deliberate
about a social practice and use it for guiding its behavior. In section 7 we discuss the use of the
framework as a structure that can be used as a basis for emerging and maintaining social practices
and we ﬁnish with some conclusions and future work.

2. Background

Social practice theory comes forth from a variety of different disciplines. It started from philosoph-
ical sociology with proponents like Bourdieu [3] and Giddens [21]. Later on Reckwitz and Shove
[33, 37] have expanded on these ideas and also Schatzki [35] made some valuable contributions.
An important claim that all these people make is that important features of human life should be
understood in terms of organized constellations of interacting persons. Thus people are not just cre-
ating these practices, but our deliberations are also based on the fact that most of our life is shaped

2

by social practices. Thus we use social practices to categorize situations and decide upon ways of
behaviour based on social practices. The main intuition behind this is that our life is quite cyclic
in that many activities come back with a certain regularity. We have meals every day, go to work
on Monday until Friday, go to the supermarket once a week, etc. These so-called Patterns of Life
([26]) can be exploited to create standard situations and expectations. It makes sense to categorize
recurrent situations as social practices with a kind of standard behaviour for each of them. We
will discuss some background and related work from both social science on social practices and in
the subsequent section from computer science on structures that seem related or might be used to
represent social practices.

2.1 Social Practice Theory

Social practices are deﬁned as accepted ways of doing things, contextual and materially mediated,
that are shared between actors and routinized over time [33]. They can be seen as patterns which
can be ﬁlled in by a multitude of single and often unique actions. Through (joint) performance, the
patterns provided by the practice are ﬁlled out and reproduced.

According to [33, 37] a social practice consists of three parts:

• Material: covers all physical aspects of the performance of a practice, including the human

body (relates to physical aspects of a situation).

• Meaning: refers to the issues which are considered to be relevant with respect to that material,

i.e. understandings, beliefs and emotions (relates to social aspects of a situation).

• Competence: refers to skills and knowledge which are required to perform the practice (re-

lates to the notion of deliberation about a situation).

The material for taking the children to school would be the route between home and school, the
car used (is it a big or small one), the time being in the morning, the parents and children,the school
bags, etc.
The competences denote kinds of activities that can be expected from the participants. They do not
dictate a complete workﬂow or script for the social practice, but rather indicate expected actions at
points in time. E.g. the children have to put on their coats and get their school bags before getting
in the car. But putting on coats might not be needed in summer time. The individuals participating
in the social practice are free to act in any way that conforms to the practice, and even to violate it
if they wish. So, taking the children to school means that the children have to get in the car before
driving to school. The exact route to school might differ depending on trafﬁc. Also the conversations
in the car are completely “free”. The activities also encompass the expected competencies of the
actors involved. E.g. we expect that the parents know how to drive a car.
The meaning of a social practice couples the interaction perspective of it with the social perspective
of the practice. E.g. letting the oldest child sit in front or the one who has her birthday indicates the
special position and responsibilities of that child. Singing some songs with the children in the car
might also help bonding with the children and facilitate later chores.

From the above description it can already be seen that social practices are more encompassing
than conventions and norms. Conventions focus on the strategic advantage that an individual gets
by conforming to the convention. The reason to follow a convention is that if all parties involved
comply a kind of optimal coordination is reached. I.e. if we all drive on the left side of the road

3

trafﬁc will be more smooth than when everyone chooses the side to drive on freely. Thus conven-
tions focus on the actual actions being performed and how they optimize the coordination. Social
practices do not necessarily optimize the coordination. Because they indicate a type of expected
actions and interactions given a social and physical context they will smoothen the coordination.
However, this is not necessarily the optimal way the coordination could have been done. E.g. if we
go to a presentation we sit down as soon as we see chairs standing in rows in the room. However,
we could also keep standing (as is often done outside).

Social practices are different from norms. Norms are also applicable in certain situations and
for particular people (or roles) and they also create expectations (nl.
that the norm is followed).
However, norms usually dictate a very speciﬁc behaviour rather than creating a set of loosely couple
expectations as is the case for social practices. E.g. if the norm states that a car has to stop for a
red light, it gives a very speciﬁc directive. If a norm is more abstract (like “drive carefully”) then
we need to translate this into concrete norms for speciﬁc situations. This is different from saying
that some parts of a situation are governed by the norm and others are still free of the normative
inﬂuence. Basically, when specifying the norm one indicates exactly when the norm is applicable
rather than general situations for which the norm can be applied in some part.

The resources describe the physical and social setting in which the practice takes place. There-
fore it is the cognitive trigger of the practice and can also be used to check which objects and people
are available to peform the expected actions within the social practice. Likewise the activities indi-
cate which actions and action patterns are available for the planning of the individuals participating
in the social practice. The meaning of a practice is related to the social perspective as it indicates
the social affect and purpose of a social practice given that it is performed in a certain way. E.g.
taking the children to school in a big SUV might signal the wealth or status (or stupidity) of the
parents. Using the bike can signal the environmental consciousness of the parents. Also actions
within a practice can get a speciﬁc social interpretation. E.g. asking a question during a lecture on
a difﬁcult topic can indicate interest and showing effort to learn. This might lead to more support
from a lecturer later during the course. Given the above descriptions of social practices one can
summarize the purpose of them for individuals (informally) as follows:

P erceive(resources) ⇒ Expect(activities) ∧ Expect(competencies)

Done(activities) ⇒ physical(postconditions) ∧ social(postconditions)

Given a certain situation that is perceived in which the social practice is activated, the social practice
now triggers expectations that the activities of that social practice will be executed. This implies
that we assume a certain competence of all the people involved in the social practice (e.g. a parent
can drive a car). After the activities have been executed, we do not just assume the postconditions
of the actions hold, but also assume that certain social effects have been achieved according to the
“meaning” of the practice. Thus the social practice allows us to make a whole set of assumptions
and have expectations that could otherwise not be readily made or would take a lot of effort to
derive.

The dynamic nature of social practices is emphasized by Shove [37]: Each time it is used, ele-
ments of the practice, including know-how, meanings and purposes, are reconﬁgured and adapted.
Therefore the use of social practices includes a constant learning of the individuals using the social
practice in ever changing contexts. In this way social practices guide the learning process of agents
in a natural way. In [37] the social aspect of social practices is emphasized by giving the social

4

practice center stage in interactions and letting individuals be supporters of the social practice. It
shows that social practices are shared (social) concepts that also exist outside individuals. The mere
fact that they are shared and jointly created and maintained means that individuals playing a role
in a social practice will expect certain behavior and reactions of the other participants in the so-
cial practice. Thus it is this aspect that makes the social practices so suitable for use in individual
deliberation in social situations. In section 6 we will show how this can be done in our framework.

2.2 Related Work from Computer Science

In this section, we discuss several existing frameworks in computer science that seem related to the
concept of social practices and show why they are not suitable or too limited to be used directly.
One framework that seems very close to social practices is the notion of scripts.However, social
practices are not just mere scripts in the sense of [31]. Practices are more ﬂexible than the classical
frames deﬁned by scripts in that they can be extended and changed by learning and the ”slots” only
need to be ﬁlled in as far as they are needed to determine a course of action. Using these structures
changes planning in many common situations to pattern recognition and ﬁlling in parameters. They
support, rather than restrict deliberation about behaviour. E.g.
the social practice of “going to
work” incorporates usual means of transport that can be used, timing constraints, weather and trafﬁc
conditions, etc. So, normally you take a car to work, but if the weather is exceptionally bad the social
practice does not force the default action, but rather gives input for deliberation about a new plan
in this situation and take a bus or train (or even stay home). So, social practices can be seen as a
kind of ﬂexible script. Moreover, scripts do not incorporate any social meaning for the activities
performed in them as social practices do provide.

2.2.1 AGENT PROGRAMMING

Multi-agent programming languages such as 2APL support the implementation of individual agents
that can perform high-level reasoning and deliberation about their information (i.e., beliefs) and
objectives (i.e., goals to achieve) in order to decide what actions to perform [8]. In order to reach its
goals, an agent adopts plans. 2APL provides programming constructs to implement beliefs, goals,
actions, plans, events, and three different types of rules that can be applied to generate plans. In
particular, 2APL provides planning goal rules that implement practical reasoning rules that can
be used to generate plans for achieving goals and practical reasoning rules, which can be used to
expand abstract plans to concrete sequences of actions and to rewrite plans to cope with unforeseen
circumstances [7].

A possible way to represent the top level planning goal rules for a family taking children to

school scenario as indicated in the introduction is:

Goal: in-school(children)
GP/PR rules:
in-school(children) <- frost | start(car,electric);

in-car(children,parent);
drive(school)

in-school(children) <-

| in-car(children,parent);

drive(school)

drive(school) <- late | drive(quick);park(close-school)
drive(school) <-

| drive(careful);park(safe)

5

The ﬁrst rule states that whenever the precondition “frost” holds, the goal
“in-school(children)” can be dealt with by the “plan”:
“start(car,electric);in-car(children,parent); drive(school)”.
The second rule states that “in-school(children)” can alternatively be handled by the plan
“in-car(children,parent); drive(school)”.
This speciﬁcation makes use of the fact that in 2APL, rules are tried in order, and the ﬁrst one that
is applicable is executed. Thus the agent ﬁrst checks whether there was frost that night and in case
there is, it will start the car using an external electric connection and get the kids in the car and drive
to school afterwards. If there was no frost, the condition of the ﬁrst rule does not apply and the
agent follows the second rule: ”in-car(children,parent); drive(school)”. A similar process appears
for the “drive(school)” rules. It ﬁrst checks the time. If they are late he will drive quick and park
close to school. If they are not late, it will try the second rule and drive carefully and park safely.

A problem with this approach is that if the ﬁrst rule fails during the execution of the plan, e.g.
because the cable cannot be attached, the agent will try the next rule and start putting the kids in the
car, even though the car did no start yet (and will not start on the battery). This can be avoided by
explicitly indicating a precondition to be true or false in order to distinguish the different cases, as
in the following two rules:

in-school(children) <- frost | start(car,electric);

in-car(children,parent);
drive(school)

in-school(children) <- not(frost)|in-car(children,parent);

drive(school)

However, if in this situation the plan associated with the ﬁrst rule fails, the second rule is not appli-
cable because there is frost. In this situation, the agent would just stop, without getting the cildren
to school, as it has no applicable plan to follow. Moreover, in the case of conditions involving
several criteria, the number of rules would quickly increase such that the different combinations of
conditions could be represented.

We are not claiming that the above cases could not in some way be represented in 2APL. How-
ever, the example highlights two aspects that are interrelated and mingled in the 2APL representa-
tion. The conditions of the rules function as a precondition of the plan in the rule. However, the
same conditions are also used for rule selection. The latter necessitates the constructions shown
above but can also lead to (unexpected) difﬁculties as indicated.

By using the idea of social practice we distinguish conditions that are needed for rule selection
and preconditions of plans. Thus we do not incorporate the conditions in all the rules, but are
checking the context conditions of the social practice ﬁrst and given those conditions select a subset
of the rules that are relevant for the situation. Thus the deliberation is no longer purely goal driven,
but is goal plus context driven. This will lead to a more natural speciﬁcation and (through the
modularization of rules based on context) to a more efﬁcient deliberation.

2.2.2 CASE-BASED REASONING

Whereas agent programming follows a goal-based approach for selecting actions, Case-Based Rea-
soning (CBR) is an example of reactive deliberation. CBR uses previous cases (or situations) as the
basis for the selection of the next action [34]. The general cycle of CBR follows the following steps:

6

1. problem formulation

2. retrieve

3. reuse

4. revise

5. retain

The ﬁrst step is to formulate the problem. This is important because the way a problem is formu-
lated will determine the query on the case-base, through which the most relevant case is eventually
selected. In our scenario this might lead to the following (simpliﬁed) problem formulation:

frost = no
time = 8:30
car(fuel) = 10L
traffic = high
temperature = 6C
...

For simplicity, we use here a very simple attribute-value structure, but more complex structures can
also be used. With this formulation the case-base is searched for a similar situation. The likelihood
of ﬁnding a case exactly like the current situation is minimal. Thus one needs some metrics in order
to ﬁnd the most ‘similar’ case. Without getting into details, we just point to some difﬁcult aspects
here. Suppose there is an almost identical case except that the time is 8:50 (you are late). Could we
use that case as a basis for the current course of action? So, even if the case in the case-base differs
in only one parameter it might lead to a quite different course of action.

Given a case from the case-base that is close to the present situation, it has to be checked whether
the plan for that situation can be used as it is or should be adjusted. E.g. if in the case from the case-
base the ﬁrst step would be to start driving very quick we can now relax and drive more carefull.
Although for humans it is reasonably obvious how to make such a revision of the plan it is more
difﬁcult to ﬁnd an algorithm that could calculate the necessary adjustments automatically. Finally,
the system should decide whether the present case and its course of action are sufﬁciently different
from the cases in the case base to warrant adding it (in the right place).

Intuitively the example makes clear that even in simple scenarios like taking the children to
school there are many parameters that potentially inﬂuence the course of action and even small
differences can have big consequences for the course of action to be followed. Thus one needs to
have a very large case base to cover all relevant cases such that an appropriate course of action is
followed in each situation. In many domains (like crisis management) such a large case base cannot
easily be assembled nor is it possible to construct one on the ﬂy, because the consequences of errors
are too big to allow for a gradually improving system.

2.2.3 WORK PRACTICE SIMULATION

Another approach relevant to social deliberation is that advocated by the Brahms platform [38].
Brahms is a multi-agent, rule-based, activity programming language. The Brahms language allows
for the representation of situated activities of agents in a geographical model of the world. Sit-
uated activities are actions that happen in the context of a speciﬁc situation, thus their execution

7

is constrained not only by the reasoning capabilities of an agent, but also by the agent’s beliefs
of the external world, such as where the agent is located, the state of the world at that location
and elsewhere, located artefacts, activities of other agents, or communication with other agents and
artefacts.

The philosophy of Brahms comes from the realization that work practices in organizations dif-
fer from the work ﬂows as described and prescribed by the organization. If it is recognized that
ultimately employee behaviours, rather than management practices, are the key to success in orga-
nizations [5], then these practices should be described as agent behaviours rather than the ofﬁcial
(goal directed) plans. Within Brahms a work practice is deﬁned as the (collaborative) performance
of collective situated activities of a group of people who collaborate and communicate, while per-
forming these activities synchronously or asynchronously, by making use of knowledge previously
gained through experience in performing similar activities. Differences between formal plans and
the work practice can lead to unforeseen results and render organizational plans useless.

The Brahms modelling language is geared towards modelling people’s activity behaviour [38].
The Brahms framework consists of several interrelated models. Of particular relevance for this pa-
per is the Activity Model that deﬁnes the behaviour of agents and objects by means of activities and
workframes. Brahms has an activity-based subsumption architecture by which an agent’s activities
can be decomposed into sub-activities. Activities can be interrupted and resumed, just as humans
can multi-task by switching between different activities. Workframes control when activities are ex-
ecuted based on the beliefs of the agent, and on facts in the world. However, as in CBR, workframes
require the full instantiation of all its preconditions in order to be applied.

Our scenario could be modelled through the use of several workframes. One for starting the
car, one for getting the children in the car, one for driving to school and one for parking the car.
By giving the starting the car framework a high priority it will try to execute ﬁrst. Thus if the
preconditions of the workframe are fulﬁlled (which will include the presence or absence of frost)
it will start the car using the start motor and normal battery. If the workframe cannot be executed
the one with the next highest priority will be executed, etc. If during the starting of the car it is
discovered that there was frost and the car does not start the framework for starting the car on an
external electric supply is automatically ﬁred and the start car workframe is interrupted. This makes
the Brahms framework quite ﬂexible. However, it has the same problem as the 2APL framework in
that the context and preconditions of the workframes are mixed. Moreover, the agents also do not
have a learning capability that might lead to a priority adjustment of workframes after the (failed)
execution of activities.

2.2.4 AGENT ORGANIZATIONS

A last approach very relevant for social deliberation is the use of explicit agent organizations. See
[16] for a good description. Agent organizations also decsribe a context in which the agents are
operating and which guarantees certain behavior. However, agent oragnizations do not specify the
“materials” used in their operation as do social practices. I.e. organizations do not specify speciﬁc
times, places and objects available in the context of an interaction. The agent organization can be
seen as a top-down abstract (social) structure within which agents operate, while a social practice is
an emerging abstraction from the actual repeated interactions that agents perform. Having said this,
there are many similarities between elements of social practices and agent organizations as well.
Both have a kind of expected workﬂow, roles and meanings of actions in that context. We will later

8

on use these similarities in the more formal deﬁnitions of social practices and also point out where
the exact diferences lay.

2.2.5 CONCLUSIONS

It has become clear that, although there are several techniques from AI and computer science that
seem appropriate to model social practices, they all fall short. Thus in the rest of this paper we
investigate what are the main characteristics of social practices that need to be modeled, how they
can be made more precise and create a formalization that can be used for implementing social
practices.

3. Characteristics of Social Practices

As we have stated in the previous section, in Social Sciences, social practices are deﬁned on the
basis of materials, meanings and competences [24]. Although social practices provide a handle for
modelling the deliberation of socially intelligent agents because they seem to combine the elements
that we require for socially intelligent behaviour, they are a relatively novel and not precisely de-
ﬁned concept from sociology that cannot be easily formalized in one step without making many
implicit assumptions. Therefore we ﬁrst make a step to get the notions involved in social practices
more concrete. We are aware that such a step can already exclude some features that people might
consider crucial for social practice theory. However, by making this step explicit, we can more
easily adapt the concrete structure and add other elements or change them based on the experiences.
The following is an adaptation of an initial conceptualization of social practices, as introduced in
[19]:
Context

• Roles describe the competencies and expectations about certain types of actors [39]. Thus a

parent is expected to be able to drive the car to school and/or work.

• Actors are all people and autonomous systems involved, that have capability to reason and

(inter)act. This indicates the agents that are expected to fulﬁll a part in the practice.

• Resources are objects that are used by the actions in the practice such as car, coats, school
bags, etc. So, they are assumed to be available both for standard actions and for the planning
within the practice.

• Affordances are the properties of the context that permit social actions and depend on the
match between context conditions and actor characteristics [20].E.g. a sweater might be used
(sometimes) as a coat because it also affords warmth.

• Places indicates where all objects and actors are usually located relatively to each other, in
space or time: The car is in the garage, school bags in the rooms of the children or in the
corridor, etc.

Meaning

• Purpose determines the social interpretation of actions and of certain physical situations. E.g.
the purpose of taking the children to school is that they can learn (or just to avoid a possible
penalty for keeping children out of school)

9

• Promotes indicates the values that are promoted (or demoted, by promoting the opposite) by
the social practice. Driving carefully promote the value of universalism, because you take
care of all passenger’s safety and the safety of other road users.

• Counts-as are rules of the type ”X counts as Y in C” linking brute facts (X) and institutional
facts (Y) in the context (C) [36]. E.g., in a voting place, ﬁlling out a ballot counts as a vote.

Expectations

• Plan patterns describe usual patterns of actions [4] deﬁned by the landmarks that are expected

to occur.

• Norms describe the rules of (expected) behavior within the practice. They are decribed as

deontic rules using obligations, prohibitions and permissions.

• Strategies indicate possible trigger-action combinations that can be performed at any time
within the practice. Not all strategies need to be performed! They are meant as potential
courses of action, whenever the trigger is satisﬁed. Strategies are speciﬁed as AIC statements.
E.g. once all children are in the car the parent starts off for school.

• Start condition, or trigger, indicating how the social practice starts. At 8:30 the social practice

of taking children to school starts.

• Duration, or End condition, indicating how the social practice ends. E.g. taking the children

to school normally takes around 20 minutes and ends when the children are at school.

Activities

• Possible actions describes the actions that usually occur in the social practice. This gives a

kind of repository of actions with which activities in the social practice can be planned.

• Requirements indicate the type of capabilities or competences that the agent is expected to

have in order to perform the activities within this practice.

An example of the social practice of taking the children to school is given in ﬁgure 1. The last
column of this table points to the formal deﬁnitions that are given in section 4.3 and that will be
used to give each of these elements a precise, formal semantics in ﬁgure 3.

The ﬁrst block of a social practice consist of the physical and social context and is related to the
deﬁnition of context given in [41]. Two of the lines in the table are grey: actors and resources. In
principle these lines pertain to what is available in a particular instance of the social practice rather
than the general deﬁnition of the social practice.
The meaning of a social practice links concrete actions to social actions, values and purposes. We
are aware that this part of the social practice might be extended with more elements like emotions,
etc. However, not all social practices have these elements, while we claim that the elements we
include are always part of any social practice.
The expectations are the most central part of the social practice as they pertain to the expected
sequence of events that each actor expects to happen and on the basis of which she will plan and
adapt behaviour.
The last block contains the prerequisites that actors are expected to have and the actions that one

10

Figure 1: social practice

can expect to observe (plus their associated expected effects).
As said before Social Practices show some resemblance to agent organizations (see e.g. [16]), in
the sense that both provide structure to the interactions between agents. However, organizations
provide an imposed (top-down) structure, while the social practices form a structure that arises
from the bottom up. Thus instead of forcing compliance, interaction patterns in a social practice
indicate expectations on the behavior of its actors. Therefore no guarantee is given that behavior will
occur (exactly) as expected. This has a large inﬂuence on the way the social practices are formally
speciﬁed, focusing on possibilities and priorities rather than prescribing behavior.

Expectations are tied to the roles that determine possible and expected behavior and also indicate
the parents are supposed to take the
who is supposed to take initiative at certain points. E.g.
initiative to start taking the children to school. Norms determine the normal patterns of behavior
and thus also determine a certain type of expectation, namely the patterns of actions that are allowed
or prohibited. The plan patterns also partly determine the sequences of actions that are expected.
The different phases are temporally ordered and have a speciﬁc starting and end situation. Thus the
whole practice should be fulﬁlled by following a trace that ﬁts through that plan pattern.

11

Having this more concrete description of a social practice, we are now ready to develop a formal

representation for social practices in the next section.

4. Formal logic

Taking the social science pespective on social practices seriously means that social practices have
an existence independent of the individuals that execute them. In that respect they are like orga-
nizations, which also recruit persons to execute the functions belonging to speciﬁc roles and that
provide workﬂows that partially (but not completely!) indicate which actions are expected from
each individual. Given these type of similarities the formal model proposed in this paper is based
on modal logics, extending work on agent organizations, in particular the Logic of Agent Organi-
zations (LAO) [18] that provides a formal, provable representation of organizations based on the
notions of capability, ‘bring it about’ – or stit – [32] and attempt, indicating that an agent tries but
might not always succeed. However, where LAO was based on a temporal logic and the stit oper-
ator, we will use dynamic logic with explicit actions for social practices. The difference is caused
exactly by the fact that organizations are a top down structure where the results are what counts and
the exact way they are achieved are left to the individuals. Social practices are emerging bottom up
from repeated interactions between individuals using actions. These interactions then get abstracted
into abstract social practices. This is reﬂected in the formalism that we use for scoial practices as
well.
The semantics and model we give for the dynamic logic is quite complex and might seem at ﬁrst
sight overly complex. However, the complexity is needed to model two important features of actions
in the context of social practices. First, we want to be able to state that a particular agent performs
an action with a particular result, leaving open whether other agents performed any action at the
same time. So, actions (state changes) are not exclusive. E.g. Fred takes the children to school does
not preclude Madeleine to go to work at the same time. Secondly, we want to be able to express that
a set of agents perform an action together, which entails that they all do some part of that action at
the same time. E.g. Fred and the children go to school in the car together. We need to provide for
these joint actions in the semantics as well.

Because the description of actions and action sequences is important as well as epistemic/doxastic
states of the agents we will use a combination of dynamic logic with epistemic logic as the basis for
our formalization.1

4.1 Language

The alphabet consists of a set P of propositional symbols (p), the set of violation symbols Vi (indi-
cating the violation of a norm), the operators DON E and DO, a set of agent identiﬁers Ag (groups
of agents identiﬁers are denoted by A, B, . . .), a set Act of atomic action symbols typically denoted
by a , the doxastic operators B and CB, and the dynamic operators [ ] and (cid:104) (cid:105). The language L is
based on three types of syntactic constructs:
The set ActExp of action expressions (α) is deﬁned through the following BNF:

α ::= a | skip | α | α1 + α2 | α1&α2 | α1; α2.

1. Given that we only need to represent epistemic and dynamic operators, but not the epistemic changes, Dynamic
epistemic logic [23], which is designed to capture the change of epistemic models by communication is not used. We
merely need a logic in which both modalities are available.

12

where skip represents a ”doing nothing” action, . stands for the negation operator, + stands for the
indeterministic choice operator, & for the parallel performance operator and ; for the sequencing
operator. We sometimes refer to the set of action expressions of the form a, skip or a as the set of
basic actions. We use act(α) to denote the set of basic actions that are part of the complex action α.
In order to express the fact that an action is performed by an actor or set of actors we deﬁne a
so-called set (Evt) of event expressions (ξ) is deﬁned through the following BNF:

ξ ::= A : α | A : α |ξ1 + ξ2 | ξ1&ξ2 | ξ1; ξ2.

So, A : α denotes that the set A of actors performs the action α together. In the same way A : α
denotes the negation of A performing α together. (The exact semantics of this negation will be
described in section 4.3). Notice that the same notation for actions and event operators (negation,
+, &, ;) is used. Nevertheless they belong to different categories of operators! We chose, however,
to keep notation as simple as possible as we have to introduce many different layers of operators
later on already. The set Ass of assertions (φ) of our language L is deﬁned through the following
BNF:

Deﬁnition 1 (Language)

φ ::= p | Vi | DON E(ξ) | DO((ξ) | ¬φ | φ1 ∨ φ2 | φ1 ∧ φ2 | φ1 → φ2 |

Cap(a, α) | [ξ]φ | (cid:104)ξ(cid:105)φ | Bi(φ) | EBA(φ) | CBA(φ) | Goali(φ)

Thus we have all the usual propositional logic formulas and the violation symbols. We use DO(a :
α) (resp. DO(A : α), DON E(a : α), DON E(A : α)) to denote that actor a performs action α
next (resp. the set of actors A performs action α (jointly), the actor a performed action α as the
last action or the set of actors A jointly performed the action α as the last action). We can refer to
the capabilities of an actor a through Cap(a, α) that is true if actor a has the capability to perform
α. [ξ]φ indicates that φ will always be true after ξ has happened. (cid:104)ξ(cid:105)φ indicates that at least in one
state after ξ happened φ will be true. We can express doxastic statements as well, Bi(φ) states that
i believes φ. EBA(φ) states that everyone in the set of actors A believes φ and CBA(φ) states that
it is common belief among the set of actors A that φ is true. We also have the goals of an agent i
deﬁned by Goali(φ)
It will be handy to refer to abstract actions such as ”an action that achieves φ” or ”an action per-
formed by A that achieves φ”. For this we introduce the following deﬁnitions:

Deﬁnition 2 (Achieving)
Let αi ∈ ActExpr
Let X = {αi : [αi]φ} then αφ = +αi∈X αi
Let Y = {A : αi : [A : αi]φ} then α(A)φ = +A:αi∈Y A : αi

Note that if φ = T (Where T stands for the logical constant true) the abstract action refers to any
action that can be performed in a particular state. Also note that the sets X and Y are dependent on
the state in which they are evaluated. I.e. the set of actions that achieve a certain formula φ depends
on the state where one starts performing those actions. Also, these sets X and Y can in principle be
inﬁnite large sets. However, if we keep the amount of operators in the expression ﬁnite (which in
practice they are) these sets are also ﬁnite. Given the above language, we now proceed to deﬁne the
formal semantics for the constructs of that language.

13

4.2 Models

In order to give a semantics to the language introduced above we start deﬁning the notion of model
for L.

Deﬁnition 3 (Kripke Model)
A model M is deﬁned as follows:

M = (cid:10)P +(Agt), Act ∪ skip, Capability, W,

R, {Ra}a∈Agt, {Ga}a∈Agt, ≺, π(cid:11)

(cid:74) (cid:75)

where:

• P +(Agt) is the non-empty powerset of the ﬁnite set of actors Agt, that means the possible

groups of actors. We assume Agt = Agt.

• Act ∪ skip is the set of actions.

(Note these are semantic entities and different from the

syntactic action expressions (ActExpr)).

• Capability is a function in Agtx2Act that indicates for each actor the set of (atomic) actions

it is capable to perform.

• W is the set of possible states.

•

R is a function f s.t. f : Evt × W −→ P(W), to each event expression-world couple
(cid:74) (cid:75)
it associates the set of states to which the performance of that event in that world leads. It
and R which will be introduced in Section
consists of a composition of the two functions
4.3.

(cid:74) (cid:75)

• {Ra}a∈Agt is a family of serial, symmetric and transitive accessibility relations which are

indexed by actors indicating the believable worlds of agent ai.

• {Ga}a∈Agt is a family of serial and transitive accessibility relations which are indexed by

actors indicating the worlds agent ai wants to get to.

• ≺ is a serial, partial ordering on W denoting the order in which worlds are reached through
if w1 ≺ w2 and
actual performances of events. This ordering is constrained as follows:
∃w3 s.t. w3Raw1 or w3Raw2 then w3Raw2 and w3Raw1 From an intuitive point of view,
this condition guarantees that if w1 or w2 is a believable world from w3 than the other one
should also be believable and thus the whole path of actual performances through W should
be doxastically accessible.

• π is a usual truth function f s.t. f : Ass × W −→ {1, 0}.

Like in [28, 12, 13] our semantics consists of two parts: ﬁrst event expressions are interpreted as
set theoretic constructs on Act where events get a so-called open interpretation; successive event
expressions are interpreted as state-transition functions determining the accessibility relation
on W.

(cid:74) (cid:75)

R

14

4.3 Synchronicity sets, steps, synchronicity traces, and worlds

The interpretation of events is based on the basic notion of synchronicity set (s-set). A synchronicity
set indicates all basic events that are performed in parallel by a set of agents in a certain state.

Deﬁnition 4 (s-set)
The set S of s-sets is deﬁned as follows: S = P +(Agt) × {skip} ∪ P +(Agt) × P +(Act).

Synchronicity sets, that is elements of S, are denoted by S1, S2, . . .. The s-sets formalise the afore-
mentioned open interpretation view on events. Based on the notion of s-set we deﬁne the notion of
step 2.

Deﬁnition 5 (Step)
The set Step of steps is deﬁned as follows:

Step = {×A∈P +(Agt)SA | ∀A, B ∈ P +(Agt) : B ⊆ A ⇒ act(SB) ⊆ act(SA) &

∀A, B ∈ P +(Agt) : action(SB) = skip ⇒ action(SA∪B) = action(SA)}

where action is a function that extracts the action component from a given s-set (action(A :
{a1, a2}) = {a1, a2}).
Steps represent a sort of snapshot of the activity of each subgroup of Agt at a certain moment,
depicting how all agents move one ”step” ahead. Steps are therefore sets of s-sets of cardinality
2n − 1 where n is the number of agents in Agt. They are constrained in such a way that whatever
action is performed by a subgroup is also performed by a supergroup, and subgroups remaining
inactive are treated as performing a skip action. Steps, that is elements of Step, are denoted by
s1, s2, . . ..

In order to provide a semantics for sequential expressions the concept of synchronicity trace

(s-trace) is needed. Notice that this concept uses steps instead of s-sets like in [28, 12].

Deﬁnition 6 (s-trace) The set T of s-traces is deﬁned as follows:

T = {(cid:104)s1, ..., sn, ...(cid:105) |s1, ..., sn, ... ∈ S}.

The length of an s-trace t is denoted by dur(t). We assume dur(t) to be ﬁnite.

An event will be interpreted as a set of s-traces. The range for our interpretation of events is a
set E such that E = P(T ). Elements of E (sets of s-traces) are denoted as T1, T2, . . . The length
dur(T ) of a set T is deﬁned as max{dur(t)|t ∈ T }. We stipulate the length of the empty set to be
dur(∅) = 1.

We can now introduce the operations that constitute the semantic counterpart of our syntactic

operators.

Deﬁnition 7 (Operations on events)
Let T1, T2 ∈ T :

T1 ◦ T2 = {t1 ◦ t2 | t1 ∈ T1, t2 ∈ T2}
T1 (cid:101) T2 =

{t1 (cid:101) t2 | t1 ∈ T1, t2 ∈ T2}

(cid:91)

(cid:91)

T1 (cid:100) T2 = T1 ∪ T2 − (
(cid:26) if T (cid:54)= ∅,
if T = ∅,

˜T =

{t1 (cid:101) t2 | t1 ∈ T1, t2 ∈ T2 and t1 (cid:54)= t2})
˜T = (cid:101){˜s | s ∈ T }
˜T = Step

2. Notice that in [13] s-sets are called steps, and no notion of step as it will be deﬁned in this work occurs there.

15

Where:

• t1 ◦ t2 is deﬁned as follows:

(cid:104)s1, ..., sn, s(cid:48)

1, ..., s(cid:48)

m(cid:105).

if t1 = (cid:104)s1, ..., sn(cid:105) and t2 = (cid:104)s(cid:48)

1, ..., s(cid:48)

m(cid:105) then, t1 ◦ t2 =

• t1 (cid:101) t2 is deﬁned as follows: t1 (cid:101) t2 =






t1 if t2 ∈ start(t1)
t2 if t1 ∈ start(t2)
∅ otherwise

The function start associates to a given s-trace all its starting possible s-traces.

• ˜t is deﬁned as follows: ˜t = (cid:83)

1≤n≤dur(t) (cid:104)s1, ..., ˜sn(cid:105), where ˜s = Step − {s}3.

Intuitively, we want (cid:100) to yield the property: a ≡ a + a; b for event expressions, because the choice
states that we know at least a will be performed and after that it is can be anything (because the ﬁrst
choice does not specify anything after a). In order to establish this property we cannot just use a
union of the sets of s-traces representing a and a; b but have to do some ”cleaning up” by subtracting
superﬂuous parts.

The semantics of events are obtained by means of a function

: Evt −→ E such that:

(cid:74) (cid:75)

Deﬁnition 8 (Semantics of events)

(cid:75)

A : a
(cid:74)
(cid:75)
ξ1; ξ2
(cid:74)
ξ1 + ξ2
(cid:74)
ξ1&ξ2
(cid:74)
ξ
(cid:75)
(cid:74)
skip
(cid:75)
(cid:74)

(cid:75)

(cid:75)

= {s | SA ∈ s, a ∈ act(SA)}
=

ξ2
(cid:75)
(cid:74)
ξ2
(cid:74)
ξ2
(cid:74)

(cid:75)

(cid:75)

(cid:75)

(cid:75)

=

◦
(cid:100)

ξ1
(cid:74)
ξ1
(cid:74)
=
ξ1
(cid:74)
= ˜
ξ
(cid:75)
(cid:74)
= {skip}.

(cid:101)

(cid:75)

The basic clause stipulates that the meaning of an atomic event consists of the set of steps where
that action at least is performed by that speciﬁc group of agents.

On the basis of this evaluation for events, an evaluation of groups performing complex actions

is obtained:

Deﬁnition 9 (Semantics of collective actions)
Let A = A(cid:48) ∪ A(cid:48)(cid:48) then

(cid:75)

(cid:75)

=

=

◦
(cid:100)

A : α1; α2
(cid:74)
A : α1 + α2
(cid:74)
A : α1&α2
(cid:74)
A : α(cid:48)
(cid:74)

A(cid:48) : α1
(cid:74)
A(cid:48) : α1
(cid:74)
A(cid:48) : α1
(cid:74)
A : α(cid:48)
(cid:74)
Thus if we indicate that a group A performs an action α we explicitly do not differentiate who
performs what part of that action. If we want to be more speciﬁc we can indicate the speciﬁc group
performing a sub-action with that sub-action directly.It should be noted that we do not have by
deﬁnition that A : α1 ◦ A : α2 = A : α1 ◦ α2 (with ◦ being any of the operators connecting actions).

A(cid:48)(cid:48) : α2
(cid:75)
(cid:74)
A(cid:48)(cid:48) : α2
(cid:74)
A(cid:48)(cid:48) : α2
(cid:74)

(cid:75)
.
(cid:75)

=

=

(cid:101)

(cid:75)

(cid:75)

(cid:75)

(cid:75)

(cid:75)

(cid:75)

3. Negation of sequences constitutes a delicate matter. For a deeper discussion of this issue we refer to [12].

16

if Fred and the children drive to school they perform the whole action together, but Fred is

E.g.
doing the driving and the children doing the passive passenger actions:

F red : drive&{M arco, Claire} : sit (cid:54)≡ {F red, M arco, Claire} : (drive&sit)

To connect this interpretation of events to a possible world semantics a function R : E × W −→

W is deﬁned, which couples events with state-transitions.

Deﬁnition 10 (Function R)
R(T, w1) = {w2 | ∃t ∈ T s.t. w2 = R(t, w1)} where R on transitions is inductively deﬁned as
follows:

R(s1, w1) = r(s1, w1)

R(t1 ◦ t2, w1) = R(t2, R(t1, w1)).

and r : S × W −→ W, that is a function that, given a state, returns the following state reachable
through a given synchronicity set, and such that r({skip}, w) = w.

This concludes the complex semantics of actions and sequences of actions performed by indi-

viduals and groups. Now all ingredients are in place to evaluate formulas.

4.4 Evaluating formulas

The meaning of formulas φ in a world w, given the structure M , is deﬁned as usual. For space
reasons we report here only the dynamic clauses, the belief clauses and the DON E and DO unary
operators.

) = 1,
(cid:75)

Deﬁnition 11 (Semantics of assertions)
ξ1
In the following let dur(
(cid:74)
|= [ξ]φ iff ∀w2 ∈
ξ
R(w1), M, w2 |= φ
(cid:74)
(cid:75)
|= (cid:104)ξ(cid:105) φ iff ∃w2 ∈
R(w1), M, w2 |= φ
ξ
(cid:75)
(cid:74)
|= Cap(i, α) iff ∀a ∈ α : a ∈ Capability(i)
|= DON E(ξ1) iff ∃w2 ∈ W, w2 ≺ w1 ⇒ w1 ∈
|= DON E(ξ; ξ1) iff ∃w2 ∈ W, w2 ≺ w1 ⇒ M, w1 |= DON E(ξ1) and

M, w1
M, w1
M, w1
M, w1
M, w1

Rw2
(cid:75)

ξ1
(cid:74)

M, w2 |= DON E(ξ)

M, w1
M, w1

|= DO(ξ1) iff ∀w2 ∈ W, w1 ≺ w2 ⇒ w2 ∈
ξ
(cid:74)
|= DO(ξ1; ξ) iff ∀w2 ∈ W, w1 ≺ w2 ⇒ w2 ∈

M, w2 |= DO(ξ)

Rw1
(cid:75)
ξ
(cid:74)

Rw1 and
(cid:75)

M, w1
M, w1
M, w1
M, w1

|= Ba(φ) iff ∀w2 ∈ W, Ra(w1, w2) → M, w2 |= φ
|= EBA(φ) iff ∀a ∈ A, M, w1 |= Ba(φ)
|= CBA(φ) iff M, w1 |= EBA(φ) ∧∞
|= Goala(φ) iff ∀w2 ∈ W, Ga(w1, w2) → M, w2 |= φ

i=2 EBi

A(φ)

Informally, a sentence [ξ]φ ((cid:104)ξ(cid:105) φ) is true in w iff φ is true in every world (respectively in at least
one world) accessible through a performance of ξ. An agent i is capable of performing an action α

17

ξ
(cid:74)

if all the atomic actions that α is composed of are part of the capabilities of i. Sentences DON E(ξ)
are evaluated as true in a world w iff that world may be reached from wn performing ξ, and ξ is
actually performed in wn and all intermediate worlds wi are reachable from wn performing starting
of length n − i along the ≺ ordering. The semantics of DO(ξ) is very similar, but
sequences of
then forward directed. Note that if DO(ξ) is true it does not imply that this is the only thing that is
happening. It just means that ξ will be done for certain.
The last assertions are about beliefs, everyone believes and common beliefs. Everyone in a group
A believes φ if they all individually believe φ. There is a common belief in φ if they all believe
in φ and also believe that they all believe in φ etc. These are the common deﬁnitions of the belief
modalities (see e.g. [29]).

(cid:75)

4.5 Some additional constructs

In addition to the above deﬁnitions we use DO(a, b, α(A)) and DON E(a, b, α(A)) to denote that
a performs action b as part of the group A in order to perform α together. The deﬁnition of these
constructs is given as follows.

Deﬁnition 12 (Acting as part of a group)
Let a ∈ A and A(cid:48) = A
a and let b ∈ act(α) then

M, w |= DO(a, b, α(A)) iff M, w |= DO(a : b) ∧ DO(A : α)

M, w |= DON E(a, b, α(A)) iff M, w |= DON E(a : b) ∧ DON E(A : α)

Based on the above semantics we can also deﬁne a number of operators that are sometimes easy to
use as they give different ways to abstract from an action or indicate that an action is possible or
attempted. Sometimes we want to refer to the fact that an agent is not just capable, but also able in
the present state to perform an action α, to achieve a certain result φ, to attempt to achieve φ (Haφ)
or to see to it that (stit) φ (Eaφ). This is deﬁned as follows.

Deﬁnition 13 (Ability, attempt and stit)

M, w |= Gaα iff M, w |= Cap(a, α)∧ < a : α > T

M, w |= Gaφ iff ∃α M, w |= Cap(a, α) ∧ (cid:104)a : α(cid:105)φ

M, w |= Haφ iff ∃α M, w |= DO(a : α) ∧ (cid:104)a : α(cid:105)φ

M, w |= Eaφ iff ∃α M, w |= DO(a : α) ∧ [a : α]φ

These operators can be used to indicate that an actor does not only have the capability to perform
an action, but the situation is such that she actually could perform it. So, this is an easy way to
indicate that all preconditions of an action are fulﬁlled. The attempt operator is used in cases where
the outcome of an action is depending on other actors or the environment. In a social practice it can
be important that even though a result was not achieved it is known that it was attempted. Because
that means that the actors tried to keep to the social practice, but just were unable to do their part.
This can have different consequences than when actors just don’t do what they were expected or
ought to have done.

18

5. Formalizing Social Practices

Given the formal logic developed in the previous section we can now give a formal account of the
elements of social practices as we have sketched in section 3. We should point out that we actually
formalize the instances of social practices. For some elements there will be no difference between
the social practice and its instances (e.g.
the meanings are the same for all instances of a social
practice), but e.g. the start and end conditions refer to the conditions of a particular instance. In the
next section we will get back to this issue and indicate how we go from the description of instances
of social practices to the social practices themselves. Although the basics of the logic are all given
we will introduce some new constructs when needed, but always based on the same Kripke models
as already introduced. There are a lot of deﬁnitions needed to describe all elements in the logical
formalism. Unfortunately, the logical deﬁnitions have to be built up from basic building blocks
towards the more complex elements in the social practice and thus do not completely follow the
parts as used in the description of social practices used in ﬁgure 1. So, for ease of reference we have
linked the deﬁnitions from this section to ﬁgure 1 such that it becomes clear where the deﬁnitions
are needed for.

The ﬁrst thing that has to be established when performing a social practice is that the social
practice is “active”. I.e. the start condition was true and the end condition is not yet true. These
two elements are part of the expectations of a social practice rather than the context of it. In the
context of the social practice we specify things that can be assumed to be available during the social
practice, while the start and end conditions deﬁne the boundaries of the social practice. This will be
especially important when effects of an action depend on the context. E.g. the effect of raising your
hand can be different in an auction and in a classroom. Intuitively a context stands for a temporal
and spatially deﬁned interval within which an action takes place, such as ”the lunch break in the
dining room of the school”.

There is a vast amount of literature on reasoning in context. We will not tap on this literature,
because we mainly use contexts (in this paper) as reference structures needed to specialize inter-
action expectations and beliefs. Every social practice can also function as a context by using only
those parts that give temporal and spatial restrictions on the actions and agents.
We extend the language L with a set C = {c1, ..., cn} of special context constants (or names). We
use these constants to identify social practices as well. Thus, let SP be the set of social practice
identiﬁers then: SP ⊂ C. (Thus every social practice is a context, but not every context is a social
practice). We have the following deﬁnitions on contexts:

Deﬁnition 14 (Context)

such that connected(U, ≺), i.e. U is a connected graph using ≺ as links between the worlds.

≡ U ⊂ W

c
(cid:75)
(cid:74)

We explicitly do not have closedness of this set under combinations of contexts in any way! We
also do not assume that any combination of speciﬁcations of temporal and spatial intervals deﬁnes
a context.

Because ≺ deﬁnes a partial order on U we can deﬁne:

Deﬁnition 15 (Start and End of contexts)
Let U be the set of worlds associated with a context c then

start(U ) = {w|¬∃w(cid:48) ∈ U : w(cid:48) ≺ w}

19

end(U ) = {w|¬∃w(cid:48) ∈ U : w ≺ w(cid:48)}

With these deﬁnitions we can now deﬁne the start and end conditions of a social practice.

Deﬁnition 16 (Start Condition (SC) and End Condition (EC))
If spi is a social practice then

M, w |= SC(spi, φ) iff
∀w(cid:48) ∈ start(
spi
(cid:74)
M, w |= EC(spi, φ) iff
∀w(cid:48) ∈ end(
spi
(cid:74)

)M, w(cid:48) |= φ and ∀w(cid:48)(cid:48) (cid:54)∈ start(
spi
(cid:74)
(cid:75)
)M, w(cid:48) |= φ and ∀w(cid:48)(cid:48) (cid:54)∈ end(
spi
(cid:74)
(cid:75)

)M, w(cid:48) |= ¬φ
(cid:75)

)M, w(cid:48) |= ¬φ
(cid:75)

Intuitively this deﬁnition just states that the start condition SC should hold at the start (and only
at the start) of the social practice and the end condition EC at the end (and only at the end) of the
social practice. We also deﬁne that a social practice is active which is handy later on.

Deﬁnition 17 (Active Social Practices)

M, w |= active(sp) iff w ∈

sp
(cid:74)

(cid:75)

Let Asp be the set of actors in sp then we have the following axiom

M, w |= active(sp) → CBAsp(active(sp))

I.e. when a social practice is active the actors involved in it believe that it is active. The set Asp ⊂
Agt is deﬁned for each context as the set of actors that is involved. Not necessarily every actor
needs to perform an action. Some actors might just be observing or receiving messages.

In general it can be the case that more than one context is active when an actor performs an
action. This is not always a problem, but especially for concepts like expectations we want to have a
unique context to narrow down (disambiguate) which expectations are relevant. Therefore we also
deﬁne a function Salient(a : γ, ci).

Deﬁnition 18 (Salient)

ci
(cid:74)

cj
(cid:74)

and

cj
(cid:74)

⊂

ci
(cid:74)

M, w |= Salient(a : γ, ci) iff w ∈

and ¬∃cj : w ∈

(cid:75)
which states that the most salient context that is active for actor a when performing γ is the smallest
(most speciﬁc) context in which it is performed.

(cid:75)

(cid:75)

(cid:75)

Before deﬁning the action related elements of the social practice we ﬁrst will extend the lan-
guage with a possibility to talk about roles and actors playing roles. We follow [18] and extend the
language L with play(a, r, c) to indicate that actor a enacts role r in context c. E.g. Fred can play
the role of driver when taking he children to school. Fred is still also playing the role of father in
the larger context of the family life. So, an actor can play several roles at the same time and a role
can be played by several actors. E.g. there are several children that play the role of pasenger in the
car. We can use play(a, r) when we refer to a playing the role r from the salient context c, which
does not have to be mentioned.
The model M is also extended with a relation rea(a, r, w) that relates the actors with the roles they
play in a certain state w. The semantics of the the construct are given as follows.

20

Deﬁnition 19 (Role playing actors)
We extend the model M with a set of role names for each context c: RRc and a relation rea that
connects actors to roles in a world, with the constraint that the relation can only exist if the world is
part of the context for which the role is deﬁned.

M, w |= play(a, r, c) iff r ∈ RRc ∧ w ∈

∧ rea(a, r, w)

c
(cid:75)
(cid:74)

Having roles deﬁned makes it possible to talk about the set of agents playing a role. Therefore we
can now use the following abreviation. Let r ∈ RRc then

r : γ ≡ ∃A ⊂ {a|play(a, r, c)} and A : γ

So, we can say that a role performs an action, meaning that some subset of the actors playing that
role perform the action. Thus, in all places where we use abstract actions, we can now also have that
a role is performing such an abstract action. It allows for a step between a very speciﬁc group of
actors performing an action and any group of actors performing that action. This is something that
appears very often in social practices, because many actions are supposed to be taken by some actor
playing a particular role. E.g. the parent is supposed to drive the car with the children to school. It
does not matter which parent it is, but it should be one of them and not a child.

Based on all the previous deﬁnitions we now start to deﬁne the purpose of a social practice and
plan patterns of a social practice. We start with the purpose of an action (and a social practice). The
intuitive meaning of the purpose of an action is the reason for which the action is performed in the
social practice. It is part of the intended and actual result of the action and thus indicates that the
action is performed with the goal of achieving that part of the result. E.g. when a lecturer raises her
hand the students stop talking, which is the purpose of raising her hand. However, after the action
her hand is also raised, which was intended, but not the purpose of the action.

Deﬁnition 20 (Purpose of a basic action)
The purpose of a basic action α performed by a ∈ Ac in a context c, where Ac is the set of all actors
present in c is deﬁned as

M, w |= purpose(a : α, c, φ) iff
M, w |= CBAc((Salient(a : α, c) ∧ DO(a : α)) → Goala(φ) ∧ Ba([a : α]φ))

Note that a needs to perform α, have a belief that α leads to the achievement of φ and also has this
φ as its goal. Thus we take the meaning of a purposeful action to be that the consequence of that
action was intended. In top of all that, a does this particular action in a context, in the presence of
other actors. This means that the fact that a does action α is not just an individual thing anymore,
but is a common belief among all the actors in that context. This actually says that all actors in
a social practice know what is going on and understand why actions are performed by the actors
involved. E.g. when Fred drives the car (with the children) to school, he does it with the purpose of
getting the children to the school. And both Fred and the children believe that this is his goal in this
practice.

If we talk about the general purpose of an action α in context c we mean that whenever any
actor performs that action we infer that it was done to achieve that purpose. And the same if α is an
abstract action βφ or α=+i=1...nαi

21

Deﬁnition 21 (Purpose of general actions)

M, w |= purpose(α, c, φ) iff
∀a ∈ Ac : M, w |= CBAc((Salient(a : α, c) ∧ DO(a : α)) → Goala(φ) ∧ Ba([a : α]φ))

and if α=βφ=∪i=1...nαi then purpose(α, c, φ) ≡ ∀αi : purpose(αi, c, φ)

We have similar deﬁnitions for the purpose of complex actions.

Deﬁnition 22 (Purpose of complex actions)
Let γ ∈ ActExp then

M, w |= purpose(a, γ, c, φ) iff
∀αi ∈ action(γ) : M, w |= CBAc(Salient(a : γ, c) ∧ DO(a : αi) →

Goala(φ) ∧ Ba([a : γ]φ))

Note that this deﬁnition only indicates that the whole sequence γ leads to φ and does not restrict
exactly which actions are part of that sequence. E.g. The children should be at school before 9am.
It does not matter which parent takes them, which car they take, or if they go by bike. However,
every action is believed to be done because a has the goal to achieve φ. In this way we represent the
intuition that each action of the complex action γ contributes to the goal φ.
The idea of the above purposes is close to the notion of landmarks. The use of landmarks in the
speciﬁcation of agent plans and interactions has been proposed by [27, 17]. Formally, landmarks are
conjunctions of logical expressions that are true in a state, representing families of protocols. The
level of landmark detail determines the degree of actors freedom. In our context we use purposes
instead of landmark, because the state is not just a predetermined state that has to be achieved, but
it also deﬁnes the reason for the interaction and thus drives the commitments, planning, etc, of the
participating actors.
We can further generalize the deﬁnition of purpose ﬁrst by allowing the different actions in γ to be
done by different actors aj from a set of actors Ac. And we can also abstract altogether from the
agency and give the purpose of the complex action γ. E.g. checking the minutes of the previous
meeting at the start of a formal meeting is done for the purpose of creating common ground and
agreement about what happened in last meeting.

Deﬁnition 23 (Purpose of group and role actions)
Let act(γ) = {α1; ...; αn} and Ac = {a1, ..., am} and r ∈ RRc then

M, w |= purpose(Ac, γ, c, φ) iff
∀αi∃aj; M, w |= CBAc(Salient(Ac : γ, c) ∧ DO(aj : αi) → Goalaj (φ) ∧ Baj ([γ]φ))

M, w |= purpose(r, γ, c, φ) iff
∀αi∃aj : M, w |= play(aj, r, c)∧
CBAc(Salient(Ac : γ, c) ∧ DO(aj : αi) → Goalaj (φ) ∧ Baj ([γ]φ)

The purpose of an abstract sequence of actions δ=∪i=1...nβi:

22

M, w |= purpose(δ, c, φ) iff ∀βiM, w |= purpose(βi, c, φ)

Using all of the deﬁnitions above we can now give the deﬁnition of the purpose of a social

practice.

Deﬁnition 24 (Purpose of a Social Practice)
Let c ∈ SP and let ∆ = {δ : SCc → [δ]ECc} then

M, w |= purpose(c, φ) iff
∀δ ∈ ∆ : M, w |= purpose(δ, c, φ)

In other words the purpose of a social practice is φ if for all the action sequences from the start to
an end of the social practice the purpose of that sequence in the context of the social practice is φ.

Using the above deﬁnitions we can now ﬁnally give a deﬁnition of plan patterns in a social

practice sp.

Deﬁnition 25 (Plan Patterns Language)
A Plan Pattern of a social practice is an element of the set PP, which is the smallest set closed under

γφ ∈ P P
γ1φ1, γ2φ2 ∈ P P ⇒ γ1φ1 + γ2φ2 ∈ P P
γ1φ1, γ2φ2 ∈ P P ⇒ γ1φ1&γ2φ2 ∈ P P
γ1φ1, γ2φ2 ∈ P P ⇒ γ1φ1; γ2φ2 ∈ P P

By deﬁning the set of PP separately from abstract actions, and enforcing them to be of the speciﬁc
format γφ we can enforce that all plan patterns have the format of an abstract action γ that achieves
a particular goal φ. This means that every part of a plan pattern has its own ”objective” or landmark
that it aims to achieve. This objective is not a coindicidental formula that happens to be true after
performing the action, but is the reason for performing the action. Let γφ, γ1φ1 ∈ P P then we use
γ1φ1 ∈ γφ if γ1φ1 occurs in γφ. We use st(γφ) to refer to the ﬁrst (complex) pattern of γφ. So,
if γφ=γ1φ1; γ2φ2 then st(γφ) = γ1φ1. If γφ is constructed using one of the other constructs then
st(γφ) = γφ.
This leads us to the following deﬁnition of a plan pattern of a social practice.

Deﬁnition 26 (Plan Patterns of Social Practices)
Let sp ∈ SP and A(cid:48), A(cid:48)(cid:48) ⊂ Asp and let ∆sp = {δ : SCsp → [δ]ECsp}

M, w |= planpattern(γφ, sp) iff
γφ ∈ ∆sp and
purpose(sp, φ) and
∀γiφi ∈ γφ : purpose(γiφi, sp, φi) and
SC(sp, φ) → strategy(φ, DO(Asp : st(γφ), sp) and
∀γ1φ1; γ2φ2 ∈ γφ :
strategy(DON E(A(cid:48) : γ1φ1), DO(A(cid:48)(cid:48) : γ2φ2), sp)

23

Figure 2: Plan Pattern for taking kids to school

This states that the overall plan pattern must have the same purpose as the social practice and that
any sub patterns of the main plan pattern of a social practice are abstract (sequences of) actions for
which the purpose in the context of the social practice is to reach the formula φ associated with that
abstract action. Moreover, the plan pattern starts automatically when the start condition of the social
practice is true and all actors involved have a common belief that the social practice is active. And
if the plan pattern speciﬁes two abstract actions in a sequence there is an expectation that when the
ﬁrst part is done (by a subset B of the agents) the second abstract action will be done. (See further
down in this section for more explanation on the strategy relation). The following ﬁgure shows a
graphical representation of a plan pattern for taking the children to school. This plan pattern can be
describe formally by ﬁrst describing the pattern as a combination of the basic complex actions that
constitute this pattern.

γφ = γ1φ1; ((γ2φ2; γ3φ3; γ4φ4) + γ5φ5)

where:

γ1 = get-kids & get-bags and φ1 = kids-with-bags-ready
γ2 = everyone-gets-in-car;drive-car and φ2 = car-at-school
γ3 = park-car and φ3 = car-at-safe-place
γ4 = kids-out-car;kids-go-school and φ4 = kids-at-school
γ5 = kids-go-neighbour;neighbour-drives-to-school and φ4 = kids-at-school
φ = kids-are-safe ∧ kids-at-school ∧ time before 9:00

Notice that each of the parts itself usually is again a complex action involving many actions of
different actors. However, within these parts (or phases) we do not have to have a speciﬁc purpose
for each action anymore and thus there is more freedom on how to ﬁll it in. Notice as well that there
is no prescribed level of detail. The more detailed the plan pattern parts are made, the more ﬁxed
becomes the interaction. The bigger the phases are the more freedom for the actors to ﬁll in these
phases as they like (ﬁts their own goals).

Many elements of the social practice can be seen as expressing a kind of expectation. As stated
before expectations with social practices come in different forms. The plan patterns can be seen as
expectations because they indicate the general patterns of behavior that are expected. However, we
also have more speciﬁc expectations. Although not all parts of a social practice are ﬁxed there are
some points where speciﬁc types of actions are expected. E.g. if in a greeting practice one person
extends his hand it is expected that the other person shakes the hand. We use the ADICO grammar
proposed by Ostrom to specify rules, norms, and strategies [6]. ADICO statements are formed using
the following ﬁve components: Attribute (or Acting entity), Deontic, aIm (or Intention), Condition

24

, and Or else (or sanction). In ADICO Strategies are statements including only the acting entity,
intention, and condition (AIC); Norms include the acting entity, deontic, intention, and condition
(ADIC); and Rules include all 5 components (ADICO). The norms and startegies as described
through the ADICO grammar can nicely be formalized using the logic that we already presented.
We start with deﬁning strategies.

Deﬁnition 27 (Strategies)
Let γ ∈ ActExp and let B ⊂ Asp be a set of actors (possibly one)

M, w |= strategy(φ, DO(B : γ), sp) iff
M, w |= CBAsp(CBB(φ)) ∧ CBAsp(active(sp)) → CBAsp(DO(B : γ))

Thus if all actors (involved in the social practice sp) believe that the social practice is active and
B believes the condition φ then they all believe that all actors in B will perform their part of γ
next. When the condition φ is of the form DO(C : γ1) or DON E(C : γ1) the strategy indicates a
synchronization or sequencing of actions repsectively. If φ is representing some state to be true it is
expected that B takes the initiative to perform some action when a certain state is reached.
Note that the above deﬁnition entails that if actor a ∈ B then she believes that if she does her own
part of γ the rest of B will do their part of γ.
Instead of the DO(B : γ) it is also possible to use the weaker HB(DON E(B : γ)) which means
that B is attempting to perform γ, but the outcome is not guaranteed. The strategies in a social
practice are mostly used to deﬁne small parts of the interaction that always are done in the same
way and thus have a kind of ﬁxed protocol. E.g if a child in class raises her hand then the teacher
will respond and ask what she wants. This can happen at any time and thus is not bound by the plan
pattern, but it can ﬁll in part of the plan pattern, of course. As we have seen in the deﬁnition of plan
patterns, the strategies are also used to make sure the social practice moves from one phase of the
plan pattern to the next (without having to explicitly coordinate this). E.g. when the children and
the parent are in the car, they start driving to school.

As stated before norms are also a kind of expectations. However, instead of a belief that an
action will be taken they lead to a normative statement that an action should be taken. Based on the
dynamic logic we can deﬁne obligations, prohibitions and permissions very easily as follows.

Deﬁnition 28 (Deontic operators)

O(A : γ) = [A : γ]V

F (A : γ) = [A : γ]V

P (A : γ) = ¬[A : γ]V

In the context of social practices, the norms are connected to the roles of the social practice.
Thus any actor that enacts a role in the social practice should follow the norms speciﬁed for that
role. So, the deﬁnition of norms following the ADICO framework is as follows.

Deﬁnition 29 (Norms)

25

M, w |= O(r, φ, γ, ρ) iff
M, w |= ∀a : play(a, r) ∧ Ba(φ) → (O(a : γ) ∧ [a : γ]O(a : ρ)
M, w |= F (r, φ, γ, ρ) iff
M, w |= ∀a : play(a, r) ∧ Ba(φ) → F (a : γ) ∧ [a : γ]O(a : ρ)
M, w |= P (r, φ, γ, ρ) iff M, w |= ∀a : play(a, r) ∧ Ba(φ) → P (a : γ)

Looking at the deﬁnition of the norms more closely reveals that they are still somewhat simple. The
obligations have to be fulﬁlled the moment they become active. In normal life when an obligation
becomes active one has some time to react and fulﬁll it. In early work [14] we have already shown
how to model some temporal aspects into the norms while using the dynamic logic as underlying
formalism. Of course, it is easier to express temporal properties, like deadlines, using temporal logic
as basis [11, 15]. We leave the current version as a placeholder for more complex formalizations
that could be inserted when necessary.

Besides the above elements that are used in several parts of the formal representation of social
practices we also have some more ontological elements that are used to describe meanings and
resources. First of all we extend the language L with the counts-as relation countsas(c, r : α1, α2)
to mean that if any actor is performing action α1 in context c in the role of r this is seen as performing
action α2. E.g. the lecturer raising her hand counts as starting the lecture. The semantics of this
construct is given as a kind of ”is-a” relation within context. This is a kind of simple form of the
formal deﬁnition of this concept as given in [22]. In this work also relations between contexts are
taken into account as well as combinations of concepts. Within the context of social practices the
”is-a” feature that connects the physical actions with social actions and their effects is the only
thing we need. We still use the ”counts-as” term in order to keep further connections with the more
elaborate work as from [22] possible for future work.

Deﬁnition 30 (Counts-as)

M, w |= countsas(c, r : α1, α2) iff
c
(cid:75)
(cid:74)

∀w(cid:48) ∈
M, w(cid:48) |= [α2]φ then M, w(cid:48) |= [a : α1]φ ∧ CBAc([a : α1]φ)

: ∀a : rea(a, r, w(cid:48))

Given this deﬁnition we can substitute α1 for α2 wherever it is needed. E.g. if there is an obligation
on the lecturer to start the class, then Ann (the lecturer) can fulﬁll the obligation by raising her hand.
The deﬁnition does not state that the two actions are equal! It can be (and usually is the case) that
α1 has more effects than α2. E.g. by raising her hand Ann starts the class, but now also has her
hand up in the air (which is not an effect of starting the class). The last part of the deﬁnition of the
counts-as ensures that it also is common belief that α1 performed by someone playing role r in the
context c has φ as effect. This is especially important if the effect is a non-tangible or social effect
which is not directly observable. This part makes sure that all actors involved have a common belief
on the social effect of actions in a context.

The second concept that we need is the fact that an action is promoting or demoting a certain
value. E.g. students talking during a lecture demotes the value of respect. This concept is used
to indicate some abstract social effects of actions. Again this relation is context dependent. We
extend the language L with a set of special constants V alue = {v1, ...vn} that denote values and
promotes(sp, r : α, vi) and demotes(sp, r : α, vi). It indicates that if an actor plays the role r
and performs the action α she promotes or demotes the value v. Again, we will give a very simple

26

semantics for this construct based on a more elaborate characterization of the promotes relation
given in [40, 9].

Deﬁnition 31 (Promotes and Demotes Value)
We extend the model M with a set V al = {<1, ..., <n} of orderings where each <i is a partial
order on W indicating the preference of the states according to that value.

w ∈

M, w |= promotes(sp, r : α, vi) iff
sp
(cid:74)
M, w |= demotes(sp, r : α, vi) iff
sp
(cid:74)

w ∈

(cid:75)

(cid:75)

and ∀a : rea(a, r, w) then ∀w(cid:48) ∈

and ∀a : rea(a, r, w) then ∀w(cid:48) ∈

a : α
(cid:74)

a : α
(cid:74)

R <i (w, w(cid:48))
(cid:75)
R <i (w(cid:48), w)
(cid:75)

The deﬁnition states that an action α performed by an actor playing role r promotes (resp. demotes)
a value vi if the action α leads from state w to a state w(cid:48) that is better (resp. worse) according to
value vi.
So values indicate a kind of general preference on the worlds according to the perspective of that
value. The promotes predicate indicates the ”value” of actions on the social level and are used to
connect the social practice to a wider social context in which certain type of behavior is valued
and other behavior is to be avoided. E.g. we are environment conscious and promote sustainable
behavior. A social practice taking the children to school by bike will promote this value, while
taking them by car demotes this value. However, using the car can promote safety , which also
might be important.

Finally we also introduce the concept of affordances here. Affordances are used to describe the
type of actions that are normally expected to be performed with an object and can also be used to
describe types of objects in an abstract way. E.g. an object that affords to sit (which can be a chair
or a bank or ...). Again we extend the language L with a set of special constants Obj = {o1, ..., om}
denoting the objects and af f ords(O, α, c) which is the affordance relation stating that the set of
objects O ⊂ Obj affords action α in context c. Here we take it that all objects of the set O together
afford the action. The set can consist of zero, one or more elements. If the set is empty, the action
does not require any object to be performed. In order to indicate that objects are in the place where
the social practice takes place we use the predicate available(O, c). We will not give semantics for
these predicates as they should be tied to a theory on geometrical and physical properties of objects,
which is not the focus of this paper. Having all these parts in place we can tie affordances, objects
and capabilities to the possibility of an action being performed in a certain situation.

Deﬁnition 32 (Affordances)
Let O = {o1, ..., om} and O ⊂ Oc then

M, w |= af f ords(O, α, c) ∧ available(O, c) ∧ play(a, r, c) → Gaα

This states that if the set of objects O that affords an action α is available and the actor a is playing
the role r in the same context then the action can be performed by the agent playing the role. It does
not guarantee any postcondition of the action to hold. But for any social practice we can specify the
following expectation:

M, w |= CBAc(af f ords(O, α, c) ∧ available(O, c) ∧ play(a, r, c)) → CBAc(Gaφ)

which states that there is a common belief that if all the preconditions hold then it is common belief
that the action will lead to some predetermined effects φ. This speciﬁes in a very cautious way the
postconditions of actions, given the preconditions are fulﬁlled.

27

6. Representing and Using Social Practices

In the previous sections we have described all ingredients for representing instances of social prac-
tices, which allows us to now formalize all elements of table 1 completely. This leads to table 3.
Formally an instance of a social practice can now be deﬁned as as a tuple of all the elements from

Figure 3: Social Practice of taking kids to school

the table.

We now come back to the fact that this actually describes an instance of a social practice. The
fact that we have deﬁned the logic based on a kripke framework ﬁtting dynamic logic, means that we
always talk about concrete actions being performed and sequences of actions are between concrete
situations that are linked to a speciﬁc world. Using our example, we talk about a speciﬁc instance of
taking the children to school, which is on a speciﬁc day, involves speciﬁc people and a very speciﬁc
school. What we now want to do is to generalize over all these instances of a social practice to get
a more general (usable) social practice of taking children to school. We do this by deﬁning a social
practice in terms of its instances.

Deﬁnition 33 (Social Practice)
Let

spi = (Rspi, Aspi, Ospi, Afspi, P lspi, Pspi, P vspi, Cospi, P Pspi,

Nspi, Sspi, SCspi, ECspi, Acspi, Respi)

28

then we say sp is a social practice based on spi written as SocialP ractice(sp, sp1, ..., spn) iff

1. ∀i, j = 1...n : Rspi = Rspj = Rsp and

∃ai ∈ Aspi, r ∈ Rspi : play(ai, r, spi) then ∃aj ∈ Aspj : play(aj, r, spj)

2. ∀i, j = 1...n : af f ords(Ok, αl, spi) then

∃Oq : af f ords(Oq, αl, spj) and ∃O : af f ords(O, αl, sp)

3. Psp = (cid:83)
4. P vsp = (cid:83)
5. Cosp = (cid:83)

i = 1...nPspi and (cid:84)
i = 1...nP vspi and (cid:84)
i = 1...nCospi and (cid:84)

i = 1...nPspi (cid:54)= ∅

i = 1...nPspi (cid:54)= ∅

i = 1...nPspi (cid:54)= ∅

6. ∀i = 1...n : P Pspi = P Psp

7. ∀i = 1...n : Nspi = Nsp

8. ∀i = 1...n : Sspi = Ssp
9. SCsp = (cid:87)
10. ECsp = (cid:87)
11. Acsp = (cid:83)

i = 1...nAcspi

i = 1...nSCspi

i = 1...nECspi

12. ∀i = 1...n : Respi = Resp

The deﬁnition states that the social practice instances should be the same in many respects. For
the context we only require that in all practice instances we have the same roles and that if there
are actors playing a role there should be actor playing that same role in all other practice instances.
This basically states that if a role is relevant in one instance (because an actor plays it) it should
be relevant in all other instances. So, we cannot fulﬁll the requirement of having the set of roles
being the same in all instances by just taking all possible roles for all instances. The affordances
requirement makes sure that, even if different objects are present in different instances, the same set
of actions is afforded by the objects in all instances.
The elements from the meaning block can differ, but need to have a common core. The reason not
to have them all equal is that in speciﬁc contexts there can be additional values promoted or actions
used for social effects.
The plan patterns, norms and strategies should be the same for all instances. They are already ab-
stracting away from speciﬁc actions. So, different instances might have different ways of following
the plan pattern, but they all follow the same pattern.
The start conditions and end conditions were made very speciﬁc to ﬁt each instance. Therefore
they have to be generalized (by taking the disjunctions of all of them) to generate the start and end
conditions of the general social practice. The same holds for the actions that can be expected. these
can be very speciﬁc for different instances. The disjunction allows to generalize over the speciﬁcs
of each instance.
Finally, the requirements on competences should be such that they are the same for all instances.
These are assumptions that are used by the actors participating in the social practice and should thus
not differ between instances.

29

6.1 Properties and Use of Social Practices

Given the large amount of deﬁnitions on social practice elements we can now also deﬁne a number
of properties of social practices. We start with three properties of the social practices that are not
necessarily guaranteed by the formalism, but are required for the social practice to be useful. In the
following we use ∆sp = {δ : δ ∈ P Psp ∧ SCsp → [δ]ECsp}.

Deﬁnition 34 (Feasible Social Practice)
A social practice sp is feasible (feasible(sp)) iff:

∃γφ ∈ ∆sp and∀αi ∈ γφ : ∃a ∈ Asp : Gaαi

This states that there is at least one sequence of actions from start to end conditions such that it
follows the plan pattern of the social practice and every action can be performed by some actor
(notice we don’t state that cap(a, αi) but the stronger Ga(αi)). This means that there is a way to
execute the social practice. This is the minimum that we would like. But it would also be nice if one
could execute the social practice without violating any of the norms connected to the social practice.

Deﬁnition 35 (Normative SP)
A social practice sp is normative (normative(sp)) iff:

f easible(sp)∧
∃γφ ∈ ∆sp and∀αi ∈ γφ : (¬(F (r, φi, αi, ρi) ∧ φi ∧ DO(r : αi))∧
O(r, φi, αi, ρi) ∧ φi → DO(r : αi)

This just states that there is a way to execute the social practice without violating any of the norms of
the social practice whenever the norms are active. Notice that actions might be obliged or prohibited
during the social practice, but have no inﬂuence if their activation condition is not true at that
moment.
The next deﬁnition states that we have completely deﬁned the relation between the physical and
In order to deﬁne this we have to split our states into a social and
social parts of the actions.
physical part w =< wp, ws > (or brute facts and social facts as Searle calls them [36]).We call a
formula φ social (social(φ)) iff

M, < wp, ws >|= φ ≡ M, ws |= φ

The social formulas decribe the social world, which is only indirect observable. This means that
we only know the formula is true because we have seen action that has this formula as social effect.
Completeness of a social practice means that all social formulas that are part of a purpose in the plan
pattern of the social practice are either a direct effect of an action or a (social) effect of an action
connected to an action with a count-as relation.

Deﬁnition 36 (Complete SP)
A social practice sp is complete (complete(sp)) iff:

f easible(sp)∧
If ∃γφ ∈ ∆sp and∀φi ∈ γφ : social(φi) then
∃γi ∈ γφ : [γi]φi or ∃αi ∈ γφ : countsas(sp, r : αi, αj, c) and[αj]φi

30

Figure 4: parallel social and physical effects

If a social practice is complete then all the participants in the social practice have a common belief
of both the physical as well as social state during the execution of the social practice. The physical
state is guaranteed through the common belief on the plan pattern, while the social state can be
derived from the combination of actions and the social effects of the social actions connected to
them through the counts-as relation as shown in ﬁgure 4

In the remainder of this section, we will brieﬂy describe how an actor can use social practices

to deliberate about its context and plan its actions. It should be emphasized that:

1. A social practice is not a very complex but complete speciﬁcation of an interaction. It is a
rich source of information of elements that can be used by actors to plan their interactions
with some guaranteed outcomes if they follow the plan patterns, the strategies and the norms.

2. We make no assumptions about the actors using the social practices. In practice we assume
they are actors that use goals and plans to deliberate about their (inter)actions. However, this
does not have to be true. Thus the speciﬁcation is not just an abstraction of an interaction
protocol, but rather a speciﬁcation of interactions with some holes (to be ﬁlled by the agents
by choosing the ﬁtting speciﬁc actions).

In [30] we have shown how a standard Multi-Agent epistemic planner can be used to execute social
practices and the effects the use of the social practice has on the efﬁciency of the planning and the
robustness of the plan. Here we just walk through the simple social practice example of taking the
children to school given in 1.

Let’s take the perspective of Fred (the father of the children). Assuming this actor to follow a
BDI-like architecture, the goal “get the children to school” would be part of the Intentions of Fred.
We further assume that both the social practice described in table 1 and the prerequisite knowledge
are part of Fred’s beliefs (and of his children). Fred also has the capability to drive a car leading
Fred to belief that he could fulﬁll the role of driver. By using a social practice-based deliberation
process, once Fred beliefs to be himself in the context of the social practice of taking the children
to school (i.e. if it is 8:30 or breakfast is ﬁnished), he can form a plan for taking the children to
school, based on the expectations, meaning and activities the social practice describes for actors
of role ‘parent’. This plan is very simple, Fred goes to the car, let’s the children in the car, drives
to school, parks in the designated parking and lets the children out. While Fred is driving he can
interact with the children using strategies and norms. He can choose to enquire about their plans
for the day at school or talk about a soccer match or answer questions of the children. Based on the
plan pattern of the social practice Fred can conclude that by fulﬁlling its part, the desired result will

31

be achieved. Very important in this respect is that he can assume the children will e.g. take their
bags. Thus Fred does not have to plan for all possible actions or reactions of the children, but can
assume a standard behaviour. However, the social practice also indicates that after the ﬁrst part, the
children and the bags are ready. Thus Fred can check if the bags are there as well. Thus the social
practice gives focus of attention and gives times at which to check for speciﬁc states to hold. The
only thing he still needs to plan is the exact route from house to school, which might be standard
and directly available or needs to be planned based on some construction work, expected trafﬁc,
etc. Now, suppose that Fred does his part and gets in the car, but the car does not start. The social
practice now gives some handles on what can be done as well. First of all, the car is an object that
affords driving the kids to school. Is there another object with the same affordance? E.g. the car
from Madeleine (Fred’s partner) might also be available. Thus Fred can simply replan and take the
car of Madeleine.
Social effects are not visible but can be assumed given the social practice. E.g. leaving in time will
result in being in time at school and thus showing respect to the teacher. Thus following the social
practice successfully also guarantees some social effects, even though these might not be observed
directly.

7. Discussion and Conclusions

In this paper we gave a formalization of social practices that aims to support actors planning social
interactions. We have brieﬂy shown that feasible social practices can simplify the amount of actions
that have to be planned by an actor and that it can make assumptions about interactions with other
actors in the social practice without explicitly having to coordinate.

From the paper it has become obvious that social practices are quite complex. They contain
many elements that are also interwoven. Would it not be simpler to just use a collection of proto-
cols to regulate the interaction? In some applications this might certainly be true. For interactions
between agents in Multi-Agent Systems that are designed for a speciﬁc purpose and operate in a
stable environment one does not need a sophisticated notion such as social practices. Note that a
social practice can collapse into a ﬁxed protocol when the plan pattern describes all speciﬁc actions
and their intended effects. So, a social practice can be designed to give more or less ﬂexibility.
Social practices become interesting when software agents have to interact in dynamic environments
where standard interactions do not always work or when agents interact with humans. The social
practices have a level of abstraction from the actual actions to be taken that gives freedom to react to
the current situation without crashing the interaction protocol. Due to all the additional information
about the context, alternatives can be found, while the expectations give guidance to which alterna-
tives are preferable. Finally, when interacting with humans it pays off to follow the social practice
that the human is used to, because humans use social practices most of the time. Thus one can
easily make many assumptions on how the human will behave without having to deliberate about
them explicitly.
Another important aspect is the automatic social effects of a social practice. It might be possible
to fulﬁll the purpose of a social practice in different ways as well, but following the social practice
guarantees certain social effects that the actor does not have to deliberate or plan separately. This
becomes very important when interacting with humans, especially if the interaction is a long term
one.
We have shown in some very preliminary work how all these aspects can actually be used in im-

32

plemented systems. In [2] we have shown how social practices can be used to structure natural
dialogues.
In [10] we have shown how social practices can add value to interactions for social
robots.

As we already indicated in the introduction social practices are social constructs that emerge
from repeated interactions between people. In some way this feature is replicated in our formalism
through the fact that a social practice is associated to the tuple of all its instances. However, where
we had to indicate all kinds of constraints on how a social practice relates to its instances, in social
practices in human society these constraints are fulﬁlled by nature of how the social practices them-
selves emerge from the repeated interactions. The same holds for the properties of social practices.
Because we constructed the social practice structure we have to impose a property like ”feasibility”.
In human practice the social practice emerges from the instances. Each instance is by deﬁnition
feasible and thus the abstract social practice by nature is feasible. This type of property is not easily
represented using a formal logic. Similarly, the way a social practice is performed will not be a ran-
dom choice between all allowed action sequences. The more successfull ones will be repeated most.
This would lead to a more probabilistic representation of the structure based on experiences. Again
this aspect has not yet been explored but could be done by extending the logic with a probabilistic
component. However, one might also take the formalized social practice structure as a given basic
notion and use a probabilistic formalism to model this aspect of adaptation to the circumstances
separately.

An reservation against using social practices for AI systems is that they are very complex and
therefore are hard to obtain for real systems. Although we did not specify a methodology for
obtaining social practices for AI systems yet, in our experience it is actually relatively simple to
sollicit them from the intended users of the system. People are used to social practices and can
easily (and precisely) describe their components when asked for them. In top of that one can also
observe them when they are enacted and easily infer parts from the paper trails when they are
performed in formal organizations. Once there are a number of generic social practices available
the AI systems can also learn new social practices based on existing ones. Some preliminary work
on this has been set up, but a generally usable tool is part of future work.

Another important area for future work is the development of learning mechanisms that enable
efﬁcient matching of sensing information and beliefs to the components of a social practice descrip-
tion. E.g. when we enter a shop we assume there will be a sales person around. Thus we start
looking for a person that might fulﬁll that role. If we give a presentation in a room we start looking
for a projector and a cable to connect the laptop. In this way, the fact that we assume we are in a
social practice can drive our sensing and perception to ﬁnd objects and persons or facts that ﬁll in the
various elements of that social practice. Especially for social robots that act in a physical, dynamic
and open environment this focus of attention supports their coping with complex situations.

We ﬁnish this paper by restating that the main goal was to provide an unambiguous and precise
account of the concept of social practices for the purpose of using it in social applications of AI
systems. We can conclude that we have now a solid basis for the implementation of social practices
in many different application areas.

References

[1] M. Argyle. Social Interactions. Transaction Publishers, USA, 2009.

33

[2] Agnese Augello, Manuel Gentile, and Frank Dignum. Social practices for social driven con-
versations in serious games. In Alessandro De Gloria and Remco Veltkamp, editors, GALA
2015, pages 100–110. Springer International Publishing, 2016.

[3] P. (trans. R. Nice) Bourdieu. Outline of a theory of practice. Cambridge University Press,

1972.

[4] Paolo Bresciani, Anna Perini, Paolo Giorgini, Fausto Giunchiglia, and John Mylopoulos. Tro-
pos: An agent-oriented software development methodology. Autonomous Agents and Multi-
Agent Systems, 8(3):203–236, 2004.

[5] A. Colvin and W. Boswell. The problem of action and interest alignment: Beyond job re-
quirements and incentive compensation. Human Resource Management Review, 17:38–51,
2007.

[6] Sue ES Crawford and Elinor Ostrom. A grammar of institutions. American Political Science

Review, 89(03):582–600, 1995.

[7] M. Dastani. Modular rule-based programming in 2apl. In Adrian Giurca, Dragan Gasevic,
and Kuldar Taveter, editors, Handbook of Research on Emerging Rule-Based Languages and
Technologies: Open Solutions and Approaches, pages 25–49. IGI Global, 2009.

[8] Mehdi Dastani. 2apl: a practical agent programming language. Autonomous agents and multi-

agent systems, 16(3):214–248, 2008.

[9] F. Dignum. Rules of Social Nature: Be Real, Be Social. Springer, 2019.

[10] F. Dignum, A. Clodic, V. Dignum, A. Augello, M. Gentile, J. Vazquez-Salceda, and R. Alami.
On the pertinence of social practices for social robotics. In Proceedings of International Con-
ference on Robo Philosophy. IOS Press, 2018.

[11] F. Dignum and R. Kuiper. Combining dynamic deontic logic and temporal logic for the spec-

iﬁcation of deadlines. In R. Sprague Jr., editor, Proceedings of thirtieth HICSS, 1997.

[12] F. Dignum and J.-J.Ch. Meyer. Negations of transactions and their use in the speciﬁcation
of dynamic and deontic integrity constraints. In M. Kwiatkowska, M.W. Shields, and R.M.
Thomas, editors, Semantics for Concurrency, pages 61–80. Springer-Verlag, 1990.

[13] F. Dignum, J.-J.Ch. Meyer, R. Wieringa, and R. Kuiper. A modal approach to intentions,
commitments and obligations: Intention plus commitment yields obligation. In M.A. Brown
and J. Carmo, editors, Deontic Logic, Agency and Normative Systems, pages 80–97. Springer-
Verlag, 1996.

[14] F. Dignum, H. Weigand, and E. Verharen. Meeting the deadline: On the formal speciﬁca-
tion of temporal deontic constraints. In Zbigniew W. Ra´s and Maciek Michalewicz, editors,
Foundations of Intelligent Systems, pages 243–252, Berlin, Heidelberg, 1996. Springer Berlin
Heidelberg.

34

[15] Frank Dignum, Jan Broersen, Virginia Dignum, and John-Jules Meyer. Meeting the dead-
line: Why, when and how. In Michael G. Hinchey, James L. Rash, Walter F. Truszkowski,
and Christopher A. Rouff, editors, Formal Approaches to Agent-Based Systems, pages 30–40,
Berlin, Heidelberg, 2005. Springer Berlin Heidelberg.

[16] V. Dignum. A Model for Organizational Interaction: based on Agents, founded in Logic. SIKS

Dissertation Series 2004-1. Utrecht University, 2004. PhD Thesis.

[17] Virginia Dignum and Frank Dignum. Coordinating tasks in agent organizations.

In Pablo
Noriega, Javier V´azquez-Salceda, Guido Boella, Olivier Boissier, Virginia Dignum, Nicoletta
Fornara, and Eric Matson, editors, Coordination, Organizations, Institutions, and Norms in
Agent Systems II: AAMAS 2006 and ECAI 2006 International Workshops, COIN 2006 Hako-
date, Japan, May 9, 2006 Riva del Garda, Italy, August 28, 2006. Revised Selected Papers,
pages 32–47, Berlin, Heidelberg, 2007. Springer Berlin Heidelberg.

[18] Virginia Dignum and Frank Dignum. A logic of agent organizations. Logic Journal of IGPL,

2011.

[19] Virginia Dignum and Frank Dignum. Contextualized planning using social practices. In Aditya
Ghose, Nir Oren, Pankaj Telang, and John Thangarajah, editors, Coordination, Organizations,
Institutions, and Norms in Agent Systems X, pages 36–52. Springer, 2015.

[20] William W Gaver. Situating action ii: Affordances for interaction: The social is material for

design. Ecological Psychology, 8(2):111–129, 1996.

[21] A. Giddens. Central problems in social theory: Action, structure and contradiction in social

analysis. University of California Press, 1979.

[22] D. Grossi. Designing Invisible Handcuffs. Formal investigations in institutions and organiza-

tions for multi-agent systems. Utrecht University, PhD thesis, 2007.

[23] B. Kooi H. van Ditmarsch, W. van der Hoek. Dynamic Epistemic Logic. Springer, 2008.

[24] G. Holtz. Generating social practices. JASSS, 17(1):17, 2014.

[25] Nicholas R. Jennings. On agent-based software engineering. Artiﬁcial Intelligence, 117(2):277

– 296, 2000.

[26] Folsom-Kovarik JT. and Schatz S. Ai challenge problem: Scalable models for patterns of life.

AI Mag 2014, 35:10––14, 2014.

[27] Sanjeev Kumar, Marcus J. Huber, Philip R. Cohen, and David R. McGee. Toward a formalism
for conversation protocols using joint intention theory. Computational Intelligence, 18(2):174–
228, 2002.

[28] J.-J. Ch. Meyer. A different approach to deontic logic: Deontic logic viewed as a variant of

dynamic logic. Notre Dame Journal of Formal Logic, 29:109–136, 1988.

[29] J.-J. Ch. Meyer and W. van der Hoek. Epistemic Logic for AI and Computer Science. Cam-

bridge University Press, 1995.

35

[30] Tim Miller, Virginia Dignum, and Frank Dignum. Planning for human-agent collaboration
using social practices. In First international workshop on socio-cognitive systems at IJCAI
2018, 2018.

[31] Marvin Minsky. A framework for representing knowledge. In Allan Collins Edward Smith,

editor, Readings in Cognitive Science, pages 156 – 189. Morgan Kaufmann, 1988.

[32] Ingmar P¨orn. Some basic concepts of action.

In S¨oren Stenlund, Ann-Mari Henschen-
Dahlquist, Lars Lindahl, Lennart Nordenfelt, and Jan Odelstad, editors, Logical Theory and
Semantic Analysis: Essays Dedicated to STIG KANGER on His Fiftieth Birthday, pages 93–
101, Dordrecht, 1974. Springer Netherlands.

[33] A. Reckwitz. Toward a theory of social practices. European Journal of Social Theory,

5(2):243–263, 2002.

[34] Michael M Richter and Rosina O Weber. Case-based reasoning: a textbook. Springer Berlin,

2013.

[35] Theodore R. Schatzki. A Primer on Practices, pages 13–26. SensePublishers, Rotterdam,

2012.

[36] John R Searle. The construction of social reality. Simon and Schuster, 1995.

[37] E. Shove, M. Pantzar, and M. Watson. The Dynamics of Social Practice. Sage, 2012.

[38] Maarten Sierhuis, William J. Clancey, and Ron J.J. van Hoof. Brahms an agent-oriented
language for work practice simulation and multi-agent systems development. In Amal El Fal-
lah Seghrouchni, Jurgen Dix, Mehdi Dastani, and Rafael H. Bordini, editors, Multi-Agent
Programming:, pages 73–117. Springer US, 2009.

[39] Cass R. Sunstein. Social norms and social roles. Columbia Law Review, 96(4):903–968, 1996.

[40] T. van der Weide. Arguing to Motivate Decisions. Utrecht University, PhD thesis, 2011.

[41] Andreas Zimmermann, Andreas Lorenz, and Reinhard Oppermann. An operational deﬁni-
In Proceedings of the 6th International and Interdisciplinary Conference
tion of context.
on Modeling and Using Context, CONTEXT’07, pages 558–571, Berlin, Heidelberg, 2007.
Springer-Verlag.

36

