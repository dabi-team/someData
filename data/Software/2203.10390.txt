RT-WiFi on Software-Deﬁned Radio: Design and Implementation

Zelin Yun†, Peng Wu†, Shengli Zhou†, Aloysius K. Mok‡, Mark Nixon§, Song Han†
†University of Connecticut

†Email:

zelin.yun, peng.wu, shengli.zhou, song.han
{

‡University of Texas at Austin
‡Email: mok@cs.utexas.edu
§Emerson Automation Solutions
§Email: mark.nixon@emerson.com

@uconn.edu
}

2
2
0
2

r
a

M
9
1

]
I

N
.
s
c
[

1
v
0
9
3
0
1
.
3
0
2
2
:
v
i
X
r
a

Abstract—Applying high-speed real-time wireless technologies
in industrial applications has the great potential to reduce the
deployment and maintenance costs compared to their wired
counterparts. Wireless technologies enhance the mobility and
reduce the communication jitter and delay for mobile industrial
equipment, such as mobile collaborative robots. Unfortunately,
most existing wireless solutions employed in industrial ﬁelds
either cannot support the desired high-speed communications or
cannot guarantee deterministic, real-time performance. A more
recent wireless technology, RT-WiFi, achieves a good balance
between high-speed data rates and deterministic communication
performance. It is however developed on commercial-of-the-shelf
(COTS) hardware, and takes considerable effort and hardware
expertise to maintain and upgrade. To address these problems,
this paper introduces the software-deﬁned radio (SDR)-based
RT-WiFi solution which we call SRT-WiFi. SRT-WiFi provides
full-stack conﬁgurability for high-speed real-time wireless com-
munications. We present
the overall system architecture of
SRT-WiFi and discuss its key functions which achieve better
timing performance and solve the queue management and rate
adaptation issues compared to COTS hardware-based RT-WiFi.
To achieve effective network management with rate adaptation in
multi-cluster SRT-WiFi, a novel scheduling problem is formulated
and an effective algorithm is proposed to solve the problem.
A multi-cluster SRT-WiFi testbed is developed to validate the
design, and extensive experiments are performed to evaluate the
performance at both device and system levels.

Index Terms—Software-deﬁned radio (SDR), RT-WiFi, full-

stack conﬁgurability

I. INTRODUCTION

A recent trend in smart factory automation is to employ
high-speed real-time wireless technologies to interconnect
heterogeneous industrial assets to perform various sensing and
control services, and support mobile equipment to conduct
designated tasks in a collaborative fashion [1]. Most of these
industrial applications have stringent requirements on both
high data throughput and deterministic real-time performance
(e.g., latency and jitter) [2], [3].

The existing efforts on the design and implementation of
real-time wireless solutions can be summarized in four main
categories. The ﬁrst category includes those works focusing
on low-speed low-power real-time communication solutions,
such as WirelessHART, ISA 100.11a, WISA and 6TiSCH [4]–
[7]. Although those solutions can achieve deterministic com-
munication performance and have ultra-low energy footprint,
they cannot support high-speed communications, constrained
by the underlying IEEE 802.15.4/802.15.4e [8] physical layer

(PHY) and data link layer (DLL). The works in the second
category [9]–[14] achieve the real-time performance based
on IEEE 802.11e standard, including the hybrid coordination
function (HCF) controlled channel access (HCCA) which
enables the polling method [15]–[17] and the enhanced dis-
tributed channel access (EDCA) which enables priorities in
the transmissions and uses the highest priority for the real-
time transmissions to guarantee their access to the channel.
However, when EDCA is applied, the downlinks may compete
for the highest priority queue on the access point (AP) side
which may cause unnecessary delay and the ensuing timing
time-
violations. The HCCA-based polling method is not
efﬁcient when the channel usage is high compared to assigning
the communication schedules to the devices directly and it
is also subject to coexistence issues in the scenarios when
multiple APs use the same HCCA access function [1]. The
works in the third category study the applications of 5G
and Long Term Evolution (LTE) technologies in real-time
industrial applications [18]–[20]. However, the deployment
of LTE and 5G equipment do not exploit the license-free
bands and therefore misses the economic advantage and the
ﬂexibility afforded by the extra bandwidth required for the
anticipated applications in the industrial automation ﬁeld such
as robotics. For the last category, existing works focus on mod-
ifying IEEE 802.11 standards and implementing the systems
on commercial-of-the-shelf (COTS) hardware. For example,
[21] proposes a conﬁgurable real-time WiFi system, called RT-
WiFi, based on COTS hardware AR9285. It modiﬁes the driver
and implements a network manager for scheduling determin-
istic real-time communications. [22] proposes the WIA-FA
system for wireless factory automation. However, the uplinks
of WIA-FA are contention-based and thus the transmissions
from stations to APs are not deterministic. For the above
works using COTS hardware, a major issue is that COTS
hardware is usually not open-source, and many functions are
not accessible which makes it difﬁcult to maintain and upgrade
such system to support frequently updated OS kernels and
wireless protocols.

To address the aforementioned issues in existing works,
we present in this paper the design and implementation of a
software-deﬁned radio (SDR)-based RT-WiFi solution which
we name SRT-WiFi. SDR [23] is a radio communication
system where components that have been traditionally im-
plemented in hardware are instead implemented by means of

1

 
 
 
 
 
 
Fig. 1. Overview of the multi-cluster SRT-WiFi network.

software on a PC or an embedded system. We design SRT-
WiFi based on an advanced SDR platform (ZC706 develop-
ment board with Zynq-7000 and AD9364) where the radio
functions are programmed on ﬁeld programmable gate array
(FPGA). This advanced SDR system can run in real time since
the radio functions are achieved by the logic blocks in FPGA
running at the speed as driven by an oscillator. With such a
programmable real-time radio system, SRT-WiFi can achieve
the key functions required to support high-speed real-time
communications, and also provide an open-source platform
to support ever-evolving IEEE 802.11 standards.

Fig. 1 shows the overview of a multi-cluster SRT-WiFi
network where multiple APs are synchronized and connected
to a backbone network. A central network manager (CNM)
the network resources and allocates them to
manages all
the cluster managers (CMs) running on individual APs. In
each cluster, high-speed real-time point-to-point wireless com-
munications with rate adaptation are supported to deal with
the interfered environments. The clusters operate on multiple
channels meaning that one channel has one or multiple clusters
operating on it. Compared to COTS hardware-based existing
works, SRT-WiFi leverages the programmability of the SDR-
based PHY and DLL to provide full-stack conﬁgurability.1
By taking advantage of this full-stack conﬁgurability, it is
possible to add three major features in SRT-WiFi: i) more
precise time synchronization which leads to a smaller slot size
for packet transmission and higher sampling rate; ii) efﬁcient
queue management which reduces possible downlink latency
caused by the limited number of queues in COTS hardware;
iii) more accurate signal-to-noise ratio (SNR) measurement,
based on which we propose a novel rate adaptation mechanism
to dynamically change the data rates based on the SNR
measurement of the links to guarantee the desired packet
delivery ratio (PDR) of each link; this adaptation outperforms
the Minstrel algorithm [24] employed in regular WiFi network.
Based on the proposed rate adaptation mechanism, we fur-
ther formulate and solve the multi-cluster SRT-WiFi network
scheduling problem (MSNS-RA) based on the dynamic rates
determined at run time. We implement the SRT-WiFi protocol
and the multi-cluster SRT-WiFi network management solution
on a real testbed. Our extensive experiment results validate the
effectiveness of the designs, and we evaluate the performance
of SRT-WiFi at both device and system levels.

1The current version of SRT-WiFi system supports IEEE 802.11a/g. It can
be further extended to support emerging IEEE 802.11 standards, such as
802.11n/ac/ax. See the ongoing and future work in Section VIII).

this paper

The remainder of

is organized as follows.
Section II presents the overall system architecture of SRT-
WiFi. Section III and Section IV describe the design of
the programmable logic (PL) component and the processing
system (PS) component of SRT-WiFi, respectively. Section V
introduces the multi-cluster network management framework
to support rate adaptation in SRT-WiFi to guarantee the timing
requirement of real-time tasks even in the presence of severe
interference. Section VI evaluates the performance of SRT-
WiFi at both device and system levels. Section VII gives
a summary of the related work. We conclude the paper in
Section VIII and discuss the ongoing and future work.

II. SYSTEM ARCHITECTURE

We now present the overall architecture of SRT-WiFi system
(see Fig. 2). SRT-WiFi is based on the Openwiﬁ project [25]
which is a SoftMAC IEEE 802.11 design compatible with
Linux MAC80211. We ﬁrst
introduce Openwiﬁ, and then
describe the SRT-WiFi architecture in detail.

A. Openwiﬁ Architecture

Openwiﬁ has two major components: the Processing System
(PS) and the Programmable Logic (PL). PS is an operating
system (OS) running the major part of the data link layer
(DLL) and all
the other higher layers. PL is an FPGA-
based embedded system running the real-time part of the
DLL and the physical layer (PHY). Both PL and PS are
implemented on an integrated System-on-Chip (SoC) Zynq-
7000 [26] which consists of an FPGA (for PL) and an ARM
processor (for PS). PL and PS exchange data through the
Advanced eXtensible Interface (AXI) [27] bus which supports
direct memory access (DMA) and register reading and writing.
In addition, PL connects to a radio terminal (AD9364 [28])
for packet transceiving.

the TX interface (TXI),

In Openwiﬁ, PL is designed as the wireless adaptor. As
shown on the right side of Fig. 2, PL has three main
modules:
the XPU (application-
speciﬁc processing unit) and the RX interface (RXI). The TXI
and RXI modules handle packet transmission and reception,
respectively. The XPU module runs the state machine of
IEEE 802.11 channel access methods, e.g., the distributed
coordination function (DCF) [29]. To process general packet
transmission, TXI ﬁrst holds the packet passed from PS
(through direct memory access (DMA)) in its queues and
waits for the transmission trigger from XPU. The carrier-sense
multiple access (CSMA) block in XPU senses the channel and
runs the backoff mechanism. Once the channel is available,
XPU triggers TXI which in turn ﬁres the packet
to the
modulation block (OFDM TX) and the digital up converter
(DUC) module. The processed digital signal is then passed
to the radio terminal through the digital-to-analog converter
(DAC) block and is ﬁnally emitted from the antenna by the
radio terminal. After sending the packet, the XPU module
waits for the acknowledgement (ACK) packet from RXI if
ACK is required. If ACK is correctly received or not required,
XPU notiﬁes TXI that the packet is transmitted successfully.

2

CentralNetworkManagerAP1AP2AP3Cluster 1ManagerCluster 2ManagerCluster 3ManagerProcessing System (PS)

User Space

Kernel Space

MISC

OFDM TX Driver

Network
Manager

Real-time
Task n

Real-time
Real-time
Real-time
Task 3
Task 2
Task 1

x
u
n
i
L

1
1
2
0
8
C
A
M

r
e
v
i
r

D
1
1
2
0
8
C
A
M

TX Driver

TDMA Driver

XPU Driver

RX Driver

OFDM RX Driver

AD9364 Driver

Created Modules

Modiﬁed Modules

A
M
D

A
M
D

s
u
B

I

X
A

Programmable Logic (PL)

TX Interface

Queue 8

Queue 1
Queue 0

OFDM
TX

Radio
Terminal
AD9364

TDMA

XPU

CSMA

DUC

DAC

DDC

ADC

RX Interface

Queue

OFDM
RX

AD9364
Interface

Fig. 2. Overview of the SRT-WiFi system architecture design based on the Openwiﬁ project.

TXI further triggers an interruption to PS to report the result. If
XPU does not receive the correct ACK past a pre-deﬁned time
threshold, it triggers retransmission(s) until reaches the limit
of transmission attempts and then reports the failure to PS. For
a general packet reception, the terminal provides the received
digital signal to PL through analog-to-digital (ADC) interface.
After signal passing through the digital down converter (DDC)
and demodulated by OFDM RX, RXI puts the packet in a
queue. At the same time, XPU reads the packet header and
applies a packet ﬁlter to decide if this packet is destined for
PS. If so, RXI then ﬁres the packet to PS. If the packet requires
an ACK, XPU generates the ACK packet in TXI and triggers
the transmission. Please note that both TX and RX of the radio
terminal run in parallel. And all PL modules have registers to
be used to conﬁgure the operation mode and parameters.

The PS component in Openwiﬁ is a Linux OS running on
an ARM processor. For being a SoftMAC wireless device in
Linux, the major part of DLL is integrated in Linux kernel
(MAC80211 subsystem [30]) except for the real-time part
of DLL and PHY which are implemented in PL. Thus the
MAC80211 driver is needed to provide the interface of the
wireless adaptor (PL) for the Linux MAC80211 subsystem.
The data exchanges between the MAC80211 driver and PL
rely on the sub-drivers (see the left side of Fig. 2). All the sub-
drivers are designed to provide APIs for register reading and
writing to the MAC80211 driver so that it is able to conﬁgure
the PL. The TX and RX drivers handle TX and RX data packet
transfer between PS and PL, respectively, through DMA.

B. SRT-WiFi Architecture

The key design goal of SRT-WiFi is to support precise time
synchronization and multi-cluster real-time communications
with effective rate adaptation at run time. For this purpose,
we present below the SRT-WiFi architecture, by modifying
the PL and PS components in Openwiﬁ to add the required
functions.
SRT-WiFi PL: The PL component of SRT-WiFi is designed
to i) achieve the real-time transmissions with high synchro-
nization time precision, ii) provide more efﬁcient queue man-

agement and iii) measure the reception SNR of the links more
precisely in order to provide reference for rate adaptation.

To achieve real-time transmissions, we design a TDMA
block in XPU to supplement the CSMA block. The TDMA
block triggers the PHY and DLL activities with high time
precision. It runs either according to the local
timer or
synchronizes with another device in the SRT-WiFi network.
According to our measurements (to be elaborated later), the
synchronization time error and standard deviation in the multi-
cluster SRT-WiFi are as low as 0.73 µs and 0.1 µs, respectively.
Different from the CSMA block which triggers the transmis-
sions following the DCF mechanism, the TDMA block triggers
the transmission according to a schedule constructed by the
network managers in PS. The schedule is stored in the TDMA
block and updated at run time through a TDMA driver that is
added in PS (see Fig. 2). The TDMA and CSMA modes in
SRT-WiFi can be switched during the run time seamlessly.

For an AP working in the TDMA mode, it needs to handle
the links to all the connected stations. The transmissions on
those links have to follow the order of a schedule. With limited
number of queues, COTS hardware [21] must manage the
issue that the queued packets may block the transmissions of
upcoming packets that may cause unmanageable congestion as
the network scales up. SRT-WiFi provides an effective queue
management in the following two aspects: i) More queues
are implemented in the TXI module and judiciously assigned
to the real-time communication links to avoid delays, ii) A
dynamic method is developed to allow the links to share the
queues to further increase the number of supported links.

By leveraging the capability of SRT-WiFi to have direct
access to the received signals, we are able to design novel
methods to measure the SNR precisely and implement it in the
OFDM RX module. The SNR information provides a reference
for the rate adaptation mechanism to adapt the TX data rates
and adjust the communication schedules at run time.
SRT-WiFi PS Kernel: As shown in Fig. 2, we add the TDMA
driver and modify the MAC80211 driver, TX and OFDM RX
drivers to provide an interface for exchanging the schedule,
queue and SNR information between PS and PL in the TDMA

3

mode. The TDMA driver is registered in the kernel as a
miscellaneous character driver (MISC). It provides APIs for
the network managers in the user space. The network manager
conﬁgures the schedule and queue information in PL through
the TDMA driver and updates the data rates in MAC80211
driver as well. The TX driver is modiﬁed to support queue
management and the OFDM RX driver is enhanced to support
reading the SNR values measured in PL.
SRT-WiFi Network Management: We call the network man-
agers running on individual APs cluster managers (CM) and
the ones running on the stations device managers (DM). These
network managers are designed for two purposes. The ﬁrst
one is to exchange information at the application layer among
all the devices in the SRT-WiFi network. Those information
includes the schedule, data rates and SNR of links in the SRT-
WiFi network. The second purpose is to manage the TDMA
DLL on each device such as conﬁguring the schedule for
the TDMA block and reading the SNR measurement from
the PL. The device managers send SNR values to a central
network manager (CNM) and CNM decides the schedule with
a heuristic multi-cluster scheduling algorithm and returns the
computed schedule and data rates according to the delay and
throughput requirements of all the links so that we can support
the dynamic rate adaptation to provide stable communications
for multi-cluster SRT-WiFi. All network managers run in the
user space so they are easy to maintain and upgrade.

III. SRT-WIFI PROGRAMMABLE LOGIC (PL) DESIGN

We ﬁrst introduce the PL design of SRT-WiFi, focusing on
the XPU, TXI and OFDM RX modules. The TDMA-based
data link layer (DLL) is designed as part of the XPU to
achieve real-time performance. The queue management func-
tion is achieved in TXI and the SNR measurement function is
implemented in OFDM RX module. In a multi-cluster SRT-
WiFi network, the master AP (MAP) serves as the reference
clock for the network. The slave APs (SAPs) synchronize with
the MAP and the stations synchronize with their corresponding
APs. The synchronization function of both APs and stations
are implemented in their XPU modules. In the following, we
elaborate on the design details of these functions.

A. TDMA Block Design

In the TDMA mode of SRT-WiFi, we aim to transceive
frames at speciﬁed times to coordinate the communications
between APs and stations to avoid collision. For this aim,
all transmissions follow a schedule. The schedule describes
the transmitting times and orders of the links in a time period
called the superframe. The superframe is a sequence of consec-
utive time slots, and each time slot speciﬁes the radio activities
(TX, RX or Idle) and the associated sender/receiver. At run
time, the superframe is repeated ad inﬁnitum to schedule the
transmissions. To support rate adaptation, the length of the
time slot varies along with the rate, since with the same packet
length, a lower rate requires longer time for transmission. The
time slots use atomic slots as the basic time unit. In SRT-
WiFi, the lengths of superframe, time slot and atomic slot are

all conﬁgurable. The superframe length is mainly decided by
the application requirements and the time/atomic slot lengths
are decided by the selected data rates.

Fig. 3 shows the timing diagram of an example superframe
in an SRT-WiFi network. It has 127 atomic slots where
Slot0 and Slot1 are used by AP1 and AP2 to send beacons,
respectively. Slot2 and Slot3 are shared slots for any links and
usually used for the association process. The other atomic slots
are either assigned to links for dedicated communications or
left idle. The links that use the same MTU but different data
rates will require different slot lengths in terms of the number
of atomic slots. For example, Link1, Link2 and Link3 use 1,
2 and 3 atomic slots for their transmissions, respectively.2

To enable real-time communications in SRT-WiFi and im-
plement the schedule in PL, a TDMA block is added in the
XPU module (see Fig. 2). In the TDMA block, a register
page is implemented for the TDMA driver. We assign 16
32-bit registers for the schedule and each slot uses 4 bits to
support a schedule of 128 slots. This design can be easily
extended to support larger superframes. Based on the schedule
information, the TDMA block employs a set of timers to
trigger the transmissions. At the beginning of a time slot, the
TDMA block fetches the link information associated with that
slot. Each link has its assigned queue in the TXI module,
which will be triggered to send a frame if there is any in the
queue. The transmission is triggered by one PL clock pulse.
The frame is then read by the OFDM TX module and the bit
stream is modulated to digital signal stream and processed by
DUC. The ﬁnal digital signal is passed to the DAC interface
and emitted from the antenna of the radio terminal.

B. TDMA Time Synchronization Design

Another key function of SRT-WiFi is to achieve precise
time synchronization among the devices in the network. In
our design, we have multiple clusters in the same SRT-WiFi
network. Each cluster consists of an AP and multiple stations,
and the clusters may share the same channel. For those clusters
operating on the same channel, the devices need to be well
synchronized to avoid potential collision. The synchronization
mechanism of existing work using COTS hardware [31] is
to connect and synchronize the APs through an Ethernet
backbone network using the IEEE 1588 protocol [32]. The
stations are then further synchronized with the APs using the
beacon packets. For the synchronization among the APs, the
OS of each AP ﬁrst updates its system timer with IEEE 1588
and then updates the timer in its wireless adaptor, which is
used to send packets at run time. For the synchronization on
the station side, they listen to the beacon packets and update
the system timer. Since the time synchronization on both APs
and stations are done by non-real-time OS, it may cause an
average time drift between the devices as high as 20 µs [21].
To address this problem, in SRT-WiFi, we propose a new
synchronization method based on SDR which is performed at

2The detailed data rates and their corresponding required slot lengths are

presented in Section VI.

4

Fig. 3. The timing diagram of an example superframe in multi-cluster SRT-WiFi with 127 atomic slots.

timer is to run the schedule. When a new packet arrives and
the long training ﬁeld (LTF) of the PHY signal is detected in
the OFDM RX module, ST is reset. Next, the synchronization
function waits for the DLL packet header to be received from
the OFDM RX module. It checks whether the packet is a
beacon packet. If so, it continues to wait for the service set
ID (SSID) in the packet payload. Once SSID is read, the
synchronization function compares it with the target SSID
provided by the TDMA driver through the registers. If they
match, ST is updated to the schedule timer; otherwise, the
synchronization function waits for the next packet and the
schedule timer runs as usual with no update. This timer update
procedure is summarized in Fig. 4 where Fig. 4 (a) shows
how a packet is received and passes the information to ST
and Fig. 4 (b) shows how ST synchronizes accordingly and
triggers the update of the schedule timer. Fig. 4 (c) shows how
the schedule timer changes states to update the time or trigger
real-time transmissions as shown in Fig. 4 (d). It is worth
noting that this synchronization method also works with higher
bit rates in IEEE 802.11n/ac/ax standards. With this method,
our experiments show that the synchronization time drift of the
SRT-WiFi devices can be maintained within 500 ns which is
much better than the 20 µs time draft observed on the COTS
hardware. This more precise time synchronization can help
reduce the guard time which is to avoid collisions between
slots due to the synchronization error and support smaller time
slot length which further improves the sampling rates. Table I
presents the packet delivery ratio (PDR) test results with varied
application layer payload sizes, the corresponding slot lengths
and achievable sampling rates. The guard time used in the
experiments is set at 10 µs. From the results, we can observe
that with a payload size of 50 bytes, the slot length can be set
at 110 µs and the sampling rate can be as high as 9 kHz. The
detailed experimental results can be found in Section VI.

Fig. 4. State machines of the schedule timer and the synchronization timer
(ST) in the TDMA block of SRT-WiFi.

the physical layer (PHY). It is worth noting that this method
is only suitable for the devices operating on the same channel.
For two APs operating on different channels to synchronize,
IEEE 1588 will still be employed. For the APs operating
on the same channel, we ﬁrst designate a master AP (MAP)
and let the other APs be the slave APs (SAPs). We assume
that all SAPs can hear from the MAP, which provides the
reference clock. The SAPs synchronize with the MAP, and all
the stations synchronize to their corresponding APs. The key
design goal of SRT-WiFi synchronization is to avoid using the
timer in non-real-time OS but leverage the timer in hard real-
time PL. For this aim, timers are added in the TDMA block
with nanosecond precision for synchronization. We call them
TDMA timers, and they are set and run in hard real-time.
TDMA timers on MAP are set by its OS to unify the time on
MAP. TDMA timers on SAPs and stations synchronize with
the TMDA timers on MAP using PHY beacon signal and their
OS time are synchronized accordingly.

TABLE I
PDR MEASUREMENTS WITH DIFFERENT PAYLOAD SIZES AND THE
CORRESPONDING SLOT LENGTHS.

Payload (bytes)
Slot Length (µs)
Sampling Rate (Hz)
PDR (%)

100
118

150
126

500
200
50
110
174
130
9090 8474 7936 7692 6849 6172 5747
99.4
99.6
99.7

400
162

300
146

99.6

99.7

99.3

99.6

We now introduce the synchronization procedures.
In SRT-WiFi, PHY demodulation is achieved in the OFDM
RX module in PL. The demodulated symbols are passed
to RXI and XPU. In the TDMA block, a synchronization
function is added to utilize the baseband signal demodulation
two
to synchronize with a speciﬁc AP. More speciﬁcally,
TDMA timers are added, one is called schedule timer and
the other is called synchronization timer (ST). ST is used to
track the arrival time of a beacon packet and the schedule

Fig. 5. Queue management issues in real-time networks with shared queues.

5

S0S1S2S3S4S5S6S7S8S9S126Beacon16 MbpsShared6 MbpsShared6 MbpsLink154 MbpsLink312 MbpsLink236 MbpsIdle…Beacon26 MbpsScheduleAtomic SlotSuperframeIdleListeningIdleSelfSendingNo SelfSendingSTFLTFPHY HeaderMAC HeaderMACPayloadPacketQueueingReset STLTFDetectedFC validIf beacon?NoWait for SSIDYesSSID matches?NoGet SSIDYesTriggertimer updateIdleUpdate timer?Update ST toschedule timerYesNoIf slot begins?NoYesFetchqueue numberIf packetin queueTriggerYesNoSynchronization Timer (ST)   (b)Schedule Timer      (c)IdleQueueCheckSendingTriggeredPacket in Queue?YesRX      (a) TX      (d)State TransitionInfo TransferSTA1STA9STA10Queue0STA2Queue1STA3Queue2STA8Queue7STA1Queue0STA9Queue8STA10Queue9Queue15STA1Buffer Slot5STA9STA10(a)(b)(c)…Slot0STA1Slot1……STA9Slot9STA10Slot10STA1Slot11……STA9Slot19STA10Slot20…Slot0STA1Slot1…Slot0STA1Slot1……STA9Slot9STA10Slot10STA1Slot11……STA9Slot19STA10Slot20…Slot0STA1Slot1…Slot0STA1Slot1……STA9Slot9STA10Slot10STA1Slot11……STA9Slot19STA10Slot20…Slot0STA1Slot1STA2STA2STA3STA3STA8STA8Buffer Slot6Buffer Slot7Buffer Slot47C. Queue Management

In SRT-WiFi, before being transmitted, the packets from
PS are ﬁrst pushed into queues. For COTS hardware-based
RT-WiFi, the queue implementation is not conﬁgurable. For
example, AR9285 used in the RT-WiFi implementation [21]
uses only 8 queues. To support real-time transmissions in SRT-
WiFi, time slots are assigned to individual links to guarantee
the desired timing and throughput performance. However,
when the number of stations increases beyond the number of
queues in the AP, the packets belonging to different links may
share a queue, leading to unexpected timing violations. For
example, as shown in Fig. 5 (a), a device has 10 links while
it only has 8 queues so the links of STA9 and STA10 have
to share a queue with other links. When two or more packets
belonging to different links are pushed into the same queue,
they may have to wait until the packet at the queue head being
sent, although their assigned time slots in the superframe may
come ﬁrst. This issue happens mainly on the AP side when
handling real-time transmissions for multiple stations.

In SRT-WiFi, the packet transmission is triggered by the
TDMA block. We assign the queues to different links and
the packets belonging to different links are pushed to the
corresponding queues as shown in Fig. 5 (b). The schedule in
the TDMA block stores the information on which queue to be
triggered for every slot. This is a feature of SDR-based system
since the queues can be deﬁned by software and are not ﬁxed
as in the COTS hardware. The number of supported queues
can be extended as long as the FPGA has enough resources.

TABLE II
MAX. AND AVG. DELAY (SLOT NUMBER) OF PACKETS IN ASSIGNED AND
DYNAMIC QUEUE MANAGEMENT METHODS WITH 16 LINKS.

Number of Queues
Assigned Maximum Delay (slot)
Assigned Average Delay (slot)
Dynamic Maximum Delay (slot)
Dynamic Average Delay (slot)

8
2816
336
591
271

10
2358
236
162
42

12
1707
159
106
16

14
1125
87
104
16

16
82
16
103
16

This SDR-based queuing method can eliminate the queuing
delay when the number of supported stations is smaller than
the number of queues on the AP. However, as the number
of stations increases, the queue number cannot be increased
inﬁnitely due to the limited resource on the FPGA. To address
this issue, we propose a dynamic buffer design in SRT-WiFi
as shown in Fig. 5 (c) where we use a buffer to replace the
previous queues and the buffer is composed of buffer slots
and each slot only stores one packet at most. When a packet
is passed from the driver, TXI selects an unused buffer slot
and pushes the packet into it. At the beginning of each time
slot, the TDMA module checks the link information for that
time slot. It goes over the buffer to check whether there is a
packet belonging to that link. If so, it triggers the transmission
of that packet in the corresponding buffer slot. Since a buffer
slot only stores one packet, with the same FPGA resources,
more buffer slots can be implemented.

Table II presents the performance comparison between the
assigned and dynamic queue management methods with 16

links and the number of queues. Each link generates a packet
periodically and a packet only requires one atomic slot to
transmit. If the corresponding queue is available, the packet
is pushed into queue. All transmissions follow a randomly
generated schedule where the throughput of each link is guar-
anteed and the length of superframe is ﬁxed. The time between
the packet being generated and transmitted is recorded as the
packet delay, and packets are not dropped due to the delay.
From the results, we can observe that in the assigned queue
management method (where the queues are assigned to links),
a few gap between the number of queues and links may cause
signiﬁcantly large max./avg. delay. On the other hand, with
the same number of queues, the dynamic queue management
method is able to handle more links and keep both max and
avg. packet delay small. It however cannot minimize the delay
since all the queues are shared.

D. SNR Measurement

To support the rate adaptation function in SRT-WiFi, we
propose two practical methods to achieve precise SNR mea-
surement in PL. Both methods utilize the short training ﬁeld
(STF) in the preamble of 802.11 PHY signal. The ﬁrst method
computes the cross-correlation [33] of the STF. It is known
that STF consists of 10 same short symbols corresponding to
160 samples with 20 MHz sampling rate. So the samples in
STF repeat every 16 samples [29]. After the detection of STF,
it is buffered. We use the chips from the 33rd to the last one
(in total 128 chips) and divide them into two groups each of
which has 64 chips. We compute the cross-correlation of the
two groups of chips as the ρ, and the SNR value (dB) can be
computed as follows:

SNR = 10 log10

(cid:18) ρ
1

(cid:19)

ρ

(1)

−

where we assume that ρ < 1. The reason that we use two
groups of 64 chips is to exclude the chips at the beginning due
to the problems caused by the transient effects of initiating a
transmission in the hardware of the sender.

For the second method, after the STF detection, the STF and
a piece of background noise before the STF are buffered. The
STF signal is added by the background noise. We measure the
power of the background noise before the STF and the power
of the STF signal which is noise power plus the signal power.
Then the SNR (dB) can be computed as:

SNR = 10 log10

(cid:18) PSTF

Pnoise

−
Pnoise

(cid:19)

(2)

where PSTF is the signal power of the STF part and Pnoise is
the power of the background noise signal before the STF. We
assume that PSTF is larger than Pnoise.

Both SNR measurement methods are implemented in the
OFDM RX module in SRT-WiFi. An SNR value is computed
every time when a packet arrives. The computed SNR value
is buffered and when the RX interruption in the MAC80211
driver is triggered, it is read through the register. In addition to
the SNR value, the driver also needs to know which link the

6

SNR value belongs to since there could be multiple packets
being processed during that time. To solve this problem, the
SNR value is buffered together with the source address of
the packet if applicable (not all the packets have the source
address, if not the SNR value is discarded). This information
is read in the MAC80211 driver and passed to the TDMA
driver and obtained by the device manager on each device.
The device manager then sends the SNR information to the
central network manager to determine the data rate of each
link and the corresponding schedule in the network. The
performance of both SNR measurement methods are discussed
in Section VI.

IV. SRT-WIFI PROCESSING SYSTEM (PS) DESIGN

In this section, we introduce the Processing System (PS)
design in SRT-WiFi including the drivers in the kernel and the
network managers in the user space. We elaborate how the PS
component of SRT-WiFi conﬁgures the communication sched-
ules, assigns the queues to individual links and forwards the
measured SNR values to CNM for the network management-
related decision-making.

A. SRT-WiFi Drivers

The drivers in SRT-WiFi are the interface between PL and
OS (see Fig. 2). They have two main purposes. The ﬁrst one is
to conﬁgure parameters in the PL modules to support different
working modes and functions; The other purpose is to handle
the packet exchange between PL and OS.

We ﬁrst present

the PL conﬁguration and the structure
of the driver. As shown in Fig. 2, each module in PL is
connected to a corresponding driver in the kernel. The two
DMA modules for TX and RX are controlled by the TXI
and RXI separately. The DUC and DDC modules are also
controlled by TXI and RXI, respectively, to receive parameters
from them. The reason to have this structure is that there
is a register page in each module in PL. Each register is
used by the module to set parameters or read results from
the module. For example, TXI uses a register to check if
the packet needs an ACK and uses another register to report
whether the packet is sent successfully. On the kernel side,
each module in PL corresponds to a driver. We call these sub-
drivers. They realize the conﬁguration functions by reading
and writing the registers in the modules in PL and encapsulate
these functions into APIs to be called in the MAC80211 driver.
For the TDMA block in XPU, it also has a register page
and we divide the registers into three parts. The ﬁrst part is
allocated for the schedule to keep information for the time
slots, along with the superframe length and the atomic slot
length. The second part is for synchronization purpose since
PL needs to know the SSID of the AP that it synchronizes
with. The third part is a mode switch. It switches between the
CSMA mode and the TDMA mode upon request. To conﬁgure
these registers, we add a TDMA driver in the kernel. Since
the functions of the TDMA mode are not compatible with the
MAC80211 subsystem, it is difﬁcult to conﬁgure the TDMA
block through MAC80211. Instead, we make the TDMA driver

a miscellaneous character driver (MISC). It provides the basic
reading and writing functions for the user space. In the user
space, the network manager calls the APIs of the TDMA
driver to conﬁgure the TDMA block so that it can modify
the schedule, set the parameters and switch the working mode
when necessary.

When the MAC80211 sub-system sends a packet, the packet
is passed to the MAC80211 driver and handled by the TX
operation function (TXO). TXO ﬁrst checks the priority of the
packet and then selects the corresponding queue. Next, TXO
determines the TX rate for the packet and checks whether
the packet needs RTS/CTS. This information is conﬁgured to
TXI through the registers. At the end, the packet is ﬁred to
the queue in TXI through DMA. In SRT-WiFi, we specify
the TX rate and queue for each link. The MAC80211 driver
has access to the TDMA driver and TXO fetches the assigned
queue and TX rate for the current packet using the destination
address of the packet as the key. The queue assignment and
rate selection are decided by CNM and stored in a table in the
TDMA driver. In our implementation, on the AP side, we use
queue 0 for beacon packets and queue 1 for shared links and
other broadcast packets. The other queues are assigned to the
associated stations. On the station side, it only has the uplink
to the AP and a broadcast link so only two queues are needed.
On the receiving side, when a packet is received and queued
in RXI, it is forwarded to the kernel through the DMA module.
After the packet reaches the kernel, the RX interruption in
the MAC80211 driver is called. It checks the information
of the packet and forwards it to the MAC80211 sub-system.
This indicates that a packet arrives so the SNR value is read
from the register in this RX interruption. The SNR value
and the corresponding address information are then put into a
buffer in the TDMA driver. The device manager ﬁnally reads
these information and sends them to CNM, which decides and
updates the TX rates and schedules for individual links.

B. Network Manager

In SRT-WiFi, we have three types of network managers
forming a network management hierarchy, including the cen-
tral network manager (CNM), cluster managers (CM) running
on the APs and device managers (DM) running on the stations.
For the joining process, when an SRT-WiFi network starts,
CNM runs ﬁrst and waits for CMs to create TCP connections
to the CNM and obtain the schedules to be assigned to the
the cluster networks and the slave
links. CMs then start
APs synchronize with the master AP in the same channel
and wait for the stations to connect. For the convenience
of synchronization and the joining process, all beacon slots
and shared slots are ﬁxed during the system operation, and
this information is shared with all APs and stations. When
a station is powered on, it scans the channels, synchronizes
with the designated AP and joins the network. After joining
the network, the DM running on the station creates a TCP
connection with the CM on the AP to obtain and update the
schedule. Before receiving the schedule, the station can only
use the shared slots to complete the joining process. Different

7

from the assigned slots, the shared slots are contention-based.
In a shared slot, each sender ﬁrst runs a random backoff
mechanism as in the CSMA mode and then senses the channel.
If the channel is available, the sender then sends the packet.
The maximal contention window of the random backoff is
conﬁgurable. During the system running, DMs and the CMs on
each device measures the link qualities and interference. This
channel information from each device is obtained by the CNM
and it determines and updates the schedules and data rates for
the DMs and CMs to adapt the current channel condition so
that the links provide stable transmissions.

A unique feature of SRT-WiFi network management is to
enable dynamic slot length in the schedule to support run-
time rate adaptation. For an individual link, the maximum
transmission unit (MTU) is ﬁxed while the data rate may
change along with the interference level. With a lower data
rate, a packet with the same length requires longer time for
transmission which may exceed the boundary of a time slot
and cause the collision. In this work, we apply dynamic slot
length in the schedule to solve this issue. In the schedule, we
deﬁne an atomic slot (AS) to be a slot that has the minimum
length to support transmitting a packet with a size of MTU
at the highest rate. For a packet to be transmitted with a
lower rate, it can use multiple consecutive atomic slots in
a non-preemptive fashion. Thus by choosing different rates
during run time, the packet transmission can take different
number of atomic slots. We call this method dynamic slot size
assignment. With this mechanism, it is important to compute
the schedule for the multi-cluster SRT-WiFi network with rate
adaptation and dynamic slot size assignment. In the following
section, we will formulate this problem, study its complexity
and present a heuristic but effective solution.

V. NETWORK MANAGEMENT

We now formulate the multi-cluster SRT-WiFi network
scheduling problem with rate adaptation and prove its NP-
hardness. We then present the design detail of a heuristic
scheduler to solve this problem.

A. System Model

{

}

C1, C2, ..., Cm

Consider a set C =

of clusters in a
multi-cluster SRT-WiFi network. Each cluster consists of one
SRT-WiFi AP and multiple SRT-WiFi stations forming a
star network topology. As the SRT-WiFi network is a time-
slotted system, we deﬁne an atomic slot (AS) as the minimal
uninterruptible time unit in the system. For each packet to be
transmitted in the SRT-WiFi network, it takes one or multiple
transmission units. A transmission unit is conﬁgured to be one
or multiple atomic slots based on the selected data rates.

Let Πi =

be a set of tasks that trans-
}
mit the packets periodically in cluster Ci. Each task τi,j is
characterized by

τi,1, τi,2, ..., τi,n
{

τi,j = (Bi,j, Ui,j, Di,j, Ti,j)

(3)
N represents the size of the transmission unit
where Bi,j
for τi,j (in number of atomic slots), Ui,j is the number of

∈

8

transmission units required by τi,j. The deadline and period
of τi,j are denoted as Di,j and Ti,j, respectively.

∈

i,j,k

We assume that each task τi,j is released in a periodic
∞
k=1. For a transmission
fashion with a set of instances
{I
}
[1, Ui,j] of an instance
unit l
i,j,k, let si,j,k,l and fi,j,k,l rep-
I
resent its start time and ﬁnish time, respectively. Accordingly,
let ri,j,k,l and di,j,k,l be the release time and deadline of the lth
i,j,k. The release time ri,j,k,1 of the ﬁrst
transmission unit of
i,j,k and the deadline
transmission unit is the release time of
di,j,k,Ui,j of the last transmission unit is the deadline of
i,j,k.
I
[2, Ui,j]
In addition, it holds that ri,j,k,p = fi,j,k,p−1 with p
and di,j,k,q = di,j,k,q+1

Bi,j with q
We assume that the sizes of atomic slots for all the clusters
are the same, and the number of available channels in the SRT-
WiFi network is H. We assign each cluster Ci to a channel
hi

[1, H], and introduce the conﬂict condition as follows.

[1, Ui,j

∈
1].

−

−

∈

I

I

∈

Deﬁnition 1. For any two instances
i(cid:48),j(cid:48),k(cid:48) with
i = i(cid:48) or hi = hi(cid:48) hold, we say that they conﬂict with each
other if the following condition satisﬁes:

i,j,k and

I

I

[si,j,k,l, fi,j,k,l]

[si(cid:48),j(cid:48),k(cid:48),l(cid:48), fi(cid:48),j(cid:48),k(cid:48),l(cid:48)]

=

(4)

∅

∪

where l
∈
i = i(cid:48), j = j(cid:48), k = k(cid:48) and l = l(cid:48) at the same time.

[1, Ui(cid:48),j(cid:48)], and it cannot hold that

[1, Ui,j], l(cid:48)

∈

Based on the conﬂict condition above, we deﬁne the feasible
condition of scheduling an instance in multi-cluster SRT-WiFi.

Deﬁnition 2. For any instance
i,j,k, it is feasibly scheduled
in a multi-cluster SRT-WiFi network if it does not conﬂict with
any other instance and the following condition holds:

I

[si,j,k,l, fi,j,k,l]

⊆

[ri,j,k,l, di,j,k,l]

(5)

where fi,j,k,l = si,j,k,l + Bi,j and l

[1, Ui,j].

∈

B. Problem Formulation

The multi-cluster SRT-WiFi network scheduling problem
with rate adaptation (MSNS-RA) considers assigning channels
to individual clusters and then schedule the transmissions of
the packets to eliminate the schedule conﬂict.

Deﬁnition 3. Multi-cluster SRT-WiFi Network Scheduling
m
i=1 each
Problem (MSNS-RA): Consider a set of clusters
n
j=1 . The MSNS-RA problem
executing a set of tasks
}
is to assign a channel hi
[1, H] to each cluster Ci and to
ﬁnd a feasible schedule for all the tasks assigned with rate
adaptation on the same channel so that any instance of a task
can be feasibly scheduled based on Condition (4) and (5).

τi,j
{
∈

Ci
{

}

Theorem 1. MSNS-RA is NP-hard in the strong sense.

Proof. Our NP-hard proof uses the 3-Partition problem which
is known to be NP-hard [34]. An instance of 3-Partition
consists of a collection A = (x1, x2, ..., x3n) of positive
integers such that (cid:80) xi = nM , M
for each
3n, there exists a partition of A into A1, A2,...,An
1
i
≤
such that (cid:80)

4 < xi < M

xi = B for each 1

n [34].

≤

k

2

xi∈Ak

From any instance of the 3-partition problem, we may
construct an equivalent instance of MSNS-RA. Assuming that

≤

≤

(cid:54)
the total number of available channel in MSNS-RA is 1. Let
Π be the set of tasks running in all the clusters. For each
integer xi, we map a corresponding task in P i with its size
of transmission unit as xi, its number of transmission units as
1, its period and deadline as M . Also, we construct an extra
task with its size of transmission unit as M , its number of
transmission units as 1, its period and deadline as nM . The
above reduction is a polynomial reduction.

∈

−

×

×

[0, 2n

M ] where k

Since the extra task has taken the intervals in [k

M, (k +
1)
2] is an even number, if there exists
a partition of A into A1, A2,...,An in the 3-partition problem,
we can construct the corresponding solution to schedule each 3
tasks corresponding to the integers in Ai in an unused interval
[(k + 1)
M ]. Also, if we could ﬁnd a feasible
schedule for the MSNS-RA problem, we must schedule every
M ] since
3 tasks in an unused interval [(k + 1)
×
4 < xi < M
M
2 . This shows that there is a feasible schedule
if and only if there is a 3-Partition, which proves that the
MSNS-RA is NP-hard in the strong sense.

M, (k + 2)

M, (k + 2)

×

×

×

C. Heuristic Scheduler Design

To address the MSNS-RA problem in the general case,
we propose an effective heuristic scheduler to perform the
channel and task assignment. The proposed scheduler design
contains a cluster scheduler and a set of task schedulers. The
cluster scheduler assigns the channels for individual clusters
by balancing the network utilization of channels. Once the
the task schedulers are
channel assignment
employed to schedule the tasks in each cluster. We now present
the details of the two schedulers below.

is completed,

1) Cluster scheduler: Given m clusters

m
i=1, the cluster
}
scheduler ﬁrst computes and sorts the clusters according to
their network utilization in descending order. Speciﬁcally, for
n
each cluster Ci with the corresponding task set
j=1, the
network utilization of the cluster is computed as the sum of
its task utilization.

τi,j
{

Ci

{

}

To reduce the search space, we introduce a heuristic to
assign the clusters to each channel. We deﬁne the network
utilization of a channel as the sum of the network utilization
of all the tasks assigned to this channel. For a cluster Ci, with
H available channels, we always select the channel with the
least network utilization and assign it to Ci. For example, we
assign C1 to channel 1, C2 to channel 2, ... , CH to channel
H. For the cluster CH+1, we assign it to channel H as the
utilization of channel H is the lowest. For cluster CH+2, we
1 and channel H and select
check the options of channel H
−
the one with the lowest utilization.

τi

n
i=1 assigned to a channel h
}

2) Task scheduler: After assigning the channels for in-
dividual clusters, the task scheduler aims to ﬁnd a feasible
schedule for all the tasks assigned to the same channel. Given
[1, H] which may
n tasks
be from different clusters with a hyper-period
, we utilize
the release times and deadlines of the transmission units of
all the instances of every task from the task set to build the
with I = [s, e], s is
interval set
a release time of a transmission unit and e is the deadline of

. For any interval I

∈ T

H

∈

T

{

I

D

I be the demand of the interval
that transmission unit. Let
I, which is deﬁned as the sum of Bi,j of any transmission
i,j,k with its release time and deadline included in I.
unit of
Following the EDF (Earliest Deadline First) scheduling
policy, we schedule the transmission units based on their dead-
lines. However, the sizes of transmission units from different
tasks might be different and a transmission unit cannot be
interrupted during execution. In this non-preemptive case, EDF
is known to be non-optimal. To improve the schedulability,
we consider the technique of inserting the idle time. The
key idea is that for each instance popped from the ready
queue we utilize the future release patterns of tasks to identify
whether or not to insert the idle time to delay its execution.
This prevents a non-preemptive transmission unit from being
scheduled in an interval such that its demand plus part of
this transmission unit becomes larger than the length of the
interval, thus jeopardizing schedulability. To overcome this
problem, we employ the following rule to insert the idle time
in the constructed schedule. Consider any transmission unit of
i,j,k to be scheduled at time t. If there exists
a task instance
an interval I = [s, e] satisfying the following two conditions:

I

• Condition 1: [s, e]
• Condition 2: t + Bi,j > e

⊂

[t, di,j,k,l]

I .

− D

then the release time of the transmission unit is set to s.

T

T

H

Since there may exist multiple intervals that satisfy the
above conditions, we change the release time of the trans-
mission unit to be the latest one. In addition, deferring the
release time to a later time can change the interval set
. We
therefore update the interval set if a release time is updated.
With the above rule to insert idle time in the EDF schedule,
we describe the operation of the task scheduler in Alg. 1.
The task scheduler ﬁrst computes the hyper-period
of the
task set assigned to the channel and initializes the interval
and the time t based on the timing parameters of the
set
task instances. It then utilizes a ready queue Q to schedule
the tasks based on EDF. Speciﬁcally, for each instance Ii,j,k
popped from the ready queue, we employ the rule of inserting
idle time to decide if its release time will be deferred (Line 6-
11). In addition, we check if the current transmission unit can
be scheduled (Line 12-13). If the release time of the current
transmission unit is not modiﬁed, i.e., ri,j,k,l = t, we schedule
it in time [t, t + Bi,j]. Otherwise, we push it back to the ready
(Line 19-20). Let N =
queue and update the interval set
T
(cid:80)n
/Ti be the total amount of instances of all the tasks
where Ti is the period. As computing the interval set takes
O(N 2) time, the total time complexity of the task scheduler
is O(N 3).

i=1 H

VI. PERFORMANCE EVALUATION

In this section we report our performance evaluation on the
SRT-WiFi design, at both component and system levels. Fig. 6
presents the devices used in our SRT-WiFi testbed. We have
two hardware platforms. ZC706 consists of Z7045 SoC and
AD9364 radio chip and it is used as the hardware for both
AP and stations in the SRT-WiFi network. ADRV9364-Z7020

9

Algorithm 1: Task Scheduler
Input
τi
Output: A schedule

: A task set Π =

{

n
i=1
}
or reports failure

S

1 Compute the hyper-period
H
2 Initialize a ready queue Q =

of the tasks
, the interval set

∅

and

T

time t

I
x,y,z

x,y,z is released or Q

3 while An instance
Q = Q
4
Get the earliest instance
I
t with its lth transmission unit to be scheduled
for I

with I = [s, e] do

i,j,k in Q at current time

∪ {I

do

=

}

∅

6

5

∈ T

Compute the demand
[t, di,j,k,l]
if I

I of the interval I
I > e then

D
t + Bi,j +

⊂
ri,j,k,l = max(ri,j,k,l, s)

∧

D

end

end
if ri,j,k,l + Bi,j > di,j,k,l then

return None // reports failure

end
if ri,j,k,l = t then

[si,j,k,l, fi,j,k,l] = [t, t + Bi,j]
t = fi,j,k,l

else

i,j,k to Π
insert
update the interval set

I

T

7

8

9

10

11

12

13

14

15

16

17

18

19

20

end

21
22 end
23 return

S

consists of Z7020 SoC and AD9364 radio chip and it is only
used for some stations due to its limited FPGA resources.
USRP2900 is a traditional SDR device and it is only used for
testing purpose in the SRT-WiFi testbed such as signal analysis
and interference generation.

Fig. 6. SDR hardware used in the SRT-WiFi testbeds.

A. Synchronization

We ﬁrst evaluate the effectiveness of the proposed time
synchronization mechanism in SRT-WiFi. To support multi-
cluster SRT-WiFi, we let the slave AP (SAP) synchronize with
the master AP (MAP) and the stations synchronize with either
the MAP or SAP. In the experiments, we ﬁrst test the beacon
interval of the MAP by conﬁguring it to send the beacon
packets periodically. We use USRP2900 to capture the beacon
signal and use the COTS hardware (AR9285) working in the
monitoring mode to sniff the packets.

10

Fig. 7. Time drifts in beacon interval by (a) USRP2900 and (b) AR9285.

Fig. 8. Synchronization performance of (a) level-1 synchronizations and (b)
level-1 and level-2 synchronizations.

In the tests, we set the slot length at 500 µs and the super-
frame length at 127 slots so the expected beacon interval is
63.5 ms (one beacon per superframe). Fig. 7 (a) and (b) show
the time drift of the beacon interval measured by USRP2900
and AR9285, respectively. The time drift is measured as the
error between the inter-arrival time of two consecutive beacons
and the expected superframe length (63.5 ms). The SDR result
is measured directly from the captured base band signal and
the average error, maximal error and the standard deviation
are 0.03 µs, 0.07 µs and 0.02 µs, respectively. On the other
hand, the result measured from AR9285 has the average error,
maximal error and the standard deviation as 0.13 µs, 0.54 µs
and 1 µs, respectively. From the comparison, we observed that
the timer of SRT-WiFi is much more accurate than that of
the COTS hardware. Thus the implementation using COTS
hardware needs a larger guard time in the slot design to avoid
potential collision.

Next, we test the synchronization performance of multi-
cluster SRT-WiFi networks. In SRT-WiFi, the MAP provides
the reference clock. For the SAPs and stations connecting
to the MAP,
they directly listen to the beacons from the
MAP and we call it level-1 synchronization. For the stations
connecting to the SAPs, we call it level-2 synchronization. We
use three APs for the performance evaluation. To test level-1
synchronization performance, we set AP1 as the MAP sending
beacons in slot 0, and AP2 and AP3 as SAPs to synchronize
with AP1. We use USRP2900 to measure the beacon sending
time of the three APs. Fig. 8 (a) shows the sending time
errors of AP2 and AP3. AP2 uses slot 115 to send beacons.
The average sending time error from the measurement is 0.01
µs and the standard deviation is 0.08 µs. For AP3, it uses

ZC706ADRV9364-Z7020USRP290004080120160−10010(a)SRT-WiFi04080120160PacketSequence−10010TimeDrift(100ns)(b)AR9285020406080100−10010(a)AP2AP3020406080100PacketSequence−10010TimeDrift(100ns)(b)AP2AP3(cid:54)
slot 117 to send beacons. From the measurement, the average
error is 0.03 µs and the standard deviation is 0.1 µs. These
results show that the accuracy of level-1 synchronization can
be well maintained within 1 µs. Next, we let AP2 synchronize
with AP1 while AP3 synchronize with AP2 to test level-
2 synchronization performance. We conﬁgure AP1 to send
beacons in slot 0 and AP2 to synchronize with AP1 and send
beacons in slot 2. The measured results in Fig. 8 (b) show that
the average error is 0.04 µs. We further let AP3 synchronize
with AP2 and send beacons in slot 119 and the average error
is 0.5 µs and the standard deviation is 0.09 µs. The results
show that although level-2 synchronization is slightly worse
than level-1 synchronization, the error can still be within 1
µs which is signiﬁcantly better than the COTS hardware. The
error comes from not only the SRT-WiFi devices, but the SDR
measurement since the sampling rate we use in the experiment
is 20 MHz. With a higher sampling rate of SDR, more accurate
results are expected.

B. SNR Measurement

Fig. 10. Standard deviation of two SNR measurement methods measured
from the SRT-WiFi testbed.

Fig. 11. PDR under different rates against SNR.

the SNR values by conﬁguring USRP1 to add noise and let
the station send UDP packets with a payload size of 500 bytes
from the application layer and count the number of received
packets on the AP side. This result gives us the reference to
perform rate adaptation.

TABLE III
TX RATES AND SLOT LENGTHS OF A 500-BYTE PACKET UNDER
DIFFERENT SNR VALUES.

SNR threshold (dB)
Rate (Mbps)
Slot length (µs)
Atomic slot usage

25
54
174
1

22
48
186
2

19
36
218
2

17
24
282
2

15
18
342
2

13
12
470
3

10
9
594
4

7
6
846
5

Table III presents the data rates applied under different
channel SNR values and the corresponding slot lengths when
transmitting a 500-byte UDP packet. We give the SNR value
threshold for each data rate to be used only when the measured
SNR value is no smaller than the corresponding threshold. The
slot length includes the length of the data packet, the SIFS
(16 µs), the ACK and the guard time (10 µs). The settings in
Table III are applied in all the following experiments.

C. Throughput and Round Trip Time (RTT)

In this set of experiments, we evaluate the throughput and
round trip time (RTT) of SRT-WiFi, by comparing SRT-WiFi
with the regular WiFi using CSMA/CA.

For the throughput comparison, we set up one AP and test
different scenarios with one, two and three stations. To ﬁnd
the best system performance, we only use the 54 Mbps data
rate. In the experiment, we let the stations keep sending UDP
packets with 500-byte payload size to the AP, and the packets
received at the AP side are recorded with the corresponding

Fig. 9. Setup of the SRT-WiFi testbed for SNR measurement.

In the second set of experiments, we test the SNR measure-
ment performance of SRT-WiFi, and the setup of the testbed
is shown in Fig. 9. We use two SRT-WiFi devices, one for AP
and one for station. The TX connector of the station connects
to the input of a signal combiner. The other input of the signal
combiner connects to a USRP device (USRP1). The combined
signal is then divided by a signal divider into two ways, one
to another USRP (USRP2) and the other connected to the RX
of the AP. Both RX of the station and TX of the AP use the
antenna. During the experiment, the signal from AP to the
station goes on air while the signal from station to AP goes
through the cable. We use USRP1 to add controllable noise
to the signal from the station to the AP. The AP measures
the SNR. At the same time we use USRP2 to record the same
signal as the one received at the AP. We then compute the SNR
value from USRP2 as the ground truth and compare the results
from AP to evaluate the SNR measurement performance.

Fig. 10 shows the standard deviation measured from both
the cross-correlation method and the signal power method.
We only test the SNR from 7 dB to 30 dB since when the
SNR is lower than 7 dB, the connection between the AP and
station is hard to maintain due to the high packet loss rate. The
experimental results show that the cross-correlation method
outperforms the signal power method in general and thus it is
used in all the following experiments.

Fig. 11 shows the packet delivery ratios of the SRT-WiFi
device under different SNR measured in the testbed. We vary

11

StationAPUSRP 1USRP 2SignalCombinerSignalDividerTXRXRXTX1015202530SNRValue(dB)0.60.70.8SD(dB)Method1:Cross-CorrelationMethod2:SignalPower51015202530SetSNRValue(dB)0.00.20.40.60.81.0PacketDeliveryRatio6Mbps9Mbps12Mbps18Mbps24Mbps36Mbps48Mbps54Mbpsreceiving time. For the schedule, we set the superframe to be
127 slots and each slot is 174 µs (see Table III).

In the throughput test for a single station, we assign 1
slot for beacon, 1 slot for AP and 125 slots for the station
to transmit. The expected throughput
is 25.52 Mbps and
the measured throughput is 25.3 Mbps with a 99.2% packet
delivery ratio (PDR). For the two-station scenario, we assign 1
slot for beacon, 6 slots for the AP and 60 slots for each station.
The expected throughput is 12.25 Mbps, and the measured
throughput of the ﬁrst station is 12.18 Mbps with a 99.42%
PDR and that of the second station is 12.251 Mbps with
a 99.99% PDR. It is worth mentioning that the measured
throughput of the second station is higher than the expected
throughput. This is due to the time drift between the PL
timer and the system timer. For the three-station scenario, we
still assign 6 slots for the AP and 40 slots for each of the
three stations. The expect throughput is 8.17 Mbps, and the
measured throughput of the three stations are 8.13 Mbps, 8.12
Mbps and 8.16 Mbps, respectively, with corresponding PDRs
as 99.54%, 99.47% and 99.94%, respectively.

We also test three scenarios for the CSMA mode in regular
WiFi. For the one-station scenario, it can achieve the through-
put of 25.95 Mbps with no packet loss where each packet
transmission takes around 174 µs. This is higher than the
theoretical value (25.931 Mbps) which is still due to the timer
drift. However, for the two-station scenario, the throughput of
the two stations are 3.58 Mbps and 3.62 Mbps, respectively.
This is tested with 1 ms UDP packet sending interval. For
shorter sending intervals, the CSMA mode is not able to handle
it with a large packet loss rate which signiﬁcantly decreases
the throughput. For the three-station scenario, the throughput
are 1.88 Mbps, 1.88 Mbps and 1.91 Mbps, respectively.

To evaluate the RTT performance, we also test three sce-
narios. We let the station send UDP packets to the AP. Once
the AP receives a packet, it returns the packet to the sender’s
address immediately. The station then records the RTT. For
the SRT-WiFi network with one station, we set the superframe
length at 121 slots and assign 1 slot for beacon, 60 slots for
the AP and 60 slots for the station. The AP slots and station
slots are placed alternately in the schedule. The average RTT
is measured as 752 µs and the standard deviation (SD) is 105
µs, and the worst RTT is 1.05 ms. For the two-station scenario,
we allocate 30 slots for the AP to each station and another 30
slots for each station to the AP. The average RTT of the two
stations are 1.37 ms and 1.41 ms, respectively. The SD values
are 203 µs and 228 µs, respectively, and the worst RTT is 2.3
ms. For the three-station scenario, the average measured RTT
are 1.2 ms, 1.23 ms and 1.22 ms, respectively. The SD values
are 410 µs, 404 µs and 414 µs, respectively. The worst RTT
is 2.75 ms. It is worth mentioning that the average RTT of
the two-station scenario is larger than that of the three-station
scenario. This is because after the AP receives the packet, the
return packet may miss the ﬁrst slot from AP to the station
due to the processing delay in the OS. For the three-station
scenario, the gap between the RX slot for the AP and the TX
slot for the stations is larger so the delay is shorter.

Regarding the RTT measurement of the CSMA mode in
regular WiFi, the one-station scenario has an average RTT
of 508.1 µs. This is lower than that of SRT-WiFi since in
the CSMA mode, the packet can be sent at any time. For
SRT-WiFi, packet transmissions strictly follow the schedule.
If the sending slot
the packet has to wait for
the next one. For the two-station and three-station scenarios,
the performance degrades signiﬁcantly. For the two-station
scenario, the RTT measurement only works when the sending
interval is larger than 5 ms. The average RTT is 613 µs and
706 µs, respectively. With this setting, for the three-station
scenario, the interval is increased to 10 ms, and the RTT values
are measured at is 630 µs, 703 µs and 685 µs, respectively.3

is missed,

D. Rate Adaptation

Fig. 12. Data rate and throughput comparison between SRT-WiFi and WiFi
in the presence of interference.

In this subsection, we demonstrate the effectiveness of the
rate adaptation function in SRT-WiFi. In the experiment, we
add interference to the channel and measure the data rates and
PDR for both SRT-WiFi and regular WiFi networks. In SRT-
WiFi, the reception SNR is measured at each device and sent
to the central network manager (CNM). CNM then decides
the data rate and constructs the schedule for the devices. In
this experiment, we set up one AP and one station. We add
the interference at the AP side and let the station to send
UDP packets to the AP and measure the PDR and SNR. The
level of interference is not ﬁxed but varies every 0.5 second,
meaning that in the ﬁrst half of each second, the interference
rises to a set level while in the next half of that second,
the interference shuts down so that we make the interference

3It is worth noting that, all the throughput and RTT tests are performed
with SDR hardware. For COTS hardware-based regular WiFi system, the
performance in CSMA mode may be different [21].

12

0501001502030SNR(dB)(b)5055606570752030(a)050100150183654DataRate(Mbps)(c)WiFiSRT-WiFi050100150Time(s)0.70.80.91.0PDR(d)WiFiSRT-WiFichange fast. Fig. 12 (b) shows the measured SNR of the
channel and Fig. 12 (a) zooms in part of the measured SNR to
show how the interference varies. The minimum SNR values
ﬁrst decrease from 27 to 12 dB and then gradually increase
back. The data rates of both SRT-WiFi and WiFi are shown
in Fig. 12 (c). Regular WiFi uses the Minstrel algorithm [24]
for rate adaptation, which adapts to the interference according
to the transmission history. The corresponding PDR is shown
in Fig. 12 (d). From the ﬁgure it can be clearly observed
that when the SNR value is lower than 20 dB, regular WiFi
is not able to keep stable transmissions. In SRT-WiFi, we
employ a conservative rate adaptation method. The CNM
buffers the measured SNR values for a time window and uses
the rate according to the lowest SNR value in the buffer.
Once a lower SNR is measured, the data rate is reduced
immediately. The rate does not go back until all the SNR
values in the buffer are higher than the SNR threshold of a
higher rate (see Table III). Although this method wastes some
resources when the channel condition is good, it provides
stable transmissions. The performance of rate adaptation in
SRT-WiFi in the presence of interference is shown in Fig. 12
(c) and it is a step shape without fast changes. Fig. 12 (d)
shows the PDR of SRT-WiFi during the test. It is always
stable because it measures the lowest SNR and applies the
corresponding rate to improve the reliability.

E. Schedule Management

TABLE IV
COMPARISON OF SCHEDULABILITY AMONG THE PROPOSED HEURISTIC
SCHEDULING ALGORITHM, EDF AND Z3-SOLVER.

Utilization
EDF (%)
HTS (%)
Z3 (%)
EDF & RCS (%)
HTS & RCS (%)
HTS & HCS (%)

0.3
45.8
75.4
75.6
20.9
30.4
52.7

0.4
19.5
48.6
49.4
11.6
17.7
30.1

0.5
10.4
32.5
33.9
6.9
9.6
15.8

0.6
5.2
19.5
21.0
2.8
4.3
8.1

0.7
2.6
9.8
11.1
1.1
2.1
4.5

0.8
0.8
4.2
5.0
0.3
0.6
1.1

0.9
0.5
1.5
1.9
0
0.1
0.1

We now present our simulation results along with a case
study to show the effectiveness of the proposed heuristic
scheduling method to solve the MSNS-RA problem. In the
simulation studies, we evaluate the performance of the pro-
posed heuristic task scheduler (HTS) and heuristic cluster
scheduler (HCS). For HTS, we compare it with EDF scheduler
and an efﬁcient satisﬁability modulo theories (SMT) solver
Z3 [35]. All the algorithms including Z3 are implemented
in Python and computed in a CPU cluster node with Xeon
E5-2690 v3 2.6 GHz CPU. The scheduling problem on each
channel is formulated as a constraint programming problem,
which could be solved by Z3.

We simulate random task sets to evaluate the schedulability
(percentage of schedulable task sets among all the generated
ones) of the three methods under the single-channel single-
cluster scenario. For each task set, we randomly generate
around 10 tasks with the total channel utilization varied from
0.3 to 0.9. Each schedulability value is generated with the
simulation of 2000 task sets. The schedulability of the three

TABLE V
COMPARISON OF THE COMPUTATION COST AMONG THE PROPOSED
HEURISTIC SCHEDULING ALGORITHM, EDF AND Z3-SOLVER ON LARGE
TASK SETS.

Scheduler
EDF
HTS
Z3

Average time cost (s)
0.019
2.609
2732.706

Schedulability
0.75%
18.37%
5.35%

Termination ratio
0%
0%
45.9%

methods with different channel utilization is shown in row 2
to 4 of Table IV. The results show that HTS is signiﬁcantly
better than EDF while slightly lower than Z3. In the results we
keep the infeasible task sets for comparison to show the trend
of how the utilization affects the schedulability. We further
compare the time costs of the three methods. Here we generate
large-scale task sets with 100 to 150 tasks in each task set
and use random channel utilization from 0.3 to 0.9. Each
schedulability value is still generated with the simulation of
2000 task sets. The results are shown in Table V and it is clear
that Z3 costs much more time than HTS. Besides, we set a
timeout for Z3 as 5000 second and it reports 45.9% terminated
cases. The above results show that HTS can achieve a good
balance between performance and time cost.

For HCS, we compare it with the random cluster scheduler
(RCS) which randomly assigns the clusters to the channels
under the multi-cluster multi-channel scenario. In each task
set, we randomly generate 4 to 8 channels and 2 to 10
clusters with 5 to 15 tasks in each cluster. The average channel
utilization is also varied from 0.3 to 0.9. The tasks of clusters
are assigned to channels by HCS or RCS and then each
channel is scheduled by HTS or EDF. If all the channels
are schedulable we count it as a schedulable case and ﬁnally
compute the schedulability. From Table IV row 5 to 7, with
RCS, HTS keeps the advantage comparing to EDF. With the
proposed HTS and HCS working together, the schedulability is
further improved compared with using HTS and RCS together.

Fig. 13. An overview of the multi-cluster SRT-WiFi testbeds.

TABLE VI
PARAMETERS OF TASKS USED IN THE CASE STUDY.

Task Number
Period (AS)
Deadline (AS)
Transmission Unit Number

1
15
10
1

2
15
10
1

3
15
10
1

4
15
10
2

5
30
29
2

6
30
30
1

In addition to the simulation studies, we also implement
HTS on a multi-cluster SRT-WiFi testbed and perform a case
study to validate the design correctness. This multi-cluster
SRT-WiFi network is conﬁgured with two APs (AP1 and AP2
for Cluster1 and Cluster2, respectively) in one channel and

13

AP1STA1STA2AP2STA3STA4USRPRouterCNMNoiseAntennaUplinkDownlinkSTA3 and STA4 drop to 12 Mbps and 18 Mbps, respectively,
to address the interference. On the other hand, STA1, STA2
and AP1 are barely affected by interference and their data
rates are 54 Mbps, 36 Mbps and 12 Mbps, respectively. Their
average PDR are 98.59%, 98.53% and 98.24%, respectively.
We then evaluate the performance of EDF under the same
experiment settings. EDF is only able to generate a feasible
schedule in Stage 1 and devices cannot require more atomic
slots when the interference level increases. With this con-
straint, in Stage 2 and Stage 3, the data rate of STA3 can
only drop to 18 Mbps while the rate of STA4 keeps the
same. This causes the PDR of STA4 to drop signiﬁcantly
in Stage 2 and 3 and its connection breaks in Stage 3. In
Cluster1,
the average PDR of STA1, STA2 and AP1 are
99.13%, 99.22% and 98.22%, respectively, and the rates keep
unchanged. These results conﬁrm that our proposed heuristic
scheduling algorithm can generate feasible schedules and keep
higher PDR in more noisy scenarios compared to EDF. And
for the schedule updating details, please refer to Section IV.

VII. RELATED WORKS

There are several surveys on high-speed real-time wireless
networking [1], [9]. [1] gives a survey on existing high-speed
real-time wireless networking solutions and rate adaptation
methods. [9] gives a comprehensive survey and classiﬁcation
of the recent deterministic enhancement approaches in IEEE
802.11 networks including both the widely used real-time
mechanisms like IEEE 802.11e EDCA and HCCA and some
on-the-way standards like IEEE 802.11ax/aa/ah.

For the existing works on high-speed real-time wireless
networking implementation, most of them are soft real-time
based on the IEEE 802.11e [10], [12]–[14], [36]–[38]. IEEE
802.11e introduces the hybrid coordination function (HCF)
controlled channel access (HCCA) which enables the polling
method and the enhanced distributed channel access (EDCA)
which enables priorities in the transmissions and uses the
highest priority for the real-time transmissions to guarantee
their access to the channel. [11], [15]–[17], [39] study the
real-time performance based on the polling method using
HCCA. [16] proposes a frequency domain polling method and
evaluates the real-time performance through simulations. [10],
[13] evaluates the performance of HCCA and EDCA in real-
time transmission with simulations. [14] claims that the point
coordination function (PCF) is not widely implemented on the
OTS hardware and it uses the virtual token which is based
on the 802.11e EDCA where all the real-time stations are
assigned the highest priority in the contention. The real-time
stations hold the token and use the channel in turns. [36]
proposes a TDMA-based MAC protocol based on the IEEE
802.11e EDCA where all the stations follow the schedule and
the station in the corresponding slot sends the packets using the
highest priority to avoid contention with other stations and the
collision. [37] presents three different MAC layer protocols for
the real-time wireless communication based on IEEE 802.11e
where the ﬁrst is a scheduled round-robin method and the other
two are contention-based and the time critical packets have

Fig. 14. The task schedule constructed by the MSNS-RA heuristic scheduling
algorithm in the case study.

TABLE VII
COMPARISON OF SNR, PDR AND DATA RATES IN THE CASE STUDY.

Scheduler
& Stage
Heu.@S1
Heu.@S2
Heu.@S3
EDF@S1
EDF@S2
EDF@S3

SNR (dB)

Rate (Mbps)

PDR (%)
AP2 STA3 STA4 AP2 STA3 STA4 AP2 STA3 STA4
20.8
20.6
20.5
20.8
20.6
20.5

36
36
36
98.26 98.20 36
36
98.42 24.5
36
92.31 0

26.2
19.0
16.8
26.2
19.0
16.8

21.1
15.9
14.2
21.1
15.9
14.2

98.98 98.94 97.24

54
24
18
54
54
54

36
18
12
36
18
18

98.15

each AP is connected with two stations (STA1 and STA2
in Cluster1, STA3 and STA4 in Cluster2). Fig. 13 gives
an overview of the testbed including the Central Network
Manager (CNM), APs and stations with a total number of
6 links. CNM and APs are connected to a router to form a
backbone network. A USRP device is further used to generate
interference through the noise antenna which is placed next
to AP2. As shown in Fig. 14, we assign a task to each link
with a speciﬁed period, release time and deadline and the task
speciﬁcations are summarized in Table VI. Each instance of
the tasks sends a UDP packet with a length of 500 bytes.
With a ﬁxed packet length, the transmission time of the packet
depends on the data rate. In the experiment, we set the atomic
slot (AS) length as 174 µs which is for transmitting a packet at
54 Mbps. The slot lengths of other rates are shown in Table III.
In the experiments, STA1 and STA2 in Cluster1 transmit to
AP1 in the uplink and AP1 transmits to STA1 in the downlink.
In Cluster2, AP2 synchronizes with AP1 and transmits to
STA3 in the downlink. At the same time, STA3 and STA4
transmit to AP2 in the uplink. During the experiments, we
add interference with three levels as three experiment stages
so that links need to adapt to proper rates to achieve good PDR.
We ﬁrst apply the proposed heuristic algorithm and Stage 1
in Fig. 14 shows the constructed schedule. We then increase
the noise level to Stage 2 and Stage 3. The measured SNR,
PDR and applied data rates of links in Cluster2 (sender name
is used to mark a link) are summarized in Table VII (a PDR of
multiple rows is the average PDR). The link quality of STA3
and STA4 drop signiﬁcantly in each stage because the noise
antenna is placed close to AP2. The SNR of STA3 and STA4
drop to 14.2 dB and 16.8 dB, respectively, therefore the rates of

14

1122332222221Task 1 (STA1-AP1)Task 2 (STA2-AP1)Task 3 (AP1-STA1)Task 4 (AP2-STA3)Task 5 (STA3-AP2)Task 6 (STA4-AP2)Stage 1:Stage 2 (Only Heuristic):22Task 5 (STA3-AP2)Task 6 (STA4-AP2)2Stage 3 (Only Heuristic):Task 5 (STA3-AP2)Task 6 (STA4-AP2)233Task Release TimeTask Deadline051015202530Slot #the highest priority based on EDCA. [12] presents a deadline-
constrained MAC protocol based on IEEE 802.11e by applying
[38] proposes a
a contention sensitive backoff mechanism.
real-time WiFi architecture which replaces the polling method
with a schedule and the real-time trafﬁc is achieved by using
the EDCA with the highest priority. Except the IEEE 802.11e,
[40], [41] analyzes the real-time performance of IEEE 802.11n
and discusses the advantages of applying IEEE 802.11n on
real-time industrial communication.

Some existing works develop their own real-time protocol
and systems. [22] presents the wireless networks for industrial
automation-factory automation (WIA-FA) which is a high-
speed real-time wireless solution for industrial automation
and factory automation. However, it only supports the ISM
2.4GHz bandwidth and the up link is contention-based which
means that the delay from station to the AP is not guaranteed.
[21], [31], [42], [43] develop a real-time high-speed wireless
communication protocol called RT-WiFi. RT-WiFi is a TDMA
data link layer protocol based on IEEE 802.11 physical layer
to provide deterministic timing guarantee on packet delivery
and high sampling rate. It is based on the COTS hardware
AR9285 and the upgraded version AR9280. [44] achieve the
time synchronization between devices based on IEEE 802.11
COTS hardware which extend the time sensitive networking
(TSN) to wireless networking. [45] also implements a real-
time mechanism based on Openwiﬁ, but only focusing on the
round-trip time of a two-way request-response communication
manner with only a ﬁxed low bit rate. No dynamic rate
adaptation or scheduling are considered.

Some works study the rate adaptation for the IEEE 802.11.
[46] proposes a method for rate adaptation for IEEE 802.11
protocol by using the RTS/CTS before the real transmission
where the receiver uses the CTS to send the channel state
and rate selection back to the sender and the sender will use
the selected rate but the SNR measurement method is not
discussed. The performance is evaluated by simulation. [47]
proposes a rate selection method for industrial networks based
on the knowledge of the SNR of the received packets. In its
implementation, the chipset AR9287 has the ability to report
RSSI and hence the SNR is able to be computed. [48] proposes
a dynamic rate adaptation using the SNR as the threshold
to trigger the rate changing and the SNR is measured by
the amplitudes of the background noise and the signal. The
SNR of the receiver is sent back to transmitter by ACK. The
performance is evaluated by simulation.

Except for the solutions based on the IEEE 802.11, there are
also some works study the cellular network for industrial real-
time applications. [18] presents the opportunities that the 5G
and LTE can be applied for industrial wireless communication.
[19] studies the use cases of the 5G in industrial applications
through simulations. [20] provides a technical overview of
private 5G networks. It introduces the concept and functional
architecture of private 5G and the industrial use cases.

Except for the works above focusing on the scheduling part,
[49], [50] build a software-deﬁned WiFi network architecture
to provide more ﬂexible network management. The association

management is centralized with distributed APs so that it
reduces the time cost of station roaming among the APs.

VIII. CONCLUSION AND FUTURE WORK

This paper presents the design, implementation and perfor-
mance evaluation of SRT-WiFi, a high-speed real-time wireless
system with full stack conﬁgurability that is based on software-
deﬁned radio (SDR) platform. We discuss the design principles
of the programmable logic and processing system of the
SRT-WiFi system and show the advantages of SRT-WiFi on
high-precision synchronization, queue management and SNR
measurement-based rate adaptation compared to existing real-
time wireless solutions. We further formulate the multi-cluster
SRT-WiFi network scheduling problem with rate adaptation
(MSNS-RA) and propose an effective heuristic solution to
solve it. The performance of the system and the proposed
algorithm are thoroughly evaluated in our SRT-WiFi testbed.
For the ongoing and future work, we shall keep improving
SRT-WiFi to support evolving features like higher bandwidth,
multiple-input and multiple-output (MIMO), beamforming and
orthogonal frequency division multiple access (OFDMA) in
IEEE 802.11n/ac/ax. Two features under development include
1) higher throughput with 40 MHz bandwidth and single-user
MIMO (SU-MIMO) in IEEE 802.11n/ac supporting multiple
data streams to be transmitted simultaneously and providing
more choices on data rate selection for SRT-WiFi, 2) multi-
user multiple-input and multiple-output (MU-MIMO) in IEEE
802.11ac enabling the AP to transmit packets to multiple
stations in one time slot which enhances the ﬂexibility of
scheduling and further reduces the jitter and latency. Besides
the throughput, we also consider more complex network
topology like the ad hoc mode. And we will deploy our system
in real industrial testbeds to test the performance with interfer-
ence pattern of real industrial environments. We shall evaluate
how these features will affect the resource management in
SRT-WiFi to improve the throughput and further reduce the
transmission latency in SRT-WiFi networks.

IX. ACKNOWLEDGEMENT

This work was partly supported by the National Science

Foundation under Award CNS-2008463 and TI-1919229.

REFERENCES

[1] F. Tramarin, A. K. Mok, and S. Han, “Real-time and reliable industrial
control over wireless lans: Algorithms, protocols, and future directions,”
Proceedings of the IEEE, vol. 107, no. 6, pp. 1027–1052, 2019.
[2] X. Guo, S. Han, X. S. Hu, X. Jiao, Y. Jin, F. Kong, and M. Lemmon, “To-
wards scalable, secure, and smart mission-critical iot systems: Review
and vision:(special session paper),” in 2021 International Conference on
Embedded Software (EMSOFT).

IEEE, 2021, pp. 1–10.

[3] E. Sisinni, A. Saifullah, S. Han, U. Jennehag, and M. Gidlund, “Indus-
trial internet of things: Challenges, opportunities, and directions,” IEEE
transactions on industrial informatics, vol. 14, no. 11, pp. 4724–4734,
2018.

[4] J. Song, S. Han, X. Zhu, A. K. Mok, D. Chen, and M. Nixon, “A
complete wirelessHART network,” in Proceedings of
the 6th ACM
conference on Embedded network sensor systems, 2008, pp. 381–382.
[5] The International Society of Automation, “ISA 100.11a.” [Online].
Available: https://www.isa.org/standards-and-publications/isa-standards/
isa-standards-committees/isa100

15

[6] R. Steigmann and J. Endresen, “Introduction to WISA: WISA-wireless

interface for sensors and actuators,” White paper, ABB, 2006.

[7] D. Dujovne, T. Watteyne, X. Vilajosana, and P. Thubert, “6TiSCH:
deterministic IP-enabled industrial internet (of things),” IEEE Commu-
nications Magazine, vol. 52, no. 12, pp. 36–41, 2014.

[8] “IEEE 802.15 WPAN™ Task Group 4.” [Online]. Available: https:

//www.ieee802.org/15/pub/TG4.html

[9] Y. Cheng, D. Yang, H. Zhou, and H. Wang, “Adopting IEEE 802.11
MAC for industrial delay-sensitive wireless control and monitoring
applications: A survey,” Computer Networks, vol. 157, pp. 41–67, 2019.
[10] G. Cena, L. Seno, A. Valenzano, and C. Zunino, “On the performance
of IEEE 802.11 e wireless infrastructures for soft-real-time industrial
applications,” IEEE Transactions on Industrial Informatics, vol. 6, no. 3,
pp. 425–437, 2010.

[11] L. Seno, S. Vitturi, and F. Tramarin, “Tuning of IEEE 802.11 MAC for
improving real-time in industrial wireless networks,” in Proceedings of
2012 IEEE 17th International Conference on Emerging Technologies &
Factory Automation (ETFA 2012).

IEEE, 2012, pp. 1–8.

[12] G. Tian, S. Camtepe, and Y.-C. Tian, “A deadline-constrained 802.11
MAC protocol with QoS differentiation for soft real-time control,” IEEE
Transactions on Industrial Informatics, vol. 12, no. 2, pp. 544–554,
2016.

[13] H. Trsek, J. Jasperneite, and S. P. Karanam, “A Simulation Case Study
of the new IEEE 802.11 e HCCA mechanism in Industrial Wireless
Networks,” in 2006 IEEE Conference on Emerging Technologies and
Factory Automation.
IEEE, 2006, pp. 921–928.

[14] R. Moraes, F. Vasques, P. Portugal, and J. A. Fonseca, “VTP-CSMA:
A virtual token passing approach for real-time communication in IEEE
802.11 wireless networks,” IEEE Transactions on Industrial Informatics,
vol. 3, no. 3, pp. 215–224, 2007.

[15] D. K. Lam, K. Yamaguchi, Y. Shinozaki, S. Morita, Y. Nagao,
M. Kurosaki, and H. Ochi, “A fast industrial WLAN protocol and
its MAC implementation for factory communication systems,” in 2015
IEEE 20th Conference on Emerging Technologies & Factory Automation
(ETFA).

IEEE, 2015, pp. 1–8.

[16] J. Lin, W. Liang, H. Yu, and Y. Xiao, “Polling in the frequency domain:
a new MAC protocol for industrial wireless network for factory au-
tomation,” International Journal of Ad Hoc and Ubiquitous Computing,
vol. 20, no. 4, pp. 211–222, 2015.

[17] Y. Zheng, A. Xu, Y. Song, W. Zhao, and M. Liu, “Industrial wireless
deterministic communication based on WLAN: Design, implementation
and analysis,” in 2009 IEEE International Conference on Communica-
tions Technology and Applications.

IEEE, 2009, pp. 274–278.

[18] B. Holfeld, D. Wieruch, T. Wirth, L. Thiele, S. A. Ashraf, J. Huschke,
I. Aktas, and J. Ansari, “Wireless communication for factory automation:
An opportunity for LTE and 5G systems,” IEEE Communications
Magazine, vol. 54, no. 6, pp. 36–43, 2016.

[19] S. A. Ashraf, I. Aktas, E. Eriksson, K. W. Helmersson, and J. Ansari,
“Ultra-reliable and low-latency communication for wireless factory au-
tomation: From LTE to 5G,” in 2016 IEEE 21st International Conference
on Emerging Technologies and Factory Automation (ETFA).
IEEE,
2016, pp. 1–8.

[20] A. Aijaz, “Private 5G: The future of industrial wireless,” IEEE Industrial

Electronics Magazine, vol. 14, no. 4, pp. 136–145, 2020.

[21] Y.-H. Wei, Q. Leng, S. Han, A. K. Mok, W. Zhang, and M. Tomizuka,
“RT-WiFi: Real-time high-speed communication protocol for wireless
cyber-physical control applications,” in 2013 IEEE 34th Real-Time
Systems Symposium.
IEEE, 2013, pp. 140–149.

[22] W. Liang, M. Zheng, J. Zhang, H. Shi, H. Yu, Y. Yang, S. Liu, W. Yang,
and X. Zhao, “WIA-FA and its applications to digital factory: A wireless
network solution for factory automation,” Proceedings of the IEEE, vol.
107, no. 6, pp. 1053–1073, 2019.

[23] M. Dillinger, K. Madani, and N. Alonistioti, Software deﬁned radio:

Architectures, systems and functions.

John Wiley & Sons, 2005.

[24] D. Xia, J. Hart, and Q. Fu, “Evaluation of the Minstrel rate adaptation
algorithm in IEEE 802.11 g WLANs,” in 2013 IEEE International
Conference on Communications (ICC).
IEEE, 2013, pp. 2223–2228.

[25] J. Xianjun, L. Wei,

open-source
IEEE802.11/Wi-Fi baseband chip/FPGA design. [Online]. Available:
https://github.com/open-sdr/openwiﬁ

and M. Michael.

(2019)

[26] L. H. Crockett, R. Elliot, M. Enderwitz, and R. Stewart, The Zynq Book:
Embedded Processing with the Arm Cortex-A9 on the Xilinx Zynq-7000
All Programmable Soc. Strathclyde Academic Media, 2014.

16

[27] S. S. Math, R. Manjula, S. Manvi, and P. Kaunds, “Data transactions
on system-on-chip bus using AXI4 protocol,” in 2011 International
Conference on Recent Advancements in Electrical, Electronics and
Control Engineering.
IEEE, 2011, pp. 423–427.

[28] Analog Devices, “AD9364.” [Online]. Available: https://www.analog.

com/en/products/ad9364.html

[29] “IEEE 802.11 working group.” [Online]. Available: https://www.

ieee802.org/11/

[30] D. C. Mur, “Linux Wi-Fi open source drivers-mac80211, ath9k/ath5k.”
[31] Q. Leng, W.-J. Chen, P.-C. Huang, Y.-H. Wei, A. K. Mok, and S. Han,
“Network management of multicluster RT-WiFi networks,” ACM Trans-
actions on Sensor Networks (TOSN), vol. 15, no. 1, pp. 1–26, 2019.

[32] J. C. Eidson, Measurement, control, and communication using IEEE

1588. Springer Science & Business Media, 2006.

[33] E. A. Lee and D. G. Messerschmitt, Digital communication. Springer

Science & Business Media, 2012.

[34] M. R. Garey and D. S. Johnson, Computers and Intractability; A Guide
to the Theory of NP-Completeness. USA: W. H. Freeman & Co., 1990.
[35] L. De Moura and N. Bjørner, “Z3: An efﬁcient SMT solver,” in
International conference on Tools and Algorithms for the Construction
and Analysis of Systems. Springer, 2008, pp. 337–340.

[36] G. Patti, G. Alderisi, and L. L. Bello, “SchedWiFi: An innovative
approach to support scheduled trafﬁc in ad-hoc industrial IEEE 802.11
networks,” in 2015 IEEE 20th Conference on Emerging Technologies &
Factory Automation (ETFA).

IEEE, 2015, pp. 1–9.

[37] P. G. Pe´on, E. Uhlemann, W. Steiner, and M. Bj¨orkman, “Medium access
control for wireless networks with diverse time and safety real-time
requirements,” in IECON 2016-42nd Annual Conference of the IEEE
Industrial Electronics Society.

IEEE, 2016, pp. 4665–4670.

[38] R. Costa, J. Lau, P. Portugal, F. Vasques, and R. Moraes, “Handling real-
time communication in infrastructured IEEE 802.11 wireless networks:
The RT-WiFi approach,” Journal of Communications and Networks,
vol. 21, no. 3, pp. 319–334, 2019.

[39] A. Aijaz, “High-performance industrial wireless: Achieving reliable and
deterministic connectivity over IEEE 802.11 WLANs,” IEEE Open
Journal of the Industrial Electronics Society, vol. 1, pp. 28–37, 2020.
[40] F. Tramarin, S. Vitturi, M. Luvisotto, and A. Zanella, “The IEEE 802.11
n wireless LAN for real-time industrial communication,” in IEEE World
Conference on Factory Communication Systems (WFCS), 2015, pp. 1–4.
[41] ——, “On the use of IEEE 802.11 n for industrial communications,”
IEEE Transactions on Industrial Informatics, vol. 12, no. 5, pp. 1877–
1886, 2015.

[42] Q. Leng, Y.-H. Wei, S. Han, A. K. Mok, W. Zhang, and M. Tomizuka,
“Improving control performance by minimizing jitter in RT-WiFi net-
works,” in 2014 IEEE Real-Time Systems Symposium.
IEEE, 2014, pp.
63–73.

[43] Y.-H. Wei, Q. Leng, W.-J. Chen, A. K. Mok, and S. Han, “Schedule
adaptation for ensuring reliability in RT-WIFI-based networked em-
bedded systems,” ACM Transactions on Embedded Computing Systems
(TECS), vol. 17, no. 5, pp. 1–23, 2018.

[44] A. M. Romanov, F. Gringoli, and A. Sikora, “A precise synchronization
method for future wireless TSN networks,” IEEE Transactions on
Industrial Informatics, vol. 17, no. 5, pp. 3682–3692, 2020.

[45] L. Zhang, S. C. Liew, and H. Chen, “A Just-In-Time Networking Frame-
work for Minimizing Request-Response Latency of Wireless Time-
Sensitive Applications,” arXiv preprint arXiv:2109.03032, 2021.
[46] G. Holland, N. Vaidya, and P. Bahl, “A rate-adaptive MAC protocol
for multi-hop wireless networks,” in Proceedings of the 7th annual
international conference on Mobile computing and networking, 2001,
pp. 236–251.

[47] F. Tramarin, S. Vitturi, and M. Luvisotto, “A dynamic rate selection
algorithm for IEEE 802.11 industrial wireless LAN,” IEEE Transactions
on Industrial Informatics, vol. 13, no. 2, pp. 846–855, 2016.

[48] D. A. Nugroho, M. R. Khaeﬁ, and D.-S. Kim, “Dynamic rate adapta-
tion for industrial WLAN,” in 2013 International Conference on ICT
Convergence (ICTC).
IEEE, 2013, pp. 575–580.

[49] L. Suresh, J. Schulz-Zander, R. Merz, A. Feldmann, and T. Vazao,
“Towards programmable enterprise WLANS with Odin,” in Proceedings
of the ﬁrst workshop on Hot topics in software deﬁned networks, 2012,
pp. 115–120.

[50] J. Schulz-Zander, L. Suresh, N. Sarrar, A. Feldmann, T. H¨uhn, and
R. Merz, “Programmatic orchestration of wiﬁ networks,” in 2014
{USENIX} Annual Technical Conference ({USENIX}{ATC} 14), 2014,
pp. 347–358.

