An Interactive Polymer Building Toolkit for Molecular Dynamics 
Simulations: PolyMAPS 

Xiaoli Yan, Santanu Chaudhuri 

Abstract 

PolyMAPS is an open-source library that helps researchers to initialize LAMMPS[1] molecular dynamics 
simulations. It introduces an integrated workflow by combining preparation, launching, visualization, and analysis 
into a single Jupyter[2] notebook. PolyMAPS enables users to build small or polymeric molecules in a user-friendly 
interactive 3D plotting system that supports reading and writing systems in LAMMPS data file format. Hence, 
PolyMAPS demonstrates the potential of reducing the learning difficulties of new users of the LAMMPS software.  

1.  Introduction 

Many open-source preprocessing tools are developed for molecular dynamics (MD) simulations 

for simulation software such as LAMMPS, GROMACS[3], CP2K[4], etc. Analysis and building tools, 

such as Moltemplate[5], Packmol[6], VMD[7], EMC[8], OVITO[9], Avogadro[10], etc., are mostly 

designed by experienced scientists who are very familiar with simulation workflow. These are all 

excellent software packages that specialize in their own domains, and they are made freely available to 

the scientific community by diligent scientists and engineers. However, a reasonably complex simulation 

system is usually built, simulated, and analyzed by multiple different pieces of open-source software that 

require various styles of user interface and experience. Commercial software packages with pre-designed 

workflows, such as Scienomics MAPS[11], Materials Studio[12], etc., can sometimes simplify the 

process. These issues could lead to steep learning curves and tremendous entry barriers for the students 

and beginner scientists who are relatively new to this knowledge domain. For the entry-level audiences in 

the field of MD simulations, an intuitive and graphical interface would help significantly to begin with; 

and a unified programming interface is helpful for the users to develop customized functionalities in the 

long run.  

Input and output file formats of different simulation-related software packages vary considerably 

due to different software specialties and architectures. In many situations, the same piece of information 

describing the same molecular system appears in various file formats during the prototyping stage of a 

 
 
 
 
 
 
simulation, e.g.: LAMMPS uses its own specialized and customizable file formats for static systems[13] 

and trajectories[14]; XYZ[15] file can contain static systems and trajectories that contains atoms but not 

bonds; PDB[16] file can record static systems and trajectories with both atoms and bonds, but it has 

certain limitations since it was developed in the 1970s, etc. In addition, many old file formats have 

redundant information due to compatibility issues. Software packages, like OpenBabel[17]–[19] and 

RDkit[20], become convenient when files are being converted from one format into another. On the other 

hand, the Simplified Molecular-Input Line-Entry System (SMILES)[21]–[23] has become popular in 

recording small molecules in the cheminformatics community since it is portable and readable to both 

humans and machines[24]–[26]. SMILES notation and its variants have also been employed in the field of 

polymeric science given its capability and flexibility in describing molecular structures with linear and 

branched topologies. BigSMILES[27] has been the avant-garde in exploring the possibility of abstracting 

compositional information with specialized SMILES notations and syntax.  

There are many open-source visualization packages that excel in their own domain expertise, 

such as VMD and OVITO, but a similar learning barrier exists here. VMD has both Tcl[28], Python 

command interfaces, and a well-organized GUI, but not all functionalities are available through GUI. 

OVITO has a Python command interface and a comprehensive GUI menu with functionalities well-

documented on its website, and it even supports querying information via mouse-hovering over atoms. 

The visualization windows of both programs are clickable to manipulate the view angle and zooming of 

molecular systems. VMD’s GUI and command line are both free, but Ovito’s GUI requires a license 

when the Python scripting module is involved. Another noticeable effort has similarities to this work is 

Polymer Structure Predictor (PSP)[29]. It also has a Jupyter-based interface and in place visualization, 

and its visualization is based Py3Dmol[30], a Python-interfaced 3Dmol.js. Although being an interactive 

and portable 3D visualization library, py3Dmol lacks the capability of tooltip on mouse hover for in place 

information querying. A fancier approach is the Game-Engine-Assisted Research platform for Scientific 

computing (GEARS)[31], which leverages the existing graphics and physics technology from popular 

game engines, like Unity[32] and Unreal[33], to analyze and visualize LAMMPS simulations. The user 

interface to input commands to the system via virtual reality headsets and controllers offers the users an 

immersive experience that is beyond the common working atmosphere in a classroom or an office.  

For an average MD simulation, a typical workflow can be defined with the following steps:  

1)  building single molecule (or monomer) geometry and topology, 

2) 

force field parameterization and assignment, 

3)  generating a polymeric or bulk or interfaced system for studying a group of specific 

properties, 

4) 

launching simulation software suite with computational resource allocation, 

5)  generating plots and tables from the captured outputs of the simulation. 

At each step, the user should have much access to visual inspection and in place information 

queries as possible to minimize the effort in prototyping. This work is proposing a generalized and 

lightweight workflow, Polymeric Molecule Assembly Programming System (PolyMAPS), for 

prototyping and analyzing polymeric systems. The essence of designing a comprehensive workflow for 

MD simulations is to integrate as many functionalities as possible into one software environment as 

possible. Thus, by significantly reducing the learning barrier of programming and different types of pre- 

and post-processing software. The PolyMAPS workflow is designed to initiate a LAMMPS simulation for 

testing and demonstration purposes, so there are limitations in each part of the software's functionalities 

due to the computational and graphics capabilities of a Jupyter notebook. The input and output system 

leverages the portability of SMILES notation and the robustness of native file formats supported by 

LAMMPS. Simulation systems with a very large number (>100,000) of atoms are out of the scope of this 

work.  

2.  Methodology 

The center of the PolyMAPS workflow is a Jupyter notebook with Python[34] kernel. As 

a general-purpose programming language, Python has been widely welcomed in the data science 

 
community. Instructions written in Python using NumPy[35], SciPy[36], and Pandas[37] 

packages are implemented to manipulate the coordinates and other parameters of atoms and 

molecules. An interactive visualization tool is developed based on Plotly[38] to demonstrate the 

atoms and bonds with their corresponding indices and atom information.  

Figure 1. Molecular simulation building workflow: 

In stage 1, the program starts with either a monomer segment or a complete molecule in 

the LAMMPS data format[39]. If a complete molecule is already defined, stage 1 can be skipped. 

A linear polymer chain will require a copy of the left terminal segment, a copy of the right 

termination segment, and copies of the monomers forming the linear polymer chain. Typically, a 

termination segment has one linkage anchor, and a monomer segment has two linkage anchors. 

Branched polymeric systems can also be formed by defining monomers with more than 2 linkage 

anchors. With a user-defined degree of polymerization, the program can generate a linear 

 
 
polymer chain with 3D coordinates and the correct bond linkage between monomer segments. 

The built polymer chain is packaged as a molecule in LAMMPS data format for further 

processing. The atomic partial charge and atom types are also determined in this stage.  

In stage 2, the force field parameters are assigned to the molecule that was built in stage 

1. For example, the Charmm general force field[40] (CGenFF) files are parsed, and the related 

parameters are loaded into Pandas data frames by screening all the atom types. By matching all 

the possible permutations of the many-body interactions from the loaded parameter data frames: 

angle, dihedral, and improper, all interactions are detected and assigned to the corresponding 

selection of atoms automatically. OPLS-AA[41] force field is also supported by directly using an 

externally generated LAMMPS data file from the LigParGen[42]–[44] website. Then, the 

workflow can skip stages 1 and 2, and go straight to stage 3.  

In stage 3, a larger scale system that is statistically meaningful can be built using the 

defined molecules. Packmol is commonly used in the community in order to generate randomly 

initialized systems for MD simulations. However, the supported file formats are limited to XYZ, 

PDB, and Tinker. For XYZ, no bonding information is present before or after the coordinates’ 

manipulation; for PDB and Tinker, bonding information can be defined and preserved through 

the process, but converting the Packmol output file to LAMMPS data format with angle, 

dihedral, improper and partial charges could be challenging. PolyMAPS offers the user the 

opportunity to choose how to manipulate atomic coordinates by separating this process from the 

simulation initialization workflow. Users can choose whether to use Packmol or to generate new 

atomic coordinates manually in Python or with LAMMPS built-in functions.  

A single molecule system with assigned force field parameters and box boundaries will 

act as a building block to prepare a more complicated system for computational studies. By 

duplicating the existing building blocks and stacking them into a larger system using user-

defined box sizes, a bulk polymer system can be built. This is achieved by invoking the 

"replicate" command from LAMMPS. Mixing different types of molecules is also supported for 

complex systems such as aqueous solutions, multi-phase segregation systems, multi-phase 

dispersion systems, etc.  

In stage 4, users can define the LAMMPS simulation condition with either a text file-

based command interface or the PyLAMMPS[45] interface within the Python environment. For 

small and simple systems, users can launch jobs locally, but for larger and complex systems that 

require computational cluster access, a job submission script generator is provided. Templates 

and sample scripts for the Torque[46] system and the Slurm[47] system are provided.  

In stage 5, simulation result visualization can be achieved by using the interactive 

plotting capabilities of Plotly. A LAMMPS log parsing script is provided for the default log 

style. Selected properties of the system and computational performance metrics can be visualized 

in the same Jupyter notebook. In case a .xyz trajectory file is generated by LAMMPS, the 

workflow can help convert it to a regular .xyz trajectory with element symbols instead of atom 

type numbers. Using Py3Dmol[48], the trajectory animations can be visualized in the Jupyter 

notebook. An alternative trajectory visualization tool with interactive features is implemented 

using Plot.ly. Both the regular .xyz trajectory file format and customized LAMMPS trajectory 

dump format are supported.  

3.  Results and discussion 

a.  Case study: preparing a batch of simulation jobs 

 
For traditional computation clusters, Torque and Slurm are common 

resource management software. Manually managing parallelly launched jobs with 

an independent set of simulation parameters could be challenging. A simple job 

script generating system is implemented in PolyMAPS to organize the simulation 

files and directory.  

Figure 2. A batch of simulation jobs with two independent parameters A1 and A2. 

A1 has m levels of values, and A2 has n levels of values. Each job is defined by a 
combination of (A1, A2) values, and each job occupies a folder in the root directory.  

PolyMAPS allows users to define the number of independent parameters 

with individual levels of values and then generates the directories and files with 

corresponding parameters. For example, a set of simulations with temperatures 

and pressure within the cartesian product of {283 K, 303 K, 323 K, 343 K, 363 

K} 

 {1 atm, 2 atm}, a total of 10 folders with 10 independent copies of 

×

simulation will be prepared.  

 
 
In addition to the folders holding all the simulation files and resource 

management scripts, a short bash script is also generated in the root folder. This 

bash script serves as an automated submission scheduler for the files generated 

above so that the user need not to access individual directories and submit the jobs 

manually.  

b.  Launching MD simulations inside a Jupyter notebook to generate polymers 

A polymeric structure with custom terminations, monomer, and 

polymerization scheme can be defined and generated using the PolyMAPS 

functionalities. The building process of a system with polyethylene oxide (PEO) 

molecules is demonstrated.  

(a)                                  (b)                                       (c) 

 
 
 
 
                         (d) 

Figure 3. Building blocks of a polyethylene oxide molecule:  
(a) head termination block: OH-CH2-X with anchor position X (labeled with pink 
color); (b) monomer block: CH2-O-CH2-X with anchor position X (labeled with 
pink color); (c) tail termination block: CH2-OH; (d) assembled PEO molecule. 
Atom color code: hydrogen as red, carbon as grey, oxygen as white.  

As shown in Fig. 3, a polyethylene oxide (PEO) with a degree of 

polymerization 4 can be decomposed into 2 termination blocks: OH-CH2-X, 

CH2-OH, and a repetitive monomer block: CH2-O-CH2-X. Letter X is used to 

denote the anchoring position of the next building block’s first atomic position. 

For example, when a monomer block is being attached to a head block, the 

monomer block is first translated so that the left-most carbon atom overlaps with 

the anchoring position of the head block, site X from the head block is removed, 

and bonding information is updated.  

 
 
 
 
 
 
Once a polymer molecule’s atomic positions and bonding connectivities 

are all defined, the force field assignment process is ready to take place. 

PolyMAPS is designed to be force field agnostic so that the same molecule can be 

simulated with different flavors of force field parameterization schemes under a 

little amount of effort. Here, the assignment of CGenFF is demonstrated. Since 

the PEO molecule is documented in the force field files from CGenFF: 

top_all36_cgenff.rtf[49], the related atom types, bond types, angle types, dihedral 

types, and improper types are parsed and loaded into the Jupyter notebook as 

Pandas data frames, as shown below in Table 1~4. 

at 

epsilon  Rmin/2 

eps,1-4  Rmin/2,1-4  Comment 

1  HGA2 

-0.035 

1.34 

2  HGP1 

-0.046 

0.2245 

0 

0 

0  # alkane, igor, 6/05 

0  # polar H 

3  CG321 

-0.056 

2.01 

-0.01 

1.9  # alkane (CT2), 4/98, yin, adm jr, also used by viv 

4  OG301 

-0.1 

1.65 

5  OG311 

-0.1921 

1.765 

0 

0 

0  # ether; LJ from THP, sng 1/06 

0  # og MeOH and EtOH 1/06 (was -0.1521 1.7682) 

Table 1. LJ interaction parameters 

at1 

at2 

Kb 

b0 

Comment 

1  CG321  CG321 

222.5 

1.53  # PROT alkane update, adm jr., 3/2/92 

2  CG321  OG301 

360 

1.415  # diethylether, alex 

3  CG321  OG311 

428 

1.42  # PROT methanol vib fit EMB 11/21/89 

4  CG321  HGA2 

309 

1.111  # PROT alkane update, adm jr., 3/2/92 

5  OG301  OG311 

300 

1.461  # PBG, yxu, RNA 

6  OG311  HGP1 

545 

0.96  # PROT EMB 11/21/89 methanol vib fit; og tested on MeOH EtOH,... 

Table 2. Bond interaction parameters 

at1 

at2 

at3  Ktheta 

r 

kUB 

rUB 

comment 

1  CG321  CG321  CG321 

58.35  113.6 

11.16 

2.561 

# PROT alkane update, adm jr., 3/2/92 

2  CG321  CG321  OG301 

45  111.5 

3  CG321  CG321  OG311 

75.7  110.1 

0 

0 

0 

0 

# diethylether, alex 

# PROT MeOH, EMB, 10/10/89 

4  CG321  CG321 

HGA2 

26.5  110.1 

22.53 

2.179 

# PROT alkane update, adm jr., 3/2/92 

5  OG301  CG321 

HGA2 

45.9  108.89 

6  OG311  CG321 

HGA2 

45.9  108.89 

0 

0 

0 

0 

# ETOB, Ethoxybenzene, cacha 

# PROT MeOH, EMB, 10/10/89 

7  HGA2  CG321 

HGA2 

35.5 

109 

5.4 

1.802 

# PROT alkane update, adm jr., 3/2/92 

8  CG321  OG301  CG321 

95  109.7 

9  CG321  OG311 

HGP1 

10  OG301  OG311 

HGP1 

50 

61 

106 

98.3 

0 

0 

0 

0 

# diethylether, alex 

0  # sng mod (qm and crystal data); was 57.5 106 

0 

# PBG, yxu, RNA 

 
 
 
Table 3. Angle interaction parameters 

at1 

at2 

at3 

at4 

Kchi 

1  CG321  CG321  CG321  CG321 

0.0645 

2  CG321  CG321  CG321  CG321  0.14975 

3  CG321  CG321  CG321  CG321  0.09458 

4  CG321  CG321  CG321  CG321  0.11251 

5  CG321  CG321  CG321  OG301 

6  CG321  CG321  CG321  OG301 

0.16 

0.39 

7  CG321  CG321  CG321  OG311 

0.195 

8  CG321  CG321  CG321 

HGA2 

0.195 

9  OG301  CG321  CG321  OG301 

10  OG301  CG321  CG321  OG301 

11  OG301  CG321  CG321 

HGA2 

0.25 

1.24 

0.19 

12  OG311  CG321  CG321 

HGA2 

0.195 

13  HGA2  CG321  CG321 

HGA2 

14  CG321  CG321  OG301  CG321 

15  CG321  CG321  OG301  CG321 

16  CG321  CG321  OG301  CG321 

0.22 

0.57 

0.29 

0.43 

17  HGA2  CG321  OG301  CG321 

0.284 

18  CG321  CG321  OG311 

HGP1 

19  CG321  CG321  OG311 

HGP1 

20  CG321  CG321  OG311 

HGP1 

21  HGA2  CG321  OG311 

HGP1 

1.13 

0.14 

0.24 

0.18 

n 

2 

3 

4 

5 

1 

2 

3 

3 

1 

2 

3 

3 

3 

1 

2 

3 

3 

1 

2 

3 

3 

delta 

0 

180 

0 

0 

180 

0 

0 

0 

# LIPID alkane, 4/04, jbk (Jeff Klauda) 

comment 

# LIPID alkane, 4/04, jbk 

# LIPID alkane, 4/04, jbk 

# LIPID alkane, 4/04, jbk 

# methylpropylether, 2/12/05, ATM 

# methylpropylether 

# PROT alkane update, adm jr., 3/2/92 

# LIPID alkanes 

180 

# 1,2 dimethoxyethane, 2/12/05, ATM 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

# 1,2 dimethoxyethane 

# alkane, 4/98, yin and mackerell 

# PROT alkane update, adm jr., 3/2/92 

# LIPID alkanes 

# 1,2 dimethoxyethane, 2/12/05, ATM 

# 1,2 dimethoxyethane 

# 1,2 dimethoxyethane 

# diethylether, alex 

# og ethanol 

# og ethanol 

# og ethanol 

# og methanol 

Table 4. Dihedral interaction parameters 

After the force field parameters are assigned to the molecule, the packaged 

molecule is stored in LAMMPS data format with atomic coordinates, topology 

definitions, and box boundaries. This LAMMPS data file is already a syntactically 

correct simulation for LAMMPS, but a system with a large number of the same 

molecule is needed in reality. A more complex system that is statistically 

meaningful can be generated by treating the built molecule with fixed boundaries 

as a new level of building blocks. During this process, replications and linear 

transformations can be applied to the atomic coordinates while no force field 

parameter or bonding topology of the molecule is isolated and preserved. For 

 
 
 
 
 
 
instance, a 4-by-4-by-1 group of PEO molecules can be realized by utilizing the 

built-in command “replicate” from LAMMPS.  

Figure 4. A ready-to-simulate system with 16 PEO molecules with an orthogonal 

simulation box. A mouse-hovering tip enables immediate information query for any 
atoms in the 3D system.  

A relaxation simulation can be run on the polymer box with an energy 

minimization followed by an NPT ensemble. The simulation temperature is set at 300 K, 

pressure at 1 atm, and time step at 1 fs/step. The minimization process ends in 500 steps, 

followed by 200,000 steps of NPT ensemble. 

 
 
Figure 5. Simulation analysis: temperature vs. time (upper left), pressure vs. time 

(upper right), density vs. time (lower left), potential energy vs. time (lower right). All 
properties converge in 200 ps.   

 The measured temperature converges at 299 ±11.5 K, pressure at -32±2653.0 atm, 

density at 1.10±0.021 g/cm3, potential energy at 19.6±18.96 kCal/mol. The large 

fluctuations of temperature, energy, and pressure are expected due to the small size of the 

simulation[50]. The calculated density can be compared to an experimental result of 

1.124~1.126 g/cm3[51] with only -4%~-0.2% error. The simulation is conducted on a 

personal laptop with i7-8750H with 10 MPI tasks. The LAMMPS version is the 

v2021.08.31[52] distributed by Conda[53]. The total simulation CPU time is 7 minutes 

14 seconds.  

The NPT simulation trajectory dumped in both .xyz format and LAMMPS custom 

format can both be loaded into the Plot.ly-based visualization tool. The visualization 

interface is similar to the LAMMPS data file visualizer (Fig. 4) but with animation 

 
 
capabilities. The play and pause buttons can control the animation display, and a sliding 

bar is available for users to wind and rewind the trajectory animation.  

Figure 6. Plot.ly-based visualization tool with slide bar animation play control and 

hover text information of all atoms 

The building blocks of the polymer can be edited by accessing the .lmp files. 

Users can define any building blocks and modify the polymer building loop in order to 

generate linear polymers. Mixing different monomers can produce copolymer molecules. 

With one or more three-anchor monomers involved, a nonlinear polymer molecule with 

branches can also be generated.  

 
 
 
 
 
c.  Viscosity measurement by simulation 

Viscosity calculation by MD simulation is supported by LAMMPS. Here a 

study of 3 liquid molecules with the Green-Kubo method of viscosity calculation 

is demonstrated. The Green-Kubo[54], [55] method calculates the viscosity by 

sampling the autocorrelation function of all three off-diagonal stress tensor 

elements over long time periods. The dynamic viscosity of the fluid can be 

expressed as  

                               Eq. (1) [56] 

where V is the volume of the simulation box, kB is the Boltzmann constant, T is 

temperature, Pxz is the off-diagonal stress tensor element, and t is the simulation 

time.  

The simulation condition is configured as the following: the temperature at 

300 K, time step 0.1 fs/step, autocorrelation length 100,000 steps, total simulation 

time 2,000,000 steps. The molecule is replicated 8,000 times in LAMMPS and 

equilibrated under an NPT ensemble for more than 10 ns. The production run is 

conducted under an NVT ensemble.  

The three liquid molecules under examination are water, cyclohexanone, 

and 2-(2-Methoxyethoxy)ethanol (DEGME). Each type of liquid molecule is 

generated by the LigParGen server with the OPLS-AA force field. Water 

molecule is parameterized as tip4p/2005[57]. The initialized simulation box can 

be visualized with PolyMAPS as in Fig. 7.  

 
 
 
Figure 7. Simulation system with 8,000 water molecules in an orthogonal box of 
size 62 Å×62 Å×62 Å 

Given the data point number limitation of Plot.ly, rendering 3D interactive 

plots with more than 10,000 atoms can be slow depending on the locally available 

computation resource.  

Experimental Viscosity 
(mPa•s) at 25°C 

water (tip4p/2005) 

cyclohexanone  DEGME 

0.854 [58] 

2.2 [59] 

3.48 [60] 

Green-Kubo Viscosity 
(mPa•s) at 300 K 

0.79919 
(-6.4%) 

2.2461 
(+2.1%) 

3.5493 
(+2.0%) 

Table 5. Viscosity calculation compared against experimental values; percentage 
error is included in the parenthesis.  

 
 
 
 
 
The simulated system can predict the viscosity values of water, 

cyclohexanone, and DEGME within 10% relative error. 

4.  Conclusion and future work 

PolyMAPS provides researchers with a new approach to initialize simulations in 

Jupyter notebook with Python language and popular libraries, such as NumPy, SciPy, 

Pandas, Plotly, and Py3Dmol. The simulation initialization process is separated into 3 

parts: atomic coordinates, molecular topology, and force field parameters. Users still 

reserve the ability to choose whether to use PolyMAPS or other software to process these 

3 types of information. PolyMAPS provides an in place analysis and visualization 

interface to molecular systems defined in LAMMPS data format. A simple batch job 

preparation and submission system is provided so that high-throughput simulations are 

possible in computational clusters. Users can now look up atomic and bonding 

information directly in the 3D interactive plot. PolyMAPS has significantly reduced the 

learning curve and the number of tools for LAMMPS users by integrating all simulation 

processes into a single Jupyter notebook.  

PolyMAPS is still in the early stages of development, so features and capabilities 

are limited to LAMMPS simulation initialization and partial result analysis. The 

computational job management system can be improved with existing tools, such as 

FireWorks[61]. The visualization is developed using the Plot.ly python library inside the 

Jupyter notebook, so the 3D image rendering quality and interaction responsiveness are 

limited by the WebGL[62] library. Aesthetically, the WebGL-based rendering engine of 

Plot.ly does support lighting, but this will only increase the already-too-heavy 

 
 
computation load in the rendering process. Most of the existing visualization tools, like 

VMD and Ovito, support 3D lighting rendering. In the future, the interactive plotting 

interface can be improved by leveraging more hardware acceleration with more atoms in 

the system and better 3D lighting effects on the atoms and bonds.  

5.  Code Availability 

A demonstrative notebook is available on Google Colab at: 

https://colab.research.google.com/drive/1ka95GbuGGca6J-

Vf807kTWf3vLdvmWXc?usp=sharing.  

References:  

[1] 

[2] 

[3] 

[4] 

[5] 

S. Plimpton, “Fast Parallel Algorithms for Short-Range Molecular Dynamics,” Journal of 
Computational Physics, vol. 117, no. 1, Mar. 1995, doi: 10.1006/jcph.1995.1039. 

T. Kluyver et al., “Jupyter Notebooks – a publishing format for reproducible computational 
workflows,” in Positioning and Power in Academic Publishing: Players, Agents and Agendas, 2016, 
pp. 87–90. doi: 10.3233/978-1-61499-649-1-87. 

H. J. C. Berendsen, D. van der Spoel, and R. van Drunen, “GROMACS: A message-passing parallel 
molecular dynamics implementation,” Computer Physics Communications, vol. 91, no. 1–3, Sep. 
1995, doi: 10.1016/0010-4655(95)00042-E. 

T. D. Kühne et al., “CP2K: An electronic structure and molecular dynamics software package - 
Quickstep: Efficient and accurate electronic structure calculations,” The Journal of Chemical 
Physics, vol. 152, no. 19, May 2020, doi: 10.1063/5.0007045. 

A. I. Jewett et al., “Moltemplate: A Tool for Coarse-Grained Modeling of Complex Biological 
Matter and Soft Condensed Matter Physics,” Journal of Molecular Biology, vol. 433, no. 11, May 
2021, doi: 10.1016/j.jmb.2021.166841. 

 
 
 
 
 
[6] 

L. Martínez, R. Andrade, E. G. Birgin, and J. M. Martínez, “PACKMOL: A package for building initial 
configurations for molecular dynamics simulations,” Journal of Computational Chemistry, vol. 30, 
no. 13, Oct. 2009, doi: 10.1002/jcc.21224. 

[7]  W. Humphrey, A. Dalke, and K. Schulten, “VMD: Visual molecular dynamics,” Journal of Molecular 

Graphics, vol. 14, no. 1, Feb. 1996, doi: 10.1016/0263-7855(96)00018-5. 

[8] 

[9] 

I. Cabeza de Vaca, Y. Qian, J. Z. Vilseck, J. Tirado-Rives, and W. L. Jorgensen, “Enhanced Monte 
Carlo Methods for Modeling Proteins Including Computation of Absolute Free Energies of 
Binding,” Journal of Chemical Theory and Computation, vol. 14, no. 6, Jun. 2018, doi: 
10.1021/acs.jctc.8b00031. 

A. Stukowski, “Visualization and analysis of atomistic simulation data with OVITO–the Open 
Visualization Tool,” Modelling and Simulation in Materials Science and Engineering, vol. 18, no. 1, 
p. 015012, Jan. 2010, doi: 10.1088/0965-0393/18/1/015012. 

[10]  M. D. Hanwell, D. E. Curtis, D. C. Lonie, T. Vandermeersch, E. Zurek, and G. R. Hutchison, 

“Avogadro: an advanced semantic chemical editor, visualization, and analysis platform,” Journal 
of Cheminformatics, vol. 4, no. 1, p. 17, Dec. 2012, doi: 10.1186/1758-2946-4-17. 

[11] 

SCIENOMICS, “Materials And Processes Simulations (MAPS).” SCIENOMICS LLC, Paris, 2021. 

[12]  D. S. BIOVIA, “MATERIALS STUDIO.” Dassault Systèmes, San Diego, 2021. 

[13] 

“LAMMPS Data File.” https://docs.lammps.org/read_data.html#format-of-a-data-file (accessed 
Apr. 26, 2022). 

[14] 

“LAMMPS Dump Trajectories.” https://docs.lammps.org/dump.html (accessed Apr. 26, 2022). 

[15] 

[16] 

“XYZ File Format.” https://people.math.sc.edu/Burkardt/data/xyz/xyz.html (accessed Apr. 26, 
2022). 

“Protein Data Bank File Format.” https://www.umass.edu/microbio/rasmol/pdb.htm (accessed 
Apr. 26, 2022). 

[17]  N. M. O’Boyle, M. Banck, C. A. James, C. Morley, T. Vandermeersch, and G. R. Hutchison, “Open 

Babel: An open chemical toolbox,” Journal of Cheminformatics, vol. 3, no. 1, p. 33, Dec. 2011, doi: 
10.1186/1758-2946-3-33. 

[18]  N. M. O’Boyle, M. Banck, C. A. James, C. Morley, T. Vandermeersch, and G. R. Hutchison, “Open 

Babel: An open chemical toolbox,” Journal of Cheminformatics, vol. 3, no. 1, Dec. 2011, doi: 
10.1186/1758-2946-3-33. 

[19] 

“The Open Babel Package.” http://openbabel.org. 

[20] 

“RDKit, Open-Source Cheminformatics.” github.com/rdkit/rdkit. 

[21]  D. Weininger, “SMILES, a chemical language and information system. 1. Introduction to 

methodology and encoding rules,” Journal of Chemical Information and Modeling, vol. 28, no. 1, 
pp. 31–36, Feb. 1988, doi: 10.1021/ci00057a005. 

[22]  D. Weininger, A. Weininger, and J. L. Weininger, “SMILES. 2. Algorithm for generation of unique 
SMILES notation,” Journal of Chemical Information and Computer Sciences, vol. 29, no. 2, pp. 97–
101, May 1989, doi: 10.1021/ci00062a008. 

[23]  D. Weininger, “SMILES. 3. DEPICT. Graphical depiction of chemical structures,” Journal of 
Chemical Information and Modeling, vol. 30, no. 3, pp. 237–243, Aug. 1990, doi: 
10.1021/ci00067a005. 

[24] 

S. Jastrzębski, D. Leśniak, and W. M. Czarnecki, “Learning to SMILE(S),” Feb. 2016. 

[25]  N. M. O’boyle and A. Dalke, “DeepSMILES: An adaptation of SMILES for use in machine-learning 

of chemical structures,” 2018. doi: 10.26434/chemrxiv.7097960.v1. 

[26]  D. Garay-Ruiz and C. Bo, “Human-Readable SMILES: Translating Cheminformatics to Chemistry,” 

2021. doi: 10.26434/chemrxiv.14230034.v1. 

[27] 

T.-S. Lin et al., “BigSMILES: A Structurally-Based Line Notation for Describing Macromolecules,” 
ACS Central Science, vol. 5, no. 9, pp. 1523–1531, Sep. 2019, doi: 10.1021/acscentsci.9b00476. 

[28] 

“Tcl Reference Manual.”  

[29]  H. Sahu, K.-H. Shen, J. H. Montoya, H. Tran, and R. Ramprasad, “Polymer Structure Predictor 
(PSP): A Python Toolkit for Predicting Atomic-Level Structural Models for a Range of Polymer 
Geometries,” Journal of Chemical Theory and Computation, p. acs.jctc.2c00022, Mar. 2022, doi: 
10.1021/acs.jctc.2c00022. 

[30]  N. Rego and D. Koes, “3Dmol.js: molecular visualization with WebGL,” Bioinformatics, vol. 31, no. 

8, pp. 1322–1324, Apr. 2015, doi: 10.1093/bioinformatics/btu829. 

[31]  B. K. Horton et al., “Game-Engine-Assisted Research platform for Scientific computing (GEARS) in 
Virtual Reality,” SoftwareX, vol. 9, pp. 112–116, Jan. 2019, doi: 10.1016/j.softx.2019.01.009. 

[32] 

“Unity Engine.” https://unity3d.com (accessed Apr. 07, 2022). 

[33] 

“Unreal Engine.” https://www.unrealengine.com/ (accessed Apr. 07, 2022). 

[34]  G. van Rossum and F. L. Drake, “Python 3 Reference Manual.” CreateSpace, Scotts Valley, CA, 

2009. 

[35]  C. R. Harris et al., “Array programming with NumPy,” Nature, vol. 585, no. 7825, Sep. 2020, doi: 

10.1038/s41586-020-2649-2. 

[36] 

P. Virtanen et al., “SciPy 1.0: fundamental algorithms for scientific computing in Python,” Nature 
Methods, vol. 17, no. 3, Mar. 2020, doi: 10.1038/s41592-019-0686-2. 

[37] 

J. Reback et al., “The Pandas Development Team pandas-dev/pandas: Pandas, Latest.” 2021. 

[38] 

Plotly Technologies Inc. Collaborative data science, “Plot.ly.” Montréal, QC, 2015. 

[39] 

“LAMMPS Document,” 2021. https://docs.lammps.org/Manual.html (accessed Apr. 26, 2022). 

[40] 

K. Vanommeslaeghe et al., “CHARMM general force field: A force field for drug-like molecules 
compatible with the CHARMM all-atom additive biological force fields,” Journal of Computational 
Chemistry, 2009, doi: 10.1002/jcc.21367. 

[41]  M. J. Robertson, J. Tirado-Rives, and W. L. Jorgensen, “Improved Peptide and Protein Torsional 
Energetics with the OPLS-AA Force Field,” Journal of Chemical Theory and Computation, vol. 11, 
no. 7, Jul. 2015, doi: 10.1021/acs.jctc.5b00356. 

[42]  W. L. Jorgensen and J. Tirado-Rives, “Potential energy functions for atomic-level simulations of 

water and organic and biomolecular systems,” Proceedings of the National Academy of Sciences, 
vol. 102, no. 19, May 2005, doi: 10.1073/pnas.0408037102. 

[43] 

[44] 

L. S. Dodda, I. Cabeza de Vaca, J. Tirado-Rives, and W. L. Jorgensen, “LigParGen web server: an 
automatic OPLS-AA parameter generator for organic ligands,” Nucleic Acids Research, vol. 45, no. 
W1, Jul. 2017, doi: 10.1093/nar/gkx312. 

L. S. Dodda, J. Z. Vilseck, J. Tirado-Rives, and W. L. Jorgensen, “1.14*CM1A-LBCC: Localized Bond-
Charge Corrected CM1A Charges for Condensed-Phase Simulations,” The Journal of Physical 
Chemistry B, vol. 121, no. 15, Apr. 2017, doi: 10.1021/acs.jpcb.7b00272. 

[45] 

“PyLammps Tutorial,” 2021. 

[46]  G. Staples, “TORQUE---TORQUE resource manager,” 2006. doi: 10.1145/1188455.1188464. 

[47]  A. B. Yoo, M. A. Jette, and M. Grondona, “LNCS 2862 - SLURM: Simple Linux Utility for Resource 

Management.” 

[48]  N. Rego and D. Koes, “3Dmol.js: molecular visualization with WebGL,” Bioinformatics, vol. 31, no. 

8, Apr. 2015, doi: 10.1093/bioinformatics/btu829. 

[49] 

“CGenFF: Topology for the Charmm General Force Field v. 4.4 for Small Molecule Drug Design.” 

[50]  H. C. Andersen, “Molecular dynamics simulations at constant pressure and/or temperature,” The 

Journal of Chemical Physics, vol. 72, no. 4, Feb. 1980, doi: 10.1063/1.439486. 

[51] 

Sigma-Aldrich, “Polyethylene glycol 200,” 2021. 

[52] 

“conda-forge / packages / lammps 2021.08.31.” 2021. 

[53] 

“Anaconda Software Distribution, Anaconda Documentation.” Anaconda Inc., 2020. 

[54]  M. S. Green, “Markoff Random Processes and the Statistical Mechanics of Time-Dependent 

Phenomena. II. Irreversible Processes in Fluids,” The Journal of Chemical Physics, vol. 22, no. 3, 
Mar. 1954, doi: 10.1063/1.1740082. 

[55]  R. Kubo, “Statistical-Mechanical Theory of Irreversible Processes. I. General Theory and Simple 

Applications to Magnetic and Conduction Problems,” Journal of the Physical Society of Japan, vol. 
12, no. 6, Jun. 1957, doi: 10.1143/JPSJ.12.570. 

[56]  D. J. Evans and G. P. Morriss, “Transient-time-correlation functions and the rheology of fluids,” 

Physical Review A, vol. 38, no. 8, Oct. 1988, doi: 10.1103/PhysRevA.38.4142. 

[57] 

[58] 

[59] 

[60] 

J. L. F. Abascal and C. Vega, “A general purpose model for the condensed phases of water: 
TIP4P/2005,” The Journal of Chemical Physics, vol. 123, no. 23, Dec. 2005, doi: 
10.1063/1.2121687. 

J. C. Crittenden, R. R. Trussell, D. W. Hand, K. J. Howe, and G. Tchobanoglous, MWH’s Water 
Treatment. Hoboken, NJ, USA: John Wiley & Sons, Inc., 2012. doi: 10.1002/9781118131473. 

E. M. Pearce, “Kirk-Othmer encyclopedia of chemical technology, 3rd ed., Vol. I, Wiley-
Interscience, New York, 1978.,” Journal of Polymer Science: Polymer Letters Edition, vol. 16, no. 5, 
May 1978, doi: 10.1002/pol.1978.130160508. 

F. Nees, “Kirk/Othmer Encyclopedia of Chemical Technology. Vol. 1: A to Alkaloids. Vol. 2: 
Alkanolamines to Antibiotics (Glycopeptides). 4. Auflage. (Reihenherausgeber: J. I. Kroschwitz). 
Herausgegeben von M. Howe-Grant. Wiley, Chichester. Vol. 1: 1991. XXII, 1087 S., geb. 135.00 
£ – ISBN 0-471-52669-X; Vol. 2: 1992. XXVIII, 1018 S., geb. 135.00 £ – ISBN 0-471-52670-3,” 
Angewandte Chemie, vol. 105, no. 2, Feb. 1993, doi: 10.1002/ange.19931050249. 

[61]  A. Jain et al., “FireWorks: a dynamic workflow system designed for high-throughput 

applications,” Concurrency and Computation: Practice and Experience, vol. 27, no. 17, pp. 5037–
5059, Dec. 2015, doi: 10.1002/cpe.3505. 

[62] 

Tony Parisi, WebGL: Up and Running, 1st ed. O’Reilly Media, Inc., 2012. 

  
