Hardware-Software Co-Design of BIKE with
HLS-Generated Accelerators

Gabriele Montanaro
DEIB
Politecnico di Milano
Milano, Italy
gabriele.montanaro@polimi.it

Andrea Galimberti
DEIB
Politecnico di Milano
Milano, Italy
andrea.galimberti@polimi.it

Ernesto Colizzi
SIAE MICROELETTRONICA
Milano, Italy
ernesto.colizzi@siaemic.com

Davide Zoni
DEIB
Politecnico di Milano
Milano, Italy
davide.zoni@polimi.it

2
2
0
2

p
e
S
8

]

R
A
.
s
c
[

1
v
0
3
8
3
0
.
9
0
2
2
:
v
i
X
r
a

Abstract—In order to mitigate the security threat of quantum
computers, NIST is undertaking a process to standardize post-
quantum cryptosystems, aiming to assess their security and speed
up their adoption in production scenarios. Several hardware and
software implementations have been proposed for each candidate,
while only a few target heterogeneous platforms featuring CPUs
and FPGAs. This work presents a HW/SW co-design of BIKE for
embedded platforms featuring both CPUs and small FPGAs and
employs high-level synthesis (HLS) to timely deliver the hardware
accelerators. In contrast to state-of-the-art solutions targeting
performance-optimized HLS accelerators, the proposed solution
targets the small FPGAs implemented in the heterogeneous
platforms for embedded systems. Compared to the software-
only execution of BIKE, the experimental results collected on the
systems-on-chip of the entire Xilinx Zynq-7000 family highlight a
performance speedup ranging from 1.37×, on Z-7010, to 2.78×,
on Z-7020.

Index Terms—Post-quantum cryptography, code-based cryp-
tography, QC-MDPC codes, high-level synthesis, hardware-
software co-design, BIKE, FPGA

I. INTRODUCTION AND RELATED WORKS

In the near future, large-scale quantum computers are ex-
pected to break widely used public-key cryptosystems, whose
security relies on the hardness of factoring large integers
and computing discrete logarithms in a cyclic group. To
this end, post-quantum cryptography (PQC) aims to design
cryptoschemes that can be executed on traditional, i.e., non-
quantum, computers and are secure against both traditional
and quantum attacks.

In this scenario, the National Institute of Standards and
Technology (NIST) undertook the process of evaluating and
standardizing novel post-quantum schemes to face the security
threat imposed by the advances in quantum computing. Given
the wide range of scenarios that mandate the use of crypto-
graphic primitives, a goal of NIST is to ensure the possibility
of implementing the selected post-quantum cryptosystems on
the largest variety of computing platforms. Thus, efﬁcient soft-
ware and hardware implementations targeting Intel Haswell
CPUs and Xilinx Artix-7 FPGAs, respectively, are critical

This work was partially supported by SIAE MICROELETTRONICA and

by the EU Horizon 2020 “TEXTAROSSA” project (Grant No. 956831).

978-1-5386-5541-2/18/$31.00 ©2018 IEEE

factors in evaluating the NIST post-quantum candidates. How-
ever, the actual adoption of PQC into production environments
is subject to the time-consuming process of designing and
evaluating effective software and hardware implementations of
the candidate cryptosystems. To this end, the usage of high-
level synthesis (HLS) emerged as a viable solution for timely
delivery of hardware implementations of PQC solutions [1].

Starting from the cryptosystems selected for the fourth eval-
uation round of the NIST PQC contest [2], this work targets
the hardware-software (HW/SW) co-design of the BIKE post-
quantum key encapsulation module (KEM), a candidate for
future standardization that is based on QC-MDPC codes [3].
The proposed HW/SW co-design of BIKE targets embedded
platforms featuring both CPUs and small FPGAs and employs
HLS to design the hardware accelerators.

HLS has been extensively used to deliver hardware imple-
mentations of the candidates of the NIST PQC contest, includ-
ing lattice-based KEMs [1], the Classic McEliece code-based
KEM [4], and comprehensive implementations of both lattice-
based KEM and digital signature schemes [5]. A HW/SW co-
design approach exploiting HLS to design hardware accelera-
tors was successfully employed targeting Classic McEliece [4]
and lattice-based cryptosystems [6]. Notably, the state-of-the-
art contains few hardware [7]–[12] and software [3], [13], [14]
BIKE implementations, while, to the best of our knowledge,
no HW/SW co-design solution was proposed.

Contributions - In contrast to existing state-of-the-art solu-
tions targeting performance-optimized HLS accelerators, the
proposed HW/SW co-design approach aims to optimize the
area-performance trade-off for those embedded computing
platforms featuring both a CPU and programmable logic.
Notably, optimizing performance is subject
to the limited
programmable hardware resources of the considered platforms
and thus represents an additional and challenging design factor
when using HLS to design the hardware accelerators.

Compared to the reference software execution of BIKE, the
results of the proposed HW/SW co-design targeting the Xilinx
Zynq-7000 embedded-class SoC family, i.e., Z-7010, Z-7015,
and Z-7020, show performance improvements up to 2.78x.

 
 
 
 
 
 
Algorithm 1 Key generation.

Algorithm 2 Encapsulation.

Algorithm 3 Decapsulation.

1: function [H, σ, h] KEYGEN ( )
2:
3:
4:

seed = TRNG ();
H = PRNG(SHAKE(seed));
f = h0; res = h0;
for i ∈ 1 to (cid:98)log2(p − 2)(cid:99) do

f = f (cid:12) f 22i−1
if (p − 2)2[i] = 12 then

;

res = res(cid:12)f 2r−2 mod 2i

h0inv = f 2;
h = h1 (cid:12) h0inv ;
σ = TRNG ();
return {H, σ, h};

5:

6:
7:

8:

9:

10:
11:
12:

1: function [K, c] ENCAPS (h)
m = TRNG ();
2:
e = PRNG(SHAKE(m));
3:
s = e0 ⊕ (e1 (cid:12) h);
4:
m(cid:48) = m⊕ SHA3(e));
c = {s, m(cid:48)};
K =SHA3({m, c}));
return {K, c};

5:
6:
7:
8:

;

1: function [K] DECAPS (H, σ, c)
2:
3:
4:

s(cid:48) = h0 (cid:12) s;
e(cid:48) = 0;
while s(cid:48) (cid:54)= 0 do
upc = s(cid:48) · H;
e(cid:48) = e(cid:48) ⊕ (upc ≥ thr);
s(cid:48) = e(cid:48) (cid:12) H T ;
m(cid:48)(cid:48) = m(cid:48)⊕ SHA3(e(cid:48)));
a = e(cid:48) = PRNG(SHAKE(m(cid:48)(cid:48))) ? m(cid:48)(cid:48) : σ;
K = SHA3({a, c}));
return K;

5:
6:
7:

8:

9:
10:
11:

Fig. 1: Algorithms for the key generation, encapsulation, and decapsulation primitives of BIKE [3].

II. METHODOLOGY

A. BIKE speciﬁcation and baseline HLS

Figure 1 shows the algorithms for the three main primitives
of BIKE, i.e., key generation (Algorithm 1), encapsulation (Al-
gorithm 2), and decapsulation (Algorithm 3). Notably, few
critical operations dominate the computational complexity,
thus representing the leading candidates for optimization in the
HLS process. The key generation requires a binary polynomial
inversion (see lines 4-9 in Algorithm 1), a binary polynomial
multiplication (line 10), and SHAKE256-based sampling (line
3). The encapsulation requires a binary polynomial multipli-
cation (see line 4 in Algorithm 2), uniform random sampling
employing SHAKE256 (line 3), and the computation of two
SHA3-384 hash digests (lines 5 and 7). The decapsulation
requires a binary polynomial multiplication (see line 2 in Al-
gorithm 3), QC-MDPC bit-ﬂipping decoding (lines 3-7), com-
puting SHA3-384 digests (lines 8 and 10), and SHAKE256-
based sampling (line 9).

Baseline HLS implementation - Preliminary changes to the
original software are mandatory to meet the HLS speciﬁ-
cation requirements. Unbounded arrays passed as arguments
by pointer are replaced with bounded arrays. Moreover, the
original recursive formulation of the multiplication is not
supported by the HLS frameworks, therefore it was replaced
with a simpler Comba implementation.

B. HLS optimizations and HW/SW co-design

The proposed co-design approach is organized in three steps
to deliver an area-performance optimized HW/SW solution.
The performance optimization step aims to optimize the exe-
cution time of each of the three primitives of BIKE separately.
The subsequent area optimization step targets the resource
utilization of each performance-optimized primitive of BIKE.
Last, the HW/SW co-design step delivers the ﬁnal solution by
selectively implementing each primitive either in hardware or
software to maximize the area-performance trade-off.

Performance optimization - Starting from the baseline de-
signs, we explored the most time-consuming operations of
each primitive. In particular, multiplication is a critical op-
eration in all KEM primitives while also dominating the exe-
cution time for both the key generation and the decapsulation
primitives. We rewrite the multiplication code to speed up all
three KEM primitives by adding a Karatsuba multiplication
layer [15] on top of the Comba multiplication [16]. Notably,
the proposed design allows conﬁguring the number of Karat-
suba recursions at compile-time to allow a conﬁgurable area-
performance trade-off. In addition, applying loop unrolling and
loop pipelining to the innermost Comba multiplication logic
signiﬁcantly reduces the latency of multiplications.

Area optimization - Area optimization is carried out ﬁrst by
enforcing resource sharing, employing the function inlining
and resource allocation HLS directives. Resource sharing
was enforced within the bit-ﬂipping decoding, multiplication,
SHA-3, and SHAKE operations. In particular, we instantiate
the common logic of SHA-3 and SHAKE only once within
each KEM primitive since the two share a signiﬁcant amount
of C code, drastically reducing their occupied area. Since mul-
tiplication also appears in key generation while encapsulation
employs multiplication, SHA-3, and SHAKE, the area of all
three KEM primitives is actually reduced by applying the
aforementioned changes. In addition, struct variables, which
used a multitude of LUT resources, were modiﬁed into array
variables, saving a signiﬁcant amount of area. Moreover,
the storage binding HLS directive was used to force the
implementation of small variables as RAM instead of ROM
memories, for which the default implementation consumed
too many BRAM blocks. Last, array partitioning directives
were employed to reduce BRAM utilization, which otherwise
would end up as the scarcest resource due to the many array
variables declared in the C code. Such optimization allowed
indeed to force the usage of ﬂip-ﬂops, instead of BRAM, for
the smaller variables, such as 32-bit seed and 256-bit σ, m,
m(cid:48), and m(cid:48)(cid:48) detailed in Figure 1. Notably, due to the large size

TABLE I: Comparison between software and HLS-based implementations across high-level synthesis optimization process.

Target

Design
(Optimization)

CPU

Baseline SW

Baseline HLS

FPGA

Interm. HLS
(Perf)

Final HLS
(Perf+Area)

KEM
Primitive
KeyGen
Encaps
Decaps
KeyGen
Encaps
Decaps
KeyGen
Encaps
Decaps
KeyGen
Encaps
Decaps

LUT
[# (%)]
−
−
−
14110
64097
106799
17208
66887
120918
13567
23260
37160

FF
[# (%)]
−
−
−
10011
56581
86432
14428
59219
95953
11621
15571
38118

DSP
[# (%)]
−
−
−
0
0
0
0
0
14
0
0
35

BRAM Clock
[MHz]
[# (%)]
−
667
−
667
−
667
100
28
100
93
100
169
100
36
100
129
100
193
100
40
100
96
100
90

Latency
[ms (103 cc)]
332.14 (221537)
14.86 (9913)
464.61 (309894)
268.67 (26867)
16.69 (1669)
248.96 (24896)
137.83 (13783)
6.49 (649)
135.70 (13570)
137.84 (13784)
6.33 (633)
135.48 (13548)

Speedup
[×]
1
1
1
1.24
0.89
1.86
2.41
2.29
3.42
2.41
2.35
3.43

of the polynomials, in the order of thousands of bits, variables
holding polynomial data are instead left mapped to BRAM.

HW/SW co-design - The HW/SW co-design phase aims to
identify the best mix of KEM primitives executed on the CPU
and instantiated on the FPGA, depending on the performance
of the software execution and the HLS modules subject to
the resource utilization of the latter. The identiﬁed solution
must minimize latency while satisfying the area constraints
given by the FPGA part of the target SoC. The exploration
of the possible HW/SW combinations will prioritize hardware
modules that provide the most signiﬁcant latency reductions
and that occupy the smallest amount of FPGA resources.

III. EXPERIMENTAL EVALUATION

This section discusses the results of the HW-SW co-design
of BIKE with NIST security level 1, i.e., security against
quantum attacks equivalent to AES-128, targeting the Z-7010,
Z-7015, and Z-7020 Xilinx Zynq-7000 SoCs.

A. Experimental setup

The reference software execution was carried out on the
CPU part of the Xilinx Zynq-7000 SoC, executing the Xilinx
Petalinux 2022.1 operating system. The Zynq-7000 chips
feature a 32-bit dual-core ARM Cortex-A9 processor that
implements the ARM v7 ISA and runs at a 667MHz clock
frequency. The software execution targeted the C99 reference
implementation of BIKE [3].

The high-level synthesis of the hardware components was
carried out through Xilinx Vitis HLS 2022.1, starting from the
portable optimized C implementation of BIKE [17]. The high-
level synthesis and the RTL synthesis and implementation via
Xilinx Vivado 2022.1 targeted the FPGA parts of the Xilinx
Zynq-7000 Z-7010, Z-7015, and Z-7020 chips, feeding them
a 100MHz clock frequency. The available FPGA resources
consist of 17600, 46200, and 53200 look-up tables (LUT),
35200, 92400, and 106400 ﬂip-ﬂops (FF), 80, 160, and 220
DSP slices (DSP), and 60, 95, and 140 36Kb blocks of block
RAM (BRAM), respectively. The area results reported in the
following were obtained after RTL implementation.

TABLE II: Area and performance comparison between soft-
ware, hardware, and hardware-software solutions. The − mark
denotes no resources used due to software execution.

Design

SW

Z-7010
HW/SW

Z-7015
HW/SW

Z-7020
HW/SW

HW

KEM
primitive
KeyGen
Encaps
Decaps
Total
KeyGen
Encaps
Decaps
Total
Available
KeyGen
Encaps
Decaps
Total
Available
KeyGen
Encaps
Decaps
Total
Available
KeyGen
Encaps
Decaps
Total

LUT
[#]
−
−
−
−
13567
−
−
13567
17600
−
−
37160
37160
46200
13567
−
37160
50727
53200
13567
23260
37160
73987

FF
[#]
−
−
−
−
11621
−
−
11621
35200
−
−
38118
38118
92400
11621
−
38118
49739
106400
11621
15571
38118
65310

DSP
[#]
−
−
−
−
0
−
−
0
80
−
−
35
35
160
0
−
35
35
220
0
0
35
35

BRAM Latency

[#]
−
−
−
−
40
−
−
40
60
−
−
90
90
95
40
−
90
130
140
40
96
90
226

[ms]
332.14
14.86
464.61
811.61
137.84
14.86
464.61
617.31

332.14
14.86
135.48
482.48

137.84
14.86
135.48
288.18

137.84
6.33
135.48
279.65

B. Experimental results

Table I details the resource utilization of the HLS-based
implementations of BIKE and compares their performance
with the reference software execution. Resource utilization is
expressed as the absolute amount of look-up tables (LUT),
ﬂip-ﬂops (FF), DSP slices (DSP), and 36Kb blocks of block
RAM (BRAM) and their relative utilization of the resources
available on the target FPGA. Performance statistics are re-
ported in terms of the clock frequency, expressed in MHz,
and the latency, expressed in milliseconds and thousands of
clock cycles. In addition, the speedup metric represents the
ratio between the execution time of the reference software
execution and the latency of the current target.

High-level synthesis optimization - In this paragraph, we dis-
cuss the improvements to the KEM primitive modules across
the HLS optimization process, referring to the experimental
results detailed in Table I.

IV. CONCLUSIONS

This work presents an HW/SW co-design of BIKE for
those embedded platforms featuring both CPUs and small
FPGAs and employs high-level synthesis (HLS) to timely
deliver the hardware accelerators. In contrast to state-of-the-art
solutions targeting performance-optimized HLS accelerators,
the proposed solution offers an area-performance optimized
co-design targeting the small FPGAs implemented in het-
erogenous embedded platforms. Compared to the software-
only execution of BIKE, the experimental results collected on
the systems-on-chip of the entire Xilinx Zynq-7000 family
highlight a performance speedup ranging from 1.37×, on Z-
7010, to 2.78×, on Z-7020.

REFERENCES

[1] V. B. Dang, F. Farahmand, M. Andrzejczak, K. Mohajerani, D. T.
Nguyen, and K. Gaj, “Implementation and benchmarking of round
2 candidates in the nist post-quantum cryptography standardization
process using hardware and software/hardware co-design approaches,”
Cryptology ePrint Archive, Paper 2020/795, 2020, https://eprint.iacr.
org/2020/795. [Online]. Available: https://eprint.iacr.org/2020/795
[2] National Institute of Standards and Technology (NIST) - U.S. De-
partment of Commerce, “Nistir 8413, status report on the third round
of the nist post-quantum cryptography standardization process,” https:
//nvlpubs.nist.gov/nistpubs/ir/2022/NIST.IR.8413.pdf, 2022.

[3] N. Aragon, P. S. L. M. Barreto, S. Bettaieb, L. Bidoux, O. Blazy,
J.-C. Deneuville, P. Gaborit, S. Gueron, T. G¨uneysu, C. A. Melchor,
R. Misoczki, E. Persichetti, N. Sendrier, J.-P. Tillich, V. Vasseur, and
G. Z´emor, “BIKE website,” https://www.bikesuite.org/, 2021.

[4] V. Kostalabros, J. Ribes-Gonz´alez, O. Farr`as, M. Moret´o, and C. Her-
the post-quantum classic
nandez, “Hls-based hw/sw co-design of
mceliece cryptosystem,” in 2021 31st International Conference on Field-
Programmable Logic and Applications (FPL), 2021, pp. 52–59.

[5] A. Guerrieri, G. D. S. Marques, F. Regazzoni, and A. Upegui, “Design
Exploration and Code Optimizations for FPGA-Based Post-Quantum
Cryptography using High-Level Synthesis,” 3 2022. [Online]. Available:
https://doi.org/10.36227/techrxiv.19404413.v1

[6] D. T. Nguyen, V. B. Dang, and K. Gaj, “High-level synthesis in
implementing and benchmarking number theoretic transform in lattice-
based post-quantum cryptography using software/hardware codesign,”
in Applied Reconﬁgurable Computing. Architectures, Tools, and Appli-
cations, F. Rinc´on, J. Barba, H. K. H. So, P. Diniz, and J. Caba, Eds.
Cham: Springer International Publishing, 2020, pp. 247–257.

[7] J. Richter-Brockmann, J. Mono, and T. Guneysu, “Folding bike: Scalable
hardware implementation for reconﬁgurable devices,” IEEE Transac-
tions on Computers, 2021.

[8] J. Richter-Brockmann, M.-S. Chen, S. Ghosh, and T. G¨uneysu, “Racing
bike: Improved polynomial multiplication and inversion in hardware,”
Cryptology ePrint Archive, Paper 2021/1344, 2021, https://eprint.iacr.
org/2021/1344. [Online]. Available: https://eprint.iacr.org/2021/1344
[9] A. Barenghi, W. Fornaciari, A. Galimberti, G. Pelosi, and D. Zoni,
“Evaluating the trade-offs in the hardware design of the ledacrypt
encryption functions,” in 2019 26th IEEE International Conference on
Electronics, Circuits and Systems (ICECS), 2019, pp. 739–742.
[10] D. Zoni, A. Galimberti, and W. Fornaciari, “Flexible and scalable
fpga-oriented design of multipliers for large binary polynomials,” IEEE
Access, vol. 8, pp. 75 809–75 821, 2020.

[11] ——, “Efﬁcient and scalable fpga-oriented design of qc-ldpc bit-ﬂipping
decoders for post-quantum cryptography,” IEEE Access, vol. 8, pp.
163 419–163 433, 2020.

[12] A. Galimberti, G. Montanaro, and D. Zoni, “Efﬁcient and scalable
fpga design of gf(2m) inversion for post-quantum cryptosystems,” IEEE
Transactions on Computers, pp. 1–1, 2022.

[13] N. Drucker, S. Gueron, and D. Kostic, “Fast polynomial inversion for
post quantum qc-mdpc cryptography,” in Cyber Security Cryptography
and Machine Learning, S. Dolev, V. Kolesnikov, S. Lodha, and G. Weiss,
Eds. Cham: Springer International Publishing, 2020, pp. 110–127.

Fig. 2: Relative execution time, normalized to reference soft-
ware execution (lower is better).

Compared to the software execution of BIKE, the Baseline
HLS designs report a performance speedup of 1.24× and
1.86× for key generation and decapsulation, respectively,
while the encapsulation primitive was slightly slower. The
three HLS modules occupy a large number of resources,
particularly LUT and BRAM ones, with only the KeyGen one
ﬁtting in the Zynq-7000 chips.

After performance optimization, the Interm. HLS designs
are at least 2× faster than software execution, with a speedup
up to 3.42× for decapsulation, at the cost of increased area.
At the end of the area optimization step, the Final HLS
designs obtained from the area optimization step exhibit a large
resource utilization reduction with negligible performance
penalties. The Decaps module ﬁts even in the intermediate
Zynq-7000 SoC, i.e., Z-7015, while the combined KeyGen and
Decaps modules can be concurrently implemented on Z-7020.
Notably, the area-optimized Decaps module saves more than
80000 LUTs, 57000 FFs, and 100 BRAMs compared to the
baseline HLS design.

Hardware-software co-design - Table II details the resource
utilization and performance of the identiﬁed HW/SW solu-
tions, comparing them to the reference software execution
and the hardware instantiation of all three KEM primitives. In
addition, the execution time, normalized to reference software
execution, is represented in Figure 2. The KEM primitives
implemented in hardware are chosen to minimize latency while
ﬁtting into each of the three target Zynq-7000 chips.

The HW-SW co-design solution targeting the Z-7010 SoC
delivers a 1.31× performance speedup, i.e., 0.76× the latency
of software-only execution, implementing the KeyGen module
in hardware while the other two KEM primitives are executed
in software.

The identiﬁed Z-7015 design provides a 1.70x performance
speedup, i.e., 0.59× the latency of software-only execution,
implementing the Decaps module in hardware while the other
two KEM primitives are executed in software.

Finally, applying our HW/SW co-design approach to the
larger Z-7020 chip results in a 2.78x performance speedup, i.e.,
0.36× the latency of software-only execution, implementing
both KeyGen and Decaps modules in hardware while Encaps
is still executed in software.

0×0.2×0.4×0.6×0.8×1×SWHW/SWZ-7010HW/SWZ-7015HW/SWZ-7020HWRelative execution timeDesignKey generationEncapsulationDecapsulation[14] M.-S. Chen, T. G¨uneysu, M. Krausz, and J. P. Thoma, “Carry-less to bike
faster,” in Applied Cryptography and Network Security, G. Ateniese and
D. Venturi, Eds. Cham: Springer International Publishing, 2022, pp.
833–852.

vol. 145, pp. 293–294, 1962.

[16] P. G. Comba, “Exponentiation cryptosystems on the ibm pc,” IBM

Systems Journal, vol. 29, no. 4, pp. 526–538, 1990.

[15] A. Karatsuba and Y. Ofman, “Multiplication of many-digital numbers by
automatic computers,” Proceedings of the USSR Academy of Sciences,

[17] Amazon Web Services - Labs, “Additional implementation of bike (bit
ﬂipping key encapsulation),” https://github.com/awslabs/bike-kem, 2020.

