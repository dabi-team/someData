Blockchain-Oriented Software Variant Forks:
A Preliminary Study

Henrique Rocha
Department of Computer Science
Loyola University Maryland
Baltimore, USA
henrique.rocha@gmail.com

John Businge
Department of Computer Science / ANSYMO
University of Antwerp
Antwerp, Belgium
john.businge@uantwerpen.be

2
2
0
2

r
p
A
3
2

]
E
S
.
s
c
[

1
v
3
8
0
1
1
.
4
0
2
2
:
v
i
X
r
a

Abstract—In collaborative social development platforms such
as GitHub, forking a repository is a common activity. A variant
fork wants to split the development from the original repository
and grow towards a different direction. In this preliminary
exploratory research, we analyze the possible reasons for creating
a variant fork in blockchain-oriented software. By collecting
repositories in GitHub, we created a dataset with repositories
and their variants, from which we manually analyzed 86 variants.
Based on the variants we studied, the main reason to create a
variant in blockchain-oriented software is to support a different
blockchain platform (65%).

Index Terms—Blockchain-oriented software, BOS, variant

forks, hard forks, software family.

I. INTRODUCTION

Due to the popularity of cryptocurrencies [1], such as Bit-
Coin [2] and Ether [3], blockchain platforms have also become
more popular [4, 5]. Initially designed as a distributed ledger,
nowadays blockchain has grown to address many different
scenarios. For example, blockchain can be used in supply-
chain [6, 7], voting [8, 9], vehicular ad-hoc networks [10],
and others [11, 12].

Since there are many applications for blockchain [6, 7, 8,
9, 10, 11, 12, 13], with the rising popularity of blockchain
platforms there is also an increase in the development of
blockchain-oriented software (BOS) [4, 14].

Many of these BOS are developed using coding platforms
such as GitHub. The advent of social coding platforms like
GitHub, BitBucket, and GitLab have substantially improved
software reuse through forking. Developers may fork a main-
line repository into a new forked repository and take gov-
ernance over the latter while preserving the full revision
history of the former. The social coding platforms comprise
a number of software ecosystems i.e., large collections of
interdependent software components that are maintained by
large and geographically distributed communities of collab-
orating contributors [15]. A software family is subset of the
a software ecosystem. A software family comprises two or
more software projects sharing a common code base as well
as variable code. An example of a family is a variant fork and
the original project (e.g., MariaDB is a variant fork of the
upstream project MySQL). As opposed to the very common
bug-ﬁxing/feature social forks that are usually integrated back
in the upstream, variant forks are very rare and usually created

to diverge away from the upstream with no intention to
contribute back [16, 17].

Many cryptocurrency applications inherit code from the
mainline project. For example, the variant fork repository
PIVX-Project/PIVX is a cryptocurrency project hosted
on Github that was forked from dashpay/dash. More-
over, dashpay/dash was also forked from the mainline
bitcoin/bitcoin. The downstream applications contin-
uously monitor their immediate upstream and others in the
hierarchy for important updates like bug and security ﬁxes as
well as other speciﬁc updates [18]. These three cryptocurrency
BOS can be considered as a software family comprising three
variants (a mainline and two variant forks) and all other related
cryptocurrency applications form software ecosystem [16, 19].
In this short paper, we conduct a preliminary study on BOS
repositories with variant forks. We analyze the characteristics
of the repositories and ﬁnd the reason why the variant fork was
created. For example, someone may fork a Wallet application
to support a different blockchain platform than the original.
For this study, we collected 124 mainline BOS repositories in
GitHub, and 237 variant forks, for a total of 361 repositories.
From those, we manually analyzed 86 variant forks which led
to discovering the most common reason for creating a variant
in BOS is to support another blockchain platform (65% of the
investigated cases).

The remainder of this paper is organized as follows. Sec-
tion II describes our collection process for the GitHub repos-
itories which we use in this study. Section III presents our
preliminary results. Section IV discuss some related work
research. Finally, in Section V, we present our ﬁnal remarks
and outline future research goals and challenges.

II. DATA COLLECTION

To collect the repositories, we employed a similar method
adopted by another research that studied variants and software
families [16, 18]. We started by looking for mainline projects
(i.e., original repositories) using the Github’s Rest API v3
search endpoint 1. We identify the repository as being a
BOS if in their GitHub name / description / readme contains the
following keywords: blockchain, ethereum, bitcoin,

1https://docs.github.com/en/rest/reference/search

 
 
 
 
 
 
Blockchain-Oriented Software Variant Forks: A Preliminary Study

or cryptocurrency. We then ﬁltered out popular (> 5
stars and forks), long-lived (created before 2018) and active
(still updated in 2020) repositories. Then, for all the mainline
projects we found, we tried to identify and collect variant
forks. This process is subject to a known threat to validity since
previous studies revealed that the majority of forks on GitHub
are inactive [20, 21] or are social forks [22]. To reduce this
threat, we ﬁltered forks based on the following heuristics: ≥ 3
stars, ≥ 3 commits ahead of the mainline. A fork with stars
implies that it is liked by other persons other than developers.
Commits ahead of the mainline implies that the fork has added
extra functionality that is not in the original project. The is no
criteria for the thresholds of the stars and commits, however,
the lower numbers results in a lot of noise and higher numbers
results missing possibly interesting cases. To reduce on the
noise, we further ﬁltered the mainline–variant fork pairs by
ensuring they had diverging README ﬁles presenting BOS
applications (manually veriﬁed). Based on the criteria detailed
above, we gathered 124 mainline repositories, and 237 variant
forks. A spreadsheet with the dataset is publicly available.2

III. PRELIMINARY RESULTS

We start our analysis by looking at the number of variant
forks that each mainline repository has. From the 124 mainline
repositories, in 91 of them (72%) we only identiﬁed one
variant. Therefore, the median value for number of variants
is one, in our collected data. The average number of variants
is 1.91. Table I shows the top-ten mainline BOS repositories
with the most number of variants as identiﬁed by us.

TABLE I
TOP-10 BOS MAINLINES ACCORDING TO THE NUMBER OF VARIANTS.

Repository
ethereum/go-ethereum
Uniswap/uniswap-interface

bitcoin/bitcoin

monero-project/monero
ethereum/solidity
MetaMask/metamask-extension
EOSIO/eosio.contracts
tendermint/tendermint
turtlecoin/turtlecoin
bitcoinj/bitcoinj

Domain
Protocol / Node
Protocol / Token
Exchange
Protocol / Node /
Crytpcurrency
Cryptocurrency
Compiler
Browser Add-on
Smart Contracts
BFT Consensus
Cryptocurrency
Library/Protocol

# of Variants
19
15

12

9
6
6
5
5
5
4

We like to note that the mainline repositories we gathered
(exempliﬁed in Table I) have more forks than the ones used in
this study. For instance, ethereum/go-ethereum reposi-
tory, has more than 12 thousand forks. The 19 forks we showed
for this repository are the ones we were able to identify as
variants.

We manually analyze the mainline–variant fork pairs, by
comparing the repository descriptions and README ﬁles, to
ﬁnd the possible reason for variant creation. We discarded
pairs where the reason variant creation is not clear. We will

2https://bit.ly/3GV2PeO

analyze the forks for the top-ten mainline repositories we
presented in Table I.

Table II shows the variant forks we identiﬁed for the
ethereum/go-ethereum repository. The ahead by col-
umn shows how many commits the variant is ahead of the
original repository. This table also shows the possible reason
for the variant creation, based on our manual analysis.

TABLE II
VARIANTS FOR ETHEREUM/GO-ETHEREUM.

Variant
tomochain/tomochain-v1

Ahead by
1595

ShyftNetwork/go-empyrean

expanse-org/go-expanse

XinFinOrg/XDPoSChain

ubiq/go-ubiq

748

532

508

320

NoteGio/go-ethereum
268
EthereumCommonwealth/go-callisto150

second-state/lityvm

Ethersocial/go-ethersocial

BrightID/IDChain

blocknative/go-ethereum
nebulaai/nbai-node

122

103

47

36
28

AlexeyAkhunov/turbo-geth-archive26

Onther-Tech/go-ethereum
ewasm/go-ethereum

ﬂashbots/mev-geth

Giulio2002/go-ethereum
loomnetwork/go-ethereum
eth4nos/go-ethereum

22
19

11

11
9
4

Reason
Support a different
blockchain.
Support a different
blockchain.
Support a different
blockchain.
Support a different
blockchain.
Support a different
blockchain.
Unspeciﬁed.
Support a different
blockchain.
Extending the pro-
tocol.
Support a different
blockchain.
Support a different
blockchain.
Unspeciﬁed.
Support a different
blockchain.
Efﬁciency
improvement.
Unspeciﬁed.
Support
technology.
Support
technology.
Unspeciﬁed.
Unspeciﬁed.
Efﬁciency
improvement.

another

another

The ethereum/go-ethereum is the ofﬁcial Go imple-
mentation of the Ethereum [3] protocol and its client node.
The most popular reason for the variant forks is to support a
different blockchain platform (eight out of 19 forks). Since
the original repository contains the core of the Ethereum
implementation, it is possible that some of those variants to
be sidechains3 as well. We also found two forks that speciﬁed
some sort of efﬁciency or performance improvement (e.g.,
one is a lightweight client node for Ethereum). Moreover, we
found two forks to support another technology but unrelated
to the blockchain. For instance, ewasm/go-ethereum adds
support to Ewasm, which is the primary candidate to replace
EVM (Ethereum Virtual Machine) as part of the Ethereum
2.0 ”Serenity” roadmap. Just one variant we found was to
extend the Ethereum protocol. From the 19 forks, three did not

3A sidechain is a separate blockchain that runs in parallel

to another
blockchain platform (referred as mainnet). The sidechain is connected to the
mainnet and provides a bridge for transactions between both blockchains.
<https://ethereum.org/en/developers/docs/scaling/sidechains/>

2

Blockchain-Oriented Software Variant Forks: A Preliminary Study

specify in their description or readme ﬁle any difference from
the original repository. Based on their commits, we ﬂagged
them as variants, but we are unable to ﬁnd the reason for their
creation.

The repository Uniswap/uniswap-interface is an
open-source interface for Uniswap which is a protocol for
decentralized exchange of Ethereum tokens. It shares a similar
domain of ethereum/go-ethereum, but it serves a differ-
ent purpose. Tokens (or Non-fungible Tokens) are very popular
in Ethereum and, by consequence, so are token exchange
contracts and websites. From the 15 variants, 13 are just to
support a different exchange protocol or contract. The fork
NavidGoalpure/persian-uniswap-interface had
the same basic functionality as the original but it was inter-
nationalized and and support for another language was added.
The other remaining fork was not accessible anymore.

The third repository, in Table I, is bitcoin/bitcoin
which is an open source BitCoin [2] implementation of its
protocol, client node, and cryptocurrency. Therefore it is very
similar to ethereum/go-ethereum. Ten out of the 12
forks are to support a different blockchain platform and create
a new cryptocurrency. This is a much higher amount of forks to
support another platform than the Ethereum variants. Probably,
because the Ethereum repository has other functionalities,
while the BitCoin one is more limited and tied to its cryp-
tocurrency. The remaining two forks are extensions to the
regular BitCoin. For instance, OmniLayer/omnicore adds
a communication layer to enable more sophisticated smart
contracts in Bitcoin; and jlopp/statoshi claims to bring
more transparency to the nodes.

In Table III, we show the variant

forks for Monero
(monero-project/monero), which is a cryptocurrency.
We were expecting similar results from bitcoin/bitcoin,
as most variant forks for a cryptocurrency are probably to
create another type of cryptocurrency, which is similar in
principle to support a new blockchain platform.

TABLE III
VARIANTS FOR MONERO-PROJECT/MONERO.

Variant
oxen-io/oxen-core

Ahead By
3894

Beldex-Coin/beldex

1034

aeonix/aeon

electroneum/electroneum

EquilibriaCC/Equilibria

X-CASH-ofﬁcial/xcash-core

swap-dev/swap

dweab/haven-do-not-use

toints/moneroclassic

980

808

558

420

129

103

45

Reason
Support a different
Cryptocurrency
Support a different
Cryptocurrency
Support a different
Cryptocurrency
Support a different
Cryptocurrency
Support a different
Cryptocurrency
Support a different
Cryptocurrency
Support a different
Cryptocurrency
Support a different
Cryptocurrency
Maintain the clas-
sic version of the
original cryptocur-
rency.

As we expected,

the majority of the variant forks for
monero-project/monero are to support or create another
type of cryptocurrency (eight out of nine forks). There is one
fork that is used to maintain and support the classic version
of Monero.

The

ﬁfth

contains

repository

(according

to Table
the

I)
is
ethereum/solidity which
language
deﬁnition, documentation, and compiler for Solidity [23].
Solidity is one of the major languages for coding smart
contracts in Ethereum. From its variants (Table IV), two forks
are extensions for the compiler (model checking, and static
veriﬁer). One variant is to support a different platform, by
compiling Solidity into Tron Virtual Machine. Another fork
is a translation for the documentation of Solidity. Finally,
there were two forks we could not identify the reason for
their creation.

TABLE IV
VARIANTS FOR ETHEREUM/SOLIDITY.

Variant
SRI-CSL/solidity

Ahead By
1348

ScottWe/solidity-to-cmodel

tronprotocol/solidity

akira-19/solidity
Karocyt/solidity-fr
PlatONnetwork/solidity

364

174

68
62
4

Reason
Compiler
Extension
Compiler
extension
Support a different
platform
Unspeciﬁed
Translation
Unspeciﬁed

In Table I,

the sixth repository with most variants is
MetaMask/metamask-extension where we identiﬁed
six forks (Table V). MetaMask is a browser extension (Chrome
and Firefox) that facilitates browsing Ethereum blockchain on
certain websites. This repository is from a different domain
than the previous ones, by being a browser add-on.

TABLE V
VARIANTS FOR METAMASK/METAMASK-EXTENSION.

Variant
poanetwork/nifty-wallet
Conﬂux-Chain/conﬂux-portal

Ahead By
1480
869

smilofoundation/SmiloWallet-extension

142

ubiq/sparrow-extension-OLD

CoboVault/metamask-extension
dsrvlabs/celo-extension-wallet

90

64
29

Reason
Enhancement
Support a different
blockchain
Support a different
blockchain
Support a different
blockchain
Unspeciﬁed
Support a different
blockchain

Four out of six MetaMask variants were to support a differ-
ent blockchain platform. One fork was a usability enhancement
for the add-on. And one fork, we could not discover the reason
for its creation.

The

seventh repository (Table

looked was
EOSIO/eosio.contracts with ﬁve variants. This repos-
itory contains smart contracts to provide basic functions of
the EOSIO blockchain. Four out of ﬁve variants were created
to support another blockchain platform that uses EOSIO as a

I) we

3

Blockchain-Oriented Software Variant Forks: A Preliminary Study

basis. One fork did not specify its purpose on the description
or readme ﬁle.

The eighth repository (Table I) is a middleware for the
application-based blockchain platform that uses a Byzan-
tine Fault Tolerant
(BFT) consensus algorithm, Tender-
mint [24] (tendermint/tendermint). Since application-
based blockchains (such as Tendermint, and Hyperledger
Fabric) have major differences from public blockchain plat-
forms (such as Ethereum, and BitCoin), we were expecting
to observe different reasons for the creation of variants.
However, four of the ﬁve variants did not specify anything
to justify their creation, and the description and readme
ﬁles were identical
to the original repository. One fork,
QuarkChain/tendermintx, was created as an extension
to provide greater ﬂexibility for Tendermint.

The crytocurrency Turtlecoin is

the ninth repository
(turtlecoin/turtlecoin) in number of variant forks.
All ﬁve variants we found for this repository are to support or
create a new cryptocurrency based on the Turtlecoin original
code.

Finally, the ﬁnal repository on our top-ten list with most
variants (Table I) is the bitcoinj/bitcoinj. BitCoinJ
is a Java library that implements the BitCoin protocol, has
a built-in wallet, and can communicate with the BitCoin
blockchain without
the need for any other external code.
Three out of the four forks were created to support a different
blockchain platform and cryptocurrency than BitCoin. One
fork does not specify the reason for its creation.

Summarizing. We aimed to identify the possible reason for
the creation of BOS variants by analyzing the top-ten mainline
repositories with most variant forks. In total, we manually
investigated 86 variant forks from those top-ten repositories.
We can see the most popular reason for creating a variant in
BOS is to support a different blockchain platform (65% of the
variants or 56 out of 86). The second most popular reason is
the extend the original with additional features or technologies
(10% or nine out of 86). Approximately 14% of the variants
(12 out of 86) did not specify any difference with the main
repository in their description or readme ﬁle.

IV. RELATED WORK

Most studies analysed forking on Sourceforge, pre-dating
the advent of social coding platforms like GitHub [25, 26].
Several of those early studies report perceived controversy
around variant forks [27]. Jiang et al. [28] state that, although
forking may have been controversial
in the open source
software (OSS) community, it is now encouraged and a built-in
feature on GitHub.

We have encountered few studies analysing variant forks in
the social coding era [16, 17, 22, 29]. Businge et al. [22] study
focused on the Android ecosystem and found that re-branding,
simple customizations, feature extension, and implementation
of different but related features are the main motivations to
create a fork for Android apps. Zhou et al. [17] interviewed 18
developers of hard forks on GitHub to understand reasons for

forking in modern social coding environments that explicitly
support forking. Businge et al. [16] investigated the interaction
between mainline and variants. The authors quantitatively in-
vestigated code propagation among variants and their mainline
in three software ecosystems. They found that only about
11% of the 10,979 mainline–variant pairs had integrated code
among themselves.

To the best of our knowledge, there are no studies investi-

gating variant forks for blockchain-oriented software.

V. FINAL REMARKS

In this short paper, we presented a preliminary exploratory
research on the possible reasons for creating a variant fork in
blockchain-oriented software. We collected repositories from
GitHub and manually analyzed 86 variant forks from the top-
ten mainlines in our dataset.

We discovered in our dataset that for BOS variants, 65%
were created to support a different blockchain platform. This
seems like a reasonable and fast way to develop software for
a speciﬁc blockchain platform. Instead of coding everything
from scratch, a developer ﬁnds a similar BOS repository that
accomplishes its main goal, forks it, and then just changes
the protocol to interact with a different blockchain. However,
before our study, we did not know how common this practice
is.

The second most common reason for the creation of a
variant
is to extend the mainline with additional features
or technologies, occurring in 10% of the analyzed forks.
Why these extensions were not integrated into the original
repository remains an open question.

For future research, we plan to investigate all the variants in
our current dataset. Additionally, we will analyze other aspects
of the variants compared to the mainline such as number
of commits, commit size, community size, number of stars,
technical debt, etc. We also plan to contrast our ﬁndings in
BOS repositories with non-blockchain software to properly
compare the differences between them. Moreover, we would
like to contact the main developers or owners from the variants
to know the reasons why the variant was created. However,
since GitHub policy rules prohibit sending unsolicited emails,
we are not sure how to contact those developers.

ACKNOWLEDGMENT

John Businge’s work is supported by the FWO-Vlaanderen
and F.R.S.-FNRS via the EOS project 30446992 SECO-
ASSIST.

REFERENCES

[1] S. Dziembowski, “Introduction to cryptocurrencies,” in
Proceedings of
the 22nd ACM SIGSAC Conference
on Computer and Communications Security, ser. CCS
’15. New York, NY, USA: Association for Computing
Machinery, 2015, p. 1700–1701. [Online]. Available:
https://doi.org/10.1145/2810103.2812704

[2] S. Nakamoto, “Bitcoin: A peer-to-peer electronic cash

system.” 2009. [Online]. Available: bitcoin.org

4

Blockchain-Oriented Software Variant Forks: A Preliminary Study

[Online].

“Ethereum’s

Foundation,
2014.

white
[3] Ethereum
paper.”
Available:
en.wikibooks.org/wiki/LaTeX/Bibliography Management
[4] S. Porru, A. Pinna, M. Marchesi, and R. Tonelli,
“Blockchain-oriented software engineering: Challenges
and new directions,” in 2017 IEEE/ACM 39th Interna-
tional Conference on Software Engineering Companion
(ICSE-C), 2017, pp. 169–171.

“Making smart

[5] L. Luu, D.-H. Chu, H. Olickel, P. Saxena, and
in
contracts
A. Hobor,
the 2016 ACM SIGSAC Conference
Proceedings of
on Computer and Communications Security, ser. CCS
’16. New York, NY, USA: Association for Computing
Machinery, 2016, p. 254–269.
[Online]. Available:
https://doi.org/10.1145/2976749.2978309

smarter,”

[6] R. Zhao, J. Bal, and X. Ma, “Creating lean and
agile supply chains with blockchain,” in 2021 The
3rd International Conference on Blockchain Technology,
ser. ICBCT ’21. New York, NY, USA: Association
for Computing Machinery, 2021, p. 135–146. [Online].
Available: https://doi.org/10.1145/3460537.3460558
[7] S. Mann, V. Potdar, R. S. Gajavilli, and A. Chandan,
“Blockchain technology for supply chain traceability,
transparency and data provenance,” in Proceedings of
the 2018 International Conference on Blockchain
Technology
ICBTA 2018.
New York, NY, USA: Association for Computing
[Online]. Available:
22–26.
Machinery, 2018, p.
https://doi.org/10.1145/3301403.3301408

and Application,

ser.

[8] P. Mccorry, M. Mehrnezhad, E. Toreini, S. F.
Shahandashti,
e-voting
over blockchain,” Digital Threats: Research and
Practice, vol. 2, no. 4, oct 2021. [Online]. Available:
https://doi.org/10.1145/3461461

and F. Hao,

“On secure

[9] C. Killer, B. Rodrigues, R. Matile, E. Scheid, and
B. Stiller, “Design and implementation of cast-as-
intended veriﬁability for a blockchain-based voting
system,” in Proceedings of
the 35th Annual ACM
Symposium on Applied Computing, ser. SAC ’20.
New York, NY, USA: Association for Computing
[Online]. Available:
Machinery, 2020, p. 286–293.
https://doi.org/10.1145/3341105.3373884

[10] B. Leiding, P. Memarmoshreﬁ, and D. Hogrefe,
“Self-managed and blockchain-based vehicular ad-
the 2016 ACM
hoc networks,” in Proceedings of
International
Joint Conference on Pervasive and
Ubiquitous Computing: Adjunct, ser. UbiComp ’16.
New York, NY, USA: Association for Computing
[Online]. Available:
Machinery, 2016, p. 137–140.
doi.org/10.1145/2968219.2971409

[11] J. Zeng, Y. Yuan, J. Zhang, and Y. Liu, “Blockchain in
smart park: Application scheme design,” in Proceedings
the 2019 International Electronics Communication
of
Conference, ser. IECC ’19.
New York, NY, USA:
Association for Computing Machinery, 2019, p. 76–83.
[12] B. Bornelus, H. Chi, and G. A. Francia, “Integrating

blockchain technology in healthcare via active learning,”
in Proceedings of the 2020 ACM Southeast Conference,
ser. ACM SE ’20. New York, NY, USA: Association
for Computing Machinery, 2020, p. 122–126. [Online].
Available: https://doi.org/10.1145/3374135.3385275
[13] Y. Liu and J. Zeng, “Blockchain based big data plat-
form of city brain,” in 3rd International Conference on
Blockchain Technology, ser. ICBCT ’21. New York,
NY, USA: Association for Computing Machinery, 2021,
p. 82–89.

[14] A. Pinna, G. Baralla, M. Marchesi, and R. Tonelli,
“Raising sustainability awareness in agile blockchain-
oriented software engineering,” in 2021 IEEE Interna-
tional Conference on Software Analysis, Evolution and
Reengineering (SANER), 2021, pp. 696–700.

[15] A. Decan, T. Mens, and M. Claes, “An empirical compar-
ison of dependency issues in oss packaging ecosystems,”
in 2017 IEEE 24th International Conference on Software
Analysis, Evolution and Reengineering (SANER), 2017,
pp. 2–12.

[16] J. Businge, M. Openja, S. Nadi, and T. Berger, “Reuse
and maintenance practices among divergent forks in three
software ecosystems,” Journal of Empirical Software
Engineering, 2021.

[17] S. Zhou, B. Vasilescu, and C. K¨astner, “How has forking
changed in the last 20 years? a study of hard forks on
github,” in 2020 IEEE/ACM 42nd International Confer-
ence on Software Engineering (ICSE), 2020, pp. 445–
456.

[18] J. Businge, A. Decan, A. Zerouali, T. Mens, and C. D. R.
Serge Demeyer, “Variant forks – motivations and im-
pediments,” in Proceedings of the 29th edition of the
IEEE International Conference on Software Analysis,
Evolution and Reengineering, 2022.

[19] A. Decan, T. Mens, and P. Grosjean, “An Empirical Com-
parison of Dependency Network Evolution in Seven Soft-
ware Packaging Ecosystems,” Empirical Softw. Engg.,
vol. 24, no. 1, pp. 381–416, Feb. 2019.

[20] J. Businge, M. Openja, D. Kavaler, E. Bainomugisha,
F. Khomh, and V. Filkov, “Studying Android app pop-
ularity by cross-linking GitHub and Google Play store,”
in International Conference on Software Analysis, Evo-
lution and Reengineering, 2019, pp. 287–297.

[21] J. Businge, S. Kawuma, E. Bainomugisha, F. Khomh,
and E. Nabaasa, “Code authorship and fault-proneness of
open-source Android applications: An empirical study,”
in PROMISE, 2017.

[22] J. Businge, M. Openja, S. Nadi, E. Bainomugisha, and
T. Berger, “Clone-based variability management in the
Android ecosystem,” in International Conference on Soft-
ware Maintenance and Evolution.
IEEE, 2018, pp. 625–
634.
[23] Ethereum

documentation
release
Available:
https://docs.soliditylang.org/ /downloads/en/v0.8.10/pdf/
[24] A. Amoordon and H. Rocha, “Presenting tendermint:

Foundation,

[Online].

“Solidity

0.8.10,”

2021.

5

Blockchain-Oriented Software Variant Forks: A Preliminary Study

Idiosyncrasies, weaknesses, and good practices,” in 2019
IEEE International Workshop on Blockchain Oriented
Software Engineering (IWBOSE), 2019, pp. 44–49.
[25] L. Nyman, T. Mikkonen, J. Lindman, and M. Foug`ere,
“Perspectives on code Forking and Sustainability in open
source software,” in Open Source Systems: Long-Term
Sustainability, 2012, pp. 274–279.

[26] G. Robles and J. M. Gonz´alez-Barahona, “A compre-
hensive study of software forks: Dates, reasons and
outcomes,” in Open Source Systems: Long-Term Sustain-
ability, 2012, pp. 1–14.

[27] B. B. Chua, “A survey paper on open source forking
motivation reasons and challenges,” in Paciﬁc Asia Con-
ference on Information Systems, 2017.

[28] J. Jiang, D. Lo, J. He, X. Xia, P. S. Kochhar, and
L. Zhang, “Why and how developers fork what from
whom in GitHub,” Empirical Softw. Engg., vol. 22, no. 1,
pp. 547–578, Feb. 2017.

[29] J. Businge, A. Decan, A. Zerouali, T. Mens, and S. De-
meyer, “An empirical investigation of forks as variants
in the npm package distribution,” in Proceedings of the
19th Belgium-Netherlands Software Evolution Workshop,
BENEVOL. CEUR-WS.org, 2020.

6

