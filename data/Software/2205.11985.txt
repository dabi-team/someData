2 Using Maple and GRTensorIII in relativistic spherical models

Medina V.∗

Abstract

This article presents some aspects and experience in the use of algebraic manipulation software applied to general relativity.

Some years ago certain results were reported using computer algebra platforms, but the growing popularity of graphical

platforms such as Maple allows us to approach the problem of the simpliﬁcations of many expressions from another point of

view. Some simple algebraic programming procedures are presented (in Maple with the GRTensorIII package) to obtain and

study material distributions with spherical symmetry and to search for exact solutions of the Einstein ﬁeld equations. The

purpose is to show how useful a computer algebra system can be. All calculations were performed using the GRTensorIII

computer algebra package, which runs on Maple 2017, along with several Maple routines that we have used speciﬁcally for

the simpliﬁcation of many of the algebraic expressions that are very common in this type of problem.

Keywords: Computer algebra, General relativity , Gravitation theory , Algorithms, Maple , GRTensorIII

PACS: 95.30.Sf, 04.20.- q, 04.40.-b

∗Departamento de Fisica - Facultad de Ingenieria - Universidad de Carabobo. Valencia, Venezuela: vmedina@uc.edu.ve

2
0
2

y
a
M
1
3

]
h
p
-
p
m
o
c
.
s
c
i
s
y
h
p
[

2
v
5
8
9
1
1
.
5
0
2
2
:
v
i
X
r
a

1

 
 
 
 
 
 
1 Introduction

1 Introduction

2

Computer algebra systems (CAS) have a wide variety of applications in ﬁelds that require time-consuming, diﬃcult-

to-perform, and error-prone calculations when done manually. They are used more and more frequently and

especially when it is necessary to complete a calculation in pages after pages for many hours or perhaps several

days. As early as the late 1950s and early 1960s, various programs appeared [1, 2, 3, 4] aimed at demonstrate that

in the scientiﬁc ﬁeld it is possible to go beyond the purely numerical area and use them to carry out a symbolic

calculation. For reasons such as these, various members of the computer algebra family of languages were created,

and in fact many were created to perform speciﬁc calculations of great complexity in ﬁelds such as electronic

optics [5], celestial mechanics [6], quantum electrodynamics [7, 8, 9, 10, 11, 12] or general relativity [13, 14, 15, 16].

Computer algebra for general relativity (GR) has a long history, beginning almost as early as computer algebra

itself in the 1960s.

The ﬁrst GR program was GEOM, written by J.G. Fletcher [17]. Its main ability was to compute the Riemann

tensor of a given metric. In 1969, R. A. d’Inverno [18] developed ALAM (for Atlas Lisp Algebraic Manipulator)

[19] and used it to compute the Riemann and Ricci tensors of the Bondi metric. According to [20], Bondi and his

collaborators took 6 months to complete the original calculations, while the ALAM calculation took 4 minutes and

resulted in the discovery of 6 errors in the original paper. Since then, numerous packages have been developed and

various investigations have been carried out using manipulative algebraic software (CAS) and in many cases the

calculations were of such length that they would have been prohibitively expensive to complete without the aid

of a computer [21]. Its main advantage is the ability to handle a large number of algebraic calculations and this

particularity has allowed advances in ﬁelds of theoretical physics such as GR or High Energy Physics (HEP).

Many of these problems have used some free, open source, general purpose software with an emphasis on tensor

calculus for GR, such as Java-based REDBERRY [22, 23] , SAGE [24] and SAGEMANIFOLDS written in Python,

CADABRA[25, 26] developed in C++ and Python. Others, applied speciﬁcally for HEP, have been designed

based on special algorithms [27, 28, 12] and implemented in programs like SCHOONSHIP [29, 30], designed by

M. Veltman, ASHMEDAI [31, 32, 33] by M. Levine, REDUCE [7, 8, 9, 11] by A. Hearn, MACSYMA (to become

MAXIMA in 1998) [34, 35, 36] by J. Moses developed at MIT, or more recent FORM [37, 38, 39] by J. Vermaseren.

Proprietary software such as MATHEMATICA [40, 41, 42, 43]by S. Wolfram or MAPLE [44, 45, 46, 47, 48, 49,

50, 51, 52] from B. Char developed at the University of Waterloo. The CAS programs mentioned above constitute

only a very small part of the available applications, special purpose and general systems that can be consulted

in repositories and lists, maintained and frequently updated 53, 54, 55, 56, 57, 58. Of all the CAS applications

mentioned above, we are going to refer in this work to MAPLE.

Maple is a general purpose CAS, initially developed at the University of Waterloo as a result of discussions

1 Introduction

3

on the state of symbolic computing in the 1980s. At the time, large systems such as ALTRAN [59], CAMAL

[13, 14, 15], REDUCE [60] and MACSYMA [34], based on the computer technology of the 1960s, they decided

to design a new system from scratch, taking advantage of the advances in software engineering available and

the lessons of experience.

Its basic design features (for example, 61 elementary data structures, input/output,

number arithmetic, and elementary simpliﬁcation) are encoded in a low-level language for eﬃciency. An important

property is that most of the algebraic facilities of the system are implemented using the high-level user language.

The basic system, or kernel, is compact and eﬃcient enough to be practical to use for a shared environment or

on personal computers with very little main memory. Library functions are loaded into the system as needed,

adding features such as polynomial factorization, equation solving, indeﬁnite integration, and matrix manipulation

to the system. The modularity of this design allows users to demand available computing resources in proportion

to their actual use. It has specialized libraries for elementary and special mathematical functions, it oﬀers support

for symbolic and numerical computation with exact results, it can handle a wide set of equation systems, including

Diophantine equations, ordinary diﬀerential equations (ODE), partial diﬀerential equations (PDE), Diﬀerential

Algebraic Equations (DAE), Delay Diﬀerential Algebraic Equations (DDE) and recurrence relations. Initially the

kernel of the system was written in macros that could be translated by a locally developed macroprocessor (called

Margay) into versions of the kernel in the C programming language for various operating systems; currently only

C is used. The GUI was ﬁrst released with version 5 (Maple V) and continued to be numbered until Maple 18

and then changed to a yearly label. Due to the low demand for main memory to run the kernel and the modular

design for many of the possible user applications in a high-level language, it has become one of the main symbolic

algebra systems used by many researchers and engineering corporations. worldwide [62, 63]. These applications

or packages can be programmed by the user and many can be found on the web 64 as GRTensorII or its update

GRTensor III . (in short GRTensor ).

GRTensor is a computer algebra package for performing calculations in the general area of diﬀerential geometry

65.

Its main objective is the computation of tensor components in curved spacetimes speciﬁed in terms of a

metric or set of basis vectors. The library relies on a series of special commands starting with ”gr ” (for example,

grcalc, grdisplay, gralter , grdeﬁne , etc.)

to deal with a series of (pre) geometric objects. deﬁned as the metric

tensor, Ricci tensor and scalar, Einstein tensor, Chrisstoﬀell symbols, etc. This library of objects can be extended

to deﬁne new tensors, or use the Newman-Penrose formalism. Although originally designed for use in the ﬁeld of

general relativity, GRTensor is useful in many other ﬁelds 66 There is a version for MATHEMATICA called

GRTensorM. The GRTensorII package was originally developed for Maple V and can be run with versions from

Maple V Release 3 to Maple 13. The GRTensor III version runs as of Maple 15. All documentation and software

are distributed free of charge to help both for research and teaching.

2 Algorithm structure

4

The ﬁnal objective of this article is to present the calculations, especially in Sec. 2 that have been carried out

with an emphasis on the methods, packages and techniques of computational algebra that we use in a spreadsheet

developed for the GRTensorIII package running on the Maple 17 platform. Initially, it was written in GRTensorII

running on top of Maple 13 and when upgrading GRTensor to version III, it became necessary to upgrade the

Maple version as well. The spreadsheet follows the algorithm described in 67, 68 starting from a spherically

symmetric perfect ﬂuid distribution of density ˆρ, radial pressure ˆP , tangential pressure ˆPt, a ﬂux of unpolarized

radiation moving in the radial direction with density ˆε and 3ˆµ the isotropic radiation of the energy density, in a

local Minkowskian system. By performing the corresponding coordinate transformations, to a radiative (Bondi)

coordinate system, we can construct an Impulse Energy Tensor that must satisfy both the Einstein ﬁeld equations

(Gab = κTab) as the conservation equations

T ab

; b = 0

. When calculating these equations, it is necessary to simplify

them and for this, some 69, procedures and functions have been used, as in 70. In Sec. 3 some comments on

(cid:16)

(cid:17)

the calculations made are presented and in the last section the conclusions and the possibility of extending this

procedure to other astrophysical scenarios are detailed.

2 Algorithm structure

As indicated in the previous section, the created spreadsheet basically follows the procedure used in [71] and for

the charged case in [72] with the modiﬁcations made in 67, 68. In the original sheet, the commands are grouped by

sections and each of the sections has a name that suggests the calculation to be carried out. In this build for the

article, commands (in red) and output (in blue) from the Maple interpreter will be reproduced. All the commands

to perform the calculations of the sheet are present in this work, however, not all the outputs (in blue) were placed

and the most extensive ones were edited.

2.1 Login

To start the Maple session we loaded the GRTensorIII libraries, the expression simpliﬁcation routines were taken

from Davies [70] and the directory from where the metrics will be loaded. We start with a reset statement to ensure

that you have a new session of the sheet,

>restart;

>grtw();

2 Algorithm structure

”

GRTensorIII v2 .2 Oct 1 , 2018 ”

”Copyright 2018 , Peter Musgrave, Denis Pollney, Kayll Lake”

”Latest version is at http : //github.com/grtensor /grtensor ”

”For help ?grtensor ”

”Support /contact grtensor3 @gmail .com”

module() ...end module()

5

(1)

>with(grtensor): groptions():

The expression simpliﬁcation routines were taken from Davies [70]

>read ‘/home/victor/relatividad/maple/loadmpl/pertutils.mpl‘;

2.2 Minkowskian local ﬂat space

It is assumed that the region of the space to be considered is composed of energy density anisotropic material

ˆρ, radial pressure ˆP , tangential pressure ˆPt, radiation isotropic energy density 3ˆµ and non-polarized radiation of

energy density ˆξ propagating in a radial direction. We are going to establish the metric of this region of space.

>qload(minkowski);

Calculated ds for minkowski (0.001000 sec.)

Default spacetime = minkowski

For the minkowski spacetime :

Coordinates

x (up)

x α = [t x y z ]

Line element

ds 2 = dt 2

dx 2

dy 2

−

−

The Minkowski metric

−

dz 2

−
plana

−

(2)

The covariant components of the metric tensor of the local Minkowski system are calculated and displayed. You can

use two GRTensorIII instructions: grcalc() to calculate and grdisplay() to show the result. However, grcalcd (),

2 Algorithm structure

6

allows you to do the calculation and shows the result, combining the two previous instructions.

>grcalcd(g(dn,dn));

Let’s set the values for the contravariant unit vectors in the Minkowski reference system. We will use them to

calculate the components of the tensor in the local system

>grdef(‘u0

grdef(‘u2

^a

{
^a

{

:=kdelta

:=kdelta

}

}

$t ^a

$y ^a

}

}

{

{

‘): grdef(‘u1

‘): grdef(‘u3

^a

^a

{

{

}

}

:=kdelta

:=kdelta

$x ^a

$z ^a

}

}

{

{

‘):

‘):

And to establish the Stress-energy tensor of this region, let’s start with: Energy density anisotropic material ρ,

Radial pressure P and Tangential pressure Pt

>grdef(‘TM

^a b

{
>grcalcd(TM(dn, dn));

}

:= (rho M + P t)*u0

^a

{

*u0

b

{

}

}

- P t *g

^a b

}

{

+ (P M - P t)*u1

^a

}

{

*u1

b

}

{

‘):

Isotropic radiation of energy density 3µ

>grdef(‘Tp

^a b

}

{

:= 3*u0

^a

{

}

*u0

{

b

}

+u1

^a

{

}

*u1

{

b

}

+u2

^a

{

}

*u2

{

b

}

+u3

^a

{

}

*u3

{

‘);

b

}

The component corresponding to Polarized radiation

>grcalcd(Tp(dn, dn));

Unpolarized radiation of energy density ξ propagating in the radial direction

> grdef(‘ v

{
> grdef(‘Tnp

a

{

}
a b

:=[1, -1, 0, 0 ]‘);

:= xi *v

a

{

*v

b

{

}

}

‘);

}

> grcalcd(Tnp(dn, dn));

Bringing together the three parts of the Stress-Energy tensor, we get the stress-energy tensor Matter + radiation:

> grdef(‘T0

a b

:=TM

a b

{
> grcalcd(T0(dn, dn));

}

{

+mu*Tp

a b

}

{

+Tnp

a b

}

{

‘);

}

Calculated T0(dn,dn) for minkowski (0.003000 sec.)

‘CPUTime‘ = 0 .005

For the minkowski spacetime :

T0 (dn, dn)

T0 (dn, dn)

2 Algorithm structure



3µ + rhoM + ξ

ξ

−
PM + µ + ξ

0

0

T 0ab =









Redeﬁning the radiation and matter variables of the stress-energy tensor:

0

0

0

0

Pt + µ

ξ

−
0

> grmap(T0(dn, dn), subs, rho M = rho[0]-3*mu, ‘x‘);

> grmap(T0(dn, dn), subs, P M = P[0]-mu, ‘x‘);

> grmap(T0(dn, dn), subs, P t = P[t]-mu, ‘x‘);

> grdisplay(T0(dn,dn));

For the minkowski spacetime :

T0 (dn, dn)

T0 (dn, dn)

T 0a b =

ρ0 + ξ

ξ

−
0

0

ξ

−
P0 + ξ

0

0

0

0

Pt

0

0

0

0 Pt























0

0

0

Pt + µ












7

(3)

(4)

2.3 Lorentz transformation

Let’s suppose that you have an observer moving in relation to the local system Minkowskian, with a radial velocity

ω. The components of the Stress-Energy tensor in this new system of Lorentz, will be given by the relationship:

¯Tµν = Λα

µΛβ
ν

ˆTαβ

where Λα

µ is the transformation matrix

> grdef(‘umsqrto := 1/sqrt(1-omega^2) ‘);

grdef(‘Lambda

^a b

}

{

-omega* umsqrto *kdelta

:= umsqrto *kdelta

^a $t

*kdelta

$t b

^a $x

}

{
* kdelta

{
* kdelta

$x b

}

{

$t b

}

{
+ kdelta

}

{

}
-omega* umsqrto *kdelta

^a $y

}

{

* kdelta

$y b

+

}

{

+ umsqrto *kdelta

^a $x

kdelta

^a $z

}

{

{
* kdelta

}
$z b

{

‘);

}

^a $t

}

{

* kdelta

$x b

}

{

2 Algorithm structure

8

> grcalcd(Lambda(up, dn));

CPU Time = 0 .011

For the minkowski spacetime :

Lambda(up, dn)

Λ(up, dn)

1

√1

ω2

−
ω

ω2

−

√1

−
0

ω

ω2

−

√1

−
1

ω2

√1

−
0

0

0

0

0

1

0

0

0

0

1












Λα

µ =












,

(5)

Let’s carry out the transformation operation now. To do it, we will establish this transformation as:

> grdef(‘T1

a b

:=Lambda

{
> grcalcd(T1(dn, dn));

}

^c a

}

{

*Lambda

^d b

*T0

c d

}

{

}

‘);

{

CPU Time = 0 .012

For the minkowski spacetime :

T1 (dn, dn)

Λ(up, dn)

ρ0+2ωξ+ω2P0+ω2ξ
1+ω2

−

ω0ρ0+2ωξ+ξ+ωP0
1+ω2

−

−

ω0ρ0+2ωξ+ξ+ωP0
1+ω2
ω2ρ0+ω2ξ+2ωξ+P0+ξ
1+ω2

−

−

−

0

0

0

0

T 1a b =












0

0

Pt

0

0

0

0 Pt












(6)

We obtain the expression of the Stress-energy tensor in the local system, with radial velocity ω.

2.4 Bondi Radiative Coordinate System

As the study we are doing, is related to radiation, then it is logical to assume that we must use a coordinate system

according to the theme. Therefore, we are going to use Bondi’s radiative coordinate system as in [73].

>qload(bondi);

Calculated ds for bondi (0.001000 sec.)

2 Algorithm structure

9

Default space time = bondi

For the bondi spacetime :

Coordinates

x (up)

x α =

¯
[u, r , θ, φ]

Line element

e 2 β(u,r )
ds 2 = V (u,r )
·
r

du 2 + 2e2 β(u,r )dr

du

·

−

r 2 d θ2

−

r 2 sin2 θd φ2

The Bondi metric (Proc. Roy. Soc. A 269 21 )

(7)

Changing the expression of the Stress-energy tensor of the local Minkowskiana metric to its structure in the Bondi

radiation coordinate system.

>grdef(‘Vsr:=sqrt(V(u,r)/r)‘);

>grdef(‘Mu

^a b

}

{

:= exp(beta(u,r))*Vsr*kdelta
{
+ exp(beta(u,r))/

*kdelta

*kdelta

^a $u

$r b

{

}

^a $u

$u b

+

}

exp(beta(u,r))/Vsr*kdelta
{
$r b

Vsr*kdelta

*kdelta

^a $r

}

{

}

r*sin(theta)*kdelta

{
^a $phi
{

}

+r*kdelta

}
*kdelta

{
$phi b

{

‘);

}

{
}
^a $theta

*kdelta

{

}

$theta b

+

}

Deﬁning and showing the matrix of the Minkowski local system transformation to the Lorentz system

>grcalcd(Mu(up, dn));

Calculated Vsr for bondi (0.002000 sec.)

Calculated grtensor:-kdelta(dn,dn) for bondi (0.002000 sec.)

Calculated grtensor:-kdelta(up,dn) for bondi (0.002000 sec.)

Calculated Mu(up,dn) for bondi (0.011000 sec.)

CPU Time = 0 .021

For the bondi spacetime :

Mu (up, dn)

M (up, dn)

2 Algorithm structure



e2β(u,r)

V (u,r)
r

q
0

0

0

e2β(u,r)
V (u,r)
q
r
e2β(u,r)
V (u,r)
r

q

0

0

0

0

r

0

0

0

0

r sin θ














M a

b =












10

(8)

This matrix of transformation, allows us to obtain the expression of the stress-energy tensor of the local system of

Minkowski to the system of radiative coordinates with

¯Tab = M α

aM β

ˆT αβ

b

(9)

where M a

b is the transformation matrix. As we are performing an operation between two expressions with diﬀerent

metrics, we must specify the space - or metric - corresponding to each term of the multiplication

> grdef(‘TB<2>

a b

}

{

:=Mu

^c a

*Mu

{

}

{

^d b

}

*T1<1>

c d

}

{

‘);

by deﬁning what is the scope of the deﬁnition of each term

> grcalcd(1 = minkowski, 2 = bondi, TB(dn, dn));

CPU Time = 0 .202

For the bondi spacetime :

TB (dn, dn)

TB (dn, dn)

e2β(u,r))V (u,r)(ρ0+2ωξ+ω2P0+ω2ξ)

1+ω2)

r(
−
ρ0)
(ωP0−
ω+1

e2β(u,r)

e2β(u,r)

ρ0)

(ωP0−
ω+1
−
(ωρ0+ωP0−

ρ0−
V (u,r)(ω+1)

P0)r

−

0

0

0

0

−

T Bab =

−












2.5 Eﬀective Variables

0

0

r2Pt

0

0

0

0

r2 sin2 θ Pt












(10)

We are going to deﬁne the eﬀective variables in a similar way to the case of [71, 67]. However, here we will denote

it as ρ1 and P1, without a bar at the top:

2 Algorithm structure

11

> grmap(TB(dn, dn), subs, rho[0] = (rho[1]+omega*P[1])/(1-omega), ‘x‘);

> grmap(TB(dn, dn), subs, P[0] = (P[1]+omega*rho[1])/(1-omega), ‘x‘);

Changing the term a bit for radiation

> grmap(TB(dn, dn), subs, xi = (1-omega)*epsilon/(1+omega), ‘x‘);

> gralter(TB(dn, dn), expand, factor);

> grdisplay(TB(dn, dn));

For the bondi spacetime :

TB (dn, dn)

TB (dn, dn)

2εω

−

ωρ1+ε+ρ1)

ρ1 e2β(u,r)
re2β(u,r))(ρ1+P1)
V (u,r)

0

0

0

0

r2Pt

0

0

0

0

r2 sin2 θ Pt












(11)

e2β(u,r))V (u,r)(ω2ε+ω2ρ1+ωP1−

−

1+ω)2
r(
ρ1 e2β(u,r)

0

0

T Bab =












Using the routines deﬁned in [70] we can obtain an alternate expression for T Buu:

> TBdndnuu := kfactor(hcollect(grcomponent(TB(dn, dn), [u, u]),

P[1], rho[1], V(u, r)

,

}

{

r, omega, beta(u, r)

}

{

), V(u, r)*exp(2*beta(u, r))/r);

TBdndnuu =

V (u, r )
r

e2 β(u,r )

ωP1
1 + ω)2 +

(
−

ω + ω2 + 1
1 + ω)2
(
−

(cid:1)

−
(cid:0)

ρ1

+ ε

!

(12)

or equivalently

TBdndnuu =

V (u, r )
r

e2 β(u,r )

ω (ρ1 + P1 )

ω)2 + ρ1 + ε

#

"

(1

−

 
2 Algorithm structure

12

2.6 Electromagnetic Component

If we are interested in the possibility that the material subject to the study presents an electric charge, it is

necessary to include it in the tensor and therefore establish the expression for the Faraday tensor

Tαβ =

FαµF µ

β +

1
4π

(cid:20)

1
4

gαβ (Fµν F µν )
(cid:21)

(13)

where F absatisﬁes the equations

√gF αβ

,β = 4π√g J α
(cid:1)

(cid:0)

F[αβ;γ] = 0

Assuming spherical symmetry, the only non-zero component is F and we have F 01

and when integrating the ﬁrst:

Because of this, we can write

e2βr2F 01

(cid:0)
e2βr2F 10

(cid:0)

,1 = 4πe2βr2J 0
(cid:1)
,0 = 4πe2βr2J 1
(cid:1)

e2βr2F 01

=

r

4πe2βr2J 0

dr

(cid:0)

0
Z

(cid:0)

(cid:1)

(cid:1)

Q (u, r)

≡

F 01 =

2β

e−
r2

·

Q (u, r)

where Q (u, r), plays the role of electric charge and the electromagnetic component of the stress tensor is

*kdelta

$r ^b

}

{

-kdelta

$r ^a

}

{

*kdelta

$u ^b

)‘);

}

{

+(1/4)*g

a b

*F

{

}

{

c d

}

*F

{

^c ^d

}

}

)/(4*Pi) ‘);

:= F01*(kdelta

$u ^a

> grdef(‘F

^a ^b

}

{
> grdef(‘Faraday2:=F
{
:= (F

> grdef(‘Tem

a b

{

}

{
a b

}
‘);

^a ^b

*F

}
{
* F

}
^c b

{

a c

{

}

> grcalcd(Faraday2);

> grcalcd(F(up, up));

CPU Time = 0 .

For the bondi spacetime :

F (up, up)

F (up, up)

13

(14)

,

(15)












2 Algorithm structure



0

F 01 0 0

F 01

−

0

0

0

0

0

0 0

0 0

0 0

,












F ab =










In terms of F 01, the electromagnetic component of the stress tensor is

> grcalcd(Tem(dn, dn));

Calculated g(up,up) for bondi (0.004000 sec.)

Calculated F(up,dn) for bondi (0.004000 sec.)

Calculated Tem(dn,dn) for bondi (0.000000 sec.)

CPU Time = 0 .011

For the bondi spacetime :

Tem(dn, dn)

Tem(dn, dn)

1
8

V (u,r)(e2β(u,r))3

F 012

1
8

πr

(e2β(u,r))3

F 012

π

0

0

(e2β(u,r))3

F 012

π

0

0

0

0

0

1
8

r2(e2β(u,r))3

F 012

π

0

0

0

0

r2 sin(θ)2(e2β(u,r))3

F 012

π

1
8

T emab =

1
8












The electromagnetic component of the stress tensor is expressed in terms of the electric charge as:

> grmap(Tem(dn, dn), subs, F01 = exp(-2*beta(u, r))*Q(u, r)/r^2, ‘x‘);

> grmap(Faraday2, subs, F01 = exp(-2*beta(u, r))*Q(u, r)/r^2, ‘x‘);

> gralter(Tem(dn, dn), expand, factor);

Component simplification of a GRTensorIII object:

Applying routine expand to object Tem(dn,dn)

Applying routine factor to object Tem(dn,dn)

CPUTime = 0 .007

> grdisplay(Tem(dn, dn));

14

(16)

2 Algorithm structure

For the bondi spacetime :

Tem(dn, dn)

Tem(dn, dn)

(e2β(u,r))2
πr4

Q2(u,r)

1
8

0

0

0

1
8

V (u,r)(e2β(u,r))2

Q2(u,r)

πr5
(e2β(u,r))2
πr4

Q2(u,r)

1
8

0

0

Temab =












0

0

Q2(u,r)
πr2

1
8

0

0

0

0

sin(θ)2Q2(u,r)
πr2

1
8

.












2.7 Stress tensor

The stress tensor total that includes matter + radiation + electric charge is:

> grdef(‘T

a b

}

{

:= TB

a b

}

{

+Tem

a b

}

{

‘);

If we want to study neutral or uncharged cases, we can turn OFF the contribution of the electric charge

> #grmap(T(dn, dn), subs, Q(u, r) = 0, ‘x‘)

Calculating the covariant components

> grcalc(T(dn, dn));

> gralter(T(dn, dn), expand, factor);

> grdisplay(T(dn, dn));

For the bondi spacetime :

T (dn, dn)

T (dn, dn)

2 Algorithm structure

15

1

Tuu = 1
8
8r4πωρ1 + 8r4πε + 8r4πρ1 + (Q (u, r))2

8r4πεω2 + 8r4πω2ρ1 + 8r4πωP1 −
(cid:0)

2 (Q (u, r))2 ω + ω2 (Q (u, r))2

eβ(u,r)

V (u, r)

1+ω)2r5π

(cid:16)

(cid:0)

(cid:1)

−

·

(

16r4πεω

2

−

Tru = 1
8
Tur = 1
8

−
(eβ(u,r))2(8r4πρ1+Q2(u,r))
r4π
(eβ(u,r))2(8r4πρ1+Q2(u,r))
r4π
r(eβ(u,r))2

(P1+ρ1)

Trr =

Tθθ = 1
8

V (u,r)
8r4Ptπ+Q(u,r)2
πr2
sin θ2(8r4Ptπ+Q(u,r)2)
πr2

Tφφ = 1
8

(cid:17)(cid:17)

(17)

As an example of the use of simpliﬁcation routines, we can factor the time covariant component

>tempTdndnuu := kfactor(hcollect(grcomponent(T(dn, dn), [u, u]),

P[1], rho[1], V(u, r)

,

}

{

r, omega, beta(u, r)

}

{

), V(u, r)*exp(2*beta(u, r))/r);

tempTdndnuu :=

V (u, r ) e 2 β(u,r )

ωP1
1 +ω)2 +

−

(

(cid:18)

(−

ω+ω2 +1)ρ1
(

1 +ω)2 + 1

8

−
r

8r 4 πε+Q(u,r )2
r 4 π

(cid:16)

(cid:17)(cid:19)

(18)

The contravariant radial component can be simpliﬁed with the help of the previously loaded factoring functions

> tempTupuprr := kfactor(hcollect(hcollect(grcomponent(T(up, up), [r, r]),

epsilon,

{

Q(u, r), V(u, r), exp(2*beta(u, r))

,

}

{

epsilon, P[1], rho[1], Q(u, r)

),

}

{

epsilon,

P[1], rho[1], Q(u, r)

V(u, r), beta(u, r)

,

}

{

}

), exp(-2*beta(u, r))*V(u, r/r)

V (u, r ) e−

2 β(u,r )

(−

ε +

tempTupuprr =

(cid:18)

ω+ω2 +1)P1
1 +ω)2
(

−

1
8

−

r

Q(u,r )2

r 4 π + ωρ1

(

1 +ω)2

−

(cid:19)

(19)

that we can simplify as

tempTupuprr =

V (u, r ) e −

2 β(u,r )

ω (ρ1 + P1 )

r

"

(1

−

ω)2 + ε +

Q (u, r )2
8 πr 4

P1

−

!#

2.8 Temporary and radial dependency of the Stress Tensor

To calculate the conservation equations, it is necessary to establish that the density ρ = ρ (u, r), pressure P =

P (u, r), radiation ε = ε (u, r) and tangential pressure Pt = Pt (u, r) depend on that of the temporal and radial

coordinates.

 
2 Algorithm structure

16

> grmap(T(up, dn), subs, rho[1] = rho(u, r),‘x‘);

> grmap(T(up, dn), subs, P[1] = P(u, r), ‘x‘);

> grmap(T(up, dn), subs, P[t] = P[t](u, r), ‘x‘);

> grmap(T(up, dn), subs, epsilon = epsilon(u, r), ‘x‘);

> grmap(T(up, dn), subs, omega = omega(u, r), ‘x‘);

> gralter(T(up, dn), simplify);

> grdisplay(T(up, dn));

For the bondi spacetime :

T (up, dn)

T (up, dn)

T a

b =

1
8

8r4πρ(u,r)+Q(u,r)2
r4π

,

r

P (u,r)+ρ(u,r)
V (u,r)

(cid:16)
(ε(u,r)ω(u,r)2+ω(u,r)P (u,r)

(cid:17)

2ε(u,r)ω(u,r)+ω(u,r)ρ(u,r)+ε(u,r))

, 0, 0

,

(cid:21)

(cid:17)

(cid:20) (cid:20)

(cid:16)
V (u,r)
r

(cid:20)

(cid:20)

−
1+ω(u,r))2

(

−

, 0

,

(cid:21)

(cid:17)

0, 0,

1
8

−

8r4πPt(u,r)+Q(u,r)2
r4π

0, 0, 0,

(cid:20)

(cid:16)

1
8

−

(cid:16)

8r4πPt(u,r)+Q(u,r)2
r4π

(cid:17)(cid:21) (cid:21)

(20)

, −

Q(u,r)2+8r4πP (u,r)
r4π

0, 0

,

(cid:21)

2.9 Conservation equations (TOV)

These equations are important since the Einstein ﬁeld equations are composed of two structures: One is the

geometry of the Gab system and the other is basically the energy Tab . From the expressions that we have taken the

geometry is linear in the second derivative and non-linear in the ﬁrst. However, the impulse energy tensor that we

have used is linear. Presumably, this non-linearity, of the geometrical part must have a non-linear version in some

expression of the impulse energy tensor. It is therefore necessary to calculate the components of the conservation

equation since it is possible that they contain the non-linear expression necessary to correct our choice of the

structure of the Stress Tensor.

> grdef(‘cero

:=[0, 0, 0, 0 ]‘);

> grdef(‘TOV

{

^a b;a

= cero

‘);

b

}

{

}

{

{
b

a

}

}
:= T

Calculating the covariant components of the conservation equation:

2 Algorithm structure

17

> grcalc(TOV(dn));

> gralter(TOV(dn), simplify);

> grdisplay(TOV(dn));

For the bondi spacetime :

TOV (dn)

TOV (dn)

T OVu =

1
4

r4V (u, r) (

1
1 + ω (u, r))3

−

V (u, r)2 r3π (

−

1 + ω (u, r)) +

· · ·

8

ω (u, r)2 ε (u, r) + (P (u, r) + ρ (u, r)
(cid:16)
(cid:16)
= 0

2

·

−

ε (u, r)) ω (u, r) + ε (u, r)

·

(cid:17)
(21)

T OVr =

1
4

1
r4V (u, r)2 π (cid:18)

4r5πV (u, r)

∂
∂u

(cid:18)

ρ (u, r)

+ 4r5πV (u, r)

(cid:19)

∂
∂u

(cid:18)

ρ (u, r)

(cid:19)

− · · · · · ·

4r5πP (u, r) r4π

−

∂
∂u

(cid:18)

V (u, r)

−

(cid:19)

4r5πρ (u, r) +

= 0

· · ·

(22)

We can use the simpliﬁcation routines loaded at the beginning of the sheet to compare the terms observed in the

conservation equations. The following simpliﬁcations allow us to establish that some of the identities are not really

independent:

>TOVn[0] := hcollect(simplify(exp(2*beta(u, r))*lhs(grcomponent(TOV(up), [u]))),

P(u, r), rho(u, r), diff(P(u, r), r), diff(Q(u, r), r), P[t](u, r)

,

}

diff(V(u, r), r), diff(V(u, r), u), diff(beta(u, r), r), diff(beta(u, r), u)

{

{

);

}

T OV n0 =

1
2

 −

∂
∂r V (u, r)
V (u, r) −

∂
∂r

−

P (u, r) +

1
4

∂
∂r

r

∂
∂u V (u, r)
V (u, r)2 −

(cid:1)

(cid:0)
Q (u, r) ∂
∂r Q (u, r)
πr4

(cid:18)

+

1
2

 −

β (u, r)

+

(cid:19)
∂
∂r V (u, r)
V (u, r) −

2r ∂

∂u β (u, r)
V (u, r) −

3
2r !

P (u, r) +

∂
∂r

−

(cid:18)

β (u, r)

+

(cid:19)

2r ∂

∂u β (u, r)
V (u, r)

+

1
2r !

ρ (u, r) +

2Pt (u, r)
r

r

(cid:0)

∂
∂u V (u, r)
V (u, r)2 +
(cid:1)
∂u P (u, r) + ∂
r
V (u, r)

∂

+

(cid:0)

∂u ρ (u, r)

(23)

(cid:1)

>TOVn[1] := hcollect(hcollect(simplify(r*exp(2*beta(u, r))*lhs(grcomponent(TOV(up),

[r]))/V(u, r)),

{

V(u, r), beta(u, r), diff(V(u, r), r), diff(V(u, r), u), diff(

 
 
2 Algorithm structure

18

beta(u, r), r), diff(beta(u, r), u)

,

diff(epsilon(u, r), r), diff(epsilon(u, r),

{
u), diff(omega(u, r), r), diff(omega(u, r), u), epsilon(u, r), omega(u, r)

}

),

}

P(u, r), Q(u, r), rho(u, r), diff(P(u, r), r), diff(Q(u, r), r),

{
diff(Q(u, r), u), diff(epsilon(u, r), r), epsilon(u, r), P[t](u, r)

V(u, r),

,

}

{

beta(u, r), diff(V(u, r), r), diff(V(u, r), u), diff(beta(u, r), r), diff(beta

(u, r), u)

);

}

T OV n1

:=




+

−

1
2

−

(ω (u, r))2 + 1
(cid:16)

∂
∂r β (u, r)

+

1 + ω (u, r))2
(cid:17)

(
−
∂r ω (u, r) + 3 (ω (u, r))3
2 r ∂

−

∂

(cid:0)

−

∂
∂r V (u, r)

(ω (u, r))2 + 2 r
V (u, r) (

1
2
(cid:1)
−
∂r V (u, r) + 2 r ∂
∂u β (u, r)
1
1 + ω (u, r))2 +
2
V (u, r) (
1
4

−
∂
∂r Q (u, r)
π r4

∂
∂u Q (u, r)
V (u, r) π r3

1
4

+

+

 −

r (

−

3 + 7 ω (u, r)

−

1 + ω (u, r))3
∂
∂u β (u, r)
1 + ω (u, r))2
(cid:0)
r ∂
∂u V (u, r)
(V (u, r))2

(cid:1)

!

7 (ω (u, r))2

−

− · · ·

(ω (u, r))2

− · · ·

+

P (u, r) +

Q (u, r)

· · ·

!

(24)

>TOVn[2] := hcollect(simplify(r*lhs(grcomponent(TOV(dn), [u]))/V(u, r)),

P(u, r), rho(u, r),

{

diff(P(u, r), r), diff(Q(u, r), u), diff(V(u, r), r), diff(V(u, r), u), diff(rho(u, r), r),

diff(rho(u, r), u), diff(beta(u, r), r), diff(beta(u, r), u), diff(epsilon(u, r), r),

diff(omega(u, r), r), epsilon(u, r), omega(u, r)

P(u, r), Q(u, r), epsilon(u, r),

,

}

{

omega(u, r)

);

}

2 Algorithm structure

19

r ∂
∂u V (u, r)
(V (u, r))2 + 2
ω (u, r)
1 + ω (u, r))2

TOVn2 =

∂
∂r V (u, r)

ω (u, r)
1 + ω (u, r))2 −

1
2

ω (u, r)

∂
∂r β (u, r)
(

1 + ω (u, r))2 +
(cid:1)

(cid:0)

−

r ∂
∂u β (u, r)
V (u, r)

  (cid:0)

V (u, r) (

(cid:1)
(1 + ω (u, r)) ∂
∂r ω (u, r)

−

−

+2

+

(cid:0)

+2

ω (u, r)

1 + ω (u, r))3

(
−
1 + ω (u, r))2 +
(cid:1)
ω (u, r)
1
2

∂
∂r β (u, r)
(
(cid:0)
−
∂
∂r P (u, r)
1 + ω (u, r))2 +
(
(cid:1)
−
∂
∂r

β (u, r)

(cid:18)

(cid:19)

+

r (

−
r ∂
∂u β (u, r)
V (u, r) −

P (u, r) +

!
(1 + ω (u, r)) ∂

  (cid:0)
∂r ω (u, r)

V (u, r) (

−

+

1 + ω (u, r))3

(

−

Q (u, r) ∂

∂u Q (u, r)

r3π V (u, r)

∂
∂r V (u, r)

ǫ (u, r)

V (u, r)
(cid:1)

+

(cid:0)

∂
∂r V (u, r)

ω (u, r)
1 + ω (u, r))2 −

(cid:1)

1
2

r ∂
∂u V (u, r)
(V (u, r))2

ρ (u, r) +

!

r (

−

+

ω (u, r)
1 + ω (u, r))2
ω (u, r) ∂
(
−

∂r ρ (u, r)
1 + ω (u, r))2 +

r ∂
∂u ρ (u, r)
V (u, r)

(25)

+ǫ (u, r) +

∂
∂r

ǫ (u, r)

>TOVn[3] := hcollect(simplify(lhs(grcomponent(TOV(dn), [r]))),

P(u, r), rho(u, r),

{

diff(P(u, r), r), diff(Q(u, r), r), P[t](u, r)

diff(V(u, r), r), diff(V(u, r), u),

,

}

{

diff(beta(u, r), r), diff(beta(u, r), u)

);

}

TOVn3 =

1
2

∂
∂r V (u, r)
V (u, r) −

 −

∂
∂r

r ∂
∂u V (u, r)
(V (u, r))2 −
r ∂
∂u β (u, r)
V (u, r)

β (u, r) + 2

∂
∂r
∂u P (u, r) + ∂
V (u, r)

∂

∂u ρ (u, r)

(cid:1)

r ∂
∂u V (u, r)
(V (u, r))2 −

−

+

2Pt (u, r)
r

r

+

(cid:0)

β (u, r) + 2

r ∂
∂u β (u, r)
V (u, r) −

3
2r !

P (u, r) +

+

1
2r !

ρ (u, r)

∂
∂r

−

P (u, r) +

1
4

1
2

∂
∂r V (u, r)
V (u, r)

 −
Q (u, r) ∂
∂r Q (u, r)
π r4

(26)

By comparing term by term, a certain regularity can be observed, and we can verify that the two equations are

the same:

> temp03 := collect(simplify(TOVn[0]-TOVn[3]), r);

With the previous expression we can conclude that

temp03 := 0

(27)

e2βT a0

;a = T a

1;a = 0

and the same conservation equation is obtained. We have in this way 3 independent conservation equations.

2 Algorithm structure

20

> temp21 := hcollect(hcollect(hcollect(simplify(TOVn[2]-TOVn[1]),

V(u, r), beta(u, r)

,

diff(P(u, r), u), diff(V(u, r), r)

),

}

{

{

{
P(u, r), rho(u, r), diff(P(u, r), r), diff(Q(u, r), u)

}

,

}

diff(rho(u, r), u), diff(beta(u, r), r), diff(beta(u, r), u)

),

}

{

P(u, r), rho(u, r),

{
P[t](u, r)

,

}

{

Q(u, r), diff(Q(u, r), r)

);

}

(28)

(29)

temp21 :=

1
2

∂
∂r V (u, r)
V (u, r) −

 −

∂
∂r

r ∂
∂u V (u, r)
(V (u, r))2 −
r ∂
∂u β (u, r)
V (u, r)

β (u, r) + 2

∂
∂r
∂u P (u, r) + ∂
V (u, r)

∂

∂u ρ (u, r)

(cid:1)

r ∂
∂u V (u, r)
(V (u, r))2 −

−

+

2Pt (u, r)
r

r

+

(cid:0)

β (u, r) + 2

r ∂
∂u β (u, r)
V (u, r) −

3
2r !

P (u, r) +

+

1
2r !

ρ (u, r)

∂
∂r

−

P (u, r) +

1
4

1
2

∂
∂r V (u, r)
V (u, r)

 −
Q (u, r) ∂
∂r Q (u, r)
π r4

> temp21m0 := collect(simplify(temp21-TOVn[0]), r);

temp21m0 := 0

The diﬀerence of the two equations brings us back to the conservation equation of (TOV: Tolman Oppenheimer

Volkoﬀ). However, taken separately they are not proprocionales to T OV [0] = T OV [3].

2.10 Einstein ﬁeld equations

Taking as input the covariant components of the Einstein ﬁeld equations:

>grdef(‘Eins

a b

{
>grcalc(Eins(dn, dn));

}

{

:= G

a b

}

= 8*Pi*T

a b

}

{

‘);

> gralter(Eins(dn, dn), simplify, factor, radsimp);

> grdisplay(Eins(dn, dn));

For the bondi spacetime :

Eins(dn, dn)

Eins(dn, dn)

2 Algorithm structure

21

∂u V (u, r) + 2 (V (u, r))2 ∂
r ∂

∂r β (u, r)

−

2 rV (u, r) ∂
r3

∂u β (u, r)

−

V (u, r) ∂

∂r V (u, r) + V (u, r) e2 β(u,r)

=

1
1 + ω (u, r))2 r5
(
−
+8 r4π ω (u, r) P (u, r)

(cid:16)

V (u, r) e2 β(u,r)

8 r4π ǫ (u, r) (ω (u, r))2 + 8 r4π (ω (u, r))2 ρ (u, r) +
(cid:16)

8 r4π ω (u, r) ρ (u, r) + 8 r4π ǫ (u, r) +

16 r4π ǫ (u, r) ω (u, r)

−

−

+8 r4π ρ (u, r) + (Q (u, r))2

−

2 (Q (u, r))2 ω (u, r) + (Q (u, r))2 (ω (u, r))2

2 V (u, r) ∂

∂r β (u, r)

2 V (u, r) ∂

∂r β (u, r)







−
r2

−
r2

∂

∂r V (u, r) + e2 β(u,r)

∂
∂r V (u, r) + e2 β(u,r)

=

=

e2 β(u,r)

(cid:17)(cid:17)

8 r4π ρ (u, r) + (Q (u, r))2
(cid:16)

r4

e2 β(u,r)

8 r4π ρ (u, r) + (Q (u, r))2
(cid:16)

r4

(cid:17)





(cid:17)





∂
∂r β (u, r)
r

= 8

π re2 β(u,r) (P (u, r) + ρ (u, r))
V (u, r)

!

Einsuu =

=

Einsru =

Einsur =

Einsrr =

Einsθθ =


4

1
2

(cid:18)

∂2
∂u∂r

4

−

(cid:18)

(cid:18)

β (u, r)

r2 +

(cid:19)
∂2
∂r2 β (u, r)

+2 V (u, r)

(cid:18)

∂2
∂r2 V (u, r)
(cid:19)

(cid:18)

r + 2

∂
∂r

(cid:18)

V (u, r)

β (u, r)

r+

∂
∂r

2V (u, r)

r

−

∂
∂r

β (u, r)

e−

2 β(u,r) =

(cid:19)

(cid:19)

(cid:19)

(cid:19) (cid:18)
8 r4Pt (u, r) π + (Q (u, r))2
r2

Einsφφ =

sin (θ)2
2

−

(cid:18)

4

(cid:18)

(cid:19)

r2 +

β (u, r)

∂2
∂u∂r

∂2
∂r2 V (u, r)
(cid:18)
(cid:19)
∂2
∂
∂r2 β (u, r)
∂r
8 r4Pt (u, r) π + (Q (u, r))2
(cid:16)

2V (u, r)

β (u, r)

−

(cid:19)

(cid:19)

(cid:17)

r

r2



+2 V (u, r)

(cid:18)
sin (θ)2

r + 2

∂
∂r

(cid:18)

V (u, r)

∂
∂r

(cid:19) (cid:18)

β (u, r)

r+

(cid:19)

e−

2 β(u,r) =

!

(30)



Using the simpliﬁcation routines for the uu component of the Einstein tensor :G00 = 8πT00

>lhsEuu := hcollect(lhs(grcomponent(Eins(dn, dn), [u, u])),

r, diff(V(u, r), u),

{

diff(beta(u, r), u)

,

}

{

V(u, r), diff(V(u, r), r), diff(beta(u, r), r)

)

}

lhsEuu = −

2 V (u, r) ∂

∂u β (u, r) + ∂
r2

∂u V (u, r)

+

V (u, r) e2 β(u,r) + 2 (V (u, r))2 ∂
r3

∂r β (u, r)

+

−

V (u, r) ∂

∂r V (u, r)

(31)

And for the right side of the same component of the Einstein ﬁeld equation:

> rhsEuu := kfactor(hcollect(hcollect(rhs(grcomponent(Eins(dn, dn), [u, u])),

 
 
 
2 Algorithm structure

22

Q(u, r), V(u, r), exp(2*beta(u, r)), epsilon(u, r)

{
epsilon(u, r)

{
8*Pi*exp(2*beta(u, r))*V(u, r)/r);

}

),

P(u, r), Q(u, r), rho(u, r), epsilon(u, r)

P(u, r), Q(u, r), rho(u, r),

,

}

{

,

}

{

V(u, r), beta(u, r)

),

}

((ω(u,r))2

ω(u,r)+1)ρ(u,r)

−
1+ω(u,r))2

(

−

+ ǫ (u, r)

(cid:19)

(32)

8 π e2 β(u,r)V (u, r)

rhsEuu

:=

(cid:18)

ω(u,r)P (u,r)
(

1+ω(u,r))2 + 1

8

−

(Q(u,r))2

r4π +

r

Let’s see now its Mixed components:

> grcalc(Eins(up, dn));

> gralter(Eins(up, dn), expand, factor);

> grdisplay(Eins(up, dn));

For the bondi spacetime :

Eins(up, dn)

Eins(up, dn)

2 Algorithm structure

23

Eins u

u =

2 V (u, r) ∂

∂r β (u, r)

∂
∂r V (u, r) +
r2

2

−
eβ(u,r)

eβ(u,r)

2

(cid:0)

(cid:1)

=

8 r4π ρ (u, r) + (Q (u, r))2
r4

!

Eins u

r =

4

Eins r

u =

 −

∂
∂r β (u, r)
2
eβ(u,r)
r
2 V (u, r) ∂
(cid:0)

(cid:1)

(cid:0)
= 8

(cid:1)

π r (P (u, r) + ρ (u, r))
V (u, r)

!

∂u β (u, r)
2
eβ(u,r)

∂
∂u V (u, r)

=

−
r2

ω (u, r) P (u, r) + ǫ (u, r) (ω (u, r))2
(cid:0)

(cid:1)

2 ǫ (u, r) ω (u, r) + ω (u, r) ρ (u, r) + ǫ (u, r)

π V (u, r)

8

(cid:16)

−
1 + ω (u, r))2

Eins θ

θ =

1
2

1
eβ(u,r)

∂2
∂u∂r

2

r2

4
(cid:18)

(cid:18)

β (u, r)

r2

(cid:19)

∂2
∂r2 V (u, r)

r

2

−

(cid:19)

∂
∂r

(cid:18)

V (u, r)

(cid:19) (cid:18)

∂
∂r

(cid:0)

2 V (u, r)

−

1
2

1
eβ(u,r)

(cid:1)

(cid:18)

2

Eins φ

φ =

∂2
∂r2 β (u, r)
(cid:19)
∂2
∂u∂r

r2

4
(cid:18)

(cid:18)

r + 2 V (u, r)

β (u, r)

(cid:19)(cid:19)

8 r4Pt (u, r) π + (Q (u, r))2
r4

=

−

β (u, r)

r2

(cid:19)

∂2
∂r2 V (u, r)

r

2

−

(cid:19)

∂
∂r

(cid:18)

V (u, r)

(cid:19) (cid:18)

∂
∂r

β (u, r)

r+

(cid:0)

2 V (u, r)

−

(cid:1)

(cid:18)

∂2
∂r2 β (u, r)
(cid:19)

r + 2 V (u, r)

β (u, r)

(cid:19)(cid:19)

8 r4Pt (u, r) π + (Q (u, r))2
r4

=

−

(cid:19)

!

(cid:19)

!

r (

−

−

(cid:18)

−

(cid:18)

(cid:18)
∂
∂r

(cid:18)
∂
∂r

(cid:17)





β (u, r)

r+

Grouping terms for the right side of the EqnEins Eins(up, dn)[r , u] component has

> rhsEru := kfactor(hcollect(rhs(grcomponent(Eins(up, dn), [r, u])),

P(u, r),

{

epsilon(u, r),omega(u, r)

V(u, r)

,

}

{

}

), 8*V(u, r)*Pi/r);

rhsEru =

8 π V (u, r)
r

ω (u, r) P (u, r)

1 + ω (u, r))2 + ǫ (u, r) +

(
−

ω (u, r) ρ (u, r)
1 + ω (u, r))2

(

−

!

(33)

An interesting expression is the one associated with the ﬁeld equation (G11 = 8πT11), which includes the pressure

and is very similar to the one obtained previously

G1

1 = 8πT 1
1

, which relates density to the functions of the metric

> lhsErr := hcollect(lhs(grcomponent(Eins(up, dn), [r, r])),

P(u, r),

{

(cid:0)

(cid:1)

epsilon(u, r), omega(u, r)

,

}

{

V(u, r)

);

}

lhsErr := −

2 V (u, r) ∂

∂r β (u, r)

∂
∂r V (u, r) +

−
eβ(u,r)

2

r2

eβ(u,r)

2

(cid:0)

(cid:1)

(34)

(cid:0)

(cid:1)

 
 
 
 
 
2 Algorithm structure

> rhsErr := hcollect(rhs(grcomponent(Eins(up, dn), [r, r])),

P(u, r)

,

}

{

V(u, r)

);

}

{

rhsErr :=

−

8 π P (u, r) +

(Q (u, r))2
r4

24

(35)

Both relate the metrical elements -- V (u, r) and β (u, r) -- with the physical quantities -- P (u, r) and ρ(u, r)-- of

pressure and density.

2.11 Trace

Let’s calculate the trace of G

> grdef(‘TG := g

^a ^b

a b

*G

{

}

}

{

‘);

> grcalcd(TG);

‘CPU Time‘ = 0 .005

For the bondi spacetime :

TG

∂
∂r

β (u, r)

∂
∂r

2

−

V (u, r) + 2 e2 β(u,r) + 4

TG :=

2 V (u, r)

1
e2 β(u,r)r2
(cid:18)
∂2
∂r2 V (u, r)

−

(cid:18)

r

2

−

(cid:19)

∂
∂r

(cid:18)

V (u, r)

(cid:19) (cid:18)

∂
∂r

β (u, r)

r

(cid:19)

2 V (u, r)

−

(cid:18)

β (u, r)

∂2
∂u∂r
(cid:19)
∂2
∂r2 β (u, r)
(cid:19)

(cid:18)

r2

r

(cid:19)

(36)

Very similar to the equation the left side of the angular component, of the ﬁeld equations G2

2 = 8πT 2

2 . Now the

trace of the Stress tensor:

> grdef(‘TT := g

^a ^b

a b

*T

{

}

}

{

‘);

> grcalcd(TT);

‘CPU Time‘ = 0 .004

For the bondi spacetime :

TT

T T = ρ (u, r)

P (u, r)

−

−

2Pt (u, r)

(37)

The contraction of the Field equation Traza = g µν Gµν = 8 πg µν Tµν

3 Results and Comments

25

> grdef(‘TrazaTE := g

^a ^b

a b

*G

{

}

}

{

= 8*Pi* g

^a ^b

a b

*T

{

}

}

‘);

{

> grcalcd(TrazaTE);

TrazaTE =

2 V (u, r)

1
e2 β(u,r)r2
(cid:18)
∂2
∂r2 V (u, r)
(cid:19)

−

∂
∂r

2

β (u, r)

∂
∂r

2

−

V (u, r) + 2 e2 β(u,r) + 4

r

−

∂
∂r

V (u, r)

∂
∂r

β (u, r)

r

(cid:19)

2 V (u, r)

−

(cid:18)
8 π (

(cid:19) (cid:18)
(cid:18)
ρ (u, r) + P (u, r) + 2 Pt (u, r))

=

−

−

(cid:18)

β (u, r)

∂2
∂u∂r
(cid:19)
∂2
∂r2 β (u, r)
(cid:19)

(cid:18)

r2

r

(cid:19)
(38)

This equation of the trace is important since it can be shown that it is equivalent to the equation

T µ0

;µ = 0

, the

Tolman-Oppenheimer-Volkoﬀ equation. When comparing the left side of the trace equation with the left side of

(cid:0)

(cid:1)

the angular component G2

2 = 8πT 2

2, of the equations from ﬁeld, we get

>difG22TG := simplify((1/2)*grcomponent(TG)-lhs(grcomponent(Eins(up, dn), [theta, theta])))

dif G22T G :=

2 β(u,r)

e−

−
(cid:0)

∂

∂r V (u, r) + e2 β(u,r)

r2

(cid:1)

(39)

3 Results and Comments

This section is dedicated to presenting some results obtained when executing the established and described com-

mands (MAPLE17 + GRTensorIII) of the previous section. We can summarize that the spreadsheet allows us to

calculate the diﬀerent tensor terms for a radiative coordinate system from the Einstein Field equations and their

Conservation equations. Throughout the spreadsheet development process, the importance of the expression to

determine the components of the Stress tensor from the Minkowski metric to its connection with the Bondi radia-

tive coordinate metric of the subsection (2.4) should be taken into account (9). You can see that it is necessary

to specify the scope of each component of the metric (9), to make the calculation of the entire sheet ﬂow without

interruption ([74]). This procedure has been used to perform the calculations for ([67, 68]). We prove that this

calculation process fully coincides with the result obtained manually. In these articles the equations allow us to

carry out the study and behavior of the physical variables calculated in the articles cited above. For example, the

Conservation equations

T µ

ν;µ = 0

for the charged case are:

(cid:0)

(cid:1)

4 Conclusions

T λ
0;λ =

T λ
1;λ =

= 0

(cid:19)
V,1
V −

1
r

(cid:19)

(ρ + P ) +

V
r2

+

(cid:18)
V
r

1 +

rV,1
V

∂
∂r "

ε +

ε +

(cid:19) "
ω (ρ + P )
ω)2

(1

−

P

∂
∂r
Q2
8πr4

(cid:18)

−

2β

e−
2πr
2
r
(cid:20)(cid:18)
2βT λ

−

β,10 −

P

−

ω (ρ + P )
ω)2

(1

−

+

#
Q2
8πr4

∂
∂u

(cid:18)
1
2
−
Q2
8πr4

(cid:19)

+

#

ρ +

Q2
8πr4

2β,1 +

(cid:18)

(cid:19)(cid:21)

= 0

Pt +

(cid:18)

−

(cid:19)

rV,1
V

ε +

(cid:19) "

P

Q2
8πr4

−

(cid:20)(cid:18)

P

(cid:18)

Q2
8πr4

−

+

(cid:19)

−

(cid:19)

Pt +

(cid:18)
V
r

∂
∂r "

ε +

(cid:19)(cid:21)

ω (ρ + P )
ω)2

(1

−

V
r2

+

(cid:18)
2V
r2

V
r

∂
∂r

T λ0

;λ = e−

1;λ = 0

e2βT λ1

;λ =

1 + 4rβ,1 +

ω (ρ + P )
ω)2

(1

−
Q2
8πr4

+

V
2r

2β,1 +

(cid:18)

V,1
V −

1
r

(cid:19)

(ρ + P ) +

#

+

∂
∂u

P

(cid:18)

−

Q2
8πr4

(cid:19)

# −

= 0

26

(40)

(41)

(42)

(43)

As can be seen in (2.9) and the concordance of these results with those obtained manually, it can allow us to trust

that this calculation to be carried out in another coordinate system should have a similar performance. Of course,

it is necessary to point out that it is still pending to use the complete equation (31) shown in the article ([68]). This

comparative study between the results obtained so far and solving the complete equation with the terms ∂ε

∂r and ∂ω

∂r

will be carried out in a future work to publish.

4 Conclusions

In this article we describe a series of computer procedures used in GR relying on the facilities of an integrated

platform such as the Maple package and GRTensorIII. These procedures of computational algebra, numerical and

graphic computation can facilitate algebraic calculation both for research purposes and for teaching GR at diﬀerent

levels.

References

[1] J. F. Nolan. Analytical diﬀerentiation on a digital computer. mathesis, Massachussettes Institute of Tecnology,

may 1953.

[2] H. G. Kahrimanian. Analytical diﬀerentiation by a digital computer. Master’s thesis, Temple University, May

1953.

4 Conclusions

27

[3] John McCarthy.

Recursive

functions

symbolic

expressions

and their

computation by ma-

chine, part

i.

Communications of

the ACM, 3, 1960.

doi:

10.1145/367177.367199.

URL

http://gen.lib.rus.ec/scimag/index.php?s=10.1145/367177.367199.

[4] E. Bond, M. Auslander, S. Grisoﬀ, R. Kenney, M. Myszewski, J. Sammet, R. Tobey, and S. Zilles. Formac

an experimental formula manipulation compiler. In Proceedings of the 1964 19th ACM National Conference,

ACM ’64, pages 112.101–112.1019, New York, NY, USA, 1964. ACM. doi: 10.1145/800257.808916. URL

http://doi.acm.org/10.1145/800257.808916.

[5] Hawkes P.W. and Kasper E.

Chapter 34 - numerical calculation of trajectories, paraxial prop-

erties and aberrations.

In Hawkes P.W. and Kasper E.,

editors, Principles of Electron Op-

tics

(Second Edition),

volume 1 of

-,

pages 585–626. Elsevier,

second edition edition,

oct

2017.

ISBN 978-0-08-102256-6.

doi:

https://doi.org/10.1016/B978-0-08-102256-6.00034-1.

URL

https://www.sciencedirect.com/science/article/pii/B9780081022566000341.

[6] J. Laskar and M. Gastineau. Trip: General computer algebra system for celestial mechanics, oct 2012.

[7] A. C. Hearn. Computation of algebraic properties of elementary particle reactions using a digital computer.

Communications of the ACM, 9(8):573–577, aug 1966. ISSN 0001-0782. doi: 10.1145/365758.365766. URL

http://doi.acm.org/10.1145/365758.365766.

[8] Anthony C. Hearn.

Applications of

symbol manipulation in theoretical physics.

Commun.

ACM, 14(8):511–516, August 1971.

ISSN 0001-0782.

doi:

10.1145/362637.362641.

URL

http://doi.acm.org/10.1145/362637.362641.

[9] W.S. Brown and A.C. Hearn. Applications of symbolic algebraic computation. Computer Physics Commu-

nications, 17(1):207 – 215, 1979. ISSN 0010-4655. doi: https://doi.org/10.1016/0010-4655(79)90082-1. URL

http://www.sciencedirect.com/science/article/pii/0010465579900821.

[10] S. Laporta and E. Remiddi. The analytic value of (ge-2) at three loops in QED. Nuclear Physics B Proceedings

Supplements, Vol.51, 51:142–147, December 1996. doi: 10.1016/S0920-5632(96)90018-3.

[11] A.G. Grozin. Using REDUCE in High Energy Physics. Cambridge University Press, 2005, sep 2005.

[12] Friedrich Jegerlehner (eds.) Friedrich Jegerlehner (auth.). The Anomalous Magnetic Moment of the Muon,

volume 274 of Springer Tracts in Modern Physics 274. Springer-Verlag Berlin Heidelberg, 2 edition, 2017.

ISBN 9783319635750 9783319635774.

4 Conclusions

28

[13] J. P. Fitch and H. I. Cohen. Using camal for algebraic computations in general relativity. General Relativity

and Gravitation, 11(6):411–418, dec 1979. doi: 10.1007/BF00759304.

[14] S. J. Campbell and J. Wainwright. Algebraic computing and the newman-penrose formalism in general

relativity. General Relativity and Gravitation, 8(12):987–1001, dec 1977. doi: 10.1007/BF00759742.

[15] J. Wainwright. Algebraic computing in general relativity. In General Relativity and Gravitation 1977, page 19,

aug 1977.

[16] Andrzej Krasi´nski and Marek Perkowski. Ortocartan a new computer program for analytic calculations in

general relativity. General Relativity and Gravitation, 13(1):67–77, jan 1981. doi: 10.1007/BF00766299.

[17] John G. Fletcher, Reg Clemens, Richard Matzner, Kip S. Thorne, and Barbara A. Zimmerman. Computer

programs for calculating general-relativistic curvature tensors. Astrophysical Journal, Letters, 148:L91, May

1967. doi: 10.1086/180022.

[18] R. A. d’Inverno. Alam - atlas lisp algebraic manipulator. The Computer Journal, 12(2):124–127, 01 1969.

ISSN 0010-4620. doi: 10.1093/comjnl/12.2.124. URL https://doi.org/10.1093/comjnl/12.2.124.

[19] Raymon A. D’Inverno. Algebraic computing in general relativity. General Relativity and Gravitation, 6(6):

567–593, dec 1975. doi: 10.1007/BF00761964.

[20] ´Eric Gourgoulhon and Marco Mancini. Symbolic tensor calculus on manifolds: a SageMath implementation.

Les cours du CIRM, 6(1):1–54, 2018. doi: 10.5802/ccirm.26. URL https://doi.org/10.5802%2Fccirm.26.

[21] M.A.H. MacCallum. Computer algebra in gravity research. Living Rev Relativ, 21:6, aug 2018. doi: 10.1007/

s41114-018-0015-6.

[22] D.A. Bolotin and S.V. Poslavsky. Introduction to Redberry: a Computer Algebra System designed for tensor

manipulation. arXiv e-prints, feb 2013.

[23] S. Poslavsky and D. Bolotin. Redberry: a Computer Algebra System designed for tensor manipulation. In

Journal of Physics Conference Series, volume 608 of Journal of Physics Conference Series, page 012060, may

2015. doi: 10.1088/1742-6596/608/1/012060.

[24] Zimmermann P.; Casamayou A.; Cohen N.; Connan G.

Computational Mathematics with Sage-

Math —— Polynomials, volume 10.1137/1.9781611975468, chapter Chapter 7, pages 125–151.

SIAM,

2018.

ISBN 978-1-61197-545-1,978-1-61197-546-8.

doi:

10.1137/1.9781611975468.ch7.

URL

http://gen.lib.rus.ec/scimag/index.php?s=10.1137/1.9781611975468.ch7.

4 Conclusions

29

[25] Kasper Peeters. Cadabra: a ﬁeld-theory motivated symbolic computer algebra system. Computer Physics

Communications, 176(8):550 – 558, 2007. ISSN 0010-4655. doi: https://doi.org/10.1016/j.cpc.2007.01.003.

URL http://www.sciencedirect.com/science/article/pii/S0010465507000318.

[26] L. Brewin. A brief introduction to Cadabra: A Tool for Tensor Computations in General Relativity. Computer

Physics Communications, 181:489–498, mar 2010. doi: 10.1016/j.cpc.2009.10.020.

[27] V.P. Gerdt. Analytical calculations in high energy physics by computer. Computer Physics Communications,

20:85–90, sep 1980. doi: 10.1016/0010-4655(80)90113-7.

[28] V.P. Gerdt, O.V. Tarasov, and D.V. Shirkov. Reviews of topical problems: Analytic calculations on digital

computers for applications in physics and mathematics. Soviet Physics Uspekhi, 23:59–77, jan 1980. doi:

10.1070/PU1980v023n01ABEH004898.

[29] H. Strubbe. Development of the schoonship program. Computer Physics Communications, 18:1–5, sep 1979.

doi: 10.1016/0010-4655(79)90019-5.

[30] Martinus J. G. Veltman and David N. Williams. Schoonschip ’91. The University of Michigan Ann Arbor, MI

48109-1120, 8, 06 1993. URL http://arxiv.org/abs/hep-ph/9306228v2.

[31] M. J. Levine. Dirac matrix and tensor algebra on a digital computer. pages 454–455, 1967.

[32] M.J. Levine and R. Roskies. Hyperspherical approach to quantum electrodynamics: sixth-order magnetic

moment. Physical Review D, 9(2):421–429, January 1974. doi: 10.1103/PhysRevD.9.421.

[33] M. J. Levine and R. Roskies. Ashmedai and a large algebraic problem. In Proceedings of the Third ACM

Symposium on Symbolic and Algebraic Computation, SYMSAC ’76, pages 359–364, New York, NY, USA, 1976.

ACM. doi: 10.1145/800205.806357. URL http://doi.acm.org/10.1145/800205.806357.

[34] V.E. Lewis, Massachusetts Institute of Technology, Massachusetts Institute of Technology. Laboratory for

Computer Science, United States. Army Research Oﬃce, and United States. Oﬃce of Naval Research. Pro-

ceedings of the 1979 MACSYMA Users’ Conference: Washington, D.C., June 20-22, 1979. MIT Laboratory

for Computer Science, 1979. URL https://books.google.co.ve/books?id=NNY-AAAAIAAJ.

[35] Richard Pavelle and Paul S. Wang. Macsyma from f to g.

Journal of Symbolic Computation, 1

(1):69 – 100, 1985.

ISSN 0747-7171.

doi:

https://doi.org/10.1016/S0747-7171(85)80030-4.

URL

http://www.sciencedirect.com/science/article/pii/S0747717185800304.

4 Conclusions

30

[36] Joel Moses.

Macsyma:

A personal history.

Journal of Symbolic Computation,

47(2):

123 – 130,

2012.

ISSN 0747-7171.

doi:

https://doi.org/10.1016/j.jsc.2010.08.018.

URL

http://www.sciencedirect.com/science/article/pii/S0747717110001483.

[37] Matthias Steinhauser, Takahiro Ueda, and Jos A.M. Vermaseren. Parallel versions of form and more. Nuclear

and Particle Physics Proceedings, 261-262:45–57, apr 2015. doi: 10.1016/j.nuclphysbps.2015.03.006.

[38] B. Ruijl, T. Ueda, and J. Vermaseren. Form version 4.2. arXiv e-prints, July 2017.

[39] J. Vermaseren. New features of form and future plans.

In 13th International Symposium on Radiative

Corrections; Applications of Quantum Field Theory to Phenomenology. 25-29 September, 2017 . St. Gilgen,

Austria. Online at ¡A href=“https://pos.sissa.it/cgi-bin/reader/conf.cgi?conﬁd=290”¿https://pos.sissa.it/cgi-

bin/reader/conf.cgi?conﬁd=290¡/A¿, id.22, page 22, January 2017.

[40] Stephen Wolfram. Some Topics in Theoretical High-Energy Physics. PhD thesis, CALIFORNIA INSTITUTE

OF TECHNOLOGY., jan 1980.

[41] Stephen Wolfram. Undecidability and intractability in theoretical physics. prl, 54(8):735–738, February 1985.

doi: 10.1103/PhysRevLett.54.735.

[42] Stephen Wolfram. The practical and theoretical future of computation in physics. In APS March Meeting

Abstracts, volume 2019 of APS Meeting Abstracts, page F22.001, January 2019.

[43] Stephen Wolfram. A class of models with the potential to represent fundamental physics. arXiv e-prints, art.

arXiv:2004.08210, April 2020.

[44] Bruce W. Char, Keith O. Geddes, W. Morven Gentleman, and Gaston H. Gonnet. The design of maple: A com-

pact, portable and powerful computer algebra system. In In EUROCAL ’83, Proceedings of the International

Symposium on Symbolic and Algebraic Computation, EUROCAL ’83, pages 101–115, London, UK, UK, apr

1983. Springer-Verlag. ISBN 3-540-12868-9. URL http://dl.acm.org/citation.cfm?id=646657.700400.

[45] Portugal R. and Saut´u S.L. Applications of maple to general relativity. Computer Physics Communications,

105, 1997. URL http://www.sciencedirect.com/science/article/pii/S0010465597000787.

[46] Dumitru N. Vulcanov and Gabriela Ciobanu. Maple procedures in teaching the canonical formalism of general

relativity. arXiv e-prints, art. physics/0010053, oct 2000.

[47] V.L. Kalashnikov. Introduction to Relativistic Astrophysics and Cosmology through Maple. arXiv General

Relativity and Quantum Cosmology e-prints, mar 2001.

4 Conclusions

31

[48] D.N. Vulcanov. Gravity, torsion, dirac ﬁeld and computer algebra using maple and reduce. arXiv General

Relativity and Quantum Cosmology e-prints, September 2002.

[49] Wolfgang Schreiner, Christian Mittermaier,

and Karoly Bosa.

Distributed maple:

parallel

computer algebra in networked environments.

Journal of Symbolic Computation,

35(3):305 –

347,

2003.

ISSN 0747-7171.

doi:

https://doi.org/10.1016/S0747-7171(02)00137-2.

URL

http://www.sciencedirect.com/science/article/pii/S0747717102001372.

[50] D.N. Vulcanov and V.D. Vulcanov. Maple libraries for cosmology. eprint arXiv:cs/0409006, sep 2004.

[51] Frank Y. Wang. Physics with MAPLE: The Computer Algebra Resource for Mathematical Methods in

Physics. Physics Textbook. Wiley-VCH, 1 edition, may 2006.

ISBN 3-527-40640-9,9783527406401. URL

http://gen.lib.rus.ec/book/index.php?md5=1BFCDB89E13646633CC45CE9922112B6.

[52] C.A. Sporea and D.N. Vulcanov. Using maple + grtensorii in teaching basics of general relativity and cosmol-

ogy. Rom. Rep. Phys., (68):29–40, 2016.

[53] SWMATH. Information service for mathematical software. SWMATH, 2021. https://www.swmath.org/.

[54] SIGSAM Bulletin. Special interest group on symbolic & algebraic manipulation. Dictionary Of Computating,

2021. http://www.sigsam.org/Resources/Software.html.

[55] Maxima A Computer Algebra System.

Other free computer algebra systems. MAXIMA, 2021.

https://maxima.sourceforge.io/compalg.html.

[56] RISC Research Institute for Symbolic Computation. Research institute for symbolic computation. Research

Institute for Symbolic Computation, 2021. https://risc.jku.at/software/.

[57] FOLDOC.

Free

on line dictionary

of

computing.

Dictionary Of Computating,

2021.

https://foldoc.org/symbolic+mathematics.

[58] Computer Algebra Netherlands. Foundation can (computer algebra netherlands). Computer Algebra Nether-

lands, 2021. https://computeralgebra.nl/.

[59] W. S. Brown. Proceedings of the ﬁrst acm symposium on symbolic and algebraic manipulation. In SYSMAC

’66, editor, A language and system for symbolic algebra on a digital computer ALTRAN, number 1 in SAAC,

pages 501–540, 1966. doi: 10.1145/800005.807955.

[60] A. C. Hearn.

The

reduce

program for

computer

algebra.

In A. Visconti,

edi-

tor,

3th Colloquium on Advanced Computing Methods

in Theoretical

Physics,

pages

4 Conclusions

32

AV/1–AV/19, Marseilles,

jun

1973. Centre

de

Physique Th´eorique CNRS.

URL

https://inis.iaea.org/collection/NCLCollectionStore/_Public/07/229/7229583.pdf?r=1&r=1.

CNRS technical report 73/P.550.

[61] Michael Monagan and Roman Pearce. Poly: A new polynomial data structure for maple 17. ACM Com-

mun. Comput. Algebra, 46(3/4):164 – 167, jan 2013. ISSN 1932-2240. doi: 10.1145/2429135.2429173. URL

https://doi.org/10.1145/2429135.2429173.

[62] Char Bruce W., Geddes Keith O., Gonnet Gaston H., Leong Benton, Monagan Michael B., and Watt Stephen

M. Maple V Language Reference Manual. Springer US, 1 edition, 1991. ISBN 978-0-387-94124-0,978-1-4615-

7386-9. URL http://gen.lib.rus.ec/book/index.php?md5=33976bde4f045b1ce2e97f0abe593d0e.

[63] Labahn George Geddes Keith O., Czapor

Stephen R.

Algorithms

for Computer Al-

gebra.

Springer,

1992

edition,

1992.

ISBN 0792392590,9780792392590.

URL

http://gen.lib.rus.ec/book/index.php?md5=8dc5ec01fc92cffddeeb422cc6149edb.

[64] Maplesoft.

Index

of

descriptions

for

packages

of

library

functions.

Maple,

7

2021.

https://www.maplesoft.com/support/help/Maple/view.aspx?path=index/package.

[65] Lake K. Musgrave P., Pollney D.

Grtensoriii package

for maple.

GRTensorIII,

2021.

https://github.com/grtensor/grtensor.

[66] P. Musgrave and K. Lake. Engineering applications of grtensorii 1:elasticity-ﬁnite deformations. GRTensorII,

1(1):22, aug 1998.

[67] V. Medina and N. Falcon . Relativistic model for radiating spherical collapse. Progress in Physics, 14(1):

46–53, jan 2018.

[68] V´ıctor Medina. A self-similar solution of a ﬂuid with spherical distribution in general relativity. Indian Journal

of Physics, 96(1):317–328, jan 2022. doi: 10.1007/s12648-020-01959-1.

[69] Davies G.

pertutils.mpl

by

george

davies written

for

grtensorii.

PertUtils,

1998.

http://grtensor.phy.queensu.ca/NewDemo/Blackholes/Utils/pertutils.mpl.

[70] G. Davies. Second-order black hole perturbations: A computer algebra approach, i - the schwarzschild space-

time. arXiv General Relativity and Quantum Cosmology e-prints, October 1998.

[71] L. Herrera, J. Jim´enez, and G. J. Ruggeri. Evolution of radiating ﬂuid spheres in general relativity.

Phys. Rev. D, 22:2305–2316, nov 1980. doi: 10.1103/PhysRevD.22.2305.

4 Conclusions

33

[72] V. Medina, L. N´u˜nez, H. Rago, and A. Pati˜no.

Evolution of radiating charged spheres in gen-

eral relativity. Canadian Journal of Physics, 66:981–986, nov 1988.

doi:

10.1139/p88-158. URL

http://gen.lib.rus.ec/scimag/index.php?s=10.1139/p88-158.

[73] H. Bondi. The Contraction of Gravitating Spheres. Proceedings of the Royal Society of London Series A, 281:

39–48, aug 1964. doi: 10.1098/rspa.1964.0167.

[74] P. Musgrave and K. Lake. Junctions and thin shells in general relativity using computer algebra: I. the darmois

- israel formalism. Classical and Quantum Gravity, 13:1885–1899, July 1996. doi: 10.1088/0264-9381/13/7/

018.

