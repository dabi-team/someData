An Exploratory Study on Regression Vulnerabilities
Vivek Arora∗
Alberto Bacchelli
Independent Researcher
University of Zurich
India
Switzerland
v2vivar@gmail.com
bacchelli@ifi.uzh.ch

Larissa Braz, Enrico Fregnan
University of Zurich
Switzerland
{larissa,fregnan}@ifi.uzh.ch

ABSTRACT
Background: Security regressions are vulnerabilities introduced
in a previously unaffected software system. They often happen as
a result of source code changes (e.g., a bug fix) and can have severe
effects.
Aims: To increase the understanding of security regressions. This
is an important step in developing secure software engineering.
Method: We perform an exploratory, mixed-method case study
of Mozilla. First, we analyze 78 regression vulnerabilities and 72
bug reports where a bug fix introduced a regression vulnerability
at Mozilla. We investigate how developers interact in these bug
reports, how they perform the changes, and under what condi-
tions they introduce regression vulnerabilities. Second, we conduct
five semi-structured interviews with as many Mozilla developers
involved in the vulnerability-inducing bug fixes.
Results: Software security is not discussed during bug fixes. De-
velopers’ main concerns are the complexity of the bug at hand and
the community pressure to fix it. Moreover, developers do not to
worry about regression vulnerabilities and assume tools will detect
them. Indeed, dynamic analysis tools helped finding around 30% of
regression vulnerabilities at Mozilla.
Conclusions: These results provide evidence that, although tool
support helps identify regression vulnerabilities, it may not be
enough to ensure security during bug fixes. Furthermore, our results
call for further work on the security tooling support and how to
integrate them during bug fixes.
Data and materials: https://doi.org/10.5281/zenodo.6792317

CCS CONCEPTS
• Security and privacy → Software security engineering; •
Software and its engineering → Software testing and debugging.

KEYWORDS
software vulnerabilities, regressions

2
2
0
2

l
u
J

5

]
E
S
.
s
c
[

1
v
2
4
9
1
0
.
7
0
2
2
:
v
i
X
r
a

∗The author contributed to this work while being employed at Delft University of
Technology, The Netherlands.

1 INTRODUCTION
Fixing bugs is an essential task for developers. Overall, developers
spend 45–80% of their time and effort looking for, understanding,
and fixing bugs [2, 13, 52].

However, some fixes either do not solve the problem completely
or even introduce new issues [51], namely regression bugs [9].
Regression bugs occur as an unintended consequence of program
changes [41] and happen whenever a software functionality that
previously worked no longer works as planned. For instance, a
software system may become vulnerable after a bug fix due to a
vulnerability introduced by the bug fixing change itself. A software
vulnerability is a security flaw, glitch, or weakness found in software
code that could be exploited by an attacker [16] to cause harm to
the stakeholders of a software system [29].

Mozilla Foundation [26] is a free software community that uses,
develops, spreads, and supports Mozilla products, most notably the
Firefox web browser. Mozilla gives significant importance to the se-
curity of its applications. For instance, one of their principles is that
“individuals’ security and privacy on the internet are fundamental
and must not be treated as optional” [23]. Yet, security vulnerabil-
ities still affect their products and users. In 2019, Mozilla rushed
out a new version of Firefox to fix a critical regression vulnerability
introduced with Mozilla’s 12-patch security update [50]. A Mozilla
developer said: “we fixed [bug] 431260, which was not really a
security problem, and we introduced this bug, which probably is.
Perhaps we need to be more picky about what we land on branch.”
Many vulnerabilities have been introduced as regressions [1, 14, 49]
and put the names of big companies, such as Microsoft and Apple,
under the spotlight [51]. To overcome this phenomenon, one should
check the application’s security after each source code change [41],
including during bug fixes.

The reasons behind regression bugs can be many. For instance,
Yin et al. [51] stated that time pressure can cause developers to
not think cautiously enough while under a very tight schedule.
Time pressure may also prevent testers from conducting thorough
regression tests before releasing the fix. In addition, fixing bugs
usually has a narrow focus (e.g., removing the bug) compared to,
e.g., the development of new features. As such, the developers fixing
a bug may regard fixing the target bug as the sole objective and
accomplishment to be evaluated by their manager. Therefore, they
may pay significantly more attention to the bug itself than the
correctness of the rest of the system.

Moreover, ideally, the developers fixing a bug should be the ones
with the most knowledge about the related code. In reality, this
may not always be the case. Nevertheless, vulnerabilities are con-
ceptually different than traditional bugs [10]. It is challenging to
keep software systems permanently secure as changes either in
the system itself or in its environment may cause new threats and
software vulnerabilities [19]. Thus, we need specific evidence to

 
 
 
 
 
 
Accepted at ESEM’22, September 2022, Helsinki, Finland

Larissa Braz, Enrico Fregnan, Vivek Arora, and Alberto Bacchelli

be able to understand and tackle regression vulnerabilities. To
the best of our knowledge, there is still no study that investigates
regression vulnerabilities, specifically how, why, and under which
circumstances they are introduced. Therefore, it is necessary to
investigate the circumstances that lead to the introduction of re-
gression vulnerabilities during bug fixes, and why such fixes are
marked as successful, i.e., the vulnerabilities are not detected when
the fixes are reviewed.

In this paper, we present an exploratory, mixed-method case
study we conducted to investigate regression vulnerabilities. We
focused on Mozilla as the subject of our study, because of the avail-
ability of its development data, the widespread popularity of its
products, and its focus on security.

First, we investigated the bug reports of regression vulnerabili-
ties introduced in Mozilla through bug fixes. We identified these
cases by selecting reports marked as security issues and with their
‘regressed by’ tag filled-in.1 In total, we investigated 78 regres-
sion vulnerabilities to answer why, how, and in which situations
developers introduced them. We performed a qualitative analysis of
both the bug fix and the regression vulnerability, including commit
messages and bug reports’ comments.

In the second part of our study, we conducted five semi-structured
interviews with as many Mozilla developers, who were involved in
the bug fixes we investigated in the first part. Each interview lasted
30 minutes and strengthened our understanding of the reasons why
regression vulnerabilities were introduced during fixes.

Our results show that a total of 72 bug fixes introduced the 78
regression vulnerabilities we investigated. Security was not a con-
cern in the comments of these bug fixes: Developers only discussed
the potential security impact of the bug fix in 5 out of the 72 reports.
Concerning regression vulnerabilities, our findings highlight that
most vulnerabilities were caused by structural or resource defects:
34 bug fixes impacted the structure or the organization of the code
(e.g., moved a functionality from one module to another), while
16 concerned the misuse of memory resources (e.g., buffer copy
without checking input’s size - CWE-120 [39]). The primary source
of detection of regression vulnerabilities is Mozilla’s users (30 out of
the 79 analyzed regression vulnerabilities). However, dynamic anal-
ysis tools, such as address sanitizers [24], also played a fundamental
role in detecting regression vulnerabilities. The interviewees con-
firmed the importance of the tools, yet recognized their limitations
and need for improvement.

2 BACKGROUND AND RELATED WORK
We describe the Mozilla’s bug fixing process and summarize rele-
vant literature on software security and the bug fixing process.

2.1 Mozilla’s bug fixing process
Bug reports: As its main bug tracking system, Mozilla uses Bugzilla,
a web-based general-purpose bug tracking system [27]. Bugs are

1In 2018, Mozilla introduced a field (regressed by) into their bug tracking system
Bugzilla [27]. Mozilla uses the mozregression tool [20] to automatically find regression
ranges. Once the change set which caused the regression has been identified, the
Regressed by field is set to the id of the bug associated with the change-set (i.e.,
the regression inducing bug fix). Every regressed by information is confirmed by
Mozilla’s developers, providing more confidence in the regression data.

organized by type to make it easier to (1) perform triage, (2) as-
sign a bug to a developer, and (3) understand a release’s quality. A
bug report can be labeled as a ‘defect’ (regression, crash, security
vulnerability, and any other reported issue), ‘enhancement’ (new
feature, UI improvement, and any other request for user-facing
enhancements to the product, not engineering changes), or ‘task’
(refactoring, removal, replacement, and any other engineering task).
All types need triage decisions from engineers or product managers.
Mozilla states that distinguishing between defects and tasks is im-
portant to understand code quality and reduce defects introduced
while working on new features or fixing existing defects [25].
Regressions: Mozilla defines a regression as a ‘defect’ introduced
by a change [22]. For instance, for regression bugs reported in
Mozilla-Central (the main development tree for Firefox), the policy
is to tag the bug as a regression, identify the commits causing the
regression, then mark the bugs associated with those commits as
causing the regression. Mozilla uses the mozregression tool [20] to
find regression ranges. The tool uses a binary search algorithm for
quickly determining the changeset range corresponding to when a
problem was introduced. Until the changeset causing the regression
has been found through mozregression or another bisection tool,
the bug is also tagged as ‘regression-window-wanted’. Once the
changeset which caused the regression is identified, the previous
keyword is removed and the ‘Regressed by’ field is set to the id of
the bug associated with the changeset. Setting the ‘Regressed by’
field updates the ‘Regresses’ field in the regression-inducing bug.
In addition, a ‘needinfo’ tag is set for the author of the regressing
patch, asking them to fix/revert the change. Mozilla’s developers
confirm every ‘Regressed by’ value.
Software vulnerabilities: Mozilla considers a bug as a security
bug when it has been reported as security-sensitive in Bugzilla
and received a security rating. According to Mozilla guidelines [45],
all security bugs should be reported as private, making the process
for patching them slightly different than the usual process for fix-
ing a bug. A security-sensitive bug in Bugzilla means that all its
information, except its ID number, are hidden. This includes the
title, comments, reporter, assignee, and CC’d people.

A security-sensitive bug usually remains private until a fix is
shipped in a new release and after a time to ensure that a maximum
number of users updated their version of Firefox. Bugs are usually
made public after six months and a couple of releases. From the
moment a security bug has been privately reported to when a fix is
shipped and the bug is set public, all information about that bug is
handled carefully to avoid an unmitigated vulnerability becoming
known and exploited before Mozilla releases a fix (0-day).

Moreover, Mozilla asks contributors to be careful not to dis-
close sensitive information about the bug in public places, such
as Bugzilla. They should not add public bugs in the duplicate,
depends on, blocks, regression, regressed by, or see also
sections if these bugs could give hints about the nature of the
security issue. In our study, we analyze only the public security
vulnerabilities tagged as regressions in Mozilla’s Bugzilla.

An Exploratory Study on Regression Vulnerabilities

Accepted at ESEM’22, September 2022, Helsinki, Finland

2.2 Related work
Incorrect bug fixes: Despite its omnipresence, code change is
perhaps the least understood and most complex aspect of the devel-
opment process [42]. However, code changes, such as bug fixes, are
not bulletproof as they are written by human [51]. Some fixes either
do not solve the problem entirely or even introduce new ones.

Previous studies have investigated incorrect bug fixes [4, 31,
42, 44, 51]. For instance, Sliwerski et al. [44] proposed a way to
automatically locate fix-inducing changes and studied the incorrect
fix ratios in Eclipse and Mozilla. They identified that developers
make more bug fixing mistakes on Fridays.

Yin et al. [51] presented a characteristic study on incorrect bug-
fixes from four large operating systems, investigating not only the
mistake patterns during bug fixes but also the possible human rea-
sons in the development process when these incorrect fixes were
performed. They found that at least 14.8% ∼ 24.4% of fixes for post-
release bugs are incorrect and impact end users. Developers and
reviewers involved in incorrect fixes usually do not have enough
knowledge about the code under analysis. For example, 27% of the
incorrect fixes are made by developers who have never touched the
files associated with the fix. However, traditional bugs are conceptu-
ally different from software vulnerabilities [10]. Therefore, evidence
about the former may not translate to the latter. For this reason,
further studies are needed to investigate regression vulnerabilities
introduced by incorrect bug fixes.
Security regression detection: Keeping software systems per-
manently secure is challenging: changes either in the system itself
or in its environment may introduce new threats and software
vulnerabilities [19]. Regression testing is performed to ensure that
changes made to existing software do not cause unintended effects
on unchanged parts of the software and that the changed parts
behave as intended [11, 36]. Therefore, a combination of regression
and security testing, called security regression testing, which en-
sures that changes made to a system do not harm its security, is
of high significance [18]. Mehta [38] underlined the importance of
regression testing while verifying the vulnerabilities of a system.
Furthermore, Felderer and Fourneret [18] identified a retest-all
approach as the most commonly applied regression testing tech-
nique for regression vulnerability detection. However, they also
stated how retest-all has significant limitations in terms of fault
detection and localization. In our study, we further investigate
whether and how developers ensure security during bug fixes in
practice. For example, we study whether developers use regression
detection tools when fixing the bugs or reviewing the fix changes.

3 METHODOLOGY
Our goal is to gain a deeper knowledge on regression vulnerabilities,
in particular how and why they are introduced. We run a case study
based on a mixed-method approach to collect different types of
qualitative and quantitative evidence.

3.1 Research Questions
We structured our study around three main research questions.
First, we focus on understanding the circumstances around the
introduction of regression vulnerabilities. Thus, we investigate
whether security is a developer’s concern during bug fixes:

Figure 1: Timeline of a regression vulnerability in Mozilla.

RQ1. To what extent is software security discussed during the

bug fixing process?

After assessing the role of software security in the bug-fixing
process, we aim to understand the causes that led to the introduction
of regression vulnerabilities. Thus, we ask:

RQ2. What are the causes behind regression vulnerabilities?

Finally, we investigate developers’ perceptions of regression

vulnerabilities through semi-structured interviews.

RQ3. How do developers perceive regression vulnerabilities?

3.2 Vulnerability-Inducing Bug Fixes Analysis
Figure 1 presents the timeline of a regression vulnerability in Mozilla.
We see that a bug report 1603088 was opened on 11/12/2019 (T1) and
later fixed on 06/01/2020 (T2). However, the bug fix introduced a
vulnerability in the code. On 07/02/2020, a new bug report 1614101
was opened to report a vulnerability (T3). It was identified as a
regression of the first bug fix only on 28/02/2022 (T3). Finally the
vulnerability was fixed on 04/03/2020 (T4).

To study regression vulnerabilities that happened in the his-
tory of Mozilla, we manually analyzed (1) the bug reports labeled
as defects that introduced regression vulnerabilities (e.g., Bug
1603088 in Figure 1) and (2) the bug reports of the security issues
tagged as regressions (e.g., Vulnerability 1614101 in Figure 1).

To retrieve the regression software vulnerabilities, we queried
Bugzilla with the settings: Keywords: sec-high, sec-critical,
sec-moderate, sec-incident, sec-low, and Regressed by: (is
not empty). Subsequently, we retrieved information on bugs in-
ducing vulnerabilities by accessing the bug reports referenced in
the ‘Regressed by’ field of the vulnerabilities’ reports. We filtered
out the reports labeled as enhancements or tasks; instead, we ana-
lyzed only the bug reports labeled as defects, as well as the reports
of the vulnerabilities they regressed.

In our manual analysis, we first analyzed the report of the bug
that introduced the vulnerability (the vulnerability-inducing bug,
Bug 1614101 in Figure 1) and also the report of the regression
vulnerability (Vulnerability 1614101 in Figure 1) by going through
their descriptions and titles provided by the bug reporters, and
the discussion comments left in the reports by the developers. We
performed an open card sort [46] to extract emerging themes from
the comments of the bug reports of both the vulnerability-inducing

Regression vulnerability not identiﬁed19/02/2020Depends onChange D6338508/01/2020Bug ﬁx &Vulnerability introduced (T2)Vulnerability not identiﬁed11/12/2019Bug report opened (T1)06/01/2020Depends onChange D5873107.02.2020Bug report opened (T3)28/02/2020Regressed byBug 160308804/03/2020Security ﬁx (T4)Vulnerability 1614101Bug 1603088Accepted at ESEM’22, September 2022, Helsinki, Finland

Larissa Braz, Enrico Fregnan, Vivek Arora, and Alberto Bacchelli

bug (1603088?) and the regression vulnerability (1614101). The
first author created self-contained units, then sorted them into
themes. The units were interactively sorted several times to ensure
the themes’ integrity. The last author reviewed the final themes.
Through discussions around the themes, we evaluated controversial
answers, reduced potential bias caused by wrong interpretations of
comments from the bug reports, and strengthened the confidence
in the card sorting output (available in our replication package [7]).
Moreover, we applied the General Defect Classification scheme
(GDC) [17, 40] to classify (1) the bugs, (2) the bugs’ fixing code
changes (T2 in Figure 1), and (3) the regression vulnerabilities. The
GDC scheme classifies code review comments, static analysis tool
warnings, technical comments or suggestions, and code analysis.
Due to the broader scope of the bug reports, GDC can help deriving
meaningful results from the manual analysis.

To complete our investigation, we classified the collected re-
gression vulnerabilities using the Common Weakness Enumeration
(CWE) taxonomy [39]. CWE is a comprehensive list of common pro-
gramming errors that can lead to a vulnerability. In addition, CWE’s
documentation provides details about the security issues, such as
description, relationship to other CWEs, consequences of the secu-
rity weakness, examples of code snippets, common attack patterns,
and notes related to its maintenance and possible research gaps.
The current version of CWE list includes 922 security weaknesses.
Due to its cause-based categorization, it can help identify and pre-
vent common programming errors that might lead developers to
introduce vulnerabilities in the application’s code.

3.3 Semi-structured Interviews
To investigate the developers’ perspective on regression vulnera-
bilities, we performed a set of one-to-one semi-structured inter-
views [37] with software developers at Mozilla. Semi-structured
interviews rely on interview guidelines containing general group-
ings of topics and questions rather than a strict pre-determined
set of questions [3, 37]. Therefore, the interviewer can adjust the
interview flow based on the answers. In semi-structured interviews,
participants can share their thoughts and perceptions while provid-
ing researchers with the opportunity to explore new ideas as they
emerge during the interview [34, 35]. Given these characteristics,
semi-structured interviews are often used in exploratory studies to
“find out what is happening [and] to seek new insights” [47].

Semi-structured interviews help us collect developers’ descrip-
tions, experiences, observations, and assessments of how Mozilla
developers deal with regression vulnerabilities. The semi-structured
interviews complement the previously conducted analysis of bug
reports as these may not completely reflect the bug fixing process:
e.g., developers may not describe the reasoning behind all decisions
taken during the bug fix.

The interview guideline was collectively developed and revised
several times by the authors of this paper. The main path of the
final interview guideline has eleven questions. In the following, we
describe the main topics within our guideline.

(1) Introduction and background. We start each interview spend-
ing a few minutes explaining who we are and our research. We
review the main points of the consent form interviewees signed
prior to the interviews and answer any questions. Subsequently,

we ask questions about the participants’ backgrounds (e.g., their
programming experience and current role). This discussion serves
as an icebreaker and provides us with some context.

(2) Bug fixing. In this part of the interview, we ask general ques-
tions about the bug fixing process. First, we ask participants to
explain the bug fixing process at Mozilla. Although Mozilla has
publicly available documentation on the processes followed by
its developers, teams and individual developers can adjust these
guidelines to suit their needs or the products they are developing.
Moreover, we ask participants their definition of regression during
fixes and whether specific tests or guidelines exist for regressions.

(3) Regression vulnerabilities. In this step, we introduce the
topic of regressions vulnerabilities and ask specific questions about
it. We aim to understand how participants deal with this type of
regression and whether they are any different from other types
of regressions (e.g., performance regressions). In addition, we also
inquire about the methods and practices the interviewees follow to
avoid introducing regression vulnerabilities while fixing a bug.

(3) Advice for novices. We ask participants about the main chal-
lenges they face when dealing with regression vulnerabilities. We
also discuss what has proven most helpful during these activities.
Finally, we ask what advice they would give novice developers
regarding security during bug fixes and regression vulnerabilities.

(4) Wrap-up. We conclude the interviews with wrap-up questions
to collect final feedback from the participants.

We conducted the interviews through a video-conferencing ap-
plication. After obtaining the participants’ consent, we recorded
the interviews. The audio of each interview was then transcribed
and divided into smaller coherent units for subsequent analysis.
Moreover, we performed card sorting [46] to extract emerging
themes from the interviews. We followed a similar process as in
the analysis of the bug reports (see Section 3.2): The first and sec-
ond authors created self-contained units, then sorted them into
themes. To ensure the themes’ integrity, the authors interactively
sorted the units several times until the final themes were reached.
Through discussions among the authors involved in this process, we
evaluated controversial answers, reduced potential bias caused by
wrong interpretations of a participant’s answer, and strengthened
the confidence in the card sorting output. The complete interview
guideline, the transcripts of the interviews, and the card sorting
outputs are available in our replication package [7].

Recruiting Participants. To recruit participants for the inter-
views, we contacted software developers from Mozilla who reported
a vulnerability-inducing bug (T1) or a software vulnerability (T3), as
well as the developers assigned as bug maintainers of these reports.
We also contacted developers at Mozilla in the authors’ personal
network. For each interview participant, we donated 30 USD to
the Mozilla Foundation or a charity chosen by the interviewee as a
token of appreciation for their time and effort.

4 RESULTS
In this section, we report the results of our study.

An Exploratory Study on Regression Vulnerabilities

Accepted at ESEM’22, September 2022, Helsinki, Finland

4.1 Regression Vulnerabilities and Bug Reports
In total, Bugzilla returned 6,667 public bug reports of security issues
when we applied the keywords filter (Section 3.2). By filtering these
vulnerability with the key Regressed by: (is not empty), we
retrieved 187 regression vulnerabilities reports (T3 in Figure 1).

Then, we proceeded to retrieve the bug reports (T1 in Figure 1) of
the fixes that introduced the vulnerabilities using the bug id listed
in the Regressed by field of the regression vulnerabilities reports.
In total, 78 regression vulnerabilities were introduced by bug reports
labeled as defects, 77 by reports labeled as enhancements, and
28 by reports labeled as tasks. This label was blank or not set in
four reports. In our study, we only consider the vulnerabilities
regressed by bug reports labeled as defects. Moreover, seven bug
fixes introduced more than one regression vulnerability at a time. In
these cases, we considered the vulnerability-inducing bug reports
and their fix changes (T2 in Figure 1) only once in our analysis.
After applying these exclusion criteria, we could use data from 78
regression vulnerability reports and 72 vulnerability-inducing bug
reports for the analysis.

Among the 78 regression vulnerabilities considered in our study,
68 occurred in Mozilla Core, 5 in the Toolkit, 3 in Firefox, 1 in the
NSS project, and 1 in the GeckoView project. In total, 39 regression
vulnerabilities were defined as normal severity (i.e., they blocked
non-critical functionality and a workaround existed), 25 regres-
sion vulnerabilities were defined as critical or serious (i.e., a major
functionality/product was severely impaired and a workaround
did not exist), two vulnerabilities were defined as small or trivial
(i.e., cosmetic issues, low or no impact to users), one vulnerability
was defined as a blocker (i.e., blocked the development/testing and
might have impacted more than 25% of the users, caused data loss,
potential chemspill, and no workaround was available), and 11 re-
gression vulnerabilities did not have their severity defined. Figure 2
shows the severity of the analyzed regression vulnerabilities.

Moreover, most regression vulnerabilities (43) were prioritized
as P1, which means they should be fixed in the current release
cycle. In total, 12 vulnerabilities were P2, i.e., to fix in the next or

following release cycle, two were set as P3 (backlog), and 21 did not
have their priority set. No regression vulnerability was set as “will
not fix, but accept a patch.” Figure 2 presents the priorities of the
regression vulnerabilities analyzed in our study. The bug reports
of the regression vulnerabilities remained open for a median of 11
days. Most regression vulnerabilities’ reports (53) were closed in
less than 20 days, six of them were closed in one day or less. We
also detected a case of a regression vulnerability closed only after
137 days.

Considering the bug fixes that led to these vulnerabilities, we
found that 57 had normal severity, eight were critical or serious
bugs, three were trivial or minor bugs, one was a catastrophic bug,
and three did not have a set severity level. The priority of the bugs
was almost evenly distributed: 20 were P1; 16 were P2; 19 were P3;
and 17 of them did not have a set priority. Figures 2 and 3 show the
severity and priority of the analyzed vulnerability-inducing bug
fixes, respectively.

The analyzed bug reports were open between February 2007 and
December 2020 and took a median of 37.5 days to be closed. In total,
6 bug reports were closed in one day or less, while 23 bug reports
remained open for more than 90 days. Nine bug reports remained
open for more than 1,100 days.

4.2 RQ1. Security in the Bug Fixing Process
Our first research question investigates whether security is taken
into account during the bug fixing process, looking at bug fixes
that led to the introduction of regression vulnerabilities.

The bug reports had a median of 17 comments from 10 different
authors (bots excluded). A bug report that spent 36 days open had
the highest number of comments (214) made by 18 different authors.
Three bug reports had only three comments, and two of them were
closed in one day or less. Finally, seven bug reports contained only
bot comments.

We manually analyzed the comments in the bug reports. Only
in five bug reports the commenters expressed a concern about the
security impacts of the bug fixes. For instance, Comment 27 of Bug
Report 471015 stated: “Fixing that would require more or less a

Figure 2: Severity of the vulnerability-inducing bug fixes
and the regression vulnerabilities.

Figure 3: Priority of the vulnerability-inducing bug fixes and
the regression vulnerabilities.

117391182135735302040BlockerCriticalNormalNot setSeriousSmall/TrivialRegression VulnerbilitiesVulnerability−inducing Bug Fix214312217201619010203040Not setP1P2P3Regression VulnerbilitiesVulnerability−inducing Bug FixAccepted at ESEM’22, September 2022, Helsinki, Finland

Larissa Braz, Enrico Fregnan, Vivek Arora, and Alberto Bacchelli

complete rewrite of the fieldset code. Frame-splitting code tends
to be very fragile and a great source of security bugs. Do we really
want to land that rewrite on stable branches?” In addition, Comment
27 in Bug Report 1450965 requested security experts to review the
bug fix: “if we want to land on possible solution in comment 11, we
will need someone from security team to take a look if the proposed
solutions are ok.” In total, four bug reports had comments indicating
that the bug might have been security-related. For instance, in Bug
Report 1513201, Comment 16 said: “[Triage Comment] Fixes a
security-sensitive crash, approved for 65.0b5.”

Moreover, commenters pressured the maintainers for fixes in
four bug reports. For instance, Bug Report 471015 remained 3,990
days opened and 57 developers left 73 comments. Comment 46 said:
“If this is the way, Mozilla wants to handle this problem, maybe this
bug should be declared as ‘wont fix.’ Otherwise, a fixing date would
be very kind. I know that there might be more important things
to do, but . . . this bug is going to be 5 years old!?!” Comment 49
said: “I don’t intend to be nasty but this bug is open for way too
long (I’ve open the same myself in 2003 with Bug Report 191308)
and nobody seems to care to correct it –> this is *MORE* than 10
years!” Security was not addressed in any comment of this bug.

Nine reports were reopened after the regression vulnerability
was identified, indicating that their bug fixes were updated to re-
move the security flaw in the code. The remaining regression vul-
nerabilities were fixed through their own changesets. In addition,
ten bug reports are regressions caused by previous bug fixes. In
other three bug reports, comment authors demonstrated concern
about the possibility of the fix being a regression. For instance, the
reporter of Bug Report 1459905 said: “[Regression range]: This
seems to be an old regression, I was not able to reproduce it on FF
4.0, I will follow up with a regression range as soon as possible.”

A total of nine bug reports had comments stating the bugs were
non-trivial to understand or fix. For instance, Comment 24 of Bug
Report 471015 mentioned: “Based on bug [report] 463350 Comment
17, it sounds like our (currently-disabled) frameset-breaking code
is pretty broken, and a safe fix-up would require some non-trivial
rewriting, which could be scary to land on branches (and could
potentially open us up).” In addition, Comment 2 of Bug Report
1557765 said: “This bug has a pretty high technical level and I
do not have the skill to understand it or confirm it. I will set its
component as (Core) Performance and hope that a [developer] can
have a more appropriate opinion on it.”

Moreover, Comment 34 of Bug Report 371787 reports that a
trick would be needed to ensure the correctness of the code: “Some
trickiness would be needed to ensure getEndPositionOfChar and
getExtentOfChar don’t include any letter-spacing or word-spacing
that comes after it. I haven’t handled that . . . I’m inclined to leave
that to a follow-up.” This bug stayed open for 4,650 days and had 51
comments from 36 different authors. The comments in the report
included it not being a trivial bug to fix (“It’s not trivial to get
working.” — Comment 7) and a discussion about hiring a software
developer to fix the bug (“How likely are you to submit a patch
to implement or pay someone to do so on your behalf, [Author
X]?” and “Who can do it? - I would like to spend some money to
solve this issue. Maybe we can share the costs??”— Comments 14
and 16, respectively). After more than five years, the bug report
was closed and reopened again as it was identified as the cause

of a regression vulnerability: “Yes, it was disabled in bug 1599173
because of a serious regression, and then re-enabled when fixed.”
Although they introduced regression vulnerabilities in the code,
some authors of bug fixes were initially acknowledged for their
work. For instance, Comment 33 of Bug Report 1231213 compli-
mented the work done in its patch: “Truly fantastic work on this
entire patch set. The future looks very bright for ServiceWorkers
in Gecko!” However, this bug fix introduced a regression vulnera-
bility of normal severity with P1 priority that took 50 days to be
fixed. In addition, Comment 4 of Bug Report 1052579 said: “It’s a
good tactic. :-) I used it in bug 991981 five years ago. It can be a bit
of a sprawling tactic, but that’s how the cookie crumbles. :-| [at]
least you aren’t doing it for a security bug.” In this case, the bug fix
introduced a critical regression vulnerability that was fixed within
seven days after being reported.

Finding 1. Security was rarely a concern among the com-
ments in the issue reports of bugs whose fixing introduced
vulnerability regressions.

4.3 RQ2. Causes of regression vulnerabilities
We applied GDC [17, 40] to manually classify the changes made in
the 72 vulnerability-inducing bug fixes considered in our study. We
classified the bug fixes into six categories: structural, resource, large
defects or complex files, timing, logic, and check defects. Figure 4
shows the results of our analysis.

In total, we classified two bug fixes as check defects. These de-
fects result from missing or incorrect data validation, such as pa-
rameters, simple or complex variables, and return values. The logic
category of defects results from logical errors in computation or the
control flow. The difference between check and logic defects is that
former validates incorrect or correct values (null checks or true and
false conditions), while the latter looks for correct comparisons (A
is greater or less than B). We classified six bugs as caused by logic
defects.

Figure 4: Causes of the vulnerability-inducing bug fixes and
regression vulnerabilities.

23562072106153460204060CheckLarge Defects orComplex FilesLogicResourceStructuralTimingRegression VulnerabilitiesVulnerability−inducing Bug FixAn Exploratory Study on Regression Vulnerabilities

Accepted at ESEM’22, September 2022, Helsinki, Finland

In total, six bug were caused by timing defects, which happen
when multiple threads operate on shared resources. These defects
include race conditions and protecting resources with synchroniza-
tion primitives. In addition, the resource category includes defects
that happened while handling resources (e.g., memory buffer, ses-
sions, and connections). Developers create custom resources ac-
cording to the requirements; therefore, defects introduced while
handling such data structures are also part of the resource cate-
gory. In total, we classified 15 bug fixes as resource defects. For Bug
Report 1530178, its bug was due to both logic and resource defects.
Moreover, we identified 34 bug fixes as structural defects. This
category of defects includes the organization of code. For instance,
a developer may introduce a bug by moving a functionality from
one module to another, removing duplicate or complex code, long
subroutine, or dead code. In addition, we also considered the com-
plexity of the bug fix. Large defects that contains bug reports with
multi-part fixes or where the fixes are distributed across multiple
files. This is because we note that ten bug fixes that introduced
security regressions are also either large or complex in nature.

We further investigated the causes of the regression vulnera-
bilities to identify the developers’ mistakes during the bug fixes
that introduced them. We identified 116 flaws in the vulnerability-
inducing bug fixes, which we classified into 26 Common Weak-
nesses Enumeration (CWEs). In total, 34 regression vulnerabilities
have use after free (CWE-416) flaws in the code. This CWE has a
low base score (4.7), i.e., a low sum of the impact and exploitabil-
ity scores, and happens when the code references memory after it
has been freed causing a program to crash, use unexpected values,
or execute code. The second most frequent security flaw in the
bug fixes was improper check or handling of exceptional conditions
(CWE-703, 16). This vulnerability occurs when the code does not
properly anticipate or handle exceptional conditions that rarely oc-
cur during the normal operation of the application. Finally, the third
most common vulnerabilities were buffer copy without checking size
of input (CWE-120, 7) and improper control of a resource through
its lifetime (CWE-664, 7). The former happens when the code per-
forms operations on a memory buffer reading from or writing to a
memory location that is outside of the intended boundary of the
buffer. The latter occurs when the software does not properly follow
instructions on how to create, use, and destroy resources leading
to unexpected behaviors and exploitable states. Table 1 shows the
CWEs causing the regression vulnerabilities we analyzed.

Finding 2. Structural and resource defects are prevalent
causes of bugs. Whereas most of the regression vulnerabilities
induced by the fixes of these bugs occur due to defects related
to resources.

Knowledge on the causes of defects and security vulnerabilities
might support practitioners in preventing these defects from hap-
pening. For instance, projects might adopt technologies less prone
to defects related to memory resources.

Following, we investigated how the regression vulnerabilities
were detected and reported. In total, 30 of the regression vulnerabil-
ities were found and reported by Mozilla’s users. For instance, the
reporter of Bug Report 1670358 said: “We came across this when

Table 1: Categories of the regression vulnerabilities accord-
ing to the Common Weakness Enumeration (CWE).

Name

CWE
CWE-416 Use after free
CWE-703

Improper check or handling
of exceptional conditions

CWE-120 Buffer copy without checking size

CWE-664

CWE-119

of input
Improper control of a resource
through its lifetime
Improper restrictions of operation
within the bound of a memory buffer
Improper synchronization
Improper update of reference count
Improper initialization
Incorrect calculation of buffer size 4
Improper input validation

CWE-662
CWE-911
CWE-665
CWE-131
CWE-20
CWE-366 Race condition within a thread
CWE-200 Exposure of sensitive information

CWE-79

to an unauthorized actor
Improper neutralization of input during
web page generation

CWE-730 Denial of service
CWE-177
Improper handling of URL encoding
CWE-451 User Interface (UI) misrepresentation

of critical information
Pointer issues

CWE-465
CWE-470 Use of externally-controlled input
to select class or code
Incorrect regular expression
Improper handling of length
parameter inconsistency
Integer overflow or wraparound

CWE-185
CWE-130

CWE-190
CWE-227 API Abuse
CWE-522
CWE-415 Double free
CWE-241

Insufficiently protected credentials

CWE-228

Improper handling of unexpected
data type
Improper handling of syntactically
invalid structure

Count
34
16

7

7

6

5
5
5

4
4
4

3

2
2
2

1
1

1
1

1
1
1
1
1

1

we were working on something similar to a ChaosMode feature
where we wanted to make array reallocation happen more often.”
This vulnerability was caused by a use after free flaw (CWE-416)
introduced seven years before by the fix of the Bug Report 877762.
It was reported as CVE-2020-26960 with a high base score (9.3).

The remaining vulnerabilities were identified by dynamic analy-
sis tools (24) (e.g., address sanitizers [24]), crashes due to user usage
(15), and assertion failures (10). Concerning the detection of vulner-
abilities from the users, Mozilla provides the crash reports through
their ‘crash-stat’ website [28]. In addition, Mozilla also allows users
to custom build the artifacts with switches such as -enable-debug
and enable-crash-on-assert to enable additional logging and
crash dump generation. For instance, Mozilla’s mozilla-central
code repository can be built with the -enable- debug switch to

Accepted at ESEM’22, September 2022, Helsinki, Finland

Larissa Braz, Enrico Fregnan, Vivek Arora, and Alberto Bacchelli

enable the debug logging. This way, maintainers can obtain more
knowledge about a defect, facilitating its fixing.

Finding 3. Dynamic analysis tools played an essential role
in finding the analyzed regression vulnerabilities.

4.4 RQ3. Developers’ perception on regression

vulnerabilities

We interviewed five Mozilla software developers. Two of them are
security experts, while the others have management or develop-
ment roles. Moreover, participants have between 10 and 24 years of
experience contributing to Mozilla. On average, they commented on
8,146 bug reports, which indicates they were involved in their bug
fixes. Participants were assigned to an average of 919 bug reports.
In these cases, they were directly involved in the bug fixes. Finally,
they reviewed on average 1,684 patches in Mozilla’s repositories.
Table 2 summarizes the background of the interviewees.

The interviews’ card sorting analysis revealed 100 cards of 9
main categories and 59 sub-categories. We considered each card
only once per interview. Overall, all developers discussed security
concerns and the practices adopted during bug fixes at Mozilla (15
cards). Additional findings emerged that were not envisioned as
part of the focus of our study. However, they are still important to
report. For instance, security bugs are more complex to be fixed
than other types of bugs: e.g., they are harder to identify using tests
as writing security-specific tests can expose a potential weakness to
malicious attackers. I2 mentioned: “[security] is a lot more complex
than general bugs. We cannot just add a test that says we will check
for this vulnerability because that will paint a target on the change.”
Moreover, developers also mentioned the use of security bugs as
a way to mentor junior developers. For instance, I1 stated: “We use
security bugs as a good mentoring tool for junior developers. The
senior developers may not have the time to do the fix themselves,
but it gives them an option . . . to teach that part of the code to maybe
some new hires we have or more junior people to solve it and then
they learn the kind of the security impacts and assumptions that
happen in that part of the code.” However, this training may lead
to potentially harmful assumptions when ensuring security during
bug fixes. Since junior developers receive security training, the
security team does not worry too much about fixing patches but
focuses on patches introducing new features, as reported by I1.

Table 2: Demographics of the interviews participants.

Security engineer

ID Role
I1
I2 Maintainer
I3
I4

Engineering manager
Developer &
Engineering manager
Security engineer &
Tech lead

I5

C. Years
24
10
18
11

R.C. A.T.
2,504
715
347
607

22,910
3,797
2,682
4,607

P.R.
6,703
442
750
287

12

6,738

422

242

C. years = Years contributing to Mozilla; R.C. = Bug reports the
participant commented on; A.T. = Bug reports assigned to
the participant; P.R. = Reviewed patches.

Finding 4. Interviewees stated that security bugs are more
complex to be fixed than other types of bugs. Security bugs
are used as a mentoring tool to train junior developers.

Developers also mentioned the role of tests in ensuring security
during bug fixes (10 cards). I2 reported that adding tests is required
during the bug fix process when test coverage is too low. In addition,
when asked what their team does to identify possible regression
vulnerabilities during bug fixes, I4 replied: “mostly review and the
automated testing, so the developers review each other’s patches
trying to identify if there are possibilities for regressions and then
after the patch is actually accepted and everything. We test them
automatically and manually to ensure that there are no regressions.”
However, three interviewees (I2, I3, and I5) highlighted that
regressions may happen despite tests as they may not cover all
platforms or all possible code interactions. For instance, I5 said:
“There is always this type of regression that only reproduces in
very certain environments under very certain conditions (...) that
are really not possible for us to easily find in in an automated way.”
To mitigate this issue, Mozilla has a Quality Assurance team that
periodically manually runs a list of regression tests (as mentioned
by I4). Moreover, I1 reported that each part of Mozilla’s code has a
designated set of people with security experience that reviews and
approve code changes.

Finding 5. Tests are required during bug fixes at Mozilla.
Yet, tests may not detect regressions as they can not cover
complex interaction scenarios.

Developers also discussed the tool support to detect vulnerabili-
ties (26 cards). For instance, I2 said: “We have extensive tooling to
avoid [regression vulnerabilities]. So, when we run tests, we have
things like address sanitizers, static analysis that will flag potential
problems before the patch goes into review.” Static analysis tools
that developers at Mozilla use to identify vulnerabilities are also em-
ployed to avoid regression vulnerabilities during bug fixes (I1, I3, I4,
and I5). Despite the benefits of these tools, security vulnerabilities
can still go undetected: e.g., I4 reported: “We have the static analysis
tools but we will not find them preventing so many security issues.”
Improving analysis tools would further reduce the number of
regression vulnerabilities (2 cards). I4 reported: “I think there is
a lot of room for improvements in [the static analysis] area to
identify common [security] mistakes.” However, developers could
not provide any concrete suggestions on how to improve these
tools. As I3 said: “I’m not aware of much that we could add at this
point that we have not already tried.”

In total, we identified 11 cards about fuzzing. Four intervie-
wees mentioned fuzzing as a way of identifying vulnerabilities
in Mozilla’s code. For instance, I4 reported: “[Fuzzing] is another
thing we do that is super helpful (...) to prevent a lot of security
bugs.” Moreover, I1 mentioned a specific fuzzing testing team that
reviews bug fixes so that they do not introduce regression vulnera-
bilities: “so depending on the bug, I have a fuzz testing team that is
looking for security bugs specifically.” The advantages of fuzzing

An Exploratory Study on Regression Vulnerabilities

Accepted at ESEM’22, September 2022, Helsinki, Finland

go beyond detecting vulnerabilities, as fuzzing provides developers
with information to better understand the root cause of code issues.
I5 highlighted the efficiency of fuzzing in finding regression vul-
nerabilities: “Other way we find regressions really early is fuzzing.
Fuzzing is a very effective method for finding regressions, simply
because once you have fuzzing in place, you can automate it very
easily.” However, fuzzing may be a costly activity, as mentioned
by I1: “It makes the builds run slower, so we cannot ship it that
way, but it does catch those kinds of bugs sooner.” Fuzzers do not
run for every bug fix at Mozilla (as reported by I4 and I5) but only
periodically to check for defects in the code.

Developers also mentioned the importance of using Address
Sanitizers (ASANs) to detect use after free and out-of-bound vulner-
abilities in C/C++ code. For instance, I5 mentioned: “If we would
remove ASANs from our testing, we would have significantly less
detection rate for memory corruption vulnerabilities. Like when
address sanitizer was introduced into our testing workflow six to
eight years ago . . . we found a ton of longstanding use after free
bugs that would otherwise be really hard to detect because they do
not necessarily manifest these crashes or have any other side effects
if they are not being exploited right now. So you could say that
deploying certain types of sanitizers is primarily for detecting more
security vulnerabilities.” In our previous analysis, we found that use
after free caused 43% of the investigated regression vulnerabilities
(see Section 4.3 and Table 1). In addition, 30% of the regression
vulnerabilities were detected through ASANs (see Section 4.3).

Finding 6. Tools play an important role in the detection of
software vulnerabilities at Mozilla. However, tools need to be
improved to better support developers in avoiding to introduce
regression vulnerabilities during bug fixes.

Two interviewees stated that Mozilla has no guidelines to avoid
introducing regression vulnerabilities during bug fixes. Despite
not having specific security guidelines, vulnerabilities are still con-
sidered more severe than functional regressions. This way, they
receive more visibility and are investigated more quickly (I4). More-
over, how to deal with a regression vulnerability in Mozilla’s code
depends on its impact. I2 reported: “If the regression has a very
large impact, we are going to back out the change that caused the
regression instead of fixing the bug. We do that first, then we fix
the original bug again, and this time we do it correctly. In the case
of a normal bug, that does not happen, obviously.”

Finding 7. Mozilla does not have a guideline to avoid intro-
ducing regression vulnerabilities during bug fixes. Yet, they
are considered more severe than other type of regressions.

5 LIMITATIONS
In this section, we report the limitations of this study and how we
mitigated them.

Our analysis was limited only to regression vulnerabilities that
happened at Mozilla. Mozilla is a popular open-source project with
a vast number of active contributors that follow state-of-the-art

software development practices. However, despite these character-
istics, Mozilla might not represent other development contexts. For
instance, the culture of a company may influence what happens dur-
ing the bug fixing process (e.g., through the use of company-specific
guidelines). For this reason, we cannot exclude that a similar study
conducted in a different company might lead to different results.

In our investigation, we considered only public regression vul-
nerabilities returned by our query of Mozilla’s Bugzilla as well as
the bug fixes linked as the cause of these regressions. The bug track-
ing system might include private regression vulnerabilities, which
are not publicly available for external investigations. Nonetheless,
we cannot exclude that including these regression vulnerabilities
in our analysis may lead to different results.

Moreover, the mozregression tool (that Mozilla uses to identify
the bug fix that caused a regression) may give inaccurate results.
To mitigate this issue, Mozilla developers need to manually review
the information provided by the tool and approve it. This strength-
ens our confidence in the fact that the evaluated bug fixes indeed
introduced regression vulnerabilities.

To mitigate mono-method bias [15], we collected data from both
bug reports and interviews with software developers and used card-
sorting to identify common themes. In the interviews, we followed
guidelines to avoid biasing the participants’ answers. Nonetheless,
we cannot exclude that the interview settings might have influenced
participants to provide more desirable answers [33]. To mitigate
this bias, we challenged and triangulated our findings with the
results of the analysis of the bug reports. Furthermore, interview
participants might have given socially acceptable answers to appear
in a positive light. To mitigate this social desirability bias [30], we
informed participants that the responses would been anonymized
and evaluated in a statistical form.

To obtain a diverse sample of participants, we invited Mozilla
developers from several teams and roles with different education
levels and development experience. Despite the diversity of the
participants’ backgrounds, we cannot claim that our sample is rep-
resentative of all Mozilla developers. This might influence the gen-
eralizability of our findings.

Participants could freely decide whether to participate in the
interviews or not (self-selection). They were informed about the
interview’s topic and its estimated duration. Moreover, to encourage
developers’ participation we donated to a charity institution on
their behalf. This could have biased the participants’ selection as
only participants who could spare enough time or were interested
in the incentive might have participated.

6 DISCUSSION
In this section, we discuss how our findings on Mozilla’s security
practices during bug fixes as well as developers’ perception of
regression vulnerabilities can inform research and practice.
Collaboration is key for security. Mozilla has extensive tooling
in place to support developers in detecting security issues in the
code. In addition, developers are required to write tests during the
bug fixing process to identify potential defects introduced by the fix
changes. Yet, despite the benefits of these practices, these alone may
not be enough to detect all possible security issues introduced by the
changes. In fact, even security experts can have difficulties to detect

Accepted at ESEM’22, September 2022, Helsinki, Finland

Larissa Braz, Enrico Fregnan, Vivek Arora, and Alberto Bacchelli

vulnerabilities as they need to identify the portions of the code
where to focus their testing and inspection efforts [43]. Interview
participants mentioned Mozilla’s multi-platform support, and code
interactions and complexity as possible reasons behind regression
vulnerabilities. Indeed, Shin et al. [43] studied two open-source
projects, including Mozilla, and found evidence that complexity
can make code difficult to understand and test for security.

To help developers avoid regression vulnerabilities, collaboration
between software developers and security experts is fundamental
(as reported by the interview participants). Developers should work
together with a mentor and have stronger collaborations with the
security and testing teams. Braz et al. [8] reported how security
training with a mentor could strengthen developers’ security knowl-
edge. Yet, to learn security, developers must be able to switch from
their traditional conditioning to the attacker’s way of thinking [5].
Junior developers might be paired with a security expert during bug
fixes to learn and improve the security of fix changes. For instance,
at Mozilla, security bugs are used as a mentoring tool to teach
security to junior developers. Further study should be conducted
to investigate whether and how security knowledge transfer can
happen in the bug fixing process. Moreover, approaches should be
devised to better support this knowledge exchange.
Never drop your guard. The results for RQ1 provide evidence
that security is rarely a concern among the comments in bug re-
ports at Mozilla. Even though junior developers at Mozilla receive
security training, regression vulnerabilities still happen in practice.
Interview participants reported that the security team assumes this
training reduces the risk of vulnerabilities being introduced dur-
ing bug fixes. Therefore, they are usually not too worried about
investigating patches for typical vulnerabilities. However, recent re-
search [6, 8] provided initial evidence that security is not routinely
in the mind of developers when reviewing code: e.g., reviewing
changes in the bug-fixing process. This might be the reason why
regression vulnerabilities still occur despite developers’ security
training. In addition, even though developers report caring more
about security than reliability issues [12], only a limited number of
them adopt secure coding practices [48]. For these reasons, com-
panies should reinforce their security policies and security teams
should remain alert for potential vulnerabilities in the code, not
overestimating the effects of security training for non-experts.

The presence of tools may give developers a false sense of se-
curity, decreasing their attention to potential vulnerabilities intro-
duced in the code. For instance, developers at Mozilla reported
assuming that tools will detect most vulnerabilities introduced dur-
ing bug fixes. However, in our study, only 30% of the analyzed
regression vulnerabilities were identified by analysis tools (RQ2).
Thus, analysis tools should not be considered as the solution for
software vulnerabilities. Tools should complement, rather than re-
placing, developers’ training and attention to security. Companies
and team leads should foster a security-oriented development cul-
ture, emphasizing the key role that developers play in guaranteeing
the security of the code and investing in training and guidelines to
support them in writing secure applications.
Choosing the right tech stack. Interview participants reported
that to ensure the application’s security, developers need to know

and understand the security risks in the tech stack (e.g., program-
ming language) being used. A tech stack is the combination of
technologies a company uses to build and run an application or
project [32]. It typically consists of programming languages, frame-
works, a database, front-end tools, back-end tools, and applications
connected via APIs. Choosing the appropriate tech stack is of para-
mount importance to increase the security of a project. For instance,
Mozilla created the Oxidation project to integrate Rust code in and
around Firefox [21]. They state that roughly 70% of critical secu-
rity vulnerabilities are caused by memory safety bugs and crashes,
which are considerably less likely to happen using Rust. Indeed,
most of the regression vulnerabilities (RQ2) occurred due to defects
related to memory resources, such as buffer copy without checking
size of input (CWE-120). We suggest that, when designing applica-
tions, architects should work closely with security experts to select
secure technologies for the project. At the same time, efforts need to
be spend on informing developers about the security aspects of the
project’s tech stack. For instance, to improve software security in a
project, software engineers might receive training on the security
risks of the technology they use.

7 CONCLUSIONS
In this paper, we performed an exploratory mixed-method study
to investigate the characteristics of regression vulnerabilities: how,
why, and when these regressions happen as well as how developers
perceive them. To this aim, we inspected 72 Mozilla’s reports of bugs
whose fixing introduced security issues and 78 reports of regression
vulnerabilities. We also conducted semi-structured interviews with
five Mozilla developers involved in the vulnerability-inducing bug
fixes to better understand their perception and practices regarding
regression vulnerabilities.

Our findings indicate that security is not a concern in the com-
ments of vulnerability-inducing bug fixes: Developers discussed
security aspects only in 6% of the analyzed bug reports. The inter-
views revealed that avoiding regression vulnerabilities is not the
developers’ goal during the bug fixing process. They rely on tools
to detect such issues before they cause problems to the application.
Our results show that most vulnerability-inducing bug fixes were
caused by structural or resource defects. Moreover, most of them
were detected by Mozilla’s users. Yet, dynamic analysis tools also
played a fundamental role in detecting regression vulnerabilities.
Finally, our investigation raises questions on the effectiveness of
currently used methods to ensure security in the software develop-
ment process, especially during bug fixing. To achieve and maintain
secure applications, companies and project owners should adopt
a more security-oriented culture: e.g., choosing a tech stack that
better supports security and strengthening collaboration between
developers and security experts.

ACKNOWLEDGMENTS
The authors would like to thank the anonymous reviewers for
their thoughtful and important comments, which helped improving
our paper. The authors gratefully acknowledge the support of the
Swiss National Science Foundation through the SNSF Projects No.
200021_197227 and PZ00P2_186090.

An Exploratory Study on Regression Vulnerabilities

Accepted at ESEM’22, September 2022, Helsinki, Finland

[30] A. Furnham. 1986. Response bias, social desirability and dissimulation. Personality

and individual differences 7, 3 (1986), 385–400.

[31] Z. Gu, E. Barr, D. Hamilton, and Z. Su. 2010. Has the bug really been fixed?. In
Proceedings of the International Conference on Software Engineering, Vol. 1. 55–64.
[32] Heap. Last accessed April 2022. What is a tech stack? https://heap.io/topics/what-

is-a-tech-stack.

[33] D. Hildum and R. Brown. 1956. Verbal reinforcement and interviewer bias. The

Journal of Abnormal and Social Psychology 53, 1 (1956), 108.

[34] H. Hiller and L. Diluzio. 2004. The Interviewee and the Research Interview:
Analysing a Neglected Dimension in Research*. Canadian Review of Sociol-
ogy/Revue canadienne de sociologie 41, 1 (2004), 1–26.

[35] S. Hove and B. Anda. 2005. Experiences from conducting semi-structured inter-
views in empirical software engineering research. In Proceedings of the Interna-
tional Symposium on Software Metrics. 10–pp.

[36] H. Leung and L. White. 1989. Insights into regression testing (software testing).

In Proceedings of the Conference on Software Maintenance. 60–69.

[37] T. R Lindlof and B. Taylor. 2002. Qualitative communication research methods.

Sage.

[38] D. Mehta. 2007. Effective software security management. https://www.owasp.

org/images/2/28/Effective_Software_Security_Management.pdf.

[39] Mitre. Last accessed March 2022. CWE - Common Weakness Enumeration.

https://cwe.mitre.org/index.html.

[40] M. Mäntylä and C. Lassenius. 2009. What Types of Defects Are Really Discovered

in Code Reviews? Transactions on Software Engineering 35, 3 (2009), 430–448.

[41] D. Nir, S. Tyszberowicz, and A. Yehudai. 2007. Locating Regression Bugs. In
Proceedings of the International Haifa Verification Conference on Hardware and
Software: Verification and Testing. 218–234.

[42] R. Purushothaman and D. Perry. 2004. Towards understanding the rhetoric of
small changes-extended abstract. In Proceedings of the International Workshop on
Mining Software Repositories. 90–94.

[43] Y. Shin, A. Meneely, L. Williams, and J. Osborne. 2010. Evaluating complexity, code
churn, and developer activity metrics as indicators of software vulnerabilities.
transactions on software engineering 37, 6 (2010), 772–787.

[44] J. Sliwerski, T. Zimmermann, and A. Zeller. 2005. When Do Changes Induce

Fixes?. In International Workshop on Mining Software Repositories. 1–5.

[45] Firefox source docs. Last accessed: April 2022.

Fixing Security Bugs.
https://firefox-source-docs.mozilla.org/bug-mgmt/processes/fixing-security-
bugs.html

[46] D. Spencer. 2009. Card sorting: Designing usable categories. Rosenfeld Media.
[47] R. Weiss. 1995. Learning from Strangers: The art and method of qualitative

interview studies. The Free Press (1995).

[48] I. Woon and A. Kankanhalli. 2007. Investigation of IS professionals’ intention
to practise secure development of applications. International Journal of Human-
Computer Studies 65, 1 (2007), 29–41.

[49] Info World. Last accessed March 2022. Criminal Exploit Windows Flaw after
Buggy Patch. http://www.infoworld.com/d/security-central/after-buggy-patch-
criminals-exploit-windows-flaw-848.

[50] Network World. Last accessed March 2022. Mozilla re-patches Firefox after regres-
sion bug. https://www.networkworld.com/article/2268408/mozilla-re-patches-
firefox-after-regression-bug-pops-up.html.

[51] Z. Yin, D. Yuan, Y. Zhou, S. Pasupathy, and L. Bairavasundaram. 2011. How Do
Fixes Become Bugs?. In Proceedings of the Symposium and the 13th European
Conference on Foundations of Software Engineering. 26–36.

[52] Feng Zhang, Foutse Khomh, Ying Zou, and Ahmed E Hassan. 2012. An empirical
study on factors impacting bug fixing time. In 2012 19th Working conference on
reverse engineering. IEEE, 225–234.

REFERENCES
[1] Apple Updates Leopard Again. Last accessed March 2022. Washington
Post. http://voices.washingtonpost.com/fasterforward/2008/02/apple_updates_
leopardagain.html.

[2] Shirin Akbarinasaji, Bora Caglayan, and Ayse Bener. 2018. Predicting bug-fixing
journal of

time: A replication study using an open source software project.
Systems and Software 136 (2018), 173–186.

[3] A. Bacchelli and C. Bird. 2013. Expectations, outcomes, and challenges of modern
code review. In Proceedings of the International Conference on Software Engineering.
712–721.

[4] M. Baker and S. Eick. 1994. Visualizing software systems. In Proceedings of the

International Conference on Software Engineering. 59–67.

[5] S. Bratus. 2007. What Hackers Learn that the Rest of Us Don’t: Notes on Hacker

Curriculum. IEEE Security Privacy 5, 4 (2007), 72–75.

[6] Larissa Braz, Christian Aeberhard, Gül Çalikli, and Alberto Bacchelli. 2022. Less
is More: Supporting Developers in Vulnerability Detection during Code Review.
In 2022 IEEE/ACM 44th International Conference on Software Engineering (ICSE).
IEEE, 1317–1329.

[7] L. Braz, E. Fregnan, V. Arora, and A. Bacchelli. 2022. Data and Material. https:

//doi.org/10.5281/zenodo.6792317.

[8] Larissa Braz, Enrico Fregnan, Gül Çalikli, and Alberto Bacchelli. 2021. Why Don’t
Developers Detect Improper Input Validation?’; DROP TABLE Papers;–. In 2021
IEEE/ACM 43rd International Conference on Software Engineering (ICSE). IEEE,
499–511.

[9] F. Brooks. 1995. The mythical man-month: essays on software engineering. Pearson

Education.

[10] F. Camilo, A. Meneely, and M. Nagappan. 2015. Do bugs foreshadow vulnerabili-
ties? A study of the chromium project. In Proceedings of the Working Conference
on Mining Software Repositories. 269–279.

[11] Y. Chen, R. Probert, and D.l Sims. 2002. Specification-based regression test
selection with risk analysis. In Proceedings of the conference of the Centre for
Advanced Studies on Collaborative research.

[12] M. Christakis and C. Bird. 2016. What developers want and need from program
analysis: an empirical study. In Proceedings of the international conference on
automated software engineering. 332–343.

[13] J. Collofello and S. Woodfield. 1989. Evaluating the effectiveness of reliability-
assurance techniques. Journal of systems and software 9, 3 (1989), 191–195.
[14] Bleeping Computer. Last accessed March 2022. Windows 10 gets temp patch
for critical flaw fixed in buggy update. https://www.bleepingcomputer.com/
news/security/windows-10-gets-temp-patch-for-critical-flaw-fixed-in-buggy-
update/.

[15] T. Cook and D. Campbell. 1979. Quasi-Experimentation: Design and Analysis

Issues for Field Settings. Houghton Mifflin Company.

[16] K. Dempsey, P. Eavy, and G. Moore. 2017. Automation Support for Security Control
Assessments. Technical Report. Technical Report NISTIR 8011, National Institute
of Standards and Technology.

[17] K. El Emam and I. Wieczorek. 1998. The repeatability of code defect classifications.
In Proceedings Ninth International Symposium on Software Reliability Engineering
(Cat. No.98TB100257). 322–333.

[18] M. Felderer and E. Fourneret. 2015. A systematic classification of security regres-
sion testing approaches. International Journal on Software Tools for Technology
Transfer 17, 3 (2015), 305–319.

[19] M. Felderer, B. Katt, P. Kalb, J. Jürjens, M. Ochoa, F. Paci, T. Tun, K. Yskout, R.
Scandariato, F. Piessens, et al. 2014. Evolution of security engineering artifacts: a
state of the art survey. International Journal of Secure Software Engineering 5, 4
(2014), 48–98.

[20] Mozilla Foundation. 2017. mozregression tool.

https://mozilla.github.io/

mozregression/.

[21] Mozilla Foundation. Last accessed April 2022. Oxidation Project. https://wiki.

allizom.org/Oxidation.

[22] Mozilla Foundation. Last accessed in March 2022. How to Mark Regressions.

https://firefox-source-docs.mozilla.org/bug-mgmt/processes/regressions.html.

[23] Mozilla Foundation. Last accessed June 2022. Address Manifesto. https://www.

mozilla.org/en-US/about/manifesto/.

[24] Mozilla Foundation. Last accessed June 2022. Address Sanitizers. https://firefox-

source-docs.mozilla.org/tools/sanitizer/index.html.

[25] Mozilla Foundation. Last accessed June 2022. Bug Types. https://firefox-source-

docs.mozilla.org/bug-mgmt/guides/bug-types.html.

[26] Mozilla Foundation. Last accessed March 2022. Mozilla. https://www.mozilla.

org/.

[27] Mozilla Foundation. Last accessed March 2022. Mozilla’s Bugzilla.

https:

//bugzilla.mozilla.org/home.

[28] Mozilla Foundation. Last accessed on April 2022. Mozilla Crash Reports. https:

//crash-stats.mozilla.org/.

[29] The OWASP Foundation. Last accessed March 2022. OWASP Foundation. https:

//owasp.org/

