A perspective to navigate the National Laboratory
environment for RSE career growth

William F. Godoy
Computer Science and Mathematics Division
Oak Ridge National Laboratory
Oak Ridge, TN, USA
godoywf@ornl.gov

2
2
0
2

p
e
S
6

]
E
S
.
s
c
[

1
v
0
1
6
2
0
.
9
0
2
2
:
v
i
X
r
a

Abstract—This paper shares a perspective for the research
software engineering (RSE) community to navigate the National
Laboratory landscape. The RSE role is a recent concept that led
to organizational challenges to place and evaluate their impact,
costs and beneﬁts. The premise is that RSEs are a natural ﬁt
into the current landscape and can use traditional career growth
strategies in science: publications, community engagements and
proposals. Projects funding RSEs can beneﬁt from this synergy
and be inclusive on traditional activities. Still, a great deal of
introspection is needed to close gaps between the rapidly evolving
RSE landscape and the well-established communication patterns
in science. This perspective is built upon interactions in industry,
academia and government in high-performance computing (HPC)
environments. The goal
is to contribute to the conversation
around RSE career growth and understand their return on
investment for scientiﬁc projects and sponsors.

Index Terms—RSE, National Lab, career growth, HPC, scien-

tiﬁc software

I. INTRODUCTION

While the term “research software engineer” (RSE) is
relatively new, the role has existed for decades [1]. In recent
years, important conversations around scientiﬁc software stew-
ardship1 and cultural challenges [2] elevate the value of RSE
roles. The United States Department of Energy (DOE) has a
rich history in funding high-performance computing (HPC)
software projects to accomplish its scientiﬁc mission [3],
[4]. Future trends present a great opportunity to rethink
codesign [5] and HPC software [6] as a more dynamic and
multidisciplinary endeavor [7]. RSEs are at the core of the
DOE mission as stewards of the software that allow for
scientiﬁc discovery.

The present document

lists aspects of well-established
channels in the scientiﬁc community that RSEs can adopt
towards a sustainable career growth path. These views come
from collected personal experiences and observations in HPC
environments in industry, government and academia that could
be extended to other scientiﬁc communities with similar chal-
lenges.

II. CAREER GROWTH ASPECTS

The list presented in this section comes up from personal
interactions with members of the scientiﬁc community when
discussing RSE roles. They provide a simple context on how
RSEs’ careers can develop within a scientiﬁc setting.

a) Deﬁne your science: RSE work can be varied and,
many times, not directly related to novel scientiﬁc discov-
ery: e.g. addressing bugs, consultant work, tracking issues,
etc. Nevertheless, the answer to the question that comes up
frequently: what exactly is your science? should be effec-
tively communicated. While RSEs with closer expertise in
a scientiﬁc domain or those who have had these discussions
are able to answer this question, others may start thinking
about answers in terms of value. Use the scientiﬁc method
by providing empirical evidence for how RSE work impacts
the science-funded initiative. The latter requires a conversation
with stakeholders to ﬁgure out what needs to be measured that
is important to them.

b) The importance of publications: peer-reviewed sci-
entiﬁc publications are a cornerstone of science. Scholarly
work is how careers are built and it is the language used by
scientists. Metrics such as the h-index measure the impact
of individuals on the scientiﬁc community [8]. RSEs have
publication venues that provide citable sources and profes-
sional societies, such as US-RSE2 to disseminate their work
effectively. Project stakeholders should consider prioritizing
RSE involvement
in publications and proposals following
ethical, organizational and national security guidelines with
the goal of retaining valuable contributors. This becomes even
more relevant as much of the software produced in government
organizations might not fall under the free and open source
(FOSS) category. Using this very same language will ease the
communication of the impact of RSE activities in the broader
scientiﬁc community.

c) Scientiﬁc software as specialized equipment: scientiﬁc
software can have little resemblance to products in the broader
software landscape. Therefore, the role might be closer to
those building “specialized equipment” in novel scientiﬁc
facilities, this is even more palpable in HPC and experimental
ans observational science (EOS). Scientiﬁc project stakehold-
ers may establish a similar synergy that understands and values
the complexities of RSE and traditional science activities.
At the same time, project stakeholders should consider that
methods applied in the broader “commodity-like” software
landscape might incur in extra overheads for scientiﬁc soft-
ware (e.g. agile management, enterprise software solutions,

1https://github.com/tgamblin/ascr-software-stewardship-rﬁ-responses

2https://us-rse.org/

 
 
 
 
 
 
paradigms, etc.). Their real cost/beneﬁt must still be proven
scientiﬁcally with empirical evidence, ideally in peer-review
publications. Scientiﬁc software is messy and unpredictable by
deﬁnition, requirements are not always known at development
time, so a great deal of ﬂexibility is needed to achieve scientiﬁc
discovery goals.

d) Develop community: this is a crucial aspect as one
of the important metrics of science is how your community
perceives your work and participation. External recognition
in professional societies and organizations ease the path for
internal career growth. Prioritizing these aspects pays off as
it builds trust in the RSE community. Identify key members
in your community that can recommend your work. Value
previous and new contributors from multiple disciplines that
enable RSE work. While promote and mentor new members
of your community through your network. Overall, careers are
built through the synergies of enabling people, not always by
particular technologies. Build upon community-based consen-
sus decisions rather than those based on an appeal to authority
by a few individuals to align with science endeavors. Work
side-by-side, not head-to-head, including and listening to all
stakeholders, regardless of hierarchical structures. Software is
a rapidly changing environment, so early advisory activities
from all stakeholders is crucial for decision making.

e) Identify critical paths: RSE tasks can carry signiﬁcant
overhead to project goals that do not necessarily lead to career
growth. Thus, RSEs may prioritize activities with a higher
return on investment that will propagate through the “critical
path” of a project, organization, sponsor, and your community.
Focus on reportable activities that go beyond one or two
layers across these paths: papers, highlights, tutorials, meeting
organizations, mentoring, awards, proposals etc. Observe the
career evolution of more senior members in your organization
and ask related questions, so RSEs can establish similar
conversations with those stakeholders that are more likely to
promote their community members. Identify and minimize
engagements that are not on the critical path for career growth.

f) Scientiﬁc impact and software quality trade-offs:

Software quality is not free. By embracing imperfection and
focusing on the value of the return in terms of scientiﬁc
outputs, RSEs can focus on career growth through diversifying
their portfolio of investments beyond software speciﬁc activ-
ities. Not all software quality activities lead to high research
impact so understanding the potential cost/beneﬁt is important.
In addition, since not all requirements are always known at
development time, a high investment in quality might in fact
be counterproductive.

g) Promote your work along with the software: RSEs
may be dedicated to particular products or technologies.
Ultimately, projects are funded for scientiﬁc discovery so
sustainability aspects always come as a question for potential
adopters. Be ready to answer questions like: “what happens
after funding ends?”, or “who supports this software in the
long-term?”. People behind a product are the ones building
the trust among stakeholders.

h) Embrace senior roles: RSE work in early career
stages is heavily deﬁned by development related activities.
As professionals advance in their career the impact on others
become more relevant. Software is a rapid evolving landscape,
so learning from every generation that grew up with different
technologies is extremely beneﬁcial. Therefore, embracing
tasks beyond development such as, mentoring, learning and
promoting other RSEs is required for career growth.

III. CONCLUSIONS

The positions presented on this paper argue that RSEs are
a natural ﬁt in and an important part of the codesign process
as scientiﬁc projects become more multidisciplinary in nature.
RSEs can beneﬁt from traditional scientiﬁc metrics: papers,
service, and proposals, by building a diversiﬁed portfolio
of activities that impacts their scientiﬁc communities. For
the RSE role to be seen as the new wave of “a discipline
on its own”,
the scientiﬁc community should do a great
deal of introspection and learn from the “new” science and
engineering disciplines of the past that established a scientiﬁc
framework for successful career paths for its members. Ulti-
mately, research software engineering is a human activity that
would not be possible without rewarding its stakeholders.

REFERENCES

[1] R. Baxter, N. C. Hong, D. Gorissen, J. Hetherington, and I. Todorov, “The
research software engineer,” in Digital Research Conference, Oxford,
2012, pp. 1–3.

[2] D. S. Katz, L. C. McInnes, D. E. Bernholdt, A. C. Mayes, N. P. C.
Hong, J. Duckles, S. Gesing, M. A. Heroux, S. Hettrick, R. C. Jimenez,
M. Pierce, B. Weaver, and N. Wilkins-Diehr, “Community organizations:
Changing the culture in which research software is developed and
sustained,” Computing in Science & Engineering, vol. 21, no. 2, pp. 8–24,
2019.

[3] B. L. Buzbee, W. J. Worlton, G. Michael, and G. Rodrigue, “DOE
research in utilization of high-performance computers,” 12 1980.
[Online]. Available: https://www.osti.gov/biblio/6711815

[4] Dongarra, Jack et al.

, “The International Exascale Software Project
roadmap,” The International Journal of High Performance Computing
Applications, vol. 25, no. 1, pp. 3–60, 2011.

[5] J. Ang, A. A. Chien, S. D. Hammond, A. Hoisie,

I. Karlin,
S. Pakin, J. Shalf, and J. Vetter, “Reimagining codesign for advanced
scientiﬁc computing: Unlocking transformational opportunities
for
future computing systems for science,” 10 2021. [Online]. Available:
https://www.osti.gov/biblio/1822198

[6] P. Beckman, R. Brightwell, M. Gokhale, B. R. de Supinski, S. Hofmeyr,
S. Krishnamoorthy, M. Lang, B. Maccabe, J. Shalf, and M. Snir,
“Exascale operating systems and runtime software report,” 12 2012.
[Online]. Available: https://www.osti.gov/biblio/1471119

[7] J. C. Carver, L. M. Hochstein, D. Cruzes, V. R. Basili, J. K.
Hollingsworth, M. V. Zelkowitz, and F. Shull, “Understanding the high-
performance-computing community: A software engineer’s perspective,”
IEEE Software, vol. 25, no. 04, pp. 29–36, jul 2008.

[8] L. Bornmann and H.-D. Daniel, “What do we know about the h index?”
Journal of the American Society for Information Science and technology,
vol. 58, no. 9, pp. 1381–1385, 2007.

ACKNOWLEDGEMENT

under

contract DE-AC05-00OR22725 with

This manuscript has been authored by UT-Battelle,
the
publisher
to provide
license
the DOE Public Access Plan

LLC,
US Department
acknowledges
public
access
(https://energy.gov/downloads/doe-public-access-plan)

of Energy
the US government

(DOE). The

under

