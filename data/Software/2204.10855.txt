ArXiv manuscript

ParticLS: Object-oriented software for discrete element
methods and peridynamics

Andrew D. Davis · Brendan A. West · Nathanael J. Frisch · Devin T.
O’Connor · Matthew D. Parno

2
2
0
2

r
p
A
9
1

]
S
M

.
s
c
[

1
v
5
5
8
0
1
.
4
0
2
2
:
v
i
X
r
a

Received: date / Accepted: date

Abstract ParticLS (Particle Level S ets) is a software
library that implements the discrete element method
(DEM) and meshfree methods. ParticLS tracks the in-
teraction between individual particles whose geometries
are deﬁned by level sets capable of capturing complex
shapes. These particles either represent rigid bodies or
material points within a continuum. Particle-particle
interactions using various contact laws numerically ap-
proximate solutions to energy and mass conservation
equations, simulating rigid body dynamics or defor-
mation/fracture. By leveraging multiple contact laws,
ParticLS can simulate interacting bodies that deform,
fracture, and are composed of many particles. In the
continuum setting, we numerically solve the peridy-
namic equations—integro-diﬀerential equations capable
of modeling objects with discontinuous displacement
ﬁelds and complex fracture dynamics. We show that
the discretized peridynamic equations can be solved us-
ing the same software infrastructure that implements

Andrew D. Davis
Cold Regions Research and Engineering Laboratory, 72 Lyme
Rd, Hanover, NH 03755
NYU—Courant Institute of Mathematical Sciences, 251 Mer-
cer Street, New York, NY 10012
E-mail: davisad@alum.mit.edu

Brendan A. West
Cold Regions Research and Engineering Laboratory, 72 Lyme
Rd, Hanover, NH 03755

Nathanael J. Frisch
Cold Regions Research and Engineering Laboratory, 72 Lyme
Rd, Hanover, NH 03755

Devin T. O’Connor
Cold Regions Research and Engineering Laboratory, 72 Lyme
Rd, Hanover, NH 03755

Matthew D. Parno
Cold Regions Research and Engineering Laboratory, 72 Lyme
Rd, Hanover, NH 03755

the DEM. Therefore, we design a unique software li-
brary where users can easily add particles with arbi-
trary geometries and new contact laws that model ei-
ther rigid-body interaction or peridynamic constitutive
relationships. We demonstrate ParticLS’ versatility on
test problems meant to showcase features applicable to
a broad selection of ﬁelds such as tectonics, granular
media, multiscale simulations, glacier calving, and sea
ice.

Keywords Discrete element method · Peridynamics ·
Level set method · Optimization · Contact mechanics ·
Fracture dynamics · Meshfree methods · Geophysical
modeling

1 Introduction

Small-scale processes, such as the interaction of sand
grains or fracture dynamics, impact the large-scale be-
havior of many materials. We devise a new software
library that numerically simulates such phenomena us-
ing meshless methods or the discrete element method
(DEM). These techniques solve equations derived from
conservation of mass and momentum and constitu-
tive models relating material deformation and stress.
Meshless methods, like peridynamics [40], smoothed-
particle hydrodynamics [34], or reproducing kernel par-
ticle methods [7], use partial diﬀerential equations or
integro-diﬀerential equations to describe the material
behavior. Alternatively, the DEM explicitly models
small-scale behavior through the motion and interac-
tion of discrete particles (e.g., sand grains) [1,11,20, 23,
24]. Although DEM and meshless methods have fun-
damentally diﬀerent material representations, we use
abstract computational structures to implement both
methods in a single software library, called ParticLS

 
 
 
 
 
 
2

Andrew D. Davis et al.

(Particle Level S ets). We will refer to both the DEM
and peridynamics as “meshfree” techniques to high-
light their similar computational structure. ParticLS
is uniquely designed as an object-oriented software li-
brary that leverages software concepts such as abstrac-
tion and inheritance to organize and structure the code.
Therefore, ParticLS provides core functionality that
users can use to simulate complex geophysical systems
such as sea ice or soils.

The macroscale properties of granular media require
simulating computationally expensive interactions be-
tween irregularly shaped particles [10,21]. Methods in
the literature for representing complex shapes include
clumping spherical particles [14], 3-dimensional poly-
hedra [28,29], tablet shaped particles [43], or axisym-
metrical particles [12]. However, computing particle-
particle contact information (e.g., the location where
two particles collide) becomes computationally expen-
sive given many particles or complex geometries [25,
43]. Alternatively, irregular particle boundaries can be
represented using the zero level set of a signed distance
function (SDF) [26, 27].

ParticLS uses this level set approach, as formulated
by [26,27], which allows us to formulate a novel contact
detection scheme as a constrained optimization prob-
lem. The contact point between a home particle and
its neighbor is a point on the home particle’s boundary
that minimizes the neighbor particle’s SDF. This gen-
eralized approach allows ParticLS to represent many
unique particle geometries within one simulation with-
out having to specify diﬀerent contact models for ev-
ery potential particle geometry combination. Users only
need to deﬁne an SDF to add a new particle geometry
that works with this contact detection algorithm.

ParticLS can also model deformable bodies using
peridynamics, which can simulate fracturing and dis-
continuous materials [13,32]. Peridynamics replaces the
divergence operator on the Cauchy stress with an in-
tegral operator; these equations are valid even along
crack tips and discontinuities where the spatial deriva-
tives used to compute stress in traditional continuum
formulations generate singularities [4,36,39,40,41, 42].
Peridynamic implementations share many features with
the DEM and we leverage this similarity to provide a
software framework for both approaches.

ParticLS’s object-oriented framework mimics math-
ematical formulations, allowing users to easily add func-
tionality speciﬁc to their application. In this paper, we
highlight four major contributions of ParticLS:

1. We address computational limitations when com-
puting contact between particles that have complex
geometries by deriving an optimization-based con-

tact detection algorithm between neighboring parti-
cles.

2. Generic meshfree algorithms (e.g., contact detec-
tion) are easily adapted to speciﬁc applications us-
ing abstract base classes that provide default imple-
mentations for important functionality. Users can
easily add to the library by inheriting the function-
ality of these classes and prescribing their own def-
initions.

3. Users can couple DEM and peridynamic methods
with other time-dependent simulations or data. Par-
ticLS uses state variables that are deﬁned by an or-
dinary diﬀerential equation, such as temperature-
dependent material properties or contact shear
forces.

4. Deformable bodies can interact by implementing
DEM and peridynamic models with the same code.

Section 2 describes the model formulation for both
the DEM and peridynamics, speciﬁcally highlighting
how the discretized peridynamic equations are analo-
gous to a DEM. Section 3 describes the optimization-
based contact detection algorithm. Section 4 describes
ParticLS’ object-oriented framework and Section 5
shows selected examples to demonstrate ParticLS’
unique capabilities.

2 DEM and peridynamic background

2.1 Discrete element method (DEM)

The equations for the DEM are derived from force bal-
ance and conservation of angular momentum [11]. Par-
ticLS’s DEM implementation evolves the global posi-
tion and orientation of a speciﬁc particle relative to a
reference position. We use lowercase symbols and letters
to denote quantities in the global frame and uppercase
symbols to represent quantities in the local reference
frame. Let X denote the d ∈ {2, 3} dimensional coordi-
nate in a reference frame such that the particle’s center
of mass is at X = 0. In this frame, a particle’s geometry
is deﬁned by a SDF ϕ : Rd (cid:55)→ R [26,27] such that

ϕ(X)






< 0 if X is inside the particle

= 0 if X is on the particle’s boundary

(1)

> 0 if X is outside the particle.

Furthermore, the magnitude |ϕ(X)| deﬁnes the mini-
mum distance between X and a point on the bound-
ary. For the purpose of this paper, we assume that the
particles are convex. Let ¯yi(t) be the center of mass of
particle i ∈ {1, 2, . . . , n} in a global coordinate frame at
time t and ui(t) be the displacement at time t such that

ParticLS: Object-oriented software for discrete element methods and peridynamics

3

ui(0) = 0 and ¯yi(t) = ¯xi + ui(t), where ¯xi is the center
of mass at t = 0. We employ quaternions to represent
the orientation of the particles, which can be deﬁned in
terms of a unit orientation vector χi(t) ((cid:107)χi(t)(cid:107)2 = 1)
and angle θi(t)

qi(t) = cos

(cid:18) θi(t)
2

(cid:19)

+

(cid:16)

χ(0)
i

(t)ˆı + χ(1)

i

(t)ˆ + χ(2)

i

(t)ˆk

(2)

(cid:17)

sin

(cid:18) θi(t)
2

(cid:19)
,

i

where χ(k)
(t) is the kth component of χi(t), such that
rotating the particle about χi(t) by θi(t) radians aligns
the global and reference coordinate frame. The trans-
formation

X(x, ¯yi(t), qi(t)) = qi(t) ◦ (x − ¯yi(t))

(3)

maps the global coordinate x into the ith particle’s local
reference frame. The ◦ operator is the action of rotating
the vector x by the quaternion q.

The particles are translated and rotated in the
global frame according to Newton’s second law and
conservation of angular momentum. Given the trans-
lational velocity vi(t) = ˙ui(t) where the dot denotes
time derivatives,

˙ui(t) = vi(t)

(4a)

2.2 Peridynamic formulation

In the peridynamic framework, non-local forces acting
across ﬁnite distances allow discontinuities and cracks
to form within continuous materials [39,40]. Let Bδ(x)
be a ball with radius δ centered at x. Forces are modeled
as bonds between a point x and points in its horizon
Bδ(x), as illustrated in Figure 1.

Fig. 1: Illustration of the non-local forces acting on the
middle particle in a peridynamic setting. Each circle
represents the material point Br(x(cid:48)). The gray region
corresponds to the horizon Bδ(x) of the middle particle.
Each arrow in the right image corresponds to the pair-
wise force per volume squared ηi(x, xi, t) contributing
to the force on the middle particle after discretization.

fij(t) + bi(t),

(4b)

equation is

Given a material with density ρ(x), the peridynamic

mi ¨ui(t) = mi ˙vi(t) =

n
(cid:88)

j=1

where mi is the mass of particle i, fij(t) is the force
acting on particle i from particle j, and bi(t) are body
forces acting on particle i (e.g., gravity). For particle
i, let the vector ωi(t) be the angular velocity, which
deﬁnes the pure quaternion wi(t) = (0, ωi(t)). The an-
gular velocity describes the change in orientation

ρ(x)¨u(x, t) =

(cid:90)

Bδ(x)

η(x, x(cid:48), t) dx(cid:48) + β(x, t),

(6)

where u(x, t) is the unknown displacement, η(x, x(cid:48), t) is
the pairwise force per volume squared, and β(x, t) is the
body force per volume. Mechanical restrictions require
that

˙qi(t) =

1
2

wi(t) ∗ qi(t),

(5a)

η(x, x(cid:48), t) = −η(x(cid:48), x, t),
η(x, x(cid:48), t) = 0 when (cid:107)x − x(cid:48)(cid:107)2 > δ,

and evolves via conservation of angular momentum

Ii(t) ˙ωi(t) =

n
(cid:88)

j=1

τij(t) − ˙Ii(t)ωi(t),

and
(cid:90)

y(x, t) ×

(5b)

Ω

(cid:90)

Bδ(x)

η(x, x(cid:48), t) dx(cid:48) dx = 0,

(7a)

(7b)

(8)

where I(t) and ˙Ii(t) is the moment of inertia for par-
ticle i in the global frame and its time derivative and
τij(t) is the torque acting on particle i from particle j.
In two dimensions, the rotational equations (5) signiﬁ-
cantly simplify because the particle is restricted to the
x-y plane, and therefore, we only need the orientation
angle θi(t). The angular velocity is now also a scalar
quantity such that (5a) is replaced by ˙θi(t) = ωi(t).

where y(x, t) = x + u(x, t) is the deformation [39, 40].
These restrictions are suﬃcient conditions to conserve
linear and angular momentum. To discretize, we ﬁrst
integrate over a ball centered at material point xi with
radius r (cid:28) δ
(cid:90)

ρ(x)¨u(x, t) dx =

Br(xi)

(cid:90)

(cid:90)

Br(xi)

Bδ(x)

η(x, x(cid:48), t) dx(cid:48) + β(x, t) dx.

(9)

4

Andrew D. Davis et al.

Let the density ρi = ρ(xi) and assume that it is approx-
imately constant in Br(xi). We also assume that the
discrete force per volume squared ηij(t) = η(xi, xj, t) is
approximately constant with respect to the position x
(or x(cid:48)) in the ball Br(x) (or Br(x(cid:48))) and that ηij(t) = 0 if
(cid:107)xi−xj(cid:107) > δ. Similarly, we assume that the acceleration
¨ui(t) = ¨u(xi, t) and body force density βi(t) = β(xi, t)
are constant in Br(xi). The discrete peridynamic equa-
tion is, therefore,

ρiVr ¨ui(t) ≈

n
(cid:88)

j=1

ηij(t)V 2

r + βi(t)Vr,

(10)

where Vr is the volume of a r-radius ball. Deﬁning mi =
ρiVr, fij(t) = ηij(t)V 2
r , and bi(t) = βi(t)Vr derives the
peridynamic analog to (4). The restriction on η(x, x(cid:48), t)
requiring (8) ensures that the system conserves angular
momentum and, therefore, we do not need to explicitly
evolve the orientation of each particle [40].

2.2.1 State-based peridynamics

ParticLS implements state-based peridynamics, which
is an extension of the formulation above but a de-
tailed description is beyond the scope of this paper—
see [40] for details. Brieﬂy, state-based peridynamic
theory deﬁnes the pairwise force per squared volume
η(x, x(cid:48), t) via a force vector state F [x, x(cid:48), t](cid:104)x(cid:48) − x(cid:105),
which is a potentially nonlinear and discontinuous op-
erator F [x, x(cid:48), t] that acts on the bond ξ = x(cid:48) − x [40].
State-based peridynamics is the special case of (6) with

η(x, x(cid:48), t) = F [x, x(cid:48), t](cid:104)x(cid:48) − x(cid:105) − F [x(cid:48), x, t](cid:104)x − x(cid:48)(cid:105). (11)

We assume forces only act across bonds, therefore, de-
ﬁne

Y [x, x(cid:48), t](cid:104)x(cid:48) − x(cid:105) =

y(x(cid:48), t) − y(x, t)
(cid:107)y(x(cid:48), t) − y(x, t)(cid:107)2

(12)

to be the unit vector state that points across the de-
formed bond y(x, t) − y(x(cid:48), t) = (x(cid:48) + u(x(cid:48), t)) − (x +
u(x, t)). The force state of ordinary materials is, there-
fore, written in terms of a scalar state f (x, x(cid:48), t)

F [x, x(cid:48), t](cid:104)x(cid:48) − x(cid:105) = f (x, x(cid:48), t)Y [x, t](cid:104)x(cid:48) − x(cid:105).

(13)

Given f (x, x(cid:48), t), (13) deﬁnes the force state that is sub-
stituted into (11).

3 Optimization-based contact detection

As introduced in Section 1, ParticLS implements a
novel contact detection routine that is formulated as
an optimization problem based on the particles’ SDFs.
The LS-DEM, developed by [26], stores discrete points
along a particle’s boundary (zero level set surface). Con-
tact is detected by looping over these boundary points
and determining if a neighbor’s SDF is negative for
each boundary point. This approach has two poten-
tial drawbacks: (i) it is computationally expensive to
iterate through each set of boundary points for simula-
tions with many particles and (ii) the contact force be-
tween the two particles can be sensitive to the number
of points that are placed on the particle boundary [30].
Instead, ParticLS formulates an optimization problem
that ﬁnds the point on the “home” particle that pen-
etrates deepest into its neighbor. This contact routine
is deﬁned abstractly in terms of the SDF so that new
particle geometries are easily added by deﬁning the cor-
responding SDF.

Consider two particles deﬁned by their centers of
mass (¯x and ¯x(cid:48)), orientations (q and q (cid:48)), and SDFs
(ϕ(X(x, ¯x, q) and ϕ(cid:48)(X(x, ¯x(cid:48), q (cid:48))); denote these parti-
cles p = (¯x, q, ϕ) and p(cid:48) = (¯x(cid:48), q (cid:48), ϕ(cid:48)). We refer to
a ‘point of contact’ as the location on one particle’s
boundary that is closest to the neighboring particle,
or the deepest point of penetration if the particles are
penetrating each other. A potential point of contact is
located at a point x1 on the boundary of particle p that
is closest to particle p(cid:48).1 There is a corresponding point
x2 on the boundary of particle p(cid:48) that minimizes the
distance to particle p. Mathematically, these contact
points solve the optimization problem

ϕ(X(x2, ¯x, q)) + ϕ(cid:48)(X(x1, ¯x(cid:48), q (cid:48)))

minimize
x1,x2∈Rd
subject to ϕ(X(x1, ¯x, q)) = 0

(14)

ϕ(cid:48)(X(x2, ¯x(cid:48), q (cid:48))) = 0.

In principle, we can use any standard optimization al-
gorithm to solve this problem. In some cases, such as
sphere-sphere contact, this problem has a known ana-
lytical solution. In others, we can leverage the speciﬁc
form of the signed distance function to devise a special-
ized algorithm; for example, the Gauss-Seidel can eﬃ-
ciently solve this problem for polygon-polygon contact.

1 Although we have assumed that particles are convex, this
method is compatible for non-convex particles with minimal
alterations. In the non-convex case, multiple contact points
are possible and each potential contact point corresponds to a
local minimum of Equation (14). We can identify these local
solutions by repeatedly solving the optimization problem with
diﬀerent initial guesses. The details of the non-convex case
are beyond the scope of this paper and we, therefore, leave
further discussion to future work.

ParticLS: Object-oriented software for discrete element methods and peridynamics

5

More generally, when we do not have an analytical solu-
tion or specialized algorithm we solve this optimization
problem using the alternating direction method of mul-
tipliers (ADMM)—also called Douglas-Rachford split-
ting [5,16,35]. Importantly, ADMM does not require
derivative information of the SDF, instead relying on
the proximal operator, which allows particle geometry
to have sharp corners. Since the SDF is continuous by
deﬁnition, this algorithm does not impose any restric-
tions on the particle geometry. A detailed description
of these algorithms is beyond the scope of this paper.

Previous “brute-force” contact detection algo-
rithms, which stores n points along the zero level set,
are often signiﬁcantly more computationally expensive
than solving the optimization problem posed in Equa-
tion (14). Speciﬁcally, in the brute force algorithm, the
“home” particle needs to evaluate its neighbor’s SDF
at all n points on its boundary. In comparison, ADMM
typically converges very quickly. We also use the solu-
tion from the previous timestep as an initial condition,
which often leads to convergence in 1-2 iterations. Ad-
ditionally, ADMM ﬁnds the deepest penetration point
up to a user-speciﬁed tolerance, rather than approxi-
mating this point using a pre-deﬁned set along the par-
ticle boundary. Finally, storing the required n boundary
points for every particle in the simulation can require a
huge amount of computer memory for simulations with
many thousands of particles.

For convex particles, the points x1 and x2 are unique
[35] and represent potential contact locations. The par-
ticles are penetrating if both distance functions are neg-
ative.2 When this occurs, it is useful to look at the bond
ξ, which is the vector pointing from the ﬁrst particle to
the second, as shown in Figure 2. Mathematically, the
bond is deﬁned by

resultant set of points describes potential contact points
for the non-convex particles, and allows for multiple
contact points, which we expect to happen in certain
non-convex contact scenarios.

x1

x2

Particle p = (¯x, q, ϕ)

Particle p(cid:48) = (¯x(cid:48), q (cid:48), ϕ(cid:48))

x2

x1

Fig. 2: The red and blue curves correspond to
ϕ(X(x1, ¯x, q)) = 0 and ϕ(cid:48)(X(x1, ¯x(cid:48), q (cid:48))) = 0 level sets
of two particles p = (¯x, q, ϕ) and p(cid:48) = (¯x(cid:48), q (cid:48), ϕ(cid:48)). The
arrows represent the bond ξ = x1 − x2.

3.1 Example: elastic contact

Elastic contact highlights an example where the force
and torque are parameterized by the contact summary
(15) [11]. Given two particles p(t) = (¯x(t), ¯q(t), ϕ) and
p(cid:48)(t) = (¯x(cid:48)(t), ¯q (cid:48)(t), ϕ(cid:48)), the normal force is

ξ = x2 − x1

(15a)

Fn,e(t) = −κn

(cid:74)

ϕ(cid:48)(X(x1, ¯x(cid:48)(t), q (cid:48)(t))) < 0

ξ,
(cid:75)

(16)

and the bond length is (cid:107)ξ(cid:107)2. When the particles are
penetrating, the bond length is the penetration dis-
tance. Given the translational velocities v(t) and v(cid:48)(t),
the relative velocity is

vr(t) = (v(t)+ω×(x−x1))−(v(cid:48)(t)+ω(cid:48)×(x(cid:48)−x2)) (15b)

and the tangential velocity, as deﬁned by [26], is

va(t) = vr(t) − (vr(t) · ξ)ξ/(cid:107)ξ(cid:107)2.

(15c)

The torque and force between the two particles depends
on the contact summary as deﬁned by Equation (15).
For non-convex particles, we divide their geometry into
convex sub-particles and then ﬁnd the potential contact
points between each sub-particle and the neighbor. The

2 Note that the SDFs will always have the same sign.

where
(cid:75)
evolves according to

·
(cid:74)

is the indicator function. The shear force

˙Fs,e(t) = −κs

ϕ(cid:48)(X(x1, ¯x(cid:48)(t), q (cid:48)(t))) < 0
(cid:75)

(cid:74)

va(t)

(17)

with Fs,e(0) = 0. If the particles are not in contact then
we reset Fs,e = 0—this is important if the particles
ever deﬂect away from each other then come back into
contact. A Coulomb friction criterion is applied to the
shear force according to

F c

s,e(t) =

(cid:26) Fs,e(t)

if (cid:107)Fs,e(t)(cid:107) ≤ µ(cid:107)Fn,e(t)(cid:107)

µFn,e(t) otherwise

(18)

where µ is the friction coeﬃcient. The total force act-
ing on particle p due to particle p(cid:48) is therefore F (t) =
Fn,e(t) + F c
s,e(t) and the torque is τ (t) = ((x1 + x2)/2 −
¯x) × F (t). In this example, we deﬁne the moment arm

6

Andrew D. Davis et al.

(x1 + x2)/2 to be halfway between the points that solve
(14). In two dimensions, this simpliﬁes by restricting all
translation and rotation to the x-y plane.

3.2 Example: viscoelastic contact

We also highlight linear viscoelastic contact, which can
be conceptualized as a linear spring-dashpot system
[37]. This model is similar to the elastic contact model
but with additional viscous damping components that
remove energy from particle interactions. The normal
force due to damping is

Fn,v(t) = −γnvr(t),

(19)

where γn is the normal viscous damping coeﬃcient.
Therefore the total normal force is Fn(t) = Fn,e(t) +
Fn,v(t). The same evolution equation (17) models the
shear force, however, viscoelastic contact adds an addi-
tional shear force component that accounts for damp-
ing:

Fs,v(t) = −γsva(t),

(20)

where γs is the tangential viscous damping coeﬃcient.
Therefore, the total normal force is Fs(t) = Fs,e(t) +
Fs,v(t). The total shear force applies the same Coulomb
friction criterion in (18). The torque remains τ (t) =
((x1 + x2)/2 − ¯x) × F (t).

4 ParticLS object-oriented implementation

ParticLS deﬁnes abstract objects that dictate an inter-
face to important functionality for meshfree methods.
Through inheritance and abstraction users can easily
customize base functionality to implement new parti-
cle geometries, body forces, contact forces, etc.. This
makes ParticLS a useful tool for a wide variety of ap-
plications, e.g. soil mechanics, fracturing bodies, and/or
sea ice. We refer to objects/data structures as “classes”
and denote them with the typewritter font.

ParticLS evolves time-dependent quantities of in-
terest by evolving a collection of abstract ob-
jects called StateObjects, which are stored in the
Simulation. The simulation-level state is the combined
state of its StateObjects. ParticLS compartmental-
izes Simulation into (i) a collection of time-dependent
StateObjects, (ii) numerical algorithms required to
evolve the states (ﬁnding particle nearest neighbors and
time-integration), and (iii) observers that extract quan-
tities of interest at speciﬁed times.

4.1 Collections of time-dependent state objects

Unlike other particle methods, this allows ParticLS to
additionally evolve non-particle states—for example,
time-dependent geometries. Each StateObject stores
a time-dependent parameter, such as a rigid body’s po-
sition and velocity or the shear force deﬁned by (17) and
(20). Rather than explicitly integrating the shear force,
many algorithms use ﬁrst-order ﬁnite diﬀerence to ap-
proximate an explicit expression for Fs. However, if we
use a higher-order method to integrate particle position,
the time-discretization of the shear force must also be
updated—otherwise we lose higher-order accuracy in
time. Rather than tie expressions for time-dependent
quantities to their discretization, we incorporate them
into the time-dependent state of the Simulation object
via the StateObject structure.

Rigid particles (material points in the peridynamic
setting) are implemented as RigidBodys, which inherit
from StateObject. RigidBody stores the

1. center of mass (a d dimensional vector xi(t)),
2. reference particle geometry (a pointer to a Geometry

object),

3. translational velocity (a d dimensional vector vi(t)),
4. orientation (an angle θi(t) in two dimensions and a

quaternion qi(t) in three dimensions), and

5. angular velocity (a scalar in two dimensions and a
three dimensional vector in three dimensions ωi(t)).

The global coordinate x is transformed into the par-
ticle’s reference coordinate X via (3) using the cen-
ter of mass and orientation. Given the reference co-
ordinate X, the RigidBody evaluates its Geometry’s
SDF (1) to determine its shape. The Geometry object
also computes the particle’s mass and moment of in-
ertia, given density ρ(X). The RigidBody object also
contains vectors of BodyForces and ContactForces,
which represent forces acting on the particle. Given
the net force, torque, translational velocity, and angu-
lar velocity, RigidBody computes the time-derivative
of its state using (4) and (5). The Simulation object
storing the RigidBodys uses their time derivatives to
evolve in time. Simulation also evolves other time-
dependent StateObjects, such as shear forces stored
in ContactForces.

4.2 Algorithms for evolving simulations

4.2.1 Finding nearest neighbors with k-d trees

The Searcher object ﬁnds the nearest neighbors for
each particle in the simulation. We deﬁne “nearest
neighbors” with a distance metric between particles

ParticLS: Object-oriented software for discrete element methods and peridynamics

7

d(pi, pj) and say pi and pj are neighbors if d(pi, pj) < h.
For reference, the worst case algorithm is to ﬁrst loop
over every particle, and for each of these ‘outer’ par-
ticles we again loop over all of the particles and de-
cide if they are neighbors. The overall complexity of
the algorithm is therefore O(n2). Instead, we organize
the particles in a k-d tree to signiﬁcantly reduce the
complexity of ﬁnding the nearest neighbors. Assuming
d(pi, pj) = (cid:107)¯xi − ¯xj(cid:107)2, a k-d tree stores each parti-
cle as a node in a binary tree [6]. ParticLS uses the
open source software package nanoﬂann to construct k-
d trees [8]. On average, the complexity of constructing
k-d trees is O(n log (n)) and ﬁnding the nearest neigh-
bors is O(log (n)) per particle. Therefore, the overall
complexity of constructing the tree and ﬁnding each
particle’s nearest neighbors is O(2n log (n)). We note
that this complexity estimate assumes that particles are
relatively evenly distributed throughout the domain or
that the search ﬁnds the k nearest neighbors (rather
than the neighbors within radius ∆). It is also impor-
tant to note that the k-d tree approach is limited by
the Euclidean distance metric between points.

4.2.2 Integrating simulation state in time

ParticLS implements second order Runge-Kutta for all
StateObjects except RigidBodys, which use the sec-
ond order velocity Verlet. Given timestep ∆t and any
StateObject that is not a RigidBody, the time dis-
cretization is

st+ 1

2

= st +

∆t
2

f (st, t∆t)

st+1 = st+ 1

2

+

∆t
2

f (st+ 1

2

, t∆t + ∆t/2),

(21a)

(21b)

is

where f (st, τ )

the result of computing the
StateObject’s right hand side at state st and time τ .
The RigidBody’s right hand side computes the time
˙vt and ˙ωt, respectively. This
derivatives of vt and ωt,
deﬁnes the velocity and acceleration of the RigidBody
and, therefore,

xt+1 = xt + vt∆t + ˙vt∆t2/2

(22)

is a second-order discretization. Similarly, we use ωt
and ˙ωt to deﬁne a second order scheme to update the
orientation quaternion [31]

qt+1 =

∆t
2

(wt +

∆t
2

˙ωt) ∗ qt,

(23)

where ωt is the angular velocity and wt is the corre-
sponding pure quaternion.

4.3 Observers and monitoring

ParticLS provides functionality for tracking diﬀerent
quantities of interest throughout a simulation. This
capability makes it easy for users to measure time-
series of a speciﬁc particle’s properties, or quanti-
ties related to the whole particle collection. The base
class for this functionality is the Observer class. The
ParticleTracker, for example, tracks the state vari-
ables of a RigidBody, which allows the simulation to
extract the position, velocity, orientation, and/or angu-
lar velocity of a particular particle-of-interest. Similarly,
the CollectionTracker computes quantities that de-
pend on the entire collection. For example, in the DEM
setting, we can use the CollectionTracker observer to
measure the homogenized Cauchy stress tensor of the
collection:

σ =

1
V

n
(cid:88)

n
(cid:88)

i=1

j=1

dij ⊗ Fij,

(24)

where V is the volume of the smallest axis-aligned
bounding box containing all of the particles, n is the
number of particles in the collection, dij = ¯xj − ¯xi is
the vector pointing from particle i’s center of mass to
particle j’s center of mass, and Fij is the force vec-
tor acting between particles i and j [17]. The operator
⊗ denotes the outer product. We note that Fij = 0
for most pairs and that (24) can be computed much
more eﬃciently by replacing the second summation
with the nearest neighbors of particle i. In practice,
this is how we compute the Cauchy stress tensor. The
Observer class and its children (e.g., ParticleTracker
and CollectionTracker) lets ParticLS monitor ob-
servable quantities that can be directly compared to
observations.

5 Example applications

5.1 Non-spherical particle geometries

Our ﬁrst example highlights various particle geome-
tries, which are implemented by creating children of the
Geometry base class. Each new Geometry must compute
its SDF in reference coordinates X and, optionally, can
implement computationally eﬃcient functions to calcu-
late its mass, moment of inertia, and other properties.
Given this information, ParticLS can incorporate the
new geometry into DEM or peridynamic simulations.
We deﬁne three example shapes: (i) spheres, (ii) boxes,
and (iii) polyhedra—see Figure 3. The SDF for a sphere
with radius R is

ϕ(X) = (cid:107)X(cid:107)2 − R.

(25)

8

Andrew D. Davis et al.

The SDF for a box is deﬁned by the d ∈ {2, 3} di-
mensional vector Y such that Yi is the length of the
box in the ith dimension. Considering the d ∈ {2, 3}
dimensional vector D whose components are Di =
max (|Xi| − Yi/2), 0); the SDF is

ϕ(X) = (cid:107)D(cid:107)2 − min

i∈{1,...,d}

(Di).

(26)

t = 0

t = 0.5

t = 1

Fig. 4: We deﬁne polygon geometries with density δ = 1
that interact via the viscoelastic contact (section 3.2)
with κn = 105 N/m, κs = 104 N/m, µ = 1, γn = 1
N s/m, and γs =
0.1 N s/m. We prescribe an initial
velocity of v0 = (0.25, 0.24) m/s to the red particle.

√

Fig. 3: Top row: SDFs for the sphere and the box
classes—(25) and (26), respectively. Bottom row: SDFs
for two diﬀerent polygons.

ParticLS can also simulate more complicated ge-
ometries. For example, convex polyhedra, which gen-
eralizes the box geometry (see Figure 2), are deﬁned by
a set of faces outlining the shape’s perimeter—lines in
two dimensions and polygons in there dimensions. The
signed distance for a polyhedra with m faces is deter-
mined by calculating the minimum distance Si between
the point X and the ith face. The SDF for a polygon
is therefore

ϕ(X) = min

i∈{1,...,m}

(Si).

(27)

Figures 4 and 5 show irregularly shaped polygons in
two dimensions, and polyhedra in three dimensions, re-
spectively.

5.2 Time-dependent particle geometries

ParticLS allows users to create objects with time-
dependent properties by implementing children of the
StateObject class. In this example, we simulate a di-
lating sphere. We implement a class SphereRadius,
which is a one dimensional child of StateObject whose

t = 0

t = 0.5

t = 1

Fig. 5: We deﬁne polyhedra geometries by extruding the
polygons in Figure 4 in the z direction—the height of
each polygon is randomly choosen from {0.1, 0.25, 0.5}.
We use the same viscoelastic contact law and prescribe
an initial velocity of v0 = (0.25, 0.25, 0) m/s to the red
particle.

right hand side deﬁnes how quickly the sphere’s radius
changes as a function of time. In this example, the
radius simply increases linearly with respect to time.
However, users can implement more complex models
that change the particle’s radius according to a func-
tion dR(t)/dt = g(R(t), t; θ), where g is a generic func-
tion, and θ parameterizes a model that could simulate
thermal expansion or a change in particle shape due to
other material properties.

We demonstrate this time-dependent functionality
with a simple example in which normal sphere parti-
cles are displaced by one that expands. We begin with
25 equally-sized spheres that are conﬁgured in a hexag-
onal packing conﬁguration with 5 rows of 5 spheres
(Figure 6). The radius of each sphere is deﬁned by a
SphereRadius object where dR(t)/dt = 0 m/s, except
the middle sphere where dR(t)/dt = 1 m/s. In addition
to adding each RigidBody to the Collection object,
we also add the SphereRadius with non-zero right hand
side. The VelocityVerlet time-integrator evolves both
the particles and the radius in time. The contact law be-
tween objects is the elastic contact described in section

ParticLS: Object-oriented software for discrete element methods and peridynamics

9

3.1 with with parameters κn = 20 N/m, κs = κn/2,
and µ = 0.3. The results in Figure 6 show how this
time-dependent capability gives users one approach to
infuse additional physics into their ParticLS simulation
beyond the rigid body mechanics provided with DEM.

t=1

t=2

t=3

Fig. 6: Example of a particle with a time-dependent
geometry. Initially each of the hex packed particles are
the same size but the radius of the middle particle grows
according to dR(t)/dt = 1 m/s.

5.3 Multiscale granular media mechanics

ParticLS tracks micro-scale particles (e.g. soil grains),
whose aggregate properties determine the macro-scale
response of the granular material (e.g. soil strength). In
general, the DEM is a useful tool for modeling the me-
chanical response of granular media and studies have
been able to match modeled results with laboratory
experiments [26, 33, 38,3]. However, large domains with
millions or billions of particles can be prohibitively ex-
pensive. One approach for modeling these large sys-
tems is with multiscale methods, of which there are
a few diﬀerent options. One method, called the hier-
archical multiscale method (HMM), leverages the ﬁ-
nite element method (FEM) over the full domain and
uses small-scale DEM simulations as local representa-
tive volume elements (RVEs) to capture micro-scale
dynamics where necessary [17]. In this example, we
present the general principles of the HMM approach

and show how the results of a ParticLS DEM simula-
tion can ﬁt into the framework.

A classic problem for illustrating the beneﬁt of the
HMM is simulating the response of granular media un-
der diﬀerent loading conditions. In this case we are con-
cerned with relating the applied loads to the material’s
resultant deformation. In a normal FEM approach to
this problem, the governing equation can be described
as:

σ = Dε

(28)

where σ is the stress, D is the tangent operator, and ε
is the strain [18]. Unfortunately, this requires a consti-
tutive law to deﬁne D beforehand, which introduces as-
sumptions and biases regarding the material’s response.
However, the HMM approach avoids this issue by ex-
plicitly solving for the stress in the granular material
by simulating a DEM particle collection with the given
strain boundary conditions. In the HMM, information
is transferred between the two models in an iterative
manner such that the FEM solution provides strain
boundary conditions (ε) to each DEM simulation, and
the resolved DEM solution returns stress (σ) and tan-
gent operator (D) to the FEM [18]. Therefore, we can
solve the equation 28 without making any assumptions
about the material’s constitutive response.

The stress in the DEM particle collection is calcu-
lated with the average Cauchy stress tensor (24), and
the tangent operator is calculated with

D =

1
V

(cid:88)

(knnc⊗dc⊗nc⊗dc+kttc⊗dc⊗tc⊗dc) (29)

Nc

where kn and kt are the normal and tangential stiﬀness,
nc and tc are the normal and tangential directions of
each particle contact, and dc is the vector between each
pair of particles in contact. This feedback loop between
DEM and FEM solvers is repeated every time the FEM
model requires ﬁne scale information.

In this example, we show how ParticLS’ DEM ca-
pabilities can be used to simulate an RVE in uniaxial
compression—in HMM this strain would come from the
FEM solution. We track the average Cauchy stress ten-
sor of a conﬁned particle assembly as it is compressed in
the z direction. The RVE consists of 16500 hex-packed
spheres that start in a 0.85 × 0.85 × 1.00 box. The sides
and bottom of the box are planar particles whose loca-
tion and orientation are ﬁxed in time. The top of the
box is another planar particle whose velocity is ﬁxed at
v = (0, 0, −0.35) m/s. We run the simulation for t = 1
units of time with a viscoelastic contact model with pa-
rameters κn = 20 N/m, κs = κn/2, γn = 0.08 N s/m,
γs = γn/2, and µ = 0.3; Figure 7 shows the initial and
ﬁnal conﬁgurations. A CollectionTracker was used to

10

Andrew D. Davis et al.

5.4 Peridynamic model of ordinary material

We demonstrate ParticLS’ ability to model peridy-
namic solids by stretching a plate that is initially de-
ﬁned by the material domain Ω = 1×1×0.01 plate. We
denote the components of x ∈ Ω by x = (x0, x1, x2).
The horizon is determined by a ball with radius δ,
¯Bδ(x) = Bδ(x)∩Ω—each material point x ∈ Ω interacts
with the points x(cid:48) such that (cid:107)x − x(cid:48)(cid:107) < δ and x(cid:48) ∈ Ω.
We consider a linear peridynamic solid [40] with a hole
cut through it, that fractures given a driving force on
its right boundary.

We implement a linear peridynamic solid—refer to
sections 13-15 of [40] for additional details. Given x ∈ Ω
and x(cid:48) ∈ ¯Bδ(x), deﬁne the extension

e(x, x(cid:48), t) = (cid:107)(x(cid:48)+u(x(cid:48), t))−(x+u(x, t))(cid:107)−(cid:107)x(cid:48)−x(cid:107), (30)

which is a proxy for the strain in the bond between x
and x(cid:48). Additionally, deﬁne the weighted volume

m(x) =

(cid:90)

¯Bδ(x)

ω((cid:107)x(cid:48) − x(cid:107))(cid:107)x(cid:48) − x(cid:107)2 dx(cid:48)

(31)

and the dilation parameter

θ(x, t) =

(cid:90)

¯Bδ(x)

ω((cid:107)x(cid:48) − x(cid:107))(cid:107)x(cid:48) − x(cid:107)e(x, x(cid:48), t) dx(cid:48),

(32)

where ω : R+ (cid:55)→ R+ is the inﬂuence function. We
choose

ω((cid:107)ξ(cid:107)) = exp (−(cid:107)ξ(cid:107)2/δ2).

(33)

The isotropic and deviatoric parts of e(x, x(cid:48), t) are

ei(x, x(cid:48), t) = θ(x, t)(cid:107)x(cid:48) − x(cid:107)/3
ed(x, x(cid:48), t) = e(x, x(cid:48), t) − ei(x, x(cid:48), t),

(34a)

(34b)

respectively. A linear peridynamic solid is deﬁned by
the force state (13)

f (x, x(cid:48), t) =ω((cid:107)x(cid:48) − x(cid:107))(3kθ(x, t)(cid:107)x(cid:48) − x(cid:107)

− 15µed(x, x(cid:48), t))/m(x),

(35)

where k > 0 and µ ≥ 0 are the bulk and shear moduli.
The velocities at x = 0 and x = 1 are zero in the y and
z directions, but we apply a velocity of 0.1/sec in the x
direction.

We discretize the domain Ω using 1/Nx × 1/Ny ×
1/Nz cubes whose SDF is deﬁned by (26). ParticLS
integrates the discrete peridynamic equation (10) with
respect to time. We cut a hole through the plate by
removing all particles whose initial center of mass ¯x
satisﬁes

(¯x1 − 0.5)2/r2

1 + (¯x2 − 0.5)2/r2

2 < 1,

(36)

Fig. 7: Example of uniaxial compression of a sphere
particle assembly with 16500 particles and initial di-
mensions of 0.85 × 0.85 × 1.00.

track the average Cauchy stress tensor as a function of
time.

This example illustrates ParticLS’ ability to track
macro-scale properties that are important when model-
ing granular media—speciﬁcally, how ParticLS ﬁts into
a multiscale framework. The CollectionTracker mea-
sures the collection’s average Cauchy stress and in this
case a ParticleTracker estimates the strain as the
change in top plane’s position. The collection’s stress-
strain response throughout the experiment is illustrated
in Figure 8, which plots the σzz component of the stress
against the strain. The stress-strain response oscillates
at the beginning as the top plate meets the top row of
particles and they spread out to ﬁll the box domain. Af-
ter initial contact, the stress increases as the collection
is compressed. The example RVE simulation (Figures
7 and 8) shows how ParticLS could be used to model
the RVE’s used in an HMM multi-scale framework for
diﬀerent geomechanic systems such as soil, snow, or sea
ice [17,19,9,15,22].

0.0

z
z
σ

s
s
e
r
t
S

−20.0

−40.0

0.00

0.10

0.20

0.30

Strain ε

Fig. 8: Stress-strain plot for uniaxial compression ex-
periment in Figure 7, where the plotted stress value is
the σzz component of (24) and the strain is estimated
as the change in position of the top plane.

ParticLS: Object-oriented software for discrete element methods and peridynamics

11

where ¯x1 and ¯x2 are the ﬁrst and second components
of ¯x and r1 and r2 are radii of an ellipse in the x and y
directions, respectively. Figure 9 shows the initial loca-
tion of the particles with Nx = Ny = 125 and Nz = 1.
We model internal forces using the linear peridynamic
solid force state deﬁned by (35). However, we drive the
simulation by prescribing a body force




β(x, t) =

3(1 − exp (−10t))

if x > 0.95

−3(1 − exp (−10t))

if x < 0.05

(37)



0

else

on the portion of the plate such that ¯x1 > 0.05. In
Figure 9, we show results for our plate-with-hole exper-
iment. The plate deforms most at the top and bottom
boundaries of the hole, as we would expect, and frac-
tures nucleate in these regions due to the stress con-
centrations. Traditional continuum mechanic models—
which deﬁne a diﬀerential constitutive law—generate
a singularity at crack tip, which makes modeling with
these methods changeling, if not impossible. The peri-
dynamic framework in ParticLS allows us to model de-
forming and fracturing bodies. After fracture, the re-
sulting bodies interact using DEM contact laws, which
allows us to model materials that break into several
discrete pieces within one simulation. In Figure 9, we
visualize the material points in the plate using cubes. In
the peridynamic setting, this geometric choice is irrel-
evant: the peridynamic law only requires the distance
between the center-of-masses. However, after fracture
occurs, we replace the contact law with elastic contact
allowing the resulting halves of the plate to interact as
discrete, deforming bodies. Therefore, the chosen par-
ticle geometry only matters after fracture.

5.5 Peridynamic model of a cantilevered beam

To illustrate ParticLS’ ability to match analytical so-
lutions for continuum mechanic problems, we simu-
late the deﬂection of a cantilevered beam in two and
three dimensions. We discretize the beam using mate-
rial points—similar to Section 5.4—and connect nearby
points (within radius r) with a beam that models in-
ternal forces. As the particles move, the beam deforms
(compresses, stretches, and bends), exerting a mate-
rial force on the connected particles following Euler-
Bernoulli beam theor—[2] derive the corresponding ex-
pression for the force and torque that this exerts on the
material points.

We propose that this beam model is akin to a peri-
dynamic model. As the number of particles n discretiz-
ing the beam increases, each particle responds to de-
formation to the material within a radius r. We let

(a) t = 0s

(b) t = 0.25s

(c) t = 1.0s

Fig. 9: Results of a linear peridynamic plate with a hole
that is stretched to the right under a driving force. The
left and right columns of (b) and (c) are the x and y
components of the force density, respectively.

r → 0 as n → ∞—[42] to show that in this limit the
peridynamic model converges to classical elastic theory.
We, therefore, compare the deﬂection of the discretized
beam with bonded adjacent particles to the classical
analytic solution for a cantilevered beam bending due
to an external acceleration. There are two key diﬀer-
ences between this simulation and how we typically de-
ﬁne a peridynamic model. First, we have not explicitly
deﬁned the force state F [x, x(cid:48), t] that is used in Equa-
tion (11). Second, the beams impose a torque on the
material point, which requires us to evolve the mate-
rial point rotation and angular velocity in order to con-
serve angular momentum. Traditional peridynamics—
even state-based peridynamics—assumes angular mo-
mentum is conserved by imposing requirements on the
force state. We propose this as a peridynamic-like model
but exploring how to formally include angular momen-
tum in the peridynamic framework is beyond the scope
of the current paper. For our purposes, we numerically

12

Andrew D. Davis et al.

validate the model and our code by matching an ana-
lytic solution and showing expected dynamic behavior.

5.5.1 Two dimensional case

(a) t = 0

The analytical solution for the maximum deﬂection, d,
of a cantilevered beam acting under an external accel-
eration, a, is as follows:

d =

M aL4
8EI

.

(38)

(b) Material point bonds

where M is the beam mass, L is the beam length, and
I is the beam moment of inertia. Figure 10 shows the
comparison between n = 11 material points along the
beam and the expected analytical result. It is obvious
from this result that ParticLS is able to accurately ap-
proximate the deﬂection of a continuous beam.

·10−2

0

d

n
o
i
t
c
e
ﬂ
e
D

−1

−2

−3

−4

0

Analytical solution
ParticLS solution

200

400

600

800

1,000

Young’s Modulus E

Fig. 10: Comparison of numerical beam deﬂection to
analytical solution for a constant external acceleration
of a = −2E − 6 m/s2. We set the physical parameters
M = 1 kg, L = 1 m, and I = 7.85E − 9 m4.

5.5.2 Three dimensional case

The left column of Figure 11 shows a three dimensional
cantilevered beam where the material points are only
bonded with their nearest neighbors. As the number of
points increases, the solution neighborhood containing
the connected points decreases and the numerical model
recovers the analytical solution. The right column ﬁxes
a constant radius—as the number of points increases
a given point connects with more nearest neighbors.
The latter simulation reﬂects the non-local forces used
by peridynamic models. Physically, this could repre-
sent internal forces that evolve on near-instantaneous
time scales. Mathematically, this example is more com-
plicated than a typical peridynamic model. In partic-
ular, we do not have an explicit expression for the

(c) t = 10

Fig. 11: A three dimensional cantilevered beam: (a) the
initial condition, (b) the bonds between material points,
and (c) the state given a constant external acceleration
a = −10−1 m/s2 in the z direction at time t = 10 s.
We set the physical parameters M = 1 kg and E = 103
P a. The left column shows bonds only between adja-
cent material points and the right column shows bonds
within a ﬁxed radius r = 0.06 m.

force state and we also need to explicitly evolve the an-
gular momentum conservation equation. However, the
peridynamic-like model with non-local forces has the
intuitive eﬀect of stiﬀening the beam—as shown in Fig-
ure 11c. We leave exploring the mathematics more rig-
orously to future work.

6 Conclusions and future directions

ParticLS is a software package for discrete element and
peridynamic methods designed with geoscience appli-
cations in mind. Our novel optimization-based contact
detection routine allows users to deﬁne complex parti-
cle geometries via an SDF. Leveraging abstraction and
inheritance allows users to easily add new geometries
without re-implementing contact-detection algorithms.
Also, the ability to evolve general time-dependent ob-
jects allows users to infuse additional physics into their
simulations beyond typical particle mechanics. Parti-
cLS can also couple rigid body dynamics and peridy-
namic interactions in the same simulation, which allows
users to model large bodies that fracture into smaller
fragments that then interact with each other in a dis-
crete manner. These interactions can be ﬁne-tuned for a
particular material through the deﬁnitions of new con-
tact models or peridynamic states that capture the ap-
propriate mechanics.

ParticLS: Object-oriented software for discrete element methods and peridynamics

13

ParticLS focuses on creating computational objects
that mimic mathematical counterparts (e.g. abstract
classes that implement signed distance functions to rep-
resent particle geometries). Without this general frame-
work the software must either assume a particular ge-
ometry (typically spheres) or implement diﬀerent pair-
wise contact laws for each possible pair of particle ge-
ometries.

In summary, ParticLS provides a platform with an
intuitive implementation that will assist further study
of the constitutive laws governing materials prone to
fracture and plastic deformation, speciﬁcally rock and
ice, as well as empower the simulation of systems that
are relevant to various geoscience ﬁelds. In particu-
lar, ParticLS’ ability to simultaneously approximate
the peridynamic equations and evolve time-dependent
parameters, such as temperature, could allow users to
model temperature-dependent interaction laws. For ex-
ample, materials may become brittle as temperatures
decrease or ductile as temperatures increase. This capa-
bility is particularly useful when modeling the mechani-
cal response of land or sea ice for simulating glacier calv-
ing or sea ice pressure ridging. The coupling of DEM
and peridynamics is particularly useful for modeling ice
ridging, where individual ice fragments coalesce to form
sails and keels that catch atmospheric and oceanic cur-
rents [44,23]. These examples of future model develop-
ments and applications illustrate how ParticLS provides
a useful set of base functionality that can be extended
and used to study a variety of geoscience problems with
complicated physics.

Acknowledgements The authors gratefully acknowledge
funding provided by the Engineering Research and Develop-
ment Center (ERDC) Future Innovation Funds (FIF) pro-
gram. Since writing this paper, author Andrew D. Davis
has moved from the Cold Regions Research and Engineer-
ing Labs to the Courant Institute at New York University,
where he is funded by the Multidisciplinary University Re-
search Initiative—ONR N00014-19-1-2421.

Conﬂict of Interest On behalf of all authors, the cor-
responding author states that there is no conﬂict of
interest.

References

1. Andrade, J.E., Lim, K.W., Avila, C.F., Vlahini´c, I.:
Granular element method for computational particle me-
chanics. Computer Methods in Applied Mechanics and
Engineering 241, 262–274 (2012)

2. Andr´e, D., Iordanoﬀ, I., Charles, J.l., N´eauport, J.: Dis-
crete element method to simulate continuous material by
using the cohesive beam model. Computer methods in
applied mechanics and engineering 213, 113–125 (2012)

3. Asaf, Z., Rubinstein, D., Shmulevich, I.: Determination
of discrete element model parameters required for soil
tillage. Soil and Tillage Research 92(1-2), 227–242 (2007)
4. Askari, E., Bobaru, F., Lehoucq, R.B., Parks, M.L.,
Silling, S.A., Weckner, O.: Peridynamics for multiscale
materials modeling. Journal of Physics: Conference Se-
ries 125, 012078 (2008). DOI 10.1088/1742-6596/125/1/
012078

5. Benning, M., Knoll, F., Sch¨onlieb, C.B., Valkonen,
T.: Preconditioned admm with nonlinear operator con-
straint.
In: IFIP Conference on System Modeling and
Optimization, pp. 117–126. Springer (2015)

6. Bentley, J.L.: Multidimensional binary search trees used
for associative searching. Communications of the ACM
18(9), 509–517 (1975)

7. Bessa, M., Foster, J., Belytschko, T., Liu, W.K.: A mesh-
free uniﬁcation: reproducing kernel peridynamics. Com-
putational Mechanics 53(6), 1251–1264 (2014)

8. Blanco, J.L., Rai, P.K.: nanoﬂann: a C++ header-
only fork of FLANN, a library for nearest neighbor
(NN) with kd-trees.
https://github.com/jlblancoc/
nanoflann (2014)

9. Bobillier1, G., Gaume, J., Van Herwijnen, A., Schweizer,
J.: Modeling crack propagation for snow slab avalanche
release with discrete elements.
In: Proceedings of the
European conference on computational mechanics (2018)
10. Cho, G.C., Dodds, J., Santamarina, J.C.: Particle shape
eﬀects on packing density, stiﬀness, and strength: natural
and crushed sands. Journal of geotechnical and geoenvi-
ronmental engineering 132(5), 591–602 (2006)

11. Cundall, P.A., Strack, O.D.: A discrete numerical model
for granular assemblies. Geotechnique 29(1), 47–65
(1979)

12. Favier, J., Abbaspour-Fard, M., Kremmer, M., Raji, A.:
Shape representation of axi-symmetrical, non-spherical
particles in discrete element simulation using multi-
element model particles.
Engineering computations
16(4), 467–480 (1999)

13. Foster, J.T., Silling, S.A., Chen, W.W.: Viscoplasticity
using peridynamics. International journal for numerical
methods in engineering 81(10), 1242–1258 (2010)

14. Garcia, X., Latham, J.P., Xiang, J.s., Harrison, J.: A clus-
tered overlapping sphere algorithm to represent real par-
ticles in discrete element modelling. Geotechnique 59(9),
779–784 (2009)

15. Gaume, J., van Herwijnen, A., Schweizer, J., Chambon,
G., Birkeland, K.: Discrete element modeling of crack
propagation in weak snowpack layers.
In: Proceedings
ISSW (2014)

16. Goldstein, T., O’Donoghue, B., Setzer, S., Baraniuk, R.:
Fast alternating direction optimization methods. SIAM
Journal on Imaging Sciences 7(3), 1588–1623 (2014)
17. Guo, N., Zhao, J.: A coupled fem/dem approach for hi-
erarchical multiscale modelling of granular media. Inter-
national Journal for Numerical Methods in Engineering
99(11), 789–818 (2014)

18. Guo, N., Zhao, J.: A multiscale investigation of strain
localization in cohesionless sand. In: K.T. Chau, J. Zhao
(eds.) Bifurcation and Degradation of Geomaterials in
the New Millennium, pp. 121–126. Springer International
Publishing, Cham (2015)

19. Guo, N., Zhao, J.: Multiscale insights into classical ge-
omechanics problems. International Journal for Numer-
ical and Analytical Methods in Geomechanics 40(3),
367–390 (2016). DOI 10.1002/nag.2406. URL https://
onlinelibrary.wiley.com/doi/abs/10.1002/nag.2406

14

Andrew D. Davis et al.

39. Silling, S.A.: Reformulation of elasticity theory for dis-
continuities and long-range forces. Journal of the Me-
chanics and Physics of Solids 48(1), 175–209 (2000)
40. Silling, S.A., Epton, M., Weckner, O., Xu, J., Askari, E.:
Peridynamic states and constitutive modeling. Journal
of Elasticity 88(2), 151–184 (2007)

41. Silling, S.A., Lehoucq, R.: Peridynamic theory of solid
mechanics. In: Advances in applied mechanics, vol. 44,
pp. 73–168. Elsevier (2010)

42. Silling, S.A., Lehoucq, R.B.: Convergence of peridynam-
ics to classical elasticity theory. Journal of Elasticity
93(1), 13 (2008)

43. Song, Y., Turton, R., Kayihan, F.: Contact detection al-
gorithms for dem simulations of tablet-shaped particles.
Powder Technology 161(1), 32–40 (2006)

44. Timco, G., Burden, R.: An

analysis

the
Cold Regions Science

of

sea ice ridges.

shapes of
and Technology 25(1), 65 – 77 (1997).
https://doi.org/10.1016/S0165-232X(96)00017-1. URL
http://www.sciencedirect.com/science/article/pii/
S0165232X96000171

DOI

20. Guo, Y., Curtis, J.S.: Discrete element method simula-
tions for complex granular ﬂows. Annual Review of Fluid
Mechanics 47, 21–46 (2015)

21. Guo, Y., Morgan, J.K.: Inﬂuence of normal stress and
grain shape on granular friction: Results of discrete ele-
ment simulations. Journal of Geophysical Research: Solid
Earth 109(B12) (2004)

22. Hagenmuller,

Chambon, G., Naaim, M.:
P.,
Microstructure-based modeling of
snow mechanics:
a discrete element approach. The Cryosphere 9(5),
1969–1982 (2015). DOI 10.5194/tc-9-1969-2015. URL
https://www.the-cryosphere.net/9/1969/2015/

23. Hopkins, M., Hibler, W.: On the ridging of a thin sheet
of lead ice. Annals of Glaciology 15, 81–86 (1991)
24. Hopkins, M.A.: A discrete element lagrangian sea ice
model. Engineering Computations 21(2/3/4), 409–421
(2004)

25. Johnson, S., Williams, J.R., Cook, B.: Contact resolution
algorithm for an ellipsoid approximation for discrete el-
ement modeling. Engineering Computations 21(2/3/4),
215–234 (2004)

26. Kawamoto, R., And`o, E., Viggiani, G., Andrade, J.E.:
Level set discrete element method for three-dimensional
computations with triaxial case study. Journal of the
Mechanics and Physics of Solids 91, 1–13 (2016)

27. Kawamoto, R., And`o, E., Viggiani, G., Andrade, J.E.:
All you need is shape: Predicting shear banding in sand
with ls-dem. Journal of the Mechanics and Physics of
Solids 111, 375–392 (2018)

28. Latham, J., Lu, Y., Munjiza, A.: A random method for
simulating loose packs of angular particles using tetrahe-
dra. Geotechnique 51(10), 871–879 (2001)

29. Latham, J., Munjiza, A.: The modelling of particle sys-
tems with real shapes. Philosophical Transactions of
the Royal Society of London. Series A: Mathematical,
Physical and Engineering Sciences 362(1822), 1953–1972
(2004)

30. Li, L., Marteau, E., Andrade, J.E.: Capturing the inter-
particle force distribution in granular material using ls-
dem. Granular Matter 21(3), 43 (2019)

31. Lim, K.W., Andrade, J.E.: Granular element method for
three-dimensional discrete element calculations. Interna-
tional Journal for Numerical and Analytical Methods in
Geomechanics 38(2), 167–188 (2014)

32. Madenci, E., Oterkus, S.: Ordinary state-based peridy-
namics for plastic deformation according to von mises
yield criteria with isotropic hardening. Journal of the
Mechanics and Physics of Solids 86, 192–219 (2016)
33. McDowell, G., Harireche, O., Konietzky, H., Brown,
S., Thom, N.: Discrete element modelling of geogrid-
reinforced aggregates. Proceedings of the Institution of
Civil Engineers-Geotechnical Engineering 159(1), 35–48
(2006)

34. Monaghan, J.J.: Smoothed particle hydrodynamics. An-
nual review of astronomy and astrophysics 30(1), 543–
574 (1992)

35. Parikh, N., Boyd, S.: Proximal algorithms. Foundations
and Trends® in Optimization 1(3), 127–239 (2014)
36. Rogula, D.: Introduction to nonlocal theory of material
media. In: Nonlocal theory of material media, pp. 123–
222. Springer (1982)

37. Sh¨afer, J., Dippel, S., Wolf, D.: Force schemes in simula-
tions of granular materials. Journal de physique I 6(1),
5–20 (1996)

38. Shmulevich, I., Asaf, Z., Rubinstein, D.: Interaction be-
tween soil and a wide cutting blade using the discrete
element method. Soil and Tillage Research 97(1), 37–50
(2007)

