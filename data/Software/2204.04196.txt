2
2
0
2

r
p
A
8

]
I

A
.
s
c
[

1
v
6
9
1
4
0
.
4
0
2
2
:
v
i
X
r
a

Eﬃcient Partial Credit Grading
of Proof Blocks Problems

Seth Poulsen, Shubhang Kulkarni, Geoﬀrey Herman, and Matthew West

University of Illinois at Urbana-Champaign, Urbana, IL 61801, USA
sethp3@illinois.edu

Abstract. Proof Blocks is a software tool which allows students to prac-
tice writing mathematical proofs by dragging and dropping lines instead
of writing proofs from scratch. In this paper, we address the problem of
assigning partial credit to students completing Proof Blocks problems.
Because of the large solution space, it is computationally expensive to
calculate the diﬀerence between an incorrect student solution and some
correct solution, restricting the ability to automatically assign students
partial credit. We propose a novel algorithm for ﬁnding the edit distance
from an arbitrary student submission to some correct solution of a Proof
Blocks problem. We benchmark our algorithm on thousands of student
submissions from Fall 2020, showing that our novel algorithm can per-
form over 100 times better than the naive algorithm on real data. Our
new algorithm has further applications in grading Parson’s Problems, as
well as any other kind of homework or exam problem where the solution
space may be modeled as a directed acyclic graph.

Keywords: Mathematical proofs · Automated feedback · Scaﬀolding.

1

Introduction

Traditionally, classes which cover mathematical proofs expect students to
read proofs in a book, watch their instructor write proofs, and then write proofs
on their own. Students often ﬁnd it diﬃcult to jump to writing proofs on their
own, even when they have the required content knowledge [27]. Additionally,
because proofs need to be graded manually, it often takes a while for students
to receive feedback on their work.

Proof Blocks is a software tool that allows students to construct a mathemat-
ical proof by dragging and dropping instructor-provided lines of a proof instead
of writing from scratch (similar to Parson’s Problems [25] for writing code—see
Figure 1 for an example of the user interface of Proof Blocks). This tool scaﬀolds
students’ learning as they transition from reading proofs to writing proofs while
also providing instant machine-graded feedback. To write a Proof Blocks prob-
lem, an instructor speciﬁes lines of a proof and their logical dependencies. The
autograder accepts any ordering of the lines that satisﬁes all logical dependencies
(see [4] for more details on the implementation).

The initial version of Proof Blocks lacked a way for students to receive partial
credit. Receiving partial credit for their work is a signiﬁcant concern for students

 
 
 
 
 
 
2

S. Poulsen et al.

6

1

3

4

5

2

7

Fig. 1. An example of the Proof Blocks student-user interface. The instructor wrote the
problem with 1, 2, 3, 4, 5, 6 as the intended solution, but the Proof Blocks autograder
will also accept any other correct solution as determined by the dependency graph
shown. For example, both 1, 2, 4, 3, 5, 6 and 1, 2, 3, 5, 4, 6 would also be accepted as
correct solutions. Line 7 is a distractor which does not occur in any correct solution.

taking exams in a computerized environment
[6,12]. A simple partial credit
scheme would be based on the location of the ﬁrst incorrect line of the proof.
For example, if the ﬁrst 3 lines of a student’s proof were correct, and the correct
proof had 10 lines, the student would receive 3/10. This doesn’t always work
well. For example, what if a student has the ﬁrst line of the proof wrong, but
every other line was correct? Under this simple partial credit scheme, this answer
would receive no partial credit, despite being almost completely correct.

A better way to assign partial credit is based on the minimum edit distance
from the student submission to some correct solution. This gives a more holistic
measure of the similarity of the student submission to some correct solution.
However, because of the large solution space, it is computationally expensive
to exhaustively check all possible solutions. Our empirical analysis shows that
this na¨ıve approach will not scale to many students needing feedback at the
same time (as in an active learning setting in a large classroom), or to problems

123456Eﬃcient Partial Credit Grading of Proof Blocks Problems

3

of longer than 8 lines. To solve these problems in scaling, we propose a novel
algorithm which calculates the minimum edit distance by directly manipulating
the student submission into a correct solution and runs asymptotically faster
than the na¨ıve solution.

This paper makes the following contributions:

– An eﬃcient algorithm for calculating the minimum edit distance from an
arbitrary sequence to some topological ordering of a directed acyclic graph
– Applications of this algorithm to grading mathematical proofs and other

kinds of homework and test questions

– Mathematical proofs that the algorithm is correct, and has asymptotic com-
plexity that allows it to scale to grading many student submissions at once,
even for large problems

– Benchmarking results on 4,457 student submissions showing that the eﬃcient

algorithm performs over 100 times faster than the na¨ıve approach

2 Related Work
2.1 Software for Learning Mathematical Proofs

Work in intelligent tutors for mathematical proofs goes back to work by
John Anderson and his colleagues on The Geometry Tutor [3,2,16]. More re-
cently, researchers have created tutors for propositional logic, most notably Deep
Thought [23,22] and LogEx [21,20,19,18]. A number of other tools have been
created to help students learn to construct mathematical proofs with the aid
of a computer. Polymorphic Blocks [17] is a novel user interface which presents
propositions as colorful blocks with uniquely shaped connectors. The Incredi-
ble Proof Machine [9] guides students through constructing proofs as graphs.
Jape [8] is a “Proof calculator,” which guides students through the process of
constructing formal proofs in mathematical notation with the help of the com-
puter, but requires the instructor to implement the logics in a custom language.
MathsTiles [7] is a block-based programming interface for constructing proofs
for the Isabelle/HOL proof assistant. Having an open-ended environment where
students could construct arbitrarily complex proofs seems like an advantage, but
user studies showed that students were only successful if they were provided a
small instructor-procured subset of blocks.

Most of these tools cover only small subset of the material typically covered
in a discrete mathematics course, for example, only propositional logic. Those
tools that are more ﬂexible require learning complex theorem prover languages.
In contrast, Proof Blocks enables instructors to easily provide students with
proof questions on any topic.
2.2 Edit-distance Based Grading

To our knowledge, no one has ever used edit-distance based grading as a way
of providing feedback for mathematical proofs, but edit-distance based grading
algorithms have been used in other contexts.

Chandra et al. [10] use edit distance to assign partial credit to incorrect
SQL queries submitted by students, using reference solutions provided by the
instructor. Edit distance based methods, often backed by a database of known

4

S. Poulsen et al.

correct solutions, have also been used to give feedback to students learning to
program in general purpose programming languages [24,13]

One diﬀerence between these and our methods is that in programming con-
texts, the solution space is very large, and so the methods work based on edit
distance to some known correct solution (manually provided by the instructor or
other students). Because we model mathematical proofs as DAGs, we are able to
constrain the solution space to be small enough that our algorithm can feasibly
check the shortest edit to any correct solution.

Alur et al. [1] provide a framework for automatically grading problems where
students must construct a deterministic ﬁnite automata (DFA). They use edit
distance for multiple purposes in their multi-modal grading scheme.

3 Proof Blocks

To write a Proof Blocks problem, an instructor provides the proof lines and
the logical dependencies between the lines of the proof. These logical depen-
dencies form a directed acyclic graph (DAG). The autograder gives the student
points if their submission is a topological sort of the dependency graph. On ex-
ams or during in-class activities, students are often given multiple tries to solve
a problem, so it is critical that they receive their feedback quickly. For additional
details about the instructor and student user interfaces, as well as best practices
for using Proof Blocks questions, see [4]. Prior work has shown that Proof Blocks
are eﬀective test questions, providing about as much information about student
knowledge as written proofs do [5].

4 The Partial Credit Algorithm
4.1 Mathematical Preliminaries
Graph Theory. Let G = (V, E) be a graph. Then a subset of vertices C ⊆ V
is a vertex cover if every edge in E is incident to some vertex in S. The mini-
mum vertex cover (MVC) problem is the task of ﬁnding a vertex cover of min-
imum cardinality. In deﬁning our algorithms, with will assume the availabil-
ity of a few classical algorithms for graphs: AllTopologicalOrderings(G)
to return a set containing all possible topological orderings of a graph G [15],
ExistsPath(G, u, v) returns a boolean value to denote if there is a path from
the node u to the node v in the graph G, and MinimumVertexCover(G) to
return an MVC of a graph G by exhaustive search.

Edit Distance. For our purposes, we use the Least Common Subsequence (LCS)
edit distance, which only allows deletion or addition of items in the sequence
(it does not allow substitution or transposition). This edit distance is a good ﬁt
for our problem because it mimics the aﬀordances of the user interface of Proof
Blocks. Throughout the rest of the paper, we will simply use “edit distance”
to refer to the LCS edit distance. We denote the edit distance between two
sequences S1 and S2 as d(S1, S2).

Formally deﬁned, given two sequences S1, S2, the edit distance is the length
of the shortest possible sequence of operations that transforms S1 into S2,
where the operations are: (1) Deletion of element si: changes the sequence

Eﬃcient Partial Credit Grading of Proof Blocks Problems

5

s1, s2, ...si−1, si, si+1, ...sn to the sequence s1, s2, ...si−1, si+1, ...sn. (2) Insertion
of element t after location i: changes the sequence s1, s2, ...si, si+1, ...sn to the
sequence s1, s2, ...si, t, si+1, ...sn. We assume the ability to compute the edit dis-
tance between two sequences in quadratic time using the traditional dynamic
programming method [26]. We also identify a topological ordering O of a graph
G with a sequence of nodes so that we can discuss the edit distance between a
topological ordering and some other sequence d(S, O).
4.2 Problem Deﬁnition

Before deﬁning our grading algorithms rigorously, it will ﬁrst help to set up
some formalism about proof blocks problems. A proof blocks problem P = (C, G)
is a set of proof lines C together with a directed acyclic graph (DAG) G = (V, E),
which deﬁnes the logical structure of the proof. Both the proof lines and the
graph are provided by the instructor who writes the question (see [4] for more
details on question authoring). The set of vertices V of the graph G is a subset
of the set of proof lines C. Proof lines which are in C but not in V are proof
lines which are not in any correct solution, and we call these distractors, a term
which we borrow from the literature on multiple-choice questions. A submission
S = s1, s2, ...sn is a sequence of distinct proof lines, usually constructed by a
student who is attempting to solve a proof blocks problem. If a submission S is
a topological ordering of the graph G, we say that S is a solution to the proof
blocks problem P .

To be precise about the partial credit we want to assign, if a student submits
a submission S to a proof blocks problem P = (C, G), we want to assign partial
credit with the following properties: (1) students get 100% only if the submission
is a solution (2) partial credit declines linearly with the number of edits needed
to convert the submission into a solution (3) is is guaranteed to be in the range
0 − 100. To satisfy these desirable properties, we assign partial credit as follows:
score = 100 × max(0,|V |−d∗)
, where d∗ is the minimum edit distance from the
student submission to some correct solution of P , that is: d∗ = min{d(S, O) | O ∈
AllTopologicalOrderings(G)} This means, for example, that if a student’s
solution is 2 deletions and 1 insertion (3 edits) away from a correct solution,
and the correct solution is 10 lines long, the student will recieve 70%. If the
edit distance is greater than the length of the solution, we simply assign 0, as
assigning negative points does not make sense.
4.3 Baseline Algorithm

|V |

The most straightforward approach to calculating partial credit as we deﬁne
it is to iterate over all topological orderings of G and for each on, calculate
the edit distance to the student submission S. We formalize this approach as
Algorithm 1. While this is eﬀective, this algorithm is computationally expensive.

Theorem 1. The time complexity of Algorithm 1 is O(m · n · n!) in the worst
case, where n is the size of G and m is the length of the student submission after
distractors are thrown out.

Proof. The algorithm explicitly enumerates all O(n!) topological orderings of
G. For each ordering, the algorithm forms the associated proof sequence, and

6

S. Poulsen et al.

computes the edit distance to the student submission, which requires quadratic
time.

S The student submission being graded
P The proof blocks problem written by the instructor

Algorithm 1 Baseline Algorithm
1: Input
2:
3:
4: Output
5:
6: procedure GetMinimumEditDistance(S = s1, s2, ...sn, P = (C, G))

n The minimum number of edits needed to transform S into a solution

Brute force calculation of d∗:

return min{d(S, O) | O ∈ AllTopologicalOrderings(G)}

7:
8: end procedure

4.4 Optimized (MVC-based) implementation of Partial Credit

Algorithm

We now present a faster algorithm for calculating the proof blocks partial
credit, which operates by reducing the problem to the minimum vertex cover
(MVC) problem over a subset of the student’s submission.

Rather than iterate over all topological orderings, this algorithm works by
directly manipulating the student’s submission until it becomes a correct solu-
tion. In order to do this, we deﬁne a few more terms. We call a pair of proof
lines (si, sj) in a submission a problematic pair if line sj comes before line si in
the student submission, but there is a path from si to sj in G, meaning that sj
must come after si in any correct solution.

We deﬁne the problematic subgraph to be the graph where the nodes are the
set of all proof lines in a student submission that appear in some problematic
pair, and the edges are the problematic pairs. We can then use the problem-
atic subgraph to guide which proof lines need to be deleted from the student
submission, and then we know that a simple series of insertions will give us a
topological ordering. The full approach is shown in Algorithm 2, and the proof
of Theorem 2 proves that this algorithm is correct.
4.5 Worked example of Algorithm 2

For further clarity, we will now walk through a full example of executing

Algorithm 2 on a student submission.

Take, for example, the submission shown in Figure 1. In terms of the proof
line labels, this submission is S = 1, 3, 4, 5, 2, 7. In this case, proof line 2 oc-
curs after proof lines 3, 4, and 5, but because of the structure of the DAG,
we know that it must come before all of those lines in any correct solution.
Therefore, the problematic subgraph in this case is problematicSubgraph =
({2, 3, 4, 5}, {(2, 3), (2, 4), (2, 5)}). The minimum vertex cover here is {2}, be-
cause that is the smallest set which contains at least one endpoint of each edge
in the graph. Now we know that the number of deletions needed is 1 + 1 = 2
(vertex cover of size one, plus one distractor line picked, see Algorithm 2 line
11)), and the number of insertions needed is 2 (line 2 must be reinserted in the
correct position after being deleted, and line 6 must be inserted). This gives

Eﬃcient Partial Credit Grading of Proof Blocks Problems

7

S The student submission being graded
P The proof blocks problem written by the instructor

Algorithm 2 Novel Algorithm using the MVC
1: Input
2:
3:
4: Output
5:
6: procedure GetMinimumEditDistance(S = s1, s2, ...sn, P = (C, G))

n The minimum number of edits needed to transform S into a solution

Construct the problematic subgraph:

7:
8:
9:

E0 ← {(si, sj) | i > j and ExistsPath(G, si, sj)}
V0 ← {si | there exists j such that (si, sj) ∈ E0 or (sj, si) ∈ E0}
problematicSubgraph ← (V0, E0)

Find insertions and deletions needed:

mvcSize ← |MinimumVertexCover(problematicSubgraph)|
deletionsNeeded ← |{si ∈ S | si /∈ G}| + mvcSize
insertionsNeeded ← |V |− (n − deletionsNeeded)
return deletionsNeeded + insertionsNeeded

10:
11:
12:
13:
14: end procedure

us a least edit distance (d∗) of 4, and so the partial credit assigned would be
score = 100 × max(0,|V |−d∗)
4.6 Proving the Correctness of Algorithm 2

= 100 × 6−4

6 ≈ 33%.

|V |

First we’ll show that the Algorithm constructs a feasible solution, and then

we will show that it is minimal.

Lemma 1 (Feasability). Given a a submission S = s1, s2, ...sn, there exists
an edit E from S to some solution of P such that the length of E is the value
returned by Algorithm 2.

Proof. Given the MVC computed on line 10 of Algorithm 2, delete all proof
lines in the MVC from S, as well as all distractors in S, and call this new
submission S(cid:48). Now S(cid:48) is a submission such that it contains no distractors, and
its problematic subgraph is empty.

Now, for all i where 1 ≤ i < n, add the edge (si, si+1) to the graph G, and
call this new graph G(cid:48). Because there are no problematic pairs in S(cid:48), we know
that adding these new edges does not introduce any new cycles, so G(cid:48) is a DAG.
Now, a topological ordering O of the graph G(cid:48) will be a topological ordering of G
with the added constraint that all proof lines which appeared in the submission
S(cid:48) are still in the same order with respect to one another. Then since there are
no distractors in S(cid:48), S(cid:48) will be a subsequence of O. Thus, we can construct O
simply by adding proof lines to S.

The length of this edit sequence is exactly what Algorithm 2 is computing.

Lemma 2 (Minimality). Let E(cid:48) be any edit from the submission S to some
correct solution of P . Then the length of E(cid:48) is greater than or equal to the
output of Algorithm 2.

8

S. Poulsen et al.

Proof. Let E be the edit sequence constructed in Lemma 1. We will show that
the number of deletions and the number of insertions in E(cid:48) is greater than or
equal to the number of deletions and insertions in E.

Because we are using least common subsequence edit sequence, if there is
any problematic pair (si, sj) in the student submission, one of si and sj must be
deleted from the submission to reach a solution. Because there is no substitution
or transposition allowed, and because each proof line may only occur once in a
sequence, there is no other way for the student submission to be transformed
into some correct solution unless si or sj is deleted and then re-inserted in a
diﬀerent position.

Therefore, the set of proof lines deleted in the edit sequence E(cid:48) must be a
vertex cover of the problematic subgraph related to S In E, we delete only the
proof lines in the minimum vertex cover of the problematic subgraph. In both
cases, all distractors must be deleted. So, the number of deletions in E(cid:48) is greater
than or equal to the number of deletions in E.

The number of insertions in any edit sequence must be the number of dele-
tions, plus the diﬀerence between the length of the submission and the size of
the graph, so that the ﬁnal solution will be the correct length. Then since the
number of deletions in E(cid:48) is at least as many as there are in E, the number of
insertions in E(cid:48) is also at least as many as the number of insertions in E.

Combining what we have shown about insertions and deletions, we have that

E(cid:48) is at least as long of an edit sequence as E.

Combining Lemma 1 and 2 gives us the following theorem:

Theorem 2. Algorithm 2 computes d∗—the minimum edit distance from the
submission S to some topological ordering of G.

Next we will treat the computational complexity of Algorithm 2.

Theorem 3. The time complexity of Algorithm 2 is O(m2 · 2m), where m is the
length of the student submission after distractors are thrown out.

Proof. Constructing the problematic subgraph requires using a breadth ﬁrst
search to check for the existence of a path between each proof line and all of
the proof lines which precede it in the submission S, which can be completed in
polynomial time. Na¨ıvely computing the MVC of the problematic subgraph has
time complexity O(m2 · 2m). Asymptotically, the calculation of the MVC will
dominate the calculation of the problematic subgraph, giving an overall time
complexity of O(m2 · 2m).

Remark 1. The complexity of Algorithm 2 is due to the brute force computation
of the MVC, however, there exists a a O(1.2738k + kn)-time ﬁxed parameter
tractable (FPT) algorithm where k is the size of the minimum vertex cover
[11]. While we focus in this paper on the brute force MVC method since it
is suﬃcient for our needs, using the FPT method may give further speedup,
especially considering the often small size of k in real use cases (see Table 1).

Eﬃcient Partial Credit Grading of Proof Blocks Problems

9

5 Benchmarking Algorithms on Student Data
5.1 Data Collection

We collected data from homework, practice tests, and exams from the Dis-
crete Mathematics course in the Computer Science department at Large Re-
search University during the Fall 2020 semester. During this semester all activ-
ity was held online due to the COVID-19 pandemic. In total, 393 signed up for
the class, from which we collected 9,610 submissions to Proof Blocks problems.
Proof Blocks questions were on many mathematical topics including Number the-
ory, Cardinality, Functions, Graphs, and Algorithm analysis. Some Proof Blocks
problems were edited during the semester in such a way that altered the struc-
ture of the problem. In these cases, we simply discarded submissions to altered
versions of the question. We also discarded all submissions which were correct
solutions, as we are only concerned in this paper with partial credit grading. This
left us with a total of 4,457 submissions for our benchmarking data set. Some
questions only appeared on optional practice exams, while others appeared on
exams. Also, more diﬃcult questions received more incorrect submissions. This
explains the large discrepency between the number of submissions to certain
questions seen in Table 1.
5.2 Benchmarking Details

For Algorithm 1, we used the NetworkX Python library [14] to generate
all topological orderings of G and used the standard dynamic programming
algorithm for LCS edit distance to calculate the edit distance between each
submission and each topological ordering.

We implemented Algorithm 2 in Python, again using NetworkX to store the
graph. Though faster implementations of the MVC algorithm exists, we simply
used the na¨ıve method of iterating over all subsets of the graph, starting from
the smallest to the largest, until ﬁnding one which is a vertex cover. Benchmarks
were run on an Intel i5-8530U CPU with 16GB of RAM.
5.3 Results

Table 1 shows the benchmarks and statistical comparisons of our novel MVC-
based algorithm (Algorithm 2) and the baseline algorithm (Algorithm 1) Al-
gorithm 1 performed about 2 times as fast as Algorithm 2 when there was one
solution—more trivial cases when both Algorithms took less than a third of a
millisecond. Algorithm 2 performed about 5 to 200 times faster than Algorithm
1 when there were 20 or more possible solutions. In Figure 2 (A), we show that
the run time of Algorithm 1 scales exponentially with the number of topolog-
ical orderings of the proof graph, while in (B) we show that the run time of
Algorithm 2 scales exponentially with the length of the proof. This is a critical
diﬀerence, because the number of topological orderings of a DAG can be n! for
a graph with n nodes. Thus, a relatively short Proof Blocks problem could have
a very long grading time with Algorithm 1, while with Algorithm 2, we know
that we can guarantee a tight bound on grading time given the problem size.

This shows that Algorithm 2 is far superior in performance. The mean time
of 92 milliseconds for the most complex Proof Blocks problem under Algorithm
1 may not seem computationally expensive, but it does not scale to having

10

S. Poulsen et al.

( m ean)
( m ean)
Size
Alg. Tim e
( m ean)
Prob. Subgraph
Sub m ission
Size
B aseline

size

V C

Solutions
Sub m issions
Distractors

4
0
0
4
5
7
0
0
5
0
0
0
0

291
104
551
19
674
488
28
529
376
13
623
145
616

4.0
5.0
5.8
5.0
6.2
6.5
9.0
8.9
8.5
8.8
9.8
8.3
9.4

0.5
2.1
3.7
0.2
0.1
0.0
3.2
3.5
1.1
2.2
4.6
3.0
3.1

M
0.3
1.0
2.3
0.1
0.0
0.0
1.5
1.6
0.4
1.0
1.8
1.2
1.3

0.1 (0.03)
0.12 (0.05)
0.14 (0.04)
0.25 (0.07)
0.41 (0.11)
1.46 (0.49)
2.23 (0.31)
2.22 (0.53)
3.03 (0.97)
3.49 (0.46)
2.36 (0.42)
8.92 (2.38)
92.04 (20.78)

m s)

( m ean

Alg. Tim e

V C

M
0.16 (0.04)
0.21 (0.05)
0.31 (0.09)
0.26 (0.09)
0.25 (0.06)
0.26 (0.07)
0.47 (0.09)
0.47 (0.10)
0.41 (0.12)
0.44 (0.08)
0.57 (0.15)
0.78 (0.64)
0.47 (0.13)

Factor

m s)

( m ean

Speedup

0.6∗
0.6∗
0.5∗
1.0
1.6∗
5.6∗
4.7∗
4.7∗
7.4∗
8.0∗
4.1∗
11.4∗
194.9∗

N u m ber
Proof Length
Q uestion
P ossible

1
2
3
4
5
6
7
8
9
10
11
12
13

4
5
6
6
6
7
9
9
9
9
10
10
10

1
1
1
3
6
20
24
24
35
42
21
96
1100

Table 1. Performance of baseline vs. MVC algorithm. (*) denotes a statistically
signiﬁcant diﬀerence in algorithm time, p < 0.001 in all cases. For all problems with
more than 3 possible solutions, the MVC algorithm was signiﬁcantly faster, with a
speedup of up to almost 200 times. This speedup gap will continue to grow as instructors
write more complex problems.

hundreds of students working on an active learning activity, or taking exams at
the same time. Furthermore, this grading time could easily be 10 or even 100
times longer per question if the DAG for the question was more complex by only
a couple of nodes or edges.
6 Conclusions and Future Work

In this paper, we have presented a novel algorithm for assigning partial credit.
This algorithm can also be used to grade Parson’s Problems, or any other type
of problem where the solution space can be modeled as a DAG. We showed with
student data that our algorithm far outperforms the baseline algorithm, allowing
us to give students their partial credit grades in real time as they work through
exams and homework. Starting in the Spring 2022 semester, this will beneﬁt
thousands of students immediately, and many more in future semesters.
References
1. Alur, R., D’Antoni, L., Gulwani, S., Kini, D., Viswanathan, M.: Automated grading
of dfa constructions. In: Twenty-Third International Joint Conference on Artiﬁcial
Intelligence (2013)

2. Anderson, J.R., Corbett, A.T., Koedinger, K.R., Pelletier, R.: Cognitive tutors:

Lessons learned. The journal of the learning sciences 4(2), 167–207 (1995)

Eﬃcient Partial Credit Grading of Proof Blocks Problems

11

Fig. 2. Comparison of grading time for the two grading algorithms. Subplot (A) is a
log-log plot showing that we see that the baseline algorithm scales with the number of
possible solutions, Subplot (B) is a log-linear plot showing that the MVC Algorithm
runtime scales with the length of the proof. This is a critical diﬀerence, because the
number of topological orderings of a DAG can be n! for a graph with n nodes.

3. Anderson, J., Boyle, C., Yost, G.: The geometry tutor, proc. of 9th internation

joint conference on artiﬁcial intelligence (1985)

4. Anonymous: Paper about proof blocks interface, usage, and implementation (2021)
5. Anonymous: Paper about proof blocks problems as exam questions (2021)
6. Apostolou,
testing
about
ing.
Accounting
https://doi.org/https://doi.org/10.1016/j.jaccedu.2010.02.003,
//www.sciencedirect.com/science/article/pii/S0748575110000059

introductory managerial
59–70

perceptions
account-
(2009).
https:

B.,
computerized

Blue, M.A.,

Education

Student

Journal

Daigle,

27(2),

R.J.:

in

of

7. Billingsley, W., Robinson, P.: Student proof exercises using mathstiles and is-
abelle/hol in an intelligent book. Journal of Automated Reasoning 39(2), 181–218
(2007)

8. Bornat, R., Sufrin, B.: Jape: A calculator for animating proof-on-paper. In: Inter-

national Conference on Automated Deduction. pp. 412–415. Springer (1997)

9. Breitner, J.: Visual theorem proving with the incredible proof machine. In: Inter-
national Conference on Interactive Theorem Proving. pp. 123–139. Springer (2016)
10. Chandra, B., Banerjee, A., Hazra, U., Joseph, M., Sudarshan, S.: Au-
2019 IEEE 35th International
2019).

tomated Grading of SQL Queries.
Conference
https://doi.org/10.1109/ICDE.2019.00159, iSSN: 2375-026X
upper
I.A., Xia, G.:
Science 411(40),
cover. Theoretical Computer

11. Chen,
tex
https://doi.org/https://doi.org/10.1016/j.tcs.2010.06.026,
sciencedirect.com/science/article/pii/S0304397510003609

ver-
(2010).
https://www.

on Data Engineering

bounds
3736–3756

(ICDE). pp.

J., Kanj,

1630–1633

Improved

(Apr

for

In:

12. Darrah, M., Fuller, E., Miller, D.: A comparative study of partial credit as-
sessment and computer-based testing for mathematics. Journal of Computers
in Mathematics and Science Teaching 29(4), 373–398 (October 2010), https:
//www.learntechlib.org/p/34058

13. Gulwani, S., Radiˇcek, I., Zuleger, F.: Automated Clustering and Program Repair

for Introductory Programming Assignments p. 16 (2018)

lllllllllllll110100100010000Possible Solutions0.11101001000A: Grading Time vs. Possible SolutionslllllllllllllBaseline AlgorithmMVC Algorithm (this paper)lllllllllllll4681012Proof Length0.11101001000B: Grading Time vs. Proof LengthlllllllllllllGrading Time (milliseconds)12

S. Poulsen et al.

14. Hagberg, A.A., Schult, D.A., Swart, P.J.: Exploring network structure, dynamics,
and function using networkx. In: Varoquaux, G., Vaught, T., Millman, J. (eds.)
Proceedings of the 7th Python in Science Conference. pp. 11 – 15. Pasadena, CA
USA (2008)

15. Knuth, D.E., Szwarcﬁter, J.L.: A structured program to generate all topological

sorting arrangements. Information Processing Letters 2(6), 153–157 (1974)

16. Koedinger, K.R., Anderson, J.R.: Abstract planning and perceptual chunks: Ele-

ments of expertise in geometry. Cognitive Science 14(4), 511–550 (1990)

17. Lerner, S., Foster, S.R., Griswold, W.G.: Polymorphic blocks: Formalism-inspired
ui for structured connectors. In: Proceedings of the 33rd Annual ACM Conference
on Human Factors in Computing Systems. pp. 3063–3072 (2015)

18. Lodder, J., Heeren, B., Jeuring, J.: Proving the equivalence of two logical formulae

with LogEx p. 3

19. Lodder, J., Heeren, B., Jeuring, J.: A pilot study of the use of LogEx, lessons
learned. arXiv:1507.03671 [cs] (Jul 2015), http://arxiv.org/abs/1507.03671,
arXiv: 1507.03671

20. Lodder, J., Heeren, B., Jeuring, J.: A comparison of elaborated and restricted feed-
back in LogEx, a tool for teaching rewriting logical formulae. Journal of Computer
Assisted Learning 35(5), 620–632 (2019). https://doi.org/10.1111/jcal.12365,
eprint:
https://onlinelibrary.wiley.com/doi/abs/10.1111/jcal.12365,
https://onlinelibrary.wiley.com/doi/pdf/10.1111/jcal.12365

21. Lodder, J., Heeren, B., Jeuring, J.: Providing Hints, Next Steps and Feedback in
a Tutoring System for Structural Induction. Electronic Proceedings in Theoretical
Computer Science 313, 17–34 (Feb 2020). https://doi.org/10.4204/EPTCS.313.2,
http://arxiv.org/abs/2002.12552, arXiv: 2002.12552

22. Mostafavi, B., Barnes, T.: Evolution of an Intelligent Deductive Logic Tutor
Using Data-Driven Elements. International Journal of Artiﬁcial Intelligence in
Education 27(1), 5–36 (Mar 2017). https://doi.org/10.1007/s40593-016-0112-1,
http://link.springer.com/10.1007/s40593-016-0112-1

23. Mostafavi, B., Zhou, G., Lynch, C., Chi, M., Barnes, T.: Data-Driven Worked
Examples Improve Retention and Completion in a Logic Tutor. In: Conati, C.,
Heﬀernan, N., Mitrovic, A., Verdejo, M.F. (eds.) Artiﬁcial Intelligence in Edu-
cation, vol. 9112, pp. 726–729. Springer International Publishing, Cham (2015),
http://link.springer.com/10.1007/978-3-319-19773-9_102, series Title: Lec-
ture Notes in Computer Science

24. Paassen, B., Hammer, B., Price, T.W., Barnes, T., Gross, S., Pinkwart,
N.: The Continuous Hint Factory - Providing Hints in Vast and Sparsely
Populated Edit Distance Spaces. Journal of Educational Data Mining
10(1), 1–35 (Jun 2018). https://doi.org/10.5281/zenodo.3554697, https://jedm.
educationaldatamining.org, number: 1

25. Parsons, D., Haden, P.: Parson’s programming puzzles: A fun and eﬀective learning
tool for ﬁrst programming courses. In: Proceedings of the 8th Australasian Con-
ference on Computing Education - Volume 52. p. 157–163. ACE ’06, Australian
Computer Society, Inc., AUS (2006)

26. Wagner, R.A., Fischer, M.J.: The string-to-string correction problem. Journal of

the ACM (JACM) 21(1), 168–173 (1974)

27. Weber, K.: Student diﬃculty in constructing proofs: The need for strate-
in Mathematics 48(1), 101–119 (Oct
gic knowledge. Educational Studies
2001). https://doi.org/10.1023/A:1015535614355, https://doi.org/10.1023/A:
1015535614355

