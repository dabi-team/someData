SensorStream: An XES Extension for Enriching
Event Logs with IoT-Sensor Data

Joscha Gr¨uger?1,2

, Lukas Malburg?1,2

, J¨urgen Mangler?3

, Yannis

Bertrand4

, Stefanie Rinderle-Ma3

, Ralph Bergmann1,2

, and Estefan´ıa

Serral Asensio4

2
2
0
2

n
u
J

2
2

]
E
S
.
s
c
[

1
v
2
9
3
1
1
.
6
0
2
2
:
v
i
X
r
a

1 Artiﬁcial Intelligence and Intelligent Information Systems,
University of Trier, 54296 Trier, Germany
{grueger,malburgl,bergmann}@uni-trier.de
http://www.wi2.uni-trier.de

2 German Research Center for Artiﬁcial Intelligence (DFKI)
Branch University of Trier, 54296 Trier, Germany
{firstname.lastname}@dfki.de

3 Department of Informatics, Technical University of Munich,
85748 Garching, Germany
{firstname.lastname}@tum.de

4 Research Centre for Information Systems Engineering (LIRIS), KU Leuven
Warmoesberg 26, 1000 Brussels, Belgium
{firstname.lastname}@kuleuven.be

Abstract Process management and process orchestration/execution are
currently hot topics; prevalent trends such as automation and Indus-
try 4.0 require solutions which allow domain-experts to easily model
and execute processes in various domains, including manufacturing and
health-care. These domains, in turn, rely on a tight integration between
hardware and software, i. e., via the Internet of Things (IoT). While pro-
cess execution is about actuation, i. e., actively triggering actions and
awaiting their completion, accompanying IoT sensors monitor humans
and the environment. These sensors produce large amounts of procedu-
ral, discrete, and continuous data streams, that hold the key to under-
standing the quality of process subjects (e. g., produced parts), outcome
(e. g., quantity and quality), and error causes. Processes constantly evolve
in conjunction with their IoT environment. This requires joint storage of
data generated by processes, with data generated by the IoT sensors is
therefore needed. In this paper, we present an extension of the process
log standard format XES, namely SensorStream. SensorStream enables
to connect IoT data to process events, as well as a set of semantic anno-
tations to describe the scenario and environment during data collection.
This allows to preserve the full context required for data-analysis, so
that logs can be analyzed even when scenarios or hardware artifacts are
rapidly changing. Through additional semantic annotations, we envision

? Main authors in alphabetical order; All main authors contributed equally to this work.

 
 
 
 
 
 
2

J. Gr¨uger et al.

the XES extension log format to be a solid based for the creation of a
(semi-)automatic analysis pipeline, which can support domain experts
by automatically providing data visualization, or even process insights.

Keywords: Process Management · Industry 4.0 · IoT Data · Process
Mining · XES

1

Introduction

In IoT environments where business processes are executed, a large amount of
procedural data is generated. The use of these can enable the development of
innovative applications in process control [23,28,31], process conformance check-
ing [11, 35, 36], or process enhancement [29], among others. Here, in particular,
process mining techniques could be applied [23, 31, 32, 38]. In contrast to many
other domains, in the IoT domain, the context in which certain operations are
performed is a particularly important factor [7].

One domain where process orchestration/execution [24] and IoT meet is the
manufacturing domain [25,29]. Here context is mainly derived from sensors that
monitor the execution environment and resources during execution [4, 13, 31,
33]. In domains as manufacturing, process orchestration/execution [23–25,29,31]
often relies on Internet of Things (IoT) technology. While IoT actuators can be
used to automate process tasks, IoT sensors and tags can be used to closely
monitor the execution environment and involved resources [4, 13, 31, 33]. IoT
technology can therefore capture the context in which certain process tasks are
performed, which is a particularly important factor for techniques such as process
mining [7,32] to better understand and analyze the manufacturing processes. As
such, besides the procedural data generated from the process execution, the
data captured by IoT should also be considered an integral part of the process
execution logs, i.e., the event logs.

Both the procedural nature of sensor logs and the tight integration of these
with the execution processes and the executing resources [12], makes sensor
data an integral part of procedural application scenarios in IoT [7,31,32]. In this
context,

From a process log perspective, IoT data can be assigned to diﬀerent levels
depending on its relation with the process and on the nature of the data collected
(static vs dynamic, collection frequency, relation to the process, etc.). Depending
on logging, knowledge about the executed processes and process models, and
physical aspects such as the placement of sensors or their orientation, sensors
can be directly assigned to individual events or traces or neither. In addition,
IoT data is often ad hoc, highly variable, contains data quality issues, and has
varying degrees of semantiﬁcation [5, 13].

Thus, IoT event logs have special requirements on the data storage. Each ob-
servation of sensors must be assignable to events, traces, or neither, and diﬀerent
degrees of semantiﬁcation should be expressible with the inclusion of proper on-
tologies. However, the defacto standard for storing event logs in process mining,

SensorStream XES Extension

3

XES (eXtensible Event Stream) [15], focuses in particular on the control ﬂow
perspective, not being able meet complex requirements on the data perspec-
tive [7]. In the absence of uniﬁed, expressive standards for IoT-enriched event
logs, both industry and academia are developing their own proprietary formats.
This results in many highly customized data formats and procedural applications
for individual use cases that are not interoperable with each other.

In this paper, we present a new XES extension for uniform storage of IoT-
enriched event logs. The extension complements XES in a way that extensive
IoT sensor data can be stored on event, trace, or standalone. This extension is
based on widely used ontologies, which enable the uniﬁed semantic enrichment of
event logs based on a common vocabulary. The XES extension is intended to lay
a foundation for process mining in IoT environments and to promote reusability
and interoperability.

The structure of the paper is as follows: In Sect. 2, we describe the theoretical
basis for process mining in IoT and the related literature. Section 3 introduces
the proposed SensorStream XES extension to specify IoT-enriched event logs.
Section 4 describes the annotation meta-model for using ontological information.
In Sect. 5, we present an application scenario for IoT-enriched event logs in
smart manufacturing. Section 6 summarizes the results, lists advantages and
limitations, and gives an outlook for future research directions.

2 Foundations and Related Work

The recent developments and technologies used in the Industrial Internet of
Things (IIoT) [33] demand a more intelligent and interconnected process-based
control of IoT devices [31]. For a deeper integration with IoT environments
in a process-oriented way, Business Process Management (BPM) methods can
be applied for control and analysis purposes [4]. The beneﬁt of it is that BPM
could proﬁt from the huge variety of IoT sensor data that can be used to improve
analysis methods. In the following three subsections, ﬁrstly (Sect.2.1) we describe
how process mining techniques can be applied to IoT environments, including
the description of typical application scenarios. Secondly (Sect. 2.2), we describe
how ontologies are used in the IoT domain do improve the overall interoperability
between systems and improve the understandability of IoT data. Thirdly (Sect.
2.3), we describe related approaches that tackle data analysis problems, and
provide data sets, which are related to the challenges and solutions described in
this paper.

2.1 Process Mining for IoT Environments

One way to analyze IoT sensor data and corresponding event log data is process
mining. Process mining describes three analysis tasks. The most common is (i)
Process Discovery. Discovery techniques take an event log and produce a process
model from it [1, 6]. The second task is (ii) Conformance Checking, which is
used to validate the conformance of real process instances to a given a-priori

4

J. Gr¨uger et al.

model. The last analysis task is (iii) Enhancement that uses an event log and
the associated process model to identify bottlenecks and, thus, to improve the
process accordingly [1]. Tasks i-iii are based on an event log as input. An event
log can contain one or more traces. Each trace represents a process instance. A
trace, in turn, consists of the sequence of executed activities, each represented
by an event. Furthermore, event logs can store additional attributes, such as
timestamps, resources, and data elements [2]. Many proposals have been made
in the past for storing process logs. MXML as a simple XML format for audit
and trails in process ware information systems [9]. XES, the current standard
event log model, is also based on XML and widely used in both industrial and
academic contexts [10, 15].

The XES metamodel can be represented in XML. An XES attribute consist
of (a) a data type represented by the qualiﬁed name of the XML element, (b)
a key to denote the type of attribute (unique within its container), and (c) a
value (see Listing 1). XES describes six types of attributes: string, date, int,
ﬂoat, boolean and id which have a value, as well as two additional attributes,
container and list, which can hold arbitrary child attributes. All attributes can
also be nested (even inside non-container and non-list attributes) [15].

Listing 1. Sample XES (XML serialization) with Trace, Events and Attributes.

1 <l o g x e s . v e r s i o n =”1.0”
2
3
4
5 <e x t e n s i o n name=”Concept ” p r e f i x =” c o n c e p t ” u r i =”h t t p : / /www. xes−

xmlns=”h t t p : / /www. xes−s t a n d a r d . o r g ”
x e s . c r e a t o r =”c p e e . o r g ”
x e s . f e a t u r e s =”n e s t e d −a t t r i b u t e s ”>

,→ s t a n d a r d . o r g / c o n c e p t . x e s e x t ”/>

6 <e x t e n s i o n name=” L i f e c y c l e ” p r e f i x =” l i f e c y c l e ” u r i =”h t t p : / /www. xes−

,→ s t a n d a r d . o r g / l i f e c y c l e . x e s e x t ”/>

7 <e x t e n s i o n name=” I d e n t i t y ” p r e f i x =” i d e n t i f i e r ” u r i =”h t t p : / /www. xes−

,→ s t a n d a r d . o r g / i d e n t i t y . x e s e x t ”/>

8 <e x t e n s i o n name=”Time ” p r e f i x =”t i m e ” u r i =”h t t p : / /www. xes−s t a n d a r d .

< s t r i n g key=” c o n c e p t : name” v a l u e =”name”/>
< s t r i n g key=” l i f e c y c l e : t r a n s i t i o n ” v a l u e =” s t a r t ”/>
<d a t e key=”t i m e : timestamp ” v a l u e =”1970−01−01T00 : 0 0 : 0 0 . 0 0 0 + 0 0 : 0 0 ” / >

,→ o r g / t i m e . x e s e x t ”/>
s c o p e =” t r a c e ”>

s c o p e =” e v e n t ”>

< s t r i n g key=” c o n c e p t : name” v a l u e =”name”/>

9 <g l o b a l
10
11 </ g l o b a l >
12 <g l o b a l
13
14
15
16 </ g l o b a l >
17 < s t r i n g key=” l i f e c y c l e : model ” v a l u e =” s t a n d a r d ”/>
18 < s t r i n g key=” c r e a t o r ” v a l u e =”c p e e . o r g ”/>
19 < s t r i n g key=” l i b r a r y ” v a l u e =”c p e e . o r g ”/>
20 <t r a c e >
21
22
23
24
25

< s t r i n g key=” c o n c e p t : name” v a l u e =” P r o c e s s 1”/>
<e v e n t >

< s t r i n g key=” c o n c e p t : name” v a l u e =”Task 1”/>
< s t r i n g key=” l i f e c y c l e : t r a n s i t i o n ” v a l u e =” s t a r t ”/>
<d a t e key=”t i m e : timestamp ” v a l u e =”1970−01−01T00

,→ : 0 0 : 0 0 . 0 0 0 + 0 0 : 0 0 ” / >

< s t r i n g key=”name” v a l u e =”J u e r g e n ”/>

26
27
28
29
30
31

32
33

</e v e n t >
<e v e n t >

/ e v e n t >

< s t r i n g key=” c o n c e p t : name” v a l u e =”Task 2”/>
< s t r i n g key=” l i f e c y c l e : t r a n s i t i o n ” v a l u e =” s t a r t ”/>
<d a t e key=”t i m e : timestamp ” v a l u e =”1970−01−01T00

,→ : 0 0 : 0 0 . 0 0 0 + 0 0 : 0 0 ” / >

< s t r i n g key=”name” v a l u e =”J u e r g e n ”/>

SensorStream XES Extension

5

34 </ t r a c e >
35 </l o g >

Since the requirements for event logs diﬀer depending on the application
and domain, XES can be extended via so-called extensions. Standard extensions
include the concept extension, which speciﬁes a generally understood name for
events, traces, or the log. In addition, the lifecycle extension can be used to spec-
ify diﬀerent stages in the lifecycle of events and the time extension standardizes
the speciﬁcation of event timestamps [15]. XES also allows the deﬁnition of new
data attribute types through the notion of extensions, thereby increasing the
ﬂexibility of the model.

Several implementations of the standard coexist, the main one being OpenXES

5, which is used by many event logs described in the literature.

Recently, the uptake of new technologies and the gain in maturity of the pro-
cess mining ﬁeld have increased the urge to create alternative event log models.
Multiple propositions that relax some assumptions of XES and allow for more
ﬂexibility in event data storage have been presented (e. g., [14,30]). Among them,
a standard for Object-Centric Event Logs (OCEL) [14] has been developed to
be more suitable for storing event data extracted from relational databases and
is widely considered as the main challenger of XES today. OCEL replaces the
strict notion of case with the concept of object, which generalizes it by allowing
one event to be linked with multiple objects instead of a single case. This re-
moves the necessity to ”ﬂatten” the event log by picking one case notion from the
several potential case notions that often coexist in real-life processes. A second
noticeable diﬀerence with XES is the explicit inclusion of the concept of activity
in OCEL, which is absent in XES.

2.2 Ontologies for IoT-Environments

To represent knowledge about the IoT environment and also about the data
that is produced in it, several ontologies have been proposed. The focus in these
IoT ontologies has shifted from trying to be as complete as possible (e. g., the
Semantic Sensor Network (SSN) ontology [8] or the CREMA Data Model, Core
module (CDM-Core) [27]) to be simpler and more practical in real world appli-
cations (e. g., the IoT-Lite [5] ontology). This also follows the industry need for
analytics and real-time processing techniques, among which we can ﬁnd process
mining techniques. One such ontology is the Sensors, Observations, Samples,
and Actuators (SOSA) ontology [17]. SOSA is a compact version of the SSN
ontology and describes the relationships between sensors and actuators as well
as their measured observations in IoT data. By using this ontology, it is pos-
sible to represent, for example, a relationship between a machine resource and
the sensors that monitor its condition. A further ontology especially tailored for
streaming data is the IoT-Stream ontology [13]. It is a more speciﬁc ontology,
inspired by SOSA, that focuses on the treatment of streaming data. Both the
SOSA and the IoT-Stream ontologies are event-centric, in the sense that they

5 https://www.xes-standard.org/openxes/start

6

J. Gr¨uger et al.

focus on data generation and treatment, and less attention is paid to the devices
and platforms on which IoT relies, such as in the CDM-Core ontology.

2.3 Related Work

Recently multi-perspective process mining [26] has evolved which, for example,
uses process data as presented in [37]. Also, the analysis of time series data is
used as described in [37] and [34] for detecting concept drifts during run-time.
A survey on outcome-oriented predictive process monitoring presented in [39]
compares diﬀerent techniques.

For all of these approaches, data sets have been provided containing a wealth
of context data in conjunction with process events. These datasets however
present slightly diﬀerent granularity levels, slightly diﬀerent formats, and slightly
diﬀerent semantics.

To the best of our knowledge, no ﬁne-grained semantics enabled format to

unify IoT data and process data storage has been proposed.

3 An XES-Extension for IoT-Enriched Event Logs

XES is built around events, which describe how a sequence of activities has been
executed. Each activity can be lead to a set of events in a XES log ﬁle, following
the life-cycle (see Sect. 2) of the execution of that activity in a particular instance.
I.e., each activity could lead to a “start” event, to a “complete” event, and to
an arbitrary number of events in between, depending on the utilized life-cycle
model.

Many XES log ﬁles just store one event per executed activity, thus sensor
readings can be attached to this event. Other available logs, such as [36], expose
a custom ﬁne-grained life-cycle model, that anchors sensor reading to an event
with special XES lifecycle:transition.

The case shown in Fig. 1 leads to the XES log described in Fig. 1. As men-

tioned in the XES Standard:

“Log, trace, and event objects contain no information themselves. They
only deﬁne the structure of the document. All information in an event
log is stored in attributes. Attributes describe their parent element (log,
trace, etc.). All attributes have a string-based key.”

Fig. 1. Example Process

Task 1Task 2SensorStream XES Extension

7

We propose an extension to the XES standard in order to capture and store
IoT based sensor data within the XES log ﬁle for future enhanced analysis, data
mining, and process enhancement purposes (cf. process mining; see Sect. 2.1).

We see the XES ﬁle as a long-term storage format that can hold all aggre-
gated data connected to a process. When assuming heterogeneous sources for all
connected data artifacts, it is also fair to assume that some of these sources will
evolve and change their structure. Thus, holding the extracted, transformed and
aggregated data in a ﬂexible, structure long-term storage format is imperative.

Fig. 2. Diﬀerent Contexts in Which IoT Data Can Be Collected

In order to understand how IoT data might be connected to process activities,

we have to distinguish between three diﬀerent cases (see Fig. 2):

– ”Single Activity” Context: A time-series of sensor readings from at least
one sensor is connected to a single activity, e. g., when the activity repre-
sents the machining of a part, collected sensor data might describe various
aspects, such as the throughput of coolant while machining, a discrete series
of vibration readings, or a function (continuous data) describing the noise
generation (volume). All sensor data can be assigned to a particular activity,
only data between the start and the completion of the activity is relevant.
– ”Group of Activities” Context: A time-series of sensor readings from at
least one sensor is connected to a set of activities. This is especially relevant
for environmental sensors (which again might provide discrete or continuous
readings), which for example span a multitude of production steps. These
steps occur in parallel, thus leading to a variety of possible traces but the
temperature development might give insights into certain quality properties
of a ﬁnished product.

– ”Trace” Context: A time-series of sensor readings from at least one sensor
is connected to a whole trace. This case is analogous to the ”Group of Activ-
ities” case. Assignment to individual activities is not possible or not desired,
as e. g., the sensor readings in order to provide proper analysis context may
have to contain a period before and a period after individual activities.

In order to realize these three contexts, and to store individual sensor read-

ings, we propose the following meta-model depicted in Fig. 3.

Task 1Task 2Task 3Trace Context"Group of Activities" Context"Single Activity" Context8

J. Gr¨uger et al.

Fig. 3. SensorStream Metamodel

In the following, we will denote all attributes of our proposed extension with
the preﬁx stream:, to facility the clarity of the description. We will furthermore
assume that the stream: preﬁx is speciﬁed in a XES extension https://cpee.
org/sensorstream/sensorstream.xesext.

The core of the extension is stream:point. It contains all the attributes that
allow us to represent individual sensor values as XES artifacts. It is a list. Values
include:

– id: uniquely identiﬁes the sensor, e. g., if a gyro-sensor delivers orientation
and angular velocity changes separately, the identiﬁers can be gyro/velocity
and gyro/angular velocity. On the other hand, if the sensor delivers a value
pair, the identiﬁer can be gyro.

– source: identify the source of a sensor value, e. g., a drilling machine is the
source of many diﬀerent sensor readings at all times. The source attribute
allows grouping these values into groups that might belong together and,
thus, make sense to be analysed together. The source is optional.

logtraceeventattribute<list>:sensorstreamattribute<list>:multipointattribute<list>:pointattribute<string>:idattribute<string>:nameattribute<date>:timestampattribute<date>:timestampattribute<...>:value[optional]attribute<string>:source[optional]attribute<list>:meta[optional]attribute<string>:source[optional]attribute<list>:meta〈contains〉〈contains〉〈contains〉〈groups〉〈groups〉〈contains〉〈contains〉〈contains〉〈contains〉〈contains〉〈contains〉〈contains〉[optional]attribute<string>:id{all attributes inside point}{except value become}{optional}〈contains〉SensorStream XES Extension

9

– timestamp: A timestamp when the reading was taken. The timestamp is
intended to be in ISO 8601 format, including milliseconds (YYYY-MM-
DDTHH:mm:ss.sssZ) or microseconds (YYYY-MM-DDTHH:mm:ss.ssssssZ).
– value: The value delivered by the sensor. As sensors can deliver single values
(ﬂoat, int, strings) or complex data (pairs, triplets, deeply structured data,
. . . ), we always assume this is stored as some serialized string representation.
How to support the automatic extraction of potential parts of the value as
well as semantic meaning will be discussed in Sect. 4.

– meta: A straightforward extension point, which allows to specify an addi-
tional list of attributes, which might be important for custom data analysis
purposes. Meta is optional.

3.1 Context, Grouping, and Nesting: stream:point,

stream:sensorstream

The second introduced concept (see Fig. 3) is the stream:sensorstream. It was
introduced as the missing piece to produce ”Single Activity”, ”Group of
Activities”, and ”Trace” contexts. Its only (optional) attribute is name, which
can be used to describe the purpose of the grouping.

If a set of stream:points is included directly in the level of the trace, all points
are meant to exist in the ”Trace” context: they cannot be attributed to any
event or group of events yet.

If a stream:sensorstream exists at the trace level, the stream:sensorstream
has to group multiple events, and it has to contain at least one stream:point.
This realizes the ”Group of Activities” context. Multiple stream:sensorstream
attributes can exist at trace level, meaning that multiple groups exists.

If a stream:sensorstream exists at the event level, it has to contain at least on
stream:point. Multiple stream:sensorstream can exist at the event level. While
this does not change the meaning of all these points being connected to one
event, its purpose might be to further structure the events, e. g., separating two
diﬀerent levels of importance for analysis purposes.

All stream:sensorstream attributes might be nested. While this is not very
interesting, at the event level, it is important at the trace level. Nested sen-
sor:sensorstream attributes might convey diﬀerent layers of connection granu-
larity. For example, some stream:point attributes might be grouped to a group
[1] of 2 tasks, some other stream:point attributes might be connected to a group
[2] of 2 diﬀerent tasks. Then a third set of stream:point attributes might be
connected to all tasks in groups [1] and [2], leading to a [3: [1] [2]] nesting, as
depicted in List. 2:

Listing 2. Sample XES (XML serialization) stream:sensorstream Nesting

1 <t r a c e >
2
3
4
5

< s t r i n g key=” c o n c e p t : name” v a l u e =” P r o c e s s 1”/>
< l i s t key=”s t r e a m : s e n s o r s t r e a m ”>

< l i s t key=”s t r e a m : p o i n t ”>

<d a t e key=”s t r e a m : timestamp ” v a l u e =”2021−11−04T15

6

< s t r i n g key=”s t r e a m : i d ” v a l u e =”h u m i d i t y ”/>

,→ : 2 2 : 1 9 . 3 6 7 + 0 1 : 0 0 ” / >

10

J. Gr¨uger et al.

7
8
9
10
11
12

13
14
15
16
17
18
19
20
21
22

< s t r i n g key=”s t r e a m : v a l u e ” v a l u e =”62.5”/ >

</ l i s t >
[ . . . ]
< l i s t key=”s t r e a m : s e n s o r s t r e a m ”>

< l i s t key=”s t r e a m : p o i n t ”>

<d a t e key=”s t r e a m : timestamp ” v a l u e =”2021−11−04T15

,→ : 2 2 : 2 2 . 3 6 9 + 0 1 : 0 0 ” / >

s t r i n g key=”s t r e a m : v a l u e ” v a l u e =”19”/>

< s t r i n g key=”s t r e a m : i d ” v a l u e =” p r e s s u r e ”/>
<i n t
</ l i s t >
<e v e n t > [ . . . ] < / e v e n t >
<e v e n t > [ . . . ] < / e v e n t >
[ . . . ]
</ l i s t >
< l i s t key=”s t r e a m : s e n s o r s t r e a m ”>

< l i s t key=”s t r e a m : p o i n t ”>

<d a t e key=”s t r e a m : timestamp ” v a l u e =”2021−11−04T15

,→ : 2 2 : 2 8 . 3 6 9 + 0 1 : 0 0 ” / >

< s t r i n g key=”s t r e a m : i d ” v a l u e =” t e m p e r a t u r e ”/>
<i n t
s t r i n g key=”s t r e a m : v a l u e ” v a l u e =”75.3”/ >
</ l i s t >
<e v e n t > [ . . . ] < / e v e n t >
<e v e n t > [ . . . ] < / e v e n t >
[ . . . ]
</ l i s t >

23
24
25
26
27
28
29
30
31 </ t r a c e >
32 </l o g >

</ l i s t >

This leaves us with the special case of overlapping cases, where some stream:point’s

are connected to tasks 1 and 2, where some other stream:point’s are connected to
tasks 2 and 3. This case can only (XES being a tree structure) be solved by cre-
ating three stream:sensorstream attributes with some duplicated stream:point
elements.

3.2 Convenience and Storage Size: stream:multipoint

The ﬁnal element introduced in Fig. 3 is stream:multipoint. This concept is not
necessary from a functional perspective, but allows reducing the size of the log
ﬁle.

For example, when a set of sensor:point attributes all origin from the same
sensor and the same source, and contain the same meta information, this infor-
mation is duplicated all over and over. A sensor:multipoint allows to group this
redundant information for a set of points:

Listing 3. Sample XES (XML serialization) stream:multipoint

1 <t r a c e >
2
3
4
5
6

< s t r i n g key=” c o n c e p t : name” v a l u e =” P r o c e s s 1”/>
<e v e n t >

< s t r i n g key=” c o n c e p t : name” v a l u e =”Task 1”/>
< s t r i n g key=” l i f e c y c l e : t r a n s i t i o n ” v a l u e =” t r a n s i t i o n ”/>
<d a t e key=”t i m e : timestamp ” v a l u e =”1970−01−01T00

7
8
9
10
11
12
13

,→ : 0 0 : 0 0 . 0 0 0 + 0 0 : 0 0 ” / >

< s t r i n g key=”name” v a l u e =”J u e r g e n ”/>
< l i s t key=”s t r e a m : s e n s o r s t r e a m ”>

< s t r i n g key=”s t r e a m : name” v a l u e =”Temperature”/>
< l i s t key=”s t r e a m : m u l t i p o i n t ”>

< s t r i n g key=”s t r e a m : i d ” v a l u e =”k e y e n c e / mesurement”/>
< s t r i n g key=”s t r e a m : s o u r c e ” v a l u e =”k e y e n c e ”/>
< l i s t key=”s t r e a m : p o i n t ”>

SensorStream XES Extension

11

<d a t e key=”s t r e a m : timestamp ” v a l u e =”2021−11−04T15

,→ : 2 2 : 1 9 . 3 6 7 + 0 1 : 0 0 ” / >

< s t r i n g key=”s t r e a m : v a l u e ” v a l u e =”18”/>

</ l i s t >
< l i s t key=”s t r e a m : p o i n t ”>

<d a t e key=”s t r e a m : timestamp ” v a l u e =”2021−11−04T15

,→ : 2 2 : 2 0 . 3 6 9 + 0 1 : 0 0 ” / >

s t r i n g key=”s t r e a m : v a l u e ” v a l u e =”19”/>

<i n t
</ l i s t >

</ l i s t >

19
20
21
22
23
24 </ t r a c e >
25 </l o g >

</ l i s t >

</e v e n t >

14

15
16
17
18

7
8
9
10
11

Alternatively, it can be used to group according to timestamp, if a set of

sensor readings are taken at discrete points in time:

Listing 4. Sample XES (XML serialization) stream:multipoint

1 <t r a c e >
2
3
4
5
6

< s t r i n g key=” c o n c e p t : name” v a l u e =” P r o c e s s 1”/>
<e v e n t >

< s t r i n g key=” c o n c e p t : name” v a l u e =”Task 1”/>
< s t r i n g key=” l i f e c y c l e : t r a n s i t i o n ” v a l u e =” t r a n s i t i o n ”/>
<d a t e key=”t i m e : timestamp ” v a l u e =”1970−01−01T00

,→ : 0 0 : 0 0 . 0 0 0 + 0 0 : 0 0 ” / >

< s t r i n g key=”name” v a l u e =”J u e r g e n ”/>
< l i s t key=”s t r e a m : s e n s o r s t r e a m ”>

< s t r i n g key=”s t r e a m : name” v a l u e =”Temperature”/>
< l i s t key=”s t r e a m : m u l t i p o i n t ”>

<d a t e key=”s t r e a m : timestamp ” v a l u e =”2021−11−04T15

,→ : 2 2 : 1 9 . 3 6 7 + 0 1 : 0 0 ” / >
< l i s t key=”s t r e a m : p o i n t ”>

< s t r i n g key=”s t r e a m : i d ” v a l u e =” t e m p e r a t u r e ”/>
< s t r i n g key=”s t r e a m : v a l u e ” v a l u e =”48.5371”/ >

</ l i s t >
< l i s t key=”s t r e a m : p o i n t ”>

< s t r i n g key=”s t r e a m : i d ” v a l u e =” p r e s s u r e ”/>
< s t r i n g key=”s t r e a m : v a l u e ” v a l u e =”12:30 −1 ,12:31 −2 ,3 ,4 ,5”/ >

12
13
14
15
16
17
18
19
20
21
22
23 </ t r a c e >
24 </l o g >

</ l i s t >

</ l i s t >

</ l i s t >

</e v e n t >

4 Facilitating Analysis: Conveying Sensor Data Semantics

Based on the XES extension presented in Sect. 3, it is possible to properly
store and attribute/connect/correlate sensor data to process logs. While this is
a proper basis for data analysis (conformance and compliance checking, root
cause analysis in case of bad quality of process subjects, . . . ), various analysis
tasks still require further preparation:

– Structural understanding of sensor:point values, their units/dimensions.
– Semantic understanding of the scenario, in which the data has been collected.
– Semantic understanding of the meaning of sensor:point values, why and how

they are connected to the scenario or parts of it.

– Semantic relation between diﬀerent sensors.

12

J. Gr¨uger et al.

– Semantic understanding of how sensor:point values, or their changes, relate

to diﬀerent sensor:point values and their changes.

Such analysis tasks probably require domain knowledge. As our goal is to
facilitate analysis tasks as much as possible, it is important to also store in-
formation about semantic aspects in the log. This will allow stored data to be
self-contained objects for analysis, so that even after long-term storage as much
semantic knowledge as possible can be preserved.

In order to do so, we developed an annotation meta-model that can be used

to connect ontological information to stored XES logs, as depicted in Fig. 4.

Fig. 4. SensorStream Annotation Meta-Model

As depicted in List. 5, the extension is based on existing IoT ontology stan-
dards (SOSA and SSN; see Sect. 2.2), and realized as a set of annotation based
on XML namespaces.

Listing 5. Sample XES (XML serialization) stream:multipoint

1 <l o g x e s . v e r s i o n =”1.0”
2
3
4
5
6
7 <e x t e n s i o n name=”S e n s o r S t r e a m ” p r e f i x =”s t r e a m ” u r i =” h t t p s : / / c p e e . o r g

xmlns=”h t t p : / /www. xes−s t a n d a r d . o r g ”
x e s . c r e a t o r =”c p e e . o r g”>
xmlns : s t r e a m ” u r i =” h t t p s : / / c p e e . o r g / s e n s o r s t r e a m /”
xmlns : s s n ” u r i =”h t t p : / /www. w3 . o r g / ns / s s n /”
xmlns : s o s a ” u r i =”h t t p : / /www. w3 . o r g / ns / s o s a /”>

,→ / s e n s o r s t r e a m / s e n s o r s t r e a m . x e s e x t ”/>

logattribute<list>:sensorstreamattribute<list>:traitattribute<list>:multipointattribute<list>:point〈contains〉idcomment〈contains〉value〈contains〉sosa:Actuationsosa:Observationsosa:Samplingstream:startstream:endstream:pausestream:activestream:rampupstream:rampdown〈ontology ref〉〈ontology ref〉〈ontology ref〉〈data structures/units〉stream:binarystream:discretestream:continuousstream:fromstream:tostream:exact〈ontology ref〉sosa:Actuatorsosa:Sensor〈ontology ref〉sosa:Actuatorsosa:Sensorstream:increasestream:decreasestream:alternateSensorStream XES Extension

13

8 <e x t e n s i o n name=”Concept ” p r e f i x =” c o n c e p t ” u r i =”h t t p : / /www. xes−

,→ s t a n d a r d . o r g / c o n c e p t . x e s e x t ”/>

9 <e x t e n s i o n name=” L i f e c y c l e ” p r e f i x =” l i f e c y c l e ” u r i =”h t t p : / /www. xes−

,→ s t a n d a r d . o r g / l i f e c y c l e . x e s e x t ”/>

10 <e x t e n s i o n name=” I d e n t i t y ” p r e f i x =” i d e n t i f i e r ” u r i =”h t t p : / /www. xes−

,→ s t a n d a r d . o r g / i d e n t i t y . x e s e x t ”/>

11 <e x t e n s i o n name=”Time ” p r e f i x =”t i m e ” u r i =”h t t p : / /www. xes−s t a n d a r d .

,→ o r g / t i m e . x e s e x t ”/>

12 </l o g >

4.1 Semantic Annotation of stream:point

In order to convey additional semantic information, stream:point (and analo-
gously stream:multipoint, stream:sensorstream) can be annotated, with a wide
variety of information describing the many semantic aspects of the data collec-
tion. Please note that assigning the information to stream:multipoint or stream:sensor-
stream just means that the information is true for all points.

List. 6 shows a sample annotation to a single point by using the developed do-
main ontology FTOnto [19] as a concrete implementation of a speciﬁc knowledge
representation:

Listing 6. Sample XES (XML serialization) With Semantic Annotations

1 < l i s t key=”s t r e a m : p o i n t ”
2
3
4
5
6
7

s t r e a m : sys tem=”h t t p : / / i o t . uni− t r i e r . de /FTOnto#OV 1”
s t r e a m : s y s t e m t y p e =”h t t p : / / i o t . uni− t r i e r . de /FTOnto#Oven”
s t o n t o l o g y r e a m : s y s t e m t y p e =” s o s a : A c t u a t o r ”
s t r e a m : i n t e r a c t i o n t y p e =” s o s a : O b s e r v a t i o n ”
s t r e a m : o b s e r v a t i o n =”h t t p : / / i o t . uni− t r i e r . de /FTOnto#Temperature ”
s t r e a m : o b s e r v a t i o n s p e c i f i c a t i o n =”[ t e m p e r a t u r e , t e m p e r a t u r e ]

[

8

,→ d e g r e e c e l s i u s , d e g r e e c e l s i u s ] ”
s t r e a m : p r o c e d u r e =”h t t p : / / i o t . uni− t r i e r . de /
,→ t e m p e r a t u r e m e a s u r e m e n t m e t h o d ”

s t r e a m : p r o c e d u r e t y p e =”s t r e a m : d i s c r e t e ”
s t r e a m : p r o c e d u r e t r a n s i t i o n =”s t r e a m : e x a c t ”
s t r e a m : l i f e c y c l e v a l u e =”s t r e a m : a c t i v e ”>

9
10
11
12 < s t r i n g key=”s t r e a m : i d ” v a l u e =” t e m p e r a t u r e/>
13 <s t r e a m : r e l a t i o n v a l u e =”s t r e a m : i n c r e a s e ”>
14
15 </s t r e a m : r e l a t i o n >
16
[ . . . ]
17 </ l i s t >

< s t r i n g key=”s t r e a m : i d ” v a l u e =” p r e s s u r e />

As can be seen in List. 5, and List. 6, we rely heavily on parts of the Sensors,
Observations, Samples, and Actuators (SOSA) ontology [17] and the Semantic
Sensor Network (SSN) ontology [8], which themselves are closely related.

We especially utilize the concepts described by these standards to clarify the

involved systems (SSN term), nature of observations, and procedures.

All annotations are optional and should only be added when known and
unambiguous. The following annotations were inspired either by SOSA or SSN:

– system: Link to an ontology that describes the type of system the value
stems for. In the example above, the FTOnto domain ontology describes an
oven.

– system: Type of system that delivers the value. This can be a sosa:actuator
which yields a value on actuation, a sosa:sensor. Alternatively, a link to an

14

J. Gr¨uger et al.

ontology can be provided, which can in turn describe a sosa:sensor or a
sosa:actuator.

– interaction type: Type of interaction that happened in order to read the
value. A sosa:actuation can very well return a value describing its state, while
sosa:observation describes a single sensor reading. sosa:sampling describes a
set of subsequent sosa:observations.

– observation: Link to an ontology describing the nature of the value, e. g., a

temperature reading.

– observation speciﬁcation: Intended to provide a simple machine-readable
description of the structure of the value returned by a sensor. This covers
individual values, lists of values and their units. For anything more complex,
the information should be provided in observation. In the example above,
the syntax becomes clear: [temperature] describes that a single value is deliv-
ered, [temperature,temperature] describes that a pair of values is delivered,
and so forth. The second expression, separated by a comma, assigns units
(like e. g., m/s) to each denoted value.

– procedure: A link to an ontology describing how exactly the measurement

has been taken, e. g., by describing hardware properties, timing, . . . :

All other annotations do not have equivalent concepts in SSN or SOSA, and
allow interpreting the nature of values, e. g., to automatically select the right
visualization for a set of sensor:point attributes:

– procedure type: Allows to annotate the type of data/measurement. Data
might be stream:binary (e. g., on/oﬀ), stream:discrete if the measurements
are taken periodically by the sensor6, or stream:continuous. While a value has
always a timestamp attached, stream:continuous points at analogue sensors,
which might yield functions describing the progression since the last measure-
ment, or data aggregations. Thus, when interpreting this stream:continuous
data, it is possible that outliers are missing, or have been factored into the
data.

– procedure transition: Points at how the progression between diﬀerent val-
ues of this sensor is aﬀecting the underlying business process. A domain ex-
pert might point out patterns that show data changes (e.g. a simple value
switching from oﬀ to on) which are clearly connected to tasks in a process.
For example, a task triggering the start of motor might always lead to a set
of very speciﬁc data changes, which clearly point out the existence of the
task, even if the actual actuation (or the logging of the task in a process
engine) can not be observed. Patters can include: (1) stream:from points
at progression in the process when the current value changes. (2) stream:to
points to a progression when the current value changes to a diﬀerent value,
set of values or range. (3) stream:exact ﬁnally describes a progression exactly
from the current value, to a diﬀerent value, set of values or range.

6 This might include internal storage; when the sensor is queried, it delivers the last
stored reading; alternatively the sensor might push the value immediately after the
reading is taken.

SensorStream XES Extension

15

– lifecycle: Describes in which phase of the process a sensor value occurs,
e. g., when an oven is at a temperature between 80 and 100 degrees Celsius
that means it is active. Again, a domain expert might easily point out a
set/range of values that can allow to partition data and deduce the existence
of tasks, even if they can not be directly observed. Consequently, stream:start
denotes a value which might indicate that something has just been started
(works also for stream:binary). stream:end on the other hand describes a
value that denotes the end of a task, (or process). stream:pause denotes a
set of values that points towards a break in underlying process or production.
stream:active points at the sensor measuring activity, e. g., a vibration sensor
might measure transport. stream:rampup points to values that denote, e. g., a
motor spinning up or an oven pre-warming, while stream:rampdown points
to the opposite.

All of the above values might allow to mark data points or sets of data-
points in a visualization with their respective meaning. The annotation of course
requires, that when the data is written, a component which holds domain-speciﬁc
knowledge, interprets data values and adds the appropriate annotations.

Through the presented annotations, the formalization of such domain speciﬁc
knowledge can be structured and simpliﬁed. By interpreting the annotations, uni-
versal analysis components can automatically provide improved visualizations.

4.2 Interaction: stream:relation

In order to provide a means to describe the relation between stream:point at-
tributes, inside of stream:point it is possible to insert a stream:relation attribute.
The stream:relation attribute describes how a particular point can be interpreted
in relation to another stream:point from a diﬀerent sensor. stream:increase de-
notes that when this value increases, the value of the other sensor should also
increase, e. g., temperature and pressure. stream:decrease describes the opposite.
stream:alternating describes a relationship where increases and decreases should
alternate.

Through this attribute, simple consistency and conformance checking be-

comes possible.

4.3 Reusability: stream:trait

The stream:trait attribute can be used at log level to create a template that can
be reused for all stream:point attributes. A stream:trait acts a anchor point for
attaching all possible semantic annotations, which then in turn can be referenced
by arbitrary stream:point attributes via a custom stream:trait XML attribute,
as depicted in List. 7.

This again decreases the size of the log ﬁle and thus improves parsing speed.
A sample trait integration is depicted in List. 7:

16

J. Gr¨uger et al.

Listing 7. Sample XES (XML serialization) stream:trait

xmlns=”h t t p : / /www. xes−s t a n d a r d . o r g ”
x e s . c r e a t o r =”c p e e . o r g”>
xmlns : s t r e a m ” u r i =” h t t p s : / / c p e e . o r g / s e n s o r s t r e a m /”
xmlns : s s n ” u r i =”h t t p : / /www. w3 . o r g / ns / s s n /”
xmlns : s o s a ” u r i =”h t t p : / /www. w3 . o r g / ns / s o s a /”>

i d =”1” comment=” p r o t o c o l p r o p e r t i e s ”

s t r e a m : p r o c e d u r e t y p e =”s t r e a m : b i n a r y ”
s t r e a m : p r o c e d u r e t r a n s i t i o n =”s t r e a m : e x a c t ”

i d =”1” comment=” o t h e r p r o p e r t i e s ”

[ . . . ]

1 <l o g x e s . v e r s i o n =”1.0”
2
3
4
5
6
7
8 <s t r e a m : t r a i t
9
10
11 </s t r e a m : t r a i t >
12 <s t r e a m : t r a i t
[ . . . ]
13
14 </s t r e a m : t r a i t >
15
16 <t r a c e >
17
18
19
20 </ t r a c e >
21 </l o g >

[ . . . ]
</ l i s t >

[ . . . ]

< l i s t key=”s t r e a m : p o i n t ” s t r e a m : t r a i t =”1 2”>

At the level of a stream:point XES attribute multiple traits can be reference

by a stream:trait XML attribute.

5 Application Scenario for IoT-Enriched Event Logs in

Smart Manufacturing

In order to evaluate our proposed SensorStream XES extension, we will present
and discuss an IoT-enriched event log from a physical smart factory in this sec-
tion. First, we present how the smart factory for event log generation is struc-
tured and controlled and how the log has been generated (see Sect. 5.1). Af-
terwards, we show a part of the enriched event log and describe use cases for
process mining analysis (see Sect. 5.2).

5.1 Physical Factory Simulation Lab Utilizing BPM Technology at

the University of Trier

Learning Factories [3] are gaining importance in Industry 4.0 research (cf. [23,31,
32]). In contrast to widely used artiﬁcially generated data, physical simulation
models provide much more realistic data and run-time behavior such as ad-hoc
interventions [23]. Thus, they enable the transfer to real-world settings more
easily. In our research [16, 18, 21–23, 31], we use a physical factory simulation
model from Fischertechnik. The custom model7 simulates two independently
working production lines consisting of two shop ﬂoors that are linked for the
exchange of workpieces. Figure 5 illustrates the used factory simulation model.
By using a BPM abstraction layer [21,23,31], it is possible to control the factory
model in a process-based fashion by using workﬂow management systems. A
video from the factory executing a manufacturing process can be found in [20].

7 https://iot.uni-trier.de

SensorStream XES Extension

17

Fig. 5. The Physical Factory Simulation Model. (Source: [23])

During process execution, the generated data (event log and IoT sensor data) is
stored using the proposed SensorStream XES extension format. In the following,
we describe use cases for process mining analysis based on the generated data
from process executions.

5.2 IoT-Enriched Event Log

The event log contains X traces and N events, which in turn are assigned Z sensor
observations. Since the event log was built with background knowledge about
the processes and thus top-down, there is only sensor data at event level. List. 8
shows the structure of a single event in an event log. Using the concept, time
and organizational extension, the activity, start time, and the resource vacuum
gripper robot 1 are given.

Listing 8. Structure of a Trace and Event

1 <t r a c e >
2
3
4
5

6

7
8
9
10

<e v e n t >

< s t r i n g key=” c o n c e p t : name” v a l u e =” c a l i b r a t i n g motor 3”/>
< s t r i n g key=”o r g : r e s o u r c e ” v a l u e =” v g r 1 ”/>
<d a t e key=”t i m e : timestamp ” v a l u e =”2021−06−25T17

,→ : 0 8 : 5 0 . 4 1 4 0 0 0 ” / >

<d a t e key=” o p e r a t i o n e n d t i m e ” v a l u e =”2021−06−25T17

,→ : 0 8 : 5 7 . 1 6 3 0 0 0 ” / >

< l i s t key=”s t r e a m : s e n s o r s t r e a m ”>

[ . . . ]

</ l i s t >
[ . . . ]

High-Bay Warehouse 1Sorting Machine 1Sorting Machine 2PunchingMachineDrillingMachineShop Floor 1Shop Floor 2MillingMachine 2Vacuum Gripper Robot 2Oven 2Vacuum Gripper Robot 1Milling Machine 1Oven 1Sorting Machine 2DrillingMachineHuman WorkstationPunchingMachineHigh-Bay Warehouse 1High-Bay Warehouse 2Sorting Machine 118

J. Gr¨uger et al.

In List. 9 a section of the sensor data of the previously shown activity is shown.
For the description and exact mapping of the acceleration sensor, the stream sys-
tem refers to the FTOnto ontology [19]. More generally, the sensor is semantically
classiﬁed by the system type. The observation indicates via a corresponding link
to the ontology that an acceleration has been observed. The observation is further
speciﬁed in the observation speciﬁcation, which indicates that the observation
consists of the points x, y, and z, which are measured in m/s2. Procedure type
indicates that they are continuous values and interaction type says that it is an
observation. Finally, time and measured values are given. Observing all three
given measurements, the movement of the vacuum gripper robot can be traced
on the X, Y, and Z axes.

Listing 9. Excerpt of the Acceleration Sensors’ Data, Related to the Motor Calibration
Shwon in List. 8
1 < l i s t key=”s t r e a m : s e n s o r s t r e a m ”>
2

< l i s t key=”s t r e a m : p o i n t ” s t r e a m : s y stem=”h t t p : / / i o t . uni− t r i e r . de /
,→ FTOnto#BMX055 Pi 1 AccSensor 1 ” s t r e a m : s y s t e m t y p e =” s o s a :
,→ S e n s o r ” s t r e a m : o b s e r v a t i o n =”h t t p : / / i o t . uni− t r i e r . de /FTOnto#
,→ V G R 1 C r a n e J i b A c c e l e r a t i o n ” s t r e a m :
,→ o b s e r v a t i o n s p e c i f i c a t i o n =”[ x , y , z ]
,→ s t r e a m : p r o c e d u r e t y p e =”s t r e a m : c o n t i n u o u s ” s t r e a m :
,→ i n t e r a c t i o n t y p e =” s o s a : O b s e r v a t i o n ”>
<d a t e s t r e a m : timestamp =”2021−06−25T17 : 0 8 : 5 0 . 4 1 4 7 1 8 ” / >
< s t r i n g s t r e a m : v a l u e =”[ −0.721 , − 1 0 .2 4 8 3 , −0.7114]”/ >

[m/ s ˆ 2 ,m/ s ˆ 2 ,m/ s ˆ 2 ] ”

</ l i s t >
< l i s t key=”s t r e a m : p o i n t ” s t r e a m : sy stem=”h t t p : / / i o t . uni− t r i e r . de /
,→ FTOnto#BMX055 Pi 1 AccSensor 1 ” s t r e a m : s y s t e m t y p e =” s o s a :
,→ S e n s o r ” s t r e a m : o b s e r v a t i o n =”h t t p : / / i o t . uni− t r i e r . de /FTOnto#
,→ V G R 1 C r a n e J i b A c c e l e r a t i o n ” s t r e a m :
,→ o b s e r v a t i o n s p e c i f i c a t i o n =”[ x , y , z ]
,→ s t r e a m : p r o c e d u r e t y p e =”s t r e a m : c o n t i n u o u s ” s t r e a m :
,→ i n t e r a c t i o n t y p e =” s o s a : O b s e r v a t i o n ”>
<d a t e s t r e a m : timestamp =”2021−06−25T17 : 0 8 : 5 0 . 4 1 7 4 8 4 ” / >
< s t r i n g s t r e a m : v a l u e = ” [ 0 . 4 7 1 1 , −9.46 , −1.0575]”/ >

[m/ s ˆ 2 ,m/ s ˆ 2 ,m/ s ˆ 2 ] ”

</ l i s t >
< l i s t key=”s t r e a m : p o i n t ” s t r e a m : sy stem=”h t t p : / / i o t . uni− t r i e r . de /
,→ FTOnto#BMX055 Pi 1 AccSensor 1 ” s t r e a m : s y s t e m t y p e =” s o s a :
,→ S e n s o r ” s t r e a m : o b s e r v a t i o n =”h t t p : / / i o t . uni− t r i e r . de /FTOnto#
,→ V G R 1 C r a n e J i b A c c e l e r a t i o n ” s t r e a m :
,→ o b s e r v a t i o n s p e c i f i c a t i o n =”[ x , y , z ]
,→ s t r e a m : p r o c e d u r e t y p e =”s t r e a m : c o n t i n u o u s ” s t r e a m :
,→ i n t e r a c t i o n t y p e =” s o s a : O b s e r v a t i o n ”>
<d a t e s t r e a m : timestamp =”2021−06−25T17 : 0 8 : 5 0 . 4 1 9 6 2 1 ” / >
< s t r i n g s t r e a m : v a l u e = ”[ − 0. 7 69 1 , − 1 0 . 14 2 6 , −0.25]”/ >

[m/ s ˆ 2 ,m/ s ˆ 2 ,m/ s ˆ 2 ] ”

</ l i s t >
[ . . . ]

3
4
5
6

7
8
9
10

11
12
13
14

Listing 10 shows data from the motor’s speed sensor on vacuum gripper
robot 1. Unlike the acceleration sensor data, only one sensor value is observed
here. This is shown in the value and observation speciﬁcation. Moreover, the
value comes directly from the resource, without being a directly addressable or
writable sensor. Therefore, the SOSA ontology is used here to explicitly describe
that it is an actuation.

Listing 10. Excerpt of the Acceleration Sensors’ Data, Related to the Motor Calibra-
tion Shwon in List. 8
1 < l i s t key=”s t r e a m : p o i n t ” s t r e a m : sy stem=”h t t p : / / i o t . uni− t r i e r . de /FTOnto
,→ #VGR 1 Motor 3 ” s t r e a m : s y s t e m t y p e =” s o s a : A c t u a t o r ” s t r e a m :

SensorStream XES Extension

19

,→ o b s e r v a t i o n =”h t t p : / / i o t . uni− t r i e r . de /FTOnto#MotorSpeed ” s t r e a m :
,→ p r o c e d u r e t y p e =”s t r e a m : c o n t i n u o u s ” s t r e a m : i n t e r a c t i o n t y p e =”
,→ s o s a : A c t u a t i o n ”>
<d a t e s t r e a m : timestamp =”2021−06−25T17 : 0 9 : 1 0 . 3 8 3 0 0 0 ” / >
< s t r i n g s t r e a m : v a l u e =”0.0”/ >

2
3
4 </ l i s t >

5.3 Results

The use of the SensorStream extension enabled the integrated of all sensor data
with the available process execution events. The extensive semantic description
of the data via linkable ontologies proved to be well applicable. For individual
sensors that are not fully semantically modeled in the domain ontology of the
smart factory (see Sect. 5.1), the ﬂexibility of the extension to include free text
or references to entities in other ontologies (e. g., SOSA) proved to be useful.

Limitations exist so far in the usability of the data structure in analysis tools,
as there are no implementations to use it. Moreover, due to the large amounts
of data in the IoT context, the logs can quickly become very large, therefore,
scalability mechanisms should be further investigated.

6 Conclusion and Future Work

In this paper, an extension to XES has been presented, allowing the joint storage
of process event logs and IoT data related to the environment where these events
occur.

The extension identiﬁes what is required from the IoT perspective to enable
the use of BPM methods for IoT (cf. [4]). As it has been shown, there are special
requirements for the data perspective in the IoT context, especially with respect
to sensor data.

In the future, a complete event log of a factory shall be parsed and visualized
based on the proposed extension format, to support process reﬁnement and root
cause analysis.

References

1. van der Aalst, W.M.P.: Process Mining: Discovery, Conformance and Enhancement

of Business Processes. Springer (2011)

2. van der Aalst, W.M.P.: Data Science in Action. In: Process Mining, pp. 3–23.

Springer (2018)

3. Abele, E., Chryssolouris, G., Sihn, W., Metternich, J., ElMaraghy, H., Seliger,
G., Sivard, G., ElMaraghy, W., Hummel, V., Tisch, M., Seifermann, S.: Learning
factories for future oriented research and education in manufacturing. CIRP Ann.
66(2), 803–826 (2017)

4. Janiesch et al., C.: The Internet of Things Meets Business Process Management:

A Manifesto. IEEE Syst. Man Cybern. Mag. 6(4), 34–44 (2020)

20

J. Gr¨uger et al.

5. Bermudez-Edo, M., Elsaleh, T., Barnaghi, P., Taylor, K.: IoT-Lite: A Lightweight
Semantic Model for the Internet of Things. In: UIC-ATC-ScalCom-CBDCom-IoP-
SmartWorld 2016. pp. 90–97. IEEE (2016)

6. Berti, A., van Zelst, S.J., van der Aalst, W.M.P.: Process Mining for Python
(PM4Py): Bridging the Gap Between Process- and Data Science. arXiv:1905.06169
(2019)

7. Bertrand, Y., de Weerdt, J., Serral, E.: A Bridging Model for Process Mining and

IoT. In: Process Mining Workshops, vol. 433, pp. 98–110. Springer (2022)

8. Compton, M., et al.: The SSN ontology of the W3C semantic sensor network in-

cubator group. J. Web Semant. 17, 25–32 (2012)

9. van Dongen, B.F., van der Aalst, W.M.P.: A Meta Model for Process Mining Data.

EMOI-INTEROP 160, 30 (2005)

10. van Dongen, B.F., Shabani, S.: Relational XES: Data Management for Process

Mining. In: CAiSE Forum (2015)

11. Ehrendorfer, M., Fassmann, J.A., Mangler, J., Rinderle-Ma, S.: Conformance
checking and classiﬁcation of manufacturing log data. In: 21st CBI. vol. 1, pp.
569–577. IEEE (2019)

12. Ehrendorfer, M., Mangler, J., Rinderle-Ma, S.: Sensor data stream selection and
aggregation for the ex post discovery of impact factors on process outcomes. In:
33rd CAiSE. pp. 29–37. Springer (2021)

13. Elsaleh, T., Bermudez-Edo, M., Enshaeifar, S., Acton, S.T., Rezvani, R., Barnaghi,
P.: IoT-Stream: A Lightweight Ontology for Internet of Things Data Streams. In:
Global IoT Summit Proc. pp. 1–6. IEEE (2019)

14. Ghahfarokhi, A.F., Park, G., Berti, A., van der Aalst, W.M.P.: OCEL: A Standard
for Object-Centric Event Logs, CCIS, vol. 1450, pp. 169–175. Springer (2021)

15. G¨unther, C.W., Verbeek, E.: XEX Standard Deﬁnition - Version 2.0 (2014)
16. Hoﬀmann, M., Malburg, L., Bergmann, R.: ProGAN: Toward a Framework for Pro-
cess Monitoring and Flexibility by Change via Generative Adversarial Networks.
In: BPM Workshops, LNBIP, vol. 436, pp. 43–55. Springer (2022)

17. Janowicz, K., Haller, A., Cox, S.J., Le Phuoc, D., Lefran¸cois, M.: SOSA: A
lightweight ontology for sensors, observations, samples, and actuators. J. Web Se-
mant. 56, 1–10 (2019)

18. Klein, P., Bergmann, R.: Generation of Complex Data for AI-Based Predictive
Maintenance Research With a Physical Factory Model. In: 16th ICINCO. pp. 40–
50. SciTePress (2019)

19. Klein, P., Malburg, L., Bergmann, R.: FTOnto: A Domain Ontology for a Fis-
chertechnik Simulation Production Factory by Reusing Existing Ontologies. In:
21st LWDA. vol. 2454, pp. 253–264. CEUR-WS.org (2019)

20. Malburg, L., et al.: Demo Video: Object Detection for Smart Factory Processes by

Machine Learning (2020), https://doi.org/10.6084/m9.ﬁgshare.13240784

21. Malburg, L., Klein, P., Bergmann, R.: Semantic Web Services for AI-Research with
Physical Factory Simulation Models in Industry 4.0. In: 1st IN4PL. pp. 32–43.
SciTePress (2020)

22. Malburg, L., Rieder, M.P., Seiger, R., Klein, P., Bergmann, R.: Object Detection
for Smart Factory Processes by Machine Learning. Procedia Comput. Sci. 184,
581–588 (2021)

23. Malburg, L., Seiger, R., Bergmann, R., Weber, B.: Using Physical Factory Simu-
lation Models for Business Process Management Research. In: BPM Workshops,
LNBIP, vol. 397, pp. 95–107. Springer (2020)

24. Mangler, J., Rinderle-Ma, S.: CPEE - Cloud Process Exection Engine. BPM Demo

Sessions 1295 (2014)

SensorStream XES Extension

21

25. Mangler, J., Pauker, F., Rinderle-Ma, S., Ehrendorfer, M.: centurio.work – Industry
4.0 Integration Assessment and Evolution. In: 17th BPM. pp. 106–117 (2019)
26. Mannhardt, F.: Multi-perspective Process Mining. Ph.D. thesis, Technische Uni-

versiteit Eindhoven, Eindhoven (2018)

27. Mazzola, L., Kapahnke, P., Vujic, M., Klusch, M.: CDM-Core: A Manufacturing
Domain Ontology in OWL2 for Production and Maintenance. In: 8th KEOD. pp.
136–143 (2016)

28. Messner, M., Pauker, F., Mauthner, G., Fr¨uhwirth, T., Mangler, J.: Closed loop cy-
cle time feedback to optimize high-mix/low-volume production planning. Procedia
CIRP 81, 689–694 (2019)

29. Pauker, F., Mangler, J., Rinderle-Ma, S., Ehrendorfer, M.: Industry 4.0 Integration
Assessment and Evolution at EVVA GmbH: Process-Driven Automation Through
centurio. work. In: BPM Cases Vol. 2, pp. 81–91. Springer (2021)

30. Popova, V., Fahland, D., Dumas, M.: Artifact Lifecycle Discovery. arXiv:1303.2554

(2013)

31. Seiger, R., Malburg, L., Weber, B., Bergmann, R.: Integrating process management
and event processing in smart factories: A systems architecture and use cases. J.
Manuf. Syst. 63, 575–592 (2022)

32. Seiger, R., Zerbato, F., Burattin, A., Garcia-Banuelos, L., Weber, B.: Towards
IoT-driven Process Event Log Generation for Conformance Checking in Smart
Factories. In: 24th EDOC Workshops. pp. 20–26. IEEE (2020)

33. Sisinni, E., Saifullah, A., Han, S., Jennehag, U., Gidlund, M.: Industrial Internet of
Things: Challenges, Opportunities, and Directions. IEEE Trans. Ind. Inf. 14(11),
4724–4734 (2018)

34. Stertz, F., Mangler, J., Rinderle-Ma, S.: Analyzing Process Concept Drifts Based

on Sensor Event Streams During Runtime. In: 18th BPM (2020)

35. Stertz, F., Mangler, J., Rinderle-Ma, S.: Data-driven improvement of online con-

formance checking. In: 24th EDOC. pp. 187–196. IEEE (2020)

36. Stertz, F., Mangler, J., Rinderle-Ma, S.: Temporal Conformance Checking at Run-

time based on Time-infused Process Models. arXiv:2008.07262 (2020)

37. Stertz, F., Rinderle-Ma, S.: Detecting and Identifying Data Drifts in Process Event
Streams Based on Process Histories. In: Information Systems Engineering in Re-
sponsible Information Systems. pp. 240–252 (2019)

38. Stertz, F., Rinderle-Ma, S., Mangler, J.: Analyzing process concept drifts based on
sensor event streams during runtime. In: 18th BPM. pp. 202–219. Springer (2020)
39. Teinemaa, I., Dumas, M., Rosa, M.L., Maggi, F.M.: Outcome-Oriented Predictive
Process Monitoring: Review and Benchmark. ACM Trans. Knowl. Discov. Data
13(2), 17:1–17:57 (2019)

