Towards Turing-Complete Quantum Computing
Coming From Classical Assembler

Thomas Gabor, Marian Lingsch Rosenfeld, Claudia Linnhoff-Popien
LMU Munich
thomas.gabor@iﬁ.lmu.de, M.Rosenfeld@campus.lmu.de

2
2
0
2

n
u
J

8
2

]
h
p
-
t
n
a
u
q
[

1
v
7
3
0
4
1
.
6
0
2
2
:
v
i
X
r
a

Abstract—Instead of producing quantum languages that are
ﬁt for current quantum computers, we build a language from
standard classical assembler and augment
it with quantum
capabilities so that quantum algorithms become a subset of it.
This paves the way for the development of hybrid algorithms
directly from classical software, which is not feasible on today’s
hardware but might inspire future quantum programmers.

Index Terms—quantum computing, quantum language, assem-

bler

I. INTRODUCTION

The capabilities of current quantum computers remain very
limited, most importantly with respect to the depth of the
executed algorithm. As astonishing as it is that we can still run
notably important algorithms (maybe even better than classical
ones [1], [2]) on this kind of hardware, the algorithms that can
be fully implemented on a quantum computer lack several
characteristics that programmers are used to for classical
algorithms, most notably: recursion. The absence of arbitrary-
depth recursion (or simply jumps) prohibits pure quantum
algorithm from emulating every algorithm that can be run on
a Turing machine.1 For today’s quantum computers, this is
a more than sensible assumption as decoherence times only
allow for a couple of gates to be executed in sequence before
all useful information is lost. But what if we had the best
quantum computer we could wish for?

In contrast to most other approaches (most notably quantum
assembly languages [3]) we attempt to design an assembly
language not for quantum computers with today’s capabilities
but for an imaginary quantum computer that is not limited
by today’s challenges in hardware design and maybe not
even limited by all the rules of quantum mechanics at all
times. However, we argue that such a language (even though
conceivably it will not run on any real quantum computer for
a long time) can still be useful for two main reasons:

• First, for now and at least for the immediate future a large
amount of quantum algorithms will be run on classical
simulators. As these classical simulators run on classical
machines, it is reasonable to write algorithms that can
access these classical machines’ capabilities directly and
thus forego any quantum simulation when possible. This
may produce algorithms that – while not compatible with
(current) quantum computers – may at least not be as

1We leave out the discussion that ﬁnite-memory systems can never execute

all algorithms a Turing machine can execute.

superﬂuously slow when run on a quantum simulator for
testing purposes or simply due to a lack of better quantum
options.

• Second, we need tools to discover new quantum algo-
rithms that are more accessible to programmers well
versed in standard programming languages. As of now,
most setups of quantum software are built around a few
algorithm archetypes which are known or suspected to
provide some form of quantum advantage. As these few
archetypes already hold up all the fascination regarding
quantum computers,
the discovery of new archetypes
should be a big step towards more usage scenarios for
quantum computers. Enabling programmers to write an
algorithm classically ﬁrst and then translate it part by
part to quantum-suitable reformulations (while maintain-
ing a runnable program) could enable new creativity in
algorithm design.

II. APPROACH

In this work-in-progress paper we provide a very simple
assembly language that we augmented with a few quantum-
speciﬁc instructions and capabilities. Table I shows all in-
structions at our disposal. We provide basic mathematical and
logical operations as well as the “set” and “swap” instructions.
We then provide a set of instructions to manipulate program
ﬂow including the very simple “setpc” and “jump” instructions
and the more elaborate “ifte” instruction, which provides the
functionality of a standard if-then-else expression in most
programming languages. However, all of our registers can
be quantum registers, which means that
they can contain
a superposition instead of a single scalar value. This also
means that our program counter can be in superposition, which
causes the entire program state to be in superposition and
possibly execute different instructions in each of its superposed
branches.

To actually introduce said superpositions into the registers,
Table I also shows a few quantum-speciﬁc instructions. Most
notably, we can apply a Hadamard gate to a single qubit or a
range of qubits. We also provide a shortcut for the diffusion
operator used within Grover’s algorithm as well as for phase
multiplication.

Obviously, this set of instruction is far from complete even
for classical algorithms but it allows us to formulate a few

 
 
 
 
 
 
Classic Instructions
add di dj dk

mul di dj dk

div di dj dk

sub di dj dk

sqrt di dj

mod di dj dk

neg di
and di dj dk

or di dj dk

set di j
swap di dj
setpc di
jump i
skip
stop
ifte di j k

Quantum Instructions
havoc di j k

havocb i
diffusion
phase x y

add the value of cell i with the value of cell j
and write the result to cell k
multiply the value of cell i with the value of
cell j and write the result to cell k
divide the value of cell i with the value of cell
j and write the result to cell k
substract the value of cell j from the value of
cell i and write the result to cell k
write the square root of the value of cell i into
cell j
writes into cell k the modulo of the value of
cell i with respect to the value of cell j
negate the boolean value of the cell i
write into cell k the boolean value resulting
from vi ∧ vj, where vl is the value of cell dl
write into cell k the boolean value resulting
from vi ∨ vj, where vl is the value of cell dl
set the value of cell i to j
swap the values of cells i and j
set the program counter to the value of cell i
set the program counter to the value of i
do nothing
remain in this instruction indeﬁnitely
if cell i is true, set the pc to the value of j else
set the pc to the value of k

apply Hadamard gates to the qubits in range
from j to k of cell i
apply a Hadamard gate to the data qubit i
apply Grover’s diffusion operator
multiply the phase of the state by x + i · y

TABLE I
INSTRUCTION SET FOR ASSEMBLY WITH QUANTUM CAPABILITIES

simple examples of how to use our language.2

III. EXAMPLES

Listing 1 shows a simple example of what we can easily
produce when we apply superposition to the program counter.
Lines 12–15 all multiply the value in d4 by 2 (see line 6).
However, we do not always execute all of them. Instead, we
initialize the program counter to the start of these lines (see
line 5) and then add the equally distributed superposition of the
values (cid:104)0, 1, 2, 3(cid:105) to that value. When all superposed branches
of the program have been executed, we end up with an equal
superposition of values (cid:104)1, 2, 4, 8(cid:105) saved in register d4. We
were able to deﬁne such a superposed value using patterns
familiar from imperative programming and the approach can
be generalized to more complicated superposed program ﬂows.
Listing 2 shows how we could evolve quantum algorithms
from classical ones. We use a staple example of quantum
computing, i.e., ﬁnding the prime factors of a given number;
but we start out with the most common classical approach
to that problem, i.e., the sieve of Eratosthenes [4]. If we
assume that in the classical world we would simply derive
the prime factors of a number by trying out all possible
divisors, it appears evident that such a search for a divisor
might be accelerated by employing Grover’s algorithm [5].
this is a bit counterintuitive to anyone familiar
Naturally,
with Shor’s algorithm [6], which we will discuss in a bit.

2See https://github.com/marian-lingsch/quantum-assembler.

(cid:7)

1

; n o n d e t e r m i n i s t i c m u l t i p l i c a t i o n
; p r o d u c e s m u l t i p l e p o w e r s o f 2

3 s t a r t :

havoc d0 0 2
s e t d1 subMul
s e t d2 2
s e t d4 1
add d0 d1 d3
s e t p c d3

5

7

9

11 subMul :

mul d4 d2 d4
mul d4 d2 d4
mul d4 d2 d4
mul d4 d2 d4
s t o p

13

15

(cid:6)

(cid:4)

(cid:5)

Listing 1. Nondeterministic multiplication

However, the approach still works: In Listing 2, we assume
that the number we want to split into factors is given as
“NUMBER1” (see line 4) and just to keep things simple we
assume that said number’s bit count is given as “NUMBER2”.
Obviously, a slightly more powerful assembly language could
just derive that information with a single instruction. Line 8
then creates a superposition of all numbers of the same length
as our input “NUMBER1” and with line 9 we ensure that
this superposition no longer contains the values 0 and 1 so
that we can try all remaining values as possible divisors. In
line 10 we again utilize the superposed value in d1 to compute
the remainder for all divisors. We then set up the parameters
for Grover’s search (lines 11–16) and subsequently perform
the calculated amount of iterations within Grover’s search,
looking for a single 0 remainder within the superposed value
of d2. Note that we implemented the instructions “phase” and
“diffusion” within the instruction set speciﬁcally to enable a
straightforward deﬁnition of algorithms like Listing 2 based
on Grover’s search. Specialized instructions like these not only
increase readability but might also allow future versions of the
simulator to implement classical shortcuts for certain behavior.
We compared the quasi-quantum program in Listing 2 to
its purely classical counterpart, for which we do not provide
an additional
looks
entirely as expected). It is important to note that we also
wrote the classical algorithm for the sieve of Eratosthenes
using the same quantum-enabled assembly language and ran
it using the same quantum simulator [7]. Figure 1 shows the
respective run times of both algorithms for the whole range
of inputs. We can see that the classical algorithm takes the
longest on actual prime numbers where it needs to try out
every possible divisor while the quantum algorithm needs to
produce the superposition of all possible divisors for every
single input value regardless. However, it is interesting to note
that within our simulator, both approaches show a remarkably
similar performance. This justiﬁes our approach to offer a
“soft transition” from a purely classical execution of a purely
classical algorithm to a classical simulation of an algorithm

listing to save space (and because it

(cid:7)

s t a r t :

(cid:4)

2

4

6

8

10

12

14

16

r e p r e s e n t e d by 8 b i t s

l o g 2 ( s q r t (NUMBER1 ) )

i s

t o

s e t number

f o r w h i c h i s

be f a c t o r i z e d

;
;
s e t d0 NUMBER1
; h a v o c i s u s e d i n r a n g e f o r m a t
; e a c h i n t
; NUMBER2 e q u a l s
havoc d1 0 NUMBER2
add d1 2 d1
mod d0 d1 d2
; d3 i s
;
add d0 0 d3
s q r t d3 d3
d i v d3 4 d3
mul d3 3 d3

t h e amount o f
o f Grover ’ s a l g o r i t h m

i t e r a t i o n s

18 g r o v e r :

i f t e d2 jumpTrue j u m p F a l s e

20

22

24

26

28

30

32

j u m p F a l s e :

phase −1.0 0 . 0
jump s u b D i f f u s i o n

jumpTrue :

s k i p
jump s u b D i f f u s i o n

s u b D i f f u s i o n :
d i f f u s i o n
sub d3 1 d3
i f t e d3 s u b S t o p g r o v e r

34 s u b S t o p :
s t o p

(cid:6)

Listing 2. Factoring via Grover

with quantum parts without necessarily blow up the run time
disproportionally.

Fig. 1. Comparison between classical and quantum factoring algorithms
written in our assembly language.

instruction sets in order to provide a “soft transition” into
quantum software for more quantum algorithms.

In principle, there is no reason to keep this “transition
language” at an assembly level;
in fact, for usability it
might be especially important to translate our concepts of
quantum program ﬂow to more high-level language models
(and perhaps offer automatic translation back to assembly
level to maintain compatibility). An ideal case might be to
allow a programmer to use a modern programming language
and insert quantum-compatible expressions one by one until
an interpreter or compiler notices that a certain module is
now fully quantum-compatible and then offers the option to
also run it on quantum hardware (compare Tyagi et al. [8]
for the case of reversible computing). However, high-level
abstractions for quantum computing that are both intuitive and
powerful are still very much sought after.

(cid:5)

IV. CONCLUSION

REFERENCES

The assembly language shown here is very limited but is
intended to provide an idea how to re-think hybrid program-
ming coming from full-ﬂedged classical languages. We have
analyzed how quantum program ﬂow might look like on an
assembly level and how it may allow to construct complex
quantum states in an intuitive and imperative manner (List-
ing 1). We have also presented how very versatile quantum
approaches like Grover’s search can be integrated into well-
known classical algorithms in a straightforward way (List-
ing 2), even though we sacriﬁce the ability to run the resulting
algorithms on today’s quantum computers immediately. In that
case, we can also see where the approach still falls short:
While implementing Grover’s search here may provide some
beneﬁts, quantum programmers know that Shor’s algorithm
provides an even better way to solve the factorization problem
on a quantum computer. However, that algorithm is not as
easily derived from its classical counterpart – or at least our
language does not yet allow to do so. Future versions of the
language should provide more versatile and more powerful

[1] S. Bravyi, D. Gosset, and R. K¨onig, “Quantum advantage with shallow

circuits,” Science, vol. 362, no. 6412, pp. 308–311, 2018.

[2] F. Arute, K. Arya, R. Babbush, D. Bacon, J. C. Bardin, R. Barends,
R. Biswas, S. Boixo, F. G. Brandao, D. A. Buell et al., “Quantum
supremacy using a programmable superconducting processor,” Nature,
vol. 574, no. 7779, pp. 505–510, 2019.

[3] A. W. Cross, A. Javadi-Abhari, T. Alexander, N. de Beaudrap, L. S.
Bishop, S. Heidel, C. A. Ryan, J. Smolin, J. M. Gambetta, and B. R.
Johnson, “OpenQASM 3: A broader and deeper quantum assembly
language,” arXiv preprint arXiv:2104.14722, 2021.

[4] C. Hoare, “Proof of a structured program: ‘The sieve of Eratosthenes’,”

The Computer Journal, vol. 15, no. 4, pp. 321–325, 1972.

[5] A. Mandviwalla, K. Ohshiro, and B. Ji, “Implementing Grover’s algorithm
on the IBM quantum computers,” in 2018 IEEE International Conference
on Big Data (Big Data).

IEEE, 2018, pp. 2531–2537.

[6] B. P. Lanyon, T. J. Weinhold, N. K. Langford, M. Barbieri, D. F. James,
A. Gilchrist, and A. G. White, “Experimental demonstration of a compiled
version of Shor’s algorithm with quantum entanglement,” Physical Review
Letters, vol. 99, no. 25, p. 250505, 2007.

[7] T. Gabor, M. Lingsch Rosenfeld, and C. Linnhoff-Popien, “Simple
quantum state encodings for hybrid programming of quantum simulators,”
in 2nd Workshop on Quantum Software Architecture (QSA), 2022.
[8] N. Tyagi, J. Lynch, and E. D. Demaine, “Toward an energy efﬁcient lan-
guage and compiler for (partially) reversible algorithms,” in International
Conference on Reversible Computation. Springer, 2016, pp. 121–136.

