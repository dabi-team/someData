The Simons Observatory: Antenna control software
integration and implementation

Lauren J. Saundersa, Matthew Hasselﬁeldb, Brian J. Koopmana, and Laura Newburgha

aDepartment of Physics, Yale University, New Haven, CT 06511, USA
bCenter for Computational Astrophysics, Flatiron Institute, New York, NY 10010, USA

ABSTRACT

The Simons Observatory (SO) is a ground-based cosmic microwave background survey experiment that consists
of three 0.5 m small-aperture telescopes and one 6 m large-aperture telescope, sited at an elevation of 5200 m
in the Atacama Desert in Chile. SO will study the polarization and temperature anisotropies of the Cosmic
Microwave Background (CMB). The observatory will require well-understood telescope pointing and scanning.
Good antenna control will allow us to execute the scan strategy devised to optimize sensitivity to our scientiﬁc
goals, calibrate the system with celestial targets, and make maps. To achieve this, we integrate the data
acquisition and control of the telescopes’ Antenna Control Units (ACUs) within the software framework of
the SO Observatory Control System (OCS). We present here the current status of the software integration
for the ACUs, as well as measurements of the Small Aperture Telescope platforms’ responsiveness to software
commanding in the factory, plans for in situ measurements, and prospects for implementation on the Large
Aperture Telescope.

Keywords: Cosmic Microwave Background, Antenna Control Unit, Observatory Control System, Simons Ob-
servatory, control software, monitoring, data acquisition

1. INTRODUCTION

The Simons Observatory (SO) is a new ground-based Cosmic Microwave Background (CMB) experiment being
constructed in the Atacama Desert in Chile. The observatory will consist of three 0.5 m Small Aperture Telescopes
(SATs)1 and one 6 m Large Aperture Telescope (LAT).2 The combination of Large and Small Aperture Telescopes
will cover a wide range of science goals, including constraining the sum of the neutrino masses and eﬀective
number of relativistic species, measuring or constraining the primordial tensor-to-scalar ratio, and measuring
the duration of reionization.3, 4 To accomplish these goals, the observatory will ﬁeld more than 60,000 cryogenic
bolometers across the four telescopes, and will also require a variety of instruments to modulate the sky signal,
maintain the operations of the observatory, and monitor the operating conditions of each telescope.

Conducting observations with any observatory requires well-organized data acquisition, control, and moni-
toring for all of these instruments. Observations with motorized telescopes additionally requires adherence to
scientiﬁcally-motivated scan strategies, and coordinated responses from a series of systems within the telescope
to take detector data, perform ancillary maintenance activities, and acquire auxiliary data. While such data
acquisition and control software systems exist on other telescopes,5 these systems do not meet the requirements
for use on SO. To ensure that the SO data acquisition, control, and monitoring needs are met, we have designed
the Observatory Control System (ocs).6

In these proceedings, we present an overview of the software used to operate the telescope platforms for the
Simons Observatory. In Section 2, we give a brief overview of the ocs software. In Section 3, we discuss the
capabilities of the Antenna Control Unit (ACU) software, which provides the interface for data acquisition and
control of the telescope platforms. In Section 4, we detail the ACU Agent, which is the interface between the
ACU software and ocs. In Section 5, we discuss software testing completed with the SAT platforms in the factory
setting. In Section 6, we discuss future work with the ACU and ocs software, including expected updates for
the LAT and planned testing with the SATs in situ. Appendix A contains tables of data ﬁelds collected via the
ACU Agent.

Corresponding author: lauren.saunders@yale.edu

2
2
0
2

l
u
J

8
1

]

M

I
.
h
p
-
o
r
t
s
a
[

1
v
9
4
9
8
0
.
7
0
2
2
:
v
i
X
r
a

 
 
 
 
 
 
2. OBSERVATORY CONTROL SYSTEM
The Observatory Control System (ocs)∗ is a distributed data acquisition, control, and monitoring system. It
is designed for ease of use in the complex, distributed systems commonly seen in modern observatories. ocs is
described in detail in Ref. 6; it is described brieﬂy here for context.

The ocs architecture provides two main components: Agents and Clients. ocs Agents are servers that act as
the interface between the larger ocs framework and a hardware or software component of the observatory. Each
Agent contains operations denoted as Tasks and Processes. A Task is an operation that completes a job and is
expected to do so in a ﬁnite amount of time; for example, commanding the telescope platform to move from one
position to another would be a Task. Processes run continuously until commanded to stop, and are frequently
used for continuous data acquisition. ocs Clients are objects that call the operations allowed by the Agent. ocs
Agents communicate via a Publish/Subscribe (PubSub) pattern, and Tasks and Processes may run on Agent
startup or be called by a Client by a Remote Procedure Call (RPC). These communications are facilitated by a
central Web Application Messaging Protocol (WAMP) router; ocs uses crossbar.io† as its implementation of
this router.

Data collection and live monitoring are handled separately for detectors and all other hardware objects. The
details of the detector data acquisition and monitoring are beyond the scope of these proceedings. For all other
devices, which we refer to as “housekeeping” devices, data collected by ocs Agents are published to ocs Feeds,
which are a communication layer on top of the basic PubSub functionality used to pass data among diﬀerent
Agents and Clients. Due to diﬀerences in the individual housekeeping components, the data within these feeds
are published asynchronously at varying rates. The Housekeeping (HK) Aggregator Agent subscribes to these
Feeds and writes these data to disk in the G3 ﬁle format.

To conduct remote live-monitoring of the housekeeping data sets, we use Grafana‡, an open-source web-based
application designed for visualization and analytics of time-series data. Data is shown in plots called “panels”,
accessible on web pages called “dashboards”. Grafana allows a conﬁgurable data backend; for the ocs, we use
InﬂuxDB, a popular data source backend developed by InﬂuxData§. InﬂuxDB is designed for quick access to
time-series data, and is suitable for loading data for most SO housekeeping data needs.

We additionally implement a custom ocs web interface, which is written in JavaScript and rendered as a GUI

in a web browser. ocs web provides control panels and data feed values for all Agents connected to ocs.

3. TELESCOPE PLATFORM AND ANTENNA CONTROL UNIT

We discuss here the telescope platforms, which are the hardware frameworks that support the telescope receivers,
as well as the Antenna Control Unit, a computer used to communicate with and control the platforms. The
physical platforms for the SATs and LAT and the ACU are developed by Vertex Antennentechnik GmbH¶
(referred to as “VA” throughout these proceedings).

3.1 Telescope Platforms

The platforms for the SATs and LAT support the telescope receivers and the LAT mirror. All four platforms
are constructed by VA, and are fully assembled and tested at the VA company facility in Duisburg, Germany.
Each platform has three axes of rotation: the Azimuth, Elevation, and Third axes (see Figure 1). The Azimuth
axis refers to the spherical azimuth angle; each telescope platform may traverse 570◦ of rotation on this axis.
The Elevation axis refers to the complement of the spherical polar angle, with allowed angles between 20◦ and
90◦. The Third axis refers to the rotation of the receiver; on the SATs, the Third axis is referred to as the
Boresight axis. Motors power the motion of each axis; for the SATs, the Azimuth and Boresight rotations are
powered by two motors for each axis, while the Elevation rotation is powered by one motor. Encoders along

∗https://github.com/simonsobs/ocs
†https://crossbar.io
‡https://grafana.com/
§https://www.influxdata.com/
¶https://www.vertexant.com/

each platform axis measure rotation, and are interpreted by the Antenna Control Unit (ACU). Each axis is
additionally equipped with brakes to arrest motion, and limit switches to prevent rotations beyond the allowed
motion limits.

Figure 1. The three SAT axes of rotation are depicted with a picture of a SAT for reference. The Azimuth axis corresponds
to the spherical azimuth angle, the Elevation axis to the complement of the spherical polar angle, and the Boresight axis
to the rotation about the center of the focal plane.

3.2 ACU Overview

The ACU is an industrial computer with specialized device cards and VxWorks, a real-time operating system,
installed. It is housed in an electronics rack and supports a wired connection to the telescope platform. The
ACU software and interfaces were developed by VA, in consultation with SO representatives. The ACU is used
for both data collection and interpretation, and for controlling the telescope motors. It provides a local interface
for data visualization and commanding, as well as a remote interface. Users can connect to the ACU remotely
via HTTP interface, and can collect data from this HTTP interface as well as via a User Datagram Protocol
(UDP) server. The data and commanding available through these connections is discussed in Section 3.3.

The ACU additionally has a built-in Emulator Mode to enable software development. This operational mode
provides a software emulator that is programmed to behave like an ideal telescope platform. The ACU interprets
the emulated encoder positions and allows users to perform the allowed commands in Emulator Mode. The
development of software described in Section 4 was completed with the ACU in Emulator Mode; following the
completion of this software development, we performed initial tests with the SAT platforms, described in Section
5.

3.3 ACU Software Overview

The ACU software is built by VA in conjunction with the telescope platform hardware, and is updated as needed
to accommodate SO data collection and commanding needs, correct software bugs, and make routine updates.
To ensure accurate timestamps, the ACU’s internal clock is synchronized to a GPS signal using Precision Time
Protocol (PTP). This timestamp is included in all data from the ACU.

The ACU outputs a 200 Hz data stream via UDP. For the SATs, this stream contains timestamps, encoder
positions for each axis, and the currents through the motors on each axis. Each axis also has two recorded
encoder positions: the true encoder position, and the encoder position after any pointing model corrections
applied by the ACU. During 48 hours of continuous data collection from this stream, we found no dropped data
frames.

The ACU HTTP server provides several data sets at 20 Hz that can be accessed via web browser or the
command line. These include data sets containing details about the pointing model and refraction corrections,
which can be set by the user; parameters speciﬁc to the third axis; faults and errors; and the general status of
the platform. The values that are most frequently needed to understand the performance of the SAT platform
are also available under a Detailed SAT Platform (SATP) Dataset. These values include the pointing model-
corrected encoder positions for each axis; booleans for whether limits, faults, and errors are triggered; and general
status information about the platform and the ACU itself.

The ACU software contains an internal parameter to control the motion mode, which informs the software
of how to calculate the telescope trajectory. There are several available motion modes, including: stop mode,
which engages the brakes and prevents current from going through the motors; a point-to-point motion mode,
which commands the platform to move to a position and maintain that position; and an uploaded scan mode,
which directs the telescope to follow a path that is uploaded to the ACU as points by the user.

This HTTP server additionally provides the interface for sending commands via the ACU. Motion types,
which use the above modes, include: point-to-point motions at the maximum allowed velocity; stopping, which
engages the brakes; constant-velocity motion, where the velocity is set by the user; star tracking; stow mode,
which moves the telescope to a pre-chosen position when not in use; and scan tracking, which traces a path
between points in time and position that are uploaded by a user. The uploaded scan requirements and features
are discussed in the next paragraph. Other commands include clearing any uploaded scan points from the stack,
changing the motion mode of an axis, and changing pointing model and refraction parameters. Motion commands
require a change in the telescope motion Mode, which allows the ACU to correctly interpret motion types.

The ACU software is designed to calculate trajectories between points for a scan to best create a smooth,
well-controlled motion. To execute a scan, the user may upload a text ﬁle to the ACU via a scan points upload
HTTP interface. Each line of the ﬁle must contain seven data points: the time, in the format Day of Year,
Hour:Minute:Second; the values of Azimuth and Elevation to reach at those times; the velocities of the motion
along each of these axes; and ﬂags for each type of axis motion, which denote whether the point refers to a
position within the constant-velocity part of a scan, is the ﬁnal point before a turnaround, or is in an undeﬁned
part of the scan. The uploaded times must be spaced a minimum of 0.05 seconds apart. A maximum of 10,000
points may be uploaded to the stack at any time, and points may be added to the stack whenever there are
free positions; this allows scans of any length to be uploaded in batches of ≤10,000 points. As an hour-long
scan would require 72,000 uploaded points, we preference the method of uploading a smaller number of points
at ∼1 minute intervals. Using these uploaded points, the ACU calculates the trajectory. When the motion
is a constant-velocity portion of a scan, the ACU calculates the trajectory with a linear interpolation. For
turnarounds and undeﬁned scans, it instead applies a cubic spline interpolation.

4. ACU AGENT

The ACU ocs Agent is the software interface between the ACU software and the ocs framework. It facilitates
all of the data acquisition, live monitoring, and commanding for the ACU for the SO ocs user, and enables the
ACU to be used in conjunction with other telescope systems when conducting observations. In this section, we
discuss the custom Python library used with the ACU Agent, called soaculib (Section 4.1), Agent operations
(Sections 4.2, 4.3, and 4.4), and a software simulator of the ACU (Section 4.5).

4.1 soaculib
soaculib‖ is a Python library and function repository custom-built to support ACU Agent communications
with an ACU. While it was built with this goal in mind, soaculib may also be used for communications with
the ACU outside of the ocs framework. The soaculib library includes HTTP protocol setup, the ACU-speciﬁc
HTTP statements, conﬁgurations for each ACU, and information about the ﬁelds within the Detailed SATP
Status Dataset.

soaculib provides an HTTP backend interface to streamline the HTTP protocol usage within the ACU
Agent. We provide options for a backend using the Python requests library (which we refer to as the “standard

‖https://github.com/simonsobs/soaculib

backend”) or a backend using an instance of the Python twisted library (which we refer to as the “twisted”
backend). We most commonly use the standard backend for debugging HTTP communications outside of ocs
testing, and use the twisted backend for ocs communications, as this library allows us to perform asynchronous
requests. The library additionally contains the vocabulary necessary to request values from and send command
requests to the ACU. To ensure that the Agent queries the correct ACU Datasets and receives the expected
value ﬁelds, the soaculib library also contains conﬁguration ﬁles for each ACU that may be connected to the
ocs computer, as well as a dictionary of the ﬁeld keys expected from the primary Status Dataset queried by the
Agent. This ﬁeld key dictionary additionally assigns short, descriptive names to each ﬁeld using only characters
allowed in the ocs Feed ﬁeld names.

4.2 Data Acquisition Processes

As detailed in Section 3.3, the ACU streams a small subset of data ﬁelds at 200 Hz via UDP, and additionally
supports a wide array of data ﬁelds that may be queried via HTTP connection, divided into several Datasets.
For SO data acquisition purposes, we collect both the 200 Hz data and the 20 Hz Detailed SATP Status Dataset,
managed by Agent Processes broadcast and monitor, respectively.

The broadcast Process sets up a UDP server to collect all packets broadcast via UDP on a designated port.
Each packet contains 10 data points, which are in a binary Datagram format. The broadcast function accesses
the binary format as it is stored in the conﬁguration ﬁle within soaculib. It uses the struct module in Python
to calculate the length of each datum and decode the data. Data are then added to a list within the function,
and processed for publishing to the OCS Feed in groups of 200. For each datum within the group, we use the
ACU-generated day of year and second of day timestamps to calculate the time since the epoch (ctime), so
that we record a unique timestamp for each datum. The other data ﬁelds produced by the ACU in this data
stream are additionally collected and separated by index. Using the data ﬁeld names, as stored in the soaculib
conﬁguration ﬁle, the broadcast function builds a dictionary of each ﬁeld name and corresponding datum. The
dictionary is then published to an OCS Feed. The HK Aggregator Agent subscribes to this feed and records the
data on disk in G3 ﬁles.

The monitor Process utilizes the tools from soaculib to query the HTTP server for the Detailed SATP
Dataset. Data from this Dataset is then divided into blocks, which are structured according to the status keys
module of soaculib and renamed according to the key dictionary of this same module. monitor then publishes
the blocks to one OCS Feed, giving each block a descriptive block name. The HK Aggregator Agent subscribes
to this feed and records the data on disk. All data types output by the ACU Detailed SATP Dataset (strings,
integers, ﬂoats, Nones, and booleans) are accepted by the HK Aggregator Agent and saved to G3 ﬁles.

The HK data ﬁelds are described in Appendix A. Both broadcast and monitor have additional features to

handle data recorded with InﬂuxDB, which is described in Section 4.3.

4.3 Live Monitoring

While InﬂuxDB is well suited as a live monitoring backend for most data, it can experience a substantial slowdown
when large amounts of data are queried. The 200 Hz broadcast data from the ACU Agent runs the risk of
causing a signiﬁcant slowdown of the backend server when querying the data for live monitoring. To reduce
this load, we have chosen to publish only every tenth datum from this data set to InﬂuxDB, such that the data
rate as recorded by InﬂuxDB is 20 Hz. The broadcast Process of the ACU Agent therefore publishes data to a
second OCS Feed, which contains only these points and is not saved to disk in the G3 ﬁle format.

Within the Detailed SATP Dataset, most values are either ﬂoats or integers. However, the motion modes are
written as strings, which may be published as-is to an OCS Feed, but cannot be interpreted by InﬂuxDB. To
accommodate live monitoring for the motion mode ﬁelds, we assign each string an integer value: for example,
stop mode is assigned to value 0, point-to-point mode to 1, and uploaded scan mode to 2. We additionally
translate all boolean values to their 0 and 1 integer counterparts, and publish these translated values to an
OCS Feed that is subscribed to only by the InﬂuxDB Publisher Agent. In addition, the Detailed SATP Dataset
includes values for commanded positions on each axis; this value is set to None when no position is commanded.
Because the None type is not accepted by InﬂuxDB, we write to a special OCS Feed that only publishes these
values to InﬂuxDB when the value is not None.

4.4 Command Operations

The ACU Agent is written to support six operations for sending commands to the ACU. These operations are:
go to, set boresight, scan fromfile, constant velocity scan, generate scan, and stop and clear.

The go to Task is used to set speciﬁed Azimuth and Elevation positions for the telescope platform. This Task
has two required input values, the desired Azimuth and Elevation values; as well as three optional inputs: the
time for the Task to wait for motion to begin (default value 0.1 seconds), the rounding precision for determining
the platform’s current position (default value 1 decimal place), and a parameter for activating the brakes and
setting all three axis Modes to Stop at the end of the motion (the default is to not perform this stop). This
function therefore has two purposes: it can be used to set new positions in Azimuth and Elevation and move to
them, or it may be used to set the Azimuth and Elevation axis motion modes to the point-to-point mode and
maintain the current position. For both uses, the Task ﬁrst checks the current position, then calls the go to
method of soaculib. If the input Azimuth and Elevation positions are the same as the current position within
the speciﬁed rounding precision, the Task completes after calling the soaculib go to method. When moving
to a new position, the Task ﬁrst checks whether the platform has begun moving by reading the velocity values
and waiting for them to change from 0.0◦/s. If the velocities stay at 0.0◦/second for longer than 30 seconds, the
value for the current position is checked. In the case that the current position has not changed from the initial
position, the Task is aborted, the brakes are engaged, and the telescope is set to Stop mode to investigate why
the platform has not moved. If the axis velocities do change, the velocity values are monitored until they are
both close to 0.0◦/second, within the degree of rounding precision speciﬁed when calling the Task. The Task
then monitors the Azimuth and Elevation position values, and waits until these values are within the speciﬁed
rounding precision. If the parameter to stop the platform after the motion is set to True, the Task then calls the
soaculib stop command, which engages the brakes and sets all three axis Modes to Stop. An example of this
Task is shown in Figure 2.

The set boresight Task is similar to the go to Task, but is used to set the value for the Boresight or 3rd
Axis only. Because the Boresight axis is controlled separately from the other two axes by the ACU, this Task
uses the go to 3rd axis method of soaculib, but otherwise follows the logic of the go to Task.

Our ability to command the platforms to complete scans is vital to our planned observation strategies. Most
planned scans will involve constant-velocity Azimuth rotations at a set Elevation. To command these scans, we
implement the constant velocity scan Task within the ACU Agent. This Task calls a specialized helper func-
tion that uses input parameters for the Azimuth scan endpoints, Elevation value, Azimuth scan velocity, and the
Azimuth turnaround acceleration, to calculate a scan trajectory. This trajectory includes ordered lists of times
to reach each position, Azimuth values, Elevation values, velocities on each axis, and ACU scan ﬂags for each
axis. Although the points generated with this function are evenly spaced along the constant-velocity portions of
the scan, the function uses the input acceleration to calculate a time gap for the turnaround. We leave this gap
for interpretation by the ACU cubic spline interpolation of the turnaround. Another helper function then writes
this information as a list of strings in the format Day of Year, Hour:Minute:Second; Azimuth Position,
Elevation Position, Azimuth Velocity, Elevation Velocity, Azimuth Flag, Elevation Flag. Alterna-
tively, for scans planned with variable Azimuth velocities or varying Elevation positions, we can create a numpy
ﬁle containing the ordered lists for time, Azimuth, Elevation, Azimuth velocity, Elevation velocity, Azimuth ﬂags,
and Elevation ﬂags. The fromfile scan Task of the ACU Agent calls helper functions that read the numpy ﬁle
and reformat the information into the list of strings in the correct format. Both of these Tasks then call an ACU
Agent function that changes the axis Modes to PtStack and uploads the lines to the ACU in batches using the
soaculib PtStackUpload method. While the scan is running, this function monitors the number of free upload
stack positions; when a certain number of positions are free, it uploads another batch of lines, until there are no
more lines to upload. It then monitors positions and velocities to determine when the scan has concluded.

The length of these constant-velocity scans is limited by the control computer memory, as all of the upload
lines must be stored in RAM. This causes signiﬁcant slowdowns and hanging when scans last more than a few
hours. For arbitrarily long scans, we implement another operation, generate scan. This Process calls a helper
function which establishes a Python generator to create new upload points in batches. These points are then
converted to the necessary line format and uploaded to the ACU in batches in the same way as for the other scan
types. The upload frequency is determined by the number of free upload stack positions, such that the number

of available upload points rarely exceeds 5100. The generate scan function is only used for constant-velocity
Azimuth scans.

Figure 2. Three motion types are executed on the Azimuth axis in sequence by an ACU in Emulator Mode, shown here
in a Grafana dashboard set to monitor the ACU. The top panel shows the Azimuth mode as translated by the Agent for
InﬂuxDB (where mode 0 is stop mode, mode 1 is point-to-point motion mode, and mode 2 is uploaded scan mode). The
bottom panel shows the Azimuth position. In this motion, the motion mode is changed three times. In segment a, the
ACU is switched to point-to-point motion mode, and completes a motion at maximum speed from -40◦to 20◦. In segment
b, the ACU is switched to the uploaded scan mode and completes a scan with velocity ±2◦/second, scanning back and
forth between 20◦and 100◦. Finally, in segment c, the ACU is switched to stop mode, the brakes are engaged, and all
motion on the Azimuth axis is stopped.

The operation stop and clear is a Task whose primary purpose is to activate the platform brakes and clear
out any values that may have been uploaded to the stack for a scan. The platform brakes are activated with
an soaculib stop function. This sends a stop command to the ACU and resets the Mode for all telescope
axes to Stop. The stack is cleared using an soaculib Command function, with parameter ‘Clear Stack’. The
stop and clear Task can be used to abort other motion operations. An example of the stop and clear Task
being used to abort a scan is shown in Figure 3.

4.5 ACU Simulator

Building a full-observatory testing environment is essential to testing the software stability and user control
interface of the ACU Agent, as well as the full ocs software system. Due to limited availability of the ACU and
the need to test with three SATs and one LAT together, these tests require a piece of software that can simulate
the behavior of an ACU without needing to access the actual ACU in Emulator Mode. It is important that this
simulator correctly handles commands from the ACU Agent, and generates data identically to the real ACU, so
that it can be used with the ACU Agent and data can be interpreted by other pipeline software.

The ACU simulator consists of a multi-threaded server that stores and updates simulated ACU data, and
serves this data via a UDP server and an HTTP server. The data is generated, stored, and updated with a single
Python class, the UDP server uses the standard socket module, and the webserver is built using the Flask∗∗

∗∗https://flask.palletsprojects.com/

Figure 3. While a constant-velocity scan is proceeding, the user runs a stop and clear Task via an ocs Client, shown
in the Grafana dashboard set up to monitor an ACU in Emulator Mode. We show the number of free upload positions
(upper left), the Azimuth motion mode (upper right), and the Azimuth position (bottom). The stop and clear Task
changes the motion mode from the upload scan mode (interpreted as 2) to stop (interpreted as 0). The brakes are applied,
so all motion on the Azimuth axis is ended. The Task then clears all of the uploaded points from the stack, resetting the
number of free stack positions to 10000. The operation shown in this ﬁgure was performed with an ACU in Emulator
Mode.

framework. Data may be queried from the HTTP server, and commands can be sent using the same protocols
used by soaculib. The ACU simulator can be used with the ACU Agent to simulate data output, go to
and set boresight commanding, fromfile scan and constant velocity scan Tasks, and the generate scan
Process.

5. SAT FACTORY TESTING

We performed a series of tests to ensure correct ACU functioning before the ACUs and SAT platforms were
shipped to Chile. These tests were performed with the ACUs connected to SAT platforms; the ACUs were
additionally connected to a computer with the ocs and soaculib software installed. ocs users connected
remotely via SSH to the ocs computer. Tests were divided into two sections: data acquisition and trigger
testing, and ocs command testing. Data veriﬁcation and analysis was completed oﬄine.

5.1 Data Acquisition Testing

Data acquisition testing was performed simultaneously with a series of VA-administered tests. With the ACU
Agent and ocs data aggregation and live monitoring running, a VA technician stepped through a variety of
procedures to trigger each expected limit, fault, error, and warning within the Detailed SATP Status Dataset.
This allowed us to exercise the interface and ensure that the Detailed SATP Status Dataset was fully compatible
with the SO data requirements and the ACU Agent. All discrepancies were corrected, so that for each triggered
value, the ocs users veriﬁed that the value was also triggered in the Dataset as seen on the ocs web interface.

5.2 Command Testing

The initial set of command tests were performed as part of the VA-administered testing. To ensure that all
aspects of remote commanding of the ACU function as expected, we uploaded new refraction and pointing
model parameters to the ACU and monitored the response in the Datasets. We observed that, when left in
point-to-point motion Mode, the platform axis positions changed slightly to account for these new parameters,
as expected.

Following the VA-administered software testing, we performed a series of tests to demonstrate ocs control
of the telescope platforms via the ACU, supervised by VA. We began by performing a series of commands
to ensure functionality: we performed a point-to-point motion with the go to Task, a short scan with the
constant velocity scan Task, and a Boresight rotation with the set boresight Task. The stop and clear
Task was executed between each motion. During the testing with the SAT 3 platform, we additionally executed
a fromfile scan with varying Azimuth velocity and a commanded Elevation sinusoidal motion (Figure 4). The
trajectory was executed as expected by the ACU.

Figure 4.
Screenshot of the Grafana Dashboard during a fromfile scan Task. The scan executed here involves a
varying-velocity Azimuth motion and a sinusoidal Elevation motion. The top left panel shows the Azimuth position in
green as recorded with the monitor process. The top right panel shows the Azimuth position in green as recorded by
the broadcast process, along with a time derivative calculated by Grafana in yellow. The bottom left panel shows the
Elevation position in green as recorded by the monitor process. The bottom right panel shows the Elevation position in
green as recorded by the broadcast process, along with a time derivative calculated by Grafana in yellow.

Several further tests were performed to better understand ACU and telescope platform motion performance,
particularly during and at the end of scans. To perform these tests, we ran several constant velocity scan
Tasks with varying velocities and turnaround accelerations. These tests are discussed in Section 5.3.

5.3 Data Veriﬁcation

Because constant Elevation and constant Azimuth velocity scans will be our primary scanning pattern, we
collected data during the factory testing with the SATs to best understand ACU and platform behavior during
these types of motions.

An important consideration in executing these scans is the smoothness and acceleration during turnarounds.
Due to the internal ACU software calculating the turnaround trajectory using a cubic spline interpolation,
we chose to verify satisfactory turnaround behavior during our oﬄine analysis. An example of this turnaround
behavior is shown in Figure 5. In addition to the positional measurements, we calculate the trajectory velocity and
acceleration using the numpy.gradient method. We conclude that the acceleration is suﬃciently low throughout
the turnarounds, and the motion is suﬃciently smooth.

Figure 5. An example of turnarounds in an ocs-controlled Azimuth scan, from positive to negative velocity (left) and
negative to positive velocity (right). The plots in each column, from top to bottom, show the Azimuth position, velocity,
acceleration, and motor currents. The brief ﬂattening of the velocity curves, as well as the peaks in acceleration and
motor currents, are expected from the platform design.

The accuracy of scan commanding is of high importance for executing well-controlled scans. To assess the
scan uploading functionality, we compare the uploaded scan values to the encoder-measured positions. We ﬁnd
that for scans with a suﬃciently low turnaround acceleration and suﬃciently high velocity, the encoder-measured
positions match the uploaded positions with < 0.02% error, well within speciﬁcations (Figure 6). We note that
for low velocities and high turnaround accelerations, the turnaround time as calculated by the Agent is not long
enough for the platform to complete the turnaround, resulting in less accurate scanning.

The Agent uses rounding, with user-speciﬁed precision, to determine whether scans have completed their
paths. However, if the rounding precision of the Agent is greater than the precision of the scan trajectory as
determined by the ACU, the Agent may not complete the scan Task due to a mismatch of position values; if
the rounding precision of the Agent is too low, the scan may complete too soon. To better determine the ends
of scans with the Agent, we conducted an analysis of the stopping times and displacement from commanded
scan ends for scans at several velocities (Figure 7). This comparison will allow us to assess how long the Agent
should wait for the position to settle before completing a scan Task, ranging from ∼1 second to ∼1.5 seconds.
The velocity-dependent settling time and analysis of appropriate rounding precision will be used to improve the
end conditions for the scan Task.

We additionally tested the Elevation axis behavior during Azimuth-only scans. Because we can perform
Azimuth-only scans with the Elevation axis set to either the uploaded scan mode or stop mode, we tested
Azimuth scans with both of these mode options for the Elevation axis to determine what the best software
practice is for scans. Examples of the results of these tests are shown in Figure 8. We determined that when
the Elevation mode is set to the upload scan mode, the Elevation axis exhibits a random variation and draws
current through its motor. When the Elevation mode is kept in stop mode during an Azimuth scan, the Elevation
motors draw almost no current, and exhibits a small, periodic bobble. We concluded that, because the bobble
is predictable and repeatable and the motor current is limited, the best practice is to set the Elevation axis to
stop mode when performing Azimuth-only scans.

Figure 6. We compare the trajectory values uploaded to the ACU to the encoder-measured trajectory during a constant
velocity scan. The gaps between the last uploaded point before a turnaround and the next point are left when we calculate
the scan trajectory to upload; we do not upload points within the turnaround, and instead leave this to the ACU cubic
spline interpolation. We ﬁnd that, for suﬃciently spaced turnarounds, the encoder-measured values match the uploaded
values to a high degree of precision (< 0.02% error) during the majority of the scan. The greatest degree of error occurs
at the beginning of the scan, due to friction.

Figure 7. Examples of Azimuth-only scan completions with diﬀerent scan velocities. We see that when completing scans
with higher constant velocities, the SAT platform takes slightly longer to settle at the end positions. For the highest-
velocity (2 degrees/second) scans measured in this manner, the platform takes about 1.5 seconds to settle at the ﬁnal
position; for the lowest velocity (0.1-0.3 degrees/second) measured, the platform takes about 1.0 second to settle.

Figure 8. We assess the position accuracy and predictability when executing Azimuth-only scans with the Elevation axis
in the uploaded track mode (left) and stop mode (right). In both cases, the Elevation position is set to 45◦, but exhibits
some motion away from this set position. We can see that the Elevation axis exhibits random behavior and a high amount
of current through the motor in the uploaded track mode. In stop mode, the Elevation exhibits a predictable bobble,
with signiﬁcantly less current through the motor.

6.1 SAT In-Situ Testing

6. FUTURE WORK

Prior to installing the SAT receivers, we will run acceptance tests again with only the platforms at the site
in Chile. SAT platform testing is expected to begin in October 2022. We expect this testing to be similar in
style to the SAT factory testing, with VA-administered data acquisition and command testing followed by ocs
command testing. We plan to complete a similar series of scan tests to assess the ACU and platform performance
at the site, and to inform future work on the pointing model and scan conditions. We will additionally have
the opportunity to test the functionality of the generate scan Process with the SAT platforms without the
constraints of the factory environment.

6.2 LAT Factory Testing and Deployment

soaculib and the ACU Agent are written with implementation for the SATs and the LAT in mind. We anticipate
some updates to the Agent and soaculib with the implementation of the LAT ACU software, including the
added functionality of commanding the 3rd Axis during scans, a new set of Status ﬁelds, and potentially some
diﬀerences in naming conventions within soaculib. However, we expect these updates to be minor.

7. SUMMARY

We have presented an overview of the software needed to integrate the telescope ACUs into the ocs framework
for operation within the larger observatory. The ACU Agent provides an interface between the ACU software and
the ocs framework, including operations that support data acquisition, live monitoring, and commanding. We
additionally built a software simulator of the ACU, which is currently being used for full observatory end-to-end
software testing.

The ACU Agent has been implemented with the SAT platforms in the factory setting during the platform
acceptance testing. During this testing, we determined that the trajectory proﬁles of scans meet our requirements,
and that these trajectories are highly accurate to the commanded scan proﬁles. This is important for our ability to

complete the scan patterns needed to make observations to achieve our science goals. We additionally determined
software best practices for Azimuth-only scans.

We expect to continue evaluating these best practices and software implementation as we begin system testing
with the ﬁrst SAT at the site in Fall 2022. We additionally expect to make minor adaptations to the ACU Agent
for the LAT software in the near future.

APPENDIX A. SAT ACU AGENT DATA FIELDS

A.1 SAT broadcast Fields

Table 1: Fields published by the ACU Agent broadcast Process
when conﬁgured with a SAT.

Field name
Time

Raw Azimuth

Raw Elevation

Raw Boresight

Corrected Azimuth

Corrected Elevation

Corrected Boresight

Azimuth Current 1
Azimuth Current 2
Elevation Current 1
Boresight Current 1
Boresight Current 2

Field description
The timestamp, as seconds since the epoch. This value is calculated
from the ACU’s internal timestamp and a datetime year times-
tamp.
The integrated encoder values on the Azimuth axis, before any cor-
rections are applied.
The integrated encoder values on the Elevation axis, before any
corrections are applied.
The integrated encoder values on the Boresight axis, before any
corrections are applied.
The integrated encoder values on the Azimuth axis, with pointing
and refraction parameter corrections applied.
The integrated encoder values on the Elevation axis, with pointing
and refraction parameter corrections applied.
The integrated encoder values on the Boresight axis, with pointing
and refraction parameter corrections applied.
The current drawn by Motor 1 on the Azimuth axis.
The current drawn by Motor 2 on the Azimuth axis.
The current drawn by Motor 1 on the Elevation axis.
The current drawn by Motor 1 on the Boresight axis.
The current drawn by Motor 2 on the Boresight axis.

A.2 SAT monitor Fields

Table 2: Fields published by the ACU Agent monitor Process when
conﬁgured with a SAT.

Field name
Time

Year
ctime

Azimuth mode
Azimuth current position

Azimuth current velocity

Field description
The timestamp from the ACU, recorded as the decimal day
of the year.
The year, as timestamped by the ACU.
The timestamp, as seconds since the epoch. This value is
calculated from the ACU’s internal Time and Year times-
tamps.
The motion mode set on the Azimuth axis.
The encoder position on the Azimuth axis, after any cor-
rections (degrees).
The measured velocity on the Azimuth axis
grees/second).

(de-

Field name
Elevation mode
Elevation current position

Elevation current velocity

Boresight mode
Boresight current position

Boresight current velocity

Free upload positions

Azimuth avg position error

Azimuth peak position error

Elevation avg position error

Elevation peak position error

AzCCW SWprelimit

AzCCW SWlimit operating

AzCCW HWprelimit

AzCCW HWlimit operating

AzCCW HWlimit emergency

AzCCW HWlimit 2ndEmergency

AzCW SWprelimit

AzCW SWlimit operating

AzCW HWprelimit

AzCW HWlimit operating

AzCW HWlimit emergency

AzCW HWlimit 2ndEmergency

ElDown SWprelimit

(de-

(de-

Field description
The motion mode set on the Elevation axis.
The encoder position on the Elevation axis, after any cor-
rections (degrees).
The measured velocity on the Elevation axis
grees/second).
The motion mode set on the Boresight axis.
The encoder position on the Boresight axis, after any cor-
rections (degrees).
The measured velocity on the Boresight axis
grees/second).
The number of unused possible upload points in the scan
upload stack.
The average diﬀerence between achieved and commanded
position on the Azimuth axis.
The peak diﬀerence between achieved and commanded po-
sition on the Azimuth axis.
The average diﬀerence between achieved and commanded
position on the Elevation axis.
The peak diﬀerence between achieved and commanded po-
sition on the Elevation axis.
ACU software pre-limit for motion in the Azimuth counter-
clockwise direction is triggered (boolean).
ACU software limit for motion in the Azimuth counter-
clockwise direction is triggered (boolean). The ACU soft-
ware will not command positions beyond this limit.
Hardware pre-limit for motion in the Azimuth counter-
clockwise direction is triggered (boolean).
Operating limit for motion in the Azimuth counter-
clockwise direction is triggered (boolean).
Emergency limit for motion in the Azimuth counter-
clockwise direction is triggered (boolean).
Second emergency limit for motion in the Azimuth counter-
clockwise direction is triggered (boolean).
ACU software pre-limit for motion in the Azimuth clock-
wise direction is triggered (boolean).
ACU software limit for motion in the Azimuth clockwise
direction is triggered (boolean). The ACU software will
not command positions beyond this limit.
Hardware pre-limit for motion in the Azimuth clockwise
direction is triggered (boolean).
Operating limit for motion in the Azimuth clockwise direc-
tion is triggered (boolean).
Emergency limit for motion in the Azimuth clockwise di-
rection is triggered (boolean).
Second emergency limit for motion in the Azimuth clock-
wise direction is triggered (boolean).
ACU software pre-limit for motion in the Elevation down-
ward direction is triggered (boolean).

Field name
ElDown SWlimit operating

ElDown HWprelimit

ElDown HWlimit operating

ElDown HWlimit emergency

ElDown HWlimit shieldOFF operating

ElDown HWlimit shieldOFF emergency

ElUp SWprelimit

ElUp SWlimit operating

ElUp HWprelimit

ElUp HWlimit operating

ElUp HWlimit emergency

BsCCW SWprelimit

BsCCW SWlimit operating

BsCCW HWprelimit

BsCCW HWlimit operating

BsCCW HWlimit emergency

BsCW SWprelimit

BsCW SWlimit operating

BsCW HWprelimit

BsCW HWlimit operating

BsCW HWlimit emergency

Azimuth summary fault
Azimuth motion error

Azimuth motor1 overtemp

Field description
ACU software limit for motion in the Elevation downward
direction is triggered (boolean). The ACU software will
not command positions beyond this limit.
Hardware pre-limit for motion in the Elevation downward
direction is triggered (boolean).
Operating limit for motion in the Elevation downward di-
rection is triggered (boolean).
Emergency limit for motion in the Elevation downward
direction is triggered (boolean).
Operating limit for motion in the Elevation downward di-
rection with the co-moving shield oﬀ is triggered (boolean).
Emergency limit for motion in the Elevation downward di-
rection with the co-moving shield oﬀ is triggered (boolean).
ACU software pre-limit for motion in the Elevation upward
direction is triggered (boolean).
ACU software limit for motion in the Elevation upward
direction is triggered (boolean). The ACU software will
not command positions beyond this limit.
Hardware pre-limit for motion in the Elevation upward di-
rection is triggered (boolean).
Operating limit for motion in the Elevation upward direc-
tion is triggered (boolean).
Emergency limit for motion in the Elevation upward direc-
tion is triggered (boolean).
ACU software pre-limit for motion in the Boresight
counter-clockwise direction is triggered (boolean).
ACU software limit for motion in the Boresight counter-
clockwise direction is triggered (boolean). The ACU soft-
ware will not command positions beyond this limit.
Hardware pre-limit for motion in the Boresight counter-
clockwise direction is triggered (boolean).
Operating limit for motion in the Boresight counter-
clockwise direction is triggered (boolean).
Emergency limit for motion in the Boresight counter-
clockwise direction is triggered (boolean).
ACU software pre-limit for motion in the Boresight clock-
wise direction is triggered (boolean).
ACU software limit for motion in the Boresight clockwise
direction is triggered (boolean). The ACU software will
not command positions beyond this limit.
Hardware pre-limit for motion in the Boresight clockwise
direction is triggered (boolean).
Operating limit for motion in the Boresight clockwise di-
rection is triggered (boolean).
Emergency limit for motion in the Boresight clockwise di-
rection is triggered (boolean).
Azimuth Mode is changed to Stop by any failure (boolean).
Azimuth axis motion not detected although commanded
to do so (boolean).
Azimuth motor 1 temperature over limit (boolean).

Field name
Azimuth motor2 overtemp
Azimuth overspeed
Azimuth resistor1 overtemp

Azimuth resistor2 overtemp

Azimuth motor1 overcurrent
Azimuth motor2 overcurrent
Elevation summary fault
Elevation motion error

Elevation motor1 overtemp
Elevation overspeed
Elevation resistor1 overtemp

Elevation motor1 overcurrent
Boresight summary fault

Boresight motion error

Boresight motor1 overtemp
Boresight motor2 overtemp
Boresight overspeed
Boresight resistor1 overtemp

Boresight resistor2 overtemp

Boresight motor1 overcurrent
Boresight motor2 overcurrent
Azimuth oscillation warning
Elevation oscillation warning
Boresight oscillation warning
Azimuth servo failure
Azimuth brake1 failure

Azimuth brake2 failure

Azimuth breaker failure
Az CANbus amp1 comms failure

Az CANbus amp2 comms failure

Azimuth encoder failure
Azimuth tacho failure
Elevation servo failure
Elevation brake1 failure

Elevation breaker failure
El CANbus amp1 comms failure

Field description
Azimuth motor 2 temperature over limit (boolean).
Low level Azimuth speed over limit (boolean).
Azimuth regeneration resistor 1 temperature over limit
(boolean).
Azimuth regeneration resistor 2 temperature over limit
(boolean).
Azimuth motor 1 current over limit (boolean).
Azimuth motor 2 current over limit (boolean).
Elevation mode is changed to Stop by any failure (boolean).
Elevation axis motion not detected although commanded
to do so (boolean).
Elevation motor 1 temperature over limit (boolean).
Low level Elevation speed over limit (boolean).
Elevation regeneration resistor 1 temperature over limit
(boolean).
Elevation motor 1 current over limit (boolean).
Boresight Mode is changed to Stop by any failure
(boolean).
Boresight axis motion not detected although commanded
to do so (boolean).
Boresight motor 1 temperature over limit (boolean).
Boresight motor 2 temperature over limit (boolean).
Low level Boresight speed over limit (boolean).
Boresight regeneration resistor 1 temperature over limit
(boolean).
Boresight regeneration resistor 2 temperature over limit
(boolean).
Boresight motor 1 current over limit (boolean).
Boresight motor 2 current over limit (boolean).
Azimuth oscillation warning detected (boolean).
Elevation oscillation warning detected (boolean).
Boresight oscillation warning detected (boolean).
Low level failure on Azimuth axis detected (boolean).
Unexpected current consumption by Azimuth brake 1
(boolean).
Unexpected current consumption by Azimuth brake 2
(boolean).
Any Azimuth circuit breaker has been tripped (boolean).
Fault detected in Azimuth CAN bus ampliﬁer 1 communi-
cation (boolean).
Fault detected in Azimuth CAN bus ampliﬁer 2 communi-
cation (boolean).
Fault detected in Azimuth encoder (boolean).
Diﬀerence in Azimuth motor speeds over limit (boolean).
Low level failure on Elevation axis detected (boolean).
Unexpected current consumption by Elevation brake 1
(boolean).
Any Elevation circuit breaker has been tripped (boolean).
Fault detected in Elevation CAN bus ampliﬁer 1 commu-
nication (boolean).

Field name
Elevation encoder failure
Boresight servo failure
Boresight brake1 failure

Boresight brake2 failure

Boresight breaker failure
Bs CANbus amp1 comms failure

Bs CANbus amp2 comms failure

Boresight encoder failure
Boresight tacho failure
Azimuth computer disabled
Azimuth axis stop
Azimuth brakes released
Azimuth stop LCP

Azimuth power on
Azimuth AUX1 mode selected

Azimuth AUX2 mode selected

Azimuth immobile
Elevation computer disabled
Elevation axis stop
Elevation brakes released
Elevation stop LCP

Elevation power on
Elevation immobile
Boresight computer disabled
Boresight axis stop
Boresight brakes released
Boresight stop LCP

Boresight power on
Boresight AUX1 mode selected

Boresight AUX2 mode selected

Boresight immobile
Azimuth oscillation alarm
Elevation oscillation alarm
Boresight oscillation alarm
Azimuth commanded position

Elevation commanded position

is

selected

Field description
Fault detected in Elevation encoder (boolean).
Low level failure on Boresight axis detected (boolean).
Unexpected current consumption by Boresight brake 1
(boolean).
Unexpected current consumption by Boresight brake 2
(boolean).
Any Boresight circuit breaker has been tripped (boolean).
Fault detected in Boresight CAN bus ampliﬁer 1 commu-
nication (boolean).
Fault detected in Boresight CAN bus ampliﬁer 2 commu-
nication (boolean).
Fault detected in Boresight encoder (boolean).
Diﬀerence in Boresight motor speeds over limit (boolean).
ACU is not in control of the Azimuth axis (boolean).
Azimuth axis is in Stop Mode (boolean).
All Azimuth brakes are released (boolean).
Push-button Azimuth Stop at the Local Control Panel
(LCP) is activated (boolean).
Azimuth drive power is turned on (boolean).
Auxiliary mode 1 on the Azimuth axis
(boolean).
Auxiliary mode 2 on the Azimuth axis
(boolean).
Azimuth axis is not moving (boolean).
ACU is not in control of the Elevation axis (boolean).
Elevation axis is in Stop Mode (boolean).
All Elevation brakes are released (boolean).
Push-button Elevation Stop at the LCP is activated
(boolean).
Elevation drive power is turned on (boolean).
Elevation axis is not moving (boolean).
ACU is not in control of the Boresight axis (boolean).
Boresight axis is in Stop Mode (boolean).
All Boresight brakes are released (boolean).
Push-button Boresight Stop at the LCP is activated
(boolean).
Boresight drive power is turned on (boolean).
Auxiliary mode 1 on the Boresight axis is selected
(boolean).
Auxiliary mode 2 on the Boresight axis is selected
(boolean).
Boresight axis is not moving (boolean).
Azimuth oscillation alarm detected (boolean).
Elevation oscillation alarm detected (boolean).
Boresight oscillation alarm detected (boolean).
Input to the control loop on the Azimuth axis. Value type
is float or None.
Input to the control loop on the Elevation axis. Value type
is float or None.

selected

is

Field name
Boresight commanded position

General summary fault

Power failure Latched
Power failure 24V
General breaker failure
Power failure NotLatched

Cabinet overtemp
Ambient temp TooLow

PLC interface error

ACU fan failure
Cabinet undertemp
Time sync error
PLC comms error
EStop servo drive cabinet
EStop service pole
EStop Az movable
Key switch bypass emergency limit

Field description
Input to the control loop on the Boresight axis. Value type
is float or None.
Mode is changed to Stop by the ACU for all axes due to
any failure (boolean).
Short break power is missing and ACU is latched (boolean).
Internal 24 V power is missing (boolean).
Any breaker on any axis is tripped (boolean).
Short break power is missing and ACU is not latched
(boolean).
Measured cabinet temperature is over limit (boolean).
Ambient temperature is too low, operation is inhibited
(boolean).
Programmable logic conroller (PLC) detected an interface
error (boolean).
ACU detects a fan failure (boolean).
Cabinet temperature below limit (boolean).
PTP time synchronization failure detected (boolean).
PLC communication error detected
E-Stop triggered at the servo drive cabinet
E-Stop triggered at the service pole
E-Stop triggered with Azimuth axis movable (boolean).
Key switch engaged to bypass an emergency limit
(boolean).
PCU is active (boolean).
Safe mode activated (boolean).

PCU operation
Safe mode
Lightning protection surge arresters Any lightning protection surge arrestor tripped (boolean).
CoMoving shield off
Remote mode

Co-moving shield is oﬀ (boolean).
ACU is in remote mode, not local mode (boolean).

This work is supported in part by a grant from the Simons Foundation (Award #457687, B.K.).

ACKNOWLEDGMENTS

REFERENCES

[1] Ali, A. M., Adachi, S., Arnold, K., Ashton, P., Bazarko, A., Chinone, Y., Coppi, G., Corbett, L., Crowley,
K. D., Crowley, K. T., Devlin, M., Dicker, S., Duﬀ, S., Ellis, C., Galitzki, N., Goeckner-Wald, N., Harrington,
K., Healy, E., Hill, C. A., Ho, S.-P. P., Hubmayr, J., Keating, B., Kiuchi, K., Kusaka, A., Lee, A. T., Ludlam,
M., Mangu, A., Matsuda, F., McCarrick, H., Nati, F., Niemack, M. D., Nishino, H., Orlowski-Scherer, J.,
Sathyanarayana Rao, M., Raum, C., Sakurai, Y., Salatino, M., Sasse, T., Seibert, J., Sierra, C., Silva-Feaver,
M., Spisak, J., Simon, S. M., Staggs, S., Tajima, O., Teply, G., Tsan, T., Wollack, E., Westbrook, B., Xu,
Z., Zannoni, M., and Zhu, N., “Small Aperture Telescopes for the Simons Observatory,” Journal of Low
Temperature Physics 200, 461–471 (Apr. 2020).

[2] Xu, Z., Adachi, S., Ade, P., Beall, J. A., Bhandarkar, T., Bond, J. R., Chesmore, G. E., Chinone, Y.,
Choi, S. K., Connors, J. A., Coppi, G., Cothard, N. F., Crowley, K. D., Devlin, M., Dicker, S., Dober, B.,
Duﬀ, S. M., Galitzki, N., Gallardo, P. A., Golec, J. E., Gudmundsson, J. E., Haridas, S. K., Harrington,
K., Hervias-Caimapo, C., Patty Ho, S.-P., Huber, Z. B., Hubmayr, J., Iuliano, J., Kaneko, D., Kofman,
A. M., Koopman, B. J., Lashner, J., Limon, M., Link, M. J., Lucas, T. J., Matsuda, F., McCarrick, H.,
Nati, F., Niemack, M. D., Orlowski-Scherer, J., Piccirillo, L., Sarmiento, K. P., Schaan, E., Silva-Feaver,
M., Sonka, R., Sutariya, S., Tajima, O., Teply, G. P., Terasaki, T., Thornton, R., Tucker, C., Ullom, J.,

Vavagiakis, E. M., Vissers, M. R., Walker, S., Whipps, Z., Wollack, E. J., Zannoni, M., Zhu, N., Zonca, A.,
and Simons Observatory Collaboration, “The Simons Observatory: The Large Aperture Telescope (LAT),”
Research Notes of the American Astronomical Society 5, 100 (Apr. 2021).

[3] Ade, P., Aguirre, J., Ahmed, Z., Aiola, S., Ali, A., Alonso, D., Alvarez, M. A., Arnold, K., Ashton, P.,
Austermann, J., Awan, H., Baccigalupi, C., Baildon, T., Barron, D., Battaglia, N., Battye, R., Baxter, E.,
Bazarko, A., Beall, J. A., Bean, R., Beck, D., Beckman, S., Beringue, B., Bianchini, F., Boada, S., Boettger,
D., Bond, J. R., Borrill, J., Brown, M. L., Bruno, S. M., Bryan, S., Calabrese, E., Calafut, V., Calisse,
P., Carron, J., Challinor, A., Chesmore, G., Chinone, Y., Chluba, J., Cho, H.-M. S., Choi, S., Coppi, G.,
Cothard, N. F., Coughlin, K., Crichton, D., Crowley, K. D., Crowley, K. T., Cukierman, A., D’Ewart, J. M.,
D¨unner, R., de Haan, T., Devlin, M., Dicker, S., Didier, J., Dobbs, M., Dober, B., Duell, C. J., Duﬀ, S.,
Duivenvoorden, A., Dunkley, J., Dusatko, J., Errard, J., Fabbian, G., Feeney, S., Ferraro, S., Flux`a, P.,
Freese, K., Frisch, J. C., Frolov, A., Fuller, G., Fuzia, B., Galitzki, N., Gallardo, P. A., Tomas Galvez Ghersi,
J., Gao, J., Gawiser, E., Gerbino, M., Gluscevic, V., Goeckner-Wald, N., Golec, J., Gordon, S., Gralla,
M., Green, D., Grigorian, A., Groh, J., Groppi, C., Guan, Y., Gudmundsson, J. E., Han, D., Hargrave, P.,
Hasegawa, M., Hasselﬁeld, M., Hattori, M., Haynes, V., Hazumi, M., He, Y., Healy, E., Henderson, S. W.,
Hervias-Caimapo, C., Hill, C. A., Hill, J. C., Hilton, G., Hilton, M., Hincks, A. D., Hinshaw, G., Hloˇzek,
R., Ho, S., Ho, S.-P. P., Howe, L., Huang, Z., Hubmayr, J., Huﬀenberger, K., Hughes, J. P., Ijjas, A., Ikape,
M., Irwin, K., Jaﬀe, A. H., Jain, B., Jeong, O., Kaneko, D., Karpel, E. D., Katayama, N., Keating, B.,
Kernasovskiy, S. S., Keskitalo, R., Kisner, T., Kiuchi, K., Klein, J., Knowles, K., Koopman, B., Kosowsky,
A., Krachmalnicoﬀ, N., Kuenstner, S. E., Kuo, C.-L., Kusaka, A., Lashner, J., Lee, A., Lee, E., Leon, D.,
Leung, J. S. Y., Lewis, A., Li, Y., Li, Z., Limon, M., Linder, E., Lopez-Caraballo, C., Louis, T., Lowry,
L., Lungu, M., Madhavacheril, M., Mak, D., Maldonado, F., Mani, H., Mates, B., Matsuda, F., Maurin, L.,
Mauskopf, P., May, A., McCallum, N., McKenney, C., McMahon, J., Meerburg, P. D., Meyers, J., Miller, A.,
Mirmelstein, M., Moodley, K., Munchmeyer, M., Munson, C., Naess, S., Nati, F., Navaroli, M., Newburgh, L.,
Nguyen, H. N., Niemack, M., Nishino, H., Orlowski-Scherer, J., Page, L., Partridge, B., Peloton, J., Perrotta,
F., Piccirillo, L., Pisano, G., Poletti, D., Puddu, R., Puglisi, G., Raum, C., Reichardt, C. L., Remazeilles,
M., Rephaeli, Y., Riechers, D., Rojas, F., Roy, A., Sadeh, S., Sakurai, Y., Salatino, M., Sathyanarayana Rao,
M., Schaan, E., Schmittfull, M., Sehgal, N., Seibert, J., Seljak, U., Sherwin, B., Shimon, M., Sierra, C.,
Sievers, J., Sikhosana, P., Silva-Feaver, M., Simon, S. M., Sinclair, A., Siritanasak, P., Smith, K., Smith,
S. R., Spergel, D., Staggs, S. T., Stein, G., Stevens, J. R., Stompor, R., Suzuki, A., Tajima, O., Takakura, S.,
Teply, G., Thomas, D. B., Thorne, B., Thornton, R., Trac, H., Tsai, C., Tucker, C., Ullom, J., Vagnozzi, S.,
van Engelen, A., Van Lanen, J., Van Winkle, D. D., Vavagiakis, E. M., Verg`es, C., Vissers, M., Wagoner, K.,
Walker, S., Ward, J., Westbrook, B., Whitehorn, N., Williams, J., Williams, J., Wollack, E. J., Xu, Z., Yu,
B., Yu, C., Zago, F., Zhang, H., Zhu, N., and Simons Observatory Collaboration, “The Simons Observatory:
science goals and forecasts,” J. Cosmology Astropart. Phys. 2019, 056 (Feb. 2019).

[4] The Simons Observatory Collaboration, Abitbol, M. H., Adachi, S., Ade, P., Aguirre, J., Ahmed, Z., Aiola,
S., Ali, A., Alonso, D., Alvarez, M. A., Arnold, K., Ashton, P., Atkins, Z., Austermann, J., Awan, H.,
Baccigalupi, C., Baildon, T., Lizancos, A. B., Barron, D., Battaglia, N., Battye, R., Baxter, E., Bazarko,
A., Beall, J. A., Bean, R., Beck, D., Beckman, S., Beringue, B., Bhandarkar, T., Bhimani, S., Bianchini, F.,
Boada, S., Boettger, D., Bolliet, B., Bond, J. R., Borrill, J., Brown, M. L., Bruno, S. M., Bryan, S., Calabrese,
E., Calafut, V., Calisse, P., Carron, J., Carl, F. M., Cayuso, J., Challinor, A., Chesmore, G., Chinone, Y.,
Chluba, J., Cho, H.-M. S., Choi, S., Clark, S., Clarke, P., Contaldi, C., Coppi, G., Cothard, N. F., Coughlin,
K., Coulton, W., Crichton, D., Crowley, K. D., Crowley, K. T., Cukierman, A., D’Ewart, J. M., D¨unner,
R., de Haan, T., Devlin, M., Dicker, S., Dober, B., Duell, C. J., Duﬀ, S., Duivenvoorden, A., Dunkley, J.,
Bouhargani, H. E., Errard, J., Fabbian, G., Feeney, S., Fergusson, J., Ferraro, S., Flux`a, P., Freese, K.,
Frisch, J. C., Frolov, A., Fuller, G., Galitzki, N., Gallardo, P. A., Ghersi, J. T. G., Gao, J., Gawiser, E.,
Gerbino, M., Gluscevic, V., Goeckner-Wald, N., Golec, J., Gordon, S., Gralla, M., Green, D., Grigorian, A.,
Groh, J., Groppi, C., Guan, Y., Gudmundsson, J. E., Halpern, M., Han, D., Hargrave, P., Harrington, K.,
Hasegawa, M., Hasselﬁeld, M., Hattori, M., Haynes, V., Hazumi, M., Healy, E., Henderson, S. W., Hensley,
B., Hervias-Caimapo, C., Hill, C. A., Hill, J. C., Hilton, G., Hilton, M., Hincks, A. D., Hinshaw, G., Hloˇzek,
R., Ho, S., Ho, S.-P. P., Hoang, T. D., Hoh, J., Hotinli, S. C., Huang, Z., Hubmayr, J., Huﬀenberger, K.,
Hughes, J. P., Ijjas, A., Ikape, M., Irwin, K., Jaﬀe, A. H., Jain, B., Jeong, O., Johnson, M., Kaneko, D.,

Karpel, E. D., Katayama, N., Keating, B., Keskitalo, R., Kisner, T., Kiuchi, K., Klein, J., Knowles, K.,
Kofman, A., Koopman, B., Kosowsky, A., Krachmalnicoﬀ, N., Kusaka, A., LaPlante, P., Lashner, J., Lee,
A., Lee, E., Lewis, A., Li, Y., Li, Z., Limon, M., Linder, E., Liu, J., Lopez-Caraballo, C., Louis, T., Lungu,
M., Madhavacheril, M., Mak, D., Maldonado, F., Mani, H., Mates, B., Matsuda, F., Maurin, L., Mauskopf,
P., May, A., McCallum, N., McCarrick, H., McKenney, C., McMahon, J., Meerburg, P. D., Mertens, J.,
Meyers, J., Miller, A., Mirmelstein, M., Moodley, K., Moore, J., Munchmeyer, M., Munson, C., Murata,
M., Naess, S., Namikawa, T., Nati, F., Navaroli, M., Newburgh, L., Nguyen, H. N., Nicola, A., Niemack,
M., Nishino, H., Nishinomiya, Y., Orlowski-Scherer, J., Pagano, L., Partridge, B., Perrotta, F., Phakathi,
P., Piccirillo, L., Pierpaoli, E., Pisano, G., Poletti, D., Puddu, R., Puglisi, G., Raum, C., Reichardt, C. L.,
Remazeilles, M., Rephaeli, Y., Riechers, D., Rojas, F., Rotti, A., Roy, A., Sadeh, S., Sakurai, Y., Salatino,
M., Rao, M. S., Saunders, L., Schaan, E., Schmittfull, M., Sehgal, N., Seibert, J., Seljak, U., Shellard, P.,
Sherwin, B., Shimon, M., Sierra, C., Sievers, J., Sifon, C., Sikhosana, P., Silva-Feaver, M., Simon, S. M.,
Sinclair, A., Smith, K., Sohn, W., Sonka, R., Spergel, D., Spisak, J., Staggs, S. T., Stein, G., Stevens, J. R.,
Stompor, R., Suzuki, A., Tajima, O., Takakura, S., Teply, G., Thomas, D. B., Thorne, B., Thornton, R.,
Trac, H., Treu, J., Tsai, C., Tucker, C., Ullom, J., Vagnozzi, S., van Engelen, A., Van Lanen, J., Van Winkle,
D. D., Vavagiakis, E. M., Verg`es, C., Vissers, M., Wagoner, K., Walker, S., Wang, Y., Ward, J., Westbrook,
B., Whitehorn, N., Williams, J., Williams, J., Wollack, E., Xu, Z., Yasini, S., Young, E., Yu, B., Yu, C.,
Zago, F., Zannoni, M., Zhang, H., Zheng, K., Zhu, N., and Zonca, A., “The simons observatory: Astro2020
decadal project whitepaper,” (2019).

[5] Story, K., Leitch, E., Ade, P., Aird, K. A., Austermann, J. E., Beall, J. A., Becker, D., Bender, A. N., Benson,
B. A., Bleem, L. E., Britton, J., Carlstrom, J. E., Chang, C. L., Chiang, H. C., Cho, H.-M., Crawford, T. M.,
Crites, A. T., Datesman, A., de Haan, T., Dobbs, M. A., Everett, W., Ewall-Wice, A., George, E. M.,
Halverson, N. W., Harrington, N., Henning, J. W., Hilton, G. C., Holzapfel, W. L., Hoover, S., Huang, N.,
Hubmayr, J., Irwin, K. D., Karfunkle, M., Keisler, R., Kennedy, J., Lee, A. T., Li, D., Lueker, M., Marrone,
D. P., McMahon, J. J., Mehl, J., Meyer, S. S., Montgomery, J., Montroy, T. E., Nagy, J., Natoli, T., Nibarger,
J. P., Niemack, M. D., Novosad, V., Padin, S., Pryke, C., Reichardt, C. L., Ruhl, J. E., Saliwanchik, B. R.,
Sayre, J. T., Schaﬀer, K. K., Shirokoﬀ, E., Smecher, G., Stalder, B., Tucker, C., Vanderlinde, K., Vieira,
J. D., Wang, G., Williamson, R., Yefremenko, V., Yoon, K. W., and Young, E., “South Pole Telescope
software systems: control, monitoring, and data acquisition,” Proc. SPIE 8451, 286 – 296 (2012).

[6] Koopman, B. J., Lashner, J., Saunders, L. J., Hasselﬁeld, M., Bhandarkar, T., Bhimani, S., Choi, S. K.,
Duell, C. J., Galitzki, N., Harrington, K., Hincks, A. D., Ho, S.-P. P., Newburgh, L., Reichardt, C. L., Seibert,
J., Spisak, J., Westbrook, B., Xu, Z., and Zhu, N., “The Simons Observatory: overview of data acquisition,
control, monitoring, and computer infrastructure,” in [Software and Cyberinfrastructure for Astronomy VI ],
Guzman, J. C. and Ibsen, J., eds., 11452, 35 – 53, International Society for Optics and Photonics, SPIE
(2020).

