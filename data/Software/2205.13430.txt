GNOLL: Efficient Software for Real-World Dice
Notation and Extensions
Ian Frederick Vigogne Goodbody Hunter
ianfhunter@gmail.com
Independent Researcher
Kells, Meath, Ireland

2
2
0
2

l
u
J

4

]
L
P
.
s
c
[

2
v
0
3
4
3
1
.
5
0
2
2
:
v
i
X
r
a

Figure 1. The author’s rendition of a hyena/gnoll.

Abstract
GNOLL (‘GNOLL’s Not *OLL’) is a software library for dice
notation — A method of describing how to roll collections of
dice. Unlike previous papers, GNOLL’s dice notation syntax
is focused on parsing a language that tabletop role-players
and board gamers already use for specifying dice rolls in
many popular software applications. Existing implementa-
tions of such a syntax are either incomplete, fragile, or pro-
prietary, meaning that anyone hoping to use such syntax
in their application likely needs to write their own solution.
GNOLL is an open-source project using the compilation tool
‘YACC’ and lexical tool ‘LEX’ which can be integrated into
many applications with relative ease. This paper explores
GNOLL’s extended dice notation syntax and its competitive
performance.

CCS Concepts: • Software and its engineering → Do-
main specific languages.

1 Introduction
1.1 Paper Overview
This paper describes GNOLL, a software library for inter-
preting a DSL (Domain Specific Language) for dice notation.
GNOLL is a software library for interpreting a DSL (Do-
main Specific Language) for an extended set of dice nota-
tion. This paper explores GNOLL’s supported operations,
its performance and provides a much-needed implementa-
tion reference for other dice notation interpreters. GNOLL
is licensed under GNU General Public License v3.0.

1.1.1 What’s in a name? There are not many publica-
tions specifically tackling this issue and the ones that are (as
discussed later in section 1.3) are named ROLL [19] and
TROLL [20] — To distinguish this research and still pay
homage to the original work, GNOLL is a recursive acronym
expanded from ‘GNOLL’s Not *OLL’.

In fantasy-based tabletop role-playing games (TTRPGs)
settings, a player might come across a gnoll in their adven-
ture — they are a hyena-human hybrid typically on the side
of evil.

Keywords: dice notation, dice, ttrpgs, dsl, domain specific
language, tabletop roleplaying games, board games, gnoll,
gaming

1.1.2 Paper Layout. In this introductory section, we ad-
dress a few basic questions such as ‘Why is such a project
needed?’ and ‘Aren’t there existing solutions that can be

1

 
 
 
 
 
 
used?’. The architecture of GNOLL and some of the parsing
decisions are then discussed in Section 2.

A collection of results are presented in the subsequent sec-
tion and the paper is concluded with a summary of GNOLL’s
impact and a discussion on its merits, limitations, and desir-
able future work for the project. A list of references and an
appendix follow.

1.2 Demand for a solution
Though a popular pastime in the 1970s and 1980s, TTRPGs
experienced a fall from grace after a moral panic over the
percieved content of the games (colloquially known as the
"Satanic Panic") [30, 32]. However, over the last decade, there
has been a resurgence in their popularity [11]. The popular
‘Dungeons & Dragons’ TTRPG was recently reported by
Hasbro to have had its ninth year of consecutive growth
[10].

In this new era of tabletop gaming, many aspects of the
hobby have changed — revisions of system rules, increased
inclusiveness [21] and the proliferation of software tools
to assist ‘Dungeon Masters’ and their players. During the
international COVID-19 pandemic, many groups shifted to
play wholly online as they could no longer meet in person.
Opinions gathered on the online platform Reddit suggested
that while many missed the physical presence of their ad-
venturing companions, they appreciated the tools available
for online play — though a large cohort complained about
their instability and complexity of use [27] .

Many of these tools use common dice notation, but stan-
dards differ between platforms and the software used for
parsing this notation is predominantly prohibitive to collab-
oration — The majority of parsers are closed-source or have
their code beneath a server-side application programming
interface (API). Available open-source solutions have other
problems, many of them supporting only a limited set of
dice notation extensions, too tightly coupled with a related
product (e.g. character sheets) or left unmaintained.

Because of this, if someone wished to create a new soft-
ware tool for the hobby they would likely need to create
their own dice notation parser. GNOLL provides a solution
to this problem by offering a open source software that can
be easily integrated into a new (or existing) product.

1.3 Previous Work
In TROLL[20] (The successive publication to ROLL[19]), Mo-
gensen presents a machine-friendly DSL for rolling dice (Fig-
ure 2). It is a reasonably approachable syntax for those fa-
miliar with other programming languages, containing many
of the same structures — loops, conditionals, assignments,
etc. However, these constructs are less accessible to users
unfamiliar with programming languages and because of this
there would likely be a separation between novice and ad-
vanced users should a TTRPG tool wish to integrate this.

2

Hunter, IFVG

TROLL’s usage has been primarily used by researchers
interested in probability calculation, rather than direct us-
age in TTRPG software[20]. Dungeons & Dragons released
statistics in 2019 revealing that 12% of players were age 8
to 12, furthermore 40% of players were age 24 or younger
[4]. It is clear that because there are many players who are
not programmers and even who are not in high school yet,
that there is a need for notation to be straightforward and
intuitive.

largest M N#(sum accumulate x := d10 until x < 10)

Figure 2. An example of TROLL’s Syntax

As was the case in 2009 when TROLL was published, stan-
dards on dice notation or publication thereof continue to
be scarce. There are documentation listings of particular
implementations[7, 26, 31], but a distinct lack of resources
which explain those notation decisions, suggest standardiza-
tion or encourage co-development.

Several dice notation parsing libraries are available on
different programming languages’ package managers, how-
ever many of these are biased to the more popular TTRPG
systems or are short-term effort projects without much con-
sideration given to long term support (e.g. Several of these
use Regular Expressions (RegEx) to parse their syntax which
can be prone to error and ill performance [18]). The most
readily usable and complete implementation the author has
been able to find has been RPG Dice Roller [13] (There tends
to be a lack of distinctive or unique names in this space!),
but while it supports a wide range of dice notation syntax,
it does not support symbolic dice and only targets a single
language (JavaScript) which limits integration options.

Publicly available implementations of dice notation inter-
preters generally are focused on a single end use-case and to
be usable by different programming languages would require
significant extra effort by a developer.

2 Technical Details
2.1 Code Architecture
GNOLL was written in the C programming language to al-
low for easier bindings to other languages through software
like SWIG[3] or CPPYY [14]. C has the added advantage of
enabling performant code, which allows users to issue more
complex dice rolls in an allowed execution time.

Specifically, GNOLL is built upon LEX [16] — a lexical
analyser generator, and YACC [12] — a LALR ("Look Ahead
Left-to-Right") Context-Free Grammar (CFG) parser gener-
ator. The main contribution of GNOLL is contained in this
CFG and the functions called as it is parsed.

A high-level diagram of how the GNOLL interpreter breaks
down a statement can be seen in Figure 3. Characters in the

GNOLL: Efficient Software for Real-World Dice Notation and Extensions

Dice Rolls
/ Terminals

Dice
Operations

Mathematical
Operations

Programmatic
Operations

Statement
Resolution

"[2d20]kh+[2]"

"[(4,13)kh] + (2)"

"[(13)+(2)]"

"(15)"

"(15)"

Figure 3. A simplified deconstruction of how the roll
"2d20kh+2" is interpreted by GNOLL

input string are processed into tokens by LEX before they
are parsed through the grammar. The underlying dice rolls
and values are resolved first, before applying the ‘dice op-
erations’ (such as rerolling, removing dice from a pool, etc.
A complete list of GNOLL’s supported dice operations are
shown in Section 2.3.2). Simple mathematical operations are
then resolved, before higher level operations and the final
result output.

For more information, there are a detailed set of railroad

diagrams depicting the grammar in Appendix A.1.

Whilst GNOLL has made an effort to choose the most
appropriate token symbols, there have been decisions made
for some rarer symbols to not be supported. Thankfully, if
one wishes to fork the GNOLL project, LEX makes it simple
to change the tokens associated with each property.

Currently, GNOLL has bindings to Python (via CPPYY[14])
and Perl (via SWIG). Releases of the Python interface are
published to the Python Package Index (PyPI) [2]. The core
of the library is written in C and can be imported to C++
projects. It is the ambition of the project to further expand
the language support in the future.

2.2 Scope of GNOLL
GNOLL is intended to be a comprehensive interpreter of
dice notation and extensions thereof. It is not expected to
integrate deeply with TTRPG character sheets, GUI display
formatting, or other secondary processing that dependent
software may wish to perform.

GNOLL is intended to be primarily a library for inclusion
in other projects, though it may contain its own sample
applications, test interfaces and scripts.

2.3 Notation Interpretation
GNOLL’s syntax was informed by the various documentation
of existing dice notation platforms, by Mogensen’s paper on
RPG Dice Mechanisms[29], and through the notation used
in various TTRPG sourcebooks.

2.3.1 Dice Types. Internally, GNOLL understands two types
of dice — numeric and symbolic.

Numeric Dice. Throughout the different literature, there

is consistency about the most basic dice roll form:

𝑥d𝑦, 𝑤ℎ𝑒𝑟𝑒 𝑥, 𝑦 ∈ Z+
x represents the amount of dice to roll and y, the number
of sides of these dice. An absence of the x term implies a
value of 1. Negative values of x will be treated as a negation
of the overall roll. Omitting the y term will often emit an
error, but some systems will default to a six-sided dice (e.g.
the Scum & Villiany RPG [1])- the most common dice in most
board games and tabletops. Negative values of y produce an
error as dice with a negative number of sides are physically
impossible. Some examples of these statements are shown
in Equations 1,2,3.

𝑑6 = { } = 3

− 1𝑑6 = −{ } = −5

(1)

(2)

𝑑 − 6 = 𝐸𝑅𝑅𝑂𝑅
Where multiple dice exist, these values are generally added
together to create a larger value. In Equation 4 two dice are
rolled and summed. If one wished to keep the rolls distinct
in the final result this can be distinguished by a separator
token (in GNOLL, a semi-colon) as seen in Equation 5.

(3)

2𝑑6 = { ,

} = 8

(4)

(5)

𝑑6; 𝑑6 = {{ }, { }} = 2, 6
GNOLL tokens are all lowercase. This choice was made to
reduce conflicts with macros (Section 2.4) which are all upper-
case. One example of the need for this rule is the mislead-
ing D66 notation used in Game Workshop’s Mordheim[24]
which rolls two d6 dice and uses them as if they were con-
catenated, rather than being a 66-sided dice as one might
expect. The difference can be seen in Equations 6 and 7 — it
is impossible for a Mordheim-style dice result to be a single
digit.

D66 = { × 10 + } = 31

𝑑66 = { } = 5

(6)

(7)

To allow more flexibility, GNOLL allows a user to spec-
ify any combination of faces through an extended syntax
that allows individual number selection or a numeric range.
Equation 8 shows a 11 sided dice where the values range
from 1 to 10 and an additional 100 value.

𝑑 {1, 2, 3..8, 9, 10, 100} = { } = 3

(8)

3

Symbolic Dice. GNOLL also supports symbolic dice —
dice that do not have a strictly numeric value associated
with them. A Fate Die — a six-sided die with two blank sides,
two sides with a plus symbol, and two sides with a minus
symbol – can be represented as shown in Equation 9, but this
is also commonly referred to with the shorthand "df" and
this representation is supported also. The symbolic syntax
can support strings of up to 100 characters. To make it easier
to use, these can be stored as macros (Section 2.4) for less
verbose statements.

𝑑 {‘-’, ‘-’, ‘0’, ‘0’, ‘+’, ‘+’} = ‘+’

(9)

Special Dice. GNOLL supports some common shorthands

for different dice types.
• 𝑑% → 𝑑100
• 𝑐 → 𝑑 {‘𝐻𝐸𝐴𝐷𝑆 ′, ‘𝑇 𝐴𝐼𝐿𝑆 ′}
• 𝑑 𝑓 → 𝑑 {‘−′, ‘−′, ‘0′, ‘0′, ‘+′}

2.3.2 Dice Operations.

Drop/Keep Notation. One of the more common scenarios
in a tabletop game is to roll two or more dice and choose
the higher or lower of the dice to apply a bonus/penalty to
the player (sometimes called ‘Advantage’ and ‘Disadvantage’
respectively).

The more general operation is to "keep" the highest dice
or to "drop" the lowest. Sadly, there is much divergence in
syntax across various dice rolling platforms (Table 1).

Table 1. Keep Syntaxes in various dice rollers

Platform

Keep Highest Keep Lowest

Roll20 [26]
Rolz [6]
OpenRoleplaying.org [22]
RoleGate [28]
Dice.Run [25]
FoundryVTT [7]
Avrae [31]

2d6kh
2d6h
2d6-L
2d6k
2d6k
2d6max
2d6k1

2d6kl
2d6l
2d6-H
2d6kl
2d6d
2d6min
2d6p1

GNOLL supports a syntax as follows to be applied after a

dice definition.

[𝑘𝑑] [ℎ𝑙] 𝑧 𝑤ℎ𝑒𝑟𝑒 𝑧 ∈ Z+
Z represents the amount of values to drop or keep from the
original amount. An absence of z implies a value of 1.

GNOLL uses this syntax primarily to avoid ambiguity, but
also because the terms ‘keep’ and ‘drop’ are commonly used
in documentation that describes this feature. Where using
‘d’ for dropping dice has been proposed to these systems,
there is often a parsing conflict with the core ‘d’ term used
for defining a dice (e.g. d6). GNOLL does not have this issue
as it requires ‘l’ or ‘h’ to be specified afterwards.

4

2𝑑6𝑘ℎ = { ,
2𝑑6𝑘𝑙 = { ,
2𝑑6𝑑ℎ = { ,
2𝑑6𝑑𝑙 = { ,

} = 6

} = 3

} = 3

} = 6

Hunter, IFVG

(10)

(11)

(12)

(13)

Negative values of z produce an error as the requested

behaviour is ambiguous.

When z is the same or larger than the number of dice as

it is in Equation 14, there is no effect.

2𝑑6𝑘ℎ3 = { ,

} = {2, 3} = 5

(14)

A less common use case is to select the middle dice. Rather
than define a new m case which would need unintuitive rules
for handling both odd and even numbers of dice (or mixed
rules like "upper-middle" or "lower-middle"), we propose that
this rare case be handled by dropping both sides instead. An
example of choosing the middle value with this method is
shown in Equation 15

3𝑑6𝑑𝑙𝑑ℎ = { ,

,

} = 4

(15)

Conditions & Filters. In many games, certain logic is
only required if a particular value is rolled. For example,
the board game One Deck Dungeon [5] contains a scenario
that requires the player to discard any 2s rolled in their roll.
Conditional statements allow a high range of flexibility for
cases such as these.

When applied to a vector of rolls, a conditional can act as

a filter to remove rolls that do not satisfy the criteria.

Conditionals in GNOLL operations take the same form as
one might find in typical programming languages (i.e. ==,
!=, <, >, <=, >=).

Filters use conditionals to remove dice rolls that do not
match the conditional check. Equation 16 shows four dice
being rolled and then two of them discarded for not matching
the filter criteria.

4𝑑6𝑓 < 3 = 𝑓 𝑖𝑙𝑡𝑒𝑟 ({ ,

,

,

}, ” < 3”) = { ,

}

(16)

Rerolling. Rerolling dice is often used to avoid unfavor-
able conditions in TTRPGs, for example, it can be used to
ensure that players do not create characters with statistics
that are significantly lower than their peers. In Dungeons
& Dragons [17], Halfling player characters have the natural
ability to reroll dice that have a result of 1.

Arguably, some of these rolls could be written in a more
computationally efficient manner (e.g. instead of rerolling
1s on a d20, one could roll a single dice with values from 2
to 20 instead), but TTRPG game designers design primarily
for physical games (at least, at the time of writing) and it
makes sense to keep aligned to the paradigms of the hobby
for greater accessibility.

GNOLL: Efficient Software for Real-World Dice Notation and Extensions

Rerolling is configurable in GNOLL. a single ‘r’ will reroll
a single time (as shown in Equation 17). This can be option-
ally followed with another ‘r’ to continue rerolling until the
triggering condition is no longer fulfilled (As in Equation 18.
Internally, there is a hardcoded limit so that execution does
not continue infinitely.

1𝑑6𝑟 < 2 = 𝑟𝑒𝑟𝑜𝑙𝑙 ({ }, ”𝑜𝑛𝑐𝑒”, ”𝑖 𝑓 < 2”) = { → }

(17)
1𝑑6𝑟𝑟 < 2 = 𝑟𝑒𝑟𝑜𝑙𝑙 ({ }, ”∞”, ”𝑖 𝑓 < 2”) = { → → }
(18)

Explosions. In some systems like Feng Shui [15], dice can
‘explode’, which is to say that if a die rolls its maximum value
(e.g. a 6 for a d6), it rolls again and accumulates the new roll.
The most popular syntax for this is an exclamation point as
shown in Equation 19. Occasionally the lowercase ‘e ’is used.

(19)

1𝑑6! = 𝑒𝑥𝑝𝑙𝑜𝑑𝑒 ({ }, 𝑁 ) = { → → } = 16
There is a hardcoded limit on exploding in GNOLL, but it’s
unlikely to be met. Two roll types reduce impact of rolling
multiple times when playing with physical dice — only al-
lowing a single explosion (!o — o for ‘once’ ) or using ‘pene-
trating’ exploding dice (!p) in which the value of the accumu-
lation decreases by one each explosion. When the potential
addition is 0, rolling can cease. Worked examples of each can
be seen at Equations 20 and 18.

1𝑑6!𝑜 = 𝑒𝑥𝑝𝑙𝑜𝑑𝑒 ({ }, 1) = { → } = 12

(20)

1𝑑6!𝑝 = 𝑒𝑥𝑝𝑙𝑜𝑑𝑒 ({ }, 𝑝)
= { → → → }
= (6 + (6 − 0) + (6 − 1) + 2) = 19

(21)

Success Counting. Shadowrun[9] and some other sys-
tems forgo complex single-dice mechanics for a simpler
method of rolling a larger number of dice and counting how
many score above a given threshold.

GNOLL provides a count token ‘c’ which can be applied
after a filter to produce this effect as shown in 22. In the
following Equation 23 We also introduce a new built-in ’u’
which is a filter that removes any duplicate values, allowing
a user to count unique rolled results.

4𝑑6𝑓 > 2𝑐 = 𝑐𝑜𝑢𝑛𝑡 (𝑓 𝑖𝑙𝑡𝑒𝑟 ({ ,

,

,

}, ”! = 2”)) = 3}

4𝑑6𝑢𝑐 = 𝑐𝑜𝑢𝑛𝑡 (𝑢𝑛𝑖𝑞𝑢𝑒 ({ ,

,

,

}, 𝑢)) = 4}

(22)
(23)

2.3.3 Mathematical Operations. Overall, dice math in
GNOLL is similar to usual infix mathematical notation. Be-
fore operations are complete, sets of dice are collapsed into
their smallest form. Where multiple values continue to exist,
operations are applied element-wise. Where dimensions of

5

the vectors do not match, default values are used in their
place to best preserve a value (e.g. Equation 25).

𝑑6 + 𝑑6 = { } + { } = 9

(𝑑6; 𝑑6) − 3 = {{ }, { }} − 3 = {0, 6}

(24)

(25)

(𝑑6; 𝑑6) × (𝑑6; 𝑑6) = {{ }, { }} × {{ }, { }} = {6, 24}
(26)
An alternative to this could be to use vector and matrix
math, but to be simpler, this has been reserved for future
work should there be appropriate requests for such a feature.
TTRPGs and board games predominately operate with in-
tegers only. Therefore, it may be useful to support two types
of division supporting different types of rounding modes.
GNOLL implements these as backslash (Equation 27 and
forwardslash (Equation 28).

3/2 = 1

3\2 = 2

(27)

(28)

2.4 Programmatic Operations

Macros. If you have a complex or wordy symbolic dice, or
some very atypical logic - dice rolls can be lengthy to write —
especially if you need to reuse those portions multiple times.
Macros resolve this issue by storing the dice configuration in
a lookup table, referred to by name. GNOLL maintains a list
of useful macros for common symbolic dice (e.g. Chess Dice,
Poker Dice). Users can submit their macros for consideration
for inclusion in the repository.

An example of setting and accessing a macro are given
below in Equations and 30. Macro statements that save ex-
pressions (e.g. Equation 29) and access them (e.g Equation
29) can be chained using a semicolon separator.

#𝑆𝑈 𝐼𝑇 𝑆 = 𝑑 {𝐶𝐿𝑈 𝐵𝑆, 𝐻𝐸𝐴𝑅𝑇 𝑆, 𝐷𝐼𝐴𝑀𝑂𝑁 𝐷𝑆, 𝑆𝑃𝐴𝐷𝐸𝑆 }

@𝑆𝑈 𝐼𝑇 𝑆

(29)

(30)

3 Results
3.1 Performance Recordings
Unfortunately, as many popular dice notation software so-
lutions are either proprietary or web-based, it is difficult or
impossible to fairly compare their performance to GNOLL.
However, where implementations of standalone dice rolling
libraries existed, we were able to profile their performance
to benchmark against GNOLL. Where compared software
produced an overly verbose output (i.e. printing the 100 die
results of a 100d100), the code was modified to remove the
output in order to do a fair comparison.

3.1.1 Performance comparison versus TROLL and C++
library Dice Parser. We profiled GNOLL’s native interface
(at version v2.2.3) against the C++ library Dice Parser by Eric
D. Bailey.

We also compared performance against TROLL. It is writ-
ten using MoscowML, an implementation of the StandardML(SML)
programming language.

The results are displayed in Figure 4 where it can be seen
GNOLL consistently out-performs the others at each step.

GNOLL
TROLL
Dice Parser

1,000

100

10

1

)
s
(

e
m
T

i

Hunter, IFVG

• RPG Dice
• Python Dice,
The results are displayed in Figure 5. GNOLL appears to
have good long-running efficiency, but for short commands
falls short (Though, the overall time is much shorter and
would likely not be noticeable by a user).

GNOLL
roll
rpg_dice
python_dice

100,000

10,000

1,000

100

10

1

)
s

m

(

e
m
T

i

100

101

102
104
103
Dice Roll (NdN)

105

106

100 101 102 103 104 105 106 107 108
Dice Roll (NdN)

Figure 5. Performance Comparison of Python Dice Notation
Packages

Figure 4. Performance Comparison of C/C++/SML Imple-
mentations

Table 3. Python Library Support Matrix

Table 2. Library Support Matrix

Feature

GNOLL TROLL Dice Parser

system
basic xDy
fate dice
math
drop/keep
explosions
rerolling
filtering
distributions

CFG
✓
✓
✓
✓
✓
✓
✓
X

CFG
✓
X
✓
✓
✓
✓
✓
✓

CFG
✓
✓
✓
✓
✓
✓
X
X

3.1.2 Performance comparision against popular Python
parsers. PyPi [2] is a popular repository of Python pack-
ages that many use to distribute their software. We measured
several dice parsing libraries from PyPi’s catalogue against
GNOLL’s Python3 interface.

The exact libaries installed via installation tool ‘pip’ and

benchmarked are:

• dice,

6

Feature

GNOLL

roll

rpg_dice python_dice

system
basic xDy
fate dice
math
drop/keep
explosions
rerolling
filtering
distributions

CFG
✓
✓
✓
✓
✓
✓
✓
X

CFG
✓
✓
✓
✓
✓
✓
X
X

RegEx
✓
X
✓
X
X
X
X
X

CFG
✓
✓
✓
✓
X
X
X
✓

3.2 Examples of Supported TTRPGs
There are an innumerable amount of TTRPGs, but many
of them share similar rules and only differ slightly or have
setting changes (e.g. ‘Pathfinder ’ is set in a Fantasy setting,
whereas ‘Starfinder’ is set in a Science Fiction setting). Below
is a sample of systems supported by GNOLL’s current feature
set:

• D20 Systems — Dungeons & Dragons, Pathfinder, Dun-

geon Crawl Classics

• 2D20 Systems — Star Trek Adventures, Conan: Adven-

tures in an Age Undreamed of

GNOLL: Efficient Software for Real-World Dice Notation and Extensions

• Powered By The Apocolypse — Dungeon World, Mon-

ster of The Week

• Fate Systems — Fate Core, Fate Accelerated
• TinyD6 — Tiny Dungeon, Knights of Underbed
• Star Wars RPG 1

4 Discussion
4.1 Impact of Results
As mentioned in Section 3, it was not possible to benchmark
against some popular TTRPG dice rolling software as they
were inaccessible or prone to external factors (e.g. network
latency). However, from our sampling of various other dice
notation systems, it can be seen that GNOLL performs well
in comparison — especially at higher complexities.

One anomaly in our result gathering is in our Python
results, a roll of 10000d10000 is recorded to be faster than a
roll of 1d1. As both times are still quite small, we assume that
this unexpected behavior may be due to the binding system
itself as we do not observe this behavior in the C executable.
The feature matrices in Tables 2 and 3 show a rough nega-
tive correlation between feature support and speed (TROLL,
roll being the most feature-full, but also the slowest imple-
mentations). GNOLL manages to subvert this correlation.

The main absence in these tables for GNOLL is reporting
a dice roll’s statistical distribution. This is penned for future
development, but is expected to be a secondary feature only
used by developers or advanced users.

Overall, GNOLL appears to be a comparatively efficient
library for parsing dice notation, as well as being feature-
rich.

4.2 Limitations
4.2.1 Pre/Post Processing. As mentioned in Section 2.2,
GNOLL has defined a narrow scope for development and so
has some self-enforced limitations, mostly around post/pre-
processing. Some systems like D&DBeyond connect char-
acter sheets to their dice notation so that when a value is
changed on the sheet (e.g. the character gains a level), the
dice roll is updated, but there is no change of workflow to
the user. Figure 6 shows a Roll20 dice roll [26] — using this
notation, the player controlling the character Cleo would
not have to change the syntax should their character sheet
be updated to indicate equipping a magic item or some other
bonus conferral to the Dex-mod value.

Due to GNOLL’s scope limitation, this must be done in a

preprocessing step by the host software.

1There are multiple Star Wars RPGs, The one tested was developed by
Fantasy Flight Games

7

/roll 1d20+@{Cleo|DEX−mod}

Figure 6. Roll20 notation for using a character sheet prop-
erty

Similarly, contextual information like highlighting "Criti-
cal Failures" or "Critical Successes" (A minimum or maximum
roll of a d20 dice in Dungeons & Dragons) must be done in
post-processing.

Figure 7. Superficial display of a critical failure in Roll20.

4.2.2 Programmatic Freedom. GNOLL is not a program-
ming language and currently lacks some of those common
constructs that are present in machine-friendly DSLs. As-
pects of some are present - Conditionals and rerolling allow
a certain degree of similarity to While and If statements,
but writing complex atypical logic within GNOLL’s syntax
is sure to encounter difficulties. However, we do not fore-
see many legitimate cases of this being required within the
TTRPG domain.

4.2.3 Degrees of Success. Certain TTRPG games like Fate[23]
have degrees of success depending on the roll result. For
example, one might achieve a ‘Partial Success’ or a ‘Extraor-
dinary Success’ depending on how significantly their dice
exceeded the threshold.

GNOLL provides functionality to count the number of
dice in a result. When combined with filters, this can act as a
success/failure count for a player. However, GNOLL is limited
in that you can currently only retrieve a single count from a
roll at a time. This is a side-effect of the limited complexity
of GNOLL and it is recommended for users desiring this
behavior to retrieve the full set of results from GNOLL and
post-process them to apply logic to classify their result.

4.3 Future Work
GNOLL is an ongoing project and it is expected to have a
continuous backlog of development work for the foreseeable
future. There are some items that we see on the immediate
horizon:

4.3.1 Language Support. At present, GNOLL maintains
a C, C++, Perl and Python interface. As mentioned in Section
2.1, SWIG provides many bindings from C to other languages,
but while it might be possible for users to create their bind-
ings it would be more convenient for them to use bindings

from a GNOLL release that has been tested and verified. At
present, a SWIG interface file is provided, but bindings for
other languages SWIG supports are not created yet.

We are particularly interested in expanding GNOLL sup-
port to languages known for web development, though we
welcome any other binding contributions.

4.3.2 Additional Features. GNOLL initially focussed on
TTRPG dice, though there are many dice-based board games
and digital games that can be considered as inputs for its
feature development.

Substitution. The board game One Deck Dungeon [5]
follows an adventurer as they delve through various floors
of a dungeon. On some floors, the player may be told to
force certain rolls to be changed to a set value. A prospective
syntax follows in Equation 31

4𝑑6𝑠𝑒𝑡 < 2𝑡𝑜3 = { , → ,

,

}

(31)

Expanded Macros & Shorthand. dF.1 is sometimes used
for a fate dice with only one minus and one plus side (all
others are blank). In this notation, the usual dF is known as
dF.2. This could be extended to be complete with dF.3 where
there are no blank sides, but three minus symbols and three
plus symbols.

d10x is used in the Cyborg Commando TTRPG [8] and is

shorthand for d10 * d10.

‘Block Dice’ of the form 𝑋𝑑𝑏 are used by Blood Bowl
games and expand to 𝑋𝑑6𝑘ℎ1 — i.e. roll X d6 and choose the
highest value.

Diminishing Explosion. A variant of penetrating explo-
sion called diminishing explosion reduces the value of the
dice sides rather than the value. For games with a standard
7-dice set (d%2, d20, d12, d10, d8, d6, d4) players roll the next
smallest dice (e.g. after rolling a maximum 20 on a d20, the
player would roll a d12). In this case, we would expect users
to specify the dice array as an input as the implementation is
dependent on what set of dice a system uses. A prospective
syntax follows in Equation 32.

(1𝑑6; 1𝑑4)!𝑝 = 𝑒𝑥𝑝𝑙𝑜𝑑𝑒 ({ }, 𝑝)
= { → } = 10

(32)

4.4 Future Application
We hope that, like TROLL and its predecessor, GNOLL will
be used as a platform for future research. We would like to
expand GNOLL’s supplemental scripts to offer support for
this type of work (e.g. displaying probability distributions,
optimization of queries, etc).

As the support for more languages and GNOLL’s reputa-
tion increases, we hope to have more users and contributors
to the GNOLL project.

2see Section 2.3.1

8

Hunter, IFVG

One of the longer term goals of GNOLL is to encourage an
agreed non-trivial dice notation standard across the TTRPG
and gaming domains.

4.5 Conclusion
There is a gap in the open-source software world for a dice
notation parser that is both easy to use and easy to inte-
grate. In this paper, we introduced GNOLL — an efficient
dice rolling library based on a dice notation DSL and built
upon Unix tools YACC and LEX.

There is a lack of standardization between various dice
notation implementations in popular TTRPG software and
GNOLL’s syntax is based on those conventions which are
established or by independent analyses of appropriateness
for use.

GNOLL is available on GitHub for download and contri-

bution. https://github.com/ianfhunter/GNOLL

Acknowledgments
Thanks to my wife, for her patience — and to my dog, for
her impatience.
To the various TTRPG publishers and online communities
for enabling people all over the world to play make-believe
together.

References
[1] Stras Acimovic and John Leboeuf-Little. 2018. Scum and villainy (1

ed.). Evil hat Productions.

[2] Anonymous. 2021. Python Package Index - PyPI. https://pypi.org/
[3] David M. Beazley. 1996. SWIG: An Easy to Use Tool for Integrating

Scripting Languages with C and C++. In Tcl/Tk Workshop.

[4] Natalt Design. 2020. a History Check on 2019 | D&D’s best year

ever_2019.

[5] Asmadi Games. 2019. One Deck Dungeon Rules. Asmadi Games. https:

//asmadigames.com/rules/OneDeckDungeon_Rules.pdf
[6] Udven Games. 2022. Rolz.org dice roller. https://rolz.org/
[7] Foundry Gaming. 2022. Dice Documentation|FoundryVTT. https:

//foundryvtt.com/article/dice/

[8] Gary Gygax, Frank Mentzer, and Kim Mohan. 1987. Cyborg Commando

(1 ed.). New Infinities Productions.

[9] Jason Hardy, Jennifer Brozek, Raymond Croteau, Mark Dynna, Patrick
Goodman, Robyn Rat King, Adam Large, Devon Oratz, Aaron Pavao,
and Steven Bull Ratkovich. 2013. Shadow Run (5 ed.). Catalyst Game
Labs. 44 pages.

[10] Hasbro. 2022. Hasbro, 2021 Annual Report. https://investor.hasbro.

com/node/33846/pdf.

[11] William Hawkes-Robinson. 2020. Observations on the Current State
of RPG Professionalism: An Immature but Growing Profession. (12
2020). https://doi.org/10.13140/RG.2.2.29670.34889

[12] Stephen C. Johnson. 1978. Yacc: Yet Another Compiler-Compiler. Tech-
nical Report. AT&T Bell Laboratories, Murray Hill, New Jersey 07974.
PS1:15–1 – PS1:15–32 pages.

[13] Lee Langley. 2022. RPG Dice Roller. https://github.com/dice-roller/rpg-

dice-roller/

[14] Wim T.L.P. Lavrijsen and Aditi Dutta. 2016. High-Performance Python-
C++ Bindings with PyPy and Cling. In 2016 6th Workshop on Python
for High-Performance and Scientific Computing (PyHPC). 27–35. https:
//doi.org/10.1109/PyHPC.2016.008

A Appendix
A.1 Grammar Overview
Grammar diagrams generated using Tabatkin’s Railroad Dia-
gram Generator (https://tabatkins.github.io/railroad-diagrams/).

These diagrams are correct as of time of writing.

GNOLL: Efficient Software for Real-World Dice Notation and Extensions

[15] Robin D Laws. 2015. Feng Shui 2: Core Rulebook (1 ed.). John Nephew,

Atlas Games. 10 pages.

[16] Michael E. Lesk and Eric Schmidt. Lex. 1979. A lexical analyzer gener-

ator. (1979).

[17] Mike Mearls, Jeremy Crawford, Rodney Thompson, Peter Lee, James
Wyatt, Robert J Schwalb, Bruce R Cordell, Michele Carter, Chris Sims,
and Scott Fitzgerald et al. Gray. 2014. Player’s handbook (1 ed.). 26
pages.

[18] Sérgio Medeiros, Fabio Mascarenhas, and Roberto Ierusalimschy. 2012.
From Regexes to Parsing Expression Grammars. CoRR abs/1210.4992
(2012). arXiv:1210.4992 http://arxiv.org/abs/1210.4992

[19] Torben Mogensen. 2003. Roll: A Language for Specifying Die-Rolls.
In Practical Aspects of Declarative Languages, Vol. 2562. Association
for Computing Machinery, 145–159. https://doi.org/10.1007/3-540-
36388-2_11

[20] Torben Ægidius Mogensen. 2009. Troll, a Language for specifying Dice-
rolls. In Proceedings of the 2009 ACM symposium on Applied Computing.
Association for Computing Machinery, 1910–1915. https://doi.org/
10.1145/1529282.1529708 null ; Conference date: 09-03-2009 Through
12-03-2009.

[21] Wizards of the Coast. 2022. Diversity and Dungeons & Dragons.

https://dnd.wizards.com/news/diversity-and-dnd

[22] OpenRoleplaying.org.

2012.

OpenRoleplaying.org Die
https://web.archive.org/web/20051124181107/http:

Roller.
//www.openroleplaying.org/tools/dieroller/

[23] Dominik Pielarski and Fred Hicks. 2013. Fate Core System (4 ed.). Evil

Hat Productions.

[24] Tuomas Pirinen, John Blanche, Rick Priestley, and Alessio Cavatore.

2004. Mordheim. Games Workshop. 79 pages.

[25] Franco Ponticelli and Jamie Ballingall. 2022. GitHub Project: diceroller.

https://github.com/fponticelli/diceroller

[26] Roll20. 2022. Dice Reference|Roll20. https://help.roll20.net/hc/en-

us/articles/360037773133-Dice-Reference

[27] Paul Scriven. 2021. From Tabletop to Screen: Playing Dungeons and
Dragons during COVID-19. Societies 11, 4 (2021). https://doi.org/10.
3390/soc11040125

[28] Lodestar team. 2022. RoleGate. https://www.rolegate.com/
[29] Mogensen Torben. 2006. Dice-Rolling Mechanisms in RPGs. (2006).
[30] David Waldron. 2005. Role-Playing Games and the Christian Right:
Community Formation in Response to a Moral Panic. The Journal of
Religion and Popular Culture 9 (2005), 3–3.

[31] Andrew Zhu. 2022. Inline Rolling|Avrae. https://avrae.readthedocs.

io/en/stable/cheatsheets/inline_rolling.html

[32] Aleš Črnič. 2012. Contemporary anti-satanic panic: Actions and reac-

tions. 49 (07 2012), 753–766.

9

Hunter, IFVG

Figure 8. Railroad Diagram of Dice Terminals

Figure 9. Railroad Diagram of dice operations

10

GNOLL: Efficient Software for Real-World Dice Notation and Extensions

Figure 10. Railroad Diagram of conditions used in filters

Figure 11. Railroad Diagram of math operations

Figure 12. Railroad Diagram of programmatic operations

11

