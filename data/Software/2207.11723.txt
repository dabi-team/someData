On the Validation of Multi-Level Personalised
Health Condition Model

Najma Taimoor
Institute for Computer Technology
Vienna University of Technology
Vienna, Austria
e1155891@student.tuwien.ac.at

Semeen Rehman
Institute for Computer Technology
Vienna University of Technology
Vienna, Austria
semeen.rehman@tuwien.ac.at

2
2
0
2

l
u
J

4
2

]
E
S
.
s
c
[

1
v
3
2
7
1
1
.
7
0
2
2
:
v
i
X
r
a

Abstract—This paper presents a veriﬁcation-based methodol-
ogy to validate the model of personalised health conditions. The
model identiﬁes the values that may result in unsafe, unreachable,
in-exhaustive, and overlapping states threaten otherwise threaten
the patient’s life by producing false alarms by accepting suspi-
cious behaviour of the target health condition. Contemporary ap-
proaches to validating a model employ various testing, simulation
and model checking techniques to recognise such vulnerabilities.
However, these approaches are neither systematic nor exhaustive
and thus fail to identify those false values or computations that
estimate the health condition at run-time based on the sensor
or input data received from various IoT medical devices. We
have demonstrated our validation methodology by validating our
example multi-level model that describes three different scenarios
of Diabetes health conditions.

Index Terms—Health-condition, personalized healthcare, mul-

tilevel modelling, veriﬁcation, validation, reliability.

I. INTRODUCTION

Model-based run-time monitoring of a health condition [1]
is a technique that monitors the health condition by comparing
run-time estimation of the health condition (i.e., as determined
by the input data received from sensors and other IoT medical
devices with the expected estimation of the health condition
(i.e., as formalised in the model). It raises an alarm when
an inconsistency between the two estimations is detected and
in case of an alarm, the monitor knows what exactly went
wrong due to the violated description in the model. Since
the monitor automatically monitors and controls the health
condition, it is critically important to ensure that the model
is valid because any false detection or evasion by the monitor
may threaten the patient’s health and eventually life. Typically,
the model is valid, if it does not accept any false estimations of
the health condition. Contemporary approaches to establishing
the validity of the model employ different techniques. For
instance, the approaches developed in [2], [3] employ testing
techniques to validate the model by running several tests and
observing if any tests that accept false estimates. The other
approaches [4]–[6] employ simulation techniques to validate
the model by executing various simulation runs based on dif-
ferent conﬁgurations of the model and by observing any runs
that accept false estimations. However, testing and simulation-
based approaches are not practical mainly because they are
in-exhaustive and impractical on one hand (e.g., they fail to

test/simulate all possible estimations due to required large
computational resources and time), and are not systematic
and rigorous on the other hand (e.g., there is no deﬁnition
of a good test/simulation) [7]. The authors in [8]–[11] works
have employed veriﬁcation techniques to validate the model,
for example, by executing the model and checking if all
possible runs of the formally speciﬁed model do not accept
any false estimations. The veriﬁcation techniques are rigorous
as they produce a counterexample (i.e., traces of the run)
exactly showing why the identiﬁed estimation is indeed false.
However, the afore-mentioned model checking techniques can
detect false estimations of the health condition if the model
involves linear computations operating over regular integer
values. However, in practice, a health condition is monitored
by the values measured by various sensors and IoT-based med-
ical devices which involve non-linear computations operating
over real values with a variable error rate of the involved
sensors. Furthermore, the data received from sensors and IoT
devices may get compromised due to their limited resources
and inherently unreliable data-sharing wireless communication
channels.

We propose a novel approach that employs veriﬁcation to
validate a given model by identifying vulnerabilities in the
model. The vulnerabilities results in false estimation of the
health condition at run-time including

• un-safe states: the legitimate states (i.e., not breaching
the model), but are unsafe for patients (i.e., compromise
the underlying biological process),

• un-reachable states: the states that are legitimate, but are
not reachable due to underlying biological processes, and
• in-exhaustive and overlapping states: the states are de-
veloped as a result of rules that describe different levels
of the health condition, e.g., either the rules do not cover
all possible levels, or the various rules describe the same
level, respectively.

Our methodology detects the aforementioned vulnerabilities
by producing a counterexample that includes a set of those
values that constitute a false estimate. Once false estimations
are identiﬁed, then either the model can be reﬁned so that
it does not accept those values or the set of values can be
monitored at run-time to raise an alarm when detected. Our

 
 
 
 
 
 
Fig. 1: Monitoring of Personalised Healthcare Services

methodology is part of the larger project shown in Fig. 1,
whose aim is model-based monitoring of personalized health
condition of a patient at run-time to ensure continuous oper-
ation in case of failure or attack, and patient’s safety on one
hand, and extending patient’s life expectancy by optimising
her multiple health conditions on the other hand. Fig. 1 shows
the following key modules of our methodology:

1) Modelling technique that allows multi-level modelling
of a health condition with a fundamentally different
abstraction that is a mix of ﬁne-grained and coarse-
grained on one hand, and integrates various modelling
descriptions e.g., rules, process, rate and mathematical
theories by overcoming their inherent limitations on the
other hand, as explained in Section III and [12].

2) A methodology to validate the health condition model

(developed in the previous step) ensuring that

• a given model adequately integrates various rules,
processes, rates and mathematical theories that de-
scribe the health condition, and

• veriﬁes that the given model only accepts clinically
valid states of the health condition by identifying
and eliminating un-reachable, un-safe and overlap-
ping states as explained in Section IV.

3) A methodology to develop a run-time monitor from
the reﬁned model (validated in the previous step). The
monitor checks if a given input data from the application
is consistent with the model and reports an error when it
violates any model description. Speciﬁcally, the monitor-
ing is free from false alarms because it not only reports
the violation but also identiﬁes the exact description and
rule that was violated, which makes the monitoring more
explainable and practical [12].

The rest of the paper is organized as follows. Section II
presents related work for various techniques to model valida-
tion. Section III explains our methodology that supports multi-
level modeling of an example personalized health condition.

Section IV ﬁrst introduces our methodology for validation of
the model, then demonstrates the approach through three rep-
resentative example scenarios. This manuscript is concluded
in section V.

II. STATE-OF-THE-ART

In this section, we present state-of-the-art techniques that
are used to validate the models in general and personalised
health condition models in particular, i.e., model testing, model
simulation and model checking, respectively. As sketched in
Table I, we evaluate the aforementioned techniques against the
following parameters:

• validation – if the technique supports detection of invalid

computations as well as data,

• completeness – if the technique detects invalid computa-

tions as well as data,

• diagnostic resolution – if the technique provides exact
information of the detected invalid computation and data,
• multiple health condition – if the technique supports
validation of multi-level model of personalized health
conditions, and

• scalable – if the technique is scalable.

A. Model Testing

In this approach, ﬁrst various tests are generated from the
model, and then the execution of the model or its imple-
mentation is observed to check if the execution passes any
test. The tests essentially capture various incorrect estimates
of the health condition. There are various testing approaches
employed by the state of the art, e.g., black-box [13], [14],
white-box [15], unit [16] and various AI [17], [18] tech-
niques to test the execution. These approaches are limited
mainly because they fail to test every possible estimation of
the health condition due to the required large computational
resources and time. Furthermore, as sketched in Table I, these

Technique

Method

Validation

Completeness

Diagnostic Resolution

Multiple
health condition(s)

Scalable

Computing

Data

Model Testing

Model Simulation

Model Checking

Black-box [13], [14]
White-box [15]
Unit [16]
various AI [17], [18]
Discrete event [19]
Process [20]
Dynamic [21]
Approximation [22]
Symbolic [23]
Numeric & Symbolic
(this work)

TABLE I: Validation of Personalized Health Condition Model

approaches partially support the detection of those compu-
tations that results in false estimation and have no support
for detecting those sensors or input values that constitute a
false estimation of the health condition. These approaches are
scalable only for those models that involves the values with
numerous permutations (e.g., Boolean, short int), and provide
no diagnostic resolution (i.e., provide no information about
what exactly went wrong when a false estimation test passes).

B. Model Simulation

[19], process [20], and dynamic

In this approach, ﬁrst various conﬁgurations are generated
from the model, and then simulation of the model or its
implementation are observed to check if any conﬁguration
leads to false estimation. The conﬁgurations essentially capture
various incorrect estimates of the health condition. Such ap-
proaches employ different simulation techniques, e.g., discrete
event
[21] simulation
to test the execution. These approaches are limited mainly
because they fail to conﬁgure every possible estimation of
the health condition. Furthermore, as sketched in Table I,
these approaches partially supports the detection of those
computations and data that results in the false estimation of
the health condition. Analogous to testing, these approaches
are partially scalable and provide no diagnostic resolution.

C. Model Checking

In this approach, ﬁrst health conditions and their estimates
are formalized as a model, then the model is executed to
automatically check if all possible runs of the model can detect
any false estimate. The approach produces a counterexample
when a false estimate is detected. The counterexample pro-
vides an exact execution trace of the detected false estimates.
The estimates essentially model various constraints on input
values of the health condition model. Such approaches employ
different satisﬁability techniques, e.g., approximation [13],
[14] and symbolic [15] solving to check the model execution.
These approaches are good at detecting only those computa-
tions that lead to a false estimation but have no support for
detecting such values. Furthermore, as sketched in Table I,
these approaches do not support the validation of the multiple

health condition model. However, they support the diagnostic
resolution because as a result of the counterexample, such
approaches exactly know what execution trace constituted the
false estimation. These approaches are partially scalable due
to the state explosion problem.

In comparison with the above-mentioned different ap-
proaches, our methodology follows a model checking ap-
proach. However, the working of our approach can not be
directly compared with other approaches (testing and valida-
tion) due to the fundamentally different input and processing
of the approaches. As shown in Table I, our methodology
combines numeric and symbolic decision procedures to detect
not only those computations that lead to a false estimation but
also can detect those values that constitute a false estimation.
Furthermore, our methodology also supports detecting false es-
timations in a multi-level personalized health condition model.
In case of a false estimation, our methodology produces a
counterexample that includes a set of values (i.e., estimation of
the health condition) that are legal but not real. The approach is
even capable of detecting stealthy sensor or input values with a
speciﬁc error rate using δ-precision decision procedures [24].

III. MULTI-LEVEL MODELING OF HEALTH CONDITION

Current approaches aim to personalize a single health
inheritance)
condition with speciﬁc causes (e.g., genetics,
but are unable to personalize the overall health of a patient
which requires an understanding of the biological relationship
among different health conditions. We deﬁne personalised
healthcare that takes into account the interdependent effect
of multiple health conditions of patients at different levels
namely interface (observable parameters), mechanical (delta
error of bio-sensing techniques involved in IoTs), biological
(e.g., involved biological process, genes, proteins), and envi-
ronmental (exercise, diet, medication) that helps to extend the
life expectancy of the patient by optimizing his/her multiple
health conditions [12].

As a starting point, we have modelled a health condi-
tion using the modelling language that supports modelling
a health condition as a logical relationship between different
abstractions of the condition reﬂected at different levels. We

model different abstractions (e.g., rules, processes and rates)
as a logical relation where rule-based interface parameters are
modelled as a Boolean function (i.e, predicate) over parameters
with numeric and Boolean values. The incapability of the
responsible biological process is modelled as a mathematical
function that describes the rate of change (e.g., differential
equation) in the biological process based on the interface
parameters. The susceptibility of a health condition is also
modelled as a mathematical function that describes how differ-
ent external factors generate a susceptibility of the biological
processes, and at the rate of its occurrence. For example,
diabetes health condition (see Fig. 2) is modelled at
the
following levels.

Fig. 2: Multi-Level Health Condition Modelling Overview

• Interface level models glucose concentration in the blood-

stream (mmol/L) that respect certain ranges.

• Mechanical level model determines the inaccuracy of the
interface level parameters that arise from the inherent
unreliability of the underlying sensing techniques and
IoT-based medical devices.

• Biological level models incapacity of the biological pro-
cess associated with the health conditions as determined
by various elements of the responsible faulty genes, i.e.,
cellular component, biological process, and molecular
function. For example, malfunctioning of the NFATc1
gene involved in diabetes causes a disorder Atrioventric-
ular Septal Defect (AVSD) that causes cardiovascular and
fetal genetic muscle diseases [25].

• Environmental level models susceptibility of the condi-
tion through external factors and activities, for example,
medication (Glucophage) and lifestyle interventions (e.g.,
daily walk, carbohydrate-based diet) [26].

The former two levels describe discrete properties while the
latter two describe continuous properties of the health condi-
tion. Though our modelling language is expressive enough to
adequately model multiple health conditions and their interde-
pendent effects, still we neither proved nor demonstrated that
the language always allows the development of a valid model
of the health condition, i.e., the model that does not accept
any false abstractions of the health condition. Speciﬁcally, we

show that the model is valid if and only if it is free from the
vulnerabilities involving unsafe, unreachable, in-exhaustive,
and overlapping states as explained in section I.

In the next section, we introduce a methodology to validate
the model of personalised health conditions by identifying
the vulnerabilities (presented in Section I) in the model. In
particular, the focus of this paper is to validate the model by
showing that the model is free from unsafe conditions.

IV. VALIDATION OF THE MODEL

Therefore, we present

The personalised health condition model presented in sec-
tion III adequately describes various ﬁne-grained (e.g., bi-
ological and environmental level) and coarse-grained (e.g.,
interface and mechanical level) details of the condition at
levels. However, validation for the adequacy of
different
our given example model (i.e., key information required to
automatically verify the validity) has neither been established
nor proved. Consequently, our given example model (discussed
in section III) is not safe and can threaten the patient’s safety
and life because of producing false alarms due to various
vulnerabilities in the model arising from unsafe, unreachable,
in-exhaustive, and overlapping states as explained in section I.
the methodology to validate the
model of personalised health conditions by identifying various
vulnerabilities in the model, e.g., the values that may result
in the afore-mentioned unsafe, unreachable,
in-exhaustive,
or overlapping states. To identify such vulnerabilities, we
use a non-linear SMT solver dReal [24] that implements δ-
complete decision procedures by exploiting scalable numerical
methods for handling non-linearity. A typical SMT solver [27]
is a tool for deciding the Boolean satisﬁability of logical
formulas in the background theories, e.g., arithmetic, bit-
vectors, arrays, and uninterpreted functions. These solvers are
used for extended static checking, predicate abstraction, test
case generation, and bounded model checking over inﬁnite
domains. Analogously, the dReal solver takes a system model
and desired properties of the model as an input and returns
unsat when the model does not satisfy the property or δ-sat
together with a set of values that all satisfy a δ-perturbed form
of the properties. We provide our model of the personalised
health condition and ask the solver if it can ﬁnd perturbed
forms of the properties.

To demonstrate the effectiveness of our methodology, we
simulate the following three different hypothetical but practical
scenarios of diabetes health conditions based on the model
equation 1. The scenarios are discussed later in the sub-
sections and are sketched in Fig. 3 by red-dotted, blue-dotted
and green-dotted rectangles, respectively.

1) First scenario aims at validating the medication model
such that the model does not accept any false estimation
of the health condition when the patient is taking the
required medicine as prescribed by the doctor.

2) Second scenario reﬁnes the ﬁrst scenario through val-
idating the additional diet model such that the model
also does not accept any false estimation of the health

Fig. 3: Validation of Diabetes Model Considering Medication, Diet, and Exercise

bg(f, gl, ge, a, p, l, map) =






. . .

(10 ≤ gl + 0.5 < 13.33)

if map = {(gl, ±0.5)}, f is Yes, ge is F, 70 < a < 40,

∧(10 ≤ gl − 0.5 < 13.33)

p is Yes, l is Normal

(1)

condition when the patient is eating a health-condition-
conscious diet as recommended by the doctor.

3) Third scenario reﬁnes the second scenario through vali-
dating the additional exercise model such that the model
also does not accept any false estimation of the health
condition when the patient is practising the exercise
regularly as recommended by the doctor.

For demonstration, we simply show that the model is valid
if and only if it is free from unsafe states. Our methodology
assures that the model can detect accidentally or intentionally
compromised input values which do not breach the model but
do not provide the correct estimation of the health condition.
Consequently, the approach assures that the multi-level model
always correctly estimates the health condition.

A. Validation of Medication Model

This scenario includes a model where the diabetes health
condition of a patient and the effect of the medication are
modelled. The goal is to validate the model by identifying sus-
ceptible values even when the health condition is in a normal
state, i.e., diabetes level is normal and the patient is regularly
taking the required medicine. For demonstration and reader’s
convenience, we simplify the model of the scenario which is
presented in Equation 1 with the following assumptions:

• the state of diabetes is determined by a sensor that
measures blood glucose value in the patient’s body,
• a medicine that controls diabetes through injecting insulin
unit in the patient’s body is also determined by the sensor,
• the system runs in a discrete mode where the afore-
mentioned values change in a discrete-time interval, and
• the sensor values received at earlier interval (e.g., at time

t) are trusted.

Considering the above assumptions, a health condition of

diabetes can be modelled as

BG(t + 1)1 = BG(t) − (I(t + 1) − δ)
(2)
which says that the value of blood glucose (BG) at time t + 1
equals the value of blood glucose at previous time t minus the
insulin units (I) taken at time t + 1 and the injection error δ.
For simplicity, we assume that the injection of insulin units
instantly reduces the blood glucose in the body.

For identifying the susceptible, let us simulate the following
hypothetical scenario: if a blood glucose at time t is BG(t) =
14 and insulin units injected at time t+1 is I(t+1) = 1.5 that
results in a new blood glucose BG(t + 1) = 12 at time t + 1
with δ error of −0.5. If the sensors provide secure and correct
values BG(t+1) = 12, BG(t) = 14, and I(t+1) = 1.5 to the
model, they will be accepted validating the model because the
values satisfy the model represented in Equation 2 as 12 =
14 − (1.5 + 0.5). However, due to inherently insecure and
unreliable communication of sensor network, or adversary’s
interference, the sensor values at run-time may be hoaxed

1) either by compromising value BG(t + 1) = 13, which
will be rejected by the model because the value doesn’t
satisfy the model as represented by equation 2 because
13 (cid:54)= 14 − (1.5 + 0.5),

2) or by compromising values I(t+1) = 2.5 and δ = +0.5,
which will be accepted by the model satisfying Equa-
tion 2 because 12 = 14 − (2.5 − 0.5). Evidently these
values are a result of accidental (e.g., unreliable sensor
resources) or intentional (e.g., adversarial) incident.
Our methodology can identify the latter compromised values
using the solver by providing the aforementioned model as an
input (see Listing 1) that produced the results (see Listing 2)
successfully identifying the compromised values that satisﬁed
the model but are not real. Practically, there could be several
reasons that may result in such susceptible values, e.g.,

1The variable BG(t+1) is represented as bg@t1 in dReal as shown in
Listing 1. All the model variables are encoded in the dReal following the
same analogy as shown in the corresponding listings.

1) either the sensor or medical device is producing incor-
rect values due to malfunctioning of their software or
hardware,

2) or some adversary may have compromised the values,
3) or the values indicate accurate but unprecedented and
exceptional health condition of the patient due to an un-
known factor (e.g., inappropriate diet, short of exercise
or underlying other health condition).

Listing 1: Example Model

1
2
3
4
5
6
7
8
9
10
11

(set−logic QF NRA)
(declare−fun bg@t () Int)
(declare−fun bg@t1 () Int)
(declare−fun i@t1 () Real)
(declare−fun err () Real)
(assert (and (= bg@t1 12) (= bg@t 14)))
(assert (= err 0.5))
(assert (and (<= 1 i@t1) (<= i@t1 5)))
(assert (= bg@t1 (− bg@t (− i@t1 err))))
(check−sat)
(exit)

Once the suspicious values are detected in the former two
cases, either the model can be reﬁned to restrict such values
or can be handled at run-time. While in the last case, a
practitioner can further investigate the health condition by
carrying advance tests of the underlying condition to determine
the actual state of the health. To reﬁne the model, we validate
the adequacy of the model for unknown factors, e.g., the
effect of inappropriate diet on the health condition. In the
next subsection, we ﬁrst deﬁne the model to incorporate the
unknown factor and discuss the validity of the reﬁned model.

Listing 2: Identiﬁed Invalid Values

1 delta−sat with delta = 0.01
2 bg@t : [14, 14]
3 bg@t1 : [12, 12]
i@t1 : [2.5, 2.5]
4
5 err : [0.5, 0.5]

B. Validation of Medication and Diet Model

This scenario includes a model where the diabetes health
condition of a patient and the effect of medication and diet
(i.e., carbs) are modelled. The goal is to validate the model by
identifying susceptible values even when the health condition
is in a normal state, i.e., diabetes level is normal, the patient
is regularly taking the required medicine and the desired diet.
For demonstration, we simplify and reﬁne the model of the
scenario which is presented in Equation 1 with the following
assumptions:

• the state of diabetes is determined by a sensor that
measures blood glucose value in the patient’s body,
• a medicine that controls diabetes through injecting insulin
in the patient’s body is also determined by the sensor,
• a diet intake (Din) that adds a speciﬁc amount of carbo-
hydrates (Cin) in the patient’s body which is monitored
by the sensor,

• the system runs in a discrete mode where the afore-
mentioned values change in a discrete-time interval.

Considering the above assumptions, a health condition of

diabetes can be modelled as

BG(t + 1) = BG(t)

+ (Din(t + 1) × Cin(t + 1))
− (I(t + 1) − δ)

(3)

which says that the value of blood glucose at time t+1 equals

1) the value of blood glucose at previous time t
2) plus the diet intake multiplied by the carbs in the diet,
which computes collective affect of carbs on the health
condition and

3) subtract the insulin units taken at time t + 1 and the

injection error δ.

For simplicity, we assume that insulin injection instantly

reduces the blood glucose in the body.

For identifying the susceptible, let us simulate the following
hypothetical scenario: if a blood glucose at time t is BG(t) =
14 and insulin units injected is I(t + 1) = 2.5 that results in a
new blood glucose BG(t + 1) = 12 at time t + 1 with δ error
of −0.5. Furthermore, the diet intake at time is Din = 2 at
t+1 that contains 50% carbohydrates Cin = 0.5. If the sensors
provide secure and correct values BG(t + 1) = 12, BG(t) =
14, I(t + 1) = 2.5, Din = 2 and Cin = 0.5 to the model,
they will be accepted validating the model because the values
satisfy the model represented in Equation 3 as 12 = 14 + (2 ×
0.5) − (2.5 + 0.5). However, due to inherently insecure and
unreliable communication of sensor network, or adversary’s
interference, the sensor values at run-time may be hoaxed

1) either by compromising value BG(t + 1) = 13, which
will be rejected by the model because the value don’t
satisfy the model as represented by Equation 3 because
13 (cid:54)= 14 + (2 × 0.5) − (2.5 + 0.5),

2) or by compromising values Din = 1, I(t + 1) = 3.0
and δ = +0.5, which will be accepted by the model
satisfying Equation 3 because 12 = 14+(1×0.5)−(3.0−
0.5). Evidently these values are a result of accidental
(e.g., unreliable sensor resources or medical devices) or
intentional (e.g., adversarial) incident.

Analogous to the previous scenario, our methodology can
again identify the latter compromised values using the solver
by providing the afore-mentioned model as an input (see
Listing 3) that produced the results (see Listing 4) successfully
identifying the compromised values that satisﬁed the model but
are not real. The susceptible values are result of the reasons
as discussed in the section IV-A.

Listing 3: Example Model

1
2
3
4
5
6
7
8
9
10
11

(set−logic QF NRA)
(declare−fun bg@t () Int)
(declare−fun bg@t1 () Int)
(declare−fun i@t1 () Real)
(declare−fun diet
(declare−fun carbs in@t1 () Real)
(declare−fun err () Real)
(assert (and (= bg@t1 12) (= bg@t 14)))
(assert (and (<= −0.5 err) (<= err 0.5)))
(assert (= err 0.5))
(assert (= carbs in@t1 0.5))

in@t1 () Real)

12
13
14
15

16
17

(assert (and (<= 0 i@t1) (<= i@t1 3)))
(assert (and (<= 0 diet
in@t1) (<= diet
(assert (and (<= 0 carbs in@t1) (<= carbs in@t1 3)))
(assert (= bg@t1 (− (+ bg@t (* diet

in@t1 3)))

in@t1 carbs in@t1))

(− i@t1 err))))

(check−sat)
(exit)

To handle the suspicious values, we reﬁne and validate the
adequacy of the model for other unknown factors, e.g., the
effect of inappropriate exercise on the health condition. In the
next subsection, we further reﬁne the model to incorporate the
unknown factor and discuss the validity of the reﬁned model.

Listing 4: Identiﬁed Invalid Values

1 delta−sat with delta = 1
2 bg@t : [14, 14]
3 bg@t1 : [12, 12]
i@t1 : [2.5, 3]
4
5 diet
6 carbs in@t1 : [0.5, 0.5]
7 err : [0.5, 0.5]

in@t1 : [0, 1]

C. Validation of Medication, Diet, and Exercise Model

This scenario includes a model where the diabetes health
condition of a patient, the effect of medication, diet (i.e., carbs)
and exercise are modelled.

The goal is to validate the model by identifying susceptible
values even when the health condition is in a normal state,
i.e., diabetes level is normal, the patient is regularly taking
the required medicine, desired diet and practising appropriate
exercise. For demonstration and reader’s convenience, we sim-
plify model of the scenario which is presented in Equation 1
with the following assumptions:

• the state of diabetes is determined by a sensor that
measures blood glucose value in the patient’s body,
• a medicine that controls diabetes through injecting insulin
in the patient’s body is also determined by the sensor,
• a diet intake that adds a speciﬁc amount of carbohydrates
in the patient’s body which is monitored by the sensor,
• an exercise (EX) helps to reduce the effect of diet
(i.e., carbohydrates) in the patient’s body which is also
monitored by the sensor,

• the system runs in a discrete mode where the afore-
mentioned values change in a discrete-time interval.
Considering the above assumptions, a health condition of

diabetes can be modelled as

BG(t + 1) = BG(t)

+

Din(t + 1) × Cin(t + 1)
EX(t + 1)

− (I(t + 1) − δ)

(4)

which says that the value of blood glucose at time t+1 equals

1) the value of blood glucose BG at previous time t
2) plus the diet intake Din multiplied by the carbs Cin in
the diet whose affect is reduced by the factor of exercise
EX, which collectively computes the affect of exercise
and diet on the health condition and

3) subtract the insulin I taken at time t + 1 from the

injection error δ.

For simplicity, we assume that the injection of insulin units
instantly reduces the blood glucose in the body.

For identifying the susceptible, let us simulate the following
hypothetical scenario: if a blood glucose at time t is BG(t) =
14 and insulin units injected at time t + 1 is I(t + 1) = 2.5
that results in a new blood glucose BG(t + 1) = 12 at time
t + 1 with δ error of −0.5. While the diet intake at time is
Din = 1 at t + 1 that contains 50% carbohydrates Cin = 0.5
whose affect is reduced by the factor of exercise performed
EX(t + 1) = 0.5. If the sensors provide secure and correct
values BG(t+1) = 12, BG(t) = 14, I(t+1) = 2.5, Din = 1
and Cin = 0.5 to the model, they will be accepted validating
the model because the values satisfy the model represented
in Equation 4 as 12 = 14 + 1×0.5
0.5 − (2.5 + 0.5). However,
due to inherently insecure and unreliable communication of
sensor network, or adversary’s interference, the sensor values
at run-time may be compromised

1) either by compromising value BG(t + 1) = 13, which
will be rejected by the model because the value don’t
satisfy the model as represented by Equation 3 because
13 (cid:54)= 14 + 1×0.5

0.5 − (2.5 + 0.5),

2) or by compromising values I(t+1) = 2.75, Din(t+1) =
0.25 and δ = +0.5, which will be accepted by the model
satisfying Equation 4 because 12 = 14 + 0.25×0.5
0.5 −
(2.75 − 0.5). Evidently these values are a result of
accidental (e.g., unreliable sensor resources or medical
devices) or intentional (e.g., adversarial) incident.
Analogous to the previous scenario, our methodology can
again identify the latter compromised values using the solver
by providing the afore-mentioned model as an input (see
Listing 5) that produced the results (see Listing 6) successfully
identifying the compromised values that satisﬁed the model but
are not real. The susceptible values are result of the reasons
as discussed in the section IV-B.

Listing 5: Example Model

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17

18
19

in@t1 () Real)

(set−logic QF NRA)
(declare−fun bg@t () Int)
(declare−fun bg@t1 () Int)
(declare−fun i@t1 () Real)
(declare−fun diet
(declare−fun carbs in@t1 () Real)
(declare−fun ex@t1 () Real)
(declare−fun err () Real)
(assert (and (= bg@t1 12) (= bg@t 14)))
(assert (and (<= −0.5 err) (<= err 0.5)))
(assert (= err 0.5))
(assert (and (<= 0 ex@t1) (<= ex@t1 0.5)))
(assert (= carbs in@t1 0.5))
(assert (and (<= 0 i@t1) (<= i@t1 3)))
(assert (and (<= 0 diet
in@t1) (<= diet
(assert (and (<= 0 carbs in@t1) (<= carbs in@t1 3)))
(assert (= bg@t1 (− (+ bg@t (/ (* diet
) ex@t1)) (− i@t1 err))))

in@t1 3)))

in@t1 carbs in@t1

(check−sat)
(exit)

Analogous to the previous scenario, once the suspicious
values are detected in the former two cases, either the model

can be reﬁned to restrict such values or can be handled at
run-time. While in the last case, a practitioner can further
investigate the health condition by carrying advance tests of
the underlying condition to determine the actual health state.

Listing 6: Identiﬁed Invalid Values

1 delta−sat with delta = 1
2 bg@t : [14, 14]
3 bg@t1 : [12, 12]
i@t1 : [2.5, 2.75]
4
5 diet
6 carbs in@t1 : [0.5, 0.5]
7 ex@t1 : [0.25, 0.5]
8 err : [0.5, 0.5]

in@t1 : [0, 0.25]

V. CONCLUSION AND FUTURE WORK

We have presented a methodology to validate the multi-level
health condition model. The effectiveness of the methodol-
ogy is successfully demonstrated by validating three different
scenarios of the Diabetes health condition by detecting those
values that were accepted by the model but constituted a
false estimate of the health condition. As a next step, we
are validating the complete model. Later, we will develop
a run-time monitor from the validated model to check the
consistency of the health condition estimation derived from
the model with the real-time estimation of the health condition
as determined by the sensors and IoT-based medical devices.
When an inconsistency is detected, the monitor reports an error
and identiﬁes the exact violated model description which will
make the monitoring explainable. Furthermore, our methodol-
ogy will help the practitioners in improving the management
of the health condition by identifying its unsafe, unreachable,
in-exhaustive, and overlapping states.

REFERENCES

[1] J. G. Chase, J.-C. Preiser, J. L. Dickson, A. Pironet, Y. S. Chiew, C. G.
Pretty, G. M. Shaw, B. Benyo, K. Moeller, S. Safaei et al., “Next-
generation, personalised, model-based critical care medicine: a state-of-
the art review of in silico virtual patient models, methods, and cohorts,
and how to validation them,” Biomedical engineering online, vol. 17,
no. 1, pp. 1–29, 2018.

[2] N. M. Cohen, O. Schwartzman, R. Jaschek, A. Lifshitz, M. Hoichman,
R. Balicer, L. I. Shlush, G. Barbash, and A. Tanay, “Personalized lab
test models to quantify disease potentials in healthy individuals,” Nature
medicine, vol. 27, no. 9, pp. 1582–1591, 2021.

[3] A. Van Den Berg, C. L. Mummery, R. Passier, and A. D. Van der
Meer, “Personalised organs-on-chips: functional testing for precision
medicine,” Lab on a Chip, vol. 19, no. 2, pp. 198–205, 2019.

[4] M. Esposito and L. Picchiami, “Simulation-based synthesis of person-

alised therapies for colorectal cancer,” 2021.

[5] M. Bongert, M. Geller, W. Pennekamp, and V. Nicolas, “Simulation
of personalised haemodynamics by various mounting positions of a
prosthetic valve using computational ﬂuid dynamics,” Biomedical Engi-
neering/Biomedizinische Technik, vol. 64, no. 2, pp. 147–156, 2019.
[6] A. Cheng, W. Eppich, V. Grant, J. Sherbino, B. Zendejas, and D. A.
Cook, “Debrieﬁng for technology-enhanced simulation: a systematic
review and meta-analysis,” Medical Education, vol. 48, no. 7, pp. 657–
666, 2014.

[7] E. W. Dijkstra, A Discipline of Programming, ser. Prentice-Hall series

in automatic computation. Prentice-Hall, 1976.

[8] B. Barbot, M. Kwiatkowska, A. Mereacre, and N. Paoletti, “Estima-
tion and veriﬁcation of hybrid heart models for personalised medical
and wearable devices,” in International Conference on Computational
Methods in Systems Biology. Springer, 2015, pp. 3–7.

[9] V. M. Jones, “Model driven development of m-health systems (with
a touch of formality),” in Fourth Annual IEEE International Confer-
ence on Pervasive Computing and Communications Workshops (PER-
COMW’06).

IEEE, 2006, pp. 5–pp.

[10] J.-S. Boudrias, P. Gaudreau, P. Desrumaux, J.-S. Leclerc, M. Ntsame-
Sima, A. Savoie, and L. Brunet, “Veriﬁcation of a predictive model
of psychological health at work in canada and france.” Psychologica
Belgica, 2014.

[11] K. Vatanparvar, E. Nemati, V. Nathan, M. M. Rahman, and J. Kuang,
“Coughmatch–subject veriﬁcation using cough for personal passive
health monitoring,” in 2020 42nd Annual International Conference of
the IEEE Engineering in Medicine & Biology Society (EMBC).
IEEE,
2020, pp. 5689–5695.

[12] N. Taimoor and S. Rehman, “Towards Modelling and Monitoring
of Real-time Personalised Health Conditions,” in 27th International
Conference on Emerging Technologies and Factory Automation, 2022,
to Appear.

[13] M. J. Walker, J. Bourke, and K. Hutchison, “Evidence for personalised
medicine: mechanisms, correlation, and new kinds of black box,”
Theoretical medicine and bioethics, vol. 40, no. 2, pp. 103–121, 2019.
[14] D. S. Watson, J. Krutzinna, I. N. Bruce, C. E. Grifﬁths, I. B. McInnes,
M. R. Barnes, and L. Floridi, “Clinical applications of machine learning
algorithms: beyond the black box,” Bmj, vol. 364, 2019.

[15] B. Mezuk, C. M. Abdou, D. Hudson, K. N. Kershaw, J. A. Rafferty,
H. Lee, and J. S. Jackson, ““white box” epidemiology and the social
neuroscience of health behaviors: the environmental affordances model,”
Society and mental health, vol. 3, no. 2, pp. 79–95, 2013.

[16] T. C. Lucas, T. M. Pollington, E. L. Davis, and T. D. Hollingsworth,
“Responsible modelling: unit testing for infectious disease epidemiol-
ogy,” Epidemics, vol. 33, p. 100425, 2020.

[17] S. Kaushik, A. Choudhury, P. K. Sheron, N. Dasgupta, S. Natarajan,
L. A. Pickett, and V. Dutt, “Ai in healthcare: time-series forecasting
using statistical, neural, and ensemble architectures,” Frontiers in big
data, vol. 3, p. 4, 2020.

[18] G. Alﬁan, M. Syafrudin, M. F. Ijaz, M. A. Syaekhoni, N. L. Fitriyani,
and J. Rhee, “A personalized healthcare monitoring system for diabetic
patients by utilizing ble-based sensors and real-time data processing,”
Sensors, vol. 18, no. 7, p. 2183, 2018.

[19] E. Demir, M. M. Gunal, and D. Southern, “Demand and capacity
modelling for acute services using discrete event simulation,” Health
Systems, vol. 6, no. 1, pp. 33–40, 2017.

[20] I. S. Khayal and A. M. Farid, “A dynamic system model for personalized
healthcare delivery and managed individual health outcomes,” IEEE
Access, vol. 9, pp. 138 267–138 282, 2021.

[21] T. Sluijs, L. Lokkers, S. ¨Ozsezen, G. A. Veldhuis, and H. M. Wortelboer,
“An innovative approach for decision-making on designing lifestyle
programs to reduce type 2 diabetes on dutch population level using
dynamic simulations,” Frontiers in public health, vol. 9, 2021.

[22] B. Herd, S. Miles, P. McBurney, and M. Luck, “Veriﬁcation and vali-
dation of agent-based simulations using approximate model checking,”
in International Workshop on Multi-Agent Systems and Agent-Based
Simulation. Springer, 2013, pp. 53–70.

[23] T. Mancini, F. Mari, A. Massini, I. Melatti, I. Salvo, S. Sinisi, E. Tronci,
R. Ehrig, S. R¨oblitz, and B. Leeners, “Computing personalised treat-
ments through in silico clinical trials. a case study on downregulation
in assisted reproduction,” Intelligenza Artiﬁciale, pp. 1–16, 2018.
[24] S. Gao, S. Kong, and E. M. Clarke, “Dreal: An smt solver for nonlinear
theories over the reals,” in Proceedings of the 24th International Con-
ference on Automated Deduction, ser. CADE’13. Berlin, Heidelberg:
Springer-Verlag, 2013, p. 208–214.

[25] M. Safran, I. Dalah, J. Alexander, N. Rosen, T. Stein, M. Shmoish,
N. Nativ, I. Bahir, T. Doniger, H. Krug, A. Sirota-Madi, T. Olender,
Y. Guan-Golan, G. Stelzer, A. Harel, and D. Lancet, “Genecards version
3: The human gene integrator,” Database : the journal of biological
databases and curation, 01 2010.

[26] F. Magkos, M. F. Hjorth, and A. Astrup, “Diet and exercise in the
prevention and treatment of type 2 diabetes mellitus,” Nature Reviews
Endocrinology, vol. 16, no. 10, pp. 545–555, 2020.

[27] L. de Moura and N. Bjørner, “Z3: An efﬁcient smt solver,” in Tools
and Algorithms for the Construction and Analysis of Systems, C. R.
Ramakrishnan and J. Rehof, Eds. Berlin, Heidelberg: Springer Berlin
Heidelberg, 2008, pp. 337–340.

