Towards Code Summarization of APIs Using NLP Techniques
AmirHossein Naghshzan
amirhossein.naghshzan.1@ens.etsmtl.ca
École de Technologie Supérieure
Montreal, Quebec, Canada

ABSTRACT
Each programming language comes with official documentation
to guide developers with APIs, methods and classes. However, in
some cases, official documentation is not an efficient way to get
the needed information. As a result, developers may consult other
sources (e.g., Stack Overflow, GitHub) to learn more about an API,
its implementation, usage, and other information that official docu-
mentation may not provide.

In this research, we propose an automatic approach to generate
summaries for APIs and methods by leveraging unofficial documen-
tation using NLP techniques. Our findings demonstrate that the
generated summaries are competitive, and can be used as a com-
plementary source for guiding developers in software development
and maintenance tasks.

KEYWORDS
natural language processing, code summarization, unsupervised
learning, deep learning, transformers

1 RESEARCH PROBLEM AND MOTIVATION
During software development steps, programmers need sources
to gain information about different APIs, methods or classes to
become familiar with them and understand how to use/implement
them. Despite the fact that developers mostly rely on official docu-
mentation as their primary source of information, previous studies
have shown that official documentation is not always the best way
of extracting information since it may be long and time-consuming
and even in some cases lacks completeness [7]. Therefore, most
developers use unofficial documents like StackOverflow, Github
and other sources to get the needed information for their tasks.

To address this problem, we decided to automatically generate
summaries for APIs discussed on informal documents based on the
natural languages around them and their surrounding cotext. For
this research, we selected StackOverflow as unofficial documenta-
tion and Android programming language for studying its APIs and
methods.

2 RELATED WORK
Automatic source code summarization has received attention re-
cently since it is an interesting topic for researchers. However, they
were mostly concerned with producing a summary for a code block,
not an API and also very small number of them used unofficial
documentation. Here we focus on the most relevant research to our
study.

Sridhara et al. [8] have used Natural Language Processing to
extract information to summarize Java methods. The result of their
work demonstrated that the comments generated for Java methods

from source code are accurate and do not miss significant informa-
tion in the process of creating comments.

Moreno et al. [5] have introduced a tool, JStereoCode, that can
automatically define stereotypes for methods and classes using Java
source code. The main advantage of this approach is that developers
can use it as a recovery for their projects.

To understand the use of the Java method, Hu et al. [3] proposed
a new approach to generate code comments from a large code
corpus called DeepCom. In their approach, by applying Natural
Language Processing (NLP) techniques some limitations such as
extracting accurate keywords from the methods which are not
named correctly are solved.

Mohammed et al. [2] introduced a technique that covers both
relating high-level explanations to the particular areas of the source
code that implement them and communicating how parts of the
code interact through control and data dependencies, automatically.

3 METHODOLOGY
Our research methodology consists of three main steps: data col-
lection, building a corpus and summarization.

3.1 Data Collection
The first step of our research is data collection. Using Stack Ex-
change API, we extracted all StackOverflow’s questions having
Android tag from January 2009 till April 2020. After that, we ex-
tracted all answers to those questions and ended up in 3,084,143
unique Android posts which formed our dataset. To extract men-
tioned APIs in posts, we used Code Snippet feature of StackOverflow.
This feature highlights code blocks in posts to make it easier for
users to find them by adding an HTML code tag (<code>) around
them. After extracting all code blocks, using regex patterns we fil-
tered the code blocks that had specific characterization like having
multiline, spaces, etc. to find those code blocks that are API and
method names.

3.2 Building a Corpus
The second step is to build a corpus. Not all the answers in Stack-
Overflow contain accurate information. So we removed the answers
with a score below the average score of all Android answers which
is 2. In the remaining answers, For each API we tried to collect
the relevant sentences of that answer to add them to our corpus.
For this purpose, we extracted three sentences for each detected
API. One sentence that the API appeared in, the previous sentence
and the next sentence. We believe these sentences have the highest
chance of being relevant to the APIs. Moreover, we added the first
sentence of those answers to our corpus since our observations
proved the first sentence usually contains important information.

, ,

AmirHossein Naghshzan

Table 1: Examples of generated summaries for onCreate().

Algorithm

TextRank

Summary

When the app is launched, the first thing that’s going to run is onCreate() in this
case, onCreate() has a method that inflates the view of your activity, that method is
called setContentView(). When you pass data from one activity to another using a
Bundle, the data is received inside the onCreate() method of the second activity, not
insideonActivityResult() unless you’ve specifically implemented that.

GPT-3

OnCreate is the first method in the Activity lifecycle whose job is to create an activity.
It is called first time the Activity is created, or when there is a configuration change
like a screen rotation. This is the beginning state of an activity lifecycle which its view
should be set. Most of the activity initialization code goes here.

3.3 Summarization
After building the corpus and doing cleaning and pre-processing
works using the standard Natural Language Toolkit (NLTK), the
next step is the summarization task. For this step, we tried two
different approaches. In our recent research [6] we used the Tex-
tRank algorithm which is an unsupervised learning method for
generating extractive summaries based on the given corpus [4].
We selected this simple algorithm to focus on validating the feasi-
bility of our approach. As mentioned in the paper [6] the results
were promising so we decided to continue our work by improving
the quality of summaries. For this purpose, as the next step, we
used deep learning algorithms to generate abstractive summaries.
Therefore we replace the TextRank algorithm with GPT-3 which is
a transformer technique in NLP [1]. Since TextRank is an extractive
algorithm, the generated summaries contain the exact sentence that
appeared in StackOverflow and some cases even not relevant to the
next sentence. However, changing the algorithm to an abstractive
one, increased the quality of summaries and made it more coher-
ent. The sentences Table 1 shows the results of summarization for
app.activity.onCreate which is the most repeated Android method
in StackOverflow.

4 EMPIRICAL EVALUATION
To learn more about how developers see the accuracy of our gener-
ated summaries, we conducted an empirical study. We have used a
completely randomized design [9] with 16 professional Android de-
velopers. We provided TextRank’s generated summaries and asked
them to read the evaluate accuracy, coherence, length and useful-
ness of summaries using the Likert scale. Moreover, we provided
the official Google documentation and ask them to compare our
generated summaries with official descriptions in terms of useful-
ness.

The results have shown that our summaries are valuable sources
for software engineers during their development tasks. The main
findings of our empirical evaluation are as follows:

• The length of summaries is adequate, according to all devel-

opers included in this study (100%).

• In terms of coherence, about half of the participants (58%)

agree that the generated summaries are coherent.

• The majority of participants (73%) agreed that our summaries
include reliable information concerning Android APIs.
• Participants agreed that an integrated plugin to display our
automatically-generated summaries would be useful, with a
rating of 4.1 out of 5.

Furthermore, as an important finding, while participants mostly
preferred the official descriptions, they believe that the created sum-
maries may be utilized as a complementary for official documents
as they contain information that is not discussed in the official
documentation [6].

5 CONCLUSION AND FUTURE WORK
In this research, we proposed a novel approach to generate sum-
maries for APIs and methods discussed on unofficial documentation
based on their surrounding context. We selected StackOverflow
Android posts as our dataset and applied TextRank and GPT-3
algorithms as the main methods of summarization. Finally, we con-
ducted an empirical evaluation with software developers to evaluate
our generated summaries.

Our empirical evaluation shows that our generated summaries
are useful for development tasks and more importantly, participants
agreed that these summaries could be used as a complementary for
official descriptions.

In our future work, we are interested in comparing our approach
with state-of-the-art methods. In addition, we will conduct a large-
scale empirical evaluation to check if our summaries are useful
during real development tasks. And finally, we are interested in
integrating our approach as a plugin for IDE applications to help
software engineers during development processes.

REFERENCES
[1]

Tom B. Brown et al. 2020. Language models are few-shot learners. (2020). doi:
10.48550/ARXIV.2005.14165.

[3]

[2] Mohammed Hassan and Emily Hill. 2018. Toward automatic summarization of
arbitrary java statements for novice programmers. In 2018 IEEE International
Conference on Software Maintenance and Evolution (ICSME), 539–543. doi: 10.11
09/ICSME.2018.00063.
Xing Hu, Ge Li, Xin Xia, David Lo, and Zhi Jin. 2018. Deep code comment
generation. In Proceedings of the 26th Conference on Program Comprehension
(ICPC ’18). Association for Computing Machinery, Gothenburg, Sweden, 200–
210. isbn: 9781450357142. doi: 10.1145/3196321.3196334.
Rada Mihalcea and Paul Tarau. 2004. TextRank: bringing order into text. In
Proceedings of the 2004 Conference on Empirical Methods in Natural Language

[4]

Towards Code Summarization of APIs Using NLP Techniques

, ,

[5]

[6]

Processing. Association for Computational Linguistics, Barcelona, Spain, (July
2004), 404–411. https://aclanthology.org/W04-3252.
Laura Moreno and Andrian Marcus. 2012. Jstereocode: automatically identify-
ing method and class stereotypes in java code. In 2012 Proceedings of the 27th
IEEE/ACM International Conference on Automated Software Engineering, 358–361.
doi: 10.1145/2351676.2351747.
AmirHossein Naghshzan, Latifa Guerrouj, and Olga Baysal. 2021. Leveraging un-
supervised learning to summarize apis discussed in stack overflow. In 2021 IEEE
21st International Working Conference on Source Code Analysis and Manipulation
(SCAM), 142–152. doi: 10.1109/SCAM52516.2021.00026.

[7]

[8]

[9]

Luca Ponzanelli, Gabriele Bavota, Massimiliano Di Penta, Rocco Oliveto, and
Michele Lanza. 2015. Turning the ide into a self-confident programming assis-
tant.
Giriprasad Sridhara, Emily Hill, Divya Muppaneni, Lori Pollock, and K. Vijay-
Shanker. 2010. Towards automatically generating summary comments for java
methods. In Proceedings of the IEEE/ACM International Conference on Automated
Software Engineering (ASE ’10). Association for Computing Machinery, Antwerp,
Belgium, 43–52. isbn: 9781450301169. doi: 10.1145/1858996.1859006.
Claes Wohlin, Per Runeson, Martin Hst, Magnus C. Ohlsson, Bjrn Regnell,
and Anders Wessln. 2012. Experimentation in Software Engineering. Springer
Publishing Company, Incorporated. isbn: 3642290434.

