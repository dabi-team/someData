Classical to Quantum Software Migration Journey  
Begins: A Conceptual Readiness Model 

Muhammad Azeem Akbar1, Saima Rafi2, Arif Ali Khan3 

1Department of Software Engineering, LUT University, Lappeenranta, Finland 
2University of Murcia, Department of Informatics and Systems, Murcia, Spain 
3M3S Empirical Software Engineering Research Unit, University of Oulu, 90570 Oulu, Finland 
azeem.akbar@lut.fi, saeem112@gmail.com, arif.khan@oulu.fi 

Abstract. With recent advances in the development of more powerful quantum computers, 
the research area of quantum software engineering is emerging. Quantum software plays a critical 
role in exploiting the full potential of quantum computing systems. As a result, it has been draw-
ing increasing attention recently to provide concepts, principles, and guidelines to address the 
ongoing challenges of quantum software development. The importance of the topic motivated us 
to voice out a call for action to develop a readiness model that will help an organization assess 
its capability of migration from classic software engineering to quantum software engineering. 
The proposed model will be based on the existing multivocal literature, industrial empirical study, 
understanding of the process areas, challenging factors and enablers that could impact the quan-
tum software engineering process. We believe that the proposed model will provide a roadmap 
for software development organizations to measure their readiness concerning to transformation 
from classic to quantum software engineering by suggesting best practices and highlighting im-
portant process areas, challenges, and enablers.   

Keywords: Quantum software engineering, readiness model, process areas, 
challenges, enablers, best practices. 

1 

Introduction 

Quantum computing promises to solve many problems more precisely than possible with classi-
cal  computers,  e.g.,  simulating  complex  physical  systems  or  applying  machine  learning  tech-
niques[1,  2].  Presently,  that  quantum  computing  has  become  widespread  in  developing  more 
powerful  quantum  computers,  and  their  need  in  terms  of  quantum  software  and  applications, 
development process and frameworks, quantum software architectures and styles are becoming 
increasingly important [3, 4]. Quantum computing is a technological revolution that demands a 
new software engineering paradigm to develop and conceive quantum software systems. Quan-
tum software engineering calls for novel techniques, tools, processes, and methods that explicitly 
focus on developing software systems based on quantum mechanics[5]. Though, the develop-
ment of such quantum applications is complex and requires experts with knowledge from various 
fields, e.g., physics, mathematics, and computer science [6, 7].  

Quantum software engineering is an emerging research area investigating concepts, principles, 
and guidelines to develop, maintain, and evolve quantum applications [8, 9]. Therefore, it is im-
portant to enhance the quality and reusability of the resulting quantum applications by systemat-
ically applying software engineering principles during all development phases, from the initial 
requirement analysis to the software implementation [10]. In classical software engineering, soft-
ware development processes often document the different development phases a software artefact 
or application goes through [11, 12]. Furthermore, such software development process also sum-
marizes best practices and methods that can be applied in the various phases and corresponding 

 
 
 
2 

tools [9, 13]. Hence, they can be used for educating new developers by providing an overview of 
the development process or serving as a basis for cooperating with experts from different fields 
[14]. Today's quantum applications are often hybrid, consisting of quantum and classical pro-
grams [15]. Thus, the development process for quantum applications involves  developing and 
operating both kinds of programs. However, existing lifecycles from classical software engineer-
ing [16] and quantum software development process [13, 17] only target one of these kinds and 
do not address the resulting integration challenges. 
Furthermore, the execution of the quantum and classical programs must be orchestrated, and data 
has to be passed between them[18]. The workflow process is a means for these orchestrations to 
provide  benefits,  such  as  scalability,  reliability,  and  robustness  [19].  Thus,  to  transform  from 
classic to quantum software development process, we need to analyze the software development 
community's tools, standards, and guidelines. Stefano et al. [20] highlighted that "the challenge 
of quantum software engineering is to rework and extend the whole of classical software engi-
neering into the quantum domain so that programmers can manipulate quantum programs with 
the same ease and confidence that they manipulate today's classical programs." Ahmad et al. 
[21] presented the architectural view of quantum software engineering architecture (Fig 1). The 
presented architecture view helps to reflect in designing and envisioning an overall system, to 
avoid errors and future bugs in quantum system. Hence, the role of architecture is empowered in 
quantum software applications to abstract complexities of source code modules and their inter-
actions as architectural component and connectors [22]. 

Motivation scenario  
Despite the significance of quantum software engineering, no standards and models are available 
to  handle  quantum  software  development  processes.  For  example,  if  an  organization  want  to 
transform from classic to quantum software development, they need guidelines and strategies to 
put the process on the right path. Thus, it is required to estimate all aspects of a software devel-
opment process like time, cost, integration aspect, scope, quality, human resources, risk, commu-
nication, stakeholders, and procurements. The transformation from classic to the quantum system 
is a challenging exercise due to issues such as:  
Little research has been conducted on the development of models and strategies. The problems 
faced by organizations during the implementation of quantum software development activities 
are quite different from the traditional or classical paradigm. Therefore, existing literature doesn't 
examine the transformation from classic to quantum software engineering in sufficient detail as 
there is little research that highlights the important process areas and challenges to address for 
the adoption of quantum software development. Therefore, lack of proper guidelines that help 
practitioners to implement quantum technology for software development. Presently, there are 
no  assessment  tools  and  frameworks  for  determining  an  organization's  readiness  concerning 
transforming from a classic to a quantum software development process. No such practices are 
available that assist practitioners in improving quantum software engineering in their organiza-
tion. 
Moreover, there is a lack of a roadmap to help organizations choose the appropriate patterns, 
particularly for their problems. No study addresses the project management changes caused due 
to the migration from classic to quantum software engineering. Thus, it is demanded to deeply 
study the important process areas, challenges, enablers, and guidelines that could influence the 
adoption of quantum software development. Furthermore, discussing the different software arte-
facts usually constituting a quantum application and presenting their corresponding process areas 
is required. It is critical to identify the plug points between the classic and quantum software 
modules to enable their integration into overall application, for execution of hybrid quantum ap-
plications. To address all the highlighted concerns, there is need of practically robust roadmap 
and guidelines to assist the practitioners to make the migration from classic to quantum software 

 
development successful. Hence, the readiness model is one of the key instruments to assists soft-
ware development organizations to assess the capability of an organizations concerning to trans-
form from classic software engineering to quantum software engineering.   

3 

Fig. 1. Architecture of quantum software engineering [21] 

Readiness Models and Standards  
A readiness model is a technique to assess an organization or team based on the specified criteria 
to represent their level of readiness. Readiness models are intended to help organizations appraise 
their process readiness and develop it for improvement. They serve as points of reference for 
different stages of readiness in an area.  Software engineering readiness models intend to help 
organizations move from ad-hoc processes to mature and disciplined software processes[23]. 

In software engineering research, a readiness model has been utilized in several studies. It was 
used by Niazi et al. [24] to assess organizational readiness in terms of software process improve-
ment. Their readiness model has several levels: aware, defined, and optimizing. Critical factors 
and barriers support each level. The researchers validated their readiness model by performing 
case studies in three software organizations. Similarly, Ali and Khan[25] presented a model to 
measure the readiness of a software organization to form outsourcing relationships. They utilized 
critical partnership factors to develop a readiness model and examined their practical implemen-
tation. Their readiness model has several levels: contract, success, readiness, conversion and ma-
turity.  Similarly,  Khan  et  al.[26]  proposed  a  software  outsourcing  vendor  readiness  model 
(SOVRM). The readiness levels of the SOVRM consist of critical barriers and critical success 
factors.  Similarly,  a  recent  study  conducted  by  Sufi  et  al.[27] proposed  security  requirements 
engineering readiness (SRERM). The levels of SRERM are based on security requirements cat-
egories. All the above-discussed readiness models followed the capability maturity model Inte-
gration (CMMI) staged representation structure and considered the critical barriers and success 

 
 
 
 
 
4 

factors as the key process areas (KPA's). The software engineering institute developed CMMI 
almost twenty years ago[28].  

CMMI helps organizations to streamline process improvement. It clearly shows what organiza-
tions should do to mature software processes. CMMI model is integrated into five maturity levels, 
i.e., (initial, managed, defined, quantitatively managed, and optimizing). CMMI had proved itself 
for decades yet has had no meaningful impact in providing detailed information about broader 
technology space such as quantum computing in implementing strategies and key practices.  

ISO/IEC  15504  Information  Technology:  SPICE  is  an  international  framework  for  accessing 
software development [29]. It provides a detailed description of standard documents for the soft-
ware development process and related management functions within an organization. It includes 
two dimensions, i.e., capability dimension and process dimension. It also introduces assessment 
indicators that help an organization with brief guidelines to assess the quality of their manage-
ment process. To see in terms of improving quantum computing process areas, SPICE does inte-
grate existing process improvement methodologies. Still, it does not provide an explicit process 
improvement path regarding quantum software. 

International Standards Organization (ISO) 9000/9001: ISO 9000 is a series of standards in qual-
ity  management  that  helps  organizations  maintain  their  customer and other  stakeholder needs 
related to a product or service [30]. It helps organizations to document the elements needed for 
quality software systems effectively. ISO 9001 consists of generic standards that are not specific 
to the only software industry and can be applied to different types of organizations. These stand-
ard  guidelines  focus  on  the  industry's  manufacturing  and  services  aspects,  including  quality 
standards. However, it still lags behind process improvement aspects of software systems while 
using quantum technology. 

Several readiness and maturity models have been proposed by researchers and practitioners in 
the traditional software development domain, providing a framework to assess an organization's 
current effectiveness and supporting figuring out what capabilities they need to acquire next to 
improve their performance. Indeed, this apparent popularity of these models out on the field has 
partly motivated us to propose a readiness model in the context of transformation from classic to 
quantum software development. In an area where we struggle with a gap between research and 
practice, we argue that looking at frameworks, models, and other tools actively used out on the 
field is a good starting point for further steps. Thus far, guidelines have been used to make quan-
tum software engineering more tangible, but further steps are still needed, and a robust readiness 
model could be one such step. 

2 

Call for Action  

We propose developing a readiness model to provide a roadmap for migrating from classical to 
quantum software development. Such a readiness model would help the field move from ad hoc 
implementation of quantum software development to a more mature process. Furthermore, we 
argue that this model should not be an effort for a single researcher or research group but a mul-
tidisciplinary project that builds on a combination of theoretical models and empirical results. 
The research work is classified in four steps to developing the proposed readiness model.  

Step 1: This step will give a broad overview of the available literature and identify the key pro-
cess areas and challenging factors that can influence the transformation from classic to quantum 
software development process. To meet this objective, we plan to conduct a multivocal literature 
review (MLR) which is a viable approach to extracting data from the grey and white literature. 

 
 
 
 
 
5 

As the topic under investigation is not maturely studied in mainstream research, thus the grey 
literature could give critical insights about it. The key finding of this step revolves around the 
following questions. 

[What process areas of transformation from classic software development to quantum software 
development are reported in the existing literature?]   
[What are the key challenging factors of transforming the classic software development process 
to quantum, reported in the literature?] 
[What enablers are essential for transforming the existing classic to quantum software develop-
ment process, reported in the literature? 

Step 2: 
This step leads to empirically validating the literature findings (Steps 1) with industry practition-
ers by conducting the questionnaire survey, case study, and interviews. This step aims to confirm 
significant process areas and challenges identified in step 1 and to enlist additional influencing 
areas towards transforming the traditional software development process into quantum. In this 
step, we will find the answers to the following questions:  

[What process areas are critical to consider while transforming from classic to quantum software 
development process?] 
[What are the key challenges faced by industrial practitioners while transforming the existing 
classic software development process to quantum software development?]   
[What enablers are essential for transforming the existing classic to quantum software develop-
ment process? discussed in real-world practice?] 

Step 3: This step will investigate best practices against each identified challenging factor and 
enabler (in Steps 1 and 2). To achieve this step, we will conduct MLR to investigate the state-of-
the-art  best  practices  reported  in  grey  and  formal  literature. Furthermore,  we  will  empirically 
explore the best practices against each challenging factor and enabler by conducting a question-
naire, case study, and interviews. This step will answer the following questions:  

[What best practices address the challenging factors (Step 1), reported in the literature and real-
world industry?] 
[What are the best practices to achieve the enablers identified in Step 2, reported in the literature 
and real-world industry?] 

Step 4: Finally, a readiness model will be developed to assist the software development organi-
zations in assessing, adapting and improving their process toward the migration from classic to 
quantum software development paradigm. To develop the readiness model, we will consider the 
findings of steps 1, step 2, and steps 3.   

The readiness model will consist of three components, i.e., the assessment component, factors 
component (process areas, challenges, enablers), and guidelines component. The identified best 
practices will be mapped against each enabler and challenging factor to achieve that certain level. 
If an organization wants to move to the next level, they need to address each enabler and chal-
lenging factor by implementing its respective best practices.   
The developed readiness model will help the organizations assess their ability with respect to the 
transformation from classic to quantum software development and provide a roadmap to improve 
their capability concerning the adoption of quantum software development.  
To check the practical robustness of the model, we will conduct case studies in software devel-
opment organizations and update them according to their suggestions. The final model will be 

 
 
 
 
 
 
 
6 

available  for  software development  organizations  to  adopt  and improve their  adaptability  and 
executability concerning to quantum software development process.   

[How to develop and evaluate the effectiveness of the proposed model?]  
[What would be the readiness levels of the proposed model?] 
[How to check the robustness of the proposed model in the real-world industry?] 

3 

Architecture of proposed model 

The basic architecture of the proposed quantum software engineering readiness model (QSERM) 
will be designed based on Process areas and their associated challenges and key enablers identi-
fied  from  literature  and  industry  practices.  To  align  identified  components  in  the  structured 
model, we will use the concept of existing software engineering standards such as CMMI, IMM 
and SPICE. Fig. 2 shows  the relationship between key components of  the proposed model. It 
depicts the proposed model's complete component, highlighting how the results of existing mod-
els, literature and industry findings will be used to design the key components of the proposed 
QSERM. 

The four components of QSERM are: 
•  Readiness level component 
• 
•  Challenge 
•  Key enablers  

Process areas 

3.1 Readiness level component 

Fig. 2. Structure of the proposed model 

 
 
 
7 

The proposed model consists of readiness levels based on the standard model for software engi-
neering i.e., CMMI. Several adjustments are required in the structure of CMMI to make it appli-
cable for quantum software applications. The structure of each readiness level is given in Fig. 3, 
and brief explanation is given below:   
Process Areas (PAs): Process areas are the building blocks that indicate the areas an organiza-
tion should focus on to improve software processes. These areas consist of a cluster of related 
practices that when implemented collectively, satisfy the goals related to that area. Therefore, we 
will identify the process areas related to quantum software engineering to improve the software 
development process. 
Challenging Factors (CFs): The architecture of the proposed model consists of various process 
areas. The identified challenging factors will be mapped to all maturity levels and process areas 
associated  with  each  level.  This  formulation  has  been  used  previously  by  many  researchers. 
Therefore, we can justify the use of challenging factors in our study. 
Enablers (ENs): The Key enablers will be identified to support the proposed model to accom-
plish the goals associated with all five maturity levels of QSERM. To justify the use of key ena-
blers, it provides the best support to perform essential tasks. We will perform an SLR study to 
identify the key enablers from software engineering experts working with quantum development. 

Fig. 3. Structure of each readiness level 

The proposed QSERM will be based on five readiness levels (Fig. 4). Each readiness level en-
compasses specific process areas. The process areas highlight the important zones that need to 
be addressed by an organization. Furthermore, important, challenging factors and enablers will 
be aligned with each process area. To achieve a higher level, an organization must address all the 
process areas of a readiness level. And to address all the process areas, organizations must address 
all the challenging factors and enablers. The best practices will be mapped against each challenge 
and enabler, which will assist the organizations in addressing them effectively. For example, if 
organization-A wants to move to level 2, they need to address all the process areas of level 1. To 
achieve this, they need to address all the challenging factors and enablers of level-1 by imple-
menting their associated best practices.  

 
 
 
8 

Fig. 4. Example of proposed readiness model 

3.2 Assessment Dimension 
To evaluate the model, we will use the Motorola assessment tool [31]. Many researchers in soft-
ware engineering field have used this tool to evaluate their proposed readiness model. Therefore, 
we have selected the same tool for the evaluation of QSERM. This tool will assist the organiza-
tion in identifying the areas that need further improvement. The three dimensions of the Motorola 
assessment tool are: 
Approach: Emphasize the top management's commitment to implementing the specific practice. 
Deployment: Focus on the consistent and uniform practice implementation across quantum pro-
ject areas. 
Results: Assess the breadth and consistency of the results of deployed practice across different 
project areas. 

4 

Expected outcomes   

Since in the early stage, the study will highlight only a few contributions. One of the contributions 
is identifying process areas, challenges, enablers, and associated practices that will help quantum 
software development. The process areas consist of a cluster of related practices that, when im-
plemented collectively, satisfy the goals related to that area. The second contribution is to develop 
a  quantum  software  engineering  readiness  model.  This  model  will  assist  organisations  in  as-
sessing readiness and suggest guidelines for successfully adopting the quantum software engi-
neering paradigm. And the third contribution is to help organizations in "identifying", "analyz-
ing" and "mitigating" the challenges faced during the migration from classic to quantum software 
engineering. The novelty of this research work is the development of a readiness model that will 
state activities, guidelines or roadmap that can be  assist in migrating from classic to quantum 
software development.  

References 

[1] 

C. Outeiral, M. Strahm, J. Shi, G. M. Morris, S. C. Benjamin, and C. M. J. W. I. R. C. 
M.  S.  Deane,  "The  prospects  of  quantum  computing  in  computational  molecular 
biology," vol. 11, no. 1, pp. e1481, 2021. 

 
 
9 

M.  De  Stefano, F.  Pecorelli,  D. Di  Nucci,  F.  Palomba,  A.  J.  J. o.  S.  De  Lucia,  and 
Software, “Software engineering for quantum programming: How far are we?,” vol. 
190, pp. 111326, 2022. 
T. Häner, D. S. Steiger, K. Svore, M. J. Q. S. Troyer, and Technology,  "A software 
methodology for compiling quantum programs," vol. 3, no. 2, pp. 020501, 2018. 
A.  Ahmad,  A.  A.  Khan,  M.  Waseem,  M.  Fahmideh,  and  T.  Mikkonen,  "Towards 
Process Centered Architecting for Quantum Software Systems." 
F.  Gemeinhardt,  A.  Garmendia,  and  M.  Wimmer,  "Towards  model-driven  quantum 
software engineering." pp. 13-15. 
L. Nita, L. Mazzoli Smith, N. Chancellor, H. J. R. i. S. Cramman, and T. Education, 
"The  challenge  and  opportunities  of  quantum  literacy  for  future  education  and 
transdisciplinary problem-solving," pp. 1-17, 2021. 
E. Altman, K. R. Brown, G. Carleo, L. D. Carr, E. Demler, C. Chin, B. DeMarco, S. E. 
Economou,  M.  A.  Eriksson,  and  K.-M.  C.  J.  P.  Q.  Fu,  "Quantum  simulators: 
Architectures and opportunities," vol. 2, no. 1, pp. 017003, 2021. 
M. Piattini, G. Peterssen, and R. J. A. S. S. E. N. Pérez-Castillo, "Quantum computing: 
A new software engineering golden age," vol. 45, no. 3, pp. 12-14, 2021. 
J. J. a. p. a. Zhao, "Quantum software engineering: Landscapes and horizons," 2020. 
R. J. Q. LaRose, "Overview and comparison of gate level quantum software platforms," 
vol. 3, pp. 130, 2019. 
M. A. Akbar, J. Sang, A. A. Khan, M. Shafiq, S. Hussain, H. Hu, M. Elahi, and H. J. I. 
A. Xiang, "Improving the quality of software development process by introducing  a 
new methodology–AZ-model," vol. 6, pp. 4811-4823, 2017. 
N. M. A. Munassar, and A. J. I. J. o. C. S. I. Govardhan, "A comparison between five 
models of software engineering," vol. 7, no. 5, pp. 94, 2010. 
B.  Weder,  J.  Barzen,  F.  Leymann,  M.  Salm,  and  D.  Vietz,  "The  quantum  software 
lifecycle." pp. 2-9. 
E. Campbell, L. J. Q. S. Heyfron, and Technology,  "An efficient quantum compiler 
that reduces T count," vol. 4, no. 1, 2018. 
F.  Leymann,  and  J.  J.  a.  p.  a.  Barzen,  "Hybrid  quantum  applications  need  two 
orchestrations in superposition: A software architecture perspective," 2021. 
M. A. Akbar, J. Sang, A. A. Khan, F.-E. Amin, S. Hussain, M. K. Sohail, H. Xiang, 
and B. J. I. A. Cai, "Statistical analysis of the effects of heavyweight and lightweight 
methodologies on the six-pointed star model," vol. 6, pp. 8066-8079, 2018. 
N. Dey, M. Ghosh, and A. J. a. p. a. Chakrabarti, "QDLC--The Quantum Development 
Life Cycle," 2020. 
B.  Weder,  U.  Breitenbücher,  F.  Leymann,  and  K.  Wild,  "Integrating  quantum 
computing into workflow modeling and execution." pp. 279-291. 
B.  Weder,  J.  Barzen,  F.  Leymann,  and  M.  Zimmermann,  "Hybrid  Quantum 
Applications  Need  Two  Orchestrations  in  Superposition:  A  Software  Architecture 
Perspective." pp. 1-13. 
S.  Bettelli,  T.  Calarco,  L.  J.  T.  E.  P.  J.  D.-A.  Serafini,  Molecular,  Optical,  and  P. 
Physics, "Toward an architecture for quantum programming," vol. 25, no. 2, pp. 181-
200, 2003. 
A.  Ahmad,  A.  A.  Khan,  M.  Waseem,  M.  Fahmideh,  and  T.  Mikkonen,  "Towards 
Process Centered Architecting for Quantum Software Systems." pp. 26-31. 
P. Murali, N. M. Linke, M. Martonosi, A. J. Abhari, N. H. Nguyen, and C. H. Alderete, 
"Full-stack,  real-system  quantum  computer  studies:  Architectural  comparisons  and 
design insights." pp. 527-540. 
A. Tetlay, and P. John, "Determining the Lines of System Maturity, System Readiness 
and Capability Readiness in the System Development Lifecycle," 2009. 

[2] 

[3] 

[4] 

[5] 

[6] 

[7] 

[8] 

[9] 
[10] 

[11] 

[12] 

[13] 

[14] 

[15] 

[16] 

[17] 

[18] 

[19] 

[20] 

[21] 

[22] 

[23] 

10 

[24] 

[25] 

[26] 

[27] 

[28] 

[29] 

M. Niazi, D. Wilson, and D. Zowghi, "Organizational readiness and software process 
improvement." pp. 96-107. 
S. Ali, S. U. J. J. o. s. Khan, and software, "Software outsourcing partnership model: 
An evaluation framework for vendor organizations," vol. 117, pp. 402-425, 2016. 
S.  U.  Khan,  "Software  outsourcing  vendors'  readiness  model  (SOVRM),"  Keele 
University, 2011. 
Y. Mufti, M. Niazi, M. Alshayeb, and S. J. I. A. Mahmood,  "A readiness model for 
security requirements engineering," vol. 6, pp. 28611-28631, 2018. 
M. C. Paulk, B. Curtis, M. B. Chrissis, and C. V. J. I. s. Weber, "Capability maturity 
model, version 1.1," vol. 10, no. 4, pp. 18-27, 1993. 
ISO,  "ISO/IEC  15504‐4.  Information  technology—Process  Assessment—Part  4: 
Guidance on use for process improvement and process capability 

determination.," International Organization for Standardization., 2004. 
[30] 

I.  T.  Committee,  ISO  9000:  2005  quality  management  systems–fundamentals  and 
vocabulary, Technical report, International Organization for Standardization, 2005. 55, 
89. 
M. K. J. I. s. Daskalantonakis, "Achieving higher SEI levels," vol. 11, no. 4, pp. 17-24, 
1994. 

[31] 

 
