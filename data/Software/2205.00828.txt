2
2
0
2

g
u
A
8

]
I

A
.
s
c
[

2
v
8
2
8
0
0
.
5
0
2
2
:
v
i
X
r
a

Discrete models of continuous behavior of
collective adaptive systems

Peter Fettke1,2[0000−0002−0624−4431] and Wolfgang Reisig3[0000−0002−7026−2810]

1 German Research Center for Artiﬁcial Intelligence (DFKI), Saarbr¨ucken, Germany
peter.fettke@dfki.de
2 Saarland University, Saarbr¨ucken, Germany
3 Humboldt-Universit¨at zu Berlin, Berlin, Germany
reisig@informatik.hu-berlin.de

Abstract. Artiﬁcial ants are “small” units, moving autonomously on a
shared, dynamically changing “space”, directly or indirectly exchanging
some kind of information. Artiﬁcial ants are frequently conceived as a
paradigm for collective adaptive systems. In this paper, we discuss means
to represent continuous moves of “ants” in discrete models. More gener-
ally, we challenge the role of the notion of “time” in artiﬁcial ant systems
and models. We suggest a modeling framework that structures behavior
along causal dependencies, and not along temporal relations. We present
all arguments by help of a simple example. As a modeling framework we
employ Heraklit; an emerging framework that already has proven its
worth in many contexts.

Keywords: systems composition · data modeling · behavior modeling ·
composition calculus · algebraic speciﬁcation · Petri nets

Introduction

Some branches of informatics take processes in nature as a model for uncon-
ventional classes of algorithms. In particular, numerous variants of “swarm in-
telligence” have been and are being studied to a large scale, with specialized
conference series, journals, etc., e.g. International Conference on Swarm Intelli-
gence (ICSI), and International Journal of Swarm Intelligence Research (IJSIR).
What many of these approaches have in common, is the assumption of a number
of artiﬁcial ants, i.e. “small” units, moving autonomously around on a shared,
dynamically changing “space”, directly or indirectly exchanging some kind of
information.

This kind of behavior needs an adequate representation, i.e. it must be mod-
eled in a formal framework, as a basis for implementation, for proving correct-
ness, for studies of complexity, and many other tasks.

In the following, we discuss fundamental assumptions and questions of model-
ing such systems. In particular, we discuss means to represent continuous moves
of “ants” in discrete models. More generally, we challenge the role of the no-
tion of “time” in artiﬁcial ant systems and models. We show that time-based

 
 
 
 
 
 
2

P. Fettke, W. Reisig

Fig. 1: ants on a bar

models do not adequately represent the causal dependencies in such systems.
Instead, we suggest a modeling framework that structures behavior along causal
dependencies, and not along temporal relations.

We present all arguments by help of a simple example, i.e., ants moving up
and down a bar. This example already exhibits numerous fundamental problems
of the area. As a modeling framework we employ Heraklit [2, 3]; an emerging
modeling framework that already has proven its worth in many contexts, and
shows its utility also in the context of artiﬁcial ants.

1 Running example: ants on a bar

Here we start out with an informal description of ants on a bar. We identify
three kinds of events.

1.1 The behavior of ants on a bar

Assume a bar and some ants, moving up and down the bar, as in Fig. 1. An ant,
moving towards the right end of the bar, and its right neighbor moving left, will
eventually meet at some point on the bar. In this case, both ants swap direction
of movement. A right moving ant without right neighbor will eventually drop
down from the bar, and so will drop down a left moving ant without a left
neighbor. Ants cannot get ahead of each other.

An initial state is a set of ants on the bar, where each ant is directed left or
right. For every given initial state, the ants’ behavior is clear and unambiguous,
generating a run. The ants system is the set of all potential initial states and
their runs. As the above description of the ants system is intuitively clear, it
should not be too diﬃcult to model it formally. However, there is much to say
about this seemingly simple endeavor.

1.2 Events of the ants’ system

We start with the quest of modeling single runs. Starting in a given initial state,
three types of events may occur:

1. Two ants i and j meet. As a shorthand we write “a i j” for this event.
2. An ant i drops down on the left edge of the bar. As a shorthand we write

“b i” for this event.

Discrete models of continuous behavior

3

Fig. 2: the continuous model of behavior

3. An ant i drops down on the right edge of the bar. As a shorthand we write

“c i” for this event.

Occurrence of an event causes a fresh state.

2 Conventional models of the ants’ behavior

There are several more or less diﬀerent ways to represent the behavior of ants,
embedding events into a temporal framework, and structuring the behavior along
the ﬂow of time. We consider four such representations and show what they have
in common.

2.1 The continuous model of a run of the ants system

Fig. 2 models a behavior of the ants in the style of classical mechanical engi-
neering: a Cartesian plain is spanned, with real numbers for time and for space
in its x- and y-axis, respectively. An initial state S0, reached at time t = 0, is
outlined as follows: For each ant i, an ellipse, inscribed A i l or A i r, describes
the initial position on the bar of ant i, as well as its orientation, left or right.
For example, ant 1 is the leftmost ant, oriented rightwards.

Fig. 2 shows a typical behavior of the events of the ants system. Any real
number of the x-axis of Fig. 2 denotes a point in time, and any real number of
the y-axis denotes a point in space on the bar, where an event may occur. For
example, the “r 6” inscribed box indicates the event of ant number 6 dropping
down the right edge of the bar. The “a 3 4” inscribed box indicates that ants 3
and 4 meet.

4

P. Fettke, W. Reisig

The model in Fig. 2 encompasses inﬁnitely many, in fact more than countably
many potential states apt to cope with “real time”. However, for the understand-
ing of the functionality of a system, the aspect of “real time” is often irrelevant
and makes little sense. An example would be the claim that ants number 3 and
2
number 4 meet at location 50 + π (= 50 + 3.14 . . . ) cm on the bar, and 20 ×
(= 20 × 1.47 . . . ) seconds after the initial state. Neither can anybody empirically
measure such a claim, nor is this claim relevant for a proper understanding of a
single run of the ants system, or the ants system as a whole.

√

Starting at state S0 as in Fig. 2, the events as described in Sec. 1.2 may occur
at any point of time and any location on the bar. Hence, S0 yields inﬁnitely many
diﬀerent runs, where events occur at diﬀerent times at diﬀerent places on the
bar. Nevertheless, each run exhibits some kind of structure: some events are
deﬁnitely ordered. For instance, ant 4 turns ﬁrst right to meet ant 5, and then
left to meet ant 3. Hence, event a 4 5 is a prerequisite for a 3 4. This observation
gives rise to the causality requirement:

If event e is a prerequisite for event f , then e occurs before f .

(1)

It is the concept of causality, that structures the behavior, and captures its
decisive properties.

Avoiding unnecessarily detailed aspects, informatics does mostly deals with
discrete models. A discrete model of behavior describes behavior by help of
ﬁnitely many or countably many states and events, where an event updates a
given state. This is aspired in diﬀerent ways, most prominently the following
three ones.

2.2 The grid model

The grid model spans a grid in the plane, e.g. the integer grid as in Fig. 3. This
grid cuts time and space into intervals. In each state of the system, each ant
occupies a square of the grid. Upon an event, each ant is assumed to move right
to the next time interval, and coincidently moving up or down to a neighbored
space interval, or to remain at its position. Consequently, ants meet or drop
down from the bar at the grid’s crossings. This is what cellular automata and
most implementations of ant algorithms do. Resnick suggests a programming
language, based on the grid model [10].

For a ﬁxed initial state, the grid model does not deﬁne a unique run: de-
pending on the choice of the grid, two events may be mapped to the same or to
diﬀerent points of the grid, i.e. two pairs of ants are considered as meeting in
time coincidently (at diﬀerent points of space on the bar), or in a sequence. Any
such mapping of events onto grid points is acceptable, provided the causality
requirement (1) holds in a slightly revised form:

If e is a prerequisite for f , then the time component of e

must be smaller than the time component of f .

(2)

Discrete models of continuous behavior

5

Fig. 3: the grid model of behavior

This is in fact the case in Fig. 3. As a further example, the event r 6 indicates
that ant number 6 just drops down at the right edge of the bar, without meeting
any other ant. Consequently, r 6 may be mapped to any of the seven grid points
of time.

2.3 The numbering model

As a second possibility, one just numbers the ants’ meetings, such that the
causality requirement holds in the varied formulation:

If e is a prerequisite for f ,

then the number of e must be smaller than the number of f .

(3)

For the above initial state S0, Fig. 4 shows an example for this model of
behavior. There are various diﬀerent acceptable numberings. For example, the
numberings 2 and 4 of the events a 4 5 and l1 may be swapped.

2.4 The lockstep model

Behavior can also be modeled as to proceed in lockstep, i.e. in a sequence of steps,
where each step is a set of events. Fig. 5 shows the ants’ behavior as a sequence
of four steps, for the above initial state S0. Again, the causality requirement
must hold is a varied form:

If e is a prerequisite for f , then the step including e

must occur in the lockstep sequence before the step including f .

(4)

6

P. Fettke, W. Reisig

Fig. 4: the numbering model

Again, the running example generates not a unique lockstep sequence.

2.5 The uniqueness problem

For the given initial state S0, the continuous model of Sec. 2.1 as well as each of
the above three discrete models cause various diﬀerent runs. The runs all diﬀer
w.r.t. the time at which events occur. The assumption of time is the structuring
principle of these runs. However, “time” come from outside the ant system. In
forthcoming section 3, we strive at a discrete, yet unique model of the ants’
run, without outside structuring principles. But ﬁrst we shed light onto the
causality requirement (1) that occurs in some way in all models ((2), (3), (4)).
This requirement induces an order on the events of a run.

2.6 Weak orderings of events

All above models of single runs (i.e. the continuous, the grid- the numbering-
and the lockstep-model) order the evens of a run along the x-axis, representing
the intuitive notion of time in various forms: as real numbers, discrete number
intervals, integers, or just discrete, ﬁnite order. In all these models, events are
either ordered in time, or they occur at the same time. This ordering is a weak
ordering on the events: for three events e, f , and g always holds:

If e and f are not ordered, and f and g are not ordered,

then also e and g are not ordered.

(5)

For example, a 1 2, a 4 5 and r 6 occur at time 10 in the grid, as well as in
the ﬁrst step of the lockstep run. Generally, a partial order, namely a transitive
and irreﬂexive relation, is a weak ordering, if the complement of its symmetric

Discrete models of continuous behavior

7

closure is transitive. Consequently, any version of order that is motivated by the
intuitive notion of “time” is a weak order, because in a temporally motivated
order, unorder means “occurring at the same time”. And “occurring at the same
time” is intuitively deﬁnitely transitive.

3 The causal model of the ants’ runs

Here we suggest a behavioral model that contrasts the above time-based model:
A run is no longer structured along time, but along causality. It turns out, that
the induced order is no weak order anymore.

3.1 The order of events

As an alternative to ordering events by temporal aspects, we start out with
a closer look at the causality requirement, as stated in (1): “If event e is a
prerequisite for event f , then e occurs before f ”. Here, “to be a prerequisite of
. . . ” is a certainly a transitive relation:

If e is a prerequisite for f , and if f is a prerequisite for g,

then e is a prerequisite for g.

(6)

This implies that “to be a prerequisite of . . . ” is a partial order. In the
sequel, we denote it as an event order. Fig. 7 shows the event order for the
run of the ants system, starting in state S0. Graphically, each arrow begins at
a direct prerequisite of the event at the arrow’s end. Order on events induced
by transitivity is not depicted. In Fig. 7, c 5 is unordered with a 3 4, as well as
with a 2 3. But a 3 4 is ordered with (i.e. smaller than) a 2 3. Formulated more
generally, if e no prerequisite for f , and if f is no prerequisite for g, then e may
very well be a prerequisite for g. In technical terms, this means:

In general, causal order is no weak ordering.

(7)

This contrasts the temporally motivated orders of (1) to (4).
We intend to employ event orders as a model of runs. This rises the problem
of identifying states in a run. There is no way to insert global states into a partial
order that is not weakly ordered. Nevertheless, wishing to embed single runs into
behavioral system models, some aspects of states are inevitable.

3.2 Local states and steps

To include aspects of states into an event order, we pursue the idea of local
states. For example, the initial state S0 of the ants system, as in Figs. 2, 3, 4,
and 5 consists of local states, one for each ant.

We construct local states as suggested in the framework of the Heraklit [2]:
a local state is a proposition, usually a predicate p together with an item or a

8

P. Fettke, W. Reisig

Fig. 5: the lockstep model

tuple t, where p applies to t. For example, let A be the predicate “directed
ants on the bar”. This predicate applies to the tuple (1, r) in the initial state
S0 of the ants system. This kind of propositions is usually written A(1, r). In
graphical representations we skip the brackets. Hence, the initial state S0 of
the ants system is a set of local states, each of which is shaped “A i j”, with
i = 1, . . . , 6, and j ∈ {l, r}.

A local step is an occurrence of an event, together with the event’s eﬀect on
local states. Each step updates some of the local states. For example, Fig. 6 (a)
shows the local step of meeting of ants 1 and 2, and their swapping of direction.
This ﬁgure shows the cause and eﬀect of event a 4 5 to the local states A 4 r and
A 5 l: they both are updated to A 4 l and A 5 r, respectively. Any kind of global
state is not necessary to specify event a 4 5. Correspondingly, Fig. 6 (b) shows
the meeting of ants 3 and 4.

According to Fig. 7, the event a 4 5 is a prerequisite for a 3 4, because ant 4

1. starts to the right (local state A 4 r),
2. then swaps to A 4 l (jointly with ant 5),
3. then returns back to A 4 r, (jointly with ant 3).

Fig. 6 (c) shows the combined behavior of a 4 5 occurring before a 3 4.

3.3 The run starting at state S0

Fig. 8 shows the run U of the ants system, starting in the initial state S0. Besides
the predicate “A”, the run U employs further predicates, used to describe causes
and eﬀects of ants to drop down left and right: Local states B i state that ant i

Discrete models of continuous behavior

9

Fig. 6: events and their composition

Fig. 7: event order

is the leftmost ant, hence i is the next ant expected to drop down to the left; L i
states that ant i has dropped down left. Accordingly, C i stated that ant ant i is
the rightmost ant, hence next ant expected to drop down to the right; R i states
that ant i has dropped down right. The gray background displays a Heraklit
module, with interfaces on its left and right margin.

3.4 Composing the run U from the ants’ behavior

As each single ant contributes to the run U , one may ask for the contribution of
each single ant to U . Fig. 9 shows the contribution of ants 1, . . . , 6, as Heraklit
modules, “ant i” (i = 1, . . . , 6). For each ant i, the module of i starts with zero,
one or two events shaped a i i+1 or a i−1 i, followed by b i or c i. This means
intuitively, that ant i meets up to two neighbored ants, and then drops down
the bar to the left (event b i) or to the right (event c i). Before dropping down,
ant i informs its right neighbor ant i + 1 or its left neighbor ant i − 1 that it

10

P. Fettke, W. Reisig

Fig. 8: run U of the ants system

is now the leftmost ant (local state B i) or the rightmost ant (local state C i).
Heraklit comes with a composition operator “•”, such that we can write:

U = ant 1 • · · · • ant 6.

(8)

4 Modeling the bar with ants

In the deﬁnition of runs, replacing temporal order by event order is a fundamental
step. It raises the question of how to cope with the new version of runs, how
such runs are generated by a kind of system model, etc. In the rest of this paper,
we model the ants system itself, we discuss the composition of system models
and runs, and we discuss a schematic representation for ant systems.

4.1 The model of the ants system

Fig. 10 shows the ant system as a module in the Heraklit framework [2]. The
places on its left and right margin are the left and right interface of the module,
collecting the dropped down ants. Essentially, this ﬁgure shows a high-level Petri
net. Its initial marking represents the local state components of the initial state
S0. As usual for such Petri nets, in a given marking, a transition is enabled with
respect to a valuation of the involved variable, i. For example, in marking S0,
transition “a” is enabled with i = 1 (representing the event a 1 2), but not with
i = 2. This way, each transition of Fig. 10 causes a set of steps. A run (such as
in Fig. 8) is a run of the system, if each step of the run can be conceived as a
step of the system, and if the initial state of the run ﬁts the initial system state.
For Fig. 10, this applies to the run U of Fig. 8. Formal details of the notion of
a run of a system are presented in [2].

Discrete models of continuous behavior

11

Fig. 9: each ant’s behavior

4.2 Composing two bars

As an exercise showing the elegance and technical simplicity of the Heraklit
approach, we consider the case of two bars, a left and a right one, linked together.
A right moving ant on the left bar no longer drops down to the right of the bar,
but moves onto the right bar. Correspondingly, a left moving ant on the right
bar no longer drops down to the left of the bar, but moves onto the left bar. We
model this system with two copies of the above ants system, slightly extending
the right interface of the left system, and the left interface of the right system,
as shown in Fig. 11. Each dotted line links two places that are merged in the
composed system.

The left system of Fig. 11 extends the ant system of Fig. 10 by place L and
transition e. Left-moving ants move from the right to the left bar via the place L
and the transition e, thus reaching the place A of the left bar. Place C protocols

12

P. Fettke, W. Reisig

Fig. 10: the ants system

Fig. 11: composing two bars

the actually rightmost ant on the bar. In a symmetrical way, the right system of
Fig. 11 introduces the place R and the transition d. The synchronizing place S
prevents the rightmost ant of the left bar and the leftmost ant of the right bar
to slide past each other. In technical terms, c is followed by d, before b occurs.
Or b is followed by e before c occurs.

Ignoring the dotted lines, the composed system can be written in Heraklit

as

left bar • right bar.

(9)

It is interesting to study the composition of runs of the composed system. As
initial state, for the left system we assume the state as in Fig. 8. The right system
contains initially only one ant, oriented to the left. In the run of Fig. 12, ant 6
moves from the left to the right bar, meeting ant 7 on the right bar. Both ants
swap direction: ant 6 returns to the left bar, and ant 7 eventually drops down to
the right of the right bar. Ant 6 meets ant 5 on the left bar, swaps direction, etc.
Eventually, ants 3, . . . , 7 are dropped down to the right of the right bar. Ants 1
and 2 take no notice at all from the newly attached bar, and drop down to the
left of the left bar. In Fig. 12, the transitions of the right module are shaded.

Discrete models of continuous behavior

13

Fig. 12: composed run

Fig. 13: a middle bar

4.3 Composing many bars

The case of composing two bars can systematically be extended to any number of
bars. To this end we employ a middle bar, as in Fig. 13. For example, composition
of ﬁve bars can be written in Heraklit as

left bar • middle bar • middle bar • middle bar • right bar.

(10)

14

P. Fettke, W. Reisig

Fig. 14: the ant schema

5 A schematic representation of ants systems

Fig. 10 shows an ant system with a ﬁxed initial state, consisting of six ants,
each of which is oriented either to the left or to the right. Now we strive at a
representation that covers any number of ants, and any orientation of each ant.
We achieve this by help of well-established concepts of general algebra [11], as
used in algebraic speciﬁcations such as CASL, VDM, Z, etc. The inscriptions of
Fig. 10 represent elements of a set of ants and a set of directions

Fig. 14 includes a signature, Σ, some typed symbols for sets, constants and
functions, and four properties. As usual in algebraic speciﬁcations, an instanti-
ation of Σ assigns each symbol a corresponding set, constant, or function, such
that the required properties are respected. Thus, an instantiation of Σ is struc-
ture, denoted as a Σ–structure. For example, Fig. 10 includes an instantiation
of the signature Σ of Fig. 14: The symbols A and D are instantiated by the
sets {1, . . . , 6} and {l, r}. The constant symbol n is instantiated by the integer
6. The symbols l and r are instantiated by themselves. The instantiation of the
function symbol d is a function that is implicitly given by the initial marking of
the place A. Summing up, each instantiations of Σ speciﬁes an ant system.

The initial marking of the place A deserves particular attention. One may
be tempted to use the symbol “init” as symbolic initial marking. According
to the signature Σ, an instantiation would instantiate “init” as a set ants of
directed ants, as one initial token. This is, however, not what we want. Instead,
we want each element of the set ants to be a token. In logical terms, with the
place A denoting the predicate “directed ants on the bar”, we want not to state

Discrete models of continuous behavior

15

”A(ants)”, but

(11)
∀a ∈ ants : A(a).
Using the Heraklit framework, we denote this by the inscription “elm(init)“
in the place A.

6 Related work

On the background of classical automata theory and transition systems, a run
(i.e. a single behavior) of a discrete system is a set of activities, totally or-
dered along the evolution of time. Each activity updates a (global) state, with a
state containing all what is the case at a distinguished point in time. C.A. Petri
challenged this “interleaving semantics” since the 1960ies, and suggested non-
sequential processes as a model for single runs of any kind of discrete systems [8].
In this view, a run is a set of activities, partially ordered by causal dependencies.
Such partial orders have been suggested for many models, in particular for in-
teracting sequential systems. Typical such contributions include [1, 4, 5, 7, 9] and
may others. But partial order semantics never prevailed. Its technical costs were
considered to outperform the gained insight.

The Heraklit framework with its composition operators used above, how-
ever reduces the technical burden drastically and reveals further insight. In par-
ticular, composition of systems yields exponentially many interleaving runs, but
only quadratically many partially ordered runs. The number of runs of a com-
posed system A • B is in general exponentially bigger than the number of runs of
A and B. The corresponding number of partially ordered runs is only quadrati-
cally bigger.

Our discussion of weak orderings in Sec. 2.6 reﬂects the discussion of mea-
surement in several scientiﬁc ﬁelds as discussed by e.g. [6]: typically it is argued
that measurement means that attributes of objects, substances, and events can
reasonably be represented numerically such that the observed order of objects
etc. is preserved in the numerical representation. In other words, any reasonable
kind of measurement yields totally ordered results if diﬀerent objects has to be
represented by diﬀerent numbers; and weakly ordered results if diﬀerent objects
can be represented by the same number. So, it comes without surprise that the
behavioral models of Sec. 2.1 to 2.4 deﬁne weak orderings.

7 Conclusion

With this paper, we intend to raise a number of questions, without claiming
full-ﬂedged answers:

– The fundamental question: Is it possible for each system with timing aspects,
to separate time and functionality? If yes, does this separation always yield
better insight into the system, or better methods to prove aspects of correct-
ness? If no, can properties of systems be identiﬁed, that would characterize
this distinction?

16

P. Fettke, W. Reisig

– To which extent does our chosen modeling technique, Heraklit, limit or

bias the representation of functionality?

– How is the notion of time in real world systems related to the treatment of
time in models, and in implementations: In informatics we frequently tend
to assume continuous or discrete time to “exist” and to be “measurable”
without much of eﬀort. Sections 2.2 to 2.4 show that this assumption is
not justiﬁed, and the above question is far from trivial. Before discussing
e.g. meeting points of ants with diﬀerent velocities, it must be clariﬁed how
those notions will be ﬁxed in the model.

We suggest to base this kind of questions on the notion of causality. This
oﬀers a larger degree of mathematical expressiveness, because causality orders
the events of a run not necessarily by a weak ordering (as time based models
usually do), but by a more general partial order. We suggest this as a beginning
of a theoretical framework for any kind of modeling of collective adaptive sys-
tems. This implies new development processes, property preserving veriﬁcation,
reﬁnement, composition etc.

Acknowledgment We deeply appreciate the careful and thoughtful hints and
comments of the referees.

References

1. Degano, P., Nicola, R.D., Montanari, U.: A distributed operational semantics for

ccs based on c/e systems. Acta Informatica 26, 59–91 (1988)

2. Fettke, P., Reisig, W.: Handbook of Heraklit (2021), Heraklit working paper,

v1.1, September 20, 2021, http://www.heraklit.org

3. Fettke, P., Reisig, W.: Modelling service-oriented systems and cloud services with
Heraklit. In: Zirpins, C., et al. (eds.) Advances in Service-Oriented and Cloud
Computing. pp. 77–89. Springer International Publishing, Cham (2021)

4. Korﬀ, L.R., Korﬀ, M.: Concurrency = interleaving concurrency + weak conﬂict.

Electronic Notes in Theoretical Computer Science 14, 204–213 (1998)

5. Koutny, M.: Partial order semantics of box expressions. In: Valette, R. (ed.) Appli-
cation and Theory of Petri Nets 1994. ICATPN 1994. Lecture Notes in Computer
Science, vol 815. pp. 318–337 (1994)

6. Krantz, D.H., Luce, R.D., Suppes, P., Tversky, A.: Foundations of Measurement,

Volume I, Additive and Polynomial Representations. Academic Press (1971)

7. Lamport, L.: Time, clocks and the ordering of events in a distributed system.

Communications of the ACM 21(7), 558–564 (1978)

8. Petri, C.A.: Non-sequential processes. Tech. Rep. ISF-77-5, Gesellschaft f¨ur Math-
ematik und Datenverarbeitung, St. Augustin, Federal Republic of Germany (1977)
9. Reisig, W.: Partial order semantics versus interleaving semantics for csp-like lan-
guages and its impact on fairness. In: Paredaens, J. (ed.) Automata, Languages
and Programming. ICALP 1984. Lecture Notes in Computer Science, vol 172. pp.
403–413 (1984)

10. Resnick, M.: Turtles, Termites, and Traﬃc Jams. MIT Press (1994)
11. Sanella, D., Tarlecki, A.: Foundations of Algebraic Speciﬁcation and Formal Soft-

ware Development. Springer (2012)

