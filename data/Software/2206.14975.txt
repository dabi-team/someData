Time-Efﬁcient Qudit Gates through
Incremental Pulse Re-seeding

Lennart Maximilian Seifert†∗, Jason Chadwick‡∗, Andrew Litteken†, Frederic T. Chong† and Jonathan M. Baker†
†Department of Computer Science, University of Chicago
‡Department of Physics, Carnegie Mellon University
∗These authors contributed equally.

2
2
0
2

n
u
J

0
3

]
h
p
-
t
n
a
u
q
[

1
v
5
7
9
4
1
.
6
0
2
2
:
v
i
X
r
a

Abstract—Current efforts to build quantum computers focus
mainly on the two-state qubit, which often involves suppressing
readily-available higher states. In this work, we break this
abstraction and synthesize short-duration control pulses for gates
on generalized d-state qudits. We present Incremental Pulse Re-
seeding, a practical scheme to guide optimal control software
to the lowest-duration pulse by iteratively seeding the optimizer
with previous results. We ﬁnd a near-linear relationship between
Hilbert space dimension and gate duration through explicit pulse
optimization for one- and two-qudit gates on transmons. Our
results suggest that qudit operations are much more efﬁcient than
previously expected in the practical regime of interest and have
the potential to signiﬁcantly increase the computational power of
current hardware.

Index Terms—quantum computing, qudit, quantum optimal

control, pulse synthesis

I. INTRODUCTION

Quantum computing traditionally focuses mainly on the
realization of noise-robust two-level systems, known as qubits.
However, in many quantum architectures, each qubit is embed-
ded in a much larger Hilbert space, with all other energy levels
being ignored or suppressed. Qudits, the extension of qubits
to d levels, are a promising topic of study with the potential to
increase computational power of a machine without needing to
add additional logic units. For instance, a single 4-state qudit
can store the same amount of information as two qubits, and
an 8-state qudit can encode the global state of three qubits.
Many quantum algorithms have been proposed or adapted for
qudits ([1]–[5]), and qudit-based improvements in quantum
circuit compilation have been presented ([6], [7]). The latter
showed that the use of qudits in intermediate steps of a circuit
can asymptotically reduce the required number of ancilla in a
quantum algorithm at essentially equal circuit depth.

Qudits have been studied in different experimental settings.
Both IBM [8] and Rigetti [9] have demonstrated implementa-
tions of three-level qutrits on superconducting hardware, while
qudits with d = 7 states have been successfully realized using
trapped 40Ca+ ions [10].

This work is funded in part by EPiQC, an NSF Expedition in Computing,
under grants CCF-1730082/1730449; in part by STAQ under grant NSF Phy-
1818914; in part by NSF Grant No. 2110860; by the US Department of Energy
Ofﬁce of Advanced Scientiﬁc Computing Research, Accelerated Research for
Quantum Computing Program; and in part by NSF OMA-2016136 and the Q-
NEXT DOE NQI Center. FTC is Chief Scientist at Super.tech and an advisor
to Quantum Circuits, Inc.

Correspondence: lmseifert@uchicago.edu, jchadwick@uchicago.edu

For quantum optimal control

Fig. 1.
tasks to realize a certain gate or
state evolution, truncated control pulses can be used as initial guesses for
optimizations of shorter duration. Since they originate from a previous
optimization, they already drive the system close to the desired objective.
In this ﬁgure, the plot on the top shows a high-ﬁdelity pulse being truncated
to a shorter duration, and the plot on the bottom is the result of re-optimizing
this truncated pulse (achieving the same high ﬁdelity at a shorter duration).

The potential beneﬁts of using qudits are especially im-
portant
in the near-future NISQ (Noisy Intermediate-Scale
Quantum) [11] era of quantum computing, as both total qubit
count and maximum circuit depth are severely limited by
current hardware. Harnessing qudits could allow current or
near-future devices to solve larger, more useful problems
sooner than they could with only qubits. However, qudit
gate durations theoretically scale in O(h2) time [12], with
h being the Hilbert space dimension; this appears to limit
the usefulness of higher-dimension qudits, as experimentally
achieving the previously-mentioned decreased ancilla or gate
count could require much longer individual gate durations.

the time it

Quantum logic gates are implemented through external
control pulses, meaning that
takes to apply a
certain gate depends on the duration of the corresponding
control pulse. Optimal control software such as GRAPE [13]
is designed to ﬁnd the most accurate control pulse for a certain
gate and duration. This means that ﬁnding the high-accuracy
pulse of shortest duration for a given gate requires many
independent optimizations at different durations. In this work,
we present the Incremental Pulse Re-seeding (IPR) scheme, a
method for repeatedly changing the pulse duration and using

truncate &re-optimize 
 
 
 
 
 
previous results as new initial guesses for the optimizer, as
shown in the example in Figure 1. IPR provides improved
shortest-duration results and decreases the dependence on
random initial guesses, which is increasingly important for
larger Hilbert space dimension.

Using a transmon Hamiltonian, we apply our method to
optimizing single-qudit gates of dimension up to eight and
two-qudit gates for qudits of dimension up to four to determine
the relationship between Hilbert space dimension and shortest
gate duration. In contrast to the theoretical O(h2) scaling,
our results suggest a near-linear relationship for the range of
dimensions we consider.

In Section II we discuss the basics of quantum computation
on qubits and qudits. In Section III we explain carrier wave-
based optimal control and justify the physical and compu-
tational parameters that we choose in our optimizations. In
Section IV, we introduce the Incremental Pulse Re-seeding
scheme. Finally, we present our optimized pulses and analyze
the scaling of gate duration with respect to Hilbert space
dimension in Section V.

II. BACKGROUND

A. Quantum computation with qubits

In this section, we brieﬂy introduce quantum computation
on qubits, and then present the more general approach in-
volving qudits. For a more thorough explanation of quantum
computing, we refer to [14].

The quantum counterpart to the classical bit is the qubit,
the traditional basis of quantum computation. While classical
bits can only assume values of either 0 or 1, qubits may exist
in a quantum superposition of the corresponding basis states

|0(cid:105) =

(cid:21)
(cid:20)1
0

and |1(cid:105) =

(cid:21)
.

(cid:20)0
1

(1)

An arbitrary qubit state is then represented by |ψ(cid:105) = α |0(cid:105) +
β |1(cid:105), where α, β ∈ C denote the complex amplitudes of the
respective basis states.

Instructions to manipulate the states of qubits are called
quantum gates. According to the laws of quantum theory, these
gates are reversible and can be represented by unitary opera-
tors. A set of commonly used gates are the Pauli operators:
(cid:21)
(cid:20)0 −i
0
i

(cid:20)1
0
0 −1

(cid:21)
(cid:20)0 1
1 0

, Z =

X =

Y =

(cid:21)
.

(2)

,

Here the X gate corresponds to the quantum analogue of a
NOT operation, mapping the state |ψ(cid:105) = α |0(cid:105) + β |1(cid:105) to
X |ψ(cid:105) = α |1(cid:105) + β |0(cid:105). Useful gates for creating superposition
or manipulating the relative phases of qubits are the Hadamard
gate H and the T gate, respectively:
(cid:20)1
1
1 −1

(cid:21)
, T = Z 1/4 =

0
ei π
4

(cid:20)1
0

H =

(cid:21)
.

(3)

1
√
2

Like its classical version, this gate ﬂips the state of the target
qubit |q2(cid:105) if the control qubit |q1(cid:105) is in state |1(cid:105). The CNOT
gate plays a particularly important role in quantum circuits,
as it has the power to create entanglement between qubits.
Swapping the states of two qubits can be realized with a
SWAP gate:

SWAP |q1(cid:105) |q2(cid:105) = |q2(cid:105) |q1(cid:105) .

(5)

The H, T , and CNOT gates comprise a universal gate set,
meaning any arbitrary qubit circuit can be decomposed into a
sequence of these gates.

B. From qubits to qudits

In many proposed quantum hardware systems, such as
superconducting or ion trap computers, each quantum logical
unit has an inﬁnite spectrum of energy levels. The stan-
dard qubit abstraction suppresses the other states. Instead,
we consider d-dimensional qudits, which each consist of a
superposition of d computational basis states, expressed as

|ψ(cid:105) = α0 |0(cid:105) + α1 |1(cid:105) + · · · + αd−1 |d − 1(cid:105) =

d−1
(cid:88)

k=0

αk |k(cid:105) . (6)

In this work we consider the generalized gates ([15], [16])

(7)

X s

Xd |k(cid:105) = |k + 1 mod d(cid:105) ,
d : |0(cid:105) ↔ |d − 1(cid:105) ,
d−1
(cid:88)

Hd |k(cid:105) =

1
√
d
Td |k(cid:105) = ωk/4

j=0

|k(cid:105) ,

ωkj

d |j(cid:105) ,

d
where ωd = e2πi/d. Xd maps a computational basis state to
the next higher one, and maps |d − 1(cid:105) back to |0(cid:105). As an
alternative generalization, X s
d swaps the amplitudes of the
lowest and the highest state. The generalized Hadamard gate
Hd creates an equal-population superposition with different
relative phases depending on the input state. In analogy to
the qubit case, we deﬁne the Td as the fourth root of the
generalized Zd gate (where Zd |k(cid:105) = ωk
d |k(cid:105)), such that it
preserves populations of the basis states but introduces phase
differences. For the above equations, the d = 2 case produces
the qubit gates as deﬁned in (2) and (3).

Analogously, two-qudit gates can be obtained from gen-
eralizing two-qubit gates. For example, consider the CNOT
operation in (4). One possible two-qudit extension could
implement the Xd on the target qudit, conditioned on the
control qudit being in some subset of the d basis states.
However, many other extensions are possible ([6], [15], [16]).
Here we focus on the qudit SWAP gate, the straightforward
generalization of (5), which fully swaps the amplitudes of two
qudits.

Two-qubit gates involve logical operations on several qubits
at once, with the most common example being the CNOT
(controlled NOT) gate:

CNOT |q1(cid:105) |q2(cid:105) = |q1(cid:105) |q2 ⊕ q1(cid:105) .

(4)

C. Quantum optimal control

Quantum systems can be purposefully steered by applying
external control ﬁelds, which are speciﬁc to particular hard-
ware. For instance, in superconducting architectures, the state

of qubits are manipulated through analog microwave pulses.
Generally, the evolution of a quantum system is determined
by its time-dependent Hamiltonian

H(t) = H0 + Hc(t).

(8)

Here H0 denotes the system’s intrinsic drift Hamiltonian and
Hc(t) = (cid:80)
k fk(t)Hk denotes the control Hamiltonian, which
is typically described by control operators Hk and classical
tunable control ﬁelds fk(t). Quantum optimal control aims to
ﬁnd the optimal control paths fk(t) to realize a desired state
transition or target unitary. This is achieved by repeatedly solv-
ing the Schr¨odinger equation and adjusting the control ﬁelds
in every iteration to minimize a certain objective function.
Different algorithms and toolboxes have been designed for this
purpose ([13], [17], [18]).

III. SETUP

In this section, we motivate the physical and computational
parameters that we have chosen to use in our optimizations.
We also introduce the concept of control pulses parameterized
through B-splines and carrier waves, which is a key aspect of
the optimizer we use.

A. Model Hamiltonian

We consider a system based on superconducting hardware
that consists of two weakly coupled, anharmonic transmons
[19] with drift Hamiltonian

H0 =

2
(cid:88)

(cid:20)
ωka†

kak +

(cid:21)

ka†
a†

kakak

ξk
2

(9)

k=1
+ J(a†

1a2 + a†

2a1).

In order to describe qudits, we typically truncate the ladder
operators ak and a†
k at level d + 2. Including two additional
guard states allows us to penalize population leakage into
higher energy states, while we have found that additional guard
states beyond two provide marginal ﬁdelity improvements
for higher computational cost. We choose realistic physical
parameters inspired by [20]: The 0-1 transition frequencies
of the transmons are ω1/2π = 4.914 GHz and ω2/2π =
5.114 GHz, and both transmons have the same anharmonicity
ξ1/2π = ξ2/2π = −0.330 GHz. They are effectively coupled
with J/2π = 3.8 MHz. While our speciﬁc results depend
explicitly on these parameters, our methods apply to systems
with very different parameters. Control of our model system is
possible through microwave drives that add or remove single
excitations, as described by

Hc(t) =

2
(cid:88)

k=1

fk(t)(ak + a†

k).

(10)

To numerically solve the Schr¨odinger equation, it is often
helpful to slow down the time scales by applying the rotating
wave approximation. In a rotating frame with equal angular

frequency ωr for both qudits, we thus obtain the full trans-
formed Hamiltonian

˜H(t) = ˜H0 + ˜Hc(t)
2
(cid:88)

=

(cid:20)
(ωk − ωr)a†

kak +

(cid:21)

ka†
a†

kakak

ξk
2

k=1
+ J(a†
2
(cid:88)

+

2a1)

1a2 + a†
(cid:104)

(11)

(cid:105)
.

pk(t)(ak + a†

k) + iqk(t)(ak − a†
k)

k=1

The rotating frame control functions pk(t) and qk(t) are
then related to the lab frame controls through fk(t) =
2 Re(cid:8)(pk(t) + iqk(t))eiωrt(cid:9) [17].

For the case that we want to describe only a single transmon,
we disregard the transmon at index 2 in the above equations
and restrict ourselves to a single anharmonic oscillator with
one lab frame control ﬁeld f1(t).

B. Quantum optimal control with quadratic B-splines

Juqbox ([17], [21]) is an open-source software package
designed to solve quantum optimal control problems in closed
systems under the rotating wave approximation. In this section
we brieﬂy summarize the differences between Juqbox and
conventional optimizers such as GRAPE ([13], [22]). While
algorithms like GRAPE directly adjust the value of a control
pulse at each discrete point in time, Juqbox instead parame-
terizes the pulse with B-splines. The control functions pk(t)
and qk(t) in the rotating frame are given by a sum of Nf
carrier waves with ﬁxed angular frequencies Ωk,j, where each
carrier wave has an amplitude envelope Sb(t) that consists of
Nb B-splines:

pk(t, (cid:126)α) =

qk(t, (cid:126)α) =

Nf
(cid:88)

Nb(cid:88)

j=1

b=1

Nf
(cid:88)

Nb(cid:88)

j=1

b=1

Re(cid:8)αk,j,b eiΩk,j t(cid:9)Sb(t)

(12)

Im(cid:8)αk,j,b eiΩk,j t(cid:9)Sb(t).

Juqbox ﬁnds optimal pulses by adjusting the 2Nf Nb real
coefﬁcients αk,j,b = α(re)
k,j,b, +iα(im)
k,j,b for the quantum devices
indexed by k. The collection of these design variables is
denoted by (cid:126)α. The beneﬁt of this approach is that the B-
spline parameterization drastically reduces the dimensionality
of the optimal control problem, especially for long-duration
pulses, and allows carrier wave frequencies to be chosen to
speciﬁcally address the target state evolutions while avoiding
undesired transitions. Figure 2 shows an example pulse deﬁned
by a single carrier wave and six B-splines.

The user of this tool must specify a number of physical and
numerical parameters for the optimizer, the most signiﬁcant
of which are summarized in Table I and discussed in the
following subsection.

dimensionality of the pulse, and additionally allows us to
easily target the desired state transitions in the qudits by using
carrier frequencies directly corresponding to the qudit states.
In the lab frame, the Nf carrier frequencies

Ωlab

k,j = ωk + jξk,

j = 0, . . . , d − 2

(14)

correspond to the resonant frequencies of qudit k. For instance,
Ωlab
1,2 is the frequency of the |2(cid:105) → |3(cid:105) transition for qudit
1. For a two-qudit gate, each control pulse includes the
complete set of 2(d − 1) carrier frequencies in order to make
use of the cross-resonance effect ([23], [24]), where driving
one transmon at a resonant frequency of the other transmon
triggers a state transition in the latter. We choose not
to
correct these frequencies to account for the weak coupling
between the transmons, since the small corrections fall inside
the widths of the respective Fourier peaks of pulses with ﬁnite
duration. From experience, we have found that considering
all (d − 1)2 true resonant frequencies signiﬁcantly increases
the complexity of the problem without providing a noticeable
improvement.

max + Ωlab

Given the ﬁxed set of 2(d − 1) lab frame carrier fre-
quencies Ωlab
k,j , we choose the average frequency as the ro-
tating frame frequency ωr = (Ωlab
min)/2, which is
equal for both qudits (the coupling term is then constant
in time, as shown in (11)). This minimizes the highest-
frequency carrier waves in the rotating frame, allowing the
optimizer to choose larger discrete time steps and decreasing
overall optimization run time. As an example we consider
two qutrits (d = 3). The lab frame carrier frequencies are
Ωlab
k,j /2π ∈ {4.914, 4.584, 5.114, 4.784} GHz, where the ﬁrst
two correspond to the two resonant frequencies of transmon 1
and the latter two to the resonant frequencies of transmon
2. The rotating frame frequency is ωr/2π = (5.114 +
4.584)/2 GHz = 4.849 GHz. Thus, the carrier frequencies in
the rotating frame are given by Ωk,j/2π = Ωlab
k,j /2π−ωr/2π ∈
{0.065, −0.265, 0.265, −0.065} GHz.

The number of B-spline basis functions Nb determines how
fast the pulse envelope can vary over time (see Figure 2).
While a larger number may enable shorter-duration pulses,
this will increase the dimensionality of the problem, as well as
introduce non-carrier-frequency control pulse oscillations. We
choose Nb = [T /(10 ns)] + 2 (where [ . ] denotes the nearest-
integer function) for two reasons. First, we want to maintain an
approximately constant B-spline density when varying T for
consistency between different optimization problems. Second,
this choice guarantees a minimum envelope rise time of around
15 ns, which is realistic in experiment [20]. The term +2
accounts for B-splines on the time domain boundaries, which
are always set to amplitude 0 in Juqbox’s implementation to
ensure that the ﬁnal pulse starts and ends at 0.

The parameter αmax limits the amplitudes of the individual
B-splines, effectively limiting the maximum amplitude of the
ﬁnal pulses. This is needed to ensure weak driving [25], which
increases the accuracy of approximate models like (11). We
aim for lab frame pulse amplitudes of at most 40 MHz and
achieve this by tuning αmax = 0.1/(2πNf ) GHz.

Fig. 2. Real part of an exemplary pulse in the rotating frame, with one carrier
wave (Nf = 1). (a) Six B-splines shape the envelope of the pulse. Grey dots
mark the support of each time-local basis function. (b) The ﬁnal pulse is
constructed from a single carrier wave bounded by the B-spline envelope.
With Nf > 1, the ﬁnal pulse is the sum of these individual pulses with one
carrier wave.

TABLE I
IMPORTANT PARAMETERS FOR OPTIMIZING IN JUQBOX

Symbol
T
ωr
k
˜H0
˜Hc(t)
V
Ωk,j
Nb
αmax
error_threshold
max_iter

Description
Total pulse duration
Rotating frame frequencies
Drift Hamiltonian in the rotating frame
Control Hamiltonian in the rotating frame
Target unitary gate in the rotating frame
Carrier frequencies in the rotating frame
B-spline basis functions per carrier wave
Bound on magnitude of B-splines
Goal inﬁdelity
Maximum optimization iterations

After specifying the required parameters, Juqbox applies
gradient-based methods to minimize an objective function
consisting mainly of the trace inﬁdelity

2

U †

(13)

(cid:111)(cid:12)
(cid:12)
(cid:12)

1
h2

T ((cid:126)α)V

J = 1 −

(cid:12)
(cid:110)
(cid:12)
(cid:12)Tr
between the target unitary V and the applied transformation
UT ((cid:126)α), where h is the Hilbert space dimension (without guard
states). The quantum optimal control task is successful if a set
of coefﬁcients (cid:126)α is found that achieves an inﬁdelity below a
desired error threshold. Throughout this work we will also use
ﬁdelity F = 1−J to quantify the quality of pulses. For a given
gate V , certain values of duration T will be too small for the
optimizer to ﬁnd a high-ﬁdelity pulse, in which case a larger
T is needed. In our work, the “gate duration” for a gate V
refers to the shortest T for which the optimizer converges to
our target ﬁdelity.

C. Choosing optimization parameters

We observe that for high-dimensional quantum optimal
control problems, it is generally difﬁcult to specify a set of
optimization parameters that guarantees ﬁnding high-ﬁdelity
pulses. Parameters such as Nb, the number of B-splines per
pulse, must be large enough to give the optimizer freedom,
while not so large as to introduce unnecessary local minima
in the highly non-convex search space. In the following
subsection, we describe and justify the decisions we made
to choose signiﬁcant optimization parameters.

The carrier frequency and B-spine envelope parameteri-
zation of the control pulse has two beneﬁts: it reduces the

(a)(b)We set error_threshold, the target gate inﬁdelity, to
10−3, corresponding to a ﬁdelity of 99.9%. The optimization
terminates if the pulse ﬁdelity reaches this target.

Finally, the parameter max_iter limits the number of
iterations of the optimizer if it does not terminate early due to
reaching error_threshold. This variable must be set suf-
ﬁciently large to ensure that the optimizer has converged very
nearly to a local minimum, and is generally set experimentally
depending on the dimension and target unitary (typically in the
range 200-1000).

IV. GATE DURATION OPTIMIZATION

In this section, we describe our method for ﬁnding the
shortest-duration, high-ﬁdelity pulse for a given target unitary.
Optimal control software generally works with a ﬁxed pulse
duration, so ﬁnding the shortest high-ﬁdelity pulse involves
repeated optimizations at different durations.

By default, each optimization begins with a random guess
for the coefﬁcient vector (cid:126)α within some bounds for each
coefﬁcient (typically ±αmax/100 or ±αmax/10). Due to the
non-convex nature of the optimization space, it is generally
good practice to try multiple initial guesses if the ﬁrst does
not work and the ﬁdelity seems relatively close to the goal
ﬁdelity.

A. Naive approaches to duration optimization

We ﬁrst introduce two simple approaches to ﬁnding optimal
gate durations, the exhaustive method and the binary search
method, and explain their downsides. The exhaustive process
begins at some low T = Tstart and increases T at a ﬁxed
interval, running an independent random-guess optimization
for each duration, until one value of T yields a high-ﬁdelity
pulse. While this method will work (at least for low-dimension
qudits), it is computationally inefﬁcient, motivating the second
approach: a binary search. This method involves specifying
Tmin and Tmax and then optimizing in a binary search pattern
within the bounds, decreasing T if optimization succeeds and
increasing if it fails (still running an independent, random-
guess optimization at each duration) until reaching the speci-
ﬁed granularity.

While these approaches are relatively effective for small
qubit-based gates, they both have problems when transition-
ing to high-dimensional qudit gates. Larger qudit dimension
signiﬁcantly increases computational cost of solving the opti-
mization, which means the exhaustive method can potentially
be very computationally expensive if the starting T is far below
the shortest convergent duration. The binary search method is
more efﬁcient, but individual long-duration optimizations near
Tmax will still be quite expensive if Tmax is large.

However, the more signiﬁcant issue is the increased com-
plexity of the optimization space for higher qudit dimensions.
We ﬁnd that random guesses become less effective at consis-
tently converging to the optimal solution for a given T , as we
show in section IV-D.

B. Incremental Pulse Re-seeding

We have developed an optimization scheme to address both
of these problems. The key idea is to reuse the coefﬁcient
vector (cid:126)α from failed optimizations as a seed for the next. For
example, if a pulse of duration T0 converges to a ﬁdelity of
99.5%, we can re-use this pulse as the starting point for an
optimization at duration T0 +δ, which we ﬁnd to have a better
chance of converging to 99.9% ﬁdelity than a random guess.
Depending on the success of the optimizer to ﬁnd a high-
ﬁdelity pulse for a certain duration, our algorithm changes the
duration for the next iteration by a discrete time step and reuses
the previous pulse (by extending or truncating it to ﬁt the new
duration) as a seed. The step size decreases as the algorithm
approaches the ﬁnal solution. We therefore call this scheme
Incremental Pulse Re-seeding (IPR). The variables used in IPR
are listed in Table II, and a ﬂowchart of the method is shown
in Figure 3. We denote an optimized pulse as “successful” if
it has ﬁdelity greater than our goal ﬁdelity, and “failed” if not.

TABLE II
VARIABLES USED IN INCREMENTAL PULSE RE-SEEDING

Symbol
Tstart
step
granularity
(cid:126)αguess
error_threshold

Description
First duration tried by optimizer
Time step to increase/decrease by
Minimum step size
B-spline coefﬁcients of initial guess pulse
Target inﬁdelity

The program starts from an initial duration Tstart with a
random guess (cid:126)αguess. A ﬂag variable found_time, which
indicates if a successful pulse has been found before, is set
to false. The optimizer then converges to a solution (cid:126)α with
ﬁdelity F . If the converged pulse is of sufﬁciently high ﬁdelity,
the solution is stored as (cid:126)αbest, the duration is stored as Tbest,
and found_time is set to true. We then reduce the gate
duration by the step size and re-seed the optimizer with a
truncated version of (cid:126)αbest that ﬁts the new duration. Figure 1
shows an example of a pulse being truncated and re-optimized.
If the target ﬁdelity is not met, but a successful pulse has
been found before, we decrease the step size and repeat the
above steps: start from Tbest − step and with (cid:126)αguess =
truncate((cid:126)αbest). This only happens if the step size is
larger than the predeﬁned granularity limit (in our case 1 ns);
otherwise, the algorithm terminates and returns the converged
result with the shortest duration.

If the optimized pulse does not meet the target ﬁdelity, and
no successful pulse has been found before, we increase the
duration and re-seed the optimizer with an extended version
of the previous pulse, for as long as the ﬁdelity increases with
each optimization. If the ﬁdelity decreases (compared to a
shorter duration) before any solution is found, we start the
entire procedure with a new random (cid:126)αguess. In this case we
set Tstart = Tbest, the duration for which ﬁdelity was highest.

C. Example: H4 gate

As an example, we present an application of Incremental
Pulse Re-seeding to ﬁnd the optimal duration of the d = 4

Fig. 3. The Incremental Pulse Re-seeding process. (a) The problem is initialized with a random pulse and duration guess Tstart. (b) The main optimize
function, which searches for the highest-ﬁdelity pulse for a given duration using Juqbox, returning an optimized pulse (cid:126)α and a ﬁdelity F . (c) If an optimization
succeeds, save the duration and pulse, then decrease T and start from a truncated version of the successful pulse. (d) If an optimization fails but we have
found a successful pulse in the past, decrease step size and work backwards from Tbest again; if step size has reached granularity, return best pulse. (e) If no
successful pulse has been found so far, but ﬁdelity improved, mark this duration as the best so far, extend the duration, and re-seed with the extended previous
pulse. (f) If no successful pulse has been found and ﬁdelity decreased, restart the whole process with the highest-ﬁdelity duration and a random guess.

Fig. 4. Applying Incremental Pulse Re-seeding (IPR) to ﬁnd the shortest duration for the H4 gate. a) Visualization of attempted durations during the IPR
procedure, with the chronological order of steps indicated by the colored numbers. Green (red) arrows represent steps that did (did not) lead to meeting the
pulse target ﬁdelity of 99.9%. Starting from Tstart = 70 ns and a time step of 8 ns, three pulse extension and re-optimization steps are required before the
target ﬁdelity is ﬁrst reached at 94 ns. The duration is then reduced to 78 ns by successfully re-seeding with truncated pulses. After step 6 the time step is
halved because re-optimizing at T = 70 ns with the truncated pulse does not meet the target ﬁdelity. Repeating this scheme leads to the ﬁnal duration of
Tgate = 76 ns, highlighted by the star, as after step 10 the time step falls below the granularity of 1 ns. b) Plot A shows the optimized pulse after IPR step
2. A new seed for the optimization at T = 94 ns is generated by extending the previous result in duration (A*). At 94 ns the target ﬁdelity is met, so the
optimized pulse is truncated (B*) and used as a seed for the second T = 84 ns optimization, leading to the successful result shown in C.

OPTIMIZE(, ) found_time?NoDid  increase  from last time?step truncate() re-seedoptimizer step extend() YesYesNoNoYes found_time  true  random()found_time  falseYesstep granularity?step  step / 2NoDone. Return: (a)(c)(d)(e)(b)START random()(f)(a)extendBCA*B*AoptimizetruncateoptimizeACBA*B*(b)Hadamard gate H4 (see (7)). Figure 4(a) shows the sequence
of IPR steps, where the chronological order is given by the
numbered arrows. Red arrows represent steps that failed to
reach the target ﬁdelity of 99.9%, while green arrows indicate
success. We start at Tstart = 70 ns with an initial time step size
of 8 ns and a random guess for the coefﬁcient vector (cid:126)α. The
ﬁdelity of the optimized pulse falls short of the target, so IPR
extends the output pulse and uses it to seed the optimizer at a
longer duration (step 1). This occurs two more times (steps 2
and 3) before a pulse that reaches the target ﬁdelity is found
at T = 94 ns. In step 4, this solution is then truncated and
used to revisit T = 86 ns. This time the optimization task is
successful, so the duration can be further decreased (step 5),
resulting in another high-ﬁdelity pulse at 78 ns. T = 70 ns fails
to converge to a the target ﬁdelity, so the time step is halved
and we try 74 ns instead (step 7). After few more steps, the
minimum step granularity is reached, and Tgate = 76 ns is
found to be the shortest duration to realize the H4 gate with
99.9% ﬁdelity. We note that durations 78 ns and 86 ns both
initially resulted in failed optimizations, but then succeeded
when re-seeded with truncated successful pulses.

meets the target ﬁdelity, so the pulse is truncated to 86 ns and
re-parameterized (B*). Plot C shows the converged pulse after
step 4, which successfully reaches 99.9% ﬁdelity. Together,
the series of plots (where A and C are both at duration 86 ns)
shows how a new minimum was found after visiting 94 ns and
then revisiting 86 ns with a better guess.

Figure 5 visualizes the evolution of the basis state pop-
ulations for the shortest pulse of 76 ns. It is clearly visible
how an equal-population superposition emerges in every case,
and the small imperfections at the ﬁnal time come from the
remaining 0.1% inﬁdelity. The populations of the guard states
cannot be seen because they are suppressed by multiple orders
of magnitude. This guard state suppression is achieved by
the carrier wave parameterization method, which allows us
to selectively induce state transitions.

D. Comparison with random guessing

For the X8 gate (see (7)), the IPR scheme ﬁnds a shortest-
duration pulse of 195 ns with target ﬁdelity 99.9%. To compare
our approach with a naive approach, we run 20 random-
guess, single-duration Juqbox optimizations at every 5 ns
between 180 ns and 230 ns, where the components of (cid:126)αguess
are sampled from [−0.1(cid:126)αmax, 0.1(cid:126)αmax]. Figure 6 shows the
distribution of pulse ﬁdelities achieved by this naive random
guessing across a range of durations for the same gate, with
20 random attempts at each duration.

Fig. 5. Evolution of state populations when applying the H4 pulse of shortest
duration (76 ns) to a qudit with d = 4. Every computational basis state
is transformed into superposition of all four basis states with nearly equal
population, deviations only arising from the remaining 0.1% inﬁdelity. At all
times the populations of the guard states |4(cid:105) and |5(cid:105) are below 2 × 10−3 and
10−6, respectively.

With the help of Figure 4(b), we take a closer look at steps
3 and 4 to explain how pulses are extended and truncated.
Initially (plot A), we have an optimized 86 ns pulse that falls
short of the target ﬁdelity. The controls p(t) and q(t) are
numerically extended by appending 8 ns of idle time (zero
amplitude pulse). The number of B-spines Nb changes due to
the duration change, so we obtain the new coefﬁcient vector
(cid:126)αguess by applying a least-squares ﬁt according to (12) with the
new number of B-splines. The approximation introduces small
distortions, as can be seen in plot A*, because the manually
modiﬁed control functions are not perfectly realizable with the
given parameterization. The following optimization (plot B)

Fig. 6. Distribution of naive random-guess optimizations of the X8 gate
for invididual durations between 180 ns and 230 ns. Each boxplot consists
of 20 ﬁdelities from 20 individual Juqbox optimizations, with the blue line
indicating the median value, the box indicating the middle 50% of ﬁdelities,
and the whiskers indicating the full range of values. a) The full data, showing
a general increase in ﬁdelity as duration increases. b) Focusing on the area
of interest (ﬁdelities close to 99.9%). The IPR scheme outperforms random
guessing, ﬁnding a minimum duration of Tbest = 195 ns at 99.9% ﬁdelity,
whereas none of the 20 random guesses at that duration reached the same
ﬁdelity.

It is clear that there is signiﬁcant variation in the naive
approach; no random-guess optimizations converged to 99.9
ﬁdelity at 195 ns, and only 8 out of 20 random guesses con-
verged to 99.9% ﬁdelity at 200 ns. Even for larger durations
such as 215 ns, not all guesses converged to the target ﬁdelity.
This is clearly a problem for binary-search-based methods,
which implicitly assume that a given duration will either
always succeed or never succeed. In contrast, over ten IPR
runs (with Tstart sampled from [160, 240] ns; see Section V-A),
the average and standard deviation are 198.6 and 3.0 ns. This
small standard deviation given the large range of starting

(a)(b)IPR bestIPR besttimes is evidence that our method is more stable than random
guessing for large Hilbert space optimizations.

TABLE III
LINEAR AND QUADRATIC FIT COEFFICIENTS FOR SINGLE-QUDIT GATE
DURATIONS

V. QUDIT PULSE RESULTS

Gate

a [ns]

b [ns]

c [ns]

Previous work ([6], [7]) has shown that breaking the
qubit abstraction in quantum circuits can lead to substantially
reduced circuit complexity involving fewer ancilla, making
qudits promising candidates for quantum computation. How-
ever, these improvements can only be practical if the gate
duration overhead does not scale poorly with the Hilbert space
dimension while still maintaining high gate ﬁdelity. In this
section we investigate this relation by explicitly constructing
short duration pulses of at least 99.9% ﬁdelity for one- and
two-qudit gates using Incremental Pulse Re-seeding (IPR).

A. Single-qudit gates

We consider the single-qudit gates Xd, X s

d, Hd and Td
presented in (7) for dimensions d = 2, ..., 8. In each case we
include two guard levels to account for and suppress leakage
into higher energy states. Expecting short gate durations, we
choose Tstart = 50 ns for the qubit and qutrit (d = 3)
cases, and use the resulting shortest durations to estimate
Tstart for higher d with a linear extrapolation. We set step
to the power of 2 nearest to Tstart/10 because this results
in integer durations. Having found durations Tbest for every
dimension, we then run IPR repeatedly with starting durations
randomly chosen from [0.8 Tbest, 1.2 Tbest] to identify other
local minima and reduce the gate time further, as well as to
measure the uncertainty of the method.

Figure 7 shows the minimum single-qudit gate durations
found over ten IPR runs for each dimension. The durations
for the generalized gates Xd, X s
d and the Hadamard gate, Hd,
scale similarly with the qudit dimension. We suspect that the
generalized Td gate can be realized in lower time at higher
dimension compared to the others because it only causes a
change in phase, not in state populations. For this gate, we
observe that the best pulse found for d = 7 is of shorter
duration than the d = 6 pulse, when the reverse is intuitively
expected. This discrepancy suggests shorter pulses may exist
and indicates a highly complicated optimization space. The-
oretical studies [12] have shown that optimal gate durations
scale asymptotically with O(h2), where h is the dimension
of the Hilbert space. We therefore ﬁt each sequence of data
points with a quadratic polynomial Tquad(d) = ad2 + bd + c
(solid grey lines) in d = h to compare our ﬁndings with
the theory. Furthermore, the layout of the data also motivates
linear regression, so we investigate the performance of a linear
model Tlin(d) = bd + c (dotted grey lines) as well. The ﬁt
coefﬁcients and their standard deviation estimates are given
in Table III, where for each gate the ﬁrst line corresponds
to the linear ﬁt and the second line to the quadratic ﬁt. The
quality of each regression is quantiﬁed with the coefﬁcient of
determination R2.

The near-ideal R2 values for quadratic ﬁts to Xd, X s
d and
Hd indicate that the quadratic models describe the empirical
scaling behaviors for these gates very well, which agrees with

Xd

X s
d

Hd

Td

1.48 ± 0.12

1.60 ± 0.16

1.15 ± 0.36

−0.38 ± 0.86

4.93 ± 2.67

26.79 ± 1.16 −26.07 ± 6.23
12.02 ± 1.18
28.64 ± 1.26 −29.79 ± 6.78
12.69 ± 1.60
26.04 ± 1.05 −24.61 ± 5.68
−0.36 ± 8.28
14.49 ± 3.66
14.36 ± 7.36
14.36 ± 1.37
6.36 ± 19.78
18.17 ± 8.74

3.71 ± 3.63

R2
0.991
1.000
0.990
1.000
0.992
0.998
0.957
0.959

the theoretical predictions. However, we emphasize that linear
scaling models capture the essential behavior in this low-
dimensional regime (compared to asymptotic considerations)
in good approximation too, deviating from the duration points
by less than 5 ns on average for those three gates. Barely
any difference between quadratic and linear regression is
noticeable for the Td gate, but the more scattered data points
lead to a reduced R2 value and larger uncertainty. For Td,
ﬁt parameter a < 0 indicates an unrealistic scaling of pulse
duration because this leads to negative durations in the limit
of large d. Additionally, R2 for the Td ﬁt is worse than the
other gates, indicating greater uncertainty. Td is a good case
study in the interplay between theoretical expectations and
empirical realizations. Speciﬁcally, the poor ﬁt obtained here
indicates that for many values of d, these gate durations may
overestimate the optimal gate times.

This result of essentially linear scaling over the practical
range of qudit dimensions has promising implications for the
current era where qudit experiments have been conducted
the computational
successfully ([8]–[10]). It suggests that
advantage single-qudit gates can provide is not outweighed
by pulse time overhead.

B. Two-qudit SWAP gate

For the two-qudit case we consider the generalized SWAP
gate, which fully swaps the state amplitudes between the
qudits. In many architectures, this is an important operation
for communication, as limited connectivity between devices
requires quantum information to be moved around repeatedly.
We apply IPR to ﬁnd SWAP durations for two qudits of
dimensions 2, 3, and 4, with corresponding Hilbert space
dimensions 4, 9, and 16, respectively. We limit our analysis
to these three cases because simulating the evolution of two
qudits with d ≥ 5 (plus guard states) becomes very resource-
expensive. We use two guard states for dimensions 2 and 3
and only one guard state for 4 due to the large Hilbert space.
As in the single-qudit case, each data point is the minimum
duration from ten IPR runs with different Tstart values.

Figure 8 shows shortest-duration results for the SWAP gate
with respect to the Hilbert space dimension h = d2. We
observe a trend that appears similar to the single-qudit case.
Given the small number of points, we do not attempt a ﬁt, but
note that the points appear nearly linear, as was the case with
the single-qudit gates. It is worth noting that fully swapping

Fig. 7. Dependence of single-qudit gate durations from qudit dimension d. The four gates are deﬁned in (7). Each data point shows the minimum duration of
applying Incremental Pulse Re-seeding (IPR) from ten different starting times. The unexpected discrepancy between d = 6 and d = 7 for the generalized Td
gate suggests a highly complicated optimization space and shows that shorter pulses for some d values may be possible. For each gate the scaling of duration
with dimension d is analyzed with quadratic and linear regressions, where the latter is less accurate but captures the essential behavior in this low-dimensional
regime. The ﬁt coefﬁcients are presented in Table III.

Tstart and (cid:126)αguess may result in slightly different gate durations.
However, as an example, our simulations show a relatively
small variation in gate duration of 4.69 ns on average for
single-qudit gates, underlining the advantage of our algorithm.
Our results prompt several directions of future research:

• The efﬁciency of qudit gates motivates further exploration
into quantum circuits that explicitly use qudits for compu-
tation, such as the asymptotic ancilla reductions achieved
in [6] and [7]. The computational advantages of qudit
circuits may allow NISQ devices to solve previously-
intractable problems.

• In this work, we consider the generalized SWAP two-
qudit gate, which appears to scale nearly linearly for
small qudit dimension. This result encourages analysis
of duration scaling for more two-qudit gates, such as the
SUM gate (a generalization of CNOT) from [15].

• The presented results are based on a system Hamiltonian
modeling superconducting transmons. We emphasize that
our approach is not limited to this speciﬁc case and could
be directly applied to optimal control problems across a
wider class of quantum systems.

• Our optimizations use an approximate Hamiltonian in a
closed system (governed by the Schrodinger equation).
For a more accurate measure of gate duration scaling,
similar experiments are needed in an open system, where
errors can be modeled more realistically. This can be
achieved by describing the dynamics with the GKSL mas-
ter equation (also known as the Lindblad master equation)
([26], [27]). In addition, benchmarking the performance
of qudit pulses on actual noisy quantum architectures
would help to investigate the accuracy of models em-
ployed. Optimizing control pulses to speciﬁcally mitigate
the increased sources of errors from operating on higher
energy levels may lead to making qudit computation
practical.

Overall, our work highlights the potential of qudit-based
computation in the future and provides an effective method
for ﬁnding short-duration qudit pulses. We ﬁnd high-ﬁdelity
pulses of low duration for both one- and two-qudit gates with
nearly linear scaling in the hardware-practical regime, suggest-
ing that qudit computation can offer signiﬁcantly increased

Fig. 8. Gate durations of two-qudit SWAP operations for qudit dimensions
d = 2, 3, 4. The x-axis corresponds to the dimension of the full Hilbert space,
h = d2. Due to the low number of data points, regression is not applied, but
a near-linear trend is visible.

the states of two ququarts (d = 4) is slightly less expensive
(1128 ns) than performing two sequential SWAP operations
on qubits (581 ns + 581 ns = 1162 ns). Given that a single
ququart has the same information capacity as two qubits, this
represents an efﬁcient way of moving quantum information.
Additionally, given that the d = 4 SWAP optimization space
is much more complex than the qubit case, we expect that this
duration could be further decreased through more sampling or
ﬁne-tuning.

VI. DISCUSSION

We have presented the Incremental Pulse Re-seeding (IPR)
scheme, an efﬁcient method for ﬁnding short-duration pulses
for quantum optimal control tasks, which performs better than
random-guess based methods for large Hilbert space gates. We
use this method together with the optimal control software
Juqbox to demonstrate that single-qudit gate duration scaling
is nearly linear for several useful gates, with dimension up to
d = 8. We also show that the two-qudit SWAP gate appears
to follow a similar trend for Hilbert space dimensions up to
d2 = 16.

We emphasize that while Incremental Pulse Re-seeding
helps to make intelligent initial pulse guesses for the optimizer
during intermediate steps, it does not eliminate the possibility
of converging to a local inﬁdelity minimum. As quantum
optimal control problems are typically underconstrained, dif-
ferent initial guesses can converge to different solutions. In
our case, this means starting IPR with different values for

[18] Stefanie G¨unther, N. Anders Petersson, and Jonathan L. DuBois. Quan-
tum Optimal Control for Pure-State Preparation Using One Initial State.
arXiv:2106.09148 [quant-ph], August 2021. arXiv: 2106.09148.
[19] Jens Koch, Terri M. Yu, Jay Gambetta, A. A. Houck, D. I. Schuster,
J. Majer, Alexandre Blais, M. H. Devoret, S. M. Girvin, and R. J.
Schoelkopf. Charge-insensitive qubit design derived from the Cooper
pair box. Phys. Rev. A, 76(4):042319, October 2007.
Publisher:
American Physical Society.

[20] Sarah Sheldon, Easwar Magesan, Jerry M. Chow, and Jay M. Gambetta.
Procedure for systematically tuning up cross-talk in the cross-resonance
gate. Physical Review A, 93(6):060302, June 2016.

[21] N. Anders Petersson, Fortino M. Garcia, Austin E. Copeland, Ylva L.
Rydin, and Jonathan L. DuBois.
Discrete Adjoints for Accu-
rate Numerical Optimization with Application to Quantum Control.
arXiv:2001.01013 [quant-ph], November 2020. arXiv: 2001.01013.
[22] Yunong Shi, Nelson Leung, Pranav Gokhale, Zane Rossi, David I.
Schuster, Henry Hoffmann, and Frederic T. Chong. Optimized Com-
pilation of Aggregated Instructions for Realistic Quantum Computers.
In Proceedings of the Twenty-Fourth International Conference on Archi-
tectural Support for Programming Languages and Operating Systems,
pages 1031–1044, Providence RI USA, April 2019. ACM.

[23] Chad Rigetti and Michel Devoret. Fully microwave-tunable universal
gates in superconducting qubits with linear couplings and ﬁxed transition
frequencies. Physical Review B, 81(13):134507, April 2010.

[24] Matthew Ware, Blake R. Johnson, Jay M. Gambetta, Thomas A. Ohki,
Jerry M. Chow, and B. L. T. Plourde. Cross-resonance interactions be-
tween superconducting qubits with variable detuning. arXiv:1905.11480
[quant-ph], May 2019. arXiv: 1905.11480.

[25] Easwar Magesan and Jay M. Gambetta. Effective Hamiltonian models
of the cross-resonance gate. Phys. Rev. A, 101(5):052308, May 2020.
Publisher: American Physical Society.

[26] G. Lindblad. On the generators of quantum dynamical semigroups.
Communications in Mathematical Physics, 48(2):119–130, June 1976.
[27] Vittorio Gorini. Completely positive dynamical semigroups of N-level

systems. Journal of Mathematical Physics, 17(5):821, 1976.

efﬁciency compared to qubit-only circuits.

ACKNOWLEDGEMENTS

We would like to thank Stefanie G¨unther and N. Anders
Petersson for valuable advice on using the quantum optimal
control software packages Juqbox and Quandary. Additionally,
we would like to thank David Schuster for helpful discussions
regarding quantum optimal control theory.

REFERENCES

[1] Z. Gedik, I. A. Silva, B. C¸ akmak, G. Karpat, E. L. G. Vidoto, D. O.
Soares-Pinto, E. R. deAzevedo, and F. F. Fanchini. Computational speed-
up with a single qudit. Scientiﬁc Reports, 5(1):14671, October 2015.
Number: 1 Publisher: Nature Publishing Group.

[2] Yannick Deller, Sebastian Schmitt, Maciej Lewenstein, Steve Lenk,
Marika Federer, Fred Jendrzejewski, Philipp Hauke, and Valentin
Quantum approximate optimization algorithm for qudit
Kasper.
arXiv:2204.00340 [cond-mat,
systems with long-range interactions.
physics:quant-ph], April 2022. arXiv: 2204.00340.

[3] Duc Manh Nguyen and Sunghwan Kim. Quantum Key Distribution
Protocol Based on Modiﬁed Generalization of Deutsch-Jozsa Algorithm
International Journal of Theoretical
in d-level Quantum System.
Physics, 58(1):71–82, January 2019.

[4] Koji Nagata, Han Geurdes, Santanu Kumar Patro, Shahrokh Heidari,
Ahmed Farouk, and Tadao Nakamura. Generalization of the Bern-
stein–Vazirani algorithm beyond qubit systems. Quantum Studies:
Mathematics and Foundations, 7(1):17–21, March 2020.
[5] Alex Bocharov, Martin Roetteler, and Krysta M. Svore.

Factoring
with qutrits: Shor’s algorithm on ternary and metaplectic quantum
architectures. Physical Review A, 96(1):012306, July 2017. Publisher:
American Physical Society.

[6] Pranav Gokhale, Jonathan M. Baker, Casey Duckering, Natalie C.
Brown, Kenneth R. Brown, and Frederic T. Chong. Asymptotic
Improvements to Quantum Circuits via Qutrits. Proceedings of the
46th International Symposium on Computer Architecture, pages 554–
566, June 2019. arXiv: 1905.10481.

[7] Jonathan M. Baker, Casey Duckering, and Frederic T. Chong. Ef-
ﬁcient Quantum Circuit Decompositions via Intermediate Qudits.
arXiv:2002.10592 [quant-ph], February 2020. arXiv: 2002.10592.
[8] Alexey Galda, Michael Cubeddu, Naoki Kanazawa, Prineha Narang, and
Nathan Earnest-Noble. Implementing a Ternary Decomposition of the
Toffoli Gate on Fixed-FrequencyTransmon Qutrits. arXiv:2109.00558
[quant-ph], September 2021. arXiv: 2109.00558.

[9] Rigetti Computing. Beyond Qubits: Unlocking the Third State in

Quantum Processors, December 2021.

[10] Martin Ringbauer, Michael Meth, Lukas Postler, Roman Stricker, Rainer
Blatt, Philipp Schindler, and Thomas Monz. A universal qudit quantum
processor with trapped ions. arXiv:2109.06903 [quant-ph], September
2021. arXiv: 2109.06903.

[11] John Preskill. Quantum Computing in the NISQ era and beyond.

Quantum, 2:79, August 2018. arXiv: 1801.00862.

[12] Seth Lloyd and Reevu Maity. Efﬁcient

implementation of unitary
transformations. arXiv:1901.03431 [quant-ph], January 2019. arXiv:
1901.03431.

[13] Navin Khaneja, Timo Reiss, Cindie Kehlet, Thomas Schulte-
Herbr¨uggen, and Steffen J. Glaser. Optimal control of coupled spin dy-
namics: design of NMR pulse sequences by gradient ascent algorithms.
Journal of Magnetic Resonance, 172(2):296–305, February 2005.
[14] Michael A Nielsen and Isaac L Chuang. Quantum Computation and

Quantum Information. Cambridge University Press, 2000.

[15] Daniel Gottesman. Fault-Tolerant Quantum Computation with Higher-
Dimensional Systems. arXiv:quant-ph/9802007, February 1998. arXiv:
quant-ph/9802007.

[16] Lia Yeh and John van de Wetering. Constructing all qutrit controlled
Clifford+T gates in Clifford+T. arXiv:2204.00552 [quant-ph], April
2022. arXiv: 2204.00552.

[17] N. Anders Petersson and Fortino Garcia. Optimal Control of Closed
Quantum Systems via B-Splines with Carrier Waves. arXiv:2106.14310
[quant-ph], June 2021. arXiv: 2106.14310.

