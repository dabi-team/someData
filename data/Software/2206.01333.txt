2
2
0
2

p
e
S
6
1

]
E
S
.
s
c
[

2
v
3
3
3
1
0
.
6
0
2
2
:
v
i
X
r
a

Formal Analysis of Lending Pools in
Decentralized Finance

Massimo Bartoletti1[0000−0003−3796−9774], James Chiang2[0000−0002−5126−9494],
Tommi Junttila3,
Alberto Lluch Lafuente2(cid:63)[0000−0001−7405−0818], Massimiliano
Mirelli2[0000−0001−9441−173X], and Andrea Vandin4,2[0000−0002−2606−7241]

1 Universit`a degli Studi di Cagliari, Cagliari, Italy
bart@unica.it
2 Technical University of Denmark, DTU Compute, Copenhagen, Denmark
{jchi,albl}@dtu.dk
massimilianomirelli.mm@gmail.com
3 Aalto University, Espoo, Finland
tommi.junttila@aalto.fi
4 Sant’Anna School of Advanced Studies, Pisa, Italy
andrea.vandin@santannapisa.it

Abstract. Decentralised Finance (DeFi) applications constitute an en-
tire ﬁnancial ecosystem deployed on blockchains. Such applications are
based on complex protocols and incentive mechanisms whose ﬁnancial
safety is hard to determine. Besides, their adoption is rapidly growing,
hence imperilling an increasingly higher amount of assets. Therefore,
accurate formalisation and veriﬁcation of DeFi applications is essential
to assess their safety. We have developed a tool for the formal analysis
of one of the most widespread DeFi applications: Lending Pools (LP).
This was achieved by leveraging an existing formal model for LPs, the
Maude veriﬁcation environment and the MultiVeStA statistical analyser.
The tool supports several analyses including reachability analysis, LTL
model checking and statistical model checking. In this paper we show
how the tool can be used to analyse several parameters of LPs that are
fundamental to assess and predict their behaviour. In particular, we use
statistical analysis to search for threshold and reward parameters that
minimize the risk of unrecoverable loans.

1

Introduction

Financial trading has recently shifted to virtual markets, platforms entirely reg-
ulated and controlled by novel protocols. Decentralised Finance (DeFi) [34] ap-
plications are deployed on blockchains like Ethereum [34,12], which oﬀer dis-
tributed infrastructures to execute smart contracts [18] without intermediaries.
DeFi has recently been employed by a growing community of users. As of April
2022, the growth of the capital locked by DeFi applications has increased almost

(cid:63) Corresponding author.

 
 
 
 
 
 
10 times in the last two years: from approximately $9.78bn, on 1 April 2020,
to over $83.51bn, on 1 April 2022 [29]. Even assuming the security guarantees
ensured by the underlying blockchain, DeFi smart contracts have several vulner-
abilities latent in their design [30,36]. Given the considerable amount of funds
daily exchanged on DeFi platforms [1,16], even minor design ﬂaws could deter-
mine massive and intolerable losses [21]. Notwithstanding the increasing interest
of several research groups in this area [9,5,2,32,4,19], the complexity of DeFi
protocols yields new interesting research problems. Formal veriﬁcation of these
systems is crucial, in order to ensure their correctness and security.

The veriﬁcation tool proposed in this paper simulates and analyses Lending
Pools (LPs), one of the most popular DeFi applications, whose two main features
are lending and borrowing assets, to support various ﬁnancial practices, includ-
ing margin trading. Our veriﬁcation tool is based on the formal model of LPs
proposed in [6]. Such model encompasses the behaviour of the most widespread
LPs, namely Aave [10] and Compound [24].

We craft an operational speciﬁcation of the LP model of [6] in Maude [15],
a speciﬁcation language which is particularly suitable for highly concurrent sys-
tems such as LPs. Additionally, Maude provides a very extensive environment
for both simulating and verifying the properties of the speciﬁed models. Given
the complexity of the modelled systems, the analyses techniques oﬀered by the
Maude environment are not suﬃcient. Speciﬁcally, since the system may evolve
by following an inﬁnite number of execution paths, the traditional model check-
ing methods result in being either ineﬀective or unviable. Therefore, the Maude-
based LP simulator has been extended to support statistical analyses. This has
been achieved by integrating the simulator with the MultiVeStA statistical anal-
yser proposed in [31] and recently redesigned to focus on analyses of interest for
of economical agent-based models [33]. The tool oﬀers analysis techniques from
the family of statistical model checking [3]. These statistical analyses, despite
producing less accurate results, allow to observe the quantitative behaviour of
large instances of the model, oﬀering statistically-reliable results. In the case of
lending pools, this approach allows to estimate parameters of the model so to
increase its safety. Speciﬁcally, an essential safety property of the model is that
the value of non-repayable loans is low.

This paper is based on the work done in [25] and proposes a Maude-based
LP simulator (Section 3) capable of conducting several analyses of lending pools
including LTL model checking and statistical analysis. The tool is open source
and available at [26]. Additionally, the study showcases the usage of the tool by
answering a still non-investigated research question, aiming at an enhancement
of the analysed platforms’ safety. In particular, the statistical analysis presented
in Section 4 shows that a choice of the parameters used to instantiate the LP
model reduces the amount of non-repayable loans.

2

2 Lending Pools and Price Models

Lending Pools. Lending Pools [35] are a class of DeFi applications which
allow users to lend and borrow cryptoassets. At the time of writing, LPs are
the most used DeFi applications, with the majority of them being deployed on
Ethereum [29]. Deposited funds are pooled and lent on-demand to borrowers,
only if they possess enough collateral (i.e. only if their account is overcollater-
ized). As blockchains typically do not provide strong identities, but pseudonyms
[12], users’ actions are diﬃcult to be regulated under a jurisdiction, which makes
collateralization the main protection mechanism against adversarial behaviours
[27]: an agent can only borrow a quantity of tokens worth less than the amount
of collateral they deposited. This mechanism and others (e.g. interest rates) is
in place in order to incentivize borrowers to repay their loans.

We now recall details of the lending pools model in [6]. The basic components
of the model are agents and cryptoassets. LP agents are the rational entities
taking part in the protocol. Contrarily, LP cryptoassets are token types, each
representing a diﬀerent virtual currency. The model distinguishes two classes
of token types: free tokens and minted tokens, denoted respectively by the sets
Tf = {τi}i∈[1..k] and Tm = {τ (cid:48)
i }i∈[1..k], where k is the number of cryptocurrencies
available on the pool. The diﬀerence between these classes of token types is that
free tokens have a value established by external markets, whereas minted tokens
are assets coined by the protocol, hence holding value only in a speciﬁc LP
environment. In other words, minted tokens are loyalty credits held by the agents
actively joining the protocol. In fact, minted tokens are granted by the protocol
to the agents in return for free tokens, hence each minted token τ (cid:48) corresponds
to a free token τ , also called its underlying token. We denote by T the set of all
token types, i.e. T = Tf ∪ Tm.

Given agents and assets, the LP model yields as a transition system where

each state Γ is of the form Γ = σ | π | p:

1. The wallets function σ : A → (T → R+

0 ) stores each agent’s balance of
tokens. For instance, the wallet of an agent A is expressed by the partial
function σA, and the balance of its τ -typed tokens by σA(τ ).

2. The pool component π is a triple (πf , πl, πm). It is composed by three partial
0 storing the amount of free tokens deposited in the
0 ) memorising the loans each agent owes to the pool
0 ) keeping track of the minted tokens (also called

functions: πf : Tf → R+
pool, πl : A → (Tf → R+
and πm : Tf → (Tm × R+
the collateral or credits) purchased from the pool.

3. The price function p : dom(πf ) → R+

0 stores the price of each free token

available in the pool.

Given a partial map f , we denote by f {v/x} the point-wise update of f at
the point x to the value v. In order to add and remove tokens in the functions
0 → R+
deﬁned above, a partial binary operation ◦ : R+
0 × R+
0 , such as addition,
is extended to them. Given a partial map f : T → R+
0 , a token type τ ∈ T and

3

a value v ∈ R+

0 , the partial map f ◦ v : τ is deﬁned as

f ◦ v : τ =

(cid:40)

f {f (τ ) ◦ v/τ } if τ ∈ dom(f ) and f (τ ) ◦ v is deﬁned
f {v/τ } if τ /∈ dom(f )

In order to describe the model evolution, some additional deﬁnitions shall be
given. The following LP components may rely on the whole state Γ , or some of
its components. This dependency is indicated by the means of subscripts. For
instance, writing FX means that F depends on the X component of the state.
Γ deﬁne, respectively, value of tokens lent to a given

The functions V l

Γ and V m

agent, and the value of minted tokens owned by a given agent:

V l
Γ (A) =

(cid:88)

τ ∈Tf

(πl(A))(τ ) · p(τ )

V m
Γ (A) =

(cid:88)

τ (cid:48)∈Tm

σA(τ (cid:48)) · ERπ(τ (cid:48), τ ) · p(τ )

The collateralization of an agent A is deﬁned as CΓ (A) = V m

where ERπ(τ (cid:48), τ ) is the exchange rate of minted tokens (see Section 3.1 of [6]).
Γ (A). This
is an essential indicator of agents’ lending safety: in fact, a collateralization below
a given threshold (Cmin) entails an agent to be liquidated and hence to incur in
a ﬁnancial loss, as detailed later.

Γ (A)/V l

The behaviour of agents interacting with a lending pool is formalized as a set
of rewriting rules, which deﬁne transitions between states. Such transitions are
rA(zn)
−−−−→ Γ (cid:48), where Γ is the starting state, Γ (cid:48) is the target state, and
written as Γ
rA(zn) is the action (ﬁred by A) which triggers the state transition. Actions have
the form rA(zn), where r is the action name, and zn is an n-tuple of parameters.
The main actions of lending pools are informally summarised in Table 1. Since
the focus in this paper is on liquidations as one of the key incentive mechanisms,
we will provide the details for such action only. Figure 1 provides a formal
description of the rule. The essential preconditions to understand the rule are

4 , 8 , 9 , 10 and 11 .

1 τ (cid:48) ∈ Tm
4 v(cid:48) = v · p(ˆτ )
7 π(cid:48)

p(τ ) · rliq
l = πl{πl (B ) − v : ˆτ /B }

2 σA(ˆτ ) ≥ v
5 σB (τ (cid:48)) ≥ v(cid:48)
8 σ(cid:48)

A = σA − v : ˆτ + v(cid:48) : τ (cid:48)

3 πl(B )(ˆτ ) · Maxliq ≥ v
6 π(cid:48)
9 σ(cid:48)

f = πf + v : ˆτ
B = σB − v(cid:48) : τ (cid:48)

10 Cσ|π|p(B ) < Cmin

11 Cσ(cid:48)|π(cid:48)|p(B ) ≤ Cmin

σ | π | p

LiqA(B,v:ˆτ ,τ (cid:48))
−−−−−−−−−→ σ{σ(cid:48)

A/A}{σ(cid:48)

B /B } | (π(cid:48)

f , π(cid:48)

l, πm) | p

Fig. 1: The rule for liquidation.

3 The amount of repayable loan is limited by a percentage factor Maxliq, as

done in Aave [11] and Compound [28].

4

DepA(v : τ )

RdmA(v : τ (cid:48))

A deposits v free-tokens of type τ from its wallet to the pool. Subse-
quently, the pool coins v(cid:48) units of τ (cid:48), with v(cid:48) computed so to incen-
tivize deposits only if the LP is lacking free tokens.
A redeems v units of the minted token τ (cid:48), as long as A’s collateraliza-
tion is greater than a threshold (Cmin) and LP holds enough tokens
of type τ (cid:48).
A borrows v units of a free token τ , assuming it has enough collateral.
A repays v units of its loan in the free token τ to the LP.

BorA(v : τ )
RepA(v : τ )
LiqA(B , v : ˆτ , τ (cid:48)) A (liquidator) liquidates a variable amount of B ’s (borrower’s)
minted tokens τ (cid:48), by paying v units of free tokens ˆτ . Notably, ˆτ ∈ Tf
is in general diﬀerent from τ , the underlying token of τ (cid:48) ∈ Tm. This
action can be executed only if the B ’s collateralization is below Cmin,
meaning B is undercollaterized.
The LP contract accrues interest on the existing loans. This disin-
centivizes borrowers from postponing their loans repayment.
Token prices are updated according to a given price evolution model.

Price

Int

Table 1: Summary of some of the lending pools actions from [6].

4

computes the reward for the liquidating agent. This is based on the liquidated
amount v and the reward factor rliq. The idea is that A, by repaying part
of B ’s loan, is reducing the likelihood of the protocol to become illiquid.
This behaviour is incentivized by the platform by setting the aforementioned
reward to a value strictly higher than 1. A common value for rliq is 1.1.

8 , 9 update the involved agents’ wallets, A repays v units of B ’s loan in ˆτ and is

compensated with v(cid:48) units of τ (cid:48)

10 ensures that the rule is executable only if B ’s collateralization is less than
Cmin, which is often set to 1.5. This rule is the reason why agents’ collater-
alization should be at least Cmin, so to avert the risk of being liquidated and
incurring in the loss of the liquidation reward rliq.

11 prevents A from seizing a higher collateral amount than the one required for

B to be considered safe (i.e. CΓ (B ) ≥ Cmin).

Figure 2 illustrates the transition system for a simple running example, where
three liquidate actions are executed. The ﬁgure shows six possible traces all orig-
inating from Γ0 and having Γ3,1 as ﬁnal state. Each state in the ﬁgure is deﬁned
by a row in Table 2. Additionally, transitions, namely Liq actions performed by
D, are indicated by diﬀerent colours depending on the liquidated borrower in
both the transition system and the table. Notably, assuming Cmin = 1.5 and
rliq = 1.1, all borrowers in Γ0, A, B and C , are undercollaterized. Speciﬁcally, A
is marginally undercollaterized since CΓ0 (A) = 1.25 > 1.1 = rliq, while B and C
are strongly undercollaterized, being both CΓ0 (B) and CΓ0(C) below 1.1. This
allows D to seize the entire B and C (cid:48)s collateral, as evident from Γ3,1 in Table 2.
Contrarily A’s collateralization is restored to Cmin.

5

Fig. 2: Example transition system.

LiqD (B,91:τ1,τ (cid:48)
0)
−−−−−−−−−−−→ Γ1,2. Agent D repays
As an example, consider transition Γ0
91 units of τ1, seizing 91 · rliq ≈ 100 units of τ (cid:48)
0 from agent B . This also aﬀects
π, in a way that the funds in τ1 are incremented by 91 units, as illustrated
by πf (τ1), while B ’s loan is decremented by 91 units, as shown by πl(B )(τ1).
Contrarily, πm is not modiﬁed by the transaction, as the 100 units of minted
tokens τ (cid:48)

0 are simply transferred from B ’s wallet to D’s one.

(cid:17)

t + σWt

µ − σ2
2

Stock Market Price Modelling
We use the geometric Brownian mo-
tion (GBM) to deﬁne a predictive
model for price evolution based on
past stock market trends. A GBM
is a continuous-time stochastic pro-
(cid:104)(cid:16)
(cid:105)
cess Pt = P0·exp
.
The two constants µ and σ are re-
spectively called drift and volatility,
whereas Wt is a random variable fol-
lowing a Weiner process, i.e. a process
dt satisfying the following
Wt = (cid:15)
properties: (i) (cid:15) ∼ N (0, 1) and (ii) for
any given pair (t0, t(cid:48)
0), Wt0 and Wt(cid:48)
are independent. In other words, a Wt
is the component yielding the stochas-
tic behaviour of a GBM. The geometric Brownian motion as a whole can be
t
viewed as the harmonic result of its two components [20]: (i) the drift
and (ii) the volatility σWt. The eﬀects of the two components on the resulting

Fig. 3: GBM components.

µ − σ2
2

√

(cid:16)

(cid:17)

0

6

πl
A B C
τ1 τ1

Γ

πf

σA

σB

σC

σD

CΓ

τ1

τ1

τ1

τ (cid:48)
0

τ (cid:48)
0

τ1 τ1 τ (cid:48)
τ1
0
0 195 80 100 125 80 100 100 100 125 100 500

τ (cid:48)
τ (cid:48)
1 A B C
0
Γ i
0 500 1.25 1 0.8
Γ1,1 245 30 100 125 80 45 100 100 125 100 450 55 500 1.5 1 0.8
Γ1,2 286 80 9 125 80 100 100 0 125 100 410 100 500 1.25 0 0.8
Γ1,3 286 80 100 34 80 100 100 100 125 0 410 100 500 1.25 1 0
Γ2,1 336 30 9 125 80 45 100 0 125 100 359 155 500 1.5 0 0.8
Γ2,2 336 30 100 34 80 45 100 100 125 0 359 155 500 1.5 1 0
Γ2,3 377 80 9 34 80 100 100 0 125 0 318 200 500 1.25 0 0
Γ3,1 427 30 9 34 80 45 100 0 125 0 268 255 500 1.5 0 0
Table 2: States of the transition system in Figure 2. For simplicity, the price
function p is assumed to be constant such that p(τ0) = p(τ1) = 1 in every state.
The values of the LP parameters are Cmin = 1.5, rliq = 1.1 and Maxliq = 1.

process is shown in Figure 3. The drift component deﬁnes the trend of the re-
sulting process, whereas the volatility component is a measure of the randomly
sampled shocks. Intuitively, this signiﬁes that negative values for µ yield to a
downward prediction trend, whereas positive ones to a growth. Oppositely, the
higher the σ is, the more signiﬁcantly the prices predictions change. Ususall, µ
and σ are estimated based on the daily log returns of the targeted stock mar-
ket [17,20]. Given the closing prices of two consecutive trading days C1 and C2,
the log return w.r.t. the second trading day is deﬁned as ln(C2) − ln(C1).

3 An LP Simulator for Liquidating Agents

We now lay the foundations for tackling a signiﬁcant research problem for LPs:
ﬁnding optimal Cmin and rliq parameters. This is achieved by instantiating the
LP simulator to conduct statistical analyses of the model. The simulator com-
prises: the Maude speciﬁcation of LPs [26]; a strategy for automating the be-
haviour of rational liquidators (Section 3.1); and a price evolution model for the
three most widely employed cryptocurrencies (Section 3.2).

3.1 A Fully-automated Liquidating Strategy

This section introduces a liquidating strategy causing the LP protocol to possibly
reach unsafe states, where loans are not guaranteed to be repaid. We ﬁrst give an
intuitive understanding of aggressive liquidating behaviours, and then describe
the proposed liquidating strategy.

The impact of liquidations on collateralization Liquidate actions involve
two agents: a liquidator, i.e. as an agent with enough tokens to ﬁre liquidate
actions, and a borrower with a collateralization below the threshold Cmin.

7

Liquidators have a fundamental role in the ﬁnancial safety of LPs, as they
supply free tokens whenever the pool is lacking them. On the other hand, ex-
cessively zealous liquidators could be harmful to the system, since they could
disincentivize undercollaterized borrowers to repay their loans. This is exem-
pliﬁed in Figure 4, where all the liquidating scenarios are outlined. The ﬁgure
illustrates the agents’ collateralization, detailing the outcomes of liquidate ac-
tions in every possible (non-trivial) state. The scenarios are also captured by the
running example in Figure 2.

Firstly, the three dashed lines in the ﬁgure
correspond to the liquidation parameters spe-
ciﬁc to the instantiated pool. Their labels rep-
resent the respective line slopes. The line la-
belled 1 depicts the scenarios where the collat-
eral value equals the loan value. Consequently,
it can be intended as the loan repayment in-
centivizing threshold, i.e. the collateralization
value below which borrowing agents should be
considered to be disincentivized in repaying
their loans as their outstanding loan debt ex-
ceeds their collateral in value. These residual
loans are also called non-recoverable.

Fig. 4: Liquidation scenarios

Additionally, the three points indicate the
initial collateralization of three liquidated bor-
rowers. Each liquidation action is illustrated
by a solid line drawn from CΓ (I ) to CΓ (cid:48)(I ) for I ∈ {A, B , C }. Liquidations
entail a decrease in the liquidated user’s collateralization by a linear factor pro-
portional to rliq and ultimately determined by the liquidator. Note that the
liquidation actions described in the ﬁgure follow the semantics of the liquidate
action, as the resulting loan value must be greater than zero and the ﬁnal col-
lateralization must be at most Cmin.

It is worth observing that the liquidations in the ﬁgure can be achieved by
applying only one action if and only if two conditions hold. Firstly, the liquida-
tor invests enough liquidity to seize the entire seizable collateral. Secondly, the
liquidated borrower does not diversify the type of the loan. If either the ﬁrst
condition or the second does not hold, then the liquidations illustrated in the
ﬁgure can be achieved uniquely by performing several liquidate actions on the
borrower. This is frequently the case in the major LP implementations (Com-
pound and Aave). In fact, these prevent the whole seizable collateral amount to
be atomically liquidated, by setting Maxliq which is variable in Compound [28]
and constant (equals to 0.5) in Aave [11]. Our model includes the parameter
Maxliq as a constant following Aave, but it could be extended to a variable one.

The proposed liquidating strategy As shown in Figure 4, the collateraliza-
tion of A is re-established, whereas liquidations cause B and C to lose their entire
collateral, disincentivizing them from repaying the loans. In light of this fact, a

8

relevant research question is whether there exists an optimal pair (Cmin, rliq)
such that the number of non-recoverable loans is minimal.

It is worth to observe that, ideally, the closer rliq is to 1, the more the col-
lateralization of a loan can drop and still be recoverable by liquidation. Thus
a rliq marginally greater than 1 is optimal in our model, since it would lead
to the strongest recovery of user collateralization during liquidation. However,
actual platforms deviate from such ideally optimal rliq as the costs incurred by
liquidators to execute actions have to be compensated by a suitable discount
rliq on the purchase of minted tokens from the liquidated borrowers. In order to
investigate the eﬀects of choices rliq and Cmin, we propose a strategy attempting
to reproduce a rational behaviour for liquidators. The employed strategy sim-
ulates a rational behaviour where liquidators repay the entire borrowers’ loan.
The rationality of the behaviour we are going to study is based on the following
key observations:

1. Fast liquidations have the advantage of restoring liquidity whenever the bor-
rowers have collateralization slightly above rliq (see agent A in Figure 4).
2. On the other hand, fast liquidations may generate non-recoverable loans
whenever the borrowers have collateralization slightly below rliq (as for
agents B and C in Figure 4).

3. Price ﬂuctuations can change the scenario between (1) and (2). For example,
it could raise the collateralization of borrowers to rliq allowing the liquidators
to eﬀectively restore the agents’ collateralization to Cmin, so that it would
be convenient to delay liquidations.

The strategy used to implement the liquidator behaviour selects the liquidate
input parameters, so to maximise the value of seized collateral. Speciﬁcally, given
a liquidator L, the strategy computes the remaining four parameters of Liq: the
borrower’s agent identiﬁer (Br ), the amount of loan to be repaid (vr), the type
of the asset to be repaid (ˆτr) and the one of the asset to be seized (τ (cid:48)
r). Because
of space constraints, we refer to [25] for a detailed account of the strategy.

3.2 Price Modelling

This section describes the price model employed to predict cryptocurrencies
prices, based on historical data. We start with an overview of the price model
to motivate its adoption. Afterwards, we present the three model instantiation
scenarios used in the subsequent statistical analysis.

Predicting cryptocurrency prices The cryptoassets prices are derived from a
statistical model representative of the past price behaviour based on the GBM.
A GBM is instantiated by two parameters drift and volatility which can be
estimated from the currency historical data. This makes the GBM the ideal
stochastic process for modelling stock prices based on their past evolution [17].
Aiming at stress-testing the LP protocol and inspired by [19], we have de-
signed three diﬀerent scenarios, each comprising a pair of price trends. In prac-
tice, each scenario simulates the evolution of prices of a given collateral and loan

9

assets, in a way that respectively when the former declines, the latter increases.
In fact, assuming that each borrower B0 owes a loan in only one asset type τl
and similarly holds collateral of only one asset type τm, such a model for prices
necessarily causes some borrowers to become undercollaterized, as shown in (1).

CΓ (B0 ) =

V m
Γ (B0 )
V l
Γ (B0 )

p(τm)→0 p(τl)→V
−−−−−−−−−−−−→ 0, with V (cid:29) 0

(1)

More precisely, prices modelling is achieved by opportunely gathering the
data used to estimate the parameters (drift and volatility) for generating a
growing, decreasing or relatively constant GBM process. In the literature, daily
closing prices of stock markets are used since their samples generally tend to
be normal, which allows to employ the GBM generic formula. Ultimately, since
prices’ predictions pairs should variate in a way that they simultaneously display
an opposite behaviour, it is necessary to correlate them, as shown in [20].

Prices model instantiation Given a collateral asset τm and a loan asset τl,
the three prices evolution pairs are shown in Table 3.

τm

Scenario

τl
ETH-WBTC ETH WBTC Declining Increasing
ETH-USDC ETH USDC Declining Constant
USDC-WBTC USDC WBTC Constant Increasing
Table 3: The three implemented prices evolution scenarios

p(τm)

p(τl)

The choice of the cryptocurrencies in the table is motivated by their closing
price historical evolution in three diﬀerent trimesters (shown in the Appendix,
Figure 9). By using those samples, it is possible to simulate the desired trends
indicated in the columns named p(τm) and p(τl). This is achieved by estimating
the expected price returns (µ) and the price volatility (σ), which are utilised
as the drift and volatility instantiating the resulting GBM. The two parameters
are estimated according to [20]. The drift µ is simply obtained by computing
the mean over the closing prices. Contrarily, σ is calculated as σ = s√
, where
T
√
T = 91
T is the
annualisation constant.

365 , s indicates the standard deviation of the log returns and

The selected sampling time span (91 days, i.e. a trimester) is motivated by
the fact that cryptoassets are subject to sudden ﬂuctuations and, even though
short samples might not be representative of the entire population, this is a
consolidated practice [20]. Besides, the resulting price predictions span over the
same time frames, as each price model instantiation produces 91 prices predic-
tions, as illustrated in Section 3.2. Notably, the selected cryptocurrencies (ETH,
USDC and WBTC) were among the four-most-utilised assets on the Compound
market [16] at the moment of writing. Lastly, the selected closing price samples
are suitable, since the derived log returns distributions tend to be normal.

10

Figure 5 shows an estimation of
the GBM parameters ( obtained from
the close prices in the Appendix,
Figure 9), by the previously dis-
cussed methodology. The parameters
are then utilised to instantiate the six
GBM processes (each for price evolution), simulating the scenarios in Table 3.
Finally, the asset initial price P0 is a constant set to the actual price in USD of
each asset on May 5th, 2021.

Currency
ETH
USDC -7.84E-5 0.005
WBTC 0.012 0.094 57260.0
Fig. 5: GBM parameters

σ P0 (usd)
0.12 3269.08

µ
-0.012

0.99

Expected price predictions We have used the MultiVeStA statistical ana-
lyzer to examine the prices predictions generated by the GBM in each of the
scenarios explained in Section 3.2. The details are provided in the appendix (
Figure 10), and show the normalised trend of the price scenarios, discussed in
Section 3.2. The ﬁgures in the appendix show that the expected behaviour, ex-
pressed in Table 3 is obtained in all the considered scenarios. Additionally, in
Figures 10a and 10c prices predictions are strongly correlated as it is expected.
In fact, the GBMs pairs were instantiated as negatively correlated processes ac-
cordingly to [20], Section 14.5. Contrarily, Figure 10b shows less correlated prices
predictions. This is probably due to the fact that the computation was bounded
to execute maximum 5, 010 simulations. In fact, from experimental evidence, the
approximation seem to converge at a very slow speed.

4 Statistical Analysis of Liquidation Scenarios

We have experimented with the LP model simulator described in Section 3 in
order to answer the question: given a speciﬁc scenario, what is the impact of the
pair of LP parameters Cmin and rliq?

We have considered scenarios generated by four factors. First, the liquidator
logic deﬁned in Section 3.1, determines immediate and quick liquidations, caus-
ing a signiﬁcant ﬁnancial loss to the liquidated party. Secondly, the agent to be
liquidated is selected so to maximise the value of seized collateral, which is the
most beneﬁcial and rational option for liquidators. Thirdly, liquidators are as-
sumed to hold an unbounded amount of resources, which allows them to repeat
liquidations as long as there exists an undercollaterized agent. Finally, cryp-
toasset prices evolve following a trend aimed at causing borrowers to suddenly
become undercollaterized.

We recall that the eﬀect of the pair
Cmin and rliq we are looking for is one
that minimises the number of under-
collaterized borrowers. We have ex-
plored the space of choices for the pair
by executing MultiVeStA experiments
for all Cmin ranging, with step 0.1,
from 1.2 to 1.5 and rliq ranging from

11

Fig. 6: Distribution of collateralization
in initial conﬁgurations.

1.1 to Cmin − 0.1. These ranges were
selected based on the values typically
assigned to these parameters in the
actual implementations: Cmin = 1.5
and rliq = 1.1 [6].

On these premises, we ﬁrst illus-
trate the LP model initial conﬁgura-
tions used for the subsequent exper-
imentation. Next, we present the re-
sults of the performed experiments.

Initial conﬁgurations The initial conﬁgurations were designed to test the re-
sistance of diﬀerent borrowers’ collateralization to becoming unrecoverable, when
subject to repeated liquidations. Since the intention is to observe the model be-
haviour under three price models (Section 3.2), three diﬀerent initial conﬁgura-
tions are produced, each having a diﬀerent price for collateral and loan assets.
All the conﬁgurations share the same amount and types of agents. Speciﬁcally,
a generic initial conﬁguration comprises ten borrowers having collateralization
ranging from 1.0 to 2.0, with step 0.1. This is depicted in Figure 6, where bi
represents the generic borrower Bi ’s collateralization (CΓ i(Bi )), for Γ i initial
conﬁguration. Additionally, an arbitrary number of liquidators (three) are added
to each conﬁguration.

Experimental results The results discussed here were obtained by performing
MultiVeStA experiments of the LP simulator. Speciﬁcally, the inputs to the tool
are: the LP simulator discussed in Section 3, a MultiQuaTEx property to express
the desired measure to be estimated (the expected collateralization value at each
liquidation round for each borrower), and a pair of statistical parameters deﬁning
the conﬁdence interval (CI) of interest: the maximum conﬁdence interval width δ
and the conﬁdence level α = 0.05 which provides 95% statistical conﬁdence that
the estimated value is in the conﬁdence interval. For each property, MultiVeStA
will generate enough simulation to meet the required CI.

Figure 7 shows the per-borrower collateralization for varying liquidation
rounds and choices of Cmin and rliq in the eth-wbtc prices scenario, with a ﬁxed
rliq = 1.1. In this scenario, one can see that undercollaterized agents have a very
diﬀerent behaviour than overcollaterized ones. Speciﬁcally, the undercollaterized
agents undergo very serious liquidations, which often lead them to unrecover-
ability, as their collateralization converges to a constant below Cmin. Contrarily,
overcollaterized agents do not incur in severe ﬁnancial losses.

Additionally, our experiments (presented in detail in the Appendix, Fig-
ures 11a to 11c) show that the Cmin and rliq having the least negative eﬀects on
undercollaterized balances is Cmin = 1.5, rliq = 1.1. This is also quantitatively
conﬁrmed by the numbers in Figure 8. Intuitively, this is a consequence of the
fact that when Cmin = 1.5 and rliq = 1.1 the collateralization of each agent b1
to b5 is higher on average than for any other Cmin and rliq pairs. As a result, the

12

Fig. 7: Per-borrower collateralization (b1 to b10) in the ETH-WBTC prices sce-
nario, for varying liquidation rounds and CMin-Rliq choices.

number of unrecoverable loans, the ones held by agents whose collateralization
is below 1, is minimised.

Price scenario

Finally, our experiments (pre-
sented in detail in the Appendix,
Figures 12a to 12c) show that
overcollaterized borrowers could
still incur in liquidations, in case
the prices abruptly change as in
the prices scenario ETH-WBTC.
Diﬀerently, in the other scenarios,
employing the stable coin USDC, overcollaterized agents are, on average, rarely
liquidated.

(CMin-Rliq)
(1.5-1.1) (1.4-1.1) (1.3-1.1)
0.6518
0.6583
0.7739

ETH-WBTC 0.7115
ETH-USDC 0.7106
USDC-WBTC 0.8381

Fig. 8: Minimum average CΓ (B1 )

0.6137
0.6231
0.7299

5 Related Works

Veriﬁcation of DeFi applications is a fairly recent research area where several
techniques have been applied. We focus our discussion on works devoted to
formal modelling and reasoning of DeFi applications, which typically follow two
parallel directions: veriﬁcation of the model properties [9,5,2,32], and statistical
analysis of the model variables [4,14,22,13,19].

The work in [9] is one of the ﬁrst addressing formal veriﬁcation of smart con-
tract properties. Their study combines a game-theoretic approach with proba-
bilistic model checking, ultimately validating their results with the model checker
PRISM [23]. Another example of research in this direction is Tolmach et al. [32]

13

which developed the ﬁrst multi-pools model and veriﬁed invariant properties
initially formulated by [8]. Finally, [2] proposed a very relevant study on smart
contracts, by modelling not only the contracts and the agents’ behaviour but
also the underlying blockchain using the BIP framework [7] and statistical model
checking (as we do). The work in [2] employs statistical methods too. However,
in their case, statistics is useful to estimate unknown variables of the analysed
model, hence deriving desirable properties. The quantitative variables estimation
is also achieved by performing Monte-Carlo simulations, with a more closely look
at the behaviours displayed by agents [14]. In fact, most of this research in this
line [22,13,4] bases its results on Agent-Based Simulations, which is employed
to stress test the actual smart contracts implementations being executed on
a “custom-built Ethereum virtual machine that is written in C++” [22]. This
research direction, although suggesting promising results, is not ultimately sup-
ported by strong statistical guarantees, since the number of Monte Carlo simu-
lations performed to run their analyses is arbitrarily chosen and not backed by a
formal justiﬁcation [22,19]. Nonetheless, a work relevant to ours is the analysis
conducted in [22] on the Compound protocol scalability in face of high stock mar-
ket prices volatility. Similarly to our work, their analysis models the prices by the
use of the GBM. However, their data collection and analysis methodologies are
very diﬀerent. In fact, they do not sample entire historical periods as illustrated
in Section 3.2 for estimating prices volatility. Contrarily, they simply evaluate
the minimum and maximum volatility values ever observed and instantiate the
GBM for diﬀerent prices volatilities so to simulate several market environments.
Finally, the prices model in Section 3.2 has been mostly inspired by [19]. Sim-
ilarly to [22], they stress-test an LP model, not a speciﬁc implementation, by
using the same price model explained in Section 3.2. Nonetheless, a remarkable
diﬀerence is that they instantiate the predictions of the collateral and loan assets
pairs with three diﬀerent correlation parameters. We assume instead predictions
of prices pairs to be strongly negatively correlated (ρ = −1), in order to simulate
the worst-case scenario. Additionally, we reproduced [19]’s environment by using
historical data of three diﬀerent real cryptoassets on the market.

6 Conclusions

We have presented a tool for the analysis of lending pools, an archetypal DeFi
application. Overall the tool consists of (i) an accurate LP simulator based on
the model of [6] which can support both the study of vulnerabilities and attacks
of LPs; (ii) a model checker capable of doing simple reachability analysis and
verifying whether LTL properties hold of speciﬁc conﬁgurations; and (iii) a tool
for statistical analysis backed by the statistical model checker MultiVeStA. In
this paper, we have focused on (iii) and we have shown how to use it to optimize
the LP parameters under speciﬁc scenarios. Details on (i) and (ii) as well as fur-
ther examples, including reproduction of price oracle attacks using reachability
analysis and LTL model checking are available in [25].

14

Future research supported by the developed tool could include the formal-
ization of further attacks and properties of the model. Speciﬁcally, one could
study resistance to illiquidity, as suggested by [22], or the behaviour of multi-
pools conﬁgurations, each oﬀering diﬀerent market opportunities to agents, as
proposed by [35] and partially developed in [32].

Acknowledgements Massimo Bartoletti is partially supported by Conv. Fon-
dazione di Sardegna & Atenei Sardi project F75F21001220007 ASTRID. James
Hsin-yu Chiang is supported by the PhD School of DTU Compute. Alberto Lluch
Lafuente is partially supported by the EU H2020-SU-ICT-03-2018 Project No.
830929 CyberSec4Europe (cybersec4europe.eu). Andrea Vandin is partially sup-
ported by the DFF project REDUCTO 9040-00224B.

References

1. Aave, S.: Aave markets - webpage. https://aave.com/ (2021)
2. Abdellatif, T., Brousmiche, K.L.: Formal veriﬁcation of smart contracts based on
users and blockchain behaviors models. In: 2018 9th IFIP International Conference
on New Technologies, Mobility and Security (NTMS). pp. 1–5. IEEE (2018)

3. Agha, G., Palmskog, K.: A survey of statistical model checking. ACM Transactions

on Modeling and Computer Simulation (TOMACS) 28(1), 1–39 (2018)

4. Angeris, G., Kao, H.T., Chiang, R., Noyes, C., Chitra, T.: An
(2021).

of Uniswap markets. Cryptoeconomic

Systems

(1)

analysis
https://doi.org/10.21428/58320208.c9738e64

5. Bai, X., Cheng, Z., Duan, Z., Hu, K.: Formal modeling and veriﬁcation of smart
contracts. In: Proceedings of the 2018 7th International Conference on Software
and Computer Applications. pp. 322–326 (2018)

6. Bartoletti, M., Chiang, J.H., Lluch-Lafuente, A.: SoK: Lending pools in decentral-
ized ﬁnance. In: Financial Cryptography Workshops. LNCS, vol. 12676, pp. 553–
578. Springer (2021). https://doi.org/10.1007/978-3-662-63958-0 40, the Lending
Pools model used in this paper is taken from a preliminary version of the paper,
published as arXiv preprint 2012.13230.

7. Basu, A., Bensalem, B., Bozga, M., Combaz, J., Jaber, M., Nguyen, T.H., Sifakis,
J.: Rigorous component-based system design using the BIP framework. IEEE soft-
ware 28(3), 41–48 (2011)

8. Bernardi, T., Dor, N., Fedotov, A., Grossman, S., Immerman, N., Jackson, D.,
Nutz, A., Oppenheim, L., Pistiner, O., Rinetzky, N., et al.: Wip: Finding bugs
automatically in smart contracts with parameterized invariants. https://groups.
csail.mit.edu/sdg/pubs/2020/sbc2020.pdf (2020)

9. Bigi, G., Bracciali, A., Meacci, G., Tuosto, E.: Validation of decentralised smart
contracts through game theory and formal methods. In: Programming Languages
with Applications to Biology and Security, pp. 142–161. Springer (2015)

10. Boado, E.: Aave whitepaper. https://github.com/aave/protocol-v2/blob/
master/aave-v2-whitepaper.pdf (2020), accessed on 26.02.2021 - commit
aeded1520c667e59a564cf69f33a6e489b2fe489
Aave,

11. Boado,

protocol

liquidate
https://github.com/aave/aave-protocol/blob/

maximum

threshold.
1ff8418eb5c73ce233ac44bfb7541d07828b273f/contracts/lendingpool/
LendingPoolLiquidationManager.sol#L181 (2021)

Aave

E.,

S.:

15

12. Buterin, V.: Ethereum whitepaper. https://ethereum.org/en/whitepaper/

(2013), accessed on 24.02.2021

13. Chitra, T., Evans, A.: Why stake when you can borrow? CoRR abs/2006.11156

(2020), https://arxiv.org/abs/2006.11156

14. Chitra, T., Quaintance, M., Haber, S., Martino, W.: Agent-based simulations of
blockchain protocols illustrated via Kadena’s chainweb. In: 2019 IEEE European
Symposium on Security and Privacy Workshops (EuroS&PW). pp. 386–395. IEEE
(2019)

15. Clavel, M., Dur´an, F., Eker, S., Escobar, S., Lincoln, P., Martı-Oliet, N., Meseguer,
J., Rubio, R., Talcott, C.: Maude manual (version 3.0). Tech. rep., Technical report,
SRI International Computer Science Laboratory (2020)

16. Compound Labs, I.: Compound markets - webpage. https://compound.finance/

markets (2021)

17. Dmouj, A.: Stock price modelling: Theory and practice. Masters Degree Thesis,

Vrije Universiteit (2006)

18. Entriken, W.:

Introduction to smart contracts. https://ethereum.org/en/

developers/docs/smart-contracts/ (2020), accessed on 27.02.2021

19. Gudgeon, L., Perez, D., Harz, D., Livshits, B., Gervais, A.: The decentralized ﬁnan-
cial crisis. In: 2020 Crypto Valley Conference on Blockchain Technology (CVCBT).
pp. 1–15. IEEE (2020)

20. Hull, J.C.: Options futures and other derivatives. Pearson Education India (2003)
attack. https://news.bitcoin.com/
oracle
21. Jeﬀrey, G.: Compound price

100-million-liquidated-on-defi-protocol-compound-following-oracle-exploit/
(2020)

22. Kao, H.T., Chitra, T., Chiang, R., Morrow, J.: An analysis of the market risk
to participants in the Compound protocol. In: Third International Symposium on
Foundations and Applications of Blockchains (2020)

23. Kwiatkowska, M., Norman, G., Parker, D.: PRISM 4.0: Veriﬁcation of probabilistic
real-time systems. In: Gopalakrishnan, G., Qadeer, S. (eds.) Proc. 23rd Interna-
tional Conference on Computer Aided Veriﬁcation (CAV’11). LNCS, vol. 6806, pp.
585–591. Springer (2011)

24. Leshner, R., Hayes, G.: Compound: The money market protocol. https://

compound.finance/documents/Compound.Whitepaper.v04.pdf (2019)

25. Mirelli, M.: A formal veriﬁcation tool

the-
sis, Aalto University. School of Science (2021), http://urn.fi/URN:NBN:fi:
aalto-202108298504
26. Mirelli, M.: A Maude

for Lending Pools. Master’s

simulator
(2021),

for Lending Pools.
on

accessed

22.06.2022

https://github.
commit

-

com/MMirelli/maude-lp
2dae39b035938f5f9791040c53121fb473b4b7dd

27. Perez, D., Werner, S.M., Xu, J., Livshits, B.: Liquidations: DeFi on a knife-edge.
In: Financial Cryptography and Data Security. LNCS, vol. 12675, pp. 457–476.
Springer (2021). https://doi.org/10.1007/978-3-662-64331-0 24

28. Peterins, E., Flatow, J., Hayes, G., Wolﬀ, M., Greenberg, A.: Compound pro-
tocol maximum liquidate threshold. https://github.com/compound-finance/
compound-protocol/blob/4e99ea3a64ab4f1bdf9c07c7a1bf325db09ab809/
scenario/src/Event/ComptrollerEvent.ts#L170 (2021)

29. Pulse: Deﬁ pulse - webpage. https://defipulse.com (2021), accessed on

07.06.2021

30. Qin, K., Zhou, L., Livshits, B., Gervais, A.: Attacking the DeFi ecosystem with
ﬂash loans for fun and proﬁt. In: Financial Cryptography. LNCS, vol. 12674, pp.
3–32. Springer (2021). https://doi.org/10.1007/978-3-662-64322-8 1

16

31. Sebastio, S., Vandin, A.: Multivesta: Statistical model checking for discrete event

simulators. Tech. rep., IMT Institute for Advanced Studies Lucca (2013)

32. Tolmach, P., Li, Y., Lin, S.W., Liu, Y.: Formal analysis of composable deﬁ proto-

cols. arXiv preprint arXiv:2103.00540 (2021)

33. Vandin, A., Giachini, D., Lamperti, F., Chiaromonte, F.: Automated and dis-
tributed statistical analysis of economic agent-based models. arXiv preprint
arXiv:2102.05405 (2021)

34. Wackerow, P., Rhechler: Decentralized ﬁnance (deﬁ) - webpage. https://

ethereum.org/en/defi/ (2021), accessed on 02.06.2021

35. Werner, S.M., Perez, D., Gudgeon, L., Klages-Mundt, A., Harz, D., Knottenbelt,
W.J.: SoK: Decentralized Finance (DeFi). CoRR abs/2101.08778 (2021), https:
//arxiv.org/abs/2101.08778

36. Zhou, L., Qin, K., Cully, A., Livshits, B., Gervais, A.: On the just-
In:
IEEE (2021).

in-time discovery of proﬁt-generating transactions
IEEE Symposium on Security and Privacy. pp. 919–936.
https://doi.org/10.1109/SP40001.2021.00113

in DeFi protocols.

17

A Figures

18

(a) 13/01/2018-14/04/2018

(b) 01/01/2020-01/04/2020

(c) 24/11/2020-23/02/2021
Fig. 9: Trimester closing prices, collected from CoinGecko APIs

19

(a)

(b)

(c)
Fig. 10: Prices predictions produced, for each scenario in Table 3, by GBMs
instantiated with the parameters in Figure 5.

20

(a) Scenario: eth-wbtc.

(b) Scenario: eth-usdc.

(c) Scenario: usdc-wbtc.

Fig. 11: Per-borrower collateralization (b1 to b5) in the three prices scenarios,
for varying CMin-rliq choices.

21

(a) Scenario: eth-wbtc.

(b) Scenario: eth-usdc.

(c) Scenario: usdc-wbtc.

Fig. 12: Per-borrower collateralization (b3 to b7) in the three prices scenarios,
for varying CMin-rliq choices.

22

