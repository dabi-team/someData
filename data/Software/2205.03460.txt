2
2
0
2

y
a
M
6

]

O
C

.
t
a
t
s
[

1
v
0
6
4
3
0
.
5
0
2
2
:
v
i
X
r
a

Farrington-Manning in the Extreme Case

William N. Anderson∗

May 6, 2022

Abstract

The Farrington-Manning method is a common method for eval-
uating equivalence and non-inferiority of independent proportions.
in particular SASr PROC
It is implemented in various software,
FREQ, and the Rr function farrington.manning(), which is part of
the DescrTab2 package. The equations for the estimated proportions
can create numerical issues in case both sample proportions equal 1,
and neither of these packages will yield an acceptable solution in this
special case. In this note we demonstrate a closed form solution for
the situation in this and other extreme cases.

We assume that the reader has available the original paper of Farrington
and Manning [1], and we repeat only a minimal amount from the paper.
Some text is quoted verbatim from the paper.

1 The setting

We consider a comparative binomial trial involving two groups of sizes N1, N2
in the predetermined ratio θ = N2/N1, and independent response variables
r1 ∼ Bi(N1, p1) and r2 ∼ Bi(N2, p2). The binomial probabilities p1 and p2
are estimated by ˆp1 = r1/N1, ˆp2 = r2/N2. The true diﬀerence is sT = p1 − p2,
estimated by s = ˆp1 − ˆp2. In the equivalence or non-inferiority setting the
null hypothesis is p1 −p2 = s0, where s0 is a predetermined value, often called
the non-inferiority margin.

∗Carpinteria, California, USA. Email: WNilesAnderson@gmail.com.

LinkedIn:

william-anderson-46384b7

1

 
 
 
 
 
 
The Farrington-Manning method is to compute maximum likelihood es-
timates ˜p1D and ˜p2D for p1 and p2, under the constraint that ˜p1D − ˜p2D = s0.
These estimates will typically be diﬀerent from ˆp1 and ˆp2. The method is de-
scribed in the original paper [1], and in many other places, including section
11.2.3 of Rothmann et al. [6]. This method is implemented in many statisti-
cal software packages, including SASr PROC FREQ, and the Rr function
farrington.manning(), which is part of the DescrTab2 package. 1 2

There is no restriction on the sign of s0, but, of course, s0 must have a
value suitable for the diﬀerence of proportions. Reading between the lines, it
appears that Farrington and Manning had in mind positive s0. In practice,
one can arrange this choice by choosing the groups appropriately. The far-
rington.manning() function allows for negative s0; SAS PROC FREQ does
not.

Then the test statistic is

zD = ˆp1 − ˆp2 − s0.

(1)

For large N, zD is approximately Normally distributed. Under the null

hypothesis, the variance of zD is estimated by:

ˆv0 = ˜p1D ˜q1D/N1 + ˜p2D ˜q2D/N2
= [˜p1D ˜q1D + ˜p2D ˜q2Dθ] /N1

(2)

where ˜p1D and ˜p2D are maximum likelihood estimators for p1 and p2 under
the null hypothesis and ˜q1D = 1 − ˜p1D, ˜q2D = 1 − ˜p2D. The null hypothesis
may then be tested by referring the statistic:

z = (ˆp1 − ˆp2 − s0)/

ˆv0

(3)

to the standard normal distribution.

p

In the general case, the estimates ˜p1D and ˜p2D are obtained by solving a

cubic equation, as will be seen below.

However, this procedure has potential numerical issues when both ˆp1 = 1
and ˆp2 = 1. This situation may seem unlikely in an actual trial, but it can

1The farrington.manning() function was written by Kevin Kunzmann, and the
DescrTab2 package is maintained by Jan Meis. As of the date of this note, Version 2.1.9
of the package, dated January 20, 2022, is the most current.

2Thanks to Jan Meis for many helpful comments relating to the package, and to the

issues described here.

2

occur when one is doing a simulation with assumed probabilities p1 and p2
both close to 1. In this situation the SAS PROC FREQ simply refuses to
compute the risk diﬀerence, and the R function farrington.manning() may
cause an error condition.

2 Computing the maximum likelihood esti-

mators

The estimate ˜p1D is obtained by solving the maximum likelihood equation

ax3 + bx2 + cx + d = 0

(4)

with

a = 1 + θ
b = −[1 + θ + ˆp1 + θ ˆp2 + s0(θ + 2)]
c = s2
0 + s0(2ˆp1 + θ + 1) + ˆp1 + θ ˆp2
d = −ˆp1s0(1 + s0)

Any method for solving a cubic equation could in principle be used to
compute ˜p1D, but one must be careful to choose the root that maximizes the
underlying likelihood function. Some considerations on this point are given
in section 5 below.

In the special case of interest here, both ˆp1 = 1 and ˆp2 = 1. The coef-
ﬁcients of the cubic equation (4) take a simpler form, and the equation can
be factored.

ax3 + bx2 + cx + d = (1 + θ)x3

− [2 + 2θ + s0(θ + 2)]x2
+ [s2
− s0(1 + s0)

0 + s0(3 + θ) + 1 + θ]x

= (x − 1)(x − (1 + s0))((1 + θ)x − s0).

(5)

The cubic has three real roots, and the choices for ˜p1D and ˜p2D are given

in table 9 below.

3

˜p1D
˜p2D

(cid:20)

=

(cid:21)

(cid:20)

1
1 − s0

1 + s0
1

s0/(1 + θ)
−s0θ/(1 + θ)

(cid:21)

(6)

• If s0 > 0, only ˜p1D = 1 and ˜p2D = 1 − s0 give valid proportions for ˜p1D

and ˜p2D.

• If s0 < 0, only ˜p1D = 1 + s0 and ˜p2D = 1 give valid proportions for ˜p1D

and ˜p2D.

An alternative method for ﬁnding the estimates is to note that the like-
lihood function is monotonic increasing in ˜p1D and ˜p2D. Accordingly the
maximum likelihood will be obtained when these two are as large as possi-
ble. That is when one of the ˜piD is 1, and the other is 1 − |s0|.

3 Hypothesis tests and conﬁdence intervals

Using the general variance equation (2), the variance then becomes

ˆv0 =

s0(1 − s0)/N2
−s0(1 + s0)/N1

(

s0 > 0
s0 < 0

(7)

Using this variance and the test statistic of (3) we have for s0 > 0

z = (ˆp1 − ˆp2 − s0)/

ˆv0

= −s0/

s0(1 − s0)/N2

p

= −

N2s0/(1 − s0).
p

Similarly, for s0 < 0

p

z = (ˆp1 − ˆp2 − s0)/

ˆv0

= −s0/

−s0(1 + s0)/N1
p

=

−N1s0/(1 + s0).

p

The two-sided conﬁdence limits for the diﬀerence are obtained by inver-
sion of the two-sided hypothesis test For the general Farrington-Manning

p

4

case the computations require an iterative solution, because there is no sim-
ple formula relating the z-statistic to s0. For the special case here limits are
simply obtained by setting z to the critical values, and solving for s0.

The conﬁdence interval is

−z2
α
N1 + z2
α

,

z2
α
N2 + z2

α (cid:19)

(cid:18)

As a practical matter, if one really had data this extreme, exact methods
would likely be used for evaluating hypothesis tests and computing conﬁdence
limits. The intention here is simply to give reasonable limits that can be used
to let a simulation proceed.

4 Other extreme cases

A number of other extreme cases can be considered in the same manner.
Here we give only minimal details, leaving the rest to the reader.

Suppose ˆp1 = 0 and ˆp2 = 0.

The maximum likelihood equation (4) factors

ax3 + bx2 + cx + d = (1 + θ)x3

− [1 + θ + s0(θ + 2)]x2
+ [s2
0 + s0(θ + 1)]x
− 0

= x(x − s0)((1 + θ)x − (1 + θ + s0)).

(8)

The possibilities for ˜p1D and ˜p2D are given in table (9) below. The ap-

propriate choice depends on the sign of s0.

˜p1D
˜p2D

(cid:20)

(cid:21)

=

0
−s0

(cid:20)

(1 + θ + s0)/(1 + θ)
(1 + θ − s0θ)/(1 + θ)

s0
0

(cid:21)

(9)

• If s0 > 0, only ˜p1D = s0 and ˜p2D = 0 give valid proportions for ˜p1D and

˜p2D.

• If s0 < 0, only ˜p1D = 0 and ˜p2D = −s0 give valid proportions for ˜p1D

and ˜p2D.

5

The remaining computations are highly similar to those above.

Suppose ˆp1 = 0 and ˆp2 = 1. The maximum likelihood equation (4) factors

ax3 + bx2 + cx + d = (1 + θ)x3

− [1 + 2θ + s0(θ + 2)]x2
+ [s2
0 + s0(θ + 1) + θ]x
− 0

= x(x − (1 + s0))((1 + θ)x − (θ + s0)).

(10)

The possibilities for ˜p1D and ˜p2D are given in table (11) below. The

appropriate choice depends on the sign of θ + s0.

˜p1D
˜p2D

=

0
−s0

(θ + s0)/(1 + θ)
(θ − s0θ)/(1 + θ)

1 + s0
1

(cid:20)

(cid:21)

(cid:20)

(cid:21)

(11)

• If θ+s0 > 0, the choice ˜p1D = (θ+s0)/(1+θ) and ˜p2D = (θ−s0θ)/(1+θ)
gives the maximum likelihood estimator. (If additionally s0 < 0, all
three choices give valid proportions, but the other two choices give
minima).

• If θ + s0 = 0, the choice ˜p1D = 0 and ˜p2D = −s0 is a double root, and

gives the maximum.

• If θ + s0 < 0, the choice ˜p1D = 0 and ˜p2D = −s0 gives the maximum.
(The choice ˜p1D = 1 + s0 and ˜p2D = 1 also gives valid proportions, but
this is a minimum.)

The remaining computations proceed as above. The upper conﬁdence
limit for the diﬀerence will be 1; we have not found a simple form for the
lower conﬁdence limit.

Suppose ˆp1 = 1 and ˆp2 = 0. The maximum likelihood equation (4) factors

ax3 + bx2 + cx + d = (1 + θ)x3

− [2 + θ + s0(θ + 2)]x2
+ [s2
0 + s0(θ + 3) + 1]x
− s0(1 + s0)

= (x − 1)(x − s0)((1 + θ)x − (1 + s0)).

6

The possibilities for ˜p1D and ˜p2D are given in table (12) below. The

appropriate choice depends on the sign of 1 − s0θ.

˜p1D
˜p2D

(cid:20)

=

(cid:21)

(cid:20)

s0
0

(1 + s0)/(1 + θ)
(1 − s0θ)/(1 + θ) 1 − s0

1

(cid:21)

(12)

• If 1−s0θ > 0, the choice ˜p1D = (1+s0)/(1+θ) and ˜p2D = (1−s0θ)/(1+θ)
gives the maximum likelihood estimator. (If additionally s0 > 0, all
three choices give valid proportions, but the other two choices give
minima).

• If 1 − s0θ = 0, the choice ˜p1D = s0 and ˜p2D = 0 is a double root, and

gives the maximum.

• If 1 − s0θ < 0, the choice ˜p1D = 0 and ˜p2D = −s0 gives the maximum.
(The choice ˜p1D = 1 and ˜p2D = 1 − s0 also gives valid proportions, but
this is a minimum.)

The remaining computations proceed as above. The lower conﬁdence
limit for the diﬀerence will be -1; we have not found a simple form for the
upper conﬁdence limit.

Suppose s0 = 0. This is in eﬀect a standard superiority test, but there seems
to be no mathematical reason not to compute using the methods above. In
this case the special form of the equation becomes.

ax3 + bx2 + cx + d = (1 + θ)x3

− [1 + θ + ˆp1 + θ ˆp2]x2
+ [ˆp1 + θ ˆp2]x
− 0

= x(x − 1)((1 + θ)x − (ˆp1 + θ ˆp2)).

The desired solution is x = (ˆp1 + θ ˆp2)/(1 + θ) = (r1 + r2)/(N1 + N2).
The resulting statistical test is algebraically identical to the chi-squared test
without the continuity correction.

7

5 Solution Considerations

The conﬁdence intervals above are computed by inverting the two-sided hy-
pothesis test. We note that the intervals using the farrington.manning()
function are obtained in this manner, while those in SAS PROC FREQ are
not. Various other methods of computing conﬁdence intervals are discussed
in the textbooks of Newcombe [4] and Rothmann et al [6]. In reading any
of the references it is vital to check on the deﬁnition of s0; in some cases the
sign is reversed from the original paper.

The Farrington-Manning paper [1] states without proof that the cubic

equation (4) has a unique solution in (s0, 1).

• For s0 > 0, the interval (s0, 1) makes sense, since ˜p2D = ˜p1D − s0 must

be a proportion.

• But if s0 < 0, the appropriate interval is (0, 1 + s0), because ˜p2D > ˜p1D.
This situation is why it seems that the authors had in mind s0 > 0.

The paper [1] uses the cubic formula to solve (4). The particular form
of the cubic formula is the trigonometric form, which is appropriate for the
case when the cubic has three real roots. Only one of the three roots is
given by the formula used in the paper. It appears that the this form of the
cubic formula is appropriate, and that the chosen root is the correct one,
even in the extreme cases. However, the paper [1] does not give any proofs
in this regard. In this note we simply accept the situation, and have made
no attempt to present proofs. This use of the cubic formula is implemented
in both SAS PROC FREQ, and the R function farrington.manning(). It is
straightforward to program the formula in Excel.

Numerical problems with the formulas occur in two diﬀerent situations:

• The cubic formula involves computing an arc cosine. If there is a double
root, the numeric argument for the arc cosine function may be exactly
1. But roundoﬀ can cause the computed argument to be slightly greater
than 1. One can ﬁx the problem using the formulas for ˜p1D and ˜p1D
above. Alternatively one could check the argument of the arc cosine
function, and set arguments microscopically greater than 1 to exactly
1.

An example would be when ˆp1 = 0, ˆp2 = 1, θ = 2, and s0 = 0.5.
In computation for the farrington.manning() function roundoﬀ causes

8

the argument of the acos() function to be microscopically greater than
1, which produces an error condition. One could ﬁx the situation by
checking the argument before the acos() function is used. Excel does
not generate an error for this example, nor does SAS.

• Inverting the computation to ﬁnd the conﬁdence limits involves solving
a non-linear equation over a deﬁned range. Too small a range can result
in missing the root. This situation can arise in the case ˆp1 = 0 and
ˆp2 = 1, or vice versa. In these cases one conﬁdence limit is obvious, and
it may be reasonable to write special code to compute the other limit.
As mentioned above, if real data produced this situation one would
likely use exact methods, and the formulas here would be irrelevant.

• Jan Meis [3] has modiﬁed the farrington.manning() function to incor-
porate both suggestions in this paragraph. Those suggestions might
appear in a later version of the DescrTab2 package.

In the examples above the closed form values for ˜p1D and ˜p2D were obtained
by factoring the cubic equation (4). One could speculate as to whether such
factoring can always be done. For an example to the contrary, suppose that
ˆp1 = 1/3, ˆp2 = 1/2, s0 = 1/2, and θ = 2/3. Then the equation becomes

(5/3)x3 − (11/3)x2 + (25/12)x − (3/12) = 0
20x3 − 44x2 + 25x − 3 = 0

(13)

Any rational root of the form m/n must have m | 3 and n | 20. There
are only a ﬁnite number of cases to check, and none yield a rational root.
Since (13) is a cubic, it must therefore be irreducible over the rationals, and
the full complications of cubic ﬁelds enter into the solution.

References

[1] CP Farrington and G. Manning. Test statistics and sample size formu-
lae for comparative binomial trials with null hypothesis of non-zero risk
diﬀerence or non-unity relative risk. Statistics in Medicine, 9:1447–54,
1990.

9

[2] Jan Meis, Lukas Baumann, Maximilian Pilz, and Lukas Sauer.
DescrTab2: Publication Quality Descriptive Statistics Tables, 2022. R
package version 2.1.9.

[3] Jan Mies. Personal Communication, 2022.

[4] Robert Newcombe. Conﬁdence Intervals for Proportions and Related

Measures of Eﬀect Size. CRC Press, Boca Raton, 2013.

[5] R Core Team. R: A Language and Environment for Statistical Computing.

R Foundation for Statistical Computing, Vienna, Austria, 2021.

[6] Mark Rothmann, Brian Wiens, and Ivan Chan. Design and Analysis of

Non-Inferiority Trials. CRC Press, Boca Raton, 2012.

[7] SAS Institute Inc., Cary, NC. SAS/STATr 15.1 User’s Guide, 2018.

10

