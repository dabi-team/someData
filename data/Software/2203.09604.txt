2
2
0
2

r
a

M
7
1

]
E
S
.
s
c
[

1
v
4
0
6
9
0
.
3
0
2
2
:
v
i
X
r
a

Overview of Test Coverage Criteria for Test Case
Generation from Finite State Machines Modelled as
Directed Graphs

Vaclav Rechtberger
Dept. of Computer Science, FEE
Czech Technical University in Prague
Prague, Czechia
rechtva1@fel.cvut.cz

Miroslav Bures
Dept. of Computer Science, FEE
Czech Technical University in Prague
Prague, Czechia
miroslav.bures@fel.cvut.cz

Bestoun S. Ahmed
Dept. of Mathematics and Computer Science
Karlstad University, Sweden &
Czech Technical University in Prague
bestoun@kau.se

Abstract—Test Coverage criteria are an essential concept for
test engineers when generating the test cases from a System
Under Test model. They are routinely used in test case generation
for user interfaces, middleware, and back-end system parts for
software, electronics, or Internet of Things (IoT) systems. Test
Coverage criteria deﬁne the number of actions or combinations
by which a system is tested, informally determining a potential
”strength” of a test set. As no previous study summarized all
commonly used test coverage criteria for Finite State Machines
and comprehensively discussed them regarding their subsump-
tion, equivalence, or non-comparability, this paper provides this
overview. In this study, 14 most common test coverage criteria
and seven of their synonyms for Finite State Machines deﬁned
via a directed graph are summarized and compared. The results
give researchers and industry testing engineers a helpful overview
when setting a software-based or IoT system test strategy.

Index Terms—Test Coverage Criteria, Model-based Testing,
Test Case Generation, Finite State Machine, System Model,
Directed Graph, Software Testing, Internet of Things

I. INTRODUCTION

Paper accepted at the 5th INTUITESTBEDS (Interna-
tional Workshop on User Interface Test Automation and
Testing Techniques for Event Based Software), part of the
15th IEEE International Conference on Software Testing,
Veriﬁcation and Validation (ICST) 2022, April 4 - 13, 2022,
https://icst2022.vrain.upv.es/

Finite State Machines (FSMs) are employed as a favorite
notation in system modeling and testing, as they describe a
natural aspect of a wide variety of systems. Systems them-
selves, their modules or parts, user interfaces, or data objects
processed by a system naturally switch from state to state.
Hence, FSMs are one of the fundamental modeling options
for Model-based Testing generation of test cases. The FSM-
based test case generation is applicable on a broad spectrum
of systems to test, including software [1], electronics [2],
networking systems [3], and its combinations as recent popular
Internet of Things (IoT) [4]. Regarding the system level, FSM-
based test case generation can be utilized in user interface

testing, middleware level, or lowers levels of a System Under
Test (SUT) universally.

The SUT model can be based on a directed graph or a gram-
mar notation in FSM testing. The core of deﬁnitions based
on a directed graph is a directed graph G = (V, E, vs, Ve)
such that V (cid:54)= ∅ is a ﬁnite set of vertices representing FSM
states and E ⊆ N × N is a nonempty set of edges e ∈ E
representing FSM transitions. Further, vs ∈ V is start state
of the state machine, Ve ⊂ V is a set of end states of the
state machine [1], [5], [6]. Alternative SUT models based on
various extensions of directed graphs or other structures as
grammars are available. However, in this paper, we used the
G model as it is a common widely used model in the literature.
A test path t is a path in G. The test path does not have
to start in vs and end in an end vertex from Ve. Finally, T
denotes a set of test paths.

Coverage criterion generally deﬁnes a property or a set
of properties T has to satisfy. Coverage criteria are used to
express the ”strength” of the test paths, which usually implies
the number of steps or various combinations to be performed.
However, at this point, it is worth mentioning that this notion
of ”strength” is rather intuitive and widely used by testing
practitioners. Still, its use is sometimes discouraged by the
research community in system testing. The number of steps
or combinations exercised is an exact property of T that can
be discussed formally, but the potential of T to detect the
defects is a more complex issue. At least, thoroughness of the
particular execution of the individual test steps plays a role
here, and the tester’s initiative and analytical thinking during
the test execution. This applies especially when test paths are
deﬁned more high-level (as T in this study), and testers have
some liberty to try more combinations or situations in the
individual test steps.

More test steps or combinations contribute to more ”strong”
tests, but it’s not the only factor that inﬂuences the ﬁnal
potential of tests to ﬁnd some defects. Despite this limitation,

Bestoun S. Ahmed is also with Dept. of Computer Science, FEE, Czech

Technical University in Prague.

 
 
 
 
 
 
the coverage criteria are a powerful tool to deﬁne the test
paths’ properties and potential ”strength.” Ammann and Offutt
have done some overview work for test coverage criteria
related to path-based testing [1]. Some of these criteria are
applicable to FSM testing as well. However, we have not
found a comprehensive overview of test coverage criteria
dedicated directly to FSM testing. Instead, only individual
works discussing some of the criteria and their relations can
be found [7]–[12].

To this end, we provide an overview of the most common
criteria for G in this paper. Besides this overview, we compare
these criteria in terms of their mutual relations. At
this
point, we consider subsumption, equivalence, and the fact that
two coverage criteria are incomparable (relations are further
deﬁned in Section III).

This paper focuses on FSM solely, and Extended Finite State
Machines (EFSM) that are also used in system testing are not
considered directly. Most of the test coverage criteria discussed
in this paper may be applicable; however, this limit has to be
taken into account. Also, fault coverage producing negative
test cases for illegal or missing states and transitions (e.g.,
[13]) are not discussed in the paper.

II. THE COMMON TEST COVERAGE CRITERIA FOR
GRAPH-BASED DEFINITION OF FSM
In this section, we provide an overview of the 14 most
common test coverage criteria related to FSM modeled as G,
based on the literature search and our industrial praxis.

A. Node Coverage (NC)

T satisﬁes NC, when each v ∈ V ∈ G is present in at least
one t ∈ T . In the literature NC is also alternatively denoted
as All States Coverage [1], [14]. Considering the number of
T steps, this criterion is the weakest of all criteria discussed
in this section [15].

B. Edge Coverage (EC)

T satisﬁes EC, when all edges (referred also as the tran-
sitions) e ∈ E ∈ G are present in at least one t ∈ T . This
criterion is usually referred also as 0-Switch coverage or All
Transitions Coverage [1], [14]–[16].

The EC can also be discussed in the program source code
execution context. When the source code structure is modeled
as FSM in the way that code statements are modeled as only G
edges, Statement Coverage criterion usually discussed in this
context would be equivalent to EC.

C. Branch Coverage (BC)

To satisfy BC, each branch of the code must be present
in at least one t ∈ T [17]. When employing G to model the
code structure, the branch is deﬁned as a path that satisﬁes the
following conditions:

1) The ﬁrst edge of the branch starts from vs ∈ G or from
a v ∈ G that represents a decision in the code structure,
2) the last edge of the branch ends in some v ∈ Ve ∈ G
or in a v ∈ G that represents a decision in the code
structure, and,

3) there is no other decision point in this path.

D. Edge-Pair Coverage (EPC)

T satisﬁes EPC when each path that consists of two adjacent
edges e ∈ E must occur at
least one
t ∈ T [1], [18]. EPC is also mentioned in the literature as
All Transition Pairs Coverage and 1-Switch Coverage [15].
Moreover, modiﬁcations of this criterion can be found in the
literature:

least once in at

• EPC with an additional constraint that the transitions must
not be adjacent (differently to standard EPC criterion)
[15].

• EPC with an additional constraint that any pair must not

contain two same edges [19].

E. All Path Coverage (APC)

T satisﬁes APC when each possible path in G is present
in T . When G contains cycles, it is impossible to satisfy this
criterion - if there is at least one cycle, the number of possible
paths is inﬁnite [1]. APC is also mentioned in the literature
as Complete Path Coverage [1].

F. Prime Path Coverage (PPC)

T satisﬁes PPC, when each prime path of G is a sub path
of at least one t ∈ T [1], [18], [20]. A path is simple Simple
path when it does not contain any loop, except this path can
be a cycle itself [1]. The Prime path is a simple path that is
not a subpath of any other simple path [1].

G. Speciﬁed Path Coverage (SPC)

S is a set of speciﬁed paths that must be present in T .
Then, T satisﬁes SPC, when each s ∈ S is present in at least
one t ∈ T [1]. The principle of this criterion is practically
equivalent to the Test Requirements concept from the general
path-based testing [1], [21], [22].

H. Round Trip Coverage (RTC)

RTC is a special case of PPC criterion covering the possible
round trips in G. [1]. A Round trip path is a prime path of
nonzero length that starts and ends at the same vertex. [1].
There are two commonly used types of this criterion: Simple
Round Trip Coverage and Complete Round Trip Coverage.

I. Simple Round Trip Coverage (SRTC)

SRTC is satisﬁed, when T contains at least one round trip
path for each reachable vertex v ∈ V ∈ G that starts and ends
an round trip path in G [1].

J. Complete Round Trip Coverage (CRTC)

CRTC is satisﬁed, when T contains all possible round trip

paths for each reachable vertex v ∈ V ∈ G [1], [23]–[25].

K. Basis Path Coverage (BPC)

T satisﬁes BPC when T is a maximal set of basis paths
- linearly independent paths of G (paths that are not a linear
combination of other paths in G). The number of basis paths is
equal to cyclomatic complexity [7], [26]–[29]. When applied
at the source code level, BPC guarantees that every statement
of the code is executed at least once in the tests [26].

L. W Method Coverage (WMC)

The W Method Coverage Criterion proposed by Chow [30].
It is based on the program Testing tree, also referred to as the
Transition tree, on all paths of the transition tree that starts
in the initial node and ends in a leaf node, denoted as P,
and characterization set denoted as W. The breadth-ﬁrst search
algorithm generates the testing tree. The Characterization set
is a set of input sequences, such that for each pair of states of
the whole FSM, there is at least one sequence. By applying it
to these states, we obtain two different output sequences. The
Final Test Set is obtained as concatenation of each p ∈ P by
each possible input sequence w ∈ W .

WMC is alternatively referred as Transition Tree Cover-
age [23]. In a few case studies, Chow showed that WMC
criterion is stronger in its fault detection power than Branch
Coverage, 1-Switch Coverage, Boundary-Interior Coverage
and H-Language Coverage. Here, the fault detection power
is dependent on particular cases (presence of defects in the
tested systems). It is practically impossible to deﬁne such a
criterion precisely. We can deﬁne the only subsumption of
coverage criteria, as discussed further in III.

M. N-Switch Coverage (NSC)

In the industry, NSC is one of the most known and universal
coverage criteria for FSMs, mainly for its presence in the
TMAP Next methodology [31]–[33]. N -Switch Coverage is
satisﬁed when every combination of N +1 adjacent transitions
(edges of G) occur at least once in some t ∈ T [34]. Two
special cases of NSC are commonly used:

0-Switch Coverage

Equivalent to EC already deﬁned above [34].

1-Switch Coverage

Equivalent to EPC already deﬁned above [34].

N. Boundary-Interior Coverage (BIC)

For all possible paths through a program (paths in G), a
ﬁnite set of classes C is determined when having two paths p1
and p2 that traverse G in the same way except in traversal of
loops. They are placed in separate classes if:

1) one of the paths enters the loop but does not repeat it,
and the second path repeats this loop at least once,
2) in both p1 and p2 we enter or leave the loop by a

different entry or exit point,

3) in both p1 and p2 we only enter the loop and traverse

the loop by a different path, or,

set that satisﬁes C1 will satisfy C2 as well, and this relation
is transitive.

From the test practitioner’s viewpoint, we can informally
say that C1 is ”stronger” than C2. Also, C1 produces more
test combinations than C2. But we cannot say that all test
paths from a test set satisfying C2 are present in a test set
satisfying C1.

Figure 1 presents the hierarchy of criteria presented in
Section II in terms of the subsume relation deﬁned above.
Suppose a test coverage criterion in rectangle A subsumes
some other coverage criteria in rectangle B. In that case, this
is depicted by an arrow that goes from rectangle A to rectangle
B. Test coverage criteria in the same rectangle are equivalent.
In the following section, we explain the subsume relations

captured in Figure 1.

Besides subsume relation deﬁned above, we use the follow-
ing terms. In the case that C1 subsume C2 and vice versa, we
will say that C1 is equivalent to C2; this relation is transitive
and symmetric. Furthermore, we say that C1 is incomparable
to C2 if C1 does not subsume C2 and C2 does not subsume C1.
Note that if we haven’t compared some test coverage criteria
in this section, it does not automatically mean that these two
criteria are incomparable.

A. Explanations of presented subsume relations

All Path Coverage criterion subsumes all other criteria.
Explanation: Since to satisfy All Path Coverage, we need all
paths of the graph to be traversed, this criterion automatically
subsumes the other criteria in the hierarchy. All other criteria
aim to reduce the number of test paths.

There are not any criteria, that subsume Node Coverage.
Explanation: Node Coverage is at the very bottom of the
hierarchy because this criterion does not even guarantee to tour
all edges in a SUT model. This can be easily proven by a test
set {a-b} that satisfy Node Coverage criterion in a graph in
Figure 2 but obviously Edge Coverage criterion is not satisﬁed
by this test set.

Prime Path Coverage subsumes Complete Round Trip

Coverage as well as Simple Round Trip Coverage.

Explanation: Test sets that satisfy Complete Round Trip
Coverage, as well as Simple Round Trip Coverage, contain
only prime paths that are cycles, and a test set satisfying Prime
Path Coverage contains all prime paths in a graph.

Complete Round Trip Path Coverage subsumes Simple

Round Trip Path Coverage.

4) in both p1 and p2 we repeat the loop, and then we

Explanation: This relation has been proven by Ammann and

traverse the loop by a different path.

Offutt [1].

T satisﬁes BIC, when it contains at least one path from each

c ∈ C [35], [36].

III. SUBSUMPTION OF COVERAGE CRITERIA FOR
GRAPH-BASED MODEL

In this section, we discuss a hierarchy of common test
coverage criteria for a graph-based model of SUT as presented
in Section II. We use the term subsume with the following
meaning: A test coverage criterion C1 subsumes C2 if each test

Both Complete Round Trip Path Coverage and Simple
Round Trip Path Coverage do not subsume any other
coverage criteria discussed in Section II.

Explanation: In the case of a graph with no cycle, both
criteria do not require any path to traverse, hence, for a graph
with no cycle, P = ∅ satisﬁes both Complete Round Trip Path
Coverage and Simple Round Trip Path Coverage. But P = ∅
does not satisfy any other criteria discussed in Section II.

Branch Coverage subsumes Edge Coverage.

Fig. 1. Hierarchy of common test coverage criteria for graph-based SUT model.

Fig. 2. Graph for discussion of Node Coverage position in the hierarchy.

Fig. 3. Example for discussion of relation between Node Coverage, Edge
Coverage and Round Trip Coverages.

Explanation: The fact

that ”Branch Coverage subsumes
Edge Coverage” will be obvious when we negate it as ”There
is a test set that satisﬁes Branch Coverage and do not satisfy
Edge Coverage”. This negated claim is not true because, in
FSM, each edge is a part of exactly one branch.
Edge Coverage subsumes Branch Coverage.
Explanation: The fact

that ”Edge Coverage subsumes
Branch Coverage” will be obvious when we negate it as
”There is a test set that satisﬁes Edge Coverage but does not
satisfy Branch Coverage”. When this claim is true, all edges of
FSM would be traversed, but not every branch of this FSM.
That would imply that each edge of each branch would be
traversed, but still, not every branch of FSM is needed to be
traversed, which is an obvious contradiction.

Branch Coverage is equal to Edge Coverage.
Explanation: As explained above, Branch Coverage sub-
sumes Edge Coverage and, concurrently, Edge Coverage sub-
sumes Branch Coverage, hence we consider these two criteria
as equal.

Neither Node Coverage nor Edge Coverage subsume any
of the Round Trip Coverages (Complete Round Trip Path
Coverage and Simple Round Trip Path Coverage).

Explanation: A test set satisfying neither Node Coverage
nor Edge Coverage would not satisfy both Round Trip Cov-
erages since Round Trip Coverages requires to traverse the
graph representing FSM in concrete way speciﬁed in Sections
II-I and II-J but Node Coverage and Edge Coverage do not
require to traverse the graph this way. For instance test set
{a − c − f, b − d − f } satisfy Edge Coverage for graph in
Figure 3 but not any of the Round Trip Coverages.

Edge Coverage and Node Coverage are incomparable

with both Round Trip Coverage

Explanation: This is a consequence of the facts ”Both
Complete Round Trip Path Coverage and Simple Round Trip
Path Coverage do not subsume any other coverage criteria
discussed in Section II” and ”Neither Node Coverage nor
Edge Coverage subsume any of the Round Trip Coverages
(Complete Round Trip Path Coverage and Simple Round Trip
Path Coverage)”.

Edge Coverage subsumes Node Coverage.
Explanation: Because each edge is deﬁned by two nodes,
all nodes must be traversed (to satisfy Node Coverage) when
all edges are traversed (to satisfy Edge Coverage).

Edge-Pair Coverage subsumes Edge Coverage.

Fig. 4. An example for discussion of relation between Edge Coverage and
Edge-Pair Coverage.

Fig. 6. Example for relation between Prime Path Coverage and Edge-Pair
Coverage.

Fig. 5. Prime Path Coverage example [1].

Fig. 7. Example graph for discussion of relation between Edge-Pair Coverage
and Prime Path Coverage.

Explanation: A test set satisfying Edge-Pair Coverage crite-
rion also satisﬁes Edge Coverage because when the test paths
tour all edge pairs, all edges must be toured by these paths as
well.

Edge Coverage does not subsume Edge-Pair Coverage
Explanation: This fact can be demonstrated using an ex-
ample. A test set {a-b,c-d} satisﬁes Edge Coverage for a
graph presented in Figure 4 but it does not satisfy Edge-
Pair Coverage since combinations a-d and c-b that would
be required to be present in the test set to satisfy Edge-Pair
Coverage are missing there.

Prime Path Coverage does not subsume Edge-Pair

Coverage

Explanation: This claim can be explained by the example
for Prime Path Coverage given in [1]. This example follows
in Figure 5.

In test paths that would satisfy Prime Path Coverage, there
is no sequence [4,4,4], which is needed to satisfy Edge-Pair
Coverage.

Prime Path Coverage does not subsume Edge-Pair

Coverage

Explanation: For a graph in Figure 6, prime paths are {a-
b,a-c,d}. In this set of prime paths, there are not all possible
paths of length 2 (for instance d-b) that would be required
to be there to satisfy Edge-pair Coverage. Hence, Prime Path
Coverage does not guarantee to cover all edge-pairs.

Edge-Pair Coverage does not subsume Prime Path

Coverage.

Explanation: This claim can be demonstrated using the
following example. Figure 7 presents a graph for which a set
of prime paths consists of all possible paths in this graph, in
particular {x − y − z | x ∈ {a, b}, y ∈ {c, d}, z ∈ {e, f }}.
Removing a path a − c − e, the resulting set will not satisfy
Prime Path Coverage since the removed path is prime, but
this set still satisﬁes Edge-Pair Coverage. When removing a
test path a − c − e that consists of two edge pairs, a − c and
c − e, we have to ensure, that these pairs are still covered by
a reduced set to satisfy Edge-Pair Coverage. And the pairs
a − c and c − e are really covered by the reduced test set, the
ﬁrst pair is covered by path a − c − f and the second pair is
covered by b − c − e. Hence, Edge-Pair Coverage does not
subsume Prime Path Coverage.

Prime Path Coverage and Edge-Pair Coverage are

incomparable.

Explanation: Because Prime Path Coverage does not sub-
sume Edge-Pair Coverage and Edge-Pair Coverage does not
subsume Prime Path Coverage, we consider these two criteria
as incomparable.

Basis Path Coverage subsumes Edge Coverage.
Explanation: It has been proven by Watson et al. that Basis
Path Coverage satisﬁes Edge Coverage, but not vice versa [7].
Basis Path Coverage does not subsume Edge-pair Cov-

erage.

Explanation: To document this relation, we can use graph
a) from Figure 8. For this graph, a test set {a-b, a-c-d-b, a-e-f-
b} satisﬁes Basis Path Coverage criterion, but in this test set,

Fig. 8. Examples for test coverage criteria discussion.

Fig. 9. An example for discussion of the relationship between Basis Path
Coverage and Prime Path Coverage.

the edge pairs d-e and f-c, which would be needed to satisfy
the Edge-pair Coverage criterion, are missing.

Edge-pair Coverage does not subsume Basis Path Cov-

erage.

Explanation: This relation can be documented by the ex-
ample graph a) given in Figure 8. A test set {a-b, a-c-d-e-f-b,
a-e-f-c-d-b} satisﬁes Edge-pair Coverage but not the Basis
Path Coverage since you cannot obtain a required test path
a-c-d-b by a linear combination of the paths in the discussed
test set {a-b, a-c-d-e-f-b, a-e-f-c-d-b}.

Basis Path Coverage is not comparable with Edge-Pair

Coverage.

Explanation: This fact is a consequence of already discussed
facts ”Edge-pair Coverage does not subsume Basis Path
Coverage” and ”Basis Path Coverage does not subsume Edge-
pair Coverage”.

Basis Path Coverage does not subsume Prime Path

Coverage.

Explanation: We document this fact using an example graph
in Figure 9. A test set {a − b, a − c − d − b} satisﬁes Basis
Path Coverage criterion, but this test set does not contain a
prime path d − c required to satisfy the Prime Path Coverage
criterion.

The next criterion to discuss is W Method Coverage.
As explained in Section II-L, in this method, test sets are
generated using the Testing Tree and set of inputs W . W
cannot be obtained only from G because it depends on FSM
inputs and outputs. Hence, we can only say that there will be at
least one input sequence for each state (except the ﬁnal state)

Fig. 10. Example to discuss relation Graph and corresponding Testing tree.

that triggers at least one adjacent transition from this state to
another. Still, it is uncertain which one will be traversed in
the case of states with more than one outgoing transition. A
consequence of this fact is that each path (that starts in vs ∈ G
node and ends in a leaf node) obtained from the Testing Tree
will be appended with at least one edge (except the paths that
end in a leaf node), but not necessarily with all possible edges.
W Method Coverage does not subsume Edge-pair Cov-

erage.

Explanation: Let’s use an example of a Testing Tree used
to generate a test set satisfying W Method Coverage that is
given in the right part of Figure 10. When we analyze paths
in this Testing Tree which start in an initial node and end in a
leaf node, we cannot guarantee that all sub-paths of length 2,
namely e − b, e − c or e − d, that would be required to satisfy
Edge-pair Coverage will be traversed.

W Method Coverage does not subsume Prime Path

Coverage.

Explanation: In the Testing Tree in the example given in
Figure 10, a path a − d − e will be appended at least by one of
the adjacent edges {b, c, d} but not necessary by all, so each
of the prime paths e − b, e − c or e − d cannot be guaranteed
to be covered to satisfy Prime Path Coverage criterion.

W Method Coverage does not subsume Basis Path

Coverage.

Explanation: We use an example to document this fact. The
basis paths set for graph in Figure 10 is {a − b, a − c, a − d −
e − b, a − d − e − c} and with this set, Basis Path Coverage
is satisﬁed. However, W Method Coverage cannot guarantee
to cover both paths e − b and e − c, from this set. Hence, W
Method Coverage cannot be satisﬁed by this test set.
N + 1

Coverage

N-Switch

with

(length of the longest path in G is equivalent
All Path Coverage.

≥
to

possible

satisfying

Theoretical

Explanation:
paths

of
test
where
N + 1 ≥ length of the longest path in G is simply
the same as a length of the longest path in G. So, all paths in
G will be present in a test set satisfying N-Switch Coverage
with N + 1 ≥ length of the longest path in G.

Coverage

N-Switch

length

N-Switch

Coverage

≥
length of the longest prime path in G subsumes
Prime Path Coverage.

N + 1

with

Explanation: N-Switch Coverage criterion with N + 1 ≥
length of the longestprime path in G guarantees to traverse
all combinations of N + 1 adjacent edges, so all prime paths
will be traversed as well in a test set satisfying this N-Switch
Coverage criterion because these prime paths are not longer
than N .

Boundary-interior Coverage subsumes Edge Coverage.
Explanation: Since Boundary-Interior Coverage only reduces
the number of repetitions of cycles within the traversal of the
graph, it covers all edges as well as All Paths Coverage do.

In this overview, we have discussed the relations between
coverage criteria listed in Section II that are necessary to
construct the hierarchy graph presented in Figure 1. Some
relations are not explicitly mentioned since they are a result of
the transitivity of the subsume relation. An overview of these
relations is also given in Table I, using the following notation:
- Criterion in a row subsumes a criterion in a column.
- Criterion in a row is equal to a criterion in a column.
- Criterion in a row is incomparable with a criterion
in a column.
- Criterion in a row was not compared with a criterion
in a column.
- Criterion in a row does not subsume a criterion in
a column.

S
E
I

!S

N

In a few places of Table I, there is an ”I or S” state. These
particular relations that were not necessary to construct the
hierarchy graph presented in Figure 1 and to determine the
exact relation, more analysis has to be done, which will be a
subject of the future work.

IV. RELATED WORK

In the Model-based Testing ﬁeld, individual deﬁnitions of
test coverage criteria are present in the literature, usually in
the works presenting test case generation algorithms, e.g.,
[14], [25], [37], [38]. However, less work exists regarding the
comparison of individual test coverage criteria and in these
works usually small sets of coverage criteria are compared,
e.g., [7]–[12]. In the general path-based testing, overlapping
with FSM-based testing, some basic tests were compared by
Ammann and Offutt [1].

Watson and McCabe analyze Basis Path Coverage and
experimentally proved that it subsumes Branch Coverage and
Edge Coverage [7].

Lun and Chi [8] discussed a set of path-based testing
coverage criteria for software architecture testing and ex-
plained their mutual subsumption formally. Further, Lun, Chi
and Xu propose another two path-based coverage criteria
for component testing, Node-Sequence Coverage and Edge-
sequence Coverage, and prove the subsumption relationships
altogether with criteria from their previous work [8], [12].

Marr´e and Bertolino have indirectly focused on coverage
criteria subsumption when analyzing subsumptions of require-
ments which are sub-parts of directed graph-based SUT model

that need to be covered to satisfy given criterion and are
speciﬁc for each model [9].

Sinha and Harrold analyzed coverage criteria for data-
ﬂow testing using a directed-graph based SUT model and
proposed a hierarchy where various criteria as All-du-paths,
All-uses, All-p-uses/some-c-uses, All-c-uses/some-p-uses, All-
p-uses, All-c-uses, All-defs and general graph-based SUT
model criteria as All-path Coverage, Edge Coverage and Node
Coverage are compared [10].

As we have not found a comprehensive overview of test
coverage criteria dedicated directly to FSM testing, we pro-
vided such an overview in this paper.

V. CONCLUSION

In this paper, we have summarized the 14 most common test
coverage criteria for FSM-based test case generation, including
seven synonyms, discussed relations among these criteria, and
put
them in a hierarchy regarding their subsumption. For
each of the discussed relations between individual criteria, an
explanation documenting the relationship is given. Part of the
discussed criteria is common for general path-based testing
based on directed graphs as a system under test model as well
as for ﬁnite state machines speciﬁcally (e.g., Node Coverage,
Edge Coverage). This overlap is natural and is a result of the
same basic structure, G used as a SUT model. It is necessary
to mention that more alternative coverage criteria exist and are
signiﬁcantly overlapping with the criteria listed in section II.
As an example, we can give an overview by Souza et al., which
lists more alternatives [39]; however, due to our opinion and
industrial praxis, not so common. For this reason, we decided
not to include them in this overview.

The presented overview is helpful for researchers and var-
ious industrial test engineers, as FSMs are one of the most
common and widely-used modeling notations in the generation
of test cases for software, electronics, or IoT system testing.

ACKNOWLEDGMENT

The project is supported by CTU in Prague internal grant
SGS20/177/OHK3/3T/13 “Algorithms and solutions for au-
tomated generation of test scenarios for software and IoT
systems.” The authors acknowledge the support of the OP
VVV funded project CZ.02.1.01/0.0/0.0/16 019 /0000765
“Research Center for Informatics.” Bestoun S. Ahmed has
been supported by the Knowledge Foundation of Sweden
(KKS) through the Synergi Project AIDA - A Holistic AI-
driven Networking and Processing Framework for Industrial
IoT (Rek:20200067).

REFERENCES

[1] P. Ammann and J. Offutt, Introduction to software testing. Cambridge

University Press, 2016.

[2] Y. Yin, B. Liu, and H. Ni, “Real-time embedded software testing method
based on extended ﬁnite state machine,” Journal of Systems Engineering
and Electronics, vol. 23, no. 2, pp. 276–285, 2012.

[3] B. S. Bosik and M. ¨U. Uyar, “Finite state machine based formal meth-
ods in protocol conformance testing: from theory to implementation,”
Computer Networks and ISDN Systems, vol. 22, no. 1, pp. 7–33, 1991.

TABLE I
OVERVIEW OF EXAMINED TEST COVERAGE CRITERIA HIERARCHY RELATIONS.

NC
EC
BC
EPC
PPC
BPC
SRTC
CRTC
WMC
APC
BIC

NC

EC
!S

S
S
S
S
S
I
I
S
S
S

E
S
S
S
I
I
S
S
S

BC
!S
E

EPC
!S
!S
!S

S
S
S
I
I
S
S
S

I
I
N
N
!S
S
N

PPC
!S
!S
!S
I

!S
!S
!S
!S
S
N

BPC
!S
!S
!S
I
I or S

N
N
!S
S
N

SRTC
I
I
I
N
S
N

S
N
S
N

CRTC WMC

I
I
I
N
S
N
!S

N
S
N

!S
!S
!S
I or S
I or S
I or S
N
N

S
N

APC
!S
!S
!S
!S
!S
!S
!S
!S
!S

!S

BIC
!S
!S
!S
N
N
N
N
N
N
S

[4] K. Tanabe, Y. Tanabe, and M. Hagiya, “Model-based testing for mqtt
applications,” in Joint Conference on Knowledge-Based Software Engi-
neering. Springer, 2020, pp. 47–59.

[5] J. Wang, Formal Methods in Computer Science. CRC Press, 2019.
[6] J. E. Hopcroft, R. Motwani, and J. D. Ullman, “Introduction to automata
theory, languages, and computation,” Acm Sigact News, vol. 32, no. 1,
pp. 60–65, 2001.

[7] A. Watson, T. McCabe, and D. Wallace, “Structured testing: A testing

methodology using the cyclomatic complexity metric,” 1996.

[8] L. Lun and X. Chi, “Investigating subsumption relationship on path
coverage criteria for software architecture testing,” in 2010 International
Conference on Computational Intelligence and Software Engineering,
2010, pp. 1–4.

[9] M. Marre and A. Bertolino, “Using spanning sets for coverage testing,”
IEEE Transactions on Software Engineering, vol. 29, no. 11, pp. 974–
984, 2003.

[10] S. Sinha and M. Harrold, “Criteria for testing exception-handling con-
structs in java programs,” in Proceedings IEEE International Conference
on Software Maintenance - 1999 (ICSM’99). ’Software Maintenance for
Business Change’ (Cat. No.99CB36360), 1999, pp. 265–274.

[11] D. Mukherjee and R. Mall, An investigation into effective test coverage,
ser. Advances in Intelligent Systems and Computing, 2016, vol. 396,
cited By :2. [Online]. Available: www.scopus.com

[12] L. Lun, X. Chi, and H. Xu, “Coverage criteria for component path-
oriented in software architecture,” Engineering Letters, vol. 27, no. 1,
pp. 40–52, 2019, cited By :4. [Online]. Available: www.scopus.com
[13] M. M. Mariano, ´E. F. de Souza, A. T. Endo, and N. L. Vijaykumar,
“Comparing graph-based algorithms to generate test cases from ﬁnite
state machines,” Journal of Electronic Testing, vol. 35, no. 6, pp. 867–
885, 2019.

[14] J. Lv, K. Li, G. Wei, T. Tang, C. Li, and W. Zhao, “Model-based test
cases generation for onboard system,” in 2013 IEEE Eleventh Interna-
tional Symposium on Autonomous Decentralized Systems (ISADS), 2013,
pp. 1–6.

[15] C. de Souza Carvalho and T. Tsuchiya, “Coverage criteria for state
transition testing and model checker-based test case generation,” in 2014
Second International Symposium on Computing and Networking, 2014,
pp. 596–598.

[16] M. Heimdahl and D. George, “Test-suite reduction for model based tests:
effects on test quality and implications for testing,” in Proceedings. 19th
International Conference on Automated Software Engineering, 2004.,
2004, pp. 176–185.

[17] J. C. Huang, “An approach to program testing,” ACM Comput. Surv.,

vol. 7, no. 3, p. 113–128, Sep. 1975.

[18] N. Li, U. Praphamontripong, and J. Offutt, “An experimental compar-
ison of four unit test criteria: Mutation, edge-pair, all-uses and prime
path coverage,” in 2009 International Conference on Software Testing,
Veriﬁcation, and Validation Workshops, 2009, pp. 220–229.

[19] P. Liu and H. Miao, “A new approach to generating high quality test
cases,” in 2010 19th IEEE Asian Test Symposium, 2010, pp. 71–76.
[20] E. Fazli and M. Afsharchi, “A time and space-efﬁcient compositional
method for prime and test paths generation,” IEEE Access, vol. 7, pp.
134 399–134 410, 2019.

[21] M. Bures and B. S. Ahmed, “Employment of multiple algorithms for
optimal path-based test selection strategy,” Information and Software
Technology, vol. 114, pp. 21–36, 2019.

[22] M. Bures, B. S. Ahmed, and K. Z. Zamli, “Prioritized process test: An
alternative to current process testing strategies,” International Journal
of Software Engineering and Knowledge Engineering, vol. 29, no. 07,
pp. 997–1028, 2019.

[23] H. Khalil and Y. Labiche, “State-based tests suites automatic generation
tool (stage-1),” in 2017 IEEE 41st Annual Computer Software and
Applications Conference (COMPSAC), vol. 1, 2017, pp. 357–362.
[24] ——, “On fsm-based testing: An empirical study: Complete round-trip
versus transition trees,” in 2017 IEEE 28th International Symposium on
Software Reliability Engineering (ISSRE), 2017, pp. 305–315.

[25] H. Khalil, “Finite state machine testing complete round-trip versus
transition trees: On the road of ﬁnding the most effective criterion,”
in 2017 IEEE International Symposium on Software Reliability Engi-
neering Workshops (ISSREW), 2017, pp. 108–111.

[26] T. McCabe, “A complexity measure,” IEEE Transactions on Software

Engineering, vol. SE-2, no. 4, pp. 308–320, 1976.

[27] F. Zapata, A. Akundi, R. Pineda, and E. Smith, “Basis path analysis
for testing complex system of systems,” Procedia Computer Science,
vol. 20, pp. 256–261, 2013, complex Adaptive Systems.
[28] A. Watson, “Structured testing: analysis and extensions,” 1996.
[29] X. Wang, Z. Xie, J. He, G. Zhao, and R. Nie, “Basis path coverage
criteria for smart contract application testing,” in 2019 International
Conference on Cyber-Enabled Distributed Computing and Knowledge
Discovery (CyberC), 2019, pp. 34–41.

[30] T. S. Chow, “Testing software design modeled by ﬁnite-state machines,”
IEEE Transactions on Software Engineering, vol. SE-4, no. 3, pp. 178–
187, 1978.

[31] M. Vroon, B. Broekman, T. Koomen, and L. van der Aalst, TMap next:

for result-driven testing. Uitgeverij kleine Uil, 2013.

[32] M. Pol, R. Teunissen, and E. Van Veenendaal, Software testing: A guide

to the TMap approach. Pearson Education, 2002.

[33] L. v. d. Aalst, R. Baarda, E. Roodenrijs, J. Vink, and B. Visser, “Tmap

next, business driven test managament,” 2008.

[34] T. Takagi, N. Oyaizu, and Z. Furukawa, “Concurrent n-switch coverage
criterion for generating test cases from place/transition nets,” in 2010
IEEE/ACIS 9th International Conference on Computer and Information
Science, 2010, pp. 782–787.

[35] W. Howden, “Methodology for the generation of program test data,”
IEEE Transactions on Computers, vol. C-24, no. 5, pp. 554–560, 1975.
[36] L. Mariani, M. Pezz`e, and D. Willmor, “Generation of integration tests
for self-testing components,” in Applying Formal Methods: Testing,
Performance, and M/E-Commerce, M. N´u˜nez, Z. Maamar, F. L. Pelayo,
K. Pousttchi, and F. Rubio, Eds. Berlin, Heidelberg: Springer Berlin
Heidelberg, 2004, pp. 337–350.

[37] M. Bures, T. Cerny, and M. Klima, “Prioritized process test: More efﬁ-
ciency in testing of business processes and workﬂows,” in International
Conference on Information Science and Applications. Springer, 2017,
pp. 585–593.

[38] M. Bures, “Pctgen: Automated generation of test cases for application
workﬂows,” in New Contributions in Information Systems and Technolo-
gies. Springer, 2015, pp. 789–794.
´E. F. De Souza, V. A. de Santiago J´unior, and N. L. Vijaykumar, “H-
switch cover: a new test criterion to generate test case from ﬁnite state
machines,” Software Quality Journal, vol. 25, no. 2, pp. 373–405, 2017.

[39]

