2
2
0
2

l
u
J

1
2

]
h
p
-
c
o
s
.
s
c
i
s
y
h
p
[

1
v
1
7
7
0
1
.
7
0
2
2
:
v
i
X
r
a

Reticula: A temporal network and hypergraph analysis
software package

Arash Badie-Modiri∗, Mikko Kivel¨a

Department of Computer Science, School of Science, Aalto University, FI-0007, Finland

Abstract

In the last decade, temporal networks and static and temporal hypergraphs
have enabled modelling connectivity and spreading processes in a wide ar-
ray of real-world complex systems such as economic transactions, informa-
tion spreading, brain activity and disease spreading. In this manuscript, we
present the Reticula C++ library and Python package: A comprehensive
suite of tools for working with real-world and synthetic static and temporal
networks and hypergraphs. This includes various methods of creating syn-
thetic networks and randomised null models based on real-world data, calcu-
lating reachability and simulating compartmental models on networks. The
library is designed principally on an extensible, cache-friendly representation
of networks, with an aim of easing multi-thread use in the high-performance
computing environment.

Keywords: Graphs, Networks, Temporal Networks, Hypergraphs

1. Motivation and impact

A wide variety of interesting physical systems consist of a large number
of interacting entities with diﬀerent levels of internal complexity. For ex-
ample, a social network consists of individuals exchanging information with
each other physically or electronically. Similarly, a biological system such
as a human brain can be viewed as the aggregate of its cells and their con-
nections. Many emergent behaviours of these complex systems can be re-
produced and analysed by modelling the system as a graph. This gave rise
to the ﬁeld of complex networks, where this approach is being applied to
increase our understanding of phenomena on a vast array of interconnected

∗Corresponding author
Email address: arash.badiemodiri@aalto.fi (Arash Badie-Modiri)
URL: https://arash.network (Arash Badie-Modiri)

Preprint submitted to SoftwareX

July 25, 2022

 
 
 
 
 
 
systems. For example, it has been noted that many systems show patterns
of synchronisation between vertices [1, 2] and that spreading processes in
completely diﬀerent contexts, such as information or disease spreading in a
population [3, 4] or accessibility of a public transport system [5] can show
phase-transitions that have been the subject of extensive previous studies in
statistical physics.

This increased interest in the study and modelling of real-world systems
as static networks with dyadic relations between vertices (graphs) spurred
on a set of software libraries aiming to ﬁll the computational gap, such as
NetworkX [6], igraph [7], and Stanford Network Analysis Project (SNAP)
[8]. These libraries have struck diﬀerent compromises between API usability,
performance and generality.

Many real-world systems, however, consist of connections and entities
that evolve through time periods shorter than or comparable to the period
of observation. Social circles evolve through time with new connections form-
ing between people. Cells in a biological system die or change their nature
and strength of connections with other cells. Furthermore, time dictates an
inherent direction to connectivity: unlike a graph, interactions between enti-
ties are only transitive if they happen in causally plausible times. Temporal
networks [9, 10] aim to provide a representation of complex systems that
include interaction times between the entities, as opposed to what a static
network edge usually represents, i.e., the possibility or plausibility of inter-
action between entities. This set of timestamped interactions (also known
as temporal edges or events) inherently captures the evolution of the system
through time and all the possible temporal inhomogeneities and correlations
that aﬀect the dynamical processes but might be overlooked in static settings
[4].

This popularity and conceptual simplicity of temporal networks as a
model have brought about another set of software libraries, such as PathPy
focusing more on temporal paths and path statistics [11] and Phasik, with a
strong focus on inferring temporal phases in the network [12].

Many systems, on the other hand, are best described using interactions or
events that are not constrained to two entities. For example, face-to-face or
online interactions in a population regularly happen in groups of size larger
than two, and the interaction between scientiﬁc literature in form of citation
is in fact an interaction between the group of authors of the cited paper
and the group of authors in the citing. Specialised libraries have emerged
for handling hypergraphs, for example HyperNetX [13] and Complex Group
Interactions (XGI) [14].

Reticula is a C++ library and the accompanying Python bindings that
natively supports a wide range of complex network types, including directed

2

and undirected variations of static and temporal networks, hypergraphs and
hypergraph temporal networks. Additionally, it supports delayed events for
temporal networks and temporal hypergraphs, allowing users to model, e.g.,
transportation networks or other temporal networks that involve latency.
The library also supports various methods of synthetically generating and
randomising diﬀerent types of networks, reading and writing networks to
ﬁles, calculating various properties of networks, and inter-operation with
NetworkX for static dyadic network types.

The Reticula Python interface enjoys a sizeable speedup compared to the
pure Python libraries. For example, generating a single random graph with
degree sequence (4, 4, . . . 4) of size 1000 using the random_degree_sequence_graph
function is about 18 times faster in Reticula than NetworkX. Generating 1000
such graphs, while allowing the use of 24 CPU cores in parallel increases this
ratio to 250 times.

Earlier versions of this software have enabled various works of research.
Ref. [15] used it to estimate constrained reachability on large real-world tem-
poral networks, while Ref. [16] applied the same methodology to a variety
of random temporal network models to show that limited waiting-time adja-
cency has a directed percolation reachability phase transition in many tem-
poral networks. Furthermore, Ref. [17] utilised the library in its implemen-
tation of compartmental model dynamics on networks to predict the eﬀects
of degree heterogeneity, homophily and the extent of adaptation of contact
tracing apps on their eﬃcacy as a preventative measure.

2. Design goal and description of the software

The software package interface is designed to optimise for the following
goals: (1) providing an easy to use, human-readable function interface, gen-
erally akin to that of NetworkX, that can be uniformly used for all supported
network types, and (2) making it easy to use eﬀectively in high-performance
computation environment by safe multi-threading, especially in Python, (3)
optimising the CPU cache hit rate in the implemented algorithms as much
as possible.

While from a theoretical complexity perspective, the commonly used
hashtables-nested-in-hashtable representation of graphs oﬀers constant-time
complexity for checking the existence of edges between two vertices, this
approach results in sub-optimal memory access patterns in many graph al-
gorithms that require looping through all edges incident to a certain vertex.
This representation is also not directly extensible to temporal networks and
hyper-graphs. Instead, Reticula stores sorted incidence vectors for each net-
work vertex in a contiguous area of the memory, which can be directly ex-

3

panded to directed static networks as well as temporal networks, hypergraphs
and temporal hypergraphs.

Table 1: Comparison of Reticula to other network libraries mentioned in this manuscript.
Implementation refers to the main language of implementation of each library. Multi-
threading in this table refers to either providing a built-in shared memory parallel pro-
cessing model (e.g., through OpenMP) or enabling the user to do so by releasing the global
interpreter lock and providing thread-safe types and functions.

Reticula NetwokrX SNAP igraph

Static Networks
Temporal Networks
Hypergraphs
Temporal Hypergraphs
Implementation
Multi-threading

(cid:88)
(cid:88)
(cid:88)
(cid:88)
C++
(cid:88)

(cid:88)
-
-
-
Python
-

(cid:88)
-
-
-
C
(cid:88)

(cid:88)
-
-
-
C
(cid:88)

PathPy Phasik HyperNetX

XGI

Static Networks
Temporal Networks
Hypergraphs
Temporal Hypergraphs
Implementation
Multi-threading

(cid:88)
(cid:88)
-
-

-
(cid:88)
-
-

Python Python

-

-

-
-
(cid:88)
-
Python
-

-
-
(cid:88)
-
Python
-

To make it easier to use this library in a heavily multi-threaded envi-
ronment without the necessity to use explicit synchronisation primitive the
library mostly presents immutable edge and network types, provided along-
side a variety of functions for manipulating networks that return a modiﬁed
copy instead of mutating the object itself. This removes the risk of, e.g.,
inadvertently modifying a network that is being simultaneously read in an-
other thread which might return incorrect results with no visible errors or
even result in undeﬁned behaviour. This, combined with the fact that the
C++ library in most parts does not directly manipulate any Python object,
allows us to safely release the Global Interpreter Lock (GIL) at the entry
point of the Python interface, allowing multi-threaded computation directly
from Python code.

The library currently supports the representation of various types of static
and temporal networks, with directed or undirected connections, either lim-

4

ited to dyadic connections or hyperedges involving any number of vertices.
Moreover, the library allows the users to construct higher-order networks,
where vertices are themselves edges of a simpler network, to an arbitrary
degree for the C++ library and the second order for the Python library. The
Python binding additionally supports integral, string and 2-tuple vertices,
while in C++ the templated types allow any type of vertices that deﬁnes
strong ordering and certain utility functions for that type, which by default
includes all numeric types, strings and all ordered containers. Novel types of
networks can easily be implemented in C++ by deﬁning a custom edge type
and their respective type traits.

The C++ library can be directly compiled and installed on the target
system, or preferably directly included in a project using the FetchContent
CMake module. The Python binding, implemented using PyBind11 [18],
can be installed from the Python Package Index using the console command
python -m pip install -U reticula on any 64-bit Linux operating sys-
tem with GNU C Library (glibc) version 2.17 or newer (i.e., compatible with
the platform tag manylinux2014) and Python version 3.8 or newer. Both
libraries provide a similar interface and set of types. Although the C++ li-
brary provides requirements and concepts that make it easy for researchers to
implement custom functionality, such as new types of edges or networks that
can beneﬁt from the already implemented algorithms, the pre-compilation
requirements of Python native extension interface makes such on-the-ﬂy ex-
tensibility unfeasible.

The core library is extensively and automatically tested. The tests are im-
plemented in the src/tests/reticula/ directory of the C++ library source
tree. The code-base makes heavy use of many modern C++ features such
as concepts and ranges, which, alongside other best practices such as strict
const-correctness provide a level of guarantee against some inadvertent com-
mon error-prone patterns by library authors or the end-users, but requires a
recent compiler suit with decent support for a subset of the C++20 standard
(ISO/IEC 14882:2020 [19]) minus the co-routines, modules and the string
formatting sections of the standard. For the current release, the library is
tested to compile on GNU Compiler Collection versions 10.2 and newer. Ex-
tensive documentation for installation and use of the software is available
online at https://docs.reticula.network/ and in the docs/ directory of
the python binding source tree.

3. Implemented functionality

The library allows the input and output of networks from edge- or event-
list ﬁles. It is also possible to import and export static dyadic networks to

5

and from NetworkX. This can be used, for example, to create static networks
through methods not currently implemented by this library or read from or
write to other ﬁle formats.

Reticula can also be used for generating various synthetic and random
static and temporal networks, such as regular ring lattices, d-dimensional
square lattices, G(n, p) [20], Barab´asi–Albert [21], k-regular, (directed or
undirected) degree-sequence [22] and (directed or undirected) expected degree-
sequence random graphs [23, 24], as well as fully-mixed and activation model
temporal networks with any static “base” and exponential, geometric, self-
exciting and power-law inter-event time distributions [16]. It is also possible
to start from a (possibly real-world) temporal network and randomise cer-
tain features away using various microcanonical randomised reference models
implemented in the library [25].

While the library primarily focuses on spreading, connectivity and reach-
ability analysis of networks, it implements various other well-known network
algorithms that might be of use as building blocks of other algorithms or
measurements on the network. For example, the library allows users to check
whether a degree (pair) sequence is (di-)graphical [26, 27], and whether a di-
rected (hyper-)graph is acyclic and to ﬁnd a topological ordering of directed
acyclic graphs. The user can calculate the density of directed or undirected
dyadic static networks. For temporal networks, the user can construct the
static projection of the network: a directed or undirected static network
where two vertices are connected if they have at least one event in the tem-
poral network. They can also calculate the timeline of all temporal events
that correspond to each static projection link.

On the subject of reachability and connectivity, the library provides ex-
tensive functionality. For static networks, the user can compute (weak)
connectivity and (weakly-) connected components, query whether a ver-
tex is reachable from another and calculate all in- and out-components and
shortest-path lengths to and from any vertex. It is also possible to estimate,
using probabilistic counting methods, the in- or out-component sizes of a
directed network in a single pass in O(|E| log |E|) time for the common case
of acyclic graphs. [28].

Similarly, for temporal networks it is possible to calculate the event graph
representation [29], and to calculate the temporal reachability cluster start-
ing from a single vertex at a speciﬁed time in O(|E|), or estimate it in one
pass for all vertices at all possible starting times in O(|E| log |E|) [28]. The re-
sulting temporal clusters include reachability information, and characteristic
quantities such as cluster mass, volume and lifetime [16, 15].

The temporal network reachability cluster calculation can be used with
various deﬁnitions of temporal adjacency with many of the most commonly

6

used deﬁnitions currently implemented. The simple adjacency describes an
upper bound on reachability, roughly similar to a Susceptible → Infected (SI)
process, where there are no limits to how long an eﬀect might remain in a
vertex. The exponential, and the discrete time variant geometric temporal
adjacency, roughly reminiscent of a Susceptible → Infected → Susceptible
(SIS) process, allows vertices to remain aﬀected for a duration of time de-
termined through an exponential distribution with a given rate. The limited
waiting-time uses a deterministic maximum time cutoﬀ instead of a prob-
ability distribution. Additionally, the C++ library allows the deﬁnition of
novel types of temporal network adjacency, which can then be used by the
C++ library function.

The future roadmap for this library focuses on the integration of the
generalised compartmental model framework for static and temporal net-
works which was originally implemented for Ref. [17], providing pre-compiled
Python packages for x64 and ARMv8 macOS and Windows devices and im-
plementing additional network statistics and algorithms.

4. Illustrative Examples

4.1. Isotropic percolation in static networks

In this ﬁrst example, we will focus on an analysis of static networks.
This allows us to compare and contrast the interface and performance of the
library with those of other network libraries. This example generates a set
of G(n, p) random networks and plots the largest connected component size
as a function of p, highlighting the emergence of a giant component.

import numpy as np
import reticula as ret
import matplotlib.pyplot as plt

from concurrent.futures import ThreadPoolExecutor
from functools import partial

def lcc_size(n, p):

state = ret.mersenne_twister()
g = ret.random_gnp_graph[ret.int64](n, p, state)
return len(ret.largest_connected_component(g))

n = 100000
ps = np.linspace(0, 2./n)

7

with ThreadPoolExecutor(max_workers=8) as e:
lccs = e.map(partial(lcc_size, n), ps)

plt.plot(ps, list(lccs))
plt.show()

As discussed before, the public function interface of the library is very
simple, as can be seen in the example above, for instance, in the call to the
function ret.largest_connected_component(g), which receives an undi-
rected network as input and returns its largest connected component by
number of vertices. The implementation of the G(n, p) random graph model
ret.random_gnp_graph[ret.int64](), on the other hand, requires infor-
mation as to the data type of vertices which is provided in the square brack-
ets. This serves a similar purpose to the dtype parameter for numpy arrays:
a = np.array([1, 2, 3], dtype=np.int64). Reticula, however, elected
to use the more modern generic type interface that has been introduced to
python for use in type hints, where for example, list[int] indicates a list
of integers and dict[int, str] indicates a dictionary with integer keys and
string values [30].

This allows for greater composability of types. For example, one can easily
deﬁne a second order static undirected network type where each vertex is an
undirected temporal edge with integers vertices and double precision ﬂoating
point timestamps:

g = ret.undirected_network[

ret.undirected_temporal_edge[
ret.int64, ret.double]]()

Use of the ThreadPoolExecutor from the Python standard library demon-
strates an example of using this library for parallel computation. The library
itself makes no assumption about the computational environment, e.g., by
na¨ıvely trying to use as many CPUs as possible, as this approach might
result in more problems than beneﬁts in a high-performance computation
environment. It is up to the user to specify the parallel computation model
based on the set of tools provided by the programming language and other li-
braries specialising for this purpose. For example, in this case, the parameter
maximum_workers determines the maximum number 8 CPU cores are kept
busy, which might have been determined based on memory limitations or the
allocated number of CPUs. The library, in turn, provides safety guarantees
for network and edge types and all the functions that consume these types
and makes sure to release the global interpreter lock as soon as possible.

Running this example produces a plot similar to Fig. 1, showing a clear
phase transition at p = pc = 10−5, which is equivalent to the critical average

8

Figure 1: Output ﬁgure of isotropic percolation example in Sec. 4.1 shows a phase transi-
tion in connectivity of random G(n, p) static networks.

degree and excess degree value (cid:104)k(cid:105) = 1.

4.2. Temporal network event time inhomogeneity and reachability

For this example, we generate a temporal network from a random G(n, p)
static network and self-exciting process activation times, shuﬄe away the cor-
relation of the inter-event times using one of the implemented microcanonical
randomised reference models and compare the change in reachability.

import reticula as ret
import reticula.microcanonical_reference_models as mrrm

from concurrent.futures import ThreadPoolExecutor
from functools import partial

def out_cluster_mass_at_t0(network, vertex):

return ret.out_cluster(

temporal_network=network, temporal_adjacency=adj,
vertex=vertex, time=0.0).mass()

n = 128
max_t = 256
state = ret.mersenne_twister()
ens = 100

9

0.000.250.500.751.001.251.501.752.00P1e501000020000300004000050000600007000080000Largest connected-component sizeself_exceiting_mean_masses = []
randomised_mean_masses = []
with ThreadPoolExecutor(max_workers=8) as e:

for _ in range(ens):

base_net = ret.random_gnp_graph[ret.int64](

n=n, p=2/n, random_state=state)

iet_dist = ret.hawkes_univariate_exponential[ret.double](

mu=0.2, alpha=0.8, theta=0.5)

g = ret.random_link_activation_temporal_network(
base_net, max_t, iet_dist, state)

adj = ret.temporal_adjacency.exponential[g.edge_type()](

rate=1.0, seed=0)

cluster_masses_g = list(e.map(

partial(out_cluster_mass_at_t0, g),
g.vertices()))

self_exceiting_mean_masses.append(

sum(cluster_masses_g)/len(cluster_masses_g))

randomised = mrrm.timeline_shuffling(

temporal_network=g, random_state=state,
t_start=0, t_end=max_t)

cluster_masses_rand = list(e.map(

partial(out_cluster_mass_at_t0, randomised),
randomised.vertices()))
randomised_mean_masses.append(

sum(cluster_masses_rand)/len(cluster_masses_rand))

print("mean mass with self-exciting inter-event times:",

sum(self_exceiting_mean_masses)/len(self_exceiting_mean_masses))

print("mean mass after timeline shuffling randomisation:",

sum(randomised_mean_masses)/len(self_exceiting_mean_masses))

This example produces ens = 100 random temporal networks from a
random G(n, p) static network and the Hawkes univariate exponential self-
exciting activation times. For each random network, it calculates the mean
temporal out-cluster mass. The temporal network is then randomised to re-
move the correlation between consecutive event times (the self-excitement)
using the timeline shuﬄing method [25] and mean temporal out-cluster masses
are calculated again. In this example, we used the exponential model of tem-
poral adjacency, meaning that the component mass conceptually resembles

10

the total human-hours of infection in an SIS model where the transition from
Infected back to Susceptible is governed by an exponential time with a rate
parameter, which set to 1.0 in this case.

The mean temporal out-cluster mass is calculated by computing out-
clusters from every vertex at t = 0 (in function out_cluster_mass_at_t0)
and averaging over the component mass.
It would be possible to use the
much faster and have a larger sample size of starting points and times by
using a probabilistic counting method to estimate all possible out-clusters,
but care has to be given to the fact that the event times in this example are
not distributed homogeneously.

Running the example produces a result similar to below

mean mass with self-exciting inter-event times: 2164.3724129038064
mean mass after timeline shuffling randomisation: 5539.766618496214

which can be interpreted as follows: Shuﬄing away the self-exciting prop-
erty of a random temporal network generated with the parameters presented
substantially increases the average reachability of the temporal network. Al-
though a proper study of such hypothesis requires stronger analytical meth-
ods, e.g.
in establishing signiﬁcance of diﬀerence in means masses, or to
conﬁrm this on empirical networks and a wider set of synthetic networks, all
of which is outside the scope of this example.

Note that the temporal networks are not copied to each thread, but a
single instance of the temporal network lives in the memory at each point
in time. Using network types in shared memory across threads is safe in
Reticula, as it is not possible to, perhaps inadvertently, modify the network
from one thread while reading from another thread.
In this example, the
user can be sure, without having to check the documentation or the imple-
mentation, that the function ret.out_cluster or any other function that
takes a network as an input does not modify the argument. This has the
eﬀect of reducing the risk of inadvertent data races and is a result of the
fact that the network types in Reticula are immutable. This is not guaran-
teed for other libraries presented in Tab. 1, which makes it hard to reason
about possible data races for igraph and SNAP network types, two network
libraries implemented as native extensions which also support multi-threaded
processing.

5. Conclusion

Reticula is a software library that natively handles directed and undi-
rected static networks, temporal networks, hypergraphs and temporal hy-
pergraphs with a uniﬁed programming interface with either Python or C++.

11

The library optimises the use of CPU cache and provides thread-safe types
and operations, making it suitable to use in a multi-threaded settings in
high-performance computation environment as well as on modern, high core-
count CPUs. Reticula enables the scientists to study the properties of very
large network datasets, construct and compare reference models and random
networks, and read and write networks to the disk.

Acknowledgements

We acknowledge the computational resources and technical consultation

provided by the Aalto Science-IT project.

References

[1] D. A. Wiley, S. H. Strogatz, M. Girvan, The size of the sync basin,
Chaos: An Interdisciplinary Journal of Nonlinear Science 16 (1) (2006)
015103. doi:10.1063/1.2165594.

[2] R. E. Mirollo, S. H. Strogatz, Synchronization of pulse-coupled biological
oscillators, SIAM Journal on Applied Mathematics 50 (6) (1990) 1645–
1662. doi:10.1137/0150098.

[3] J. T. Davis, N. Perra, Q. Zhang, Y. Moreno, A. Vespignani, Phase
transitions in information spreading on structured populations, Nature
physics 16 (5) (2020) 590–596. doi:10.1038/s41567-020-0810-3.

[4] M. Karsai, M. Kivel¨a, R. K. Pan, K. Kaski, J. Kert´esz, A.-L. Barab´asi,
J. Saram¨aki, Small but slow world: How network topology and bursti-
ness slow down spreading, Physical Review E 83 (2) (2011) 025102.
doi:10.1103/PhysRevE.83.025102.

[5] A. Badie-Modiri, Error and attack tolerance of public transportation
networks: a temporal networks approach, Master’s thesis, Aalto Uni-
versity (2018).

[6] A. Hagberg, P. Swart, D. S Chult, Exploring network structure, dy-
namics, and function using networkx, Tech. rep., Los Alamos National
Lab.(LANL), Los Alamos, NM (United States) (2008).

[7] G. Csardi, T. Nepusz, et al., The igraph software package for complex
network research, InterJournal, complex systems 1695 (5) (2006) 1–9.

12

[8] J. Leskovec, R. Sosiˇc, Snap: A general-purpose network analysis and
graph-mining library, ACM Transactions on Intelligent Systems and
Technology (TIST) 8 (1) (2016) 1. doi:10.1145/2898361.

[9] P. Holme, Modern temporal network theory: a colloquium, The Eu-
ropean Physical Journal B 88 (9) (2015) 1–30. doi:10.1140/epjb/
e2015-60657-4.

[10] P. Holme, J. Saram¨aki, Temporal network theory, Vol. 2, Springer, 2019.

[11] I. Scholtes, When is a network a network? multi-order graphical model
selection in pathways and temporal networks, in: Proceedings of the
23rd ACM SIGKDD international conference on knowledge discov-
ery and data mining, 2017, pp. 1037–1046. doi:10.1145/3097983.
3098145.

[12] M. Lucas, A. Morris, A. Townsend-Teague, L. Tichit, B. Habermann,
A. Barrat, Inferring cell cycle phases from a partially temporal network
of protein interactions, Available at SSRN 3900712 (2021). doi:10.
2139/ssrn.3900712.

[13] C. A. Joslyn, S. G. Aksoy, T. J. Callahan, L. E. Hunter, B. Jeﬀerson,
from
B. Praggastis, E. Purvine, I. J. Tripodi, Hypernetwork science:
multidimensional networks to computational topology, in: International
Conference on Complex Systems, Springer, 2020, pp. 377–392. doi:
10.1007/978-3-030-67318-5_25.

[14] N. Landry, L. Torres, I. Iacopini, M. Lucas, G. Petri, A. Patania, Com-

pleX Group Interactions (XGI) (2022).
URL https://xgi.readthedocs.io/

[15] A. Badie-Modiri, A. K. Rizi, M. Karsai, M. Kivel¨a, Directed percolation
in temporal networks, Phys. Rev. Research 4 (2022) L022047. doi:
10.1103/PhysRevResearch.4.L022047.

[16] A. Badie-Modiri, A. K. Rizi, M. Karsai, M. Kivel¨a, Directed percolation
in random temporal network models with heterogeneities, Phys. Rev. E
105 (2022) 054313. doi:10.1103/PhysRevE.105.054313.

[17] A. K. Rizi, A. Faqeeh, A. Badie-Modiri, M. Kivel¨a, Epidemic spreading
and digital contact tracing: Eﬀects of heterogeneous mixing and quaran-
tine failures, Phys. Rev. E 105 (2022) 044313. doi:10.1103/PhysRevE.
105.044313.

13

[18] W. Jakob, J. Rhinelander, D. Moldovan, pybind11 – seamless operability

between c++11 and python (2017).
URL https://github.com/pybind/pybind11

[19] I. O. for Standardization, Programming languages – c++, Standard,
International Organization for Standardization, Geneva, CH (12 2020).

[20] V. Batagelj, U. Brandes, Eﬃcient generation of large random networks,
Physical Review E 71 (3) (2005) 036113. doi:10.1103/PhysRevE.71.
036113.

[21] A.-L. Barab´asi, R. Albert, Emergence of scaling in random networks,
science 286 (5439) (1999) 509–512. doi:10.1126/science.286.5439.
509.

[22] M. Bayati, J. H. Kim, A. Saberi, A sequential algorithm for generating
random graphs, Algorithmica 58 (4) (2010) 860–910. doi:10.1007/
s00453-009-9340-1.

[23] F. Chung, L. Lu, Connected components in random graphs with given
expected degree sequences, Annals of combinatorics 6 (2) (2002) 125–
145. doi:10.1007/PL00012580.

[24] J. C. Miller, A. Hagberg, Eﬃcient generation of networks with given
expected degrees, in: International Workshop on Algorithms and Mod-
els for the Web-Graph, Springer, 2011, pp. 115–126. doi:10.1007/
978-3-642-21286-4_10.

[25] L. Gauvin, M. G´enois, M. Karsai, M. Kivel¨a, T. Takaguchi, E. Valdano,
C. L. Vestergaard, Randomized reference models for temporal networks,
arXiv preprint arXiv:1806.04032 (2018). doi:10.48550/arXiv.1806.
04032.

[26] P. Erd¨os, T. Gallai, Graphs with prescribed degrees of vertices, Mat.

Lapok 11 (1960) 264–274.

[27] D. J. Kleitman, D.-L. Wang, Algorithms for constructing graphs and
digraphs with given valences and factors, Discrete Mathematics 6 (1)
(1973) 79–88. doi:10.1016/0012-365X(73)90037-X.

[28] A. Badie-Modiri, M. Karsai, M. Kivel¨a, Eﬃcient limited-time reachabil-
ity estimation in temporal networks, Physical Review E 101 (5) (2020)
052303. doi:10.1103/PhysRevE.101.052303.

14

[29] M. Kivel¨a, J. Cambe, J. Saram¨aki, M. Karsai, Mapping temporal-
network percolation to weighted, static event graphs, Scientiﬁc reports
8 (1) (2018) 1–9. doi:10.1038/s41598-018-29577-2.

[30] G. van Rossum, J. Lehtosalo,

(cid:32)Lukasz Langa, Type hints, PEP 484,

Python Software Foundation (2014).
URL https://peps.python.org/pep-0484/

15

