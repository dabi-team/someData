2
2
0
2

r
p
A
8
1

]

O
R
.
s
c
[

1
v
5
9
4
8
0
.
4
0
2
2
:
v
i
X
r
a

Management

Martín2 ID , Camino Fernández1 ID , and Vicente Matellán1 ID

Miguel Á. González-Santamarta1 ID , Francisco J. Rodríguez-Lera1 ID , Francisco

¹ Universidad de León, León , España
{mgons, fjrodl, cferl, vmato}@ unileon.es
²Universidad Rey Juan Carlos, Madrid, España
{francisco.rico}@urjc.es

Abstract. The intelligent robotics community usually organizes knowledge into
symbolic and sub-symbolic levels. These two levels establish the set of symbols
and rules for manipulating knowledge based on their (symbol system - dictio-
nary). Thus, the correspondences - Grounding or knowledge representation- re-
quire speciﬁc software techniques for anchoring continuous and discrete state
variables between these two levels. This paper presents the design and evaluation
of an Open Source tool called KANT (Knowledge mAnagemeNT) to let different
components of the system architecture controlling the robot query, save, edit, and
delete the data from the Knowledge Base without having to worry about the type
and the implementation of the source data. Using KANT, components managing
subsymbolic information can smoothly interact with symbolic components. Be-
sides, implementation mechanisms used in KANT, such as the use of in-memory
and non-SQL databases, improve the performance of the knowledge management
systems in ROS middleware, as shown by the evaluations presented in this work.

draftKANT: A tool for Grounding and Knowledge

Software development for robots is nowadays built using speciﬁc middlewares, ROS
(Robotic Operating System [15]) being the de facto standard. Using these tools, mod-
ules in charge of the symbol generation are usually built as components that can be
reused among different projects. For instance, one component can be built to generate
grounded information about the presence of a speciﬁc set of objects (cups, glasses, etc.)
in the scene from images, another one can assess the presence of people from LIDAR

Wide-spreading of service robotics applications in the real world means that robots have
to perform long-term tasks in highly dynamic environments. Planning this long-term
tasks, in particular when interaction with humans is involved, requires acquiring, and
updating symbolic representations. Implementing this process is a complex task that
involving different techniques from the Artiﬁcial Intelligence ﬁeld, and using Software
Engineering technologies adapted to robotics.

Keywords: Robotics · Knowledge Management · Grounding · PDDL · ROS 2

Introduction

1

 
 
 
 
 
 
Authors Suppressed Due to Excessive Length

readings, etc. These components need to share the symbolic information that they gen-
erate into the symbol-based decision making system of the robot, that are usually based
on planning techniques.

The robot PDDL domain and problem deﬁnitions need to be maintained and up-
dated over time. There is not a standard way to manage and store PDDL knowledge
for robotic middleware, in particular for ROS. As a result, there are several different
methods such as single or multiple nodes for maintaining Domain and PDDL, thus, it
is complicated to compare or integrate PDDL mechanisms.

KANT intends to solve this problems by simplifying the technical process of inter-
acting with knowledge storage. In particular, facilitating the use of high-level languages
such as PDDL in "ROS 2" middleware, easing its use in real robots. It lets develop-
ers recognize PDDL objects by their names and attributes, providing an abstraction
to manage robot knowledge in practically any scenario, independently of the storage
technologies.

Symbolic planning systems are "abstract, explicit deliberation process that chooses
and organizes actions" [8] for changing the state of the robot or the environment. In
order to do that, they use symbolic representation of the capabilities of the robot given
by the designers (or learnt), and the symbolic representation of their knowledge about
the environment obtained by the grounding components previously mentioned. The de
facto standard way of representing all this knowledge is using high-level language as
PDDL [11] (Planning Domain Deﬁnition Language).

draft2

The inherent problems of PDDL manipulation can be solved using software design
patterns. This paper presents KANT1, as an approach for the encapsulation of the PDDL
language through four software design patterns in order to simplify the access to PDDL
information. Particularly, this work proposes the use of Data Transfer Object (DTO),
Data Access Object (DAO), Abstract Factory and Factory Method design patterns. As
a result, scalability, ﬂexibility and reusability are improved. Besides, developers do not
have to worry about the implementation of the storage implementation of the Knowl-
edge Base.

There are several software alternatives facing the problem of using different software
components for storing the knowledge of robots using PDDL. ROSPlan [3] is the
most popular planning solution in the ROS ecosystem. It provides a ROS node-based
"Knowledge Base" that allows managing knowledge expressed as PDDL. ROSPlan uses
the ROS communication interfaces, which involves creating the proper messages and
using the right clients for each case. For instance, querying and updating knowledge
have different messages, and PDDL types and PDDL propositions has different ROS

The rest of this paper is organized as follows. Section 2 explores the state of the
art. Section 3 describes the engine from a high level and development level. Section 4
report the description and results of our experiment. The paper shows the discussion of
our approach in Section 5 and conclusions are presented in Section 6.

1 https://github.com/uleroboticsgroup/kant

2 Related Work

3

The work presented in [5] uses the Entity-Component-System (ECS) pattern to cre-
ate actions similar to the PDDL actions. Then, those actions can be translated into
PDDL to be used by a planner. Nevertheless, a complete example of the use of PDDL
is not presented and it is only mentioned that PDDL actions can be obtained.

The authors in [7] introduce "Tool Ontology and Optimization Language" (TOOL),
which is based on OWL 2 [13]. TOOL has a domain-speciﬁc language (DSL) whose
elements are offered as Kotlin types that are created using the Factory Method design
pattern. The elements of this DSL are translated into an OWL ontology, which is clas-
siﬁed. Finally, the ontology is used to generate the PDDL domain that can be solved.
This means that an extra step for knowledge manipulation is required.

services. These services manage the data of the ROS node. This can be considered as
an in-memory solution which is inadequate for long-term accountability processes. Our
approach proposes a disconnected solution that allows its integration not only with ROS
but also with databases for storing knowledge. Besides, ROSPlan is available just for
ROS 1, and there are no plans to migrate it to ROS 2. Thus, KANT has been naively
developed for ROS 2.

PlanSys2 [10] is the alternative to ROSPlan in ROS 2. It offers advanced approaches,
such as the use of behavior trees to execute the generated plans, as well as command-
line options to interact with the knowledge base, which is composed of two ROS nodes,
one for the PDDL domain and another one for the PDDL problem. One of the limita-
tions of PlanSys2 is that PDDL support is not complete. It supports PDDL 2.1. Also,
for now, it only supports two plan solvers POPF and TFD. Besides, it also maintains a
certain grade of coupling to ROS due to the use of its communications mechanisms to
manipulate the PDDL knowledge.

draftKANT: A tool for Grounding and Knowledge Management

KANT presents a straightforward mecanism for managing the Knowledge Base, an
engine supported by software patterns for encapsulating knowledge, particularly ex-
pressed in PDDL, and allowing access and manipulation from different robot software
components. This approach enhances reusability, scalability and inter-operability of
robot components managing knowledge (from grounding to processing components)
in long-term tasks.

Other alternatives such as OARA architecture [4] deﬁnes a speciﬁc language (DSL)
to create robot skills that are the actions a robot needs to perform to achieve a mis-
sion. Then, using this language, the PDDL domain can be generated to be used in a
planner. However, the OARA approach based on DSL requires knowledge of this lan-
guage which makes it highly coupled to the architecture itself and KANT would be used
standalone just using in Python.

KANT is represented as a yellow intermediate in ﬁgure 1. Any robot component can
use it to access the Knowledge Base. As a result, any component can query and modify
knowledge in the same way and without caring about how it is stored. Besides, updating
the knowledge of a robot from sensors data is more simple thanks to it.

Representing knowledge using software patterns should be encouraged by new
software developers focused on robotics. DTO, which stands for "Data Transfer Ob-

3 Knowledge Management Engine

Fig. 1. Kant in a generic robotic architecture.

Authors Suppressed Due to Excessive Length

ject" [12], aims to transfer the data between software components. DTO pattern is used
to encapsulate PDDL information that can be shared between robotic components.

DTO pattern is used in KANT to create the classes that encapsulate the PDDL infor-
mation that afterwards is shared between robotic components. DTO is based on creating
private attributes that represent the data. These attributes must be accessed and edited
with the getter, setter and constructor functions. Following this, the

draft4

DAO is an abbreviation for Data Access Object[14]. It aims to use a software com-
ponent to abstract and encapsulate all access to the data source. The DAO handles the
connection to the data source to obtain and store data so it should encapsulate the logic
for retrieving, saving and updating data in your data storage (a database, a ﬁle system,
whatever). In this case, the data source will be the Knowledge Base where PDDL is
stored. There can be a DAO family for each storage type treated.

The PDDL elements have been encapsulated into DTO elements. Following this, we
have developed a DTO for each PDDL element. The structure of each PDDL element
modeled with the DTO pattern is the following:

The PDDL planning domain model used in this research is the PDDL 2.1[6] and is
deﬁned by the next tuple (cid:104)T, O, P, P, A(cid:105):

– Types: represent something and restrict what can form the parameters of an action.
– Objects: is a set of typed objects, allow to declare objects that are present in the

– Propositions: is a set of features that describe current the world.
– Actions: deﬁne the transformation between the states of the world.

– Predicates: represent something that can be true in the world. It can involve several

– Types: A type is composed of only one string attribute, which represents its name.

3.1 PDDL Abstractions in KANT

world with a twofold: name-type.

objects.

5

PDDL type; and one string attribute, which represents its name.

edge in the Knowledge Base. Three main functions can be used:

• A Condition/Effect DTO List attribute, which represents its effects.

name; and one Type DTO List attribute, which represents its arguments.

On the other hand, the DAO instances can be used to interact with the PDDL knowl-

– Objects: An object is composed of one Type DTO attribute, which represents its

– Predicates: A predicate is composed of one string attribute, which represents its

– Propositions: A proposition is composed of one string attribute, which represents
its name; and one Object DTO List attribute, which represents its PDDL objects. It
also has a boolean attribute, which represents if it is a goal.
– Actions: An action is composed of the following attributes:

• A string attribute, which represents its name.
• A boolean attribute, which represents if it is a durative action.
• An integer attribute, which represents its duration.
• An Object DTO List attribute, which represents its parameters.
• A Condition/Effect DTO List attribute, which represents its conditions. The
Condition/Effect DTO is similar to the Proposition DTO but it also has a string
attribute, which represents the moment the condition or effect must occur; and
a boolean attribute, which represents if it is a negative condition or effect.

draftKANT: A tool for Grounding and Knowledge Management

When combining DTO and DAO patterns, a robot component can query, save, edit
and delete the data from the Knowledge Base without having to worry about the type
and the implementation of the data source. That means that the DAO implementation
acts like an interface between the source code of the developers and the Knowledge
Base. Besides, the DTO pattern allows encapsulating the PDDL independently of the
type of storage used. The resulting architecture is presented in Figure 2. As a result, de-
velopers can manipulate and manage knowledge from source code enhancing reusabil-
ity, scalability and ﬂexibility.

– get: this function returns a DTO from the Knowledge Base. It provides access to
the current PDDL that the robot has to all robot components. In the case of PDDL
types, objects, predicates and actions, this function takes their names to search for
them. However, in the case of the PDDL propositions, there are three get functions:
get_by_predicate, to search for a list of propositions with a given predicate name;
get_goals, to search for the propositions that are goals; and get_no_goals, to search
for the propositions that are not goals.

Since the roboticist would have many DAO families such as sql-database, non-sql
databases, in memory solutions for storing robot knowledge, KANT deploys the Ab-
stract Factory Pattern. With this pattern, it is encapsulated different factories that have
something in common, that is the creation of DAO.

– save: this function is used to save a DTO. If the knowledge exists, it is updated. As

– delete: this function is also implemented in all DAO and is used to delete a DTO

a result, all robot components can produce knowledge for the robot.

from the Knowledge Base.

3.2

Fig. 2. KANT Architecture

Implementation Overview

Authors Suppressed Due to Excessive Length

This section presents a practical guide for applying KANT to manage PDDL knowl-
edge. To this end, the software approach for managing a simple robot task, the naviga-
tion between waypoints, using Code Listings (CL onwards), is schemed.

draft6

Translating the task to PDDL from the source code The roboticist and the AI re-
searcher need to focus on a single point, generating and managing a PDDL Domain
ﬁle. The PDDL domain ﬁle presents two types, robot and wp (waypoint); one predi-
cate, robot_at that implies if a robot is in a waypoint (wp); and one durative-action,
navigation, that models the navigation between waypoints for a time period and in-
volves a robot in a new waypoint from a previous waypoint. Besides, there are three
objects in the initial problem that are a robot named rb1 and two wp, wp1 and wp2.
Finally, the goal that wants to be achieved is to have the rb1 robot in wp2.

Using PDDL from the source code Firstly, the DTO classes are used. These classes
store the PDDL information. As a result, the PDDL types previously mentioned are
instantiated in Python using the PddlTypeDto class with the name of each type. This is
presented in CL 1.1.

Task and Knowledge A simple robot task is proposed as an example to illustrate how
the developer interacts with PDDL. The task consists of moving a robot called rb1; from
its current way-point, named wp1; to another way-point, labeled as wp2 in a period of
time of 10 seconds.

Code Listing 1.1. Python PDDL Types DTO Example.

= P d d l T y p e D t o ( " r o b o t " )
= Pd d l T y p e D t o ( "wp" )

1 r o b o t _ t y p e
wp_type

get()save()delete()Knowledge  BaseDAO ImplentationRobotic ComponentDTOretrievepersist2

7

" r b 1 " )

" wp1 " )
" wp2 " )

[ r o b o t _ t y p e , wp_type ] )

r b 1 = P d d l O b j e c t D t o ( r o b o t _ t y p e ,

r o b o t _ a t = P d d l P r e d i c a t e D t o ( " r o b o t _ a t " ,

p d d l _ g o a l _ d t o = P d d l P r o p o s i t i o n D t o ( r o b o t _ a t ,

p d d l _ p r o p o s i t i o n _ d t o = P d d l P r o p o s i t i o n D t o ( r o b o t _ a t ,

Code Listing 1.3. Python PDDL Objects DTO Example.

2 wp1 = P d d l O b j e c t D t o ( wp_type ,
wp2 = P d d l O b j e c t D t o ( wp_type ,

Code Listing 1.2. Python PDDL Predicates DTO Example.

Code Listing 1.4. Python PDDL Propositions DTO Example.

The creation of a PDDL object is similar to predicate creation. As it is presented in
1.3, a PDDL object can be created using the PddlObjectDto class that needs its name
and a PddlTypeDto instance.

The PDDL proposition is created using the PddlPropositionDto class with a Pddl-
PredicateDto instance and its PddlObjectDto instances. Besides, a proposition can be
marked as a goal using the is_goal argument (CL 1.4).

Predicates are created with the PddlPredicateDto class. The robot_at predicate is
presented in 1.2. This predicate is created with its name and the PddlTypeDto instances
of the necessary PDDL types.

draftKANT: A tool for Grounding and Knowledge Management

The action parameters are PddlObjectDto while conditions and effects are created
with a new class, PddlConditionEffectDto. The PddlConditionEffectDto instances are

PDDL actions are created using the PddlActionDto class. As it is shown in CL 1.5,

c o n d i t i o n _ 1 = P d d l C o n d i t i o n E f f e c t D t o ( r o b o t _ a t ,
t i m e = P d d l C o n d i t i o n E f f e c t D t o . AT_START )

t i m e = P d d l C o n d i t i o n E f f e c t D t o . AT_START ,
i s _ n e g a t i v e = T r u e )

Code Listing 1.5. Python PDDL Navigation Action DTO Example.

parameters, conditions and effects must be created.

2 s = P d d l O b j e c t D t o ( wp_type ,
d = P d d l O b j e c t D t o ( wp_type ,

12 e f f e c t _ 2 = P d d l C o n d i t i o n E f f e c t D t o ( r o b o t _ a t ,

8 e f f e c t _ 1 = P d d l C o n d i t i o n E f f e c t D t o ( r o b o t _ a t ,

p d d l _ a c t i o n _ d t o = P d d l A c t i o n D t o ( " n a v i g a t i o n " ,

t i m e = P d d l C o n d i t i o n E f f e c t D t o . AT_END)

r = P d d l O b j e c t D t o ( r o b o t _ t y p e ,

[ c o n d i t i o n _ 1 ] ,

i s _ g o a l = T r u e )

[ rb1 , wp2 ] ,

[ rb1 , wp1 ] )

[ e f f e c t _ 1 ,

e f f e c t _ 2 ] )

" s " )
" d " )

[ r , d ] ,

s , d ] ,

" r " )

s ] ,

s ] ,

[ r ,

[ r ,

[ r ,

14

10

16

6

4

the Knowledge Base.

Authors Suppressed Due to Excessive Length

4 Evaluation Procedure

2. Time to load initial PDDL (TtL): this is the time spent to load the initial PDDL

1. Time to reset PDDL (TtR): this is the time spent to delete all the knowledge from

These tasks are discretized and it is propsed temporal metric for modeling the en-
viornment. This experimental process evaluates the completion time of these ﬁve con-
secutive tasks that includes PDDL manipulation using KANT.

Because this competition domain is quite deterministic and dynamic, these tasks
are representative of a real-world performance. During performance, the robot needs
a considerable number of objects, actions, and propositions that are queried, created,
edited and deleted during execution.

For evaluating our proposal, it is proposed a high level task extracted and adapted from
ERL-SciRoc 2019 Deliver coffee shop orders chapter [1]. This task presents a robot
that will assist people in a coffee shop. The robots will take care of customers, by
taking orders and bringing objects to and from tables.

created like PddlPropositionDto instances but with the possibility of selecting the time,
if the action is durative. Conditions and effects can also be negative. The available times
for conditions and effects are AT_START, AT_END and OVER_ALL. Then, an action
can be created with its name, its parameters, a list of PddlObjectDto instances; and its
conditions and effects, two lists of PddlConditionEffectDto instances. In addition, an
action can be durative or not using the durative argument, which is True by default.

draft8

It is implemented two DAO families to be able to store PDDL: 1) MongoDB [2]
and 2) Knowledge Base in-memory using ROS 2. These families are deployed together
with the three-layer cognitive architecture MERLIN [9] and everything has been simu-
lated using a ROS 2 Foxy environment. An extended explanation of the experiment is
presented in the public GitHub Repository.

DAO in-memory approach presents an execution time of almost one hundred twenty-
two minutes. The mean time of each iteration is 2.432 seconds with a median of 2.385
seconds. The time to load the PDDL gets 52 minutes, resetting knowledge takes 13

After running 3000 times each test in a regular computer (laptop with 32 GB RAM and
an Intel(R) Core(TM) i7-8750H CPU @ 2.20GHz), the results presented in Table 1 and
Table 2 are obtained.

5. Time to guide a Person (TtG): this is the time spent to simulate the task of guiding

3. Time to check tables (TtC): this is the time spent to simulate the task of checking

4. Time to serve an Order (TtS): this is the time spent to simulate the task of serving

several tables.

4.1 Results

elements.

a person.

an order.

9

Total
2.432
0.446
1.312
4.722

TtS
0.364
0.152
0.16
1.618

TtC
0.465
0.18
0.218
2.065

TtG
0.29
0.137
0.114
1.489

TtL
1.051
0.285
0.527
3.041

TtC
0.329
0.008
0.299
0.411

TtS
0.288
0.007
0.262
0.344

TtG
0.216
0.006
0.194
0.264

TtL
0.612
0.014
0.569
0.756

Total
1.514
0.027
1.446
1.815

5 Discussion

Table 2. Manipulating PDDL using MongoDB.

Table 1. Manipulating PDDL using in-memory.

minutes, and the other tasks are performed in 23, 18 and 14 minutes in TtC, TtS and
TtG tasks.

TtR
Mean
0.263
Std Dev. 0.124
0.039
Min
0.805
Max
787.571 3152.132 1393.824 1093.036 869.431 7295.995
Sum

TtR
Mean
0.069
Std dev 0.002
0.063
Min
Max
0.1
Sum 206.676 1835.754 987.505 865.309 646.987 4542.231

The processes involved in knowledge management should present exactly what is hap-
pening behind the scenes in order to guarantee explainable reasoning in robotics. Be-
sides, the use of ROS 2 as the based middleware, simplify the use of KANT in state of
the art robots and ampliﬁes its impact on the overall community. This would avoid to
break the rule "Don’t reinvent the Wheel".

DAO MongoDB family deﬁnes an execution time of seventy-six minutes for the
same 3000 iterations. From the total time, 3.5 minutes were used for resetting the
database. Approximately 31 minutes were devoted to loading the PDDL information.
When dealing with the tasks we found that during the experiment, it spent 16 minutes
for the Checking the tables task, then 14 minutes for the Serving an Order and ﬁnally 10
minutes for the time to guide a person. Tables 1 and 2 present the descriptive statistics
of the overall experiment measured in seconds.

draftKANT: A tool for Grounding and Knowledge Management

The results collected also present the quality difference when the model is managed
by the right approach. KANT is a tool for easily using different storage systems. The
ﬁgures present the differences between storages, where the same experiment would be
carried out in a smaller period of time. For instance TtR spends a 70% fewer time in
MongoDb, consuming 35% lower of time for the full experiment. However, the inclu-
sion of databases are not always possible, leaving the selection at the discretion of the
researcher deploying the solution that ﬁts better to their robotic scenario.

In this paper, a novel approach for manipulating PDDL using software design patterns
has been proposed. This tool simpliﬁes the ways of interacting with PDDL knowledge
in run-time from a software engineer perspective. The evaluation has shown that KANTis
an efﬁcient tool usuful for easing the management of PDDL by robotic developers in
a standardized way. Authors believe that the models based on well known software
patterns together with the implemented solution in Python 3 would simplify the use of
PDDL as the common representation for symbolic planning in robotics.

As a future work, we plan to evaluate the performance of this approach in robotics
competition scenarios. We are also interested on analyzing from the educational point of
view if new robotic researchers can interact with PDDL more comfortably using KANT.

6 Conclusions

References

tional models. IEEE (2020)

Authors Suppressed Due to Excessive Length

4. Charles Lesire, D.D., Grand, C.: Formalization of robot skills with descriptive and opera-

6. Fox, M., Long, D.: Pddl2. 1: An extension to pddl for expressing temporal planning domains.

Finally, the current implementation needs to be upgraded with more PDDL elements
such as Numeric Fluents, in order to encompass modern versions of PDDL.

Acknowledgements The research described in this work has been partially funded by
the Kingdom of Spain under grant XXXX.

2. Bradshaw, S., Chodorow, K., Brazil, E.: MongoDB: the Deﬁnitive Guide: Powerful and Scal-
able Data Storage. The expert’s voice in open source, O’Reilly Media, Incorporated (2019),
https://books.google.es/books?id=ohGAvgAACAAJ

1. Basiri, M., Piazza, E., Matteucci, M., Lima, P.: Rulebook of the european robotic league
for consumer service robots (2018), https://eu-robotics.net/robotics_
league/erl-consumer

5. Fischbach, M., Wiebusch, D., Latoschik, M.E.: Semantic entity-component state manage-
ment techniques to enhance software quality for multimodal vr-systems. IEEE Transactions
on Visualization and Computer Graphics 23(4), 1342–1351 (2017). https://doi.org/
10.1109/TVCG.2017.2657098

3. Cashmore, M., Fox, M., Long, D., Magazzeni, D., Ridder, B., Carrera, A., Palomeras, N.,
Hurtós, N., Carreras, M.: ROSplan: Planning in the robot operating system. In: Proceedings
International Conference on Automated Planning and Scheduling, ICAPS. vol. 2015, pp.
333–341 (01 2015)

draft10

8. Ghallab, M., Nau, D., Traverso, P.: Automated Planning: theory and practice. Elsevier (2004)
9. González-Santamarta, M.Á., Rodríguez-Lera, F.J., Álvarez-Aparicio, C., Guerrero-Higueras,
Á.M., Fernández-Llamas, C.: MERLIN a cognitive architecture for service robots. Applied
Sciences 10(17), 5989 (aug 2020). https://doi.org/10.3390/app10175989
10. Martín, F., Ginés, J., Rodríguez, F.J., Matellán, V.: Plansys2: A planning system framework
for ros2. In: IEEE/RSJ International Conference on Intelligent Robots and Systems, IROS
2021, Prague, Czech Republic, September 27 - October 1, 2021. IEEE (2021)

7. Gavran, I., Mailahn, O., Müller, R., Peifer, R., Zufferey, D.: Tool: Accessible automated
reasoning for human robot collaboration. In: Proceedings of the 2018 ACM SIGPLAN In-
ternational Symposium on New Ideas, New Paradigms, and Reﬂections on Programming and
Software. p. 44–56. Onward! 2018, Association for Computing Machinery, New York, NY,
USA (2018). https://doi.org/10.1145/3276954.3276961

13. Motik, B., Patel-Schneider, P.F., Parsia, B., Bock, C., Fokoue, A., Haase, P., Hoekstra, R.,
Horrocks, I., Ruttenberg, A., Sattler, U., et al.: Owl 2 web ontology language: Structural
speciﬁcation and functional-style syntax. W3C recommendation 27(65), 159 (2009)

15. Quigley, M., Conley, K., Gerkey, B., Faust, J., Foote, T., Leibs, J., Wheeler, R., Ng, A.Y.,
et al.: Ros: an open-source robot operating system. In: ICRA workshop on open source soft-
ware. vol. 3, p. 5. Kobe, Japan (2009)

11. McDermott, D., Ghallab, M., Howe, A., Knoblock, C., Ram, A., Veloso, M., Weld, D.,

14. Nock, C.: Data access patterns: database interactions in object-oriented applications.

12. Monday, P.B.: Implementing the data transfer object pattern. In: Web Services Patterns:

Wilkins, D.: Pddl-the planning domain deﬁnition language (1998)

Journal of artiﬁcial intelligence research 20, 61–124 (2003)

Java™ Platform Edition, pp. 279–295. Springer (2003)

Addison-Wesley Boston (2004)

