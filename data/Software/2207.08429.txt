A Software Tool for ”Gluing” Distributions

Peter Werner∗
Institut f¨ur Physik, Universit¨at Oldenburg, 26111 Oldenburg, Germany
(Dated: July 19, 2022)

When performing Monte-Carlo simulations, distributions are sometimes determined only for sub-
intervals of the desired total range. In such cases, a frequent problem is to connect, or glue, individual
distributions to obtain the ﬁnal result. Most prominent examples, where this is usually necessary,
are certain large-deviation simulation techniques. However, there are multiple approaches to do this,
depending on the data and individual requirements. Here, a software tool is presented, containing
multiple algorithms, to aid with this task. An introduction to the available methods is presented
together with a short tutorial using exemplary data.

CONTENTS

A. How to obtain the tool?

I. Introduction

A. How to obtain the tool?
B. How to run the tool?

II. Gluing Algorithms

A. Least-Squares-Method
B. Ferrenberg-Swendsen-Method

III. Tutorial

A. Raw unbiased data
B. Histogrammed unbiased data
C. Raw biased data
D. Histogrammed biased data

IV. Final Remarks

A. Analytical solution for LSQRS method weight

factors

References

1
1
1

1
2
2

2
2
3
3
3

3

4

4

I.

INTRODUCTION

In large-deviation Monte-Carlo simulations [1–4] usu-
ally multiple runs are performed that are targeting dif-
ferent ranges for the quantity of interest to obtain its
distribution in the desired regime of rare events. One
important part of the data post-processing is to connect
the individual histograms to one ﬁnal distribution. The
software tool that is showcased here was originally devel-
oped with this speciﬁc use case in mind, but also extends
beyond. It can be useful for any variant of Monte-Carlo
simulation, even without a relation to large-deviations,
and experimental data alike.

In the following, it is ﬁrst explained how to obtain
and run the tool. Subsequently, there is a description of
the implemented algorithms. Finally, a tutorial is given
that demonstrates the core functionality using exemplary
data.

∗ peter.werner@uni-oldenburg.de

The tool is available through the repository [5], from
where it can either be cloned via git or directly down-
loaded by a web-browser.
It comes in the form of a
python3-script.

B. How to run the tool?

To run the script, a recent version of Anaconda [6] is
recommended. Otherwise, the following libraries must be
installed in a local python3 environment: numpy, gmpy2,
matplotlib and scipy. As a starting point, typing

python3 distribution_gluer.py --help

into a command line will display an overview of all op-
tions. The displayed help-output also serves as the main
reference for the program.

II. GLUING ALGORITHMS

The tool can handle raw data, which is naively just a
ﬁle containing one column of real valued numbers, or data
that is already processed into a histogram. For raw data,
the tool can determine the corresponding histograms by
itself. In any case, as a result of numerical simulations
[7, 8] or obtained otherwise, let there be N histograms
HΘi(x) with i = 1, . . . , N for an arbitrary bin center
value x. The corresponding errors are denoted by σΘi (x).
The value Θi is a simulation parameter on which the
histograms depend, usually the temperature or a tem-
perature like parameter. For example in large deviation
simulations [1–4], these are typically used to control the
extend by which the simulation is steered towards rare
events. Here, Θi is referred to as a pseudo-temperature,
even though it can be an actual temperatures as well.
This dependence can, but does not have to, result in a
bias that needs to be accounted for prior to connecting
the distributions by multiplying with a factor f (Θ, x):

Hi(x) = HΘi(x)f (Θi, x)
σi(x) = σΘi(x)f (Θi, x).

(1)
(2)

2
2
0
2

l
u
J

8
1

]
n
a
-
a
t
a
d
.
s
c
i
s
y
h
p
[

1
v
9
2
4
8
0
.
7
0
2
2
:
v
i
X
r
a

 
 
 
 
 
 
This factor could be just f (Θ, x) = 1 in case all pseudo-
temperatures are the same Θi = Θ, but the histograms
were determined over diﬀerent intervals (e.g. as it is the
case for Wang-Landau sampling [9, 10]). Or when the
overall quantity of interest is the energy-state-density of
a physical system following the Boltzmann-distribution,
the factor would be f (Θ, x) = exp (x/Θ).

2

At

in time,

this point

two
ways, namely the Least-Squares (LSQRS) and the
Ferrenberg-Swendsen (FS) [11] method, to connect his-
tograms/distributions, which are described brieﬂy in the
following.

oﬀers

tool

the

A. Least-Squares-Method

The LSQRS method tries to minimize the squared dif-

ference

∆(gi, gj) =

(cid:88)

x∈Mi,j

(giHi(x) − gjHj(x))2
i (x) + σ2
σ2

j (x)

(3)

between two histograms i, j = 1, . . . , N and i (cid:54)= j, where
Mi,j is the set of bins x for which both histograms have
a non-zero count, i.e. Hi(x) (cid:54)= 0 ∧ Hj(x) (cid:54)= 0. Addi-
tionally, the weights gi, gj (cid:54)= 0 have to fulﬁll the side
condition of a normalized total distribution. There is an
analytical solution to eq. (3) (see appendix A) resulting
in a weighting factor gi for each histogram. Subsequently,
these are used to determine the ﬁnal probability density
and uncertainty

p(x) =

σp(x) =

(cid:80)N

i=1

(cid:80)N

j=1

giHi(x)
(giσi(x))2
1
(gj σj (x))2

1

(cid:113)(cid:80)N
i=1

1
(giσi(x))2

.

(4)

(5)

B. Ferrenberg-Swendsen-Method

The FS method assumes a particular bias of f (Θi, x) =
exp (x/Θi) on the histograms HΘi(x), which is in con-
trast to the LSQRS method that works with any form of
bias. According to [11], the ﬁnal distribution is obtained
by solving the equations

FIG. 1. Program output plot example for raw unbiased data.
Top: Glued/Rescaled distributions using the LSQRS method.
Bottom: Original histograms determined by the gluing tool.

III. TUTORIAL

This tutorial assumes basic knowledge in using a com-
mand line interpreter/shell (e.g. bash). The tool comes
with example data contained in the archive ﬁle exam-
ple data.zip, which should be unpacked before trying the
following commands. The data can either be in raw form
or already be histogramed. For reference on the speciﬁc
ﬁle formatting, see the -f option of the help-output. In
order to process raw data the -c option has to be selected,
which will let the tool create the histograms by itself (see
[12] for technical reference; the bins=’auto’ argument is
used). For convenience also the -P option is set in the
following commands, yielding a plot of the result. The
displayed ﬁgure shows in the bottom plot the original
histograms and in the top one, depending on the gluing
method, for LSQRS the individual reweighted histograms
and for FS the ﬁnal distribution. The legend indicates
the corresponding pseudo-temperatures when provided.
The ﬁnal distribution is written to the output ﬁle out-
put.txt as speciﬁed by the -o option. If no gluing method
is set, the tool defaults to LSQRS.

(cid:80)N

i=1 HΘi(x)
− x
+hj (cid:80)
Θj

˜x HΘj (˜x)

p(x) =

e−hi =

(cid:80)N

(cid:88)

j=1 e
p(x)e− x

Θi

A. Raw unbiased data

(6)

(7)

In order

to combine all ﬁles

in the directory

raw unbiased data into one distribution, the command

x

numerically for hi (i = 1, . . . , N ) with an iterative pro-
cedure. The uncertainty on p(x) is given by [11]

python3 distribution_gluer.py -f \
example_data/raw_unbiased_data/* -c -P \
-o output.txt

σp(x) =

p(x)

(cid:114)(cid:16)(cid:80)N

i=1 HΘi(x)

.

(cid:17)

(8)

can be used. An example of how the displayed plot might
look like is given in Fig. 1.
To improve the result, separate binning intervals can be

−4−2024Bin Value10−710−510−310−1Rescaled Probability−4−2024Bin Value10−610−410−2100Original Probabilityspeciﬁed using the -b BINNING SEPERATOR1 BIN-
NING SEPERATOR2 ... option. Each of the separator
variables marks the interval edges for which the inter-
nal binning algorithm is run independently. This can be
helpful, when there are regions with fewer data points:

python3 distribution_gluer.py -f \
example_data/raw_unbiased_data/* -c -P \
-o output.txt -b -3 3

It is also possible to completely ignore any standard de-
viation on the histogram bins with the -i option:

python3 distribution_gluer.py -f \
example_data/raw_unbiased_data/* -c -P \
-o output.txt -b -3 3 -i

Sometimes it is useful to cut oﬀ outlying values from
the individual histograms, before applying the LSQRS-
method. The -s STD MULTIPLE option will discard
any bins that are more than the speciﬁed multiple of the
standard deviation away from the mean:

python3 distribution_gluer.py -f \
example_data/raw_unbiased_data/* -c -P \
-o output.txt -b -3 3 -s 3

B. Histogrammed unbiased data

Like with the case of raw unbiased data, it is possible to
combine data that is already processed into histograms:

python3 distribution_gluer.py -f \
example_data/histogrammed_unbiased_data/* \
-P -o output.txt

C. Raw biased data

For biased data, pseudo temperatures have to be pro-
vided (option -p PSEUDO1 PSEUDO2 ...), where a bias
of the form f (Θi, x) = exp (x/Θi) is assumed. The FS
method is selected via the -g FS option. In the following
command, also a ﬁle containing speciﬁc bin edges (option
-B BINNING FILE ) is provided:

PSEUDO={-10.0,10.0,-2.0,2.0,-4.0,4.0,\

-6.0,6.0,-8.0,8.0,inf};\

python3 distribution_gluer.py -f \
$(eval echo example_data/raw_biased_data\
/pseudo_$PSEUDO.dat) \
-p $(eval echo $PSEUDO) \
-B example_data/raw_biased_data\
/bin_edges.txt -c -P -o output.txt -g FS

3

FIG. 2.
Program output plot example for biased his-
togrammed data. Top: Glued ﬁnal distribution using the
FS method. Bottom: Original biased histograms at diﬀerent
pseudo-temperatures Θi provided to the gluing tool.

PSEUDO={-10.0,10.0,-2.0,2.0,-4.0,4.0\
,-6.0,6.0,-8.0,8.0,inf};\
python3 distribution_gluer.py -f \
$(eval echo example_data\
/histogrammed_biased_data\
/pseudo_$PSEUDO.dat) \
-p $(eval echo $PSEUDO) -P \
-o output.txt -g FS

An example of the program output plot for this command
is displayed in Fig. 2.
Biased histograms can also be treated with the default
LSQRS method using:

PSEUDO={-10.0,10.0,-2.0,2.0,-4.0,4.0\

,-6.0,6.0,-8.0,8.0,inf}; \

python3 distribution_gluer.py -f \
$(eval echo example_data\
/histogrammed_biased_data\
/pseudo_$PSEUDO.dat) \
-p $(eval echo $PSEUDO) -P -o output.txt

IV. FINAL REMARKS

D. Histogrammed biased data

Again, it is also possible to work with histograms of

biased data directly:

The tool is in continuous development and any com-
ments and suggestions for improvement are very wel-
come. The author wishes to thank Alexander K. Hart-
mann for carefully reading the manuscript and testing
the program.

−30−20−100102030Bin Value10−810−710−610−510−410−310−210−1Final Probability−30−20−100102030Bin Value10−610−510−410−310−210−1Original ProbabilityP eudo-Temperature -10.0-8.0-6.0-4.0-2.02.04.06.08.010.0inf4

Appendix A: Analytical solution for LSQRS method
weight factors

Rewriting eq.

(3) with relative weights gij := gj/gi
(relative weights have two indices and absolute weights
one) yields

˜∆(gij) :=

(cid:88)

x∈Mi,j

(Hi(x) − gijHj(x))2
i (x) + σ2
σ2

j (x)

.

(A1)

For relative weights between non-overlapping histograms
(i.e. M = ∅) eq. (A2) is not applicable. However, these
can be calculated in a chain like manner. When gij and
gjk with i (cid:54)= j (cid:54)= k are known and the relative weight of
interest gik can not be calculated directly via eq. (A2),
it is still possible to use

gik =

gk
gi

=

gj
gi

gk
gj

= gijgjk.

(A3)

The minimal squared diﬀerence must satisfy the condi-
tion ∂ ˜∆
∂gij

!= 0, resulting in

By ﬁxing one of the absolute weight factors (e.g. gi) such
that the total distribution is normalized, all other weights
gj are determined by

gij =

(cid:80)

x∈Mi,j

(cid:80)

x(cid:48)∈Mi,j

Hi(x)Hj (x)
i (x)+σ2
σ2
j (x)
H 2
j (x(cid:48))
i (x(cid:48))+σ2
σ2

j (x(cid:48))

.

(A2)

gj = gijgi.

(A4)

[1] A. K. Hartmann, Phys. Rev. E 65, 056102 (2002).
[2] A. K. Hartmann, Phys. Rev. E 89, 052103 (2014).
[3] J. B¨orjes, H. Schawe, and A. K. Hartmann, Phys. Rev.

[8] M. E. J. Newman and G. T. Barkema, Monte Carlo meth-

ods in statistical physics (1999).

[9] F. Wang and D. P. Landau, Phys. Rev. Lett. 86, 2050

E 99, 042104 (2019).

(2001).

[4] P. Werner and A. K. Hartmann, Phys. Rev. E 104,

[10] T. Vogel, Y. W. Li, T. W¨ust, and D. P. Landau, Phys.

034407 (2021).

[5] https://gitlab.uni-oldenburg.de/

ag-computerphysik/distribution-gluer,.

[6] https://www.anaconda.com/products/individual,.
[7] A. K. Hartmann, Big Practical Guide to Computer
Simulations, 2nd ed. (WORLD SCIENTIFIC, 2015)
https://www.worldscientiﬁc.com/doi/pdf/10.1142/9019.

Rev. E 90, 023302 (2014).

[11] A. M. Ferrenberg and R. H. Swendsen, Phys. Rev. Lett.

63, 1195 (1989).

[12] https://numpy.org/doc/stable/reference/

generated/numpy.histogram_bin_edges.html,.

