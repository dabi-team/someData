18th Int. Conf. on Acc. and Large Exp. Physics Control Systems
ISSN: 2226-0358
ISBN: 978-3-95450-221-9

ICALEPCS2021, Shanghai, China
doi:10.18429/JACoW-ICALEPCS2021-WEPV042

JACoW Publishing

APPLYING MODEL CHECKING TO HIGHLY-CONFIGURABLE SAFETY
CRITICAL SOFTWARE: THE SPS-PPS PLC PROGRAM

B. Fern√°ndez‚àó, I. D. Lopez-Miguel, J-C. Tournier, E. Blanco,
T. Ladzinski, F. Havart, CERN, Geneva, Switzerland

Abstract

An important aspect of many particle accelerators is the
constant evolution and frequent configuration changes that
are needed to perform the experiments they are designed for.
This often leads to the design of configurable software
that can absorb these changes and perform the required con-
trol and protection actions. This design strategy minimizes
the engineering and maintenance costs, but it makes the
software verification activities more challenging since safety
properties must be guaranteed for any of the possible con-
figurations.

Software model checking is a popular automated verifica-
tion technique in many industries. This verification method
explores all possible combinations of the system model to
guarantee its compliance with certain properties or spec-
ification. This is a very appropriate technique for highly
configurable software, since there is usually an enormous
amount of combinations to be checked.

This paper presents how PLCverif, a CERN model check-
ing platform, has been applied to a highly configurable Pro-
grammable Logic Controller (PLC) program, the SPS Per-
sonnel Protection System (PPS). The benefits and challenges
of this verification approach are also discussed.

INTRODUCTION
Model checking is a popular verification technique that
has been applied in many industries to guarantee that a criti-
cal system meets the specifications. Model checking algo-
rithms explore all possible combinations of a system model,
trying to find a violation of the formalized specification in
the model. This technique is very appropriate for highly
configurable projects, since it is necessary to guarantee the
safety of the system for all possible configurations.

When model checking shows a discrepancy between the
PLC program and the specification, it means that either the
PLC program has a bug or the specification is incomplete or
incorrect.

In the domain of critical PLC programs, several re-
searchers and engineers published their experiences in the
field. To name but a few, in [1] the authors translate the PLC
program of an interlocking railway system, written in the
FBD (Function Block Diagrams) language, into the input
format language of NuSMV to verify their specification writ-
ten as CTL (Computation Tree Logic) properties. In [2], the
PLC program that controls the doors‚Äô opening and closing
in the trains from the Metro in Bras√≠lia, Brazil, was formally
verified. In this case, a B model [3] is created automatically

‚àó borja.fernandez.adiego@cern.ch

from the PLC code. This model is formally verified using
the model checker ProB [4].

When applying model checking to PLC programs, three
main challenges are faced: (1) building the mathematical
model of the program, (2) formalizing the requirements
to be checked and (3) the state-space explosion, i.e.
the
number of possible input combinations and execution traces
is too big to be exhaustively explored. In our case, we use
the open-source tool PLCverif[5], developed at CERN. It
creates automatically the models out of the PLC program and
integrates three state-of-the-art model checkers: nuXmv [6],
Theta [7] and CBMC [8]. It also implements some reduction
and abstraction mechanisms to reduce the number of states
to be explored and to speed up the verification. Therefore,
challenges 1 and 3 are transparent for the user. There are
certainly still limitations and large state-space PLC program
models cannot be verified. Regarding challenge 2, PLCverif
also provides mechanisms to help the users to formalize their
requirements and provide a precise specification. However,
this is normally a difficult task, specially for configurable
programs. In this paper, we will show examples of functional
requirements formalization with PLCverif. More details
about PLCverif can be found in [5, 9].

This paper aims to show the benefits of applying model
checking to verify highly configurable PLC programs. In
such systems, it is usually unfeasible to check all possi-
ble combinations by traditional testing methods and model
checking is a good complement to these methods, especially
for module verification.

In particular, this paper shows how PLCverif was applied
to the PLC programs of the SPS Personnel Protection System
(PPS) [10] and how it helped to improve their original speci-
fication and correct PLC bugs before the commissioning of
the system.

SPS PERSONNEL PROTECTION SYSTEM

The SPS-PPS is a large distributed control system in
charge of the access control and the personnel protection of
the SPS accelerator.

The SPS has 16 access zones divided in different sectors
and each access zone has an access point. Several access
zones are always interlocked with the same elements inhibit-
ing operation with beam when a hazardous event is detected.
This is the concept of a safety chain. Each safety chain con-
tains the "important safety elements" to stop the beam (EISb)
when a hazardous event is detected or to avoid access (EISa)
when the accelerator is in Beam mode.

All details of the system can be found in [10].

2
2
0
2

r
a

M
0
3

]
E
S
.
s
c
[

1
v
8
4
1
6
1
.
3
0
2
2
:
v
i
X
r
a

I

O
D
d
n
a

,
r
e
h
s
i
l
b
u
p

,

k
r
o
w
e
h
t

f
o
e
l
t
i
t

,
)
s
(
r
o
h
t
u
a

e
h
t

o
t

n
o
i
t
u
b
i
r
t
t
a

n
i
a
t
n
i
a
m

t
s
u
m
k
r
o
w
s
i
h
t

f
o

n
o
i
t
u
b
i
r
t
s
i
d

y
n
A

.
)
2
2
0
2
¬©

(

e
c
n
e
c
i
l

0
.
3
Y
B
C
C
e
h
t

f
o

s
m
r
e
t

e
h
t

r
e
d
n
u
d
e
s
u
e
b
y
a
m
k
r
o
w
s
i
h
t

m
o
r
f

t
n
e
t
n
o
C

b
c

 
 
 
 
 
 
GI

Central layer

Site layer

Site 1

Site 2

Site 16

TIA Portal - FBD

Specification

OpennessScripter

User

XML - FBD

Formalized spec.

PLCverif

Instruction List

Equipment layer

AP 1

AP 2

AP 16

nuXmv

CBMC

Theta

Figure 1: Simplified SPS-PPS PLC interlock architecture

The SPS evolves with time as new access zones are added
or existing ones modified. For that reason, a configurable
system was designed.

Hardware architecture

The SPS-PPS safety-interlock part is based on Siemens
S7-1500F series of PLC controllers. It is formed by the
following 3 layers as shown in Figure 1:

‚Ä¢ The central layer is composed by the Global Interlock
(GI) PLC. This PLC receives the information of all the
Site PLCs and computes, for example, the conditions to
allow Beam or Access modes to each safety chain and
the conditions to apply veto to all the EISa and EISb
associated to the safety chain.

‚Ä¢ The site layer is composed by 16 Site PLCs (1 PLC per
access zone). These PLCs monitor the EISa devices
(doors, emergency handles, etc.), receive the status
from the AP PLCs, perform some automatic control
procedures (e.g. patrol management) and apply the
safety interlock actions (e.g. stop the beam) with the
commands received from the GI PLC for each access
zone.

‚Ä¢ The equipment layer is composed by 16 Access Point
(AP) PLCs (1 PLC per access point). They monitor
and control the PAD (Personnel Access Device) and
the MAD (Material Access Device) of the access point.

Software architecture

All Site PLCs run the same generic PLC program, a com-
mon logic for all of them with a specific configuration for
each access zone. The logic is composed by a set of Func-
tions (FC) and Function Blocks (FBs) executed sequentially
from a cyclic interrupt every 300 ms. Each access zone has
a different configuration, indicating for example how many
EISa and EISb are installed in each of them, in which sector
they are located and to which safety chain they belong.
A similar approach is in place for the AP PLCs.
The GI PLC contains less configurable parameters since
it communicates with all Site PLCs, having a global view of
the system.

Satisfied

Violated

Figure 2: PLCverif workflow to verify TIA portal Safety
programs

Software modules specification

The different program modules (FC and FBs) are specified
in a detailed design document. It contains 106 formulas that
describe the requirements for the 29 FC and FBs.

The chosen formalism for the specification is a simple if-
else conditional statement that contains Boolean formulas, as
shown in the example specification 1. The goal was to have
a simple pseudo-formal specification providing precise and
unambiguous requirements for each module of the system.

Specification 1 Template for specifying protection actions
of the Safety program

if (Boolean expression condition) then

else if (Boolean expression condition 2) then

ùëü ùëíùë†ùë¢ùëôùë° ‚Üê 0

ùëü ùëíùë†ùë¢ùëôùë° ‚Üê 1

else

ùëü ùëíùë†ùë¢ùëôùë° ‚Üê ùëü ùëíùë†ùë¢ùëôùë°

end if

MODULES VERIFICATION WITH
PLCVERIF
PLCverif was the tool to apply model checking to the
SPS-PPS modules (FC and FBs). All the necessary model
transformations to create the formal model of the PLC pro-
gram are done automatically. The user only needs to provide
the exported PLC program from the programming environ-
ment tool, Siemens TIA Portal1, import it into PLCverif and
finally formalize the requirements to be verified.

Figure 2 shows the workflow to verify a FC or FB from a

TIA Portal safety PLC project with PLCverif:

1. The project is hosted in TIA Portal and the PLC pro-
gram is written in the FBD (Function Block Diagram)
programming language. An example of how this lan-
guage looks like is shown in Figure 3. Here an AND
gate and an OR gate are displayed.

1 https://new.siemens.com/global/en/products/automation/

industry-software/automation-software/tia-portal/
software.html

I

O
D
d
n
a

,
r
e
h
s
i
l
b
u
p

,

k
r
o
w
e
h
t

f
o
e
l
t
i
t

,
)
s
(
r
o
h
t
u
a

e
h
t

o
t

n
o
i
t
u
b
i
r
t
t
a

n
i
a
t
n
i
a
m

t
s
u
m
k
r
o
w
s
i
h
t

f
o

n
o
i
t
u
b
i
r
t
s
i
d

y
n
A

.
)
2
2
0
2
¬©

(

e
c
n
e
c
i
l

0
.
3
Y
B
C
C
e
h
t

f
o

s
m
r
e
t

e
h
t

r
e
d
n
u

d
e
s
u

e
b
y
a
m
k
r
o
w
s
i
h
t

m
o
r
f

t
n
e
t
n
o
C

b
c

var1

var2

AND

tmp1

OUT

IN1

IN2

< Wire UId = " 136 " >
< NameCon UId = " 97 " Name = " out " / >
< IdentCon UId = " 23 " / >
</ Wire >

NOT

OR

tmpn

IN OUT

IN1

result

varn

OUT

IN2

Figure 3: FBD program example

2. Taking advantage of the Siemens OpennessScripter
tool2, the program is exported to XML (F_FBD XML
format). An example of how an AND gate is repre-
sented in this language is shown in listing 1.

3. PLCverif can then import that XML code, translating it
into STL code, which can be understood by PLCverif.
Subsequently, it creates the formal models.

4. From the specification created by the process engineers,
the user needs to formalize the requirements, such as
the assertion shown in Listing 2. This can be direct
input to PLCverif.

5. Finally, PLCverif executes one of the model checking
backends and generates a report, stating whether the
property is satisfied or violated. In case it is violated,
it shows the trace leading to that property failure (the
counterexample).

Listing 1: XML code exported from TIA portal representing
an AND gate

<! -- Input variables -- >
< Access Scope = " LocalVariable " UId = " 21 " >
< Symbol >
< Component Name = " var1 " / >
</ Symbol >
</ Access >
< Access Scope = " LocalVariable " UId = " 22 " >
< Symbol >
< Component Name = " var2 " / >
</ Symbol >
</ Access >

<! -- AND block -- >
< Part Name = " And " UId = " 97 " >
< TemplateValue Name = " Card " Type = " Cardinality " >2 </

TemplateValue >

< TemplateValue Name = " SrcType " Type = " Type " > Word </

TemplateValue >

</ Part >

<! -- Connecting the inputs with the block -- >
< Wire UId = " 134 " >
< IdentCon UId = " 21 " / >
< NameCon UId = " 97 " Name = " in1 " / >
</ Wire >
< Wire UId = " 135 " >
< IdentCon UId = " 22 " / >
< NameCon UId = " 97 " Name = " in2 " / >
</ Wire >

<! -- Output variable -- >

2 https://support.industry.siemens.com/cs/us/en/view/

109742322

Listing 2: Example of a PLCverif assertion

// # ASSERT ( var1 AND var2 ) = result ;

VERIFICATION RESULTS AND
ANALYSIS
Although various safety functions were verified during
this project, due to space limitations for this paper, only two
of them will be shown here: the SIF-X1 Function from the
Site PLCs and the SIF-2 Function from the GI PLC. Each
of these PLC Functions implements several requirements of
a similar nature and each of these requirements was verified
with PLCverif by including an assertion which represents
the mathematical Boolean formula given for that require-
ment. After executing a verification case with PLCverif, the
following outcomes can occur:

‚Ä¢ Satisfied property. It will be shown in example 1 from

SIF-X1.

‚Ä¢ Violated property. The reasons why this happens need
to be further investigated, leading to the following two
possibilities:

‚Äì Incomplete specification. Example 2 from SIF-2.
‚Äì Bug in the program. Example 3 from SIF-2.

SIF-X1 Function

This function is in charge of monitoring all the EISa of
the access zone and computing the status (safe or unsafe) for
each safety chain.

Example 1 - Satisfied property. The selected require-
ment for this use case is the following: For each Safety
Chain, this Function monitors all the EISa that are installed
in the access zone and belong to the Safety Chain. It also
receives the status from its access point (PAD, MAD and
token distributor status). If all these elements are in a safe
state, it returns a Boolean variable indicating that the Safety
Chain is safe.

The formalized requirement is shown in specification 2,

where

ùëñ is the EISa index,

ùëó is the safety chain index,
ùëÅùëñ is the number of EISa assigned to the safety chain ùëó (the
maximum number of EISa per access zone is 32),
ùêº_ùê∏ ùêºùëÜùëé_ùëÉùëúùë†[ùëñ]_ùëÜùë°ùëéùë° represents the status of the EISa ùëñ:

true if ùëñ is closed,

ùêº_ùê∏ ùêºùëÜùëé_ùëÉùëà [ùëñ]_ùëÜùë°ùëéùë° represents the status of the emer-
gency handle of the EISa ùëñ: true if the emergency handle
is armed, ùêº_ùê∏ ùêºùëÜùëé_ùëÉùëúùë†[ùëñ] is a configuration variable:
true if the EISa ùëñ is installed in the access zone,

I

O
D
d
n
a

,
r
e
h
s
i
l
b
u
p

,

k
r
o
w
e
h
t

f
o
e
l
t
i
t

,
)
s
(
r
o
h
t
u
a

e
h
t

o
t

n
o
i
t
u
b
i
r
t
t
a

n
i
a
t
n
i
a
m

t
s
u
m
k
r
o
w
s
i
h
t

f
o

n
o
i
t
u
b
i
r
t
s
i
d

y
n
A

.
)
2
2
0
2
¬©

(

e
c
n
e
c
i
l

0
.
3
Y
B
C
C
e
h
t

f
o

s
m
r
e
t

e
h
t

r
e
d
n
u
d
e
s
u
e
b
y
a
m
k
r
o
w
s
i
h
t

m
o
r
f

t
n
e
t
n
o
C

b
c

ùêº_ùê∏ ùêºùëÜùëé_ùëÉùëà [ùëñ] is configuration variable: true if the EISa

ùëñ has an emergency handle,

ùëÜùê∂ ‚àí ùëÜ ùëó [ùëñ] is configuration variable: true if the EISa ùëñ

belongs to the Safety Chain ùëó,

ùëÜ0_ùê¥ùëÉ_ùëÉùëúùë†[ ùëó],

ùëÜ0_ùê¥ùëÉ_ùëÉùëà [ ùëó]
represent

and
the status of
ùëÜ0_ùê¥ùëÉ_ùêæùëíùë¶_ùê∑ùëñùë†ùë°ùëüùëñùëè[ ùëó]
the access point: true if the access point is closed, the
emergency handle is armed and the token distributor is
safe respectively,

ùëÅ_ùê∏ ùêºùëÜùëé_ùëÜùëé ùëì ùëí[ ùëó] is the output variable of the Function
and represents the status of the safety chain ùëó: true if ùëó
is safe.

Specification 2 Partial, simplified requirement of SIF-X1

(cid:0)

if
ùëÅùëñ
(cid:214)

(cid:0)ùêº _ùê∏ ùêº ùëÜùëé_ùëÉùëúùë†_ùëÜùë° ùëéùë° [ùëñ ] ‚à® ùêº _ùê∏ ùêº ùëÜùëé_ùêµùë¶ ùëùùëéùë†ùë† [ùëñ ](cid:1)

ùëñ=1
‚àÄùëñ‚àà [1, ùëÅùëñ ]:(ùêº _ùê∏ ùêº ùëÜùëé_ùëÉùëúùë† [ùëñ ]=1 ‚àß ùëÜùê∂‚àíùëÜ{ ùëó} [ùëñ ]=1
‚àß
ùëÅùëñ
(cid:214)

(cid:0)ùêº _ùê∏ ùêº ùëÜùëé_ùëÉùëà _ùëÜùë° ùëéùë° [ùëñ ] ‚à® ùêº _ùê∏ ùêº ùëÜùëé_ùêµùë¶ ùëùùëéùë†ùë† [ùëñ ](cid:1)

ùëñ=1
‚àÄùëñ‚àà [1, ùëÅùëñ ]:(ùêº _ùê∏ ùêº ùëÜùëé_ùëÉùëà [ùëñ ]=1 ‚àß ùëÜùê∂‚àíùëÜ{ ùëó} [ùëñ ]=1
‚àß
ùëÜ0_ùê¥ùëÉ_ùëÉùëúùë† [ ùëó ] ‚àß ùëÜ0_ùê¥ùëÉ_ùëÉùëà [ ùëó ] ‚àß ùëÜ0_ùê¥ùëÉ_ùêæ ùëíùë¶_ùê∑ùëñùë†ùë°ùëü ùëñùëè [ ùëó ]
(cid:1) then

ùëÅ _ùê∏ ùêº ùëÜùëé_ùëÜùëé ùëì ùëí [ ùëó ] ‚Üê 1

else

ùëÅ _ùê∏ ùêº ùëÜùëé_ùëÜùëé ùëì ùëí [ ùëó ] ‚Üê 0

end if

The behaviour of this relatively complex specification
is shown in Table 1 with an example. Here, 2 doors
(EISa) are installed in this access zone (indexes 1 and 4
of ùê∏ ùêºùëÜùëé_ùëÉùëúùë†[ùëñ]), only one of them has an emergency han-
dle (index 1 of ùê∏ ùêºùëÜùëé_ùëÉùëà [ùëñ]). One of the EISa belongs to
the Safety Chain 0 (index 1 of ùëÜùê∂ ‚àí ùëÜ_0[ùëñ]) and the other
one to the Safety Chain 1 (index 4 of ùëÜùê∂ ‚àí ùëÜ_1[ùëñ]). For each
safety chain ùëó, the resultant ùëÅ_ùê∏ ùêºùëÜùëé_ùëÜùëé ùëì ùëí[ ùëó] is true if the
installed doors and emergency handles are in the safe state
(ùê∏ ùêºùëÜùëé_ùëÉùëúùë†_ùëÜùë°ùëéùë° [ùëñ] and ùê∏ ùêºùëÜùëé_ùëÉùëà_ùëÜùë°ùëéùë° [ùëñ]).

Table 1: SIF-X1 expected behaviour

Source

Variable

Value

Input
Input
...
Input (AP PLC)
...
Configuration
Configuration
...
Configuration
Configuration
...
Output

ùê∏ ùêº ùëÜùëé_ùëÉùëúùë†_ùëÜùë° ùëéùë°
ùê∏ ùêº ùëÜùëé_ùëÉùëà _ùëÜùë° ùëéùë°
...
ùëÜ0_ùê¥ùëÉ_ùëÉùëúùë†
...
ùê∏ ùêº ùëÜùëé_ùëÉùëúùë†
ùê∏ ùêº ùëÜùëé_ùëÉùëà
...
ùëÜùê∂ ‚àí ùëÜ_0
ùëÜùê∂ ‚àí ùëÜ_1
...
ùëÅ _ùê∏ ùêº ùëÜùëé_ùëÜùëé ùëì ùëí

0000 0000 0000 1001
0000 0000 0000 0001
...
0000 0000 0000 1001
...
0000 0000 0000 1001
0000 0000 0000 0001
...
0000 0000 0000 0001
0000 0000 0000 1000
...
0000 0000 0000 1001

The specification was translated into 16 verification cases
(one per safety chain), in order to guarantee that this property
is respected in all safety chains for all possible combinations
of the input and configuration variables. The example for the
safety chain 0 can be seen in listing 3 (simplified assertion).

The corresponding PLC program has 94 WORD (16-
bit variable) and 4 BOOL configuration variables, and 21
WORD and 2 BOOL input variables to implement all the
requirements. This implies approximately 216¬∑(94+21)+6 =
21846 ‚âà 5.0 ¬∑ 10555 combinations to be checked. The equiva-
lent STL code of the original F-FBD version is around 700
lines of code.

PLCverif was able to validate the 16 verification cases
in 41 seconds. The result of all properties (assertions) was
satisfied. This means that no counterexamples were found
and, hence, the properties always hold true.

Listing 3: SIF-X1 formalized requirement for PLCverif.

// # ASSERT
((( I_EISa_Pos_Stat OR I_EISa_Bypass ) AND
( SC - S_0 AND I_EISa_Pos ) )
= ( SC - S_0 OR I_EISa_Pos ) ) AND
((( I_EISa_PU_Stat OR I_EISa_Bypass ) AND
( SC - S_0 AND I_EISa_PU ) )
= ( SC - S_0 OR I_EISa_PU ) ) AND
( S 0_A P_K ey_ Dist rib .% X0 AND
S0_AP_PU .% X0 AND S0_AP_Pos .% X0 )
= N_EISa_Safe .% X0

SIF-2 Function

The following two examples belong to the verification of
the SIF-2 Function. In this function, PLCverif was able to
find several discrepancies between the PLC program and the
specification and two of them are presented here.

This function contains the transitions rules between the
Beam and Access modes for each safety chain ùëó. In order
to allow the transition between modes, the function checks
the status of the safety chain (computed variable calculated
by another GI PLC function) and the requests from the op-
erator, via the OKP (Operator Key Panel). When all safety
conditions are met, this function authorizes the change of
mode. The function also contains the conditions to lock or
release the keys from the OKP.

The implementation of the SIF-2 Function Block has 19
WORD and 1 BOOL input variables to implement all the
requirements. This implies approximately 219¬∑16+1 = 2305 ‚âà
6.5 ¬∑ 1091 combinations to be checked.

The equivalent STL code of the original F-FBD version

is around 1200 lines of code.

Example 2 - Incomplete specification. This specifica-
tion was related to the conditions to switch to Beam mode.
The property was formalized with the assertion shown in
listing 4:

Listing 4: SIF-2 Beam mode activation formalized require-
ment for PLCverif

// # ASSERT
(( NOT (( N_EXT_ACCE_OK AND N_NO - SAFETY_ERR ) AND
(( I_PB_TEST_ON AND I_Key_TEST ) OR
( I_PB_Acce_ON AND I_Key_Acce ) ) )
OR ( NOT N_MODE_BEAM ) ) = 16# FFFF )

This assertion was verified with PLCverif in 93 seconds
and a counterexample was found, meaning that the property
was violated. The reason for this violation was a missing
variable in the formula from the documentation.

I

O
D
d
n
a

,
r
e
h
s
i
l
b
u
p

,

k
r
o
w
e
h
t

f
o
e
l
t
i
t

,
)
s
(
r
o
h
t
u
a

e
h
t

o
t

n
o
i
t
u
b
i
r
t
t
a

n
i
a
t
n
i
a
m

t
s
u
m
k
r
o
w
s
i
h
t

f
o

n
o
i
t
u
b
i
r
t
s
i
d

y
n
A

.
)
2
2
0
2
¬©

(

e
c
n
e
c
i
l

0
.
3
Y
B
C
C
e
h
t

f
o

s
m
r
e
t

e
h
t

r
e
d
n
u

d
e
s
u

e
b
y
a
m
k
r
o
w
s
i
h
t

m
o
r
f

t
n
e
t
n
o
C

b
c

Example 3 - Bug in the PLC program.

In this case,
the conditions to release an access key from the OKP for
one of the safety chains were used as specification. The
formalized assertion was the one shown in listing 5:

(1) the integration of model checking in PLC programming
environments (e.g. TIA portal) to minimize the number of
manual steps and (2) the improvement of verification perfor-
mance with better algorithms and abstraction techniques.

Listing 5: SIF-2 extractors access key release formalized
requirement for PLCverif

// # ASSERT
(( N_SECU_NO - REQ_Down .% X15 AND N_EXT_BEAM_OK .% X15 )
= ( SIF -2 _TAGS . O_RLS_ACCESS .% X15 ) )

PLCverif was able to verify this assertion in 147 seconds.
The result was not satisfied and a counterexample was pro-
vided. After analysing the counterexample and discussing
with the SPS-PPS experts, it was concluded that there was
a problem in the PLC program. The program was modi-
fied accordingly to include the missing variables before the
commissioning of the system.

Analysis

PLCverif hides most of the complexity of applying model
checking to PLC programs. Nevertheless, a few manual
steps were still needed in this project. In particular to import
the program in PLCverif and to create the formal properties
from the pseudo-formalized specification.

We also encounter the state-space explosion problem in
other functions, where the number of configurations and
input variables was much bigger.

Overall, PLCverif helped to validate a few critical func-
tions from the SPS-PPS PLC program and it was a good
complement to the testing activities performed in the lab
by the access control experts at CERN (e.g.
the SIF-X1
function).

PLCverif was able to find discrepancies between some
of the specifications and the PLC program before the com-
missioning of the system, sometimes due to an incomplete
or erroneous specification, other times due to a bug in the
program (e.g. the SIF-2 function). Due to the complexity of
some of the specifications, it was sometimes very hard for
experts to validate the desired behaviour. By using model
checking, the experts were able to find undesirable corner
cases, helping them to understand the behaviour of the sys-
tem and modifying the specification when necessary.

CONCLUSIONS
This paper presented a highly configurable PLC program
and the benefits and challenges of applying model checking
to verify it. In general, we can conclude that model checking
contributed to this project to (1) detect bugs in the PLC
program before the commissioning, (2) identify deficiencies
in the specification, and (3) help experts to better understand
the behaviour of the program for all possible configurations.
There are still several challenges to overcome for model
checking to become a common practice in the industrial
automation domain. Probably the more important ones are:

In the context of the PLCverif project, the future work will
focus on the following directions: (1) improve PLCverif to
reduce the verification time, (2) support more PLC manufac-
turers ‚Äì we are currently working on supporting Schneider
ST and IL programs. More information about the current
and future work of PLCverif can be found in [9].

REFERENCES
[1] O. Pavlovic and H.-D. Ehrich, ‚ÄúModel Checking PLC Soft-
ware Written in Function Block Diagram,‚Äù in 2010 Third
International Conference on Software Testing, Verification
and Validation, 2010, pp. 439‚Äì448. doi: 10.1109/ICST.
2010.10.

[2] H. Moreira Barbosa, ‚ÄúFormal verification of PLC programs
using the B Method,‚Äù M.S. thesis, Universidade Federal do
Rio Grande do Norte, Brazil, Oct. 2012.

[3] J.-R. Abrial, The B-book - assigning programs to meanings.

Jan. 2005, isbn: 978-0-521-02175-3.

[4] M. Leuschel and M. Butler, ‚ÄúThe ProB Animator and Model
Checker for B A Tool Description,‚Äù in International Sym-
posium of Formal Methods Europe, Nov. 2003, isbn: 978-3-
540-40828-4. doi: 10.1007/978-3-540-45236-2_46.
[5] E. Blanco Vi√±uela, D. Darvas, and V. Moln√°r, ‚ÄúPLCverif
Re-engineered: An Open Platform for the Formal Analy-
sis of PLC Programs,‚Äù 21. 7 p, 2019. doi: 10 . 18429 /
JACoW - ICALEPCS2019 - MOBPP01. https : / / gitlab .
com/plcverif-oss/cern.plcverif

[6] R. Cavada et al., ‚ÄúThe nuXmv Symbolic Model Checker,‚Äù
in CAV, 2014, pp. 334‚Äì342. https://nuxmv.fbk.eu/
[7] T. T√≥th, √Å. Hajdu, A. V√∂r√∂s, Z. Micskei, and I. Majzik,
‚ÄúTheta: a Framework for Abstraction Refinement-Based
Model Checking,‚Äù in Proceedings of the 17th Conference
on Formal Methods in Computer-Aided Design, D. Stewart
and G. Weissenbacher, Eds., 2017, pp. 176‚Äì179, isbn: 978-
0-9835678-7-5. doi: 10.23919/FMCAD.2017.8102257.
https://github.com/FTSRG/theta

[8] E. Clarke, D. Kroening, and F. Lerda, ‚ÄúA Tool for Checking
ANSI-C Programs,‚Äù in Tools and Algorithms for the Con-
struction and Analysis of Systems (TACAS 2004), K. Jensen
and A. Podelski, Eds., ser. Lecture Notes in Computer Sci-
ence, vol. 2988, Springer, 2004, pp. 168‚Äì176, isbn: 3-540-
21299-X. https://www.cprover.org/cbmc/

[9] I. D. Lopez-Miguel, J.-C. Tournier, and B. Fernandez Adiego,
‚ÄúPLCverif: status of a formal verification tool for Pro-
grammable Logic Controller,‚Äù in 18th International Confer-
ence on Accelerator and Large Experimental Physics Control
Systems, 2021.

[10] T. Ladzinski, B. Fern√°ndez Adiego, and F. Havart, ‚ÄúRenova-
tion of the SPS Personnel Protection System: A Configurable
Approach,‚Äù in 17th International Conference on Accelerator
and Large Experimental Physics Control Systems, 2019, 395.
5 p. doi: 10.18429/JACoW- ICALEPCS2019- MOPHA078.
https://cds.cern.ch/record/2777797

I

O
D
d
n
a

,
r
e
h
s
i
l
b
u
p

,

k
r
o
w
e
h
t

f
o
e
l
t
i
t

,
)
s
(
r
o
h
t
u
a

e
h
t

o
t

n
o
i
t
u
b
i
r
t
t
a

n
i
a
t
n
i
a
m

t
s
u
m
k
r
o
w
s
i
h
t

f
o

n
o
i
t
u
b
i
r
t
s
i
d

y
n
A

.
)
2
2
0
2
¬©

(

e
c
n
e
c
i
l

0
.
3
Y
B
C
C
e
h
t

f
o

s
m
r
e
t

e
h
t

r
e
d
n
u
d
e
s
u
e
b
y
a
m
k
r
o
w
s
i
h
t

m
o
r
f

t
n
e
t
n
o
C

b
c

