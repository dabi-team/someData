2
2
0
2

l
u
J

2
1

]
L
P
.
s
c
[

2
v
1
1
2
5
1
.
5
0
2
2
:
v
i
X
r
a

Type Systems in Resource-Aware Programming:
Opportunities and Challenges

Alcides Fonseca
LASIGE
Faculdade de Ciˆencias da Universidade de Lisboa
Lisboa, Portugal
alcides@ciencias.ulisboa.pt
0000-0002-0879-4015

Guilherme Espada
LASIGE
Faculdade de Ciˆencias da Universidade de Lisboa
Lisboa, Portugal
gjespada@ciencias.ulisboa.pt
0000-0001-8128-7397

Abstract—Type systems provide software developers imme-
diate feedback about a subset of correctness properties of
their programs. IDE integrations often take advantage of type
systems to present errors, suggest completions and even improve
navigation. On the other hand, understanding the time and
energy consumption of the execution of a program requires
manual testing.

In this paper, we identify existing work on using type systems
for energy awareness, and deﬁne the requirements for a practical
approach, which the existing approaches do not address fully.

Furthermore, we also discuss how existing type systems can

help generalize refactors for energy-efﬁciency.

Index Terms—energy-awareness, typesystems, refactorings

I. INTRODUCTION

The Karlskrona manifesto has raised awareness for the
sustainability of the Software Development Process [1]. De-
velopers should be conscious of the sustainable impact of
their decisions at every stage of the software development life-
cycle. One major concern regarding sustainability is energy-
consumption.

It is expected that by 2025 computing and communication
will account for 20% of the global energy usage [2]. Energy
efﬁciency is important for users both at the macro and mi-
cro scale. Data-centers account for 3% of global emissions
and represent a substantial running cost for online service
providers. When evaluating new server purchases, the monthly
energy cost is nowadays more important than the equipment’s
upfront cost. On the micro-scale, users are concerned about the
battery life of their computers, tablets, phones and wearables.
The Manifesto for Energy-Aware Software [2] contends
that software developers must become energy-aware during
all phases of software development. Furthermore, developers
should be equipped with the necessary training and tools.

A thorough survey on the status of energy efﬁciency in
software development [3] concludes that most performance
estimation tools focus on low-level rather than high-level
programming at which application developers work. Software
refactoring techniques and tools to detect and automatically
impact on energy-
ﬁx energy inefﬁciencies with a direct
consumption have been proposed in the past. However, these
tools apply mostly to mobile application development, an area
that directly impacts end users. The survey also concludes that

there is a clear lack of knowledge in writing, maintaining, and
evolving energy-efﬁcient software systems.

II. STATIC ANALYSIS FOR ENERGY-AWARENESS

SEEP [4] is a framework that uses platform-speciﬁc energy
proﬁles and symbolic execution to reason about the energy
consumption of a full program, using a compositional ap-
proach on top of the low-level proﬁling. This approach has
shown to have small errors, in the order of 0.09 mJ. Moreover,
static analysis has scaled to detect energy bugs in Android
applications [5].

Different static analysis tools have been used: abstract
interpretation [6], relationship analysis [5], and Machine-
Learning [7].

A review of static analysis for energy consumption predic-
tion [8] identiﬁes the need for these approaches to be aware
of data distributions. Most approaches work towards the upper
bound, but developers often want to understand the behavior
in average cases.

III. TYPE SYSTEMS FOR ENERGY-AWARENESS

The evaluation of energy efﬁciency is traditionally done
either in simulation or in testing, due to the necessity to have
an accurate measure. This creates a disconnect between writing
code and understanding its energy efﬁciency. It has been
shown that immediate feedback is beneﬁcial for correctness
properties (e.g., using contracts [9]), but the advantages of
immediate feedback for non-functional properties has been
less studied.

We argue that a more immediate feedback would help
developers learn about what in their code consumes more
energy and should be used more carefully. It is also important
for energy-awareness education [2].

Type systems have succeeded in improving developer pro-
ductivity, detecting correctness problems early in the devel-
opment process. These tools are integrated in the IDE to
provide immediate feedback to prevent users from writing
incorrect code. Otherwise, developers would only detect those
errors at runtime when (or if) that code path is executed,
as it is common in dynamically-typed languages. And even
typing (e.g.,
these languages have been adopting gradual

 
 
 
 
 
 
Typescript and Python Type annotations) to take advantage
of this ergonomic advantage.

Based on our previous work on energy efﬁciency [10]–
[14], we identify the following requirements for Energy-aware
programming:

1) Feedback must be instantaneous — For this system to
be useful, developers should get immediate feedback
without having to run the full program.

2) The resource cost should be symbolic — Because the
cost of the program may depend on arguments, the
present cost should reﬂect that dependency. If arguments
are passed, then the absolute value should be considered.
3) The resource usage follows a probabilistic model —
Running the same program twice does not take the same
amount of time or energy. As such, users may want to
inspect the distribution of values. Users may want to
reason about median values, or the 95% percentile, as it
is common in Service Level Agreements (SLA).

To address these requirements, we are developing a modular
approach centered on the cost of functions. The cost of a func-
tion can be inferred by what it performs, with standard library
low-level functions annotated based on micro-benchmarks.

To compose the cost of functions, we intend to follow
existing work on veriﬁcation of resource usage [15]–[18].
However, these approaches are not sufﬁcient to deal with the
energy-consumption indirection between high-level code and
the low-level code that is executed. In particular, we identify
the following as major features that need to be accounted for
to achieve a reasonable accuracy:

1) Garbage Collection;
2) Just-in-Time Compilation;
3) Operating System Scheduler Overheads.
Kersten et al. presented a hardware-parametrized Hoare
logic for energy consumption analysis to verify if a program
has a correct upper bound of energy consumption [19]. But
this approach does consider the previously mentioned features,
nor the probabilistic approach.

Gastel, Kersten and Eekelen present an approach of using
dependent types to deﬁne the energy semantics [17]. This work
is the closest to our approach because a type system is used
to keep track of energy consumption. The major advantages
are its modularity and precision (compared with the bounded
approach of Hoare logic). However, this approach also does
not consider the probabilistic nature of executions, as well as
the features that introduce indirection.

IV. TYPE-BASED REFACTORINGS FOR
ENERGY-AWARENESS

As the scientiﬁc community has been better understanding
the performance impact of design decisions, new methods for
improving energy-efﬁciency have been proposed. Cruz and
Abreu proposed a limited set of automatic refactorings for
improving the energy efﬁciency of Android applications that
range from moving allocations to changing UI elements [20].
Similarly, Morales et al. analyzed 8 anti-patterns in Android

applications, presented refactorings within a minute, and ex-
tended the mobile phone’s battery life by up to 29 minutes.
Developers found that 68% of the suggested refactorings to be
very relevant [21].

Sehgal et al. generalize this energy-efﬁciency refactoring
approach to general-purpose software, relying on readings
from different components to evaluate each refactor [22]. Kim
et al. applied the same approach for embedded computing
environments to improve legacy code performance [23]. Imran
and Kosar evaluated auto-refactorings in the context of Cloud
Software with signiﬁcant improvements in energy consump-
tion.

Most of the existing approaches have focused on developing
tools to reason about existing applications’ energy-efﬁciency
and suggest improvements. Energy Types is a ﬁrst effort that
allows annotating a Java-like language with energy-related
modes that can be used to reason about the resource con-
sumption of apps and allow the compiler to introduce dynamic
voltage and frequency control statements in the generated
binary, selecting the best conﬁguration for different parts of
the code [15]. The authors admit that this approach is neither
the most precise in characterizing energy consumption nor
the most expressive in capturing energy-aware programmers’
intention. ECO applies this technique to Java programs and
evaluates this approach using energy usage [16]. ENT is
another extension of Java supporting both static and dynamic
types to control and reason about energy-consumption [18].
Ent allows developers to control energy usage (static types)
or how to react to a given change (dynamic type). Ent helps
the developer in debugging and identifying energy hotspots in
their applications.

As such, there is a gap between refactorings (based on par-
ticular domains) and the type systems designed to reason about
code. We identify bridging this two gaps as an opportunity
to generalize more refactors that are based on the energy-
consumption patterns of general-purpose code.

V. CONCLUSIONS

There have been some advances on modeling energy con-
sumption at the code level, but there are many factors that
are not being considered (Garbage Collection, Just-in-time
Compilation, Memory Allocation). Additionally, practitioners
often deﬁne service level agreements based on percentiles, not
by averages or upper bounds as one would be optimistic and
the other would be impossible pessimistic.

Static analysis has been successful in estimating resource
consumption, and Liquid and Dependent Types are capable of
doing abstract interpretation, a popular technique for low-level
estimation of energy consumption of programs. Furthermore,
to answer the need of reasoning about energy consumption
in a statistical manner, instead of considering only worst-
case scenarios or average cases, probabilistic programming
languages can be useful to improve type systems for energy
consumption.

[14] ——, “Overcoming the no free lunch theorem in cut-off algorithms
for fork-join programs,” Parallel Comput., vol. 76, pp. 42–56, 2018.
[Online]. Available: https://doi.org/10.1016/j.parco.2018.04.005

[15] M. Cohen, H. S. Zhu, S. E. Emgin, and Y. D. Liu, “Energy types,”
in Proceedings of
the 27th Annual ACM SIGPLAN Conference on
Object-Oriented Programming, Systems, Languages, and Applications,
OOPSLA 2012, part of SPLASH 2012, Tucson, AZ, USA, October
21-25, 2012, G. T. Leavens and M. B. Dwyer, Eds. ACM, 2012, pp.
831–850. [Online]. Available: https://doi.org/10.1145/2384616.2384676
for
sustainable software,” in 37th IEEE/ACM International Conference
on Software Engineering,
ICSE 2015, Florence, Italy, May 16-24,
2015, Volume 1, A. Bertolino, G. Canfora, and S. G. Elbaum, Eds.
IEEE Computer Society, 2015, pp. 767–777.
[Online]. Available:
https://doi.org/10.1109/ICSE.2015.89

[16] H. S. Zhu, C. Lin, and Y. D. Liu, “A programming model

[17] B. van Gastel, R. Kersten, and M. C. J. D. van Eekelen, “Using
dependent types to deﬁne energy augmented semantics of programs,”
in Foundational and Practical Aspects of Resource Analysis - 4th
International Workshop, FOPARA 2015, London, UK, April 11, 2015,
Revised Selected Papers, ser. Lecture Notes in Computer Science, M. C.
J. D. van Eekelen and U. D. Lago, Eds., vol. 9964, 2015, pp. 20–39.
[Online]. Available: https://doi.org/10.1007/978-3-319-46559-3 2
[18] A. Canino and Y. D. Liu, “Proactive and adaptive energy-aware
programming with mixed typechecking,” in Proceedings of the 38th
ACM SIGPLAN Conference on Programming Language Design and
Implementation, PLDI 2017, Barcelona, Spain, June 18-23, 2017,
A. Cohen and M. T. Vechev, Eds. ACM, 2017, pp. 217–232. [Online].
Available: https://doi.org/10.1145/3062341.3062356

[19] R. Kersten, P. P. Toldin, B. van Gastel, and M. C. J. D. van Eekelen,
“A hoare logic for energy consumption analysis,” in Foundational and
Practical Aspects of Resource Analysis - Third International Workshop,
FOPARA 2013, Bertinoro, Italy, August 29-31, 2013, Revised Selected
Papers, ser. Lecture Notes in Computer Science, U. D. Lago and
R. Pe˜na, Eds., vol. 8552.
Springer, 2013, pp. 93–109. [Online].
Available: https://doi.org/10.1007/978-3-319-12466-7 6

[20] L. Cruz and R. Abreu, “Improving energy efﬁciency through automatic
refactoring,” J. Softw. Eng. Res. Dev., vol. 7, p. 2, 2019. [Online].
Available: https://doi.org/10.5753/jserd.2019.17

[21] R. Morales, R. Saborido, F. Khomh, F. Chicano, and G. Antoniol,
“EARMO: an energy-aware refactoring approach for mobile apps,”
IEEE Trans. Software Eng., vol. 44, no. 12, pp. 1176–1206, 2018.
[Online]. Available: https://doi.org/10.1109/TSE.2017.2757486

[22] R. Sehgal, D. Mehrotra, R. Nagpal, and R. sharma, “Green software:
Refactoring approach,” Journal of King Saud University - Computer and
Information Sciences, 11 2020.

[23] D. Kim, J. Hong, I. Yoon, and S. Lee, “Code refactoring techniques for
reducing energy consumption in embedded computing environment,”
Clust. Comput., vol. 21, no. 1, pp. 1079–1095, 2018.
[Online].
Available: https://doi.org/10.1007/s10586-016-0691-5

ACKNOWLEDGMENT

This work was

supported by the Fundac¸˜ao para a
Ciˆencia e a Tecnologia (FCT) under LASIGE Research
Unit
(UIDB/00408/2020 and UIDP/00408/2020). Experi-
mental evaluation was conducted on hardware provided
by projects CMU—Portugal CAMELOT (LISBOA-01-
0247-FEDER-045915) and Resource-Aware Programming
(EXPL/CCI-COM/1306/2021) .

REFERENCES

[1] C. Becker, R. Chitchyan, L. Duboc, S. Easterbrook, B. Penzenstadler,
N. Seyff, and C. C. Venters, “Sustainability design and software: The
karlskrona manifesto,” in 37th IEEE/ACM International Conference
on Software Engineering,
ICSE 2015, Florence, Italy, May 16-24,
2015, Volume 2, A. Bertolino, G. Canfora, and S. G. Elbaum, Eds.
IEEE Computer Society, 2015, pp. 467–476.
[Online]. Available:
https://doi.org/10.1109/ICSE.2015.179

[2] A. Fonseca, R. Kazman, and P. Lago, “A manifesto for energy-aware
software,” IEEE Softw., vol. 36, no. 6, pp. 79–82, 2019. [Online].
Available: https://doi.org/10.1109/MS.2019.2924498

[3] G. Pinto and F. Castor, “Energy efﬁciency: a new concern for
application software developers,” Commun. ACM, vol. 60, no. 12, pp.
68–75, 2017. [Online]. Available: https://doi.org/10.1145/3154384
[4] T. H¨onig, C. Eibel, R. Kapitza, and W. Schr¨oder-Preikschat, “SEEP:
exploiting symbolic execution for energy-aware programming,” ACM
SIGOPS Oper. Syst. Rev., vol. 45, no. 3, pp. 58–62, 2011. [Online].
Available: https://doi.org/10.1145/2094091.2094106

[5] H. Jiang, H. Yang, S. Qin, Z. Su, J. Zhang, and J. Yan, “Detecting
energy bugs in android apps using static analysis,” in Formal Methods
and Software Engineering - 19th International Conference on Formal
Engineering Methods, ICFEM 2017, Xi’an, China, November 13-17,
2017, Proceedings, ser. Lecture Notes in Computer Science, Z. Duan
and L. Ong, Eds., vol. 10610. Springer, 2017, pp. 192–208. [Online].
Available: https://doi.org/10.1007/978-3-319-68690-5 12

[6] P. L´opez-Garc´ıa, R. Haemmerl´e, M. Klemen, U. Liqat, and M. V.
Hermenegildo, “Towards energy consumption veriﬁcation via static
analysis,” CoRR, vol. abs/1512.09369, 2015.
[Online]. Available:
http://arxiv.org/abs/1512.09369

[7] C. Marantos, K. Salapas, L. Papadopoulos, and D. Soudris, “A ﬂexible
tool for estimating applications performance and energy consumption
through static analysis,” SN Comput. Sci., vol. 2, no. 1, p. 21, 2021.
[Online]. Available: https://doi.org/10.1007/s42979-020-00405-7

[8] K. Georgiou, S. Kerrison, and K. Eder, “On the value and limits of
multi-level energy consumption static analysis for deeply embedded
single and multi-threaded programs,” CoRR, vol. abs/1510.07095, 2015.
[Online]. Available: http://arxiv.org/abs/1510.07095

[9] A. Lozano, K. Mens, and A. Kellens, “Usage contracts: Offering
immediate feedback on violations of structural source-code regularities,”
Sci. Comput. Program., vol. 105, pp. 73–91, 2015. [Online]. Available:
https://doi.org/10.1016/j.scico.2015.01.004

[10] G. Melfe, A. Fonseca, and J. P. Fernandes, “Evaluation of the impact
on energy consumption of lazy versus strict evaluation of haskell
data-structures,” in Proceedings of the XXII Brazilian Symposium on
Programming Languages, SBLP 2018, Sao Carlos, Brazil, September
20-21, 2018, C. Camar˜ao and M. Sulzmann, Eds. ACM, 2018, pp.
83–89. [Online]. Available: https://doi.org/10.1145/3264637.3264648

[11] ——, “Helping developers write energy efﬁcient haskell

through a
data-structure evaluation,” in Proceedings of
the 6th International
Workshop on Green and Sustainable Software, GREENS@ICSE 2018,
Gothenburg, Sweden, May 27, 2018,
I. Malavolta, R. Kazman,
and J. Saraiva, Eds. ACM, 2018, pp. 9–15. [Online]. Available:
https://doi.org/10.1145/3194078.3194080

[12] A. Fonseca, F. Cerveira, B. Cabral, and R. Barbosa, “Language-based
expression of reliability and parallelism for low-power computing,”
IEEE Trans. Sustain. Comput., vol. 3, no. 3, pp. 153–166, 2018.
[Online]. Available: https://doi.org/10.1109/TSUSC.2017.2771376
[13] A. Fonseca and B. Cabral, “Understanding the impact of task granularity
in the energy consumption of parallel programs,” Sustain. Comput.
Informatics Syst., vol. 17, pp. 69–80, 2018.
[Online]. Available:
https://doi.org/10.1016/j.suscom.2017.10.014

