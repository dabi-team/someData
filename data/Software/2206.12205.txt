DRAFT VERSION JUNE 27, 2022
Typeset using LATEX twocolumn style in AASTeX63

2
2
0
2

n
u
J

4
2

]

M

I
.
h
p
-
o
r
t
s
a
[

1
v
5
0
2
2
1
.
6
0
2
2
:
v
i
X
r
a

Bits missing: Finding exotic pulsars using bﬂoat16 on NVIDIA GPUs

JACK WHITE,1 KAREL AD ´AMEK,1, 2 JAYANTA ROY,3 SOFIA DIMOUDI,4 SCOTT M. RANSOM,5 AND WESLEY ARMOUR1

1Oxford e-Research Centre, Department of Engineering Science, University of Oxford, 7 Keble Road, Oxford OX1 3QG, United Kingdom
2Department of Physics, Silesian University in Opava, Bezruˇcovo n´am., 746 01, Opava, Czech Republic
3National Centre for Radio Astrophysics (NCRA-TIFR), Pune 411 007, India
4Centre for Advanced Instrumentation, Durham University, United Kingdom
5National Radio Astronomy Observatory, Charlottesville, VA 22903, United States

ABSTRACT
The Fourier Domain Acceleration Search (FDAS) is an effective technique for detecting faint binary pulsars
in large radio astronomy datasets. This paper quantiﬁes the sensitivity impact of reducing numerical precision
in the GPU accelerated FDAS pipeline of the AstroAccelerate software package. The prior implementation
used IEEE-754 single-precision in the entire binary pulsar detection pipeline, spending a large fraction of the
runtime computing GPU accelerated FFTs. AstroAccelerate has been modiﬁed to use bﬂoat16 (and IEEE-
754 double-precision to provide a “gold standard” comparison) within the Fourier domain convolution section
of the FDAS routine. Approximately 20,000 synthetic pulsar ﬁlterbank ﬁles representing binary pulsars were
generated using SIGPROC with a range of physical parameters. They have been processed using bﬂoat16, single
and double-precision convolutions. All bﬂoat16 peaks are within 3% of the predicted signal-to-noise ratio of
their corresponding single-precision peaks. Of 14,971 “bright” single-precision fundamental peaks above a
power of 44.982 (our experimentally measured highest noise value), 14,602 (97.53%) have a peak in the same
acceleration and frequency bin in the bﬂoat16 output plane, whilst in the remaining 369 the nearest peak is
located in the adjacent acceleration bin. There is no bin drift measured between the single and double-precision
results. The bﬂoat16 version of FDAS achieves a speedup of approximately 1.6x compared to single-precision.
A comparison between AstroAccelerate and the PRESTO software package is presented using observations
collected with the GMRT of PSR J1544+4937, a 2.16ms black widow pulsar in a 2.8 hour compact orbit.

Keywords: Pulsar — FFT — Astronomy data reduction — Computational astronomy

1. INTRODUCTION

Binary pulsar systems provide the means to test general
relativity via observations of their emissions in the radio
spectrum. Described by Taylor & Weisberg (1982), these
systems include at least one pulsar, in orbit with another com-
pact object. As the pulsar accelerates towards and away from
the observer, the Doppler shift modulates the otherwise pe-
riodic pulsar signal (in its own reference frame) into a pulse
train with varying period in the frame of the observer, the na-
ture of which depends on the shape of the orbit. This effect
reduces the sensitivity of the Fourier transform to the pulse
trains emitted by these objects as it spreads the power of the
signal across many frequencies, rendering the signals indis-
tinguishable from the background noise.

Due to the accurate clock-like property of the pulsar em-
bedded in the binary system, binary pulsars (particularly
millisecond pulsars) are of interest to astronomers globally.
They are good references to trace the evolution of the binary

Corresponding author: Wesley Armour
wes.armour@oerc.ox.ac.uk

system Bhattacharya & van den Heuvel (1991) and they are
useful for testing the theory of gravity Kramer et al. (2021).
Thus signiﬁcant efforts are being made in searching for such
accelerated binary systems using time-domain radio surveys.
Some recent examples of relevant research include Ridolﬁ
et al. (2021), Swihart et al. (2021), Kansabanik et al. (2021),
Morello et al. (2022) and Rajwade et al. (2021).

When looking to next generation radio telescopes, time-
domain data rates will be of the order of TB/s. For example,
SKA is expected to produce 800GB/s Levin et al. (2017).
Due to the volume of data, it is not feasible to store and so
analysis must be performed in real-time, as data is captured.
This motivates the investigation of using reduced precision
computations in computationally demanding parts of the pul-
sar detection pipeline.

Within such detection pipelines, search techniques for bi-
nary pulsar systems that aim to capture all of the power emit-
ted by the pulsar and collect it into a single detection, are
typically the most computationally demanding.

Two different methods are favoured for searching for bi-
nary systems. The ﬁrst is via time domain methods Middled-
itch & Kristian (1984), where the observed time series from

 
 
 
 
 
 
2

WHITE J., AD ´AMEK K., ROY J., DIMOUDI S., RANSOM S., ARMOUR W.

a radio telescope is repeatedly Doppler shifted and Fourier
transformed in an attempt to move the observed data into a
frame whereby the emitter appears to the observer to be sta-
tionary.

The second method relies on convolving the frequency
spectrum of the observed time series with templates that rep-
resent the frequency domain signatures of pulsars with given
Doppler shifts. The computation of this approach can be ac-
celerated via the convolution theorem and GPU accelerated
Fast Fourier Transforms (FFTs).

FDAS (Fourier Domain Acceleration Search) is an imple-
mentation of the latter approach, a search technique for de-
tecting Doppler-shifted binary pulsar signals in time series
datasets, generated by radio telescopes. It was proposed in
Ransom et al. (2002) and then extended by Andersen & Ran-
som (2018) to account for nonlinear acceleration, known as
Jerk Searching. AstroAccelerate implements GPU acceler-
ated FDAS and Jerk Searching Dimoudi & Armour (2015),
Ad´amek et al. (2017), Dimoudi et al. (2018), Ad´amek & Ar-
mour (2018), Ad´amek et al. (2020). In AstroAccelerate, the
majority of the numerical computation in the binary pulsar
detection pipeline is performed during FDAS.

The goal of this work is to establish whether switching the
bulk of the numerical processing in the binary pulsar detec-
tion pipeline of AstroAccelerate to reduced (bﬂoat16) preci-
sion leads to acceptable sensitivity in the output, compared
to the existing single-precision version. The motivation for
this is to speed up the pipeline to allow the widest possible
parameter search space in real time on next generation radio
telescopes, or reduce the hardware requirements needed to
perform such searches.

When performing FDAS, AstroAccelerate spends a sig-
niﬁcant fraction of the runtime performing GPU accelerated
FFTs. The performance of a GPU accelerated FFT is lim-
ited by memory bandwidth on current generation hardware
(NVIDIA Ampere), and so by reducing the numerical preci-
sion of the calculations from 32 bits to 16 bits, this bottle-
neck can be alleviated simply by halving the amount of data
that needs to be transported to and from the GPU processing
cores.

In this paper we present the results of testing a bﬂoat16
implementation of FDAS in AstroAccelerate with synthetic
pulsar ﬁles using SIGPROC’s Lorimer (2011) fake ﬁlter-
bank generator, spanning a wide range of parameters and ﬁ-
nally a conﬁrmation of our ﬁndings using observations from
the GMRT.

2. SEARCHING FOR BINARY PULSARS

2.1. Detailed explanation

Fourier Domain Acceleration Searching uses convolution
to compare the Fourier transformed time-domain signal with
templates representing a range of acceleration values. A peak
in the response will be seen when the signal and template
overlap, indicating the presence of a pulsar with similar pa-
rameters to the template. The number of templates used
depends on the search parameters desired by the radio as-
tronomer.

During pulsar searches, the radio astronomer is primar-
ily interested in pulsars that haven’t already been discov-
ered. Therefore the range of search parameters must be wide
enough to also include “exotic” pulsars. This might mean, for
example, pulsars with an extremely fast pulse period, com-
bined with extreme acceleration, the latter suggesting a very
tight orbit around a compact object. In such cases, more pul-
sar templates are required to span the extreme values of ac-
celeration. The compute and memory requirements of FDAS
increases linearly with the number of templates.

These templates will represent varying values of Doppler
shift (which is a function of the particular orbital dynamics of
the system), the span of the Doppler shift values deﬁnes the
breadth of a binary pulsar search, along the axis known as
frequency derivative or ˙f which is related to the acceleration
of the pulsar, and the Fourier bin drift z, as:

Acceleration =

˙f c
f

=

zc
f T 2

(1)

Where f is the frequency of the pulsar and T is the obser-

vation time.

The signal is convolved with all templates resulting in the
f − ˙f plane. Frequency f and frequency derivative ˙f there-
fore make up the primary axes of the pulsar search, a pul-
sar with a given pulse frequency and acceleration value will
appear as a peak on this plane, with diminishing harmonics
at integer multiples of both f and ˙f . The summed height
(power) of the peak and harmonics is typically used to cal-
culate the signal-to-noise ratio (SNR) value of the detected
pulsar against the statistics of the background noise.

Figure 1. Flowchart depicting the process of Fourier Domain
matched ﬁltering using the Overlap-Save method on a GPU. Cour-
tesy of Dimoudi et al. (2018)

The convolution of a signal and a set of templates could
be completed entirely in the time domain, but a time-domain
convolution involves O(N 2) multiplications and O(N 2) ad-
ditions, leading to overall O(N 2) complexity. Using the FFT
and convolution theorem, this can be reduced to an overall
complexity O(N logN ) in the Fourier domain. The Overlap-
Save method is used to perform the convolutions on the GPU,

BITS MISSING: FINDING EXOTIC PULSARS USING BFLOAT16 ON NVIDIA GPUS

3

as described in Dimoudi et al. (2018), Ad´amek et al. (2020)
and Figure 1. Brieﬂy, this involves splitting the long input
signal into windows which are separately convolved with the
templates, and then the central region of each windowed con-
volution is saved, discarding the contaminated regions at the
edge of the windows.

2.2. FDAS vs Jerk Search

As mentioned in Section 1, two related methods are avail-
able when searching for binary systems in the Fourier do-
main, these are the Fourier Domain Acceleration Search
(FDAS) and Jerk Search. FDAS makes the assumption that
the acceleration of the emitting object over the observation
time is approximately constant. The observation time should
be no longer than approximately 10% of the orbital period
for this assumption to hold.

Jerk Searching takes into account a change in acceleration,
and therefore extends the f − ˙f plane into an f − ˙f − ¨f vol-
ume. More candidate templates are required to populate the
third dimension, ¨f , for each ˙f value that is evaluated. Since
Jerk Searching is based on the same principal of convolving
templates, for this paper we have chosen to focus on the less
computationally extensive FDAS to allow us to proﬁle the
numerical sensitivity of AA across a wider range of ˙f than
we would be able to in a given time with Jerk Searching.

3. UPDATING THE PIPELINE TO BFLOAT16

The existing version of AstroAccelerate used single-
precision in all stages of FDAS (see Figure 1). For this work
we aim to proﬁle the numerical sensitivity of the output of
AstroAccelerate to changing precision in FDAS, with a fo-
cus on reducing precision to bﬂoat16 and comparison with
IEEE-754 double-precision.

Figure 2. Comparison of bit layouts of IEEE-754 single and half-
precision with bﬂoat16

Refactoring the code to mixed precision is a straightfor-
ward process, involving replacement of the existing single-
precision functions with their bﬂoat16 equivalents.

The ‘Real FFT’ in Figure 1 was intentionally left in single-
precision as it does not signiﬁcantly affect the overall exe-
cution time (it does not scale with K, the number of ﬁlters).
Reducing the precision of this FFT disproportionately affects
the quality of the output for two reasons. Firstly, at this
stage of the pipeline, the data may not span a large dynamic
range, and may not be centered on zero, which highlights the
weakness of bﬂoat16. Compared to single-precision, at large
scales the spacings between bﬂoat16 numbers are extremely
coarse, so small perturbations on the input data may not be
representable without the use of single-precision. Secondly,
this FFT (with a length equal to the entire input data) is sufﬁ-
ciently long for the numerical error, which accumulates with
the larger number of calculations, to negatively impact sensi-
tivity.

3.1. Casting between single-precision and bﬂoat16

As can be seen in Figure 2, in binary form a bﬂoat16 num-
ber can be represented in single-precision simply by append-
ing 16× zero bits to the end. Therefore single-precision
and bﬂoat16 have approximately the same valid range (≈
±3 × 1038), however bﬂoat16 numbers are far coarser within
this range.

To minimise time spent converting data once the output
f − ˙f plane had been produced, in the bﬂoat16 version of
the code the ﬁnal cast to single-precision (see Figure 1) is
completed by copying the two bytes of data for each bﬂoat16
number into the corresponding positions of an all zero single-
precision output array.

This quick casting is only possible due to the perfect bit
alignment between bﬂoat16 and single-precision, it is not
possible with half-precision and single-precision. Quick
casting all but eliminates the performance impact of implic-
itly casting the data using a standalone GPU kernel.

3.2. IEEE-754 Half vs bﬂoat16 precision

The valid range of any data format type is a considera-
tion when comparing ﬂoating point formats. Half-precision
(IEEE-754) has a valid range of ±65504. This introduces
some considerations for hypothetically using half-precision
in this application.

When calculating the Fourier spectrum of a timeseries, the
0th bin is the sum of all elements of the timeseries, often re-
ferred to as the “DC component” of the signal. Unless the
signal is perfectly centered on zero, this may mean that in
long FFT calculations, the 0th bin accumulates power which
takes its value outside of the ±65504 bounds imposed by
IEEE-754 half-precision. Depending on how the hardware
handles numerical overﬂows, in the worst case this could in-
troduce an Inf or NaN , while in the best case, any in-
formation outside this range would be lost. If an Inf or
NaN is present in a spectrum which is subsequently inverse
Fourier transformed, all values of the output will be polluted
and subsequently unusable.

4

WHITE J., AD ´AMEK K., ROY J., DIMOUDI S., RANSOM S., ARMOUR W.

Given the risk of introducing overﬂow errors to the
pipeline, we selected bﬂoat16 as our candidate data format
for reducing the precision, which also included the beneﬁt of
quick casting.

3.3. Template conversion

To convert the convolution step of FDAS to a lower preci-
sion, it is ﬁrst necessary to convert the convolution templates
to lower precision. These can be thought of as the candidate
pulsar signatures that the code will look for in the datasets.
Each template is a 1D array of complex numbers, the single-
precision complex magnitudes are plotted in Figure 3. In all
experiments, the convolution templates are ﬁrst generated in
single-precision, and then explicitly/implicitly converted to
bﬂoat16/double-precision by a tuned GPU kernel.

Figure 4. Relative difference between real components of accel-
eration templates, colour scale represents relative difference as in
Equation 2.

Figure 3. Single-precision acceleration templates - complex mag-
nitude plotted

For the real component and the imaginary component, we
calculate the relative difference between the single-precision
and bﬂoat16 precision value of the template as:

% =

b − s
b+s
2

× 100

(2)

Where b is the bﬂoat16 value and s is the single-precision
value. The result of applying this equation to the real and
imaginary part of all templates is plotted in Figure 4 and Fig-
ure 5.

This metric will be reused in multiple experiments as it is
important to have a comparison of bﬂoat16’s ability to recre-
ate higher precision results that is invariant to the size of the
numbers being dealt with.

The aggregated statistics of the relative differences are
shown in Table 1, it is clear that at this early stage in the
pipeline, only a very small amount of numerical error has
been introduced by reducing the precision of the acceleration
templates from single-precision to bﬂoat16.

4. METHODOLOGY

4.1. Generating synthetic data

Figure 5. Relative difference between imaginary components of
acceleration templates, colour scale represents relative difference as
in Equation 2.

Component

Mean

St. Dev

Max

Min

Imaginary

-0.001569% 0.1537% 0.3883% -0.3894%

Real

-0.001093% 0.1532% 0.3878% -0.3898%

Table 1. Statistics of the difference between single-precision and
bﬂoat16 after template conversion, aggregated from data used to
generate Figure 4 and Figure 5

SIGPROC Lorimer (2011) was used to generate synthetic
pulsar data. The input parameters to SIGPROC’s fake de-
termine the physical properties of the binary system being
simulated.

To test and compare the varying precisions of AstroAccel-
erate across a representative range of potential pulsars, the

BITS MISSING: FINDING EXOTIC PULSARS USING BFLOAT16 ON NVIDIA GPUS

5

fake input parameters are sampled from a log-uniform
distribution with upper and lower bounds (Table 2), so as
to get an even representation of potential numerical scales,
without introducing bias towards any particular range. The
bounds are picked to represent a wide range of potentially
physically viable pulsars, although some combinations of pa-
rameters are at the extrema of our ranges and are included to
investigate the limits of the numerical processing.

Sampling a single point in this space is computationally
costly, synthetic fake ﬁle generation followed by running
the generated data through AstroAccelerate takes roughly 2
minutes. Therefore, it is desirable to reduce the dimension-
ality of the input parameter space wherever it is physically
justiﬁable, to reduce the ‘curse of dimensionality’.

acceleration plane, the acceleration value of the highest peak
can be captured, and plotted, Figure 6.

Through the results of this sweep, the static value selected
for bphase is 0.2, this approximately centres the observa-
tion window over the period of orbit with maximum linear
acceleration towards the observer, as shown in Figure 6. This
is an approximation as the bper value (which sets the or-
bital period in hours) is a variable input parameter to fake ,
and it is the combination of bphase and bper that sets
the midpoint of the observation window.

Parameter Name

Range

period

width

[1.25, 1000]

[4, 50]

snrpeak

[0.0125, 0.125]

dm

nbits

nchans

tsamp

tobs

fch1

foff

[5.. 500]

8

1024

128

600

1550

0.292968752

additional ﬂags

-binary

bper

bphase

bpmass

bcmass

[1.5, 336]

0.2

[1.0, 1.5]

[0.1, 5.0]

Table 2. Conﬁguration arguments for SIGPROC fake command
to generate a binary pulsar signal. [a, b] represents the closed in-
terval inclusive of the bounds, while [a.. b] represents the integer
interval inclusive of the bounds

4.2. Selecting an optimal bphase value
The bphase parameter to fake is a number in the
range 0 to 1 which determines the starting phase of the binary
orbit in the range 0°to 360°. To reduce the dimensionality
of the parameter space, it is necessary to determine roughly
which value of bphase leads to the largest acceleration
value of the detected peaks in the output space, to ensure each
test is of a pulsar signature with at least some acceleration.
Conceptually, the largest observed Doppler shift is when the
emitter is travelling directly towards or directly away from
the observer.

The simple experiment chosen is to hold all parameters
ﬁxed at typical values, and allow bphase to sweep over
its entire range. Then, by plotting the output frequency-

Figure 6.
bphase in bﬂoat16, single and double-precision (overlayed)

Fundamental peak acceleration (‘z’ bin) against

4.3. Peakﬁnding methodology

An accelerated pulsar signal can be observed in the f −
˙f plane as a series of peaks at integer multiples of f and
˙f . Quantisation error in both the frequency and acceleration
axes of the search lead to the observed peaks drifting into
adjacent bins. To account for this, a harmonic sum algorithm
is used to gather the power from all harmonics into a single
detection. However, in this work we are interested in the
location of each harmonic peak individually, so a harmonic
sum is not used.

A more general and naive peakﬁnding and harmonic sepa-
ration approach is taken to enable us to look at each harmonic
separately. Since the period of the synthetic pulsar is known
a priori, being an input parameter to fake , it is possible
to preemptively split the f − ˙f output plane with boundaries
(Table 3) derived from the fundamental frequency f , which
is calculated as f = 1

period Hz.

Once the f − ˙f plane has been split into bands based on
the calculated fundamental frequency, the nth harmonic is
taken to be the highest point in the nth band.
In the case
of low SNR pulsar signals, peaks and their harmonics are
likely to be at similar powers to the background noise. This
leads to a failure mode where the peak selection method picks
a random point of noise as the harmonic in that band. As
the noise is randomly distributed, the highest point in the

6

WHITE J., AD ´AMEK K., ROY J., DIMOUDI S., RANSOM S., ARMOUR W.

Band

Fundamental

First harmonic

Second harmonic

Range /Hz

[0, 1.5 × f ]

[1.5 × f, 2.5 × f ]

[2.5 × f, 3.5 × f ]

Nth harmonic

[(N + 0.5) × f, (N + 1.5) × f ]

Table 3. Harmonic band search bounds. [a, b] represents the closed
interval inclusive of the upper bound, and lower in the case of the
fundamental.

bﬂoat16 plane and the single-precision plane are not guar-
anteed to be in the same position, leading to some extreme
observed values of bin drift. This failure mode is discussed
and quantiﬁed in section 5.3.

In the majority of cases where the peak height is not at the
noise ﬂoor, measuring the “bin drift” of a peak in a given
band between precisions allows us to quantify the combined
extent of the spectral leakage, accumulated numerical error
and scalloping loss, and its effect on our ability to resolve a
given pulsar from a certain noisy background.

The following section compares the ability of our FDAS
implementation (in various precisions) to detect the presence
of accelerated pulsars in synthetic datasets.

5. RESULTS

In this section we present the results from analysing output
f − ˙f planes with randomly generated inputs, to understand
the conditions under which bﬂoat16 is a good (or bad) ap-
proximation to the higher precision implementations.

5.1. Noise properties in varying precisions

To understand if a reduction in precision has any statisti-
cally signiﬁcant effect on the background noise distribution,
synthetic data without a pulsar signal is analysed in this sec-
tion.

The histogram in Figure 7 (top) represents the distribution
of output power across an entire f − ˙f plane for a ﬁlterbank
ﬁle generated using a SIGPROC snrpeak parameter of 0.
The snrpeak parameter can be thought of as proportional
to the brightness of the signal. When snrpeak is 0, there
is no signal in the ﬁle being generated. Between precisions,
there is no signiﬁcant skewing, and only very slight pertur-
bations on the count in each bin (compared to the value in
single-precision) which can be observed upon careful exam-
ination of Figure 7 (bottom).

It is interesting to note, that however slight the perturba-
tions are on the count in each bin, the overall trend is that
there are marginally fewer large values in the bﬂoat16 noise
than the single-precision noise.

However, we conclude that reducing or increasing preci-
sion has no signiﬁcant effect on the probability density func-
tion (PDF) that the noise is drawn from.

Figure 7 shows that the noise distribution follows a χ2
2 dis-
tribution, this is expected as the input data without signal is
well approximated by white noise.

5.2. Synthetic dataset results - Power

In this section we discuss the effect of changing precision
on the ability of AstroAccelerate’s implementation of FDAS
to resolve the SNR of a particular peak, where a pulsar signal
is known to be present in the dataset. SNR is deﬁned as the
raw power (height) of the peak on the f − ˙f plane divided by
the standard deviation of the entire plane.

Figure 9 shows the relative difference in SNR between can-
didate peaks in bﬂoat16 and single precision. To calculate
this we have taken the power of the highest peak in a given
harmonic band in bﬂoat16, also taken the highest peak in the
same harmonic band in the single precision output plane and
compared their SNR via equation (2). This process is re-
peated across many samples spanning the input parameter
space (Table 2) to quantify the limitations of the reduced pre-
cision mode.

The ﬁrst three harmonics are analysed separately in each
row of Figure 9. There are three different precisions under
investigation (bﬂoat16, single-precision, double-precision).
The comparison in Figure 9 is made between bﬂoat16 and
single-precision. The analysis of the equivalent single-
precision vs double-precision data showed that for 98.8% of
the peaks there was no difference in height, and the maxi-
mum observed difference was 0.0098%. This is as we would
expect, as rounding a result to single-precision eliminates the
majority of the beneﬁt of a preceding double-precision cal-
culation, unless extreme amounts of error were accumulating
in single-precision, for example if the algorithm was numer-
ically unstable.

With a sufﬁciently large dataset, the distribution of peak
power differences when comparing bﬂoat16 and single-
precision output follows a normal distribution, centred on
zero. In the ﬁrst three harmonics, it is seen that the standard
deviation is consistently ≈ 0.6%.

5.3. Synthetic dataset results - Bin drift

A reduced precision detection pipeline must not only be
able to reproduce the detection SNR to within an acceptable
error, but also localise the detection in the f − ˙f plane cor-
rectly.

As such, it is important to understand whether reducing
precision to bﬂoat16 also affects the location of a pulsar sig-
nature peak and its harmonics on the acceleration ( ˙f ) or fre-
quency axis.

The results of this section aim to quantify the impact of re-
ducing precision in FDAS from single-precision to bﬂoat16
when measuring the frequency and acceleration ( ˙f ) proper-
ties of binary pulsar signatures.

The bin drifts on the frequency and acceleration axes be-
tween bﬂoat16 and single-precision are shown in Figure 10.
Across all tests performed there is no measurable bin drift
between the single and double-precision versions of FDAS.
When comparing single-precision and bﬂoat16, the major-
ity (> 94%) of peaks do not show any bin drift, this is shown
by the large fraction of peaks that are ignored in Figure 10.
Although in cases where there is bin drift, it is usually lim-
ited to adjacent bins, i.e. the peak in the bﬂoat16 band is ± 1

BITS MISSING: FINDING EXOTIC PULSARS USING BFLOAT16 ON NVIDIA GPUS

7

Figure 7. Raw noise power histogram with χ2
2 comparison, log scale
(middle). Percent difference between bﬂoat16 vs. single-precision bin count and double-precision vs single-precision bin count (bottom). In
all data series, N = 404,750,143 samples.

2 comparison, linear scale (top). Raw noise power histogram with χ2

bins from the peak in single-precision. This is shown by the
tall peak at the centre of the histograms.

5.3.1. Extreme bin drifts

As previously stated, there are some cases where the bin
drift is extreme, and looks to be far more than could be at-
tributed to just accumulated numerical error. This is due
to the limitations of the chosen peakﬁnding method mis-
classifying noise as a peak in the response in ﬁles where the
signal of the pulsar is extremely weak, below the noise ﬂoor.
Figure 11 is important in understanding this particular lim-
itation of our chosen analysis technique.
Ignoring the red
lines, this is a 2D histogram plot of the same data as in Figure
10. The y-axis represents the peak powers, so larger peaks
are at the top of the histogram, and now the colour intensity
represents the number of occurrences in a given bin drift/peak
power bin. Again, points with zero bin drift are ignored, leav-
ing a vertical strip of data at a bin drift of ±1, which is more
noticeable in the acceleration plots. However in both the ac-
celeration and frequency plots, there is a band of very large
bin drifts at lower values of peak power, around the noise

ﬂoor. The explanation of this effect follows, assisted by the
red lines.

In cases where a peak lies in or below the canopy of the
noise, the large shifts occur under the following conditions:

1. In each harmonic band under investigation, the two
tallest peaks are very similar heights (in both bﬂoat16
and single-precision), within the range shown in Fig-
ure 9.

2. AND, when changing between precisions, the peak
that was the higher of the two in bﬂoat16 becomes the
lower of the two peaks in single-precision, they “ﬂip”.

This is why it is only a small subset of many cases within

the “noise canopy” where the effect is seen.

If both of the two highest peaks are due to noise, they
could be located anywhere randomly in the harmonic band.
This means that when the peakﬁnding methodology selects
the “harmonic” from the harmonic band it is effectively just
picking two random locations, which can lead to a very large
measured bin drift.

8

WHITE J., AD ´AMEK K., ROY J., DIMOUDI S., RANSOM S., ARMOUR W.

The proportion of cases which we attribute to this expla-
nation, account for much less than 1% of the dataset, and are
extremely low SNR peaks.

We have designed and carried out an experiment to mea-
sure the location of the relevant noise canopy. The experi-
mental method is as follows:

1. Generate a selection of noise-only output f − ˙f
planes (without any pulsar signature present) by setting
SIGPROC’s snrpeak to 0, and process each one
through the AstroAccelerate FDAS pipeline in single-
precision mode.

1

2. For each extreme bin drift event (magnitude >1) seen
in Figure 11, note the frequency (calculated as f =
period Hz) of the pulsar that was in the synthetic data
ﬁle that led to the extreme bin drift event. This fre-
quency will have determined the width of the noise
band the peak selection algorithm was picking from
as in Table 3.

3. For each extreme bin drift event, take an unused band
of noise from the noise-only f − ˙f planes with a fre-
quency width of 1.5 × f , and record the highest point.

4. Record the maximum and minimum of all of the “high-
est points”, these are the y-coordinates of the bounds
(horizontal red lines) in Figure 11.

The bounds on Figure 11 demonstrate that all the ob-
served extreme bin drift events occur in the region (the “noise
canopy”) where we would expect to see the randomly located
noise peaks. In this region a pulsar detection is already am-
biguous, so we do not consider the performance of FDAS as
being degraded by these edge cases.

5.3.2. Acceleration Skewing

A subtle skewing within the wide horizontal band in Figure
11 can also be observed, with values on the right hand side
of the x-axis occurring slightly more frequently.

This skewing can be thought of as representing that when
two peaks were confused between bﬂoat16 and single-
precision, the bﬂoat16 peak had a more positive accelera-
tion than the single-precision peak. While curious, this skew-
ing does not affect our interpretation of the performance of
bﬂoat16 FDAS for detecting pulsars.

Through constructing ﬂat convolution templates (for ex-
ample making Figure 3 a ﬂat plane) in both single-precision
and bﬂoat16, and reperforming the experiment with a com-
parison template where the imaginary component is per-
turbed by a single bﬂoat16 numbers width, we have estab-
lished that there is no asymmetric accumulation of error be-
tween +ve and -ve acceleration templates (where the simu-
lated pulsar is travelling towards or away from the observer)
during the convolution process.

This leads us to believe the effect arises as a subtle result
of the average complex magnitude of the input templates, in
which there is an extremely slight (at the sixth signiﬁcant

ﬁgure) but measurable increase in average power across the
templates corresponding to positive acceleration values com-
pared to the negative templates. We believe this is why the
skew is rare and may only appear in cases where we have es-
tablished that the potentially confused peaks are already ex-
tremely close, so only a tiny increase in average power would
be enough to cause a trend towards one side.

5.4. Performance

Figure 8. GPU performance comparison with varying precision and
input length (number of samples) in AstroAccelerate

In Figure 8 we present the speedup of the GPU acceler-
ated section of AstroAccelerate’s implementation of FDAS
with varying precision, this is all steps within the blue box
in Figure 1. This section represents a variable fraction of the
overall execution time of a binary pulsar search, depending
on the number of templates and number of dispersion mea-
sures (DMs) analysed.

Measurements were taken with varying input data length
(measured in number of samples). Each datapoint represents
the average speedup of 256 runs, calculated by comparing
the execution time of the modiﬁed precision version with the
average execution time of the corresponding single-precision
version. The error bars are the measured standard deviation
of the speedup.

5.5. Real data

In Table 4 we present the ability of our bﬂoat16 version
of AstroAccelerate to detect a pulsar in data from a real tele-
scope, the GMRT. We used an observation of a 2.16 ms pulsar
(J1544+4937) in a 2.8 hour compact orbit. The 550-750 MHz
ﬁlterbank data was dedispersed at the nominal dispersion
measure of 23.23 pc cm−3 Bhattacharyya et al. (2013), gen-
erating a time-series with a resolution of 81.92µs. An obser-
vation time of 345s was used to compare the bloat16 pipeline
to the corresponding single and double-precision versions,
these results are also compared to those from PRESTO.

We believe the discrepancy in the power values between
PRESTO and AA is caused by scalloping loss. Due to

BITS MISSING: FINDING EXOTIC PULSARS USING BFLOAT16 ON NVIDIA GPUS

9

slight variations in the exact number of samples processed
by PRESTO and AA (owing to limitations on input length to
varying FFT algorithms), the frequency bin centres will be
offset between the results.

Importantly, the reported acceleration and frequency val-
ues match for all the three choices of numerical precision of
AstroAccelerate.

Linear regression on the ﬁrst three peaks from the As-
troAccelerate and PRESTO output leads to a measured ac-
celeration of the pulsar of 2.839 ms−2 (AA) and 2.931 ms−2
(PRESTO).

6. CONCLUSIONS

This work has demonstrated that it is possible to reduce
the precision of the convolution section of the FDAS binary
pulsar detection pipeline.

We have compared three different precisions, bﬂoat16,
single-precision ﬂoating point
(IEEE-754) and double-
precision ﬂoating point (IEEE-754) across a wide range of
binary system parameters, including real data of a millisec-
ond pulsar in a compact orbit. We have found that the beneﬁt
of using double-precision is very limited, and usually does
not result in a measurable difference when the results are
rounded to single-precision (as may be required for later pro-
cessing). Given the increased memory bandwidth require-
ments of doubling the precision, these results certainly do
not justify increasing precision in the FDAS pipeline of AA.
Contrastingly, there is a small but measurable difference
between the output of the bﬂoat16 implementation of FDAS

and the single-precision implementation. However in all
cases the peak power is within a few percent of the single-
precision result, with no strong bias to be either higher or
lower. This should enable users of GPU accelerated FDAS
to increase their pulsar parameter search space on a given set
of hardware when performing a real time search. Or for a
given search, reduce their hardware requirement, when com-
pared to using the single-precision implementation.

ACKNOWLEDGEMENTS

This work has received support

from STFC Grant
(ST/T000570/1). The authors would like to acknowledge the
use of the University of Oxford Advanced Research Comput-
ing (ARC) facility in carrying out this work Richards (2015).
The authors would also like to express their gratitude to the
Research Centre for Theoretical Physics and Astrophysics,
Institute of Physics, Silesian University in Opava for institu-
tional support.

The National Radio Astronomy Observatory is a facility of
the National Science Foundation operated under cooperative
agreement by Associated Universities, Inc. SMR is a CIFAR
Fellow and is supported by the NSF Physics Frontiers Center
awards 1430284 and 2020265.

REFERENCES

Ad´amek, K., Novotn´y, J., Dimoudi, S., & Armour, W. 2020, in

Dimoudi, S., & Armour, W. 2015, Pulsar Acceleration Searches on

Astronomical Society of the Paciﬁc Conference Series, Vol. 527,

the GPU for the Square Kilometre Array.

Astronomical Data Analysis Software and Systems XXIX, ed.

https://arxiv.org/abs/1511.07343

R. Pizzo, E. R. Deul, J. D. Mol, J. de Plaa, & H. Verkouter, 671.

Kansabanik, D., Bhattacharyya, B., Roy, J., & Stappers, B. 2021,

https://arxiv.org/abs/1911.01353

The Astrophysical Journal, 920, 58,

Ad´amek, K., & Armour, W. 2018, A GPU implementation of the

doi: 10.3847/1538-4357/ac19b9

harmonic sum algorithm. https://arxiv.org/abs/1812.02647

Kramer, M., Stairs, I. H., Manchester, R. N., et al. 2021, Phys. Rev.

Ad´amek, K., Dimoudi, S., Giles, M., & Armour, W. 2017,

X, 11, 041050, doi: 10.1103/PhysRevX.11.041050

Improved Acceleration of the GPU Fourier Domain Acceleration

Levin, L., Armour, W., Baffa, C., et al. 2017, Proceedings of the

Search Algorithm. https://arxiv.org/abs/1711.10855

International Astronomical Union, 13, 171

—. 2020, GPU Fast Convolution via the Overlap-and-Save Method

Lorimer, D. R. 2011, SIGPROC: Pulsar Signal Processing

in Shared Memory. https://arxiv.org/abs/1910.01972

Programs. http://ascl.net/1107.016

Andersen, B. C., & Ransom, S. M. 2018, ApJL, 863, L13,

Middleditch, J., & Kristian, J. 1984, ApJ, 279, 157,

doi: 10.3847/2041-8213/aad59f

doi: 10.1086/161876

Bhattacharya, D., & van den Heuvel, E. P. J. 1991, PhR, 203, 1,

Morello, V., Rajwade, K. M., & Stappers, B. W. 2022, MNRAS,

doi: 10.1016/0370-1573(91)90064-S

510, 1393, doi: 10.1093/mnras/stab3493

Bhattacharyya, B., Roy, J., Gupta, Y., et al. 2013, Astrophysical

Rajwade, K., Stappers, B., Williams, C., et al. 2021, arXiv e-prints,

Journal Letters, 773, doi: 10.1088/2041-8205/773/1/L12

arXiv:2103.08410. https://arxiv.org/abs/2103.08410

Dimoudi, S., Ad´amek, K., Thiagaraj, P., et al. 2018, ApJS, 239, 28,

Ransom, S. M., Eikenberry, S. S., & Middleditch, J. 2002, The

doi: 10.3847/1538-4365/aabe88

Astronomical Journal, 124, 1788, doi: 10.1086/342285

10

WHITE J., AD ´AMEK K., ROY J., DIMOUDI S., RANSOM S., ARMOUR W.

Harmonic

PRESTO Power

AA Power - bﬂoat16

AA Power - Single

AA Power - Double

Fundamental

188.07

1

2

3

71.96

47.4545

18.7041

132

103

48.5

18

132.277

103.258

48.777

17.773

132.227

103.259

48.777

17.773

Harmonic

PRESTO ‘z’ Bin

AA ‘z’ Bin - bﬂoat16

AA ‘z’ Bin - Single

AA ‘z’ Bin - Double

Fundamental

0.75

1

2

3

Acceleration

1.5

1.5

2
2.931ms−2

0.5

1.25

1.5

2
2.839ms−2

0.5

1.25

1.5

2
2.839ms−2

0.5

1.25

1.5

2
2.839ms−2

Harmonic

PRESTO Frequency

AA Frequency - bﬂoat16

AA Frequency - Single

AA Frequency - Double

Fundamental

463.098Hz

1

2

3

926.196Hz

1389.29Hz

1852.39Hz

463.097Hz

926.192Hz

1389.29Hz

1852.39Hz

463.097Hz

926.192Hz

1389.29Hz

1852.39Hz

463.097Hz

926.192Hz

1389.29Hz

1852.39Hz

Table 4. Comparison of J1544+4937 GMRT Data, processed with PRESTO and AstroAccelerate in varying numerical precisions. Power values
taken from the f − ˙f plane in each program.

Richards, A. 2015, University of Oxford Advanced Research

Swihart, S. J., Strader, J., Aydi, E., et al. 2021, The Astrophysical

Computing, doi: 10.5281/zenodo.22558

Ridolﬁ, A., Gautam, T., Freire, P. C. C., et al. 2021, Monthly
Notices of the Royal Astronomical Society, 504, 1407,
doi: 10.1093/mnras/stab790

Journal, 909, 185, doi: 10.3847/1538-4357/abe1be

Taylor, J. H., & Weisberg, J. M. 1982, ApJ, 253, 908,

doi: 10.1086/159690

BITS MISSING: FINDING EXOTIC PULSARS USING BFLOAT16 ON NVIDIA GPUS

11

Figure 9. Graphs depicting the spread in peak power recreation between bﬂoat16 vs. single-precision.

12

WHITE J., AD ´AMEK K., ROY J., DIMOUDI S., RANSOM S., ARMOUR W.

Figure 10. Graphs depicting acceleration (left) and frequency (right) bin drift between bﬂoat16 and single-precision results.

Figure 11. 2D Histograms depicting the spread of acceleration (left) and frequency (right) bin drift with peak power, colour scale represents
absolute count. Upper and lower red bars represent measured maximum and minimum values of the largest noise value in noise-only data
samples.

806040200204060800200400FundamentalNumber of occurences95.26% of peaks ignored965 peaks plotted, ±3Mean: 4.529500e+00Stdev: 29.5198Max:167.0Min:-184.0300200100010020030002040608099.12% of peaks ignored179 peaks plotted, ±3Mean: -1.185630e+01Stdev: 106.3761Max:718.847Min:-389.61775502502550751000200400600800First harmonicNumber of occurences 94.56% of peaks ignored1107 peaks plotted, ±3Mean: 5.038800e+00Stdev: 34.0539Max:176.0Min:-163.0300200100010020030002040608098.63% of peaks ignored279 peaks plotted, ±3Mean: -6.751300e+00Stdev: 105.0641Max:568.278Min:-416.44310050050100Acceleration bin drift0200400600Second harmonicNumber of occurences94.28% of peaks ignored1164 peaks plotted, ±3Mean: 9.339300e+00Stdev: 40.2294Max:181.0Min:-185.03002001000100200300Frequency bin drift025507510098.15% of peaks ignored376 peaks plotted, ±3Mean: 6.303700e+00Stdev: 102.6306Max:449.294Min:-404.416