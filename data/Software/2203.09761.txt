DOI: 10.21105/joss.03318

Software

• Review
• Repository
• Archive

Editor: Kelly Rowland
Reviewers:

• @munkm
• @shyamd
• @kellyrowland

Submitted: 30 April 2021
Published: 16 March 2022

License
Authors of papers retain
copyright and release the work
under a Creative Commons
Attribution 4.0 International
License (CC BY 4.0).

2
2
0
2

r
a

M
8
1

]
h
p
-
p
m
o
c
.
s
c
i
s
y
h
p
[

1
v
1
6
7
9
0
.
3
0
2
2
:
v
i
X
r
a

radioactivedecay: A Python package for radioactive
decay calculations

Alex Malins1 and Thom Lemoine2

1 Center for Computational Science & e-Systems (CCSE), Japan Atomic Energy Agency (JAEA),
178-4-4 Wakashiba, Kashiwa, Chiba, 277-0871, Japan 2 Whitman College, Walla Walla, Washington
99362, USA

Summary

radioactivedecay is a Python package for radioactive decay modelling. It contains functions
to fetch decay data, deﬁne inventories of nuclides and perform decay calculations. The default
nuclear decay dataset supplied with radioactivedecay is based on ICRP Publication 107,
which covers 1252 radioisotopes of 97 elements. The code calculates an analytical solution
to a matrix form of the decay chain diﬀerential equations using double or higher precision
numerical operations. There are visualization functions for drawing decay chain diagrams and
plotting activity decay curves.

Statement of Need

Calculations for the decay of radioactivity and the ingrowth of progeny underpin the use
of radioisotopes in a wide range of research and industrial ﬁelds, spanning from nuclear
engineering, medical physics, radiation protection, environmental science and archaeology
to non-destructive testing, mineral prospecting, food preservation, homeland security and
defence. radioactivedecay is an open source, cross-platform package for decay calculations
and visualization.
It supports decay chains with branching decays and metastable nuclear
isomers. It includes a high numerical precision decay calculation mode, which resolves numerical
problems with using double-precision ﬂoating-point numbers to calculate decay chains involving
radionuclides with disparate half-lives (Bakin et al., 2018).

This set of features distinguishes radioactivedecay from other commonly-used decay
packages, such as Radiological Toolbox (Hertel et al., 2015) and PyNE (Scopatz et
al., 2012). Radiological Toolbox is a closed-source Windows application, so it is not
easily scriptable and its use of double-precision arithmetic makes it susceptible to numerical
round-oﬀ errors. PyNE uses approximations to help mitigate numerical issues, however these
may potentially aﬀect accuracy. Moreover as of v0.7.5, PyNE does not correctly model
metastable nuclear isomers within decay chains, which means, for example, it cannot simulate
the production of 99mTc from 99Mo for medical imaging applications.

Theory and Implementation

radioactivedecay implements the solution to the decay diﬀerential equations outlined by
If vector N contains the number of atoms of each radionuclide in
Amaku et al. (2010).
a system, its elements Ni can be ordered such that no progeny (either ﬁrst or subsequent
generation) of radionuclide i has itself an index lower than i. Ordering in this manner is
possible because natural radioactive decay processes do not increase the mass number of the
decaying radionuclide, and there are no cyclic decay chains where radionuclide i can decay to
other radionuclides then reform itself (Ladshaw et al., 2020). Note metastable nuclear isomers
have distinct indices from their ground states in N.

Malins, & Lemoine. (2022). radioactivedecay: A Python package for radioactive decay calculations. Journal of Open Source Software, 7(71),
3318. https://doi.org/10.21105/joss.03318

1

 
 
 
 
 
 
The radioactive decay chain diﬀerential equations expressed in matrix form are:

Λ is a lower triangular matrix with elements:

dN
dt

= ΛN.

Λij =






0
−λj
bjiλj

for i < j,
for i = j,
for i > j.

(1)

(2)

λj is the decay constant of radionuclide j, and bji is the branching fraction from radionuclide
j to i. Λ is diagonalizable so its eigendecomposition can be used to rewrite Equation 1 as:

dN
dt

= CΛdC −1N.

(3)

Λd is a diagonal matrix whose elements are the negative decay constants, i.e. Λdii = −λi.
Matrix C and its inverse C −1 are both lower triangular matrices that are calculated as:

Cij =






0
1
(cid:80)i−1

k=j ΛikCkj
Λjj −Λii

for i < j,
for i = j,

for i > j,

and C −1

ij =






0
1
− (cid:80)i−1

k=j CikC −1

kj

for i < j,
for i = j,
for i > j.

The analytical solution to Equation 3 given an initial condition of N(0) at t = 0 is:

N(t) = CeΛdtC −1N(0).

(4)

(5)

eΛdt is a diagonal matrix with elements eΛdt
tion 5 upon each call for a decay calculation.

ii = e−λit. radioactivedecay evaluates Equa-

Matrices C and C −1 are independent of time so they are pre-calculated and imported from
ﬁles into radioactivedecay. C and C −1 are stored in sparse matrix data structures to
minimize memory use and maximize eﬃciency when computing the matrix multiplications in
Equation 5. For decay calculations with double-precision ﬂoating-point operations, C and
C −1 are stored in SciPy (Virtanen et al., 2020) Compressed Sparse Row (CSR) matrix data
structures. Conversely, they are stored in SymPy (Meurer et al., 2017) SparseMatrix data
structures for high numerical precision calculations.

The high numerical precision decay calculation mode resolves numerical issues arising from
using double-precision ﬂoating-point numbers for decay calculations for chains containing
nuclides with disparate half-lives. One example is the decay chain for 254Es, which contains
238U (4.468 billion year half-life) and 214Po (t1/2 is 164.3 µs half-life). This a 20 orders of
magnitude diﬀerence in half-life. Loss of numerical precision inevitably occurs when evaluating
the oﬀ-diagonal elements of C and C −1 in Equation 4 with double-precision ﬂoating-point
numbers (which hold approximately 15 decimal places of numerical precision). Note loss of
precision also occurs in the converse scenario, i.e. when a decay chain contains radionuclides
with similar half-lives. However this scenario does not occur in the ICRP Publication 107 decay
dataset, as the relative diﬀerence between half-lives of any two radionuclides in the same decay
chain is always greater than 0.1%.

The default operation of the high precision decay mode is to evaluate Equation 5 using
ﬂoating-point numbers with 320 signiﬁcant ﬁgures of precision. This is suﬃcient precision to
ensure accurate results for any physically relevant decay calculation users may wish to perform.

Malins, & Lemoine. (2022). radioactivedecay: A Python package for radioactive decay calculations. Journal of Open Source Software, 7(71),
3318. https://doi.org/10.21105/joss.03318

2

Moreover, computations in the high precision mode are still fast, taking less than one second
on a notebook equipped with an Intel Core i5-8250U processor.

Decay & Atomic Mass Datasets

The default dataset supplied with radioactivedecay uses decay data from ICRP Publication
107 (Eckerman & Endo, 2008) and atomic masses from the Atomic Mass Data Center (AMDC)
(Huang et al., 2021; Kondev et al., 2021; Wang et al., 2021). Endo et al. (2005) and
Endo & Eckerman (2007) describe the development of the ICRP Publication 107 decay
dataset. Raw data from ICRP 107 and AMDC were converted into dataset ﬁles suitable for
radioactivedecay in a Jupyter notebook. Along with SciPy and SymPy versions of the
sparse matrices C and C −1, the dataset ﬁles contain radionuclide half-lives, decay constants,
progeny, branching fractions, decay modes and atomic masses. Although there is a default
dataset, radioactivedecay allows the import and use other decay data.

Main Functionality

Figure 1: Examples of the plotting capabilities of radioactivedecay: (a) Decay chain diagram for
molybdenum-99. (b) Graph showing the decay of 1 kBq of 99Mo along with the ingrowth of 99mTc
and a trace quantity of 99Tc.

The main functionality of radioactivedecay is based around Nuclide, Inventory and
InventoryHP classes. The Nuclide class is used for fetching atomic and decay data about a
single nuclide, such as its atomic mass, half-life, decay modes, progeny and branching fractions.
It creates diagrams of the nuclide’s decay chain (ex. Figure 1(a)) using the NetworkX library
(Hagberg et al., 2008).

An Inventory can contain multiple nuclides, each with an associated quantity (the number
of atoms of the nuclide). Nuclides can be stable or radioactive. The decay() method
calculates the decay of the radioactive nuclides in an Inventory, adding any ingrown progeny
automatically. The numbers(), activities(), masses(), and moles() methods output
the inventory of nuclides as diﬀerent quantities using the atomic data stored in the decay
dataset. Additional activity_fractions(), mass_fractions(), and mole_fractions()
methods provide the relative amounts of each nuclide in the inventory with respect to diﬀerent
quantities. Plots can be made of the variation of nuclide activities, masses and moles over
time (ex. Figure 1(b)) using Matplotlib (Hunter, 2007).

Malins, & Lemoine. (2022). radioactivedecay: A Python package for radioactive decay calculations. Journal of Open Source Software, 7(71),
3318. https://doi.org/10.21105/joss.03318

3

The InventoryHP class is the high numerical precision complement of the Inventory class.
It has the same API as the Inventory class, but uses SymPy high numerical precision routines
for all calculations.

Validation

Decay calculations with radioactivedecay v0.4.2 were cross-checked against Radiolog
ical Toolbox v3.0.0 (Hertel et al., 2015) and PyNE v0.7.5 (Scopatz et al., 2012) (see
Jupyter notebooks in the comparisons repository). Radiological Toolbox employs the ICRP
Publication 107 decay data. Fifty radionuclides were randomly selected and a decay calculation
was performed for 1 Bq of each for a random decay time within a factor of 10−3 to 103 of the
half-life. Diﬀerences between decayed activities reported by each code were within 1% of each
other in 64% of cases. Discrepancies greater than 1% were attributed to rounding diﬀerences,
erroneous results from Radiological Toolbox, or numerical issues relating to decay chains
containing radionuclides with disparate half-lives.

A dataset was prepared for radioactivedecay with the same Evaluated Nuclear Structure
Data File (ENSDF, 2019) decay data as used by PyNE v0.7.5. Bugs in PyNE v0.7.5 cause
incorrect decay calculation results for chains containing metastable nuclear isomers, 183Pt,
172Ir or 152Lu. Thus the aﬀected chains were not used for the comparisons. The decay of 1
Bq of every radionuclide was calculated for multiple decay times varying from 0 to 106 times
the radionuclide’s half-life. The absolute diﬀerence between the decayed activities reported
by each code was less than 10−13 Bq. Relative diﬀerences depended on the magnitude of
the activity. Relative errors of greater than 0.1% only occurred when the calculated activity
was less than 2.5 × 10−11 Bq, i.e. 10 orders of magnitude smaller than the initial activity
of the parent radionuclide. The discrepancies between the two codes were attributed to
methodological diﬀerences for computing decay chains with radionuclides with large disparities
between half-lives, and numerical issues arising from double-precision ﬂoating-point operations.

Limitations

radioactivedecay does not model neutronics, so cannot evaluate radioactivity produced
from activations or induced ﬁssion. It does not support external sources of radioactivity input
or removal from an inventory over time. Caution is required if decaying backwards in time, as
this can cause ﬂoating-point overﬂows when computing the exponential terms in Equation 5.

There are also some limitations associated with the ICRP Publication 107 decay dataset. It
does not contain data for the radioactivity produced from spontaneous ﬁssion decay pathways
and the minor decay pathways of some radionuclides. More details on limitations are available
in the documentation, Endo et al. (2005), and Endo & Eckerman (2007).

Acknowledgements

We thank Mitsuhiro Itakura, Kazuyuki Sakuma, colleagues in JAEA’s Center for Computational
Science & Systems, Wolfgang Kerzendorf & Bernardo Gameiro for their support for this project.
We thank Kenny McKee, Daniel Jewell, Ezequiel Passaro, Hunter Ratliﬀ & Jayson Vavrek
for helpful suggestions, and Bjorn Dahlgren, Anthony Scopatz & Jonathan Morrell for their
work on radioactive decay calculation software. We also thank the editors and reviewers at the
Journal of Open Source software for constructive comments.

Malins, & Lemoine. (2022). radioactivedecay: A Python package for radioactive decay calculations. Journal of Open Source Software, 7(71),
3318. https://doi.org/10.21105/joss.03318

4

References

Amaku, M., Pascholati, P. R., & Vanin, V. R. (2010). Decay chain diﬀerential equations:
Solution through matrix algebra. Computer Physics Communications, 181 (1), 21–23.
https://doi.org/10.1088/0952-4746/26/3/N02

Bakin, R. I., Kiselev, A. A., Shvedov, A. M., & Shikin, A. V. (2018). Computational Errors
in the Calculation of Long Radioactive Decay Chains. Atomic Energy, 123 (6), 406–411.
https://doi.org/10.1007/s10512-018-0360-2

Eckerman, K. F., & Endo, A. (2008).

ICRP 107: Nuclear Decay Data for Dosimetric
Calculations. Annals of the ICRP, 38 (3), 119. https://doi.org/10.1016/j.icrp.2008.10.003

Endo, A., & Eckerman, K. F. (2007). JAEA-Data/Code 2007-021: Nuclear Decay Data
for Dosimetry Calculation - Data for Radionuclides with Half-lives Less than 10 Minutes.
https://doi.org/10.11484/jaea-data-code-2007-021

Endo, A., Yamaguchi, Y., & Eckerman, K. F. (2005). JAERI 1347: Nuclear Decay Data for
Dosimetry Calculation; Revised data of ICRP Publication 38. https://doi.org/10.11484/
jaeri-1347

ENSDF. (2019). From ENSDF database as of October 4, 2019. Version available at:

https://www.nndc.bnl.gov/ensarchivals/

Hagberg, A. A., Schult, D. A., & Swart, P. J. (2008). Exploring network structure, dynamics,
and function using NetworkX. Proceedings of the 7th Python in Science Conference
(SciPy2008), 11–15. http://conference.scipy.org/proceedings/SciPy2008/paper_2/

Hertel, N. E., Eckerman, K. F., & Sun, C. (2015). Radiological Tookbox 3.0.0. Transactions
of the American Nuclear Society, 113, 977–980. https://www.ans.org/pubs/transactions/
article-38022/

Huang, W. J., Wang, M., Kondev, F. G., Audi, G., & Naimi, S. (2021). The AME 2020 atomic
mass evaluation (i). Evaluation of input data, and adjustment procedures. Chinese Physics
C, 45 (3), 030002. https://doi.org/10.1088/1674-1137/abddb0

Hunter, J. D. (2007). Matplotlib: A 2D graphics environment. Computing in Science &

Engineering, 9 (3), 90–95. https://doi.org/10.1109/MCSE.2007.55

Kondev, F. G., Wang, M., Huang, W. J., Naimi, S., & Audi, G. (2021). The NUBASE2020
evaluation of nuclear physics properties. Chinese Physics C, 45 (3), 030001. https:
//doi.org/10.1088/1674-1137/abddae

Ladshaw, A., Wiechert, A. I., Kim, Y., Tsouris, C., & Yiacoumi, S. (2020). Algorithms and
algebraic solutions of decay chain diﬀerential equations for stable and unstable nuclide
fractionation. Computer Physics Communications, 246, 106907. https://doi.org/10.1016/
j.cpc.2019.106907

Meurer, A., Smith, C. P., Paprocki, M., ?ertik, O., Kirpichev, S. B., Rocklin, M., Kumar,
A., Ivanov, S., Moore, J. K., Singh, S., Rathnayake, T., Vig, S., Granger, B. E., Muller,
R. P., Bonazzi, F., Gupta, H., Vats, S., Johansson, F., Pedregosa, F., . . . Scopatz,
A. (2017). SymPy: symbolic computing in Python. PeerJ Computer Science, 3, e103.
https://doi.org/10.7717/peerj-cs.103

Scopatz, A. M., Romano, P. K., Wilson, P. P. H., & Huﬀ, K. D. (2012). PyNE: Python
for nuclear engineering. Transactions of the American Nuclear Society, 107, 985–987.
https://www.ans.org/pubs/transactions/article-14978

Virtanen, P., Gommers, R., Oliphant, T. E., Haberland, M., Reddy, T., Cournapeau, D.,
Burovski, E., Peterson, P., Weckesser, W., Bright, J., Walt, S. J. van der, Brett, M.,
Wilson, J., Millman, K. J., Mayorov, N., Nelson, A. R. J., Jones, E., Kern, R., Larson, E.,

Malins, & Lemoine. (2022). radioactivedecay: A Python package for radioactive decay calculations. Journal of Open Source Software, 7(71),
3318. https://doi.org/10.21105/joss.03318

5

. . . Vazquez-Baeza, Y. (2020). SciPy 1.0: fundamental algorithms for scientiﬁc computing
in Python. Nature Methods, 17 (3), 261–272. https://doi.org/10.1038/s41592-019-0686-2

Wang, M., Huang, W. J., Kondev, F. G., Audi, G., & Naimi, S. (2021). The AME 2020 atomic
mass evaluation (II). Tables, graphs and references. Chinese Physics C, 45 (3), 030003.
https://doi.org/10.1088/1674-1137/abddaf

Malins, & Lemoine. (2022). radioactivedecay: A Python package for radioactive decay calculations. Journal of Open Source Software, 7(71),
3318. https://doi.org/10.21105/joss.03318

6

