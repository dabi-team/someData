2
2
0
2

y
a
M
6

]
E
S
.
s
c
[

1
v
0
2
1
3
0
.
5
0
2
2
:
v
i
X
r
a

MANAi - An IntelliJ Plugin for Software Energy
Consumption Proﬁling

Andreas Schuler∗† and Gabriele Kotsis∗
∗ Department of Telecooperation Johannes Kepler University Linz, Austria
†Advanced Information Systems and Technology (AIST) University of Applied Sciences Upper Austria Hagenberg, Austria
andreas.schuler@fh-hagenberg.at, gabriele.kotsis@jku.at

Abstract—Developing energy-efﬁcient software solutions is a
tedious task. We need both, the awareness that energy-efﬁciency
plays a key role in modern software development and the tools
and techniques to support stakeholders involved in the software
development lifecycle. So, we present the MANAi plugin which
helps to make energy consumption of unit test methods explicit
by providing visual feedback as a plugin to the Integrated
Development Environment (IDE) IntelliJ. Our tool is intended
to bring software energy consumption into the limelight as an
important non-functional quality aspect in software development.
Furthermore, with MANAi we provide a tool that eases the
process of software energy experiments for a broad range of
users from academia to industry.

Index Terms—energy efﬁciency, software energy proﬁling, tool

Android Energy-Efﬁciency InspectiON (AEON) maintained by
the Software Engineering Lab at George Mason University,
targeted for the Android platform, share some design consid-
erations regarding visual feedback right within an IDE. To give
the reader an impression, of what MANAi can do, refer to the
illustrative example in Fig.1. In particular, Fig.1 outlines a unit
test method after MANAi has obtained energy readings during
its execution. The generated inline information attributed to the
method provides users with insights, not only on the current
energy feedback of a method, but furthermore it allows a user
to get insights how the energy characteristics of the examined
method has evolved, considering it has undergone several
changes.

I. INTRODUCTION

Meeting sustainable design goals when developing software
can play a crucial role in shaping our future. Given the ever-
increasing demand for digitalization, software will continue
to support or even take over different areas of our daily life.
As a result, developing software faces ongoing challenges
in providing sustainable and in particular energy-efﬁcient
software solutions. In supporting researchers and practitioners
alike to tackle these challenges, software engineering research
has provided considerable contributions to comprehend how
energy is dissipated in software and how software design af-
fects energy consumption. These contributions range from the
implications of software design choices, to the development
of energy optimized applications [1]–[12]. With our work,
MANAi, we complement the body of existing methods with
a tool that facilitates access to software energy proﬁling for a
broad audience, ranging from computer science students and
researchers to practitioners.

II. MANAI

The main goal of MANAi is to shed light on the energy im-
plications of software design choices during development right
where it is needed in the course of an IDE. MANAi shares
some design considerations with the work from Liu et al.
[13], mainly leveraging Intel’s Running Average Power Limit
(RAPL) at its core to obtain energy readings. However, we
take the idea of jRAPL [13] one step further and combine data
obtained via Intel’s RAPL interface with the possibilities of
expressive visualizations in IDEA’s IntelliJ IDE. Other existing
plugins like EcoAndroid by Cuoto et al. [14] or Automated

Fig. 1. Depiction of a unit test method after execution via MANAi. The
method is color coded and inline diagrams provide feedback on its energy
characteristics.
A. Architecture

MANAi is composed by two core modules, the Infrastruc-
ture (IFS) and the Experiment Environment (ExEn) module.
The IFS module leverages the IntelliJ Platform SDK1 and
provides components for energy experiment deﬁnition, data
acquisition, visualization and conﬁguration. The ExEn module
facilitates the maven-plugin mechanism2 and is responsible
to execute energy experiments deﬁned and conﬁgured via
the IFS module and report the recorded data obtained using
Intel’s RAPL. Through the IFS module, a user can conﬁgure
and deﬁne energy experiments within the development envi-
ronment. The module further instructs the ExEn module to
execute deﬁned energy experiments and report recorded energy
samples back to the user, e.g. through visual inline feedback
attributed to the executed method (cf. Fig.1). If required, the
ExEN module can be used in a headless manner (i.e. without
IntelliJ) to allow scenarios which are independent of the IDE,
e.g. as a step in a continuous integration pipeline. Additionally,
the ExEN module has been designed with extensibility in
mind, to ease future integration of additional methods to obtain
energy readings next to RAPL.

1Intellij Platform SDK – https://tinyurl.com/2p9ed8za
2Maven Plugin Development – https://tinyurl.com/4v637zdu

 
 
 
 
 
 
particular unit test, the inline charts highlight how the method
has evolved, considering their energy attributes. This further
allows comparing the energy characteristics of different unit
test methods. Furthermore, users are able to inspect how a
recent change to a method affects its energy consumption
compared to recorded energy data of previous revisions. For
example, let us assume we have a method that applies a rather
naive approach to sorting an array of integer values, which we
call Revision 1 as depicted in Fig. 3. Now, if we adapt the
implementation of Revision 1 with a slightly more efﬁcient
sorting algorithm in Revision 2, the Line Annotator highlights
if the applied changes led to an in- or decrease in energy
consumption (cf. Fig. 3).

c) Summary Window: MANAi supports a detailed over-
view of the energy recordings, either represented as bar chart
or using a contextual table view for the currently opened
class (cf. Fig. 4). The Summary Window offers the possibility
to compare different unit tests within the same class. The
data presented consists of the initially speciﬁed sampling
rate the number of samples, the recorded power and energy
data. Power and energy consumption data is reported for its
individual domains as speciﬁed by Intel RAPL [10], [13], [16].

Fig. 4. Visual comparison of the energy consumption of different unit test
methods via the Summary Window.

III. CONCLUSION

In this paper, we presented a brief overview on MANAi an
IntelliJ plugin for software energy proﬁling. We believe that
MANAi contributes to the ongoing challenges around software
sustainability by making energy characteristics of individual
unit test methods in code explicit by providing visual feedback
within the IDE. This way, our approach is beneﬁcial for
both education and development purposes. One of MANAi’s
limitations is a decrease in accuracy if an instrumented test
has a duration smaller than RAPL’s update rate. However,
related work on RAPL has already provided possible solutions
which are worthwhile being investigated in depth [17]. An
additional open challenge is the distortion of results due to
RAPL’s measurement overhead (cf. Desrochers et al. [18]).
MANAi is hosted on an open-source GitHub repository3. A
prepackaged binary of MANAi can be obtained from [15]. For
future work, we seek to extend the plugin’s support for other
programming languages like Kotlin, which due to its support
for Java Bytecode and raising popularity amongst developers
makes it a promising candidate for integration.

3MANAi GitHub Repository – https://github.com/aschuler84/manai

Fig. 2. Workﬂow from Java source code to per method attributed energy
consumption data.

The general workﬂow behind MANAi is described in Fig.2.
MANAi hooks into the compile process of Java source code
and locates unit test classes as possible candidates for ob-
taining energy consumption readings 1 . Entry points for an
energy experiment in MANAi are unit test methods. MANAi
automatically detects these unit test methods inside a Java
project in IntelliJ and tags them as potential energy experiment
candidates. These candidates are instrumented 2 to obtain
energy readings during their execution. The instrumented
classes are stored 3 within the currently opened project.
Using IntelliJ’s internal program runner infrastructure,
the
instrumented classes and unit test methods are executed 4 ,
and the energy data is being recorded. Finally, 5 the recorded
data is being visualized within the development environment.
As part of our replication package [15], we provide a short
video that shows how this workﬂow presents itself from a user
perspective.

B. Features

One of the key features of MANAi is that it offers different
views and windows that provide expressive visual feedback to
users about the energy characteristics of their Java projects.
In what follows, we give a brief overview of these particular
features:

a) Experiment Runner: The Experiment Runner facili-
tates IntelliJ’s internal program runner infrastructure to deﬁne
and execute energy experiments from within the IDE. Deﬁning
an experiment consists of setting the sampling rate, the number
of samples being collected and selecting the unit test classes
and methods being executed. This allows for replication of
experiments, as once an energy experiment is deﬁned, it can
be rerun multiple times.

b) Line Annotator: The Line Annotator allows for a
fast an easy to comprehend visual feedback of the energy
characteristics of a unit test method directly within the source
code. Next to the last energy consumption recorded for a

Fig. 3. The Line Annotator provides visual feedback on the energy charac-
teristics of a method and its evolution amongst different revisions.

(cid:44)(cid:81)(cid:87)(cid:72)(cid:79)(cid:79)(cid:76)(cid:45)(cid:45)(cid:68)(cid:89)(cid:68)(cid:3)(cid:51)(cid:85)(cid:82)(cid:77)(cid:72)(cid:70)(cid:87)(cid:48)(cid:36)(cid:49)(cid:36)(cid:76)(cid:3)(cid:51)(cid:79)(cid:88)(cid:74)(cid:76)(cid:81)(cid:45)(cid:68)(cid:89)(cid:68)(cid:3)(cid:54)(cid:82)(cid:88)(cid:85)(cid:70)(cid:72)(cid:3)(cid:38)(cid:82)(cid:71)(cid:72)(cid:17)(cid:70)(cid:79)(cid:68)(cid:86)(cid:86)(cid:38)(cid:82)(cid:80)(cid:83)(cid:76)(cid:79)(cid:72)(cid:71)(cid:3)(cid:38)(cid:79)(cid:68)(cid:86)(cid:86)(cid:72)(cid:86)(cid:17)(cid:70)(cid:79)(cid:68)(cid:86)(cid:86)(cid:44)(cid:81)(cid:86)(cid:87)(cid:85)(cid:88)(cid:80)(cid:72)(cid:81)(cid:87)(cid:72)(cid:71)(cid:3)(cid:9)(cid:3)(cid:38)(cid:82)(cid:80)(cid:83)(cid:76)(cid:79)(cid:72)(cid:71)(cid:3)(cid:38)(cid:79)(cid:68)(cid:86)(cid:86)(cid:72)(cid:86)(cid:70)(cid:82)(cid:80)(cid:83)(cid:76)(cid:79)(cid:72)(cid:76)(cid:81)(cid:86)(cid:87)(cid:85)(cid:88)(cid:80)(cid:72)(cid:81)(cid:87)(cid:3)(cid:70)(cid:79)(cid:68)(cid:86)(cid:86)(cid:72)(cid:86)(cid:86)(cid:87)(cid:82)(cid:85)(cid:72)(cid:3)(cid:76)(cid:81)(cid:86)(cid:87)(cid:85)(cid:88)(cid:80)(cid:72)(cid:81)(cid:87)(cid:72)(cid:71)(cid:70)(cid:79)(cid:68)(cid:86)(cid:86)(cid:72)(cid:86)(cid:72)(cid:91)(cid:72)(cid:70)(cid:88)(cid:87)(cid:72)(cid:3)(cid:76)(cid:81)(cid:86)(cid:87)(cid:85)(cid:88)(cid:80)(cid:72)(cid:81)(cid:87)(cid:72)(cid:71)(cid:70)(cid:79)(cid:68)(cid:86)(cid:86)(cid:72)(cid:86)(cid:83)(cid:85)(cid:82)(cid:89)(cid:76)(cid:71)(cid:72)(cid:3)(cid:89)(cid:76)(cid:86)(cid:88)(cid:68)(cid:79)(cid:73)(cid:72)(cid:72)(cid:71)(cid:69)(cid:68)(cid:70)(cid:78)(cid:3)(cid:87)(cid:82)(cid:3)(cid:88)(cid:86)(cid:72)(cid:85)(cid:36)(cid:81)(cid:81)(cid:82)(cid:87)(cid:68)(cid:87)(cid:72)(cid:71)(cid:3)(cid:54)(cid:82)(cid:88)(cid:85)(cid:70)(cid:72)(cid:38)(cid:82)(cid:71)(cid:72)(cid:3)(cid:68)(cid:81)(cid:71)(cid:3)(cid:53)(cid:72)(cid:83)(cid:82)(cid:85)(cid:87)(cid:86)(cid:24)(cid:23)(cid:22)(cid:21)(cid:20)Revision 1Revision 2REFERENCES

[1] A. Hindle, A. Wilson, K. Rasmussen, E. J. Barlow, J. C. Campbell,
and S. Romansky, “GreenMiner: a hardware based mining software
repositories software energy consumption framework,” in MSR 2014:
Proceedings of
the 11th Working Conference on Mining Software
Repositories. New York, New York, USA: ACM Press, 2014, pp. 12–
21. [Online]. Available: http://dl.acm.org/citation.cfm?doid=2597073.
2597097

[2] A. Hindle, “Green mining: A methodology of relating software change
to power consumption,” in Proceedings of
the 9th IEEE Working
Conference on Mining Software Repositories. IEEE Press, 2012, pp. 78–
87. [Online]. Available: https://ieeexplore.ieee.org/document/6224303
[3] A. Pathak, Y. C. Hu, M. Zhang, P. Bahl, and Y.-M. Wang, “Fine-grained
power modeling for smartphones using system call tracing,” in EuroSys
’11: Proceedings of the sixth conference on Computer systems. New
York, New York, USA: ACM Press, 2011, pp. 153–168. [Online].
Available: http://portal.acm.org/citation.cfm?doid=1966445.1966460

[4] A. Pathak, Y. C. Hu, and M. Zhang, “Where is

inside my app?” in EuroSys ’12: Proceedings of

the energy
the 7th
spent
ACM european conference on Computer Systems. New York, New
York, USA: ACM Press, 2012, pp. 29–42.
[Online]. Available:
http://dl.acm.org/citation.cfm?doid=2168836.2168841

[5] L. Cruz and R. Abreu, “Catalog of energy patterns for mobile
applications,” Empirical Software Engineering, pp. 1–27, 2019.
[Online]. Available: https://arxiv.org/pdf/1901.03302

[6] S. A. Chowdhury, A. Hindle, R. Kazman, T. Shuto, K. Matsui, and
Y. Kamei, “GreenBundle: An empirical study on the energy impact of
bundled processing,” in 2019 IEEE/ACM 41st International Conference
on Software Engineering (ICSE).
IEEE, 2019. [Online]. Available:
http://dl.acm.org/citation.cfm?doid=ICSE.2019.00114

[7] G. Rocha, F. Castor, and G. Pinto, “Comprehending energy behaviors of
java i/o apis,” in 2019 ACM/IEEE International Symposium on Empirical
Software Engineering and Measurement (ESEM).
IEEE, 2019, pp.
1–12. [Online]. Available: https://ieeexplore.ieee.org/document/8870158
[8] W. Oliveira, R. Oliveira, F. Castor, G. Pinto, and J. P. Fernandes,
“Improving energy-efﬁciency by recommending java collections,”
Empirical Software Engineering, vol. 26, 2021. [Online]. Available:
https://doi.org/10.1007/s10664-021-09950-y

[9] S. Hasan, Z. King, M. Haﬁz, M. Sayagh, B. Adams, and A. Hindle,
“Energy proﬁles of java collections classes,” in Proceedings of the
38th International Conference on Software Engineering - ICSE '16.

ACM Press, 2016. [Online]. Available: https://doi.org/10.1145/2884781.
2884869

[10] R. Pereira, M. Couto, F. Ribeiro, R. Rua, J. Cunha, J. P. Fernandes,
and J. Saraiva, “Ranking programming languages by energy efﬁciency,”
Science of Computer Programming, vol. 205, 2021. [Online]. Available:
https://www.sciencedirect.com/science/article/pii/S0167642321000022

[11] A. Schuler and G. Kotsis, “Mining api

interactions to analyze
software revisions for
the evolution of energy consumption,” in
2021 IEEE/ACM 18th International Conference on Mining Software
Repositories (MSR), 2021, pp. 312–316. [Online]. Available: https:
//doi.org/10.1109/MSR52588.2021.00043

[12] A. Schuler and G. Anderst-Kotsis, “Characterizing energy consumption
of third-party api libraries using api utilization proﬁles,” in Proceedings
of
IEEE International Symposium on Empirical
Software Engineering and Measurement (ESEM), ser. ESEM ’20. New
York, NY, USA: Association for Computing Machinery, 2020. [Online].
Available: https://doi.org/10.1145/3382494.3410688

the 14th ACM /

[13] K. Liu, G. H. L. Pinto, and Y. D. Liu, “Data-oriented characterization

of application-level energy optimization,” in FASE, 2015.

[14] M. Couto, J. Cunha, J. P. Fernandes, R. Pereira, and J. Saraiva,
“GreenDroid: A tool for analysing power consumption in the android
ecosystem,” in Scientiﬁc Conference on Informatics, 2015 IEEE
13th International.
[Online]. Available:
IEEE, 2015, pp. 73–78.
https://ieeexplore.ieee.org/abstract/document/7377811

[15] A. Schuler and G. Kotsis, “MANAi - An IntelliJ Plugin for Software
Energy Consumption Proﬁling (ICTS’2022 Dataset),” Jan. 2021.
[Online]. Available: https://doi.org/10.5281/zenodo.6405334

[16] H. David, E. Gorbatov, U. R. Hanebutte, R. Khanna, and C. Le,
“Rapl: Memory power estimation and capping,” in 2010 ACM/IEEE
International Symposium on Low-Power Electronics and Design
(ISLPED), 2010, pp. 189–194. [Online]. Available: https://doi.org/10.
1145/1840845.1840883

[17] M. H¨ahnel, B. D¨obel, M. V¨olp, and H. H¨artig, “Measuring energy
consumption for short code paths using rapl,” SIGMETRICS Perform.
Eval. Rev., vol. 40, no. 3, p. 13–17, jan 2012. [Online]. Available:
https://doi.org/10.1145/2425248.2425252

[18] S. Desrochers, C. Paradis, and V. M. Weaver, “A validation of dram
rapl power measurements,” in Proceedings of the Second International
Symposium on Memory Systems, ser. MEMSYS ’16. New York,
NY, USA: Association for Computing Machinery, 2016, p. 455–470.
[Online]. Available: https://doi.org/10.1145/2989081.2989088

