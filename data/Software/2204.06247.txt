2
2
0
2

r
p
A
3
1

]
E
S
.
s
c
[

1
v
7
4
2
6
0
.
4
0
2
2
:
v
i
X
r
a

xPACE and TASC Modeler:
Tool support for data-driven context modeling (cid:63)

Rodrigo Falc˜ao1[0000−0003−1222−0046], Rafael King1[0000−0001−7107−5390], and
Antˆonio L´azaro Carvalho2[0000−0002−0013−4565]

1 Fraunhofer IESE, Kaiserslautern (Germany)
2 Computer Science Graduate Program, Federal University of Bahia, Salvador (Brazil)

Abstract. From a requirements engineering point of view, the elicitation of context-
aware functionalities calls for context modeling, an early step that aims at under-
standing the application contexts and how it may inﬂuence user tasks. In practice,
however, context modeling activities have been overlooked by practitioners due
to their high complexity. To improve this situation, we implemented xPACE and
TASC Modeler, which are tools that support the automation of context modeling
based on existing contextual data. In this demonstration paper, we present our im-
plementation of a data-driven context modeling approach, which is composed of
a contextual data processor (xPACE) and a context model generator (TASC Mod-
eler). We successfully evaluated the results provided by the tools in a software
development project.

Keywords: context model · data-driven · automated.

1

Introduction

Computers have become increasingly ubiquitous, and we are witnessing the rise of ap-
plications, sensors, and networks that together deliver smart behaviors to users. Context
awareness plays a key role in this game as a core characteristic of ubiquitous comput-
ing [1] [2] and is frequently behind the perceived “intelligence” of modern software
solutions[3].

Context-aware functionalities are functionalities that consider context to produce
a certain system behavior, typically an adaptation or recommendation. From a require-
ments engineering point of view, the elicitation of context-aware functionalities requires
context modeling, which is an early step that involves identiﬁcation of contextual ele-
ments, analysis of accessibility (i.e., which contextual elements have available sources
from which their values can be read), analysis of the relevance of these contextual el-
ements for user tasks of interests, and analysis of combinations of contextual elements
for these user tasks [4]. The analysis of relevance and combinations can be challeng-
ing, though: In a scenario with dozens of contextual elements, how to ﬁgure out which
contextual elements, particularly in combination with each other, may inﬂuence a given
user task? As the number of contextual elements increases, the number of potential com-
binations grows exponentially. In practice, these context modeling activities have been

(cid:63) This work was partially supported by CNPq, Brazil.

 
 
 
 
 
 
2

R. Falc˜ao et al.

overlooked due to their high complexity: Practitioners regard them as time-consuming,
non-intuitive, and error-prone [5]. As a consequence, opportunities for discovering un-
expected context-aware functionalities are missed.

We approached this problem by automating context modeling for the elicitation
of context-aware functionalities. For this purpose, we designed a data-driven context
modeling process (ﬁrst introduced in [4]) that has three parts. First, the user task of
interest is analyzed; then, contextual data that relates to the user task is collected; and
ﬁnally, at the core of the data-driven context modeling process, the contextual data
is processed to identify relevant combinations of contextual elements – and ﬁnally a
context model is generated.

To come alive, the proposed automation in the process requires the implementation
of two software components. One is the Contextual Data Processor, which is respon-
sible for analyzing a contextual dataset. Its output is used by the other component, the
Context Model Generator, which is responsible for creating the concrete context model
that is expected to support requirements engineers in the elicitation of context-aware
functionalities. In this paper, we present our implementations of these software com-
ponents: xPACE and TASC Modeler 3, and brieﬂy discuss its application in a software
development project at Fraunhofer IESE.

2 Solution overview

Once a user task of interest has been chosen and corresponding contextual data has
been collected, a contextual dataset is available. Then the requirements engineer uses
TASC Modeler to generate the desired context model, providing the contextual dataset
as input, in addition to a metadata ﬁle that conﬁgures the behavior of both the context
model generator – how the contexts will be presented in the model – and the contextual
data processor – how the dataset should be analyzed. The detailed speciﬁcation of the
input ﬁles can be found with the source code. TASC Modeler forwards the dataset and
the metadata to xPACE, which analyzes the data and returns the ﬁndings in a data struc-
ture named standardized task-speciﬁc contexts, which is created to decouple the data
analysis from the context model generation. Then TASC Modeler translates the stan-
dardized task-speciﬁc contexts provided by xPACE into a context model representation.
In our case, the context model is represented as a directed acyclic graph with one root
node. Each path from the root node towards a leaf describes how a context inﬂuences
a user task of interest. Figure 1 shows an example. Consider the user task “Prepare a
coffee”. Each of the two paths contains a set of instantiated contextual elements that,
together, were found to inﬂuence the task (e.g., “When location = WORK and time =
AFTERNOON then user prepares coffee”, i.e., the context “location =WORK and time
= AFTERNOON” inﬂuences the user task “Prepare a coffee”, according to the model).
We implemented the dataset and the metadata artifacts as comma-separated value
(CSV) ﬁles, whereas we used JSON for the standardized task-speciﬁc contexts ﬁle.
Figure 2a shows the component diagram of the solution.

3 Source code available: https://github.com/rmfalcao/tasc-modeler-xpace

xPACE and TASC Modeler: Tool support for data-driven context modeling

3

Fig. 1: Example of a task-speciﬁc context model using TASC4RE.

(a) Component diagram of the solution.

(b) Detailed view of xPACE.

Fig. 2: The architecture of the solutions (functional view at runtime).

TASC Modeler and xPACE are containerized and can be deployed and executed in
any machine running the Docker Engine4, an open-source containerization technology.
The Docker container for starting TASC Modeler requires approx. 600 MB of RAM,
whereas for xPACE, approx. 300 MB are required – more memory may be needed
depending on the dataset size.

3

xPACE – eXtended Pairwise Analysis of Contextual Elements

The eXtended Pairwise Analysis of Contextual Elements (xPACE) was implemented
using a strategy that can be divided into two parts. First, it uses statistical methods to
search for correlations between pairs of contextual elements (CEs) in the contextual
dataset. Whenever correlations are found, the algorithm identiﬁes which contextual el-
ement instances (i.e., concrete values of the contextual elements) are correlated. This is
necessary because it is not enough to know that two contextual elements relate to each
other (e.g. “location” and “time”), but it also needs to be know which instances relate to
each other (e.g., “at home” and “evening”). After that, the pair is ordered to express the
direction of the relationship. After analyzing all pairs of contextual elements, we end
up with a list of pairwise relations, which is a set of directed pairwise relations among
contextual element instances. The second part of the strategy takes the list of pairwise
relations and builds a graph G by treating each pair as an edge of the graph. When all
pairs have been added to G, each path in the graph starting from a root node and ending
on a leaf node will represent a relevant combination of contextual elements that were

4 https://docker.com

WHENlocation = HOMEtime = MORNINGday type = WEEKENDTHENUSER PREPARES COFFEEWITHcoﬀee size = LARGElocation = WORKtime = AFTERNOONTHENUSER PREPARES COFFEEFirst part:general contextual element instancesSecond part:taskThird part:intrinsic contextual element instances«Computing Node» localhost«use»«Context Model Generator»  TASC Modeler «use»«Contextual Dataset» dataset.csv«Role» Requirements Engineer«Standardized task-specificcontexts»contexts.json«use»«create»«Context Model» Task-specificContext Model«create»«Metadata» metadata.csv«use»«use»«create»«Contextual Data Processor» xPACE «use»«use»«Contextual Data Processor» xPACE «Execution Environment» RScript«Component»  Web API«Deployment Artifact»main.R«Deployment Artifact» load_libraries.R«Deployment Artifact» util.R«Deployment Artifact» load_data.R«use»«use»«use»«use»4

R. Falc˜ao et al.

Fig. 3: Activity diagram illustrating the algorithm of xPACE.

found by xPACE to inﬂuence the user task. Figure 3 contains an activity diagram that
illustrates the data processor algorithm. The employed statistical methods are named in
the corresponding steps.

The algorithm is implemented using the R language5, and a Web API component
implemented in Java provides handy access to it. The core takes as input the name of
the user task and two ﬁles: a contextual dataset and a metadata ﬁle that describes the
dataset; as output, it produces a standardized task-speciﬁc contexts ﬁle, which can be
used by any context model generator that complies with its layout. Figure 2b shows the
internal structure of xPACE. The principal ﬁle in the core is main.R. It contains the
algorithm that we implemented to analyze contextual data to identify potential relevant
contexts for the user task in focus. The other R ﬁles are helpers (“load libraries.R”
loads the necessary packages into the memory, “util.R” deﬁnes some functions, and
“load data.R” reads the input ﬁles into the memory).

4 TASC Modeler

The Task-speciﬁc Context Modeler (TASC Modeler) is responsible for creating the
graphical representation of the context model. The requirements engineer interacts di-
rectly with TASC Modeler, providing the contextual dataset, the metadata, and the task
name as input. TASC Modeler then interfaces with a contextual data processor to pro-
vide the input data and receive the standardized task-speciﬁc context ﬁles as response.
In our case, TASC Modeler uses xPACE, but it could be any other contextual data pro-
cessor implementation able to generate the standardized task-speciﬁc context ﬁle via a
REST API. TASC Modeler reads from a conﬁguration ﬁle the information about which
contextual data processor it should use.

We implemented TASC Modeler as a single-page application written in Typescript
using the React Library6. When the application is loaded, the user is presented a form
where they can provide the dataset ﬁle, the metadata ﬁle, and the name of the user

5 https://www.r-project.org/
6 https://reactjs.org/

Graph analysisAdd relation to list of pairwiserelationsCombine CEs inpairsis next pairavailable?Test correlation (Kruskal-Wallis,Cramer's V) yesnois there correlation?Identify instances (Standardized residuals,Conover's Test) yesOrder CEs (Kruskal-Wallis, Theil's U) nois next relationavailable?Create standardizedtask-specificcontexts file from list of contextsnonodoes relation start with rootelement?yesAdd all paths from root until leavesinto list of contextsyesStatisticalmethodsxPACE and TASC Modeler: Tool support for data-driven context modeling

5

task in focus. When the button “Generate” is pressed, the application sends the input
data to xPACE through its Web API. Then xPACE returns its implementation of the
standardized task-speciﬁc contexts ﬁle, which is used by TASC Modeler to build the
context model.

Fig. 4: Screenshot of TASC Modeler showing an excerpt of the task-speciﬁc context
model.

5 Application and evaluation

We used TASC Modeler and xPACE to support the elicitation of context-aware func-
tionalities for DorfFunk7, a live communication app with approx. 25,000 active users
developed and maintained by Fraunhofer IESE. We chose a user task (“create a com-
ment”), collected contextual data (approx. 56,000 tuples from 15 contextual elements),
and used the tools. Figure 4 shows a screenshot of TASC Modeler with an excerpt of
the data-driven context model generated using DorfFunk data. The generated context
model was evaluated in a controlled experiment with professional software engineers,
where it showed its potential to support the identiﬁcation of relevant contexts for given
user tasks. All participants were asked to elaborate context-aware functionalities to im-
prove the targeted user task. Participants of the treatment group received the data-driven
context model, whereas participants of the control group received the list of contextual
elements that were available to describe context-aware functionalities. On average, par-
ticipants of the treatment group were able to elaborate context-aware functionalities that
combine more contextual elements. They also stated that they found the context model
valuable for supporting the elicitation of context-aware functionalities.

While the details of the experiment can be found in our previous paper [6], we here
reproduce some parts that concern the usage of the context model. Our hypothesis was:
“The data-driven context model is perceived by individuals as a useful instrument to
support the elicitation of context-aware functionalities”. In order to test this hypothesis,
we employed the UTAUT (Uniﬁed Theory of Acceptance and Use of Technology [7]).
In Figure 5, the positive trend towards the acceptance of the context model can be noted.

7 https://www.digitale-doerfer.de/unsere-loesungen/dorffunk/

6

R. Falc˜ao et al.

(a) Performance expectation.

(b) Attitude towards using technology.

Fig. 5: Participants’ assessment of the model’s usefulness.

6 Conclusion

Context modeling to support the elicitation of context-aware functionalities has been
disregarded by practitioners due to its high complexity. To improve this scenario, we
designed and implemented a data-driven context modeling process that automates the
analysis of combinations of contextual elements that inﬂuence user tasks and the gen-
eration of the context model. The automation of this process is supported by two tools:
the Contextual Data Processor and the Context Model Generator. In this demo paper,
we presented our implementation of these tools: xPACE and TASC Modeler.

As future work, we plan to apply the tools in different projects and evaluate their
quality attributes, in particular time behavior, capacity, and scalability when they have
to deal with much bigger contextual datasets.

References

1. S. Poslad, Ubiquitous computing: smart devices, environments and interactions.

John Wiley

& Sons, 2011.

2. R. O. Sp´ınola and G. H. Travassos, “Towards a framework to characterize ubiquitous software

projects,” Information and Software Technology, vol. 54, no. 7, pp. 759–785, 2012.

3. M. K. Pinheiro and C. Souveyet, “Supporting context on software applications: a survey on

context engineering,” Mod´elisation et utilisation du contexte, vol. 2, no. 1, 2018.

4. R. Falc˜ao, “Improving the elicitation of delightful context-aware features: A data-based ap-
proach,” in 2017 IEEE 25th International Requirements Engineering Conference (RE), 2017,
pp. 562–567.

5. R. Falc˜ao, K. Villela, V. Vieira, M. Trapp, and I. L. de Faria, “The practical role of context
modeling in the elicitation of context-aware functionalities: a survey,” in 2021 IEEE 29th
International Requirements Engineering Conference (RE).

IEEE, 2021, pp. 35–45.

6. R. Falc˜ao, M. Trapp, V. Vieira, and A. Vianna Dias da Silva, “Using a data-driven context
model to support the elicitation of context-aware functionalities–a controlled experiment,”
in International Conference on Product-Focused Software Process Improvement. Springer,
2021, pp. 119–135.

7. V. Venkatesh, M. G. Morris, G. B. Davis, and F. D. Davis, “User acceptance of information

technology: Toward a uniﬁed view,” MIS quarterly, pp. 425–478, 2003.

20.0%100.0%80.0%100.0%PE.3 (n=5)PE.2 (n=5)PE.1 (n=5)100%80%60%40%20%0%20%40%60%80%100%1234540.0%20.0%100.0%60.0%80.0%100.0%AT.4 (n=5)AT.3 (n=5)AT.2 (n=5)AT.1 (n=5)100%80%60%40%20%0%20%40%60%80%100%12345