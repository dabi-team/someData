Automatic Map Generation for Autonomous Driving System Testing

Yun Tang, Yuan Zhou, Kairui Yang, Ziyuan Zhong, Baishakhi Ray, Yang Liu, Ping Zhang, Junbo Chen

2
2
0
2

n
u
J

9
1

]
E
S
.
s
c
[

1
v
7
5
3
9
0
.
6
0
2
2
:
v
i
X
r
a

Abstract— High-deﬁnition (HD) maps are essential in testing
autonomous driving systems (ADSs). HD maps essentially
determine the potential diversity of
the testing scenarios.
However, the current HD maps suffer from two main limi-
tations: lack of junction diversity in the publicly available HD
maps and cost-consuming to build a new HD map. Hence,
in this paper, we propose the ﬁrst method, FEAT2MAP, to
automatically generate concise HD maps with scenario di-
versity guarantees. FEAT2MAP focuses on junctions as they
signiﬁcantly inﬂuence scenario diversity, especially in urban
road networks. FEAT2MAP ﬁrst deﬁnes a set of features to
characterize junctions. Then, FEAT2MAP extracts and samples
concrete junction features from a list of input HD maps or
user-deﬁned requirements. Each junction feature generates a
junction. Finally, FEAT2MAP builds a map by connecting the
junctions in a grid layout. To demonstrate the effectiveness
of FEAT2MAP, we conduct experiments with the public HD
maps from SVL and the open-source ADS Apollo. The results
show that FEAT2MAP can (1) generate new maps of reduced
size while maintaining scenario diversity in terms of the code
coverage and motion states of the ADS under test, and (2)
generate new maps of increased scenario diversity by merging
intersection features from multiple maps or taking user inputs.

I. INTRODUCTION

Autonomous driving systems (ADSs) have gained enor-
mous attention and development recently. Safety is the
public’s primary concern for the mass deployment of ADSs.
According to ISO/PAS 21448 [1], SOTIF (Safety Of The
Intended Functionality) is the key for ADS safety. However,
due to the enormous number of parameter combinations
to specify test scenarios, it is still a challenge to validate
the SOTIF of ADSs, which aims to reduce the region of
unknown and unsafe scenarios.

Among the existing methods for the validation of SOTIF,
simulation-based ADS testing is a major approach to dis-
covering unknown and unsafe scenarios for ADSs [2]. In the
simulation environment, we can model different elements for
an autonomous vehicle, such as HD (High-Deﬁnition) maps
(e.g., road network, trafﬁc signs, and trafﬁc lights), vehicle
dynamics, and sensors (e.g., camera, LiDAR, radar). Among
all the elements, HD maps are prerequisites for ADS testing,
and they essentially determine the potential diversity of the
testing scenarios, directly impacting the testing efﬁciency.

Yun Tang, Yuan Zhou and Yang Liu are with Nanyang Technologi-
cal University, Singapore 639798. Email: yun005@e.ntu.edu.sg,
{y.zhou, yangliu}@ntu.edu.sg

Kairui Yang, Ping Zhang and Junbo Chen are with DAMO Academy,
Alibaba Group, China. Email: kairui.ykr@alibaba-inc.com,
zp.zp@cainiao.com, junbo.chenjb@taobao.com

Ziyuan Zhong and Baishakhi Ray are with Columbia University,
New York, NY, 10025. Email: ziyuan.zhong@columbia.edu,
rayb@cs.columbia.edu

For example, Gambi et al. demonstrated that many lane
departure failures have manifested on different shapes of
roads [3]. Tang et al. showed that by exploiting the topology
features of junctions in HD maps, diverse testing scenarios
could be generated, and different issues related to SOTIF
were exposed in the Apollo ADS [4]–[6].

Despite the importance of HD maps, there are some limita-
tions of the publicly available HD maps during ADS testing.
First, the commercial HD maps, such as those provided by
[7], [8] are replicas of the real world and contain a signiﬁcant
amount of duplicate map elements (e.g.,
junctions with
similar shapes). Thus, scenarios from such HD maps may
lack diversity. Second, although the open-source simulators,
such as Carla [9] and SVL [10], often come with some
built-in HD maps, they are relatively small with a limited
number of junctions and roads. Consequently, the diversity
of scenarios generated from these maps is limited. Third,
different cities or regions may contain different
junction
structures. Hence, to test ADSs sufﬁciently, we need different
HD maps from different areas and perform ADS testing
within each map. It is time-consuming. Fourth, manually
building diverse HD maps using tools, such as SUMO netedit
[11] or CommonRoad Scenario Editor [12], is laborious,
given a large number of scenario requirements. Therefore,
it is essential to develop a framework to generate concise
but scenario-diverse HD maps automatically.

However, there is little work on automatic HD map gen-
eration. Gambi et al. [3] proposed a search-based approach
to generate lanes of changing curvatures to test the lane-
keeping functionality. However, other trafﬁc elements, such
as intersections and trafﬁc controls, are not considered. Thus,
the map generated is incomplete, and the scenarios are
limited. Mi et al. [13] used a trained hierarchical graph
generation model to generate the road network graphs. The
model is trained with existing HD maps and tries to generate
maps similar to its training data. As a result, it suffers from
the same aforementioned limitations (e.g., limited scenario
diversity and duplicated intersections) as the training data
(i.e., existing HD maps).

In this paper, we propose the ﬁrst feature-based method,
FEAT2MAP, to generate scenario-diverse HD maps automat-
ically based on junction features as junctions signiﬁcantly
affect scenario diversity, especially in urban road networks
[4]–[6]. First, we deﬁne a feature vector to characterize junc-
tions, including the number of roads connected by a junction,
orientations of the connected roads,
trafﬁc controls, and
crosswalk features. Second, FEAT2MAP extracts all possible
values of each feature element from a set of maps or users’
inputs. Third, FEAT2MAP applies combinatorial sampling to

 
 
 
 
 
 
focus on the intersections of a map, as intersections can sig-
niﬁcantly affect the map complexity and scenarios diversity.
In the future, we will take roads into consideration. (2) An
ADS can be roughly divided into the perception and the
planning components. We mainly focus on generating maps
for testing the planning component. Testing of AI models in
the perception component is orthogonal to our work.

III. METHODOLOGY

A. Modeling of Lanes

Based on [16], lanes can be represented by their center
reference paths. We model these reference paths using cu-
bic B´ezier curves, which are extensively used in computer
graphics [17]. Given four control points P0, P1, P2 and P3,
the cubic B´ezier curves can be formulated as:
3
(cid:88)

(cid:19)

B(t) =

(1 − t)3−itiPi

(1)

(cid:18)3
i

i=0

i

(cid:1) are the binomial coefﬁcients. Cubic
where t ∈ [0, 1], and (cid:0)3
B´ezier curves are powerful in representing simple curves
such as straight lines, circle-shaped or S-shaped, and can
be combined into B´ezier splines of complex shapes. For any
path (e.g. reference path or boundary curve of a lane), if the
start point Pstart, start heading θ0, end point Pend, and end
heading θ1 are known, the controls points can be calculated
as:

P0 = Pstart
P1 = Pstart + (d0 cos θ0, d0 sin θ0)
P2 = Pend − (d1 cos θ1, d1 sin θ1)
P3 = Pend

(2)

where both d0 and d1 are heuristically deﬁned as half of the
distance between P0 and P3 for a smoother curve.

B. Feature Modeling of Junctions

In the section, we deﬁne the junction features to charac-
terize a junction, containing the road feature, the rotation
feature, the control feature, and the crosswalk feature.

First, the road feature aims to describe the number of roads
connected by a junction, such as T-junctions and n-legged
intersections. The more connected roads, the more complex
the junction becomes, resulting in more testing efforts for
ADSs. Hence, the road feature of a junction Jj, denoted
as F road
, is deﬁned as the number of roads connected by
Jj
a junction. For example, the junction J0 shown in Fig. 1
connects four roads, so F road

= 4, while F road

= 3.

Second, the rotation feature aims to model the relative
orientations of the roads connected by a junction. It indicates
the relative directions an autonomous vehicle can drive after
entering the junction. Given a junction Jj, suppose its center
is C, which is calculated as the geometry center of its
bounding polygon, and the corresponding start point of road
Ri is Pi, which is the connecting endpoint of Ri’s reference
#     »
CPi is called road socket
line to the junction. The vector
of Ri. Hence, the relative location of Ri and Rk can be
#      »
#     »
CPk. Hence, the
CPi and
measured by the angle between

J0

J1

Fig. 1: A two-junction trafﬁc network.

generate a minimal set of concrete feature vectors without
duplication while covering all possible feature combinations.
Finally, FEAT2MAP builds a junction per concrete feature
vector and constructs a complete HD map with connected
junctions in a grid layout. To demonstrate the effectiveness
of FEAT2MAP, we generated several HD maps from single
and multiple input maps and performed qualitative and
quantitative analysis by performing route coverage testing [4]
on the latest open-source ADS Apollo 7.0 [14]. The results
show that (1) FEAT2MAP can effectively extract features
from an input map and generate concise HD maps while
preserving scenario diversity; (2) FEAT2MAP can generate
HD maps based on combined features from multiple input
maps with higher perceived scenario diversity by the ADS-
under-test than individual input map; and (3) FEAT2MAP
can generate customized HD maps from user input.

II. PRELIMINARIES AND PROBLEM STATEMENT

HD map is one of the essential components for modern
ADSs, especially in city-driving scenarios. It encodes the
semantic features (e.g., topology and geometry) of trafﬁc
network elements such as trafﬁc lanes, roads, intersections,
trafﬁc lights, crosswalks, and stop signs [15]. Fig. 1 shows
a diagram of an HD map containing a two-junction trafﬁc
network. There are six two-way roads (R0 − R5) in the
diagram. Each road (e.g., R0) contains a forward lane (e.g.,
L2 in R0) and a backward lane (e.g., L1 in R0). R0−R3 form
a trafﬁc light-controlled junction J0, and R3 − R5 construct
a stop sign-controlled junction J1. Lanes are the atomic
element in an HD map, and each lane is represented by its
center reference line. Lanes in an HD map can be classiﬁed
into road lanes (e.g., L1 − L12 in Fig. 1) and junction lanes
(e.g., L13 − L30 in Fig. 1).

Given an HD map, ADS testing aims to guarantee that the
autonomous vehicle can run safely at any part of the map
under any scenario. However, an HD map from part of a
city or a limited area usually contains limited intersection
structures. Consequently, we cannot test an ADS sufﬁciently
on such a map. Hence, in this paper, we aim at generating
an HD map automatically by eliminating duplicated intersec-
tions while maximizing the diversity of intersection structures
and potential scenarios.

Before illustrating the generation method in detail, we ﬁrst
discuss some assumptions in the paper. (1) We currently

the control feature can be deﬁned as F ctrl

trolled by trafﬁc lights, and stop: controlled by stop signs.
∈
Hence,
{bare, signal, stop}. For example, in Fig. 1, F ctrl
= signal
and F ctrl

= stop.

J0

Jj

J1

Finally, the crosswalk feature, denoted as F xwlk

whether there are crosswalks in a junction. Hence, F xwlk
{T rue, F alse}.

Jj

Jj

, indicates
∈

Fig. 2: Junction rotation normalization.

FJj = [F road

Jj

, F rot
Jj

, F ctrl
Jj

, F xwlk
Jj

],

(9)

Therefore, we have the following deﬁnition.
Deﬁnition 1: The junction feature of a junction Jj, de-

noted as FJj , is a vector deﬁned as:

Jj

= [γ1, γ2, . . . , γN ], where N = F road

rotation feature is a vector of angles, each describing the
angle from one road socket to its adjacent one in counter-
clockwise order. Given a junction Fj, its rotation feature is
denoted as F rot
and
Jj
(cid:80)N
i=0 γi = 2π.
Given such a rotation feature, we can generate various
junctions by rotating the original junction around its center.
Hence, we may ﬁrst perform rotation normalization, i.e.,
rotating each junction such that it aligns to the four regu-
lar directions, i.e., East, North, West, and South, as
much as possible. The rotation normalization process can
be described as follows. Suppose the rotation feature of a
junction Jj is [γ1, γ2, . . . , γN ], where N = F road
. We ﬁrst
rotate and re-index the road sockets and the angles such that
γ1 is the maximal one. After rotation normalization, the angle
from the East direction to CP1 is αopt. Then, αopt can be
the optimal solution by solving the following optimization
problem:

Jj

N
(cid:88)

4
(cid:88)

signi,mβ2

i,m

min
α

m=1
s.t. ∀m ∈ {1, 2, 3, 4}, i ∈ {2, . . . , N },

i=1

signi,m ∈ {0, 1},
β1,m = α − (m − 1)π/2,

βi,m = α +

i−1
(cid:88)

k=1

γk − (m − 1)π/2,

4
(cid:88)

m=1

signi,m = 1.

(3)

(4)

(5)

(6)

(7)

(8)

were βi,1 (resp., βi,2, βi,3, and βi,4) is the angle from East
#     »
(resp., North, West, South) to
CPi. Thus, the rotation
feature can be represented by the angles from the East
direction to the road sockets, i.e., F rot
= [α1, α2, . . . , αN ],
Jj
where αi = βi,1 is computed by Eqns. 6 and 7 with α =
αopt. With the normalized rotation feature, the corresponding
road sockets are uniquely determined. For example, as shown
in Fig. 2, suppose after rotation normalization, αopt = α1,
then we have the rotation feature F rot
= [α1, α1 + γ1, α1 +
Jj
γ1 + γ2].

Third, the control feature designates how the trafﬁc is
regulated in a junction. Commonly, there exist three kinds
of control manners, i.e., bare: no controls, signal: con-

where F road
is a vector of length F road

∈ N≥3 = {3, 4, . . .} and F rot
Jj
.

Jj

Jj

∈ (cid:81)F road

Jj
i=1

[0, 2π)

C. Extraction of Feature Vectors

According to Deﬁnition 1, we describe how to extract the

features from a set of HD maps.

First, since the road, the control, and the crosswalk fea-
tures are discrete variables, we can obtain all their values by
checking the junctions in each map. Therefore, the sets of
all possible values of the three features of a given map are
denoted as F road, F ctrl, and F xwlk, respectively.

Second, as the rotation feature contains continuous vari-
ables, we collect from the HD maps the minimal and the
maximal values of each element in the rotation feature. Note
that the rotation features from the junctions with the same
road feature can be compared element-wisely after rotation
normalization. Hence, the collected rotation feature for the
junctions with n connected roads can be described as:

F rot

n = [[αmin

1

, αmax
1

], . . . , [αmin

n , αmax

n

]],

(10)

where αmin

: F road
{Jj
Jj
[α1, . . . , αn].

F rot
i = min
Jj
Jj ∈J n
= n}, and F rot
Jj

[i], αmax
i

= max
Jj ∈J n

F rot
Jj

[i], J n =

[i] = αi with F rot
Jj

=

Hence, the map feature of a set of maps is described as

F = (cid:83)

n∈F road F rot

n × F ctrl × F xwlk.

D. Map Construction Based on Feature Vectors

During the map construction with the junctions generated
by the feature vectors, we need to ensure 1) all junctions are
connected, 2) the generated map emulates urban road net-
works, and 3) no road or junction overlaps, which makes the
construction process challenging. In this paper, we propose
a greedy method to construct a grid-layout map iteratively.
The details are shown in Algorithm 1.

Given a set of HD maps M, by checking all

junc-
the features F road,
tions of the maps, we can extract
{F rot
: n ∈ F road}, F ctrl, and F xwlk. Before con-
n
structing the map, we initialize a grid point container
Pe = {P0,0} for holding empty points, another grid point
container Pf = ∅ for ﬁlled points and a set J = ∅
for storing sampled junction features (Line 1). For each
vector [F road
in F road × F ctrl × F xwlk,
we perform multivariate uniform sampling in the region

, F xwlk
Jj

, F ctrl
Jj

Jj

]

Algorithm 1: Feature-based HD Map Generation
Input: The set of junction features:

F = (cid:83)

n∈F road F rot

n × F ctrl × F xwlk.

Output: A new map Mc.

1 Initialize the map Mc = ∅, the sets of empty grid points
Pe = {P0,0} and ﬁlled grid points Pf = ∅, an empty
junction feature set J = ∅;

2 j = 0;
3 for n ∈ F road do
4

for control ∈ F ctrl do

for crosswalk ∈ F xwlk do

n [i][0],F rot

n [i][1]]], ∀i ∈

F road
Jj = n;
F rot
Jj = [αi : αi ∈ U[F rot
{1, ..., n};
F ctrl
Jj = control;
F xwlk
Jj = crosswalk;
FJj = [F road
Jj
J = J ∪ {FJj }, j = j + 1;

Jj , F ctrl

, F rot

Jj

, F xwlk
Jj

];

12 while J (cid:54)= ∅ do
13

Select a junction feature FJj and J = J \ {FJj };
Find FJj ’s best match grid point in Pe, say Px,y;

14
15 Mc = Mc ∪ {(Px,y, FJj )};
16

Pe = Pe \ {Px,y}, Pf = Pf ∪ {Px,y};
if Px+1,y (cid:54)∈ Pe ∪ Pf then
Pe = Pe ∪ {Px+1,y};
if Px,y+1 (cid:54)∈ Pe ∪ Pf then
Pe = Pe ∪ {Px,y+1};
if Px−1,y (cid:54)∈ Pe ∪ Pf then
Pe = Pe ∪ {Px−1,y};
if Px,y−1 (cid:54)∈ Pe ∪ Pf then
Pe = Pe ∪ {Px,y−1};

5

6

7

8

9

10

11

17

18

19

20

21

22

23

24

25 return Mc.

n [i][0], F rot
n [i][1]]
, F ctrl
, F rot
Jj
Jj

(cid:81)n
i=1[F rot
to generate a junction feature
, F xwlk
FJj = [F road
] (Lines 3 - 10). The
Jj
sampled junction features are stored in J (Line 11), each
of which will be used to instantiate an individual junction in
the grid layout.

Jj

Next, for each junction feature Jj, we search for the empty
grid points in Pe to select the grid point Px,y of the highest
matching score with Jj. The matching score is heuristically
calculated in the following way:

Let k be the maximal number of roads that Jj at Px,y can
connect after proper rotation with the surrounding junctions
(if available) at Px+1,y, Px,y+1, Px−1,y, and Px,y−1. If
F road
> k, then the feature and the point does not match
Jj
and the score is set to −∞. Otherwise, the score is set to k.
Random selection is performed when a draw occurs.

After the grid point, say Px,y, is selected for FJj , and the
corresponding junction is instantiated at Px,y (Line 14-15).
The junction feature is removed from the feature set (Line
13) and the grid is extended in the four regular directions
(i.e., East, North, West, and South) from Px,y, free
for new junction assignments (Line 17-24). After all the
junctions are instantiated, the roads connecting junctions at
neighboring grid points can be constructed via road socket
vectors (controlled by F rot). The start point (resp. end point)
of road lanes can then be obtained by shifting the start

TABLE I: Features extracted from San Francisco map

F road F ctrl

F xwlk

F rot
3

{3,
4}

{signal,
stop}

{T rue,
F alse}

[[-22.62,9.81],
[61.40, 126.22],
[-143.45, 200.92]]

F rot
4
[[-5.26, 13.61],
[-75.63, 93.10],
[-176.85, 191.76],
[-109.24, -87.91]]

(a) Input map.

(b) M1

(c) M2

(d) M3

Fig. 3: (a) The input SanF rancisco map; (b)–(d) three
generated HD maps M1, M2, and M3.
point (resp. end point) of the road’s reference path along
the perpendicular direction of the start heading (resp. end
heading) of the road. After the road lanes are built, the
junction lanes can be added by connecting the incoming
and outgoing lanes of the junction. Next, trafﬁc controls and
crosswalks are created at appropriate locations. Lastly, we
can output the HD map ﬁles based on Mc.

Note that to make the generated HD map as concise as
possible while preserving potential scenario diversity, we set
the following default conﬁgurations for FEAT2MAP:
• Given two junctions with the same junction feature, but
one contains a one-way road while the other contains only
two-way roads, any testing scenario generated from the
former can also be generated from the latter one. Hence,
all roads are two-way to keep the generated map concise.
• To minimize the number of junctions in the generated map,
we assume that all roads are fully connected at junctions.
It means there exists at least one navigation path (i.e.,
junction lane) connecting each road pair.

• The crosswalks are instantiated within the range of junc-
tions and only overlap with junction lanes instead of road
lanes. The signals are placed in front of the road it controls
(facing the road), and the stop signs are placed on the right
side of the road (facing the road).

• The default grid-gap is 100 meters (e.g., Px+1,y is 100
meters to the east of Px,y, lane width is 3.5 meters (default
value of selected input maps), and crosswalk width is 4.5
meters (slightly longer than a regular sedan).

IV. EXPERIMENTS

We conduct comprehensive experiments in this section to

answer the following research questions.
RQ1: Can FEAT2MAP generate complete HD maps connect-
ing all the intersections from sampled features correctly?
RQ2: Can FEAT2MAP take a single input map and generate
concise maps of the same level of scenario diversity as the
input?
RQ3: Can FEAT2MAP take multiple input maps and generate
concise maps of equal or greater scenario diversity than
individual input?
RQ4: Can FEAT2MAP take user-speciﬁed features and gen-
erate customized maps?

(a) J0

(b) J1

(c) J2

(d) J3

(a) Code coverage.

(e) J4

(f) J5

(g) J6

(h) J7

Fig. 4: The detailed junctions of the map in Fig. 3(b).

A. Experimental Settings

To demonstrate the effectiveness of FEAT2MAP, we im-
plement a prototype of FEAT2MAP and conduct experiments
on the latest Apollo 7.0 [14] stack with three of the largest
HD maps available for Apollo, i.e., SanF rancisco [18],
GoM entum [19] and Shalun [20]. We deﬁne two metrics
to measure scenario diversity. The ﬁrst one is line coverage,
which describes how many statements in the ADS have been
executed by the scenarios. Two scenarios are considered
different if they cover different statements. The other one
is behavior coverage, which describes different behavior
transitions during the execution of a scenario.

To answer RQ1, we run FEAT2MAP on SanF rancisco
and perform qualitative analysis on three generated maps
M1−3. To answer RQ2, we conduct quantitative analysis
by comparing the coverage results on SanF rancisco and
M1−3. To answer RQ3, we generate a new map M4 from
SanF rancisco [18], GoM entum [19] and Shalun [20]
and conduct the same experiments as in RQ2. To answer
RQ4, we illustrate the construction of customized maps from
manual features.

All the experiments are conducted on a desktop computer
(with i7-6850K CPU, 64GB RAM, and GTX 1080T Ti).
When an HD map is generated, Dreamview (Apollo’s full-
stack HMI service) [21] is restarted to load the new map.
We run the route coverage testing [4] in Apollo’s built-in
sim-control mode [22], which does not require any third-
party simulators such as SVL [10]. The input of the planning
component is published using simulated dummy data. Specif-
ically, sim-control publishes the results of localization,
chassis, and prediction, while our testing script submits
routing requests and publishes traf f ic light information
at runtime.

B. RQ1: Qualitative Analysis on Map Generation

San Francisco map contains 91 junctions (including 88
signal-controlled and three stop-sign controlled), 164 roads,
and 1524 lanes (including 868 junction lanes and 656 road
lanes); there are 13 junctions with crosswalks.

Due to randomness in the rotation sampling of road socket
vectors, the extracted feature set F can generate unlimited

(b) Stage transition.

Fig. 5: Comparison of code coverage and stage transitions
of Apollo running on SanF rancisco map and the three
generated maps.

HD maps. Fig. 3 presents the bird-view of the input map
SanF rancisco and three generated HD maps M1, M2 and
M3 based on extracted features listed in Table I. We can ﬁnd
that the number of junctions is reduced to 8 in M1−3 from
91 in SanF rancisco.

Take M1 in Fig. 3(b) for example. According to Algorithm
1 given in Section III-D, FEAT2MAP generates 8 junctions,
as shown in Fig. 4. Junction J0, J4, J5, and J7 are three-
legged T-junctions and the rest are four-legged intersections.
Junction J0, J3, J5, and J6 are signal-controlled while the
rest are stop-sign controlled. Junction J2, J5, J6, and J7
have crosswalks instantiated at all the connected roads while
the rest have no crosswalks. From Fig. 4, we can see that
FEAT2MAP can generate junctions with different topological
and geometrical features and instantiate trafﬁc controls and
crosswalks correctly.

C. RQ2: Quantitative Analysis of Scenario Diversity

To collect

the line coverage, we instrument Apollo’s
planning component during compilation using the coverage
command [23] provided by its build tool Bazel [24] as
the scenario handling mechanisms are implemented in the
planning component. Fig. 5 shows the coverage results of
our experiments on the four maps in Fig. 3. Fig. 5(a)
shows the accumulated code coverage results on different
maps. The accumulated lines covered eventually are 8275
(SanF rancisco), 8232 (M1), 8205 (M2) and 8238 (M3)
respectively. As we can see, SanF rancisco has many junc-
tions covering the same lines of code (highlighted in light
blue), resulting in a signiﬁcant amount of duplicated test
cases. On the other hand, unique lines of code get covered
in every junction in M1−3. It only takes eight junctions
in M1−3 to reach a similar level of code coverage. Notice
that SanF rancisco has slightly higher code coverage than
M1−3. Based on the source code-level
the

investigation,

Fig. 6: Scenarios
SanF rancisco and M1−3.

and stage

transitions

covered in

uniquely covered codes in SanF rancisco are related to
human errors in the HD map ﬁle (e.g., the id of some
crosswalk elements are missing). Such human errors do
not exist in maps generated by FEAT2MAP automatically.
Besides the map error, we also discovered some potential
issues of the planning component (reported at [25], [26]).
Such issues, encountered in different situations (e.g., on
roads or inside junctions), trigger different error handling
mechanisms implemented in the planning component. This is
the main reason for the slight difference in the line coverage
results of M1−3.

Apollo implements its planning component as a mod-
ularized state machine, where states align with common
trafﬁc scenarios such as intersection cruising, emergency
stops, etc. and publishes its internal scenario selections (e.g.,
LaneFollow and TrafﬁcLightProtected) and stage transitions
(e.g. Approach and IntersectionCruise) within each scenario.
The coverage results of the stage transitions are shown in
Fig. 5(b). From the results, we can ﬁnd that many junctions
belong to the same scenario in Apollo’s view of point. As a
result, the same strategies are applied by Apollo to navigate
through them (highlighted in light blue as well). On the other
hand, the eight junctions in M1−3 reach the same level of
coverage as that of 91 junctions in the SanF rancisco map.
Speciﬁcally, there are 16 scenario types deﬁned in Apollo
[27], out of which ﬁve scenarios and their stages are relevant
to the experiments [28]:

• Lane Follow
• Stop Sign Unprotected
• Trafﬁc Light Protected
• Trafﬁc Light Unprotected Left Turn
• Trafﬁc Light Unprotected Right Turn

The relevant scenarios and their stage transitions are plot-
ted in Fig. 6, where the nodes represent the stages and arrows
are possible transitions. The stages and transitions covered
by SanF rancisco and M1−3 are the same and highlighted
in orange, while the uncovered stages are rendered grey.

The four paths covered are:
• LF → S P S → S S → S C → S I → LF
• LF → T A → T C → LF
• LF → L A → L I → LF
• LF → L A → L C → L I → LF

The stage transitions align with our testing setup, starting
and ending at road lanes (i.e., LF ). The covered scenarios
also match with the features of the generated junctions.
One may notice that the right turn-related scenarios are not

(a) Mega junction

(b) Road circle

(c) One-way roads

Fig. 7: Junctions generated with manually deﬁned junction
features.

TABLE II: Multiple input map generation

Discrete Features

F road = {3, 4}

F ctrl =
{signal, stop, bare}

F xwlk = {T rue, F alse}

F rot

Rotation Features
3 =
[[-23.58, 28.03],
[61.4, 127.39],
[140.41, 213.36]]

F rot

4 =
[[-7.49, 13.61],
[60.46, 134.06],
[142.18, 214.47],
[-109.24, -69.95]]

Code

Stage

8236

4 paths
covered
in previous
section
+
LF

covered. This is because Apollo only enters the right turn
scenario when the ADS is turning right under the red trafﬁc
light. When the trafﬁc light is green, which is always the
case during our sim−control simulation, Apollo treats right
turning the same as driving straight across the junction (i.e.,
T A and T C).

D. RQ3: Map Generation From Multiple Maps

We generate map M4 with multiple input maps,
i.e.,
SanF rancisco, GoM entum, and Shalun. The experiment
results are listed in Table II. The features extracted from
Shalun are not much different from SanF rancisco. How-
ever, due to the existence of the bare junctions (i.e., no
controls) in GoM entum,
the merged control feature is
F ctrl = {signal, stop, bare}, which results in 12 junctions
to be generated in M4. The code coverage of M4 is similar to
those of M1−3. We ﬁnd that Apollo 7.0 treats bare junctions
as normal roads, hence no signiﬁcant difference in the code
coverage. However, a new path consisting of only one stage
LF (i.e., no junction scenarios are triggered) is covered
because of the existence of bare junctions.

In summary, experiments with single and multiple input
maps have demonstrated the effectiveness of FEAT2MAP in
feature-based map generation.

E. RQ4: Map Generation from User-Deﬁned Features

The generation capability of FEAT2MAP is not limited
to generating junctions from the existing maps, such as
those shown in Fig. 4. FEAT2MAP also accepts manually
deﬁned feature values if users require customization. For
example, the mega junction shown in Fig. 7(a) is generated
by specifying the following junction feature: F road
mega =
5, F ctrl
mega = T rue and F rot
mega =
[0◦, 72◦, 144◦, −144◦, −72◦].

mega = signal, F xwlk

With the cubic B´ezier curve model, FEAT2MAP can also
generate a set of roads connected end-to-end by specifying a

list of road conﬁgurations where each road’s end point (resp.
end heading) is the next road’s start point (resp. start head-
ing). Finally, in addition to the default two-way roads, one-
way roads are also supported by FEAT2MAP as long as users
specify the road type of each road socket. Fig. 7(c) shows a
T-junction where the road types associated to the sequence of
the road sockets, started from the East most road socket and
listed in a counterclockwise direction, is [In, Out, InOut],
where In, Out, InOut mean one-way incoming, one-way
outgoing, and two-way roads, respectively.

V. DISCUSSION AND CONCLUSION

Discussion. Scenario-based testing is inevitable across the
entire phase of ADS development. How diverse and repre-
sentative the testing scenarios are essentially determines the
testing efﬁciency and effectiveness. Bagschik et al. [29] pro-
poses a 5-layer model for testing scenarios, including road
level (layer 1), trafﬁc infrastructure (layer 2), manipulation
of layer 1 and 2 (layer 3), object (layer 4) and environment
(layer 5). A recent survey [2] shows that most works focus
on sampling critical scenarios at layer 4 and layer 5, i.e.,
by controlling the trajectories of other trafﬁc participants
such as vehicles or pedestrians or manipulating the simulated
weather. However, the topological and geometric features of
the trafﬁc networks (i.e., layer 1-3), which we believe are
the foundation of testing scenarios, are often overlooked.
As a result, HD map generation based on required features
substantially lifts the restrictions induced by the ﬁxed ele-
ments of the ﬁrst three layers and creates huge potential in
generating diverse scenarios.
Conclusion. In this paper, we propose an automatic feature-
based HD map generation framework FEAT2MAP for
simulation-based testing. The framework takes in exist-
ing maps as input, extracts essential features, and applies
combinatorial sampling to generate grid-layout HD maps.
FEAT2MAP also accepts manual feature conﬁgurations to
allow ﬂexible customization. Experiment results show that
the generated HD map is concise and preserves comparable
scenario diversity.

The topological and geometrical features of the roads and
junctions can be far more complex in real life than those
considered here. Our framework can be extended to more
complex features such as ﬁlter lanes in mega junctions,
crosswalks on road lanes, and highway trafﬁc networks. We
leave the exploration of them for future work.

REFERENCES

[1] ISO, “ISO/PAS 21448: Road vehicles – Safety of the intended func-
tionality,” International Organization for Standardization, 2019.
[2] Z. Zhong, Y. Tang, Y. Zhou, V. d. O. Neves, Y. Liu, and B. Ray,
“A survey on scenario-based testing for automated driving systems in
high-ﬁdelity simulation,” arXiv preprint arXiv:2112.00964, 2021.
[3] A. Gambi, M. Mueller, and G. Fraser, “Automatically testing self-
driving cars with search-based procedural content generation,” in
Proceedings of the 28th ACM SIGSOFT International Symposium on
Software Testing and Analysis, 2019, pp. 318–328.

[4] Y. Tang, Y. Zhou, F. Wu, Y. Liu, J. Sun, W. Huang, and G. Wang,
“Route coverage testing for autonomous vehicles via map modeling,”
in 2021 IEEE International Conference on Robotics and Automation
(ICRA).

IEEE, 2021, pp. 11 450–11 456.

[5] Y. Tang, Y. Zhou, Y. Liu, J. Sun, and G. Wang, “Collision avoidance
testing for autonomous driving systems on complete maps,” in 2021
IEEE Intelligent Vehicles Symposium (IV).
IEEE, 2021, pp. 179–185.
[6] Y. Tang, Y. Zhou, T. Zhang, F. Wu, Y. Liu, and G. Wang, “Sys-
tematic testing of autonomous driving systems using map topology-
based scenario classiﬁcation,” in 2021 36th IEEE/ACM International
Conference on Automated Software Engineering (ASE).
IEEE, 2021,
pp. 1342–1346.

[7] TomTom, “HD Map,” https://www.tomtom.com/products/hd-map/,

2022, online; accessed Feb 2022.

[8] HERE Technologies, “HERE HD Live Map,” https://www.here.com/

platform/HD-live-map, 2022, online; accessed Feb 2022.

[9] A. Dosovitskiy, G. Ros, F. Codevilla, A. Lopez, and V. Koltun,
“CARLA: An open urban driving simulator,” in Proceedings of the
1st Annual Conference on Robot Learning, 2017, pp. 1–16.

[10] G. Rong, B. H. Shin, H. Tabatabaee, Q. Lu, S. Lemke, M. Moˇzeiko,
E. Boise, G. Uhm, M. Gerow, S. Mehta, E. Agafonov, T. H. Kim,
E. Sterner, K. Ushiroda, M. Reyes, D. Zelenkovsky, and S. Kim, “SVL
Simulator: A High Fidelity Simulator for Autonomous Driving,” arXiv
e-prints, p. arXiv:2005.03778, May 2020.

[11] SUMO, “netedit - sumo documentation,” https://sumo.dlr.de/docs/

[12] CommonRoad,

Netedit/index.html, 2022, online; accessed Feb 2022.
“Commonroad

https:
//commonroad.in.tum.de/scenario-designer, 2022, online; accessed
Feb 2022.

designer,”

scenario

[13] L. Mi, H. Zhao, C. Nash, X. Jin, J. Gao, C. Sun, C. Schmid,
N. Shavit, Y. Chai, and D. Anguelov, “Hdmapgen: A hierarchical
graph generative model of high deﬁnition maps,” in Proceedings of the
IEEE/CVF Conference on Computer Vision and Pattern Recognition,
2021, pp. 4227–4236.

[14] Baidu, “Apolloauto/apollo: An open autonomous driving platform,”
https://github.com/ApolloAuto/apollo, 2022, [Online; accessed 21-
February-2022].
[15] K. Chellapilla,

“Rethinking maps

self-driving,”

https:

for

//medium.com/lyftlevel5/https-medium-com-lyftlevel5-rethinking-
maps-for-self-driving-a147c24758d6, Oct. 2018.

[16] ASAM, “Asam opendrive,” https://www.asam.net/standards/detail/

opendrive/, 2021, online; accessed Feb 2022.

[17] Wikipedia contributors, “B´ezier curve — Wikipedia, the free ency-
clopedia,” https://en.wikipedia.org/w/index.php?title=B%C3%A9zier
curve&oldid=1072458605, 2022,
[Online; accessed 21-February-
2022].

[18] LG Electronics, “San francisco — lgsvl simulator content store,”
https://content.lgsvlsimulator.com/maps/sanfrancisco/, 2020, [Online;
accessed 21-February-2022].
“Shalun — lgsvl

[19] ——,

simulator

content

store,”

2020,

https:
[Online;

//content.lgsvlsimulator.com/maps/gomentum/,
accessed 21-February-2022].
“Shalun — lgsvl

simulator

[20] ——,

//content.lgsvlsimulator.com/maps/shalun/, 2020,
21-February-2022].

content

store,”

https:
[Online; accessed

[21] Baidu,

“Dreamview,”
master/modules/dreamview, 2022,
2022].
[22] ——,

“Dreamview faqs,”

https://github.com/ApolloAuto/apollo/tree/
[Online; accessed 21-February-

https://github.com/ApolloAuto/apollo/

blob/266afbf68d83fa6fac7a812ff8a950223f5ab2c0/docs/FAQs/
Dreamview FAQs.md#how-do-i-turn-on-sim-control, 2020, [Online;
accessed 21-February-2022].

[23] Bazel,

“Command-line-reference,”

command-line-reference#coverage, 2022,
February-2022].

https://bazel.build/reference/
accessed 21-

[Online;

[24] ——, “Bazel,” https://bazel.build/, 2022,

[Online; accessed 21-

February-2022].

[25] Baidu, “[planning] failed to make a driving plan during a junc-
tion turn 14327,” https://github.com/ApolloAuto/apollo/issues/14327,
2022, [Online; accessed 1-March-2022].

[26] ——, “[planning] planning error: failed to shrink routing segment
2022,

https://github.com/ApolloAuto/apollo/issues/14306,

14306,”
[Online; accessed 1-March-2022].

[27] ——, “apollo/planning conﬁg.proto,” https://github.com/ApolloAuto/
apollo/blob/master/modules/planning/proto/planning conﬁg.proto,
2022, [Online; accessed 1-March-2022].

[28] ——, “apollo/scenario manager.cc,” https://github.com/ApolloAuto/

apollo/blob/master/modules/planning/scenarios/scenario manager.cc,
2022, [Online; accessed 1-March-2022].

[29] G. Bagschik, T. Menzel, and M. Maurer, “Ontology based scene
creation for the development of automated vehicles,” in 2018 IEEE
Intelligent Vehicles Symposium (IV).

IEEE, 2018, pp. 1813–1820.

