2
2
0
2

n
u
J

1
2

]
E
S
.
s
c
[

1
v
0
1
1
0
1
.
6
0
2
2
:
v
i
X
r
a

ProML: A Decentralised Platform for
Provenance Management of Machine Learning
Software Systems

Nguyen Khoi Tran1, Bushra Sabir1, M. Ali Babar1, Nini Cui1, Mehran
Abolhasan2, and Justin Lipman2

1 The University of Adelaide, Adelaide, Australia
2 University of Technology Sydney, Sydney, Australia

Abstract. Large-scale Machine Learning (ML) based Software Systems
are increasingly developed by distributed teams situated in diﬀerent trust
domains. Insider threats can launch attacks from any domain to compro-
mise ML assets (models and datasets). Therefore, practitioners require
information about how and by whom ML assets were developed to as-
sess their quality attributes such as security, safety, and fairness. Unfor-
tunately, it is challenging for ML teams to access and reconstruct such
historical information of ML assets (ML provenance) because it is gen-
erally fragmented across distributed ML teams and threatened by the
same adversaries that attack ML assets. This paper proposes ProML,
a decentralised platform that leverages blockchain and smart contracts
to empower distributed ML teams to jointly manage a single source of
truth about circulated ML assets’ provenance without relying on a third
party, which is vulnerable to insider threats and presents a single point of
failure. We propose a novel architectural approach called Artefact-as-a-
State-Machine to leverage blockchain transactions and smart contracts
for managing ML provenance information and introduce a user-driven
provenance capturing mechanism to integrate existing scripts and tools
to ProML without compromising participants’ control over their assets
and toolchains. We evaluate the performance and overheads of ProML
by benchmarking a proof-of-concept system on a global blockchain. Fur-
thermore, we assessed ProML’s security against a threat model of a dis-
tributed ML workﬂow.

Keywords: SE for AI · Provenance · Machine Learning · Blockchain

1

Introduction

Large-scale Machine Learning (ML) based Software Systems are increasingly de-
veloped by distributed interdisciplinary teams [16]. For instance, booking.com,
one of the largest online travel agencies, employs dozens of multi-functional
teams consisting of software developers, user interface designers, ML researchers,
and ML engineers to develop and operate ML models [3]. Due to the emerging

 
 
 
 
 
 
trend of outsourcing and crowdsourcing in ML engineering [3, 16], ML teams
might not even reside in the same organisation. Let us consider the following
running example. A startup A has an ML application idea but lacks the ML
skillset and infrastructure to realise it. Therefore, A outsources data collection
and model development to companies B and C. The company B acts as a dataset
administrator, collecting data from relevant sources (social media, open-source
intelligence, oﬃcial statistics) and labelling the data by crowdsourcing via a
marketplace such as Amazon Mechanical Turk, a common practice in ML engi-
neering [18]). Model development happens at C, where various model developers
carry out workﬂow activities such as preprocessing data, engineering features,
training and testing models. The trained models in the form of binaries or neural
net architecture and weight values are returned to the operators and auditors at
A for testing in a beta product.

Insider threats can compromise ML assets (models and datasets) at many
points in the described ML workﬂow. For instance, annotators in the crowd-
sourcing platform can be bribed to mislabel data samples to enable poisoning
attacks [9]. Some members of the model development team at C might be bribed
to swap the trained model with a poisoned one before delivery. Following prob-
lem reports from A, organisation C might detect the model swapping following
an internal investigation. However, they might not disclose the issue to protect
their reputation, thus harming A. Therefore, all workﬂow participants, especially
the auditors at A, require a complete history of ML assets (ML provenance) that
show how and by whom workﬂow activities were performed in order to evalu-
ate various quality attributes of ML assets, such as security, safety, and fair-
ness. Unfortunately, ML provenance information is generally fragmented across
a distributed ML workﬂow because participants can only record the provenance
related to their activities and store the information in private silos. Moreover,
even if the auditors at A can retrieve and reconstruct a complete history of ML
assets, such information might not be trustworthy as the retrieved provenance
records might also have been compromised by the insider threats that attacked
ML assets.

This paper proposes ProML (Provenance information of Machine Learning),
a decentralised platform that leverages blockchain and smart contracts to man-
age ML provenance in a distributed ML workﬂow. Unlike the existing centralised
provenance management solutions (e.g., [19, 20]), ProML does not require work-
ﬂow participants to appoint a leader or hire a third party to operate it. In-
stead, the platform distributes the right and responsibility to access and man-
age ML provenance information across stakeholders of an ML workﬂow, such as
organisations A, B, and C in the running example. Stakeholders join the plat-
form by running identical software clients called ProML nodes that maintain
a private blockchain and run smart contracts to store and update ML prove-
nance information. On-blockchain records serve as a single source of truth about
the history of the circulated ML assets, addressing the fragmentation of ML
provenance. On-blockchain software programs called smart contracts implement
the necessary computation to process provenance updates submitted by work-

ﬂow participants. Leveraging blockchain and smart contracts brings about var-
ious advantages, including data immutability, non-repudiation, integrity, trans-
parency, and fairness [4, 23–25]. It should be noted that ProML directly in-
volves stakeholders in blockchain operations (via ProML nodes) rather than
outsourcing the responsibilities to a remote blockchain, an approach taken by
many existing blockchain-based provenance systems for ML models [21] and
datasets [2, 5, 6, 11, 12, 15, 17, 22, 26]. The direct participation provides stakehold-
ers with complete control and access to the provenance information, reduces
costly transaction fees and privacy risks associated with remote blockchains.
We propose a novel architectural approach called Artefact-as-a-State-Machine
(ASM) to utilise blockchain transactions and smart contracts for storing and
updating ML provenance information.

Rather than implicitly monitoring and extracting ML provenance from work-
stations or big data processing clusters, we propose a user-driven provenance
capturing process to help participants control what and how ML provenance is
extracted without exposing them to the underlying complexities. In particular,
every ProML node oﬀers services and APIs for submitting provenance updates.
Organisation C can embed services oﬀered by ProML into their existing ML
training scripts or provenance tools such as MLFlow 3 and Sacred 4 to control
the reported information, preventing issues such as Data Use Agreement (DUA)
violations. A ProML node belonging to C is considered trusted within C and
can only be used by C to access and submit ML provenance.

We evaluate ProML’s performance and overheads by deploying and bench-
marking a proof-of-concept system on a global test blockchain network called
Ropsten5 to simulate a globally distributed ML workﬂow. Furthermore, we anal-
ysed the security of ProML against a threat model of a distributed ML workﬂow.
On the Ropsten blockchain network, we found that the framework takes around
16 seconds to capture a provenance update and 2.5 minutes to ﬁnalise it with
high conﬁdence. These ﬁgures are negligible to the overall timeframe of a dis-
tributed ML workﬂow, which generally takes at least seven months to bring
ML model ideas to production [7] and at least eight days to deploy a trained
model [1]. Overhead-wise, according to the conversion rate obtained in April
2022, we found that registering a new asset with ProML costs around USD
$160 and submitting a provenance record costs around USD $47. It should be
noted that these monetary costs do not apply to private blockchains that ProML
targets because participants in a private blockchain can generate an arbitrary
amount of cryptocurrency to fund their provenance submission.

The major contributions of this paper include:

– Conceptualisation and architecture of a decentralised platform based on
blockchain and smart contracts for secure management of ML provenance in
a distributed ML workﬂow.

3 (mlﬂow.org)
4 (Github/IDSIA)
5 https://ropsten.etherscan.io

– A novel architectural approach for leveraging blockchain transactions and
smart contracts to securely store and update ML provenance information in
a distributed ML workﬂow.

– A user-driven approach to capture ML provenance information that pre-
serves users’ control, eases the integration with users’ existing scripts and
toolchains and abstracts the complexity of blockchain interaction.

2 Preliminary

A blockchain is a shared-write database and a secure distributed computer oper-
ated by mutually distrusting parties [4]. Formally, it is a transaction-based state
machine (Eq. 1) replicated across blockchain participants [23, 24].

σt+1 ≡ Υ (σt, T )

(1)

State transitions are initialised and controlled by transactions T , which are
instructions coming from blockchain accounts. These instructions convey di-
verse messages, from moving fund between accounts to invoking user-deﬁned
software programs, also known as smart contracts. Transactions are digitally
signed by senders to prevent forgery and tamper as they are distributed amongst
blockchain participants. The signatures also prevent senders from falsely denying
their transactions.

Blockchain participants calculate the new state σt+1 independently using the
deterministic state transition function Υ . Using a fault-tolerant consensus pro-
tocol such as Proof-of-Work (PoW), Proof-of-Authority (PoA), Proof-of-Stake
(PoS), and Practical Byzantine Fault Tolerance (pBFT), participants reach an
agreement on σt+1. The transaction leading to the accepted σt+1 is added to
an ordered transaction list called a ledger. All participants hold a copy of the
ledger, which represents the canonical history of a blockchain. The ledger is usu-
ally stored in a secure data structure called blockchain, which uses cryptographic
hashes to prevent and detect tampering of content and order of transactions.

Some blockchain protocols such as Ethereum allows users to embed arbitrary
software programs called smart contracts to Υ . Smart contracts are generally as
stateful objects that has their own blockchain address, internal variables, and
functions to act upon those variables.

3 ProML Platform

Every deployment of the ProML platform consists of multiple identical software
clients called ProML nodes, deployed and operated independently by workﬂow
participants. The admission, authorisation, and governance of participants are
beyond the scope of our paper. We assume that such decisions are in place before
ProML is deployed. Figure 1 depicts a ProML deployment for ﬁve participants.
Components within a ProML node are structured into three layers. The
client layer contains software clients implementing blockchain and other dis-
tributed protocols used by ProML. This layer also contains a blockchain wallet

Fig. 1. ProML Platform for a distributed ML workﬂow with ﬁve participants

that holds a participant’s private keys to sign blockchain transactions on their
behalf. Upon deployment, clients from diﬀerent ProML nodes connect to form
a blockchain and other decentralised infrastructure used by ProML, such as a
private content distribution network based on the Interplanetary File System
(IPFS6). ProML deploys smart contracts on the deployed blockchain to capture
and update ML provenance information. Section 3.2 presents our proposed ar-
chitectural approach called Artefact-as-a-State-Machine (ASM) for engineering
these contracts.

The provider layer contains service wrappers that abstract the technical com-
plexities and provide a consistent Application Programming Interface (API) to
the clients. For instance, the blockchain provider can oﬀer a consistent API
with high-level services such as “send a transaction” and transform the function
calls into proper messages expected by an underlying blockchain client. Storage
provider and signer perform similar tasks for storage clients (e.g., IFPS) and
wallets.

The service layer contains high-level services for accessing and updating ML
provenance. Participants can invoke these services ad-hoc via the provided soft-
ware clients or programmatically using a software library. Section 3.1 presents
our proposed user-driven approach the leverages these components for capturing
ML provenance.

3.1 User-Driven Provenance Capture

The provenance capturing process is a collaboration between participants and
their trusted ProML nodes. Participants initiate the process and supply the
necessary provenance records (pmi or P rovDSi). ProML nodes ﬁnish the process
by crafting and and submitting the corresponding blockchain transactions (txpmi
or txP rovDSi

) on behalf of the participants with their blockchain credentials.

6 https://ipfs.io

AuditorProMLNodeModel VerifierProMLNodeModel DeveloperProMLNodeModel OperatorProMLNodeDataset AdminProMLNodeProvenance Update BroadcastsBlockchainDataset ProvenanceProvenance Update  ProcessModel ProvenanceContent Distribution NetworkDatasetModelProMLNodeProviderClientsServiceProvenance CapturingBlockchain ClientIPFS ClientBlockchain WalletStorage ProviderSignerBlockchain ProviderUser InterfaceCLI ClientCapturing LibraryQuery InterfaceProvenance QueryingFigure 2 depicts the process for capturing and submitting ML provenance
from a training script. Participants can submit pmi or P rovDSi to ProML in an
ad-hoc manner via a commandline interface (CLI) client, programmatically via
a software library, or directly by invoking the provenance capturing service of of
their trusted ProML node. This procedure has the following advantages:

– Transparency and control: ML development activities can utilise and pro-
duce sensitive data, which must conform to predeﬁned Data Use Agreements
(DUAs). Therefore, users require visibility and control over the information
captured and propagated by the provenance management system so that
they can verify and therefore trust the system. The user-driven procedure of
ProML meets this ends.

– Ease of Integration: By oﬀering software libraries and service interfaces,
ProML allows users to integrate the provenance capturing mechanism into
their toolchains in a way that is suited to their operating situation and setup.
– Simplicity: Having ProML nodes handle the complexities of interacting with

blockchain helps to simplify the usage and avoid security mistakes.

The following section presents how diﬀerent components in a ProML node

work to capture some prominent life cycle events of ML assets.

Fig. 2. User-Driven Provenance Capturing Mechanism

Registering a model or dataset: Asset registration creates an on-blockchain
representative of an ML asset and begins its life cycle with ProML. When regis-
tering a dataset, ProML also requires the dataset’s metadata, address, and the
identiﬁer of its ancestor if available. The provenance capturing service uses the
provided information (pmi or P rovDSi) to construct blockchain transactions for
deploying smart contracts that represent the given models or datasets. It uses
the signer service, which holds participants’ private keys, to sign the constructed

Exemplary provenance capturing functionsModel DeveloperCall Logging APIML Training Script / NotebookBlockchainDataset ProvenanceProvenance Update  ProcessModel ProvenanceContent Distribution NetworkDatasetModelProviderClientsServiceProvenance CapturingBlockchain ClientIPFS ClientBlockchain WalletStorage ProviderSignerBlockchain Provider1. Develop2. Embed3. Send 𝑝𝑚#3. Submit payload4. Return CID5. Craft tx&’(6. Sign tx&’(7. Submit tx&’(8. Validate and Insert tx&’(FunctionParametersselectData()datasetID, datasetVersion, datasetMetadata: columnInfo, labelInfopreprocessData()processedDataset, datasetMetadata: columnInfo, labelInfoengineerFeatures()featureList, featureSelectAlg: algConfigstrain()classifierInfo: type, library, version, hyperparametersmodelevaluate()trainingSetRatio, F1, acc, trainingDurationvalidate()F1, acc, recall, precision, Matthew, MSE, Fowlkesdeploy()model, deploymentInfotransactions with participants’ credentials. Following the signing, the provenance
capturing service invokes the provider service, which wraps around a blockchain
client, to publish the transactions. The registration completes when the trans-
actions have been added to the ledger, making the smart contracts available on
the blockchain. ProML returns the addresses of the deployed contracts as as-
set identiﬁers. Details of the involved smart contracts would be elaborated in
Section 3.2.
Recording model’s life cycle events: ProML provides model developers with
a software library containing functions that triggers the reporting of diﬀerent
actions performed on a model (selecting and preprocessing data, engineering
features, training, evaluating, validating, and deploying model). The parameters
passed to these functions are payload that describe inputs in, outputs out, and
parameters param of actions. The number and types of functions making up the
library closely relate to the on-blockchain representatives of ML models and re-
ﬂect an agreed ML workﬂow amongst participants. By controlling whether to call
these functions and what to provide, participants control the provenance infor-
mation leaving their trust domain. Figure 2 presents the process and exemplary
provenance capturing functions.

When the embedded functions are executed, they submit provenance records
pmi to a trusted ProML node, whose provenance capturing service constructs
transactions txpmi that address the smart contract representing the ML models
being recorded, and submits the transactions with the help of the signer and
provider services.
Publishing a model or dataset: The provenance records of a model or a
dataset publication contain large payloads such as CSV ﬁles, databases, ex-
ecutable binaries, or neural network architectures and weight values. Storing
such payloads on-chain is discouraged to prevent scalability issues of the dis-
tributed ledger. ProML leverages the oﬀ-chain data storage design pattern [25]
to secure the payloads associated with provenance records without keeping those
payloads on the blockchain. Speciﬁcally, the provenance capturing service can of-
ﬂoad the payloads to a distributed content-addressable storage, such as a private
IPFS cluster, and keep the pointers to those payloads in the on-chain provenance
records. The storage provider service is responsible for managing and interacting
with oﬀ-chain storage such as IPFS.

3.2 Artefact-as-a-State-Machine

Mapping information and processes onto blockchain constructs is a prerequisite
for storing and managing them on a blockchain. We propose an architectural
approach to guide this mapping based on the following observations:

1. Every ML asset has a set of states according to its workﬂow. For
example, an ML model reaches the “trained” state after being ﬁtted to a
dataset by a training algorithm.

2. Actions performed on an ML asset can trigger a state transition.
For instance, the training activity pushes an ML model from a previous stage
(engineered features) to the next stage (trained).

3. ML provenance is the record of a state transition and the respon-
sible party. In other words, it describes the input, output, parameters of a
conducted activity and the identiﬁer of the participant (Pid) carrying it out.
It should be noted that provenance records are valid and valuable even if the
reported activities failed to update the state of an asset. These records show
that a participant has conducted a wrong action on it at a certain time.

Fig. 3. Exemplary smart contract implementation of ASM

The above observations suggest that ML assets can be modelled as state
machines from a provenance perspective. Mapping this state machine represen-
tation of ML assets to blockchain constructs is straightforward, as blockchain by
design is a replicated state machine (Section 2). ML models and datasets map to
smart contract instances because they are individually addressable blockchain
objects that carry internal variables and functions to act upon those variables.
The address of a smart contract becomes an asset’s identiﬁer. Internal variables
of a smart contract can be used to store an asset’s state and metadata. Func-
tions of a smart contract represent workﬂow activities that update an asset’s

Contract RegistryEventVerification TreeML ProvenanceBlockchain ConstructML Asset (Model or Dataset)Smart ContractAsset StatesContract’s variablesAsset metadataEnumfor possible statesEnumvariable for current stateWorkflow ActivitiesContract’s functionsActivity DescriptionFunction’s parametersProvenance recordBlockchain transaction that invokes contract functionsAsset’s provenanceThe collection of all blockchain transactions sent to the asset’s contractParticipant IDAddress of blockchain accountML Asset (Model & Dataset)Asset MetadataAsset StateWorkflow ActivitiesActivity DescriptionContract Factorystate. Function parameters can be used to capture the payload of a provenance
record corresponding to a workﬂow activity. Participants record a provenance
update pmi by submitting a blockchain transaction to the smart contract to
invoke a function corresponding to the reported workﬂow activity. These trans-
actions serve as provenance records. We call this approach of modelling ML
assets as state machines to map them to blockchain constructs for manage-
ment as Artefact-as-a-State-Machine, or ASM. Figure 3 depicts an exemplary
implementation of ASM with smart contracts written in Solidity programming
language7.
Implementation challenges and Solutions: Implementing ASM introduce
three challenges listed below. We address these challenges by leveraging the
existing design patterns for blockchain-based application [25]. A utility smart
contract named ProML was introduced to implement these patterns.

– Providing a lightweight communication mechanism to notify participants of
on-blockchain events such as model publication. We leverage the embed-
ded event functionality of many blockchain platform to emit events to oﬀ-
blockchain software via the log portion of a ledger. Events are deﬁned and
emitted by the utility contract ProML.

– Creating and deploying smart contract instances from predeﬁned templates.
We apply the factory contract design pattern by introducing factory func-
tions in the ProML contract, which creates and deploys contract instances
based on the templates held by ProML.

– Maintaining pointers to the registered models and datasets. We apply the
contract registry pattern by adding into ProML arrays of addresses pointing to
asset contracts as well as mappings between participants and the registered
assets for looking up.

4 Performance and Cost Evaluation

This section presents an evaluation of ProML’s performance and operating costs,
which impact the platform’s feasibility in real-world scenarios. We consider per-
formance as how fast ProML processes and appends provenance updates. The
cost aspect indicates the necessary resources for workﬂow participants to submit
ML provenance updates.

4.1 Experimental Design

We evaluated the performance and operating cost of ProML by benchmark-
ing a proof-of-concept (PoC) implementation. The PoC leverages the Solidity
programming language8 to implement smart contracts according to the ASM
approach. These smart contracts are compatible with many public and private
blockchains that use Ethereum Virtual Machine (EVM) as the smart contract

7 https://soliditylang.org
8 https://soliditylang.org

Fig. 4. Latency and overheads of the evaluated operations

execution engine. The PoC’s smart contracts were deployed on Ropsten, a global
Ethereum blockchain network preserved for testing9. We chose this blockchain
network due to its scale and similarity in conﬁgurations and performance charac-
teristics with the Ethereum main network, which operates most high-proﬁle and
high-value blockchain-based software applications. We used Ethers10 for imple-
menting the blockchain provider and signer services and Node for the provenance
capturing and querying services.

Procedure and Data: The experimental workload consisted of ten opera-
tions that register and update a dataset and a model (Figure 4a). We triggered
these operations sequentially with ten-second delays and tracked the submitted
blockchain transactions to determine their latency and operating cost. This pro-
cess was replicated ten times. We generated ML provenance for the experiment
by training an intrusion detection classiﬁer on the KDD-99 dataset11 and utilis-
ing the provenance capturing procedure described in Section 3.1 to capture the
data.

Evaluation Metrics: We measured the performance in terms of latency, the
amount of time between the submission of a provenance update (txP rovDSi
or
txpmi) and its inclusion in a blockchain. Every subsequent block represents an
additional conﬁrmation of the update, which strengthens its trustworthiness. We
formalise a transaction’s latency at the conﬁrmation level x as L@x := t0 − tx,
where t0 is the submission time, and tx is the time at which a transaction block
representing the conﬁrmation x appears in the blockchain.

We measured the operating cost in terms of gas, a unit that measures the
computational eﬀort required to process and store a transaction on an Ethereum
blockchain, on which we deployed the proof-of-concept system. Transactions with
higher gas values requires more computation and storage space on a blockchain
than transactions with lower gas value. The Ethereum Yellow Paper [24] formally
deﬁnes gas and a fee schedule.

9 https://ropsten.etherscan.io
10 https://docs.ethers.io/v5/
11 http://kdd.ics.uci.edu/databases/kddcup99/kddcup99.html

IDOperationD1Register a datasetD2Update a datasetML1Register an ML modelML2-1Update model's provenance: selecting a datasetML2-2Update model's provenance: preprocessinga datasetML2-3Update model's provenance: feature engineeringML2-4Update model's provenance: training the modelML2-5Update model's provenance: evaluating a modelML2-6Update model's provenance: validating a modelML2-7Update model's provenance: deploying a modela. EvaluatedOperationsb. Latency (seconds)c. Overheads (Ethereum gas units)4.2 Results

Latencies: Figure 4b presents the average latencies of various operations of
ProML at one, six, and twelve conﬁrmations. The framework takes around 16
seconds to record a provenance update to the Ropsten network (L@1). However,
achieving conﬁdence that a provenance update has been ﬁnalised requires around
2.5 minutes (L@12).

The existing studies have shown that most companies take at least seven
months to bring ML model ideas to production [7] and at least eight days to
deploy a trained model [1]. Moreover, ML workﬂow activities generally do not
need to wait for the provenance record of a previous step. Therefore, we argue
that the provenance recording latency is negligible and would not impact the
overall latency of the workﬂow.
Operating Cost: Figure 4c compares the operating cost of the evaluation oper-
ations. The registration steps (D1, D2, and ML1) are the most costly operations
because they involve creating and deploying additional smart contracts on the
blockchain. Updating the provenance of an ML model (ML2-1 to ML2-7) incurs
a lower cost, averaging at 280000 gas units.

To put these ﬁgures in context, we convert them to the dollar value using
the conversion rate obtained in April 2022 from the public Ethereum network
(USD $0.000163542 per gas unit12). According to the conversion rate, registering
a new asset with ProML costs around USD $160 and submitting a provenance
record costs around USD $47. It should be noted that these monetary costs
do not apply to private blockchain networks where ProML aims to operate,
because participants in a private blockchain can generate an arbitrary amount
of cryptocurrency to fund their provenance submission.

5 Security Evaluation

This section evaluates the security of ProML. First, we deﬁne a threat model of a
distributed ML workﬂow where ProML operates. Then, we present the security
countermeasures provided by ProML and discuss their eﬀectiness against the
identiﬁed threats.

5.1 Threat Model

ProML considers an adversary who aims to corrupt the provenance and veriﬁca-
tion of ML artefacts to cover up their tampering with a model [10] or a dataset
(e.g., poisoning attack [2]). We assume that ML workﬂow participants are not
anonymous and possibly bound by legal contracts. We assume that the involved
networks and infrastructures are protected by cloud service vendors or enterprise
security mechanisms and thus safe from traditional threats, allowing us to focus
on insider threats: authorised employees who have gone rogue or compromised
by external attackers.

12 https://etherscan.io/gastracker

Table 1 presents the threat model of ProML. Tampering threats denote
unauthorised modiﬁcation or destruction of artefacts and provenance informa-
tion. Spooﬁng threats denote the forgery of provenance updates and veriﬁcation
results. Repudiation denotes that a participant falsely denies their previously
provenance records to avoid responsibility. Finally, DoS threats denote attacks
that corrupt datasets, models, and provenance information or disrupt the infras-
tructure necessary to access them.

Table 1. Threat Model of ProML

Threat

Target

T1 Tampering At-rest data: Datasets, Models, Provenance Records
T2 Tampering In-transit data: Datasets, Models, Provenance Records
T3 Spooﬁng
Provenance records, veriﬁcation results
T4 Repudiation Provenance records
T5 DoS
T6 DoS
T7 DoS

Data stores for datasets, models, provenance records
Provenance capturing process
Provenance retrieval process

Secury Countermeasures of ProML ProML provides the following security
countermeasures by leveraging blockchain, smart contracts, and a decentralised
architecture.

– Storing provenance records on a blockchain: Blockchain data has
tamper-resistance and high-availability by design [23, 25]. By storing prove-
nance records on a blockchain, we protect them against unauthorised mod-
iﬁcation and destruction by insider threats. This countermeasure addresses
threat T1, T2, and T5.

– Storing assets on a peer-to-peer content distribution network. The
storage facility of models and datasets presents a single point of failure if it is
the only source of those assets. Therefore, ProML nodes form a private, peer-
to-peer content network based on the IPFS protocol to oﬀer participants an
alternative resilient storage solution. This countermeasure addresses threat
T5 and T7.

– Anchoring oﬀ-blockchain artefacts to on-blockchain records using
content identiﬁers. ProML embeds a cryptographic representation (hash)
of the registered models and datasets, allowing users to verify the integrity
of any incoming asset. This countermeasure addresses threat T1 and T2.
– Embedding the provenance recording process in smart contracts.
ProML implements the logic related to the registration and update of assets
in smart contracts to prevent an adversary from tampering with or disrupting
these processes. This countermeasure addresses threat T6.

– Embedding provenance updates in blockchain transactions. This
countermeasure leverages digital signatures and the inclusion of transac-
tions into a transaction block to mitigate the spooﬁng and repudiation of
provenance updates. This countermeasure addresses threat T3 and T4.

6 Discussions

6.1 Usage Scenarios

Auditing ML Assets: The complete and trustworthy provenance information
provided by ProML can help auditors detect issues of incoming ML assets more
eﬀectively. For instance, auditors at the organisation A in the running example
can calculate and compare the cryptographic hash of the received ML model
against the one reported by the developers at C to detect the model swapping
attack by an insider threat at C. By inspecting the training and testing datasets
reported by B and C via ProML, auditors at A can detect fairness risks of the
received model early. Even if an organisation omits provenance updates from
ProML, the omission itself can serve as an indicator of compromise.

Track and trace vulnerabilities and compromises: Having a complete
and trustworthy history helps auditors trace compromised assets to their root
causes. For instance, if A determines that the model from C does not match
the one reported by the developers at C, then both A and C can trace the
compromised model to the employee who carries out the model delivery. After
detecting the root cause (i.e., employee-turn-rogue), C can use ProML to track
all activities that involve this employee to identify all potential compromises for
damage control.

6.2 Where ProML performs unsatisfactorily

Case 1: Network fails to reach a threshold size. The security of a de-
centralised system like ProML depends on the number of participants. Whilst
existing surveys have suggested the existence of large-scale ML workﬂows, some
ML workﬂows might not clear the threshold number of participants. In the fu-
ture, we plan to explore mechanisms to combine ProML networks to pool their
resources for processing blockchain transactions whilst maintaining the conﬁden-
tiality of the constituting ProML networks.

Case 2: Participants deliberately submit misinformation. Blockchain
and smart contracts cannot detect misleading information or omission in the
provenance information submitted by participants. However, they maintain trust-
worthy records of the submitted information that allow other participants to
audit and detect misbehaviours. Future research could investigate blockchain-
based peer-review protocols to leverage participants’ expertise in auditing ML
assets and their provenance.

6.3 Threat to Validity

The generalizability of the benchmark results is a validity threat to our evalua-
tion. We mitigated this by choosing Ropsten, the most realistic representation
of the Ethereum main net13 which is one of the most prominent blockchains.

13 https://ethereum.org/en/developers/docs/networks/#ropsten

Moreover, the performance of ProML would be higher in practice as organisa-
tions are likely to adopt consortium blockchains such as Hyperledger Fabric,
which exchange openness and anonymity for orders of magnitude performance
gain. Therefore, we believe that our benchmark results are helpful because they
represent a worst-case scenario.

7 Related Work

This paper aligns with the research on the secure management of the provenance
of ML models and datasets. Earlier works on data provenance focused on logging
the utilisation of computer ﬁles for future privacy compliance audits [17, 22] or
mitigating poisoning attacks on ML models via datasets [2, 21]. Gebru et al. [8]
were the ﬁrst to present a standardized process via question answering to docu-
ment datasets used in ML projects. Sutton et al. [22] were among the ﬁrsts to
leverage the Bitcoin blockchain as a security countermeasure to protect the log
itself. Since then, blockchain has been and is still commonly used as an alter-
native secure storage solution for log data (e.g., [12, 26]). Recent research has
extended blockchain’s role by leveraging its programmability via smart contracts
to extend its role. For instance, ProvHL [6], [5] and [11] employed blockchain as
an authoriser and logger for the data stored on an open-source data manage-
ment system or an IPFS content network. Moller et al. [15] was among the ﬁrst
that captured workﬂow steps rather than access logs of electronic data on the
blockchain as provenance information.

The provenance of ML models has been relatively less explored. Earlier
works on model provenance (e.g., [19]) focused on the automated extraction
of metadata and provenance of ML experiments, such as details of their training
runs, statistics of datasets, evaluation results, and models’ metadata. Mitchell
et al. [14] proposed a standardized document called model cards to accompanied
trained models, presenting their performance characteristics and other metadata.
Souza et al. [20] were among the ﬁrst to advocate for describing the capturing
the workﬂow provenance of ML models to address the increasingly complicated
and heterogeneous nature of ML workﬂows. Recent years have witnessed in-
creased utilisation of blockchain as a security mechanism for the provenance
of ML models. For instance, Lo et al. [13] employed smart contracts to store
the encrypted hashes of datasets and models appearing in federated learning
systems. ProML does more than storing the hashes of models or datasets emerg-
ing from an ML workﬂow. Inspired by [20] and [15], ProML also captures de-
tails regarding how workﬂow activities are performed on ML assets, empowering
deeper auditing well as track and trace of compromises. We codiﬁed a structured
way to capture workﬂow-centric provenance information on a blockchain with
the proposed ASM approach. Moreover, instead of shifting the responsibility
for managing provenance from a cloud service to a remote blockchain network,
ProML fully embraces decentralisation, allowing relevant participants to secure
the provenance information themselves and maintain complete control over how
and what information they share.

8 Conclusion

Large-scale Machine Learning based Software Systems are increasingly developed
by distributed ML workﬂows, where provenance information is paramount to se-
cure and verify the circulated models and datasets. This paper proposes a decen-
tralised platform named ProML that leverages blockchain and smart contracts
for disseminating, storing, and updating ML provenance securely. ProML pro-
poses a novel architectural approach called Artefact-as-a-State-Machine (ASM)
to store and manage ML provenance on a blockchain. Via benchmarks con-
ducted on a global test blockchain network, we showed that ProML’s latencies
are negligible compared to the average timeframe of ML workﬂows. Via a secu-
rity analysis, we also showed that ProML is secure against tampering, spooﬁng,
repudiation, and denial of service threats in a distributed ML workﬂow envi-
ronment. Thus, we believe that ProML could be a foundation for developing
decentralised software systems that help secure the increasingly remote and dis-
tributed engineering process of ML and software systems.

References

1. Algorithmia: 2020 State of Enterprise Machine Learning (2020)
2. Baracaldo, N., Chen, B., Ludwig, H., Safavi, J.A.: Mitigating poisoning atacks
on machine learning models: A data provenance based approach. AISec 2017 -
Proceedings of the 10th ACM Workshop on Artiﬁcial Intelligence and Security,
co-located with CCS 2017 pp. 103–110 (2017)

3. Bernardi, L., Mavridis, T., Estevez, P.: 150 successful machine learning models: 6
lessons learned at Booking.com. Proceedings of the ACM SIGKDD International
Conference on Knowledge Discovery and Data Mining pp. 1743–1751 (2019)

4. Cachin, C., Vukoli´c, M.: Blockchain consensus protocols in the wild. arXiv preprint

arXiv:1707.01873 (2017)

5. Dang, T.K., Anh, T.D.: A Pragmatic Blockchain Based Solution for Managing
Provenance and Characteristics in the Open Data Context, vol. 12466 LNCS.
Springer International Publishing (2020)

6. Demichev, A., Kryukov, A., Prikhodko, N.: The Approach to Managing Provenance
Metadata and Data Access Rights in Distributed Storage Using the Hyperledger
Blockchain Platform. Proceedings - 2018 Ivannikov Isp Ras Open Conference, IS-
PRAS 2018 pp. 131–136 (2018). https://doi.org/10.1109/ISPRAS.2018.00028
7. Dotscience: The State of Development and Operations of AI Applications.

dotscience Survey (2019)

8. Gebru, T., Morgenstern, J., Vecchione, B., Vaughan, J.W., Wallach, H., Iii, H.D.,
Crawford, K.: Datasheets for datasets. Communications of the ACM 64(12), 86–92
(2021)

9. He, Y., Meng, G., Chen, K., Hu, X., He, J.: Towards Security Threats of Deep
Learning Systems: A Survey. IEEE Transactions on Software Engineering (2020)
10. Jentzsch, S.F., Hochgeschwender, N.: Don’t forget your roots! using provenance
data for transparent and explainable development of machine learning models. Pro-
ceedings - 2019 34th IEEE/ACM International Conference on Automated Software
Engineering Workshops, ASEW 2019 pp. 37–40 (2019)

11. Khatal, S., Rane, J., Patel, D., Patel, P., Busnel, Y.: FileShare: A Blockchain and
IPFS Framework for Secure File Sharing and Data Provenance pp. 825–833 (2021)
12. Kumar, M., Singh, A.K., Suresh Kumar, T.V.: Secure Log Storage Using
Blockchain and Cloud Infrastructure. 2018 9th International Conference on Com-
puting, Communication and Networking Technologies, ICCCNT 2018 pp. 10–13
(2018)

13. Lo, S.K., Liu, Y., Lu, Q., Wang, C., Xu, X., Paik, H.Y., Zhu, L.: Towards trust-
worthy ai: Blockchain-based architecture design for accountability and fairness of
federated learning systems. IEEE Internet of Things Journal (2022)

14. Mitchell, M., Wu, S., Zaldivar, A., Barnes, P., Vasserman, L., Hutchinson, B.,
Spitzer, E., Raji, I.D., Gebru, T.: Model cards for model reporting. In: Proceedings
of the conference on fairness, accountability, and transparency. pp. 220–229 (2019)
15. M¨oller, J., Fr¨oschle, S., Hahn, A.: Permissioned Blockchain for Data Provenance in
Scientiﬁc Data Management. Data management and data ecosystems Permissioned
Blockchain for Data Provenance in Scientiﬁc Data p. 18 (2021)

16. Nahar, N., Zhou, S., Lewis, G., K¨astner, C.: Collaboration Challenges in Building
ML-Enabled Systems: Communication, Documentation, Engineering, and Process.
Organization 1(2), 3 (2022)

17. Neisse, R., Steri, G., Nai-Fovino, I.: A blockchain-based approach for data account-
ability & provenance tracking. ACM International Conference Proceeding Series
(2017)

18. Paolacci, G., Chandler, J., Ipeirotis, P.G.: Running experiments on amazon me-

chanical turk. Judgment and Decision making 5(5), 411–419 (2010)

19. Schelter, S., B¨ose, J.H., Kirschnick, J., Klein, T., Seufert, S.: Automatically Track-
ing Metadata and Provenance of Machine Learning Experiments. Machine Learn-
ing Systems Workshop at NIPS pp. 1–8 (2017)

20. Souza, R., Azevedo, L.G., Louren¸co, V., Soares, E., Thiago, R., Brand˜ao, R., Civ-
itarese, D., Brazil, E.V., Moreno, M., Valduriez, P., Mattoso, M., Cerqueira, R.,
Netto, M.A.S.: Workﬂow Provenance in the Lifecycle of Scientiﬁc Machine Learn-
ing pp. 1–21 (2020)

21. Stokes, J.W., England, P., Kane, K.: Preventing Machine Learning Poisoning At-

tacks Using Authentication and Provenance (2021)

22. Sutton, A., Samavi, R.: Blockchain enabled privacy audit logs. Lecture Notes in
Computer Science (including subseries Lecture Notes in Artiﬁcial Intelligence and
Lecture Notes in Bioinformatics) 10587 LNCS, 645–660 (2017)

23. Tran, N.K., Ali Babar, M.: Anatomy, concept, and design space of blockchain
networks. In: Proceedings - IEEE 17th International Conference on Software Ar-
chitecture, ICSA 2020 (2020)

24. Wood, G.: Ethereum: A Secure Decentralized Generalized Transaction Ledger.

Ethereum Yellow Paper (2014)

25. Xu, X., Pautasso, C., Zhu, L., Lu, Q., Weber, I.: A Pattern Collection for

Blockchain-based Applications (2018)

26. Zhang, Y., Lin, X., Xu, C.: Blockchain-based secure data provenance for cloud

storage, vol. 11149 LNCS. Springer International Publishing (2018)

