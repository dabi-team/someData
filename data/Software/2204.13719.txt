MQT Bench: Benchmarking Software and
Design Automation Tools for Quantum Computing

Robert Wille∗‡
Lukas Burgholzer†
Nils Quetschlich∗
∗Chair for Design Automation, Technical University of Munich, Germany
†Institute for Integrated Circuits, Johannes Kepler University Linz, Austria
‡Software Competence Center Hagenberg GmbH (SCCH), Austria

nils.quetschlich@tum.de

lukas.burgholzer@jku.at

robert.wille@tum.de

https://www.cda.cit.tum.de/research/quantum

2
2
0
2

p
e
S
3

]
h
p
-
t
n
a
u
q
[

2
v
9
1
7
3
1
.
4
0
2
2
:
v
i
X
r
a

Abstract—Quantum software tools for a wide variety of design
tasks on and across different levels of abstraction are crucial in
order to eventually realize useful quantum applications. This
requires practical and relevant benchmarks for new software
tools to be empirically evaluated and compared to the current
state of the art. While benchmarks for speciﬁc design tasks are
commonly available, the demand for an overarching cross-level
benchmark suite is not fully met yet and there is no mutual
consolidation in how quantum software tools are evaluated thus
far. In this work, we propose the MQT Bench benchmark suite
(as part of the Munich Quantum Toolkit (MQT)) based on
four core traits: (1) cross-level support for different abstrac-
tion levels, (2) accessibility via an easy to use web interface
(https://www.cda.cit.tum.de/mqtbench) and a Python package,
(3) provision of a broad selection of benchmarks to facilitate
generalizability, as well as (4) extendability to future algorithms,
gate-sets, and hardware architectures. By comprising more than
50,000 benchmark circuits ranging from 2 up to 130 qubits
on four abstraction levels, MQT Bench presents a ﬁrst step
towards benchmarking different abstraction levels with a single
benchmark suite to increase comparability, reproducibility, and
transparency.

Index Terms—quantum computing, benchmarking, design au-

tomation

I. INTRODUCTION

Quantum computing has gained a lot of attention due to
its promising applications and the advances in quantum com-
puting hardware. But currently, designing quantum algorithms
often means to manually implement quantum circuits on the
gate-level—similar to assembly language in classical comput-
ing. Hence, there is an urgent need to enhance the workﬂow of
designing and testing quantum algorithms. Without software
tools aiding the design of quantum algorithms, the underlying
hardware may not be efﬁciently utilized. Thus, researchers
and developers have already proposed tools for various design
tasks, such as quantum circuit simulation [1], [2], compi-
lation [3]–[5], or veriﬁcation [6]–[10]. This already led to
comprehensive quantum circuit design ﬂows realized through
toolkits such as IBM’s Qiskit [11], Google’s Cirq [12], or
Rigetti’s Forest [13]—in addition to numerous tools and
methods developed by other researchers and engineers in the
ﬁeld.

Generally, these software tools operate on and across dif-
ferent levels of abstraction and all tackle computationally hard
problems. As a result,
they have to compromise between
resource demands and result quality. Usually, when a new soft-
ware tool is proposed, its performance is empirically evaluated.
The question how to evaluate the performance of a software
tool is very challenging and not yet fully answered—especially
for tools solving NP-complete problems. The most common
approach is to run certain problem instances, so-called bench-
marks, and compare the performance of the newly proposed
method against state-of-the-art methods regarding a certain
characteristic, e.g., run-time or solution quality.

Currently, this benchmarking is conducted using a wide
variety of different benchmark suites—each with a speciﬁc
focus. While some benchmarks suites, e.g., [14], provide
application-oriented benchmarks on a higher abstraction level,
other benchmark suites focus on lower abstraction levels, e.g.,
[15]–[17]. Although the intended target levels are properly
covered, the demand for a cross-level benchmark suite is not
fully met yet. As another consequence, there is no mutual
consolidation which benchmarks to use for empirical evalua-
tions yet—leading to lower comparability, reproducibility, and
transparency.

In this paper, we propose MQT Bench—another benchmark
suite (as discussed above not the ﬁrst one and most likely not
the last one) which explicitly aims to address those drawbacks.
It aims at providing a ﬁrst step towards benchmarking the
whole quantum software stack with a single benchmark suite
by offering the same benchmark algorithms on different levels
of abstractions. To realize such a benchmark suite, several
challenges have to be tackled:

• Distinct requirements on different

levels: Benchmarks
have to fulﬁll certain requirements depending on the
abstraction level, e.g., only gates of a device’s native
gate-set are allowed.

• Accessibility: To foster adoption of the benchmark suite,

it needs to be as easy to use as possible.

• Generalizability: Providing a comprehensive set of bench-
mark algorithms to cover as many use cases as possible.
• Extendability: Future algorithms, gate-sets, and architec-

tures should be easy to integrate.

 
 
 
 
 
 
MQT Bench has been developed with these challenges in mind
and is based on four core traits:

1) Cross-level benchmarking: Provision of benchmarks on

four abstraction levels.

2) Accessibility: To simplify the usage of MQT Bench,
we provide a web interface (https://www.cda.cit.tum.de/
mqtbench) and a Python package in addition to the
open-source repository on GitHub (https://github.com/
cda-tum/MQTBench).

3) Algorithm selection: Broad selection of different al-
gorithms ranging from building blocks, i.e., Quantum
Fourier Transform (QFT), to applications, i.e., ground
state estimation.

4) Extendability: Algorithms, gate-sets, and hardware ar-
chitectures are easily extendable and integrable into
MQT Bench.

By this, MQT Bench aims to improve the comparability,
reproducibility, and transparency of empirical evaluations for
the whole quantum software stack.

The rest of this work is structured as follows: In Section II,
we review the necessary basics of the quantum computing
compilation ﬂow and the respective software stack to keep
this work self-contained. Afterwards, Section III reviews the
state of the art on how this quantum software stack is cur-
rently evaluated and benchmarked—motivating the benchmark
suite proposed in this paper. Based on that, Section IV
introduces the resulting benchmark suite and its core traits,
before Section V concludes this work.

II. BACKGROUND

To keep this paper self contained, this section gives a brief
overview of the quantum circuit compilation ﬂow with its dif-
ferent abstraction levels and the respective quantum software
stack. The levels mentioned in this section are inspired by the
structure proposed by the openQASM 3.0 speciﬁcation [18]
and can similarly be found in many other compilation ﬂows
as well.

A. Quantum Circuit Compilation Flow

Similar to the classical domain, executing a conceptual
quantum algorithm on an actual device requires compiling
it to a representation that adheres to all constraints imposed
by the hardware. Usually, quantum algorithms are initially
developed and tested at a hardware-agnostic level. Generally,
this is described as a quantum circuit that consists of high-level
building blocks without any restrictions to a certain gate-set or
hardware architecture and is deﬁned as the algorithmic level.

Example 1. Variational Quantum Algorithms (VQAs) are an
emerging class of quantum algorithms with a wide range
of applications. A respective circuit is depicted in Fig. 1a
and shows an example of an ansatz function frequently used
for Variational Quantum Eigensolvers (VQEs), a subclass of
VQAs. On this abstraction level, the circuit is parameterized
by the angles θi of the six single-qubit gates.

q2

q1

q0

q2

q1

q0

Ry(θ0)

Ry(θ1)

Ry(θ2)

Ry(θ4)

Ry(θ5)

Ry(θ6)

q2

q1

q0

Ry(π)

Ry(π)

Ry(π)

Ry(π)

Ry(π)

Ry(π)

(a) Algorithmic level

(b) Target-independent level

−π

−π

−π

X

X

X

−π

−π

X

X

−π

X

Q1

Q0

Q2

Q3

Q4

(c) Target-dependent native gates level

(d) Target architecture: IBMQ Manila

q2 (cid:55)→ Q0

q1 (cid:55)→ Q1

q0 (cid:55)→ Q2

−π

−π

−π

X

X

X

−π

X

−π

−π

X

X

(e) Target-dependent mapped level

Fig. 1. Compilation of a Variational Quantum Algorithm.

The ﬁrst step in realizing a conceptual quantum algorithm
on the algorithmic level for a particular problem is to synthe-
size the high-level building blocks and optimize the resulting
representation independent from an actual target architecture.
In analogy to a classical compiler, this involves tasks such
as constant propagation and folding, gate modiﬁer evaluation,
synthesis, loop unrolling, and gate simpliﬁcation. The resulting
representation is deﬁned as the target-independent level.

Example 2. VQAs are hybrid quantum-classical algorithms,
where the parameters of the quantum ansatz are iteratively
updated by a classical optimizer analogous to conventional
gradient-based optimization. Consider again the circuit from
Fig. 1a. Assuming these parameters have been determined,
e.g., θi = −π for i = 0, ..., 5, they are now propagated and
the resulting quantum circuit is shown in Fig. 1b.

Today’s quantum devices impose several constraints on
the circuits
that may be executed on them. Thus, a
target-dependent compilation phase is necessary. For one,
devices only provide a particular set of native gates—typically
consisting of an entangling gate (like the CX gate) and some
family of single-qubit gates. Hence, the gates of a circuit
need to be translated to this native gate-set, which is typically
followed by an optimization pass that aims to reduce the
introduced overhead. This representation level is deﬁned as
the target-dependent native gates level.

√

Example 3. Different quantum computer realizations support
different native gate-sets. In our example, we consider the
IBMQ Manila device as the target device which natively
supports I, X,
X, Rz, and CX gates. Consequently, the
Ry gates in Fig. 1b have to be converted using only these
native gates. In this case, they are substituted by a sequence
of X and Rz gates (denoted as • with a phase of −π) as
shown in Fig. 1c.

In addition to the limited gate-set, today’s devices (at least
those based on superconducting qubits) only feature a limited
connectivity between their qubits. Consequently, the circuit’s
logical qubits need to be mapped to the targeted device’s
physical qubits, so that multi-qubit gates are only applied to
qubits directly connected on the device. Since such a mapping
can rarely be determined in a static fashion, i.e., globally for
the whole circuit, the mapping has to change dynamically
throughout
the circuit, which is frequently referred to as
mapping or routing. Again, this is followed by a round of
optimization in order to minimize the overhead caused by
the compilation. This representation level is deﬁned as the
target-dependent mapped level.

Example 4. Consider again the scenario from Example 3. The
architecture of the IBMQ Manila device is shown in Fig. 1d
and it deﬁnes between which qubits a two-qubit operation may
be performed. Since the circuit shown in Fig. 1c contains CX
gates operating between all combination of qubits, there is no
mapping directly matching the target architecture’s layout. As
a consequence, a non-trivial mapping followed by a round of
optimization leads to the resulting circuit shown in Fig. 1e.
This is also the reason for the different sequence of CX gates
compared to the previous example.

At this point, the circuit is ready to be sent to the quantum
computer’s backend for execution. From there, the individual
gates are scheduled, linked to a particular calibration, and the
resulting circuit is eventually passed to the target machine code
generator. The resulting binaries are then forwarded to the
execution engine to orchestrate the quantum computation on
the actual device.

B. Quantum Software Stack

Quantum software is needed on all levels reviewed above in
order to aid designers in eventually realizing useful quantum
applications. In the following, we review three of the core
design tasks for software tools.

As of today, quantum computers are a scarce resource with
limited availability and capability. Until more devices become
available which are larger and less prone to errors, classical
means to simulate quantum algorithm circuits (also known
as quantum circuit simulators) are essential for fostering
the development of quantum applications. Additionally, and
in contrast to actual quantum computing devices, quantum
circuit simulators allow for detailed insights into the quantum
states throughout the circuit execution since the state’s ampli-
tudes are explicitly tracked during the simulation. On actual
hardware, information can only be extracted in the form of
measurements from the ﬁnal quantum state, which each yields
a classical bit string according to the distribution described
by the state’s amplitudes. Such simulators can be used on
the highest possible level of abstraction, since they can be
designed in a way that does not require restrictions on the
circuit’s gate-set or the qubits’ connectivity, e.g., as proposed
in [1], [2]. Also, they might also be used on the lowest possible
level in order to perform noise-aware simulations which allow

to estimate how a circuit is likely to perform on an actual
device, e.g., as proposed in [19]–[21]. Either way, on both
abstraction levels, quantum circuit simulation is non-trivial
since corresponding representations of states and operations,
in general, require exponential space or runtime—requiring
powerful software tools.

Due to the immense complexity of the tasks involved in
quantum circuit compilation (as it has been illustrated in Sec-
tion II-A), e.g., mapping being NP-complete [22], manually
conducting compilation often is not an option. Consequently,
efﬁcient software tools are needed across all levels of abstrac-
tion of the aforementioned ﬂow in order to realize a conceptual
algorithm on an actual device. Thus, various compilation tools
have been proposed, e.g., [3]–[5].

it

During compilation, an algorithm’s description is consid-
is of utmost
erably altered and transformed. Naturally,
importance to ensure that the originally intended functionality
is preserved through all levels of abstraction. This procedure
is called veriﬁcation. While the underlying principle of com-
paring the transformations represented by different quantum
circuits is conceptually simple, the exponential size of the
underlying matrices makes this problem challenging—it has
been shown to be QMA-complete [23]. Due to the increasing
complexity of today’s compilation ﬂows, tools for verifying
their results become increasingly important. Exemplary veri-
ﬁcation tools have been proposed in [6]–[10].

These design tasks demonstrate the wide variety of soft-
levels of
ware tools operating on and across different
abstraction—leading to comprehensive quantum circuit design
ﬂows realized through toolkits such as IBM’s Qiskit [11],
Google’s Cirq [12], or Rigetti’s Forest [13]. At the same time,
all these tasks have in common that they have an immensely
large complexity. As such, a multitude of techniques for each
task have been proposed—each with its own trade-off between
resource demand and quality of the result. It is key in the
development of scientiﬁc methods to empirically evaluate and
compare their performances on practical, relevant benchmarks.

III. BENCHMARKING

The benchmark suite proposed in this paper is not
the
ﬁrst and certainly not the last collection of quantum circuit
benchmarks. In this section, we review some of the existing
suites and their respective foci. Afterwards, we discuss how
MQT Bench further complements this.

A. Current State of the Art

Providing a comprehensive set of benchmarks to satisfy the
needs across all levels of the quantum circuit compilation
ﬂow is a challenging task. Several approaches to provide
benchmark suites for some of the levels within the quantum
circuit compilation ﬂow have already been proposed and a
non-exhaustive overview is given in the following:

Application-Oriented Performance Benchmarks for Quan-
tum Computing [14]: Starting with an example located on
this benchmark suite rather focuses
the algorithmic level,
it
on high-level descriptions. At

the moment of writing,

provides 13 benchmark algorithms which can be generated
with a variable number of qubits via jupyter notebooks using
multiple software compilation ﬂows and are classiﬁed into four
categories of complexity. The resulting circuits are available
as high-level Python objects without any further compilation
steps.

QASMbench [15]: This benchmark suite focusses on the
target-independent level. It offers numerous quantum circuits
with a wide but ﬁxed range of both the number of qubits
and depth. It classiﬁes the benchmarks into three categories
of sizes and three categories of algorithm classes. All circuits
are available in an intermediate representation according to the
openQASM 2.0 speciﬁcation [24].

SupermarQ [16]: Similarly to QASMbench, SupermarQ also
focusses on the target-independent level with the contrast of
providing benchmarks with adjustable qubit range for eight
algorithms according to the openQASM 2.0 speciﬁcation [24].
Additionally, six feature vectors are proposed to describe the
characteristics of the benchmarks.

RevLib [17]: This benchmark suite provides a wide variety
of reversible circuits in an intermediate representation format
speciﬁed by the authors. Classical functions are frequently em-
bedded into reversible circuits in order to use them in quantum
algorithms, e.g., oracle functions or Boolean building blocks
such as the modular exponentiation in Shor’s algorithm [25].
In addition, decomposed versions of this benchmark suite
have found widespread use in evaluating the performance of
mapping tools, e.g., in [26]–[28]. Since reversible circuits
merely form a subclass of quantum circuits and do not
employ quantum mechanical effects such as superposition and
entanglement, they do not serve as adequate benchmarks for
the whole stack.

B. Motivation

level

All of the mentioned benchmark suites have in common,
that they each target a speciﬁc abstraction level within the
quantum circuit compilation ﬂow. Although the respectively
intended target
the demand for a
is well covered,
cross-level benchmark suite is not fully met yet. Additionally,
so far, there is no mutual consolidation which benchmarks to
use for empirical evaluations of software tools. This results
in a lower comparability, reproduceability, and transparency
of results and may even cause confusion because benchmarks
believed to realize the same particular task are quite frequently
realized in a completely different fashion, e.g., a benchmark
called "grover" could realize Grover’s algorithm with any
particular oracle. Consequently, the demand for a benchmark
suite spanning the whole stack of abstraction levels constitutes
the main motivation of this contribution. In order to realize
such a benchmark suite, several challenges have to be tackled:
• Distinct requirements for benchmark circuits on different
levels: The closer a level is to the actual computing
hardware, the more requirements have to be fulﬁlled, e.g.,
only gates from the device’s native gate-set are allowed
and the connectivity of the hardware architecture must be
considered.

• Accessibility: In order to facilitate its adoption, the bench-
mark suite needs to be as easy to use as possible. While
most benchmark suites already provide open-source ac-
cess, running and adapting the code to the user’s needs,
e.g., obtaining a selection of relevant benchmarks, fre-
quently is tedious or impossible and a solution that keeps
this hurdle low is desirable.

• Generalizability of a software tool: This can only be
guaranteed if it is evaluated on a broad set of benchmarks,
relating to several characteristics, e.g., the number of
qubits, circuit depth, or the application domain.

• Extendability: Besides that, quantum computing is rapidly
advancing and extendability of the benchmark suite to
future algorithms, gate-sets, and architectures becomes
even more important.

MQT Bench has been developed with these challenges in
mind and aims to be a ﬁrst step towards covering the whole
quantum software stack with a benchmark suite based on the
following four core traits (which are described in detail in
Section IV):

1) Cross-level benchmarking: All benchmarks are provided
on four abstraction levels reviewed in Section II-A.
2) Accessibility: A website to simplify the usage of
MQT Bench as much as possible is provided (https://
www.cda.cit.tum.de/mqtbench). Additionally, all bench-
marks can also be generated on-demand using our
Python package. While most needs of users should be
covered by this, we additionally give access to the
open-source repository on GitHub (https://github.com/
cda-tum/MQTBench).

3) Algorithm Selection: Broad selection of different bench-
marks with parameterizable characteristics ranging from
building blocks, i.e., QFT, to applications, i.e., ground
state estimation.

4) Extendability: MQT Bench is easily extendable regard-
ing the available benchmarks, native gate-sets, and hard-
ware architectures.

Benchmarking quantum software tools and compilation
ﬂows with the same benchmarks aims to aid comparability,
reproducibility and transparency of empirical evaluations. How
this leads to more consistent testing is shown in the following
example.

Example 5. Consider a full quantum compilation ﬂow across
all four levels which shall be developed and tested as depicted
in Fig. 2. On the left-hand side of the levels, the current
state of the art of benchmarking is sketched. To comprehen-
sively test each level, different benchmark suites have to
be adapted and used. In contrast, MQT Bench replaces all
of those and enables testing software tools with the same
benchmarks throughout the whole quantum circuit compilation
ﬂow as shown on the right-hand side.

Appl.-orient.
Perf. Benchm. [14]

QASMbench [15]
SupermarQ [16]

RevLib [17]

Algorithmic

Target-
independent

Target-dependent
native gates

Target-dependent
mapped

Directly applicable
Additional effort needed

MQT Bench

Fig. 2. Benchmarking software tools with and without MQT Bench.

IV. MQT BENCH

In this section, we describe in more detail how each of the

four previously mentioned core traits is implemented.

A. Cross-Level Benchmarking

As exemplarily illustrated in Section II, software devel-
opment in quantum computing takes place at various lev-
els. While there arguably are numerous possible levels,
MQT Bench focusses on four as a balanced measure between
speciﬁcity and generizability—inspired by the structure pro-
posed in the openQASM 3.0 speciﬁcation [18]. Providing
these benchmarks on all of the four abstraction levels is the
main contribution of this work. More precisely, the following
levels are covered:

1) Algorithmic level: In this format, all kind of quantum
gates may be used and subsumed into high-level building
blocks. Loops are possible and the circuit structure might
be described by constants, variables, and mathematical
expressions. This level provides benchmarks on the
most generic level and speciﬁc values are assigned to
its variables, e.g., the number of iterations of a loop.
The number of qubits can be speciﬁed through the
MQT Bench web interface.

2) Target-independent level: Here, loop unrolling, constant
folding and propagation are conducted. Also naive gate
simpliﬁcation is enforced. Again, the number of qubits
can be adapted through the website and the used com-
piler can be selected.

3) Target-dependent native gates level: On this level, a
particular native gate-set is chosen and the circuit is
transpiled and optimized accordingly. Here, the native
gate-set,
the used compiler and its settings can be
speciﬁed.

4) Target-dependent mapped level: Finally, a dedicated
architecture layout is chosen and the circuit is mapped
to the targeted device so that it satisﬁes all its connec-
tivity constraints and becomes executable on the device.
Similar to the previous level, the used compiler and its
settings are selectable—in addition to the target device.

All relevant

information of a generated benchmark are
denoted in short in the ﬁle name and in detail within the ﬁle
itself.

B. Accessibility

MQT Bench strives to fulﬁll the needs of many. In order
it has to be as user-friendly as
to accomplish this goal,
possible. On the one hand, this involves the benchmark library
itself. All of the high-level, algorithmic benchmark scripts and
routines to generate representations for the individual levels
are publicly available on GitHub (https://github.com/cda-tum/
MQTBench). This allows for complete transparency on how
the respective circuits have been generated. Additionally, a
Python package is provided such that each benchmark can be
generated on-demand.

importantly,

On the other hand, and most

this involves
the way in which users interface with the benchmark suite.
While most benchmark suites are provided as an accumulation
of benchmark ﬁles—making it hard to extract the desired
set of benchmarks, MQT Bench includes an easy-to-use,
no-coding-required web interface (https://www.cda.cit.tum.de/
mqtbench) that provides the means to ﬁlter the large number of
pre-generated benchmarks according to the speciﬁc needs of
the user. This web interface and its underlying server software
is also part of our Python package, such that every user can
utilize the same interface locally without the need to access
our publicly available server. A screenshot of the website’s
user interface and its conﬁguration options is shown in Fig. 3.

C. Algorithm Selection

To provide a broad spectrum of different benchmarks,
MQT Bench comprises most of today’s de-facto standard
quantum algorithms. This includes building blocks, e.g.,
the Greenberger–Horne–Zeilinger state preparation (GHZ) or
Quantum Fourier Transform (QFT), up to higher-level al-
gorithms, e.g., Shor’s [25] and Grover’s [29] algorithm. At
the time of writing, MQT Bench comprises the following
benchmarks:

• GHZ state preparation
• Graph state preparation
• W-State preparation
• Amplitude Estimation (AE)
• Quantum Fourier Transformation (QFT)
• Quantum Phase Estimation (QPE)
• Deutsch-Jozsa (DJ) algorithm
• Harrow-Hassidim-Lloyd (HHL) algorithm
• Shor’s algorithm
• Grover’s algorithm
• Quantum Walk
• Quantum Approximation Optimization Algorithm

(QAOA)

• Variational Quantum Eigensolver (VQE)
• Three VQA ansatz functions with randomly initialized
parameters: Two Local, Real Amplitudes and Efﬁcient
SU2

Additionally, MQT Bench provides several application
benchmarks speciﬁcally targeting variational quantum algo-
rithms, since those algorithms are especially promising in the
NISQ-era [30]. To this end, we use the classiﬁcation provided

Fig. 3. User interface of the MQT Bench website.

by IBM Qiskit’s application levels: Optimization, Machine
Learning, Finance, and Nature:

• Optimization: Travelling salesman problem and vehicle

routing

• Machine Learning: Quantum Generative Adversarial Net-

work (QGAN)

• Finance: Portfolio optimization and option pricing
• Nature: Ground state estimation

D. Extendability

Quantum computing is a rapidly evolving area of research
and, especially in the recent years, numerous promising algo-
rithms and ﬁelds of application have emerged. Any benchmark
suite has to be extendable and must continuously evolve in
order to remain relevant. MQT Bench is designed to be easily
extendable in a multitude of ways:

• Algorithms: New applications and algorithms can easily
be integrated into MQT Bench by providing the corre-
sponding algorithmic level description. The generation of
all other levels and options (such as the native gate-sets,
architectures, and compilers with their settings) is auto-
matically handled by the proposed library.

• Native gate-sets: So far, native gate-sets of supercon-
ducting quantum computers from IBM, Rigetti, and Ox-
ford Quantum Circuits are provided—in addition to the
gate-set of IonQ’s ion trap-based quantum computers. In
the future, additional gate-sets (such as those of Google’s
and or AQT’s quantum computers) can be realized by
adopting the necessary compilation routines in the pro-
posed library.

• Hardware architectures: All major players currently rely
on a modular platform for the architecture of their devices
in order to further scale their quantum computers. It is
straightforward to extend MQT Bench’s list of available
architectures to accommodate future architectures.

While the four levels MQT Bench is based on cover today’s
main use cases, the number of abstraction levels most likely
is going to increase in the future. While the mapped level has
mostly been considered the last one before a circuit is send to
the quantum computer for execution, pulse-level programming
is envisioned to give even more control to software developers
as proposed in [31]. On the other end of the spectrum,
higher-level abstractions and programming languages will
be required to foster the adoption of quantum technology.
Currently, a programmatic description for the benchmarks
is needed on the algorithmic level. An even higher level
where this programmatic description will be automatically
derived from is also envisioned. QUARK [32], a framework
for quantum computing application benchmarking consisting
of four levels where the lowest level considers the whole
compilation ﬂow discussed in Section II-A, constitutes one
step towards this direction.

V. CONCLUSION
In this work, we proposed MQT Bench—a quantum circuit
benchmark suite comprising different algorithms, compilers,
native gate-sets, and target devices—resulting in more than
50,000 benchmark circuits ranging from 2 up to 130 qubits
on four abstraction levels. To keep this large number of
benchmarks manageable, we provide an easy-to-use web in-
terface (https://www.cda.cit.tum.de/mqtbench) allowing users
to ﬁlter the benchmarks according to their needs. MQT
Bench is also provided as a Python package (including the
server software to start the web interface locally), such that
each of the benchmarks can be easily generated on-demand.
Additionally, we give access to the open-source repository
on GitHub (https://github.com/cda-tum/MQTBench). By this,
MQT Bench presents a ﬁrst step towards serving a single
benchmark suite for the whole quantum software stack—
facilitating empirical evaluations of quantum software tools
that are comparable, reproducible, and transparent.

ACKNOWLEDGMENTS

This work received funding from the European Re-
search Council (ERC) under the European Union’s Horizon
2020 research and innovation program (grant agreement No.
101001318), was part of the Munich Quantum Valley, which is
supported by the Bavarian state government with funds from
the Hightech Agenda Bayern Plus, and has been supported
by the BMWK on the basis of a decision by the German
Bundestag through project QuaST, as well as by the BMK,
BMDW, and the State of Upper Austria in the frame of the
COMET program (managed by the FFG).

REFERENCES
[1] A. Zulehner and R. Wille, “Advanced simulation of quantum com-
putations,” IEEE Trans. on CAD of Integrated Circuits and Systems,
2019.

[2] D. M. Miller, M. A. Thornton, and D. Goodman, “A decision diagram
package for reversible and quantum circuit simulation,” in Int’l Conf.
on Evolutionary Computation, 2006.
T. Häner, D. S. Steiger, K. Svore, and M. Troyer, “A software
methodology for compiling quantum programs,” Quantum Science and
Technology, vol. 3, no. 2, 2018.

[3]

[6]

[4] M. Amy and V. Gheorghiu, “Staq—a full-stack quantum processing
toolkit,” Quantum Science and Technology, vol. 5, no. 3, 2020.
[5] A. S. Green, P. L. Lumsdaine, N. J. Ross, P. Selinger, and B. Valiron,
“Quipper: A scalable quantum programming language,” SIGPLAN
Not., vol. 48, no. 6, 2013.
L. Burgholzer and R. Wille, “Advanced equivalence checking for
quantum circuits,” IEEE Trans. on CAD of Integrated Circuits and
Systems, 2020.
S. Yamashita and I. L. Markov, “Fast equivalence-checking for quan-
tum circuits,” in Int’l Symp. on Nanoscale Architectures, 2010.
P. Niemann, R. Wille, D. M. Miller, M. A. Thornton, and R. Drechsler,
“QMDDs: Efﬁcient quantum function representation and manipula-
tion,” IEEE Trans. on CAD of Integrated Circuits and Systems, vol. 35,
no. 1, 2016.

[8]

[7]

[9] R. Duncan, A. Kissinger, S. Perdrix, and J. van de Wetering, “Graph-
theoretic simpliﬁcation of quantum circuits with the ZX-calculus,”
Quantum, vol. 4, 2020.
L. Burgholzer, R. Raymond, and R. Wille, “Verifying results of the
IBM Qiskit quantum circuit compilation ﬂow,” in Int’l Conf. on
Quantum Computing and Engineering, 2020.

[10]

[11] M. S. ANIS et al., Qiskit: An open-source framework for quantum

computing, 2021.

[12] Cirq Developers, Cirq, version v0.12.0, See full list of authors on
Github: https://github .com/quantumlib/Cirq/graphs/contributors, 2021.
[13] R. S. Smith, M. J. Curtis, and W. J. Zeng, A practical quantum

instruction set architecture, 2016. arXiv: 1608.03355.

[14]

T. Lubinski et al., “Application-Oriented Performance Benchmarks for
Quantum Computing,” 2021. arXiv: 2110.03137.

[15] A. Li, S. Stein, S. Krishnamoorthy, and J. Ang, “QASMBench: A Low-
level QASM Benchmark Suite for NISQ Evaluation and Simulation,”
2021. arXiv: 2005.13018.
T. Tomesh et al., “Supermarq: A scalable quantum benchmark suite,”
2022. arXiv: 2202.11045.

[16]

[17] R. Wille, D. Große, L. Teuber, G. W. Dueck, and R. Drechsler,
“RevLib: An online resource for reversible functions and reversible
circuits,” in Int’l Symp. on Multi-Valued Logic, RevLib is available at
http://www.revlib.org, 2008.

[18] A. W. Cross et al., OpenQASM 3: A broader and deeper quantum

[19]

assembly language, 2021. arXiv: 2104.14722.
T. Grurl, R. Kueng, J. Fuß, and R. Wille, “Stochastic quantum circuit
simulation using decision diagrams,” in Design, Automation and Test
in Europe, 2021.

[21]

[20] B. Villalonga et al., “A ﬂexible high-performance simulator for
verifying and benchmarking quantum circuits implemented on real
hardware,” npj Quantum Information, vol. 5, no. 1, 2019.
T. Jones, A. Brown, I. Bush, and S. C. Benjamin, “QuEST and High
Performance Simulation of Quantum Computers,” Scientiﬁc Reports,
vol. 9, no. 1, 2019.

[22] M. Y. Siraichi, V. F. dos Santos, S. Collange, and F. M. Q. Pereira,
“Qubit allocation,” in Int’l Symp. on Code Generation and Optimiza-
tion, 2018.

[23] D. Janzing, P. Wocjan, and T. Beth, ““Non-identity check” is QMA-
complete,” Int. J. Quantum Inform., vol. 03, no. 03, pp. 463–473, 2005.
[24] A. W. Cross, L. S. Bishop, J. A. Smolin, and J. M. Gambetta, “Open

[25]

Quantum Assembly Language,” 2017. arXiv: 1707.03429.
P. W. Shor, “Polynomial-time algorithms for prime factorization and
discrete logarithms on a quantum computer,” SIAM review, vol. 41,
no. 2, 1999.

[26] K. N. Smith and M. A. Thornton, “A quantum computational compiler
and design tool for technology-speciﬁc targets,” in Int’l Symp. on
Computer Architecture, 2019, pp. 579–588.

[27] B. Tan and J. Cong, “Optimal layout synthesis for quantum comput-

ing,” in Int’l Conf. on CAD, 2020.

[28] G. Li, Y. Ding, and Y. Xie, “Tackling the qubit mapping problem for
NISQ-era quantum devices,” in Int’l Conf. on Architectural Support
for Programming Languages and Operating Systems, 2019.
L. K. Grover, “A fast quantum mechanical algorithm for database
search,” in Symp. on Theory of Computing, 1996.

[29]

[30] M. Cerezo et al., “Variational Quantum Algorithms,” Nature Reviews

Physics, vol. 3, no. 9, 2021.

[31] B. Li et al., “Pulse-level noisy quantum circuits with QuTiP,” Quan-

[32]

tum, vol. 6, p. 630, 2022.
J. R. Finžgar, P. Ross, J. Klepsch, and A. Luckow, “QUARK: A
framework for quantum computing application benchmarking,” 2022.
arXiv: 2202.03028.

