An Arduino based heartbeat detection device (ArdMob-ECG) for

real-time ECG analysis

Tim Julian M¨oller1,2, Martin Voss3, and Laura Kaltwasser1,2

1Berlin School of Mind and Brain, Humboldt-Universit¨at zu Berlin, Germany
2Department for Psychiatry and Psychotherapy, Charit´e University Medicine, Berlin, Germany
3Department of Psychiatry and Psychotherapy, Charit´e University Medicine and St. Hedwig
Hospital, Berlin, Germany

April 4, 2022

Keywords: ArdMob-ECG, AD8232, Heart rate monitor, Arduino, ECG, heartbeat detection, QRS detection,

R-peak detection, Pan-Tompkins algorithm

Abstract

This technical paper provides a tutorial to build a low-cost (10-100 USD) and easy to assemble ECG device

(ArdMob-ECG) that can be easily used for a variety of diﬀerent scientiﬁc studies. The advantage of this device

is that it automatically stores the data and has a built-in detection algorithm for heartbeats. Compared to a

clinical ECG, this device entails a serial interface that can send triggers via USB directly to a computer and

software (e.g. Unity, Matlab) with minimal delay due to its architecture. Its software and hardware is open-source

and publicly available. The performance of the device regarding sensitivity and speciﬁcity is comparable to a

professional clinical ECG and is assessed in this paper. Due to the open-source software, a variety of diﬀerent

research questions and individual alterations can be adapted using this ECG. The code as well as the circuit is

publicly available and accessible for everyone to promote a better health system in remote areas, Open Science,

and to boost scientiﬁc progress and the development of new paradigms that ultimately foster innovation.

2
2
0
2

r
p
A
1

]
P
S
.
s
s
e
e
[

1
v
3
1
5
0
0
.
4
0
2
2
:
v
i
X
r
a

*Correspondence: tim.julian.moeller@gmail.com
cbna This work is licensed under a Creative Commons Attribution-Noncommercial-ShareAlike International License

 
 
 
 
 
 
T.J. M¨oller

An Arduino based heartbeat detection device (ArdMob-ECG) for real-time ECG analysis

1 Introduction

In the recent past, neuroscience research has identiﬁed interoception as an important factor contributing to

metacognition, empathy, and the experience of the self (Fukushima, Terasawa, & Umeda, 2011; Meessen et al., 2016).

Interoceptive signals such as the heart rate, measured with an ECG has thereby been of special interest. These

interoceptive signals can be used for a variety of diﬀerent applications like research studies, modern therapies, but

also video games. For example, diﬀerent projects develop the integration of the heart rate as feedback into virtual

environments to develop more immersive experiences for biofeedback in the treatment of ADHD, for the use of more

immersive meditation applications, or even to automatically adapt the diﬃculty and scariness of video games.

However, clinical ECG machines are usually heavy, expensive, and require being operated by trained technical
and medical personnel. Utilizing an easy to use, inexpensive, lightweight, and reliable technical device for measuring

heart rate and its components would advance the progress in scientiﬁc research. In addition, in light of the global

Covid-19 pandemic, an easy to use device would also allow the recording of data at the home of the participants with

simple instructions and without any additional risk of the physical presence of the scientists during the pandemic.

This paper describes an Arduino-based heartbeat detection device (ArdMob-ECG) that integrates the AD8232

module for real-time ECG analysis. The ArdMob-ECG is easy to assemble, light-weight, small and transportable,

inexpensive, yet reliable, and can be used without clinical personnel with simple instructions. This paper is meant

as a guide for scientists to independently assemble the device for their own scientiﬁc studies.

2 Electrocardiogram (ECG)

2.1 ECG characteristics

An Electrocardiogramm (ECG) is a widely-used painless and non-invasive technique that is most commonly used to

determine heart rate, rhythm, or frequency. The QRS complex, which represents the ventricular depolarization of

the heart, is in focus when analyzing heartbeat data. The QRS complex describes the phases around a heartbeat

and consists of three waves — Q, R, and S, and usually lasts between 0.06–0.10 seconds (Kashani & Barold, 2005).

The Q-wave starts through the depolarization of the interventricular septum. The highest potential is found in the

subsequent R-peak which reﬂects the depolarization of the myocardium of both heart chambers. The R-wave/peak

is usually used for calculating the heart rate variability (HRV). The R-peak is followed by a downward deﬂection

which can be referred to as the S-wave. The time between two R-peaks is the interbeat interval (IBI) (Christensen

& Wright, 2014).

2.2 Use of medical ECG machines in scientiﬁc research

An ECG can monitor the heart activity of an individual and detect e.g. arrhythmias that can indicate heart problems.

This has an immense meaning for monitoring the participants cardiac health. Usually a clinical ECG machine which

sometimes costs several thousand US-Dollar is needed and due to the cost and the weight of the ECG machine,

usually hospitalization is needed for an ECG-assessment. Furthermore, clinical ECG machines usually do not allow
changes in their built-in software nor a direct serial interface to other programs. Therefore, an inexpensive device (≈
50 $) that is easy to use, easy to self-assemble, and easy to transport can provide a solution for more remote areas

that do not have a health system in range.

2

T.J. M¨oller

An Arduino based heartbeat detection device (ArdMob-ECG) for real-time ECG analysis

3 An Arduino-based ECG device using the AD8232 module

An Arduino is a programmable single-board microcontroller that comes with its own software integrated development

environment (IDE). The software is programmed in an abstraction of C++ and can be loaded via a USB cable to

the Arduino board. The board can be equipped with diﬀerent sensors and modules.

The ArdMob-ECG described in this paper utilizes the AD8232 module, a small chip measuring the electrical

signal of the heart that is then translated to an ECG waveform. The AD8232 integrates signals for ECG and

other biopotential measurements and is specialized to extract, amplify, and ﬁlter small biosignals even in the

presence of noisy conditions such as remote electrode placement and movement. The AD8232 consists of specialized

instrumentation, operational, and a drive ampliﬁer. Additionally, the chip provides a mid supply reference buﬀer
and a built-in high and low pass ﬁlter (Kanani & Padole, 2018). A schematic functional block diagram of the chip

can be seen in Figure 1.

Figure 1: A functional block diagram of the AD8232 ECG module taken from Analog Devices AD8232 Overview
(n.d.)

The ArdMob-ECG described here is a reliable yet inexpensive, between 10 and 150 Euro, and easy to use ECG

device for scientiﬁc studies. Due to its light weight and plug and play mechanism, it can also be operated by

non-clinical personnel outside of the laboratory. It can also be battery operated without the need of any energy

outlets. The device integrates the AD8232 Single Lead Heart Rate monitor module soldered on a standard Arduino

board to reliably record data, calculate the heart beat, and save it on an on board micro-SD card.

The ArdMob-ECG implements a simpliﬁcation of the Pan-Tompkins algorithm to calculate the occurrence of

heartbeats in near real time. Diﬀerent data (e.g. timestamps, raw data) can be saved on a built-in micro SD card,

while other data such as triggers can be sent directly to another device using a serial interface (USB-connection).

Thus, triggers can be sent with minimal delay. The heartbeat analysis can already be calculated locally on the

Arduino.

The Arduino can also provide auditory feedback whenever a heartbeat is detected. This tone can also be easily

adjusted to occur faster, slower or with a speciﬁc delay to the actual heartbeat, depending on the scientiﬁc paradigm

(e.g. the widely used interoceptive sensitivity paradigm (Garﬁnkel, Seth, Barrett, Suzuki, & Critchley, 2015)).

3

T.J. M¨oller

An Arduino based heartbeat detection device (ArdMob-ECG) for real-time ECG analysis

With respect to scientiﬁc purposes, this device can provide solutions for scientiﬁc studies since it is fast to compute

and introducing a low latency due to a direct objective machine layer (C++) that allows for faster processing, while

having a very low power consumption of around 25mA. Furthermore, the variables can be easily modiﬁed and

additional triggers can be implemented, for example, directly playing the sounds faster or slower according to the

last R-R interval (Brener, Liu, & Ring, 1993; Suzuki, Garﬁnkel, Critchley, & Seth, 2013; Wiens & Palmer, 2001).

The AD8232 module in combination with an Arduino has been used in prior studies for heartbeat detection (e.g.

Bhosale & Bhosale, 2016; Bravo-Zanoguera, Cuevas-Gonz´alez, Garc´ıa-V´azquez, Avitia, & Reyna, 2019; Kanani &

Padole, 2018; Simanjuntak, Khodra, & Manullang, 2020). However, in order to make it easier for researchers to

reconstruct the ArdMob-ECG for use in further studies, the current paper will also provide the code and a clear

schematic of the hardware. The following sections provide a comprehensive and detailed description of the device’s

hardware and software with the aim of enabling researchers to independently assemble the device for use in scientiﬁc

studies.

3.1 Design of the Hardware

The Arduino is capable of a modular build as it can be equipped relatively easy with diﬀerent sensors, chips, and

modules. The AD8232 ECG sensor (Analog Devices AD8232 Overview, n.d.) is a module that can be soldered onto

an Arduino. It entails a connection cable that is plugged into the 2.54 pin (headphone) jack of the AD8232 module.

The connection cable has place for 3 electrodes and can be used with any standard clinical ECG electrodes. The

electrodes are be attached onto the participant according to the classic lead II conﬁguration which is standard in

many scientiﬁc studies (Christensen & Wright, 2014; Cliﬀord, Azuaje, & McSharry, 2006). However, other electrode

setups are possible. An Arduino Mega 2560 R3 with an ATmega2560 processor, equipped with a generic prototype

shield was used. An AD8232 heart-rate module, an electrical piezo sound buzzer (UKCOCO DC 3 – 24 V 85 dB

Piezo buzzer), and a micro SD memory card SPI reader (AZDelivery, Deggendorf, Bavaria, Germany) to allow serial

communication and on time analysis of the signal were soldered on a standard prototype shield (RobotDyn, Zhuhai,

China) that is attached to the Arduino. Figure 2 provides a detailed schematic diagram of the circuit. Additionally,

the ECG-device is embedded in a plastic case that is shielded in aluminium to reduce electrical interference from the

surrounding. Figure 3 depicts the setup without the aluminium shielding after soldering the AD232 sensor, and

Figure 3 shows the device inside the aluminium case after soldering the Piezo buzzer and with the electrodes cable

attached to the headphone jack of the AD8232 sensor. Additional information about practical assembly of the device

is presented in subsection 3.3.

4

T.J. M¨oller

An Arduino based heartbeat detection device (ArdMob-ECG) for real-time ECG analysis

Figure 2: A schematic diagram of the ArdMob-ECG. The Arduino Mega 2560 board (top, teal) is connected to an
AD8232 heart beat monitor (bottom left, red) which has a headphone jack from which the cable for the electrodes
connects, to a 85 dB Piezo sound buzzer (bottom center, black) , and a micro SD memory card SPI reader (bottom
right, dark blue). (Figure created with Fritzing)

5

T.J. M¨oller

An Arduino based heartbeat detection device (ArdMob-ECG) for real-time ECG analysis

Figure 3: The ArdMob-ECG inside the aluminium case showing the insides according to the schematic in Figure 2
showing the modules and all the relevant cable connections. The cable on the right is the electrodes cable connected
to the headphone jack of the AD8232 sensor. On the right is the Piezo sound buzzer. On the left side is the device
how it is used.

3.2 Design of the Software

In order to analyze an ECG, a peak detection algorithm is usually used. One such algorithm is the Pan-Tompkins

algorithm, which is commonly used for detecting the QRS complex in ECG, utilizing a series of low and high pass

ﬁlters to detect the frequencies in the signal and to remove background noise (Pan & Tompkins, 1985). Speciﬁcally,
the Pan-Tompkins algorithm applies an adaptive low pass ﬁlter, followed by an adaptive high pass ﬁlter in order

to reduce background noise. In a next step, this signal is used for an adaptive threshold peak detection (see also

Figure 4).

Based on the Pan-Tompkins algorithm, the software for the ArdMob-ECG described in this paper was adapted

from Milner (2015) which poses a simpliﬁcation of the algorithm used in Chen and Chen (2003). The software

provides an on board real-time analysis of the heartbeat, implementing the adaptive high pass and low pass ﬁltering,

and adaptive thresholding of the Pan-Tompkins algorithm. In contrast to the Pan-Tompkins algorithm, no derivative

ﬁlter and no squaring were implemented. Prerecorded ECG-signals taken from Milner (2015) were used to train the

adaptive ﬁltering and thresholding models prior to data collection in order to improve the detection accuracy. When

noise and muscle artifacts are present that interfere with QRS detection, the algorithm switches back to reliable

QRS detection within seconds as soon as the artifacts are absent. In the software, the buﬀer for the high pass (M)

and low pass ﬁlter (N) as well as the window size for the QRS-algorithm (winSize) can be tweaked to adjust for the

6

T.J. M¨oller

An Arduino based heartbeat detection device (ArdMob-ECG) for real-time ECG analysis

quality of the incoming data.

The ArdMob-ECG detects and computes the QRS-complex and without the need for further computations, saves

it on the microSD card. However, it can also send it directly to a computer or tablet as a trigger. For example,

in the VR implementation described in section 4, whenever a heartbeat is detected, a trigger is sent to a PC to

activate the Unity code, and the other data is saved on the microSD card. In addition, the code saves the date and

timestamp of each data point, and a timer was implemented that counts the elapsed time, as well as a counter for

the number of recorded data-points, if enabled. The data is automatically saved on the microSD card and shows an

error when no data can be written on the SD card.

With regards to the sound feedback from the Piezo buzzer, it can be decided if tones should be played concurrently

with the QRS detection i.e. in the same rhythm, or faster or slower (a percentage can be tuned) with respect to the

last QRS-QRS interval.

The software can be found in the code section (Appendix A. of this manuscript) as well as in the GitHub

repository (M¨oller, 2021).

Figure 4: The diﬀerent steps of the Pan-Tompkins algorithm (Pan & Tompkins, 1985; Sedghamiz, 2014a, 2014b).
Taken from (Sedghamiz, 2014b). Note that a high pass ﬁlter, followed up by a low pass ﬁlter can be seen as a band
pass ﬁlter, however, doing both steps consecutively saves processing power.

3.3 Tips and tricks

When ﬁrst setting up the system, it is recommended to test the equipment for malfunctions ﬁrst before soldering

them together. For the ﬁrst prototype, it is easiest to connect the modules via jumper cables to the respective pins

depicted in Figure 2. The heartbeat detection should already work using the jumper cables even though a lot of

noise is introduced. Another testing step before soldering the modules to the Arduino board is to solder them to a

prototype shield where all relevant pins are accessible. This will further improve the quality of the data and reduce

noise. In this step, make sure that nothing is blocking the slot of the microSD card module.

Since the micro SD card saves data according to the FAT ﬁle system using the 8.3 format, the ﬁlename that one

chooses for the data must not exceed 8 characters (e.g. the number or the initials of your participant). If there is a

ﬁle with the same name and format, new data will be appended to the previous dataﬁle. The data can be stored as
a .csv or .txt ﬁle. To change the format, simply change the extension of the output string accordingly.

7

T.J. M¨oller

An Arduino based heartbeat detection device (ArdMob-ECG) for real-time ECG analysis

For further information and help with assembly please do not hesitate to contact me via email.

4 Implementation

The ArdMob-ECG is currently being used in several ongoing studies. In one study, it is used in the interoceptive

sensitivity paradigm where participants have to evaluate if they hear their own heartbeat, or if the sound is played

faster or slower than their own heartbeat. In a next step, the device detects heartbeats and whenever a heartbeat is

detected, a trigger is sent to a PC through a Unity interface to activate a Unity script. In this experiment, depending

on the conditions, this leads to the red ﬂashing of a virtual hand in a virtual reality cardiac rubber hand illusion

paradigm similar to that described in Suzuki et al. (2013). The Unity code for this implementation can be found in

Appendix B and in the GitHub repository (M¨oller, 2021).

Figure 5: A virtual reality study. On the left picture, a participant is doing a virtual reality task, while he is
connected to the Arduino-ECG that is to the right. Whenever a heartbeat is detected by the Arduino, his virtual
hands ﬂash red (right panel), activated by a calculated R-peak trigger by the Arduino through the serial interface as
seen in the left picture.

5 Validation

To assess the quality of data obtained from the three channel ArdMob-ECG, data from 12 channel ECG from a
clinical ECG machine (ZOLL X Series CCT Deﬁbrillator) of a German ambulance and was recorded simultaneously

for three seconds on one healthy 24 year old participant. The ZOLL X Series CCT Deﬁbrillator ECG-device is

standard equipment and is routinely used in german ambulance vehicles.

Figure 6 shows the data from the Arduino based ECG device, and Figure 7 shows a scan of the data obtained by

the clinical ECG machine. By visually comparing both Figures, the data quality of the Arduino based ECG seems

comparable to the clinical ECG. Furthermore, a trained medical expert compared both data outputs and assessed

the validity of the heartbeat detection. Both devices managed to detect the heartbeats.

8

T.J. M¨oller

An Arduino based heartbeat detection device (ArdMob-ECG) for real-time ECG analysis

In addition, a ﬁve minutes and three second long ECG using the ArdMob-ECG was recorded. A trained paramedic

then examined the recorded ECG signal and counted the heartbeats visually. The software and the paramedic both

detected 347 heartbeats within this ﬁve minutes and three seconds timeframe. The paramedic also assessed that the

ECG detection of the software was always identifying the R-peak correctly. Therefore, the sensitivity and speciﬁcity

of the Arduino based ECG was 100%. Besides the R-peak, the paramedic also clearly detected the P,Q,R,S, and T

components of the ECG data gathered by the Arduino. Figure 8 shows the P,Q,R,S,T components of a heartbeat in

data obtained from the ArdMob-ECG. The raw ECG data was smoothed with a Savitzky–Golay ﬁlter. All in all,

the ArdMob-ECG not only reproduces comparable data to the clinical ECG, but also shows suﬃcient sensitivity

and speciﬁcity of the heartbeat detection (R-peak) as well as the P,Q,S, and T components.

Figure 6: Three electrode ECG data acquired from the ArdMob-ECG, recorded simultaneously with a clinical ZOLL
X Series CCT Deﬁbrillator ECG machine (Figure 7). Around 10 seconds of ECG recording. The blue spikes indicate
the detection of a heartbeat by the algorithm.

9

T.J. M¨oller

An Arduino based heartbeat detection device (ArdMob-ECG) for real-time ECG analysis

Figure 7: Data from a 12 channel ECG that was received from a professional clinically certiﬁed device for comparison.
In this image, 3 seconds of an ECG are displayed. Picture a-d all show three seconds of the data of the respective
electrode vectors that are depicted to the right in (d).

Figure 8: The left panel depicts an ideal schematic representation of a normal ECG consisting of the components
P,Q,R,S, and T (Picture taken from Avanzato and Beritelli (2020)). The right panel shows a recording from the
ArdMob-ECG with the diﬀerent components.

10

T.J. M¨oller

An Arduino based heartbeat detection device (ArdMob-ECG) for real-time ECG analysis

6 Conclusions

In light of growing development of sophisticated biofeedback methods in the health sciences, ECG data can provide

valuable information about internal body states. Currently, the use of an ECG might be limited by expensive, heavy

and rather immobile ECG machines, and diﬃculties in operating them with no technical training which might limit

the overall progress in scientiﬁc biofeedback studies.

Our mobile ECG device provides a solution to the aforementioned problems of high costs, transportability, and

technical training required to operate a clinical ECG machine. Furthermore, the ArdMob-ECG allows for an easy

way to save data and to send triggers through a direct interface with minimal temporal delay that can be of use for

scientiﬁc paradigms. The open access to the hardware and software allows for an easy reproducibility of the device
and its features. It also allows for quick and easy changes for individual requirements, that might not be possible

with a clinical ECG. In addition, the open access to the software allows for reproducibility of the ArdMob-ECG and

quick adaptation for individual studies.

Moreover, another advantage is the possibility to directly communicate with other programs without the need of

saving the data or triggers in between on another computer through the serial interface, and the on board processing

of the data which prevents an overload of data to other programs. This serial interface makes it is easy to use with

other experimental or data analysis related software such as Matlab, Python, Blender, or Unity. Diﬀerent data can

be saved on the microSD card.

The ArdMob-ECG showed good results in several ongoing studies. Also the validation with a medical ECG

machine showed no diﬀerence in the eﬀective heartbeat detection.

11

T.J. M¨oller

An Arduino based heartbeat detection device (ArdMob-ECG) for real-time ECG analysis

Author Contributions

T.J.M.: Conceptualization, graphical design, writing the original draft & editing; M.V.: Editing; L.K.: Editing All

authors have read and agreed to the published version of the manuscript.

Conﬂict of Interest Statement

The authors declare that the research was conducted in the absence of any commercial or ﬁnancial relationships that

could be construed as a potential conﬂict of interest.

Funding

This research was funded by the Deutsche Forschungsgemeinschaft (DFG, German Research Foundation) – DFG –

SPP – 2134

Usage Notes

This work is licensed under a Creative Commons Attribution-Noncommercial-ShareAlike License (CC BY-NC-SA).

Users are requested to follow the CC BY-NC-SA license, and acknowledge Tim Julian M¨oller in any publication

derived from this work, citing this paper as the source.

The pictures and the code for this device can be found in the GitHub repository (M¨oller, 2021). The repository

is licensed under the MIT license.

Acknowledgments

Major sections of the Pan-Tompkins algorithm were adapted from an existing repository (Milner, 2015). Some of

the code contains elements from other available, open access, existing scripts, described in the Readme ﬁle in the

GitHub repository.

Special thanks to Yasmin Kim Georgie for editing and language improvements that signiﬁcantly enhanced the

quality of this manuscript.

12

T.J. M¨oller

An Arduino based heartbeat detection device (ArdMob-ECG) for real-time ECG analysis

References

Analog Devices AD8232 overview.

(n.d.).

https://www.analog.com/en/products/ad8232.html#product

-overview. ([Online; accessed 15-December-2021])

Avanzato, R., & Beritelli, F. (2020). Automatic ecg diagnosis using convolutional neural network. Electronics, 9 (6),

951.

Bhosale, V. K., & Bhosale, K. E. (2016). Healthcare based on IoT using Arduino and AD8232 hearth rate monitoring

chip. Asian Journal For Convergence In Technology (AJCT) ISSN-2350-1146 , 2 .

Bravo-Zanoguera, M., Cuevas-Gonz´alez, D., Garc´ıa-V´azquez, J. P., Avitia, R. L., & Reyna, M. (2019). Portable ECG

system design using the AD8232 microchip and open-source platform. In Multidisciplinary digital publishing
institute proceedings (Vol. 42, p. 49).

Brener, J., Liu, X., & Ring, C. (1993). A method of constant stimuli for examining heartbeat detection: Comparison

with the Brener-Kluvitse and Whitehead methods. Psychophysiology, 30 (6), 657–665.

Chen, H., & Chen, S.-W. (2003). A moving average based ﬁltering system with its application to real-time QRS

detection. In Computers in cardiology, 2003 (pp. 585–588).

Christensen, S. C., & Wright, H. H. (2014). Quantifying the eﬀort individuals with aphasia invest in working memory

tasks through heart rate variability. American Journal of Speech-Language Pathology, 23 (2), S361–S371.

Cliﬀord, G. D., Azuaje, F., & McSharry, P. (2006). Advanced methods and tools for ECG data analysis. Artech

house Boston.

Fukushima, H., Terasawa, Y., & Umeda, S. (2011). Association between interoception and empathy: evidence from

heartbeat-evoked brain potential. International Journal of Psychophysiology, 79 (2), 259–265.

Garﬁnkel, S. N., Seth, A. K., Barrett, A. B., Suzuki, K., & Critchley, H. D. (2015). Knowing your own heart:

distinguishing interoceptive accuracy from interoceptive awareness. Biological psychology, 104 , 65–74.

Kanani, P., & Padole, M. (2018). Recognizing real time ecg anomalies using Arduino, AD8232 and Java. In

International conference on advances in computing and data sciences (pp. 54–64).

Kashani, A., & Barold, S. S. (2005). Signiﬁcance of QRS complex duration in patients with heart failure. Journal of

the American College of Cardiology, 46 (12), 2183–2192.

Meessen, J., Mainz, V., Gauggel, S., Volz-Sidiropoulou, E., S¨utterlin, S., & Forkmann, T. (2016). The relationship

between interoception and metacognition. Journal of Psychophysiology.

Milner, B. (2015). Real Time QRS Detection [Computer Software]. (https://github.com/blakeMilner/real

time QRS detection)

M¨oller, T. J. (2021, Dec). Pan Tompkins QRS detector and Datalogger [Computer Software]. (https://github.com/

nalgi/Pan-Tompkins QRS-detector and Datalogger) doi: 10.5281/zenodo.5809247

Pan, J., & Tompkins, W. J. (1985). A real-time QRS detection algorithm. IEEE transactions on biomedical

engineering(3), 230–236.

Sedghamiz, H. (2014a). Complete Pan-Tompkins implementation ECG QRS detector. Matlab Central: Community
Proﬁle. Available online at: http://www. mathworks. com/matlabcentral/proﬁle/authors/2510422-hooman-

sedghamiz, 172 .

Sedghamiz, H. (2014b). Matlab implementation of pan tompkins ECG QRS detector. Code Available at the File

Exchange Site of MathWorks.

Simanjuntak, J. E. S., Khodra, M. L., & Manullang, M. C. T. (2020). Design methods of detecting atrial ﬁbrillation

using the recurrent neural network algorithm on the Arduino AD8232 ECG module. In Iop conference series:

Earth and environmental science (Vol. 537, p. 012022).

13

T.J. M¨oller

An Arduino based heartbeat detection device (ArdMob-ECG) for real-time ECG analysis

Suzuki, K., Garﬁnkel, S. N., Critchley, H. D., & Seth, A. K. (2013). Multisensory integration across exteroceptive

and interoceptive domains modulates self-experience in the rubber-hand illusion. Neuropsychologia, 51 (13),

2909–2917.

Wiens, S., & Palmer, S. N. (2001). Quadratic trend analysis and heartbeat detection. Biological psychology, 58 (2),

159–175.

14

T.J. M¨oller

An Arduino based heartbeat detection device (ArdMob-ECG) for real-time ECG analysis

Appendix A. Arduino Code

/∗ S c r i p t w r i t t e n by Tim J . M¨o l l e r

∗ Humboldt U n i v e r s i t ¨a t

zu B e r l i n

∗ B e r l i n S c h o o l o f Mind and Brain , B e r l i n , Germany

∗ Department o f P s y c h i a t r y and P s y ch o t h e ra p y , C h a r i t e U n i v e r s i t y Medicine , B e r l i n ,

Germany

∗ Contact :

tim . j u l i a n . m o e l l e r @ g m a i l . com

∗

∗ This

s c r i p t

r e c o r d s d a t a from t h e AD8232 s h i e l d and p l o t s

t h e d a t a .

∗ P r e p r o c e s s i n g and d e t e c t o f

t h e QRS compley i s

r e a l i z e d t h r o u g h t h e Pan−Tompkins

a l g o r i t h m

∗ ( Pan , J . , & Tompkins , W. J .

( 1 9 8 5 ) . A r e a l −time QRS d e t e c t i o n a l g o r i t h m . IEEE

Trans . Biomed .

∗ Eng , 3 2 ( 3 ) , 230 −236.) .

∗ This

s c r i p t a l s o s a v e s

t h e Date ,

t h e Timestamp , a Timer t h a t c o u n t s

t h e p a s s e d

time and a

c o u n t e r

f o r

t h e number o f

r e c o r d e d data−p o i n t s .

∗

∗

∗ Some o f

t h e code c o n t a i n s e l e m e n t

from a v a i l a b l e , open a c c e s s , e x i s t i n g

s c r i p t s :

∗ h t t p s : / / g i t h u b . com/ a d a f r u i t / Adafruit SSD1306

∗ h t t p s : / / g i t h u b . com/ b l a k e M i l n e r / r e a l t i m e Q R S d e t e c t i o n

∗ h t t p s : / / g i t h u b . com/ d x i n t e r a c t i v e / ResponsiveAnalogRead

∗ SD card read / w r i t e ( Arduino example s k e t c h e s ) c r e a t e d Nov 2010 by David A.

M e l l i s m o d i f i e d 9 Apr 2012 by Tom I g o e

∗ This example code i s
∗ SD Card t e s t c r e a t e d

i n t h e p u b l i c domain .

28 Mar 2011 by Limor F r i e d m o d i f i e d 9 Apr 2012 by Tom I g o e

∗ This example code i s

i n t h e p u b l i c domain .

∗

∗ L a s t m o d i f i e d : 3 1 . 1 2 . 2 0 2 1

∗/

// /////////////// START OF DECLARATION OF IMPORTANT VARIABLES

///////////////////////

/∗ Here you can f i n d t h e v a r i a b l e s

t h a t might need a d j u s t m e n t

t o you own p u r p o s e .

A s h o r t d e s c r i p t i o n what e v e r y

∗

v a r i a b l e i s d o i n g can be found as a comment a f t e r

t h e v a r i a b l e d e c l a r a t i o n . ∗/

const S t r i n g Filename = ” T e s t 0 1 . t x t ” ; /∗ Give t h e O u t p u t f i l e a name how i t w i l l be

d i s p l a y e d on t h e SD Card . Be aware t h a t

t h e

// f i l e n a m e may o n l y c o n s i s t o f a maximum o f 8 a l p h a n u m e r i c s and has t o end w i t h .

e x e or . c s v ( e . g . T e s t 0 1 . t x t ) .

I f

a f i l e w i t h t h e same name a l r e a d y e x i s t s ,

t h i s

f i l e w i l l be e x t e n d e d . ∗/

15

T.J. M¨oller

An Arduino based heartbeat detection device (ArdMob-ECG) for real-time ECG analysis

bool P l o t t i n g = true ; /∗ I f you want

t o p l o t

t h e d a t a i n t h e Arduino S e r i a l P l o t t e r

,

s e t

t h i s

v a r i a b l e t o t r u e . The QRS v a l u e

// i s

t h e n changed t o 400 i n s t e a d o f 1 ,

t o make t h e peak more v i s i b l e .

I f you use

t h e s e r i a l monitor or you want

t o s a v e t h e d a t a t o

// t h e SD card ,

s e t

’ P l o t t i n g ’

t o f a l s e . ∗/

bool Saving Command = true ; /∗ I f you do not have an SD Card module or USB Card ,
t h e S k e t c h

you cannot s a v e t h e d a t a . Also ,

would not c o m p i l e .

In t h a t case , change t h e Saving Command t o ’ f a l s e ’ . ∗/

bool p l a y s o u n d = true ; /∗ You can d e f i n e

i f you want

t o a c t i v a t e ( t r u e ) or

d e a c t i v a t e ( f a l s e ) your s o u n d b u z z e r . ∗/

bool E x p e r i m e n t s e t t i n g s = f a l s e ;

/∗ I f you want

t o use t h e sound b u z z e r ,

t h e s e v a r i a b l e s might be r e l e v a n t

f o r your

s e t u p . The T w e a k f a c t o r by d e f a u l t

i s 1 . 0 .

// I f you want

t o p l a y t o n e s

f a s t e r or l o w e r compared t o t h e l a s t QRS i n t e r v a l ,

l o w e r or i n c r e a s e t h e T w e a k f a c t o r . Every 0 . 1

// a c c o u n t s

f o r an i n c r e a s e or d e c r e a s e o f 10% time compared t o t h e o r i g i n a l

h e a r t b e a t . ∗/

f l o a t Tweakfactor = 1 . 0 ; // That
// f l o a t T w e a k f a c t o r = 0 . 7 ; // Used f o r p l a y i n g t h e t o n e s 30% f a s t e r

t h e o r i g i n a l h e a r t b e a t

( d e f a u l t )

i s

than t h e a c t u a l

h e a r t b e a t

// f l o a t T w e a k f a c t o r = 1 . 3 ; // Used f o r p l a y i n g t h e t o n e s 30% s l o w e r than t h e a c t u a l

h e a r t b e a t

int t o n e f r e q = 1 0 0 0 ; // The f r e q u e n c y o f
int t o n e l e n g t h = 2 0 ; // The d u r a t i o n o f

t h e sound

t h e sound i n m i l l i s c o n d s

t h e p i n s a r e d e f i n e d ∗/

/∗ Here a l l
const int t o n e p i n =2;
const int h e a r t P i n = A1 ;
const int S D c h i p S e l e c t = 5 3 ;

/∗ Here ,

t h e most

i m p o r t a n t p a r a m e t e r s

f o r

t h e Pan−Tompkins a l g o r i t h m can be

changed ∗/

#define M
#define N
#define w i n S i z e

5 // Here you can change t h e s i z e f o r

t h e H i g h p a s s

f i l t e r

30 // Here you can change t h e s i z e f o r

t h e Lowpass

f i l t e r

250

// t h i s v a l u e d e f i n e s

t h e w i n d o w s i z e which e f f e c t s

t h e

s e n s i t i v i t y o f

t h e QRS−d e t e c t i o n .

/∗ May need a d j u s t m e n t s d e p e n d i n g on your sample s i z e .

I f you use a l o w e r s a m p l i n g

r a t e , a l o w e r windowSize might y i e l d

b e t t e r

r e s u l t s . ∗/

16

T.J. M¨oller

An Arduino based heartbeat detection device (ArdMob-ECG) for real-time ECG analysis

// ////////////// END OF DECLARATION OF IMPORTANT VARIABLES///////////////////////

// /////////////// A d d i t i o n a l

l i b r a r i e s and d e f i n i t i o n s

t h a t can be changed i f you

know what you a r e d o i n g ////////////////////

#include <ResponsiveAnalogRead . h> // I f you g e t a c o m p i l e r e r r o r here , you do not
l i b r a r y . Go t o ” Tools ” −−> ”Manage l i b r a r i e s ” and copy t h i s name i n
l i b r a r y .
t h e l i b r a r y ,

t h e f i e l d on t h e t o p . Simply i n s t a l l

t h e n you have t h i s

have t h i s

#include <SPI . h>// I f you g e t a c o m p i l e r e r r o r here , you do not have t h i s

l i b r a r y .

Go t o ” Tools ” −−> ”Manage l i b r a r i e s ” and copy t h i s name i n t h e f i e l d on t h e t o p .

Simply i n s t a l l

t h e l i b r a r y ,

t h e n you have t h i s

l i b r a r y .

#include <SD . h>// I f you g e t a c o m p i l e r e r r o r here , you do not have t h i s

l i b r a r y .

Go t o ” T ools ” −−> ”Manage l i b r a r i e s ” and copy t h i s name i n t h e f i e l d on t h e t o p .

Simply i n s t a l l

t h e n you have t h i s
#include <Adafruit GFX . h>// I f you g e t a c o m p i l e r e r r o r here , you do not have t h i s

t h e l i b r a r y ,

l i b r a r y .

l i b r a r y . Go t o ” Too ls ” −−> ”Manage l i b r a r i e s ” and copy t h i s name i n t h e f i e l d on
t h e t o p . Simply i n s t a l l

t h e n you have t h i s

l i b r a r y .

t h e l i b r a r y ,
( ( f l o a t ) 1 / ( f l o a t ) M)

100 // S e t an upper t h r e s h o l d o f BPM f o r a b e t t e r d e t e c t i o n

#define HP CONSTANT
#define MAX BPM

r a t e

#define RAND RES 100000000

ResponsiveAnalogRead a n a l o g ( h e ar t Pi n , true ) ;
F i l e myFile ;
int s a v i n g i n t e r v a l = 0 ; // c r e a t e a v a r i a b l e t h a t c o u n t s s a m p l e s . When an a s p i r e d
f i l e

s a v e t h e d a t a t o t h e . t x t

t h e Arduino w i l l

i s g a t h e r e d ,

number o f

s a m p l e s

t o s a v e c o m p u t a t i o n a l power
int s a v i n g t r e s h o l d = 3 0 0 ; // i f
g a t h e r e d d a t a t o t h e o u t p u t

f l o a t d i f f e r e n c e = 0 ;
f l o a t i n t e r v a l ;

t h i s

t r e s h o l d i s

reached ,

t h e Arduino s a v e s

t h e

f i l e

f o r c a l c u l a t i n g t h e be t we en QRS i n t e r v a l . ∗/

/∗ I m p o r t a n t
int cprTimeRead 1 = 0 ;
int cprTimeRead 2 = 0 ;
int timeCPR = 0 ;
f l o a t CPRSUM;

/∗ Other i m p o r t a n t v a r i a b l e s ∗/
unsigned long c u r r e n t M i l l i s = m i l l i s ( ) ;
unsigned long p r e v i o u s M i l l i s = 0 ;
unsigned long i = 0 ;
int x=0;
int j =0;

17

T.J. M¨oller

An Arduino based heartbeat detection device (ArdMob-ECG) for real-time ECG analysis

int l a s t j =0;
int l a s t y =0;
int LastTime =0;
int ThisTime ;
int n e x t e c g p t ;
int QRS = 0 ;
int tmp = 0 ;

/∗ pre−r e c o r d e d ECG∗/
int s e c g i d x = 0 ;
const int S ECG SIZE = 2 2 6 ;
const f l o a t s e c g [ S ECG SIZE ] =

{ 1 . 5 9 8 4 , 1 . 5 9 9 2 , 1 . 5 9 7 4 , 1 . 5 9 9 6 , 1 . 5 9 7 8 , 1 . 5 9 8 5 , 1 . 5 9 9 2 , 1 . 5 9 7 3 , 1 . 5 9 9 8 , 1 . 5 9 7 6 , 1 . 5 9 8 6 , 1 . 5 9 9 2 , 1 . 5 9 7 2 , 1 . 6 , 1 . 5 9 7 3 , 1 . 5 9 8 9 , 1 . 5 9 9 1 , 1 . 5 9 6 9 , 1 . 6 0 0 6 , 1 . 5 9 6 4 , 1 . 6 , 1 . 5 9 7 9 , 1 . 5 9 9 4 , 1 . 6 6 1 7 , 1 . 7 4 8 3 , 1 . 8 2 3 , 1 . 8 9 4 2 , 1 . 9 5 8 1 , 2 . 0 1 6 7 , 2 . 0 6 3 7 , 2 . 1 0 3 4 , 2 . 1 3 0 9 , 2 . 1 4 8 1 , 2 . 1 6 7 9 , 2 . 1 7 3 9 , 2 . 1 7 0 2 , 2 . 1 5 4 3 , 2 . 1 2 4 3 , 2 . 0 8 8 9 , 2 . 0 3 7 , 1 . 9 8 2 , 1 . 9 1 1 8 , 1 . 8 3 0 5 , 1 . 7 5 3 2 , 1 . 6 5 8 5 , 1 . 6 0 1 3 , 1 . 5 9 7 9 , 1 . 5 9 8 1 , 1 . 5 9 9 6 , 1 . 5 9 7 2 , 1 . 5 9 9 2 , 1 . 5 9 9 , 1 . 5 9 6 6 , 1 . 6 0 1 5 , 1 . 5 9 5 2 , 1 . 6 0 0 8 , 1 . 5 9 8 4 , 1 . 5 9 5 3 , 1 . 6 0 6 , 1 . 5 8 4 1 , 1 . 6 7 9 6 , 1 . 9 5 8 4 , 2 . 2 5 5 9 , 2 . 5 4 2 4 , 2 . 8 3 5 , 3 . 1 2 6 2 , 3 . 4 1 6 7 , 3 . 7 0 6 1 , 4 . 0 0 1 8 , 4 . 2 8 4 6 , 4 . 5 8 5 2 , 4 . 8 6 8 8 , 5 . 1 5 8 6 , 5 . 4 6 8 6 , 5 . 4 6 9 8 , 5 . 1 5 7 9 , 4 . 8 6 8 7 , 4 . 5 8 6 , 4 . 2 8 3 3 , 4 . 0 0 3 1 , 3 . 7 0 5 5 , 3 . 4 1 6 4 , 3 . 1 2 7 4 , 2 . 8 3 3 3 , 2 . 5 4 4 , 2 . 2 5 5 4 , 1 . 9 5 7 2 , 1 . 6 8 3 6 , 1 . 5 6 1 7 , 1 . 5 1 4 3 , 1 . 4 2 2 1 , 1 . 3 5 3 8 , 1 . 2 7 9 1 , 1 . 1 9 5 1 , 1 . 1 3 2 6 , 1 . 0 4 0 7 , 0 . 9 9 4 1 2 , 1 . 0 4 4 5 , 1 . 1 2 6 2 , 1 . 2 0 1 7 , 1 . 2 7 4 4 , 1 . 3 5 4 5 , 1 . 4 2 6 5 , 1 . 5 0 4 4 , 1 . 5 7 8 7 , 1 . 6 0 0 6 , 1 . 5 9 7 9 , 1 . 5 9 8 8 , 1 . 5 9 8 2 , 1 . 5 9 8 9 , 1 . 5 9 8 2 , 1 . 5 9 8 6 , 1 . 5 9 8 7 , 1 . 5 9 8 3 , 1 . 5 9 8 4 , 1 . 5 9 9 2 , 1 . 5 9 6 5 , 1 . 6 0 8 2 , 1 . 6 7 2 6 , 1 . 7 5 5 3 , 1 . 8 2 6 , 1 . 9 0 3 , 1 . 9 7 3 1 , 2 . 0 4 0 7 , 2 . 1 0 7 9 , 2 . 1 6 6 , 2 . 2 2 5 1 , 2 . 2 7 5 4 , 2 . 3 2 1 5 , 2 . 3 6 3 7 , 2 . 3 9 6 , 2 . 4 2 6 8 , 2 . 4 4 7 3 , 2 . 4 6 2 7 , 2 . 4 7 2 5 , 2 . 4 7 2 1 , 2 . 4 6 9 2 , 2 . 4 5 5 7 , 2 . 4 3 7 4 , 2 . 4 1 3 1 , 2 . 3 7 9 7 , 2 . 3 4 4 1 , 2 . 2 9 8 8 , 2 . 2 5 0 6 , 2 . 1 9 6 9 , 2 . 1 3 6 5 , 2 . 0 7 5 7 , 2 . 0 0 6 8 , 1 . 9 3 8 4 , 1 . 8 6 5 2 , 1 . 7 8 9 9 , 1 . 7 1 5 7 , 1 . 6 3 4 6 , 1 . 5 9 6 2 , 1 . 5 9 9 7 , 1 . 5 9 7 9 , 1 . 5 9 8 6 , 1 . 5 9 8 9 , 1 . 5 9 7 8 , 1 . 5 9 9 5 , 1 . 5 9 7 6 , 1 . 5 9 9 1 , 1 . 5 9 8 4 , 1 . 5 9 8 1 , 1 . 5 9 9 3 , 1 . 5 9 7 6 , 1 . 5 9 9 3 , 1 . 5 9 8 2 , 1 . 5 9 8 2 , 1 . 5 9 9 3 , 1 . 5 9 7 5 , 1 . 5 9 9 4 , 1 . 5 9 8 1 , 1 . 5 9 8 3 , 1 . 5 9 9 5 , 1 . 5 9 6 7 , 1 . 6 0 4 9 , 1 . 6 2 4 8 , 1 . 6 4 7 , 1 . 6 6 4 , 1 . 6 7 6 3 , 1 . 6 8 5 1 , 1 . 6 8 5 1 , 1 . 6 8 1 6 , 1 . 6 7 1 2 , 1 . 6 5 5 , 1 . 6 3 7 6 , 1 . 6 1 3 , 1 . 5 9 9 , 1 . 5 9 8 5 , 1 . 5 9 8 2 , 1 . 5 9 8 9 , 1 . 5 9 8 2 , 1 . 5 9 8 6 , 1 . 5 9 8 7 , 1 . 5 9 8 , 1 . 5 9 9 1 , 1 . 5 9 8 , 1 . 5 9 8 7 , 1 . 5 9 8 7 , 1 . 5 9 8 , 1 . 5 9 9 2 , 1 . 5 9 7 9 , 1 . 5 9 8 8 , 1 . 5 9 8 6 , 1 . 5 9 8 , 1 . 5 9 9 2 , 1 . 5 9 7 9 , 1 . 5 9 8 8 , 1 . 5 9 8 6 , 1 . 5 9 8 , 1 . 5 9 9 2 , 1 . 5 9 7 8 , 1 . 5 9 8 9 , 1 . 5 9 8 5 , 1 . 5 9 8 1 , 1 . 5 9 9 2 , 1 . 5 9 7 8 , 1 . 5 9 9 , 1 . 5 9 8 5 , 1 . 5 9 8 1 , 1 . 5 9 9 2 , 1 . 5 9 7 7 , 1 . 5 9 9 , 1 . 5 9 8 4 , 1 . 5 9 8 1 } ;

/∗ t i m i n g v a r i a b l e s ∗/
unsigned long p r e v i o u s M i c r o s = 0 ;
unsigned long foundTimeMicros = 0 ;
unsigned long o l d f o u n d T i m e M i c r o s = 0 ;

// w i l l

s t o r e

l a s t

time LED was u p d a t e d

// time a t which l a s t QRS was found

// time a t which QRS b e f o r e l a s t was

found

unsigned long c u r r e n t M i c r o s
unsigned long RR peak = 0 ;

= 0 ;

// c u r r e n t

time

/∗ i n t e r v a l a t which t o t a k e s a m p l e s and i t e r a t e a l g o r i t h m ( m i c r o s e c o n d s ) ∗/
const long PERIOD = 1000000 / w i n S i z e ;

#define BPM BUFFER SIZE 5
unsigned long bpm buff [ BPM BUFFER SIZE ] = { 0 } ;
int bpm buff WR idx = 0 ;
int bpm buff RD idx = 0 ;

/∗ s e t up v a r i a b l e s

t o use t h e SD u t i l i t y

l i b r a r y f u n c t i o n s : ∗/

Sd2Card c a r d ;

SdVolume volume ;

S d F i l e r o o t ;

void s e t u p ( ) {

S e r i a l . b e g i n ( 1 1 5 2 0 0 ) ;

// SD−Card module Setup and e r r o r d i s p l a y

i f

( Saving Command == true ) {

pinMode ( S D c h i p S e l e c t , OUTPUT) ;

18

T.J. M¨oller

An Arduino based heartbeat detection device (ArdMob-ECG) for real-time ECG analysis

#i f d e f SERIAL USB
while ( ! S e r i a l ) ; // w a i t

#e n d i f

f o r Leonardo enumeration , o t h e r s c o n t i n u e i m m e d i a t e l y

S e r i a l . p r i n t ( ” I n i t i a l i z i n g SD c a r d . . . ” ) ;

i f

( ! c a r d . i n i t ( SPI HALF SPEED , S D c h i p S e l e c t ) ) {

S e r i a l . p r i n t l n ( ” i n i t i a l i z a t i o n f a i l e d . Things t o check : ” ) ;

S e r i a l . p r i n t l n ( ” ∗ i s a c a r d i n s e r t e d ? ” ) ;

S e r i a l . p r i n t l n ( ” ∗ i s your w i r i n g c o r r e c t ? ” ) ;

S e r i a l . p r i n t l n ( ” ∗ d i d you change t h e c h i p S e l e c t p i n t o match your

s h i e l d o r

module ? ” ) ;

while ( 1 ) ;

} e l s e {

S e r i a l . p r i n t l n ( ” Wiring i s

c o r r e c t and a c a r d i s p r e s e n t . ” ) ;

}

i f

( ! SD . b e g i n ( S D c h i p S e l e c t ) ) {

S e r i a l . p r i n t l n ( ” i n i t i a l i z a t i o n f a i l e d ! ” ) ;
while ( 1 ) ;

}
S e r i a l . p r i n t l n ( ” i n i t i a l i z a t i o n done . ” ) ;

myFile = SD . open ( Filename , FILE WRITE) ;

i f

( myFile )

{

S e r i a l . p r i n t l n ( ” F i l e c r e a t e d s u c c e s s f u l l y . ” ) ;
return 1 ;

} e l s e

{

}

S e r i a l . p r i n t l n ( ” E r r o r w h i l e c r e a t i n g f i l e . ” ) ;
return 0 ;

/∗ D e f i n e t h e l a b e l s

f o r your d a t a t r a n s f e r ∗/

myFile . p r i n t l n ( ” Counter , Raw data , QRS detected ” ) ;

myFile . c l o s e ( ) ;

myFile = SD . open ( Filename , FILE WRITE) ;

}

}
void l o o p ( ) {
d e l a y ( 2 ) ;

// Update t h e time ,

r e s e t

t h e QRS d e t e c t i o n and read t h e n e x t v a l u e

c u r r e n t M i c r o s = m i c r o s ( ) ;

p r e v i o u s M i c r o s = c u r r e n t M i c r o s ;
b o o l e a n QRS detected = f a l s e ;

19

T.J. M¨oller

An Arduino based heartbeat detection device (ArdMob-ECG) for real-time ECG analysis

int n e x t e c g p t = analogRead ( h e a r t P i n ) ;

// //////////////////// WRITE DOWN ALL THE VARIABLES THAT SHOULD BE DISPLAYED HERE

//////////////////////////////////////
( E x p e r i m e n t s e t t i n g s == f a l s e ) {
i f
// S e r i a l . p r i n t ( i ++) ; // Sample number

// S e r i a l . p r i n t ( ” , ” ) ;

// S e r i a l . p r i n t ( m i l l i s ( ) ) ; // Sample number

// S e r i a l . p r i n t ( ” , ” ) ;

S e r i a l . p r i n t ( n e x t e c g p t ) ;

S e r i a l . p r i n t ( ” , ” ) ;

S e r i a l . p r i n t l n (QRS) ;

// S e r i a l . p r i n t ( ” , ” ) ;

// S e r i a l . p r i n t l n ( RR peak ) ;

}

/∗ //////////////////DEFINE WHICH VARIABLES YOU WANT TO TRANSFER TO THE SD CARD

EVERY ITERATION .

IF YOU WANT TO ADD MORE

// VARIABLES, ADD myFile . PRINT( ’ your d a t a t y p e ’ ) ; FOLLOWED BY myFile . p r i n t ( ” , ” ) ;

////////////////////////////////////// ∗/

( Saving Command == true ) {

i f
i f ( myFile ) {
myFile . p r i n t ( i ++) ; // Sample number
myFile . p r i n t ( ” , ” ) ;

myFile . p r i n t ( m i l l i s ( ) ) ; // Sample number

myFile . p r i n t ( ” , ” ) ;

myFile . p r i n t ( n e x t e c g p t ) ; // Raw ECG d a t a

myFile . p r i n t ( ” , ” ) ;

myFile . p r i n t (QRS) ; // D e c i s i o n i f QRS complex was d e t e c t e d ( b i n a r y )

myFile . p r i n t ( ” , ” ) ;

myFile . p r i n t l n ( RR peak ) ;

s a v i n g i n t e r v a l ++; // Add a t o k e n t o t h e s a v i n g i n t e r v a l

/∗ For performance r e a s o n s ,

t h e d a t a w i l l be o n l y s a v e d e v e r y 300 s a m p l e s ( around

e v e r y 0 . 7 5 s e c o n d s ) . Can be changed by c h a n g i n g t h e s a v i n g t h r e s h o l d

s a v i n g i n t e r v a l ++; // Add a t o k e n t o t h e s a v i n g i n t e r v a l ∗/

i f

( s a v i n g i n t e r v a l > s a v i n g t r e s h o l d ) {

s a v i n g i n t e r v a l = 0 ;

myFile . f l u s h ( ) ;

myFile . c l o s e ( ) ;

myFile = SD . open ( Filename , FILE WRITE) ;

}

20

T.J. M¨oller

An Arduino based heartbeat detection device (ArdMob-ECG) for real-time ECG analysis

}

}
/∗ I f a QRS i s

QRS”) ) ∗/

found here ,

i t can be send t o an i n t e r f a c e e . g . Unity 3D ( sendData (”

// g i v e n e x t d a t a p o i n t

t o a l g o r i t h m

QRS detected = d e t e c t ( n e x t e c g p t ) ;

i f ( QRS detected == f a l s e ) {
QRS = 0 ;

}
e l s e i f ( QRS detected == true ) {
foundTimeMicros = m i c r o s ( ) ;

RR peak = m i l l i s ( ) ;

( E x p e r i m e n t s e t t i n g s == true ) {

i f
S e r i a l . p r i n t l n (QRS) ; }
i f
QRS = 4 0 0 ; }
e l s e i f

( P l o t t i n g == true ) {

( P l o t t i n g == f a l s e ) {

QRS = 1 ; }

// S e r i a l . p r i n t l n (QRS) ;

// d e l a y ( 1 0 ) ;

sendData ( ”QRS” ) ;
cprTimeRead 2 = cprTimeRead 1 ;
cprTimeRead 1 = m i l l i s ( ) ;

CPRSUM = cprTimeRead 1−cprTimeRead 2 ;

i n t e r v a l = CPRSUM∗ Tweakfactor ;

}

/∗ Here ,

t h e t o n e w i l l be p l a y e d a c c o r d i n g t o i t s T w e a k f a c t o r ∗/

i f ( ( d i f f e r e n c e > i n t e r v a l ) && ( p l a y s o u n d == true ) ) {
t o n e ( t o n e p i n ,

t o n e l e n g t h ) ;

t o n e f r e q ,

p r e v i o u s M i l l i s = m i l l i s ( ) ;

}

d i f f e r e n c e = m i l l i s ( ) − p r e v i o u s M i l l i s ;

}

/∗ This

s e c t i o n c o n t a i n s

t h e Pan−Tompkins a l g o r i t h m and i s a d a p t e d from h t t p s : / /

g i t h u b . com/ b l a k e M i l n e r / r e a l t i m e Q R S d e t e c t i o n

P o r t i o n p e r t a i n i n g t o Pan−Tompkins QRS d e t e c t i o n ∗/

// c i r c u l a r b u f f e r

f o r

i n p u t e c g s i g n a l

21

T.J. M¨oller

An Arduino based heartbeat detection device (ArdMob-ECG) for real-time ECG analysis

// we need t o k e e p a h i s t o r y o f M + 1 s a m p l e s
f l o a t e c g b u f f [M + 1 ] = { 0 } ;
int e c g b u f f W R i d x = 0 ;
int e c g b u f f R D i d x = 0 ;

f o r HP f i l t e r

// c i r c u l a r b u f f e r

f o r

i n p u t e c g s i g n a l

// we need t o k e e p a h i s t o r y o f N+1 s a m p l e s
f l o a t h p b u f f [N + 1 ] = { 0 } ;
int hp buff WR idx = 0 ;
int h p b u f f R D i d x = 0 ;

f o r LP f i l t e r

// LP f i l t e r o u t p u t s a s i n g l e p o i n t

f o r e v e r y i n p u t p o i n t

// This g o e s
f l o a t n e x t e v a l p t = 0 ;

s t r a i g h t

t o a d a p t i v e

f i l t e r i n g

f o r e v a l

// running sums f o r HP and LP f i l t e r s , v a l u e s
f l o a t hp sum = 0 ;
f l o a t lp sum = 0 ;

s h i f t e d i n FILO

f o r a d a p t i v e t h r e s h o l d i n g

// w o r k i n g v a r i a b l e s
f l o a t t r e s h o l d = 0 ;
b o o l e a n t r i g g e r e d = f a l s e ;
int t r i g t i m e = 0 ;
f l o a t win max = 0 ;
int w i n i d x = 0 ;

// number o f
int n u m b e r i t e r = 0 ;

s t a r t i n g i t e r a t i o n s , used d e t e r m i n e when moving windows a r e f i l l e d

b o o l e a n d e t e c t ( f l o a t n e w e c g p t ) {
// copy new p o i n t

i n t o c i r c u l a r b u f f e r ,

i n c r e m e n t

i n d e x

e c g b u f f [ e c g b u f f W R i d x++] = n e w e c g p t ;

e c g b u f f W R i d x %= (M+1) ;

/∗ High p a s s
i f ( n u m b e r i t e r < M) {

f i l t e r i n g ∗/

// f i r s t

f i l l

b u f f e r w i t h enough p o i n t s

f o r HP f i l t e r

hp sum += e c g b u f f [ e c g b u f f R D i d x ] ;

h p b u f f [ hp buff WR idx ] = 0 ;

}

e l s e {

hp sum += e c g b u f f [ e c g b u f f R D i d x ] ;

22

T.J. M¨oller

An Arduino based heartbeat detection device (ArdMob-ECG) for real-time ECG analysis

tmp = e c g b u f f R D i d x − M;
i f ( tmp < 0 ) tmp += M + 1 ;

hp sum −= e c g b u f f [ tmp ] ;

f l o a t y1 = 0 ;
f l o a t y2 = 0 ;

tmp = ( e c g b u f f R D i d x − ( (M+1) / 2 ) ) ;
i f ( tmp < 0 ) tmp += M + 1 ;

y2 = e c g b u f f [ tmp ] ;

y1 = HP CONSTANT ∗ hp sum ;

h p b u f f [ hp buff WR idx ] = y2 − y1 ;

}

// done r e a d i n g ECG b u f f e r ,

i n c r e m e n t p o s i t i o n

e c g b u f f R D i d x ++;

e c g b u f f R D i d x %= (M+1) ;

// done w r i t i n g t o HP b u f f e r ,
hp buff WR idx++;

hp buff WR idx %= (N+1) ;

i n c r e m e n t p o s i t i o n

/∗ Low p a s s

f i l t e r i n g ∗/

// s h i f t

i n new sample from h i g h p a s s

f i l t e r

lp sum += h p b u f f [ h p b u f f R D i d x ] ∗ h p b u f f [ h p b u f f R D i d x ] ;

i f ( n u m b e r i t e r < N) {

// f i r s t

f i l l

b u f f e r w i t h enough p o i n t s

f o r LP f i l t e r

n e x t e v a l p t = 0 ;

}

e l s e {

// s h i f t o u t o l d e s t d a t a p o i n t

tmp = h p b u f f R D i d x − N;
i f ( tmp < 0 ) tmp += (N+1) ;

23

T.J. M¨oller

An Arduino based heartbeat detection device (ArdMob-ECG) for real-time ECG analysis

lp sum −= h p b u f f [ tmp ] ∗ h p b u f f [ tmp ] ;

n e x t e v a l p t = lp sum ;

}

// done r e a d i n g HP b u f f e r ,

i n c r e m e n t p o s i t i o n

h p b u f f R D i d x++;

h p b u f f R D i d x %= (N+1) ;

/∗ A d a p a t i v e t h r e s h o l d i n g b e a t d e t e c t i o n ∗/

i n i t i a l

// s e t
i f ( n u m b e r i t e r < w i n S i z e ) {

t h r e s h o l d

i f ( n e x t e v a l p t > t r e s h o l d ) {
t r e s h o l d = n e x t e v a l p t ;

}

}

n u m b e r i t e r ++;

// c h e c k i f d e t e c t i o n h o l d o f f p e r i o d has p a s s e d
i f ( t r i g g e r e d == true ) {

t r i g t i m e ++;

i f ( t r i g t i m e >= 1 0 0 ) {
t r i g g e r e d = f a l s e ;
t r i g t i m e = 0 ;

}

}

// f i n d i f we have a new max
i f ( n e x t e v a l p t > win max ) win max = n e x t e v a l p t ;

// f i n d i f we a r e a bove a d a p t i v e t h r e s h o l d
i f ( n e x t e v a l p t > t r e s h o l d && ! t r i g g e r e d ) {

t r i g g e r e d = true ;
return true ;

}

// e l s e we ’ l l

f i n i s h t h e f u n c t i o n b e f o r e r e t u r n i n g FALSE,

// t o p o t e n t i a l l y change t h r e s h o l d

// a d j u s t a d a p t i v e t h r e s h o l d u s i n g max o f

s i g n a l

found

// i n p r e v i o u s window

24

T.J. M¨oller

An Arduino based heartbeat detection device (ArdMob-ECG) for real-time ECG analysis

i f ( w i n i d x++ >= w i n S i z e ) {

// w e i g h t i n g f a c t o r

f o r d e t e r m i n i n g t h e c o n t r i b u t i o n o f

// t h e c u r r e n t peak v a l u e t o t h e t h r e s h o l d a d j u s t m e n t
f l o a t gamma = 0 . 4 ;

// f o r g e t t i n g f a c t o r −

// r a t e a t which we f o r g e t o l d o b s e r v a t i o n s

// c h o o s e a random v a l u e b e twe en 0 . 0 1 and 0 . 1 f o r
( ( f l o a t ) random ( 0 , RAND RES) / ( f l o a t )

f l o a t a l p h a = 0 . 1 + (
( ( 0 . 1 − 0 . 0 1 ) ) ) ;

t h i s ,

(RAND RES) ) ∗

// compute new t h r e s h o l d

t r e s h o l d = a l p h a ∗ gamma ∗ win max + ( 1 − a l p h a ) ∗ t r e s h o l d ;

// r e s e t c u r r e n t window i n d e x

w i n i d x = 0 ;

win max = −10000000;

}

// r e t u r n f a l s e

i f we d i d n ’ t d e t e c t a new QRS

return f a l s e ;

}

// When you want

t o send t h e d a t a t o an i n t e r f a c e ,

i t can be done here , b u t

i t

i s

p o s s i b l e t h r o u g h t h e normal S e r i a l . p r i n t command ,

t o o .

void sendData ( S t r i n g data ) {

#i f d e f SERIAL USB

S e r i a l . p r i n t l n (QRS) ; // need a end−l i n e b e c a u s e wrmlh . c s h a r p use r e a d L i n e method

t o r e c e i v e d a t a

// s e r i a l P o r t . ReadTimeout = 1 ;

// d e l a y ( 1 ) ; // Choose your d e l a y h a v i n g i n mind your ReadTimeout

i n Unity3D

#endif

}

25

T.J. M¨oller

An Arduino based heartbeat detection device (ArdMob-ECG) for real-time ECG analysis

Appendix B. Unity Code

using UnityEngine ;
using System . C o l l e c t i o n s ;
using System . IO . P o r t s ;

public c l a s s Arduino Read : MonoBehaviour

{

S e r i a l P o r t
public s t a t i c s t r i n g QRS;

sp = new S e r i a l P o r t ( ”COM5” , 1 1 5 2 0 0 ) ;

void S t a r t ( )
{

sp . Open ( ) ;

sp . ReadTimeout = 1 ;

}

void Update ( )
{

try

{

QRS = sp . ReadLine ( ) ;

p r i n t ( sp . ReadLine ( ) ) ;

}
catch ( System . E x c e p t i o n )
{
}

}

}

26

