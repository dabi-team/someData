Exploring The Resilience of Control Execution Skips against
False Data Injection Attacks
Sunandan Adhikary
Indian Institute of Technology,
Kharagpur
India
mesunandan@kgpian.iitkgp.ac.in

Ipsita Koley
Indian Institute of Technology,
Kharagpur
India
ipsitakoley@iitkgp.ac.in

Soumyajit Dey
Indian Institute of Technology,
Kharagpur
India
soumya@cse.iitkgp.ac.in

2
2
0
2

l
u
J

6
1

]

Y
S
.
s
s
e
e
[

1
v
5
0
0
8
0
.
7
0
2
2
:
v
i
X
r
a

ABSTRACT
Modern Cyber-Physical Systems (CPSs) are often designed as net-
worked, software-based controller implementations which have
been found to be vulnerable to network-level and physical level
attacks. A number of research works have proposed CPS-specific
attack detection schemes as well as techniques for attack resilient
controller design. However, such schemes also incur platform-level
overheads. In this regard, some recent works have leveraged the
use of skips in control execution to enhance the resilience of a CPS
against false data injection (FDI) attacks. However, skipping the
control executions may degrade the performance of the controller.
In this paper, we provide an analytical discussion on when and
how skipping a control execution can improve the system’s re-
silience against FDI attacks while maintaining the control perfor-
mance requirement. We also propose a methodology to synthesize
such optimal control execution patterns. To the best of our knowl-
edge, no previous work has provided any quantitative analysis
about the trade-off between attack resilience and control perfor-
mance for such aperiodic control execution. Finally, we evaluate
the proposed method on several safety-critical CPS benchmarks.

KEYWORDS
CPS, control execution skips, security, attack resilient system, con-
trol performance

1 INTRODUCTION
Deployment of network components in cyber-physical systems
(CPSs) along with software-based, sophisticated control implemen-
tations have found wide applicability ranging from industrial con-
trol, connected-mobility to defense installations. However, such
advancements have opened up different possible attack surfaces
leading to network-level as well as physical-level attacks. Numer-
ous such attacks on safety-critical CPSs have been reported in the
past, for example, Stuxnet[7], Maroochy water breach attack[17],
Black energy attack[13], attacks in automotive domain[2, 4], etc.

In this work, we consider a type of attack called false data injec-
tion (FDI). Networked control CPSs are designed as a closed-loop
where the controller receives the measurements from the plant,
computes the control signal such that the plant operates at/near
the desired reference point and sends the control signal to the plant.
Sometimes, all the states of the plant can not be measured and an
observer (like Kalman filter) is used at the controller end to estimate
the states of the plant. As the closed loop communication happens
over a network, an external or internal attacker can malign the sen-
sor measurements and/or the control signals physically or through

the network. In such FDI attacks, the controller and the plant do
not receive actual data, leading to instability or performance loss.
Till date the best defence mechanism against FDI attacks is to
use cryptographic methods. However, the major hindrance to their
application is the computation and communication loads incurred
by these methods [8, 12]. An alternate solution that can be found
in literature is to use residue-based light-weight attack detection
methods [6, 11, 19] interleaved with traditional cryptographic tech-
niques instead of using the latter continuously [1, 5]. A typical FDI
attack can not maintain its stealthiness while the transmitted data
is secured with cryptographic methods. On the other hand, the
statistical nature of the residue-based detectors take some time to
detect an FDI attack with higher probability. A smart attacker can
intelligently craft the worst-possible FDI attack that can bypass the
residue-based attack detectors when cryptographic methods are
not active [1, 19]. Therefore, irrespective of what security enforce-
ment is in place (whether the combination of cryptographic method
and residue-based detection or continuous use of cryptographic
method), the FDI attacks can significantly affect the system’s per-
formance. Thus, the question that rises in this context is how to
make the system more resilient against FDI attacks? In this paper,
our objective is to address this question.

The authors of [1] were the first to explore the skipping of some
control executions to enhance system’s resilience against stealthy
FDI attacks while it is not detected. Pattern-based execution of
controller where some of the instances of control executions are
dropped or skipped was initially studied to accommodate multi-
ple tasks on resource constrained embedded platforms [3, 9, 18].
Skipping or dropping a control execution at a certain sampling
instance means no new control input will be computed or commu-
nicated at that instance. So, the processor and the communication
channel between the plant and controller both will also be free
during that sampling instance. It is evident that the FDIs during
skips are rendered ineffective. Thus, this can restrain the effective-
ness of attacker’s effort by enhancing system’s resilience. But this
skipping of control execution may degrade the performance of the
control system. To address this, a minimum rate of control execution
is required to maintain the desired control performance [3]. Con-
straining this minimum rate of control execution, the authors of
[1] developed a formal methodology-based approach to synthesize
control execution-skipping sequences to enhance system security
and safety. However, the major limitations of their approach is that,
it does not relate the position of control skips with the dynamics
of the system under attack, and the SMT-based attack and control
execution pattern synthesis might not scale for systems with larger

 
 
 
 
 
 
Conference’17, July 2017, Washington, DC, USA

Ipsita Koley, Sunandan Adhikary, and Soumyajit Dey

dimension. Also, if the position of control execution skips are not
chosen wisely, the performance of the controller may degrade.

Similar to [1], we also utilize the skipping of control executions
to enhance the resilience of the system under attack which may
seem counter-intuitive as control performance may degrade due to
execution skips. However, the safety-critical CPSs mostly operate at
higher sampling rate. The desired performance of such fast systems
can be maintained if we can judiciously choose when to skip the
control executions. Such control execution skips in turn will ignore
that attacks injected at those sampling instances.

In this work, we theoretically analyse and establish analytical
conditions under which execution skips will surely be beneficial
in terms of enhancing the system’s resilience against FDI attacks.
We present a methodology to synthesize the most optimal attack-
resilient control execution sequence that also ensures the desired
performance. We provide an automated CAD tool-chain to generate
such control execution sequences given any CPS. To this end, we
now summarize the contributions of this work as follows.

(1) Given the specifications of a safety-critical CPS and its ini-
tial region, we formulate a constraint solving problem to
generate the optimal or worst case FDI attack sequence that
consumes minimum time to make the system unsafe.
(2) We theoretically derive under which criteria the control
execution skips will actually be favourable in enhancing
system’s resilience against FDI attacks.

(3) Utilizing the conditions established in previous contribu-
tion, we design a dynamic programming (DP) based solution
methodology to synthesize the control execution patterns
that ensure desired control performance as well as the best
possible attack-resilience against optimal FDI attacks gener-
ated in contribution 1 .

(4) We provide an automated CAD tool that takes as input the
CPS specification and synthesizes resilient control execu-
tion patterns for the same. The scalability of the proposed
methodology has been evaluated on well known benchmarks
with various dimensions.

Figure 1: Secure CPS architecture

2 BACKGROUND
Secure CPS Model: General architecture of a secure CPS is pre-
sented in Fig. 1. The physical process i.e. the plant and the con-
troller work together in a closed loop manner such that the desired

operating criteria of the physical process is maintained. They com-
municate between themselves over a network, which we consider
is vulnerable to FDI attacks. In the absence of an adversary, the
closed loop dynamics of a CPS can be presented as a discrete linear
time-invariant (LTI) system like the following.

𝑥𝑘+1 = 𝐴𝑥𝑘 + 𝐵𝑢𝑘 + 𝑤𝑘 ; 𝑦𝑘 = 𝐶𝑥𝑘 + 𝑣𝑘 ; ˆ𝑦𝑘+1 = 𝐶 (𝐴 ˆ𝑥𝑘 + 𝐵𝑢𝑘 );
𝑟𝑘+1 = 𝑦𝑘+1 − ˆ𝑦𝑘+1; ˆ𝑥𝑘+1 = 𝐴 ˆ𝑥𝑘 + 𝐵𝑢𝑘 + 𝐿𝑟𝑘+1; 𝑢𝑘 = −𝐾 ˆ𝑥𝑘 ; 𝑒𝑘 = 𝑥𝑘 − ˆ𝑥𝑘 ; (1)
Here, 𝑥𝑘 ∈ R𝑛 is the system state vector, 𝑦𝑘 ∈ R𝑚 is the measure-
ment vector obtained from available sensors at 𝑘-th time stamp;
𝐴, 𝐵, 𝐶 are the system matrices. We consider that the initial state
𝑥0 ∈ N ( ¯𝑥0, Σ), the process noise 𝑤𝑘 ∈ R𝑛 ∼ N (0, Σ𝑤) and the
measurement noise 𝑣𝑘 ∈ R𝑚 ∼ N (0, Σ𝑣) are independent Gaussian
random variables. Further, in every 𝑘-th sampling instant, the ob-
servable system state ˆ𝑥𝑘 is estimated using system output 𝑦𝑘 while
minimizing the effect of noise, and used for computing the control
input 𝑢𝑘 ∈ R𝑙 . The estimation error 𝑒𝑘 is defined as the difference
between actual system states 𝑥𝑘 and estimated system states ˆ𝑥𝑘 . We
denote the residue i.e. the difference between the measured and the
estimated outputs as 𝑟𝑘 . The estimator gain 𝐿 and controller gain
𝐾 are designed in such a way that it is ensured both (𝐴 − 𝐿𝐶) and
(𝐴 − 𝐵𝐾) are stable. As security enforcement, we consider a spo-
radic implementation of some cryptographic method along with a
residue-based detector as demonstrated in Fig. 1. The residue-based
detector computes a function 𝑓 (𝑟𝑘 ) (𝑓 can be a simple norm or any
statistical method, like 𝜒 2-test) and compares it with a threshold
𝑇ℎ to identify any anomalous behavior of the system.

Consider an FDI attack, where the attacker injects false data
𝑎𝑦
and 𝑎𝑢
(Fig. 1) to the sensor measurement and control signal
𝑘
𝑘
respectively when the cryptographic method is not active (see
Fig. 1). In such scenario, the system dynamical equation becomes,

𝑘

(2)

𝑘 ; 𝑒𝑎

𝑘 + 𝑎𝑢

𝑘 = 𝑥𝑎

𝑘 − ˆ𝑥𝑎
𝑘 ;

𝑘 + 𝐵𝑢𝑎

𝑘 + 𝐵 ˜𝑢𝑎

𝑘 + 𝐵𝑢𝑎
, 𝑟 𝑎
, 𝑦𝑎
𝑘
𝑘

𝑘 + 𝑤𝑘 ; 𝑦𝑎
𝑘 ); 𝑟 𝑎
𝑘 + 𝐿𝑟 𝑎
, 𝑢𝑎
𝑘

𝑘 = 𝐶𝑥𝑎
𝑘+1 = 𝑦𝑎
𝑘+1; 𝑢𝑎
, ˜𝑢𝑎
𝑘

𝑥𝑎
𝑘+1 = 𝐴𝑥𝑎
ˆ𝑦𝑎
𝑘+1 = 𝐶 (𝐴 ˆ𝑥𝑎
𝑘+1 = 𝐴 ˆ𝑥𝑎
ˆ𝑥𝑎
, ˆ𝑥𝑎
𝑘

𝑘 + 𝑣𝑘 + 𝑎𝑦
𝑘+1 − ˆ𝑦𝑎
𝑘+1
𝑘 = 𝑢𝑎
˜𝑢𝑎
𝑘 = −𝐾 ˆ𝑥𝑎
𝑘 ;
Here, 𝑥𝑎
, and 𝑒𝑎
represent plant state, estimated
𝑘
𝑘
plant state, forged sensor data, residue, control signal, forged control
signal, and estimation error respectively in an FDI attack scenario.
𝑢𝑎
is the control input computed at 𝑘-th sampling instance on
𝑘
which the effect previous attacks i.e. 𝑎𝑢
𝑖 for 1 ≤ 𝑖 ≤ 𝑘 − 1
persist. 𝑢𝑎
at 𝑘-th sample produces
𝑘
˜𝑢𝑎
i.e. the forged control signal at 𝑘-th sample. Note that even
𝑘
though we discussed about intrusion through network, physical
level sensor data tampering [16] can also happen. The above attack
model is generic to all kind of such falsification attacks. We denote
an attack vector at 𝑘-th sampling instance as A [𝑘] = [𝑎𝑢
𝑘 ]𝑇 .
𝑘
If the attacker continues the false data injection for 𝑙 sampling
iterations, then the 𝑙 length attack vector is expressed as follows

added with attack on actuator 𝑎𝑢
𝑘

𝑖 and 𝑎𝑦

, 𝑎𝑦

(cid:20)𝑎𝑢
1
𝑎𝑦
1

· · ·
· · ·

(cid:21)

𝑎𝑢
𝑙
𝑎𝑦
𝑙

. Falsifying the control

A𝑙 = [A [1] · · · A [𝑙]] =
input by injecting a sequence of 𝑎𝑢 ’s, the attacker forces the states
of the system to go beyond the safety limit. On the other hand, it
modifies the sensor measurements with a sequence of 𝑎𝑦’s such
that it can hide itself from the residue based detector. We define
such stealthy FDI attack vector as follows.

Exploring The Resilience of Control Execution Skips against False Data Injection Attacks

Conference’17, July 2017, Washington, DC, USA

(cid:21)

Definition 1 (Stealthy false data injection attack). An at-

𝑎𝑢
(cid:20)𝑎𝑢
1
𝑙
𝑎𝑦
𝑎𝑦
1
𝑙
𝑘 ) < 𝑇ℎ ∀𝑘 ∈ [1, 𝑙] where 𝑟 𝑎
𝑘 is the residue
□

tack vector A𝑙 = [A [1] · · · A [𝑙]] ==
said to be stealthy if 𝑓 (𝑟 𝑎
generated due the attack vector A𝑙 at 𝑘-th sampling instance.
Control Execution Skip Pattern: When we say that a control
execution is skipped in a certain 𝑘-th sampling instance, the impli-
cation of the same on the underlying system are as follows.

of length 𝑙 is

· · ·
· · ·

(1) The sensor measurements 𝑦𝑘 are not communicated to the

controller unit.

(2) A fresh control input 𝑢𝑘 is not calculated and communicated
to the plant. The plant updates its states simply using the
previous control input

(3) Detection unit will also not operate.

We consider that such skips in control execution shall be regular
leading to a pattern in lines of [3]. This is naturally required for
deterministic system design and deployment. We provide a formal
definition of control execution skipping pattern.

Figure 2: Implication of control skip pattern on the system

Definition 2 (Control Execution Skip Pattern). A 𝑡 length
control execution skip pattern for a given control loop (𝐴, 𝐵, 𝐶, 𝐾, 𝐿),
is a sequence 𝜌 ∈ {0, 1}𝑡 such that it can be used to define an infinite
length control execution sequence 𝜋, repeating with period 𝑡, defined
as, 𝜋 [𝑘] = 𝜋 [𝑘 + 𝑡] = 𝜌 [𝑘%𝑡], ∀𝑘 ∈ Z+ where 𝐴, 𝐵, and 𝐶 are system
matrices, 𝐾 is the controller gain, and 𝐿 is the observer gain of the
□
system. [3].
Symbolically, a pattern can be denoted as (1𝑘 0𝑙 )𝑡 where 𝑘, 𝑡 >
0 and 𝑙 ≥ 0. In a pattern 𝜌, 1 denotes control execution and 0
denotes control execution skip. Some examples of patterns are 1𝑡 =
(periodic execution i.e. 0 skip), (10)𝑡 = 101010 · · · , 111001010 · · · ,
etc. Consider that there is a skip in control execution at (𝑘 + 1)-th
sample as demonstrated in Fig. 2. Then according to skip properties,
𝑢𝑘 = 𝑢𝑘−1, 𝑎𝑢
, and △𝑟𝑘+1 = 0. Therefore, plant state 𝑥𝑘+1 at
(𝑘 + 1)-th sample will be updated by old control input i.e. 𝑢𝑘−1. The
notion of skip changes the system dynamics like the following.

𝑘 = 𝑎𝑢

𝑘−1

𝑘 + 𝐵 (𝑢𝑎

𝑘+1 = 𝐴 ˆ𝑥𝑎
𝑘−1 + 𝑎𝑢
𝑘+1 = 𝐴𝑥𝑎
𝑥𝑎
𝑥𝑘+1 = 𝐴𝑥𝑘 + 𝐵𝑢𝑘−1 + 𝑤𝑘 ; ˆ𝑥𝑘+1 = 𝐴 ˆ𝑥𝑘 + 𝐵𝑢𝑘−1;
𝑘+1 = 𝐴𝑒𝑎
𝑒𝑎

𝑘−1 + 𝑤𝑘 ; 𝑒𝑘+1 = 𝐴𝑒𝑘 + 𝑤𝑘 ;

𝑘−1) + 𝑤𝑘 ; ˆ𝑥𝑎

𝑘 + 𝐵𝑎𝑢

𝑘 + 𝐵𝑢𝑎

𝑘−1;

(3)

Control Performance: In this work, we define the control perfor-
mance with respect to the settling time 𝑇𝑠 of a system. Settling
time is the duration within which the system output must reach

and stay within 2% band of the reference. To ensure the desired
performance while some of the control executions are skipped, the
control execution must maintain the minimum rate 𝑟𝑚𝑖𝑛 [3] such
that the settling time property can be achieved. For example, in a
window of 𝑡 samples, the controller must be executed ⌈𝑡 × 𝑟𝑚𝑖𝑛⌉
times. This implies in a control execution skip pattern 𝜌 of length
𝑡, there must be at least ⌈𝑡 × 𝑟𝑚𝑖𝑛⌉ 1’s.

3 PROBLEM FORMULATION
A Motivating example: In this section, we demonstrate how oc-
casional skips in control execution improve the system’s resilience
against FDI attacks with help of a motivating example (Fig. 3). We
take an example of trajectory tracking control (TTC) system of a
vehicle from [1]. This is a 2-dimensional system with the 𝑑𝑒𝑣𝑖𝑎𝑡𝑖𝑜𝑛
from the reference trajectory and 𝑣𝑒𝑙𝑜𝑐𝑖𝑡𝑦 of the vehicle as states.
Attacker adds false data to the measurement data(i.e. deviation)
and the control signal(i.e. acceleration). In Fig. 3a, the attacks on

(a) Attack vector and control skip
pattern

(b) Effect of pattern on state 1

(c) Effect of pattern on state 2

(d) Effect of pattern on estimation
error

Figure 3: Demonstrating the effect of control skip pattern on
system’s resilience against FDI attacks

measurement 𝑎𝑦 and control signal 𝑎𝑢 are given. We design a con-
trol skip pattern 𝜌 by introducing drops in control executions with
an intention to weaken the attack’s effect. Thus, we inject the skip
where the attack on actuation ||𝑎𝑢 || increases (green bar graph in
Fig. 3a). The minimum execution rate of the controller is also more
than the requirement i.e. 50% [1]. The effect of introducing drops in
the presence of the attacker is presented in Fig. 3b-3d. We can ob-
serve that when the attacker injects optimal attack values (Fig. 3a),
there is significant deviation in system’s state progression (Fig. 3b
and 3c) when periodic control execution takes place. However, due
to introduction of drops in the control execution, FDIs rendered
ineffective on system’s state progression (Fig. 3b and 3c) in case of
aperiodic control execution. This is because the FDIs in periodic
execution increases the estimation error 𝑒𝑎 considerably (Fig. 3d).
This in turn affects the control performance poorly (According to
Eq. 2). On the other hand, ignorance of the attack values on actua-
tion signal during drops minimizes the attack’s effect on 𝑒𝑎, thereby
contains 𝑒𝑎 within much lower range (Fig. 3d). Thus, we can see
the aperiodic control execution following the pattern 𝜌( Fig. 3a)
enhances TTC’s resilience against the FDI attack given in Fig. 3a.

01020Samples-20020attack0510patternayau510152025Samples-20020xa[1]periodicaperiodic510152025Samples-2002040xa[2]periodicaperiodic510152025Samples0510||ea||1periodicaperiodicConference’17, July 2017, Washington, DC, USA

Ipsita Koley, Sunandan Adhikary, and Soumyajit Dey

Keeping in mind the stealthy FDI attack and its effect on system’s
state progression, how to generate the pattern to weaken the at-
tack effect most effectively, is discussed in Sec. 4. In the following
section, we provide a quantitative analysis behind such motivation
of this work.
Analysing effect of execution skips : During execution skips,
the attacks on sensor data and control signal are ignored. This
seems useful with respect to attack resiliency. But, during control
execution skips no new control input is computed and communi-
cated to the plant. The plant updates its states using the previous
control input. This may lead to poor control performance. Naturally,
there exists a trade-off between resilience against attack and the
amount of control performance to forego during skips. Our aim is
to provide a formal discussion on when and how skips can improve
the resilience against FDI attacks and at the same time desirable
control performance is maintained when the control execution is
aperiodic. First, to capture the difference in system’s response in
presence and absence of FDI attacks in case of periodic control
execution, we introduce the following two terms:

△𝑒𝑘 = 𝑒𝑎

𝑘 − 𝑒𝑘 = (𝐴 − 𝐿𝐶𝐴) △𝑒𝑘 + (𝐵 − 𝐿𝐶𝐵)𝑎𝑢

𝑘 − 𝐿𝑎𝑦
𝑘+1

= 𝐴△𝑒𝑘 + 𝐵𝑎𝑢

𝑘 − 𝐿 △𝑟𝑘+1 =

𝑘−1
∑︁

△𝑟𝑘 = 𝑟 𝑎

𝑘 − 𝑟𝑘 = 𝐶𝐴△𝑒𝑘 + 𝐶𝐵𝑎𝑢

𝑖=0
𝑘 + 𝑎𝑦
𝑘+1

𝐴𝑖 (𝐵𝑎𝑢

𝑘−1−𝑖 − 𝐿 △𝑟𝑘−𝑖 ) ( △𝑒0 = 𝑎𝑦

0 = 0) (4)

(5)

Here, △𝑒 and △𝑟 present how much the estimation error and residue
vary due to the FDI attack. Let us consider, there is a skip in control
execution at (𝑘 + 1)-th sample. Then following Eq. 3 we get,

△𝑒𝑘+1 = 𝑒𝑎

𝑘+1 − 𝑒𝑘+1 = (𝐴𝑒𝑎

𝑘 + 𝐵𝑎𝑢

𝑘−1 + 𝑤𝑘 ) − (𝐴𝑒𝑘 + 𝑤𝑘 );

= 𝐴△𝑒𝑘 + 𝐵𝑎𝑢

𝑘−1

△𝑟𝑘+1 = 0

(6)

(7)

Now, to show whether the execution skips actually enhance
the resilience of the system against FDI attacks, we compare two
parameters: i) △𝑒𝑝
i.e. estimation error deviation after (𝑘 + 𝑙)
𝑘+𝑙
periodic executions and ii) △𝑒𝑎𝑝
i.e. estimation error deviation
𝑘+𝑙
after 𝑘 periodic executions followed by 𝑙 control execution drops.
This is demonstrated in Fig. 2. The control execution is periodic
during 1st 𝑘 samples. The closed loop system progresses following
Eq. 2. At (𝑘 + 1)-th sample when the control execution is dropped,
measurement of that sampling instance 𝑦𝑎
is not transmitted, the
𝑘
control input 𝑢𝑎
is neither computed and transmitted, and the
𝑘
state progresses with last received control signal ˜𝑢𝑎
(Eq. 3). This
𝑘
is continued till (𝑘 + 𝑙)-th sample. Once, the controller receives
new measurement at (𝑘 + 𝑙 + 1)-th sample, the sensor measurement
𝑦𝑎
is again
𝑘+𝑙+1
computed using 𝑦𝑎
(Eq. 2) and transmitted to the plant. The
plant updates its states following Eq. 2 using new control input.
Now, from Eqs. 4 and 6, we capture the iterative forms of △𝑒𝑝
and
𝑘+𝑙
△𝑒𝑎𝑝
𝑘+𝑙

is transmitted to the plant, the control input 𝑢𝑎

𝑘+𝑙+1

𝑘+𝑙+1

as,

△𝑒𝑝

𝑘+𝑙 = 𝐴△𝑒𝑘+𝑙 −1 + 𝐵𝑎𝑢

𝑘+𝑙 −1 − 𝐿 △𝑟𝑘+𝑙

𝑘+𝑙 −1 − 𝐿 △𝑟𝑘+𝑙

𝑘+𝑙 −2 − 𝐿 △𝑟𝑘+𝑙 −1 ] + 𝐵𝑎𝑢
𝑘+𝑙 −2 + 𝐵𝑎𝑢

= 𝐴 [𝐴△𝑒𝑘+𝑙 −2 + 𝐵𝑎𝑢
= 𝐴2 △𝑒𝑘+𝑙 −2 + (𝐴𝐵𝑎𝑢
= · · ·
= 𝐴𝑙 △𝑒𝑘 + (𝐴𝑙 −1𝐵𝑎𝑢
𝑘+1 + · · · + 𝐵𝑎𝑢
− (𝐴𝑙 −1𝐿 △𝑟𝑘+1 + 𝐴𝑙 −2𝐿 △𝑟𝑘+2 + · · · + 𝐿 △𝑟𝑘+𝑙 )

𝑘 + 𝐴𝑙 −2𝐵𝑎𝑢

𝑘+𝑙 −1)

𝑘+𝑙 −1) − (𝐴𝐿 △𝑟𝑘+𝑙 −1 + 𝐿 △𝑟𝑘+𝑙 )

= 𝐴𝑙 △𝑒𝑘 +

𝑙 −1
∑︁

𝑖=0

𝐴𝑖 (𝐵𝑎𝑢

𝑘+𝑙 −1−𝑖 − 𝐿 △𝑟𝑘+𝑙 −𝑖 )

(8)

△𝑒𝑎𝑝

𝑘+𝑙 = 𝐴△𝑒𝑘+𝑙 −1 + 𝐵𝑎𝑢

𝑘−1 = 𝐴 [𝐴△𝑒𝑘+𝑙 −2 + 𝐵𝑎𝑢

𝑘−1 ] + 𝐵𝑎𝑢

𝑘−1

= 𝐴2 △𝑒𝑘+𝑙 −2 + (𝐴 + 𝐼 )𝐵𝑎𝑢
= · · ·

𝑘−1

= 𝐴𝑙 △𝑒𝑘 + (𝐴𝑙 −1 + 𝐴𝑙 −2 + · · · + 1)𝐵𝑎𝑢

𝑘−1 = 𝐴𝑙 △𝑒𝑘 +

𝑙 −1
∑︁

𝑖=0

𝐴𝑖 𝐵𝑎𝑢

𝑘−1

(9)

The first terms in both Eq. 8 and 9 represent estimation error devi-
ation up to 𝑘-th sampling instance. In both periodic and aperiodic
cases, this term will be same. And, the second term in Eq. 8 and 9
captures effect of last 𝑙 iterations in periodic and aperiodic cases
respectively. We define the resilience of a system against FDI attacks
with respect to the terms △𝑒𝑝 and △𝑒𝑎𝑝 . If the FDI attack fails to do
much harm to the system, the values of △𝑒𝑝 and △𝑒𝑎𝑝 will be less.
Thus, lower values of △𝑒𝑝 and △𝑒𝑎𝑝 imply that the system is more
resilient against the FDI attacks. Occasional skips in control exe-
cution will be useful in enhancing system’s resilience against FDI
attacks if the difference in estimation error in periodic execution
due to attack △𝑒𝑝 is more than that of aperiodic control execution
△𝑒𝑎𝑝 . In the following theorem we establish under which condition
△𝑒𝑝 will be more than △𝑒𝑎𝑝 .

Theorem 1. For a plant-controller closed-loop system under FDI
attack (Eq. 2), control execution skips for consecutive 𝑙 sampling in-
stances after 𝑘 periodic control executions will be effective in enhanc-
ing system’s resilience when the following criteria is true:
|| (cid:205)𝑙−1
𝑖=0 𝐴𝑖 𝐵△𝑎𝑢
𝑖=0 𝐿△𝑟𝑘+𝑙−𝑖 ||
Here, the term △𝑎𝑢
𝑘+𝑙−1−𝑖 − 𝑎𝑢
, ∀𝑖 ∈ [0, 𝑙 − 1] i.e. cap-
𝑘−1
tures the difference between the attacks on control signal on the last 𝑙
sampling instances out of (𝑘 + 𝑙) samples between periodic (i.e. none
of the 𝑘 + 𝑙 samples has been skipped) and aperiodic cases(i.e. 𝑙 out of
□
the 𝑘 + 𝑙 samples has been skipped).

𝑘+𝑙−1−𝑖 || > || (cid:205)𝑙−1
𝑘+𝑙−1−𝑖 = 𝑎𝑢

Proof: The control execution skips for consecutive 𝑙 sampling
instances after periodic execution of consecutive 𝑘 sampling in-
stances will enhance system’s resilience against FDI attacks if
||△𝑒𝑝

𝑘+𝑙 || > ||△𝑒𝑎𝑝

𝑘+𝑙 ||. Now,

Exploring The Resilience of Control Execution Skips against False Data Injection Attacks

Conference’17, July 2017, Washington, DC, USA

=⇒ | |𝐴𝑙 △𝑒𝑘 +

𝐴𝑖 (𝐵𝑎𝑢

𝑘+𝑙 −1−𝑖 − 𝐿 △𝑟𝑘+𝑙 −𝑖 ) | | > | |𝐴𝑙 △𝑒𝑘 +

𝑙 −1
∑︁

𝑖=0

𝐴𝑖 𝐵𝑎𝑢

𝑘−1 | |

| | △𝑒𝑝

𝑘+𝑙 | | > | | △𝑒𝑎𝑝
𝑙 −1
∑︁

𝑘+𝑙 | |

𝑖=0

=⇒ | |𝐴𝑙 △𝑒𝑘 | | + | |

𝑙 −1
∑︁

𝑖=0

=⇒ | |𝐴𝑙 △𝑒𝑘 | | − | |𝐴𝑙 △𝑒𝑘 +

=⇒ | | −

=⇒ | | −

𝑙 −1
∑︁

𝑖=0
𝑙 −1
∑︁

𝑖=0

𝐴𝑖 𝐵𝑎𝑢

𝑘−1 | | > | |

𝐴𝑖 𝐵𝑎𝑢

𝑘−1 | | > | |

𝐴𝑖 𝐵𝑎𝑢

𝑘+𝑙 −1−𝑖 | | − | |

𝑙 −1
∑︁

𝑖=0
𝑙 −1
∑︁

𝑖=0
𝑙 −1
∑︁

𝑖=0
𝑙 −1
∑︁

𝑖=0

=⇒ | |

=⇒ | |

=⇒ | |

𝑙 −1
∑︁

𝑖=0
𝑙 −1
∑︁

𝑖=0
𝑙 −1
∑︁

𝑖=0

𝐴𝑖 (𝐵𝑎𝑢

𝑘+𝑙 −1−𝑖 − 𝐿 △𝑟𝑘+𝑙 −𝑖 ) | | > | |𝐴𝑙 △𝑒𝑘 +

𝑙 −1
∑︁

𝑖=0

𝐴𝑖 𝐵𝑎𝑢

𝑘−1 | |

𝐴𝑖 𝐵𝑎𝑢

𝑘−1 | | > −| |

𝑙 −1
∑︁

𝑖=0

𝐴𝑖 (𝐵𝑎𝑢

𝑘+𝑙 −1−𝑖 − 𝐿 △𝑟𝑘+𝑙 −𝑖 ) | |

𝐴𝑖 (𝐿 △𝑟𝑘+𝑙 −𝑖 − 𝐵𝑎𝑢

𝑘+𝑙 −1−𝑖 ) | |

𝐴𝑖 𝐿 △𝑟𝑘+𝑙 −𝑖 | | − | |

𝑙 −1
∑︁

𝑖=0

𝐴𝑖 𝐵𝑎𝑢

𝑘+𝑙 −1−𝑖 | |

𝐴𝑖 𝐵𝑎𝑢

𝑘−1 | | > | |

𝑙 −1
∑︁

𝑖=0

𝐴𝑖 𝐿 △𝑟𝑘+𝑙 −𝑖 | |

𝐴𝑖 𝐵𝑎𝑢

𝑘+𝑙 −1−𝑖 −

𝑙 −1
∑︁

𝑖=0

𝐴𝑖 𝐵𝑎𝑢

𝑘−1 | | > | |

𝑙 −1
∑︁

𝑖=0

𝐴𝑖 𝐿 △𝑟𝑘+𝑙 −𝑖 | |

𝐴𝑖 𝐵 △𝑎𝑢

𝑘+𝑙 −1−𝑖 | | > | |

𝑙 −1
∑︁

𝑖=0

𝐴𝑖 𝐿 △𝑟𝑘+𝑙 −𝑖 | |

□

(10)

Remark 1. For an aperiodic control execution pattern of 𝑘 con-
secutive periodic execution followed by 𝑙 control skips, the effect of
actuation attack at (𝑘 − 1)-th sample (starting from the 0-th sample)
i.e. 𝑎𝑢
𝑘−1 gets forwarded through all of the next (𝑙 − 1) iterations.
Whereas, in case of periodic control executions, an attacker can inject
different actuation attack values 𝑎𝑢
𝑘+𝑙−1−𝑖 at each of the sampling
iterations, i.e., ∀𝑖 ∈ [0, 𝑙 − 1]. The above theorem states that whenever
the attacker attempts to vary the attack efforts in consecutive itera-
tions in order to stay stealthy or jeopardise the system safety faster
(i.e., || (cid:205)𝑙−1
𝑘+𝑙−1−𝑖 || ≠ 0), skipping the control execution at
that sampling instance helps make the system more resilient against
□
the injected false data.

𝑖=0 𝐴𝑖 𝐵△𝑎𝑢

Formal Problem Statement: Consider a plant with system ma-
trices 𝐴, 𝐵, and 𝐶, controller 𝐾, observer 𝐿, and its initial region
𝑋0. We now formally define the attack-resilient control execution
skipping pattern as follows.
For the given system specifications ⟨𝐴, 𝐵, 𝐶, 𝐾, 𝐿, 𝑋0⟩, how we can
find attack-resilient control execution skipping patterns 𝜌 = (1𝑘 0𝑙 )𝑡
where 𝑛, 𝑘 > 0, 𝑙 ≥ 0 utilizing the relation || (cid:205)𝑙−1
𝑘+𝑙−1−𝑖 || >
|| (cid:205)𝑙−1
𝑖=0 𝐴𝑖𝐿△𝑟𝑘+𝑙−𝑖 || provided minimum execution rate 𝑟𝑚𝑖𝑛 of the
controller is maintained?

𝑖=0 𝐴𝑖 𝐵△𝑎𝑢

4 PROPOSED METHODOLOGY
In the last section, we identified analytical conditions, which if
satisfied can make skips in control execution to be beneficial in en-
hancing a system’s resilience against stealthy FDI attacks. Now, we
present our proposed framework for synthesizing attack-resilient
control execution patterns. The outline of the framework is demon-
strated in Fig. 4.

Figure 4: Framework for attack-resilient control sequence synthesis

The framework (Fig. 4) requires the followings inputs: i) System
specifications matrices 𝐴, 𝐵, and 𝐶, controller gain 𝐾, observer gain
𝐿, the maximum limit Y of the sensor measurements, actuation
saturation limit U, and the threshold 𝑇ℎ of the detector in place,
ii) Performance criteria of the controller i.e. minimum execution
rate 𝑟𝑚𝑖𝑛, iii) The safety property of the system, defined as a safety
polytope 𝑋𝑠 ∈ R𝑛 which mandates that the system trajectory will
always be within 𝑋𝑠 , and iv) Initial region of the plant states 𝑋0 ∈
R𝑛 from which the system progression initiates. With these inputs,
the framework sequentially runs two primary functional modules
(Fig. 4). The first one synthesizes an attack vector that consumes
minimum time to make the system unsafe considering the system
may initiate any where from 𝑋0. The second one generates attack-
resilient control execution sequences based on the synthesized
attack vector from the first module using a DP based method. These
two functional modules are elaborately discussed in Sec. 4.1 and
4.2 respectively.

4.1 Minimum-length Attack Vector Generation
For a given CPS, the notion of minimum length and stealthy false
data injection attack is presented in the following definition.

Definition 3 (Minimum length Stealthy False Data Injec-
tion attack). A 𝑡 length false data injection attack vector A𝑡 is
stealthy (Def. 1) and of minimum length if it can stealthily steer
the system trajectory beyond the safety envelope 𝑋𝑠 while no at-
tack vector of smaller length can make it possible i.e. 𝑥𝑎
𝑡 ∉ 𝑋𝑠 and
𝑓 (𝑟 𝑎
□

𝑘 ) < 𝑇ℎ ∀𝑘 ∈ [1, 𝑡] but 𝑥𝑎
We formally present the problem of generating minimum length

𝑘 ∈ 𝑋𝑠 ∀𝑘 ∈ [1, 𝑡 − 1].

stealthy attack vector as follows.

C P :∃ A [1], A [2], · · · , A [𝑡 ] ∀𝑥 ∈ 𝑋0
0 = 𝑥; ˆ𝑥𝑎
s.t. 𝑥𝑎
𝑖−1 = −𝐾 ˆ𝑥𝑎
𝑢𝑎
𝑖−1 = 𝑢𝑎
˜𝑢𝑎
𝑥𝑖 = A𝑥𝑖−1 + B ˜𝑢𝑎
𝑖−1; 𝑦𝑎
𝑟 𝑎
𝑖 − 𝐶 (𝐴 ˆ𝑥𝑎
𝑖−1 = 𝑦𝑎
𝑖−1 + 𝐵𝑢𝑎

𝑖−1 + 𝑎𝑢
𝑖 = 𝐶𝑥𝑎

0 = 𝑥
𝑖−1;

𝑖 ; ∀𝑖 ∈ [1, 𝑡 ]
𝑖 + 𝑎𝑦

𝑖 ; ∀𝑖 ∈ [1, 𝑡 ]
𝑖−1) ˆ𝑥𝑖 = A ˆ𝑥𝑖−1 + B𝑢𝑎

𝑖−1 + 𝐿𝑟 𝑎

𝑖−1 ∀𝑖 ∈ [1, 𝑡 ]

(11)

(12)

(13)

(14)

(15)

|𝑢𝑎

𝑖 |, | ˜𝑢𝑎

𝑖 |, |𝑎𝑢

𝑖 | < U ∀𝑖 ∈ [1, 𝑡 ]

(16)

𝑖−1) < 𝑇 ℎ;

𝑓 (𝑟 𝑎
𝑖 ∈ 𝑋𝑠 ∀𝑖 ∈ [1, 𝑡 − 1]; 𝑥𝑎
𝑥𝑎

𝑖 |, |𝑎𝑦

|𝑦𝑎

𝑖 | < Y;

𝑡 ∈ 𝑋𝑠

(17)
The above constraint solving problem CP returns an attack vector
A𝑡 = [A [1], A [2], · · · , A [𝑡]] (11) of length 𝑡 satisfying all the
constraints in (12)-(12) for any initial value of the state (11). The
constraints (13)-(15) follow the system progression under attack
(Eq. 2). The stealthiness of A𝑡 is ensured by the constraint 𝑓 (𝑟 𝑎
𝑖−1) <
𝑇ℎ in 16. The other constraints in (16) guarantee that the attack
is stealthy and attacks on sensor and actuation signal as well as
the falsified measurement and actuation signals are within their
respective ranges. To make sure the attack vector A𝑡 is of minimum
length (Def. 3), we keep the safety constraints in (17). Initially, we

Conference’17, July 2017, Washington, DC, USA

Ipsita Koley, Sunandan Adhikary, and Soumyajit Dey

solve this problem using some constraint solver with value of 𝑡 = 1.
If CP returns no solution, we keep on incrementing the value of 𝑡
by one until the minimum length attack vector is returned.

4.2 Attack-Resilient Control Execution

Sequence Synthesis

In this section, we will generate optimal attack-resilient control
skip patterns in 2 steps with respect to the minimum length attack
vector A that the constraint solving problem CP returns in (11).
First, utilizing the condition presented in Theorem 1, we generate a
list of 𝑡 length sub-patterns that are beneficial in enhancing system’s
resilience against FDI attacks. In second step, we formulate a DP
based solution method to compute the final i.e. optimal control
execution skip pattern by merging the sub-patterns generated in
the first step. The DP based formulation also facilitates generating
a list of control execution skip patterns ranked in order of the
advantage metric. We now elaborately discuss these two steps.

Require: State matrices 𝐴, 𝐵 and 𝐶, controller gain 𝐾 , observer gain 𝐿, sensor limit
Y, actuation saturation limit U, detector threshold 𝑇 ℎ, safety envelope 𝑋𝑠 , initial
region 𝑋0 of the plant states, minimum execution rate 𝑟𝑚𝑖𝑛 of the controller
Ensure: List of favourable sub-patterns 𝑠𝑢𝑏𝑃𝑎𝑡𝑡𝑒𝑟𝑛𝐿𝑖𝑠𝑡 and their advantage metric

𝐷

1: function AdvPatSyn(𝐴, 𝐵, 𝐶, 𝐾 , 𝐿, Y, U, 𝑇 ℎ, 𝑋𝑠 , 𝑋0)
𝐷 [𝑖 ] [𝑖 ] ← 0 ∀𝑖 ∈ [1, 𝑡 ]; 𝑠𝑢𝑏𝑃𝑎𝑡𝑡𝑒𝑟𝑛𝐿𝑖𝑠𝑡 ← 𝑛𝑢𝑙𝑙;
⊲ Initialization
2:
A ← CallSolver( C P, 𝐴, 𝐵, 𝐶, 𝐾, 𝐿, Y, U,𝑇 ℎ, 𝑋𝑠, 𝑋0);⊲ Solve C P in (11)
3:
𝑡 ← 𝑙𝑒𝑛𝑔𝑡ℎ ( A);
4:
△𝑟 ← ResDiffGen(𝐴, 𝐵, 𝐶, 𝐾, 𝐿, 𝑋0, A, 𝑡 );
5:
6:
for k=1 to t do
7:
8:
9:
10:
11:

𝑙ℎ𝑠 ← 0; 𝑟ℎ𝑠 ← 0; 𝜌 (𝑘, 𝑙) ← 1𝑡 ;
for i=1 to l do

𝑘−1);
⊲ We assume 𝑎𝑢

if k>1 then 𝑙ℎ𝑠 ← 𝑙ℎ𝑠 + 𝐴𝑖−1𝐵 (𝑎𝑢
else 𝑙ℎ𝑠 ← 𝑙ℎ𝑠 + 𝐴𝑖−1𝐵𝑎𝑢
𝑟ℎ𝑠 ← 𝑟ℎ𝑠 + 𝐴𝑖−1𝐿 △𝑟 [𝑘 + 𝑙 − 𝑖 + 1];

for l=1 to t-k do

𝑖 − 𝑟𝑖 (Eq. 5)

⊲ △𝑟 [𝑖 ] = 𝑟 𝑎

𝑘+𝑙 −𝑖 − 𝑎𝑢

0 = 0

𝑘+𝑙 −𝑖

;

if | |𝑙ℎ𝑠 | | > | |𝑟ℎ𝑠 | | then
𝜌 (𝑘, 𝑙) ← 1𝑘 0𝑙 −𝑘 1𝑡 −𝑙 ;
if 𝑠𝑢𝑚 (𝜌 (𝑘, 𝑙)) ≥ 𝑟𝑚𝑖𝑛 ×𝑡 then 𝐷 [𝑘 ] [𝑘+𝑙 ] ← | |𝑙ℎ𝑠 | |− | |𝑟ℎ𝑠 | |;
else 𝜌 (𝑘, 𝑙) ← 1𝑡 ;

𝑠𝑢𝑏𝑃𝑎𝑡𝑡𝑒𝑟𝑛𝐿𝑖𝑠𝑡 ← 𝑠𝑢𝑏𝑃𝑎𝑡𝑡𝑒𝑟𝑛𝐿𝑖𝑠𝑡 ∪ 𝜌 (𝑘, 𝑙);

return 𝐷, 𝑠𝑢𝑏𝑃𝑎𝑡𝑡𝑒𝑟𝑛𝐿𝑖𝑠𝑡 ;

Algorithm 1: Favourable Sub-pattern Synthesis

12:
13:
14:
15:
16:
17:

Favourable Sub-pattern synthesis. We denote a 𝑡-length sub-
4.2.1
pattern as a binary string of the form 𝜌 (𝑘, 𝑙) = 1𝑘 0𝑙−𝑘 1𝑡 −𝑙 where
𝑘 > 0 and 𝑙 ≥ 0. This implies periodic execution of the controller in
first 𝑘 iterations, followed by execution skips till 𝑙-th iteration and
then (𝑡 − 𝑙) periodic executions. The control execution following a
sub-pattern 𝜌 (𝑘, 𝑙) is quantified with an advantage value as defined
next.

Definition 4 (Advantage value of a sub-pattern). The ad-
vantage of control execution that follows the sub-pattern 𝜌 (𝑘, 𝑙) =
1𝑘 0𝑙−𝑘 1𝑡 −𝑙 of length 𝑡 over periodic control execution of length 𝑡 is
quantified by the value ||△𝑒𝑝 || − ||△𝑒𝑎𝑝 || = || (cid:205)𝑙−1
𝑘+𝑙−1−𝑖 || −
|| (cid:205)𝑙−1
□

𝑖=0 𝐴𝑖𝐿△𝑟𝑘+𝑙−𝑖 || (Theorem 1).
We present a method to synthesize a list subPatternList of favourable

𝑖=0 𝐴𝑖 𝐵△𝑎𝑢

sub-patterns of the form 𝜌 (𝑘, 𝑙) in Algo. 1 which also stores the
advantage value of the sub-patterns in a matrix 𝐷 of size 𝑡 × 𝑡.
𝐷 [𝑘] [𝑙] contains the advantage value of 𝜌 (𝑘, 𝑙). The inputs to the
proposed framework (Fig. 4) are passed to Algo. 1. In line 2, we

𝑖=0 𝐴𝑖 𝐵△𝑎𝑢

𝑘+𝑙−1−𝑖 || > || (cid:205)𝑙−1

initialize the advantage matrix 𝐷 with 0 and 𝑠𝑢𝑏𝑃𝑎𝑡𝑡𝑒𝑟𝑛𝐿𝑖𝑠𝑡 as null.
We solve the constraint solving problem CP in (11) to generate
minimum length stealthy attack A (line 3) and store its length 𝑡
in line 4. By simulating the system’s state progression under no
attack and under the attack A in a periodic control execution for
𝑡 iterations (following the Eq. 1 and 2), we compute △𝑟 𝑎
for all
𝑖
𝑖 ∈ [1, 𝑡] and store them in the array △𝑟 (line 5). The for loop in
line 6 signifies the possible number of consecutive 1’s in the sub-
pattern 𝜌 (𝑘, 𝑙) and the for loop in line 7 signifies the number of
consecutive 0’s following the consecutive 1’s. The LHS and RHS
of the criteria || (cid:205)𝑙−1
𝑖=0 𝐴𝑖𝐿△𝑟𝑘+𝑙−𝑖 || (The-
orem 1) are computed in lines 10-11 and line 12 respectively. In
line 13, we check if the LHS is more than the RHS i.e. the difference
in estimation error under periodic execution △𝑒𝑝 is more than that
of aperiodic execution △𝑒𝑎𝑝 . If yes, then we generate a new sub-
pattern 𝜌 (𝑘, 𝑙) by introducing skips from (𝑘 + 1) to (𝑘 + 𝑙) in line 14
for generation of new sub-pattern candidate. Next, in line 15, we
update the advantage value matrix 𝐷 with ||𝑙ℎ𝑠 || − ||𝑟ℎ𝑠 || (which is
nothing but (||△𝑒𝑝 || − ||△𝑒𝑎𝑝 ||)) if the sub-pattern 𝜌 (𝑘, 𝑙) satisfies
the minimum execution rate condition. Else, we modify the sub-
pattern 𝜌 (𝑘, 𝑙) as a periodic one. Next, we include 𝜌 (𝑘, 𝑙) (periodic
or aperiodic) into 𝑠𝑢𝑏𝑃𝑎𝑡𝑡𝑒𝑟𝑛𝐿𝑖𝑠𝑡 (line 17). Finally, the algorithm
returns the list of 𝑡 length sub-patterns of the form 𝜌 (𝑘, 𝑙) along
with the matrix 𝐷 which contains the advantage values of those
sub-patterns (line 17). The time complexity of Algo. 1 is 𝑂 (𝑡 3).

4.2.2 Optimal Attack-resilient Pattern Synthesis. In this section, we
formulate a dynamic programming (DP) based method to synthesize
the optimal attack-resilient control execution patterns using the
𝑠𝑢𝑏𝑃𝑎𝑡𝑡𝑒𝑟𝑛𝐿𝑖𝑠𝑡 and 𝐷 generated from Algo. 1. We demonstrate the
method with help of the example given in Fig. 5 where the length of
the minimum-length attack vector A is 𝑡 = 8 and the minimum rate
criteria 𝑟𝑚𝑖𝑛 = 0.5. In the DP formulation, we maintain 2 matrices:
𝑀𝑝×𝑡 and 𝑃𝑝×𝑡 where 𝑡 and 𝑝 are the length of minimum length
attack vector A and the number of sub-patterns in 𝑠𝑢𝑏𝑃𝑎𝑡𝑡𝑒𝑟𝑛𝐿𝑖𝑠𝑡.
For each sub-pattern 𝜌 (𝑘, 𝑙) ∈ 𝑠𝑢𝑏𝑃𝑎𝑡𝑡𝑒𝑟𝑛𝐿𝑖𝑠𝑡, 𝐷 [𝑘] [𝑙] has a non-
trivial entry. The row indices of 𝑀, 𝑃 and are 𝑠𝑢𝑏𝑃𝑎𝑡𝑡𝑒𝑟𝑛𝐿𝑖𝑠𝑡 ba-
sically lexicographic ordering of such non-trivial (𝑘, 𝑙)-pairs. For
example, since 𝐷 [2] [3], · · · , 𝐷 [2] [6] are non-trivial, the first four
rows of 𝑀, 𝑃 are 1 : 𝜌 (2, 3), · · · , 4 : 𝜌 (2, 6) in Fig. 5. The maximum
advantage value (Def. 4) that can be achieved by considering skips
till 𝑗-th position in the pattern of length 𝑡 when only the first 𝑖
sub-patterns in the 𝑠𝑢𝑏𝑃𝑎𝑡𝑡𝑒𝑟𝑛𝐿𝑖𝑠𝑡 are taken into consideration,
is computed and stored in 𝑀 [𝑖] [ 𝑗]. The corresponding optimal
pattern is stored in 𝑃 [𝑖] [ 𝑗].

Let the 𝑖-th sub-pattern be 𝜌 (𝑘, 𝑙) = 1𝑘 0𝑙−𝑘 1𝑡 −𝑙 . For this, let
𝑘 = 𝑒𝑛𝑑1(𝑖) and 𝑙 = 𝑒𝑛𝑑0(𝑖) denote the index where the initial
1’s and 0’s of the sub-pattern 𝜌 (𝑘, 𝑙) finish. The rate of control
execution for any 𝑡-length pattern containing a total of 𝑛 1s is given
by 𝑟𝑎𝑡𝑒 = 𝑛/𝑡. We define merging of two patterns 𝑖 and 𝑗 using
element wise logical AND operation and denote the merged pattern
by 𝑖 ◦ 𝑗. For example, 𝐷 [2] [3] = 0.02 implies the advantage value
of 𝜌 (2, 3) is 0.02. With help of this example, we now elaborate how
to populate 𝑀 (Eq. 18) and 𝑃 using DP memoization process.

case 1 (𝑖 = 1): Consider the 1-st sub-pattern in the list subPat-
ternList to be used (as per definition) to populate first row of 𝑀
and 𝑃. Since we do not have any favourable sub-pattern with skips

Exploring The Resilience of Control Execution Skips against False Data Injection Attacks

Conference’17, July 2017, Washington, DC, USA

Figure 5: Optimal attack-resilient pattern generation using dynamic programming approach

up to the length (𝑒𝑛𝑑0(1) − 1) with non-zero advantage value,
we populate 𝑀 [1] [ 𝑗] = 0 and 𝑃 [1] [ 𝑗] = 1𝑡 for 𝑗 < 𝑒𝑛𝑑0(1).
Let us consider the first row of 𝑀 and 𝑃 in the example of Fig. 5.
This is corresponding to the sub-pattern 𝜌 (2, 3). Consider the first
𝑒𝑛𝑑0(1) − 1 = 2 columns of 𝑀. The sub-pattern 𝜌 (2, 3) is of the
form 1203−218−3 = 11011111, in which there is no prefix up to
length 2 that produces positive advantage value (i.e., [1]1011111
or [11]011111). Therefore, we update 𝑀 [1] [1] = 𝑀 [1] [2] = 0 and
𝑃 [1] [1] = 𝑃 [1] [2] = 1𝑡 . In the first row, for 𝑗 ≥ 𝑒𝑛𝑑0(1), we popu-
late the matrix 𝑀 with the advantage value of the first sub-pattern
and 𝑃 with the first sub-pattern if the rate of the first sub-pattern
up to length 𝑗 i.e. 1𝑒𝑛𝑑1(1) 0𝑒𝑛𝑑0(1)−𝑒𝑛𝑑1(1) 1𝑗−𝑒𝑛𝑑0(1) =1201𝑗−3 sat-
isfies the rate criteria. Otherwise, 𝑀 [𝑖] [ 𝑗] and 𝑃 [𝑖] [ 𝑗] are assigned
0 and 1𝑡 respectively. Let us again consider the example given in
Fig. 5. Since 𝜌 (2, 3) satisfies 𝑟𝑚𝑖𝑛 up to the length 𝑗 ≥ 𝑒𝑛𝑑0(1) = 3,
we populate 𝑀 [1] [ 𝑗] with 𝐷 [2] [3] and 𝑃 [1] [ 𝑗] with 1203−218−3 =
12015 ∀𝑗 ≥ 3.

case 2 (𝑖 > 1 and 𝑗 < 𝑒𝑛𝑑0(𝑖)): Now, let us consider the other
sub-patterns in 𝑠𝑢𝑏𝑃𝑎𝑡𝑡𝑒𝑟𝑛𝐿𝑖𝑠𝑡. There is no prefix up to length
(𝑒𝑛𝑑0(𝑖) − 1) in the 𝑖-th sub-pattern [1end1(i) 0end0(i)−end1(i)−1]0
1𝑡 −𝑒𝑛𝑑0(𝑖) that produces positive advantage value. Therefore, for
𝑖 > 1, 𝑗 < 𝑒𝑛𝑑0(𝑖), we can update 𝑀 [𝑖] [ 𝑗] with 𝑀 [𝑖 − 1] [ 𝑗]. Simi-
larly, we assign 𝑃 [𝑖] [ 𝑗] = 𝑃 [𝑖 − 1] [ 𝑗] for 𝑗 < 𝑒𝑛𝑑0(𝑖). Consider the
second row of the matrices 𝑀 and 𝑃 in Fig. 5 i.e. the one correspond-
ing to sub-pattern 𝜌 (2, 4) = 1204−218−4 = 11001111 (highlighted in
red). For, 𝑗 < 𝑒𝑛𝑑0(2) i.e. 𝑗 < 4, there exists no prefix that yields
a positive advantage value in the current sub-pattern [110]01111.
Therefore, we set 𝑀 [2] [ 𝑗] = 𝑀 [1] [ 𝑗] as 𝑀 [1] [ 𝑗] holds the max-
imum advantage that can be gained by considering skips until 𝑗
(𝑗 < 4) positions of a 𝑡 = 8 length pattern. Similarly 𝑃 [2] [ 𝑗] is
assigned with 𝑃 [1] [ 𝑗].






0 if 𝑖 = 1 and 𝑗 < 𝑒𝑛𝑑0(𝑖)
𝐷 [𝑖 ] [ 𝑗 ] if 𝑖 = 1, 𝑗 ≥ 𝑒𝑛𝑑0(𝑖) ∧ 𝑟𝑎𝑡𝑒 (𝑖) ≥ 𝑟𝑚𝑖𝑛
0 if 𝑖 = 1, 𝑗 ≥ 𝑒𝑛𝑑0(𝑖), and 𝑟𝑎𝑡𝑒 (𝑖) < 𝑟𝑚𝑖𝑛
𝑀 [𝑖 − 1] [ 𝑗 ] if 𝑖 > 1 ∧ 𝑗 < 𝑒𝑛𝑑0(𝑖)
𝑀 [𝑖 − 1] [ 𝑗 ]

if 𝑖 > 1 ∧ 𝑗 ≥ 𝑒𝑛𝑑0(𝑖)∧
𝑟𝑎𝑡𝑒 (1𝑒𝑛𝑑1(𝑖 ) 0𝑒𝑛𝑑0(𝑖 )−𝑒𝑛𝑑1(𝑖 ) 1𝑗 −𝑒𝑛𝑑0(𝑖 ) ) < 𝑟𝑚𝑖𝑛

𝑚𝑎𝑥 {𝑀 [𝑖 − 1] [ 𝑗 ], 𝐷 [𝑒𝑛𝑑1(𝑖) ] [𝑒𝑛𝑑0(𝑖) ] }

𝑀 [𝑖 ] [ 𝑗 ] =

if 𝑖 > 1 ∧ 𝑗 ≥ 𝑒𝑛𝑑0(𝑖)∧
𝑟𝑎𝑡𝑒 (1𝑒𝑛𝑑1(𝑖 ) 0𝑒𝑛𝑑0(𝑖 )−𝑒𝑛𝑑1(𝑖 ) 1𝑗 −𝑒𝑛𝑑0(𝑖 ) ) ≥ 𝑟𝑚𝑖𝑛∧
𝑟𝑎𝑡𝑒 (𝑃 [𝑖 ] [𝑒𝑛𝑑1(𝑖) − 1] ◦ 1𝑒𝑛𝑑1(𝑖 ) 0𝑒𝑛𝑑0(𝑖 )−𝑒𝑛𝑑1(𝑖 ) 1𝑗 −𝑒𝑛𝑑0(𝑖 ) )
< 𝑟𝑚𝑖𝑛

𝑚𝑎𝑥 {𝑀 [𝑖 − 1] [ 𝑗 ], 𝑀 [𝑖 ] [𝑒𝑛𝑑1(𝑖) − 1] + 𝐷 [𝑒𝑛𝑑1(𝑖) ] [𝑒𝑛𝑑0(𝑖) ] }

if 𝑖 > 1 ∧ 𝑗 ≥ 𝑒𝑛𝑑0(𝑖)∧,
𝑟𝑎𝑡𝑒 (𝑃 [𝑖 ] [𝑒𝑛𝑑1(𝑖) − 1] ◦ 1𝑒𝑛𝑑1(𝑖 ) 0𝑒𝑛𝑑0(𝑖 )−𝑒𝑛𝑑1(𝑖 ) 1𝑗 −𝑒𝑛𝑑0(𝑖 ) )
≥ 𝑟𝑚𝑖𝑛

(18)

case 3 (𝑖 > 1 and 𝑗 ≥ 𝑒𝑛𝑑0(𝑖)): We divide this case in 3 scenarios.
(i) If the 𝑗-length prefix of the 𝑖-th sub-pattern does not satisfy the
rate criteria, we set 𝑀 [𝑖] [ 𝑗] = 𝑀 [𝑖 −1] [ 𝑗] and 𝑃 [𝑖] [ 𝑗] = 𝑃 [𝑖 −1] [ 𝑗].
Consider the row 𝑖 = 4 (highlighted in blue) and column 𝑗 = 6 of
𝑀 in Fig. 5. The 4-th row corresponds to the sub-pattern 𝜌 (2, 6) =
1206−2 = 11000011. In 𝑀 [4] [6], we want to have the maximum
advantage value that can be achieved by considering skips until 6-th
position of the 8-length pattern. And, we can compute 𝑀 [4] [6] by
considering only the first 4 sub-patterns i.e. 𝜌 (2, 3), 𝜌 (2, 4), 𝜌 (2, 5)
and 𝜌 (2, 6). However, the 𝑗 = 6 length prefix of [110000]11 does
not satisfy 𝑟𝑚𝑖𝑛 = 0.5. So, we set 𝑀 [4] [6] = 𝑀 [3] [6] and 𝑃 [4] [6] =
𝑃 [3] [6].

(ii) If the 𝑗-length prefix of the 𝑖-th sub-pattern satisfies the rate
criteria, we can consider merging the 𝑖-th sub-pattern with the
most favourable non-overlapping sub-patterns. Two sub-patterns
are non-overlapping if they do not have 0’s at same position. There-
fore, the candidate patterns which can be merged with 𝑖-th sub-
pattern 1𝑒𝑛𝑑1(𝑖) 0𝑒𝑛𝑑0(𝑖)−𝑒𝑛𝑑1(𝑖)−101𝑡 −𝑒𝑛𝑑0(𝑖) must have 0’s before
their 𝑒𝑛𝑑1(𝑖)-th position. As per the construction of the 𝑃 ma-
trix, the most favourable candidate sub-pattern for merging with
𝑖-the sub-pattern is stored in 𝑃 [𝑖] [𝑒𝑛𝑑1(𝑖) − 1]. However, the 𝑖-th
sub-pattern can be merged with 𝑃 [𝑖] [𝑒𝑛𝑑1(𝑖) − 1] if the 𝑗-length

Conference’17, July 2017, Washington, DC, USA

Ipsita Koley, Sunandan Adhikary, and Soumyajit Dey

prefix of the merged pattern satisfies minimum rate 𝑟𝑚𝑖𝑛 crite-
ria even the if they are non-overlapping. If the rate condition on
the merged pattern is not satisfied, we set 𝑀 [𝑖] [ 𝑗] = 𝑚𝑎𝑥 {𝑀 [𝑖 −
1] [ 𝑗], 𝐷 [𝑒𝑛𝑑1(𝑖)] [𝑒𝑛𝑑0(𝑖)]} and accordingly populate 𝑃 [𝑖] [ 𝑗]. Con-
sider the row 𝑖 = 12 (highlighted in yellow) and column 𝑗 = 8 of 𝑀
in Fig. 5. The 12-th row corresponds to the sub-pattern 𝜌 (4, 8) =
1408−410 = 11110000. In 𝑀 [12] [8], we want to have the maximum
advantage value that can be achieved by considering skips until
last position of 8-length pattern. And, we can compute 𝑀 [12] [8]
by considering only the first 12 sub-patterns i.e. 𝜌 (2, 3), 𝜌 (2, 4), · · · ,
𝜌 (4, 8). The pattern 𝜌 (4, 8) satisfies the rate condition, and is also
mergable with non-overlapping sub-pattern in 𝑃 [12] [3] = 1101111.
However, the merged pattern 𝑃 [12] [3] ◦ 𝜌 (4, 8) = 11011111 ◦
11110000 = 11010000 does not satisfy 𝑟𝑚𝑖𝑛 = 0.5. Thus, we set
𝑀 [12] [8] = 𝑚𝑎𝑥 {𝑀 [11] [8], 𝐷 [4] [8]} = 𝑀 [11] [8], and accord-
ingly set 𝑃 [12] [8] = 𝑃 [11] [8] = 11000011.

(iii) Finally, consider that the merged pattern of 𝑖-th sub-pattern
and the pattern in 𝑃 [𝑖] [𝑒𝑛𝑑1(𝑖) − 1] satisfies the rate condition.
Then, we check if we can yield better advantage after merging.
If so, we set 𝑀 [𝑖] [ 𝑗] = 𝑀 [𝑖] [𝑒𝑛𝑑1(𝑖) − 1] + 𝐷 [𝑒𝑛𝑑1(𝑖)] [𝑒𝑛𝑑0(𝑖)]
and 𝑃 [𝑖] [ 𝑗] = 𝑃 [𝑖] [𝑒𝑛𝑑1(𝑖) −1] ◦1𝑒𝑛𝑑1(𝑖) 0𝑒𝑛𝑑0(𝑖)−𝑒𝑛𝑑1(𝑖) 1𝑡 −𝑒𝑛𝑑0(𝑖) .
Otherwise, we assign 𝑀 [𝑖] [ 𝑗] = 𝑀 [𝑖 − 1] [ 𝑗] and 𝑃 [𝑖] [ 𝑗] = 𝑃 [𝑖 −
1] [ 𝑗]. For example, consider the case corresponding to the 16-th
row i.e. the last sub-pattern 𝜌 (7, 8) and the maximum length i.e. 8 in
Fig. 5 (highlighted in green). If 𝜌 (7, 8) is merged with 𝑃 [16] [6] i.e.
130012, we get 130310 which satisfies the 𝑟𝑚𝑖𝑛 = 0.5. This merging
gives an advantage value of 𝑀 [16] [6] + 𝐷 [7] [8] = 3.76 which is
more than the maximum advantage value computed (i.e. 𝑀 [15] [8])
before considering 𝜌 (7, 8) for 8 length patterns. Therefore, we pop-
ulate 𝑀 [16] [8] with 3.76 and 𝑃 [16] [8] with 130310.

The last column of 𝑃 matrix i.e. 𝑃 [𝑖] [𝑡]∀𝑖 ∈ [1, 𝑝] gives the list of
attack-resilient control execution patterns of length 𝑡 ranked (from
least beneficial to most beneficial) with respect to the advantage
values.Thus, by construction, the most attack-resilient 𝑡 length
optimal control execution pattern is stored in 𝑃 [𝑝] [𝑡]. We can see
in the example of Fig. 5 that 𝑀 [16] [8] has the maximum advantage
value with the corresponding pattern stored in 𝑃 [16] [8]. The time
complexity of this DP based solution method is 𝑂 (𝑝𝑡).

5 EXPERIMENTAL RESULTS
For evaluation of our framework, we consider several safety-critical
CPS benchmarks. The system descriptions are given as the input
to our tool along with their initial region, performance and safety
criteria as mentioned in Fig. 4. The framework is built using Matlab
and is shared in a public repository 1. Our experiments are run on
an 8-core 7-th gen intel i7 CPU with 16 GB of RAM.

In Tab. 1 we demonstrate attack-resilient control execution se-
quences synthesized for control systems (provided with correspond-
ing references in the 1st column) with different dimensions (pro-
vided in the 2nd column of the table) in order to verify the scalability
of our approach. The synthesized patterns satisfy the minimum ex-
ecution rate 𝑟𝑚𝑖𝑛 (3rd column) and their length is considered same
as the minimum-length attack (4th column) discovered using Eq. 11-
17. The 6th and 7th column provides the list of synthesized control
execution patterns ranked in descending order w.r.t. resilience and

1https://anonymous.4open.science/r/OptimalPatternSynthesis-F8E2/

Table 1: Resilient Control Sequences for Automotive Benchmarks

Systems

Dime-
-nsion

𝑟𝑚𝑖𝑛

Minimum
length of
Attack

Pattern
Synthesis
Time (s)

Trajectory
Tracking
Control [1]

ESP [1]

Fuel
Injection
[20]

Suspension
Control [14]

Four-Car
Platoon [15]

2

2

3

4

8

0.51

13

0.45

0.5

0.52

3

8

4

0.5

25

0.55s
[Total:
21.55s]

0.054s
[Total: 4.18s]

0.38s
[Total:
13.26s]

0.12s
[Total:
7.08s]

3.56s
[Total:
272.62s]

Control
Execution
Sequences
10616
10517
10418
10319

101

103130
1021302
1503
1404
1202
1021
1012
1012112
1011113
1010114
109115

Advantages

13.58
9.86
6.14
2.05

2.62

7.03
6.49
4.22
3.86
2274.73
2096.29
434.14
4.64
4.01
3.44
2.92

their advantage values. In the 5-th column we provide the runtime
of the pattern synthesis methodology (along with the runtime of the
overall methodology in braces). The system descriptions along with
safety and performance criteria are taken from [10, 14]. Further, in
Figure 6, we demonstrate the resilience and performance of the best
(w.r.t the advantage value) synthesized control execution sequence
for a suspension control system [14]. Our framework generates a

(a) Comparison Between Δ𝑒𝑝 and Δ𝑒𝑎𝑝

(b) Comparison Between periodic 𝑦
and aperiodic 𝑦 under no FDI

Figure 6: Effect of Derived Aperiodic Control Execution Sequence
(1001)𝜔 on Suspension Control System under FDI

minimum-length attack for this system which can make the system
unsafe within 4 sampling iterations. The generated best possible
attack-resilient control sequence is 1001 (the 1st sub-row in the
6-th column of the 4-th row of the Tab. 1). The blue plot with circle
marker denotes △𝑒𝑎𝑝 while following the control execution pattern
1001 and the red plot with square marker denotes △𝑒𝑝 while follow-
ing periodic control execution. As we can clearly observe in Fig. 6a,
under the 4-length attack △𝑒𝑎𝑝 is significantly less than △𝑒𝑝 . Due
to this, the estimation error induced by the false data is significantly
reduced by repeating the control execution skips at every 2-nd and
3-rd position of a 4 length execution/skip pattern. Fig. 6b show-
cases the performance of the system under the aperiodic control
sequence 1001 (in blue and circled plot) and the periodic control
execution (in red and squared plot) without any FDI attack. As per
the design criteria, the system must settle within 3 seconds. We can
see system output (position of the car in meters) under the periodic
control execution settles much quickly compared to the aperiodic
execution. However, since the aperiodic control sequences synthe-
sized using our framework always follows the 𝑟𝑚𝑖𝑛, even under the

12345Samples010002000 e eap ep10203040506070Samples-10010yy in aperiodic executiony in periodic executionExploring The Resilience of Control Execution Skips against False Data Injection Attacks

Conference’17, July 2017, Washington, DC, USA

(a) TTC under minimum-length attack
in periodic execution

(b) TTC under minimum-length at-
tack under 10616

Figure 7: Effect of aperiodic control execution sequence on trajec-
tory tracking control system under FDI attack

aperiodic execution the system output settles within 2.4seconds
(i.e. 60 sampling periods each of 0.04 sec). This successfully vali-
dates that the attack-resilient control sequences generated using
our framework preserve system performance while turning out to
be beneficial in terms of reducing the damage caused by an FDI.

A Use case: Lightweight Security Design Utilizing Control Execution
Sequence for Automotive CPS. Automotive CPSs are safety-critical
but often resource-constrained. Thus we cannot afford to secure
the closed loop communications in every iteration. The state-of-
the-art technique to handle this resource-aware security design
is to activate the cryptographic measures intermittently [5]. For
this we can utilize the aperiodic control executions, synthesized
using our framework, to make the system resilient enough against
a minimum-length attack sequence while the cryptographic en-
cryption is not active. As we have seen earlier, (refer Sec. 4.1) an
attack vector generated using our framework commits maximum
effort to make the system states unsafe without being detected in
minimum possible time. But if we choose to run the closed loop con-
trol execution following the synthesized optimally attack-resilient
control sequence, the attack effect (the estimation error difference
Δ𝑒) can be kept in check for a longer duration. This enables the
system to behave in a more resilient fashion under FDI attacks
resulting to a less frequent activation of the cryptographic method.
Let us visualize such a scenario. As we can see in Fig. 7a, under
the periodic control execution sequence, outputs of the TTC i.e.
distance from the desired trajectory (𝐷 in meters, the blue plots)
and velocity of the vehicle (𝑉 in m/s, the red plots) goes beyond
the safety boundaries at 13-th sampling iteration. But while fol-
lowing the best aperiodic execution pattern synthesized using our
framework for TTC i.e. 10616, the system does not become unsafe
at 13-th iteration. Rather as we can see in Fig. 7b, the generated
minimum-length attack for 10616 is of 18 length, i.e. the attack
makes the system unsafe at 18-th sampling iteration when operated
with 10616. This simply suggests that the system under the syn-
thesized aperiodic execution can promise more resilience against
attack and can reduce the activation of the cryptographic method
by ∼ 21% (activation of crypto can be delayed from 14 sampling
iterations in case of periodic executions to 17 in case of aperiodic
executions). This motivates the fact such optimally attack-resilient
control sequences can be useful in resource-aware CPS co-designs.

6 CONCLUSION
In this work, 1) we establish analytical conditions under which
occasional control skips improve the system resilience w.r.t. FDI

attacks, and 2) provide an associated CAD framework for generating
such skip sequences. Extending the constraint solving problem
formulation (Eq. 10-16) in our methodology with a counter-example
guided loop, it is possible to generate multiple attack vectors of
minimum length and beyond the minimum length. For all such
cases, applying the control execution sequence generation method
provides a library of robust control schedules which can be deployed
in a CPS. Creating a statistical foundation for choosing among such
sequences given the probability distribution of attack vectors is
considered as future work. Also, as the use case suggests, using
attack-resilient control executions for relaxing real-time resource
constraints in a methodical manner can be another future extension.

REFERENCES
[1] Sunandan Adhikary, Ipsita Koley, Saurav Kumar Ghosh, Sumana Ghosh, Soumya-
jit Dey, and Debdeep Mukhopadhyay. 2020. Skip to secure: Securing cyber-
physical control loops with intentionally skipped executions. In Proceedings of
the 2020 Joint Workshop on CPS&IoT Security and Privacy. 81–86.

[2] Stephen Checkoway, Damon McCoy, Brian Kantor, Danny Anderson, Hovav
Shacham, Stefan Savage, Karl Koscher, Alexei Czeskis, Franziska Roesner, Ta-
dayoshi Kohno, et al. 2011. Comprehensive experimental analyses of automotive
attack surfaces.. In USENIX Security Symposium, Vol. 4. San Francisco, 447–462.
[3] Sumana Ghosh, Souradeep Dutta, Soumyajit Dey, and Pallab Dasgupta. 2017.
A structured methodology for pattern based adaptive scheduling in embedded
control. ACM Transactions on Embedded Computing Systems (TECS) 16, 5s (2017),
1–22.

[4] Andy Greenberg. 2015. Hackers remotely kill a jeep on the highway-with me in

it. Wired 7 (2015), 21.

[5] Ilija Jovanov and Miroslav Pajic. 2019. Relaxing integrity requirements for attack-
IEEE Trans. Automat. Control 64, 12 (2019),

resilient cyber-physical systems.
4843–4858.

[6] Ipsita Koley, Saurav Kumar Ghosh, Soumyajit Dey, Debdeep Mukhopadhyay,
Amogh Kashyap KN, Sachin Kumar Singh, Lavanya Lokesh, Jithin Nalu Purakkal,
and Nishant Sinha. 2020. Formal synthesis of monitoring and detection systems
for secure cps implementations. In 2020 Design, Automation & Test in Europe
Conference & Exhibition (DATE). IEEE, 314–317.

[7] Ralph Langner. 2013. To kill a centrifuge: A technical analysis of what stuxnet’s

creators tried to achieve. The Langner Group (2013).

[8] Vuk Lesi, Ilija Jovanov, and Miroslav Pajic. 2017. Security-aware scheduling of
embedded control tasks. ACM Transactions on Embedded Computing Systems
(TECS) 16, 5s (2017), 1–21.

[9] Rupak Majumdar, Indranil Saha, and Majid Zamani. 2011. Performance-aware
scheduler synthesis for control systems. In 2011 Proceedings of the Ninth ACM
International Conference on Embedded Software (EMSOFT). IEEE, 299–308.
[10] William C Messner, Dawn M Tilbury, and Rick Hill. 1999. Control tutorials for
matlab and simulink. https://ctms.engin.umich.edu/CTMS/index.php?example=
Suspension&section=SimulinkControl. Accessed: 2022-05-23.

[11] Yilin Mo and Bruno Sinopoli. 2010. False data injection attacks in control systems.

In Preprints of the 1st workshop on Secure Control Systems. 1–6.

[12] Arslan Munir and Farinaz Koushanfar. 2018. Design and analysis of secure and
dependable automotive CPS: A steer-by-wire case study. IEEE TDSC (2018).

[13] Jose Nazario. 2007. Blackenergy ddos bot analysis. Arbor Networks (2007).
[14] Debayan Roy, Licong Zhang, Wanli Chang, Dip Goswami, and Samarjit
Chakraborty. 2016. Multi-objective co-optimization of FlexRay-based distributed
control systems. In 2016 IEEE Real-Time and Embedded Technology and Applica-
tions Symposium (RTAS). IEEE, 1–12.

[15] Bastian Schürmann and Matthias Althoff. 2017. Optimal control of sets of so-
lutions to formally guarantee constraints of disturbed linear systems. In 2017
American Control Conference (ACC). IEEE, 2522–2529.

[16] Yasser Shoukry, Paul Martin, Paulo Tabuada, and Mani Srivastava. 2013. Non-
invasive spoofing attacks for anti-lock braking systems. In International Confer-
ence on Cryptographic Hardware and Embedded Systems. Springer, 55–72.
[17] Jill Slay and Michael Miller. 2007. Lessons learned from the maroochy water

breach. In ICCIP. Springer, 73–82.

[18] Damoon Soudbakhsh, Linh TX Phan, Oleg Sokolsky, Insup Lee, and Anuradha
Annaswamy. 2013. Co-design of control and platform with dropped signals.
In Proceedings of the ACM/IEEE 4th international conference on cyber-physical
systems. 129–140.

[19] Andre Teixeira et al. 2015. Secure control systems: A quantitative risk manage-

ment approach. IEEE Control Systems Magazine 35, 1 (2015), 24–45.

[20] Chee Tan Wei, Hazlina Selamat, and Ahmad Jais Alimin. 2009. Modeling and
control of an engine fuel injection system. Faculty of Electrical Engineering,

2468101214Samples-20020Distance (m)-40-20020Velocity (m/s)Da under periodicSafety limit of DVa under periodicSafety limit of V51015Samples-20020Distance (m)-40-2002040Velocity (m/s)Da under aperiodicSafety limit of DVa under aperiodicSafety limit of VConference’17, July 2017, Washington, DC, USA

Ipsita Koley, Sunandan Adhikary, and Soumyajit Dey

University Teknologi Malaysia 1 (2009), 1–2.

