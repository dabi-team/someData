2
2
0
2

r
p
A
0
2

]

R
G
.
s
c
[

1
v
3
8
7
9
0
.
4
0
2
2
:
v
i
X
r
a

TopoEmbedding, a web tool for the interactive analysis of persistent
homology

Xueyi Bao∗

Guoxi Liu∗

Federico Iuricich∗

Abstract

Software libraries for Topological Data Analysis (TDA) oﬀer limited support for interactive visualization.
Most libraries only allow to visualize topological descriptors (e.g., persistence diagrams), and lose the
connection with the original domain of data. This makes it challenging for users to interpret the results
of a TDA pipeline in an exploratory context. In this paper, we present TopoEmbedding, a web-based tool that
simpliﬁes the interactive visualization and analysis of persistence-based descriptors. TopoEmbedding allows
non-experts in TDA to explore similarities and diﬀerences found by TDA descriptors with simple yet eﬀective
visualization techniques.

1

Introduction.

Topological Data Analysis (TDA) has successfully demonstrated the ability to address the needs of data scientists
when studying various data types: from scalar ﬁelds [13], to high dimensional point clouds [26]. One advantage
of TDA is that it provides compact descriptors describing essential features of the data. Many TDA software
libraries are available nowadays, implemented in diﬀerent programming languages, such as R, Python, and C++.
These include Javaplex [2], RedHom [16], Gudhi [17], Scikit-tda [25], PHAT [4], DIPHA [5], Dionysus [20], Perseus
[19], Ripser [10], HomCloud [22], and Diamorse [9]. All these libraries dedicate particular attention to persistent
homology, one of the most common tools in TDA.

Persistent homology [11, 33] provides a multiscale description of the homology of a shape by means of a
ﬁltration. Let Σ be a simplicial complex, a ﬁltration is a sequence {Σi | 0 ≤ i ≤ r} of subsets of Σ such that
∅ = Σ0 ⊆ Σ1 ⊆ · · · ⊆ Σr = Σ. Intuitively, given an index i, homology captures the cycles of Σi [21]. Given
two indices i and j, with i < j, persistent homology tracks the cycles that appear, or disappear, from Σi to Σj.
Each cycle is characterized by a pair of indices (i, j), where i is called birth, j is called death, and j − i is called
persistence. Each pair is also referred to as a persistence pair, and the collection of all pairs deﬁnes the persistence
diagram [7].

To simplify the analysis of persistence information, most libraries visualize the persistence diagram as
a scatter plot representing each persistence pair as a point with the coordinate value (i, j). An alternative
representation is a barcode that represents each feature as a line [12]. Two libraries oﬀer alternative ways
to visualize persistence. Eireen [14] is a toolbox implemented in Julia [6] for the analysis of Vietoris-Rips
ﬁltrations [23]. On top of the persistence diagram, it oﬀers the explicit computation and visualization of the
associated persistence cycles. The Topological ToolKit (TTK) [27] focuses on topological data analysis for
scientiﬁc visualization and deﬁnes a uniﬁed framework for visualizing diﬀerent topological structures such as
It also provides two ways to visualize
Reeb graphs [24], contour trees [29], and Morse-Smale complexes [18].
persistent homology other than the persistence diagram: the embedded persistence pairs, which represent each
dot of the persistence diagram as a pair of points in the ﬁltration domain, and the persistence curve, which is a
line chart plotting the number of pairs at the vary of the persistence values. Recently, a new plugin for TTK
has been developed which allows the visualization of persistence cycles [15], an explicit representation of the
boundary of each hole, or void originated by the ﬁltration.

Rather than visualizing information related to a single descriptor, this manuscript considers the problem
of analyzing multiple descriptors at once. While many metrics have been studied to measure the similarities
and diﬀerences among persistence-based descriptors [31], results are often presented in a ”black-box” manner.

∗Clemson University, Clemson, SC ({xueyib, guoxil, ﬁurici}@g.clemson.edu).

Copyright © 2022 by SIAM
Unauthorized reproduction of this article is prohibited

 
 
 
 
 
 
In an
That is, measures are used to quantify what descriptors are the most similar without explaining why.
eﬀort to simplify the interpretation of TDA descriptors for non-experts, this paper proposes TopoEmbedding, an
interactive web tool for the analysis and explanation of persistence features similarities.

2 Overview.

The goal of TopoEmbedding is to simplify the analysis of topological descriptors by means of interactive
visualizations. In Section 2.1 we describe the TDA pipeline we used to compute the persistence-based descriptors
rendered by TopoEmbedding. In Section 2.2 we describe the visual interface used to improve explainability and
interactive analysis.

2.1 Analysis pipeline. To demonstrate the interface functionality, we implemented a representative TDA
pipeline analyzing the famous MNIST data set, a collection of 1000 handwritten digits (100 images per digit).
The analysis pipeline consists of three diﬀerent stages.

In the ﬁrst stage, we compute persistent homology for each handwritten image. If we consider each input
image as a piecewise linear scalar ﬁeld f : Σ → R deﬁned on a simplicial complex Σ, a ﬁltration of Σ is
naturally deﬁned by the sequence of sublevel sets according to f , where the sublevel set of value i is deﬁned as
Σi = {σ ∈ Σ|f (σ) ≤ i}. Then, given the ﬁltration f deﬁned on each input image we can obtain the corresponding
persistence diagram using the standard algorithm [11]. In this analysis, we focus on points of the persistence
diagram representing 1-cycles only and we discard the remaining ones.

During the second stage, we generate a persistence image [1] for each persistence diagram computed in the
ﬁrst stage. Intuitively, a persistence image is a regular grid discretizing the density of persistence pairs in each
portion of the persistence diagram. Each persistence pair (i, j) in a persistence diagram is ﬁrst transformed into
a birth-death coordinates representation with (x, y) = (i, j − i). Then, a persistence image is obtained by ﬁtting
a Gaussian kernel distribution upon each persistence pair (x, y) deﬁned as:

g(x, y) =

1
2πσ2 e−[(x−ux)2+(y−uy)2]/2σ2

with mean u = (ux, uy) and σ = 0.01. Each distribution is sampled on a n = 10 × 10 grid and weighted by the
function

wb(y) =






0,
y
b ,
1,

if y ≤ 0
if 0 < y < b
if y ≥ b,

where b is the persistence value of the most persistent feature.

The idea of the third stage is to interpret the input dataset as a higher dimensional point cloud. After
computing the persistence image for each input dataset, we compute a matrix of pairwise distances for all of them
with the 2-norm Minkowski distance, which is deﬁned as D(X, Y ) = (cid:112)(cid:80)n
i=1 |pi − qi|2, where X and Y denote
two persistence images, pi and qi are the i-th pixels from persistence image X and Y , respectively.

Notice we use persistent images because of their robustness and scalability [1]. However, the metrics D could
be computed directly on the persistent diagram using bottleneck distance [7], Wasserstein distance [8], or similar
metrics [32]. We use the matrix of pairwise distances to obtain a lower-dimensional embedding of the point cloud,
where each point corresponds to an input digit image (associated with a persistence diagram and also a persistence
image).

A number of supervised and unsupervised dimensionality reduction techniques are easily available to the scope.
In our analysis we use three methods simultaneously, namely, Isomap[3], Multi-dimensional Scaling (MDS)[30],
and t-distributed Stochastic Neighbor Embedding (t-SNE)[28]. Figure 1 shows an example of the embedding
obtained with Isomap.

The whole process is computationally eﬃcient and scalable. All our experiments were run on a Desktop
computer mounting a Core i7-8700 3.20 GHz processor and 32 GB of RAM. In the ﬁrst stage we used a dedicated
TTK plugin for computing persistent homology and persistence cycles on each image [15]. This step requires less
than 50MB of RAM and less than a second per image. In the second and third stages, the peak memory usage

Copyright © 2022 by SIAM
Unauthorized reproduction of this article is prohibited

for computing the persistent images and the lower dimension embedding (including the distance matrix) is less
than 100MB, and the computation time is around 120 seconds. All computations are performed oﬄine and the
results saved in dedicated ﬁles used during the interactive phase.

2.2 Visualization and user interactions. The lower-dimensional embedding obtained with standard data
science libraries [3, 30, 28] is directly visualized as a 2D scatterplot. Figure 1 shows the results obtained with
Isomap [3]. We can notice that Isomap is preserving the information about the input digit similarities. We
recall that the analysis pipeline focuses on 1-cycles (see Section 2.1). Thus, it is not surprising that the lower-
dimensional embedding highlights three classes of similarity among the input digits: digits with one distinct
1-cycle (e.g., 6,9,0), digits with two distinct 1-cycles (e.g., 8), and digits with no 1-cycles (e.g., 1,2,3,4,5,7).

Figure 1: Three zoomed views of the lower dimensional embedding created by Isomap. Each view is color-coded
to indicate where it was sampled from. We can notice that each branch of the Isomap embedding isolates digits
with zero highly persistent 1-cycles (blue), two 1-cycles (red), or one 1-cycle (green).

It is fairly easy for a user who is experienced in TDA and persistent homology to interpret the representation.
However, what about an inexperienced one? To address this need, TopoEmbedding allows any user to visually
explore the lower-dimensional embedding and its corresponding persistence images along with the 1-cycles.
When the user selects a point in the scatter plot, TopoEmbedding will display the corresponding persistence
image (see Figure 2a left) in a diverging blue-red color map. Red pixels indicate high-density regions that
contain more persistence pairs than the blue pixels. The visualization of the persistence image is also paired with
the input digit image, and the persistence cycles [15] (see Figure 2a right), an explicit visualization of 1-cycles
originated and destroyed by the ﬁltration. We recall that persistent homology associates an importance value
(i.e., persistence) to each feature according to its lifespan in the ﬁltration. Using this information, we are able to
provide a ﬁltering tool allowing users to remove cycles according to their importance (see Figure 2b).

Figure 2:
(a) Example of a persistence image and the corresponding persistence cycles as rendered in
TopoEmbedding. The persistence image is visualized as a grid of resolution n = 10 × 10 and with pixel values
color-coded according to a diverging (blue-red) color map. The 1-cycles (right) are displayed upon the digit as
collections of blue lines indicating the boundary of a hole originated by the ﬁltration. (b) Cycles can be ﬁltered
according to their persistence. This allows to update the visualization focusing on the most important features
captured by persistent homology. On the left we show unﬁltered cycles as computed by persistent homology. On
the right we show only the most persistent cycles.

Copyright © 2022 by SIAM
Unauthorized reproduction of this article is prohibited

By selecting two digits, the user can compare their corresponding descriptors and topological features. The
two persistence images are juxtaposed, and a line chart (see Figure 3a) shows the pixel-wise diﬀerence between
two persistence images with values sorted in ascending order. To highlight diﬀerences between the two persistence
images, the user can threshold their pixels setting the minimum and maximum pixel-wise diﬀerence. As a result,
only pixels within such range will be visualized at full opacity (see Figure 3b).

Figure 3: (a) Line chart showing the pixel-wise diﬀerence between the two persistence images selected. The
green background in the line chart indicates the pixel-wise diﬀerence selected as threshold. (b) After reducing the
thresholding area focusing on pixels with the highest pixel-wise diﬀerence, the green area in the chart is resized as
well as all pixels in the persistence images excluded by the same threshold are displayed with higher transparency
colors.

The interface components can be used to explore similarities and diﬀerences between a pair of persistence
images. At the same time, diﬀerences in the corresponding topological features (i.e., persistence cycles) visualized
in the input data domain space explain the causes of such diﬀerences in an interpretable manner.

As an example, Figure 4 illustrates a possible use case speciﬁc to the MNIST dataset. The digit 8 highlighted
in blue in Figure 4 correctly belongs to the branch of the Isomap embedding containing most 8 digits (i.e., those
containing two cycles).

Figure 4: While the digit 8 highlighted in blue belongs to the correct branch where most digits 8 are, a few digits
in the MNIST dataset are being classiﬁed as belonging to the wrong branch of the Isomap embedding. One of
these is digit 6 highlighted in red. While the corresponding persistence image does not clarify why the digit is
classiﬁed similarly to an 8, the explicit visualization of the 1-cycles shows that the underlying ﬁltration created
two highly persistent 1-cycles. The other way around, the digit 8 highlighted in green ends up far away from its
corresponding branch. Once again, the visualization of the 1-cycles shows that there are not highly persistent
1-cycles in this ﬁltration, explaining why the digit ends up in said position.

Close to such digit, we found digit 6 highlighted in red. This digit should not belong to this branch since it
should be characterized by one 1-cycle. If we compare the most diﬀerent pixels in the corresponding persistence
images, it is still diﬃcult to interpret why one digit is being classiﬁed as close to the other. However, if we look
at the explicit representation of 1-cycles (Figure 4), we notice that both ﬁltrations create two high persistent
1-cycles. This explains why digit 6 is being classiﬁed similarly to digit 8.

Copyright © 2022 by SIAM
Unauthorized reproduction of this article is prohibited

The same reason can be applied to a digit 8 (highlighted in green), which ends far away in the embedding from
the ﬁrst digit 8 (highlighted in blue). Once again, the corresponding persistence image is hard to interpret for
humans. However, if we combine the persistence image with an explicit representation of the persistence cycles,
we can realize that no highly persistent cycles are being captured for this digit. This explains why this digit is
classiﬁed as having no cycles and, for this reason, is being correctly grouped with similar digits (e.g., 1,2,3, etc.)

3 Conclusions

We have presented TopoEmbedding, a web-based TDA tool to assist in the visualization and analysis of persistent
homology. The source code of our analysis pipeline and the implementation of TopoEmbedding can be found
at https://github.com/DaVisLab/TopoEmbedding. TopoEmbedding represents a proof-of-concept highlighting
the importance of interactive visualizations for TDA. In this work, we used a 2D dataset (e.g., MINIST) to
demonstrate the functionality of TopoEmbedding. However, we are interested in applying similar strategies for
In such a context,
the analysis of 3D datasets where the direct rendering of volumetric images is unfeasible.
the visualization of 1-cycles and 2-cycles (surfaces indicating the boundary of voids) could become crucial for
interpreting the results of the TDA pipeline.

References

[1] H. Adams, T. Emerson, M. Kirby, R. Neville, C. Peterson, P. Shipman, S. Chepushtanova, E. Hanson,
F. Motta, and L. Ziegelmeier, Persistence images: A stable vector representation of persistent homology, Journal
of Machine Learning Research, 18 (2017).

[2] H. Adams, A. Tausz, and M. Vejdemo-Johansson,

javaPlex: A research software package for persistent
in Mathematical Software – ICMS 2014, H. Hong and C. Yap, eds., vol. 8592, Springer Berlin

(co)homology,
Heidelberg, 2014, pp. 129–136, https://doi.org/10.1007/978-3-662-44199-2_23.

[3] M. Balasubramanian and E. L. Schwartz, The isomap algorithm and topological stability, Science, 295 (2002),

pp. 7–7, https://doi.org/10.1126/science.295.5552.7a.

[4] U. Bauer, M. Kerber, and J. Reininghaus, Distributed computation of persistent homology, in 2014 Proceedings of
the Sixteenth Workshop on Algorithm Engineering and Experiments (ALENEX), C. C. McGeoch and U. Meyer, eds.,
Society for Industrial and Applied Mathematics, May 2014, pp. 31–38, https://doi.org/10.1137/1.9781611973198.
4.

[5] U. Bauer, M. Kerber, J. Reininghaus, and H. Wagner, Phat – persistent homology algorithms toolbox, Journal

of Symbolic Computation, 78 (2017), pp. 76–90, https://doi.org/10.1016/j.jsc.2016.03.008.

[6] J. Bezanson, A. Edelman, S. Karpinski, and V. B. Shah, Julia: A fresh approach to numerical computing, SIAM

Rev., 59 (2017), pp. 65–98, https://doi.org/10.1137/141000671.

[7] D. Cohen-Steiner, H. Edelsbrunner, and J. Harer, Stability of persistence diagrams, Discrete Comput Geom,

37 (2007), pp. 103–120, https://doi.org/10.1007/s00454-006-1276-5.

[8] D. Cohen-Steiner, H. Edelsbrunner, J. Harer, and Y. Mileyko, Lipschitz functions have Lp-stable persistence,

10 (2010), pp. 127–139, https://doi.org/10.1007/s10208-010-9060-6.

[9] O. Delgado-Friedrichs, Diamorse: digital image analysis using discrete morse theory and persistent homology,

2015.

[10] T. K. Dey, T. Hou, and S. Mandal, Persistent 1-cycles: Deﬁnition, computation, and its application,

in
Computational Topology in Image Context, R. Marﬁl, M. Calder´on, F. D´ıaz del R´ıo, P. Real, and A. Bandera, eds.,
vol. 11382, Springer International Publishing, 2019, pp. 123–136, https://doi.org/10.1007/978-3-030-10828-1_
10.

[11] H. Edelsbrunner, D. Letscher, and A. Zomorodian, Topological persistence and simpliﬁcation, Discrete and

Computational Geometry, 28 (2002), pp. 511–533, https://doi.org/10.1007/s00454-002-2885-2.

[12] R. Ghrist, Barcodes: The persistent topology of data, Bull. Amer. Math. Soc., 45 (2007), pp. 61–76, https:

//doi.org/10.1090/S0273-0979-07-01191-3.

[13] C. Heine, H. Leitte, M. Hlawitschka, F. Iuricich, L. De Floriani, G. Scheuermann, H. Hagen, and
C. Garth, A survey of topology-based methods in visualization, Computer Graphics Forum, 35 (2016), pp. 643–667,
https://doi.org/10.1111/cgf.12933.

[14] G. Henselman and R. Ghrist, Matroid ﬁltrations and computational persistent homology, arXiv preprint

arXiv:1606.00199, (2016), https://doi.org/10.48550/ARXIV.1606.00199.

[15] F. Iuricich, Persistence cycles for visual exploration of persistent homology, IEEE Transactions on Visualization and

Computer Graphics, (2021), p. early access, https://doi.org/10.1109/TVCG.2021.3110663.

Copyright © 2022 by SIAM
Unauthorized reproduction of this article is prohibited

[16] M. Juda and M. Mrozek, CAPD::RedHom v2 - homology software based on reduction algorithms, in Mathematical
Software – ICMS 2014, H. Hong and C. Yap, eds., vol. 8592, Springer Berlin Heidelberg, 2014, pp. 160–166,
https://doi.org/10.1007/978-3-662-44199-2_27. Series Title: Lecture Notes in Computer Science.

[17] C. Maria, J.-D. Boissonnat, M. Glisse, and M. Yvinec, The Gudhi library: Simplicial complexes and persistent
homology, in Mathematical Software – ICMS 2014, H. Hong and C. Yap, eds., vol. 8592, Springer Berlin Heidelberg,
2014, pp. 167–174, https://doi.org/10.1007/978-3-662-44199-2_28. Series Title: Lecture Notes in Computer
Science.

[18] J. Milnor, Morse Theory.

(AM-51), Princeton University Press, 12 1963, https://doi.org/10.1515/

9781400881802.

[19] K. Mischaikow and V. Nanda, Morse theory for ﬁltrations and eﬃcient computation of persistent homology,

Discrete Comput Geom, 50 (2013), pp. 330–353, https://doi.org/10.1007/s00454-013-9529-6.

[20] D. Morozov, Dionysus, a c++ library for computing persistent homology, 2007.
[21] J. R. Munkres, Elements of Algebraic Topology, CRC Press, 1 ed., Mar 2018, https://doi.org/10.1201/

9780429493911.

[22] I. Obayashi, Homcloud - a data analysis software based on persistent homology, 2020, https://homcloud.dev/index.

en.html.

[23] F. Quinn, ed., Prospects in Topology (AM-138): Proceedings of a Conference in Honor of William Browder. (AM-

138), Princeton University Press, Dec 1996, https://doi.org/10.1515/9781400882588.

[24] G. Reeb, Sur les points singuliers d’une forme de pfaﬀ completement integrable ou d’une fonction numerique [on
the singular points of a completely integrable pfaﬀ form or of a numerical function], Comptes Rendus Acad. Sciences
Paris, 222 (1946), pp. 847–849.

[25] N. Saul and C. Tralie, Scikit-TDA: Topological data analysis for python, 2019, https://doi.org/10.5281/zenodo.

2533369.

[26] G. Singh, F. Memoli, and G. Carlsson, Topological methods for the analysis of high dimensional data sets and

3d object recognition, 2007, https://doi.org/10.2312/SPBG/SPBG07/091-100.

[27] J. Tierny, G. Favelier, J. A. Levine, C. Gueunet, and M. Michaux, The Topology ToolKit, IEEE Transactions
on Visualization and Computer Graphics, 24 (2018), pp. 832–842, https://doi.org/10.1109/TVCG.2017.2743938.
[28] L. Van der Maaten and G. Hinton, Visualizing data using t-SNE, Journal of machine learning research, 9 (2008).
[29] M. Van Kreveld, R. van Oostrum, C. Bajaj, V. Pascucci, and D. Schikore, Contour trees and small seed
sets for isosurface traversal, in Proceedings of the thirteenth annual symposium on Computational geometry, 1997,
pp. 212–220.

[30] A. R. Webb, Multidimensional scaling by iterative majorization using radial basis functions, Pattern Recognition, 28

(1995), pp. 753–759, https://doi.org/10.1016/0031-3203(94)00135-9.

[31] L. Yan, T. B. Masood, R. Sridharamurthy, F. Rasheed, V. Natarajan, I. Hotz, and B. Wang, Scalar ﬁeld
comparison with topological descriptors: Properties and applications for scientiﬁc visualization, Computer Graphics
Forum, 40 (2021), pp. 599–633, https://doi.org/10.1111/cgf.14331.

[32] L. Yan, T. B. Masood, R. Sridharamurthy, F. Rasheed, V. Natarajan, I. Hotz, and B. Wang, Scalar ﬁeld
comparison with topological descriptors: Properties and applications for scientiﬁc visualization, 40 (2021), pp. 599–
633, https://doi.org/10.1111/cgf.14331.

[33] A. Zomorodian and G. Carlsson, Computing persistent homology, Discrete Comput Geom, 33 (2005), pp. 249–274,

https://doi.org/10.1007/s00454-004-1146-y.

Copyright © 2022 by SIAM
Unauthorized reproduction of this article is prohibited

