Astronomy & Astrophysics manuscript no. main
May 20, 2022

©ESO 2022

Pandora: A fast open-source exomoon transit detection algorithm

Michael Hippke1, 2 and René Heller3, 4

1 Sonneberg Observatory, Sternwartestraße 32, 96515 Sonneberg, Germany

e-mail: michael@hippke.org

2 Visiting Scholar, Breakthrough Listen Group, Berkeley SETI Research Center, Astronomy Department, UC Berkeley
3 Max-Planck-Institut für Sonnensystemforschung, Justus-von-Liebig-Weg 3, 37077 Göttingen, Germany

e-mail: heller@mps.mpg.de

4 Institut für Astrophysik, Georg-August-Universität Göttingen, Friedrich-Hund-Platz 1, 37077 Göttingen, Germany

2
2
0
2

y
a
M
9
1

]
P
E
.
h
p
-
o
r
t
s
a
[

1
v
0
1
4
9
0
.
5
0
2
2
:
v
i
X
r
a

Received 17 January 2022

ABSTRACT

We present Pandora, a new software to model, detect, and characterize transits of extrasolar planets with moons in stellar photometric
time series. Pandora uses an analytical description of the transit light curve for both the planet and the moon in front of a star with
atmospheric limb darkening and it covers all cases of mutual planet-moon eclipses during transit. The orbital motion of the star-
planet-moon system is computed with a high accuracy as a nested Keplerian problem. We have optimized Pandora for computational
speed to make it suitable for large-scale exomoon searches in the new era of space-based high-accuracy surveys. We demonstrate the
usability of Pandora for exomoon searches by ﬁrst simulating a light curve with four transits of a hypothetical Jupiter with a giant
Neptune-sized exomoon in a one-year orbit around a Sun-like star. The 10 min cadence of the data matches that of the upcoming
PLATO mission and the noise of 100 parts per million is dominated by photon noise, assuming a photometrically quiet, mV = 11
Sun-like star for practicality. We recovered the simulated system parameters with the UltraNest Bayesian inference package. The
run-time of this search is about ﬁve hours on a standard computer. Pandora is the ﬁrst photodynamical open-source exomoon transit
detection algorithm, implemented fully in the python programming language and available for the community to join the search for
exomoons.

Key words. methods: data analysis – occultations – planets and satellites: detection – stars: solar-type – techniques: photometric

1. Introduction

While the search for planets beyond the Solar System (exoplan-
ets) has greatly beneﬁted from the transit method in search for
periodic occultations of a star by its planets (e.g., Batalha et al.
2013; Zeng et al. 2019), no moon around any exoplanet has
been securely discovered as of today. With over 3400 exoplan-
ets found by the transit method, we naturally wonder if any ex-
omoons could be detected around them. The detection of exo-
moon transits is very diﬃcult due to the complex orbital mo-
tion, the occurrence of combined transits of an exoplanet with its
moon (or moons), possible planet-moon eclipses, and potentially
due to the small physical radii of exomoons, all of which make
phase-folding approaches similar to those used for transiting ex-
oplanets (Kovács et al. 2002; Hippke & Heller 2019) ineﬃcient.
Indeed, methods like the orbital sampling eﬀect (Heller 2014)
or transit origami (Kipping 2021) neglect about half of the tiny
signal, details depending on the planet-moon orbital separation,
and the transit geometry (Heller & Hippke 2021).

Photodynamical modeling, on the other hand, is computa-
tionally extremely costly as it consists of up to 19 free param-
eters for inclined, eccentric orbits. Kipping et al. (2013) report
49.7 yr of CPU time for a single system using a similar com-
puting infrastructure and multimodal nested sampling regres-
sion. Kipping et al. (2015) report a mean value of 33,000 hr of
CPU time per planet-moon system on an unquantiﬁed number of
AMD Opteron 6272 and 6282 SE processors. These times were
recorded in a search for transiting exoplanets with exomoons in
a sample of 41 light curves from quarters Q0-Q17 of the Ke-

pler mission using the MultiNest ﬁtting software (Feroz et al.
2009).

Beyond the LUNA Fortran code (Kipping 2011) for transiting
exoplanet-exomoon systems, other algorithms for the modeling
of mutual transiting and eclipsing bodies exist. planetplanet
(Luger et al. 2017), software written in C and wrapped in a
python interface, is taylored to model multitransiting exoplanet
systems and it includes an analytical framework for the model-
ing of planet-planet mutual eclipses. Given the recent announce-
ments of transiting exomoon candidates around Kepler-1625
(Teachey et al. 2018) and Kepler-1708 (Kipping et al. 2022) and
the lack of available computer code to investigate these and fu-
ture exomoon claims independently, an open-source exomoon
transit detection algorithm is very desirable for the community.
Here we present Pandora, the ﬁrst open-source exomoon
transit detection algorithm1 using a full photodynamical model.
This state-of-the-art algorithm for exomoon transit modeling and
searches requires just a few hours of CPU time for a Kepler-like
light curve, which is about four orders of magnitude faster than
previous algorithms, of which a factor of a few is due to today’s
faster CPUs. Pandora’s speed gain is made possible through ef-
ﬁcient computer code implementation in the python program-
ming language (e.g., using a just-in-time compilation of python
code using numba (Lam et al. 2015)), a number of acceptable
physical simpliﬁcations (e.g., eccentricity approximations), the
symmetry of prograde and retrograde orbits, modern sampling
algorithms, and other computational advances.

1 www.github.com/hippke/pandora

Article number, page 1 of 16

 
 
 
 
 
 
A&A proofs: manuscript no. main

2. Physical model

2.1. Parameterization

At the heart of Pandora sits a photodynamical model of a planet
with a single moon that transits their common host star. Both the
planet (with mass Mp) and its moon (with mass Mm) orbit their
common center of mass (with mass Mb = Mp + Mm) in Keplerian
orbits. The orbit of the planet-moon barycenter around the star
is parameterized by the midtime of the ﬁrst barycenter transit in
a given transit sequence (t0), the orbital period of the barycenter
around the star (Pb), the semi-major axis of the barycenter or-
bit around the star (ab), and the transit impact parameter of the
barycenter (bb). In general, the transit impact parameter can be
parameterized in terms of the orbital inclination with respect to
the line of sight as per bb = ab tan(π/2 − ib)/Rs, where ib = π
corresponds to an edge-on perspective.

Moving on to the parameterization of the planet-moon sys-
tem, the planet has a radius Rp and the moon has a radius Rm. In
Pandora, spatial dimensions are measured in units of the stellar
radius and time is measured in units of days. As a consequence,
the planet and moon radius, as well as the barycenter’s orbital
semi-major axis, are used as fractions of Rs, that is, as (Rp/Rs),
(Rm/Rs), and (ab/Rs). By default, the orbit of Mb is assumed to
have zero eccentricity (eb = 0), but users can choose e > 0 and
then they would need to deﬁne the orientation of the periastron
with respect to the line of sight ((cid:36)b) as well.

The orbits of the planet and the moon around their local
center of mass are modeled as Keplerian orbits. By default, the
planet-moon orbital eccentricity is zero, but users can parameter-
ize nonzero eccentricities (epm). In the default mode, the planet-
moon orbit is modeled with an additional ﬁve parameters: orbital
inclination ipm, longitude of the ascending node (Ωpm), semima-
jor axis (apm), orbital period (Ppm), and time of periapsis passage
(τpm). In Pandora, τpm is normalized with respect to Ppm, that
is τpm ∈ (0, 1). This choice is motivated by a signiﬁcant boost
in the convergence speed of our Monte Carlo sampling method
(Sect. 3). For the calculation of the position of the planet and
the moon on their elliptical orbit, however, we used τPpm. For
eccentric orbits, the number of orbital elements increases to six,
including epm and the argument of periapsis (ωpm). Finally, the
moon mass Mm is required to model the motion of the planet and
moon around their joint barycenter.

The star is parameterized by Rs and two limb darkening coef-
ﬁcients (u1, u2) for the quadratic limb darkening law (Manduca
et al. 1977). The quadratic limb darkening law is widely used
in the exoplanet community because it reproduces stellar limb
darkening suﬃciently well for modern applications with space-
based high-accuracy stellar photometry and because Mandel &
Agol (2002) derived an analytical solution to the resulting light
curve for transiting planets. The stellar mass (Ms) follows di-
rectly from the barycentric orbital mean motion nb = 2π/Pb and
Mb via Kepler’s third law as Ms = n2
b/G − Mb, where G is the
gravitational constant.

ba3

2.2. Circumstellar orbital eccentricity

Our three-body system is a typical nested Keplerian system. For
one thing, we assume that the orbits of the planet and the moon
are not perturbed by the stellar gravitational force and that they
orbit their common local barycenter in eccentric orbits. For an-
other thing, we assume that the planet-moon barycenter follows
a Keplerian orbit itself around the star.

Article number, page 2 of 16

As for the orbit of Mb, we are not interested in the full orbital
revolution, but instead focus on an orbital section around the pe-
riodic transits. In our frame of reference (Fig. 1), the line of the
periapsis and the line of sight embraced an angle (cid:36)b, while the
actual position of Mb on its orbit relative to the periapsis is given
by the true anomaly ( f ). We plotted the orientation of the peri-
apsis along the x-axis, in which case the orbital velocity of Mb
is given as (Murray & Dermott 1999)

v = (vx, vy) = nb ab
#»
1 − e2
b

(cid:113)

(cid:16)

(cid:17)
− sin( f ), e + cos( f )

.

(1)

We are interested in the velocity component that is tangential
with the celestial plane (perpendicular to the observer’s line of
sight), that is to say, the sky-projected velocity. We describe this
#»
e r
direction by a unit vector
for the (negative) radial velocity component:

#»
e t and we introduced a unit vector

e r = (cid:16)
#»
e t = (cid:16)
#»

cos( f ), sin( f )

(cid:17)

− sin( f ), cos( f )

(cid:17)
.

(2)

(3)

The projection of

#»
v on

#»
e r, which we refer to as

#»
v r, is given as

#»
e r)

#»
v | cos (cid:94)(
#»
v ,

#»
v r = |
where α ≡ (cid:94)(
#»
#»
e r can be calculated as
v and

#»
v ,
#»
e r) (Fig. 1). The cosine of this angle between

#»
v | cos(α)

#»
e r = |

#»
e r ,

(4)

cos(α) =

#»
v
#»
v | |

#»
e r
#»
e r|

|

=

(cid:112)

eb sin( f )
sin( f )2 + (eb + cos( f ))2

.

Plugging Eq. (5) into Eq. (4) yields

v r = nb ab eb
#»
(cid:113)
1 − e2
b

(cid:16)

sin( f ) cos( f ), sin( f )2(cid:17)

.

(5)

(6)

Analogously, projection of

#»
v on

#»
e t, which we refer to as

#»
v t,

yields

#»
v t = |

#»
v | cos (cid:94)(

#»
v ,

#»
e t)

#»
e t = |

#»
v | cos(β)

#»
e t ,

with

cos(β) =

#»
v
#»
v | |

#»
e t
#»
e t|

|

=

1 + eb cos( f )
sin( f )2 + (eb + cos( f ))2

(cid:112)

.

Plugging Eq. (8) into Eq. (7) yields

(cid:16)

v t = nb ab
#»
(cid:113)
1 − e2
b

1 + eb cos( f )

(cid:17)(cid:16)

(cid:17)
− sin( f ), cos( f )

.

(7)

(8)

(9)

For our purpose of using the midtransit tangential velocity, we
set f = (cid:36)b and found

(cid:16)

|

v t| = nb ab
#»
(cid:113)
1 − e2
b

1 + eb cos((cid:36)b)

(cid:17)

,

(10)

Michael Hippke and René Heller: Pandora: A fast open-source exomoon transit detection algorithm

Table 1. Model parameters

Fig. 1. Orbit geometry of the planet-moon barycenter (Mb) on its ec-
centric circumstellar orbit as used in Pandora. The situation depicted
in this illustration corresponds to the midtransit time, when the true
anomaly coincides with the orientation of the periastron ((cid:36)b). Noth-
ing is to scale in this illustration. The bottom part of the ellipse has been
spared for illustration purposes.

(cid:113)

and using p = 2Rs
constructed the transit duration of a point-like Mb as

b as the transit path across the star, we

1 − b2

d = p
#»
v t|
|

=

(cid:113)

(cid:113)

2Rs

nb ab

1 − e2
1 − b2
b
b
(cid:17) .
(cid:16)
1 + eb cos((cid:36)b)

(11)

In Appendix A we extend these considerations to the tangen-
tial transit velocity during ingress and egress and demonstrate
that our assumption of constant in-transit velocity of the planet-
moon barycenter produces errors of much less than 1 part per
million (ppm) even under very unfavorable conditions. Most im-
portantly, Eq. (11) is computationally much faster than using a
Kepler solver for the barycentric orbital motion around the star.

2.3. Planet and moon orbits around the local barycenter

The relative positions of the planet and its moon with respect to
their local center of mass are calculated using a 2D Kepler solver.
By default, Pandora assumes a circular orbit as the standard
parameterization for large-scale exomoon surveys in hundreds
to thousands of light curves with known transiting exoplanets.
With epm = 0 and (cid:36)pm = 0, the 2D Kepler solver requires four of
the usual six Keplerian elements plus the time of any given data
point as input parameters. It then returns the positions of both
bodies using the analytical solution of the circular Kepler orbit
and without any costly iterative approximations (Appendix C.3).
Hence, in Pandora’s default mode, the CPU run time of the 2D
Kepler solver is as costly as any analytic approximation.

For eccentric planet-moon orbits, which might be interest-
ing to study in more detail for potential exomoon candidates or
to examine eclipse phenomena, etc., Pandora solves the Kepler
equation using the approach by Markley (1995) similarly to the
implementation in PyAstronomy (Czesla et al. 2019). The solu-
tion is built on a ﬁfth-order reﬁnement of a cubic equation. It can
be executed in a single iteration and requires the calculation of
four transcendental functions.

The star is at the origin of our (x, y) coordinate system and
all distances are measured in stellar radii. The distance of the
center of any transiting body (planet or moon) from the center
of the stellar disk, which is required for the ﬂux calculations, is
thus simply given as

x2 + y2.

(cid:112)

Before calculating any data points for the Kepler ellipse,
however, Pandora estimates if the planet-moon barycenter is

Star
Rs
u1, u2
Barycenter
Pb
t0,b
ab
bb
eb
(cid:36)b
Planet
Rp
Mp
Moon
Rm
Ppm
ipm
Ωpm
(cid:36)pm
epm
τpm
Mm

Description
Stellar radius
Limb darkening

Period
Time of inferior conjunction
Semimajor axis
Transit impact parameter
Eccentricity
Argument of periapsis

Radius
Mass

Radius
Period
Inclination
Longitude of the ascending node
Argument of periapsis
Eccentricity
Time of periapsis passage
Mass

Unit
m
1

days
days
R(cid:12)
1
1
deg

R(cid:12)
kg

R(cid:12)
days
deg
deg
deg
deg
1
kg

suﬃciently close to the stellar disk for any transits to occur in
the ﬁrst place. If the planet-moon barycenter is farther away from
the origin of the coordinate system than the sum of the stellar ra-
dius and the maximum possible deﬂection of the moon from the
planet, (1 + apm)epm, then occultations are geometrically impos-
sible. In this case, no calculations are made and the ﬂux in the
model light curve is set to 1. This saves CPU time out of transit.
Pandora’s planet-moon orbit module has a maximum
throughput between 14 million (if e > 0) and 21 million (if
e = 0) data points per second per core on an Intel i7-1185G7
processor.

2.4. Stellar ﬂux and limb darkening

To calculate the apparent stellar ﬂux during transits of the planet-
moon pair, we used the analytical equations of Mandel & Agol
(2002). Our code was adapted from PyTransit (Parviainen
2015), which was released under the GPL open source license.
Pandora’s transit module requires the distance between the cen-
ters of the star and the transiting body (provided as a series of
values by Pandora’s Kepler ellipse module), the radius of the
transiting circle in units of the stellar radius, and the quadratic
limb darkening parameters. It returns the series of ﬂux values
where an unocculted star is set to unity.

To speed up calculations, Pandora uses a hybrid occultation
model, where the small-body approximation (Mandel & Agol
2002) where constant stellar limb darkening behind the occulted
area is assumed whenever appropriate. The error of the small-
body approximation is most pronounced during transit ingress
and egress. But even then, it is typically on the order of 1 ppm,
as long as Rp/Rs < 0.01, and it only accounts for about 1 % of
the transit duration, with details depending on the transit impact
parameter. For bodies with sizes 0.01 < Rp/Rs < 0.05, Pandora
employs a hybrid model. It calculates two exact values and lin-
early interpolates intermediate values from the small-planet ap-
proximation. The resulting model ﬂuxes are accurate to < 1 ppm
in all cases (see Appendix C.2).

Article number, page 3 of 16

⇀⇀⇀veretline of sightαβMbstar𝜛yxrγRsγ+bA&A proofs: manuscript no. main

In case of ﬁxed limb-darkening parameters during sam-
pling, Pandora creates a lookup table of occultation values
before the sampling commences. This procedure calculates a
2D grid of occultation values covering planet-to-star radius ra-
tios 0 < (Rp/Rs) < 0.2 and distances from the stellar center
0 < z < 1 + (Rp/Rs) with 300 values along each axis, which we
veriﬁed to result in errors < 1 ppm. Afterwards, the occultation
values are calculated for each model from this rectilinear 2D grid
with a bilinear interpolation from their nearest neighbors. This
procedure only requires four ﬂoats to be obtained from mem-
ory, and at most eight multiplications, one division, and thirteen
additions per data point.

The throughput of Pandora’s transit algorithm is 16 million
data points per second per core on an Intel i7-1185G7 processor
for Rp/Rs > 0.05, 48 million for Rp/Rs = 0.02, and 110 million
for Rp/Rs < 0.01. For cached values (in the case of ﬁxed limb
darkening), the maximum throughput is 200 million points per
second, which is more than ten times the number of a regu-
lar calculation as per Mandel & Agol (2002). In combination
with our approximation for the transit duration in eccentric or-
bits (Sect. 2.2), ﬁtting planet-only models with Pandora is up to
ﬁfty times faster than batman (Kreidberg 2015). We show a per-
formance comparison of all methods as a function of the number
of data points in Appendix C.2.

2.5. Planet-moon eclipses

As long as the planet and the moon transit the star without mu-
tual eclipses, Pandora treats these synchronous transits sepa-
rately, as if the star were occulted by two independent spherical
bodies. If, however, the circles of the planet and the moon over-
lap during ingress or egress of at least one of the two bodies, then
things become more complicated. Hence, planet-moon eclipses
during ingress or egress require special treatment.

In his derivation of the equation for the area of common over-
lap of three circles, Fewell (2006) identiﬁed nine cases for the
intersection of three circles in a plane. His case (1) presents a
circular triangle, for which an analytic solution did not exist un-
til then. Kipping (2011) extended this system to 27 cases for var-
ious star-planet-moon arrangements plus speciﬁc subcases, all
of which are distinguished by speciﬁc conditions of the rela-
tive distances and radii of the three circles. Our approach with
Pandora is much more pragmatic, though still computationally
aﬀordable and numerically accurate to arbitrary levels. Pandora
distinguishes only between two cases of a planet-moon eclipse
and still covers all possible cases of previous studies.

2.5.1. Planet-moon eclipses and no contact with the stellar

limb

the order of a few seconds for realistic planet-moon systems. As
a consequence, it is irrelevant for the computation light curve
whether the moon is physically located in front of the planet or
behind the planet during eclipse.

The decrease in the stellar apparent brightness due to the
planet and the moon were initially calculated separately. Then
we analytically calculated the area of the asymmetric lens de-
ﬁned by the intersection of the two circles (see Eq. 13 in Heller
et al. 2016a) and, assuming that the stellar limb darkening is con-
stant under this small area, compensated for the twofold consid-
eration of this small area analytically in the initial calculation.
The resulting error is < 0.1 ppm. The throughput of Pandora’s
eclipse case (1) is 2 billion data points per second per core.

2.5.2. Planet-moon eclipses in contact to the stellar limb

Pandora’s eclipse case (2) occurs if at least one of the transit-
ing bodies touches the stellar limb during a planet-moon eclipse.
Then the area of common overlap of the three circles is inte-
grated numerically and the correction of the light curve is per-
formed as for Pandora’s eclipse case (1) assuming constant stel-
lar limb darkening for this small area.

This numerical treatment is illustrated in Fig. 2. Panel (a)
shows a sketch of three overlapping circles, where the black line
depicts the stellar limb, the blue circle the planet, and the orange
circle the moon. The dashed rectangle denotes the region shown
in the zoom in panel (a), where we show a pixelated representa-
tion of the moon. In this particular case, the moon has a diameter
of 25 pixels. In Appendix B we demonstrate that this resolution
is suﬃcient to reduce the resulting numerical error below 1 ppm.
The diﬀerent colors for the diﬀerent areas of overlap in Fig. 2(b)
were chosen solely for illustrative purposes. In particular, the
white area in the upper left region is the area of common overlap
that Pandora’s numerical eclipse module determines and com-
pensates for in this speciﬁc example.

The throughput of Pandora’s eclipse case (2) is 0.25 million
data points per second and per core. This is relatively slow com-
pared to Pandora’s out-of-eclipse throughput of between 16 and
200 million data points per second and per core (Sect. 2.4). How-
ever, since planet-moon eclipses are only relevant for planet-
moon systems with orbital inclinations less than a few degrees
to the line of sight and since they are usually very short and only
relevant to a few data points, this Pandora module only accounts
for a small fraction of Pandora’s total computing time.

Pandora’s eclipse case (1) is called if the planet and the moon
are both fully on the stellar disk during a mutual event, that is, if

2.6. Supersampling

(cid:113)

1 −

x2
m

+ y2

m < Rm

and

1 −

(cid:113)

x2
p

+ y2

p < Rp

,

(12)

while the distance between their centers (dpm) is smaller than the
sum of their radii,

.

dpm < RP + Rm
Pandora ignores the Rømer eﬀect for exomoons (dubbed “tran-
sit timing dichotomy”; Heller & Albrecht 2014), which is on

(13)

Article number, page 4 of 16

If the exposure time of a light curve is longer than the time
scale of the variation due to the signal, then this signal becomes
temporally smeared (Kipping 2010). In Pandora, this tempo-
ral smearing can be compensated for by using supersampling of
the light curve, which naturally comes at a higher computational
cost and which is thus optional for users.

The supersampling factor can be set to any integer ≥ 1,
where a factor of one corresponds to no supersampling, and a
factor of ﬁve to seven is a sensible upper limit beyond which
additional accuracy gains become marginal. The supersampling
factor has a near-linear inﬂuence on the model calculation time.

Michael Hippke and René Heller: Pandora: A fast open-source exomoon transit detection algorithm

Fig. 2. Planet-moon eclipse in contact with the stellar limb. (a) The planet (blue circle) and the moon (orange circle) are both in front of the star
(black circle segment) and in eclipse. (b) Numerical pixel grid representing the moon. Diﬀerent areas of overlap are shaded in arbitrary colors. In
this speciﬁc conﬁguration, the white area in the upper left region of the image is determined by pixel area summation and then compensated for in
the light curve. The right half of the moon is not transiting.

3. Results

3.1. Pandora software

Pandora is a pure python software implementation of the mod-
ules describes in the previous sections. As for its working proce-
dure, it ﬁrst calculates the position of the planet-moon barycen-
ter for each timestamp t (Sect. 2.2). Then the Kepler ellipse
for the planet-moon binary is computed in order to determine
the (x, y) positions of the two bodies with respect to the stellar
disk (Sect. 2.3). With these positions, the occultation function is
called to construct the ﬂux drop resulting by both bodies sep-
arately (Sect. 2.4). Finally, a check for mutual eclipses and a
correction to the ﬂux is made if necessary (Sect. 2.5).

In total, Pandora consists of 640 source lines of code
(SLOCs) in the python programming language. This includes
the main module and all functions. In addition, Pandora uses
a class-based wrapper function (56 SLOCs) and a video gen-
erator (83 SLOCs). Pandora only depends on the numpy li-
brary (Harris et al. 2020) and the numba just-in-time compiler.
If Pandora’s own occultation code was replaced, for example,
with a call to PyTransit to obtain the occultation values, only
318 SLOCs would remain. This makes Pandora a comparably
small code base. Most other packages have a lot more lines of
code, such as W¯otan (Hippke et al. 2019, 1406 SLOCs), TLS
(Hippke & Heller 2019, 1689 SLOCs), or batman (Kreidberg
2015, 256 SLOCs in python and 976 SLOCs in C), not count-
ing test ﬁles. A smaller code base has the advantage of making
a package easier to understand, debug, and extend. While be-
ing concise, Pandora is also readable with clear variable names,
a logical modular structure, and comments which explain each
code line if necessary.

For debugging purposes and to test the correct implemen-
tation of our model in Pandora, we compared single-body
occultations with limb darkening and super-sampling against
PyTransit and batman, and the planet-moon orbit against
PyAstronomy, including required coordinate transformation to

solve for the Kepler ellipse. All test cases agreed to within
0.01 ppm per data point. We also created a series of test light
curves and the corresponding video animations, and stepped
through these frame by frame to validate each data point.

Pandora is concise and modular. Its individual compo-
nents can be readily understood, tested, and revised as needed.
Pandora is an open source code and we invite the community to
run their own experiments and submit feature requests, ideas for
improvement, and bug reports directly to the GitHub tracker2.
We have previously made very positive experience with commu-
nity contributions to TLS and W¯otan, for which a total of about
30 improved versions have been released over the course of the
ﬁrst two years based on community pull requests (i.e., code con-
tributions), bug reports (usually for small issues and edge cases),
and general modiﬁcations to improve the workﬂow.

Pandora can generate light curves from custom orbital ge-
ometries. These light curves can have arbitrary time sampling
and the data quality can be artiﬁcially reduced with white noise,
for which the amplitude can be set by the users. Pandora can
also create transit animation videos including a star with realis-
tic limb darkening and color (as per Harre & Heller 2021) at a
custom resolution and frame rate. The light curves can be used
for exomoon searches. The videos can be useful for education
and outreach. Pandora can also output the spatial coordinates,
which we found useful for testing and debugging. They could
also be used to compare to observational radial velocity data.

3.2. Pandora output

In Fig. 3 we show an example of an exoplanet-exomoon sys-
tem modeled with Pandora. The star is assumed to have a so-
lar radius and solar-type limb darkening, with u1 = 0.4089 and
u2 = 0.2556 as per Claret & Bloemen (2011) for a star with
a surface gravity of log(g) = 4.5, and an eﬀective temperature
of Teﬀ = 5750 K, a metallicity of [M/H] = 0.0, and zero mi-
2 https://github.com/hippke/Pandora/issues

Article number, page 5 of 16

0.850.900.951.001.051.101.15Distancefromcenterofstar(stellarradii)−0.050.000.050.100.150.20Distancefromcenterofstar(stellarradii)(a)0510152025Pixelnumber0510152025Pixelnumber(b)A&A proofs: manuscript no. main

Fig. 3. Output demo of Pandora for a system of a Sun-like star, a Jupiter-sized planet in a one-year orbit around that star, and a Neptune-sized
moon in a 1.28 d orbit around the giant planet (for details see Sect. 3.2). (a)-(c) Video renderings of the transit. (d) Light curve. The dotted-dashed
orange line shows the transit light curve of the exomoon and the dashed blue line shows the transit light curve of the exoplanet using the analytical
solution in both cases. The yellow parts of the moon and planet light curves illustrate numerical simulations. The solid black line shows the
combined model. Black dots show a simulated observation roughly representative of an mV ∼ 11 Sun-like star from the PLATO mission. Digital
star colors are from Harre & Heller (2021).

croturbulent velocity. The planet-moon barycenter has an orbital
period of 365.25 d around the star and a transit impact parameter
b = 0.3. The planet is as large and as heavy as Jupiter. The moon
is as large and as heavy as Neptune, thus (Mm/Mp = 0.05395),
with an orbital period of 1.28 d around the planet-moon barycen-
ter.

This period, which implies an orbital semi-major axis of
5 Rp, ensures that the moon is beyond the Roche radius of the
planet, which we determined to be at about 2.3 Rp (Weidner
& Horne 2010) under the assumption of ﬂuid-like objects. For
comparison, Io, the innermost of the Galilean moons around
those of Jupiter, is at roughly 6.1 Rp around Jupiter. The planet-
moon orbit is slightly inclined with respect to the line of sight
(ipm = 80◦). We do not claim that our model system is particu-
larly representative of real exomoons. However, it is physically
possible and well-suited to illustrate the features of Pandora.

In addition to the model light curve, we generated a simu-
lated observation that is roughly representative of an idealized,
photometrically quite, Sun-like star as if it were observed by the
PLATO mission. PLATO is expected to launch in 2026 in search
for transiting exoplanets around bright stars (Rauer et al. 2014).
We chose a cadence of 10 min as will be used for PLATO’s P5
stellar sample of ≥ 245, 000 dwarf and subdwarf stars of spectral
types F5-K7 with apparent visual magnitudes 11 ≤ mV ≤ 13.
We added a white noise component to each data point that is ran-
domly drawn from a normal distribution with a standard devia-
tion of 100 ppm. This noise component is roughly representative
of a photometrically quiet Sun-like star from PLATO’s P5 sam-

Article number, page 6 of 16

ple3, but it ignores any kind of astrophysical variability. Specif-
ically, the photon noise from this test star would correspond to
an apparent visual magnitude mV ∼ 11, though the details of the
photon noise ﬂoor also depend on the actual number of cameras
(6, 12, 18, or 24) with which the target is observed. These sim-
ulations assume ideal conditions for the purpose of illustrating
Pandora’s functionality. For details on the actual detectability
of exoplanet transits with PLATO in the presence of stellar noise,
see Heller et al. (2022).

Figure 3(a) shows a snapshot of the video animation gener-
ated with Pandora that is taken during midingress of the moon.
We conﬁgured the system in such a way that the planet is al-
ready in transit when the moon begins its transit. Figure 3(b)
refers to the midtransit time of the planet-moon barycenter, at
which point the planet and the moon exhibit near-maximum tan-
gential deﬂection with respect to the line of sight. In Fig. 3(c)
the planet is in egress during an eclipse, in which case Pandora
switches from the analytical treatment of the light curve to nu-
merical simulations. Figure 3(d) presents the resulting transit
light curve model (solid black line) and simulated PLATO ob-
servation (black dots) as well as a breakdown of the contribu-
tions from the moon (dotted-dashed orange line) and the planet
(dashed blue line). Table 2 summarizes the computing time that
Pandora spent for the various processes.

3 PLATO Deﬁnition Study Report, https://sci.esa.int/s/8rPyPew

(a)(b)(c)(d)numericalFluxTime[days]moontransitplanettransittotaltransittestdata0.9860.9880.9900.9920.9940.9960.9981.000-0.4-0.3-0.2-0.100.10.20.30.40.4Michael Hippke and René Heller: Pandora: A fast open-source exomoon transit detection algorithm

Fig. 4. Simulated planet-moon observations (black points) with a noise amplitude of 100 ppm per data point and a 10 min cadence, roughly
corresponding to an idealized observation of an mV ∼ 11 photometrically quiet Sun-like star in PLATO’s P5 sample. The system is the same as
in Fig. 3 (see Sect. 3.2 for details). (a) Same transit as in Fig. 3(d), but with a new realization of the random noise. From our UltraNest recovery,
we selected 100 model parameters from the posteriors and we show their light curves for the moon (orange), planet (blue), and total (gray) light
curves.

Table 2. Run time breakdown of Pandora for the example system de-
scribed in Sect. 3.2.

3.3. Simulated exomoon search

Module
Moon transit
Overhead
Coordinate transformations
Eclipses
Kepler ellipse
Planet transit

Process
7 %
9 %
15 %
22 %
23 %
24 %

Notes. For the analytical part of the light curve, the moon transit was
computed with the small body approximation and quadratic limb dark-
ening (Mandel & Agol 2002). For the numerical transit simulations,
which Pandora uses if planet-moon eclipses occur during ingress or
egress of one of the two bodies, the moon was modeled with a diameter
of 25 pixels.

To demonstrate Pandora’s performance as an exomoon search
tool, we ﬁrst simulated a single light curve based on the same
star-planet-moon system as described in Sect. 3.2, but we ex-
tended the data set to four transit epochs. The resulting mock
observations with PLATO are shown with black dots in Fig. 4.

Then we ﬁt the simulated PLATO data using UltraNest
(Buchner 2021), a general-purpose Bayesian inference package
for parameter estimation and model comparison. It allows one
to ﬁt arbitrary models for multimodal or non-Gaussian param-
eter spaces as can be expected for exoplanet-exomoon systems
due to alias eﬀects in the orbital period of the planet-moon sys-
tem. UltraNest also features computer parallelization and the
resumption of incomplete runs.

We chose uninformed ﬂat priors for all parameters, but ﬁxed
limb darkening to the injected values. All eccentricities were set
to zero. As for the sampling method, we ran the StepSampler of
UltraNest with 4000 accepted steps until the sample was con-
sidered independent, and we let the sampler decide the number

Article number, page 7 of 16

19.619.820.020.220.4Time(days)0.9860.9880.9900.9920.9940.9960.9981.000Flux(a)384.8385.0385.2385.4385.6Time(days)0.9860.9880.9900.9920.9940.9960.9981.000Flux(b)750.0750.2750.4750.6750.8Time(days)0.9860.9880.9900.9920.9940.9960.9981.000Flux(c)1115.21115.41115.61115.81116.0Time(days)0.9860.9880.9900.9920.9940.9960.9981.000Flux(d)A&A proofs: manuscript no. main

Fig. 5. Corner plot from the UltraNest retrieval of the system shown in Fig. 3, but with four transit epochs. We note that Rs is given in units of
R(cid:12), ab in units of AU, and Mp in units of Jupiter masses. Due to the small number of transits, the posterior is multimodal for combinations of Ppm
and τpm. Additional transits would constrain the system much better.

of currently active walkers, which typically resulted in hundreds
to thousands of active walkers.

Upon convergence after about 5 hr of run time on a sin-
gle core of an Intel i7-1185G7 processor, we found the solu-
tion shown in the corner plot of Fig. 5. The sampler performed
roughly 250 million model evaluations in total, which equates to
an average of about 13, 900 models and log-likelihood calcula-
tions per second. We expect linear scaling with more cores and
more light curves due to the independence of a search in avail-
able data, for example when searching for moons in Kepler or
TESS data.

In Fig. 4 we show 100 randomly drawn models from the pos-
terior distribution. The transparent black lines illustrate the total
model, the transparent orange lines refer to the transit contribu-
tion by the exomoon, and the transparent blue lines show the
stellar dimming caused by the exoplanet.

As for the recovery of the injected planet-moon transit, the
model parameters are indicated with blue dots in Fig. 5 and the
posteriors are shown as gray scale density distributions. As for
the conﬁdence intervals of the probability density function, the
integral under the 2D normal distribution is given as 1−e−(x/σ)2/2,

Article number, page 8 of 16

per_planet [+365.25 d]Michael Hippke and René Heller: Pandora: A fast open-source exomoon transit detection algorithm

where r is the distance from the mean value. The innermost con-
tour, which refers to one standard deviation (σ), thus contains
1 − e−22/2 = 39.3 %. And, in analogy, the 2σ and 3σ intervals
contain 86.4% and 98.9%, respectively. With that being said,
the posterior distribution that we ﬁnd in Fig. 5 is multimodal
for most parameter pairs. Hence, the integrated probability con-
tained inside these contours and the formal conﬁdence intervals
of our best solution do not refer to normally distributed errors.
Some ground truths are formally several σ away from the poste-
rior peaks; however, the maximum a posteriori values are not far
oﬀ from the ground truth in an absolute sense. For example, the
posterior contours of Ωpm are clearly outside of the truth value,
but the error is just ∼ 1 %, and this is inconsequential. The result-
ing light curve from the maximum likelihood solution (Figure 4)
is essentially a perfect match to the injected data.

4. Discussion

To our knowledge, Pandora is the ﬁrst photodynamical open-
source exomoon transit detection algorithm. The LUNA photody-
namical modeling code by Kipping (2011) is a proprietary code
written in the FORTRAN programming language and it has been
used by the Hunt for Exomoons with Kepler survey (Kipping
et al. 2012). Our Pandora code is open source, written in the
python programming language, and it appears to be about four
to ﬁve orders of magnitude faster than LUNA. We hope that all of
this will make Pandora accessible to a wide range of users and
start a community approach in the exomoon search.

Our Pandora code can be used with any nested sampler of
choice, such as UltraNest, MultiNest (Feroz et al. 2009),
or Dynesty (Speagle 2020). Performance diﬀerences between
nested samplers, when using the same parameters, are negligible
considering a complete run. At the beginning of a sampling run,
when the sampling eﬃciency is high ((cid:38) 1 %), a relevant fraction
of computing time is spent by the sampler to identify new pro-
posal regions. This applies to the ﬁrst few percent of a search.
Here, MultiNest, written in Fortran, is two times faster than
the Python implementations of UltraNest and Dynesty. Later
in the run, when the sampling eﬃciency goes down, this fraction
becomes negligible. There may exist novel sampling methods in
the newer packages that could converge with fewer steps, but we
have not explored them yet.

Other open-source packages such as planetplanet (Luger
et al. 2017) and starry (Luger et al. 2019) cover some combina-
tion of Kepler solvers and multibody occultations, but they have
not been adapted for exomoon purposes. Alternative methods
that analyze only the light curve that is not aﬀected by the plan-
etary transit (Simon et al. 2012; Heller 2014; Heller et al. 2016a;
Kipping 2021) or TTV-TDV eﬀects (Heller et al. 2016b) are
simpler to implement, but also less sensitive (Heller & Hippke
2021).

We are currently improving the ﬁtting and sampling proce-
dure with Pandora, so that priors can be chosen in a more so-
phisticated way. To ﬁt the quadratic limb darkening coeﬃcients
more eﬃciently, for example, Pandora will oﬀer a conversion
routine to calculate u1 = 2
q1(1 − 2q2) based
on q1 and q2 from the unit hypercube. This procedure has been
shown to reduce the prior volume (Kipping 2013).

q1q2 and u2 = √

√

The posterior distribution of our simulated exomoon search
with Pandora in Fig. 5 is multimodal and it shows an interesting
aliasing eﬀect for the orbital period of the planet-moon system.
This eﬀect was ﬁrst theoretically described by Kipping (2009). It
has also been observed before in analyses of the four transits of
the giant planet Kepler-1625 b and its Neptune-sized exomoon

candidate, namely in Fig. S16 of Teachey & Kipping (2018) and
in Fig. 4 of Heller et al. (2019). We expect this to be a general
eﬀect of Monte Carlo approaches for exoplanet-exomoon data
analysis that includes a small number of transits. In other words,
if only a few transits are available, there are multiple combi-
nations of planetary masses, moon periods, and moon orbital
positions that result in equally likely solutions. This degener-
acy can be increasingly resolved with additional transit epochs.
Some of our tests also suggest that eclipses can have an im-
portant eﬀect on the resolution of this degeneracy. In extremely
close exoplanet-exomoon systems, in which Ppm/2 < d, mul-
tiple eclipses can occur and possibly constrain the planet-moon
orbital period substantially.

Beyond stellar photometry, stellar radial velocity measure-
ments can help to constrain the total mass Mp + Mm. The simul-
taneous ﬁtting of transit photometry and stellar radial velocities
thus has the potential to aid further in the resolution of the pa-
rameter degeneracy.

5. Conclusion

Pandora is the ﬁrst open source astrophysical model software
for stellar light curves with a transiting exoplanet-exomoon sys-
tem. Pandora has a short code base to increase human readabil-
ity and facilitate code development, and it is optimized for com-
putational speed. It uses well-established analytical solutions to
the transit light curve with stellar limb darkening in most sce-
narios. In rare cases, if a planet-moon eclipse occurs at the same
time when one of the two transiting bodies touches the stellar
disk, Pandora calculates the intersection of the star, the planet,
and the moon numerically assuming constant stellar brightness
behind the small intersecting area. Pandora also oﬀers the op-
tion to use the small-body approximation for the moon, which
accelerates computations even further. We derived an analytical
solution to the transit duration of the planet-moon barycenter in
eccentric orbits around the star to avoid computationally expen-
sive solving of Kepler’s equation.

Pandora also supports supersampling for realistic model-
ing of simulated observations. The output formats include light
curves of the moon and the planet, as well as the combined tran-
sit model and simulated observations with arbitrary white noise
amplitudes. Pandora also comes with a video animation gener-
ator that is suitable for testing and debugging, but also for edu-
cation and outreach.

Finally, we demonstrate Pandora’s potential for exomoon
searches by ﬁrst simulating a physically plausible – though not
necessarily representative – system of a Sun-like star, a Jupiter-
sized transiting planet at 1 AU from the star, and a Neptune-sized
moon in a relatively tight orbit of ﬁve planetary radii in a 1.28 d
period around the planet. We attribute a cadence and noise prop-
erties to the simulated model that corresponds to a photometri-
cally inactive, Sun-like star as it could be observed with the 2026
PLATO mission. Our Monte Carlo search for the exomoon with
UltraNest takes about 5 hr on a standard laptop.

Our nested sampling of simulated exoplanet-exomoon light
curves reveals an aliasing eﬀect of the orbital period in
planet-moon systems. This is a fundamental aspect of transit-
ing exoplanet-exomoon systems, which Pandora is exquisitely
suited for to explore in the future. Our next step is to search for
exomoons around all of the thousands of transiting exoplanets
and exoplanet candidates from the Kepler mission and to study
the most interesting candidates in detail.

Article number, page 9 of 16

A&A proofs: manuscript no. main

Acknowledgements. The authors thank the anonymous referee for a thorough re-
port. RH acknowledges support from the German Aerospace Agency (Deutsches
Zentrum für Luft- und Raumfahrt) under PLATO Data Center grant 50OO1501.

References

Agol, E., Luger, R., & Foreman-Mackey, D. 2020, AJ, 159, 123
Batalha, N. M., Rowe, J. F., Bryson, S. T., et al. 2013, ApJS, 204, 24
Buchner, J. 2021, Journal of Open Source Software, 6, 3001
Bulirsch, R. 1965a, Numerische Mathematik, 7, 78
Bulirsch, R. 1965b, Numerische Mathematik, 7, 353
Claret, A. 2017, A&A, 600, A30
Claret, A. & Bloemen, S. 2011, A&A, 529, A75
Czesla, S., Schröter, S., Schneider, C. P., et al. 2019, PyA: Python astronomy-

related packages

Eastman, J., Gaudi, B. S., & Agol, E. 2013, PASP, 125, 83
Feroz, F., Hobson, M. P., & Bridges, M. 2009, MNRAS, 398, 1601
Fewell, M. P. 2006, Maritime Operations Division, DSTO-TN-0722, Department

of Defence

Fukushima, T. 2013, 253, 142
Harre, J.-V. & Heller, R. 2021, Astronomische Nachrichten, 342, 578
Harris, C. R., Millman, K. J., van der Walt, S. J., et al. 2020, Nature, 585, 357
Heller, R. 2014, ApJ, 787, 14
Heller, R. & Albrecht, S. 2014, ApJ, 796, L1
Heller, R., Harre, J.-V., & Samadi, R. 2022, A&A, submitted
Heller, R. & Hippke, M. 2021, arXiv e-prints, arXiv:2111.04444
Heller, R., Hippke, M., & Jackson, B. 2016a, ApJ, 820, 88
Heller, R., Hippke, M., Placek, B., Angerhausen, D., & Agol, E. 2016b, A&A,

591, A67

Heller, R., Rodenbeck, K., & Bruno, G. 2019, A&A, 624, A95
Hippke, M., David, T. J., Mulders, G. D., & Heller, R. 2019, AJ, 158, 143
Hippke, M. & Heller, R. 2019, A&A, 623, A39
Kipping, D. 2021, MNRAS, 507, 4120
Kipping, D., Bryson, S., Burke, C., et al. 2022, Nature Astronomy
Kipping, D. M. 2009, MNRAS, 392, 181
Kipping, D. M. 2010, MNRAS, 408, 1758
Kipping, D. M. 2011, MNRAS, 416, 689
Kipping, D. M. 2013, MNRAS, 435, 2152
Kipping, D. M., Bakos, G. Á., Buchhave, L., Nesvorný, D., & Schmitt, A. 2012,

ApJ, 750, 115

Kipping, D. M., Forgan, D., Hartman, J., et al. 2013, ApJ, 777, 134
Kipping, D. M., Schmitt, A. R., Huang, X., et al. 2015, ApJ, 813, 14
Kovács, G., Zucker, S., & Mazeh, T. 2002, A&A, 391, 369
Kreidberg, L. 2015, PASP, 127, 1161
Lam, S. K., Pitrou, A., & Seibert, S. 2015, in ACM Digital Library (ACM Press)
Luger, R., Agol, E., Foreman-Mackey, D., et al. 2019, AJ, 157, 64
Luger, R., Lustig-Yaeger, J., & Agol, E. 2017, ApJ, 851, 94
Mandel, K. & Agol, E. 2002, ApJ, 580, L171
Manduca, A., Bell, R. A., & Gustafsson, B. 1977, A&A, 61, 809
Markley, F. L. 1995, Celestial Mechanics and Dynamical Astronomy, 63, 101
Murray, C. D. & Dermott, S. F. 1999, Solar system dynamics
Parviainen, H. 2015, MNRAS, 450, 3233
Rauer, H., Catala, C., Aerts, C., et al. 2014, Experimental Astronomy, 38, 249
Simon, A. E., Szabó, G. M., Kiss, L. L., & Szatmáry, K. 2012, MNRAS, 419,

164

Speagle, J. S. 2020, MNRAS, 493, 3132
Teachey, A. & Kipping, D. M. 2018, Science Advances, 4, eaav1784
Teachey, A., Kipping, D. M., & Schmitt, A. R. 2018, AJ, 155, 36
Weidner, C. & Horne, K. 2010, A&A, 521, A76
Zechmeister, M. 2018, A&A, 619, A128
Zechmeister, M. 2021, MNRAS, 500, 109
Zeng, L., Jacobsen, S. B., Sasselov, D. D., et al. 2019, Proceedings of the Na-

tional Academy of Science, 116, 9723

Article number, page 10 of 16

Michael Hippke and René Heller: Pandora: A fast open-source exomoon transit detection algorithm

Appendix A: Error estimates for constant in-transit tangential velocity approximation

The assumption that the in-transit velocity component of the planet-moon barycenter that is tangential to the celestial plane is
constant in Eq. (11) provides a substantial computational acceleration of Pandora compared to a dedicated solving algorithm that
approximates Kepler’s equation for the eccentric anomaly. Here we estimate the error that is introduced by our approximation.

As shown in Fig. 1, the true anomaly at ingress of the barycenter is ((cid:36)b − γ), with γ = arctan(Rs/r). During egress, the true

anomaly is ((cid:36)b + γ). As a consequence, the velocity component that is tangential to our line of sight during ingress and egress is

|

|

v t,in| = nb ab
#»
(cid:113)
1 − e2
b
v t,eg| = nb ab
#»
(cid:113)
1 − e2
b

(cid:17)
(cid:16)
1 + eb cos((cid:36)b − γ)

(cid:17)
(cid:16)
1 + eb cos((cid:36)b + γ)

,

(A.1)

(A.2)

respectively. In Fig. A.1 we compare the constant velocity assumption |vt| from Eq. (10) with |

#»
v t,eg| from Eqs. A.1
and A.2, respectively. We also computed the maximum deviation between the ingress and midtransit tangential velocities,
∆vt = vt,in/vt,in − 1, as a function of (cid:36)b. For all curves, the stellar radius was set to Rs = R(cid:12) and the stellar mass to Ms = M(cid:12).

In Fig. A.1(a) we consider a planet-moon barycenter with an orbital period of 30 d, which means that ab = 0.19 AU. The three
curves assume eb = 0.01, eb = 0.1, and eb = 0.2, respectively (see labels). The black dashed lines refer to |vt|, the orange solid line to
#»
#»
v t,eg|. The lower panel shows the resulting ∆vt values and we ﬁnd that the maximum value, or
v t,in|, and the light blue solid line to |
|
error in our assumption of constant in-transit tangential velocity, reaches maximum values of about 5 × 10−3 for eb = 0.2, roughly
2.5 × 10−3 for eb = 0.1, and approximately 2.5 × 10−4 for eb = 0.01. These maximum errors occur for (cid:36)b = 90◦ and (cid:36)b = 270◦,
when the change in the tangential orbital velocity is largest.

In Fig. A.1(b) we consider a planet-moon barycenter with an orbital period of 365.25 d, which means that ab = 1 AU, again for
eb = 0.01, eb = 0.1, and eb = 0.2. The resulting maximum error in our assumption of constant in-transit tangential velocity is about
9.7 × 10−4 for eb = 0.2, roughly 4.7 × 10−4 for eb = 0.1, and approximately 4.6 × 10−5 for eb = 0.01.

#»
v t,in| and |

Fig. A.1. Transit tangential velocity of the planet-moon barycenter during ingress (vt,in), midtransit (vt), and egress (vt,eg) as a function of the
orientation of the periastron with respect to the line of sight ((cid:36)b). (a) The planet-moon barycenter has an orbital period of 30 d around a Sun-like
star. The upper panel shows vt,in (red solid line), vt (black dashed line), and vt,eg (blue dashed line) for orbital eccentricities of 0.2, 0.1, and 0.01.
The lower panel shows the maximum variation of the transit velocity, which we illustrate as ∆vt
= vt,in/vt,in − 1 and in units of permille. (b) Same
as (a), but with a circumstellar orbital period of 365.25 d. The resulting variation of the in-transit tangential velocity is reduced by almost one order
of magnitude, as shown in the lower panel.

We estimated the resulting error in the ﬂux measurements for the transit light curve of a Jupiter-sized planet (Rp = 0.1 Rs) in
the worst-case scenario for these above cases, in which Pb = 30 d, eb = 0.2, and (cid:36)b = 90◦. We used the batman package and
its internal Kepler orbit solver to generate a highly accurate model light curve. This approach takes the variable orbital velocity
during transit due to eccentricity into account. We calculated 10,000 in-transit data points, each of which is based on the accurately
calculated orbital position of the planet as a function of time. For comparison, we calculated a similar light curve with batman for
e = 0 and then stretched this light curve in time via multiplication with a factor s = (1 − e2
b)1/2/(1 + eb cos((cid:36)b)) as per Eq. (11) to
produce the transit duration that corresponds to our assumption of constant in-transit velocity. In this particular case, we obtained
s = 0.9797959.

Figure A.2 shows the resulting ﬂux error as a function of time, with the origin of the time axis set to the middle of the transit.
The maximum ﬂux diﬀerence is about 4 × 10−7 during ingress. We also tested the error in our approximation for diﬀerent planetary
radii and noticed that the error scales roughly linearly with Rp. For Earth-sized transiting objects, the error is a few times 10−8.

Article number, page 11 of 16

eb=0.2eb=0.1eb=0.01(a)vt[km/s]vt,invtvt,eg55606570758085Pb=30deb=0.2eb=0.1eb=0.01(cid:1)vt[10-3](cid:1)[degrees]-303090180270360eb=0.2eb=0.1eb=0.01(b)vt[km/s]vt,invtvt,eg2427303336Pb=365.25deb=0.2eb=0.1eb=0.01(cid:1)vt[10-4](cid:1)[degrees]-505090180270360A&A proofs: manuscript no. main

Fig. A.2. Example of the ﬂux error resulting from our approximation for the transit duration in an eccentric (e = 0.2) circumstellar orbit. We assume
= 90◦) and a Jupiter-sized planet to exaggerate the error. The error was computed as the diﬀerence
a worst-case orientation of periastron ((cid:36)b
between two light curves computed with the batman package. One light curve was initially simulated as a circular orbit and then stretched with
a factor of s = (1 − e2
b)1/2/(1 + eb cos((cid:36)b)) as per Eq. (11). The other light curve was computed with e = 0.2 and using a computationally much
more demanding Kepler solver for the orbital motion of the planet.

Appendix B: Error estimates for numerical modeling of planet-moon eclipses

If a planet-moon eclipse occurs in combination with an ingress or egress of either the moon or the planet, then Pandora switches
into a numerical modeling mode, that is, to eclipse case (2) (Sect. 2.5.2). The moon is modeled as a pixelated area with a diameter
of n pixels. The circumference of the moon then is πn and the error of the approximated moon area is on the order of one pixel
along its circumference, or (πn)−1. For n = 25, as in the default Pandora mode, the resulting error for the moon area is ∼1.3 %. As
an example, an Earth-sized moon transiting a Sun-like star causes a ﬂux drop of ∼84 ppm. The numerical error in the light curve is
then ∼1 ppm and therefore more than an order of magnitude below the astrophysical variability of a photometrically quiet star like
the Sun on a time scale of minutes to hours.

In addition to these analytical estimates, we undertook a detailed suite of numerical simulations with Pandora and compared
the area of a hypothetical Earth-sized moon from the pixelated area in Pandora’s eclipse case (2) to the actual moon area. The
resulting error and run time per data point are shown in Fig. B.1. The blue line illustrates that the error in the light curve is 1 ppm
for a moon diameter of 25 pixels, which is in perfect agreement with our theoretical estimates. The orange line denotes that the
resulting computer run time is 7.4 µs per data point.

Fig. B.1. Error estimates (blue line, left ordinate) and CPU run time per data point (orange line, right ordinate) as a function of the moon diameter
in Pandora’s numerical eclipse case (2) (see Sect. 2.5.2). The error refers to the absolute error in the ﬂux of the transit light curve of an Earth-sized
body in front of a Sun-like star. The error falls below 1 ppm for grid sizes > 25 px, which is Pandora’s default mode. Users of Pandora can choose
suitable grad sizes depending on accuracy requirements.

Article number, page 12 of 16

-0.150.15fluxerror[ppm]time[days]-0.4-0.3-0.2-0.10-0.1-0.0500.050.1Numericalerror[ppm]Runtimeperdatapoint[s]Numericalgridsize[pixel]numericalerrorruntime10-210-110010110210100100010-610-510-410-310-210-1Michael Hippke and René Heller: Pandora: A fast open-source exomoon transit detection algorithm

Fig. C.1. Flux errors resulting from the small-body approximation with linear interpolation. Left: For Rp/Rs
the center of the stellar disk and the occulting body that provides errors < 1 ppm is z = 0.65. Right: For Rp/Rs
to z = 0.95. Black curves are realizations for 1400 optical limb darkening coeﬃcients of all stellar types (Claret 2017).

= 0.05, the maximum distance between
= 0.02, ﬂux errors are < 1 ppm up

As for the frequency and duration of planet-moon eclipses, they are rare in the Solar System and they can be expected to be
rare in most exomoon scenarios. The highest frequency and longest duration occurs in an edge-on geometry, when the planet-moon
orbit is in alignment with the line of sight. In this case, the maximum fraction of the planet-moon orbit spent in eclipse is roughly
2Rp/(πapm). For the Earth-Moon system, this corresponds to about 1 % of the time; also, for the Galilean moons around Jupiter, this
corresponds to about 10.4 % (Io), 6.6 % (Europa), 4.1 % (Ganymede), and 2.3 % (Callisto), respectively.

The fraction of planet-moon eclipses which happens during ingress or egress, that is, Pandora’s eclipse case (2) that we solved
numerically, is even smaller. For an Earth transit across the diameter of the Sun, ingress and egress account for 1.8 % of the total
transit duration. For Jupiter, it is 20 %. Consequently, the average time for which a planet-moon occultation occurs during ingress
or egress is only 0.018 % of the transit data points for an Earth-Moon system, or 2.1 % (Io), 1.3 % (Europa), 0.82 % (Ganymede),
and 0.46 % (Callisto) for the Galilean moons, on average.

Appendix C: Algorithmic insights for higher speed

For computational speed optimization of Pandora, it has proven crucial to break the code down into modules that can be bench-
marked separately. It is often hard to estimate whether a change to the code makes it slower or faster, but speed can – and in our
opinion should – be measured.

Appendix C.1: Technical implementation

All modules were implemented in pure python, so Pandora does not require any compilation of C or Fortran code. Pandora also
uses just-in-time (JIT) compilation with numba, which reduces Pandora’s run time by a factor of about 1100. All numbers with
respect to the performance of Pandora given in this paper are numba-based.

To further assess the performance of our implementation, we rewrote our algorithm for the Kepler ellipse in the circular case
in the C language. The pure-C version, compiled with GCC-11.1, is equally fast within our measurement errors of a few percent.
Similarly, we benchmarked our occultation code against batman (C language), ALFM (Agol et al. 2020, C++ and Julia), and
PyTransit (also in python-numba). Depending on the parameter space, we ﬁnd Pandora to be 5–20 % faster. In summary, the
attractiveness of Pandora is in our combination of JIT compilation for optimal speed and python as a programming language to
ensure readability by a wide range of users.

Pandora ﬁrst determines the spatial coordinates for all points, and afterwards all occultation ﬂuxes, etc. This allows each module
to iterate over all values sequentially, making full use of a CPU core’s pipeline and cache, resulting in a ∼ 10× performance gain.
We have also optimized Pandora to make use of instruction-level parallelism in modern superscalar processors. In each clock
cycle, multiple instructions can be executed, increasing the throughput by a factor of a few. A key requirement to achieve this is the
reduction of conditional (if) statements.

Appendix C.2: Conditional small-body approximation with linear interpolation

The small-body approximation assumes constant limb darkening under the occulted area when calculating ﬂuxes. It is ∼ 16×
faster to calculate than the exact Mandel-Agol equations. Errors from this approximation are most pronounced during ingress and
egress, and they become very small (< ppm) for bodies Rp/Rs < 0.01. Larger bodies suﬀer from relevant errors during most of
the transit, and the size of this error is dependent on the limb darkening coeﬃcients. To reduce this error, we performed a linear
interpolation between the exact and the approximated functions. This requires only the calculation of two exact values, which takes
a negligible amount of time, and allows one to determine most of the occultation light curves with the small-body approximation.
For Rp/Rs = 0.05, the approximation can be used for 65 % of the data points in a light curve, growing to 95 % for Rp/Rs = 0.02,
keeping small < 1 ppm errors (Figure C.1). For bodies Rp/Rs > 0.05, the method is not useful because errors become signiﬁcant.

Article number, page 13 of 16

A&A proofs: manuscript no. main

Fig. C.2. Performance comparison of the four methods provided by Pandora to calculate occultation ﬂuxes. The Mandel-Agol model (black) is the
most precise, but also slowest, reference version. The hybrid model (red) uses interpolation between the small-body and the Mandel-Agol methods,
and it is applicable for RP/RS < 0.05 to keep errors below 1 ppm. The cached algorithm (blue) is still faster, but only usable for sampling with
ﬁxed limb darkening. Finally, the small-body approximation is the fastest method, but only applicable (errors below 1 ppm) for RP/RS < 0.01. All
methods show better performance for longer light curves due to constant factors. Numbers are given for a single core on an Intel Core-i7 1185G.

The interpolation method requires one to calculate the exact ﬂux Fx(z, k, u1, u2) for only two radial distances z = 0 and z = 0.65,
the latter being determined empirically (k is the occulter radius in units of Rp/Rs, and u1 and u2 are the quadratic limb darkening
coeﬃcients). We then calculated all other values z < zcutoﬀ with the small-body approximation and subtracted the diﬀerence between
these values and the linear interpolation through F1 and F2 to reduce the errors. We chose the cutoﬀ so that errors remained < 1 ppm,
allowing for z < 0.65 (k = 0.05), z < 0.70 (k = 0.04), z < 0.80 (k = 0.03), z < 0.95 (k = 0.02), and z < 0.98 (k = 0.01). We
hard-coded these values in Pandora. The computational performance of these methods, as a function of the number of datapoints, is
shown in Fig. C.2.

Appendix C.3: Substitution of trigonometric functions

Through extensive proﬁling, it became clear that the major computational cost (90 %) for the Kepler ellipse calculation was origi-
nally in the calculation of trigonometric functions. Standard implementations such as the one in PyAstronomy calculate a range of
sin, cos, tan, and arctan terms for each resulting data point, where the 3D (x, y, z) positions are determined via

k = π(time − τ)/per
Q = 2 arctan(tan(k))
V = sin(Q) cos(i)
x = (cos(Ω) cos(Q) − sin(Ω)V) a
y = (sin(Ω) cos(Q) + cos(Ω)V) a
z = sin(Q) sin(i) a.

(C.1)
(C.2)
(C.3)
(C.4)
(C.5)
(C.6)

First, we can substitute Q = arctan(tan(k)) ≡ k. Then, proﬁling shows that almost all time is spent on the expressions sin(2k)
and cos(2k) (where k = π(time − τ)/per), which is trivially fast to calculate). As trigonometric functions are very expensive, we can
substitute the sine and cosine calculations for one tan calculation through the following identity:

cos(2k) = 1 − tan2(k)
1 + tan2(k)

and

sin(2k) = 2 tan(k)
1 + tan2(k).

(C.7)

(C.8)

On standard CPU architectures (Intel Core i7 and Apple M1), the substitution is ∼ 10 % faster. Additional trigonometry is still
formally required to determine the Kepler ellipse, but only once, and not for each of the ∼ 1000 data points on the ellipse orbit. That
is to say, each data point can be calculated with only one trigonometric calculation of tan(k). Finally, we can remove the calculation
of the depth component z because the orientation of the planet-moon system is irrelevant as both are black disks.

Article number, page 14 of 16

101102103104Datapointsperlightcurve107108109DatapointspersecondMandel-AgolHybridCacheSmall-bodyMichael Hippke and René Heller: Pandora: A fast open-source exomoon transit detection algorithm

Appendix C.4: Numerical accuracy requirements

In computer hardware, ﬂoating-point numbers are represented as base-2 (or “binary”) fractions. With a ﬁnite number of bits available
for a given number, any number is an approximation. High-level programming languages such as python use double-precision
ﬂoating point data types with 64-bit accuracy, resulting in almost 16 signiﬁcant decimal digits of precision. The standard math
library follows the IEEE-754 arithmetic, which aims to provide accuracy to the last signiﬁcant digit, that is, an error < 0.5 in the
unit in the last place (ULP). As errors can add up over the course of multiple calculations, it is useful to test the requirements for a
given problem. With that being said, it appears to us that calculating every value in Pandora to 16 digits would be excessive..

In the case of the Kepler ellipse, we calculated a tangent for each point on the orbit and then multiplied this value with various
other parameters. We required an accuracy well below the noise present in the data, which is typically 10−5. The signal of Earth’s
Moon transiting a Sun-like star would be about 6 ppm (6 × 10−6), which implies a precision requirement of at least seven decimal
digits to achieve a model that is substantially more accurate than the signal. This requirement is about nine orders of magnitude
weaker than the 16 digits typically available in our python implementation of Pandora.

There are two ways to reduce computational eﬀort at the cost of accuracy: Single precision ﬂoats and/or a diﬀerent trigonometric
algorithm. The numba package is built upon the LLVM compiler stack, which oﬀers a set of fastmath approximations, resulting
in up to four ULPs of errors. The speed gain with this option is 20–50 %. Single precision ﬂoats provide 7.225 decimal digits of
precision on average, which is insuﬃcient given our requirement of seven digits and multiple calculations on intermediate values.
The speed diﬀerence would be a factor of two on most architectures. Working with double precision (16 digits), we can accept many
ULPs of fast approximation errors. Consequently, Pandora uses 64-bit arithmetic, but low accuracy (four ULPs) approximations.

Appendix C.5: Potential for future algorithmic optimization

Various alternative algorithms exist which could further improve Pandora’s performance. We have deferred the implementation of
these for future releases, given suﬃcient interest by the community.

As an example, our Kepler solver for the eccentric case uses the method by Markley (1995). Faster algorithms exist, for example
one is based on a CORDIC-like solver (Zechmeister 2018, 2021). As eccentric moons are rarely expected, we have deferred to these
optimizations.

The occultation algorithm ALFM (Agol et al. 2020) uses a diﬀerent method to calculate the circle-circle intersect than the one
used by Pandora. The standard method of computing the overlap of two circles requires the calculation of a square-root and of two
arccos terms. The new “kite expression” replaces the arccos with inverse arctan, keeping the same constant factors, while achieving
higher numerical accuracy. Our benchmarks in numba and C-language yield identical performance within a measurement uncertainty
of 1 %. Due to the lower complexity of the standard approach, we decided to keep the classical circle-circle intersect formula in
Pandora for now. The improved accuracy of the kite expression is irrelevant for our purpose, as the errors from the standard method
are < 10−8 in all cases (Fig. 2 in Agol et al. 2020).

The occultation part of Pandora also contains code to calculate the complete elliptical integral of the third kind. A well-known
standard method for this calculation, which is also used in EXOFAST (Eastman et al. 2013), is the iterative approximation by Bulirsch
(1965a,b). As an alternative, Fukushima (2013) describes a method based on half and double argument transformations, which is
benchmarked by the author to be 20 − 50 % faster than Bulirsch’s method. We are grateful to Toshio Fukushima for sharing his
Fortran code (∼ 700 lines of code, including precalculated constants) to perform a comparison. In our use case, however, our
numba version of Bulirsch’s method is slightly faster.

Appendix C.6: GPU-based calculations

We have implemented a CUDA version of Pandora to run on Nvidia graphics cards (GPUs). A performance test on a Nvidia GTX
1080 card, with 3584 Cuda-cores, yields a sustained throughput of 225,000 model calculations per second, including the correspond-
ing log-likelihood evaluations. This is a speed-up by a factor of 20 compared to a single core of an Intel Core i7-7700k processor.
Unfortunately, it appears that current versions of nested samplers such as UltraNest cannot process this load suﬃciently fast and
that they are limited to ∼ 50,000 point proposals per second due to internal overhead. We plan to address these issues in a subsequent
version of Pandora because a 20-fold performance gain would reduce typical convergence times from ﬁve hours to ﬁfteen minutes.

Appendix D: Usage examples

Appendix D.0.1: Deﬁning model parameters

import pandoramoon as pandora
params = pandora . model_params ()
params . per_bary = 365.25
params . a_bary = 215
params . r_planet = 0.1
params . b_bary = 0.3
(...)

# [days]
# [ R_Star ]
# [ R_Star ]
# [0..2]

A full list of model parameters is available in the online documentation.

Article number, page 15 of 16

A&A proofs: manuscript no. main

Appendix D.0.2: Creating a light curve

time = pandora .time( params ).grid ()
model = pandora . moon_model ( params )
flux_total , flux_planet , flux_moon =

model . light_curve (time).

Appendix D.0.3: Obtaining coordinates

The return values px, py determine the x and y components of the planet, while mx and my are for the moon; they were sampled at
each time stamp.

px , py , mx , my = model. coordinates (time)

Appendix D.0.4: Generating a transit animation video

video = model . video(

time ,
limb_darkening =True ,
teff=3000 ,
planet_color ="black ",
moon_color =" black",
ld_circles =100

)
video.save(

filename =" video .mp4",
fps=25 ,
dpi=300

).

Article number, page 16 of 16

