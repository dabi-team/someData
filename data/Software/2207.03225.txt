2
2
0
2

l
u
J

7

]
E
S
.
s
c
[

1
v
5
2
2
3
0
.
7
0
2
2
:
v
i
X
r
a

Towards Immediate Feedback for Security
Relevant Code in Development Environments(cid:63)

Markus Haug[0000−0001−9377−0677], Ana Cristina Franco da
Silva[0000−0001−8549−350X], and Stefan Wagner[0000−0002−5256−8429]

Institute of Software Engineering, University of Stuttgart,
Universit¨atsstraße 38, 70569 Stuttgart, Germany

Abstract. Nowadays, the correct use of cryptography libraries is es-
sential to ensure the necessary information security in diﬀerent kinds of
applications. A common practice in software development is the use of
static application security testing (SAST) tools to analyze code regarding
security vulnerabilities. Most of these tools are designed to run separately
from development environments. Their results are extensive lists of secu-
rity notiﬁcations, which software developers have to inspect manually in
a time-consuming follow-up step. To support developers in their tasks of
developing secure code, we present an approach for providing them with
continuous immediate feedback of SAST tools in integrated development
environments (IDEs). Our approach also considers the understandabil-
ity of security notiﬁcations and aims for a user-centered approach that
leverages developers’ feedback to build an adaptive system tailored to
each individual developer.

Keywords: Software development · IDE · Security · SAST · Notiﬁca-
tions

1

Introduction

An essential practice for ensuring IT security in software applications nowadays
is the use of cryptography libraries, such as the Bouncy Castle Crypto APIs1 or
the Java security APIs. For example, in the communication among distributed
services in cloud environments, the security of information in transit is a highly
important requirement [4]. Yet, using cryptography libraries is not easy because
of their complexity. They are often used incorrectly, for example, due to misuse
of parameters, which can lead to severe security issues [7].

Already during implementation, static application security testing (SAST)
tools, such as SonarQube2 or CogniCrypt [5], can be used to analyze the code in
development regarding security vulnerabilities [8]. For this, SAST tools contain
comprehensive rule sets, which deﬁne, for example, correct or incorrect API

(cid:63) This work is funded by the BMBF project CRITICALMATE (16KIS0995).
1 https://bouncycastle.org
2 https://www.sonarqube.org

 
 
 
 
 
 
2

M. Haug et al.

usage patterns, and are used to recognize issues and decide when to show security
notiﬁcations.

Many current SAST tools are designed to be used separately from integrated
development environments (IDEs). That is, security analyses are usually per-
formed as additional steps in build processes, for example, in nightly builds.
This normally leads to extensive lists of security notiﬁcations, which software
developers have to inspect manually in a follow-up step. In addition to being
time-consuming and cumbersome, the interruption and associated loss of con-
text increase the challenge of understanding and ﬁxing an issue for developers.
In this paper, we present an approach that supports software developers in
their tasks of developing secure code. Using our approach, developers are con-
tinuously provided with immediate feedback from SAST tools in their IDEs.
Our approach considers the understandability of security notiﬁcations and also
leverages developer feedback to build an adaptive system tailored to each in-
dividual developer. This approach has been developed as a prototype within
the BMBF funded project Cybersecurity static analysis with immediate feedback
(CRITICALMATE3).

The remainder of this paper is structured as follows: in Section 2, we present
our approach. Section 3 discusses related work. Finally, Section 4 concludes our
paper and gives an outlook on future work.

2 Approach

Our approach consists of two major parts regarding notiﬁcations of security
tools: (i) their eﬃcient integration into developer’s IDEs to provide immediate
feedback, and (ii) the understandability of security notiﬁcations.

2.1 Adaptive Immediate Feedback

To eﬃciently integrate notiﬁcations of SAST tools into development environ-
ments, we propose an adaptive IDE plugin, which continuously receives analysis
results of a SAST tool and shows them in the IDE’s code editor as security
notiﬁcations. This approach follows the client-server pattern, where the server
is any SAST tool conducting the security analyses, and the client is the IDE
plugin receiving the results of the analyses.

An advantage of immediate feedback in IDEs is that the typical workﬂow
interruption while running static code analysis separately is avoided [9]. A further
advantage of such a tool support is that security issues in the code are recognized
as early as possible. This allows developers to ﬁx issues while they still have most
of the context available.

In CRITICALMATE, we have integrated a novel static code analysis engine
into IntelliJ, Eclipse, and Visual Studio Code through plugins. Software devel-
opers get immediate feedback about security issues, directly in the code editor

3 https://www.forschung-it-sicherheit-kommunikationssysteme.de/projekte/

criticalmate

Towards Immediate Feedback for Security Relevant Code

3

of their IDEs. Any information security issues in the code are underlined in red.
An on-demand pop-up provides additional details about each issue. Furthermore,
in-code annotations are supported to suppress notiﬁcations as desired. This is
useful to suppress notiﬁcations that developers classify as false positives.

The analysis engine and IDE plugins have been implemented as prototypes
and successfully provide immediate feedback. In the following, we discuss poten-
tial improvements to increase their usefulness for developers.

One opportunity for improvement is the false positive rate. In SAST tools,
the increased analysis performance required for immediate feedback frequently
comes at the cost of an elevated false positive rate [1,2]. Generally, such tools have
two options to handle a high false positive rate: (i) they implement more accu-
rate analysis strategies, usually at a performance cost, or (ii) they tighten their
conﬁdence threshold. As a consequence, they issue fewer notiﬁcations, which
however can increase their false negative rate. Due to the severe consequences
of undetected vulnerabilities, we want to ensure a low false negative rate. That
is, tightening the conﬁdence threshold is not a suitable option.

Furthermore, a high false positive rate reduces user trust in such tools, which
might cause adverse eﬀects. For example, developers might disable analyses
across their whole projects instead of single notiﬁcations because of frustrat-
ing high false positive rate. In doing so, they might also inadvertently disable
notiﬁcations indicating actual security issues in the code.

To handle false positives, we consider an adaptive analysis approach with
incremental accuracy. For each class of issues, the analysis could choose a suit-
able strategy depending on factors, such as time budget, user-deﬁned conﬁdence
rating, or recorded false positive rate for a certain combination of issue and strat-
egy. For example, for a class of notiﬁcations known to have a low false positive
rate, the analysis could choose a less detailed strategy, which would save time
for other analyses. In contrast, for a class with a low conﬁdence level, the anal-
ysis could choose a more accurate iterative strategy, until it achieves a desired
conﬁdence level, as long as the time budget permits this.

To be tailored to software developers, the proposed IDE plugin should be
able to learn from software developers’ feedback, especially about how they assess
notiﬁcations as false positives in the context of their development projects. Based
on this, the plugin should be able to adapt the classes and amount of shown
notiﬁcations. For example, the plugin could learn to suppress notiﬁcations, which
developers frequently classify as false positives.

Finally, the plugin could also learn the developer’s typical workﬂow, such
as if they usually ﬁx the code as soon as notiﬁcations are shown or just before
committing or sharing their code. Based on this, the plugin could increase the
amount of shown notiﬁcations when a developer is most likely to react to them.
At other times, the shown amount would be reduced, e.g., by disabling highlights
in the editor and listing the notiﬁcations only in the IDE’s error list. This would
allow developers to perform their tasks in the way that is most suitable for
them. Reducing the amount of information when developers are unlikely to need
it, could also mitigate information overload.

4

M. Haug et al.

Fig. 1. Security notiﬁcation regarding misuse of Bouncy Castle Crypto API for elliptic-
curve (EC) encryption

2.2 Understandable Security Notiﬁcations

Several studies in the literature have shown that many usability issues exist in
current SAST tools with respect to understandability of security notiﬁcations.
Tahaei et al. [10] conducted an experiment aiming to understand how helpful
static analysis tools notiﬁcations (SonarQube4 and SpotBugs5) are to developers.
They emphasize as a ﬁnding that developers make mistakes even if these were
well-known mistakes and had known solutions, which suggests a lack of developer
awareness and/or missing support in addressing security issues.

Smith et al. [9] conducted a usability evaluation of four SAST tools. Within
the list of found usability issues6, there are issues related to the content of
the notiﬁcation, such as “Fix suggestions not adequately explained / sometimes
missing” or “Verbose XML output distracting”.

Figure 1 shows an example code snippet employing the Bouncy Castle Crypto
API for asymmetric ElGamal encryption with an elliptic curve (EC). The en-
cryptor needs to be initialized by calling the init() method with suitable param-
eters, i.e., the public key of the recipient, before encrypting the data. However,
the developer forgot to call the init() method in this snippet.

In Figure 1, we can also see the IDE notiﬁcation that the CRITICALMATE
analysis engine generates for this example. While the notiﬁcation correctly iden-
tiﬁes the problem, it is diﬃcult to understand, especially for developers who are
not well-versed in the ﬁeld of cryptography. Furthermore, there is no example
of how to ﬁx the issue, which has been identiﬁed as a problem for understand-
ability above. Consequently, the solution for the issue might not be clear enough
because of missing information.

Therefore, to support software developers in avoiding misinterpretation of se-
curity notiﬁcations, we propose an approach for presenting security notiﬁcations

4 https://www.sonarqube.org
5 https://spotbugs.github.io
6 https://ﬁgshare.com/s/71d97832ae3b04e0ﬀ1a

Towards Immediate Feedback for Security Relevant Code

5

Fig. 2. Notiﬁcation format using as example an API misuse

within IDEs that follows usability guidelines to increase the understandability
of the security notiﬁcations.

Figure 2 shows our proposed notiﬁcation format based on the format used
in the SonarSource rule repository7. In this format, information about the error
should be provided in a concise language, as well as code examples of how to
ﬁx the error should be provided. The depicted security notiﬁcation refers to a
misuse of the Bouncy Castle Crypto API for asymmetric ElGamal encryption.
The aforementioned notiﬁcation format has been integrated into the proto-
typical implementation of CRITICALMATE’s analysis engine and IDE plugins
(cf. Section 2.1). In the following, we discuss potential improvements.

7 https://rules.sonarsource.com

6

M. Haug et al.

The participants of the study conducted by Tahaei et al. [10] imply that the
most helpful part were the provided code examples in the notiﬁcations. On the
other side, they indicated that metadata was not relevant for them. However,
code examples can lead to the problem of mismatched examples. One solution
to tackle this problem would be to create parameterized code example templates
that can be dynamically completed to match the speciﬁc scanned code snippet
and the context of the software project.

This approach could also be taken further by automatically suggesting quick
ﬁxes for a given notiﬁcation. Developers can then choose to apply these ﬁxes
directly in their IDE. In some cases, where a concrete ﬁx might not be available,
a snippet with placeholders for the developer to ﬁll in could be suggested instead.
This would help developers in ﬁxing security issues in their software more quickly
and more accurately. Some existing static analysis tools, such as Clippy8 or rust-
analyzer9 from the Rust programming language ecosystem, already support such
features for some problems.

Finally, the feedback of software developers to a notiﬁcation, for example,
the reason a notiﬁcation was not helpful, can also be used to learn about the
helpfulness of notiﬁcations and adapt future notiﬁcations’ content.

3 Related Work

This section presents related work to SAST tools, which provide an IDE inte-
gration and consequently immediate feedback.

Eclipse CogniCrypt10 is an open-source platform for static code analysis
based on CrySL rules [6]. Such rules can describe diﬀerent error types indi-
cating incorrect usage of cryptography libraries. For example, a constraint error
indicates that the static analysis detected an incorrect argument in a speciﬁc
method call.

Find Security Bugs (FSB)11 is an open-source extension of the SpotBugs
static analysis tool for security audits of web application in Java. It can detect
security issues, such as those described in the open web application security
project (OWASP) Top 10. Furthermore, it provides plugins for its integration in
several IDEs, such as for Eclipse and IntelliJ.

The goals of our approach are very similar to both aforementioned works in
respect to supporting software developers with immediate feedback within their
IDEs. However, in addition, we aim for a user-centered approach that leverages
developers feedback to build an adaptive system.

8 https://github.com/rust-lang/rust-clippy
9 https://rust-analyzer.github.io/
10 https://www.eclipse.org/cognicrypt/documentation/codeanalysis
11 https://ﬁnd-sec-bugs.github.io

Towards Immediate Feedback for Security Relevant Code

7

4 Results and Conclusion

In this paper, we introduced an approach for supporting software developers
to address possible security issues directly in their IDEs. Through continuous
immediate feedback integrated in IDEs, developers can see notiﬁcations regard-
ing security issues, such as misuse of cryptography libraries, as soon as code
is typed in the code editor and the typed code has been analyzed by a SAST
tool. Within the project Cybersecurity static analysis with immediate feedback
(CRITICALMATE), the University of Stuttgart and RIGS IT have jointly de-
veloped a prototype that integrates the analysis results of RIGS IT’s security
tool continuously into diﬀerent IDEs, namely IntelliJ, Eclipse IDE, and Visual
Studio Code. Preliminary measurements tell us that security notiﬁcations are
shown to developers in average under a second. However, there are several fac-
tors that inﬂuence the response time from triggering the static code analysis
until the visualization of the found security notiﬁcations. To get more insights
about these issues, we plan to conduct further experiments.

Furthermore, we plan to conduct a user study to get insights about the in-
teraction of software developers with the immediate feedback and the adaptivity
feature. One possibility is to conduct a study that also conducts emotion recogni-
tion based on physiological signals or video input. We can gain valuable feedback
by recognizing confusion or frustration [3] of software developers while they are
working with selected security notiﬁcations for the study.

One big challenge in the aforementioned approach is how to diﬀerentiate
notiﬁcations that are actual false positives and what developers might label as
false positives because they do not agree on the issue or perceive them as noise.
Furthermore, if there are many notiﬁcations regarding the same code snippet,
these should be prioritized to be visualized sequentially based on, for example,
their severity, to avoid cluttered visualization or missing important notiﬁcations.

References

1. Alahmadi, B.A., Axon, L., Martinovic, I.: 99% false positives: A qualitative study
of SOC analysts’ perspectives on security alarms. In: 31st USENIX Security Sym-
posium (USENIX Security 22). pp. 10–12. USENIX Association (2022)

2. Aloraini, B., Nagappan, M., German, D.M., Hayashi, S., Higo, Y.: An empirical
study of security warnings from static application security testing tools. Journal
of Systems and Software 158, 110427 (2019)

3. Fernandez, R., Picard, R.: Signal processing for recognition of human frustration.
In: Proceedings of the 1998 IEEE International Conference on Acoustics, Speech
and Signal Processing, ICASSP ’98 (Cat. No.98CH36181). vol. 6, pp. 3773–3776
vol.6 (1998)

4. Iankoulova, I., Daneva, M.: Cloud computing security requirements: A systematic
review. In: 2012 Sixth International Conference on Research Challenges in Infor-
mation Science (RCIS). pp. 1–7. IEEE (2012)

5. Kr¨uger, S., Nadi, S., Reif, M., Ali, K., Mezini, M., Bodden, E., G¨opfert, F.,
G¨unther, F., Weinert, C., Demmler, D., et al.: Cognicrypt: Supporting develop-
ers in using cryptography. In: 2017 32nd IEEE/ACM International Conference on
Automated Software Engineering (ASE). pp. 931–936. IEEE (2017)

8

M. Haug et al.

6. Kr¨uger, S., Sp¨ath, J., Ali, K., Bodden, E., Mezini, M.: Crysl: An extensible ap-
proach to validating the correct usage of cryptographic apis. IEEE Transactions
on Software Engineering 47(11), 2382–2400 (2019)

7. Nadi, S., Kr¨uger, S., Mezini, M., Bodden, E.: Jumping through hoops: Why do
java developers struggle with cryptography apis? In: Proceedings of the 38th In-
ternational Conference on Software Engineering. pp. 935–946 (2016)

8. Nguyen Quang Do, L., Wright, J., Ali, K.: Why do software developers use static
analysis tools? a user-centered study of developer needs and motivations. IEEE
Transactions on Software Engineering pp. 1–1 (2020)

9. Smith, J., Do, L.N.Q., Murphy-Hill, E.: Why can’t johnny ﬁx vulnerabilities: A
usability evaluation of static analysis tools for security. In: Sixteenth Symposium
on Usable Privacy and Security (SOUPS 2020). pp. 221–238 (2020)

10. Tahaei, M., Vaniea, K., Beznosov, K., Wolters, M.K.: Security notiﬁcations in static
analysis tools: Developers’ attitudes, comprehension, and ability to act on them.
In: Proceedings of the 2021 CHI Conference on Human Factors in Computing
Systems. pp. 1–17 (2021)

