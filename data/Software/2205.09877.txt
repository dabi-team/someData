2
2
0
2

y
a
M
9
1

]
E
S
.
s
c
[

1
v
7
7
8
9
0
.
5
0
2
2
:
v
i
X
r
a

Probabilistic Quality of Service aware Service
Selection (cid:63)

Agust´ın E. Martinez Su˜n´e1,2 and Carlos G. Lopez Pombo1,2(cid:63)(cid:63)

1 Universidad de Buenos Aires. Departamento de Computaci´on.
2 CONICET–UBA. Instituto de Investigaci´on en Ciencias de la Computaci´on (ICC).

Abstract. In software-as-a-service paradigms software systems are no
longer monolithic pieces of code executing within the boundaries of an or-
ganisation, on the contrary, they are conceived as a dynamically changing
collection of services, collectively executing, in pursuit of a common busi-
ness goal. An essential aspect of service selection is determining whether
the Quality of Service (QoS) proﬁle of a service satisﬁes the QoS require-
ments of a client.
In realistic execution environments, such QoS values might be inﬂuenced
by external, non-controllable events, making it impossible for the service
provider to guarantee that the values characterised by a QoS proﬁle will
be met, naturally leading to the need of a probabilistic interpretation of
QoS proﬁle.
In this work we propose: 1) a model for describing probabilistic QoS
proﬁles based on multivariate continuous probability distributions, 2) a
language for describing probabilistic QoS requirements, and 3) an auto-
matic procedure for assessing whether a probabilistic QoS proﬁle satisﬁes
a probabilistic QoS requirement.

1

Introduction

In software-as-a-service paradigms such as Service-oriented Computing – SOC
and Cloud/Fog/Edge computing, software systems are no longer monolithic
pieces of code executing within the boundaries of an organisation. On the con-
trary, this new generation of applications run over globally available computa-
tional resources and communication infrastructure. They rely on the intervention
of a dedicated middleware responsible for the discovery of services that are bound
at runtime, subject to the negotiation of a Service Level Agreement – SLA, so
they can collectively fulﬁll a given business goal [1]. From this viewpoint, com-
plex applications are conceived as the composition of publicly available software
services that act as fundamental building blocks [2].

(cid:63) Research partly supported by the European Unions Horizon 2020 research and in-
novation programme under the Marie Skodowska-Curie grant agreement No 778233.
Carlos G. Lopez Pombo’s research is supported by Universidad de Buenos Aires
through grant UBACyT 20020170100544BA, and Consejo Nacional de Investiga-
ciones Cient´ıﬁcas y T´ecnicas through grant PIP 11220130100148CO.

(cid:63)(cid:63) Now on leave from the Universidad de Buenos Aires to the Escuela de Producci´on,

Tecnolog´ıa y Medio Ambiente, Universidad Nacional de R´ıo Negro.

 
 
 
 
 
 
2

A.E. Martinez Su˜n´e et. al.

The emergence of this paradigm has been accompanied by a deep trans-
formation of the business models associated with the construction of software
systems. Providers of cloud computing platforms rely on these notions and of-
fer a high degree of customisation for their services with which companies can
conﬁgure the resources to better suit their business needs. Well-known exam-
ples of such a customisation are pricing schemes that depend on the amount of
time a computational resource is used. Emerging technologies such as serverless
computing or Function as a Service – FaaS increase the possibilities for service-
based paradigms, as multiple providers oﬀering services might compete to be
selected by software systems that take the role of service consumers. An essen-
tial aspect of such a service selection (known as the Service Selection Problem
[2, pt. II]) is determining whether the Quality of Service (QoS) proﬁle of a ser-
vice (i.e., a description of the potential values that its quantitative attributes
might adopt) satisﬁes the QoS requirements of a client. The interested reader is
pointed to [3] for a comparative review of existing approaches and to [4] for a
systematic literature review of the problem.

The QoS proﬁle of a service can be thought of as a speciﬁcations describ-
ing the values adopted by its quantitative attributes (i.e., attributes that admit
some type of measurement, for example, response time, memory usage, price,
reputation, etc.) along its possible executions. In realistic execution scenarios
such values are usually subject to external, non-controllable events like hard-
ware failures, communication errors, congestion in the communication network,
etc. Therefore, it is utterly diﬃcult, if not impossible, to guarantee that the val-
ues characterised by a QoS proﬁle will always be met with absolute certainty,
naturally leading to a probabilistic interpretation of the QoS proﬁle, where an
execution yields a valuation of the quantitative attributes with certain proba-
bility. Similarly, we need a probabilistic interpretation of the QoS requirements;
in it, a client will bind to a speciﬁc service provider only if the probability of its
quantitative attributes adopting certain values is within prespeciﬁed bounds.

1.1 Our approach

Any approach on this problem is composed of a speciﬁc view in each of the
following four dimensions: 1) the precise deﬁnition of the problem, 2) the QoS
proﬁle model for describing each service, 3) the QoS requirement model for
describing the client’s needs, and 4) the decision procedure for automatically
selecting the appropriate service. In the following, we outline this dimensions for
our approach and we compare it with existing approaches in the literature.

Problem Automatic probabilistic QoS-aware service selection: given a QoS re-
quirement of a client running application and a set of QoS proﬁles for func-
tionally equivalent services, choose a service whose QoS proﬁle satisﬁes the QoS
requirement. In ﬁg. 1 we show a schematic view of this problem where a Service
Broker plays the role of on-demand choosing a Service Provider from a Service
repository in order to satisfy the needs of an application, playing the role of
Service Client.

Probabilistic Quality of Service aware Service Selection

3

QoS proﬁle model The QoS proﬁle of each service is modeled as a multivariate
continuous probability distribution where each random variable denotes a spe-
ciﬁc QoS attribute. We propose a methodology for learning the QoS proﬁle of a
service from data sampled from the real-world behaviour of such service.

QoS requirement QoS requirements are given by the client application to drive
the service selection. They are boolean combinations of QoS constraints which,
in turn, specify probability bounds for the QoS attributes taking values within
a polyhedral region.

Decision procedure Given a QoS proﬁle model and a QoS requirement formula
our algorithm determines if the QoS proﬁle satisﬁes the requirement. It leverages
on SAT-solving to handle the boolean structure of the requirement formula and
on Monte Carlo integration to determine if the probability bounds prescribed by
the QoS constraints hold.

All this done in a general setting where there is no a priori assumption
about the speciﬁc nature of the quantitative attributes (i.e. any quantiﬁable
characteristic of software service can be considered a quantitative attribute).

Fig. 1. A schematic view of the QoS-aware service selection problem.

1.2 Related work

Problem There is an extensive body of work focusing on the Quality of Service
aspect of service selection and service composition in a cloud environment [4].
The precise deﬁnition of the problem setting varies from work to work. While
some works consider the selection of serveral services to compose according to
a given workﬂow [5], others conceive the problem as the selection of one service
among a given set of services [6]. In this work we adopt the latter notion, we
understand it as a stepping stone for putting forward our probabilistic approach,

4

A.E. Martinez Su˜n´e et. al.

which is a necessary building block for tackling the service composition problem
in a probabilistic setting.

QoS proﬁle model The models proposed for characterizing QoS attributes can
be grouped into three broad categories: single-value attributes, range-valued at-
tributes, and probabilistic attributes. In the single-value setting the QoS pro-
vided for a particular attribute is modeled as a constant value [7,6] while in the
range-valued setting it is usually modeled as an interval or a set of values [8, Sec-
tion 2]. The latter perspective emerges by acknowledging the limitations of the
former: there are scenarios in which the single value model becomes insuﬃcient.
Instead, we position our work as part of an increasing number of research in-
terested in capturing the probabilistic nature of the QoS attributes [9,10,11,12].
In [9,10] the authors propose to solve the problem of probabilistic QoS based
service selection, but they do it in a setting where QoS attributes are modeled
as separate probability distributions that are independent. In [11] the authors
propose a probabilistic model for describing QoS but only considering discrete
probability distributions, also restricting attributes to ﬁve speciﬁc metrics. In
[12] the authors address the service selection problem with probabilistic mod-
els, but each QoS attribute is modeled as a discrete random variable with a
probability mass function, leaving out continuous probability models.

QoS requirement Most of the contributions to QoS modeling for the service
selection problem focus on the description of the QoS proﬁle, as stated in the
last paragraph. In such contributions, the notion of QoS requirement is relagated
as an implicit optimization criteria [3, Section 5.1], where the aim is to minimize
or maximize the value of each QoS attribute according to the nature of the
attribute. Instead, we consider QoS requirements to be a key elements since it
allows the service selection to be speciﬁc to the clients needs. Under this view,
the proposal of a language for describing QoS requirements becomes relevant.

Other distinctive contributions can be found in the ﬁeld of probabilistic quanti-
tative veriﬁcation of service-based systems [13]. There, a more classical veriﬁcation-
like framework is proposed where Markov models are used to determine the
validity of probabilistic temporal logic formulae representing quality of service
properties. In [14] the general approach is enriched with a relativised notion of va-
lidity within a conﬁdence interval. The main diﬀerence between these approaches
and ours relies on the model of the system being analyzed. While probabilistic
model checking approaches need a state-based model of the behaviour of the
system, our approach only needs a model of the values taken by the QoS at-
tributes of such system. This is a consequence of approaching the problem from
a service oriented computing perspective, where services are considered to be
opaque entities from the perspective of the consumer (i.e., the consumer has no
knowledge of their internal behaviour).

We also acknowledge the existence of an important body of knowledge that
focuses on the problem of choosing an optimum candidate according to preﬁxed
preferences based on soft constraint solving [15,16], and also using fuzzy set

Probabilistic Quality of Service aware Service Selection

5

theory to express preferences [17], but we will concentrate on a more classical,
thus strict, notion of satisfaction of QoS requirements, which state probabilistic
requirements imposed to service providers.

There are three key ingredients in our approach and, to the best of our
knowledge, ours is the ﬁrst proposal to tackle all of these aspects simultane-
ously: 1) we propose a modeling language capable of dealing with an unbounded
number QoS attributes of which there is no implicit interpretation (i.e., we only
require that they can be measured in each concrete execution of the service),
2) we focus on continuous probability distribution, capable of capturing a ﬁner
grain characterisation of the services behaviour, and 3) (probably the most novel
ingredient) we propose the use of multivariate probability distribution, enabling
the characterisation of dependencies between the probabilistic behaviour of the
QoS attribute.

The paper is organised as follows. In section 2 we present the deﬁnitions of
QoS proﬁle and QoS requirements, together with a satisfaction relation; we also
frame the service selection problem in terms of these three elements. In section 3
we propose an algorithm implementing the satisfaction relation proposed in sec-
tion 2. In section 4 we propose a methodology for learning probabilistic QoS
proﬁles from data sampled from the real-world behaviour of the services, tak-
ing out the responsibility of producing it from the service provider. Finally, in
section 5 we draw some concluding remarks and propose some further research
directions.

2 Probabilistic QoS-aware SLA

In this section we present the main contributions of this work. We start by
providing a probabilistic deﬁnition of QoS proﬁles for service providers and QoS
requirements for service clients, together with a deﬁnition of the satisfaction
relation between QoS proﬁles and QoS requirements.

2.1 Probabilistic QoS proﬁle of a service

Let us start by discussing how the probabilistic QoS behaviour of a software
service is to be modeled. We focus on quantitative attributes of software arti-
facts (i.e., those admitting some type of measurement), such as response time,
throughput, price, reputation, among others; and, in our case, not assuming any
additional property, interpretation or behaviour. The sole assumption is that
the attributes can be actively monitored, at each execution of the service, by an
element of the execution infrastructure, for example the Service Broker.

As a running example, consider a set of (functionally equivalent) services
for validating an email address; an example taken from [18]. Upon calling one
of these services, the client provides an email address and the service indicates
whether it is a valid and existing email. Diﬀerent services have diﬀerent values
of throughput (TP) and response time (RT). As we are interested in the prob-
abilistic nature of quantitative attributes, given a candidate service, we would

6

A.E. Martinez Su˜n´e et. al.

like to be able to capture a situation like the one shown in ﬁg. 2, where the TP
value oﬀered by a given service is known to follow a Gaussian distribution with
mean in 50 Mbps, and the RT value is known to follow a Gamma distribution
with mean in 300 ms.

Fig. 2. Probabilistic QoS proﬁle where TP follows a Gaussian distribution with µ = 50
and σ2 = 300 and RT follows a Gamma distribution with α = 3 and β = 1

100 .

From now on, deﬁnitions and results will be presented assuming a ﬁxed, but

arbitrary, set of quantitative attributes A = {a1, . . . , an}.

Deﬁnition 1 (QoS proﬁle). A QoS proﬁle is a random vector X = (X1, . . . , Xn),
where each random variable Xi is interpreted as the value of the quantitative
attribute ai, and is characterised by a joint cumulative distribution function
(CDF): FX(x1, . . . , xn) = P(X1 ≤ x1, . . . , Xn ≤ xn)

Moreover, if the joint CDF can be diﬀerentiated, then X is characterised by

a joint Probability Density Function (PDF): fX(x1, . . . , xn) = ∂nF (x1,...,xn)

∂x1 ...∂xn

Considering the attributes TP and RT, mentioned in ﬁg. 2, the QoS proﬁle
is the random vector X = (X1, X2), where X1 and X2 represent the value of TP
and RT, respectively. Then, the PDF is deﬁned as fX(x1, x2) = fX1(x1)·fX2 (x2),
where fX1 (x1) = 1
] with µ = 50, σ2 = 300, and fX2(x2) =
√
βα
Γ (α) x2

exp[− 1
2
α−1 exp(−βx2) with α = 3 and β = 1

(cid:0) x1−µ
σ

100 .

(cid:1)2

2π

σ

Notice that, as it was shown in ﬁg. 2, and formalised above, the behaviour
of TP is independent from the behaviour of RT. In general, this is not the case;
it is well-known that, in practice, TP and RT have a negative correlation (i.e.,
high RT implies low TP, and viceversa). Those situations necessarily require an
approach capable of dealing with a composite multivariate probability distribu-
tion. In ﬁg. 3 we depict an example where TP and RT follow the distributions
described in ﬁg. 2, but they are negatively correlated. In this case we have
a bivariate distribution Xcorr = (X1, X2), where X1 ∼ Gaussian(µ, σ2) and
100 . Notice
X2
that the ﬁrst parameter of the Gamma distribution, that governs the mean of
X2, is negatively correlated to the outcome of X1.

µ , β), with µ = 50, σ2 = 300, α = 3, β = 1

(cid:12)
(cid:12) X1 ∼ Gamma(α − X1−µ

Probabilistic Quality of Service aware Service Selection

7

Fig. 3. Depiction of a QoS proﬁle where throughput and response time attributes are
negatively correlated.

Summarising, a QoS proﬁle is modeled by random vector whose dimension

coincides with the number (and order) of the preﬁxed list of attributes A.

2.2 Probabilistic QoS requirements of a service client

When a QoS proﬁle is characterised by a joint PDF it is possible to compute
the probability of the execution of a service to adopt values for the quantitative
attributes falling in a speciﬁc region, by integrating the joint PDF over that
region. This supports the deﬁnition of probabilistic QoS requirements, whose
satisfaction by a QoS proﬁle, can be determined by queries of this type. We ﬁrst
introduce basic probabilistic QoS constraints.

Deﬁnition 2 (Probabilistic QoS constraint). A probabilistic QoS constraint,
over the set of attributes A, is a tuple containing: 1) a region of values R ⊆ Rn,
2) a lower bound pmin ∈ [0, 1], and 3) an upper bound pmax ∈ [0, 1].
The set of QoS constraints over A will be denoted QoSCstr (A).

The intuition is that R characterizes a region of QoS values of interest, where
each point x ∈ R represents a speciﬁc combination of values of the quantitative
attributes, and pmin and pmax the bounds for the probability of the quantitative
attributes taking values in R. Then, we can consider a scenario like the one
shown in ﬁg. 4, where a service client is interested in a service with high quality
TP and high quality RT.

The rightmost region of ﬁg. 4 shows a region Rgood of interest for the client.
Rgood imposes high TP (between 60 and 100 Mbps), quick RT (below 300 ms)
and, additionally, excludes the lower quality section within those values (the
diagonal line excludes the slow RT and low TP upper left corner). Expressing the
requirement that the region of values must have high probability requires deﬁning
pmin = 0.8 and pmax = 1. Similarly, the leftmost region Rbad characterises a poor

8

A.E. Martinez Su˜n´e et. al.

Fig. 4. Regions highlighted in red depict low quality TP with low quality RT, and high
quality TP with high quality RT, resp.

quality TP and poor quality RT that the client might be interested in avoiding
by setting a low upper bound for its expected probability.

Next, we deﬁne satisfaction of a constraint by a QoS proﬁle.

Deﬁnition 3 (Satisfaction of probabilistic QoS constraint). Given a QoS
proﬁle X and a QoS constraint ϕ = (cid:104)R, pmin , pmax (cid:105) we say that X satisﬁes ϕ
(denoted X |= ϕ) if and only if pmin ≤ P(X ∈ R) ≤ pmax . If the QoS proﬁle X
is described in terms of a joint PDF fX, then the satisfaction problem X |= ϕ is
equivalent to deciding whether pmin ≤ (cid:82)

R fX(x1, . . . , xn) dx1 . . . dxn ≤ pmax

Furthermore, we can deﬁne a more expressive language for characterising
QoS requirements, together with an appropriate notion of satisfaction by a QoS
proﬁle.

Deﬁnition 4 (Probabilistic QoS requirement). Given a set of proposi-
tional variables P, a probabilistic QoS requirement (denoted by QoSReq(A, P))
is a formula in the language of the next grammar, Φ ::= (cid:62) | ⊥ | p | ϕ | ¬Φ | Φ∨Φ
where ϕ ∈ QoSCstr (A) and p ∈ P.

The intuition is that QoS requirements are Boolean combinations of QoS
constraints and pure Boolean variables. While it is natural for QoS requirement
to be built from QoS constraints because they are the key element in modeling
QoS behaviour, pure Boolean variables play an important role in facilitating
the task of contract design expressing the discrete aspects of the models. The
following QoS requirement Φ1 expresses a relatively high probability for the
values to fall in Rgood and a low probability of them to fall in Rbad, (cid:104)Rgood, pmin :
0.6(cid:105) ∧ (cid:104)Rbad, pmax : 0.3(cid:105). A client might be willing to accept any of the two
scenarios, as far as it can be identiﬁed which one was satisﬁed. This can be done
by resorting to Boolean variables as follows

((cid:104)Rgood, pmin : 0.6(cid:105) ∨ (cid:104)Rbad, pmax : 0.3(cid:105))
∧ (p1 ⇔ (cid:104)Rgood, pmin : 0.6(cid:105)) ∧ (p2 ⇔ (cid:104)Rbad, pmax : 0.3(cid:105))

Probabilistic Quality of Service aware Service Selection

9

In this way, we bound the truth value of each propositional variable to the
satisfaction of each QoS constraint. Propositional variables p1, p2 can then be
used as decision variables in another fragment of the same formula, or they could
be read by the client if the veriﬁcation procedure returns a satisfying assignment.
The next deﬁnition extends the notion of satisfaction of QoS constraints by

a QoS proﬁle to QoS requirements.

Deﬁnition 5 (Satisfaction of probabilistic QoS requirement). A proba-
bilistic QoS proﬁle X satisﬁes a probabilistic QoS requirement Φ ∈ QoSReq(A, P)
if and only if there exists a valuation v : P → {(cid:62), ⊥} (i.e. a valuation of the
propositional variables) such that X, v |= Φ. With the entailment relation |=
deﬁned as follows:

X, v |= (cid:62)
X, v |= ⊥
X, v |= p
X, v |= ϕ

X, v |= ¬Φ
X, v |= Φ ∨ Φ(cid:48)

holds
does not hold
iﬀ v(p) = (cid:62)
iﬀ X |= ϕ (deﬁnition 3),
where ϕ ∈ QoSCstr (A).
iﬀ X, v |= Φ does not hold
iﬀ X, v |= Φ or X, v |= Φ(cid:48)
where Φ, Φ(cid:48) ∈ QoSReq(A, P).

Consider the ﬁrst QoS requirement example Φ1 deﬁned above and the QoS
proﬁle Xcorr of ﬁg. 3. Under this deﬁnition, Xcorr |= Φ1 does not hold because,
while (cid:82)
fXcorr ≈ 0.24 satisﬁes the second constraint, (cid:82)
fXcorr ≈ 0.13 does
not satisfy the ﬁrst constraint, rendering the conjunction unsatisﬁable.

Rgood

Rbad

3 Automatic analysis of QoS requirements

Given our framing of the problem, introduced in section 1, an algorithm for de-
ciding the satisfaction relation of deﬁnition 5 would eﬀectively solve the service
selection problem, by giving a decision criteria for each service in the repository.
In this section we give such algorithm, which has two components: the problem
of numerically integrating joint PDFs to determine the satisfaction of QoS con-
straints, and the algorithmic satisfaction of the Boolean structure of the QoS
requirement. We start by deﬁning a simple transformation of QoS requirements
that will enable the use of state-of-art SAT-solvers for eﬃciently dealing with
the Boolean structure of the formula.

Deﬁnition 6 (Propositional abstraction of QoS requirement). Let A be
a set of quantitative attributes, P a set of Boolean variables and Φ ∈ QoSReq(A, P)
a probabilistic QoS requirement. Now, assume that C is the set of probabilistic
QoS constraints occurring in Φ. We deﬁne the propositional abstraction of Φ
as a Boolean formula ΦB obtained from Φ by replacing each probabilistic QoS
constraint with a fresh propositional variable ci, i ∈ {1, . . . , |C|}.

10

A.E. Martinez Su˜n´e et. al.

Algorithm 1 describes the procedure for deciding whether X |= Φ holds or
not. Essentially, there are three stages: 1) it builds the propositional abstraction
of Φ, 2) it evaluates each QoS constraint in order to decide the truth value of the
corresponding propositional variable, and 3) it checks if the resulting Boolean
formula is satisﬁable. The algorithm relies on two external procedures: SAT and
ComputeIntegral. There exist eﬃcient industrial-strength implementations
of the former [19,20,21] that can be easily employed, as oﬀ-the-shelf compo-
nents, in order to solve SAT(ΦB), the satisﬁability problem for the propositional
abstraction of the requirement .

Data: QoS proﬁle density function fX, QoS requirement Φ.
Result: Boolean indicating whether X |= Φ holds or not.

1 Let C be the set of QoS constraints that appear in Φ.
2 Let d be a dictionary from propositional variables to QoS constraints.
3 ΦB ← Φ
4 foreach QoS constraint ϕ in C do
5

Let c be a fresh propositional variable.
Replace ϕ with c in ΦB.
d[c] ← ϕ

7
8 end
9 foreach key c in dictionary d do
10

Let (cid:104)R, pmin , pmax (cid:105) be the QoS constraint d[c].
if pmin ≤ ComputeIntegral(fX, R) ≤ pmax then

6

11

12

13

14

ΦB ← ΦB ∧ c

else

ΦB ← ΦB ∧ ¬c

end

15
16 end
17 return SAT(ΦB)

Algorithm 1: Decision procedure for QoS requirements

Moreover, given a joint PDF fX and R ⊆ Rn, the procedure ComputeIn-

tegral(fX, R) for computing (cid:82)

R fX needs a more thorough discussion.

3.1 Numerical integration of QoS proﬁle fX in region R

Notice that, since the integration limits are already speciﬁed by R, we are not
interested in the problem of indeﬁnite or symbolic integration [22]. In contrast,
the problem we face is the numerical evaluation of a deﬁnite integral [23]. In
general, the algorithms for numerically integrating a given function are classiﬁed
by the type of functions and the type of regions that can be integrated.

In our approach, functions are arbitrary PDFs (usually referred to as non-
parametric PDFs) emerging from the probabilistic modeling of the QoS proﬁle
(the behaviour of the quantitative attributes of a service). Based on such a broad
interpretation of quantitative attribute, we disregard those integration methods

Probabilistic Quality of Service aware Service Selection

11

designed for speciﬁc classes of functions, such as the ones tailored for polynomials
[24]. Secondly, regions result from the constraints restricting the valuations for
the quantitative attributes, leading to the problem of choosing a language for
describing constraints. This requires considering two important aspects; on the
one hand, the expressivity of the language, relativised by its usefulness (both
from the point of view of the language usability, and from the practical relevance
of the regions it can describe) and, on the other hand, the existence of eﬃcient
algorithms for solving the numerical integration.

The most basic approach to numerical integration in multiple dimensions is
to ﬁnd a way of reducing it to an iteration of one-dimensional integrals, which
usually assumes the region R is an n-dimensional rectangle [25]. The integration
over an n-dimensional simplex (see deﬁnition 8) has been also thoroughly stud-
ied [26]. From these building blocks, a plethora of methods have been developed
for more general regions that can be decomposed into those elementary ones [23,
Chap. 5.5]. This is due to the fact that the value of the integral over the union
of disjoint regions is equal to the sum of the values of the integrals over each
region. In this context, convex polyhedra are probably the most studied type of
regions [27,28,29], and have been used for many purposes in the ﬁeld of software
veriﬁcation [30]. Convex polyhedra (see deﬁnition 7) are appealing because they
provide a way to outline a set of values of interest and, additionally, non-convex
regions can be decomposed into a union of disjoint convex ones. These obser-
vations lead us to choose disjoint and ﬁnite family of bounded polytopes3 for
characterizing the regions for deﬁning QoS constraints (see deﬁnition 4).

Deﬁnition 7 (Polyhedral region). A polyhedral region (or polytope) R in Rn
is a set of points x ∈ Rn that satisfy a system of linear inequalities { x | Ax ≤ b },
where A is a matrix in Rm×n and b ∈ Rm.

Deﬁnition 8 (Simplex). Let {x0, . . . , xn} be a set of aﬃnely independent
points in Rn, the n-simplex yield by x0, . . . , xn is the set of all points x ∈ Rn
such that x = (cid:80)n

i=0 tixi, for ti ≥ 0 where (cid:80)n

i=0 ti = 1.

There exist many diﬀerent deﬁnitions for polytope [29], we adopted the one
based on intersecting half-spaces. When an intersection polytope is bounded,
we have a bounded polytope that, as stated in [29, Thm. 2.15], can be equiva-
lently represented as a set of simplices that have no interior points in common.
The process of building this simplicial representation from a polytope is called
triangulation or decomposition and there are several algorithms for achieving it
[32, Sec. 3.1] (alternatively [28]). This decomposition completes a procedure for
numerically integrating functions over regions characterised as bounded poly-
tope. The complexity of the procedure is primarily dominated by the amount
of simplices obtained by the decomposition, because all of them have to be in-
tegrated separately. The number of simplices resulting from the decomposition

3 The reader should note that this approach also admits the use of non disjoint regions
polyhedra, as they can be decomposed into a family of disjoint polytopes through
the use of the the Principle of inclusion-exclusion [31, Chap. 4].

12

A.E. Martinez Su˜n´e et. al.

of a bounded polytope largely depends on the speciﬁc geometry of the polytope
being decomposed reaching magnitude in O(2n) or O(n!), where n is the num-
ber of dimensions (in our context, the number of quantitative attributes). If the
number of number of quantitative attributes is small the approach is acceptable,
but if it’s large the complexity threatens its applicability.

This limitation can be overcome by computing the integrals by resorting to
a Monte Carlo approximation algorithm [33], which we will focus on for the rest
of the paper. For that to be possible the following operations must be realizable:
a) compute V , the volume of R, b) uniformly sample k points {x1, . . . xk} ∈ R,
and c) given a point x ∈ Rn, compute fX(x). Then, we can compute an estimator
of the integral, Qk = V 1
i=1 fX(xi) which, by the strong law of large numbers
k
[34, Chap. 2], is known to be an approximation of the value of the integral, in
the sense that P(limk→∞ Qk = (cid:82)
R fX) = 1. The interested reader should review
[33, Sec. 6.2] for a general presentation of this technique.

(cid:80)k

Let us review the satisfaction of the aforementioned assumptions for the

Monte Carlo approximation algorithm:

a) Computation of the volume V: the complexity of computing the exact
volume of a bounded polytope is proven to be #P-Hard [35], but practi-
cal implementations can be found in [28]. Nevertheless, eﬃcient estimation
algorithms have been developed, such as the one presented in [36]. This es-
timation algorithm is based on a Multiphase Monte-Carlo algorithm and is
shown to have an algorithmic complexity of O∗(mn3), where n is the dimen-
sion and m is the number of facets (i.e., the number of linear inequalities)4.
a) Uniform sampling of points in the polyhedral region: several strate-
gies could be used, for example, Markov Chain Monte Carlo algorithms like
Dikin walk, introduced in [37], with algorithimc complexity in O(mn), where
n is the dimension of the polytope and m the number of constraints; newer
approaches [38], also based in MCMC algorithms, present diﬀerent sampling
strategies with better complexity under speciﬁc conditions, for example, the
Vaidya walk has complexity in O(m0.5n1.5), which is signiﬁcantly better
when m (cid:29) n.

a) Evaluation of the density function: we assume throughout this work
that the density function fX has a ﬁnite representation, such as an algebraic
expression or a probabilistic program, that yields precise computational
steps.

√

√

k. The factor

Under these conditions, by [33, Thm. 6.1], the error |Qk − (cid:82)
R fX| is of order
k comes from the distribution given by the central limit
1/
theorem applied to the estimator Qk. The fact that this convergence rate does
not depend on the dimension n is one of the advantages of the method over other
numerical methods for integration.

4 O∗, known as Soft-O notation, indicates the omission of logarithmic factors as well

as factors depending on other parameters like the error bound.

Probabilistic Quality of Service aware Service Selection

13

4 Learning QoS proﬁles from data

A signiﬁcant part of the literature about service-based software systems is de-
voted to monitoring the services’ runtime behaviour and almost always such
information is used to address the problem of contract violations. This stand-
point can be thought of as a Foucaultian5 approach in which service providers
are trusted to perform according to the contract they expose, and punished if
they incur in a violation. We commit to an opposite view that can be thought
of as an Aristotelian6 approach; in it, the QoS proﬁle of a service (i.e., the joint
PDF of the values taken by its quantitative attributes) should be the result of
learning from its behaviour in the wild, by monitoring the attributes at runtime.
Given the set of quantitative attributes A of a service, a QoS record will be
a vector x ∈ Rn. The intuition is that a QoS record formalises the values taken
by the quantitative attribute in a single execution of the service, and the idea is
to estimate the QoS proﬁle of a service by collecting its successive QoS records
and estimating a joint PDF from them. In the ﬁeld of probability and statistics
this is a well-known problem called probability density estimation [39] and there
are several methods for estimating probability density functions from a sample
of the underlying distribution. We illustrate the approach by resorting to the
well-know technique of kernel density estimation [40,41].

Deﬁnition 9 (Kernel density estimation). Given a set of observations
{x1, . . . , xm} in Rn, the kernel density estimator (KDE) ˆf (x) is deﬁned as:

ˆf (x) =

m
(cid:88)

i=1

Kh(x − xi)

where Kh is a kernel function satisfying (cid:82)
bandwidth or smoothing parameter.

Rn Kh(x) dx = 1, with h being the

There are many types of kernel functions that can be used in KDE, and each
of them represent a diﬀerent interpretation of how the inﬂuence (weight) asso-
ciated to an observation is distributed in its neightborhood. Once that kernel is
ﬁxed, the bandwidth plays a crucial role in how that KDE learns the distribu-
tion from the observations, if the bandwidth is too low the KDE will overﬁt the
observations and be too inﬂuenced by the concrete values and if it is too high,
it will not be able to learn and adjust to the weight of the observations. While
there is no way to know the optimal bandwidth in advance there exists several
strategies for identifying good candidates. The fastest methods for computing
the approximate bandwidth are known as rules of thumb. Examples of such rules
for Gaussian kernels are the Silverman’s rule of thumb [42, pp. 48, eq. 3.31], for

5 The term is used by analogy to Michel Foucault’s theorisations on how modern
society deals with non-compliance with the social contract, introduced in his 1975
book “Surveiller et punir: Naissance de la prison”.

6 The term is used in relation to the famous Aristotle’s quote “The only truth is
reality”, phrase in which he distance himself from the idealism in Plato’s philosophy.

14

A.E. Martinez Su˜n´e et. al.

obtaining a good bandwidth for univariate KDEs; a multivariate version of this
rule [43, pp. 152, eq. 6.41]; and the Scott’s rule of thumb [43, pp. 152, eq. 6.42].
For other kernels, [43, table 6.3] provides constants by which hi must be mul-
tiplied. Full cross-validation [44] is a technique for obtaining an optimal com-
bination of a kernel type and a bandwidth from available data. This method is
signiﬁcantly more computationally demanding but their use is acceptable if the
parameter update is performed selectively. More sophisticated kernel estimators
have been developed lately centered in the idea of incremental density estimation
for streams [45].

In table 1 we show a comparison between the approximate volume compu-
tation of the regions depicted in ﬁg. 4 over the exact QoS proﬁle of ﬁg. 3, and
over KDEs trained with diﬀerent sample sizes, based on optimal combinations
of kernel and bandwidth, obtained by full cross-validation.

KDE sample size

(kernel, bandwidth, time)

Region Rgood

Region Rbad

100

(exponential, 13.107, 41.1s) 0.1729 (23.57%) 0.2021 (11.45%)
1000 (exponential, 6.903, 7m 59,3s) 0.1546 (10.49%) 0.2694 (18.03%)
10000 (exponential, 4.145, 135m 4.1s) 0.1312 (6.20%) 0.2400 (5.16%)

exact QoS proﬁle

0.1399

0.2282

Table 1. Comparison between the approximate volume computation of the regions of
ﬁg. 4 using the exact PDF and KDEs.

In ﬁg. 5 we show a plot of the joint PDF learnt by KDE from sampling
1000 observations from the exact joint PDF, presented as the running example,
and resorting to full cross-validation for optimising the kernel choice and the
bandwidth.

By resorting to learnt joint PDFs, QoS proﬁles provide the information that
better ﬁts the already observed service’s behaviour, avoiding: 1) requiring the
service provider to give a, potentially, complex formalisation of the statistical
properties of the quantitative attributes (specially considering the case of those
whose behaviour fall out of the providers’ control, like latency or bandwidth
of the communication infrastructure) and 2) establishing complex penalisation
schemes that, due to the complexity of providing a realistic joint PDF, could be
unfair, or unnecessarily harsh, with a service provider.

A similar idea has been studied, with promising experimental results, in
[46]. There, the authors propose the use of statistical methods to estimate the
univariate PDF of each speciﬁc attribute in isolation. The contribution of this
section can be thought of as a generalisation of their approach to the multivariate
case, which we believe is more faithful to reality.

It is worth noticing that QoS proﬁles learnt by creating KDEs might lead to
unrealistic phenomena. Many times we see attributes whose PDF is not continu-
ous, for example, a pricing scheme might be based on predeﬁned pricing functions

Probabilistic Quality of Service aware Service Selection

15

Fig. 5. Depiction of a QoS proﬁle learnt by KDE with sample size 1000 and full cross
validation for kernel and bandwidth optimisation.

applicable to diﬀerent consumer proﬁles. A KDE is not capable of showing such
discontinuities. Therefore, predicting the probability using a KDE at those spe-
ciﬁc points, do not appropriately characterise the expected behaviour. While
this limitation might be consider a small problem in general, it can lead to er-
roneous predictions, for example, when the probability associated to paying a
negative price is non zero. Solving this problem requires a mayor modiﬁcation
of the method because we need to adapt how observations are integrated to the
KDE whenever they inﬂuence non admissible values.

5 Conclusions

In the present work we addressed the QoS-aware service selection problem in a
probabilistic setting. We identiﬁed some elements of interest that the existing
literature have treated partially and separately: 1) QoS attribute are just measur-
able attributes not assuming any prescribed speciﬁc interpretation or behaviour,
and 2) QoS attribute adopt values from a continuous probability distribution. To
that we add the need for adopting a multivariate view regarding the probability
distribution of the values, in order to enable the representation of interdepen-
dent probabilistic behaviour of the QoS attributes. This need was justiﬁed by
resorting to the well-known existing relation between the throughput and the
response time of a service (see the running example presented above).

To tackle the problem, we proposed a uniﬁed approach in which: 1) QoS at-
tributes are just real variables with no further interpretation or assumed intrinsic
behaviour, 2) QoS proﬁles are deﬁned as non-parametric joint PDFs for random
vectors, representing the QoS attributes, and 3) QoS requirements are Boolean
combinations of probabilistic constraints; for which we provided: 1) an algorithm
for deciding whether a QoS requirement is satisﬁed by a QoS proﬁle, based on
an eﬃcient Monte Carlo integration procedure and state-of-the-art SAT-solving

16

A.E. Martinez Su˜n´e et. al.

techniques, and 2) the mathematical foundations for learning QoS proﬁles from
empirical data sampled from executions, eliminating the burden of creating QoS
proﬁles from the service providers. We also discussed how the presented algo-
rithm constitutes the core procedure for solving the service selection problem in
a probabilistic environment.

References

1. Fiadeiro, J.L., Lopes, A., Bocchi, L.: An abstract model of service discovery and

binding. Formal Aspects of Computing 23(4) (July 2011) 433–463

2. Bouguettaya, A., Sheng, Q.Z., Daniel, F., eds.: Web Services Foundations. Springer

New York, New York, NY (2014)

3. Moghaddam, M., Davis, J.G.: Service Selection in Web Service Composition: A
Comparative Review of Existing Approaches. In Bouguettaya, A., Sheng, Q.Z.,
Daniel, F., eds.: Web Services Foundations. Springer, New York, NY (2014) 321–
346

4. Hayyolalam, V., Pourhaji Kazem, A.A.: A systematic literature review on QoS-
aware service composition and selection in cloud environment. Journal of Network
and Computer Applications 110 (May 2018) 52–74

5. Zheng, H., Yang, J., Zhao, W.: Probabilistic QoS Aggregations for Service Com-

position. ACM Transactions on the Web 10(2) (May 2016) 12:1–12:36

6. Yau, S.S., Yin, Y.: QoS-Based Service Ranking and Selection for Service-Based
Systems. In: 2011 IEEE International Conference on Services Computing. (July
2011) 56–63

7. Zeng, L., Benatallah, B., Ngu, A., Dumas, M., Kalagnanam, J., Chang, H.: QoS-
aware middleware for Web services composition. IEEE Transactions on Software
Engineering 30(5) (May 2004) 311–327

8. Mart´ın-D´ıaz, O., Ruiz-Cort´es, A., Dur´an, A., Benavides, D., Toro, M.: Automat-
ing the Procurement of Web Services. In Orlowska, M.E., Weerawarana, S., Papa-
zoglou, M.P., Yang, J., eds.: Service-Oriented Computing - ICSOC 2003. Lecture
Notes in Computer Science, Berlin, Heidelberg, Springer (2003) 91–103

9. Klein, A., Ishikawa, F., Bauer, B.: A Probabilistic Approach to Service Selection
with Conditional Contracts and Usage Patterns. In Baresi, L., Chi, C.H., Suzuki,
J., eds.: Service-Oriented Computing. Lecture Notes in Computer Science, Berlin,
Heidelberg, Springer (2009) 253–268

10. Rosario, S., Benveniste, A., Jard, C.: Flexible Probabilistic QoS Management
of Transaction Based Web Services Orchestrations. In: 2009 IEEE International
Conference on Web Services. (July 2009) 107–114

11. Hwang, S.Y., Wang, H., Tang, J., Srivastava, J.: A probabilistic approach to
modeling and estimating the QoS of web-services-based workﬂows. Information
Sciences 177(23) (December 2007) 5484–5503

12. Hwang, S.Y., Hsu, C.C., Lee, C.H.: Service Selection for Web Services with Proba-
bilistic QoS. IEEE Transactions on Services Computing 8(3) (May 2015) 467–480
13. Calinescu, R., Grunske, L., Kwiatkowska, M., Mirandola, R., Tamburrelli, G.: Dy-
namic qos management and optimization in service-based systems. IEEE Trans-
actions on Software Engineering 37(3) (2011) 387–409

14. Calinescu, R., Ghezzi, C., Johnson, K., Pezz´e, M., Raﬁq, Y., Tamburrelli, G.: For-
mal veriﬁcation with conﬁdence intervals to establish quality of service properties
of software systems. IEEE Transactions on Reliability 65(1) (2016) 107–125

Probabilistic Quality of Service aware Service Selection

17

15. Zemni, M.A., Benbernou, S., Carro, M.: A Soft Constraint-Based Approach to
In Maglio, P.P., Weske, M., Yang, J., Fantinato,
QoS-Aware Service Selection.
M., eds.: Service-Oriented Computing. Lecture Notes in Computer Science, Berlin,
Heidelberg, Springer (2010) 596–602

16. Rosenberg, F., Celikovic, P., Michlmayr, A., Leitner, P., Dustdar, S.: An End-to-
End Approach for QoS-Aware Service Composition. In: 2009 IEEE International
Enterprise Distributed Object Computing Conference. (September 2009) 151–160
17. Chouiref, Z., Belkhir, A., Benouaret, K., Hadjali, A.: A fuzzy framework for eﬃcient
user-centric Web service selection. Applied Soft Computing 41 (April 2016) 51–65
18. Al-Masri, E., Mahmoud, Q.H.: QoS-based Discovery and Ranking of Web Ser-
vices. In: 2007 16th International Conference on Computer Communications and
Networks. (August 2007) 529–534

19. E´en, N., S¨orensson, N.: An Extensible SAT-solver. In Giunchiglia, E., Tacchella, A.,
eds.: Theory and Applications of Satisﬁability Testing, SAT 2003. Lecture Notes
in Computer Science, Berlin, Heidelberg, Springer (2004) 502–518

20. Gebser, M., Kaufmann, B., Neumann, A., Schaub, T.: Clasp: A Conﬂict-Driven
Answer Set Solver. In Baral, C., Brewka, G., Schlipf, J., eds.: Logic Programming
and Nonmonotonic Reasoning, LPNMR 2007. Lecture Notes in Computer Science,
Berlin, Heidelberg, Springer (2007) 260–265

21. Le Berre, D., Parrain, A.: The Sat4j library, release 2.2: System description. Journal
on Satisﬁability, Boolean Modeling and Computation 7(2-3) (July 2010) 59–64
22. Bronstein, M.: Symbolic Integration I: Transcendental Functions. Second edn.
Algorithms and Computation in Mathematics, Algorithms,Computation Math. Vol
1 Bronstein,M.:Symbolic Integrat. Springer-Verlag, Berlin Heidelberg (2005)
23. Davis, P.J., Rabinowitz, P.: Methods of Numerical Integration. 2nd ed edn. Com-

puter Science and Applied Mathematics. Academic Press, Orlando (1984)

24. De Loera, J.A., Dutra, B., K¨oppe, M., Moreinis, S., Pinto, G., Wu, J.: Software for
exact integration of polynomials over polyhedra. Computational Geometry 46(3)
(April 2013) 232–252

25. van Dooren, P., de Ridder, L.: An adaptive algorithm for numerical integration
over an n-dimensional cube. Journal of Computational and Applied Mathematics
2(3) (September 1976) 207–217

26. Grundmann, A., M¨oller, H.M.: Invariant Integration Formulas for the n-Simplex
by Combinatorial Methods. SIAM Journal on Numerical Analysis 15(2) (April
1978) 282–290

27. Bernardini, F.:

Integration of polynomials over n-dimensional polyhedra.

Computer-Aided Design 23(11) (January 1991) 51–58

28. B¨ueler, B., Enge, A., Fukuda, K.: Exact Volume Computation for Polytopes: A
Practical Study. In Kalai, G., Ziegler, G.M., eds.: Polytopes — Combinatorics and
Computation. DMV Seminar. Birkh¨auser, Basel (2000) 131–154

29. Ziegler, G.M.: Lectures on Polytopes. Graduate Texts in Mathematics. Springer-

Verlag, New York (1995)

30. Bagnara, R., Hill, P.M., Zaﬀanella, E.: Applications of polyhedral computations
to the analysis and veriﬁcation of hardware and software systems. Theoretical
Computer Science 410(46) (November 2009) 4672–4691

31. Liu, C.L.: Introduction to Combinatorial Mathematics. Computer Science Series.

McGraw-Hill, New York, NY (1968)

32. Gritzmann, P., Klee, V.: On the Complexity of Some Basic Problems in Compu-
tational Convexity. In Bisztriczky, T., McMullen, P., Schneider, R., Weiss, A.I.,
eds.: Polytopes: Abstract, Convex and Computational. NATO ASI Series. Springer
Netherlands, Dordrecht (1994) 373–466

18

A.E. Martinez Su˜n´e et. al.

33. Evans, M., Swartz, T.: Approximating Integrals via Monte Carlo and Deterministic
Methods. Number 20 in Oxford Statistical Science Series. Oxford University Press,
Oxford ; New York (2000)

34. Durrett, R.: Probability: Theory and Examples. Fifth edn. Cambridge Series in
Statistical and Probabilistic Mathematics. Cambridge University Press, Cambridge
(2019)

35. Dyer, M.E., Frieze, A.M.: On the complexity of computing the volume of a poly-

hedron. SIAM Journal on Computing 17(5) (October 1988) 967–974

36. Ge, C., Ma, F.: A Fast and Practical Method to Estimate Volumes of Convex
Polytopes. In Wang, J., Yap, C., eds.: Frontiers in Algorithmics. Lecture Notes in
Computer Science, Cham, Springer International Publishing (2015) 52–65

37. Kannan, R., Narayanan, H.: Random Walks on Polytopes and an Aﬃne Interior
Point Method for Linear Programming. Mathematics of Operations Research 37(1)
(February 2012) 1–20

38. Chen, Y., Dwivedi, R., Wainwright, M.J., Yu, B.: Fast MCMC sampling algorithms
on polytopes. The Journal of Machine Learning Research 19(1) (January 2018)
2146–2231

39. Silverman, B.W.: Density Estimation for Statistics and Data Analysis. Number 26
in Monographs on Statistics and Applied Probability. Chapman & Hall/CRC, Boca
Raton (1998)

40. Fix, E., (Jr.), J.L.H.: Discriminatory analysis. nonparametric discrimination: Con-
International Statistical Review / Revue Internationale de

sistency properties.
Statistique 57(3) (1989) 238–247 Originally appeared in [47].

41. Rosenblatt, M.: Remarks on some nonparametric estimates of a density function.

The Annals of Mathematical Statistics 27(3) (1956) 832–837

42. Silverman, B.W.: Density Estimation for Statistics and Data Analysis. Monographs

on statistics and applied probability. Chapman & Hall, Ltd. (1986)

43. Scott, D.W.: Multivariate Density Estimation: Theory, Practice, and Visualization.

John Wiley & sons, Inc. (1992)

44. Sain, S.R., Baggerly, K.A., Scott, D.W.: Cross-validation of multivariate densities.

Journal of the American Statistical Association 89(427) (1994) 807–817

45. He, Y., Jiang, J., Dai, D., Fabrice, K.: An incremental kernel density estimator for

data stream computation. Complexity 2020 (2020) 1803525:1–1803525:17

46. Zheng, H., Yang, J., Zhao, W.: QoS probability distribution estimation for web
In: 2010 IEEE International Conference on

services and service compositions.
Service-Oriented Computing and Applications (SOCA). (December 2010) 1–8
47. Fix, E., (Jr.), J.L.H.: Discriminatory analysis. nonparametric discrimination: Con-
sistency properties. Report 4, USAF School of Aviation and Medicine Randolph
Field, Texas (February 1951) Project number: 21-49-004.

