Acacia-Bonsai: A Modern Implementation of
Downset-Based LTL Realizability

Micha¨el Cadilhac1 and Guillermo A. P´erez2

1 DePaul University, USA
michael@cadilhac.name
2 University of Antwerp – Flanders Make, Belgium
guillermoalberto.perez@uantwerpen.be

Abstract. We describe our implementation of downset-manipulating al-
gorithms used to solve the realizability problem for linear temporal logic
(LTL). These algorithms were introduced by Filiot et al. in the 2010s
and implemented in the tools Acacia and Acacia+ in C and Python.
We identify degrees of freedom in the original algorithms and provide
a complete rewriting of Acacia in C++20 articulated around genericity
and leveraging modern techniques for better performances. These tech-
niques include compile-time specialization of the algorithms, the use of
SIMD registers to store vectors, and several preprocessing steps, some
relying on eﬃcient Binary Decision Diagram (BDD) libraries. We also
explore diﬀerent data structures to store downsets. The resulting tool is
competitive against comparable modern tools.

Keywords: LTL synthesis · C++ · downset · antichains · SIMD · BDD

1

Introduction

Nowadays, hardware and software systems are everywhere around us. One way
to ensure their correct functioning is to automatically synthesize them from a
formal speciﬁcation. This has two advantages over alternatives such as testing
and model checking: the design part of the program-development process can be
completely bypassed and the synthesized program is correct by construction.

In this work we are interested in synthesizing reactive systems [15]. These
maintain a continuous interaction with their environment. Examples of reac-
tive systems include communication, network, and multimedia protocols as well
as operating systems. For the speciﬁcation, we consider linear temporal logic
(LTL) [23]. LTL allows to naturally specify time dependence among events that
make up the formal speciﬁcation of a system. The popularity of LTL as a formal
speciﬁcation language extends to, amongst others, AI [13,6,14], hybrid systems
and control [5], software engineering [18], and bio-informatics [1].

The classical doubly-exponential-time synthesis algorithm can be decom-
posed into three steps: 1. compile the LTL formula into an automaton of exponen-
tial size [28], 2. determinize the automaton [25,22] incurring a second exponen-
tial blowup, 3. and determine the winner of a two-player zero-sum game played

2
2
0
2

r
p
A
2
1

]

O
L
.
s
c
[

1
v
9
7
0
6
0
.
4
0
2
2
:
v
i
X
r
a

 
 
 
 
 
 
2

M. Cadilhac, G. A. P´erez

on the latter automaton [24]. Most alternative approaches focus on avoiding the
determinization step of the algorithm. This has motivated the development of so-
called Safra-less approaches, e.g., [17,9,8,27]. Worth mentioning are the on-the-
ﬂy game construction implemented in the Strix tool [21] and the downset-based
(or “antichain-based”) on-the-ﬂy bounded determinization described in [11] and
implemented in Acacia+ [4]. Both avoid constructing the doubly-exponential
deterministic automaton. Acacia+ was not ranked in recent editions of SYNT-
COMP [16] (see http://www.syntcomp.org/) since it is no longer maintained
despite remaining one of the main references for new advancements in the ﬁeld
(see, e.g., [10,29,26,19,2]).

Contribution. We present the Acacia approach to solving the problem at hand
and propose a new implementation that allows for a variety of optimization steps.
For now, we have focused on (B¨uchi automata) realizability, i.e., the decision
problem which takes as input an automaton compiled from the LTL formula
and asks whether a controller satisfying it exists. In our tool, we compile the
input LTL formula into an automaton using Spot [7]. We entirely specialize
our presentation on the technical problem at hand and strive to distillate the
algorithmic essence of the Acacia approach in that context. The main algorithm
is presented in Section 3.4 and the diﬀerent implementation options are listed in
Section 4. Benchmarks are included in Section 6.

2 Preliminaries

Throughout this abstract, we assume the existence of two alphabets, I and O;
although these stand for input and output, the actual deﬁnitions of these two
terms is slightly more complex: An input (resp. output) is a boolean combination
of symbols of I (resp. O) and it is pure if it is a conjunction in which all the
symbols in I (resp. O) appear; e.g., with I = {i1, i2}, the expressions (cid:62) (true),
⊥ (false), and (i1 ∨ i2) are inputs, and (i1 ∧ ¬i2) is a pure input. Similarly, an IO
is a boolean combination of symbols of I ∪ O, and it is pure if it is a conjunction
in which all the symbols in I ∪ O appear. We use i, j to denote inputs and x, y
for IOs. Two IOs x and y are compatible if x ∧ y (cid:54)= ⊥.

A B¨uchi automaton A is a tuple (Q, q0, δ, B) with Q a set of states, q0 the
initial state, δ the transition relation that uses IOs as labels, and B ⊆ Q the
set of B¨uchi states. The actual semantics of this automaton will not be relevant
to our exposition, we simply note that these automata are usually deﬁned to
recognize inﬁnite sequences of symbols from I ∪ O. We assume, throughout this
paper, the existence of some automaton A.

We will be interested in valuations of the states of A that indicate some sort
of progress towards reaching B¨uchi states—again, we do not go into details here.
We will simply speak of vectors over A for elements in ZQ, mapping states to
integers. We will write (cid:126)v for such vectors, and vq for its value for state q. In
practice, these vectors will range into a ﬁnite subset of Z, with −1 as an implicit
minimum value (meaning that (−1)−1 is still −1) and an upper bound provided
by the problem.

Acacia-Bonsai: Downset-Based LTL Realizability

3

For a vector (cid:126)v over A and an IO x, we deﬁne a function that takes one
step back in the automaton, decreasing components that have seen B¨uchi states.
Write χB(q) for the function mapping a state q to 1 if q ∈ B, and 0 otherwise.
We then deﬁne bwd((cid:126)v, x) as the vector over A that maps each state p ∈ Q to:

min
(p,y,q)∈δ
x compatible with y

(vq − χB(q)) ,

and we generalize this to sets: bwd(S, x) = {bwd((cid:126)v, x) | (cid:126)v ∈ S}. For a set S of
vectors over A and a (possibly nonpure) input i, deﬁne:

CPrei(S) = S ∩

(cid:91)

bwd(S, x) .

x pure IO
x compatible with i

It can be proved that iterating CPre with any possible pure input stabilizes
to a ﬁxed point that is independent from the order in which the inputs are
selected. We deﬁne CPre∗(S) to be that set.

All the sets that we manipulate will be downsets: we say that a vector (cid:126)u
dominates another vector (cid:126)v if for all q ∈ Q, uq ≥ vq, and we say that a set
is a downset if (cid:126)u ∈ S and (cid:126)u dominates (cid:126)v implies that (cid:126)v ∈ S. This allows to
implement these sets by keeping only dominating elements, which form, as they
are pairwise nondominating, an antichain. In practice, it may be interesting to
keep more elements than just the dominating ones or even to keep all of the
elements to avoid the cost of computing domination.

Finally, we deﬁne Safek as the smallest downset containing the all-k vector.

We are now equipped to deﬁne the computational problem we focus on:

BackwardRealizability

– Given: A B¨uchi automaton A and an integer k > 0,
– Question: Is there a (cid:126)v ∈ CPre∗(Safek) with vq0 ≥ 0?

We note, for completeness, that (for suﬃciently large values of k) this problem
is equivalent to deciding the realizability problem associated with A: the question
has a positive answer iﬀ the output player wins the Gale-Stewart game with
payoﬀ set the complement of the language of A.

3 Realizability algorithm

The problem admits a natural algorithmic solution: start with the initial set, pick
an input i, apply CPrei on the set, and iterate until all inputs induce no change
to the set, then check whether this set contains a vector that maps q0 to 0. We
ﬁrst introduce some degrees of freedom in this approach, then present a slight
twist on that solution that will serve as a canvas for the diﬀerent optimizations.

4

M. Cadilhac, G. A. P´erez

3.1 Boolean states

This opportunity for optimization was identiﬁed in [3] and implemented in Aca-
cia+, we simply introduce it in a more general setting and succinctly present the
original idea when we mention how it can be implemented in Section 4.2. We
start with an example. Consider the B¨uchi automaton:

q0

(cid:62)

q1

(cid:62)

Recall that we are interested in, after CPre has stabilized, whether the ini-
tial state can carry a nonnegative value. In that sense, the crucial information
associated with q0 is boolean in nature: is its value positive or −1? Even fur-
ther, this same remark can be applied to q1 since q1 being valued 6 or 7 is not
important to the valuation of q0. Hence the set of states may be partitioned into
integer-valued states and boolean-valued ones. Naturally, detecting which states
can be made boolean comes at a cost and not doing it is a valid option.

3.2 Actions

For each IO x, we will have to compute bwd((cid:126)v, x) oftentimes. This requires to
refer to the underlying B¨uchi automaton and checking for each transition therein
whether x is compatible with the condition. It may be preferable to precompute,
for each x, what are the relevant pairs (p, q) for which x can go from p to q. We
call the set of such pairs the io-action of x and denote it io-act(x); in symbols:

io-act(x) = {(p, q) | (∃(p, y, q) ∈ δ)[x is compatible with y]} .

Further, as we will be computing CPrei(S) for inputs i, we abstract in a
similar way the information required for this computation. We use the term
input-action for the set of io-actions of IOs compatible with i and denote it
i-act(i); in symbols:

i-act(i) = {io-act(x) | x is an IO compatible with i} .

In other words, actions contain exactly the information necessary to compute
CPre. Note that from an implementation point of view, we do not require that the
actions be precomputed. Indeed, when iterating through pairs (p, q) ∈ io-act(x),
the underlying implementation can choose to go back to the automaton.

3.3 Suﬃcient inputs

As we consider the transitions of the B¨uchi automaton as being labeled by
boolean expressions, it becomes more apparent that some pure IOs can be re-
dundant. For instance, consider a B¨uchi automaton with I = {i}, O = {o1, o2},
but the only transitions compatible with i are labeled (i ∧ o1) and (i ∧ ¬o1). Pure
IOs compatible with the ﬁrst label will be (i ∧ o1 ∧ o2) and (i ∧ o1 ∧ ¬o2), but

Acacia-Bonsai: Downset-Based LTL Realizability

5

certainly, these two IOs have the same io-actions, and optimally, we would only
consider (i ∧ o1). However, we should not consider (i ∧ o2), as it is compatible
with both transitions, but does not correspond to a pure IO. We will thus allow
our main algorithm to select certain inputs and IOs:

Deﬁnition 1. An IO (resp. input) is valid if there is a pure IO (resp. input)
with the same io-action (resp. input-action). A set X of valid IOs is suﬃcient
if it represents all the possible io-actions of pure IOs: {io-act(x) | x ∈ X} =
{io-act(x) | x is a pure IO}. A suﬃcient set of inputs is deﬁned similarly with
input-actions.

3.4 Algorithm
We solve BackwardRealizability by computing CPre∗ explicitly:

Algorithm 1: Main algorithm

Input: A B¨uchi automaton A, an integer k > 0
Output: Whether (∃(cid:126)v ∈ CPre∗(Safek))[vq0 ≥ 0]

1 Possibly remove some useless states in A
2 Split states of A into boolean and nonboolean
3 Let Downset be a type for downsets using a vector type that possibly

has a boolean part

4 Let S = Safek of type Downset
5 Compute a suﬃcient set E of inputs
6 Compute the input-actions of E
7 while true do
8

Pick an input-action a of E
if no action is returned then

9

10

11

return whether a vector in S maps q0 to a nonnegative value

S ← CPrea(S)

Our algorithm requires that the “input-action picker” used in line 8 decides
whether we have reached a ﬁxed point. As the picker could check whether S has
changed, this is without loss of generality.

The computation of CPrea is the intuitive one, optimizations therein coming
from the internal representation of actions. That is, it is implemented by iterating
through all io-actions compatible with a, applying bwd on S for each of them,
taking the union over all these applications, and ﬁnally intersecting the result
with S.

4 The many options at every line

4.1 Preprocessing of the automaton (line 1)

In this step, one can provide a heuristic that removes certain states that do not
contribute to the computation. We provide an optional step that detects surely
losing states, as presented in [12].

6

M. Cadilhac, G. A. P´erez

4.2 Boolean states (line 2)

We provide several implementations of the detection of boolean states, in ad-
dition to an option to not detect them. Our implementations are based on the
concept of bounded state, as presented in [3]. A state is bounded if it cannot be
reached from a B¨uchi state that lies in a nontrivial strongly connected compo-
nent. This can be detected in several ways.

4.3 Vectors and downsets (line 3)

The most basic data structure in the main algorithm is that of a vector used to
give a value to the states. We provide a handful of diﬀerent vector classes:

– Standard

C++

vector

(std::vector,
std::array). Note that arrays are of ﬁxed size; our implementation pre-
compiles arrays of diﬀerent sizes (up to 300 by default), and defaults to
vectors if more entries are needed.

types

array

and

– Vectors and arrays backed by SIMD3 registers. This makes use of the type
std::experimental::simd and leverages modern CPU optimizations.
Additionally, all these implementations can be glued to an array of booleans
(std::bitset) to provide a type that combines boolean and integer values.
These types can optionally expose an integer that is compatible with the partial
order (here, the sum of all the elements in the vector: if (cid:126)u dominates (cid:126)v, then
the sum of the elements in (cid:126)u is larger than that of (cid:126)v). This value can help the
downset implementations in sorting the vectors.

Downset types are built on top of a vector type. We provide:

– Implementations using sets or vectors of vectors, either containing only the

dominating vectors, or containing explicitly all the vectors;

– An implementation that relies on k-d trees, a space-partitioning data struc-

ture for organizing points in a k-dimensional space;

– Implementations that store the vectors in speciﬁc bins depending on the

information exposed by the vector type.

4.4 Selecting suﬃcient inputs (line 5)

Recall our discussion on suﬃcient inputs of Section 3.3. We introduce the notion
of terminal IO following the intuition that there is no restriction of the IO that
would lead to a more speciﬁc action:

Deﬁnition 2. An IO x is said to be terminal if for every compatible IO y,
we have io-act(x) ⊆ io-act(y). An input i is said to be terminal if for every
compatible input j we have i-act(i) ⊆ i-act(j).

Proposition 1. Any pure IO and any input is terminal. Any terminal IO and
any terminal input is valid.

3 SIMD: Single Instruction Multiple Data, a set of CPU instructions & registers to

compute component-wise operations on ﬁxed-size vectors.

Acacia-Bonsai: Downset-Based LTL Realizability

7

Our approaches to input selection focus on eﬃciently searching for a suﬃcient
set of terminal IOs and inputs. We present here a simple algorithm for computing
a suﬃcient set of terminal IOs.

Algorithm 2: Computing a suﬃcient set of terminal IOs

Input: A B¨uchi automaton A
Output: A suﬃcient set of terminal IOs

P ← {(cid:62)}
for every label x in the automaton do
for every element y in P do

if x ∧ y (cid:54)= ⊥ then

Delete y from P
Insert x ∧ y in P
if ¬x ∧ y (cid:54)= ⊥ then insert ¬x ∧ y in P

return P

At this point, we provide 3 implementations of input selection:

– No precomputation, i.e., return pure inputs/IOs;
– Applying Algorithm 2 twice: for IOs and inputs;
– Use a pure BDD approach to do the previous algorithm; this relies on extra
variables to have the loop “for every element y in P ” iterate only over
elements y that satisfy x ∧ y (cid:54)= ⊥.

4.5 Precomputing actions (line 6)

Since computing CPrei for an input i requires to go through i-act(i), possibly
going back to the automaton and iterating through all transitions, it may be ben-
eﬁcial to precompute this set. We provide this step as an optional optimization
that is intertwined with the computation of a suﬃcient set of IOs; for instance,
rather than iterating through labels in Algorithm 2, one could iterate through
all transitions, and store the set of transitions that are compatible with each
terminal IO on the ﬂy.

4.6 Main loop: Picking input-actions (line 8)

We provide several implementations of the input-action picker:

– Return each input-action in turn, until no change has occurred to S while

going through all possible input-actions;

– Search for an input-action that is certain to change S. This is based on the
concept of critical input as presented in [3]. This is reliant on how input-
actions are ordered themselves, so we provide multiple options (using a pri-
ority queue to prefer inputs that were recently returned, randomize part of
the array of input-actions, and randomize the whole array).

8

M. Cadilhac, G. A. P´erez

5 Checking nonrealizability

As mentioned in the preliminaries, for large values of k the BackwardRealiz-
ability problem is equivalent to a non-zero sum game whose payoﬀ set is the
complement of the language of the given automaton. More precisely, for small
values of k, a negative answer for the BackwardRealizability problem does
not imply the output player does not win the game. Instead, if one is interested
in whether the output player wins, a property known as determinacy [20] can
be leveraged to instead ask whether a complementary property holds: does the
input player win the game?

We thus need to build an automaton B for which a positive answer to the
BackwardRealizability translates to the previous property. To do so, we can
consider the negation of the input formula, ¬φ, and inverse the roles of the play-
ers, that is, swap the inputs and outputs. However, to make sure the semantics
of the game is preserved, we also need to have the input player play ﬁrst, and
the output player react to the input player’s move. To do so, we simply need to
have the outputs moved one step forward (in the future, in the LTL sense). This
can be done directly on the input formula, by putting an X (neXt) operator on
each output. This can however make the formula much more complex.

We propose an alternative to this: Obtain the automaton for ¬φ, then push
the outputs one state forward. This means that a transition (p, (cid:104)i, o(cid:105), q) is trans-
lated to a transition (p, i, q), and the output o should be ﬁred from q. In practice,
we would need to remember that output, and this would require the construction
to consider every state (q, o), augmenting the number of states tremendously. Al-
gorithm 3 for this task, however, tries to minimize the number of states (q, o)
necessary by considering nonpure outputs that maximally correspond to a non-
pure input compatible with the original transition label.

Algorithm 3: Modifying A so that the outputs are shifted forward

Input: A B¨uchi automaton A with initial state q0
Output: The states S and transitions ∆ of the B¨uchi automaton B

S, V ← {(q0, (cid:62))}, ∆ ← {}
while V is nonempty do
Pop (p, o) from V
for every (p, x, q) ∈ δ do

y ← x
while y (cid:54)= ⊥ do

Let o(cid:48) be a pure output compatible with y
Let i be an input s.t. i ∧ o(cid:48) ≡ y ∧ o(cid:48)
o(cid:48)(cid:48) ← ∃I.i ∧ y
Add ((cid:104)p, o(cid:105), o ∧ i, (cid:104)q, o(cid:48)(cid:48)(cid:105)) to ∆
If (q, o(cid:48)) is not in S, add it to S and V
y ← y ∧ ¬i

return S, ∆

Acacia-Bonsai: Downset-Based LTL Realizability

9

6 Benchmarks

6.1 Protocol

For the past few years, the yardstick of performance for synthesis tools is the
SYNTCOMP competition [16]. The organizers provide a bank of nearly a thou-
sand LTL formulas, and candidate tools are ran with a time limit of one hour
on each of them. The tool that solves the most instances in this timeframe wins
the competition.

To benchmark our tool, we selected all the LTL formulas that were accepted
in less than 100 seconds by any tool that competed in the 2021 SYNTCOMP
competition. These are 879 out of 945 tests. Notably, 864 of these tests were
solved in less than 20 seconds by some tool, and among the 66 tests left out,
50 were not solved by any tool. This displays a usual trend of synthesis tools:
either they solve an instance fast, or they are unlikely to solve it at all. To better
focus on the ﬁne performance diﬀerences between the tools, we set a timeout of
15 seconds for all tests.

We compared Acacia-Bonsai against itself using diﬀerent choices of options,
and against Acacia+ [4], Strix [21], and ltlsynt [7]. The benchmarks were com-
pleted on a headless Linux computer with the following speciﬁcations:

– CPU: Intel® Core™ i7-8700 CPU @ 3.20GHz. This CPU has 6 hyper-
threaded cores, meaning that 12 threads can run concurrently. It supports
Intel® AVX2, meaning that it has SIMD registers of up to 256 bits.

– Memory: The CPU has 12 MiB of cache, the computer has 16 GiB of DDR4-

2666 RAM.

6.2 Results

The options of Acacia-Bonsai. We compared about 30 diﬀerent conﬁgurations
of Acacia-Bonsai, in order to single out the best combination of options.

– Preprocessing of the automaton (Section 4.1). This seems to have little im-
pact, although a handful of tests saw an important boost. Overall, the per-
formances were worse with automaton preprocessing, owing to the cost of
computing the surely loosing states. Overall, we elected to leave the option
activated in our best conﬁguration.

– Boolean states (Section 4.2). Using boolean states boosted performances by
a marginal amount when SIMD was activated, but had a more important
impact when SIMD was deactivated. This follows the intuition that, thanks
to bitmasks, boolean states allow for vectorized computing, and they are
thus of a lesser impact when native vectorized computing is possible.

– Vectors and downsets (Section 4.3). For the vector implementation to be-
come a bottleneck, speciﬁc implementations of downsets have to be selected.
Although downsets implemented using k-d trees do not outperform the other
implementations with SIMD deactivated, they perform signiﬁcantly better
with SIMD. We show in our main graphic the impact of deactivating SIMD
with k-d trees.

10

M. Cadilhac, G. A. P´erez

– Precomputing a suﬃcient set of inputs and IO (Section 4.4). This comes with
a signiﬁcant boost in speed (shown in the graph below when comparing all
implementations). Among our diﬀerent implementations to ﬁnd a suﬃcient
set, Algorithm 2 turned out to oﬀer the best performances.

– Picking input-actions (Section 4.6). The approaches performed equivalently,
with a slight edge for the choice of critical inputs without randomizing or
priority queue.

– Nonrealizability (Section 5). Computation of the nonrealizability automaton
using Algorithm 3, rather than applying X on the outputs of the formula,
allowed to solve 14% more instances. In practice, we elected to create two
processes for nonrealizability, one for each option, allowing for parallel com-
putation on the two resulting automata.

Acacia-Bonsai and foes. The following graph shows the performance of the tools.
Since these tools tend to solve a lot of instances under one second, we elected to
present this graphic with a logarithmic y-axis. Thanks to this, the cost of entry
of SIMD instructions is also emphasized.

7 Conclusion

We provided six degrees of freedom in the main algorithm for downset-based
LTL realizability and implemented multiple options for each of these degrees.
In this paper, we presented the main ideas behind these. Experiments show
that this careful reimplementation surpasses the performances of the original
Acacia+, making Acacia-Bonsai competitive against modern LTL realizability
tools. Our implementation can be found at https://github.com/gaperez64/
acacia-bonsai/.

0100200300400500600700800instances10−210−1100101CPUtime(s)Acacia-BonsaiStrixAcacia-Bonsai(noIOprecomputing)ltlsyntAcacia-Bonsai(noSIMD)Acacia+Acacia-Bonsai: Downset-Based LTL Realizability

11

References

1. Ahmed, Z., Benqu´e, D., Berezin, S., Dahl, A.C.E., Fisher, J., Hall, B.A., Ishtiaq,
S., Nanavati, J., Piterman, N., Riechert, M., Skoblov, N.: Bringing LTL model
checking to biologists. In: Bouajjani, A., Monniaux, D. (eds.) Veriﬁcation, Model
Checking, and Abstract Interpretation - 18th International Conference, VMCAI
2017, Paris, France, January 15-17, 2017, Proceedings. Lecture Notes in Computer
Science, vol. 10145, pp. 1–13. Springer (2017). https://doi.org/10.1007/978-3-319-
52234-0 1, https://doi.org/10.1007/978-3-319-52234-0_1

2. Bansal, S., Li, Y., Tabajara, L.M., Vardi, M.Y.: Hybrid compositional reasoning for
reactive synthesis from ﬁnite-horizon speciﬁcations. In: The Thirty-Fourth AAAI
Conference on Artiﬁcial Intelligence, AAAI 2020, The Thirty-Second Innovative
Applications of Artiﬁcial Intelligence Conference, IAAI 2020, The Tenth AAAI
Symposium on Educational Advances in Artiﬁcial Intelligence, EAAI 2020, New
York, NY, USA, February 7-12, 2020. pp. 9766–9774. AAAI Press (2020), https:
//aaai.org/ojs/index.php/AAAI/article/view/6528

3. Bohy, A.: Antichain based algorithms for the synthesis of reactive systems. Ph.D.

thesis, University of Mons (2014)

4. Bohy, A., Bruy`ere, V., Filiot, E., Jin, N., Raskin, J.: Acacia+, a tool for LTL
synthesis. In: Madhusudan, P., Seshia, S.A. (eds.) CAV. LNCS, vol. 7358, pp.
652–657. Springer (2012). https://doi.org/10.1007/978-3-642-31424-7 45, https:
//doi.org/10.1007/978-3-642-31424-7_45

5. Bombara, G., Vasile, C.I., Penedo, F., Yasuoka, H., Belta, C.: A decision tree
approach to data classiﬁcation using signal temporal logic. In: Abate, A., Fainekos,
G.E. (eds.) Proceedings of the 19th International Conference on Hybrid Systems:
Computation and Control, HSCC 2016, Vienna, Austria, April 12-14, 2016. pp.
1–10. ACM (2016). https://doi.org/10.1145/2883817.2883843, https://doi.org/
10.1145/2883817.2883843

6. Camacho, A., McIlraith, S.A.: Learning interpretable models expressed in linear
temporal logic. In: Benton, J., Lipovetzky, N., Onaindia, E., Smith, D.E., Sri-
vastava, S. (eds.) Proceedings of the Twenty-Ninth International Conference on
Automated Planning and Scheduling, ICAPS 2018, Berkeley, CA, USA, July 11-
15, 2019. pp. 621–630. AAAI Press (2019), https://aaai.org/ojs/index.php/
ICAPS/article/view/3529

7. Duret-Lutz, A., Lewkowicz, A., Fauchille, A., Michaud, T., Renault, E., Xu, L.:
Spot 2.0 — a framework for LTL and ω-automata manipulation. In: Proceedings of
the 14th International Symposium on Automated Technology for Veriﬁcation and
Analysis (ATVA’16). Lecture Notes in Computer Science, vol. 9938, pp. 122–129.
Springer (Oct 2016). https://doi.org/10.1007/978-3-319-46520-3-8

8. Esparza, J., Kret´ınsk´y, J., Raskin, J., Sickert, S.: From LTL and limit-deterministic
B¨uchi automata to deterministic parity automata. In: Legay, A., Margaria, T.
(eds.) Tools and Algorithms for the Construction and Analysis of Systems -
23rd International Conference, TACAS 2017, Held as Part of the European Joint
Conferences on Theory and Practice of Software, ETAPS 2017, Uppsala, Swe-
den, April 22-29, 2017, Proceedings, Part I. Lecture Notes in Computer Sci-
ence, vol. 10205, pp. 426–442 (2017). https://doi.org/10.1007/978-3-662-54577-
5 25, https://doi.org/10.1007/978-3-662-54577-5_25

9. Esparza, J., Kret´ınsk´y, J., Sickert, S.: From LTL to deterministic automata -
A Safraless compositional approach. Formal Methods Syst. Des. 49(3), 219–271
(2016). https://doi.org/10.1007/s10703-016-0259-2, https://doi.org/10.1007/
s10703-016-0259-2

12

M. Cadilhac, G. A. P´erez

10. Faymonville, P., Finkbeiner, B., Rabe, M.N., Tentrup, L.: Encodings of bounded
synthesis. In: Legay, A., Margaria, T. (eds.) TACAS. LNCS, vol. 10205, pp. 354–
370 (2017). https://doi.org/10.1007/978-3-662-54577-5 20, https://doi.org/10.
1007/978-3-662-54577-5_20

11. Filiot, E., Jin, N., Raskin, J.: An antichain algorithm for LTL realizabil-
ity. In: Bouajjani, A., Maler, O. (eds.) Computer Aided Veriﬁcation, 21st
International Conference, CAV 2009, Grenoble, France, June 26 - July 2,
2009. Proceedings. Lecture Notes in Computer Science, vol. 5643, pp. 263–
277. Springer (2009). https://doi.org/10.1007/978-3-642-02658-4 22, https://
doi.org/10.1007/978-3-642-02658-4_22

12. Geeraerts, G., Goossens, J., Stainer, A.: Synthesising succinct strategies in safety
and reachability games. In: Ouaknine, J., Potapov, I., Worrell, J. (eds.) RP. LNCS,
vol. 8762, pp. 98–111. Springer (2014). https://doi.org/10.1007/978-3-319-11439-
2 8, https://doi.org/10.1007/978-3-319-11439-2_8

13. Giacomo, G.D., Vardi, M.Y.: LTLf and LDLf synthesis under partial observ-
ability. In: Kambhampati, S. (ed.) Proceedings of the Twenty-Fifth International
Joint Conference on Artiﬁcial Intelligence, IJCAI 2016, New York, NY, USA, 9-
15 July 2016. pp. 1044–1050. IJCAI/AAAI Press (2016), http://www.ijcai.org/
Abstract/16/152

14. Gutierrez, J., Najib, M., Perelli, G., Wooldridge, M.J.: Automated temporal equi-
librium analysis: Veriﬁcation and synthesis of multi-player games. Artif. Intell.
287, 103353 (2020). https://doi.org/10.1016/j.artint.2020.103353, https://doi.
org/10.1016/j.artint.2020.103353

15. Harel, D., Pnueli, A.: On the development of reactive systems. In: Apt, K.R. (ed.)
Logics and Models of Concurrent Systems - Conference proceedings, Colle-sur-
Loup (near Nice), France, 8-19 October 1984. NATO ASI Series, vol. 13, pp.
477–498. Springer (1984). https://doi.org/10.1007/978-3-642-82453-1 17, https:
//doi.org/10.1007/978-3-642-82453-1_17

16. Jacobs, S., Basset, N., Bloem, R., Brenguier, R., Colange, M., Faymonville,
P., Finkbeiner, B., Khalimov, A., Klein, F., Michaud, T., P´erez, G.A., Raskin,
J., Sankur, O., Tentrup, L.: The 4th reactive synthesis competition (SYNT-
COMP 2017): Benchmarks, participants & results. In: Fisman, D., Jacobs,
S. (eds.) Proceedings Sixth Workshop on Synthesis, SYNT@CAV 2017, Hei-
delberg, Germany, 22nd July 2017. EPTCS, vol. 260, pp. 116–143 (2017).
https://doi.org/10.4204/EPTCS.260.10, https://doi.org/10.4204/EPTCS.260.
10

17. Kupferman, O., Piterman, N., Vardi, M.Y.: Safraless compositional synthesis.
In: Ball, T., Jones, R.B. (eds.) Computer Aided Veriﬁcation, 18th Interna-
tional Conference, CAV 2006, Seattle, WA, USA, August 17-20, 2006, Proceed-
ings. Lecture Notes in Computer Science, vol. 4144, pp. 31–44. Springer (2006).
https://doi.org/10.1007/11817963 6, https://doi.org/10.1007/11817963_6
18. Lemieux, C., Park, D., Beschastnikh, I.: General LTL speciﬁcation mining (T).
In: Cohen, M.B., Grunske, L., Whalen, M. (eds.) 30th IEEE/ACM Interna-
tional Conference on Automated Software Engineering, ASE 2015, Lincoln,
NE, USA, November 9-13, 2015. pp. 81–92. IEEE Computer Society (2015).
https://doi.org/10.1109/ASE.2015.71, https://doi.org/10.1109/ASE.2015.71
19. Luttenberger, M., Meyer, P.J., Sickert, S.: Practical synthesis of reactive sys-
tems from LTL speciﬁcations via parity games. Acta Informatica 57(1-2), 3–36
(2020). https://doi.org/10.1007/s00236-019-00349-3, https://doi.org/10.1007/
s00236-019-00349-3

Acacia-Bonsai: Downset-Based LTL Realizability

13

20. Martin, D.A.: Borel determinacy. Annals of Mathematics 102(2), 363–371 (1975),

http://www.jstor.org/stable/1971035

21. Meyer, P.J., Sickert, S., Luttenberger, M.: Strix: Explicit reactive synthesis
strikes back! In: Chockler, H., Weissenbacher, G. (eds.) Computer Aided Ver-
iﬁcation - 30th International Conference, CAV 2018, Held as Part of the
Federated Logic Conference, FloC 2018, Oxford, UK, July 14-17, 2018, Pro-
ceedings, Part I. Lecture Notes in Computer Science, vol. 10981, pp. 578–
586. Springer (2018). https://doi.org/10.1007/978-3-319-96145-3 31, https://
doi.org/10.1007/978-3-319-96145-3_31

22. Piterman, N.: From nondeterministic B¨uchi and Streett automata to de-
(2007).
https://doi.org/10.2168/

terministic parity automata. Log. Methods Comput. Sci. 3(3)
https://doi.org/10.2168/LMCS-3(3:5)2007,
LMCS-3(3:5)2007
23. Pnueli, A.: The

In: 18th Annual Sympo-
logic of programs.
sium on Foundations of Computer Science, Providence, Rhode Island, USA,
31 October
IEEE Computer Society
(1977). https://doi.org/10.1109/SFCS.1977.32, https://doi.org/10.1109/SFCS.
1977.32

- 1 November 1977. pp. 46–57.

temporal

24. Pnueli, A., Rosner, R.: On the synthesis of a reactive module. In: Conference
Record of the Sixteenth Annual ACM Symposium on Principles of Programming
Languages, Austin, Texas, USA, January 11-13, 1989. pp. 179–190. ACM Press
(1989). https://doi.org/10.1145/75277.75293, https://doi.org/10.1145/75277.
75293

25. Safra, S.: On the complexity of omega-automata.

In: 29th Annual Sym-
posium on Foundations of Computer Science, White Plains, New York,
IEEE Computer Society (1988).
USA, 24-26 October 1988. pp. 319–327.
https://doi.org/10.1109/SFCS.1988.21948,
https://doi.org/10.1109/SFCS.
1988.21948

26. Shi, Y., Xiao, S., Li, J., Guo, J., Pu, G.: Sat-based automata construc-
tion for LTL over ﬁnite traces. In: 27th Asia-Paciﬁc Software Engineering
Conference, APSEC 2020, Singapore, December 1-4, 2020. pp. 1–10. IEEE
(2020). https://doi.org/10.1109/APSEC51365.2020.00008, https://doi.org/10.
1109/APSEC51365.2020.00008

27. Tomita, T., Ueno, A., Shimakawa, M., Hagihara, S., Yonezaki, N.: Safraless
LTL synthesis considering maximal realizability. Acta Informatica 54(7), 655–692
(2017). https://doi.org/10.1007/s00236-016-0280-3, https://doi.org/10.1007/
s00236-016-0280-3

28. Vardi, M.Y., Wolper, P.: Automata theoretic techniques for modal logics of pro-
grams (extended abstract). In: DeMillo, R.A. (ed.) Proceedings of the 16th An-
nual ACM Symposium on Theory of Computing, April 30 - May 2, 1984, Washing-
ton, DC, USA. pp. 446–456. ACM (1984). https://doi.org/10.1145/800057.808711,
https://doi.org/10.1145/800057.808711

29. Zhu, S., Tabajara, L.M., Li, J., Pu, G., Vardi, M.Y.: A symbolic approach to
safety LTL synthesis. In: Strichman, O., Tzoref-Brill, R. (eds.) HVC. LNCS,
vol. 10629, pp. 147–162. Springer (2017). https://doi.org/10.1007/978-3-319-70389-
3 10, https://doi.org/10.1007/978-3-319-70389-3_10

