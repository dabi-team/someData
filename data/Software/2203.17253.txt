2
2
0
2

r
a

M
0
3

]
E
S
.
s
c
[

1
v
3
5
2
7
1
.
3
0
2
2
:
v
i
X
r
a

18th Int. Conf. on Acc. and Large Exp. Physics Control Systems
ISSN: 2226-0358
ISBN: 978-3-95450-221-9

ICALEPCS2021, Shanghai, China
doi:10.18429/JACoW-ICALEPCS2021-MOPV042

JACoW Publishing

PLCverif: STATUS OF A FORMAL VERIFICATION TOOL FOR
PROGRAMMABLE LOGIC CONTROLLER
I. D. Lopez-Miguel‚àó, J-C. Tournier, B. Fernandez, CERN, Geneva, Switzerland

Abstract

Programmable Logic Controllers (PLC) are widely used
for industrial automation including safety systems at CERN.
The incorrect behaviour of the PLC control system logic can
cause signiÔ¨Åcant Ô¨Ånancial losses by damage of property or
the environment or even injuries in some cases. Therefore
ensuring their correct behaviour is essential. While testing
has been for many years the traditional way of validating the
PLC control system logic, CERN developed a model check-
ing platform to go one step further and formally verify PLC
logic. This platform, called PLCverif, was Ô¨Årst released in-
ternally for CERN usage in 2019, is now available to any-
one since September 2020 via an open source licence. In
this paper, we will Ô¨Årst give an overview of the PLCverif
platform capabilities before focusing on the improvements
done since 2019 such as the larger support coverage of the
Siemens PLC programming languages, the better support
of the C Bounded Model Checker backend (CBMC) and the
process of releasing PLCverif as an open-source software.

INTRODUCTION

Programmable Logic Controllers (PLC) are widely used
for industrial automation including safety systems at CERN.
The incorrect behaviour of the PLC control system logic can
cause signiÔ¨Åcant Ô¨Ånancial losses by damage of property or
the environment or even injuries in some cases. Therefore
ensuring their correct behaviour is essential. While testing
has been for many years the traditional way of validating
the PLC control system logic, it is often not suÔ¨Écient as
the sole veriÔ¨Åcation method: testing, even when automated,
can not be exhaustive, thus can not guarantee the correct-
ness of a logic. Some types of requirements, such as safety
(i.e. an unsafe state can never be reached) or invariant (for-
mulas which shall be true over all possible system runs), can
be very diÔ¨Écult, if not impossible, to test. Model checking
is a formal veriÔ¨Åcation technique which complements the
testing activities in order to fully validate and verify a PLC
control system logic. Model checking assesses the satisfac-
tion of a formalised requirement on a mathematical model
of the system under analysis. It checks the requirement‚Äôs
satisfaction with every input combination, with every pos-
sible execution trace. In addition, if a violation is found, a
trace leading to the violated requirement is provided. The
main hurdle to the widespread usage of model checking
within the PLC community is twofold: (1) the mathemat-
ical model representing the system under analysis can be
diÔ¨Écult to write and requires in-depth understanding of the
model checking tools; and (2) many real-life PLC logics are
too complex and face the state-space explosion problem, i.e.

‚àó ignacio.david.lopez.miguel@cern.ch

the number of possible input combinations and execution
traces is too big to be exhaustively explored.

In 2019 CERN developed the PLCverif platform with the
goals of easing the usage of model checking tools for the
PLC developers community by automating the translation
of the PLC programs to their mathematical models and to
implement several abstraction algorithms to limit the state-
space explosion problem. Since September 2020, the plat-
form has been released under an open source license to fos-
ter the usage and the development of the tool within the PLC
community. The objective of this paper is to give a status of
the PLCverif platform focusing on the latest developments
improving the usability and performance of the tool.

The rest of the paper is organized as follows: Sec-
tion PLCverif Overview gives an overview of PLCverif
to better understand the scope and the architecture of
the platform. Section Open Source Release focuses on
the open source release of PLCverif by describing the
process of releasing the source code and presenting the
code organization. Finally sections Latest developments
and On-going Challenges and Developments present re-
spectively the latest and ongoing developments.

PLCverif OVERVIEW

This section gives an overview of the PLCverif platform

[1] before presenting the latest developments.

VeriÔ¨Åcation WorkÔ¨Çow

Out of the box, PLCverif oÔ¨Äers a model checking work-
Ô¨Çow for the analysis of PLC programs. The veriÔ¨Åcation
workÔ¨Çow is shown in Figure 1 and it has the following main
steps:

1. PLC program parsing. PLCverif parses the PLC pro-
gram (located in one or several Ô¨Åles) to be analysed.
By choosing the entry point of the veriÔ¨Åcation, the
analysis can be limited to a part of the program. The
parsed PLC program is automatically translated into a
mathematical, control Ô¨Çow-based representation, pro-
ducing so-called Control Flow Automata (CFA). This
precise description will serve as the basis for the anal-
ysis.

2. Requirement representation. The user should de-
scribe the precise requirement to be checked. This,
however, does not mean that the user needs to describe
the requirement using mathematical formulae. Cur-
rently, two requirement description methods are sup-
ported:

‚Ä¢ Assertion-based requirements:

ments in the source code (e.g.

special com-
//#ASSERT

I

O
D
d
n
a

,
r
e
h
s
i
l
b
u
p

,

k
r
o
w
e
h
t

f
o
e
l
t
i
t

,
)
s
(
r
o
h
t
u
a

e
h
t
o
t

n
o
i
t
u
b
i
r
t
t
a
n
i
a
t
n
i
a
m

t
s
u
m
k
r
o
w
s
i
h
t

f
o

n
o
i
t
u
b
i
r
t
s
i
d
y
n
A

.
)
2
2
0
2
¬©

(

e
c
n
e
c
i
l
0
.
3
Y
B
C
C
e
h
t

f
o

s
m
r
e
t

e
h
t

r
e
d
n
u
d
e
s
u

e
b
y
a
m
k
r
o
w
s
i
h
t

m
o
r
f

t
n
e
t
n
o
C

b
c

 
 
 
 
 
 
I

O
D
d
n
a

,
r
e
h
s
i
l
b
u
p

,

k
r
o
w
e
h
t

f
o
e
l
t
i
t

,
)
s
(
r
o
h
t
u
a

e
h
t
o
t
n
o
i
t
u
b
i
r
t
t
a
n
i
a
t
n
i
a
m

t
s
u
m
k
r
o
w
s
i
h
t

f
o
n
o
i
t
u
b
i
r
t
s
i
d
y
n
A

.
)
2
2
0
2
¬©

(

e
c
n
e
c
i
l
0
.
3
Y
B
C
C
e
h
t

f
o

s
m
r
e
t

e
h
t

r
e
d
n
u

d
e
s
u

e
b
y
a
m
k
r
o
w
s
i
h
t

m
o
r
f

t
n
e
t
n
o
C

b
c

PLC program

PLC program
parser

Formal representation (CFA)

User requirement

Requirement
representation

VeriÔ¨Åcation problem
(CFA + TL requirement)

CFA reductions
XXXXXX

Reduced veriÔ¨Åcation problem

External model
checking

Raw veriÔ¨Åcation results

f
i
r
e
v
C
L
P

Reporting
XXXXXX

VeriÔ¨Åcation report(s)

Figure 1: Formal veriÔ¨Åcation workÔ¨Çow of PLCverif

On<>Off) can describe expressions (invariants)
which are expected to be always satisÔ¨Åed at a
given location of the program. The veriÔ¨Åcation
job will then check if the violation of any of the
selected assertions is possible.

‚Ä¢ Pattern-based requirements: the user chooses a
requirement pattern that is a precisely-phrased
plain text sentence with some placeholders, e.g.
‚ÄúIf ùõº is true at the end of the PLC cycle, then ùõΩ
should always be true at the end of the same cy-
cle.‚Äù. The gaps in the requirement pattern (ùõº and
ùõΩ in the previous example) shall be Ô¨Ålled with
expressions over the PLC variables. For each re-
quirement pattern, a deÔ¨Åned temporal logic rep-
resentation is deÔ¨Åned which will be used in the
next steps.

If needed, new types of requirement representations
can be deÔ¨Åned, adapted to the speciÔ¨Åc needs.

3. CFA reductions. The formal, precise CFA represen-
tation of the program, including also the requirement,
may need to be reduced in order to make the veriÔ¨Å-
cation feasible and eÔ¨Écient. These reductions will
not change the veriÔ¨Åcation result for the given require-
ment; however, they may remove parts of the pro-
gram which do not inÔ¨Çuence the result of the currently
checked requirement [2].

4. External model checking. The model checking itself
is performed by widely used model checker tools. In
this step, (i) the reduced CFA is translated into the in-
put syntax of the chosen model checker tool, (ii) the
model checker tool is executed, and (iii) its output,
notably the counterexample if available, is parsed to
PLCverif‚Äôs internal representation.

Currently the following external model checkers are
supported: NuSMV [3], nuXmv [4], Theta [5] and
CBMC [6]. These model checkers have diÔ¨Äerent
strengths and weaknesses. In addition, not every fea-
ture is supported by every model checker.

5. Reporting. The last step of the formal veriÔ¨Åcation
workÔ¨Çow is to produce veriÔ¨Åcation reports. Some of
these reports are in human-readable form and target the
user of PLCverif. Other reports are machine-readable
and serve as descriptions for the execution environ-
ment or as artifacts for later summary reports.

OPEN SOURCE RELEASE

PLCverif is available publicly since September 2020
along with its source code under an EPL-2.01 license on Git-
Lab2. This section presents the reasons for open sourcing
PLCverif, as well as the process to choose the open source
license and the code organization as found in the GitLab
repository.

Motivations

PLCverif has been entirely developed at CERN and there-
fore Ô¨Åts CERN‚Äôs needs. Nevertheless, the platform could
be beneÔ¨Åcial to two diÔ¨Äerent communities outside CERN:
the PLC developers community and the model checker com-
munity. For PLC developers, PLCverif could be used out
of the box if the language used is among the ones already
supported, i.e. Siemens Statement List (STL) and Siemens
Structure Control Language (SCL). The current coverage3
of Siemens STL and SCL in PLCverif is currently at 66%
and 40%, respectively, for S7-300/400 PLCs, and at 55%
and 25%, respectively, for S7-1200/1500 PLCs. This covers
most of the functionalities of PLC programs developed at
CERN as the instructions implemented represent the core of
those languages. However, support for a missing instruction
could be easily added if needed. Similarly, the support of a
new programming language could also be developed taking
as a reference the current implementation for the Siemens
languages. For the model checking community, PLCverif
oÔ¨Äers the possibility to be integrated in a platform verifying
real-life PLC code: it is a great opportunity for this com-
munity to test new algorithms or improvements of existing
model checkers.

License Selection

From the diÔ¨Äerent open source licenses available, the
choice has been made to release the PLCverif platform
source code under the Eclipse Public License 2.0 (EPL4).

1 https://www.eclipse.org/legal/epl-2.0/
2 https://gitlab.com/plcverif-oss
3 Coverage was calculated as the number of instructions that are imple-
mented in PLCverif vs. the number of instructions in a given grammar
for a given PLC. Binary arithmetic operations like addition or subtrac-
tion, and binary logic operations like conjuntion or disjuntion are not
taken into account when the coverage for SCL is calculated. That is the
main reason why the Ô¨Ågures for SCL are much lower than for STL.

4 See footnote 1.

This license is similar to the GNU General Public License
(GPL5) but allows to link the code to proprietary applica-
it then allows to use and extend the tool, even for
tions:
commercial purposes. The reason for choosing the EPL-2.0
license was driven by the fact that is a weak copyleft license,
but also that most of the components used by PLCverif are
already under the EPL-2.0 (more details in [1]).

‚Ä¢ In order to conÔ¨Årm the feasibility of a counterexample
produced by PLCverif when a property is violated, it is
common to try to reproduce that situation in a real PLC
or via simulation. In order to automate this process, it
is now possible to automatically generate a Ô¨Åle with
the values of all the variables that can be used as an
input to the simulator or to the real PLC.

GitLab Repository

The PLCverif platform has been developed within the
Eclipse ecosystem: it is mainly written in Java (Java 11),
Xtend and Xtext. The modularity is assured via the split of
the code among several distinct projects and Eclipse plug-
ins. The main projects of the platform are:

‚Ä¢ PLCverif Backend6 is the core of the PLCverif plat-
form and is responsible for all the CFA manipulations
represented in Figure 1. It is also responsible for inter-
acting with the external model checkers via dedicated
Eclipse plugins.

‚Ä¢ Siemens Support7 is responsible for the parsing of the
Siemens STL and SCL code, i.e. transforms the PLC
user code into the PLCverif internal CFA representa-
tion.

‚Ä¢ PLCverif Frontends8, 9 are the visible parts from a user
point of view. The GUI project provides a graphical ap-
plication embedding a PLC code editor, a speciÔ¨Åcation
requirement editor and a report visualization part. The
CLI project is the way to execute the PLCverif work-
Ô¨Çow via the command line allowing the execution of
headless veriÔ¨Åcation jobs such as in a CI/CD (Continu-
ous Integration / Continuous Deployment) pipeline for
PLC code.

LATEST DEVELOPMENTS

Since the publication of [1] in 2019, several improve-
ments have been made. Some of them are summarized be-
low:

‚Ä¢ The C code used to run CBMC was originally pro-
duced directly converting the intermediate model to
a C code using goto instructions. CBMC is however
not eÔ¨Écient with this kind of programs since it is not
able to Ô¨Ånd loops. This method has been changed in
order to produce a structured C code without gotos, be-
ing able to eÔ¨Éciently use the option ‚Äìpartial-loops of
CBMC. With this option, CBMC will execute loops
only partially. The disadvantage of this option is that
the counterexample might be spurious.

5 https://www.gnu.org/licenses/gpl-3.0.en.html
6 https://gitlab.com/plcverif-oss/cern.plcverif
7 https://gitlab.com/plcverif-oss/cern.plcverif.plc.step7
8 https://gitlab.com/plcverif-oss/cern.plcverif.gui
9 https://gitlab.com/plcverif-oss/cern.plcverif.cli

‚Ä¢ Safety programs in Siemens are written in function
block diagram (FBD) language. After exporting them
with OpennessScripter10, an XML Ô¨Åle is produced. A
new feature in PLCverif has been developed in order to
import those XML Ô¨Åles into PLCverif translating them
into STL code.

‚Ä¢ The coverage of Siemens programs was increased both
for STL and SCL. More built-in functions from TIA
portal were included.

‚Ä¢ Support of latest Theta version was included. Theta is
being actively developed and new releases have been
launched. In order to keep up with the latest improve-
ments, PLCverif has been adapted to correctly parse
Theta output. Currently, PLCverif supports Theta
v2.21.0.

‚Ä¢ The intermediate model Control Flow Instance had the
limitation that it could not be used with dynamic in-
dexing arrays. However, Theta supports this feature
and PLCverif has been adapted to generate Theta pro-
grams with dynamic indexes.

‚Ä¢ The grammar implemented in PLCverif to parse
Siemens PLC programs has been extended to include
partial support of Schneider PLC programs.

‚Ä¢ Upgrade to Java 11. PLCverif was originally devel-
oped in Java 8. However, in order not to lose support
and to be able to run the latest versions of some model
checkers (Theta), it was needed to upgrade to Java 11.

ON-GOING CHALLENGES AND
DEVELOPMENTS

SimpliÔ¨Åcation of numeric variables

As observed in the large code base of CERN industrial
PLC systems, one of the main challenges to perform PLC
model checking is the state-space explosion originated by
the inclusion of numeric variables. PLCverif represents
input variables as non-deterministic in the intermediate
model. This means that a 16-bit integer is going to have
216 ‚âÖ 7 ¬∑ 104 possible values that the model checker needs
to explore.

There exist some techniques to handle this type of
variables, such as counterexample-guided-abstraction re-
Ô¨Ånement (CEGAR) [7] or SatisÔ¨Åability Modulo Theories
(SMT). However, other approaches to directly simplify

10TIA Portal Openness API.

I

O
D
d
n
a

,
r
e
h
s
i
l
b
u
p

,

k
r
o
w
e
h
t

f
o
e
l
t
i
t

,
)
s
(
r
o
h
t
u
a

e
h
t
o
t

n
o
i
t
u
b
i
r
t
t
a
n
i
a
t
n
i
a
m

t
s
u
m
k
r
o
w
s
i
h
t

f
o

n
o
i
t
u
b
i
r
t
s
i
d
y
n
A

.
)
2
2
0
2
¬©

(

e
c
n
e
c
i
l
0
.
3
Y
B
C
C
e
h
t

f
o

s
m
r
e
t

e
h
t

r
e
d
n
u
d
e
s
u

e
b
y
a
m
k
r
o
w
s
i
h
t

m
o
r
f

t
n
e
t
n
o
C

b
c

I

O
D
d
n
a

,
r
e
h
s
i
l
b
u
p

,

k
r
o
w
e
h
t

f
o
e
l
t
i
t

,
)
s
(
r
o
h
t
u
a

e
h
t
o
t
n
o
i
t
u
b
i
r
t
t
a

n
i
a
t
n
i
a
m

t
s
u
m
k
r
o
w
s
i
h
t

f
o
n
o
i
t
u
b
i
r
t
s
i
d

y
n
A

.
)
2
2
0
2
¬©

(

e
c
n
e
c
i
l
0
.
3
Y
B
C
C
e
h
t

f
o

s
m
r
e
t

e
h
t

r
e
d
n
u

d
e
s
u

e
b
y
a
m
k
r
o
w
s
i
h
t

m
o
r
f

t
n
e
t
n
o
C

b
c

the PLCverif intermediate model are under investigation,
highly improving the performance of the NuSMV model
checker [8].

Iterative veriÔ¨Åcation

It is common practice to have diÔ¨Äerent modules within
PLC projects (see [9] for an example). Some of these
projects are too large to be veriÔ¨Åed by PLCverif yet. How-
ever, if the program is split into parts, the veriÔ¨Åcation cases
are smaller and can be successfully executed. If it would be
possible to combine all the results together, it would be fea-
sible to verify these large programs. To this end, diÔ¨Äerent
compositional veriÔ¨Åcation approaches have been analysed
but no generic method has been found yet to be applied to
PLC projects.

Nonetheless, other abstraction techniques are under con-
sideration, such as abstracting away the diÔ¨Äerent modules.
With this approach, a veriÔ¨Åcation case is executed with all
the functions abstracted away (all their outputs are going to
be non-deterministic). If the property is satisÔ¨Åed, the orig-
inal program satisÔ¨Åes that property too. On the other hand,
if it is violated, one needs to check if the abstracted func-
tions can produce the outputs leading to the violation. If
it is not possible, a function is concretized (it comes back
to its original form) and a new veriÔ¨Åcation case is executed.
This process is continued until a feasible counterexample
is found or until all functions are concretized (coming back
to the original program). DiÔ¨Äerent strategies and improve-
ments can be investigated for this method.

Counterexample analysis

When a program is veriÔ¨Åed and the result is a violation of
the property, a counterexample is given by PLCverif. If the
program is composed of several variables and they interact
with each other (see [9] for an example), the counterexample
is going to be large. Therefore, it will be diÔ¨Écult to analyse
what part of the code made the property fail.

Some investigations have been done in this direction in
order to point the user to possible locations in the code that
have an impact on the Ô¨Ånal assertion. This way, the user
would not need to go through all the code but just focus on
the highlighted parts.

Other

Since the release of PLCverif,

there has been some
progress in the development of more eÔ¨Écient model check-
ers. As already explained previously, the latest version
of Theta has been integrated into PLCverif. However, al-
though CBMC is eÔ¨Écient, it is a SAT-based model checker
that uses few abstraction techniques. Therefore, an SMT-
based model checker like ESBMC [10] could improve the
performance of CBMC.

CONCLUSION

This paper presented the latest developments of the
PLCverif platform to formally verify PLC programs. The
developments can be grouped into two main lines of work:

‚Ä¢ Promoting and easing the use of PLCverif by making it
open source, by supporting more PLC manufacturers
(i.e. Schneider Electric), and by guiding the user to
the root cause of an issue when a property is violated
(counterexample analysis).

‚Ä¢ Improving the performance of the veriÔ¨Åcation time by
simplifying numerical variables without loosing mean-
ingful information and by implementing an iterative
veriÔ¨Åcation process allowing to verify even more com-
plex applications.

All the diÔ¨Äerent developments presented in this paper are
in diÔ¨Äerent stages of maturity and are in the pipeline to be in-
cluded into PLCverif. In addition some new developments
will be carried on to support Schneider safety programs and
to integrate new model checkers such as ESBMC.

REFERENCES
[1] E. B. Vi√±uela, D. Darvas, and V. Moln√°r, ‚ÄúPLCverif
the Formal
Re-engineered: An Open Platform for
ICALEPCS‚Äô19,
Analysis of PLC Programs,‚Äù in Proc.
(New York, NY, USA),
International Confer-
ence on Accelerator and Large Experimental Physics
Control
https://doi.org/10.18429/JACoW-
ICALEPCS2019-MOBPP01, JACoW Publishing, Geneva,
Switzerland, Aug. 2020, pp. 21‚Äì27, isbn: 978-3-95450-
209-7. doi: 10.18429/JACoW-ICALEPCS2019-MOBPP01.
https://jacow.org/icalepcs2019/papers/mobpp01.pdf

Systems,

ser.

[2] D. Darvas, B. Fern√°ndez Adiego, A. V√∂r√∂s, T. Bartha,
E. Blanco Vi√±uela, and V. M. Gonz√°lez Su√°rez, ‚ÄúFor-
mal veriÔ¨Åcation of complex properties on PLC pro-
grams,‚Äù in Formal Techniques for Distributed Objects,
Components, and Systems, ser. Lecture Notes in Com-
puter Science, E. √Åbrah√°m and C. Palamidessi, Eds.,
isbn: 978-3-
vol. 8461, Springer, 2014, pp. 284‚Äì299,
662-43612-7. doi: 10.1007/978-3-662-43613-4_18.
http://link.springer.com/chapter/10.1007/978-3-662-43613-4_18

[3] A. Cimatti et al., ‚ÄúNuSMV 2: An OpenSource Tool for
Symbolic Model Checking,‚Äù in Computer Aided VeriÔ¨Åca-
tion, E. Brinksma and K. G. Larsen, Eds., Berlin, Heidel-
berg: Springer Berlin Heidelberg, 2002, pp. 359‚Äì364, isbn:
978-3-540-45657-5. https://nusmv.fbk.eu/

[4] R. Cavada et al., ‚ÄúThe nuXmv Symbolic Model Checker,‚Äù
in CAV, 2014, pp. 334‚Äì342. https://nuxmv.fbk.eu/
[5] T. T√≥th, √Å. Hajdu, A. V√∂r√∂s, Z. Micskei, and I. Majzik,
‚ÄúTheta: a Framework for Abstraction ReÔ¨Ånement-Based
Model Checking,‚Äù in Proceedings of the 17th Conference
on Formal Methods in Computer-Aided Design, D. Stewart
and G. Weissenbacher, Eds., 2017, pp. 176‚Äì179, isbn: 978-
0-9835678-7-5. doi: 10.23919/FMCAD.2017.8102257.
https://github.com/FTSRG/theta

[6] E. Clarke, D. Kroening, and F. Lerda, ‚ÄúA Tool for Checking
ANSI-C Programs,‚Äù in Tools and Algorithms for the Con-
struction and Analysis of Systems (TACAS 2004), K. Jensen
and A. Podelski, Eds., ser. Lecture Notes in Computer Sci-
ence, vol. 2988, Springer, 2004, pp. 168‚Äì176, isbn: 3-540-
21299-X. https://www.cprover.org/cbmc/

[7] E. Clarke, O. Grumberg, S. Jha, Y. Lu, and H. Veith,
‚ÄúCounterexample-Guided Abstraction ReÔ¨Ånement,‚Äù Jan.
2000, pp. 154‚Äì169.

[8] I. D. Lopez-Miguel, B. Fernandez Adiego, J.-C. Tournier,
J. A. Rodriguez-Aguilar, and E. Blanco Vi√±uela, ‚ÄúSim-
pliÔ¨Åcation of Numeric Variables for PLC Model Check-
ing,‚Äù in 19th ACM-IEEE International Conference on

Formal Methods and Models for System Design (MEM-
OCODE ‚Äô21), Nov. 2021, isbn: 978-1-4503-9127-6/21/11.
doi: 10.1145/3487212.3487334.

[9] B. Fernandez Adiego,

I. D. Lopez-Miguel, and J.-C.
Tournier, ‚ÄúApplying model checking to highly-conÔ¨Ågurable
safety critical software: the SPS-PPS PLC program,‚Äù Oct.
2021.

[10] M. R. Gadelha, F. R. Monteiro, J. Morse, L. C. Cordeiro,
B. Fischer, and D. A. Nicole, ‚ÄúESBMC 5.0: An Industrial-
Strength C Model Checker,‚Äù in 33ùëü ùëë ACM/IEEE Int.
Conf. on Automated Software Engineering (ASE‚Äô18),
New York, NY, USA: ACM, 2018, pp. 888‚Äì891. doi:
10.1145/3238147.3240481. http://www.esbmc.org/

I

O
D
d
n
a

,
r
e
h
s
i
l
b
u
p

,

k
r
o
w
e
h
t

f
o
e
l
t
i
t

,
)
s
(
r
o
h
t
u
a

e
h
t
o
t

n
o
i
t
u
b
i
r
t
t
a
n
i
a
t
n
i
a
m

t
s
u
m
k
r
o
w
s
i
h
t

f
o

n
o
i
t
u
b
i
r
t
s
i
d
y
n
A

.
)
2
2
0
2
¬©

(

e
c
n
e
c
i
l
0
.
3
Y
B
C
C
e
h
t

f
o

s
m
r
e
t

e
h
t

r
e
d
n
u
d
e
s
u

e
b
y
a
m
k
r
o
w
s
i
h
t

m
o
r
f

t
n
e
t
n
o
C

b
c

