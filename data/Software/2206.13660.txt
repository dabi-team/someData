2
2
0
2

g
u
A
8

]

R
C
.
s
c
[

2
v
0
6
6
3
1
.
6
0
2
2
:
v
i
X
r
a

DF-SCA: Dynamic Frequency Side Channel Attacks are Practical

Debopriya Roy Dipta
Iowa State University
Ames, Iowa, USA
roydipta@iastate.edu

Berk Gulmezoglu
Iowa State University
Ames, Iowa, USA
bgulmez@iastate.edu

ABSTRACT
The arm race between hardware security engineers and side-channel
researchers has become more competitive with more sophisticated
attacks and defenses in the last decade. While modern hardware
features improve the system performance significantly, they may
create new attack surfaces for malicious people to extract sensi-
tive information about users without physical access to the victim
device. Although many previously exploited hardware and OS fea-
tures were patched by OS developers and chip vendors, any feature
that is accessible from userspace applications can be exploited to
perform software-based side-channel attacks.

In this paper, we present DF-SCA, which is a software-based
dynamic frequency side-channel attack on Linux and Android OS
devices. We exploit unprivileged access to cpufreq interface that
exposes real-time CPU core frequency values directly correlated
with the system utilization, creating a reliable side-channel for at-
tackers. We show that Dynamic Voltage and Frequency Scaling
(DVFS) feature in modern systems can be utilized to perform web-
site fingerprinting attacks for Google Chrome and Tor browsers
on modern Intel, AMD, and ARM architectures. We further extend
our analysis to a wide selection of scaling governors on Intel and
AMD CPUs, verifying that all scaling governors provide enough
information on the visited web page. Moreover, we extract prop-
erties of keystroke patterns on frequency readings, that leads to
95% accuracy to distinguish the keystrokes from other activities
on Android phones. We leverage inter-keystroke timings of a user
by training a k-th nearest neighbor model, which achieves 88%
password recovery rate in the first guess on Bank of America appli-
cation. Finally, we propose several countermeasures to mask the
user activity to mitigate DF-SCA on Linux-based systems.

KEYWORDS
dynamic frequency, side-channel attacks, keystroke recovery, web-
site fingerprinting

Reference Format:
Debopriya Roy Dipta and Berk Gulmezoglu. 2022. DF-SCA: Dynamic Fre-
quency Side Channel Attacks are Practical. In Proceedings of Arxiv Version. ,
14 pages.

1 INTRODUCTION
The computation power of modern chips is one of the primary com-
petitions among chip vendors, which constantly evolves in parallel
with new chip generations. In general, computation capabilities of
chips are improved with several techniques such as higher pipeline
bandwidth, increasing number of computational units, improving
clock frequency, etc. Due to the increasing popularity of mobile

Arxiv Version, June, 2022

1

devices such as laptops and mobile phones in early 2000s, it has
become more important for Intel [10], ARM [44], and AMD [37] to
improve the battery life by developing more energy efficient CPUs.
The same effort is also required to lower the energy consumption
of CPUs in cloud computing and large-scale data centers that are
responsible for an estimated 1.8% of US electricity consumption [9].
The common mechanism to decrease the power consumption of
a CPU is to adjust the energy consumption by integrating a sophis-
ticated dynamic voltage supply into the system. This technology is
known as Dynamic Voltage and Frequency Scaling (DVFS) [25, 41]
that is responsible of adjusting the current voltage dynamically as
well as the CPU frequency based on the system workload. This
approach significantly reduces the energy consumption of CPUs
as most of the time CPUs do not need to operate at the peak per-
formance. DVFS technology is introduced in several CPU fami-
lies under different names such as Enhanced Intel SpeedStep [17],
AMD Powernow! [16], ARM Intelligent Energy Management [6].
Since the amount of energy consumption is decreased significantly
with DVFS, they are also adapted to network devices [46], hard
drives [54], and memory modules [8].

Even though several hardware and OS-based features improve
the computation and energy efficiency of the system, these features
may be exploited to violate the privacy and security of the users.
Several OS-based features such as performance counters [13], mem-
ory API [32], Intel RAPL [28], data-usage statistics [47], and system
interrupts [51] have been leveraged to collect user-specific data
such as passwords, cryptographic keys, visited websites, and so on.
All these attacks show that OS-based sensors that are accessible
from user-space applications could be a source for software-based
side-channel attacks, that could be of utmost importance to mitigate
for OS and hardware developers. Although read access to these
files is mostly restricted from userspace applications, new attack
resources can still be discovered.

In this paper, we consider a threat scenario in which a malicious
userspace application aims to detect the visited websites in browsers
as well as user entered passwords in sensitive applications. For this
purpose, DF-SCA utilizes cpufreq directory in Linux and Android
systems to monitor real-time dynamic CPU frequency, which is
available to all userspace applications. Even though this feature
has been exploited in the context of covert channels [1, 21, 31] and
cryptographic attacks [50] in several platforms, it has not been
investigated whether dynamic frequency readings can be leveraged
to infer the user activity in a system by a malicious application. We
observe that there two main challenges that prevent the usage of
frequency measurements as an efficient side-channel attack: i) Sys-
tem noise introduced by the background processes affects the CPU
frequency, leading to noisy measurements, ii) the sampling rate
of frequency monitoring in cpufreq directory is lower than other

 
 
 
 
 
 
Arxiv Version, June, 2022

Debopriya Roy Dipta and Berk Gulmezoglu

exploited OS and hardware features [13, 32, 53]. Despite these chal-
lenges we show that coarse-grain and noisy measurements still
provide sufficient information to perform website fingerprinting,
keystroke detection, and password recovery attacks with the uti-
lization of Machine Learning and Deep Learning algorithms.
Our Contribution: In this paper, we show that

● Low resolution dynamic frequency readings through Linux
cpufreq interface provide sufficiently-detailed information
on the user activity on Intel, AMD, and ARM architectures.
● The collected frequency values can be used to train multi-
class ML models to distinguish visited websites on Google
Chrome and Tor browsers with 97% and 73% success rates,
respectively. The experiments are carried out on Intel, AMD,
and ARM devices to prove its viability over different micro-
architectures.

● Website fingerprinting attacks are applicable for all available

scaling governors on Intel and AMD architectures.

● User keystrokes on Android mobile phones leave a finger-
print on CPU frequency readings that leads to 95% accuracy
to capture the correct number of keystrokes.

● Inter-keystroke timings can be analyzed with ML algorithms
to detect the entered passwords on the Bank of America
application with 88% accuracy.

● A universal ML model can be trained with collected website
fingerprints from different architectures that can reach up
to 92.3% classification rate.

Outline: The rest of the paper is organized as follows: Section 2
provides background on DVFS. Section 3 explains the threat model
for DF-SCA. Section 4 gives information about the experiment setup.
Section 5 demonstrates the website fingerprinting attacks on Intel,
AMD, and ARM architectures. Section 6 shows the applicability
of DF-SCA on Android devices for keystroke detection. Section 7
provides an overview on previous studies related to website fin-
gerprinting and keystroke detection. Section 8 proposes several
countermeasures to prevent DF-SCA on modern devices. Section 9
explores the scope of website fingerprinting with different scal-
ing governors and a universal ML-based model. Finally, Section 10
concludes the study.

2 BACKGROUND
In this section, we give an insight into dynamic voltage and fre-
quency scaling (DVFS) that is utilized to perform the website detec-
tion and password exploitation attacks on Intel, ARM, and AMD
architectures.

2.1 Dynamic Voltage and Frequency Scaling

(DVFS)

Modern processors are capable of operating with different voltage
configurations and clock frequency, referred to as P-states or Op-
erating Performance Points. The number of executed instructions
in a given time can be increased with higher clock frequency and
voltage while more energy is consumed over time by the CPU in the
current P-state. Thereby, there is a natural trade-off between the
energy consumption and the current CPU usage. As the CPU utiliza-
tion is not at 100% all the time, obtaining the highest P-state leads
to waste of energy as well as thermal problems due to the high CPU

2

temperature. In order to solve these problems, several hardware
interfaces are integrated in the CPUs to switch between different
frequency/voltage configurations based on the dynamic CPU re-
source demand. The rapid frequency changes are adjusted through
different algorithms depending on the target application [5, 29, 30],
which is known as CPU performance-frequency scaling.
CPUFreq Subsystem: The CPUFreq subsystem is responsible for
the performance scaling of the CPU in a Linux kernel-based oper-
ating system. Such subsystem comprises of three defining layers of
code named– the core, the scaling governors, and the scaling dri-
vers. The core setups the common code infrastructure and userspace
interfaces as well as defines the layout of the basic framework in
which all the components operate. The scaling governors define the
scaling algorithm to predict the CPU latency while scaling drivers
can access a specific hardware interface to change the P-state based
on the request set forth by the scaling governors. Note that, the
CPU P-state demonstrates the current frequency and voltage state
based on its current workload.
PolicyX Interface: Initially, the CPUFreq core generates a sysfs di-
rectory named cpufreq, under ⇑𝑠𝑦𝑠⇑𝑑𝑒𝑣𝑖𝑐𝑒𝑠⇑𝑠𝑦𝑠𝑡𝑒𝑚⇑𝑐𝑝𝑢 path. Within
this directory a policyX sub-directory exists for all of the CPUs
associated with the given policy. The policyX directories include
policy-specific files to control CPUFreq behavior based on the cor-
responding policy objects. The CPUFreq core generates several
attributes dependent on the scaling governors and drivers, as well
as generic attributes. Some useful attributes under the policyX
sub-directory are as follows:

● scaling_cur_freq reports the current frequency of the avail-

able CPUs belonging to the specified policy in KHz.

● cpuinfo_min_freq reports the minimum possible operating

frequency of the CPU.

● cpuinfo_max_freq reports the maximum possible operating

frequency of the CPU.

● cpuinfo_transition_latency reports the time it takes too switch
the CPUs from one P-state to another, in nanoseconds.
● scaling_available_governors reports the available scaling al-

gorithms for the defined policy.

● scaling_governor reports the scaling algorithm provided by
the current driver. This attribute can be changed to other
available governors by a root-privileged user.

Generic Scaling Governors: The scaling governors provide dif-
ferent types of frequency scaling algorithms that may be parame-
terized based on the user demand. The supported scaling governors
are as follows:

● Performance governor keeps the CPU around the highest

frequency, within the scaling_max_freq policy limit.

● Powersave governor keeps the core frequency low when
there is no workload still within the scaling_min_freq policy
limit.

● Userspace governor allows userspace application to set the
CPU frequency for the associated policy by modifying the
scaling_setspeed attribute. The core frequency stays approx-
imately the same all the time.

● Ondemand governor uses CPU load to determine the CPU
frequency selection metric. The estimated CPU load is calcu-
lated by the ratio of the non-idle time to the total CPU time.

DF-SCA: Dynamic Frequency Side Channel Attacks are Practical

Arxiv Version, June, 2022

If there are multiple CPUs associated with a policy, the esti-
mated load is computed for all CPUs and the greatest result
is taken as the load estimate for the entire policy. The worker
routine of ondemand governor runs in process context which
updates the CPU P-states if necessary. Hence, additional con-
text switches affect its own CPU load metric by increasing
the CPU load slightly. The CPU frequencies are set propor-
tional to the estimated load between cpuinfo_max_freq and
cpuinfo_min_freq.

● Conservative governor sets the CPU frequency selection met-
ric based on the CPU load. While the CPU load estimation
is similar to the ondemand governor, the frequency is not
changed significantly over short time period. This governor
is not suitable for devices with limited power supply capacity
such as mobile phones.

● Interactive governor is designed for latency-sensitive, inter-
active workloads. Even though the CPU frequency scaling is
similar to ondemand and conservative governors, interactive
is more aggressive to adjust the frequency compared to other
governors. Hence, the issue of under-powering the CPU for
a long time is solved with rapid increase in the frequency.
This increases the responsiveness of the device as well as
improves the battery life on Android devices.

● Schedutil governor was designed to estimate the load based
on the scheduler’s Per-Entity Load Tracking (PELT) mecha-
nism. The core frequency is adjusted based on the workload
that is scheduled by Completely Fair Scheduler (CFS). This
governor is only available on AMD architectures in our ex-
periment setup.

Scaling Drivers: Starting from Sandy Bridge Intel CPUs, Intel P-
state driver is introduced for Intel Core CPUs on Linux [23] for
better battery life and performance on modern Linux systems. The
scaling algorithm is combined with the hardware capabilities that
Intel processors provide; thus, CPU frequency is not limited by the
ACPI capabilities [24]. The scaling algorithms are fine-tuned for
each CPU family to improve both power and performance. AMD
architecture family leverages ACPI P-state driver to adjust the core
frequency. However, AMD has more options than Intel architectures
to enable better power consumption based on the user choice. Since
ARM devices generally use Android system, they have specialized
frequency scaling driver called msm. Similar to AMD, there are
several scaling governors that are supported by the ARM devices.
Turbo Boost Technology: This technology allows both Intel and
AMD CPUs to operate on a higher frequency level beyond their
maximum threshold on certain conditions, that is commonly re-
ferred to as dynamic overclocking. While it accelerates the CPU
performance by approximately 6% during high workloads such as
high-performance game, video editing, and web page rendering,
the energy consumption increases around 16% [4]. Such frequency
boosting is triggered by hardware for the x86 architecture, and
turbo_boost mode is enabled by default for both Intel and AMD
architectures. However, the exact moment of triggering such boost-
ing is solely decided by the hardware. Moreover, the turbo mode is
not always active as the CPU thermal and power budget should not
be exceeded. On the other hand, ARM architectures do not provide
any Turbo Boost option for the Android users.

3

Figure 1: Threat Model for DF-SCA. An attacker can im-
plement a cross-core side-channel attack by exploiting the
cpufreq interface in the victim device.

3 THREAT MODEL
DF-SCA has two phases as illustrated in Figure 1. In the offline
phase, the attacker monitors the dynamic CPU frequency through
the cpufreq interface from user space for a certain amount of time,
enabled by default in Linux OS, during the website rendering in
her own system. After all the websites in a website target list are
profiled, a multi-class classification model is trained with the col-
lected frequency measurements. This model is kept in the attacker’s
server to be queried in the online phase. Note that the attacker’s
own system is expected to have the same specifications with the
victim’s device as the frequency traces are expected to alter with
different configurations described in Section 2.1.

In the online phase, an attacker places a malicious code in a
user-space application to monitor the current frequency, that is
installed by the victim in her device. We also assume that the vic-
tim visits several websites in a browser environment in which the
websites can be considered as private information, and the attacker
would like to reveal the website by leveraging the CPU frequency
obtained from the attacker application. For such exploitation, an
assumption is made where the victim’s device is only running a par-
ticular browser instead of many applications at a time. Since cpufreq
interface allows all applications to read the current frequency from
all the virtual cores, the attacker can implement a cross-core side-
channel attack through the current frequency readings. After the
attacker collects a single trace during the website rendering, the
trace is sent to the attacker’s server in which the pre-trained model
is located. Finally, the model is queried in the attacker server to
classify the visited website. Both online and offline phases are also
used for the password detection on the target Android device in
Section 6.

4 EXPERIMENT SETUP
The website fingerprinting dataset is collected on four different
micro-architectures, namely Intel Comet Lake, Intel Tiger Lake,
AMD Ryzen 5, and ARM Cortex-A73 (Table 1). The first Intel device
is a personal laptop, equipped with Comet Lake micro-architecture

Arxiv Version, June, 2022

Debopriya Roy Dipta and Berk Gulmezoglu

and CPU model of Intel(R) Core (TM) i7-10610U CPU @ 1.80GHz.
The laptop has four cores with hyper-threading enabled. The in-
stalled OS on the device is Ubuntu 20.04 LTS with a Linux kernel
version of 5.11.0-46-generic in which cpufreq subsystem is sup-
ported by default. The processor also supports the Intel Turbo
Boost feature to dynamically change the frequency based on the
workload. In this study, Google Chrome version 85.0.4183.102 and
Tor browser version 10.5.10 based on Firefox ESR version 78.15.0
are used for browsing. The CPU model of the second Intel device is
11th Gen Intel(R) Core (TM) i7-1165G7 @ 2.80GHz with Tiger Lake
micro-architecture. Similar to the Intel Comet Lake, this processor
also has four cores and supports Intel Turbo Boost features. The
installed OS is Ubuntu 20.04.4 LTS with a Linux version of 5.13.0-
44-generic. The versions of the targeted browsers installed in this
laptop are Google Chrome 101.0.4951.64 and Tor 10.5.10.

The study is extended for AMD device as well. We have collected
the dataset from a laptop assembled with AMD Ryzen 5 5500U
CPU with Radeon Graphics. The laptop has six cores and 1.7 GHz
base frequency with frequency boosting enabled. The OS and the
linux version of this device is similar to the Intel Tiger Lake device.
Additionally, the processor also supports AMD Turbo Boost feature.
The installed versions of both Google Chrome and Tor Browser
remain same as Intel Tiger Lake.

The experiments for mobile phones are performed on Galaxy
S8 with four ARM Cortex-A53 and four ARM Cortex-A73 cores.
The CPU frequency data is collected on the Cortex-A73 core. The
installed OS version is Android 9. The websites are visited in Google
Chrome with a version 97.0.4692.98. The password and keystroke
detection experiments are performed on Bank of America applica-
tion with a version of 21.11.04.

Both offline and online phases of the model training and inter-
fering for website and password classification tasks are run on a
high-end server equipped with an Nvidia GeForce RTX 3090 GPU
card. The CPU model of the server is Intel(R) Xeon(R) CPU E5-1650
v4 @ 3.60GHz, which has six cores with two threads per core.

Table 1: The values of the relevant cpufreq attributes for In-
tel, AMD, and ARM devices are given. The given scaling_gov
values are the default values.

Attribute

base_freq
max_freq
min_freq
scaling_driv
scaling_gov
turbo_boost

Intel
Comet Lake
1.8 GHz
4.9 GHz
0.4 GHz
intel_pstate
powersave
✓

Micro-architecture
AMD
Intel
Ryzen 5
Tiger Lake
1.7 GHz
2.8 GHz
4.06 GHz
4.7 GHz
1.4 GHz
0.4 GHz

intel_pstate acpi-cpufreq
ondemand
powersave
✓
✓

ARM
Cortex- A73
N/A
2.36 GHz
0.8 GHz
msm
interactive
N/A

5 CASE STUDY 1: WEBSITE DETECTION
In the first case study, we perform website fingerprinting attacks
on Intel, AMD, and ARM architectures. As described in Section 2.1,
there are several attributes under PolicyX sub-directories which are
produced by the 𝐶𝑃𝑈 𝐹𝑟𝑒𝑞 core, and some of these attributes affect
the current CPU frequency readings. In this study, the relevant

4

attributes for the victim’s devices are listed in Table 1. Initially,
we proceed with the default scaling governor for the individual
devices. The default scaling governors for Intel, AMD, and ARM
devices used in this study are powersave, ondemand, and interactive,
respectively. The impacts of different scaling governors will be
explored in Section 9. The Turbo Boost feature for both Intel and
AMD devices are enabled by default, which eventually improves
the system responsiveness for rapid system workload variations
during the data collection. The scaling_cur_freq attribute through
cpufreq interface is utilized to collect real-time CPU frequency for
each core that provides the current CPU frequency to userspace
applications in the system.

The website fingerprinting attack is motivated by the quick re-
sponses of Intel, AMD, and ARM architectures to the rapidly chang-
ing workload in browsers during web page rendering. As our threat
model accounts for a cross-core attack, we assume that the target
browser is running in a specific core. We assume that the core fre-
quency of the browser’s assigned core dynamically changes while
the browser is rendering the content, which leads to distinguishable
fingerprints for each website. It is to be noted that, the range of
dynamic frequency during different workloads always stay within
the range of max_freq and min_freq as specified in Table 1.

In Figure 2, the CPU frequency distributions for four different
architectures are illustrated, in which the data set is collected from
100 different websites in the Google Chrome browser. The core
frequency for the Intel Tiger Lake, AMD Ryzen 5, and ARM Cortex
A73 architectures is mostly close to the max_freq or min_freq. On
the other hand, for the Intel Comet Lake architecture, the highest
CPU frequency can reach up to 3.6 GHz, which is considerably
lower than the given maximum frequency. This shows that the
dynamic frequency values for Intel Comet Lake are in a compara-
tively narrow range compared to other architectures, e.g., the actual
core frequency alters between 800 MHz and 3.6 GHz as shown in
Figure 2. Although the allowed maximum frequency is 4.9 GHz
in Intel Comet Lake, Intel Turbo Boost mechanism increases the
frequency up to 3.6 GHz for website rendering due to the thermal
and energy consumption limits. In contrast, the AMD Ryzen 5 ar-
chitecture operates at the highest possible core frequency when
the workload is high on the CPU, which is comparatively different
than Intel architectures.

5.1 Data Collection
While opening a website in a browser, first, essential components
of a website are downloaded over network such as HTML file,
cascading style sheets (CSS), and Javascript (JS) scripts as well
as images. The web page layout is rendered on the screen with
the necessary contents for displaying. Hence, during a website
rendering, a browser utilizes several computational resources, e.g.,
CPU, memory, and GPU. DF-SCA only targets the CPU utilization of
the browser as the cpufreq interface only exposes the CPU frequency
to userspace applications.

For the data collection, Algorithm 1 is used with different pa-
rameters that can be tuned for the website fingerprinting 1. Our
target browsers are Google Chrome and Tor browsers. In our attack

1The dataset and the code will be made available in GitHub: https://github.com/Dipta
kuet/DF-SCA-Dynamic-Frequency-Side-Channel-Attacks-are-Practical.git

DF-SCA: Dynamic Frequency Side Channel Attacks are Practical

Arxiv Version, June, 2022

Algorithm 1: Data Collection Algorithm for Each Website
// 𝑇𝑖 is the interval between each readings
// 𝑁𝑠 is the number of samples
// 𝑁𝑚 is the number of measurements per website
// 𝑢𝑟𝑙 is the web-page address
// 𝑓 is the CPU frequency
Input: 𝑇𝑖, 𝑁𝑠, 𝑁𝑀, 𝑢𝑟𝑙
Output: 𝑓

1 for 𝑖 ← 1 to 𝑁𝑀 do
2

Run 𝑢𝑟𝑙 in the browser ;
for 𝑗 ← 1 to 𝑁𝑠 do

3

4

5

6

7

𝑓 ← Read 𝑠𝑐𝑎𝑙𝑖𝑛𝑔_𝑐𝑢𝑟 _𝑓 𝑟𝑒𝑞 ;
sleep 𝑇𝑖 ;

Close the browser ;
sleep 1𝑠 ;

Figure 2: The distribution of CPU frequency readings over
100 websites collected from (a) Intel Comet Lake, (b) Intel
Tiger Lake, (c) AMD Ryzen 5, and (d) ARM Cortex-A73.
scenario, 𝑁𝑠 = 1000 samples for each website are collected with an
interval of 𝑇𝑖 = 10 ms for Google-Chrome browser. The number
of samples is increased up to 3000 for the Tor browser, as it takes
comparatively more time to load a website. In total, 𝑁𝑀 = 100
measurements are collected for each website to evaluate the perfor-
mance of the website fingerprinting. 100 websites are monitored
which are selected from Alexa top 500 sites and listed in Appendix,
Table 6.

Figure 3 illustrates example website fingerprints based on fre-
quency readings of three websites for the Google Chrome browser
recorded from the Intel Comet Lake architecture. Each website has
a distinct pattern as the contents of these websites include different
JS scripts, images, HTML documents, and plug-in objects. Hence,
when they are loaded on the screen, the CPU workload generates a
unique fingerprint on the frequency readings. On the other hand, a
common pattern exists while visiting the same websites for mul-
tiple measurements. Although there are noisy samples due to the
background noise, it is expected that advanced machine learning
models can classify different websites based on the frequency mea-
surements.

The same algorithm is utilized to collect data for AMD Ryzen 5
micro-architecture. Unlike Intel Comet Lake and Intel Tiger Lake,
the AMD Ryzen 5 has six available governors, namely ondemand,
powersave, performance, userspace, conservative, and schedutil. The
default scaling governor is ondemand with acpi-cpufreq scaling
driver. The range between the max_freq and min_freq limit is com-
paratively narrower than the Intel devices (Table 1). The minimum
CPU frequency limit is 1.4 GHz, which is 3.5 times higher than Intel
Comet Lake and Tiger Lake micro-architecture.

For the ARM-based experiments, we focus on the utilization of
A-73 cores as the front-end user activity is generally handled by the
big cores. The CPU frequency can be accessed in the same way as in
the previous scenario since Android makes use of the Linux kernel.
However, the attributes on Android are significantly different than
Intel devices as given in Table 1. There are six supported governors

5

on Android devices, namely interactive, conservative, ondemand,
userspace, powersave, and performance. In our device, the scaling
governor is interactive by default, which maximizes the responsive-
ness of the CPU with rapid changes in the CPU frequency.

The minimum and maximum frequency values on Samsung
Galaxy S8 device for A-73 cores are 800 MHz and 2361 MHz, re-
spectively. In total, 23 different frequency values are supported in
the range of 800 MHz and 2361 MHz by the system. We observed
that even though there are several frequency values are supported,
the device operates at 806 MHz or 2361 MHz most of the time
in the interactive mode. The OS evenly distributes the workload
among A-73 cores as the frequency readings for all big cores are
always the same. Hence, monitoring one big core during the data
collection is sufficient to perform DF-SCA on Android devices. The
boostpulse_duration attribute is set to 80 ms which indicates that
the CPU frequency of all big cores are set to hispeed_freq value
for at least 80 ms when boostpulse is set to 1. This effect is further
observed in the keystroke detection attack in Section 6.
cpufreq Reading Resolution: The resolution of DF-SCA has a sig-
nificant role on the website fingerprinting success rate since higher
resolution enables attackers to capture a more detailed fingerprint.
In order to evaluate the resolution limit, certain amount of delay
is placed between each frequency reading (line 5 in Algorithm 1).
We observe that the number of repeated values increases with the
decreasing amount of delay between each reading, which leads to
the optimal delay as 10ms for Intel and AMD architectures as shown
in Figure 4. The speed of querying the cpufreq interface on Android
devices is different than Intel and AMD architectures. This value is
defined by the min_sample_time in the interactive governor, which
is set to 20 ms by default. Hence, the maximum resolution that we
can achieve on our Android device is 20 ms. This sampling rate is
twice slower than Intel and AMD architectures. On the other hand,
the background noise is significantly lower than other architectures
as a big portion of the background applications is put in the sleep
mode. Since the resolution is already limited to a lower value by the
min_sample_time attribute, no further investigation is performed
on the frequency sampling rate.

Arxiv Version, June, 2022

Debopriya Roy Dipta and Berk Gulmezoglu

model has four convolutional layers, two maximum pooling layers,
two dropout layers, and three dense layers. For the offline scenario,
80% of the collected data set is used to train the CNN model while
10% of the data set is given as validation data. The hyper-parameters
are adjusted manually to improve both the training and validation
accuracy. The adam optimizer is leveraged to adapt the learning
rate for the objective function while the categorical cross-entropy is
used to compute the training and validation loss. The CNN model
is trained for 50 epochs in the GPU server which takes around 45
seconds. After achieving a stable validation accuracy, the model is
saved to be used in the online phase. The remaining 10% of the data
set is fed into the pre-trained model to evaluate the performance of
the model. In order to evaluate the performance of the CNN-based
model with other ML algorithms, three additional ML algorithm-
based models, namely Support vector machine (SVM), Kth-nearest
neighbor (KNN), and Random forest (RF) are trained. The acquired
test accuracy for each models for the individual CPU models with
separate micro-architectures are given in Table 2.

The test accuracy with the CNN model for the Intel Comet Lake
architecture is 94.5%. Although both SVM and RF models provide
more than 90% accuracy, the CNN model outperforms others. The
highest test accuracy of 97.6% is obtained for the Intel Tiger Lake
architecture among all devices, which is classified by the CNN
model. It is to be noted that, the default scaling governor for both
Intel architectures is powsersave.

The DF-SCA-based website fingerprinting attack is also appli-
cable on AMD devices as presented in Table 2. A separate CNN
model is trained on the AMD Ryzen 5 architecture. With the de-
fault scaling governor ondemand, the CNN model achieves 93.1%
accuracy during the online phase tested on this device. The second
highest accuracy is obtained from the SVM model with an accuracy
of 95.8%. Finally, the similar experiment is performed on the ARM
Cortex A-73 cores. The test accuracy of the pre-trained CNN model
for the ARM device is 87.3%, which is comparatively lower than the
Intel and AMD devices. Note that, the resolution of CPU frequency
is limited to 20 ms by default for the ARM device. We believe that
the lower resolution compared to Intel and AMD devices decreases
the success rate of the website fingerprinting attacks.

5.3 Tor Browser Website Fingerprinting:
In this scenario, it is anticipated that the DF-SCA is capable of
tracking the victim’s activities even while using the Tor browser.
Again, the same data collection strategy is applied; however, the
run-time is prolonged from 10 seconds to 30 seconds, as the Tor
Browser has launch overhead and network delays while loading
websites. Hence, the similar program as shown in Algorithm 1 is
also followed for the Tor browser scenario with small modifications,
such as the number of samples, 𝑁𝑠 , is set to 3000 in this case.

In the data collection, 100 different websites for the Tor browser
scenario are recorded. Each website is run 100 times to prepare a
datas et that is adequate to train a CNN model. The targeted website
list is changed since the Tor browser is mostly used by users who
are not willing to their identity to websites and Internet Service
Providers (ISPs). Hence, several whistle-blowing websites are added
to the list while restricted websites in the Tor browser are excluded
as given in Appendix, Table 7. The size of the entire data set for

Figure 3: The collected CPU frequency readings while vis-
iting (a) Facebook, (b) Reddit, and (c) Twitter websites on
Google Chrome browser. Each website is visited twice, and
1000 frequency measurements are collected with 10 ms in-
terval, i.e., the first 10 seconds of website rendering is moni-
tored.

Figure 4: The repeated consecutive CPU frequency readings
with different resolutions for the Intel and AMD devices.
The highest resolution without the repeated frequency read-
ings is achieved with 10 ms. It is to be noted that repetitive-
ness as 1 refers to unique readings, i.e., appears once after
each consecutive delay.

5.2 Google Chrome Website Fingerprinting
We initiated our website fingerprinting attack by targeting Google
Chrome browser due to its world-wide usage. The experiment is
carried on Intel, AMD, and ARM devices described in Section 4. A
data set consists of 100 measurements for 100 different websites is
collected based on the data collection mechanism given in Algo-
rithm 1. As each measurement consists of 1000 samples, the overall
size of the data set is 10000 × 1000, where the dimension of a feature
vector is 1 × 1000 for each website. Since the measurements carry
website-specific information in time-series format, one-dimensional
CNN (1D-CNN) models are leveraged to learn temporal relations
in the measurements. The proposed CNN architecture along with
the relevant defining parameters is listed in Appendix, Table 8. The

6

DF-SCA: Dynamic Frequency Side Channel Attacks are Practical

Arxiv Version, June, 2022

Table 2: Test accuracy for different setups with their default scaling governor mode explored with four ML models

Micro-architecture

Governor

Browser

Intel Comet Lake

powersave

Intel Tiger Lake

powersave

AMD Ryzen 5

ARM Cortex-A73

ondemand

interactive

Chrome
Tor
Tor (Top 5 score)
Chrome
Tor
Tor (Top 5 score)
Chrome
Tor
Tor (Top 5 score)
Chrome

CNN
94.5%
73.7%
93.0%
97.6%
68.7%
86.1%
93.1%
60.3%
87.0%
87.3%

Test Accuracy
SVM
92.0%
64.9%
86.6%
95.8%
51.9%
78.7%
90.4%
50.8%
83.2%
71.7%

KNN
74.6%
33.6%
54.0%
84.3%
16.2%
30.9%
78.4%
24.7%
46.5%
38.6%

RF
93.7%
63.6%
86.2%
93.0%
30.4%
55.0%
84.9%
29.8%
58.2%
69.6%

the Tor browser is 10000 × 3000. For each measurement, the size of
the feature vector is 1 × 3000 in this case. While the architecture of
the CNN model is almost the same as the Google Chrome scenario,
hyper-parameter values are fine-tuned to obtain a higher accuracy
as listed in Table 8.

The data set is split into 80%, 10%, and 10% for the train, valida-
tion, and test data sets, respectively. The simulation time to train
the model on the GPU server takes around 273.82 seconds for 50
epochs, which is comparatively longer than the previous scenario
as the number of features in each measurement is increased three
times. The test accuracy obtained from the CNN model over differ-
ent CPU models and micro-architectures are summarized in Table 2.
The test accuracy decreases in Tor browser compared to the Google
Chrome browser as the order of the network packets and rendering
process significantly change between each measurement. Hence,
the fingerprints are more noisy and consequently more difficult
to classify in Tor browser. The same adverse effect of Tor browser
due to the extensive noise on the classification rate is also observed
in other studies [13, 34, 53]. Nevertheless, 73.7% accuracy for the
first website guess indicates that malicious userspace applications
can distinguish the websites on privacy-oriented browsers through
the cpufreq interface on the Intel Comet Lake architecture. For In-
tel Tiger Lake and AMD Ryzen 5 architectures, the highest test
accuracy drops to 68.7% and 60.3%, respectively. Interestingly, the
KNN models cannot learn website-specific fingerprints on the Tor
browser scenario. Although the test accuracy on the Tor browser is
comparatively lower than the Google Chrome scenario, we also pro-
vide the top 5 accuracy for Tor browser scenario, which corresponds
to the accuracy rate at which the correct website belongs among
the top 5 predictions of the ML model. As presented in Table 2, the
highest top 5 score for Intel Comet Lake is 93% that is obtained
from the CNN model. For the Intel Tiger Lake and AMD Ryzen 5
architectures, the top 5 scores are 86.1% and 87%, respectively. It can
be observed that the CNN-based models outperform SVM, KNN,
and RF-based models for both Google Chrome and Tor browser
scenarios.

6 CASE STUDY 2: PASSWORD DETECTION
In the password detection scenario, we assume that a phone user
enters her password to log into her account in a banking application.
Our goal is not to outperform the existing works in the keystroke

7

attack literature, but rather demonstrates DF-SCA attack has suf-
ficient resolution and accuracy to perform a password detection
attack. For the target, Bank of America (BoA) mobile application is
chosen.

First, we focus on distinguishing the user keystrokes from other
activities and system noise. For that purpose, a phone user is se-
lected to enter random passwords in the BoA application while a
malicious application is reading the current CPU frequency every
20ms. The collected keystrokes in Figure 5 can be identified with
three common properties as follows:

● A single keystroke length on frequency measurements changes

between 8 and 12 samples.

● The big cores’ frequency increases up to 1.6GHz.
● If two consecutive keystrokes are close to each other, the
length of a keystroke pattern is higher than 12 samples.

Our first observation is that OS can handle the keystrokes with-
out increasing the CPU frequency to the maximum value (2.3 GHz),
which eliminates unnecessary power consumption to extend the
battery life. It is important to note that after a keystroke is entered,
the CPU frequency at most jumps to 1.6GHz. Next, it takes 200 ms
in average to decrease the frequency to 800 MHz that is the idle
CPU frequency in our mobile phone. Hence, an attacker is able to
distinguish the keystrokes that have at least 200 ms between each
key press with DF-SCA. When the time difference between two
consecutive keystrokes is less than 200ms, the CPU frequency stays
above 1.2 GHz with a length of higher than 12 samples. The reason
is that the OS detects the user activity, and it keeps the current fre-
quency at least the value specified by the hispeed_freq. If the length
of a keystroke is more than 12 samples, then it is assumed that there
are two consecutive keystrokes. Even though the attacker does not
have enough resolution to measure the time difference between
two close keystrokes, detecting the correct number of keystrokes
improves the detection rate for the number of keystrokes as well
as the password detection accuracy with multiple guesses.

After the necessary properties for keystroke detection are ex-
tracted from the frequency readings, 50 out of 200 most used pass-
words on Internet have been selected [33] to be monitored. The
length of the passwords varies from 6 to 9 characters as given in
Appendix, Table 9. Note that, the chosen passwords are not eligi-
ble to be valid passwords for the BoA application. However, our

Arxiv Version, June, 2022

Debopriya Roy Dipta and Berk Gulmezoglu

Figure 5: Example keystroke visualization with frequency
readings. The data is captured while a user is entering "pass-
word" in the BoA application on Galaxy Samsung S8. The
CPU frequency does not exceed 1.6 GHz.

purpose is to show that an attacker can create a dataset with the
targeted passwords by collecting frequency readings. The phone
user entered 50 distinct passwords for at least 10 times while the
malicious application monitors the CPU frequency values in the
ARM Cortex A-73 cores. In total, 1252 password measurements were
collected from 50 distinct passwords. First, the keystroke detection
rate is calculated by using three properties of the keystroke patterns.
The achieved keystroke detection rate is 95%. It is observed that
the background noise is sometimes treated as a keystroke. More-
over, the third property increased the detection rate from 90% to
95% in our case study. This improvement is more visible when the
passwords have the same letter next to each other such as ’aa’ or
’11’.

After keystroke timings are detected for each password, the pass-
word detection phase starts. The most important information while
distinguishing the passwords is the inter-keystroke timings since
it provides sufficient information on the location of consecutive
keystrokes. It is assumed that if the locations of two subsequent
keystrokes are close to each other on the screen, the time differ-
ence between the keystroke presses is expected to be low. After
the inter-keystroke timings are determined, 10 measurements for
each password are selected randomly to prevent the bias in the
model. The 70% of the collected measurements are used to train the
KNN model while the rest is used to evaluate the trained model.
The model is trained with the euclidean distance and four nearest
neighbor parameters. The model can guess the correct password
with 88% success rate with one guess on the test data set, which is 44
times better than a random guess among 50 passwords. The success
rate gradually increases with the number of guesses as given in
Figure 6. With only 3 guesses, the success rate is 97% which is the
number of allowed tries for the BoA application before the account
is locked.

7 RELATED WORK
In this section, we give an overview of previous studies on the
website fingerprinting and keystroke detection attacks.

8

Figure 6: The password detection accuracy with increasing
number of guesses. The correct password can be found with
97% with three guesses among 50 passwords in the BoA ap-
plication on Galaxy Samsung S8.
7.1 Website Fingerprinting Attacks
Website fingerprinting attacks can be implemented by utilizing
distinct methods since visited websites take advantage of several
technologies such as network connection, browser application, OS,
microarchitecture, and so on. If an attacker can monitor certain
system-wide or network-based features with sufficient resolution
from user-space applications, website fingerprinting attacks become
feasible. In order to give an overall insight for website fingerprinting
attacks, we cover several techniques:
Network-based Fingerprinting: The visited websites in a browser
require information from servers to transfer the website content
to the user device. The transmitted network packets include char-
acteristic information such as length, timing, and protocol, which
can be monitored by third-party attackers on the network to de-
tect the visited websites. Since each website has distinct network
packet sequence and features, network traffic analysis improves the
website fingerprinting attack accuracy even in the encrypted com-
munication [15]. Cai et al. [3] demonstrated that defenses against
website fingerprinting on Tor browsers are not effective against
network traffic analysis. Hayes et al.[14] further improved the ro-
bustness of website fingerprinting attacks with k-fingerprinting
technique. Jansen et al. [19] applied website fingerprinting from
middle relays to enable wide-scale monitoring on Tor network.
Li et al. [26] measured the amount of information leaked on the
Tor network to evaluate the effectiveness of anonymization on the
network. Panchenko et al. [35] discuss the applicability of web-
site fingerprinting in a real-world scenario by comparing several
strategies. Moreover, a large portion of the proposed attacks in-
clude a ML/DL algorithm such as Support Vector Machines [49],
Random Forest [14], Decision Tree [20], and Convolutional Neural
Network [2, 45] to improve the website fingerprinting success.
Side-channel Website Fingerprinting: An adversary can also
be placed in a user-space application or a malicious website in a
browser where a user visits websites regularly. In this threat model,
the adversary can collect information through the underlying mi-
croarchitecture or OS features that are accessible by user-space
applications. In [48], shared event loops are exploited to infer the
visited websites. Jana et al. [18] also showed that memory footprint
reveals the visited websites. Naghibijouybari et al. [32] demon-
strated that the amount of allocated GPU memory during a website

DF-SCA: Dynamic Frequency Side Channel Attacks are Practical

Arxiv Version, June, 2022

Table 3: Previous works based on different side-channel profiling techniques for website fingerprinting. For each work, attack
vector, resolution, targeted browser, classification accuracy, and number of websites profiled are given.

Attack Vector
Work
Frequency scaling
DF-SCA
Rendered Insecure [32] GPU memory API
PerfWeb [13]
RedAlert [53]
Shusterman et al. [43]
Spreitzer et al. [47]
Zhang et al. [52]
Memento [18]
Loophole [48]

Performance counters
Intel RAPL
Last-level cache
Data-usage
iOS APIs
procfs
shared event loop

Resolution Browser
10 ms
60 𝜇s
40 𝜇s
1 ms
2 ms
20 ms
1 ms
10 𝜇s
25 𝜇s

Chrome/Tor
Chrome
Chrome/Tor
Chrome
Firefox/Chrome/Tor
Tor
Safari
Chrome
Chrome

Accuracy (%)
97.6
90.4
86.4
99
80
95
68.5
78
76.7

# of Websites
100
200
30
37
100
100
100
100
500

rendering can also be leveraged to detect the visited website. The
microarchitectural side channels such as cache side-channel attacks
can also be implemented from Javascript [43] environment to infer
the visited websites. More interestingly, Cascading Style Sheets and
HTML [42] can be utilized to detect the visited websites, which
bypasses the current Javascript-based defense mechanisms. In addi-
tion, user-space accessible OS features can also be exploited such as
Android data usage-statistics [47], Linux perf interface [13], Intel
RAPL interface [53] to reveal the visited websites in the user system.
In the latest Linux OS releases, both perf and RAPL interface access
from the userspace applications are disabled by the OS to prevent
the user activity tracking.

7.2 Keystroke Recovery
Other than cryptographic key extraction, and website fingerprint-
ing, attackers leverage software-based side-channel attacks to leak
sensitive user input. Several studies showed that the inter-keystroke
timings can be monitored with high resolution side-channel attacks
to recover bi-grams and tri-grams that lead to high accuracy for
password detection attacks. For instance, microarchitectural compo-
nents reveal the keystrokes through cache activity [11, 39] or DRAM
usage [36]. Keystroke recovery can also be implemented through
the browser environment by monitoring the event queue [27, 48]. In
addition, keystroke timings can be obtained through OS interfaces,
such as interrupt statistics /proc/interrupts [7, 51], and stack
pointer and instruction pointer /proc/stat. In DF-SCA, we lever-
age a similar approach by querying the current frequency scaling
through cpufreq interface to recover the keystrokes.

7.3 Comparison of DF-SCA with Previous

Attacks

In this section, we compare our Google-Chrome and Tor browser
website fingerprinting attacks with the previous works given in
Table 3. DF-SCA outperforms a big portion of previous works even
though the side-channel resolution is lower than other profiling
techniques. Moreover, DF-SCA is not mitigated by Intel, AMD, and
ARM architectures as well as the underlying OS providers in con-
trast to previous native scenario attacks such as RedAlert [53] and
PerfWeb [13]. While DF-SCA is expected to be more susceptible to
the system noise since any additional workload increases the CPU
frequency that alters the side-channel measurements, the experi-
ments are performed in a noisy environment in which background

applications necessary for the system are still running. Since the
attack resolution is limited by the update interval of the cpufreq
interface on Android devices the lower success rate is achieved on
ARM devices compared to Intel and AMD architectures.

There are two closely related works to DF-SCA, which lever-
ages CPU frequency side-channels. Qin et al. [38] proposes power
consumption modeling for websites based on the CPU frequency
on Android devices. Since the power modeling of dynamic fre-
quency is not an effective attack, their success rate is only 55%
for 20 websites. Their work also has no investigation on Intel and
AMD devices. They further claim that their work is not applica-
ble from userspace starting from Android 8. Another recent work,
Hertzbleed attack [50], discovered that dynamic CPU frequency
changes based on the hamming weight and hamming distance of
the values in the registers. They verify that Hertzbleed is applicable
on both Intel and AMD architectures. However, they claim that
their attack can be mitigated if Turbo Boost is disabled. DF-SCA
shows that website fingerprinting and keystroke detection attacks
can be applicable in the absence of Turbo Boost feature on ARM
devices.

8 COUNTERMEASURES
In this section, we propose several countermeasures to prevent
DF-SCA on Linux-based devices.
Restricting Access Privilege for cpufreq: The easiest way to
thwart DF-SCA is to restrict the monitoring of cpufreq interface
from userspace applications in Linux OS. If the scaling_cur_freq
attribute is solely masked by the OS, there would be other resources
that could leak information about the CPU frequency such as stats
under cpufreq interface on Android devices.
Resolution Reduction: An alternative solution would be to de-
crease the update interval of the cpufreq interface since it would be
more difficult to track the CPU frequency in real-time with a lower
resolution in which the amount of information leaked by DF-SCA
can be diminished significantly. Even though this defense mecha-
nism can still be abused by profiling the websites for a longer time,
the attack accuracy can be decreased significantly. As an example,
Javascript-based timer resolution on Tor browsers is reduced to
100 ms which decreases the website detection rate to 45% for 100
websites [43].

9

Arxiv Version, June, 2022

Debopriya Roy Dipta and Berk Gulmezoglu

Artificial Noise: To mitigate specific attacks such as website fin-
gerprinting, artificial noise can be introduced by the system to mask
the rapid frequency changes in the system. Such an approach has
been proposed in [22] to protect the browsers against timing attacks
by randomly inserting workloads in the system. Since side-channel
analysis takes advantage of Deep Learning algorithms frequently,
adversarial obfuscation techniques can also be implemented to fool
the Deep Learning models [12]. Similarly, keystroke attacks can
be eliminated by introducing additional keystrokes to make the
distribution more uniform [40].

9 DISCUSSION
Scaling Governor Analysis: Even though we show the applica-
bility of DF-SCA website fingerprinting and keystroke detection
attacks on Intel, AMD, and ARM devices with default scaling gov-
ernors, it is still unclear whether other scaling governors provide
sufficient information on the visited websites. Hence, we investigate
the effect of different scaling governors on the website fingerprint-
ing accuracy on Intel and AMD devices. Although there are only
two supported governors on modern Intel architectures, both AMD
and Android-based mobile phones offer more scaling governor
options.

In order to evaluate the impact of different scaling governors on
the website fingerprinting accuracy, we conducted experiments on
the Intel Tiger Lake and AMD Ryzen 5 architectures by changing
the scaling governor mode. The website fingerprinting accuracy for
the Intel Tiger Lake improves slightly when the scaling governor
is changed to performance from powersave as presented in Table 4.
It means that the responsiveness of the device is quicker with the
performance governor, which eventually captures the changes in
the browser workload slightly more efficiently. On the other hand,
the AMD Ryzen 5 architecture has more available scaling governor
options. We observed that the default scaling governor ondemand
gives the highest website classification accuracy compared to the
other five governors as given in Table 4. The website fingerprinting
is still viable with different governors with the lowest accuracy
of 68.1% when the performance governor mode is active. Interest-
ingly, the performance and power governors drop the classification
accuracy, which shows that Intel and AMD implement different
types of frequency scaling even though the governor names are the
same. Although the accuracy drops with performance, powersave,
and userspace governors, the accuracy still stays high for schedutil
and conservative governors. Interestingly, the userspace governor
keeps the core frequency around 1.8GHz all the time, which de-
creases the variations on the core frequency compared to the other
governors. However, depending on the changing workload on the
system, small variations are observed on the frequency readings
as given in Appendix Figure 7. The high accuracy with userspace
governor shows that even small variations are sufficient to extract
meaningful website fingerprints from the frequency readings.
Universal ML Model for different CPU models: In the previous
experiment, we trained separate ML models for Intel, AMD, and
ARM architectures to obtain the highest website fingerprinting
accuracy. However, it is still unclear whether it is possible to replace
the individual ML models with a universal ML model trained with
the CPU frequency data from several micro-architectures. Thus, an

Table 4: The impacts of different scaling governors on web-
site fingerprinting accuracy for Intel Tiger Lake and AMD
Ryzen 5 architectures

Scaling governor

Test Accuracy (%)
Intel Tiger Lake AMD Ryzen 5

performance
powersave
userspace
ondemand
conservative
schedutil

97.8
97.6
N/A
N/A
N/A
N/A

68.1
75.3
80.1
97.6
96.7
97.6

attacker can use a combined ML model without requiring to know
the exact targeted microarchitecture for website fingerprinting.
For this purpose, initially, we combined the CPU frequency data
collected with powersave governor from both Intel Tiger Lake and
Intel Comet Lake architectures to train a universal CNN model and
evaluated the performance of the universal model with the test
data. For the universal CNN model, we obtained an accuracy of
95.9% for the Google Chrome browser scenario as given in Table 5.
Later, we added the CPU frequency data set from the AMD Ryzen
5 architecture collected from ondemand governor and created a
universal cross-architecture ML model. The overall accuracy for the
test data set eventually drops to 92.3%. However, this result shows
that a universal CNN model can still be utilized to eliminate the
assumption of knowing the targeted architecture for high accuracy
website fingerprinting even for cross-architecture measurements.

Table 5: The universal ML Model training and evaluation for
Intel Tiger Lake, Intel Comet Lake, and AMD Ryzen 5 archi-
tectures

Micro-architecture
Intel Comet Lake + Intel Tiger Lake
Intel Comet Lake + Intel Tiger Lake + AMD Ryzen 5

Test Accuracy (%)
95.9
92.3

10 CONCLUSION
DF-SCA demonstrated that dynamic frequency scaling feature in
modern systems can be exploited in Linux OS through cpufreq in-
terface to reveal the visited websites in Google Chrome and Tor
browsers as well as entered user passwords on Android mobile
phones. The attacker only needs to collect 10 seconds of the fre-
quency values to detect the websites in Google Chrome browser
applicable to Intel, AMD, and ARM devices. Even though DF-SCA’s
resolution is significantly lower than many previous attacks, it is
still possible to detect the visited websites with a high accuracy.
Moreover, victim keystrokes can be detected with 95% success rate
which yields to a successful password recovery attack with a simple
ML classification. As a result, DF-SCA is a potential threat for all
the components that take advantage of DFS technology. DF-SCA
shows that efficient countermeasures need to be integrated into
Linux kernel to prevent the privacy violation of the users against
malicious applications. The access privilege restriction or artificial

10

DF-SCA: Dynamic Frequency Side Channel Attacks are Practical

Arxiv Version, June, 2022

noise injection might become fruitful countermeasures against such
a threat.

REFERENCES
[1] Murugappan Alagappan, Jeyavijayan Rajendran, Miloš Doroslovački, and Guru
Venkataramani. Dfs covert channels on multi-core platforms. In 2017 IFIP/IEEE
International Conference on Very Large Scale Integration (VLSI-SoC), pages 1–6.
IEEE, 2017.

[2] Sanjit Bhat, David Lu, Albert Kwon, and Srinivas Devadas. Var-cnn: A data-
efficient website fingerprinting attack based on deep learning. Proceedings on
Privacy Enhancing Technologies, 4:292–310, 2019.

[3] Xiang Cai, Xin Cheng Zhang, Brijesh Joshi, and Rob Johnson. Touching from a
distance: Website fingerprinting attacks and defenses. In Proceedings of the 2012
ACM conference on Computer and communications security, pages 605–616, 2012.
[4] James Charles, Preet Jassi, Narayan S Ananth, Abbas Sadat, and Alexandra Fe-
dorova. Evaluation of the intel® core™ i7 turbo boost feature. In 2009 IEEE
International Symposium on Workload Characterization (IISWC), pages 188–197.
IEEE, 2009.

[5] Kihwan Choi, Karthik Dantu, Wei-Chung Cheng, and Massoud Pedram. Frame-
based dynamic voltage and frequency scaling for a mpeg decoder. In Proceedings
of the 2002 IEEE/ACM international conference on Computer-aided design, pages
732–737, 2002.

[6] ARM Developer. Intelligent energy management. https://developer.arm.com/do
cumentation/ddi0301/h/power-control/intelligent-energy-management. Last
accessed 2021-11-20.

[7] Wenrui Diao, Xiangyu Liu, Zhou Li, and Kehuan Zhang. No pardon for the
interruption: New inference attacks on android through interrupt timing analysis.
In 2016 IEEE Symposium on Security and Privacy (SP), pages 414–432. IEEE, 2016.
[8] Xiaobo Fan, Carla S Ellis, and Alvin R Lebeck. The synergy between power-aware
memory systems and processor voltage scaling. In International Workshop on
Power-Aware Computer Systems, pages 164–179. Springer, 2003.

[9] Taylor Francis. The next big cloud competition is the race to zero emissions.
https://www.weforum.org/agenda/2021/09/the-next-big-cloud-competition-is-
the-race-to-zero-emissions. Last accessed 2022-1-19.

[10] Kate Greene. Intel’s new strategy: Power efficiency. https://www.technology
review.com/2006/06/01/229027/intels-new-strategy-power-efficiency/. Last
accessed 2022-1-19.

[11] Daniel Gruss, Raphael Spreitzer, and Stefan Mangard. Cache template attacks:
In 24th USENIX Security

Automating attacks on inclusive last-level caches.
Symposium (USENIX Security 15), pages 897–912, 2015.

[12] Berk Gulmezoglu. XAI-based microarchitectural side-channel analysis for web-
site fingerprinting attacks and defenses. IEEE Transactions on Dependable and
Secure Computing, 2021.

[13] Berk Gulmezoglu, Andreas Zankl, Thomas Eisenbarth, and Berk Sunar. Perfweb:
How to violate web privacy with hardware performance events. In European
Symposium on Research in Computer Security, pages 80–97. Springer, 2017.
[14] Jamie Hayes and George Danezis. k-fingerprinting: A robust scalable website
fingerprinting technique. In 25th USENIX Security Symposium (USENIX Security
16), pages 1187–1203, 2016.

[15] Andrew Hintz. Fingerprinting websites using traffic analysis. In International
workshop on privacy enhancing technologies, pages 171–178. Springer, 2002.
[16] Advanced Micro Devices Inc. Amd powernow!™ technology. https://www.amd.

com/system/files/TechDocs/24404a.pdf. Last accessed 2021-11-20.

[17] Enhanced Intel. Speedstep® technology for the intel® pentium® m processor.

White Paper, Intel, 2004.

[18] Suman Jana and Vitaly Shmatikov. Memento: Learning secrets from process
footprints. In 2012 IEEE Symposium on Security and Privacy, pages 143–157. IEEE,
2012.

[19] Rob Jansen, Marc Juarez, Rafa Galvez, Tariq Elahi, and Claudia Diaz. Inside job:

Applying traffic analysis to measure tor from within. In NDSS, 2018.

[20] Marc Juarez, Sadia Afroz, Gunes Acar, Claudia Diaz, and Rachel Greenstadt.
A critical evaluation of website fingerprinting attacks.
In Proceedings of the
2014 ACM SIGSAC Conference on Computer and Communications Security, pages
263–274, 2014.

[21] Manuel Kalmbach, Mathias Gottschlag, Tim Schmidt, and Frank Bellosa. Turbocc:
A practical frequency-based covert channel with intel turbo boost. arXiv preprint
arXiv:2007.07046, 2020.

[22] David Kohlbrenner and Hovav Shacham. Trusted browsers for uncertain times.
In 25th USENIX Security Symposium (USENIX Security 16), pages 463–480, 2016.
[23] Michael Larabel. Intel publishes new linux p-state driver. https://www.phoronix
.com/scan.php?page=news_item&px=MTI5Mzc. Last accessed 2021-1-27.
[24] Michael Larabel. Linux’s "ondemand" governor is no longer fit. https://ww
w.phoronix.com/scan.php?page=news_item&px=MTM3NDQ. Last accessed
2021-1-27.

[25] Etienne Le Sueur and Gernot Heiser. Dynamic voltage and frequency scaling: The
laws of diminishing returns. In Proceedings of the 2010 international conference

11

on Power aware computing and systems, pages 1–8, 2010.

[26] Shuai Li, Huajun Guo, and Nicholas Hopper. Measuring information leakage
in website fingerprinting attacks and defenses. In Proceedings of the 2018 ACM
SIGSAC Conference on Computer and Communications Security, pages 1977–1992,
2018.

[27] Moritz Lipp, Daniel Gruss, Michael Schwarz, David Bidner, Clémentine Mau-
rice, and Stefan Mangard. Practical keystroke timing attacks in sandboxed
javascript.
In European Symposium on Research in Computer Security, pages
191–209. Springer, 2017.

[28] Moritz Lipp, Andreas Kogler, David Oswald, Michael Schwarz, Catherine Easdon,
Claudio Canella, and Daniel Gruss. Platypus: Software-based power side-channel
attacks on x86. In IEEE Symposium on Security and Privacy (SP), 2021.

[29] Arindam Mallik, Jack Cosgrove, Robert P Dick, Gokhan Memik, and Peter Dinda.
Picsel: Measuring user-perceived performance to control dynamic frequency
scaling. In Proceedings of the 13th international conference on Architectural support
for programming languages and operating systems, pages 70–79, 2008.

[30] Arindam Mallik, Bin Lin, Gokhan Memik, Peter Dinda, and Robert P Dick. User-
driven frequency scaling. IEEE Computer Architecture Letters, 5(2):16–16, 2006.
[31] Philipp Miedl, Xiaoxi He, Matthias Meyer, Davide Basilio Bartolini, and Lothar
Thiele. Frequency scaling as a security threat on multicore systems. IEEE Trans-
actions on Computer-Aided Design of Integrated Circuits and Systems, 37(11):2497–
2508, 2018.

[32] Hoda Naghibijouybari, Ajaya Neupane, Zhiyun Qian, and Nael Abu-Ghazaleh.
Rendered insecure: Gpu side channel attacks are practical. In Proceedings of the
2018 ACM SIGSAC conference on computer and communications security, pages
2139–2153, 2018.

[33] NordPass. Top 200 most common passwords. https://nordpass.com/most-

common-passwords-list/. Last accessed 2022-1-16.

[34] Yossef Oren, Vasileios P Kemerlis, Simha Sethumadhavan, and Angelos D
Keromytis. The spy in the sandbox: Practical cache attacks in javascript and their
implications. In Proceedings of the 22nd ACM SIGSAC Conference on Computer
and Communications Security, pages 1406–1418, 2015.

[35] Andriy Panchenko, Fabian Lanze, Jan Pennekamp, Thomas Engel, Andreas Zin-
nen, Martin Henze, and Klaus Wehrle. Website fingerprinting at internet scale.
In NDSS, 2016.

[36] Peter Pessl, Daniel Gruss, Clémentine Maurice, Michael Schwarz, and Stefan
Mangard. DRAMA: Exploiting DRAM addressing for cross-cpu attacks. In 25th
USENIX security symposium (USENIX security 16), pages 565–581, 2016.

[37] Phys.org. Amd debuts power-saving processors. https://phys.org/news/2005-09-

amd-debuts-power-saving-processors.html. Last accessed 2022-1-19.

[38] Yi Qin and Chuan Yue. Website fingerprinting by power estimation based side-
channel attacks on android 7. In 2018 17th IEEE International Conference On Trust,
Security And Privacy In Computing And Communications/12th IEEE International
Conference On Big Data Science And Engineering (TrustCom/BigDataSE), pages
1030–1039. IEEE, 2018.

[39] Thomas Ristenpart, Eran Tromer, Hovav Shacham, and Stefan Savage. Hey, you,
get off of my cloud: exploring information leakage in third-party compute clouds.
In Proceedings of the 16th ACM Conference on Computer and Communications
Security, pages 199–212, 2009.

[40] Michael Schwarz, Moritz Lipp, Daniel Gruss, Samuel Weiser, Clémentine Maurice,
Raphael Spreitzer, and Stefan Mangard. Keydrown: Eliminating software-based
keystroke timing side-channel attacks. In Network and Distributed System Security
Symposium. Internet Society, 2018.

[41] Greg Semeraro, Grigorios Magklis, Rajeev Balasubramonian, David H Albonesi,
Sandhya Dwarkadas, and Michael L Scott. Energy-efficient processor design
using multiple clock domains with dynamic voltage and frequency scaling. In
Proceedings Eighth International Symposium on High Performance Computer Ar-
chitecture, pages 29–40. IEEE, 2002.

[42] Anatoly Shusterman, Ayush Agarwal, Sioli O’Connell, Daniel Genkin, Yossi Oren,
and Yuval Yarom. Prime+ probe 1, javascript 0: Overcoming browser-based side-
channel defenses. In 30th USENIX Security Symposium (USENIX Security 21),
2021.

[43] Anatoly Shusterman, Lachlan Kang, Yarden Haskal, Yosef Meltser, Prateek Mittal,
Yossi Oren, and Yuval Yarom. Robust website fingerprinting through the cache
occupancy channel. In 28th USENIX Security Symposium (USENIX Security 19),
pages 639–656, 2019.

[44] Gary Sims. Arm’s secret recipe for power efficient processing. https://www.andr
oidauthority.com/arms-secret-recipe-for-power-efficient-processing-409850/.
Last accessed 2022-1-19.

[45] Payap Sirinam, Mohsen Imani, Marc Juarez, and Matthew Wright. Deep finger-
printing: Undermining website fingerprinting defenses with deep learning. In
Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications
Security, pages 1928–1943, 2018.

[46] Vassos Soteriou, Noel Eisley, and Li-Shiuan Peh. Software-directed power-aware
interconnection networks. ACM Transactions on Architecture and Code Optimiza-
tion (TACO), 4(1):5–es, 2007.

[47] Raphael Spreitzer, Simone Griesmayr, Thomas Korak, and Stefan Mangard. Ex-
ploiting data-usage statistics for website fingerprinting attacks on android. In

Arxiv Version, June, 2022

Debopriya Roy Dipta and Berk Gulmezoglu

Proceedings of the 9th ACM Conference on Security & Privacy in Wireless and
Mobile Networks, pages 49–60, 2016.

[48] Pepe Vila and Boris Köpf. Loophole: Timing attacks on shared event loops in
chrome. In 26th USENIX Security Symposium (USENIX Security 17), pages 849–864,
2017.

[49] Tao Wang and Ian Goldberg. Improved website fingerprinting on tor. In Proceed-
ings of the 12th ACM workshop on Workshop on privacy in the electronic society,
pages 201–212, 2013.

[50] Yingchen Wang, Riccardo Paccagnella, Elizabeth He, Hovav Shacham, Christo-
pher W. Fletcher, and David Kohlbrenner. Hertzbleed: Turning power side-
channel attacks into remote timing attacks on x86. In Proceedings of the USENIX
Security Symposium (USENIX), 2022.

[51] Kehuan Zhang and XiaoFeng Wang. Peeping tom in the neighborhood: Keystroke
eavesdropping on multi-user systems. In USENIX Security Symposium, volume 20,
page 23, 2009.

[52] Xiaokuan Zhang, Xueqiang Wang, Xiaolong Bai, Yinqian Zhang, and XiaoFeng
Wang. Os-level side channels without procfs: Exploring cross-app information
leakage on ios.
In Proceedings of the Symposium on Network and Distributed
System Security, 2018.

[53] Zhenkai Zhang, Sisheng Liang, Fan Yao, and Xing Gao. Red alert for power
leakage: Exploiting intel rapl-induced side channels. In Proceedings of the 2021
ACM Asia Conference on Computer and Communications Security, pages 162–175,
2021.

[54] Qingbo Zhu, Zhifeng Chen, Lin Tan, Yuanyuan Zhou, Kimberly Keeton, and John
Wilkes. Hibernator: helping disk arrays sleep through the winter. ACM SIGOPS
Operating Systems Review, 39(5):177–190, 2005.

A APPENDIX

Figure 7: The CPU frequency reading collected from AMD
Ryzen 5 with userspace governor. Unlike other scaling gov-
ernors, for userspace the CPU frequency does not rise to
the maximum frequency limit with different workloads.
The frequency variation while browsing Facebook and In-
stagram web pages is quite low, and interestingly, the fre-
quency remains below its base frequency of 1.4 GHz. Al-
though the variation is quite low, a similar pattern for the
same web page can still be noticeable from this figure.

12

DF-SCA: Dynamic Frequency Side Channel Attacks are Practical

Arxiv Version, June, 2022

Table 6: Profiled Websites for Google-Chrome Scenario

Table 7: Profiled Websites for Tor browser Scenario

71. yandex.ru
72. vimeo.com
73. etsy.com
74. slideshare.net
75. vice.com
76. foxnews.com
77. 9gag.com
78. slack.com
79. telegram.org
80. forbes.com
81. roblox.com
82. globo.com
83. w3schools.com
84. flipkart.com
85. fedex.com
86. scribd.com
87. mediafire.com
88. researchgate.net
89. softonic.com
90. rambler.ru
91. washingtonpost.com
92. theguardian.com

36. Publeaks.nl
37. Aljazeera.com
38. Apple.com
39. Adobe.com
40. Canva.com
41. Indeed.com
42. Intuit.com
43. Jd.com
44. Qq.com
45. Target.com
46. Tiktok.com
47. Wellsfargo.com
48. Ups.com
49. Zillow.com
50. Zoom.com
51. instagram.com
52. whatsapp.com
53. fandom.com
54. instructure.com
55. twitch.tv
56. walmart.com
57. github.com
58. stackoverflow.com 93. cloudflare.com
94. wordpress.org
95. gravatar.com
96. brandbucket.com
97. who.int
98. dailymotion.com
99. nature.com
100. time.com

1. Facebook.com
2. Amazon.com
3. Google.com
4. Netflix.com
5. Yahoo.us
6. Wikipedia.org
7. Aliexpress.com
8. Bing.com
9. Ebay.com
10. Reddit.com
11. Twitter.com
12. Linkedin.com
13. Live.com
14. Diply.com
15. Ntd.tv
16. Cnn.com
17. Pinterest.com
18. Office.com
19. Microsoft.com
20. Chase.com
21. Nytimes.com
22. Blogspot.com
23. Paypal.com
24. Wordpress.com 59. douban.com
60. mail.ru
25. Espn.com
61. quora.com
26. Wikia.com
62. tumblr.com
27. Wikileaks.org
63. bbc.com
28. Imdb.com
64. medium.com
29. Balkanleaks.eu
30. Unileaks.org
65. dropbox.com
31. Globaleaks.com 66. godaddy.com
32. Liveleak.com
33. Globalwitness.org 68. soundcloud.com
34. Wikispooks.com 69. discord.com
35. Officeleaks.com 70. booking.com

67. imgur.com

44. Hulu.com
45. Ups.com
46. Xinhuanet.com
47. Yahoo.com
48. Zhanqi.tv

36. Taobao.com
1. 360.cn
2. Adobe.com
37. Target.com
3. Aliexpress.com 38. Tiktok.com
39. Tmall.com
4. Amazon.com
40. Twitter.com
5. Apple.com
41. Usps.com
6. Baidu.com
7. Bestbuy.com
42. Weibo.com
8. Blogspot.com 43. Wellsfargo.com
9. Canva.com
10. Chase.com
11. Csdn.net
12. Diply.com
13. Ebay.com
14. Facebook.com 49. Zillow.com
50. Zoom.com
15. Force.com
16. Google.com
51. Instagram.com
17. Huanqiu.com 52. whatsapp.com
53. bing.com
18. Indeed.com
54. fandom.com
19. Intuit.com
20. Jd.com
56. twitch.tv
21. Linkedin.com 56. twitch.tv
22. Live.com
23. Msn.com
24. Naver.com
25. Netflix.com
26. Ntdtv.com
27. Nytimes.com 62. douban.com
63. youtube.com
28. Office.com
29. Okezone.com 64. mail.ru
30. Paypal.com
65. quora.com
31. Pinterest.com 66. tumblr.com
32. Qq.com
33. Reddit.com
34. Sohu.com
35. Spotify.com

67. bbc.com
68. medium.com
69. dropbox.com
70. godaddy.com

57. walmart.com
58. imdb.com
59. espn.com
60. github.com
61. stackoverflow.com 96. researchgate.net

71. imgur.com
72. soundcloud.com
73. discord.com
74. booking.com
75. rakuten.com
76. yandex.ru
77. vimeo.com
78. etsy.com
79. slideshare.net
80. cloudfare.com
81. vice.com
82. foxnews.com
83. 9gag.com
84. slack.com
85. airbnb.com
86. telegram.org
87. forbes.com
88. roblox.com
89. globo.com
90. w3schools.com
91. flipkart.com
92. bankofamerica.com
93. fedex.com
94. scribd.com
95. mediafire.com

97. softonic.com
98. rambler.ru
99. washingtonpost.com
100. theguardian.com

13

Arxiv Version, June, 2022

Debopriya Roy Dipta and Berk Gulmezoglu

Table 8: The specifies parameters of the different ML-based
models exploited for website classification while consider-
ing both google-chrome and tor browser scenario.

Table 9: Profiled Passwords for Password Detection on An-
droid chosen from [33].

Attributes
No. of filters = 64
Kernel size = 3
No. of filters = 64
Kernel size = 3
Pool size = 3
No. of filters = 128
Kernel size =3
No. of filters = 128
Kernel size = 3
Pool size = 3
Rate = 0.5
Units = 256
Rate = 0.5
Units = 128
Units = 100

ML-Model

Conv1

Conv2

Max Pooling 1

CNN

Conv3

Conv4

Max Pooling 2
Dropout
Dense1
Dropout
Dense2
Dense3
kernel = ’rbf’
Kernel coefficient, 𝑔𝑎𝑚𝑚𝑎 = ’auto’
Regularization parameter, 𝐶 = 3
No. of neighbors = 5
Distance metric = ’minkowski’
max_depth = 18
random_state = 0

SVM

KNN

RF

1234567
charlie
jessica
samsung
michael
pokemon
welcome
anthony
letmein
freedom

123456789
password1
target123
asdasd123
liverpool
iloveyou1
princess1
football1
chocolate
qazwsxedc

12345678
password
myspace1
football
princess
sunshine
computer
abcd1234
superman
baseball
michelle
jennifer

6 characters 7 characters 8 characters 9 characters
1q2w3e
123456
123123
qwerty
abc123
dragon
monkey
daniel
shadow
killer
soccer
tinkle
jordan
thomas
andrew
hunter
naruto
justin

14

