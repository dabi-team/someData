2
2
0
2

n
u
J

0
2

]
E
S
.
s
c
[

1
v
4
9
8
9
0
.
6
0
2
2
:
v
i
X
r
a

ARTICLE

NoteG: A Computational Notebook to Facilitate Rapid Game
Prototyping

Noble Saji Mathews and Sridhar Chimalakonda

Research in Intelligent Software & Human Analytics Lab, Indian Institute of Technology
Tirupati, India

ARTICLE HISTORY
Compiled June 22, 2022

ABSTRACT
Game development-based approaches are increasingly used to design curricula that
can engage students, as these can help them apply and practice learnt computer
science concepts. However, it can become complex to develop a minimum working
game or a prototype with the help of high-end game engines. Game prototyping
is one of the most essential parts of the game design and development cycle as it
allows developers to continuously test and improve their ideas. In recent years, com-
putational notebooks have gained widespread popularity among developers. They
can help run individual code snippets, visualize the output, consolidate the source
code, and share live code easily. However, its use has not been explored in the ﬁeld
of game development and prototyping. In this paper, we propose NoteG, a compu-
tational notebook towards rapid game prototyping. We evaluated the tool with 18
novice game developers through a questionnaire-based user survey. A majority of
the volunteers (66%) found it easy to use and were of the opinion that it saves time.
A few of the participants successfully extended the existing framework to implement
new game mechanics within their prototypes.

KEYWORDS
Game design; Rapid prototyping; Computational notebooks; Programming

1. Introduction

Gamiﬁcation is being increasingly used in various domains ranging from skill identiﬁ-
cation in recruitment to building engaging course curricula in ﬁelds such as computer
science, mathematics and biology (Kasahara, Sakamoto, Washizaki, & Fukazawa, 2019;
Lo & Hew, 2020; Obaid, Farooq, & Abid, 2020; Schulz, Smaradottir, Prinz, & Hara,
2020; Siswati, Prihatin, Damayanti, Naﬁsah, et al., 2021). Students often show a keen
interest in gamiﬁed approaches, and hence they are being explored to enhance tradi-
tional programming education (Aycock, Pitout, & Storteboom, 2015). There have also
been explorations into encouraging children to develop games on their own (Richard
& Kafai, 2015). Game development based approaches have been found to be eﬀective
in promoting problem-solving skills among children (Chu & Hung, 2015). With more
and more students being exposed to game development or even taking it up based on
their own interests (Rahimi & Kim, 2019), there is a need for the inclusion of proper
game design practices in these initial stages and tools to simplify the process.

CONTACT Noble Saji Mathews Email: ch19b023@iittp.ac.in

 
 
 
 
 
 
Challenges in building a game that can implement the desired functionality are
often attributed to the tools used and workﬂow involved (Zhu & Wang, 2019). There
have been eﬀorts that address this issue by shifting the focus to mobile-based game
development, which is considered to be less complex so that students with limited
experience are also able to create playable games (Kurkovsky, 2009).

Murphy-Hill et al. (Murphy-Hill, Zimmermann, & Nagappan, 2014) conducted a
survey of 364 developers on how game development diﬀers from other software devel-
opment. Their results show that several strands of software engineering research and
active practices can have a signiﬁcant impact on game development. Smaller demo
games may be a good starting point for novices to get into game development.

Software prototyping is a practice that is actively used in the domain of software
development to reduce the number of design iterations required (Devadiga, 2017).
Prototypes in commercial settings are helpful in obtaining a better idea about the
requirements of a client, getting customer feedback and mitigating the risks involved
with product development.

Prototyping is an important step in the game development process that allows ex-
ploration and experimentation during the learning stages. Rapid prototyping is an
approach to prototyping that emphasizes the rapid development of ideas into func-
tional prototypes to demonstrate or check the feasibility of a concept. This is usually
an iterative approach and is extensively used in software development and hardware
design (G¨unther, M¨uller, H¨ubner, M¨uhlh¨auser, & Matviienko, 2021; M¨uller et al.,
2021). In software development, a prototype is considered a simulation or a model
that allows one to experience the system (Warfel, 2009). In terms of game develop-
ment, prototypes can take several forms, such as storyboards and sketches (Manker,
2011). In this paper, we use the word prototypes to refer to small playable versions of
a game that may be used to demonstrate a key game mechanic.

Rapid prototyping is often used in game design to test game concepts and ac-
company game pitches (Bomstr¨om, Kelanti, Lappalainen, Annanper¨a, & Liukkunen,
2020). Game-based learning and the introduction of game design into course content
is another venue where prototyping has been found to be a crucial step (Pirker, Kul-
tima, & G¨utl, 2016; Zhang & Chen, 2021). Game prototyping thus being a much
more hands-on process than brainstorming, helps to test and improve ideas continu-
ously (Gray, Brown, & Macanufo, 2010). Shareable prototypes could help demonstrate
ideas and improve collaboration in team projects. Further game prototyping can also
help students gain important job skills like project management and eﬀort estimation
(Pirker et al., 2016) which we feel might make it a good ﬁt for inclusion in introductory
courses.

Development groups can end up wasting time having to deal with heterogeneity and
balancing all aspects of a game for an idea that might not be feasible (Blow, 2004).
This might occur as novice game developers skip out on the prototyping stages for
simplicity (Schaeﬀer & Palmgren, 2017). Game engine code which deals with deﬁning
the physics of the world within a game is often speciﬁc to the engine chosen and can
often be confusing requiring repetitive tweaking and sound algorithmic knowledge to
get components to work as desired (Blow, 2004). Considering the overhead involved
for novice game developers to get used to a speciﬁc game engine, there may be perks
to building a system that is much easier to modify for the purpose of building rapid
prototypes (D. Hmeljak & Zhang, 2020). NoteG which we propose in this paper is a
computational notebook that works towards this goal and aims to simplify the process
of rapid game prototyping.

Computational notebooks have emerged as good learning resources for programming

2

tasks with hands-on demonstration capabilities (Rule, Tabard, & Hollan, 2018). Even
outside of traditional software engineering backgrounds, users have found computa-
tional notebooks to be useful making it a rapidly-emerging landscape. Some examples
are shareable visualizations and executable code snippets accompanied by documenta-
tion that ﬁnd use across academia and industry (Lau, Drosos, Markel, & Guo, 2020).
The ability of computational notebooks to enable authoring live code and integrate
step-wise output in a single document are a few of the reasons why they have be-
come popular among developers and data scientists(Granger & P´erez, 2021). They
also help in understanding concepts and their applications through the immediate ex-
ecution of code snippets (Walden, Doyle, Garns, & Hart, 2013). Thus computational
notebook-like environments may be used to assist prototyping by providing a simpli-
ﬁed environment for developers and enabling sharing of live code that can be used to
tweak and test parameters among collaborators.

Even though there are several works in the literature that try to simplify gamiﬁca-

tion or teach game development, our work diﬀers in the following ways:

• Uses a computational notebook based approach which makes it easy to test,

demonstrate and collaborate on a project.

• Attempts to reduce the overhead involved in developing a game such as learning
to use a Game Engine in situations where the focus is more on the code involved.
• For students with a keen interest in game development, this may help incorporate

a practice of rapid prototyping.

In this paper, we demonstrate how live coding and cell-based execution can sim-
plify game prototyping, which in turn may help novice programmers learn game de-
velopment or can be used to engage students in computing courses. This approach
is illustrated through a computational notebook called NoteG geared towards proto-
typing simple 2D role-playing games (RPG). We also evaluate the approach with 18
volunteers with overall positive response and a net promoter score of 66.

2. Related Work

Game development is a domain that is continuously evolving and has become increas-
ingly complex over the years (Marklund, Engstr¨om, Hellkvist, & Backlund, 2019).
With the increasing technical complexity involved, there is often a high technical risk
associated with game design decisions (Blow, 2004). The increasing divide between ease
of use and game development speed using modern-day game engines (D. M. Hmeljak
& Zhang, 2020) can make it diﬃcult for a beginner to develop a game. This is where
Model Driven Game Development (MDGD) approaches have been used by developers
to reduce development time with reusable artifacts (Baldassarre et al., 2021; Marchi-
sio, Margaria, & Sacchet, 2020; Reyno & Cars´ı Cubel, 2009). One cannot predict how
long it can take to build a new component or if it will be implemented in the ﬁnal
game. Consideration must also be given to how game components may interact with
the rest of the system despite the technical feats involved (Blow, 2004). This drives the
need for inclusion of game prototyping in the development cycle, where essentially one
builds tiny experimental games iteratively, to validate and showcase the game ideas
(Musil, Schweda, Winkler, & Biﬄ, 2010). Over the years, game jams 1 have gained
popularity by facilitating prototyping and in turn, increasing engagement and spark-

1https://globalgamejam.org/what-game-jam

3

ing creativity towards disruptive game mechanics. Apart from its use in the industry,
rapid game prototyping has also found use in improving the quality of games and
areas of education that can make use of the development of games to teach or practice
relevant concepts (Cooper & Longstreet, 2012; Mashuri et al., 2021).

2.1. Prototyping in Game Development and Education

Similar to software development, the adoption of rapid prototyping is actively in-
volved in enhancing the game development cycle. Borg et al. describe how good game
development practices have drawn from software engineering research (Borg, Garousi,
Mahmoud, Olsson, & St˚alberg, 2019) and emphasize the need to explore its impact
on game development depending on the constraints. Prototyping though accepted as
a core practice has been reported to be adopted only by a small fraction of the teams
surveyed due to time constraints and sometimes has led to use of rapid prototyping
(Borg et al., 2019). In the ﬁeld of education, it has been applied in many forms such
as game development electives for university students (Kletenik & Sturm, 2018), com-
plementing the existing academic curriculum and for creating content that can engage
students (Subramanian, Saule, & Payton, 2020).

Apart from the use of educational games, the development of games has been ex-
plored as a fun way to learn systems analysis in the course designed by Nikunj Dalal
in his article (Dalal, 2012) where he notes the use of high-level software that is much
simpler to use than conventional game engines.

Simpliﬁed game engines with abstracted code may also help students get started
with game design (D. M. Hmeljak & Zhang, 2020). These have made the domain ever
more accessible to students and instructors alike enabling their integration into courses
and this has been reported to have an overall positive impact (Iosup & Epema, 2014).
The use of such approaches may enable students to explore various game mechanics
and may help in providing a better understanding of core game design elements.

J. Blow explains that overall project size and high domain-speciﬁc requirements are
two roadblocks that may cause complexity in game development (Blow, 2004). Instead
of focusing on simplifying game development, we wish to bring focus on making game
prototyping more accessible to novices and enable developers to inculcate the habit of
software prototyping. Perker et al. in their paper (Pirker et al., 2016) express how game
prototyping helps in teaching various important skills such as project management,
eﬀort estimation, networking and even communication skills required by the industry.
Game prototyping encourages creative exploration of the domain and allows one
to select the best idea from a set of alternatives based on technical feasibility and
available resources at the moment. Rapid game prototyping has been explored not
only in connecting academia and industry but also in controller design to explore how
it can aﬀect the social experience of video games (Chatham, Walmink, & Mueller, 2013)
with the help of Arduinos. Iris Soute et al. developed Rapido a prototyping platform
for outdoor games (Soute, Vacaretu, Wit, & Markopoulos, 2017). They also explain
how their tool enabled designers to focus on the core concepts and build prototypes
without worrying about lower-level issues.

2.2. Use of Computational Notebooks

The idea of computational notebooks is based on literate programming which em-
phasizes the understandability of the code (Knuth, 1984) and that program logic be

4

written in human-readable forms such as code snippets and macros. With the intro-
duction of the Jupyter Notebook (Kluyver et al., 2016), computational notebooks have
become quite popular and widely used by developers. It is a readable, reproducible
and executable notebook that can be used for publishing code and generating results
and visualization.

There have been a number of diﬀerent ways in which computational notebooks
have been employed. O’Hara et al. proposed a computational notebook to teach AI
and introduced a new way of teaching and learning (O’Hara, Blank, & Marshall,
2015). Corno et al. (Corno, De Russis, & S´aenz, 2019) introduced a notebook for
IoT development by executing notebook on top of the Docker Engine. Many other
computational notebooks like GrapePress for Graph Transformations(Weber, 2021)
and visJS2jupyter for visualizing mechanisms of biological processes (Rosenthal et al.,
2018) have been proposed by researchers to help developers by providing interactive
and user-friendly environments.

2.3. Prototyping

There have also been explorations into automation of game prototyping in 2D platform
games through model-driven engineering (Reyno & Cars´ı Cubel, 2009). Reducing the
overhead involved in developing a game using a user-friendly framework in this stage
may help towards promoting the adoption of game prototyping among beginners. A
more code-centred approach may also make it easier to integrate into learning environ-
ments for novice game developers who are more accustomed to programming. Rapid
prototyping can also help students in making dynamic changes to a game by allow-
ing for creative risks rather than technical, through mixing and matching components
(Pirker et al., 2016). The use of such game prototypes could further promote analytical
thinking and help in teaching design patterns for object-oriented programming and
similar topics (Rule et al., 2018).

Rapid prototyping has also been proposed for applications such as web / mobile app
development (Steinglass, Franke, & Filman, 2017) to provide a learning environment
for students to learn software engineering principles. Challenging tasks such as terrain
generation which requires a large number of iterations have explored rapid prototyping
and ways to support the same (T. Wang & Kurabayashi, 2020) but this involves
sketches and landscapes. There have also been tools that directly aim to simplify the
process of creating game mechanics, Volkovas et al. have proposed the use of a language
for prototyping and compare it against prevailing techniques for 2D games (Volkovas,
Fairbank, Woodward, & Lucas, 2019).

We see that computational notebooks possess a lot of features that can help in
creating rapid prototypes and that it has previously been successfully applied to create
user-friendly and shareable code. However, to the best of our knowledge, despite its
wide application in a number of domains the use of computational notebooks for
enhancing and simplifying game prototyping for novice game developers has not been
explored in the current literature.

3. Design and Development of NoteG

In this section, we describe the proposed approach, design decisions and development
process of NoteG as shown in Fig. 1. The primary objectives of NoteG are:

5

Figure 1. Workﬂow of building NoteG for Rapid Game Prototyping.

• Obtaining a simpliﬁed command-set, useful in developing multiple games without

a steep learning curve.

• Allow easy expansion or modiﬁcation of the existing command-set for speciﬁc

use cases.

• Use a class-based programming paradigm with support for block-based systems
(K¨olling, Brown, & Altadmri, 2015) to allow inheritance for future game objects
and also to support hot-swapping at run-time.

• Incorporate error management into the state manager so that any object that
causes errors is removed from the test environment providing an error traceback
to prevent crashes.

• To support prototype development by enabling proper documentation, code fold-

ing and shareability.

Keeping in mind the aforementioned objectives and based on the feedback received
during the process, we built NoteG. It is a computational notebook that serves as a
basic foundation and can be invoked to begin the prototyping process. The following
sections go into more detail about the key features of the current implementation and
how it can be extended based on the user’s requirements.

3.1. Background Framework

NoteG has been built as a Jupyter Notebook 2. This is because its cell-based imple-
mentation allows the developer to break down the code into more readable blocks and
hence makes it easier to work with. Jupyter Notebook is a common and popular tool
that users may have already been exposed to. Another advantage to using it is the
number of extensions it supports making it easier to add functionality such as block-
based programming for beginners which we go over in the next section. Even though
Python is not the fastest programming language, its simpliﬁed syntax helps in making
it more accessible than C# and C++ which are used by popular game engines such
as Unity 3 and Unreal Engine4 respectively. To inherently support cross-platform de-
velopment, NoteG uses PyGame 5, which is a collection of modules designed to write
video games. The top-level objects generated at run-time can be invoked later by a
user to implement custom scenarios.

2https://jupyter.org/
3https://unity.com/
4https://www.unrealengine.com
5https://www.pygame.org/

6

Figure 2. Sample test scenes implemented in NoteG (a) RPG game setup (b) Dungeon with multiple rooms
(c) Open world with enemies.

Figure 3. Loading assets from code blocks (left side) and getting started with a scene to work on (right
side).

3.2. Structure and Functionality

In order to demonstrate how Jupyter Notebooks can be used to enhance game proto-
typing, we have implemented custom classes and functions in NoteG. Speciﬁc function-
alities were selected so as to enable building a bare-bones RPG type game that can be
used for testing. In order to select the functions that make up the current command-
set we ﬁrst built basic prototypes for a number of popular 2D games like The classic
snake game and a few other pixel art games like Terraria. A few examples of simple
scenes generated while using the notebook are shown in Fig. 2. Table 1 presents the
API for the game engine wrapper which was used to generate these samples and its
functionality.

Further direct object manipulation which is described in detail in Section 3.3 in-
herently allows for hot-swapping public variables and functions of all in-game objects.
In case modiﬁcations to an object causes errors, the object is removed from the scene
with a traceback error message to prevent crashing the entire game while prototyping.
This task is performed by the error handler. A scene list keeps track of all objects in
the scene and can be used in cases when reference to the object is not maintained. A
number of utility functions can also be found in the codebase in addition to the ones
described in Table 1. These help improve the user experience and give more control
over the spawned components in the game. Using the hide() function allows the devel-
oper to hide a cell of the notebook from view to eﬀectively fold the code before sharing.
Beginners can also use block-based programming extensions like jigsaw7 which may

7https://jupyter4edu.github.io/jupyter-edu-book/jupyter.html

7

Functions
start game(w,h,c)

Table 1. API and functions implemented in NoteG that could be used to build a rapid game prototype.
Functionality
Starts a PyGame instance (only one at a given time)
based on the given width, height and window colour.
It also implements threading to add live support. This
method handles the creation of a thread and starts
the execution within it so that further execution is not
blocked and other cells can be executed.
Takes path to an image for tiling the entire map. The
codebase also implements another variant of this func-
tion to facilitate the creation of custom maps, this func-
tion takes a 2D array as a tilemap and sprites for the
ﬂoor and walls as parameters as shown in Fig. 2(b).

create map(s)

add trinket(trinket)

spawn enemy(sprite,x,y)

create player(name,sprite,x,y) Creates a player object with keyboard controls baked
in. The Character class which acts as a parent to this
object also adds support for collision detection and for
the addition of public variables like position and health
that can be modiﬁed on run-time.
Takes a Trinket() class object which could be a shape,
sprite or an image and adds it to the scene with back-
ground checks to handle any errors that might occur
later on as it is modiﬁed.
Adds an enemy based on logic implemented in Enemy()
class. The update function can be redeﬁned and param-
eters tweaked to test out various conﬁgurations, for ex-
ample, one could run the A* algorithm on the tilemap
for a better follow player logic 6. By default, the enemy
follows and ﬁres projectiles at the player.
Deﬁnes a random callback function which is called with
a probability of p with every update cycle. It can also
be further extended to trigger events in the game.
Enables the user to force the screen to reset to the base
state with only the player and tile-map in case an error
occurs which is not handled properly.

callback prob(function,p)

game.refresh scene()

be invoked to get familiar with Python. Other than these there are also a few sprite-
sheet management functions to facilitate cleaning and extracting images from image
ﬁles. A few custom functions were also added for illustration purposes and have been
described in documentation cells of the notebook.

3.3. Overview of Functions in NoteG

Functions in NoteG can be used for a wide genre of 2D games Fig. 2 shows a few
examples of these. The code block for starting a scene with loaded assets8 can be
seen in Fig. 3. We see that this contains the initial setup parameters required here
the display window size is speciﬁed. Fig. 2(a) shows an RPG scenario with a plain
texture repeated as the ground layer using the create map() function. The other two
screenshots depict a dungeon (Fig. 2(b)) as well as an open-world setup (Fig. 2(c))

8All assets used for illustration are obtained from https://opengameart.org/

8

respectively both of which have bounding walls and styled tiles deﬁned using a 2D
array that is passed as an optional argument while creating the map.

Once the game is started, the other required components can be added dynamically.
Fig. 3 shows how the create player() function can create a named player object for
future reference. Passing diﬀerent sprite sheets can change how the character looks,
helper functions auto-conﬁgure the animation system and movement system for the
player character.

Similarly, enemy characters can be added as shown in the last screenshot of Fig.
2(c), using the spawn enemy() function which is a modiﬁcation of the player function.
By default, the enemy is conﬁgured to use the A* algorithm and hunt down the player
but these parameters can be edited as per the user’s requirement. The object-oriented
structure makes it easy to swap out any of the default logic with custom functions as
shown in Fig. 4 and Fig. 5.

Fig. 4 illustrates how the properties of projectiles can be altered while the game is
still running. Error handlers ensure that any changes that may cause the game to crash
are dealt with by terminating only the problematic objects. Fig. 5 shows how game
mechanics that didn’t exist in the base implementation of NoteG can be easily added
by a user. Even users without much programming experience can do these using helper
extensions that can be enabled in the Notebook before invoking the same. Existing
classes and those provided by PyGame can also be modiﬁed as shown in Fig. 6 which
implements collectables.

3.4. Live Execution and Perks

The use of computational notebooks for game prototyping allows for quick testing and
cell-based execution. These cells allow one to write new code that can be executed
independently. In the context of game prototyping, this allows us to add to the func-
tionality of components that are already rendered at any point in the future. Further,
notebooks also make it easy to document the code and make it readable to other
developers.

Even though features like hot-swapping which allows us to replace code without
recompiling the full project already exist in popular game engines such as Unity.
However many of the novice game developers who we interacted with were not aware
of them which became apparent from our user survey (Section 4). An example of this
is shown in Fig. 4. These also require the user to follow a particular paradigm so that
their code can support the feature.

Getting used to such workﬂows which are directly available due to the class-based
background implementations in NoteG may help make novice game developers aware
and adopt these design practices when they switch to the development stage. Fig. 5
depicts one of the run-time modiﬁcations on the projectile class created by a volunteer
in the user survey.

3.5. Modularity and Shareability

The current design of NoteG inherently introduces classes, objects and functions and
how they can be used to build reusable components. Since NoteG is written as a
wrapper on PyGame, developers can easily make and append modules to NoteG for
implementing features that they commonly use. Some examples are splash screens
and collectable objects which can be created as per the developer’s requirement. An

9

Figure 4. Hot swapping properties of the bullet object to change from state 1 to 3 using NoteG while the
game is running to demonstrate the use of live code in-game prototypes.

example of how the Trinket class in NoteG can be extended to work as an in-game
collectable at run-time with minimal code is shown in Fig. 6. New components can
also be added programmatically while testing, like the ”enemy skeletons” as shown in
Fig. 2(c).

Another feature that has led to the growth in popularity of notebooks in a wide
variety of domains is the ease of shareability of live code (J. Wang, Li, & Zeller,
2020). Collaboration is a key part of the game development cycle and can signiﬁcantly
impact the direction of the game (Whitson, 2018). Notebooks make it much easier
than the traditional practices to share the prototypes with others who might not be
very technically inclined but would like to retain the ability to test various situations
in the game.

Game development is often a collaborative project. For this reason, game prototypes
often have to be shared with other co-developers and reviewers. While sharing, packing

10

Figure 5. Tweaking behaviour by updating member functions to form a projectile shield as implemented by
a volunteer in the user survey.

game features as live code within a notebook can enable easy tweaking without any
additional eﬀort from the developer. This is essential in ensuring the simplicity of the
review process.

4. Evaluation

In line with the literature currently available, NoteG has also been evaluated through a
questionnaire-based user survey (Lu et al., 2014; N´u˜nez-Valdez, Garc´ıa-D´ıaz, Lovelle,
Achaerandio, & Gonz´alez-Crespo, 2017). The survey was targeted at novice game de-
velopers most of whom were at the high school and undergraduate levels. It should
be noted that the participants were novice Python programmers with less than six
months of experience in game development. It consisted of 11 questions 4 of which
were aimed at gathering demographic information of the participants and the rest of

11

Figure 6. Adding a collectable type object by extending the Trinket class to demonstrate modularity and
scope of expansion.

the questions were 5 point Likert scale-based and aimed at understanding the per-
ception of NoteG among the volunteers. The questionnaire asked volunteers about
their awareness of hot-swapping like features in other game engines and their experi-
ence with game development and prototyping. We also enquired if they felt that using
NoteG made game prototyping faster and collected feedback on implemented features.
The full questionnaire and survey data can be found in the footnote9.

The majority of the participants (55%) belonged to the 20-29 age group while the
rest are 15-19 years old. Out of the 18 volunteers, 66.7% are male and 33.3% are
female. 50% of the participants had prior experience with building games, whereas a
majority of the rest are in the process of learning game development. Out of these,
only 33.4% had exposure to game prototyping. All the volunteers were given detailed
documentation of the command-set and explained about the working of NoteG, a
tutorial on setting up Jupyter Notebook and getting started with the tool is also

9Survey Data: https://dataosf.page.link/NoteG

12

Figure 7. Results of user survey: the 5-point Likert Scale scores were converted into 3 brackets (High, Medium
and Low).

provided. Participants were asked to try out the tool on their own by building simple
prototypes and sharing them with us. The 5-point Likert scale data from the user
survey was recorded as shown in Fig. 7. Correlation analysis was conducted and since
the Likert scale data is ordinal, we used Spearman correlation for ﬁnding the required
correlation coeﬃcients.

Of the people who responded to the survey around 60% had prior exposure to game
development while only 55% had a basic or decent understanding of game prototyping.
From the survey responses, we found a signiﬁcant moderate positive correlation (level
of signiﬁcance = 0.01) between a person’s level of exposure to game development and
his/her level of understanding of game prototyping. Also, such a person is more aware
of hot swapping and this correlation was positive and signiﬁcant at a 0.05 level of
signiﬁcance. 66% of the respondents considered game prototyping using NoteG to be
easy or very easy and 50% of those who are learning game development consider using
NoteG for prototyping to be easy. Most of the respondents of the survey were of the
opinion that using NoteG makes game prototyping less time-consuming.

55% of the respondents expressed that they are likely to use such computational
notebooks in the future. Further, a majority of the users who have developed games
before stated that they would use computational notebooks for game prototyping
in their future projects. When it comes to recommending NoteG the response was
positive with a net promoter score of 66 (assuming those responding as “moderately
likely” and “highly likely” as promoters and the rest as detractors). It was observed
that 50% or more respondents who are learning game development are highly likely
to recommend NoteG to their peers.

5. Discussion and Future Work

The computational notebook NoteG is developed as an example of how such notebooks
can be used for game prototyping which has not been explored in the current literature

13

Another way to improve the current implementation would be by supporting a wider
variety of games and by adding embeddable workﬂows that can help users to streamline
the prototyping process through direct integrations with existing game engines.

Considering the popularity of computational notebooks among data scientists and
machine learning practitioners, we plan on extending the scope of our work taking
inspiration from toolkits like Gym 10 which helps to develop and compare ML algo-
rithms. The ability of agents to interact with environments in Gym could be exploited
to enable easy training and testing of Non-Player Character AI’s within the proto-
typing tool itself. This would take the tool closer to our ideal of enabling upcoming
developers to dynamically introduce and test game object interactions at run-time
with ease.

Python is well suited for making notebooks beginner-friendly however it is not the
fastest programming language. This can become a limitation for complicated games
that might require more resources and faster compilation. There is also scope for mod-
ifying the user interface of NoteG and the implemented command set. The ﬂexibility
oﬀered in this regard could be used to tune the tool for speciﬁc use cases.

The evaluation could be further extended by including a wider demographic with
varied levels of experience and performing a controlled study on the beneﬁts of using
this approach over other options for beginners. The reasons for which Notebooks be-
came popular in the domain of data science could still hold true for game development
and help make game development more accessible to practitioners in other domains.
Future research would be required to improve upon the ways in which computational
notebooks can aid game prototyping in more complex development workﬂows.

6. Conclusion

In this paper, we use computational notebooks as a tool to facilitate rapid game pro-
totyping and propose NoteG for prototyping 2D games. It is an interactive run-time
based environment where developers can edit and run code snippets to immediately
observe the changes towards testing and tweaking game parameters. We explore how
NoteG can be used to simplify the process of prototyping and simplify sharing live
game code without a steep learning curve. This could be particularly useful in situ-
ations where game prototyping is used to teach computer science concepts and also
to novice game developers who wish to learn to code. NoteG has cross-platform com-
patibility and supports hot swapping for variables, assets and in-game behaviours of
game objects created through its API.

We plan to extend NoteG to support play-testing and prototyping of a larger variety
of games in future iterations. This approach towards game prototyping aims to make
it appealing to novice game developers, while also giving the user creative freedom and
an ability to explore without worrying about the underlying technicalities and rather
encouraging focus on the ideas and feasibility. The use of computational notebooks for
rapid prototyping thus has its own merits and is an area that should be explored and
tested further in diﬀerent development environments.

10https://gym.openai.com/docs/

14

Acknowledgment(s)

The authors would like to thank the student volunteers and those who shared the
prototypes they developed using NoteG for their time and feedback, which was used
to improve the base implementation.

Disclosure statement

No potential conﬂict of interest was reported by the authors.

Notes on contributor(s)

Noble Saji Mathews is a B.Tech student in the Department of Chemical Engi-
neering at Indian Institute of Technology Tirupati. He has a keen interest in software
engineering research and development dealing with Education Technology and Human
Computer Interaction. His projects mostly deal with tools and visualizations that aid
novice developers or seek to address key issues.
Sridhar Chimalakonda is an Assistant Professor in the Department of Computer
Science & Engineering at IIT Tirupati, India. He received his PhD and MS by Research
in Computer Science & Engineering from International Institute of Information Tech-
nology - Hyderabad, India. He leads the Research in Intelligent Software and Human
Analytics (RISHA) Lab which primarily works in the area of Software Engineering,
and speciﬁcally towards empirically and qualitatively assessing quality, reuse, architec-
ture and evolution of a broad range of software systems (such as mobile, web, games
and so on). He is passionate about the massive potential of technology for improving
the quality of education and automation in educational technologies.

References

Aycock, J., Pitout, E., & Storteboom, S.

(2015). A game engine in pure python for cs1:
Design, experience, and limits. In Proceedings of the 2015 acm conference on innovation and
technology in computer science education (p. 93–98). New York, NY, USA: Association for
Computing Machinery. Retrieved from https://doi.org/10.1145/2729094.2742590
Baldassarre, M. T., Caivano, D., Romano, S., Cagnetta, F., Fernandez-Cervantes, V., & Strou-
lia, E. (2021). Phydslk: a model-driven framework for generating exergames. Multimedia
Tools and Applications, 1–25.

Blow, J. (2004, February). Game development: Harder than you think: Ten or twenty years ago
it was all fun and games. now it’s blood, sweat, and code. Queue, 1 (10), 28–37. Retrieved
from https://doi.org/10.1145/971564.971590

Bomstr¨om, H., Kelanti, M., Lappalainen, J., Annanper¨a, E., & Liukkunen, K. (2020). Syn-
chronizing game and ai design in pcg-based game prototypes. In International conference
on the foundations of digital games (pp. 1–8).

Borg, M., Garousi, V., Mahmoud, A., Olsson, T., & St˚alberg, O. (2019). Video game devel-
opment in a rush: A survey of the global game jam participants. IEEE Transactions on
Games, 12 (3), 246–259.

Chatham, A., Walmink, W., & Mueller, F. (2013). Unojoy! a library for rapid video game
In Chi ’13 extended abstracts on human factors in comput-
prototyping using arduino.
ing systems (p. 2787–2788). New York, NY, USA: Association for Computing Machinery.
Retrieved from https://doi.org/10.1145/2468356.2479512

15

Chu, H.-C., & Hung, C.-M.

(2015). Eﬀects of the digital game-development approach on
elementary school students’ learning motivation, problem solving, and learning achievement.
International Journal of Distance Education Technologies (IJDET), 13 (1), 87–102.

Cooper, K. M., & Longstreet, C. S. (2012). Towards model-driven game engineering for serious
educational games: Tailored use cases for game requirements. In 2012 17th international
conference on computer games (cgames) (pp. 208–212).

Corno, F., De Russis, L., & S´aenz, J. P. (2019). Towards computational notebooks for iot de-
velopment. In Extended abstracts of the 2019 chi conference on human factors in computing
systems (p. LBW0154).

Dalal, N.

(2012). Teaching tip: Using rapid game prototyping for exploring requirements

discovery and modeling. Journal of Information Systems Education, 23 (4), 129.

Devadiga, N. M. (2017). Tailoring architecture centric design method with rapid prototyping.
In 2017 2nd international conference on communication and electronics systems (icces)
(p. 924-930).

Granger, B., & P´erez, F. (2021). Jupyter: Thinking and storytelling with code and data.

Authorea Preprints.

Gray, D., Brown, S., & Macanufo, J.

(2010). Gamestorming: A playbook for innovators,

rulebreakers, and changemakers. ” O’Reilly Media, Inc.”.

G¨unther, S., M¨uller, F., H¨ubner, F., M¨uhlh¨auser, M., & Matviienko, A. (2021). Actuboard: An
open rapid prototyping platform to integrate hardware actuators in remote applications. In
Companion of the 2021 acm sigchi symposium on engineering interactive computing systems
(p. 70–76). New York, NY, USA: Association for Computing Machinery. Retrieved from
https://doi.org/10.1145/3459926.3464757

Hmeljak, D., & Zhang, H. (2020). Developing a computer graphics course with a game devel-
opment engine. In Proceedings of the 2020 acm conference on innovation and technology in
computer science education (pp. 75–81).

Hmeljak, D. M., & Zhang, H. (2020). Developing a computer graphics course with a game de-
velopment engine. In Proceedings of the 2020 acm conference on innovation and technology
in computer science education (p. 75–81). New York, NY, USA: Association for Computing
Machinery. Retrieved from https://doi.org/10.1145/3341525.3387428

Iosup, A., & Epema, D. (2014). An experience report on using gamiﬁcation in technical higher
education. In Proceedings of the 45th acm technical symposium on computer science edu-
cation (p. 27–32). New York, NY, USA: Association for Computing Machinery. Retrieved
from https://doi.org/10.1145/2538862.2538899

Kasahara, R., Sakamoto, K., Washizaki, H., & Fukazawa, Y. (2019). Applying gamiﬁcation to
motivate students to write high-quality code in programming assignments. In Proceedings
of the 2019 acm conference on innovation and technology in computer science education
(p. 92–98). New York, NY, USA: Association for Computing Machinery. Retrieved from
https://doi.org/10.1145/3304221.3319792

Kletenik, D., & Sturm, D. (2018). Game development with a serious focus. In Proceedings of the
49th acm technical symposium on computer science education (p. 652–657). New York, NY,
USA: Association for Computing Machinery. Retrieved from https://doi.org/10.1145/
3159450.3159588

Kluyver, T., Ragan-Kelley, B., P´erez, F., Granger, B. E., Bussonnier, M., Frederic, J., . . . oth-
ers (2016). Jupyter notebooks-a publishing format for reproducible computational work-
ﬂows. In Elpub (pp. 87–90).

Knuth, D. E. (1984). Literate programming. The Computer Journal , 27 (2), 97–111.
K¨olling, M., Brown, N. C., & Altadmri, A. (2015). Frame-based editing: Easing the transition
from blocks to text-based programming. In Proceedings of the workshop in primary and
secondary computing education (pp. 29–38).

Kurkovsky, S. (2009, March). Engaging students through mobile game development. SIGCSE

Bull., 41 (1), 44–48. Retrieved from https://doi.org/10.1145/1539024.1508881

Lau, S., Drosos, I., Markel, J. M., & Guo, P. J. (2020). The design space of computational
notebooks: An analysis of 60 systems in academia and industry. In 2020 ieee symposium

16

on visual languages and human-centric computing (vl/hcc) (pp. 1–11).

Lo, C. K., & Hew, K. F. (2020). A comparison of ﬂipped learning with gamiﬁcation, traditional
learning, and online independent study: the eﬀects on students’ mathematics achievement
and cognitive engagement. Interactive Learning Environments, 28 (4), 464–481.

Lu, W., Sun, C., Bleeker, T., You, Y., Kitazawa, S., & Do, E. Y.-L. (2014). Sensorendipity: A
real-time web-enabled smartphone sensor platform for idea generation and prototyping. In
Proceedings of the second international symposium of chinese chi (p. 11–18). New York, NY,
USA: Association for Computing Machinery. Retrieved from https://doi.org/10.1145/
2592235.2592238

Manker, J. (2011). Game prototyping–the negotiation of an idea. In Digra conference: Think,

design, play (pp. 14–17).

Marchisio, M., Margaria, T., & Sacchet, M.

(2020). Automatic formative assessment in
computer science: Guidance to model-driven design. In 2020 ieee 44th annual computers,
software, and applications conference (compsac) (pp. 201–206).

Marklund, B. B., Engstr¨om, H., Hellkvist, M., & Backlund, P. (2019). What empirically based
research tells us about game development. The Computer Games Journal , 8 (3-4), 179–198.
Mashuri, C., et al. (2021). Developing indonesian learning game applications for elementary
school students using the prototyping method. Turkish Journal of Computer and Mathe-
matics Education (TURCOMAT), 12 (4), 918–928.

M¨uller, L., Pfeuﬀer, K., Gugenheimer, J., Pﬂeging, B., Prange, S., & Alt, F. (2021). Spa-
tialproto: Exploring real-world motion captures for rapid prototyping of interactive mixed
reality. In Proceedings of the 2021 chi conference on human factors in computing systems
(pp. 1–13).

Murphy-Hill, E., Zimmermann, T., & Nagappan, N. (2014). Cowboys, ankle sprains, and
keepers of quality: How is video game development diﬀerent from software development? In
Proceedings of the 36th international conference on software engineering (pp. 1–11).

Musil, J., Schweda, A., Winkler, D., & Biﬄ, S. (2010). Synthesized essence: What game jams
teach about prototyping of new software products. In Proceedings of the 32nd acm/ieee
international conference on software engineering - volume 2 (p. 183–186). New York, NY,
USA: Association for Computing Machinery. Retrieved from https://doi.org/10.1145/
1810295.1810325

N´u˜nez-Valdez, E. R., Garc´ıa-D´ıaz, V., Lovelle, J. M. C., Achaerandio, Y. S., & Gonz´alez-
Crespo, R. (2017). A model-driven approach to generate and deploy videogames on multiple
platforms. Journal of Ambient Intelligence and Humanized Computing, 8 (3), 435–447.
Obaid, I., Farooq, M. S., & Abid, A. (2020). Gamiﬁcation for recruitment and job training:

model, taxonomy, and challenges. IEEE Access, 8 , 65164–65178.

O’Hara, K., Blank, D., & Marshall, J. (2015). Computational notebooks for ai education. In

The twenty-eighth international ﬂairs conference.

Pirker, J., Kultima, A., & G¨utl, C. (2016). The value of game prototyping projects for students
and industry. In Proceedings of the international conference on game jams, hackathons, and
game creation events (pp. 54–57).

Rahimi, F. B., & Kim, B. (2019). The role of interest-driven participatory game design: con-
sidering design literacy within a technology classroom. International Journal of Technology
and Design Education, 29 (2), 387–404.

Reyno, E. M., & Cars´ı Cubel, J. A. (2009, June). Automatic prototyping in model-driven
game development. Comput. Entertain., 7 (2). Retrieved from https://doi.org/10.1145/
1541895.1541909

Richard, G. T., & Kafai, Y. B. (2015). Making physical and digital games with e-textiles:
A workshop for youth making responsive wearable games and controllers. In Proceedings
of the 14th international conference on interaction design and children (p. 399–402). New
York, NY, USA: Association for Computing Machinery. Retrieved from https://doi.org/
10.1145/2771839.2771926

Rosenthal, S. B., Len, J., Webster, M., Gary, A., Birmingham, A., & Fisch, K. M. (2018).
Interactive network visualization in jupyter notebooks: visjs2jupyter. Bioinformatics, 34 (1),

17

126–128.

Rule, A., Tabard, A., & Hollan, J. D. (2018). Exploration and explanation in computational
notebooks. In Proceedings of the 2018 chi conference on human factors in computing systems
(p. 32).

Schaeﬀer, J. A., & Palmgren, M.

(2017). Visionary expectations and novice designers–

prototyping in design education. Design and Technology Education, 22 (1), n1.

Schulz, R., Smaradottir, B., Prinz, A., & Hara, T. (2020). User-centered design of a scenario-
IEEE Transactions on

based serious game: Game-based teaching of future healthcare.
Games, 12 (4), 376–385.

Siswati, B. H., Prihatin, J., Damayanti, A., Naﬁsah, L., et al. (2021). Developing gamiﬁcation
based biology learning materials for senior high school students in industrial agricultural
area in jember, indonesia. In Journal of physics: Conference series (Vol. 1839, p. 012021).
Soute, I., Vacaretu, T., Wit, J. D., & Markopoulos, P. (2017, August). Design and evaluation
of rapido, a platform for rapid prototyping of interactive outdoor games. ACM Trans.
Comput.-Hum. Interact., 24 (4). Retrieved from https://doi.org/10.1145/3105704
Steinglass, A., Franke, B., & Filman, S. (2017). App lab: A powerful javascript ide for rapid
prototyping of small data-backed web applications. In Proceedings of the 2017 acm sigcse
technical symposium on computer science education (pp. 641–642).

Subramanian, K., Saule, E., & Payton, J. (2020). Bringing real-world data, interactive games
and visualizations into early cs courses. In Proceedings of the 51st acm technical symposium
on computer science education (p. 1391). New York, NY, USA: Association for Computing
Machinery. Retrieved from https://doi.org/10.1145/3328778.3367011

Volkovas, R., Fairbank, M., Woodward, J. R., & Lucas, S. (2019). Mek: Mechanics prototyping
tool for 2d tile-based turn-based deterministic games. In 2019 ieee conference on games (cog)
(pp. 1–8).

Walden, J., Doyle, M., Garns, R., & Hart, Z. (2013). An informatics perspective on compu-
tational thinking. In Proceedings of the 18th acm conference on innovation and technology
in computer science education (pp. 4–9).

Wang, J., Li, L., & Zeller, A. (2020). Better code, better sharing: on the need of analyzing
jupyter notebooks. In Proceedings of the acm/ieee 42nd international conference on software
engineering: New ideas and emerging results (pp. 53–56).

Wang, T., & Kurabayashi, S. (2020). Sketch2map: a game map design support system allowing
quick hand sketch prototyping. In 2020 ieee conference on games (cog) (pp. 596–599).

Warfel, T. Z. (2009). Prototyping: a practitioner’s guide. Rosenfeld media.
Weber, J. H. (2021). Grapepress-a computational notebook for graph transformations. In

International conference on graph transformation (pp. 294–302).

Whitson, J. R. (2018). Voodoo software and boundary objects in game development: How
developers collaborate and conﬂict with game engines and art tools. new media & society,
20 (7), 2315–2332.

Zhang, Y., & Chen, J. (2021). Using design thinking in educational game design: A case
In International conference on blended learning

study of pre-service teacher experience.
(pp. 253–263).

Zhu, M., & Wang, A. I. (2019, November). Model-driven game development: A literature re-
view. ACM Comput. Surv., 52 (6). Retrieved from https://doi.org/10.1145/3365000

18

