2
2
0
2

t
c
O
7
1

]

Y
S
.
s
s
e
e
[

3
v
5
4
7
9
0
.
7
0
2
2
:
v
i
X
r
a

Benchmarking tools for a priori identiﬁability analysis

Xabier Rey Barreiro1, Alejandro F. Villaverde1,2
1 Universidade de Vigo, Department of Systems Engineering & Control, 36310 Vigo, Galicia, Spain

2 CITMAga, 15782 Santiago de Compostela, Galicia, Spain

emails: xabier.rey@uvigo.gal, afvillaverde@uvigo.gal

Abstract

The structural identiﬁability and the observability of a model determine the possibility of inferring its
parameters and states by observing its outputs. These properties should be analysed before attempting
to calibrate a model. Unfortunately, such a priori analysis can be challenging, since it requires symbolic
calculations that often have a high computational cost. In recent years a number of software tools have
been developed for this task, mostly in the systems biology community but also in other disciplines. These
tools have vastly diﬀerent features and capabilities, and a critical assessment of their performance is still
lacking. Here we present a comprehensive study of the computational resources available for analysing
structural identiﬁability. We consider 12 software tools developed in 7 programming languages (Matlab,
Maple, Mathematica, Julia, Python, Reduce, and Maxima), and evaluate their performance using a set
of 25 case studies created from 21 models. Our results reveal their strengths and weaknesses, provide
guidelines for choosing the most appropriate tool for a given problem, and highlight opportunities for
future developments.

1

Introduction

Mathematical modelling is an essential tool for describing the dynamics of natural and artiﬁcial systems.
In systems biology, model dynamics are often given by nonlinear ordinary diﬀerential equations (ODEs).
As these models typically have unknown parameters, it is necessary to determine their values by ﬁtting
the model to experimental data. This task, known as model calibration or parameter estimation [61],
can only be performed successfully if the model is identiﬁable. If some of the unknown parameters are
unidentiﬁable, their values cannot be determined by measuring the model output. Lack of identiﬁability
may lead to inaccurate inferences of mechanistically meaningful parameters, as well as to the inability
to make correct predictions of certain variables. In order to avoid such errors it is important to detect
unidentiﬁability and to identify its sources [39, 21, 17].

It is common to distinguish between structural and practical identiﬁability [65]. Structural identiﬁ-
ability is a theoretical property that is fully determined by the model equations, that is, it depends on
the system dynamics, the measurable outputs, and the admissible inputs [7]. It is also called a priori
identiﬁability, since it can be tested before performing experiments and collecting data. We note that
some authors consider a priori identiﬁability as a particular type of structural identiﬁability [65], while
others use both terms interchangeably [3]; in this paper we adopt the latter terminology. A related prop-
erty is observability, which is the possibility of inferring the internal state of a system from observations
of its outputs. By considering model parameters as constant state variables, a priori identiﬁability can
be recast as a particular case of observability [57]. When a model has structural unidentiﬁabilities, it
is due to inadequacies in its equations, such as the existence of Lie symmetries [52, 2, 33]. In order to
remove a structural unidentiﬁability it is necessary to modify the model equations, for example by repa-
rameterizing the ODEs or by enlarging the output function. In contrast, practical unidentiﬁabilities are
due to lack of suﬃciently informative experimental data, and they can be overcome by using alternative
or additional datasets for model calibration [67, 4]. Structural (a priori) identiﬁability is a prerequisite
for practical (a posteriori) identiﬁability. It is essential to analyse this property before attempting to
perform parameter estimation, since the ways of overcoming practical and structural unidentiﬁability are
diﬀerent. A further distinction can be made within structural identiﬁability, giving rise to two diﬀerent
properties: structural local identiﬁability (SLI) and structural global identiﬁability (SGI). A parameter
that has the SLI property can be uniquely inferred in a neighbourhood of its nominal value, but a ﬁnite
number of indistinguishable solutions may exist in the parameter space. In contrast, a parameter with
the SGI property has a unique solution in the whole parameter space.

Unfortunately, the a priori analysis of identiﬁability (and observability) is mathematically involved,
and it can be computationally challenging. It requires symbolic computations that quickly become very
costly even for models of moderate size. Hence, a number of methodologies have been developed for
its study, as well as specialised software tools. Two key papers [37, 11] provided an overview of the

1

 
 
 
 
 
 
state of the art in 2011: Miao et al [37] reviewed the theoretical foundations of practical and structural
identiﬁability analysis methods, and Chis et al [11] performed a computational comparison of structural
identiﬁability algorithms. At that time, only two software toolboxes were publicly available for this task:
DAISY [8] and GenSSI [10]; hence, Chis et al implemented a number of other approaches themselves.
In 2013, Raue et al compared DAISY with two other identiﬁability analysis tools that had been recently
presented [45]: the Exact Arithmetic Rank (EAR), implemented in Mathematica [22], and the Proﬁle
Likelihood (PL), which is a numerical technique for a posteriori analysis [46].

Since the publication of [45], a signiﬁcant number of software tools for structural identiﬁability analysis
have been presented, including the web app COMBOS [36], the Matlab toolboxes STRIKE-GOLDD [59],
GenSSI2 [25], ORC-DF [31], and rational ORC-DF or RORC-DF [53], the Maple toolboxes SIAN [19] and
ObservabilityTest (based on [51]), the Julia packages StructuralIdentiﬁability [16] and SIAN [19], and the
Python tool StrikePy [47]. However, an assessment of their relative strengths and witnesses is currently
lacking. Given their diﬀerent theoretical foundations, capabilities, and computational performances,
there is a clear need for their critical analysis and comparison. Some results in this direction were
presented in [19], where the performance of four tools for structural global identiﬁability analysis (DAISY,
COMBOS, GenSSI, and SIAN) was compared using six case studies.

In this article we address this need by performing a thorough comparison of the software tools
currently available for analysing structural identiﬁability and observability. We consider symbolic com-
putation methods, which perform said analyses a priori. We do not consider numerical approaches, such
as the aforementioned PL [46] or sensitivity-based methods [54], which perform a posteriori analyses of
identiﬁability and can complement the techniques reviewed here [65]. Thus, we have evaluated twelve
diﬀerent tools, available in seven diﬀerent environments: Matlab, Maple, Mathematica, Julia, Python,
Reduce, and web-based applications. To evaluate their performance we use a total of 25 variants of 21
basic models, of diﬀerent sizes and complexities, taken from the systems biology literature. We discuss
the strengths and weaknesses of each tool, and provide guidelines for choosing the most appropriate tool
for a given problem. Our results represent the most comprehensive, up-to-date study of the available
tools for structural identiﬁability analysis.

2 Methods

2.1 Background on structural identiﬁability and observability

We consider dynamic models described by ordinary diﬀerential equations in state space form:

Σ =






˙x = f (t, x(t), u(t), θ, w(t)),
y(t) = h(x(t), u(t), θ, w(t)),
x(0) = x0(θ)

(1)

where x(t) ∈ Rn is a vector of state variables, y(t) ∈ Rm is a vector of outputs or measurements,
u(t) ∈ Rq is the vector of known inputs, w(t) ∈ Rqw is the vector of unknown inputs, and θ ∈ Rp is
the unknown parameter vector. Initial conditions may be functions of unknown parameters, or generic
unknown values. We write individual parameters and state variables with subindices (i.e. θi, xi), and
we denote as y(t, θ∗) the output of a model Σ for a speciﬁc parameter vector θ∗.

2.1.1 Deﬁnitions

Many deﬁnitions of a priori identiﬁability can be found in the literature. They describe similar properties
with subtle diﬀerences among them. For a detailed account of said deﬁnitions and their nuances we refer
the interested reader to [3]. In what follows we provide only brief descriptions of these concepts, which
we attempt to keep as simple as possible.

Roughly speaking, a dynamic model of the form (1) is said to be observable if its current state vector
x(t) can be determined from knowledge of the future values of the output y(t) and input functions u(t) in
ﬁnite time. Likewise, it is identiﬁable if its parameter vector θ can be determined from the output y(t) and
input functions u(t) in ﬁnite time. It is common to distinguish between local and global identiﬁability.

Deﬁnition 2.1 Structural Local Identiﬁability: a parameter θi of a dynamic model Σ is structurally
locally identiﬁable (SLI) if, for almost all possible parameter vectors and almost all initial conditions,
there is a neighbourhood N (θ∗) in which the equality y(t, ˜θ) = y(t, θ∗) holds if and only if ˜θi = θ∗
i .

Deﬁnition 2.2 Structural Global Identiﬁability: a parameter θi of a dynamic model Σ is structurally
globally identiﬁable (SGI) if, for almost all possible parameter vectors and almost all initial conditions,
the equality y(t, ˜θ) = y(t, θ∗) holds if and only if ˜θi = θ∗
i .

Note that SGI parameters are also SLI. For a SLI parameter there is a ﬁnite number of solutions, while
for a SGI parameter there is a unique solution. If the above conditions do not hold, the parameter is
structurally unidentiﬁable (SU). A model is said to be SGI (respectively, SLI) if all its parameters are
SGI (resp., at least SLI). If it has at least one SU parameter, the model is called SU.

2

Likewise, we could provide local and global deﬁnitions of the observability of the system states.
Nevertheless, the theory of observability of nonlinear systems was originally developed in a diﬀerential
geometric framework [18] as a local property, and it is therefore common to consider observability only
from a local point of view. Hence we use the following deﬁnition:
Deﬁnition 2.3 Observability: a state variable xi(τ ) is observable if, for almost all possible parameter
vectors and almost all initial conditions, there is a neighbourhood N (θ∗) in which the equality y(t, ˜x(τ )) =
y(t, x∗(τ )) holds if and only if ˜xi(τ ) = x∗

i (τ ).

2.1.2 The diﬀerential geometry approach

Structural local identiﬁability can be analysed with a diﬀerential geometric approach, which is based on
evaluating the Observability Rank Condition (ORC). Before deﬁning the ORC we need to deﬁne the
property that it assesses, i.e. the local weak observability:
Deﬁnition 2.4 Local weak observability [18]. Let U be an open subset in Rn, and let indistinguishability
be an equivalence relation on Rn. We denote as I(x0, U ) all points xi ∈ U that are indistinguishable from
x0. The system Σ is locally weakly observable at x0 if I(x0, V ) = x0 for every open neighbourhood V of
x0 contained in U .

According to the above deﬁnition, Σ is locally weakly observable if it is possible to distinguish each
state vector from its neighbours. Local weak observability is a property of the states; however, it can also
be applied to the parameters by considering them as constant state variables, i.e. with zero dynamics
[57]. In this view, a SLI parameter is a weakly locally observable state and this approach can be used to
test whether a parameter is SLI.

Before deﬁning the ORC we need a few more mathematical preliminaries. Let Lv(φ)(x) :=< dφ, v >
denote the diﬀerentiation of an inﬁnitely diﬀerentiable function φ on Rn by a vector ﬁeld v on Rn [1],
where dφ is the gradient of φ and ¡¿ the scalar product. We denote by Φ(t, x) the ﬂow of a vector ﬁeld
v on Rn. The Taylor series of φ(Φ(t, x)) with respect to t are called Lie series and are given by:

φ(Φ(t, x)) =

∞
(cid:88)

k=0

tk
k!

Lk

v(φ)(x)

Let (cid:37) denote the space spanned by Lq

f hi at x0 for q ≥ 0 and i = 1, .., m, for all vector ﬁelds f (x, u).
The space spanned by the gradients of the elements of (cid:37) is deﬁned by d(cid:37) = spanRx {dφ :
φ ∈ (cid:37)},
where Rx indicates the ﬁeld of meromorphic functions on Rn. In certain contexts, d(cid:37) is known as the
observability matrix, O(x), and its dimension determines the local weak observability property. Thus,
the observability – and therefore the structural local identiﬁability – of a model can be tested with the
following theorem:

Theorem 2.1 Observability Rank Condition (ORC) [18]: if the system Σ (1) satisﬁes rank(O(x0)) = n,
then it is locally weakly observable around x0.

2.1.3 The diﬀerential algebra approach

Structural global identiﬁability can be tested with a diﬀerential algebra approach. It relies on ﬁnding
Importantly,
algebraic equations that relate the model parameters with the inputs and outputs [28].
this approach introduces a restriction on the class of systems that can be analysed:
instead of being
applicable to general nonlinear ODE systems of the form (1), it requires that the ODE functions are
rational. The same restriction is shared by other methods, as will be detailed in Section 2.2.
Deﬁnition 2.5 Let C N
u [0, T ] denote the function space expanded by all inputs on [0, T ] which have con-
tinuous derivatives up to the order N. The system Σ is said to be algebraically identiﬁable if a meromorphic
function exists,

Φ = φ(θ, u, ˙u, ..., u(k), y, ˙y, ..., y(k)), Φ ∈ Rp,
which can be derived from a ﬁnite number of diﬀerentiation or algebraic calculation steps, so that the

following equations, Φ = 0 and det
dense subset of Θ × M × C N
of u, and ˙y, ..., y(k) the derivatives of y.

∂Φ
∂θ

(cid:54)= 0, hold in the time range [0, T ], for all (θ, x0, u) in an open and
u [0, T ]. Here, k denotes a positive integer and ˙u, ..., u(k) are the derivatives

Diﬀerential algebra methods replace the equations 1 of the system Σ by a set of m + n polynomial
diﬀerential equations that depend only on the variables (y, u), i.e., they rewrite Σ in implicit form [49].
These diﬀerential equations, known as the characteristic set, preserve the dynamics of the model output
while eliminating the state variables from the equations; they are obtained by applying Ritt’s diﬀerential
algebra [48]. A unique representation of the input-output relation of the system can be obtained by
normalising its coeﬃcients so as to yield a monic polynomial. The resulting functions constitute the
exhaustive summary of the model [63]. A vector c(θ) is an exhaustive summary of a model if it only
contains the information about θ that can be inferred from u(t) and y(t). Checking the injectivity of the
map c(θ) amounts to to assessing the identiﬁability of the model. Several methods can be used for this
task.

3

2.2 Overview of tools for analysing structural identiﬁability and ob-
servability a priori

Despite the signiﬁcant progress that has taken place in the last decade, structural identiﬁability analysis
is still a challenging subject in systems biology. There are several theoretical approaches and a growing
number of tools, none of which is suited for the whole range of nonlinear ODE models developed in
this area. In this section, we will outline those symbolic methods that have publicly available software
implementations. They are listed in table 1, and their release timeline is shown in Figure 1.

Table 1: Software tools evaluated in this work. All tools are in principle capable of testing for local identiﬁ-
ability. The “Features” columns indicate which methods are capable of the following tasks: analysing global
identiﬁability (“Global”), ﬁnding the Lie symmetries in the model equations (“Symmetries”), testing for
speciﬁc initial conditions (“ICs”), considering models with unknown inputs (“Unknown in”), ﬁnding iden-
tiﬁable model reparameterizations (“Reparamet”), analysing non-rational models (“Nonrational”), ﬁnding
identiﬁable parameter combinations (“Combin”), and calculating the number of solutions (“# solutions”).

Tool

Ref. Web

ObservabilityTest

EAR

STRIKE-GOLDD
(FISPO)
STRIKE-GOLDD
(ProbObsTest)
StrikePy

RORC-DF

GenSSI2
SIAN v1.5 (Maple)

[51]

[22]

[59]

[14]

[47]

[53]

[25]

[19]

SIAN v1.1.1 (Julia)

[19]

https://github.com/
sedoglavic/ObservabilityTest
http://www.fcc.chalmers.se/
software/other-software/
identifiabilityanalysis/
https://github.com/
afvillaverde/strike-goldd

https://github.com/
afvillaverde/strike-goldd

https://pypi.org/project/
StrikePy/
https://eng.ox.ac.uk/
non-lineardynamics/
resources

https://github.com/
genssi-developer/GenSSI
https://github.com/
pogudingleb/SIAN
https://github.com/
pogudingleb/SIAN

Matlab

Matlab

Python

Matlab

Matlab

Maple

Julia

DAISY
COMBOS

Structural-
Identiﬁability
v0.3.0

[8]
[36]

[16]

https://daisy.dei.unipd.it/
http://biocyb1.cs.ucla.edu/
combos/

https://github.com/SciML/
StructuralIdentifiability.jl

Reduce
Maxima
(web app)
Julia

Features

n
i

n
w
o
n
k
n
U

s
C
I

l
a
b
o
l
G

s
e
i
r
t
e
m
m
y
S

(cid:51)

Language

Maple

Mathematica

(cid:51) (cid:51)

l
a
n
o
i
t
a
r
n
o
N

s
n
o
i
t
u
l
o
s

#

n
i
b
m
o
C

t
e
m
a
r
a
p
e
R

(cid:51)

(cid:51)

(cid:51)

(cid:51)

(cid:51) (cid:51) (cid:51)

(cid:51) (cid:51)

(cid:51)

(cid:51)

(cid:51)

(cid:51)

(cid:51)
(cid:51)

(cid:51)

(cid:51)

(cid:51)

(cid:51)
(cid:51)

(cid:51)

(cid:51)

(cid:51)

(cid:51)
(cid:51) (cid:51)

(cid:51)

The tools considered in this work can be classiﬁed in two broad classes, depending on their approach
(diﬀerential geometry or diﬀerential algebra), although some of them have elements of both – for exam-
ple, the generating series approach implemented in GenSSI. Furthermore, other conceptual diﬀerences
must also be taken into account, since not all tools provide the same features. For example it was al-
ready mentioned that some methods – in fact, most of them – are only applicable to rational models.
Likewise, some algorithms allow the deﬁnition of speciﬁc initial conditions, while others do not. Another
diﬀerence is the possibility of considering models with unknown inputs. Finally, some software tools go
beyond structural identiﬁability and observability analysis, informing about the existence of symmetries,
identiﬁable parameter combinations, or model reparameterizations.

In the remainder of this section we describe these tools brieﬂy from a conceptual viewpoint. Then,

we evaluate their computational performance in Section 3.

4

Figure 1: Release dates of the software toolboxes analysed in this paper. Structural global identiﬁability
tools are displayed over the time line, structural local identiﬁability tools under the time line. For one tool
(GenSSI) the years of two main releases are shown, due to the substantial diﬀerences between them. For the
remaining tools, only the ﬁrst public release is considered.

2.2.1 DAISY

DAISY (Diﬀerential Algebra for Identiﬁability of SYstems) was the ﬁrst symbolic computation tool
presented for the analysis of structural global identiﬁability [8].
It is a diﬀerential algebra software
written in REDUCE version 3.8, a free symbolic language. Its algorithm [49] is based on the concept
of characteristic set of the ideal generated by the polynomials deﬁning the model. The main idea is to
write the input-output relation of the system in implicit form, i.e. as a set of m polynomial diﬀerential
equations in the variables (y, u), eliminating the dependence on x. After ranking the model variables,
the characteristic set of the diﬀerential ideal is computed with Ritt’s pseudodivision algorithm [48].
This yields diﬀerential equations whose coeﬃcients depend on the parameter vector θ. To analyse the
structural identiﬁability of the model it is necessary to normalise each of the equations, making it monic.
This family of new functions is deﬁned as the exhaustive summary c(θ), which encapsulates the parameter
dependence of the output and whose injectivity c(θ) has to be checked. In DAISY, the system of algebraic
nonlinear equations c(θ) is solved by the Buchberger algorithm [9]. This calculates the Gr¨obner basis of
the system, which provides the number of solutions for each parameter.

2.2.2 COMBOS

COMBOS is a web-based application [36] for structural global identiﬁability analysis that uses the com-
puter algebra system Maxima. It presents two main developments with respect to DAISY. On the one
hand, it provides an installation-free way of analysing structural identiﬁability. On the other hand,
it goes beyond the capabilities of DAISY [35, 34] by providing as additional information the simplest
globally identiﬁable combinations of the unidentiﬁable parameters. For locally identiﬁable parameters,
COMBOS determines the maximum number of local solutions.

DAISY and COMBOS diﬀer in the way in which they handle initial conditions. A model that is in
principle identiﬁable for generic initial conditions might be unidentiﬁable for certain initial conditions
from which it is not accessible [50]. If we provide speciﬁc initial conditions, the results of both software
tools are consistent if the system is accessible from those initial conditions, but they may diﬀer in case
of inaccessibility. This is because COMBOS, unlike DAISY, does not consider all possible inaccessible
cases.

2.2.3 SIAN

SIAN (Structural Identiﬁability ANalyser) is an open-source software tool for structural global iden-
tiﬁability analysis. It combines diﬀerential algebra methods with the Taylor series approach [20, 19].
SIAN creates a map that binds the parameter values and initial conditions to output functions. By
replacing the latter with truncations of their Taylor series, the map is reduced to another map between

5

2007    2008    2009    2010    2011    2012    2013    2014    2015    2016    2017    2018    2019    2020    2021    2022LocalDAISYGenSSIGenSSI 2.0COMBOSSIANStructuralIdentifiability.jlObservabilityTestEARRORC-DFSTRIKE-GOLDDStrikePyGlobalﬁnite-dimensional spaces. To this end, SIAN determines the order of truncation that contains enough in-
formation for the identiﬁability analysis. The result is correct with a given probability, which is estimated
within the algorithm.

SIAN is available in three implementations: as Maple code, as Julia code, and as a web app in the
Maple Cloud server. In the present study we have focused on assessing the performance of the Maple
and Julia implementations, after some preliminary tests showed that the web application is less eﬃcient.

2.2.4 StructuralIdentiﬁability

StructuralIdentiﬁability [16] is the most recent tool for analysing structural global identiﬁability. While
if follows a similar approach as the tools described above, it includes advances with respect to DAISY
and COMBOS in the computation of the injectivity test, which is performed in a probabilistic way that
increases its eﬃciency. StructuralIdentiﬁability.jl is a package implemented in the Julia language as a
part of SciML ecosystem, an open source software for scientiﬁc machine learning.

2.2.5 GenSSI

GenSSI (Generating Series for testing Structural Identiﬁability) is a software toolbox for structural global
identiﬁability analysis implemented in Matlab. It was originally presented in [10], and a substantially new
implementation (GenSSI 2.0) appeared in [25]. Its algorithm combines the generation series approach
with the so-called identiﬁability tableaus. The generating series approach resembles the power series
expansion [42], which is based on the idea that the Taylor series expansions of the output functions
include all the information that is relevant for analysing identiﬁability. Instead of expanding the output
functions by Taylor series, GenSSI computes symbolically the successive Lie derivatives of the output
functions with respect to parameters and states [63]. In this way an exhaustive summary is obtained,
and from its injectivity the parameter identiﬁability can be established. In addition, GenSSI provides
identiﬁability tableaus [6] as a means of determining the number of solutions visually, which is helpful
for classifying a parameter as SLI or SGI.

2.2.6 ObservabilityTest

ObservabilityTest is a Maple tool for analysing structural local identiﬁability of rational models.
It
implements the probabilistic algorithm presented in 2002 by Sedoglavic [51], which aims at evaluating
the observability rank criterion (ORC) eﬃciently, i.e. in bounded polynomial time. To this end, it avoids
the need to compute the Lie derivatives symbolically when building the observability matrix, calculating
instead the ﬁrst terms of a power series expansion and specialising the variables on random integers.
Furthermore, when the model is unobservable the power series approach searches for the Lie symmetries
that cause the unobservability.

Since this algorithm is the fastest way of assessing structural local identiﬁability in rational models, it
has been implemented not only in the author’s ObservabilityTest (Maple) but also in the aforementioned
StructuralIdentiﬁability.jl (Julia), in EAR (Mathematica), and STRIKE-GOLDD (Matlab).

2.2.7 EAR

The Exact Arithmetic Rank (EAR), also known as IdentiﬁabilityAnalysis, is a Mathematica application
for structural local identiﬁability analysis [22]. At its core lies an implementation of the probabilistic
semi-numerical algorithm introduced by Sedoglavic in [51] (which was later implemented in the Maple
tool ObservabilityTest).

As an enhancement over ObservabilityTest, EAR can consider either generic initial conditions (using
the “observability analysis” function, which treats parameters as constant states) or initial conditions
specialised to some numerical value (using the “identiﬁability analysis” function). Furthermore, EAR
provides functions for ﬁnding certain Lie point symmetries in the model, and to compute the minimal
output sets for achieving identiﬁability [2].

2.2.8 STRIKE-GOLDD

STRIKE-GOLDD [59](STRuctural Identiﬁability taKen as Extended-Generalized Observability with Lie
Derivatives and Decomposition) is a Matlab toolbox for analysing structural local identiﬁability analysis
with the diﬀerential geometry approach [59]. It provides features such as the search for Lie symmetries
and for identiﬁable reparameterizations [32], or the decomposition of large models to make them tractable.
STRIKE-GOLDD implements three algorithms: (1) FISPO, which is the most generally applicable,
being the only one that can analyse both non-rational models and models with unknown inputs [62]. (2)
ProbObsTest [14], which implements Sedoglavic’s algorithm for analysing rational models. With respect
to the other implementations in Maple and Mathematica, it presents two developments that enlarge the
class of models that it can analyse: on the one hand, it can analyse models with unknown inputs (similarly
to RORC-DF); on the other hand, it can automatically transform models with logarithmic, trigonometric,

6

and exponential functions into rational models. (3) ORC-DF, which was originally developed by [31].
In this study we have evaluated the ﬁrst two algorithms; we refer to these tools as STRIKE-GOLDD
(FISPO) and STRIKE-GOLDD (ProbObsTest), respectively. Since our preliminary tests showed that
the ORC-DF implementation in STRIKE-GOLDD is less eﬃcient than the implementation by [31], and
this one in turn is less eﬃcient than RORC-DF, we only considered the latter.

2.2.9 StrikePy

StrikePy is a Python toolbox that analyses structural local identiﬁability [47]. It implements the FISPO
algorithm of STRIKE-GOLD, but it does not include other features present in that toolbox and is
computationally less eﬃcient than the Matlab implementation. However, we evaluate it in this paper
since at the moment of writing this article it appears to be the only Python tool for analysing structural
identiﬁability.

2.2.10 RORC-DF

RORC-DF and the previously presented ORC-DF method (Observability Rank Criterion for systems
with Direct Feedthrough) adopt a similar approach, but have diﬀerent applicability.

ORC-DF [31], which has its own Matlab implementation, can analyse analytical models that are
aﬃne in the known and unknown inputs. The term direct feedthrough means that the outputs may be
functions of both the measured (known) and unmeasured (unknown) inputs. ORC-DF considers the
unmeasured inputs and their time derivatives as additional states.

RORC-DF (rational ORC-DF) [53] was the ﬁrst extension of Sedoglavic’s algorithm to systems with
unknown inputs. Unlike ORC-DF, RORC-DF does not require the system to be aﬃne in the inputs,
In RORC-DF the observability matrix
but it introduces the assumption of rational non-linearities.
is composed by the coeﬃcients of the power series expansion of the output functions, obtained with
Newton’s iteration. These computations are carried out using random numerical realizations of the
symbolic variables, and applying modular operations to reduce the computational burden. For these
reasons RORC-DF is computationally more eﬃcient than ORC-DF.

3 Results and discussion

We have benchmarked the tools described in Section 2.2 by using them to analyse a large and diverse
collection of problems from the systems biology literature and related areas. Our benchmark collection
is made up of a total of 25 problems created from 21 basic models, which are listed in Table 2 along with
their references and dimensions (numbers of states, parameters, outputs, and inputs). The collection
includes rational and non-rational models, as well as models with and without inputs. For some of the
In regard to their dimensions, the
latter we consider both the known and the unknown input case.
smallest models that we consider have a few parameters and states, while the largest have tens of them.
While larger models with hundreds or even thousands of parameters are increasingly common in systems
biology, currently existing tools are not capable of analysing them. In our assessment we consider several
criteria, which are discussed in the following subsections. Tables 3 and 4 summarise the results of our
analyses.

3.1 Software accessibility and usability

Accessibility. The ﬁrst issue with which the prospective user of a software tool needs to deal is
obtaining it [24]. Most of the toolboxes studied here are directly and freely available on their own
website or in GitHub. The two exceptions are EAR and DAISY, which are available upon request by
email to their authors.

Usability. The second issue is learning how to use the software and how to apply it to one’s needs
[27]. All the toolboxes evaluated here provide either a README ﬁle or a user manual, or both. As for
debugging, some programming environments such as Matlab, Julia, and Maple provide detailed reports
of the problems encountered when executing a code. Other environments, namely Reduce, Mathematica,
and the COMBOS WebApp, do not specify the cause of the problem. Being able to track the source of
an error is particularly important when working with large models, and when the user is not familiar
with a program.

3.2 Possibility of performing a given analysis

Allowed model types. This criterion considers the theoretical possibility of performing the analysis.
The most common limitation regards the analysis of non-rational models, which can only be performed
by STRIKE-GOLDD (FISPO), StrikePy, and GenSSI. ProbObsTest, DAISY, and COMBOS can deal
In the case
with rational functions as long as they can be transformed into polynomial functions.

7

Table 2: List of benchmark models and their main features. The columns display a short name for the
model, its original publication, the number of its states, parameters (“param.”), known inputs (“Kn-in”),
unknown inputs (“Unk-in”), measured outputs, and whether it is rational or not.

Short name

Ref. States Param. Kn-in Unk-in Outputs Rational

C2M a

C2M b

C2M c

Competition

HIV 1 a

HIV 1 b

HIV 2

HIV 3

NFkB 1

NFkB 2

Phosphorylation

PK 1

PK 2

Ruminal lipolysis

Tumor

MAPK

A. thaliana

Toggle switch a

Toggle switch b

JAK-STAT 1

JAK-STAT 2

βIG

SIRS with forcing

Cholera

Gene p53

[60]

[60]

[60]

[12]

[41]

[41]

[41]

[66]

[26]

[26]

[13]

[44]

[58]

[38]

[55]

[40]

[29]

[30]

[30]

[43]

[5]

[56]

[64]

[23]

[15]

2

2

2

2

3

3

4

5

15

15

6

4

4

5

5

3

7

2

2

10

25

3

5

4

4

4

4

4

6

5

5

10

10

29

6

6

9

9

4

5

14

29

10

10

23

24

5

13

7

25

1

1

1

1

2

1

1

1

1

1

1

2

1

1

1

1

2

2

2

2

6

6

2

2

1

3

1

3

2

2

2

8

14

1

2

2

4

(cid:51)

(cid:51)

(cid:51)

(cid:51)

(cid:51)

(cid:51)

(cid:51)

(cid:51)

(cid:51)

(cid:51)

(cid:51)

(cid:51)

(cid:51)

(cid:51)

(cid:51)

(cid:51)

(cid:51)

(cid:51)

(cid:51)

(cid:51)

of functions with non-integer exponents (such as JAK-STAT 1 and βIG), their analysis with SIAN,
StructuralIdentiﬁability, ObservabilityTest, and EAR requires approximating their values to the closest
integer. While in general this change should not alter the identiﬁability results, it can reduce computation
times. Hence, if a model is modiﬁed in this way, it should also be modiﬁed when analysing it with
other methods, in order to ensure a fair comparison. Another common limitation concerns models with
unknown inputs. Only four methods can lead with this class of models, all of which use local approaches:
RORC-DF, STRIKE-GOLDD (FISPO and ProbObsTest), and StrikePy.

Allowed analyses. Regarding the type of analysis, the most common diﬀerence is that some meth-
ods can only determine structural local identiﬁability, while others can also analyse global identiﬁability.
Furthermore, some tools (StrikePy and RORC-DF) provide only identiﬁability and observability results,
while others also search for symmetries, identiﬁable parameter combinations, or reparameterizations.
Table 1 lists the main features of each tool. Some global tools such as SIAN, ObservabilityTest, DAISY,
COMBOS, and GenSSI provide information about the number of local solutions. Some local tools such
as EAR, STRIKE-GOLDD and ObservabilityTest assist in ﬁnding symmetries and model reparameteri-
zations.

Computational feasibility. The feasibility of the analysis in practice must also be considered:
even if a tool can analyse a given model in principle, it may not be able to do so due to computational
limitations. This is reﬂected in the number of errors shown in the table 3 and 4. An error in these tables
means that the tool was not able to analyse the model due to computational limitations. The most
limited tools in this regard are StrikePy (due to the use of Python) and COMBOS (whose limitations

8

Table 3: Structural Global Identiﬁability tools: summary of results. The table entries display the runtimes
for each benchmark model, in seconds. An asterisk (*) next to a value denotes that the result is thought
to be wrong, while a diamond ((cid:5)) denotes that the correctness of the result is unclear. In one case (the
JAK-STAT 2 model) no tool was capable of assessing global identiﬁability, but two of them managed to
provide at least local results; they are indicated with a subscript (L).

DAISY GenSSI

SIAN
(Maple)

SIAN
(Julia)

COMBOS Structural

Identiﬁability

C2M a

C2M b

C2M c

Competition

HIV 1 a

HIV 1 b

HIV 2

HIV 3

NFkB 1

NFkB 2

Phosphorilation

PK 1

PK 2

Ruminal lipolysis

Tumor

MAPK

A. thaliana

Toggle switch a

Toggle switch b

JAK-STAT 1

JAK-STAT 2

βIG

SIRS with forcing

Cholera

Gene p53

0.34

0.24*

N/A

N/A

0.13*

N/A

0.448*

6.66

Error

Error

19.43

0.31

Error

0.12

8.91

0.15*

N/A

N/A

N/A

Error

Error

0.09*

Error

Error

0.792

2.81

7.08

N/A

Error

0.73

N/A

966.66*

751.74*

6722.98*

660.36

974.61

14.58*

5082.68*

1.46

1433.22

27.80
6356.60(cid:5)
N/A

N/A

0.358

0.28

N/A

N/A

0.80

N/A

6.687

31.34

3867.02

3690.70

5.23

1.48

Error

0.95

940.55

N/A

N/A

N/A

N/A

23284.00*

N/A

16999.00*

246.48
115200.00(cid:5)
L
6.54

648.26*

361.08

Error

10.94

380.67

221.73

10.27

10.27

N/A

N/A

12.09

N/A

10.63

14.32

Error

244.27

13.64

12.26

Error

14.12

404.96

N/A

N/A

N/A

N/A

40.90

Error

11.33

12.13

56.52

0.31

0.98

N/A

N/A

0.83

N/A

36.23

Error

Error

Error

Error

5.72*

Error

220.00

6735.38

Error

N/A

N/A

N/A

Error

Error

Error

Error

Error

9331.52

1339.38

33.91

33.71

N/A

N/A

32.02

N/A

31.60

32.78

Error

Error

35.02

34.39

84.86

34.86

34.87

N/A

N/A

N/A

N/A

62.55
37.21(cid:5)
L
31.65

41.56

34.72

33.15

9

Table 4: Structural Local Identiﬁability tools: summary of results. The table entries display the runtimes
for each benchmark model, in seconds. An asterisk (*) next to a value denotes that the result is thought to
be wrong, while a diamond ((cid:5)) denotes that the correctness of the result is unclear.

StrikePy Observability

RORC-DF EAR

Test

0.31*e-1

0.46*e-1

N/A

N/A

0.09

N/A

0.22

0.20

8.42

3.14

0.16

0.14

0.14

0.13

0.17

N/A

N/A

N/A

N/A

2.00
35.74(cid:5)
0.08

0.13

0.11

0.34

2.77

7.97

37.90

Error

0.52
24.31(cid:5)
1685.76

Error

Error

Error

32.40

198.96

Error

22.83

636.55

Error

N/A

Error

Error

Error

Error

Error

2836.98

210.39

29193.25

3.40

4.58

16.21

N/A

7.74
11.27(cid:5)
40.59

36.42

11666.91

1138.97

28.05

34.00

14.87

12.95

140.13

N/A

N/A

N/A

N/A

1723.97
86333.30(cid:5)
9.60

31.05

14.02

45.35

0.05

0.11

N/A

N/A

0.19

N/A

0.6095

1.25

24.37

6.26

0.91

0.58

0.58

0.38

1.00

N/A

N/A

N/A

N/A

4.92*

Error

0.7663

0.54

0.46

3.32

STRIKE-
GOLDD
(FISPO)

STRIKE-
GOLDD
(ProbObsTest)

C2M a

C2M b

C2M c

0.63

1.17

12.55

Competition

1696.29

HIV 1 a

HIV 1 b

HIV 2

HIV 3

NFkB 1

NFkB 2

Phosphorilation

PK 1

PK 2

Ruminal lipolysis

Tumor

MAPK

A. thaliana

Toggle switch a

0.74
2.23(cid:5)
29.79

8528.00

33345.00

1007.00

1.87

2.69

Error

0.74

24.86

94.219
167769.33(cid:5)
62.85

Toggle switch b

29.497

JAK-STAT 1

JAK-STAT 2

βIG

SIRS with forcing

Cholera

Gene p53

31.26
146450.00(cid:5)
2059.89

87.98

162.26

308.05

1.58

1.72

4.30

7.42*

3.96
8.65(cid:5)
10.34

12.76

304.40

329.83

13.41

6.41

16.41

17.07

8.66

N/A

N/A

N/A

N/A

203.26*
2318.46(cid:5)
16.10

9.20

8.02

112.53

10

may stem from the WebApp server). Another problematic tool in this regard is DAISY, which yields less
errors than StrikePy and COMBOS but struggles with medium-sized models. It should be noted that
some of the table entries are labelled as errors because in our tests we limit the calculations to 48 hours,
stopping the analysis if it did not ﬁnish in that time. Both DAISY and StrikePy were aﬀected by this
bound.

3.3 Results

Correctness. Even when a tool has produced results for a given model, they may not always be
correct. For some models we found discrepancies among the results of several tools. In such cases there
was typically a clear consensus among methods, with only one or two methods that disagree with the
common solution; in this case we assumed that the consensus solution is the true one, and we marked
the wrong solutions with an asterisk (*) in Tables 3, 4. However, in three cases (HIV 1 b, JAK-STAT 2
and A. thaliana) there was not a clear majority; in these cases we did not make any assumptions about
correctness, and we wrote a diamond ((cid:5)) next to all results in the tables. Under these assumptions,
we found that ﬁve methods did not produce any wrong result: SIAN, StructuralIdentiﬁability, Observ-
abilityTest, RORC-DF, and STRIKE-GOLDD (FISPO). Two algorithms, EAR and STRIKE-GOLDD
(ProbObsTest), yielded wrong results for JAK-STAT 1. In this regard, we have realised that this result
depends on the choice of prime number used by these methods to specialise the variables on random
numbers; if we select the same prime number we obtain the same result. Additionally, STRIKE-GOLDD
(ProbObsTest) yielded a wrong result for the Competition model, which could only be analysed with this
method and with STRIKE-GOLDD (FISPO). This case study illustrates the following issue: due to the
presence of logarithmic terms, methods such as ProbObsTest must transform the model into polynomial
form in order to analyse it; however, the transformed model does not necessarily preserve the properties
of the original model. Two other tools, DAISY, and GenSSI, produced wrong results for a number of
case studies.

Computational performance. Even when two tools agree on the result, their computational costs
may be very diﬀerent. Tables 3 and 4 show CPU times, which we have used as the main measure of
this criterion. They depend on the programming environment and the algorithm. Clearly, the fastest
algorithm in our tests was the one developed by Sedoglavic [51], which is implemented with some vari-
ations in four toolboxes – ObservabilityTest, EAR, RORC-DF, and STRIKE-GOLDD (ProbObsTest) –
programmed in three diﬀerent languages – Maple, Mathematica, Matlab. The fastest implementation
was the Maple one, followed by the Mathematica one. Those three tools are restricted to structural local
identiﬁability analysis (global tools are usually slower). Among the remaining local tools, the next two
in terms of computational eﬃciency were STRIKE-GOLDD (FISPO) and RORC-DF. The slowest tool
of all was StrikePy. Among global tools, GenSSI yielded the largest CPU times; DAISY was on average
faster than GenSSI, although it managed to complete the analysis of fewer models (probably due to the
48 hour limit that we imposed to the calculations). We found a similar, but even more pronounced eﬀect
for COMBOS. In comparison, SIAN and StructuralIdentiﬁability performed very well. The computation
times of StructuralIdentiﬁability were remarkably similar for most models, regardless of their size. We
tested two implementations of SIAN, in Maple and in Julia. The Maple implementation was faster than
the Julia one for smaller models, and slower for larger models. Julia uses Just-in-time compilation, where
each function is compiled the ﬁrst time it is called. Therefore, the computation times in table 3 count
this compilation time together with loading the package, which may be about 20-30 seconds.

4 Conclusions

Here we have presented a critical analysis and computational benchmarking of the existing software tools
for analysing structural identiﬁability and observability. Our results have revealed their relative strengths
and weaknesses. Below, we outline some guidelines for choosing the most appropriate tool for a given
problem, and then we provide speciﬁc recommendations. Finally, we conclude with a few words about
possible directions for future research.

4.1 General guidelines

First, the decision process must consider the type of model that has to be analysed, since not all methods
can be applied to all models. If it is a rational model without unknown inputs (a common situation in
systems biology as well as in other areas), all methods can be applied. However, for other model types
the choice of applicable methods is reduced, as can be seen in Table 1.

Second, the user must decide whether to assess global (SGI) or local (SLI) structural identiﬁability,
if both approaches are applicable to the model. SGI implies SLI but the opposite is not true; while it is
often the case that a SLI model is indeed SGI, some counter-examples have been reported. The extent
to which the distinction between local and global identiﬁability is relevant in biological applications is

11

worthy of further investigation. If it is not necessary to assess SGI, it may be convenient to resort to SLI
methods, since they are usually computationally cheaper than SGI methods.

Another factor is the software environment. We have benchmarked tools written in six diﬀerent
programming languages, as well as some web-based applications that do not require the installation of
speciﬁc software. While the array of available methods is reasonably large, for a given language the
number of possible choices is usually restricted to two or at most three, and sometimes only one. Thus,
the (in)convenience of reimplementing the model in a diﬀerent language needs to be taken into account
when choosing a software tool. This is especially important if the structural identiﬁability analysis is
performed as part of a larger computational pipeline for model building and exploitation, which is a
typical scenario. In this case, it is desirable to be able to perform all analyses within the same software
environment. It should also be taken into account some of the environments are proprietary software
(Matlab, Mathematica, Maple), and therefore not available to every user.

Finally, some tools provide additional features, which can be used to reformulate a model if it is
unidentiﬁable. Such features include the search for symmetries in the model equations, identiﬁable
parameter combinations, and identiﬁable model reparameterizations.

After considering the aforementioned factors, there may be several tools that meet the requirements
for the problem at hand. In this case, the user may choose the one with the lowest computational cost.
As our results have shown, computation times can vary greatly from one tool to another.

4.2 Recommendations

From the above discussion it is apparent that the choice of the most appropriate tool is strongly problem-
dependent. While every tool has its particular merits, not all of them are equally useful. Hence we would
like to provide some ﬁnal recommendations, which can be summarised as follows.

Within the tools that analyse structural global identiﬁability, there is a clear distinction between the
more recent ones and the older ones. The oldest one, DAISY, was the ﬁrst tool of its kind to be made
publicly available; however, the array of models that it is capable of analysing is currently smaller than
that of other tools. The next one, COMBOS, was a welcome innovation at the time of its release thanks
to its web app implementation; however, it exhibits similar or worse limitations as DAISY. On the other
hand, the two most recent methods, SIAN and StructuralIdentiﬁability, do not share the limitations of
the oldest ones. GenSSI lies somewhere in the middle of both groups. Therefore, we recommend using
either SIAN (Maple) or StructuralIdentiﬁability (Julia) for analysing structural global identiﬁability. The
choice between them can boil down to a matter of programming language.

The tools that analyse structural local identiﬁability do not exhibit the same diﬀerences in perfor-
mance between older and newer implementations. We can classify them in two groups, depending on
whether they use some version of Sedoglavic’s algorithm – ObservabilityTest, EAR, STRIKE-GOLDD
(ProbObsTest), and RORC-DF – or not – STRIKE-GOLDD (FISPO), StrikePy. The ﬁrst group yields
faster calculations than the second one, but it cannot analyse non-rational models. For the analysis of
rational models we recommend, in order of computational eﬃciency, (1) ObservabilityTest, which is by
far the fastest tool; (2) EAR; (3) STRIKE-GOLDD (ProbObsTest) or RORC-DF. Naturally, the ﬁnal
decision depends on the access to Maple, Mathematica, and Matlab environments. For the analysis of
non-rational models, STRIKE-GOLDD (FISPO) is in some cases the only available option. StrikePy
does not outperform other tools and, given its limitations, it should be avoided unless it is necessary to
perform the analysis in Python.

4.3 Directions for future research

As our results have shown, recent developments have yielded considerable advances in the available tools
for structural identiﬁability analysis. However, further improvements are still needed to facilitate the
analysis of more models, as they tend to become larger and more complex. In this regard, a promising line
of work would be to implement more features in the Julia programming language, due to its computational
eﬃciency. It should also be noted that all the tools considered in this paper analyse ODE models. While
they are the most common ones in systems biology, other types of models are also useful, such as those
with partial diﬀerential equations or stochastic dynamics. The development of tools for their analysis
would greatly broaden the applicability of structural identiﬁability analysis.

Availability and implementation

Implementations of all the case studies in all of the toolboxes can be download from https://github.
com/Xabo-RB/Benchmarking_files.

12

Funding

This research has received support from grant ED431F 2021/003 funded by Conseller´ıa de Cultura,
Educaci´on e Ordenaci´on Universitaria, Xunta de Galicia; from grant PID2020-113992RA-I00 funded by
MCIN/AEI/ 10.13039/501100011033 (PREDYCTBIO); and from grant RYC-2019-027537-I funded by
MCIN/AEI/ 10.13039/501100011033 and by “ESF Investing in your future”. The funding bodies played
no role in the design of the study, the collection and analysis of data, or in the writing of the manuscript.

References

[1] M. Anguelova. Nonlinear observability and identiﬁability: general theory and a case study of a

kinetic model for S. cerevisiae. Chalmers Tekniska Hogskola (Sweden), 2004.

[2] M. Anguelova, J. Karlsson, and M. Jirstrand. Minimal output sets for identiﬁability. Mathematical

biosciences, 239(1):139–153, 2012.

[3] F. Anstett-Collin, L. Denis-Vidal, and G. Mill´erioux. A priori identiﬁability: An overview on

deﬁnitions and approaches. Annual Reviews in Control, 50:139–149, 2020.

[4] J. F. Apgar, D. K. Witmer, F. M. White, and B. Tidor. Sloppy models, parameter uncertainty, and

the role of experimental design. Molecular BioSystems, 6(10):1890–1900, 2010.

[5] J. Bachmann, A. Raue, M. Schilling, M. E. B¨ohm, C. Kreutz, D. Kaschek, H. Busch, N. Gretz, W. D.
Lehmann, J. Timmer, et al. Division of labor by dual feedback regulators controls JAK2/STAT5
signaling over broad ligand range. Molecular systems biology, 7(1):516, 2011.

[6] E. Balsa-Canto, A. A. Alonso, and J. R. Banga. An iterative identiﬁcation procedure for dynamic

modeling of biochemical networks. BMC systems biology, 4(1):1–18, 2010.

[7] R. Bellman and K. J. ˚Astr¨om. On structural identiﬁability. Mathematical biosciences, 7(3-4):329–

339, 1970.

[8] G. Bellu, M. P. Saccomani, S. Audoly, and L. D’Angi`o. DAISY: A new software tool to test
global identiﬁability of biological and physiological systems. Computer methods and programs in
biomedicine, 88(1):52–61, 2007.

[9] B. Buchberger and F. Winkler. Gr¨obner bases and applications, volume 17. Cambridge University

Press Cambridge, 1998.

[10] O. Chi¸s, J. R. Banga, and E. Balsa-Canto. GenSSI: a software toolbox for structural identiﬁability

analysis of biological models. Bioinformatics, 27(18):2610–2611, 2011.

[11] O.-T. Chis, J. R. Banga, and E. Balsa-Canto. Structural identiﬁability of systems biology models:

a critical comparison of methods. PloS one, 6(11):e27755, 2011.

[12] T. Coleman and J. Gomatam. Application of a new model of species competition to Drosophila.

Nature New Biology, 239(95):251–253, 1972.

[13] C. Conradi and A. Shiu. Dynamics of posttranslational modiﬁcation systems: Recent progress and

future directions. Biophysical journal, 114(3):507–515, 2018.

[14] S. D´ıaz, X. Rey, and A. F. Villaverde. STRIKE-GOLDD 4.0: user-friendly, eﬃcient analysis of

structural identiﬁability and observability. arXiv preprint arXiv:2207.07346, 2022.

[15] J. Distefano. Dynamic systems biology modeling and simulation. Academic Press, 2015.

[16] R. Dong, C. Goodbrake, H. A. Harrington, and G. Pogudin. Diﬀerential elimination for dy-
arXiv preprint

namical models via projections with applications to structural
arXiv:2111.00991, 2022.

identiﬁability.

[17] M. C. Eisenberg and H. V. Jain. A conﬁdence building exercise in data and identiﬁability: Modeling

cancer chemotherapy as a case study. Journal of theoretical biology, 431:63–78, 2017.

[18] R. Hermann and A. Krener. Nonlinear controllability and observability. IEEE Transactions on

automatic control, 22(5):728–740, 1977.

[19] H. Hong, A. Ovchinnikov, G. Pogudin, and C. Yap. SIAN: software for structural identiﬁability

analysis of ode models. Bioinformatics, 35(16):2873–2874, 2019.

[20] H. Hong, A. Ovchinnikov, G. Pogudin, and C. Yap. Global identiﬁability of diﬀerential models.

Communications on Pure and Applied Mathematics, 73(9):1831–1879, 2020.

[21] D. L. Janz´en, L. Bergenholm, M. Jirstrand, J. Parkinson, J. Yates, N. D. Evans, and M. J. Chappell.
Parameter identiﬁability of fundamental pharmacodynamic models. Frontiers in physiology, 7:590,
2016.

[22] J. Karlsson, M. Anguelova, and M. Jirstrand. An eﬃcient method for structural identiﬁability

analysis of large dynamic systems. IFAC proceedings volumes, 45(16):941–946, 2012.

13

[23] E. C. Lee, M. R. Kelly Jr, B. M. Ochocki, S. M. Akinwumi, K. E. Hamre, J. H. Tien, and M. C.
Eisenberg. Model distinguishability and inference robustness in mechanisms of cholera transmission
and loss of immunity. Journal of theoretical biology, 420:68–81, 2017.

[24] G. Lee, S. Bacon, I. Bush, L. Fortunato, D. Gavaghan, T. Lestang, C. Morton, M. Robinson,
P. Rocca-Serra, S.-A. Sansone, et al. Barely suﬃcient practices in scientiﬁc computing. Patterns,
2(2):100206, 2021.

[25] T. S. Ligon, F. Fr¨ohlich, O. T. Chi¸s, J. R. Banga, E. Balsa-Canto, and J. Hasenauer. GenSSI 2.0:
multi-experiment structural identiﬁability analysis of sbml models. Bioinformatics, 34(8):1421–1423,
2018.

[26] T. Lipniacki, P. Paszek, A. R. Brasier, B. Luxon, and M. Kimmel. Mathematical model of NF-κB

regulatory module. Journal of theoretical biology, 228(2):195–215, 2004.

[27] M. List, P. Ebert, and F. Albrecht. Ten simple rules for developing usable software in computational

biology. PLoS computational biology, 13(1):e1005265, 2017.

[28] L. Ljung and T. Glad. On global identiﬁability for arbitrary model parametrizations. Automatica,

30(2):265–276, 1994.

[29] J. C. Locke, A. J. Millar, and M. S. Turner. Modelling genetic networks with noisy and var-
ied experimental data: the circadian clock in Arabidopsis thaliana. Journal of theoretical biology,
234(3):383–393, 2005.

[30] J.-B. Lugagne, S. S. Carrillo, M. Kirch, A. K¨ohler, G. Batt, and P. Hersen. Balancing a genetic
toggle switch by real-time feedback control and periodic forcing. Nature communications, 8(1):1–8,
2017.

[31] K. Maes, M. Chatzis, and G. Lombaert. Observability of nonlinear systems with unmeasured inputs.

Mechanical Systems and Signal Processing, 130:378–394, 2019.

[32] G. Massonis, J. R. Banga, and A. F. Villaverde. Autorepar: A method to obtain identiﬁable and
observable reparameterizations of dynamic models with mechanistic insights. International Journal
of Robust and Nonlinear Control, 2021.

[33] B. Merkt, J. Timmer, and D. Kaschek. Higher-order Lie symmetries in identiﬁability and pre-

dictability analysis of dynamic models. Physical Review E, 92(1):012920, 2015.

[34] N. Meshkat, C. Anderson, and J. J. DiStefano III. Finding identiﬁable parameter combinations
in nonlinear ODE models and the rational reparameterization of their input–output equations.
Mathematical biosciences, 233(1):19–31, 2011.

[35] N. Meshkat, M. Eisenberg, and J. J. DiStefano III. An algorithm for ﬁnding globally identiﬁable
parameter combinations of nonlinear ODE models using Gr¨obner Bases. Mathematical biosciences,
222(2):61–72, 2009.

[36] N. Meshkat, C. E.-z. Kuo, and J. DiStefano III. On ﬁnding and using identiﬁable parameter combi-
nations in nonlinear dynamic systems biology models and COMBOS: a novel web implementation.
PLoS One, 9(10):e110261, 2014.

[37] H. Miao, X. Xia, A. S. Perelson, and H. Wu. On identiﬁability of nonlinear ODE models and

applications in viral dynamics. SIAM review, 53(1):3–39, 2011.

[38] P. Moate, R. Boston, T. Jenkins, and I. Lean. Kinetics of ruminal lipolysis of triacylglycerol and
biohydrogenation of long-chain fatty acids: new insights from old data. Journal of Dairy Science,
91(2):731–742, 2008.

[39] R. Mu˜noz-Tamayo, L. Puillet, J.-B. Daniel, D. Sauvant, O. Martin, M. Taghipoor, and P. Blavy.
To be or not to be an identiﬁable model. is this a relevant question in animal science modelling?
Animal, 12(4):701–712, 2018.

[40] L. K. Nguyen, A. Degasperi, P. Cotter, and B. N. Kholodenko. Dyvipac: an integrated analysis and
visualisation framework to probe multi-dimensional biological networks. Scientiﬁc reports, 5(1):1–17,
2015.

[41] A. S. Perelson and P. W. Nelson. Mathematical analysis of hiv-1 dynamics in vivo. SIAM review,

41(1):3–44, 1999.

[42] H. Pohjanpalo. System identiﬁability based on the power series expansion of the solution. Mathe-

matical biosciences, 41(1-2):21–33, 1978.

[43] V. Raia, M. Schilling, M. B¨ohm, B. Hahn, A. Kowarsch, A. Raue, C. Sticht, S. Bohl, M. Saile,
P. M¨oller, et al. Dynamic mathematical modeling of il13-induced signaling in hodgkin and primary
mediastinal b-cell lymphoma allows prediction of therapeutic targets. Cancer research, 71(3):693–
704, 2011.

[44] A. Raksanyi. Utilisation du calcul formel pour l’´etude des syst`emes d’´equations polynomiales (ap-

plications en mod´elisation). PhD thesis, Paris 9, 1986.

14

[45] A. Raue, J. Karlsson, M. P. Saccomani, M. Jirstrand, and J. Timmer. Comparison of approaches
for parameter identiﬁability analysis of biological systems. Bioinformatics, 30(10):1440–1448, 2014.

[46] A. Raue, C. Kreutz, T. Maiwald, J. Bachmann, M. Schilling, U. Klingm¨uller, and J. Timmer.
Structural and practical identiﬁability analysis of partially observed dynamical models by exploiting
the proﬁle likelihood. Bioinformatics, 25(15):1923–1929, 2009.

[47] D. Rey Rostro and A. F. Villaverde. Strikepy: nonlinear observability analysis of inputs, states, and

parameters in python. In Actas de las XLIII Jornadas de Autom´atica, 2022.

[48] J. F. Ritt. Diﬀerential algebra, volume 33. American Mathematical Soc., 1950.

[49] M. P. Saccomani, S. Audoly, G. Bellu, and L. D’Angio. A new diﬀerential algebra algorithm to test
identiﬁability of nonlinear systems with given initial conditions. In Proceedings of the 40th IEEE
Conference on Decision and Control (Cat. No. 01CH37228), volume 4, pages 3108–3113. IEEE,
2001.

[50] M. P. Saccomani, S. Audoly, and L. D’Angi`o. Parameter identiﬁability of nonlinear systems: the

role of initial conditions. Automatica, 39(4):619–632, 2003.

[51] A. Sedoglavic. A probabilistic algorithm to test local algebraic observability in polynomial time.

Journal of Symbolic Computation, 33(5):735–755, 2002.

[52] A. Sedoglavic. Reduction of algebraic parametric systems by rectiﬁcation of their aﬃne expanded
Lie symmetries. In International Conference on Algebraic Biology, pages 277–291. Springer, 2007.

[53] X. Shi and M. Chatzis. An eﬃcient algorithm to test the observability of rational nonlinear systems

with unmeasured inputs. Mechanical Systems and Signal Processing, 165:108345, 2022.

[54] J. D. Stigter and J. Molenaar. A fast algorithm to assess local structural identiﬁability. Automatica,

58:118–124, 2015.

[55] G. D. Thomas, M. J. Chappell, P. W. Dykes, D. B. Ramsden, K. R. Godfrey, J. R. Ellis, and A. R.
Bradwell. Eﬀect of dose, molecular size, aﬃnity, and protein binding on tumor uptake of antibody
or ligand: a biomathematical model. Cancer research, 49(12):3290–3296, 1989.

[56] B. Topp, K. Promislow, G. Devries, R. M. Miura, and D. T Finegood. A model of β-cell mass,
insulin, and glucose kinetics: pathways to diabetes. Journal of theoretical biology, 206(4):605–619,
2000.

[57] E. Tunali and T.-J. Tarn. New results for identiﬁability of nonlinear systems. IEEE Transactions

on Automatic Control, 32(2):146–154, 1987.

[58] N. Verdiere, L. Denis-Vidual, G. Joly-Blanchard, and D. Domurado. Identiﬁability and estimation
of pharmacokinetic parameters for the ligands of the macrophage mannose receptor. International
Journal of Applied Mathematics and Computer Science, 15:517–526, 2005.

[59] A. F. Villaverde, A. Barreiro, and A. Papachristodoulou. Structural identiﬁability of dynamic

systems biology models. PLoS computational biology, 12(10):e1005153, 2016.

[60] A. F. Villaverde, N. D. Evans, M. J. Chappell, and J. R. Banga.

Input-dependent structural

identiﬁability of nonlinear systems. IEEE Control Systems Letters, 3(2):272–277, 2018.

[61] A. F. Villaverde, D. Pathirana, F. Fr¨ohlich, J. Hasenauer, and J. R. Banga. A protocol for dynamic

model calibration. Brieﬁngs in bioinformatics, 23(1):bbab387, 2022.

[62] A. F. Villaverde, N. Tsiantis, and J. R. Banga. Full observability and estimation of unknown
inputs, states and parameters of nonlinear biological models. Journal of the Royal Society Interface,
16(156):20190043, 2019.

[63] E. Walter and Y. Lecourtier. Global approaches to identiﬁability testing for linear and nonlinear

state space models. Mathematics and Computers in Simulation, 24(6):472–482, 1982.

[64] A. Weber, M. Weber, and P. Milligan. Modeling epidemics caused by respiratory syncytial virus

(rsv). Mathematical biosciences, 172(2):95–113, 2001.

[65] F.-G. Wieland, A. L. Hauber, M. Rosenblatt, C. T¨onsing, and J. Timmer. On structural and

practical identiﬁability. Current Opinion in Systems Biology, 25:60–69, 2021.

[66] D. Wodarz and M. A. Nowak. Speciﬁc therapy regimes could lead to long-term immunological
control of HIV. Proceedings of the National Academy of Sciences, 96(25):14464–14469, 1999.

[67] O. Wolkenhauer, P. Wellstead, K.-H. Cho, J. R. Banga, and E. Balsa-Canto. Parameter estimation

and optimal experimental design. Essays in biochemistry, 45:195–210, 2008.

15

