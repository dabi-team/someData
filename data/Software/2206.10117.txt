A method of detector description transformation to Unity and its application in BESIII

Kai-Xuan Huang,1 Zhi-Jun Li,1 Zhen Qian,1 Jiang Zhu,1 Hao-Yuan
Li,1 Yu-Mei Zhang,2, ∗ Sheng-Sen Sun,3, 4 and Zheng-Yun You1, †
1School of Physics, Sun Yat-sen University, Guangzhou 510275, China
2Sino-French Institute of Nuclear Engineering and Technology, Sun Yat-sen University, Zhuhai 519082, China
3Institute of High Energy Physics, Chinese Academy of Sciences, Beijing 100049, China
4University of Chinese Academy of Sciences, Beijing, 100049, China

Detector and event visualization is an essential part in software of HEP experiments. Modern visualization
technique and multimedia production platform, such as Unity, provides more fancy display effects and profes-
sional extensions for visualization in HEP experiments. In this work, a method of automatic detector description
transformation is presented, which can convert the complicated HEP detector geometry from GDML in ofﬂine
software to 3D modeling in Unity. The method has been successfully applied in the BESIII experiment, and can
be further developed into applications such as event display, data monitoring or virtual reality. It has great po-
tentials in detector design, ofﬂine software development, physics analysis and outreach for the next generation
HEP experiments, as well as applications in nuclear techniques for industry.

Keywords: Detector description, Visualization, Unity, GDML, BESIII

I.

INTRODUCTION

Detector description and visualization play important roles
in various aspects throughout the life cycle of a High Energy
Physics (HEP) experiment, including detector design, opti-
mization, simulation, reconstruction, detector commission-
ing, monitoring, event display and physics analysis, as well as
outreach and education. In HEP Software Foundation (HSF)
community white paper [1] and the roadmap for HEP soft-
ware and computing R&D for the 2020s [2], suggestions and
guideline for visualization tools and techniques in future ex-
periments have been speciﬁcally discussed, which focus on
detector geometry visualization, event display and interactiv-
ity.

The detectors in HEP experiments are usually large-scale
scientiﬁc apparatus with complicated geometry, which are
composed of up to millions of detector units, such as the AT-
LAS [3] and CMS [4] detector at the Large Hadron Collider
(LHC) [5]. The detector description is developed based on
professional geometry toolkit, in which the most popular ones
are Geometry Description Markup Language (GDML) [6]
and Detector Description Toolkit for High Energy Physics
(DD4hep) [7]. The detector geometry information in GDML
or DD4hep format can be imported into the ofﬂine software
of an experiment to provide consistent detector description
for different applications [8, 9].

However, to display the complicated detectors in ofﬂine
software becomes difﬁcult, since the HEP software commu-
nity does not have a common visualization tool that meets
the requirements of visualization effects, speed, efﬁciency
and portability. The ROOT software [10] and its EVE pack-
age [11] have been used in some experiments for detector
visualization and event display, such as ALICE [12], BE-
SIII [13] and JUNO [14, 15]. Although the ROOT based

∗ Yu-Mei Zhang, zhangym26@mail.sysu.edu.cn
† Zheng-Yun You, youzhy5@mail.sysu.edu.cn

event display tools have advantages with its development in
the ofﬂine software framework, their visualization effects are
limited and it is also difﬁcult to be implemented to platforms
other than Linux.

In recent years, the popular video game engines from in-
dustry, such as Unity [16], have been used in HEP experi-
ments for detector visualization and event display. Unity is
a cross-platform engine for creation of games, architecture,
video and animation. It supports more than 20 kinds of dif-
ferent platforms, including Windows, Linux, macOS, iOS and
Android, which makes Unity the most popular application de-
velopment platform on Apple Store and Google Play. The ap-
plications of Unity in ATLAS [3], BelleII [17] and JUNO [18]
have achieved fancy visualization effects, which makes Unity
a promising platform for visualization in future HEP experi-
ments.

Despite of the advantages of great display effects and
cross-platform support, a critical problem to use Unity for
detector visualization is that Unity does not support the com-
monly used HEP detector description, GDML and DD4hep.
The developers have to use the 3D modeling system in Unity
to reconstruct the complicated detector from scratch again,
which not only brings extra human work and maintenance
problem, but also could make the detector description in
Unity inconsistent with that in ofﬂine software.

In this paper, we present a method to automate the con-
version of GDML detector description into Unity. The full
detector geometry and its architecture, so long as described
with GDML or ROOT, can be imported into Unity for auto-
matic 3D detector modeling. The correlation between detec-
tor elements and identiﬁers is also preserved, which makes
it convenient for further developments into event display or
virtual reality (VR) applications. The method has been tested
and validated with the BESIII detector description [8, 9].

The rest of this paper is structured as follows. In Sect. II,
we introduce the detector description, visualization in HEP
In Sect.III, the
ofﬂine software and Unity, respectively.
method of transformation from GDML to Unity and detector
data ﬂow is presented. Its application in BESIII is introduced

2
2
0
2

n
u
J

1
2

]
t
e
d
-
s
n
i
.
s
c
i
s
y
h
p
[

1
v
7
1
1
0
1
.
6
0
2
2
:
v
i
X
r
a

 
 
 
 
 
 
in Sect.IV. And the further development of applications is dis-
cussed in Sect.V.

II. DETECTOR GEOMETRY AND VISUALIZATION

A. Detector description in HEP software

Detector description is an indispensable part in HEP of-
ﬂine software, which provides the detector geometry and sta-
tus information for different applications, including simula-
tion, reconstruction, calibration, event display and physics
analysis. The popular HEP infrastructure software, such as
Geant4 [19] or ROOT [10], has their own speciﬁc detector
construction system. If the software developers deﬁne the de-
tector geometry in these software respectively, there could be
potential inconsistency between them. To solve this problem,
some framework provides software-independent detector de-
scription, such as GDML and DD4hep, for detector related
applications in HEP ofﬂine software.

GDML [6] is a detector description language based on
XML (eXtensible Markup Language) [20]. It describes de-
tector information through a set of tags and attributes in plain
text format to provide persistent detector description for an
experiment. Several HEP experiments, including BESIII [8,
9], PHENIX [21], LHCb [22–24] and JUNO [25], have used
GDML to describe and optimize the detector geometry in
conceptual design and ofﬂine software development [26–28].
DD4hep [7] is a software framework for providing a com-
plete solution for full detector description, including geome-
try, materials, visualization, readout, alignment, and calibra-
tion, for the full experiment life cycle. It offers a consistent
description through a single source of detector information
for simulation, reconstruction, analysis, etc. DD4hep aims at
applications in the next generation HEP experiments, such as
CEPC [29], ILC [30], FCC [31] and STCF [32].

B. Visualization of detector and events

One important application of detector description is to vi-
sualize it so that the users can have a distinct view to bet-
ter understand the HEP detectors. It is extremely important
at the stage of detector conceptual design and detector com-
missioning. In combination with the event visualization, the
event display provides a powerful tool to demonstrate the de-
tector response to the particles, which plays an essential role
in ofﬂine software development and physics analysis.

However, as part of traditional industry design, Computer
Aided Design (CAD) [33] has been dominant in several
stages of an HEP experiment, including detector design, con-
struction and commissioning. There have always been difﬁ-
culties in sharing the 3D modeling information between CAD
and HEP ofﬂine software, since they belong to two quite dif-
ferent ﬁelds, industrial design and high energy physics, re-
spectively.

In HEP experiments, physicists used to develop the de-
tector description and event visualization tool in HEP ofﬂine

2

software. In the ofﬂine framework, the developers can make
full use of the detector geometry service and event data model
to retrieve the corresponding information. The event display
tools are usually based on the popular HEP software Geant4
or ROOT, whose visualization functions are friendly to HEP
users and are naturally convenient for visualization software
development. For example, the BESIII event display soft-
ware is based on the infrastructure visualization function of
ROOT. With the upgrade of ROOT and its EVE package [11],
the development of event display tool becomes more conve-
nient. Several recent HEP experiments, such as ALICE [12],
CMS [4], JUNO [25] and Mu2e [34], have developed the
event display software based on ROOT EVE.

However, due to the limited support and the open-source
feature of ROOT, its visualization effects are not satisfac-
tory to meet the diverse requirements of physicists. Most
of ROOT applications are also limited to the Linux platform
only. For better visualization and interactivity, several event
display tools have been developed based on external visual-
ization software. For instance, Atlantis [35, 36] and VP1 [37]
are the two general-purpose event display tools in ATLAS.
CMS has also developed several visualization systems, such
as Fireworks [38] and SketchUp [39].

C.

3D modeling and visualization in Unity

Unity is a professional video and game production engine
in industry, which supports more than 20 platforms. It is par-
ticularly popular for iOS and Android mobile app develop-
ment, and has recently been used in HEP for scientiﬁc re-
search and outreach. The Cross-platform Atlas Multimedia
Educational Lab for Interactive Analysis (CAMELIA)
[40,
41] is an event display software based on Unity for ATLAS.
Fig. 1 shows the visualization of the ATLAS detector and a
proton-proton collision event in CAMELIA. Another event
display tool based on Unity, the Event Live Animation with
unIty for Neutrino Analysis (ELAINA) [18] has also been de-
veloped in JUNO, as shown in Fig. 2.

Fig. 1. CAMELIA, the ATLAS event display tool based on Unity.

The visualization software based on Unity has the follow-

ing advantages:

3

the HEP detectors are usually highly complicated with mil-
lions of components, which makes it difﬁcult to build the 3D
modeling of detector in Unity.

To develop the event display tool for HEP experiments,
the detector description in Unity should be fully consistent
with that in ofﬂine software, so that the display of tracks,
hits, showers and display of the detector components match
with each other. Since for an HEP experiment, the detector
description usually already exists in the ofﬂine software, we
propose a method to automatically convert the HEP detector
description into 3D modeling in Unity.

A. Automatic detector geometry transformation

In HEP ofﬂine software, to avoid the inconsistency of de-
tector description in data processing, it is essential that the
framework can provide a single source of detector descrip-
tion for all applications, such as simulation, reconstruction,
calibration, event display and data analysis. This idea is usu-
ally realized by developing automatic geometry transforma-
tion interfaces between different software. For an existing
detector description with GDML, the detector construction in
Geant4 and ROOT for a speciﬁc experiment can be automat-
ically completed with the GDML-Geant4 and GDML-ROOT
interfaces [8, 9], respectively. In this way, the detector ge-
ometry consistency among the Geant4 based simulation, the
ROOT based reconstruction, event display and data analysis
are automatically guaranteed.

A similar idea can also be implemented in the 3D detector
modeling of Unity. Due to the complexity of HEP detectors
and the fact that HEP experiments usually already have a de-
tailed detector description, for example, in GDML format, it
will save a lot of human work in development and mainte-
nance if a method of automatic detector transformation from
GDML to Unity is available. As mentioned in Sect. II C,
Unity provides fancy visualization effects and multiple ex-
tensions for further development. If this novel method can be
realized and since it is a universal technique, all current and
future HEP experiments can beneﬁt from it by easily develop-
ment of applications for detector visualization, event display
and outreach.

B. Detector data conversion from GDML to Unity

In the industry market, there are tens of popular 3D ﬁle
formats, however, none of them is commonly supported in
both of HEP software and Unity. So we need to ﬁnd a data
ﬂow path that starts from GDML and ends in Unity with a
minimum steps of conversion.

FreeCAD [46]

is a general-purpose parametric 3D
computer-aided design and modeling software. It is free and
open-source, available for users to extend the functionality.
Since FreeCAD supports the import of geometry in Construc-
tive Solid Geometry (CSG) format [47], an interface between
GDML and FreeCAD is available to import the GDML for-
mat detector description [48]. On the other hand, FreeCAD

Fig. 2. ELAINA, the JUNO event display tool based on Unity.

• Fancy visualization effects. The Unity engine, as a
professional 3D software, provides more detailed de-
scription of the objects and more fancy visualization
effects, which makes it much more powerful than the
traditional event display based on ROOT.

• Cross-platform supports. Thanks to the multi-platform
supports of Unity, after the development by building
models and functions in Unity, a project can be directly
exported and deployed in different operating systems,
including Windows, Linux, macOS, iOS, Android and
network browsers. This feature makes the same visu-
alization project available for all the users on different
platform to enjoy. It not only reduces the workload in
project development, but also make is easier for main-
tenance.

• Extensibility. Unity allows the project to be extended
and further developed into VR [42] or Augment Real-
ity (AR) [43] project, such as BelleII VR [44], which
provides a quite different way for detector design, of-
ﬂine software development and physics analysis. It will
also be very helpful to advertise the scientiﬁc projects
to the public, especially the physics behind the large-
scale scientiﬁc apparatus, and makes it a powerful tool
in education and outreach, such as the Total Event Vi-
sualiser (TEV) of the CERN Media Lab [45]. The sup-
ports for various VR or AR devices have been inte-
grated in Unity and will be continuously supported with
the upgrade of Unity, so that the visualization project
developers can focus on the software project itself, in-
stead of different hardware supports.

Beneﬁts from the prominent features of Unity, it has huge
potential and boosts promising prospects in the development
of visualization software. Not only can it be used for scientiﬁc
research in particle and nuclear physics, but also has wide
applications in nuclear techniques for industry.

III. METHODOLOGIES

Although Unity has great advantages in developing visual-
ization software, a lot of endeavor has to be made in its ap-
plication to the large-scale scientiﬁc apparatus. For example,

allows to export the modeling in several kinds of popular 3D
formats, including STEP [49], BREP [50], VRML [51], etc.
In all these formats, STEP is chosen for further geometry
transformation. Although STEP is still not a format that can
be directly read in by Unity, it can be transformed into the
FBX format [52] with the Pixyz Studio software [53]. Pixyz
Studio is a CAD data preparation and optimization software,
which supports more than 35 3D ﬁle formats.
It provides
tessellation algorithms, enabling the transformation of CAD
data from industry-leading solutions into lightweight, opti-
mized meshes, in which FBX is one of the 3D mesh formats
that Unity supports. It is noteworthy that Pixyz has joined
Unity so that Unity can provide plugin to import and trans-
form heavy and complex 3D CAD data, such as HEP detec-
tors, into optimized meshes for real-time 3D engines more
conveniently.

The full chain of data ﬂow is shown in Fig. 3. The origi-
nal HEP detector description in GDML format usually com-
poses of the following parts:
the material list, the position
and rotation list, the shape list, the detector component (phys-
ical node) list and hierarchy of the whole detector tree. The
GDML detector description is ﬁrstly imported into FreeCAD
with the GDML-FreeCAD interface, then it is exported into
the STEP format. Pixzy reads in the STEP format data and
transforms it into FBX format, which can be directly read in
by Unity, and keep the detector unit association information
in the meantime.

Fig. 3. Detector data ﬂow from GDML to Unity.

With the data ﬂow chain described above, we provide a
method to transform the GDML detector description into
Unity with automated 3D detector construction. The method
is realized with the GDML-CAD interface, FreeCAD and
Pixyz software. With the 3D detector modeling successfully
constructed in Unity with automation, further application de-
velopment based on Unity will be achievable.

4

C.

Integrity in Unity 3D modeling

For a speciﬁc HEP detector with GDML description, to re-
alize a complete 3D modeling of the detector in Unity, a few
more extra works are necessary, in addition to the automatic
geometry transformation method introduced above.

First, in the GDML-FreeCAD interface [48], not all of the
solid shapes that are currently deﬁned in Geant4 or ROOT are
fully supported. The interface only supports about 10 kinds
of shapes, most of them are the basic CSG shapes. There
are more than 30 kinds of speciﬁc shapes that are provided
in Geant4 but not commonly used. For a speciﬁc HEP detec-
tor description with GDML format, if some special shapes
are used but not available in the interface, users may re-
quest to develop the corresponding shape transformation in
the GDML-FreeCAD interface, so that the full detector trans-
formation can be supported.

Secondly, in description of a HEP detector, it is important
to keep the association between a unique detector unit and its
identiﬁer in event data model. Such association information is
essential to control the visualization properties of the detector
unit in further application development in Unity such as event
display. Usually, the identiﬁer information is stored in the
name of each node in GDML, so that later it can be extracted
from the unit’s name in Unity to retrieve the mapping of a unit
and its corresponding identiﬁer. Hence, in transformation of
the detector geometry from GDML to Unity, it is critical to
retain the name of each detector unit to keep the association
information.

Third, although the basic information such as density and
makeup of materials can be transformed from GDML, Unity
provides more rich visualization properties such as material
color, texture, transparency, reﬂection, etc., which allows the
user to have the freedom to render the detector geometry with
more powerful visualization effects.

With the above supplementary information provided, the
3D detector modeling has been successfully constructed in
Unity, and it has been qualiﬁed for further development.

IV. APPLICATION IN BESIII

A. BESIII detector description and visualization

BESIII is a spectrometer operating at the Beijing Electron
Positron Collider II (BEPCII). The BESIII detector records
symmetric e+e− collisions provided by the BEPCII storage
ring [54], which operates in the center-of-mass energy range
from 2.0 to 4.7 GeV [55]. The cylindrical core of the BE-
SIII detector covers 93% of the full solid angle and consists
of a helium-based multi-layer drift chamber (MDC), a plastic
scintillator time-of-ﬂight system (TOF), and a CsI(Tl) elec-
tromagnetic calorimeter (EMC), which are all enclosed in a
superconducting solenoidal magnet providing a 1.0 T mag-
netic ﬁeld. The solenoid is supported by an octagonal ﬂux-
return yoke with resistive plate counter muon identiﬁcation
modules interleaved with steel (MUC).

The detector description in BESIII ofﬂine software is pro-
vided in GDML format. Each of the four sub-detectors,
MDC, TOF, EMC and MUC, has a corresponding GDML ﬁle
to describe it. A general GDML ﬁle provides description of
the common materials and the other passive detector compo-
nents, such as beam-pipe and superconducting solenoid. All
applications in BESIII ofﬂine software, including simulation,
reconstruction, event display, calibration and analysis, use the
GDML ﬁles as single source of detector information.

BESIII Visualization (BesVis), an event display tool based
on ROOT, has been developed to visualize the detector and to
analyze the physics events, as shown in Fig. 4. It has played
an important role in BESIII ofﬂine software development and
physics analysis since 2005.

5

Fig. 5. Visualization of the BESIII TOF sub-detector in FreeCAD
(left) and Pixyz (right).

Third, the FBX ﬁles can be directly imported into Unity.
For the BESIII detector, there are four sub-detector FBX ﬁles
(MDC, TOF, EMC and MUC) and one general FBX ﬁle to de-
scribe the beam-pipe and superconducting solenoid. The sub-
detectors have been checked in Geant4 and ROOT to guaran-
tee no space overlaps between each other, so the subdetectors
can be directly combined together to form the whole detector.
Finally, the 3D modeling of BESIII detector is successfully
constructed in Unity with a set of automated steps.

Fig. 4. Visualization of the BESIII detector and a real data event in
BesVis.

B. Conversion of BESIII geometry to Unity

Based on the method introduced in Sect.III, it is possible
to perform a format conversion of the BESIII detectors de-
scription from GDML to Unity. The process of detector data
conversion is divided into the following steps.

First, the GDML description of each sub-detector is im-
ported into FreeCAD with the GDML-CAD interface. Since
the original interface only supports very basic CSG shapes
but BESIII has used some complicated shapes, such as Poly-
gon, Polyhedra, Twistedtubs, IrregBox and Boolean shapes,
we update the interface to allow correct conversion of all the
shapes being used in BESIII GDML detector description.

Second, after importing into FreeCAD, the BESIII detector
data is exported in STEP format. Then the STEP ﬁles are
converted to FBX ﬁles with the format conversion function
provided by Pixyz Studio. As an example, visualization of
the BESIII TOF sub-detector in FreeCAD and Pixyz is shown
in Fig. 5.

C. Display of BESIII detector in Unity

Although at this stage, the BESIII detector has been auto-
matically built in Unity, it is not well displayed in the scene.
Since GDML does not save the visualization attributes, all de-
tector units are still set with the default visualization attributes
in Unity. All that the users can see in the scene is a box, which
is the top world volume in deﬁnition of the GDML detector
description.

A set of scripts need to be developed to set color, trans-
parency, reﬂectivity and texture of material for the detector
units. The top world volume and the virtual mother volumes
need to be set invisible, to allow the inner detector units to
show up. Another advantage of the automatic conversion is
that the name of each detector unit is kept during the process
of transformation, so that the scripts can set the visualization
attributes according to the name of each detector unit.

Fig. 6 shows the display of the four BESIII sub-detectors in
Unity. The corresponding display parameters of the materials
have been updated to obtain a better display effect. The dis-
play attributes in Unity are set to be consistent with those in
BesVis, but with more vivid and rich visualization effects that
ROOT does not support. A display of the full BESIII detector
in Unity is shown in Fig. 7.

6

A. Event display tool

Event display is a convenient tool for ofﬂine software tun-
ing and physics analysis in HEP experiments. In Sect. II C,
the application of Unity for event display in ATLAS and
JUNO has been introduced. However, for both programs, the
detectors were manually constructed in Unity independently,
which took a lot of developers’ work.

With the method of automatic geometry transformation,
the BESIII detector has been constructed in Unity. To de-
velop the event display tool based on Unity, another work is
to get the event data information, and to associate the ﬁred de-
tector units with their identiﬁers, which can be decoded from
the name of each detector unit.

Once the association relationship is constructed, a set of
scripts can be developed in Unity to control different visual
effects for the ﬁred and unﬁred detector units. Then the ba-
sic functions of event display tool have been realized. Fig. 8
shows a prototype of an event display tool under development
in Unity and its rendering effects.

Fig. 6. Visualization of the BESIII sub-detectors in Unity, (a) MDC,
(b) TOF, (c) EMC and (d) MUC.

Fig. 8. The prototype of a new BESIII event display tool in Unity
and its rendering effects.

Fig. 7. Display of the full BESIII detector in Unity. From inner to
outside are MDC, TOF, EMC and MUC.

B. Detector and data monitoring

V. FURTHER DEVELOPMENT OF APPLICATIONS

Once the detector geometry and its visualization attributes
are constructed in Unity, various applications can be further
developed on top of it. The characteristics of Unity, including
fantastic visual effects, mutli-platform support and VR [42] or
AR [43] devices integration, makes it convenient to develop
event display tool, detector status monitoring software, and
VR/AR applications for scientiﬁc research and education.

With the detector constructed in Unity, not only the ofﬂine
event display but also the online monitoring software can be
developed to help monitor the experiment’s operation status
and the quality of the real-time data collected by the detector.
The detector units with abnormal operational status, such
as dead or hot channels, can be distinctly displayed, which
will help the shift operators to diagnose the potential detector
problems.

Thanks to the multi-platform supports of Unity, a monitor-
ing project can be easily deployed to different platforms and
devices. Besides the traditional Windows and Linux operat-
ing system, the monitoring project can also be built into apps

(a)(b)(c)(d)on the mobile platform, such as Android and iOS, so that the
users can conveniently monitor the status of an experiment
from their mobile phones or pads remotely.

C. Virtual reality applications

In roadmap for HEP software and computing R&D for the
2020s [2], application based on VR is an important direction
of development [1]. VR simulates the user’s physical pres-
ence in a virtual environment. By presenting the emitting par-
ticles and their interactions with the detector, it can provide a
new method with immersive experience for physicists to tune
the ofﬂine simulation and reconstruction software, as well as
performing physics analysis for rare events, as if the users are
personally in the scene of the running detector. Some creative
production has started in HEP community, such as ATLAS-
rift [56] and BelleII VR [44].

With the method of automatic detector construction in
Unity, and the extensible supports of VR devices from Unity,
the VR applications for nuclear or HEP experiments can be
easily developed. Since most nuclear or HEP experiments are
not accessible during data taking because of safety or security
requirements, our method has another advantage, allowing
the general public to explore the detector with an immersive
experience, watch the nuclear or HEP collisions in a realistic
environment. It will be of great beneﬁts to let the general pub-
lic have a basic idea and understand what scientiﬁc research
the nuclear physics and HEP community are doing.

D.

Interdisciplinary applications

In addition to the applications in nuclear physics or HEP
experiments, the method could also have wide applications in
applied nuclear science, techniques, and industry.

For example, in nuclear power plant (NPP) monitoring, this
method can be used to monitor the emitting neutrons or neu-
trinos, then to reconstruct the distribution of inner active ﬁs-
sion area, so as to monitor the operation status of NPP.

In the ﬁeld of nuclear medical imaging, the human body is
more or less like a nuclear particle source or detector, but with
dynamic geometry. Since our method of detector modeling is
automatic, it can rapidly construct and visualize the human
body, to allow observation of its status after interaction with
nuclear particles in real time or semi real time. Other potential
interdisciplinary applications include muon tomography [57–
59], X-ray inspection, and fusion diagnosis, etc.

VI. SUMMARY

Detector description and visualization are essential tech-
niques in software development for the next generation HEP
experiments. Unity is a popular and versatile multi-media
creation platform, which provides fancy visual effects, multi-
ple platform supports and extensibility to VR and AR appli-
cations. For large-scale scientiﬁc projects, building the com-

7

plicated detector with up to millions of components in Unity,
while keeping them consistent with the geometry in ofﬂine
data processing software, is very difﬁcult and takes a lot of
work for software developers.

A method of automatic detector data transformation from
GDML to Unity is presented, which can construct the 3D
modeling of detectors in Unity for further applications. The
method has been realized in the BESIII detector with hun-
dreds of thousands of components, and can be used in future
experiments like CEPC. In addition to HEP experiments, the
method also has great potentials in multiple interdisciplinary
applications, education and outreach.

ACKNOWLEDGEMENTS

This work is supported by National Natural Science Foun-
dation of China (Grant No.11975021, 12175321, 11675275,
U1932101), National Key Research and Development Pro-
gram of China under Contracts Nos.
2020YFA0406300,
2020YFA0406400, the Strategic Priority Research Program
of the Chinese Academy of Sciences under Grant No.
XDA10010900, the Chinese Academy of Sciences (CAS)
Large-Scale Scientiﬁc Facility Program, the Fundamental Re-
search Funds for the Central Universities, Sun Yat-sen Uni-
versity, the National College Students Science and Technol-
ogy Innovation Project and the Undergraduate Base Scientiﬁc
Research Project of Sun Yat-sen University.

REFERENCES

[1] M. Bellis et al. HEP Software Foundation Community
White Paper Working Group — Visualization. 2018.
DOI: 10.48550/ARXIV.1811.10309.

[2]

J. Albrecht et al. “A Roadmap for HEP Software and
Computing R&D for the 2020s”. Computing and Soft-
ware for Big Science 3 (2019), p. 7. DOI: 10.1007/
s41781-018-0018-8.

[3] The ATLAS Collaboration. “The ATLAS Experiment
at the CERN Large Hadron Collider”. JINST 3.08
(2008), S08003–S08003. DOI: 10 . 1088 / 1748 -
0221/3/08/s08003.

[4] The CMS Collaboration. “The CMS experiment at the
CERN LHC”. JINST 3.08 (2008), S08004–S08004.
DOI: 10.1088/1748-0221/3/08/s08004.
[5] L. Evans. “The Large Hadron Collider”. New Journal
of Physics 9.9 (2007), pp. 335–335. DOI: 10.1088/
1367-2630/9/9/335.

[6] R. Chytracek, J. Mccormick, W. Pokorski, et al. “Ge-
ometry Description Markup Language for Physics Sim-
ulation and Analysis Applications”. IEEE Transactions
on Nuclear Science 53.5 (2006), pp. 2892–2896. DOI:
10.1109/TNS.2006.881062.

8

[7] M. Frank, F. Gaede, C. Grefe, et al. “DD4hep: A De-
tector Description Toolkit for High Energy Physics Ex-
periments”. J. Phys. Conf. Ser. 513.2 (2014), p. 022010.
DOI: 10.1088/1742-6596/513/2/022010.

[21] K. Adcox et al. “PHENIX detector overview”. Nucl.
Instrum. Meth. A 499.2 (2003). The Relativistic Heavy
Ion Collider Project: RHIC and its Detectors, pp. 469–
479. DOI: 10.1016/S0168-9002(02)01950-2.

[8] Y.-T. Liang et al. “A uniform geometry description for
simulation, reconstruction and visualization in the BE-
SIII experiment”. Nucl. Instrum. Meth. A 603.3 (2009),
pp. 325–327. DOI: 10.1016/j.nima.2009.02.
036.

[9] Z.-Y. You et al. “A method for detector description ex-
change among ROOT GEANT4 and GEANT3”. Chi-
nese Physics C 32.7 (2008), pp. 572–575. DOI: 10 .
1088/1674-1137/32/7/012.

[10] R. Brun, A. Gheata, and M. Gheata. “The ROOT ge-
ometry package”. Nucl. Instrum. Meth. A 502.2 (2003),
pp. 676–680. DOI: 10 . 1016 / S0168 - 9002(03 )
00541-2.

[11] M. Tadel. “Overview of EVE – the event visualiza-
tion environment of ROOT”. J. Phys. Conf. Ser. 219.4
(2010), p. 042055. DOI: 10 . 1088 / 1742 - 6596 /
219/4/042055.

[12] The ALICE Collaboration. “ALICE: Physics Perfor-
mance Report, Volume I”. Journal of Physics G: Nu-
clear and Particle Physics 30.11 (2004), pp. 1517–
1763. DOI: 10.1088/0954-3899/30/11/001.

[13] M. Ablikim et al. “Design and construction of the BE-
SIII detector”. Nucl. Instrum. Meth. A 614.3 (2010),
pp. 345–399. DOI: 10.1016/j.nima.2009.12.
050.

[14] “A ROOT based event display software for JUNO”.
JINST 13.02 (2018), T02002–T02002. DOI: 10 .
1088/1748-0221/13/02/t02002.

[15] S. Zhang, J.-S. Li, Y.-J. Su, et al. “A method for shar-
ing dynamic geometry information in studies on liquid-
based detectors”. Nucl. Sci. Tech. 32.2 (2021), pp. 1–
11. DOI: 10.1007/s41365-021-00852-8.
[16] W. Goldstone. Unity game development essentials.

Packt Publishing Ltd, 2009.

[17] T. Abe et al. Belle II Technical Design Report. 2010.

DOI: 10.48550/ARXIV.1011.0352.

[18]

J. Zhu, Z. You, Y. Zhang, et al. “A method of detector
and event visualization with Unity in JUNO”. JINST
14.01 (2019), T01007–T01007. DOI: 10 . 1088 /
1748-0221/14/01/t01007.

[19] S. Agostinelli et al. “Geant4—a simulation toolkit”.
Nucl. Instrum. Meth. A 506.3 (2003), pp. 250–303. DOI:
10.1016/S0168-9002(03)01368-8.

[20] T. Bray, J. Paoli, and C. Sperberg-McQueen. Exten-
sible markup language (XML) 1.0. http : / / www .
w3 . org / XML / 1998 / 06 / xmlspec - report -
19980910.htm.

[22] The LHCb Collaboration. “The LHCb Detector at the
LHC”. JINST 3.08 (2008), S08005–S08005. DOI: 10.
1088/1748-0221/3/08/s08005.

[23] A. Trisovic. “LHCb Event display” (2014). https :

//inspirehep.net/literature/1920683.

[24] L. Pescatore. “Status of outreach activities at LHCb”.
PoS ICHEP2018 (2019), p. 277. DOI: 10.22323/1.
340.0277.

[25] G. Ranucci et al. “Status and prospects of the JUNO
experiment”. J. Phys. Conf. Ser. 888 (2017), p. 012022.
DOI: 10.1088/1742-6596/888/1/012022.

[26] Z. Qian et al. “Vertex and energy reconstruction in
JUNO with machine learning methods”. Nucl. Instrum.
Meth. A 1010 (2021), p. 165527. DOI: 10.1016/j.
nima.2021.165527.

[27] Z.-Y. Li et al. “Event vertex and time reconstruction
in large-volume liquid scintillator detectors”. Nucl. Sci.
Tech. 32 (2021), p. 49. DOI: 10 . 1007 / s41365 -
021-00885-z.

[28] Z.-Y. Li et al. Improving the machine learning based
vertex reconstruction for large liquid scintillator de-
tectors with multiple types of PMTs. 2022. DOI: 10 .
48550/ARXIV.2205.04039.

[29] The CEPC Study Group. CEPC Conceptual Design Re-
port: Volume 2 - Physics &amp; Detector. 2018. DOI:
10.48550/ARXIV.1811.10545.

[30] T. Behnke et al. The International Linear Collider
Technical Design Report - Volume 1: Executive Sum-
mary. 2013. DOI: 10.48550/ARXIV.1306.6327.

[31] The FCC Collaboration. “FCC Physics Opportunities:
Future Circular Collider Conceptual Design Report
Volume 1”. English. European Physical Journal C 79.6
(2019). DOI: 10 . 1140 / epjc / s10052 - 019 -
6904-3.

[32] Q. Luo and D. Xu. “Progress on Preliminary Con-
ceptual Study of HIEPA, a Super Tau-Charm Factory
in China”. Proc. 9th International Particle Acceler-
ator Conference (IPAC’18), Vancouver, BC, Canada,
April 29-May 4, 2018. International Particle Accel-
erator Conference 9. Geneva, Switzerland: JACoW
Publishing, 2018, pp. 422–424. DOI: 10 . 18429 /
JACoW-IPAC2018-MOPML013.

[33] R. W. Kennard and L. A. Stone. “Computer Aided
Design of Experiments”. Technometrics 11.1 (1969),
pp. 137–148. DOI: 10 . 1080 / 00401706 . 1969 .
10490666.

[34] L. Bartoszek et al. Mu2e Technical Design Report.
2015. DOI: 10.48550/ARXIV.1501.05241.

[35] G. Taylor. “Visualizing the ATLAS Inner Detector with
Atlantis”. Nucl. Instrum. Meth. A 549.1 (2005). VER-
TEX 2003, pp. 183–187. DOI: 10.1016/j.nima.
2005.04.049.

[36] N. Konstantinidis et al. “The Atlantis event visuali-
sation program for the ATLAS experiment” (2005).
https : / / cds . cern . ch / record / 865603 /
files/p361.pdf.

[37] T. Kittelmann, V. Tsulaia, J. Boudreau, et al. “The Vir-
tual Point 1 event display for the ATLAS experiment”.
J. Phys. Conf. Ser. 219.3 (2010), p. 032012. DOI: 10.
1088/1742-6596/219/3/032012.

[38] D. Kovalskyi, M. Tadel, A. Mrak-Tadel, et al. “Fire-
works: A Physics Event Display for CMS”. J. Phys.
Conf. Ser. 219 (2010). Ed. by J. Gruntorad and M.
Lokajicek, p. 032014. DOI: 10.1088/1742-6596/
219/3/032014.

[39] T. Sakuma and T. McCauley. “Detector and Event Vi-
sualization with SketchUp at the CMS Experiment”. J.
Phys. Conf. Ser. 513.2 (2014), p. 022032. DOI: 10 .
1088/1742-6596/513/2/022032.
J. Pequenao and USDOE. Atlas Multimedia Educa-
tional Lab for Interactive Analysis. 2008. DOI: 10 .
11578/dc.20210416.15.

[40]

[41] CAMELIA webpage. https://pdgusers.lbl.

gov/~pequenao/camelia.

[42]

[43]

J. Zheng, K. Chan, and I. Gibson. “Virtual reality”.
IEEE Potentials 17.2 (1998), pp. 20–23. DOI: 10 .
1109/45.666641.

J. Carmigniani and B. Furht. “Augmented Reality: An
Overview”. Handbook of Augmented Reality. Ed. by B.
Furht. New York, NY: Springer New York, 2011, pp. 3–
46. DOI: 10.1007/978-1-4614-0064-6_1.

[44] Z. Duer, L. Piilonen, and G. Glasson. “Belle2VR:
A Virtual-Reality Visualization of Subatomic Particle
Physics in the Belle II Experiment”. IEEE Computer
Graphics and Applications 38.3 (2018), pp. 33–43.
DOI: 10.1109/MCG.2018.032421652.

[45] CERN TEV visualization

framework webpage.
https://gitlab.cern.ch/CERNMediaLab/.
[46] FreeCAD webpage. https://www.freecadweb.

org.

[47] D. H. Laidlaw, W. B. Trumbore, and J. F. Hughes.
“Constructive Solid Geometry for Polyhedral Objects”.
SIGGRAPH Comput. Graph. 20.4 (1986), pp. 161–170.
DOI: 10.1145/15886.15904.

9

[48] KeithSloan et

al. FreeCAD GDML Workbench.

https://github.com/KeithSloan/GDML.

[49] S. Kemmerer. STEP: The Grand Experience. en. 1999.

DOI: 10.6028/NIST.SP.939.

[50]

I. Stroud. Boundary representation modelling tech-
niques. Springer Science & Business Media, 2006.
[51] R. Carey. “The virtual reality modeling language ex-
plained”. IEEE MultiMedia 5.3 (1998), pp. 84–93. DOI:
10.1109/93.713310.

[52] FBX webpage. https://www.autodesk.com/

products/fbx/overview.

[53] Pixyz Studio Software. https : / / www . pixyz -

software.com/studio.

[54] C. Yu et al. “BEPCII Performance and Beam Dynamics
Studies on Luminosity”. Proc. of International Particle
Accelerator Conference (IPAC’16), Busan, Korea, May
8-13, 2016. International Particle Accelerator Confer-
ence 7. Geneva, Switzerland: JACoW, 2016, pp. 1014–
1018. DOI: 10 . 18429 / JACoW - IPAC2016 -
TUYA01.

[55] M. Ablikim et al. “Future Physics Programme of BE-
SIII”. Chinese Physics C 44.4 (2020), p. 040001. DOI:
10.1088/1674-1137/44/4/040001.

[56]

I. Vukotic, E. Moyse, and R. M. Bianchi. ATLASrift -
a Virtual Reality application. 2015. DOI: 10.48550/
ARXIV.1511.00047.

[57] Y. Cheng, R. Han, Z. Li, et al. Experimental density
radiography of Wudalianchi volcano with cosmic ray
muons. 2020. DOI: 10 . 48550 / ARXIV . 2007 .
13792.

[58] K. Morishima et al. “Discovery of a big void in Khufu’s
Pyramid by observation of cosmic-ray muons”. Na-
ture 552.7685 (2017), pp. 386–390. DOI: 10.1038/
nature24647.

[59] D. Carbone, D. Gibert, J. Marteau, et al. “An exper-
iment of muon radiography at Mt Etna (Italy)”. Geo-
physical Journal International 196.2 (2013), pp. 633–
643. DOI: 10.1093/gji/ggt403.

