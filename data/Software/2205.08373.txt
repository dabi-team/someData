2
2
0
2

y
a
M
9

]

O
L
.
s
c
[

1
v
3
7
3
8
0
.
5
0
2
2
:
v
i
X
r
a

Compositional Modeling with Stock and Flow Diagrams

John Baez, Xiaoyan Li, Sophie Libkind, Nathaniel Osgood, and Evan Patterson

March 9, 2022

Abstract

Stock and ﬂow diagrams are widely used in epidemiology to model the dynamics of popu-
lations. Although tools already exist for building these diagrams and simulating the systems
they describe, we have created a new package called StockFlow, part of the AlgebraicJulia
ecosystem, which uses ideas from category theory to overcome notable limitations of existing
software. Compositionality is provided by the theory of decorated cospans: stock and ﬂow
diagrams can composed to form larger ones in an intuitive way formalized by the operad of
undirected wiring diagrams. Our approach also cleanly separates the syntax of stock and ﬂow
diagrams from the semantics they can be assigned. We consider semantics in ordinary diﬀer-
ential equations, although others are possible. As an example, we explain code in StockFlow
that implements a simpliﬁed version of a COVID-19 model used in Canada.

1 Introduction

The theoretical advantages of compositionality and functorial semantics are widely recognized
among applied category theorists. Compositionality means, at the very least, that systems can be
described one piece at a time, with a clear formalism for composing these pieces. This formalism
can appear in various styles: composing morphisms in a category, tensoring objects in a monoidal
category, composing operations in an operad, etc. Functorial semantics then means that the map
from system descriptions (“syntax”) to their behavior (“semantics”) preserves all the relevant forms
of composition.

While these principles are elegant, in many ﬁelds it is still a challenge to produce useful software
that takes advantage of them and is embraced by the intended users. This is one of the main
challenges of applied category theory. Here we focus on developing software suited to one particular
ﬁeld: epidemiological modeling. At present this software is additionally capable of modeling a wide
class of systems studied in the System Dynamics modeling discipline [12, 29].

The AlgebraicJulia ecosystem of software implements compositionality and functorial semantics
in a thorough-going way [1]. Decorated and structured cospans are broad mathematical frame-
works for turning “closed” system descriptions into “open” ones that can be composed along their
boundaries [10, 3, 4]. One part of AlgebraicJulia, called Catlab [22], provides a generic interface
for working with such cospans, among other categorical abstractions. With the help of Catlab, a
tool called AlgebraicPetri was developed to work with one approach to epidemiological modeling
based on Petri nets [18]. Here we explain a new tool, StockFlow, which handles a more ﬂexible
and more widely used formalism for epidemiological modeling: stock and ﬂow diagrams.

In Section 2 we review how stock and ﬂow diagrams are used in epidemiological modeling, and
discuss some shortcomings of existing software for working with these diagrams. In Section 3 we
ﬁrst use decorated cospans to formalize a simple class of open stock and ﬂow diagrams and their
diﬀerential equation semantics, and then sketch how to extend this class to the full-ﬂedged diagrams
actually used in our software. In Section 4 we describe the software package, StockFlow, that we
have developed to work with stock-ﬂow diagrams compositionally and implement a functorial
semantics for them.1

1 The link to the StockFlow repository on GitHub is https://github.com/AlgebraicJulia/StockFlow.jl.

1

 
 
 
 
 
 
Figure 1: An example stock-ﬂow diagram. This stock-ﬂow diagram has three stocks labeled “Sus-
ceptible”, “Infective”, and “Recovered”; three ﬂows labeled “Infection”, “Recovery”, and “Waning
of Immunity”; many auxiliary variables including “Force of Infection” and “Total Population”;
and links depicted by blue arrows.

2 Epidemiological modeling with stock and ﬂow diagrams

Eﬀective decision-making regarding prevention, control, and service delivery to address the health
needs of the population involves reasoning about diverse complexities: policy resistance, feed-
backs, heterogeneities, multi-condition interactions, and nonlinearities that collectively give rise
to counterintuitive results [28, 30]. For over a century, researchers and practitioners have used
epidemiology models to address such challenges. Since dynamic epidemiological modeling was ﬁrst
applied to communicable diseases [24, 25, 17], it has both deepened its reach in that area [2, 8] and
spread to many other subdomains of epidemiology, including chronic, behavioural, environmental,
occupational, and social epidemiology, as well as spheres such as mental health and addictions.
Reﬂecting a world in which growing global interconnection is juxtaposed with increasing ecosystem
encroachment and climate stresses, the rise of the “One Health” perspective [7, 21] has motivated
such modeling to increasingly incorporate dynamics from domains such as ecology, veterinary and
agricultural health, and social dynamics and inequities. Such eﬀorts have come to deﬁne the ﬁeld
of mathematical and computational epidemiology.

The earliest and still most common epidemiological models are sets of ordinary diﬀerential
equations, typically used to characterize epidemiological dynamics in an aggregate fashion [2]. De-
lay and partial diﬀerential equations have also been widely applied. Recent decades have witnessed
a rapid growth in use of agent-based models. Although the techniques explored here may be more
widely applicable, we focus on aggregate models described using diﬀerential equations.

Contemporary aggregate-level modeling involves widespread informal use of diagrams, with the
most prevalent type of such diagrams being transition diagrams and their richer and more formal
cousins, “stock and ﬂow diagrams” [29], as depicted in Figure 1. Transition diagrams are a min-
imalist box-and-arrow formalism which draws state variables as boxes and transitions as arrows.
Traditionally, most mathematical epidemiologists have focused directly on the underlying diﬀeren-
tial equations, regarding such diagrams only as an informal presentation of the equations. Thus,
diagrams are commonly treated either as ephemeral artifacts useful for thinking out structures and
then discarded, or as an expedient aid for communication.

Amongst the notable minority of health modelers who employ stock and ﬂow diagrams (also
called “Forrester diagrams”, and termed here “stock-ﬂow diagrams” for brevity), these diagrams

2

play roles at diﬀerent stages of the modeling process. Stock-ﬂow diagrams depict state variables
as stocks (rectangles), changes to those stocks as ﬂows (thick arrows also termed “material con-
nections”), constants and auxiliary variables (also called “dynamic variables”), and links (arrows
sometimes called “informational connections” or simply “connections”) characterizing instanta-
neous dependencies.

Stock-ﬂow diagrams serve as the central formalism in the modeling tradition of System Dy-
namics, initiated by Forrester in the 1950s [12, 29]. Since the 1980s, System Dynamics software
has provided reﬁned, visually accessible, declarative user interfaces for interactively building, and
browsing stock-ﬂow diagrams [23]. While such packages are designed to ensure transparency of
model structure to modelers and stakeholders [23], they also serve as simulation tools. For that
purpose, the System Dynamics tradition universally interprets stock-ﬂow diagrams as characteriz-
ing ordinary diﬀerential equations. Stocks represent the state variables; their formulation requires
specifying an initial value. Flows represent the diﬀerentials associated with stocks, and are each
associated with a modeler-speciﬁed mathematical expression specifying the ﬂow rate (quantity per
unit time) as a function of other variables. Each constant variable is associated with a real scalar.
Auxiliary variables generally reﬂect quantities of domain signiﬁcance that depend instantaneously
on other model quantities. Each such auxiliary value is associated with a modeler-speciﬁed expres-
sion characterizing the value of that auxiliary as a function of the current value of other variables
(stocks, ﬂows, constants and other auxiliary variables).

Reﬂecting the strong emphasis that System Dynamics practice places on stakeholder engage-
ment and participatory model building, models built in the stock-ﬂow paradigm are routinely
shown to stakeholders without modeling background—be they domain experts from a modeling
team, stakeholders, or community members—to elicit critiques and suggestions [23, 31, 15]. System
Dynamics has also long sought to recognize, codify, and exploit widespread use of modeling idioms.
Thus, researchers and practitioners have formalized dozens of simple stock-ﬂow diagrams called
“molecules” for reuse in modeling [14]. Some simulation packages provide support for directly
incorporating templates for such molecules into models; in this case, the elements of the molecule
are simply added as elements of the surrounding diagram, rather than being reused as higher level
abstractions.

Software packages for stock-ﬂow diagrams have as a central feature the simulation, via numerical
integration, of the system of ordinary diﬀerential equations described by these diagrams. Many
such packages also oﬀer additional forms of model analysis, including identiﬁcation of feedback
loops, performing tests of dimensional homogeneity based on modeler unit annotations, sensitivity
analysis and calibration. Some tools support more sophisticated forms of analysis, such as those
involving Markov Chain Monte Carlo and extended Kalman ﬁltering. But while existing stock-
ﬂow modeling tools oﬀer reﬁned interfaces for building, exploring and simulating models, their
support for modern modeling practice is hampered by signiﬁcant rigidity and several additional
shortcomings. The present paper focuses on addressing two limitations of contemporary tools.

First, and most notable from a categorical perspective, existing tools lack support for compo-
sition of models, despite there being several natural ways in which models might be composed.
Instead, each model is currently treated in isolation. If models are composed at all, it is by either
outputting data ﬁles from one and importing such data into another, or by creating, via an ad hoc
process, a third model that contains both of the original models.

Second, existing stock-ﬂow modeling tools privilege a single semantics associated with stock-
ﬂow diagrams: the interpretation of these diagrams as ordinary diﬀerential equations. While alter-
native interpretations can sometimes be force-ﬁt—for example, a diﬀerence equation interpretation
by using Euler integration, or a stochastic diﬀerential equation interpretation using formulas for
ﬂows drawing from suitable probability distributions—they are commonly awkward, obscure, and
error-prone. Although particular packages allow for select additional analyses—for example, iden-
tiﬁcation of feedback loops—such features are hard-coded, and many analysis tools demonstrated
as valuable by research [26, 13, 16] have not been incorporated in extant software packages.

We turn next to a mathematical framework that provides a remedy for these deﬁciencies: an
explicitly compositional framework where “open” stock-ﬂow diagrams become morphisms in a
category and where semantics is described as a functor from this category to some other category.
For reasons of space we only describe one choice of semantics, but the clear separation of syntax
and semantics permits swapping out this choice for others.

3

3 The mathematics of stock-ﬂow diagrams

Stock-ﬂow diagrams come in many variants. To illustrate our methodology we begin with a very
In our code we have implemented a more sophisticated variant with additional
simple kind.
features, but the ideas are easier to explain without those features. Our main goal is to study
open stock-ﬂow diagrams—that is, stock-ﬂow diagrams in which various stocks are speciﬁed as
“interfaces.” We can treat open stock-ﬂow diagrams with two interfaces as morphisms of a category.
Composing these morphisms then lets us build larger diagrams from smaller ones. Alternatively, we
can compose stock-ﬂow diagrams with any number of interfaces using an operad. Both approaches
let us describe the diﬀerential equation semantics for open stock-ﬂow diagrams following a paradigm
already explored for open Petri nets with rates [5, 4]. We describe that paradigm here.

3.1 A category of stock-ﬂow diagrams

As a ﬁrst step, we deﬁne “primitive” stock-ﬂow diagrams with stocks, ﬂows, and links but not
the all-important functions that describe the rate of each ﬂow. For this, we consider a category H
freely generated by these objects and morphisms:

ﬂow

u

d

stock

t

s

link

We call a functor F : H → FinSet a primitive stock-ﬂow diagram. It amounts to the following:

• a ﬁnite set of stocks F (stock),

• a ﬁnite set of ﬂows F (ﬂow),

• functions F (u), F (d) : F (ﬂow) → F (stock) assigning to each ﬂow the stock upstream from

it, and the stock downstream from it,

• a ﬁnite set of links F (link),

• functions F (s) : F (link) → F (stock), F (t) : F (link) → F (ﬂow) assigning to each link its

source, which is a stock, and its target, which is a ﬂow.

Given f ∈ F (ﬂow), we say f ﬂows from the upstream stock F (u)(f ) and ﬂows to the downstream
stock F (d)(f ). We say that a link (cid:96) ∈ F (link) points from its source and F (s)((cid:96)) and points to
its target F (t)((cid:96)). There is a category of primitive stock-ﬂow diagrams, FinSetH, where the objects
are functors from H to FinSet and a morphism from F : H → FinSet to G : H → FinSet is a natural
transformation.

Primitive stock-ﬂow diagrams are useful for qualitative aspects of modeling, since they clearly
show which ﬂows depend on which stocks; as such, they can be seen as a restricted form of
system structure diagrams [20, 9] used in System Dynamics practice. But they become useful for
quantitative modeling and simulation only when we equip them with functions saying how the rate
of each ﬂow depends on the value of each stock. Thus, we deﬁne a stock-ﬂow diagram to be a
pair (F, φ) consisting of an object F ∈ FinSetH and a continuous function called a ﬂow function

φf : RF (t)−1(f ) → R

for each ﬂow f ∈ F (ﬂow), where F (t)−1(f ) is the set of links with target f :

F (t)−1(f ) = {(cid:96) ∈ F (link) | F (t)((cid:96)) = f }.

The idea is that the ﬂow function φf says how the rate of the ﬂow f depends on the values of
all the stocks with links pointing to it. We make this precise in Section 3.4 when we introduce a
semantics that maps each stock-ﬂow diagram to a ﬁrst-order diﬀerential equation. But rates and
values play no formal role in this section.

4

Figure 2: At left is a stock-ﬂow diagram (F, φ) with stocks S, I, R, D corresponding to susceptible,
infected, recovered and deceased populations and ﬂows i, r, d corresponding to infection, recovery
and death. Links are shown in blue. At right we see a simpler stock-ﬂow diagram (G, ψ) where
recovered and deceased populations are lumped into a single removed stock E, and recovery and
death are lumped into a single removal ﬂow e. There is an evident morphism α : (F, φ) → (G, ψ)
sending R and D to E and sending r and d to e.

To deﬁne a category of stock-ﬂow diagrams, we need to deﬁne morphisms between them. What
is a morphism from (F, φ) to (G, ψ)? It is a natural transformation α : F ⇒ G with an extra
property. Because α is natural, we get a commutative square

F (link)

α(link)

G(link)

F (t)

G(t)

.

F (ﬂow)

α(ﬂow)

G(ﬂow)

Thus, writing α(ﬂow)(f ) = g for f ∈ F (ﬂow) and g ∈ G(ﬂow), we get a map

and thus a linear map

given by precomposition:

α(link) : F (t)−1(f ) → G(t)−1(g)

α(link)∗ : RG(t)−1(g) → RF (t)−1(f )

α(link)∗(x) = x ◦ α(link).

We say that α is a morphism of stock-ﬂow diagrams from (F, φ) to (G, ψ) if

ψg =

(cid:88)

φf ◦ α(link)∗

f ∈α(ﬂow)−1(g)

(1)

for every g ∈ G(ﬂow). This equation expresses rates of ﬂows in (G, ψ) as sums of rates of ﬂows
in (F, φ). For example, Figure 2 shows a morphism of stock-ﬂow diagrams in which two ﬂows,
“recovery” r and “death” d, are mapped to a single “removal” ﬂow e. The above equation implies
that

ψe = φr ◦ α(link)∗ + φd ◦ α(link)∗.

This equation says that the rate of the ﬂow e is the sum of the rates of r and d.

Composition of morphisms between stock-ﬂow diagrams is just composition of their underlying
natural transformations; one can show that indeed the composite of two natural transformations
obeying Eq. (1) again obeys this equation. We thus obtain a category of stock-ﬂow diagrams,
which we call StockFlow.

3.2 Open stock-ﬂow diagrams

We can build larger stock-ﬂow diagrams by gluing together smaller ones. There are a number of
choices of how to formalize this. Here we glue together two stock-ﬂow diagrams by identifying two
collections of stocks to serve as “interfaces.” Thus, we deﬁne an open stock-ﬂow diagram with

5

ﬁnite sets X and Y as interfaces to be a stock-ﬂow diagram (F, φ) equipped with functions from
X and Y to its set of stocks:

F (stock)

i

o

X

Y

We call this an open stock-ﬂow diagram from X to Y and write it tersely as (F, φ) : X → Y ,
despite the maps i and o being a crucial part of the structure.

We can compose open stock-ﬂow diagrams from X to Y and from Y to Z to obtain one from X to
Z. To formalize this composition process we use Fong’s theory of decorated cospans [10]. However,
to make composition associative and get a category we need to use isomorphism classes of open
stock-ﬂow diagrams as morphisms. Two open stock-ﬂow diagrams (F, φ) and (F (cid:48), φ(cid:48)) from X to Y
are called isomorphic if there exists an isomorphism of stock-ﬂow diagrams α : (F, φ) → (F (cid:48), φ(cid:48))
such that this diagram commutes:

F (stock)

X

i

i(cid:48)

α(stock)

F (cid:48)(stock)

o

o(cid:48)

Y

Using the theory of decorated cospans, we obtain:

Theorem 3.1. There is a category Open(StockFlow) such that:

• An object is a ﬁnite set X.

• A morphism from X to Y is an isomorphism class of open stock-ﬂow diagrams from X to Y .

This is a symmetric monoidal category, indeed a hypergraph category.

Proof Sketch. This follows from the theory of decorated cospans [10] once we check the following
facts. For each ﬁnite set there is a category C(S) whose

• objects are stock-ﬂow diagrams with S as their set of stocks, and

• morphisms are morphisms α of stock-ﬂow diagrams where α(stock) is the identity on S.

Let C(S) be the set of isomorphism classes of objects in this category. A map of ﬁnite sets
f : S → S(cid:48) functorially determines a map from C(S) to C(S(cid:48)), and the resulting functor C is
symmetric lax monoidal from (FinSet, +) to (Set, ×), where the laxator

γ : C(S) × C(S(cid:48)) → C(S + S(cid:48))

maps a pair of stock-ﬂow diagrams to their “disjoint union.” It follows from [10, Prop. 3.2] that
we get the desired symmetric monoidal category Open(StockFlow), and from [10, Thm. 3.4] that
this is a hypergraph category.

The point of making open stock-ﬂow diagrams into the morphisms of a hypergraph category is
that it gives ways of composing these diagrams that are more ﬂexible than just composing them
“end-to-end” (ordinary composition of morphisms) and “side-by-side” (a parallel arrangement
Indeed, hypergraph categories are algebras of an operad, sometimes
expressed by tensoring).
called the operad of undirected wiring diagrams, that encapsulates a wide range of composition
strategies [11]. We use this approach in our code, and instead of working with decorated cospans we
actually use decorated multicospans [27, 19], a mild generalization that allows for open stock-ﬂow
diagrams with any number of interfaces, not just two.

6

3.3 Open dynamical systems

Our next goal is to deﬁne a semantics for stock-ﬂow diagrams mapping each such diagram to a
dynamical system: a system of diﬀerential equations that describes the continuous-time evolution
of the value of each stock. This semantics is implicit in the usual applications of stock-ﬂow
diagrams; indeed, the stock-ﬂow diagram is sometimes regarded merely as a convenient notation
for a dynamical system. While we illustrate the choice of a semantics for stock-ﬂow diagrams using
the continuous dynamical system interpretation, this semantics holds no privileged status, and
there several other semantics of practical value that could be employed instead.

In fact, our semantics is more general than suggested above: we describe a map from open
stock-ﬂow diagrams to open dynamical systems. Our strategy for deﬁning this semantics closely
follows the strategy already used for open Petri nets with rates [3, 5, 4] and implemented for
epidemiological models using AlgebraicJulia [18].

For Petri nets with rates, the dynamics is typically described by the “law of mass action,”
which only produces dynamical systems that are polynomial-coeﬃcient vector ﬁelds on Rn.
In
stock-ﬂow diagrams this restriction is dropped, but the rate of any ﬂow out of its upstream stock
equals the rate of ﬂow into its downstream stock, so the total value of all stocks is conserved.
However, the more general stock-ﬂow diagrams of Section 3.5 no longer obey this conservation law,
since they allow “inﬂows” and “outﬂows” to the diagram as a whole. With these generalizations,
stock-ﬂow diagrams become strictly more general than Petri nets with rates—at least in terms of
the dynamical systems they can describe.

We begin by deﬁning a dynamical system on a ﬁnite set S to be a continuous vector ﬁeld
v : RS → RS. In our applications, S will be the set of stocks of some stock-ﬂow model, and the
vector ﬁeld v is used to write down a diﬀerential equation describing the dynamics:

dx(t)
dt

= v(x(t))

where at each time t, the vector x(t) ∈ RS describes the value of each stock at time t. Since the
vector ﬁeld is continuous, the Peano existence theorem implies that, for any initial value x(0) ∈ RS,
the above equation has a solution for all t in some interval (−(cid:15), (cid:15)). However, the solution may not
be unique unless we require that v be nicer. The theory we develop now can be modiﬁed to add
extra restrictions, simply by replacing continuous functions with functions of a suitably nicer sort.
We deﬁne an open dynamical system from the ﬁnite set X to the ﬁnite set Y to be a pair
(S, v), consisting of a ﬁnite set S and a dynamical system v on S, together with functions from X
and Y into S. We depict this as follows:

S

i

o

v ∈ D(S)

X

Y

where D(S) is the set of all dynamical systems on S. Two open dynamical systems (S, v) and
(S(cid:48), v(cid:48)) from X to Y are isomorphic if there is a bijection β : S → S(cid:48) such that the following
diagram commutes:

X

i

i(cid:48)

S

β

S(cid:48)

o

o(cid:48)

Y

v ∈ D(S)

v(cid:48) ∈ D(S(cid:48))

and β∗ ◦ v ◦ β∗ = v(cid:48), where β∗ : RS → RS(cid:48)

is the pushforward map deﬁned by

β∗(x)(σ(cid:48)) =

(cid:88)

x(σ)

∀x ∈ RS, σ(cid:48) ∈ S(cid:48).

σ∈β−1(σ(cid:48))

We can then construct a category where objects are ﬁnite sets and morphisms from X to Y are
isomorphism classes of open dynamical systems from X to Y . This was done in [5, Theorem 17]
by applying Fong’s theory of decorated cospans to a functor D : FinSet → Set sending any ﬁnite
set S to the set D(S) of dynamical systems on S:

7

Theorem 3.2 (Baez–Pollard). There is a category Open(Dynam) such that:

• An object is a ﬁnite set X.

• A morphism from X to Y is an isomorphism class of open dynamical systems from X to Y .

This is a symmetric monoidal category, indeed a hypergraph category.

3.4 Open dynamical systems from open stock-ﬂow diagrams

Next we describe a functor sending any open stock-ﬂow diagram to an open dynamical system.
Suppose we have an open stock-ﬂow diagram (F, φ) : X → Y , equipped with the cospan

S

i

o

X

Y

where S = F (stock). Then there is an open dynamical system v(F, φ) on S given by

v(F, φ)(x)(σ) =

(cid:88)

φf (x ◦ F (s)) −

(cid:88)

φf (x ◦ F (s))

∀x ∈ RS, σ ∈ S.

(2)

f ∈F (d)−1(σ)

f ∈F (u)−1(σ)

This formula looks a bit cryptic, so let us explain it. Taking the expression RS seriously, we can
think of x ∈ RS as a real-valued function on the set S of stocks. Each ﬂow f ∈ F (ﬂow) has a set
F (t)−1(f ) of links with f as target, so there is an inclusion of sets F (t)−1(f ) (cid:44)→ F (link), and we
can thus form the composite

F (t)−1(f ) (cid:44)→ F (link)

F (s)
−−−→ F (stock) x−→ R

which for short we call simply

x ◦ F (s) ∈ RF (t)−1(f ).

For each link (cid:96) with f as its target, this composite gives the value of the stock that is (cid:96)’s source.
Applying the function φf : RF (t)−1(f ) → R, we obtain the rate of the ﬂow f :

φf (x ◦ F (s)) ∈ R.

This quantity has the eﬀect of increasing the stock d(f ) and also decreasing the stock u(f ). Thus
the rate of change of any stock σ ∈ S is

(cid:88)

φf (x ◦ F (s)) −

(cid:88)

φf (x ◦ F (s)).

f ∈F (d)−1(σ)

f ∈F (u)−1(σ)

This gives our formula for v(F, φ) in Equation (2).

Now, recall that in Theorem 3.1 the category of open stock-ﬂow diagrams was deﬁned as a
decorated cospan category using the functor C : FinSet → Set, while in Theorem 3.2 the category
of open dynamical systems was deﬁned in a similar way using the functor D : FinSet → Set.
According to the theory [10], to obtain a semantics mapping open stock-ﬂow diagrams to open
dynamical systems, we need to deﬁne a natural transformation θ : C ⇒ D. We do this as follows:
for each ﬁnite set S, deﬁne θ(S) to map the isomorphism class (F, φ) in C(S) to the isomorphism
class of v(F, φ) in D(S).

Theorem 3.3. There is a functor

v : Open(StockFlow) → Open(Dynam)

sending

• any ﬁnite set to itself,

8

• the isomorphism class of the stock-ﬂow diagram (F, φ) made open as follows:

F (stock)

i

o

X

Y

to the isomorphism class of the open dynamical system

F (stock)

v(F, φ) ∈ D(S).

i

o

X

Y

This is a symmetric monoidal functor, indeed a hypergraph functor.

Proof Sketch. By [10, Thm. 4.1] it suﬃces to check that θ : C ⇒ D is indeed a natural transfor-
mation and furthermore a monoidal natural transformation.

3.5 Full-ﬂedged stock-ﬂow diagrams

In Section 3.1 we deﬁned a simple category of stock-ﬂow diagrams, called StockFlow. Stock-ﬂow
diagrams of this type capture two main features of the diagrams used by practitioners: (1) ﬂows
between stocks and (2) links that represent the dependency of ﬂow rates on the values of particular
stocks. However, the stock-ﬂow diagrams used in epidemiological modeling have additional useful
features. Our “full-ﬂedged” stock-ﬂow diagrams include auxiliary variables, sum variables, and
partial ﬂows.

Auxiliary variables are quantities on which ﬂow functions can depend. An auxiliary variable is
linked to stocks and other auxiliary variables and is equipped with an arbitrary continuous function
of the values of stocks and variables to which it is linked. In Figure 1, “Fractional Prevalence”,
“Force of Infection”, and “Infection” are all examples of auxiliary variables. Auxiliary variables
are important to practitioners for several reasons. First, they simplify model speciﬁcation because
they are reusable: instead of computing each ﬂow rate directly as a function of stocks, we can often
compute them more simply with the help of auxiliary variables. Many ﬂow rates can depend on a
single auxiliary variable. Second, they often represent quantities that are of interest to stakeholders;
representing these quantities explicitly make them easier to track throughout a simulation, such as
for comparison with empirical data. Third, they are practical for the communication and revision of
models. Auxiliary variables give a meaningful decomposition of the ﬂow functions, and changing
a single auxiliary variable automatically revises all the ﬂow functions that depend on it, which
eliminates the need to revise all these ﬂow functions separately.

While not explicitly distinguished in current stock-ﬂow modeling packages, ﬂow functions often
rely on a special case of auxiliary variables called sum variables. Such a variable equals the sum
of the values of some subset of the stocks. In epidemiology, this frequently corresponds to the size
of a population or sub-population. For example, “Total Population” in Figure 1 is a sum variable.
In general, a sum variable may link to only a subset of stocks. Sum variables can be seen as a
particular type of auxiliary variable in which the function merely sums the values of the stocks to
which it is linked—and thanks to this fact, we do not need to label sum variables with functions.
Finally, in the simple stock-ﬂow diagrams described earlier, each ﬂow must have an upstream
stock and a downstream stock. However, practitioners often use diagrams including partial ﬂows,
which may have only an upstream stock or only a downstream stock. These represent the creation
or the destruction of some resource, and are commonly used to represent open populations.

Figure 3 presents the category Hf used to deﬁne full-ﬂedged stock-ﬂow diagrams. A full-

ﬂedged stock-ﬂow diagram is a pair (F, φ) consisting of:

• a functor F : Hf → FinSet such that the functions F (if) and F (of) are injective;

• a continuous function φv : RF (lv)−1(v) × RF (slv)−1(v) → R for each v ∈ F (variable), called an

auxiliary function.

9

sum link

sum variable

stock

is

os

variable link

sum variable link

lv

slv

variable

inﬂow

outﬂow

if

of

ﬂow

fv

Figure 3: The free category on this diagram, called Hf , is used to deﬁne full-ﬂedged stock-ﬂow
diagrams. We have named only some of the arrows here.

The elements of F (variable) are called auxiliary variables. The idea is that in a full-ﬂedged
stock-ﬂow diagram each ﬂow has its rate equal to some auxiliary variable. Each auxiliary variable
can depend on any ﬁnite multiset of sum variables and stocks, and each sum variable can depend
on any ﬁnite multiset of stocks.

Given an inﬂow f ∈ F (inﬂow), we say that the stock F (is)(f ) is the upstream stock of the
ﬂow F (if)(f ). Similarly, given an outﬂow f ∈ F (outﬂow), the stock F (os)(f ) is the downstream
stock of the ﬂow F (of)(f ). The injectivity of F (if) and F (of) ensure that each ﬂow has at most
one upstream stock and at most one downstream stock. Flows having an upstream stock but not
a downstream stock or vice versa are called partial ﬂows.

Following the ideas of Section 3.1, we can deﬁne a category StockFlowf of full-ﬂedged stock-ﬂow
diagrams. It is useful to glue together such diagrams not only along stocks but also along sum
variables and sum links, for example to keep track of the total population in an epidemiological
model. We can still do this using decorated cospans if we introduce the category FinSetG, where G
is the free category on this diagram:

stock

sum link

sum variable.

There is an evident inclusion functor ι : G → Hf , so any functor F ∈ FinSetHf restricts to a functor
F ◦ι ∈ FinSetG, and we deﬁne an open full-ﬂedged stock-ﬂow diagram to be a full-ﬂedged stock-ﬂow
diagram (F, φ) equipped with a cospan

F ◦ ι

i

o

X

Y

where X, Y ∈ FinSetG. With this adjustment we can deﬁne a category Open(StockFlowf ) of open
full-ﬂedged stock-ﬂow diagrams following the ideas in Section 3.2. Most importantly, in analogy
to Theorem 3.3, there is a functor

v : Open(StockFlowf ) → Open(Dynam)

providing a semantics for open full-ﬂedged stock-ﬂow diagrams. We have implemented full-ﬂedged
stock-ﬂow diagrams and this semantics in our Julia package StockFlow (below) —but for simplicity,
Section 4 only discusses the simpler stock-ﬂow diagrams treated in Sections 3.1–3.3.

4

Implementing stock-ﬂow diagrams in AlgebraicJulia

Existing tools for building stock-ﬂow diagrams and simulating the systems they represent suﬀer
from several limitations. In Section 2, we singled out two: an absence of compositionality, which
it makes it diﬃcult to build complex models in an intelligible manner, and a blurring of the
distinction between syntax and semantics, which inhibits the reusability and interoperability of
stock-ﬂow diagrams in diﬀerent contexts. In Section 3, we addressed both these problems at the

10

mathematical level, the ﬁrst by constructing a category of open stock-ﬂow diagrams, and the
second by constructing a functor from this category into a category of open dynamical systems,
whose objects are systems of diﬀerential equations. We now describe our implementation of these
mathematical structures as new software for System Dynamics modeling.

Our software, available at https://github.com/AlgebraicJulia/StockFlow.jl as the open
source package StockFlow, is implemented using AlgebraicJulia [1], a family of packages for applied
category theory written in the Julia programming language [6]. The AlgebraicJulia ecosystem con-
sists of Catlab, which implements many standard abstractions in category theory, and a collection
of packages which apply these abstractions to speciﬁc domains of science and engineering. Most
relevant to this article are AlgebraicDynamics [19], implementing open dynamical systems based
on ordinary and delay diﬀerential equations, and AlgebraicPetri [18], implementing Petri nets with
rates and their ODE semantics.

Existing capabilities within AlgebraicJulia, based on general category-theoretic abstractions,
enable us to give an economical implementation of stock-ﬂow diagrams. The combinatorial essence
of stock-ﬂow diagrams—what we called primitive stock-ﬂow diagrams in Section 3.1—are set-valued
functors on a certain category H, or H-sets. Such structures are encompassed by the paradigm of
categorical databases, for which Catlab has extensive support [22]. Subject to one caveat, stock-
ﬂow diagrams — including the ﬂow functions — can also be implemented as categorical databases.
In this way, the syntax of stock-ﬂow diagrams manifests as combinatorial data structures that
can be manipulated algorithmically through high-level operations such as limits and colimits. We
implement open stock-ﬂow diagrams using structured cospans [3], for which Catlab again provides
generic support. These aspects of the implementation are elaborated in the following subsections.

4.1 Stock-ﬂow diagrams as categorical databases

In Section 3.1 we deﬁned a primitive stock-ﬂow diagram to be an H-set for a certain category H,
called the schema for these diagrams. In Catlab, we present this schema as:

@present SchPrimitiveStockFlow(FreeSchema) begin

(Stock, Flow, Link)::Ob
(up, down)::Hom(Flow, Stock)
src::Hom(Link, Stock)
tgt::Hom(Link, Flow)

end

To deﬁne stock-ﬂow diagrams, we need to add a data attribute for the ﬂow functions. In general,
data attributes [22] are a practical necessity and the main feature that distinguishes categorical
databases from the standard mathematical notion of a C-set, meaning a functor from C to Set. In
this case, we extend the schema with an attribute type and a data attribute:

@present SchStockFlow <: SchPrimitiveStockFlow begin

FlowFunc::AttrType
flow::Attr(Flow, FlowFunc)

end

Having deﬁned the schema, we can generate a Julia data type for stock-ﬂow diagrams with this

single line of code:

@acset_type StockFlow(SchStockFlow, index=[:up, :down, :src, :tgt])

where the indices are generated for morphisms in the schema to enable fast traversal of stock-
ﬂow diagrams. A stock-ﬂow diagram will then have the Julia type StockFlow{Function}, where
Function is the built-in type for functions in Julia. We see that there is a gap between the
mathematical deﬁnition of stock-ﬂow diagrams and the present implementation: the domains of
the ﬂow functions should be constrained by the links, but this constraint is not yet expressible in
the data model supported by Catlab. In practice this is not a major obstacle to using stock-ﬂow
diagrams, but it could motivate future work toward increasing the expressivity of database schemas
and instances in Catlab.

The full-ﬂedged stock ﬂow diagrams described in Section 3.5 are implemented similarly.

11

4.2 Composition using structured cospans

While the mathematics described in Section 3 uses decorated cospans, we can also describe open
stock-ﬂow diagrams using structured cospans [3, 4]. A structured cospan is a diagram of the form

X

i

o

L(A)

L(B)

in some category X, where A, B are objects in some other category A, and L : A → X is a functor.
When L is a left adjoint, we can equivalently think of a structured cospan as a diagram

R(X)

i

o

A

B

where R is the right adjoint of L.

For example, we can take A = FinSet, take X = FinSetH, and take R : FinSetH → FinSet
to be the functor sending any primitive stock-ﬂow diagram to its set of stocks.
In this case,
a structured cospan amounts to an open primitive stock-ﬂow diagram, that is a primitive
stock-ﬂow diagram F : H → FinSet together with functions

F (stock)

i

o

A

B.

With more work we can deﬁne a structured cospan category equivalent to Open(StockFlow). The
advantage of this change in viewpoint is that Catlab already provides a generic framework for
working with structured cospans and multicospans—and it implements the composition operations
available in both the hypergraph category of structured cospans and the operad algebra of struc-
tured multicospans. In addition, Catlab includes a concrete instantiation of structured cospans
for systems deﬁned by attributed C-sets. This makes it possible, for a broad class of systems, to
use structured cospans in a just few lines of code. This is the approach taken in StockFlow and
also its companion package AlgebraicPetri. In order to support the implementation of full-ﬂedged
stock-ﬂow diagrams, we expanded the implementation of structured multicospans in Catlab so that
the feet in a multicospan can be arbitrary C-sets as opposed to merely ﬁnite sets.

4.3 Composing epidemiological models: an example

The Julia package StockFlow implements both the open stock-ﬂow diagrams of Section 3.2 and
the full-ﬂedged open stock-ﬂow diagrams of Section 3.5. We now illustrate the use of this package
by constructing a simpliﬁed version of a COVID-19 model that has has been employed during
the pandemic for daily reporting and planning throughout the Province of Saskatchewan, and for
weekly reporting by Public Health Agency of Canada for each of Canada’s ten provinces, as well as
by First Nations and Inuit Health for reporting to provincial groupings of First Nations Reserves.
We build this simpliﬁed model as the composite of three component models: (A) a model of the
natural history of infection, pathogen transmission, and hospitalization, (B) a model of vaccination,
and (C) a model of the natural history of infection among asymptomatic or oligosymptomatic
individuals. To exhibit the ideas with a minimum of complexity, we use the simpler open stock-
ﬂow diagrams discussed in Sections 3.1-3.4, not the full-ﬂedged ones.

The top of Figure 4 shows the open stock-ﬂow diagrams for three models. Although the ﬂow
functions are omitted from the ﬁgure, they are deﬁned in the Jupyter notebook implementing
this example.2 Model (A) is the SEIRH (Susceptible-Exposed-Symptomatic Infectious-Recovered-
Hospitalized) model, which simulates the disease transmission from, course of infection amongst,

2Readers interested in the code for this example can refer to https://github.com/AlgebraicJulia/StockFlow.
the

jl/blob/master/examples/primitive_schema_examples/Covid19_composition_model_in_paper.ipynb
GitHub repository for StockFlow.

on

12

Figure 4: Example of composing a COVID-19 model from three smaller models

and hospitalization of symptomatically infected individuals. The stocks labelled “HICU” and
“HNICU” represent the populations of hospitalized ICU and non-ICU patients, respectively. Model
(B) characterizes vaccination-related dynamics. The stock “VP” represents individuals who are
partially protected via vaccination, due to having been administered only a ﬁrst dose or to waning
of previously full vaccine-induced immunity. In contrast, the stock “VF” represents individuals
who are fully vaccinated by virtue of having received two or more doses of the vaccine. Notably,
neither partially or fully vaccinated individuals are considered fully protected from infection. Thus,
there are ﬂows from stock “VP” and “VF” to “E” that represent new infection of vaccinated indi-
viduals. Model (C) characterizes the natural history of infection in individuals who are persistently
asymptomatic. The stock “IA” indicates the infected individuals without any symptoms.
The ODEs ﬁnally generated from the composite stock-ﬂow diagram are as follows:

+

˙S =

R
tw
˙I = riE −

VP
tw
I
tr
˙IA = riaE −

−

βSI
N

− rvS

˙E =

˙R =

+

βSI
N
(1 − fH )I
tr

β(1 − ep)IVP
N
IA
tr

+

+

β(1 − ef )IVF
N
R
tw

−

− riaE − riE

IA
tr

˙VF = rvVP −

VF
tw

−

+

HNICU
tH
β(1 − ef )IVF
N

˙HICU =

fH fICUI
tr

−

HICU
tICU

˙VP = rvS +

˙HNICU =

VF
tw
HICU
tICU

−

+

− rvVP −

VP
tw
fH (1 − fICU)I
tr

β(1 − ep)IVP
N
HNICU
tH

−

A plot of a solution of these equations is shown in Figure 6. In our software, the initial values
and values of parameters are deﬁned separately from the stock-ﬂow diagram. This design enables
the users to ﬂexibly deﬁne and explore multiple scenarios involving the same dynamical system,
in a manner similar to some existing stock-ﬂow modeling packages. For example, the parameter
values used in Figure 6 are from Canada’s population. We can eﬃciently run this model on other

13

Figure 5: The undirected wiring diagram representing composing structured multicospans

Figure 6: A simulation of the composite COVID-19 model

populations (e.g., the United States) by changing these parameter values.3

This particular COVID-19 model simpliﬁes the structure and assumptions of the model used in
practice. Our example omits features such as characterization of active case-ﬁnding, diagnosis and
reporting, mortality, and transmission by asymptomatic/oligosymptomatic individuals, because
the simpliﬁed stock-ﬂow diagrams do not support auxiliary variables, sum variables, and partial
ﬂows. However, our StockFlow package implements the full-ﬂedged stock-ﬂow diagrams deﬁned in
Section 3.5, and hence enables the application of these additional features.

Acknowledgments Author Osgood wishes to express his appreciation to SHA, PHAC and FNIH
for support of varying elements of this work, to SYK, and to NSERC for support via the Discovery
Grants program (RGPIN 2017-04647). Patterson acknowledges support from AFOSR (Award
FA9550-20-1-0348). Baez and Libkind thank the Topos Institute for their support.

3Readers interested in the code for this example can refer to https://github.com/AlgebraicJulia/StockFlow.
the

jl/blob/master/examples/primitive_schema_examples/Covid19_composition_model_in_paper.ipynb
GitHub repository for StockFlow.

on

14

References

[1] AlgebraicJulia team. AlgebraicJulia: Bringing compositionality to technical computing. Avail-

able at https://www.algebraicjulia.org.

[2] R. M. Anderson and R. M. May. Infectious Diseases of Humans: Dynamics and Control.

Oxford University Press, 1992.

[3] J. C. Baez and K. Courser. Structured cospans. Theor. Appl. Categ., 35:1771–1822, 2020.

Available at arXiv:1911.04630.

[4] J. C. Baez, K. Courser, and C. Vasilakopoulou. Structured versus decorated cospans. Com-

positionality, 4(3), 2022. Available at arXiv:2101.09363.

[5] J. C. Baez and B. S. Pollard. A compositional framework for reaction networks. Reviews in

Mathematical Physics, 29(09):1750028, 2017. Available at arXiv:1704.02051.

[6] J. Bezanson, A. Edelman, S. Karpinski, and V. B. Shah. Julia: A fresh approach to numerical

computing. SIAM Review, 59(1):65–98, 2017.

[7] D. Destoumieux-Garz´on, P. Mavingui, G. Boetsch, J. Boissier, F. Darriet, et al. The One
Health concept: 10 years old and a long road ahead. Frontiers in Veterinary Science, page 14,
2018.

[8] O. Diekmann and J. A. P. Heesterbeek. Mathematical Epidemiology of Infectious Diseases:

Model Building, Analysis and Interpretation, volume 5. John Wiley & Sons, 2000.

[9] V. Faghihi, A. R. Hessami, and D. N. Ford. Sustainable campus improvement program design
using energy eﬃciency and conservation. Journal of Cleaner Production, 107:400–409, 2015.

[10] B. Fong. Decorated cospans. Theor. Appl. Categ., 30(33):1096–1120, 2015. Available at

arXiv:1502.00872.

[11] B. Fong and D. I. Spivak. Hypergraph categories, 2018. Available at arXiv:1305.0297.

[12] J. W. Forrester. Industrial Dynamics. Pegasus Communications, 1961.

[13] B. Guneralp, J. D. Sterman, N. P. Repenning, R.S. Langer, J. I. Rowe, and J.M. Yanni.
Progress in eigenvalue elasticity analysis as a coherent loop dominance analysis tool. In The
23rd International Conference of The System Dynamics Society. System Dynamics Society,
2005.

[14] J. Hines. Molecules of structure: building blocks for System Dynamics models, version 2.02.

Available at https://vensim.com/modeling-with-molecules-2-02/.

[15] P. S. Hovmand. Community Based System Dynamics. Springer, 2014.

[16] C. E. Kampmann. Feedback loop gains and system behavior (1996). System Dynamics Review,

28(4):370–395, 2012.

[17] W. O. Kermack and A. G. McKendrick. A contribution to the mathematical theory of epi-
demics. Proceedings of the Royal Society of London. Series A, 115(772):700–721, 1927.

[18] S. Libkind, A. Baas, M. Halter, E. Patterson, and J. Fairbanks. An algebraic framework for

structured epidemic modeling, 2022. Available at arXiv:2203.16345.

[19] S. Libkind, A. Baas, E. Patterson, and J. Fairbanks. Operadic modeling of dynamical systems:

mathematics and computation. Available at arXiv:2105.12282.

[20] K. H. Lich and J. Kuhlberg. Engaging stakeholders in mapping and modeling complex systems
In Y. Apostolopoulos, K. H.
structure to inform population health research and action.
Lich, and M. K. Lemke, editors, Complex Systems and Population Health, page 119. Oxford
University Press, 2020.

15

[21] J. S. Mackenzie and M. Jeggo. The One Health approach—why is it so important? Tropical

Medicine and Infectious Disease, 4(2):88, 2019.

[22] E. Patterson, O. Lynch, and J. Fairbanks. Categorical data structures for technical computing,

2021. Available at arXiv:2106.04703.

[23] B. Richmond. Stella: Software for bringing System Dynamics to the other 98%. In Proceedings
of the 1985 International Conference of the System Dynamics Society: 1985 International
System Dynamics Conference, pages 706–718. System Dynamics Society, 1985.

[24] R. Ross. An application of the theory of probabilities to the study of a priori pathometry—Part

I. Proceedings of the Royal Society of London. Series A, 92(638):204–230, 1916.

[25] R. Ross and H. P. Hudson. An application of the theory of probabilities to the study of a priori
pathometry—Part II. Proceedings of the Royal Society of London. Series A, 93(650):212–225,
1917.

[26] M. Saleh, P. Davidsen, and K. Bayoumi. A comprehensive eigenvalue analysis of system
In Proceedings of the International System Dynamics Conference, The

dynamics models.
System Dynamics Society, Boston, page 130. System Dynamics Society, 2005.

[27] D. I. Spivak. The operad of wiring diagrams: formalizing a graphical language for databases,

recursion, and plug-and-play circuits, 2013. Available at arXiv:1305.0297.

[28] J. D. Sterman. Learning in and about complex systems. System Dynamics Review, 10(2-

3):291–330, 1994.

[29] J. D. Sterman. Business Dynamics. McGraw-Hill, Inc., 2000.

[30] M. A. Trecker, D. J. Hogan, C. L. Waldner, J. R. Dillon, and N. D. Osgood. Revised simulation
model does not predict rebound in gonorrhoea prevalence where core groups are treated in the
presence of antimicrobial resistance. Sexually Transmitted Infections, 91(4):300–302, 2015.

[31] J. A. M. Vennix. Group Model Building. Chichester, 1996.

16

