2
2
0
2

r
a

M
7
2

]
E
S
.
s
c
[

2
v
6
3
9
8
0
.
3
0
2
2
:
v
i
X
r
a

Painting the Landscape of Automotive Software in GitHub

Sangeeth Kochanthara
s.kochanthara@tue.nl
Eindhoven University of Technology
The Netherlands

Loek Cleophas
l.g.w.a.cleophas@tue.nl
Eindhoven University of Technology
The Netherlands

Yanja Dajsuren
y.dajsuren@tue.nl
Eindhoven University of Technology
The Netherlands

Mark van den Brand
m.g.j.v.d.brand@tue.nl
Eindhoven University of Technology
The Netherlands

ABSTRACT
The automotive industry has transitioned from being an electro-
mechanical to a software-intensive industry. A current high-end
production vehicle contains 100 million+ lines of code surpassing
modern airplanes, the Large Hadron Collider, the Android OS, and
Facebook’s front-end software, in code size by a huge margin. Today,
software companies worldwide, including Apple, Google, Huawei,
Baidu, and Sony are reportedly working to bring their vehicles to the
road. This paper ventures into the automotive software landscape
in open source, providing a first glimpse into this multi-disciplinary
industry with a long history of closed source development. We paint
the landscape of automotive software on GitHub by describing its
characteristics and development styles.

The landscape is defined by 15,000+ users contributing to ≈600
actively-developed automotive software projects created in a span
of 12 years from 2010 until 2021. These projects range from vehicle
dynamics-related software; firmware and drivers for sensors like
LiDAR and camera; algorithms for perception and motion control;
to complete operating systems integrating the above. Developments
in the field are spearheaded by industry and academia alike, with
one in three actively developed automotive software repositories
owned by an organization. We observe shifts along multiple di-
mensions, including preferred language from MATLAB to Python
and prevalence of perception and decision-related software over
traditional automotive software. This study witnesses open source
automotive software boom in its infancy with many implications
for future research and practice.

KEYWORDS
Automotive Software, Mining Software Repositories, Cyber-Physical
Systems, Safety Critical, Software Engineering, Open Source, GitHub

ACM Reference Format:
Sangeeth Kochanthara, Yanja Dajsuren, Loek Cleophas, and Mark van den
Brand. 2022. Painting the Landscape of Automotive Software in GitHub. In
Proceedings of MSR ’22: Proceedings of the 19th International Conference on

Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
MSR 2022, May 23–24, 2022, Pittsburgh, PA, USA
© 2022 Association for Computing Machinery.
ACM ISBN 978-x-xxxx-xxxx-x/YY/MM. . . $15.00
https://doi.org/10.1145/nnnnnnn.nnnnnnn

Mining Software Repositories (MSR 2022). ACM, New York, NY, USA, 12 pages.
https://doi.org/10.1145/nnnnnnn.nnnnnnn

1 INTRODUCTION
Today, automotive is a software-intensive industry [8, 44]. The latest
innovations in this 5 trillion dollar industry1 (including automated
driving, intuitive infotainment, and electrification) depend less on
mechanical ingenuity and more on software innovations. In 2020,
the software in a car and hardware it runs on is estimated to cost
from $4,800 up to $10,650.2 By 2030, this cost is expected to double
forming an estimated 50% of the total car cost.3

The recent entry of the automotive industry in Open Source
Software (OSS) is a land-marking change for an industry primarily
driven commercially and dependent heavily on protecting their
intellectual property. This exposes the automotive software indus-
try, consisting of original equipment manufacturers (or car makers
in short), their different tiers of suppliers, and tool vendors to a
wide network of contributors worldwide, in addition to interesting
and relevant projects. To understand what exists and what oppor-
tunities this landmark change can offer, this study explores the
landscape of automotive software projects in OSS, as seen on GitHub.
Many studies have explored the landscape of OSS, albeit for
different domains. There are studies on AI-ML software [10], soft-
ware from large tech companies [15], and even specific application
domains like video games [36] and bots [45]. To this, we add auto-
motive software with its distinctive and unique blend of non-safety
critical, safety critical, and infotainment software, bunched together
into a single system. We investigate:

What characterizes automotive software projects in open source?

We explore the following two dimensions:

(1) Categories & characteristics: We identify what types of automo-
tive software projects are open sourced and compare them to each
other. We also compare the automotive projects to non-automotive
projects. Further, we explore the characteristics of automotive
projects (e.g., size and maturity of the field) and their stakeholders
(e.g., key players and affiliations).
(2) Software development styles: We investigate different aspects of

1https://www.carsguide.com.au/car-advice/how-many-cars-are-there-in-the-world-
70629
2https://www.eetimes.com/projections-for-rising-auto-software-cost-for-carmakers/
3https://www.statista.com/statistics/277931/automotive-electronics-cost-as-a-share-
of-total-car-cost-worldwide/

 
 
 
 
 
 
MSR 2022, May 23–24, 2022, Pittsburgh, PA, USA

Kochanthara et al.

software development like collaboration (e.g. types of contributors,
their contributions and interactions) and contribution style (e.g.
independent vs. dependent).

Our analyses are based on ≈600 automotive and a similar count
of non-automotive projects on GitHub created in a span of 12 years
from 2010 to 2021. Our main contributions are:

• A manually curated, first of its kind dataset of actively de-
veloped automotive software and their classification along
four popular dimensions including safety-critical software
and tools [23]. This dataset facilitates the replication of this
study and future explorations into automotive software.
• A characterization of automotive software including its tem-
poral trends, popularity, programming languages, user dis-
tributions, and development activities.

To the best of our knowledge, this study is the first in presenting the
automotive software landscape in open source. Insights presented
in this study are relevant for the field growing at a fast pace and
yet little is known from a software engineering perspective.

The rest of the paper is organized as follows: Section 2 presents
our design choices for data collection and analysis. Section 3 and 4
present our findings and insights along with our approach to derive
these insights. Section 5 presents the implication of this study for
automotive and software engineering research and practice. We
review the threats to validity in Section 6, describe the related
research in Section 7, and conclude the paper in Section 8.

2 STUDY DESIGN
Our choice of GitHub for the exploration of the automotive software
landscape is motivated by the sheer volume of open source software
projects hosted on the platform, and its prevalence worldwide. In
2021 alone, 64 million new repositories were created, with more
than 73 million contributors from over 200 countries around the
globe and 84% of the Fortune 100 companies using GitHub.4

There are three parts to this investigation. First, we define au-
tomotive software and propose criteria to distinguish automotive
software from general software systems; and criteria to identify
general repositories serving as the baseline for comparison. The
metadata of the two sets of selected repositories are used for the
second and third part. In the second part, we present descriptive
statistics of the repositories (in Section 3) while in the third part we
explore user statistics as well as contribution patterns (in Section 4).
For the second and third parts, we derive insights from the automo-
tive domain and compare it against the baseline. Particularly, we
mine archival data via the GitHub API (using PyGithub - a python
wrapper for GitHub API search5) for the second part. We further
enrich this data with the GHTorrent data [12] for the third part.
Generally, our study design takes inspiration from recent landscape
studies relating to OSS (e.g., [10, 15]).

2.1 What is Automotive Software?
There are many definitions of automotive software prevalent in
different scientific communities (e.g., [6, 8, 14]). Some common
elements of these definitions are: (a) the software that forms part of
a vehicle, (b) the software that interacts with a vehicle via APIs or

other similar mechanisms, and (c) the software specifically used for
creating (a) and (b) [5, 8, 11, 14]. A more detailed characterization
of automotive software is presented in Section 3.

2.2 Identify Automotive Software Projects
To identify a specific type of software projects on GitHub, conven-
tional methods like topic modelling [17, 39] are found to be ineffi-
cient [10]. Another approach uses the ‘topics’ feature on GitHub.6
Topics are labels defined by a project or suggested to a project (by
GitHub) that can be used to discover a network of similar reposito-
ries.7 Our preliminary manual analysis showed that unlike previous
study [10], several automotive repositories did not use GitHub’s
‘topics’ feature. Therefore, in addition to looking at ‘topics’ to iden-
tify repositories, we searched GitHub for specific keywords which
if found in the ‘README’ file are likely to identify an automotive
software repository.

To identify automotive software using the ‘topics’ feature of
GitHub, first we defined seed terms. We choose ‘automotive’, ‘au-
tomobile’, ‘drive’, ‘driving’, ‘vehicle’, ‘vehicular’, and ‘car’ as the
seed terms. To capture a range of related terms, we transformed
the seeds terms to their base terms. For example, ‘automo’ for auto-
mobile and automotive. Likewise, the other keywords became: driv,
vehic, and car. Using these base terms, we composed a search string
excluding the terms that are not related to automotive software.
Examples are google-drive, e-commerce, and device-driver related
topics. Our final (4) search queries were:

automo,
vehic,
driv NOT driven NOT drives NOT license
NOT google-drive NOT linux-driver,
car NOT cart NOT card NOT caro
NOT carp NOT care

Using these search queries we identified topics which collectively
defined the search space for automotive software repositories. In
total, we identified 2,797 topic labels. We manually analyzed each
topic to decide whether it is related to automotive software or not.
If a topic label was not informative, we looked at the name and
description of the top 10 repositories linked to the topic to make
the decision. Ultimately, we identified 286 topics and selected all
their linked repositories. A complete list of the topics (along with
its search term) is available as a part of our replication package [23].
Further, to identify relevant repositories that do not use topics,
we selected the top five topic results based on repository count
(from the 286 topics in the prior step), from each of the four search
queries, that are selected in the prior step (yielding a total of 20). For
a better signal-to-noise ratio in the search results, we removed the
most common terms (e.g., car, cars) which resulted in 12 terms. We
searched for these terms in the ‘README‘ file of repositories which
do not use ‘topic’ labels, in order to identify additional repositories.
Notably, only up to 50% of the repositories relating to automotive
were found using the ‘topics’ feature and 301 out of 584 selected
automotive repositories did not use this feature. Note that in each of
the above manual analysis steps, a random sample and borderline

4https://octoverse.github.com/
5https://pygithub.readthedocs.io/en/latest/introduction.html

6https://github.blog/2017-01-31-introducing-topics/
7https://github.com/topics

Painting the Landscape of Automotive Software in GitHub

MSR 2022, May 23–24, 2022, Pittsburgh, PA, USA

cases were analyzed by two researchers independently, to ensure
rigor and repeatability.

2.3 Selection and Elimination Criteria
To curate a representative sample of active projects, we apply the
following filtering criteria (inspired by [10]):

Size: The size of a repository should be greater than 0 KB.

Popular: Stars and forks are indicators of the popularity of a repository.
To collect a representative sample of repositories (and not
just the popular ones), we select repositories with at least 5
forks OR 5 stars.

Activity: We use commits as a proxy of development activities and
select repositories where the last commit was in 2021, a
criterion for selecting actively developed projects.
Data: The repository data should be available via the GitHub API.
The above four criteria when applied to the shortlisted soft-
ware repositories, resulted in a subset of 1981 repositories.
Content: To gauge whether a repository is an automotive software
one or not, the first author manually examined the project
title, description, and README file based on the following
inclusion and exclusion criteria.
Inclusion criteria
• Select automotive-specific software
• Select software that aids in the development of automotive-

specific software

• Select software related to on-road vehicles only
• The text is written in English and has a README file
Exclusion criteria
• Repositories that are not automotive related or relate to
(automotive) sales and marketing, tutorials, course projects,
bachelor and master theses, documentations, data-sets, toy
cars, games, traffic infrastructure, maps, and ones that do
not directly interact with vehicles.

We adopted a conservative approach for selecting repositories. This
means that cases which fall in a grey area were excluded. For the
repeatability of the procedure, another researcher with experience
in conducting empirical software engineering independently classi-
fied a subset of randomly selected repositories (approximately 100)
using the above inclusion and exclusion criteria. The inter-rater
agreement between the two classifications was 0.83 as calculated
using Cohen’s Kappa [33] indicating an almost perfect agreement.
The two researchers discussed their disagreements until a decision
was reached. In the end, we identified 585 automotive software
repositories.

2.4 Identify Baseline Repositories
To compare our insight against a baseline, we needed actively devel-
oped repositories that are not automotive-related. Our first choice
was reusing the baseline from a related prior study [10]. This dataset,
however, had three issues: (1) does not contain recent repositories
(created after mid-2019), (2) systematically excludes AI-ML reposi-
tories, and (3) represents most popular repositories which are not
necessarily representative of general software projects. To mitigate
these concerns, we created our baseline with the following charac-
teristics. First, we identified actively developed projects using the
same criteria (size, popularity, activity, and data availability) as for

the automotive software projects (refer to Section 2.3). The only de-
viation we made is selecting repositories with five or more stars and
forks. This decision was made to mitigate the practical implemen-
tation limits of the search API. Then, for each year (from 2010 until
2021), we sub-sampled repositories proportional to the percentage
distribution of all the actively developed GitHub repositories over
the years, and selected based on most recent activity from each sub-
sample. We selected repositories such that their aggregate count
is closer to 600 repositories. To avoid overlap with the automotive
software, we excluded repositories with the terms automotive, car,
and vehicle. Our resulting dataset had 566 repositories as baseline.

2.5 Data Analysis
There are two parts to our data analysis: (1) We report descriptive
statistics on the selection of automotive and baseline repositories.
We describe the types of automotive software systems and how
they relate to baseline software systems. This part of our analyses is
based on the meta-data extracted using PyGithub. For details, refer
to Section 3. (2) We offer deeper insights into development styles
by combining insights from PyGithub and GHTorrent [12]. Since
GHTorrent dataset contained developement data only upto July
2021 (we collected data using PyGitHub in December 2021), some
of the repositories from PyGitHub based data was not available
in GHTorrent. Consequently, we were left with 436 out of 585
automotive repositories and 503 out of 565 the baseline repositories.
Refer to Section 4 for deeper implementation details along with
obtained insights.

3 CATEGORIES & CHARACTERISTICS
This section presents the types of automotive software available
on GitHub and their characteristics. First, we introduce the dif-
ferent ways to classify automotive software. The next subsection
presents our findings and the distinctive characteristics of auto-
motive software with reference to the comparison set of general
software systems. This analysis is based on the 584 automotive
repositories (extracted using PyGitHub) created in a span of 12
years between 2010 and 2021. The most recent one was created on
30th December 2021.

3.1 Approach
Informally, automotive software can be defined as: (1) the software
that runs or interacts with a vehicle; and (2) the tools to support dif-
ferent life cycle stages (e.g., development, validation & verification)
of the software that runs or interacts with a vehicle. We refer to the
above two categories as in-vehicle software and tools, respectively.

In-vehicle software: In literature, there are many ways to catego-

rize in-vehicle software. We use the following two schemes:
(1) Safety critical & safety critical based on application: Safety critical
software is defined as the software that carries out tasks, which
if not properly performed, could lead to human injury, death, or
harm to the environment [1, 16, 22, 24, 25, 34]. During the manual
classification of automotive software, we noticed that in addition
to safety critical and non-safety critical software systems, there is
a third type of software systems: safety critical based on application.
These software systems can be safety critical depending on the

MSR 2022, May 23–24, 2022, Pittsburgh, PA, USA

Kochanthara et al.

(intended) application context. For instance, a software system for
perception is safety critical when used in fully automated driving
(i.e., without an active human driver). In this case, any failure, mal-
function, or unintended function of the perception software system
can lead to a crash, injury to the traffic participants, and harm to
its surroundings. The same system when used as a driver-warning
system, in which human driver is in charge, can be classified as non-
safety critical. In this scenario, the responsibility of maneuvering
the vehicle is with the human driver. We classified such software
repositories as safety critical based on application.
(2) Broy’s classification: In 2007, Broy et al. [5] classified automo-
tive software into the following 5 categories: (a) Human Machine
Interface (HMI), multimedia, and telematics related software; (b)
Body/comfort software, for instance, the software for controlling
various aspects of car doors; (c) Software for safety electronics, that
are hard real-time, discrete event-based software with strict safety
requirements; (d) Powertrain and chassis control software, which
include control algorithms and software for controlling the en-
gine; and (e) Infrastructure software, like software for diagnosis and
software updates.

Since 2007, the field of automotive software and software systems
in general has evolved. For example, highly accurate image recog-
nition with (relatively) lower computational power was demon-
strated using neural networks in 2012 [30]. Automotive software
has advanced in perception systems and automated decision mak-
ing which makes fully automated driving possible. While other
aspects of automated driving like drive-by-wire are captured in
the current classification, this aspect of perception and decision
making, however, is not. We extend Broy’s classification by adding
a sixth category: (f) perception and decision software. Perception and
decision software includes any software that contributes to the per-
ception (understanding the surroundings of a vehicle) and decision
making (e.g., deciding actuation, steering, and brake), for any level
of automated driving (i.e., driver assistance, partially automated,
and fully automated).

Tools: Industry standards (e.g., ISO26262 [18, 29]) define multiple
stages, such as validation & verification, in the automotive life-
cycle. We consider all software repositories that offer tools for one
or more stages of an automotive life-cycle, in this category. For
brevity, we exclude from this classification, the stages (and hence
the corresponding tool) for which we had exactly one repository.
The selected repositories fall into the following four categories: (1)
tools for development, (2) tools related to simulation or emulation,
(3) tools for validation & verification, and (4) tools for diagnostics.
Please note that traditionally tools relating to simulation (and
emulation) are considered part of validation & verification. How-
ever, with the advent of neural networks, many simulation tools
are used in training (developing) neural networks. Therefore, we
study these tools separately here.

To ensure a rigorous and repeatable classification of automotive
repositories into the above-mentioned categories, the first author
and another researcher with experience in empirical software en-
gineering, independently classified a subset of randomly selected
repositories and borderline cases.

In the subsequent subsection, we report the distribution of au-
tomotive software based on the above classification to offer an

overview of the types of automotive software open sourced on
GitHub. We continue venturing into these popular and prominent
classes of automotive software throughout the paper.

To characterize automotive software, we report descriptive sta-
tistics on automotive software repositories and compare them
against the comparison set of non-automotive repositories, also
from GitHub. Our analyses highlights four key areas, starting with
the temporal trends and evolution of the repositories on GitHub. This
analysis indicates the maturity and growth of the field. Next, we
discuss the ownership of the automotive software (users versus or-
ganization) indicating the key players of the field and how they
are shaping the landscape of automotive software. Along the same
lines, we continue exploring popular automotive software in terms
of development activities (inferred from fork count) and in general
(using stars and subscribers). We conclude with an exploration into
the choice of primary programming languages used by different
automotive software, as identified using the above categories.

3.2 Findings
Genesis - The beginning & temporal trends: In 2010, the first
still actively developed automotive project, Veins, was created in
GitHub (26th-April-2010). This vehicular network simulation frame-
work defined the entry of automotive software development into
GitHub, marking a turning point for an industry traditionally closed
source in the past 50 years of its software use.

Since then more repositories are added each year to a total of
584 (actively developed) automotive software repositories in a span
of 12 years. Figure 1 presents the percentage distribution of the au-
tomotive software repositories (based on their creation year) with
reference to the total actively developed repositories in GitHub.
The temporal trend suggests that from 2018 to 2019 the percentage
growth of automotive software has doubled which again doubled
from 2019 to 2020. In comparison to the actively developed reposi-
tories across GitHub (which peaked in 2014), automotive software
is still in its infancy and expected to grow in the future.

Origin & temporal trends: Veins - a simulation tool, is the first
automotive software repository created by a user in 2010 that is
still actively developed. This study witnesses open source auto-
motive software boom in its infancy.

The dawn of new opportunities - Ownership: In 2010, no or-
ganization was developing any automotive software in GitHub
that is still actively developed. In the next 6 years (2011-2016),
small organizations, enthusiast groups, and non-profits organi-
zations ventured into open source; owning 14 software projects.
The first organization owned (still actively developed) project is
Open-Vehicle-Monitoring-System, an in-vehicle software from the
enthusiast group Open Vehicles.

The year 2017 marked the entry of big players to open source.
This year Baidu, the Chinese search engine company, created project
Apollo - a full software stack for fully automated driving. The other
big players, namely, Amazon, Intel, Microsoft, and Udacity joined
soon after, each of which open sourced one of their tools to build
automated driving solutions. In our data set, one in three (or 194

Painting the Landscape of Automotive Software in GitHub

MSR 2022, May 23–24, 2022, Pittsburgh, PA, USA

differences in the distribution among the automotive and base-
line repositories are statistically significant as calculated using the
Mann-Whitney-Wilcoxon Test [4], a non-parametric test for two
independent data samples, calculated at p-value<0.05. The median
numbers of stars, forks and subscribers for automotive repositories
are 24, 9, and 4 respectively, while the median for baseline reposito-
ries are 297, 121, and 36, respectively. Here, we would like to remind
the readers that despite our attempts at selecting a representative
sample of projects as baseline, our dataset might be somewhat bi-
ased towards more popular repositories (see threats to validity in
Section 6 for details), skewing the distribution further. Even within
automotive repositories, organization-owned repositories is at least
twice as popular as user-owned software projects.

Popularity: Automotive software as a field is less popular than
general software on GitHub. Apollo, Baidu’s automated driving
software stack, is currently the most popular automotive reposi-
tory. Generally, organization-owned software projects are twice
as popular as user-owned projects.

Table 1: Top 5 popular organization and user repositories
(based on subscribers, forks, and stars) and their count

Organization

User

Top 5 repositories based on subscriber count

ApolloAuto/apollo (1103)
microsoft/AirSim (597)
carla-simulator/carla (236)
udacity/self-driving-car-sim (231)
autoas/as (145)

stanleyhuangyc/ArduinoOBD (175)
timdorr/tesla-api(119)
Smorodov/Multitarget-tracker(110)
cedricp/ddt4all(81)
fr3ts0n/AndrOBD(68)

Top 5 repositories based on fork count

ApolloAuto/apollo(8013)
microsoft/AirSim(3557)
carla-simulator/carla(2128)
fizyr/keras-retinanet(1964)
udacity/self-driving-car-sim(1414)

MaybeShewill-CV/lanenet-lane-detection(772)
Smorodov/Multitarget-tracker(569)
stanleyhuangyc/ArduinoOBD(486)
timdorr/tesla-api(474)
karlkurzer/path_planner(355)

Top 5 repositories based on star count

ApolloAuto/apollo(19954) MaybeShewill-CV/lanenet-lane-detection(1707)
Smorodov/Multitarget-tracker(1636)
microsoft/AirSim(12590)
timdorr/tesla-api(1549)
carla-simulator/carla(7100)
poodarchu/Det3D(1220)
fizyr/keras-retinanet(4252)
yangyanli/PointCNN(1200)
udacity/self-driving-car-sim(3595)

1
2
3
4
5

1
2
3
4
5

1
2
3
4
5

Genera - Types of automotive software: Broadly, there is an
abundance of in-vehicle software (375) in comparison to tools (233).
A detailed distribution of the types of automotive software (both
in-vehicle software and tools) is presented in Table 2. Note that a
repository can belong to multiple categories. Therefore, the sum
of the repository count in all the categories can be greater than
the actual repository count. More details on the classification of
individual repositories is available in the replication package [23].
Within in-vehicle software, most repositories relate to perception
and decision related software. Notably, Broy’s classification [5] for
in-vehicle software is a small part (108 out of 375) of the whole. Of
these 108, HMI (71) and infrastructure (38) are the top categories,
and are primarily developed by users.

The development of safety-critical software in open source is
still in its initial stages (21 repositories). Although, many software
repositories belong to safety-critical based on application category

Figure 1: Temporal evolution of actively developed automo-
tive software repositories with reference to all actively de-
veloped repositories in GitHub, between 2010 and 2021.

out of 584) automotive software repositories is owned by an organi-
zation. Cumulatively, we are looking at 163 organizations and 343
users owning at least one repository.

The development of automotive OSS today is spearheaded by
tool vendors, academic, and industrial research labs with more than
30 repositories owned by academic research groups.

The only car maker in automotive software on GitHub is Toyota
with two repositories, a tool and an in-vehicle software. Please note
that we might have missed the different tiers of suppliers to car
makers since there is no straightforward way to identify suppliers
from the GitHub meta-data.

Currently, the top 5 organizations working on automotive soft-
ware (in terms of repository count) are: VITA lab at EPFL (5 repos-
itories), LG Silicon Valley Lab (4), MathWorks Open Source and
Community Projects (4), AutonomouStuff (3), and CARLA (3).

Repository ownership: One in three automotive software repos-
itories is owned by an organization. The field witnesses high par-
ticipation from academic and industrial (tool vendors) research
labs with only one car maker (Toyota) at the forefront.

In the catbird seat - Popularity: The top 5 popular automotive
projects from organizations based on the three indicators of popu-
larity (stars, forks, and subscribers; see Table 1) are simulation tools
(4 in count), followed by in-vehicle software on perception and
decision systems (fizyr/keras-retinanet) and the automated driving
stack Apollo.

The popular user repositories on automotive software are more
diverse, including both in-vehicle software and tools. The in-vehicle
software in the top 5 relate to (a) HMI and telematics and (b) per-
ception and decision. The tools in the top 5 relates to (a) the devel-
opment of perception and decision-related software and (b) diag-
nostics.

Figure 2 presents the distribution of stars, forks, and subscribers
across automotive software along with the baseline repositories.
Generally, projects have more stars, than forks and subscribers.
This is the same for automotive and baseline repositories. Notably,
automotive software is far less popular than the baseline software
systems, further reinforcing the notion of infancy of the field. The

201020112012201320142015201620172018201920202021AutomotiveGitHubPercentage repository count05101520253035MSR 2022, May 23–24, 2022, Pittsburgh, PA, USA

Kochanthara et al.

Table 2: Types of automotive software on GitHub and their
distribution.

Category

Org

User

Total

In-vehicle software

Safety-critical

Safety-critical based on application

Extended Broy’s classification

HMI, multimedia, & telematics
Body/comfort software
Software for safety electronics
Power train and chassis control

software

Infrastructure software
All Broy’s categories combined

perception and decision software

97

11

57

17
10
8
10

9
23

68

278

375

10

167

54
8
4
7

29
85

180

21

224

71
18
12
17

38
108

248

Tools

100

133

233

for development
for validation & verification
Simulation (and emulation) related
for diagnostics

32
18
48
5

31
22
52
28

63
40
100
33

(10), and Jupyter Notebook (7) for their projects. Notably, users also
prefer the same languages but in slightly different order: Python
(209), C++ (61), Jupyter Notebook (26), MATLAB (20), and C (17).
Most safety critical software is written in C++ (14), followed by
Python (4), MATLAB (1), and C (1).

The distribution of programming languages across projects shows
a shift from MATLAB as preferred language of development [2] to
Python. Likewise, traditionally most safety critical software were
developed in C or Ada which has now shifted to C++ in GitHub [20].

Languages: The preferred language for open source automotive
software development has shifted to Python (291 repositories)
from MATLAB (30 repositories). Similarly, safety critical software
development has moved from C or Ada to C++.

Figure 2: Distribution of the popularity of automotive repos-
itories (in terms of stars, forks, and subscribers) with refer-
ence to the comparison set (outliers removed)

(approximately 60% of in-vehicle software). Most of the safety-
critical software relates to perception and decision-based software
intended for use in fully automated driving systems. These include
neural-network based semantic segmentation, path planning, and
object, pedestrian, and intent detection related software.

The category ‘tools’ in automotive software is dominated by
simulators and related software. This is evident in the top five au-
tomotive software from industry (see Table 1), three of which are
simulators. For tools overall, there is near to equal ownership from
users (100) and organizations (133). We see a similar trend in the
ownership of development tools (32 from organization and 31 from
users) and validation & verification tools (18 from organizations and
22 from users). The only exception is diagnostic tools which are
five times more prominent among users (28) than organizations (5).
Other than the above, we also notice a small number of automotive
software repositories (32) relating to (driver) safety (like drowsi-
ness detection) and security (tools for security testing or in-vehicle
software for the security of the vehicle).

Types of automotive software: The most popular type of auto-
motive software developed open-source is in-vehicle software (375
repositories) followed by tools (233 repositories). Within in-vehicle
software, perception and decision software are most popular while
in tools, simulations are prominent. Traditional vehicle software
and safety critical software are underrepresented in open source.

Two worlds; two languages - Languages: Automotive software
is developed in 33 primary languages and 96 languages when consid-
ering all the languages for development. The most popular program-
ming language is Python with 291 projects using it as a primary
language and up to 415 projects using it as one of the languages.
The top 5 primary programming languages are Python (291), C++
(98), C (33), Jupyter Notebook (33), and MATLAB (30). Technically
Jupyter Notebook is not a programming languages, rather a blend
of text and code. We do not make any assumptions in the program-
ming languages used inside the Notebooks rather considered them
according to the tagging by GitHub. Organizations generally prefer
(based on repository count) Python (82), C++ (37), C (16), MATLAB

4 SOFTWARE DEVELOPMENT STYLE
Building on the insights derived in the previous section, this section
delves into the user distribution, types of development activities,
and the choice of development models in automotive software. We
compare it against the baseline to understand the unique character-
istics of automotive software, if any. Note that since this analysis
combines data acquired using PyGithub (in December 2021) with
GHTorrent’s data (data available until July 2021), we missed reposi-
tories which do not exist on GHTorrent. Further, depending on the
development activities of individual repositories and missing data
in GHTorrent dataset, the total count of the repositories may vary
across different analyses.

8128204832768StarsForksSubscribersCountAutomotiveBaselinePainting the Landscape of Automotive Software in GitHub

MSR 2022, May 23–24, 2022, Pittsburgh, PA, USA

4.1 Approach
User distribution: In this section, we explore the types and distribu-
tion of users across projects. We study two types of users: external
and internal [10], based on their activities in automotive software.
Internal users contribute directly to the development of a project by
making changes to the actual software (commits) and moderating
the decision to include/exclude the proposed changes (like merging
and closing pull requests and closing issues). External users, on the
other hand, contribute indirectly by requesting features, reporting
issues, and commenting. We believe that investigating the distribu-
tion of internal and external users across projects indicates how a
community works. For deeper insights, we also explore changes in
contribution patterns, if any, across organization and user projects.
A natural next step to understand developer contribution and
collaboration patterns is to examine developer roles (e.g., main-
tainer, or reporter) and their distribution. However, given the small
community size and limited development activities, it is infeasi-
ble to offer meaningful insights and conclusive statistical analyses.
Therefore, we do not report collaboration patterns.

Development activities: Development activities on GitHub can
be broadly classified into commits, issues, and pull requests. Issue
events indicate participation from the broader user base (beyond
contributors) requesting additional features or indicating problems.
Participation in issue events indicate how the users of the software
interact with developers, influencing its development. The next
group of development activities are pull requests which indicate a
relatively stronger influence on the software by proposing changes
for inclusion into the software system or its associated artifacts.
These activities log the decisions to include or exclude proposed
changes. Finally, a commit is an even more involved activity dealing
with the technical aspects of creating desired changes in the soft-
ware.8 Here too, we explore whether project ownership influences
the development activity patterns across projects.

Development models & autonomy: Finally, we analyze the choice
of development model in automotive software. There are two types
of development models in GitHub: (1) shared repository model and
(2) fork & pull model.9 The two models are different in the level of
autonomy of contributors. In the shared repository model, an author
can merge their proposed code changes themselves, indicating their
autonomy. The fork & pull model implies that the changes proposed
by an author are reviewed by a maintainer. In this model, an author
is dependent on the actions of a reviewer for the decision to include
or exclude the proposed changes. To study the level of autonomy
or dependence in a project, we aggregate the distribution of pull
requests and commits for which the author merged the changes
(self-merge) versus other contributor (other-merge). We refer to the
projects with more self-merges as practicing a shared-repository
model and fork and pull model otherwise.

8https://docs.github.com/en/get-started/quickstart/github-flow
9https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/getting-
started/about-collaborative-development-models

Figure 3: User distributions across repositories compared
with baseline (outliers omitted)

4.2 Findings
The real stars - Users & their distribution: All the automotive
repositories cumulatively have 15,260 unique users where as the
baseline set of repositories have 439,032 unique users. In automo-
tive software, the median count of users per repository is 5 while
115 for general projects from our baseline (refer to Figure 3 for
distribution). The two distributions are significantly different as
calculated using the Mann-Whitney-Wilcoxon test at p-value<0.05.
Here again, we warn our readers that our baseline is somewhat
skewed towards actively developed and popular software systems.
Therefore, the differences may appear larger than they are. Note
that our identification of individual contributors relies on unique
user identifiers from GitHub. However, one individual can have
several unique identities [41]. Consequently, the actual number of
users might be lower than the reported count.

Looking at the distribution of users in automotive software, each
project has a median count of 3 internal and 5 external users. When
we further segregated the user distribution on the ownership type
(see Figure 4), we observe that organizations have more users per
repository. The two distributions are different as calculated using
the Mann-Whitney-Wilcoxon test at p-value<0.05. Organizations
recorded a median of 6 internal and 8 external users in comparison
to 3 and 5 respectively for the user owned automotive repositories.

User distribution across repositories: Open source automo-
tive software has a small developer community with a median of
5 users per repository. Notably organization repositories solicit
more participation internally and externally in comparison to the
user repositories.

Abiogenesis - Development activities: We notice that most com-
mon development activities (based on the median count of activities)
in automotive software are in the form of commits (32), followed
by issues (9), and then pull requests (6). We further investigated the
distribution of development activities based on the ownership and
the types of automotive software.

Figure 5 presents the development activities of automotive soft-
ware repositories owned by organizations in comparison with the
repositories owned by users. Generally, organization projects have
more development activities (in terms of median) than user projects
do, although there are a few user projects where the commit activity

AutomotiveBaseline151050100500MSR 2022, May 23–24, 2022, Pittsburgh, PA, USA

Kochanthara et al.

Figure 4: Internal and external users across automotive
repositories owned by users and organizations (outliers
omitted)

Figure 5: Development activities in organization owned au-
tomotive repositories versus user owned repositories (out-
liers omitted)

level matches that of the organizational repositories. This indicates
variability among user projects with extremes in the distribution
of development activities. Please note that the two distributions
are different as calculated using the Mann-Whitney-Wilcoxon test
(p-value<0.05).

A comparison of the development activities across in-vehicle
software and tools is shown in Figure 6. Here, the development
activities across issues (p-value = 0.29) and pull requests (p-value =
0.40) are comparable with major differences in the commits (p-value
= 0.0013). These p-values are calculated using the Mann-Whitney-
Wilcoxon test such that a p-value<0.05 indicates differences in the
distribution and no differences otherwise. We notice that there
are more commit activities in tools in comparison to in-vehicle
software. We believe that this difference is attributed to the higher
participation of tool vendor organizations in automotive software.
To remind, there are 100 out of 233 organization owned repositories
in the tools category versus 97 out of 375 in the in-vehicle software
category.

We also explored the distribution of development activities in
perception and decision related software, which form a majority
of the in-vehicle software (with sizable number of repositories for
statistical comparison) with respect to the development activities
with the rest of repositories in in-vehicle software. Figure 7 shows
that traditional software is more actively developed in terms of
commits, issues, and pull requests than perception and decision
related software. The differences in the distribution of development
activities on repositories belonging to all the Broy’s categories
combined versus repositories belonging to perception and decision
software, are significantly different as measured using the Mann-
Whitney-Wilcoxon test at p-value<0.05. This means that while
perception and decision related software are more in count, they
have fewer development activities than traditional software.

Figure 6: Development activities for in-vehicle software ver-
sus tools (outliers omitted)

Figure 7: Development activities for perception and decision
related in-vehicle software versus other in-vehicle software
(outliers omitted)

Development activities: The organization-owned repositories
attract more contribution across all categories. However, there
are smaller number of user owned repositories matching the
level of development activities as in organization owned reposito-
ries. Tools are more actively developed than in-vehicle software.
Within in-vehicle software, traditional in-vehicle software is more
actively developed than perception related software.

Guardians - Development model: We classified each project
as a shared repository or fork-and-pull development model by
looking at their collaboration patterns. We noticed that while 41
repositories followed the shared repository model, 182 reposito-
ries practice the fork-and-pull model. This indicates that fewer

0102030Internal userExternal userContributor countOrganization ownedUser owned0100200CommitIssuePull requestCountOrganization ownedUser owned0100200CommitIssuePull requestCountIn−vehicleTools0100200300400CommitIssuePull requestCountAll Broy's categories combinedPerception and decisionPainting the Landscape of Automotive Software in GitHub

MSR 2022, May 23–24, 2022, Pittsburgh, PA, USA

projects are autonomously developed and a majority of the devel-
opment teams (contributors of a repository) do not have autonomy.
This observation matches the baseline with fork-and-pull being
the most prominent model and also prior work on other software
sub-communities [10].

Development model: Automotive software—despite being a
small development community—mostly follows the fork-and-pull
model for its development activities.

5 IMPLICATIONS
While automotive open source software is still in its infancy (in
comparison to our baseline), the field is 584 repositories and 15,260
contributors strong. With industry players entering the field and
choosing to open source their projects, we believe that automotive
software is the next promising area with an expected multi-fold
growth in the next decade. In this section, we discuss how the
insights from this study can be applied to research and practice.

5.1 Research
Academia is a prominent contributor of automotive software in
GitHub with one of the top 5 organizations in terms of count of
repositories owned. We also identified 108 repositories linked to
scientific articles in automotive software. Given the close link of
automotive software and academic research, in this section, we
present the ways in which our study can inspire future research.

Manually curated automotive software. To the best of our knowl-
edge this paper is the first in presenting a manually curated dataset
of automotive software in open source. We have classified each
repository using four categorization schemes namely (1) safety crit-
ical, (2) safety-critical based on application, (3) Broy’s classification
extended with perception and decision related software, and (4)
tools. One immediate future research direction is strengthening
the classification with inputs from experts in the automotive and
related domains. Also, our manually curated dataset along with
the classification can be used (in training and testing) to automate
the process of identifying and classifying automotive software by
automated (algorithmic) approaches. Further, we believe that fu-
ture research can use this classification for the characterization
of automotive software and in-depth explorations into prominent
software systems.

Motivation to open source. Relating to the types of automotive
software open-sourced by companies, we noticed that organizations
mostly open source their tools and some experimental projects. It
will be interesting to see what types of companies come to open
source and their motivation (similar to a recent study exploring
motivations of Chinese companies to open source [15]). While our
results show that one in three automotive software repositories
is owned by an organization, it is possible that at least some of
the GitHub projects in large organizations might have started as
personal projects because there was not yet a company policy on
how to open source projects. Given the entry of organizations to
open source in the automotive domain is still in its infancy, it is
possible that some individual projects might actually belong to
organizations and the transfer of ownership to the organization

has yet to be made. This phenomenon in itself and the subsequent
changes in our results form another direction to explore for future
research.

Safety-critical. Most automotive software in open source relates
to perception and decision and tools. These software systems can
be safety-critical depending on the application. Given the limited
attention to safety-critical software in open source, it remains a
future work to see whether the current and future automotive soft-
ware in these categories are developed and/or tested according to
safety critical standards. Also, our study forms a guide and baseline
for future studies on open source software in (other) safety critical
domains.

Multi-disciplinary software versus general software. Automotive
software developed in GitHub is multi-disciplinary in nature. We ob-
served repositories that model vehicle dynamics;10 develop firmware
and drivers for sensors like LiDARs and Camera; develop algorithms
for perception and motion control; and repositories on complete
operating systems integrating the above. It will be interesting to
see differences in the contribution and collaboration patterns of
such multi-disciplinary software projects in comparison to general
software systems.

5.2 Practice
This study shows that the industry is more interested in open sourc-
ing tools (43% organization-owned) in comparison to in-vehicle
software (26%). Three possible explanations for this observation
are: (1) the revenue stream for the tools is dominated by car-makers
or their suppliers who will pay for their support irrespective of
open-sourcing; (2) tools might be less intellectual property intensive
than in-vehicle software and thus easier to open source without
losing the edge to competition; and (3) in-vehicle software typically
runs on less-standardized hardware (application-specific embedded
hardware for various in-vehicle functionality) than tools. These
explanations however, cannot be derived from the data used in this
study and need to be validated.

In addition, our list of automotive repositories and their catego-
rization can aid future research into identifying the stakeholders in
each category, their motivations to participate in open source, and
other domains where these tools are used. Our study also provides
the first list of automotive software tools and in-vehicle software
in open source, with the former available for practitioners to use
(and contribute to) and the latter to learn from. Further, our data
and insights can be used to identify (a) software for reuse, (b) at-
tract talent and/or increase the adoption of software and standards,
and (c) new directions, companies, and trends in the automotive
domain. Three potential implications of our findings for practice
are discussed below.

Language of choice. Automotive software in open source is now
developed mostly in Python, replacing MATLAB as reported in
prior studies (see Table 12 in [2]). A similar trend of C++ domina-
tion replacing C or Ada for safety critical software development [20]
is seen. Our advice to the readers interested in venturing into au-
tomotive software is to consider these findings while choosing
programming languages.

10https://github.com/TUMFTM/velocity_optimization

MSR 2022, May 23–24, 2022, Pittsburgh, PA, USA

Kochanthara et al.

Companies. Prior study has shown that one reason for companies
to open source their software is to attract talent and internation-
alization [15]. We believe that start-up automotive companies can
benefit by open sourcing their projects.

Safety certification & car makers. Safety certification of vehicles
is obligatory to allow them on road. The current trend of more
software dependent functionalities in vehicles is challenging for
certification bodies. These bodies can benefit from open software
stacks. Such a change can subsequently encourage car makers to
contribute to open source software. Our study can be used by the
certification bodies to get insights on the characteristics of automo-
tive software developed in open source. To car makers our study
offers trends in the open source automotive software.

6 THREATS TO VALIDITY
Construct Validity: There are threats to the representativeness of
the automotive software systems selected for analyses. To mitigate
this concern, we identified automotive software repositories using
two approaches (using topics and keyword search in README files)
and adopted best practices for selecting actively developed software
systems [13, 19, 35]. That being said, we might have systematically
missed the repositories that do not use the search terms, uses differ-
ent topic labels, misses README file, or a meaningful description.
Also, in case of doubt, we discarded a repository, i.e. we followed a
conservative approach. The same threat applies to the categories
of automotive software systems presented in Section 3.

For counting unique contributors, we used their GitHub identifier
and counted every user with a distinct identifier as a unique user.
However, prior studies have shown that one individual can have
several identities [41], thus the actual number of users might be
lower than the reported count.

Our baseline set of repositories might be skewed towards more
popular repositories. For representativeness, we sub-sampled repos-
itories based on the number of actively developed repositories cre-
ated every year. However, given the smaller size of automotive
repositories as compared to the total number of actively developed
repositories in GitHub, the random selection from each sub-sample
based on recent activity might have resulted in the selection of
popular repositories as the baseline.

Another threat is the introduction of researcher bias in the man-
ual selection of repositories and the classification of the automotive
software. While these threats cannot be eliminated, we tried to
minimize them by (a) clearly documenting the inclusion-exclusion
criteria for the selection of repositories, and (b) using an indepen-
dent rater for a subset of the repositories. For the classification of
software, we borrowed the definitions from literature for reference.
Our insights into development styles rest on the GHTorrent
dataset. The activities that are not present in the dataset are sys-
tematically excluded from our analyses [3].

External Validity: This paper is based on the publicly available
software repositories on Github. While GitHub is a popular and
widely used platform, there are other platforms (e.g., Gerrit and
Phabricator) with their distinctive characteristics, private projects
hosted on GitHub, and closed source systems. They might add a
different perspective to the automotive software landscape. We

leave it to future research to pick these topics to improve the gen-
eralizability of the findings here.

7 RELATED WORK
Related studies around automotive software landscape in GitHub
can be divided into two parts. The first part focuses on the liter-
ature on automotive software and its engineering. In the second
part we explore studies offering characterization of other software
communities.

7.1 Automotive software
There are many studies on automotive software, exploring the
different dimensions of the topic. Some areas focused in the last five
years (as identified using Google Scholar search) include automotive
software architecture [26–28, 31, 44], AI-based solutions [9, 42],
model-based solutions [37, 43, 46] and blockchain [7]. These studies
touch on aspects such as complexity [32], safety [32], security [38,
46], privacy [7], and testing [38, 40] that are relevant for automotive
software.

Another line of research on automotive software is in terms of
their development and development processes [6, 21, 44]. These
studies focus on the different steps in automotive software de-
velopment [6, 44] and applicability of process models like agile
development [21] to automotive industry. That said, to the best of
our knowledge, there is little to no study characterizing automotive
software development and its process in terms of its development
activities (like pull requests, issues, and commits) on closed or open
source software systems.

7.2 Non-Automotive Software Landscape
Even though the software development process or its characteri-
zation is not studied for automotive domain, characterization of
other software engineering communities has been presented in
literature. The software engineering communities whose character-
istics are explored in the past can be classified based on application
domain [10, 36, 45] and those based on other factors like geography
and closed source [15, 15]. We present four such studies that have
explored software landscape from different perspectives and have
inspired our study.

The most recent exploration is on the open source software sys-
tems developed by large Chinese technology companies namely
Baidu, Alibaba, and Tencent [15]. Unlike the open source software
studied in general, this exploration is regional. It presents a charac-
terization of open source software developed by Chinese technology
companies, their objectives for open sourcing, and a comparison to
other software systems [15].

The second study explores a decade of ML and AI software sys-
tems developed in open source [10]. The study characterizes the
trend of ML/AI evolution in addition to their collaboration and au-
tonomy, and contrasts it against the general software systems [10].
These two studies are our primary inspirations.

Another study characterizes video game development and how
it is different from traditional software development [36]. Based on
interviews, the study identifies differences between the two types
of software system and how researcher can help [36].

Painting the Landscape of Automotive Software in GitHub

MSR 2022, May 23–24, 2022, Pittsburgh, PA, USA

Finally, studies on bots explore its use, and how these special
software systems can help the development of other software sys-
tems [45].

Along these lines, this study offers an exploration into the land-
scape of open source automotive software projects. Open sourcing
is a recent phenomina in automotive industry as shown in the
temporal trends in Section 3. Taking inspiration from the previous
studies and combining elements from many sources, we quantita-
tively analyze the repository data. We hope that like the previous
studies, the findings from our study inspires future research and
improve the state of automotive software development.

8 CONCLUSIONS
This study presents a landscape of automotive software projects
publicly available on GitHub. We identified and categorized ≈600
automotive repositories grounded in definitions from literature
and well-defined empirical methods. We also identified a similar
number of non-automotive projects for comparison. We analyzed
the origin, temporal trends, key players, popularity of projects,
languages for development, user distribution across repositories,
and development activities. We also present, a first of its kind,
manually curated dataset of automotive projects and a comparison
set of non-automotive projects, for replication and future research.
For an industry traditionally being in closed source in its half a
century history of software use, open sourcing software projects
marks a landmark change. This study shows that automotive do-
main is undergoing a shift in multiple dimensions including the
prevalence of automated driving software development, change in
preferred language from MATLAB to Python, and entry of software
companies and startups to the domain.

We foresee that the recent developments in software engineer-
ing, that enables automated driving, will further accelerate open
source automotive software development. We believe that the soft-
ware stacks for automated driving will benefit from perception and
decision software currently developed in open source. Since these
systems are developed independent of car makers, involving the
open source community for the acceleration of their development,
is a logical step.

9 ACKNOWLEDGEMENTS
We thank Ayushi Rastogi for her role in the inter-researcher agree-
ment, discussions on statistical tests, and help with the GHTorrent
data. Thanks are due to the MSR reviewers for their comments
which resulted in a richer discussion section. This work is a part of
the i-CAVE research programme (14897 P14-18) funded by NWO
(Netherlands Organisation for Scientific Research).

REFERENCES
[1] National Aeronautics and Space Administration. 2004. NASA Software Safety

Standard (NASA-STD-8719.13B). Technical Report.

[2] Harald Altinger, Franz Wotawa, and Markus Schurius. 2014. Testing methods
used in the automotive industry: Results from a survey. In Proceedings of the 2014
Workshop on Joining AcadeMiA and Industry Contributions to Test Automation
and Model-Based Testing. 1–6.

[3] Jorge Aranda and Gina Venolia. 2009. The secret life of bugs: Going past the
errors and omissions in software repositories. In 2009 IEEE 31st International
Conference on Software Engineering. IEEE, 298–308.

[4] Reinhard Bergmann, John Ludbrook, and Will PJM Spooren. 2000. Different out-
comes of the Wilcoxon—Mann—Whitney test from different statistics packages.

The American Statistician 54, 1 (2000), 72–77.

[5] Manfred Broy, Ingolf H Kruger, Alexander Pretschner, and Christian Salzmann.

2007. Engineering automotive software. Proc. IEEE 95, 2 (2007), 356–373.
[6] Yanja Dajsuren and Mark van den Brand. 2019. Automotive Systems and Software

Engineering. Springer.

[7] Ali Dorri, Marco Steger, Salil S Kanhere, and Raja Jurdak. 2017. Blockchain: A
distributed solution to automotive security and privacy. IEEE Communications
Magazine 55, 12 (2017), 119–125.

[8] Christof Ebert and John Favaro. 2017. Automotive software. IEEE Software 34, 03

(2017), 33–39.

[9] Fabio Falcini, Giuseppe Lami, and Alessandra Mitidieri Costanza. 2017. Deep

learning in automotive software. IEEE Software 34, 3 (2017), 56–63.

[10] Danielle Gonzalez, Thomas Zimmermann, and Nachiappan Nagappan. 2020. The
State of the ML-universe: 10 Years of Artificial Intelligence & Machine Learn-
ing Software Development on GitHub. In Proceedings of the 17th International
Conference on Mining Software Repositories. 431–442.

[11] Dip Goswami, Martin Lukasiewycz, Reinhard Schneider, and Samarjit
Chakraborty. 2012. Time-triggered implementations of mixed-criticality au-
tomotive software. In 2012 Design, Automation & Test in Europe Conference &
Exhibition (DATE). IEEE, 1227–1232.

[12] Georgios Gousios. 2013. The GHTorrent dataset and tool suite. In Proceedings
of the 10th Working Conference on Mining Software Repositories (MSR ’13). IEEE
Press, Piscataway, NJ, USA, 233–236. http://dl.acm.org/citation.cfm?id=2487085.
2487132

[13] Georgios Gousios and Diomidis Spinellis. 2017. Mining software engineering
data from GitHub. In 2017 IEEE/ACM 39th International Conference on Software
Engineering Companion (ICSE-C). IEEE, 501–502.

[14] Alireza Haghighatkhah, Ahmad Banijamali, Olli-Pekka Pakanen, Markku Oivo,
and Pasi Kuvaja. 2017. Automotive software engineering: A systematic mapping
study. Journal of Systems and Software 128 (2017), 25–55.

[15] Junxiao Han, Shuiguang Deng, David Lo, Chen Zhi, Jianwei Yin, and Xin Xia.
2021. An Empirical Study of the Landscape of Open Source Projects in Baidu,
Alibaba, and Tencent. In 2021 IEEE/ACM 43rd International Conference on Software
Engineering: Software Engineering in Practice (ICSE-SEIP). IEEE, 298–307.
[16] Geir Kjetil Hanssen, Tor Stålhane, and Thor Myklebust. 2018. SafeScrum®-Agile

Development of Safety-Critical Software. Springer.

[17] Abram Hindle, Neil A Ernst, Michael W Godfrey, and John Mylopoulos. 2011.
Automated topic naming to support cross-project analysis of software mainte-
nance activities. In Proceedings of the 8th Working Conference on Mining Software
Repositories. 163–172.

[18] ISO. 2018. ISO 26262: 2018 - Road vehicles – Functional safety. Standard. Interna-

tional Organization for Standardization.

[19] Eirini Kalliamvakou, Georgios Gousios, Kelly Blincoe, Leif Singer, Daniel M
German, and Daniela Damian. 2016. An in-depth study of the promises and perils
of mining GitHub. Empirical Software Engineering 21, 5 (2016), 2035–2071.
[20] Daniel Kästner, Christoph Cullmann, Gernot Gebhard, Sebastian Hahn, Thomas
Karos, Laurent Mauborgne, Stephan Wilhelm, and Christian Ferdinand. 2020.
Safety-Critical Software Development in C++. In International Conference on
Computer Safety, Reliability, and Security. Springer, 98–110.

[21] Brian Katumba and Eric Knauss. 2014. Agile development in automotive soft-
ware development: Challenges and opportunities. In International Conference on
Product-Focused Software Process Improvement. Springer, 33–47.

[22] John C Knight. 2002. Safety critical systems: challenges and directions. In Pro-

ceedings of the 24th international conference on software engineering. 547–550.

[23] Sangeeth Kochanthara, Yanja Dajsuren, Loek Cleophas, and Mark van den Brand.
2022. Painting the Landscape of Automotive Software in GitHub. https://doi.org/
10.5281/zenodo.5885013. [Online; accessed on 20-Jan-2022].

[24] Sangeeth Kochanthara, Geoffrey Nelissen, David Pereira, and Rahul Purandare.
2016. REVERT: A Monitor Generation Tool for Real-Time Systems. In IEEE
Real-Time Systems Symposium.

[25] Sangeeth Kochanthara and Rahul Purandare. 2016. REVERT: runtime verification

for real-time systems. (2016).

[26] Sangeeth Kochanthara, Niels Rood, Loek Cleophas, Yanja Dajsuren, and Mark
van den Brand. 2020. Semi-automatic architectural suggestions for the functional
safety of cooperative driving systems. In 2020 IEEE International Conference on
Software Architecture Companion (ICSA-C). IEEE, 55–58.

[27] Sangeeth Kochanthara, Niels Rood, Arash Khabbaz Saberi, Loek Cleophas, Yanja
Dajsuren, and Mark van den Brand. 2021. A functional safety assessment method
for cooperative automotive architecture. Journal of Systems and Software 179
(2021), 110991.

[28] Sangeeth Kochanthara, Niels Rood, Arash Khabbaz Saberi, Loek Cleophas, Yanja
Dajsuren, and Mark van den Brand. 2021. Summary: A functional safety as-
sessment method for cooperative automotive architecture. In CEUR Workshop
Proceedings, Vol. 2978. CEUR-WS. org.

[29] Christian Josef Kreiner and Richard Messnarz. 2017. Integrated Assessment of
AutomotiveSPICE 3.0, Functional Safety ISO 26262, Cybersecurity SAE J3061. In
IIR Konferenz: ISO 26262.

MSR 2022, May 23–24, 2022, Pittsburgh, PA, USA

Kochanthara et al.

[30] Alex Krizhevsky, Ilya Sutskever, and Geoffrey E Hinton. 2012. Imagenet classifi-
cation with deep convolutional neural networks. Advances in neural information
processing systems 25 (2012), 1097–1105.

[31] Stefan Kugele, David Hettler, and Jan Peter. 2018. Data-centric communication
and containerization for future automotive software architectures. In 2018 IEEE
International Conference on Software Architecture (ICSA). IEEE, 65–6509.

[32] Stefan Kugele, Philipp Obergfell, Manfred Broy, Oliver Creighton, Matthias Traub,
and Wolfgang Hopfensitz. 2017. On service-orientation for automotive software.
In 2017 IEEE International Conference on Software Architecture (ICSA). IEEE, 193–
202.

[33] Tarald O Kvålseth. 1989. Note on Cohen’s kappa. Psychological reports 65, 1

(1989), 223–226.

[34] John A McDermid. 2013. Software engineer’s reference book. Elsevier.
[35] Nuthan Munaiah, Steven Kroh, Craig Cabrey, and Meiyappan Nagappan. 2017.
Curating github for engineered software projects. Empirical Software Engineering
22, 6 (2017), 3219–3253.

[36] Emerson Murphy-Hill, Thomas Zimmermann, and Nachiappan Nagappan. 2014.
Cowboys, ankle sprains, and keepers of quality: How is video game development
different from software development?. In Proceedings of the 36th International
Conference on Software Engineering. 1–11.

[37] Philipp Obergfell, Stefan Kugele, and Eric Sax. 2019. Model-based resource
analysis and synthesis of service-oriented automotive software architectures.
In 2019 ACM/IEEE 22nd International Conference on Model Driven Engineering
Languages and Systems (MODELS). IEEE, 128–138.

[38] Dennis Kengo Oka, Toshiyuki Fujikura, and Ryo Kurachi. 2018. Shift left: Fuzzing
earlier in the automotive software development lifecycle using hil systems. In
Proc. 16th ESCAR Europe. 1–13.

[39] Annibale Panichella, Bogdan Dit, Rocco Oliveto, Massimilano Di Penta, Denys
Poshynanyk, and Andrea De Lucia. 2013. How to effectively use topic models for
software engineering tasks? an approach based on genetic algorithms. In 2013
35th International Conference on Software Engineering (ICSE). IEEE, 522–531.
[40] Dhasarathy Parthasarathy, Karl Bäckstrom, Jens Henriksson, and Sólrún Einars-
dóttir. 2020. Controlled time series generation for automotive software-in-the-
loop testing using GANs. In 2020 IEEE International Conference On Artificial
Intelligence Testing (AITest). IEEE, 39–46.

[41] Gregorio Robles and Jesus M Gonzalez-Barahona. 2005. Developer identification
methods for integrated data from various sources. ACM SIGSOFT Software
Engineering Notes 30, 4 (2005), 1–5.

[42] Rick Salay and Krzysztof Czarnecki. 2018. Using machine learning safely in auto-
motive software: An assessment and adaption of software process requirements
in ISO 26262. arXiv preprint arXiv:1808.01614 (2018).

[43] Johannes Schlatow, Mischa Möstl, Rolf Ernst, Marcus Nolte, Inga Jatzkowski, and
Markus Maurer. 2017. Towards model-based integration of component-based
automotive software systems. In IECON 2017-43rd Annual Conference of the IEEE
Industrial Electronics Society. IEEE, 8425–8432.

[44] Miroslaw Staron. 2017. Automotive software architectures. Automot. Softw. Archit

(2017), 33–39.

[45] Mairieli Wessel, Bruno Mendes De Souza, Igor Steinmacher, Igor S Wiese, Ivanil-
ton Polato, Ana Paula Chaves, and Marco A Gerosa. 2018. The power of bots:
Characterizing and understanding bots in oss projects. Proceedings of the ACM
on Human-Computer Interaction 2, CSCW (2018), 1–19.

[46] Markus Zoppelt and Ramin Tavakoli Kolagari. 2018. SAM: a security abstraction
In Security and Safety Interplay of

model for automotive software systems.
Intelligent Software Systems. Springer, 59–74.

