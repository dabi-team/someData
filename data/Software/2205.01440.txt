2
2
0
2

y
a
M
3

]
E
S
.
s
c
[

1
v
0
4
4
1
0
.
5
0
2
2
:
v
i
X
r
a

How Are Communication Channels on GitHub Presented to
Their Intended Audience? – A Thematic Analysis

Verena Ebert
verena.ebert@iste.uni-stuttgart.de
University of Stuttgart
Stuttgart, Germany

Daniel Graziotin
daniel.graziotin@iste.uni-
stuttgart.de
University of Stuttgart
Stuttgart, Germany

Stefan Wagner
stefan.wagner@iste.uni-stuttgart.de
University of Stuttgart
Stuttgart, Germany

ABSTRACT
Communication is essential in software development, and even
more in distributed settings. Communication activities need to be
organized and coordinated to defend against the threat of produc-
tivity losses, increases in cognitive load, and stress among team
members. With a plethora of communication channels that were
identified by previous research in open-source projects, there is a
need to explore organizational issues in how these communication
channels are introduced, explained, and motivated for use among
all project members. In this study, we wanted to understand which
communication channels are used in GitHub projects and how they
are presented to the GitHub project audience. We employed the-
matic analysis to analyze 151 artifacts in 90 GitHub projects. Our
results revealed 32 unique communications channels that can be
divided into nine different types. Projects mostly provide channels
of different types, but for some types (e.g., chat) it is common to
provide several channels. Maintainers are aware that channels have
different properties and help the developers to decide which chan-
nel should be used in which case. However, this is not true for all
projects, and often we have not found any explicit reasons why
maintainers chose to provide one channel over another. Different
channels can be used for different purposes and have different affor-
dances, so maintainers have to decide wisely which channels they
want to provide and make clear which channel should be used in
which case. Otherwise, developers might feel overwhelmed of too
many channels and information can get fragmented over multiple
channels [31].

CCS CONCEPTS
• Human-centered computing → Open source software; • Soft-
ware and its engineering → Collaboration in software devel-
opment.

KEYWORDS
GitHub projects, communication channels, open-source

Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
EASE 2022, June 13–15, 2022, Gothenburg, Sweden
© 2022 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-9613-4/22/06. . . $15.00
https://doi.org/10.1145/3530019.3530024

ACM Reference Format:
Verena Ebert, Daniel Graziotin, and Stefan Wagner. 2022. How Are Com-
munication Channels on GitHub Presented to Their Intended Audience?
– A Thematic Analysis. In The International Conference on Evaluation and
Assessment in Software Engineering 2022 (EASE 2022), June 13–15, 2022,
Gothenburg, Sweden. ACM, New York, NY, USA, 10 pages. https://doi.org/
10.1145/3530019.3530024

1 INTRODUCTION
Several studies have shown that software developers spend most of
their working days communicating [1, 16, 24]. A big part of commu-
nicating is choosing communication media [9]. Communicating to
this extent can be even overwhelming for developers [34], leading
to important messages getting lost [34] or even broken builds [8].
Additionally, there are other problems. Communication bits
can be scattered over different communication channels [13, 29].
With this, software projects face a substantial loss of development
speed [15, 16], to the point that communication failures are seen
as the cause of productivity losses [17] or even project failures [2].
Furthermore, using several communication channels can be dis-
ruptive [30, 31] and developers have to face many obstacles when
communicating like facing different cultures, trust issues, different
time-zones or language problems [22].

In open-source software (OSS) projects, which are characterized
by distributed environments, a good communication system is of
particular importance. Team members have to coordinate work,
discuss tasks, solve problems, make decisions, and manage their
projects continuously, over different time zones [3].

In general, using communication channels is nothing new. De-
velopers use many channels. Previously, mailing lists were very
common [25]. Nowadays, other communication channels become
more and more popular [20, 31], for example, Slack [21], issue
trackers [14], Twitter [26] or Gitter [23].

One of the largest platforms for open-source software devel-
opments is GitHub. In 2021, there were over 200 million projects
on GitHub and over 73 million developers.1 On GitHub, not only
the maintainers of a project can contribute code, but also other
developers can fork a project and then submit a pull request with
their changes. Of course, all these developers must somehow com-
municate using communication channels. However, the official
recommendations by GitHub about communication in a project
only focuses on GitHub internal channels such as issues or GitHub
Discussions2 and does not include any recommendations for other
channels.

1https://github.com/
2https://docs.github.com/en/get-started/quickstart/communicating-on-github

 
 
 
 
 
 
EASE 2022, June 13–15, 2022, Gothenburg, Sweden

Verena Ebert, Daniel Graziotin, and Stefan Wagner

Storey et al. [31] surveyed 1,449 GitHub users to see which
communication channels are essential for their work and what
challenges they face. They found that on average, developers used
11.7 channels across all activities. The five most important reported
channels were code-hosting sites, face-to-face, Q&A sites, web
search and microblogs. Mentioned challenges included getting dis-
tracted or interrupted by activities in the communication channels.
Another challenge was that developers need to keep up with which
technology: they have to know which channel is the most important
one at the moment. Developers have to be literate with the used
channels and also have to face friction of channels, for example
that some channels do not offer mobile support or have annoying
notifications. Between channels, there was also the problem of in-
formation fragmentation and the overwhelming quantity of shared
information.

1.1 Problem Statement
There is a lack of knowledge on how communication channels are
presented in large GitHub projects. With so many communication
channels provided in GitHub projects, there is a need to explore
how these communication channels are introduced, explained, and
motivated in the project documentations. We need to know which
types of communication channels are provided and how maintain-
ers introduce them to the developers. For this, we decided to focus
on large GitHub projects as defined in section 3.1. GitHub is not only
used for developing software in a team, but also for hosting small
projects with only one developer who does not communicate with
anybody or even just as backup for any non-software-related data.
As we want to examine communication channels, we therefore de-
cided to only include large projects, assuming that they will include
more communication channels than one-developer-projects.

Our results can then be used as a basis for further analyses
exploring how GitHub users feel about the current setup and lead
to better guidelines for GitHub maintainers regarding provided
communication channels.

1.2 Research Objective
We want to use thematic analysis as described by Braun and Clarke [4]
to explore which channels are provided in large GitHub projects
and how they are presented. We want to see how the setup of
communication channels looks like.

Following an inductive approach, we wanted to be as open-
minded as possible. From another study [20], we already knew
that projects provide a large variety of channels. Additionally, we
wanted to explore any other issue related to communication chan-
nels in GitHub projects.

RQ 1: What types of communication channels
do GitHub projects provide?
RQ 2: How are communication channels on GitHub
presented to their intended audience?

2 RELATED STUDIES
Besides Storey et Al., there are several other studies about how
developers communicate in GitHub projects.

Käfer et al. [20] analyzed communication channels in GitHub
projects. They have shown that only half of the analyzed projects

use externally visible communication channels. The most often pro-
vided channels were GitHub Issues, personal e-mail, Gitter, Twitter
and mailing lists.

Tantisuwankul et al. [32] showed that contemporary GitHub
projects tend to offer multiple communication channels. These
channels are constantly changing, meaning that new channels get
adopted, and other channels are not used anymore. However, they
focused on the GitHub-internal communication channels like issues
or wiki.

Constantino et al. have interviewed 12 GitHub developers about
collaborative software development [6]. Regarding communication
channels, they showed that “a more significant number of tools
does not equate to better communication”. Different channels can
lead to failing to reach each developer or providing unsolicited
information to non-interested parties.

Studies are analyzing communication in development teams who

are, however, not using GitHub. We report on three of them.

De Sá Leitão Júnior et al. [9] analyzed communication in dis-
tributed software development teams using Grounded Theory. One
of the theoretical categories they found is choosing communication
media, including adopting email, video calls, instant messaging
software or issue tracking software.

Snyder and Lee-Partridge [27] analyzed communication channel
choices in teams. They showed that participants tend to use face-
to-face communication, telephone, or e-mail. Participants chose
the used channel based on the information they wanted to share.
Additionally, ease of use, reliability, and convenience played a big
role in choosing a channel.

Josyula et al. [19] have identified nine information needs that
developers have, e.g., clarifying requirements or understanding and
resolving bugs. These needs can be fulfilled by using one of thirteen
information sources. Some of these sources are communication
channels including blogs and community forums, discussions with
colleagues or social networking sites.

All three studies show that choosing a communication channel
is a big part of communication in development teams in general.
Our study will show if maintainers are aware that they can support
developers in choosing the right channel by giving information
about which channels are supported and which channel is useful
in which situation.

Furthermore, Storey et al. [31] have provided six recommenda-
tions, based on the challenges that we mention in the introduction
of the present paper, that maintainers should follow in their projects.
We aim to compare our results to these recommendations in sec-
tion 6.

3 METHODOLOGY
For this study, we performed a thematic analysis as described by
Braun and Clarke [4]. “Thematic analysis is a method for identifying,
analysing, and reporting patterns (themes) within data. It minimally
organises and describes your data set in (rich) detail” [4]. It is a
form of analysis within qualitative research. Other than Grounded
Theory, it requires waiting until all data has been collected before
coding begins and does not return to data collection once the coding
has begun. As we have a fixed data set, thematic analysis was more
suitable for us.

How Are Communication Channels on GitHub Presented to Their Intended Audience? – A Thematic Analysis

EASE 2022, June 13–15, 2022, Gothenburg, Sweden

Thematic analysis can be performed in two ways – inductive and
deductive. A deductive approach follows previous knowledge and
answers a “quite specific research question” [4]. Using an inductive
approach, on the other hand, allows for “coding the data without
trying to fit it into a pre-existing coding frame, or the researcher’s
analytic preconceptions” [4]. We did not have any deep insights
or assumptions about how communication channels are presented
in GitHub projects, except for some experiences as developers.
Therefore, we decided to follow an inductive approach and tried to
be as open as possible for anything communication-channel-related
that we found in the GitHub projects.

We also decided to follow a semantic approach. “With a semantic
approach, the themes are identified within the explicit or surface
meanings of the data and the analyst is not looking for anything
beyond what a participant has said or what has been written” [4].
We expected the data to be rather unemotional texts, so we saw no
need for interpreting any underlying assumptions or ideologies, as
would be the case with a latent approach.

We then followed the six phases as proposed by Braun and
Clarke [4], namely “familiarising yourself with your data, generat-
ing initial codes, searching for themes, reviewing themes, defining
and naming themes, and producing the report”.

There is some work about thematic analysis in software engineer-
ing by Cruzes and Dybå [7]. However, they focus only on finding
themes and patterns in primary studies as a way of systematic
literature reviews and not on other types of data [7]. Therefore,
we decided not to follow their proposed steps but to keep to the
original six steps of thematic analysis as described by Braun and
Clarke [4].

3.1 Definitions
During our study and in this paper, the following definitions are
used:

Communication Channel:

A communication channel is “a system or method that is
used for communicating with other people”3. In this study,
communication channels can be uni- or bidirectional. They
are used by maintainers, developers and users to communi-
cate with each other.

Maintainer:

Maintainers are the GitHub users who have the right to
merge pull requests of a GitHub project. This group includes
every other GitHub role that has more rights in a project,
for example, admin. Maintainers set up projects and provide
communication channels for other maintainers, developers
and users.
Developer:

Developers are GitHub users who actively contribute to a
project by creating pull requests.

End user:

End users are every other person who somehow use the pro-
vided communication channels. End users use the software
developed in a GitHub project but do not help develop it by
adding code.

Large project:

Based on [10, 11, 33], large GitHub projects match the fol-
lowing criteria:
• > 24 commits
• ≥ 50 comments in total (issue and commit)
• > 5 participants
• > 2 commits in average /month
• > 5 months activity (commits)
We decided to exclude projects which are forks of other
projects. In another study, we saw that there are fork projects
which match the criteria for large projects, but don’t pro-
vide any communication channels as the main projects are
responsible for this.

3.2 Data Collection
We used the GitHub Torrent database4 to find large GitHub projects.
We used the latest database dump from June 2019 and queried the
database using SQL. From originally 1,486,232 projects we had
85,377 projects left matching our criteria for large projects. In the-
matic analysis, as described by Braun and Clarke, there are no hard
criteria of how many artifacts should be coded to reach saturation.
Instead, the sample should be large enough to get a “clear conceptu-
alisation of what those themes represent, and how and why we treat
them as significant” while being not too large to not miss the “nu-
ance contained within the data” [5]. Given that analyzing all 85,377
projects would not be feasible, and given the absence of established
criteria for a cut-off value, we opted to start with an arbitrary value
of 100 randomly selected projects to code. If during our analysis
we had had the impression that data is missing to distinguish the
themes clearly, we could have easily added more projects. However,
during our analysis, we came to the conclusion that our sample was
big enough to define our themes, as we could clearly distinguish
all themes before finishing coding the last projects.

Of these 100 projects, 21 were no longer available on GitHub or
marked as shut down by the maintainers when we performed our
coding in 2021, leaving 79 projects for our analysis. As the database
dump was from 2019, the projects in our list might have changed
during the last two years, potentially not fulfilling some criteria
for large projects anymore. We could check on most of the criteria,
with the only one left out being the > 2 commits in average /month.
Given that our main analysis does not follow on the frequency of
commits per month, we opted to relax this latter criterion and opted
to enrich our dataset differently, as follows.

To enrich our dataset in terms of diversity, we looked for outlier
projects, that is, projects with a large amount or only a few com-
munication channels. For this, we used a tool which uses regular
expressions to mine for communication channels in the README
and wiki files of GitHub projects that was developed for a previous
study [20]. We randomly selected 10,000 projects from our origi-
nal dataset of large projects and analyzed them with this tool. We
sorted the sampled 10,000 projects by amount of unique channels.
Then, we selected one project with no mentioned communication
channels plus the ten projects with the largest amount of unique
communication channels. We added these selected projects to our
dataset. We did not add any projects with only a few channels,

3https://dictionary.cambridge.org/de/worterbuch/englisch/channel-of-

communication

4https://ghtorrent.org/

EASE 2022, June 13–15, 2022, Gothenburg, Sweden

Verena Ebert, Daniel Graziotin, and Stefan Wagner

as we observed that they were already represented in our first 79
projects.

Our final dataset comprised 79 randomly selected projects plus
the 11 projects with a large amount or only a few communication
channels, with a total of 90 projects. Of each project, we analyzed
artifacts consisting of the markdown files, the wiki, and the websites
if they were referenced in the GitHub project. The relevant website
contents were summarized into one file. All together, we coded 151
artifacts.

4 DATA CODING
The first author collected the data, performed the initial coding
and developed the first themes. The other two co-authors discussed
codes and the themes collectively and iteratively until the final
codes and themes were defined. The first author drove the coding
activities, while the other two co-authors suggested improvements,
checked on snippets and codes, and provided directions to observe.

5 RESULTS
In the following, we will describe the themes we defined. In the
figures, each theme has a blue background, sub-themes have a white
background. We will give examples from our analyzed projects for
most themes. Figure 1 shows an overview of the five themes that
we defined. Each theme will be described in detail in the following
subsections.

5.1 Themes
Every GitHub project we analyzed provided some sort of commu-
nication channel (provided channels). In 22 projects, they used only
the by GitHub provided issue tracker and pull requests. In three
projects, there was no README file or any other markdown file
with additional information for developers or users. We summarized
this as (project properties). Some project maintainers give reasons
why a certain channel should be used (reasons for channel usage).
Each channel has a set of properties (channel properties) and some
channels need some explanations or fulfilled preconditions before
they can be used (how to contribute).

5.2 Provided channels
Figure 2 shows every channel that was provided in at least one of the
analyzed projects. Most projects used the GitHub-given communi-
cation channels like issue, pull request, wiki or pinging a maintainer
directly on GitHub. Additionally, some projects used another ticket
system like Jira. Some projects were active on social media channels
like Twitter or Facebook. Other types of communication channels
were mail-related, for example newsletters or simple mail addresses.
In some projects, there were personal meetings, either in person
(meetup) or via skype. Forums were used, for example stack overflow
or Reddit. Last, many projects provided chat channels such as slack
or IRC.

“For chat, consider trying the #general or #beginners
channels of the unofficial community Discord, the
#rust-usage channel of the official Rust Project Dis-
cord, or the #general stream in Zulip.” 5

On the technical side, channels have different answer timeframes,

meaning they can be asynchronous or synchronous.

“The chat room is available for less formal and real-
time discussion.” 6
“For asynchronous, consider the [rust] tag on Stack-
Overflow, the /r/rust subreddit which has a pinned
weekly easy questions post, or the Rust Discourse
forum.” 5

Some channels use labels, for example GitHub issues or Stack

Overflow.

“Please ask usage and debugging questions on Stack-
Overflow (use the "protractor" tag).” 7

Other channels provide the possibility to ping a user.

“Ping me @hectorerb in the IRC chatroom if you get
stuck.” 8

There are also different ways to access the channels. They can
be off- or online, they can be in different languages, they can be
accessed through a badge on GitHub, and they can be external,
meaning not on GitHub.

5.4 Reasons for Channel Usage
Figure 4 shows the reasons why one would use a communication
channel. In open-source projects, there are channels used to con-
tribute fragments. Fragments can be improved documentation, new
examples, translations, typo fixing, or code. Contributions can also
be bug fixes or bug reports.

“Want to file a bug, contribute some code, or improve
documentation?” 8
“Here’s some examples of things you might want to
make a pull request for:
• New language translations
• New features
• Bugfixes
• Inefficient blocks of code” 8

Some channels can be used for progress tracking.

“We use the Mailing list / group for general discussion
plus issues on GitHub for detailed project discussion
and progress tracking” 6

Other channels should be used if you need to get help, seek
information, want to connect with other developers or need customer
support.

“You can get help on our google group. Most support
requests are answered very fast.” 9

5.3 Channel Properties
Each channel has a set of properties, as can be seen in Figure 3. Some
channels are maintainer approved, meaning that some channels
were officially created by the maintainers whereas other channels
are unofficial.

5https://github.com/serde-rs/serde/blob/master/README.md
6https://github.com/OpenDirective/brian/blob/master/README.md
7https://github.com/juliemr/protractor/blob/master/README.md
8https://github.com/flyve-mdm/ios-inventory-agent/blob/develop/README.

md

9https://github.com/chocoteam/choco-solver/blob/master/README.md

How Are Communication Channels on GitHub Presented to Their Intended Audience? – A Thematic Analysis

EASE 2022, June 13–15, 2022, Gothenburg, Sweden

Figure 1: Overview of themes

Figure 2: Provided channels

Figure 3: Channel properties

“Questions are free to be asked about the internals of
the codebase and about the project.” 10

“To chat with the community and the developers we
offer a Slack chat.” 11
“Use our official support channel.” 12

“News and videos: [list of YouTube videos]” 14

Another reason can be to give feedback or ideas to the maintainers.

This can be done via comments or as feature requests.

“For any comments, ideas, suggestions, issues, simply
open an issue.” 15

One reason for a channel can be to get news. The news can also

be videos.

As many channels follow a code of conduct, some channels can

be used to report rude behavior.

“Blog - A Week of A-Frame collects the latest news,
upcoming events, and cool projects that other people
are working on. The A-Frame Blog is also where you’ll
find announcements and community case studies.” 13

10https://github.com/laravelio/laravel.io/blob/main/CONTRIBUTING.md
11https://github.com/arangodb/arangodb/blob/devel/README.md
12https://github.com/flyve-mdm/ios-inventory-agent/blob/develop/

CONTRIBUTING.md
13https://aframe.io

“Instances of abusive, harassing, or otherwise unac-
ceptable behavior may be reported by opening an
issue or contacting one or more of the project main-
tainers.” 16

Support can be shown via social media.

14https://developer.android.com/jetpack
15https://github.com/layoutBox/PinLayout/blob/master/README.md
16https://github.com/atomantic/dotfiles/blob/main/CODE_OF_CONDUCT.md

EASE 2022, June 13–15, 2022, Gothenburg, Sweden

Verena Ebert, Daniel Graziotin, and Stefan Wagner

“Star this repo to show support. Let me know you
liked it on Twitter. Also, share the project.” 17

Finally, sometimes, one just wants to contact the maintainers.
[translated] “If somebody wants to join the team,
please contact me using one of the following addresses.” 18

5.5 How to Contribute
As Figure 5 shows, there are some preconditions one has to fulfill
before using some communication channels.

“Development of this plugin is done on GitHub. Pull
requests welcome. Please see issues reported there
before going to the plugin forum.” 19

Users should follow a code of conduct inside the channels.
“If any participant in this project has issues or takes
exception with a contribution, they are obligated to
provide constructive feedback and never resort to per-
sonal attacks, trolling, public or private harassment,
insults, or other unprofessional conduct.” 16

There are also some descriptions of how to use some channels,

for example how to create an issue or how to use a mailing list.

“Before filing a feature request, check the documenta-
tion to ensure it is not already provided.
Please provide the following information in an issue
filed as a feature request:
What is the goal of the new feature?
If there is a current method of accomplishing this
goal, describe the problems or shortcomings of that
method and how the proposed feature would improve
the situation.” 16
“Please refer to the openSUSE Mailing Lists page to
learn about our mailing list subscription and addi-
tional information.” 20

5.6 Project Properties
Some projects have the property of not officially offering communi-
cation channels. This can be seen in Figure 6. These projects either
have no README at all or do not mention any communication
channels in their documents.

6 DISCUSSION
In the following, we will describe how our results answer our re-
search questions. As Braun and Clarke describe, “thematic analysis
has limited interpretative power beyond mere description if it is
not used within an existing theoretical framework that anchors the
analytic claims that are made” [4]. As described in the introduction,
Storey et al. give six recommendations for maintainers that should
be followed to prevent common challenges developers face. We
want to use these recommendations as a framework around our
results to better understand the consequences of how the channels
are presented in GitHub projects.

17https://github.com/manrajgrover/halo/blob/master/README.md
18https://github.com/Kyohack/B2W2ger/README.md
19https://github.com/GoogleChromeLabs/pwa-wp/blob/develop/README.md
20https://github.com/openSUSE/open-build-service/blob/master/README.md

6.1 RQ 1: What Types of Communication

Channels Do GitHub Projects Provide?
All of our analyzed projects used communication channels. How-
ever, in 22 projects, the maintainers have not provided any ad-
ditional communication channels than the ones provided auto-
matically by GitHub. Furthermore, in three projects, there was
no README or other Markdown file with any information about
communication channels. This leads to the conclusion that some
maintainers either are not aware that additional communication
channels might be useful, or they considered other channels and
still think that issues and pull requests are enough channels for
their project. In the other projects, however, the maintainers chose
to provide additional channels to issues and pull requests.

In our theme provided channels (see Figure 2), we can see that
GitHub projects offer a wide variety of channels. In the examined
projects, 32 unique channels were provided, with nine being the
most channels additional to GitHub channels in a single project.

These channels can be clustered into nine sub-themes or types.
Channels of different types serve different needs. One-way channels
can be used for “broadcasting” information from one author to a
broader audience, whereas chat channels are used for “real-time
conversation between two or more people over the internet or
another computer network”21. A channel of one type usually cannot
be replaced with a channel of another type without loosing some
of its specific features.

The channels of the same type offer similar functionality. For
example, all mail-related channels use email as a main functionality,
either in a kind of mailing-list or directly between two people. How-
ever, also channels of the same type cannot be easily interchanged
most of the time. For instance, the affordances between channels of
one type can differ a lot. Affordances are the conflicting strengths
and weaknesses of a channel [31]. To name one, mailing lists are
public to the subscribers, whereas single emails are private.

However, we have found three types of channel where the main
functionality of the channels are very much alike, namely chat,
forum and ticket system. For these three types, also the affordances
are similar for each channel of a type. Chat channels, for example,
are all synchronous, ephemeral and textual. Most chats are also
public or have public sub-channels that everybody can access. Due
to similar functionality, maintainers use other criteria to chose
between channels. Maintainers seem to provide channels that are
used by many users, and some also give a choice between two or
more channels to match the personal taste of the developers.

“Sign up to the A-Frame Slack to hang out and join the
discussion. The Slack is pretty active with currently
over 7000 people! [...] There’s also an #aframe channel
on the Supermedium Discord if you prefer that.” 22

However, in many projects, there is no explanation why more

than one channel of the same type is provided.

“You can also chat with us via IRC in #flyve-mdm on
freenode or @flyvemdm on Telegram.” 8

For maintainers, with such a large variety of channels, it might
be hard to decide which channels they want to offer. Storey et al.

21https://www.dictionary.com/browse/chat
22https://aframe.io/community/

How Are Communication Channels on GitHub Presented to Their Intended Audience? – A Thematic Analysis

EASE 2022, June 13–15, 2022, Gothenburg, Sweden

Figure 4: Reasons for channel usage

Figure 5: How to contribute

Figure 6: Project properties

recommend to “think lean when adopting new tools”. Otherwise,
many developers have issues with channel overload. Also, using
many channels might lead to distractions and interruptions and
also lead to fragmentation of information inside one project [31].
In addition, developers might contribute to more than one GitHub
project, which makes the number of channels that need to be used
even higher.

We have seen that different types of channels serve different
needs. Therefore, in a large project with many needs, there might be
many channels. However, there are channels which fulfill the same
need. Especially for forums, chats and issue tracker, maintainers
should reconsider, if two or more channels of the same type are
really necessary.

Nevertheless, maintainers should not be afraid to adopt new
technologies. Storey et al. recommend to “stay abreast of the latest
tools that may improve development productivity and team work”.
New tools might aggregate communication from different tools
in one channel, which can help with channel overload [31]. We
can see that many newer communication channels are provided
in GitHub projects, such as Slack or Discord. Moreover, we found
many “classic” communication channels like mailing lists or fo-
rums. However, there are also projects using old channels like ICQ.
Tantisuwankul et al. have shown that the used GitHub channels
change and evolve over time [32]. It looks like this is the same for

other communication channels as well. Maintainers are aware of
recent tools and adapt them in their projects.

However, there are also maintainers keeping to old channels. In
general, maintainers have to find the balance between keeping up
to date with channels and not adopting too many channels.

With such a great variety of possible channels, even of one single
type, we need to know which channels developers and maintainers
like to most/least and why.

Independent of the type of channel, we can see that the channels
named as most important in Storey’s study are also provided in our
analyzed GitHub projects. We have found projects suggesting face-
to-face meetings, Q&Q sites (e.g., Stack Overflow), (micro)blogs, and
chats among others. However, some channels named as important
were not mentioned at all in our analyzed projects. The developers
in the survey named books or rich content as important communi-
cation channels, which were not mentioned at all in our examined
projects. However, the missing channels are channels that are not
between maintainers and developers or among developers. They
are channels created between a third party (the book author, for
instance) and therefore cannot be expected to be mentioned in a
GitHub project.

GitHub projects provide 32 unique channels of nine differ-
ent types, whereby channels of different types serve different
needs. However, there are projects with more than one chan-
nel fulfilling the same need. Therefore, maintainers have to
consider which channels to provide and if more than one
channel fulfilling the same need is really necessary.

EASE 2022, June 13–15, 2022, Gothenburg, Sweden

Verena Ebert, Daniel Graziotin, and Stefan Wagner

6.2 RQ 2: How Are Communication Channels

on GitHub Presented to Their Intended
Audience?

In our analyzed projects, we can see that channels have different
properties (see Figure 3). The properties are used in three different
ways. The technical properties can ping a user and uses labels are
actively used by the maintainers to ask developers to use a tech-
nical feature of a channel. The maintainers were aware of these
properties, but we have not seen any hints that these features were
a reason for choosing one channel over another channel without
this feature.

In contrast, the two properties answer timeframe (synchronous
vs asynchronous) and maintainer-approved were used to distinguish
between two channels.

“For chat, consider trying the #general or #beginners
channels of the unofficial community Discord [...]. For
asynchronous, consider the [rust] tag on StackOver-
flow [...].” 5

According to Storey et al., developers need to recognize the
tensions between conflicting affordances [31]. Therefore, they rec-
ommend to “be aware of channel affordances and choose tools accord-
ingly”. The answer timeframe is such an affordance.

However, we did not find any written evidence that maintain-
ers chose a channel because of a specific affordance. Also, in all
examined projects, we found only one affordance described in the
documents, whereas Storey et al. describe five other channel affor-
dances, for example, private versus public, that are not explicitly
mentioned in any of the analyzed projects. We expect maintainers
to know the difference between synchronous and asynchronous
channels [18, 31]. Therefore, it might be possible that maintainers
were aware of the differences between synchronous and asynchro-
nous without being aware of the concept of channel affordances
in general. As future work, we want to know if maintainers are
aware of channel affordances and how this influences their choice
of provided channels.

The last set of properties (accessibility) was not explicitly men-
tioned by the maintainers, but influenced by them. Maintainers
decide where they want to host a channel and in what language
the communication should be. Maintainers are also responsible to
update the documentation to remove offline channels or add badges
for their channels.

This shows that maintainers do not only have to choose which
channels they want to provide, depending on functionality and affor-
dances. They also have to choose carefully what language a channel
should be in and how and where it can be accessed. They have to
maintain the channels and the respective documentation while they
are used. During our analysis, we have seen some projects where
maintainers failed to remove offline channels or where the channel
language was different from English. A different language is not a
problem per se, but maintainers have to be aware that this might
exclude potential developers. For future work, we would like to see
if maintainers are aware of these channel maintenance tasks and
how they chose the basic settings like the language.

In our theme reasons for channel usage, we found that maintain-
ers give reasons for channel usage (see Figure 4. In our examined
projects, maintainers gave 16 unique reasons for channel usage. In

36 of the analyzed 90 projects, maintainers provided at least two
channels additional to the GitHub channels. All of these maintain-
ers, except two, gave reasons when to use which channel.

Maintainers seem to be aware that different channels can be
used for different reasons and that developers need to be aware
of these reasons. Some reasons are often connected to a certain
set of channels throughout all examined projects. For example,
contributing fragments and feature requests are clearly connected to
issues or pull requests. Also, support or discussion should often be
done via all kinds of chat, Stack Overflow or issue. Reporting rude
behavior should be done via e-mail. Social support should be done
using social media.

In most projects that provided more than one additional channel,
we could see that the provided channels were of different types. In
the couple of projects that offered more than one channel of the
same type, especially of chat, forum, or ticket system (see previous
section), the reasons given for the channels of the same type were
at least in parts the same.

Storey et al.’s recommend to “define a communication covenant
with project members”. This covenant should describe which channel
should be used for which activity [31]. The maintainers giving rea-
sons for a channel is a first step towards a communication covenant.
However, if the same reason is used for several channels, developers
cannot know for sure which channel they should use. Maintainers
need to be aware of this and make it explicit for which reason which
channel should be used, without using the same reason for multiple
channels.

Our theme how to contribute shows that some maintainers gave
explanations on how to use some of the channels (see Figure 5). In
most cases, these explanations were connected to issues and pull
requests. For example, maintainers explained the GitHub workflow
or gave examples of how a good issue should look like. Also, the pre-
conditions were mostly about pull requests and issues, for example
running tests before a pull request or checking for duplicates before
submitting an issue. On the other hand, none of the chat, forum
or social media channels were connected with any explanation on
how to use them.

It is important to be literate with the tools you use [31]. There-
fore, Storey et al. recommend to “take the time to learn how to use the
channels most effectively”. Getting literate is something the main-
tainers can influence only slightly. However, giving explanations
for channels might help developers to get literate with the given
channels. If channel users are not literate with a channel, it can lead
to frustration of the other users [31]. From our results, we can see
that maintainers give explanations for the GitHub channels. This is
helpful for developers, especially for newcomers [28]. On the other
hand, common channels like chat or forum are not explained at all.
It is up to the developers to get literate with these channels.

All in all, we have seen that most GitHub projects provide at
least one additional communication channel to the GitHub channels.
Maintainers give reasons for channel usage, but they might use the
same reason for several channels. Maintainers give explanations
for the GitHub channels to help developers get literate with them.
However, there are no explanations for most other channels.

There are projects where the maintainers write about channel
affordances and give reasons in which case a channel should be used.
But there are also numerous projects not giving such information.

How Are Communication Channels on GitHub Presented to Their Intended Audience? – A Thematic Analysis

EASE 2022, June 13–15, 2022, Gothenburg, Sweden

We do not know what maintainers think who did not explicitly write
about channel affordances or communication covenant. Perhaps,
they chose the given channels because of their personal preferences
or because they do not know other channels and not based on
affordances or other properties at all. We also do not know how
developers think about the presentation of communication channels
in GitHub projects. Are they aware of channel affordances? What do
they think about the given reasons for a channel? Are explanations
or introductions missing? Finally, except for some customer support
channels, most channels are made for developers. How do users
perceive the channels?

All in all, there is a clear connection from our results to the recom-
mendations by Storey et al. although our coding was independent
of it. It strengthens the themes identified in both studies.

Maintainers provide details about how and when to use
a channel. However, there is often a lack of information on
why maintainers chose to provide one channel instead of
another and if they are aware of the differences or affordances
of channels.

6.3 Other Observations
During our analysis, we saw that most projects have a similar set
of files where communication channels are mentioned, namely
the markdown files README, CONTRIBUTING and CODE OF
CONDUCT.

There seems to be some common ground among maintainers
about which files should be included in a GitHub project. Having
a standardized set of files helps developers to find all necessary
information for contributing to a project. It also helps to structure
the information.

6.4 Implications
Our results show that there are maintainers who are aware of
channel properties and give reasons in which cases a channel should
be used. However, there are also projects without such information.
Also, some projects provided numerous channels, which might
be overwhelming. This leads to the implication that at least some
project maintainers should check their channel setup to see if they
can add additional information and if they can reduce the number
of provided channels.

To do so, maintainers can use our results. They can compare our
results with their project to see what information could be included.
Do they provide channels of the same type? Do they provide more
than one channel for the same reasons? How many communication
channels does their project provide? What affordances do these
channels have? Are the documents about my channels up to date,
or do they include offline channels? Is there a reason for channel
usage that none of the provided channels can fulfill?

We do not know why maintainers chose the communication
channels they provide in their projects. It would be interesting
to explore the reasons and feeling of the maintainers towards the
provided communication channels. If maintainers are unhappy with
the current situation, guidelines for a good set of communication
channels and how to introduce them might help. If maintainers

are happy with their setup, it might help to raise awareness about
how the developers feel about the setup and also look for a setup
that fulfills the needs of both sides, developers and maintainers. In
either way, maintainers have to chose wisely which channels they
offer.

6.5 Limitations
First, as developers ourselves, we were not completely free of previ-
ous knowledge about how GitHub projects work and communicate.
However, none of the authors has previously analyzed the writ-
ten information about GitHub communication channels before or
actively looked into the details about the channels. Therefore, we
could still do the coding as open-minded as needed. Second, the list
of large GitHub projects we used was last updated in 2019. There-
fore, there might be some newer projects that were not part of that
list. On the other hand, by analyzing projects that have existed for
at least two years, we ensured that these projects had time to set up
communication channels in case they required it. Third, we have
only analyzed what was written down in the GitHub documents. If
a maintainer did not explicitly write about something, say, chan-
nel affordances, we no dot know if the concept was unknown or
if the maintainer chose not to write about it. We want to further
investigate this in future work.

7 CONCLUSIONS AND FUTURE WORK
In our study, we have analyzed 90 GitHub projects to see how
communication channels are presented in the written documents.
We have used thematic analysis and found five themes, namely
provided channels, channel properties, reasons for channel usage, how
to contribute and project properties. The most common channels
were chats, mail-related channels, social media channels or GitHub
channels. Channels can have several properties, for example, how
they can be accessed or technical properties like the answer time-
frame. There are many reasons for which a channel should be used.
Channels can be used to contribute fragments, to get support or
discuss things, or to give feedback or ideas among other reasons. To
use a channel, some preconditions might have to be fulfilled, and
some channels have explanations on how to use them. Although
many projects do offer communication channels, some projects do
not provide any communication channels or README file.

Our analysis only focuses on what information is given by the
maintainers in the written documentation. We have no information
so far about what GitHub users think and feel about this topic.

For future work, we want to further analyze what developers
and maintainers think about the given channels. Are they aware of
channel affordances? Which channels do they like the least or the
most? How do maintainers choose which channels they want to
provide?

We want to conclude interviews and/or questionnaires with
GitHub users to answer the research questions proposed in the pre-
vious section. The results should then be combined with our current
results to form a theory on communication in GitHub projects.

Data Availability
We share raw data and scripts openly [12].

EASE 2022, June 13–15, 2022, Gothenburg, Sweden

Verena Ebert, Daniel Graziotin, and Stefan Wagner

REFERENCES
[1] Saulius Astromskis, Gabriele Bavota, Andrea Janes, Barbara Russo, and Mas-
similiano Di Penta. 2017. Patterns of developers behaviour: A 1000-hour in-
dustrial study. Journal of Systems and Software 132 (10 2017), 85–97. https:
//doi.org/10.1016/j.jss.2017.06.072

[2] Andrew Begel and Thomas Zimmermann. 2014. Analyze this! 145 questions for
data scientists in software engineering. In Proceedings of the 36th International
Conference on Software Engineering (ICSE 2014). ACM, New York, NY, USA, 12–23.
https://doi.org/10.1145/2568225.2568233

[3] Christian Bird, David Pattison, Raissa D’Souza, Vladimir Filkov, and Premkumar
Devanbu. 2008. Latent social structure in open source projects. In Proceedings
of the 16th ACM SIGSOFT International Symposium on Foundations of software
engineering - SIGSOFT ’08/FSE-16 (SIGSOFT ’08/FSE-16). ACM Press, New York,
New York, USA, 24. https://doi.org/10.1145/1453101.1453107

[4] Virginia Braun and Victoria Clarke. 2006. Using thematic analysis in psychology.
Qualitative Research in Psychology 3, 2 (1 2006), 77–101. https://doi.org/10.1191/
1478088706qp063oa

[5] Virginia Braun and Victoria Clarke. 2016. (Mis)conceptualising themes, thematic
analysis, and other problems with Fugard and Potts’ (2015) sample-size tool for
thematic analysis. International Journal of Social Research Methodology 19 (06
2016), 1–5. https://doi.org/10.1080/13645579.2016.1195588

[6] Kattiana Constantino, Shurui Zhou, Mauricio Souza, Eduardo Figueiredo, and
Christian Kästner. 2020. Understanding Collaborative Software Devel-opment:
An Interview Study. In Proceedings of the 15th International Conference on Global
Software Engineering. ACM, New York, NY, USA, 11. https://doi.org/10.1145/
3372787.3390442

[7] Daniela S. Cruzes and T. Dyba. 2011. Recommended Steps for Thematic Synthesis
in Software Engineering. In 2011 International Symposium on Empirical Software
Engineering and Measurement. IEEE, Banff, AB, Canada, 275–284. https://doi.
org/10.1109/ESEM.2011.36

[8] Daniela Damian, Luis Izquierdo, Janice Singer, and Irwin Kwan. 2007. Awareness
in the Wild: Why Communication Breakdowns Occur. In International Conference
on Global Software Engineering (ICGSE 2007). IEEE, Munich, Germany, 81–90.
https://doi.org/10.1109/ICGSE.2007.13

[9] Nelson G. De Sá Leitão Júnior, Ivaldir H. de Farias Junior, and Hermano Moura.
2019. A Preliminary Theory of Communication in Distributed Software De-
velopment Teams. Journal of Convergence Information Technology 14, 2 (2019),
30–41. https://www.researchgate.net/publication/341105638_A_Preliminary_
Theory_of_Communication_in_Distributed_Software_Development_Teams
[10] Giuseppe Destefanis, Marco Ortu, David Bowes, Michele Marchesi, and Roberto
Tonelli. 2018. On measuring affects of github issues’ commenters. In Proceedings
of the 3rd International Workshop on Emotion Awareness in Software Engineering
(EASE 2018). ACM, New York, NY, USA, 14–19. https://doi.org/10.1145/3194932.
3194936

[11] Jin Ding, Hailong Sun, Xu Wang, and Xudong Liu. 2018. Entity-level sentiment
analysis of issue comments. In Proceedings of the 3rd International Workshop on
Emotion Awareness in Software Engineering (EASE 2018, Vol. 18). ACM, New York,
NY, USA, 7–13. https://doi.org/10.1145/3194932.3194935

[12] Verena Ebert, Daniel Graziotin, and Stefan Wagner. 2022. How Are Communication
Channels on GitHub Presented to Their Intended Audience? – Dataset. https:
//doi.org/10.5281/zenodo.5909440

[13] Carl Gutwin, Reagan Penner, and Kevin Schneider. 2004. Group awareness in
distributed software development. In Proceedings of the 2004 ACM conference on
Computer supported cooperative work - CSCW ’04 (CSCW ’04). ACM Press, New
York, New York, USA, 72. https://doi.org/10.1145/1031607.1031621

[14] Anja Guzzi, Alberto Bacchelli, Michele Lanza, Martin Pinzger, and Arie van
Deursen. 2013. Communication in open source software development mailing
lists. In 2013 10th Working Conference on Mining Software Repositories (MSR) (MSR
’13). IEEE, Piscataway, NJ, USA, 277–286. https://doi.org/10.1109/MSR.2013.
6624039

[15] James D. Herbsleb and Rebecca E. Grinter. 1999. Splitting the organization and
integrating the code. In Proceedings of the 21st international conference on Software
engineering - ICSE ’99 (ICSE ’99). ACM Press, New York, New York, USA, 85–95.
https://doi.org/10.1145/302405.302455

[16] James D. Herbsleb, Helen Klein, Gary M Olson, Hans Brunner, Judith S Olson,
and Joe Harding. 1995. Object-oriented Analysis and Design in Software Project
Teams. Hum.-Comput. Interact. 10, 2 (9 1995), 249–292. https://doi.org/10.1207/
s15327051hci1002

[17] James D. Herbsleb and Audris Mockus. 2003. An empirical study of speed and
communication in globally distributed software development. IEEE Transactions
on Software Engineering 29, 6 (6 2003), 481–494. https://doi.org/10.1109/TSE.
2003.1205177

[18] Helena Holmstrom, Eoin O Conchuir, Par J Agerfalk, and Brian Fitzgerald.
2006. Global Software Development Challenges: A Case Study on Temporal,
Geographical and Socio-Cultural Distance. In 2006 IEEE International Confer-
ence on Global Software Engineering (ICGSE’06). IEE, Florianopolis, Brazil, 3–11.
https://doi.org/10.1109/ICGSE.2006.261210

[19] Jitendra Josyula, Sarat Panamgipalli, Muhammad Usman, Ricardo Britto, and
Nauman Bin Ali. 2018. Software Practitioners’ Information Needs and Sources:
A Survey Study. In 2018 9th International Workshop on Empirical Software Engi-
neering in Practice (IWESEP). IEEE, Nara, Japan, 1–6. https://doi.org/10.1109/
IWESEP.2018.00009

[20] Verena Käfer, Daniel Graziotin, Ivan Bogicevic, Stefan Wagner, and Jasmin
Ramadani. 2018. Communication in open-source projects-end of the e-mail
era?. In Proceedings of the 40th International Conference on Software Engineer-
ing: Companion Proceeedings. ACM, New York, NY, USA, 242–243.
https:
//doi.org/10.1145/3183440.3194951

[21] Bin Lin, Alexey Zagalsky, Margaret-Anne Storey, and Alexander Serebrenik.
2016. Why Developers Are Slacking Off: Understanding How Software Teams
Use Slack. In Proceedings of the 19th ACM Conference on Computer Supported
Cooperative Work and Social Computing Companion - CSCW ’16 Companion
(CSCW ’16 Companion). ACM Press, New York, New York, USA, 333–336. https:
//doi.org/10.1145/2818052.2869117

[22] Gary M. Olson and Judith S. Olson. 2000. Distance Matters. Hum.-Comput.
Interact. 15, 2 (sep 2000), 139–178. https://doi.org/10.1207/S15327051HCI1523_4
[23] Esteban Parra, Mohammad Alahmadi, Ashley Ellis, and Sonia Haiduc. 2022. A
comparative study and analysis of developer communications on Slack and Gitter.
Empirical Software Engineering 27, 2 (mar 2022), 40. https://doi.org/10.1007/
s10664-021-10095-1

[24] Dewayne Perry, Nancy Staudenmayer, and Lawrence G Votta. 1994. People,
organizations, and process improvement. IEEE Software 11, 4 (7 1994), 36–45.
https://doi.org/10.1109/52.300082

[25] Emad Shihab, Nicolas Bettenburg, Bram Adams, and Ahmed E Hassan. 2010. On
the Central Role of Mailing Lists in Open Source Projects: An Exploratory Study.
In New Frontiers in Artificial Intelligence, Kumiyo Nakakoji, Yohei Murakami, and
Eric McCready (Eds.). Springer Berlin Heidelberg, Berlin, Heidelberg, 91–103.
https://doi.org/10.1007/978-3-642-14888-0{_}9

[26] Leif Singer, Fernando Figueira Filho, and Margaret-Anne Storey. 2014. Software
engineering at the speed of light: how developers stay current using twitter. In
Proceedings of the 36th International Conference on Software Engineering. ACM,
New York, NY, USA, 211–221. https://doi.org/10.1145/2568225.2568305
[27] Jason Snyder and Joo Eng Lee-Partridge. 2013. Understanding communication
channel choices in team knowledge sharing. Corporate Communications: An
International Journal 18, 4 (10 2013), 417–431. https://doi.org/10.1108/CCIJ-03-
2012-0026

[28] Igor Steinmacher, Marco Aurélio Graciotto Silva, and Marco Aurelio Gerosa.
2014. Barriers Faced by Newcomers to Open Source Projects: A Systematic
Review. IFIP Advances in Information and Communication Technology 427. https:
//doi.org/10.1007/978-3-642-55128-4_21

[29] Margaret-Anne Storey, Leif Singer, Brendan Cleary, Fernando Figueira Filho, and
Alexey Zagalsky. 2014. The (R) Evolution of Social Media in Software Engineering.
In Proceedings of the on Future of Software Engineering (FOSE 2014). ACM, New
York, NY, USA, 100–116. https://doi.org/10.1145/2593882.2593887

[30] Margaret-Anne Storey and Alexey Zagalsky. 2016. Disrupting developer pro-
ductivity one Bot at a Time. Proceedings of the ACM SIGSOFT Symposium on
the Foundations of Software Engineering 13-18-Nove (2016), 928–931. https:
//doi.org/10.1145/2950290.2983989

[31] Margaret-Anne Storey, Alexey Zagalsky, Fernando Figueira Filho, Leif Singer, and
Daniel M. German. 2017. How Social and Communication Channels Shape and
Challenge a Participatory Culture in Software Development. IEEE Transactions
on Software Engineering 43, 2 (2 2017), 185–204. https://doi.org/10.1109/TSE.
2016.2584053

[32] Jirateep Tantisuwankul, Yusuf Sulistyo Nugroho, Raula Gaikovina Kula, Hideaki
Hata, Arnon Rungsawang, Pattara Leelaprute, and Kenichi Matsumoto. 2019.
A topological analysis of communication channels for knowledge sharing in
contemporary GitHub projects. Journal of Systems and Software 158, i (12 2019),
110416. https://doi.org/10.1016/j.jss.2019.110416

[33] Karl Werder and Sjaak Brinkkemper. 2018. MEME: Toward a Method for Emotions
Extraction from Github. In Proceedings of the 3rd International Workshop on
Emotion Awareness in Software Engineering (Gothenburg, Sweden) (SEmotion
’18). Association for Computing Machinery, New York, NY, USA, 20–24. https:
//doi.org/10.1145/3194932.3194941

[34] Steve Whittaker and Candace Sidner. 1996. Email overload. In Proceedings of
the SIGCHI conference on Human factors in computing systems common ground
- CHI ’96 (CHI ’96). ACM Press, New York, New York, USA, 276–283. https:
//doi.org/10.1145/238386.238530

