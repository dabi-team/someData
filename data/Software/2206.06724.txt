Noname manuscript No.
(will be inserted by the editor)

Modelling Guidance in Software Engineering: A
Systematic Literature Review

Shalini Chakraborty · Grischa Liebel

2
2
0
2

n
u
J

4
1

]
E
S
.
s
c
[

1
v
4
2
7
6
0
.
6
0
2
2
:
v
i
X
r
a

Received: date / Accepted: date

Abstract Despite potential beneﬁts in Software Engineering (SE), adoption
of software modelling in industry is low. Technical issues such as tool support
have gained signiﬁcant research before, but individual guidance and training
have received little attention. As a ﬁrst step towards providing the necessary
guidance in modelling, we conduct a systematic literature review (SLR) to
explore the current state of the art. We searched academic literature for mod-
elling guidance, and selected 25 papers for full-text screenin through three
rounds of selection. We ﬁnd research on modelling guidance to be fragmented,
with inconsistent usage of terminology, and a lack of empirical validation or
supporting evidence. We outline the diﬀerent dimensions commonly used to
provide guidance on software modelling. Additionally, we provide deﬁnitions
of the three terms modelling method, style, and guideline as current literature
lacks a well-deﬁned distinction between them. These deﬁnitions can help dis-
tinguishing between important concepts and provide precise modelling guid-
ance.

Keywords Modelling Styles · Modelling Training · Modelling Guidance ·
Modelling Method · Systematic Literature Review

S. Chakraborty
Reykjavik University
Menntavegur 1, 102 Reykjav´ık, Iceland
E-mail: shalini19@ru.is

G. Liebel
Reykjavik University
Menntavegur 1, 102 Reykjav´ık, Iceland
ORCID: 0000-0002-3884-815X
E-mail: grischal@ru.is

 
 
 
 
 
 
2

Shalini Chakraborty, Grischa Liebel

1 Introduction

Despite the potential beneﬁts of using models in Software Engineering (SE),
adoption has been low, typically pointing to issues such as tool support, organ-
isational resistance, and a lack of guidance/training [30,32,79,31,54,53,42,41].
Technical issues have historically received substantial attention in the mod-
elling community, seen for instance by the large amount of tools for modelling
and Model-Based Engineering (MBE). However, work on guiding individuals
in creating models receives typically only marginal attention. For instance,
Sch¨atz et al. state that “methodical guidelines are missing how to use suitable
abstractions of (parts of) a cyber-physical systems at varying level of detail
to enable the engineering of those systems with a suﬃcient level of conﬁdence
concerning the quality of the implemented systems” [69].

To better understand shortcomings in literature on guidance and training
in modelling, this paper reports on a Systematic Literature Review (SLR)
[4] surveying work on guidelines, styles, or training approaches on creating
models in SE. We address the following research question RQ: What kind
of guidance exists in SE literature on model creation? To answer the
question, we collected a total of 6109 papers starting from 1998 when the
ﬁrst UML conference was held. We complemented our database search with
snowballing [81] in the area of Business Process Modelling.

After several rounds of exclusion, we analysed 23 papers, ﬁnding that sys-
tematic guidance to create models is absent in SE literature. Existing work
proposes guidance for speciﬁc domains or problems, but generally lacks vali-
dation and/or empirical evidence. In BPM, which partially overlaps with SE
research, there exists initial empirical work investigating modelling styles and
how cognitive processes aﬀect model creation. We further ﬁnd that terminology
is used inconsistently in the literature, with terms such as method, guidelines,
or style being used inconsistently and seemingly arbitrary. To address this, we
deﬁne modelling method, modelling guideline, and modelling style.

Our SLR shows that further work is necessary in several directions in the
modelling community. First, we see that work on modelling needs to be con-
ducted more systematically. Our deﬁnitions presented in this paper can help
supporting reaching a common terminology. Secondly, empirical evidence and
validation is needed. Currently, we ﬁnd mainly solution proposals that are at
best substantiated through simpliﬁed examples.

The rest of the paper is structured as follows. In Section 2 we discuss the
lack of guidance in software modelling through related work. Section 3 explains
the methodology of our conducted SLR and validity threats. We present the
results in Section 4, followed by an overall discussion of the ﬁndings in Sec-
tion 5. Finally, we conclude the paper in Section 6 with future plans to use
the ﬁndings suitably in software modelling.

Modelling Guidance in Software Engineering: A Systematic Literature Review

3

2 Related Work

Text books on UML and object-oriented design commonly refer to heuristics
for creating UML diagrams, e.g., [65,10]. For instance, Abbott’s [1] strategy
for identifying system objects by scanning informal descriptions for nouns is
typically referred to. These and similar heuristics are common for some dia-
gram types, e.g., class diagrams, but often lacking for behaviour. Additionally,
there is, to our knowledge, no empirical evidence that these kind of heuristics
support system analysis or other modelling tasks.

Previous work has investigated how to design modelling languages in a
good way, by studying both the notations themselves, e.g., [55, 76,68,67], and
how models or diagrams are read and understood by human subjects, e.g.,
[47,75,73,74,43]. Moody [55] deﬁnes in his Physics of Notation a number of
principles for cognitively eﬀective notations. However, the value of the Physics
of Notation is unclear [76,68,67]. For diagram understanding, St¨orrle et al.
[47,75,73,74] ﬁnd that the size and layout quality of UML diagrams directly
impacts understanding. Outside of SE, Lohmeyer and Meboldt [43] ﬁnd that
there are diﬀerent patterns individuals follow when reading engineering draw-
ings. Understanding how models are read and understood can help to derive
heuristics for the quality of a model. However, this knowledge might not help
guiding individuals to create good models. That is, while the desired outcome
might be known, the process to arrive at this outcome remains unclear.

A way to describe how to create models are to provide reusable parts of
a solution, or patterns, for diﬀerent kinds of models. In the area of patterns,
there has been substantial research during the late 1990s, e.g., [23,16,8,17,18].
The well-known Gang-of-Four design patterns [23] provide reusable patterns
that should help to improve the design of object-oriented systems. Douglass
describes patterns for real-time behaviour diagrams [16], and Bordeleau [8]
proposes patterns that should aid a designer to move from a scenario-based
speciﬁcation to a state-based speciﬁcation. Dwyer et al. [17,18] propose prop-
erty speciﬁcation patterns, reusable logic constructs that can be re-used to
specify properties in speciﬁcations, speciﬁcally the order and the occurrence
of system events. The work on patterns has evolved substantially since then,
especially in the area of real-time systems, e.g., [3, 26,48]. However, patterns
describe only a part of model creation, namely what should be part of the
model. There are several other aspects that could be of interest during model
creation, e.g., in which order to create parts of the model, what to include
and what to exclude, how to decide on a reasonable level of abstraction, and
individual diﬀerences that aﬀect this process.

Towards understanding the diﬀerences between individuals when creating
models, Pinggera et al. [60,61,12] investigate BPM model creation. The au-
thors present an exploratory study with 115 students exploring how students
create BPM. They ﬁnd distinct styles of modelling by performing cluster anal-
ysis on phases of model comprehension (where a modeller builds a mental
model out of the domain behaviour), modelling (where a modeller maps the

4

Shalini Chakraborty, Grischa Liebel

mental model to actual modelling constructs), and ﬁnally reconciliation (where
a modeller acknowledges the process model).

3 Research Methodology

In this paper, we aim to answer the following research question:

RQ: What kind of guidance exists in SE literature on model
creation?

To do so, we conduct an SLR, a secondary form of study used to identify and
evaluate available research relevant to a certain research question or topic of
interest [4]. SLRs are useful to obtain a detailed picture of a research area, and
to integrate existing evidence [38]. They are increasingly common in SE [37],
and speciﬁcally in the modelling community in the last decade, e.g., [72,24,57,
56,45]. We chose an SLR over a mapping study, as we were interested in the
detailed picture, not the broad coverage of a research area a mapping study
provides [58].

We followed the steps proposed by Kitchenham and Charters [4] to perform

our SLR. An overview of this process is depicted in Figure 1.

Fig. 1 Review Process

In the following, we discuss the review steps in detail, starting with pre-

liminary search.

Article ExtractionIEEE(1478)Scopus(4365)ACM DL(463)Web of Science(738)Article SelectionTitle and Venues (744)Abstract(56)Article ClassificationArticle ApproachArticle Contribution12Snowballing(24)3b4Full text(25)Original Abstracts: 18Snowballing Set: 7Total: 7044After removing duplicates: 61093aSearch string creationModelling Guidance in Software Engineering: A Systematic Literature Review

5

3.1 Preliminary search

We started the review with preliminary research steps, by manually reading
through the last ﬁve years1 (2015 to 2019) of papers appearing in MODELS
conference (http://modelsconference.org/) and SoSyM journal (https:
//link.springer.com/journal/volumesAndIssues/10270), the two prime
venues for SE modelling research. We observed that papers use the terms
framework, guidelines, method, approach, and pattern. Hence, we used these
terms in our initial search string. We searched within modelling research in
SE, thus resulting in the following initial search string:
(“modeling” OR “modelling” OR “model-driven” OR “model-based”)
AND (“framework” OR “guidelines” OR “method” OR “approach”
OR “pattern”)
AND (“software engineering”)

Applying the initial search string on Scopus, IEEE Xplore, ACM Digital
Library, and Web of Science resulted in 17713 papers, a result we deemed
infeasible to analyse. Therefore, we decided to make a number of adaptations to
the search string. First, we added three terms we had missed initially: creation,
training, and styles. Adding creation and training is directly motivated by
our research question and goal, while adding styles is motivated by existing
work in BPM, i.e., by Pingerra et al. [60]. Secondly, to reduce the amount of
found papers, we decided to remove method, approach, and pattern. The former
two terms are relevant to our search, but their use is heavily conﬂated in SE
research. This can be seen as a sort of sampling from the population of papers
that potentially discuss advice on model creation. The third term, pattern, is
used heavily due to the popularity of design and architectural patterns. We
decided to exclude this line of research from our SLR, as it presents “proven
solutions”, and does not give direct guidance or advice for creating models.

3.2 Search and Extraction

The ﬁnal search string we used is as follows:
(“modeling” OR “modelling” OR “model-driven” OR “model-based”)
AND (“guidelines” OR “training” OR “styles” OR “creation”)
AND (“software engineering”). We adapted the search string to the four
search engines we used, further limiting the search to English papers published
from 1998, as the ﬁrst UML conference was held in that year [7]. We followed
the UK spelling of modelling throughout our review, but we used both UK
and US spelling in our search string. Additionally, we added model-driven
and model-based to target papers speciﬁcally aimed towards model-driven and
model-based engineering (MDE & MBE) as well.

We searched in title, abstract, and keywords for Scopus, IEEE Xplore,
and ACM Digital Library, and in all ﬁelds oﬀered by Web of Science. For
ACM Digital Library, we had to further exclude the keyword creation, since

1 At the time of starting the review.

6

Shalini Chakraborty, Grischa Liebel

one of the standardised ACM keywords (“CCS concepts”) is coined “Software
creation and its management”. As it was not possible to exclude the CCS
concepts from the search, we would get all papers that used this keyword
prior to removing creation from the search. The overall search yielded a total
of 7044 papers, leaving us with 6109 papers after removing duplicates.

3.3 Paper Selection

We performed paper selection in three rounds with diﬀerent inclusion and
exclusion criteria for each round. In the beginning of each round, both authors
went through a random 5 per cent of the remaining papers to determine inter-
rater agreement on the respective inclusion/exclusion criteria. We used Fleiss
kappa to measure our agreement, a statistical measure used to evaluate the
reliability of an agreement between a ﬁxed number of raters [36]. We decided on
a threshold value of κ > 0.7 as a minimum agreement to continue the selection
process. This is a compromise between Fleiss [22] suggestion to understand
kappa values of > 0.75 as excellent, and suggestions of Landis and Koch [39]
to label agreements between 0.61−0.80 as substantial, both of which have been
criticised for being arbitrary [28]. In case of lower values, we would discuss our
disagreements, potentially reﬁne the criteria, and then re-run the process with
another random selection of papers.

In the ﬁrst round, we excluded papers based on title and the paper venue.
We needed three rounds to reach a Fleiss Kappa of κ ≈ 0.73. Ultimately, we
excluded papers in the ﬁrst round if they matched any of the following criteria.
Note that we applied the criteria extremely conservative at this stage, to not
exclude relevant papers.

1. It is clear from the title that modelling/diagrams are not a contribution.
2. The conference/journal is from a diﬀerent ﬁeld of science.
3. The paper is not peer reviewed.
4. The paper discusses properties of modelling languages or compares lan-

guages.

5. The paper has a prose title, or clearly points into a diﬀerent direction than

investigated in our review.

6. The paper is about descriptive models of a scientiﬁc or real-life concept,
as opposed to a system. For instance, process improvement models such as
CMMI, or models of course curricula.

7. Modelling in a diﬀerent domain of computer science, e.g., database models,

machine learning models, or neural network models.

8. Extended abstracts for tool demos or posters.
9. Meta studies such as literature reviews, or comparative studies such as

controlled experiments.

After applying these criteria, we were left with 744 papers for the second round
of selection.

In the second round, we considered the paper abstracts. After two rounds of
discussions and adapting the exclusion criteria, we reached a kappa of κ ≈ 0.79.

Modelling Guidance in Software Engineering: A Systematic Literature Review

7

The exclusion criteria for excluding based on abstracts are as follows.

1. Creation of models is not clearly mentioned in the abstract.
2. It is clear from the abstract that the paper focuses on any of the following.

(a) Language design/meta modelling
(b) Model transformations
(c) Secondary studies such as SLRs
(d) Controlled experiments or other comparative studies
(e) Descriptive models of a scientiﬁc or real-life concept, as opposed to a

software system

(f) Architectural styles or design patterns

We excluded language design/meta modelling and model transformations, as
we consider them special cases of modelling aimed at the meta modelling
level. Applying these criteria, we excluded 688 papers from the remaining 744
papers, leaving us with 56 papers for full-text reading.

After the second exclusion round, we found three papers from the area of
BPM that ﬁt into the scope of our review. However, they were not included
through the search, as they did not ﬁt the software engineering keyword. Nev-
ertheless, to be able to compare SE-speciﬁc research with promising work in
BPM (but outside SE), we took those three papers as a starting set for back-
wards and forwards snowballing [81]. That is, we searched both the references
and citations of the three papers, including papers that ﬁt our scope. We used
the same exclusion criteria as for the second round resulting in a set of 24
papers from BPM.

In the third and last round, we extracted and read the full-text of the 56
remaining papers, as well as the 24 papers from the snowball search in BPM.
We used the same exclusion criteria as for the second round. We applied the
criteria to each paper’s full text. Furthermore, we excluded one paper, as an
extended version of that paper was already included in the review.

This resulted in a ﬁnal set of 18 papers from the original paper set, and 7

papers from the snowball search left for analysis.

3.4 Data Extraction

The ﬁnal 25 papers we analysed are listed in Tables 6 and 7, in Appendix A. We
provide the citations of all 25 papers in Appendix A. Both authors analysed all
25 papers, then discussed their disagreements. We did not calculate inter-rater
agreement at this step. We deemed this unnecessary, as re-running the analysis
several times would likely result in the authors memorising the discussions, not
an actual assessment of inter-rater agreement.

For analysis, we classiﬁed each paper based on their research approaches
and research contributions. We use the classiﬁcation of research approaches
by Wieringa et al. [80] and later updated by Petersen et al. [59] to describe the
contribution of the papers and thus the maturity of the research area. Table 1
summarises the diﬀerent paper categories.

8

Shalini Chakraborty, Grischa Liebel

Research Approach
Evaluation Research

Solution Proposals

Validation Research

Philosophical Papers

Opinion Papers

Experience Papers

Deﬁnition
Investigation of a problem employing case study, controlled experi-
ment, survey etc in the industrial context, implementing a technique
in practice, and evaluating the implementation, i.e., showing the ben-
eﬁts and drawbacks of the implementation.
Proposed solution (either novel or extension of an existing technique)
with a relevant argument or a good example to show the solution’s
beneﬁts. No empirical evaluation.
Novel research techniques used for experiments which are not estab-
lished in practice (for example, studies conducted with students);
investigation of properties of a solution proposal that has not been
implemented yet.
A conceptual framework that sketches a new way of looking at exist-
ing things.
An author’s personal opinion whether a certain technique is good or
bad, or how things should be done.
An author’s personal experience of how something has been done.

Table 1 Classiﬁcation of Paper Types based on Wieringa et al. [80] and Petersen et al. [59].

To provide a detailed view on what parts of modelling the papers con-
tribute to, we break down the papers into diﬀerent modelling concerns. These
concers are based on a classiﬁcation we developed in previous work [40]. We
do not claim that these concerns are exhaustive, but they serve as a useful
tool to further break down a paper’s contribution in terms of modelling. The
modelling concerns are depicted in a basic feature model notation in Figure 2.
Solid lines from the modelling concerns box depict optional features. That is,
all of the features on the right-hand side of the ﬁgure are potential concerns
of modelling that can be discussed in an paper. The diﬀerent concerns are as
follows:

1. Purpose: For what purpose is/are the model(s) created? For instance, mod-
els could serve as a software architecture description, or for communication
within a development team.

2. Object: What is being described in the model? For instance, the model
could describe an entire system, a subsystem or component, or a process.
3. Stakeholder: Who is/are the primary stakeholders of the model? For ex-
ample, a model could primarily serve as end-user documentation, or as a
blueprint for developers.

4. Notation: What modelling notation(s) is/are used? For instance, UML

might be used.

5. Tooling: Which tools are prescribed? For instance, Eclipse Papyrus might

be prescribed due to a dependence on a custom plugin.

To understand the modelling concerns we used open coding in the 25 papers.

3.5 Threats to Validity

In this section, we describe the potential validity threats of our study and the
steps we have taken to mitigate them. We follow the categorisation of threats

Modelling Guidance in Software Engineering: A Systematic Literature Review

9

Fig. 2 Classiﬁcation of Modelling Concerns. Adapted from [40].

into internal validity, construct validity, external validity, and reliability ac-
cording to Runeson et al. [66].

3.5.1 Internal Validity

Internal validity reﬂects to what extend causal relationships are closely exam-
ined and other, unknown factors might impact the ﬁndings.

As a main means to reduce threats to internal validity, we tried to increase
reliability of our exclusion steps by calculating inter-rater agreements and
repeating the steps until a satisfactory level of agreement was reached between
the two authors. To avoid memory eﬀects, we chose a new random sample to
calculate inter-rater agreements after each round.

3.5.2 Construct Validity

Construct validity reﬂects to what extent the measures represent the construct
investigated.

In this paper, we investigate model creation, guidance, and related topics.
A threat to the validity of our study is that these topics are not described
using an established, standardised terminology in the modelling community.
Therefore, it might in some cases be diﬃcult to decide when an paper in fact
provides guidance for model creation, and when not. To reduce this threat, we
used open coding for data analysis, without relying on ﬁxed keywords being
used in the respective papers.

3.5.3 External Validity

External validity is reﬂecting to what extent ﬁndings can be generalised beyond
the concrete sample.

PurposeModelling ConcernsObjectStakeholderNotationTooling10

Shalini Chakraborty, Grischa Liebel

In case of our literature review, we use the major digital libraries for data
collection, which should lead to a representative sample of publications in
software engineering. However, a potential threat to validity is our decision to
exclude the conﬂated keywords “approach” and “method”. Our impression is
that these keywords are used arbitrarily. Hence, excluding them should not
aﬀect our results.

3.5.4 Reliability

Reliability describes the degree to which similar results would be obtained if
the same study would be repeated, by the same or by other researchers.

The diﬀerent steps of the data collection and analysis are clearly described
in the previous subsections, so that we are conﬁdent that other researchers
could repeat the study. Nevertheless, there is subjectivity to several parts of
our study, in particular the exclusion and analysis steps of the review. We
tried to be conservative in our exclusion, and calculated inter-rater agreement
at all exclusion steps. Furthermore, the analysis was performed by multiple
authors, and disagreements discussed.

4 Results

In this section, we present the results of the SLR. First, we classify the ﬁnal
25 papers in Section 4.1. Based on the little empirical evidence we ﬁnd in the
modelling literature, we then introduce deﬁnitions for modelling guidelines,
methods and styles in Section 4.2. Finally, we answer the RQ in Section 4.3.

4.1 Paper Classiﬁcation

We ultimately analysed 18 papers out of initial 6109, with an additional 7
papers added through snowball search. The publication years of our ﬁnal 25
papers range from 1998 to 2019, with the majority of the papers from 2008
to 2015. Figure 3 depicts the actual counts, where years without paper are
omitted.

There is no clear pattern with respect to publication venues in the data.
Venues targeted towards modelling, such as the ER and UML/Models con-
ference series or the Software and Systems Modeling journal are present, as
well as general software engineering venues, such as ICSE or Transactions on
Software Engineering.

Table 2 summarises the types of the 25 papers.
In terms of modelling concerns, we ﬁnd that the model purpose, the mod-
elling notation, and the object that is modelled are typically described in the
papers, or can be derived from the descriptions. In contrast, stakeholders and
tooling are rarely reported.

Modelling Guidance in Software Engineering: A Systematic Literature Review

11

Fig. 3 Paper count per year. Years without papers are omitted.

Paper Type
Evaluation Research (EV)
Solution Proposals (SP)
Validation Research (VR)
Philosophical Papers (PH)
Opinion Papers (OP)
Experience Papers (EX)

# papers
7
14
1
1
0
2

Table 2 Paper Types in our Analysis (based on Wieringa et al. [80]).

The included papers state several purposes for the models created. Most
commonly (9 out of 25 papers), there is no exact purpose stated for the con-
structed models, i.e., the purpose is to model parts of or a complete system.
The guidance provided in the papers thus aims broadly at improving the qual-
ity of the resulting models, or make the process more systematic. The remain-
ing papers state speciﬁc purposes for their constructed models. These purposes
vary widely, e.g., models for simulation, formal veriﬁcation, requirements and
system analysis, avoiding inconsistencies between models, and generate (parts
of) an application.

Given our snowball search in the area of BPM, business processes are
the dominating object modelled in the included papers. This is followed by
six papers where modelling of embedded control systems is reported. The
remainder of the papers focuses on a mix of diﬀerent models, such as use
cases, architecture, and requirements.

Only one paper reports a speciﬁc stakeholder. Additionally, several papers
refer to general terms such as engineers, programmers, domain experts, or

12

Shalini Chakraborty, Grischa Liebel

software developers. That is, it is often unclear who creates, modiﬁes, reads,
or otherwise comes in contact with the proposed models.

9 of our 25 papers discuss models in UML notation, or extensions thereof,
such as UML proﬁles or the UML-RT extensions. This is followed by 4 papers
using BPMN. Finally, several papers do not focus on a speciﬁc notation, or
propose their own notations.

Tools are rarely reported in our data set. Only 5 out of 25 papers report
a speciﬁc tool, 4 of which are specialised tools developed for the presented
approaches. Of the remaining 20 papers, most are tool agnostic, e.g., as they
target general quality improvement to a speciﬁc type of model or as they do
not rely on speciﬁc tool features.

4.2 Deﬁnitions of Key Terms in Model Creation

Starting from the initial keyword search and continuing throughout the entire
analysis, we noticed that terms such as method, guidelines, and style are used
seemingly arbitrary in the community. Therefore, we decided to provide deﬁ-
nitions for a number of key terms, in order to allow us to better structure the
literature, and to support future work in the area.

Modelling is a creative task, which requires thinking and problem solving,
both of which can aﬀect the quality of the model. In the general literature on
problem solving, Isaksen et al. [33] discuss that, “...when individuals, in both
school and corporate settings, understand their own style of problem solving,
they are able to learn and apply process tools more eﬀectively, and when teams
appreciate the styles of their individual members, their problem solving eﬀorts
are enhanced”. That is, styles in problem solving diﬀer between individuals,
which makes it necessary to distinguish from guidelines or methods, where
speciﬁc steps or activities are prescribed on good practice.

We deﬁne the term modelling style in reference to cognitive styles, which
are “an individual’s preferred way of gathering, processing and evaluating
data” [2]. Messik [51] deﬁnes cognitive styles as “consistent individual diﬀer-
ences in preferred ways of organizing and processing information and experi-
ence”. Accordingly, we deﬁne modelling styles as follows.

Modelling styles are “consistent individual diﬀerences in preferred
ways of creating and processing software models”.

Here, creation can include aspects such as the choice of modelling language,
preferred elements of those languages, of tools, and organising the created
model (i.e., layouting, or using a speciﬁc subset of modelling elements from
a given language). Processing includes reading, understanding and validating
models.

In contrast, we deﬁne modelling methods as follows.

Modelling Guidance in Software Engineering: A Systematic Literature Review

13

Modelling methods are “sets of steps or constraints on how one or
multiple models are created”.

In contrast to a modelling style, a modelling method is identical across
individuals, and does not depend on preferences. However, modelling methods
and modelling styles overlap and may conﬂict with each other, e.g., if an indi-
vidual’s preferred ways of creating a model are in conﬂict with the prescribed
method.

Finally, for guidelines we use an existing dictionary deﬁnition.

Guidelines are “information intended to advise people on how some-
thing should be done or what something should bea”.

a https://dictionary.cambridge.org/dictionary/english/guideline?q=

Guidelines

Following this deﬁnition, modelling methods are always also guidelines,
as they advise people how to create a model. The opposite is not true, as
guidelines do not necessarily have to be in the form of steps or constraints.

4.3 Modelling Creation Guidance in Literature

After deﬁning the terms modelling style, method, and guidelines in Section 4.2,
we now re-visit the literature in terms of our RQ, i.e., What kind of guidance
exists in SE literature on model creation?.

Based on the deﬁnitions, we found 10 papers containing guidelines (i.e.,
[20,63,27,70,14,84,6,21,13,50]), 12 papers describing modelling methods (i.e.,
[34,46,29,19,15,25,49,78,82,35,52, 64]), and 1 paper investigating modelling
styles (i.e., [62]). The remaining 2 papers (i.e., [11, 71]) discuss selected mod-
elling concerns without providing any of the above. In the following, we de-
scribe diﬀerent concerns addressed by the included papers, and relate these to
whether guidelines, methods, or styles are described.

4.3.1 Inconsistent Terminology

As discussed in Section 4.2, terminology is used inconsistently across the lit-
erature. For instance, [62] describes modelling style in a similar way as we
deﬁned it above, while the “styles” described in [63] are diﬀerent levels of for-
mality used in business process models. That is, they do not refer to individual
diﬀerences between modellers. Similarly, the described “method” in [63] is not
a set of steps or constraints and therefore rather falls under our deﬁnition
of guidelines. Finally, we also ﬁnd “guidelines” described in [25] that ﬁt our
description of a method.

14

Shalini Chakraborty, Grischa Liebel

[34]

[20]
G
EX

[15]
M
SP

[19]
M
SP

[46]
M
SP

[29]
M
SP

Paper
Guidance Type M
SP
Paper Type
Both What Both What What What What What Both
What vs. How
No
Views
/Perspectives
Decomposition
/Reﬁnement
Practices
/Anti-patterns
Cognition

[25]
M
SP

[63]
G
SP

[27]
G
SP

Yes

Yes

Yes

Yes

Yes

Yes

Yes

Yes

Yes

Yes

No

No

No

No

No

No

No

No

No

No

No

No

No

No

No

No

No

No

No

No

No

No

No

No

No

Table 3 Paper Overview, Part 1. Guidance type consists of Methods (M), Guidelines (G),
and Styles (S). Paper types are listed according to Table 2.

[70]

[6]
G
SP

[78]
M
SP

[14]
G
EV

[49]
M
SP

[84]
G
EV

Paper
Guidance Type G
SP
Paper Type
Both What How How What What Both Both What
What vs. How
No
Views
/Perspectives
Decomposition
/Reﬁnement
Practices
/Anti-patterns
Cognition

[35]
M
SP

[21]
G
EX

[82]
M
EV

Yes

Yes

Yes

Yes

Yes

Yes

Yes

Yes

No

No

No

No

No

No

No

No

No

No

No

No

No

No

No

No

No

No

No

No

No

No

No

No

No

No

No

Table 4 Paper Overview, Part 2. Guidance type consists of Methods (M), Guidelines (G),
and Styles (S). Paper types are listed according to Table 2.

Paper
Guidance Type M
Paper Type
What vs. How
Views
/Perspectives
Decomposition
/Reﬁnement
Practices
/Anti-patterns
Cognition

No

No

Yes

[52]

[13]
G
SP

[62]
S
EV

[11]
[71]
N/A N/A M
EV
VR
PH
How How N/A N/A N/A How How
No

N/A N/A N/A No

[50]
G
EV

[64]

Yes

EV

No

Yes

N/A N/A N/A Yes

No

No

No

N/A N/A N/A No

Yes

Yes

Yes

Yes

No

No

Table 5 Paper Overview, Part 3. Guidance type consists of Methods (M), Guidelines (G),
and Styles (S). Paper types are listed according to Table 2.

4.3.2 What instead of How

There is one major distinction that can be made between our included papers.
While some papers give concrete advice on how a single model (or models of
the same type) should be created, 10 papers provide guidance on using diﬀerent
models/diagrams towards an aim, such as modelling an entire system. That
is, the latter type of papers typically focuses more on what to use, e.g., in

Modelling Guidance in Software Engineering: A Systematic Literature Review

15

terms of diagram types. As timing and order are important elements in these
descriptions, several of these papers are method papers (6 out of 10).

For example, in [34], the authors describe a method to systematically model
service-oriented systems in a series of steps. The method aims at avoiding
inconsistencies between models, and has a natural order of steps. That is,
constraints are imposed at language level before the actual system models
are created. In [19], a six-step method for modelling software architecture is
presented, composed of selecting an architectural style/pattern, deﬁning archi-
tectural structural elements and rules, specifying data structures, specifying
structural units, specifying mechanisms to support state models and timers,
and eventually build the architecture model. Again, diﬀerent models are used
at diﬀerent steps of the method, and the order of the steps is important. [27]
describe guidelines for the use of OntoUML. These guidelines are essentially
restrictions on what parts of the OntoUML notation to use. Neither of these
three papers provides detailed guidance on how the individual models are
created.

Finally, six papers mix guidance on what notations, diagrams, or for-
malisms to use with detailed instructions on how to use these. For example,
[70] aims to improve the quality of information models by providing guidelines
in the form of best practices. These best practices include instructions what
diagrams to create, and how to ensure several of them are consistent. [21] also
provides guidelines, including what to use (e.g., in terms of tooling), and how
to approach modelling of use cases.

4.3.3 View-Based or Perspective-Based Guidance

Another common way to provide modelling guidance, found in 5 out of 25
papers, is to propose modelling according to multiple diﬀerent views or system
concerns, similar to architectural documentation that is typically presented
according to multiple dimensions or in multiple views [5].

For example, guidelines for increasing the quality of process models are
presented in [6], using both perspectives and views. The six perspectives of
correctness, relevance, economic eﬃciency, clarity, comparability, and system-
atic design are considered, as well as several modelling views, such as a data
view, organisational view, and control view. Similarly, [29] proposes a method
to semi-automatically create hypermedia applications by modelling the appli-
cation using diﬀerent views, such as the navigation and presentation views.

4.3.4 Decomposition-Driven or Reﬁnement-Driven Guidance

A common approach to deal with complexity in computer science is to decom-
pose a problem into sub-problems, or to incrementally reﬁne a solution. These
two approaches are also reﬂected in guidance on modelling. That is, several
papers propose methods and guidelines in which an abstract, incomplete or
informal model is incrementally reﬁned.

16

Shalini Chakraborty, Grischa Liebel

For example, the method proposed in [46] suggests to incrementally for-
malise behaviour, starting from textual rules, which are then reﬁned into
graphical models, and ﬁnally formalised using colored Petri nets. Similarly,
Marincic et al. [49] suggest a step-wise process in which requirements for em-
bedded control systems are reﬁned. A method to model cyber-physical systems
in terms of abstraction levels is presented in [15], where abstract concepts such
as initial requirements are modelled ﬁrst, and then increasingly described in
more detail. Ultimately, the method allows for simulation of the CPS’ be-
haviour. A method that prescribes step-wise decomposition of business pro-
cesses is described in [62]. Between each decomposition step, it is decided
which parts should be expressed together in a process model. [52] describes
decomposition steps, each of which is accompanied by guiding questions.

4.3.5 Best Practices and Anti-Patterns

Best practices and anti-patterns are common ways to describe the state of
practice and guide practitioners, e.g., in core computer science areas such as
programming [77,44] and software design [9]. This is also reﬂected in our data
set, with 8 papers suggesting such best practices or anti-patterns.

For example, in [63], ﬁve modelling styles are proposed ranging from the
so-called “ultra light style”, where UML activity diagrams are supported with
free text, to the so-called “precise operational style”, where UML and OCL are
used according to their semantics. While the authors call these styles, they are
essentially best practices on which parts of the oﬃcial UML notation should
be used depending on the functional context (who, when, where, how and why
will the model be used). The styles are based on the authors’ understanding,
without any empirical data supporting them.

4.3.6 Considering Cognition

Finally, three papers in our dataset explicitly consider the modeller’s cognitive
processes, or argue that it should be taken into consideration.

In [71], the authors suggest that a mental model is created when a prob-
lem is conceptualised. The mental model is the mapped to the actual solution
model. Assuming this process, the authors argue that improving the men-
tal model could lead to an improved domain understanding. [11] argues that
cognition needs to be taken into account to explain shortcomings in BPM.
Finally, cognition is taken into account explicitly as a part of the theoretical
framework in [14], where three styles for BPM are extracted based on an ob-
servational study. The results describe a “high-eﬃciency” style, a “good layout
but less eﬃciency” style, and a “neither good layout nor very eﬃcient” style.
The authors describe task-speciﬁc and modeller-speciﬁc factors behind each
style, especially how the above mentioned two factors inﬂuence speciﬁc aspects
of each style.

Modelling Guidance in Software Engineering: A Systematic Literature Review

17

5 Discussion

The objective of our SLR is to investigate how much guidance there exists in
the literature for model creation in SE. We discuss these ﬁndings with respect
to a number of observed themes below.

5.1 Little empirical evaluation

Among 25 included papers, 14 are solution proposals (see Table 2), and only 1
contains validation research. These statistics demonstrate a lack of empirical
evaluation present in the literature. In contrast, the papers obtained through
snowball sampling in BPM show a higher amount of evaluation and valida-
tion, with 4 out of 7 papers being evaluation research, and one paper being
validation research. That is, the area of BPM seems to be more mature when
it comes to supporting model creation through empirical studies. Similarly,
the only paper explicitly considering cognition and the construction of mental
models were in the area of BPM.

This lack of empirical studies is comparably common in the area of soft-
ware modelling. Zhang et al. [83] ﬁnd that empirical research methods within
SE are mostly applied to software maintenance, quality and testing. While
software models and methods gained empirical attention2 but none of them
investigating modelling style nor model creation.

5.2 Lack of categorisation and organisation

In addition to a lack of empirical evaluation, we observe that terminology dif-
fers substantially. Guidelines, methods, frameworks and other terms are
used in a seemingly arbitrary fashion. We address this issue by proposing def-
initions that make use of existing ones as much as possible. Additionally, we
outlined dimensions and properties of existing modelling guidelines and meth-
ods. Common ways to provide guidance in modelling are to describe what
diagrams should be created, to prescribe views or perspectives that should
be considered, to encourage a stepwise decomposition or reﬁnement, and to
suggest general best practices or anti-patterns. With the exception of step-
wise decomposition/reﬁnement, these forms of guidance can either follow a
dedicated set of steps or not. For instance, modelling guidelines could simply
outline a few UML diagrams that need to be created in arbitrary order, while
a modelling method could prescribe the same diagrams, but in a stepwise
fashion.

2 66 papers published from 2013-2017 at EMSE and ESEM.

18

Shalini Chakraborty, Grischa Liebel

5.3 Limited consideration of cognition

In BPM, substantial work exists that explicitly discusses the role of cognitive
processes and individual preferences in creating business process models. In
the SE modelling community, we do not ﬁnd such work outside of the BPM
community. On the one hand, we believe this relates to the relative constrained
nature of BPM as opposed to system modelling on a general level. That is,
notations, level of abstraction, and purpose vary considerably in software and
systems modelling and are likely to aﬀect the cognitive processes and mod-
elling styles of individuals. Nevertheless, we consider it relevant to explore this
direction more in the future. Existing work from the BPM community can be
used as valuable guidance to design similar studies in software modelling as a
whole.

6 Conclusion

We conducted an SLR on guidance in software modelling. From initially 6109
papers, we extracted 25 papers for full-text reading.

We ﬁnd that terminologies are used arbitrary and inconsistently, and that
little empirically validated modelling guidance exists. Existing papers use dif-
ferent dimensions to provide guidance for modellers, often in the form of pre-
scribing which diagrams/notations to use, which views/perspectives to model,
how to decompose or reﬁne a model of a system, or by providing best prac-
tices or anti-patterns. In the BPM community, cognition has been explicitly
considered as an important aspect of the modelling process. However, our re-
sults show that we lack similar work outside the BPM community. Finally,
to address the lack of consistent terminology, we provide deﬁnitions for mod-
elling guidelines, methods, and styles. We hope that our work will highlight the
inconsistencies in modelling guidance. Considering the success of modelling ex-
ploration in the BPM community, we believe similar attention and detailing
is needed for software models. Our deﬁnitions will help researchers in the ﬁeld
to precisely articulate their works.

References

1. Abbott, R.J.: Program design by informal english descriptions. Commun. ACM 26(11),

882–894 (1983). DOI 10.1145/182.358441

2. Allinson, C., Hayes, J.: The cognitive style index: A measure of intuition analysis for
organizational research. Journal of Management Studies 33, 119–135 (1996). DOI
http://dx.doi.org/10.1111/j.1467-6486.1996.tb00801.x

3. Autili, M., Grunske, L., Lumpe, M., Pelliccione, P., Tang, A.: Aligning qualitative,
real-time, and probabilistic property speciﬁcation patterns using a structured english
grammar.
IEEE Transactions on Software Engineering 41(7), 620–638 (2015). DOI
10.1109/TSE.2015.2398877

4. BA, K., Charters, S.: Guidelines for performing systematic literature reviews in software

engineering 2 (2007)

Modelling Guidance in Software Engineering: A Systematic Literature Review

19

5. Bass, L., Clements, P., Kazman, R.: Software architecture in practice. Addison-Wesley

Professional (2003)

6. Becker, J., Rosemann, M., Uthmann, C.: Guidelines of business process modeling 1806

(2003). DOI 10.1007/3-540-45594-9 3

7. B´ezivin, J., Muller, P. (eds.): The Uniﬁed Modeling Language, UML’98: Beyond the No-
tation, First International Workshop, Mulhouse, France, June 3-4, 1998, Selected Papers,
Lecture Notes in Computer Science, vol. 1618. Springer (1999). DOI 10.1007/b72309.
URL https://doi.org/10.1007/b72309

8. Bordeleau, F.: A systematic and traceable progression from scenario models to commu-

nicating hierarchical state machines. Carleton University (1999)

9. Brown, W.H., Malveau, R.C., McCormick, H.W.S., Mowbray, T.J.: AntiPatterns: refac-
toring software, architectures, and projects in crisis. John Wiley & Sons, Inc. (1998)
10. Bruegge, B., Dutoit, A.H.: Object-Oriented Software Engineering Using UML, Patterns,

and Java, 3rd edn. Prentice Hall Press (2009)

11. Claes, J., Vanderfeesten, I., Gailly, F., Grefen, P., Poels, G.: The structured process
modeling theory (spmt) a cognitive view on why and how modelers beneﬁt from struc-
turing the process of process modeling. Information Systems Frontiers 17, 1401–1425
(2015). DOI 10.1007/s10796-015-9585-y

12. Claes, J., Vanderfeesten, I., Pinggera, J., Reijers, H.A., Weber, B., Poels, G.: A vi-
sual analysis of the process of process modeling. Information Systems and e-Business
Management 13(1), 147–190 (2015)

13. Corallo, A., Paolis, P., Ippoliti, M., Lazoi, M., Scalvenzi, M., Secundo, G.: Guidelines
of a uniﬁed approach for product and business process modeling in complex enterprise.
Knowledge and Process Management 18 (2011). DOI 10.1002/kpm.381

14. Das, T., Dingel, J.: Model development guidelines for uml-rt: conventions, patterns and
antipatterns. Software & Systems Modeling 17 (2018). DOI 10.1007/s10270-016-0549-6

15. Deng, F.: Modeling and simulation of cps based on sysml and modelica (kg) (2019)
16. Douglass, B.P.: Doing hard time: developing real-time systems with UML, objects,

frameworks, and patterns, vol. 1. Addison-Wesley Professional (1999)

17. Dwyer, M.B., Avrunin, G.S., Corbett, J.C.: Property speciﬁcation patterns for ﬁnite-
state veriﬁcation. In: Proceedings of the second workshop on Formal methods in software
practice, pp. 7–15. ACM (1998)

18. Dwyer, M.B., Avrunin, G.S., Corbett, J.C.: Patterns in property speciﬁcations for ﬁnite-
In: Proceedings of the 1999 International Conference on Software

state veriﬁcation.
Engineering (IEEE Cat. No. 99CB37002), pp. 411–420. IEEE (1999)

19. Fatwanto, A., Boughton, C.: Architecture modeling for translative model-driven devel-
opment. In: 2008 International Symposium on Information Technology, vol. 1, pp. 1–9
(2008). DOI 10.1109/ITSIM.2008.4631619

20. Fernandes, J., Machado, R.J., Santos, H.: Modeling industrial embedded systems with

uml. pp. 18–22 (2000). DOI 10.1109/HSC.2000.843700

21. Firesmith, D.: Use case modeling guidelines. pp. 184 – 193 (1999). DOI 10.1109/

TOOLS.1999.787548

22. Fleiss, J.L., Levin, B., Paik, M.C.: Statistical methods for rates and proportions. john

wiley & sons (2013)

23. Gamma, E.: Design patterns: elements of reusable object-oriented software. Pearson

Education India (1995)

24. Giraldo, F.D., Espa˜na, S., Pastor, O.: Analysing the concept of quality in model-driven
engineering literature: A systematic review. In: 2014 IEEE Eighth International Confer-
ence on Research Challenges in Information Science (RCIS), pp. 1–12. IEEE (2014)
25. Gon¸calves, M., Fernandes, J.: Guidelines for modelling reactive systems with coloured

petri nets. pp. 126–137 (2013). DOI 10.1007/978-3-642-38209-3 8

26. Grunske, L.: Speciﬁcation patterns for probabilistic quality properties.

In: 2008
ACM/IEEE 30th International Conference on Software Engineering, pp. 31–40. IEEE
(2008)

27. Guizzardi, G., Pinheiro Das Gra¸cas, A., Guizzardi, R.: Design patterns and inductive
modeling rules to support the construction of ontologically well-founded conceptual mod-
els in ontouml. pp. 402–413 (2011). DOI 10.1007/978-3-642-22056-2 44

28. Gwet, K.L.: Handbook of inter-rater reliability advanced analytics. LLC, Gaithersburg,

MD (2010)

20

Shalini Chakraborty, Grischa Liebel

29. Hennicker, R., Koch, N.: A uml-based methodology for hypermedia design (2001). DOI

10.1007/3-540-40011-7 30

30. Hutchinson, J., Rounceﬁeld, M., Whittle, J.: Model-driven engineering practices in in-
dustry. In: 33rd International Conference on Software Engineering (ICSE ’11), pp. 633–
642 (2011)

31. Hutchinson, J., Whittle, J., Rounceﬁeld, M.: Model-driven engineering practices in in-
dustry: Social, organizational and managerial factors that lead to success or failure.
Science of Computer Programming 89, Part B(0), 144–161 (2014). SI: Success Stories
in Model Driven Engineering

32. Hutchinson, J., Whittle, J., Rounceﬁeld, M., Kristoﬀersen, S.: Empirical assessment of
MDE in industry. In: 33rd International Conference on Software Engineering (ICSE ’11),
pp. 471–480 (2011)

33. Isaksen, S., Kaufmann, A., Bakken, B.T.: An examination of the personality constructs
underlying dimensions of creative problem-solving style. Journal of Creative Behavior
50, 268–281 (2016)

34. Juhrisch, M., Dietz, G.: Context-based modeling: introducing a novel modeling ap-
proach. In: W. Esswein, K. Turowski, M. Juhrisch (eds.) Modellierung betrieblicher Infor-
mationssysteme (MobIS 2010). Modellgest¨utztes Management, pp. 111–130. Gesellschaft
f¨ur Informatik e.V., Bonn (2010)

35. Kaewkasi, C., Rivepiboon, W.: Wwm: A practical methodology for web application

modeling. pp. 603– 608 (2002). DOI 10.1109/CMPSAC.2002.1045070

36. Kılı¸c, S.: Kappa testi. Journal of Mood Disorders 5(3) (2015)
37. Kitchenham, B., Brereton, P., Budgen, D., Turner, M., Bailey, J., Linkman, S.: System-
atic literature reviews in software engineering-a systematic literature review. Information
and Software Technology 51, 7–15 (2009). DOI 10.1016/j.infsof.2008.09.009

38. Kuhrmann, M., M´endez Fern´andez, D., Daneva, M.: On the pragmatic design of litera-
ture studies in software engineering: An experience-based guideline. Empirical Software
Engineering 22, 2852–2891 (2017). DOI 10.1007/s10664-016-9492-y

39. Landis, J.R., Koch, G.G.: The measurement of observer agreement for categorical data.

biometrics pp. 159–174 (1977)

40. Liebel, G.: Model-Based Requirements Engineering in the Automotive Industry: Chal-

lenges and Opportunities. Chalmers Tekniska H¨ogskola (Sweden) (2016)

41. Liebel, G., Marko, N., Tichy, M., Leitner, A., Hansson, J.: Model-based engineering in
the embedded systems domain: an industrial survey on the state-of-practice. Software &
Systems Modeling 17(1), 91–113 (2018). DOI 10.1007/s10270-016-0523-3

42. Liebel, G., Tichy, M., Knauss, E.: Use, potential, and showstoppers of models in
automotive requirements engineering. Software & Systems Modeling (2018). DOI
10.1007/s10270-018-0683-4

43. Lohmeyer, Q., Meboldt, M., et al.: How we understand engineering drawings: an eye
tracking study investigating skimming and scrutinizing sequences. In: International con-
ference on engineering design ICED, vol. 15 (2015)

44. Long, F., Mohindra, D., Seacord, R.C., Sutherland, D.F., Svoboda, D.: Java coding
guidelines: 75 recommendations for reliable and secure programs. Addison-Wesley (2013)
45. Loniewski, G., Insfran, E., Abrah˜ao, S.: A systematic review of the use of requirements
In: International Conference on

engineering techniques in model-driven development.
Model Driven Engineering Languages and Systems, pp. 213–227. Springer (2010)

46. Machado, R.J., Fernandes, J., Barros, J.P., Gomes, L.: Scenario-based modeling in in-
dustrial information systems. pp. 19–30 (2010). DOI 10.1007/978-3-642-15234-4 4
47. Maier, A., Baltsen, N., Christoﬀersen, H., St¨orrle, H.: Towards diagram understanding:
In: Proceedings of

A pilot study measuring cognitive workload through eye-tracking.
International Conference on Human Behaviour in Design 2014 (2014)

48. Maoz, S., Ringert, J.O.: Gr(1) synthesis for ltl speciﬁcation patterns. In: Proceedings of
the 2015 10th Joint Meeting on Foundations of Software Engineering, ESEC/FSE 2015,
pp. 96–106. Association for Computing Machinery (2015). DOI 10.1145/2786805.2786824
49. Marincic, J., Mader, A., Wupper, H., Wupper, H., Wieringa, R.: Non-monotonic mod-
elling from initial requirements: a proposal and comparison with monotonic modelling
methods. pp. 67–73 (2008). DOI 10.1145/1370811.1370825

50. Mendling, J., Reijers, H., Aalst, W.: Seven process modeling guidelines (7pmg). Infor-
mation and Software Technology 52, 127–136 (2010). DOI 10.1016/j.infsof.2009.08.004

Modelling Guidance in Software Engineering: A Systematic Literature Review

21

51. Messick, S.: The nature of cognitive styles: Problems and promise in educational prac-

tice. Educational Psychologist 19, 59–74 (1984)

52. Milani, F., Dumas, M., Ahmed, N., Matuleviˇcius, R.: Modelling families of business
process variants: A decomposition driven method. Information Systems 56 (2013). DOI
10.1016/j.is.2015.09.003

53. Mohagheghi, P., Dehlen, V.: Where is the proof? - a review of experiences from applying
mde in industry. In: I. Schieferdecker, A. Hartman (eds.) Model Driven Architecture -
Foundations and Applications, Lecture Notes in Computer Science, vol. 5095, pp. 432–
443. Springer Berlin Heidelberg (2008)

54. Mohagheghi, P., Gilani, W., Stefanescu, A., Fernandez, M.A., Nordmoen, B., Fritzsche,
M.: Where does model-driven engineering help? experiences from three industrial cases.
Software and Systems Modeling 12(3), 619–639 (2013)

55. Moody, D.: The “physics” of notations: Toward a scientiﬁc basis for constructing visual
notations in software engineering. IEEE Transactions on Software Engineering 35(6),
756–779 (2009). DOI 10.1109/TSE.2009.67

56. Nguyen, P.H., Klein, J., Le Traon, Y., Kramer, M.E.: A systematic review of model-
driven security. In: 2013 20th Asia-Paciﬁc Software Engineering Conference (APSEC),
vol. 1, pp. 432–441. IEEE (2013)

57. Nguyen, P.H., Kramer, M., Klein, J., Le Traon, Y.: An extensive systematic review on
the model-driven development of secure systems. Information and Software Technology
68, 62–81 (2015)

58. Petersen, K., Feldt, R., Mujtaba, S., Mattsson, M.: Systematic mapping studies in
software engineering. Proceedings of the 12th International Conference on Evaluation
and Assessment in Software Engineering 17 (2008)

59. Petersen, K., Vakkalanka, S., Kuzniarz, L.: Guidelines for conducting systematic map-
Information and Software Technol-
ping studies in software engineering: An update.
ogy 64, 1–18 (2015). DOI https://doi.org/10.1016/j.infsof.2015.03.007. URL https:
//www.sciencedirect.com/science/article/pii/S0950584915000646

60. Pinggera, J., Soﬀer, P., Fahland, D., Weidlich, M., Zugal, S., Weber, B., Reijers, H.,
Mendling, J.: Styles in business process modeling: an exploration and a model. Software
and Systems Modeling pp. 1–26 (2013). DOI 10.1007/s10270-013-0349-1

61. Pinggera, J., Soﬀer, P., Zugal, S., Weber, B., Weidlich, M., Fahland, D., Reijers,
H., Mendling, J.: Modeling styles in business process modeling (2012). DOI 10.1007/
978-3-642-31072-0 11

62. Pinggera, J., Soﬀer, P., Zugal, S., Weber, B., Weidlich, M., Fahland, D., Reijers, H.A.,
In: Enterprise, business-

Mendling, J.: Modeling styles in business process modeling.
process and information systems modeling, pp. 151–166. Springer (2012)

63. Reggio, G., Leotta, M., Ricca, F., Astesiano, E.: Business process modelling: Five styles
and a method to choose the most suitable one (2012). DOI 10.1145/2424563.2424574
64. Rolland, C., Souveyet, C., Achour, C.: Guiding goal modeling using scenarios. IEEE

Transactions on Software Engineering - TSE 24 (1999). DOI 10.1109/32.738339

65. Rumbaugh, J., Blaha, M., Premerlani, W., Eddy, F., Lorensen, W.E., et al.: Object-

oriented modeling and design, vol. 199. Prentice-hall Englewood Cliﬀs, NJ (1991)

66. Runeson, P., H¨ost, M., Rainer, A., Regnell, B.: Case study research in software engi-

neering - guidelines and examples (2012)

67. Santos, M., Gralha, C., Goul˜ao, M., Ara´ujo, J.: Increasing the semantic transparency
of the kaos goal model concrete syntax. In: J.C. Trujillo, K.C. Davis, X. Du, Z. Li, T.W.
Ling, G. Li, M.L. Lee (eds.) Conceptual Modeling, pp. 424–439 (2018)

68. Santos, M., Gralha, C., Goul˜ao, M., Ara´ujo, J., Moreira, A.: On the impact of semantic
transparency on understanding and reviewing social goal models. In: 2018 IEEE 26th
International Requirements Engineering Conference (RE), pp. 228–239 (2018). DOI
10.1109/RE.2018.00031

69. Sch¨atz, B., T¨orngreen, M., Bensalem, S., Cengarle, M.V., Pfeifer, H., McDermid, J.,
Passerone, R., Sangiovanni-Vincentelli, A.L.: Cyber-physical european roadmap and
strategy: research agenda and recommendations for action. CyPhERS, Tech. Rep. (2015)
70. Sch¨utte, R., Rotthowe, T.: The guidelines of modeling – an approach to enhance the
quality in information models. pp. 240–254 (1998). DOI 10.1007/978-3-540-49524-6 20

22

Shalini Chakraborty, Grischa Liebel

71. Soﬀer, P., Kaner, M., Wand, Y.: Towards understanding the process of process mod-
eling: Theoretical and empirical considerations. pp. 357–369 (2011). DOI 10.1007/
978-3-642-28108-2 35

72. Somogyi, F.A., Asztalos, M.: Systematic review of matching techniques used in model-

driven methodologies. Software and Systems Modeling 19(3), 693–720 (2020)

73. St¨orrle, H.: On the impact of layout quality to understanding uml diagrams: Size mat-
ters. In: J. Dingel, W. Schulte, I. Ramos, S. Abrah˜ao, E. Insfran (eds.) Model-Driven
Engineering Languages and Systems, pp. 518–534 (2014)

74. St¨orrle, H.: Diagram size vs. layout ﬂaws: Understanding quality factors of uml dia-
grams. In: Proceedings of the 10th ACM/IEEE International Symposium on Empirical
Software Engineering and Measurement, ESEM ’16, pp. 31:1–31:10 (2016)

75. St¨orrle, H.: On the impact of size to the understanding of uml diagrams. Software &

Systems Modeling 17(1), 115–134 (2018). DOI 10.1007/s10270-016-0529-x

76. St¨orrle, H., Fish, A.: Towards an operationalization of the “physics of notations” for the
analysis of visual languages. In: A. Moreira, B. Sch¨atz, J. Gray, A. Vallecillo, P. Clarke
(eds.) Model-Driven Engineering Languages and Systems, pp. 104–120. Springer Berlin
Heidelberg, Berlin, Heidelberg (2013)

77. Sutter, H., Alexandrescu, A.: C++ coding standards: 101 rules, guidelines, and best

practices. Pearson Education (2004)

78. Wang, Z.: A modeling approach for use-cases model in uml. pp. 176–179 (2012). DOI

10.1109/ICACI.2012.6463145

79. Whittle, J., Hutchinson, J., Rounceﬁeld, M., Burden, H., Heldal, R.: Industrial adoption
of model-driven engineering: Are the tools really the problem? In: A. Moreira, B. Sch¨atz,
J. Gray, A. Vallecillo, P. Clarke (eds.) Model-Driven Engineering Languages and Systems,
Lecture Notes in Computer Science, vol. 8107, pp. 1–17. Springer Berlin Heidelberg
(2013)

80. Wieringa, R., Maiden, N., Mead, N., Rolland, C.: Requirements engineering paper clas-
siﬁcation and evaluation criteria: A proposal and a discussion. Requir. Eng. 11, 102–107
(2006). DOI 10.1007/s00766-005-0021-6

81. Wohlin, C.: Guidelines for snowballing in systematic literature studies and a replica-
tion in software engineering. In: Proceedings of the 18th International Conference on
Evaluation and Assessment in Software Engineering, EASE ’14. Association for Com-
puting Machinery, New York, NY, USA (2014). DOI 10.1145/2601248.2601268. URL
https://doi.org/10.1145/2601248.2601268

82. Wu, J., Yue, T., Ali, S., Zhang, H.: A modeling methodology to facilitate safety-oriented
architecture design of industrial avionics software 45(7) (2015). DOI 10.1002/spe.2281.
URL https://doi.org/10.1002/spe.2281

83. Zhang, L., Tian, J.H., Jiang, J., Liu, Y.J., Pu, M.Y., Yue, T.: Empirical research in
software engineering — a literature survey. In: Journal of Computer Science and Tech-
nology, pp. 266–276 (2018). DOI 10.1007/s11390-018-1864-x. URL https://doi.org/
10.1007/s11390-018-1864-x

84. Zhao, X., Gray, J.: Design guidelines for feature model construction: Exploring the
relationship between feature model structure and structural complexity. pp. 323–331
(2019). DOI 10.5220/0007388703230331

A Paper Categorisation Details

In the following, we list the papers we used during our analysis. Table 6 shows the papers
extracted during the original search, while Table 7 shows the papers from the snowball
search.

Modelling Guidance in Software Engineering: A Systematic Literature Review

23

Paper

Titles

[34]

[46]

[29]
[19]

[15]

[20]

[63]

[27]

[25]

[70]

[49]

[14]

[84]

[6]

[78]
[82]

[21]
[35]

Context-based modeling: Introducing a novel model-
ing approach
Scenario-based modeling in industrial information sys-
tems
A UML-Based Methodology for Hypermedia Design
Architecture modeling for translative model-driven de-
velopment
Modeling and simulation of CPS based on SysML and
modelica(KG)
Modeling Industrial Embedded Systems with UML

systems with

for modelling reactive

Business Process Modelling: Five Styles and a Method
to Choose the Most Suitable One
Design patterns and inductive modeling rules to sup-
port the construction of ontologically well-founded
conceptual models in OntoUML
Guidelines
coloured Petri nets
The guidelines of modeling - An approach to enhance
the quality in information models
Non-Monotonic Modelling from Initial Requirements:
A Proposal and Comparison with Monotonic Mod-
elling Methods
Model development guidelines for UML-RT: conven-
tions, patterns and antipatterns
Design guidelines for feature model construction: Ex-
ploring the relationship between feature model struc-
ture and structural complexity
Guidelines of business process modeling

A modeling approach for use-cases model in UML
A modeling methodology to facilitate safety-oriented
architecture design of industrial avionics software
Use case modeling guidelines
WWM: a practical methodology for Web application
modeling

Table 6 Selected Papers from Original Set

Authors

M. Juhrisch and G. Dietz

R. J. Machado, J.o M. Fernandes, J. P.
Barros and L. Gomes
R. Hennicker and N. Koch
A. Fatwanto and C. Boughton

F. Deng, Y. Yan, F. Gao and Linbo Wu

J. M. Fernande, R. J. Machado and H.
D. Santos
G. Reggio, M. Leotta, F. Ricca and E.
Astesiano
G. Guizzardi, A. P. das Gra¸cas, and R.
S. S. Guizzardi

M. P. Gon¸calves and J. M. Fernandes

R. Schuette and T. Rotthowe

J. Marincic, A. Mader, H. Wupper and
R. Wieringa

T. K. Das and J. Dingel

X. Zhao and J. Gray

J. Becker, M. Rosemann and C. van
Uthmann
Z. Wang
J. Wu, T. Yue, S. Ali and H. Zhang

D. G. Firesmith
C. Kaewkasi and W. Rivepiboon

Shalini Chakraborty, Grischa Liebel

24

Paper

Titles

[71]

[64]

[52]

[13]

[62]

[11]

[50]

Towards Understanding the Process of Process Mod-
eling: Theoretical and Empirical Considerations
Guiding goal modelling with scenarios

Modelling Families of Business Process Variants: A
Decomposition Driven Method
Guidelines of a Uniﬁed Approach for Product and
Business Process Modeling in Complex Enterprise
Modeling Styles in Business Process Modeling

The Structured Process Modeling Theory (SPMT) a
cognitive view on why and how modelers beneﬁt from
structuring the process of process modeling
Seven Process Modeling Guidelines (7PMG)

Table 7 Selected Papers from Snowballing Set

Authors

P. Soﬀer, M. Kaner and Y. Wand

C. Rolland, C. Souveyet and C. Ben
Achour
F. Milani, M. D., N. Ahmed and R.
Matuleviˇcius
A. Corallo, P. De Paolis, M. Ippoliti,
M. Lazoi, M. Scalvenzi and G. Secundo
J. Pinggera, P. Soﬀer, S. Zugal, B. We-
ber, M. Weidlich, D. Fahland, H. A.
Reijers and J. Mendling
J. Claes, I. Vanderfeesten, F. Gailly, P.
Grefen and G. Poels

J. Mendling, H. A. Reijers and W. M.
P. van der Aalst

