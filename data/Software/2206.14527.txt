Challenges of mapping Vulnerabilities and
Exposures to Open-Source Packages

Tobias Dam
St. Pölten University of Applied Sciences
St. Pölten, Austria
tobias.dam@fhstp.ac.at

Sebastian Neumaier
St. Pölten University of Applied Sciences
St. Pölten, Austria
sebastian.neumaier@fhstp.ac.at

2
2
0
2

n
u
J

9
2

]
E
S
.
s
c
[

1
v
7
2
5
4
1
.
6
0
2
2
:
v
i
X
r
a

Abstract—Much of the current software depends on open-source
components, which in turn have complex dependencies on other
open-source libraries. Vulnerabilities in open source therefore
have potentially huge impacts. The goal of this work is to get a
quantitative overview of the frequency and evolution of existing
vulnerabilities in popular software repositories and package
managers. To this end, we provide an up-to-date overview
of the open source landscape and its most popular package
managers. We discuss approaches to map entries of the Common
Vulnerabilities and Exposures (CVE) list to open-source libraries.
Based on this mapping approaches, we show the frequency and
distribution of CVE entries with respect to popular programming
languages.

Index Terms—open source, vulnerabilities, CVE, software repos-
itory

I. INTRODUCTION

According to a 2021 open-source security report by Synopsis,1
98% of 1,5k reviewed codebases depend on open-source
components and libraries. Given the number of dependencies
of medium- to large-size software projects, any vulnerability
in open-source code has security implications in numerous
software products and involves the risk of disclosing vulner-
abilities either directly or through dependencies, as famously
seen in the 2014 Heartbleed Bug,2 a vulnerability in the
popular OpenSSL software which exposed large parts of the
existing websites at this time.

Open-source code is written in various programming lan-
guages and published in corresponding package managers.
Currently, the largest package managers are the platform of the
Go programming language, the NPM repository of the Node.js
language, Packagist (PHP), and PyPI (Python), cf. Table I.
The documentation and communication of discovered open-
source vulnerabilities, however, does not take place directly
at the package managers. The most important platform for
discovered vulnerabilities is the Common Vulnerabilities and
Exposures (CVE) list [1]. It is a dictionary and reference
of common and publicly known IT system vulnerabilities,
operated by the Mitre Corporation, an American non-proﬁt
institution. As such, CVE has achieved wide acceptance by

1 https://www.synopsys.com/software-integrity/resources/analyst-reports/
open-source-security-risk-analysis.html, last accessed 2022-03-21

2 https://heartbleed.com/, last accessed 2022-03-21

the security community and industry and provides a compre-
hensive list of publicly known and documented vulnerabilities.
CVE is available at http://cve.mitre.org.

CVE is a critical source for security management, however,
is to some extend an heterogeneous and unstructured source.
Each vulnerability in the CVE list is identiﬁed by an unique
identiﬁer, contains a textual description and a list of references
(links to relevant documentation and code repositories). How-
ever, CVE does not include structured pointers and references
to package managers (e.g., NPM) and/or the source code in
software repositories (e.g., Github). Therefore, CVE does not
always provide enough information to get an overview of the
status and evolution of existing vulnerabilities in the different
software repositories and package managers.

The goal of this work is to study the open research problems
when mapping CVE entries to open-source projects. To do so,
we focus on the following concrete contributions:

• We provide an overview of the landscape of open-source

projects and libraries in popular package managers.

• We discuss three concrete approaches to map Common
Vulnerabilities and Exposures (CVE) list entries to open-
source libraries and projects.

• We perform a quantitative analysis of the frequency and
distribution of CVE entries corresponding to open-source
libraries based on the mapping approaches.

• Eventually, we discuss identiﬁed challenges and quality

issues wrt. the available data and the mapping.

The remainder of this paper is structured as follows: Section II
provides an overview of the current landscape of package
managers and Section III introduces the CVE list. Section IV
discusses approaches on mapping open-source libraries to
listed vulnerabilities, and presents the respective ﬁndings.
Section V relates our research to other works and, eventually,
Section VI concludes the paper.

II. OPEN SOURCE LANDSCAPE

In the context of this paper, open source refers to source code
that is made available in online software repositories for use
or modiﬁcation. We provide an overview of the most import-
ant repositories and package managers and report important

 
 
 
 
 
 
aspects such as the use of licenses, and the developments and
growth of the vast amount of software that is available – and
becomes available.

In this work, we make use of the monitoring project Librar-
ies.io [2]: it monitors and crawls the meta-information of over
30 package managers and indexes data from over 5 million
projects. Libraries.io provides the collected information as
open data; in this paper we make use of the January 2020
dump of the Libraries.io data which is hosted on Zenodo [2].

license, i.e. it imposes only very limited restrictions on reuse
and is highly compatible with other open-source licenses. 3

b) Releases and Versions: A version in the Libraries.io data
corresponds to an immutable published version of a project
from a repository. Not all repositories provide the concept of
publishing versions, so in these cases the tags/branches from
a source control system are mapped to the existing versions.

Table III: Number of versions published at repositories in 2015
and 2019, respectively.

Repository

2015

2019

NPM
NuGet
Pypi
Packagist
Maven

716,207
210,929
150,591
233,643
326,089

3,892,909
614,774
469,753
334,059
144,813

Others

459,265

364,164

Table III displays the number of versions published at the
monitored repositories in 2015 and 2019, respectively. We can
see that the largest repository, the NPM package manager,
increased considerably from 716k to 3.9 million published
versions per year. Notably, the Apache Maven Repository for
the Java language is the only repository whose numbers have
decreased in the monitored time period. The chart in Figure 1
visualizes the rapid growth, in number of published versions,
of the package managers NPM, NuGet, and PyPI; note that
the y-axis is in logarithmic scale.

Table I: Number of projects in top-7 package managers.

Repository

Projects

Perc.

Go
NPM
Packagist
Pypi
NuGet
Maven
Rubygems

1,818,666
1,275,082
313,278
231,690
199,447
184,871
161,608

39.45
27.66
6.80
5.03
4.33
4.01
3.51

Others

425,020

9.22

As shown in Table I, currently the largest package managers
are the platforms of the Go programming language and the
Node.js platform NPM. According to the 2020 data,
the
Go platform makes up even 39% of all projects indexed in
Libraries.io by listing 1.8 million projects; NPM lists around
1.3 projects which amount to 28%. The Others category in
Table I includes 25 other repositories which only sum up to
9% of all indexed projects.

a) Licenses: The licensing of code is a critical aspect of the
open-source movement. Depending on the concrete license
conditions and terms, the code is then available to download,
modify, re-publish, etc. The authors of open-source projects
may want to put restrictions on the use of the code, such
as expression of the origin/name of the authors, copyright
statements, or re-use of the concrete license. This number of
conditions and restrictions led to a broad range of popular
open-source software licenses.

Table II: Top-7 licenses across all packages.

License

Count

Perc

MIT
Apache-2.0
ISC
Other
BSD-3-Clause
GPL-3.0
MPL-2.0

1,637,451
848,475
332,676
298,626
140,806
63,890
51,517

44.13
22.87
8.97
8.05
3.80
1.72
1.39

Others

336822

9.08

Figure 1: Evolution of the total number of published versions
at top-5 largest repositories.

III. COMMON VULNERABILITIES AND EXPOSURES

Historically, with the increased connectivity and the com-
mercialization of the Internet in the mid-1990s, cybersecur-
ity research gained importance and various security vendors

In Table II we list the 7 most common licenses across all
packages and repositories. The most popular license is the
MIT License (44% of the projects), which is a permissive

3 Note that the entry “Other”, with around 8%, refers to the set of projects
where “Other” is explicitly stated in the repository meta-information which
indicates a custom license deﬁnition.

20152016201720182019100k250k500k1M2M4MNPMNuGetPypiPackagistMavenOthersstarted to develop vulnerability monitoring strategies and doc-
umentations. In 1999, Mann and Christey [1] proposed the
Common Vulnerability and Exposures (CVE) List, a public list
of exposure references. The goal was to ﬁnd out and document
if multiple tools had identiﬁed the same vulnerabilities.

Each CVE Identiﬁer in the list identiﬁes a concrete vulner-
ability and gives an unique, individual name to it. New CVE
identiﬁcation numbers are assigned by the CVE Numbering
Authorities.4 Typically, these authorities are software vendors,
open-source projects, security researchers, and bug bounty
programs. There are currently 213 partners from over 30
countries participating as authorities. Table IV displays the
number of newly published CVE entries in the last 7 years. The
number of entries increased from 6.6k to 22.2k new entries in
the year 2021.

Table IV: Number of newly published CVE entries in recent
years.

2015

2016

2017

2018

2019

2020

2021

6,602

6,520

18,161

18,213

19,095

20,516

22,226

Figure 2: Screenshot of an example CVE entry and its respect-
ive ﬁelds.

In Figure 2 we provide an example CVE entry as displayed
on the cve-search web interface.5 Besides the ID and the
summary of the vulnerability, a CVE entry provides relevant
references (e.g., Github documentation as in Figure 2), an
assessment of the severity of the vulnerability using the
Common Vulnerability Scoring System (CVSS),6 and the
Common Weakness Enumeration (CWE) taxonomy of weak-
ness types.7 Additionally, the CVE entry provides Common
Platform Enumerations (CPE) [3] version 2.3 string, which
is a standard for identifying classes of applications, operating
systems/platforms, as well as hardware information. The CPE
string consists of various ﬁelds providing information such as
the software name, vendor as well as the target software, which

contains the software computing environment (e.g. “node.js”
or “python”).

IV. FINDINGS

In this section, we ﬁrst provide details on the used data to fa-
cilitate reproducibility of our results. Then we discuss different
mapping approaches and report the identiﬁed challenges.

A. Datasets

To perform this study, we use the most recent Open Data
dump of the Libraries.io database8 – available as compressed
archive of several CSV ﬁles – to obtain data about open-
source repositories and respective libraries; details of the
repositories are described in Section II. The Libraries.io data
includes the ﬁelds NAME, PLATFORM (the package manager),
ID, REPOSITORY TYPE (e.g., GitHub), REPOSITORY LINK,
REPOSITORY OWNER and KEYWORDS.

We used the dockerized version of the open-source project
CVE-Search9 as basis for our CVE analyses. The Computer
Incident Response Center Luxembourg (CIRCL) operates a
publicly accessible instance of the CVE-Search project and
provides a daily dump of their CVE data in JSON format,10
which we imported into our database. The CIRCLE CVE
data provides the CVE ﬁelds SUMMARY and REFERENCES,
as well as the ﬁelds PRODUCT and TARGET SOFTWARE
which hold extracted information from the Common Platform
Enumerations (CPE) information.

B. Mapping Approaches

In order to establish a mapping between the software pack-
ages of the Libraries.io dataset and the corresponding CVE
entries of the CIRCL CVE dataset, we applied three different
approaches, yielding varying results:

1) Strict Name Mapping: The ﬁrst approach iterates over each
entry contained in the Libraries.io dataset and checks whether
the package manager (in the ﬁeld PLATFORM) can be matched
to any target software in the CIRCL CVE dataset (as stated
in the TARGET SOFTWARE ﬁeld).

For our query, we created a mapping between package man-
ager values of the Libraries.io dataset and the corresponding
TARGET SOFTWARE values. The query then matches the value
of the Libraries.io NAME ﬁeld with the values of the CVE
PRODUCT ﬁeld as well as the PLATFORM value with either
the TARGET SOFTWARE or checks if it is contained in the
SUMMARY of the CVE dataset.

4 https://www.cve.org/ProgramOrganization/CNAs, last accessed 2022-03-21
5 https://cve.circl.lu/cve/CVE-2021-44631, last accessed 2022-03-21
6 https://nvd.nist.gov/vuln-metrics/cvss, last accessed 2022-03-21
7 https://cwe.mitre.org/, last accessed 2022-03-21

8 https://zenodo.org/record/3626071/ﬁles/libraries-1.6.0-2020-01-12.tar.gz,

last accessed 2022-03-21

9 https://github.com/cve-search/cve-search, last accessed 2022-03-21
10 https://www.circl.lu/opendata/, last accessed 2022-03-21

Figure 3: Vulnerable package count of the top-10 package
manager across all three mapping approaches.

Figure 4: Comparison of CVE count per package manager
per year including seven package managers containing most
entries.

a) Discussion: The results of this mapping, i.e. the vulner-
able package counts, is compared with the other matching
approaches in Figure 3. The ﬁgure is limited to the top-10
package managers wrt. number of mapped packages. The strict
name mapping approach yields an unexpected low number of
mapped packages for certain package managers. We identiﬁed
the following issues: (i) In particular, Go packages provide
the repository identiﬁer consisting of provider, owner and
repository name in the Libraries.io dump, while the CVE
entry contains only the repository name. (ii) The CPE strings
of CVE entries contain potentially wrong attribute values or
lack some information as for instance the target_sw value.
(iii) Additionally, various entries do not specify the package
manager, neither in the CPE string nor inside the SUMMARY.

Additionally to comparing the amount of vulnerable packages,
we grouped the CVE entries per year and package manager if
we were able to create a mapping with the strict name mapping
approach. This distribution as well as the trend of the top-7
package managers with the highest CVE count are depicted in
Figure 4. Despite some ﬂuctuating values, there is a noticeable
upwards trend especially for the last few years.

2) Partial and Fuzzy Name Matching: In our second approach
we build a lookup table for each package manager: we deﬁne
speciﬁc keywords (e.g., NPM, Maven, etc.) for the CVE
SUMMARY ﬁeld and domain names or partial URLs (e.g.,
npmjs.com, pypi.org, etc.) for the REFERENCES. We iterate
over each CVE entry, assign a package manager based on
the lookup table, and check if the Libraries.io PLATFORM
value equals the assigned package manager and if a value
of the CVE PRODUCT list occurs either in the NAME or
KEYWORDS ﬁelds. In case multiple Libraries.io entries match
the CVE entry, our program uses a fuzzy string matching

method provided by the fuzzyset2 python package11 with a
cutoff value of 0.3 and chooses the entry with the highest
similarity value.12

a) Discussion: The results of this approach are shown in
Figure 3. The vulnerable package counts of the partial and
fuzzy name matching are considerably lower than compared to
the strict name mapping approach. Due to choosing the best
result of the fuzzy string matching as well as the necessary
cutoff to avoid high false-positive rates, the approach is prone
(i) to miss sub-packages with the same package name and (ii)
to miss matches because of the cutoff value.

3) Repository Matching: In order to increase the accuracy of
the matching of software packages to CVE entries, we focus in
this approach on the references in the respective CVE entries.
The hypothesis is that the URLs in the references consist of
the repository owner and repository name.13

We use the value of the Libraries.io REPOSITORY URL
ﬁeld and extract
the repository provider (i.e., github.com,
bitbucket.org or gitlab.com) as well as the owner and the name
of the repository. REPO_LINK contains the concatenated values
of those ﬁelds. Additionally, we search for partial URLs of the
format provider.tld/owner/repository in the CVE REFERENCES
ﬁelds and store the results in a new array LINKS.

We iterate over the CVE entries and check whether the values
of the LINKS array occur in the REPO_LINK ﬁeld of any
Libraries.io entry. First, we assigned the CVE entries to every

11 https://pypi.org/project/fuzzyset2, last accessed 2022-03-21
12 Fuzzy string matching is necessary, because some package names are
concise, common words, such as “archiver”. These are often contained in
other longer package names and result in a high amount of false positives.
13 Consider for instance the GitHub URLs, which include the organisa-

tion/owner and repository.

BowerCargoGoHomebrewMavenNPMPackagistPypiRubygemsWordpressPackage Manager02004006008001000Vulnerable Packages14622301309220122169435055105145208453213114441991421715102732241524Strict Name MappingPartial and Fuzzy MappingRepository Mapping201020112012201320142015201620172018201920202021Year0100200300400500600700800CVE CountNPMCargoWordpressBowerPypiRubygemsCondapackage that matched the repository link resulting in very
different vulnerable package counts compared to the other
approaches. These results are shown in the “All Links” column
of Table V. To determine the amount of multiply assigned
CVE entries, we reapplied the approach and only counted
the ﬁrst match of the repository link. Notably, in the “First
Link” column of Table V, the vulnerable package count is
considerably lower. Figure 3 compares the “First Link” results
to the other matching methods.

Table V: Top-10 vulnerable package count per package man-
ager using the repository matching approach. “All Links”
counts all packages with a matching link, while “First Links”
only counts the ﬁrst match.

Package Manager

All Links

First Link

Go
NPM
Maven
Pypi
Rubygems
NuGet
Packagist
Bower
Homebrew
Cargo

13201
5359
3396
458
432
411
319
265
210
168

199
510
171
224
152
52
273
114
142
44

a) Discussion: We found, that various entries in the Lib-
raries.io dataset contain the same REPOSITORY URL or at
least the same combination of repository provider, owner and
repository name. A lot of them seem to be sub-packages that
are contained inside one repository or they erroneously contain
the URL of the main project. Table VI shows the ten most
common REPO_LINK values and the respective package count.

Table VI: Count of the 10 most occurring repositories in the
Libraries.io dataset.

Repository

github.com/openshift/origin
github.com/kubernetes/kubernetes
github.com/liferay/liferay-portal
github.com/facebook/create-react-app
github.com/lodash/lodash
github.com/hyperledger/fabric
github.com/apereo/cas
github.com/docker/docker
github.com/golang/go
github.com/jupyterlab/jupyterlab

Count

1523
1181
508
508
499
487
353
350
277
266

While counting all occurrences results in assigning a high
number of non-vulnerable packages, matching only the ﬁrst
entry results in wrong mappings and potentially missed vul-
nerable sub-packages.

C. Identiﬁed Challenges

1) No clear repository identiﬁers: The CVE entries do not
contain clear identiﬁers of the code base in the corres-
ponding package manager and/or software repository.
2) Incomplete or wrong CVE entries: The CVE list contains
potentially wrong attribute values or lacks some critical
information to map to corresponding code bases.

3) Multiple relevant software packages: In some cases, the
CVE entry relates to multiple software packages and
potentially multiple code repositories.

4) Reliable datasets: There is no complete and reliable index
of open source projects; the Libraries.io data is potentially
erroneous and incomplete.

The mapping approaches allowed us to derive some insights
regarding the number of vulnerabilities for certain package
managers (cf. Figure 3), in particular, the strict name mapping
approach displayed a noticeable upwards trend in reported
vulnerabilities in recent years (Figure 4), however, an im-
proved approach and a thorough evaluation is necessary to
reach robust conclusions.

V. RELATED WORK

The overview and analysis of the open-source landscape in
this paper is based on Libraries.io [2]. Alternatively, there
are various other works that monitor existing repositories
and provide quality and popularity metrics. For instance, the
PyDriller framework [4] is a tool to mine git-based software
repositories. In this respect, the GHTorrent framework [5]
collects and provides data for all public projects available on
Github and therefore is a very comprehensive resource for
analysis.

The detection and reporting of vulnerabilities and threats
in open-source software has been the subject of extensive
research for several years already [6]–[8]. In a recent paper,
Tan et al. report the deployment of security patches on stable
branches of open-source projects [9]. Similar to our approach,
the authors map CVE entries based on the name of an open-
source package. The approach is however based on manual
investigation of the software packages and the mappings.

Most related to our mapping of CVE entries to libraries
in open-source repositories is the work of Snyk.io14 which
provides a monitoring service to identify vulnerable packages
and libraries. It consists of a detailed list of security reports
for various repositories and contains information about the
vulnerability, the name of the affected library, the versions
of the library that are affected, etc. Similarly, the GitHub
Advisory Database15 is a list of CVEs and GitHub originated
security reports and vulnerabilities of software available on
the GitHub platform. In [10] the authors make use of Snyk.io
to provide an empirical study on vulnerable dependencies and
security policies in 600 open source projects.

To summarize, we identiﬁed the following challenges when
mapping CVE to open source packages:

14 https://snyk.io/, last accessed 2022-03-21
15 https://github.com/advisories, last accessed 2022-03-21

[7] B. Kaplan and J. Qian, “A survey on common threats in npm and
pypi registries,” CoRR, vol. abs/2108.09576, 2021. [Online]. Available:
https://arxiv.org/abs/2108.09576

[8] A. Decan, T. Mens, and E. Constantinou, “On the impact of security
vulnerabilities in the npm package dependency network,” in 15th In-
ternational Conference on Mining Software Repositories, MSR 2018.
ACM, 2018, pp. 181–191.

[9] X. Tan, Y. Zhang, J. Cao, K. Sun, M. Zhang, and M. Yang,
“Understanding the practice of security patch management across
multiple branches in oss projects,” in Proceedings of the ACM Web
Conference 2022, ser. WWW ’22. New York, NY, USA: Association
for Computing Machinery, 2022, p. 767–777. [Online]. Available:
https://doi.org/10.1145/3485447.3512236

[10] B. Carlson, K. Leach, D. Marinov, M. Nagappan, and A. Prakash, “Open
source vulnerability notiﬁcation,” in Open Source Systems - 15th IFIP
WG 2.13 International Conference, OSS 2019, Montreal, QC, Canada,
May 26-27, 2019, Proceedings, ser. IFIP Advances in Information and
Communication Technology, F. Bordeleau, A. Sillitti, P. Meirelles, and
V. Lenarduzzi, Eds., vol. 556. Springer, 2019, pp. 12–23. [Online].
Available: https://doi.org/10.1007/978-3-030-20883-7_2

VI. CONCLUSION

Since an increasing amount of software packages use open-
source components and libraries, potential vulnerabilities
within such shared code bases affect not only the libraries
themselves, but also the dependent packages. The re-use of
software increases productivity and contributes to better main-
tained code, but can also lead to an increased distribution of
vulnerabilities across different software packages. After being
discovered, such common vulnerabilities are documented and
information about them is shared via CVE entries.

In this work, we have provided insights in the landscape of
open-source projects in popular package managers, and have
discussed three approaches to map an up-to-date list of CVE
entries to their respective software package. In our analyses
we have discussed both, shortcomings and quality issues of the
available data, and shortcomings of our mapping approaches
wrt. accuracy and false-positive rate.

In future work, we plan the following research directions:
Firstly, a thorough evaluation of the mapping approaches is
required to provide more accurate results and to provide a
large-scale mapping of CVE entries. Second, performing data
cleansing on the Libraries.io and the CVE dataset would highly
increase accuracy and would enable further analyses about
software packages and their vulnerabilities. Third, research in
improving the CVE standard; adding for instance additional
meta-information such as a project identiﬁer or project URL.

ACKNOWLEDGEMENTS

This research was funded by the Austrian Research Promotion
Agency (FFG) Bridge project 880592 “SecDM – Sichere und
vertrauenswürdige on-premise data markets”. The ﬁnancial
support by the Austrian Research Promotion Agency is grate-
fully acknowledged.

REFERENCES

[1] D. E. Mann and S. M. Christey, “Towards a common enumeration of
vulnerabilities,” in 2nd Workshop on Research with Security Vulnerab-
ility Databases, Purdue University, West Lafayette, Indiana, 1999.
[2] J. Katz, “Libraries.io Open Source Repository and Dependency
[Online]. Available: https://doi.org/10.5281/

Metadata,” Jan. 2020.
zenodo.3626071

[3] B. A. Cheikes, B. A. Cheikes, K. A. Kent, and D. Waltermire, Common
platform enumeration: Naming speciﬁcation version 2.3. US Depart-
ment of Commerce, National Institute of Standards and Technology,
2011.

[4] D. Spadini, M. Aniche, and A. Bacchelli, “Pydriller: Python framework
for mining software repositories,” in Proceedings of the 2018 26th
ACM Joint Meeting on European Software Engineering Conference and
Symposium on the Foundations of Software Engineering. ACM, 10
2018, pp. 908–911.

[5] G. Gousios, “The ghtorent dataset and tool suite,” in 2013 10th Working
IEEE, 2013, pp.

Conference on Mining Software Repositories (MSR).
233–236.

[6] N. Edwards and L. Chen, “An historical examination of open source
releases and their vulnerabilities,” in the ACM Conference on Computer
and Communications Security, CCS’12, 2012. ACM, 2012, pp. 183–
194.

