Automatic Security Assessment of GitHub Actions
Workflows
Luca Verderame
luca.verderame@dibris.unige.it
DIBRIS - University of Genoa
Genova, Italy

Giacomo Benedetti
giacomo.benedetti@dibris.unige.it
DIBRIS - University of Genoa
Genova, Italy

Alessio Merlo
alessio@dibris.unige.it
DIBRIS - University of Genoa
Genova, Italy

2
2
0
2

g
u
A
7

]

R
C
.
s
c
[

1
v
7
3
8
3
0
.
8
0
2
2
:
v
i
X
r
a

Abstract
The demand for quick and reliable DevOps operations pushed
distributors of repository platforms to implement workflows.
Workflows allow automating code management operations
directly on the repository hosting the software.

However, this feature also introduces security issues that
directly affect the repository, its content, and all the soft-
ware supply chains in which the hosted code is involved in.
Hence, an attack exploiting vulnerable workflows can affect
disruptively large software ecosystems.

To empirically assess the importance of this problem, in
this paper, we focus on the de-facto main distributor (i.e.,
GitHub), and we developed a security assessment methodol-
ogy for GitHub Actions workflows, which are widely adopted
in software supply chains. We implemented the methodology
in a tool (GHAST) and applied it on 50 open-source projects.
The experimental results are worrisome as they allowed
identifying a total of 24,905 security issues (all reported to
the corresponding stakeholders), thereby indicating that the
problem is open and demands further research and investi-
gation.

CCS Concepts: • Software and its engineering → Soft-
ware libraries and repositories; • Security and privacy
→ Software security engineering.

Keywords: Software Supply Chain, Software Supply Chain
Security, GitHub Actions, Workflow security.

1 Introduction
Code repositories (also known as CRs) are a crucial part of
every software development process. They are used to store,
share, distribute, and version software and its dependencies.
Indeed, code repositories are widely used in Software Supply
Chains (SSCs) as they enable the storage of the core software
as well as its distribution. In detail, the software’s coding
and building phase integrates several pieces of code (e.g.,
modules and third-party libraries) hosted in separate CRs.
To this aim, the corresponding SSC will include a set of CRs
contributing to the final software.

Also, in the last years, the push for automation procedures
of Continuous Integration/Continuous Delivery (CI/CD) led
the distributors of the most common platforms (e.g., GitHub,
GitLab, Bitbucket) to introduce engines for the execution
of workflows. A workflow is a sequence of actions aiming

to automatize software’s building, testing, and verification.
In practice, they allow automatizing CI/CD processes di-
rectly into the repository without relying to external ser-
vices. Workflows can be configured to run when manually
triggered, at a scheduled time, or when a particular event on
the repository occurs.

GitHub publicly released GitHub Actions (GHA) in 2019,
and thanks to the provider’s popularity, this service started
to be widely used by developers. In a nutshell, GHA consists
of an API and a dedicated engine that allow users to define
and execute workflows on their repositories. GHA engines
support the execution of workflows on GitHub dedicated
machines or self-hosted ones.

The ability of workflows to manage and modify the con-
tent of CRs makes them an appealing target for attackers. For
instance, several technical reports [19, 23] provided exam-
ples of attacks targeting GHA workflows to obtain control
of GHA engines or inject malicious code into a repository.
Through the SSC, the compromised CR is able to affect the
other nodes that rely on it, e.g., the final software importing
the compromised code in its codebase.

To cope with the security implications of workflows and
GHA, in this paper, we provide the following contributions.
First, we analyzed the GitHub security guidelines for the
hardening of workflows, and we extracted a set of security
constraints regarding confidential information, third-party
workflows, permissions, and context variables. Then, we
proposed a methodology to evaluate the security posture of
GHA workflows, and we presented a prototype evaluation,
called GitHub Action Security Tester (GHAST), based on the
Sunset SSC security framework [1]. Finally, we conducted an
in-the-wild experimental campaign on 50 GitHub - publicly
available - repositories. The results allowed us to provide
an overview of the security status of repositories. From this
evaluation, we analyzed the workflows of 646 unique reposi-
tories involved in the SSCs of all the 50 projects and identified
20 previously unknown security vulnerabilities and 24,904
security misconfigurations.

In the rest of the paper, we first provide the necessary
background (Section 2) to understand the proposed contribu-
tion. Then, we present our security assessment methodology
to evaluate security posture of workflows (Section 3). More-
over, we provide an implementation of the methodology
(GHAST), and the techniques applied to rebuild the SSC and
extract the required data in Section 4. Section 5 is dedicated

 
 
 
 
 
 
to the analysis of results obtained applying GHAST in the
wild against 50 open source projects. Section 6 discuss some
related work. Finally, Section 7 draws some conclusions and
discusses some future extensions of this work.

2 GitHub Actions: Background & Security

Issues

This section provides a brief description of the concepts
discussed in our work. In particular, we focus on GitHub
Actions (GHA) and their core elements. Then we discuss
vulnerabilities affecting workflows, specifically GHA work-
flows, and how an attacker can exploit them to compromise
code repositories in the SSC.

2.1 GitHub Actions
GHA was introduced in 2019 with the aim to automate, cus-
tomize, and execute software development workflows in
code repositories. GHA attracted developers to ease automa-
tion routines in their projects independently of their size.
At the time of writing (July 2022), the first 100 most starred
repositories on GitHub adopted GHA.

GHA is an event-driven API provided by the GitHub plat-
form to automate development workflows [6]. Among the
different concepts introduced by GHA and required for their
use, we give a brief explanation of the essential ones. The
GHA API enables the definition of workflows in one or
more files in YAML format that need to be stored in the
.github/workflows/ directory of the target GitHub repos-
itory.

A workflow is composed of one or more jobs. A job al-
lows developers to define the environment and configuration
where a sequence of tasks (namely, steps) will run. Each work-
flow can be associated with a list of events that trigger its
execution. Examples of events include pull request, push,
and merge. Runners are computing elements that host the
execution of workflows for repositories. A Runner can be
hosted both on GitHub dedicated servers and self-hosted
machines.

At the start of each workflow run, GitHub automatically
creates a unique GITHUB_TOKEN to authenticate the request,
granting each runner privileges to interact with the repos-
itory on behalf of GHA. Administrators of the repository
can set the permissions granted to the token to restrict ac-
cess to specific resources or jobs. The default permissions
can be either permissive or restricted. In the first case, the
GITHUB_TOKEN has full access to the resources of the reposi-
tory, while - in the second case - the capabilities are limited
to read the content of the repository [5].

GHA offer developers artifacts to manage different aspects
of a workflow execution. Contexts are a way to access in-
formation about workflow runs, runner environments, jobs,
and steps. Each context is an object that contains proper-
ties, which can be strings or other objects. Among the list of

Preprint

Benedetti et al.

possible contexts, github [7] and secrets [8] are the most
used ones.

The github context contains the event that triggered the
the workflow run plus some further information. It can be
involved in the workflow execution to provide information
like the actor who triggered the workflow or the body text
of a newly created issue. The secrets context contains the
names and values of secrets that are available to a work-
flow run. Secrets can be used to manage confidential in-
formation, like API keys and passwords. For example, the
GITHUB_TOKEN is automatically included in the secrets con-
text. Finally, GHA offers the possibility to make workflows
reusable [9]. This mechanism enables anyone with access
to the repository and the reusable workflow to call it from
another workflow. Workflow reuse also promotes best prac-
tices by helping developers to use workflows that are well
designed, have already been tested, and have been proved to
be effective. Also, reusable workflows enable the definition
of organization-wide libraries of workflows that can be used
to speed up the creation of CI/CD pipelines.

2.2 Security Issues of GHA workflows
The introduction of workflows enabled code repositories
to become an integral part of the CI/CD pipeline. In partic-
ular, GHA workflows can operate on the code repository
by programmatically adding, removing, and modifying its
content. Those capabilities, however, can directly affect the
confidentiality, integrity, and availability of the software and
the associated metadata information.

In detail, an attacker can leverage security weaknesses
and misconfigurations in the definition and execution of a
GHA workflow. As some elements of the workflow can be
manipulated by the actor triggering the action, a malicious
actor can craft specific inputs to cause unexpected execution
flows in the workflow.

For instance, context elements are susceptible to several
security weaknesses and misuse, as stated in the official
documentation [7]. On one hand, the secrets context can
contain sensitive information (e.g., a token or a key) that is
encrypted using the default key and can be safely manip-
ulated inside a workflow environment. On the other hand,
a poorly configured workflow may grant direct access to
a secret, thereby allowing an attacker either to send it to
unintended hosts or explicitly print it to the log output [12].
As for secrets, direct access to variables of the github
context can lead to command injection attacks. In detail, the
github context allows storing information that directly de-
pends on the user’s input (e.g., the body of an event). Those
data can be manipulated and executed inside by a Runner
using the run job. Unfortunately, a poorly-configured work-
flow can allow attackers to inject a crafted input to trigger its
direct execution inside the Runner, thereby compromising
the repository or the execution environment.

Automatic Security Assessment of GitHub Actions Workflows

Figure 1. Example of Github Workflow vulnerable to com-
mand injection attacks.

An example of vulnerable scenario is depicted in Figure 1.
In this scenario, the issue.title element is directly exe-
cuted in the run step. If an attacker can inject in the title of
the issue the string: New malicious issue title” && bash
-i >& /dev/tcp/0.tcp.eu.ngrok.io/14872 0>&1 && echo ”,
she can obtain a reverse shell on the remote machine hosting
the Runner.

In addition to the security weaknesses of workflow ele-
ments, two other features of GHA have direct impact on the
security of workflows, i.e., permissions and reusable work-
flows.

In the first case, permissions can affect the capability of a
successful attack on a repository [11]. To this aim, develop-
ers should enforce the least privilege principle by assigning
the least set of permissions tokens and workflows, and dif-
ferentiate - when possible - the set of permissions granted
to each job.

Finally, reusable workflows allow repository owners to
import both workflows belonging to their organization and
workflows developed by third parties that are publicly avail-
able [13]. In this latter case, the caller workflow does not
control the imported one (the callee). The introduction of un-
monitored workflows increases the attack surface since the
callee may include potential weaknesses and misconfigura-
tions, especially if the imported version is not updated. Also,
attackers can manipulate reusable workflows by exploiting
tag-reuse attacks to trick the caller workflow into importing
a different version of the callee, which has been maliciously
re-tagged. To prevent such issues, the best practice suggests
selecting the workflow version using a commit hash (e.g.,
workflow_name@cdd...08c) [13].

3 Security Assessment Methodology
We propose a novel methodology composed of two phases,
namely Workflow Collection and Workflow Security Evalua-
tion in order to evaluate the security of GHA in a software
supply chain. The Workflow Collection phase is devoted to

Preprint

analyze the SSC and extract a model that includes all the
involved CRs and - for each repository - the set of GHA work-
flows. The Workflow Security Evaluation phase performs a
security analysis of each GHA workflow to assess five se-
curity categories extracted from the analysis of the official
documentation [6] and the security hardening guidelines
[10]. The result of the analysis is a report containing a list
of security issues affecting the workflows used in the SSC,
classified according to their exploitability.

3.1 Workflow Collection
The first part of the methodology takes as input a folder
containing the software under test (hereafter, SUT). The pro-
cedure parses the code and configuration files of the project
to recursively identify software dependencies, code repos-
itories, and distribution networks composing the Software
Supply Chain of the SUT. From such a piece of knowledge,
the methodology builds a direct graph structure where nodes
include any code repository involved in the SSC, while edges
represent the relationships among them.

Then, the procedure focuses on each CR to extract its GHA
workflows (if any). More specifically, the methodology relies
on GitHub API to search and retrieve the YAML files of the
available workflows. The set of workflows is then linked to
the corresponding CR node in the graph.

3.2 Workflow Security Evaluation
The Workflow Security Evaluation phase scans the set of
GHA workflows to detect security vulnerabilities and mis-
configurations that can affect code repositories in the SSC.
The detection logic of this phase is based on the evaluation
of a set of security categories that are mapped in constraints
- i.e., security requirements that workflows must comply
with - and security checks - i.e., technical controls to assess
the enforcement of constraints. The list of categories, con-
straints, and checks applicable to GHA workflows derives
from a manual review of the GitHub guidelines for workflow
hardening [10] and from the official GHA documentation
[6]. Table 1 reports the results of our analysis.

In particular, we identified four categories from the analy-
sis of GH guidelines, concerning the security of GHA work-
flows, namely Confidential Data Disclosure, Command Injec-
tion, Third-party Workflows, and Workflow Permissions. Also,
we extended those categories with Triggering Events as they
represent the entry point for workflows.

The evaluation phase parses each GHA workflow to i)
execute the security checks detailed in Table 1 to detect se-
curity vulnerabilities and misconfigurations, and ii) evaluate
the exploitability of the findings by identifying the events
and preconditions that allow triggering the corresponding
security issue.

The result of the evaluation is a set of tuples containing the
detected security issue, some information related to the issue
(i.e., the name of the job and the affected step, the position

Security Categories
Confidential Data Disclosure

Command Injection
Third-Party Workflows

Workflow Permissions
Triggering Events

Security Constraints
- Registering generated values as secrets.
- Registering modified values as secrets.
- Do not directly use github context in scripts.
- Audit the use of branch name, emails, and external inputs.
- Audit information passed to TP actions.
- Keep third-party workflows up-to-date.
- Specify permissions to avoid uncontrolled access.
- Audit the kind of events that trigger the workflow.
- Audit the filters applied to triggering events.

Security Checks
(SC-1) Check the use of the secrets context outside environment.
(SC-2) Check the use of secrets context for generating new data.
(SC-3) Check the use of github subcontexts inside run steps.
(SC-4) Verify the version of reusable workflows.
(SC-5) Verify the use of the pinning Commit Tag.

(SC-6) Check if the workflows enforces the least privilege principle.
(SC-7) Verify which is the exploitability score of the event.

Table 1. List of security categories, requirements, and checks of the Workflow Security Evaluation phase.

Benedetti et al.

Misconfiguration. A configuration error that makes
the environment, the CR, or the SSC vulnerable. For
example, the improper configuration of tag variable
inside a workflow may lead to the import of an out-
dated third-party workflow.

In detail, the security issues belonging to the Confidential
Data Disclosure and the Command Injection categories can
be identified using pattern verification techniques.

Secrets can be used in workflows through the secrets
context [8]. A particular secret is accessed declaring the
context and then its name. Secrets are expected to be accessed
inside of an environment. Indeed, when they are accessed
from outside, secrets can be exfiltrated by an attacker (e.g.,
printed in a log or sent to a remote host) that has access to
the workflow. Then, the security checks for Secrets consist
of assessing if secrets are used in the environment part of
the workflows (SC-1) and, if it is not the case, if they are
manipulated in order to generate confidential data (SC-2).
Indeed, SC-2 allows assessing when a secret is involved in a
computation and then exposed to potential exfiltration.

Similarly, the methodology can verify the presence of
command injection attacks in workflows by evaluating the
usage of github context [7] in run steps. In detail, the syn-
tax github.* is used to access variables contained in the
GitHub Context. This context contains many subcontexts
linked to different aspects of the workflows. For example,
the github.event context contains all the information of
the triggering event. Some parts of the github context can
be manipulated externally by an actor. Hence, an attacker
can inject a command into a vulnerable instruction through
this context. For example, in the scenario of Figure 1 the
attacker is able to exploit the run step through the issue title
contained in github.event.issue.title. For this reason,
the methodology evaluates the use of github subcontexts
that can be exploited by an attacker to affect the workflow
run (SC-3).

The command injection issues is further distinguished
between conditional and unconditional. The first case con-
sists of command injection attacks in a branch of a condi-
tional statement, thereby requiring the attacker to trigger
the appropriate branch to exploit the vulnerability. In the un-
conditional case, the vulnerable statement will be executed
directly.

Figure 2. Example of a COMMAND_INJECTION security
issue detected in the workflow of Figure 1.

of the issue, and the print of the affected line), the event
triggering the issue (i.e., the entry point), and an evaluation
on its exploitability. If an issue belongs to a job triggered
by multiple events, the evaluation will contain a separate
tuple for each event to enable the filtering of specific results.
Listing 1 provides the structure of a tuple, while Figure 2
shows an example of a tuple for the scenario depicted in
Figure 1.

1

2

3

4

5

6

7

{ security_issue_type ,
triggering_event ,
job_name ,
step_name ,
step_position ,
issue_line ,
exploitability_score }

Listing 1. Structure of a security issue identified by the
Workflow Security Evaluation phase.

The rest of this section will detail the evaluation of the
exploitability of events and the type of security issues sup-
ported by the methodology.

3.2.1 Execution of Security Checks. The execution of
the security checks listed in Table 1 enables the identification
of a set of security issues targeting the workflow under test.
The methodology labels an identified security issue into two
different groups, i.e.:

Vulnerability. A flaw in the workflow that is directly
exploitable. For example, a misuse of the github.-
context API enables attackers to execute command
injection attacks.

Preprint

Automatic Security Assessment of GitHub Actions Workflows

To evaluate the security checks belonging to the Third-
party Workflows category, the methodology relies on the
GitHub API to obtain the latest version of the specific TP
workflow, and compare it with the version requested by the
workflow under test. If the used TP workflow is out-of-date
(SC-4) or the workflow under test does not pin a specific com-
mit hash (i.e., using the <wf_name>@<commit_hash> syntax)
(SC-5), the methodology marks the issue as a security mis-
configuration.

Finally, the methodology evaluates the workflow under
test to check if the permissions declared in the workflow
follow the principle of least privilege. Following the least
privilege principle, the methodology checks if the required
permission matches the capabilities required by the workflow
(SC-6).

3.2.2 Exploitability Score. The only way for an attacker
to execute a workflow and, thus, exploit a security issue is
by triggering one or more events defined in the workflow.
To this aim, the methodology evaluates the potential entry
points by assessing the configuration of workflow events and
the type of conditions that enables their activation (SC-7).
Events are influenced by filters [14] that can be applied
to specialize the triggering actions. For example, an Issues
event can have up to 16 activity types (e.g., opened, deleted,
labeled, . . . ). To this aim, the use of filters directly affects the
exploitability of a workflow.

The methodology classifies events using three security
levels based on the complexity an attacker has to face to
stimulate a particular event. We consider the complexity
as the number and type of preparatory activities to get the
required assets (e.g., privileges, knowledge) to trigger an
event.

Restricted (1) The attacker needs to achieve a multi-
stage attack to be able to trigger the specific workflow
event. The attacker can succeed only with the help,
whether intentionally or not, of one of the owners
of the repositories. For example, an attacker cannot
trigger a push event unless a repository owner grants
him the maintainer status.

Supervised (2) The attacker must match particular con-
ditions in order to trigger the event. For example, a
pull request can be triggered, but the maintainer has
to accept it and consequently start the workflow.

Unsupervised (3) The attacker does not need any granted
permission by the repository owners. He can trigger
the workflow at any time by means of external action.
For example, an issue opening event can be triggered
by any GitHub user with access to the repository.

4 Prototype Implementation
We implemented the proposed methodology in a command-
line tool - the GitHub Actions Security Tester (GHAST) -

Preprint

composed of three modules, as depicted in Figure 3. The
source code of GHAST is publicly available1.

The first module (SSC Builder) extracts the model of the
SSC starting from a folder containing the source code of
SUT. The second one (WF Extractor) extracts the list of code
repositories from the SSC model. It extracts the set of GHA
workflows from these collected repositories. The last module
(WF SecAnalyzer) executes the workflow security evaluation
described in Section 3.2 to produce the final security report.
For the SSC builder, we rely on a state-of-the-art research
tool for the rebuilding and modeling of software supply
chains [1]. In detail, the module requires as input the folder
containing the SUT and recursively identifies the SSC assets,
including code repositories. The output model is a direct
graph structure stored in a Neo4J Graph database [17].

The WF Extractor queries the SSC model to extract the set
of repositories that uses GHA workflows. Then, the module
scans each repository using the GitHub API and downloads
all the workflow YAML files contained in the corresponding
.github/workflows folder. The result of this operation is
the collection of workflows used in the SSC.

Finally, the WF SecAnalyzer evaluates each workflow by
applying the security checks listed in Table 1. To do so, the
module parses each YAML file to extract the following GHA
elements:

• triggering-events, for the computation of the exploitabil-
ity score (SC-7). These elements contain also event
filters that are included in the score computation.
• Runs, for the evaluation of command injection and
confidential data disclosure issues (SC-1, SC-2, SC-3).
• TP-workflows, for the evaluation of commit pinning

and the workflow versions (SC-4, SC-5).

• Permissions, for the evaluation of permissions both at

workflow level and at job level (SC-6).

1 "< work_test >" :
2 {
3

" events ": [" issues ", 3] ,
" issues ": [

4

5

6

7

8

9

[" MISCONF_PERM_GLOBAL ", "< job_A >" , ... ],
[" OUTDATED_WF ", "< job_A >" , ... ] ,
[" CI_ACTOR ","< job_B >" , ... ],
[" OUTDATED_WF ", "< job_A >" , ... ] ,
[" OUTDATED_WF ", "< job_B >" , ... ]

]

10
11 }

Listing 2. Extract of a sample security report produced by
GHAST.

The output of the evaluation is a security report in JSON
format that contains - for each repository (and workflow)
of the SSC - the set of security issues identified by the tool.
Listing 2 shows an extract of an output file. In the example,

1https://github.com/Mobile-IoT-Security-Lab/GHAST

Benedetti et al.

Figure 3. The GHAST architecture.

the tool identified five issues in the workflow work_test,
associated with the event issues, i.e., a command injection
exploiting the actor username, a misconfiguration of the
permissions, and three outdated third-party workflows. The
exploitability score of the event triggering those finding is 3,
i.e., unsupervised.

5 Experimental Evaluation
We conducted an experimental campaign to test the ap-
plicability and efficacy of GHAST in the wild on software
repositories available on GitHub. In detail, we ran the tool
against 50 public repositories randomly taken from the top
100 repositories on GitHub in July 2022. The repositories
contain Python-based projects that are actively maintained
and used by the community (e.g., the dataset has an average
number of stargazers per repository above 20k). Table 2 de-
tails the dataset’s characteristics regarding the number of
stargazers, forks, contributors, open issues, and commits.

MIN MAX
191,386
4,365
36,334
307
3
30
1,707
1
52,887
40
Table 2. Number of stargazers, forks, contributions, issues
and commits (min, max, and avg values) of the dataset.

Stargazers
Forks
Contributors
Issues
Commits

AVG
22,227
4,708
25
232
4,729

The tool extracts the SSC for each repository, identifies
the CRs compatible with GHA workflows, and processes the
security report. The experiments were hosted on a virtual
machine running Ubuntu 20.04 with 8 processors and 32GB
RAM.

5.1 Experimental Results
GHAST was able to reconstruct the SSC of the 50 projects
obtaining 646 unique CRs in approximately 14 hours. Then,
the tool extracted 131,168 GHA workflows and executed the
security checks.

The analysis allowed for the identification of 24,905 secu-
rity issues, i.e., 20 security vulnerabilities and 24,885 miscon-
figurations. All the findings have been directly reported to
the maintainers of the repositories.

Preprint

Security Vulnerabilities. Figure 4a reports the distribu-
tion of security vulnerabilities identified using SC-1, SC-2,
and SC-3 according to their exploitability score.

The security checks on Secrets SC-1 and SC-2 reported
10 jobs that are not using the secrets context inside an
environment. Such behavior enables jobs to expose those
secrets, e.g., by printing in a log output or sending them
to an external host. Also, it is worth noticing that most of
these vulnerabilities (i.e., 7 out of 10) can be triggered using
unsupervised events.

GHAST also reported 9 workflows vulnerable to com-
mand injection attacks (SC-3), of which two do not need any
granted permission by the repository owner to be exploited
(score equals to 3). Also, 3 out of 9 are unconditional com-
mand injections, i.e., that the affected step is not included
in any conditional branch, thereby easing the exploitation
process.

Misconfigurations. For SC-4 and SC-5, we considered
both checks passed when the workflow uses the commit hash
of the latest version available of the third-party workflow.
In particular, we found that this condition has never been
verified on our sample set, meaning that even if a workflow
uses the latest tag, it is still vulnerable to tag-reuse attacks.
The experimental campaign allowed the identification of
5,384 steps that do not use the latest version of a third-party
workflow. Also, the evaluation of SC-5 resulted in 6,388 steps
that do not pin a specific version of a third-party workflow.
Finally, SC-6 reported several misconfigurations in the
definition of workflow permissions. In detail, Figure 5 shows
that 38% of workflows declared the permissions granted for
their execution at the workflow level instead of for each job
(as suggested by the security guidelines [10]). Furthermore,
62% of workflows do not declare any specific permission,
thereby allowing the execution of the workflow with the
default permissions assigned to the GITHUB_TOKEN.

5.2 Manual Validation of the Vulnerabilites
We manually revised the 20 identified vulnerabilities in or-
der to verify the presence of false positives. To conduct this
analysis, we downloaded the affected repositories locally
and instantiated a local GHA Runner for the correspond-
ing workflows to reproduce the exact conditions to test the

Project  DirectoryWF ExtractorSSC BuilderWF SecAnalyzerSSC ModelSSC WorkﬂowsSecurity ReportGHASTAutomatic Security Assessment of GitHub Actions Workflows

(a) Vulnerability Issues identified.

(b) Misconfiguration Issues identified.

Figure 4. Issues for different exploitability scores.

5 jobs :
6

<anon - job - name >:

7

8

9

10

11

12

13

14

15

16

17

18

19

20

name : -------------
runs - on : ubuntu - latest
steps :
- name : <anon - step - name >

uses : actions / checkout@v 2
with :

ref : ${{ github . event . pull_request .

head . sha }}
fetch - depth : 0

...
- name : <anon - step - name >

run : |

cat << " EOF " | egrep - qsi '^ disable -

check : .*\ < commit - count \>'

${{ github . event . pull_request . body }}
EOF

Listing 3. Excerpt (anonymized) of a workflow vulnerable
to a command injection attack.

6 Related Work
To the best of our knowledge, the research work targeting
the evaluation of GHA in the context of the software supply
chain is limited. On the one hand, several organizations
like ENISA [4], NIST [3], and OWASP [20] discussed the
security issues in the Supply Chain, giving a focus on SSCs
and the impact of using insecure third-party software in
the development pipeline. Also, several technical reports
investigated attacks targeting SSCs of popular software like
Solarwind [16] and Log4J [21].

On the other hand, the scientific community mainly in-
vestigated the problem of ensuring the integrity of the final
software in SSCs that include different actors (e.g., code
repository platforms, software library binaries, distribution

Figure 5. Distribution of Misconfigured Permissions (SC-6).

exploitability of the attack. The result of manual analysis con-
firmed that all the vulnerabilities identified by GHAST are
true positives.

Listing 3 shows an anonymized GHA workflow containing
a command injection issue triggered by a pull request event
reported by GHAST. The workflow belongs to a repository
with more than 10,000 stars, 500 forks, and 3,000 commits.
Here, the attacker is able to inject a malicious command
in the github.event.pull_request.body context. For ex-
ample, it is possible to replicate the example in Figure 1
discussed in Section 2.2 to obtain a reverse shell inside the
Runner executing the workflow. In a real attack scenario,
an attacker can craft a malicious pull request and hide the
exploit in the message passed to in the body of the pull re-
quest; at this point, if a maintainer accepts the pull request,
she will trigger the workflow and, thus, the vulnerability.

1 name : Pull Request Validation
2 on :
3

pull_request :

4

types : [ opened , synchronize , reopened ,

edited ]

Preprint

# of Security Issues012345SC-1SC-2SC-3123Exploitability ScoreSecurity Checks# of Security Issues01500300045006000SC-4SC-5SC-6123Exploitability ScoreSecurity ChecksPermissions declared only at workﬂow level.Permissions not declared in the workﬂow. 62% (10826) 38% (6584)the SSC, ii) extend GHAST with automatic security assess-
ment of third-party workflow code.

Benedetti et al.

networks). Several works [18, 15] propose the use of repro-
ducible builds to create an independently-verifiable path
from source to binary code. To cope with the integrity prob-
lem in the last part of the development process, Vu et al.
in [26] show how the software can be compromised between
the production of source code and the building process and
how it is possible to mitigate this security problem. Consid-
ering the entire CI/CD pipeline, the in-toto framework [25]
proposes holistic integrity enforcement of a software supply
chain. It gathers cryptographically verifiable information
about the chain to accomplish its objectives.

To the best of our knowledge, only two open source projects
explicitly targetting the evaluation of code repositories: Git-
Gat [22] and GitHub Workflow Auditor [24]. The first one is
a project released in June 2022 that takes advantage of the
Open Policy Agent (OPA) [2] to evaluate security policies
for GitHub’s organization, repositories, and user accounts.
GitHub Workflow Auditor is a command line tool released by
Tinder in July 2022 for the security assessment of workflows.
The tool is able to scan a specific organization, user, or repos-
itory to detect potential security issues in the use of secrets
and external inputs. Unlike GHAST, GitHub Workflow Audi-
tor can neither reconstruct the SSC of a project nor extract
all the workflows associated with different CRs to detect
security issues. Also, the tool does not provide any security
evaluation of Third-party Workflows, Workflow Permissions,
and Triggering Events.

Finally, it is worth noticing that both tools were released
in Q2 2022, thereby suggesting a growing interest in the
topic.

7 Conclusion
We investigated the security issues affecting GHA workflows
to understand their security impact on the software supply
chain. We produced an analysis of GHA aspects impacting
the security of repositories. Then, we leveraged our analysis
into a methodology for automatically assessing the presence
of security issues in workflows.

We implemented the methodology in GHAST (GitHub
Actions Security Tester). GHAST runs on a project source
code, taking advantage of the Sunset SSC security framework
to retrieve the SSC. Then, it extracts and analyzes the GitHub
Actions workflows applying the security checks designed in
the methodology.

Using GHAST against 50 open source projects produced
relevant experimental results regarding security issues. We
analyzed the results, providing an overview of the current
security landscape of GHA workflows. We identified and
manually revisioned the security vulnerabilities discovered
though GHAST.

For future work, we plan to deepen the analysis of third-
party workflow to i) better understand their involvement in

Preprint

al-threats/github-action-runners-analyzing-the-environment-an
d-security-in-action.

[22]

[21]

[24]

[23]

[20] OWASP. 2020. OWASP Software Component Verification Standard.
Retrieved July 22, 2022 from https://owasp.org/www-project-softw
are-component-verification-standard/.
Radware. 2021. Log4shell: critical log4j vulnerability. Retrieved July 22,
2022 from https://www.radware.com/security/threat-advisories-an
d-attack-reports/log4shell-critical-log4j-vulnerability/.
Scribe. 2022. Gitgat. Retrieved July 22, 2022 from https://github.com
/scribe-public/gitgat.
Thomas Segura. 2022. Github actions security best practices. Re-
trieved July 22, 2022 from https://blog.gitguardian.com/github-acti
ons-security-cheat-sheet/.
Tinder. 2022. Gh-workflow-auditor. Retrieved July 22, 2022 from
https://github.com/TinderSec/gh-workflow-auditor.
Santiago Torres-Arias, Hammad Afzali, Trishank Karthik Kuppusamy,
Reza Curtmola, and Justin Cappos. 2019. In-toto: providing farm-to-
table guarantees for bits and bytes. In 28th USENIX Security Sympo-
sium (USENIX Security 19). USENIX Association, Santa Clara, CA,
(Aug. 2019), 1393–1410. isbn: 978-1-939133-06-9. https://www.useni
x.org/conference/usenixsecurity19/presentation/torres-arias.
[26] Duc-Ly Vu, Fabio Massacci, Ivan Pashchenko, Henrik Plate, and
Antonino Sabetta. 2021. Lastpymile: identifying the discrepancy be-
tween sources and packages. In Proceedings of the 29th ACM Joint
Meeting on European Software Engineering Conference and Sympo-
sium on the Foundations of Software Engineering (ESEC/FSE 2021).
Association for Computing Machinery, Athens, Greece, 780–792.
isbn: 9781450385626. doi: 10.1145/3468264.3468592.

[25]

Automatic Security Assessment of GitHub Actions Workflows

References
[1] Giacomo Benedetti, Luca Verderame, and Alessio Merlo. 2022. Alice
in (Software Supply) Chains: Risk Identification and Evaluation. In
International Conference on the Quality of Information and Commu-
nications Technology.

[2] Open Policy Agent contributors. 2022. Open policy agent. Retrieved

July 22, 2022 from https://www.openpolicyagent.org.

[3] Cybersecurity and Infrastructure Security Agency. 2021. Defending
Against Software Supply Chain Attacks. Retrieved July 22, 2022 from
https://www.cisa.gov/sites/default/files/publications/defending_a
gainst_software_supply_chain_attacks_508_1.pdf.
European Union Agency for Cybersecurity. 2021. ENISA threat land-
scape for supply chain attacks. Publications Office. Retrieved July 22,
2022 from https://data.europa.eu/doi/10.2824/168593.

[4]

[5] GitHub. 2022. Automatic token authentication. Retrieved July 22,
2022 from https://docs.github.com/en/actions/security-guides/auto
matic-token-authentication.

[6] GitHub. 2022. Github actions. Retrieved July 22, 2022 from https://d

ocs.github.com/en/actions.

[7] GitHub. 2022. Github contexts - github. Retrieved July 22, 2022 from
https://docs.github.com/en/actions/learn-github-actions/contexts
#github-context.

[8] GitHub. 2022. Github contexts - secrets. Retrieved July 22, 2022 from
https://docs.github.com/en/actions/learn-github-actions/contexts
#secrets-context.

[9] GitHub. 2022. Reusing workflows. Retrieved July 22, 2022 from http
s://docs.github.com/en/actions/using-workflows/reusing-workflo
ws.

[10] GitHub. 2022. Security hardening for github actions. Retrieved July 22,
2022 from https://docs.github.com/en/actions/security-guides/secu
rity-hardening-for-github-actions.

[11] GitHub. 2022. Security hardening for github actions: restricting per-
missions for tokens. Retrieved July 22, 2022 from https://docs.githu
b.com/en/actions/security-guides/security-hardening-for-github-
actions#restricting-permissions-for-tokens.

[12] GitHub. 2022. Security hardening for github actions: using secrets.
Retrieved July 22, 2022 from https://docs.github.com/en/actions/sec
urity-guides/security-hardening-for-github-actions#using-secrets
.

[13] GitHub. 2022. Security hardening for github actions: using third-
party actions. Retrieved July 22, 2022 from https://docs.github.com
/en/actions/security-guides/security-hardening-for-github-action
s#using-third-party-actions.

[15]

[14] GitHub. 2022. Using filters. Retrieved July 22, 2022 from https://doc
s.github.com/en/actions/using-workflows/workflow-syntax-for-g
ithub-actions#using-filters.
Pronnoy Goswami, Saksham Gupta, Zhiyuan Li, Na Meng, and
Daphne Yao. 2020. Investigating the reproducibility of npm packages.
In 2020 IEEE International Conference on Software Maintenance and
Evolution (ICSME), 677–681. doi: 10.1109/ICSME46990.2020.00071.
Trey Herr, Will Loomis, Emma Schroeder, Stewart Scott, Simon
Handler, Tianjiu Zuo, and Atlantic Council of the United States.
2021. Broken trust: lessons from Sunburst. Retrieved July 22, 2022
from https://www.atlanticcouncil.org/in-depth-research-reports/re
port/broken-trust-lessons-from-sunburst/.

[16]

[17] Neo4j Inc. 2022. Neo4j graph database. Retrieved July 22, 2022 from

https://neo4j.com/product/neo4j-graph-database/.

[18] Chris Lamb and Stefano Zacchiroli. 2022. Reproducible builds: in-
creasing the integrity of software supply chains. IEEE Software, 39,
2, 62–70. doi: 10.1109/MS.2021.3073045.

[19] Magno Logan. 2022. Github action runners: analyzing the environ-
ment and security in action. Retrieved July 22, 2022 from https://w
ww.trendmicro.com/vinfo/us/security/news/cybercrime-and-digit

Preprint

