1

Recursive Restoration Reﬁnement:
A Fast Heuristic for Near-Optimal Restoration
Prioritization in Power Systems
Noah Rhodes∗†,Carleton Coffrin†, and Line Roald∗ ∗ University of Wisconsin-Madison, Madison, Wisconsin,
USA † Los Alamos National Laboratory, Los Alamos, New Mexico, USA

2
2
0
2

r
p
A
5

]

Y
S
.
s
s
e
e
[

1
v
4
0
5
2
0
.
4
0
2
2
:
v
i
X
r
a

Abstract—The prioritization of restoration actions after large
power system outages plays a key role in how quickly power can
be restored. It has been shown that fast and intuitive heuristics
for restoration prioritization most often result in low-quality
restoration plans. Meanwhile, mathematical optimization tools
that ﬁnd high-quality restoration plans are too slow to be applied
to restoration planning problems of practical interest. This work
makes a signiﬁcant step in closing this quality vs compute time
gap by proposing the Recursive Restoration Reﬁnement heuristic
for power system restoration. This heuristic is shown to produce
near-optimal restoration plans up to 1,000 times faster than other
state-of-the-art solution methods on a range of test cases with up
to 500 buses and 700 damaged components. The potential impact
of this new heuristic is demonstrated by a preliminary analysis of
the key features of high-quality restoration plans. The recursive
restoration reﬁnement algorithm and other methods explored in
this work have been made available as part of the open-source
software package, PowerModelsRestoration, to support ongoing
research in power restoration algorithms.

Index Terms—Power system restoration algorithms, compo-

nent restoration prioritization, mixed-integer optimization

I. INTRODUCTION

The electric grid is susceptible to outside threats ranging
from natural disasters such as hurricanes and wildﬁres to
targeted attacks. Quickly restoring the transmission network
after a large system-wide failure is important as we increas-
ingly rely on electricity in all aspects of life. To achieve this
restoration as quickly as possible, utilities need restoration
planning tools that can assist in the design and execute high-
quality restoration plans [1].

Restoration planning is a broad topic that considers a
wide range of operating situations and time scales. As a
result, there are a variety of speciﬁc task and operational
problems that are studied as part of it [2]. These tasks and
problems include topics like managing black-start capable
generators [3] [4], cold-load pick up [5], transient stability
[6], dispatching restoration crews [7] [8], coordination of
parallel restoration activities [9] [10], and considering varying
duration of restoration actions [11] [12]. Other work considers
the potential for creating microgrids to serve critical load
[13] or using restoration planning to inform grid hardening
[14]. Many of these problems must be addressed for a utility
to make restoration decisions, and developed into decision

This work was supported by funding from the U.S. Department of Energy’s
(DOE) Ofﬁce of Electricity as part of the CleanStart-DERMS project of
the Grid Modernization Laboratory Consortium and by the DOE Ofﬁce of
Science, Ofﬁce of Advanced Scientiﬁc Computing Research under Contract
DE-AC02-06CH11357. LA-UR-21-29872

support tools [15] [16]. These problems can be addressed
in stages, as restoration milestones are achieved [17]. Power
system restoration can include physical repair of components,
e.g., following a hurricane, and/or efforts to reenergize and
reconnect the system after a large disruption, e.g., a system-
wide blackout. Here, we focus on the former type of problem
where the grid has sustained physical damage. Speciﬁcally, we
focus on the Component Repair Priority (CRP) problem, which
is the task of determining where to focus repair efforts over
time to maximize the amount of power that can be delivered.
Prioritizing components for repair is important, as there are
typically only limited resources (i.e., crews and equipment)
available to perform the repairs and we therefore need to
decide on which components to repair ﬁrst. This CRP problem
is of particular interest as it occurs in a variety of restoration
planning activities and also presents a daunting computational
challenge.

In previous related work [18], we presented a software
implementation of the Restoration Ordering Problem (ROP),
an optimization problem to solve the CRP problem, which
allows for testing of solution times and solution quality with
AC, SOC, and DC power ﬂow formulations. This work also
discussed a preprocessing heuristic from [19] to reduce the
number of components considered for restoration prioritiza-
tion. However, we observed that the ROP problem was very
challenging to solve even with DC power ﬂow and a moderate
number of damaged items. Therefore, this paper focuses on
scalable heuristic algorithms that obtain near-optimal solutions
to large-scale CRP in a short amount of time. We consider only
line damage and use a DC power ﬂow model [20], as even this
simpliﬁed version of CRP presents a signiﬁcant computational
challenge.

The core contribution of this work is a new heuristic
algorithm for solving the CRP problem called Recursive
Restoration Reﬁnement (RRR). In particular, it is shown that
the RRR method can produce near-optimal solutions for the
CRP tasks up to 1,000 times faster than the current state-
of-the-art. This result is achieved by careful comparisons of
RRR to established methods,
including prioritizing repairs
based on component utilization [21], obtaining the optimal
solution by solving the Restoration Ordering Problem (ROP)
[19], and using a state-of-the-art meta-heuristic Randomized
Adaptive Decomposition
(RAD) [21]. These methods are
compared on 6 grids ranging from 24 to 500 buses, each
with 10 damage scenarios, and solved with a 5-minute and

 
 
 
 
 
 
10-hour time limit. Overall, the RRR algorithm signiﬁcantly
improves the scalability and quality of solutions for the CRP
problems. This provides a new avenue for designing and
understanding complex restoration plans, as illustrated by a
preliminary analysis of high-quality restoration plans of a 240
bus system with more than 200 damaged components.

The paper reviews the CRP problem and previous ap-
proaches to solving it in Section II. We then introduce the pro-
posed RRR algorithm in Section III, and some post-processing
details in Section IV. Section V presents numerical evaluations
of the algorithm, and Section VI concludes.

II. THE COMPONENT REPAIR PRIORITY PROBLEM

This section ﬁrst introduces the CRP problem, before re-
viewing three existing approaches for solving it, the Utilization
Heuristic, the Restoration Ordering Problem, and the Random-
ized Adaptive Decomposition algorithm.

A. Line Restoration Plans

The CRPs of interest to this work consist of a power grid N
and a set of physically damaged lines (cid:64)L. The computational
task is to ﬁnd a line restoration sequence of the lines in (cid:64)L that
maximizes the amount of power served over time.

1) Restoration Plan Deﬁnition: Noting that any line in
the network N can be uniquely identiﬁed by a pair of
buses (i, j), a restoration plan R is deﬁned as a vector of
restoration periods, R = [R1, ..., Rk, ..., RN ], where each
period k contains a set of lines that are restored in that
period, e.g., Rk = (cid:104)(i, j), (n, m)(cid:105). For example, a restoration
plan with 5 restored lines and N = 5 could be R =
[(cid:104)(1, 2)(cid:105) , (cid:104)(cid:105) , (cid:104)(1, 4), (2, 3)(cid:105) , (cid:104)(4, 5)(cid:105) , (cid:104)(1, 5)(cid:105)]. Note that this
deﬁnition supports a different number of restored components
in each time step, i.e., energization of zero, one or more
components in each period k, as is necessary or advantageous
to overall power delivery.

2) Power Delivery of Restoration Plan: Given a restoration
sequence R, we can compute the maximum power delivered in
each restoration period by solving a continuous, multi-period
optimal power ﬂow problem that aims at maximizing total
power delivery. This problem is deﬁned Model 1 and we refer
to is as the Restoration Implementation Problem (RIP).

The objective function of RIP (1a) maximizes the total
power delivered. This is deﬁned as the product of xD
dk,
denoting the fraction of load that can be served at node d,
by the total power demand of that node P D
d and the duration
of the time step ∆k, summed over all loads d ∈ D and all
repair periods k ∈ 1, ..., N . P D
is constant and assumed to
d
be the maximal load, but can also be indexed by k if a time-
varying load forecast is available. For each restoration period,
the power balance at each node is enforced by constraint (1b),
where the power from all connected generators P G
ijk,
and loads xdkP D
d must sum to 0 at each bus i ∈ B . The
line ﬂows are expressed by the DC power ﬂow formulation
in (1c) with θik representing the voltage angle at bus i in
restoration period k and bij represent the line susceptance.
Eq. (1d) enforces the power ﬂow limits P L
ij . These constraints
are only included for lines that are energized in restoration

gk, lines P L

Model 1 Restoration Implementation Problem (RIP)

variables: (∀k ∈ 1, ..., N )
gk ∀g ∈ G, P L
P G

ijk ∀(i, j) ∈ Lk, xD

dk ∀d ∈ D, θik∀i ∈ B

maximize:

(cid:88)

(cid:88)

dkP D
xD

d ∆k

k∈1,...,N

d∈D

2

(1a)

subject to (∀k ∈ 1, ..., N ):
(cid:88)
(cid:88)
(cid:88)

P G

gk +

P L

k −

d∈Di

(i,j)∈Lik

g∈Gi
P L
ijk = −bij(θik − θjk)
− P L
0 ≤ P G

ij ≤ P L
gk ≤ P G
g

ijk ≤ P L
ij

dkP D
xD

d = 0 ∀i ∈ B

(1b)

∀(i, j) ∈ Lk (1c)

∀(i, j) ∈ Lk (1d)

∀g ∈ G

(1e)

period k. The set of energized lines denoted by Lk comprises
both non-damaged lines and the lines restored in the previous
periods R1, . . . , Rk. Finally, constraint (1e) enforces the upper
and lower bounds P G
gk for
all generators g ∈ G. The lower bound on generation is 0 to
ensure there is a feasible generator dispatch for any amount
of load in any period of the restoration [22]. We leave the
modeling of non-zero generator lower bounds and generator
commitment to future work.

g and 0 on the generator power P G

We assume the physical repairs require time to be conducted
and the restorations occur on the order of hours, so we neglect
stability concerns and consider a series of static power ﬂow
problems. We also neglect
temporal constraints related to
generator ramping and standing phase angle constraints. It
has been shown that standing phase angle constraints can be
incorporated with a relatively small impact on the amount of
power served during the restoration process, less than 1.5%
[23]. We next review three approaches to solve the CRP
problem and identify good restoration plans R.

B. Utilization Heuristic

We ﬁrst introduce the Utilization (UTIL) heuristic, a greedy
heuristic that reﬂects the established industry practice of
restoring the largest lines ﬁrst [21]. Algorithm 1 provides an
implementation of the UTIL heuristic that takes a power grid
N and a set of damaged lines (cid:64)L as an input and returns a
restoration plan R where all damaged lines are restored one-
by-one in order of decreasing power capacity P L
ij .

UTIL represents an intuitive approach to the CRP, as one
expects that large capacity lines, which make up the backbone
of the power grid, should be restored ﬁrst to quickly increase
the maximal capacity of the grid. However, as previous work
[21] and the results in Section V highlight, UTIL tends to
produce restoration plans that are far from optimal in terms
of power delivery. These observations indicate that accounting
for the network connectivity and the power ﬂow of the system
is critical to ensure that the power line capacity is effectively
utilized during the restoration process.

Algorithm 1 Utilization Heuristic (UTIL)

Input: N ,(cid:64)L
Output: R

ij ) ∀(i, j) ∈ (cid:64)L]

1: P ← [(i, j, P L
2: S ← sortByLargestCapacity(P )
3: R ← [Rk = (cid:104)(cid:105) ∀k ∈ 1...|(cid:64)L|]
4: k ← 1
5: for (i, j, P L
6: Rk ← (cid:104)(i, j)(cid:105)
k ← k + 1
7:
8: end for
9: return R

ij ) ∈ S do

Model 2 Restoration Ordering Problem (ROP)

variables: (∀k ∈ 1, ..., N )
P G
gk∀g ∈ G, P L
xD
dk∀d ∈ D, θik∀i ∈ B

ijk∀(i, j) ∈ L, zL

ijk∀(i, j) ∈(cid:64)L,

maximize: (1a)
subject to (∀k ∈ 1, ..., N ):
(cid:88)

zL
ijk ≤ Rk

ij(k+1)

ij∈(cid:65)L
ijk ≤ zL
zL
zL
ijk = 1
P L
ijk = −bij(θik − θjk)
− P L
ijk ≤ P L
ij
P L
ijk ≤ −bij(θik − θjk) + θ∆
ijk ≥ −bij(θik − θjk) + θ∆
P L
− P L
(cid:88)

ij zL
ijk
(cid:88)

ij ≤ P L

ijk ≤ P L
(cid:88)
gk +

ijk ≤ P L
P L
k −

ij zL
P G

(2a)

∀(i, j) ∈ (cid:64)L, for k (cid:54)= N (2b)

∀(i, j) ∈ (cid:64)L, for k = N (2c)
∀(i, j) ∈ L \(cid:64)L

(2d)

∀(i, j) ∈ L \(cid:64)L

(2e)

ij (1 − zL
ij (1 − zL

ijk) ∀(i, j) ∈ (cid:64)L (2f)
ijk) ∀(i, j) ∈ (cid:64)L (2g)

∀(i, j) ∈ (cid:64)L (2h)

dkP D
xD

d = 0 ∀i ∈ B

(2i)

g∈Gi
Generators Limits: (1e)

(i,j)∈Li

d∈Di

C. Restoration Ordering Problem

We next consider the Restoration Ordering Problem (ROP)
proposed in [7], which is a mathematical optimization model
that can be solved with commercial mixed-integer program-
ming solvers to ﬁnd globally optimal solutions to the CRP. At
a high level, the ROP is a multi-period power ﬂow problem
where components are restored incrementally to maximize the
amount of power that can be delivered to the loads overtime.
The Restoration Ordering Problem (ROP) considered in this
work is shown in Model 2. The formulation consists of N
restoration periods. The primary decision variable is the status
of each damaged line in (cid:64)L, which is represented by a binary
variable zL
ijk, indexed by the connecting buses i, j and the
restoration period k ∈ 1, ..., N . If zL
ijk = 0), the
line is restored (or still damaged). The objective function (1a)
is the same as in the RIP problem and maximizes the total
energy served across all time periods.

ijk = 1 (or zL

3

Eq. (2a)-(2c) constrain how lines can be restored. Eq. (2a)
limits the total number of restored components in period k
to the value of Rk, creating a prioritization by enforcing that
some components are restored before others. By convention
in this work, the value of Rk is set to enforce a consistent
number of restorations per time period as follows,

(cid:38)

Rk =

k

(cid:37)

(cid:12)(cid:64)L(cid:12)
(cid:12)
(cid:12)
N

∀k ∈ 1, ..., N

(3)

(cid:12)(cid:64)L(cid:12)

Notice that, if the number of damaged lines (cid:12)
(cid:12) is equal
then Rk = k,
to the number of restoration periods N ,
and restorations are ordered one at a time. If (cid:12)
(cid:12)(cid:64)L(cid:12)
(cid:12) > N ,
the restorations are ordered more coarsely. We also note
that the constraint (2a) uses ≤ instead of strict equality to
allow energization to be delayed if required or advantageous.
Eq. (2b) requires restored components to remain restored for
remaining restoration periods. Finally, Eq. (2c) requires all
components to be restored by the ﬁnal restoration period.

The remaining constraints (2d)-(2i) and (1e) represent the
power ﬂow in the system for each restoration period. The
power ﬂow P L
ijk and power ﬂow limits on non-damaged lines
L \(cid:64)L are represented by (2d) and (2e), using a similar formu-
lation as in the RIP problem. The line power ﬂow on damaged
lines (2f) and (2g) use the standard Big-M formulation of line
on/off constraints [24]. A valid Big-M value can found by
summing over the maximum angle difference for each branch
in the network, then multiplying by the line susceptance,

θ∆ =

(cid:88)

θij

(i,j)∈L
ij = −θ∆
θ∆

ij = |bij|θ∆ ∀(i, j) ∈ L

(4a)

(4b)

When a line is active, zL

ijk = 1, these constraints result
in the same equality constraint as (2d). When a line is
inactive, zL
ijk = 0, the line power ﬂow becomes independent
of the voltage angles and (2h) forces the power ﬂow P L
ijk
to 0. Finally, (2i) and (1e) enforce nodal power balance and
generation limits, respectively.

i.e.

Given a solution to the ROP,

ij(k−1) = 1 then Rk = (cid:104)(i, j)(cid:105).

the associated restoration
order R is constructed from the line status variables zL
ijk.
The restorations that occur in period k, Rk, are the lines
transition from inactive to active in period k,
if
that
ij(k) − zL
zL
The scalability of solving the ROP model is limited as
the problem size scales with (i) the number of restorations
periods N , which implies of a larger number of time-coupled
problems, and (ii) the network size and number of damaged
components considered in each period. The number of binary
decision variables is the number of damaged devices times
the number of restoration periods,
to obtain a fully
ordered restoration sequence where N = |(cid:64)L|, the number of
binary variables scales as N 2. This poor scalability means that
even medium sized networks with moderate levels of damage
may be impossible to solve with mixed-integer optimization
software. This motivates the need for heuristics that can solve a
CRP problem quickly, while obtaining high-quality solutions.

i.e.,

D. Randomized Adaptive Decomposition

Recognizing the limitations of both UTIL and ROP ap-
proach in solving CRP problems, [21] proposed a meta-
heuristic algorithm based on Randomized Adaptive Decompo-
sition (RAD). This algorithm allows for better solution quality
than UTIL and better scalability than ROP, and is, to the best of
our knowledge, the current state-of-the-art solution algorithm
for CRP problems. RAD addresses the scalability issue by
solving a series of smaller ROP problems on subsets of the
restoration sequence. It requires an initial restoration sequence,
which can be obtained for example using UTIL. This sequence
is partitioned into small, random subsets with a limited number
of restoration periods, and an ROP problem is solved for each
subset to create a new restoration ordering. Then a new set
of random partitions are created, and the ROP problem is
solved again for each subset. The algorithm starts from smaller
partitions that are gradually increased in size, and iterates
until a time limit is reached. A more detailed explanation
of the algorithm is provided in Appendix A. Although RAD
addresses some of the scalability challenges presented by the
ROP, we ﬁnd that it can take a signiﬁcant amount of time to
converge to high-quality solutions, which limits its practical
applicability on large CRPs.

III. RECURSIVE RESTORATION REFINEMENT ALGORITHM

The key contribution of this work is the Recursive Restora-
tion Reﬁnement algorithm (RRR) for solving CRP problems.
RRR is a heuristic method similar to UTIL and RAD that
executes a series of two-period ROP problems recursively.
Speciﬁcally, the RRR algorithm begins by solving an ROP
(cid:12)(cid:64)L(cid:12)
problem that considers all damaged components in the set (cid:12)
(cid:12)
and two restoration periods N = 2, thus coarsely ordering
the lines into two sets, where restoration of the ﬁrst set is
prioritized over the second set. Each of these sets is then
solved by a new two-period ROP problem, increasing the
resolution of the restoration ordering to 4 periods. This process
continues until the restorations are fully ordered. In this way,
this algorithm builds a tree where the set of restorations are
split in half at each stage, until each leaf contains only one
restoration action. The ﬁnal restoration solution is the order
of restoration in these leaves.

The complete RRR algorithm is shown in Algorithm 2. The
inputs are a power grid N and a set of damaged items (cid:64)L. The
base case is shown in line 2. If there is only one damaged
component, then no ordering is required and the restoration
order R is simply the single damaged component within (cid:64)L. If
there is more than 1 damaged component a 2 period ROP
problem is solved on line 4. This returns two restoration
periods ˆR1 and ˆR2, with components in ˆR1 being prioritized
over components in ˆR2. There are two special cases that must
be considered before continuing with the next recursion step.
The ﬁrst case is when the two-period ROP problem fails to
ﬁnd a solution, for example, as a result of a numerical error or
a time limit (line 4). If this situation occurs, the UTIL heuristic
is used to split the repairs into two periods (lines 5-8).

4

Fig. 1: RRR starts with the full set of elements that need restoration
(top), and then recursively split the set into two sets, where the ﬁrst
set is prioritized over the other. This process continues until we have
a fully ordered restoration sequence with one element restored per
period (marked in green). The RRR algorithm thus creates a tree of
solutions by solving two-period ROP problems, with the leafs of the
tree presenting the ﬁnal restoration sequence.

Algorithm 2 Recursive Restoration Reﬁnement (RRR)

Input: N ,(cid:64)L
Output: R

(cid:109)
(cid:105)
(cid:109)

...|(cid:64)L|(cid:105)

7:

1: if |(cid:64)L| ≤ 1 then
return [(cid:64)L]
2:
3: end if
4: [ ˆR1, ˆR2] ← ROP (N ,(cid:64)L, 2)
5: if failure(ROP ) then
6: R ← U T IL(N ,(cid:64)L)
ˆR1 ← (cid:104)Rk ∀k ∈ 1...
(cid:108) |(cid:65)L|
ˆR2 ← (cid:104)Rk ∀k ∈

(cid:108) |(cid:65)L|
2
2 + 1

return U T IL(N ,(cid:64)L)

8:
9: end if
10: if | ˆR1| = 0 then
11:
12: end if
13: R ← [Rk = (cid:104)(cid:105) ∀k ∈ 1...|(cid:64)L|]
14: k ← 1
15: for n ∈ [1, 2] do
16: (cid:64)Ln ← (cid:64)L ∈ ˆRn
17:

18:

Rk ← ˜Rl
k ← k + 1

19:
20:
21:
22: end for
23: return R

end for

[ ˜R1, ˜R2, . . . , ˜R|(cid:65)L|] ← RRR(N ,(cid:64)Ln)
for l ∈ [1, 2, . . . , |(cid:64)L|] do

are more urgent than others to restore, which occurs, e.g.,
when power is fully restored. In this case, any ordering works
equally well and for convenience, UTIL is again used to order
the repairs (line 11). When the UTIL algorithm is used, RIP
is also solved to calculate power ﬂow for these restoration
periods.

The second case is when no restorations occur in the ﬁrst
period (line 10). This suggests there are no components that

The primary recursive procedure occurs in lines 13-23,
where the RRR problem is solved using the same grid N

……𝓛=<𝑖,𝑗,𝑚,𝑛,…,𝑙,𝑝><෡𝓡1,෡𝓡2>=𝑅𝑂𝑃(𝓝,𝓛,2)෡𝓡121…=<(…)>…෡𝓡21…=<(𝑚,𝑛)>෡𝓡22…=<(𝑖,𝑗)>…𝓡=[<𝑙,𝑝>,𝓡2,…,<𝑚,𝑛>,…,<𝑖,𝑗>,…,𝓡|𝓛|]෡𝓡11=<𝑙,𝑝>෡𝓡12=<⋯><෡𝓡121,෡𝓡122>=𝑅𝑂𝑃(𝓝,෡𝓡12,2)෡𝓡21=<𝑚,𝑛,…><෡𝓡211,෡𝓡212>=𝑅𝑂𝑃(𝓝,෡𝓡21,2)෡𝓡22=<𝑖,𝑗…><෡𝓡221,෡𝓡222>=𝑅𝑂𝑃(𝓝,෡𝓡22,2)…෡𝓡1=<𝑙,𝑝,…><෡𝓡11,෡𝓡12>=𝑅𝑂𝑃(𝓝,෡𝓡1,2)෡𝓡2=<𝑖,𝑗,𝑚,𝑛,…><෡𝓡21,෡𝓡22>=𝑅𝑂𝑃(𝓝,෡𝓡2,2)Recursion Depth123Z…on the subset of components occurring in the two restoration
periods ˆR1 and ˆR2 (line 17). The ﬁnal restoration order R
is constructed by merging the outputs of these recursive RRR
calls in lines 18-21.

The key value of the RRR algorithm is its ability to scale to
much larger problems than traditional ROP. This is possible
because the ROP sub-problems posed by RRR always have
exactly 2 periods (i.e., N = 2). Therefore, the largest ROP
sub-problem that is solved by RRR has 2|(cid:64)L| binary variables,
in contrast to the |(cid:64)L|2 variables required by the traditional ROP
formulation. However, RRR is only a heuristic solution and
does not guarantee optimality. Further, solving the two-period
ROP may still be time consuming. However the experimental
results will show that in practice the RRR algorithm provides
an ideal tradeoff of runtime requirements and solution quality.

IV. POST-PROCESSING OF SOLUTIONS

All of the algorithms presented above provide a restoration
order R. The ROP, RAD and RRR problem also provides
information about the total power served in each time step, and
similar information can be obtained for the UTIL restoration
order by solving the RIP problem. However, in our simula-
tions, we observe that the total amount of power served in each
time step can sometimes drop at intermediate periods during
the restoration process. This counter intuitive effect is known
as Brace’s Paradox [25], [26], where increasing the total
line capacity in the networks decreases the effective capacity.
This effect can occur with the UTIL and RRR algorithms as
their restoration orders R always have one component being
restored in each time step. It can also occur in ROP and RAD
if the ROP problem is not fully solved to optimality.

This reduction in power delivery is an artifact of the
mathematical modeling of this work, as any practical CRP
solution would delay re-energization of additional components
until it is possible to avoid a drop in the served load. Hence,
we remove the effects of Brace’s Paradox by post processing
the amount of power served in each restoration period k to be
the maximum power served in any previous period, i.e.,

P Total

k = maxn=1,...,k

(cid:8)(cid:80)

d∈D xD

dnP D

d ∆n

(cid:9)

This post-processing achieves the effect of delaying the activa-
tion of components in a period Rk until they increase power
delivery. Formally, if the power delivered is reduced in the
periods k to k + m, then the devices restored in those periods
are instead restored in the period k +m+1, and the restoration
set for periods in k to k + m are empty,

Rk+m+1 = U nion(Rk, ..., Rk+m+1)

Rn = (cid:104)(cid:105) ∀n ∈ k, ..., k + m

This post processing is performed on all solutions.

In addition to the post-processing discussed above, it would
be possible to perform a post-processing of the restoration
ordering solutions to assess AC power ﬂow feasibility. Specif-
ically, we could take the restoration ordering obtained from our
algorithms and solve an AC optimal power ﬂow at each time
step to assess whether the proposed restoration sequence is
AC feasible. Based on [18], solving an AC optimal power ﬂow

TABLE I: Selected power system API test cases from PGLib.
Highlighted scenarios are solved within an optimality gap of 1% by
ROP.

5

Case
case24
case39
case60
case118
case240
case500

Damaged Line Count
10% 20% 30% 40% 50% 60% 70% 80% 90% 100%
38
46
88
186
448
733

30
37
70
149
358
586

11
14
26
56
134
220

23
28
53
112
269
440

27
32
62
130
314
513

19
23
44
93
224
366

34
41
79
167
403
660

15
18
35
74
179
293

8
9
18
37
90
147

4
5
9
19
45
73

(which allows for redispatch of generation, even if the restora-
tion sequence is ﬁxed) is likely to produce feasible results
on small networks, while simply running an AC power ﬂow
simulation often leads to infeasibility and non-convergence
[27]. However, in this paper, we omit an analysis of AC power
ﬂow feasibility because of space limitations.

V. RESULTS

To study the efﬁcacy of the different restoration algorithms,
we select six power systems from the IEEE Power Grid OPF
Library v21.07 [28] that range from 24 to 500 buses, which
are listed in Table I. We use the API grid models, which have
increased active power injections, to ensure the loading of the
grids is high and the optimization problems are challenging
cases for restoration ordering.

Damage to the systems was applied to randomly selected
transmission lines, with the total damage count ranging from
10% to 100% percent of lines. Table I shows the number
of damaged lines for each test case and damage percentage.
Overall, each of the restoration algorithms are evaluated on 60
distinct damage scenarios.

A. Implementation

The optimization problems and algorithms are implemented
in PowerModelsRestoration [18], an open source package
in the Julia programming language [29]. All optimization
problems are solved using the Gurobi v9.1 solver [30]. All
problems are solved on a 2 cpu server with 36 cores running
at 2.1 GHz, and 128 GB of memory.

We next discuss the parameters used for implementation
of the mixed-integer problems involved in the ROP, RAD
and RRR. (UTIL is not discussed, as it does not require the
deﬁnition of any particular parameters.)

• Optimality gap: We solve the mixed-integer problems
involved in ROP, RAD, and RRR with a 1% optimal-
ity gap, which signiﬁcantly reduced the solution times
relative to the default .01% gap. We also tried a 5% and
10% optimality gap, but these higher values resulted in a
severe reduction in solution quality.
• Time limit: We applied different

time limits for the

methods, ranging from 10 hours to 5 minutes.

• Time step duration: The duration of ∆k is 1 hour for

simplicity.

In addition to these shared parameters, we also include some

speciﬁc parameters for each algorithm:

• Restoration Ordering Problem: We warm-start the ROP
with the restoration ordering from UTIL to help the solver

ﬁnd an initial feasible solution. (Note that warmstarting
is not required for RAD or RRR as they are able to ﬁnd
feasible solutions without a warm start.)

• Randomized Adaptive Decomposition Algorithm: Follow-
ing the design proposed in [21], this approach begins
with small partitions of the complete restoration order
(i.e., 2-5 components each) with tight time limits (1%
of the algorithm’s full
time limit). As the algorithm
progresses the partition sizes and sub-problem time limits
are increased to ﬁnd higher quality solutions as explained
in the appendix. The algorithm terminates when it reaches
the algorithm time limit, or after 100 iterations within
which the solution did not improve.

• Recursive Restoration Reﬁnement Algorithm: The sub-
ROP problem is assigned a time limit equal to half the
remaining algorithm time tROP = tRRR/2. This time
constraint provides the most time for the ﬁrst problem
that splits all of the restorations, but leaves sufﬁcient time
for remaining problems in the recursive call to calculate
a solution.

In the rest of this section, we examine the solution quality

and solution time of the restoration algorithms.

B. Benchmarking against ROP Optimal Solutions

We ﬁrst consider solutions to instances where the ROP
obtains a solution with < 1% optimality gap within 10 hours.
In this case, the ROP solution is provably optimal (up to the
tolerance), and we use this solution to benchmark the solution
quality of the heuristic algorithms.

1) Optimal Solution for a Single Case: We ﬁrst look at
the load served over time for case60 with 70% damage to
lines, which ROP solves to optimality. Figure 2a shows the
load served over time by the different algorithms. The total
load served, which can be interpreted as the integral under the
curves, is 7753.1 MW for ROP, 7713.4 MW for RRR, 7712.6
MW for RAD and 4227.1 MW for UTIL.

This solution is typical for cases when ROP is able to solve
to optimality. The total load served by ROP, RAD, and RRR
is within the 1% optimality gap and the load curves for the
three algorithms are very similar, though not exactly the same.
In contrast, the UTIL solution serves much less load and often
fails to improve the load served for several restoration periods.
2) Quality of solution across multiple cases: Total power
served for other scenarios solved with a 10-hour time limit
are shown in Table II, where the best solution for each grid
scenario and solutions within 1% of the best solutions are
highlighted and marked in bold font and a darker shade. We
consider the subset of 42 cases that ROP solves to optimality,
which are also indicated by a darker shade and bold font
in Table I, and calculate the mean and standard deviation of
percentage of power served across those 42 cases. We observe
that the ROP solutions serve on average 93.6% of power
demand, while RRR serves 93.4% and RAD serves 92.1%. In
contrast, UTIL is only able to serve 77.2% of power demand
on average. Further, the standard deviation of percent power
served for ROP, RRR, and RAD are around 0.06%, meaning
that most solutions are very close to the (high) average values.

6

(a) Case60 with 70% Line Damage

(b) Algorithm Scaling

Fig. 2: (a) Power served for each restoration period. ROP, RAD, and
RRR at ﬁrst restores load quickly, then slower. UTIL does not show
a similar pattern. (c) The algorithm solve time increases with a larger
number of damaged lines. RRR scales notably better than ROP or
RAD, ﬁnding solutions up 1,000 times faster.

In comparison, the standard deviation for UTIL is 0.195, which
indicates a much higher variability in solution quality.

We conclude from these results that RRR generally obtains
solutions that are very close to the optimal ROP solutions,
typically slightly better than the RAD solutions and much
better than the UTIL solutions.

C. Algorithm Run Time Requirements

To analyze the scalability of the algorithm, we plot the
number of damaged components and solution time for each
of our cases, for each level of damage. We again use results
obtained with an upper time limit of 10 hours, and note that
not all solutions points are optimal. Fig. 2b shows the number
of damaged lines in each scenario (horizontal axis) vs the time
needed to solve each case (vertical axis) for ROP, RRR, and
RAD. For scenarios with more than 100 damaged lines, ROP
and RAD both terminate at the 10h time limit, while RRR
typically terminates within 10-100s. This means that RRR
frequently is 1,000 times faster than ROP and RAD. Only
the three largest cases take a long time to solve RRR, because
the problem at recursion depth 1 is not solved to optimality
within the allocated time of 5 hours.

D. Benchmarking on Time-Limited Solutions

The case118 with 80% damage (corresponding to 149
damaged lines) is one of the cases where ROP was unable to
ﬁnd an optimal solution even in 10 hours. The power served
over time for this scenario is shown in Fig. 3a. We observe
that the RRR is the best solution in this case, with a total
power served of 8911.1 MW. RAD is almost as good with
8792.9 MW served, while ROP only serve 8426.1 MW of
power. UTIL is the worst solution with 6411.3 MW power
served. Based on those results and the plots, we conclude that
both RAD and RRR outperform UTIL and ROP in this case.
1) Performance Proﬁle: Case 118 80%: To understand how
solution quality changes as more time is made available to the
algorithm, we solve case118 with 80% line damage several
times while varying the time limit between 15 seconds to 8
hours. Fig. 3b plots the percent of total demand served versus

0102030405060Restoration Period010050150Power Served [p.u.]ROPRRRRADUTIL1101001,000Damaged Lines1e-31e-21e-11e+01e+11e+21e+31e+41e+5Solve Time [sec]ROPRRRRAD7

E. Analyzing Restoration Results

Many factors affect the optimal CRP solution including the
number of damaged items, connectivity between loads and
generators, and network characteristics like line capacity and
redundancy. Although these factors are complex, we attempt
to draw some general conclusions about the characteristics of
high-quality solutions to the CRP problem. By investigating
the whole range of restoration solutions, three trends stand out.
1) Good solutions initially restore load quickly before

gradually slowing down.

2) It is important to quickly reduce the number of islands

to connect load and generation resources.

3) Increasing the size of the largest island is not essential.
To illustrate these effects on a particular example, Fig. 4a
shows the CRP solutions for each algorithm on the Case 240
system with 50% damage to lines, given a 10h time limit.
We show the total amount of power served increases with the
restoration period in Fig. 4a, the number of islands in the
system in Fig. 4b and the size of the largest island in Fig. 4c.
First, we observe from Fig. 4a that the RRR algorithm ﬁnds
the best solution (i.e., the solution with the highest power
served), closely followed by ROP. RAD has a slightly worse
solution, and UTIL is poor in comparison. Fig. 4b shows that
the RRR and ROP solutions rapidly decrease the number of
islands, until almost all power demand is served in restoration
period 75. The RAD solution follows a similar trajectory until
restoration period 25 (where it stops performing well), while
the UTIL algorithm does not reduce the number of islands
nearly as quickly as the other algorithms. When considering
the largest
the
UTIL algorithm creates a large grid quickly as it connects
the largest capacity lines ﬁrst. In comparison, RRR, ROP, and
RAD delay forming a very large grid until after they fully serve
load. Instead, these solutions ﬁrst focus on creating smaller
networks to power all loads, before interconnecting. This result
suggests that future work may need to consider additional
details regarding the process of reconnecting multiple islands
during restoration, such as dynamic stability and need for
resynchronization.

island plotted in Fig. 4c, we observe that

VI. CONCLUSION

In this paper, we propose the Recursive Restoration Re-
ﬁnement algorithm to identify effective restoration sequences
that maximize the delivered power in power systems with a
large number of damaged lines. The algorithm recursively
orders the repairs into two halves, where the ﬁrst half is
prioritized over the second, until the repairs are organized
into a restoration sequence with one repair per period. This
algorithm ﬁnds near-optimal solutions 1000 times faster than
existing algorithms. The solutions generally fall within 1%
of the provably optimal solution obtained by solving the
Restoration Ordering Problem. On larger test cases, we are
able to identify good restoration sequences for large systems
(tested up to 500 nodes) and a large number of damaged
components (tested for up to 700 damaged lines) in less than
ﬁve minutes. In comparison, the Restoration Ordering Problem
terminates with a very sub-optimal solution after 10 hours.

(a) Power Served Over Time

(b) Performance vs Time Limit

Fig. 3: Results for case118 with 80% line damage. (a) Power served
for each restoration periods. With 10 hours ROP cannot ﬁnd an
optimal solution, and both RRR and RAD serve more power than
ROP. (b) Total power served versus the algorithm time limit.

the algorithm time limit. The UTIL and RRR algorithms both
solve the problem within 15 seconds, and thus do not improve
with more time. ROP and RAD are both initialized with the
Utilization solution. RAD begins improving on that solution
within 15 seconds, but requires 15 minutes to approach the
same solution quality as RRR and 2 hours to come close to it.
ROP begins to improve the solution after 1 hour and continues
to improve until the time limit is reached, but is still not able
to match the RRR or RAD solutions.

2) Solution Quality with 5 Minute Time Limit: We next
solve each scenario with a ﬁve minute algorithm time limit.
We choose this time limit because we believe that it represents
a time frame that is short enough for the system operator
to solve (and resolve) the restoration ordering problem as
the restoration progresses. Particularly in situations where the
overall state of the system may initially be unknown, it is
important to be able to resolve the problem quickly as new
information arrives.

The full results are shown in Table III, where the best
solution for each grid scenario and solutions within 1% of
the best solutions are highlighted and marked in bold font.
RRR is consistently either the best solution or within 1% of
the best solution for all cases, even for small cases with low
number of damaged items where ROP solves to optimality.
RAD outperforms ROP on large systems, but it rarely matches
the solution quality of RRR.

Comparing the statistics of the 5-min. solutions across all
cases, we observe that the RRR solutions serve on average
91.9% of power demand with a low standard deviation of
0.06%, which is comparable to the results obtained with a
10-hour limit. ROP and RAD both serve an average of 78.0%
of the power demand, which is much worse than for solutions
obtained with a 10-hour time limit, while UTIL still serves
68.3% of power demand on average. The standard deviation
of ROP, RAD, and UTIL solutions are 0.271, 0.230, and 0.242,
respectively, indicating that the solution quality varies widely
but is generally low.

010050150Restoration Period0204060Power Served [p.u.]ROPRRRRADUTIL1530603009001800360072001440028800Time Limit [seconds]0.50.60.70.80.91.0Percent Power Served [p.u.]ROPRRRRADUTIL8

(a) Power Served

(b) Island Count

(c) Size of Largest Island

Fig. 4: Restoration solutions for case240 with 50% line damage. (a) Power served vs restoration period. The RRR and RAD algorithms
intially quickly increases the load, and then slow down. The RAD and UTIL algorithms follow a less clear pattern. (b) Island count vs
restoration period. The RRR and ROP algorithms quickly reduce the number of islands in the network, while RAD and UTIL maintain more
islands. (c) Size of largest island. Quickly creating a large island is not essential for good solutions.

Future work will expand the model to consider damage to
more components, such as buses and generators, and consider
non-linear power ﬂow formulations to be used, such as AC
power ﬂow or convex relaxations. Further, the RRR algorithm
may replace UTIL as a warm-start solution for ROP or RAD,
and could be combined with other pre-processing tools to
further improve performance. Overall, our goal is to extend
this work and successfully order 1,000 repairs on a 5,000 bus
network, with an AC-feasible power ﬂow solution.

REFERENCES

[1] S. A. Areﬁfar, Y. A.-R. I. Mohamed, and T. H. M. EL-Fouly, “Compre-
hensive operational planning framework for self-healing control actions
in smart distribution grids,” IEEE Trans. Power Systems, vol. 28, no. 4,
pp. 4192–4200, 2013.

[2] D. Lindenmeyer, H. Dommel, and M. Adibi, “Power system restoration
— a bibliographical survey,” International Journal of Electrical Power &
Energy Systems, vol. 23, no. 3, pp. 219–227, 2001. [Online]. Available:
https://www.sciencedirect.com/science/article/pii/S0142061500000612

[3] Y. Jiang, S. Chen, C.-C. Liu, W. Sun, X. Luo, S. Liu, N. Bhatt,
S. Uppalapati, and D. Forcum, “Blackstart capability planning for
power system restoration,” International Journal of Electrical Power
& Energy Systems, vol. 86, pp. 127–137, 2017. [Online]. Available:
https://www.sciencedirect.com/science/article/pii/S0142061516307220

[4] W. Sun, C.-C. Liu, and L. Zhang, “Optimal generator start-up strategy
for bulk power system restoration,” IEEE Trans. Power Systems, vol. 26,
no. 3, pp. 1357–1366, 2011.

[5] D. Rodriguez Medina, E. Rappold, O. Sanchez, X. Luo, S. R. Rivera Ro-
driguez, D. Wu, and J. N. Jiang, “Fast assessment of frequency response
of cold load pickup in power system restoration,” IEEE Trans. Power
Systems, vol. 31, no. 4, pp. 3249–3256, 2016.

[6] H. Hijazi, T. W. Mak, and P. Van Hentenryck, “Power system restoration
with transient stability,” AAAI Conf. on Artiﬁcial Intelligence, vol. 29,
no. 1, Feb. 2015. [Online]. Available: https://ojs.aaai.org/index.php/
AAAI/article/view/9241

[7] P. Van Hentenryck, C. Coffrin, R. Bent et al., “Vehicle routing for the
last mile of power system restoration,” in Power Systems Computation
Conference (PSCC), Stockholm, Sweden. Citeseer, 2011.

[8] Y. Tan, F. Qiu, A. K. Das, D. S. Kirschen, P. Arabshahi, and J. Wang,
“Scheduling post-disaster repairs in electricity distribution networks,”
IEEE Trans. Power Systems, vol. 34, no. 4, pp. 2611–2621, 2019.
[9] F. Qiu and P. Li, “An integrated approach for power system restoration
planning,” Proc. of the IEEE, vol. 105, no. 7, pp. 1234–1252, 2017.

[11] J. Yan, B. Hu, K. Xie, H.-M. Tai, and W. Li, “Post-disaster
power system restoration planning considering sequence dependent
repairing period,” International Journal of Electrical Power &
Energy Systems, vol. 117, p. 105612, 2020.
[Online]. Available:
https://www.sciencedirect.com/science/article/pii/S0142061519316242

[12] R. B. Duffey and T. Ha, “The probability and timing of power system
restoration,” IEEE Trans. Power Systems, vol. 28, no. 1, pp. 3–9, 2013.
[13] Y. Xu, C.-C. Liu, K. P. Schneider, F. K. Tuffner, and D. T. Ton, “Mi-
crogrids for service restoration to critical load in a resilient distribution
system,” IEEE Trans. Smart Grid, vol. 9, no. 1, pp. 426–437, 2018.

[14] Y. Tan, A. K. Das, P. Arabshahi, and D. S. Kirschen, “Distribution sys-
tems hardening against natural disasters,” IEEE Trans. Power Systems,
vol. 33, no. 6, pp. 6849–6860, 2018.

[15] D. S. Kirschen and T. L. Volkmann, “Guiding a power system restoration
with an expert system,” IEEE Trans. Power Systems, vol. 6, no. 2, pp.
558–566, May 1991.

[16] M. Adibi, P. Clelland, L. Fink, H. Happ, R. Kafka, J. Raine, D. Scheurer,
and F. Trefny, “Power system restoration - a task force report,” IEEE
Trans. Power Systems, vol. 2, no. 2, pp. 271–277, May 1987.

[17] Y. Hou, C.-C. Liu, P. Zhang, and K. Sun, “Constructing power sys-
tem restoration strategies,” in Int. Conf. on Electrical and Electronics
Engineering (ELECO), 2009, pp. I–8–I–13.

[18] N. Rhodes, D. M. Fobes, C. Coffrin, and L. Roald, “Powermodel-
srestoration. jl: An open-source framework for exploring power network
restoration algorithms,” Electric Power Systems Research, vol. 190, p.
106736, 2021.

[19] P. Van Hentenryck and C. Coffrin, “Transmission system repair and
restoration,” Math. Prog., vol. 151, no. 1, pp. 347–373, Jun 2015.
[Online]. Available: https://doi.org/10.1007/s10107-015-0887-0
[20] B. Stott, J. Jardim, and O. Alsac, “Dc power ﬂow revisited,” IEEE Trans.

Power Systems, vol. 24, no. 3, pp. 1290–1300, 2009.

[21] C. Coffrin, P. Van Hentenryck, and R. Bent, “Last-mile restoration
for multiple interdependent infrastructures.” in AAAI Conf. on Artiﬁcial
Intelligence, vol. 12, 2012, pp. 455–463.

[22] C. Coffrin, R. Bent, B. Tasseff, K. Sundar, and S. Backhaus, “Relax-
ations of ac maximal load delivery for severe contingency analysis,”
IEEE Trans. Power Systems, vol. 34, no. 2, pp. 1450–1458, March 2019.
[23] T. W. Mak, C. Coffrin, P. Van Hentenryck, I. A. Hiskens, and D. Hill,
“Power system restoration planning with standing phase angle and
voltage difference constraints,” in 2014 Power Systems Computation
Conference, 2014, pp. 1–8.

[24] B. Kocuk, H. Jeon, S. S. Dey, J. Linderoth, J. Luedtke, and
X. A. Sun, “A cycle-based formulation and valid inequalities
transmission problems with switching,” Oper. Res.,
for dc power
vol. 64, no. 4, p. 922–938, Aug. 2016.
[Online]. Available:
https://doi-org.ezproxy.library.wisc.edu/10.1287/opre.2015.1471

[25] S. Blumsack and M. Ili´c, “The braess paradox in electric power systems,”

Working Paper, 2006.

[10] D. N. Abu Talib, H. Mokhlis, M. S. Abu Talip, K. Naidu, and H. Suyono,
“Power system restoration planning strategy based on optimal energizing
time of sectionalizing islands,” Energies, vol. 11, no. 5, 2018. [Online].
Available: https://www.mdpi.com/1996-1073/11/5/1316

[26] M. Flores, L. H. Macedo, and R. Romero, “Alternative mathematical
models for the optimal transmission switching problem,” IEEE Systems
Journal, vol. 15, no. 1, pp. 1245–1255, 2021.

[27] C. Coffrin, P. V. Hentenryck, and R. Bent, “Accurate load and generation

010020050150Restoration Period05001,0001,5002,000Power Served [p.u.]ROPRRRRADUTIL010020050150Restoration Period0204060Island CountROPRRRRADUTIL010020050150Restoration Period050100150200Largest Island SizeROPRRRRADUTILscheduling for linearized dc models with contingencies,” in 2012 IEEE
Power and Energy Society General Meeting, July 2012, pp. 1–8.
[28] S. Babaeinejadsarookolaee, A. Birchﬁeld, R. D. Christie, C. Coffrin,
C. DeMarco, R. Diao, M. Ferris, S. Fliscounakis, S. Greene, R. Huang,
C. Josz, R. Korab, B. Lesieutre, J. Maeght, D. K. Molzahn, T. J. Overbye,
P. Panciatici, B. Park, J. Snodgrass, and R. Zimmerman, “The power grid
library for benchmarking ac optimal power ﬂow algorithms,” 2019.
[29] J. Bezanson, A. Edelman, S. Karpinski, and V. Shah, “Julia: A fresh
approach to numerical computing,” SIAM Review, vol. 59, no. 1, pp.
65–98, 2017. [Online]. Available: https://doi.org/10.1137/141000671

[30] Gurobi Optimization, Inc., “Gurobi optimizer reference manual,” Pub-

lished online at http://www.gurobi.com, 2014.

APPENDIX

In this appendix, we summarize the RAD algorithm. Further
explanation can be found in [21]. Algorithm 3 shows the RAD
algorithm. First, an initial restoration sequence R is found
for a power network N using the Utilization Heuristic. This
restoration sequence is partitioned into subsets of random size,
with between s and s restoration periods in each partition.
For each partition, an ROP problem is solved with the goal
of reordering the restorations to improve the power served. If
ROP ﬁnds a solution that improves the power served, the newly
optimized restoration order of the partition ˆSn is reinserted
into the restoration order R, and the network is re-partitioned
again.

9

Algorithm 3 Randomized Adaptive Decomposition (RAD)

Input: N ,(cid:64)L
Output: R

[S1, ..., Sl] ← RandomP artition(R, [s...s])
for Sn ∈ [S1, ..., Sl] do

1: R ← U T IL(N ,(cid:64)L)
2: while not stoppingCriteria do
3:
4:
5:
6:
7:

(cid:64)Ln ← (cid:64)L ∈ Sn
ˆSn ← ROP (N ,(cid:64)Ln, |Sn|)
if not (ROP failure) and ˆSn > Sn then

Sn ← ˆSn

8:
end if
9:
end for
10:
11: end while
12: return R

The RAD algorithm requires parameters to decide the size
of the random partitions, which are adapted across iterations
to continue to improve the solutions, as well as parameters to
decide how to allocate the allotted computation time among
subproblems. Here, we initially set the minimum and max-
imum partition size to s = 2 and s = 5, while the ROP
sub-problem time limit is initialized to 1% of the total time
limit. If 80% of the partitions fail to improve the solution and
more than 80% of the sub-problem terminate without solving
the problem to optimality, then the sub-problem time limit is
doubled. If 80% of the partitions fail to improve the solution
and less than 80% of the problems are interrupted by the time
limit, then the new maximum partition size is increased by
10% up to a maximum of |(cid:64)L|/2. The algorithm terminates
when it reaches the time limit or if it ﬁnished 100 iterations
without improving the solution.

10

TABLE II: Total Power Served [p.u.] with 10 hour algorithm time limit.

Case
Damage
Power Demand
Util
RAD
RRR
ROP
Case
Damage
Power Demand
Util
RAD
RRR
ROP
Case
Damage
Power Demand
Util
RAD
RRR
ROP
Case
Damage
Power Demand
Util
RAD
RRR
ROP
Case
Damage
Power Demand
Util
RAD
RRR
ROP
Case
Damage
Power Demand
Util
RAD
RRR
ROP

10
218.8

216.5
218.8
218.8
216.5

10
505.3

451.5
484.0
492.5
488.4

10
1262.0
1170.9
1218.1
1235.1
1236.6

10
1307.4
1294.6
1301.9
1302.3
1294.6

10
81410.2
81107.0
81357.0
81379.2
81107.0

10
20146.1
18461.1
19335.6
19874.6
19845.3

20
437.6

434.5
435.8
436.0
434.5

20
909.6

843.3
877.3
876.3
876.7

20
2524.0

2290.3
2390.0
2440.4
2447.8

20
2546.0

2372.0
2509.9
2498.6
2506.4

20
162820.4
159040.3
160091.4
162341.7
162463.0

20
40292.2
34984.5
37336.2
39287.9
39399.1

30
601.7

590.7
597.2
596.8
596.0

30
1415.0

1193.4
1332.6
1333.5
1339.1

30
3645.8

3261.2
3395.6
3505.0
3510.1

30
3853.3

3480.7
3673.1
3788.4
3784.1

30
242421.5
200671.3
235764.4
239862.2
240101.0

30
59886.4
46534.6
55795.0
56940.9
55209.9

40
820.6

771.0
801.1
801.1
800.4

40
1819.2

1254.6
1608.0
1669.4
1668.6

40
4907.8

3758.9
4459.3
4431.9
4461.5

40
5091.9

4268.0
4563.7
4902.9
4940.3

40
323831.7
257979.8
315823.7
316685.5
317677.8

40
80308.4
53635.6
72550.5
74415.7
53635.6

case24api

50
1039.4

918.0
998.0
1003.0
1000.7

60
1258.2

1095.0
1192.8
1194.6
1200.4

case39api

50
2324.6

1463.5
1970.3
1994.5
2011.2

60
2829.9

1612.4
2490.1
2490.7
2511.3

case60api

50
6169.8

5020.3
5689.2
5723.9
5758.4

60
7431.9

5221.4
6604.1
6703.6
6748.1

case118api

50
6399.3

5212.2
6058.6
6049.8
6082.6

60
7706.7

5702.6
7067.4
7025.6
7079.6

case240api

50
405241.9
244205.4
380102.9
395207.7
393652.2

60
486652.1
258124.9
466890.1
471584.6
427799.9

case500gocapi
60
120600.6
57430.5
97541.1
104426.3
57430.5

50
100178.6
59729.2
86519.0
89540.5
59729.2

70
1477.0

1319.1
1428.4
1426.1
1424.8

70
3234.2

1731.6
2721.6
2694.5
2721.2

70
8693.9

4227.1
7712.6
7713.4
7753.1

70
8945.2

6229.5
7986.9
8079.3
8031.1

70
568062.3
118857.2
479083.4
534612.6
471192.5

70
140194.8
59384.8
99325.3
117474.0
59384.8

80
1641.1

1353.6
1487.4
1524.8
1530.5

80
3739.6

1644.9
3129.4
3133.1
3161.6

80
9815.7

5958.3
8520.1
8584.8
8621.1

80
10252.6
6411.3
8792.9
8911.1
8426.1

80
647663.4
230092.7
590468.9
609201.5
542647.8

80
160616.9
64958.6
100699.1
131775.4
64958.6

90
1859.9

1410.9
1579.5
1668.6
1679.4

90
4143.8

1810.7
3439.2
3414.4
3440.3

90
11077.7
3971.4
9359.3
9325.3
9389.1

90
11491.2
7196.3
9823.0
9860.8
8724.8

90
729073.6
98234.4
638816.7
675046.1
98234.5

90
181038.9
56922.7
78213.2
143194.1
56922.7

100
2078.8

1521.8
1845.8
1860.2
1864.4

100
4649.2

1633.1
3661.4
3667.7
3699.4

100
12339.7
4098.4
8983.6
10351.6
10396.4

100
12798.6
7525.4
10599.1
10705.2
9328.3

100
810483.8
58545.0
717060.0
739336.7
58545.0

100
200909.1
58043.0
86193.6
154440.2
58043.0

11

TABLE III: Total Power Served [p.u.] with 5 minute algorithm time limit.

Case
Damage
Power Demand
Util
RAD
RRR
ROP
Case
Damage
Power Demand
Util
RAD
RRR
ROP
Case
Damage
Power Demand
Util
RAD
RRR
ROP
Case
Damage
Power Demand
Util
RAD
RRR
ROP
Case
Damage
Power Demand
Util
RAD
RRR
ROP
Case
Damage
Power Demand
Util
RAD
RRR
ROP

10
218.8

216.5
218.8
218.8
216.5

10
505.3

451.5
484.0
492.5
488.4

10
1262.0
1170.9
1218.1
1235.1
1236.6

10
1307.4
1294.6
1299.9
1302.3
1294.6

10
81410.2
81107.0
81180.6
81379.2
81107.0

10
20146.1
18461.1
18794.1
19874.6
18461.1

20
437.6

434.5
435.8
436.0
434.5

20
909.6

843.3
877.3
876.3
876.7

20
2524.0

2290.3
2389.5
2440.4
2447.8

20
2546.0

2372.0
2509.7
2498.6
2506.4

20
162820.4
159040.3
159586.0
162341.7
162463.0

20
40292.2
34984.5
35319.8
39287.9
34984.5

30
601.7

590.7
597.2
596.8
596.0

30
1415.0

1193.4
1332.6
1333.5
1339.1

30
3645.8

3261.2
3394.7
3505.0
3510.1

30
3853.3

3480.7
3631.3
3788.4
3784.1

30
242421.5
200671.3
213379.3
239862.2
200671.3

30
59886.4
46534.6
46758.5
56940.9
46534.6

40
820.6

771.0
801.1
801.1
800.4

40
1819.2

1254.6
1608.0
1669.4
1668.6

40
4907.8

3758.9
4447.8
4431.9
4461.5

40
5091.9

4268.0
4537.6
4902.9
4795.0

40
323831.7
257979.8
264473.5
316685.5
257979.8

40
80308.4
53635.6
54069.2
74415.7
53635.6

case24api

50
1039.4

918.0
998.0
1003.0
1000.7

60
1258.2

1095.0
1192.5
1194.6
1200.4

case39api

50
2324.6

1463.5
1726.0
1994.5
2011.2

60
2829.9

1612.4
2481.8
2490.7
2511.3

case60api

50
6169.8

5020.3
5684.8
5723.9
5758.4

60
7431.9

5221.4
6574.8
6703.6
6748.1

case118api

50
6399.3

5212.2
5520.2
6049.8
5827.1

60
7706.7

5702.6
6378.7
7025.6
5702.6

case240api

50
405241.9
244205.4
260538.3
395207.7
244205.4

60
486652.1
258124.9
266645.0
471584.6
258124.9

case500gocapi
60
120600.6
57430.5
58022.7
104426.3
57430.5

50
100178.6
59729.2
60220.6
89540.5
59729.2

70
1477.0

1319.1
1425.6
1426.1
1424.8

70
3234.2

1731.6
2570.3
2694.5
2721.2

70
8693.9

4227.1
7692.1
7713.4
7753.1

70
8945.2

6229.5
7300.6
8079.3
6229.5

70
568062.3
118857.2
133016.9
534612.6
118857.2

70
140194.8
59384.8
59911.4
117474.0
59384.8

80
1641.1

1353.6
1457.6
1524.8
1530.5

80
3739.6

1644.9
3128.8
3133.1
3161.6

80
9815.7

5958.3
8474.6
8584.8
8621.1

80
10252.6
6411.3
7469.5
8911.1
6411.3

80
647663.4
230092.7
240215.5
609201.5
230092.7

80
160616.9
64958.6
65510.9
131548.1
64958.6

90
1859.9

1410.9
1578.5
1668.6
1679.4

90
4143.8

1810.7
3211.9
3414.4
3440.3

90
11077.7
3971.4
9328.2
9325.3
9185.3

90
11491.2
7196.3
8102.6
9860.8
7196.3

90
729073.6
98234.4
113153.4
675046.1
98234.5

90
181038.9
56922.7
57519.8
142571.5
56922.7

100
2078.8

1521.8
1834.0
1860.2
1864.4

100
4649.2

1633.1
3647.1
3667.7
3699.2

100
12339.7
4098.4
8897.2
10351.6
9614.0

100
12798.6
7525.4
8483.4
10705.2
7525.4

100
810483.8
58545.0
77605.7
739336.7
58545.0

100
200909.1
58043.0
58642.4
154436.1
58043.0

