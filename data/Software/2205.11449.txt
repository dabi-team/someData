2
2
0
2

y
a
M
3
2

]
I

N
.
s
c
[

1
v
9
4
4
1
1
.
5
0
2
2
:
v
i
X
r
a

Nancy: an eﬃcient parallel Network Calculus library

Raﬀaele Zippo, Giovanni Stea

Dipartimento di Ingegneria dell’Informazione, University of Pisa, Italy.
Dipartimento di Ingegneria dell’Informazione, University of Florence, Italy.

Abstract

This paper describes Nancy, a Network Calculus (NC) library that allows
users to perform complex min-plus and max-plus algebra operations eﬃ-
ciently. To the best of our knowledge, Nancy is the only open-source library
that implements operators working on arbitrary piecewise-linear functions
(as opposed to only concave/convex ones), as well as to implement some
of them (e.g.
sub-additive closure and function composition). Nancy al-
lows researchers to compute NC results using a staightforward syntax, which
matches the algebraic one. Moreover, it is designed having computational
eﬃciency in mind: it exploits clever data representation, it uses inheritance
to allow for faster algorithms when they are available (e.g., for speciﬁc sub-
classes of functions), and it is natively parallel, thus reaping the beneﬁt of
multicore hardware. This makes it usable to solve NC problems which were
previously considered beyond the realm of tractable.

Keywords: Network Calculus, Min-plus algebra, Worst-case analysis

1. Motivation and signiﬁcance

Worst-case analysis of networked systems is gaining importance due to the
emergence of safety-critical applications with real-time requirements, such as
factory automation within the Industry 4.0 paradigm, automated or tele-
operated driving, coordinated unmanned aerial vehicles, etc. With all these
distributed applications, ex-ante certiﬁcation that end-to-end network transit
will complete within a predictable (worst-case) time is required to guarantee
safety for humans and property. Network Calculus [1] is a well-known theory
that uses min-plus and max-plus algebra to infer deterministic worst-case
bounds on the delay and backlog of network traﬃc. It represents application
traﬃc as a function of time, and network elements (e.g., regulators, sched-
ulers, links) as operators that modify said functions. Given bounds on the
input of a traﬃc ﬂow (e.g., as enforced by a traﬃc shaper at the entrance of
a network) and knowledge of minimum service given to that ﬂow at network

Preprint submitted to Software Impacts

May 24, 2022

 
 
 
 
 
 
elements (e.g., as enforced by possibly diﬀerent schedulers at every hop), NC
allows one to compute the maximum delay that traﬃc from that ﬂow will
undergo, under any possible scenario.

Algebraically speaking, NC relies on few basic operations, such as mini-
mum, min-plus convolution and sub-additive closure, which can be composed
in arbitrary sequences or nested into one another. However, in less-than-
trivial cases, pen-and-paper computation of NC expression is not viable, and
automated computation of the relevant performance measures (e.g., a max-
imum delay for a ﬂow traversing a multi-hop network) is instead required.
Deﬁning eﬃcient computational representations for functions of time and
algorithms implementing NC operators thereupon is by no means a simple
task. Book [2] discusses the above issue at length, identifying Ultimately
Pseudo-Periodic (UPP) functions as the most general class closed with re-
spect to NC operators. These are piecewise-aﬃne functions, that have an
initial ”transient” part, followed by a ”period” which is repeated an inﬁnite
amount of times. Some NC operators, such as min-plus convolution, have a
superquadratic complexity with respect to the number of linear pieces of the
operands. Others, such as the sub-additive closure, are exponential. This
holds for both the number of elementary operations involved and the number
of linear pieces of the result, and implies that chaining a number of NC oper-
ators may yield expressions that – while visually and algebraically neat – are
algorithmically unfeasible, e.g., take days to compute, or may exhaust the
hardware resources and not compute at all [3]. This constrains – sometimes
severely – the practical uses of NC analysis, and calls for eﬃcient software
libraries that implement NC operations.

To the best of our knowledge, there are no public, open-source libraries
that implement NC operators working on UPP curves. By ”library” we mean
a set of implementations of min- and max-plus algebra operations, providing
ease of constructing and manipulating curves, and ways to specialize algo-
rithms for improved eﬃciency. The two existing libraries that can handle
UPP curves are the RTC Toolbox [4] and the RTaW-Pegase library [5]. The
former is a publicly available Java library, whose source code is not available.
Thus, one cannot improve on its bugs (e.g.
it sometimes cycles inﬁnitely
without any discernible cause) or lack of features, such as the lack of sub-
additive closure or of a function to ﬁnd the intersection between two curves
(which is essential to speed up several algorithms). RTaW-Pegase is propri-
etary, and cannot be used for benchmarking purposes. An online interpreter
is freely available to try its functionalities [6], but its use is limited by the
browser interface and license. To the best of our knowledge, the COINC
library [7] is no longer available. We remark that there are several common
situations where UPP curves arise spontaneously: work [8] shows that this is

2

the case whenever packetization and ﬁnite transmission speeds are factored
in. Moreover, ﬂow-controlled networks [3], currently being envisaged for data
centers, have UPP service curves, and so do wormhole-routing networks [9]
used in systems architectures.

There are, instead, several NC network analysis tools, i.e., software pack-
ages that implement methods of analysis of particular networks. These often
implement their own versions of min/max-plus algebra operators, often re-
stricted to the type of application network they target. A review of their
capabilities is reported in [10]. For instance, DEBORAH [11] analyzes FIFO
tandems of rate-latency curves traversed by leaky-bucket-shaped ﬂows. As
such, it only implements min-plus convolution and subtraction of pseudo-
aﬃne curves, both of which are algorithmically trivial. NC-TANDEM-TIGHT
[12] analyzes FIFO tandems by modeling their worst-case delay computation
as a linear programming problem (hence implicitly ruling out generic UPP
curves, which would yield non-convex programs instead). The DiscoDNC
tool [13] is limited to concave/convex piecewise linear curves, for which NC
operations are considerably simpler. Unfortunately, none of these tools pro-
vide reusable, general-purpose NC operations.

In this work, we ﬁll the above gap by releasing Nancy, an open-source NC
library released under the MIT licence. Nancy is coded in C#, consists of
more than 32k LoC, and is natively parallel. This means that it can exploit
multiple cores when available. Most of the NC operations on UPP curves en-
tail comparing linear segments and/or taking minima or maxima, and these
operations are easily parallelizable. This allows it to reap a considerable
speedup over a single-thread implementation. Furthermore, it implements
smart algorithms for NC operators working on particular sub-classes of UPP
functions (e.g., sub-additive ones), as well as for minimizing the represen-
tation of functions, which concur to abate the computation times by orders
of magnitude, as shown in [3]. Nancy can be used to implement existing
methods of analysis (e.g., Total Flow Analysis or Single Flow Analysis, [14])
used in other tools, without the restrictive hypotheses on the type of input
curves. Moreover, it can be exploited to devise new methods of analysis, pos-
sibly for types of networks that were considered computationally untractable
[3]. Last, but not least, it is designed so that a NC researcher will ﬁnd it
very easy to translate pen-and-paper computations to code: the names used
for objects are those which are widespread in the research community, and
the syntax is very intuitive.

The Nancy library is expected to be useful to researchers in both academia
and industry that face worst-case analysis problems, such as those working
in avionics, embedded systems, computer networks at large, and to help
system engineers in performance-oriented design. In the rest of the paper,

3

(a) f

(b) Rf

Figure 1: Example of ultimately pseudo-periodic piecewise aﬃne function f and its rep-
resentation Rf , taken from [3].

we describe the software design and functionalities, we provide examples of
how it works, and we discuss the impact of the above library.

2. Software description

A functionin NC often represents the amount of data observed at a net-
work element up to time t. Accordingly, we will often refer to its abscissa as
”time” and to its ordinate as ”data”. The Nancy library provides rich classes
that allow one to model, manipulate and run computations with piecewise
aﬃne UPP functions. The UPP property states that:

f (t + k · d) = f (t) + k · c∀ | t ≥ T, ∀k ∈ N

(1)

The above implies that, in order to compute f (t) for any t ≥ 0 we only
need to store its values in [0, T + d[ and the three parameters T , d and c.
This is visualized in Figure 1. The left plot depicts a function whose transient
part (up to T ) consists of two segments, and whose period (repeated twice)
consists of two segments too.

We represent this in code with the class Curve, which is composed of a
BaseSequence and the values PseudoPeriodStart (T ), PseudoPeriodLength
(d) and PseudoPeriodHeight (c).

The BaseSequence is of type Sequence, which models a piecewise aﬃne
function in a limited domain, usually left-closed and right-open [a, b[. A
Sequence is composed of Elements. An Element is an abstract class extended
by Point (a single time-value pair) and Segment (deﬁned in an open interval
]a, b[). This allows us to model non-continuous UPP curves as well. The right
plot of Figure 1 shows the transient part consisting of four elements, and a

4

TdctimedataTdctimedataperiod consisting of four elements. Quadruple {Rf , T, d, c} is the information
required to represent the above function in code.

The numeric type used throughout the library is Rational, which repre-
sents numbers in Q ∪ {+∞, −∞}. This allows us to perform computations
without any approximations (unlike what happens when using the double
type). To avoid overﬂow issues, we use BigInteger, although we support using
long instead for better performance, using a compile ﬂag.

These types are immutable, i.e. they cannot be modiﬁed after construc-
tion, and methods will instead create new objects to return. This has a
twofold advantage: on one hand, safety of use – an object will never change
properties unless it is reassigned explicitly. On the other hand, it favors paral-
lelization, since all computations are independent and can be safely executed
concurrently.

Many min- and max-plus operators are implemented as methods of these
classes, and are closed, i.e. they return objects of the same class they belong
to – in fact, they compute the bounded UPP representation of the result.
This implies that they can be chained, allowing for computation of complex
NC expressions. The main operators implemented are [2]:

• Minimum and Maximum;

• Addition and Subtraction. The latter can compute both A(t) − B(t)

and [A(t) − B(t)]+ = max{A(t) − B(t), 0} (default);

• (min−plus) Convolution and Deconvolution;

• Vertical - and HorizontalDeviation;

• MaxPlusConvolution and MaxPlusDeconvolution;

• Lower- and UpperPseudoInverse;

• Sub- and SuperAdditiveClosure;

• Composition, i.e. h(t) = f (g(t))1.

We also implement many utility methods and properties for common

manipulations and checks, such as:

• Sampling a curve at or ”near” a time with ValueAt, LeftLimitAt and

RightLimitAt;

1To the best of our knowledge, this operation has not been formally described so far in

the context of UPP curves. It is used, for instance, in [15].

5

• Properties, such as IsContinuous, IsNonDecreasing, IsConcave, IsSubAdditive,

etc. ;

• Shift along the time axis (DelayBy, AnticipateBy) and data axis ( VerticalShift );

• Restriction of a Curve to a ﬁnite time interval, with the Cut operator.

As discussed in [3], the representation of the result of the above oper-
ations is often (unavoidably) much larger than necessary – i.e., it includes
many more segments than required. This may lead to severe memory/speed
ineﬃciency, especially with chained operations (recall that NC operators of-
ten involve algorithms that are superlinear in the number of segments). The
Nancy library implements an eﬃcient post-hoc representation minimization
algorithm, run by default in all operands before returning the result, which
solves this issue.

Moreover, we exploit the high parallelizability of the above operators

using PLINQ. The Nancy library will parallelize the following:

• aggregate operators, such as the aggregate convolution of a large set of

curves;

• large sets of independent tasks. For instance, convolution involves com-
putation of the lower envelope of a set of Elements over a time domain.
Elements are ﬁrst grouped in (time) buckets according to their interval
of deﬁnition. Then, per-bucket lower-envelopes are computed indepen-
dently in parallel.

Lastly, many methods of the Curve class are deﬁned as virtual, so that
its subclasses can provide more eﬃcient algorithms. For instance, the con-
volution of ConcaveCurves is replaced with their minimum, which is less
complex. This makes the library easily extensible to exploit existing – or yet-
to-be-found – mathematical properties. For instance, specialized algorithms
for SubAdditiveCurves have been implemented, which are considerably more
eﬃcient [3].

As an example of the above, we report in Table 1 the time it takes to
compute the convolution between two sub-additive curves, using both the
standard algorithm and the optimized one in [3], in both a sequential and a
parallel setting. We run the above computations on a laptop computer (i7-
10750H, 32 GB RAM). We can cleralry see that the mathematical properties
described in [3] reduce the computation time by orders of magnitude. This
highlights that the ﬂexibility of the type system implemented in Nancy is
a great beneﬁt for future improvements. On the other hand, we observe
that parallelization brings considerable beneﬁts even for the unoptimized

6

Sequential

Parallelized

Standard
Q1: 20512.67 ms
Q2: 20569.76 ms
Q3: 20733.97 ms
Q1: 5860.67 ms
Q2: 6030.53 ms
Q3: 7657.40 ms

Optimized
Q1: 0.16 ms
Q2: 0.17 ms
Q3: 0.64 ms
Q1: 0.49 ms
Q2: 0.52 ms
Q3: 2.22 ms

Table 1: Performance comparison of β416,835 + 313 ⊗ β552,571 + 970, using parallelization
and optimized algorithms from [3]. Results are reported for each case as 25th percentile
(Q1), median (Q2) and 75th percentile (Q3) over 10 independent runs.

computation. This can be generalized to cases where optimized mathematical
properties are not available or not enough (many example of which can be
found in [3]). However, trying to parallelize the optimized algorithm does not
yield any beneﬁts: this is to be expected, as the computation time is already
under 1 ms, thus the overhead required by parallelization is higher than the
time saved. The library allows for ﬁne tuning of the algorithms used via the
settings parameter, which can be used to avoid sub-optimal settings, such
as misusing parallelization as in the above case.

3. Illustrative examples

In this section we show how the Nancy library can be used to easily build
curves and compute NC expressions. These examples are provided in the
GitHub repository as .NET Interactive Notebooks, were we use XPlot.Plotly
to visualize the computed curves, as shown in the ﬁgures below. Our aim here
is to show that the library syntax, which is rather intuitive, closely matches
NC algebra, making it very easy for a practitioner to compute (and possibly
plot) the results of its expressions.

The ﬁrst example in Figure 2 shows how to construct a generic Curve,
providing the limited Sequence description and the pseudo-period parame-
ters. The library also provides simpliﬁed constructors for common types of
curves, as shown in Figure 3.

We can then use such curves to compute more complex curve expressions,

or delay bounds, as shown in the example of Figure 4 (from [2, p. 121]).

We now show two examples of more complex computations taken from
the NC literature. In Figure 5 we show the computation of a residual service
curve for a ﬂow in a FIFO aggregate, whose expression is ([1, Ch. 6]):

βθ = [β − α ⊗ δθ]+ ∧ δθ,

7

(a) Code example using the generic constructor.

(b) Plot of the resulting curve.

Figure 2: Constructing a Curve using the generic constructor.

8

(a) Code example using simpliﬁed constructors.

(b) Plot of the resulting curves.

Figure 3: Constructing curves using simpliﬁed constructors.

9

(a) Code example for delay bound of non-trivial curves.

(b) Plot of the two curves. The maximum horizontal deviation is equal to d((2, 2), (4, 2)) =
2.

Figure 4: Constructing non-trivial curves and computing the delay bound as the maximum
horizontal deviation.

10

(a) Code example for the residual service curve.

(b) Plot of the resulting residual service curve.

Figure 5: Computing a residual service curve for a ﬂow in a FIFO aggregate.

where β is the aggregate service curve, α is the arrival curve of the cross-ﬂow,
δx is a right-shift by x and θ ≥ 0 is a time parameter.

Our last example is based on the recent work in [15, Th. 1], which com-
putes a strict service curve for Interleaved Weighted Round Robin (IWRR)
through multiple steps. In Figure 6, we implement this computation using
the parameters in [15, Fig. 3].

4. Impact

Despite being 30 years old, Network Calculus is still a ﬂowering ﬁeld of
research. A search on Scopus reports 758 scientiﬁc papers published in the
last 10 years (80 in 2021 only) where ”Network Calculus” appears in the
title, abstract or keywords. Research groups working on it exist in both

11

(a) Code example for IWRR’s strict service curve. The code to compute the intermediate
parameters is collapsed for the sake of conciseness.

12

(b) Plot of the resulting service curve.

Figure 6: Computing IWRR’s strict service curve.

the academia (at least in Europe, US, Canada, China, India, Brazil) and
the industry (components, avionics, systems). It is in particular industrial
interest that has sparked a renewed attention in NC in the last few years,
with the advent of new standards (e.g., Time-Sensitive Networks) and new
scenarios and opportunities (e.g., the possibility of running real-time control
algorithms of physical objects from the Cloud or the emergence of Digital
Twins). The Nancy library presented in this paper can be used by all the
above actors to address their research needs. It has already been used in re-
search projects (namely, a joint project between Arm Ltd and the University
of Pisa), as well as to write scientiﬁc papers [3].

5. Conclusions

This paper has presented Nancy, a C# library for Network Calculus op-
erations, written for NC researchers. One of the features provided by the
Nancy library is the attention to computational eﬃciency. As already dis-
cussed, NC is widely believed to be computationally hard, especially when
generic UPP curves are concerned. This has severely limited its applicabil-
ity to practical problems so far. Quite often, researchers have resorted to
pessimistic bounding techniques in order to obtain computable results, or
have been forced to limit the scope of their analysis to few network nodes.
Nancy tackles the problem of computational eﬃciency in several concurrent
ways. The ﬁrst one is inheritance: while algorithms for UPP curves at
large are known, research is currently discovering subclasses of UPP curves
whose properties allow more eﬃcient algorithms. One such examples are sub-
additive curves, discussed in [3], where the cost of convolution can be abated
by orders of magnitude. The second one is built-in optimization of the curve
data structures. It is shown in [3] that NC operations yield results whose
UPP representation is redundant. Optimizing that representation ex-post
comes at negligible cost, and may save orders of magnitude of computations
(besides memory occupancy, which often becomes a problem itself). The
third one is native parallel implementation, which harvests all the under-
lying computational power, distributing both NC operations and sub-tasks
thereof.

6. Declaration of Competing Interest

The authors declare that they have no known competing ﬁnancial inter-
ests or personal relationships that could have appeared to inﬂuence the work
reported in this paper.

13

Acknowledgements

This work was supported in part by the Italian Ministry of Education and
Research (MIUR) in the framework of the CrossLab project (Departments
of Excellence), and by the University of Pisa, through grant “Analisi di reti
complesse: dalla teoria alle applicazioni” - PRA 2020. We are grateful to
ARM Ltd., and in particular to Dr. Matteo Andreozzi, for their help in
publishing this software.

References

References

[1] J.-Y. Le Boudec, P. Thiran, Network calculus: a theory of deterministic
queuing systems for the internet, Vol. 2050, Springer Science & Business
Media, 2001.

[2] A. Bouillard, M. Boyer, E. Le Corronc, Deterministic Network Calculus:

From Theory to Practical Implementation, Wiley, 2018.

[3] R. Zippo, G. Stea, Computationally eﬃcient worst-case analysis of
ﬂow-controlled networks with network calculus, CoRR abs/2203.02497
(2022). arXiv:2203.02497.
URL https://arxiv.org/abs/2203.02497

[4] E. Wandeler, L. Thiele, Real-Time Calculus (RTC) Toolbox,

http://www.mpa.ethz.ch/Rtctoolbox.
URL http://www.mpa.ethz.ch/Rtctoolbox

[5] R.

at Work,

Rtaw-pegase min,+ library,

https://www.

realtimeatwork.com/rtaw-pegase-libraries/.

[6] R. at Work, Online min-plus interpreter for network calculus, http:

//realtimeatwork.com/minplus-playground.

[7] A. Bouillard, B. Cottenceau, B. Gaujal, L. Hardouin, S. Lagrange,
M. Lhommeau, Coinc library: A toolbox for the network calculus: In-
vited presentation, extended abstract, in: Proceedings of the Fourth
International ICST Conference on Performance Evaluation Methodolo-
gies and Tools, VALUETOOLS ’09, ICST (Institute for Computer Sci-
ences, Social-Informatics and Telecommunications Engineering), Brus-
sels, BEL, 2009.

14

[8] M. Boyer, H. Daigmorte, Improved service curve for element with known
transmission rate, IEEE Networking Letters (2022) 1–1doi:10.1109/
LNET.2022.3150649.

[9] Y. Qian, Z. Lu, W. Dou, Analysis of worst-case delay bounds for on-
chip packet-switching networks, IEEE Transactions on Computer-Aided
Design of Integrated Circuits and Systems 29 (5) (2010) 802–815.

[10] B. Zhou, I. Howenstine, S. Limprapaipong, L. Cheng, A survey on net-
work calculus tools for network infrastructure in real-time systems, IEEE
Access 8 (2020) 223588–223605. doi:10.1109/ACCESS.2020.3043600.

[11] L. Bisti, L. Lenzini, E. Mingozzi, G. Stea, Deborah: A tool for worst-case
analysis of FIFO tandems, in: International Symposium On Leveraging
Applications of Formal Methods, Veriﬁcation and Validation, Springer,
2010, pp. 152–168.

[12] A. Bouillard, E. Thierry, Tight performance bounds in the worst-case
analysis of feed-forward networks, Discret. Event Dyn. Syst. 26 (3)
(2016) 383–411. doi:10.1007/s10626-015-0213-2.
URL https://doi.org/10.1007/s10626-015-0213-2

[13] S. Bondorf, J. B. Schmitt, The DiscoDNC v2 – a comprehensive tool for
deterministic network calculus, in: Proc. of the International Conference
on Performance Evaluation Methodologies and Tools, ValueTools ’14,
2014, pp. 44–49.
URL https://dl.acm.org/citation.cfm?id=2747659

[14] M. Fidler, Survey of deterministic and stochastic service curve models
in the network calculus, IEEE Communications Surveys Tutorials 12 (1)
(2010) 59–86. doi:10.1109/SURV.2010.020110.00019.

[15] S. M. Tabatabaee, J. Y. Le Boudec, M. Boyer, Interleaved Weighted
Round-Robin: A Network Calculus Analysis, IEICE Transactions on
Communications 104 (12) (2021) 1479–1493. arXiv:2003.08372, doi:
10.1587/transcom.2021ITI0001.

Required Metadata

Current code version

Current executable software version

15

C3

C4
C5
C6

C7

C8

C9

Nr.

S1
S2

S3

S4
S5

S6

S7

S8

Nr. Code metadata description
C1
C2

link to Reproducible

Current code version
Permanent link to code/repository
used for this code version
Permanent
Capsule
Legal Code License
Code versioning system used
Software code languages, tools, and
services used
Compilation requirements, operat-
ing environments & dependencies
If available Link to developer docu-
mentation/manual
Support email for questions

Please ﬁll in this column
1.0.3
https : //github.com/rzippo/nancy

MIT
git
C# 10, .NET 6.0

.NET 6.0; Linux, MacOS, Windows

https : //nancy.unipi.it/

giovanni.stea@unipi.it,
faele.zippo@phd.unipi.it

raf-

Table 2: Code metadata (mandatory)

software meta-

link to Reproducible

(Executable)
data description
Current software version
Permanent link to executables of
this version
Permanent
Capsule
Legal Software License
Computing
Systems
Installation requirements & depen-
dencies
If available, link to user manual - if
formally published include a refer-
ence to the publication in the refer-
ence list
Support email for questions

platforms/Operating

Please ﬁll in this column

1.0.3
https
//www.nuget.org/packages/U nipi.N ancy/1.0.3

:

MIT
Linux, MacOS, Windows

.NET 6.0

https : //nancy.unipi.it/

giovanni.stea@unipi.it,
faele.zippo@phd.unipi.it

raf-

Table 3: Software metadata (optional)

16

