Astronomy & Astrophysics manuscript no. main
June 30, 2022

©ESO 2022

2
2
0
2

n
u
J

9
2

]

M

I
.
h
p
-
o
r
t
s
a
[

1
v
9
8
6
4
1
.
6
0
2
2
:
v
i
X
r
a

ShapePipe: A modular weak-lensing processing and analysis
pipeline

S. Farrens1 (cid:63), A. Guinot2, M. Kilbinger1, T. Liaudat1, L. Baumont1, X. Jimenez3, A. Peel4, A. Pujol1, M.
Schmitz5, J.-L. Starck1, and A. Z. Vitorelli1

1 AIM, CEA, CNRS, Université Paris-Saclay, Université Paris Diderot, Sorbonne Paris Cité, F-91191 Gif-sur-Yvette,

France

2 Université de Paris, CNRS, Astroparticule et Cosmologie, F-75013 Paris, France
3 Université Paris-Saclay, CNRS, ENS Paris-Saclay, Centre Borelli, 91190, Gif-sur-Yvette, France
4 Institute of Physics, Laboratory of Astrophysics, Ecole Polytechnique Fédérale de Lausanne (EPFL), Observatoire

de Sauverny, 1290 Versoix, Switzerland

5 Université Côte d’Azur, Observatoire de la Côte d’Azur, CNRS, Laboratoire Lagrange, Bd de l’Observatoire, CS

34229, 06304 Nice Cedex 4, France

ABSTRACT

We present the ﬁrst public release of ShapePipe, an open-source and modular weak-lensing measurement, analysis,
and validation pipeline written in Python. We describe the design of the software and justify the choices made. We
provide a brief description of all the modules currently available and summarise how the pipeline has been applied
to real Ultraviolet Near-Infrared Optical Northern Survey data. Finally, we mention plans for future applications and
development. The code and accompanying documentation are publicly available on GitHub.

Key words. Gravitational lensing: weak – Methods: data analysis

1. Introduction

Weak gravitational lensing, the apparent distortion of the
shapes of galaxies caused by the bending of light by mass
along the line of sight, has been demonstrated to be a
powerful probe of cosmology (Kilbinger 2015; Mandel-
baum 2018). However, numerous steps are required in or-
der to go from raw survey data to competitive constraints
on cosmological parameters. Recent surveys, such as the
Canada-France-Hawai’i Telescope Legacy Survey (Erben
et al. 2013), the Hyper Suprime Cam (HSC) survey (Man-
delbaum et al. 2018), the Kilo-Degree Survey (Kuijken et al.
2019), and the Dark Energy Survey (DES; Gatti et al.
2021), have carried out detailed weak-lensing analyses. Up-
coming surveys, such as Euclid (Laureijs et al. 2011) and
the Vera C. Rubin Observatory Legacy Survey of Space and
Time (LSST; Ivezić et al. 2019), will also aim to tighten
cosmological constraints with weak lensing. It is clear that
weak lensing remains at the forefront of cosmological stud-
ies, and hence tools for weak-lensing analysis will remain in
demand for years to come.

There are various pipelines available for simulating
weak-lensing data (e.g. Kiessling et al. 2011; Harnois-
Déraps & van Waerbeke 2015; Petri 2016). Various data
processing pipelines also exist (e.g. Bosch et al. 2018), but
these are generally very survey-speciﬁc and often private.
We believe this leaves an ample gap in the market for an
open-source end-to-end weak-lensing pipeline.

We present the ﬁrst public release of ShapePipe, an
open-source and modular weak-lensing measurement, anal-

(cid:63) email: samuel.farrens@cea.fr

ysis, and validation pipeline written in Python. An earlier
version of this pipeline was applied to real survey data in
Guinot et al. (2022) with promising results.

The current version of ShapePipe starts with reduced
survey images and ends by providing shear measurements
along with all of the information required for calibration.
It includes a novel point spread function (PSF) modelling
technique and various PSF validation tools. The code has
been designed to facilitate the inclusion of new or improved
processing steps to adapt to advances made in the coming
years.

This paper is structured as follows. In the following sec-
tion we describe the design of the software along with eﬀorts
we have made to ensure reproducibility and to encourage
external contributions. In Sect. 3 we describe the various
processing elements that comprise the current version of
the pipeline. In Sect. 4 we summarise how the pipeline has
been implemented thus far and what we have in mind with
regards to future applications. Section 5 mentions our plans
for future releases, and we end with some concluding re-
marks.

2. Software design

2.1. Modular architecture

A key feature dictating the design of ShapePipe was ﬂexi-
bility. Weak gravitational lensing is a rapidly evolving ﬁeld,
with new analysis techniques and tools emerging regularly.
A hard-coded weak-lensing pipeline would therefore have
extremely limited applications and would become quickly
outdated. It was therefore essential for us that a new

Article number, page 1 of 7

 
 
 
 
 
 
A&A proofs: manuscript no. main

pipeline be able to adapt in a way that was both main-
tainable and allowed the easy inclusion of new tools.

The ShapePipe package comprises two principle sub-
packages: pipeline and modules. The pipeline sub-
package manages job handling, logging, conﬁguration, ar-
gument parsing, dependency handling, and the reading and
writing of Flexible Image Transport System (FITS) ﬁles.
This can eﬀectively be seen as the core of ShapePipe. The
modules sub-package consists of a series of what we refer to
as ‘pipeline modules’1, which handle all of the data process-
ing and analysis steps that make up a weak-lensing pipeline
(see Sect. 3).

Pipeline modules are simply deﬁned by writing a ‘mod-
ule runner’, which is a standardised ShapePipe script that
deﬁnes what a given module should do. This could be as
simple as calling an executable binary with some options
or writing a full implementation in Python. In either case,
once a module runner is in place, ShapePipe can call this
module in conjunction with any other. Inputs can be auto-
matically passed or taken from modules, making it possible
to chain a series of operations with relative ease.

This architecture will allow us to quickly add new mod-
ules to ShapePipe as new tools come onto the market with-
out disrupting the existing pipeline structure. It also means
we can more easily rearrange or adapt the existing tools to
new datasets.

ShapePipe pipelines are launched via a command line
execution script. Signiﬁcant eﬀort has been put into mak-
ing this script user-friendly and ﬂexible and providing use-
ful and verbose logging information in order to track the
success or failure of any given process.

2.2. Parallel computation

ShapePipe was developed with the assumption that most
weak-lensing survey data can be divided into tiles or
patches, each of which can be processed independently.
Therefore, ShapePipe distributes jobs in an embarrass-
ingly parallel way using Joblib (Joblib Development Team
2020) for multi-core machines, and MPI for Python
(Dalcin et al. 2005, 2008, 2011) on large computer clusters.
This maximises the amount of data that can be processed
simultaneously with the number of computer cores avail-
able to the user without having to parallelise each of the
processing steps independently. Modules can also be con-
ﬁgured to run in serial mode if the associated task requires
access to all of the data, for example, for recombining tiles
or patches.

2.3. Reproducibility

The ability to reproduce scientiﬁc results is a growing and
continuing concern within academia. This is a particu-
larly challenging problem in the context of a weak-lensing
pipeline as there are numerous data treatment and pro-
cessing steps, often involving various third-party tools that
evolve over time. We have attempted to mitigate these
problems as best as possible.

Firstly, we provide a dedicated ShapePipe development
and processing environment. This consists of a Conda2 en-
vironment where all Python packages, compilation tools

(such as CMake), and other third-party software pack-
ages (see Appendix A) have ﬁxed versions for a given
ShapePipe release. This also extends to all of the modules
that make up the weak-lensing pipeline (see Appendix B).
This not only ensures consistency across diﬀerent platforms
on which ShapePipe is installed, but also isolates the tools
used for processing from those already installed on a given
platform (e.g. a diﬀerent version of Python).

Secondly, we have built in an extensive logging system
that tracks the versions of all the packages and modules
used for a given run of ShapePipe, along with all the con-
ﬁguration options used. The logging system catches and
reports all errors raised by each module run.

These measures should allow users to reprocess a given
dataset in virtually identical conditions. However, we will
continue to make reproducibility a priority for future re-
leases of ShapePipe.

2.4. Open-source development

ShapePipe is a fully open-source project. All of the code
is publicly available on GitHub3 along with extensive docu-
mentation4. We provide example conﬁguration ﬁles demon-
strating how to use the various tools in the context of
our application use cases (see Sect. 4), and we addition-
ally provide an extensive step-by-step tutorial for running
ShapePipe for processing Ultraviolet Near-Infrared Opti-
cal Northern Survey (UNIONS) data (see Sect. 4.1).

The GitHub repository is conﬁgured with template is-
sues and pull requests, and includes detailed contribution
guidelines. These features are intended to encourage and
facilitate contributions from the wider community. Finally,
we have also included a comprehensive code of conduct to
ensure that contributors can interact in a safe and support-
ive environment.

3. Weak-lensing pipeline
In this section we brieﬂy describe the primary pipeline
modules that are included in the ﬁrst public release of
ShapePipe in the context of the weak-lensing processing
steps they implement. A full list of the modules currently
available is provided in Appendix B.

3.1. Masking

The current masking procedure in ShapePipe takes in-
spiration from the THELI pipeline (Erben et al. 2005;
Schirmer 2013) to mask out bright stars, diﬀraction spikes,
Messier objects, and border regions. The mask module uses
the cdsclient software to download a catalogue of bright
reference stars from version 2.2 of the Guide Star Catalog
(GSC; Space Telescope Science Institute & Osservatorio As-
tronomico di Torino 2001). Alternatively, a star catalogue
available on disk (with the same format as the GSC) can
also be used, which is particularly relevant for cluster com-
pute nodes that do not allow internet access.

The mask itself is generated using WeightWatcher
(Marmo & Bertin 2008). An example of a mask produced
using this module on a patch of UNIONS data is shown in
Fig. 1.

1 Not to be confused with Python modules.
2 https://docs.conda.io/

3 https://github.com/CosmoStat/shapepipe
4 https://CosmoStat.github.io/shapepipe/

Article number, page 2 of 7

S. Farrens et al.: ShapePipe

individual CCDs. As with PSFEx, there is a ShapePipe
module for interpolating MCCD PSF models to galaxy po-
sitions. ShapePipe allows either or both methods to be run
and subsequently used for the galaxy shape measurement.

3.5. PSF validation tools

ShapePipe includes a variety of tools, such as plots of the
PSF residuals and ρ-statistics (Rowe 2010; Jarvis et al.
2016), for validating the quality of the PSF model. See
Guinot et al. (2022) for an example of how these PSF vali-
dation tools have be used for the analysis of UNIONS data.

3.6. Shape measurement

Galaxy shape measurement is currently performed using
NGMIX (Sheldon 2015), which has been extensively ap-
plied and tested on DES data (Jarvis et al. 2016; Zuntz
et al. 2018; Gatti et al. 2021). At present, NGMIX is imple-
mented in ShapePipe such that galaxy shapes are obtained
from a ﬁt of a Gaussian proﬁle from Galsim (Rowe et al.
2015). The NGMIX module can be run with either of the
PSF modelling methods described in Sect. 3.4. Additional
NGMIX features and alternative shape measurement tech-
niques are likely to be made available in future releases of
ShapePipe.

3.7. Calibration

The primary shear calibration method currently available
in ShapePipe is the so-called metacalibration framework
(Huﬀ & Mandelbaum 2017; Sheldon & Huﬀ 2017). Metacal-
ibration is also implemented via the NGMIX module. This
module does not directly provide calibrated shear measure-
ments, but does provide all of the calibration images needed
to calculate the shear response.

3.8. Miscellaneous

In addition to the essential and generic weak-lensing
pipeline processing tools described in the preceding sub-
sections, ShapePipe includes various bookkeeping and ﬁle
management tools. Some of these tools have been designed
speciﬁcally for handling UNIONS data, but could be ex-
tremely useful for anyone wishing to reprocess these data.
For example, ShapePipe includes a module for matching
objects detected by the pipeline with external catalogues
and the possibility to generate random catalogues.

4. Applications

4.1. UNIONS

The primary focus and initial motivation for the develop-
ment of ShapePipe has been the analysis of UNIONS data.
UNIONS is a collaboration between the Canada-France
Imaging Survey (CFIS), Pan-STARRS, and the Wide Imag-
ing with Subaru HSC of the Euclid Sky. One of the main
objectives of UNIONS is to provide ground-based multi-
band imaging data (u, g, r, i, and z bands collectively; see
Ibata et al. 2017a for details on the u band) of the north-
ern sky for Euclid. High quality ground-based photometry
is fundamental for accurate photometric redshift estima-
tion and is therefore critical to the success of the Euclid

Article number, page 3 of 7

Fig. 1. Example of a mask produced by the ShapePipe mask
module on a patch of UNIONS data. The colour bar shows the
integer mask pixel values.

3.2. Source detection

The identiﬁcation of stars and galaxies in the survey images
is performed using the community standard SExtractor
(Bertin & Arnouts 1996). ShapePipe allows modules such
as SExtractor to be run multiple times with diﬀerent
conﬁguration options, meaning that stars and galaxies can
be targeted in diﬀerent ways depending on the need. For
example, one run can be made to target a large sample
of galaxies for shape measurement, while another run can
target a sample of stars for modelling the PSF.

3.3. Source selection

The star and galaxy samples used for shape measurement
can be reﬁned using several ShapePipe modules. One mod-
ule implements the spread model method proposed by Desai
et al. (2012) and Mohr et al. (2012), which tries to deter-
mine if a given object is more point-like or rather more ex-
tended in comparison with the PSF. Another module, called
setools, can apply arbitrary cuts to the objects detected
by SExtractor. Figure 2 shows some example plots of
a reﬁned star sample obtained after running the setools
module in ShapePipe.

3.4. PSF model

ShapePipe includes two independent methods for mod-
elling the PSF of the survey. The ﬁrst method is the commu-
nity standard PSFEx (Bertin 2011), which was developed
to be used in conjunction with SExtractor. PSFEx pro-
duces independent models with polynomial variations of the
PSF for each charge-coupled device (CCD) in the ﬁeld and
each exposure. ShapePipe includes an additional module
for interpolating the PSFEx PSF model from the positions
of the star sample to the positions of the galaxy sample.

The second method is the multi-CCD (MCCD) ap-
proach of Liaudat et al. (2021). MCCD builds a model
of the PSF for the entire focal plane, capturing both varia-
tions that span several CCDs and those that are localised on

A&A proofs: manuscript no. main

Fig. 2. Example of a reﬁned star selection obtained with the setools module on a patch of UNIONS data. All of the plots
shown are generated automatically by ShapePipe. Top left: Stellar locus (orange points) in the size-magnitude plane. Top right:
Histogram of the magnitude of the objects. Bottom left: Size of objects in the ﬁeld. Bottom right: Magnitude of objects in the
ﬁeld.

mission. In addition to this, there are various ongoing sci-
entiﬁc studies with UNIONS data on stars and Milky Way
physics (Ibata et al. 2017b; Fantin et al. 2019, 2021; Thomas
et al. 2018, 2019b; Thanjavur et al. 2021), globular clusters
(Thomas et al. 2020; Jensen et al. 2021), dwarf galaxies
(Thomas et al. 2019a), galaxy evolution and mergers (Bick-
ley et al. 2021), clusters of galaxies (Roberts et al. 2022;
Spitzer 2021), high redshift galaxies and active galactic nu-
clei (Ellison et al. 2019), PSF modelling (Liaudat et al.
2021), and gravitational lensing (Guinot et al. 2022; Chan
et al. 2021; Savary et al. 2021).

Guinot et al. (2022) applied a preliminary version of
ShapePipe to 1 700 deg2 of CFIS r-band data, obtain-
ing shapes for around 40 million galaxies. The r band of
CFIS is particularly well suited to weak-lensing studies
given the average seeing of 0.65 and that it is complete
down to magnitude 24.5. Guinot et al. (2022) demonstrate
that ShapePipe is capable of processing a large fraction
of the sky (on multiple computing platforms) and achiev-
ing promising results. Each of the ∼ 6800 images of size
0.5 × 0.5deg2 was processed independently. The analysis of
an image was performed on a virtual machine (VM) on the

Article number, page 4 of 7

Canadian Advanced Network for Astronomical Research5.
Where possible, individual processing steps were run in par-
allel on eight cores of the VM. The processing time of one
image was around 4 hours. On average, 200 VMs were used
in parallel, resulting in a total wall-clock run time of two
weeks. The ﬁnal shape catalogue was around 120 Gb in size.
Despite the limitations of working with a single photometric
band, Guinot et al. (2022) found: no B-mode signal, a good
correlation between E-mode peaks and Planck clusters, and
an overall low level of systematic bias.

Work is currently ongoing to process a larger CFIS area
(3 500 deg2) with a more recent version of ShapePipe (Kil-
binger et al., in prep). This work takes advantage of some of
the state-of-the-art features available in ShapePipe, such
as full focal plane modelling of the PSF using MCCD.
The resulting catalogue will contain around 100 million
galaxy shapes and will constitute one of the largest weak-
lensing catalogues created to date. In addition to this,
several follow-up scientiﬁc studies are planned (some are
already underway) using ShapePipe-processed UNIONS

5 https://www.canfar.net/

S. Farrens et al.: ShapePipe

data, such as 3x2 point analysis, peak statistics (Ayçoberry
et al. 2022), and galaxy cluster lensing.

4.2. Other surveys

No concrete plans have been made at this stage for ap-
plying ShapePipe to other datasets. Despite designing the
architecture to be as ﬂexible as possible, signiﬁcant work
would still need to be carried out to appropriately tune all
of the processing steps to a diﬀerent survey. Large cosmo-
logical surveys such as the DES, Euclid, and the Vera C.
Rubin Observatory LSST already beneﬁt from dedicated
weak-lensing analysis pipelines highly tuned to the speciﬁc
needs of each survey. However, independent reprocessing of
some fraction of these datasets could be valuable for cross-
validation and comparison. Additionally, some smaller sur-
veys lack the workforce necessary to build a new weak-
lensing pipeline, or indeed to adapt an existing pipeline to
their data. Either or both of these use cases might be well
suited for future ShapePipe applications.

5. Future releases
We plan to provide regular patch and minor releases of
ShapePipe to ﬁx bugs and make general improvements to
ensure good maintenance of the code. We additionally plan
one major release on a roughly yearly basis in which de-
pendency versions will be updated and new or improved
processing steps included. Speciﬁc improvements and ad-
ditions that we currently have in mind include improved
masking (new tools and use of Gaia data), metadetection,
the handling of blended galaxies (see the preliminary work
of Farrens et al. 2022), and the full handling of multi-band
data.

6. Conclusions
In this paper we have presented the ﬁrst public release of
the open-source and modular weak-lensing measurement,
analysis, and validation pipeline ShapePipe. We have de-
scribed the objectives and design of the software. In partic-
ular, we have emphasised the ﬂexibility of the code architec-
ture, which was designed with the intention of facilitating
the inclusion of new processing steps or the improvement
of existing ones. This was done with the aim of keeping up
with advances made in the ﬁeld and the possibility of apply-
ing ShapePipe to diverse datasets. We have also mentioned
steps taken to ensure the reproducibility of results obtained
with ShapePipe.

We have provided a brief summary of the tools cur-
rently available for masking, source selection, PSF mod-
elling, PSF validation, shape measurement, and calibration.
We include links to more detailed documentation for each
of these pipeline modules along with examples of how to
use them in practice.

Finally, we have mentioned the applications of
ShapePipe to real UNIONS data that have been made
so far along with plans for future works. We plan to submit
follow-up papers in the coming years to inform the commu-
nity of the advances that have been made in the develop-
ment of ShapePipe and its applications.

de la Recherche Scientiﬁque. Based on observations obtained with
MegaPrime/MegaCam, a joint project of CFHT and CEA Saclay, at
the Canada-France-Hawaii Telescope (CFHT) which is operated by
the National Research Council (NRC) of Canada, the Institut Na-
tional des Science de l’Univers (INSU) of the Centre National de
la Recherche Scientiﬁque (CNRS) of France, and the University of
Hawaii. This research used the facilities of the Canadian Astronomy
Data Centre operated by the National Research Council of Canada
with the support of the Canadian Space Agency. This research is based
in part on data collected at Subaru Telescope, which is operated by
the National Astronomical Observatory of Japan. We are honored and
grateful for the opportunity of observing the Universe from Maunakea,
which has the cultural, historical and natural signiﬁcance in Hawaii.
Pan-STARRS is a project of the Institute for Astronomy of the Uni-
versity of Hawaii, and is supported by the NASA SSO Near Earth
Observation Program under grants 80NSSC18K0971, NNX14AM74G,
NNX12AR65G, NNX13AQ47G, NNX08AR22G, YORPD20_2-0014
and by the State of Hawaii. This work has made use of the CANDIDE
Cluster at the Institut d’Astrophysique de Paris and made possible
by grants from the PNCG, CNES, and the DIM-ACAV. This work
was supported in part by the Canadian Advanced Network for As-
tronomical Research (CANFAR) and Compute Canada facilities. We
gratefully acknowledge support from the CNRS/IN2P3 Computing
Center (Lyon - France) for providing computing and data-processing
resources. The authors wish to thank Jérôme Bobin, Jean-Charles
Cuillandre, Sebastien Fabbro, Joel Gehin, Stephen Gwyn, François
Lanusse, Alan McConnachie, Fred Maurice Ngolé Mboula, Erin Shel-
don, Isaac Spitzer and Florent Sureau for various contributions made
during the development of this package.

References

Astropy Collaboration, Price-Whelan, A. M., SipHocz, B. M., et al.

2018, aj, 156, 123

Astropy Collaboration, Robitaille, T. P., Tollerud, E. J., et al. 2013,

A&A, 558, A33

Ayçoberry, E., Ajani, V., Guinot, A., et al. 2022, arXiv e-prints,

arXiv:2204.06280

Bertin, E. 2011, in Astronomical Society of the Paciﬁc Conference
Series, Vol. 442, Astronomical Data Analysis Software and Systems
XX, ed. I. N. Evans, A. Accomazzi, D. J. Mink, & A. H. Rots, 435

Bertin, E. & Arnouts, S. 1996, A&AS, 117, 393
Bickley, R. W., Bottrell, C., Hani, M. H., et al. 2021, MNRAS, 504,

372

Bosch, J., Armstrong, R., Bickerton, S., et al. 2018, PASJ, 70, S5
Chan, J. e. a., Lemon, C., Courbin, F., et al. 2021, Submitted to A&A
Dalcin, L., Paz, R., & Storti, M. 2005, Journal of Parallel and Dis-

tributed Computing, 65, 1108

Dalcin, L., Paz, R., Storti, M., & D’Elía, J. 2008, Journal of Parallel

and Distributed Computing, 68, 655

Dalcin, L. D., Paz, R. R., Kler, P. A., & Cosimo, A. 2011, Advances
in Water Resources, 34, 1124 , new Computational Methods and
Software Tools

Desai, S., Armstrong, R., Mohr, J. J., et al. 2012, The Astrophysical

Journal, 757, 83

Ellison, S. L., Viswanathan, A., Patton, D. R., et al. 2019, MNRAS,

487, 2491

Erben, T., Hildebrandt, H., Miller, L., et al. 2013, MNRAS, 433, 2545
Erben, T., Schirmer, M., Dietrich, J. P., et al. 2005, Astronomische

Nachrichten, 326, 432

Fantin, N. J., Côté, P., McConnachie, A. W., et al. 2021, ApJ, 913,

30

Fantin, N. J., Côté, P., McConnachie, A. W., et al. 2019, ApJ, 887,

148

Farrens, S., Grigis, A., El Gueddari, L., et al. 2020, Astronomy and

Computing, 32, 100402

Farrens, S., Lacan, A., Guinot, A., & Vitorelli, A. Z. 2022, A&A, 657,

A98

Gatti, M., Sheldon, E., Amon, A., et al. 2021, MNRAS, 504, 4312
Guinot, A., Kilbinger, M., Farrens, S., et al. 2022, arXiv e-prints,

arXiv:2204.04798

Harnois-Déraps, J. & van Waerbeke, L. 2015, MNRAS, 450, 2857
Harris, C. R., Millman, K. J., van der Walt, S. J., et al. 2020, Nature,

Acknowledgements. This work is based on data obtained as part of
the Canada-France Imaging Survey, a CFHT large program of the Na-
tional Research Council of Canada and the French Centre National

585, 357

Huﬀ, E. & Mandelbaum, R. 2017, arXiv e-prints, arXiv:1702.02600
Hunter, J. D. 2007, Computing in Science & Engineering, 9, 90

Article number, page 5 of 7

A&A proofs: manuscript no. main

Ibata, R. A., McConnachie, A., Cuillandre, J.-C., et al. 2017a, ApJ,

848, 128

Ibata, R. A., McConnachie, A., Cuillandre, J.-C., et al. 2017b, ApJ,

848, 129

Ivezić, Ž., Kahn, S. M., Tyson, J. A., et al. 2019, ApJ, 873, 111
Jarvis, M., Bernstein, G., & Jain, B. 2004, MNRAS, 352, 338
Jarvis, M., Sheldon, E., Zuntz, J., et al. 2016, MNRAS, 460, 2245
Jensen, J., Thomas, G., McConnachie, A. W., et al. 2021, MNRAS,

507, 1923

Joblib Development Team. 2020, Joblib: running Python functions as

pipeline jobs

Kiessling, A., Heavens, A. F., Taylor, A. N., & Joachimi, B. 2011,

MNRAS, 414, 2235

Kilbinger, M. 2015, Reports on Progress in Physics, 78, 086901
Kuijken, K., Heymans, C., Dvornik, A., et al. 2019, Astronomy &

Astrophysics, 625, A2

Laureijs, R., Amiaux, J., Arduini, S., et al. 2011, arXiv e-prints,

arXiv:1110.3193

Liaudat, T., Bonnin, J., Starck, J. L., et al. 2021, A&A, 646, A27
Mandelbaum, R. 2018, ARA&A, 56, 393
Mandelbaum, R., Miyatake, H., Hamana, T., et al. 2018, PASJ, 70,

S25

Marmo, C. & Bertin, E. 2008, in Astronomical Society of the Paciﬁc
Conference Series, Vol. 394, Astronomical Data Analysis Software
and Systems XVII, ed. R. W. Argyle, P. S. Bunclark, & J. R. Lewis,
619

McKinney, W. 2010, in Proceedings of the 9th Python in Science
Conference, ed. Stéfan van der Walt & Jarrod Millman, 56 – 61
Mohr, J. J., Armstrong, R., Bertin, E., et al. 2012, Software and Cy-

berinfrastructure for Astronomy II

Petri, A. 2016, Astronomy and Computing, 17, 73
Roberts, I. D., Parker, L. C., Gwyn, S., et al. 2022, MNRAS, 509,

1342

Rowe, B. 2010, MNRAS, 404, 350
Rowe, B. T. P., Jarvis, M., Mandelbaum, R., et al. 2015, Astronomy

and Computing, 10, 121

Savary, E., Rojas, K., Maus, M., et al. 2021, Submitted to A&A
Schirmer, M. 2013, ApJS, 209, 21
Sheldon, E. 2015, NGMIX: Gaussian mixture models for 2D images,

Astrophysics Source Code Library

Sheldon, E. S. & Huﬀ, E. M. 2017, ApJ, 841, 24
Shupe, D. L., Laher, R. R., Storrie-Lombardi, L., et al. 2012, in Soci-
ety of Photo-Optical Instrumentation Engineers (SPIE) Conference
Series, Vol. 8451, Software and Cyberinfrastructure for Astronomy
II, ed. N. M. Radziwill & G. Chiozzi, 84511M

Space Telescope Science Institute & Osservatorio Astronomico di

Torino. 2001, VizieR Online Data Catalog
Spitzer, I. e. a. 2021, Submitted to MNRAS
Thanjavur, K., Ivezić, Ž., Allam, S. S., et al. 2021, MNRAS, 505, 5941
The Pandas Development Team. 2020, pandas-dev/pandas: Pandas
Thomas, G. F., Annau, N., McConnachie, A., et al. 2019a, ApJ, 886,

10

Thomas, G. F., Jensen, J., McConnachie, A., et al. 2020, ApJ, 902,

89

Thomas, G. F., Laporte, C. F. P., McConnachie, A. W., et al. 2019b,

MNRAS, 483, 3119

Thomas, G. F., McConnachie, A. W., Ibata, R. A., et al. 2018, MN-

RAS, 481, 5223

Zuntz, J., Sheldon, E., Samuroﬀ, S., et al. 2018, MNRAS, 481, 1149

Article number, page 6 of 7

Appendix A: Third-party software
third-party software packages used in
The principal
ShapePipe are shown in Table A.1. It should be noted
that we are currently using a GitHub fork of NGMIX6 for
technical reasons.

Where possible, we provide references to the papers
in which the software is described in detail. More infor-
mation concerning the cdsclient package is available at
the Strasbourg astronomical Data Center website7, and in-
formation on the sqlitedict package is available at the
GitHub repository8.

Table A.1. List of third-party software packages used in
ShapePipe.

Package name
Astropy

cdsclient
GalSim
Joblib

Matplotlib
MCCD
ModOpt
mpi4py

NGMIX
Numpy
Pandas

PSFEx
SExtractor
sip_tpv
sqlitedict
TreeCorr
WeightWatcher

Fixed version References
5.0

Astropy
et al. (2013, 2018)

Collaboration

3.84
2.2.5
1.1.0

3.5.1
1.2.1
1.6.0
3.1.3

1.3.6
≥1.20
1.4.1

3.21.1
2.25.0
1.1
2.0.0
4.2.6
1.12

Development

Rowe et al. (2015)
Joblib
Team (2020)
Hunter (2007)
Liaudat et al. (2021)
Farrens et al. (2020)
Dalcin et al. (2005, 2008,
2011)
Sheldon (2015)
Harris et al. (2020)
McKinney (2010); The
Pandas
Development
Team (2020)
Bertin (2011)
Bertin & Arnouts (1996)
Shupe et al. (2012)

Jarvis et al. (2004)
Marmo & Bertin (2008)

S. Farrens et al.: ShapePipe

Appendix B: ShapePipe modules
All of the modules currently available in ShapePipe that
make up the weak-lensing pipeline described in Sect. 3 are
shown in Table B.1. In-depth details on each module are
available in the ShapePipe documentation9.

Table B.1. List of ShapePipe modules.

Fixed Version Brief description
1.1

Module name
find_exposures

get_images

make_cat

mask

match_external

mccd_fit

mccd_fit_val

mccd_interp

mccd_plotsv

mccd_preprocessing

mccd_val

merge_headers

merge_sep_cats

merge_starcat

1.1

1.1

1.0

1.1

1.1

1.1

1.0

1.1

1.1

1.1

1.1

1.1

1.1

ngmix

0.0.1

pastecat

psfex_interp

psfex

random_cat

setools

1.1

1.1

1.0

1.1

1.1

sextractor

1.0.1

split_exp

spread_model

uncompress_fits

vignet_maker

1.1

1.1

1.1

1.1

the

cata-

separate

plots
for
the MCCD

Identify CFIS exposures
used to build co-add tiles.
Download CFIS images
from VOSpace.
Prepare the ﬁnal shear
catalogue.
Mask out bright stars and
other artifacts.
Match an external cata-
logue to objects identiﬁed
with SExtractor.
Run MCCD to ﬁt a PSF
model.
Run and validate
MCCD PSF model.
Interpolate the MCCD
PSF model to galaxy po-
sitions.
Produce
analysing
PSF model.
Pre-process inputs before
running MCCD.
Validate the MCCD PSF
model.
Merge the headers of split
CCD ﬁles.
Merge
logues.
Merge PSF model star
catalogues.
Run NGMIX to measure
galaxy shapes and per-
form metacalibration.
Combine multiple SEx-
tractor output
cata-
logues into a single ﬁle.
Interpolate the PSFEx
PSF model to galaxy po-
sitions.
Run PSFEx to build a
PSF model.
Create a random cata-
logue.
Compute
summary
statistics, produce vali-
dation plots, and other
useful tools.
Run SExtractor to ex-
tract stars and galaxies.
Split single-exposure im-
ages into separate ﬁles by
CCD.
Run the spread model
method to
the
galaxy sample.
Uncompress FITS image
ﬁles and save them as a
single-HDU FITS ﬁle.
Create postage
stamps
around galaxy positions.

reﬁne

6 https://github.com/aguinot/ngmix
7 http://cdsarc.u-strasbg.fr/doc/cdsclient.html
8 https://github.com/RaRe-Technologies/sqlitedict

9 https://CosmoStat.github.io/shapepipe/

Article number, page 7 of 7

