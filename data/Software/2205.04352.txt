Learning Self-adaptations for IoT Networks:
A Genetic Programming Approach

Jia Li, Shiva Nejati and Mehrdad Sabetzadeh
University of Ottawa
Canada
{jli714,snejati,m.sabetzadeh}@uottawa.ca

2
2
0
2

y
a
M
9

]
E
S
.
s
c
[

1
v
2
5
3
4
0
.
5
0
2
2
:
v
i
X
r
a

ABSTRACT
Internet of Things (IoT) is a pivotal technology in application do-
mains that require connectivity and interoperability between large
numbers of devices. IoT systems predominantly use a software-
defined network (SDN) architecture as their core communication
backbone. This architecture offers several advantages, including
the flexibility to make IoT networks self-adaptive through software
programmability. In general, self-adaptation solutions need to peri-
odically monitor, reason about, and adapt a running system. The
adaptation step involves generating an adaptation strategy and ap-
plying it to the running system whenever an anomaly arises. In this
paper, we argue that, rather than generating individual adaptation
strategies, the goal should be to adapt the logic / code of the running
system in such a way that the system itself would learn how to steer
clear of future anomalies, without triggering self-adaptation too
frequently. We instantiate and empirically assess this idea in the con-
text of IoT networks. Specifically, using genetic programming (GP),
we propose a self-adaptation solution that continuously learns and
updates the control constructs in the data-forwarding logic of SDN-
based IoT networks. Our evaluation, performed using open-source
synthetic and industrial data, indicates that, compared to a baseline
adaptation technique that attempts to generate individual adapta-
tions, our GP-based approach is more effective in resolving network
congestion, and further, reduces the frequency of adaptation inter-
ventions over time. In addition, we compare our approach against
a standard data-forwarding algorithm from the network literature,
demonstrating that our approach significantly reduces packet loss.

ACM Reference Format:
Jia Li, Shiva Nejati and Mehrdad Sabetzadeh. 2022. Learning Self-adaptations
for IoT Networks: A Genetic Programming Approach. In 17th International
Symposium on Software Engineering for Adaptive and Self-Managing Systems
(SEAMS ’22), May 18–23, 2022, PITTSBURGH, PA, USA. ACM, New York, NY,
USA, 12 pages. https://doi.org/10.1145/3524844.3528053

1 INTRODUCTION
A major challenge when engineering complex systems is to en-
sure that these systems meet their quality-of-service criteria and

Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
SEAMS ’22, May 18–23, 2022, PITTSBURGH, PA, USA
© 2022 Association for Computing Machinery.
ACM ISBN 978-1-4503-9305-8/22/05. . . $15.00
https://doi.org/10.1145/3524844.3528053

are reliable in the face of uncertainty. Self-adaptation is a promis-
ing approach for addressing this challenge. The idea behind self-
adaptation is that engineers take an existing system, specify its
expected qualities and objectives as well as strategies to achieve
these objectives, and build capabilities into the system in a way that
enables the system to adjust itself to changes during operation [34].
Many software-intensive systems can benefit from self-adaptivity.
A particularly pertinent domain where self-adaptation is useful is
Internet of Things (IoT). IoT envisions highly complex systems
composed of a large number of smart devices that are implanted
with sensors and actuators, and interconnected through the Inter-
net or other network technology [46]. There are various sources
of uncertainty in IoT applications. These include, among others,
the dynamic and rapidly changing environment in which IoT appli-
cations operate and the scarcity and limitations of resources, e.g.,
network bandwidth, battery power, and data-storage capacity. In
addition, since IoT rollouts are typically very expensive, IoT ap-
plications are expected to live for a long period of time and work
reliably throughout [47, 85]. These factors necessitate some degree
of self-adaptivity in IoT systems. Notably, given their often limited
bandwidth, IoT networks are prone to congestion when there is a
burst in demand. For instance, in an IoT-based emergency manage-
ment system, such bursts can occur when a disaster situation, e.g.,
a flood, is unfolding. Our ultimate goal in this paper is to develop a
self-adaptive approach for resolving congestion in IoT networks.

Self-adaptation has been studied for many years [23, 48, 64,
67, 78]. The existing self-adaptation approaches include model-
based [28, 74], control-based [30], requirements-based [6], and
more recently, learning-based [36] solutions. At the heart of all
self-adaptation solutions, there is a planning step that generates
or determines an adaptation strategy to adapt the running sys-
tem once an anomaly is detected [34]. Adaptation strategies may
be composed of fixed and pre-defined actions identified based on
domain knowledge, or they may be new behaviours or entities
introduced at run-time [78]. Irrespective of the type of adaptation,
the knowledge about how to generate adaptation strategies is often
concentrated in the planner: The running system is merely modified
by the planner to be able to handle an anomaly as seen in a specific
time and context; the running system is not necessarily improved
in a way that it can better respond to future anomalies on its own.
As we illustrate in our motivating example of Section 2, having
to repeatedly invoke the planner for each adaptation can be both
expensive and ineffective. The main idea that we put forward in
this paper is as follows: The self-adaptation planner should attempt
to improve the logic / code of the running system such that the system
itself would learn how to steer clear of future anomalies, without trig-
gering self-adaptation too frequently. The need for self-adaptation is

 
 
 
 
 
 
SEAMS ’22, May 18–23, 2022, PITTSBURGH, PA, USA

Jia Li, Shiva Nejati and Mehrdad Sabetzadeh

never entirely eliminated, especially noting that the environment
changes over time. Nonetheless, a system augmented with such a
self-adaptation planner is likely to be more efficient, more robust to
changes in the environment (e.g., varying network requests), and
less in need of adaptation intervention.

Furthermore, existing self-adaptation research focuses on mod-
ifying a running system via producing individual and concrete
elements, e.g., configuration values [47]. In contrast, we take a gen-
erative approach [29], modifying the logic of the running system
which in turn generates the concrete elements.

We instantiate the above-described vision of self-adaptation for
addressing congestion control in software-defined networks (SDNs).
IoT systems are predominantly built and deployed over SDNs due
to the flexibility offered by this networking architecture [55]. In
an SDN, network control is transferred from local fixed-behaviour
controllers distributed over a set of switches to a centralized and pro-
grammable software controller [39]. More specifically, we address
the self-adaptation of SDN data-forwarding algorithms in order to
resolve network congestion in real time. Our self-adaptation tech-
nique employs genetic programming (GP) [50, 70] to enhance the
programmable controller of an SDN with the well-known MAPE-K
self-adaptation loop [49, 64]. Our approach (i) periodically moni-
tors the SDN to check if it is congested and generates a model of
the SDN to be used for congestion resolution; (ii) applies GP to
evolve the logic of the SDN data-forwarding algorithm such that
congestion is resolved and, further, the transmission delay and the
changes introduced in the existing data-transmission routes are
minimized; and then (iii) modifies existing transmission routes to
resolve the current congestion, and updates the logic of the SDN
data-forwarding algorithm to mitigate future congestion. Exploit-
ing the global network view provided by an SDN for modifying
the controller and resolving congestion in real time is not new.
However, existing approaches adapt the network management log-
ic/code using pre-defined rules [37]. In contrast, our approach uses
GP to modify the data-forwarding control constructs in an evolving
manner and without reliance on any fixed rules.

We evaluate our generative, adaptive approach on 18 synthetic
and one industrial IoT network. The industrial network, which is
the backbone of an IoT-based emergency management system [80],
is prone to congestion when the volume of demand increases dur-
ing emergencies. We compare our approach with two baselines:
(1) a self-adaptive technique from the SEAMS community that at-
tempts to resolve congestion by generating individual adaptations
(i.e., individual data-transmission routes) without optimizing the
SDN routing algorithms [80]; and (2) a standard data-forwarding
algorithm from the network community that uses pre-defined rules
(heuristics) to optimize SDN control at runtime and resolve con-
gestion [1, 26]. Our results indicate that our approach successfully
resolves congestion in all the 18 networks considered while the
adaptive, but non-generative baseline fails to resolve congestion in
four of the networks with probabilities ranging from 10% to 66%.
In addition, compared to this baseline, our approach reduces the
average number of congestion occurrences, and hence, the number
of adaptation rounds necessary. Compared to the baseline from
the network community, our approach is able to significantly re-
duce packet loss for the industrial network. Finally, we empirically
demonstrate that the execution time of our approach is linear in

network size and the amount of data traffic over time, making our
approach suitable for online adaptation.

Structure. Section 2 motivates the paper. Section 3 presents our
approach. Section 4 describes our evaluation. Section 5 compares
with related work. Section 6 concludes the paper.

2 MOTIVATING EXAMPLE
We motivate our approach through an example. Network-traffic
management is about assigning flow paths to network requests such
that the entire network is optimally utilized [3, 5, 14, 66]. A flow
path is a directed path of network links. Many network systems use
a standard, lightweight data-forwarding algorithm, known as Open
Shortest Path First (OSPF) [1, 26]. OSPF generates a flow path for
a data-transmission request by computing the shortest weighted
path between the source and destination nodes of the request.

Figure 1(a) shows a network with five nodes (switches) and six
links. Suppose that there are six requests, 𝑟1, . . . , 𝑟6 from source node
𝑠1 to destination node 𝑠2, and that they arrive in sequence (first 𝑟1,
then 𝑟2, . . . ) with a few seconds in between. Further, all link weights
are set to one. OSPF creates the flow path 𝑠1 → 𝑠2 for every request.
Assume that each flow utilizes 30% of the bandwidth of each link.
Further, assume that we have a threshold of 80% for link utilization,
above which we consider a link to be congested. Each link in our ex-
ample then has enough bandwidth to transmit two flows before it is
considered congested. Consequently, link 𝑠1 → 𝑠2 will be congested
after the arrival of 𝑟3; see Figure 1(b). This leads to an invocation of
the self-adaptation planning step to resolve the congestion. A com-
mon approach for congestion resolution is through combinatorial
optimization, where some flow paths are re-routed such that the
data stream passing through each link remains below the utilization
threshold [32, 38, 54]. This optimization can be done using various
methods, e.g., graph optimization [32], mixed-integer linear pro-
gramming [3], local search [31, 33], and genetic algorithms [80].

Optimization by re-routing flow paths has a major drawback.
While optimizing at the level of individual flow paths may solve the
currently observed congestion, doing so does not improve the logic
of OSPF and thus does not contribute to congestion avoidance in
the future. For instance, in Figure 1(b), the arrival of 𝑟3 will cause
congestion. Re-routing 𝑟3 over 𝑠1 → 𝑠3 → 𝑠2 will resolve this
congestion. But, upon the arrival of 𝑟4, OSPF will yet again select
the flow path 𝑠1 → 𝑠2 for 𝑟4 (since this is the shortest path between
𝑠1 and 𝑠2) just to find the 𝑠1 → 𝑠2 link congested again. This in
turn necessitates the self-adaptation planning step to be invoked
for 𝑟4 as well. In a similar vein, the arrival of 𝑟5 and 𝑟6 will cause
congestion, prompting further calls to self-adaptation planning.

Our proposal is that, instead of optimizing flow paths, one should
optimize the logic of OSPF whenever a congestion is detected. In
this paper, we optimize and update the link-weight formula that
OSPF uses. The hypothesis here is that an optimized link-weight
formula not only can resolve the existing congestion, but can si-
multaneously also make OSPF more intelligent towards congestion
avoidance in the future, thus reducing the number of times that the
self-adaptation planning step has to be invoked. Below, we illustrate
our approach using the example of Figure 1.

We use genetic programming (GP) for self-adaptation planning,
whereby we dynamically learn link-weight functions that not only
help resolve an existing congestion but also help steer clear of

Learning Self-adaptations for IoT Networks: A Genetic Programming Approach

SEAMS ’22, May 18–23, 2022, PITTSBURGH, PA, USA

Figure 2: The MAPE-K [49] self-adaptation control feedback-
loop. The loop may interact with a real or simulated system.
The plan step uses surrogates to estimate dynamic aspects
of the system or the environment.

parameters that change at runtime and based on the state of the net-
work. However, the structure of the function is fixed. Consequently,
the function may not be suitable for all networks with different
characteristics and inputs. To address this limitation, we use GP to
learn and evolve the function structure instead of relying on a fixed,
manually crafted function. In Section 4, we compare our GP-based
approach with OSPF configured using an optimized weight function
suggested by Cisco standards [1, 26]. As we show there, OSPF’s
optimized weight function cannot address the congestion caused
by the network-request bursts in our industrial case study.

In this paper, we focus on situations where congestion can be
resolved by re-routing – in other words, when the network topol-
ogy is such that alternative flow paths can be created for some
requests. Given our focus, OSPF is a natural comparison baseline,
noting that, in OSPF, congestion is resolved by re-routing. When
alternative flow paths do not exist, congestion resolution can be
addressed only via traffic shaping [37], i.e., via modifying the net-
work traffic. Our approach does not alter the network traffic. We
therefore do not compare against congestion-resolution baselines
that use traffic shaping.

3 SELF-ADAPTATION CONTROL LOOP
Our approach leverages MAPE-K [49, 64]– the well-known self-
adaptation control-loop shown in Figure 2. The loop has four main
steps: monitoring the system and its environment, analyzing the
information collected from the system and its environment and
deciding if adaptation is needed, planning on how to adapt, and
executing the adaptation by applying it to the system.

Our self-adaptation loop is an add-on to the programmable con-
trol layer of the SDN architecture. In an SDN, the control layer has
a global view of the entire network and can dynamically modify
the network at runtime. The routing logic of an SDN is centralized,
decoupled from data and network hardware, and expressed using
software code at the control layer. Given the separation of control
logic from data planes and forwarding hardware, changing link
weights can be programmed at the control layer in a way that the
changes do not affect the existing network flows and instead are
used only for routing new flows [11]. Dynamically modifying link
weights therefore does not jeopardize network stability.

In our work, the self-adaptation loop interacts with a simulator
instead of a real system. Using a simulator rather than an actual
system is a common approach when designing and evaluating self-
adaption techniques. This is because using the actual system for this
purpose is time-consuming and expensive and may further cause

(1.5threshold) 2

Figure 1: (a) A simple network alongside the description of
network requests; (b) Output of a baseline data-forwarding
algorithm; and (c) Output of data-forwarding after adapta-
tion by our approach using genetic programming.
future ones. Initially, and for requests 𝑟1 and 𝑟2, our approach does
exactly as the standard OSPF would do, since there is no congestion.
Upon the arrival of 𝑟3 and the detection of congestion, i.e., the
situation in Figure 1(b), our self-adaptation approach kicks in and
automatically computes a link-weight formula such as the following:
(1.5threshold−util (𝑒,𝑡 )) 2 ⌋. In this formula, util(𝑒, 𝑡) is the utilization
⌊
percentage of link 𝑒 at time 𝑡, and threshold is a constant parameter
describing the utilization threshold above which the network is
considered to be congested. In our example, threshold = 0.8, and
for each link, util(𝑒, 𝑡) is 0.3 if one flow passes through 𝑒, and is 0.6
if two flows pass through 𝑒. Given that 𝑟1 and 𝑟2 are already routed
through 𝑠1 → 𝑠2, the weight of 𝑠1 → 𝑠2 computed by this formula
becomes 𝑤 = 4; see Figure 1(c) after 𝑟3’s arrival. As a result, OSPF
selects path 𝑠1 → 𝑠3 → 𝑠2 for 𝑟3 which successfully resolves the
current congestion observed in Figure 1(b). This, however, does not
increase the weights for 𝑠1 → 𝑠3 and 𝑠3 → 𝑠2, since these links
are utilized at 30%, and their weights remain at 1. Once 𝑟4 arrives,
OSPF directs 𝑟4 to 𝑠1 → 𝑠3 → 𝑠2 as it is the shortest weighted
path between 𝑠1 and 𝑠4. This will not cause any congestion, but
the weights for 𝑠1 → 𝑠3 and 𝑠3 → 𝑠2 increase to 𝑤 = 4 since these
links are now utilized at 60%. Finally, OSPF will direct the last two
requests 𝑟5 and 𝑟6 to the longer path 𝑠1 → 𝑠4 → 𝑠5 → 𝑠2, since,
now, this path is the shortest weighted path between 𝑠1 and 𝑠2.

As shown above, using our GP-learned link-weight formula,
OSPF is now able to manage flow paths without causing any conges-
tion and without having to re-invoke the self-adaptation planning
step beyond the single invocation after the arrival of 𝑟3.

We note that there are several techniques that modify network
parameters at runtime to resolve congestion in SDN (e.g., [37, 72]).
These techniques, however, rely on pre-defined rules. For example,
to make OSPF – discussed above – adaptive, a typical approach is
to define a network-weight function [77]. This function can involve

(a)(b)(c)<latexit sha1_base64="TYN+hFdY8J1YuFNS6RU+XvMKLlw=">AAAB7nicbVDLSgNBEOyNrxhfUY9eBhPBU9iNoF6EgBePEcwDkiXMTmaTIbOzy0yvEkI+wosHRbz6Pd78GyfJHjSxoKGo6qa7K0ikMOi6305ubX1jcyu/XdjZ3ds/KB4eNU2casYbLJaxbgfUcCkUb6BAyduJ5jQKJG8Fo9uZ33rk2ohYPeA44X5EB0qEglG0Uqv8RG6IV+4VS27FnYOsEi8jJchQ7xW/uv2YpRFXyCQ1puO5CfoTqlEwyaeFbmp4QtmIDnjHUkUjbvzJ/NwpObNKn4SxtqWQzNXfExMaGTOOAtsZURyaZW8m/ud1Ugyv/YlQSYpcscWiMJUEYzL7nfSF5gzl2BLKtLC3EjakmjK0CRVsCN7yy6ukWa14l5WL+2qp5mZx5OEETuEcPLiCGtxBHRrAYATP8ApvTuK8OO/Ox6I152Qzx/AHzucPOJWOIQ==</latexit>w=1w=4<latexit sha1_base64="LQLDh3a7ACnn1Jb2nf/8eoHTnc8=">AAAB/HicZVDLSgMxFL1TX7W+xrp0E2wFV2WmCLoRCm5cVrAPsEPJZNI2NJMZkoxahvoprgQFceuPuPJvTKeD2PZA4HDOvTnJ8WPOlHacH6uwtr6xuVXcLu3s7u0f2IfltooSSWiLRDySXR8rypmgLc00p91YUhz6nHb88fXM7zxQqVgk7vQkpl6Ih4INGMHaSH27XEW97JZU0mCKHq/Oq3274tScDGiVuDmpQI5m3/7uBRFJQio04Vipe9eJtZdiqRnhdFrqJYrGmIzxkN4bKnBIlZdmqVN0apQADSJpjtAoU/9vpDhUahL6ZjLEeqSWvZn45y1G6cGllzIRJ5oKMk8aJBzpCM2aQAGTlGg+MQQTycxjERlhiYk2fZVMC+7yn1dJu15znZp7W680nLyPIhzDCZyBCxfQgBtoQgsIPMELvMG79Wy9Wh/W53y0YOU7R7AA6+sXASaTeQ==</latexit><latexit sha1_base64="LQLDh3a7ACnn1Jb2nf/8eoHTnc8=">AAAB/HicZVDLSgMxFL1TX7W+xrp0E2wFV2WmCLoRCm5cVrAPsEPJZNI2NJMZkoxahvoprgQFceuPuPJvTKeD2PZA4HDOvTnJ8WPOlHacH6uwtr6xuVXcLu3s7u0f2IfltooSSWiLRDySXR8rypmgLc00p91YUhz6nHb88fXM7zxQqVgk7vQkpl6Ih4INGMHaSH27XEW97JZU0mCKHq/Oq3274tScDGiVuDmpQI5m3/7uBRFJQio04Vipe9eJtZdiqRnhdFrqJYrGmIzxkN4bKnBIlZdmqVN0apQADSJpjtAoU/9vpDhUahL6ZjLEeqSWvZn45y1G6cGllzIRJ5oKMk8aJBzpCM2aQAGTlGg+MQQTycxjERlhiYk2fZVMC+7yn1dJu15znZp7W680nLyPIhzDCZyBCxfQgBtoQgsIPMELvMG79Wy9Wh/W53y0YOU7R7AA6+sXASaTeQ==</latexit><latexit sha1_base64="LQLDh3a7ACnn1Jb2nf/8eoHTnc8=">AAAB/HicZVDLSgMxFL1TX7W+xrp0E2wFV2WmCLoRCm5cVrAPsEPJZNI2NJMZkoxahvoprgQFceuPuPJvTKeD2PZA4HDOvTnJ8WPOlHacH6uwtr6xuVXcLu3s7u0f2IfltooSSWiLRDySXR8rypmgLc00p91YUhz6nHb88fXM7zxQqVgk7vQkpl6Ih4INGMHaSH27XEW97JZU0mCKHq/Oq3274tScDGiVuDmpQI5m3/7uBRFJQio04Vipe9eJtZdiqRnhdFrqJYrGmIzxkN4bKnBIlZdmqVN0apQADSJpjtAoU/9vpDhUahL6ZjLEeqSWvZn45y1G6cGllzIRJ5oKMk8aJBzpCM2aQAGTlGg+MQQTycxjERlhiYk2fZVMC+7yn1dJu15znZp7W680nLyPIhzDCZyBCxfQgBtoQgsIPMELvMG79Wy9Wh/W53y0YOU7R7AA6+sXASaTeQ==</latexit><latexit sha1_base64="LQLDh3a7ACnn1Jb2nf/8eoHTnc8=">AAAB/HicZVDLSgMxFL1TX7W+xrp0E2wFV2WmCLoRCm5cVrAPsEPJZNI2NJMZkoxahvoprgQFceuPuPJvTKeD2PZA4HDOvTnJ8WPOlHacH6uwtr6xuVXcLu3s7u0f2IfltooSSWiLRDySXR8rypmgLc00p91YUhz6nHb88fXM7zxQqVgk7vQkpl6Ih4INGMHaSH27XEW97JZU0mCKHq/Oq3274tScDGiVuDmpQI5m3/7uBRFJQio04Vipe9eJtZdiqRnhdFrqJYrGmIzxkN4bKnBIlZdmqVN0apQADSJpjtAoU/9vpDhUahL6ZjLEeqSWvZn45y1G6cGllzIRJ5oKMk8aJBzpCM2aQAGTlGg+MQQTycxjERlhiYk2fZVMC+7yn1dJu15znZp7W680nLyPIhzDCZyBCxfQgBtoQgsIPMELvMG79Wy9Wh/W53y0YOU7R7AA6+sXASaTeQ==</latexit><latexit sha1_base64="TYN+hFdY8J1YuFNS6RU+XvMKLlw=">AAAB7nicbVDLSgNBEOyNrxhfUY9eBhPBU9iNoF6EgBePEcwDkiXMTmaTIbOzy0yvEkI+wosHRbz6Pd78GyfJHjSxoKGo6qa7K0ikMOi6305ubX1jcyu/XdjZ3ds/KB4eNU2casYbLJaxbgfUcCkUb6BAyduJ5jQKJG8Fo9uZ33rk2ohYPeA44X5EB0qEglG0Uqv8RG6IV+4VS27FnYOsEi8jJchQ7xW/uv2YpRFXyCQ1puO5CfoTqlEwyaeFbmp4QtmIDnjHUkUjbvzJ/NwpObNKn4SxtqWQzNXfExMaGTOOAtsZURyaZW8m/ud1Ugyv/YlQSYpcscWiMJUEYzL7nfSF5gzl2BLKtLC3EjakmjK0CRVsCN7yy6ukWa14l5WL+2qp5mZx5OEETuEcPLiCGtxBHRrAYATP8ApvTuK8OO/Ox6I152Qzx/AHzucPOJWOIQ==</latexit>w=1w=1<latexit sha1_base64="PxR4Kw8CYwEdBPAOGpVaxa3J79o=">AAAB7HicbVA9TwJBEJ3DL8Qv1NJmI5hYkTsabUxIbCwx8YAELmRv2YMNe3uX3TkNIfwGGwuNsfUH2flvXOAKBV8yyct7M5mZF6ZSGHTdb6ewsbm1vVPcLe3tHxwelY9PWibJNOM+S2SiOyE1XArFfRQoeSfVnMah5O1wfDv3249cG5GoB5ykPIjpUIlIMIpW8qtPN161X664NXcBsk68nFQgR7Nf/uoNEpbFXCGT1Jiu56YYTKlGwSSflXqZ4SllYzrkXUsVjbkJpotjZ+TCKgMSJdqWQrJQf09MaWzMJA5tZ0xxZFa9ufif180wug6mQqUZcsWWi6JMEkzI/HMyEJozlBNLKNPC3krYiGrK0OZTsiF4qy+vk1a95rk1775eabh5HEU4g3O4BA+uoAF30AQfGAh4hld4c5Tz4rw7H8vWgpPPnMIfOJ8/iN2NxQ==</latexit><latexit sha1_base64="PxR4Kw8CYwEdBPAOGpVaxa3J79o=">AAAB7HicbVA9TwJBEJ3DL8Qv1NJmI5hYkTsabUxIbCwx8YAELmRv2YMNe3uX3TkNIfwGGwuNsfUH2flvXOAKBV8yyct7M5mZF6ZSGHTdb6ewsbm1vVPcLe3tHxwelY9PWibJNOM+S2SiOyE1XArFfRQoeSfVnMah5O1wfDv3249cG5GoB5ykPIjpUIlIMIpW8qtPN161X664NXcBsk68nFQgR7Nf/uoNEpbFXCGT1Jiu56YYTKlGwSSflXqZ4SllYzrkXUsVjbkJpotjZ+TCKgMSJdqWQrJQf09MaWzMJA5tZ0xxZFa9ufif180wug6mQqUZcsWWi6JMEkzI/HMyEJozlBNLKNPC3krYiGrK0OZTsiF4qy+vk1a95rk1775eabh5HEU4g3O4BA+uoAF30AQfGAh4hld4c5Tz4rw7H8vWgpPPnMIfOJ8/iN2NxQ==</latexit><latexit sha1_base64="PxR4Kw8CYwEdBPAOGpVaxa3J79o=">AAAB7HicbVA9TwJBEJ3DL8Qv1NJmI5hYkTsabUxIbCwx8YAELmRv2YMNe3uX3TkNIfwGGwuNsfUH2flvXOAKBV8yyct7M5mZF6ZSGHTdb6ewsbm1vVPcLe3tHxwelY9PWibJNOM+S2SiOyE1XArFfRQoeSfVnMah5O1wfDv3249cG5GoB5ykPIjpUIlIMIpW8qtPN161X664NXcBsk68nFQgR7Nf/uoNEpbFXCGT1Jiu56YYTKlGwSSflXqZ4SllYzrkXUsVjbkJpotjZ+TCKgMSJdqWQrJQf09MaWzMJA5tZ0xxZFa9ufif180wug6mQqUZcsWWi6JMEkzI/HMyEJozlBNLKNPC3krYiGrK0OZTsiF4qy+vk1a95rk1775eabh5HEU4g3O4BA+uoAF30AQfGAh4hld4c5Tz4rw7H8vWgpPPnMIfOJ8/iN2NxQ==</latexit><latexit sha1_base64="PxR4Kw8CYwEdBPAOGpVaxa3J79o=">AAAB7HicbVA9TwJBEJ3DL8Qv1NJmI5hYkTsabUxIbCwx8YAELmRv2YMNe3uX3TkNIfwGGwuNsfUH2flvXOAKBV8yyct7M5mZF6ZSGHTdb6ewsbm1vVPcLe3tHxwelY9PWibJNOM+S2SiOyE1XArFfRQoeSfVnMah5O1wfDv3249cG5GoB5ykPIjpUIlIMIpW8qtPN161X664NXcBsk68nFQgR7Nf/uoNEpbFXCGT1Jiu56YYTKlGwSSflXqZ4SllYzrkXUsVjbkJpotjZ+TCKgMSJdqWQrJQf09MaWzMJA5tZ0xxZFa9ufif180wug6mQqUZcsWWi6JMEkzI/HMyEJozlBNLKNPC3krYiGrK0OZTsiF4qy+vk1a95rk1775eabh5HEU4g3O4BA+uoAF30AQfGAh4hld4c5Tz4rw7H8vWgpPPnMIfOJ8/iN2NxQ==</latexit><latexit sha1_base64="TYN+hFdY8J1YuFNS6RU+XvMKLlw=">AAAB7nicbVDLSgNBEOyNrxhfUY9eBhPBU9iNoF6EgBePEcwDkiXMTmaTIbOzy0yvEkI+wosHRbz6Pd78GyfJHjSxoKGo6qa7K0ikMOi6305ubX1jcyu/XdjZ3ds/KB4eNU2casYbLJaxbgfUcCkUb6BAyduJ5jQKJG8Fo9uZ33rk2ohYPeA44X5EB0qEglG0Uqv8RG6IV+4VS27FnYOsEi8jJchQ7xW/uv2YpRFXyCQ1puO5CfoTqlEwyaeFbmp4QtmIDnjHUkUjbvzJ/NwpObNKn4SxtqWQzNXfExMaGTOOAtsZURyaZW8m/ud1Ugyv/YlQSYpcscWiMJUEYzL7nfSF5gzl2BLKtLC3EjakmjK0CRVsCN7yy6ukWa14l5WL+2qp5mZx5OEETuEcPLiCGtxBHRrAYATP8ApvTuK8OO/Ox6I152Qzx/AHzucPOJWOIQ==</latexit>w=1<latexit sha1_base64="TYN+hFdY8J1YuFNS6RU+XvMKLlw=">AAAB7nicbVDLSgNBEOyNrxhfUY9eBhPBU9iNoF6EgBePEcwDkiXMTmaTIbOzy0yvEkI+wosHRbz6Pd78GyfJHjSxoKGo6qa7K0ikMOi6305ubX1jcyu/XdjZ3ds/KB4eNU2casYbLJaxbgfUcCkUb6BAyduJ5jQKJG8Fo9uZ33rk2ohYPeA44X5EB0qEglG0Uqv8RG6IV+4VS27FnYOsEi8jJchQ7xW/uv2YpRFXyCQ1puO5CfoTqlEwyaeFbmp4QtmIDnjHUkUjbvzJ/NwpObNKn4SxtqWQzNXfExMaGTOOAtsZURyaZW8m/ud1Ugyv/YlQSYpcscWiMJUEYzL7nfSF5gzl2BLKtLC3EjakmjK0CRVsCN7yy6ukWa14l5WL+2qp5mZx5OEETuEcPLiCGtxBHRrAYATP8ApvTuK8OO/Ox6I152Qzx/AHzucPOJWOIQ==</latexit>w=1w=1<latexit sha1_base64="PxR4Kw8CYwEdBPAOGpVaxa3J79o=">AAAB7HicbVA9TwJBEJ3DL8Qv1NJmI5hYkTsabUxIbCwx8YAELmRv2YMNe3uX3TkNIfwGGwuNsfUH2flvXOAKBV8yyct7M5mZF6ZSGHTdb6ewsbm1vVPcLe3tHxwelY9PWibJNOM+S2SiOyE1XArFfRQoeSfVnMah5O1wfDv3249cG5GoB5ykPIjpUIlIMIpW8qtPN161X664NXcBsk68nFQgR7Nf/uoNEpbFXCGT1Jiu56YYTKlGwSSflXqZ4SllYzrkXUsVjbkJpotjZ+TCKgMSJdqWQrJQf09MaWzMJA5tZ0xxZFa9ufif180wug6mQqUZcsWWi6JMEkzI/HMyEJozlBNLKNPC3krYiGrK0OZTsiF4qy+vk1a95rk1775eabh5HEU4g3O4BA+uoAF30AQfGAh4hld4c5Tz4rw7H8vWgpPPnMIfOJ8/iN2NxQ==</latexit><latexit sha1_base64="PxR4Kw8CYwEdBPAOGpVaxa3J79o=">AAAB7HicbVA9TwJBEJ3DL8Qv1NJmI5hYkTsabUxIbCwx8YAELmRv2YMNe3uX3TkNIfwGGwuNsfUH2flvXOAKBV8yyct7M5mZF6ZSGHTdb6ewsbm1vVPcLe3tHxwelY9PWibJNOM+S2SiOyE1XArFfRQoeSfVnMah5O1wfDv3249cG5GoB5ykPIjpUIlIMIpW8qtPN161X664NXcBsk68nFQgR7Nf/uoNEpbFXCGT1Jiu56YYTKlGwSSflXqZ4SllYzrkXUsVjbkJpotjZ+TCKgMSJdqWQrJQf09MaWzMJA5tZ0xxZFa9ufif180wug6mQqUZcsWWi6JMEkzI/HMyEJozlBNLKNPC3krYiGrK0OZTsiF4qy+vk1a95rk1775eabh5HEU4g3O4BA+uoAF30AQfGAh4hld4c5Tz4rw7H8vWgpPPnMIfOJ8/iN2NxQ==</latexit><latexit sha1_base64="PxR4Kw8CYwEdBPAOGpVaxa3J79o=">AAAB7HicbVA9TwJBEJ3DL8Qv1NJmI5hYkTsabUxIbCwx8YAELmRv2YMNe3uX3TkNIfwGGwuNsfUH2flvXOAKBV8yyct7M5mZF6ZSGHTdb6ewsbm1vVPcLe3tHxwelY9PWibJNOM+S2SiOyE1XArFfRQoeSfVnMah5O1wfDv3249cG5GoB5ykPIjpUIlIMIpW8qtPN161X664NXcBsk68nFQgR7Nf/uoNEpbFXCGT1Jiu56YYTKlGwSSflXqZ4SllYzrkXUsVjbkJpotjZ+TCKgMSJdqWQrJQf09MaWzMJA5tZ0xxZFa9ufif180wug6mQqUZcsWWi6JMEkzI/HMyEJozlBNLKNPC3krYiGrK0OZTsiF4qy+vk1a95rk1775eabh5HEU4g3O4BA+uoAF30AQfGAh4hld4c5Tz4rw7H8vWgpPPnMIfOJ8/iN2NxQ==</latexit><latexit sha1_base64="PxR4Kw8CYwEdBPAOGpVaxa3J79o=">AAAB7HicbVA9TwJBEJ3DL8Qv1NJmI5hYkTsabUxIbCwx8YAELmRv2YMNe3uX3TkNIfwGGwuNsfUH2flvXOAKBV8yyct7M5mZF6ZSGHTdb6ewsbm1vVPcLe3tHxwelY9PWibJNOM+S2SiOyE1XArFfRQoeSfVnMah5O1wfDv3249cG5GoB5ykPIjpUIlIMIpW8qtPN161X664NXcBsk68nFQgR7Nf/uoNEpbFXCGT1Jiu56YYTKlGwSSflXqZ4SllYzrkXUsVjbkJpotjZ+TCKgMSJdqWQrJQf09MaWzMJA5tZ0xxZFa9ufif180wug6mQqUZcsWWi6JMEkzI/HMyEJozlBNLKNPC3krYiGrK0OZTsiF4qy+vk1a95rk1775eabh5HEU4g3O4BA+uoAF30AQfGAh4hld4c5Tz4rw7H8vWgpPPnMIfOJ8/iN2NxQ==</latexit>w=4<latexit sha1_base64="yk159hychE8xCZSXjIetLea6Nxg=">AAACD3icbVDLSsNAFL2prxpfqS7dDLaCq5IUQTdCwY3LCvYBbSiTyaQdOnkwM7GW0I/wA9zqJ7gTt36CX+BvOG2zsK0HBg7nnnMvc7yEM6ls+9sobGxube8Ud829/YPDI6t03JJxKghtkpjHouNhSTmLaFMxxWknERSHHqdtb3Q7m7cfqZAsjh7UJKFuiAcRCxjBSkt9q1TpzZdkgvpTNL65rPStsl2150DrxMlJGXI0+tZPz49JGtJIEY6l7Dp2otwMC8UIp1Ozl0qaYDLCA9rVNMIhlW42vzpF51rxURAL/SKF5urfRIZDKSehp50hVkO5NHtaLDFXAzPnf4FuqoJrN2NRkioakcX1IOVIxWhWDvKZoETxiSaYCKY/gMgQC0yUrtDUzTirPayTVq3q2FXnvlau23lHRTiFM7gAB66gDnfQgCYQGMMLvMKb8Wy8Gx/G58JaMPLMCSzB+PoFZoub1Q==</latexit><latexit sha1_base64="yk159hychE8xCZSXjIetLea6Nxg=">AAACD3icbVDLSsNAFL2prxpfqS7dDLaCq5IUQTdCwY3LCvYBbSiTyaQdOnkwM7GW0I/wA9zqJ7gTt36CX+BvOG2zsK0HBg7nnnMvc7yEM6ls+9sobGxube8Ud829/YPDI6t03JJxKghtkpjHouNhSTmLaFMxxWknERSHHqdtb3Q7m7cfqZAsjh7UJKFuiAcRCxjBSkt9q1TpzZdkgvpTNL65rPStsl2150DrxMlJGXI0+tZPz49JGtJIEY6l7Dp2otwMC8UIp1Ozl0qaYDLCA9rVNMIhlW42vzpF51rxURAL/SKF5urfRIZDKSehp50hVkO5NHtaLDFXAzPnf4FuqoJrN2NRkioakcX1IOVIxWhWDvKZoETxiSaYCKY/gMgQC0yUrtDUzTirPayTVq3q2FXnvlau23lHRTiFM7gAB66gDnfQgCYQGMMLvMKb8Wy8Gx/G58JaMPLMCSzB+PoFZoub1Q==</latexit><latexit sha1_base64="yk159hychE8xCZSXjIetLea6Nxg=">AAACD3icbVDLSsNAFL2prxpfqS7dDLaCq5IUQTdCwY3LCvYBbSiTyaQdOnkwM7GW0I/wA9zqJ7gTt36CX+BvOG2zsK0HBg7nnnMvc7yEM6ls+9sobGxube8Ud829/YPDI6t03JJxKghtkpjHouNhSTmLaFMxxWknERSHHqdtb3Q7m7cfqZAsjh7UJKFuiAcRCxjBSkt9q1TpzZdkgvpTNL65rPStsl2150DrxMlJGXI0+tZPz49JGtJIEY6l7Dp2otwMC8UIp1Ozl0qaYDLCA9rVNMIhlW42vzpF51rxURAL/SKF5urfRIZDKSehp50hVkO5NHtaLDFXAzPnf4FuqoJrN2NRkioakcX1IOVIxWhWDvKZoETxiSaYCKY/gMgQC0yUrtDUzTirPayTVq3q2FXnvlau23lHRTiFM7gAB66gDnfQgCYQGMMLvMKb8Wy8Gx/G58JaMPLMCSzB+PoFZoub1Q==</latexit><latexit sha1_base64="yk159hychE8xCZSXjIetLea6Nxg=">AAACD3icbVDLSsNAFL2prxpfqS7dDLaCq5IUQTdCwY3LCvYBbSiTyaQdOnkwM7GW0I/wA9zqJ7gTt36CX+BvOG2zsK0HBg7nnnMvc7yEM6ls+9sobGxube8Ud829/YPDI6t03JJxKghtkpjHouNhSTmLaFMxxWknERSHHqdtb3Q7m7cfqZAsjh7UJKFuiAcRCxjBSkt9q1TpzZdkgvpTNL65rPStsl2150DrxMlJGXI0+tZPz49JGtJIEY6l7Dp2otwMC8UIp1Ozl0qaYDLCA9rVNMIhlW42vzpF51rxURAL/SKF5urfRIZDKSehp50hVkO5NHtaLDFXAzPnf4FuqoJrN2NRkioakcX1IOVIxWhWDvKZoETxiSaYCKY/gMgQC0yUrtDUzTirPayTVq3q2FXnvlau23lHRTiFM7gAB66gDnfQgCYQGMMLvMKb8Wy8Gx/G58JaMPLMCSzB+PoFZoub1Q==</latexit><latexit sha1_base64="TYN+hFdY8J1YuFNS6RU+XvMKLlw=">AAAB7nicbVDLSgNBEOyNrxhfUY9eBhPBU9iNoF6EgBePEcwDkiXMTmaTIbOzy0yvEkI+wosHRbz6Pd78GyfJHjSxoKGo6qa7K0ikMOi6305ubX1jcyu/XdjZ3ds/KB4eNU2casYbLJaxbgfUcCkUb6BAyduJ5jQKJG8Fo9uZ33rk2ohYPeA44X5EB0qEglG0Uqv8RG6IV+4VS27FnYOsEi8jJchQ7xW/uv2YpRFXyCQ1puO5CfoTqlEwyaeFbmp4QtmIDnjHUkUjbvzJ/NwpObNKn4SxtqWQzNXfExMaGTOOAtsZURyaZW8m/ud1Ugyv/YlQSYpcscWiMJUEYzL7nfSF5gzl2BLKtLC3EjakmjK0CRVsCN7yy6ukWa14l5WL+2qp5mZx5OEETuEcPLiCGtxBHRrAYATP8ApvTuK8OO/Ox6I152Qzx/AHzucPOJWOIQ==</latexit>w=1w=1<latexit sha1_base64="PxR4Kw8CYwEdBPAOGpVaxa3J79o=">AAAB7HicbVA9TwJBEJ3DL8Qv1NJmI5hYkTsabUxIbCwx8YAELmRv2YMNe3uX3TkNIfwGGwuNsfUH2flvXOAKBV8yyct7M5mZF6ZSGHTdb6ewsbm1vVPcLe3tHxwelY9PWibJNOM+S2SiOyE1XArFfRQoeSfVnMah5O1wfDv3249cG5GoB5ykPIjpUIlIMIpW8qtPN161X664NXcBsk68nFQgR7Nf/uoNEpbFXCGT1Jiu56YYTKlGwSSflXqZ4SllYzrkXUsVjbkJpotjZ+TCKgMSJdqWQrJQf09MaWzMJA5tZ0xxZFa9ufif180wug6mQqUZcsWWi6JMEkzI/HMyEJozlBNLKNPC3krYiGrK0OZTsiF4qy+vk1a95rk1775eabh5HEU4g3O4BA+uoAF30AQfGAh4hld4c5Tz4rw7H8vWgpPPnMIfOJ8/iN2NxQ==</latexit><latexit sha1_base64="PxR4Kw8CYwEdBPAOGpVaxa3J79o=">AAAB7HicbVA9TwJBEJ3DL8Qv1NJmI5hYkTsabUxIbCwx8YAELmRv2YMNe3uX3TkNIfwGGwuNsfUH2flvXOAKBV8yyct7M5mZF6ZSGHTdb6ewsbm1vVPcLe3tHxwelY9PWibJNOM+S2SiOyE1XArFfRQoeSfVnMah5O1wfDv3249cG5GoB5ykPIjpUIlIMIpW8qtPN161X664NXcBsk68nFQgR7Nf/uoNEpbFXCGT1Jiu56YYTKlGwSSflXqZ4SllYzrkXUsVjbkJpotjZ+TCKgMSJdqWQrJQf09MaWzMJA5tZ0xxZFa9ufif180wug6mQqUZcsWWi6JMEkzI/HMyEJozlBNLKNPC3krYiGrK0OZTsiF4qy+vk1a95rk1775eabh5HEU4g3O4BA+uoAF30AQfGAh4hld4c5Tz4rw7H8vWgpPPnMIfOJ8/iN2NxQ==</latexit><latexit sha1_base64="PxR4Kw8CYwEdBPAOGpVaxa3J79o=">AAAB7HicbVA9TwJBEJ3DL8Qv1NJmI5hYkTsabUxIbCwx8YAELmRv2YMNe3uX3TkNIfwGGwuNsfUH2flvXOAKBV8yyct7M5mZF6ZSGHTdb6ewsbm1vVPcLe3tHxwelY9PWibJNOM+S2SiOyE1XArFfRQoeSfVnMah5O1wfDv3249cG5GoB5ykPIjpUIlIMIpW8qtPN161X664NXcBsk68nFQgR7Nf/uoNEpbFXCGT1Jiu56YYTKlGwSSflXqZ4SllYzrkXUsVjbkJpotjZ+TCKgMSJdqWQrJQf09MaWzMJA5tZ0xxZFa9ufif180wug6mQqUZcsWWi6JMEkzI/HMyEJozlBNLKNPC3krYiGrK0OZTsiF4qy+vk1a95rk1775eabh5HEU4g3O4BA+uoAF30AQfGAh4hld4c5Tz4rw7H8vWgpPPnMIfOJ8/iN2NxQ==</latexit><latexit sha1_base64="PxR4Kw8CYwEdBPAOGpVaxa3J79o=">AAAB7HicbVA9TwJBEJ3DL8Qv1NJmI5hYkTsabUxIbCwx8YAELmRv2YMNe3uX3TkNIfwGGwuNsfUH2flvXOAKBV8yyct7M5mZF6ZSGHTdb6ewsbm1vVPcLe3tHxwelY9PWibJNOM+S2SiOyE1XArFfRQoeSfVnMah5O1wfDv3249cG5GoB5ykPIjpUIlIMIpW8qtPN161X664NXcBsk68nFQgR7Nf/uoNEpbFXCGT1Jiu56YYTKlGwSSflXqZ4SllYzrkXUsVjbkJpotjZ+TCKgMSJdqWQrJQf09MaWzMJA5tZ0xxZFa9ufif180wug6mQqUZcsWWi6JMEkzI/HMyEJozlBNLKNPC3krYiGrK0OZTsiF4qy+vk1a95rk1775eabh5HEU4g3O4BA+uoAF30AQfGAh4hld4c5Tz4rw7H8vWgpPPnMIfOJ8/iN2NxQ==</latexit><latexit sha1_base64="TYN+hFdY8J1YuFNS6RU+XvMKLlw=">AAAB7nicbVDLSgNBEOyNrxhfUY9eBhPBU9iNoF6EgBePEcwDkiXMTmaTIbOzy0yvEkI+wosHRbz6Pd78GyfJHjSxoKGo6qa7K0ikMOi6305ubX1jcyu/XdjZ3ds/KB4eNU2casYbLJaxbgfUcCkUb6BAyduJ5jQKJG8Fo9uZ33rk2ohYPeA44X5EB0qEglG0Uqv8RG6IV+4VS27FnYOsEi8jJchQ7xW/uv2YpRFXyCQ1puO5CfoTqlEwyaeFbmp4QtmIDnjHUkUjbvzJ/NwpObNKn4SxtqWQzNXfExMaGTOOAtsZURyaZW8m/ud1Ugyv/YlQSYpcscWiMJUEYzL7nfSF5gzl2BLKtLC3EjakmjK0CRVsCN7yy6ukWa14l5WL+2qp5mZx5OEETuEcPLiCGtxBHRrAYATP8ApvTuK8OO/Ox6I152Qzx/AHzucPOJWOIQ==</latexit>w=1<latexit sha1_base64="TYN+hFdY8J1YuFNS6RU+XvMKLlw=">AAAB7nicbVDLSgNBEOyNrxhfUY9eBhPBU9iNoF6EgBePEcwDkiXMTmaTIbOzy0yvEkI+wosHRbz6Pd78GyfJHjSxoKGo6qa7K0ikMOi6305ubX1jcyu/XdjZ3ds/KB4eNU2casYbLJaxbgfUcCkUb6BAyduJ5jQKJG8Fo9uZ33rk2ohYPeA44X5EB0qEglG0Uqv8RG6IV+4VS27FnYOsEi8jJchQ7xW/uv2YpRFXyCQ1puO5CfoTqlEwyaeFbmp4QtmIDnjHUkUjbvzJ/NwpObNKn4SxtqWQzNXfExMaGTOOAtsZURyaZW8m/ud1Ugyv/YlQSYpcscWiMJUEYzL7nfSF5gzl2BLKtLC3EjakmjK0CRVsCN7yy6ukWa14l5WL+2qp5mZx5OEETuEcPLiCGtxBHRrAYATP8ApvTuK8OO/Ox6I152Qzx/AHzucPOJWOIQ==</latexit>w=1w=1<latexit sha1_base64="PxR4Kw8CYwEdBPAOGpVaxa3J79o=">AAAB7HicbVA9TwJBEJ3DL8Qv1NJmI5hYkTsabUxIbCwx8YAELmRv2YMNe3uX3TkNIfwGGwuNsfUH2flvXOAKBV8yyct7M5mZF6ZSGHTdb6ewsbm1vVPcLe3tHxwelY9PWibJNOM+S2SiOyE1XArFfRQoeSfVnMah5O1wfDv3249cG5GoB5ykPIjpUIlIMIpW8qtPN161X664NXcBsk68nFQgR7Nf/uoNEpbFXCGT1Jiu56YYTKlGwSSflXqZ4SllYzrkXUsVjbkJpotjZ+TCKgMSJdqWQrJQf09MaWzMJA5tZ0xxZFa9ufif180wug6mQqUZcsWWi6JMEkzI/HMyEJozlBNLKNPC3krYiGrK0OZTsiF4qy+vk1a95rk1775eabh5HEU4g3O4BA+uoAF30AQfGAh4hld4c5Tz4rw7H8vWgpPPnMIfOJ8/iN2NxQ==</latexit><latexit sha1_base64="PxR4Kw8CYwEdBPAOGpVaxa3J79o=">AAAB7HicbVA9TwJBEJ3DL8Qv1NJmI5hYkTsabUxIbCwx8YAELmRv2YMNe3uX3TkNIfwGGwuNsfUH2flvXOAKBV8yyct7M5mZF6ZSGHTdb6ewsbm1vVPcLe3tHxwelY9PWibJNOM+S2SiOyE1XArFfRQoeSfVnMah5O1wfDv3249cG5GoB5ykPIjpUIlIMIpW8qtPN161X664NXcBsk68nFQgR7Nf/uoNEpbFXCGT1Jiu56YYTKlGwSSflXqZ4SllYzrkXUsVjbkJpotjZ+TCKgMSJdqWQrJQf09MaWzMJA5tZ0xxZFa9ufif180wug6mQqUZcsWWi6JMEkzI/HMyEJozlBNLKNPC3krYiGrK0OZTsiF4qy+vk1a95rk1775eabh5HEU4g3O4BA+uoAF30AQfGAh4hld4c5Tz4rw7H8vWgpPPnMIfOJ8/iN2NxQ==</latexit><latexit sha1_base64="PxR4Kw8CYwEdBPAOGpVaxa3J79o=">AAAB7HicbVA9TwJBEJ3DL8Qv1NJmI5hYkTsabUxIbCwx8YAELmRv2YMNe3uX3TkNIfwGGwuNsfUH2flvXOAKBV8yyct7M5mZF6ZSGHTdb6ewsbm1vVPcLe3tHxwelY9PWibJNOM+S2SiOyE1XArFfRQoeSfVnMah5O1wfDv3249cG5GoB5ykPIjpUIlIMIpW8qtPN161X664NXcBsk68nFQgR7Nf/uoNEpbFXCGT1Jiu56YYTKlGwSSflXqZ4SllYzrkXUsVjbkJpotjZ+TCKgMSJdqWQrJQf09MaWzMJA5tZ0xxZFa9ufif180wug6mQqUZcsWWi6JMEkzI/HMyEJozlBNLKNPC3krYiGrK0OZTsiF4qy+vk1a95rk1775eabh5HEU4g3O4BA+uoAF30AQfGAh4hld4c5Tz4rw7H8vWgpPPnMIfOJ8/iN2NxQ==</latexit><latexit sha1_base64="PxR4Kw8CYwEdBPAOGpVaxa3J79o=">AAAB7HicbVA9TwJBEJ3DL8Qv1NJmI5hYkTsabUxIbCwx8YAELmRv2YMNe3uX3TkNIfwGGwuNsfUH2flvXOAKBV8yyct7M5mZF6ZSGHTdb6ewsbm1vVPcLe3tHxwelY9PWibJNOM+S2SiOyE1XArFfRQoeSfVnMah5O1wfDv3249cG5GoB5ykPIjpUIlIMIpW8qtPN161X664NXcBsk68nFQgR7Nf/uoNEpbFXCGT1Jiu56YYTKlGwSSflXqZ4SllYzrkXUsVjbkJpotjZ+TCKgMSJdqWQrJQf09MaWzMJA5tZ0xxZFa9ufif180wug6mQqUZcsWWi6JMEkzI/HMyEJozlBNLKNPC3krYiGrK0OZTsiF4qy+vk1a95rk1775eabh5HEU4g3O4BA+uoAF30AQfGAh4hld4c5Tz4rw7H8vWgpPPnMIfOJ8/iN2NxQ==</latexit><latexit sha1_base64="TYN+hFdY8J1YuFNS6RU+XvMKLlw=">AAAB7nicbVDLSgNBEOyNrxhfUY9eBhPBU9iNoF6EgBePEcwDkiXMTmaTIbOzy0yvEkI+wosHRbz6Pd78GyfJHjSxoKGo6qa7K0ikMOi6305ubX1jcyu/XdjZ3ds/KB4eNU2casYbLJaxbgfUcCkUb6BAyduJ5jQKJG8Fo9uZ33rk2ohYPeA44X5EB0qEglG0Uqv8RG6IV+4VS27FnYOsEi8jJchQ7xW/uv2YpRFXyCQ1puO5CfoTqlEwyaeFbmp4QtmIDnjHUkUjbvzJ/NwpObNKn4SxtqWQzNXfExMaGTOOAtsZURyaZW8m/ud1Ugyv/YlQSYpcscWiMJUEYzL7nfSF5gzl2BLKtLC3EjakmjK0CRVsCN7yy6ukWa14l5WL+2qp5mZx5OEETuEcPLiCGtxBHRrAYATP8ApvTuK8OO/Ox6I152Qzx/AHzucPOJWOIQ==</latexit>w=1<latexit sha1_base64="TYN+hFdY8J1YuFNS6RU+XvMKLlw=">AAAB7nicbVDLSgNBEOyNrxhfUY9eBhPBU9iNoF6EgBePEcwDkiXMTmaTIbOzy0yvEkI+wosHRbz6Pd78GyfJHjSxoKGo6qa7K0ikMOi6305ubX1jcyu/XdjZ3ds/KB4eNU2casYbLJaxbgfUcCkUb6BAyduJ5jQKJG8Fo9uZ33rk2ohYPeA44X5EB0qEglG0Uqv8RG6IV+4VS27FnYOsEi8jJchQ7xW/uv2YpRFXyCQ1puO5CfoTqlEwyaeFbmp4QtmIDnjHUkUjbvzJ/NwpObNKn4SxtqWQzNXfExMaGTOOAtsZURyaZW8m/ud1Ugyv/YlQSYpcscWiMJUEYzL7nfSF5gzl2BLKtLC3EjakmjK0CRVsCN7yy6ukWa14l5WL+2qp5mZx5OEETuEcPLiCGtxBHRrAYATP8ApvTuK8OO/Ox6I152Qzx/AHzucPOJWOIQ==</latexit>w=1w=1<latexit sha1_base64="PxR4Kw8CYwEdBPAOGpVaxa3J79o=">AAAB7HicbVA9TwJBEJ3DL8Qv1NJmI5hYkTsabUxIbCwx8YAELmRv2YMNe3uX3TkNIfwGGwuNsfUH2flvXOAKBV8yyct7M5mZF6ZSGHTdb6ewsbm1vVPcLe3tHxwelY9PWibJNOM+S2SiOyE1XArFfRQoeSfVnMah5O1wfDv3249cG5GoB5ykPIjpUIlIMIpW8qtPN161X664NXcBsk68nFQgR7Nf/uoNEpbFXCGT1Jiu56YYTKlGwSSflXqZ4SllYzrkXUsVjbkJpotjZ+TCKgMSJdqWQrJQf09MaWzMJA5tZ0xxZFa9ufif180wug6mQqUZcsWWi6JMEkzI/HMyEJozlBNLKNPC3krYiGrK0OZTsiF4qy+vk1a95rk1775eabh5HEU4g3O4BA+uoAF30AQfGAh4hld4c5Tz4rw7H8vWgpPPnMIfOJ8/iN2NxQ==</latexit><latexit sha1_base64="PxR4Kw8CYwEdBPAOGpVaxa3J79o=">AAAB7HicbVA9TwJBEJ3DL8Qv1NJmI5hYkTsabUxIbCwx8YAELmRv2YMNe3uX3TkNIfwGGwuNsfUH2flvXOAKBV8yyct7M5mZF6ZSGHTdb6ewsbm1vVPcLe3tHxwelY9PWibJNOM+S2SiOyE1XArFfRQoeSfVnMah5O1wfDv3249cG5GoB5ykPIjpUIlIMIpW8qtPN161X664NXcBsk68nFQgR7Nf/uoNEpbFXCGT1Jiu56YYTKlGwSSflXqZ4SllYzrkXUsVjbkJpotjZ+TCKgMSJdqWQrJQf09MaWzMJA5tZ0xxZFa9ufif180wug6mQqUZcsWWi6JMEkzI/HMyEJozlBNLKNPC3krYiGrK0OZTsiF4qy+vk1a95rk1775eabh5HEU4g3O4BA+uoAF30AQfGAh4hld4c5Tz4rw7H8vWgpPPnMIfOJ8/iN2NxQ==</latexit><latexit sha1_base64="PxR4Kw8CYwEdBPAOGpVaxa3J79o=">AAAB7HicbVA9TwJBEJ3DL8Qv1NJmI5hYkTsabUxIbCwx8YAELmRv2YMNe3uX3TkNIfwGGwuNsfUH2flvXOAKBV8yyct7M5mZF6ZSGHTdb6ewsbm1vVPcLe3tHxwelY9PWibJNOM+S2SiOyE1XArFfRQoeSfVnMah5O1wfDv3249cG5GoB5ykPIjpUIlIMIpW8qtPN161X664NXcBsk68nFQgR7Nf/uoNEpbFXCGT1Jiu56YYTKlGwSSflXqZ4SllYzrkXUsVjbkJpotjZ+TCKgMSJdqWQrJQf09MaWzMJA5tZ0xxZFa9ufif180wug6mQqUZcsWWi6JMEkzI/HMyEJozlBNLKNPC3krYiGrK0OZTsiF4qy+vk1a95rk1775eabh5HEU4g3O4BA+uoAF30AQfGAh4hld4c5Tz4rw7H8vWgpPPnMIfOJ8/iN2NxQ==</latexit><latexit sha1_base64="PxR4Kw8CYwEdBPAOGpVaxa3J79o=">AAAB7HicbVA9TwJBEJ3DL8Qv1NJmI5hYkTsabUxIbCwx8YAELmRv2YMNe3uX3TkNIfwGGwuNsfUH2flvXOAKBV8yyct7M5mZF6ZSGHTdb6ewsbm1vVPcLe3tHxwelY9PWibJNOM+S2SiOyE1XArFfRQoeSfVnMah5O1wfDv3249cG5GoB5ykPIjpUIlIMIpW8qtPN161X664NXcBsk68nFQgR7Nf/uoNEpbFXCGT1Jiu56YYTKlGwSSflXqZ4SllYzrkXUsVjbkJpotjZ+TCKgMSJdqWQrJQf09MaWzMJA5tZ0xxZFa9ufif180wug6mQqUZcsWWi6JMEkzI/HMyEJozlBNLKNPC3krYiGrK0OZTsiF4qy+vk1a95rk1775eabh5HEU4g3O4BA+uoAF30AQfGAh4hld4c5Tz4rw7H8vWgpPPnMIfOJ8/iN2NxQ==</latexit>w=4<latexit sha1_base64="J5x7CslcjdB29TLFHzwLHVgwbFc=">AAAB7nicbVBNS8NAEJ3Ur1q/qh69LLaCp5IUQS9CwYvHCrYV2lA220m7dLMJuxulhP4ILx4U8erv8ea/cdvmoK0PBh7vzTAzL0gE18Z1v53C2vrG5lZxu7Szu7d/UD48aus4VQxbLBaxegioRsEltgw3Ah8ShTQKBHaC8c3M7zyi0jyW92aSoB/RoeQhZ9RYqVN9ItfkotovV9yaOwdZJV5OKpCj2S9/9QYxSyOUhgmqdddzE+NnVBnOBE5LvVRjQtmYDrFrqaQRaj+bnzslZ1YZkDBWtqQhc/X3REYjrSdRYDsjakZ62ZuJ/3nd1IRXfsZlkhqUbLEoTAUxMZn9TgZcITNiYgllittbCRtRRZmxCZVsCN7yy6ukXa95bs27q1ca9TyOIpzAKZyDB5fQgFtoQgsYjOEZXuHNSZwX5935WLQWnHzmGP7A+fwBOyKOHg==</latexit><latexit sha1_base64="J5x7CslcjdB29TLFHzwLHVgwbFc=">AAAB7nicbVBNS8NAEJ3Ur1q/qh69LLaCp5IUQS9CwYvHCrYV2lA220m7dLMJuxulhP4ILx4U8erv8ea/cdvmoK0PBh7vzTAzL0gE18Z1v53C2vrG5lZxu7Szu7d/UD48aus4VQxbLBaxegioRsEltgw3Ah8ShTQKBHaC8c3M7zyi0jyW92aSoB/RoeQhZ9RYqVN9ItfkotovV9yaOwdZJV5OKpCj2S9/9QYxSyOUhgmqdddzE+NnVBnOBE5LvVRjQtmYDrFrqaQRaj+bnzslZ1YZkDBWtqQhc/X3REYjrSdRYDsjakZ62ZuJ/3nd1IRXfsZlkhqUbLEoTAUxMZn9TgZcITNiYgllittbCRtRRZmxCZVsCN7yy6ukXa95bs27q1ca9TyOIpzAKZyDB5fQgFtoQgsYjOEZXuHNSZwX5935WLQWnHzmGP7A+fwBOyKOHg==</latexit><latexit sha1_base64="J5x7CslcjdB29TLFHzwLHVgwbFc=">AAAB7nicbVBNS8NAEJ3Ur1q/qh69LLaCp5IUQS9CwYvHCrYV2lA220m7dLMJuxulhP4ILx4U8erv8ea/cdvmoK0PBh7vzTAzL0gE18Z1v53C2vrG5lZxu7Szu7d/UD48aus4VQxbLBaxegioRsEltgw3Ah8ShTQKBHaC8c3M7zyi0jyW92aSoB/RoeQhZ9RYqVN9ItfkotovV9yaOwdZJV5OKpCj2S9/9QYxSyOUhgmqdddzE+NnVBnOBE5LvVRjQtmYDrFrqaQRaj+bnzslZ1YZkDBWtqQhc/X3REYjrSdRYDsjakZ62ZuJ/3nd1IRXfsZlkhqUbLEoTAUxMZn9TgZcITNiYgllittbCRtRRZmxCZVsCN7yy6ukXa95bs27q1ca9TyOIpzAKZyDB5fQgFtoQgsYjOEZXuHNSZwX5935WLQWnHzmGP7A+fwBOyKOHg==</latexit><latexit sha1_base64="J5x7CslcjdB29TLFHzwLHVgwbFc=">AAAB7nicbVBNS8NAEJ3Ur1q/qh69LLaCp5IUQS9CwYvHCrYV2lA220m7dLMJuxulhP4ILx4U8erv8ea/cdvmoK0PBh7vzTAzL0gE18Z1v53C2vrG5lZxu7Szu7d/UD48aus4VQxbLBaxegioRsEltgw3Ah8ShTQKBHaC8c3M7zyi0jyW92aSoB/RoeQhZ9RYqVN9ItfkotovV9yaOwdZJV5OKpCj2S9/9QYxSyOUhgmqdddzE+NnVBnOBE5LvVRjQtmYDrFrqaQRaj+bnzslZ1YZkDBWtqQhc/X3REYjrSdRYDsjakZ62ZuJ/3nd1IRXfsZlkhqUbLEoTAUxMZn9TgZcITNiYgllittbCRtRRZmxCZVsCN7yy6ukXa95bs27q1ca9TyOIpzAKZyDB5fQgFtoQgsYjOEZXuHNSZwX5935WLQWnHzmGP7A+fwBOyKOHg==</latexit>w=4<latexit sha1_base64="yk159hychE8xCZSXjIetLea6Nxg=">AAACD3icbVDLSsNAFL2prxpfqS7dDLaCq5IUQTdCwY3LCvYBbSiTyaQdOnkwM7GW0I/wA9zqJ7gTt36CX+BvOG2zsK0HBg7nnnMvc7yEM6ls+9sobGxube8Ud829/YPDI6t03JJxKghtkpjHouNhSTmLaFMxxWknERSHHqdtb3Q7m7cfqZAsjh7UJKFuiAcRCxjBSkt9q1TpzZdkgvpTNL65rPStsl2150DrxMlJGXI0+tZPz49JGtJIEY6l7Dp2otwMC8UIp1Ozl0qaYDLCA9rVNMIhlW42vzpF51rxURAL/SKF5urfRIZDKSehp50hVkO5NHtaLDFXAzPnf4FuqoJrN2NRkioakcX1IOVIxWhWDvKZoETxiSaYCKY/gMgQC0yUrtDUzTirPayTVq3q2FXnvlau23lHRTiFM7gAB66gDnfQgCYQGMMLvMKb8Wy8Gx/G58JaMPLMCSzB+PoFZoub1Q==</latexit><latexit sha1_base64="yk159hychE8xCZSXjIetLea6Nxg=">AAACD3icbVDLSsNAFL2prxpfqS7dDLaCq5IUQTdCwY3LCvYBbSiTyaQdOnkwM7GW0I/wA9zqJ7gTt36CX+BvOG2zsK0HBg7nnnMvc7yEM6ls+9sobGxube8Ud829/YPDI6t03JJxKghtkpjHouNhSTmLaFMxxWknERSHHqdtb3Q7m7cfqZAsjh7UJKFuiAcRCxjBSkt9q1TpzZdkgvpTNL65rPStsl2150DrxMlJGXI0+tZPz49JGtJIEY6l7Dp2otwMC8UIp1Ozl0qaYDLCA9rVNMIhlW42vzpF51rxURAL/SKF5urfRIZDKSehp50hVkO5NHtaLDFXAzPnf4FuqoJrN2NRkioakcX1IOVIxWhWDvKZoETxiSaYCKY/gMgQC0yUrtDUzTirPayTVq3q2FXnvlau23lHRTiFM7gAB66gDnfQgCYQGMMLvMKb8Wy8Gx/G58JaMPLMCSzB+PoFZoub1Q==</latexit><latexit sha1_base64="yk159hychE8xCZSXjIetLea6Nxg=">AAACD3icbVDLSsNAFL2prxpfqS7dDLaCq5IUQTdCwY3LCvYBbSiTyaQdOnkwM7GW0I/wA9zqJ7gTt36CX+BvOG2zsK0HBg7nnnMvc7yEM6ls+9sobGxube8Ud829/YPDI6t03JJxKghtkpjHouNhSTmLaFMxxWknERSHHqdtb3Q7m7cfqZAsjh7UJKFuiAcRCxjBSkt9q1TpzZdkgvpTNL65rPStsl2150DrxMlJGXI0+tZPz49JGtJIEY6l7Dp2otwMC8UIp1Ozl0qaYDLCA9rVNMIhlW42vzpF51rxURAL/SKF5urfRIZDKSehp50hVkO5NHtaLDFXAzPnf4FuqoJrN2NRkioakcX1IOVIxWhWDvKZoETxiSaYCKY/gMgQC0yUrtDUzTirPayTVq3q2FXnvlau23lHRTiFM7gAB66gDnfQgCYQGMMLvMKb8Wy8Gx/G58JaMPLMCSzB+PoFZoub1Q==</latexit><latexit sha1_base64="yk159hychE8xCZSXjIetLea6Nxg=">AAACD3icbVDLSsNAFL2prxpfqS7dDLaCq5IUQTdCwY3LCvYBbSiTyaQdOnkwM7GW0I/wA9zqJ7gTt36CX+BvOG2zsK0HBg7nnnMvc7yEM6ls+9sobGxube8Ud829/YPDI6t03JJxKghtkpjHouNhSTmLaFMxxWknERSHHqdtb3Q7m7cfqZAsjh7UJKFuiAcRCxjBSkt9q1TpzZdkgvpTNL65rPStsl2150DrxMlJGXI0+tZPz49JGtJIEY6l7Dp2otwMC8UIp1Ozl0qaYDLCA9rVNMIhlW42vzpF51rxURAL/SKF5urfRIZDKSehp50hVkO5NHtaLDFXAzPnf4FuqoJrN2NRkioakcX1IOVIxWhWDvKZoETxiSaYCKY/gMgQC0yUrtDUzTirPayTVq3q2FXnvlau23lHRTiFM7gAB66gDnfQgCYQGMMLvMKb8Wy8Gx/G58JaMPLMCSzB+PoFZoub1Q==</latexit><latexit sha1_base64="rg9avttdbWpm+EceIytk3eUXqyk=">AAACXnicZZDLSgMxFIbT8T5a62UjuCkWQVyUmYqXZUEqulO0rdCUkknP1NCZZEgy3sI8glt9Ax/Et3Dno5hpRRj9Nzn8Of/HzwmSiCnteZ8lZ2Z2bn5hccldXimvVtbWNzpKpJJCm4pIyNuAKIgYh7ZmOoLbRAKJgwi6wfg0/+/eg1RM8Bv9lEA/JiPOQkaJtta1GviDtZpX9yaq/h/8n6HWLH+ku2fu++VgvdTCQ0HTGLimEVGqRwUPQQKn0DcXrVZLS8IzF6cKEkLHZARmUrRg9ZJhqOGxb0aSJHeMPhYDqYyKBpGSPGWuizk8UBHHhA8NhgjyFlnP7xuDQyE0FxoUewZs2VqFpuZnWVYMxYyzPPib4jpPmMPMeJlbrWJ7TaA694uUIkbZHZEwOsHge2WLwr6pNywYJ0RiLhgf2nJmAmH2DUIFkoGqTnH28P7fM/8fOo26f1Q/uPJrzRM01SLaRjtoD/noGDXRObpEbUTRCL2gV/RW+nLmnbJTma46pZ/MJirI2foGJF29JQ==</latexit>s1<latexit sha1_base64="WpYBeCKACS3/n/2D1S8iRGJWNyg=">AAACXnicZZDNSgMxFIXT8a+OVqtuBDfFIoiLMlPxZ1mQiu4UrQpNKZn0Tg3OJEOSqdYwj+BW38AH8S3c+ShmWhFGzyaXk3s+DjdIIqa0532WnJnZufmF8qK7tFxZWa2urd8okUoKHSoiIe8CoiBiHDqa6QjuEgkkDiK4DR5O8v/bEUjFBL/W4wR6MRlyFjJKtLWuVL/Zr9a9hjdR7f/g/wz1VuUj3Tl13y/6a6U2HgiaxsA1jYhSXSp4CBI4hZ45b7fbWhKeuThVkBD6QIZgJkULVjcZhBqeemYoSXLP6FMxkMqoaBApyThzXczhkYo4JnxgMESQt8i6fs8YHAqhudCg2DNgy9YqNHU/y7JiKGac5cHfFNd5whxkxsvcWg3bawLVuV+kFDHK7oiE0QkGj5QtCnum0bRgnBCJuWB8YMuZCYTZNwgVSAaqNsXZw/t/z/x/uGk2/MPG/qVfbx2jqcpoC22jXeSjI9RCZ+gCdRBFQ/SCXtFb6cuZdyrO6nTVKf1kNlBBzuY3JlW9Jg==</latexit>s2<latexit sha1_base64="voGlaBZ2TT3bzE0s5KYSCDXC26U=">AAACXnicZZDLSgMxFIbT8T5arxvBTbEI4qLMtHhZFqSiO0VbhaaUTHqmhs4kQ5LxFuYR3Oob+CC+hTsfxUxbhNF/k8Of83/8nCCJmNKe91VyZmbn5hcWl9zllfLq2vrGZkeJVFJoUxEJeRcQBRHj0NZMR3CXSCBxEMFtMDrN/28fQCom+I1+TqAXkyFnIaNEW+ta9Rv99apX88aq/B/86VBtlj/TvTP347K/UWrhgaBpDFzTiCjVpYKHIIFT6JmLVqulJeGZi1MFCaEjMgQzLlqwuskg1PDUM0NJkntGn4qBVEZFg0hJnjPXxRweqYhjwgcGQwR5i6zr94zBoRCaCw2KvQC2bK1CU/WzLCuGYsZZHvxNcZ0nzGFmvMytVLC9JlCd+0VKEaPsjkgYHWPwg7JF4cDU6haMEyIxF4wPbDkzhjD7BqECyUBVJjh7eP/vmf8PnXrNP6o1rvxq8wRNtIh20C7aRz46Rk10ji5RG1E0RK/oDb2Xvp15p+ysTVad0jSzhQpytn8AKE29Jw==</latexit>s3<latexit sha1_base64="N+2T7tbNGX4dtlEeMMBnOeEa2E8=">AAACXnicZZDNSgMxFIXT8X+0tupGcFMsgrgoM/4vC1LRnaKtQlNKJr1TgzPJkGT8C/MIbvUNfBDfwp2PYqYtwujZ5HJyz8fhBknElPa8r5IzNT0zOze/4C4ulZcr1ZXVjhKppNCmIhLyNiAKIsahrZmO4DaRQOIggpvg/iT/v3kAqZjg1/o5gV5MhpyFjBJtrSvV3+9X617DG6n2f/AnQ71Z/ky3Tt2Pi/5KqYUHgqYxcE0jolSXCh6CBE6hZ85brZaWhGcuThUkhN6TIZhR0YLVTQahhqeeGUqS3DH6VAykMioaRErynLku5vBIRRwTPjAYIshbZF2/ZwwOhdBcaFDsBbBlaxWaup9lWTEUM87y4G+K6zxhDjLjZW6thu01gercL1KKGGV3RMLoCIMflC0KO6axa8E4IRJzwfjAljMjCLNvECqQDFRtjLOH9/+e+f/Q2W34h429S7/ePEZjzaMNtIm2kY+OUBOdoQvURhQN0St6Q++lb2fWKTuV8apTmmTWUEHO+g8qRb0o</latexit>s4<latexit sha1_base64="OUjEKK11BcjuQyzNz23eoMLRPTU=">AAACXnicZZDLSgMxFIbT8T5a62UjuCkWQVyUmYqXZUEqulO0VWhKyaRnauhMMiQZb2Eewa2+gQ/iW7jzUcy0RRj9Nzn8Of/HzwmSiCnteV8lZ2Z2bn5hccldXimvVtbWNzpKpJJCm4pIyLuAKIgYh7ZmOoK7RAKJgwhug9Fp/n/7AFIxwW/0cwK9mAw5Cxkl2lrXqn/YX6t5dW+s6v/Bnw61Zvkz3T1zPy7766UWHgiaxsA1jYhSXSp4CBI4hZ65aLVaWhKeuThVkBA6IkMw46IFq5sMQg1PPTOUJLln9KkYSGVUNIiU5DlzXczhkYo4JnxgMESQt8i6fs8YHAqhudCg2Atgy9YqNDU/y7JiKGac5cHfFNd5whxmxsvcahXbawLVuV+kFDHK7oiE0TEGPyhbFPZNvWHBOCESc8H4wJYzYwizbxAqkAxUdYKzh/f/nvn/0GnU/aP6wZVfa56giRbRNtpBe8hHx6iJztElaiOKhugVvaH30rcz75SdymTVKU0zm6ggZ+sHLD29KQ==</latexit>s5•Sixnetworkrequests(r1,...,r6)froms1(source)tos2(destination)arrivingconsecutivelyandinshortorder•Eachlinkhasenoughbandwidthtotransmittworequestsonly<latexit sha1_base64="7n2tZYVgCMXjCT+p4bltoLx1Dq4=">AAADX3icZVLRbtMwFE1WYCPA6OAJ8XJFi9SiqWqKYK+TUCV4G4Juk+qqcpybxmpiB9vpWqz8Aq/wazzyJzhtxRR2X3J14nN87rmOioxrMxz+9g9a9+4/ODx6GDx6/OT4afvk2aWWpWI4YTKT6jqiGjMucGK4yfC6UEjzKMOraPmh/n+1QqW5FF/NpsBZTheCJ5xR46D5ie+TgqpIru3gjNQiNzw2aWVfByTCBReWG8z5d6wCUnfwha9BoLmRagkKv5WojYZuT83DUyBZLI0+BTV/3+9ComQOXT0Pu9Db2e2DkTUyckjsiFxsTfSBKsVXXCyASaGRlYavMNsAFTFwATqVyoBUMSrYuxhTloJzu4SUakAhy0UKkTu/dV9fYxQVOucGnNVbo1I42YCgiG/nqubtznAw3BbcbcJ90/H2deFCG5NYsjJHYVhGtZ463wkqFAxn9tN4PK5vd4mVGgvKlnSBdrupBjQt4sTgemYXihYpZ+smoVRZE3Ah0U0VBMTtiMk8d9NaghnWLqppOLOWJFIaIQ1qNxhx2kYnthNWVdUk5VzwmviPJUzNsO8qO6wCAOKeEzJT402VpozblJEFZ1sZstLOKL6xg5ETrt8UEZKL2JmzWxHuvlGiUXHUsJNzwYf/x3y3uRwNwreD0edR53y4X8GR99J75fW80Dvzzr2P3oU38Zif+j/8n/6vgz+tw9Zxq707euDvOc+9RrVe/AXZvxYZ</latexit><latexit sha1_base64="rg9avttdbWpm+EceIytk3eUXqyk=">AAACXnicZZDLSgMxFIbT8T5a62UjuCkWQVyUmYqXZUEqulO0rdCUkknP1NCZZEgy3sI8glt9Ax/Et3Dno5hpRRj9Nzn8Of/HzwmSiCnteZ8lZ2Z2bn5hccldXimvVtbWNzpKpJJCm4pIyNuAKIgYh7ZmOoLbRAKJgwi6wfg0/+/eg1RM8Bv9lEA/JiPOQkaJtta1GviDtZpX9yaq/h/8n6HWLH+ku2fu++VgvdTCQ0HTGLimEVGqRwUPQQKn0DcXrVZLS8IzF6cKEkLHZARmUrRg9ZJhqOGxb0aSJHeMPhYDqYyKBpGSPGWuizk8UBHHhA8NhgjyFlnP7xuDQyE0FxoUewZs2VqFpuZnWVYMxYyzPPib4jpPmMPMeJlbrWJ7TaA694uUIkbZHZEwOsHge2WLwr6pNywYJ0RiLhgf2nJmAmH2DUIFkoGqTnH28P7fM/8fOo26f1Q/uPJrzRM01SLaRjtoD/noGDXRObpEbUTRCL2gV/RW+nLmnbJTma46pZ/MJirI2foGJF29JQ==</latexit>s1<latexit sha1_base64="WpYBeCKACS3/n/2D1S8iRGJWNyg=">AAACXnicZZDNSgMxFIXT8a+OVqtuBDfFIoiLMlPxZ1mQiu4UrQpNKZn0Tg3OJEOSqdYwj+BW38AH8S3c+ShmWhFGzyaXk3s+DjdIIqa0532WnJnZufmF8qK7tFxZWa2urd8okUoKHSoiIe8CoiBiHDqa6QjuEgkkDiK4DR5O8v/bEUjFBL/W4wR6MRlyFjJKtLWuVL/Zr9a9hjdR7f/g/wz1VuUj3Tl13y/6a6U2HgiaxsA1jYhSXSp4CBI4hZ45b7fbWhKeuThVkBD6QIZgJkULVjcZhBqeemYoSXLP6FMxkMqoaBApyThzXczhkYo4JnxgMESQt8i6fs8YHAqhudCg2DNgy9YqNHU/y7JiKGac5cHfFNd5whxkxsvcWg3bawLVuV+kFDHK7oiE0QkGj5QtCnum0bRgnBCJuWB8YMuZCYTZNwgVSAaqNsXZw/t/z/x/uGk2/MPG/qVfbx2jqcpoC22jXeSjI9RCZ+gCdRBFQ/SCXtFb6cuZdyrO6nTVKf1kNlBBzuY3JlW9Jg==</latexit>s2<latexit sha1_base64="voGlaBZ2TT3bzE0s5KYSCDXC26U=">AAACXnicZZDLSgMxFIbT8T5arxvBTbEI4qLMtHhZFqSiO0VbhaaUTHqmhs4kQ5LxFuYR3Oob+CC+hTsfxUxbhNF/k8Of83/8nCCJmNKe91VyZmbn5hcWl9zllfLq2vrGZkeJVFJoUxEJeRcQBRHj0NZMR3CXSCBxEMFtMDrN/28fQCom+I1+TqAXkyFnIaNEW+ta9Rv99apX88aq/B/86VBtlj/TvTP347K/UWrhgaBpDFzTiCjVpYKHIIFT6JmLVqulJeGZi1MFCaEjMgQzLlqwuskg1PDUM0NJkntGn4qBVEZFg0hJnjPXxRweqYhjwgcGQwR5i6zr94zBoRCaCw2KvQC2bK1CU/WzLCuGYsZZHvxNcZ0nzGFmvMytVLC9JlCd+0VKEaPsjkgYHWPwg7JF4cDU6haMEyIxF4wPbDkzhjD7BqECyUBVJjh7eP/vmf8PnXrNP6o1rvxq8wRNtIh20C7aRz46Rk10ji5RG1E0RK/oDb2Xvp15p+ysTVad0jSzhQpytn8AKE29Jw==</latexit>s3<latexit sha1_base64="N+2T7tbNGX4dtlEeMMBnOeEa2E8=">AAACXnicZZDNSgMxFIXT8X+0tupGcFMsgrgoM/4vC1LRnaKtQlNKJr1TgzPJkGT8C/MIbvUNfBDfwp2PYqYtwujZ5HJyz8fhBknElPa8r5IzNT0zOze/4C4ulZcr1ZXVjhKppNCmIhLyNiAKIsahrZmO4DaRQOIggpvg/iT/v3kAqZjg1/o5gV5MhpyFjBJtrSvV3+9X617DG6n2f/AnQ71Z/ky3Tt2Pi/5KqYUHgqYxcE0jolSXCh6CBE6hZ85brZaWhGcuThUkhN6TIZhR0YLVTQahhqeeGUqS3DH6VAykMioaRErynLku5vBIRRwTPjAYIshbZF2/ZwwOhdBcaFDsBbBlaxWaup9lWTEUM87y4G+K6zxhDjLjZW6thu01gercL1KKGGV3RMLoCIMflC0KO6axa8E4IRJzwfjAljMjCLNvECqQDFRtjLOH9/+e+f/Q2W34h429S7/ePEZjzaMNtIm2kY+OUBOdoQvURhQN0St6Q++lb2fWKTuV8apTmmTWUEHO+g8qRb0o</latexit>s4<latexit sha1_base64="OUjEKK11BcjuQyzNz23eoMLRPTU=">AAACXnicZZDLSgMxFIbT8T5a62UjuCkWQVyUmYqXZUEqulO0VWhKyaRnauhMMiQZb2Eewa2+gQ/iW7jzUcy0RRj9Nzn8Of/HzwmSiCnteV8lZ2Z2bn5hccldXimvVtbWNzpKpJJCm4pIyLuAKIgYh7ZmOoK7RAKJgwhug9Fp/n/7AFIxwW/0cwK9mAw5Cxkl2lrXqn/YX6t5dW+s6v/Bnw61Zvkz3T1zPy7766UWHgiaxsA1jYhSXSp4CBI4hZ65aLVaWhKeuThVkBA6IkMw46IFq5sMQg1PPTOUJLln9KkYSGVUNIiU5DlzXczhkYo4JnxgMESQt8i6fs8YHAqhudCg2Atgy9YqNDU/y7JiKGac5cHfFNd5whxmxsvcahXbawLVuV+kFDHK7oiE0TEGPyhbFPZNvWHBOCESc8H4wJYzYwizbxAqkAxUdYKzh/f/nvn/0GnU/aP6wZVfa56giRbRNtpBe8hHx6iJztElaiOKhugVvaH30rcz75SdymTVKU0zm6ggZ+sHLD29KQ==</latexit>s5<latexit sha1_base64="H3BjLVk/EJEiAag8GqAuvJBIpqE=">AAACXnicdZDNahsxFIXlSZqfadPEKYVANkO9KV0Mkl3nZ2cohnaXkDoJWMZo5DuuyIw0SHL+xDxCtsnz5CUCWbVv0mjstjCLno0uR/d8HG5SZMJYjJ8bwdLyq5XVtfXw9ZuNt5tbze1To2aaw4CrTOnzhBnIhISBFTaD80IDy5MMzpKLL9X/2SVoI5T8bm8KGOVsKkUqOLPeOtHjznirhWNCCMYHEY47uH3wuRow7mJyGBE/VGr1lp5+P77/CUfjZqNPJ4rPcpCWZ8yYIVcyBQ2Sw8h96/f7VjNZhnRmoGD8gk3BzYvWrGExSS1cj9xUs+KH4Nf1wExndYNpzW7KMKQSrrjKcyYnjkIGVYtySEbO0VQpK5UFI26BerY1qWuRsizroVxIUQX/paStEq5bOlyGUUT9NYHbyq9T6hjjd1Qh+BxDL40vCp9c3PZgWjBNpRJy4su5OUT4N0kNaAEmWuD84f9eN/r/cNqOyV7cOSatHkYLraFd9AF9RATtox76io7QAHE0RXfoHj00fgUrwUawuVgNGn8y71BNwc4LWKe+5A==</latexit>r3<latexit sha1_base64="ey0JyHDt+RTbkLd7WGxa5WrWEOU=">AAACXnicdZBBSyMxGIbT0XXdWV11ZUHwMmwvsoch01pLbwUp6E3RqtCUkkm/6QZnkiFJXd0wP8Gr/h7/hOBJ/4lmWl2Yw76XfLz53oeXL85Trg3GTzVvYfHT0uflL/7XldVva+sb38+0nCoGfSZTqS5iqiHlAvqGmxQucgU0i1M4jy/3y//zK1CaS3FqbnIYZnQieMIZNc46UaPGaL2Ow2YLt1utAIeN3b1O1HQDxu1OZzeI3FCq3l14fH348QxHo41aj4wlm2YgDEup1gMmRQIKBIOhPez1ekZRUfhkqiGn7JJOwM6KVqxBPk4MXA/tRNH8N2fX1cBUpVWDKkVvCt8nAv4wmWVUjC2BFMoWxSAaWksSKY2QBjT/C8SxjU5sPSqKohrKuOBl8F9KmDJhW4XFhR8ExF0TmCn9KqWK0W5H5pzNMORKu6Lwy4YNByY5VURILsaunJ1BuHvjRIPioIM5zh3+47rB/4ezRhjthc3jqN7FaK5ltI1+oh0UoTbqogN0hPqIoQm6RXfovvbiLXmr3tp81au9ZzZRRd7WG4v/vv8=</latexit>r2<latexit sha1_base64="PaByBY/gz5zdSEIdX+1eGyLKu04=">AAACXnicdZDNTttAFIUnpqSpIfwUVarUjUU2iIVlJwToLhKK1O5AEEDKRNF4cp2OsGesmQmQjvwI3cLz8BJIXZU3oeMYkLzgbObqzD2fjm6UJUzpIPhbc5Y+LNc/Nj65K6vNtfWNzc/nSswkhQEViZCXEVGQMA4DzXQCl5kEkkYJXERXR8X/xTVIxQQ/0/MMRimZchYzSrS1TuU4HG+0Ar/T7u6197xy6HbKoXP43Qv9YKFWb+nx+eHLPzgeb9b6eCLoLAWuaUKUGlLBY5DAKYzMz36/ryXhuYtnCjJCr8gUzKJoxRpmk1jD7chMJcl+MXpbDcxkUjWIlGSeuy7mcENFmhI+MRgSKFrkw3BkDI6F0FxoUOw3YMvWKjatMM/zaihlnBXBtxTXRcJ0cxPkrudhe02guvCrlCpG2R2RMbrA4Gtli8Ku8dsWjDMiMReMT2w5s4Aw+0axAslAeSXOHv71ut77w3nbD/f9zknY6gWoVAN9Q9toB4XoAPXQD3SMBoiiKfqD7tB97cmpO01nvVx1ai+ZLVSR8/U/fIe+9w==</latexit>r1<latexit sha1_base64="j6tUqvmllSYOQ8uZddfWcF8NxEo=">AAACZnicdZHLTsMwEEXd8A5vEGLBJtANYhElobSwQ0KVYAcSBaS6Qo47KVYTO7JdXlY+gy18F3/AZ+CUgpQFs/Hoeu7R1Uycp0zpIPisOVPTM7Nz8wvu4tLyyura+saNEiNJoUNFKuRdTBSkjENHM53CXS6BZHEKt/HwrPy/fQSpmODX+iWHXkYGnCWMEm2l7pngA1Blu3u/Vg/8k+Nm1Gh6gR8ErTAKyyZqNQ4bXmiVsupoUpf367U27gs6yoBrmhKlulTwBCRwCj1z0W63tSS8cPFIQU7okAzAjANXpG7eTzQ898xAkvyB0eeqYSTTqkCkJC+F62IOT1RkGeF9gyGFMkXRDXvG4EQIzYUGxV4BW7ZWiamHRVFUTRnjrDT+ubguHeaoMEHheh62WwWqS71KqWKUnRE5o2MMflQ2KBwYP7JgnBOJuWC8b8OZMYTZN04USAbK+8HZxf9u1/u/uYn8sOkfXkX102Bygnm0g/bQPgpRC52ic3SJOogigd7QO/qofTkrzpaz/TPq1CaeTVQpx/sGfba+SA==</latexit>Congestion!<latexit sha1_base64="ey0JyHDt+RTbkLd7WGxa5WrWEOU=">AAACXnicdZBBSyMxGIbT0XXdWV11ZUHwMmwvsoch01pLbwUp6E3RqtCUkkm/6QZnkiFJXd0wP8Gr/h7/hOBJ/4lmWl2Yw76XfLz53oeXL85Trg3GTzVvYfHT0uflL/7XldVva+sb38+0nCoGfSZTqS5iqiHlAvqGmxQucgU0i1M4jy/3y//zK1CaS3FqbnIYZnQieMIZNc46UaPGaL2Ow2YLt1utAIeN3b1O1HQDxu1OZzeI3FCq3l14fH348QxHo41aj4wlm2YgDEup1gMmRQIKBIOhPez1ekZRUfhkqiGn7JJOwM6KVqxBPk4MXA/tRNH8N2fX1cBUpVWDKkVvCt8nAv4wmWVUjC2BFMoWxSAaWksSKY2QBjT/C8SxjU5sPSqKohrKuOBl8F9KmDJhW4XFhR8ExF0TmCn9KqWK0W5H5pzNMORKu6Lwy4YNByY5VURILsaunJ1BuHvjRIPioIM5zh3+47rB/4ezRhjthc3jqN7FaK5ltI1+oh0UoTbqogN0hPqIoQm6RXfovvbiLXmr3tp81au9ZzZRRd7WG4v/vv8=</latexit>r2<latexit sha1_base64="PaByBY/gz5zdSEIdX+1eGyLKu04=">AAACXnicdZDNTttAFIUnpqSpIfwUVarUjUU2iIVlJwToLhKK1O5AEEDKRNF4cp2OsGesmQmQjvwI3cLz8BJIXZU3oeMYkLzgbObqzD2fjm6UJUzpIPhbc5Y+LNc/Nj65K6vNtfWNzc/nSswkhQEViZCXEVGQMA4DzXQCl5kEkkYJXERXR8X/xTVIxQQ/0/MMRimZchYzSrS1TuU4HG+0Ar/T7u6197xy6HbKoXP43Qv9YKFWb+nx+eHLPzgeb9b6eCLoLAWuaUKUGlLBY5DAKYzMz36/ryXhuYtnCjJCr8gUzKJoxRpmk1jD7chMJcl+MXpbDcxkUjWIlGSeuy7mcENFmhI+MRgSKFrkw3BkDI6F0FxoUOw3YMvWKjatMM/zaihlnBXBtxTXRcJ0cxPkrudhe02guvCrlCpG2R2RMbrA4Gtli8Ku8dsWjDMiMReMT2w5s4Aw+0axAslAeSXOHv71ut77w3nbD/f9zknY6gWoVAN9Q9toB4XoAPXQD3SMBoiiKfqD7tB97cmpO01nvVx1ai+ZLVSR8/U/fIe+9w==</latexit>r1<latexit sha1_base64="ey0JyHDt+RTbkLd7WGxa5WrWEOU=">AAACXnicdZBBSyMxGIbT0XXdWV11ZUHwMmwvsoch01pLbwUp6E3RqtCUkkm/6QZnkiFJXd0wP8Gr/h7/hOBJ/4lmWl2Yw76XfLz53oeXL85Trg3GTzVvYfHT0uflL/7XldVva+sb38+0nCoGfSZTqS5iqiHlAvqGmxQucgU0i1M4jy/3y//zK1CaS3FqbnIYZnQieMIZNc46UaPGaL2Ow2YLt1utAIeN3b1O1HQDxu1OZzeI3FCq3l14fH348QxHo41aj4wlm2YgDEup1gMmRQIKBIOhPez1ekZRUfhkqiGn7JJOwM6KVqxBPk4MXA/tRNH8N2fX1cBUpVWDKkVvCt8nAv4wmWVUjC2BFMoWxSAaWksSKY2QBjT/C8SxjU5sPSqKohrKuOBl8F9KmDJhW4XFhR8ExF0TmCn9KqWK0W5H5pzNMORKu6Lwy4YNByY5VURILsaunJ1BuHvjRIPioIM5zh3+47rB/4ezRhjthc3jqN7FaK5ltI1+oh0UoTbqogN0hPqIoQm6RXfovvbiLXmr3tp81au9ZzZRRd7WG4v/vv8=</latexit>r2<latexit sha1_base64="PaByBY/gz5zdSEIdX+1eGyLKu04=">AAACXnicdZDNTttAFIUnpqSpIfwUVarUjUU2iIVlJwToLhKK1O5AEEDKRNF4cp2OsGesmQmQjvwI3cLz8BJIXZU3oeMYkLzgbObqzD2fjm6UJUzpIPhbc5Y+LNc/Nj65K6vNtfWNzc/nSswkhQEViZCXEVGQMA4DzXQCl5kEkkYJXERXR8X/xTVIxQQ/0/MMRimZchYzSrS1TuU4HG+0Ar/T7u6197xy6HbKoXP43Qv9YKFWb+nx+eHLPzgeb9b6eCLoLAWuaUKUGlLBY5DAKYzMz36/ryXhuYtnCjJCr8gUzKJoxRpmk1jD7chMJcl+MXpbDcxkUjWIlGSeuy7mcENFmhI+MRgSKFrkw3BkDI6F0FxoUOw3YMvWKjatMM/zaihlnBXBtxTXRcJ0cxPkrudhe02guvCrlCpG2R2RMbrA4Gtli8Ku8dsWjDMiMReMT2w5s4Aw+0axAslAeSXOHv71ut77w3nbD/f9zknY6gWoVAN9Q9toB4XoAPXQD3SMBoiiKfqD7tB97cmpO01nvVx1ai+ZLVSR8/U/fIe+9w==</latexit>r1<latexit sha1_base64="xdy2sD1rwJEQLM0CskWgipRqcJ0=">AAACd3icZZHLSgMxFIbT8T7equ504WBFxEWZqahbRQq6U7AqNKVk0jM1NJMMSVovYcCncauv46O4M1OLMHo2Ofw5/8efkzjjTJsw/Kx4U9Mzs3PzC/7i0vLKanVt/VbLoaLQopJLdR8TDZwJaBlmONxnCkgac7iLB+fF/d0IlGZS3JjnDDop6QuWMEqMk7rVzbPEgArMAwREKTYiPJBJsKu6h7vdai2sh+MK/jfRpKmhSV111ypN3JN0mIIwlBOt21SKBBQICh172Ww2jSIi9/FQQ0bogPTBjl9QktpZz0V66ti+ItkDo09lw1DxsuBik+fc97GARyrTlIiexcChSJG3o461OJHSCGlAsxfAjm10YmtRnudlU8oEK4y/LmEKhz3KbZj7QYDdmoGaQi9TyhjtZmTG6BiDR9oFhQNbbzgwzojCQjLRc+HsGMLcGScaFAMd/ODc4qO/a/7f3Dbq0XH98LpROw0nXzCPttAO2kcROkGn6AJdoRai6BW9oXf0Ufnytr09b/9n1KtMPBuoVF70DQpIw1g=</latexit>Afterthearrivalofr3<latexit sha1_base64="jC9nWf/8PknJkQv2iahPLsTQUtI=">AAACd3icZZHLSgMxFIbT8T7equ504WBFxEWZqbetIgXdKVgVmlIy6ZkazCRDktZLGPBp3Orr+CjuzNQijJ5NDn/O//HnJM440yYMPyvexOTU9MzsnD+/sLi0XF1ZvdFyoCi0qORS3cVEA2cCWoYZDneZApLGHG7jh7Pi/nYISjMprs1zBp2U9AVLGCXGSd3q+mliQAXmHgKiFBsSHsgk2Fbdg+1utRbWw1EF/5to3NTQuC67K5Um7kk6SEEYyonWbSpFAgoEhY69aDabRhGR+3igISP0gfTBjl5QktpZz0V66ti+Itk9o09lw0DxsuBik+fc97GARyrTlIiexcChSJG3o461OJHSCGlAsxfAjm10YmtRnudlU8oEK4y/LmEKhz3MbZj7QYDdmoGaQi9TyhjtZmTG6AiDh9oFhT1bbzgwzojCQjLRc+HsCMLcGScaFAMd/ODc4qO/a/7f3DTq0VF9/6pROwnHXzCLNtAW2kUROkYn6Bxdohai6BW9oXf0UfnyNr0db/dn1KuMPWuoVF70DQxBw1k=</latexit>Afterthearrivalofr4<latexit sha1_base64="H3BjLVk/EJEiAag8GqAuvJBIpqE=">AAACXnicdZDNahsxFIXlSZqfadPEKYVANkO9KV0Mkl3nZ2cohnaXkDoJWMZo5DuuyIw0SHL+xDxCtsnz5CUCWbVv0mjstjCLno0uR/d8HG5SZMJYjJ8bwdLyq5XVtfXw9ZuNt5tbze1To2aaw4CrTOnzhBnIhISBFTaD80IDy5MMzpKLL9X/2SVoI5T8bm8KGOVsKkUqOLPeOtHjznirhWNCCMYHEY47uH3wuRow7mJyGBE/VGr1lp5+P77/CUfjZqNPJ4rPcpCWZ8yYIVcyBQ2Sw8h96/f7VjNZhnRmoGD8gk3BzYvWrGExSS1cj9xUs+KH4Nf1wExndYNpzW7KMKQSrrjKcyYnjkIGVYtySEbO0VQpK5UFI26BerY1qWuRsizroVxIUQX/paStEq5bOlyGUUT9NYHbyq9T6hjjd1Qh+BxDL40vCp9c3PZgWjBNpRJy4su5OUT4N0kNaAEmWuD84f9eN/r/cNqOyV7cOSatHkYLraFd9AF9RATtox76io7QAHE0RXfoHj00fgUrwUawuVgNGn8y71BNwc4LWKe+5A==</latexit>r3<latexit sha1_base64="bbte2K99V0qo5ul/SZhY5w1BUao=">AAACZnicbVFdS+NAFJ1kXT+6q1ZF9sGXwSpU0JJUdH0RBB/cxwpWhaZbJpObdnCSCTM3Sgn5k7757Is/w0lbxK8DA4dz7r1z50yYSWHQ854c98fcz/mFxaXar9/LK6v1tfVro3LNocuVVPo2ZAakSKGLAiXcZhpYEkq4Ce/OK//mHrQRKr3CcQb9hA1TEQvO0EqDehmEsQEtwNCLzkFk2T1EdOeBntJAxlIpHcSa8aLpt45okDAcCSxwpMGMlIzKvf/tcup9Y9KDNzFHIcsm7FPcq1oCPRm9M6g3vJY3Af1K/BlpkBk6g/pjECmeJ5Ail8yYnu9l2C+YRsEllLUgN5AxfseG0LM0ZQmYfjGJqaS7VolorLQ9KdKJ+r6jYIkx4yS0ldXa5rNXid95vRzjk34h0ixHSPn0ojiXFBWtMqeR0MBRji1hXAu7K+UjZmNF+zM1G4L/+clfyXW75R+3Di/bjTNvFsci2SLbpEl88peckX+kQ7qEk2dnyVl3NpwXd8XddP9MS11n1rNBPsClr1/KtzI=</latexit>GP-derivedw=b(1.5threshold)2(1.5threshold util(e,t))2c<latexit sha1_base64="rg9avttdbWpm+EceIytk3eUXqyk=">AAACXnicZZDLSgMxFIbT8T5a62UjuCkWQVyUmYqXZUEqulO0rdCUkknP1NCZZEgy3sI8glt9Ax/Et3Dno5hpRRj9Nzn8Of/HzwmSiCnteZ8lZ2Z2bn5hccldXimvVtbWNzpKpJJCm4pIyNuAKIgYh7ZmOoLbRAKJgwi6wfg0/+/eg1RM8Bv9lEA/JiPOQkaJtta1GviDtZpX9yaq/h/8n6HWLH+ku2fu++VgvdTCQ0HTGLimEVGqRwUPQQKn0DcXrVZLS8IzF6cKEkLHZARmUrRg9ZJhqOGxb0aSJHeMPhYDqYyKBpGSPGWuizk8UBHHhA8NhgjyFlnP7xuDQyE0FxoUewZs2VqFpuZnWVYMxYyzPPib4jpPmMPMeJlbrWJ7TaA694uUIkbZHZEwOsHge2WLwr6pNywYJ0RiLhgf2nJmAmH2DUIFkoGqTnH28P7fM/8fOo26f1Q/uPJrzRM01SLaRjtoD/noGDXRObpEbUTRCL2gV/RW+nLmnbJTma46pZ/MJirI2foGJF29JQ==</latexit>s1<latexit sha1_base64="WpYBeCKACS3/n/2D1S8iRGJWNyg=">AAACXnicZZDNSgMxFIXT8a+OVqtuBDfFIoiLMlPxZ1mQiu4UrQpNKZn0Tg3OJEOSqdYwj+BW38AH8S3c+ShmWhFGzyaXk3s+DjdIIqa0532WnJnZufmF8qK7tFxZWa2urd8okUoKHSoiIe8CoiBiHDqa6QjuEgkkDiK4DR5O8v/bEUjFBL/W4wR6MRlyFjJKtLWuVL/Zr9a9hjdR7f/g/wz1VuUj3Tl13y/6a6U2HgiaxsA1jYhSXSp4CBI4hZ45b7fbWhKeuThVkBD6QIZgJkULVjcZhBqeemYoSXLP6FMxkMqoaBApyThzXczhkYo4JnxgMESQt8i6fs8YHAqhudCg2DNgy9YqNHU/y7JiKGac5cHfFNd5whxkxsvcWg3bawLVuV+kFDHK7oiE0QkGj5QtCnum0bRgnBCJuWB8YMuZCYTZNwgVSAaqNsXZw/t/z/x/uGk2/MPG/qVfbx2jqcpoC22jXeSjI9RCZ+gCdRBFQ/SCXtFb6cuZdyrO6nTVKf1kNlBBzuY3JlW9Jg==</latexit>s2<latexit sha1_base64="voGlaBZ2TT3bzE0s5KYSCDXC26U=">AAACXnicZZDLSgMxFIbT8T5arxvBTbEI4qLMtHhZFqSiO0VbhaaUTHqmhs4kQ5LxFuYR3Oob+CC+hTsfxUxbhNF/k8Of83/8nCCJmNKe91VyZmbn5hcWl9zllfLq2vrGZkeJVFJoUxEJeRcQBRHj0NZMR3CXSCBxEMFtMDrN/28fQCom+I1+TqAXkyFnIaNEW+ta9Rv99apX88aq/B/86VBtlj/TvTP347K/UWrhgaBpDFzTiCjVpYKHIIFT6JmLVqulJeGZi1MFCaEjMgQzLlqwuskg1PDUM0NJkntGn4qBVEZFg0hJnjPXxRweqYhjwgcGQwR5i6zr94zBoRCaCw2KvQC2bK1CU/WzLCuGYsZZHvxNcZ0nzGFmvMytVLC9JlCd+0VKEaPsjkgYHWPwg7JF4cDU6haMEyIxF4wPbDkzhjD7BqECyUBVJjh7eP/vmf8PnXrNP6o1rvxq8wRNtIh20C7aRz46Rk10ji5RG1E0RK/oDb2Xvp15p+ysTVad0jSzhQpytn8AKE29Jw==</latexit>s3<latexit sha1_base64="N+2T7tbNGX4dtlEeMMBnOeEa2E8=">AAACXnicZZDNSgMxFIXT8X+0tupGcFMsgrgoM/4vC1LRnaKtQlNKJr1TgzPJkGT8C/MIbvUNfBDfwp2PYqYtwujZ5HJyz8fhBknElPa8r5IzNT0zOze/4C4ulZcr1ZXVjhKppNCmIhLyNiAKIsahrZmO4DaRQOIggpvg/iT/v3kAqZjg1/o5gV5MhpyFjBJtrSvV3+9X617DG6n2f/AnQ71Z/ky3Tt2Pi/5KqYUHgqYxcE0jolSXCh6CBE6hZ85brZaWhGcuThUkhN6TIZhR0YLVTQahhqeeGUqS3DH6VAykMioaRErynLku5vBIRRwTPjAYIshbZF2/ZwwOhdBcaFDsBbBlaxWaup9lWTEUM87y4G+K6zxhDjLjZW6thu01gercL1KKGGV3RMLoCIMflC0KO6axa8E4IRJzwfjAljMjCLNvECqQDFRtjLOH9/+e+f/Q2W34h429S7/ePEZjzaMNtIm2kY+OUBOdoQvURhQN0St6Q++lb2fWKTuV8apTmmTWUEHO+g8qRb0o</latexit>s4<latexit sha1_base64="OUjEKK11BcjuQyzNz23eoMLRPTU=">AAACXnicZZDLSgMxFIbT8T5a62UjuCkWQVyUmYqXZUEqulO0VWhKyaRnauhMMiQZb2Eewa2+gQ/iW7jzUcy0RRj9Nzn8Of/HzwmSiCnteV8lZ2Z2bn5hccldXimvVtbWNzpKpJJCm4pIyLuAKIgYh7ZmOoK7RAKJgwhug9Fp/n/7AFIxwW/0cwK9mAw5Cxkl2lrXqn/YX6t5dW+s6v/Bnw61Zvkz3T1zPy7766UWHgiaxsA1jYhSXSp4CBI4hZ65aLVaWhKeuThVkBA6IkMw46IFq5sMQg1PPTOUJLln9KkYSGVUNIiU5DlzXczhkYo4JnxgMESQt8i6fs8YHAqhudCg2Atgy9YqNDU/y7JiKGac5cHfFNd5whxmxsvcahXbawLVuV+kFDHK7oiE0TEGPyhbFPZNvWHBOCESc8H4wJYzYwizbxAqkAxUdYKzh/f/nvn/0GnU/aP6wZVfa56giRbRNtpBe8hHx6iJztElaiOKhugVvaH30rcz75SdymTVKU0zm6ggZ+sHLD29KQ==</latexit>s5<latexit sha1_base64="rg9avttdbWpm+EceIytk3eUXqyk=">AAACXnicZZDLSgMxFIbT8T5a62UjuCkWQVyUmYqXZUEqulO0rdCUkknP1NCZZEgy3sI8glt9Ax/Et3Dno5hpRRj9Nzn8Of/HzwmSiCnteZ8lZ2Z2bn5hccldXimvVtbWNzpKpJJCm4pIyNuAKIgYh7ZmOoLbRAKJgwi6wfg0/+/eg1RM8Bv9lEA/JiPOQkaJtta1GviDtZpX9yaq/h/8n6HWLH+ku2fu++VgvdTCQ0HTGLimEVGqRwUPQQKn0DcXrVZLS8IzF6cKEkLHZARmUrRg9ZJhqOGxb0aSJHeMPhYDqYyKBpGSPGWuizk8UBHHhA8NhgjyFlnP7xuDQyE0FxoUewZs2VqFpuZnWVYMxYyzPPib4jpPmMPMeJlbrWJ7TaA694uUIkbZHZEwOsHge2WLwr6pNywYJ0RiLhgf2nJmAmH2DUIFkoGqTnH28P7fM/8fOo26f1Q/uPJrzRM01SLaRjtoD/noGDXRObpEbUTRCL2gV/RW+nLmnbJTma46pZ/MJirI2foGJF29JQ==</latexit>s1<latexit sha1_base64="N+2T7tbNGX4dtlEeMMBnOeEa2E8=">AAACXnicZZDNSgMxFIXT8X+0tupGcFMsgrgoM/4vC1LRnaKtQlNKJr1TgzPJkGT8C/MIbvUNfBDfwp2PYqYtwujZ5HJyz8fhBknElPa8r5IzNT0zOze/4C4ulZcr1ZXVjhKppNCmIhLyNiAKIsahrZmO4DaRQOIggpvg/iT/v3kAqZjg1/o5gV5MhpyFjBJtrSvV3+9X617DG6n2f/AnQ71Z/ky3Tt2Pi/5KqYUHgqYxcE0jolSXCh6CBE6hZ85brZaWhGcuThUkhN6TIZhR0YLVTQahhqeeGUqS3DH6VAykMioaRErynLku5vBIRRwTPjAYIshbZF2/ZwwOhdBcaFDsBbBlaxWaup9lWTEUM87y4G+K6zxhDjLjZW6thu01gercL1KKGGV3RMLoCIMflC0KO6axa8E4IRJzwfjAljMjCLNvECqQDFRtjLOH9/+e+f/Q2W34h429S7/ePEZjzaMNtIm2kY+OUBOdoQvURhQN0St6Q++lb2fWKTuV8apTmmTWUEHO+g8qRb0o</latexit>s4<latexit sha1_base64="OUjEKK11BcjuQyzNz23eoMLRPTU=">AAACXnicZZDLSgMxFIbT8T5a62UjuCkWQVyUmYqXZUEqulO0VWhKyaRnauhMMiQZb2Eewa2+gQ/iW7jzUcy0RRj9Nzn8Of/HzwmSiCnteV8lZ2Z2bn5hccldXimvVtbWNzpKpJJCm4pIyLuAKIgYh7ZmOoK7RAKJgwhug9Fp/n/7AFIxwW/0cwK9mAw5Cxkl2lrXqn/YX6t5dW+s6v/Bnw61Zvkz3T1zPy7766UWHgiaxsA1jYhSXSp4CBI4hZ65aLVaWhKeuThVkBA6IkMw46IFq5sMQg1PPTOUJLln9KkYSGVUNIiU5DlzXczhkYo4JnxgMESQt8i6fs8YHAqhudCg2Atgy9YqNDU/y7JiKGac5cHfFNd5whxmxsvcahXbawLVuV+kFDHK7oiE0TEGPyhbFPZNvWHBOCESc8H4wJYzYwizbxAqkAxUdYKzh/f/nvn/0GnU/aP6wZVfa56giRbRNtpBe8hHx6iJztElaiOKhugVvaH30rcz75SdymTVKU0zm6ggZ+sHLD29KQ==</latexit>s5<latexit sha1_base64="voGlaBZ2TT3bzE0s5KYSCDXC26U=">AAACXnicZZDLSgMxFIbT8T5arxvBTbEI4qLMtHhZFqSiO0VbhaaUTHqmhs4kQ5LxFuYR3Oob+CC+hTsfxUxbhNF/k8Of83/8nCCJmNKe91VyZmbn5hcWl9zllfLq2vrGZkeJVFJoUxEJeRcQBRHj0NZMR3CXSCBxEMFtMDrN/28fQCom+I1+TqAXkyFnIaNEW+ta9Rv99apX88aq/B/86VBtlj/TvTP347K/UWrhgaBpDFzTiCjVpYKHIIFT6JmLVqulJeGZi1MFCaEjMgQzLlqwuskg1PDUM0NJkntGn4qBVEZFg0hJnjPXxRweqYhjwgcGQwR5i6zr94zBoRCaCw2KvQC2bK1CU/WzLCuGYsZZHvxNcZ0nzGFmvMytVLC9JlCd+0VKEaPsjkgYHWPwg7JF4cDU6haMEyIxF4wPbDkzhjD7BqECyUBVJjh7eP/vmf8PnXrNP6o1rvxq8wRNtIh20C7aRz46Rk10ji5RG1E0RK/oDb2Xvp15p+ysTVad0jSzhQpytn8AKE29Jw==</latexit>s3<latexit sha1_base64="WpYBeCKACS3/n/2D1S8iRGJWNyg=">AAACXnicZZDNSgMxFIXT8a+OVqtuBDfFIoiLMlPxZ1mQiu4UrQpNKZn0Tg3OJEOSqdYwj+BW38AH8S3c+ShmWhFGzyaXk3s+DjdIIqa0532WnJnZufmF8qK7tFxZWa2urd8okUoKHSoiIe8CoiBiHDqa6QjuEgkkDiK4DR5O8v/bEUjFBL/W4wR6MRlyFjJKtLWuVL/Zr9a9hjdR7f/g/wz1VuUj3Tl13y/6a6U2HgiaxsA1jYhSXSp4CBI4hZ45b7fbWhKeuThVkBD6QIZgJkULVjcZhBqeemYoSXLP6FMxkMqoaBApyThzXczhkYo4JnxgMESQt8i6fs8YHAqhudCg2DNgy9YqNHU/y7JiKGac5cHfFNd5whxkxsvcWg3bawLVuV+kFDHK7oiE0QkGj5QtCnum0bRgnBCJuWB8YMuZCYTZNwgVSAaqNsXZw/t/z/x/uGk2/MPG/qVfbx2jqcpoC22jXeSjI9RCZ+gCdRBFQ/SCXtFb6cuZdyrO6nTVKf1kNlBBzuY3JlW9Jg==</latexit>s2<latexit sha1_base64="H3BjLVk/EJEiAag8GqAuvJBIpqE=">AAACXnicdZDNahsxFIXlSZqfadPEKYVANkO9KV0Mkl3nZ2cohnaXkDoJWMZo5DuuyIw0SHL+xDxCtsnz5CUCWbVv0mjstjCLno0uR/d8HG5SZMJYjJ8bwdLyq5XVtfXw9ZuNt5tbze1To2aaw4CrTOnzhBnIhISBFTaD80IDy5MMzpKLL9X/2SVoI5T8bm8KGOVsKkUqOLPeOtHjznirhWNCCMYHEY47uH3wuRow7mJyGBE/VGr1lp5+P77/CUfjZqNPJ4rPcpCWZ8yYIVcyBQ2Sw8h96/f7VjNZhnRmoGD8gk3BzYvWrGExSS1cj9xUs+KH4Nf1wExndYNpzW7KMKQSrrjKcyYnjkIGVYtySEbO0VQpK5UFI26BerY1qWuRsizroVxIUQX/paStEq5bOlyGUUT9NYHbyq9T6hjjd1Qh+BxDL40vCp9c3PZgWjBNpRJy4su5OUT4N0kNaAEmWuD84f9eN/r/cNqOyV7cOSatHkYLraFd9AF9RATtox76io7QAHE0RXfoHj00fgUrwUawuVgNGn8y71BNwc4LWKe+5A==</latexit>r3<latexit sha1_base64="J0aTEgXi5EdTZHvDmdkiAy6Nm7Q=">AAACYHicdZHLTsMwEEXd8CrhWdjBJqIsEIsoaUuBHRKqBDuQKCDVVeW4k2KR2JHtloeVb2ALn8aWL8EpBSkLZuPR9dyjq5koS5jSQfBZcebmFxaXqsvuyura+sZmbetWibGk0KUiEfI+IgoSxqGrmU7gPpNA0iiBu+jxvPi/m4BUTPAb/ZJBPyUjzmJGibZSd18OWvuDzXrgh63w9LTpBX4wLds0GydHrbYXzpQ6mtXVoFbp4KGg4xS4pglRqkcFj0ECp9A3l51OR0vCcxePFWSEPpIRmGnUktTLhrGG574ZSZI9MPpcNoxlUhaIlOQld13M4YmKNCV8aDAkUKTIe2HfGBwLobnQoNgrYMvWKjb1MM/zsillnBXGPxfXhcMc5SbIXc/Ddp9AdaGXKWWMsjMiY3SKwRNlg8Kh8RsWjDMiMReMD204M4Uw+0axAslAeT84u/jf7Xr/N7cNP2z7zetG/SyYnaCKdtEeOkAhOkZn6AJdoS6iiKE39I4+Kl9O1dlwaj+jTmXm2Ualcna+AbHhuxQ=</latexit>r4<latexit sha1_base64="Vj/wY1RkMejJHsvLrGSzO9Mztjs=">AAAC2XicZVE9b9swEKXUL1f9stOxC1EnQNFBkFwkWQMEBtotBeIkgGkYFHWyiEikQFKxU4ZDt6Jrf13X/pJSjlFAzS18uLv3ePcuayquTZL8DsJHj588fTZ4Hr14+er1m+Fo70LLVjGYMVlJdZVRDRUXMDPcVHDVKKB1VsFldn3a1S9vQGkuxbm5bWBR05XgBWfU+NRyeEcaqjK5sfEx6TTWPDelswcR4eYgOi8BF5Vc44aaUuNCKryvlof7mIq8Q0ceKcA516zVGnLMBTaeY2BjcNYaLKTBupRrgUvoGltfk1g3lEEcueVwnMTJNvBDkO7AGO3ibDkKpiSXrK1BGFZRredMisIrCwYL+2U6nRpFhYtIq8H/cU1XYLce9VLzJi/8hAu7UrQpOdv0Ca2q+gmqFL11UUS8PUzWtV/eEqigm8LN04W1pJDS+F1B829Auu11Ycepc65PqrngHfEfS5iOYQ+dTVyEMfGHBGa6fF+lL6N9j2w428qQm62dH2088cLdOYmQXOR+OLsV4f7NCg2Kg8b3ct749H+bH4KLSZwexZ++TsYnye4EA/QOvUcfUIqO0Qn6jM7QDDH0JxgEo2AvnIffwx/hz/vWMNhx3qJehL/+Aj4F5WM=</latexit>Theﬂowpathsforr5andr6arediscussedinthetextbutnotshownhereduetospace.monitoranalyzeplanexecuteIoT SystemEnvironmentSystem & Environment  ModelSDN ControllerNetwork EmulatorIoT- / Edge-device Traﬃc GeneratorSurrogate computation estimating aspects of System & Environment«simulated»OR«real»SEAMS ’22, May 18–23, 2022, PITTSBURGH, PA, USA

Jia Li, Shiva Nejati and Mehrdad Sabetzadeh

destination node of 𝑟 by 𝑟 .𝑡. Let [0..𝑇 ] be a time interval. We denote
the (data) bandwidth of 𝑟 at time 𝑡 ∈ [0..𝑇 ] by 𝑟 .𝑑 (𝑡). The bandwidth
is the amount of data transmitted from 𝑟 .𝑠 to 𝑟 .𝑡 over time. We
measure bandwidth in megabits per second (Mbps). The request
bandwidth may vary over time (marked as “dynamic” in Figure 3).

In Figure 3, the network part of an SDN is delineated with a
dashed rectangle labelled Network and includes the Network Struc-
ture, Link, Node and Flow entities. Specifically, a network is a
tuple 𝐺 = (𝑉 , 𝐸), where 𝑉 is a set of nodes, and 𝐸 ⊆ 𝑉 × 𝑉 is a
set of directed links between nodes. Note that each (undirected)
link in Figure 1 represents two directed links. Network links have
a nominal maximum bandwidth and maximum transmission de-
lay assigned to them based on their physical features and types.
The bandwidth of a link is the maximum capacity of the link for
transmitting data per second, and the maximum delay specifies the
maximum time it takes for data transmission over a link.

Definition 3.2 (Static Properties of a Link). Let 𝐺 = (𝑉 , 𝐸) be a net-
work structure. Each link 𝑒 ∈ 𝐸 has a bandwidth 𝑏𝑤 (𝑒) and a nomi-
nal delay 𝑑𝑙 (𝑒). We denote by StaticProp(𝑒) the tuple (𝑏𝑤 (𝑒), 𝑑𝑙 (𝑒)),
indicating the static properties of 𝑒.

As discussed in Section 2, a network handles requests by identi-
fying a directed path (or a flow) in the network to transmit them.
Upon the arrival of each request 𝑟 , a network flow (path) 𝑓 is estab-
lished to transmit the data stream of 𝑟 from the requested source
𝑟 .𝑠 to the requested destination 𝑟 .𝑡. Each flow 𝑓 is a directed path
of links that connects 𝑟 .𝑠 to 𝑟 .𝑡. As shown in Figure 3, one flow is
created per request. The bandwidth of each flow is equal to that of
its corresponding request. Since requests have dynamic bandwidths
(Definition 3.1), flows have dynamic bandwidths too. We define the
throughput of link 𝑒 at time 𝑡, denoted by throughput (𝑒, 𝑡), as the
total of the bandwidths of the flows going through 𝑒 at time 𝑡.

Definition 3.3 (Dynamic Utilization of a Link). Let 𝐺 = (𝑉 , 𝐸)
be a network, and let [0..𝑇 ] be a time interval. At each time 𝑡 ∈
[0..𝑇 ], each network link 𝑒 ∈ 𝐸 has a utilization util(𝑒, 𝑡) which is
computed as follows: util(𝑒, 𝑡) = throughput (𝑒, 𝑡)/bw(𝑒).

The software-defined control entities in Figure 3 include Weight
Function and Data-forwarding Algorithm. Data-forwarding algo-
rithms are event-driven and handle requests upon arrival. As dis-
cussed in Section 2, data forwarding typically generates flows based
on shortest weighted paths between the source and the destina-
tion of a request. Thanks to the SDN architecture, link weights
are programmable and can be computed by a weight function that
accounts for both the dynamic and the static properties of networks.
For example, the GP-derived link-weight function in Figure 1 (c)
uses the dynamic link utilization util(𝑒, 𝑡) and the static parameter
threshold to compute link weights.

3.2 Generative Self-adaptation
In this section, we describe GenAdapt, our self-adaptation control
loop, and GenPlan, the genetic algorithm used in the planning step
of GenAdapt. As discussed earlier, self-adaptation control has four
main steps; these are specified as methods in the self-adaptation
control entity in Figure 3. GenAdapt, i.e., our self-adaptation loop,
runs in parallel with the data-forwarding algorithm. In contrast to

Figure 3: Domain model for self-adaptive SDN.

system wear and damage [47, 81]. In addition, simulators are highly
configurable and can imitate a variety of system configurations.
Evaluating self-adaptation techniques using simulators enables us
to cover a multitude of systems rather than one fixed setup [18, 63].
As shown on the right side of Figure 2, our simulator com-
bines three components: An SDN controller capturing the software-
defined controller of a network system [13]; a network emulator
that simulates the network infrastructure including links, nodes
and their properties [52]; and a traffic generator [19] that emulates
different types of requests generated by IoT devices and sensors.

We augment with GP the planning step of the self-adaptation
loop. In order for GP to assess the fitness of candidate solutions,
i.e., candidate link-weight functions, the system should be simu-
lated for each candidate solution. This cannot be done using the
simulator we use to replace the real system and its environment,
since this simulator is real-time (wall-clock-time) and requires a few
seconds to compute the behaviour of a network for each candidate
weight-link formula. Our GP algorithm, when invoked, needs to
explore several candidate formulas. To do so efficiently, we use sur-
rogate computations that approximate the fitness values [60, 62, 65].
Specifically, as we detail in Section 3.2, our GP algorithm computes
the fitness for each candidate solution using a snapshot of the sys-
tem and its environment from the simulator, assuming that the
system does not change during a small time period (expected to be
less than one second, as we explain in Section 3.2).

Figure 3 shows a domain model consisting of two packages: One
package, discussed in Section 3.1, captures the main elements of an
SDN and its environment, and the other, discussed in Section 3.2,
specifies the self-adaptation control loop that we develop.

3.1 Domain Model for Self-adaptive SDN
The SDN and Environment package captures the static structure
of a network as well as its dynamic behaviour over time. The envi-
ronment of an SDN is comprised of IoT and edge devices which are
connected to the network and which generate data-transmission
requests (requests, for short) that the network needs to fulfil.

Definition 3.1 (Data-transmission Request). A data-transmission
request 𝑟 specifies a data stream sent by a network node 𝑠 to a
network node 𝑡. We denote the source node of 𝑟 by 𝑟 .𝑠 and the

Network StructureNodeSDN and Environment Self-adaptation Control Loop1..*Link1..*connectsRequest+ source+ destination+ «dynamic» bandwidthFlow1IoT / Edge DeviceData-forwarding Algorithm1Self-adaptation Control (GenAdapt)+ period+ Monitor ( )+ Analyze ( )+ Plan ( )+ Execute ( )modiﬁesGenetic Programming (GenPlan)+ SurrogateComputation ( )Weight Functionuses*generatesNetworkSoftware-deﬁned Control+ bandwidth+ delay+ «dynamic» utilization**<latexit sha1_base64="mtRuT6+JyAmr2Vi1Xm8db9jXcl4=">AAACbnicZZHLSgMxFIbT8T7eWgU3IhbrQlyUmXrbClLQnYJVoSklkzlTg5lkSFJbDfMobvWZfAsfwUwtwujZ5PDn/B8/50QZZ9oEwWfFm5mdm19YXPKXV1bX1qu1jTsth4pCh0ou1UNENHAmoGOY4fCQKSBpxOE+eroo/u+fQWkmxa15yaCXkoFgCaPEOKlfre3jSPI4JeYRx8AN2e9XG0EzmFT9fxNOmwaa1nW/VmnjWNJhCsJQTrTuUikSUCAo9OxVu902iojcx0MNGaFPZAB2ErwkdbM4MTDu2YEi2SOj47JhqHhZIEqRl9z3sYARlWlKRGwxcChS5N2wZy1OpDRCGtDsFbBjG53YRpjnedmUMsEK469LmMJhT3Ib5H69jt12gZpCL1PKGO1mZMboBIOftQsKh7bZcmCcEYWFZCJ24ewEwtwbJRoUA13/wbnFh3/X/L+5azXD0+bRTatxfjw9wSLaRnvoAIXoDJ2jS3SNOoiiEXpD7+ij8uVteTve7s+oV5l6NlGpvINvqbDAkg==</latexit> <latexit sha1_base64="G0MAdeDwTCvTPPgQialarxNiVfM=">AAAChnicZVHLTsMwEHTDq4RXedy4VJQD4hAl5XWthCrBDSQKiLqqHGdTLBw7sl2gWPkXrvBH/A1OqZACe/FovDM72o1zzrQJw6+aNze/sLhUX/ZXVtfWNxqbW7dajhWFHpVcqvuYaOBMQM8ww+E+V0CymMNd/HRe/t89g9JMihszyWGQkZFgKaPEOGrY2NnHMSf0yShGxIhDIl/E/rDRCoNwWs3/IJqBFprV1XCz9oATSccZCEM50bpPpUhBgaAwsJfdbtcoIgofjzXkbhoZgZ1mr1D9PEkNvA7sSJH8kdHXqmCseJUgSpHJHyrTepLFhe9jAS9UZhkRicXAoYxW9KOBtTiV0ghpQLM3wG6g0altRUVRVEUZE6wU/qqEKRX2pLBh4Teb2G0dqCn5qkvVRrsemTM6tcHP2kWFQxu0nTHOicJCMpG4cHZqwtwbpxoUA938sXPXiP7u/j+4bQfRaXB03W51jmd3qaNdtIcOUITOUAddoCvUQxS9oXf0gT69uhd4J97ZT6tXm2m2UaW8zjc2d8n8</latexit>H<latexit sha1_base64="AW9ZribudxDDtNXHJxMCh+C3754=">AAACgXicZVHLTgIxFC3jG1+oSzdEWKgLMkN8LNyYGBLdaSKgoYR0yh1s6LSTtqDYzJ+41X/yb+wAMRm4m56c3nPuyb1hwpk2vv9b8FZW19Y3NreK2zu7e/ulg8OWliNFoUkll+olJBo4E9A0zHB4SRSQOOTQDod32X97DEozKZ7NJIFuTAaCRYwS46heqVTFISd0aBQjYsCh2itV/Jo/rfIyCOaggub12DsovOK+pKMYhKGcaN2hUkSgQFDo2odGo2EUEWkRjzQkbhIZgJ3mzlGdpB8Z+OjagSLJG6MfecFI8TxBlCKTBSrWehKHjhTwTmUcE9G3GDhkydJO0LUWR1IaIQ1o9gnYzTM6spUgTRdEMRMsE/6rhMkU9jK1flosl7FbOFCT8XmXvI12PTJhdGqDx9olhXNbqztjnBCFhWSi78LZqQlzbxhpUAx0eWbnjhEsrn4ZtOq14Kp28VSv3FbnZ9lEx+gEnaIAXaNbdI8eURNRNEZf6Bv9eCvemed79VmrV5hrjlCuvJs/gIbH/Q==</latexit>N<latexit sha1_base64="OHnpttYrenMkBlgqKxfLl8RBOzU=">AAAChXicZVHbTgIxEC3rBcUbXt58IeKDMZHsIuqjJoZE3zQRL6GEdMssNnTbTVtUbPZffNU/8m/sAjFZmJdOTuecOTMTJpxp4/u/BW9hcWm5uLJaWlvf2Nwqb+88ajlUFFpUcqmeQ6KBMwEtwwyH50QBiUMOT+HgOvt/egOlmRQPZpRAJyZ9wSJGiXFQt7x3iENO6MAoRkSfA4fIHHbLVb/mj6MynwTTpIqmcdfdLrzgnqTDGIShnGjdplJEoEBQ6NjbZrNpFBFpCQ81JK4b6YMde89B7aQXGfjo2L4iySujH3nCUPE8QJQioxko1noUhw4U8E5lHBPRs9hNlTlL20HHWhxJaYQ0oNknYNfP6MhWgzSdIcVMsIz4zxImY9iz1PppqVLBbulATYbnVfIy2tXIhNGxDH7Tzikc21rdCeOEKCwkEz1nzo5FmHvDSINioCsTOXeMYHb188ljvRac107v69WrxvQsK2gfHaAjFKALdIVu0B1qIYo+0Rf6Rj9e0TvxGt75pNQrTDm7KBfe5R+hX8nf</latexit>J*<latexit sha1_base64="OHnpttYrenMkBlgqKxfLl8RBOzU=">AAAChXicZVHbTgIxEC3rBcUbXt58IeKDMZHsIuqjJoZE3zQRL6GEdMssNnTbTVtUbPZffNU/8m/sAjFZmJdOTuecOTMTJpxp4/u/BW9hcWm5uLJaWlvf2Nwqb+88ajlUFFpUcqmeQ6KBMwEtwwyH50QBiUMOT+HgOvt/egOlmRQPZpRAJyZ9wSJGiXFQt7x3iENO6MAoRkSfA4fIHHbLVb/mj6MynwTTpIqmcdfdLrzgnqTDGIShnGjdplJEoEBQ6NjbZrNpFBFpCQ81JK4b6YMde89B7aQXGfjo2L4iySujH3nCUPE8QJQioxko1noUhw4U8E5lHBPRs9hNlTlL20HHWhxJaYQ0oNknYNfP6MhWgzSdIcVMsIz4zxImY9iz1PppqVLBbulATYbnVfIy2tXIhNGxDH7Tzikc21rdCeOEKCwkEz1nzo5FmHvDSINioCsTOXeMYHb188ljvRac107v69WrxvQsK2gfHaAjFKALdIVu0B1qIYo+0Rf6Rj9e0TvxGt75pNQrTDm7KBfe5R+hX8nf</latexit>Jgenerates<latexit sha1_base64="AW9ZribudxDDtNXHJxMCh+C3754=">AAACgXicZVHLTgIxFC3jG1+oSzdEWKgLMkN8LNyYGBLdaSKgoYR0yh1s6LSTtqDYzJ+41X/yb+wAMRm4m56c3nPuyb1hwpk2vv9b8FZW19Y3NreK2zu7e/ulg8OWliNFoUkll+olJBo4E9A0zHB4SRSQOOTQDod32X97DEozKZ7NJIFuTAaCRYwS46heqVTFISd0aBQjYsCh2itV/Jo/rfIyCOaggub12DsovOK+pKMYhKGcaN2hUkSgQFDo2odGo2EUEWkRjzQkbhIZgJ3mzlGdpB8Z+OjagSLJG6MfecFI8TxBlCKTBSrWehKHjhTwTmUcE9G3GDhkydJO0LUWR1IaIQ1o9gnYzTM6spUgTRdEMRMsE/6rhMkU9jK1flosl7FbOFCT8XmXvI12PTJhdGqDx9olhXNbqztjnBCFhWSi78LZqQlzbxhpUAx0eWbnjhEsrn4ZtOq14Kp28VSv3FbnZ9lEx+gEnaIAXaNbdI8eURNRNEZf6Bv9eCvemed79VmrV5hrjlCuvJs/gIbH/Q==</latexit>Nuses<latexit sha1_base64="OHnpttYrenMkBlgqKxfLl8RBOzU=">AAAChXicZVHbTgIxEC3rBcUbXt58IeKDMZHsIuqjJoZE3zQRL6GEdMssNnTbTVtUbPZffNU/8m/sAjFZmJdOTuecOTMTJpxp4/u/BW9hcWm5uLJaWlvf2Nwqb+88ajlUFFpUcqmeQ6KBMwEtwwyH50QBiUMOT+HgOvt/egOlmRQPZpRAJyZ9wSJGiXFQt7x3iENO6MAoRkSfA4fIHHbLVb/mj6MynwTTpIqmcdfdLrzgnqTDGIShnGjdplJEoEBQ6NjbZrNpFBFpCQ81JK4b6YMde89B7aQXGfjo2L4iySujH3nCUPE8QJQioxko1noUhw4U8E5lHBPRs9hNlTlL20HHWhxJaYQ0oNknYNfP6MhWgzSdIcVMsIz4zxImY9iz1PppqVLBbulATYbnVfIy2tXIhNGxDH7Tzikc21rdCeOEKCwkEz1nzo5FmHvDSINioCsTOXeMYHb188ljvRac107v69WrxvQsK2gfHaAjFKALdIVu0B1qIYo+0Rf6Rj9e0TvxGt75pNQrTDm7KBfe5R+hX8nf</latexit>JLearning Self-adaptations for IoT Networks: A Genetic Programming Approach

SEAMS ’22, May 18–23, 2022, PITTSBURGH, PA, USA

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15

Algorithm GenAdapt
Input G : Network structure
Input ∪𝑒∈𝐸 StaticProp(𝑒): Static properties of links
Input BestSol: Best Solutions from the previous round
Output F: Optimized flows
Output W: Optimized weight function

for every time step 𝑖 ∈ {1, . . . , 𝑛 } do
F𝑖 , ∪𝑒∈𝐸 util(𝑒, 𝑖 · 𝛿) ← Monitor() //Dynamic data from SDN Sim
maxUtil = Max {util(𝑒, 𝑖 · 𝛿) }𝑒∈𝐸
if maxUtil > threshold then
F, W ← GenPlan(G, ∪𝑒∈𝐸 StaticProp(𝑒), F𝑖 , BestSol)
Apply F and W to the SDN data-forwarding algorithm

end

end

Figure 4: Self-adaptation loop to resolve congestion by learn-
ing a new weight function for SDN data-forwarding.

the data-forwarding algorithm which is event-driven, GenAdapt
is executed periodically with a period 𝛿, indicated as an attribute
of GenAdapt in Figure 3. The self-adaptation loop periodically
monitors the network for congestion as the environment changes,
e.g., due to the arrival of new requests. There is a trade-off between
the execution time of GenAdapt and the period 𝛿. In particular, 𝛿
should be small enough so that GenAdapt is executed frequently to
detect and handle congestion promptly. At the same time, 𝛿 should
be large enough so that frequent executions of GenAdapt do not
interfere with other SDN algorithms and applications [80].

GenAdapt, shown in Figure 4, executes at every time step 𝑖·𝛿 (𝑖 =
0, 1, . . .). The monitor step (line 10) fetches the set 𝐹𝑖 of flows at time
𝑖 ·𝛿 and the utilization util(𝑒, 𝑖 ·𝛿) of every link 𝑒 at 𝑖 ·𝛿. The analyze
step (lines 11-12) determines whether the network is congested,
i.e., whether adaptation is needed. A network is congested if there
is a link 𝑒 ∈ 𝐸 which is utilized above a certain threshold [4, 53].
To detect congestion, the maximum utilization of all the links is
compared with threshold, which is a fixed parameter of the SDN.

If the network is congested, GenAdapt calls GenPlan (line 13).
GenPlan, shown in Figure 5, is our GP algorithm which we discuss
momentarily. The output of GenPlan is a new link-weight function
as well as a modified set of flows where a minimal number of flows
have been re-routed. The new flows and the optimized link-weight
function are then applied to the SDN under analysis (line 14). Note
that the only change that needs to be done to the network is re-
routing a typically small number of flows to eliminate congestion.
GenPlan (Figure 5) generates link-weight functions that optimize
a fitness function characterizing the desired network-flow proper-
ties. The link-weight functions are specified in terms of static link
properties (bw(𝑒) and dl(𝑒)), dynamic link utilization (util(𝑒, 𝑡))
and utilization threshold. Note that GenPlan always reuses in its
initial population half of the best solutions (candidate weight func-
tions) generated by its previous invocation and stored in a variable
named BestSol. Reusing as bootstrap some of the best solutions from
the previous round ensures continuity and incrementality in learning
the weight functions across multiple rounds of self-adaptation.

GenPlan starts by selecting a number of flows, BadFlows, from a
congested set of flows, OldFlows, using the FindFlowsCausingCon-
gestion algorithm shown in Figure 6. BadFlows are the flows that
should be re-routed to resolve congestion. Following the standard
steps of GP, GenPlan creates an initial population 𝑃0 (line 14) con-
taining a set of possible weight functions (individuals). For every

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28

Algorithm GenPlan
Input G: Network structure
Input ∪𝑒∈𝐸 StaticProp(𝑒): Static properties of links
Input OldFlows: Current network flows
Input BestSol: Best Solutions from the previous round
Output W: New weight function
Output NewFlows: New network flows

t = 0;
BadFlows = FindFlowsCausingCongestion(OldFlows, G);
Flows = OldFlows \ BadFlows
while not(stop_condition) do

if (t == 0)
P0 = InitialPopOfWeightFormulas() ∪ BestSol
OffSprings = P0
else

OffSprings = Breed(P𝑡 )

end
for 𝜔 ∈ OffSprings do
NewFlows = ComputeSurrogate(Flows, BadFlows, G, 𝜔)
𝜔.Fit = Evaluate (G, NewFlows, OldFlows)
end
P𝑡 +1 = OffSprings
t = t + 1

end
BestW = BestSolution(P0, . . ., P𝑡 )
bestFlows = ComputeSurrogate(Flows, BadFlows, G, BestW)
return BestW, bestFlows

Figure 5: Generating a new link-weight function and a
congestion-free set of flows using Genetic Programming.
individual 𝜔 ∈ 𝑃0, we call ComputeSurrogate, shown in Figure 7, to
re-route the flows in BadFlows when 𝜔 is used to compute weights
of the network links (line 19 of GenPlan). Specifically, for each
𝜔, ComputeSurrogate generates the set NewFlows which includes
(1) the flows corresponding to those in BadFlows, but re-routed
based on 𝜔; and (2) the original flows that did not cause congestion
(i.e., OldFlows\BadFlows). The set NewFlows is needed to compute
the fitness value for 𝜔 (line 21). The fitness function aims to de-
termine how close an individual is to resolving congestion. Our
fitness function combines three criteria as we elaborate momentar-
ily. GenPlan evolves the population by breeding and generating a
new offspring population (line 17). The breeding and evaluation
steps are repeated until a stop condition is satisfied. Then, GenPlan
returns the link-weight function with the lowest fitness (BestW)
and its corresponding flows (line 28).

The ComputeSurrogate algorithm (Figure 7), which is called by
GenPlan, estimates the flows for each candidate weight function
𝜔, assuming that the flow bandwidths obtained at the monitoring
step are constant over the duration of 𝛿. ComputeSurrogate first
updates the utilization and weight values for each link, assuming
that BadFlows are absent (lines 9-12). The new weights are then
used to re-route each flow 𝑓 in BadFlows by identifying a flow 𝑓 ′
as the new shortest path (line 14). After creating each new flow
𝑓 ′, the utilization and weight values for each link on 𝑓 ′ are up-
dated (lines 15-18). Note that, because of the assumption that flow
bandwidths remain fixed during 𝛿, the utilization-per-link 𝑢𝑡𝑖𝑙 (𝑒)
in ComputeSurrogate is not indexed by time.

Following standard practice for expressing meta-heuristic search
problems [42], we define the representation, the fitness function,
and the genetic operators underlying GenPlan.

Representation of the Individuals. An individual represents

some weight function induced by the following grammar rule:

SEAMS ’22, May 18–23, 2022, PITTSBURGH, PA, USA

Jia Li, Shiva Nejati and Mehrdad Sabetzadeh

1
2
3
4
5
6
7
8
9
10
11
12
13

Algorithm FindFlowsCausingCongestion
Input G: Network structure
Input Flows: Current flows
Output BadFlows: A subset of Flows causing congestion

BadFlows = ∅
while G is congested do
Let 𝑒 be the most congested link
Let 𝑓 ∈ Flows such that 𝑒 ∈ 𝑓 // selected randomly
BadFlows = BadFlows∪{𝑓 }
Flows = Flows\{𝑓 }
end
return BadFlows

Figure 6: Selecting a subset of flows whose removal will re-
solve congestion.

exp ::= exp (+ | − | ∗ | /) exp | const | StaticProp | DynamicVar | param

In the above, the symbol | separates alternatives, const is an
ephemeral random constant generator [84], StaticProp are static
link properties (Definition 3.2), DynamicVar is the link utilization
(Definition 3.3), and param is some network parameter. The formula
in Figure 1(c) can be generated by this grammar rule and is thus an
example individual in GenPlan. Note that the SDN data-forwarding
algorithm assumes that link values are integers. The ⌊⌋ used in
the formula of Figure 1(c) rounds down the output to an integer.
Otherwise, ⌊⌋ is not part of the weight formulas.

𝑡ℎ2

Each individual

is constructed
and manipulated as a parse tree.
For example, the figure to the right
shows the parse tree corresponding
to
(𝑡ℎ−𝑢) 2 where u is a shorthand
for 𝑢𝑡𝑖𝑙 (𝑒, 𝑡) and th is a shorthand
for threshold. The initial population of GenPlan is generated by
randomly building parse trees using the grow method [70] (i.e., the
root and inner nodes are labelled by the mathematical operations,
and the leaves are labelled by variables, constants or parameters
specified in the grammar). As discussed earlier when GenPlan is
called for the first time, the initial population is generated randomly.
For subsequent calls to GenPlan, half of the initial population is
generated and the other half is reused from the best elements in the
last population generated by the previous invocation of GenPlan.
Fitness Function. Our fitness function is hybrid and combines
the following three metrics: (1) Maximum link utilization across
all the network links (Fit1). For each individual weight function 𝜔,
GenPlan computes the set NewFlows of flows based on link weights
generated by 𝜔. The Fit1 metric computes the utilization value of
the most utilized network link, considering the flows in NewFlows.
If Fit1 is higher than the threshold, then the network is congested.
Hence, we are interested in individuals whose Fit1 is less than the
threshold. (2) The cost of re-routing network flows measured as the
number of link updates, i.e., insertions and deletions, required to
reconfigure the network flows (Fit2). In GenPlan, OldFlows is the
current set of congested flows, and as mentioned above, NewFlows
is the set of flows computed for each individual 𝜔. We compute
Fit2 as the edit distance between each pair of flows 𝑓 ∈ OldFlows
and 𝑓 ′ ∈ NewFlows such that 𝑓 and 𝑓 ′ are both related to the same
request. Specifically, the distance between two flows 𝑓 and 𝑓 ′ is

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21

Algorithm ComputeSurrogate
Input G: Network structure
Input Flows: Current congestion-free set of flows
Input BadFlows: Flows that have to be re-routed
Input 𝜔: Candidate weight function
Output NewFlows: BadFlows re-routed using 𝜔

NewFlows = ∅
for 𝑒 ∈ 𝐸 do
util(𝑒) ← sum of the bandwidths of 𝑓 ∈ Flows s.t. 𝑒 ∈ 𝑓
Compute weight for 𝑒 using 𝜔
end
for 𝑓 ∈ BadFlows do
𝑓 ′ ← shortest weighted path from source to destination of 𝑓
for 𝑒 ∈ 𝑓 ′ do
util(𝑒) = util(𝑒) + bandwidth of 𝑓 ′
update the weight of 𝑒 using 𝜔
end
NewFlows = NewFlows∪{𝑓 ′ }
end
return NewFlows ∪ Flows

Figure 7: Re-routing congested flows (BadFlows) by comput-
ing shortest paths based on a candidate weight function (𝜔).

measured as the longest common subsequence (LCS) distance of
two paths [27] by counting the number of link insertions and link
deletions required to transform 𝑓 into 𝑓 ′. We note that this metric
has previously been used as a proxy for the reconfiguration cost of
network flows [80]. (3) The total data transmission delay generated
by the new flows (Fit3). The Fit3 metric is computed as the sum
of all the delay values, i.e., dl(e), of the links that are utilized by
the new flows (i.e., the NewFlow set). The larger this value, the
higher the overall transmission delay induced by NewFlows. The
last metric allows us to penalize candidates that generate longer
flows compared to those that generate shorter ones.

The Fit1, Fit2 and Fit3 metrics have different units of measure and
ranges. Thus, before combining them, we normalize them using the
well-known rational function ¯𝑥 = 𝑥/(𝑥 + 1). This function provides
good guidance to the search for minimization problems compared
to other alternatives.

Among the three metrics, lowering Fit1 below the congestion
threshold takes priority; if a candidate solution is unable to resolve
congestion, then we are not interested in the other two metrics.
Once Fit1 is below the threshold, we do not want to lower Fit1
any further, since we want the network optimally utilized but not
congested. Instead, we are interested in lowering the cost and delay
metrics. We denote the normalized forms of our three metrics by
Fit1, Fit2 and Fit3, respectively, and define the following overall
fitness function to combine the three:

(cid:40)

𝐹𝑖𝑡 =

Fit1 + 2
Fit2 + Fit3

(1) If Fit1 ≥ threshold
(2) If Fit1 < threshold
Given a candidate weight function 𝜔, evaluating Fit (𝜔) always
yields a value in [0..3]: Fit (𝜔) ≥ 2 indicates that 𝜔 is not able to
resolve congestion; and Fit (𝜔) < 2 indicates that 𝜔 can resolve con-
gestion, and its fitness determines how well 𝜔 is doing in reducing
cost and delay. Note that in our fitness function defined above, cost
and delay are equally important; we do not prioritize either one. If
desired, one can modify the above function by adding coefficients
to Fit2 and Fit3 to prioritize cost over delay or vice versa.

Genetic Operators. We use one-point crossover [69]. It ran-
domly selects two parent individuals. It then randomly selects one

//-⇥<latexit sha1_base64="8h+7JXvnfBieH1/izsO24+w//sY=">AAAB73icbVA9SwNBEJ3zM8avqKXNYiJYhbtYqF3AxjKC+YDkCHubvWTJ3t65OyeEI3/CxkIRW/+Onf/GTXKFJj4YeLw3w8y8IJHCoOt+O2vrG5tb24Wd4u7e/sFh6ei4ZeJUM95ksYx1J6CGS6F4EwVK3kk0p1EgeTsY38789hPXRsTqAScJ9yM6VCIUjKKVOpUeioibSr9UdqvuHGSVeDkpQ45Gv/TVG8QsjbhCJqkxXc9N0M+oRsEknxZ7qeEJZWM65F1LFbVb/Gx+75ScW2VAwljbUkjm6u+JjEbGTKLAdkYUR2bZm4n/ed0Uw2s/EypJkSu2WBSmkmBMZs+TgdCcoZxYQpkW9lbCRlRThjaiog3BW355lbRqVe+yWruvles3eRwFOIUzuAAPrqAOd9CAJjCQ8Ayv8OY8Oi/Ou/OxaF1z8pkT+APn8wduq4+J</latexit>-uuththththLearning Self-adaptations for IoT Networks: A Genetic Programming Approach

SEAMS ’22, May 18–23, 2022, PITTSBURGH, PA, USA

sub-tree in each parent, and swaps the selected sub-trees result-
ing in two children. For the mutation operator, we use one-point
mutation [68] that mutates a child individual by randomly select-
ing one sub-tree and replacing it with a randomly generated tree,
which is generated using the initialization procedure. For the parent
selection operator, we use tournament selection [56].

4 EMPIRICAL EVALUATION
In this section, we investigate the following research questions
(RQs) using open-source synthetic and industrial IoT networks.
To answer RQ1, we use the industrial network and ten synthetic
networks. To answer RQ2, we use eight more synthetic networks
alongside two of the synthetic networks from RQ1. In total, our
evaluation involves one industrial network and 18 synthetic ones.
RQ1 (Effectiveness) How effective is GenAdapt in modifying the
logic of the SDN data-forwarding algorithm to avoid future conges-
tions? The main novelty of GenAdapt is in attempting to adapt the
logic of SDN data forwarding (i.e., the link-weight functions) in-
stead of adapting its output (i.e., the individual flow paths). Through
RQ1, we compare GenAdapt with two baseline techniques: (i) an
approach, named DICES [80], which, similar to GenAdapt, uses
MAPE-K self-adaptation, but optimizes individual flow paths; and
(ii) OSPF configured using a standard heuristic for setting optimized
link weights [1, 26]. By comparing GenAdapt with these baselines,
we investigate whether GenAdapt, when called to resolve an existing
congestion, is able to reduce the number of occurrences of congestion
in the future, without incurring additional overhead.

RQ2 (Scalability): Can GenAdapt resolve congestion efficiently
as the size of the network and the number of requests increase? To
assess scalability, we evaluate the execution time of GenAdapt as
the size of the network and the number of requests increase.

Implementation and Availability. We implemented GenAdapt
using ECJ (version 27) [79] and the open-source version of DICES [80],
which implements a self-adaptive control loop over the Open Net-
work Operating System (ONOS) [13] – the SDN controller that
we employ in our work. Similar to DICES, our simulator consists
of three open-source tools: (i) ONOS [13] as the “SDN Controller”
(see Figure 2), (ii) Mininet [52] as the “Network Emulator”, and
(iii) Distributed Internet Traffic Generator (D-ITG) [19] as the “IoT-
/Edge-device Traffic Generator”. Our simulator is memory-intensive
and runs on two Linux virtual machines (VMs), but GenAdapt by
itself does not require special considerations for memory or CPU
power. All experiments were performed on a machine with a 2.5
GHz Intel Core i7 CPU and 32 GB of memory. Our implementation
and all experimental material are available online [2].

4.1 RQ1 – Effectiveness
Before answering RQ1, we present the baselines, the study subjects,
the configuration of GenAadapt and the setup of our experiments.
Baselines. Our first baseline, DICES, is from the SEAMS liter-
ature. Similar to GenAadapt, DICES is self-adaptive, but unlike
GenAadapt, it uses a genetic algorithm to modify the individual
flows generated by the SDN data-forwarding algorithm. The second
baseline is OSPF [1, 26] configured by setting the link weights to
be inversely proportional to the bandwidths of the links as sug-
gested by Cisco [1]. The OSPF heuristic link weights are meant to

induce optimal flows that eliminate or minimize the likelihood of
congestion. OSPF is widely used in real-world systems [32] and as
a baseline in the literature [3, 7, 16, 17, 22, 71, 76].

Study Subjects. For RQ1, we use: (1) ten synthetic networks,
and (2) an industrial SDN-based IoT network published in earlier
work [80]. For the synthetic networks, we consider two network
topologies: (i) complete graphs, and (ii) multiple non-overlapping
paths between node pairs. The network in Figure 1 is an example
of the latter topology, where 𝑠1 and 𝑠2 are connected by three non-
overlapping paths. Since our approach works by changing flow
paths, we naturally focus our evaluation on topologies with multi-
ple paths from a source to a destination, thus excluding topologies
where adaptation through re-routing is not possible. The topologies
that we experiment with, i.e., (i) and (ii) above, are the two extreme
ends of the spectrum in terms of path overlaps between node pairs:
In the first case, we have complete graphs where there are as many
overlapping paths as can be between node pairs; and, in the sec-
ond case, we have no overlapping paths at all. We consider four
complete graphs – referred to as FULL hereafter – with five, six,
seven and ten nodes, and consider two multiple-non-overlapping
path graphs – referred to as MNP hereafter – with five and eight
nodes. More precisely, one MNP graph has five nodes connecting
the designated source and destination with three non-overlapping
paths (Figure 1); the other has eight nodes doing the same with
four (non-overlapping) paths. Following the suggested parameter
values in the existing literature for such experiments [80], we set
the static properties of the links, namely bandwidth and delay, to
100Mbps and 25ms, respectively.

To instigate changes in the SDN environment, we generate data
requests over time and not at once. We space the requests 10s
apart to ensure that all the requests are properly generated and
that the network has some time to stabilize, i.e., we send requests
at 0s, 10s, 20s, 30s, and so on. For each FULL network, we fix a
source and a destination node, and generate either three or four
requests every 10s. For each MNP network, we generate every 10s
two requests between the end-nodes connected by multiple paths.
The reason why we generate fewer requests in the MNP networks
is because there are fewer paths compared to the FULL networks.
For a given network (FULL or MNP), the generated requests have
the same bandwidth. The request bandwidth for each network is
selected such that some congestion is created starting from 10s.
The request bandwidths are provided online [2]. We denote our
synthetic networks by FULL(𝑥, 𝑦) and MNP(𝑥, 𝑦), where 𝑥 is the
number of nodes and 𝑦 is the number of requests generated every
10s. The ten synthetic network that we use in RQ1 are four FULL
networks, once with three requests and once with four requests
generated every 10s, and two MNP networks with two requests
generated every 10s.

Our industrial subject is an emergency management system
(EMS) from previous work [80]. EMS represents a real-world ap-
plication of SDN in a complex IoT system. This subject contains
seven switches and 30 links with different values for the links’ static
properties. The EMS subject includes a traffic profile characteriz-
ing anticipated traffic at the time of a natural disaster (e.g., flood),
leading to congestion in the network of the monitoring system. In
particular, the network is used for transmitting 28 requests cap-
turing different data stream types such as audio, video and sensor

SEAMS ’22, May 18–23, 2022, PITTSBURGH, PA, USA

Jia Li, Shiva Nejati and Mehrdad Sabetzadeh

Table 1: Parameters of GenAdapt.

Mutation rate
Crossover rate
Maximum depth of GP tree
Tournament size
Population size

Utilization threshold

0.1
0.7 Minimum of the constant in the GP grammar
Maximum of the constant in the GP grammar
5
Interval between invocations of GenAdapt (𝛿)
7
10

80%
0
100
1s

and map data. The static properties of the network links and the
data-request sizes are available online [2] 1.

Experiments and metrics. RQ1 has two goals: (G1) determine
whether, by properly modifying the link-weight function, GenAdapt
is able to reduce the number of times congestion happens, and
(G2) determine whether GenAdapt can respond quickly enough so
that prolonged periods of congestion can be avoided.

The synthetic subjects are best used for achieving G1, since the
requests in these subjects are generated with time gaps as opposed
to all at once, which is the case in EMS (industry subject). This
characteristic of the synthetic subjects creates the potential for
congestion to occur multiple times, in turn allowing us to achieve
G1. For G1, we compare GenAdapt with DICES; comparison with
the OSPF baseline does not apply, since OSPF’s heuristic cannot
avoid congestion for our synthetic subjects, and neither can it
resolve congestion. To compare GenAdapt with DICES, we keep
track of how many times congestion occurs during our simulation,
the execution time of each technique to resolve each congestion
occurrence, and the total time during which the network is in
a congested state. In addition, we measure packet loss, which is
a standard metric for detecting congestion in network systems.
Packet loss is measured as the number of dropped packets divided
by the total number of packets in transit across the entire network
during simulation. The simulation time for each synthetic subject
was set to end 10s after the generation of the last request. Recall
that, in our synthetic subjects, the requests are sent at intervals of
10s and as long as the number of paths in the underlying network
is sufficient to fulfill the incoming the requests.

To achieve G2, we use EMS in order to compare GenAdapt with
DICES and OSPF in terms of handling the congestion caused by
requests arriving at once. Since DICES and GenAdapt are self-
adaptive, they monitor EMS and attempt to resolve congestion
when it occurs. In the case of OSPF, however, the heuristic link
weights are meant to reduce the likelihood of congestion and packet
loss. For this comparison, we report the total packet loss recorded
by each of the three technique over a fixed simulation interval of
5min, and also whether, or not, GenAdapt and DICES were able to
resolve the congestion in EMS within the simulation time.

Configuring GenAdapt. Table 1 shows the configuration pa-
rameters used for GenAdapt. For the mutation and crossover rates,
the maximum tree depth and the tournament size, we chose rec-
ommendations from either the GP literature [57, 70] or ECJ’s docu-
mentation [79]. We set 𝛿 to 1s since this is the smallest monitoring
period permitted by our simulator. We use the utilization threshold
given in the literature [4, 53, 80]. Since the range for link-utilization
values is [0% .. 100%], we set the minimum and maximum of the
constants in GP individuals to 0 and 100, respectively.

To determine the population size and the number of generations
for GP, we note that, ideally, GenAdapt should not take longer

1Due to platform differences, we could not reproduce the congestion reported in [80].
So, we increased the request bandwidths by 30% to reproduce congestion.

Figure 8: Comparing network utilization values over time
obtained from 30 runs of DICES and GenAdapt for resolving
congestion in an example synthetic subject: MNP(8,2).

than 𝛿 to execute. The execution time of GenAdapt is likely shorter
when it is called in the first rounds of request generation than in
the later rounds, since there are fewer flows in the early rounds
of our synthetic subjects. Hence, using the fixed time limit of 1s
to stop GenAdapt is not optimal. Instead of using a time limit, we
performed some preliminary experiments on our synthetic sub-
jects to configure population size and the number of generations
for the two topologies of FULL and MNP. For both topologies, we
opt to use a small population size (i.e., 10). As for the number of
generations, for the FULL networks, we stop GenAdapt when the
fitness function falls below two (i.e., when congestion is resolved
but the solution is not necessarily optimized for delay and cost) or
when 200 generations is reached. This will ensure that GenAdapt’s
execution time does not exceed 1s for our FULL networks. The
MNP networks are, however, sparser and we are able to increase
the number of generations while keeping the execution time below
1s. Specifically, for MNP networks with five nodes, we use 300 gen-
erations; and, for the one with eight nodes we use 500 generations.
For EMS, the topology is more similar to a full graph, and as such,
we use the same configuration for EMS as that for FULL networks.
Results. As an example, Figure 8 shows the network utilization
over time when GenAdapt and DICES are used to resolve congestion
for the synthetic network MNP(8, 2). Two simultaneous network
requests are sent at 0s, 10s, 20s and 30s, leading to congestion at 10s,
20s, and 30s. The network is congested when the utilization value is
above 0.8 (i.e., the utilization threshold). Out of 30 runs for DICES,
18 runs record three congestion occurrences and 12 runs record
four. In contrast, out of 30 runs for GenAdapt, six runs record only
one congestion occurrence, 16 runs record two, seven runs record
three, and only one run records four congestion occurrences. Note
that three congestion occurrences at 10s, 20s, and 30s are visible
in the figure. However, in the simulated environment, similar to
the physical world, there are some small time gaps between the
arrivals of the two requests generated each time, and in addition,
there are small fluctuations in flow bandwidths over time. Hence,
the monitoring step of GenAdapt or DICES may detect congestion
twice (i.e., once per request arrival), instead of only once and after
the arrival of both requests. In total, for the example in Figure 8, the
average number of congestion occurrences is 2.1 with GenAdapt
and 3.4 with DICES. In addition, with DICES, the average of the
total time that the network remains congested is 7.6s, while with
GenAdapt, this is reduced to 5.57s.

Time(s)1st  congestion2nd  congestion3rd  congestion0.000.250.500.751.00123456789101112131415161718192021222324252627282930313233343536373839Time (s)Utilization (%)GP−pop10−gen5001st  congestion2nd  congestion3rd  congestion0.000.250.500.751.0012345678910111213141516171819202122232425262728293031323334353637383940Time (s)Utilization (%)GP−pop10−gen500151015202530350.000.250.500.751.00Utilization (%)1st CongestionDICESGenAdapt2nd Congestion3rd Congestion1st Congestion2nd Congestion3rd Congestion0.000.250.500.751.00Learning Self-adaptations for IoT Networks: A Genetic Programming Approach

SEAMS ’22, May 18–23, 2022, PITTSBURGH, PA, USA

Table 2: Statistical-test results comparing the average number of congestion occurrences, the duration of congestion, the
execution-time and the packet-loss values obtained by 30 runs of GenAdapt versus DICES for our ten synthetic subjects.

# Congestion
Congestion Duration (s)
Packet Loss (%)
Exec Time (ms)

# Congestion
Congestion Duration (s)
Packet Loss (%)
Exec Time (ms)

FULL(5,3)

avg(G-D)∗
3.1 – 3.2
6.2 – 7.7
32.1 – 32.33
140.86 – 392.96

p-value
0.98
0.0919
0.001
<2.2E-16

FULL(7,4)

avg(G-D)
2.9 – 3.1
5 – 5.97
10.13 – 19.31
226.40 – 576.05

p-value
0.063
0.0157
8.08E-07
<2.2E-16

FULL(5,4)

FULL(6,3) – 40% of DICES runs failed

ˆA12
0.5(N)
0.62(S)
0.75(L)
0.98(L)

ˆA12
0.59(S)
0.68(M)
0.87(L)
0.99(L)

avg(G-D)
3.8 – 4.4
9.53 – 12
24.86 – 24.99
271.95 – 440.87

p-value
0.193
0.145
0.535
<2.2E-16

FULL(10,3)

avg(G-D)
3.7 – 4
7.5 – 8.47
8.75 – 13.02
564.88 – 814.8

p-value
0.464
0.029
0.006
4.65E-16

ˆA12
0.59(S)
0.61(S)
0.45(N)
0.87(L)

ˆA12
0.58(S)
0.65(S)
0.71(M)
0.81(L)

avg(G-D)
3.5 – 4.5
7.93 – 12
24.94 – 31.73
302.21 – 701.06
FULL(10,4) – 10% of DICES runs failed

p-value
0.003
1.69E-06
7.96E-11
<2.2E-16

ˆA12
0.74(L)
0.86(L)
0.94(L)
0.9(L)

avg(G-D)
4 – 5.9
8.9 – 16.23
30.17 – 34.41
596.31 – 1365.28

p-value
9.21E-11
9.53E-11
1.61E-10
<2.2E-16

ˆA12
0.96(L)
0.98(L)
0.98(L)
0.86(L)

ˆA12
0.87(L)
0.8(L)
0.83(L)
0.85(L)

avg(G-D)
3.8 – 5.4
10.03 – 14.47
28.4 – 31.64
956.47 – 802.48

FULL(6,4) – 33.3% of DICES runs failed
p-value
5.39E-06
5.98E-05
1.53E-05
<2.2E-16
MNP(5,2)
p-value
0.002
0.0029
0.004
0.099

avg(G-D)
1.8 – 2.2
3.87 – 5.23
32.39 – 32.65
381.07 – 469.13

ˆA12
0.68(M)
0.71(M)
0.72(M)
0.59(S)

ˆA12
1(L)
1(L)
0.61(S)
0.97(L)

avg(G-D)
4.1 – 6
8.03 – 16.63
16.6 – 19.7
295.94 – 949.2

FULL(7,3) – 66.6% of DICES runs failed
p-value
9.70E-08
1.35E-11
0.145
<2.2E-16
MNP(8,2)
p-value
1.55E-08
0.0002
3.43E-06
<2.2E-16

avg(G-D)
2.1 – 3.4
5.57 – 7.6
32.6 – 33.6
787.06 – 392.62

ˆA12
0.9(L)
0.77(L)
0.85(L)
0.08(L)

* The avg(G-D) column shows the average (avg) metrics for GenAdapt (G) versus those for DICES (D).

With the analysis for RQ1 intuitively explained over one subject,
namely MNP(8,2), we now present the complete results for this RQ.
Table 2 compares GenAdapt against DICES for our ten synthetic
subjects (i.e., four FULL(𝑛, 3), four FULL (𝑛, 4) and two MNP(𝑛, 2)
where 𝑛 is the number of network nodes) by reporting the average
number of congestion occurrences, the average total duration that
the network is congested, the average execution time, and the aver-
age packet-loss values obtained by 30 runs of DICES and GenAdapt.
For four subjects, some runs of DICES failed to resolve the last
congestion within the simulation time. Specifically, for FULL(6,3),
12 runs; for FULL(6,4), 10 runs; for FULL(7,3), 20 runs; and for
FULL(10,4), 3 runs of DICES failed to resolve congestion. For these
subjects, the reported average number of congestion occurrences
and execution times capture only the successful runs of DICES.
In contrast, all runs of GenAdapt for all the subjects successfully
resolved congestion within the simulation time.

We compare the results of Table 2 through statistical testing.
We use the non-parametric pairwise Wilcoxon rank sum test [21]
and the Vargha-Delaney’s ˆ𝐴12 effect size [83]. We first focus on
the following three metrics: number of congestion occurrences,
congestion duration, and packet loss. For fives subjects – MNP(8,2),
MNP(5,2), FULL(10,4), FULL(6,4), and FULL(6,3) – the 𝑝-values for
all the comparisons of the above three metrics are lower than 0.05
and the ˆ𝐴12 statistics show large or medium effect sizes, indicating
that GenAdapt significantly improves DICES w.r.t. the three met-
rics on the five subjects. For the four other subjects – FULL(5, 3),
FULL(7,3), FULL(7,4) and FULL(10, 3) – GenAdapt significantly im-
proves DICES with large or medium effect sizes w.r.t. at least one
of these three metrics. For all the subjects, the averages of these
three metrics obtained by GenAdapt are better than those obtained
by DICES, and there is no case where DICES performs better than
GenAdapt w.r.t. any of these three metrics.

As for the execution time, a larger execution time, as long as it is
not worsening the other three metrics, is not a weakness. For eight
subjects, the average execution time of GenAdapt is significantly
better than that of DICES and for two, it is the opposite. In those two
cases, however, while GenAdapt is slower than DICES on average, it
still significantly outperforms DICES w.r.t. the other three metrics.
Figure 9 shows the packet-loss values obtained by 30 runs of
GenAdapt, DICES and OSPF applied to the industry subject (EMS).
All 30 runs of GenAdapt and DICES could resolve the congestion in
EMS within the simulation time. However, OSPF incurs high packet
loss (avg. 36.5%), since its heuristic link weights cannot prevent
congestion in EMS. Both GenAdapt and DICES start with high
packet loss, but since they can resolve congestion, packet loss drops
quickly, yielding low averages over the duration of simulation. The

Figure 9: Comparing packet-loss values obtained by 30 runs
of DICES, GenAdapt and OSPF.

differences between the packet-loss values of GenAdapt and DICES
are neither statistically significant (𝑝-value = 0.44) nor practically
significant – a packet-loss difference of 0.4% is negligible in practice.
The results of Figure 9 signify the need for runtime adaptation
in EMS. Further, the results in both Table 2 and Figure 9 show
that while GenAdapt can reduce congestion occurrences over time
compared to DICES, doing so does not come at the cost of being
less effective in resolving a one-off congestion in EMS caused by
several requests arriving almost at once.

The answer to RQ1 is that GenAdapt successfully resolves conges-
tions in all the subjects. Compared to DICES, GenAdapt reduces
the average number of congestions for six subjects with a high
statistical significance, while DICES never outperforms GenAdapt
in any of the congestion resolution metrics. Further, for our in-
dustry subject, GenAdapt significantly outperforms the standard
SDN data-forwarding algorithm, OSPF, in reducing packet loss.

4.2 RQ2 – Scalability
To answer RQ2, we perform two sets of studies. In the first set,
we increase the network size and in the second set – the number
of requests. Specifically, first, we create ten synthetic networks
with the FULL topology and having 5, 10, . . . , 50 nodes; and, for
each network, we generate five requests with the same bandwidth
at once to reach a total bandwidth of 150Mbps. Second, we cre-
ate a five-node network with the FULL topology and execute ten
different experiments by subsequently generating 5, 10, . . . , 50 re-
quests at once such that for each experiment, the requests have
the same bandwidth and the sum of the requests’ bandwidths is
150Mbps. For both experimental sets, we record the execution time
of the configuration of GenAdapt used for the FULL topology as
described in Section 4.1. Our experimental setup in RQ2 follows
that used by DICES for scalability analysis. We focus on the FULL
topology for scalability analysis because networks with this topol-
ogy have considerably more links and pose a bigger challenge for
self-adaptation planning, as evidenced by the failure of DICES over
several networks with the FULL topology (see Table 2).

102030DICESGenAdaptOSPFMethodPacket Loss (%)OSPFDICES GenAdaptPacket Loss (%)36.5%2030104.5%4.1%SEAMS ’22, May 18–23, 2022, PITTSBURGH, PA, USA

Jia Li, Shiva Nejati and Mehrdad Sabetzadeh

Figure 10: Execution times of GenAdapt versus (a) number
of links and (b) number of requests.

Figure 10 shows the execution time of GenAdapt versus the
number of network links (Figures 10(a)), and versus the number of
requests (Figure 10(b)). For each network size and for each number
of requests, GenAdapt is executed 30 times. For each diagram in
Figures 10, we have fitted a linear regression line (time = −0.019 +
0.0036 × links in Figure 10(a); and time = 0.087 + 0.0077 × links
in Figure 10(b)). In both cases, we obtain a 𝑝-value of < 2.2𝑒 − 16,
indicating that the models fit the data well.

The answer to RQ2 is that the execution time of GenAdapt is
linear in the number of requests and in the size of the network.

4.3 Threats to Validity
Construct and external validity are the validity aspects most perti-
nent to our evaluation.

Construct validity. Our experiments are simulation-based; the
extent to which the measurements obtained through simulation
are reflective of the real world is therefore an important factor to
consider. To this end, we note that the tools that our simulator
builds on, i.e., ONOS and Mininet, are widely considered to be
high-fidelity network simulators [12, 13, 17, 86]. While the high
fidelity of our simulator provides confidence about our results,
future experimentation with real IoT networks remains necessary.
External validity. We scoped our experiments to two network
topologies only. As discussed in Section 4.1, the two topologies
are the two extreme ends of the spectrum in terms of path over-
laps between node pairs – the main determinant of complexity for
GenAdapt. We expect that, for other topologies lending themselves
to congestion resolution via re-routing, our approach will behave
within the same range as seen in our experiments. To ensure ade-
quate coverage, our evaluation examined 18 networks based on the
two topologies considered. In addition, our evaluation included a
real industrial IoT network with its own topology. The number, size
and complexity of the networks in our experiments are comparable
to those in the literature, e.g., [3, 12, 54, 80, 86]. A second consider-
ation related to external validity is the tuning of our approach. The
only parameter of our approach that requires tuning by the user is
the number of generations of GenAdapt. As discussed in Section 4.1,
tuning this parameter is straightforward based on the easily mea-
surable objective of keeping the execution time of GenAdapt less
than 𝛿 (i.e., the time interval between consecutive invocations of
GenAdapt). In practice, engineers can use our simulator to tune this
parameter for their specific network topology and traffic profile.

5 RELATED WORK
We compare our approach with related work in software engineer-
ing for self-adaptive systems and in congestion control for SDN.

Self-adaptive systems. Engineering self-adaptive systems, in-
cluding the principles underlying the construction, maintenance
and evolution of such systems, have been studied from different
angles and for different domains [9, 15, 23, 25, 34, 51, 82]. Our work
relates to dynamic adaptive search-based software engineering [41]
which uses a blend of artificial intelligence (AI) and optimization to
adapt system properties. Prior research in this field has used search
algorithms for different purposes such as configuring properties
of self-adaptive systems [75, 87] and improving the design and ar-
chitecture of such systems [10, 61, 74]. The closest work to ours is
DICES [80], which is used as a baseline for our experiments. Our
approach, in contrast to DICES, is generative and aims to reduce
the need for invoking adaptations over time.

Our work relates to AI-enabled adaptation [36, 73]. Among differ-
ent AI methods, we use GP because of its flexibility to learn formulas
that match our specific grammar for link-weight functions. To our
knowledge, we are the first to apply GP for adapting IoT networks
and reducing the need for frequent adaptations in this domain.

Congestion control in SDN. Network congestion resolution
has been studied extensively [5, 14, 43, 59]. Some congestion reso-
lution approaches work by adjusting data transmission rates [14].
Several others focus on traffic engineering to provide solutions
for better traffic control, better traffic operation, and better traf-
fic management, e.g., by multi-path routing [40], creating a new
routing technique [58], and flow-based routing [8]. Our work is
related to the research that utilizes the additional flexibility offered
by the programmable control in the SDN architecture [3, 20, 24, 35,
37, 44, 45, 80]. Within this line of research, congestion control is
commonly cast as an optimization problem [24], to be solved using
local search [35] or linear programming [3]. Some techniques [37]
adapt the network parameters at runtime using a pre-defined set
of rules. In contrast to our work, none of these techniques evolve
the rules in response to feedback from SDN monitoring.

6 CONCLUSION
We presented GenAdapt – an adaptive approach that uses ge-
netic programming for resolving network congestion in SDN-based
IoT networks. While existing self-adaptation research focuses on
modifying a running system via producing individual and concrete
elements, GenAdapt is generative and modifies the logic of the
running system so that the system itself can generate the concrete
elements without needing frequent adaptations. We used 18 syn-
thetic and one industrial network to compare GenAdapt against
two baseline techniques: DICES [80] and OSPF [1, 26]. GenAdapt
successfully resolved all congestion occurrences in our experimen-
tal networks, while DICES failed to do so in four of them. Further,
compared to DICES, GenAdapt reduced the number of congestion
occurrences and outperformed OSPF in reducing packet loss.

ACKNOWLEDGMENTS
We gratefully acknowledge funding from NSERC of Canada un-
der the Discovery and Discovery Accelerator programs. We thank
Seung Yeob Shin for discussions at the early stages of this work.
This research was enabled in part by support provided by Compute
Ontario and WestGrid (https://www.westgrid.ca/) and Compute
Canada (www.computecanada.ca).

051020902103806008701190156019802450# linksexecution time (s)# of requests0.00.40.81.21.65101520253035404550# requestsexecution time (s)# of Links0                        380600510152025 30   35   4540   50Execution time(s)0.01.21.60.80.42450198015601190870Execution time(s)0510(a) Execution time versus # of links(b) Execution time versus # of requestsLearning Self-adaptations for IoT Networks: A Genetic Programming Approach

SEAMS ’22, May 18–23, 2022, PITTSBURGH, PA, USA

REFERENCES
[1] 2005.

Cisco. OSPF Design Guide.

Documentation
https://www.cisco.com/c/en/us/support/docs/ip/open-shortest-path-first-
ospf/7039-1.html.

at

[2] 2021. GenAdapt. https://figshare.com/s/de6eb6e61816401b5c9e
[3] Sugam Agarwal, Murali S. Kodialam, and T. V. Lakshman. 2013. Traffic Engi-
neering in Software Defined Networks. In Proceedings of the 2013 Annual IEEE
International Conference on Computer Communications (INFOCOM’13). 2211–
2219.

[4] Ian F. Akyildiz, Ahyoung Lee, Pu Wang, Min Luo, and Wu Chou. 2014. A Roadmap
for Traffic Engineering in SDN-OpenFlow Networks. Computer Networks 71
(2014), 1–30.

[5] Mohammad Alizadeh, Albert G. Greenberg, David A. Maltz, Jitendra Padhye,
Parveen Patel, Balaji Prabhakar, Sudipta Sengupta, and Murari Sridharan. 2010.
Data Center TCP (DCTCP). In Proceedings of the 2010 ACM Conference on Special
Interest Group on Data Communication (SIGCOMM’10). 63–74.

[6] Dalal Alrajeh, Antoine Cailliau, and Axel van Lamsweerde. 2020. Adapting
requirements models to varying environments. In ICSE ’20: 42nd International
Conference on Software Engineering, Seoul, South Korea, 27 June - 19 July, 2020,
Gregg Rothermel and Doo-Hwan Bae (Eds.). ACM, 50–61.

[7] Rashid Amin, Martin Reisslein, and Nadir Shah. 2018. Hybrid SDN Networks: A
Survey of Existing Approaches. IEEE Communications Surveys and Tutorials 20, 4
(2018), 3259–3306.

[8] Ahmed Amokrane, Rami Langar, Raouf Boutaba, and Guy Pujolle. 2013. Online
flow-based energy efficient management in Wireless Mesh Networks. In 2013
IEEE Global Communications Conference, GLOBECOM 2013, Atlanta, GA, USA,
December 9-13, 2013. IEEE, 329–335.

[9] Ivan Dario Paez Anaya, Viliam Simko, Johann Bourcier, Noël Plouzeau, and Jean-
Marc Jézéquel. 2014. A Prediction-driven Adaptation Approach for Self-Adaptive
Sensor Networks. In Proceedings of the 9th International Symposium on Software
Engineering for Adaptive and Self-Managing Systems SEAMS’14. 145–154.
[10] Sandro S. Andrade and Raimundo José de A. Macêdo. 2013. A Search-Based Ap-
proach for Architectural Design of Feedback Control Concerns in Self-Adaptive
Systems. In Proceedings of the 7th IEEE International Conference on Self-Adaptive
and Self-Organizing Systems (SASO’13). 61–70.

[11] G. Apostolopoulos, S. Kamat, D. Williams, R. Guérin, A. Orda, and T. Przygienda.

1999. QoS Routing Mechanisms and OSPF Extensions. RFC 2676 (1999), 1–50.

[12] Abdelhadi Azzouni, Raouf Boutaba, and Guy Pujolle. 2017. NeuRoute: Predictive
dynamic routing for software-defined networks. In 13th International Conference
on Network and Service Management, CNSM 2017, Tokyo, Japan, November 26-30,
2017. IEEE Computer Society, 1–6.

[13] Pankaj Berde, Matteo Gerola, Jonathan Hart, Yuta Higuchi, Masayoshi Kobayashi,
Toshio Koide, Bob Lantzand Brian O’Connor, Pavlin Radoslavov, William Snow,
and Guru Parulkar. 2014. ONOS: Towards an Open, Distributed SDN OS. In
Proceedings of the 3rd Workshop on Hot Topics in Software Defined Networking
(HotSDN’14). 1–6.

[14] August Betzler, Carles Gomez, Ilker Demirkol, and Josep Paradells. 2016. CoAP
Congestion Control for the Internet of Things. IEEE Communications Magazine
54, 7 (2016), 154–160.

[15] Md Zakirul Alam Bhuiyan, Jie Wu, Guojun Wang, Tian Wang, and Moham-
mad Mehedi Hassan. 2017. e-Sampling: Event-Sensitive Autonomous Adaptive
Sensing and Low-Cost Monitoring in Networked Sensing Systems. ACM Trans-
actions on Autonomous and Adaptive Systems (TAAS) 12, 1 (2017), 1:1–1:29.
[16] Andrea Bianco, Paolo Giaccone, Ahsan Mahmood, Mario Ullio, and Vinicio
Vercellone. 2015. Evaluating the SDN control traffic in large ISP networks. In
Proceedings of the 2015 IEEE International Conference on Communications (ICC’15).
5248–5253.

[17] Andrea Bianco, Paolo Giaccone, Reza Mashayekhi, Mario Ullio, and Vinicio
Vercellone. 2017. Scalability of ONOS reactive forwarding applications in ISP
networks. Computer Communications 102 (2017), 130–138.

[18] Markus Borg, Raja Ben Abdessalem, Shiva Nejati, François-Xavier Jegeden, and
Donghwan Shin. 2021. Digital Twins Are Not Monozygotic - Cross-Replicating
ADAS Testing in Two Industry-Grade Automotive Simulators. In 14th IEEE Con-
ference on Software Testing, Verification and Validation, ICST 2021. IEEE, 383–393.
[19] Alessio Botta, Alberto Dainotti, and Antonio Pescapè. 2012. A Tool for The
Generation of Realistic Network Workload for Emerging Networking Scenarios.
Computer Networks 56, 15 (2012), 3531–3547.

[20] Sebastian Brandt, Klaus-Tycho Foerster, and Roger Wattenhofer. 2016. On Con-
sistent Migration of Flows in SDNs. In Proceedings of the 2016 Annual IEEE
International Conference on Computer Communications (INFOCOM’16). 1–9.
[21] J. Anthony Capon. 1991. Elementary Statistics for the Social Sciences: Study Guide.

Wadsworth Publishing Company, Belmont, CA, USA.

[22] Marcel Caria, Tamal Das, and Admela Jukan. 2015. Divide and conquer: Partition-
ing OSPF networks with SDN. In Proceedings of the 2015 IFIP/IEEE International
Symposium on Integrated Network Management (IM’15). 467–474.

[23] Betty H. C. Cheng, Andres J. Ramirez, and Philip K. McKinley. 2013. Harnessing
evolutionary computation to enable dynamically adaptive systems to manage

uncertainty. In 1st International Workshop on Combining Modelling and Search-
Based Software Engineering, CMSBSE@ICSE 2013, San Francisco, CA, USA, May 20,
2013. IEEE Computer Society, 1–6.

[24] Sheng-Hao Chiang, Jian-Jhih Kuo, Shan-Hsiang Shen, De-Nian Yang, and Wen-
Tsuen Chen. 2018. Online Multicast Traffic Engineering for Software-Defined
Networks. In Proceedings of the 2018 Annual IEEE International Conference on
Computer Communications (INFOCOM’18). 414–422.

[25] Zack Coker, David Garlan, and Claire Le Goues. 2015. SASS: Self-adaptation
Using Stochastic Search. In Proceedings of the 10th International Symposium on
Software Engineering for Adaptive and Self-Managing Systems SEAMS’15. 168–174.
[26] Rob Coltun, Dennis Ferguson, John Moy, and Acee Lindem. 2008. OSPF for IPv6.

Internet Standard RFC 5340. Network Working Group.

[27] Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, and Clifford Stein.

2009. Introduction to Algorithms (3rd ed.). The MIT Press.

[28] Byron DeVries and Betty H. C. Cheng. 2017. Using Models at Run Time to
Detect Incomplete and Inconsistent Requirements. In Proceedings of MODELS 2017
Satellite Events, Austin, TX, USA, September, 17, 2017 (CEUR Workshop Proceedings,
Vol. 2019). CEUR-WS.org, 201–209.

[29] Robert Feldt and Shin Yoo. 2020. Flexible Probabilistic Modeling for Search Based
Test Data Generation. In ICSE ’20: 42nd International Conference on Software
Engineering, SBST Workshop, Seoul, Republic of Korea, 27 June - 19 July, 2020.
ACM, 537–540.

[30] Antonio Filieri, Henry Hoffmann, and Martina Maggio. 2015. Automated De-
sign of Self-Adaptive Software with Control-Theoretical Formal Guarantees. In
Software Engineering & Management 2015, Multikonferenz der GI-Fachbereiche
Softwaretechnik (SWT) und Wirtschaftsinformatik (WI), FA WI-MAW, 17. März -
20. März 2015, Dresden, Germany (LNI, Vol. P-239), Uwe Aßmann, Birgit Demuth,
Thorsten Spitta, Georg Püschel, and Ronny Kaiser (Eds.). 112–113.

[31] Bernard Fortz and Mikkel Thorup. 2000. Internet Traffic Engineering by Optimiz-
ing OSPF Weights. In Proceedings IEEE INFOCOM 2000, The Conference on Com-
puter Communications, Nineteenth Annual Joint Conference of the IEEE Computer
and Communications Societies, Reaching the Promised Land of Communications,
Tel Aviv, Israel, March 26-30, 2000. IEEE Computer Society, 519–528.

[32] Bernard Fortz and Mikkel Thorup. 2002. Optimizing OSPF/IS-IS weights in a

changing world. IEEE J. Sel. Areas Commun. 20, 4 (2002), 756–767.

[33] Bernard Fortz and Mikkel Thorup. 2004. Increasing Internet Capacity Using

Local Search. Comput. Optim. Appl. 29, 1 (2004), 13–48.

[34] David Garlan, Bradley R. Schmerl, and Shang-Wen Cheng. 2009. Software
Architecture-Based Self-Adaptation.
In Autonomic Computing and Network-
ing, Yan Zhang, Laurence Tianruo Yang, and Mieso K. Denko (Eds.). Springer,
31–55.

[35] Steven Gay, Renaud Hartert, and Stefano Vissicchio. 2017. Expect the Unexpected:
Sub-Second Optimization for Segment Routing. In Proceedings of the 2017 Annual
IEEE International Conference on Computer Communications (INFOCOM’17). 1–9.
[36] Omid Gheibi, Danny Weyns, and Federico Quin. 2021. On the Impact of Applying
Machine Learning in the Decision-Making of Self-Adaptive Systems. In 16th
International Symposium on Software Engineering for Adaptive and Self-Managing
Systems, SEAMS@ICSE 2021, Madrid, Spain, May 18-24, 2021. IEEE, 104–110.
[37] Ma Ghobadi, S. Hassas Yeganeh, and Y. Ganjali. 2012. Rethinking end-to-end
congestion control in software-defined networks. In 11th ACM Workshop on Hot
Topics in Networks, HotNets-XI, Redmond, WA, USA - October 29 - 30, 2012, Srikanth
Kandula, Jitendra Padhye, Emin Gün Sirer, and Ramesh Govindan (Eds.). ACM,
61–66.

[38] Yingya Guo, Zhiliang Wang, Xia Yin, Xingang Shi, and Jianping Wu. 2014. Traffic
Engineering in SDN/OSPF Hybrid Network. In 2014 IEEE 22nd International
Conference on Network Protocols. 563–568.

[39] Evangelos Haleplidis, Kostas Pentikousis, Spyros G. Denazis, Jamal Hadi Salim,
David Meyer, and Odysseas G. Koufopavlou. 2015. Software-Defined Networking
(SDN): Layers and Architecture Terminology.
Information RFC 7426. Internet
Research Task Force (IRTF).

[40] Guangjie Han, Yuhui Dong, Hui Guo, Lei Shu, and Dapeng Wu. 2015. Cross-
layer optimized routing in wireless sensor networks with duty cycle and energy
harvesting. Wirel. Commun. Mob. Comput. 15, 16 (2015), 1957–1981.

[41] Mark Harman, Edmund Burke, John Clark, and Xin Yao. 2012. Dynamic Adap-
tive Search Based Software Engineering. In Proceedings of the 2012 ACM-IEEE
International Symposium on Empirical Software Engineering and Measurement
(ESEM’12). 1–8.

[42] M. Harman, P. McMinn, J. Souza, and S. Yoo. 2010. Search Based Software
Engineering: Techniques, Taxonomy, Tutorial. In LASER Summer School.
[43] Keqiang He, Eric Rozner, Kanak Agarwal, Yu (Jason) Gu, Wes Felter, John B. Carter,
and Aditya Akella. 2016. AC/DC TCP: Virtual Congestion Control Enforcement
for Datacenter Networks. In Proceedings of the 2016 ACM Conference on Special
Interest Group on Data Communication (SIGCOMM’16). 244–257.

[44] Chi-Yao Hong, Srikanth Kandula, Ratul Mahajan, Ming Zhang, Vijay Gill, Mohan
Nanduri, and Roger Wattenhofer. 2013. Achieving High Utilization with Software-
driven WAN. In Proceedings of the 2013 ACM Conference on Special Interest Group
on Data Communication (SIGCOMM’13). 15–26.

SEAMS ’22, May 18–23, 2022, PITTSBURGH, PA, USA

Jia Li, Shiva Nejati and Mehrdad Sabetzadeh

[45] Meitian Huang, Weifa Liang, Zichuan Xu, Wenzheng Xu, Song Guo, and Yinlong
Xu. 2016. Dynamic Routing for Network Throughput Maximization in Software-
Defined Networks. In Proceedings of the 2016 Annual IEEE International Conference
on Computer Communications (INFOCOM’16). 1–9.

[46] Mark Hung. 2017. Leading the IoT. Documentation at https://www.gartner.com/

imagesrv/books/iot/iotEbook_digital.pdf.

[47] Muhammad Usman Iftikhar, Gowri Sankar Ramachandran, Pablo Bollansée,
Danny Weyns, and Danny Hughes. 2017. DeltaIoT: A Self-Adaptive Internet of
Things Exemplar. In Proceedings of the 12th International Symposium on Software
Engineering for Adaptive and Self-Managing Systems SEAMS’17. 76–82.

[48] Sharmin Jahan, Ian Riley, Charles Walter, Rose F. Gamble, Matt Pasco, Philip K.
McKinley, and Betty H. C. Cheng. 2020. MAPE-K/MAPE-SAC: An interaction
framework for adaptive systems with security assurance cases. Future Gener.
Comput. Syst. 109 (2020), 197–209.

[49] Jeffrey O. Kephart and David M. Chess. 2003. The Vision of Autonomic Computing.

Computer 36, 1 (2003), 41–50.

[50] John R Koza and John R Koza. 1992. Genetic programming: on the programming

of computers by means of natural selection. Vol. 1. MIT press.

[51] Christian Krupitzer, Martin Breitbach, Felix Maximilian Roth, Sebastian VanSy-
ckel, Gregor Schiele, and Christian Becker. 2018. A Survey on Engineering Ap-
proaches for Self-Adaptive Systems (Extended Version). Technical Report. University
of Mannheim. 1–33 pages.

[52] Bob Lantz, Brandon Heller, and Nick McKeown. 2010. A Network in a Laptop:
Rapid Prototyping for Software-defined Networks. In Proceedings of the 9th ACM
SIGCOMM Workshop on Hot Topics in Networks (HotNets’10). 19:1–19:6.

[53] Ying-Dar Lin, Hung-Yi Teng, Chia-Rong Hsu, Chun-Chieh Liao, and Yuan-Cheng
Lai. 2016. Fast Failover and Switchover for Link Failures and Congestion in Soft-
ware Defined Networks. In Proceedings of the 2016 IEEE International Conference
on Communications (ICC’16). 1–6.

[54] Lin Liu, Jiantao Zhou, Xiaoyong Guo, and Rui-dong Qi. 2018. A Method for
Calculating Link Weight Dynamically by Entropy of Information in SDN. In 22nd
IEEE International Conference on Computer Supported Cooperative Work in Design,
CSCWD 2018, Nanjing, China, May 9-11, 2018. IEEE, 535–540.

[55] Felipe A. Lopes, Marcelo Santos, Robson Fidalgo, and Stenio F. L. Fernandes.
2016. A Software Engineering Perspective on SDN Programmability.
IEEE
Communications Surveys and Tutorials 18, 2 (2016), 1255–1272.

[56] Sean Luke. 2013. Essentials of Metaheuristics (second ed.). Lulu. Available for

free at http://cs.gmu.edu/∼sean/book/metaheuristics/.

[57] Sean Luke and Liviu Panait. 2006. A Comparison of Bloat Control Methods for

Genetic Programming. Evol. Comput. 14, 3 (2006), 309–344.

[58] Bomin Mao, Zubair Md. Fadlullah, Fengxiao Tang, Nei Kato, Osamu Akashi,
Takeru Inoue, and Kimihiro Mizutani. 2017. A Tensor Based Deep Learning
Technique for Intelligent Packet Routing. In 2017 IEEE Global Communications
Conference, GLOBECOM 2017, Singapore, December 4-8, 2017. IEEE, 1–6.

[59] Matthew Mathis and Jamshid Mahdavi. 1996. Forward Acknowledgement: Re-
fining TCP Congestion Control. In Proceedings of the 1996 ACM Conference on
Special Interest Group on Data Communication (SIGCOMM’96). 281–291.

[60] Reza Matinnejad, Shiva Nejati, Lionel C. Briand, and Thomas Bruckmann. 2015.
Effective test suites for mixed discrete-continuous stateflow controllers. In Pro-
ceedings of the 2015 10th Joint Meeting on Foundations of Software Engineering,
ESEC/FSE 2015. ACM, 84–95.

[61] Daniel A. Menascé, Hassan Gomaa, Sam Malek, and Jo ao P. Sousaa. 2011. SASSY:
A Framework for Self-Architecting Service-Oriented Systems. IEEE Software 28,
6 (2011), 78–85.

[62] Claudio Menghi, Shiva Nejati, Lionel C. Briand, and Yago Isasi Parache. 2020.
Approximation-refinement testing of compute-intensive cyber-physical mod-
els: an approach based on system identification. In ICSE ’20: 42nd International
Conference on Software Engineering. ACM, 372–384.

[63] Claudio Menghi, Shiva Nejati, Khouloud Gaaloul, and Lionel C. Briand. 2019.
Generating automated and online test oracles for Simulink models with con-
tinuous and uncertain behaviors. In Proceedings of the ACM Joint Meeting on
European Software Engineering Conference and Symposium on the Foundations of
Software Engineering, ESEC/SIGSOFT FSE 2019. ACM, 27–38.

[64] Gabriel A. Moreno, Javier Cámara, David Garlan, and Bradley R. Schmerl. 2015.
Proactive self-adaptation under uncertainty: a probabilistic model checking ap-
proach. In Proceedings of the 2015 10th Joint Meeting on Foundations of Software
Engineering, ESEC/FSE 2015, Bergamo, Italy, August 30 - September 4, 2015, Elisa-
betta Di Nitto, Mark Harman, and Patrick Heymans (Eds.). ACM, 1–12.

[65] Shiva Nejati. 2021. Next-Generation Software Verification: An AI Perspective.

IEEE Software 38, 3 (2021), 126–130.

[66] Mohammad Noormohammadpour and Cauligi S. Raghavendra. 2018. Datacenter
Traffic Control: Understanding Techniques and Tradeoffs. IEEE Commun. Surv.
Tutorials 20, 2 (2018), 1492–1525.

[67] Luis Hernán García Paucar and Nelly Bencomo. 2019. Knowledge Base K Models
to Support Trade-Offs for Self-Adaptation using Markov Processes. In 13th IEEE

International Conference on Self-Adaptive and Self-Organizing Systems, SASO 2019,
Umea, Sweden, June 16-20, 2019. IEEE, 11–16.

[68] Riccardo Poli and William B. Langdon. 1998. Schema Theory for Genetic Program-
ming with One-Point Crossover and Point Mutation. In Evolutionary Computation.
Vol. 6. 231–252.

[69] Riccardo Poli and William B Langdon. 1998. Genetic programming with one-
point crossover. In Soft Computing in Engineering Design and Manufacturing.
Springer, 180–189.

[70] Riccardo Poli, William B Langdon, Nicholas F McPhee, and John R Koza. 2008. A

field guide to genetic programming. Lulu. com.

[71] Konstantinos Poularakis, George Iosifidis, Georgios Smaragdakis, and Leandros
Tassiulas. 2019. Optimizing Gradual SDN Upgrades in ISP Networks. IEEE/ACM
Transactions on Networking 27, 1 (2019), 288–301.

[72] M. Priyadarsini, J. C. Mukherjee, P. Bera, S. Kumar, A. H. M. Jakaria, and
M. Ashiqur Rahman. 2019. An adaptive load balancing scheme for software-
defined network controllers. Comput. Networks 164 (2019).

[73] Federico Quin, Danny Weyns, Thomas Bamelis, Sarpreet Singh Buttar, and Sam
Michiels. 2019. Efficient analysis of large adaptation spaces in self-adaptive sys-
tems using machine learning. In Proceedings of the 14th International Symposium
on Software Engineering for Adaptive and Self-Managing Systems, SEAMS@ICSE
2019, Montreal, QC, Canada, May 25-31, 2019. ACM, 1–12.

[74] Andres J. Ramirez and Betty H. C. Cheng. 2010. Design Patterns for Developing
Dynamically Adaptive Systems. In Proceedings of the 2010 Workshop on Software
Engineering for Adaptive and Self-Managing Systems SEAMS’10. 49–58.

[75] Andres J. Ramirez, David B. Knoester, Betty H.C. Cheng, and Philip K. McKinley.
2009. Applying Genetic Algorithms to Decision Making in Autonomic Com-
puting Systems. In Proceedings of the 6th International Conference on Autonomic
Computing (ICAC’09). 97–106.

[76] Albert Rego, Sandra Sendra, José Miguel Jiménez, and Jaime Lloret. 2017. OSPF
routing protocol performance in Software Defined Networks. In Proceedings of the
2017 4th International Conference on Software Defined Systems (SDS’17). 131–136.
[77] G. Rétvári, F. Németh, R. Chaparadza, and R. Szabó. 2009. OSPF for Implementing
Self-adaptive Routing in Autonomic Networks: A Case Study. In Modelling Auto-
nomic Communications Environments, Fourth IEEE International Workshop, MACE
2009, Venice, Italy, October 26-27, 2009. Proceedings, Yacine Ghamri-Doudane (Ed.),
Vol. 5844. Springer, 72–85.

[78] Mazeiar Salehie and Ladan Tahvildari. 2009. Self-adaptive software: Landscape
and research challenges. ACM Trans. Auton. Adapt. Syst. 4, 2 (2009), 14:1–14:42.
[79] Eric O. Scott and Sean Luke. 2019. ECJ at 20: toward a general metaheuristics
toolkit. In Proceedings of the Genetic and Evolutionary Computation Conference
Companion, GECCO 2019, Prague, Czech Republic, July 13-17, 2019, Manuel López-
Ibáñez, Anne Auger, and Thomas Stützle (Eds.). ACM, 1391–1398.

[80] Seung Yeob Shin, Shiva Nejati, Mehrdad Sabetzadeh, Lionel C. Briand, Chetan
Arora, and Frank Zimmer. 2020. Dynamic adaptation of software-defined net-
works for IoT systems: a search-based approach. In SEAMS ’20: IEEE/ACM 15th
International Symposium on Software Engineering for Adaptive and Self-Managing
Systems, Seoul, Republic of Korea, 29 June - 3 July, 2020, Shinichi Honiden, Elisa-
betta Di Nitto, and Radu Calinescu (Eds.). ACM, 137–148.

[81] Thierry Sotiropoulos, Hélène Waeselynck, Jérémie Guiochet, and Félix Ingrand.
2017. Can Robot Navigation Bugs Be Found in Simulation? An Exploratory Study.
In Proc. of the 2017 IEEE International Conference on Software Quality, Reliability
and Security. 150–159.

[82] Michael Stein, Alexander Frömmgen, Roland Kluge, Frank Löffler, Andy Schürr,
Alejandro Buchmann, and Max Mühlhäuser. 2016. TARL: Modeling Topology
Adaptations for Networking Applications. In Proceedings of the 11th International
Symposium on Software Engineering for Adaptive and Self-Managing Systems
SEAMS’16. 57–63.

[83] András Vargha and Harold D. Delaney. 2000. A critique and improvement of
the CL common language effect size statistics of McGraw and Wong. Journal of
Educational and Behavioral Statistics 25, 2 (2000), 101–132.

[84] Christian Veenhuis. 2013. Structure-Based Constants in Genetic Programming.
In Progress in Artificial Intelligence - 16th Portuguese Conference on Artificial
Intelligence, EPIA 2013, Angra do Heroísmo, Azores, Portugal, September 9-12, 2013.
Proceedings (Lecture Notes in Computer Science, Vol. 8154), Luís Correia, Luís Paulo
Reis, and José Cascalho (Eds.). Springer, 126–137.

[85] Danny Weyns, M. Usman Iftikhar, Danny Hughes, and Nelson Matthys. 2018. Ap-
plying Architecture-Based Adaptation to Automate the Management of Internet-
of-Things. In Proceedings of the 12th European Conference on Software Architecture
(ECSA’18). 49–67.

[86] Liehuang Zhu, Md. Monjurul Karim, Kashif Sharif, Chang Xu, Fan Li, Xiaojiang
Du, and Mohsen Guizani. 2021. SDN Controllers: A Comprehensive Analysis and
Performance Evaluation Study. ACM Comput. Surv. 53, 6 (2021), 133:1–133:40.

[87] Parisa Zoghi, Mark Shtern, Marin Litoiu, and Hamoun Ghanbari. 2016. Designing
Adaptive Applications Deployed on Cloud Environments. ACM Transactions on
Autonomous and Adaptive Systems (TAAS) 10, 4 (2016), 25:1–25:26.

