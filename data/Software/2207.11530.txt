KELLECT: A KERNEL-BASED EFFICIENT AND LOSSLESS EVENT
LOG COLLECTOR

2
2
0
2

l
u
J

3
2

]
E
S
.
s
c
[

1
v
0
3
5
1
1
.
7
0
2
2
:
v
i
X
r
a

Tieming Chen, Qijie Song, Xuebo Qiu, Tiantian Zhu, Zhiling Zhu, Mingqi Lv
College of Computer Science & Technology
Zhejiang University of Technology
Hangzhou, Zhejiang, China
{tmchen, songqijie, qiuxuebo, ttzhu, zhilingzhu, mingqilv}@zjut.edu.cn

ABSTRACT

As an essential element for log analysis, the system kernel-based event can be effectively employed
in the hybrid computing environment integrated with cloud, edge, and endpoint for intelligent threat
detection. However, the issues of massiveness, heterogeneity, and semantic redundancy have become
the biggest challenges in event-based security analysis. Unfortunately, there is no comprehensive
tool to collect and analyze its kernel logs for the widely used OS Windows. This paper proposes a
kernel-based event log collector named Kellect, a multi-thread tool built on ETW(events tracing for
Windwos). Kellect can provide very compressed but most valuable kernel event data for general-
purpose analysis on software anomaly detection. Experimental results in real-world show that Kellect
can collect kernel event logs generated from FileIO, Process, Thread, Images, Register, and Network,
with efﬁcient and lossless. The total performance is three times higher than that of existing tools.
The CPU cost stays only at around 1%, while the memory consumption is less than 50MB. As an
important application case, the data collected by Kellect is proved to be utilized to build proper model
to detect APT after transformed into provenance graphs with complete semantics. At last, a large
experiments for the full techniques from ATT&CK are conducted, and the full relevant log dataset is
collected using Kellect. To our best knowledge, it is the ﬁrst precise and public benchmark sample
dataset for kernel event-based APT detection.

Keywords ETW · Event · Lossless · Security Detection · Kernel log

1

Introduction

Endpoints with multiple applications are the basic unit and an essential element of building an information network.
They store critical data in large quantities and are vulnerable to attack and theft. Recently, the complexity and diversity
of malicious threats against endpoints have signiﬁcantly changed. As the most threatening cyber security issue today,
Advanced Persistent Threats (APT), which are concealed, permeable, and pertinent, pose increasingly severe threats to
various information security systems. Trafﬁc-based security detection can no longer satisfy the growing demand for
security analysis and accurate traceability.

The kernel-based event analysis is a part of the fundamental guarantees for realizing security governance in the hybrid
computing environment integrated with cloud, edge, and terminal endpoint. The event data can be divided into user-level
and kernel-level events according to different collecting layers. User-level events are produced by human-computer
interaction. The API calls are collected to record the behavior and purpose of the software, but there are shortcomings
such as unclear semantics and malicious tampering. Kernel-level events document underlying ﬁne-grained related
behaviors by collecting system calls and related parameters with higher reliability, which can better reﬂect user and
software operations. Compared to the network trafﬁc that cannot fully reﬂect the semantics of the behavior, kernel-level
events are more traceable and immune to encryption. Therefore, many researchers use kernel-level events for cyber
security, such as [1, 2, 3, 4, 5, 6].

 
 
 
 
 
 
Kellect: a Kernel-Based Efﬁcient and Lossless Event Log Collector

As one of the most widely used systems on edge, Windows is more vulnerable to cyber-attacks like APT, trojan, and
ransomware. ETW for Windows is a native event tracing framework with abundant APIs to collect kernel-level events.
The framework contains four modules: provider, consumer, session, and controller. The provider registers on the
framework and provides standardized event data to consumers. The consumer registers simultaneously and receives
events through the session callback for parsing and processing according to the ﬁltering conditions. The framework
supports event tracing at the user and kernel levels. It contains rich providers that could reﬂect all aspects of system
operations. But ETW only produces data with unclear semantics and can not apply directly.

Gradually, many researchers have developed tools on ETW for kernel events tracing, such as SilkETW[7], Sealighter[8],
Wtrace[9], SPADE[10], CONAN[11], and NXlog[12]. CONAN is the most representative one among them all. It
supports collecting kernel events and supplements the data semantics through the call stack. However, the above tools
still have information loss in the processing of ﬁne-grained semantics and is not open-source.

In order to ﬁll the gap in kernel-based events collecting for Windows, this paper proposes an efﬁcient and lossless
collector named Kellect, which has been open-source on Github.1. In Table 1, we list and compare some kernel-based
collectors currently and summarize the challenges,

Table 1: Comparison of tools for Windows kernel events colletcing

Tools

Platform

Support Types of Event
FileIO Image Process Register Thread Network API Callstack

SilkETW [7] Windows (cid:51)
Sealighter [8] Windows (cid:51)
Wtrace [9] Windows (cid:51)
(cid:51)

Spade [10]

Windows
Linux
Windows
Linux

(cid:51)

CONAN [11]

(cid:51)
(cid:51)
(cid:53)

(cid:51)

(cid:51)

(cid:51)
(cid:51)
(cid:51)

(cid:51)

(cid:51)

(cid:51)
(cid:51)
(cid:51)

(cid:51)

(cid:51)

(cid:51)
(cid:51)
(cid:53)

(cid:51)

(cid:53)

(cid:51)
(cid:51)
(cid:51)

(cid:51)

(cid:51)

(cid:53)
(cid:53)
(cid:53)

(cid:53)

(cid:53)

(cid:53)
(cid:53)
(cid:53)

(cid:53)

(cid:51)

NXlog[12]

Windows
Linux

NA NA

NA

NA

NA

NA NA NA

Kellect

Windows (cid:51)

(cid:51)

(cid:51)

(cid:51)

(cid:51)

(cid:51)

(cid:51)

(cid:51)

Precise
Semantics
(cid:53)
(cid:53)
(cid:53)

(cid:53)

(cid:53)

NA

(cid:51)

Real
Time
(cid:51)
(cid:51)
(cid:51)
(cid:53)(Win)
(cid:51)(Linux)
(cid:51)

Perfor-
mance

Delay

L
H
H

L

H

H
M
H

M

M

Open
Source
(cid:51)
(cid:51)
(cid:51)

(cid:51)

(cid:53)

(cid:51)

(cid:51)

NA

NA

H

L

(cid:51)(Only
Community
Edition)
(cid:51)

L represents Low, M represents Medium, H represents High, NA represents the information is not mentioned, (cid:51) represents Yes, (cid:53) represents No

1. In terms of collecting, the amount of kernel events provided is enormous. The original data collected on a
single client can reach 5GB one day, and the data collected on an ordinary 1000-person ofﬁce network can
reach 15TB one day. The average latency of ATP attacks from initial intrusion to impact is 83 days, and the
data collected by an attack can reach PB level [13].

2. In terms of analysis, the events contain heterogeneous information such as ﬁles, processes, threads, and
networks. The present methods cannot parse the ﬁne-grained data, and some semantic information in the
events cannot be obtained directly through ETW. For example, the detailed attributes collected by Wtrace [9]
are not resolved. Some studies have transformed events into a provenance graph, but details of speciﬁc events
are still missing, like SPADE [10] and CONAN [11].

3. In terms of real-time, some studies [14][15] have proposed compression methods for faster processing, but
the algorithms require the input of the actual data and cannot process in real-time. For instance, SPADE
needs XML-format data gathered by Procmon (a Windows process monitoring tool) as input to generate a
provenance graph of behaviors. Moreover, with the increase of running time, the delay between the occurrence
of behavior and the time that events writing will be longer, which can not reﬂect the real-time performance,
eventually leading to loss.

4. In terms of performance, the collector will be deployed in the endpoint device, which can not affect daily
use while collecting data. In other words, the tool must avoid high overhead while ensuring the functional
requirements.

5. In terms of open source, tools with good performance and functions are not open-source, such as CONAN

[11] and NXlog [12].

1https://github.com/acising/kellect

2

Kellect: a Kernel-Based Efﬁcient and Lossless Event Log Collector

Compared with the existing collectors, Kellect provides kernel-based events with complete semantics through ETW and
optimizes the performance, delay, and event integrity using multithreading. It can collect and process kernel-based data
in real-time, meet the growing scientiﬁc research requirements and provide data and tool support for behavior analysis,
malware detection, and other research. The main contributions of this article are as follows:

• Because of the semantic ambiguity of ETW collected data, and we ﬁll the unclear semantics through DLL

ﬁles, driver data and interactive between events, and output event logs with complete attributes.

• To solve the problem that consumers are slow to process the original data, we propose an event analysis
method based on the offset. By analyzing the event attributes through offset, the processing efﬁciency is
greatly improved, and the overhead is reduced.

• We design and implement an efﬁcient and lossless Windows kernel events collector and verify its data integrity,

real-time, and performance through experiments.

The other parts of this paper are organized as follows: the second section introduces the speciﬁc details of collector
design and implementation. The third section evaluates the tools through experiments. Section 4 describes the
application of the tool. Finally, a summary is made.

2 Framework

In this section, we carry out the overall design and introduction of the system. As shown in ﬁgure 1, Kellect is mainly
designed with four modules: initialization module, collecting module, processing module, and service module.

Figure 1: The Framework of Kellect

2.1

Initialization Module

The initialization module conﬁgures the collector before starting. This module will load the ﬁltering conﬁg, event
structure, and mirror list to prepare for the startup of ETW.

Load ﬁlter conﬁg. In Windows, some processes are assigned a ﬁxed id by the system, such as 4 for system and 148 for
register. These processes are default, and the id will not change with the system restarting. Thus, we consider them
benign and ﬁlter their events during collecting to reduce unnecessary processing overhead.

Load event structure. Microsoft deﬁnes the event structures provided by the kernel and divides the events into 13
types such as FileIO, Thread, Process, and so on, The opcodes in each type are deﬁned to represent the operations
provided at the kernel level. The XML-based codes deﬁne and load all event types and information, as shown in Figure
2. The label of (cid:104)Event(cid:105) deﬁnes the type to which the event belongs. As proof, 2429279289 means the GUID of FileIO,
and 67 means the opcode. This code means FileIORead in kernel operation in Windows, and the label of (cid:104)Attribution(cid:105)
deﬁnes the critical name and offset under the current event, such as Offset means one of the attributes in FileIORead,
13 means the data type is PULONG, occupying 8 bytes. The loading of the event structure serves for the subsequent
events’ raw data parsing, which will be described in detail in the parsing module.

Load mirror list. API calls are saved in memory through pointers that point to the memory address where the API is
located. If the API is needed to be converted semantically, it is crucial to know how the API is loaded into memory and
the beginning address of the API in advance. The mirror list includes necessary DLL, SYS, and EXE ﬁles under the

3

FilterConfigImagesListInitalizationMoudleCollectorInitializa-tionETWSessionFirst-filtering Layer(Provider)CollectingMoudleRawDataStream(Cousmer)ProcessingModuleSemantic CorrectionServiceMoudleBehavior AnalysisAPT Threat DetectionEventDataPoolFileIOImageProcessTcpIpThreadStackWalk……ParsingAPIAPI	RelationMapEvent-StructureConfig*.dllloadingRansomwareDetectionTraceabilitySemantic	RelationMapDistributionKellect: a Kernel-Based Efﬁcient and Lossless Event Log Collector

Figure 2: Event Structure

system32 and syswow64 folder in the system drive of Windows. These ﬁles contain API information required for system
and software calls. After processing, the system will save the relationship mappings of (cid:104)apiN ame, apiAddress(cid:105), and
perform semantic correction on subsequent API data. During the collecting and processing process, the mappings in
the mirror list will be dynamically adjusted as the running software calls the DLL to reﬂect the API calls in real-time
correctly.

2.2 Collecting Module

This module is implemented based on ETW. In the ETW framework, the data produced by the producer will be
consumed by the consumer. The consumer obtains the original events stream through the callback function. The original
events contain a large amount of kernel operation information, which has missing details and incomplete semantics.
Consumers perform a layer of ﬁltering, combined with the process loaded in the previous module, to remove events that
are unparseable or absolutely benign. In this module, we save the raw events that have ﬁltered in the data pool and
consume data through multi-threading to achieve the highest performance.

2.3 Processing Module

The processing module parses the raw events semantically and is the core module of the collector. This module is
divided into three steps: event distribution, processing, and semantic correction.

Algorithm 1 Semantic Correction
Input:

1. Event with Loss semantics eli and its lost attributes Aeli
2. The sets of attributes relation maps Saattr that have been saved while process

Output:

Event with Complete semantics

if Aeli ∈ Saattr then

1: while Aeli ∈ eli do
2:
3:
4:
5:
6: end while

end if
Update the struct of eli with Eattr

Eattr = M atchM aps(Aeli, Saattr)

Event distribution. As mentioned in the Loading Event Structure, Microsoft deﬁnes the kernel events as 13 different
types according to the operations [16]. Each event has a different opcode and attributes. The events need to be
distributed according to the event names and sent to the speciﬁed processing method for analysis.

Processing. This part is the speciﬁc semantic analysis for event attributes. Microsoft provides the TDH library [17]
for NT kernel events parsing, but the library needs to call multiple functions to obtain the value, and the performance
overhead is high, which cannot meet the requirements of high-efﬁciency kernel collecting. So we propose an offset-based
event parsing method. After analyzing the raw events, we found that Windows sets each original event as a ﬁxed-length

4

<Event><ProviderID>2429279289</ProviderID><OpCode>67</OpCode><EventName>FileIORead</EventName><Attributes><Attribute type="13">Offset</Attribute><Attribute type="8">IrpPtr</Attribute><Attribute type="8">FileObject</Attribute><Attribute type="8">FileKey</Attribute><Attribute type="4">TTID</Attribute><Attribute type="4">IoSize</Attribute><Attribute type="4">IoFlags</Attribute></Attributes></Event>Kellect: a Kernel-Based Efﬁcient and Lossless Event Log Collector

data frame and intercepts the number of bytes in positions of attributes according to different offsets to parse the data
correctly. Therefore, we preprocess the attributes contained in the 13 event types to form the event structure ﬁle in the
initialization module. At this point in the memory, the Kellect has saved several groups of event structure relationship
mappings like (cid:104)eventIdentif ier, pair(cid:104)property1, Of f set1(cid:105)...(cid:105), the key-value in the pair is the attribute and its
offset.For example, registryCreate event saved as blew: (cid:104)RegistryCreateIdentif ier, pair(cid:104)InitialT ime, 8(cid:105)...(cid:105).

The algorithm for parsing the data stream by traversing the (cid:104)attribute, of f set(cid:105) pair through event structure mapping
is shown in algorithm 1. Input the event ei that need to be parsed and the set Soattr, traverse the unparsed attribute
Bei in ei, then use The OffsetParse method assigns it. For example, the raw data of the RegistryCreate event is 34-bit
binary data. According to the attribute and offset set, the ﬁrst 8-bit is parsed into PULONG type data and presents the
InitialTime, which means the time value of the registry operation. Next, the data stream is shifted to the left by the
parsing bits, and the attribute is continued to be parsed based on the set pairs. Then, parsing the 4-bit binary data into
a PUSHORT type means the status that presents the resulting state of the registry operating. Loop through until the
binary data is traversed, and ﬁnally, a complete event instance is obtained.

Algorithm 2 Parsing Raw Events with Offset
Input:

1. Streaming data (events) in chronological order, each event ei contains a eventName and its binary properties

Bei

2. The set of attributes offset maps Soattr loading by Initalization modul

Output:

Event with Loss semantics
1: for ei ∈ Streaming data do
2:
3:
4:
5: end for

end for

for N extByte(Bei) (cid:54)= NULL do

Eattr = Of f setP arse(Bei , Soattr)

Semantic correction. After processing, the semantics of some attributes in different events are still unclear. For
example, related to the FileIO type, the ﬁleName is missing in some FileRead events and needs to be semantically ﬁlled.
The thread id in the native TCP/IP event defaults to be 0xffffffff which cannot reﬂect the real thread object.

Table 2: Mapping lists to parsing event

Index
1
2
3
4
5
6
7
8

9

10
11
12
13
14
15
16
17
18

Mapping Relation
ProcessId2ThreadId
ThreadId2ProcessId
FileObject2Name
FileKey2Name

Effection
Conversion from ProcessId to ThreadId
Conversion from ThreadId to ProcessID
Conversion from Fileobject to Filename
Conversion from FileKey to FileName

ProcessID2ModuleAddressPair Conversion from Processid to Moduleaddresspair

ProcessName2Id
ProcessID2Name
ProcessID2Modules

Volume2Disk

CallStackMap
SystemCallMap
SystemCallMapUsed
ModulesName2APIs
UsedModulesName2APIs
EventPropertiesMap
Property2IndexMap
EventStructMap
Properties

Conversion from ProcessName to ProcessId
Conversion from ProcessId to ProcessName
Conversion from ProcessId to Moudle
File path format Conversion
//device//harddrive → C://
Record CallStacks
Record SystemCall
Record SystemCall Used
Conversion from Modules to APIs
Conversion from UsedModulesName to APIs
Record Event Properties
Conversion from Property to Index
Record Operation Info and Event Attribution
Record Properties

Where and When Generated
CSwitch in Thread Event
Thread

FileIO

CallStack

Process

Driver

SystemCall

DLL loading

Eventstructure Conﬁg loading

In order to ﬁll the unclear semantics, we mine the event logs to obtain helpful information and extract 18 mapping tables.
The collector maintains 18 relational mapping tables through the information collected in different processing periods.
As shown in Table 2, the table covers all possible semantic defaults and is pre-stored and parsed. The algorithm for

5

Kellect: a Kernel-Based Efﬁcient and Lossless Event Log Collector

semantic correction through the relational mappings is shown in algorithm 2. When the uncorrected attribute Aeli still
exists in eli, the value will be corrected by the MatchMaps method. For example, the thread id in TCP/IP is 0xffffffff by
default, and the actual id can obtain in ProcessId2ThreadId mappings, which are generated between the process number
and the thread number in the CSwitch event. The full semantics of most events can be ﬁlled in this way.

Semantic correction is completing semantics and updating internal structures so that the mappings can correctly reﬂect
the current system operation. For example, process-related data structures need to be updated after each process is
generated.

2.4 Service Module

After obtaining the events with complete semantics, Kellect provides service API support, which can be written to a ﬁle
for storage or sent to a remote application server.

3 Evaluation

We experimentally evaluate the performance of kellect under Windows through three dimensions: real-time performance,
semantic integrity, and overhead. By comparing the three open-source collectors, Silkew, Sealighter, and Kellect, it is
proved that Kellect is genuinely real-time and low overhead with excellent performance, and can collect kernel events
efﬁciently and losslessly.

3.1 Real-Time

In kernel events collecting, it is essential that the output can reﬂect the operation behavior in real-time. However, due
to a large number of events, the unequal processing efﬁciency between producers and consumers, and the different
settings of the session of ETW, there is a speciﬁc deviation between the time when the behavior occurs and the event
logs output. The time delta will lead to a lag in behavioral analysis and loss of events. Consequently, this experiment
conducts real-time judgment for three tools. By writing a script, the tool is forced to close at a ﬁxed time interval after
performing a particular operation and check whether there is any behavioral response in the generated events. The
experiment is divided into three behaviors: creating ﬁles, connecting to remote servers, and executing commands. The
results are shown in Table III.

Table 3: Real-Time Experiment Result

Behavoir

Tool

Time Delay
1s 2s 5s 10s

Create File

Connect to Remote Server

Execute Command

SilkETW N N N N
Sealighter N Y Y Y
Kellect
Y Y Y Y
SilkETW N N Y Y
Sealighter N Y Y Y
Kellect
Y Y Y Y
SilkETW N N Y Y
Sealighter N Y Y Y
Y Y Y Y
Kellect

N represents No, Y represents Yes

The experiment shows that SilkETW cannot collect the behavior of creating ﬁles, while Kellect can obtain the events
in a shortest time. After more in-depth research and experiments, we ﬁnd that the time delay of Kellect is about 0.7
seconds, SilkETW is about 4 seconds, and Sealighter is about 1.5 seconds. With the increase in running time, the buffer
of ETW will gradually ﬁll up, and the event loss will occur. The time delay will gradually increase, either. Ultimately,
Kellect has an excellent real-time performance.

3.2 Semantic Integrity

The whole kernel events can more precisely reﬂect the behavior of upper-level users and software. The experiment
simulates three behaviors of network connection, ﬁle reading and writing, and software opening and closing. The

6

Kellect: a Kernel-Based Efﬁcient and Lossless Event Log Collector

amount of data generated by three collectors reaches GB level. It compares the total number of events generated by
different collectors, the number of behavior events, and the number of provenance graph points and edges.

The results are shown in Figure 2. Kellect collects the most signiﬁcant number of behavior events. It can be concluded
that for the same operation, Kellect can collect more behavior events and express richer semantics. On the contrary,
Silkew lost many events. Sealighter does not ﬁlter and delete all events, so the total number of events that could be
collected was the largest.After in-depth analysis, the data collected by Kellect can accurately reﬂect the source and
destination addresses of network connections, paths of ﬁle operations, and libraries and registers loading by software
initation, which cannot be obtained through Sealighter and SilkETW. Moreover, the events that the other two tools
collect are still lost after a period, and the semantic occurrences loss.

(a) Amount of Events

(b) Amount of Events for Action

(c) Amount of Vetrex

(d) Amount of Edge

Figure 3: Data Integrity Experiment

3.3 Overhead

We build a virtual environment for experiments in Windows 10 with intel i5-10400 (2.9G Hz of speed with six core)
and 32GB of memory. Figure 3 shows CPU cost and memory consumption in an idle state (basic operations such as
ofﬁce) and an intensive state (running big software and 3D games). In the idle state, Kellect has a lower overhead,
the CPU cost is stable at around 1%, and the memory consumption is 50MB. In the intensive operation state, the
consumption of kellect is improved, but the memory gradually decreases after increasing to 160MB. We believe that
more events and mapping relationships need to be loaded and processed under intensive operations, especially after
opening a big software that needs to load lots of pre-ﬁles. However, memory consumption gradually decreases and
reaches stabilization after the loading is ﬁnished. The CPU usage has remained at around 13%, which is higher than

7

Kellect: a Kernel-Based Efﬁcient and Lossless Event Log Collector

Sealighter and SilkETW. We think that the usage of the CPU is due to the need to process more events and semantic
correction, so the overhead has increased. In this experiment, the overhead of Sealighter is almost the same as that
of kellect, but the performance of Kellet is comprehensively better than the other two collectors, and Kellect is more
practical.

(a) CPU in idle state

(b) Memory in idle state

(c) CPU in intensive state

(d) Memory in intensive state

Figure 4: Overhead Experiment

4 Application Case

Currently, kernel-based event logs as a data source have been widely used in APT threat detection, ransomware
detection, and user behavior analysis. However, there is no comprehensive collector due to incomplete semantics and
non-real-time problems. Kellect will ﬁll this gap.

We collect the events of the behavior of ATT&CK [19] based on the Atomic Red Team [18] proposed by redcanaryco.
We have collected 204 techniques and converted the data into a triad like (cid:104)pid, behavior, ppid(cid:105), which could be analyzed
by the method of provenance graph. The data has been open sourced in Google Driver 2.

The graph in ﬁgure 4(a) represents the behavior of T1078.003 in the ATT&CK model. As can be seen, the PowerShell
process creates the net.exe process, copies it to a ﬁle named net1.exe through reading and writing operations on the
registry and ﬁles, and executes the command "net user art-test /add" ﬁnally. The technique presents creating a local
account with administrator privileges.

2https://drive.google.com/drive/folders/1QcM2jwKn4HtQ-96ThkeNvXTSPw3cFY_8?usp=sharing

8

Kellect: a Kernel-Based Efﬁcient and Lossless Event Log Collector

(a) provenance graph of net.exe

(b) provenance graph of eval.exe

Figure 5: Data Transform to Provenance Graph

At the same time, we conduct simulated attacks on the host and draw the following provenance graph by the events
collected. As shown in ﬁgure 4(b), the malicious process is loaded into the DLL ﬁle, connects to the remote suspicious
IP, and then the malicious process is executed. The implementation of the attack is by sending a command through
shell.

It can be seen that Kellect efﬁciently collects the Windows kernel events and could reﬂect the upper-layer behavior
losslessly. The collector can be effectively applied in scientiﬁc research, providing data supporting different research
directions and scientiﬁc research needs, especially in cyber security.

5 Conclusion

This paper proposes Kellect, an efﬁcient and lossless open-source collector for Windows kernel events. Unlike existing
collectors, Kellect improves the semantic information of events generated by ETW through DLL and SYS ﬁles to
correlate information between different times and perform event analysis and processing through multi-threading.
Kellect uses the offset for attribute analyzing, which eventually improves the efﬁciency of event collection. We evaluate
Kellect’s data integrity, real-time performance, and overhead through different experiments and prove that Kellect
is signiﬁcantly better than existing ones. It can fully, accurately, efﬁciently, and losslessly reﬂect the behaviors of
upper-layer users and software. The Kellect can be effectively applied in user behavior analysis, APT, and ransomware
detection.

9

{"EventName":"RegistryClose","ProcessID":27120,"ProcessName":"cmd.exe","ParentProcessID":27004,"ParentProcessName":"powershell.exe","ThreadID":28316,"TimeStamp":132984545715057414,"arguments":{"Index":0,"InitialTime":1609986821,"KeyHandle":3102820000,"KeyName":"RaiseExceptionOnPossibleDeadlock","Status":0}}……………………………………………………………………{"EventName":"RegistryOpen","ProcessID":27120,"ProcessName":"cmd.exe","ParentProcessID":27004,"ParentProcessName":"powershell.exe","ThreadID":28316,"TimeStamp":132984545715057228,"arguments":{"Index":0,"InitialTime":1609986498,"KeyHandle":0,"KeyName":"/Registry/MACHINE/System/CurrentControlSet/Control/Session Manager","Status":0}}{"EventName":"ImageLoad","ProcessID":27120,"ProcessName":"cmd.exe","ParentProcessID":27004,"ParentProcessName":"powershell.exe","ThreadID":28316,"TimeStamp":132984545715055383,"arguments":{"DefaultBase":894500864,"FileName":"C:/Windows/System32/ntdll.dll","ImageBase":894500864,"ImageChecksum":2089867,"ImageSize":2052096,"ProcessId":27120,"Reserved0":0,"Reserved1":0,"Reserved2":0,"Reserved3":0,"Reserved4":0,"SignatureLevel":0,"SignatureType":0,"TimeDateStamp":2069107948}}TransformKernel-basedEventLogsProvenance GraphofBehaviorinEventsPowershellnet.exenet1.exeregisterstartwrite*.dll*.muistartreadreadreadreadsysmain.sdbloadloadeval.exeCRYPTSP.dllGetShellCalc.exeCmd.exe192.168.75.132192.168.75.132Secrete.txtKeyloggingScreen GrabPSRegistryImageLoadStartuploaddownloadexecuteexecuteexecuteexecuteexecutewriteRegistryKCBCreateTransformKernel-basedEventLogsProvenance GraphofBehaviorinEvents{"EventName":"RegistryOpen","ProcessID":10064,"ProcessName":"geek.exe","ParentProcessID":5408,"ParentProcessName":"explorer.exe","ThreadID":10068,"TimeStamp":133009694201471764,"arguments":{"Index":0,"InitialTime":3062882988,"KeyHandle":0,"KeyName":"/REGISTRY/USER/S-1-5-21-3711901133-3057175907-3678618286-1001/Software/Policies/Microsoft/Windows/Safer/CodeIdentifiers","Status":3221225524}}{"EventName":"RegistryOpen","ProcessID":10064,"ProcessName":"geek.exe","ParentProcessID":5408,"ParentProcessName":"explorer.exe","ThreadID":10068,"TimeStamp":133009694201472022,"arguments":{"Index":0,"InitialTime":3062883266,"KeyHandle":0,"KeyName":"/Registry/Machine/System/CurrentControlSet/Control/FileSystem/","Status":0}}{"EventName":"RegistrySetInformation","ProcessID":10064,"ProcessName":"geek.exe","ParentProcessID":5408,"ParentProcessName":"explorer.exe","ThreadID":10068,"TimeStamp":133009694201472071,"arguments":{"Index":0,"InitialTime":3062883391,"KeyHandle":4156424288,"KeyName":"LongPathsEnabled","Status":0}}…………………………………………………………{"EventName":"RegistryQueryValue","ProcessID":10064,"ProcessName":"geek.exe","ParentProcessID":5408,"ParentProcessName":"explorer.exe","ThreadID":10068,"TimeStamp":133009694201472106,"arguments":{"Index":2,"InitialTime":3062883409,"KeyHandle":4156424288,"KeyName":"LongPathsEnabled","Status":0}}{"EventName":"RegistryClose","ProcessID":10064,"ProcessName":"geek.exe","ParentProcessID":5408,"ParentProcessName":"explorer.exe","ThreadID":10068,"TimeStamp":133009694201472149,"arguments":{"Index":0,"InitialTime":3062883476,"KeyHandle":4156424288,"KeyName":"LongPathsEnabled","Status":0}}Kellect: a Kernel-Based Efﬁcient and Lossless Event Log Collector

References

[1] Yang R, Chen X, Xu H, et al. Ratscope: recording and reconstructing missing rat semantic behaviors for forensic

analysis on windows[J]. IEEE Transactions on Dependable and Secure Computing, 2020.

[2] Ahmed M E, Kim H, Camtepe S, et al. Peeler: Proﬁling Kernel-Level Events to Detect Ransomware[C]//European

Symposium on Research in Computer Security. Springer, Cham, 2021: 240-260.

[3] Al-Saleh M I, Hamdan H M. On studying the antivirus behavior on kernel activities[C]//Proceedings of the 2018

International Conference on Internet and e-Business. 2018: 158-161.

[4] Irshad H, Ciocarlie G, Gehani A, et al. Trace: Enterprise-wide provenance tracking for real-time apt detection[J].

IEEE Transactions on Information Forensics and Security, 2021, 16: 4363-4376.

[5] Chen X, Irshad H, Chen Y, et al. CLARION: Sound and Clear Provenance Tracking for Microservice Deploy-

ments[C]//30th USENIX Security Symposium (USENIX Security 21). 2021: 3989-4006.

[6] Zeng J, Chua Z L, Chen Y, et al. WATSON: Abstracting Behaviors from Audit Logs via Aggregation of Contextual

Semantics[C]//NDSS. 2021.

[7] (2019,Sep.) The Github website. [Online]. Avaliable: https://github.com/mandiant/SilkETW
[8] (2022,Mar.) The Gtihub website. [Online]. Avaliable: https://github.com/pathtofile/Sealighter
[9] (2021,Jun.) The Gtihub website. [Online]. Avaliable: https://github.com/lowleveldesign/wtrace
[10] (2022,May.) The Gtihub website. [Online]. Avaliable: https://github.com/ashish-gehani/SPADE
[11] Xiong C, Zhu T, Dong W, et al. CONAN: A practical real-time APT detection system with high accuracy and

efﬁciency[J]. IEEE Transactions on Dependable and Secure Computing, 2020.

[12] https://docs.nxlog.co/userguide/index.html
[13] High ﬁdelity data reduction for big data security dependency analyses,” in Proc. 2016 ACM SIGSAC Conf.

Comput. Commun. Secur., 2016, pp. 504–516.

[14] M. N. Hossain et al., “Dependence-preserving data compaction for scal- able forensic analysis,” in Proc. 27th

Secur. Symp., 2018, pp. 1723–1740.

[15] W. U. Hassan, L. Aguse, N. Aguse, A. Bates, and T. Moyer, “Towards scalable cluster auditing through grammatical

inference over provenance graphs,” in Netw. Distrib. Syst. Secur. Symp., 2018, pp. 1–9.

[16] (2021,Aug.) The Microsoft website. [Online]. Avaliable: https://docs.microsoft.com/en-us/windows/

win32/etw/nt-kernel-logger-constants

[17] (2021,Aug.) The Microsoft website. [Online]. Avaliable: https://docs.microsoft.com/en-us/windows/

win32/etw/retrieving-event-data-using-tdh

[18] (2022,Jun.) The Gtihub website.

[Online]. Avaliable:

https://github.com/redcanaryco/

atomic-red-team

[19] (2015,May.) The ATT&CK website. [Online]. Avaliable: https://attack.mitre.org/

10

