Software-deﬁned Dynamic 5G Network Slice
Management for Industrial Internet of Things

Ziran Min∗, Shashank Shekhar†, Charif Mahmoudi†, Valerio Formicola‡, Swapna Gokhale§, Aniruddha Gokhale∗
∗Dept. of CS, Vanderbilt University, Nashville, TN, USA. Email: {ziran.min, a.gokhale}@vanderbilt.edu
†Siemens Technology, Princeton, NJ 08540, USA. Email: {shashankshekhar, charif.mahmoudi}@siemens.com
‡ Dept. of ECE, California Polytechnic in Pomona, Pomona, CA, USA. Email: {vformicola}@cpp.edu
§Dept. of CSE, University of Connecticut, Storrs, CT, USA. Email: {swapna.gokhale}@uconn.edu

2
2
0
2

p
e
S
5

]
I

N
.
s
c
[

3
v
9
1
2
7
0
.
7
0
2
2
:
v
i
X
r
a

A version of this paper is under review by SDS 2022.
Abstract—This paper addresses the challenges of delivering
ﬁne-grained Quality of Service (QoS) and communication deter-
minism over 5G wireless networks for real-time and autonomous
needs of Industrial Internet of Things (IIoT) applications while
effectively sharing network resources. Speciﬁcally, this work
presents DANSM, a software-deﬁned, dynamic and autonomous
network slice management middleware for 5G-based IIoT use
cases, such as adaptive robotic repair. The novelty of our
approach lies in (1) the use of multiple M/M/1 queues to formulate
a 5G network resource scheduling optimization problem com-
prising service-level and system-level objectives; (2) the design of
a heuristics-based solution to overcome the NP-hard properties
of this optimization problem, and (3) the implementation of a
software-deﬁned solution that incorporates the heuristics to dy-
namically and autonomously provision and manage 5G network
slices that deliver predictable communications to IIoT use cases.
Empirical studies evaluating DANSM on our testbed comprising
a Free5GC-based core and UERANSIM-based simulations reveal
that the software-deﬁned DANSM solution can efﬁciently balance
the trafﬁc load in the data plane thereby reducing the end-
to-end response time and improve the service performance
by completing 34% more subtasks than a Modiﬁed Greedy
Algorithm (MGA), 64% more subtasks than First Fit Descending
(FFD) and 22% more subtasks than Best Fit Descending (BFD)
approaches all while minimizing operational costs.

Index Terms—5G, Software Deﬁned Networking (SDN), Dy-
namic network slice management, Industrial Internet of Things
(IIoT), Autonomous systems, Predictable performance.

I. INTRODUCTION

The Fourth Industrial Revolution (Industry 4.0) is trans-
forming a range of today’s industry verticals by bringing
signiﬁcant automation using modern technologies, such as
machine learning, real-time data processing and a gamut of
novel sensors, instruments, devices, hardware, software and
networking. This ecosystem that delivers the goals of Industry
4.0 like automation, safety, timeliness, reliability and resilience
is termed as the Industrial Internet of Things (IIoT) [1], [2].
As an example, consider an IIoT use case of Adaptive
Robotic Repair. With the recent disruptions in the industrial
supply chain, it is increasingly becoming important that the
factories of today operate with zero human intervention onsite
and move towards the Lights-out Factory vision [3]. Robotic
arms are widely used to repair high-value components, such
as shafts, pistons, blades and molds. However, due to limited
compute resources available on the robotic equipment and the

need to work collaboratively, reliable and real-time networking
is of paramount importance.

Wireless networks, such as Fifth-generation (5G) wireless,
are attractive in industrial environments as they enable mobil-
ity, eliminate the need for expensive wiring needed by wired
networks and overcome the hazards posed by wired networks.
5G in particular supports [4] (a) multiple base stations (gNB)
that improve the signal strength and offer a stable network
connection, (b) mmWave and Multiple-Input Multiple-Output
(MIMO) technologies that enable electromagnetic waves to
carry more raw data thereby increasing network bandwidth
and improving network latency, and (c) Network Slicing (NS)
that allows network providers to dynamically and efﬁciently
allocate network resources and offer differentiated services.

The above-mentioned remote robotic repair IIoT use case
consists of different sub-tasks, such as workpiece scanning,
defect detection, tool path generation, workpiece milling, and
milling monitoring each with different priorities [5]. The
network requirements of the different involved sub-tasks are
varied, which creates challenges to providing real-time packet
inspection, delivering a high-level of Quality of Service (QoS)
and generating an accurate usage report for every sub-task.
This IIoT use case illustrates a multi device and multi sub-
task architecture. A 5G-enabled adaptive robotic repair IIoT
system will require multiple co-existing network slices to
deliver a real-time network solution. Moreover, considering
the topology relationship among all sub-tasks and the different
network resource consumption of each sub-tasks, the network
resources that are assigned to multiple network slices must
be based on sub-task priority. Further,
the heavy network
trafﬁc generated by the sub-tasks will inevitably lead to queue
buildup on the network data plane.

Previous studies have shown that high queuing delay within
a 5G network leads to rate variability [6] and adversely affects
QoS [7]. To address the aforementioned needs and challenges
in applying multiple network slices to the IIoT scenarios,
we present a software-deﬁned approach called Dynamic and
Autonomous Network Slice Management (DANSM). Since
the 5G core by design separates the control plane from the
data plane offering different functionalities as cloud-native
microservices, DANSM can easily be offered as an additional
control plane microservice. To that end this paper makes the
following contributions:

 
 
 
 
 
 
• To efﬁciently utilize the network resources and improve
network scalability, we present a topology sorting al-
gorithm to decide the sub-task priority that determines
the dynamic and autonomous assignment/recycling of
network resources within each network slice.

• To balance the load and minimize the queuing latency on
the data plane, we present a multiple M/M/1 queue model
of the data plane trafﬁc and propose a heuristic algorithm
to schedule the sub-tasks and dynamically manage the
network resources based on the sub-task priority.

• We show how DANSM provides sub-tasks with a network
slice that helps to maintain and improve network services
and requirements for a speciﬁc type of sub-task thereby
improving productivity in the industrial use case.

• We show extensive empirical results evaluating our ideas.
The rest of this paper is organized as follows: Related
work is brieﬂy summarized in Section II; Section III presents
details of our approach; Performance evaluations are presented
and analyzed in Section IV; and ﬁnally, Section V offers
concluding remarks alluding to future work.

II. BACKGROUND AND RELATED WORK
This section provides background on 5G and then describes
related research on dynamic management of network slicing,
which is relevant to this research.
A. Overview of 5G Wireless Networking

The 5th generation wireless networking is the latest cellular
technology that is being deployed around the globe. The 5G
technology is designed to be inherently cloud-native so that
its functionality can be deployed in the form of containerized
microservices that can be managed and autoscaled by frame-
works, such as Kubernetes. In its basic form, 5G comprises
edge devices, such as smart phones, called the User Equipment
(UE). UEs communicate with a base station called gNodeB via
a radio access network (RAN). The core functionality of 5G
that manages the user sessions, authentication, network slicing,
user packet forwarding and several other important functions
are realized as microservices and are part of what is called
the 5G Core. While most of the capabilities, such as session
management, resource management and user authentication
the primary data plane
are control plane responsibilities,
function of routing and forwarding user packets is carried
out by the User Plane Function (UPF). 5G’s Multi-access
Edge Computing (MEC) provides edge computing capabilities
to applications.

Further, the data plane within the 5G Core Network com-
prises multiple network slices. 5G network slicing enables
multiplexing of virtualized and independent logical networks
on top of common physical infrastructure. Presently, 5G net-
work slicing is categorized into 3 types: Enhanced Mobile
Broadband (eMBB) used by applications requiring ultra high
bandwidth, Massive Machine-Type Communications (mMTC)
used in fast and energy-efﬁcient communications, and Ultra-
reliable Low-Latency Communications (URLLC) used by ap-
plications needing ultra-low latencies and reliable communi-
cations. By using different network slices, we can satisfy the

differentiated network requirements of IIoT scenarios. Note
that 5G provides only the mechanisms but algorithms are
needed to effectively manage these slices.

B. Comparison with Prior Work

Dynamic network slicing technology, which virtualizes
shared physical networks by providing multiple network ser-
vices, is widely applied in both academic and industrial areas.
For example, Xiao et al. [8] proposed the concept of dynamic
network slicing. They developed an overlapping coalition-
formation game to investigate the distributed cooperation and
joint network slicing between fog nodes while considering
trafﬁc variation. Their results show that
their architecture
can signiﬁcantly maximize utilization while balancing the
workloads on fog nodes. In [9],
the authors proposed a
dynamic network slicing and resource allocation approach to
investigate the operator’s revenue escalation problem under
dynamic trafﬁc in a mobile edge computing system. This
approach optimizes the network slice admission in the long
term. However,
term and resource allocation in the short
their approach considers only the transmission delay while
ignoring the queuing latency, which will increase the end-to-
end latency, thereby affecting system performance.

To intelligently assign and redistribute resources among
multiple tenants, Raza et al. [10] leverage 5G orchestration
functionalities to support dynamic network slicing, which
jointly provisions the network resources from different do-
mains, such as radio, transport, and cloud. They formulated
a mixed-integer linear programming problem and designed
a heuristic to solve it. Their evaluations show that dynamic
slicing can improve the virtual network rejection probability
by more than one order of magnitude. Like prior works, our
approach can achieve the system-level objective of balancing
the data plane trafﬁc load among different network slices.
Additionally, we also achieve the service-level objective of
minimizing both the queuing and transmission time.

The work in [10] proposes a dynamic slicing approach to
assign and redistribute resources among multiple tenants over
5G networks, where the 5G core network is treated as a black
box and its details ignored. In their simulation, the authors
focused on the control plane complexity and considered only
the tenant’s requests. In contrast, our approach focuses on
both the control plane and data plane requests. Moreover,
we also consider the role of 5G core functions and utilize
multiple M/M/1 queues to schedule the packets from the User
Equipment (UE) to User Plane Function (UPF), which is the
primary data plane function in 5G.

In summary, our work utilizes a software-deﬁned, 5G-based
dynamic slicing approach to allocate network resources for
the IIoT usecases with different sub-tasks having different
priorities, while satisfying the real-time and high throughput
requirements. Compared to previous dynamic slicing-based
approaches, our work applies the M/M/1 queuing theory to
model
the network trafﬁc and formulates an optimization
problem. Moreover, we are able to improve the utilization
of network resources, signiﬁcantly reduce both the queuing

latency and the transmission time, and effectively balance the
load among different network slices all at once.

III. METHODOLOGY

This section describes DANSM, which is designed to oper-
ate in a 5G ecosystem shown in Figure 1. We ﬁrst provide
details on a concrete industrial use case to describe the
research. Finally, we describe the DANSM approach in detail.

Fig. 1. System Architecture

A. IIoT Case Study and Key Issues

Our industrial IIoT use case is a 5G-based adaptive robotic
repair system that we use to motivate and describe our re-
search. The UEs1 in our use case comprise cameras, robot arms
and edge devices, which are assigned to different repair tasks
each of which generates various types and volumes of data. An
adaptive robotic repair task consists of 5 sub-tasks: workpiece
scanning, defect detection, tool-path generation, robot milling
and milling monitoring. Note that our industrial IIoT use case
serves only as a driving example to describe and evaluate
our research; the DANSM research described here is broadly
applicable beyond this case study.

As part of the adaptive robotic repair workﬂow, a 5G camera
ﬁrst scans the target workpiece and records the key features.
Then, the recorded information (image or video) is sent from
the 5G camera to the 5G MEC devices. The MEC devices,
which include sensors, actuators, and other endpoints, will
also collaborate to help detect any defects. Then the MEC
will compare the scanned and standard workpiece features and
generate a comprehensive repairing tool path that is sent to the
robotic arm. On receiving the repairing tool path, the robotic
arm will start milling the target workpiece. The 5G camera
will also monitor the milling process to prevent accidents.

Every sub-task within an adaptive robotic repair is associ-
ated with a network slice, which consists of a number of UPFs.
The number of UPFs within a network slice is dependent
on the sub-task’s priority. The UPFs of the same network
slice share the same network conﬁguration, such as bandwidth,
which guarantees that the packets from UEs routed in the same
network slice but different UPFs will be processed by the same
network service. The UPFs of different network slices have

1See Section II-A for background on 5G and terminology.

different network conﬁgurations, which provides differentiated
network services for different sub-tasks. Moreover, a UPF
routes packets not only to the UE but also to the data networks
within the MEC system, which is responsible for providing
time-sensitive and compute edge services, such as the tool
path generation sub-task within an adaptive robotic repair.

The varied data volumes from the adaptive repair devices,
however, can lead to network congestion, causing a number
of queues to build up, particularly in the data plane, thereby
increasing the queuing and service times of the adaptive repair
system, and hence adversely impacting the performance of the
adaptive repair. Further, if an ad hoc task-to-robot assignment
policy is used, then the adaptive repair device that completes
its assigned sub-task earlier will simply wait until being
assigned a new sub-task thereby wasting precious resources,
which can prolong the overall completion time of the entire
repair thereby hurting manufacturing productivity.
B. Priority-based and Queuing-theoretic Modeling

To address the unpredictable waiting time issue, we in-
troduce the notion of Task Priority and UE Priority. Task
priority helps to dynamically assign/recycle resources allo-
cated to the network slices, which are associated with the
repair sub-tasks, while UE priority ensures that the UE that
has completed its task early, can be assigned a new task at
the earliest. The Task Priority can be calculated by applying
the Topology Sorting Algorithm [11] on the task ﬂowchart,
which represents the topology relationship among repair sub-
tasks as shown in Figure 2. The task that executes early
in the task ﬂowchart will get higher priority. The network
slice with higher task priority will be assigned more network
resources initially. The UE Priority is formulated based on
the next task priority and the current task start time, which is
also referred to as the UE arrival time, and is represented as
U EP riority = T askP riority+
ArrivalT ime . The UE, whose
new task has higher priority, will be assigned to the matched
network slice early and has more choices when choosing the
UPFs within the matched network slice. Therefore, those UEs
will have a higher chance of avoiding the overloaded UPFs.

1

Fig. 2. DAG Flowchart

Prior studies have adopted the M/M/1 and M/M/N queuing
models to schedule IoT network packets in both wired [12],
[13] and wireless networks [14]. Additionally, studies have
shown that both wired [15] and wireless [16] trafﬁc follow
Poisson distribution in IoT scenarios. Since the robotic repair
task is an IIoT usecase and backed by success of prior efforts,

we use the M/M/1 model to schedule the trafﬁc in the data
plane. Speciﬁcally, our work uses the M/M/1 queuing model
to model the latency, service time and transmission delay of
requests in the 5G UPF. In our system, the ﬂows representing
arrival requests are assumed to be from independent UEs with
the interval of arrival time and the server processing time
constituting a negative exponential distribution. Therefore,
requests from UEs to UPFs follow a Poisson distribution
thereby justifying the use of M/M/1 modeling. Moreover,
considering the heterogeneous trafﬁc from UEs and the topol-
ogy relationship among robotic adaptive repair sub-tasks, we
provision a pool of UPFs and conﬁgure multiple network
slices allocating/deallocating resources dynamically to handle
and adapt to the trafﬁc from the UE side. Every sub-task is
assigned to a speciﬁed network slice, and the resource2 within
the network slice is dynamically changed based on sub-task
priority and real-time UE request rates. These decisions are
made by DANSM software-deﬁned design operating from the
5G control plane.

C. Optimization Problem Formulation

Our system queuing model is shown in Figure 3 while
Table I shows the notations used in the problem formulation
described in this section.

Fig. 3. System Queuing Model

We assume there are n UEs and the request rate of the ith
UE is denoted by λi. The total UE request rate is (cid:80)n
i=1 λi.
We assume there are s network slices and r UPFs in the
U P F P ool. The initial number of UPFs within every network
slice is decided by the coefﬁcient α and the T ask P riority.
The α is provided by the users and can decide the initial size
of each network slice.

In the UPF Pool, there are αtp1 UPFs prepared for the 1st
network slice and the range of UPFs within the 1st network
slice in the U P F P ool is [1, αtp1]. We assume α = 1 ,
r = 10 and use the example in Figure 2. Then, the 1st network
slice will have αtp1 = 1 ∗ 4 = 4 UPFs, and the range of 1st
network slice in the U P F P ool is [1, 4]. And the 2nd network
slice will have αtp2 = 1∗3 = 3, the range of 2nd network slice
is [5, 7]. The total number of UPFs within the 4 network slices
will be 4+3+2+1 = 10. There are αtps UPFs prepared for the
sth network slicing and the range of sth network slicing in the
U P F P ool is [α(cid:80)s−1
k=1 tpk =
r. Every UPF has a queue, thus there are r M/M/1 queues in
our adaptive repair system. Our DANSM algorithm will assign
the incoming requests from n UEs to the r UPF queues. Then,
we assume all the UPFs have the same service rate, which is
denoted by µ. The UE to UPF assignment is stored in the

k=1 tpk], thus α (cid:80)s

k=1 tpk, α(cid:80)s

TABLE I
LIST OF VARIABLES

Symbol

Meaning

n

S

U P F P ool

α

λi

µ

Xk

θj

θk

li,j

dij

the number of User Equipments (UEs).

Task priority list S = {(task1, tp1), (task2, tp2),
(task3, tp3), . . . , (tasks, tps) }; total s tasks,
which are mapped to s network slices; tasks is
the id of sth task and sth network slice; tps is
the task priority of sth task.
A provisioned UPF pool U P F P ool = {upf1,
upf2, upf3, . . . , upfr}; total r UPFs; upfr is
the id of rth UPF.
The coefﬁcient of the number of UPFs in
U P F P ool; α (cid:80)s
U P F P ool, there are αtp1 UPFs prepared for
the 1st network slice; the range of UPFs within
the 1st network slice in the U P F P ool is [1,
αtp1]. There are αtps UPFs prepared for the sth
network slice and the range of sth network slice
in the U P F P ool is [α(cid:80)s−1
k=1 tpk].
the request rate of ith UE.
the service rate of all UPF.

k=1 tpk = r. In the

k=1 tpk, α(cid:80)s

the UE requests to UPF assignment matrix of
kth network slice; xij = 1 means that ith UE
send requests to jth UPF , xij ∈ {0, 1}, ∀i, j.
the load of jth UPF.
the average load of all the UPFs within kth
network slice.
the length of packet from ith UE to jth UPF.
the transmission rate between ith UE and jth
UPF.

w1, w2

weight factors, which will be tuned accordingly.

binary matrix X. The matrix element xij is 1, if the ith UE
is assigned to jth UPF, otherwise xij is 0.

Assuming that all

the UE request arrivals are mutually
independent and follow a Poisson process. Therefore, the load
on the system is is represented by (cid:80)n
i=1 λi. The total load
should be less than rµ for a stable system. The load of the
jth UPF is represented by:

n
(cid:88)

λixij

θj =

(1)

i=1
and the average load among all UPF within the kth network
slice is represented by:

θk =

1
αtpk

αtpk(cid:88)

θj

j=αtpk−1

(2)

Applying Little’s law, the expected queuing time on the jth
UPF before a request from an UE is served can be represented
by:

Wq =

θj
µ(µ − θj)

(3)

2A resource corresponds to the number of UPFs.

and the expected end-to-end response time between an UE and

jth UPF, which is the sum of the request queuing time and
the UPF service time, is represented by:

=

(4)

Ws = Wq +

1
µ − θj

1
µ
The transmission time is decided by the length of the packet
and the transmission rate between ith UE and jth UPF.
Considering the different types of UEs and the different sub-
tasks, the lengths of packets generated by the UE are different.
Moreover, considering the different UPFs conﬁgured for dif-
ferent network slices, the network conﬁguration of UPFs, such
as bandwidth, are different. Therefore, the transmission time
varies and can be represented by:

n
(cid:88)

Wt =

li,j
dij

(5)

i=1
The overall latency between ith UE and jth UPF, which is the
sum of queuing latency, the UPF service time and transmission
time, is represented by:

Ws + Wt =

1
µ − θj

+

li,j
dij

(6)

The average queuing latency and the transmission time of all
the UPFs within the kth network slicing is represented by:

G(Xk) =

1
n

(

n
(cid:88)

αtpk(cid:88)

i=1

j=αtpk−1

xij
µ − θj

+

li,j
dij

)

(7)

To balance the load of UPFs and minimize overall latency
for every UPF, we also formulated the variance of latency to
avoid the extreme case, where all the UE loads are assigned
to a few UPFs. The variance of the queuing latency and the
transmission time of all the UPFs within the kth network
slicing is represented by:

V (Xk) =

1
n

n
(cid:88)
(

αtpk(cid:88)

i=1

j=αtpk−1

(

xij
µ − θj

+

li,j
dij

− G(X)))2

(8)

In this work, we aim to minimize both the mean and the
variance of queuing latency and the transmission time. Consid-
ering the difference of magnitude between the mean and the
variance value, we tuned w1 and w2 accordingly as weight
factors. The following illustrates the problem formulation:

min F (X) =

s
(cid:88)

k=1

(w1G(Xk) + w2V (Xk))

(9)

s.t.

n
(cid:88)

i=1
m
(cid:88)

λixij < µ, ∀j

xij = 1, ∀i

i=1
xij ∈ {0, 1}, ∀i, j

α

s
(cid:88)

k=1

tpk = r

(10)

(11)

(12)

(13)

Eq. (9) aims to minimize both the average UE queuing latency
and the average transmission time in standalone 5G network.

Eqs. (10)-(13) represent the constraints. As mentioned earlier:
a) for each UPF,
the sum of the request rates from all
connected UEs should be less than the UPF’s processing rate
µ; b) each UE can only be connected to one UPF at a time;
c) the UE connection decision is encoded in a matrix xij with
binary elements; d) the number of UPFs is limited and the
task has higher priority will have more prepared UPFs in the
UPF pool.

D. Heuristic Approach

Our optimization problem formulation shown in Eq.(9)
belongs to the class of dynamic scheduling problems for
multiple parallel servers/queues, which has been shown to
be NP-hard [17]. Hence, to rapidly solve our optimization
problem at run-time as part of the dynamic and autonomous
approach, we propose a heuristic algorithm. Our approach
balances the load on the UPF side, and minimizes queuing
and propagation latency under dynamic trafﬁc conditions for
real-time communication use cases in IIoT.

Fig. 4. Heuristic Scheduling Algorithm Involving an Autonomous Feedback
Loop

We use our adaptive robotic repair case study to present our
heuristic algorithm shown as a ﬂowchart in Figure 4. The input
to our algorithm includes the following: (a) an adaptive robotic
repair Directed Acyclic Graph (DAG) D, which is provided by
the DANSM user and which includes the topology relationship

among all the repairing sub-tasks; (b) a UE arrival time list T ;
(c) a UE waitlist U E waitlist, which is a matrix and used
for storing all the UE statuses and UE priorities; and (d) an
objective function F (x), as shown in Eq.(9) formulated from
the multiple M/M/1 queuing model that utilizes the UE to UPF
assignment information.

The algorithm works as follows: In step 1, our algorithm
will calculate the task priorities by utilizing D and apply the
Topology Sorting Algorithm [11] on D. Figure 2 shows how
to generate a DAG and calculate the task priorities for a multi
sub-tasks IIoT usecase. Then, the algorithm will store the task
priority in a list S and create a UPF pool, which stores a
number of available UPFs for all the network slices. In step 2,
the algorithm will check the UE status (either at initialization
or as the system evolves over time) and calculate the UE
priority based on the UE buffer status, task priority, and UE
arrival time. The UE buffer status and the UE arrival time
is obtained from the SDN controller. If the SDN controller
detects 0 bytes in a UE buffer, we set the UE to the Free
state, which indicates that the UE has ﬁnished its previous
task and is waiting for a new task. Otherwise, the UE will be
set to the Service state, which indicates that the UE is still
working on the current task.

The algorithm will then update the UE status based on
their buffer status. This step will run periodically. All the free
state UEs will be added to the U E waitlist. Each UE in the
U E waitlist, at the speciﬁc time, is responsible for one sub-
task within the adaptive robotic repair and will be assigned
to the network slice (NS), which is matched with the sub-
task, based on their UE priority. In step 3, our algorithm will
check if the U E waitlist is empty or not. If it is empty, we
go back to step 2 and check all the UE status again till the
U E waitlist is not empty, which means there is at least one
UE that can be assigned the next sub-task. Otherwise, we go
to step 4, where for every available UE we assign it to the
matched network slice based on their task priority and where
network slices may also have different priority.

In step 5, the algorithm will calculate the average load of the
UPFs within their assigned network slice. This computation
is needed to assist in load balancing. In step 6, we check
if the average load is greater than the maximum load times
the threshold coefﬁcient τ . If this is the case, we assume all
the UPFs within the matched NS are at a risk of overload.
If the current assigned NS is overloaded, then the algorithm
will check if the U P F P ool in the assigned NS range has
any available UPFs in step 10. If the assigned NS range of
U P F P ool runs out of UPFs, then the algorithm goes to step
11 and pulls a UPF from the NS range with lower priority and
elevates it to the NS range with higher priority. Otherwise, the
algorithm will go to step 12 and directly pull a UPF from the
UPF pool in the assigned NS range (which could include the
just elevated UPF), push it to the matched NS, and assign the
UE to the UPF. Thereafter, the ﬂow goes back to Step 3 as
described above.

On the other hand, if in step 6 the average load is less than
the maximum load times τ , the algorithm will go to step 7 and

calculate the F (x) value according to Eq.(9) for every UPF
within the assigned NS and pre-assign the UE to the UPF,
which has a minimum F (x). ”Pre-assign” means that the UE
is temporally and logically assigned to the UPF for calculating
the new average load θnew. Then, in step 8, the algorithm will
check if θnew is less than the maximum load times τ . If yes,
the algorithm will go to step 9 and the UE will be physically
assigned the UPF, which has the minimum F (x), and then go
back to Step 3. Otherwise, we will go to step 10 because this
is a case where potentially all the UPFs within the assigned
NS have the risk of overload, and hence will perform the same
steps as described before for the overload case.

In our algorithm, every UE in the U Ewaitlist is supposed to
scan all the UPFs within the matched network slice. Therefore,
the runtime complexity of our algorithm is non-linear and
denoted by O(nr), where n indicates the number of UE and
r indicates the number of UPFs.

E. DANSM Implementation

DANSM provides software-deﬁned resource management
for 5G network slices. It is realized as a microservices com-
ponent that can be deployed in the control plane of the 5G core
along with other components. The 5G architecture makes this
design choice easy to implement without any invasive changes
to existing components. DANSM is implemented in Python.3

IV. EMPIRICAL EVALUATION

This section reports on the results of extensive evaluations

we conducted validating our proposed DANSM approach.

Fig. 5. Experiment Testbed (Two physical machines were used and indicated
in green and orange boxes.)

A. Experimental Setup

Our evaluation setup is depicted in Figure 5. We used
two PCs with Ubuntu 20.04 to deploy our testbed. The PC
labeled in the green box is responsible for running the 5G core
network, SDN controller and network monitoring tool. The PC
labeled in the orange box is responsible for emulating the radio
access network including the gNB and the user equipment
using UERANSIM [18]. We used Free5GC [19] as our 5G core
network and implemented our DANSM middleware within the
Ryu controller [20] as part of the Free5GC control plane. We
deployed all the 5G core functions inside Docker containers
and orchestrated all network functions using Docker Compose.

3DANSM is available in open-source from https://github.com/minziran/

DANSM.

Validation using emulation of the factory ﬂoor including its
5G radio network and the robotic arms representing the UEs
is justiﬁed because DANSM focuses on alleviating the bottle-
necks in the 5G core, and moreover, conducting experiments
on operational factory ﬂoors is hard unless there is a dedicated
testbed for such a purpose.

All the network trafﬁc within our testbed is routed using
Open vSwitch [21] and monitored by sFlow-RT [22]. The
trafﬁc from UERANSIM is generated using iPerf3 [23]. All the
UEs use TCP for guaranteeing communication reliability, and
all the UE request rates follow the Poisson Distribution. We
evaluated DANSM in the application plane using the metrics
to solve the optimization goal that are deﬁned in Eq.(9).
B. Baseline Algorithms

We compared DANSM with the Modiﬁed Greedy Algo-
rithm (MGA), which is a heuristic algorithm we developed in
prior work and had applied to the dynamic switch migration
problem [12]. MGA aims to minimize the switch queuing
latency and the controller processing latency. Its objective
function targets minimizing the average load of SDN con-
trollers and the switch migration cost under dynamic trafﬁc
change.

We also compared DANSM with conventional bin packing
algorithms: First Fit Descending (FFD) and Best Fit Descend-
ing (BFD) algorithms [24]. In our case, the FFD algorithm
starts with sorting the UEs in the UE freelist in descending
order based on the UE priority. For each UE, after assigning
it to the matched network slice (NS), FFD will scan the UPFs
within the matched network slice in order and assign the
current UE to the ﬁrst UPF that is able to process the trafﬁc
from the current UE. Similar to FFD, BFD will ﬁrst sort all
the UEs in the UE freelist in descending order based on the
UE priority. For each UE, after assigning it to the matched
network slice, the algorithm will scan all the UPFs within the
matched network slices and assign the UE to a UPF where it
ﬁts the tightest.
C. Evaluating Load Balancing for Data Plane

Load balancing is a signiﬁcant objective for all the dynamic
scheduling algorithms we compared. The unbalanced load in
the 5G data plane will lead to unexpected queuing time on the
UPF side and therefore increase the UPF processing time and
hence the overall latency, which hurts system performance. To
evaluate the performance of all the algorithms, we conﬁgured
10 UPFs in the data plane for all the NSs and set up 16 UEs to
generate network trafﬁc. The task priority dynamically decides
the number of UPFs within the NS. We run each algorithm
for 25 mins (1500 secs) for the sake of illustration; a 25 mins
duration is long enough for the system to reach stability and
the metrics ﬂuctuate within about 10%. Moreover, the UE
request rates follow the same Poisson Distribution in every
algorithm.

Figure 6 uses the mean and standard deviation metrics to
evaluate the UPF loads in the data plane. The x-axis indicates
the time, and the y-axis shows the UPF loads in the system
(We only calculated the UPF in use, not all the UPFs in the

the experimental results show that all

UPF Pool). From 0 mins to 5 mins, the system is in the warm-
up status, and the UE containers are built up, registered to
the 5G core network in succession and randomly assigned
to the UPFs. Then, after capturing a number of connected
and available UEs, the scheduling algorithms start to work.
After 15 mins,
the
algorithms have a similar standard deviation, which indicates
that the connections of all the UEs are stable while running
the dynamic scheduling algorithm. However, our DANSM has
a better mean value and a better standard deviation as well
after 19 mins under dynamic network trafﬁc, which indicates
that DANSM is able to handle the extreme case, where all
the UE loads are assigned to a few UPFs. MGA aims at
minimizing both mean load and the standard deviation of
the UPFs; therefore it can address the extreme case as well.
Moreover, the FFD and the BFD have the nature of packing the
load with the minimum resources; therefore they may lead to
the extreme case occasionally. At 25 mins, the UPF average
load of DANSM is 70% of BFD, 91% of MGA, and 93%
of FFD. In addition, the standard deviation of UPF load of
BFD is 1.28 times more than DANSM. To sum up, DANSM
efﬁciently and effectively achieves the optimization objective
and signiﬁcantly balances the UPF loads thereby minimizing
the queuing latency and improving the performance of the
adaptive robotic repair system.

Fig. 6. Data Plane Load Mean and Standard Deviation(std)

D. Evaluating End-to-End Response Time and Algorithm Ef-
ﬁciency

We used iPerf3 to measure end-to-end response time and
the number of tasks executed in the 25mins to evaluate the
real-time performance of all the algorithms under dynamic
network trafﬁc. The evaluation result is shown in Figure 7 and
Figure 8. In Figure 7, the x-axis indicates the subtask names
and the y-axis indicates the average response time for TCP
transmission. In Figure 8, the x-axis shows the time and the
y-axis shows the number of subtasks executed in the 25 mins.
The results indicate that our DANSM approach outperforms
MGA, FFD and BFD in both the time spent on the sub-
tasks and completing the repair task. Although FFD shows
a similar time in terms of a complete repairing task, DANSM

performs better on the task with higher priority. Moreover,
Figure 8 shows that DANSM ﬁnished 34% more subtasks than
MGA, 64% more subtasks than FFD and 22% more subtasks
than BFD in 25 mins. Compared to the other three baseline
algorithms, DANSM can speciﬁcally minimize the end-to-end
response time for the sub-task with higher task priority and
efﬁciently schedule all the subtasks under the dynamic network
trafﬁc thereby guaranteeing the performance of the adaptive
robotic repairs.

Fig. 7. End-to-End Response Time

at larger scales. Presently, DANSM manages network slices
at the 5G core only and future work will also look at end-
to-end slices, e.g., including RAN-based slices. Incorporating
resilience and availability as additional QoS dimensions is also
part of our future work.

REFERENCES

[1] P. Corcoran and S. K. Datta, “Mobile-edge computing and the internet
of things for consumers: Extending cloud computing and services to the
edge of the network,” IEEE Consumer Electronics Magazine, vol. 5,
no. 4, pp. 73–74, 2016.

[2] A. Narayanan, A. S. De Sena, D. Gutierrez-Rojas, D. C. Melgarejo,
H. M. Hussain, M. Ullah, S. Bayhan, and P. H. Nardelli, “Key advances
in pervasive edge computing for industrial internet of things in 5g and
beyond,” IEEE Access, vol. 8, pp. 206734–206754, 2020.

[3] N. K. Lee, “Total automation: The possibility of lights-out manufactur-
ing in the near future,” Missouri S&T’s Peer to Peer, vol. 2, no. 1, p. 4,
2018.

[4] N. Hassan, K.-L. A. Yau, and C. Wu, “Edge computing in 5g: A review,”

IEEE Access, vol. 7, pp. 127276–127289, 2019.

[5] R. J. Alattas, S. Patel, and T. M. Sobh, “Evolutionary modular robotics:
Survey and analysis,” Journal of Intelligent & Robotic Systems, vol. 95,
no. 3, pp. 815–828, 2019.

[6] G. Wang, Z. Gao, and M. Xu, “Integrating link-based discrete credit
charging scheme into discrete network design problem,” European
Journal of Operational Research, vol. 272, no. 1, pp. 176–187, 2019.

[7] M. Irazabal, E. Lopez-Aguilera, and I. Demirkol, “Active queue manage-
ment as quality of service enabler for 5g networks,” in 2019 European
Conference on Networks and Communications (EuCNC), pp. 421–426,
IEEE, 2019.

Fig. 8. Number of subtasks completing in 25 minutes

E. Summary

Overall, the experimental results show that DANSM outper-
forms all the algorithms in both load balancing and end-to-end
response time. The task priority and UE priority mechanism
applied in DANSM signiﬁcantly improved both sub-task and
task completion performance. The multiple M/M/1 queuing
models efﬁciently distributed the data plane trafﬁc, thereby
minimizing both queuing latency and propagation delay, and
reducing the end-to-end latency that is critical in real-time
industrial settings.

V. CONCLUSION AND FUTURE WORK

This paper presented DANSM, which is a software-deﬁned
solution that executes as a containerized microservice in the
control plane of the 5G core. DANSM offers dynamic and
autonomous network slice management to meet the QoS needs
of IIoT applications. The paper demonstrated DANSM’s ca-
pabilities for a 5G-based adaptive robotic repair use case from
the manufacturing domain. The key contributions in DANSM
include a sub-task priority allocation algorithm, a queuing
theory-based optimization problem formulation to minimize
queuing delays and improve latencies, and a heuristics ap-
proach to solve this optimization problem at runtime.

Our future work in this area is seeking to validate our
approach on other IIoT use cases with real-time data and

[8] Y. Xiao and M. Krunz, “Dynamic network slicing for scalable fog
computing systems with energy harvesting,” IEEE Journal on Selected
Areas in Communications, vol. 36, no. 12, pp. 2640–2654, 2018.
[9] J. Feng, Q. Pei, F. R. Yu, X. Chu, J. Du, and L. Zhu, “Dynamic network
slicing and resource allocation in mobile edge computing systems,” IEEE
Transactions on Vehicular Technology, vol. 69, no. 7, pp. 7863–7878,
2020.

[10] M. R. Raza, M. Fiorani, A. Rostami, P.

¨Ohlen, L. Wosinska, and
P. Monti, “Dynamic slicing approach for multi-tenant 5g transport
networks,” Journal of Optical Communications and Networking, vol. 10,
no. 1, pp. A77–A90, 2018.

[11] A. B. Kahn, “Topological sorting of large networks,” Communications

of the ACM, vol. 5, no. 11, pp. 558–562, 1962.

[12] Z. Min, H. Sun, S. Bao, A. S. Gokhale, and S. S. Gokhale, “A self-
adaptive load balancing approach for software-deﬁned networks in iot,”
in 2021 IEEE International Conference on Autonomic Computing and
Self-Organizing Systems (ACSOS), pp. 11–20, 2021.

[13] M. Deva Priya, T. Suganya, A. Christy Jeba Malar, E. Dhivyaprabha,
P. K. Prasad, and L. Vishnu Vardhan, “An efﬁcient scheduling algo-
rithm for sensor-based iot networks,” in Inventive communication and
computational technologies, pp. 1323–1331, Springer, 2020.

[14] A. Roy, J. L. Pachuau, and A. K. Saha, “An overview of queuing delay
and various delay based algorithms in networks,” Computing, vol. 103,
no. 10, pp. 2361–2399, 2021.

[15] F. Metzger, T. Hoßfeld, A. Bauer, S. Kounev, and P. E. Heegaard,
“Modeling of aggregated iot trafﬁc and its application to an iot cloud,”
Proceedings of the IEEE, vol. 107, no. 4, pp. 679–694, 2019.

[16] H. P. Keeler, N. Ross, and A. Xia, “When do wireless network signals
appear poisson?,” Bernoulli, vol. 24, no. 3, pp. 1973–1994, 2018.
[17] S. A. Kravchenko and F. Werner, “Scheduling on parallel machines with
a single and multiple servers,” Otto-von-Guericke-Universitat Magde-
burg, vol. 30, no. 98, pp. 1–18, 1998.

[18] A. G¨ung¨or, “Ueransim,” 2022.
[19] free5GC.org, “Free5gc,” 2019.
[20] Ryu, “Ryu sdn framework,” 2017.
[21] L. Foundation, “Open vswitch,” 2016.
[22] I. asynchronous analytics technology, “sﬂow-rt,” 2015-2022.
[23] T. R. of the University of California, “iperf,” 2014-2022.
[24] D. S. Johnson, Near-optimal bin packing algorithms.

PhD thesis,

Massachusetts Institute of Technology, 1973.

