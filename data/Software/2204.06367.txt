Mixed-Integer Programming for Signal Temporal
Logic with Fewer Binary Variables

Vince Kurtz and Hai Lin

2
2
0
2

y
a
M
3

]

Y
S
.
s
s
e
e
[

2
v
7
6
3
6
0
.
4
0
2
2
:
v
i
X
r
a

Abstract—Signal Temporal Logic (STL) provides a convenient
way of encoding complex control objectives for robotic and cyber-
physical systems. The state-of-the-art in trajectory synthesis for
STL is based on Mixed-Integer Convex Programming (MICP).
The MICP approach is sound and complete, but has limited
scalability due to exponential complexity in the number of binary
variables. In this letter, we propose a more efﬁcient MICP
encoding for STL. Our new encoding is based on the insight
that disjunction can be encoded using a logarithmic number
of binary variables and conjunction can be encoded without
binary variables. We demonstrate in simulation examples that
our proposed approach signiﬁcantly outperforms the state-of-the-
art for long and complex speciﬁcations. Open-source software is
available: https://stlpy.readthedocs.io.

Index Terms—Autonomous systems, Robotics, Optimization.

I. INTRODUCTION

S IGNAL Temporal Logic (STL) is a powerful means of

expressing complex control objectives. STL combines
boolean operators (“and”, “or”, “not”) with temporal oper-
ators (“always”, “eventually”, “until”) and is deﬁned over
continuous-valued signals, making it an appealing choice for
dynamical systems ranging from mobile robots [1]–[3] and
quadrotors [4] to high-DoF manipulators [5] and trafﬁc net-
works [6], [7].

In this letter, we address the trajectory synthesis problem for
discrete-time linear systems subject to STL speciﬁcations over
convex predicates. That is, given a system and a speciﬁcation,
ﬁnd a satisfying trajectory that minimizes a given cost.

The state-of-the-art solution uses Mixed-Integer Convex
Programming (MICP) [8]. This approach, ﬁrst proposed in
[9] and later reﬁned in [10], [11], is sound and complete:
any solution returned by the algorithm satisﬁes the speciﬁ-
cation, and the algorithm ﬁnds a solution whenever one exists.
Furthermore, MICP ﬁnds globally optimal solutions, enabling
maximally robust or minimum energy trajectories.

The major limitation is scalability. MICP’s worst-case com-
plexity is exponential
in the number of binary variables,
and the state-of-the-art in STL synthesis introduces a binary
variable for each predicate at each timestep. This limits MICP
methods to simple speciﬁcations and short time horizons [8].
This exponential complexity should not be too surprising.
STL synthesis is NP-hard, so exponential worst-case com-
plexity is inevitable for any sound and complete algorithm

The authors are with the Departments of Electrical Engineering, University
of Notre Dame, Notre Dame, IN, 46556 USA. {vkurtz,hlin1}@nd.edu
This work was supported by NSF Grants CNS-1830335, IIS-2007949.

(cid:3)[1,T ]a ∧ ♦[1,T ]b

(cid:3)[1,T ]a

♦[1,T ]b

a1

a2

. . .

aT

b1

b2

. . .

bT

Fig. 1. Tree representation of the STL formula (cid:3)[1,T ]a ∧ ♦[1,T ]b. For this
example, our approach reduces the number of binary variables from 2T to
(cid:100)log2(T + 1)(cid:101), reducing computational complexity from O(2T ) to O(T ).
(assuming P (cid:54)= N P ). But despite this NP-hardness, MICP
performs well in practice for moderately sized problems. With
this in mind, much research in STL synthesis has gone toward
reducing MICP problem sizes. For example, rewriting formulas
in Positive Normal Form (PNF) signiﬁcantly reduces the
number of binary variables and constraints [8], [11]. Waypoint-
based abstractions can further limit the problem size [12].

Another possibility is to formulate MICPs with tighter
convex relaxations. While this does not improve the worst-case
complexity, a tighter convex relaxation increases branch-and-
bound efﬁciency and often improves performance in practice
[13]. This approach has been pursued for Metric Temporal
Logic in [14] and piecewise-afﬁne reachability in [15].

Much STL research in recent years has focused on avoiding
MICP entirely, and instead designing efﬁcient heuristic meth-
ods which are sound but not complete. Such methods include
gradient-based optimization [2], [3], [16], [17], differential
dynamic programming [5], control barrier functions [18] and
neural-network-based methods [19]. These approaches tend to
improve scalability, especially with respect to the speciﬁcation
time horizon, but offer limited formal guarantees and often
struggle to handle more complex speciﬁcations.

In this letter, we return to STL synthesis via MICP and
propose a new MICP encoding that uses fewer binary vari-
ables. Our proposed approach draws on a logarithmic encoding
of SOS1 constraints [20] to reduce the number of binary
variables. Similar to [8], [11], we consider formulas in PNF,
but rather than introducing a binary variable for each predicate
at each timestep, our proposed approach introduces binary
variables only for disjunctive subformulas. Furthermore, each
disjunctive subformula is encoded using a logarithmic number
of binary variables. This approach leads to particularly no-
table reductions in complexity for long-horizon speciﬁcations,
though the standard MICP encoding [8] tends to outperform
our proposed approach for short horizons.

For example, consider the speciﬁcation shown in Figure 1,

 
 
 
 
 
 
which reads “always a and eventually b”. The standard MICP
encoding requires a linear number of binary variables with re-
spect to time horizon T , resulting in exponential computational
complexity. Our proposed encoding uses a logarithmic number
of binary variables, resulting in linear complexity.

Our primary contributions are as follows:
• We propose a new MICP encoding for STL speciﬁcations
that uses fewer binary variables for most speciﬁcations,
• Our proposed approach is sound and complete, and guar-

anteed to ﬁnd a globally optimal solution,

• We propose a tree data structure for STL formulas, and
show how this data structure can be exploited to further
reduce the number of binary variables,

• We demonstrate the scalability of our approach in various
simulated scenarios involving a mobile robot. Code for
reproducing these results is available online [21].

The remainder of this letter is organized as follows: back-
ground and a formal problem statement are presented in
Section II, our main results are presented in Section III, and
simulation experiments are reported in Section IV.

II. BACKGROUND

A. System Deﬁnitions

In this letter, we consider discrete-time linear systems:

xt+1 = Axt + But,
yt = Cxt + Dut,
where xt ∈ X ⊆ Rn is the system state at timestep t, ut ∈
U ⊆ Rm is the control input, and yt ∈ Y ⊆ Rp is the output.
We assume that X, U and Y are convex sets, and A, B, C, D
are matrices of appropriate dimension.

(1)

Given an initial state x0 and a control tape u = u0, u1, . . . ,
the output signal y = y0, y1, . . . is generated by applying (1).
We denote the output signal starting at timestep t by

(y, t) = yt, yt+1, yt+2, . . . .

B. Signal Temporal Logic

We consider STL formulas over convex predicates in PNF:
further details and discussion of STL formulas can be found
in [8]. Such formulas follow the syntax
(cid:94)

ϕi | (cid:3)[t1,t2]ϕ | ♦[t1,t2]ϕ | ϕ1U[t1,t2]ϕ2,

ϕ := π |

ϕi |

(cid:95)

i

i

(2)
where predicates π are deﬁned by convex functions gπ : Y →
R such that {y | gπ(y) ≤ 0} are convex sets. In addition
to standard boolean operations “and” (∧) and “or” (∨), STL
includes temporal operators “always” ((cid:3)), “eventually” (♦)
and “until” (U). In this letter we consider only bounded-time
speciﬁcations, i.e., those with t2 ﬁnite.

that negation (¬) can be applied to linear predicates, but not
to more general convex predicates such as ellipses.

The semantics, or meaning, of STL formulas are deﬁned
as follows, where we denote the fact that signal y satisﬁes
speciﬁcation ϕ as y (cid:15) ϕ. Here we present the quantitative
semantics of STL, which deﬁnes a scalar “robustness value”
ρϕ(y) which is positive only if y (cid:15) ϕ:

• y (cid:15) ϕ if and only if ρϕ((y, 0)) ≥ 0
• ρπ((y, t)) = −gπ(yt), since y (cid:15) π if gπ(y0) ≤ 0
• ρϕ1∧ϕ2((y, t)) = min (cid:0)ρϕ1 ((y, t)), ρϕ2 ((y, t))(cid:1)
• ρϕ1∨ϕ2((y, t)) = max (cid:0)ρϕ1((y, t)), ρϕ2 ((y, t))(cid:1)
• ρ♦[t1,t2]ϕ((y, t)) = maxt(cid:48)∈[t+t1,t+t2]
• ρ(cid:3)[t1,t2]ϕ((y, t)) = mint(cid:48)∈[t+t1,t+t2]
• ρϕ1U[t1,t2 ]ϕ2 ((y, t)) = maxt(cid:48)∈[t+t1,t+t2]

(cid:0)ρϕ((y, t(cid:48)))(cid:1)
(cid:0)ρϕ((y, t(cid:48)))(cid:1)

(cid:18)

min

(cid:16)(cid:104)

ρϕ1 ((y, t(cid:48))), mint(cid:48)(cid:48)∈[t+t1,t(cid:48)]

(cid:0)ρϕ2((y, t(cid:48)(cid:48)))(cid:1)(cid:105)(cid:17)(cid:19)

.

For a given STL formula ϕ, we denote the time horizon
(minimum number of timesteps after which a signal’s satisfac-
tion status is ﬁxed) as T . We denote the number of predicates
as N π and the number of disjunctive subformulas as N ∨:

Deﬁnition 1. Disjunctive (sub)formulas are deﬁned as follows:
j=1 ϕi, and ♦[t1,t2]ϕi are not disjunctive;

• π, (cid:86)n
• (cid:87)k
j=1 ϕi is disjunctive, with k disjunctions;
• ♦[t1,t2]ϕ is disjunctive, with t2 − t1 disjunctions;
• ϕ1U[t1,t2]ϕ2 is disjunctive, with t2 − t1 disjunctions.

We denote the number of disjunctions associated with the
ith disjunctive subformula as Ni. For example, the formula
(a ∨ b)∧♦[0,T ]c has two disjunctive subformulas, with N1 = 2
and N2 = T + 1 respectively.

C. Problem Statement

Given an initial state, an STL speciﬁcation, and a quadratic
running cost, our problem is to ﬁnd a minimum cost trajec-
tory that satisﬁes the STL speciﬁcation. More formally, this
problem can be stated as an optimization problem:

Problem 1. Given a system of the form (1), an initial state x0,
and an STL speciﬁcation ϕ, solve the optimization problem

min
x,u,y

− ρϕ(y) +

T
(cid:88)

t=0

t Qxt + uT
xT

t Rut

s.t. xt+1 = Axt + But
yt = Cxt + Dut
x0 ﬁxed
xt ∈ X, ut ∈ U, yt ∈ Y
ρϕ(y) ≥ 0

(3a)

(3b)

(3c)

(3d)

(3e)

(3f)

Remark 1. This syntax is slightly more general than that with
linear predicates only, as considered in [9]–[12], since such
convex predicates include linear ones gπ(yt) = aT y − b. Note

where Q (cid:23) 0 and R (cid:23) 0 are symmetric cost matrices.

Apart from the robustness measure ρϕ(y), (3) is a convex
optimization problem, for which many mature solvers exist

[22]. With this in mind, our primary goal is to introduce mixed-
integer constraints to deﬁne ρϕ(y), preferably using as few
binary variables as possible.

Remark 2. Note that with Q = R = 0, this optimization
problem maximizes the robustness measure ρ, resulting in a
maximally satisfying solution. Similarly, the cost matrices Q
and R can be scaled to trade off maximizing STL satisfaction
and minimizing the running cost.

III. MAIN RESULTS
The current state-of-the-art is to encode (3) as an MICP with
T N π binary variables (one per predicate per timestep) [8]. In
this section, we propose an encoding with (cid:80)N ∨
i=1(cid:100)log2(Ni+1)(cid:101)
binary variables, where Ni is the number of disjunctions asso-
ciated with the ith disjunctive subformula. Note that Ni may
vary with the time horizon T , depending on the speciﬁcation.
We ﬁrst introduce a tree data structure for representing STL
formulas. Then, after presenting our proposed encoding, we
show how simple ofﬂine operations on this data structure can
further reduce the number of binary variables.

A. Representing STL Speciﬁcations

In this section, we present a tree data structure for STL
formulas. A similar approach was taken in [17], with the
primary aim of enabling efﬁcient gradient-based optimization.
Here, our primary aim is to enable more efﬁcient MICP.
Our tree data structure is formally deﬁned as follows:

Deﬁnition 2. An STL Tree T ϕ is a tuple (S, τ, ◦, ρϕ), where
• S = [T ϕ1, T ϕ2 , . . . , T ϕN ] is a list of N subtrees (i.e.,

children) associated with each subformula;

• τ = [tϕ1 , tϕ2, . . . , tϕN ] is a list of time steps correspond-

ing to the N subformulas;

• ◦ ∈ {∧, ∨} is a combination type;
• ρϕ is the STL robustness measure: a function which maps

signals y to scalar values.

All nodes in an STL Tree are themselves STL Trees, and
correspond to subformulas. Leaves of an STL Tree correspond
to predicates π. For a given STL formula ϕ, a corresponding
tree T ϕ can be built up recursively by following the syntax
presented in Section II-B.
Example 1. Consider the speciﬁcation ϕ = (cid:3)[1,T ]a ∧ ♦[1,T ]b,
where a and b are predicates. The associated STL Tree is
shown in Figure 1. There are two ∧-type nodes (associated
with ϕ and (cid:3)a), one ∨-type node (♦b), and 2T predicates.

Roughly speaking, the original MICP encoding of [9] in-
troduces a binary variable for each node in this tree, while
[11] introduces a binary variable for each leaf1. Our proposed
encoding, outlined in the following section, instead introduces
binary variables only for disjunctive nodes. Furthermore, each
disjunctive node only introduces (cid:100)log2(N + 1)(cid:101) binary vari-
ables, where N is the number of subformulas.

1More precisely, [11] introduces a binary variable for each predicate at each

timestep. This is typically slightly more than the number of leaves.

B. New Mixed-Integer Encoding

We now present our proposed mixed-integer encoding.
Given an STL formula ϕ, we start by constructing a cor-
responding STL Tree T ϕ. We deﬁne a continuous variable
ρ ≥ 0 which, with some liberty of notation, will provide a
lower bound on the robustness measure ρϕ(y). Note that if
the robustness measure is negative, a violation of the constraint
ρ ≥ 0 will render the optimization problem infeasible.

For each node T φ in the tree, we introduce a continuous
variable zφ ∈ [0, 1]. Ultimately, we will add constraints such
that zφ = 1 if subformula φ is enforced and zφ = 0 otherwise.
While these variables take binary values, declaring them as
continuous improves MICP efﬁciency, since MICP complexity
is dominated by the number of binary variables.

We start with the leaf nodes. Each leaf is associated with a

predicate (π) and a timestep t. For each leaf we constrain

ρ ≤ −gπ(yt) + M (1 − zπ),

(4)

where M is a large scalar constant. This “big-M” constraint
enforces ρ ≤ −gπ(yt) if zπ = 1, but
leaves ρ and yt
essentially unconstrained if zπ = 0 [13].

Next we consider all of the ∧-type nodes in the tree. For
the corresponding formula φ to hold, all of the subformulas
φ1, φ2, . . . , φN must also hold. In other words, zφ = 1 implies
zφi = 1. This can be encoded without adding binary variables,
simply by applying the linear constraints:

zφ ≤ zφi ∀i = 1, 2, . . . , N.

(5)

Disjunctive constraints present more of a challenge. For
these ∨-type constraints, we need to enforce at
least one
zφi = 1 if zφ = 1. A natural way to do this would be to
deﬁne zφi as binary variables and add the constraint:

zφ ≤

N
(cid:88)

i=1

zφi.

This approach was taken in [9], and adds N binary variables.
We now show how results in disjunctive programming [20]
can be leveraged to encode disjunctive constraints using only
log2(N + 1) binary variables. To introduce these constraints,
we ﬁrst deﬁne SOS1 sets:

Deﬁnition 3. A vector λ = [λ1, λ2, . . . , λn]T is a Special
Ordered Set of Type 1 (SOS1) if the following conditions hold:

• λi ≥ 0
• (cid:80)
• ∃ j ∈ [1, ..., n] s.t. λj = 1

i λi = 1

In other words, a vector λ is in SOS1 if it contains exactly

one nonzero element, and that element is equal to 1.

Perhaps surprisingly, we can constrain λ ∈ SOS1 using a

logarithmic number of binary variables and constraints:

Theorem 1 ( [20]). Assume that n is a power of 2. Let I =
1, 2, . . . , n and B : I → {0, 1}log2(n) be any bijective function.
Then the following constraints enforce λ ∈ SOS1:

λi ≥ 0,

(cid:88)

λi = 1,

(cid:88)

λj ≤ ζk,

i

(cid:88)

j∈J +(k,B)

j∈J 0(k,B)

λj ≤ (1 − ζk)

ζk ∈ {0, 1} ∀k ∈ [1, 2, ..., log2(n)]

ϕ1

b

a

ϕ2

a

b ∨ c

c

b

c

(a) ϕ1 = a ∨ b ∨ c

(b) ϕ2 = a ∨ (b ∨ c)

Fig. 2. STL Trees for two logically equivalent formulas. Our approach
introduces 2 binary variables for ϕ1, but 4 variables for ϕ2.

where J +(k, B) = {i | k ∈ supp(B(i))}, J 0(k, B) = {i | k /∈
supp(B(i))}, and supp(B(i)) denotes the support of B(i).

For the bijective function B(i), the mapping from index i
to its binary representation is a natural choice. In that case,
the values of binary variables ζk essentially represent which
index i is holds the nonzero value. If n is not a power of 2,
we can simply add e(cid:100)log2 n(cid:101) − n elements along with linear
constraints λi = 0 that force these elements to be zero.

This brings us back to encoding disjunctive STL subfor-
mulas. For these ∨-type nodes in the STL tree, we need
zφ =⇒ (cid:87)N
i=1 zφi. This can be written as a SOS1 constraint

min
x,u,y,zφi ,ρ

− ρ +

T
(cid:88)

t=0

t Qxt + uT
xT

t Rut

s.t. Dynamics constraints (3b-3e)

STL Constraints (4-7)
ρ ≥ 0

(8a)

(8b)

(8c)

(8d)

Similar to the existing MICP encodings [8]–[11], this MICP

is sound, complete, and globally optimal:

Theorem 2 (Sound and Complete). A dynamically feasible
output signal y is a solution to Problem 1 if and only if y is
a solution to (8).

[1 − zφ, zφ1, zφ2, . . . , zφN ] ∈ SOS1,

(6)

Theorem 3 (Globally Optimal). If Problem 1 is feasible, the
MICP (8) ﬁnds a globally optimal solution.

which can be encoded with (cid:100)log2(N + 1)(cid:101) binary variables.
Note that SOS1 ensures exactly one nonzero element, while
disjunction requires at least one nonzero element. This is not
an issue, however, because we only need a sufﬁcient (not
necessary) condition for y (cid:15) φ. Focusing on speciﬁcations in
PNF allows us to guarantee both soundness and completeness
while only requiring this sort of sufﬁcient condition [8], [11].

Finally, for the root node we constrain

zϕ = 1,

(7)

The advantage of our approach over other sound, complete,
and globally optimal methods [8]–[11] is that our approach
typically uses fewer binary variables. For many speciﬁcations,
like that shown in Figure 1 and the examples in Section IV,
this difference is quite signiﬁcant.

It is possible, however, for our approach to have more binary
variables than the standard encoding, particularly for speciﬁca-
tions with few predicates but many nested disjunctions. To this
end, the next section shows how the STL Tree data structure
can be used to further reduce the MICP size.

to ensure that the overall speciﬁcation ϕ must be satisﬁed.

Proposition 1. If the constraints (4)-(7) are met, then the
following properties hold:

1) The continuous variable zφ is 1 only if y (cid:15) φ;
2) The decision variable ρ provides a lower bound for the

robustness measure ρϕ(y);

3) The constraints (4)-(7) are feasible if and only if y (cid:15) ϕ.

Proof. Property 1 follows naturally from Theorem 1 and the
reasoning of [9]. Note that this property is one-directional: it
may be the case that zφ = 0 and y (cid:15) φ for some subformula.
Property 2 follows from the deﬁnition of the robustness

measure and constraints (4).

For Property 3,

the reverse direction (only if) follows
directly from Property 1 and constraint (7). The forward direc-
tion (if) follows from Property 2 and the constraint ρ ≥ 0.

This allows us to solve Problem 1 as an MICP:

C. Formula Flattening

Unlike the state-of-the-art MICP encoding with binary vari-
ables for every predicate at every timestep [8], the number of
binary variables in our proposed encoding depends heavily on
the structure of the STL Tree T ϕ. Since logically equivalent
formulas can have different tree structures, this can have a
major impact on solver efﬁciency.

For example, consider the logically equivalent formulas
ϕ1 = a ∨ b ∨ c and ϕ2 = a ∨ (b ∨ c), where a, b, and c are
predicates. STL Trees are illustrated in Figure 2. ϕ1 includes
one disjunctive subformula, and can be encoded with 2 binary
variables. The logically equivalent ϕ2 includes two disjunctive
subformulas, however, and requires 4 binary variables.

Clearly, we should prefer “ﬂatter” STL Trees for our pro-
posed encoding. To this end, speciﬁcation ﬂattening provides
an automatic means of compressing formulas with many layers
into logically equivalent formulas with fewer layers. The basic
idea is to search for nodes which have the same combination

(a) Two-Target Reach-Avoid (11)

(b) Narrow Passage (12)

(c) Many-Target (13)

(d) Door Puzzle (14)

Fig. 3.

Illustrations of example scenarios along with solutions generated by our proposed approach. Solve times are shown in Table I.

type (∧ or ∨) as their parent. If this is the case, that node’s
children can be moved up a level and the node removed.

were performed on a laptop with an Intel i7 processor and
32GB RAM. Open-source software is available online [21].

While formula ﬂattening has the most dramatic impact on
our proposed approach, it can also beneﬁt other MICP encod-
ings [8], [9], since ﬂatter formulas introduce fewer continuous
variables and constraints. Interestingly, while formula ﬂatten-
ing consistently reduces the number of binary variables, it does
not always improve solve times. We attribute this counter-
intuitive result to the fact that certain solver-speciﬁc heuristics
may be more effective on unﬂattened formulas. In Section IV,
we only ﬂatten formulas if it improves performance.

IV. SIMULATION EXPERIMENTS

In this section, we demonstrate the improved scalability of
our proposed approach. This is largely due to a reduction in
the number of binary variables — especially for speciﬁcations
involving ♦ and U over long time-horizons.

We consider several benchmark speciﬁcations involving a
simple mobile robot exploring a planar environment. These
speciﬁcations are illustrated in Figure 3. In all scenarios,
we assume that the robot is governed by double-integrator
dynamics in both the horizontal and vertical directions, i.e.,

x = [px, py, ˙px, ˙py]T u = [¨px, ¨py]T

where px is the horizontal position of the robot and py is the
vertical position, in meters. The output signal is deﬁned as
y = [px, py]T , giving us dynamics
(cid:21)

(cid:21)

A =

, B =

, C = (cid:2)I 0(cid:3) , D = 0.

(cid:20)I
I
0 I

(cid:20)0
I

In the ﬁrst scenario, shown in Figure 3a, our mobile robot
must avoid an obstacle (O, grey), visit one of two intermediate
targets (T1, T2, blue) for at least 5 timesteps, and reach a goal
(G, green). This speciﬁcation can be written as

♦[0,T −5]((cid:3)[0,5]T1 ∨ (cid:3)[0,5]T2) ∧ (cid:3)[0,T ]¬O ∧ ♦[0,T ]G,

(11)

where T is the speciﬁcation time-bound.

The second scenario involves many obstacles and narrow
passages, and is shown in Figure 3b. The robot must eventually
reach one of two possible goals in addition to avoiding
obstacles. This speciﬁcation can be written as:

♦[0,T ](G1 ∨ G2) ∧ (cid:3)[0,T ]

(cid:33)

¬Oi

(cid:32) 4
(cid:94)

i=1

(12)

The third scenario, shown in Figure 3c, is designed to con-
tain a more complex logical structure. In addition to avoiding
an obstacle, the robot must visit several groups of targets T j
(red, green, blue, orange, and purple). There are two targets in
each group, and at least one target from each group must be
visited. This speciﬁcation can be written as

5
(cid:94)





2
(cid:95)

i=1

j=1


 ∧ (cid:3)[0,T ](¬O),

♦[0,T ]T j
i

(13)

where T j

i denotes the jth target in group i.

The ﬁnal scenario is inspired by [12], [25], and requires the
robot to collect keys (i.e., visit blue regions) associated with
certain doors (red) before reaching an end goal (green). This
speciﬁcation can be written as

State and input constraints X and U are deﬁned to enforce
maximum acceleration and velocity of 0.5 m/s2 and 1 m/s:

X = {x | 0 ≤ px ≤ 15, 0 ≤ py ≤ 15, | ˙px| ≤ 1, | ˙py| ≤ 1}.

U = {u | |¨px| ≤ 0.5, |¨py| ≤ 0.5}.

(9)

(10)

We used python and the Drake [23] mathematical program-
ming interface to set up the MICP (8), and solved the MICP
with Gurobi version 9.5.1 [24] with default options. As a
baseline, we compare to the state-of-the-art MICP described in
[8], similarly implemented in Drake/Gurobi. All experiments

2
(cid:94)

i=1

(cid:0)¬DiU[0,T ]Ki

(cid:1) ∧ ♦[0,T ]G ∧ (cid:3)[0,T ](

5
(cid:94)

¬Oi),

(14)

i=1

where Ki denotes picking up the ith key and Di denotes
passing through the ith door region.

Solve times and number of binary variables for each of
these speciﬁcations over several time horizons T are shown
in Table I. For all of these examples, our proposed approach
uses fewer binary variables than the standard MICP [8]. The
standard MICP is often faster for shorter time horizons, but our
proposed encoding is consistently faster for long time horizons.

REFERENCES

[1] L. Lindemann, J. Nowak, L. Sch¨onb¨achler, M. Guo, J. Tumova, and D. V.
Dimarogonas, “Coupled multi-robot systems under linear temporal logic
and signal temporal logic tasks,” IEEE Transactions on Control Systems
Technology, vol. 29, no. 2, pp. 858–865, 2019.

[2] Y. Gilpin, V. Kurtz, and H. Lin, “A smooth robustness measure of signal
temporal logic for symbolic control,” IEEE Control Systems Letters,
vol. 5, no. 1, pp. 241–246, 2021.

[3] N. Mehdipour, C.-I. Vasile, and C. Belta, “Arithmetic-geometric mean
robustness for control from signal temporal logic speciﬁcations,” in 2019
American Control Conference (ACC).

IEEE, 2019, pp. 1690–1695.

[4] Y. V. Pant, H. Abbas, R. A. Quaye, and R. Mangharam, “Fly-by-logic:
control of multi-drone ﬂeets with temporal logic objectives,” in 2018
ACM/IEEE 9th International Conference on Cyber-Physical Systems
(ICCPS).

IEEE, 2018, pp. 186–197.

[5] V. Kurtz and H. Lin, “Trajectory optimization for high-dimensional non-
linear systems under stl speciﬁcations,” IEEE Control Systems Letters,
vol. 5, no. 4, pp. 1429–1434, 2020.

[6] S. Sadraddini and C. Belta, “Model predictive control of urban trafﬁc
networks with temporal logic constraints,” in 2016 American Control
Conference (ACC).

IEEE, 2016, pp. 881–881.
[7] S. Coogan, E. A. Gol, M. Arcak, and C. Belta, “Trafﬁc network control
from temporal logic speciﬁcations,” IEEE Transactions on Control of
Network Systems, vol. 3, no. 2, pp. 162–172, 2015.

[8] C. Belta and S. Sadraddini, “Formal methods for control synthesis:
An optimization perspective,” Annual Review of Control, Robotics, and
Autonomous Systems, vol. 2, pp. 115–140, 2019.

[9] V. Raman, A. Donz´e, M. Maasoumy, R. M. Murray, A. Sangiovanni-
Vincentelli, and S. A. Seshia, “Model predictive control with signal
temporal logic speciﬁcations,” in 53rd IEEE Conference on Decision
and Control.

IEEE, 2014, pp. 81–87.

[10] S. Sadraddini and C. Belta, “Robust temporal logic model predictive
control,” in 2015 53rd Annual Allerton Conference on Communication,
Control, and Computing (Allerton), sep 2015, pp. 772–779.

[11] ——, “Formal synthesis of control strategies for positive monotone
systems,” IEEE Transactions on Automatic Control, vol. 64, no. 2, pp.
480–495, 2018.

[12] D. Sun,

J. Chen, S. Mitra, and C. Fan, “Multi-agent motion
logic speciﬁcations,” arXiv preprint

temporal

planning from signal
arXiv:2201.05247, 2022.

[13] M. Conforti, G. Cornu´ejols, G. Zambelli et al., Integer programming.

Springer, 2014, vol. 271.

[14] V. Kurtz and H. Lin, “A more scalable mixed-integer encoding for metric

temporal logic,” IEEE Control Systems Letters, 2021.

[15] T. Marcucci, J. Umenberger, P. A. Parrilo, and R. Tedrake, “Shortest
paths in graphs of convex sets,” arXiv preprint arXiv:2101.11565, 2021.
[16] Y. V. Pant, H. Abbas, and R. Mangharam, “Smooth operator: Control
using the smooth robustness of temporal logic,” in Conference on Control
Technology and Applications.

IEEE, 2017, pp. 1235–1240.

[17] K. Leung, N. Ar´echiga, and M. Pavone, “Back-propagation through sig-
nal temporal logic speciﬁcations: Infusing logical structure into gradient-
based methods,” in 14th International Workshop on the Algorithmic
Foundations of Robotics, 2020.

[18] L. Lindemann and D. V. Dimarogonas, “Control barrier functions for
signal temporal logic tasks,” IEEE Control Systems Letters, vol. 3, no. 1,
pp. 96–101, 2018.

[19] W. Liu, N. Mehdipour, and C. Belta, “Recurrent neural network con-
trollers for signal temporal logic speciﬁcations subject to safety con-
straints,” IEEE Control Systems Letters, 2021.

[20] J. P. Vielma and G. L. Nemhauser, “Modeling disjunctive constraints
with a logarithmic number of binary variables and constraints,” Mathe-
matical Programming, vol. 128, no. 1, pp. 49–72, 2011.

[21] V. Kurtz, “stlpy: a python library for control from signal temporal logic

speciﬁcations.” [Online]. Available: https://github.com/vincekurtz/stlpy

[22] S. Boyd, S. P. Boyd, and L. Vandenberghe, Convex Optimization.

Cambridge university press, 2004.

[23] R. Tedrake and the Drake Development Team, “Drake: Model-based
[Online]. Available:

robotics,” 2019.

design and veriﬁcation for
https://drake.mit.edu

[24] L. Gurobi Optimization, “Gurobi optimizer reference manual,” 2021.

[Online]. Available: http://www.gurobi.com

[25] W. Vega-Brown and N. Roy, “Admissible abstractions for near-optimal

task and motion planning,” in IJCAI, 2018.

Fig. 4. Solve times for speciﬁcation (11) over different time horizons.

Speciﬁcation

Horizon (T)

Two-Target (11)

Narrow Passage
(12)
Many-Target (13)

Door Puzzle (14)

25
50
25
50
25
50
25
50

Binary Vars.
Ours
[8]
89
1216
166
2616
318
624
619
1124
441
1144
846
2244
2355
3432
8433 >7500
11832

Solve Time (s)
Ours
0.579
13.3
5.92
158.1
16.8
2666
8.75
1392

[8]
0.662
749
2.27
168.8
3.36
>7500
8.46

TABLE I
SOLVE TIMES FOR BENCHMARK SCENARIOS

For speciﬁcation (11), we provide a graph of solve times
versus time horizon in Figure 4. Again, we see that our
proposed approach outperforms the state-of-the-art for long
time horizons, with the performance gap between the two
approaches growing as T increases. This makes sense given
how each approach introduces binary variables to handle the
♦ subformulas. Under the standard approach,
the number
of binary variables used to encode ♦[0,T ] increases linearly
with T . Under our proposed approach, the number of binary
variables increases only logarithmically.

Finally, we note that the standard MICP’s superior per-
formance over short time horizons may be due to Gurobi’s
presolve routines taking advantage of the extra binary variables
to perform additional simpliﬁcations. Take, for example, the
narrow passage speciﬁcation (12) with 25 timesteps. With
presolve enabled, the standard approach outperforms our ap-
proach (Table I). With presolve disabled, however, the standard
approach takes over an hour to ﬁnd an optimal solution, while
our approach takes about a minute.

V. CONCLUSION

We proposed a more efﬁcient mixed-integer encoding for
Signal Temporal Logic. Our primary insight is that we can
encode disjunctions using a logarithmic number of binary
variables, and conjunctions without introducing any binary
variables. We also introduced a tree data structure for STL,
and showed how this data structure can be exploited to further
reduce the number of binary variables and constraints. We
demonstrated the improved scalability of our approach in
simulation examples, where our proposed encoding outper-
formed the state-of-the-art by orders of magnitude on long
and complex speciﬁcations.

