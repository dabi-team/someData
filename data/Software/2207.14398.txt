2
2
0
2

l
u
J

8
2

]
T
I
.
s
c
[

1
v
8
9
3
4
1
.
7
0
2
2
:
v
i
X
r
a

Analysis and Computation of Multidimensional Linear
Complexity of Periodic Arrays

Rafael Arce1, Carlos Hern´andez1, Jos´e Ortiz1, Ivelisse Rubio1, and Jaziel
Torres2

1Department of Computer Science, University of Puerto Rico, R´ıo Piedras
2Department of Mathematics, University of Puerto Rico, R´ıo Piedras

Abstract

Linear complexity is an important parameter for arrays that are used in appli-
cations related to information security. In this work we survey constructions of two
and three dimensional arrays, and present new results on the multidimensional linear
complexity of periodic arrays obtained using the deﬁnition and method proposed in
[2, 7, 12]. The results include a generalization of a bound for the linear complexity,
a comparison with the measure of complexity for multisequences, and computations
of the complexity of arrays with periods that are not relatively prime for which the
“unfolding method” does not work. Conjectures for exact formulas and the asymptotic
behavior of the complexity of some array constructions are formulated. We also present
open source software for constructing multidimensional arrays and for computing their
multidimensional linear complexity.

1

Introduction

Multidimensional periodic arrays are useful in applications such as digital watermark-
ing, multiple target recognition and communications [1, 5, 8, 14, 15, 16, 21].
It is
desirable to have arrays with a variety of sizes. Depending on the particular appli-
cation, the array should satisfy properties such as good auto and cross correlation,
balance, and complexity. Randomly generated arrays pose problems to provide prop-
erties such as periodicity and orthogonality. Precomputed arrays are stored in memory,
which imposes a heavy memory burden on some systems. Hence, it is important to pro-
vide algebraic constructions for arrays that have the desired properties and are easily
implemented. Several constructions have been proposed and their properties analyzed
over the years.

Since some of the applications are related to information security, it is particularly
important that the arrays have good complexity, meaning that they are resistant to
Berlekamp-Massey types of attacks, where the complete array might be deduced from

1

 
 
 
 
 
 
knowing some of its entries. The linear complexity of sequences has been widely studied
[4, 9, 10]. However, not much work has been done on the analysis of the complexity
of multidimensional arrays. A deﬁnition of the complexity of 2-dimensional arrays
viewed as multisequences was given in [11]. The computation of multidimensional linear
complexity of 2-dimensional arrays with periods that are relatively prime was done by
“unfolding” the array into a sequence and applying the Berlekamp-Massey algorithm
in [8, 15]. A new deﬁnition and theory for the computation of multidimensional linear
complexity of arrays was proposed in [2, 7, 12]. This deﬁnition applies to any number
of dimensions, does not have the restrictions of the unfolding method, and it is more
accurate than the joint linear complexity deﬁned for multisequences.

Given that there are few sequences with known formulas for their complexity, it is
expected that formulas for the exact value of the complexity of arrays would be hard
to ﬁnd. In this work we present a generalization of a bound for the linear complexity of
arrays presented in [2] and conjectures for exact formulas, and the asymptotic behavior
of the complexity of some array constructions. It is also proved that the deﬁnition of
multidimensional linear complexity in [2, 7, 12] is more accurate than the deﬁnition
of joint linear complexity of multisequences. We present new computations of the
complexity of families of multidimensional arrays for wireless communications and wa-
termarking applications presented in [14, 15] for which the complexity was unknown.
In addition, we provide open source software to compute the multidimensional linear
complexity of arrays of any dimension, and a web application that can be used to input
or construct arrays of up to three dimensions and calculate their linear complexity.

2 Multidimensional Linear Complexity of Peri-
odic Arrays

∈

∈

i∈Supp(f ) fisi+β = 0 for all β

We consider periodic arrays with entries over a ﬁnite ﬁeld Fq, q = pr, p a prime,
and denote the set of non-negative integers by N0. A sequence S = s0, s1, . . . is a 1-
N if n is the smallest such that si+n = si for all
dimensional array and has period n
N0. A polynomial f (x) = (cid:80)
i∈Supp(f ) fixi deﬁnes a linear recurrence relation on the
i
∈
sequence S if (cid:80)
N0, where Supp(f ) is the set of indices
of the non-zero terms of f . We say that these recurrence polynomials are valid on the
sequence S. The set of all valid polynomials on S, V al(S), forms an ideal in Fq[x], the
ring of polynomials in the variable x and coeﬃcients in Fq. The linear complexity
(S), is the degree of the minimal (monic) generator of V al(S), m(x), which can
of S,
be found using the well-known Berlekamp-Massey algorithm. For the generalization to
multiple dimensions it is important to note that
(S) is also the number of monomials
that are not divisible by the lead monomial of m(x). Since the sequence has period n,
the polynomial xn

1 is in V al(S) and hence
A 2-dimensional inﬁnite array over Fq is a function A : N2

note A(i, j) by aij. We say that A is periodic with period vector (n1, n2)
ai+n1k1,j+n2k2 = ai,j for k1, k2
sented by a subarray of dimensions n2
×
the integer coordinates of the ﬁrst quadrant of the Cartesian plane (Figure 1).

Fq, and we de-
N2 if
0. These arrays can be repre-
n1 and we do so by associating its entries to

N0 and all (i, j)

0 →

(S)

N2

n.

−

≤

L

L

L

∈

∈

∈

2

a0,n2−1 a1,n2−1

A =

a0,1
a0,0

a1,1
a1,0

an1−1,n2−1

.

an1−1,1
an1−1,0

· · ·
. . .

· · ·

Figure 1: Labeling of the entries of an n2

n1 array A.

×

A polynomial f (x, y) = (cid:80)

i,j∈Supp(f ) fi,jxiyj deﬁnes a linear recurrence relation
on the array A if (cid:80)
N0. We say that
i,j∈Supp(f ) fi,jai+β1,j+β2 = 0 for all β1, β2
these polynomials are valid on the array A. The set of all valid polynomials on A,
V al(A), forms an ideal in Fq[x, y], the ring of polynomials in the variables x, y and
coeﬃcients in Fq. This ideal might not be generated by a single polynomial but it
has ﬁnite generating sets. In particular, V al(A) is generated by a Gr¨obner basis with
respect to a monomial ordering
T that can be computed using Sakata’s algorithm or
the Rubio-Sweedler-Taylor algorithm described in [17]. We restricted our description
to 2-dimensional arrays in order to simplify the notation but the previous discussion
applies to higher dimensions.

≤

∈

Let ∆V al(A),≤T

denote the set of exponents of all monomials that do not occur
T . As a result of the Gr¨obner
is also the set of exponents of all monomials that are not
T ,
, denoted
, is the dimension of Fq[x1, . . . , xm]/V al(A) as a Fq-vector space and hence
for the size of this

as leading monomials in V al(A) with respect to
bases properties, ∆V al(A),≤T
divisible by any lead monomial in a Gr¨obner basis for V al(A) with respect to
and hence can be computed from the Gr¨obner basis. The size of ∆V al(A),≤T
∆V al(A),≤T |
|
it is invariant under monomial orderings. We just write
set.

∆V al(A)|
|

≤

≤

Deﬁnition 1 Let A be a multidimensional periodic array and V al(A) be the ideal of
linear recurrence relations valid on the array. Deﬁne the multidimensional linear
(A) of the array A as the size of the delta set of V al(A) with respect
complexity
.
to any monomial order; this is,

L

(A) =

L

∆V al(A)|
|

∆V al(A)|
|

The multidimensional linear complexity

(A) can be obtained by computing a
Gr¨obner basis for V al(A) using the Rubio-Sweedler-Taylor algorithm [17] and deter-
mining

[2].

L

m −

1 are in V al(A) and hence

If the m-dimensional array A has period (n1, . . . , nm), the polynomials xn1

1 −
1, . . . , xnm
nm. With this we can de-
nm),
(A)/ (n1n2
ﬁne the normalized linear complexity of the array as
a measure that allows us to compare the complexity of arrays of diﬀerent dimensions
and periods.

∆V al(A)| ≤
|

· · ·
n(A) =

n1n2

· · ·

L

L

2.1 Other measures for complexity

A well studied deﬁnition for the complexity of a 2-dimensional array with period
(n1, n2) is given by considering the array as an n1-fold multisequence, a sequence S

3

of sequences S1, . . . , Sn1 with period n2. The joint linear complexity of S, J
is the degree of a minimal polynomial that is valid for each Si.

(S),

L

The linear complexity of some of the 2-dimensional arrays presented in [8, 15] was
computed by “unfolding” the array using the Chinese Remainder Theorem in order to
construct a sequence, and then compute the complexity of the resulting sequence using
the Berlekamp-Massey algorithm. This method has the limitation that the periods of
the array must be relatively prime. This constrain is why the complexity of some of
the arrays in those papers could not be computed (see Section 3.2.3).

As we will see in Example 2 on Section 4.1, Deﬁnition 1 is more accurate than
the joint linear complexity deﬁnition because the later might miss relations among the
entries of diﬀerent columns; Deﬁnition 1 can also be used in higher dimensions. Our
method is consistent with the unfolding method [2, 6] but the dimensions of the array
do not need to be relatively prime. Our approach allows for the computation of the
complexity of any multidimensional periodic array, advancing the complexity analysis
of multidimensional arrays.

3 Constructions of multidimensional arrays

In Section 3.2.3 we present families of arrays from [8, 14, 15] for which the linear
complexity could not be computed using the unfolding method. To make this paper
self contained, we start by presenting a survey of the constructions of these arrays. For
the sake of simplicity we only consider 2 and 3 dimensional arrays but the methods
p index
can be extended to higher dimensions. Some of the constructions use the p
table W of a ﬁnite ﬁeld Fp2, with respect to a primitive element α of Fp2. The entries
of W are deﬁned by wi,j = k if αk = iα + j. Since 0 is not a power of α, an
is placed
as the entry w0,0 (Figure 2).

×

∗

3.1 Two dimensional Legendre arrays

A binary 2-dimensional Legendre array F1 with period (p, p) is constructed from
an index table W for the ﬁnite ﬁeld Fp2 by setting f0,0 = 0 and taking all other entries
of W modulo 2 ([3, 14]). Similarly, a ternary 2-dimensional Legendre array F2
with period (p, p) is constructed from W by setting f0,0 = 0 and mapping the even
1 ([14]). For example, the arrays in Figure 2
entries of W to 1 and the odd entries to
show the index table W, the binary (F1) and the ternary (F2) 2-dimensional Legendre
arrays corresponding to F32, with α a primitive root of x2 + 2x + 2.

−

This construction produces solitary Legendre arrays but they will be used by the
composition method as “ﬂoors” to construct families of 3-dimensional arrays (see Sec-
tion 3.2.2).

3.2 The composition method

Multidimensional arrays can be constructed by composing a shift sequence/array with
a column sequence or an array of suitable dimension [14, 19]. For example, a 2-

4

Figure 2: Index table and Legendre arrays corresponding to F32.

dimensional array A with period vector (n1, n2) can be constructed using a shift
sequence S with entries in Zn2 and period n1 to deﬁne circular shifts of columns deﬁned
by a sequence C of period n2. The value si of the shift sequence S determines the
vertical cyclic shift of the column sequence C that will be placed in the positions
(i, ) of the array A: ai,j = cj−si (mod n2). One can think of the value si as the place
where the ﬁrst entry of the column C will be placed (see Figure 3). The entries of the
shift sequence might also contain an extra symbol for an “undetermined shift”, i.e. the
entries can be in Zn2 ∪{∗}
. In this case, the columns corresponding to an undetermined
shift

will consist of a sequence of a constant value.

∗

Figure 3: Array A2 is constructed by composing the logarithmic quadratic shift sequence S
with the Sidelnikov column sequence C and 0, . . . , 0 in the columns corresponding to

.

∗

∗

A 3-dimensional array A with period vector (n1, n2, n3) can be constructed using
a 2-dimensional shift array SA with entries in Zn3 ∪ {∗}
and period vector (n1, n2) to
deﬁne circular shifts of columns given by a column sequence C of period n3 ([14]). The
value si,j of the shift array S determines the vertical cyclic shift of the column sequence
C that will be placed in the positions (i, j, ) of the array A: ai,j,k = ck−si,j (mod n3).
One can think of the value si,j as the “ﬂoor” of A where the ﬁrst entry of the column
C will be placed (see Figure 4). Again, the columns corresponding to an undetermined
shift

will consist of a column sequence of a constant value.

Similarly, a 3-dimensional array A with period vector (n1, n2, n3) can be con-
Zn2 and period n3 to deﬁne
structed by using a shift sequence S with entries in Zn1 ×
circular shifts in both dimensions of “ﬂoors” deﬁned by an array F with period (n1, n2)
([14]). The value sk = (i, j) of the shift sequence S determines the vertical and hori-
zontal cyclic shifts of the ﬂoor array F that will be placed in the k-th “ﬂoor” of the
sk is taken modulo (n1, n2). One can think of
array A: ai,j,k = f(i,j)−sk , where (i, j)
the value sk = (i, j) as the “place” of A where the “ﬁrst” entry f0,0 of the ﬂoor array
F will be placed in “ﬂoor” number k (see Figure 5).
Note that a shift sequence S with entries in Zn1 ×

Zn2 and period n3 can be obtained

−

5

<latexit sha1_base64="9/gPZrrEmIWfbks8SlSjhUj3E2A=">AAAENnicbVPbbtNAEHUaLsXcWnjkZUlSVFAV2aEXXkCRigRICBVEL1I2KuvN2F7FXlvrdZpo2f/iI/gBXnhDvPIJTJwoJC0rjTw6MztzZs84yBNRaM/7UVurX7t+4+b6Lff2nbv37m9sPjgpslJxOOZZkqmzgBWQCAnHWugEznIFLA0SOA2Gh9P46QhUITL5WU9y6KcskiIUnGmEzje+Uw5SgxIycls0gEhIw5RiE2saY7ObpvbryqdhXapjwYfxtKO7S56QA7R9Qih16Qz0EOigPV8GsU+SVHx7EZbvG699sGdJ61kLM320vVn2UnEKcjAn05qGRkXOOJgO0nDfyQGMiWY4J2kZGoTk1LbON5pe26sOuer4c6fpzM/R+ebaJzrIeJniG/CEFUXP93Ldx6Za8ARw1rIAbDpkEfTQlSyFom+qMSzZQmRAwkyhSU0qdPmGYWlRTNIAM1Om4+JybAr+L9Yrdfiib4TMSw2SzxqFZUJ0RqYakoFQwHUyQYdxJZAr4TFTjKOQq12q2jlwu9q7etMVqCKvg8S6Lk3ZEBhuksZyLpVwwbM0ZajFkjjWbGEoY4mIJDFUhLJMiffyi6WhIDRWJeoSg4hiTfxcuzQsdakAaxKqoAA1gkGXEdodV9WInfdJylRORzQNax4bOqrqXIiBjlG+zl6urZ3Ty3S8YLe4NbY9v4/MXpl/a02raQOcs0CFY5ubpm/tlutuLc8/TvRYK2YRLUCnTMippuYQ/zMBagHja07x7dciErrYeY9/kdx5owCGTxe5uIX+5Z276px02v5+e/djp9n9MN/HdeeR03C2Hd85cLrOW+fIOXZ4rVM7q7FaUP9W/1n/Vf89S12rze88dFZO/c9f59lj0g==</latexit>(cid:57)(cid:100)(cid:101)(cid:121)(cid:107)(cid:106)⇤(cid:82)(cid:56)(cid:65)(cid:77)(cid:47)(cid:50)(cid:116)(cid:105)(cid:28)(cid:35)(cid:72)(cid:50)W<latexit sha1_base64="q5BQO1a/Z0KJyCyo6pERfLzy+hU=">AAAESHicbVNLbxMxEN4kBcryauHIxeSBilSi3ailXECRWgGHChVEH1IcBa8z2TXZ9a5sb5rI+A/yD7jwG7ghbng3UZq0WLI8+j7PfDOecZDFTCrP+1mp1jZu3b6zede9d//Bw0db24/PZJoLCqc0jVNxERAJMeNwqpiK4SITQJIghvNgfFjw5xMQkqX8i5pl0E9IyNmIUaIsNNj6hSlwBYLx0G3iAELGNRGCzIyuT/Vekpjva0fduFhFjI6jQtH10XPUfOk37eEjhDB28ZxAfgkt2FXGCsZxmXgvtDp97bUP9g3yriLNXQqPFSUMfLjIrFlQE5kRCrpjc3KPIbSsAFTyqKlxMELvzKDTHGw1vLZXLnTT8BdGw1msk8F29TMepjRP7KvQmEjZ871M9a2yYjQGW30uwSqPSQg9a3KSgOzrsh6DWhYZolEq7OYKleiqhyaJlLMksDcToiJ5nSvA/3G9XI1e9zXjWa6A07nQKI+RSlHRVTRkAqiKZ9YgVDCbK6IREYTa1q6rlLEzoGZdu3zYNahMXgWxcV2ckDEQO1vKhnMxh0uaJgmxDVnpkNEtS6UkZiFHGrMRzxPkvflq8IghHIk8BhQBCyOF/Ey5eJSrXICNibAACWICwy5BuDstoyGz0InzhBcl6rrRzzSelHEu2VBFtn2d/UwZs0gvVdEyu6XX1PT8vs3srb4adFxWG9g6pe1wZDLd8I1puW5rtf5prKZKEGNRCSohjBc91Yf25zEQS9i+ZoHvHLGQKbl7bP8V330vAMYvlnftFPrXZ+6mcdZp+6/ae586je7HxTxuOk+durPj+M6B03U+OCfOqUMrR5VvFVlRtR+137U/tb/zq9XKwueJs7Y2qv8Ai/FnKg==</latexit>(cid:82) 1(cid:82)(cid:82)(cid:82) 1(cid:121) 1 1(cid:71)(cid:50)(cid:59)(cid:50)(cid:77)(cid:47)(cid:96)(cid:50)(cid:28)(cid:96)(cid:96)(cid:28)(cid:118)F2<latexit sha1_base64="6xLJ7dePl90KPP1/wFujRTIXlSw=">AAAEO3icbVNbb9MwFE5XLiPcNnjkxfSChjRVSbUxXkCVhoCHCQ3ELlJdFcc9Saw6TuQ4XSvjn8aP4JFn3hCvvOOkpWs3LEU5+j77fN/xOQ4yznLleT9qG/UbN2/d3rzj3r13/8HDre1Hp3laSAonNOWpPA9IDpwJOFFMcTjPJJAk4HAWjA9L/mwCMmep+KxmGQwSEgkWMkqUhYZb3zEFoUAyEbktHEDEhCZSkpnRjaneSxLzde3XMC5WMaPjuFR0PfQM+fbzEEIYu/gSnTOrqFXivHLcj6zAQHudg32D/qXw53tXkmMQo4WZVklN8oxQ0F1rwz2CyLISUMWjlsZBiN6aod8abjW9jlctdD3wF0HTWazj4fbGJzxKaZHYi6Cc5Hnf9zI1sMqKUQ624CIHqzwmEfRtKEgC+UBXlRjUtsgIham0n1CoQldPaJLk+SwJ7M6EqDi/ypXg/7h+ocKXA81EVigQdC4UFhypFJWNRCMmgSo+swGhklmviMZEEmq7ua5S5c6AmnXt6mLXoMq8CrhxXZyQMRA7Tsqmc7GAC5omCbENWemQ0W1LpYSzSCCNWSiKBHmvvhgcMoRjWXBAMbAoVsjPlIvDQhUSbE6EJeQgJzDqEYR70yobMgsdXiSiLFE3jH6q8aTKc8FGKrbt6+5nypiFvVTFS3fLU1PT9wfW2Wt9Odu4qjawdea2w7HJdNM3pu267dX6p1xNlSTGojmohDBR9lQf2sfGQC5he5slvvOGRUzlu0f2KYnddxJg/Hy5106hf3Xmrgen3Y7/orP3sdvsfVjM46bzxGk4O47vHDg9571z7Jw4tHZQG9TCWlT/Vv9Z/1X/Pd+6UVuceeysrfqfv/BrZa4=</latexit>(cid:121)(cid:82)(cid:121)(cid:121)(cid:121)(cid:82)(cid:121)(cid:82)(cid:82)(cid:71)(cid:50)(cid:59)(cid:50)(cid:77)(cid:47)(cid:96)(cid:50)(cid:28)(cid:96)(cid:96)(cid:28)(cid:118)F1<latexit sha1_base64="N/DTtul/ksp89mnWJK381wIDm6o=">AAAD+3icdVNNa9wwEPVm+5G6H0naQw+9qBsWUgiLHZKml8BCCs2hhxSaD1gtqawd22Il2UjjJIvRr+mt9Np/0T/Qf1PZWdJs0ggMjzfjmad5o6SUwmIU/eksdR88fPR4+Un49NnzFyuray+PbVEZDke8kIU5TZgFKTQcoUAJp6UBphIJJ8l0v4mfnIOxotBfcVbCWLFMi1Rwhp46W/1d0yQl+47sEZpAJnTNjGEzV/d4z4UUc8GneVO8T7EoTSUhjAmlhLbkvTi6B9+XQzlI2d5mlPn24zoa7O64hYx/UkifJgVioVo5FPRkLvpsdT0aRO0hd0E8B+vB/ByerS29ppOCVwo0csmsHcVRiWNfDgWX4AdQWSgZn7IMRh5qpsCO61aoI33PTEhaGP9pJC1784+aKWtnKvGZimFub8ca8n+xUYXph3EtdFkhaH7VKK0kwYI0HpKJMMBRzjxg3AivlfCcGcbRO73Qpa1dAneLvdtpLVCteEykC0Oq2BSY3yT05UKq4YIXSjE/5RseuLrvQwWTItOkpiLVlSLR3jdHU+Eta5whOYgsRxKXGNK0wsqAr0moAQvmHCZDRujw8spRN+8jK6WbK9Y9V7+t6Xlb50JMMPf2be2U6NxcXoG5Vxf2b17iUuIlGuY8awEVE7oxpt73j0WAuab9SBp+46PIBNrNz/4p6M1PBmD67jrXr1J8e3HuguOtQfx+sP1le314MF+q5eBN0As2gjjYDYbBQXAYHAW8s9U57bBO0nXd790f3Z9XqUud+T+vgoXT/fUX2pxONA==</latexit>C=11100100<latexit sha1_base64="hauzAbfRpisTCuX34pwWTrDJI54=">AAAFRXicjVTLbtQwFE3DACU82oIQCzZmqqIiVaOkaimbSoOKRBcsikQf0nhUHM9NYo3jRI7TdpT6Z9jCf/ANfAQ7xBacNKqS6WjAkZWr+zjn2L62n3KWKdf9sWDf6ty+c3fxnnP/wcNHS8srj4+yJJcUDmnCE3nikww4E3ComOJwkkogsc/h2B/vlfHjM5AZS8QnNUlhGJNQsIBRoozrdMV+WmA/QG/16eYu9iFkoiBSkokuuvSy9XU1crCKGB1HJZnjopfIM9Otp9f6I4wdfJWIKXBeKR2EBnlYuL2dbX1dN3s26r2p4Gy8toSp8v/SOc3jzeWap6QBOl9wk2o+nTcNOkut96+1z0hsnCgGMapP/3R51e251UA3Da82Vq16HJhGeoZHCc1jEIpykmUDz03V0MApRjloB+cZpISOSQgDYwoSQzYsqrVqtGY8IxQk0kyhUOVtVhQkzrJJ7JvMmKgom46VzlmxQa6CN8OCiTRXIOgVUZBzpBJU3gY0YhKo4hNjECqZ0YpoRCShytyZFkuFnQLVbe5qt1quSrzyuXYcHJMxEHMnlYFzsIBzmsQxMbvc2HZdrJlQQjgLBSowC0QeI3f3s8YBQziSOQcUAQsjhbxUOTjIVS7BYCIsIQN5BqM+Qbh/UaEhXfPwPBblEouuLl4U+KzCOWcjFZnj29xOlda1vERFRp2z1lzEBVcXShJtvBmomDBRHkyxZ54dBvLabbak9K+/YyFT2cYH86iIjfcSYPzqOte0kjfdODeNo82e97q39XFrtb9fN9Wi9dzqWuuWZ+1YfWvfOrAOLWpf2l/sr/a3zvfOz86vzu+rVHuhrnlitUbnz1/+wJZ3</latexit>A2=0100101000000000100001011100101010001000000011010100011111000111<latexit sha1_base64="DKflePXk6+EVKCeBo/1DO9LFFf8=">AAADnnicbVJLbxMxEHaaFsryauHAgYtJVVRQVSV9waVSpCLoAUQR9CHVUfA6s1krtndlz7aNFv9MDvwWLni3q6ppsTXS6JvxN+NvJs6VdNjt/mnNtecX7t1ffBA9fPT4ydOl5WfHLiusgCORqcyextyBkgaOUKKC09wC17GCk3iyX8VPzsE6mZkfOM1hoPnYyEQKjgEaLmUlixP63dM9ymIYS1Nya/nUlx3xa+Z2fMQwlWKSVqUiuktf081gbxvbCbbVYFuMzSQzMKOGd7i00t3o1ofedXqNs0KaczhcnnvBRpkoNBgUijt31uvmOAh0KIWC0FXhIOdiwsdwFlzDNbhBWSvj6WpARjTJbDCDtEZvvii5dm6q45CpOabudqwC/xc7KzB5PyilyQsEI64KJYWimNFKZjqSFgSqaXC4sDL0SkXKLRcYhjFTpebOQfjZ2rVaM1DdPMbKRxHTfAI8DBsDXcQMXIhMax5UviG7L1dDKONKjg0tmUxMoWl376dniaQstYUCmoIcp0h7OUYsKbCwEDgps+DAnsOozynrX9Zs1Dd1VKFN9cWy48tXJTuveS7kCNMwvs2dHL1v2sswDd1Fqzc/canwEi33AXWAmktTDabcD/sswV7DQZIKX/sgxxLd+uewrWb9kwWYvLnODavUu704d53jzY3e7sb2t+2V/kGzVIvkJemQNdIj70ifHJBDckQE+U3+tuZbC23a/tj+0v56lTrXat48JzOnffoP1SgqOA==</latexit>S=62⇤⇤5323from a shift array SA of dimensions n1
sk = (i, j) if sai,j = k.

×

n2 and entries in Zn3 all diﬀerent, by assigning

Figure 4: Array A3 constructed composing the shift array from the index table, SA = W,
with the Sidelnikov column C.

Figure 5: Array A5 constructed composing vector shift sequence S with ternary Legendre
ﬂoor array F2. The vector shift sequence S is obtained from the array W in Figure 2.

3.2.1 Shift sequences/arrays

Some of the shift sequences that can be used to construct 2-dimensional arrays are:
exponential quadratic, logarithmic quadratic, and Moreno-Maric sequences.

To deﬁne an exponential quadratic shift sequence over Zp with period p

consider a quadratic polynomial f (x) = ax2 + bx + c
tive element α in Zp, and take the values of f in p

1,
= 0, a primi-
∈
1 consecutive powers of α:

Zp[x], a

−

−

6

(cid:54)
,

S = f (cid:0)α0(cid:1) , f (cid:0)α1(cid:1) , . . . , f (cid:0)αp−2(cid:1) ([15]). For example, for α = 3
polynomial f (x) = x2 + x + 1
S = f (cid:0)α0(cid:1) , . . . , f (cid:0)α5(cid:1) = 3, 6, 0, 1, 0, 3.

Z7, the quadratic
Z7[x] gives the exponential quadratic sequence

∈

∈

−

−

One can also use quadratic polynomials f (x) over Fq to deﬁne shift sequences
1 but, since we want the sequence to have entries in Zn, we map
of period q
the values of f (x) to Zn by considering the elements of Fq
∗ as powers of a primi-
tive element α of Fq and taking their logarithm. The logarithmic quadratic shift
sequence over Fq with period q
1 is deﬁned by writing the non-zero values in
(cid:0)αj(cid:1)
f (cid:0)α0(cid:1) , f (cid:0)α1(cid:1) , . . . , f (cid:0)αq−2(cid:1) as f (cid:0)αi(cid:1) = αj, and letting si = logα
= j.
([14]). For example, the quadratic polynomial
f (x) = x2 + x + 2α over F32, where α2 = α + 1, has values f (cid:0)α0(cid:1) , . . . , f (cid:0)α7(cid:1)
= α3, α6, α2, 0, 0, α5, α3, α2 and gives the logarithmic quadratic shift sequence S =
6, 2,

, 5, 3, 2, 3 used in array A2 of Figure 3.

If f (cid:0)αi(cid:1) = 0, set si =

∗
Under certain conditions on α, the composition f n(x) of a rational function f (x) =
, produces a cycle of length p + 1 :
, [6, 13, 15, 18]1. The Moreno-Maric shift
. For
is the Moreno-Maric shift sequence over Z5 with f (x) =
is always at the end of S, one can remove it to obtain a shortened

α/(x + 1) over Fp with itself, evaluated in Fp
0, f 1(0), f 2(0),
∞
sequence over Zp with period p + 1 is S = 0, f 1(0) = α, . . . , f p−1(0) =
example, S = 0, 3, 2, 1,
3/(x+1). Since the
Moreno-Maric shift sequence of length p.

(cid:0)f (cid:0)αi(cid:1)(cid:1) = logα

, f p−1(0), f p(0) =

∪ {∞}

· · ·

1,

1,

−

−

∗

∗

∗

∗

∗

, f q−1(0) = αiq−1, f q(0) =

A Moreno-Maric shift sequence over Fq can be constructed by writing the
nonzero values of the cycle as powers of the primitive element, 0, f 1(0) = αi1, f 2(0) =
αi2,
and letting S =

, iq−1,
· · ·
∞
To construct 3-dimensional arrays A with period vector (p, p, p2

.
∗
1) one can use
−
an index table W for the ﬁnite ﬁeld Fp2, which has entries in Zp2−1 and w0,0 =
,
∗
as shift array. The column placed in position (0, 0), that is, all entries a0,0,k, will be a
sequence of a constant value (see Figure 4).

, i1, i2,

· · ·

∗

Other 3-dimensional arrays with period vector (p, p, p2

1) can be constructed using
a vector shift sequence S, where sk = (i, j) and αk = iα + j, obtained from an index
table W for the ﬁnite ﬁeld Fp2. For example, the index table W in Figure 2 produces
the vector shift sequence S = (0, 1), (1, 0), (1, 1), (2, 1), (0, 2), (2, 0), (2, 2), (1, 2) used in
the construction of array A5 in Figure 5.

−

3.2.2 Column sequences and “ﬂoor” arrays

A good option for column sequences of period p > 2 are Legendre column sequences
with respect to Zp, which are deﬁned as ci = 0 if i = 0 or i is a nonsquare mod p,
and ci = 1 otherwise. For example, C = 0, 1, 1, 0, 1, 0, 0 is the Legendre sequence with
respect to Z7. Sidelnikov column sequences with respect to Fq, q odd, are deﬁned
as ci = 1 if αi + 1 is a nonsquare in Fq, where α is a primitive element, and ci = 0
1, where q is odd
otherwise. These sequences can be used as columns of length q

−

1Although the conditions cited in these papers are not correct (for example, consider x2 + x + 6

F11[x]
and note that the sequence obtained does not have length 12), it is true that sequences of length q + 1 can
be constructed using rational functions over Fq.

∈

7

([14]). For example, C = 0, 0, 1, 0, 0, 1, 1, 1 is the Sidelnikov column sequence with
respect to F32 and α2 = α + 1 used in array A2 of Figure 3.

The 2-dimensional Legendre arrays obtained from the index table W for a
ﬁnite ﬁeld Fp2 (such as the ones in Figure 2) can be used as ﬂoor arrays with period
vector (p, p) by letting w0,0 = 0 ([14]). With this type of ﬂoor arrays one can construct
3-dimensional arrays as it is done in the example in Figure 5.

3.2.3 Constructions for which the complexity was unknown

×

The unfolding method was used in [14, 15] to compute the multidimensional linear
complexity of several constructions. However, this method cannot be used to compute
the complexity of some arrays described in the same papers. For example, it cannot be
p such as F1: 2-dimensional binary Legendre arrays,
used for arrays of dimensions p
F2: 2-dimensional ternary Legendre arrays (Figure 2), or A1: arrays obtained from
shortened Moreno-Maric shift sequences composed with Legendre column sequences.
The unfolding method can neither be used to compute the linear complexity of arrays
of dimensions (q
1) such as A2: arrays obtained from logarithmic quadratic
shift sequences composed with Sidelnikov column sequences (Figure 3).
p
The linear complexity of 3-dimensional arrays with dimensions p

1) such
as A3: arrays obtained by composing index table shift arrays with a Sidelnikov column
sequences (Figure 4), A4: arrays obtained from vector shift sequences composed with
2-dimensional binary Legendre ﬂoor arrays or A5: arrays constructed by composing
vector shift sequences with 2-dimensional ternary Legendre shift arrays (Figure 5)
cannot be computed using the unfolding method.

(p2

1)

(q

−

−

×

−

×

×

4 Results on complexity

4.1 Theoretical results

The following result generalizes a bound for the complexity of arrays presented as The-
orem 1 in [2] to include shift sequences with unknown values. This is, shift sequences
with elements in Zn2 ∪ {∗}

. Deﬁne array A by
(cid:26) cj−si
0,

ai,j =

(mod n2), si

=
si =

∗
∗

Theorem 1 Let S be a shift sequence over Zn2 ∪ {∗}
with period n1, C be a column
sequence over Fq with period n2, and A be the 2-dimensional array constructed with
consists of 0’s. Then,
the composition method where the column corresponding to

n(A)

L

n(C), where

≤ L

) is the normalized linear complexity.
n(
·

L

∗

Proof:
= m(y), and γ = (γ1, γ2)

Let m(y) be the minimal polynomial of C, m(cid:48)(x, y) = (cid:80)
If sγ1 (cid:54)

, then, since m

N2
0.

=

∈

∈

∗

0,jyj
j∈Supp(m) m(cid:48)
V al(C) implies that

8

(cid:54)
(cid:80)

j∈Supp(m) mjcj+β = 0 for all β

N0, we have

∈

(cid:88)

m(cid:48)

0,ja(0,j)+γ =

(cid:88)

mjaγ1,j+γ2

(0,j)∈Supp(m(cid:48))

j∈Supp(m)

(cid:88)

=

j∈Supp(m)

mjcj+γ2−sγ1 =

(cid:88)

mjcj+β = 0,

j∈Supp(m)

where β = γ2
If sγ1 =

∗

−
, then aγ1,j+γ2 = 0, and

sγ1, and the indices of C are considered modulo n2.

(cid:88)

m(cid:48)

0,ja(0,j)+γ =

(cid:88)

mjaγ1,j+γ2 = 0.

(0,j)∈Supp(m(cid:48))

j∈Supp(m)

0, (cid:80)
N2

∈

(0,j)∈Supp(m(cid:48)) m(cid:48)

Hence, for any γ
V al(A).
This implies that ∆V al(A) cannot contain exponents of monomials that are multiples
of ydeg(m). Since S has period n1, xn1
V al(A) and ∆V al(A) cannot contain ex-
1
ponents of monomials that are multiples of xn1. Therefore,
n(A) =
n1 deg(m)/(n1n2) =

0,ja(0,j)+γ = 0 and m(cid:48)(x, y) = m(y)

(A)/(n1n2)

n(C).

≤
(cid:3)

−

L

L

∈

∈

L

Remark 1 The above proposition is also true for 3-dimensional arrays.

The selection of the values in the column corresponding to the undeﬁned shift (

aﬀects the complexity of the array as we can see in the next example.

)

∗

Example 1 Consider the 5
shift sequence over Z5, S = 0, 3, 2, 1, 4,
0, 0, 1, 1, 0. If the column corresponding to the undetermined shift
a column of constant 1’s, then

6 array A constructed by composing the Moreno-Maric
with the Legendre column sequence C =
is replaced with
In this case

n(A) = 13/15, while

n(C) = 4/5.

×

∗

∗

L

L

n(A) (cid:2)

L

n(C).

L

The following reﬁnement for the bound in Theorem 1 for the cases where y
1
divides the minimal polynomial of the sequence C and S is a shift sequence over Zn2,
was proved in [2].

−

Proposition 1 Let S be a shift sequence over Zn2 with period n1, C be a column
sequence over Fq with period n2 and minimal polynomial m(y), and A be the 2-
dimensional array constructed with the composition method.
1 divides m(y),
then

) is the normalized linear complexity.

, where

If y

−

n(A)

n(C)

n1−1
n1n2

−

n(
·

L

L

≤ L

4.1.1 Comparison of the linear complexity of an array A with the
joint linear complexity of A as a multisequence

As it was mentioned before, our deﬁnition of multidimensional linear complexity is
more accurate than the joint linear complexity for multisequences.

9

Proposition 2 Let A be a periodic 2-dimensional array with period (n1, n2). Then,
n(A), is smaller or equal than the normalized
the normalized linear complexity of A,
joint linear complexity of A considered as a multisequence, J
J

n(A). This is,

n(A)

≤

L

L

L

n(A).

L

Proof:
Then, m(y) is valid for each of the columns ak,0, ak,1, . . . , ak,n2−1, 0
(cid:80)

Let m(y) be the joint minimal polynomial of an n1-fold multisequence A.
k < n1, and
N0, where j + γ2 is
i,jxiyj,

j∈Supp(m) mjak,j+γ2 = 0 for each 0
≤
considered modulo n2. Let γ = (γ1, γ2)
where m(cid:48)

0 and m(cid:48)(x, y) = (cid:80)
N2

k < n1 and all γ2

j∈Supp(m) m(cid:48)

i < n1. Then,

i,j = mj for a ﬁxed 0

≤

∈

∈

≤

(cid:88)

m(cid:48)

i,ja(i,j)+γ =

n1−1
(cid:88)

(cid:88)

mjai+γ1,j+γ2 =

(i,j)∈Supp(m(cid:48))

i=0

j∈Supp(m)

n1−1
(cid:88)

i=0

0 = 0,

since k = i + γ1 is ﬁxed in the inner sum. This implies m(cid:48)(x, y)
V al(A), and
∆V al(A) cannot contain exponents of monomials that are multiples of xiydeg(m) for
V al(A)
any 0
and ∆V al(A) cannot contain exponents of monomials that are multiples of xn1. Hence,
(cid:3)
(A) =
≤
L

i < n1. Since A has period n1 in its ﬁrst coordinate, xn1

∆V al(A)| ≤

deg(m)/n2 = J

n1 deg(m) and

n(A).

n(A)

≤

−

L

L

∈

∈

1

|

n(A), is strictly smaller than J

There are examples of arrays A for which

n(A).
When an array A constructed with columns that are shifts of the same column sequence
C is considered as a multisequence, the minimal polynomial of C is valid for all the
columns. Hence, the normalized joint linear complexity of A is equal to the normalized
linear complexity of C, J
n(A) = J
1 divides
L
n(A). The joint linear complexity
the minimal polynomial of C one has
of A misses some relations among entries of diﬀerent columns.

n(C). From Proposition 1, when y

n(A) < J

−

L

L

L

L

L

Example 2 Consider the 7
6 array A constructed by composing the exponential
quadratic shift sequence S = 3, 6, 0, 1, 0, 3 with the Legendre column sequence with
respect to Z7, C = 0, 1, 1, 0, 1, 0, 0. Deﬁnition 1 gives normalized linear complexity
n(A) = 19/42. If A is considered as a multisequence, the normalized joint linear

×

L
complexity is J

n(A) = 4/7 which is larger than

L

n(A).

L

4.2 Computational results and conjectures

Our computational results focus on arrays for which the linear complexity could not
be computed with the unfolding method in [8, 15] because the periods of the arrays
were not relatively prime. We computed the complexity of 2-dimensional p
p arrays
from constructions F1, F2 and 3-dimensional p
1) arrays from construc-
tions A3, A4, A5. The complexity was computed using a C++ implementation [20]
of the RST algorithm [17]. All the examples satisfy the conjectured formulas for the
normalized linear complexity in Table 1.

(p2

×

×

−

×

p

10

Table 1: Conjectured formulas for the normalized linear complexity.

n(

L

) Veriﬁed for
·

Construction Conjectured
1
2p2
1
p2

1
2 −
1

F1

F2

A3

A4

A5

−
n(C)[1
1
2p2 =
1
p2 =

L
1
2 −
1

−

−

1
p2 ]
n(F1)

L
n(F2)

L

251

p

≤
3 < p

109

≤
19

≤

p

p

≤
3 < p

23

17

≤

Recall that construction A3 uses Sidelnikov column sequences C, A4 uses F1 as
ﬂoor array, and A5 uses F2 as ﬂoor array. As seen in Table 1, both A4 and A5 have
the same normalized linear complexity as their corresponding ﬂoor array. In the case
of A3, one can see that, as the size of the array increases (size depends on p), the value

n(A3) approaches the value of

n(C).

L

L

We do not have a conjecture of a formula for the complexity of arrays from con-
structions A1, A2. However, these arrays have the same behaviour of arrays from
constructions A3, A4, A5, in the sense that their complexities approach the complexity
of the column/ﬂoor sequence/array. This can be seen in Figure 6, where the graphs
show that the diﬀerence of the normalized linear complexity of shift arrays composed
with column sequences and the normalized linear complexity of the column approaches
0 as the size of the array increases.

n(A) as a function of the
Figure 6: Diﬀerence of normalized linear complexities
log of the size of A, log(n1n2), where each dot represents an array A with period vector
(n1, n2).

n(C)

− L

L

Based on the above results and the results from [8, 15], we have the following general

conjecture.

Conjecture 1 If A is an array constructed by composing a shift sequence/array with
a column sequence C or ﬂoor array F of suitable dimensions, then as the size of A
increases,
n(C) or
n(A) approaches the normalized linear complexity of the column
L
of the ﬂoor

L

n(F).

L

11

We validated Conjecture 1 by computing the normalized linear complexity of arrays
constructed by composing a randomly generated shift sequence with a randomly gen-
erated binary column sequence, each of period n, for n a multiple of 5, 5
100.
We sampled 25 arrays for each n and computed the normalized linear complexity of
each corresponding random column sequence. In Figure 7 we plotted the diﬀerence
between the normalized linear complexity of the random column C and the normalized
linear complexity of the array A. We can see that, once again, as the size of the ar-
rays increase, the diﬀerence of the normalized complexities approaches zero, validating
Conjecture 1.

≤

≤

n

n(A) as a function of the
Figure 7: Diﬀerence of normalized linear complexities
log of the size of A, log(n2), where each dot represents an array A with period vector (n, n).
Here the shift and column sequences are randomly generated.

n(C)

− L

L

5 Web-based Linear Complexity Calculator

We have made available, as open source, the software that we developed to obtain the
results in this paper (https://github.com/jazieltorres/RST_Complexity). The
program is written in C++ and uses the Rubio-Sweedler-Taylor algorithm for com-
puting a Gr¨obner basis for ideal of linear recurrence relations on a periodic array [17]
and obtain the multidimensional linear complexity of the array [2]. It supports the
construction of arrays with the methods mentioned in this paper and the computation
of the linear complexity of arrays up to 11 dimensions.

In order to facilitate the use of our program, we designed a public web interface
to the back-end software that performs such computations (https://labemmy.ccom.
uprrp.edu). Hence, it allows for many of the features that the back-end software oﬀers,
such as the construction of arrays using the methods mentioned in this paper. Further-
more, it provides additional functionalities such as the generation and computation of
random sequences or arrays, as well as allowing for user deﬁned sequences and arrays.
Currently, the web application supports the linear complexity computation of arrays
for dimensions 1, 2 and 3. Diﬀerent methods for specifying the input array are available
for each dimension. Once an input method is selected and its required information
submitted, a new page is rendered containing both the input information supplied

12

Figure 8: Examples of input and output pages of the web application for the construction
of arrays and computation of their linear complexity.

and the output, the latter displaying results such as the linear and normalized linear
complexities and a Gr¨obner basis for the ideal of valid polynomials on the array.

The online application supports computations for 1 dimensional arrays (sequences)
of up to 1000 entries, 2 dimensional arrays up to 625 entries and 3 dimensional arrays
up 550 entries. For larger arrays the user can use the open source software mentioned
above, or download from the application a virtual machine with all the needed software.

6 Conclusions

We reviewed deﬁnitions and methods related to the multidimensional linear complexity
of periodic arrays. Constructions of arrays, especially some for which the complexity
was unknown, were surveyed. Deﬁnitions of linear complexities were compared and
our deﬁnition was proved to be more accurate or general than previous deﬁnitions. A
generalization for a bound for the linear complexity was proved. Computational results
on the complexity of several constructions for which the complexity was unknown were
summarized and conjectures for formulas for their exact value were presented. Our
calculations also led us to conjecture that the normalized linear complexity of arrays
constructed by composing a shift sequence/array with a suitable column sequence or
ﬂoor array approaches the normalized linear complexity of the column sequence or ﬂoor
array.

Acknowledgment

This research was funded by the “Fondo Institucional Para la Investigaci´on (FIPI)”
from the University of Puerto Rico, R´ıo Piedras.

13

References

[1] TL Alderson. n-dimensional optical orthogonal codes, bounds and optimal con-
structions. Applicable Algebra in Engineering, Communication and Computing,
30(5):373–386, 2019.

[2] Rafael Arce-Nazario, Francis Castro, Domingo Gomez-Perez, Oscar Moreno, Jos´e
Ortiz-Ubarri, Ivelisse Rubio, and Andrew Tirkel. Multidimensional linear com-
plexity analysis of periodic arrays. Applicable Algebra in Engineering, Communi-
cation and Computing, 31(1):43–63, 2020.

[3] Leopold B¨omer, Markus Antweiler, and Hans Schotten. Quadratic residue arrays.

Frequenz, 47(7-8):190–196, 1993.

[4] Cunsheng Ding, Tor Helleseth, and Weijuan Shan. On the linear complexity of

Legendre sequences. IEEE Trans. Inform. Theory, 44(3):1276–1278, 1998.

[5] Domingo G´omez-P´erez, Ana I G´omez, and Andrew Tirkel. Large families of se-
quences for CDMA, frequency hopping, and UWB. Cryptography and Communi-
cations, pages 1–15, 2019.

[6] Domingo Gomez-Perez, Ana-Isabel Gomez, and Andrew Tirkel. Arrays composed
from the extended rational cycle. Advances in Mathematics of Communications,
11(2):313, 2017.

[7] Domingo Gomez-Perez, Tom Hoholdt, Oscar Moreno, and Ivelisse Rubio. Lin-
ear complexity for multidimensional arrays - a numerical invariant. In Informa-
tion Theory (ISIT), 2015 IEEE International Symposium on Information Theory,
pages 2697–2701, June 2015.

[8] Anatolii Leukhin, Oscar Moreno, and Andrew Tirkel. Secure CDMA and fre-
quency hop sequences. In Wireless Communication Systems (ISWCS 2013), Pro-
ceedings of the Tenth International Symposium on, pages 1–5. VDE, 2013.

[9] F Jessie MacWilliams and Neil JA Sloane. Pseudo-random sequences and arrays.

Proceedings of the IEEE, 64(12):1715–1729, 1976.

[10] James L. Massey. Shift-register synthesis and BCH decoding. IEEE Trans. Infor-

mation Theory, IT-15:122–127, 1969.

[11] Wilfried Meidl and Harald Niederreiter. The expected value of the joint linear
complexity of periodic multisequences. Journal of Complexity, 19(1):61–72, 2003.

[12] Oscar Moreno, Tom Høholdt, and Ivelisse Rubio. Security of multidimensional ar-
rays. US Provisional Patent Applications, 62/131616 (March, 2015) and 62/174973
(June, 2015).

[13] Oscar Moreno and Svetislav V Maric. A new family of frequency-hop codes. IEEE

Transactions on Communications, 48(8):1241–1244, 2000.

[14] Oscar Moreno and Andrew Tirkel. Multi-dimensional arrays for watermarking. In
Information Theory Proceedings (ISIT), 2011 IEEE International Symposium on,
pages 2691–2695. IEEE, 2011.

14

[15] Oscar Moreno and Andrew Tirkel. New optimal low correlation sequences for wire-
less communications. In Sequences and their applications—SETA 2012, volume
7280 of Lecture Notes in Comput. Sci., pages 212–223. Springer, 2012.

[16] Jos´e Ortiz-Ubarri.

three-dimensional wave-
length/space/time optical orthogonal codes for OCDMA systems. Cryptography
and Communications, pages 1–10, 2020.

New asymptotically optimal

[17] Ivelisse M Rubio, Moss Sweedler, and Chris Heegard. Finding a Gr¨obner basis
for the ideal of recurrence relations on m-dimensional periodic arrays. In Con-
temporary Developments in Finite Fields and Applications, pages 296–320. World
Scientiﬁc, 2016.

[18] Andrew Tirkel and Tom Hall. New matrices with good auto and cross-correlation.
IEICE Transactions on Fundamentals of Electronics, Communications and Com-
puter Sciences, 89(9):2315–2321, 2006.

[19] Andrew Z. Tirkel, Charles F. Osborne, and Tom H. Hall.

Steganography-
applications of coding theory. In IEEE Information Theory Workshop, Svalbard,
Norway, pages 57–59, 1997.

[20] Jaziel Torres. RST Complexity.

https://github.com/jazieltorres/RST_

Complexity.git, 2019.

[21] Jianguo Yao, Rui Jiang, and Wei Heng. Algebraic construction of optimal fre-
quency hopping patterns based on Welch Costas arrays. IEEE Transactions on
Vehicular Technology, 69(2):1841–1854, 2019.

15

