A Global Operational Readiness Review 
Process: Improving Cloud Availability 

James J. Cusick, PMP 
IEEE Computer Society Member 
Osaka, Japan 
j<dot>cusick<at>computer<dot>org 

Abstract – The ORR (Operational Readiness Review) is a long 
standing  practice  to  help  insure  application  or  system  readiness 
and improved Availability. In this paper the ORR is defined and 
recent examples of its use from  Cloud  Computing environments 
are  compared.  An  emphasis  on  ORRs  used  within  DevOps 
environments  is  also  provided.  A  detailed  presentation  of  a 
specific  and  custom  ORR  implementation  for  a  large  global  IT 
organization  is  shared.  This  includes  the  process  development 
approach,  key  components  of  the  ORR  checklist,  automation 
support provided, and a unique Executive dashboard solution to 
visualize status on in-flight releases. Challenges and benefits from 
this  ORR  implementation  are  provided  as  well  as  a  detailed 
comparison  with  the  Google  Launch  checklist  and  its  associated 
PRR/ORR.  Finally,  suggestions  for  further 
improvements, 
automation,  and  usage  of  the  ORR  in  large-scale  industrial 
settings based on this real-world experience are elaborated. 

Index  Terms  –  Operational  Readiness  Review,  ORR,  IT 
Services,  IT  Operations,  ITIL,  Process  Engineering,  Reliability, 
Availability, 
Software  Architecture,  Cloud  Computing, 
Networking,  Site  Reliability  Engineering,  DevOps,  Agile 
Methods,  Quality, Defect Prevention, Release Management, Risk 
Management,  Data  Visualization,  Organizational  Change 
Management. 

I.  INTRODUCTION 

One  can  design-in  quality,  attempt  to  test-in  quality,  or  fix 
applications  after  the  fact.  There  is  little  middle  ground. 
However,  one  useful  method  which  is  often  overlooked  in 
development  methodologies  is  the  Operational  Readiness 
Review (ORR). This approach calls for stringent reviews of a 
solution prior to launch. The goal is to achieve both a smooth 
launch  and  a  low  defect  rate  in  the  operational  environment. 
Many IT Operations teams in the industry do employ an ORR 
process of one type or another but this can be expanded [1]. 

This  paper  discusses  the  background of  the  ORR,  its  origins, 
recent developments in Site Reliability Engineering practices, 
and  current  approaches.  In  addition,  multiple  generations  of 
the development and deployment of actual ORR processes are 
discussed.  These  experiences  became  the  predecessors  for    a 
newly created Global ORR process in a major commercial IT 
organization  documented  here.  The  development  of  this 
Global  ORR  process,  its  universal  adoption,  management 
dashboards,  and  reduced  operational  error  rates  aided  in  the 

interest 

realization  of  smoother  pos-production  experiences.  Of 
particular 
implementation 
represents  a  truly  Global  approach  both  geographically  and 
organizationally.  Additionally,  this  process  implemented  an 
automated data collection and Global dashboarding process. 

the  fact 

that 

this 

is 

II.  ORR DESCRIBED 

The ORR approach has a long history and has been known by 
different names. The development of the specific Global ORR 
process  being  presented  here  emerged  from  earlier  processes 
[2].  These  precursor  approaches  applied  an  architecture 
review, a non-binding readiness review early in the lifecycle, 
and  a  binding  final  readiness  review.  The  PRE  (Production 
Readiness  Exploration)  and  the  PRR  (Production  Readiness 
Review)  were  used  on  dozens  of  application  releases  and 
produced strong quality protection and improvement results. 

Based on the success of these processes a new version of the 
approach  was  recently  developed  which  was  called  the  ORR 
(Operations  Readiness  Review)  as  this  is  the  standard  ITIL 
nomenclature  for  this  process  component [4].    The  definition 
of the ORR can be summarized as: 

construction, 

“… a process of preparing the custodians of an asset 
supporting 
under 
organization, 
of 
point 
that, 
delivery/handover,  they  are  fully  ready  to  assume 
ownership of the asset.” [5] 

their 

such 

and 

the 

at 

Figure 1 - Essential ORR Process 
Framework [3] 

1 

 
 
  
 
 
 
 
 
 
 
 
 
 
 
The  essential  form  of  the  ORR  is  shown  in  Figure  1.  In  the 
process  a  checklist  (partly  automated)  is  used  during  both 
development  and  service  integration/deployment  preparation 
to  ensure  and  prepare  technologies  for  usage.  If  they  do  not 
pass 
further  mitigation  and  adjustment. 
Importantly, these checklists are always being improved as the 
technologies  themselves  are  always  changing  and  the  team’s 
knowledge  about  them  is  always  improving.  Further  the 
possible failure scenarios may expand or change.  

require 

they 

Where  there  are  limited  processes  and  procedures  supporting 
the  development  and  achievement  of  Operational  Readiness, 
unprepared  platforms  and  environments  are  the  result.  This 
can  lead  to  operational  gaps,  system  faults,  and  costly 
corrections.  Thus,  the  ORR  is  a  vital  step  in  the  service 
realization process. 

III.  ORR PROCESS BACKGROUND 

The  Operational  Readiness  Review  has  its  roots  in  standard 
quality  processes  and  signoff  checklist  procedures  often  seen 
in manufacturing and other domains. Variants of the ORR are 
found  in  disparate  industries  beyond  IT  including  chemical 
manufacturing  [6]  and  nuclear  power  safety  processes  [7]. 
From an ITIL (IT Infrastructure Library) perspective, the ORR 
is  part  of  the  Service  Acceptance  Criteria  (SAC)  [8].  Within 
this  process  the  ORR  helps  ensure  that  IT  services  meet 
quality requirements and that the service  provider is ready to 
operate a newly deployed service [9]. 

Within  software  and  systems  development,  the  ORR  has 
evolved  into  a  standard  process  practice  and  is  formalized 
within ITIL. According to Yakimoff [10]: 

“The  key  objective  is  to  ensure  the  service  is  working 
for  operations  to  assume  full 
towards  readiness 
ownership.  This  activity  also  helps 
to  provide 
assurance  to  stakeholders,  and  there  is  sign  off  and 
acceptance  from  the  Operational  team.  It  can  also 
identify  and  manage  any  risk  during  the  review 
process”. 

Typical  ORR  methods  aim  to  prepare  systems  for  release, 
reduce risk, and inform stakeholders of preparedness. Reviews 
can  be  narrow or  broad,  yet  they  often  will  include  coverage 
of designs, testing, computing environment, operational plans, 
support, maintenance, and DR [10]. 

The ORR is also promoted by Project Management bodies like 
the  PMI  (Project  Management  Institute).  The  PMI  takes  the 
position that it is the project manager’s responsibility to ensure 
for  a  readiness  program  and  perform  required  assessments. 
These actions are considered as necessary deliverables for any 
project [11].  

approach  to  suit  their  operational  needs.  In  the  case  of 
Microsoft  Azure’s  approach  to  the  ORR  their  readiness 
process  focuses  on  Security,  Monitoring,  High  Availability, 
and Disaster Recovery [12]. 

For Amazon Web Services (AWS), a significant emphasis on 
the  ORR  to  confirm  applications  are  ready  for  production 
operations  through  their  “Operational  Excellence  pillar”  of 
their  AWS  Well-Architected  Framework process is promoted  
[13].  The  AWS  ORR  includes  reviews  of  testing  approach, 
monitoring,  and  an  approach  for  measuring  performance 
against  the  application’s  SLAs.  Interestingly,  AWS  also 
ensures 
report  data  on  service 
that  applications  can 
interruptions in a nod towards resiliency [14]. 

At  Google,  IT  Operations  are  more  commonly  referred  to  as 
Site  Reliability  Engineering  (SRE).  Their  pioneering  work  in 
largescale  Cloud  computing  and  operations  has  made  them  a 
trendsetter in this area. In the landmark book on SRE, Google 
lays  out  their  computing  environment  management  and 
engineering  methods  in  detail  [15].  The  launch  preparation 
method  described  in  this  book  is  similar  to  standard  ORR 
methodologies.  In  addition,  Google’s  approach  plays  a  key 
role in their DevOps methods.  

Finally,  Hornsby  [16]  adds  serval  key  considerations  around 
the  ORR  for  Cloud  architects.  He  mentions  that  the  ORR  is 
rigorous  and  evidence-based.  It  will  also  be  specific  to  a 
company’s environment, culture, and platforms. Regardless of 
this the ORR is always meant to uncover gaps and reduce risk 
to  operations.  This  is  why  a  broad  set  of  contributors  and 
stakeholders  ought  to  be  involved.  Critically,  Hornsby  also 
makes  the  point  that  usage  of  an  ORR  is  an  exercise  in 
incrementally  improving  the  checklist  as  knowledge  of  the 
applications and computing assumptions evolve. 

V.  GOOGLE, DEVOPS, AND THE ORR 

One  element  of  Google’s  launch  checklist  and  PRR  which 
distinguishes their approach from earlier ORR methods is the 
fact  that  Google  is  one  of  the  foundational  organizations  for 
the  emergence  of  DevOps.  The  SRE  handbook  documents  a 
wide variety of now classical DevOps principles and methods 
which include [15]: 

•  Embracing Risk 
•  Automated Testing 
•  Capacity Management 
•  PRR (Production Readiness Review) 
•  Release Engineering (CI/CD) 
•  Operations Automation 
•  Monitoring 
•  Effective Incident Management 

IV.  CLOUD PROVIDERS AND ORR PROCESSES 

With  the  increase  in  dominance  of  several  major  Cloud 
hosting  providers  in  recent  years  most  of  them  have  also 
adopted a form of the ORR. For some companies they follow 
a  standard  ITIL  model  while  others  have  customized  their 

While many of these processes have been standard fare in the 
industry for decades, the bundling of them into a popularized 
movement  has  given  them  new  attention.  That  includes  the 
PRR,  otherwise  known  as  the  ORR.  Since  Google’s  Site 
Reliability  Engineering  procedures  are  widely  emulated  the 
ORR  has  also  gained  attention  in  the  DevOps  community. 

2 

 
 
 
 
 
 
 
 
 
 
 
 
This  is  crucial  to  the  adoption  of  the  ORR  as  today  most  IT 
environments  strive 
to  follow  a  DevOps  mindset  and 
methodology;  however,  they  might  be  defined.  The  use  of  a 
PRR or ORR then, is not antithetical to DevOps but is clearly 
a  core  element  for  Google,  AWS,  and  Azure.  In  the 
implementation  of  the  Global  ORR  process  described  below 
the foundational inclusion of the PRR and ORR by the major 
Cloud operations providers and their DevOps processes was a 
key influence. 

VI.  DEVELOPING A GLOBAL ORR PROCESS 

In  order  to  improve  system  reliability  and  availability  and  to 
prevent  unexpected  environment  anomalies  and  service 
disruption an effort was undertaken to develop and introduce a 
Global ORR process at a major information services company. 
This environment was truly global in that it operated in dozens 
of countries and serviced customers throughout the world. The 
scope included a  portfolio of over 3,000 applications running 
on 
[17]. 
Heterogenous  platforms  and  significant  legacy  and  new 
development  further  characterized  the  environment.  The 
Global IT process engineering team was tasked to develop the 
ORR  approach  at  the  request  of  the  IT  Operations  Division 
CTO and CEO. IT Operations teams across multiple Divisions 
provided  input  to  the  ORR  development  and  deployed  the 
process as a new standard practice over time. 

thousands  of  Cloud  based  servers 

tens  of 

A.  Process Goals 
As stated, the intention of the new Global ORR process was to 
enhance operational quality and system Availability to prevent 
service  interruptions  on  behalf  of  customers.  The  specific 
goals informing the program included:  

1. Drive  uniform  systems  quality  level  with  explicitly 

defined criteria. 

2. Obtain  Operational  and  Availability  objectives  and 
infuse continuous improvement throughout the systems 
operations process. 

3. Provide  transparency  around  support  requirements  and 
strengthen  sharing  of  best  practices  across  Global 
teams. 

In  addition  to  these  primary  drivers,  it  quickly  became  clear 
that the process would need to address the nature of the Agile 
and DevOps lifecycle models in use throughout the company. 
The  implementation  of  the  ORR  process  had  to  balance  a 
comprehensive  checklist  approach  with  a  DevOps  approach 
which sees itself as highly Agile. This was one motivation for 
closely reviewing such Cloud based operational models as that 
from  Google’s  SRE  process  which  incorporates  a  PRR  as 
standard practice while still retaining its DevOps approach. 

B.  ORR Process Development Steps  
After defining the need for a Global ORR process and setting 
in place the leadership support and objectives the development 
process  was  planned  and  initiated.  The  major  steps  of  this 
development included the following: 

1. Initial Checklist Creation:  Within the company  some 
Divisions  did  not  have  any  pre-release  checklist 

process. However, there were three internal groups with 
preexisting and custom operational checklist procedures 
in  place.  These  were  merged  in  order  to  seed  the  new 
Global ORR. This allowed for best in class methods to 
be harvested and also began the buy-in process as those 
groups  with  operational  checklists  felt  included  in  the 
development of the Global process. 

2. Industry  Research:  As  documented  above,  the  team 
scanned  the  available  literature  for  current  practice  in 
this  area.  Starting  with  the  ITIL  framework,  carefully 
reviewing  Google’s  SRE  methods,  and  searching  for 
other  examples  of  ORR  approaches  all  provided 
additional  input  to  the  definition  of  our  new  Global 
ORR approach and checklist. 

3. Executive  Reviews:  As  the  process  and  checklist 
emerged  into  draft  form  it  was  reviewed  with  senior 
management.  Their  support  for 
the  process  was 
unequivocal  and  they  provided  pointed  feedback  on 
improving  the  approach  and  their  expectations  on  its 
usage. 

4. Pilot  Phase:  The  first  deployment  step  was  to  select  a 
small  group  of  willing  participants  who  had  prior 
experience  with  PRRs  or  ORR-like  preproduction 
checklist  processes.  This  friendly  and  knowledgeable 
audience  provided  a  testbed  for  the  process  as  well  as 
critical ideas on improving the process and the checklist 
itself. These learnings were used to  retrofit the process 
artifacts and prepare for a broader rollout. 

5. Self-Reporting  Phase:  Following  the  Pilot  Phase  all 
application teams in the initial population were required 
to participate in a “self-reporting” period. This allowed 
teams  to  begin  picking  up  the  process  without  tight 
oversight or data auditing. 

6. Full  Deployment:  As  the  process  was  then  stabilized 
and  further  improved,  all  application  teams  were 
required  to  participate  through  a  defined  governance 
process.  Additionally,  their  readiness  dashboards  (see 
below)  were  reviewed  by  senior  management  as  a 
condition of production release.  

7. Standard  Global  Practice:  Over 

the  course  of 
approximately  18  months  the  process  went  from 
concept to design to pilot to a required Global Practice. 
The checklist itself entered into planned  and versioned 
releases  to  introduce  improvements  uniformly  and 
globally without creating disruption in ORR usage. This 
steady  state  process  is  depicted  in  Figure  3.  Also, 
governance  migrated  from  the  process  development 
team  to  the  Global  IT  PMO  (Project  Management 
Organization)  group 
the 
Architecture team and its review process. 

coordination  with 

in 

Figure 2 - ORR Checklist Development and Governance 
Process Overview 

3 

 
 
 
 
 
 
 
C.  ORR Methodology and Tools 
In  terms  of  the  specific  features  or  characteristics  of  this 
Global  ORR  process  and  checklist  there  are  a  few  notable 
items listed below. 

•  The  checklist  itself  was  curated  into  a  tuned,  user 
verified,  and  proven  list  of  just  over  100  quality 
checkpoints.  These  categories 
included:  Capacity, 
Performance,  Touchpoints,  Batch,  Backup/Recovery, 
Support, 
Cloud 
Network/Firewalls, 
Computing, Monitoring, and DR. 

InfoSec, 

•   The  process  required  a  score  of  100%  against  the 
applicable  checkpoints.  The  questionnaire  was  largely 
automated and intelligent with a branching feature that 
allowed  for  differing  checkpoint  groups  depending 
upon  the  architecture.  The  final  score  also  required 
signoff  from  key  stakeholders  and  senior  management 
prior to production release. 

•  The Global ORR was set as a required process for  any 
major  application  implementation,  onboarding  new 
systems  brought  under  the  IT  Operations  organization, 
hosting  transitions,  or  other  significant  changes.  The 
process  was  defined  as  optional  for  hotfixes  or  minor 
enhancements. 

•  The  ORR  release  preparation  approach  did  not 
eliminate 
the  Change  Management  process  but 
strengthened  it  and  helped  reduce  overall  risk.  Within 
the  ORR  process  there  was  a  defined  Change  Owner, 
supporting  teams,  Change  Manager,  and  Leadership 
Authorizer. 

•  All  systems,  applications,  and  services  of 

the 
organization  were  deemed  within  scope.  The  ORR 
became  a  mandated  policy  with  senior  management 
backing.  Getting  to  full  compliance  took  time  and 
proceeded  group  by  group  and  system  type  by  system 
type but eventually reached universal adoption. 

•  Automation  was  applied  at  multiple  points  in  the 
process  to  aid  in  adoption,  data  consistency,  and  the 
reduction  of  process  overhead.  Aside 
the 
branching template to tailor responses to the application 
type  or  release,  other  key  steps  were  also  automated. 
These included the project team upload of the checklist 
to  a  central  repository,  automatic  parsing  of  the 
checklists using PowerBI, and the automatic generation 
of an Executive dashboard. 

from 

•  The Global ORR Dashboard was initially requested by 
the Executive stakeholders. Their interest was to see at 
a  glance  whether  any  given  application  or  system  was 
ready for release. From a data visualization perspective, 
the  design  metaphor  inspiration  for  the  dashboard  and 
its  vision  as  often  explained  to  stakeholders  and  users 
was that of the “Christmas Tree” panel on a submarine. 
Prior  to  diving  under  the  water  this  mechanism  shows 
all  green  lights  if  hatches  are  sealed,  and  the  ship  is 
ready  for  submersion.  If  there  is  a  red  light  something 
needs  attention,  and  the  dive  cannot  commence  as  in 
Figure 3 [18]. In the same manner, the ORR dashboard 
was  designed  to  automatically  summarize  the  100+ 
quality checkpoints into a simplified graphic with both 

quantitative values in terms of percent ready as well as 
color coded status (red, yellow, green) based on defined 
thresholds. The sample dashboard provided in Figure 4 
actually  reports  on  the  preliminary  release  preparation 
for  a  Cloud  hosting  project  across  multiple  regional 
datacenters. The advantages of this dashboard are clear. 
Following  data  visualization  guidance,  a  small  amount 
of screen real estate provides a large data density [19]. 
In fact, this design packs 740 discrete data points into a 
small tabular format1. 

Figure 3 - A Christmas Tree example from the 
USS Pampanito (Jarvis, 2022) 

Figure 4 - Sample ORR Executive Dashboard. The design 
is inspired by the "Christmas Tree” operational safety 
readiness approach and visualization. 

VII.  COMPARISON WITH THE GOOGLE LAUNCH LIST 

As  part  of  the  development  and  eventual  communications 
around  the  new  Global  ORR  process  and  checklist  a 
comparison  was  conducted between  the  Google  PRR  Launch 

1 The 740 data point count is derived as follows: 5 Regions, 18 Categories, 

90 scores, 72 color options, and 555 rolled up quality checkpoints. 

4 

 
 
 
 
 
 
 
 
 
 
(or 

internal 

the 
This 

local)  checklist  under 
Checklist  and 
development. 
the 
confirming 
in 
assisted 
comprehensiveness  of  the  ORR  implementation  and  its 
effectiveness  as  well  as  helping  to  demonstrate  to  internal 
teams that the Global ORR process compared well  with state 
of  the  art  practices  in  major  Internet  technology  companies 
who also employed DevOps.  

As can be seen in Table 1 below, the two methods line up very 
closely. The only areas where Google is missing a category as 
compared  with  the  Global  ORR  process  is  in  Pre-requisites, 
Support,  Database,  and  Process.  However,  we  must  keep  in 
mind  that  the  published  Google  checklist  is  abridged  and  is 
from  2005.  This  is  to  maintain  some  proprietary  advantage. 
Also, some of these categories are most likely covered within 
the SRE guide but are mentioned elsewhere. A good example 
is  the  Google  PRR  process  itself  which  appears  in  the  SRE 
book and calls for the use of the Launch Checklist. However, 
this  is  not  mentioned  explicitly  on  the  Google  Launch 
Checklist.  Furthermore,  nearly  all  Google  applications  use 
BigTable  for  data  management,  so  this  is  an  assumed 
implementation  environment  which  has  built  in  availability 
and  scalability  thereby  perhaps  reducing  the  need  for  a 
focused review section on the checklist.  

Table 1 - Google launch checklist items compared with the 
Global ORR checklist categories 

ORR Category 

Google 

Global ORR 

Pre-requisites 

Partial 

Capacity 

Performance 

Batch 

Application 

Third-Party 

Backup 

Support 

Network 

Security 

Storage 

Hosting 

Database 

Monitoring 

DR 

Process 

Failure Scenarios 

Automation 

Y 

Y 

N 

Y 

Y 

Y 

Partial 

Y 

Y 

Y 

Y 

Indirectly 

Y 

Y 

N 

Y 

Y 

Y 

Y 

Y 

Y 

Y 

Y 

Y 

Y 

Y 

Y 

Y 

Y 

Y 

Y 

Y 

Y 

N 

N 

This  puts  the  two  checklists  generally  on  par.  However,  of 
note are the two Google categories not covered directly by the 
Global  ORR  checklist.  The  first  is  the  review  of  explicit 

failure  scenarios  and  the  handling  of  those  scenarios  by  the 
system.  This  is  a  critical  design  step  and  readiness  analysis 
which  most  operations  teams  might  be  advised  to  add.  The 
other section directly called out be Google is automation. The 
ORR process described in this implementation touches on this 
tangentially  but  could  be  strengthened.  An  example  of  an 
automation  step  that  would  be  helpful  would  cover  firewall 
configuration.  Instead  of  simply  asking  the  question  on 
whether the firewall ports have been assigned and opened, an 
executable  script  might  be  run  in  the  actual  computing 
environment to verify that the required ports are indeed open. 
Thus,  as  many  of  the  ORR  checkpoint  questions  as  possible 
could  be  supported  by  both  a  review  and  a  live  capability 
confirmation. The results of the script could also feed into the 
dashboard automatically. 

Additionally,  there  are  some  70  topic  areas  to  address  in  the 
abridged version  of  the  Google  checklist  which  may  not  line 
up  exactly  with  those  required  by  the  Global  ORR  checklist 
under  discussion.  Some  of  these  topics  include  Architecture, 
datacenter  considerations,  volumes,  reliability,  failover,  and 
monitoring.  Any  of  these  checks  might  be  considered  for 
inclusion  in  a  customized  ORR.  Readers  can  access  the 
Google SRE guide for more information. 

VIII.  DEPLOYMENT CHALLENGES 

As with any change or transformation activity, developing the 
new  process  often  turns  out  to  be  more  straightforward  than 
achieving successful adoption of that process. To do so often 
means  teams  and  individuals  must  change  their  work  habits, 
accept a new model of engineering or workflow, and typically 
requires  a  period  of  dialogue  between  those  charged  with 
introducing the change and those adopting the new procedures 
[20].  Achieving  this  type  of  process  change  across  a  large 
global  organization  is  a  project  in  itself  and  runs  through 
phases  of  building  the  right  climate  for  change,  enabling  the 
teams  to  succeed  with  the  change,  and  finally  implementing 
and sustaining the change [21]. In the case of the Global ORR 
process  these  steps  were  anticipated  and  significant  effort 
applied  to  work  through  the  ramp  up  of  change  and  reach  a 
status quo where the process became fully operational. 

Along the way several key concerns were heard (some of them 
frequently) from the teams and organizations required to adopt 
and practice the Global ORR process.  

to  many  project 

•  The  first  major  complaint  was  that  the  ORR  process 
(which  was  new 
teams)  added 
unnecessary overhead. While there was no doubt that the 
ORR  represented  a  new  quantum  of  work  the  response 
provided by the process team and the leadership team was 
that  the  upfront  effort  would  pay  off  in  less  firefighting 
post-production.  This  was  a  difficult  sell  early  on  yet 
once teams began using the ORR they did see the benefits 
as  they  observed  hidden  preparation  gaps  and  prevented 
major issues in the field. 

•  Another  common  viewpoint  from  certain  project  teams 
was  that  the  ORR  appeared  more  “Waterfall”  than 
“Agile”. As a result, these teams rejected the process out 

5 

 
 
 
 
 
 
 
 
of  hand  as  a  mismatch  for  their  development  lifecycle 
models.  To  resolve  this  the  process  team  leaned  heavily 
on  the  integration  of  DevOps  process  considerations  in 
the  authoring  of  the  checklist  and  the  process  of 
conducting  the  ORR.  The  fact  that  the  leading  Cloud 
providers  used  ORRs  was  a  powerful  example  as  well. 
After  some  experimentation  some  DevOps  reliant  teams 
discovered  that  the  ORR  was  not  antithetical  to  their 
environment but complimentary. In reality  the process  is 
both  a  requirement 
to  reliable  operations  and  an 
accelerant  to  achieving  the  same  regardless  of  SDLC 
models. 

•  Some  teams  claimed  platform  specific  exemptions.  In 
particular such views of non-applicability came from ERP 
systems teams. The response was to ensure that a tailored 
template incorporating relevant points for these platforms 
was  developed.  The  dynamic  branching  feature  of  the 
checklist  questionnaire  also  aided  in  addressing  this 
concern. 

•  In general, few project teams saw the benefits of the ORR 
process  at  first  although  some  did.  Often  times  the  fact 
that  the  process  was  mandated  by  senior  management  - 
while  not  eliminating  pushback  -  did  help  to  drive  up 
adoption.  Paired  with  this  was  the  automation  of  the 
process which helped reduce claims of overhead. 

•  A common set of questions centered around when to use 
the  ORR  and  who  was  responsible  for  completing  the 
checklist.  Since 
the  ORR  was 
the  application  of 
essentially  universal  the  first  question  was  easy  to 
dispatch.  To  manage 
the  second  question  around 
responsibilities  a  complete  RACI  matrix  was  developed 
and reviewed with all stakeholders and project teams.  
•  Finally, as the ongoing development and evolution of the 
ORR  process  and  checklist  was  a  bi-directional 
community  effort  buy-in  was  enhanced.  Leaders  and 
teams  found  that  they  had  a  say  in  what  the  checklist 
contained  and  how  to  apply  it.  This  broke  down 
resistance  to  the  process  as  ownership  of  the  approach 
became  democratized  throughout  the  organization  and 
results  began  pointing  to  improved  system  preparedness 
and fewer production outages. 

IX.  RESULTS AND DISCUSSION 

Upon reaching the steady state phase the Global ORR process 
was  used  throughout  the  organization  and  on  releases  or 
changes as specified in the process criteria. Since the portfolio 
of  applications  reached 
thousands,  and  most 
into 
applications released often due to their Agile SDLC approach, 
this  resulted  in  hundreds  of  ORR  reviews  per  month  around 
the world.  

the 

To support this approach a dedicated process engineer worked 
parttime  to  take  in  feedback  from  users  and  developed 
improved  checklists  and  expanded  process  automation. 
Additionally,  a  Project  Manager  provided overall governance 
support  and  members  of  the  Architecture  group  provided 
technical  review  guidance.  And  of  course,  the  project  teams 
themselves  had  to  prepare  the  checklists,  submit  them  for 
review, and achieve approval sometimes incrementally. Thus, 

running the ORR process is not without an investment of staff 
hours. 

However, the rewards of the process became apparent quickly. 
Going back to the original goals of the process the ORRs did 
push  a  common  set  of  technical  standards  into  all  projects 
uniformly. Also, the company did witness an improvement of 
production release  readiness and  a decline  in  post-production 
environment  related  issues.  Detailed  metrics  around  these 
improvements  are  considered  proprietary  but  the  Availability 
of  systems  was  positively  impacted.  Moreover,  the  ORR 
process  had  an  impact  on  the  engineering  culture  of  the 
organization.  A  top  to  bottom  awareness  of  what  operational 
system  requirements  were  became  more  commonplace  and 
teams began thinking about the questions on the ORR early in 
the  lifecycle  (much  like  the  previously  mentioned  PRE  had 
recommended).  In  fact,  the  term  “ORR”  became  part  of  the 
lexicon  of  the  IT  organization.  This  “left  shift”  of  quality 
meant  that  design  time  thinking  was  applied  to  questions  of 
performance,  security,  reliability,  and  support  in  advance  of 
the  actual  ORR  read  through.  This  then  sped  up  the  process 
even further than the automation did. 

Perhaps  one  of  the  most  successful  parts  of  the  Global  ORR 
process  was  its  ability  to  inform  senior  management  of  the 
status of each  in-flight release and  provide a quantitative  and 
succinct  visual  view  of  both  preparedness  and  risk  levels. 
Prior  to  the  Global  ORR  each  project  team  or  Division 
followed  their  own  process  for  release  preparation.  With  the 
ORR 
language  and  data 
representation  across  all  applications  making  it  easier  for 
management to assess risk, provide support, and communicate 
with various stakeholders regarding status. 

there  was  now  a  common 

A final point which is worth emphasizing is that the ORR does 
not  replace  existing  Change  Management  practices.  It  is 
instead  an  additional  risk  mitigation  and  quality  control 
testing 
mechanism.  Effective  design  methodologies  and 
techniques  are  still  required  to  achieve  High  Availability. 
However,  the  ORR  can  and  does  drive  key  technical  and 
operational  considerations  and 
the 
application  and  system  delivery  process.  Such  an  approach 
also requires a high degree of sophistication by individuals in 
the  organization.  A  wide  range  of  diverse  topics  need  to  be 
covered  in  the  review  process  and  a  certain  maturity  is 
required to adopt this type of process which calls on people to 
step  back  and  critique  their  own  work  and  that  of  others  in 
order to improve the ultimate solution. 

requirements 

into 

X.  CONCLUSIONS 

The story of the ORR in general and the development and use 
of  this  instance  of  a  Global  ORR  is  a  powerful  one  in  the 
reliability  toolkit.  It  can  prepare  solutions  far  in  advance  of 
deployment  for  the  appropriate  environment  setup  and  it  can 
prevent  costly  errors  from  entering  production.  This  method 
does require commitment and investment to get started and to 
maintain  but  it  also  has  significant  payback  including  the 
capture of tribal knowledge in what all the important questions 
are to ask about an engineered solution. This process is a true 

6 

 
 
 
 
 
 
balancing  act  between  expert  knowledge,  process,  and 
technology.  

We  began  this  document  by  introducing  how  the  ORR  is 
defined  within  the  industry.  This  included  a  review  of  how  
Cloud  computing  and  DevOps  driven  providers  incorporate 
ORRs. We also took a deep dive into the Google PRR (ORR) 
driven  Launch  Coordination  Checklist.  This  included  a 
discussion of the relation of such a checklist to DevOps. The 
details  of  the  custom  implementation  of  a  new  Global  ORR 
for a specific organization was provided at length. Finally, we 
provided a side-by-side comparison of this locally customized 
ORR  and  Google  readiness  checklists  and  explored  the 
challenges  and  results  of  developing  and  deploying  an  ORR 
process corporate wide.  

In the  end  we  can see that the intent,  approach, and scope  of 
the  Google  Launch  Checklist  and  the  Global  ORR  described 
here  are  very  similar.  There  are  some  areas  covered  by  one 
process which do not seem to be directly covered by the other 
and vice versa. This might suggest that implementation teams 
can  continue  to  improve  their  methods  by  further  review  of 
industry practices.  

Of note is that within a true DevOps environment like Google, 
a rigorous PRR or ORR method is expected. This should help 
IT Operations teams in finding adoption routes for the ORR in 
such  process  environments.  Finally,  as  an  industry  standard 
method the ORR approach can be seen as a supporting model 
for achieving high levels of operational quality, reliability, and 
availability  as  in  this  case.  Key  success  factors  include 
Executive  support  and  visibility  to  the  ORR  data,  an  active 
Change  process  to  support  adoption  within  the  culture,  and  a 
universal application of the process to  achieve even levels of 
higher systems quality and availability. 

XI.  ACKNOWLEDGEMENTS 

The development of this Global ORR process  was dependent 
on  the  Executive  management  team  of  the  organization 
profiled  here  as  well  as  the  process  design  team  who 
developed  and  deployed  the  approach.  Naturally,  this  work 
could  not  have  been  accomplished  without  the  ultimate 
acceptance  and  cooperation  of  the  hundreds  of  process  users 
across the organization.  

XII.  REFERENCES 

[1]  IT  for  Business,  “Service  Transition  and  Operational 
Readiness”, IT Standard for Business, viewed 8/12/2019. 
[2]  Cusick,  James,  “Architecture  and  Production  Readiness 
arXiv,  

Practice”, 

Reviews 
arXiv:1305.2402 [cs.SE], May 2013. 

in 

[3] BT Forum,  “Service  Release and Operational Readiness”, 

Business Technology Standard, viewed 5/1/2022. 

[4] Taylor,  Sharon,  et.  al.,  ITIL  Version  3:  Service 
Transition, Office of Government Commerce, 2014. 
[5]  Bon,  J.  V.  ,  Foundations  of  IT  Service  Management: 
based  on  ITIL,  Van  Haren  Publishing;  2nd  edition, 
September 15, 2005. 

[6]   CPS,  “Introduction  to  Operational  Readiness”,  Center 

[7]  NRC, 

for Chemical Process Society, viewed 4/27/2022 
“Operational  Readiness  Reviews, 

System 
Development  and  Life-Cycle  Management 
(SDLCM) 
Methodology”,  United  States  Nuclear  Regulatory 
Commission, February 2002. 

[8]  Kempter,  Stefan,  “ITIL  Service  Transition  -  Release  and 
Deployment  Management”,  IT  Process  Wiki:  The  ITIL 
Wiki,  viewed 4/27/2022. 

[9]  Valentic,  Branimir,  “ITIL  Service  Acceptance  Criteria  – 
keep  control  in  your  hands”,  ISO  20000  &  ITIL 
Knowledge Base, viewed 4/27/2022 

[10]  Yakimoff,  Lana,  “Operational  Readiness  Review:  Are 
you being served?”, The Future is Now, itSMF, Brisbane, 
Australia, March 2022. 

"ready" 

[11] Gardner, D. G., “Operational readiness – is your system 
more 
environment?”  Project 
your 
Management Institute Annual Seminars & Symposium, 
Nashville, TN. Newtown Square, PA: Project Management 
Institute, 2001. 

than 

[12] Azure  Synapse,  “Operational  Readiness  Review”, 
Synapse  Success  by  Design:  Implementation  Success, 
December 17, 2021. 

[13] Eliot,  Seth,  et.  al.,  “Reliability  Pillar:  AWS  Well-
Architected  Framework”,  Amazon  Web  Services,  July 
2020. 

[14] Cusick,  James,  “Exploring  System  Resiliency  and 
arXiv.org, 

Methods”, 

Supporting 
arXiv:0000 [cs.SE], September 2020.  

Design 

[15] Murphy,  Niall  ,  et.  al.,  Site  Reliability  Engineering: 
How  Google  Runs  Production  Systems,  1st  Edition, 
O'Reilly, 2016. 

[16] Hornsby,  Adrian,  “Operational  Readiness  Review 
Template”,  Towards  Operational  Excellence,  The  Cloud 
Architect, Nov 11, 2020. 

[17] Cusick,  James,  “Driving  Enterprise  Strategies  with  a 
Software  Application  Portfolio  Management  Initiative”, 
October 2020, DOI: 10.13140/RG.2.2.12098.20167.  

[18] Jarvis,  Andrew,  “The  Christmas  Tree”,  Pinterest.com, 

viewed 5/2/2022. 

[19] Tufte,  Edward,  R.,  Envisioning  Information,  Fifth 

Edition, Graphics Press, Cheshire, Connecticut, 1995. 

[20] Cusick,  James,  “Organizational  Design  and  Change 
Management  for  IT  Transformation:  A  Case  Study” 
Journal  of  Computer  Science  and 
Information 
Technology,  6(1),  pp.  10-25, 
July  2018,  DOI: 
10.15640/jcsit.v6n1a2. 

[21] Kotter, John P. & Cohen, Dan S., The Heart of Change: 
Real-Life  Stories  of  How  People  Change  Their 
Organizations,  (1st  edition).  Harvard  Business  Review 
Press: Boston, MA, 2012. 

XIII.  ABOUT THE AUTHOR 

James Cusick is a Principal IT Consultant & Researcher based 
in  Japan  advising  select  clients  worldwide  on  IT  Strategy, 
Cybersecurity,  IT  Operations,  and  Application  Development. 
Previously James held leadership and technical roles in several 
companies  including  AT&T  and  Bell  Laboratories.  James  is 
also currently a Board Trustee at the Henry George School of 

7 

 
 
 
 
 
researching 

in  New  York 

Social  Science 
Innovation, 
Technology,  and  Economics.  Earlier  James  was  an  Adjunct 
Assistant  Professor  at  Columbia  University’s  Department  of 
Computer  Science.  His  publications  include  over  100  papers 
and two recent books on IT. James is a Member of the IEEE 
Computer  Society  and  a  certified  PMP  (Project  Management 
Professional). 

Copyright © J. Cusick 2022 All rights reserved. 

8 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
