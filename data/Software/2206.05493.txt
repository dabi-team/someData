2
2
0
2

n
u
J

1
1

]
n
y
d
-
u
l
f
.
s
c
i
s
y
h
p
[

1
v
3
9
4
5
0
.
6
0
2
2
:
v
i
X
r
a

BROADCAST: A high-order compressible CFD toolbox for stability and
sensitivity using Algorithmic Diﬀerentiation

Arthur Poulaina,

∗, C´edric Contenta, Denis Sippa, Georgios Rigasb, Eric Garnierc

aDAAA, ONERA, Universit´e Paris Saclay, F-92190 Meudon, France
bImperial College London, South Kensington, London, United Kingdom
cUniv. Lille, CNRS, ONERA, Arts et Metiers Institute of Technology, Centrale Lille, UMR 9014 - LMFL - Laboratoire de M´ecanique des Fluides
de Lille - Kamp´e de F´eriet, F-59000 Lille, France

Abstract

The evolution of any complex dynamical system is described by its state derivative operators. However, the extraction
of the exact N-order state derivative operators is often inaccurate and requires approximations. The open-source CFD
code called BROADCAST discretises the compressible Navier-Stokes equations and then extracts the linearised N-
derivative operators through Algorithmic Diﬀerentiation (AD) providing a toolbox for laminar ﬂow dynamic analyses.
Furthermore, the gradients through adjoint derivation are extracted either by transposition of the linearised operator
or through the backward mode of the AD tool. The software includes base-ﬂow computation and linear global sta-
bility analysis via eigen-decomposition of the linearised operator or via singular value decomposition of the resolvent
operator. Sensitivity tools as well as weakly nonlinear analysis complete the package. The numerical method for the
spatial discretisation of the equations consists of a ﬁnite-diﬀerence high-order shock-capturing scheme applied within
a ﬁnite volume framework on 2D curvilinear structured grids. The stability and sensitivity tools are demonstrated on
two cases: a cylinder ﬂow at low Mach number and a hypersonic boundary layer.

Keywords: CFD; Compressible ﬂow; Finite Volume; Algorithmic Diﬀerentiation; Linear stability.

PROGRAM SUMMARY

Program Title: BROADCAST
CPC Library link to program ﬁles: (to be added by Technical Editor)
Code Ocean capsule: (to be added by Technical Editor)
Licensing provisions: Mozilla Public License 2.0
Programming language: Python, Fortran
Nature of problem: The extraction of the exact N-order state derivative operators useful to study complex dynamical systems is
often inaccurate and requires approximations from the user.
Solution method: This program discretises the compressible Navier-Stokes equations and then extracts the linearised state derivative
operators through Algorithmic Diﬀerentiation providing a toolbox for laminar ﬂow dynamic analyses.

1. Introduction

In high-speed aerodynamics, the governing ﬂow equations involve complex physics, for example discontinuities
with shock waves, propagation of small-amplitude acoustic waves, perturbations that grow due to various instability
mechanisms. The accurate simulation of such physics requires high-order non-linear discretisation schemes. Hence,
once the governing equations are spatially discretised, the ﬂow-state q is high-dimensional and the residual R(q), such
that

∂q/∂t = R(q, δ),

(1)

∗Corresponding author.

E-mail address: arthur.poulain@onera.fr

Preprint submitted to Computer Physics Communications

June 14, 2022

 
 
 
 
 
 
is strongly nonlinear (both due to the physics and the spatial discretisation schemes). We have here made explicit the
dependence of the dynamics with respect to an external control parameter δ, which can be for example the Reynolds
or Mach numbers. Within the framework of dynamical systems, analysing the system consists in determining, as
a function of the parameter δ, all ﬁxed-points, periodic orbits, and their respective stability properties to establish
bifurcation diagrams. The sensitivity and control of such systems, for example understanding how a weak forcing
(uncertainty) or open/closed-loop control aﬀects these bifurcation diagram, are crucial for the optimisation of transport
vehicles. The accurate evaluation of the Nth
order derivative of the residual R(q) steps in as a key-enabler to deal
with the points mentioned above (see Figure 1 for overview).

−

The base-ﬂow q corresponds to a ﬁxed-point of the zeroth order N = 0 derivative of the residual:

R(q) = 0.

(2)

Several methods are available to determine such points: global (explicit or implicit) time-stepping methods, local
implicit time-stepping methods [33] or Newton-Raphson algorithms [14] are most common. Many of these are based
on the solution of a linear system involving the ﬁrst-order N = 1 derivative of the residual, the Jacobian matrix
A = ∂R/∂q.

Once a ﬁxed-point is found, the Jacobian matrix is also used to assess its stability [31]. The asymptotic stability is

evaluated by looking at the most unstable eigenvalues of A [32]:

A ˆq = λ ˆq.

(3)

If the real part of λ is positive, then the ﬁxed point is unstable at large times. Pseudo-resonance properties [62, 58]
associated to A are assessed by looking, for a given frequency ω, at the largest eigenvalues µ2 of the Hermitian matrix:

∗ ˇq = µ2 ˇq,

RR

(4)

−

R

A)−

= (iωI

1 is the resolvent operator and the matrix

1 may be evaluated either from
where
(λ) < 0 for all
the adjoint discrete operator or with the conjugate transpose of
global modes ˆq ) exhibiting strong pseudo-resonances (µ2 large for at least one resolvent mode ˇq) are noise-ampliﬁers
(λ) > 0)
according to Huerre and Monkewitz [31], while globally unstable ﬂows (at least one global mode exhibits
correspond to oscillator ﬂows. The adjoint matrix A∗ is also a key-ingredient for gradient-based optimisation [26] and
sensitivity studies [22, 44].

∗ = (
A∗)−
R
or A. Globally-stable base-ﬂows (

iωI

ℜ

ℜ

R

−

−

Higher-order derivatives such as the second order derivative operator N = 2 (called Hessian and written H =
∂2R/∂qq) allow the performance evaluation of open-loop control strategies [41, 46]. It relies on the linear sensitivity
of an unstable eigenvalue λ (oscillator ﬂow [41]) or of an optimal gain µ2 (noise ampliﬁer ﬂow [7]) to perturbations of
the base-ﬂow or to the introduction of small-amplitude steady forcings, which may provide qualitative control maps
[45]. According to Sipp and Lebedev [57], the second N = 2 derivative allows to evaluate the coeﬃcient of the cubic
nonlinear term in the Stuart-Landau amplitude equation that governs the behaviour of the instability in the vicinity
of the critical parameter δ
δc. Hence, it determines whether a bifurcation is sub- or super-critical [12], which is
of major importance for the determination of the ﬂight-envelope of a vehicle [15, 47]. Finally, the computation of
periodic orbits [24, 52] and the assessment of their stability can be performed by nonlinear Harmonic-Balance (HBM)
or Time-Spectral (TSM) methods [9] and Floquet or Hill-Floquet stability analyses [61].

≈

First and second-order derivative operators are tractable in a continuous framework in the case of simple governing
equations and simple spatial discretisation scheme such as the incompressible Navier-Stokes equations at moderate
Reynolds number with Taylor-Hood ﬁnite elements and no stabilization [41]. There, all the equations are ﬁrst derived
in a continuous form (direct ﬁrst-order, adjoint, second-order derivatives) and then discretised. Speciﬁc numerical
methods and analysis are required at each step to discretise the resulting equations. For instance, FreeFem++ [29]
and FEniCS [38] can be used to obtain spatial discretisations of any partial-diﬀerential equation from its weak form.
However, the continuous framework becomes diﬃcult to implement for systems driven by more complex PDE or
more complex spatial discretisations, e.g. high-order discretised ﬁnite-volume compressible Navier-Stokes equations
for advection dominated ﬂows. For example, the continuous linearised and adjoint operators need special treatment in
presence of shock waves [23]. Conversely, in a discrete framework, the Jacobian and adjoint matrices are computed
from the already discretised (and well-behaved) residual and exhibit the same level of accuracy [17]: the discrete

2

DYNAMICAL SYSTEM TOOLS

APPLICATION TO AN OSCILLATOR FLOW

Fixed-point

Linear stability

Adjoint methods

R(q) = 0

N = 0 derivative

A ˆq = λ ˆq

N = 1 derivative

∇qλ = H′∗q†
N = 2 derivative

Base-ﬂow

Global eigenmode

Sensitivity map

Weakly nonlinear analysis

µ

= κ

d
Adt1
A|A|
A −
N = 3 derivative

2

Sub- or super-criticality of bifurcation

Periodic orbits and Floquet stab.

HBM / TSM

Bifurcation diagram

Figure 1: Dynamical system analysis and its application to an oscillator ﬂow.

method consists in discretising the governing equations and boundary conditions with a given spatial scheme and then
computing the linearised and adjoint operators on these discretised set of equations. For instance, the SU2 code is
built within this framework [49].

Within a discrete framework, the linearisation of the residual can be performed by ﬁnite diﬀerence methods [46]
but the derived operators are approximated up to an ǫ error (ǫ2 for a second-order ﬁnite diﬀerence). Moreover, ǫ is a
user-input parameter depending on the normalisation [35] and N further ǫ parameters would be required to compute
the N-derivative operators. An alternative method to compute the derivative operators is Algorithmic Diﬀerentiation
(AD) [25]. A Source-Transformation AD code reads the script lines of the governing equations and generates a
new script with the algorithmically computed analytic diﬀerentiation of the discretised equations. The Algorithmic
Diﬀerentiation retains the same approximation error as the residual. Once compiled, the computation time of AD is of
the same order of magnitude as a ﬁnite diﬀerence method while it reaches machine-precision accuracy. Furthermore, it
does not depend on any user-input parameter ǫ. The useful feature of the AD method is that successive derivatives can
be computed quickly without further parameters so that N-order derivative operators are extracted easily. For instance,
the software TAPENADE [28] is a Source-Transformation AD code capable of linearising subroutines written in
Fortran and C languages.

The objective of this paper is to present a general framework to solve and analyse large-scale discretised dynamical
systems, representing conservative boundary value problems, through direct and adjoint derivatives computed with
Algorithmic Diﬀerentiation. This method is developed here for the compressible Navier-Stokes equations discretised
with high-order ﬁnite-volume methods to show how to eﬃciently and accurately ﬁnd ﬁxed-points, perform linear
global stability and resolvent analysis, compute eigenvalue sensitivity for open-loop control and analyse the criticality
of a given bifurcation.

The open-source CFD code BROADCAST, built within the discrete framework, is based on the compressible
Navier-Stokes equations. It extracts the exact N-order derivatives by Algorithmic Diﬀerentiation (AD) through the
TAPENADE [28] software. The spatial discretisation scheme relies on a high order shock-capturing numerical scheme
for compressible ﬂow simulations [55]. As a toolbox oriented towards simple test case applications, BROADCAST
is restricted to 2D curvilinear multi-block structured meshes and runs as a sequential code. Nonetheless, as BROAD-
CAST is interfaced with PETSc [2], the Newton solver and stability tools work in parallel through MPI. Even if the
base-ﬂow is assumed two-dimensional, linear 3D perturbations are addressed on the same 2D domain by considering
spanwise periodic perturbations of a given period, as done for example in Bugeat et al. [8]. This extends the stability
analyses to harmonic 3D linear disturbances at a slightly larger but aﬀordable computational cost. The extension

3

to linear 3D perturbations implemented in BROADCAST follows Bugeat et al. however, the linearisations are here
performed by AD and not by a ﬁnite diﬀerence method.

The outline of this paper is the following. First, in §2 the theoretical methods and tools included in BROADCAST
are described along with their choice of implementation. Starting from the governing equations and the spatial dis-
cretisation method, the ﬁxed-point solution computation is then presented. Details of the extraction of the Jacobian
are also given. Then, global stability methods (§2.6) are explained, with a special focus on extraction of resolvent
modes (§2.7) and extension towards 3D instabilities. The theoretical developments underlying linear sensitivity and
building of weakly-nonlinear amplitude equations are also brieﬂy recalled. Finally, the diﬀerent features of the code
are illustrated and validated on two test cases: a circular cylinder ﬂow at low Mach number [46, 19] (§3.1) and a
hypersonic laminar boundary layer [8] (§3.2).

2. Theory and implementation

In the following, we will present the governing equations, discretisation schemes and various numerical algorithms

implemented in BROADCAST.

2.1. Program implementation

As a development-oriented tool, one of the objective of BROADCAST is fast and easy modiﬁcations to plug
diﬀerent numerical models or methods. This leads the programming language choice to sub-routines written in Fortran
for computational eﬃciency called by main programs written in Python for components modularity and to ease new
developments. This functional approach, which is at the opposite of a black-box code, has however the drawback not
to oﬀer a friendly user-interface. The organisation of the code and a short description of the program ﬁles are given in
Figure 2 and Table 1.

card bl2d fv.py
BROADCAST.py
SIM/
resolvent all.py
resolvent all3D 1block.py
misc/PETSc func.py
DzMatrix.py
biglobal cyl.py
Hessian cyl.py

geom/
phys/
borders/
lhs/
rhs/
prepro/
tangent/
adjoint/
tangenttangentHess/
thirdStateDerivative/
dz/
misc/ComputeJacobian.f90

PYTHON PROGRAMS
Card to run BROADCAST (Num. parameters, options...)
Main program (mesh, init., dim. choice, BC location...)
Folder including self-similar proﬁle generator
Main functions to perform 2D resolvent analysis
Likewise for 3D resolvent
All the useful PETSc functions
Compute the transverse contributions of the Jacobian
2D/3D global stability analysis for cylinder
Compute the Hessian operator applied to a given mode
FORTRAN PROGRAMS
Metrics computation
Primitives and viscosity computations
Boundary conditions
Basic matrix-free inversion for time-stepping method
Spatial numerical scheme for residual computation
Preprocessed ﬁles for AD
Linearised ﬁles computed by AD
Linearised ﬁles computed by AD in backward mode
Twice linearised ﬁles computed by AD
Third time linearised ﬁles computed by AD
Transverse contributions of the Jacobian operator
Functions to construct the Jacobian

Table 1: Main program ﬁles description (not exhaustive).

4

BROADCAST

Python main routines

Fortran subroutines

card bl2d fv.py

srcfv/

BROADCAST.py

SIM/

resolvent all.py

misc/PETSc func.py

DzMatrix.py

geom/

phys/

borders/

lhs/

rhs/

prepro/

tangent/

adjoint/

tangenttangentHess/

thirdStateDerivative/

dz/

misc/ComputeJacobian.f90

Figure 2: Organisation of BROADCAST code. Description of the programs in Table 1.

2.2. Governing equations

Any conservative system for a state q can be written in the form:

∂q
∂t

+

∇ ·

F(q) = 0

(5)

We consider here the conservative variables of a ﬂuid q = (ρ, ρv, ρE) and the associated compressible Navier-Stokes
equations for the deﬁnition of the ﬂuxes F(q). The variables ρ, v = (u, v, w) and E are respectively the density, velocity
vector and total energy. However most of the following developments remain valid for any conservative system.

The Navier-Stokes equations read:

5

∂ρ
∂t

+

∇ ·

(ρv) = 0

∂(ρv)
∂t

+

∇ ·

(ρvv + pI

τ) = 0

−

(6)

(7)

with E = p/(ρ(γ
number (Pr = 0.72).

−

1)) + 1
2 v

v, τ = µ(

v + (

∇

·

∇

2
3 µ(

∇ ·

−

∂(ρE)
∂t

+

∇ ·
v)T )

((ρE + p)v

τ

v

λ

T ) = 0,

(8)

·

−

∇

−
v)I, I the identity matrix, λ = µcp/Pr and Pr the Prandtl

To close the system, two more equations are required. First, one assumes a homogeneous, thermally and calori-

cally perfect gas. The perfect gas law is:

with r = 287.1 the speciﬁc gas constant.

Then, the Sutherland’s law is selected to link viscosity to temperature [60].

p = ρrT

µ(T ) = µre f

T
Tre f !

3/2 Tre f + S
T + S

(9)

(10)

with S = 110.4 K the Sutherland’s temperature, µre f = 1.716−

5 kg.m−

1.s−

1 and Tre f = 273.15 K.

2.3. Spatial Discretisation

The ﬁnite volume framework, the associated convective and viscous ﬂux and the implementation of the boundary

conditions are presented below.

2.3.1. Finite volumes

In order to work within the ﬁnite volume framework, the conservative equation (5) is written in its weak formula-

tion:

which becomes using the Green-Ostrogradski theorem:

∂q
∂t

ZΩ

dΩ +

ZΩ ∇ ·

F(q) dΩ = 0,

∂q
∂t

ZΩ

dΩ +

F(q)

·

ZΓ

n dΓ = 0,

(11)

(12)

with Ω the domain volume, Γ the boundaries and n the outer normal.

The equation (12) is discretised and applied to each cell volume Ωi, j and its edges ∂Ωi, j (considering 2D meshes):

dqi, j
dt

|

Ωi, j

|

+

hΓ(q, n) = 0

Γ
|

|

XΓ
∂Ωi, j
∈

(13)

with hΓ the ﬂux through the edge Γ,
the average value in the cell or the cell-centered value. Both values are identical up to an order 2 accuracy [43]:

the edge area. Here the term qi, j can represent either

the cell volume and

Ωi, j

Γ
|

|

|

|

qi, j =

1
Ωi, j

|

|

ZΩi, j

q dΩi, j = q(xCi, j ) + O(h2),

(14)

with xCi, j the cell center. Equation (13) is therefore 2nd order accurate. Then the approximation method used to
compute equation (13) in BROADCAST relies on an extension of the ﬁnite diﬀerence framework. The time-derivative
component is approximated by its cell-centered value and the ﬂux is derived from a high order ﬁnite diﬀerence scheme.
As shown in equation (14), this method is strictly at most order 2 in the ﬁnite volume sense, however, Rezgui et al.

6

 
[51] showed that a high order accuracy in the ﬁnite diﬀerence sense is reached on Cartesian and smoothly deformed
(curvilinear) meshes.

Equation (13) is ﬁnally recast into:

dq
dt

= R(q),

(15)

with R as the nonlinear residual deﬁned as the sum of the ﬂuxes through the edges of a cell divided by its volume. The
ﬂuxes F are split into two components, inviscid and viscous.

2.3.2. Convective ﬂux

The space discretisation for the inviscid ﬂux follows the FE-MUSCL (Flux-Extrapolated-MUSCL) scheme [13].
This is a high order accurate upwind scheme resulting from an upwind recursive correction to the leading truncation
error term of a centered second order scheme [36, 37]. It is equivalent to a MUSCL scheme constructed with a N-order
extrapolation to the ﬂuxes. This high-order convective scheme has been assessed by Sciacovelli et al. [55] showing
excellent results in accuracy and shock capturing features in hypersonic ﬂow simulations. Thanks to its deﬁnition, the
FE-MUSCL scheme can be readily extended to various orders. In BROADCAST, numerical scheme orders from 3rd
to 9th are implemented. Description of the FE-MUSCL scheme and its implementation are detailed in Appendix A.

2.3.3. Viscous ﬂux

The viscous ﬂuxes are computed on a ﬁve-point compact stencil inside the domain (fourth order accurate) and on
a three-point compact scheme near the solid boundaries (second order accurate) in order to get only one layer of ghost
cells at a wall interface. The ﬁve-point compact scheme was ﬁrst suggested by Zingg et al. [64] but this conservative
scheme was not fourth order accurate for all the second order derivative viscous terms. The viscous ﬂux discretisation
implemented in BROADCAST is the one oﬀered by Shen et al. [56] which computed new coeﬃcients to reach fourth
order accuracy for all derivative terms. These coeﬃcients are modiﬁed to move from a cell-centered deﬁnition to a
face location one.

2.3.4. Boundary conditions and ghost cells

Boundary conditions are enforced with layers of ghost cells around the domain. The number of layers depends
on the order of the numerical scheme and is equal to (order+1)/2. The residual R is therefore computed from the
“augmented” state vector qlarge = q + qghost and returns a vector R(qlarge) of the size of the initial state vector q.

Solid boundary conditions such as walls ﬁll ghost cells from the information inside the domain to force zero veloc-
ity or no ﬂux exchange at the boundary for instance. Permeable boundary conditions ﬁll ghost cells with information
either from inside the domain or the external user-ﬁxed state depending on the direction given by the characteristic re-
lations [50]. For example, Dirichlet boundary condition is prescribed when all characteristics are ingoing (supersonic
inlet). Conversely, an extrapolation is made when all characteristics are outgoing (supersonic outlet).

2.4. Time-stepping

BROADCAST includes time-stepping methods to compute base-ﬂow. An explicit low-storage Runge-Kutta [5]
and an implicit LU-SGS in which we use an approximated Jacobian [63] are available. However, in this paper, any
base-ﬂow is computed by a Newton algorithm described in the following section. The time-steppers can then be used
to get an initial guess.

2.5. Base-ﬂow

To ﬁnd a ﬁxed-point q satisfying equation (2), diﬀerent algorithms are possible. First, the Newton method consists

of an iterative method, where from a state qn, we build qn+1 = qn + δqn, with

A(qn) δqn =

R(qn),

−

(16)

where A(qn) = ∂R
is the Jacobian operator evaluated at q = qn. The Newton algorithm must be initialised by a guess.
∂q
A constant reference state may perform well for simple ﬂows. If it fails, it is better to initialise the algorithm with
approximate solutions, that have been generated by other numerical simulations or with a time-stepping method. A

(cid:12)(cid:12)(cid:12)(cid:12)

qn

7

way to speed up the algorithm consists in keeping the same Jacobian for diﬀerent Newton iterations (pseudo-Newton
method). A criterion is thus required to decide when the Jacobian must be computed again. However, as it requires a
further user-parameter to be tuned, we decided not to follow this path and recompute the Jacobian at each iteration.

To ensure convergence regardless of the initial state, a pseudo-transient continuation method (or relaxation method)

has been implemented following Crivellini et al. [14]:

I
∆t

(cid:18)

+ A(qn)

δqn =

R(qn),

−

(cid:19)

(17)

with ∆t a pseudo time-step derived from an adaptive CFL number, CFL = (
mesh size:

||

v

||

+

γp/ρ)∆t/∆x, ∆x being the local

p

CFLn =

CFL 0
rn

(18)

R(qn)
, k
R(q0)
k
L∞ being respectively the L2 and L∞ norms. During the ﬁrst iterations, term I/∆t in equation (17)
with
penalizes the norm of δq in the transient phase. Then, from an initial CFL 0, the CFL number increases with the
decrease of the residual norm and the additional term disappears so as to recover the Newton algorithm and quadratic
convergence properties.

R(qn)
k
R(q0)
k

k·kL2 and

rn = max

L∞
L∞ !

kL2
kL2

(19)

k·k

k
k

,

Steps Base-ﬂow algorithm
Initialisation:
1
1.1
1.2
1.3
1.4
2
3

Geometry & Boundaries
Mesh
Reference parameters
State normalisation

3.1
3.2
3.3
3.4
3.5
3.6
4

Solution initialisation (self-similar or uniform ﬂow)
Base-ﬂow computation:
For iteration = 1

M:

→

Update ghost cells with boundary conditions (BC)
Compute residual R(q)
Compute residual norm & relaxation coeﬃcient
Construct Jacobian A (see Table 3)
Solve linear system A δq =
Update state vector q & check residual convergence

R with LU algorithm

−

Write state vector & Jacobian.

Table 2: Base-ﬂow pseudo-algorithm

The pseudo-algorithm to compute the base-ﬂow is described in Table 2. Step 3 requires M Newton iterations to

converge. Typically, starting from a self-similar solution for a boundary layer, M

10.

≈

The Jacobian operator construction method is similar to the one oﬀered by Mettot [45], except that the evalua-
tion of the derivative is performed through AD instead of ﬁnite-diﬀerence. The Jacobian matrix corresponds to the
linearised discrete residual and is extracted by successive matrix-vector products and stored in a sparse format.

For the explicit construction of the matrix of dimension n, by choosing the vector v as a canonical vector, n
diﬀerent matrix-vector products Av would be required to ﬁll in all the entries Ai j of the Jacobian A. Nevertheless,
with a ﬁnite-volume discretisation, the Jacobian is sparse and exhibits a block-diagonal shape: the vector v can be
therefore chosen such that diﬀerent entries of the Jacobian are computed in a single matrix-vector product. This
strategy signiﬁcantly reduces the number of operations. The choice of the vector v depends only on the stencil of the
discretisation scheme with a high-order scheme requiring more matrix-vector products to be performed as its stencil
is wider.

8

 
Using a ﬁnite-diﬀerence technique, the accuracy of the Jacobian depends on a real parameter, ǫ, whose optimal
value cannot be known a priori [35]. In BROADCAST, instead of computing Av by a ﬁrst order ﬁnite diﬀerence,
the linearised residual is computed by Algorithmic Diﬀerentiation (AD) [25] through the Source-Transformation
AD code TAPENADE [28]. This results in faster computation than a high-order ﬁnite diﬀerence method (which
requires the computation of several residuals) while keeping the analytical accuracy. Also, successive derivatives
can be computed robustly and accurately (ﬁnite diﬀerences method would require to adapt several case-dependent ǫ
parameters). Another advantage of Algorithmic Diﬀerentiation is that it can also run in backward mode, enabling the
calculation of the adjoint derivative A∗v for any v, while ﬁnite diﬀerence methods are limited to the calculation of Av.

Steps Construction of Jacobian A
1

Compute non-zero entries of the Jacobian
For number = 1

p:

1.1
1.2
1.3
1.4
2
3

→
Compute a test-vector v
Update ghost cells of v with the linearised BC by AD
Compute Av with the linearised residual by AD
Convert Av to Jacobian entry Ai j
Remove the zero entries computed
Construct Jacobian A in CSR format

Table 3: Jacobian extraction pseudo-algorithm

The pseudo-algorithm to extract the Jacobian operator is described in Table 3. Step 1 requires p Matrix-vector
products. The scalar p depends on the number of equations (5 for the compressible Navier-Stokes equations) and the
(9)2 = 405.
stencil of the discretisation scheme. Here, p = 5
However as the inviscid scheme is not compact, some matrix-vector products computed at step 1 contain zero entries.
Step 2 is then necessary to remove the Jacobian zero entries computed so that the Jacobian in CSR format stores only
non-zero entries.

(stencil width)2. For the 7th order scheme, p = 5

×

×

All linear systems involving sparse matrices are solved using the PETSC software [2] based on the direct sparse

LU solver MUMPS [1]. BROADCAST code being written in Python language, the petsc4py version is used [16].

2.6. Oscillator ﬂows

In the following, the global stability, linear sensitivity of eigenvalues and weakly nonlinear analysis are described

for oscillator ﬂows.

2.6.1. Global modes

The linear global stability of the 2D base-ﬂow q(x, y), which is a solution of the steady compressible Navier-Stokes

equations, is assessed by the calculation of the global modes.

Small amplitude perturbations represented by the vector q′(t) = eλt ˆq are added to the base-ﬂow q. Linearising
eq. (1), we obtain the eigen-problem in eq. (3). If there exists one eigenvalue λ whose real part is positive, then the
base-ﬂow is linearly unstable and either the system should be time-stepped or a weakly nonlinear analysis as described
below should be performed to determine the ﬁnal saturated nonlinear state.

Here, the largest magnitude eigenvalues and corresponding eigenvectors are calculated with a matrix-free Arnoldi

algorithm. For this, we rewrite eigen-problem (3) as:

sI)−

1 ˆq =

(A

−

λ

ˆq,

s

(20)

1

−

where s is a shift-parameter to indicate where the eigenvalues should be looked for. Hence, the eigenvalues of A
1. Arnoldi methods rely on the construction of
close to s are also the largest magnitude eigenvalues of C = (A
Krylov subspaces, which are obtained by computing recursively matrix-vector products (Cv, C2v,
) with
v a Krylov vector.

, C pv,

sI)−

· · ·

· · ·

−

We use the SLEPc library [53] which implements various Krylov-Schur methods [30] whose Arnoldi algorithm.

Computation of the global modes is performed with the steps described in Table 4.

9

Read geometry and state vector
Read shift s
Construct Jacobian A (see Table 3)
Deﬁnition of the shift-inverted matrix C:

Construct matrix sI
−
Deﬁne matrix-vector product Cv (C = (sI

A

Steps Global mode algorithm
Initialisation:
1
1.1
1.2
1.3
2
2.1
2.2
3
3.1
3.2
4

−
Solve largest magnitude eigenvalue of eq. (20)
Arnoldi method with matrix-free algorithm
Store the largest magnitude eigenvalue λ′ and its eigenvector ˆq

Write eigenvalue λ = λ′−

1 + s and global mode ˆq.

A)−

1 is never computed)

Table 4: Global mode pseudo-algorithm

2.6.2. Adjoint global modes

The adjoint operator A∗ gives access to the adjoint modes through the equation (21).

As the Jacobian A is real, the discrete adjoint operator is directly computed by transposition of A. The adjoint mode
corresponding to its direct global mode is targeted with the same shift-and-invert method written in Eq. (20) replacing
A by A∗ and λ by λ∗.

A∗ ˜q = λ∗ ˜q

(21)

Furthermore, to associate an adjoint mode ˜q with its direct mode ˆq, a scalar product must be chosen for normali-
sation. A ﬁrst choice leads to the L2 inner product
= u∗v =
= 1. However as the direct
and adjoint modes generally have a diﬀerent spatial support (direct mode is located downstream while adjoint mode is
upstream), the local mesh size should be taken into account in the inner product. This gives the discrete inner product
deﬁned by the matrix Q in equation (22).

i uivi and then

˜q, ˆq
i
h

u, v
h

P

i

u, v
h

i|Q = u∗Qv =

ZΩ

u∗v dΩ

(22)

The adjoint mode q† normalised with the discrete inner product given by Eq. (22) (

2.6.3. Sensitivity of eigenvalues

= 1) is then q† = Q−

1 ˜q.

q†, ˆq
h

Q

i
(cid:12)(cid:12)(cid:12)

Linear sensitivity of an unstable eigenvalue λ (globally unstable ﬂow) provides knowledge on the evolution of an
eigenvalue with a small variation of the base-ﬂow. It is studied following the method described by Mettot et al. [46].
The eigenvalue λ is assumed to depend on the base-ﬂow q [6] so that a base-ﬂow modiﬁcation δq produces a variation
of the eigenvalue δλ, that is

The sensitivity of the eigenvalue with respect to base-ﬂow variation written

(23)
∇qλ above is a complex vector whose
real part represents the sensitivity of the ampliﬁcation rate (real part of the eigenvalue λ) while the imaginary part
represents the angular frequency (imaginary part of the eigenvalue λ). The inner product
is the one associated
with the L2 norm. From Sipp et al. [59], any variation of the Jacobian δA generates the variation δλ

h∇qλ, δq
i

·i

h·

,

δλ =

where ˜q is the adjoint mode.

For a given global mode ˆq, the variation of the Jacobian δA is assumed to be induced by the variation of the

δλ =

˜q, δA ˆq
i
h

(24)

base-ﬂow δq:

10

(25)

(26)

(31)

(32)

(33)

Then the sparse Hessian operator H is:

δA ˆq =

Hi jk =

δq

∂(A ˆq)

q

∂q (cid:12)(cid:12)(cid:12)(cid:12)(cid:12)

∂2Ri

q

∂q j∂qk (cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)

Noticing that the Hessian is the second derivative of the residual around the base-ﬂow, it can be computed easily
applying a second time the Algorithmic Diﬀerentiation tool to the linearised residual. Introducing the Hessian H into
the equation (25), it can be recast as

with H( ˆq, δq) = H′δq and H′ deﬁned as:

δA ˆq = H( ˆq, δq)

H′ik =

Xj

Hi jk ˆq j

This leads to δA ˆq = H′δq which can be substituted into the equation (24) and results in

H′∗ ˜q, δq
i
By comparing equations (23) and (29), the gradient of the eigenvalue is:

˜q, H′δq
i
h

δλ =

=

h

qλ = H′∗ ˜q

∇

(27)

(28)

(29)

(30)

Linear sensitivity to other parameters with additional constraints (divergence-free modiﬁcation, steady source
term...) can also be investigated. The sensitivity to a steady source term in the Navier-Stokes equation is here studied
by considering a small amplitude force term δ f . Writing R(q + δq) + δ f = 0, one gets at the ﬁrst order:

Then introducing equation (31) into equation (29) yields

δq =

A−

1δ f

−

By comparing with δλ =

f λ, δ f

, the sensitivity with respect to a steady source term is:
i

h∇

δλ =

H′∗ ˜q,

h

−

A−

1δ f

=

i

h−

A∗−

1H′ ˜q, δ f

i

f λ =

A∗−

1H′∗ ˜q

∇

−

Then, continuous and discrete approaches can be linked. The inner product associated with the L2 norm is replaced
by the discrete inner product deﬁned with the Hermitian matrix Q (Equation (22)). The sensitivity becomes δλ =

f λ

|Q , δ f

h∇

i
(cid:12)(cid:12)(cid:12)

Q and then:

with the associated adjoint mode q† = Q−

1 ˜q.

f λ

|Q =

∇

−

Q−

1A∗−

1H′∗q†

(34)

To compute the sensitivity of an eigenvalue with respect to base-ﬂow variation or to a steady source term in
Navier-Stokes equations, one requires to have the direct and corresponding adjoint mode, the Jacobian and the Hessian
operators. The eigenmodes are computed with PETSc while the operators are derived through the AD method.

11

2.6.4. Amplitude equations

The weakly nonlinear analysis for cylinder bifurcation was described by Sipp and Lebedev [57] for incompressible
ﬂow. The same method is here extended to compressible ﬂows, see details in Appendix C. In the vicinity of the critical
Reynolds number Rec, introducing a small parameter ǫ deﬁned as ǫ2 = Re−
1, one may predict
whether a bifurcation is sub-critical or super-critical by computing the sign of the sum of the coeﬃcients µ + ν + ξ of
the Stuart-Landau amplitude

equation (35).

1 with 0 < ǫ

1
c −

Re−

≪

A

d
A
dt

= ǫ2κ

A −

ǫ2(µ + ν + ξ)

2

A|A|

(35)

These coeﬃcients rely on ﬁve diﬀerent modes computed at the critical frequency ω: the ﬁrst direct mode ˆq1, the
corresponding adjoint mode ˜q1, the zeroth (mean ﬂow) harmonic ˆq20, the second harmonic ˆq22 and the base-ﬂow
modiﬁcation due to an ǫ Reynolds increase ˆq21 (Equations (36)-(40)).

iω ˆq1 −
iω ˜q1 −
−
2iω ˆq22 −

A ˆq1 = 0
A∗ ˜q1 = 0
1
2

A ˆq22 =

H( ˆq1, ˆq1)

A ˆq20 = H( ˆq1, ˆq1)
A ˆq21 = ∂ǫR(q0, 0)

−
−

(36)

(37)

(38)

(39)
(40)

Following the same method described in Sipp and Lebedev [57] in the incompressible framework, by developing
the Taylor expansion of the residual R = R(q, ǫ) up to the third order, analytical expressions of the coeﬃcients µ,
ν and ξ are found for the compressible framework (Equations (42)-(44)). They depend on the discrete Hessian H
deﬁned previously (the component i of the vector H(q, q) is equal to Hi(q, q) =
j ∂q jqk (Ri(q, 0))q jqk) and the
discrete third-order derivative T (Ti(q, q, q) =
) = ∂(
)/∂q. These
derivative operators are computed by AD returning directly the vectors H(q, q) or T (q, q, q), preventing then any
explicit storage of these operators.

j ∂q jqkql (Ri(q, 0))q jqkql) operators where ∂q(

k
P

k
P

l
P

P

P

·

·

˜q1, ∂qǫR(q0, 0) ˆq1i
˜q1, ˆq1i
h

κ = h

µ =

ν =

ξ =

i

i

+ h

˜q1, H( ˆq1, ˆq21)
˜q1, ˆq1i
h
˜q1, H( ˆq1, ˆq20)
h
˜q1, ˆq1i
h
˜q1, H( ˆq1, ˆq22)
h
˜q1, ˆq1i
h
˜q1, T ( ˆq1, ˆq1, ˆq1)
h
˜q1, ˆq1i
h

1
2

i

−

−

−

i

.

(41)

(42)

(43)

(44)

The coeﬃcient µ consists of the response arising from the interaction of the ﬁrst harmonic with the zeroth har-
monic. The coeﬃcient ν consists of the response arising from the interaction of the complex conjugate part of the
ﬁrst harmonic with the second harmonic. The coeﬃcient ξ consists of the response arising from the interaction of the
complex conjugate part of the ﬁrst harmonic twice with the ﬁrst harmonic (itself). This last coeﬃcient exists only at
compressible regime due to the triadic form of the equations.

2.7. Ampliﬁer ﬂows

The equivalent of global stability analysis is presented below for ampliﬁer ﬂows (globally stable). Optimal re-
sponse (resp. forcing) is linked with global direct (resp. adjoint) mode. Then, linear sensitivity of the optimal gain is
studied.

12

2.7.1. Resolvent modes

If all of the eigenvalues λ are stable, then it is relevant to perform a resolvent analysis. For this we consider an
additional small-amplitude forcing ﬁeld f ′(t) = eiωt ˇf on the right-hand-side of equation (1), a response q′(t) = eiωt ˇq,
so that after linearisation:

ˇq =

ˇf

R

(45)

R

= (iωI

1 the linear global resolvent operator and I the identity matrix. The resolvent corresponds to a
with
transfer function between the input (forcing) and the response (perturbations). The resolvent analysis is often called
input-output analysis for this reason.

A)−

−

The optimal forcings / responses are then computed by optimising the gain between the energy of the response

and the energy of the forcing:

µ2 = sup
ˇf

,

2
ˇq
E
k
k
ˇf
2
F
k

k

(46)

with
measures are deﬁned with their associated discrete Hermitian matrices QE (semi-norm) and QF (norm):

F the user-selected measures to evaluate the amplitude of the ﬂuctuations and the forcing. These

E and

k · k

k · k

2
E = ˇq∗QE ˇq ,
ˇq
k
k

F = ˇf ∗QF ˇf

ˇf
2
k

k
Solving for µ2 over a range of frequencies ω provides the most receptive frequency (where µ(ω) is largest) and the
associated optimal forcing mode ˇf . The optimal response ˇq is then retrieved from the optimal forcing using equation
(45).

The energy of the perturbations deﬁned by QE is generally the kinetic energy in incompressible ﬂows. However,
in compressible cases, in order to take into account the density and temperature disturbances, Chu’s energy [21] is
often used [8]:

(47)

EChu = ˇq∗QE ˇq =

1
ρ
2 ZΩ 
|


2 +

ˇv
|

T
ργM2 ˇρ2 +

(γ

ρ
1)γM2T

ˇT 2

−




dΩ.

(48)

Chu’s energy is the sum of the kinetic energy and the thermodynamic disturbances with the appropriate coeﬃcients so
that the conservative compression work is not included as a disturbance in the total energy [27]. Matrix QE for Chu’s
energy norm is block-diagonal and may be written with conservative variables, as detailed for instance in Bugeat et
al. [8]. It is a Hermitian matrix.

To study the receptivity of the ﬂow, it is interesting to restrict the forcing ﬁeld to speciﬁc regions of the ﬂow or to
speciﬁc components. For this we introduce the prolongation/restriction matrix P and replace ˇf by P ˇf , so that equation
(45) becomes:

ˇq =

P ˇf .

R

(49)

(50)

If ˇf is of size m
m. Similarly to Bugeat et al. [8] and Sartor et al. [54], we choose here to
apply the forcing only on the momentum equations and measure QF as the discrete inner product (QF = Q in equation
(22)).

n, then matrix P is n

×

≤

ZΩ
Another scalar product deﬁnition could have been the one given by Eq. (51) which results in a dimension-less gain
µ(ω)U

/Lref.

∞

ˇf
2
F =
k

k

ˇf ∗ ˇf dΩ.

ˇf
2
F =
k

k

ZΩ

¯ρ−

1 ˇf ∗ ˇf dΩ.

(51)

However for sake of comparison with Bugeat et al. in §3.2, the discrete scalar product from Eq. (50) is chosen
m and positive-deﬁnite. Similarly, the perturbation energy can also be restricted to a region of
here. Matrix QF is m
the ﬂow (or to speciﬁc components) which might be diﬀerent from those of the forcing. A simple method to perform
this consists in replacing some columns and rows of the matrix QE by zero so that these perturbations outside the
target region do not contribute to the optimisation. Matrix QE remains n

n and Hermitian.

×

×

13

P∗

∗QE

R

P

R

ˇf = µ2QF ˇf ,

=C
{z

The optimal gain in eq. (46) becomes:

µ2 = sup
ˇf

ˇq∗QE ˇq
ˇf ∗QF ˇf

= sup
ˇf

(

P ˇf )

P ˇf )∗QE(
R
(P ˇf )∗QF(P ˇf )

R

= sup
ˇf

P ˇf

ˇf ∗P∗R∗QE
R
ˇf ∗QF ˇf

(52)

The optimisation problem deﬁned by equation (52) is the Rayleigh quotient. It is equivalent to the generalised Her-
mitian eigenvalue problem:

(53)

|
which is related to equation (4). Its largest eigenvalue is µ2 and the associated eigenvector is ˇf .

}

From the deﬁnition of the Hermitian matrix C = P∗R∗QE

P, the diﬀerent steps to compute Cv are detailed in
Table 5. Computation of the resolvent modes is performed following the steps described in Table 6. As one may
1. So, to compute the optimal gain and its associated forcing
notice, the frequency ω appears in matrix
and response over a range of n frequencies, the steps from 2 to 5 have to be reproduced n times in Table 6. Martini
et al. [42] oﬀered an alternative resolvent approach based on a time-stepping method to compute simultaneously the
optimal gains associated with several frequencies.

= (iωI

A)−

R

R

−

Steps Matrix-free algorithm
Compute Cv:
1
1.1
1.2
1.3
1.4
1.5
1.6

Compute v1 = P v
Solve linear system v2 =
Compute v3 = QE v2
Solve linear system v4 =
Compute v5 = P∗ v4
Update v = v5.

v1 with sparse LU algorithm

R
R∗v3 (LU decomposition of

done at step 1.2)

R

Table 5: Matrix-free pseudo-algorithm

Read geometry and state vector
Compute norm matrices QE & QF
Compute prolongation/restriction matrix P
Construct Jacobian A (see Table 3)

Initialisation:

Steps Resolvent algorithm
1
1.1
1.2
1.3
1.3
2
2.1
2.2
3
3.1
3.2
4
5

Deﬁnition of Hermitian matrix C:

A

Construct matrix iωI
−
Deﬁne matrix-vector product Cv (see Table 5)
Solve generalised eigenvalue problem (eq. (53)):
Arnoldi method with matrix-free algorithm
Store the largest eigenvalue µ2 and its eigenvector ˇf

Solve linear system ˇq =
R
Write optimal gain µ, forcing ˇf and response ˇq.

P ˇf

Table 6: Resolvent mode pseudo-algorithm

2.7.2. Sensitivity of optimal gains

Linear sensitivity of an optimal gain to base-ﬂow modiﬁcation (Eq. (54)) or to steady forcing (Eq. (55)) may be
computed following a similar method as the one described in §2.6.3. Details of the calculation are given in Mettot
[45].

14

        
        
q µ2

∇

Q

(cid:12)(cid:12)(cid:12)
=

= 2µ2 Real

Q−

(cid:16)

1 ˇH′∗QF ˇf
(cid:17)

2µ2 Real

Q−

1A∗−

(cid:16)

1 ˇH′∗QF ˇf
(cid:17)

−

(54)

(55)

with ˇH′ deﬁned as H( ˇq, δq) = ˇH′δq.

2.8. Linear 3D perturbations

f µ2

∇

Q

(cid:12)(cid:12)(cid:12)

The extension of global stability analysis to linear 3D perturbations follows Bugeat et al.

[8], however, the
linearisation is here performed by Algorithmic Diﬀerentiation and not by ﬁnite diﬀerence method. The base-ﬂow
being assumed homogeneous in the z-direction, the perturbation ﬁeld can be searched under the form:

q′(x, y, z, t) = ˆq(x, y)eλt+iβz,

(56)

where β is the real wavenumber in the z-direction. A similar form can be assumed for the optimal response and
forcing in the case of an input-output resolvent analysis. These perturbations can therefore be studied on the same
2D mesh without discretisation of the z-direction. The z-dependency of the forcing and response are taken into
account analytically. One can split the 3D residual R3D as the sum of the 2D discretised residual R and its z-derivative
components Rz:

For the compressible Navier-Stokes equations, the Rz residual can be written as the sum of three functions:

R3D = R + Rz.

Rz(q) =

αk(q)

Xk

∂ak(q)
∂z

+

Xl

λl(q)

∂2bl(q)
∂z2

+

Xm

γm(q)

∂cm(q)

∂z ⊙

∂dm(q)
∂z

,

(57)

(58)

where the explicit deﬁnitions of the various introduced functions are given in Appendix B. Notation
element-wise product of two matrices or vectors (Hadamard product). The linearisation of equation (58) yields:

⊙

refers to the

Rz(q + q′) = Rz(q) +

∂Rz

q

∂q (cid:12)(cid:12)(cid:12)(cid:12)(cid:12)

q′ =

Xk  

αk(q) +

λl(q) +

Xl  

∂
∂z  

q′

!

ak(q) +

∂2
∂z2  

q′

!

bl(q) +

∂αk

q

q

∂λl

∂q (cid:12)(cid:12)(cid:12)(cid:12)(cid:12)
∂q (cid:12)(cid:12)(cid:12)(cid:12)(cid:12)

∂ak

q

∂bl

∂q (cid:12)(cid:12)(cid:12)(cid:12)(cid:12)
∂q (cid:12)(cid:12)(cid:12)(cid:12)(cid:12)

+

q′

!

+

q′

!

q

∂cm

q

∂q (cid:12)(cid:12)(cid:12)(cid:12)(cid:12)

As the base-ﬂow is homogeneous in the z-direction, all z-derivatives of q in equation (59) vanish. Furthermore, only
ﬁrst-order terms for small ﬂuctuations q′ are kept so it reduces to:

γm(q) +

Xm  

∂γm

q

∂q (cid:12)(cid:12)(cid:12)(cid:12)(cid:12)

∂
∂z  

q′

!

cm(q) +

q′

! ⊙

∂
∂z  

dm(q) +

(59)

q′

!

∂dm

q

∂q (cid:12)(cid:12)(cid:12)(cid:12)(cid:12)

Rz(q + q′) = Azq′ =

αk(q)

Xk

∂q′
∂z

+

λl(q)

Xl

∂ak

q

∂q (cid:12)(cid:12)(cid:12)(cid:12)(cid:12)

∂2q′
∂z2

∂bl

q

∂q (cid:12)(cid:12)(cid:12)(cid:12)(cid:12)

Taking into account equation (56), the full 3D Jacobian A3D therefore reads:

A3D q′ = (A + Az) q′ =

A + iβ

αk(q)

Xk

β2

q −

Xl

λl(q)

∂ak

∂q (cid:12)(cid:12)(cid:12)(cid:12)(cid:12)

∂bl

∂q (cid:12)(cid:12)(cid:12)(cid:12)(cid:12)

q


Both matrices

k αk(q) ∂ak
∂q

and

l λl(q) ∂bl
∂q

are computed using Algorithmic Diﬀerentiation.

P

Numerically, the 3D linear extension only requires to compute two additional matrices of much smaller size than
the 2D Jacobian and to ﬁll the Jacobian with complex entries. This is an aﬀordable computation cost which results in
practice in approximately a 30% increase in RAM (60% increase in CPU time).

P

q

(cid:12)(cid:12)(cid:12)(cid:12)





q

(cid:12)(cid:12)(cid:12)(cid:12)

15

(60)

(61)

q′.

Computing global modes and resolvent modes consist in replacing in Tables 4 and 6, the 2D Jacobian A by the 3D
Jacobian A3D deﬁned in equation (61) where the wavenumber β appears. Then, if one studies the most unstable global
mode over a range of M wavenumbers β then this adds a further loop of M iterations on the steps from 2 to 4 in Table
4 (steps from 2 to 5 in Table 6).

Linear sensitivity described in §2.6.3 may also be extended to 3D perturbations. However, the following devel-
opments are correct only for 2D sensitivity (homogeneous gradient in z-direction) of eigenvalue/optimal gain of 3D
modes. Similarly to the equation (61), the 3D Hessian operator can be written as H3D( ˆq, q) = H( ˆq, q) + Hz( ˆq, q). One
should notice that the base-ﬂow q remains 2D and only the eigenmode ˆq brings a new 3D contribution. From the
equations (25) and (27):

From the equation (61), the following expression may be derived:

H3D( ˆq, q) =

∂ (A3D ˆq)
∂q

q

(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)

β2

−

Xl

(62)

ˆq

(63)

H3D( ˆq, q) = H( ˆq, q) +

+ αk(q)

iβ




Xk

∂αk

∂ak





q

∂q (cid:12)(cid:12)(cid:12)(cid:12)(cid:12)

q

∂q (cid:12)(cid:12)(cid:12)(cid:12)(cid:12)

∂2ak

q

∂q2 (cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)





+ λl(q)

∂λl

∂bl





q

∂q (cid:12)(cid:12)(cid:12)(cid:12)(cid:12)

q

∂q (cid:12)(cid:12)(cid:12)(cid:12)(cid:12)

∂2bl

q

∂q2 (cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)







The additional matrices are again computed with AD. Therefore, the 2D sensitivity of a 3D mode is given by the same
equations as the one of a 2D mode but by replacing the 2D Hessian by the 3D Hessian written in equation (63).

3. Validation

The BROADCAST code and its stability tools are validated on a circular cylinder at low Mach number [57, 19]
and on a hypersonic boundary layer developing on an adiabatic ﬂat plate [8]. These cases validate the solver on
both Cartesian and curvilinear grids as well as for both hypersonic and incompressible regimes. Computations are
performed on HPC with the following features: 128 GB RAM & 2 sockets of 12 cores (Broadwell Intel Xeon CPU
E5-2650 v4 at 2.2 GHz).

3.1. Cylinder ﬂow

In the following, the base-ﬂow around a circular cylinder at low Mach number, global stability, sensitivity of

growth rate and weakly nonlinear analysis at the bifurcation critical point are performed.

3.1.1. Geometry, mesh, boundary conditions and base-ﬂow

∞

∞

∞

The circular cylinder is studied for low-Mach number ﬂow to allow validation with incompressible results. The
). The freestream Mach number is
= 288 K and several Reynolds numbers are computed between

Navier-Stokes equations are non-dimensionalised by the triplet (ρ
M = 0.1 and the freestream temperature is T
Re = 40 and Re = 100 with the Reynolds number deﬁned as Re = ρ

with D the diameter of the cylinder.

D/µ

, U

, T

U

∞

∞

∞

∞

The computational domain is circular with an outer radius of 100D. The O-mesh is curvilinear with a stretching
in the wall-normal direction. The mesh is ﬁne enough in the wall-tangent direction to get a smooth curvilinear grid
where the high-order numerical scheme remains valid [51, 20]. The reference mesh size is 630 points in the wall-
tangent direction and 300 points in the wall-normal direction. An adiabatic no-slip wall condition is prescribed at the
surface of the cylinder. This is a Dirichlet condition for velocity and a boundary layer assumption resulting in a zero
wall-normal pressure gradient at the interface (gradient computed at second order under the assumption of a Cartesian
regular grid at the interface). A non-reﬂecting condition is imposed at the outer radius with the free-stream conditions
taken as reference. It is based on the characteristic relations and it determines pressure, density and velocity depending
on the directions of the ingoing/outgoing characteristics [50]. Connectivity conditions are added (through additional
ghost cells) to close the mesh in the upstream part.

We choose the ﬁfth order numerical spatial scheme and the base-ﬂow (Figure 3) was converged up to a decrease
of 12 orders of magnitude of the L2 norm of the residual in 11 Newton iterations starting from a constant reference
state for several Reynolds numbers around the ﬁrst bifurcation.

16

Figure 3: Streamwise velocity of the base-ﬂow at Re = 46.8 and M = 0.1.

3.1.2. Global modes

The eigenvalue problem (3) for global stability is solved at diﬀerent Reynolds numbers to ﬁnd the most unstable
global mode. The spectrum at Re = 46.8 is plotted in Figure 4, which corresponds to criticality: λ = σ + iω, with
σ = 0. The eigenvalues λ are normalised by U
/D. The most unstable mode and its associated adjoint mode at
criticality are plotted in Figure 5.

∞

1.0

0.8

0.6

0.4

0.2

ω

0.0
−0.200 −0.175 −0.150 −0.125 −0.100 −0.075 −0.050 −0.025 0.000

σ

Figure 4: Discretised spectrum (partial view) of the eigenvalues at Re = 46.8 and M = 0.1.

Evolution of the growth rate of the most unstable eigenvalue with Reynolds number is plotted in Figure 6a and
compared with the calculations of Fabre [19], which was obtained with an incompressible solver. Overall, good
agreement is achieved. Furthermore, 3D instabilities computed with the 3D Jacobian A3D at Re = 100 show the same
evolution of the growth rate with the spanwise wavenumber β (Figure 6b) normalised by the diameter D as the one
provided by incompressible Navier-Stokes equations discretised with FreeFEM software [29, 40] (mesh of 138708
triangles with P2 and P1 elements).

3.1.3. Linear sensitivity of eigenvalue

In Figure 7, we show the sensitivity of the critical growth rate to a steady source term
∇
recover the same sensitivity regions and bounds as found in Figure 15(a) by Mettot et al. [46].

f σ
(cid:12)(cid:12)(cid:12)

Q (see eq. (34)). We

17

(a) Real part of the normal velocity of the direct mode ˆq1 at Re = 46.8 and M = 0.1. (b) Real part of the normal velocity of the adjoint mode q†1 = Q−

1 ˜q1 at Re = 46.8

and M = 0.1.

Figure 5: Direct and adjoint modes. Same normalisation as in Sipp and Lebedev [57].

Broadcast
Fabre

0.12

0.10

0.08

0.06

0.04

0.02

0.00

−0.02

σ

σ

0.125

0.100

0.075

0.050

0.025

0.000

−0.025

−0.050

Broadcast
Freefem

40

50

60

70
Re

80

90

100

0.0

0.2

0.4

0.6

0.8

1.0

β

(a) Evolution of the growth rate with Reynolds number for β = 0 and M = 0.1.
Comparison with the incompressible results obtained by Fabre et al. [19].

(b) Evolution of the growth rate with the wavenumber β at Re = 100 and M = 0.1.
Comparisons done with incompressible results obtained with FreeFEM software
[29, 40].

Figure 6: Growth rate as a function of Reynolds number and spanwise wavenumber for cylinder ﬂow at M = 0.1.

3.1.4. Amplitude equations

The weakly nonlinear analysis is compared to the results given in Sipp and Lebedev [57]. We focus on the
coeﬃcients of the cubic term, since its sign determines the super-critical (real part of µ + ν + ξ > 0, see (42)-(44))
or sub-critical (real part of µ + ν + ξ < 0) nature of the bifurcation. They are computed from the diﬀerent modes ˆq1,
˜q1, ˆq20 and ˆq22 (Eq. (36)-(39)). The modes are plotted in Figures 5 and 8. The coeﬃcients, computed for Re = 46.8,
M = 0.1 and β = 0 with the same normalisation scheme as in Sipp et al., are the following:

33.2i

µ = 9.24
ν =
−
−
ξ = 0.00032

−
0.31

0.87i

0.00095i

−

(64)

(65)
(66)

We note that the coeﬃcient ξ involving the third-order derivative term is negligible with respect to the two other

18

Figure 7: Intensity and direction of the momentum component of the growth rate sensitivity to a steady source term
BROADCAST code. Similar to the Figure 15(a) in Mettot et al. [46].

Q computed with

∇

f σ
(cid:12)(cid:12)(cid:12)

(a) Streamwise velocity of the zeroth harmonic ˆq20 at Re = 46.8 and M = 0.1.

(b) Real part of the streamwise velocity of the second harmonic ˆq22 at Re = 46.8
and M = 0.1.

Figure 8: Higher harmonics used to compute the Stuart-Landau coeﬃcients µ and ν. Same normalisation as in Sipp and Lebedev [57].

3 between ν and ξ). This stems from the fact that M = 0.1 is close to the
coeﬃcients µ and ν (ratio about 10−
incompressible regime, for which this constant is strictly zero. This is due to the quadratic nature of the incompressible
Navier-Stokes equations, so that the third-order derivative of the residual is strictly zero. However this contribution
would not disappear for higher Mach numbers and would therefore be mandatory to assess the nature of a bifurcation
in transsonic and supersonic conﬁgurations. The µ and ν coeﬃcients can be compared to the incompressible values
µREF = 9.4
0.87i [57]. The discrepancy remains small (maximum 10% for Im(µ)) but
cannot be reduced by any grid reﬁnement or domain enlargement. It rather appears linked to the behaviour of the
compressible Navier-Stokes equations as the Mach number decreases. Indeed, compressibility has a strong impact on
the global modes, which deviate from the incompressible solutions when the Mach number is above 0.1. Conversely,
at Mach numbers lower than M = 0.02, the system of equations is not well-conditioned making the calculation of the
eigenmodes inaccurate. This comes from the division by a quasi-zero Mach number in the perfect gas law (eq. (9)).

30i and νREF =

0.30

−

−

−

19

3.2. Adiabatic ﬂat plate

In the following, the base-ﬂow of a hypersonic boundary layer over an adiabatic ﬂat plate, the resolvent analysis

and the sensitivity of the optimal gain are performed.

3.2.1. Geometry, mesh and boundary conditions

∞

∞

∞

The adiabatic ﬂat plate is studied in the hypersonic regime and validated against Bugeat’s study [8]. The Navier-
). The freestream Mach number is M = 4.5,
106 with the unit Reynolds

Stokes equations are again non-dimensionalised by the triplet (ρ
the freestream temperature is T
∞
number deﬁned as Reunit = ρ
U

= 288 K and the unit Reynolds number is Reunit = 3.4
/µ

, U

, T

×

∞

∞

∞

.

The ﬂat plate geometry is studied in a rectangular computational domain. The domain starts with a thin boundary
106. The height of the domain is high enough in order not to
layer proﬁle at Rex,in = 8160 and ends at Rex,out = 2
aﬀect the development of the boundary-layer or the stability analysis. In practice, the domain height is about 9 δ∗out
with δ∗out the compressible displacement thickness at the outlet. This gives Rey,top = 119000. The Cartesian mesh is
equispaced in the x-direction and stretched in the wall-normal direction (y-direction). The stretching has the following
properties: maximum y+
1, cell height geometric growth rate of 2% from y = 0 till y = 3δ∗out where an equivalent
∆y+
130. The reference
mesh has the size (Nx, Ny) = (1000, 150) which gives N = 150000 grid points.

10 and then a growth rate increase from 2% till 10% from y = 3δ∗out till y = Ly where ∆y+

×

≤

≈

≈

Four diﬀerent boundary conditions are applied around the rectangular domain. First, at the inlet, a Dirichlet
boundary condition is applied since the ﬂow is supersonic. The imposed ﬂow proﬁle corresponds to a compressible
self-similar solution for u, v, ρ and T . A self-similar solver for compressible boundary layer ﬂow without pressure
gradient is implemented in BROADCAST. It uses the Levy-Lee transformation, the Chapman-Rubesin [10] linear law
for viscosity and a shooting method to solve the self-similar equations [3, 11]. One should note that the wall-normal
velocity v computed from self-similar equations is small but not zero in the free-stream. This velocity is imposed
at the inlet without any further treatment. At the outlet, an extrapolation boundary condition is applied (the ﬂow is
overall assumed supersonic). It is known that the ﬂow is actually not supersonic close to the wall at the inlet and
outlet. A speciﬁc inlet boundary condition splitting the ﬂow into a supersonic part and a subsonic part and applying
respectively a complete Dirichlet and a non-reﬂecting treatment was implemented but did not alter the boundary layer
development. The supersonic inlet and outlet boundary conditions are kept for robustness in supersonic computations.
Then, an adiabatic no-slip wall is prescribed at the bottom while a non-reﬂecting condition is employed at the top
boundary.

3.2.2. Base-ﬂow

The compressible self-similar solution is taken as initial state for the Newton method. On the reference mesh, at
M = 4, with the seventh order numerical scheme, the Newton algorithm converges in 7 iterations (high initial CFL
as the self-similar solution is close to the base-ﬂow solution) and decreases the residual L2 norms by 12 orders of
magnitude.

Boundary layer proﬁles at Mach number M = 4 are extracted at diﬀerent streamwise locations and plotted with
respect to the self-similar variable y
Rex
2 on Figures 9. The base-ﬂow computed remains self-similar and the diﬀerent
x
proﬁles overlap. Furthermore, streamwise velocity and temperature proﬁles are validated against ¨Ozgen and Kircali
[48]. Both show good agreement with a maximum diﬀerence of 1% of the wall temperature prediction.

q

Then, a base-ﬂow solution is computed at M = 4.5 to perform the stability analysis. The slope of the ratio of
the Reynolds number based on the displacement thickness on the square root of the Reynolds number Reδ∗ / √Rex is
computed to compare the base-ﬂow with Bugeat et al. [8]. BROADCAST code gives a ratio of 8.29 while Bugeat has
8.32 meaning that both boundary layer base-ﬂows follow a similar evolution.

3.2.3. Resolvent modes

For the resolvent modes, we consider Bugeat’s case [8] at M = 4.5. The frequency is normalised as F =

∞

(ωLref) /U

with Lref = Re−

1
unit. The wavenumber β is also normalised with the reference length scale Lref.

The Chu’s energy restricted to Rex

106 and Rey
59500 is chosen for QE. For QF , we consider
the discrete norm deﬁned in equation (50) with momentum forcings and same spatial restriction as for QE with the
restriction / prolongation matrix P. Optimal gains for 2D perturbations (β = 0) are plotted in Figure 10 at diﬀerent

1.75

≤

≤

×

20

10

8

6

4

2

0

x
/
2
/
x
e
R
p

y

Broadcast: Rex =1.0e+05
Broadcast: Rex =1.0e+06
Broadcast: Rex =1.5e+06
Ozgen-Kircali

0.0

0.2

0.4

0.6

u/u∞

0.8

1.0

10

8

6

4

2

0

x
/
2
/
x
e
R
p

y

Broadcast: Rex =1.0e+05
Broadcast: Rex =1.0e+06
Broadcast: Rex =1.5e+06
Ozgen-Kircali

1.0

1.5

2.0

2.5
T /T∞

3.0

3.5

(a) Streamwise velocity proﬁle.

(b) Temperature proﬁle.

Figure 9: Boundary layer proﬁles at M = 4 plotted with respect to the self-similar variable at diﬀerent streamwise locations. Comparison with
¨Ozgen and Kircali [48].

frequencies. Above M = 4, Mack [39] showed the existence of an inﬁnite number of higher frequency modes. At
M = 4.5, the second Mack mode has the largest ampliﬁcation rate and corresponds to the frequency with the highest
peak in Figure 10. Because the second Mack mode appears at high frequency, a ﬁne mesh is necessary to converge
well the peak value of the optimal gain. One may notice in Bugeat et al. [8] that a twice ﬁner mesh (from Nx = 1600
to Nx = 3200) improved the optimal gain by 50 %. The suboptimal gain is also plotted in Figure 10 and appears 4
times smaller than the optimal gain at the frequency of the second Mack mode (F = 2.3

4).

10−

×

×107

Broadcast - Nx = 1000 - 7th order
Broadcast - Nx = 1000 - 7th order - suboptimal
Broadcast - Nx = 2800 - 3rd order
Bugeat - Nx = 3200
Bugeat - Nx = 1600

1.6

1.4

1.2

1.0

µ

0.8

0.6

0.4

0.2

0.00005

0.00010

0.00015
F

0.00020

0.00025

Figure 10: Optimal gains µ for 2D instabilities (β = 0) as a function of normalised frequency F. Comparison with Bugeat et al.[8].

The optimal gain convergence is assessed at the second Mack mode frequency F in Table 7. The computational
performance (RAM and elapsed time) are compared for diﬀerent mesh reﬁnements and scheme orders. The number
of cells per wavelength ξ in x-direction Nc/ξ is also shown for mesh convergence. According to the optimal forcing
and response shapes plotted in Figure 11, the streamwise direction is the critical one as the wave is mainly oriented
in the x-direction. The mesh convergence in y-direction has also been assessed and Ny = 150 appears to be suﬃcient.
The seventh order scheme with 225000 points (Nx = 1500) is enough to reach the peak gain while a coarser mesh
with Nx = 1000 at the same scheme order gives a gain smaller by only 1%. Taking the latter as the reference, a
comparison of the performance of the diﬀerent scheme orders is presented in Table 8. All computations are run at the

21

25000

20000

15000

y

e
R

10000

5000

0

25000

20000

15000

y

e
R

10000

5000

0

500000

1000000
Rex

1500000

2000000

500000

1000000
Rex

1500000

2000000

(a) Streamwise momentum component of the optimal forcing ˇf .

(b) Density component of the optimal response ˇq.

Figure 11: Optimal forcing and response for the second Mack mode at F = 2.3
value. The black dash-dotted line denotes the generalised inﬂection point.

×

10−

4 (β = 0). Red (resp. blue) color is negative (resp. positive)

same memory cost (38 GB RAM) by a mesh adjustment in the streamwise direction and the performance criterion is
4. Results from this iso-computation cost
again the optimal gain at the second Mack mode frequency F = 2.3
analysis underlines two elements. First, at this frequency, increasing the numerical scheme order from a low order
(third order) to a ﬁfth or a seventh order is heavily beneﬁcial as the 3rd order scheme ends up at a smaller gain than all
the other schemes (see Table 7 and Figure 10). Secondly, increasing to a high order (ninth order) is not always the best
solution. Indeed to keep the same memory cost, a high order scheme must be applied on a coarser mesh. However,
a minimum number of cells per wavelength is always required, approximately here around 12 to capture the second
Mack mode gain. It means that depending on the considered frequency, it exists an optimal scheme order in terms of
memory that the user may have to choose.

10−

×

Optimal
gain µ

1.70
1.70
1.69
1.23
1.22

107
107
107
107
107

×
×
×
×
×

Scheme
order
9th
7th
7th
3rd
3rd

Nx

2000
1500
1000
20000
6000

Nc/ξ RAM Elapsed
time (s)
1530
480
300
10800
1821

(GB)
113
56
38
285
99

24
18
12
240
72

Table 7: Mesh convergence: optimal gain convergence at the second Mack mode frequency F = 2.3
wavelength in the streamwise x-direction. Ny = 150. Only one Krylov vector computed to reach 10−

×

10−

4. Nc/ξ is the number of cells per

4 convergence in Arnoldi algorithm.

10−

×

Optimal gain is then computed with β , 0. The three-dimensional gains (Figure 12) compare well with those of
Bugeat et al. [8], highlighting streaks around β = 2.2 at zero frequency and the ﬁrst oblique Mack mode strongest for
β = 1.2 and F = 2.9

5.

Then the eigenvectors for the three predominant modes (streak, ﬁrst and second Mack modes) are compared
through their streamwise energy growth. An energy density is deﬁned as the integral of the local energy in the
ymax
2 dy. From Chu’s energy deﬁnition (eq.
wall-normal direction. For kinetic energy, it is written dK(x) =
0
(48)), a Chu’s energy density is deﬁned similarly and written dChu(x). Eventually, a forcing density is deﬁned as
R
2 dy. Forcing and Chu’s energy densities are plotted in Figures 13. Forcing and Chu’s energy densities
dF(x) =
have similar trends to the ones predicted by Bugeat et al. [8]. These results can be linked with local linear stability.
The peak of optimal forcing density corresponds with branch I (convectively stable towards unstable bound) while the
the peak of optimal response density if it exists inside the domain corresponds with branch II (convectively unstable

ymax
0
R

ρ
|

ˇf
|

ˇv
|

|

22

Optimal
gain µ

1.66
1.69
1.68
1.13

107
107
107
107

×
×
×
×

Scheme
order
9th
7th
5th
3rd

Nx

Nc/ξ

700
1000
1500
2800

8.4
12
18
33.6

nnz in
Jacobian
106
59
106
72
106
85
106
93

×
×
×
×

RAM Elapsed
time (s)
(GB)
290
38
300
38
360
38
440
38

Table 8: Iso-computation cost at 38 GB RAM: optimal gain at the second Mack mode frequency F = 2.3
the total number of non-zero entries in the Jacobian matrix. Ny = 150. Only one Krylov vector computed to reach 10−
algorithm.

10−

×

4. nnz in Jacobian represents
4 convergence in Arnoldi

×108

×107

1.25

1.20

1.15

1.10

µ

1.05

1.00

0.95

0.90

Broadcast - β = 1
Broadcast - β = 1.2
Broadcast - β = 1.4
Bugeat - β = 1
Bugeat - β = 1.2
Bugeat - β = 1.4

0.000030
F

0.000020

0.000025

Broadcast
Bugeat

4.5

4.0

3.5

3.0

2.5

µ

2.0

1.5

1.0

0.5

0.000035

0.000040

0

1

2

3

β

4

5

6

(a) Optimal gain with respect to the normalised frequency at the normalised
wavenumbers β = 1, β = 1.2 and β = 1.4. Peaks refer to the ﬁrst Mack mode.

(b) Optimal gain with respect to the normalised wavenumber at zero frequency:
Streaks. The peak is related to a streak.

Figure 12: Optimal gain: 3D linear instabilities. Comparison with Bugeat et al. [8].

towards stable bound) [58].

100

10−1

F
d

10−2

10−3

10−4

Broadcast - Streak
Broadcast - 1st mode
Broadcast - 2nd mode
Bugeat - Streak
Bugeat - 1st mode
Bugeat - 2nd mode

0

200000 400000 600000 800000 1000000 1200000 1400000 1600000 1800000

Rex

(a) Forcing density.

100

10−1

u
h
C
d

10−2

10−3

10−4

Broadcast - Streak
Broadcast - 1st mode
Broadcast - 2nd mode
Bugeat - Streak
Bugeat - 1st mode
Bugeat - 2nd mode

0

200000 400000 600000 800000 1000000 1200000 1400000 1600000 1800000

Rex

(b) Chu’s energy density.

Figure 13: Forcing and Chu’s energy density of the streaks, ﬁrst and second Mack modes normalised by their maximum value with respect to the
Reynolds number based on x. Comparison with Bugeat et al. [8].

23

3.2.4. Linear sensitivity of optimal gain

Linear sensitivity of the optimal gain is computed on an adiabatic ﬂat plate. However, to our knowledge, such
sensitivity analysis has not been performed on hypersonic ﬂows yet. For sake of comparison, we consider Brandt et
al. test case [7] at incompressible regime.

The freestream Mach number is M = 0.1, Reynolds number is Re = 6

105. The computational domain extends
105.
from Rex,in = 4300 to Rex,out = 7.5
105. The following boundary
The height of the domain is about 9 δ with δ the displacement thickness at Rex = 6
conditions are applied: Blasius solution prescribed at inlet, adiabatic no-slip wall at bottom, non-reﬂecting condition
at top and non-reﬂecting subsonic outlet with the free-stream pressure taken as reference (zero pressure gradient
assumed). A similar mesh to the hypersonic boundary layer is chosen with (Nx, Ny) = (1000, 150).

105, the optimisation for the resolvent mode is restrained up to Rex

≤

×

×

×

×

6

In Brandt et al. [7], the largest optimal gain at zero frequency is obtained for the streaks at βδ = 0.94. We compare
the sensitivity of this 3D mode to base-ﬂow modiﬁcation (Eq. 54) and to forcing (Eq. 55) obtained by BROADCAST
with the one from Brandt et al. [7] (Figure 14). The wall-normal proﬁle of the streamwise component of the sensitivity
= 400 with δ∗ the displacement thickness (Figure 14b). They show good
to base-ﬂow modiﬁcation is plotted at Reδ∗
agreement.

4.0

3.5

3.0

2.5

2.0

1.5

1.0

0.5

0.0

δ
/
y

100000

200000

300000
Rex

400000

500000

600000

∗

δ
/
y

14

12

10

8

6

4

2

0

Broadcast
Brandt

−1.0

−0.5

0.0

0.5

1.0

Q. Red (resp.
(a) Streamwise component of the sensitivity to steady forcing
blue) color is negative (resp. positive) gradient. Similar to the Figure 19(a) in
Brandt et al. [7].

(cid:12)(cid:12)(cid:12)

∇ f µ2

(b) Wall-normal proﬁle of the streamwise component of the sensitivity to base-ﬂow
= 400 normalised by its maximum value. Compari-
modiﬁcation
son with Brandt et al. [7].

Q at Reδ∗

∇q µ2

(cid:12)(cid:12)(cid:12)

Figure 14: Sensitivity of the optimal gain for the streaks (βδ = 0.94). Comparison with Brandt et al. [7].

4. Conclusion

4.1. Conclusion

The BROADCAST code and the methods implemented have been presented and assessed. The high-order scheme
associated with low dissipation has showed accurate results in agreement with literature at a low computational cost for
0.1 to
resolvent gains computations at high frequencies. Furthermore, it may be used to Mach numbers as low as M
explore the incompressible regime both on Cartesian and curvilinear meshes. Finally the Algorithmic Diﬀerentiation
tool allows accurate and straightforward evaluations of the various residual derivatives that are necessary for stability,
sensitivity or weakly nonlinear analyses.

≈

4.2. Future developments

The BROADCAST code is still in development. RANS equations with various turbulence models will be imple-
mented as well as multi-block management. The next major stability feature will be the global nonlinear stability tool
oﬀered in Rigas et al. [52]. For a ﬁnite amplitude forcing, the response resulting from a limited number of harmonics
and their interactions can be studied through an adjoint optimisation algorithm. It will rely on the Time Spectral
Method (TSM) framework [9].

24

Acknowledgements

This work is funded by the French Agency for Innovation and Defence (AID) as part of the UK-FR PhD program.

Appendix A. Convective ﬂux: the Flux-Extrapolated MUSCL scheme

The FE-MUSCL scheme has been assessed for hypersonic ﬂows by Sciacovelli et al. [55]. A description of the
scheme and its implementation in BROADCAST follows. In 1D, assuming a regular grid spacing h, from the equation
(13), the discrete scheme for inviscid ﬂow is written for the cell index i:

dqi
dt
with δ the diﬀerence operator between two cells: δ(
interface i + 1

(δF)i
h
= (
2 . For a ninth-order scheme, this ﬂux is written:

)i+ 1

+

·

2

= 0

(A.1)

)i+1 −

·

(

·

)i and Fi+ 1

2

the inviscid numerical ﬂux at cell

Fi+ 1

2

=

1
6

I

−

δ2 +

1
30

δ4

−

1
140

δ6 +

1
630

δ8

!

µ f

D

−

!i+ 1

2

(A.2)

with f the physical ﬂux, µ the cell average operator: µ(

)i+1 + (

)i) and D the numerical dissipation term.

The third order scheme is for instance constructed keeping only the two ﬁrst terms in the brackets. As ﬂow
discontinuities are inherent in compressible ﬂows, the dissipation coeﬃcient is required and written as a nonlinear
. Then, the dissipation coeﬃcient
artiﬁcial viscosity term associated with the spectral radius of the inviscid ﬂux λi+ 1
Di+ 1

is written:

2

)i+ 1

2

·

= 1

2 ((

·

·

2

(A.3)

1

κ2 ≤

≤

(A.4)

with ǫ2i+ 1
and κ4 ≈

2

= κ2max (φi, φi+1) and ǫ4i+ 1
1
1260 .

2

= max

0, κ4 −

(cid:18)

Di+ 1

2

= λi+ 1

2

ǫ2δq + ǫ4δ9q

i+ 1
2
(cid:17)

(cid:16)
ǫ2i+ 1
2 (cid:19)

. The dissipation coeﬃcients range respectively 0

φi =

1
2 (cid:18)

1

−

tanh

2.5 + 10

(cid:18)

δx
c ∇ ·

v

(cid:19)(cid:19) ×

(

v)2

(
∇ ·
v)2 +

v

2 + ǫ × (cid:12)(cid:12)(cid:12)(cid:12)(cid:12)

2pi + pi
pi+1 −
−
pi+1 + 2pi + pi
−

1

1 (cid:12)(cid:12)(cid:12)(cid:12)(cid:12)

|

|∇ ×

∇ ·
with c the local sound velocity, δx the local horizontal cell size, ǫ a small ﬁxed parameter to avoid a division by zero
and pi the local pressure. In equation (A.4), the last term is the pressure based shock sensor of Jameson [34] and the
second term is the discrete form of Ducros’ vortex sensor which measures the ratio between the local divergence of
velocity and the velocity rotational [18]. The ﬁrst term is the sensor modiﬁcation oﬀered by Bhagatwala et al. [4]
which is switched on only in region of negative dilatation. These three sensors are put in series so that they bypass
each other in order to reduce the magnitude of the low-order dissipation. The sensor φ is then activated in region
of strong divergence of velocity typically around shocks so that the ﬂow discontinuities are well-captured. In vortex
regions, the sensor tends to zero and the dissipation is driven by the high-order term associated with κ4 which damps
high-frequency oscillations while minimising the level of numerical dissipation.

The stencil of this scheme needs (order+1)/2 cells in each direction to compute the inviscid ﬂux. For instance,
in 1D, the ninth order scheme requires 5 cells at the left and 5 cells at the right of the current cell. Close to the
computational domain boundaries, the appropriate number of ghost cells is added to the mesh. This treatment is
applied for the porous boundary conditions such as inﬂow, outﬂow and extrapolation. However, for wall boundaries,
another strategy is followed as oﬀered in [13]. The physical ﬂux is imposed at the ﬁrst mesh interface (ﬁrst cell layer)
and high-order oﬀ-centered schemes are used to compute the ﬂux in the next cell layers (from the second to the ﬁfth
cell layer for a ninth order scheme). The same order of accuracy is thus preserved everywhere, whether the ﬂux is
computed fully inside the domain, using ghost cells or close to a wall boundary condition.

25

  
k
1

k
1
2
3

k
1
2
3

k
1
2
3
4

k
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16

2
3 µ
2
3 w

αk
1

αk
1
∂µ
2
∂x
3
2
3 µ

αk
1
∂µ
2
∂y
3
2
3 µ

αk
1
∂µ
∂x
∂µ
∂y
µ

−
−
−

Continuity equation

ak
ρw

l

λl

bl m

γm

cm

dm

Momentum equation in x-direction

ρuw

µ ∂w
∂x

l
1

λl
µ

−

bl m
u
1

ak

−
w
∂w
∂x

Momentum equation in y-direction

ρvw

µ ∂w
∂y

ak

−
w
∂w
∂y

l
1

λl
µ

−

bl m
v
1

Momentum equation in z-direction

∂u

∂x + ∂v

∂y

l
1

λl
4
3 µ

−

bl m
w
1

(cid:17)

γm
1

−

γm
1

−

γm
4
3

−

cm
µ

dm
u

cm
µ

dm
v

cm
µ

dm
w

ak
ρw2 + p + 2
3 µ
u
v
∂x + ∂v

∂u

(cid:16)

∂y
Energy equation

2
3

αk
1
∂(µu)
∂x
2
3 µu
∂(µw)
∂x
−
µw
−
∂(µv)
2
∂y
3
2
3 µv
∂(µw)
∂y
−
µw
−
µ ∂w
∂x
−
u
−
µ ∂w
∂y
v
−
∂x + ∂v
∂u
(cid:16)
∂x + ∂v
2
(cid:16)
3 µw

−

∂u

∂y

∂y

l
1
2
3
4

λl
bl m
λ
T
1
−
µu
u
2
−
µv
v
3
−
4
3 µw w
4
−
5
6
7

γm
1
−
µ
−
u
−
µ
−
v
−
4
3 µ
−
4
3 w
−

cm
λ
u
µ
v
µ
w
µ

dm
T
u
u
v
v
w
w

ak
(ρE + p)w
w
∂w
∂x
u
∂u
∂x
w
∂w
∂y
v
∂v
∂y
u
µ ∂w
∂x
v
µ ∂w
∂y
w
µ
∂x + ∂v

∂u

∂y

(cid:17)
(cid:17)

Table B.9: 3D contributions in Navier-Stokes equations.

Appendix B. 3D contributions for the Jacobian operator

The 3D contributions gather all the z-derivatives components in the residual. They are listed in the table B.9. Most

of these terms vanish for a two-dimensional base-ﬂow as they involve the transverse velocity w.

26

Appendix C. Weakly nonlinear analysis equations

The method described in Sipp and Lebedev [57] for incompressible ﬂow, developing the Taylor expansion of the
residual up to the third order, is applied here on the general form given by the discretised equation (15). First, one
assumes that the analysis is performed in the vicinity of the critical Reynolds number so that a small parameter ǫ can
be deﬁned as ǫ2 = Re−
1
1. As it is dependent on the Reynolds number, the state vector q can be
c −
written as a Taylor expansion of the parameter ǫ:

1 with 0 < ǫ

Re−

≪

with q = q1(t) + ǫq2(t) + ǫ2q3(t).

q(t, ǫ) = q0 + ǫq1(t) + ǫ2q2(t) + ǫ3q3(t) = q0 + ǫq

(C.1)

The discretised residual R = R(q(t), ǫ) is a function of the state vector q(t) and the parameter ǫ. It is expanded
up to the third order for these two variables in equation (C.2). Some notations and deﬁnitions are introduced for
clarity. The Jacobian operator around the base-ﬂow, written A, is equal to ∂qR(q, 0) where ∂q(
)/∂q. Then,
q. In discrete form, it can be expressed as Hi(q, q) =
the Hessian operator appears too as H(q, q) =
j(∂q jqk Ri(q, 0))q jqk. As this is a symmetric operator, one gets H(q1, q2) = H(q2, q1). Similarly the third-order
i
q, has the same symmetrical properties and is written in

∂qqR(q, 0)q

) = ∂(

·

·

k
derivative operator, written T (q, q, q) =
P
discrete form as Ti(q, q, q) =

P

h
∂qqqR(q, 0)q
j(∂q jqkql Ri(q, 0))q jqkql.

hh

q

i

i

l

k
P

P

P

R(q(t), ǫ) = R(q0 + ǫq, ǫ) = R(q0) + ǫAq +

ǫ2
2

H(q, q) +

ǫ3
6

T (q, q, q) + ǫ2∂ǫR(q0, 0) + ǫ3∂qǫR(q0, 0)q

(C.2)

By introducing the equations (C.1) and (C.2) into the equation (15), written as dq(t)/dt = R(q(t), ǫ), one gets the

equation (C.3) below which will be studied at the diﬀerent orders of ǫ.

dq0
dt

+ ǫ

dq1
dt

+ ǫ2 dq2
dt

+ ǫ3 dq3
dt

= R(q0) + ǫAq1 + ǫ2

Aq2 +

"

1
2

H(q1, q1) + ∂ǫR(q0, 0)

+

#

(cid:2)
First, at order ǫ0, the base-ﬂow equation dq0/dt = 0 = R(q0, 0) is recovered and then q0 is the base-ﬂow solution.
Secondly, at order ǫ1, one gets the eigenvalue problem (C.4):

ǫ3

Aq3 + H(q1, q2)+

T (q1, q1, q1) + ∂qǫR(q0, 0)q1

(C.3)

#

1
6

The general solution is of the following form:

q1(t) =

dq1
dt −

Aq1 = 0

eiωt ˆq1 +

e−

iωt ˆq1

A

A

(C.4)

(C.5)

A

a complex scalar which represents the amplitude and depends on the slow time scale t1 = ǫ2t according to
with
the Stuart-Landau amplitude equation (35), ω the critical frequency and ˆq the ﬁrst eigenmode solution of the equation
(C.6).

Thirdly, at order ǫ2, the equation becomes:

(iωI

−

A) ˆq1 = 0

(C.6)

dq2
dt −

Aq2 =

1
2

H(q1, q1) + ∂ǫR(q0, 0) =

1
2 A

2e2iωtH( ˆq1, ˆq1) +

1
2
2 A

e−

2iωtH( ˆq1, ˆq1) +

|A|

2H( ˆq1, ˆq1) + ∂ǫR(q0, 0)

(C.7)

From the form of the equation (C.7), the solution is sought as:

27

with ˆq22 the second harmonic, ˆq20 the zeroth (mean ﬂow) harmonic and ˆq21 the base ﬂow modiﬁcation due to a ǫ
Reynolds increase, respectively solutions of the equations (C.9), (C.10) and (C.11).

q2(t) =

2e2iωt ˆq22 +

A

2
A

e−

2iωt ˆq22 +

2 ˆq20 + ˆq21

|A|

(C.8)

2iω ˆq22 −

A ˆq22 =

1
2

H( ˆq1, ˆq1)

A ˆq20 = H( ˆq1, ˆq1)

−

Fourthly, at order ǫ3, the remaining terms in the equation (C.3) give the equation (C.12).

A ˆq21 = ∂ǫR(q0, 0)

−

dq3
dt −

Aq3 = H(q1, q2) +

1
6

T (q1, q1, q1) + ∂qǫR(q0, 0)q1

In the equation (C.12), by computing only the terms proportional to eiωt, it reduces to the equation (C.13).

(C.9)

(C.10)

(C.11)

(C.12)

iωq3 −

Aq3 =

d
A
dt1

−

ˆq1 +

A

H( ˆq1, ˆq21) +

∂qǫR(q0, 0) ˆq1 +

A

2

A|A|

"

H( ˆq1, ˆq20) + H( ˆq1, ˆq22) +

3
6

T ( ˆq1, ˆq1, ˆq1)

#

(C.13)

Let’s introduce the adjoint mode ˜q1 solution of the adjoint eigenvalue problem (C.14).

Then, the goal is to recover the Stuart-Landau amplitude equation from the equation (C.13). As the latter is a
”vector” equation and the amplitude equation a ”scalar” equation, we compute the dot product of the equation (C.13)
with the adjoint mode. The left hand-side of the new equation becomes zero as described in the equation (C.15).

iωI

(

−

−

A∗) ˜q1 = 0

(C.14)

˜q1, q3i − h
iω
h

˜q1, Aq3i

= iω
˜q1, q3i − h
h

A∗ ˜q1, q3i

= iω
˜q1, q3i − h−
h

iω ˜q1, q3i

= iω
˜q1, q3i −
h

˜q1, q3i
iω
h

= 0

(C.15)

And the right hand-side gives the amplitude equation.

0 =

d
A
dt1 h

˜q1, ˆq1i

−

+

˜q1, H( ˆq1, ˆq21)

A (cid:16)h

+

i

˜q1, ∂qǫR(q0, 0) ˆq1i(cid:17)

h

+

A|A|

2

˜q1, H( ˆq1, ˆq20)
hh

i

+

˜q1, H( ˆq1, ˆq22)
h

+
i

1
2 h

˜q1, T ( ˆq1, ˆq1, ˆq1)

(C.16)

i#

d
A
dt1

=

⇒

A  

˜q1, H( ˆq1, ˆq21)
h
˜q1, ˆq1i
h

i

+ h

˜q1, ∂qǫR(q0, 0) ˆq1i
˜q1, ˆq1i
h

+

!

˜q1, H( ˆq1, ˆq20)
h
˜q1, ˆq1i
h
By comparison with the Stuart-Landau amplitude equation (35), one gets the expression of the coeﬃcients κ, µ, ν

˜q1, T ( ˆq1, ˆq1, ˆq1)
h
˜q1, ˆq1i
h

˜q1, H( ˆq1, ˆq22)
˜q1, ˆq1i
h

(C.17)

A|A|

+ h

1
2







+

i

i

i

2

and ξ given in the equations (41)-(44).

28

References

[1] Patrick R Amestoy, Iain S Duﬀ, Jean-Yves L’Excellent, and Jacko Koster. A fully asynchronous multifrontal solver using distributed dynamic

scheduling. SIAM Journal on Matrix Analysis and Applications, 23(1):15–41, 2001.

[2] Satish Balay, Shrirang Abhyankar, Mark Adams, Jed Brown, Peter Brune, Kris Buschelman, Lisandro Dalcin, Alp Dener, Victor Eijkhout,

W Gropp, et al. Petsc users manual. ANL-95/11, 2019.

[3] Guillaume B´egou. Pr´evision de la transition laminaire-turbulent dans le code elsA par la m´ethode des paraboles. PhD thesis, Toulouse,

ISAE, 2018.

[4] Ankit Bhagatwala and Sanjiva K Lele. A modiﬁed artiﬁcial viscosity approach for compressible turbulence simulations. Journal of Compu-

tational Physics, 14(228):4965–4969, 2009.

[5] Christophe Bogey and Christophe Bailly. A family of low dispersive and low dissipative explicit schemes for ﬂow and noise computations.

Journal of Computational physics, 194(1):194–214, 2004.

[6] Alessandro Bottaro, Peter Corbett, and Paolo Luchini. The eﬀect of base ﬂow variation on ﬂow stability. Journal of Fluid Mechanics, 476:

293–302, 2003.

[7] Luca Brandt, Denis Sipp, Jan O Pralits, and Olivier Marquet. Eﬀect of base-ﬂow variation in noise ampliﬁers: the ﬂat-plate boundary layer.

Journal of Fluid Mechanics, 687:503–528, 2011.

[8] Benjamin Bugeat, J-C Chassaing, J-C Robinet, and Pierre Sagaut. 3d global optimal forcing and response of the supersonic boundary layer.

Journal of Computational Physics, 398:108888, 2019.

[9] Claudio Canuto, M Yousuﬀ Hussaini, Alﬁo Quarteroni, A Thomas Jr, et al. Spectral methods in ﬂuid dynamics. Springer Science & Business

Media, 2012.

[10] Dean R Chapman and Morris W Rubesin. Temperature and velocity proﬁles in the compressible laminar boundary layer with arbitrary

distribution of surface temperature. Journal of the Aeronautical Sciences, 16(9):547–565, 1949.

[11] Yeunwoo Cho and Angelica Aessopos. Similarity transformation methods in the analysis of the two dimensional steady compressible laminar

boundary layer. Term paper, 2, 2004.

[12] Jean-Marc Chomaz. Global instabilities in spatially developing ﬂows: non-normality and nonlinearity. Annu. Rev. Fluid Mech., 37:357–392,

2005.

[13] Paola Cinnella and C´edric Content. High-order implicit residual smoothing time scheme for direct and large eddy simulations of compressible

ﬂows. Journal of Computational Physics, 326:1–29, 2016.

[14] Andrea Crivellini and Francesco Bassi. An implicit matrix-free discontinuous galerkin solver for viscous and turbulent aerodynamic simula-

tions. Computers & ﬂuids, 50(1):81–93, 2011.

[15] JD Crouch, A Garbaruk, and D Magidov. Predicting the onset of ﬂow unsteadiness based on global instability. Journal of Computational

Physics, 224(2):924–940, 2007.

[16] Lisandro D Dalcin, Rodrigo R Paz, Pablo A Kler, and Alejandro Cosimo. Parallel distributed computing using Python. Advances in Water

Resources, 34(9):1124–1139, 2011.

[17] Miguel Fosas De Pando, Denis Sipp, and Peter J Schmid. Eﬃcient evaluation of the direct and adjoint linearized dynamics from compressible

ﬂow solvers. Journal of Computational Physics, 231(23):7739–7755, 2012.

[18] F Ducros, V Ferrand, Franck Nicoud, C Weber, D Darracq, C Gacherieu, and Thierry Poinsot. Large-eddy simulation of the shock/turbulence

interaction. Journal of Computational Physics, 152(2):517–549, 1999.

[19] David Fabre, Vincenzo Citro, D Ferreira Sabino, Paul Bonneﬁs, Javier Sierra, Flavio Giannetti, and Maxime Pigou. A practical review on

linear and nonlinear global approaches to ﬂow instabilities. Applied Mechanics Reviews, 70(6), 2018.

[20] Arnaud Fosso, Hugues Deniau, Fr´ed´eric Sicot, and Pierre Sagaut. Curvilinear ﬁnite-volume schemes using high-order compact interpolation.

Journal of Computational Physics, 229(13):5090–5122, 2010.

[21] K Joseph George and RI Sujith. On chu’s disturbance energy. Journal of Sound and Vibration, 330(22):5280–5291, 2011.
[22] Flavio Giannetti and Paolo Luchini. Structural sensitivity of the ﬁrst instability of the cylinder wake. Journal of Fluid Mechanics, 581:

167–197, 2007.

[23] Michael B Giles and Niles A Pierce. Analytic adjoint solutions for the quasi-one-dimensional Euler equations. Journal of Fluid Mechanics,

426:327–345, 2001.

[24] Arathi Gopinath and Antony Jameson. Time spectral method for periodic unsteady computations over two-and three-dimensional bodies. In

43rd AIAA aerospace sciences meeting and exhibit, page 1220, 2005.

[25] Andreas Griewank and Andrea Walther. Evaluating derivatives: principles and techniques of algorithmic diﬀerentiation. SIAM, 2008.
[26] Max D Gunzburger, L Hou, and Th P Svobodny. Analysis and ﬁnite element approximation of optimal control problems for the stationary

navier-stokes equations with distributed and neumann controls. Mathematics of Computation, 57(195):123–151, 1991.

[27] Ardeshir Haniﬁ, Peter J Schmid, and Dan S Henningson. Transient growth in compressible boundary layer ﬂow. Physics of Fluids, 8(3):

826–837, 1996.

[28] Laurent Hascoet and Val´erie Pascual. The tapenade automatic diﬀerentiation tool: principles, model, and speciﬁcation. ACM Transactions

on Mathematical Software (TOMS), 39(3):1–43, 2013.

[29] Fr´ed´eric Hecht. New development in freefem++. Journal of numerical mathematics, 20(3-4):251–266, 2012.
[30] Vicente Hern´andez, Jose E Rom´an, Andr´es Tom´as, and Vicente Vidal. Krylov-Schur methods in slepc. Universitat Politecnica de Valencia,

Tech. Rep. STR-7, 2007.

[31] Patrick Huerre and Peter A Monkewitz. Local and global instabilities in spatially developing ﬂows. Annual review of ﬂuid mechanics, 22(1):

473–537, 1990.

[32] CP Jackson. A ﬁnite-element study of the onset of vortex shedding in ﬂow past variously shaped bodies. Journal of ﬂuid Mechanics, 182:

23–45, 1987.

[33] Antony Jameson and Eli Turkel. Implicit schemes and LU decompositions. Mathematics of Computation, 37(156):385–397, 1981.

29

[34] Antony Jameson, Wolfgang Schmidt, and Eli Turkel. Numerical solution of the Euler equations by ﬁnite volume methods using runge kutta

time stepping schemes. In 14th ﬂuid and plasma dynamics conference, page 1259, 1981.

[35] Dana A Knoll and David E Keyes. Jacobian-free Newton-Krylov methods: a survey of approaches and applications. Journal of Computational

Physics, 193(2):357–397, 2004.

[36] A Lerat and C Corre. Approximations d’ordre ´elev´e pour les ´ecoulements compressibles. Ecole de Printemps de M´ecanique des Fluides

Num´erique, Fr´ejus, 2003.

[37] A. Lerat and C. Corre. Higher order residual-based compact schemes on structured grids. VKI LS 2006-1, von Karman Institute for Fluid

Dynamics, 2006.

[38] Anders Logg and Garth N Wells. Dolﬁn: Automated ﬁnite element computing. ACM Transactions on Mathematical Software (TOMS), 37

(2):1–28, 2010.

[39] LM Mack. The inviscid stability of the compressible laminar boundary layer. Space Programs Summary, 37:23, 1963.
[40] Olivier Marquet, Denis Sipp, Jean-Marc Chomaz, and Laurent Jacquin. Ampliﬁer and resonator dynamics of a low-reynolds-number recir-

culation bubble in a global framework. Journal of Fluid Mechanics, 605:429–443, 2008.

[41] Olivier Marquet, Denis Sipp, and Laurent Jacquin. Sensitivity analysis and passive control of cylinder ﬂow. Journal of Fluid Mechanics,

615:221–252, 2008.

[42] Eduardo Martini, Daniel Rodr´ıguez, Aaron Towne, and Andr´e VG Cavalieri. Eﬃcient computation of global resolvent modes. Journal of

Fluid Mechanics, 919, 2021.

[43] Bruno Maugars. M´ethodes de volumes ﬁnis d’ordre ´elev´e en maillages non co¨ıncidents pour les ´ecoulements dans les turbomachines. PhD

thesis, Paris, ENSAM, 2016.

[44] Philippe Meliga, Edouard Boujo, Gregory Pujals, and Franc¸ois Gallaire. Sensitivity of aerodynamic forces in laminar and turbulent ﬂow past

a square cylinder. Physics of Fluids, 26(10):104101, 2014.

[45] Cl´ement Mettot. Linear stability, sensitivity, and passive control of turbulent ﬂows using ﬁnite diﬀerences. PhD thesis, Palaiseau, Ecole

polytechnique, 2013.

[46] Cl´ement Mettot, Florent Renac, and Denis Sipp. Computation of eigenvalue sensitivity to base ﬂow modiﬁcations in a discrete framework:

Application to open-loop control. Journal of Computational Physics, 269:234–258, 2014.

[47] Johann Moulin. On the ﬂutter bifurcation in laminar ﬂows: linear and nonlinear modal methods. PhD thesis, Institut polytechnique de Paris,

2020.

[48] Serkan ¨Ozgen and Senem Atalayer Kırcalı. Linear stability analysis in compressible, ﬂat-plate boundary-layers. Theoretical and Computa-

tional Fluid Dynamics, 22(1):1–20, 2008.

[49] Francisco Palacios, Juan Alonso, Karthikeyan Duraisamy, Michael Colonno, Jason Hicken, Aniket Aranake, Alejandro Campos, Sean
Copeland, Thomas Economon, Amrita Lonkar, Trent Lukaczyk, and Thomas Taylor. Stanford University Unstructured (SUˆ2): An open-
source integrated computational environment for multi-physics simulation and design. In 51st AIAA Aerospace Sciences Meeting including
the New Horizons Forum and Aerospace Exposition. American Institute of Aeronautics and Astronautics, 2013. doi: 10.2514/6.2013-287.

[50] T.J. Poinsot and S.K. Lele. Boundary conditions for direct simulations of compressible viscous ﬂows. Journal of computational physics, 101

(1):104–129, 1992.

[51] Ali Rezgui, Paola Cinnella, and Alain Lerat. Third-order accurate ﬁnite volume schemes for Euler computations on curvilinear meshes.

Computers & ﬂuids, 30(7-8):875–901, 2001.

[52] Georgios Rigas, Denis Sipp, and Tim Colonius. Nonlinear input/output analysis: application to boundary layer transition. Journal of Fluid

Mechanics, 911, 2021.

[53] Jose E Roman, Carmen Campos, Eloy Romero, and Andr´es Tom´as. Slepc users manual. D. Sistemes Inform`atics i Computaci´o Universitat

Polit`ecnica de Val`encia, Valencia, Spain, Report No. DSIC-II/24/02, 2015.

[54] Fulvio Sartor, Cl´ement Mettot, Reynald Bur, and Denis Sipp. Unsteadiness in transonic shock-wave/boundary-layer interactions: experimen-

tal investigation and global stability analysis. Journal of Fluid Mechanics, 781:550–577, 2015.

[55] Luca Sciacovelli, Donatella Passiatore, Paola Cinnella, and Giuseppe Pascazio. Assessment of a high-order shock-capturing central-diﬀerence

scheme for hypersonic turbulent ﬂow simulations. Computers & Fluids, 230:105134, 2021.

[56] Yiqing Shen, Gecheng Zha, and Xiangying Chen. High order conservative diﬀerencing for viscous terms and the application to vortex-induced

vibration ﬂows. Journal of Computational Physics, 228(22):8283–8300, 2009.

[57] Denis Sipp and Anton Lebedev. Global stability of base and mean ﬂows: a general approach and its applications to cylinder and open cavity

ﬂows. Journal of Fluid Mechanics, 593:333–358, 2007.

[58] Denis Sipp and Olivier Marquet. Characterization of noise ampliﬁers with global singular modes: the case of the leading-edge ﬂat-plate

boundary layer. Theoretical and Computational Fluid Dynamics, 27(5):617–635, 2013.

[59] Denis Sipp, Olivier Marquet, Philippe Meliga, and Alexandre Barbagallo. Dynamics and control of global instabilities in open-ﬂows: a

linearized approach. Applied Mechanics Reviews, 63(3), 2010.

[60] William Sutherland. Lii. the viscosity of gases and molecular force. The London, Edinburgh, and Dublin Philosophical Magazine and

Journal of Science, 36(223):507–531, 1893.

[61] Olivier Thomas, Arnaud Lazarus, and Cyril Touz´e. A harmonic-based method for computing the stability of periodic oscillations of non-linear
structural systems. In International Design Engineering Technical Conferences and Computers and Information in Engineering Conference,
volume 44137, pages 883–892, 2010.

[62] Lloyd N Trefethen, Anne E Trefethen, Satish C Reddy, and Tobin A Driscoll. Hydrodynamic stability without eigenvalues. Science, 261

(5121):578–584, 1993.

[63] Seokkwan Yoon and Dochan Kwak. Three-dimensional incompressible navier-stokes solver using lower-upper symmetric-gauss-seidel algo-

rithm. AIAA journal, 29(6):874–875, 1991.

[64] DW Zingg, S De Rango, M Nemec, and TH Pulliam. Comparison of several spatial discretizations for the navier–stokes equations. Journal

of computational Physics, 160(2):683–704, 2000.

30

