Self-archiving note:
This is a pre-peer-review version of an article currently under submission to a journal in
Software Engineering.

2
2
0
2

p
e
S
5

]
E
S
.
s
c
[

1
v
3
9
9
1
0
.
9
0
2
2
:
v
i
X
r
a

Aspects of Modelling Requirements in Very-Large Agile
Systems Engineering

GRISCHA LIEBEL, School of Technology, Reykjavik University, Iceland
ERIC KNAUSS, Department of Computer Science and Engineering, Chalmers | University of Gothenburg,
Sweden

Using models for requirements engineering (RE) is uncommon in systems engineering, despite the widespread
use of model-based engineering in general. One reason for this lack of use is that formal models do not match
well the trend to move towards agile developing methods. While there exists work that investigates challenges
in the adoption of requirements modeling and agile methods in systems engineering, there is a lack of work
studying successful approaches of using requirements modelling in agile systems engineering. To address
this gap, we conducted a case study investigating the application of requirements models at Ericsson AB,
a Swedish telecommunications company. We studied a department using requirements models to bridge
agile development and plan-driven development aspects. We find that models are used to understand how
requirements relate to each other, and to keep track with the product’s evolution. To cope with the effort to
maintain models over time, study participants suggest to rely on text-based notations that bring the models
closer to developers and allow integration into existing software development workflows. This results in tool
trade-offs, e.g., losing the possibility to control diagram layout.

CCS Concepts: • Social and professional topics → User characteristics; • Software and its engineering
→ System description languages; Requirements analysis; Software post-development issues.
Additional Key Words and Phrases: Agile, Modelling, Requirements

ACM Reference Format:
Grischa Liebel and Eric Knauss. 2018. Aspects of Modelling Requirements in Very-Large Agile Systems
Engineering . 37, 4, Article 111 (August 2018), 30 pages. https://doi.org/XXXXXXX.XXXXXXX

1 INTRODUCTION
Driven by success stories in small-scale software development, agile development is increasingly
adopted in large-scale software and systems engineering [6, 12, 15, 31, 45]. However, context factors
such as long lead times [6], safety criticality [27], and the scale of development itself make this
adoption challenging. In particular, challenges relate to Requirements Engineering (RE), such as
building and maintaining a shared understanding of customer value and the system requirements
[26, 29].

Authors’ addresses: Grischa Liebel, grischal@ru.is, School of Technology, Reykjavik University, Menntavegur 1, Reykjavik,
Iceland, 102; Eric Knauss, eric.knauss@cse.gu.se, Department of Computer Science and Engineering, Chalmers | University
of Gothenburg, Gothenburg, Sweden.

Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee
provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and
the full citation on the first page. Copyrights for components of this work owned by others than ACM must be honored.
Abstracting with credit is permitted. To copy otherwise, or republish, to post on servers or to redistribute to lists, requires
prior specific permission and/or a fee. Request permissions from permissions@acm.org.
© 2018 Association for Computing Machinery.
XXXX-XXXX/2018/8-ART111 $15.00
https://doi.org/XXXXXXX.XXXXXXX

111

, Vol. 37, No. 4, Article 111. Publication date: August 2018.

 
 
 
 
 
 
111:2

Grischa Liebel and Eric Knauss

To build and maintain system knowledge over time, models have been used as a suitable means
of documentation [26]. Specifically, models are often cited as a way to deal with complexity that
arises from the scale of systems [47]. However, while the use of models is common in systems
engineering [33], using requirements models is uncommon in practice [34, 35]. In the context of
large-scale agile software and systems engineering, we are not aware of any work investigating
the use of models in industry.

Therefore, the goal of this paper is to better understand the potential of using requirements
models in very large-scale (VLS) agile [14] systems engineering. To do so, we conducted a case
study of a single department at Ericsson AB, a large Swedish telecommunications provider, which
has long-ranging experience using requirements models in a VLS agile setting. We aim to answer
the following research questions (RQs).
RQ1: What sentiments exist for and against the use of requirements models in VLS agile systems

engineering?

RQ2: How do different stakeholders use requirements models in VLS agile systems engineering?
RQ3: What are the needs to support the intended use of requirements models in VLS agile systems

engineering?

To answer these questions, we collected survey data, followed up with a number of semi-

structured interviews to find answers to patterns observed in the survey.

We find that the requirements models at the case department serve as a boundary object that
relates the agile world in individual teams with the overall waterfall-like process that deals with
product requirements and their long-term evolution. While engineers are positive regarding the use
of models, many take a practical stance concerning the feasibility of continuously maintaining these
models over time. To achieve an updated and maintained model, text-based modelling approaches
such as PlantUML1 with certain inherent limitations such as automatic layouting are seen as
inevitable. Furthermore, to avoid deterioration of models over time, our study participants suggest
generating simple artefacts from the models, e.g., documentation. This would encourage engineers
to regularly update the models, as derived artefacts would otherwise become outdated.

2 RELATED WORK
There exists a broad body of work on the use of models in industry, and suggestions on how to use
models for RE-related activities. In the following, we will discuss this work in detail.

2.1 Use of Models in Industry
There are numerous case studies reporting how models are used in industry, e.g., [3, 21, 23, 34, 37, 50].
In a case study at Motorola, Baker et al. [3] discuss how Model-Based Engineering (MBE) is used
at Motorola over a period of 20 years. The authors report several positive effects, such as defect
reductions and increases in productivity, but also a lack of tools and tool interoperability, poor
performance of generated code, and a lack of scalability of the modelling approach.

Experiences from three European companies with MBE techniques and tools are presented by
Mohagheghi et al. [37] in terms of a qualitative study. The authors find that simulation and testing
opportunities are positive aspects of using MBE, while tool problems and the complexity of models
are listed as drawbacks.

Hutchinson et al. study the use and adoption of MBE in industry in a series of qualitative and
mixed-methods studies [21–23, 50]. The overall finding of this study series is that the organisation
context and several non-technical topics need to be considered for MBE to succeed. For instance,
the authors report that significant additional training is needed for the use of MBE. From their

1https://plantuml.com/

, Vol. 37, No. 4, Article 111. Publication date: August 2018.

Aspects of Modelling Requirements in Very-Large Agile Systems Engineering

111:3

interviews, the authors conclude that especially people’s ability to think abstractly seems to have
significant impact on their ability to create models. In addition, several technical challenges such
as tool shortcomings impede the use and success of MBE.

In a case study at two automotive companies [34], we find that models are used in automotive
RE to improve communication and to handle complexity. However, stakeholders prefer informal
models and whiteboard sketches over formal modelling notations.

2.2 Frameworks for Using Models During RE
Several frameworks and methods have been suggested that include the use of models for or during
RE.

Pohl et al. [41] introduce the SPES 2020 Methodology for the development of embedded systems.
During RE in particular, the framework suggests a separation between solution-independent and
solution-oriented diagrams. Practical experiences with SPES are reported in [8] and [11]. In [8],
Böhm et al. present their experiences with SPES in an industrial project at Siemens. The authors
apply SPES to a mature, already running train control system, using a specification of “high quality”.
Findings are that “the high quality of input documents, and cooperation with product experts were
considered the most influential success factors”. Brings et al. [11] discuss experiences of using SPES
in the area of cyber-physical systems. The authors report that they “identified problems resulting
from an increased number of dependencies.” and “the need to cope with redundancies caused by
properties which are system as well as context properties in a structured manner.”.

Apart from the SPES framework, there exist several proposed processes and frameworks for

requirements modelling, e.g., [5, 9, 10, 16, 49].

Vogelsang et al. [49] propose to model requirements and architecture in parallel, and evaluate the
approach with 15 master students. In particular, the authors propose the use of Message Sequence
Charts.

Brandstetter et al. [9] present a process to perform early validation of requirements by means of
simulation, using the control software of a desalination plant as an industrial case. Experiences of
using the approach are discussed, but details on the execution of the use case are largely missing.
Resulting from a research project with academic and industrial partners, Braun et al. [10] propose
the use of model-based documentation. For RE, these include goal models, scenario models and
function models. To our knowledge, the approach has not been evaluated in terms of an empirical
study.

Berenbach, Schneider, and Naughton [5] list several requirements they consider essential for a
requirements modelling language, such as distinction between process and use case modelling. The
authors argue that using UML for requirements modelling has proven to be frustrating. URML is
piloted in one commercial project at Siemens, showing that the proposed concepts are useful.

Finally, the Model-Driven Requirements Engineering (MoDRE) workshop series that has taken
place since 2011 contains many contributions on how models, in particular in the context of
model-driven development, can be used for RE purposes.

2.3 RE in Large-Scale Systems Engineering
Initially, agile approaches were focused on small teams developing software [4, 25, 36]. The success
of these approaches have led to their adoption at scale [13, 31, 46], where non-agile, plan-driven,
and stage-gate based processes have been the norm [39].

Due to their iterative nature, agile approaches are suitable for building systems whose require-
ments may change; further, experience from early versions of a system can impact later versions
[4, 17, 36]. Gren and Lenberg even argue that the main motivation for choosing agile methods is to
be able to respond to changing requirements [17].

, Vol. 37, No. 4, Article 111. Publication date: August 2018.

111:4

Grischa Liebel and Eric Knauss

However, Heikkilä et al. [20] find in their mapping study that there is no universal definition of
agile RE. Instead, they report that requirements-related agile practices such as the use of customer
representatives, prioritization of requirements, or growing technical debt are particularly hard
to manage. The same authors also present a case study at Ericsson, where they investigate the
flow of requirements in large-scale agile [19]. They find that practitioner perceive benefits such
as increased flexibility, increased planning efficiency, and improved communication effectiveness.
However, the authors also report problems such as overcommitment, organizing system-level
work, and growing technical debt. In their case study on the use of agile RE at scale, Bjarnason et
al. [7] also report that agility can mitigate communication gaps, but at the same time may cause
new challenges, such as ensuring sufficient competence in cross-functional teams. In a case study
with 16 US-based companies, Ramesh et al. [42] identify risks with the use of agile RE such as
neglecting non-functional requirements or customer inability. A systematic literature review on
agile RE practices and challenges reports eight challenges posed by the use of agile RE [24], such
as customer availability or minimal documentation. However, the authors also report 17 challenges
from traditional RE that are overcome by the use of agile RE. The authors conclude that there is
more empirical research needed on the topic of agile RE. Consequently, Kasauli et al. [26] report on
RE challenges in scaled-agile system development that are neither addressed in contemporary RE
literature nor by established frameworks for scaled-agile.

Paetsch [38] suggest that agile methods and RE are pursuing similar goals in key areas like
stakeholder involvement and therefore could be integrated in a good way. The major difference is
the emphasis on the amount of documentation needed in an effective project. Meyer, in contrast,
criticizes agile methods for limiting requirements engineering to functional requirements described
through (exemplary) scenarios and discouraging upfront planning [36]. In fact, in practice such
functional requirements are often described as user stories, e.g. formulated as boilerplate statements:
“As a <role> I want <feature> so that <value>.” [32]. The much more detailed requirements of
plan-driven approaches are omitted; instead, agile methods push for a continuous dialogue (with
customer representatives or product owners) and comprehensive sets of tests, which are ideally
automated [36].

Given the set of challenges with managing requirements in scaled agile, it is unlikely that user
stories and automated tests are enough to enable a shared understanding of requirements in agile
at scale. It is therefore that we investigate the use of requirements models in agile.

2.4 Models in Agile Development
As a final area of related work, several authors have explored how models can be used in agile
development, e.g., [2, 18, 43].

Ambler [2] argues that modelling and agile development can go hand in hand. The author
describes important aspects to succeed with agile modelling, e.g., using as simple tools as possible,
fostering effective communication, and building agile modelling teams. Similarly, Rumpe [43]
argues that modelling can be used as a part of agile methodologies to further increase development
efficiency. Concretely, the author suggests to use models for code and test case generation.

A number of further approaches to use models during agile development have been proposed as
a part of the Extreme Modeling (XM) workshop series. However, as noted by Hansson et al. [18],
existing work on agile modelling suffers from a lack of empirical evidence on its application in
industry.

In summary, there is a large body of work on how models are used in industry, including benefits
and challenges of using models. Additionally, challenges of agile development and agile RE at scale
are studied in considerable depth. Finally, a substantial amount of solution proposals for using

, Vol. 37, No. 4, Article 111. Publication date: August 2018.

Aspects of Modelling Requirements in Very-Large Agile Systems Engineering

111:5

models for RE and during agile development exist. However, to our knowledge there are no detailed
studies investigating industry cases of successful model use for RE activities.

3 RESEARCH METHOD
To address the RQs, we conducted a case study at a department in a large Swedish telecommu-
nications company - in the following referred to as the case department/company. We embrace
a constructivist world view, emphasising that different engineers at the case department have
subjective views and opinions on the topic under investigation. The case study is both exploratory
and confirmatory in nature. That is, we use a set of propositions we formulated initially and updated
throughout the study. At the same time, we included a number of open questions to be investigated
as part of the study.

3.1 Case Description
We conducted this study in one department at Ericsson AB, a large Swedish telecommunications
provider. In that department, more than 30 Scrum teams develop a single product in parallel based
on a scaled agile approach. Cross-functional teams independently work on backlog features all
the way to delivery on the main branch. Specialised coordination roles exist, e.g., for integration
or architecture tasks. Scrum sprints are based on a backlog and a hierarchy of product owners
breaks down product requirements and customer visible features to backlog items. While these
product owners represent the customer requirements towards the product development, system
managers (SMs) represent a system requirements perspective. These SMs also interact with agile
teams in providing the system-level knowledge. Further products are developed using a similar
methodology.

Hardware development at the company is largely decoupled from software development. New

hardware becomes available with a regular, but low frequency.

The studied case department is a department at Ericsson AB. At the time of the study, there
were approximately 200 engineers working at the department. Development is closely aligned with
existing standards that describe technical solutions in much detail, e.g., [1].

Requirements on system level are stored in the tool T-Reqs [30], which has been developed in
house. T-Reqs allows storing text-based requirements and other artefacts together with code in
version control systems such as git, thus bringing these artefacts closer to developers [30]. The tool
has been used at the case company since 2017.

Models are used to keep track of the system requirements and their relation. This is primarily
done in the form of UML activity diagrams, where activities denote requirements and the flow
between activities their relation and order. Models are created and maintained manually. More
details on the used models are presented in Section 4 and Section 5.

3.2 Study Scope and Propositions
From previous research and initial scoping meetings with two contact persons at the case depart-
ment, we formulated a number of propositions addressing the three research questions. These are
depicted in Table 1. For each, we describe the origin of the proposition.

The propositions can be summarised as follows. For RQ2, we envision an organisation in which
few experts work with models (P1), while in particular the roles working with lower level of
abstractions, testers and developers, do not use the models (P2), do not see the need for them (P4),
and do not think that any relevant information is contained in the model (P6). People creating the
models are not necessarily experts, resulting in an ad-hoc approach (P3). Few UML diagram types
are in use (P5). The existing tool solution for modelling is restricting the employees in their work
(P10).

, Vol. 37, No. 4, Article 111. Publication date: August 2018.

111:6

Grischa Liebel and Eric Knauss

Nr
P1
P2

P3

P4

P5
P6

P7

P8

P9

P10

P11

P12

Proposition
Models are created by few experts, and mainly read by them.
Access to models, and especially editing, is rare among
testers and developers.
Model creators are not modelling experts. Therefore, use of
modelling languages is ad-hoc and varies across the organi-
sation.
Testers and developers do not see the need/use of modelling
requirements.
Only few diagram types (of the UML) are used.
Testers and developers do not think that the present models
carry important information.
Layouting of diagrams is important to the users.

Stakeholders believe that modelling should be integrated
with existing development tools (e.g., git).
Stakeholders do not believe that the requirements models
should be used for automated tasks.
The current modelling solution is restricting employees in
their work.
Even if a better/good modelling solution would be in place,
most stakeholders would not update/maintain the model.
Navigating between different diagrams is an important fea-
ture.

Source
[34]
D

[34]

D

[34]
D

DK, layout
studies
D

[34]

[34]

[34]

[34]

RQs
RQ2
RQ2

RQ2

RQ1, RQ2

RQ2, RQ3
RQ1, RQ2

RQ3

RQ1, RQ2

RQ1, RQ3

RQ2

RQ1, RQ3

RQ3

Table 1. Research Propositions, with sources and target RQs. D denotes Discussions, DK denotes the authors’
Domain Knowledge.

For RQ1, we expect that sentiments towards modelling roughly resemble the current use: a few
“power users” of models , but a substantial amount of people not believing in the usefulness of
models.

For RQ3, we cover a few important tool decisions, including the need for only few diagram types
(P5), the need for layouting capabilities (P7), automation support (P9) and navigation between
diagrams (P12). Furthermore, we expected some insights from participants that would not use the
models even with better tools (P11), since they might have additional input on what would be
the preferred format. For the remaining feature space, we chose an exploratory approach asking
several free-text questions to get additional input.

3.3 Survey Design, Execution and Analysis
To evaluate the propositions, we designed an online survey. Our contact persons reviewed the
survey design.

After review, our contacts sampled 54 people at the case department, all of which they judged
to have sufficient knowledge of the model to answer our questions. We received 33 answers, i.e.,
a return rate of 61.11%. The participants worked in 16 different areas of the case department,
covering various tasks and product aspects, both from functional and non-functional perspective.
However, SMs were over-represented among the participants (22 out of 33 participants had an SM

, Vol. 37, No. 4, Article 111. Publication date: August 2018.

Aspects of Modelling Requirements in Very-Large Agile Systems Engineering

111:7

Fig. 1. Model Creation and Reading Frequency

role). Finally, the majority of participants had substantial work experience in the case department
(depicted in blue bars in Figure 1) and modelling experience (depicted in yellow bars in Figure 1).
We analysed the survey answers by creating summary statistics and evaluated the propositions
in a qualitative manner, i.e., without employing statistical tests or related statistical methods. The
first author summarised open-ended questions by assigning topic codes [44] to each stanza, then
grouping related stanzas together and counting their frequency. The mapping of survey questions
to propositions is depicted in Table 3 in Appendix B. As a form of member checking, we presented
the results to our contact persons, who disseminated the findings in the department.

3.4 Interview Follow-Up
Following the questionnaire, we updated and refined our list of propositions and added some open
questions (see Appendix C). The open questions relate in particular to contradictions in the survey
data. For instance, while the majority endorsed using text-based models, the suggested solution
does not support manual layouting, an important feature requested by the majority. We used the
proposition and questions as an input for the creation of the interview guide.

Our contact persons recruited five engineers to be interviewed. We requested a varied set of
roles and mindsets, to obtain diverse information. In particular, we also asked them to recruit
participants who might be skeptics of requirements modelling or modelling in general. While this
is a small sample, it nevertheless represents about 10% of the survey sample size, i.e., engineers
who are knowledgeable enough in modelling to answer our questions.

We analysed the interview transcripts using the following process. Both authors, Grischa (GL)
and Eric (EK), coded all interviews. GL used a list of a-priori codes aligned with the propositions and
questions, while EK used open coding. In both cases, the coding followed a content coding approach
[44]. That is, we assigned codes that describe the content of the coded stanza, assigning codes on a

, Vol. 37, No. 4, Article 111. Publication date: August 2018.

0510<1 year1−5 years6−10 years>10 yearsExperienceNumber of answersrolemodelling111:8

Grischa Liebel and Eric Knauss

per-answer basis. In cases where the interviewees clearly discussed different content, we separated
the answer into multiple stanzas which we coded differently. GL piloted the initial a-priori codes on
one interview, then modified them according to the pilot. The final a-priori codebook is discussed
in Appendix D.

After the first round of coding, we discussed the resulting code distribution and decided to
continue a parallel approach. That is, we jointly structured the existing codes in a second-cycle
coding approach. We hierarchically grouped the codes obtained from EK’s open coding into the
different (and much more abstract) a-priori codes, then grouped the resulting clusters according to
our three research questions. We then extracted candidate themes, which we validated using all
stanzas coded with at least one of the open codes for the theme. Simultaneously, GL analysed the
interview data one more time and followed a holistic coding [44] approach, writing analytical memos
while working through the data. Finally, we integrated the initial themes from the second-cycle
coding approach with the themes extracted from the holistic coding and memoing.

3.5 Validity Threats
Given the constructivist nature of this case study, we present the threats to validity in terms of
transferability, credibility and confirmability [40].

3.5.1 Transferability. Transferability describes to what extent results from the study can be trans-
ferred to cases that resemble the case under study [40].

Many of the reported aspects are specific to the case department, e.g., the role of the SM that
connects agile teams with the system-level view. However, we know from previous work [26] that
similar roles and situations exist in many systems engineering companies. Therefore, we expect that
the findings apply in similar cases as well. One exception might be the large emphasis on software
development at the case department, which is in contrast to many other systems engineering
organisations, where hardware is developed in parallel and thus causes long lead times and longer
feedback cycles.

We used purposeful sampling to select interviewees that had diverse background and at the same
time could comment on the use of requirements models. However, we did not reach saturation in
all our themes. This means that there might be additional facets or themes, or contrasting ideas
that we did not capture. This is a threat to the transferability of our findings.

3.5.2 Credibility. Credibility describes whether findings are reported truthfully, or have been
distorted by the researchers [40].

All interviews were recorded, and data analysis performed on the verbatim transcripts. Addi-
tionally, we report quotes for all themes in our qualitative interview analysis. This should ensure
credibility of the findings.

We performed first-cycle coding and memo writing for both the free-text answers in the survey
and the interview transcripts. This should avoid threats to credibility arising from long chains of
interpretation in our analysis.

3.5.3 Confirmability. Confirmability describes the extent to which conclusions made by researchers
follow from the observed data [40].

To structure our study, we used propositions prior to the survey and in between the survey and
interviews. We then evaluated them after each analysis step. Furthermore, survey and interview
instruments, as well as the codebooks are available in the appendix to this paper.

, Vol. 37, No. 4, Article 111. Publication date: August 2018.

Aspects of Modelling Requirements in Very-Large Agile Systems Engineering

111:9

4 EXPLORATORY SURVEY
In the following, we present the results of the exploratory survey in terms of descriptive statistics
and relations to the propositions. We then discuss the implications of the survey findings.

4.1 Survey Findings
The resulting proposition evaluation is summarised in Table 2.

Number

Proposition

Supported by
Survey
Yes
Partially

Partially

No

Models are created by few experts, and mainly read by them.
Access to models, and especially editing, is rare among testers
and developers.
Model creators are not modelling experts. Therefore, use of mod-
elling languages is ad-hoc and varies across the organisation.
Testers and developers do not see the need/use of modelling
requirements.
Only few diagram types (of the UML) are used.
Testers and developers do not think that the present models carry
important information.
Layouting of diagrams is important to the users.
Stakeholders believe that modelling should be integrated with
existing development tools (e.g., git).
Stakeholders do not believe that the requirements models should
be used for automated tasks. They should instead be used as
documentation only.
The current modelling solution is restricting employees in their
work.
Even if a better/good modelling solution would be in place, most
stakeholders would not update/maintain the model.
Navigating between different diagrams is an important feature. Yes

Yes
Yes

Yes
No

No

No

Partially

P1
P2

P3

P4

P5
P6

P7
P8

P9

P10

P11

P12

Table 2. Evaluation of Propositions

For P1, 5 participants state that they create/modify diagrams at least weekly (see the dark blue
bars in Figure 2). Three of these participants are System Managers (SMs), one is a Developer and
one is both a Developer and SM. When consulting the read access/use of diagrams (light yellow
bars Figure 2), these five participants have weekly (4 answers) or daily (1 answer) read access to
the diagrams. In the entire sample, only 2 more people stated that they read/use the diagrams on a
weekly basis. This seems to confirm our proposition that it is indeed a small group responsible for
modification and use of diagrams.

Our data shows a mixed picture for P2 (testers and developers access and modify models rarely).
Of the 8 people with development or testing roles (out of 33 participants, see Section 3), 5 state
that they read models on a monthly basis, 2 weekly, and 1 yearly. Creation is less common, with 3
stating that they never create or modify models, 2 yearly, 1 monthly, and 2 weekly. This picture
does not change significantly if we consider only those who have a pure testing/development role
(without addition of Designer/Architect or System Manager). Overall, these figures do not allow
a clear answer as to whether P2 is confirmed or not. The free text answers indicate that people
not accessing the models are mainly concerned with the tooling (difficulty of tooling, access to the

, Vol. 37, No. 4, Article 111. Publication date: August 2018.

111:10

Grischa Liebel and Eric Knauss

Fig. 2. Model Creation and Reading Frequency

tool) and the effort it takes to comprehend the models (too much detail, information spread across
model layers/navigation).

P3 (model creators are not modeling experts) is not supported by our data and must be rejected.
The participants who create/modify models at least weekly all have considerable experience with
modelling (at least 5 years). We did however not ask whether they have a formal education, or
proceed in an ad-hoc manner.

For P4 (testers and developers do not see the need of modeling requirements), the survey data
shows again a mixed picture (parts of Figure 3). Three survey participants agree or strongly agree
that they would update the models regularly if they had a better tool. However, two participants
strongly disagree and three do not know. There is again no noticeable difference between the pure
developer/tester roles and others. Additionally, we do not see a pattern in the answers with respect
to how the creation/modification patterns look like at the moment (e.g., “Participants who already
modify/create diagrams often would not do it more often”). Interestingly, six people are generally
positive towards modelling, and the remaining two neutral. No one opposes modelling per se. The
free-text answers for this question do not give a clear justification of the pattern, either. However,
one participant stated the concern that the current model is unreliable and therefore not useful,
suggesting to assign someone to manage the model.

As expected from the study preparations, due to the domain, behavioural models dominate at
the case company (Figure 4). Activity (18 answers) and sequence diagrams (13 answers) are used
by the majority of the participants. However, state machine and use case diagrams follow closely
with 9 and 10 participants. Class and component diagrams are used by 4 and 3 participants only.
For P6 (developers and testers do not think that the present models carry important information),
it is rather interesting to observe that our proposition must be rejected based on our data (parts of
Figure 3). Indeed, 5 testers/developers out of 8 disagree or strongly disagree with the statement

, Vol. 37, No. 4, Article 111. Publication date: August 2018.

051015NeverYearlyMonthlyWeeklyDailyNAUsage FrequencyNumber of answerscreate/modifyread/useAspects of Modelling Requirements in Very-Large Agile Systems Engineering

111:11

Fig. 3. Agreement to Different Statements

Fig. 4. Diagram Usage According to UML Diagram Types

, Vol. 37, No. 4, Article 111. Publication date: August 2018.

4%14%18%15%27%18%45%62%59%85%66%61%61%58%54%45%21%14%11%21%21%24%15%29%10%17%28%Layout is importantModels do not carryimportant informationModels should be integratedin existing toolsModels should beintegrated with TReqsModels should beused for automationModels should only be used for documentationThe current modelling tool is restricting me in my workI would maintain the modelsmore often with a better toolNavigation between diagrams is important10050050100PercentageResponseStronglydisagreeDisagreeNeutralAgreeStronglyagreePlease rate your agreement to the following statements. 051015ClassComponentActivitySequenceState MachineUse CaseOtherDiagram TypeNumber of answers111:12

Grischa Liebel and Eric Knauss

that existing models do not carry important information. Of the remaining 3 participants, only one
agrees, with the other two being neutral or “don’t know”.

P7, the importance of layout, is clearly confirmed by our participants (parts of Figure 3). 20
participants agree or strongly agree, 8 are neutral, and 5 (strongly) disagree. One participant dis-
agreeing noted that requirements should be stated in text, and have as a maximum pictures/models
to support its explanation. Therefore, it should overall be kept simple, explaining their answer that
layouting is indeed not important.

Regarding the integration of models into existing tools (P8), the picture is favourable (parts
of Figure 3). 15 people (strongly) agree that this should happen, 8 are neutral, 5 against, and 5
don’t know. Specifically, 19 participants agree that models should be integrated into the existing
text-based requirements tool T-Reqs [30], with 4 disagree, 4 don’t know, and 6 neutral answers.

From earlier work, we expected that informal modelling without any automation would be
favoured by most stakeholders (P9). Interestingly, our results show a different mindset (parts of
Figure 3): 17 people agree that they should be used for automation, while 6 are neutral, and 5 each
disagree or answered don’t know.

Regarding P10, there is a disagreement as to whether the current solution is restricting the
participants in their work (parts of Figure 3): 13 each agree and disagree. 4 don’t know and 3 are
neutral. While we initially thought that some participants could state that they are not restricted
since they don’t use the models, this picture was not confirmed clearly by looking at the disagreeing
group: Only 2 of the participants stating that they don’t write/modify models are in that latter
group.

P11 again contradicted our impression from previous work - we expected that participants
would state that they would not update their models even if the tool was better (parts of Figure 3).
However, 15 participants stated that they indeed would update the model if the tool was better. 6
participants stated that they don’t know, 5 were neutral and the remaining 7 disagreed.

P12, that navigation between diagrams is an important feature, got the strongest support in
our survey (parts of Figure 3). Indeed, 23 participants (strongly) agreed with the statement, 6
participants didn’t know, 3 were neutral, and 1 disagreed.

4.2 Survey Discussion
Overall, we summarise the survey findings as follows. We find strong support both for working
with models (RQ1) and the use of requirements (RQ2) among our participants. With respect to
the needs to support the intended use of requirements models (RQ3), layouting and navigation, a
focus on activity and sequence diagrams, and close integration into development tools and version
control systems surfaced. We discuss these aspects in this section and revisit them in the second,
interview-based part of this study with the aim to shed more light on these aspects.

For RQ1 (Sentiments for and against models) we expected a diverse result, based on own experi-
ence and literature that propose a divide between model proponents and opponents. Instead, we
find that most participants clearly see the value of models. Interestingly, there were a few voices
mentioning that text-based requirements would be enough and that models are too complicated
to handle. In particular, participants mentioned that at the case department, there is only little
requirement work per team, which could easily be handled in text.

Similarly, the results show that the picture for RQ2 (How do different stakeholders use require-
ments models?) is far from the negative one we expected. While it is true that models are created
by few people, and also mainly accessed by them, the majority of our participants sees the value of
models and also the information contained in existing models. This covers all roles, including testers
and developers that do not have an SM role in parallel. Furthermore, the testing and developer
roles are far from negative towards modelling. The model creators/maintainers have substantial

, Vol. 37, No. 4, Article 111. Publication date: August 2018.

Aspects of Modelling Requirements in Very-Large Agile Systems Engineering

111:13

experience, though we do not know their educational background in modelling. Indeed, the move
from the existing modelling tool to an integrated solution is supported, with few exceptions. From
free-text comments, we see that there are several factors hindering the use of models at the moment.
These include lack of tool access and tool usability, the complicated nature of models, the amount
of details and need for constant work related to models, and the outdated information in models.
Finally, several statements related to process issues: Participants stated that there was currently no
clear direction on whether the models should be kept updated, no process of doing so, and a lack of
knowledge how to model and on which abstraction level. This means that the role of reading and
understanding the model and then feed the information into the teams ends up in the hands of
a few people (SMs). Participants suggested regular modelling courses for users, clear abstraction
levels on what should/should not be in the models, and examples of models that are considered to
be of high quality.

Regarding needs to support modelling (RQ3), participants strongly supported the notion that
layouting and navigation are key features. Models at the case department often contain multiple
requirements in flow charts/activity diagrams, with one requirement per activity node and a text
description of each. The entire diagram then gives the context of the requirement, i.e., what happens
before and after, and how it relates to other requirements. Often, there are links to other diagrams
as well. Therefore, both the layout and the navigation are required to understand how the system
behaves as a whole. Our proposition was confirmed that only few diagram types are in active use,
mainly activity and sequence diagram. However, there were minor usages of several further types.
Free text answers clearly pointed to the fact that any modelling tool needs to be integrated into
daily work (e.g., into git), by using the same tools developers use and by being able to integrate
the models with (text-based) version control such as git. While pictures are helpful, the models
should theoretically be readable in text, in particular changes to models. Finally, a large share of
the participants stated ease of use as one or the main success factor for a modelling tool.

5 CONFIRMATORY INTERVIEWS
After the survey, several gaps in our understanding remained, in addition to new questions that
arose. These gaps directly follow from the survey findings in relation to the propositions in 1 and 2.
Since there is a general willingness to work with requirements and models, combined with a sense
that current support is lacking, and clear indication of specific needs, clear questions for follow-up
in-depth interviews follow (see Appendix C).

In the following, we discuss the findings relating to our three RQs. Given the open nature of
interviews, themes in the data can relate to more than one research question. First, we discuss how
interviewees see the role of requirements in VLS agile systems engineering in Section 5.1, the role
of models in VLS agile systems engineering in Section 5.2, and the use cases arising therefrom in
Section 5.3. All these topics relate to RQ1 and RQ2. Finally, we discuss the consequences for tooling
(RQ3) in Section 5.3.

5.1 RQ1/RQ2: Requirements in VLS Agile Systems Engineering
At the case department, requirements used to be written prior to development. Now, due to the agile
transformation at the company, only vague requirements are developed prior to the sprints, which
are then shaped and refined in parallel to the development and testing. Some interviewees perceive
this as documentation work only, while others see it as a crucial step in invention and in preparing
for future maintainability. That is, the role of requirements in large-scale agile development is
perceived very differently in the case department. Several interviewees take the standpoint that
there are too few requirements, and that those are written too late in the process. They take
the traditional development point of view in which upfront requirements analysis guides the

, Vol. 37, No. 4, Article 111. Publication date: August 2018.

111:14

Grischa Liebel and Eric Knauss

Requirements and VLS Agile (RQ1/2)

• System-level requirements are available too late in the process.
• Requirements are an asset when changes are made, but often need to be updated first.
• Importance of requirements: interviewees agree, but have doubts about general

sentiment in organization.

Conclusion: Role of requirements in VLS agile is conceptually unclear.

development later on, and in which requirements provide the system knowledge. The lack of such
requirements is therefore seen as an issue.

“And we have them always too late in the chain. That’s my view of it.” – Interviewee 1
“[..] someone updates the implementation and suddenly things don’t work anymore. And
then the problem is you have to determine why. Because a lot of the behavior of the product
is not really based on requirements. We don’t have requirements on exactly everything.” –
Interviewee 4

None of our interviewees stated that they considered requirements unimportant. However,
several of them did express that this was a common belief within the company. That is, that other
sources but written requirements are sufficient to obtain system knowledge, e.g., test cases, or
annotations to standards (compliance declarations).

“I got the feeling that some people think it’s very important and some think this...we don’t
need requirements at all. We can do the coding and then we check at the end if it works
OK, if the customer doesn’t complain it’s ok.” – Interviewee 1

We therefore conclude that the notion of requirements in VLS agile systems engineering is

conceptually unclear and individual opinions of practitioners differ.

5.2 RQ1/RQ2: Requirements Models in VLS Agile Systems Engineering

Requirements Models and VLS Agile (RQ1/2)

• Requirements models are important to understand the big picture.
• Requirements models are hard to keep up to date.
• Some models are increasingly outdated, thus losing value.
• Changes can break a model and require re-design.
• Different modelling styles make shared modelling difficult.

Conclusion: While requirements models provide substantial value, using them successfully
in practice is challenging.

Given that the role of requirements is conceptually unclear or at least different from the original,
plan-driven process in which requirements were written up front, the role of using models to
convey requirements information is also debated at the case company.

Several of our interviewees valued the existing requirements models. They reported that the
models serve primarily as a boundary object between different agile islands and the overall system,
providing the long-term knowledge [28]. A common issue in VLS agile systems engineering is
that individual methodological islands exist in a company that are disconnected [26, 29], e.g.,

, Vol. 37, No. 4, Article 111. Publication date: August 2018.

Aspects of Modelling Requirements in Very-Large Agile Systems Engineering

111:15

individual Scrum teams and an overall plan-driven process. Having a model that relates system-
level requirements to each other can help building bridges between the islands and keep knowledge
over a long time. For example, the models can help engineers understand how isolated user stories
connect to the overall system behavior. Furthermore, incoming change requests can be understood
better in relation to the current system-level behaviour.

“The system model really like defines...[..] we put requirements that tell how something
should behave in relation to some other functionality.” – Interviewee 2

“Yeah. I think it’s...if we [..] say that we have a graphical representation with flow charts
and requirements and so on. I think that’s very good.” – Interviewee 1

“So it is, if you check the requirement there..so it doesn’t give any relationship with other
requirements. So you don’t get...You just read it as a text, and you don’t know actually
how to relate to that. So the model, it is a complement.” – Interviewee 3

However, we also have several interviewees that reject the requirements models, for several
reasons. First, while they consider requirements models useful in principle, they differ whether it is
worth spending the required effort to create and maintain the models over time. Just as with other
forms of documentation, maintenance is essential. If the model becomes outdated, it loses its value
to the engineers.

“The problem is that the information gets outdated and there are not enough resources to
make sure they are correct. And the focus probably lies on other things.” – Interviewee 1

“We have definitely the knowledge to do the model right. The question is if we want to
spend the time and effort. Because it would require many people many months to go
through them all and update it.” – Interviewee 4

In fact, an interviewee stated that several models at the company are outdated at the moment,

and would require a substantial effort to be updated.

“The requirement model itself has degraded in many cases to the point where it’s useless,
totally inaccurate and not up to date.” – Interviewee 4

Also in relation to maintenance effort, one interviewee stated that changes to the requirements
can be orthogonal to the way the requirements models are designed, thus leading to substantial
maintenance effort up to entire re-designs of a model. For instance, changes that lead to a modi-
fication in the system structure could require moving requirements between models or entirely
re-designing the information flow in models that depict behaviour or interactions.

“Because the model can be modelled in the way that it’s hard to fit in my new requirement
[..] And then I...okay, should I add to the mess [..] or should I try to remodel this? I think
most people just add something with least effort and then the model becomes even harder
to add something to.” – Interviewee 2

While only one interviewee mentioned this issue, we considered it critical enough to list it here.
In addition to maintenance and model creation effort, several interviewees highlighted that there
is no common way of modelling. Currently, engineers do not get any instructions on how to create
a model, how to use it, and how to maintain it. This leads to a multitude of different modelling
styles, reluctance to modify a model, and in many cases to teams abandoning the model altogether.

“[..] there’s so much freedom. And we happen to have different styles depending on which
person is doing the work. You try to...you like to model it in a way you like.” – Interviewee
5

, Vol. 37, No. 4, Article 111. Publication date: August 2018.

111:16

Grischa Liebel and Eric Knauss

We further hypothesise that this also leads to a higher overall effort, since a person used to one
model might need additional training to use or modify another model, as it might be modelled
following a completely different style.

Finally, several interviewees have reservations towards requirements models due to tooling
issues, and integration of the tools into the process. Most of these reservations are similar to tool
challenges known from related work, e.g., [21, 23, 33, 34, 50]. For instance, the interviewees mention
outdated, heavy-weight tools, and the risk of vendor lock-in.

“I have logged into Rhapsody just a few times, but in general that’s very slow and so on.
So that’s not an option to log into it to get information.” – Interviewee 1
“Someone checks out the requirement document and only that person is allowed to make
changes until it checked in. And hopefully that person will check it in before leaving for
vacation.” – Interviewee 4

Based on these themes, we conclude that requirements models provide substantial value in
VLS agile systems engineering. However, practitioners struggle to use them successfully due to
challenges in maintaining them and modelling in a consistent style that allows engineers to work
on shared models.

5.3 RQ1/RQ2: Use Cases for Requirements Modelling

Use Cases for Requirements Modelling in VLS agile (RQ1/2)

• Models provide an overview of the requirements and their relationships.
• Models provide valuable information to developers and testers.

– Many read, few write
– Potential imbalance (effort/benefit)
– Potential lack of awareness and appreciation of models

Conclusion: A lightweight approach to requirements models that exposes models to many
stakeholders is seen most favourable by the interviewees.

As a third theme in our analysis, we discuss the different use cases for requirements models
that our interviewees report or discuss, and the roles that relate to these use cases. These are
either already in place at the case company today, or the interviewees raised them as desirable or
promising. Not all interviewees had a good overview of all stakeholders that actually interact with
the models, yet implicit assumptions on which roles should interact with the models existed.

The requirements models at the case department are primarily a collection of flow charts/activity
diagrams. Activities are used as containers for textual requirements and their connections depict the
connections/traces between requirements. There is typically a main flow and potentially multiple
alternative flows, describing error cases. The main value of the model lies in the overview it provides,
primarily obtained through the relationships between requirements. Several interviewees state that
this overview is something that is hard to achieve with a text-only representation.

“I think that’s very good. Because it’s easy to follow, compared to when it’s text based.” –
Interviewee 1
“It’s impossible to read all of them and understand what the total requirement mass is.” –
Interviewee 2

The primary use case for the existing requirements models at the studied department is read-only
access, to provide valuable information to developers to inform their activities. However, in many

, Vol. 37, No. 4, Article 111. Publication date: August 2018.

Aspects of Modelling Requirements in Very-Large Agile Systems Engineering

111:17

cases this information is provided by other roles. There is the widespread idea that mainly the
SM reads the model in order to then inform other roles and to provide an overview. SMs use the
model as a source of information to answer questions regarding the overall system functionality,
to investigate how changes affect the system, and to understand if change requests are due to
misunderstood requirements, bugs, or actual changed needs. This restricted use of the requirements
models has the advantage that other team members do not need to be experts in modelling. However,
the disadvantage is that they might not be aware of the models’ value and purpose, leading them
to believe that updating the model is a waste of time - they do not see that the SM uses the model
as a core element in their work.

The degree to which different SMs use the requirements models depends on their personal
preferences and the state of the model. As discussed earlier, some models are outdated and therefore
no longer used by the SMs.

When discussing future use cases, most interviewees mentioned that all team members should

read the model, but not necessarily write.

“Everybody should at least have read access. I cannot see any reason why you should not
have read access.” – Interviewee 1

Relatively few stakeholders currently modify the model. These are primarily the SMs, who create
and update requirements models according to changes in the system, e.g., newly-implemented user
stories.

Testers currently benefit from the requirements models to understand which requirements relate
to a given object under test. Again, the degree to which they use the models varies. Interviewees
also expressed that the model should allow testers better linking of test-related information, such
as individual test executions. This is currently not possible, but would enable better integration of
work the testers currently have to do in other tools.

“And what we as a tester see is lacking, is the way you work with requirements and the
actual test executions, and how you follow up that your requirements are fulfilled.” –
Interviewee 1

5.4 RQ3: Tool Features and Information Content in Requirements Modelling

Needs for Requirements Modelling in VLS Agile (RQ3)

• Models need to be navigable and searchable.
• Broad and easy access to the models is key to adoption.
• Education and guidance for modelling need to be provided.
• Review mechanisms similar to code reviews can foster adoption.
• Generation artefacts from models can serve as a maintenance incentive.
• Heterogeneity of teams and tools needs to be supported.
• Automation of model layout is a trade-off.

Based on the evidence from our interviews, several hypothetical ways to use requirements
models exist. We extrapolate the features necessary in tooling for requirements models, and the
information content those models need to have. Note that this section is only partially based on
evidence from our interviews, and partially a logical extrapolation based on our expertise in the
field. For each theme, we discuss to what extent we do have evidence for the discussion points.

We distinguish four hypothetical scenarios based on our data. These are:

, Vol. 37, No. 4, Article 111. Publication date: August 2018.

111:18

Grischa Liebel and Eric Knauss

(1) Entirely abandoning requirements modelling in favour of using other artefacts as sources of

information.

(2) Using requirements models as sources of information for the SMs only.
(3) Using requirements models as sources of information for developers, with SMs maintaining

the model.

(4) Use and maintenance of the models by the entire development organisation.

Scenario 1 (no requirements models) makes modelling tools unnecessary. Hence, the tools do

not need to be discussed.

Documenting Knowledge: Instead, abandoning models raises the question where the information
should reside instead at the case department. That is, information on how the overall requirements
relate to each other, e.g., in terms of main and alternative flows/scenarios. In our survey and during
the interviews, we found several statements that existing documentation such as the user manuals
could serve this purpose.

“Yes, you could use [customer documentation] as a requirement if it works, but it has not
always worked.” – Interviewee 5

Similarly, tests are often raised as a potential source of knowledge that could replace written

requirements, both in our data and in related work.

“Yes, actually I think it is an interesting idea because we have spent over the years quite
a lot of time and effort on doing this requirements modelling. And there are alternatives
which are tempting. Some have proposed that we should use [..] test cases as such, so
instead we spend more time on reviewing the test cases and whatever ever changes we do
to test cases, to see that this is still the wanted behavior.” – Interviewee 4

However, our interviewees also raise concerns that tests might not be sufficient. That is, each
test expresses exactly one scenario, which means that the overall system behaviour arises from the
combination of the entire test suite. Therefore, this overall behaviour is not easily visible.

“If you only have the test case, it’s not clear really what parts that the test case verifies
that our requirements can...and what is just a behavior. That’s a risk.” – Interviewee 4

If requirements models are used in some capacity, several important needs arise. Some of these
are already present in the current tool solution at the case department, others are lacking according
to the interviewees.

Supporting Traceability: In addition to the information being present, requirements need to
exist so that testers know what to test, and have a target they can trace to. Currently, the tool
T-Reqs [30] fulfils this purpose at the case department, even though one interviewee expressed
that the possibilities for tracing are limited. For instance, test executions could not be traced in
T-Reqs and could therefore not be addressed in the tracing.

“I would like to say that this test execution, I will map to that requirement for our work
package. To indicate that we have delivered what we are supposed to do and we are
fulfilling this requirement. And then, two weeks later, the test execution fails. But [..] it
means that somebody else maybe has destroyed, or we have delivered something new.” –
Interviewee 1

Hence, while traceability capabilities exist in T-Reqs, improvements are necessary.

Navigable and Searchable Information: In the context of VLS systems engineering, requirements
and their relations quickly become complex. Hence, it is important that they can be navigated and
searched efficiently.

, Vol. 37, No. 4, Article 111. Publication date: August 2018.

Aspects of Modelling Requirements in Very-Large Agile Systems Engineering

111:19

“We often have flows. So we have a number of requirements that are a part of a flow. So
when something happens we follow a flow. But those flows are often broken down into
sub-flows and the sub-flows might be re-used from other flows and things like that. So
you want to have some way to kind of link it all together and make it easy to navigate.
[..] you should be able to easily to search there and navigate.” – Interviewee 4
“there is the practical thing of it. And for our requirements to be useful it has to be first
of all easy to find and navigate. Because it’s a complex model, you can’t just...read one
model, one short requirement out of context. [..] So you need an easy way to navigate the
model.” – Interviewee 4

For instance, links between requirements could be made navigatable by using hypermedia with
hyperlinks between requirements, as is standard in most RE tools. Currently, this is supported by
T-Reqs for textual artefacts. For models, several modelling tools allow for hierarchical models that
support hiding information in sub-models, or distributing models and diagrams over several files.
However, extracting relevant information from models is difficult [34], e.g., in the form of a search.

Broad Information Access: Several of our interviewees stated that access to requirements in-
formation needs to be open to everyone. If only selected roles have access to the information,
requirements easily become an abstract concept that many engineers are not aware of or do not
consider important. This lowers the overall acceptance of requirements as an important source of
knowledge in the organisation.

“Everybody should at least have read access. I cannot see any reason why you should not
have read access.” – Interviewee 1
“I think it’s important to be used and to be...maybe have good qualities, I think it’s good if
it can be [..] easily accessed. That seems like a crucial point I think.” – Interviewee 2

While easy tool access can help acceptance of the models in any case, especially for Scenario 3 and
4 (developers use the models at least as a source of information) this feature is crucial. Previously,
the case department used IBM Rhapsody, which required engineers to set up a remote environment
to open the tool. This turned out to be a large obstacle and only few engineers accessed the model,
effectively limiting the access to the SMs.

“R: Because like two thirds of the people will not even try or . . . Rhapsody. I don’t have that
[remote] environment setup and the Rhapsody tool. I have never seen that tool [laughter].”
– Interviewee 2

“Well, first of all it has to be accessible, both for the people who need to do updates of
the model, and also for the people then who are supposed to read the model, read the
requirements, the designers and testers. I mean if it’s very easy to access, people will do it.
If it’s hard to access, people will not.” – Interviewee 4

Need for Education and Guidance: Similar to coding guidelines that exist in most organisations,
modelling and requirements guidelines need to be in place that ensure a common approach to
modelling and requirements. While important for any kind of scenario in which requirements and
models play a role, this guidance becomes more important when many people are supposed to edit
models, i.e., for Scenario 4 in particular. Several of our interviewees raise this point.

“[..] everybody has access. But that of course means that there should be guidance. So when
should you use it? And why should you use it? And who should use it for what reason?” –
Interviewee 1

“[..] people don’t spend effort on making it correct. So you cannot really trust it, because
people maybe not have the ambition or maybe not the knowledge [..].” – Interviewee 2

, Vol. 37, No. 4, Article 111. Publication date: August 2018.

111:20

Grischa Liebel and Eric Knauss

“Yeah, it is back again to this if we want to use Rhapsody and the modelling, in that sense
that we call it modelling, then we have to use the modelling guidelines. And keep it. Not
just know it and just abuse the model.” – Interviewee 3

As a variant of guidelines, several interviewees also suggest mentors at the company that can

support others in modelling-related questions.

“If they don’t know it, double-check with someone that knows it.” – Interviewee 3
“So need to be one or a couple of people that really know how to model that you can ask
for ’Okay, can we have an hour and come to a conclusion how we should model this, my
problem?’.” – Interviewee 2

Need for Review Mechanisms: While guidance and education can improve the quality of models,
enforcing standards could become difficult. Hence, mechanisms are required to do so. Drawing
from experience both in RE and in programming, we believe that both reviews (similar to code
reviews) and automated analyses (similar to requirements heuristics or static code analyses) have
the potential to enforce model quality. Reviews are also brought up several times by interviewees
as a reason to rely on textual modelling tools like PlantUML.

“[..] have like reviews in the tool or it would be like very much be a good way to get people
into also use it, the others. Of course then you can easily ask them to ’Okay, can we have
a review of this?’ or ’Can you review this?’.” – Interviewee 2
“But if you instead did it in a pure text, then you can use your standard merge tools. You
can do standard diff to see what has been updated. If someone wants to do a review, I mean
we have today code review tools we use for everything else.” – Interviewee 4

Code Generation: Carrot and Stick: Existing models at the case company are in many cases
outdated or of low quality. While guidelines, mentors, and model reviews could help addressing
this, several interviewees suggested that artefacts could be generated from the models in a form of
lightweight model-driven engineering process. This would encourage people to read and update
the models, as they serve as a ground truth. In turn, generation could help enforcing guidelines. For
instance, using elements that are semantically wrong would lead to incorrect artefact generation or
errors during the generation process.

“[..] maybe it can just generate a text. [..] I know that in Rational Rose you could generate
a Word document. ” – Interviewee 3
“Either they have to have a demand. They have to check it, otherwise they cannot do the
job. Or you give them, I don’t know, a carrot. [..] Because modelling is taking time. If you
want to do it right. [..] if the modelling tools could give you something that you could
generate, then it would be a little bit better, I suppose.” – Interviewee 3

Due to the use of the requirements model as a read-only source of information, the model is
disconnected from the final product. Nothing is generated from the model that is used further in
development. This means that the end product could potentially be completely contradicting the
model. This bears the risk that the model deteriorates. If code or other important artefacts would
directly be generated from it, this would not happen.

However, it is important to note that generation of artefacts requires a well-balanced approach:
None of the interviewees expressed the desire to follow a strict generation approach, where, e.g.,
the entire code is generated based on models. Hence, generation should remain a tool that allows
engineers to see some direct benefit of the models, and to obtain quick feedback of sorts, without
dictating their entire workflow.

, Vol. 37, No. 4, Article 111. Publication date: August 2018.

Aspects of Modelling Requirements in Very-Large Agile Systems Engineering

111:21

Supporting Heterogeneity: In VLS systems engineering, development work is organised in a
number of different ways. For instance, component teams are common, where different teams
focus on their individual components. The case department instead structures work by expertise,
e.g., having teams that focus on quality attributes such as availability. This heterogeneity leads
to different approaches, and to different needs. Furthermore, heterogeneity and independence of
teams is encouraged by the use of agile practices. In turn, this heterogeneity requires highly flexible
tools and notations, or independence within the teams to choose their own tools and notations
for requirements and requirements modelling. Forcing a single tool/style/approach on all teams
will likely lead to resistance. Nevertheless, advertising success stories from individual teams might
pave the way for others to adopt similar approaches.

“We have different areas with different needs, but my area is very functional.” – Interviewee
4

With respect to requirements modelling, supporting heterogeneity might also mean accepting
that some teams choose to abandon modelling entirely, either due to preference, or due to a
mismatch with their way of working.

Abstraction Level: The case company needs to be compliant with specifications from 3GPP [1].
This standard contains many technical details, that often need to be discussed or referenced in the
requirements, e.g., to discuss required additions.

“[..] somewhere I would say between 75% and maybe up to 90% depending on a bit what
area we are in, the requirements are specified by 3GPP, we implement the standards. And
then we don’t need to re-specify this. But sometimes we need to clarify this because the
standard might not be very clear on certain details. So we might need to annotate it and
say ’okay, in this case the value should be this or we do like that’, when the standard is
not clear enough.” – Interviewee 4

This leads to requirements or requirements models on a low level of abstraction. Any notation
or specification format used at the case company needs to support this level of abstraction. For
example, to make a requirements model understandable, it might be necessary to use hierarchical
models to hide details. A modelling tool would thus need to offer sophisticated hierarchy and
decomposition features.

However, given that the requirements at the case department are closely-aligned with the
standard, this also means that engineers have an easier time choosing the right level of abstraction,
something that is otherwise challenging [34].

Importance of Layout: Finally, several of the interviewees raise the advantage of textual modelling
languages like PlantUML, as they can be integrated into traditional text-based environments such as
git or diff. However, they come at the cost of relying on automated layouting, e.g., through GraphViz2
in the case of PlantUML. The layout of a graphical model can contain important information, and
reflect the intent of the modeller [48]. Expressing this information is therefore no longer possible
with automated layouting. Our interviewees have differing views as to whether this is a problem
or not.

“I don’t think that will be any problem. [..] It could be better like that. I see it, as long as I
can show the flow, you have space to write, you could show the relation of the different
parts, I think it should be okay.” – Interviewee 5
“I think that’s crap [automatic layout]. You must be able to...an automatic thing is good,
but then you should click on a button ’I want an automatic suggestion’. And then you

2https://graphviz.org/

, Vol. 37, No. 4, Article 111. Publication date: August 2018.

111:22

Grischa Liebel and Eric Knauss

should be able to fine-tune it and it should stay that way. [..] Because the tool will never
know what my intention was.” – Interviewee 1

One interviewee suggested that, while automatic layout might not work for complex models,

conventions or adjustments to automatic layout could be possible.

“[..] it’s not a black and white question here. In many cases it doesn’t matter. If you do
modeling as diagrams or activity flows or something like that...if you have small enough
flows the layout doesn’t matter, because it will not be that bad. [..] When the model
becomes larger and more complex layout becomes more important. [..] it might be good to
do some hinting. For example exceptional flows maybe should go to the right while main
flows on the left or something like that. ” – Interviewee 4

This last point clearly shows the complex trade-off between the simplicity of tools, and features

that might be considered essential by some.

6 DISCUSSION AND CONCLUSION
We conducted a case study in one department at Ericsson AB, a large Swedish telecommunica-
tions provider, investigating the use of models for RE purposes. We conducted a survey with 33
participants, followed by 5 semi-structured interviews.

With respect to RQ1 (What sentiments exist for and against the use of requirements models
in VLS agile systems engineering?), we find that our study participants consider requirements
models useful and valuable. While several interviewees mentioned that sentiments against these
models exist in the case department, we did not directly interact with anyone supporting this
view. However, we also find that creating and maintaining requirements models at a sufficiently
high level of quality is challenging. Several participants maintain that many existing models have
deteriorated over time and are no longer useful. Additional point worth highlighting is that different
modelling styles make it difficult to jointly work on models, something that might be harder to
unify compared to, e.g., writing style in textual requirements. Finally, one interviewee mentioned
that the nature of some changes to requirements models can require entire models to be re-drawn.
This either leads to substantial overhead, or it causes resistance to make changes in the models,
especially if changes are made by other engineers than the model creator.

The use of existing requirements models at the case department (RQ2, How do different stake-
holders use requirements models in VLS agile systems engineering?) is primarily by SMs, in their
role as providers of system-level knowledge and as a boundary between incoming change requests,
system requirements, and work in individual agile teams. While several engineers in other roles
use the models as well, mainly in a read-only fashion to answer their questions on intended system
requirements, complex tooling used in the case department in the past has prevented a broader
consumption of the models. Interviewees expressed the desire that all engineers should at least
read the models. They further express confidence that their tool T-Reqs supports this, in which
models are stored in textual format alongside code and textual requirements in git repositories.
This allows easy access through tools engineers use on a daily basis, as well as easier review in
terms of textual diff.

Our findings with respect to RQ1 and RQ2 allow for reasoning about the information content and
tooling needs (RQ3, What are the needs to support the intended use of requirements models in VLS
agile systems engineering?) regarding requirements modelling. The value of the models at the case
department is primarily in providing an overview of the system requirements and especially their
connections, something that is difficult to express in a suitable manner in text. However, in order
for the models to reach their full potential, the contained information needs to be up to date and
of high quality. This, in turn, requires a broad access to the models by all stakeholders, at least in

, Vol. 37, No. 4, Article 111. Publication date: August 2018.

Aspects of Modelling Requirements in Very-Large Agile Systems Engineering

111:23

read-only fashion. Furthermore, education and guidance in how to create and maintain the models
is essential, potentially also in the form of mentors at the case department. In terms of tool features,
navigation and search are essential. Furthermore, interviewees expressed the desire to incorporate
the requirements models in their regular code review workflow, e.g., by adding them to the git
repository in textual form. Using generation of artefacts from models could be a way to further
incentivise their use. However, no interviewee expressed the desire to generate substantial code
from the models. Using textual models is considered an advantage by most study participants, due
to easier tooling and the possibility to integrate the models into exiting tools. However, a number
of issues arise due to the reliance on textual modelling, most notably the loss of manual layout
capabilities at the case department. Interviewees suggested workarounds such as a standard layout,
where the main flow is always displayed to the left, while alternative flows are drawn to the left of
the main flow. Finally, we note the importance of supporting heterogeneity at the case department,
with different needs and preferences in the agile teams.

Our study clearly shows the usefulness of models during RE, if used for well-motivated use cases.
Furthermore, the study shows that simple modelling tools that are close to the engineers in terms
of workflow and tooling have the potential to be successful, while heavy-weight modelling tools do
not reach their full potential due to difficulties in accessing and using the tools, and resistance to
do so regularly. Finally, we find several trade-offs that exist when tailoring models and modelling
tools to an organisation, e.g., sophisticated modelling tool features such as hierarchy and manual
layout vs. simple, text-based modelling tools.

REFERENCES
[1] 3rd Generation Partnership Project (3GPP). 2021. Technical Specification Group Services and System Aspects; Release 16

Description; Summary of Rel-16 Work Items (Release 16). Technical Report 21.916.

[2] Scott W Ambler. 2001. Agile modeling: A brief overview. In Practical UML-based rigorous development methods-
Countering or integrating the extremists, workshop of the pUML-group held together with the UML 2001. Gesellschaft für
Informatik e. V.

[3] Paul Baker, Shiou Loh, and Frank Weil. 2005. Model-Driven Engineering in a Large Industrial Context - Motorola Case
Study. In Model Driven Engineering Languages and Systems, Lionel C. Briand and Clay Williams (Eds.). Lecture Notes
in Computer Science, Vol. 3713. 476–491.

[4] Kent Beck. 1999. Extreme Programming Explained: Embrace Change. Addison-Wesley.
[5] B. Berenbach, F. Schneider, and H. Naughton. 2012. The use of a requirements modeling language for industrial

applications. In 20th IEEE International Requirements Engineering Conference (RE). 285–290.

[6] Christian Berger and Ulrik Eklund. 2015. Expectations and Challenges from Scaling Agile in Mechatronics-Driven
Companies – A Comparative Case Study. In Agile Processes in Software Engineering and Extreme Programming, Casper
Lassenius, Torgeir Dingsøyr, and Maria Paasivaara (Eds.). Springer International Publishing, Cham, 15–26.

[7] Elizabeth Bjarnason, Krzysztof Wnuk, and Björn Regnell. 2011. A Case Study on Benefits and Side-Effects of Agile
Practices in Large-Scale Requirements Engineering. In Proceedings of the 1st Workshop on Agile Requirements Engineering
(Lancaster, United Kingdom) (AREW ’11). Association for Computing Machinery, New York, NY, USA, Article 3, 5 pages.
https://doi.org/10.1145/2068783.2068786

[8] Wolfgang Böhm, Maximilian Junker, Andreas Vogelsang, Sabine Teufl, Ralf Pinger, and Karsten Rahn. 2014. A formal
systems engineering approach in practice: An experience report. In Proceedings of the 1st International Workshop on
Software Engineering Research and Industrial Practices. ACM, 34–41.

[9] Veronika Brandstetter, Andreas Froese, Bastian Tenbergen, Andreas Vogelsang, Jan Christoph Wehrstedt, and Thorsten
Weyer. 2015. Early Validation of Automation Plant Control Software using Simulation Based on Assumption Modeling
and Validation Use Cases. Complex Systems Informatics and Modeling Quarterly 4 (2015), 50–65.

[10] Peter Braun, Manfred Broy, Frank Houdek, Matthias Kirchmayr, Mark Müller, Birgit Penzenstadler, Klaus Pohl, and
Thorsten Weyer. 2014. Guiding requirements engineering for software-intensive embedded systems in the automotive
industry. Computer Science - Research and Development 29, 1 (2014), 21–43.

[11] Jennifer Brings, Julian Bellendorf, Kevin Keller, Markus Kempe, Noyan Kurt, Alexander Palm, and Marian Daun.
2017. Applying the SPES Modeling Framework. In Joint Proceedings of REFSQ-2017 Workshops, Doctoral Symposium,
Research Method Track, and Poster Track co-located with the 22nd International Conference on Requirements Engineering:
Foundation for Software Quality (REFSQ 2017).

, Vol. 37, No. 4, Article 111. Publication date: August 2018.

111:24

Grischa Liebel and Eric Knauss

[12] Kim Dikert, Maria Paasivaara, and Casper Lassenius. 2016. Challenges and success factors for large-scale agile
transformations: A systematic literature review. Journal of Systems and Software 119 (2016), 87 – 108.
https:
//doi.org/10.1016/j.jss.2016.06.013

[13] Kim Dikert, Maria Paasivaara, and Casper Lassenius. 2016. Challenges and success factors for large-scale agile

transformations: A systematic literature review. Journal of Systems and Software 119 (2016), 87–108.

[14] Torgeir Dingsøyr, Tor Erlend Fægri, and Juha Itkonen. 2014. What is large in large-scale? A taxonomy of scale for
agile software development. In International Conference on Product-Focused Software Process Improvement. Springer,
273–276.

[15] Ulrik Eklund, Helena Holmström Olsson, and Niels Jørgen Strøm. 2014. Industrial Challenges of Scaling Agile in
Mass-Produced Embedded Systems. In Agile Methods. Large-Scale Development, Refactoring, Testing, and Estimation,
Torgeir Dingsøyr, Nils Brede Moe, Roberto Tonelli, Steve Counsell, Cigdem Gencel, and Kai Petersen (Eds.). Springer
International Publishing, Cham, 30–42.

[16] M. Fockel and J. Holtmann. 2014. A requirements engineering methodology combining models and controlled natural

language. In IEEE 4th International Model-Driven Requirements Engineering Workshop (MoDRE ’14). 67–76.

[17] Lucas Gren and Per Lenberg. 2020. Agility is responsiveness to change: An essential definition. In Proceedings of the

Evaluation and Assessment in Software Engineering. 348–353.

[18] Sebastian Hansson, Yu Zhao, and Håkan Burden. [n.d.]. How MAD are we? Empirical Evidence for Model-driven

Agile Development. In XM 2014–Extreme Modeling Workshop.

[19] Ville T Heikkilä, Maria Paasivaara, Casper Lasssenius, Daniela Damian, and Christian Engblom. 2017. Managing
the requirements flow from strategy to release in large-scale agile development: a case study at Ericsson. Empirical
Software Engineering 22 (2017), 2892–2936. Issue 6. https://doi.org/10.1007/s10664-016-9491-z

[20] V. T. Heikkilä, D. Damian, C. Lassenius, and M. Paasivaara. 2015. A Mapping Study on Requirements Engineering in
Agile Software Development. In 41st Euromicro Conference on Software Engineering and Advanced Applications. 199–207.
https://doi.org/10.1109/SEAA.2015.70

[21] John Hutchinson, Mark Rouncefield, and Jon Whittle. 2011. Model-driven engineering practices in industry. In 33rd

International Conference on Software Engineering (ICSE ’11). 633–642.

[22] John Hutchinson, Jon Whittle, and Mark Rouncefield. 2014. Model-driven engineering practices in industry: Social,
organizational and managerial factors that lead to success or failure. Science of Computer Programming 89, Part B, 0
(September 2014), 144–161. SI: Success Stories in Model Driven Engineering.

[23] John Hutchinson, Jon Whittle, Mark Rouncefield, and Steinar Kristoffersen. 2011. Empirical assessment of MDE in

industry. In 33rd International Conference on Software Engineering (ICSE ’11). 471–480.

[24] Irum Inayat, Siti Salwah Salim, Sabrina Marczak, Maya Daneva, and Shahaboddin Shamshirband. 2015. A systematic
literature review on agile requirements engineering practices and challenges. Computers in Human Behavior 51 (2015),
915 – 929. https://doi.org/10.1016/j.chb.2014.10.046 Computing for Human Learning, Behaviour and Collaboration in
the Social and Mobile Networks Era.

[25] Tuomo Kahkonen. 2004. Agile methods for large organizations-building communities of practice. In Agile development

conference. IEEE, 2–10.

[26] Rashidah Kasauli, Eric Knauss, Jennifer Horkoff, Grischa Liebel, and Francisco Gomes de Oliveira Neto. 2021. Require-
ments engineering challenges and practices in large-scale agile system development. Journal of Systems and Software
172 (2021), 110851.

[27] Rashidah Kasauli, Eric Knauss, Benjamin Kanagwa, Agneta Nilsson, and Gul Calikli. 2018. Safety-critical systems
and agile development: a mapping study. In 2018 44th Euromicro Conference on Software Engineering and Advanced
Applications (SEAA). IEEE, 470–477.

[28] Rashidah Kasauli, Eric Knauss, Joyce Nakatumba-Nabende, and Benjamin Kanagwa. 2020. Agile Islands in a Waterfall
Environment: Requirements Engineering Challenges and Strategies in Automotive. In Proceedings of International
Conference on Evaluation and Assessment in Software Engineering (EASE). Trondheim, Norway, 31–40. https://doi.org/
10.1145/3383219.3383223

[29] Rashidah Kasauli, Grischa Liebel, Eric Knauss, Swathi Gopakumar, and Benjamin Kanagwa. 2017. Requirements
engineering challenges in large-scale agile system development. In 2017 IEEE 25th International Requirements Engineering
Conference (RE). IEEE, 352–361.

[30] Eric Knauss, Grischa Liebel, Jennifer Horkoff, Rebekka Wohlrab, Rashidah Kasauli, Filip Lange, and Pierre Gildert.
2018. T-reqs: Tool support for managing requirements in large-scale agile system development. In 2018 IEEE 26th
International Requirements Engineering Conference (RE). IEEE, 502–503.

[31] L. Lagerberg, T. Skude, P. Emanuelsson, K. Sandahl, and D. Ståhl. 2013. The Impact of Agile Principles and Practices on
Large-Scale Software Development Projects: A Multiple-Case Study of Two Projects at Ericsson. In 2013 ACM / IEEE
International Symposium on Empirical Software Engineering and Measurement. 348–356. https://doi.org/10.1109/ESEM.
2013.53

, Vol. 37, No. 4, Article 111. Publication date: August 2018.

Aspects of Modelling Requirements in Very-Large Agile Systems Engineering

111:25

[32] Dean Leffingwell. 2010. Agile software requirements: lean requirements practices for teams, programs, and the enterprise.

Addison-Wesley Professional.

[33] Grischa Liebel, Nadja Marko, Matthias Tichy, Andrea Leitner, and Jörgen Hansson. 2018. Model-based engineering in
the embedded systems domain: an industrial survey on the state-of-practice. Software & Systems Modeling 17, 1 (2018),
91–113. https://doi.org/10.1007/s10270-016-0523-3

[34] Grischa Liebel, Matthias Tichy, and Eric Knauss. 2018. Use, potential, and showstoppers of models in automotive

requirements engineering. Software & Systems Modeling (2018). https://doi.org/10.1007/s10270-018-0683-4

[35] Grzegorz Loniewski, Emilio Insfran, and Silvia Abrahão. 2010. A systematic review of the use of requirements engi-
neering techniques in model-driven development. In International Conference on Model Driven Engineering Languages
and Systems. Springer, 213–227.

[36] Bertrand Meyer. 2014. Agile! Bertrand MeyerThe Good, the Hype and the Ugl. Springer.
[37] Parastoo Mohagheghi, Wasif Gilani, Alin Stefanescu, Miguel A. Fernandez, Bjørn Nordmoen, and Mathias Fritzsche.
2013. Where does model-driven engineering help? Experiences from three industrial cases. Software and Systems
Modeling 12, 3 (2013), 619–639.

[38] Frauke Paetsch, Armin Eberlein, and Frank Maurer. 2003. Requirements Engineering and Agile Software Development..
In WET ICE 2003. Proceedings. 12th IEEE International Workshops on Enabling Technologies: Infrastructure for Collaborative
Enterprises, 2003. 308–313. https://doi.org/10.1109/ENABL.2003.1231428

[39] Joakim Pernstål, Ana Magazinius, and Tony Gorschek. 2012. A study investigating challenges in the interface between
product development and manufacturing in the development of software-intensive automotive systems. International
Journal of Software Engineering and Knowledge Engineering 22, 07 (2012), 965–1004.

[40] Kai Petersen and Cigdem Gencel. 2013. Worldviews, research methods, and their relationship to validity in empirical
software engineering research. In 2013 joint conference of the 23rd international workshop on software measurement and
the 8th international conference on software process and product measurement. IEEE, 81–89.

[41] Klaus Pohl, Harald Hönninger, Reinhold Achatz, and Manfred Broy. 2012. Model-Based Engineering of Embedded

Systems: The SPES 2020 Methodology. Springer Science & Business Media.

[42] Balasubramaniam Ramesh, Lan Cao, and Richard Baskerville. 2010. Agile requirements engineering practices and
challenges: an empirical study. Information Systems Journal 20, 5 (2010), 449–480. https://doi.org/10.1111/j.1365-
2575.2007.00259.x

[43] Bernhard Rumpe. 2002. Agile Modeling with the UML. In International Workshop on Radical Innovations of Software

and Systems Engineering in the Future. Springer, 297–309.

[44] Johnny Saldaña. 2015. The coding manual for qualitative researchers. Sage.
[45] Outi Salo and Pekka Abrahamsson. 2008. Agile methods in European embedded software development organisations: a
survey on the actual use and usefulness of Extreme Programming and Scrum. IET Software 2 (February 2008), 58–64(6).
Issue 1.

[46] Outi Salo and Pekka Abrahamsson. 2008. Agile methods in European embedded software development organisations:
a survey on the actual use and usefulness of Extreme Programming and Scrum. IET software 2, 1 (2008), 58–64.
[47] Bran Selic. 1998. Using UML for modeling complex real-time systems. In Languages, compilers, and tools for embedded

systems. Springer, 250–260.

[48] Harald Störrle. 2011. On the impact of layout quality to understanding UML diagrams. In 2011 IEEE Symposium on

Visual Languages and Human-Centric Computing (VL/HCC). IEEE, 135–142.

[49] Andreas Vogelsang, Sebastian Eder, Georg Hackenberg, Maximilian Junker, and Sabine Teufl. 2014. Supporting
concurrent development of requirements and architecture: A model-based approach. In Model-Driven Engineering and
Software Development (MODELSWARD), 2014 2nd International Conference on. IEEE, 587–595.

[50] Jon Whittle, John Hutchinson, Mark Rouncefield, Håkan Burden, and Rogardt Heldal. 2013. Industrial Adoption of
Model-Driven Engineering: Are the Tools Really the Problem? In Model-Driven Engineering Languages and Systems,
Ana Moreira, Bernhard Schätz, Jeff Gray, Antonio Vallecillo, and Peter Clarke (Eds.). Lecture Notes in Computer
Science, Vol. 8107. 1–17.

7 ACKNOWLEDGMENTS
We would like to thank our contacts at Ericsson AB for the fruitful collaboration and construc-
tive input at all stages of this work, and the study participants for their valuable contributions.
Furthermore, we express our gratitude to João Araujo for feedback on the manuscript draft. Parts
of this work were supported by Software Center Project 27 on RE for Large-Scale Agile System
Development.

, Vol. 37, No. 4, Article 111. Publication date: August 2018.

111:26

Grischa Liebel and Eric Knauss

A QUESTIONNAIRE
This section shows the questionnaire we ran with the case department.

A.1 Page 1
Rationale:
In this questionnaire, we aim to investigate the current use of requirements models in [Case Depart-
ment], as well as the needs for future use. The reason to do so is the planned replacement of IBM
Rational Rhapsody. At the same time, this questionnaire is part of an academic research project at
Chalmers & Gothenburg University in collaboration with [Case Company], investigating the use of
models for requirements engineering in industry.

Target group:
We target all individuals at [Case Department] that come into contact with requirements models.
This means both people who create models and those who access them.

Practicalities:
The survey consists of 20 questions and will take approximately 15 minutes to answer. Your answers
are treated completely anonymous. The survey ends on [end date].

Thank you very much for your time!

If you have any questions, please contact the creators of this survey: Grischa Liebel (grischa@chalmers.se)
or Eric Knauss (eric.knauss@cse.gu.se) for any research-related questions, and [Contact Person 1]
or [Contact Person 2] for any [Case Company]-related questions.

A.2 Page 2

(1) What is your main role?

(Free text)

(2) In which system area do you work?

(Free text)

(3) How long have you been working with [Product]?

(Free text)

(4) What are your main work tasks?
(Options, multi-selection)
• Line management
• Requirements specification
• Architecture definition
• Design definition
• Software implementation
• Testing
• Customer support
• Security
• Quality management
• Process improvement
• Organisation improvement
• Other:

, Vol. 37, No. 4, Article 111. Publication date: August 2018.

Aspects of Modelling Requirements in Very-Large Agile Systems Engineering

111:27

Models
In the following, we refer to "models" in the sense of UML or similar notations.

(5) How much experience do you have in creating models (in years)?

(Mandatory, free text)

(6) How often do you on average create/modify models of requirements?

(Mandatory, single-selection: Never, Yearly, Monthly, Weekly, Daily)

(7) How often do you on average read/use models of requirements without modifying them?

(Mandatory, single-selection: Never, Yearly, Monthly, Weekly, Daily)

(8) How often do you on average access (modify/read) models of requirements created outside

your team?
(Mandatory, single-selection: Never, Yearly, Monthly, Weekly, Daily)

(9) Do you personally use IBM Rational Rhapsody for creating/reading models of requirements?

(Mandatory, Yes/No)

(10) Do you have any additional comments on this page?

(Optional, free text)

A.3 Page 3

(11) Which of the following statements correspond to your understanding of the terms dia-

gram/model?
(Mandatory, Multi-selection)
• There is no difference between a diagram and a model.
• A model contains all entities and relations, while a diagram is a (partial)
• visualisation of this model.
• Multiple diagrams can exist for the same model.
• A diagram always has a graphical representation, while a model may not.
• Other: (Free text)

(12) Are you in general positive or negative towards the use of models to express requirements?
(Note that this question is not used to rate your answer. Instead we aim to find out what the
general view of models is in the organisation.)
(Mandatory, single-selection: Positive, Negative, Neutral/I don’t know)

(13) Which diagram types do you use (creation or usage) for expressing requirements? (Optional,

Multi-selection, with an example diagram for each diagram type)
• Class diagrams
• Component diagrams
• Activity diagrams
• Sequence diagrams
• State Machine diagrams
• Use Case diagrams
• Others (Free text)

(14) Please rate your agreement to the following statements.

(Mandatory, 5-point Likert scale from Strongly Disagree to Strongly Agree, plus an
"I don’t know" option)
• The layout of a diagram is important to me.
• The existing requirements models do not carry important information.
• The access to requirements models should be integrated with existing development tools.
• The access to requirements models should be integrated with T-Reqs. Requirements models

should be used for automated tasks (e.g., verification, artefact generation).

, Vol. 37, No. 4, Article 111. Publication date: August 2018.

111:28

Grischa Liebel and Eric Knauss

• Requirements models should only be used for documentation.
• The current modelling tool is restricting me in my work.
• I would update/maintain the requirements models more frequently if I had a better tool.
• Navigation between diagrams is an important feature.

(15) Do you have any additional comments on this page?

(Optional, free text)

Additionally, we displayed the following two questions iff a participant stated in question 6

(model creation) that he/she created/used models at least monthly:

(16) For what purposes do you create models of requirements?

(Optional, free text)

(17) Who is looking at the models of requirements you create?

(Optional, Multi-selection)
• Myself
• Other developers in the same team
• Other teams
• Product owner for my team
• Product owners of other teams
• CPI writers
• System managers
• Customer support
• Others:

A.4 Page 4

(18) What features/properties does a modelling tool need to offer?

(Optional, free text)

(19) Currently, keeping the models/diagrams of requirements up to date is challenging. Do you
have any suggestions how engineers could be motivated to maintain these models/diagrams
more frequently?
(Optional, free text)

(20) How would the ideal situation regarding requirements modelling look like in the future?

(Optional, free text)

(21) Do you have any other comments (e.g., alternative ideas to modelling, tool suggestion)?

(Optional, free text)

Additionally, we displayed the following question iff a participant stated "yes" in question 9 (use

of IBM Rhapsody):

(22) Which features in IBM Rational Rhapsody are important to you?

(Optional, free text)

A.5 Page 5
Thank you for completing this questionnaire!

We would like to thank you very much for helping us.

Your answers were transmitted, you may close the browser window or tab now.

, Vol. 37, No. 4, Article 111. Publication date: August 2018.

Aspects of Modelling Requirements in Very-Large Agile Systems Engineering

111:29

Prop Nr Used Questions
P1
P2
P3
P4
P5
P6
P7
P8
P9
P10
P11
P12

Q1, Q4, Q6, Q7, Q8, Q9, Q17
Q1, Q4, Q6, Q7, Q8, Q9, Q17
Q5, Q6 + free text
Q1, Q4, Q6, Q7, Q8, Q12, Q14.2.7
Q13 + free text
Q1, Q4, Q14.2
Q14.1
Q14.3.4
Q14.5
Q14.6.7, Q12, Q9
Q14.7
Q14.8

Table 3. Evaluation of Propositions

B PROPOSITION EVALUATION

C INTERVIEW PROPOSITIONS AND QUESTIONS
In the following, we discuss the updated propositions and open questions guiding the interview
design. The open questions relate in particular to contradictions in the survey data. Propositions
are accompanied with How-questions, as we aim to understand their outcome in detail, not simply
corroborate them or not.

C.1 Propositions

• The current ad-hoc use of models is insufficient. Either modelling should be abandoned, or a
clear process (with clear stakeholders, tasks and abstraction levels) and guidelines (including
courses on modelling) are needed. (How could such a process look like?)

• Information in models is outdated in many areas. This needs a centralised effort to be fixed,
replacing the tool does only treat the symptoms. (How could the case company proceed? How
do first steps look like?)

• A number of stakeholders/tasks have been forgotten when considering the use of models

and the tool integration. (Who are these stakeholders? What are their needs?)

• Potential users need a clearer motivation for using (and in particular updating) models. (How

could we motivate them?)

• A lightweight modelling approach is sufficient for the case company. They require only very
few model elements of activity diagrams (activity nodes with text, relations between them)
and few model capabilities. (Which of the features of modern modelling tools are still required?)

C.2 Questions

• Using PlantUML allows only automated layouting. How do stakeholders view this trade-off
between text-based integration into T-Reqs, and losing capability to modify the layout? How
does the simple approach relate to other modelling capabilities?

• Automation using existing models was supported in the survey. How should this automation

look like? What aspects could/should be automated?

• What kind of information is needed in the models? What is a suitable level of abstraction?
• Working with models is currently cumbersome. How can the experience be improved? What

does it mean to be easy to use for a modelling tool?

, Vol. 37, No. 4, Article 111. Publication date: August 2018.

111:30

Grischa Liebel and Eric Knauss

• Information needs clearly differ between stakeholders. What information needs exist for

specific stakeholders?

D A-PRIORI CODEBOOK

• role, experience (demographic codes)
• modellingProcess, stakeholdersOfModels, informationContent, motivationForModels, trade-

off, abstraction, modelAutomation, toolFeatures

, Vol. 37, No. 4, Article 111. Publication date: August 2018.

