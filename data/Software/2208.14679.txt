2
2
0
2

g
u
A
1
3

]
E
S
.
s
c
[

1
v
9
7
6
4
1
.
8
0
2
2
:
v
i
X
r
a

Mapping aids using source location tracking increase novices’
performance in programming cyber-physical systems

Thomas Wittea,∗, Andrea Vogtb,∗, Tina Seufertb, Matthias Tichya

a Institute of Software Engineering and Programming Languages
Ulm University, Germany
b Department Learning and Instruction
Institute of Psychology and Education
Ulm University, Germany

Abstract

Motivation and Background. Novices need to overcome initial barriers while programming cyber-

physical systems behavior, like coding quadcopter missions, and should thus be supported by an

adequately designed programming environment. Using multiple representations by including graph-

ical previews is a common approach to ease coding and program understanding. However, novices

struggle to map information of the code and graphical previews. Previous studies imply that map-

ping aids in a live programming environment might support novices while programming and foster

a deeper understanding of the content. To implement these mapping aids in a domain independent

way Source Location Tracking based on run-time information can be used.

Method. In our study, we tested N = 82 participants while interacting and learning in an online

programming environment. Using our 2x2 between-subject design study, we investigated the eﬀects

of two mapping aids: highlighting and dynamic linking on coding correctness including typical

errors, and learning outcomes. Based on process data successful strategies were analyzed.

Results. Combining both mapping aids compared to one aid resulted in higher performance. While

highlights were more helpful for implementing the quadcopter missions (mission 1: p = .008*,

η2
partial = .091), dynamic linking improved learning outcomes on the comprehension (F (1, 75) =
partial = .070) and application level (F (1, 75) = 4.08, p = .047*, η2
5.61, p = .020*, η2
partial = .052).

∗Authors contributed equally
Email addresses: thomas.witte@uni-ulm.de (Thomas Witte), andrea.vogt@uni-ulm.de (Andrea Vogt),

tina.seufert@uni-ulm.de (Tina Seufert), matthias.tichy@uni-ulm.de (Matthias Tichy)

Preprint submitted to International Journal of Human Computer Studies

September 1, 2022

 
 
 
 
 
 
Traces of learning strategies were related to higher coding correctness (organizing: r = .553, p <

.001***; elaborating: r = .639 p < .001***) and higher learning outcomes (organizing: r = .400,

p < .001***; elaborating : r = .404, p < .001***). Based on process data, users in the group with

both aids had a 5.18-times higher chance (p = .020*) of avoiding certain typical implementation

mistakes.

Discussion. Implementing dynamic linking and highlighting through source location tracking is a

promising approach to support novices to develop a better semantic understanding of the domain

speciﬁc language. Depending on the coding tasks diﬀerent mapping aids might be eﬀective. Based

on traces of learning strategies while programming, adaptive interactive programming environments

might be developed to support users individually.

Keywords: domain speciﬁc languages, cyber-physical systems, novices, live programming, source

location tracking, bidirectional linking, multiple representations, mapping aids, multimethod

approach, traces of learning strategies

Highlights

• This study investigated the eﬀects of highlighting and dynamic linking between a program

editor and a graphical preview in an interactive programming learning environment.

• We found beneﬁcial eﬀects of dynamic linking on code comprehension and application.

• Combining both aids compared to highlighting resulted in higher transfer performance.

• A synergetic eﬀect of both mapping aids compared to dynamic linking was found for pro-

gramming the ﬁrst mission.

• Traces of learning strategies (organizing, elaborating) were related to higher performance.

• Mapping aids reduce the odds of typical errors.

• The best performing novices showed heterogeneity in terms of their characteristics

2

1. Introduction

The programming and integration of cyber-physical systems (CPS) – such as stationary or

mobile robots – is often performed by domain experts rather than software engineers (Rossano

et al., 2013).

In rescue operations, for example, drones can help to better assess the extent of

an accident, simplify the coordination of an operation, or make an important contribution to the

rescue of survivors (Rold´an-G´omez et al., 2021). The low-level programming of such a system, i.e.,

basic control and communication capabilities, is provided by the manufacturer. However, high-

level programming of the mission objectives must be done on site by the drone operator – typically

not a programming expert. For this purpose, it is necessary that the programming and learning

environment (PLE) for that system is easy to operate and that a basic understanding can be learned

quickly. Since many CPS operators do not have any special programming skills, the question arises

of how to facilitate the handling and acquiring basic knowledge of these types of systems for novices.

To overcome initial barriers while interacting with CPS or learning to code, the design of the

provided PLE is crucial (Prather et al., 2018).

In PLEs diﬀerent ways to display information are available: depictive and descriptive presenta-

tion formats (Schnotz et al., 2010). On the one hand descriptive presentation formats such as text

or code expressions can be provided. On the other hand depictive formats can be chosen such as

pictures or animations (e.g. a preview).

For instance, PLEs for novices might simplify programming by presenting the code in a way

that is not only descriptive but contains additional depictive components. For example, graphical

programming languages, e.g., based on combining puzzle pieces that each provide a small mission

element (e.g. Blockly; Pasternak et al., 2017; Price & Barnes, 2015), can be employed instead of

solely textual (descriptive) programming languages. Combining intuitive symbols or aﬀordances

that imply the eﬀect of the programming code (e.g. puzzle pieces in Blockly) with the descriptive

expressions or code components might facilitate programming (Pot et al., 2009). These approaches

seem very promising to lower the initial barrier for novices to code or control CPS. Despite the

graphical (depictive) component of e.g. Blockly, this presentation format can still be categorized as

textual, as the main information (code element) is presented as text and therefore in a descriptive

form.

Based on the literature and learning psychology models, the advantages of depictive presentation

formats or their combination with descriptive formats are often recommended for the design of

3

(learning) environments (Ainsworth, 2014; Mayer, 2014; Schnotz & Bannert, 2003). For this reason,

PLE oftentimes incorporate multiple representations such as a code editor with other views, e.g. a

simulation, a graphical preview of the result or other live programming features (Breckel & Tichy,

2016; Burnett et al., 1998; Rossano et al., 2013; Tanimoto, 2013).

Including multiple representations in PLEs by combining descriptive components such as a

program editor (e.g. Blockly) and a depictive representation (e.g. a 3D preview) might challenge

the novices to map information between the diﬀerent formats (Ainsworth, 1999; Seufert, 2019).

For instance, they need to understand the individual elements but also the relationship between

the code and the preview. Only when these relationships are understood, either by linking related

elements or by understanding corresponding processes, can an advantage be gained from the use

of multiple representations (Mayer et al., 2018; Patwardhan & Murthy, 2017; Rey, 2011). To ease

the mapping of multiple representations, corresponding elements can be highlighted, or dynamic

linking between the diﬀerent representations can facilitate the understanding of the corresponding

processes (Fries et al., 2021; Hempel et al., 2019; Seufert, 2019; van der Meij & de Jong, 2006).

The beneﬁcial eﬀects of mapping aids have been examined in diﬀerent contexts for decades (e.g.

Br¨unken et al., 2005; Fries et al., 2021; Gentner, 1983). A transfer of these principles, which have

long been well researched, seems promising in the context of basic CPS knowledge acquisition.

In the CPS domain, novices can be directly supported in the handling of certain programming

tasks in an interactive PLE, such as programming a ﬂight trajectory for a quadcopter. In detail,

facilitating the interaction with the PLE, understanding of the individual code elements and the

underlying processes can be eased by the mentioned mapping aids (highlighting & dynamic linking).

If, during the interaction, the semantics of the language become more transparent – i.e. the user

understands, what the individual elements do and how they interact – a long-term understanding of

the concepts can emerge and novices might learn to apply the concepts when solving future problems

(Hadwin et al., 2007; Jeske et al., 2014). Accordingly, the mapping aids should result in higher

program correctness. Furthermore, such mapping aids could also inﬂuence the understanding of the

code components and thus the resulting learning outcome (Patwardhan & Murthy, 2017; Sobral,

2021).

In detail, our study aimed at answering the following research questions (RQs):

RQ1 Do mapping aids increase program correctness?

4

RQ2 Do mapping aids have a positive eﬀect on learning outcomes?

RQ3 How are learning strategy traces and program correctness related?

RQ4 How are learning strategy traces and learning success related?

RQ5 Do those mapping aids reduce typical errors?

RQ6 What are the characteristics of successful novices?

We conducted a 2x2 between-subject design study with 82 participants to gain insights into

these diﬀerent mapping aids (highlighting and dynamic linking) and their impact on performance

under consideration of participants’ characteristics. We focus on the robotics domain and especially

aim to support programming novices, i.e., users with no or only basic programming knowledge, with

our PLE and our proposed mapping aids. We therefore selectively recruited participants matching

these criteria and refer to these participants as novices throughout the paper.

By implementing a multi-method approach, we investigated the eﬀects of mapping aids on the

program correctness of three diﬀerent programming tasks (quadcopter missions; RQ1) as well as

on learning outcomes (knowledge, comprehension, and application level; RQ2). Based on process

data, we examined the eﬀects of mapping aids on traces of learning strategies (RQ3 & RQ4), typical

errors during programming (RQ5) and characteristics of successful novices (RQ6).

Based on our ﬁndings for RQ1 and RQ2, support by highlighting enabled novices to achieve

better program correctness (mission 1: p = .008, η2

increased learning outcome (comprehension: F (1, 75) = 5.61, p = .020*, η2

partial = .091) while support by dynamic linking
partial = .070 & applica-
partial = .052). Overall, the best performance was found when
both mapping aids were available. For RQ3 and RQ4, traces of learning strategies (organizing, elab-

tion: F (1, 75) = 4.08, p = .047*, η2

orating) were positively related to both, program correctness (organizing: r = .553, p < .001***,

elaborating: r = .639, p < .001***) and learning outcome (organizing: r = .400, p < .001***, elab-

orating: r = .404, p < .001***). Participants in the group with both aids had a 5.18-times higher

chance (p = .020*) of avoiding certain typical implementation mistakes (RQ5). Successful novices

(based on the program correctness) had heterogeneous characteristics, i.e. we did not identify a

common characteristic (or combination) leading to programming success (RQ6).

The remainder of this paper is structured as follows: Sections 2 and 3 summarize the technical

and psychological background and give an overview of the state of the art and related work. The

5

hypotheses derived from the related literature and research questions as well as a brief overview of

the study is given in Section 4. In Section 5, we describe the study design, methods and procedures

in greater depth. The results of our study are then presented in Section 6 before discussing the

implications of these results, as well as threats to validity in Section 7. In Section 8, we conclude

and summarize our results and give an outlook into possible future work.

2. Background

First, we will outline the implementation of the PLE before considering underlying cognitive

processes for the diﬀerent components of the PLE.

2.1. Live programming

Live programming tools or environments give direct and continuous feedback to the user by

analyzing and visualizing the eﬀects of changes to the program while editing it (Tanimoto, 2013).

Established and ubiquitous concepts like syntax highlighting – i.e. analyzing the source code and

highlighting or diﬀerent coloring of keywords, identiﬁer, literals, etc. – are not considered live. In

contrast, more advanced live programming concepts visualize execution behavior, e.g., the value of

variables during execution (live evaluation) or give a preview of the textual or graphical output of

the program that changes with each editing operation.

Especially graphical output or output that has a spatial or physical dimension, e.g., visualiza-

tions of the environment, is well suited for liveness due to the natural and intuitive visualization that

fosters program understanding (Tanimoto, 2013). Programming CPS, such as robots, can proﬁt

from live programming as the feedback loops when testing new code are especially long: transferring

and running programs on the robot and observing the results is often time consuming and might

even pose safety risks to the operator (Campusano & Fabry, 2017).

In contrast, a live preview

provides immediate feedback and might even incorporate data from the physical environment or a

simulation to help identify potential errors or safety hazards.

The direct feedback and support in visualizing the program execution is also an important aspect

of programming environments focused on teaching programming fundamentals to kids or novices.

In addition, live programming features help forming mental models of the program and language

semantics and can lead to more experimentation (Kang & Guo, 2017).

6

2.2. Source location tracking

Live programming features can be augmented through bidirectional editing features (Hempel

et al., 2019), allowing program manipulation both through code and the program result. Source

location tracking (SLT) (Breckel & Tichy, 2016; Witte & Tichy, 2019) is an implementation pat-

tern that links program output to its source by tracking data ﬂow during execution. This allows

implementing dynamic links between code and its execution result without providing additional

domain knowledge. Thoughout the paper, SLT is used refer to the implementation technique and

bidirectional editing synonymously while dynamic linking and highlighting refer to concrete PLE

features using SLT.

Figure 1: Interactive waypoint using SLT location information to change the corresponding value in the Blockly
editor.

Imagining a quadcopter instructed to ﬂy to a certain waypoint using a moveTo block as shown

in Figure 1, the code location/block responsible for the quadcopter’s position along the y-Axis (L2)

is known throughout the complete execution and rendering process of the preview.

This way, SLT complements live programming by automatically forming links between code and

visualization as a side eﬀect during the generation of the visualization. As the relation between

visualization elements (the preview of the quadcopter on the right) and the code (the block on the

left) is known, code changes corresponding to user changes in the visualization can be proposed or

directly applied. Changing the position of the preview using the green arrow along the y-Axis uses

7

MiniLuaInterpreterMiniLuaParserROS InteractiveMarkerBlockly Editor3D-PreviewmoveTo(…, -1@L2, …)L2position.y = -1@L2forceValue(-1@L2, …)the saved location information associated with the value and tracks it back to its origin (shown in

red). The code change is then directly reﬂected in the live visualization giving immediate feedback

to the user (Hempel et al., 2019; Witte & Tichy, 2019). For example, if the waypoints deﬁne a

square, the user might move one of the waypoints to enlarge the square and the constants that

deﬁne the size of the square are automatically adapted in the code.

As this linking between code and preview is realized on the fundamental level of the programming

language, no semantic knowledge of the moveTo block or the waypoints in the preview is needed.

Any (intermediate) result of a computation in the user’s program can be automatically tracked

back to the literal values used to compute it by analyzing and following its recorded history. This

process is mostly application and domain independent and was previously applied in e.g. drawing

programs (Hempel et al., 2019), live evaluation in text editors (Breckel & Tichy, 2016; Hempel &

Chugh, 2020), HTML and Markdown editors (Mayer et al., 2018).

Due to tracking data ﬂow during execution and zero domain knowledge, SLT can be easily

integrated into existing live programming environments but introduces some runtime overhead.

Compared to static analysis approaches, SLT can produce inaccurate results in the presence of

aliasing or changing dataﬂow.

Figure 2: interactive script editor with visual program editor and interactive preview.

8

The interactive script environment (Witte & Tichy, 2019) incorporates live programming and

visual programming features to easily program simple quadcopter missions (cf. Figure 2) and is

adapted to serve as a PLE for this study. A Lua-based domain speciﬁc language, designed around a

strictly imperative, high-level programming paradigm is used to program quadcopter missions using

only a few basic functions and a simple program ﬂow without callbacks or events. To further help

novice programmers, a Blockly-based visual program editor reduces the syntactic complexity of the

language and encourages experimentation (K¨olling et al., 2017). Each basic function is represented

by a puzzle block – connecting it to other pieces creates a syntactically correct program. A live

visualization of the currently edited program is shown in a 3D preview in real time, displaying

waypoints and the ﬂight path of the quadcopter. The interactive preview shows all waypoints and

ﬂight paths by ignoring the time dimension. However, users can start a simulation of the quadcopter

that shows an animated 3D model of the quadcopter executing the mission in real time.

2.3. Underlying cognitive processes in the context of programming and learning environments

After providing insights into the technical details of the PLE, the underlying cognitive learning

processes when interacting and learning in this environment, will be described in more detail in

the following. The present PLE includes multiple representations such as programming elements

(descriptive) and animated previews (depictive). According to well-known theories such as the

Cognitive Theory of Multimedia Learning (Mayer, 2014, 2020) and the Integrated Model of Text and

Picture Comprehension (Schnotz & Bannert, 2003), humans ﬁrst process descriptive representations

such as the programming code and depictive representations (e.g. a 3D-preview) via diﬀerent

channels. A more in-depth semantic processing takes place after processing the content superﬁcially.

If enough cognitive resources are available, processing and learning is successful and new information

is integrated and linked in a complex, analog mental model (Schnotz & Bannert, 2003). However,

these theories do not refer to the challenge of mapping and integrating the processed information in

more detail. This mapping is particularly important when learning with multiple representations.

Learning with multiple representations can be challenging because working memory might be (over-

)loaded by the presentation of many diﬀerent pieces of information (van Someren et al., 1998).

In particular, learners with little prior knowledge cannot manage working memory capacity by

chunking and are particularly aﬀected by this problem (Kozma & Russell, 1997). These challenges

might result in novices using simulations in a haphazard and exploratory rather than systematic

9

way (de Jong & van Joolingen, 1998; Patwardhan & Murthy, 2017).

The speciﬁc challenges of learning with animations, in this case the activation of the quadcopter

ﬂight simulation in the 3D-preview, are made explicit in the Animation Processing Model (Lowe

& Boucheix, 2008). Here Lowe & Boucheix (2008) describe that especially novices in animation

learning tend to focus on localized perceptual exploration by parsing individual event units and are

not able to develop more complex mental models with a more global understanding. This means

that novices are not able to form dynamic micro chunks and to understand more precisely the

spatiotemporal structures in the speciﬁc context (Lowe & Boucheix, 2008; Lowe & Schnotz, 2014).

In other words, the presentation of animations or multiple representations does not in itself oﬀer a

general advantage, but that the elements in the PLE and their combination and linkage should be

carefully chosen.

2.4. Mapping multiple representations

When multiple representations are included in a PLE, they can have diﬀerent roles (Ainsworth,

2014): a) complementing each other b) limiting each other’s interpretation, or c) promoting deeper

understanding. In the case of interactive PLEs, i.e. PLEs that the learner can directly interact

with or manipulate, multiple representations often take the third role, with the goal of fostering a

deeper understanding (Rey, 2011). To facilitate this, additional aids are provided in such PLEs to

help locate corresponding information and thus simplify mapping (e.g. Fries et al., 2021; van der

Meij & de Jong, 2006). For instance, ﬁndings that also make use of psychophysiological methods

(eye-tracking) indicate that especially when using animated simulations such as a 3D-preview,

the use of certain visual cues (dynamic signals) can be helpful to process relevant information

and to develop a more global understanding (Boucheix et al., 2013). These helpful cues can be

diﬀerentiated based on the processes they are related to: Diﬀerent mapping processes for depictive

and descriptive presentation formats have been described by Gentner (1983). Mapping processes

can be distinguished into element-to-element and relation-to-relation mapping processes (Gentner,

1983; Seufert, 2019). The term element-to-element mapping refers to the element-based connection

reﬂecting that novices are able to connect diﬀerent components on a rather superﬁcial level (Fries

et al., 2021; Gentner, 1983). In detail, highlighting of dependent values as a form of element-to-

element mapping enabled our participants to click on a waypoint to highlight all literal values that

may inﬂuence the position. In contrast, the term relation-to-relation mapping refers to the ﬁnding

10

of similarities on the semantic level and thus requires the novices to have a deeper understanding

of the elements and processes that need to be mapped and integrated (Gentner, 1983; Patwardhan

& Murthy, 2017; Seufert, 2019).

In our PLE, dynamic linking as a form of relation-to-relation

mapping, enabled participants to directly move waypoints through the mission preview.

2.5. Novices’ characteristics

Performance in solving a task and understanding its components depends not only on the design

of the PLE, but also on certain characteristics of the novices.

Based on previous ﬁndings, relevant individual characteristics were considered as covariates (see

Section 6.2). For instance, the importance of prior knowledge for successfully conducting speciﬁc

programming tasks was outlined as well as the importance of this factor on learning outcome (e.g.

Richter & Scheiter, 2019). To plan the ﬂight trajectory of the drone, ﬁgural intelligence or reasoning

might impact the ﬁnal success (Helmlinger et al., 2020). Furthermore, when novices interact with

complex tasks, their level of need for cognition might be crucial for the question of whether they

succeed and develop a deeper understanding of the learning content (Colling et al., 2022; Coutinho

et al., 2005).

2.6. Performance assessment

For comparing diﬀerent PLEs and their eﬀects on critical outcome variables, several promising

criteria can be considered based on theory and previous ﬁndings. These criteria and their embedding

in theory, taking into account empirical ﬁndings, are described in more detail in this section.

Diﬀerent cognitive sub-steps while interacting and learning in a PLE can be distinguished and

might only become apparent when using a diﬀerentiated measurement of learning outcome or task

performance. The performance of novices handling programming tasks (program correctness) can be

used as a criteria for evaluating how novices can be successfully supported by mapping aids (RQ1).

In order to solve the tasks successfully and achieve good performance in program correctness,

novices must develop a basic understanding of the individual components and processes. This

understanding is already implicitly measured by assessing the program correctness.

In addition, the knowledge of e.g. deﬁnitions or functionalities of the individual code elements

can be explicitly assessed after the interaction in the PLE. Based on the impressions and insights

gained during the processing of the quadcopter missions, novices could also develop an understand-

ing of the concepts, which they can later apply to new problems. In other words, they not only

11

successfully master the missions, but also learn something about the components and processes.

Based on Bloom et al. (1956) the three levels of learning outcome knowledge, comprehension, and

application can be distinguished (RQ2). The knowledge level can be achieved when simply storing

a superﬁcial representation of the learning content. In contrast, users need to semantically process

the information to succeed on the comprehension and the application level (Sobral, 2021). More

specially, the ability to contrast diﬀerent concepts or code components and understand the relation-

ship between two code elements represents the learning outcome at the comprehension level. When

users have integrated the new information into the more global and analog mental model, they are

able to deduce more complex consequences and interactions between the diﬀerent components as

well as apply the concepts to diﬀerent problems (Mayer et al., 2002).

Furthermore, cognitive learning strategies such as organizing and elaboration can be derived

based on the learning behavior by using process data (Hadwin, 2021; Jeske et al., 2014). In addition,

the learning behavior can contain traces of metacognitive strategies, which can map, for example,

planning or monitoring during the programming process (Hadwin, 2021; Jeske et al., 2014; Wild &

Schiefele, 1994). Hence, traces of certain strategies while working on the programming tasks could

already provide information about whether users use adequate strategies when solving certain tasks

and achieve a higher level of performance with these strategies (RQ3 & RQ4).

Furthermore, typical errors can be identiﬁed and by this more insights into the eﬀects of the

mapping aids might result (RQ5).

In addition to the question of which aids in PLEs have a beneﬁcial eﬀect, it is also important

to diﬀerentiate the extent to which only certain novices beneﬁt from the aids oﬀered or whether a

certain proﬁle of experiences and characteristics already promises greater success (Snow, 1989). On

the one hand, this can be done by including the critical characteristics in the quantitative analyses.

On the other hand, these proﬁles can also be examined again in terms of content, for example by

taking a closer look at the proﬁles of the most successful novices (RQ6).

3. Related work

Due to the fact, that mapping aids in PLEs are an interdisciplinary research ﬁeld, very dif-

ferent keywords were used and consequently, ﬁnding related studies and empirical results is not

self-evident. In this section, we will provide insights into related work from both, software engineer-

ing and learning and instruction research. While publications in the ﬁeld of software engineering

12

oftentimes focus on technical aspects, the learning and instruction perspective focuses on empirical

evaluation and attributing results to related cognitive processes.

3.1. Live programming features in programming environments for robotics

Particularly, live/online PLEs oﬀer diﬀerent options to implement supportive elements such

as mapping aids. Multiple representations or live programming features are commonly used in

programming environments for robotics that are targeted at programming novices. Choregraphe

(Pot et al., 2009), the programming environment for the NAO humanoid robot uses a data ﬂow

oriented graphical programming model paired with a poseable preview of the robot as well as a

choreography timeline.

Sketch ’n Sketch (Hempel et al., 2019) uses similar techniques to source location tracking to

create an interactive visual preview with multiple application cases like HTML, SVG and markdown

editors using functional domain speciﬁc languages as a linked, textual representation.

Quantitative, empirical studies of usability and learning aspects of these environments, however,

are rarely done. Berenz & Suzuki (2014) compare their own, declarative behavior speciﬁcation

language with the ﬂow based programming approach of Choregraphe in a user study with 17

participants from a professional or educational background. The study focuses on their alternative

programming paradigm Targets-Drives-Means (TDM) and uses Choregraphe only as a state-of-the-

art baseline and does not consider the underlying processes related to multiple representations or

mapping aids.

The bidirectional programming/SLT features of Sketch ’n Sketch, i.e. the ability to manipulate

code directly through a preview of its result (cf. Section 2.2) – to our knowledge – were never
evaluated in a user study. However, the usability of the interface of the Deuce program editor,

implemented in Sketch ’n Sketch, was evaluated through a small user study with 21 participants

(Hempel et al., 2018). The proposed structural selection mechanism is compared to a baseline

version of the same tool oﬀering only conventional text selection features. As this study does not

cover code manipulation through the interactive visualization, it provides no results on the eﬀects

of mapping and linking of multiple representations.

Other case studies focusing on speciﬁc aspects, e.g., block-based robot programming in a learning

context for children (Sutherland & MacDonald, 2018) underlining the importance of instant, easy

to understand and robust feedback. Winterer et al. (2020) use Blockly in an industrial robot

13

programming context showing that even complex programs can be expressed in Blockly, and that

the Blockly interface provides similar or better understandability or maintainability than traditional

ﬂowchart-based visual languages. Price & Barnes (2015) compare block based interfaces to textual

interfaces in a novice programming environment. While the perceived diﬃculty does not change,

participants using the block based interface spent less time oﬀ task and completed the exercises

faster. While the used interfaces often include some form of preview, they do not consider features

linking both views bidirectionally or measure the performance impact of the linking of both views.

Campusano et al. (2019) evaluated live programming features to program robot behavior through

state machines in an experiment. Contradicting their assumptions, the live environment did not

outperform the non-live, state-of-the-art baseline but participants preferred the live environment.

3.2. Evaluations of mapping multiple representations in interactive environments

Many diﬀerent ways to facilitate mapping in interactive PLEs have been reported and evaluated

in terms of their eﬀects on cognitive processes and learning success. Some older studies, for exam-

ple, used graphical techniques to mark corresponding elements (inter-representational hyperlinks:

Br¨unken et al., 2005; Seufert et al., 2007). In this case, relevant elements within a representation

were marked as hyperlinks and users had the possibility to click on these inter-representational

hyperlinks to get hints about corresponding elements in other representations. A beneﬁcial eﬀect

of this implementation of element-to-element mapping aid was described when comparing results

of the experimental group with a control group (Seufert et al., 2007).

More recently, the approach of linking multiple representations, allowing manipulation of a vir-

tual simulation, was studied in more detail. For instance, Rey (2011) compared diﬀerent mapping

aids in a study (text ﬁelds, scroll bars, or drag-and-drop) as possibilities that allowed the modi-

ﬁcation of the parameters of a virtual simulation. These three interactive elements were used to

dynamically link the diﬀerent (multiple) representations with the simulation. Hence, they represent

an implementation of relation-to-relation mapping aids, as they do not simply outline related ele-

ments but make related processes more transparent (Gentner, 1983). Here, positive eﬀects of some

interactive elements (scrollbars and drag-and-drop) were found on the transfer level, but not on

the knowledge level compared to the text ﬁeld condition. As already outlined in the section before

(see Section 3.1) by the example of Sketch ’n Sketch, this approach of dynamic linking between

a virtual simulation and a textual representation has been further extended (Hempel et al., 2019;

14

Mayer et al., 2018).

Bidirectional linking of multiple representations – similar to the dynamic linking feature in our

PLE – has been implemented in some studies as one possibility to implement relation-to-relation

mapping aids. In this case, users were able to manipulate any of the related components to cause

a change in the respective other representation (Hempel et al., 2019). For instance, Patwardhan &

Murthy (2017) uncovered the beneﬁcial eﬀects of bidirectional dynamic links as mapping aids, not

only for interacting with a PLE, but also on higher levels of learning outcome (transfer).

These (heterogeneous) ﬁndings illustrate that live programming features per se are not an ad-

vantage and that it is necessary to obtain more precise information in larger empirical studies on

which type of mapping aids are particularly helpful, which underlying processes are inﬂuenced by

these mappings aids and how, and which boundary conditions and characteristics of novices play a

role in this.

4. Research Hypotheses

Given that this study and its methodology are not only based on the problem statement from

the perspective of software engineering, but also on ﬁndings from the research ﬁeld of learning and

instruction, as well as important cognitive psychology ﬁndings, the speciﬁc hypotheses are theory-

based and were postulated under consideration of previous empirical ﬁndings. As recommended by

previous publications, we used a multi-method approach to assess performance in our study, that

oﬀered further insights into the diﬀerent eﬀects of the implemented mapping aids (e.g. Makransky

et al., 2019). In the following, we present based on our research questions (RQs; Figure 3), our

more speciﬁc hypotheses. Our RQ1 and RQ2 look into the eﬀect of the mapping aids to program

correctness and learning outcome; traces of cognitive and metacognitive strategies in this process

were considered in RQ3 and RQ4. Additionally, RQ5 investigates typical error in the diﬀerent

experimental groups. Finally, RQ6 provides more insights into the proﬁles of successful novices.

RQ 1: Do mapping aids increase program correctness?

Our ﬁrst research question explored the eﬀect of mapping aids (highlighting & dynamic linking)

on program correctness. By highlighting, users’ visual attention was guided and they could see cor-

responding elements. Hence, an unnecessary visual search was reduced and selection processes were

15

Figure 3: Relevant factors and related research questions.

eased as the respective elements needed no further consideration whether they are corresponding

or not (Fries et al., 2021; Ozcelik et al., 2010).

H1a We hypothesized a beneﬁcial eﬀect of highlighting on program correctness of the quadcopter

missions.

Relation-to-relation mapping aids supported the users as they outlined the underlying processes by

showing one possible solution for the change in the preview by altering the respective coordinates

in the code (Mayer et al., 2018; Seufert, 2019).

H1b We hypothesized a beneﬁcial eﬀect of dynamic linking on program correctness of the three

quadcopter missions.

As both highlighting and dynamic linking might ease the programming process, using both mapping

aids in combination was expected to show a synergetic eﬀect (Rey, 2011):

H1c We expected a synergetic eﬀect of both mapping aids compared to a single mapping aid on

the program correctness of the diﬀerent missions.

RQ 2: Do mapping aids have a positive eﬀect on learning outcomes?

Some previous studies showed beneﬁcial eﬀects of mapping aids compared to control groups with-

out additional help to connect the diﬀerent representations in the PLE (Patwardhan & Murthy,

2017; Rey, 2011). Based on theoretical considerations, the chosen mapping aids trigger speciﬁc cog-

nitive learning processes. Element-to-element mapping (highlighting) was assumed to ease ﬁnding

corresponding elements and by this, the integration of the diﬀerent representations (Fries et al.,

2021).

16

ProgramCorrectnessLearningOutcomeTypicalErrorsSuccessfulNovicesStrategy TracesNeed for CognitionFigural Intelligenceprior knowledgeMappingAidsRQ1RQ2RQ4RQ3RQ6RQ5cognitive/metacognitivecognitive/metacognitiveCovariatesH2a We hypothesized the strongest beneﬁcial eﬀect of highlighting on the comprehension and

application level of learning outcome compared to the knowledge level of learning outcome.

Furthermore, our relation-to-relation mapping aid (dynamic linking) outlined the connectedness of

diﬀerent components in the PLE and the consequences of manipulating one component (the live

preview) onto another component (the code editor). This eﬀect was expected to reﬂect mostly the

learning outcome on comprehension level (Patwardhan & Murthy, 2017).

H2b We hypothesized the strongest beneﬁcial eﬀect of dynamic linking on the comprehension and

application level of learning outcome compared to the knowledge level of learning outcome.

Based on the presented theories and the previous research, it was plausible, that users would beneﬁt

more from the combination of both mapping aids than from one mapping aid on the diﬀerent levels

of learning outcome (Patwardhan & Murthy, 2017; Rey, 2011).

H2c We expected a synergetic eﬀect of both mapping aids compared to a single mapping aid on

the diﬀerent levels of learning outcome.

RQ 3: How are learning strategy traces and program correctness related?

In our third research question, we considered the relationship between behavioral patterns in

the PLE and program correctness. As mentioned above, traces of cognitive and metacognitive

learning strategies such as organizing and elaborating can be inferred from process data (Hadwin,

2021; Jeske et al., 2014; Wild & Schiefele, 1994). Based on the literature, it is expected that

purposeful interaction in the PLE using strategies will lead to better performance in terms of

program correctness (de Jong & van Joolingen, 1998; Patwardhan & Murthy, 2017).

We hypothesized a positive correlation of program correctness and . . .

H3a cognitive organizing strategies traces.

H3b cognitive elaboration strategies traces.

H3c metacognitive planning strategies traces.

H3d metacognitive monitoring strategies traces.

17

RQ 4: How are learning strategy traces and learning success related?

According to the third research question in which a positive eﬀect of strategy use on program

correctness was expected, a positive eﬀect of these strategy traces on overall learning success was

also expected (Hadwin, 2021; Patwardhan & Murthy, 2017; Wild & Schiefele, 1994):

We hypothesized a positive correlation of overall learning outcome and . . .

H4a cognitive organizing strategies traces.

H4b cognitive elaboration strategies traces.

H4c metacognitive planning strategies traces.

H4d metacognitive monitoring strategies traces.

In the following research question, we explore the process data to gain further insights into

typical errors and novices characteristics that might impact performance.

RQ 5: Do those mapping aids reduce typical errors?

In our next research question, we aimed at gaining deeper insights into what were speciﬁc

challenges while programming the missions and how typical errors were distributed in the diﬀer-

ent experimental groups with respective mapping aids. This was in line with prior publications

analyzing diﬃculties of novices while programming (Patwardhan & Murthy, 2017; Prather et al.,

2018).

H5 Based on these previous ﬁndings, we expected the odds of making typical programming errors

in the ﬁrst mission to diﬀer between groups.

RQ 6: What are the characteristics of successful novices?

In addition to RQ5, which focused on traces of learning strategy-related behavior patterns, the

sixth research question focuses on higher-level behavior patterns and characteristics of the ten most

successful novices. Based on a content based analysis of this subgroup, we will identify particular

characteristics that promise successful solution strategies.

H6 We expected that the most successful novices would diﬀer in their aptitudes from the overall

mean.

18

5. Method

In the following section, we provide more details about the procedure (cf. Figure 4), participants,

study design, the PLE including the programming task and the used questionnaires as well as some

insights into the data preparation.

5.1. Procedure

At the beginning of the online study, an overview of the study as well as informed consent

was presented to the participant in the online pre-questionnaire (see Figure 4). Participants were

aware that they could withdraw the study and the related data at any point in the study without

having any disadvantage. The pre-online questionnaire started with demographic questions and

the pre-test included the prior knowledge questions. At the end of the pre-questionnaire, a link

was included to log into the interactive PLE to code the three quadcopter missions. After ﬁnishing

the three tasks, users ﬁlled out the post-questionnaire. Next, users answered the post-test learning

outcome questionnaire and had the opportunity to give feedback on the provided mapping aids if

these were available. At the end of the study, they were able to comment on the study and report

technical problems during the study.

In a separate online survey, they were able to leave their

personal information to receive their compensation (a voucher). Overall, the study took about 1.5

hours.

Figure 4: Elements of the study: questionnaires and programming exercises.

19

Post-QuestionnairePractical ExercisesIntroduction1. "Simple Square"2. "Commute Between   Objects"3. "Dynamic Square"Screenshots, Save Files, DurationLearning Traces, Manual GradingSubjective EvaluationCognitive LoadLearning OutcomeDemographicsPrior KnowledgeNeed for CognitionFigural Intelligence5.2. Participants and study design

The sample needed, to investigate the eﬀects of the chosen mapping aids was estimated based

on an a priori power analysis by using G*Power version 3.1.9.4 (Faul et al., 2009). The potential

eﬀect size of the chosen mapping aids was calculated regarding the reported results from van der

Meij & de Jong (2006) with f 2(V ) = .10 (medium eﬀect size based on Cohen, 2013); α = .05;

power (1

−

β) = 0.9. By this, we determined the minimum of required participants with N = 91.

Initially, 93 participants, who were mainly university students in psychology, took part in our

interactive online study. Because of technical problems, we excluded eleven participants from further

analysis. The remaining N = 82 participants (26.50% male) were aged between 19 and 39 years.

(Mage = 25.02; SDage = 4.04). We applied a 2x2 between-subject design by randomly assigning

the participants to one of the four diﬀerent design options: with highlights and dynamic linking

(n = 20), with dynamic linking (n = 21), with highlights (n = 22) and the control group (n = 19).

As a dependent variable, the program correctness of three quadcopter mission tasks was assessed.

Additionally, learning outcome was measured on three diﬀerent levels: knowledge, comprehension,

and application. While participants were working on the programming tasks, screenshots of the PLE

were automatically taken every ﬁve seconds to track the progress and gain insight into the problem

solving process. The program code and layout was automatically saved with a timestamp after each

change. Additionally, participants could create manual save ﬁles and were prompted to do so after

every exercise. This allowed further insights into strategies and typical errors. The study was part

of a bigger research project and this paper focuses on the presented research questions. Figure 4

gives an overview of the sequence of the study, the contents of the pre- and post-questionnaires and

the measured variables.

5.3. PLE architecture & implementation of mapping aids

We developed an interactive online PLE by adapting the interactive script editor described in

(Witte & Tichy, 2019) and previously introduced in Section 2.2. To ﬁt the requirements of the

study, the existing editor was modiﬁed to 1) include instructions to guide the participants through

the diﬀerent exercises (cf. Appendix A), 2) be accessible online and without installation through

a web browser, and 3) implement the diﬀerent experimental groups and collect process data to

document the implementation process.

The PLE includes diﬀerent views to display the code for the virtual quadcopter using a block

20

based editor, and a 3D preview of the planned ﬂight trajectory. Additionally, instructions for the

programming exercises are displayed alongside the environment (Figure 5).

Figure 5: Online PLE as seen by a participant of the study: code editor (left), 3D preview (center), and instruction
PDF (right).

On the left side of the PLE, the Blockly based visual code editor (Pasternak et al., 2017) for

a domain speciﬁc language to deﬁne quadcopter missions was shown. This presentation format

allowed the users to create their code through graphical manipulation as it represented program

primitives, e.g. values, statements and expressions, as interlocking blocks. New program blocks

could be selected from a library and dragged into the program canvas. Additionally, program output

was shown in a live console below, allowing users to print and inspect values during development

as well as during simulation execution. In the center, an interactive 3D preview for the planned

mission of the quadcopter was displayed. Users were able to choose their perspective for the

Cartesian coordinate system. To facilitate the orientation in this preview, a grid on the ground

plane, the origin, and colored indicators along the x,y, and z-axis were shown. Three colored objects

that could be dragged in the 3D view could be used as reference points and their pose queried in the

code. The quadcopter pose in each waypoint in the code was displayed in this preview, with lines

connecting subsequent waypoints. By pressing the button run script, a simulated quadcopter could

21

be observed while ﬂying along the planned trajectory. Depending on the experimental condition,

diﬀerent dynamic links between the code and the 3D preview were available. These diﬀerent

mapping aids are described below in more detail.

In the control group, the planned ﬂight trajectory was displayed in the preview. Users in the

group with dynamic linking as relation-to-relation mapping aid were able to click at the way points

of the ﬂight trajectory and move these in the virtual space to diﬀerent coordinates. This dynamic

link option was indicated by arrows surrounding each coordinate. While changing the virtual

preview, the implemented coordinates in the Blockly code adapted automatically to one possible

code for the displayed ﬂight trajectory and the given solution was highlighted in red. Therefore,

users were able to observe one speciﬁc solution of the given ﬂight trajectory and one code example

was provided.

Users in the group with highlighting as element-to-element mapping aid were able to click on

coordinates included in the planned ﬂight trajectory. When clicking on the way points, the related

parts in the Blockly code were highlighted in red. The displayed ﬂight trajectory could not be

manipulated in the 3D preview in this condition. In the fourth experimental group users were able

to use the support by both mapping aids: highlighting and dynamic linking. Therefore, they were

able to inspect the relevant input of the code for one given coordinate and to manipulate the ﬂight

trajectory in the preview resulting in a changed Blockly code.

Due to the Covid-19 pandemic, the study had to be conducted remotely on the participants’

personal computers. To avoid complicated installation procedures, the PLE was executed on a

server with a browser-based remote connection tool displaying the application in the browser win-

dow and sending inputs to the server. Inevitably, this introduces the risk of connection losses as

well as latency issues causing delayed reaction to input. In our testing and through questionnaire

items asking for any technical issues during the study, we found these issues aﬀecting only a few

participants. If the connection was lost, the page could be simply reloaded with no progress lost

as the application still ran on the server. Furthermore, running the application on the server helps

controlling the PLE: the application had a ﬁxed resolution that was scaled to the participant’s win-

dow size, ensuring that each participant had a similar viewport and performance. Screenshots of the

PLE were automatically made without the risk to capture private data on the participants personal

computer or requiring the installation of potentially intrusive software on the client computer to do

so.

22

On the server, the full ROS1 environment, needed to run rViz, rqt (including the interac-

tive script plugin (Witte & Tichy, 2019)), and the quadcopter simulation, was executed in a docker

container2 accepting remote connections through vnc.

In order to reduce the complexity of the

server infrastructure, only a single instance without scaling to support multiple concurrent users

was used; therefore only one participant at a time could use the PLE.

5.4. Programming tasks – Quadcopter missions

In the accompanying instruction PDF, users were asked to implement three diﬀerent quadcopter

missions which involved planning three ﬂight trajectories (see Appendix A). As we aimed to lower

the initial barrier of starting to program, we added eight additional hints about programming in

general. For instance, users were advised to divide one challenging task into easier sub-tasks to solve

the missions. Furthermore, a short explanation about the diﬀerent components of the interactive

PLE was included. Depending on their experimental conditions, users were informed about the

dynamic links between the code and the preview. Before beginning with the ﬁrst mission users had

to simply recreate a given example (see Figure 4). This example aimed at enabling users to get to

know the interactive PLE and to the mapping aid between the code and the preview if available.

5.5. Questionnaires

In an online pre-questionnaire, participants were asked for their gender, age, educational level,

the ﬁeld of studies, and any prior experiences with programming and speciﬁc programming language.

To gain further insights into their domain-speciﬁc prior knowledge, we developed eight questions

about basic concepts of programming and relevant concepts for the programming missions. A pre-

test included four knowledge questions to measure domain-speciﬁc prior knowledge: In addition to

three basic deﬁnitions of the terms GUI, debugging, and logical operators, users also had to name

a way point in the coordinate system. To capture a more in-depth understanding of programming

concepts, another four questions were created (e.g. ‘Name one major diﬀerence between dynamically

and statically typed programming languages.’). To ensure good quality of measurement of prior

knowledge, we analyzed the inter-rater reliability, which revealed very high consistency between the

two ratings (r = .993, p < .001, CI95% = .989

.995).

−

1Robot Operating System, https://ros.org/.
2https://www.docker.com/. The container with the PLE is available on our github page at https://github.com/

sp-uulm/interactive_script/releases/tag/StudyPLE.

23

To measure users‘ need for cognition, we used the German version of the short scale for need for

cognition (Beißert et al., 2014). Users had to rate four items (e.g. ‘I like my life to be full of tricky

tasks that I have to solve.’) on a seven point Likert-scale. In line with the published retest-reliability

of r = .78, the scale was assumed to be reliable (Beißert et al., 2014). In our sample, we determined

a McDonald’s omega of ω = .731 (CI95% = .640

.823) which was acceptable.

−

As both spatial ability and general logical ability are relevant to interact with the PLE as well

as learning the relevant concepts, we included a measurement for ﬂuid intelligence. We used the

ﬁgural modul of the BEFKI 11+ including sixteen items (Schipolowski et al., 2017). Dimitrov’s

scale reliability for the published sample is ρ = .81 (total scale gf where the ﬁgural model is a part

in; Schipolowski et al., 2017).

For measuring learning outcome, we developed a post-test, which consisted of nine questions

on the three levels (Bloom et al., 1956, knowledge, comprehension, application). To measure the

learning outcome on knowledge level, three multiple choice questions were developed (e.g. ’Which

statements about variables are correct? a) Only numbers and words can be assigned as values. b)

A variable can be assigned multiple times. c) A variable can always be used instead of the value

assigned to it. d) The value of a variable is unchangeable.’). For the comprehension level, two open

questions were included (e.g. ’Name a basic diﬀerence between the pose block and the wait block.’).

The second comprehension question included three short programming sequences and their eﬀects

on the ﬂying trajectory should be described. For application, we developed four questions. Two

questions refereed to ﬁnding bugs in a given code. In the other two questions, users needed to map

corresponding code and preview as well as describe the change in the code based on two diﬀerent

simulation results in the preview.

In the present study, the questions of the post-test aimed to

examine diﬀerent aspects of the learning content. Diﬀerent questions referred to diﬀerent concepts

and processes. Hence, we expected no high internal consistency of the diﬀerent questions. To ensure

that learning outcome was measured in a rigorous way, we analyzed the inter-rater reliability, which

revealed a very high consistency between the two ratings (r = .999, p < .001, CI95% = .998

.999).

−

Novices’ cognitive load was measured using the diﬀerentiated cognitive load questionnaire (Klep-

sch et al., 2017). This questionnaire contained 2 items for intrinsic cognitive load (ICL), reﬂecting

the complexity and element interactivity of the content. We used 3 items for assessing extraneous

cognitive load (ECL), which reﬂects the load imposed by the design of the environment. To test the

resources novices invested when programming the three tasks and 3 items for germane cognitive

24

load (GCL) were given. The respective items were subjectively rated on a 7-point Likert scale

ranging from 1 (not at all) to 7 (completely). Results are reported as z-scores for RQ4. The relia-

bility was suﬃcient with α = .783 (CI95% = .670

−

.861) for ICL, McDonald’s omega of ω = .876

(CI95% = .829

−

.923) for ECL, and McDonald’s omega of ω = .702 (CI95% = .595

.808) for GCL.

−

5.6. Learning process data and program correctness

To gain deeper insights into the approaches novices used to program the quadcopter mission,

based on process data, traces of learning strategies were analyzed (Hadwin et al., 2007; Patwardhan

& Murthy, 2017; Wild & Schiefele, 1994). In line with previous publication (e.g. Arendt et al., 2021),

we deﬁned certain indicators for diﬀerent learning strategy traces.

As cognitive learning strategies, organizing and elaboration were considered. For organizing,

it is assumed that novices worked with the preview to comprehend the structure of the code, but

leave the code unchanged. For example, perspective changes were recorded here, or scaling of the

preview (zoom-in(-out). To capture this, a threshold of 30 seconds was set in which no code changes

took place, but the preview had to be changed. To assess elaboration in the PLE, the time during

which novices were (actively) engaged in the task was considered.

For the metacognitive learning strategies, planning and monitoring were considered. The plan-

ning phase was measured as the time (after completion of a task) until the start of the (next) task.

For monitoring, the number of started simulation runs in the preview was chosen as indicator.

Based on the manual savings and the screenshots at the end of each quadcopter mission, the

novices solution was documented. The solution of each task was critically examined by two experts

on the basis of a speciﬁc grading scheme. This allowed the objective assignment of points for

the solution (program correctness) of each mission. In addition, the diﬀerentiated solution scheme

allowed to identify typical errors in the tasks.

5.7. Data preparation

The online questionnaires were presented using the tool Unipark. We prepared and analyzed

the data using R 4.1.0. Process data was analyzed both automatically and by using a speciﬁc

labeling tool developed for this use case: consecutive unchanged screenshots were automatically

ﬁltered out to reduce redundant data. Timestamps of automatic saves and screenshots were then

used to automatically classify user activity (e.g. changing the program, using the preview) and

25

calculate metrics, such as time and duration of user activity. The start and end of programming

exercises as well as usage of the mapping aids and simulation runs were manually labeled using a

custom labeling tool to seek through and display screenshots and saved programs. A weighted mean

of the prior knowledge test and the learning outcome scores were calculated for each user, which

was based on the rating of two raters. For ﬁgural intelligence and need for cognition, the scores

were calculated by using the published solution schemes (Beißert et al., 2014; Schipolowski et al.,

2017). Furthermore, we checked for outliers and whether assumptions for parametric testing were

met (normal distribution, homogeneity of variances, and covariances). To ensure high testing power

for the analysis of our hypothesis and to avoid accumulation of alpha error, we used MANOVAs or

MANCOVAs. Additionally, we used contrasts to analyze our hypotheses. By this, we had not to

rely on the less powerful post-hoc testing (Field, 2013).

6. Results

6.1. Descriptive Results and assumption testing

The learners’ domain-speciﬁc prior knowledge was medium, in accordance with the idea that our

sample contains novices in programming (see Table 1). For ﬁgural intelligence, we found medium

values in all four experimental conditions (see Table 1). To ensure that there were no systematic

diﬀerences between experimental groups, we conducted a MANOVA that included prior knowl-

edge, ﬁgural intelligence, and need for cognition. Considering learners’ preconditions, no signiﬁcant

diﬀerences could be found between the experimental groups (F < 1, p > .454). Furthermore, multi-

variate normal distribution was tested but not found for all critical variables for each experimental

group. Conducting parametric MANCOVA is still assumed to be robust and favorable compared

to non-parametric testing based on recommendations of (Finch, 2005). Homogeneity of variance

was supported based on the Levene-Test (p > .062). Homogeneity of covariances was checked using

the Box-Test, based on which homogeneity was assumed (p > .868). As both, program correctness

and learning outcome were claimed to be performance measures, a positive relationship between

these two concepts was expected. In line with this, we found a strong, positive correlation r = .71

between program correctness and learning outcome.

26

Table 1: Means and standard deviations of the experimental groups on diﬀerent variables

No support

Highlights

n = 19
M (SD)

n = 22
M (SD)

Dynamic
linking
n = 21
M (SD)

Both mapping
aids
n = 20
M (SD)

43.37 (19.92)
55.40 (17.50)
66.35 (17.91)

37.50 (19.92)
57.20 (18.10)
61.53 (19.28)

38.19 (18.60)
58.80 (17.20)
64.29 (16.56)

45.99 (20.78)
54.80 (10.80)
66.43 (15.26)

76.32 (19.50)
67.54 (33.09)
26.75 (39.14)

79.55 (17.01)
64.39 (24.83)
27.27 (41.96)

72.22 (15.21)
62.70 (23.51)
33.33 (39.44)

90.00 (13.68)
85.00 (20.16)
54.17 (46.48)

66.23 (18.94)
29.39 (33.55)
49.67 (31.63)

62.88 (22.96)
32.67 (23.77)
42.61 (33.33)

67.46 (20.40)
41.27 (27.40)
51.79 (26.01)

71.67 (23.32)
46.98 (25.55)
66.88 (26.99)

Novices’ characteristics in %

Prior knowledge
Figural knowledge
Need for cognition
Dependent Variables in %
Program correctness

Mission 1
Mission 2
Mission 3

Learning outcome
Knowledge
Comprehension
Application

6.2. Inferential testing

We conducted a MANCOVA including the diﬀerent experimental groups represented by the

two factors highlighting and dynamic linking to analyze our hypotheses concerning main eﬀect

of the mapping aids. As covariates prior knowledge, ﬁgural intelligence and need for cognition

were chosen. As dependent variables, we included program correctness of the three quadcopter

missions (RQ1) and all three levels of learning outcome (knowledge, comprehension, application;

RQ2). To test our hypotheses, we included simple contrasts for each mapping aid (highlights,

dynamic linking). For analyzing the synergetic eﬀect, we additionally included contrasts comparing

the three experimental conditions with mapping aids. To analyze our hypothesis concerning the

relationship between learning strategy traces and performance, a bivariate correlation was utilized

(RQ3 & RQ4). Additionally, we focused on the collected process data. For gaining insights into the

probability of an exemplary typical error we calculated a logistic regression (RQ5) and calculated

z-scores to examine the novices’ characteristics in the context of our sample (RQ6).

6.3. Eﬀects on Program Correctness (RQ1)

As both mapping aids outlined inter-relations between the diﬀerent parts of the interactive PLE,

we expected for both mapping aids a beneﬁcial eﬀect. As mentioned to analyze our hypotheses, we

27

Table 2: Results of the between-subject eﬀects of the MANCOVA with the diﬀerent levels of learning outcome, pro-
gram correctness, simple contrasts for element-to-element mapping aid (highlights), and relation-to-relation mapping
aid (dynamic linking), with learners’ ﬁgural ﬂuid intelligence, prior knowledge and need for cognition as covariates.

Knowledge

Comprehension

Application

Highlights
Dynamic linking
Dynamic linking ∗ highlights
Prior knowledge
Figural intelligence
Need for cognition

Highlights
Dynamic linking
Dynamic linking ∗ highlights
Prior knowledge
Figural intelligence
Need for cognition

Highlights
Dynamic linking
Dynamic linking ∗ highlights
Prior knowledge
Figural intelligence
Need for cognition

Program correctness Highlights
mission 1

Dynamic linking
Dynamic linking ∗ highlights
Prior knowledge
Figural intelligence
Need for cognition

Program correctness Highlights
mission 2

Dynamic linking
Dynamic linking ∗ highlights
Prior knowledge
Figural intelligence
Need for cognition

Program correctness Highlights
mission 3

Dynamic linking
Dynamic linking ∗ highlights
Prior knowledge
Figural intelligence
Need for cognition

28

F (1, 75)

p

η2
partial

0.01
0.58
0.44
0.93
49.0
0.03

1.26
5.61
0.08
0.10
0.36
1.19

1.00
4.08
2.55
0.97
4.21
11.5

7.47
0.23
3.64
0.00
0.44
3.72

2.59
0.94
3.83
1.13
0.41
6.93

1.34
1.91
0.99
2.70
6.34
3.37

.940 < .001
.008
.450
.006
.507
.012
.338
.486
.006
.872 < .001

.265
.020
.782
.752
.552
.279

.321
.047
.114
.327
.044
.001

.017
.070
.001
.001
.005
.016

.013
.052
.033
.013
.053
.133

.008
.091
.636
.003
.046
.600
.994 < .001
.006
.511
.047
.058

.112
.335
.054
.291
.525
.010

.252
.171
.324
.104
.014
.070

.033
.012
.049
.015
.005
.085

.017
.025
.013
.035
.078
.043

used the results of the conducted MANCOVA including the contrasts for each mapping aid, and

the program correctness of all three quadcopter missions.

We expected a beneﬁcial eﬀect of highlighting on program correctness (H1a). Based on the

descriptive means of program correctness in all three tasks, the means were higher in experimental

groups with highlighting in mission 1 and 2 (see Figure 6).

Figure 6: Means and standard error (CI = 95%) of the program correctness (in %) of the three quadcopter missions
depending on the experimental group.

The expected signiﬁcant, beneﬁcial eﬀect was only found in the ﬁrst mission (mission 1: p =

.008*, η2

partial = .091) but not for the following missions (mission 2: p = .112, η2

partial = .033;
partial = .017). Thus, our hypothesis was only partially supported by the data

mission 3: p = .252, η2

(H1a).

Additionally, we expected a beneﬁcial eﬀect of dynamic linking for solving the programming

tasks correctly (H1b). Based on descriptive means, no substantial diﬀerence was found in the ﬁrst

task between the groups with and without dynamic linking. Descriptively, higher means were given

in the groups with dynamic linking compared to the groups without dynamic linking in the second

and third task (see Figure 6).

We found no signiﬁcant, beneﬁcial eﬀect for dynamic linking on solving the three tasks (mission

1: p = .636, η2

partial < .003; mission 2: p = .355, η2
Based on these ﬁndings, our hypothesis was not supported (H1b).

partial = .012; mission 3: p = .171, η2

partial = .025).

As both mapping aids eased the programming of the quadcopter missions, we expected a syner-

getic eﬀect of both mapping aids, compared to one mapping aid (H1c). In addition to the reported

results of the MANCOVA (see Table 2), we analyzed the diﬀerences between the groups with

mapping aids with respective contrasts, to gain insights into whether the combined (synergietic)

mapping aid (dynamic linking & highlighting) results in signiﬁcant higher performance compared

29

101008060402001010080604020010100806040200*10dynamiclinkingMission 1: "Simple Square"Mission 2: "Commute Between Objects"Mission 3: "Dynamic Square"Estimated marginal mean ofprogram correctnesshighlightshighlightshighlights***to the single mapping aid conditions (dynamic linking or highlighting). We found a signiﬁcant ben-

eﬁcial synergetic eﬀect for both mapping aids compared to dynamic linking for the ﬁrst and second

mission (pmission1 = .002*, pmission2 = .015*) but not for the third mission (pmission3 = .135).

Additionally, we found a beneﬁcial, synergetic eﬀect for both mapping aids compared to highlight-

ing for second mission (pmission2 = .042*) but not for the ﬁrst or third mission (pmission1 = .095,

pmission3 = .099).

Hence, the hypothesis (H1c) was partially supported by the data.

6.4. Eﬀects of highlighting and dynamic linking on learning outcomes (RQ2)

We expected, that we would ﬁnd stronger beneﬁcial eﬀects of highlighting on the comprehension

and the application level of learning outcome compared to the knowledge level (H5a). Descriptively,

we found higher means for comprehension and application level in the experimental group with

highlighting compared to the control group while the knowledge level did merely diﬀer (see Figure 7).

Based on our MANCOVA, we found no signiﬁcant main eﬀect of highlighting on the three levels

of learning outcome (p > .265, see Table 2). Thus, our hypothesis was not supported by the data

(H2a).

In our next hypothesis, we expected the strongest beneﬁcial eﬀect of dynamic linking on compre-

hension and application level (H2b). Descriptively, in the groups with dynamic linking, the means

of all levels of learning outcome were higher compared to the groups without dynamic linking. We

found a signiﬁcant main eﬀect of dynamic linking on the comprehension level of learning outcome

plication (F (1, 75) = 4.08, p = .047*, η2

F (1, 75) = 5.61, p = .020*) with a medium eﬀect size (η2

partial = .070) and a signiﬁcant eﬀect on ap-
partial = .052): There were no signiﬁcant beneﬁcial eﬀects of
partial = .008). Hence, our hypothesis was supported
by the given data as the strongest eﬀect of dynamic linking was found for the comprehension and

dynamic linking on the knowledge (p = .450, η2

application level (H2b).

Comparing the diﬀerent mapping aids for their beneﬁcial eﬀect on diﬀerent learning outcome

(H2c), the descriptive pattern implied stronger beneﬁcial eﬀects of both mapping aids compared to

a single one (see Figure 7). For testing hypothesis H1c, we used a contrast analysis to complement

the MANCOVA results and to allow insights into the speciﬁc diﬀerences between the groups with

mapping aids.

In our hypothesis, we assumed a synergetic eﬀect of both mapping aids compared a single

30

Figure 7: Eﬀects of mapping aids on comprehension (left) and application level (right) under consideration of the
covariates displaying means and standard errors (CI = 95%)).

mapping aid on the diﬀerent levels of learning outcome (H2c). Based on our MANCOVA contrast

analysis, we found a signiﬁcant beneﬁcial synergetic eﬀect for both mapping aids compared to

highlighting on application level (papplication = .013), only (pknowledge = .317, pcomprehension = .068,

see Figure 7).

In contrast, comparing both mapping aids and dynamic linking (pknowledge = .678, pcomprehension

= .335, papplication=.074) did not reveal signiﬁcant diﬀerences. Hence, our hypothesis (H2c) was

only partially supported by the data.

6.5. Correlation of Learning Strategy Traces & Program Correctness (RQ3)

Having a closer look at the learning behavior while programming the quadcopter mission, traces

of cognitive (organizing, elaborating) and meta-cognitive (planning, monitoring) learning strategies

were analyzed. We expected the traces to be positively correlated to overall program correctness.

First, we analyzed the traces of the cognitive learning strategies. Based on scatter plot inspec-

tion, we found the expected pattern of organizing (indicated by interacting only with the graphical

preview) and program correctness. We found a medium, positive correlation (r = .553, p < .001***,

see Figure 8).

31

101008060402001010080604020010*dynamic linkingdynamic linkinghighlightsEstimated marginal mean ofcomprehension levelEstimated marginal mean ofapplication level**Figure 8: Scatter plot displaying the relationship between traces of cognitive learning strategies and overall program
correctness.

Thus, our hypothesis (H3a) was supported. Inspecting the descriptive pattern of elaborating

(trace indicated by overall time in the PLE), a positive relation with program correctness was

expected. In line with our hypothesis (H3b), we revealed a strong, positive correlation between

elaboration and program correctness (r = .639 p < .001***). Having a look at the traces of meta-

cognitive learning strategies, based on the visual inspection, a positive relationship between planning

(indicated by time before starting the tasks) and program correctness was not plausible. In line

with this, no signiﬁcant correlation was found (r =

.163, p = .214) and the hypothesis (H3c) was

−

not supported by the data. For monitoring (indicated by starting the simulation in the preview),

we found the pattern ﬁtting to our hypothesized relation with program correctness. However, we

found no signiﬁcant correlation between monitoring and program correctness (r = .234, p = .056;

H3d).

6.6. Relation of learning traces and learning outcome (RQ4)

We expected traces of cognitive and meta-cognitive learning strategies to be positively related

with overall learning outcome.

In line with the positive descriptive trend, we found a medium,

positive correlation between traces of organizing and overall learning outcome (r = .400, p <

.001***, see Figure 9). Thus, our hypothesis (H4a) was supported.

32

Traces of elaborating(Time on exercises [min])Overallprogramcorrectness02040608010012005101520r = 0.6390510152025303505101520r = 0.553OverallprogramcorrectnessTraces of organizing(Phases of preview interaction)Figure 9: Scatter plot displaying the relationship between traces of cognitive learning strategies and overall learning
outcome.

Inspecting the descriptive pattern of elaborating, a positive relation with learning outcome

was expected. In line with this the ﬁndings related to our hypothesis (H4b) revealed a medium,

positive correlation between elaboration and overall learning outcome (r = .404, p < .001***, see

Figure 9 ). Having a look at the traces of meta-cognitive learning strategies, again (see RQ3) a

positive relationship between planning and program correctness was not plausible.

In line with

this, no signiﬁcant correlation was found planning (rmonitoring = .169, p = .170) nor monitoring

(rplanning =

H4d).

.013, p = .924). Thus, these hypotheses were not supported by our ﬁndings (H4c &

−

6.7. Typical Errors (RQ5)

In order to receive further insights into the novices handling of the programming missions, we

analyzed process data. This method allowed further insight into the aspects where mistakes were

typically made. Since we were dealing with a very large sample, process data from the ﬁrst mission

were analyzed for sources of error. These resulted from the solution scheme. The ﬁrst mission was

evaluated on the basis of these criteria. To achieve the maximum score of 6 points, the following

criteria had to be met: Creation of four diﬀerent waypoints; these waypoints form a square; angles of

the quadcopters were manipulated at least once; angles of the quadcopters were correctly adjusted

as desired in the task; the quadcopter ﬂies; each ”moveTo” is followed by a ”wait” or ”sleep”.

In the ﬁrst mission, setting the angle of the drones proved to be a typical source of error.

Descriptively, it was found that about 57% (n = 47) of the participants did not set the angle

correctly and the distribution seemed to diﬀer between the experimental groups.

33

020406080100120020406080100r = 0.40405101520253035020406080100r = 0.400Traces of elaborating(Time on exercises [min])Overall learning outcome [%]Traces of organizing(Phases of preview interaction)Overall learning outcome [%]Therefore, this typical error was analyzed in more detail as an example. To test whether the

mapping aids oﬀered had an eﬀect on the performance in setting the correct angle, we performed a

logistic regression including the covariates (see Table 3). Based on our regression, participants with

both mapping aids had a 5.18-times higher chance (p = .020*) of having set the angle correctly in

the ﬁrst task compared to the control group. Hence, our hypothesis was supported (H5) for this

exemplary typical error. For further insights into other typical errors (see Appendix B).

Table 3: Coeﬃcients of the logistic regression predicting the chance of correct angle in mission 1 considering the
eﬀect of experimental groups (1-3) against the control group (4) with ﬁgural intelligence, need for cognition and prior
knowledge as covariates

Estimate

SE Odds Ratio

z Wald χ2

(Intercept)
Figural intelligence
Need for cognition
Prior knowledge
Dyn. linking ∗ highlights (1)
Dynamic linking (2)
Highlights (3)

−

−

2.387
0.418
0.013
0.011
1.645
0.077
0.537

1.427
1.509
0.015
0.013
0.706
0.704
0.675

0.092
1.519
1.013
1.011
5.181
0.926
1.711

−

−

1.673
0.277
0.859
0.843
2.330
0.109
0.796

2.799
0.077
0.738
0.710
5.429
0.012
0.634

Wald Test
df
p

1
1
1
1
1
1
1

.094
.782
.390
.399
.020
.913
.426

6.8. Analysis of the proﬁles of successful novices (RQ6)

By analyzing the characteristics of the 10 participants that reached all points in the program-

ming exercises, we gain further insights into the proﬁles of successful novices (see Figure 10): the

normalized scores for the measured characteristics of each of these participants are plotted and

connected to detect possible common tendencies or deciding characteristics. Of the 10 selected par-

ticipants, 5 had both help features available, 2 had only highlights, 3 had neither dynamic linking

nor highlights, and none had only dynamic linking enabled.

34

Figure 10: Z-scores of diﬀerent variables characterizing the top ten users based on program correctness.

In the subgroup, tendencies can be described for the diﬀerent criteria (H6): Successful users

in programming the three missions tended to have higher scores on the characteristic need for

cognition, mostly above-average prior knowledge, and ﬁgural intelligence. Looking at the cognitive

load of the learners in this subgroup, no clear pattern emerges with regard to the germane cognitive

load, but extraneous cognitive load and intrinsic cognitive load tend to be lower compared to the

overall mean. The users in this group rated the usability of the PLE above average. The top 10 users

in terms of program correctness were also in the successful group in the learning test, particularly in

the areas of comprehension and application. Thus, there is a certain proﬁle of successful users and as

described earlier, programm correctness and learning outcomes were related. However, for example,

in prior knowledge and ﬁgural intelligence and knowledge learning outcome no clear pattern can be

derived. Since this last research question is more of an exploitative question, it can be concluded

that some of the results (e.g. learning outcome) correspond to our hypothesized expectations, but

no clear and consistent proﬁle of successful novices can be described. Hence, our hypothesis was

partially supported by the ﬁndings (H6).

7. Discussion

The eﬀect of mapping aids were considered based on a multi-method assessment approach.

By this, we gained further insights into diﬀerent aspects of potential beneﬁts from the respective

mapping aids.

35

need for cognitionprior knowledgeﬁgural intelligencegermane cognitive loadextraneous cognitive loadintrinsic cognitive loadlearning outcome: knowledgelearning outcome: comprehensionlearning outcome: application7.1. Mapping aids and program correctness (RQ1)

We expected a beneﬁcial eﬀect of the two mapping aids on program correctness. In contrast to

our initial expectation, only highlighting increased performance for programming the ﬁrst mission

but no signiﬁcant, beneﬁcial eﬀects were found for dynamic linking. Additionally, the assumed

synergistic eﬀect was only found when comparing both mapping aids against dynamic linking (ﬁrst

and second mission) and highlighting (second mission).

Despite the fact that a positive eﬀect of dynamic linking and combined mapping aids compared

to single-help conditions is theoretically plausible based on cognitive processes, previous empirical

studies describe similar ﬁndings as in our study (e.g. Rey, 2011). With respect to the underlying

cognitive processes, plausible reasons for the lack of a positive eﬀect of dynamic linking can be

described in addition to the speciﬁc application-related conclusions: Additional load on working

memory due to the presentation and use of the aids might occur and result in a lower performance

(Lowe, 1996; Sweller, 2020). Reﬂecting on this, Rey (2011) concluded based on theoretical infer-

ences and the heterogeneous empirical ﬁndings that dynamic linking is not per se advantageous or

disadvantageous, but that the speciﬁc implementation also plays an important role. Additionally,

Seal et al. (2010) described, that interactive elements might support users depending on the given

task and emphasized that mapping aids might cause additional strain while learning. The three

quadcopter missions had diﬀerent levels of diﬃculty: While mission 1 only required the extension of

the given code example, the subsequent missions contained further code elements and calculations

that were not explicitly included in the example. The question now is whether certain aids or their

combination are particularly advantageous for diﬀerent partial solutions of the given missions. This

question was examined in RQ5 (see Section 7.4). In addition, the question arises as to what eﬀect

the mapping aids have at the learning level and whether, for example, they particularly support

the comprehension and application of what has been learned. This was examined in more detail in

the next research question.

7.2. Mapping aids and learning outcome (RQ2)

Based on our hypotheses, we expected a beneﬁcial eﬀect of the two mapping aids on higher

levels of learning outcome. Beneﬁcial eﬀects were found for dynamic linking on comprehension

and application level of learning outcome but not for highlighting. Comparing single aids to the

combined condition revealed beneﬁcial eﬀects for adding dynamic linking on the application level.

36

Based on these ﬁndings, diﬀerent conclusions can be made: (i) the knowledge level of learning

outcome was not aﬀected by the mapping aids or their combination. This was in line with our

expectation as these mapping aids facilitated the integration of elements and processes in the

PLE and not in particular the sub-semantic processing of the diﬀerent components (Fries et al.,

2021; Patwardhan & Murthy, 2017). (ii) Beneﬁcial eﬀects on learning outcomes were found for

dynamic linking for both comprehension and application while highlighting did not signiﬁcantly

increase the learning outcome. This was not in line with our initial expectations. However, having

a closer look at previous ﬁndings, a heterogeneous pattern for eﬀects of mapping aids can be

described.

In contrast to the described advantages, there are also studies (e.g. van der Meij &

de Jong, 2006) that do not describe the beneﬁcial eﬀects of mapping aids. Based on theoretical

considerations, plausible explanations for these ﬁndings exist: When using highlights, novices are

passively pointed to connections and no longer actively reﬂect on them, and thus no deeper learning

occurs (Ainsworth, 1999; Seufert & Br¨unken, 2006). Providing highlights in combination with a

very speciﬁc task could, for example, encourage the use of means-end strategies (Erhel & Jamet,

2019).

Since ﬁnding e.g.

two connected elements and then the interaction of these is particularly

central for the level of understanding, this could be a possible explanation why highlights were

rather less helpful in answering these questions. In order to understand this ﬁnding more deeply,

future studies should include further measurements for the development of mental models in order

to better diﬀerentiate further sub-processes of information processing (for details see (Vogt, 2021).

This will provide more precise insights into the eﬀects of highlights on cognitive processes.

For dynamic linking, novices where hinted to related processes, but to beneﬁt in terms of

learning outcome, they still needed to reﬂect the relation between the respective components where

as highlighting already made the relevant relation very explicit (Gentner, 1983). (iii) This is also

reﬂected by the ﬁnding concerning the synergistic eﬀect of both mapping aids compared against the

single aid conditions on learning outcome: novices were stimulated by adding dynamic linking to

process the learning content more deeply, which was reﬂected in synergistic eﬀects on the application

level when comparing both mapping aids.

37

7.3. Traces of learning strategies and performance (RQ3 & RQ4)

When analyzing the relationship between the learning strategies and their relationship to perfor-

mance, it was found that only the cognitive strategies traces were positively related to performance

(program correctness and learning outcome).

In contrast, these relationships with performance

could not be found for the metacognitive strategies traces.

Reﬂecting critically on these ﬁndings, the following explanations can be found: Although the

selected indicators or traces can be assigned to speciﬁc learning strategies, there are other possible

indicators as well (Roll & Winne, 2015). Based on our ﬁndings, metacognitive strategy traces were

not related to performance.

In our study, planning was traced by the time before the onset of

programming each mission. However, it cannot be ruled out that novices also planned during the

tasks. Hence, our ﬁnding reﬂect one general challenge when dealing with process data and deducing

intentions or strategies based on behavioral traces (Malmberg et al., 2017).

In addition, the instructions for the missions were already transparently divided into substeps

or subproblems to accommodate novices. Hence, a part of the structuring process and planning

process was already transparent. Therefore, it is plausible that planning in this speciﬁc case is not

strongly related to performance, as it was already facilitated by the task instruction. Hence, the

operationalization of the metacognitive strategy trace needs to be reconsidered in future studies as

well as the metacognitive strategy use during performing the respective programming tasks.

In contrast, traces of monitoring showed a descriptive trend indicating a positive correlation

with program correctness, which was not signiﬁcant. Again, the question is to what extent the

monitoring already took place when the novices looked at the preview without running the simula-

tion and whether further or better traces for the monitoring process can be found here, which would

allow even deeper and more diﬀerentiated insights into the application of metacognitive learning

strategies.

7.4. Avoiding typical errors (RQ5)

In order to gain further insight into the solution of the programming missions, typical errors in

mission 1 were analyzed. We focused our analysis on the ﬁrst mission as the high rate of successful

novices lead to few but common mistakes that were well suited for detailed analysis. The lower

success rate in, e.g., mission 3 leads to a high number of very diverse observed problems – as well

as many incomplete solutions – that mask interesting, typical errors. The exemplary typical error

38

was that novices did not set the correct angle of the quadcopter or did not adjust it at all. The

analysis showed that novices with both aids had a signiﬁcantly higher chance of setting the angle

correctly.

Reﬂecting in detail on the role of the mapping aid in solving this partial problem, the ﬁndings are

in line with expectations based on the theoretical assumptions. For instance, dynamic linking oﬀers

a direct manipulation of the angles. Additionally, highlighting should be helpful for the orientation

and assignment of the respective way points. When combining both mapping aids, novices should

be supported in the solution of the angle setting in the ﬁrst quadcopter mission. Hence, this

exemplary partial problem was chosen to examine whether the odds of error changed depending on

the available mapping aids. Typical problems for correct angle stetting were, that novices either

did not change the angle at all, or were not able to deduce the correct values for the required

angles for each way point. In the condition with both mapping aids, they had the opportunity to

adapt the 3D preview directly to set the angles correctly, without the dynamic linking, they had to

calculate the angle. Without the highlights they had to search for the respective way point without

assistance to map the code and the way point in the preview.

In the future, based on the available empirical studies, guidelines could be developed, which

would allow the type of mapping assistance to be deduced in the context of the speciﬁc (sub)problem

and thus enable targeted assistance in the individual (sub)tasks (Seal et al., 2010). To gain further

insight, in addition to analyzing the eﬀect of aid, the relationship between certain strategies and

performance was also examined in more detail.

7.5. Successful patterns and individual requirements for success (RQ6)

In the last research question, the novices’ proﬁles of relevant characteristics were examined in

detail. By including some of the characteristics as a control variable, the inﬂuence of the character-

istics on the performance was controlled to avoid bias on the performance measures. Nevertheless,

it seems worthwhile to take a closer look at the proﬁles of the 10 most successful novices. As

expected based on the high correlation between program correctness and learning outcome, the 10

most successful novices (based on program correctness) were also above average based in learning

outcome.

However, the cognitive load during the tasks showed a very heterogeneous pattern of ﬁndings.

The cognitive resources invested (germane cognitive load) varied greatly. Thus, it cannot be as-

39

sumed that success in the missions depended signiﬁcantly on the cognitive resources provided, only.

The intrinsic cognitive load, which is based on task diﬃculty and element interactivity, also showed

a high degree of variation. Here, a plausible assumption would be that successful novices subjec-

tively rate the tasks as easier and are then correspondingly more successful (for further details of

the cognitive load theory see: de Bruin & van Merri¨enboer, 2017). This assumption was not sup-

ported by the present ﬁndings. Another plausible assumption would be that novices with more prior

knowledge or better skills (ﬁgural intelligence, which correlates substantially with intelligence) are

more successful (Kell & Lang, 2018). However, these two characteristics are also clearly scattered

in the group of the most successful novices.

One characteristic was outstanding: need for cognition. This concept focuses on the extent to

which people like to deal with complex (thinking) tasks and the extent to which they actively seek

out such tasks in everyday life itself. This characteristic also seems to be relevant for the successful

programming of the missions or problem solving in general (e.g. Coutinho et al., 2005; Rudolph

et al., 2018). Therefore, it also represents a possible starting point for supporting novices in their

entry into programming. If people are encouraged to take more enjoyment and be more active in

dealing with complex tasks (even in their free time) and positive incentive systems (e.g. serious

games) are created, then learning programming languages could be promoted in this way (Rudolph

et al., 2018).

7.6. Limitations of the study and threats to validity

Due to the pandemic situation, the PLE was used as an online tool. This setting went along

with some limitations. In a controlled laboratory study, the investigator could have ensured that

the available aids were used (at least once). Despite the explicit hint to use the mapping aids on

the base of the initial example, not all subjects complied with this request. Furthermore, it could

not be ensured that the novices did not use other (online) support to answer the questions or to

solve the programming tasks. To limit this problem, the tasks were very speciﬁc and the simple

copying of code examples was not possible due to the Blocky implementation used. Nevertheless,

this could be controlled for more eﬀectively in a follow-up laboratory study.

Another limitation of the online PLE was that the novices participated on their own computers.

For example, participants had diﬀerent screen sizes, interactions (touch pad/mouse), and individual

settings, including a possibly slow internet connection, may have also contributed to potential bias.

40

In order to keep possible biases as small as possible, the section of the screen that was viewed was

kept constant, regardless of the screen size. Nevertheless, it is conceivable that the screen size had

an inﬂuence on the usability or readability of the provided PDF with the instructions.

In our study, we collected a convenience sample. The main goal in recruiting was to ﬁnd

people with little programming experience. Based on the prior knowledge data, the sampling

method used succeeded in ﬁnding novice programmers. Nevertheless, the sample contained mainly

students. Psychology students were over represented due to their lower programming experience in

comparison to, e.g., engineering students. In this sample, it can be observed that, for example, the

ﬁgural intelligence was slightly above average. It would therefore be interesting to see whether the

present ﬁndings can be replicated with other more heterogeneous samples and what role further

learner characteristics (e.g. age, working memory capacity etc.) play for the positive eﬀect of the

mapping aids on performance and their use in the PLE. Some of the reported eﬀect sizes were

signiﬁcantly smaller than the initially assumed eﬀect size on which our a priori power analysis was

based.

In the future, larger samples could be obtained outside the pandemic period, as it was

extremely diﬃcult to ﬁnd subjects during this time.

In the present study, the initial barrier to start programming and implement a solution was kept

as low as possible. To this end, some hints and helpful information to ease the problem solving

aspect of programming have been provided in the task description. With the help of these hints,

novices could divide the tasks into sub-steps and to understand the structure of the task and the

ﬂight trajectory to be created. This led to a simpliﬁcation of the programming tasks in order to

make it possible for novices to solve diﬀerent tasks in less time and focus on the implementation

and program maintenance aspects. The library of available program blocks and the domain speciﬁc

language used was tailored to ﬁt the programming tasks – this reduces the time to introduce

all necessary concepts and language constructs. Nevertheless, the environment and language can

be easily extended and adapted to real world applications without adding much complexity. The

programming tasks are therefore rather artiﬁcial and only reminiscent of real world scenarios, which

would be more complex, time-consuming, and require a longer training.

8. Conclusion

Domain experts operating cyber-physical systems often lack in depth programming knowledge.

Therefore, the design of the programming (and learning) environment as well as support features

41

to help acquire basic knowledge of the system are crucial to successfully program the CPS. Source

location tracking provides valuable information to automatically link elements of a live preview to

corresponding code elements. Mapping aids that support novice learners in solving programming

tasks can be implemented using this information.

In the present study, we examined the eﬀects of a highlighting feature that highlights relevant

locations in the code when clicking on an element in the preview, and a dynamic linking feature,

that allowed direct manipulation of the code through the preview, on program correctness and the

learning outcome of novice learners. Participants were tasked to implement diﬀerent quadcopter

missions in a block based PLE with a 3D live preview and simulation.

While for program correctness highlighting was beneﬁcial, dynamic linking showed more positive

eﬀects on deeper learning. The combination of both aids in comparison to single aids also revealed

positive eﬀects. The analysis of typical errors shows that especially the combination of both helps

increased the chance of a correct solution. Traces of strategies when working on the missions

can already anticipate success in programming and learning. No consistent proﬁle for the best

performing novices (based on their characteristics) was found but higher programm correctness was

strongly related to learning outcome.

Future Work. Technological solutions could also be used to gain further insights into the use of the

PLE. In the present study, we have already used many diﬀerent parameters to investigate the eﬀects

of the mapping aids on performance and behavioral patterns. In addition, psychophysiological mea-

surements (e.g., eye-tracking) could provide further insight into the associated cognitive processes.

Other formats such as video or audio recordings could be used as possible sources of information.

For example, learners could be actively encouraged to verbalize their thoughts and solution pro-

cesses (think aloud), possibly providing further insights into the strategies used. This could reduce

speculation and uncertainty while classifying and interpreting the intent of the participant and

thereby improve the transparency of behavioral patterns and cognitive processes.

In our study, we found a positive relationship between traces of cognitive learning strategies

(organizing, elaborating) and performance based on process data.

In future studies, indicators

of these traces could be tracked online through learning analytic approaches and used as a live

feedback tool to provide helpful inputs (e.g., cognitive prompts) that could trigger the use of

learning strategies when needed (e.g. Zumbach et al., 2020). In this way, individual and adaptive

42

PLEs could be implemented, and if suﬃcient training data are available, artiﬁcial intelligence

approaches could also be utilized to provide feedback or appropriate supporting elements. For this,

the analysis of further typical errors could be helpful. If adaptation through artiﬁcial intelligence is

conceptualized at diﬀerent levels (micro and macro) and over longer periods of time, further insights

could be gained into whether, for example, these factors are also important for ﬁnding eﬀects of

metacognitive strategy traces.

Overall, our study oﬀers only a limited temporal insight. It would also be interesting to observe

novices in the process of learning to program for a longer period of time and to investigate whether

the eﬀect of the aids and their use changes over time and to what extent the learning eﬀects found

are long-term.

In future studies, the research question could be extended and the concept of the planning pro-

cess could be explored in more detail, for example in connection with the concept of computational

thinking (e.g. Hodhod et al., 2014). In this way, the present ﬁndings could be integrated into a

larger context.

The display concept of the study could also be expanded to diﬀerent settings: we developed,

both, an augmented and a virtual reality PLE to investigate how mapping aids assist novices when

the 3D preview is presented as an augmented reality element in the real laboratory, or whether

presenting our PLE in virtual reality interferes with the positive eﬀects of our mapping aids.

We plan to implement and evaluate more advanced mapping aids and other live programming

features that use and showcase the rich information SLT enabled PLEs can provide. These include

improvement of proposed code changes through context information, live evaluation and live de-

bugging tools that can explain program behavior using provenance traces, and test case generation

or automatic program repair using SLT enabled assertions.

More adaptive PLEs could be developed in future studies that additionally detect and reinforce

positive patterns with prompts and speciﬁcally support novices. SLT is a promising and adequate

way to provide the necessary information to implement those novel help features.

43

Acknowledgement. This work was partially supported by the German Research Foundation (DFG):

435878599, 453895475, and the German Federal Ministry of Education and Research (BMBF):

16DHB2205.

44

References

Ainsworth, S. (1999). The functions of multiple representations. Computers & Education, 33 ,

131–152. doi:10.1016/S0360-1315(99)00029-9.

Ainsworth, S. (2014). The multiple representation principle in multimedia learning. In R. E. Mayer

(Ed.), The Cambridge Handbook of Multimedia Learning Cambridge Handbooks in Psychology

(pp. 464–486). New York: Cambridge University Press. doi:10.1017/CBO9781139547369.024.

Arendt, K., Stark, L., Seibert, J., & Stark, R. (2021). Lernstrategieerfassung in digitalen Ler-

numgebungen: Fragebogen- oder Logﬁle-Daten? PaePsy2021.

Beißert, H., K¨ohler, M., Rempel, M., & Beierlein, C. (2014). Eine deutschsprachige Kurzskala

zur Messung des Konstrukts Need for Cognition: Die Need for Cognition Kurzskala (NFC-K)

volume 2014/32 of GESIS-Working Papers. Mannheim: GESIS - Leibniz-Institut f¨ur Sozialwis-

senschaften. URL: https://nbn-resolving.org/urn:nbn:de:0168-ssoar-403157.

Berenz, V., & Suzuki, K. (2014). Targets-drives-means: A declarative approach to dynamic behavior

speciﬁcation with higher usability. Robotics and Autonomous Systems, 62 , 545–555. doi:10.1016/

j.robot.2013.12.010.

Bloom, B. S., Engelhart, M. D., Furst, E., Hill, W. H., & Krathwohl, D. R. (1956). Taxonomy of

educational objectives. Vol. 1: Cognitive Domain. New York: David McKay.

Boucheix, J.-M., Lowe, R. K., Putri, D. K., & Groﬀ, J. (2013). Cueing animations: Dynamic

signaling aids information extraction and comprehension. Learning and Instruction, 25 , 71–84.

doi:10.1016/j.learninstruc.2012.11.005.

Breckel, A., & Tichy, M. (2016). Live programming with code portals.

In Workshop on Live

Programming Systems (LIVE’16), Rome, Italy.

Br¨unken, R., Seufert, T., & Zander, S. (2005). F¨orderung der Koh¨arenzbildung beim Lernen mit

multiplen Repr¨asentationen. Zeitschrift f¨ur P¨adagogische Psychologie, 19 , 61–75. doi:10.1024/

1010-0652.19.12.61.

Burnett, M. M., Atwood, J. W., & Welch, Z. T. (1998). Implementing level 4 liveness in declarative

visual programming languages. In Proceedings 1998 IEEE Symposium on Visual Languages, Nova

45

Scotia, Canada, September 1-4, 1998 (pp. 126–133). IEEE Computer Society. doi:10.1109/VL.

1998.706155.

Campusano, M., & Fabry, J. (2017). Live robot programming: The language, its implementation,

and robot api independence. Science of Computer Programming, 133 , 1–19. doi:10.1016/j.

scico.2016.06.002.

Campusano, M., Fabry, J., & Bergel, A. (2019). Live programming in practice: A controlled

experiment on state machines for robotic behaviors. Information and Software Technology, 108 ,

99–114. doi:10.1016/j.infsof.2018.12.008.

Colling, J., Wollschl¨ager, R., Keller, U., Preckel, F., & Fischbach, A. (2022). Need for cognition and

its relation to academic achievement in diﬀerent learning environments. Learning and Individual

Diﬀerences, 93 , 102110. doi:10.1016/j.lindif.2021.102110.

Coutinho, S., Wiemer-Hastings, K., Skowronski, J. J., & Britt, M. A. (2005). Metacognition, need

for cognition and use of explanations during ongoing learning and problem solving. Learning and

Individual Diﬀerences, 15 , 321–337. doi:10.1016/j.lindif.2005.06.001.

de Bruin, A. B., & van Merri¨enboer, J. J. (2017). Bridging cognitive load and self-regulated learning

research: A complementary approach to contemporary issues in educational research. Learning

and Instruction, 51 , 1–9. doi:10.1016/j.learninstruc.2017.06.001.

de Jong, T., & van Joolingen, W. R. (1998). Scientiﬁc discovery learning with computer sim-

ulations of conceptual domains. Review of Educational Research, 68 , 179–201. doi:10.3102/

00346543068002179.

Erhel, S., & Jamet, E. (2019). Improving instructions in educational computer games: Exploring the

relations between goal speciﬁcity, ﬂow experience and learning outcomes. Computers in Human

Behavior , 91 , 106–114. doi:10.1016/j.chb.2018.09.020.

Faul, F., Erdfelder, E., Buchner, A., & Lang, A.-G. (2009). Statistical power analyses using G*Power

3.1: Tests for correlation and regression analyses. Behavior Research Methods, 41 , 1149–1160.

doi:10.3758/BRM.41.4.1149.

46

Field, A. (2013). Discovering statistics using IBM SPSS statistics: And sex and drugs and rock

’n’ roll . MobileStudy (4th ed.). Los Angeles and London and New Delhi and Singapore and

Washington DC: SAGE.

Finch, H. (2005). Comparison of the performance of nonparametric and parametric manova test

statistics when assumptions are violated. Methodology, 1 , 27–38. doi:10.1027/1614-1881.1.1.

27.

Fries, L., Son, J. Y., Givvin, K. B., & Stigler, J. W. (2021). Practicing connections: A framework

to guide instructional design for developing understanding in complex domains. Educational

Psychology Review , 33 , 739–762. doi:10.1007/s10648-020-09561-x.

Gentner, D. (1983). Structure-mapping: A theoretical framework for analogy*. Cognitive Science,

7 , 155–170. doi:10.1207/s15516709cog0702{\textunderscore}3.

Hadwin, A. F. (2021). Commentary and future directions: What can multi-modal data reveal

about temporal and adaptive processes in self-regulated learning? Learning and Instruction, 72 ,

101287. doi:https://doi.org/10.1016/j.learninstruc.2019.101287.

Hadwin, A. F., Nesbit, J. C., Jamieson-Noel, D., Code, J., & Winne, P. H. (2007). Examining trace

data to explore self-regulated learning. Metacognition and Learning, 2 , 107–124. doi:10.1007/

s11409-007-9016-7.

Helmlinger, B., Sommer, M., Feldhammer-Kahr, M., Wood, G., Arendasy, M. E., & Kober, S. E.

(2020). Programming experience associated with neural eﬃciency during ﬁgural reasoning. Sci-

entiﬁc Reports, 10 , 13351. doi:10.1038/s41598-020-70360-z.

Hempel, B., & Chugh, R. (2020). Tiny structure editors for low, low prices! (Generating GUIs

from toString functions). In 2020 IEEE Symposium on Visual Languages and Human-Centric

Computing (VL/HCC) (pp. 1–5). IEEE. doi:10.1109/VL/HCC50065.2020.9127256.

Hempel, B., Lubin, J., & Chugh, R. (2019). Sketch-n-sketch: Output-directed pogramming for svg.

In Proceedings of the 32nd Annual ACM Symposium on User Interface Software and Technology

UIST ’19 (p. 281–292). New York, NY, USA: Association for Computing Machinery. doi:10.

1145/3332165.3347925.

47

Hempel, B., Lubin, J., Lu, G., & Chugh, R. (2018). Deuce: A lightweight user interface for

structured editing. In Proceedings of the 40th International Conference on Software Engineering

ICSE ’18 (p. 654–664). New York, NY, USA: Association for Computing Machinery. doi:10.

1145/3180155.3180165.

Hodhod, R., Fleenor, H., & Nabi, S. (2014). Adaptive augmented reality serious game to fos-

ter problem solving skills.

In Workshop Proceedings of The 10th International Conference on

Intelligent Environments (pp. 273–284). IOS Press. doi:10.3233/978-1-61499-411-4-273.

Jeske, D., Backhaus, J., & Stamov Roßnagel, C. (2014). Self-regulation during e-learning: using

behavioural evidence from navigation log ﬁles. Journal of Computer Assisted Learning, 30 ,

272–284. doi:10.1111/jcal.12045.

Kang, H., & Guo, P. J. (2017). Omnicode: A novice-oriented live programming environment with

always-on run-time value visualizations. In Proceedings of the 30th Annual ACM Symposium on

User Interface Software and Technology UIST ’17 (p. 737–745). New York, NY, USA: Association

for Computing Machinery. doi:10.1145/3126594.3126632.

Kell, H. J., & Lang, J. W. B. (2018). The great debate: General ability and speciﬁc abil-

ities in the prediction of

important outcomes.

Journal of Intelligence, 6 . doi:10.3390/

jintelligence6030039.

Klepsch, M., Schmitz, F., & Seufert, T. (2017). Development and validation of two instruments

measuring intrinsic, extraneous, and germane cognitive load. Frontiers in Psychology, (p. 1997).

doi:10.3389/fpsyg.2017.01997.

K¨olling, M., Brown, N., & Altadmri, A. (2017). Frame-based editing. Journal of Visual Languages

and Sentient Systems, 3 , 40–67.

Kozma, R. B., & Russell, J. (1997). Multimedia and understanding: Expert and novice responses

to diﬀerent representations of chemical phenomena. Journal of Research in Science Teaching:

The Oﬃcial Journal of the National Association for Research in Science Teaching, 34 , 949–968.

Lowe, R., & Boucheix, J.-M. (2008). Learning from animated diagrams: How are mental models

built?

In International Conference on Theory and Application of Diagrams (pp. 266–281).

Springer. doi:10.1007/978-3-540-87730-1_25.

48

Lowe, R. K. (1996). Background knowledge and the construction of a situational representation from

a diagram. European Journal of Psychology of Education, 11 , 377–397. doi:10.1007/BF03173279.

Lowe, R. K., & Schnotz, W. (2014). Animation principles in multimedia learning. The Cambridge

Handbook of Multimedia Learning, (pp. 513–546). doi:10.1017/CBO9781139547369.026.

Makransky, G., Borre-Gude, S., & Mayer, R. E. (2019). Motivational and cognitive beneﬁts of

training in immersive virtual reality based on multiple assessments. Journal of Computer Assisted

Learning, 35 , 691–707. doi:10.1111/jcal.12375.

Malmberg, J., J¨arvel¨a, S., & J¨arvenoja, H. (2017). Capturing temporal and sequential patterns of

self-, co-, and socially shared regulation in the context of collaborative learning. Contemporary

Educational Psychology, 49 , 160–174. doi:10.1016/j.cedpsych.2017.01.009.

Mayer, M., Kuncak, V., & Chugh, R. (2018). Bidirectional evaluation with direct manipulation.

Proceedings of the ACM on Programming Languages, 2 , 1–28. doi:10.1145/3276497.

Mayer, R. E. (Ed.) (2014). The Cambridge Handbook of Multimedia Learning. Cambridge

Handbooks in Psychology (second edition ed.). New York: Cambridge University Press.

doi:10.1017/CBO9781139547369.

Mayer, R. E. (Ed.) (2020). The Cambridge Handbook of Multimedia Learning. Cambridge

Handbooks in Psychology (3rd ed.). New York: Cambridge University Press. doi:10.1017/

CBO9781139547369.

Mayer, R. E., Mathias, A., & Wetzell, K. (2002). Fostering understanding of multimedia messages

through pre-training: Evidence for a two-stage theory of mental model construction. Journal of

Experimental Psychology: Applied , 8 , 147. doi:10.1037/1076-898X.8.3.147.

Ozcelik, E., Arslan-Ari, I., & Cagiltay, K. (2010). Why does signaling enhance multimedia learning?

evidence from eye movements. Computers in Human Behavior , 26 , 110–117. doi:10.1016/j.chb.

2009.09.001.

Pasternak, E., Fenichel, R., & Marshall, A. N. (2017). Tips for creating a block language with

blockly. In 2017 IEEE Blocks and Beyond Workshop (B&B) (pp. 21–24). IEEE. doi:10.1109/

BLOCKS.2017.8120404.

49

Patwardhan, M., & Murthy, S. (2017). Designing reciprocative dynamic linking to improve learn-

ers’ representational competence in interactive learning environments. Research and Practice in

Technology Enhanced Learning, 12 , 10. doi:10.1186/s41039-017-0046-8.

Pot, E., Monceaux, J., Gelin, R., & Maisonnier, B. (2009). Choregraphe: A graphical tool for

humanoid robot programming. In RO-MAN 2009 - The 18th IEEE International Symposium on

Robot and Human Interactive Communication (pp. 46–51). doi:10.1109/ROMAN.2009.5326209.

Prather, J., Pettit, R., McMurry, K., Peters, A., Homer, J., & Cohen, M. (2018). Metacog-

nitive diﬃculties faced by novice programmers in automated assessment tools.

In L. Malmi,

A. Korhonen, R. McCartney, & A. Petersen (Eds.), Proceedings of the 2018 ACM Confer-

ence on International Computing Education Research (pp. 41–50). New York, NY, USA: ACM.

doi:10.1145/3230977.3230981.

Price, T. W., & Barnes, T. (2015). Comparing textual and block interfaces in a novice programming

environment. In Proceedings of the Eleventh Annual International Conference on International

Computing Education Research ICER ’15 (p. 91–99). New York, NY, USA: Association for

Computing Machinery. doi:10.1145/2787622.2787712.

Rey, G. D. (2011). Interactive elements for dynamically linked multiple representations in computer

simulations. Applied Cognitive Psychology, 25 , 12–19. doi:10.1002/acp.1633.

Richter, J., & Scheiter, K. (2019). Studying the expertise reversal of the multimedia signaling eﬀect

at a process level: Evidence from eye tracking. Instructional Science, 47 , 627–658. doi:10.1007/

s11251-019-09492-3.

Rold´an-G´omez, J. J., Gonz´alez-Gironda, E., & Barrientos, A. (2021). A survey on robotic technolo-

gies for forest ﬁreﬁghting: Applying drone swarms to improve ﬁreﬁghters’ eﬃciency and safety.

Applied Sciences, 11 , 363. doi:10.3390/app11010363.

Roll, I., & Winne, P. H. (2015). Understanding, evaluating, and supporting self-regulated learning

using learning analytics. Journal of Learning Analytics, 2 , 7–12. doi:10.18608/jla.2015.21.2.

Rossano, G. F., Martinez, C., Hedelind, M., Murphy, S., & Fuhlbrigge, T. A. (2013). Easy robot

programming concepts: An industrial perspective. In 2013 IEEE International Conference on

50

Automation Science and Engineering (CASE) (pp. 1119–1126). IEEE. doi:10.1109/CoASE.2013.

6654035.

Rudolph, J., Greiﬀ, S., Strobel, A., & Preckel, F. (2018). Understanding the link between need

for cognition and complex problem solving. Contemporary Educational Psychology, 55 , 53–62.

doi:10.1016/j.cedpsych.2018.08.001.

Schipolowski, S., Wilhelm, O., & Schroeders, U. (2017). Berliner Test zur Erfassung ﬂuider und

kristalliner Intelligenz ab der 11. Jahrgangsstufe (BEFKI 11+) [Berlin test of ﬂuid and crystallized

intelligence for grades 11 and above].

Schnotz, W., Baadte, C., & M¨uller, A. (2010). Creative thinking and problem solving with depictive

and descriptive representations. In Use of Representations in Reasoning and Problem Solving (pp.

21–45). Routledge.

Schnotz, W., & Bannert, M. (2003). Construction and interference in learning from multiple rep-

resentation. Learning and Instruction, 13 , 141–156. doi:10.1016/S0959-4752(02)00017-8.

Seal, K. C., Przasnyski, Z. H., & Leon, L. A. (2010). How levels of interactivity in tutorials

aﬀect students’ learning of modeling transportation problems in a spreadsheet. Decision Sciences

Journal of Innovative Education, 8 , 75–94. doi:10.1111/j.1540-4609.2009.00244.x.

Seufert, T. (2019). Training for coherence formation when learning from text and picture and the

interplay with learners’ prior knowledge. Frontiers in Psychology, 10 , 193. doi:10.3389/fpsyg.

2019.00193.

Seufert, T., & Br¨unken, R. (2006). Cognitive load and the format of instructional aids for coherence

formation. Applied Cognitive Psychology, 20 , 321–331. doi:10.1002/acp.1248.

Seufert, T., J¨anen, I., & Br¨unken, R. (2007). The impact of intrinsic cognitive load on the eﬀective-

ness of graphical help for coherence formation. Computers in Human Behavior , 23 , 1055–1071.

doi:10.1016/j.chb.2006.10.002.

Snow, R. E. (1989). Aptitude-treatment interaction as a framework for research on individual

diﬀerences in learning. Learning and Individual Diﬀerences: Advances in Theory and Research,

(pp. 13–59). doi:10.1037/0022-006X.59.2.205.

51

Sobral, S. R. (2021). Bloom’s taxonomy to improve teaching-learning in introduction to pro-

gramming.

International Journal of Information and Education Technology, 11 , 148–153.

doi:10.18178/ijiet.2021.11.3.1504.

Sutherland, C. J., & MacDonald, B. A. (2018). Naoblocks: A case study of developing a children’s

robot programming environment. In 2018 15th International Conference on Ubiquitous Robots

(UR) (pp. 431–436). doi:10.1109/URAI.2018.8441843.

Sweller, J. (2020). Cognitive load theory and educational technology. Educational Technology

Research and Development, 68 , 1–16. doi:10.1007/s11423-019-09701-3.

Tanimoto, S. L. (2013). A perspective on the evolution of live programming. In 2013 1st Interna-

tional Workshop on Live Programming (LIVE) (pp. 31–34). doi:10.1109/LIVE.2013.6617346.

van der Meij, J., & de Jong, T. (2006). Supporting students’ learning with multiple representations

in a dynamic simulation-based learning environment. Learning and Instruction, 16 , 199–212.

doi:10.1016/j.learninstruc.2006.03.007.

van Someren, M. W., Reimann, P., Boshuizen, H., de Jong, T. et al. (1998). Learning with Multiple

Representations. Advances in Learning and Instruction Series.. ERIC.

Vogt, A. (2021). Fostering Deep Learning in Immersive Virtual Reality: Interplay of Learner’s

Characteristics with Internal and External Support. Ph.D. thesis Ulm University. doi:10.18725/

OPARU-44200.

Wild, K.-P., & Schiefele, U. (1994).

Lernstrategien im Studium: Ergebnisse zur Faktoren-

struktur und Reliabilit¨at eines neuen Fragebogens. URL: https://psycnet.apa.org/record/

1996-85746-001.

Winterer, M., Salomon, C., K¨oberle, J., Ramler, R., & Schittengruber, M. (2020). An expert

review on the applicability of blockly for industrial robot programming.

In 2020 25th IEEE

International Conference on Emerging Technologies and Factory Automation (ETFA) (pp. 1231–

1234). volume 1. doi:10.1109/ETFA46521.2020.9212036.

Witte, T., & Tichy, M. (2019). A hybrid editor for fast robot mission prototyping. In 2019 34th

IEEE/ACM International Conference on Automated Software Engineering Workshop (ASEW)

(pp. 41–44). doi:10.1109/ASEW.2019.00026.

52

Zumbach, J., Rammerstorfer, L., & Deibl, I. (2020). Cognitive and metacognitive support in

learning with a serious game about demographic change. Computers in Human Behavior , 103 ,

120–129. doi:10.1016/j.chb.2019.09.026.

53

Appendix A. Programming Exercises

The following pages in this section contain a translated version of the complete instructions and

exercises given to the participants preserving the original formatting and layout. Parts that were

only included in the instructions for speciﬁc experimental conditions are marked accordingly.

54

IntroductionTodayyouaresupposedtoprogramquadrocoptermissionsusingaspecialprogrammingen-vironmentfornoviceprogrammers.Pleasereadthefollowingpagescarefullybeforeyoustartsolvingthetasks.hintCreatearelaxedenvironment!Itisrecommendedtousealargescreenandamouseandtoavoidproblemswhileworkingonthetasks.ProgrammingandlearningenvironmentThemainwindowisdividedintoseveralsections:Intheprogrammingwindowpiecesfromthe(expandable)librarycanbedragged.Below,apreviewoftheprogramoutputorpossibleerrorsisdisplayed.Totherightofitalivepreviewoftheprogramisdisplayed.Save/Loadprogram3D previewVerschiebbareHelmeKoordinaten-ursprung:- x-axis- y-axis- z-axiscoordinatesystem originmovable objectsRecycle bin for deleted piecesstart simulationCommandpieces, sortedby categoryProgrammingareaError/Programoutput: resultof "print out"Thepiecescanbeplacedanywherewithintheprogrammingarea,butitisrecommendedtoformacoherentblockthatisprocessedfromtoptobottom.Piecescanbecopied(duplicated)byright-clickingonthem.Deletedpiecesendupintherecyclebin.Byclickingontherecyclebin,piecescanbedraggedbacktotheprogramarea.13DpreviewThe3Dviewshowsalivepreviewofthecurrentprogram.Theviewcanbemoved,rotatedandzoomedwiththemouse.Theviewcanberotatedwiththeleftmousebutton,zoomedwiththescrollwheelandpannedaroundwiththemiddlemousebutton(clickwiththemousewheel).Feelfreetotryitout!Waypointsaredisplayedassmallwhitequadrocopters,thepathbetweenthemasastraightline.Ifthelineisred,thequadrocoptermaynothaveenoughtimetoreachthedestination(forexample,becausethenextwaypointisgivendirectlywithoutwaitingpause),ifitiswhite,thedestinationisreached.Inaddition,thevirtualspacecontains3coloredobjectsthatcanbefreelymovedandrotatedonthefloorwiththemouse.InteractivepreviewNote:Thisfollowingsectionwasonlyavailableintherespectiveexperimentalconditions.Forconditionswithhighlighting:Clickingonawaypointwillhighlightintheprogrammingwindowthevaluesusedtocalculatethepositionofthewaypoint.Changingoneofthemarkedfieldswillmovethewaypoint,allothervalueshavenoinfluenceontheselectedwaypoint.Forconditionswithdynamiclinking:Withthearrowsawaypointcanbemoveddirectly.Itwillautomaticallyadjusttheprogramsothatthewaypointislocatedatthedesiredpositionandthechangesaremarked.However,theremaybeotherwaystogetthedesiredresultorthechangemayhaveother,additionaleffects.2ImportantprogrammingcommandsWritesthevalueoftherightparttotheconsole(lowerpartofthewindow)Determinenewpositionsonx,y,z(inm)androtation(in◦,aroundthez-axis)WaituntilthelastsettargetpositionhasbeenreachedWaitfor1secondReturnsthecurrentpositionandrotationofanobject.Objectcanbe’hardhat_yellow’,’hardhat_white’or’hardhat_blue’.Thereturnedposecanbeaccessedwith’get...of...’togetasinglevalue.CoordinateSystemPositionsarealwaysgiveninmetersrelativetotheorigin.Thisoriginislocatedinthecenterofthegrid.Thegridlinesformsquaresof1x1mandmarktheflooroftheroom.Thex-axisismarkedinred,they-axisingreenandthez-axis(altitude)inblue.Therotationaroundthez-axisismeasuredcounterclockwise;0◦correspondtothedirectionofthex-axis.x-axisy-axisz-axisψ angle(0,0,0)1×1m38hintsforsolvingtheproblems1.ProgrammingisaniterativeprocessItisdifficulttofindthecorrectsolutiondirectlyinthefirstattempt.Instead,trytocreateanincompletesolutionfirstandimproveitstepbystep.Forexample,ifyouarenotsureaboutthepositionofthewaypoints,itcanhelptoplacethemsomewherefirstandthenmovethemtothecorrectpositionusingthepreview.2.ExperimentationisencouragedSimulatedquadcoptersarecheapandcan’tbreak.Itisexplicitlyrecommendedtotrythingsevenifyoudon’tknowexactlywhatwillhappen.Thepreviewshowstheexpectedprogramprogressatanytime.Additionally,byclickingonthe’runscript’button,theprogramcanalsobesimulated.3.Divideandconquer!Iftheoverallproblemseemstoocomplicated,trytoidentifyandsolvesub-problems.Ifthesearestilltoocomplicated,breaktheproblemsdownfurther.4.DisplayintermediateresultsAnyintermediateresultscanbedisplayedatanytimewitha’printout’block.Insteadofspeculatingwhetheravalueiscalculatedincorrectly,itcansimplybeoutputandchecked.5.NameintermediateresultsUsevariablestostoreintermediateresultsandtousethemmultipletimes.Youcanalsogivethemaname:don’tbetooshytonamethecalculatedsidelengthofasquare’sidelength’.6.TakenotesAsmalldrawingornotecanbeofgreathelp.Youdon’thavetosolveeverythingonthecomputer.7.UsethepreviewThepreviewistheperfecttooltocheckprogramsforerrors.It’smuchfastertofigureoutwherethepoint(2,1,3)isinspaceifyoujustsetawaypointtothatpositionandlookitup.8.PayattentiontohintboxesThetaskscontainhintboxesinmanyplacesthatgiveusefulcluestothesolution.Itdoesn’thurttoreadthesehintsseveraltimesifyoufeelstuck.4Tutorialexample[10min]Thequadcopterissupposedtoflyuptoaheightof2mabovetheoriginandlandagain.TODO:□Replicatethegivenprogram.□Lookatthepreviewandmakesurethewaypointisat2mheight.□Runthesimulationbyclickingonthe’runscript’buttonandcomparethesimulationwiththepreview.□Trymovingthewaypointsinthex-directionandexperimentwithmorewaypointsoromit-tingthewaitblocksandhowthataffectsthesimulation.□Whenyouaredoneclickon’Save’tomarktheconfigurationasasolutionandsaveit(afilenameisautomaticallychosenandthereisnofeedback!Theloadfunctionalwaysautomaticallyloadsthelastsavestate).5Mission1:SimpleSquare[10min]Thequadrocopterissupposedtotakeoff,flyoverthefourverticesofasquareandthenlandatthecoordinateorigin(0,0,0).Todothis,familiarizeyourselfwiththecoordinatesystemanddeterminethefourcornerpointsofanysquareinflightspace.hintItismucheasiertoalignthesquaretotheaxesofthecoordinatesystem.Createaprogramthatmakesthequadcopterflyoverthefourcornerpointsoneaftertheother.Youalreadyknowthenecessarycommandsfromthepreviousexample.hintNotethataftereachnewwaypoint,itisnecessarytowaitsothatthequadcopteralsohastheopportunitytoreachthetarget!Rotatethequadrocopterateachcornerpointsothatitisheadedtowardsthecenterofthesquare.hintNote:Onlyavailableintherespectiveexperimentalconditions.Forconditionswithhighlighting:Youcanclickonwaypointstomarkthecorrespondingplacesinthecode.Forconditionswithdynamiclinking:Waypointsinthepreviewcanbemoveddirectly.TODO:□Determinethecornerpointsofthesquare.□Createaprogramtoflyoffthesquare.□Rotatethequadrocoptertothecenterateachcornerpoint.□Clickon’Save’tosavetheprogram.6Mission2:CommuteBetweenObjects[15min]Untilnow,thewaypointswerefixed,butnowthequadcopterissupposedtoflybackandforthbetween(andabove)thepositionsthewhiteandbluehelmet.Thisallowsthequadcopter’sflighttrajectorytobechangedduringflight.hintThepose()functionisspecialbecauseitreturnsaresult(theposeoftheobjectatthetimeofthecall).Thisresultcontainsseveralcomponents(x,y,z,angle)whichcanbeaccessedbythe’get...of...’blockfromthequadrocopterarea(e.g.getxofpose(’hardhat_blue’)forthex-coordinateofthebluehelmet).Asanalternative,theresultcanalsobecachedandtheindividualcomponentscanbeaccessedlater,i.e.:Tocreateavariable,select’CreateVariable...’andgiveitaname.Matchingprogrampartswillbecreatedtoassignavaluetothevariableandusethevalue.Anynumberofvariablescanbecreatedaslongastheyhaveauniquenamewithoutspecialcharacters.hintRememberthatyoucanoutputvaluestextuallyinthegrayconsoleareawiththe’printout’block.Thisisuseful,forexample,todisplayandcheckintermediateresults.7hintInordertoavoidwritingoutrepeatedlyexecutedcommandseachtime,aloopcanbeused.Thecommandswithintheloopareexecutedasoftenasspecifiedintheloopheader,e.g.hintThepositionofthehelmetcannotbeuseddirectly,ofcourse,becauseitislyingontheground,sothez-coordinateshouldeitherbefixedorplacedabitabovethehelmet.TODO:□Writeaprogramthatdeterminestheposeofthehelmets.□Calculatethewaypointsofthequadcopterfromtheposeofthehelmets.□Writealoopsothatthewaypointsareflowntoagainandagaininturn.□Clickon’Save’tosavetheprogram.8Mission3:DynamicSquare[20min]Nowalittlechallenge:againasquareissupposedtobeflownoff,butthelengthofitssidesissupposedtobedefinedbythedistancebetweenthewhiteandbluehardhats.Forexample,iftheblueandwhitehelmetsare1.63mapart,thelengthofanedgeofthesquareshouldalsobe1.63m.hintOnepointofthesquarecanbefixed,theothercornerpointshavetobecalculatedbasedonthemeasureddistance.hintThedistancebetweentwopointsAandBinspaceisp(xA−xB)2+(yA−yB)2+(zA−zB)2.Correspondingblocksforthemathematicaloperations(e.g.squareroot)canbefoundinthemathsection.hintItisagoodideatoassignthedistancetoavariablefirstinordertobeabletouseitseveraltimes.hintTrytosolvethetwoproblems(calculatingdistanceandmakingtheedgelengthofthesquarevariable)separately:theverticescanbecalculateddependingonavariablethatisassignedafixedvalueasatest.Onlywhenyouareconfidentthatthecorrectverticesarecalculatedfordifferentdistances,youshouldtrytocalculatethedistancebetweenthehelmetsandusethecalculatedvalue.TODO:□Writeaprogramthatcalculatestheverticesofasquareofvariablesidelength.9□Writeaprogramthatcalculatesthedistancebetweenthehardhats.□Usethecalculateddistancetosetthesidelengthofthesquare.□Clickon’Save’tosavetheprogram.10Appendix B. Typical errors while programming the three missions

In the following, we provide more insights into typical errors while programming the ﬁrst mission.

Based on our evaluation scheme, we analyzed individual errors that occurred.

In general, the

following errors were considered in the evaluation scheme:

• quadcopter is ﬂying (z > 0)

• creating 4 waypoints

• waypoints result in a square

• at least 1x change of an angle

• correct angle setting

• each moveTo is followed by a wait or sleep block

Overall, novices could achieve 6 point maximum. Only 8 of 82 scored 3 points or below in the ﬁrst

mission (see Figure B.11).

Figure B.11: Violin plot displaying the point distribution for the ﬁrst mission.

Based on the violin plot displaying the descriptive pattern of the points in the ﬁrst mission for

each experimental group, diﬀerences can be observed between the four experimental groups (see

Figure B.11).

65

no supporthighlights &dynamic linking dynamic linking highlightsPoints for programming mission 1Descriptively, most novices scoring 3 points or lower were found in the control group, followed

by the group with dynamic linking as mapping aid. By analyzing the process data, including

the automatically recorded screenshots during programming the mission, typical errors have been

determined by two independent raters. Around 80 % of the novices scored with 4 points or higher.

Mostly, errors resulting in lower scores occurred based on three of the six evaluation criteria: the

drone does not ﬂy (z = 0), the angles of the waypoints were not manipulated at all, and the angles

were altered but the angle setting was not correct. The last aspect is described as an exemplary,

typical error in the results section (see Section 6.7). The other two typical errors are described in

more detail in the following sections including a descriptive overview along with inferential testing

using logistic regression approaches.

66

Appendix B.1. Quadcopters didn’t ﬂy

We analyzed the typical error not of altering the z-coordinate resulting in a quadcopter that

does not ﬂy. Descriptively, novices in the group with dynamic linking and/or highlights were less

likely to alter the z-coordinate (see Figure B.12). The lowest descriptive probability of not altering

the z-coordinate was found for the experimental group with dynamic linking.

Figure B.12: Pie charts displaying the proportion of drones that didn’t ﬂy (incorrect) and the ﬂying drones (correct)
for each experimental group.

To determine, whether this trend represents a signiﬁcant eﬀect, we conducted a logistic regres-

sion considering respective covariates. Our analysis revealed, that the dynamic linking group had

a signiﬁcant lower probability to adjust the z-coordinate compared to the control group (see Ta-

ble B.4). This ﬁnding might support the idea described in the theory and previous literature, that

the beneﬁcial eﬀect of mapping aids is also dependent of the considered (sub)task.

Table B.4: Coeﬃcients

Estimate

Std. Error Odds Ratio

z Wald Stat.

df

p

Wald Test

(Intercept)
Dyn. linking ∗ highlights
Dynamic linking
Highlights
Figural intelligence
Need for cognition
Prior knowledge

2.343
−0.376
−1.790
−1.038
1.303
−0.007
−0.010

1.650
0.982
0.891
0.918
1.773
0.018
0.016

10.417

1.420
0.687 −0.383
0.167 −2.010
0.354 −1.130
3.682
0.735
0.993 −0.383
0.990 −0.646

2.016
0.147
4.039
1.278
0.540
0.147
0.418

1
1
1
1
1
1
1

0.156
0.702
0.044
0.258
0.462
0.702
0.518

67

204060800/100highlights & dynamic linking204060800/100no support204060800/100dynamic linking204060800/100highlightscorrectincorrectAppendix B.2. No angle adjustment

Next to the described angle setting error in the results section (see Section 6.7), we additionally

analyzed whether the provided mapping aids had an impact on the odds of changing the angle at

least once. Descriptively, in the control group without mapping aids, novices were more likely to

not adjust the angle at all (see Figure B.13).

Figure B.13: Pie charts displaying the proportion of no adaption of the angles (incorrect) and at least once adapted
angles of the drones (correct) for each experimental group.

We tested this typical error for signiﬁcance by using a logistic regression considering diﬀerent

covariates: Signiﬁcant eﬀects of the mapping aids for both mapping aids and the dynamic linking

were found (see Table B.5). Novices in these groups were more likely to adapt the angle at least

once compared to the control group, when the respective covariates were considered.

Table B.5: Coeﬃcients of the logistic regression predicting the chance of at least one angle adaption in mission 1
considering the eﬀect of experimental groups (1-3) against the control group (4)

Estimate

Std. Error Odds Ratio

z Wald Stat.

df

p

Wald Test

(Intercept)
Dyn. linking ∗ highlights
Dynamic linking
Highlights
Figural intelligence
Need for cognition
Prior knowledge

−1.581
2.218
2.351
1.281
0.842
0.026
0.005

1.768
1.152
1.168
0.840
2.120
0.021
0.020

0.206 −0.894
1.925
9.189
2.013
10.495
1.525
3.601
0.397
2.320
1.249
1.026
0.260
1.005

0.800
3.707
4.050
2.327
0.158
1.560
0.067

1
1
1
1
1
1
1

0.371
0.054
0.044
0.127
0.691
0.212
0.795

68

204060800/100204060800/100204060800/100204060800/100highlights & dynamic linkingno supportdynamic linkinghighlightscorrectincorrectEthics Statement. The study was carried out in accordance with the Declaration of Helsinki. Ethical

review and approval was not required for the study on human participants in accordance with the

local legislation and institutional requirements. The participants provided their written informed

consent to participate in this study. Data was used pseudonymously and participants were aware

that they had the chance to withdraw their data at any point of the study.

Author Contributions - CRediT (Contributor Roles Taxonomy). TW and AV developed the initial

design of the study (Conceptualization) which was feed backed by TS and MT (Supervision). AV

and TW developed the missions and the study speciﬁc questions (learning outcome, prior knowledge

etc.; Methodology). TW implemented the PLE and managed the technical infrastructure (Software;

Visualization). AV led the data collection for the study (Investigation). AV and TW analyzed and

interpreted the data (Formal analysis). AV and TW drafted the work (Writing – Original Draft),

which was revised critically by MT and TS (Writing - Review & Editing). All authors provided

approval of the ﬁnal submitted version of the manuscript and agree to be accountable for all aspects

of the work in ensuring that questions related to the accuracy or integrity of any part of the work

are appropriately investigated and resolved.

69

