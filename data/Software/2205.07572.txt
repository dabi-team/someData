2
2
0
2

n
u
J

7

]

A
N
.
h
t
a
m

[

2
v
2
7
5
7
0
.
5
0
2
2
:
v
i
X
r
a

The Cartesian Grid Active Flux Method with Adaptive Mesh
Reﬁnement ∗

Donna Calhoun†

Erik Chudzik‡§

Christiane Helzel‡¶

Abstract

We present the ﬁrst implementation of the Active Flux method on adaptively reﬁned

Cartesian grids.

The Active Flux method is a third order accurate ﬁnite volume method for hyperbolic
conservation laws, which is based on the use of point values as well as cell average values
of the conserved quantities. The resulting method has a compact stencil in space and time
and good stability properties.

The method is implemented as a new solver in ForestClaw, a software for parallel
adaptive mesh reﬁnement of patch-based solvers. On each Cartesian grid patch the single
grid Active Flux method can be applied. The exchange of data between grid patches is
organised via ghost cells. The local stencil in space and time and the availability of the
point values that are used for the reconstruction, leads to an eﬃcient implementation. The
resulting method is third order accurate, conservative and allows the use of subcycling in
time.

Keywords: Cartesian Grid Active Flux Method, Hyperbolic Conservation Laws, Adaptive

Mesh Reﬁnement

AMS subject classiﬁcation: 65M08, 65M25, 65M50

1

Introduction

The Active Flux method is a ﬁnite volume method for hyperbolic conservation laws that was
previously introduced by Eymann, Roe and coauthors [11, 12, 13, 18, 20]. In its original form
the method is third order accurate. This is achieved by using a continuous, piecewise quadratic
reconstruction and a suﬃciently accurate quadrature rule to compute numerical ﬂuxes. The
quadrature method, i.e. typically Simpson’s rule, requires point values of the conserved quanti-
ties at grid cell interfaces at the current time as well as at later time levels. These point values

∗This work was funded by the Deutsche Forschungsgemeinschaft (DFG, German Research Foundation) -
325695158. Furthermore, research was supported by a subcontract with Boise State University, Boise, ID, under
DARPA Cooperative Agreement HR00112120003 with Embry-Riddle Aeronautical University, Daytona Beach,
FL, USA. This work is approved for public release; distribution is unlimited. The content of the information
does not necessarily reﬂect the position or the policy of the Government, and no oﬃcial endorsement should be
inferred.

†Department of Mathematics, Boise State University, Boise, ID, USA; donnacalhoun@boisestate.edu
‡Institute of Mathematics, Heinrich-Heine-University D¨usseldorf, Germany
§Erik.Chudzik@hhu.de
¶Christiane.Helzel@hhu.de (corresponding author)

1

 
 
 
 
 
 
together with the cell average value are also used to compute the reconstruction. While classi-
cal ﬁnite volume methods only use cell average values of the conserved quantities as degrees of
freedom, the Active Flux method involves both point values and cell average values degrees of
freedom. This adds ﬂexibility to the numerical method. For linear advection and the acoustic
equations in one, two or three spatial dimensions, these point values can be updated using
exact evolution formulas, making the method truly multidimensional.

Originally, Roe and Eymann [13] used unstructured triangular grids for their two-dimensional

active ﬂux method. In [2] and [14], two-dimensional Cartesian grid versions of the active ﬂux
method were introduced. The Cartesian grid method will also be used in this paper and brieﬂy
reviewed in the next section.

While the order of convergence of a numerical scheme is a property that can be shown
in the limit when the mesh width and the time step goes to zero, for practical computations
it is desirable to obtain accurate results on relatively coarse grids. Roe [19] argues that the
accurate approximation on coarse grids is strongly inﬂuenced by the computational stencil
and that exact evolution operators perform well in this respect. Barsukow showed that the
two-dimensional Cartesian grid Active Flux method for the acoustic equations with an exact
evolution operator as described in [1] is stationary preserving. This means that the numerical
scheme does not add dissipation to discrete representations of all stationary states of the
acoustic equations. As a consequence such states can be computed with very high accuracy
on coarse grids, while other methods would require a much higher resolution.

In earlier related work, Luk´aˇcov´a-Medvid’ov´a et al.

[16, 17], use exact multidimensional
evolution operators as building blocks of ﬁnite volume methods of various order. Those meth-
ods diﬀer from the Active Flux method mainly in the choice of the degrees of freedom.

Although the Active Flux method performs well on coarse grids, for practical applications
it might still be desirable to vary the size of the grid cells adaptively in order to allow a higher
resolution in parts of the computational domain as needed. A possible application that could
beneﬁt from local reﬁnement is the propagation of a high frequency acoustic wave.

In this paper we show how the Active Flux method can be applied on adaptively reﬁned
Cartesian grids. The local stencil of the method allows an eﬃcient transfer of data between
the diﬀerent grid patches. Our numerical results conﬁrm third order accuracy of the resulting
method.The method is implemented as a new solver in ForestClaw [6, 8, 9].

This paper is organised as follows. In Section 2 we brieﬂy review the Active Flux method
for two-dimensional Cartesian grids. Section 3 describes the extension to adaptively reﬁned
grids. In Section 4 we introduce new Active Flux methods for advective transport and illustrate
the performance of the adaptively reﬁned Active Flux method for a variety of test problems.

2 The Cartesian grid Active Flux Method

In this section we provide a brief review of the Active Flux method on a single two-dimensional
Cartesian grid. More details can be found in Barsukow et al. [2] and Helzel et al. [14].

We consider hyperbolic conservation laws in divergence form

∂tq + ∂xf (q) + ∂yg(q) = 0,

R+

Rs are vector valued
Rs is a vector of conserved quantities and f, g : Rs
where q : R2
ﬂux functions. On a single patch we use a two-dimensional Cartesian grid with equidistant mesh
Z.
sizes ∆x and ∆y. The grid cell (i, j) is described by [xi

R2, i, j,

, yj+ 1

, xi+ 1

[yj

→

→

×

]

]

1
2

−

2

×

1
2

−

2

⊂

∈

2

As a ﬁnite volume method, the Active Flux method computes cell averaged values of the
conserved quantities via an update of the form

Qn+1

i,j = Qn

i,j −

(cid:16)

∆t
∆x

Fi+ 1

2 ,j −

Fi

1
2 ,j

−

(cid:17)

(cid:16)

∆t
∆y

−

Gi,j+ 1

2 −

Gi,j

1
2

−

(cid:17)

,

(1)

where Qn
cell (i, j) at time tn and Fi

i,j is an approximation of the cell average values of the conserved quantities in grid
are numerical ﬂuxes at the grid cell interfaces given by

1

2 ,j, Gi,j

1
2

±

±

Fi+ 1

2 ,j ≈

Gi,j+ 1

2 ≈

1
∆t∆y

1
∆t∆x

(cid:90) tn+1

(cid:90) yj+ 1

2

tn

(cid:90) tn+1

yj− 1
2
(cid:90) xi+ 1

2

tn

xi− 1
2

f (q(xi+ 1

2

, y, t))dy dt

g(q(x, yj+ 1

2

, t))dx dt.

As suggested by Eymann and Roe, we use Simpson’s rule to compute the numerical ﬂuxes.
For ﬂuxes Fi+ 1

2 ,j, this leads to the formula

Fi+ 1

2 ,j :=

(cid:16)

1
36

f (Qn

i+ 1

2 ,j

+ 4f (Q

n+ 1
2
i+ 1
2 ,j

−

+ f (Qn+1
i+ 1
2 ,j

1
2

−

1
2

) + 4f (Qn

1
2

−
) + 16f (Q

) + 4f (Qn+1
i+ 1
2 ,j

)

2 ,j+ 1

2

2 ,j) + f (Qn
i+ 1
n+ 1
2
) + 4f (Q
i+ 1

i+ 1
n+ 1
2
i+ 1
2 ,j
) + f (Qn+1
i+ 1

2 ,j+ 1

2

2 ,j+ 1
(cid:17)

2

)

)

(2)

We use an analogous formula for ﬂux Gi,j+ 1
. The Q values in the right hand side of (2) are
approximations to point values of the conserved quantities at the grid cell interface at times
tn, tn+ 1
and tn+1. To compute these point values, we assume that at time tn the average
i,j and point values at cell corners Qn
values Qn
1
i
2
±
are known. The location of these point values are shown in Figure 1. Based on these known

and edge midpoints Qn
i
±

and Qn
i,j

1
2 ,j

1
2 ,j

±

±

1
2

2

2

Figure 1: Degrees of freedom used to reconstruct the piecewise quadratic function in grid cell
(i, j). Point values are marked by a dot and the cell average is marked by a square.

values, a two-dimensional quadratic polynomial can be reconstructed in each grid cell. For
1, 1]. In each cell,
simplicity, all Cartesian grid cells are mapped to a reference cell [
the reconstruction has the form

[
−

1, 1]

×

−

qrec(ξ, η) = c00 + c10ξ + c01η + c20ξ2 + c11ξη + c02η2 + c21ξ2η + c12ξη2 + c22ξ2η2

(3)

3

Qi−12,j−12Qi,j−12Qi+12,j−12Qi+12,j+12Qi,j+12Qi−12,j+12Qi−12,jQi+12,jQi,jR, i, j = 0, 1, 2 and (ξ, η)

1, 1]. The precise form of the reconstructed
with cij ∈
×
function is obtained by interpolating the eight known point values along the grid cell boundary
and by requiring that the average of the reconstructed function agrees in each grid cell with the
known cell average. This can conveniently be obtained by using appropriate basis functions as
introduced in [14].

[
−

[
−

1, 1]

∈

We denote the (at time tn) reconstructed continuous, piecewise quadratic function by
qn(x, y). The quadratic polynomial that was reconstructed in grid cell (i, j) is denoted by
qn
ij(x, y).

For special linear partial diﬀerential equations, the required point values of the conserved
quantities can be calculated using an exact evolution formula applied to the piecewise quadratic
data. This is in particular the case for linear advection and acoustics. The use of the exact
evolution formula leads to a truly multidimensional numerical method. While the point values
at time tn+ 1
are only used in order to compute the numerical ﬂuxes, the point values at time
tn+1 are also used to compute the continuous, piecewise quadratic reconstruction qn+1(x, y),
which provides the initial data for the next time step.

2

Since the point values are located along the grid cell boundaries, they are used for the
reconstruction in two or four grid cells. Thus, the Active Flux method for two-dimensional
Cartesian grids has four degrees of freedom per grid cell: the cell average plus three point
values along the grid cell boundary. In our implementation, we associate point values Qi
2 ,j,
Qi

and the average value Qi,j with grid cell (i, j).

, Qi,j

−

1

1
2 ,j

1
2

−

−

1
2

−

2.1 Advection equation

For the advection equation

∂tq + a∂xq + b∂yq = 0,

(4)

with q : R2

R+

×

→

R, a, b

∈

R, the exact evolution formula has the form

q(x, y, t + τ ) = q(x

aτ, y

−

−

bτ, t).

Thus, the required point values at time tn+ 1
and tn+1 can easily be computed by evaluating
the continuous, piecewise quadratic function qn at the appropriate upwind points, for example

2

Q

n+ 1
2
i+ 1
2 ,j
Qn+1
i+ 1
2 ,j

1
2

1
2

−

−

(cid:18)

= qn
= qn (cid:16)

xi+ 1

2 −

a

∆t
2

, yj

b

1
2 −

−

xi+ 1

2 −

a∆t, yj

1
2 −

−

b∆t

(cid:19)

∆t
2
(cid:17)

.

(5)

In the numerical method, we want to restrict the time steps, so that waves propagate at

most one grid cell per time step. This can be expressed in the form

CFL := max

(cid:18)

(cid:19)

a
∆t
|
|
∆x

b
∆t
, |
|
∆y

1.

≤

(6)

We have shown in [10] that linear stability requires a more severe time step restriction. In
practical computations we therefore use time steps which satisfy CFL

0.75.

In Section 4.1 the approach is extended to advective transport in a spatially and temporally

≤

varying velocity ﬁeld.

4

2.2 Burgers’ equation

For the two-dimensional Burgers’ equation

qt +

(cid:19)

q2

+

(cid:18) 1
2

(cid:18) 1
2

(cid:19)

q2

= 0

(7)

with q : R2
the point values using an approximative approach described in [10].

R+

→

×

y
R, we do not have an exact evolution formula. Instead we approximate

x

For smooth solutions, equation (7) can equivalently be written in the advective form

which suggests the implicitly deﬁned evolution formula

qt + qqx + qqy = 0,

Starting with an initial guess

q(x, y, t) = q(x

q(x, y, t)t, y

−

−

q(x, y, t)t, 0).

we iteratively compute
(cid:32)

(cid:19)(cid:96)

(cid:18)

n+ 1
2
Q
1
i
2 ,j

−

= qn

xi

1
2 −

−

(cid:18)

n+ 1
2
Q
1
2 ,j
i

−

(cid:19)0

,

(cid:18)

Qn+1
1
i
2 ,j
−

(cid:19)0

,

(cid:18)

Q

n+ 1
2
1
i
2 ,j

−

(cid:19)(cid:96)

−

1 ∆t
2

, yj −

(cid:18)

Q

n+ 1
2
1
i
2 ,j

−

(cid:19)(cid:96)

−

1 ∆t
2

(cid:33)

(cid:18)

Qn+1
1
2 ,j
i
−

(cid:19)(cid:96)

= qn

(cid:32)

xi

1
2 −

−

(cid:19)(cid:96)

−

1

(cid:18)

Qn+1
1
i
2 ,j
−

∆t, yj −

(cid:19)(cid:96)

−

1

(cid:18)

Qn+1
1
i
2 ,j
−

(cid:33)

∆t

(cid:96) = 1, 2, . . . .

(8)

(9)

(10)

Wave speeds at other positions are computed analogously. Each iteration improves the accuracy
by one order. We start the iteration with a ﬁrst order accurate approximation. The piecewise
quadratic reconstruction limits the achievable accuracy to third order. Thus, a third order
accurate approximation can be achieved after two iterations.

An obvious initial guess would be to use the point values at the respective location, i.e.

(cid:18)

n+ 1
2
Q
1
2 ,j
i

−

(cid:19)0

=

(cid:18)

Qn+1
1
i
2 ,j
−

(cid:19)0

= Qn
i
−

1
2 ,j

and analogously for all other point values along the grid cell boundaries. These wave speeds
are third order accurate in space and ﬁrst order accurate in time. However, this choice suﬀers
from an instability, if the characteristic speed changes sign as explained in detail in [14]. The
instability can be mitigated if data from all adjacent grid cells are used to compute the initial
guess. This leads to a stronger coupling of wave speeds and cell average values. Here, we
compute the initial guess of the wave speed based on the neighboring cell average values, i.e.
we use

(cid:18)

(cid:18)

n+ 1
2
Q
1
2 ,j
i

−

Q

n+ 1
2
1
i
2 ,j
(cid:18)

−

Q

1
2

1
2

−
n+ 1
2
i,j

−

(cid:19)0

(cid:18)

=

(cid:19)0

(cid:18)

=

(cid:19)0

(cid:18)

=

(cid:19)0

1
2
−
(cid:19)0

=

(cid:19)0

=

Qn+1
1
2 ,j
i
−

Qn+1
1
i
2 ,j
−

Qn+1
i,j
−

1
2

1
2

(cid:0)Qn
i
−

1,j + Qn
i,j

(cid:1)

1
4

(cid:0)Qn
i
−

1,j + Qn

i,j + Qn
i
−

1,j

−

1 + Qn
i,j

(cid:1)

1

−

(cid:0)Qn

i,j + Qn
i,j

(cid:1) .

1

−

=

1
2

The slight increase of the stencil, as introduced by this initial guess of the wave speeds, leads
to a stable approximation.

5

2.3 Acoustics

The acoustic equations are given by

∂tp + c

∇ ·
∂tu + c

u = 0
p = 0,

∇

R+
where u : R2
the speed of sound.

×

→

R2 is the velocity vector, p : R2

R+

×

→

R is the pressure and c

(11)

R+ is

∈

The evolution formula for the two-dimensional acoustic equations used in this paper can

be found in [13]. It is based on the observation that (11) can be rewritten as

∂ttp
∂ttu

−

c2∆p = 0
c2∆u = c2

w,

(12)

∇×

u is the vorticity and

−
where w =
is the Laplacian operator. In the two-dimensional case,
uy)T . Thus, in a ﬂow with constant vorticity both pressure
considered here, w = (0, 0, vx −
and velocity satisfy a wave equation. Furthermore, it is easy to verify that the vorticity is
stationary, i.e. in the two-dimensional case the relation ∂t(vx −

Assuming constant vorticity, Eymann and Roe [13] derived the evolution formulas

uy) = 0 holds.

∇ ×

(cid:52)

p(t) = MR{
u(t) = MR{
f
t and MR{

MR{∇ ·
p
MR{∇
where R = c
is the spherical mean. The values of pressure and velocity at the
}
right hand side of the evolution equation (13) are given initial values at time t = 0. For a
R, the spherical mean over a disc with radius R, centred at (x, y) is
scalar function f : R2
deﬁned by

p
+ R (∂RMR{
} −
u
+ R (∂RMR{

)
}
) ,
}

p
}
u
}

(13)

} −

→

·

u

f

MR{

(x, y) :=
}

1
2πR

(cid:90) 2π

(cid:90) R

0

0

f (x + s cos φ, y + s sin φ)

s
√R2

−

dsdφ.

s2

(14)

In the vector valued case, the formula is applied component wise. The solution formula can
be evaluated exactly, if during each time step the previous values of pressure and velocity are
replaced by the corresponding components of the reconstructed continuous, piecewise quadratic
function qn.

Each time step of the explicit Active Flux method is restricted so that the circle around
the edge midpoint over which the integration takes place remains inside the two adjacent grid
cells. This condition will be met if

max

(cid:19)

(cid:18) c∆t
∆x

,

c∆t
∆y

1
2

.

≤

(15)

In [10] we showed that this necessary condition is suﬃcient for linear stability on a regular
Cartesian grid.

3 Adaptive Mesh Reﬁnement for the Active Flux Method

We now describe the implementation of the adaptive Active Flux method as a new solver in
ForestClaw [6], a software for parallel adaptive mesh reﬁnement based on a quadtree approach.

6

In ForestClaw, Cartesian grid patches occupy quadrants in a quadtree, or multi-block forest of
quadtrees. ForestClaw was developed by Calhoun and Burstedde based on the p4est software
[7].

Mesh reﬁnement is realised by a bisection of grid patches so that a quadrant of resolution
level (cid:96) is replaced by four quadrants of resolution level (cid:96) + 1. A patch of level zero would
correspond to a single Cartesian grid discretizing a single, square domain. The number of grid
cells on a single quadrant is constant for all levels, resulting in a 2:1 reﬁnement ratio between
32 grid cells are used on a single patch, which
resolution levels. Typically 8
×
allows a ﬂexible change of the resolution. Furthermore, single grid patches can eﬃciently be
handled by separate processors in a parallel computation. Figure 2 shows a typical situation.

16 or 32

8, 16

×

×

Figure 2:
Three reﬁnement levels of quadrants of a ForestClaw mesh are shown. Each
8 in the ﬁgure).
quadrant is occupied by a logically Cartesian grid of ﬁxed resolution (e.g. 8
Each grid also contains a layer of ghost cells (shaded region) which are used to facilitate the
exchange of data between adjacent grid patches and between local and remote processors.

×

A ForestClaw mesh inherits many properties from the underlying p4est mesh [7]. In partic-
ular, a ForestClaw mesh is well-balanced so that adjacent quadrants never diﬀer by more than
one level. This is a necessary condition for the deﬁnition of data transfer between diﬀerent
patches, which is organized using ghost cells and described in more detail below. Another key
feature of the ForestClaw mesh is that it is dynamically adapted to follow solution features of
interest. At each time step, we apply coarsening and reﬁnement criteria to the solution on each
quadrant. If the coarsening criteria is satisﬁed by the solution in each quadrant in a family of
four quadrants, the four quadrants will be replaced by a single quadrant, and the solution will
be averaged from the ﬁner grids to the new coarser solution. Otherwise, if the solution on a
quadrant satisﬁes the reﬁnement criteria, the quadrant will be subdivided into four quadrants,
and the solution will be interpolated from the coarse parent to the new ﬁner resolution solution
on each of the child quadrants. The details of the interpolation and averaging are provided
next.

3.1 Spatial transfer of grid cell information

Solution data in a composite ForestClaw mesh needs to be communicated between adjacent
grids sharing quadrant boundaries, and when dynamically coarsening and reﬁning the mesh.
The Active Flux method allows a very eﬃcient transfer of both pointwise and cell-average
information. In the following, a ”grid patch” is both the p4est quadrant and the solution data
in the quadrant. The following three situations need to be considered:

1. A transfer from a ﬁne grid to a coarse grid is needed if four grid patches at level

7

Parallel,multiblockAMR3Fig.2.2.Three8⇥8computationalgridsshowninlevels` 1,`and`+1.Solutiondataineachgridarestoredincontiguous12⇥12arraysof82interiormeshcells(showninwhite)andtwolayersofghostcells(showninshadedregions).Theinteriorregionsofthegridsinaquadtreelayoutdonotoverlapandsoformapartitionofthecomputationaldomain.Thicklinesindicatequadrant(grid)boundaries.ghostcellregions,sothatagridwith82interiorcellsandtwolayersofghostcellsstoressolutiondatainacontiguousarrayof12⇥12meshcells(withoneormoreﬁeldspergridcell).Theinteriorsofcomputationalgridsdonotoverlap,buttheghostcellregionofonegridwilloverlapwiththeinteriorofitsface-adjacentandcorneradjacentneighbors.InaForestClaw,valuesfortheinteriordimensionsandnumberofghostcelllayersarethesameforallgrids,e↵ectivelyenforcingaconstant2:1reﬁnementratiobetweengridlevels.Theresolutionofaparticulargridisdeterminedbythesizeofthequadrantitoccupies,soagridoccupyingalevel`quadranthas2`timestheresolutionofthesamegridinalevel0quadrant.Informallywewillreferto“quadrants”and“grids”interchangeably.Finegridsarethosethatoccupyquadrantsathigherlevels;coarsegridsoccupyquadrantsatlevelswithnumericvaluescloserto0.Agridcanbebotha“coarse”gridanda“ﬁnegrid,dependingonthecontext.Whendescribingnumericalschemes,itwillalsobeconvenienttorefertothebordersurroundingtheinteriorgridcells(i.e.thequadrantboundaries)asthegridboundary,eventhoughthisboundarydoesnotenclosetheghostcellregions.Thisboundaryconsistsoffouredgesseparatingtheinteriorgridcellsfromtheexteriorghostcellcellregions.Andwhenthecontextisclear,the“size”ofagridshouldbelooselyunderstoodtomeanthesizeofthequadrantoccupiedbythatgrid,althoughtherewillalsobeoccasiontodescribeagridusingits(ﬁxed)interiordimensions,e.g.an8⇥8grid.Itisalsoinformallyunderstoodthattheuseoftheterm“grid”oftenreferstothecontiguousarrayofsolutionvaluesassociatedwiththegrid,andnotjustthegeometricmetadataneededtodescribethegrid.Inthiscontext,a“coarsegridsolution”ora“ﬁnegridsolution”isthesolutiononacoarserorﬁnergrid.InthecurrentversionofForestClaw,westoregrids(andsolutionvalues)onlyforthosequadrantsthatmakeuptheﬁnalpartitioningofthedomain.If,duringreﬁnement,acoarsequadrantissubdividedintofourﬁnerquadrants,thestorageforthecoarsegridsolutionandanycoarsegridmetadataisdeletedandstorageforaﬁnergridisallocatedineachofthefourﬁnerquadrants.SeeFigure2.2foranillustrationofgridsandquadrants.Thereareseveraladvantagestothetreebasedreﬁnement.One,thenumerical(cid:96) + 1 are coarsened to a single patch at level (cid:96). The same approach is used for the
computation of ghost cell values on a patch of level (cid:96) from a neighbouring patch of level
(cid:96) + 1.

2. A transfer from a coarse grid to a ﬁne grid is needed if a patch of level (cid:96) is
marked for reﬁnement and four patches at level (cid:96) + 1 need to be reconstructed. The same
approach is used for the computation of ghost cell values for a patch at level (cid:96) + 1 from
a neighbouring patch of level (cid:96).

3. For neighbouring grid patches of the same level the ghost cell information is simply copied

from the neighbouring grid patches.

We will now discuss the ﬁrst two approaches in more detail.

Transfer from ﬁne to coarse grids

The degrees of freedom of a coarse grid cell are computed from the degrees of freedom of four
grid cells on the ﬁner level as illustrated in Figure 3. The cell average of the coarse cell is the
average of the four cell average values on the ﬁne grid. The point values are copied from the
point values at the vertices of the ﬁne grid cells.

Figure 3: Illustration of coarsening: The cell average on the coarse grid is the average of the
four average values on the ﬁne grid. The point values are copied from vertices of the ﬁne grid
cells.

Transfer from coarse to ﬁne grids

We use the degrees of freedom of the coarse grid cell to reconstruct a quadratic polynomial
as described in Section 2. This polynomial can be evaluated at all the required point values
along the edges of the ﬁne grid cells. The cell average values of the four ﬁne grid cells are
computed using Simpson’s rule. This requires the additional computation of four point values
on the coarse grid cell at the positions of the centers of the ﬁne grid cells. An illustration is
shown in Figure 4. Since Simpson’s rule is exact for our reconstructed function the sum of the
cell average values on the four ﬁne grid cells agrees with the cell average on the coarse grid cell
exactly. This is a necessary property in order to maintain conservation.

8

AveragemeanvaluesDiscardfacevaluesFigure 4: Illustration of reﬁnement: Point values and cell average values on the four ﬁne grid
cells are computed from the reconstruction of the conserved quantities at the coarse grid cell.

3.2 Subcycling for a local reﬁnement in space and time

In explicit ﬁnite volume methods for hyperbolic conservation laws, the time step is necessarily
restricted by a CFL condition, which requires that the numerical domain of dependence must
contain the true domain of dependence of the partial diﬀerential equations [15].

The Active Flux method has a very compact stencil as explained in Section 2. Thus, for
stability it is necessary to restrict the time step in such a way that information travels at most
through one grid cell. Our results from [10] show that the time step should be restricted by
CFL
0.5 for the two-dimensional
acoustic equations.

0.75 for two-dimensional advection problems and by CFL

≤

≤

On an adaptively reﬁned mesh, the smallest grid cells would typically dictate the time step
restriction for the whole domain. To increase the eﬃciency of the computation, local time
stepping (or ”subcycling”) can be used. In a subcycled computation, several time steps on
more reﬁned patches are taken for one time step on the coarsest grid. Subcycling was included
in the original AMR algorithm by Berger and Oliger [3] and Berger and Colella [4] and is a
standard feature of many AMR codes, including AMRClaw [5], AMReX [21] and many others.
The local stencil of the Active Flux method allows for eﬃcient implementation of subcycling,
which will now be described in more detail.

Subcycling

In order to use subcycling, we reconstruct the solution in two layers of ghost cells surrounding
each patch.

We illustrate the idea for the one-dimensional case but an extension to the two-dimensional
situation is straightforward. Assume a situation with three diﬀerent grid patches as illustrated
in Figure 5. The coarsest grid, denoted as grid 1, has reﬁnement level (cid:96). The grid cells on this

Figure 5:

Illustration of one-dimensional grid interfaces with diﬀerent resolution

part of the domain have length ∆x(cid:96). Our grid 2 has reﬁnement level (cid:96) + 1 and the grid cell
length satisﬁes ∆x(cid:96)+1 = ∆x(cid:96)/2. On the ﬁnest mesh, i.e. grid 3, we have ∆x(cid:96)+2 = ∆x(cid:96)+1/2.
For eﬃciency, we will use a time step ∆t(cid:96) on grid 1, two time steps ∆t(cid:96)+1 = ∆t(cid:96)/2 on grid 2
and four time steps ∆t(cid:96)+2 = ∆t(cid:96)+1/2 = ∆t(cid:96)/4 on grid 3.

9

evaluatereconstructioncomputemeanvaluesstorepointvalues······interface1interface2grid1grid2grid3In the ForestClaw implementation, we start the time stepping on the ﬁnest level grids.
Referring to grids 1,2 and 3 described above, the algorithm proceeds as follows for this three-
level mesh conﬁguration.

1. Advance the solution one step on grid 3 using time step ∆t(cid:96)+2.

2. Recursively advance the solution one step on grid 2 (using time step ∆t(cid:96)+1) and on grid

1 (using time step ∆t(cid:96)).

3. Advance the solution a second step on grid 3.

4. Grids 2 and 3 are now time synchronized and ghost cell data is exchanged between these

levels.

5. Advance the solution a third step on grid 3.

6. Recursively update the solution a second step on level 2

7. Advance the solution a fourth step on grid 3

In each grid advance, the ﬁrst layer of ghost cells is updated along with all interior cells.
These ghost cell values are needed to update interior cells at intermediate time levels (e.g.
ﬁne time levels that do not exist on coarser levels). However, whenever two levels are time
synchronized, the updated ghost cell data is replaced by data averaged or interpolated from
the neighboring ﬁner or coarser grids at the same time level. For those grids at the physical
boundary, physical boundary conditions are used at all time levels. The time step on each grid
uses a stable time step appropriate for that grid. These steps are illustrated in Figure 6.

Figure 6: Subcycling algorithm for advancing three levels (with grids 1, 2 and 3) a single coarse
grid time step of size ∆t(cid:96). The algorithm starts at the lower right by advancing one step on
the ﬁnest level. All arrows of the same color are advanced recursively. The blue shaded boxes
indicate time synchronized levels where ghost exchanges between neighboring grids takes place.
Grids without time synchronized coarse grid neighbors advance by using updated values in an
extra layer of ghost cells.

The key diﬀerence between the subcycling approach described above and the subcycling
described in the original second order ﬁnite volume schemes described by Berger, Oliger and
Colella is that in the Active Flux method, ghost cells at the intermediate time level are not
ﬁlled using time interpolation from neighboring coarser grid cells. Instead we obtain all the
required data directly from previously updated degrees of freedom of the Active Flux method.

10

tt+(∆t)‘+2t+(∆t)‘+1t+(∆t)‘Level‘Level‘+1Level‘+2Global conservation property

To ensure the global conservation property of the method, the ﬂuxes at grid cell interfaces
need to be deﬁned in a unique way. At regular grid cell interfaces the Active Flux method
automatically satisﬁes this conservation property. At interfaces of patches with diﬀerent re-
ﬁnement level, conservation needs to be enforced by some kind of “conservative ﬁx”. We use
the classical approach described by Berger and Colella [4], and update both the coarse and the
ﬁne grid cells using the ﬂuxes that have been computed for the more resolved grid.

4 Numerical results

In this section we show numerical results for advection, advective transport with spatially and
temporally varying velocity ﬁeld, Burgers’ equation and acoustics. We introduce new Active
Flux methods for advective transport problems and discuss the preservation of constant states.
For all computations we use subcycling and the conservative ﬁx described above unless
16 Cartesian grid cells plus ghost cells. Our results

otherwise noted. Each grid patch uses 16
×
conﬁrm third order accuracy of the Active Flux method on adaptively reﬁned grids.

4.1 Convergence study for advection

We consider the advection equation (4) on the domain [0, 1]

[0, 1] with initial condition

×

q(x, y, 0) = H(r(x, y) + r0)

H(r(x, y)

r0),

−
y0)2 and H(r) := (tanh(r/0.02) + 1)/2 with r0 = 0.15 and
where r(x, y) :=
x0 = y0 = 0.5. We use the advection speeds a = 1 and b = 0.5 and time steps which satisfy
CFL = 0.6.

x0)2 + (y

(cid:112)

(x

−

−

−

(16)

Two diﬀerent adaptively reﬁned grids are considered. In the ﬁrst case reﬁnement is allowed
only along the diagonal of the domain as shown in Figure 7 (left plot). In the second case a
qmin > 0.001. In this case the reﬁned grid will follow the solution
patch is reﬁned, if qmax −
structure as shown in Figure 7 (right plot). By comparing the numerical solution with the
exact solution we can measure the error and compute the experimental order of convergence
(EOC). The results are shown in Table 1 for reﬁnement along the diagonal and for dynamic
reﬁnement which follows the solution structure.

Table 1: Error at time t = 1 measured in the 1-norm and convergence rates for the advection
problem with constant reﬁnement along the diagonal (left table) and reﬁnement that resolves
the relevant solution structure (right table).

Level

Error

EOC

Level

Error

EOC

4

5

4-5

5-6

6.46

8.45

5.08

6.61

×

×

×

×

5

6

5

6

10−

10−

10−

10−

—

2.9347

—

2.9414

5

6

3-5

3-6

8.45

1.07

8.47

1.07

×

×

×

×

6

6

6

6

10−

10−

10−

10−

—

2.9865

—

2.9849

11

For the academic test case with reﬁnement along the diagonal, we see that the changes
in the grid structure did not introduce any grid-induced artifacts. The accuracy observed on
the adaptively reﬁned grid is comparable with the accuracy on a regular Cartesian grid on the
coarser level.

If the adaptive mesh follows the solution structure, then the accuracy obtained on the
adaptively reﬁned grid compares well with the accuracy obtained on a regular Cartesian grid
that uses the highest level of reﬁnement in the full domain. These results are shown in Table
6 compares well with
1. The accuracy obtained on the adaptive mesh with levels 3
the accuracy obtained on the grids that are reﬁned uniformly to levels 5 or 6.

5 or 3

−

−

Figure 7: Solutions to (16) with constant reﬁnement along the diagonal (left) and with reﬁne-
ment level 3-6 (right)at time t = 0.1.

4.2 Solid-body rotation

Next we consider the linear advection equation with variable coeﬃcients

∂tq + ∂x(a(x, y)q) + ∂y(b(x, y)q) = 0

(17)

1, 1]

on [
×
function Ψ(x, y) = π

[
−

−

2 (x2 + y2) and obtain

1, 1]. We deﬁne the advection ﬁeld for solid body rotation using the stream-

a(x, y) =
πy,
b(x, y) = ∂xΨ(x, y) = πx.

∂yΨ(x, y) =

−

−

The velocity ﬁeld is divergence free, thus Equation (17) is equivalent to

∂tq + a(x, y)∂xq + b(x, y)∂yq = 0.

(18)

(19)

N agrees with the initial values since the ﬂow
Furthermore, the solution at time t = 2n, n
∈
has simply made n complete rotations. The characteristics satisfy the ordinary diﬀerential
equation

x(cid:48)(t) = a(x(t), y(t))
y(cid:48)(t) = b(x(t), y(t))

12

(20)

with initial values x(0) = x0, y(0) = y0. We are interested in (x(
Those values can be computed using the analytical solution

−

−

τ ), y(

τ )) with τ = ∆t/2, ∆t.

y0 sin(πt) + x0 cos(πt)
x(t) =
y(t) = y0 cos(πt) + x0 sin(πt).

−

(21)

This allows us to evaluate the conserved quantities at all required nodes of Simpson’s quadra-
ture formula by tracing back the characteristics. For the ﬂux Fi+ 1
2 ,j, we use Equation (2) with,
for example,

f (Q

g(Q

n+ 1
2
i+ 1
2 ,j
n+ 1
2
i,j+ 1
2

) = a(xi+ 1

2

, yj)Q

) = b(xi, yj+ 1

2

)Q

n+ 1
2
i+ 1
2 ,j
n+ 1
2
i,j+ 1
2

n+ 1
2
i+ 1
2 ,j

=

πyjQ

−

= πxiQ

n+ 1
2
i,j+ 1
2

and

Q

n+ 1
2
i+ 1
2 ,j

Q

n+ 1
2
i,j+ 1
2

= qn

= qn

(cid:18)

(cid:18)

yj sin

−

(cid:18)

π

−
(cid:18)

(cid:19)

∆t
2

yj+ 1

2

−

sin

π

−

∆t
2

cos

+ xi+ 1
(cid:19)

2

+ xi cos

(cid:19)

(cid:19)

(cid:18)

(cid:18)

∆t
2
∆t
2

π

−

π

−

, yj cos

(cid:18)

π

−
(cid:18)

(cid:19)

∆t
2

, yj+ 1

2

cos

π

−

∆t
2

sin

+ xi+ 1
(cid:19)

2

+ xi sin

(22)

(cid:19)(cid:19)

(cid:19)(cid:19)

(cid:18)

(cid:18)

∆t
2
∆t
2

π

−

π

−

(23)

and analogously for all the other nodes.

We compare numerical solutions of (19) with initial condition (16) using reﬁnement levels
3-6 and 3-7 after a half rotation with the exact solution and compute the error as well as the
EOC. Results are shown in Table 2 (left).

Table 2: Error at time t = 2 measured in the 1-norm and EOC for solid-body rotation (left)
using the approach of Section 4.2 and (right) using the approach of Section 4.3.

Level

Error

EOC

Level

Error

EOC

6

7

3-6

3-7

4.60

5.83

4.67

5.92

×

×

×

×

6

7

6

7

10−

10−

10−

10−

—

2.9807

—

2.9801

6

7

3-6

3-7

5.79

7.35

5.79

7.35

×

×

×

×

6

7

6

7

10−

10−

10−

10−

—

2.9786

—

2.9781

Again, the accuracy of the computations on the adaptively reﬁned grids compares well with
the accuracy obtained on the equidistant grids with highest resolution. Figure 8 shows the
numerical solution with reﬁnement level 3-6 after a half and a full rotation.

Remark 4.1 The Active Flux method for solid body rotation described in Section 4.2 preserves
constant states on regular Cartesian grids.

Proof: We consider constant data at time tn, i.e. q(x, y, tn) = C
values at time tn, tn+ 1

and tn+1 are equal to C and the numerical ﬂuxes have the form

∈

R. Then all the point

2

Fi+ 1

2 ,j =

Gi,j+ 1

2

=

Cπ
6
−
(cid:16)
Cπ
6

(cid:17)

.

+ 4yj + yj+ 1
2
(cid:17)

+ 4xi + xi+ 1

2

(cid:16)

yj

1
2

−

xi

1
2

−

13

Figure 8: Solution to (19) with initial condition (16) after a half (left) and a full rotation
(right).

Thus, the ﬂuxes in the x-direction only depend on y and the ﬂuxes in the y-direction only
depend on x. Consequently, all the ﬂux diﬀerences cancel and the cell average values remain
constant.

(cid:3)

4.3 The swirl ﬂow problem

Now we consider advective transport in a velocity ﬁeld that depends on space and time. For
this case, we use

∂tq + ∂x (a(x, y, t)q) + ∂y (b(x, y, t)q) = 0.

(24)

The velocity ﬁeld is again deﬁned via a stream function, which now has the form

Ψ(x, y, t) =

1
π

sin2(πx)

sin2(πy)

·

cos(πt).

·

We use ﬁnite diﬀerence approximations to compute

a(x, y, t) =

−

b(x, y, t) =

Ψ(x, y + ∆y/2, t)

Ψ(x, y

−
∆y

∆y/2, t)

−

Ψ(x + ∆x/2, y, t)

Ψ(x

−
∆x

∆x/2, y, t)

−

,

.

(25)

We trace the characteristics back in space and time using the classical fourth order accurate
Runge-Kutta method backwards in time.
For the ﬂux computation of Fi+ 1

2 ,j we use the approximation

a(xi+ 1

2

, y, t)q(xi+ 1

2

, y, t)dydt

1
∆t∆y

(cid:90) tn+1

(cid:90) yj+ 1

2

tn

yj− 1
2


(cid:90) tn+1

1
∆t∆y

≈

a(xi+ 1

2

, yj, t)

tn

14



(26)

q(xi+ 1

2

, y, t)dy

 dt

(cid:90) yj+ 1

2

yj− 1
2

and analogously for the ﬂux Gi,j+ 1

2

. Using again Simpson’s rule we obtain

Fi+ 1

2 ,j =

(cid:32)

1
6

1
6

a(xi+ 1

2

, yj, tn)

(cid:16)

·

+ 4Qn

2 ,j + Qn
i+ 1

i+ 1

2 ,j+ 1

2

1
2

−

(cid:17)

Qn

i+ 1

2 ,j
(cid:18)

Q

n+ 1
2
i+ 1
2 ,j

+ 4Q

n+ 1
2
i+ 1
2 ,j

1
2

−

+ Q

n+ 1
2
i+ 1

2 ,j+ 1

2

(cid:19)

(27)

(cid:18)

Qn+1
i+ 1
2 ,j

+ 4Qn+1
i+ 1
2 ,j

1
2

−

+ Qn+1
i+ 1

2 ,j+ 1

2

+

+

4
6

1
6

a(xi+ 1

2

, yj, tn+ 1

2

)

a(xi+ 1

2

, yj, tn+1)

·

·

and

Gi,j+ 1

2

=

(cid:32)

1
6

1
6

b(xi, yj+ 1

2

, tn)

(cid:16)

·

+ 4Qn

i,j+ 1
2

+ Qn

i+ 1

2 ,j+ 1

2

(cid:17)

1

Qn
2 ,j+ 1
i
−
(cid:18)

2

+

+

4
6

1
6

b(xi, yj+ 1

2

, tn+ 1

2

)

b(xi, yj+ 1

2

, tn+1)

(cid:18)

·

·

Q

n+ 1
2
1
i

−

2 ,j+ 1

2

+ 4Q

n+ 1
2
i,j+ 1
2

+ Q

n+ 1
2
i+ 1

2 ,j+ 1

2

Qn+1
i
−

1

2 ,j+ 1

2

+ 4Qn+1
i,j+ 1
2

+ Qn+1
i+ 1

2 ,j+ 1

2

(cid:19) (cid:33)
.

(cid:19) (cid:33)

(cid:19)

(28)

Theorem 4.2 The Active Flux method with ﬂuxes of the form (27), (28) and a, b as deﬁned
in (25), provides a method for (24) that preserves constant states on regular Cartesian grids.

Proof: We consider constant data at time tn, i.e. q(x, y, tn) = C
values at time tn, tn+ 1
also equal to C. The ﬁnite volume update now reduces to

R. Then all the point
and tn+1, which are obtained by tracing back the characteristics, are

∈

2

Qn+1

i,j = Qn

i,j −

(cid:16)

∆t
∆x

C
6

a(xi+ 1

2

, yj, tn) + 4a(xi+ 1

2

, yj, tn+ 1

2

) + a(xi+ 1

2

, yj, tn+1)
(cid:17)

, yj, tn+1)

∆t
∆y

−

−
C
6

−

a(xi
(cid:16)

−
b(xi, yj+ 1

, yj, tn)

1
2

4a(xi

1
2

−

−

, yj, tn+ 1

2

)

−

a(xi

1
2

, tn) + 4b(xi, yj+ 1

2

, tn+ 1

2

2

−
) + b(xi, yj+ 1

2

tn+1)

b(xi, yj

, tn)

1
2

−

−

4b(xi, yj

, tn+ 1

2

1
2

)

−

−

b(xi, yj

1
2

−

(cid:17)

, tn+1)

.

For the terms at time level tn we obtain

(cid:16)

C∆t
6∆x

a(xi+ 1
(cid:16)

2

C∆t
6∆x∆y
C∆t
6∆y∆x

−

=

−

−
= 0

, yj, tn)

a(xi

1
2

−

−

(cid:17)

, yj, tn)

(cid:16)

C∆t
6∆y

−

b(xi, yj+ 1

2

, tn)

b(xi, yj

, tn)

1
2

−

−

(cid:17)

Ψ(xi+ 1

2

, yj+ 1

2

, tn) + Ψ(xi+ 1

2

, yj

1
2

−

, tn) + Ψ(xi

, yj+ 1

2

1
2

, tn)

Ψ(xi

, yj

1
2

1
2

−

−

−

−

(cid:17)

, tn)

−

(cid:16)

Ψ(xi+ 1

2

, yj+ 1

2

, tn)

Ψ(xi

−

−

, yj+ 1

2

1
2

, tn)

−

Ψ(xi+ 1

2

, yj

1
2

−

, tn) + Ψ(xi

, yj+ 1

2

1
2

−

(cid:17)

, tn)

In the same way the terms at time tn+ 1
all i, j.

2

and tn+1 cancel and we obtain Qn+1

i,j = Qn

i,j = C for

(cid:3)

15

Figure 9: Coarse grid cell with neighboring ﬁne grid cells.

Now we consider Cartesian grids with adaptive mesh reﬁnement. Without loss of generality
we restrict considerations to the situation shown in Figure 9. We again consider constant data
at time tn, i.e. q(x, y, tn) = C. The update of the small grid cells preserves by Theorem 4.2
constant states. For the large cell update, the left ﬂux Fi
2 ,j is the sum of two ﬂuxes used to
update the two small cells, i.e.

−

1

Ψ(xi

, yj+ 1

2

1
2

−

4

Ψ(xi

, yj, tn+ 1

2

1
2

−

Ψ(xi

, yj+ 1

2

1
2

−

Ψ(xi

1
2

−

, yj, tn+1)

(cid:105)

(cid:17)

1

2 ,j+ 1

4

(cid:16)

C

1
2
1
2

1
4

Fi
1
2 ,j
−
(cid:16)
(cid:104) 1
6

−
a(xi
(cid:16)

+ Fi

−
, yj

1
2

−
a(xi
−
Ψ(xi

1
2

1
2

−

1
4

, tn) + 4a(xi

−
, yj+ 1
4
, yj, tn)

−
, tn) + 4a(xi
Ψ(xi

1
4

−
, yj+ 1

1
2

−
, yj

1
2

−

1
2

−

4
, tn)

−
, yj, tn+1)

Ψ(xi

−
∆y/2
)

, tn+ 1

−
2
∆y/2
, tn)

−
∆y/2
, yj

1
2

−

−
∆y
Ψ(xi

Ψ(xi

1
2

−

, yj+ 1

2

Ψ(xi

, yj

1
2

1
2

−

−

Fi

−

1

2 ,j =

=

=

−

−

=

−

+

1
6
(cid:104)

C

1
1
6
2
Ψ(xi

1
2

−

(cid:104)

C

1
6
−
Ψ(xi

−

4

, tn+ 1

2

4

−
Ψ(xi

−
)

−
, tn)

, yj

1
2

, tn+ 1

) + a(xi

2

, yj

1
2

1
4

, tn+1)

(cid:17)

−
) + a(xi
Ψ(xi

−
, yj+ 1
−
, yj, tn+ 1

1
2

4

2

1
2

−

(cid:17) (cid:105)

, tn+1)

)

Ψ(xi

−
∆y/2

, yj

1
2

−

−

, tn+ 1

2

1
2

)

, tn+1)

1
2

−

, yj+ 1

2

1
2

−

, tn)

Ψ(xi

, yj, tn)

1
2

−

−
∆y/2
, tn+1)

−
∆y/2

, yj+ 1

2

, tn+ 1

2

1
2

)

−
∆y

, yj

1
2

−

−

, tn+ 1

2

1
2

)

Ψ(xi

, yj+ 1

2

1
2

−

−

, tn+1)

Ψ(xi

, yj

1
2

1
2

−

−

, tn+1)

(cid:105)

−
∆y

= C

(cid:16)

1
6

a(xi

1
2

−

, yj, tn) + 4a(xi

1
2

−

, yj, tn+ 1

2

) + a(xi

1
2

−

, yj, tn+1)

(cid:17)

.

This is the same ﬂux that would be used on a regular Cartesian grid. Thus, the update of the
small grid cells as well as the update of the coarse grid cells preserve by Theorem 4.2 constant
states. We summarize our result.

Corollary 4.3 The Active Flux method described above preserves constant states on Cartesian
grids with adaptive mesh reﬁnement when used with global time stepping (e.g. no subcycling).

With subcycling, the sum of the ﬂuxes from the ﬁne grid cells and that is used to update the
coarse grid cell would contain components at the intermediate time that are in general not
balanced by the remaining coarse grid ﬂuxes.

16

i−12i+12j−12j+12jj+14j−14∆y2To perform a numerical convergence study, we consider smooth initial values of the form

q(x, y, 0) = exp(

−
on the domain [0, 1]

100((x

0.5)2 + (y

0.25)2)) + exp(

100((x

0.5)2 + (y

0.75)2))

(29)

−

−
[0, 1] with periodic boundary conditions. Numerical results are shown

−

−

−

×

Figure 10: Solution of the swirl problem with initial data of the form (29) at times t = 0 (left),
t = 0.5 (middle) and t = 1 (right) for the swirl problem with smooth initial condition.

in Figure 10 and the results of a convergence study with and without subcycling is shown in
Table 3. The results again conﬁrm third order convergence. The use of subcycling did not
signiﬁcantly inﬂuence the accuracy.

Table 3: Error at time t = 1 measured in the 1-norm and EOC for the smooth swirl problem
(left) with subcycling, (right) without subcycling.

Level

Error

EOC

Level

Error

EOC

4

5

3-4

3-5

5.72

7.27

5.76

7.35

×

×

×

×

6

7

6

7

10−

10−

10−

10−

—

2.9771

—

2.9705

4

5

3-4

3-5

5.72

7.27

5.72

7.31

×

×

×

×

6

7

6

7

10−

10−

10−

10−

—

2.9771

—

2.9703

To measure the error in the approximation of constant states by using subcycling, we
compute the solution at time t = 1 using the same velocity ﬁeld but with constant initial
4 is used along
values that are equal to one in the whole domain. Reﬁnement with levels 3
13.
the diagonal as shown in Figure 7 (left). With subcycling we observe an error of size 10−
16, i.e. agrees with the expected truncation error.
Without subcycling the error is about 10−

−

We now also consider the swirl problem with piecewise constant initial values of the form



1

q(x, y, 0) =

0

x

0.5

≤
≤
0.5 < x

1


0

≤
on the domain [0, 1]
[0, 1] with periodic boundaries on top and bottom and with zero-order
extrapolation on the left and right boundary using reﬁnement level 3-6. Results are shown

×

17

in Figure 11. Subcycling was used although this slightly perturbs the exact preservation of

Figure 11: Solution of the swirl problem with piecewise constant initial values at times t = 0
(left), t = 0.5 (middle) and t = 1 (right).

constant states.

While the method from Section 4.2 preserves constant states for solid body rotation due to
the special form of the velocity ﬁeld, we can also compute ﬂuxes for solid body rotation using the
more general constant state preserving approach presented in this section. Numerical results
are shown in Table 2 (right). The error is slightly larger, due to the use of the approximation
described in Equation (26), but the method clearly preserves third order accuracy.

4.4 Burgers’ equation

It is straight forward to apply the adaptive Active Flux method to scalar nonlinear hyperbolic
[0, 1] with initial values
problems. We consider the Burgers’ equation (7) on the domain [0, 1]

×

q(x, y, 0) = sin(2πx) sin(2πy) + 0.1.

(30)

To check the accuracy we compute numerical solutions at an early time, here we use
t = 0.05, at which the solution structure is still smooth. The time steps satisfy CFL
0.5.
Furthermore, we use subcycling and the conservative ﬁx. To test the accuracy of the adaptive
method we enforce reﬁnement along the diagonal from the upper left patch to the lower right
patch. This test (not shown here) conﬁrms third order accuracy also for this nonlinear problem.
At later times shocks arise and we therefore also used the bound preserving limiter intro-
duced in [10]. Note that the characteristic speed changes sign which has been observed to
lead to some numerical diﬃculties as explained in [14, 10]. Our unlimited method shows some
unphysical oscillations along the curve where the characteristic speeds changes sign as can be
seen in Figure 12 (top). The use of the bound preserving limiter avoids these inaccuracies. In
this simulation grids on levels 3

5 are used.

≤

As a reﬁnement criteria we search for steep gradients, so a patch is reﬁned, if

−

qi
qi+1,j −
2∆x

1,j

−

≥

15 or

qi,j+1

qi,j+1 −
2∆y

15 ,

≥

for any i, j. We also use the reﬁnement criteria to determine whether we need to apply limiting.

18

Figure 12: Solution to (30) at times t = 0.2 (left), t = 0.6 (middle) and t = 1.0 (right) without
limiter (top) and with limiter (bottom) for reﬁnement level 3

5.

−

4.5 Acoustics

4.5.1 Convergence study for acoustics

In order to investigate the order of convergence of the adaptive Active Flux method for acous-
[16], for which the exact solution is
tics, we consider a test problem from Luk´acˇov´a et al.
explicitly known. In this test problem the acoustic equations (11) with initial values of the
form

1
c

p(x, y, 0) =

−
u(x, y, 0) = 0

v(x, y, 0) = 0

((sin(2πx) + sin(2πy))

(31)

1, 1]
are considered on the domain [
boundary conditions are imposed. The exact solution has the form

[
−

−

×

1, 1]. The speed of sound is set to c = 1 and periodic

p(x, y, t) =

u(x, y, t) =

v(x, y, t) =

−
1
c
1
c

1
c

cos(2πct) (sin(2πx) + sin(2πy))

sin(2πct) cos(2πx)

sin(2πct) cos(2πy).

We compute numerical solutions at time t = 1 using time steps, which satisfy the condition
CFL
0.4. For this smooth solution, adaptive mesh reﬁnement does not really make sense.
However, in order to test the accuracy of the adaptive method, we require reﬁnement along

≤

19

Figure 13: Pressure and grid patches for the acoustics problem from Luk´acˇov´a et al. [16] with
reﬁnement levels 2-3 (left) and 3-4 (right) at t = 1.0.

the diagonal of the domain independently of the solution structure. Each patch is a Cartesian
4 with
grid with 16
results obtained on a uniform grid with level 2 and 3. The results of our convergence study
for pressure and velocity are shown in Table 4.

16 grid cells. We compare grids with reﬁnement level 2

3 and 3

×

−

−

Table 4: Error at time t = 1 measured in

(cid:107) · (cid:107)1-norm and EOC for the Luk´acˇov´a test problem.

Level

Error

EOC

p

×

×

×

×

2.23

2.79

1.64

2.06

4
10−
5

10−

4

5

10−

10−

u, v

2.52

2.65

3.33

3.87

×

×

×

×

5

6

5

6

10−

10−

10−

10−

p

—

u, v

—

2.9975

3.2509

—

—

3.1045

2.8564

2

3

2-3

3-4

The accuracy obtained on the adaptively reﬁned mesh is comparable with the accuracy
obtained on a regular grid which uses the coarser grid in the whole domain. This test shows
that the the accuracy is maintained at the interface between the coarse and the ﬁne grids.

4.5.2 High frequency acoustics

Now we consider a test problem where adaptive mesh reﬁnement allows a more eﬃcient compu-
tation of the solution structure. We consider the acoustic equations (11) with initial condition

p(x, y, 0) = 2 + exp(

100(r(x, y)

−

−

0.5)2)) sin(100r(x, y)), u(x, y, 0) = 0, v(x, y, 0) = 0 (32)

on the domain [
Initially a circular shaped acoustic wave with high
frequency pressure oscillations is given. This leads to acoustic waves moving outwards and

1.5, 1.5].

1.5, 1.5]

[
−

×

−

20

inwards. The inward moving acoustic wave gets reﬂected in the center of the domain (around
the time shown in the third plot) and afterwards propagates outwards. Adaptive mesh re-
ﬁnement is used to resolve these high frequency waves. Figure 14 shows solutions at times
0.001. In
t = 0, 0.3, 0.6, 0.9 with reﬁnement level 3

6. A patch is reﬁned if

pmax −
|

pmin| ≥

−

Figure 14: Plots of pressure of the high frequency acoustic wave at times t = 0.0 (top left),
t = 0.3 (top right), t = 0.6 (bottom left) and t = 0.9 (bottom right). In the bottom left plot
the pressure at the center is much larger and therefore a diﬀerent color map is used to visualize
the solution structure.

Figure 15 shows scatter plots of the solution at two diﬀerent times. There are no visable spu-
rious grid eﬀects apart from some smearing of the solution structure caused by the boundary
of the computational domain. For this simulation periodic boundary conditions were used.

21

Figure 15: Scatter plots of pressure for the high frequency acoustic wave at time t = 0.3 and
t = 0.9.

4.6 Approximation of steady states

Finally, we consider the approximation of a stationary vortex as described by Barsukow et al.
[1, 2]. The initial values have the form

p(r, 0) = 0

u(r) = n






5r

:

0

r

0.2

5r

2

−
0

:

: 0.2 < r

0.4

≤

≤

≤
r > 0.4,

(cid:112)

x2 + y2, n = (

[0, 2π) and u = (u, v)T . In order to test how
with r =
∈
well the method preserves the steady state, we compute the numerical solution at time t = 100.
The AMR computation uses grids of level 3-5 with 16

16 grid cells on each patch.

sin φ, cos φ)T , φ

−

In [1, 2], the authors showed that the Cartesian grid Active Flux method, with the evolution
operator presented in [2], is stationary preserving. The method used here does not have this
property. Nevertheless, the third order accuracy of the Active Flux method together with
adaptive mesh reﬁnement leads to accurate approximations as shown in Figure 16. We also
tested the evolution operator from [2]. While we could conﬁrm the preservation of steady
states on a regular Cartesian grid, using the solver with AMR leads to an instability.

×

Conclusions

We showed that the Active ﬂux method can be used on Cartesian grids with adaptive mesh
reﬁnement and subcycling. The transfer of grid information between diﬀerent Cartesian grid
patches can be implemented without loss of third order accuracy by making use of the degrees
of freedom of the Active Flux method. Our approach beneﬁts from the local stencil of the
Active Flux method.

22

Figure 16: Computation of the stationary vortex at time t = 100 using an adaptively reﬁned
grid of level 3-5. The left plot shows

u
, the right plot shows a scatter plot of
|
|

u
.
|
|

For advective transport, new Active Flux methods have been presented which preserve
constant states on regular Cartesian grids and grids with adaptive mesh reﬁnement without
subcycling. In practical computations with subcycling we also observed good accuracy although
constant states are not exactly preserved.

The AMR concept of the Active Flux method can also be used for two-dimensional linear
hyperbolic systems as illustrated for the acoustic equations. However, the preservation of
steady states, a property that was recently shown for the Active Flux method on regular
Cartesian grids [1], does not carry over to adaptively reﬁned meshes with the approaches
presented in this paper.

Data availability statement

For our implementations we used ForestClaw, which is publicly available on GitHub. We added
the Active Flux method as a new solver in ForestClaw.

References

[1] W. Barsukow. Stationarity preservation properties of the active ﬂux scheme on cartesian

grids. Commun. Appl. Comput., 2020.

[2] W. Barsukow, J. Hohm, C. Klingenberg, and P.L. Roe. The active ﬂux scheme on Carte-

sian grids and its low Mach number limit. J. Sci. Comput., 81(1):594–622, 2019.

[3] Marsha J. Berger and Joe Oliger. Adaptive mesh reﬁnement for hyperbolic partial diﬀer-

ential equations. J. Comput. Phys., 53:484–512, 1984.

[4] M.J. Berger and P. Colella. Local adaptive mesh reﬁnement for shock hydrodynamics. J.

Comput. Phys., 82:484–512, 1984.

[5] M.J. Berger and R.J. LeVeque. Adaptive mesh reﬁnement using wave-propagation algo-

rithms for hyperbolic systems. SIAM J. Numer. Anal., 35:2298–2316, 1998.

23

[6] C. Burstedde, D. Calhoun, K. Mandli, and A.R. Terrel. Forestclaw: Hybrid forest-of-
octrees amr for hyperbolic conservation laws. Parallel Computing: Accelerating Compu-
tational Science and Engineering (CSE), 25:253–262, 2014.

[7] C. Burstedde, L.C. Wilcox, and O. Ghattas. p4est: Scalable algorithms for parallel adap-
tive mesh reﬁnement on forests of octrees. SIAM J. Sci. Comput., 33:1103–1133, 2011.

[8] Donna

and
http://www.forestclaw.org/ForestClaw/index.html.

Calhoun

Carsten

Burstedde.

Forestclaw

software.

[9] Donna Calhoun and Carsten Burstedde. ForestClaw : A parallel algorithm for patch-based

adaptive mesh reﬁnement on a forest of quadtrees. arXiv:1703.03116, 2017.

[10] E. Chudzik, C. Helzel, and D. Kerkmann. The Cartesian grid active ﬂux method: linear
stability and bound preserving limiting. Appl. Math. Comput., 393:125501, 19, 2021.

[11] T.A. Eymann and P.L. Roe. Active Flux Schemes. AIAA 2011-382.

[12] T.A. Eymann and P.L. Roe. Active Flux Schemes for Systems. AIAA 2011-3840.

[13] T.A. Eymann and P.L. Roe. Multidimensional Active Flux Schemes. AIAA Conference

Paper, June 2013.

[14] C. Helzel, D. Kerkmann, and L.Scandurra. A new ADER method inspired by the active

ﬂux method. J. Sci. Comput., 80(3):1463–1497, 2019.

[15] R.J. LeVeque. Finite Volume Methods for Hyperbolic Problems. Cambridge University

Press, 2002.

[16] M. Luk´aˇcov´a-Medvid’ov´a, K.W. Morton, and G. Warnecke. Evolution galerkin methods
for hyperbolic systems in two space dimensions. Mathematics of Computation, 69:1355–
1384, 2000.

[17] M. Luk´aˇcov´a-Medvid’ov´a, J. Saibertov´a, and G. Warnecke. Finite volume evolution
Galerkin methods for nonlinear hyperbolic systems. J. Comput. Phys., 183:533–562, 2002.

[18] P. Roe. Is discontinuous reconstruction really a good idea? J. Sci. Comput., 73(2-3):1094–

1114, 2017.

[19] P. Roe. Designing CFD methods for bandwidth - a physical approach. Computers &

Fluids, 214:104774, 2021.

[20] P.L. Roe, J. Maeng, and D. Fan. Comparing Active Flux and Discontinuous Galerkin

Methods for Compressible Flow. 2018 AIAA Aerospace Science Meeting.

[21] Weiqun Zhang, Ann Almgren, Vince Beckner, John Bell, Johannes Blaschke, Cy Chan,
Marcus Day, Brian Friesen, Kevin Gott, Daniel Graves, Max P. Katz, Andrew Myers,
Tan Nguyen, Andrew Nonaka, Michele Rosso, Samuel Williams, and Michael Zingale.
AMReX: a framework for block-structured adaptive mesh reﬁnement. J. Open Source
Software, 4(37), 2019.

24

