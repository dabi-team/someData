LeXInt: Package for Exponential Integrators employing Leja interpolation

Pranab J. Dekaa,∗, Lukas Einkemmera, Mayya Tokmanb

aDepartment of Mathematics, University of Innsbruck, Innsbruck, 6020, Austria
bSchool of Natural Sciences, University of California, Merced, CA 95343, USA

2
2
0
2

g
u
A
7
1

]

A
N
.
h
t
a
m

[

1
v
9
6
2
8
0
.
8
0
2
2
:
v
i
X
r
a

Abstract

We present a publicly available software for exponential integrators that computes the ϕl(z) functions using poly-
nomial interpolation. The interpolation method at Leja points have recently been shown to be competitive with the
traditionally-used Krylov subspace method. The developed framework facilitates easy adaptation into any Python
software package for time integration.

Keywords: Time Integration, Numerical Methods, Exponential Integrators, Leja Points, Polynomial Interpolation

1. Motivation and signiﬁcance

Time-dependent partial diﬀerential equations (PDEs) are ubiquitous in various ﬁelds in science. Integrating PDEs
in time with high accuracy whilst incurring as little computational cost as possible is highly desirable. Substantial
amount of research has been devoted to the development of numerical algorithms and codes to perform high-resolution
simulations with high ﬁdelity.

Explicit temporal integrators are widely used in many scenarios owing to the simplicity of their algorithm and
implementation. However, as the number of physical processes considered in a certain PDE increases or if the stiﬀ
nature of the underlying PDE becomes prominent, the performance of the explicit integrators is severely deteriorated
owing to the stability constraints. The increase in the stiﬀness of an equation results ever more stringent Courant–
Friedrich–Levy (CFL) time step size limit. Implicit integrators have been widely used as alternatives to the explicit
methods owing to their ability to take large step sizes. They can provide substantial boost to the simulations. In many
practical cases, however, one has to resort to iterative schemes to solve large systems of linear equations. Furthermore,
the use of preconditioners to speed-up the simulations is a common practice in many situations. In some cases, the
simulations fail to converge without the use of a good preconditioner. The complexity involved in such an algorithm
may make them unfavourable for intricate problems.

Exponential integrators are a class of temporal integrators that linearise the underlying PDE - the linear term is
solved exactly (in time) and the nonlinear term is approximated with some explicit methods. An extensive review on
exponential integrators hav been presented by Hockbruck & Ostermann [1]. Let us consider the initial-value problem

where f (u) is some nonlinear function of u. We re-write the above equation as

∂u
∂t

= f (u),

u(t = 0) = u0,

∂u
∂t

= A u + g(u),

where A is a matrix and g(u) is the nonlinear remainder. The solution to this equation is given by

un+1 = un + ϕ1(A∆t) f (un)∆t.

∗Corresponding author
Email addresses: pranab.deka@uibk.ac.at (Pranab J. Deka), lukas.einkemmer@uibk.ac.at (Lukas Einkemmer),

mtokman@ucmerced.edu (Mayya Tokman)

Preprint submitted to SoftwareX

August 18, 2022

 
 
 
 
 
 
This is the ﬁrst-order exponential Euler method. If A is replaced by the Jacobian of f (u) evaluated at the respective
time step, one obtains the Rosenbrock-Euler method, which is of second order. It is to be noted that replacing the linear
part by the Jacobian allows for one to obtain higher-order schemes with fewer internal stages. The ϕl(z) functions are
given by:

where

ϕl+1(z) = 1
z  

ϕl(z) −

1
l! !

,

l ≥ 1

ϕ0(z) = ez

corresponds to the matrix exponential. We compute these ϕl(z) functions, the most expensive part of exponential
integrators, using the method of polynomial interpolation at Leja points. Details on this iterative scheme are provided
in Sec. 2.

Exponential integrators do not suﬀer from any CFL restrictions (unlike explicit integrators), are unconditionally
stable, and can take much larger step sizes than implicit methods. This makes them highly attractive for solving
time-dependent problems. Additionally, one can obtain the exact solution of a linear PDE (subject to the spatial
discretisation) for any given step size. This is an added bonus over the implicit integrators, as they will always incur
some error, irrespective of their order of convergence.

In this paper, we aim to make our tools and contributions available to the scientiﬁc community with the release of
the Leja interpolation for eXponential Integrators (LeXInt; https://github.com/Pranab-JD/LeXInt) package.
This is a cummulation of the algorithms implemented and tested out in our previous work where we studied the per-
formance of an automatic step-size controller for improved computational eﬃciency [2] and analysed the performance
of the Leja method with explicit, implicit, and Krylov-based exponential integrators for the set of magnetohydrody-
namical (MHD) equations [3].

2. Software description

LeXInt comprises of several exponential integrators suited for both constant and variable step size implementa-
tion. The integrators are implemented in a modular format, in essence, any integrator can easily be integrated into
the package and any integrator can be used for any given problem. However, it is to be noted that the performance of
the integrators may vary with the problem under consideration. We primarily focus on integrators that are based on
linearising the underlying PDE by computing the Jacobian at every time step: Exponential Rosenbrock (EXPRB) and
Exponential Propagation Iterative Runge–Kutta (EPIRK) integrators. As already mentioned, these integrators require
fewer stages to achieve a certain order of accuracy owing to the use of the Jacobian and as such, are computationally
more eﬃcient. We have adopted the vertical implementation procedure, proposed by Rainwater & Tokman [4], for
optimised performance. Although this was initially proposed only for the Krylov subspace algorithm, we show, in
Deka et al. [5], that the vertical approach can, very well, result in substantial amount of computational savings for the
Leja interpolation method.

For adaptive step size implementation, one requires an error estimate at every time step. One of the cheapest ways
to compute the error estimate is if it is inherently embedded in the integrator, i.e. an embedded integrator. This is
why we focus only on embedded exponential integrators, where the error estimate does not require additional internal
stages. The list of embedded exponential integrators implemented in LeXInt include EXPRB32 [6, 7, 1], EXPRB43
[6, 7, 1], EXPRB53s3 [8], EXPRB54s4 [8], EPIRK4s3 [9, 10], EPIRK4s3A [4], and EPIRK5P1 [11]. Each of these
integrators have been implemented in LeXInt in a way that the integrator function returns the lower-order and the
higher-order solutions. The diﬀerence between these two solutions yields an estimate of the error incurred. As there
are a multitude of step-size controllers in the literature, we give the user full ﬂexibility in choosing their desired
step-sizing strategy. The function also returns the number of the number of matrix-vector products computed at a
given time step that can be considered as a proxy of the computational cost. For constant step sizes, in addition to the
aforementioned ones, we have implemented Rosenbrock–Euler [12], EXPRB42 [13], EPIRK4s3B [4], and EPIRK5P2
[11]. In cases where the integrators do not possess an embedded error estimator, one can generate an error estimate
using Richardson extrapolation.

2

Polynomial Interpolation at Leja points

One of the crucial aspects of eﬃcient implementation of exponential integrators is an adept iterative scheme.
Whilst the Krylov subspace algorithm has long been proposed as an eﬀective iterative scheme for exponential inte-
grators [14, 15, 16, 1, 11, 17], it does have the drawback of having the need to compute inner products that becomes
a serious impediment on massively parallel structures (GPUs). We choose the method of polynomial interpolation at
Leja points [18, 19, 20] that has been shown to outperform Krylov-based methods [21, 22, 3]. This can be attributed
mainly to the simplicity of the algorithm. One of the minor drawbacks of the Leja interpolation method is that it needs
some approximation of the spectrum. It is to be noted that one needs only a crude estimate of the largest and the
smallest eigenvalue of the matrix (for linear equations) or the Jacobian (for nonlinear equations). Thus, the method of
power iterations can be employed to compute the spectrum every ‘n’ time steps. In Deka & Einkemmer [3], we have
shown this to be an eﬃcient technique for the highly nonlinear MHD equations.

Assuming that we have an estimate of the largest (α) and the smallest (β) eigenvalue (in magnitude), the scaling
and the shifting factors can be deﬁned as c = (α + β)/2 and γ = (β − α)/4, respectively [23]. The factor of 4 emerges
from the fact that we have chosen Leja points (ξ) in the arbitrary domain [−2, 2]. Now, we compute the coeﬃcients
of the polynomial, to be interpolated, using the divided diﬀerences algorithm of exp(c + γξ) or ϕl(c + γξ). Then, we
form the polynomial by adding an additional term at every iteration until the desired accuracy is reached. This can be
mathematically written as

pn(z) = pn−1(z) + dn yn−1(z),

yn(z) = yn−1(z) ×

z − c
γ

− ξn

,

!

where pn(z) is the nth term of the polynomial. We note that the convergence of the algorithm is sensitive to the step
size: if the step size is too large, it can cause the algorithm to diverge. This is prominent only for large tolerances where
a step size controller may allow for extremely large step sizes. Therefore, we adopt a safety measure of checking that
the error incurred does not exceed a certain threshold. Very large values of this error is an indication of impending
divergence of the algorithm. In such a case, we reject the step size and restart the time step with a smaller step size.

LeXInt has two functions for interpolating ϕl(z) on real (‘real Leja phi’) and imaginary (‘imag Leja phi’)
Leja points. To speed-up convergence, it is recommended that if the largest eigenvalue of the Jacobian under consid-
eration is real, one interpolates the exponential-like function on real Leja points, whereas if the largest eigenvalue (in
magnitude) is imaginary, the interpolation is performed on imaginary Leja points. If the magnitude of the largest real
and imaginary eigenvalues are relatively similar, one could interpolate on either real or imaginary Leja points.

To compute the exponential of a matrix, LeXInt provides ‘real Leja exp’ and ‘imag Leja exp’, for inter-
polations on real and imaginary Leja points, respectively. One can compute the exact solution (in time) for linear
equations, which is why the functions for interpolation of the matrix exponential are provided only for constant step
size implementation, i.e., without any error estimate. The desired accuracy can be chosen by the user by tuning the
tolerance.

It is to be noted that LeXInt can work in fully matrix-free structure as well as in any given formulation of the
matrix, provided that one has a well-deﬁned RHS function (this is similar to how one would implement an explicit
method). Obviously, a matrix-free formulation is preferable from the computational viewpoint.

3. Illustrative examples

We show the performance of a selected number of integrators for a couple of problems. These problems have been
drawn from Einkemmer [24] and Deka & Einkemmer [2]. In both these problems, we consider periodic boundary
conditions on [0, 1]. The ﬁrst example is the Burgers’ equation,

where η is the P´eclet number and the initial condition is given by

∂u
∂t

= ∂2u
∂x2

+ η
2

∂u2
∂x

,

u(x, t = 0) = 1 + exp

1 −

1
1 − (2x − 1)2 !

+ 1
2

exp

−

(x − x0)2
2σ2

,

!

3

 
 
 
O(3)

−4

O(4)

10

EXPRB32

EXPRB43

−5

EPIRK4s3A

10

10

r
o
r
r
e
2

−6

l

−7

10

−8

10

−9

10

0.10

0.25

0.50

0.75 1.00

Step Size

Figure 1: Convergence curves of EXPRB32, EXPRB43, and EPIRK4s3A.

with x0 = 0.9 and σ = 0.02. We consider two diﬀerent cases of the resolution, in terms of the number of grid points
(N), η, and the simulation time t f : (a) N = 64, η = 200, t f = 10−3 and (b) N = 256, η = 10, t f = 10−2. The second
example is the Allen-Cahn equation:

The initial conditions are chosen to be

∂u
∂t

= ∂2u
∂x2

+ 100

u − u3

.

(cid:16)

(cid:17)

u(x, t = 0) = A (1 + cos(2πX)),

with A = 0.1. Similar to the previous example, we consider two cases: (c) N = 64, t f = 0.1 and (d) N = 256, t f = 0.1,
where the symbols have the usual meanings.

We show the order of convergence for a selected number of integrators in Fig. 1 for the Burger’s equation with
N = 64 and η = 200. In Figs. 2 and 3, we show the performance of a wide range of EXPRB and EPIRK integrators for
a couple of representative problems with variable step size implementation. Let us clearly state that, here, we do not
investigate the performance of the diﬀerent integrators. We simply show the applicability of the diﬀerent integrators
available in LeXInt.

4. Impact & future aspects

With the ever increasing need for high-resolution large-scale simulations in computational physics, there is a
demand for ever more eﬃcient and enhanced numerical algorithms. Eﬃciently integrating PDEs in time go a long
way in this regard. Exponential integrators have shown remarkable progress and promise in the last couple of decades.
Various classes of exponential integrators have been shown to have superior performance to the traditional implicit and
explicit methods for a wide range of problems usually considered in the mathematical literature. Additionally, their
superiority have also been demonstrated for the MHD problems [25, 17, 3], kinetic plasma simulations [26, 27, 28,
29, 30], atmospheric and meteorological studies [31, 32, 33, 34, 35, 36, 37, 38], and in diﬀerent ﬁelds in engineering
[39, 40, 41, 9, 42, 43, 44].

4

 
−2

10

−3

10

−3

10

EXPRB32

EXPRB32

EXPRB43

10

EXPRB43

−4

EPIRK4 3

EPIRK4 3

EPIRK4 3A

EPIRK4 3A

−5

10

−4

−5

10

10

−6

10

−7

10

−8

10

−2

10

−3

10

−4

−5

10

10

e
c
n
a
r
e
o
T

l

e
c
n
a
r
e
o
T

l

r
o
r
r
e
2

l

−6

10

−7

10

−8

10

−9

10

−10

10

−1

10

0

10

−1

10

0

10

Time ( )

Time ( )

−3

10

−4

10

−5

10

r
o
r
r
e
2

l

−6

10

−6

10

−7

10

EXPRB53s3

EXPRB53s3

−7

10

EXPRB54s4

EXPRB54s4

EPIRK4s3

EPIRK4s3

−8

10

−8

EPIRK5P1

EPIRK5P1

10

−1

10

0

10

−1

10

0

10

Time (s)

Time (s)

Figure 2: Illustration of the computational performance of a few embedded EXPRB and EPIRK integrators as a function of the user-deﬁned
tolerance (left panel) and the l2 norm of the global error incurred (right panel) for the Burgers’ equation. The top and the bottom rows correspond
to cases (a) and (b), respectively.

Computing the exponential of a matrix constitutes a vital element for exponential integrators. Several approaches
have been outlined and the pros and cons of each method have listed in the reviews by Moler and Loan [45, 15]. The
Krylov-subspace algorithm has become increasingly popular over the last few years owing to their ability to treat large
system of matrices eﬀectively. EXPOKIT [14], EXPODE [46], and phipm [47] are some the publicly available Krylov-
based MATLAB software for eﬃciently computing the matrix exponential as well as computing the ϕl(z) functions
for exponential integrators. Further research in this ﬁeld have shown that the method of polynomial interpolation
[48, 22] is highly competitive with, if not better than, the Krylov-based methods. expleja 1 is one of the ﬁrst
Leja-interpolation based MATLAB software that computes the matrix exponential times a vector or a matrix.

With the increasing popularity of exponential integrators in various ﬁelds in computational science, we aim to
provide an accessible framework for an eﬃcient implementation of these methods. Whilst methods like Pad´e ap-
proximation, squaring and scaling, or diagonalising the corresponding matrix and computing the exponential of the
resulting eigenvalues work well for small matrices, these methods become prohibitive for large systems. Libraries
based on (parts of) these methods are already available in Python. We provide a library based on the the Leja poly-

1https://www.mathworks.com/matlabcentral/fileexchange/44039-matrix-exponential-times-a-vector

5

 
 
−2

10

−3

10

EXPRB32

EXPRB32

EXPRB43

−3

10

EXPRB43

EPIRK4s3

EPIRK4s3

EPIRK4s3A

−4

EPIRK4s3A

10

r
o
r
r
e
2

10

−5

l

−6

10

−7

10

−8

10

−1

10

0

10

−1

10

0

10

Time (s)

Time (s)

EXPRB53s3

EXPRB53s3

−1

10

EXPRB54s4

−2

EXPRB54s4

10

EPIRK4s3

EPIRK4s3

EPIRK5P1

−3

10

EPIRK5P1

10

10

−4

−5

r
o
r
r
e
2

l

10

10

−4

−5

−4

−5

10

10

−6

10

−7

10

−8

10

−2

10

−3

10

e
c
n
a
r
e
o
T

l

e
c
n
a
r
e
o
T

l

−6

10

−7

10

−8

10

−6

10

−7

10

−8

10

−1

10

0

10

−1

10

0

10

Time (s)

Time (s)

Figure 3: Illustration of the computational performance of a few embedded EXPRB and EPIRK integrators as a function of the user-deﬁned
tolerance (left panel) and the l2 norm of the global error incurred (right panel) for the Allen-Cahn equation. The top and the bottom rows correspond
to cases (c) and (d), respectively.

nomial interpolation method that is highly favourable for the computation of the exponential-like functions of large
systems of matrices. As part of the software package, we present a multitude of (Leja-based) exponential integrators
(from the literature) for temporal integration of nonlinear PDEs with constant and variable step sizes. The Matlab
version of the Leja interpolation method for exponential integrators has been appended to the Krylov-based EPIC
library. Using EPIC, it has recently been shown by Gaudreault et al. [49], that an algorithm based on incomplete
orthogonalisation of the basis vectors (KIOPS) may help in achieving a reasonable amount of improved performance
over the state-of-the-art phipm algorithm. This publicly available package is maintained by Prof. Mayya Tokman and
can be obtained from https://faculty.ucmerced.edu/mtokman/#software. We have used this package in our
(ongoing) study of performance comparison of the Leja method with the KIOPS algorithm [5].

Our goal of releasing the present package is to provide an eﬀective implementation of the Leja-based method
and to get people started on exploring such a method in a user-friendly environment (i.e. Python). In the future,
we will develop a parallel implementation of LeXInt and include other exponential integrators that are designed
speciﬁcally for parallel computing and potentially for high-performance computing (such as GPUs). LeXInt will
be then implemented as a part of large software packages. As an example, in the near future, this package will be
appended to the PICARD code [50] to solve the time-dependent cosmic-ray transport equation [51].

6

 
 
Acknowledgements

This work is supported, in part, by the Austrian Science Fund (FWF) project id: P32143-N32. We would like to

thank Marco Caliari for providing us with the code to compute Leja points.

References

[1] M. Hochbruck, A. Ostermann, Exponential Integrators, Acta Numer. 19 (2010) 209 – 286. doi:10.1017/S0962492910000048.
[2] P. J. Deka, L. Einkemmer, Eﬃcient adaptive step size control for exponential integrators, Comput. Math. Appl. 123 (2022) 59–74.

doi:10.1016/j.camwa.2022.07.011 .

[3] P. J. Deka, L. Einkemmer, Exponential Integrators for Resistive Magnetohydrodynamics: Matrix-free Leja Interpolation and Eﬃcient Adap-

tive Time Stepping, ApJS 259 (2) (2022) 57. doi:10.3847/1538-4365/ac5177 .

[4] G. Rainwater, M. Tokman, A new approach to constructing eﬃcient stiﬄy accurate EPIRK methods, J. Comput. Phys. 323 (2016) 283–309.

doi:10.1016/j.jcp.2016.07.026.

[5] P. J. Deka, M. Tokman, L. Einkemmer, Iterative scheme for Exponential Integrators: Leja or Krylov?, in prep. (2022).
[6] M. Caliari, A. Ostermann, Implementation of exponential Rosenbrock-type integrators, Appl. Numer. Math. 59 (3) (2009) 568 – 581.

doi:10.1016/j.apnum.2008.03.021 .

[7] M. Hochbruck, A. Ostermann, J. Schweitzer, Exponential Rosenbrock-Type Methods, SIAM J. Numer. Anal. 47 (1) (2009) 786–803.

doi:10.1137/080717717.

[8] V. T. Luan, A. Ostermann, Exponential rosenbrock methods of order ﬁve — construction, analysis and numerical comparisons, J. Comput.

Appl. Math. 255 (2014) 417–431. doi:10.1016/j.cam.2013.04.041.

[9] D. L. Michels, V. T. Luan, M. Tokman, A stiﬄy accurate integrator for elastodynamic problems, ACM Trans. Graph. 36 (4) (2017).

doi:10.1145/3072959.3073706.

[10] G. Rainwater, M. Tokman, Designing eﬃcient exponential integrators with EPIRK framework, in: International Conference of Numerical
Analysis and Applied Mathematics (ICNAAM 2016), Vol. 1863 of American Institute of Physics Conference Series, 2017, p. 020007.
doi:10.1063/1.4992153.

[11] M. Tokman, J. Loﬀeld, P. Tranquilli, New Adaptive Exponential Propagation Iterative Methods of Runge–Kutta Type, SIAM J. Sci. Comput.

34 (5) (2012) A2650–A2669. doi:10.1137/110849961.

[12] D. A. Pope, An exponential method of numerical integration of ordinary diﬀerential equations, Commun. ACM 6 (8) (1963) 491–493.

doi:10.1145/366707.367592.

[13] V. T. Luan, Fourth-order two-stage explicit exponential integrators for time-dependent PDEs, Appl. Numer. Math. 112 (2017) 91–103.

doi:10.1016/j.apnum.2016.10.008 .

[14] R. B. Sidje, Expokit: A software package for computing matrix exponentials, ACM Trans. Math. Softw. 24 (1) (1998) 130–156.

doi:10.1145/285861.285868.

[15] C. Moler, C. Van Loan, Nineteen dubious ways to compute the exponential of a matrix, twenty-ﬁve years later, SIAM Rev. 45 (1) (2003)

3–49. doi:10.1137/S00361445024180.

[16] A. H. Al-Mohy, N. J. Higham, Computing the action of the matrix exponential, with an application to exponential integrators, SIAM J. Sci.

Comput. 33 (2) (2011) 488–511. doi:10.1137/100788860.

[17] L. Einkemmer, M. Tokman, J. Loﬀeld, On the performance of exponential integrators for problems in magnetohydrodynamics, J. Sci. Comput.

330 (2017) 550–565. doi:10.1016/j.jcp.2016.11.027.

[18] F. Leja, Sur certaines suites li´ees aux ensembles plans et leur application `a la repr´esentation conforme, Ann. Polon. Math. 4 (1) (1957) 8–13.

URL http://eudml.org/doc/208291

[19] L. Reichel, Newton interpolation at Leja points, BIT 30 (1990) 332 – 346. doi:doi.org/10.1007/BF02017352 .
[20] J. Baglama, D. Calvetti, L. Reichel, Fast Leja Points, Electron. Trans. Numer. Anal. 7 (1998) 124 – 140.

URL http://eudml.org/doc/119747

[21] L. Bergamaschi, M. Caliari, A. Martinez, M. Vianello, Comparing leja and krylov approximations of large scale matrix exponentials, Proc.

ICCS (2006) 685–692doi:10.1007/11758549_93 .

[22] M. Caliari, M. Vianello, L. Bergamaschi, The LEM exponential integrator for advection-diﬀusion-reaction equations, Journal of Computa-

tional and Applied Mathematics 210 (1-2) (2007) 56–63. doi:10.1016/j.cam.2006.10.055 .

[23] M. Caliari, P. Kandolf, A. Ostermann, S. Rainer, Comparison of software for computing the action of the matrix exponential, BIT Numer.

Math. 54 (2014) 113 – 128. doi:10.1007/s10543-013-0446-0 .

[24] L. Einkemmer, An adaptive step size controller

for

iterative implicit methods, Appl. Numer. Math. 132 (2018) 182 – 204.

doi:10.1016/j.apnum.2018.06.002 .

[25] M. Tokman, P. M. Bellan, Three-dimensional model of the structure and evolution of coronal mass ejections, ApJ 567 (2) (2002) 1202–1210.

doi:10.1086/338699.

[26] T. Tuckmantel, A. Pukhov, J. Liljo, M. Hochbruck, Three-dimensional relativistic particle-in-cell hybrid code based on an exponential inte-

grator, IEEE Transactions on Plasma Science 38 (9) (2010) 2383–2389. doi:10.1109/TPS.2010.2056706.

[27] G. Dimarco, L. Pareschi, Exponential runge–kutta methods for stiﬀ kinetic equations, SIAM Journal on Numerical Analysis 49 (5) (2011)

2057–2077. doi:10.1137/100811052.

[28] E. Frenod, S. A. Hirstoaga, M. Lutz, E. Sonnendr¨ucker, Long time behaviour of an exponential integrator for a vlasov-poisson system with

strong magnetic ﬁeld, CiCP 18 (2) (2015) 263–296. doi:10.4208/cicp.070214.160115a.

[29] N. Crouseilles, L. Einkemmer, M. Prugger, An exponential integrator for the drift-kinetic model, Comput. Phys. Commun. 224 (2018) 144–

153. doi:10.1016/j.cpc.2017.11.003.

7

[30] N. Crouseilles, L. Einkemmer, J. Massot, Exponential methods for solving hyperbolic problems with application to collisionless kinetic

equations, J. Comput. Phys. 420 (2020) 109688. doi:10.1016/j.jcp.2020.109688.

[31] C. Clancy, J. A. Pudykiewicz, On the use of exponential time integration methods in atmospheric models, Tellus A: Dynamic Meteorology

and Oceanography 65 (1) (2013) 20898. doi:10.3402/tellusa.v65i0.20898.

[32] S. Gaudreault, J. A. Pudykiewicz, An eﬃcient exponential time integration method for the numerical solution of the shallow water equations

on the sphere, J. Comput. Phys. 322 (2016) 827–848. doi:10.1016/j.jcp.2016.07.012 .

[33] G. Mengaldo, A. Wyszogrodzki, M. Diamantakis, S.-J. Lock, F. X. Giraldo, N. P. Wedi, Current and emerging time-
integration strategies in global numerical weather and climate prediction, Arch. Computat. Methods Eng. 26 (2019) 663–684.
doi:doi.org/10.1007/s11831-018-9261-8 .

[34] V. T. Luan, J. A. Pudykiewicz, D. R. Reynolds, Further development of eﬃcient and accurate time integration schemes for meteorological

models, J. Comput. Phys. 376 (2019) 817–837. doi:10.1016/j.jcp.2018.10.018.

[35] M. Schreiber, N. Schaeﬀer, R. Loft, Exponential integrators with parallel-in-time rational approximations for the shallow-water equations on

the rotating sphere, Parallel Computing 85 (2019) 56–65. doi:10.1016/j.parco.2019.01.005.

[36] V. Shashkin, G. Goyman, Parallel eﬃciency of time-integration strategies for the next generation global weather prediction model, in: V. Vo-

evodin, S. Sobolev (Eds.), Supercomputing, Springer International Publishing, Cham, 2020, pp. 285–296.

[37] M. Brachet, L. Debreu, C. Eldred, Comparison of exponential integrators and traditional time integration schemes for the shallow water

equations, Appl. Numer. Math. 180 (2022) 55–84. doi:10.1016/j.apnum.2022.05.006.

[38] J. A. Pudykiewicz, C. Clancy, Convection experiments with the exponential time integration scheme, J. Comput. Phys. 449 (2022) 110803.

doi:10.1016/j.jcp.2021.110803.

[39] N. Rambeerich, D. Y. Tangman, A. Gopaul, M. Bhuruth, Exponential time integration for fast ﬁnite element solutions of some ﬁnancial

engineering problems, J. Comput. Appl. Math. 224 (2) (2009) 668–678. doi:10.1016/j.cam.2008.05.047.

[40] D. L. Michels, G. A. Sobottka, A. G. Weber, Exponential integrators for stiﬀ elastodynamic problems, ACM Trans. Graph. 33 (1) (2014).

doi:10.1145/2508462.

[41] C. Wang, X. Fu, P. Li, J. Wu, Accurate dense output formula for exponential integrators using the scaling and squaring method, Appl. Math.

Lett. 43 (2015) 101–107. doi:10.1016/j.aml.2014.12.008.

[42] Y. J. Chen, U. M. Ascher, D. K. Pai, Exponential Rosenbrock-Euler Integrators for Elastodynamic Simulation, Vol. 24(10), IEEE, 2018.

doi:10.1109/TVCG.2017.2768532.

[43] S. Chimmalgi, P. J. Prins, S. Wahls, Fast nonlinear fourier transform algorithms using higher order exponential integrators, IEEE Access 7

(2019) 145161–145176. doi:10.1109/ACCESS.2019.2945480.

[44] B. Hammoud, L. Olivieri, L. Righetti, J. Carpentier, A. Del Prete, Exponential integration for eﬃcient and accurate multibody simulation

with stiﬀ viscoelastic contacts, Multibody Syst. Dyn. 54 (2022) 443–460. doi:10.1007/s11044-022-09818-z.

[45] C. B. Moler, C. V. Loan, Nineteen dubious ways to compute the exponential of a matrix, Siam Rev. 20 (1978) 801–836.

doi:10.1137/1020098.

[46] G. Jansing, EXPODE - Advanced Exponential Time Integration Toolbox for MATLAB, Code Documentation, arXiv (2011).

arXiv:1108.2655.

[47] J. Niesen, W. M. Wright, Algorithm 919: A krylov subspace algorithm for evaluating the ϕ-functions appearing in exponential integrators,

ACM Trans. Math. Softw. 38 (3) (2012). doi:10.1145/2168773.2168781.

[48] M. Caliari, M. Vianello, L. Bergamaschi, Interpolating discrete advection–diﬀusion propagators at leja sequences, J. Comput. Appl. Math.

172 (1) (2004) 79 – 99. doi:10.1016/j.cam.2003.11.015 .

[49] S. Gaudreault, G. Rainwater, M. Tokman, KIOPS: A fast adaptive Krylov subspace solver for exponential integrators, J. Comput. Phys. 372

(2018) 236–255. doi:10.1016/j.jcp.2018.06.026 .

[50] R. Kissmann, Picard: A novel code for

the galactic cosmic ray propagation problem, Astropart. Phys. 55 (2014) 37–50.

doi:10.1016/j.astropartphys.2014.02.002.

[51] A. W. Strong, I. V. Moskalenko, V. S. Ptuskin, Cosmic-ray propagation and interactions in the galaxy, Annu. Rev. Nucl. Part. Sci. 57 (1)

(2007) 285–327. doi:10.1146/annurev.nucl.57.090506.123011.

8

