2
2
0
2

y
a
M
5
2

]
h
p
-
p
m
o
c
.
s
c
i
s
y
h
p
[

1
v
6
4
8
2
1
.
5
0
2
2
:
v
i
X
r
a

GiNaCDE: the high-performance F-expansion and First Integral Methods with C++
library for solving Nonlinear Diﬀerential Equationsa

Mithun Bairagi†
Department of Physics, The University of Burdwan, Golapbag 713104, West Bengal, India

We present the algorithms for three popular methods: F-expansion, modiﬁed F-expansion, and
ﬁrst integral methods to automatically get closed-form traveling-wave solutions of nonlinear partial
diﬀerential equations (NLPDEs). We generalize and improve the methods. The proposed algorithms
are manageable, straightforward, and powerful tools providing a high-performance evaluation of the
exact solutions of nonlinear ordinary diﬀerential equations (NLODEs) and NLPDEs. For diﬀerential
equations with parameters, the new algorithms determine the conditions on the parameters to
obtain exact solutions. The algorithms show solutions to a wide variety of NLODEs and NLPDEs,
both integrable and non-integrable.
It can solve NLODEs and NLPDEs that contain complex
functions. The algorithms are implemented in a C++ library named GiNaCDE. The eﬃciency and
eﬀectiveness of the algorithms are demonstrated by some examples with the help of GiNaCDE. The
output results tally with the previously known results, and in some cases, new exact traveling-wave
solutions are explicitly obtained. Use of the library, implementation issues, scope, limitations, and
future extensions of the software are addressed.

Keywords: NLPDEs; F-expansion method; First integral method; Symbolic computations.

I.

INTRODUCTION

The Nonlinear Ordinary Diﬀerential Equations (NLODEs) and Nonlinear Partial Diﬀerential Equations (NLPDEs)
play an important role in the theoretical sciences to explain many Nonlinear phenomena in various ﬁelds of science,
such as biology, chemistry, engineer, solid-state physics, plasma physics, optical ﬁbers, and so on. The exact (closed-
form) traveling-wave solutions (TWS) of such NLPDEs give much extra information, which helps us to study the result
more deeply. The knowledge of closed-form solutions of NLODEs and NLPDEs helps to test the degree of accuracy
of numerical solvers and also facilitates stability analysis. In the past few decades, many powerful methods have been
presented for seeking exact solutions of NLPDEs. Some of them are tanh-expansion method [1–3], Jacobi elliptic
function expansion method [4, 5], multiple exp-function method [6], tanh-sech method [7], extended tanh method [8],
hyperbolic function method [9], sine–cosine method [10], inverse scattering method [11], Hirota’s direct method [12],
F-expansion method [13], ﬁrst integral method [14, 15], etc. We have observed that most of the methods (such as ﬁrst
seven methods mentioned above) are function-expansion methods where the exact solutions of nonlinear diﬀerential
equations restrict to polynomial solutions in terms of speciﬁc functions. For example the exact solutions are obtained
in terms of the tanh function for tanh-expansion method [1–3] and Jacobi’s sn (JacobiSN) or cn (JacobiCN) functions
for Jacobi-expansion method [4, 5]. These methods are useful for ﬁnding explicit traveling solitary wave solutions to
nonlinear evolution equations.

On the other hand, F-expansion [13] and ﬁrst integral methods [14, 15] are diﬀerent kinds of methods, which can
overcome the limitations of the function-expansion method. F-expansion method was ﬁrst introduced by Zhou et al.
[13]. Later this method has been further improved [16–24], and successfully applied to many nonlinear equations for
ﬁnding the exact solutions. In the F-expansion method, solutions of NLPDEs are expressed in ﬁnite power series of a
new function F (ξ) which depends on traveling-wave coordinate ξ. F (ξ) satisﬁes a ﬁrst-order NLODE called auxiliary
equation (A.E.). By repeated substitutions and using the chain rules arise from A.E., the order of NLPDEs is reduced
to ﬁrst-order NLODEs. As a result, solutions can be easily deduced from known solutions of ﬁrst-order NLODEs. In
the modiﬁed F-expansion method [24] (in short mF-expansion) which is very similar to the F-expansion method, a
diﬀerent kind of A.E. is taken. In our proposed algorithms for F-expansion and modiﬁed F-expansion methods, one
important advantage is that one can set A.E. in the general forms (13),(29) while in [19, 24] the A.E. have been taken in
the speciﬁc forms (C-6), (A-1) respectively. Unlike the function-expansion method, a huge variant of solutions can be
obtained using diﬀerent auxiliary equations. Even the solutions obtained from the function-expansion method can also
be recovered from the F-expansion method. On the other hand, the ﬁrst integral method (FIM) is based on the ring
theory of commutative algebra. In FIM, a second-order NLPDE is automatically converted to the ﬁrst-order NLODE
when possible, which is known as the ﬁrst integral of the original second-order NLPDE. Such automatic conversion

a This article presents a detailed introduction to the NLPDE solver GiNaCDE [39].
† bairagirasulpur@gmail.com

 
 
 
 
 
 
2

is not possible in F-expansion and modiﬁed F-expansion methods. Then the solutions of second-order NLPDE are
determined from known solutions of the ﬁrst-order NLODE. This method has been successfully applied to a number of
NLPDEs by researchers [25–33]. Keeping in mind the popularity of the F-expansion, mF-expansion, and ﬁrst integral
methods in the scientiﬁc community in ﬁnding the exact solutions of NLODEs and NLPDEs, we have been motivated
to introduce the algorithms of these methods that can be easily implemented in a computer package for automatic
derivations of closed-form traveling-wave solutions by employing these methods. In our proposed algorithms, we have
generalized these methods and introduced some new features in the methods so that one can apply the new algorithms
to diﬀerent kinds of NLODEs and NLPDEs arising in various ﬁelds of science.

In order to solve the NLPDEs, many computer packages are available.

Searching for traveling-wave solutions of NLPDEs by hand is very tedious, cumbersome, and sometimes takes a long
time. However, many modern Computer Algebra Systems (CAS), such as Maple, Mathematica, Reduce, Maxima,
etc., help us to perform complicated and tedious algebraic calculations on a computer to ﬁnd exact solutions to such
In
problems accurately in a short time.
1996, Parkes and Duﬀy [34] have implemented tanh-expansion in their Mathematica package ATFM. Later complete
implementation of tanh-expansion has been done by Li and Liu (2002) [35] designing the Maple package RATH.
Baldwin et al.
[36, 37] have developed Mathematica package PDESpecialSolutions.m which admits polynomial
solutions in tanh, sech, combinations thereof, JacobiSN, JacobiCN. RAEEM [38] is one of the most popular packages
written in the Maple programming language, which is a comprehensive and complete implementation of some powerful
methods such as the tanh-method, the extended tanh-method, the Jacobi elliptic function method, and the elliptic
equation method. All these computer packages have implemented the function-expansion methods. One serious
drawback of the function-expansion method is that the solutions which contain functions other than some speciﬁc type
of functions, such as tanh, sech, JacobiSN, JacobiCN, etc. are not obtained. Additionally, the non-polynomial forms of
these speciﬁc functions are not obtained also. We note that most packages have been developed within commercially
available software frameworks, such as Maple and Mathematica. Besides this, to the best of our knowledge, the
computer packages with the implementation of F-expansion and ﬁrst integral methods are not available so far.

Keeping in mind all the above points of view, we have been motivated to develop a computer package or C++ library
called GiNaCDE 1 [39], which implements our proposed algorithms of the high-performance automated F-expansion,
modiﬁed F-expansion, and ﬁrst integral methods for the ﬁrst time. The symbolic manipulations of GiNaCDE depend
only on GiNaC [40]. GiNaCDE extends the capability of the GiNaC library towards the solutions of diﬀerential
It can
equations. There are several advantages to use GiNaC over other CAS. GiNaC is a pure C++ library.
accept C++ programming language, a general-purpose object-oriented programming (OOP) language, and it is fast
like commercially available computer algebra systems. The source code is freely available as this library is written
under the terms and conditions of the GNU general public license (GPL). One important property of GiNaC that
diﬀerentiates it from other computer algebra programs we may have used: GiNaC assigns a unique (hidden) serial
number for each newly created symbol object, and GiNaC uses this unique serial number instead of its name for
algebraic manipulations. The serial number for the same name of a symbol may be changed in each running session
of the GiNaC program. As a result, the symbols in the same algebraic expressions may be ordered diﬀerently during
each running session of the GiNaC program. This happens because to order the symbols of an algebraic expression
GiNaC internally uses a comparison predicate, called ex is less which uses an internal symbol id counter. There is
also have another problem with using GiNaC as CAS. One should write a C++ program every time to solve each
NLPDE, and compilation is also required for each one. However, many GUI tools like GTK, FLTK, Qt are available
to make GUI applications with GiNaCDE, which facilitates users to solve NLPDEs automatically without writing
programming and compilation each time. In this context, we have developed a GUI application called GiNaCDE GUI
within the GTK framework.

We have noted that in the Maple package RAEEM [38], similar to the F-expansion method, an A.E. has also
been considered, whose algebraic form is very similar to the A.E. as taken in the F-expansion method. However,
in RAEEM, A.E. is handled with a maximum of four parameters, but in the case of GiNaCDE, one can choose the
number of parameters higher than four that can be controlled from the user end. In order to get the exact traveling
wave solutions including polynomial, exponential, triangular, hyperbolic, rational, Jacobi elliptic, Weierstrass elliptic
type, RAEEM automatically chooses some predeﬁned constant values of the four parameters of A.E., and these values
cannot be controlled from the user end. On the other hand, in GiNaCDE software, one can assign any numerical or
algebraic values to the parameters of A.E. and choose the upper limit on the number of parameters in A.E. in own
choices. All this ﬂexibility in handling the parameters of A.E. from the user end makes the GiNaCDE software more
powerful and eﬃcient to investigate more new types of closed-form solutions of NLPDEs.

The paper is organized as follows: In Secs. II, III, IV, we have simply described the algorithms for automated
F-expansion, modiﬁed F-expansion, and ﬁrst integral methods respectively and described each step of the algorithms

1 https://github.com/mithun218/GiNaCDE.git

3

with a working example of NLPDE. Key features of the implementation of the proposed algorithms in GiNaCDE
software are discussed in Sec. V. In Sec. VI, to illustrate the eﬃciency and eﬀectiveness of the GiNaCDE library, we
have applied the library to a wider class of NLPDEs and found the exact solutions. Our results are also compared
with an existing Maple package RAEEM. Finally, in Sec. VII, we discuss our results, and some conclusions have been
made on our works. The exact analytical solutions of some auxiliary equations are given in the Appendix: A, B, C,
D.

II. ALGORITHM OF AUTOMATED F-EXPANSION METHOD

This section explains the algorithms for the F-expansion method [19] to obtain closed-form traveling-wave solutions
of NLPDEs automatically. However, in the proposed algorithms, we have to guide the solution process initially by
providing some initial data. In that sense, the algorithms are not fully automated, but this makes the algorithms
more powerful, and we can apply these algorithms to a huge variant of NLPDEs with diﬀerent types of initial data.
We divide the algorithm into ﬁve main steps (labeled F1-F5).

Let us consider an NLPDE with independent variables t, x1, x2, . . . xm = X and dependent variable u in the following

general form

F (αi, u, ut, ux1, ux1 . . . , uxm, utt, utx1, utx2, . . . , utxm, ux1x1 , ux1x2 . . . , ux1xm . . .) = 0,

(1)

where αi(i = 1, . . . , l) are the parameters, u = u(t, x1, x2, . . . xm) and F is a polynomial about u and its derivatives.
Equation (1) does not explicitly depend on the independent variables t, x1, x2, . . . xm. The current package GiNaCDE
with the all three algorithms (F-expansion, mF-expansion, FIM) can solve the NLPDEs of the form (1). However,
there is no guarantee that the code always give the complete solutions of all NLPDEs of the form (1), and sometimes
the code may failure to give solutions due to the complexity in the problems. Here, it should be noted that our
algorithms are also applicable to Eq. (1) without the parameters αi. Equation (1) is called input-NLPDE throughout
this paper.
Step F1(Transform the NLPDE into a NLODE): At ﬁrst we take a transformation in Eq. (1)

where

and

u = U (ξ)eIθ,

ξ = k0t + k1x1 + k2x2 + . . . + kmxm = K

θ = p0t + p1x1 + p2x2 + . . . + pmxm = P

X,

·

X.

·

(2)

(3)

Here ξ is called traveling-wave coordinate and U (ξ) is the traveling-wave part of the solutions. The second part of
Eq. (2) is eIθ which is called the phase part of the solutions and θ is called phase coordinate. Usually, this part
is present when diﬀerential equation (1) has an imaginary part. In our program library we must retain this phase
part when Eq. (1) is complex otherwise we only retain traveling-wave part. Taking proper forms or values of the
constant coeﬃcients (ki (i = 0 . . . m)) of traveling-wave coordinate ξ and phase angle constants pi (i = 0 . . . m), we
can transform the NLPDE (1) into the nonlinear ordinary diﬀerential equation (NLODE) with single independent
variable ξ and dependent variable U (ξ). Repeatedly applying the chain rule

on Eq. (2), Eq. (1) is transformed into NLODE. The form of NLODE in general form is given by

G

αi, ki, pi, U, U (1), U (2) . . .

= 0,

∂
•
∂X

=

K d
dξ

(cid:18)

+ IP

•

(cid:19)

(4)

(5)

(cid:16)

(cid:17)

where U (n)(n = 1, 2 . . .) indicates n times diﬀerentiation with respect to ξ. All the three algorithms (F-expansion,
mF-expansion, FIM) work only when Eq. (5) is a polynomial in variable U (ξ) and its derivatives, and does not
explicitly depend on the independent variables ξ. Then our algorithm check the integrability of Eq. (5). If Eq. (5)
is integrable, our method try to integrate Eq. (5) and if integration is successful then one can assign a value to
each integrating constant (ici, i = 1, 2, . . . , η, η is the number of integration) in own choices. In the case of complex
NLPDE, if real and imaginary both parts are present in the transformed NLPDE, one part is taken to solve. To select
one part from complex NLODE, following strategies are followed

4

I = 0,

(6)

i. Assume all the parameters (αi, ki, pi) are real.

ii. Express the NLODE (5) in the form

G

αi, ki, pi, U, U (1), U (2) . . .

= Re

αi, ki, pi, U, U (1), U (2) . . .

(cid:17)

(cid:16)
where Re
(6), and I = √

(cid:0)

−

αi, ki, pi, U, U (1), U (2) . . .
(cid:16)
is real part and Im

(cid:17)

+ Im

αi, ki, pi, U, U (1), U (2) . . .
(cid:16)

∗

(cid:17)
is imaginary part of NLODE

αi, ki, pi, U, U (1), U (2) . . .

1.

(cid:1)

(cid:0)

(cid:1)

iii. Check in which part (Re or Im) dependent variable U (ξ) is not present, but minimum one number of parameter
is present there. Get the constraint on that parameters contained in this part. Take other part (may be Re or
Im) as NLODE whose solutions are to be solved.

Suppose in the real part Re, the dependent variable U (ξ) is not present and there is only present the parameters
αi, ki, pi. Then Eq. (6) can be expressed by

and we have to solve the NLODE Im

(cid:16)

αi, ki, pi, U, U (1), U (2) . . .

Re (αi, ki, pi) + Im

αi, ki, pi, U, U (1), U (2) . . .

I = 0,

∗

(cid:17)

(7)

= 0 subject to the constraint Re (αi, ki, pi) = 0.

iv. If the above step is failure, compare the expressions of Re and Im to check whether they are the same NLODE
for some constraint on the parameters of Re or Im. If they are the same NLODE, take anyone part as NLODE
whose solutions are to be solved.

(cid:1)

(cid:0)

(8)

(9)

Suppose for the constraint

we get

Re

f (αi, ki, pi) = 0,

αi, ki, pi, U, U (1), U (2) . . .
(cid:16)

(cid:17)

(cid:16)

= Im

αi, ki, pi, U, U (1), U (2) . . .

(cid:17)

from Eq. (6), then the solutions can be determined either from the NLODE Re or Im subject to the constraint
relation (8).

If any above criteria are not satisﬁed, the complex input-NLPDE equation cannot be transformed into single NLODE
in our algorithm and the method does not work successfully.

Step F2(Determine the highest power N of ﬁnite power series): Now according to the F-expansion method, the

solution of the NLODE (5) can be expressed as the ﬁnite power series, which is

N

U =

aiF i(ξ) +

i=0
X

bi
F i(ξ)

,

N

i=1
X

(10)

where ai(i = 0 . . . N ) and bi(i = 1 . . . N ) are constants to be determined later. In Eq. (10) ﬁrst term is positive part
and second term is negative part in the solution. The value of N (positive integer or positive noninteger) in Eq. (10)
can be determined by considering a homogeneous balance between the highest order nonlinear term with the highest
order derivative of U (ξ) in Eq. (5). However, to automate this process, we have employed a method described in [35].
At ﬁrst, Eq. (5) is expanded in the sum of product (SOP) form. Our aim is to determine the highest possible value
of N , and so it is suﬃcient to replace U with U N . Assuming degree of U (ξ) is D[U (ξ)] = N , we replace U by U N and
collect the degrees of each term appearing in Eq. (5) by a variable, say E. To determine the degree of an expression,
we use the relations

dnU (ξ)
dξn

(cid:21)

D

(cid:20)

= N + n, D

U n

(cid:20)

(cid:18)

dnU (ξ)
dξn

m

(cid:19)

(cid:21)

= N n + m(N + n).

(11)

Generally in (max( E),N ) plane we get a turning point and the value of N is taken at this point. Whole procedure
is automated in the following order:

i. Substitute U by U N and simplify.

ii. Expand and express in SOP form.

iii. Collect the degree of each term appearing in SOP form and store them in a list E.

iv. Replace N in E by a sequence of numbers whose ﬁrst number is 0. In GiNaCDE, we take three number sequence

with common diﬀerences- 1/2, 1/3, 1/4 up to last number 11.

v. For each number in sequence, calculate max(E).

vi. Calculate diﬀerences between the value of max(E) for successive numbers in the sequence.

5

vii. To get highest power N , take the number in sequence for which diﬀerences are not same with previous one. More
2)),

clearly if i is the current number in the the sequence and (max(Ei)
1.
then the highest power N = i

= (max(Ei

max(Ei

max(Ei

1))

1)

−

−

−

−

−

−

It is clear that for a larger value of N the complexity in mathematical operations is increased. To avoid such
complexity in derivations, one should set the maximum allowed value of N . However, sometimes in some cases, the
auto-evaluation of N may fail.

Step F3(Derive the system of Nonlinear Algebraic Equations for the coeﬃcients of F (ξ)): F (ξ) satisfy the ﬁrst-

order nonlinear ODE (also called auxiliary equation (A.E.))

F ′ (ξ) =

(F (ξ)),

F

(12)

where
case of F-expansion method

F

(F (ξ)) is some known functions of F (ξ). The prime over F (ξ) represents diﬀerentiation with respect to ξ. In

(F (ξ)) =

A0 + A1F + A2F 2 + . . . + AδF δ,

F

(13)

where δ is a positive integer and Ai(i = 0, 1, . . . δ) are coeﬃcients of A.E. Here one can use any functional form of
Eq. (13) by choosing any positive integer value of δ and real values of Ai. As a result the solutions of ﬁrst-order
NLODE (13) can be expressed in terms of a large variety of functions such as polynomial, exponential, trigonometric,
hyperbolic, rational, Jacobi elliptic etc.. However, taking some well-known functional forms of
in Eq. (13), we have
shown some solutions of F (ξ) in the Appendix: C, D. The higher derivatives of F (ξ) using Eq. (12) can be expressed
by

F

p

F ′′ =

d
F
dF F

, F ′′′ =

d
F
dF F

2

(cid:19)

(cid:18)

2 d2
dF 2 and so on.

F

+

F

(14)

Now substituting Eq. (10) into Eq. (5) and using Eq. (14) with (13) we get an expression, and the numerator of
resulted expression contains F (ξ)j
k to zero an
overdetermined system of nonlinear algebraic equations are obtained where the constant parameters ai(i = 0 . . . N ),
bi(i = 1 . . . N ), ki(i = 0 . . . m), pi(i = 0 . . . m), Ai(i = 0, 1, . . . δ), parameters αi(i = 1 . . . l) appearing in input-NLPDE
and integrating constants ici(i = 1 . . . η) if (5) is integrable, are present.

k (j = 0, 1, 2, . . . ; k = 0, 1) terms. Setting each coeﬃcient of F (ξ)j

F

F

The nonlinear system of equations is a set of simultaneous equations in which the unknowns (the constant parame-
ters) appear as variables of a polynomial of degree one or higher than one. Suppose the system of algebraic equations
is solved for all parameters that are present in the system of algebraic equations. In that case, it takes a larger time
to get solutions for the system of equations, even sometimes solutions are not obtained for a complicated system. To
reduce the calculating time and the complexity in derivations, we categorize all the parameters into two diﬀerent types.
They are external parameters and internal parameters. External parameters are αi(i = 1 . . . l), Ai(i = 0, 1, . . . δ)
which are present in input-NLPDE equation and auxiliary equation respectively. When input-NLPDE equations are
integrable, the generated integrating constant(s) ici(i = 1 . . . η) is also external parameter. On the other hand all
the remaining parameters, such as ai(i = 0 . . . N ), bi(i = 1 . . . N ), ki(i = 0 . . . m), pi(i = 0 . . . m) are called internal
parameters as they generate internally. Nonlinear algebraic systems are always solved for internal parameters. But
one can have control over external parameters to choose the parameters for which nonlinear algebraic system is to
be solved. For this purposes, the programming variables ASolve and paraInDiﬀSolve (detailed descriptions are given
in the software user manual) are used to choose the unknowns from the external parameters in our choice, and it
will reduce the calculating time and can handle more complicated algebraic expressions. At the same time, the exact
solutions are determined subject to the conditions on chosen external parameters.

6
6

Step F4(Solve the system of Nonlinear Algebraic Equations): Analysing and solving the nonlinear algebraic
system is a vital and challenging step among all steps of the method.
In fact, the number of exact solutions of
NLPDE derived by F-expansion, modiﬁed F-expansion, or ﬁrst integral methods is entirely depending on how many
solutions are obtained from a nonlinear algebraic system. The executing time of the software mainly depends on
this step. Many methods are available to solve nonlinear algebraic systems such that Gr¨obner basis methods [41],
the Ritt-Wu characteristic sets method implemented by Wang [42, 43], and the Reduced Involutive Form (Rif)
code by Wittkopf and Reid [44]. D. Baldwin et al.
[45] have employed a simple algorithm to design a powerful
nonlinear solver in Mathematica. We have followed their algorithm to create a nonlinear solver in GiNaC symbolic
system. The nonlinear solver implemented in [45] solves the entire system in an automated way using the built-in
Mathematica function Reduce. Their solver can solve polynomial and non-polynomial systems both. The nonlinear
solver implemented by us can solve only the polynomial system required in this application, and its own C++ function
solves the polynomial equations.

The steps used in this algorithm are very much like the steps used to solve a nonlinear algebraic system by hand.
In this method, the simplest equation is solved for sorted unknown parameters. Then the solutions are substituted in
the remaining equations. Such solving and substitution procedures are repeated until the system is completely solved.
We operate the whole procedure in the following order:

i. Check whether each equation is polynomial in unknowns.

ii. Factor and simplify each equation.

iii. Measure complexity of each equation by the number of add containers, unknown parameters, and the degree
If more than one equations have the same

of unknowns. Then, sort the system based on their complexity.
complexity, in GiNaCDE they are sorted according to the GiNaC in-built comparison predicate ex is less.

iv. Sort the unknown parameters contained in the simplest equation by their degree.

v. Solve the simplest equation for the lowest degree unknown. If the number of unknown for the lowest degree is
greater than one, then GiNaCDE uses the comparison predicate ex is less to choose the unknown. If solutions
are absent, solve the unknown for the next higher degree.

vi. Substitute the solutions into the remaining equations and simplify.

vii. Repeat the steps i-vi until all the equations are reduced to zero.

viii. Substitute all the unknowns which are present in the computed solutions with the help of other solutions.

ix. Test the solutions by substituting them into each equation.

x. Finally, collect all solutions branches.

Our solver is powerful and can easily handle nonlinear equations (of course, polynomials in unknowns) with multi-
parameters. Sometimes, there are risks of missing some solutions due to numerous parameters in the system or if
the system is high degree. In this solver, the unknowns from all parameters appearing in the system are chosen in
order of complexity. Then the solutions for these unknowns are expressed in terms of other parameters that are to be
regarded as arbitrary parameters. Sometimes it is observed that the solutions become simpler where these arbitrary
parameters are taken as unknowns.

Step F5(Build solutions with calculating steps): Substitute the solutions obtained in step F4 into Eq. (13) and
obtain the solutions of F using the Appendix: C, D. Then, to obtain traveling-wave solutions of Eq. (5), substitute
F and the solutions obtained in step F4 into Eq. (10). Finally the explicit solutions in original variables are obtained
using Eqs. (2), (3).

A. Explanation of each step with a working example

To illustrate each algorithm steps for F-expansion method described above, we take the one dimensional cubic

nonlinear Schr¨odinger (NLS) equation [46]

Iut

−

puxx + q

u

2u = 0,
|

|

(15)

as an example. In Eq. (15) p, q are non-zero real constants and u(x, t) is a complex-valued function depends on the
variables x, t.

Step F1: Equation (15) has an imaginary and a real part. So retaining the phase part in Eq. (2) and making

traveling-wave transformation

7

Eq. (4) yields

u(t, x) = U (ξ)eIp0t+Ip1x, where ξ = k0t + k1x,

Substituting Eqs. (17) into Eq. (15) we get

ut = k0Uξ + Ip0,
uxx = k2

1Uξξ + 2Ik1p1Uξ

p2
1.

−

p0U

−

−

pk2

1Uξξ + qU 3 + p2

1pU + IUχ (k0 −

2p1pk1) = 0.

Note that, Eq. (18) has real and imaginary both parts. From imaginary part we get the condition

and from real part we obtain the NLODE

p1 =

k0
2pk1

,

pk2

1Uξξ + qU 3

−

p0U = 0.

−

Step F2: Substituting U

→

U N , degree of each term in Eq. (20) is collected by a list variable E:

E =

D[Uξξ], D[U 3], D[U ]

= (N + 2, 3N, N ).

(cid:1)
(cid:0)
N max(Ei) max(Ei)

−

max(Ei−1)

0
1
2
1
3
2
2

2
2.5
3
4.5
6

0.5
0.5
1.5
1.5

(16)

(17)

(18)

(19)

(20)

(21)

TABLE I: Here a number sequence with common diﬀerence 1/2 has been used to determine the highest power N .
Bold number denotes the turning point and the corresponding value N = 1 is balancing highest power.

Then using balancing highest power N = 1, ﬁnite power series is expressed by

Step F3: We choose A.E.

Using Eqs. (14) for Eq. (23), we get

U = a0 + a1F + b1F −

1.

F ′ =

A0 + A2F 2.

p

F ′′ = A2F, F ′′′ = A2F ′.

(22)

(23)

(24)

Inserting Eqs. (22), (23), (24) into Eq. (20) and collecting the coeﬃcients of F iF ′
of nonlinear algebraic equations

j

(i = 0, 1, . . . 6, j = 0) we get a set

1b1 + 4qpk2
8A0p2k4
F 0 :
−
1b2
F 1 : 12qpa0k2
1 = 0,
1A2b1 + 12qa1pk2
4p2k4
F 2 : b1k2

1 = 0,

1b3

0 −

1b2

1 −

4pp0k2

1b1 + 12qpa2

0k2

1b1 = 0,

1 + 24qa1pa0k2

1A2 + 12qa1pa2

1b1 + a0k2
0k2

0 −
1 + 12qa2

4pa0p0k2
1pk2

1 = 0,
1b1 + a1k2

0 −

0k2
4a1p2k4

F 3 : 4qpa3
F 4 :
−
F 5 : 12qa2
F 6 : 4qa3

1pa0k2
1pk2

1 = 0.

1 = 0,

4a1pp0k2

1 = 0,

8

(25)

Here external parameters are A0, A2, p, q and internal parameters are a0, a1, b1, k0, k1, p0, p1.

Step F4: Resulting nonlinear algebraic equations are solved for internal parameters only and the solutions are

a1 = 0, k1 =

±

r

a1 = 0, b1 = 0, p0 =

q
2pA0

b1, p0 =

A2

0k2

q2A2b4
1

0 −
2A0qb2
1
2

4 qpa0

2 + k0
2

2k1
4pk1

.

, a0 = 0;

(26a)

(26b)

In the above solutions the parameters p, q, k0, p0, A0, A2 are arbitrary.

Step F5: The solutions for F of Eq. (23) are derived with the help of Eq. (D-13) in Appendix: D. Then combining
(22) with (19) and substituting (26a), we obtain the closed-form solutions to (15). For brevity the solutions are not
shown here. Here we present only one solution which illustrates our algorithm:

u(t, x) =

−

(cid:16)

A0e2ξ√A2 + e2C√A2

e−

(C+ξ)√A2

2√A2

(cid:17)

eIθ,

(27)

A2

0k2

q2A2b4
1

√A0k0
√2pqb1

where θ =

b1x and C is an arbitrary constant. There are two sign
combinations in each equation and total 12 solutions are obtained. Similarly, using (26b), we can derive an another
(cid:16)
exact solution

, ξ = kot

0−
2A0qb2
1

q

±

±

(cid:17)

x

t

q
2pA0

u(t, x) = a0eIθ, where θ =

4qpa0

(cid:0)

2

2 + k0
2

2k1
4pk1

(cid:1)

t

+

k0x
2pk1

.

(28)

III. ALGORITHM OF AUTOMATED MODIFIED F-EXPANSION METHOD

The algorithm for the automated modiﬁed F-expansion method [24] is very similar to the algorithm of the automated
F-expansion method. This algorithm also has ﬁve main steps (labeled MF1-MF5), and it has only one diﬀerence to
the F-expansion method. The diﬀerence is that a diﬀerent form of A.E. is taken in step MF3 in comparison to step
F3. Therefore, one can check new exact solutions of the NLPDE applying both methods (F-expansion method and
modiﬁed F-expansion method) to the same NLPDE with diﬀerent forms of A.E. Details of all steps are described below:

Step MF1(Transform the NLPDE into an NLODE): Same as step F1.
Step MF2(Determine the highest power N of ﬁnite power series): Same as step F2.
Step MF3(Derive the system of Nonlinear Algebraic Equations for the coeﬃcients of (F (ξ)): In the modiﬁed
F-expansion method, the solution of the NLODE (5) is also expressed by a ﬁnite series like Eq. (10). In this method,
we have generalized the modiﬁed F-expansion method [24] taking the A.E. in more general form

F ′ (ξ) = A0 + A1F + A2F 2 + . . . + AδF δ,

(29)

where δ is a positive integer and Ai(i = 0, 1, . . . δ) are coeﬃcients of A.E. One can choose any functional form of Eq.
(29) using any positive integer value of δ and any real value of Ai. Here interestingly, we note that by choosing various
functional forms of Eq. (29) in our choices, one can get the ﬁnal solutions of input-NLPDE in terms of a large variety
of functions. For example, some well-known equations can be obtained from Eq. (29), such as Riccati equation with
δ = 2 and Bernouli equation with Ai = 0, (i
= δ). The exact solutions of Riccati and Bernouli equations
are known that are given in Appendix: A and Appendix: B respectively. Now substituting Eq. (10) into Eq. (5) and
using Eq. (29) we get an expression appearing the terms F (ξ)j (j = 0, 1, 2, . . .) in the numerator. The equations must
vanish identically. Hence, to generate a nonlinear algebraic system, equate to zero the coeﬃcients of the power terms
in F .

= 1 and i

Step MF4(Solve the system of Nonlinear Algebraic Equation): Similar strategy as in step F4.

6
6
9

Step MF5(Build solutions with calculating steps): Substitute the solutions of step MF4 into Eq. (29). Obtain the
solutions of F using Appendix: A, B. Then, substitute F along with the solutions of step MF4 into Eq. (10). To get
the explicit solutions in original variables, Eqs. (2), (3) are used.

As the modiﬁed expansion method is very much similar to the F-expansion method (the diﬀerence with the F-
expansion method is that a diﬀerent form of A.E. is taken here), we do not explain each step of this method with a
working example.

IV. ALGORITHM OF AUTOMATED FIRST INTEGRAL METHOD

In ﬁrst integral method [14], one important advantage over F-expansion and modiﬁed F-expansion methods is that
one does not have to choose A.E. to solve NLPDEs; instead, the input-NLPDE is automatically reduced to a suitable
ﬁrst-order NLODE whose solutions have to be calculated.

The algorithm for the automated ﬁrst integral method has eight main steps (labeled FIM1-FIM8). Now we give an

outline of every step as follows:

Step FIM1(Transform the NLPDEs into NLODEs): Same as step F1. The condition for applying ﬁrst integral

method to the Eq. (5) is that Eq. (5) must be a second-order NLODE. Therefore Eq. (5) is expressed in the form

G

αi, ki, pi, U, U (1), U (2)
(cid:16)

(cid:17)

= 0.

(30)

Step FIM2(Convert into a system of NLODEs): We assume that U (ξ) = X(ξ) and introducing a new independent

variable Y (ξ) = Xξ(ξ), Eq. (30) can be rewritten as a system of NLODEs [14]

Xξ(ξ) = Y (ξ),

Yξ(ξ) =

P (X(ξ), Y (ξ))
H(X)

=

1
H(X)

K0(X) + K1(X)Y + . . . + Kd(X)Y d

.

(31a)

(31b)

We have expressed P (X(ξ), Y (ξ)) as a polynomial in variable Y (ξ) with degree d and H(X), Ki(X)(i = 0, 1 . . . d) are
polynomials in variable X. H(X) is the coeﬃcient of the highest derivative term in Eq. (30).

(cid:0)

(cid:1)

Step FIM3(Apply Division Theorem): If X(ξ), Y (ξ) are nontrivial solutions of Eq. (31), then applying the Division

Theorem [14] there exist an irreducible polynomial in the complex domain C[X, Y ] such that

q(X(ξ), Y (ξ)) =

ai(X)Y i = 0,

N

i=0
X

(32)

where ai(i = 0 . . . N ) are polynomials of X and aN
(31b). Using Division Theorem there exists a polynomial (g(X) + h(X)Y ) such that

= 0. Equation (32) is called the ﬁrst integral to Eqs. (31a) and

dq
dξ

=

∂q
∂X

dX
dξ

+

∂q
∂Y

dY
dξ

= (g(X) + h(X)Y )

ai(X)Y i.

N

i=0
X

(33)

Using Eqs. (31), (32) in the Eq. (33), we get

N

i=0
X

N

˙ai(X)Y i+1+

iai(X)Y i
−

1

i=0
X

1
H(X)

K0(X) + K1(X)Y + . . . + Kd(X)Y d

= (g(X) + h(X)Y )

(cid:0)

(cid:1)

ai(X)Y i. (34)

N

i=0
X

Dot over ai(X) denotes derivative with respect to X. The degree in variable Y of left hand side (L.H.S) in Eq. (34)
1 and the degree in variable Y of right hand side (R.H.S) in Eq. (34) is i + 1. Balancing degrees between
is i + d
both sides we get i + d
1 = i + 1, hence d = 2. So the method is applicable when the degree of Eq. (31b) in variable
Y is less than or equal to 2. Taking the maximum degree 2, Eq. (34) can be rewritten as

−

−

N

i=0
X

N

˙ai(X)Y i+1+

iai(X)Y i
−

1

i=0
X

1
H(X)

K0(X) + K1(X)Y + K2(X)Y 2

= (g(X) + h(X)Y )

(cid:0)

(cid:1)

ai(X)Y i.

(35)

N

i=0
X

6
Step FIM4(Derive the Algebraic System of equations for coeﬃcients of Y i): Comparing coeﬃcients of Y i (i =
= 0 canceling H(X) in denominator from both sides we obtain

N + 1, N, . . . , 1, 0) on both sides of (35), and for H(X)

10

Y N +1 : H(X) ˙aN (X) + N aN (X)K2(X) = H(X)h(X)aN (X),
Y N : H(X) ˙aN

−

1(X) + N K1(X)aN (X) + (N + 1)K0(X)aN +1(X) = H(X)g(X)aN (X) + H(X)h(X)aN

(36a)

1(X),

(36b)

−

...

Y 1
Y 0

: H(X) ˙a0(X) + K1(X)a1(X) + 2K0(X)a2(X) = H(X)g(X)a1(X) + H(X)h(X)a0(X),

: K0(X)a1(X) = H(X)g(X)a0(X),

where ai(X) = 0 for i < 0 and i > N .

In the next step FIM5 we take aN = 1 to derive the polynomial forms of h(X), g(X), ai(i = 0.. . . . N

aN = 1 from Eq. (36a) we obtain

h(X) =

N K2(X)
H(X)

.

(36c)

(36d)

1). For

−

(37)

If H(X) is not a constant and at the same time degree of P (X(ξ), Y (ξ)) in variable Y is 2 then it is clear from Eqs.
(36a), (37) that h(X) will not be polynomial in X. In this case we avoid such non-polynomial form of h(X) by making
the transformation [47]

in Eq. (31) temporarily. Applying the transformation in Eq. (31) we get

dξ = H(X)dη,

Xη(η) = H(X)Y,
Yη(η) = K0(X) + K1(X)Y + . . . + Kd(X)Y d.

Consequently the nonlinear algebraic system becomes

Y N +1 : H(X) ˙aN (X) + N aN (X)K2(X) = h(X)aN (X),
Y N : H(X) ˙aN

−

1(X) + N K1(X)aN (X) + (N + 1)K0(X)aN +1(X) = g(X)aN (X) + h(X)aN
...

...

Y 1
Y 0

: H(X) ˙a0(X) + K1(X)a1(X) + 2K0(X)a2(X) = g(X)a1(X) + h(X)a0(X),
: K0(X)a1(X) = g(X)a0(X).

(38)

(39a)

(39b)

(40a)

(40b)

(40c)

(40d)

1(X),

−

Now for aN = 1, from Eq. (40a) we get h(X) = N K2(X) which is polynomial in X. In the following steps, we explain
all the procedures with the help of Eq. (36), because the same procedures are applicable when Eq. (40) is considered
for the non-polynomial case of h(X).

Step FIM5(Determine degrees of h(X), g(X), ai(X)(i = 0 . . . N ) and express them in polynomial forms): For
simplicity substitute aN = 1 in Eq. (36a) (in Eq. (40a) for non-polynomial case of h(X)) and obtain polynomial form
of h(X).

To determine polynomial forms of g, ai(i < N ), the degrees of X between L.H.S and R.H.S in each equation of
Eqs. (36) (in Eqs. (40) for non-polynomial case of h(X)) are balanced. The balancing process is implemented in the
following order:

i. Replace g

X dg , h(X), ai

X dai (i < N ) in each equation from (36b) to (36d). Here should be noted, if
degree of P (X(ξ), Y (ξ)) in variable Y is 2 and H(X) is not a constant (i.e. the non-polynomial case of h(X))
then the replacements are done in Eqs. (40) instead of Eqs. (36).

→

→

ii. dg, dai are replaced by the sequence 0, 1, 2, . . . of all positive integers arranged in increasing order. To avoid an
inﬁnite loop, sequences are taken up to a certain maximum number. In our library, the maximum number is 5.
Sometimes it is impossible to balance the equations for any positive integer numbers

iii. Take the numbers from sequences at which L.H.S and R.H.S of each equation are balanced in the degree of X.

6
After balancing, if dg, dai (i < N ) are degrees of g, ai (i < N ) respectively, then g, ai are expressed by

g = g0 + g1X + . . . + gdg X dg,
a0 = a00 + a01X + . . . + a0da0
a1 = a10 + a11X + . . . + a1da1
... =
...
aN

1)0 + a(N

1 = a(N

−

−

−

X da0 ,
X da1 ,

1)1X + . . . + a(N

1)da(N −1)

−

X da(N −1) .

11

(41a)

(41b)

(41c)

(41d)

1, j = 0, 1, . . . , dai ) are arbitrary constants. In GiNaCDE, all possible
Where gi(i = 0, 1, . . . , dg), aij (i = 0, 1, . . . , N
combinations of balanced degrees (whose values are < 6) for g, ai are calculated, and for each combination, the
solutions of input-NLPDE are derived.

−

Step FIM6(Derive the Nonlinear Algebraic System for the parameters gi, aij): Substitute aN = 1 and (41) into
each equation of (36). The coeﬃcients of the power in X, Y in each equation of (36) must vanish. Collect the coef-
ﬁcients and generate a nonlinear algebraic system of equations parametrized by gi, aij, K, P , integrating constants
(for integrable NLPDE) and parameters appearing in input-NLPDE.

Step FIM7(Solve the Nonlinear Parameterized Algebraic System): Here, the external parameters are parameters
appearing in input-NLPDE and integrating constants. Internal parameters are gi, aij, K, P . The nonlinear algebraic
system is solved following a similar process in step F4. Like step F4, here also, the runtime of this algorithm mainly
depends on this step.

Step FIM8(Build solutions): The solutions in step FIM7 are substituted in Eq. (32) and using Y (ξ) = Uξ(ξ),
Eq. (32) converts into ﬁrst-order NLODE called ﬁrst integral form of Eq. (30). Some well-known forms of ﬁrst-order
NLODE with solutions have been listed in Appendix: A, B, C, D. If ﬁrst integral form matches with any form of listed
NLODE in Appendix, solutions are shown, otherwise the program shows only the ﬁrst integral forms. Combining
Eqs. (2), (3), we obtain ﬁnal solutions of input-NLPDE in original variables.

A. Explanation of each step with a working example

To illustrate every step of the above algorithm for the ﬁrst integral method, like the F-expansion method, we have

also used the NLS equation (15).

Step FIM1: Similar to F-expansion method Eq. (15) is converted to Eq. (20) with the condition (19).
Step FIM2: Letting U = X, we recast Eq. (20) as a ﬁrst-order system in traveling-wave coordinate (ξ). So,

Xξ = Y,

Yξ =

1
pk1

2

p0 +

−

(cid:18)(cid:18)

2

k0
4pk1

2

(cid:19)

X + qX 3

.

(cid:19)

Here H(X) = pk1

2.

Step FIM3: We set N = 1, and from Eq. (32) we get

a0(X) + a1(X)Y = 0,

and from Eq. (35) we get

(42)

(43)

1

i=0
X

1

˙ai(X)Y i+1+

iai(X)Y i
−

i=0
X

1 1
pk1

2

p0 +

−

(cid:18)(cid:18)

2

k0
4pk1

2

(cid:19)

X + qX 3

= (g(X) + h(X)Y )

ai(X)Y i,

(44)

1

(cid:19)

i=0
X

Step FIM4: After substitution of (42) into (36) and taking N = 1, one gets

4p2k4

1 ˙a1(X) = 4p2k4

1a1(X)h(X),

(45a)

4p2k4
4pqk2

1 ˙a0(X) = 4gk4
1a1(X)X 3

1p2a1(X) + 4k4
4pp0k2

1a1(X)X + k2

1p2a0(X)h(X),

0a1(X)X = 4p2k4

1a0(X)g(X).

−

12

(45b)

(45c)

Taking a1(X) = 1, from Eq. (45a) we deduce h(X) = 0 that is polynomial. So the transformation (38) is not required
here and we carry out our next derivations with Eqs. (45).

Step FIM5: h(X) = 0 was derived in previous step. Now replacing g

X da0 into Eqs.
(45b), (45c), the exponents of X of L.H.S and R.H.S are collected by two separate list lhs and rhs respectively. After
collections, lhs, rhs are

0, a0 →

X dg , h(X)

→

→

lhs[Eq. 43b] =
lhs[Eq. 43c] =

da0 −
{
3, 1
}
{

}

1

, rhs[Eq. 43b] =

, rhs[Eq. 43c] =

;
1
{
da0 + dg

}

;

}

(46)
(47)

{

Then the values of dg, da0 are increased from 0 to 5. At dg = 1, da0 = 2, we get max(lhs[Eq. 43b]) = max(rhs[Eq. 43b])
and max(lhs[Eq. 43c]) = max(rhs[Eq. 43c]) which detects balancing is successful, and using the balancing degrees
dg = 1, da0 = 2, g, a0 are expressed by

g = g0 + g1X, a0 = a00 + a01X + a02X 2,

(48)

where g0, g1, a00, a01, a02 are arbitrary constants.

Step FIM6: Substituting a1 = 1 and Eq. (41) into each equation of Eqs. (45) and collecting coeﬃcients of

X iY j(i = 0, 1, 2, 3, j = 0, 1), we obtain the following set of nonlinear algebraic equations:

1p2a00g1 −
1a01p2g1 = 0,

4p0k2

1p + k2

0 = 0,

−

−

−

X 0Y 0 :
X 1Y 0 :
X 2Y 0 :
X 3Y 0 : 4k2
X 0Y 1 : 4k4
X 1Y 1 : 8a02k4

4g0k4
4g0k4
4g0a02k4
1pq
−
1a01p2
1p2

1p2a00 = 0,
4k4
1a01p2
1p2
4k4
−
1p2g1 = 0,
4a02k4
1p2 = 0,
1p2g1 = 0.

4g0k4
4k4

−

−

−

(49a)

(49b)

(49c)

(49d)

(49e)

(49f)

Step FIM7: Here, the internal parameters are g0, g1, a00, a01, a02, k0, k1, p0, p1 and external parameters are p, q.

Solving the set of equations (49) for the internal parameters only, the solutions are

a01 = 0, a02 =

g1
2

, g0 = 0, k1 =

√2q
√pg1

±

, p0 =

k0

2g1

3

−
8qg1

16a00q2

a00 = 0, a01 = 0, a02 =

g1
2

, g0 = 0, k1 =

√2q
√pg1

±

, p0 =

k0

2g1
8q

2

.

Step FIM8: Substituting (50a) into (43) the ﬁrst integral form to Eq. (20) is

Uξ + a00 +

g1
2

U 2 = 0.

;

(50a)

(50b)

(51)

Equation (51) is Riccati equation and to ﬁnd its solutions Appendix: A is used. Finally, using (19) and substituting
2q
p , we have the same ﬁrst
−

(50a), 5 exact solutions of Eq. (15) can be obtained. One can note that when g1 =
integral form as given in [32].

q

V. ALGORITHM IMPLEMENTATION

We have implemented the proposed algorithms described in Secs. II, III and IV, into GiNaCDE. GiNaCDE is a
C++ library that is built on a pure C++ symbolic library GiNaC [40]. Besides this library version, we have also
developed a GUI version of GiNaCDE called GiNaCDE GUI. When we solve diﬀerential equations using GiNaCDE
GUI, we do not have to write any C++ code, and compilation of any code is not required. This GUI version guides
us in each step to obtain the output results. However, a complete guide of GiNaCDE GUI has been provided with
the GiNaCDE source code. In both versions of GiNaCDE (library and GUI), the output results are saved in a text
ﬁle with calculating steps. Output results can be saved in Maple or Mathematica programming language by assigning
the C++ macros Maple or Mathematica to the programming variable output.

13

In order to start a solution process for a given NLPDE or NLODE in GiNaCDE, we require some initial data
(the options and parameters speciﬁed by the user). Some programming variables such as twcPhase, positivePart,
negativePart, NValue, degAcoeﬀ, ASolve, paraInDiﬀSolve (detailed descriptions of these variables are given in the
software user manual) are available, which can be initially set up by the users in their own choices for getting better
results for a given NLPDE before starting the solution process in the GiNaCDE software. In all three methods, if
the input NLPDE or NLODE is complex, then the software tries to separate the real and imaginary parts following
the step F1. In all three methods, if the input NLPDE or NLODE is integrable, the software tries to integrate them
after starting the solution process. If the integration is successful, then the software gives an option to us to assign
a numerical or symbolic value to the integrating constant(s) ici (i = 1, 2, ..) in our choices. All these options make
the software more powerful and ﬂexible, enhancing its ability to ﬁnd many new exact solutions to huge variants of
NLPDEs.

Now we shall discuss some implementation details of each method separately:
F-expansion and mF-expansion methods: These methods have been implemented in F expns methd.cpp and
F expns methd.h ﬁles. The F-expansion and mF-expansion methods are chosen by the C++ macros F expansion,
mF expansion respectively. One can use the coordinates K, P in own choices with the help of the programming
variable twcPhase. We can take any one or both parts in the solutions (10) with the help of the programming variables
positivePart, negativePart. In GiNaCDE, we set the maximum allowed value of N at 10. However, sometimes in some
cases, the auto-evaluated value of N exceeds 10. Then this step fails to ﬁnd N . In this case, we can check the solutions
of input-NLPDE by specifying the value of N in our choice lower than 10 with the help of the programming variable
NValue. If we do not assign any value to the variable NValue, the value of N is auto-evaluated following the criteria
in step F2. In these methods, we initially have to input A.E. to start the solution process in GiNaCDE manually. One
can choose the parameters Ai(i = 0, 1, . . . δ) in own choices with the help of the programming variable degAcoeﬀ. The
variable ASolve conﬁrms whether the nonlinear algebraic system will be solved for the parameters contained in A.E. (
i.e., the parameters Ai where i = 0, 1, . . . δ) along with other parameters. The parameters appearing in input-NLPDE
(these parameters are belong to external parameters) are supplied in the programming variable paraInDiﬀSolve to
solve the nonlinear algebraic system for those parameters also. This will determine the conditions on that external
parameters so that exact solutions are obtained.

FIM: This method has been implemented in ﬁm.cpp and ﬁm.h ﬁles. This method is chosen by the C++ macro FIM.
For the ﬁrst integral method, we do not have to input A.E. Here, for initializations, we have only three programming
variables twcPhase, NValue, paraInDiﬀSolve. The variables twcPhase, paraInDiﬀSolve have been discussed above.
Like F-expansion method the value of N is also assigned by the variable NValue and the default value is N = 1.
However, in our library, the allowed values of NValue are 1 and 2.

VI. APPLICATION

In this paper, we have presented the algorithms that automate three diﬀerent methods which can be applied to
determine exact solutions of the wide variant of NLPDEs. F-expansion and mF-expansion methods can be applied to
higher-order NLPDEs. But, FIM method is applicable to an NLPDE when its transformed NLODE (30) is second-
order only. Actually, there are no rules to know in advance the appropriate method among three to solve the given
NLPDE. To illustrate the eﬀectiveness of the algorithms, in the following subsections, using the GiNaCDE library,
we have applied all these three methods to solve some NLPDEs, including higher-order and complex NLPDEs.

To start a solution process for a given NLPDE, we require some initializations (the options and parameters speciﬁed
by the user). There is no rule to know in advance a speciﬁc type of initialization to get better results. However, we have
searched some initializations for solving the following ﬁve examples so that the manually chosen initializations give
better results. In the following examples, such initializations for each NLPDE are also described. The chosen assigned
values of the integrating constant(s) of the integrable NLPDEs among the following examples are also described. In
the case of F-expansion and mF-expansion methods, there are no rules to know in advance what type of A.E. can
give exact solutions for a given NLPDE. In this context, we have shown the solutions of some well-known A.E. in the
Appendix: A, B, C, D. We have checked the solutions for the NLPDEs listed below using some speciﬁc types of A.E.
These speciﬁc forms of A.E. and the corresponding number of solutions with calculating times are shown in Table II.
Here one can note that more new types of solutions of the NLPDEs can be obtained using diﬀerent forms of A.E.

We have well described the procedure to get the exact solutions of an NLPDE using GiNaCDE in the user manual.
We have solved the following examples using the C++ code as given in the examples folder provided with the
GiNaCDE source code. However, in this paper, we do not quote the algebraic expressions of the exact solutions
obtained in the following examples since their ﬁnal expressions are too lengthy. We have observed that some of the
solutions calculated by us were previously reported in the literature. Interestingly in some cases, new solutions are
also obtained, and some new solutions are shown here.

F-expansion

mF-expansion

FIM

14

NLPDEs

A.E.

#Sols.

Eq. (52)
Eq. (54)
Eq. (62)
Eq. (68)
Eq. (73) F ′ = √A0 + A1F + A2F 2 + A3F 3

F ′ = √A0 + A1F
F ′ = √A0 + A2F 2 + A4F 4
F ′ = √A1F + A2F 2 + A3F 3
F ′ = √A2F 2 + A3F 3 + A4F 4

0
40
10
9
0

CPU
time (s)
0.4
6.5
2.4
1.3
0.56

A.E.

#Sols.

F ′ = A1F + A2F 2
F ′ = F + F 2
F ′ = 1 + F + F 2
F ′ = A0 + A1F + A2F 2
F ′ = A0 + A1F + A2F 2

5
4
25
0
14

CPU
time (s)
0.9
13.8
50
33.8
34

#Sols.

5
-
-
0
4

CPU
time (s)
1.2
-
-
1.4
1.7

TABLE II: Number of solutions of some NLPDEs with diﬀerent types of A.E. Solutions are computed with GiNaCDE
library. Test runs performed on a Dell laptop with Intel(R) Core(TM) i5-7200U CPU 2.50 GHz, 8 GB of RAM.

A. Eckhaus equation

Let us consider the Eckhaus equation [25]

Iut + uxx + 2

2

u

|

|
(cid:16)

x
(cid:17)

4u = 0,

u +

u

|

|

(52)

which belongs to a diﬀerent class of integrable NLPDEs, often termed C-integrable equations, i.e. linearizable through
a change of dependent variables, into the linear, free Schr¨odinger equation [48]. In seeking exact solutions of Eq. (52),
many powerful methods have been applied, such as the ﬁrst-integral method [49], G′/G-expansion method [50].

The initializations we have used to solve the Eq. (52) by employing each method available in the GiNaCDE library

are given below:

F-expansion:

twcPhase=
lst{lst{k_0,k_1},lst{p_0,p_1}};
degAcoeff=lst{1,A_0,A_1};
ASolve=false;
positivePart=true;
negativePart=true;
paraInDiffSolve=lst{};
filename="Eckhaus_Fexp.txt";

mF-expansion:

twcPhase=
lst{lst{k_0,k_1},lst{p_0,p_1}};
degAcoeff=lst{2,0,A_1,A_2};
ASolve=false;
positivePart=true;
negativePart=true;
paraInDiffSolve=lst{};
filename="Eckhaus_mF.txt";

FIM:

twcPhase=
lst{lst{k_0,k_1},lst{p_0,p_1}};
paraInDiffSolve=lst{};
filename="Eckhaus_FIM.txt";

In the all methods (F-expansion, mF-expansion and FIM), after substituting the traveling-wave solution (16) into
Eq. (52), it is transformed into NLODE. Then this NLODE is separated into real and imaginary parts. The imaginary
part is integrable and after one time integration GiNaCDE itself assigns the integrating constant to 0. Then from
imaginary part, following the step F1 in the algorithm of automated F-expansion method, GiNaCDE derives the
condition

k1 =

k0
2p1

.

−

(53)

In F-expansion and mF-expansion methods, value of N is 1
2 which is auto-evaluated following the step F2 in our
proposed algorithm. With the condition (53), solutions of the real part are evaluated in all three methods. In F-
expansion method, we do not get any solution. In mF-expansion method, using the solutions of Bernouli equation
given in (B-2) with condition (53), the solutions to Eq. (52) are obtained.

B. Seventh-order Sawada–Kotara equations

J. Feng [51] considered the following Seventh-order Sawada-Kotera equation (sSK)

ut + (63u4 + 63(2u2u2x + uu2

x) + 21(uu4x + u2

2x + uxu3x) + u6x)x = 0,

(54)

to ﬁnd out some closed-form trigonometric, hyperbolic, rational solutions applying G′/G expansion method. Several
methods such as Adomian decomposition method (ADM) [52], He’s variational iteration method [53], Reconstruction
of Variational Iteration Method (RVIM) [54], has been applied for computing approximated solutions to Eq. (54).

The initializations we have used to solve the Eq. (54) by employing each method available in the GiNaCDE library

are given below:

15

F-expansion:

mF-expansion:

FIM:

twcPhase=lst{lst{k_0,k_1},lst{}};
degAcoeff=lst{4,A_0,0,A_2,0,A_4};
ASolve=true;
positivePart=true;
negativePart=false;
paraInDiffSolve=lst{};
filename="7thorder_Fexp.txt";

twcPhase=lst{lst{k_0,k_1},lst{}};
degAcoeff=lst{2,0,1,1};
ASolve=false;
positivePart=true;
negativePart=false;
paraInDiffSolve=lst{};
filename="7thorder_mF.txt";

twcPhase=lst{lst{k_0,k_1},lst{}};
paraInDiffSolve=lst{};
filename="7thorder_FIM.txt";

In the all methods, after transforming Eq. (54) into NLODE using the traveling-wave coordinate ξ given by

u(t, x) = U (ξ) where ξ = k0t + k1x,

(55)

GiNaCDE integrates this NLODE one time, and we have assigned the integrating constant ic1 to 0 in our choice. In
FIM, no solution is obtained. In the case of the F-expansion method, the library returns some new Jacobian solutions
using the known solutions of A.E. given in (C-7). Total 40 new solutions are obtained. For simplicity only 3 new
solutions are presented here:

u(t, x) = a0 +

a2
2

−

(cid:16)

A2

2 +

A2

2S

2A2A4
p

(cid:17)

2A2

JacobiSN2 

r

−

(cid:16)

2

A2

−
2A2

A2

2S

ξ

2A0A4

p

, r

(cid:17)

−

(cid:16)

2A0A4 + A2

2

−

A2

2S

2A0A4

p

A2

2 +

A2

2S

2A2A4
p

A2

2

A2

−
2A2A4
p

(cid:17)

(cid:17)

2S

a2
2

−

(cid:16)

a2
2

−

(cid:16)

u(t, x) = a0 +

u(t, x) = a0 +

where





JacobiCN2 

−

q





A2

A2

2Sξ

A2
p

−

, r

2S

A2

2S

(cid:16)p

2S

S

−



,

(cid:17)

2A2

A2

2 +

A2

2S

ξ

2A0A4

JacobiDN2 

r

(cid:16)

2A2

p

, r

(cid:17)

(cid:16)p
2A0A4




A2

2S

S

−



,

(cid:17)









48A2a0k1

2 + 63a0

−
6 + 132A2
3k1

6A0k1
4 + 63a0

2a0k1

2 + 8A2
2

4

2k1

2√2l

,

±

a2
2k2
1

−

, a2 =

4

24A2

−

A4 =

ξ =

l =

(cid:16)

(cid:16)
4A2

2k1

4 + 42A2a0k1

2 + 63a0

2

(cid:16)
2 + 3a0

A2k1

2A2k1

2 + 3a0

(cid:17)
(cid:17)
, S =

(cid:17)
4A0A4 + A2

3 +

189a0

2

2k1

2√2k1

2l

A2

k1

t + k1x,

±

−
(cid:0)

2

.

(cid:1)

In the above solutions two sign combinations in each solution are to be taken.

(cid:1) (cid:0)

(cid:1) (cid:0)

(cid:1)

q(cid:0)



,

(cid:17)



(56)


(57)

(58)

(59)

(60)

(61)

C. Fifth-order Generalized KdV equation

Consider the general ﬁfth-order KdV equation (gKdV)[55–59]

puu3x + quxu2x + ru2ux + u5x + ut = 0,

(62)

where p, q, r are arbitrary non-zero and real parameters. The model equation (62) has a wide range of applications
in many important physical phenomenon including quantum mechanics, nonlinear optics, plasma physics, one dimen-
sional nonlinear lattice. The values of the parameters p, q, r will drastically change the characteristics of the gKdV
equation (62). Many well-known equations can be constructed from the gKdV equation by changing these parame-

ters, such as: the Lax equation

, the Sawada–Kotera (SK) equation

, the generalized

Kaup–Kupershmidt equation (GKK)
. A variety
of powerful and direct methods have been applied to obtain exact solutions to Eq. (62). Among of them are: the

, the generalized Ito equation (GI)

5

(cid:16)

(cid:17)

(cid:16)

q = p, r = p2
5
q = 2p, r = 2p2
9
(cid:16)

(cid:17)

(cid:17)

q = 2p, r = 3p2
10
(cid:16)
q = 5p

2 , r = p2
(cid:17)

16

extended tanh method [55], the generalized tanh-coth method [56], an extended Jacobian elliptic function expansion
approach [57], Exp-Function method [58, 59]. Zhi-bin Li et al. in their works [35] have found out some new conditions
among p, q, r for which some new solutions were obtained using their computer package RATH. We ask GiNaCDE to
derive solutions of Eq. (62) by applying all three methods available in the library.

We have used the following initializations:

F-expansion:

mF-expansion:

FIM:

twcPhase=lst{lst{k_0,k_1},lst{}};
degAcoeff=lst{3,0,A_1,A_2,A_3};
ASolve=false;
positivePart=true;
negativePart=false;
paraInDiffSolve=lst{r};
filename="5thGKdV_Fexp.txt";

twcPhase=lst{lst{k_0,k_1},lst{}};
degAcoeff=lst{2,1,1,1};
ASolve=false;
positivePart=true;
negativePart=false;
paraInDiffSolve=lst{q};
filename="5thGKdV_mF.txt";

twcPhase=lst{lst{k_0,k_1},lst{}};
paraInDiffSolve=lst{};
filename="5thGKdV_FIM.txt";

In the all methods, GiNaCDE transforms Eq. (62) into traveling-wave coordinate ξ using the Eq. (55) and integrates
it one time. We assign the numerical value 0 to integrating constant ic1. Interestingly, in the case of F-expansion
method, it ﬁnds out some new exact solutions with a new condition

r =

−

3 (3p

−

q) (p
8

q)

,

−

(63)

which is completely diﬀerent from a list of conditions among p, q, r derived in [35]. For the condition (63), with
the help of solutions (C-9) we obtain 10 new Jacobian elliptic solutions. For brevity we quote only following 3 new
solutions

u(t, x) = a0 +

6k2

1A3

A2 + √S

q)

−
(cid:16)
2A3(p

q)

−
12A1k2
1A3
A2 −
1A3
A2 −

(cid:16)
12A1k2

q)

(cid:16)

√S

√S

√2A1A3ξ

A2 + √S

−

2

A2

,

p

−

A2√S
−
√2A1A3

2A1A3

,

!

JacobiSN2

(cid:17)

2

JacobiCN2

4√Sξ
p
2

,

A2 + √S
√2 4√S !

p

,

JacobiDN2

2

(cid:17)

(cid:17)

√2A1A3ξ
A2 −

√S

p

,

4A1A3 + √SA2 −
√2A1A3

p

2

A2

,

!

u(t, x) = a0 −

u(t, x) = a0 −

(p

−

(p

−

where

a0 =

2A2k2
1
q)
(p

−

, S =

−

4A1A3 + A2

2, ξ =

3A3A1 −

 − (cid:0)

A2
2p

2

(3p
2q
(cid:1)
−

5

q) k1

−

t + k1x.

!

D. Perturbed NLS Equation with Kerr Law Nonlinearity

We consider the perturbed NLS equation with Kerr law nonlinearity [29, 63–66]

(64)

(65)

(66)

(67)

2
|

2u + I

2ux + G3

|

|

u

u

u

= 0,

Iut + u2x + A
|

G1u3x + G2|
(cid:0)
where u(t, x) represents the complex function and the parameters G1, G2 and G3 are the higher order dispersion
coeﬃcient, the coeﬃcient of Raman scattering, the coeﬃcient of nonlinear dispersion term respectively, while A
represents ﬁber loss. The model equation (68) has important application in various ﬁelds, such as semiconductor
materials, optical ﬁber communications, plasma physics, ﬂuid and solid mechanics. Several methods for ﬁnding the
exact solutions to (68) have been applied, such as ﬁrst integral method [29], the improved tan
-expansion
method [64], the modiﬁed trigonometric function series method [65], the modiﬁed mapping method and the extended
mapping method [66]. G. Akram et al. [63] recently have successfully applied the extended G′/G2-expansion method
and the ﬁrst integral method on Eq. (68) to ﬁnd some new exact solutions, which include hyperbolic function solutions,
trigonometric function solutions, rational function solutions and soliton solutions. We run GiNaCDE software applying
all the three available methods on Eq. (68). Here we have used the following initializations:

xu
(cid:1)
(cid:1)

φ(ξ)
2

(68)

|
(cid:0)

(cid:17)

(cid:16)

 
 
 
17

F-expansion:

twcPhase=
lst{lst{k_0,k_1},lst{p_0,p_1}};
degAcoeff=
lst{4,0,0,A_2,A_3,A_4};
ASolve=true;
positivePart=true;
negativePart=true;
paraInDiffSolve=lst{};
filename="kerrNLS_Fexp.txt";

mF-expansion:

FIM:

twcPhase=
lst{lst{k_0,k_1},lst{p_0,p_1}};
degAcoeff=lst{2,A_0,A_1,A_2};
ASolve=false;
positivePart=true;
negativePart=true;
paraInDiffSolve=lst{};
filename="kerrNLS_mF.txt";

twcPhase=
lst{lst{k_0,k_1},lst{p_0,p_1}};
paraInDiffSolve=lst{};
filename="kerrNLS_FIM.txt";

In all methods, the software substitutes the traveling-wave solution (16) into Eq. (68), and separates the real part
and the imaginary part following the step F1. The imaginary part is integrated one time and the software assigns the
constant of integration to zero. Then the algebraic expressions of real part and imaginary part are compared and the
software detects that they are same equations subject to the following conditions

3G1k1p2
1

k0 + 2p1k1 −
p2
1 −

−

p0 + G1p3
1

G1k3
1
1 + k2
3G1p1k2
1

=

=

−

2k1G3 + k1G2
3p1G2
3A

−

.

(69)

Same conditions were obtained in [66]. Therefore GiNaCDE evaluates the exact analytical solutions of imaginary part
only.

In the case of F-expansion method, using the solutions (D-8) GiNaCDE produces two new traveling-wave solutions

u(t, x) = a0 −

a1A2A3(cid:18)

sech

(cid:18)

√A2
2

ξ

2

(cid:19)(cid:19)

2

A3

A2A4(cid:18)
1

−

−

tanh

(cid:18)

√A2
2

ξ

(cid:19)(cid:19)

2 , u(t, x) = a0 +

2a1A2sech(√A2ξ)

√

−

4A2A4+A3

2

A3sech(√A2ξ)

−

,

(70)

3k0
l
(cid:19)
2 + a0

x, A2 =

−
2G2 + 2a0

2a0

2 (2G3 + G2) l
27G1k0
2
2G3 + 6p1

2

.

, A3 =

2a0a1 (2G3 + G2) l
27G1k0

2

−

, A4 =

a1

2 (2G3 + G2) l

−

54G1k0

2

,

(71)

(72)

−

(cid:18)
9G1p1

(cid:1)

E. Kudryashov–Sinelshchikov Equation

Now, we study the following Kudryashov–Sinelshchikov equation proposed in [67, 68]:

u3x + guux

nu2x

−

−

uu2x + u2
x

d

kuxu2x

−

−

e (uu3x + uxu2x) + ut = 0,

(73)

where g, n, k, d and e are real parameters. Equation (73) models the pressure waves in a liquid and gas bubbles
mixture when the viscosity of liquid and the heat transfer are both considered. In [47], authors have found the exact
traveling-wave solutions of Eq. (73) by using the ﬁrst integral method. We have also employed the ﬁrst integral
method to ﬁnd exact traveling-wave solutions of Eq. (73) with the help of GiNaCDE and compare our result with
the result in [47].

(cid:0)

(cid:1)

Here we have used the following initializations:

F-expansion:
twcPhase=lst{lst{k_0,k_1},lst{0,0}};
degAcoeff=
lst{3,A_0,A_1,A_2,A_3};
ASolve=true;
positivePart=true;
negativePart=true;
paraInDiffSolve=lst{};
filename="KS_Fexp.txt";

mF-expansion:

FIM:

twcPhase=lst{lst{k_0,k_1},lst{0,0}};
degAcoeff=lst{2,A_0,A_1,A_2};
ASolve=true;
positivePart=true;
negativePart=true;
paraInDiffSolve=lst{};
filename="KS_mF.txt";

twcPhase=lst{lst{k_0,k_1},lst{0,0}};
paraInDiffSolve=lst{};
filename="KS_FIM.txt";

given by

where

ξ = k0t

l =

−
(cid:0)

18

In all methods, GiNaCDE makes the traveling-wave transformation (55) on the Eq. (73) and then it integrates the
transformed NLPDE one time. In the case of F-expansion and mF-expansion methods we do not assign any value to
integrating constant ic1, and ic1 behaves as unknown. But in FIM, we assign the integrating constant ic1 to 0. In
the case of FIM, the software automatically detects that h(X) is not polynomial in X. To avoid such non-polynomial
form of h(X), we have implemented the procedure explained in [47] in step FIM4 of our algorithm. Following step
FIM4, GiNaCDE performs a transformation to avoid singularity temporarily and the corresponding part of output
where GiNaCDE makes the transformation is:

We make the transformation, d xi = (-1+e*X_)*d eta to avoid singularity -1+e*X_ = 0 temporarily.
Let U = X_, Diff(U,eta, 1) = Y_*(-1+e*X_), then we get
Diff(X_,eta, 1) = Y_*(-1+e*X_),
Diff(Y_,eta, 1) = -1/2*k*Y_^2-(d*k_1^(-1)*X_+n*k_1^(-1))*Y_+1/2*g*k_1^(-2)*X_^2+k_0*k_1^(-3)*X_,

k
After that transformation, assuming a1 = 1, the software evaluates h =
2 . Then the degrees of a0, g are auto-
evaluated following the strategy in step FIM5 and it ﬁnds two sets of balanced degrees which are deg(a0, g) =
(2, 0), (1, 1). Second set of balanced degrees was also obtained in [47]. For ﬁrst balanced degrees set (2, 0), the
software ﬁnds the exact solutions of Eq.
(73) only for k0 = 0, k1 = 0.
Interestingly all our results derived by
GiNaCDE using FIM match with [47] if we replace k0, k1 with

c, 1 respectively.

−

Finally, we have also solved the above-listed ﬁve examples with the help of RAEEM Maple package [38]. We have
seen that RAEEM with Maple v. 8.0 is unable to solve the NLPDEs (52), (62) and (68). RAEEM can only solve
the NLPDEs (54), (73), and gives 6, 6 solutions with CPU times 61 s, 250 s respectively. Beside the above examples,
we have successfully solved more than 20 NLPDEs (provided in the result and test folders of GiNaCDE source code)
using the GiNaCDE library and it gives results not more than 100 S.

−

VII. CONCLUSIONS

We have presented the algorithms for the high-performance automated F-expansion and First Integral Methods.
We have also implemented these algorithms in a C++ library named GiNaCDE. This library is used to ﬁnd the
closed-form traveling-wave solution of the NLPDEs of the form (1). The solution methods described in the Secs. II,
III and IV, are very tedious if we apply these three methods on an NLPDE by hand. The program library automates
the methods and delivers possible solutions when they exist. However, in this context, in order to start the solution
process, we have to provide some initial data (the options and parameters speciﬁed by the user) to the library. After
running the solution process, there is also scope to assign the values to integrating constants generated from integrable
NLPDEs. From these points of view, we can tell that our algorithms are not fully automated. But, these features
make the library more eﬃcient and powerful to tackle a large class of NLPDEs. Due to the implementations of three
diﬀerent methods in one software, one can easily check exact traveling-wave solutions of a huge variant of NLPDEs
by applying those methods in one place with less labor.

We have introduced an exciting feature in our proposed algorithms, by which one can solve the complex NLPDEs.
The program library can integrate the input-NLPDE or the transformed NLODE when possible. The generated
integrating constants can be assigned with the values in our choice after running the program. Following [47], we have
added another interesting feature in the algorithm for the ﬁrst integral method. According to this new feature, our
proposed algorithm is capable of tackling the non-polynomial form of h(X) in Eq. (37). We have applied the package
to a wide class of nonlinear evolution equations. It successfully recovered all previously known solutions that many
powerful methods had found. More importantly, we have found new solutions and a more general form of solutions
for some of the equations considered.

Many computer packages such as RATH [35], PDESpecialSolutions.m [36, 37], RAEEM [38] are currently available
which can solve the NLPDEs of the form (1) using some popular methods other than F-expansion, modiﬁed F-
expansion, and ﬁrst integral methods. These currently available packages cannot solve the NLPDEs containing
complex conjugate functions, but GiNaCDE can solve such type of NLPDEs. We have compared the performances
of GiNaCDE and RAEEM [38] by solving some NLPDEs listed in Sec. VI. We have observed that RAEEM cannot
solve 3 NLPDEs among 5 examples, but interestingly GiNaCDE can solve all the NLPDEs. We have also noted that
GiNaCDE is much faster than RAEEM. We have tested the GiNaCDE library on more than 20 NLPDEs and it gives
results not more than 100 S.

The program library shows the results with calculating steps, and the results are saved in a text ﬁle. We have also
provided a GUI version of our library that can be used without any programming knowledge. Thus, the GiNaCDE
can be easily used to solve a broad class of NLPDEs for obtaining exact solutions of NLPDEs, and it is very eﬃcient
and fast to get the solutions.

19

Since our software performs the computations automatically from start to ﬁnish without human intervention except
for few steps in the algorithms, it may not return the solutions in the simplest form.
If required, the user can
further manipulate and graph the solutions. The most important and vital step in the algorithms is analyzing and
solving the nonlinear algebraic system.
In the algorithms, most of the computation time is spent in solving the
nonlinear algebraic system. So for a complicated algebraic system, the library takes more time to solve an NLPDE.
Furthermore, sometimes the nonlinear algebraic system may be quintic or higher degree and may contain a large
number of parameters, and then it may be unsolvable in analytic form. Therefore, although unlikely, due to the
limitations of the algebraic solver, some exact solutions of NLPDEs may be missed.

The GiNaCDE library for its algebraic manipulations depends only on the GiNaC library [40]. GiNaC algebra
system assigns a symbol id to each name of a symbol, and unlike other algebra systems, it uses the symbol id instead
of its name for algebraic manipulations. Since the symbols id may change for each running session of the program,
the same algebraic expressions may appear in diﬀerent order of symbols. We have noted that the present version of
GiNaCDE cannot handle a system of NLPDEs. However, it is expected that these limitations can be removed in the
future version of GiNaCDE. For F-expansion and modiﬁed F-expansion methods, the solutions were considered in the
form (10). Many researchers have considered the solutions in several other forms. Z. Sheng [23] considers solutions of
the form

N

U = a0(ξ) +

a

i=1 (cid:26)
X

i(ξ)F −

i(ξ) + ai(ξ)F i(ξ) + bi(ξ)F i
−

1(ξ)

−

dF (ξ)
dξ

.
(cid:27)

(74)

i and bi are not constant, and they depend on traveling-wave coordinate ξ. Y.M. Zhao

Here the parameters a0, ai, a
[19] seeks the solutions of the form

−

N

U = a0 +

aiF i(ξ) + biF i
−

1(ξ)

i=1 (cid:18)
X

dF (ξ)
dξ

.
(cid:19)

(75)

So there is a scope to extend the capabilities within GiNaCDE to ﬁnd the solutions in the forms (74), (75). We will
introduce such extensions in a future version of GiNaCDE.

Appendix A: Solutions of Riccati equation

In case of Riccati equation, Eq. (29) take the form

F ′ (ξ) = A0 + A1F + A2F 2.

The solutions of the equation (A-1) are [? ]

F (ξ) =

F (ξ) =

A1
2A2 −
A1
2A2 −

−

−

S
2A2
S
2A2

tanh

coth

(cid:18)

(cid:18)

F (ξ) =

F (ξ) =

A1
2A0

A1
2A0

+

+

S
2A0

S
2A0

tanh

coth

−

(cid:18)

−

(cid:18)

S
2
S
2

(cid:18)

ξ + C

ξ + C

(cid:19)

(cid:19)

S
2

ξ + C

ξ + C

S
2

(cid:18)

(cid:19)(cid:19)

1

−

(cid:19)(cid:19)

−

1

F (ξ) =

−

A1
2A2 −

S
2A2

Sξ
2

tanh

+ C

+

(If A2 6

= 0 and A1orA0 6

= 0),

(If A2 6

= 0 and A1orA0 6

= 0),

(If A0 6

= 0 and A1orA2 6

= 0),

= 0),

(If A0 6
sech2

= 0 and A1orA2 6
Sξ
2 + C
(cid:17)
Sξ
2 + C

C

(cid:16)
2A2
S tanh

(A-1)

(A-2a)

(A-2b)

(A-2c)

(A-2d)

(A-2e)

(cid:18)

F (ξ) = -

(If A2 6

(cid:19)
= 0 and A1orA0 6

−
= 0),
+ CeA1ξ, (If A2 = 0 and A1 6
F (ξ) = A0ξ + C (If A2 = A1 = 0 and A0 6
4A0A2 and C is auxiliary constant. In the above solutions, from Eq. (A-2a) to (A-2e), the

(A-2g)

A0
A1

(A-2f)

= 0),

= 0),

(cid:17)

(cid:16)

where S =
condition A2

A2
4A0A2 > 0 must be satisﬁed.

1 −

1 −

p

Please note that in the following solutions if not mentioned C has to be assumed as an auxiliary constant.

Appendix B: Solutions of Bernoulli equation

In case of Bernoulli equation, Eq. (29) is reduced to

F ′ (ξ) = A1F + AδF δ.

The solutions of the equation (B-1) are

A1 (cosh (A1 (δ
Aδ cosh (A1 (δ

1) ξ + CA1) + sinh (A1 (δ
1) ξ + CA1)

−
Aδ sinh (A1 (δ

−1

1)

(δ

−

1) ξ + CA1))

1) ξ + CA1)

(cid:19)

−

+ CeA1(1

−

δ)ξ

= 0 and δ

= 1),

−
Aδ
A1

F (ξ) =

F (ξ) =

F (ξ) =

F (ξ) =

1

(cid:18)

−

(cid:18)

−

(cid:18)

−

(cid:18)

A1
2Aδ −

A1
2Aδ

A1
2Aδ −

A1
2Aδ

tanh

coth

−
−

1
1−δ

(δ

(δ

(cid:19)

(cid:18)

(cid:18)

−

(If A1 6
1)A1
−
2

ξ + C

1)A1
−
2

ξ + C

F (ξ) =

(Aδξ(1

δ) + C)(δ

−

1)

−

F (ξ) = Ce(A1+Aδ)ξ (If δ = 1).

(cid:16)

−1

1

−

(cid:17)

1
δ−1

(cid:19)(cid:19)

1
δ−1

(If A1 6

= 0 and δ

= 1),

(If A1 6

= 0 and δ

= 1),

(cid:19)(cid:19)
(If A1 = 0 and δ

= 1)),

20

(B-1)

(If A1 6

= 0 and δ

= 1),

(B-2a)

(B-2b)

(B-2c)

(B-2d)

(B-2e)

(B-2f)

(C-1)

Appendix C: ﬁrst-order NLODEs related to Jacobi Elliptic Functions

The incomplete elliptic integral of the ﬁrst kind, is deﬁned by

u(φ, m) =

φ

Z0

1

dθ
m2sin2θ

,

−

p
where m is the elliptic modulus, and φ = JacobiAM(u, m) is the Jacobi amplitude which is the inverse of elliptic
integral (C-1). The three principal elliptic functions are denoted JacobiSN(u, m), JacobiCN(u, m), JacobiDN(u, m),
which are in turn deﬁned in terms of the amplitude function JacobiAM satisfying

JacobiSN(u, m) = sin (JacobiAM(u, m)) ,
JacobiCN(u, m) = cos (JacobiAM(u, m)) ,
∂
∂u

JacobiAM(u, m) =

JacobiDN(u, m) =

m2JacobiSN(u, m)2.

1

−

(C-2)
(C-3)

(C-4)

There are total twelve Jacobian functions that can be expressed in general by a name JacobiXY which follows the
JacobiQR . Here X, Y, R are any three of S, C, N, D. Following these rules of
identities JacobiXY =
notations other nine subsidiary Jacobian elliptic functions can be deﬁned in terms of the three JacobiSN, JacobiCN,
JacobiDN by the following identities:

JacobiYX = JacobiPR

1

p

JacobiNS(u, m) = (JacobiSN(u, m))−

JacobiSD(u, m) = (JacobiDS(u, m))−

1, JacobiND(u, m) = (JacobiDN(u, m))−
1, JacobiDC(u, m) = (JacobiCD(u, m))−

1,
1, JacobiSC(u, m) = (JacobiCS(u, m))−
1,
1, JacobiNC(u, m) = (JacobiCN(u, m))−

JacobiCS(u, m) =

JacobiCN(u, m)
JacobiSN(u, m)

, JacobiDS(u, m) =

JacobiDN(u, m)
JacobiSN(u, m)

, JacobiCD(u, m) =

JacobiCN(u, m)
JacobiDN(u, m)

. (C-5)

Jacobian elliptic functions can also be deﬁned as solutions to the diﬀerential equations

F ′(ξ) =

A0 + A2F 2 + A4F 4.

(C-6)

p

6
6
6
6
6
Solutions of Eq. (C-6) in terms of Jacobi elliptic functions are listed in below (with the conditions that all the algebraic
expressions within square-root must be greater than 0):

21

A2

2 +

−
2A2A4

(cid:16)

A2

2S

2A2

p

JacobiSN 

r

(cid:17)

−

(cid:16)





2

A2

−
2A2

A2

2S

ξ

2A0A4

p

, r

(cid:17)

−

(cid:16)

2A0A4 + A2

2

−

A2

2S

2A0A4

p

2A2A4

F (ξ) = r

2A2A4

F (ξ) = r

2A2A4

F (ξ) = r

A2

2 +

−
2A2A4

(cid:16)

A2

2S

p

JacobiCN 

(cid:17)

−

q

A2

A2

2Sξ

A2
p

−

, r

2S

A2

2S

(cid:16)p

2S

S

−



,

(cid:17)





A2

2S

2

A2

−

−
2A2A4

(cid:16)

p

JacobiDN 

r

(cid:17)

(cid:16)

2A2

p

, r

(cid:17)

(cid:16)p
2A0A4

2A2

A2

2 +

A2

2S

ξ

2A0A4




A2

2S

S

−



,

(cid:17)





2A4

F (ξ) = r

(cid:16)

A2 + √S

−
2A4

JacobiNS 

1/2

(cid:17)





2A0A4

2A2 + 2√Sξ, r

−

q

2A0A4 + A2

2

A2√S
(cid:16)

−
2A0A4

F (ξ) =

F (ξ) =

2√S

2A2 −
2√A4

−

p

2A2 + 2√S
2√A4

−

p

JacobiNC

JacobiND





√Sξ,

−

 q
√

−
A2√S
p

−

p
2A0A4ξ
A2 + √S

,

√
2A0A4
−
A2√S + S !
2A2√S
−
2√A0A4

,

p

2S

,

!

A2√S + S

2
p

A2

JacobiSD

−

A2√S
p
A2√S + Sξ
p
A2 + √S

,

  p

2A0A4 + A2

2 !

A2√S + 2A0A4 −
A2√S
S

−

p

,

−

F (ξ) =

−

√2√A0
A2 + √S

JacobiSC

  p

2A0A4 + A2

−
A2 + √S

2ξ

,

A2√S + 2A0A4 −
A2√S
S
−

−

p
JacobiCS

F (ξ) =

F (ξ) =

F (ξ) =

√2√A0
p

−
A2 + √S
p
√2√A0
p
A2 + √S
A2√S
A2A4 −
p

S
−
A4√S

p

√2A0A4ξ
A2 + √S

,

A2√S
−
√2A0A4 !

p
S
−

,

p
JacobiDS

p
A2√S
A2 −

  p

Sξ

−
√S

,

√2A0A4
A2√S

−

,

S !

−

p



,

(cid:17)





2

A2

,

!



,

(cid:17)



(C-7a)


(C-7b)

(C-7c)

(C-7d)

(C-7e)

(C-7f)

(C-7g)

(C-7h)

(C-7i)

(C-7j)

p

p

p

2

(cid:1)

. We note that Jacobian functions in all the above solutions are in the form C1JacobiXY(C2ξ, C3),

−
(cid:0)

4A0A4 + A2

where S =
where C1, C2, C3 are constants which contains only the constant parameters of diﬀerential equation (C-6). It will
be better to express them in the convenient form JacobiXY(ξ, m) by putting C1 = 1, C2 = 1, C3 = m. We de-
rive the values of the constant parameters A0, A2, A4 in terms of modulus m by solving the system of equations
simultaneously. There have some advantages to have solutions in the form JacobiXY(ξ, m).
C1 = 1, C2 = 1, C3 = m
{
We can transform JacobiSN(ξ, m), JacobiCN(ξ, m), JacobiDN(ξ, m) into hyperbolic functions tanh(ξ), sech(ξ), sech(ξ)
1. We can also simply get the trigonometric transformations
respectively simply making the approximation m
JacobiSN(ξ, m)
1 in the limit
0. So by choosing a single A.E. (C-6) one can obtain a variety of exact solutions of NLPDEs in terms of
case m
Jacobian elliptic functions, hyperbolic functions and trigonometric functions. Table III shows all the solutions of the
parameters A0, A2, A4 solving the system of equations
and the corresponding solutions of
Eq. (C-6) are given in last column. Interestingly the values of A0, A2, A4 in Table III coincide with the ones given in
[13].

cos(ξ) and also get the transformation JacobiDN(ξ, m)

C1 = 1, C2 = 1, C3 = m

sin(ξ), JacobiCN(ξ, m)

→

→

→

→

→

}

}

{

 
 
A0

A2

A4

F (ξ)

22

1
m2
1

1
−
m2

−
m2
m2
1

−
−
1

1
m2

1
−
m2(1

−

m2)

−

−

(1 + m2)
−
2m2
1
−
m2
2
(1 + m2)
−
2m2
1
−
m2
2
m2

−

m2
m2
−
1
−
1
m2
1
−
m2

1
−
m2

2
−
2m2
2
−
2m2

1
−
m2(1
1

1

−

1
−
m2

1

−

m2)

−

JacobiSN(ξ, m)
JacobiCN(ξ, m)
JacobiDN(ξ, m)
JacobiNS(ξ, m) = (JacobiSN(ξ, m))−1
JacobiNC(ξ, m) = (JacobiCN(ξ, m))−1
JacobiND(ξ, m) = (JacobiDN(ξ, m))−1
JacobiSC(ξ, m) = JacobiSN(ξ,m)
JacobiCN(ξ,m)
JacobiSD(ξ, m) = JacobiSN(ξ,m)
JacobiDN(ξ,m)
JacobiCS(ξ, m) = JacobiCN(ξ,m)
JacobiSN(ξ,m)
JacobiDS(ξ, m) = JacobiDN(ξ,m)
JacobiSN(ξ,m)

TABLE III: Solutions F (ξ) of Eq. (C-6) in terms of Jacobi elliptic functions for some values of A0,A2 and A4 [13].
Here the values of A0,A2 and A4 are taken through modulus (m) in most cases.

The solutions of an another ﬁrst-order NLODE

can also be expressed in terms of Jacobi elliptic functions. The solutions of Eq. (C-8) are (with the conditions that
all the algebraic expressions within square-root must be greater than 0)

p

F ′(ξ) =

A1F + A2F 2 + A3F 3,

(C-8)

F (ξ) = −

A2 + √S
2A3

JacobiSN2

JacobiCN2

2

A2

,

−

A2√S
−
√2A1A3

2A1A3

,

!

√2A1A3ξ

2

−
4√Sξ
p
2

,

A2 + √S

p
A2 + √S
√2 4√S !

,

p

√S

2A1
A2 −
2A1
A2 −
2A1
A2 + √S

√S

−

−

−

F (ξ) =

F (ξ) =

F (ξ) =

F (ξ) =

F (ξ) =

JacobiDN2

2

√2A1A3ξ
A2 −

√S

,

4A1A3 + √SA2 −
√2A1A3

p

2

A2

,

!

JacobiNS2

A2 + √Sξ,

A2 + √S
A2 −

√S !

p

A2 + √S
p
,
√2 4√S !

p
A2 + √Sξ

,

√2 4√S
h2 + √S !

,

−

√2
p
4

q
4√Sξ
2

,

√2

4
p
√SA2 −
2

,

√SA2 + S

2A1
A2 + √S

−

2A1
A2 + √S

−

JacobiNC2

JacobiND2

F (ξ) =

2A1
A2 + √S

JacobiSC2

  p

p

2A1A3 + A2
A2 + √S

2ξ

,

2A1

2A1A3 + √SA2 + A2

2

p

√SA2 + S

(cid:17)

JacobiSD2

2
  p

√SA2 −
p
√SA2 + Sξ
A2 + √S

p

,

2A1A3 + A2

2 !

,

2A1A3 −
−

√SA2 −
S

√SA2 −

p

F (ξ) =

F (ξ) =

−

(cid:16)
A2 + √S
(cid:16)
2A1
A2 −

√S
√SA2 −
S
A2 + √S

F (ξ) = −
A3

where

(cid:16)

(cid:17)

(cid:17) (cid:16)
JacobiCS2

√2

(cid:17)

√A1A3ξ
A2 −
−
2
  p

p

,

√S
p
√SA2 −
A2 + √S

Sξ

JacobiDS2

p
√SA2 −
√2A1A3 !

S

p

,

,

√2A1A3
√SA2 −

−

,

S !

p

p

S =

−

4A1A3 + A2

2.

(C-9a)

(C-9b)

(C-9c)

(C-9d)

(C-9e)

(C-9f)

(C-9g)

(C-9h)

(C-9i)

(C-9j)

(C-10)

2

A2

,

!

 
 
 
 
 
 
 
Using the values of A1, A2, A3 listed in Table IV, one can transforms Jacobi elliptic functions which are present in

the solutions into the simpliﬁed form JacobiXY(ξ, m).

A1

A2

A3

F (ξ)

23

4
4(m2
−
4(m2

1)
1)

−
−
4m2
4m2
4
−
4
4

−

4(1
−
4m2(1

m2)

m2)

−

−

4(1 + m2)
−
4(2m2
1)
−
m2)
4(2
−
4(1 + m2)
1)
−
m2)
m2)
1)
−
m2)
1)

−
4(2m2
4(2
−
4(2
−
4(2m2
4(2
−
4(2m2

−

−

4m2
4m2
4
−
4
4(m2
−
4(m2
4(1
−
4m2(1
4
4

−

−

1)
−
1)
−
m2)

m2)

JacobiSN2(ξ, m)
JacobiCN2(ξ, m)
JacobiDN2(ξ, m)
JacobiNS2(ξ, m)
JacobiNC2(ξ, m)
JacobiND2(ξ, m)
JacobiSC2(ξ, m)
JacobiSD2(ξ, m)
JacobiCS2(ξ, m)
JacobiDS2(ξ, m)

TABLE IV: Solutions F (ξ) of Eq. (C-8) in terms of Jacobi elliptic functions for some values of A1,A2 and A3. Here
the values of A1,A2 and A3 are taken through modulus (m) in most cases.

Appendix D: Solutions of some more diﬀerent types of ﬁrst-order NLODEs

In this section, we discuss the solutions of more diﬀerent types of the ﬁrst-order NLODE. Among them, we can

choose an auxiliary equation suitable for input-NLPDE.
Type-1 ﬁrst-order NLODE:

Let us ﬁrst consider the ﬁrst-order NLODE as follows

F ′(ξ) =

A0 + A2F 2 + A4F 4 + A6F 6.

(D-1)

The above equation admits following special hyperbolic solutions [69]:

p

If A0 = 8A2
2
27A4

and A6 = A2
4
4A2

then it has a bell proﬁle solution

and a singular solution

8A2

tanh

(cid:18)

−

(cid:18)q

A2
3 ξ + C

2

(cid:19)(cid:19)

2

3A4

3 +

tanh

(cid:18)

A2
3 ξ + C

(cid:19)(cid:19)

!

−

(cid:18)q

−

F (ξ) = 






F (ξ) =

8A2

coth

(cid:18)

−

(cid:18)q

A2
3 ξ + C

2

(cid:19)(cid:19)

2

3A4

3 +

coth

(cid:18)

A2
3 ξ + C

(cid:19)(cid:19)

!

−

(cid:18)q

−









1
2

,









1
2

.









Type-2 ﬁrst-order NLODE:

For A0 = 0 Eq. (D-1) is reduced to

Equation (D-3) has a triangular periodic solution [69]

p

F ′(ξ) =

A2F 2 + A4F 4 + A6F 6.

F (ξ) =



2



A2

4 −

4A2A6 −

p

(cid:16)p

2A2sech2(√A2ξ + C)
4A2A6 + A4

A2

4 −

1
2

,

sech2(√A2ξ + C) 


(cid:17)

(D-2a)

(D-2b)

(D-3)

(D-4a)

 
 
and a singular triangular periodic solution

F (ξ) =



2

A2

4 −

4A2A6 +

2A2csch2(√A2ξ + C)
A4

A2

4A2A6 −

4 −

1
2

.

csch2(√A2ξ + C) 


(cid:17)

If A6 = A2
4
4A2

p
, Eq. (D-3) also admits a kink proﬁle solution

(cid:16)p



and a singular solution

F (ξ) =

A2
A4

−

(cid:18)

(cid:16)

1 + tanh

A2ξ + C

(cid:16)p

(cid:17)(cid:17)(cid:19)

When A4 = 0 Eq. (D-3) is reduced to

F (ξ) =

A2
A4

−

(cid:18)

1 + coth

A2ξ + C

(cid:16)

(cid:16)p

(cid:17)(cid:17)(cid:19)

F ′(ξ) =

A2F 2 + A6F 6.

1
2

,

1
2

.

24

(D-4b)

(D-5a)

(D-5b)

(D-6)

p
It is clear that the Eqs. (D-4a), (D-4b) with A4 = 0 are also solutions of Eq. (D-6), but Eqs. (D-5a), (D-5b) are not
solutions of Eq. (D-6) as they are undeﬁned at A4 = 0.
Type-3 ﬁrst-order NLODE:

An another type of ﬁrst-order NLODE is

F ′(ξ) =

A2F 2 + A3F 3 + A4F 4,

(D-7)

p
which has diﬀerent type solitary wave solutions [70]

F (ξ) =

A2A3

sech

√A2
2 ξ

2

−

2

A3

−

(cid:16)
A2A4

1

(cid:16)
tanh

(cid:17)(cid:17)
√A2
2 ξ

(cid:16)

(cid:17)(cid:17)

−

(cid:16)

For A4 = 0 Eq. (D-7) is reduced to

2 , F (ξ) =

2A2sech
2

4A2A4 + A3

√A2ξ

A3sech

(cid:1)

√A2ξ

(cid:0)
−

(cid:0)

(cid:1)

−

p

.

(D-8a)

F ′(ξ) =

A2F 2 + A3F 3.

(D-9)

One can get the solutions of above equations substituting A4 = 0 in solutions (D-8a), (??). If A3 = 0 Eq. (D-7) is
simpliﬁed to

p

Solutions (D-8a), (??) with A3 = 0 also exist for (D-10). Beside these solutions Eq. (D-10) has following two extra
solutions:

p

F ′(ξ) =

A2F 2 + A4F 4.

(D-10)

F (ξ) =

Type-4 ﬁrst-order NLODE:

−

4A2e(ξ+C)√A2
4A2A4e2√A2ξ + e2C√A2

, F (ξ) =

4A2e(ξ+C)√A2
4A2A4e2C√A2 + e2√A2ξ

.

−

We will now consider one more simpliﬁed ﬁrst-order NLODE

F ′(ξ) =

A0 + A2F 2.

(D-11a)

(D-12)

p
We ﬁnd some exact solutions of Eq. (D-12) containing exponential, hyperbolic functions, which are listed below

F (ξ) =

−

(cid:16)

A0e2ξ√A2 + e2C√A2

e−

(C+ξ)√A2

2√A2

(cid:17)

, F (ξ) =

−

(cid:16)

e2ξ√A2 + A0e2C√A2

e−

(C+ξ)√A2

2√A2

(cid:17)

F (ξ) =

A0
−
A2

±r

cosh

ξ

A2 + C

, F (ξ) =

(cid:16)

p

(cid:17)

A0
A2

±r

sinh

ξ

A2 + C

.

(cid:16)

p

(cid:17)

,

(D-13a)

(D-13b)

REFERENCES

25

[1] W. Malﬂiet, Solitary wave solutions of nonlinear wave equations. Am. J. Phys. 60 (1992) 650.
[2] E.J. Parkes, B.R. Duﬀy, An automated tanh-function method for ﬁnding solitary wave solutions to non-linear evolution

equations. Comput. Phys. Comm. 98 (1996) 288–300.

[3] EG Fan, Extended tanh-function method and its applications to nonlinear equations. Phys Lett A. 277 (2000) 212-218.
[4] S. Liu, Z. Fu, S. Liu, Q. Zhaoa, Jacobi elliptic function expansion method and periodic wave solutions of nonlinear wave

equations. Physics Letters A. 289 (2001) 69–74.

[5] E.J. Parkes, B.R. Duﬀy, The Jacobi elliptic-function method for ﬁnding periodic-wave solutions to nonlinear evolution

equations. Phys. Lett. A. 295 (2002) 280–286.

[6] W.X. Ma, T.W. Huang, Y. Zhang, A multiple exp-function method for nonlinear diﬀerential equations and its application.

Phys. Scr. 82 (2010) 065003.

[7] W.X. Ma, Travelling wave solutions to a seventh order generalized KdV equation. Phys. Lett. A. 180 (1993) 221–224.
[8] W.X. Ma, B. Fuchssteiner, Explicit and exact solutions to a Kolmogorov–Petrovskii–Piskunov equation. Int. J. Non-Linear

Mech. 31 (1996) 329–338.

[9] T.C. Xia, B. Li, H.Q. Zhang, New explicit and exact solutions for the Nizhnik–Novikov–Vesselov equation. Appl. Math.

E-Notes 1 (2001) 139–142.

[10] A.M. Wazwaz, The sine–cosine method for obtaining solutions with compact and noncompact structures. Appl. Math.

Comput. 159 (2) (2004) 559–576.

[11] C.S. Gardner, J.M. Greene, M.D. Kruskal, R.M. Miura, Method for solving the Korteweg–de Vries equation. Phys. Rev.

Lett. 19 (1967) 1095–1097.

[12] R. Hirota, Exact solution of the Korteweg–de Vries equation for multiple collision of solitons. Phys. Rev. Lett. 27 (1971)

1192–1194.

[13] Y. Zhou, M. Wang, and Y. Wang, Periodic wave solutions to a coupled KdV equations with variable coeﬃcients. Physics

Letters A. 308 (2003) 31–36.

[14] Z. Feng, On Explicit Exact Solutions to the Compound Burgers-KdV Equation. Physics Letters A. 293 (2002) 57-66.

doi:10.1016/S0375-9601(01)00825-8

[15] Z. Feng, The ﬁrst integer method to study the Burgers-Korteweg-de Vries equation. Journal of Physics A: Mathematical

and General. 35 (2002) 343-349.

[16] J. Liu, Kongqing Yang, The extended F-expansion method and exact solutions of nonlinear PDEs. Chaos, Solitons &

Fractals. 22 (2004) 111-121.

[17] W. Mingliang, L. Xiangzheng, Extended F-expansion and periodic wave solutions for the generalized Zakharov equations.

Physics Letters A. 343 (2005) 48-54.

[18] W. Mingliang, L. Xiangzheng, Applications of Expansion to periodic wave solutions for a new Hamiltonian amplitude

equation. Chaos, Solitons & Fractals. 24 (2005) 1257-1268.

[19] Y.M. Zhao, F-Expansion Method and Its Application for Finding New Exact Solutions to the Kudryashov-Sinelshchikov

Equation. Journal of Applied Mathematics. 2013 (2013) 7. doi:10.1155/2013/895760

[20] S. Zhang, T. Xia, A generalized F-expansion method and new exact solutions of Konopelchenko–Dubrovsky equations.

Applied Mathematics and Computation. 183 (2006) 1190-1200.

[21] Y.J. Ren, H.Q. Zhang, A generalized F-expansion method to ﬁnd abundant families of Jacobi Elliptic Function solutions

of the (2+1)-dimensional Nizhnik–Novikov–Veselov equation. Chaos, Solitons & Fractals. 27 (2006) 959-979.

[22] J.L. Zhang, M.L. Wang, Y.M. Wang & Z.D. Fang, The improved F-expansion method and its applications. Physics Letters

A. 350 (2006) 103-109.

[23] Z. Sheng, Further improved F-expansion method and new exact solutions of Kadomstev–Petviashvili equation. In Chaos,

Solitons & Fractals. 32 (2007) 1375-1383. https://doi.org/10.1016/j.chaos.2005.11.070

[24] G. Cai, Q. Wang, J, Huang, A Modiﬁed F-expansion Method for Solving Breaking Soliton Equation. International Journal

of Nonlinear Science. 2 (2006) 122.

[25] N. Taghizadeh et al., The ﬁrst-integral method applied to the Eckhaus equation. Applied Mathematics Letters, 25 (2012)

798.

[26] K.R. Raslan, Nonlinear Dyn. 53 (2008) 281. https://doi.org/10.1007/s11071-007-9262-x
[27] N. Taghizadeh, M. Mirzazadeh, The ﬁrst integral method to some complex nonlinear partial diﬀerential equations. In
Journal of Computational and Applied Mathematics. 235 (2011) 4871-4877. https://doi.org/10.1016/j.cam.2011.02.021
[28] M. Mirzazadeh, Exact solutions of the Kudryashov-Sinelshchikov equation and nonlinear telegraph equation via the ﬁrst

integral method. Nonlinear Analysis: Modelling and Control. 17 (2012) 481-488.

[29] H. Moosaei, M. Mirzazadeh, A. Yildirim, Exact solutions to the perturbed nonlinear Schr¨odinger’s equation with Kerr law

nonlinearity by using the ﬁrst integral method. Nonlinear Analysis: Model.Control. 16 (2011) 332-339.

[30] N. Taghizadeh, M. Mirzazadeh, A. Samiei Paghaleh, Exact solutions of some nonlinear evolution equations via the ﬁrst

integral method. In Ain Shams Engineering Journal. 4 (2013) 493-499. https://doi.org/10.1016/j.asej.2012.10.002

[31] N. Taghizadeh, M. Mirzazadeh, A. Samiei Paghaleh, The First Integral Method to Nonlinear Partial Diﬀerential Equations.

Applications and Applied Mathematics. 7 (2012) 117 – 132.

[32] N. Taghizadeh, M. Mirzazadeh, F. Farahrooz, Exact

solutions of
of Mathematical Analysis

the nonlinear Schr¨odinger
and Applications.

374

equation by
549-553.

(2011)

the ﬁrst
integral method.
https://doi.org/10.1016/j.jmaa.2010.08.050

In Journal

26

[33] H. Jafari et al., The ﬁrst integral method and travelling wave solutions to Davey–Stewartson equation. Nonlinear Analysis:

Modelling and Control. 17 (2012).

[34] E.J. Parkes, B.R. Duﬀy, An automated tanh-function method for ﬁnding solitary wave solutions to non-linear evolution

equations. Comput. Phys. Comm. 98 (1996) 288–300.

[35] Zhi-Bin Li & Yin-Ping Liu, RATH: A Maple package for ﬁnding travelling solitary wave solutions to nonlinear evolution

equations. Comput. Phys. Comm. 148 (2002) 256-266.

[36] D. Baldwin, ¨U. G¨okta¸s, W. Hereman, L. Hong, R.S. Martino, J.C. Miller, PDESpecialSolutions.m: a Mathematica pro-
gram for the symbolic computation of exact solutions expressible in hyperbolic and elliptic functions for nonlinear PDEs.
http://www.mines.edu/fs home/whereman/, 2001.

[37] D. Baldwin, ¨U. G¨okta¸s, W. Hereman, L. Hong, R.S. Martino, J.C. Miller, Symbolic computation of exact solutions
expressible in hyperbolic and elliptic functions for nonlinear PDEs. Journal of Symbolic Computation. 37 (2004) 669–705.
[38] Z.B. Li, Y.P. Liu, RAEEM: A Maple package for ﬁnding a series of exact traveling wave solutions for nonlinear evolution

equations. Comput. Phys. Comm. 163 (2004) 191.

[39] M. Bairagi, GiNaCDE: the high-performance F-expansion and First Integral Methods with C++ library for solving Non-

linear Diﬀerential Equations. Journal of Open Source Software, 7(72), 3885 (2022). https://doi.org/10.21105/joss.03885.

[40] C. W. Bauer, A. Frink and R. Kreckel, Introduction to the GiNaC Framework for Symbolic Computation within the C++

Programming Language. arXiv:cs/0004015; the GiNaC library is available at http://www.ginac.de.

[41] T. Becker, V. Weispfenning, Gr¨obner Bases: A Computational Approach to Commutative Algebra. Springer-Verlag, Berlin,

1993.

[42] D. Wang, Elimination Methods. Springer-Verlag, New York, 2001.
[43] D. Wang. A generalized algorithm for computing characteristic sets. World Scientiﬁc Publishing Company, Singapore.

165–174 (2001).

[44] A. Wittkopf, G. Reid, Introduction to the Rif Package Version 1.1. See: http://www.cecm.sfu.ca/ wittkopf/Rif.html, 2003.
[45] D. Baldwin, ¨U. G¨okta¸s, W. Hereman, Symbolic computation of hyperbolic tangent solutions for nonlinear diﬀeren-

tial–diﬀerence equations. Comput. Phys. Comm. 162 (2004) 203–217.

[46] M. Remoissenet, Waves Called Solitons. Springer, Berlin, 1996.
[47] M. Mirzazadeh, M. Eslami, Exact solutions of the Kudryashov–Sinelshchikov equation and nonlinear telegraph equation

via the ﬁrst integral method. Nonlinear Analysis: Modelling and Control. 17 (2012) 481–488.

[48] F. Calogero and S. De Lillo, The Eckhaus PDE iψt + ψxx + 2(
[49] N. Taghizadeh, M. Mirzazadeh, F. Tascan, The ﬁrst-integral method applied to the Eckhaus equation, Applied Mathematics

4ψ = 0, Inverse Problems 3 (1987) 633.
|

2)xψ +
|

ψ
|

ψ
|

Letters. 25 (2012) 798–802.

′

[50] H. Zhang, New application of the G
[51] J. Feng, New traveling wave solutions to the seventh-order Sawada-Kotera equation. J. Appl. Math. & Informatics. 28

G -expansion method, Commun Nonlinear Sci Numer Simulat. 14 (2009) 3220–3225.

(2010) 1431-1437.

[52] S. M. El-Sayed, D. Kaya, An application of the ADM to seven-order Sawada–Kotara equations, Applied Mathematics and

Computation. 157 (2004) 93–101.

[53] H. Jafari, A. Yazdani, J. Vahidi, D. D. Ganji, Application of He’s Variational Iteration Method for Solving Seventh Order

Sawada-Kotera Equations, Applied Mathematical Sciences. 2 (2008) 471 - 477.

[54] M. Saravi1, A. Nikkar, M. Hermann, J. Vahidi, R. Ahari, A New Modiﬁed Approach for solving seven-order Sawada-Kotara

equations, Journal of mathematics and computer Science. 6 (2013) 230-237.

[55] A.M. Wazwaz, The extended tanh method for new solitons solutions for many forms of the ﬁfth-order KdV equations.

Applied Mathematics and Computation. 184 (2007) 1002–1014.

[56] C. A. G. Sierra, A. H. Salas, The generalized tanh-coth method to special types of the ﬁfth-order KdV equation. Applied

Mathematics and Computation. 203 (2008) 873–880.

[57] A.R. Alharbi, M.B. Almatraﬁ, M.A.E. Abdelrahman, An Extended Jacobian Elliptic Function Expansion Approach to the

Generalized Fifth Order KdV Equation. J Phys Math. (2019) 10:4.

[58] M. Matinfar, M. Aminzadeh, M. Nemati, EXP-FUNCTION METHOD FOR THE EXACT SOLUTIONS OF SAWADA-

KOTERA EQUATION. Indian J. Pure Appl. Math. 45 (2014) 111-119.

[59] M. Y. Ali, M. G. Hafez, M. K. H. Chowdury, M. T. Akter, Analytical and Traveling Wave Solutions to the Fifth Order
φ(ξ))-Expansion Method. Journal of Applied Mathematics

Standard Sawada-Kotera Equation via the Generalized exp(
and Physics. 4 (2016) 262-271.

−

[60] T.B. Benjamin, J.L. Bona, J.J. Mahony, Model equations for long waves in nonlinear dispersive systems. Philos. Trans. R.

Soc. Lond. Ser. A 272 (1972) 47–78.

[61] M. A. Noor, K. I. Noor, A. Waheed, E. A. Al-Said, Some new solitonary solutions of the modiﬁed Benjamin–Bona–Mahony

equation. Computers and Mathematics with Applications. 62 (2011) 2126–2131.

[62] A.S. Abdel Rady, E.S. Osman, M. Khalfallah, The homogeneous balance method and its application to the Ben-

jamin–Bona–Mahoney (BBM) equation. Applied Mathematics and Computation. 217 (2010) 1385–1390.

[63] G. Akram, N. Mahak, Traveling wave and exact solutions for the perturbed nonlinear Schr¨odinger equation with Kerr law

nonlinearity. Eur. Phys. J. Plus. 133 (2018) 212.

[64] N. Ahmed, A. Irshad, S. Tauseef Mohyud-Din, U. Khan, Exact solutions of perturbed nonlinear Schr¨odinger’s equation

with Kerr law nonlinearity by improved tan (cid:16)

φ(ξ)

2 (cid:17)-expansion method. Opt Quant Electron. 50 (2018) 45.

[65] Z.Y. Zhang, Y.X. Li, Z.H. Liu, X.J. Miao, New exact solutions to the perturbed nonlinear Schr¨odinger’s equation with

27

Kerr law nonlinearity via modiﬁed trigonometric function series method. Commun Nonlinear Sci Numer Simulat 16 (2011)
3097–3106.

[66] Z.Y. Zhang, Z.H. Liu, X.J. Miao, Y.Z. Chen, New exact solutions to the perturbed nonlinear Schr¨odinger’s equation with

Kerr law nonlinearity. Applied Mathematics and Computation. 216 (2010) 3064-3072.

[67] N. A. Kudryashov, D. I. Sinelshchikov, Nonlinear wave in bubbly liquids with consideration for viscosity and heat transfer.

Phys. Lett. A. 374 (2010a) 2011–2016.

[68] N. A. Kudryashov, D. I. Sinelshchikov, Nonlinear evolution equation for describing waves in bubbly liquids with viscosity

and heat transfer consideration. Appl. Math. Comput. 217 (2010b) 414–421.

[69] D.J. Huang, D.S. Li, H.G. Zhang, Explicit and exact travelling wave solutions for the generalized derivative Schr¨odinger

equation. Chaos, Solitons and Fractals. 31 (2007) 586–593.

[70] Sirendaoreji, New exact travelling wave solutions for the Kawahara and modiﬁed Kawahara equations. Chaos, Solitons and

Fractals 19 (2004) 147–150.

