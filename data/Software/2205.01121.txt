Efficient variational synthesis of quantum circuits with coherent multi-start optimization

Nikita A. Nemkov,∗ Evgeniy O. Kiktenko, Ilia A. Luchnikov, and Aleksey K. Fedorov†
Russian Quantum Center, Skolkovo, Moscow 143026, Russia and
National University of Science and Technology “MISIS”, Moscow 119049, Russia

We consider the problem of the variational quantum circuit synthesis into a gate set consisting of the CNOT
gate and arbitrary single-qubit (1q) gates with the primary target being the minimization of the CNOT count.
First we note that along with the discrete architecture search suffering from the combinatorial explosion of com-
plexity, optimization over 1q gates can also be a crucial roadblock due to the omnipresence of local minimums
(well known in the context of variational quantum algorithms but apparently underappreciated in the context of
the variational compiling). Taking the issue seriously, we make an extensive search over the initial conditions
an essential part of our approach. Another key idea we propose is to use parametrized two-qubit (2q) controlled
phase gates, which can interpolate between the identity gate and the CNOT gate, and allow a continuous relax-
ation of the discrete architecture search, which can be executed jointly with the optimization over 1q gates. This
coherent optimization of the architecture together with 1q gates appears to work surprisingly well in practice,
sometimes even outperforming optimization over 1q gates alone (for fixed optimal architectures). As illustrative
examples and applications we derive 8 CNOT and T depth 3 decomposition of the 3q Toffoli gate on the nearest-
neighbor topology, rediscover known best decompositions of the 4q Toffoli gate on all 4q topologies including
a 1 CNOT gate improvement on the star-shaped topology, and propose decomposition of the 5q Toffoli gate on
the nearest-neighbor topology with 48 CNOT gates. We also benchmark the performance of our approach on
a number of 5q quantum circuits from the ibm_qx_mapping database showing that it is highly competitive with
the existing software. The algorithm developed in this work is available as a Python package CPFlow .

CONTENTS

References

14

I. Introduction

II. Background and notation

A. Quantum circuits and quantum gates
B. Template circuits
C. Theoretical lower bound

III. Variational synthesis and its challenges

IV. The CPFlow algorithm

A. Motivation and overview
B. Procedure
C. Technical details
D. Computational setup

V. Synthesis of Toffoli gates

A. 3q Toffoli
B. 4q Toffoli
C. 5q Toffoli

VI. Further benchmarks

VII. Summary and outlook
Acknowledgments

A. Circuit refinement

B. 4q gates featuring in the decomposition of the 5q

Toffoli gate

∗ nnemkov@gmail.com
† akf@rqc.ru

1

2
2
3
3

4

5
5
6
7
8

8
8
9
10

11

12
13

13

14

I.

INTRODUCTION

While many quantum algorithms, such as prime factor-
ing [1], unstructured search [2], or linear equation solvers [3],
promise game-changing speedups over classical, the current
state of the quantum computing technology does not yet allow
for a decisive demonstration with useful applications, although
it might be on the verge (see e.g. a recent review [4]). There are
plenty of factors limiting the performance of the current gener-
ation of quantum devices, such as initialization and readout er-
rors, loss of coherence over time, and errors in gate operations.
In the current NISQ era [5], most gate-based quantum pro-
tocols are constructed out of single-qubit (1q) and two-qubit
(2q) gates with the latter being significantly more error-prone
across all leading platforms (at the same time, the problem of
realizing multiqubit gates is also under active study, see e.g.
Ref. [6]). Hence, minimization of the 2q gate count is one of
the key objectives that can improve performance of the near-
term algorithms. On the other hand, in the fault-tolerant future
a different type of resource (e.g. the T gate count) is likely to
be the most expensive.

At the high level quantum algorithms are usually described
using primitives, such as large multi-controlled gates or quan-
tum Fourier transform, that are not directly accessible on the
current devices. The usual compiling routines [7, 8] include
decomposing algorithmic primitives into native gates (which
is always possible [9]), routing stage to comply with the possi-
ble connectivity restrictions of the target chip, and local sim-
plifications of the resulting circuits (see e.g. here for a bench-
mark comparison of different frameworks [10]). Using special
datastructures such as graphs, tensor networks, ZX diagrams,
decision diagrams and others for representing and transform-

CNOT =

•

=













1 0 0 0
0 1 0 0
0 0 0 1
0 0 1 0

,

CZ =

•

•

=







0
1 0 0
0
0 1 0
0 0 1
0
0 0 0 −1







CP(a) =

•

•

P (a)

=

2













1 0 0
0 1 0
0 0 1
0 0 0 eiπa

0
0
0

Rσ (a) = e−iσa/2,

σ ∈ {X, Y, Z},

X =

(cid:19)

(cid:18)0 1
1 0

, Y =

(cid:19)

(cid:18)0 −i
0
i

, Z =

(cid:19)

(cid:18)1

0
0 −1

FIG. 1. Diagrammatic notation and matrix representation for gates used in this work. When drawing large circuits we will often abbreviate
rotation gates Rσ(a) by σ(a) to lighten the notation.

ing circuits allows one to carry out the compilation process
without the need to simulate any part of the circuit. This makes
the approach extremely scalable, allowing to compile and op-
timize circuits with hundreds of qubits. The downside is that
the resulting decompositions may be significantly less efficient
than possible. A complementary approach is to work directly
with the unitary matrix of the circuit thus eliminating any po-
tential redundancies or inefficiencies in the original gate-based
description. This is only feasible for small scale circuits as the
size of the state space and the corresponding unitary matri-
ces scales exponentially with the number of qubits. In fact,
even for a few-qubit circuits there may be other limiting fac-
tors such as circuit complexity, as we emphasize in this work.
Although there could be direct applications to enhancing per-
formance of the NISQ algorithms, we expect the use of highly
optimized small scale circuits as building blocks of large scale
algorithms to be the most promising possibility.

The unitary synthesis problem amounts to finding the most
efficient circuits optimizing a given loss function. Typical ap-
plications include maximizing fidelity with respect to the tar-
get unitary (compilation) or maximizing the overlap with the
target state (state preparation). We consider the problem of
the variational synthesis into the gate set consisting of a single
2q gate (CZ or CNOT ) and arbitrary 1q gates. The primary
optimization target is the amount of CNOT gates, although in-
directly we also address CNOT depth and even T count and T
depth. It is natural to divide the problem into two parts:

(i) Discrete optimization or architecture search, looking for

best placements of 2q gates.

(ii) Continuous optimization of 1q gate parameters for a

given architecture.

The difficulty associated with the architecture search has com-
binatorial origin and is manifest. The difficulty of the con-
tinuous optimization is however also essential, as is known in
the context of variational quantum algorithms, but apparently
underappreciated in the context of the variational compiling.
After fixing our notation and giving a brief introduction in
Sec. II, we zoom in on this issue in Sec. III. Results of this
analysis may be of independent interest. Another cornerstone
idea of our approach is to use parametrized 2q gates as a means
to relax the discrete architecture search to another continuous
optimization, that can be performed simultaneously and co-
herently with the optimization over 1q gates. We introduce
the CPFlow algorithm in Sec. IV. In Sec. V we first illustrate
all central features of CPFlow using the 3q Toffoli gate as an

example, and then go beyond this toy case to synthesize effi-
cient (and likely novel) decompositions of the 4q and 5q Tof-
foli gates on constrained topologies. In Sec. VI, we provide
further benchmarks showcasing that CPFlow is very efficient
in compilation of small scale circuits with moderate complex-
ity but also outline its limitations. Sec. VII concludes with the
summary and outlook.

The idea to use computer assisted search and numerical op-
timization for circuit synthesis goes back a long way [11] and
continues to the present day with advances due to both algo-
rithm design and growth of raw computational power. Possi-
ble frameworks include purely discrete search over a finite gate
set [12], a natural separation into discrete architecture search
and continuous optimization [13–15], and a hybrid approach
with part of the architecture search outsourced to a version of
continuous optimization [16, 17]. The scheme developed in
Ref. [17] is in many respects similar to the one proposed in
this paper, and similarly to our work, was originally motivated
by the impressive success of variational compiling of random
unitaries [18–20], which can be thought of as the circuits with
maximal complexity. In this work, we address circuits of in-
termediate complexity, which appear to be a much more chal-
lenging target.

II. BACKGROUND AND NOTATION

A. Quantum circuits and quantum gates

Quantum circuits are usually drawn as diagrams similar to
Fig. 4. Horizontal wires correspond to qubits, boxes and ver-
tical connections to quantum gates. Each quantum gate can
be though of as a unitary matrix. The ones we use in this
paper are summarized in Fig. 1. An important detail is that
CZ and CNOT gates are equivalent up to a conjugation by
the 1q Hadamard gate and hence completely equivalent for the
purpose of the variational compiling that we consider. We of-
ten mention CNOT gates in more general discussions, as is
more standard, but refer to CZ gates when the technical de-
tails are important. The state space associated to n qubits has
dimension 2n, the unitary matrices acting on this space have
dimension 2n × 2n. Unitary matrix of a quantum circuit can
be constructed by an appropriate tensor product of all the gates
involved. The overall complex phase of the unitary matrix is
inconsequential and can be fixed in any convenient way. The

CZ block

CP block

• RX(a0)

RY (a2)

RZ (a4)

• RX(a1)

RY(a3)

RZ(a5)

•

•

P(a5)

RX(a0)

RY(a2)

RZ(a4)

RX(a1)

RY(a3)

RZ(a5)

FIG. 2. Building blocks for variational templates.

(a) Connected layer

(b) Chain layer

• • •
•

•

•

• •
•

•
• •

•
• •

• •
•

FIG. 3. Possible layers for connected and chain (nearest neighbor
or line) topologies. Here CZ gates are only meant to schematically
specify locations of 2q blocks, not their actual content.

space of quantum circuits on n qubits is hence equivalent to the
special unitary group SU (2n). A natural measure of fidelity
between two unitary matrices is the distance induced from the
Hilbert-Schmidt norm

D(U, V ) = 1 −

| Tr U †V |2
4n

.

(1)

It is normalized to take values between 0 and 1 with the mini-
mum being reached iff U and V differ by a global phase.

B. Template circuits

The prevalent approach to the variational compiling in the
literature [14, 17, 19–21] that we will follow is to construct the
template circuits out of two-qubit blocks repeated in a regular
manner. The two types of entangling blocks we will use are
CZ and CP blocks depicted at Fig. 2. They only differ by the
type of the entangling gate used. We will explain the choice of
1q gates shortly. The blocks are further arranged in sequences
we refer to as layers. In principle, layers can can be arbitrary,
but we will usually identify layers with coupling maps of the
target topology (ordered in an arbitrary way). For example, see
Fig. 3 showing layers corresponding to the fully connected and
chain (or nearest-neighbor) topology. Finally, to fully specify
the template one must provide the total number of 2q gates.
Layers are repeated until the specified number of 2q gates is
reached, the last layer is truncated if needed. We will write
for templates with k entangling gates of type
U k
CZ or CP respectively (layer specification is assumed but left
implicit in the notation). For illustration, Fig. 4 depicts U 4
CZ
on a connected topology (here and in the following connected
topology means fully connected; connectivity restrictions will
always be mentioned explicitly).

or U k

CZ

CP

3

C. Theoretical lower bound

There is a provable minimum amount of CZ gates required
to decompose any n-qubit unitary [22] that we will refer to as
the theoretical lower bound

T LB(n) =

1
4

(4n − 3n − 1) .

(2)

It essentially follows from a simple parameter counting argu-
ment. We will sketch the argument, which is not only instruc-
tive, but also helps to motivate the structure of the template
circuits.

A unitary matrix of an n-qubit circuit has in general 4n real
parameters. Generic 1q gate on the other hand has 3 real pa-
rameters, e.g. angles in the Euler decomposition. Thus, with-
out 2q gates a quantum circuit with n qubits can have no more
that 3n real parameters. Our template circuits start with a
round of 1q gates on each qubit wire, cf Fig. 4. Adding a single
CZ gate allows to append two more 1q gates that do not im-
mediately combine with the existing ones. Superficially, this
permits adding 6 real parameters per CZ gate. However, one
parameter in each 1q gate is redundant as illustrated at Fig. 5.
Using ZXZ decomposition of an arbitrary single-qubit block U
and the fact that RZ commutes with the CZ gate, the leftmost
RZ blocks on each qubit can be pulled to the left and joined
with the existing 1q blocks. Therefore, adding a single entan-
gling CZ block permits to increase the real dimension by four.
Requiring that the amount of 2q gates is at least sufficient to
cover the dimension of the SU (2n) manifold leads to the equa-
tion 4 T LB(n) + 3n ≥ 4n − 1, equivalent to (2) (additional
unit subtracted is the irrelevant global phase parameter).

While expression (2) is a simple theoretical bound, a strong
evidence for its tightness exists. First, there is an constructive
analytic procedure, known as the quantum Shannon decompo-
sition [23], which synthesizes an arbitrary n-qubit unitary us-
ing only 23
12 T LB(n) CNOT gates (roughly twice as much as
the theoretical lower bound requires). Second, recent numeri-
cal studies [19, 20] suggest that the ≈ 2x overhead of the quan-
tum Shannon decomposition is not necessary and that CNOT
count given by Eq. (2) is sufficient to compile random unitaries
with a great numerical accuracy.

So far our discussion and the bound (2) addressed generic or
random unitaries. However, the unitary matrices of the central
importance to quantum computation are highly structured and
typically require much less 2q gates. The quantum Shannon
decomposition does not appear to be particularly useful in this
case. Its extension to restricted topologies is also difficult, of-
ten leading to a large multiplicative overhead [23]. Note that
being able to find truly optimal decompositions of arbitrary
unitaries would amount to determining their gate complexi-
ties, which is an NP-complete problem [24]. It is therefore a
natural idea to use numeric optimization and heuristic methods
in the search for efficient decompositions.

Z (a0)

X (a1)

Z (a2)

• X (a9)

Y (a11)

Z (a13)

• X (a15)

Y (a17)

Z (a19)

• X (a27)

Y (a29)

Z (a31)

Z (a3)

X (a4)

Z (a5)

• X (a10)

Y (a12)

Z (a14)

• X (a21)

Y (a23)

Z (a25)

• X (a28)

Y (a30)

Z (a32)

Z (a6)

X (a7)

Z (a8)

• X (a16)

Y (a18)

Z (a20)

• X (a22)

Y (a24)

Z (a26)

FIG. 4. Template circuit U 4
layer is dash-boxed.

CZ on a connected 3q topology with 4 entangling CZ -blocks. The complete connected layer is boxed, the incomplete

4

• U

• U

=

• RZ

• RZ

RX

RX

RZ

RZ

=

RZ

RZ

• RX

• RX

RZ

RZ

FIG. 5. Entangling CZ -block only allows adding four real parameters
to the circuit. Explicit gate angles are not depicted.

III. VARIATIONAL SYNTHESIS AND ITS CHALLENGES

As mentioned in the introduction, it is natural to split the
variational compiling into the discrete architecture search and
the continuous optimization of 1q gates. The difficulty of the
architecture search is manifest and caused by the combinato-
rial explosion of complexity making the problem very chal-
lenging. At the same time, the difficulty of continuous op-
timization also can not be ignored being a non-convex prob-
lem that can not be solved with guaranties and in practice may
suffer from the range of problems including local minimums,
plateaus and saddle points. Mathematically, the problem of
the variational synthesis is very similar to the classical opti-
mization loop in quantum variational algorithms [25], espe-
cially their hardware-efficient [26] and adaptive [27] forms.
Here, the two key obstacles are the barren plateaus and lo-
cal minimums. The barren plateaus [28] manifest as negligi-
ble gradients in large areas of the loss landscape and are usu-
ally associated with a high number of qubits or parameters.
In our experiments with small-scale quantum circuits we did
not find them to be relevant. On the other hand, the problem
of local minimums alone is sufficient to render training of the
variational algorithms NP-hard [29]. As our numerical exper-
iments suggest, local minimums constitute a real hindrance to
the variational compiling.

We will quantify the challenges associated with local mini-

mums by the empirical success ratio

SR =

M
N

,

(3)

where N is the total number of times the optimization proce-
dure is performed starting with different random initial con-
ditions and M is the number of times the global minimum is
reached.

For example, let U (a) be the unitary matrix of the tem-
plate circuit from Fig. 4 and a∗ be some particular choice of
It is clear that the global minimum of the Hilbert-
angles.
Schmidt distance D(U (a), U (a∗)) is zero, but gradient-based
optimization does not always reach it (as a cutoff value we take
D ≤ 10−4). With some particular random choice of a∗ and

random uniform initialization of the template angles, our de-
fault optimization (detailed in Sec. IV C) yields success ratio
SR ≈ 0.3, which implies that roughly two thirds of the times
the optimization gets stuck in a local minimum.

CZ(a) → U k

We now extend this simple numerical experiment more sys-
tematically. Fig. 6 charts the success ratios for 3q and 4q cir-
cuits as a function of the number of gates. The basic proce-
dure is the same as above with several additions. For each gate
count k we construct a CZ template with connected layer U k
CZ
and find the success ratio of this template learning its random
instance U k
CZ(a∗) considering the optimization
successful if the Hilbert-Schmidt distance (1) dropped below
10−4. More precisely, we take 10 different template instances
1−10) and compute the success ratio
for each gate count U k
for each of them using 1000 initial conditions, generated uni-
formly at random. Blue markers represent mean success ratios
averaged over 10 target circuits, while error bars quantify the
mean standard deviation. Absence of blue markers implies that
the empirical success ratio turned out vanishing, i.e. that the
global minimum was not reached. For 4q circuits datapoints
were only collected for k = 3n, n ∈ N, k ≤ 63.

CZ(a∗

There are several remarkable features of these plots. First,
the success ratio drops very quickly as the 2q gate count in-
creases, reaching values below 10−3 at 10 CZ gates for 3q
circuits and 15 CZ gates for 4q circuits. Next, perhaps sur-
prisingly, the success ratio rises back to values of order 1
as the number of CZ gates approaches the theoretical lower
bound (2). In fact, this is in agreement with the empirical ev-
idence found in the literature [18–20] that near the theoretical
lower bound numerical compilation appears to be very effi-
cient as if the problem was convex. A plausible explanation
for this fact [30] is that when the template is sufficiently ex-
pressive, optimization w.r.t. parameters becomes essentially
the same as optimization over the unitary matrices themselves.
At the same time, cost functions typically considered in quan-
tum computing are simple, often linear or quadratic functions
of the unitary matrix elements and hence are not prone to local
minimums. Finally, although there is a certain spread of suc-
cess ratios across different template instances, dependence on
the 2q gate count sets the dominating trend.

This suggests that the success ratio is mostly determined by
the template, not by the target. To confirm this intuition, we
carried out additional experiments using random unitaries V
instead of template instances as targets. The difficulty here is
that the true value of the global minimum of D(U k
CZ(a), V )
is not known, yet the presence of local minimums is still man-
ifest, because different optimization runs tend to end up with
significantly different loss values. We modify the definition
of the success ratio in this case, by counting as successful all

5

FIG. 6. Empirical success ratio as a function of circuit complexity. Datapoints for random unitaries are advanced by a half unit along x axis
for clarity.

optimization runs that approached sufficiently closely the low-
est value across all runs for a given target unitary (using the
same cutoff as before D − Dmin ≤ 10−4). Note that with
this modified definition the success ratio can never be zero
(because there is always at least a single run with the lowest
value). We see that in the regime when success ratios for ran-
dom instances are sufficiently high, success ratios for random
unitaries closely parallel them, both in mean and in deviation.
In the regions where success ratios for random instances are
very small or vanishing, success ratios for random unitaries
are non-zero (they can not be by construction) but are close
to zero. We expect them to drop further if more samples are
accounted for. Overall, our experiments strongly suggest that
local minimums are mostly determined by the templates and
not by the targets.

Of course, success ratio is not only a function of the loss
landscape but also of the optimization algorithm and the distri-
bution of the initial conditions. There are a number of propos-
als to alleviate the problem of local minimums by the choice
of optimizer [31, 32], but in our experiments none performed
sufficiently better than simple ADAM [33]-based optimization
to justify additional computational resources that are typically
required by higher-order methods such as the natural gradi-
ent [34] or imaginary time evolution [35]. A recent empirical
comparison of various optimization methods for quantum vari-
ational algorithms [36] also suggests that ADAM optimizer is
often the simplest and most efficient choice.

In contrast, our experiments suggest that parametrization
and/or distribution of the initial parameters can have notice-
able effects. As explained in Sec. II C template structure il-
lustrated at Fig. 4 features redundant 1q gates. In any entan-
gling block two rotation gates can be removed without com-
promising circuit expressivity, i.e. without any shrinking in
the space of all unitaries obtainable from the template. How-
ever, performance of the templates with the minimal number
of 1q gates appears to be worse on average (though there are
counter examples, see Sec. V B). This can be due to the fact
that overparmetrization favorably deforms the loss landscape
and/or because the random uniform initialization of the angles
produces a different distribution of the initial unitaries. In the

present study we do not attempt to disentangle the two possible
effects and leave this important question for future work. Un-
less stated otherwise, reported results correspond to the ’XYZ’
templates as per Fig. 4.

IV. THE CPFLOW ALGORITHM

A. Motivation and overview

In the context of variational synthesis results of the previous
section suggest that solving the continuous optimization prob-
lem may be just as difficult as solving the discrete architecture
search: even if the structure of the template is a perfect match
for the target unitary, finding the suitable angles may be very
challenging. In the absence of an efficient way to solve the lat-
ter problem in our approach we choose the brute force route of
an extensive multi-start optimization.

A second main idea that we rely is the relaxation of the dis-
crete architecture search as yet another continuous optimiza-
tion. For illustration, consider the circuit at Fig. 7. Here the
2q gates are the controlled phase gates (1), which interpolate
between the identity gate CP(0) = I and the CZ gate CP(π) =
CZ. For generic values of the angle a single CP(a) gate can
be decomposed into 2 CZ gates (plus 1q gates). Therefore,
different values of parameters in CP gates in the template (7)
effectively capture several different templates with the 2q CZ
gates and training templates with the CP blocks can encom-
pass both the architecture search and the tuning of continuous
parameters, moreover performed in a coherent manner.

We can anticipate, however, that training CP templates di-
rectly will result in most CP gates having generic angles and
hence effectively doubling the CZ count of the original tem-
plate. To address this issue we introduce an additional penalty
term to the loss function that is intended to drive all CP angles
to either 0 or π. The shape of the penalty function that we use
is presented at Fig. 8.

This penalty is intended to drive all CP angles during the
optimization to either 0 or π and hence to reduce the CZ count
of the resulting circuit. Moreover, at values a = 0, 1
2 π, 2π

2 π, 3

Z (a0)

X (a1)

Z (a2)

Z (a3)

X (a4)

Z (a5)

•

•

P (a15)

Z (a6)

X (a7)

Z (a8)

X (a9)

Y (a11)

Z (a13)

•

X (a16)

Y (a18)

Z (a20)

X (a10)

Y (a12)

Z (a14)

P (a22)

•

X (a17)

Y (a19)

Z (a21)

•

•

P (a29)

X (a23)

Y (a25)

Z (a27)

X (a24)

Y (a26)

Z (a28)

FIG. 7. Template 3q circuit U 3

CP on a connected topology.

6

where |ψ⟩ is the target state and |0⟩ is the usual reference state,
etc. The goal is to find a unitary U k
CZ(a))
is sufficiently close to the global minimum of L(U ) and at the
is as small as pos-
same time the number k of 2q gates in U k
sible.

CZ(a) such that L(U k

CZ

The regularized loss optimized by CPFlow reads

L(a) = L(U k

CP (a)) + r

(cid:88)

ai∈CP

R(ai) .

(4)

The first term is the value of the original loss function evalu-
ated with the variational circuits a th argument. The second
term is the regularization term summing the CP penalties for
all CP angles in the template. The number of 2q gates k and
the overall regularization weight r are two of the most impor-
tant hyperparameters of the model.

Three main stages of the algorithm are described below.

Precise details are given in Sec.IV C.

Static synthesis

1. Raw sampling. Loss function (4) is minimized starting
from many initial conditions (num_samples). For each
sample both the CP angles and the angles of 1q gates
are generated uniformly and independently at random.

2. Selecting prospective results. Results of the first step
are filtered based on two criteria (i) the original loss
CP ) must be below a given threshold
function L(U k
(entry_loss) and (ii) the number of CZ gates in a
projected CP circuit must be below a specified value
(accepted_num_cz_gates). Condition (i) means we
only accept circuits that are close enough to the global
minimum while (ii) rejects decompositions with too
high CZ count. Projection from CP to CZ circuits
CP (a) → U k′
CZ(a′) is peformed by rounding off
U k
angles of CP gates that are sufficiently close (within
threshold_cp) to 0 or π and substituting other CP
gates with their 2 CZ decompositions.

3. Verification. At this stage the projected circuits contain
only CZ gates and the regularization term is removed.
For each prospective CZ circuit the original loss func-
tion L(U k′
CZ(a)) is further optimized starting from ini-
tial angles a′ inherited from the CP circuit. The verifi-
cation is considered successful if the CZ circuit reaches
a more stringent loss threshold (target_loss).

This basic scheme can be modified in many ways: by choos-
ing a different regularization function, different sampling of

FIG. 8. Penalty function for angles of the CP gates. For clarity of the
figure, width of plateaus near 0, 1
2 π, 3

2 π, 2π is exaggerated.

the regularization term faithfully captures the CZ cost of the
CP gate. We choose a simple linear interpolation between
these values because piecewise-linear penalty functions are
known to lead to the discrete decision making in certain cases
of continuous relaxation of discrete optimization problems
such as sparcification of machine learning models [37], com-
pressed sensing [38, 39], and robust PCA [40] to name a few.
For numerical stability small plateaus near the reference val-
ues are added (empirically we find that CP angles often relax
near 1

2 π, 3

2 π as well).

An obvious problem with this regularization function is the
presence of the local minimum at a = π. In fact, enumerating
all local minimums associated with the regularization terms of
a CP template is equivalent to the discrete search through all
CZ templates that it can reduce to. However, our empirical re-
sults suggest that simultaneous optimization over CP and 1q
angles is a very efficient strategy if the overall weight of the
regularization term is chosen properly. If it is too small, the
regularization term has little effect and the resulting decom-
positions tend to have a high CZ count. When the weight is
too high, the CP angles effectively get captured by the closest
local minimum and the flexibility of our strategy is lost. In fact,
optimization with a high regularization weight could be con-
sidered a version of a random search over the architectures (if
the initial CP angles are chosen randomly) and performs sig-
nificantly worse than optimization with a properly tuned regu-
larization weight.

B. Procedure

We formulate the general synthesis problem as follows. Let
L(U ) be the loss function to be minimized with unitary as the
argument. For unitary synthesis L(U ) may be any measure of
fidelity to the target unitary V , for example L(U ) = D(U, V ).
For state preparation one can choose L(U ) = | ⟨ψ|U |0⟩ |2

the initial angles or altering the details of the gradient based
optimizer to name a few. We have mostly experimented with
varying two hyperparameters that are evidently crucial, the
number of CP gates k and the regularization weight r. Heuris-
tically, we find that a reasonable number of CP gates is usu-
ally between k0 and 2k0 where k0 is the expected optimal
CZ count of the decomposition. A performant choice for the
regularization weight r for loss functions normalized so that
0 ≤ L(U ) ≤ 1 is r = 5 × 10−4. There could be exceptions
to both these rules of thumb. To make better choices of hy-
perparameters on a case by case basis we use Bayesian tuning
algorithm provided by the Hyperopt package [41].

Tuning of hyperparameters is significantly hindered by the
fact that the loss function is stochastic. Taking sufficiently
many samples to reliably estimate the quality of a hyper-
parameter configuration may cost too much computational
resources, while not taking enough can make the acquired
data too noisy to be useful. On the positive side, the ultimate
goal is not to find the best hyperparameters, but rather to find
the best decompositions which routinely occur at suboptimal
points as well. The routine including hyperparameter tuning
can be summarized as follows.

Adaptive synthesis

1. Defining the search space. Choose distributions to
draw the number of gates k and the regularization
weight r from. Typically we use uniform distribution
for k in some integer range and lognormal distribution
for r with mean around 5 × 10−4 and standard deviation
0.5.

2. Evaluating the score function. Draw a sample k, r from
the hyperparmeter distribution according to the Hyper-
opt algorithm. Execute steps 1 and 2 from the static
routine. Any CZ count is accepted at this stage, i.e. the
results are only selected by the value of the original loss
function L(U k
CP (a)). Let k1, k2, . . . be CZ counts of all
prospective results selected. We define the score func-
tion (reminiscent of softmin) by

score = − log2

1
N

(cid:88)

2−ki ,

i

(5)

where N is the total number of raw samples. The min-
imum of this function is k0, the CZ count of the best
possible decomposition. It is achieved if all raw sam-
ples reached the threshold fidelity and have the optimal
count k0 when projected to CZ -circuits. The maximum
is +∞ when none of the raw samples passed the fidelity
threshold.

3. Verifying best decompositions. At the previous stage
prospective decompositions are usually not verified as
the verification process is time-consuming is should not
significantly alter the score estimation (some of the de-
compositions may fail to pass the verification, but this is
rare). However, if there are prospective decompositions

7

that improve on the current best they are verified and if
accepted, the current best is replaced.

4. Repeat. Repeat steps 2 and 3 until either the maximum
number of score evaluations is reached or a decomposi-
tion with the desired number of gates is found.

As the result of the adaptive routine one narrows down
the space of good hyperparameters for the problem and col-
lects several efficient decompositions found in the process.
This may already be sufficient for the end goal, or provide
a good starting point to generate more decompositions using
the static routine with appropriately chosen hyperparameters.
Although the algorithm directly targets only minimization of
the CZ gate count, generating many similar decompositions
allows one to further select by other criteria such as CZ depth.
We will illustrate this process in Sec.V A.

C. Technical details

CP (a∗) → U k′

The static routine implemented in CPFlow proceeds as fol-
lows. First num_samples of initial angle combinations are
generated uniformly at random. Learning at the raw sampling
stage proceeds with the ADAM optimizer with learning_rate
0.1 ran for num_gd_iterations (2000 by default). At the se-
lection stage for each sample the best configuration of angles
a∗ is chosen corresponding to the minimum of the regular-
ized loss function (4) across all iterations. If the primary loss
CP (a∗)) is below
function at this configuration of angles L(U k
the entry_loss threshold (10−3 by default) the CP circuit
CZ(a′). Pro-
is projected to the CZ circuit U k
jection is performed as follows. CP gates with angles lying
within the cp_threshold (0.2 by default) distance away from
0 or π are replaced by the identity and CZ gates respectively.
CP gates that were not replaced at the previous stage are de-
composed into 2 CZ decomposition using standard methods.
If the 2q gate count k′ of the resulting CZ circuit is below
accepted_num_cz_gates the circuit is deemed prospective.
function
At
L(U k′
CZ(a)) is further optimized with the ADAM optimizer
with a smaller learning_rate_at_verification (0.01
by default)
iterations
ran for an increased number of
num_gd_iterations_at_verification (5000 by default).
Importantly,
the new optimization starts with the initial
angles a′ obtained after projecting the CP circuit. If the new
optimization pass reaches a more stringent target_loss
threshold (10−6 by default) the verification is considered
successful and the resulting circuit is added to the collection
of decompositions.

the verification stage the original

loss

The parameters specified above work well with the Hilbert-
Schmidt loss function (1) in a sense that the majority of
prospective decompositions pass at the verification stage. For
other normalizations/shapes of the loss function different pa-
rameter specifications might be required.

The adaptive search basically consists of several static
rounds. At each round the score function (5) is computed from

the prospective results. If there is a prospective result that im-
proves the current best decomposition it is verified and added
to the decomposition pull if successful. Otherwise, the veri-
fication stage is omitted and a new static round with altered
hyperparameters is initiated. The total number of rounds is
controlled by max_evals (100 by default). For each round
implementa-
hyperparameters are chosen by the Hyperopt
tion of the tree-structured Parzen Estimator algorithm [41]
based on the previous score evaluations and input parame-
ter distributions specified by the user. We use the uniform
distribution for the number of gates k in the range between
min_num_cp_gates and max_num_cp_gates. For the regu-
larization weight r we use lognormal distribution with default
values r_mean=5.5 × 10−4 and r_variance=0.5. Note that
by the default that we keep, the first 20 parameter choices in
Hyperopt are intended to sample broadly from the search space
and do not depend on the previous score evaluations (only on
the input distributions), the actual optimization starts at fur-
ther steps. However, with a good choice of the initial distribu-
tions optimal or near optimal decompositions are often found
by CPFlow within first several evaluations.

D. Computational setup

CPFlow [42] is written entirely in Python with the computa-
tional efficiency enabled by the JAX library [43]. One advan-
tage of CPFlow is that the computations are highly paralleliz-
able as the core of both basic routines consists in performing
independent multi-start optimizations. We also rely on Qiskit
[7] for visualization, validation, and post-processing. Numeri-
cal experiments reported in this paper were carried out on a
server equipped with a 16 GB NVIDIA Quadro RTX 5000
GPU. A single static routine with 1000 samples for 4q and
5q unitaries took several minutes in our setup. Correspond-
ingly, a typical adaptive routine with 100 evaluations using
1000 samples each took several hours.

V. SYNTHESIS OF TOFFOLI GATES

We now put the CPFlow algorithm to work. We choose
the Toffoli gates as our key benchmark examples motivated by
several considerations. First, the Toffoli gates are among the
most essential building blocks for a great variety of quantum
algorithms. Next, large multi-controlled Toffoli gates can be
built recursively from the smaller ones [9], hence optimiza-
tion of the small-size Toffoli gates can potentially be prop-
agated to the large multi-controlled gates required in useful
quantum algorithms. Lastly, Toffoli gates have been studied
extensively [9, 44–47] and although deriving rigorous bounds
beyond the 3q case is very difficult, the best existing decom-
positions are likely to indeed be optimal.

The basic Toffoli gate, also known as the Controlled-

8

Best number of
CP gates k

Best regularization
weight r

Optimal
decompositions

Connected
Chain

7
14

1.31 × 10−3
0.88 × 10−3

28/100
19/100

TABLE I. Synthesis statistics for the 3q Toffoli gate.

Controlled-NOT or the C2X gate is depicted as follows.

C2X =

•
•

=

•
•
H • H

The right diagram represents the Toffoli gate as the C2Z gate
conjugated by the two Hadamard gates (HZH = X). The
C2Z gate itself is represented by a diagonal matrix C2Z=
diag(1, 1, 1, 1, 1, 1, 1, −1) and is symmetric with respect to all
qubits. Therefore, up to a conjugation by 1q gates the Toffoli
gates (C2X as well as any CnX) are also symmetric. This im-
plies that even if the symmetry between the qubits is broken
by e.g. a non-trivial topology, the choice of the target qubit for
the Toffoli gate is not relevant for our synthesis problem.

A.

3q Toffoli

In this subsection we use CPFlow to find efficient decom-
positions of the 3q Toffoli gate and illustrate many important
features of the algorithm along the way. 3q Toffoli gate can be
decomposed into 6 CZ gates on the fully connected topology
or 8 CZ gates on the chain topology. Using CPFlow we were
able to find many inequivalent decompositions with these op-
timal CZ counts. First, we ran the adaptive routine with 100
evaluation steps to identify the best hyperparameters in each
case. Results are reported at Fig. 9. Best hyperparameters for
each topology are shown in Table I.

Note that at this stage decompositions with the optimal CZ
counts have already been found, but it is instructive to further
analyze the performance of the algorithm and generate more
decompositions. To this end we ran the static routine with
optimal hyperparameters and 100 samples for each topology.
Third column in Table I states how many of the initial condi-
tions led to the decompositions with the optimal CZ count. For
connected and chain topologies, chances of finding optimal de-
compositions are roughly 30% and 20% respectively. These
figures are to be compared with the success ratios at the corre-
sponding gate counts shown at Fig. 6, which are of order 10%
and 2% respectively. The remarkable conclusion is that (at
least in this simple example) our strategy of coherent learning
of the architecture together with continuous parameters seems
to be unreasonably efficient. With the best hyperparameters,
the frequency of finding CZ count optimal decompositions is
greater than the mean success ratios for reaching the global
minimum for fixed architectures.

9

FIG. 9. Visualization of the hyperparameter optimization during adaptive synthesis of the 3q Toffoli gate on connected (left panel) and chain
(right panel) topologies. Red crosses corresponds to infinite score values and imply that no valid decompositions were found at these points.
Gold stars mark the best hyperparameter configurations.

Connected topology

• X (π)

•

• Z (−π)

X (π)

•

Z ( π
4 )

• Z ( −π
2 )

X ( π
4 )

• Z (−π)

X ( 3π
4 )

• X ( 3π
4 )

• Z ( π
2 )

• X ( π
2 )

• Z ( −π
2 )

X ( π
4 )

• Z ( −π
2 )

X ( π
2 )

• Z ( π
4 )

X ( π
2 )

X ( π
2 )

Z ( π
4 )

Z ( π
2 )

Z (−π)

Z ( −π
2 )

X ( π
2 )

X ( π
2 )

Chain topology

Z ( π
2 )
X ( π
2 )

X (π)

•

•

• Z (−π)

X (π)

Z (−π)

Z (π)

X ( π
2 )
X ( π
2 )

• X ( π
2 )

•

•

X ( 3π
4 )

Z (−π)

•

•

X ( 3π
4 )

Z (−π)

X (π)

Z ( −π
2 )

X ( π
2 )

• Z ( −3π
4 )

X ( π
2 )

• X ( 3π
4 )

• X ( π
2 )
• Z ( −π
2 )

•

•

X ( π
2 )

Z (−π)

X (π)

Z ( 5π
4 )

Z ( −π
2 )

X ( π
2 )

•

•

Z ( −π
2 )

Z (−π)

X ( π
2 )
X ( 3π
4 )

Z ( π
4 )

Z (π)

FIG. 10. Decompositions of the 3q Toffoli gate that are likely to be optimal with respect to all four metrics: CZ depth, CZ count, T depth, T
count. Rotation gates are shortened from Rσ to σ for readability. Non-Clifford gates, each obtainable from a single T gate, are highlighted.

Decompositions which are initially generated by CPFlow
are approximate and many 1q gates bear little resemblance to
the standard 1q gates such as H, X, Y, Z, S, T , which are ex-
pected to appear in decompositions of the Toffoli gate and are
expressible as rotation gates with angles being rational mul-
tiples of π. We develop a simple procedure that attempts to
eliminate redundant gates, rationalize remaining ones, and if
possible expand the circuit into Clifford+T gate set. Details
of the procedure are deferred to Appendix A. The procedure
is heuristic and does not guarantee elimination of all spuri-
ous angles, but often works well in practice. Applying it to
the decompositions found at the static stage, we were able to
generate 12 Clifford+T decompositions of 3q Toffoli gates for
each topology. We then sorted these decompositions accord-
ing to four metrics : CZ count, CZ depth, T count and T depth.
For both topologies decompositions with the smallest T depth
were simultaneously optimal with respect to the three remain-
ing metrics. Fig. 10 depicts the best decompositions that were
generated. Note that the decomposition on the chain topology
has T depth 3 and may be a new result.

Topology

CZ count 14
CZ depth 11

14
13

16
15

16
16

18
14

TABLE II. Decompositions of 4q Toffoli gate on various topolgies

B. 4q Toffoli

We now proceed to the decomposition of the 4q Toffoli gates
which are significantly more challenging. Variational synthe-
sis of the 4q Toffoli gate on various 4q topologies has been re-
cently addressed in Ref. [21]. Remarkably, the approach taken
there was that of an exhaustive search over all architectures.
It is interesting to note that for exhaustive search connectivity
restrictions actually simplify the problem. Using CPFlow we
were able to reproduce all results presented in Ref. [21], see
Table II. Moreover, for the star-shaped topology we achieved a
minor improvement reducing the CZ count from 17 to 16. The
corresponding circuit is depicted at Fig. 11. Note that we did
not look for decompositions minimizing CZ depth, but simply
report CZ depths of the first CZ count optimal decompositions

10

X (π)

X ( π
2 )

X (π)

• X ( π
2 )
• Z ( π
2 )

X ( π
8 )

• X ( π
2 )

•

•

•

Z ( −3π
8 )

Z (π)

X ( π
2 )
X ( 5π
8 )

•

Z (π)

• X ( π
2 )

X ( π
2 )

• X ( π
2 )

• X ( 3π
8 )
• Z ( −π
2 )

X ( π
2 )

• X ( 7π
8 )

• X (π)

• X (π)

Z ( −π
2 )

X ( π
2 )

•

•

• Z ( π
2 )

X ( π
2 )

• Z ( −5π
8 )

X ( π
2 )

• Z ( π
8 )

X ( π
2 )

• Z ( −π
2 )

X ( 3π
8 )

• Z (−π)

X ( π
8 )

• Z ( −π
2 )

X ( π
2 )

• Z ( 7π
8 )

X ( π
2 )

• Z ( −π
2 )

•

• X (π)

•

Z ( −π
2 )

X ( π
2 )

Z ( −3π
8 )

X ( 5π
8 )
Z ( −7π
8 )

• X ( π
2 )

•

Z ( π
2 )

X ( π
2 )

• X ( π
2 )

• Z ( −3π
8 )

X ( π
2 )

Z ( π
2 )

• X (π)

Z ( −3π
8 )

FIG. 11. Decomposition of the 4q Toffoli gate on the star-shaped topology (all CZ gates touch the uppermost qubit) with 16 CZ gates.

XYZ

XZ

0.6 × 10−2 7.8 × 10−2

0.4 × 10−2 0.2 × 10−2

TABLE III. Empirical success ratios for optimal decompositions of
the 4q Toffoli gate determined from 500 samples.

found during the search.

In all except for the fully connected topology, decomposi-
tions were discovered by the adaptive algorithm with the full
range of template depth for 4q unitaries (0, 61), 500 hundred
samples at each hyperparameter configuration and 50 hyper-
parameter evaluations. The clock time taken by the search
for each topology took about 40 minutes on our server IV D.
In contrast, the optimal decomposition on the fully connected
topology only appeared after about 200 hyperparameter eval-
uations and took about 2 hours.

One might wonder why did the exhaustive search approach
of Ref. [21] overlooked the decomposition on the star topol-
ogy with 16 CZ gates. A plausible cause might again be due
to the local minimums. Table III shows empirical success ra-
tios for the optimal circuits found by CPFlow on the fully con-
nected and star topologies with two different choices of 1q
gates: XYZ and XZ. First thing to note is that the the suc-
cess ratio for the star topology and XZ structure of 1q gates
is only about 2%. Work [21] indeed used the XZ ansatz al-
beit with a different optimization procedure [48]. We find it
likely that the appropriate architecture was missed simply due
insufficient amount of trials. The problem of local minimums
in fact renders even the exhaustive search over the architec-
tures insufficient to confidently prove optimality of decompo-
sitions. Another interesting observation is that for a connected
circuit the success ratios of XYZ and XZ templates differ by
an order of magnitude. This highlights the importance of the
parametrization and/or initial sampling.

C.

5q Toffoli

To our knowledge, the best decomposition of the 5q Tof-
foli gate on the fully connected topology without ancilla qubits
features 30 CZ gates, an upper bound valid for all diagonal
gates [23]. The best result of direct synthesis with CPFlow
running for several hours that we observed featured 36 CZ
gates indicating that 5q unitaries with sufficiently many gates
are significantly harder to address. However, synthesis with
topological restrictions also poses significant challenges to the
demultiplexing framework of Ref. [23]. It is thus interesting
to see if our numerical routine can be useful.

To this end we consider the compilation of the 5q Toffoli
gate on the chain topology. As a reference point we take the
best result achieved by the Qiskit
transpiler out of 1000 runs
with optimization_level set to 3, that yielded a decompo-
sition with 61 CZ gates.1 The best results of direct synthesis
with CPFlow yielded a decomposition with 69 CZ gates. As
we now show, by using a combination of the analytic and nu-
merical techniques this this result can be improved to 48 CZ
gates.

Our strategy is to reduce synthesis of the 5q Toffoli gate to
the synthesis of several 4q blocks. We first observe that the
optimal 30 CZ gate decomposition of the 5q Toffoli gate on a
fully connected topology can be obtained from the left circuit
depicted at Fig. 12. Triply controlled
X gate is a diagonal
gate up to conjugation by the Hadamard gates and hence can
be decomposed into 14 CZ gates, just as the standard 4q Toffoli
gate. Singly controlled
X gates can be decomposed into 2 CZ
gates each. Finally, the boxed 4q Toffoli gates can be replaced
by their relative phase counterparts [45], each requiring only
6 CZ gates. In total this gives 30 CZ gates, the best known
amount.

√

√

1 Note that the transpilation process in Qiskit generally yields circuits which
are only equal to the target unitary up to a possible permutations of qubits.
As restoring the original permutation might be an expensive operation in
terms of the CZ count, the transpilation results should be considered as a
lower bound.

11

•

•

C 4X = •

•

•

•

•

•

•

•

•

•

=

•

•

•

•
√

†
X

•
√

X

√

X

•
√

†
X

•
√

X •

FIG. 12. A decomposition of the 5q Toffoli gate.

•

•

•
√

X •

•

•

√

We now try to adapt this decomposition to the chain topol-
ogy. Right circuit on Fig. 12 shows that by inserting four addi-
tional CNOT gates (each pair originates from a SWAP gate,
the two closest CNOT gates cancel each other) around the
X gate we can place all 4q gates on the
triply controlled
first four qubits. Next, we use CPFlow to decompose C3
X
and relative phase C3X gates on the chain topology. We found
X with 18 CZ gates, the same gate
a decomposition of C3
count that is needed for decomposing of the C3X gate on a
chain topology II. For the relative phase C3X gate we found a
decomposition with 11 CZ gates. Details and corresponding
circuit diagrams are delegated to app.B. In the end this yields
a decomposition of the 5q Toffoli gate on the chain topology
with 48 = 2 × 11 + 18 + 2 × 4 CZ gates in total. We are not
aware of other methods improving this count.

√

√

VI. FURTHER BENCHMARKS

Following [17], we test the performance of CPFlow on
a range of standard benchmark circuits from the ibm_qx
database [49, 50]. In Ref. [17] an extensive comparison be-
tween packages SQUANDER , QFast , and QSearch was per-
formed. Provided enough time, SQUANDER reliably out-
performed other packages in most examples. From each of
the Tables 1, 3 and 4 presented in Ref. [17] we pick 5 circuits
with the highest CZ count found by SQUANDER , as these
are likely to be the most challenging and hence the most infor-
mative (for the same reason we skipped Table 2, which mostly
contains much simpler circuits). All selected examples are 5q
circuits.

We must note that currently CPFlow does not have a ded-
icated subroutine to estimate the expected target complexity
and narrow the hyperparameter window accordingly. Using
the adaptive routine with the full range of gate counts allowed
by the theoretical lower bound (2) already for 5q circuits is un-
necessarily time-consuming. Informed by the gate counts ob-
tained by SQUANDER we ran the adaptive routine with CP
counts of templates in the range from 20 to 100 for 100 evalua-
tions with 1000 samples each. Results are reported in Table IV
(CZ counts marked by asterisks are explained below).

Results for group I, targeting synthesis of lower complex-
ity circuits on the fully connected topology, show a signifi-
cant compression achieved by CPFlow compared to SQUAN-
In contrast, for
DER , averaging to approximately 25%.

circuits of similar complexity on the chain topology, group
II, the difference between CPFlow and SQUANDER is
less noticeable, averaging to a 10% additional compression.
It would be interesting to understand the role of topology
in either approach in more detail. The last group III con-
sists of the circuits that the SQUANDER package failed to
synthesize on its own being unable to generate initial tem-
plates for compression [17]. In our view, the reason is likely
to be rooted in the local minimums problem, which grows
more acute with an increasing gate count. The authors of
Ref. [17] proposed an interesting workaround to generate ini-
tial templates using other software packages (Qiskit + QFast
) and then further compress them with SQUANDER . The
resulting gate counts are reported in the last column of Ta-
ble IV. The last two circuits in this group were synthesized
by CPFlow along with the circuits from groups I and II and
turned out to have far lower complexity than SQUANDER re-
sults suggest. On the other hand, the first three circuits indeed
proved to be the hardest to synthesize, and in fact CPFlow
found only poor or no decompositions at all for these cir-
cuits with the original search options. This lead us to initiate
a second adaptive optimization with a narrower gate range
(min_num_cp_gates=40, max_num_cp_gates=60) and in-
creased amount of samples (num_samples=2000). Eventu-
ally, acceptable and even apparently efficient decompositions
were found by CPFlow yielding an average compression of
25%. Yet, it also became apparent that gate counts above 40
are a very challenging target for the algorithm with most trials
yielding no prospective circuits at all.

We need to stress that figures in Table IV should not be
taken as an accurate performance comparison between the al-
gorithms (and hence we do not report the consumed resources
and runtimes). First, the low-level implementation and the pro-
cessor that we used are very different from those employed in
Ref. [17]. Second, we relied on the results obtained in Ref. [17]
to tune hyperparameters of CPFlow in advance. Precise com-
parison should also have a clear metric such as the maximum
compression efficiency, faster runtime, scalability etc. Our pri-
mary objective was to minimize gate counts of synthesized
circuits, the task that CPFlow addressed with a promising ef-
ficiently and within a relatively short time frame.

Circuit

CPFlow SQUANDER QSearch QFast+Qiskit+SQUANDER

12

4gt5_76
one-two-three-v2_100
alu-v3_34
alu-v4_36
4gt13_92

4gt13_91
4gt5_76
alu-v0_26
alu-v3_35
4mod5-v1_24

I. Connected, lower complexity

21
28
14
30
17

25
22
28
24
29

24
37
25
40
24

-
43
27
-
-

II. Chain, lower complexity

26
26
32
26
31

35
51
-
34
44

III. Connected, higher complexity

4gt10-v1_81
one-two-three-v1_99
one-two-three-v0_98
aj-e11_165
alu-v2_32

37*
52*
47*
24
30

-
-
-
-
-

-
-
-
-
-

-
-
-
-
-

-
-
-
-
-

39
45
61
36
41

TABLE IV. CNOT counts of circuits from imb_qx set [49] synthesized with CPFlow , SQUANDER , QSearch and a hybrid combination
QFast+Qiskit+SQUANDER . Bars indicate either a failure to synthesize a circuit or the absence of data. Results of CPFlow were obtained via
the adaptive routine with the following options: min_num_cp_gates=20, max_num_cp_gates=100, num_samples=1000, max_evals=100
except for the gate counts marked with an asterisk. The latter were obtained under a different option set: min_num_cp_gates=40,
max_num_cp_gates=60, num_samples=2000, max_evals=100. Results of the other software packages are reproduced from [17].

VII. SUMMARY AND OUTLOOK

In this paper we presented a new approach to the variational
synthesis into CNOT plus 1q gate set. We identified the prob-
lem of local minimums as a crucial yet underappreciated ob-
stacle that needs to be addressed. In the absence of an efficient
way to avoid local minimums we have made an extensive ex-
ploration of the initial conditions space an integral part of our
scheme. We also proposed to use parametric 2q gates as a
way to unify the architecture search with the continuous opti-
mization of 1q gates into a single coherent optimization and
demonstrated its efficiency. A recent work based on a simi-
lar idea [17] also showed significant improvement over more
standard discrete architecture search [15].

While capable of generating many interesting results our
method has its limitations. The first is rather fundamental and
common to all similar schemes. Since the input circuit is rep-
resented by means of the corresponding unitary matrix, only
small scale circuits that are easy to simulate classically can be
addressed. This however does not preclude using variational
synthesis to optimize smaller building blocks of large scale
useful quantum algorithms [16]. Exploring this direction is an
important and practically relevant avenue for future work.

Scaling up the variational approach within the classically
accessible regime appears to be mostly limited by the circuit
complexity rather than the qubit count, e.g. it seems to be more
difficult to efficiently compile a 4q circuit that requires many
2q gates than it is to compile a 5q circuit that can be represented
using only a small amount of 2q gates. Importantly, the chal-
lenges associated with the higher complexity are not caused

only by the combinatorial growth of the possible architectures
alone but also by the proliferation of the local minimums in the
loss landscape. Our empirical results (cf Fig. 6) indicate that
already for 4q circuits in the range from 12 to 50 2q gates the
probability of a successful continuous optimization is less than
0.1% even for a correctly chosen architecture. This probabil-
ity depends on numerous factors including details of the op-
timization procedure, distribution of the initial conditions and
parametrization of the loss landscape. Detailed understanding
of these mechanisms may lead to a dramatic improvement in
variational compilers efficiency.

There are numerous further possibilities to enhance varia-
tional synthesis of high-complexity unitaries. For example, if
the unitary originates from a known quantum circuit, it could
be possible to use this information to ones advantage. Split-
ting the original circuit in parts each having lower complexity
and synthesising them separately may lead to better results.
Another proposal is to use the original circuit as the starting
template for the variational compression [17]. A recent work
[51] has shown that modifying template architectures on the go
can help to reduce both global minimums and barren plateaus.
It would be interesting to see if some of the circuits generated
by CPFlow, which have efficient gate count but insufficient fi-
delity can serve as a useful starting point for the "burrowing"
procedure suggested in [51]. Eventually, the viability and re-
source allowance of the variational synthesis must be justified
by the payoff if provides for useful applications.

13

(a) Original circuit

Z ( π
2 )

X (π)

Z (0)

X (0.7854)

Z (0)

Z ( π
2 )

Z (0)

X (1.489)

Z (3.142)

• Z (−2.356)

X (1.257e − 05)

Z (4.511)

• Z (−3.142)

X (1.571)

Z (3.685)

Z ( π
2 )

X (π)

Z (0)

X (0.7854)

Z (0)

Z ( π
2 )

Z (0)

X (1.489)

Z (3.142)

• Z (−2.356)

X (1.257e − 05)

Z (4.511)

• Z (−3.142)

X (1.571)

Z (3.685)

(b) Circuit with reduced angles

X (3.142)

•

•

• X (3.141)

• X (1.571)

•

•

X (−π)

•

Z (0.7852)

Z (−1.571)

X (0.7854)

• Z (−1.571)

X (1.571)

Z (−2.357)

• Z (−π)

X (2.356)

•

Z (−π)

X (2.356)

• Z (−π)

X (0.7853)

• Z (−3.142)

X (−0.7855)

Z (3.142)

(c) Rationalized circuit

X (π)

•

•

• X (π)

• X ( π
2 )

•

•

X (−π)

Z ( −π
2 )

X ( π
4 )

•

Z ( π
4 )
• Z ( −π
2 )

X ( π
2 )

Z ( −3π
4 )

• Z (−π)

X ( 3π
4 )

• Z (−π)

X ( 3π
4 )

• Z (−π)

X ( π
4 )

• Z (−π)

X ( −π
4 )

Z (π)

FIG. 13. Refinement of the approximate decomposition of the 3q Toffoli gate into an exact result.

Acknowledgments

with some unitary matrices U0, U1. In turn, as a function of
two angles it can always be represented as

We would like to thank A. Nikolaeva, P. Rakyta, and Z. Zim-
borás for stimulating discussions, L. Madden and O. Lock-
wood for their considerate feedback on the draft, and V. Du-
binin for the help with numerics. This work was supported by
the Russian Roadmap on Quantum Computing (the develop-
ment of the algorithm and benchmarks in Sec. VI; Contract
No. 868-1.3-15/15-2021, October 5, 2021).

Appendix A: Circuit refinement

Quantum circuits that result from numerical optimization
performed by CPFlow typically have many redundant 1q gates,
see Fig. 13(a) for an example.We propose a simple refinement
procedure that helps to find a simpler representation for such
circuits.

First, we test if an angle a can be set to 0 without affecting
the loss function. For instance, in the state preparation prob-
lem the initial round of RZ gates has no effect when applied
to the all-zero state and hence can be simply omitted.

Next, we check if there are cancellations between pairs of
rotation gates (not necessarily adjacent). As a function of a
single angle any parametrized quantum circuit has the follow-
ing simple form

U (a) = U0 cos a + U1 sin a

(A1)

U (a1, a2) = U00 cos a1 cos a2 + U01 cos a1 sin a2+
U10 sin a1 cos a2 + U11 sin a1a2

(A2)

or, equivalently, as

U00 − U11
2

cos (a1 + a2) +

U01 + U10
2

sin (a1 + a2)+

U00 + U11
2

cos (a1 − a2) +

U10 − U01
2

sin (a1 − a2) .

(A3)

Typically all terms in this expression are non-vanishing and
different choices of a1 and a2 correspond to different unitaries
(up to discrete redundancies). It may happen, however, that
either the unitary U itself or the loss function of interest L(U )
does not contain terms with a1 + a2 or a1 − a2. For instance,
for the two consecutive RX rotations RX (a1)RX (a2) only the
terms that depend on the sum of angles are present in (A3).
Hence, for every pair of angles (it is usually sufficient to only
consider angles of gates acting on the same qubit) we check if
L(U (0, a2 ± a1)) = L(U (a1, a2)) and if such pair is found,
the first angle is set to 0 and the second angle is adjusted ac-
cordingly. Results of this step are illustrated at Fig. 13(b).

Finally, we check if the resulting angles of the 1q gates can
be approximated by the rational multiples of π without com-
promising the accuracy of the loss function L(U ) (in fact the
accuracy is often improved at this step), see Fig. 13(c).

X ( π
2 )

X ( π
4 )

• Z ( −3π
4 )

•

• X ( π
2 )
• X ( 3π
4 )

•

•

•

•

X ( π
2 )

X ( π
2 )
Z ( −π
2 )

X (−π)

•

X ( π
2 )

•

Z ( 3π
4 )

• Z (−π)

X ( π
4 )
X ( 3π
4 )

• Z (−π)

X ( 3π
4 )

•

Z ( π
4 )

• Z (−π)

• X (−π)

•

X ( π
2 )

• X (−π)

X ( π
2 )
X ( π
2 )

•

•

Z ( π
4 )
Z ( −π
2 )

X ( π
2 )
X ( π
2 )

• Z ( −3π
4 )

X ( π
4 )

• X (−π)

• Z (−π)

X ( 3π
4 )

FIG. 14. A decomposition of the relative phase 4q Toffoli gate on the chain topology with 11 CZ gates.

14

X (π)

•

X ( π
2 )
X ( π
2 )

• X ( π
2 )

• X ( π
2 )
• X ( π
2 )

• X (π)

• X ( π
2 )
• Z ( 7π
16 )

•

Z ( π
2 )

X ( π
2 )
X ( π
2 )

• X ( π
2 )
• Z ( π
2 )

•

•

X ( π

16 )

X (π)

Z (−π)

X ( π
2 )

• X ( 15π
16 )
• Z ( −7π
16 )

X ( π
2 )
Z ( π
2 )

•

•

X ( π
2 )

•

•

X (π)

Z (π)

X ( π
2 )

•

•

X ( π
2 )
Z ( −π
16 )

Z (−π)

X ( π
2 )
X ( π
2 )

• X ( π
2 )
• Z ( −π
2 )

•

•

X (π)

Z (−π)

X ( 9π
16 )

•

•

X ( π
2 )
X ( 15π
16 )

•

•

Z ( −7π
16 )

Z ( π
2 )
Z ( π

16 )

X ( π
2 )
X ( π
2 )
X ( π
2 )

• X (π)

• X ( π
2 )
• Z ( π

16 )

•

Z (π)

Z ( π

16 )

X ( π
2 )
X ( π
2 )

• X (π)

Z ( −15π
16 )

• Z ( −π
2 )

X ( 7π
16 )

•

Z ( −π
2 )
• Z ( −9π
16 )

X ( π
2 )
X ( π
2 )

Z ( −7π
16 )

Z ( −π
2 )

(6)

FIG. 15. A decomposition of C3

√

X gate on the chain 4q topology with 18 CZ gates.

The steps outlined above are heuristic and do not always lead
to expected results, but often work well in practice. All circuits
reported in this paper were obtained automatically in this fash-
ion. Heuristically we find that when decompositions are close
to optimal the refinement procedure works best. Possibly this
can be attributed to the fact that extra gates allow for more com-
plicated redundancies in the circuit that are not accounted for
by our simple steps. Also, the procedure works best when the
loss function is the most restrictive as in the compilation prob-
lem, when only the global phase of the unitary is not defined.
When the loss function is more permissive, such as in state
preparation, further steps usually need to be taken to eliminate
all redundant gates.

√

√

X and a relative-phase 4q Toffoli gate on
4q Toffoli gate C3
X with 18 CZ
the chain 4q topology. Decomposition of C3
gates can be found using standard methodology described in
Sec.V B. The resulting circuit is depicted at Fig. 14. To find
a relative-phase Toffoli gate one needs to use a non-standard
loss function. By definition [45], U is a relative phase Toffoli
gate if U = V D, where V is the unitary matrix of the Tof-
foli gate and D is a diagonal unitary matrix. To construct the
corresponding loss function we can use the fact that the sum
(cid:80)
i |Dii|2 for a unitary matrix D has the maximum value 2n iff
D is diagonal. Hence, the following loss reaches its minimum
iff U is a relative phase Toffoli gate

Appendix B: 4q gates featuring in the decomposition of the 5q
Toffoli gate

In Sec. V C we constructed a decomposition of the 5q Toffoli
gate on the chain topology with 48 CZ gates. This decompo-
sition used efficient representations for the square root of the

L(U ) = 1 −

Tr (cid:12)

(cid:12)U V †(cid:12)
2
(cid:12)
2n

= 1 −

(cid:80)

i,j

2

(cid:12)
(cid:12)

(cid:12)
(cid:12)UijV ∗
ji
2n

(B1)

With this loss function and standard parameter specifications
for the 4q circuits used in this work CPFlow generated a rel-
ative phase 4q Toffoli gate on the chain topology with 11 CZ
gates. The circuit is shown at Fig.15.

[1] P. W. Shor, Polynomial-time algorithms for prime factorization
and discrete logarithms on a quantum computer, SIAM Journal

on Computing 26, 1484 (1997), arXiv:9508027 [quant-ph].

[2] L. K. Grover, Quantum mechanics helps in searching for a nee-
dle in a haystack, Physical Review Letters 79, 325 (1997).
[3] A. W. Harrow, A. Hassidim, and S. Lloyd, Quantum algorithm
for linear systems of equations, Physical Review Letters 103, 1
(2009), arXiv:arXiv:0811.3171v3.

[4] A. K. Fedorov, N. Gisin, S. M. Beloussov, and A. I. Lvovsky,
Quantum computing at the quantum advantage threshold: a
down-to-business review, , 1 (2022), arXiv:2203.17181.

[5] J. Preskill, Quantum computing in the NISQ era and beyond,

Quantum 2, 1 (2018), arXiv:1801.00862.

[6] M. Khazali and K. Mølmer, Fast multi-qubit gates by adiabatic
, 1 (2020),

evolution in interacting excited state manifolds,
arXiv:2006.07035.

[7] M. S. A. et al, Qiskit: An open-source framework for quantum

computing (2021).

[8] S. Sivarajah, S. Dilkes, A. Cowtan, W. Simmons, A. Edging-
ton, and R. Duncan, t|ket: a retargetable compiler for NISQ
devices, Quantum Science and Technology 6, 10.1088/2058-
9565/ab8e92 (2021), arXiv:arXiv:2003.10611v3.

[9] A. Barenco, C. H. Bennett, R. Cleve, D. P. Divincenzo, N. Mar-
golus, P. Shor, T. Sleator, J. A. Smolin, and H. Weinfurter, Ele-
mentary gates for quantum computation, Physical Review A 52,
3457 (1995), arXiv:9503016 [quant-ph].

[10] Y. Kharkov, A. Ivanova, E. Mikhantiev, and A. Kotelnikov,
Arline Benchmarks: Automated Benchmarking Platform for
Quantum Compilers,

, 1 (2022), arXiv:2202.14025.

[11] D. P. Divincenzo and J. Smolin, Results on two-bit gate de-
sign for quantum computers, Proceedings Workshop on Physics
and Computation, PhysComp 1994 , 14 (1994), arXiv:9409111
[cond-mat].

[12] H. Nagarajan, O. Lockwood, and C. Coffrin, QuantumCir-
cuitOpt: An Open-source Framework for Provably Optimal
Quantum Circuit Design, Proceedings of QCS 2021: 2nd In-
ternational Workshop on Quantum Computing Software, Held
in conjunction with SC 2021: The International Conference for
High Performance Computing, Networking, Storage and Anal-
ysis , 55 (2021), arXiv:2111.11674.

[13] Y. Nam, N. J. Ross, Y. Su, A. M. Childs, and D. Maslov, Au-
tomated optimization of large quantum circuits with continuous
parameters, npj Quantum Information 4, 10.1038/s41534-018-
0072-4 (2018), arXiv:1710.07345.

[14] S. Khatri, R. LaRose, A. Poremba, L. Cincio, A. T. Sornborger,
and P. J. Coles, Quantum-assisted quantum compiling, Quantum
3, 10.22331/q-2019-05-13-140 (2019), arXiv:1807.00800.
[15] E. Smith, M. G. Davis, J. Larson, E. Younis, C. Iancu,
and W. Lavrijsen, LEAP: Scaling Numerical Optimization
Based Synthesis Using an Incremental Approach,
, 1 (2021),
arXiv:2106.11246.

[16] E. Younis, K. Sen, K. Yelick, and C. Iancu, QFAST: Conflat-
ing Search and Numerical Optimization for Scalable Quantum
Circuit Synthesis, Proceedings - 2021 IEEE International Con-
ference on Quantum Computing and Engineering, QCE 2021 ,
232 (2021), arXiv:2103.07093.

[17] P. Rakyta and Z. Zimborás, Efficient quantum gate de-
(2022),

composition via adaptive circuit compression,
arXiv:2203.04426.

[18] B. T. Kiani, S. Lloyd, and R. Maity, Learning Unitaries by Gra-

dient Descent, (2020), arXiv:2001.11897.

[19] L. Madden and A. Simonetto, Best Approximate Quantum
Compiling Problems, ACM Transactions on Quantum Comput-
ing 3, 1 (2022), arXiv:2106.05649.

[20] P. Rakyta and Z. Zimborás, Approaching the theoretical limit in
quantum gate decomposition, (2021), arXiv:2109.06770.

15

[21] K. M. Nakanishi, T. Satoh, and S. Todo, Quantum-gate decom-

poser,

, 1 (2021), arXiv:2109.13223.

[22] V. V. Shende, I. L. Markov, and S. S. Bullock, Smaller two-qubit
circuits for quantum communication and computation, Proceed-
ings - Design, Automation and Test in Europe Conference and
Exhibition 2, 980 (2004).

[23] V. V. Shende, S. S. Bullock, and I. L. Markov, Synthesis of
quantum-logic circuits, IEEE Transactions on Computer-Aided
Design of Integrated Circuits and Systems 25, 1000 (2006),
arXiv:0406176 [quant-ph].

[24] A. Botea, A. Kishimoto, and R. Marinescu, On the complexity
of quantum circuit compilation, Proceedings of the 11th Inter-
national Symposium on Combinatorial Search, SoCS 2018 , 138
(2018).

[25] J. R. McClean, J. Romero, R. Babbush, and A. Aspuru-Guzik,
The theory of variational hybrid quantum-classical algorithms,
New Journal of Physics 18, 1 (2016), arXiv:1509.04279.
[26] A. Kandala, A. Mezzacapo, K. Temme, M. Takita, M. Brink,
J. M. Chow, and J. M. Gambetta, Hardware-efficient Variational
Quantum Eigensolver for Small Molecules and Quantum Mag-
nets, Nature 549, 242 (2017), arXiv:1704.05018.

[27] H. L. Tang, V. O. Shkolnikov, G. S. Barron, H. R. Grimsley, N. J.
Mayhall, E. Barnes, and S. E. Economou, Qubit-ADAPT-VQE:
An Adaptive Algorithm for Constructing Hardware-Efficient
Ansätze on a Quantum Processor, PRX Quantum 2, 1 (2021),
arXiv:arXiv:1911.10205v2.

[28] J. R. McClean, S. Boixo, V. N. Smelyanskiy, R. Babbush,
and H. Neven, Barren plateaus in quantum neural network
training landscapes, Nature Communications 9, 1 (2018),
arXiv:1803.11173.

[29] L. Bittel and M. Kliesch, Training variational quantum al-
gorithms is NP-hard – even for logarithmically many qubits
and free fermionic systems 10.1103/PhysRevLett.127.120502
(2021), arXiv:2101.07267.

[30] X. Ge, R.-b. Wu, and H. Rabitz, The Optimization Landscape of
Hybrid Quantum-Classical Algorithms: from Quantum Control
to NISQ Applications, (2022), arXiv:2201.07448.

[31] D. Wierichs, C. Gogolin, and M. Kastoryano, Avoiding local
minima in variational quantum eigensolvers with the natural
gradient optimizer, Physical Review Research 2, 10.1103/Phys-
RevResearch.2.043246 (2020), arXiv:2004.14666.

[32] J. Rivera-Dean, P. Huembeli, A. Acín, and J. Bowles, Avoiding
local minima in Variational Quantum Algorithms with Neural
Networks,

, 1 (2021), arXiv:2104.02955.

[33] D. P. Kingma and J. L. Ba, Adam: A method for stochastic opti-
mization, 3rd International Conference on Learning Represen-
tations, ICLR 2015 - Conference Track Proceedings , 1 (2015),
arXiv:1412.6980.

[34] J. Stokes, J. Izaac, N. Killoran, and G. Carleo, Quantum Natu-
ral Gradient, Quantum 4, 10.22331/Q-2020-05-25-269 (2020),
arXiv:1909.02108.

[35] T. Jones and S. C. Benjamin, Quantum compilation and circuit
optimisation via energy dissipation, (2018), arXiv:1811.03147.
[36] O. Lockwood, An Empirical Review of Optimization
(2022),

for Quantum Variational Circuits,

Techniques
arXiv:2202.01389.

[37] R. Tibshirani, Regression shrinkage and selection via the lasso,
Journal of the Royal Statistical Society: Series B (Methodolog-
ical) 58, 267 (1996).

[38] D. L. Donoho, For most large underdetermined systems of lin-
ear equations the minimal 1-norm solution is also the sparsest
solution, Communications on Pure and Applied Mathematics:
A Journal Issued by the Courant Institute of Mathematical Sci-
ences 59, 797 (2006).

[39] E. J. Candès, J. Romberg, and T. Tao, Robust uncertainty prin-
ciples: Exact signal reconstruction from highly incomplete fre-
quency information, IEEE Transactions on information theory
52, 489 (2006).

[40] E. J. Candès, X. Li, Y. Ma, and J. Wright, Robust principal com-
ponent analysis?, Journal of the ACM (JACM) 58, 1 (2011).
[41] J. Bergstra, D. Yamins, and D. D. Cox, Making a science of
model search: Hyperparameter optimization in hundreds of di-
mensions for vision architectures, Proceedings of the 30th Inter-
national Conference on International Conference on Machine
Learning - Volume 28, ICML’13, I–115–I–123 (2013).
[42] N. Nemkov, I. Luchnikov, E. Kiktenko, and A. Fedorov, cpflow,

https://github.com/idnm/cpflow (2022).
[43] J. Bradbury, R. Frostig, P. Hawkins, M.

Johnson,
C. Leary, D. Maclaurin, G. Necula, A. Paszke, J. Vander-
Plas, S. Wanderman-Milne, and Q. Zhang, JAX: composable
transformations of Python+NumPy programs (2018).

J.

[44] G. Song and A. Klappenecker, The simplified Toffoli gate imple-
, 1 (2003), arXiv:0312225

mentation by Margolus is optimal,
[quant-ph].

16

[45] D. Maslov, On the advantages of using relative phase Toffolis
with an application to multiple control Toffoli optimization, , 1
(2015), arXiv:1508.03273.

[46] V. V. Shende and I. L. Markov, On the cnot-cost of toffoli
gates, Quantum Information and Computation 9, 461 (2009),
arXiv:0803.2316.

[47] N. Schuch, Implementation of quantum algorithms with Joseph-
son charge qubits, Ph.D. thesis, Universität Regensburg (2002).
[48] K. M. Nakanishi, K. Fujii, and S. Todo, Sequential minimal opti-
mization for quantum-classical hybrid algorithms, Physical Re-
view Research 2, 1 (2020), arXiv:1903.12166.

[49] A. P. Alwin Zulehner, Stefan Hillmich and R. Wille,
https://github.com/iic-jku/ibm_

ibm_qx_mapping,
qx_mapping (2017).

[50] A. Zulehner, A. Paler, and R. Wille, An Efficient Methodology
for Mapping Quantum Circuits to the IBM QX Architectures,
IEEE Transactions on Computer-Aided Design of Integrated
Circuits and Systems 38, 1226 (2019), arXiv:1712.04722.
[51] H. R. Grimsley, G. S. Barron, E. Barnes, S. E. Economou, and
N. J. Mayhall, ADAPT-VQE is insensitive to rough parameter
landscapes and barren plateaus, (2022), arXiv:2204.07179.

