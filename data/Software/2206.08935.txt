PROGRAMS AND ALGORITHMS FOR THE SHELL 

DECOMPOSITION OF OSCILLATING FUNCTIONS IN SPACE 

by 

Ludmila Urzhumtseva§, Vladimir Y. Lunin& & Alexandre Urzhumtsev#€ 

§Architecture  et  Réactivité  de  l’ARN,  UPR  9002  CNRS,  IBMC  (Institute  of  Molecular  and 

Cellular  Biology),  15  rue  R.  Descartes,  67084  Strasbourg,  France  ;  Université  de 

Strasbourg, Strasbourg, F-67000 France 

&Institute  of  Mathematical  Problems  of  Biology  RAS,  Keldysh  Institute  of  Applied 

Mathematics of Russian Academy of Sciences; Pushchino, 142290, Russia. 
#Centre for Integrative Biology, Institut de Génétique et de Biologie Moléculaire et Cellulaire, 

CNRS–INSERM-UdS, 1 rue Laurent Fries, BP 10142, 67404 Illkirch, France  

€Université de Lorraine, Faculté des  Sciences  et  Technologies, BP  239,  54506 Vandoeuvre-

les-Nancy, France 

E-mail: l.ourjoumtseva@ibmc-cnrs.unistra.fr , lunin@impb.ru , sacha@igbmc.fr 

Abstract  

Real-space refinement of atomic models in macromolecular crystallography or in cryo 

electron microscopy fits a model to a map obtained experimentally. This requires generating 

model maps of a limited resolution which moreover may vary from one molecular region to 

another.  Calculating  such  map  as  a  sum  of  atomic  contributions  requires  that  these 

contributions reflect the local resolution of the experimental map. A possibility to refine the 

parameters  of  these  contribution  means  to  express  it  as  a  function  of  atomic  coordinates, 

displacement  factor  and  eventually  of  resolution.  Recently,  Urzhumtsev  &  Lunin  (BioRxiv, 

10.1101/2022.03.28.486044)  suggested  to  decompose  finite-resolution  atomic  images,  and 

more  generally  spherically  symmetric  oscillating  functions  in  space,  into  a  sum  of  specially 

designed  terms  analytically  dependent  on  all  atomic  parameters.  Each  term  is  a  spherically 

symmetric  function  concentrated  in  a  spherical  shell.  Here  we  describe  the  software  and 

respective algorithms to carry out such shell decomposition of oscillating functions. 

 
 
 
 
 
 
Keywords:  

Shell decomposition, atomic images, interference function, Fourier ripples, real-space 

refinement, resolution, atomic displacement factor.  

Synopsis:  A  software  has  been  developed  to  decompose  spherically  symmetric  oscillating 

functions  in  space  into  a  sum  of  specially  designed  shell-shaped  functions.  Such 

decomposition  allows  one  to  represent  a  resolution-restricted  atomic  image  by  a  function 

dependent  analytically  on  the  resolution,  the  isotropic  disorder  parameter,  and  the  atomic 

coordinates. 

Introduction  

In  macromolecular  crystallography  (MX)  or  in  cryo-electron  microscopy  (cryoEM), 

real-space  refinement  of  atomic  models,  i.e.,  their  fit  to  the  experimental  or  experimentally 

based  maps,  is  the  key  step  of  model  improvement  and  validation  (e.g.,  Diamond,  1971; 

Chapman et al., 2013; Afonine et al., 2018; Urzhumtsev & Lunin, 2019). This step becomes 

even  more  important  (Palmer  &  Aylett,  2022)  with  the  recent  progress  in  cryoCM 

(Kühlbrandt, 2014) and  in prediction of protein  structures  (Jumper et  al.,  2021;  Baek  et  al., 

2021). 

Three-dimensional  fields  such  as  an  electrostatic  potential  or  an  electron  or  nuclear 

density  can  be  seen  as  a  sum  of  contributions  from  individual  independent  atoms.  The 

experimental  maps  of  these  fields  are  their  distorted  images,  basically  due  to  an  atomic 

disorder and a limited resolution. To be compared quantitatively with an experimental map, a 

map  obtained  from  an  atomic  model  should  mimic  the  same  distortions.  Such  map  can  be 

calculated  as  a  sum  of  independent  atomic  contributions  considering  respectively  both  the 

atomic  disorder  and  the  resolution  cut-off  with  which  the  experimental  maps  are  available 

(e.g.,  Chapman,  1995;  Lutdke  et  al.,  1999;  Chapman  et  al.,  2013;  DiMaio  et  al.,  2015, 

Sorzano  et  al.,  2015,  and  references  therein).  In  the  simplest  case  of  an  isotropic  harmonic 

disorder,  such  contributions,  also  called  atomic  images  in  the  given  map,  are  spherically 

symmetric oscillating functions. They are composed of a peak in the origin surrounded by so-

called  Fourier  ripples  with  their  amplitude  decreasing  to  zero  much  slower  than  an  atomic 

 
 
 
 
 
 
density  itself.  These  functions,  in  particular  the  size  and  position  of  the  Fourier  ripples, 

depend on the atomic type, resolution and the disorder amplitude. Modeling the central peaks 

only, e.g., Lunin & Urzhumtsev (1984), is insufficient to reproduce the map accurately. 

Spherically symmetric oscillating functions in space, in particular atomic images, can be 

decomposed  into  a  sum  of  terms,  each  represented  by  a  specially  designed  spherically 

symmetric analytical function (

-function) that describes a distribution concentrated in a thin 

spherical shell (Urzhumtsev & Lunin, 2022). The main feature of the 

𝛺𝛺

-function is that it does 

not  change  its  form  when  changing  the  displacement  parameter  or  the  image  resolution  but 

𝛺𝛺

only modifies the value of the respective parameters. This allows an analytic expression of the 

model map values via all parameters of the atomic model including the local resolution, now 

associated  with  the  atom  (Urzhumtsev  &  Lunin,  2022).  This  in  turn  assures  analytic 

expressions for all respective partial derivatives of the score function comparing the maps and, 

as result, an efficient model refinement.  

In  this  work,  we  describe  the  algorithms  and  the  programs  that  realize  such  shell 

decomposition of the oscillating functions in space. In what follows, we use the term “density” 

for all scalar fields since the mathematical and computer tools are exactly the same whatever 

the  physical  meaning  of  the  function  is.  The  term  “atomic  density”  stands  for  the  density 

distribution  of  an  isolated  atom  and  “atomic  image”  describes  how  this  density  is  seen  in  a 

given map, i.e., considering both an atomic disorder and a respective resolution cut-off.   

1.  Algorithms 

1.1. General considerations 

Introducing a harmonic disorder into an atomic position leads to blurring the atomic density 

function by its convolution with the normalized Gaussian function 

3 2⁄

2

2

The parameter 

  𝑔𝑔(𝐫𝐫; 𝐵𝐵) = �

 is the atomic displacement factor. The density of an immobile atom is 

�                                                                      (1)

exp �−

�

4𝜋𝜋
𝐵𝐵

4𝜋𝜋

|𝐫𝐫|
𝐵𝐵

a spherically-symmetric function with a peak in the origin and decreasing monotonously and 

𝐵𝐵 = 𝐵𝐵0

quite sharply with the distance. Traditionally, it  is decomposed into a linear combination of 

Gaussian functions (e.g., Doyle & Turner, 1968) 

 
 
 
 
 
𝑀𝑀

This allows one to use the property of the Gaussian function 

𝑚𝑚=1

𝑓𝑓(𝐫𝐫) ≈ � 𝐶𝐶𝑚𝑚𝑔𝑔(𝐫𝐫; 𝐵𝐵𝑚𝑚)

                                                                                               (2)

to express analytically the atomic density for any 

𝑔𝑔(𝐫𝐫; 𝐵𝐵) ∗ 𝑔𝑔(𝐫𝐫; 𝐵𝐵0) = 𝑔𝑔(𝐫𝐫; 𝐵𝐵 + 𝐵𝐵0)                                                                              (3)
𝐵𝐵0

To represent oscillating spherically symmetric function 

 in space we suggested the 

 value.  

decomposition  

𝑀𝑀

𝑓𝑓(𝐫𝐫)

where 

𝑓𝑓(𝐫𝐫) ≈ � 𝐶𝐶𝑚𝑚𝛺𝛺(𝐫𝐫; 𝑅𝑅𝑚𝑚, 𝐵𝐵𝑚𝑚)

𝑚𝑚=1

                                                                                   (4)

𝛺𝛺(𝐫𝐫; 𝑅𝑅, 𝐵𝐵) =

1
|𝐫𝐫|𝑅𝑅

�

1
4𝜋𝜋𝐵𝐵

�exp �−

2

2

4𝜋𝜋

(|𝐫𝐫| − 𝑅𝑅)

𝐵𝐵

� − exp �−

2

2

4𝜋𝜋

(|𝐫𝐫| + 𝑅𝑅)

𝐵𝐵

��         (5)

Function 

   represents  a  spherically  symmetric  solitary  wave  in  three-dimensional 

space (Fig. 1). It can be thought as a density of a virtual unit charge distributed uniformly on 

𝛺𝛺(𝐫𝐫; 𝑅𝑅, 𝐵𝐵)

the spherical surface of the radius 

 and blurred by the isotropic harmonic disorder described 

by the parameter 

 (Urzhumtsev & Lunin, 2022). Decomposition (4) of atomic images, which 

𝑅𝑅

we call the shell decomposition, is a generalization of the decomposition (2) because 

𝐵𝐵

𝛺𝛺(𝐫𝐫; 𝑅𝑅, 𝐵𝐵) → 𝑔𝑔(𝐫𝐫; 𝐵𝐵)       when     𝑅𝑅 → 0                                                                 (6)

An important feature of function (5) is ‘disorder transferability’ which is similar to (3):  

𝛺𝛺(𝐫𝐫; 𝑅𝑅, 𝐵𝐵) ∗ 𝑔𝑔(𝐫𝐫; 𝐵𝐵0) = 𝛺𝛺(𝐫𝐫; 𝑅𝑅, 𝐵𝐵 + 𝐵𝐵0)                                                                 (7)

In other words, knowing the decomposition (4) of an image of an immobile atom, 

, we 

automatically  get  such  decomposition  for  an  image  of  an  atom  with  any  value 

 of  the 

displacement parameter. 

𝐵𝐵0 = 0
𝐵𝐵0

It what follows, we note by 

 the distance and by 

 the radial component 

of the function 

 . The decomposition procedure considers the radial component 

𝑟𝑟 = |𝐫𝐫|

𝛺𝛺�(𝑟𝑟; 𝑅𝑅, 𝐵𝐵)
   being  defined  numerically, 

of  the  spherically  symmetric  function 
𝛺𝛺(𝐫𝐫; 𝑅𝑅, 𝐵𝐵)
 of a regular grid 

, 
𝑓𝑓̅(𝑟𝑟)
, in the axis of real numbers. 
𝑓𝑓𝑛𝑛 = 𝑓𝑓̅(𝑟𝑟𝑛𝑛)
𝑓𝑓(𝐫𝐫) = 𝑓𝑓̅(|𝐫𝐫|)
Generally  speaking,  the  condition  on  the  grid  to  be  regular  is  not  necessary  but  simplifies 

in the points 

𝑛𝑛 = 0, 1, … , 𝑁𝑁; 𝑟𝑟0 = 0; 𝑟𝑟𝑛𝑛 < 𝑟𝑟𝑛𝑛+1

𝑟𝑟𝑛𝑛

some calculations.  

 
 
 
 
 
 
 
 
 
 
In the current version of the software, the discrepancy between the function 

 and its 

decomposition (4) is defined as the unweighted least-squares difference 

𝑓𝑓(𝐫𝐫)

where 

𝐿𝐿𝐿𝐿({𝑅𝑅𝑚𝑚, 𝐵𝐵𝑚𝑚, 𝐶𝐶𝑚𝑚}) =

1
2

�  [𝑓𝑓𝑛𝑛 − 𝑓𝑓𝑀𝑀(𝑟𝑟𝑛𝑛; {𝑅𝑅𝑚𝑚, 𝐵𝐵𝑚𝑚, 𝐶𝐶𝑚𝑚})]
𝑛𝑛=0

2

                                    (8)

𝑁𝑁

𝑀𝑀

Other score functions can be easily implemented if required.  

𝑚𝑚=1

𝑓𝑓𝑀𝑀(𝑟𝑟; {𝑅𝑅𝑚𝑚, 𝐵𝐵𝑚𝑚, 𝐶𝐶𝑚𝑚}) = � 𝐶𝐶𝑚𝑚𝛺𝛺�(𝑟𝑟; 𝑅𝑅𝑚𝑚, 𝐵𝐵𝑚𝑚)

                     .                                     (9)

1.2. The procedure 

The function (9) of a scalar variable 

 includes the terms corresponding to the peaks, positive 

or negative. The number 

 of terms is defined by the maximal authorized value, 

𝑟𝑟

 , 

and  by  the  accuracy 

 of  the  decomposition  which  are  parameters  of  the  procedure. 
𝑀𝑀 ≤ 𝑀𝑀𝑝𝑝𝑝𝑝𝑝𝑝𝑝𝑝𝑝𝑝
Various  protocols  have  been  tried  mixing  different  order  of  the  term  assignment  and 

𝑀𝑀

𝜀𝜀𝑑𝑑𝑝𝑝𝑑𝑑

refinement of estimated coefficients. Available software can use several such protocols, on the 

user  choice.  The  default  protocol  consists  in  the  following  steps  starting  from  the  initial 

function values: 

a)  Find, in the increasing order of the argument 

, all acceptable local peaks of the initial 

(at the first iteration) or the residual (at eventual following iterations) function; a peak 

𝑟𝑟

 in the position 

 with 

, is selected if 

 and 

. 

𝑚𝑚

b)  Estimate the coefficients of the respective terms from the shape of each peak. 

0 ≤ 𝑛𝑛 ≤ 𝑁𝑁
c)  Refine coefficients of all terms minimizing the score function (8).  

|𝑓𝑓𝑛𝑛| > 𝜀𝜀𝑑𝑑𝑝𝑝𝑑𝑑

𝑚𝑚 ≤ 𝑀𝑀𝑝𝑝𝑝𝑝𝑝𝑝𝑝𝑝𝑝𝑝

𝑟𝑟𝑛𝑛

d)  Calculate the contribution (9) of the terms with the refined coefficients and extract this 

contribution from the initial function values. 

e)  If  the  break  conditions  defined  above  are  not  yet  fulfilled,  the  procedure  is  repeated 

using the  residual  function; new terms  complete the previous list and are refined, all 

together, at step c). 

Alternative  protocols  break  the  procedure  after  the  first  iteration,  whatever  the  residual 

discrepancy is, or refine the parameters values of each term before searching for the next one. 

The latter option may help to decompose the function with a very strongly dominating peak in 

the origin. 

 
 
 
 
 
1.3. Peaks interpretation 

The local peaks of the radial component are analyzed in the increasing order of the grid points 

. When a peak with 

 , 

, is found, we first flip the function if this peak 

is negative. Then we identify the peak extension, 
𝑟𝑟𝑛𝑛

0 ≤ 𝑛𝑛 ≤ 𝑁𝑁
To estimate the initial values of the coefficients of the respective term 

|𝑓𝑓𝑛𝑛| > 𝜀𝜀𝑑𝑑𝑝𝑝𝑑𝑑

 as discussed below  

 , we ignore the 

𝑁𝑁1 ≤ 𝑛𝑛 ≤ 𝑁𝑁2

second term in (5) and a variation of 

 around the peak. As a result, we impose 

𝑚𝑚

 and 

estimate two other coefficients from the minimum of  

𝑟𝑟

𝑅𝑅𝑚𝑚 = 𝑟𝑟𝑛𝑛

𝑁𝑁2

2

Here, for 

𝐿𝐿𝐿𝐿𝑙𝑙𝑛𝑛 = �  �𝑙𝑙𝑛𝑛(𝑓𝑓𝑛𝑛) − 𝑙𝑙𝑛𝑛�𝐶𝐶𝑚𝑚𝑔𝑔̅(𝑟𝑟𝑛𝑛; 𝑅𝑅𝑚𝑚, 𝐵𝐵𝑚𝑚)��

𝑛𝑛=𝑁𝑁1

→ min

𝑅𝑅𝑚𝑚,𝐵𝐵𝑚𝑚,𝐶𝐶𝑚𝑚

        .              (10)

𝑅𝑅𝑚𝑚 > 0

𝑔𝑔̅(𝑟𝑟; 𝑅𝑅𝑚𝑚, 𝐵𝐵𝑚𝑚) =

and for 

𝑅𝑅𝑚𝑚 = 0

1

1
2 �
𝑅𝑅𝑚𝑚

4𝜋𝜋𝐵𝐵𝑚𝑚 exp �−

2

4𝜋𝜋

(𝑟𝑟 − 𝑅𝑅𝑚𝑚)

2

𝐵𝐵𝑚𝑚

�                                        (11)

3 2⁄

2

2

Comparison of logarithms instead of the function values allows one to get an analytic solution 

𝑔𝑔̅(𝑟𝑟; 0, 𝐵𝐵𝑚𝑚) = �

 exp �−

𝑟𝑟

4𝜋𝜋
𝐵𝐵𝑚𝑚 �                   .                                            (12)

4𝜋𝜋
𝐵𝐵𝑚𝑚�

(Appendices A1 and A2). 

If initially we flipped the function, we should invert the sign of the coefficient 

.  

𝐶𝐶𝑚𝑚

1.4. Peak borders  

The  peak  borders, 

,  are  chosen  as  the  left  and  right  function  inflection  points 

unless the function value drops  earlier below 

𝑁𝑁1 ≤ 𝑛𝑛 ≤ 𝑁𝑁2

 which is one more parameter of the 

procedure. Naturally, for the peak in the origin, 

𝜀𝜀𝑝𝑝𝑝𝑝𝑝𝑝𝑝𝑝 > 0

, we assign 

. 

If a local maximum at the upper bound of the interval is observed, i.e., 

𝑛𝑛 = 0

𝑁𝑁1 = 0

and  either 

can be beyond the interval. By this reason, if the function values are known for 

|𝑓𝑓(𝑟𝑟𝑁𝑁)| > 𝜀𝜀𝑑𝑑𝑝𝑝𝑑𝑑
, they 
𝑓𝑓(𝑟𝑟𝑁𝑁) < 𝑓𝑓(𝑟𝑟𝑁𝑁−1) < 0
𝑓𝑓(𝑟𝑟)
are used making this peak internal and reducing the situation to that described previously. By 

𝑓𝑓(𝑟𝑟𝑁𝑁) > 𝑓𝑓(𝑟𝑟𝑁𝑁−1) > 0

 ,  the  actual  peak  of  the  curve 

 or 

𝑟𝑟𝑛𝑛 > 𝑟𝑟𝑁𝑁

this reason, it is recommended to calculate the function, if possible, at an interval larger than 

that in which the decomposition is required.  

If the function values beyond the interval are unknown, we assign 

. 

If  the  peak  is  too  narrow,   

,  we  assign 

 such  that  the  term 
𝑁𝑁2 = 𝑅𝑅𝑚𝑚 = 𝑟𝑟𝑁𝑁

𝑁𝑁2 − 𝑁𝑁1 ≤ 1

𝐵𝐵𝑚𝑚, 𝐶𝐶𝑚𝑚

 
 
 
 
  
 
 
 
 
 
 in (8) becomes equal to 

 for 

 and had its width equal to the grid 

interval. 
𝐶𝐶𝑚𝑚𝑔𝑔̅(𝑟𝑟; 𝑅𝑅𝑚𝑚, 𝐵𝐵𝑚𝑚)

𝑓𝑓(𝑟𝑟𝑛𝑛)

𝑟𝑟 = 𝑟𝑟𝑛𝑛

1.5. Function calculation 

Each term in (9) is a function with a single peak in the demi-axis 

 , either an internal one 

or in the origin, when 

 (Fig. 1). Its contribution is a decreasing function for 

𝑟𝑟 ≥ 0

2

2

   and  becomes  negligibly  small  beyond  some  distance,  i.e., 
≤ 3𝐵𝐵

𝑅𝑅
𝑟𝑟 >
 is  found,  the 
with  some  small  constant 
𝑓𝑓𝑀𝑀(𝑟𝑟; {𝑅𝑅𝑚𝑚, 𝐵𝐵𝑚𝑚, 𝐶𝐶𝑚𝑚}) < 𝜀𝜀𝑡𝑡𝑝𝑝𝑡𝑡𝑚𝑚
𝑅𝑅
contribution of this term to the following points is ignored. A similar procedure is applied for 

 chosen.  As  soon  as  such  point 

8𝜋𝜋

𝜀𝜀𝑡𝑡𝑝𝑝𝑡𝑡𝑚𝑚 ≥ 0

𝑟𝑟𝑛𝑛 < 𝑟𝑟𝑁𝑁

 moving from the peak toward the origin. If 

, each term formally contributes 

to  all  points 
𝑟𝑟 < 𝑅𝑅
time. 

𝑟𝑟𝑛𝑛

 of  the  interval  making  the  sum  (9)  more  accurate  but  increasing  computing 

𝜀𝜀𝑡𝑡𝑝𝑝𝑡𝑡𝑚𝑚 = 0

1.6. Refinement of parameter values 

To  optimize  the  fit  (8)  of  the  calculated  function  to  the  input  one  improving  the  initial 

estimates of the parameters of the decomposition (9), we use the standard minimizer L-BFGS 

(Lui  & Nocedal, 1989).  It requires  calculation of the score function and  of its  gradient with 

respect to the decomposition coefficients (Appendix B).  

The minimizer uses bottom bound restraints on the values of the coefficients, 

, 

 and 

.  The  values  for  the  two  latter  bounds  are  calculated  from  the 
𝑅𝑅𝑚𝑚𝑚𝑚𝑛𝑛 = 0
estimations  for  the  minimal  width  and  height  of  a  peak  giving  a  contribution  equal  to  the 
𝐵𝐵𝑚𝑚𝑚𝑚𝑛𝑛 > 0
precision threshold 

𝐶𝐶𝑚𝑚𝑚𝑚𝑛𝑛 > 0
. 

For the peak in the origin, 

𝜀𝜀𝑑𝑑𝑝𝑝𝑑𝑑

, we tried artificially to split it into two terms (5) with 

 slightly different from zero (with estimated 

𝑅𝑅𝑚𝑚 = 0
 always converged back to zero and we abandoned this practice. 

𝐶𝐶𝑚𝑚

 divided by two). In all examples we saw, 

𝑅𝑅𝑚𝑚
𝑅𝑅𝑚𝑚
1.7. Choice of control parameters 

From our experience, when using a single term per Fourier ripple, the decomposition usually 

gives  an  approximation  with  the  discrepancy  of  3-4  orders  of  magnitude  lower  than  the 

function  values.  As  a  consequence,  refinement  is  sensitive  to  calculation  errors  (requiring 

 
 
 
 
 
 
 
double  precision  calculations  in  fortran)  and  to  the  initial  estimations  of  the  coefficients. 

While  routinely  the  default  choice  of  parameters  gives  sufficiently  good  results,  in  critical 

situations when a high accuracy, i.e., a small 

, is required they may be slightly improved 

after  trying  different 

 and 

.  The  default  values  found  empirically  are 

𝜀𝜀𝑑𝑑𝑝𝑝𝑑𝑑

 and 

; both values are defined as a part of the function value in the origin. 
𝜀𝜀𝑝𝑝𝑝𝑝𝑝𝑝𝑝𝑝 = 5 ∙
Except  particular  situations  one  does  not  use  the  maximal  allowed  number  of  terms 

𝜀𝜀𝑝𝑝𝑝𝑝𝑝𝑝𝑝𝑝
−13

𝜀𝜀𝑡𝑡𝑝𝑝𝑡𝑡𝑚𝑚

𝜀𝜀𝑡𝑡𝑝𝑝𝑡𝑡𝑚𝑚 = 10

−3

10

 ;  the  number  of  terms  is  found  automatically  for  the  given  accuracy 

.  The  last 

value can be defined either in the absolute scale or also as a part of the function value in the 
𝑀𝑀𝑝𝑝𝑝𝑝𝑝𝑝𝑝𝑝𝑝𝑝
origin. 

𝜀𝜀𝑑𝑑𝑝𝑝𝑑𝑑

2.  Program  

2.1. Software package, requirements and distribution 

The developed software consists of several programs. The principal component is the program 

dec3D  which calculates  the  shell decomposition coefficients  for a  given  oscillating function 

defined by its grid values. This program also calculates the sum of the respective terms  and 

compares the calculated curve with the control one 

An auxiliary program dec3D-rsum do the same but skips the first step and starts from a 

given set of the shell coefficients eventually refining them.    

Since the principal goal is a decomposition of atomic images, the software includes one 

more auxiliary program dec3D-atom that calculates the atomic images for the selected types 

of atoms for the chosen values of the resolution and the isotropic displacement factor.  

The  programs  are  available  in  fortran77  and  in  python3  (version  3.7.4  was  used  to 

develop  and  test  the  programs).  The  fortran  version  uses  the  L-BFSG  subroutines  provided 

with the program; thus,  the program is independent  of the environment.  The fortran version 

has no specific requirements. For example, working under Windows, one can use the compiler 

g77 with no installation needed.  

The  python  version  also  uses  only  basic  constructions.  It  requires  libraries  numpy 

(version 1.18.4 or higher) and scipy (version 1.6.3 or higher)  while may be compatible with 

some  older  versions.  The  L-BFGS  minimizer  is  distributed  with  the  scipy  libraries;  as  a 

consequence, the results may slightly vary with the installed versions of the libraries. 

 
 
 
 
The  python  scripts  may  be  run  as  stand-alone  of  via  a  graphical  interface.  The  GUI 

python  version  required  additionally  wx-python  (version  4.0.6  or  higher)  and  MatPlotLib 

(version 3.4.3 or higher).  

Some  details  of  the  programs  are  discussed  below.  The  programs  can  be  obtained  by 

request from the authors or from the site 

https://ibmc.cnrs.fr/en/laboratoire/arn-en/presentation/structures-software-and-websites/ 

2.2. Main program 

2.2.1. Input data  

The principal program dec3D requires the function values which are defined in the input file 

containing the records with the distance value and the function values in these points. The file 

may contain any number of columns with the values of different functions. For example, these 

may  be  images  of  atoms  of  different  types  at  a  given  resolution.  Otherwise,  they  may  be 

images  of  atoms  with  different  values  of  the  displacement  parameter  or  at  a  different 

resolution, or something else.  

The program requires also a file of input parameters where the name of the file with the 

function  values  (the  file  discussed  above)  is  the  only  mandatory  parameter;  optional 

parameters define the file content and the choice of the appropriate columns with data. Other 

optional  parameters  define  the  maximal  allowed  number  of  terms,  the  maximal  allowed 

discrepancy between the function and its decomposition, and the parameters used to build the 

terms and to find the range of their contribution, as discussed in previous sections.  

2.2.2. Output data  

The  principal  output  file  contains  the  initial  estimations  of 

 of  the  shell 

decomposition (4) and their values after refinement.  

𝑅𝑅𝑚𝑚, 𝐵𝐵𝑚𝑚, 𝐶𝐶𝑚𝑚

The program calculates the function (8) as the sum of the terms as they are reported at 

the  end  of  the  program.  Also,  the  difference  function  between  the  initial  function  and  its 

decomposition  (9)  is  calculated  for  all  grid  points  in  which  the  function  is  defined.  These 

functions are saved in a separated output file and may be plotted and analyzed. The maximal 

deviation value is communicated for the whole interval of the function definition and for the 

interval for which the decomposition is constructed. 

 
 
 
 
 
2.3. Auxiliary programs 

2.3.1. Calculation of atomic images  

The auxiliary program dec3D-atom calculates the images of scatterers of a selected type for 

any chosen resolution and any value of the isotropic displacement parameter, equal to zero by 

default.  These  images  are  calculated  as  the  Fourier  transform  of  the  respective  scattering 

functions (Appendix C).  

X-ray  diffraction  or  electron  scattering  functions  of  neutral  atoms  and  their  ions  are 

defined  by  tabulated  functions  of 

 (e.g.,  Brown  et  al.,  2006)  or  by  a 

multi-Gaussian  approximation  to  them  (Navaza,  1994;  Peng,  1999;  Brown  et  al.,  2006,  and 

−1

𝑠𝑠 = 𝑑𝑑

= 2 sin 𝜃𝜃 /𝜆𝜆

references therein). The choice of the appropriate file is defined in the input parameters. Any 

other  data  in  the  same  format,  e.g.,  Waasmaier  &  Kirfel  (1995)  or  Grosse-Kunstleve  et  al. 

(2004),  may  be  used  if  available.  If  necessary,  the  files  may  be  completed  by  scattering 

functions for any new kind of scattering factor,  including that for a single Gaussian used  at 

subatomic resolution (Afonine et al., 2007).  

2.3.2. Calculation of the resulted curves  

The  auxiliary  program  dec3D-rsum  reads  the  values  of  the  coefficients  of  the  shell 

decomposition  and  calculates the  sum  (9)  as  well as the difference between  it and  the input 

function.  Differently  from  the  principal  program,  this  one  starts  directly  from  a  set  of  the 

decomposition  coefficients  allowing  one  to  test their  different  combinations.  Optionally,  the 

input values of the coefficients can be refined minimizing (8). 

A program dec3D-sum is a simplified version of dec3D-rsum which calculates the sums 

(8)  with  the  given  values  of  the  decomposition  coefficients  without  their  refinement. 

Differently from dec3D-rsum, this program needs neither scipy library for the python version, 

nor the L-BFGS modules for the Fortran version.  

2.4. GUI program version 

The computational part of the dec3D python suite is incorporated into an interactive graphic 

interface.  This  GUI  version  ignores  some  advanced  options  of  the  stand-alone  programs. 

 
 
 
 
 
 
 
Instead, it gives some extra possibilities such as a calculation ‘on fly’ of an analytic function 

to be decomposed.  

The GUI program runs consecutively four components: 

a)  Get curves to be decomposed; 

b)  Get the decomposition coefficients; 

c)  Calculate the  decomposition curves with  the decomposition coefficients which  can 

be eventually modified; 

d)  Plot any combination of the calculated curves and optionally save them. 

One can save intermediate results and to come back to any of the previous steps. 

At the first step, three options are available. One can input some precalculated functions 

or  calculate  atomic  images  of  a  given  resolution  and  with  a  given  displacement  parameter. 

The atomic types, or those of respective ions, are selected from  the interactive  Mendeleev’s 

Table. Finally, one can define the input function by a python line in the respective window as, 

for example, 

3*(math.sin(2*math.pi*x) - (2*math.pi*x)*math.cos(2*math.pi*x)) / ((2*math.pi*x)**3) 

for the radial component of the three-dimensional interference function  

At the second step, the principal program works decomposing the functions obtained at 

                                                           (13)

𝐺𝐺(𝐱𝐱) = 3

sin(2𝜋𝜋|𝐱𝐱|) − (2𝜋𝜋|𝐱𝐱|) cos(2𝜋𝜋|𝐱𝐱|)
(2𝜋𝜋|𝐱𝐱|)

3

the previous step.  

The third step allows one to modify the values of the coefficients, exclude some terms 

from  the  curve  calculation  or,  inversely,  add  manually  new  terms.  Then,  the  sum  (9)  is 

calculated. 

At the fourth step, any combination of the calculated functions and their difference can 

be plotted, analyzed visually and saved in a file. One can choose the curve attributes such as 

their type, width and color. 

Fig. 2 illustrates, step by step, calculation of the images of the carbon and sulphur atoms, 

with 

 and at a resolution of  3  Å, using the GUI  version of the program.  The plots are 

generated directly by the program.  

𝐵𝐵 = 0

 
 
 
 
 
 
0.04

0.03

0.02

0.01

0

0

(2.0,  8, 1.0)
(4.0,  8, 1.0)
(0.5,  8, 0.05)
(2.0, 64, 1.0)
(2.0,  4, 1.0)

1

2

3

4

5

Figure 1. The radial part 
sets of parameters 

 as indicated in the legend.  

𝐶𝐶𝛺𝛺�(𝑟𝑟; 𝑅𝑅, 𝐵𝐵)

(𝑅𝑅, 𝐵𝐵, 𝐶𝐶)

 of the scaled shell function for several 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
Fig.  2.  Illustration  of  calculating  the  atomic  images  using  the  GUI  version  of  the  software. 

Consecutive  windows show the selection  of atomic types and parameters  of the images, the 

superposed  interactive  Mendeleev  table,  calculated  decomposition  parameters,  windows  for 

plotting the curves, the curves themselves and the residual curved after decomposition (note 

the difference  in scale in  two last figures).  Blue  curves  correspond  to the images of  carbon, 

red curves to those for sulphur. In the left bottom image, broken lines for the decomposition 

are indistinguishable from the full curves for the input images. 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
Acknowledgement 

AU  acknowledges  Instruct-ERIC  and  the  French  Infrastructure  for  Integrated  Structural 

Biology FRISBI [ANR-10-INBS-05]. 

References 

Afonine,  P.V.,  Grosse-Kunstleve,  R.W.,  Adams,  P.D.,  Lunin,  V.Y.  &  Urzhumtsev,  A.G. 

(2007). Acta Cryst., D63, 1194-1197. 

Afonine, P.V., Poon, B.K., Read, R.J., Sobolev, O.V., Terwilliger, T.C., Urzhumtsev, A.G. & 

Adams, P.D. (2018). Acta Cryst., D74, 531-544. 

Atkinson, K.E. (1989). An Introduction to Numerical Analysis (2nd ed.). John Wiley & Sons. 

ISBN 0-471-50023-2. 

Baek, M. et al. (2021). Science, 373, 871–876. 

Brown, P.J., Fox, A.G., Maslen, E.N., O’Keefe, M.A. & Willis, B.T.M. (2006). In: Prince E, 

editor.  International  Tables  for  X-ray  Crystallography,  Vol.  C,  Dordrecht:  Springer, 

Dordrecht, The Netherlands. ch. 6.1, pp. 554-595. 

Chapman, M.S. (1995). Acta Cryst. A51, 69-80. 

Chapman, M. S., Trzynka, A. & Chapman, B. K. (2013). J. Str. Biol. 182, 10-21. 

Diamond, R. (1971).  Acta Cryst. A27, 436-452. 

Doyle, P. A. & Turner, P. S. (1968). Acta Cryst. 24, 390-397. 

Grosse-Kunstleve,  R.W.,  Sauter,  N.K.  &  Adams,  P.D.  (2004).  Newsletter  of  the  IUCr 

Commission on Crystallographic Computing, 3, 22-31. 

Jumper, J. et al. (2021). Nature 596, 583-589.  

Kühlbrandt, W. (2014). Science 343, 1443-1444. 

Liu, D. C. & Nocedal, J. (1989). Math. Program. 45, 503–528. 

Navaza, J. (1994).  Acta Cryst. A50, 157-163. 

Palmer, C.M. & Aylett, C.H.S. (2022). Acta Cryst. D78, 136-143. 

Peng, L.-M. (1999). Micron, 30, 625-648.  

Urzhumtsev, A.G. & Lunin, V.Y. (2019). Crystallogr. Reviews 25, 164-262. 

Urzhumtsev, A.G. & Lunin, V.Y. (2022). BioRxiv, 10.1101/2022.03.28.486044 

Waasmaier, D. & Kirfel, A. (1995). Acta Cryst. A51, 416-431. 

 
 
 
 
 
Appendix A. Parameters of the decomposition terms 

A1. Gaussian approximation to a local peak 

To  find  the  best  Gaussian  approximation 

,  with 

 constants,  to  the  given  set 

of  values 

, 

,  we  introduce  first  intermediate  parameters 

𝑈𝑈 exp(−𝑣𝑣𝑟𝑟

)

𝑈𝑈, 𝑣𝑣

2

, 

, with which condition (10), with the parameters introduced as below in A2, becomes 
𝑓𝑓𝑛𝑛 = 𝑓𝑓(𝑟𝑟𝑛𝑛)
 𝑦𝑦𝑛𝑛 = 𝑙𝑙𝑛𝑛(𝑓𝑓𝑛𝑛)

𝑁𝑁1 ≤ 𝑛𝑛 ≤ 𝑁𝑁2

𝑢𝑢 = 𝑙𝑙𝑛𝑛𝑈𝑈

𝑁𝑁2

2
𝐿𝐿𝐿𝐿2(𝑢𝑢, 𝑣𝑣) = � [(𝑢𝑢 − 𝑣𝑣𝑟𝑟𝑛𝑛

𝑛𝑛=𝑁𝑁1

2

) − 𝑦𝑦𝑛𝑛]

i.e., 

→ min𝑢𝑢,𝑣𝑣

                                                  (𝐴𝐴1)

𝜕𝜕𝑦𝑦
𝜕𝜕𝑢𝑢

𝐿𝐿𝐿𝐿2(𝑢𝑢, 𝑣𝑣) =

𝜕𝜕𝑦𝑦
𝜕𝜕𝑣𝑣

𝐿𝐿𝐿𝐿2(𝑢𝑢, 𝑣𝑣) = 0                                                                           (𝐴𝐴2)

This gives a system of two linear equations with respect to 

 resulting in  

𝑢𝑢, 𝑣𝑣
−1

with 

𝑢𝑢 = (𝑠𝑠𝑟𝑟2 ∙ 𝑠𝑠𝑦𝑦𝑟𝑟2 − 𝑠𝑠𝑟𝑟4 ∙ 𝑠𝑠𝑦𝑦)(𝑠𝑠𝑟𝑟2 ∙ 𝑠𝑠𝑟𝑟2 − 𝑛𝑛12 ∙ 𝑠𝑠𝑟𝑟4)
�
𝑣𝑣 = (𝑛𝑛12 ∙ 𝑠𝑠𝑦𝑦𝑟𝑟2 − 𝑠𝑠𝑟𝑟2 ∙ 𝑠𝑠𝑦𝑦)(𝑠𝑠𝑟𝑟2 ∙ 𝑠𝑠𝑟𝑟2 − 𝑛𝑛12 ∙ 𝑠𝑠𝑟𝑟4)

 and 

−1                                   (𝐴𝐴3)

𝑛𝑛12 = 𝑁𝑁2 − 𝑁𝑁1 + 1

𝑁𝑁2

𝑁𝑁2

𝑁𝑁2

𝑁𝑁2

2
𝑠𝑠𝑟𝑟2 = � 𝑟𝑟𝑛𝑛

𝑛𝑛=𝑁𝑁1

4
;   𝑠𝑠𝑟𝑟4 = � 𝑟𝑟𝑛𝑛

𝑛𝑛=𝑁𝑁1

;    𝑠𝑠𝑦𝑦 = � 𝑦𝑦𝑛𝑛

𝑛𝑛=𝑁𝑁1

2
;   𝑠𝑠𝑦𝑦𝑟𝑟2 = � 𝑦𝑦𝑛𝑛𝑟𝑟𝑛𝑛

𝑛𝑛=𝑁𝑁1

           (𝐴𝐴4)  

A2. Estimation of the decomposition parameters 

For the peak in the origin, the optimal values of the constants 

 in (A1) are related to the 

 parameters as 

𝐵𝐵, 𝐶𝐶

giving  

𝑢𝑢 = 𝑙𝑙𝑛𝑛𝐶𝐶 +   

𝑢𝑢, 𝑣𝑣

3
2𝑙𝑙𝑛𝑛(4𝜋𝜋) −  

3
2 𝑙𝑙𝑛𝑛(𝐵𝐵)  ;   𝑣𝑣 = 4𝜋𝜋

2

−1

𝐵𝐵

                                               (𝐴𝐴5)

2

−1

3/2

−3/2

𝑢𝑢

 ; 𝐶𝐶 = 𝜋𝜋

𝑣𝑣

𝑒𝑒

                                                                           (𝐴𝐴6)

 for  an  internal  peak,  we  consider 

 ignoring 

the variation of the parameter 
𝐵𝐵, 𝐶𝐶
𝑢𝑢, 𝑣𝑣
 in (A1) are related to the 

constants 

 in the interval 

𝑟𝑟

 parameters as 

𝑟𝑟𝑁𝑁1 ≤ 𝑛𝑛 ≤ 𝑟𝑟𝑁𝑁2

2
. Then, the optimal values of the 

𝑦𝑦𝑛𝑛 = 𝑙𝑙𝑛𝑛�2𝑓𝑓𝑛𝑛𝑅𝑅

1/2

𝜋𝜋

�

𝑢𝑢, 𝑣𝑣

𝐵𝐵, 𝐶𝐶

𝑢𝑢 = 𝑙𝑙𝑛𝑛𝐶𝐶 −  

1
2 𝑙𝑙𝑛𝑛(𝐵𝐵)  ;   𝑣𝑣 = 4𝜋𝜋

2

−1

𝐵𝐵

                                                                    (𝐴𝐴7)

𝐵𝐵 = 4𝜋𝜋

To  calculate 

𝑣𝑣
 from 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
giving  

2

−1

−1/2

𝐵𝐵 = 4𝜋𝜋

𝑣𝑣

 ; 𝐶𝐶 = 2𝜋𝜋𝑢𝑢𝑣𝑣

                                                                              (𝐴𝐴8)

If a peak is too narrow, with its region composed of only 1 or 2 points, we assign 

, 

the minimal allowed value. Then, from the condition 

peak 

in 

the  origin,  we  calculate 

 for an internal peak, we calculate 
𝐶𝐶 = 𝑓𝑓(𝑟𝑟0)𝐵𝐵

𝐶𝐶𝑔𝑔̅(𝑟𝑟𝑁𝑁0; 𝑅𝑅, 𝐵𝐵) = 𝑓𝑓𝑁𝑁0

Appendix B. Ω-function and its derivatives  

B1. Approximation to the function near the origin 

 for the 
𝐵𝐵 = 𝐵𝐵𝑚𝑚𝑚𝑚𝑛𝑛
the  condition 

𝐶𝐶𝑔𝑔̅(0; 𝑅𝑅 = 0, 𝐵𝐵) = 𝑓𝑓𝑡𝑡𝑝𝑝𝑝𝑝𝑚𝑚𝑑𝑑𝑢𝑢𝑝𝑝𝑙𝑙(𝑟𝑟0)
3/2

−3/2

 and, 

from 

𝜋𝜋

, 

𝐶𝐶 = 2𝑓𝑓𝑁𝑁0𝑅𝑅

2

1/2

(𝜋𝜋𝐵𝐵)

. 

The contribution of a term 

 with 

 to the curve in the point 

 is calculated 

according to the asymptotic behavior of function near the origin: 
𝛺𝛺�(𝑟𝑟; 𝑅𝑅, 𝐵𝐵)

𝑅𝑅 ≠ 0

𝑟𝑟 = 0

𝛺𝛺�(𝑟𝑟; 𝑅𝑅, 𝐵𝐵) =

1
𝑟𝑟𝑅𝑅

�

1
4𝜋𝜋𝐵𝐵

exp �−

2

2

2

4𝜋𝜋

(𝑟𝑟

+ 𝑅𝑅

)

𝐵𝐵

� �exp �

2

𝑟𝑟𝑅𝑅

8𝜋𝜋

𝐵𝐵

� − exp �−

2

8𝜋𝜋

𝑟𝑟𝑅𝑅

𝐵𝐵

�� =

exp �−

2

2

2

4𝜋𝜋

(𝑟𝑟

+ 𝑅𝑅

)

𝐵𝐵

2

𝑟𝑟𝑅𝑅

� �

16𝜋𝜋
𝐵𝐵

3

+ 𝑂𝑂(𝑟𝑟

)�

=

1
𝑟𝑟𝑅𝑅

�

1
4𝜋𝜋𝐵𝐵
3/2

= �

4𝜋𝜋
𝐵𝐵

�

exp �−

2

2

4𝜋𝜋

𝑅𝑅

𝐵𝐵

2

� [1 + 𝑂𝑂(𝑟𝑟

)]                                                                         (𝐵𝐵1)

B2. Partial derivatives of the score function 

Partial  derivatives  of  the  score  function 

 describing  the  fit  of  the 

decomposition  to  the  input  curve  are  required  by  the  minimizer  L-BFSG  (Liu  &  Nocedal, 

𝐷𝐷({𝑅𝑅𝑚𝑚, 𝐵𝐵𝑚𝑚, 𝐶𝐶𝑚𝑚})

1989). These derivatives are calculated using the chain rule, in particular for (8): 

𝑁𝑁

𝜕𝜕
where 
𝜕𝜕𝜕𝜕

𝐿𝐿𝐿𝐿({𝑅𝑅𝑚𝑚, 𝐵𝐵𝑚𝑚, 𝐶𝐶𝑚𝑚}) = �  [𝑓𝑓𝑛𝑛 − 𝑓𝑓𝑀𝑀(𝑟𝑟𝑛𝑛; {𝑅𝑅𝑚𝑚, 𝐵𝐵𝑚𝑚, 𝐶𝐶𝑚𝑚})]
 is any of the coefficients 

𝑛𝑛=0

.  

𝜕𝜕𝑓𝑓𝑀𝑀(𝑟𝑟𝑛𝑛; {𝑅𝑅𝑚𝑚, 𝐵𝐵𝑚𝑚, 𝐶𝐶𝑚𝑚})
𝜕𝜕𝜕𝜕

       (𝐵𝐵2)

A straightforward differentiation of the expressions for the general case 
𝜕𝜕

𝑅𝑅𝑚𝑚, 𝐵𝐵𝑚𝑚, 𝐶𝐶𝑚𝑚

𝑅𝑅𝑚𝑚 ≠ 0, 𝑟𝑟 ≠ 0

 
 
 
 
 
 
 
 
 
 
 
 
 
  
gives 

𝜕𝜕𝑓𝑓𝑀𝑀(𝑟𝑟; {𝑅𝑅𝑚𝑚, 𝐵𝐵𝑚𝑚, 𝐶𝐶𝑚𝑚})
𝜕𝜕𝑅𝑅𝑚𝑚

=

2

4𝜋𝜋

��exp �−

−3/2

𝐶𝐶𝑚𝑚𝐵𝐵𝑚𝑚
1/2
𝑟𝑟𝑅𝑅𝑚𝑚
2𝜋𝜋
2
(𝑟𝑟 − 𝑅𝑅𝑚𝑚)

𝐵𝐵𝑚𝑚

+ exp �−

−5/2

=

𝐶𝐶𝑚𝑚𝐵𝐵𝑚𝑚
4𝑟𝑟𝑅𝑅𝑚𝑚𝜋𝜋
(𝑟𝑟 − 𝑅𝑅𝑚𝑚)

2

𝐵𝐵𝑚𝑚

2 ×                                                                                  (𝐵𝐵3)

� [8𝜋𝜋

2

𝑅𝑅𝑚𝑚(𝑟𝑟 − 𝑅𝑅𝑚𝑚) − 𝐵𝐵𝑚𝑚]

2

4𝜋𝜋

(𝑟𝑟 + 𝑅𝑅𝑚𝑚)

2

𝐵𝐵𝑚𝑚

2

�� [8𝜋𝜋

𝑅𝑅𝑚𝑚(𝑟𝑟 + 𝑅𝑅𝑚𝑚) + 𝐵𝐵𝑚𝑚]�

𝜕𝜕𝑓𝑓𝑀𝑀(𝑟𝑟; {𝑅𝑅𝑚𝑚, 𝐵𝐵𝑚𝑚, 𝐶𝐶𝑚𝑚})
𝜕𝜕𝐵𝐵𝑚𝑚

4𝜋𝜋

�exp �−

𝜕𝜕𝑓𝑓𝑀𝑀(𝑟𝑟; {𝑅𝑅𝑚𝑚, 𝐵𝐵𝑚𝑚, 𝐶𝐶𝑚𝑚})
𝜕𝜕𝐶𝐶𝑚𝑚

1/2 ×                                                                                (𝐵𝐵4)

2

2

� [8𝜋𝜋

(𝑟𝑟 − 𝑅𝑅𝑚𝑚)

2

− 𝐵𝐵𝑚𝑚]

− exp �−

2

4𝜋𝜋

(𝑟𝑟 + 𝑅𝑅𝑚𝑚)

2

𝐵𝐵𝑚𝑚

2

� [8𝜋𝜋

(𝑟𝑟 + 𝑅𝑅𝑚𝑚)

2

− 𝐵𝐵𝑚𝑚]�

=                                                                                                       (𝐵𝐵5)

2

2

2

1

4𝜋𝜋

4𝜋𝜋𝐵𝐵𝑚𝑚 �exp �−

1
𝑟𝑟𝑅𝑅𝑚𝑚 �
, i.e., for the Gaussian terms, these derivatives are: 

� − exp �−

𝐵𝐵𝑚𝑚

4𝜋𝜋

(𝑟𝑟 − 𝑅𝑅𝑚𝑚)

(𝑟𝑟 + 𝑅𝑅𝑚𝑚)

𝐵𝐵𝑚𝑚

2

��

For 

𝑅𝑅𝑚𝑚 = 0, 𝑟𝑟 ≠ 0

𝜕𝜕𝑓𝑓𝑀𝑀(𝑟𝑟; {0, 𝐵𝐵𝑚𝑚, 𝐶𝐶𝑚𝑚})
𝜕𝜕𝐵𝐵𝑚𝑚

= 4𝐶𝐶𝑚𝑚𝜋𝜋

3/2

−7/2

𝐵𝐵𝑚𝑚

exp �−

2

2

𝑟𝑟

4𝜋𝜋
𝐵𝐵𝑚𝑚 � [8𝜋𝜋

2

2

𝑟𝑟

− 3𝐵𝐵𝑚𝑚]                    (𝐵𝐵6)

𝜕𝜕𝑓𝑓𝑀𝑀(𝑟𝑟; {0, 𝐵𝐵𝑚𝑚, 𝐶𝐶𝑚𝑚})
𝜕𝜕𝐶𝐶𝑚𝑚

= �

4𝜋𝜋
𝐵𝐵𝑚𝑚�

3/2

2

2

exp �−

𝑟𝑟

4𝜋𝜋
𝐵𝐵𝑚𝑚 �                                                            (𝐵𝐵7)

Finally, for 

 the derivatives are: 

𝑅𝑅𝑚𝑚 ≠ 0, 𝑟𝑟 = 0

𝜕𝜕𝑓𝑓𝑀𝑀(0; {𝑅𝑅𝑚𝑚, 𝐵𝐵𝑚𝑚, 𝐶𝐶𝑚𝑚})
𝜕𝜕𝑅𝑅𝑚𝑚

𝜕𝜕𝑓𝑓𝑀𝑀(0; {𝑅𝑅𝑚𝑚, 𝐵𝐵𝑚𝑚, 𝐶𝐶𝑚𝑚})
𝜕𝜕𝐵𝐵𝑚𝑚

7
2

5
−
2
𝐶𝐶𝑚𝑚𝑅𝑅𝑚𝑚𝐵𝐵𝑚𝑚

exp �−

= −64𝜋𝜋

4𝜋𝜋

3/2

−7/2

𝐶𝐶𝑚𝑚𝐵𝐵𝑚𝑚

2

2
𝑅𝑅𝑚𝑚

(8𝜋𝜋

= 4𝜋𝜋

2

2
𝑅𝑅𝑚𝑚
𝐵𝐵𝑚𝑚 �                                      (𝐵𝐵8)
2
𝑅𝑅𝑚𝑚
𝐵𝐵𝑚𝑚 �            (𝐵𝐵9)

4𝜋𝜋

2

− 3𝐵𝐵𝑚𝑚) exp �−

𝜕𝜕𝑓𝑓𝑀𝑀(0; {𝑅𝑅𝑚𝑚, 𝐵𝐵𝑚𝑚, 𝐶𝐶𝑚𝑚})
𝜕𝜕𝐶𝐶𝑚𝑚

3/2

= �

4𝜋𝜋
𝐵𝐵𝑚𝑚�

exp �−

4𝜋𝜋

2

2
𝑅𝑅𝑚𝑚
𝐵𝐵𝑚𝑚 �                                                     (𝐵𝐵10)

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
Appendix C. Calculations of the atomic images  

The  image  of  an  atom  with  an  isotropic  scattering  factor 

 and  calculated  with  the 

resolution cut-off 

𝐷𝐷 = 𝑑𝑑ℎ𝑚𝑚𝑖𝑖ℎ

𝑓𝑓(𝑠𝑠)

2

/4) exp(−2𝜋𝜋𝜋𝜋𝐫𝐫𝐫𝐫) 𝑑𝑑𝐫𝐫

𝜌𝜌𝑛𝑛(𝐫𝐫; 𝐵𝐵, 𝐷𝐷) = � 𝑓𝑓𝑛𝑛(𝑠𝑠) exp(−𝐵𝐵𝑠𝑠

−1

is  a  spherically  symmetric  function.  Here 

𝑝𝑝≤𝐷𝐷

 is  a  dot  product  of  two  respective  vectors.  We 

calculate the radial component of this function along the axis Oz using spherical coordinates 

𝐫𝐫𝐫𝐫

which gives 

When 

,  

𝑟𝑟 ≪ 1

−1

𝐷𝐷

𝜌𝜌̅𝑛𝑛(𝑟𝑟; 𝐵𝐵, 𝐷𝐷) = 2𝑟𝑟

−1

� 𝑠𝑠𝑓𝑓𝑛𝑛(𝑠𝑠) exp(−𝐵𝐵𝑠𝑠
0

2

/4) sin(2𝜋𝜋𝑟𝑟𝑠𝑠) 𝑑𝑑𝑠𝑠

−1

𝐷𝐷

The  Simpson  (also  known  as  Kepler-Simpson  or  Newton-Cotes)  quadrature  (e.g.,  Atkinson, 

0

𝜌𝜌̅𝑛𝑛(𝑟𝑟; 𝐵𝐵, 𝐷𝐷) ≈ 4𝜋𝜋 � 𝑠𝑠

𝑓𝑓𝑛𝑛(𝑠𝑠) exp(−𝐵𝐵𝑠𝑠

/4) 𝑑𝑑𝑠𝑠

2

2

1989) allows a numerical calculation of these integrals in any fine grid.  

 
  
                         
 
 
 
