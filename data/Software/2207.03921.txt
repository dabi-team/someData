2
2
0
2

l
u
J

8

]

A
N
.
h
t
a
m

[

1
v
1
2
9
3
0
.
7
0
2
2
:
v
i
X
r
a

nlfem: A ﬂexible 2d FEM Code for
Nonlocal Convection–Diﬀusion and
Mechanics

Manuel Klar ∗

Christian Vollmann∗

Volker Schulz∗

Abstract. In this work we present the mathematical foundation of an assembly
code for ﬁnite element approximations of nonlocal models with compactly supported,
weakly singular kernels. We demonstrate the code on a nonlocal diﬀusion model in
various conﬁgurations and on a two-dimensional bond-based peridynamics model. Fur-
ther examples can already be found in [17]. The code nlfem is published under the MIT
License1 and can be freely downloaded at https://gitlab.uni-trier.de/pde-opt/nonlocal-
models/nlfem.

Keywords. Nonlocal operators, ﬁnite element discretizations, Python.

1

Introduction

Over the last two decades nonlocal models attracted attention due to their capa-
bility of circumventing limitations of classical, local models based on diﬀerential
equations. While the theory and application of diﬀerential equations is well es-
tablished, nonlocal models still bear fundamental questions. The models emerge
due to various applications like anomalous diﬀusion [7, 8], peridynamics [29] or
image processing [20, 25] and are diverse in their mathematical nature [16, 5].
Their investigation is often accompanied with numerical experiments mo-
In this work, we describe the discretization of

tivated by these applications.
nonlocal operators of the general form

´Lδupxq :“ 2

ż

rΩXBδpxq

Cδpx, yqupxq ´ Cδpy, xqupyqdy,

where the kernel Cδ accounts for a ﬁnite range of nonlocal interactions de-
termined by the horizon δ ą 0. The interaction neighborhood Bδpxq, i.e., the
support of the kernel, is often given by a suitable approximation of the Euclidean
or inﬁnity norm ball.

The purpose of nlfem is to compute numerical solutions to related boundary
value problems which run at convenient speed for researchers. The discretization
of these problems is achieved by a ﬁnite element approximation. The resulting
variational framework comes at the price of a second integration layer compared
to the operator in its strong form, which makes it more costly compared to

∗Universitaet Trier, D-54286 Trier, Germany; Email: klar@uni-trier.de, volker.schulz@uni-

trier.de, vollmann@uni-trier.de

1For details see, e.g., https://opensource.org/licenses/MIT.

1

 
 
 
 
 
 
classical diﬀerential operators. Further challenges in the implementation arise
due to ﬁnite interaction horizons and singularities of the kernel.

The development of eﬃcient codes is an active ﬁeld of research and there are
various related implementations. The foundation for operators related to the
fractional Laplacian2 is given by boundary element methods [28]. Based on these
fundamentals, a Matlab implementation for a ﬁnite element approximation of
the two–dimensional fractional Laplacian with inﬁnite interaction is presented in
[1]. Further advanced techniques to eﬃciently implement the fractional Lapla-
cian and resulting dense stiﬀness matrices are developed in [2] and incorporated
into the ﬁnite element code PyNucleus 3. The latter is a recommendable alterna-
tive to our code for nonlocal diﬀusion problems with interaction neighborhoods
based on the Euclidean norm ball. Speciﬁcally, it can handle large dense matri-
ces which makes it well–suited for a large or even inﬁnite horizon δ.

Alternatives to kernel truncations have been investigated in [3]. Apart
from this, various structure exploiting approaches, ﬁnite-diﬀerence schemes and
meshfree methods have been used to compute numerical solutions. In particular
meshfree methods currently dominate the practical application of nonlocal mod-
els for mechanics [24, 6]. However, implementations of ﬁnite element methods
for peridynamics have already been integrated into engineering software [32].
For a general overview we refer the reader to the comprehensive review paper
[11] on numerical methods for nonlocal problems.

Our code nlfem assembles nonlocal operators on triangular meshes based on
linear continuous (CG) or discontinuous Galerkin (DG) ansatz spaces in 2d
and also oﬀers this functionality in 1d and 3d for some generic settings.

It allows the assembly of problems with given Neumann and Dirichlet bound-
ary data [14, 27, 19]. An important detail is that the null space of systems
corresponding to pure Neumann boundary data is exact up to machine precision,
which allows an eﬃcient evaluation of a pseudoinverse.

Concerning the domain, nlfem covers a variety of diﬀerent conﬁgurations.
It handles nonlocal interactions in nonconvex or even disconnected domains
where the intersection between the interaction neighborhood Bδpxq and the do-
main can be disconnected. For example, this is of particular interest in shape
optimization with nonlocal operators [31], where the domain is modiﬁed itera-
tively.

The kernel can be symmetric or nonsymmetric as well as scalar– or matrix–
valued. For the symmetric case our discretization of the weak form guarantees
the symmetry of the stiﬀness matrix up to machine precision. The code can
generically handle smooth kernels and it comes with quadrature rules for frac-
tional type kernels as they are found in [28, 1]. In addition to that, the kernel can
depend on ﬁnite element labels which opens the door to a monolithic assembly
of interface problems determined by spatially variable kernels.

The nlfem code is most eﬃcient for operators with interaction horizons,
which are comparable to the mesh size, i.e., h ď δ ď Ch for some C ě 1. This
relation is often used in the nonlocal mechanics setting; for example, in [4, 23],
the choices δ “ 3h and δ “ 4h are advocated, respectively. In this regime the
systems can be considered to be rather sparse. A careful consideration of the

2Throughout this work we always refer to the fractional Laplacian in the integral form.
3https://github.com/sandialabs/PyNucleus

2

quadrature and interpolation errors can allow smaller rations δ{h and increases
the sparsity of the related systems.

Our implementation is based on the extensive discussions on the errors in-
curred by various approximations of the interaction neighborhood and
quadrature rules [17, 31], all of which are implemented here. We only discuss a
small selection of interaction neighborhoods in this paper, such as two approxi-
mations of the Eucldiean norm ball, which provably do not deteriorate the ﬁnite
element interpolation error [17]. Furthermore, the interaction neighborhood of
a kernel is eﬃciently determined by a breadth–ﬁrst traversal of ﬁnite elements
throughout the assembly process, which avoids expensive preprocessing compu-
tations.

A fundamental advantage of ﬁnite element methods is that they can be
considered to be asymptotically compatible in the sense of [30]. Our code
reproduces this property for the cases h ď δ, h „ δ Ñ 0 if the implemented
interaction neighborhood does not induce geometric errors. For example, this
is the case for the implemented inﬁnity norm ball.

For convenience the assembly is performed in multiple threads and the main
routine, which is written in C++, comes with a user–friendly Python inter-
face. When it comes to solving, we note that the stiﬀness matrix is returned
in Compressed Sparse Row (CSR) format. Therefore, the user can apply any
sparse solver accessible from Python and apply it to the stiﬀness matrix.

The remainder of this article is organized into two main Sections. First,
in Section 2 we give a precise formulation of the targeted problem class in 2.1
along with its ﬁnite element approximation in 2.2. In its following subsections
we then highlight discretization details that deserve special attention in a non-
local framework. Second, in Section 3 we present various numerical examples,
including diﬀusion and mechanics, and give a brief scaling study.

2 Finite Element Approximation

rΩ is allowable, and Ω is open in Rd only if Ω Ă intp

2.1 Problem Formulation
rΩ be open in rΩ4. We note
Let rΩ Ă Rd be a compact base domain, and let Ω Ă
rΩq. We
that the case Ω “
refer to Ω as domain, although it is not necessarily open in Rd. The complement
of Ω in rΩ is denoted by ΩD :“
rΩzΩ. It can play the role of a nonlocal Dirichlet
boundary in suitable settings. If rΩ “ Ω the resulting nonlocal problem can be
interpreted as Neumann type problem. In Figure 2.1 we present an exemplary
conﬁguration. Let δ ą 0 be an interaction horizon. We make the following
assumption about the kernel function.

Assumption 1. We assume that for the matrix–valued kernel function Ψδ :
Rd ˆ Rd Ñ Rnˆn there exists an s P p0, 1q such that

Ψδpx, yq 1Bδpxqpyq |x ´ y|d`2s

(1)

is bounded.

4More precisely, there exists an open set O Ă Rd, such that O X

rΩ “ Ω.

3

This allows singularities at the origin and also includes smooth kernels such
as the constant kernel. We assign to the above kernel function the interaction
neighborhood Bδpxq, where

Bδpxq :“ ty P Rd | |x ´ y|‚ ď δu,

for some norm | ¨ |‚ in Rd. We denote the truncated kernel by

Cδpx, yq :“ Ψδpx, yq1Bδpxqpyq.

(2)

(3)

The linear nonlocal operator under consideration acting on a function u : Rd Ñ
Rn is then given by

´Lδupxq :“ p.v. 2

ż

rΩ

Cδpx, yqupxq ´ Cδpy, xqupyqdy,

(4)

where “p.v.” denotes the Cauchy principal value5. By testing (4) with v : rΩ Ñ
Rn where v “ 0 on ΩD, we obtain the bilinear form

ż

Apu, vq :“ ´
ż

Ω

vpxqJLδupxqdx

“ 2

vpxqJ p.v.

Ω

Cδpx, yqupxq ´ Cδpy, xqupyqdydx.

(5)

ż

rΩ

With v “ 0 on ΩD and Fubini we observe that

ż

ż

vpxqJ p.v.

ż
Ω

“

vpxqJ p.v.
rΩ
ż
ż

“ ´

p.v.

rΩ

rΩ

Cδpx, yqupxq ´ Cδpy, xqupyqdydx

Cδpx, yqupxq ´ Cδpy, xqupyqdydx

rΩ
ż

rΩ

vpyqJpCδpx, yqupxq ´ Cδpy, xqupyqq dydx.

So that the bilinear form can be written as

Apu, vq
ż

ż

“

“

rΩ
ż

rΩ
ż

rΩ

rΩ

pvpxq ´ vpyqqJpCδpx, yqupxq ´ Cδpy, xqupyqq dydx

(6)

1Bδpxqpyqpvpxq ´ vpyqqJpΨδpx, yqupxq ´ Ψδpy, xqupyqq dydx.

Note that we exploited the symmetry of the exact indicator function 1Bδpxqpyq
to obtain this equality.

2.2 Finite Dimensional Approximation

k“1 denote a subdivision of rΩ “ Ω Y ΩD into polyhedral ﬁnite

Let T h :“ tEkuK
elements with nodes txmuM

m“1.

5More precisely, p.v.

ş

ş

rΩzB(cid:15)pxq hpx, yqdy.

rΩ hpx, yqdy :“ lim(cid:15)Ñ0`

4

Assumption 2. We assume that Ω and ΩD can be exactly covered by the subdi-
Ω “ tEkuKΩ
visions T h
D , respectively,
where T h
D is possibly empty. Since we assume polyhedral elements, this implies
that

k“KΩ`1 with T h “ T h

k“1 and T h

D “ tEkuK

Ω Y T h

KΩď

Kď

Ω “

E k

and ΩD “

E k

k“1

k“KΩ`1

(7)

are polyhedral domains.

In the case of ΩD “ H we have that KΩ “ K and T h “ T h

Ω . For convenience
of notation we assume an ordering of the nodes such that txmuMΩ
m“1 Ă Ω and
txmuM
m“MΩ`1 Ă ΩD. This assumption is not made in the implementation of
nlfem. We implement piecewise–linear continuous and discontinuous ansatz

(a)

(b)

Figure 2.1: (a) The compact base domain rΩ contains the domains
Ω (blue) and ΩD (red), where the latter is possibly empty. The
blue boundary belongs to Ω and the red boundary belongs to ΩD.
(b) The red elements belong to the nonlocal Dirichlet boundary
ΩD, while the blue elements belong to the domain Ω. Note that
the vertices on the red lines do not belong to the interior of Ω.

functions tφjuJ
j“1, where J “ nM in case of continuous and J “ npd ` 1qK
in case of discontinuous ansatz functions. Again for convenience we assume an
ordering of the basis functions and deﬁne the corresponding ﬁnite dimensional
subspaces

V hp

rΩ, Rnq :“ spanptφjuJ

j“1q, and V h
c p

rΩ, Rnq :“ spanptφjuJΩ

j“1q.

(8)

In case of continuous ansatz functions the unknown coeﬃcients correspond to
the nodes lying in the interior of Ω with respect to rΩ. See Figure 2.1 for
rΩ, Rnq ˆ
an illustration. Now, the evaluation of the bilinear form A on V hp
V h
c p

rΩ, Rnq can be written as sum over the ﬁnite elements, i.e.,

Apφj, φiq “
Kÿ
Kÿ

„ż

ż

k“1

(cid:96)“1

Ek

E(cid:96)

pφipxq ´ φipyqqJpCδpx, yqφjpxq ´ Cδpy, xqφjpyqq dydx

.



(9)

Since the kernel Cδ may exhibit a truncation on some pairs pEk, E(cid:96)q we need
an appropriate approximation of its support. Apart from a modeling aspect, a
numerical advantage of the kernel truncation is that it produces sparse systems

5

on suﬃciently coarse grids. However, this can only be exploited if the numer-
ical evaluation of the interaction neighborhood Bδpxq does not deteriorate the
interpolation error of the ﬁnite element subspace. While the approximation of
the inﬁnity or Manhattan norm balls does not introduce a geometric error, the
one for curved neighborhoods, like the Euclidean norm ball, does.

In the following, we describe two major examples of the implemented ball

approximations for the Euclidean ball

B2

δ pxq :“ ty P Rd | |x ´ y|2 ď δu,

which we call the approxcaps and the nocaps approximations. Both are based on
the given ﬁnite element mesh T h. By “cap” we mean the circular segments that
arise when a ﬁnite element triangle is only partially covered by the Euclidean
ball; see Figure 2.2. Among others, these ball approximations are investigated
in [17].

(a)

(b)

Figure 2.2: If a ﬁnite element triangle is only partially covered
by an Euclidean ball the intersection contains circular caps. The
nocaps ball (a) omits this cap, whereas the approxcaps ball (b)
retriangulates the whole intersection.

Deﬁnition 2.1 (nocaps Ball). For x P
deﬁned as the convex hull of the intersection of the boundary BB2
Euclidean ball and the boundaries of the elements, i.e.,

rΩ the nocaps ball approximation is
δ pxq of the

Bncp
δ

pxq :“ conv

¨

˝

ď

E(cid:96)PT h

˛

BE(cid:96) X BB2

δ pxq

‚,

where the dependency on the mesh size h is omitted in the notation.

δ

For d “ 2, one can show that the area of the symmetric diﬀerence of B2

δ pxq
and Bncp
pxq is provably of order Oph2q on a given mesh of size h. This is
error commensurate with respect to the interpolation error of a linear ﬁnite
element ansatz space; details for the latter two statements can be found in [17].
The convex hull omits circular caps which appear in the intersection of some
elements E(cid:96) X B2
δ pxq and have a signiﬁcant size on coarse grids. Therefore, by
adding additional points on the center of possible caps the geometric error can
be reduced even further while still being in Oph2q for d “ 2; see again Figure
2.2. The maximum number of caps for a single intersection E(cid:96) X B2
δ pxq is three.
While the results in [17] are derived for a ﬁxed horizon δ, related investi-
gations for the local limit (δ Ñ 0) with polygonal ball approximations can be
found in [26].

6

Deﬁnition 2.2 (approxcaps Ball). Let x P
center of each nonempty intersection E(cid:96) X BB2
is then deﬁned by

rΩ. We denote the points on the cap
δ pxq by y(cid:96). The approxcaps ball

Bacp
δ

pxq :“
conv pBncp

δ

pxq Y ty(cid:96) | y(cid:96) cap center of E(cid:96) X BB2

˘
δ pxq for some E(cid:96) P T hu

.

Exact quadrature rules for circular caps can be found in [18]. Here however,
the quadrature points have to be computed during run time, as the rules depend
on the geometry of the cap for higher quadrature orders. Therefore, we do not
consider these exact rules in nlfem.

In addition to these approximate balls, we next also introduce the inﬁnity

normball.

Deﬁnition 2.3 (Inﬁnity Norm Ball). For x P
by

rΩ the inﬁnity normball is deﬁned

B8

δ pxq :“ ty P Rd | |x ´ y|8 ď δu.

Proofs for the convergence of the nonlocal Dirichlet problem to the classi-
cal Dirichlet problem with corresponding scaling constants for various kernel
functions can be found in [31]. Since the inﬁnity normball is implemented ex-
actly, it allows numerical tests of the expected asymptotic compatibility of the
discretization scheme [30].

We ﬁnally note that the indicator function based on any implemented trun-
cation may lack in symmetry. More precisely, there might exist x and y, for
which

1

δ pxqpyq ‰ 1
B#

δ pyqpxq,
B#

where B#
δ pxq, # P tncp, acp, 8u, represents one of the implemented truncations.
This artefact stems from the ball approximation itself in case of the nocaps and
approxcaps ball, but can also be caused by the quadrature; see Remark 2.5
below.

We deﬁne the integrand

Φijpx, yq :“ pφipxq ´ φipyqqJpΨδpx, yqφjpxq ´ Ψδpy, xqφjpyqq

(10)

and, based on the ball approximation and (6), the approximate bilinear form

A#

h pφj, φiq :“

ż

ż

rΩ
Kÿ

rΩ
Kÿ

1

δ pxqpyqΦijpx, yqdydx
B#
ż
ż

(11)

“

k“1

(cid:96)“1

Ek

E(cid:96)

1

B#
δ

px, yqΦijpx, yqdydx.

By Fubini’s integration theorem, for suﬃciently smooth ansatz functions φj P
rΩ, Rnq, the approximate bilinear form deﬁned in (11)
V hp

rΩ, Rnq and φi P V h
c p

7

can be written as

A#
h pφj, φiq
ż
ż

“

“

ż
Ω

´

rΩ

ż

1

δ pxqpyqΦijpx, yqdydx
B#
ż

rΩ
ż

rΩ

p.v.

δ pxqpyqφipxqJpΨδpx, yqφjpxq ´ Ψδpy, xqφjpyqq dy dx
B#

1
rΩ
ż

p.v.

1

δ pxqpyqφipyqJpΨδpx, yqφjpxq ´ Ψδpy, xqφjpyqq dy dx
B#
ż

Ω

“ 2

φipxqJ p.v.

Ω

1S

B#
δ

rΩ

px, yq pΨδpx, yqφjpxq ´ Ψδpy, xqφjpyqq dy dx,

where

´

¯
δ pyqpxq
B#

1

1S

B#
δ

px, yq :“

δ pxqpyq ` 1
B#

1
2
In view of (5), this shows that the approximate bilinear form A#
h can be in-
terpreted as the discretization of the operator ´Lδ based on the symmetriﬁed
px, yq instead of 1Bδpxqpyq in the strong
approximate indicator function 1S
form. However, deﬁning the approximate bilinear form as in (11) guarantees
the symmetry of the stiﬀness matrix pA#
h pφj, φiqqi,j; see also Remark 2.5 below.

(12)

B#
δ

.

In the following we discuss the evaluation of the local contributions

A#

k(cid:96)pφj, φiq :“

ż

ż

Ek

E(cid:96)

1

δ pxqpyqΦijpx, yqdy dx
B#

(13)

to the pi, jq-th entry of the stiﬀness matrix.

2.3 Population of the Stiﬀness Matrix

The assembly algorithm iterates over all pairs of elements and then adds the
local contributions (13) to the stiﬀness matrix. We call a pair of elements pEk, E(cid:96)q
intersecting if

Ek X E(cid:96) ‰ H.

If a pair is not intersecting, we call it disjoint. For the evaluation of the contri-
butions it is only important how the kernel behaves on a ﬁxed pair of elements.
If for example the kernel exhibits a singularity at the origin and the pair is dis-
joint, the singularity does not occur. Also, if a pair of elements pEk, E(cid:96)q fulﬁlls
that

E(cid:96) Ă Bδpxq for all x P Ek,

the truncation does not come into play. We therefore distinguish two cases. In
the ﬁrst case the kernel has a singularity with s ď 0.5 or the pair of elements
is disjoint. In the second case the kernel has a singularity with s ą 0.5 and the
elements are intersecting.

8

2.3.1 Disjoint Pairs or Kernels with s ď 0.5

If s ď 0.5 in (1) or if the pair pEk, E(cid:96)q is disjoint, the local contributions (13)
can be factored out and computed separately, i.e.,
ż

ż

A#

k(cid:96)pφj, φiq “

Ek
ż

δ pxqpyqφipxqJΨδpx, yqφjpxqdy dx
B#

1
E(cid:96)
ż

Ek
ż

E(cid:96)
ż

Ek
ż

E(cid:96)
ż

´

`

´

1

δ pxqpyqφipxqJΨδpy, xqφjpyqdy dx
B#

1

δ pxqpyqφipyqJΨδpy, xqφjpyqdy dx
B#

(14)

1

δ pxqpyqφipyqJΨδpx, yqφjpxqdy dx.
B#

“:A1

Ek

E(cid:96)
k(cid:96)pφj, φiq ` A2
` A3

k(cid:96)pφj, φiq ` A4

k(cid:96)pφj, φiq

k(cid:96)pφj, φiq.

Therefore, nlfem allows continuous and discontinuous ansatz functions if s ď
rΩq contain functions with jump
0.5. Note, that the fractional Sobolev spaces H sp
discontinuities for 0 ď s ď 0.5.

The expression A1

k(cid:96)pφj, φiq is nonzero only if the element Ek lies in the sup-
port of φi and φj. Similarly, the contribution of A3
k(cid:96)pφj, φiq is linked to the
element E(cid:96). The term A2
k(cid:96)pφj, φiq is nonzero only if φi has its support on Ek
and φj on E(cid:96), where the converse holds for A4
k(cid:96)pφj, φiq. That way we derive the
indices of the basis functions corresponding to the pair pEk, E(cid:96)q in the stiﬀness
matrix. We note that the same indices of basis functions occur again for the
pair pE(cid:96), Ekq, but the contributions to the stiﬀness matrix are not identical as
the truncation 1
δ pxqpyq is not symmetric. Ultimately, the contribution of the
B#
two pairs pEk, E(cid:96)q and pE(cid:96), Ekq together lead to the symmetriﬁed truncation (12).

2.3.2 Kernels with s ą 0.5 on Intersecting Pairs

If a pair of elements is intersecting and s ą 0.5 the separation of integrands
in (14) is not admissible. Therefore, nlfem is restricted to continuous ansatz
functions if s ą 0.5. As the pair is intersecting, the elements are either vertex
touching, edge touching or identical. Therefore the number of ansatz functions
to be considered in these cases is 5, 4 or 3, respectively. If we denote the vertices
by j1, . . . , j(cid:96) for (cid:96) “ 5, 4, 3 we obtain 25, 16, or 9 pairs of ansatz functions
pφjν , φjν1 q for ν, ν1 “ 1, . . . , (cid:96) which yield nonzero contributions to the local
stiﬀness matrix pA#

k(cid:96)pφjν , φjν1 qq1ďν,ν1ď(cid:96).

2.4 Quadrature

The quadrature rules need to work for kernels with truncations and singularites.
However, the implemented quadrature rules in nlfem do not take account of
both at the same time on a ﬁxed pair of elements. We therefore require the
following assumption.

Assumption 3. The quadrature rules for singular kernels assume that for all
intersecting pairs of elements pEk, E(cid:96)q it holds that E(cid:96) Ă Bδpxq for all x P Ek.

9

Remark 2.4. Speciﬁc quadrature rules for singular kernels are required for
suﬃciently strong singularities only. Kernels like the peridynamic kernel (26)
can be integrated by simply technically avoiding zero-divisions and we ignore
those cases in our discussion of singular kernels.

Given Assumption 3 and the fact that disjoint pairs do not require a treat-
ment with regularizing integral transforms we can evaluate all contributions as
given in Algorithm 1.

Algorithm 1 Evaluate A#

k(cid:96) in (13)

k(cid:96) via quadrature for singular kernels;

Evaluate A#
see Section 2.4.2 below

1: if Ek, E(cid:96) intersect and the kernel is singular then
2:
3:
4: else
5:
6:
7: end if

Evaluate A#
see Section 2.4.1 below

k(cid:96) via quadrature for kernel truncations;

In any case, the quadrature is performed by pulling back the domain of

integration to a reference domain

pE ˆ

pE, where

pE :“ tpx P Rd | px ě 0,

dÿ

ι“1

pxι ď 1u.

The aﬃne linear mapping χk : pE Ñ E from the reference to a physical element
allows to deﬁne the pullback

pΦk(cid:96),ijppx, pyq :“ Φijpχkppxq, χ(cid:96)ppyqq,

the inner integral

pK#

k(cid:96),ijppxq :“

ż

1

B#
δ

pE

pχkppxq, χ(cid:96)ppyqq

pΦk(cid:96),ijppx, pyqdpy

and the local contribution to the pi, jq-th entry of the stiﬀness matrix

pA#

k(cid:96),ij :“

ż

pE

pK#

k(cid:96),ijppxqdpx

on the reference element.

2.4.1 Quadrature for Kernel Truncations

(15)

(16)

For some pairs pEk, E(cid:96)q we ﬁnd that E(cid:96) is only partially covered by the interaction
neighborhood B#
δ pxq Ĺ E(cid:96). In this case,
the ball approximations Bncp
δ pxq require a
δ
retriangulation of the integration domain E(cid:96) X B#
δ pxq. We denote the set of
elements which result from such a retriangulation by

δ pxq for some x P Ek, so that E(cid:96) X B#
pxq, Bacp

pxq as well as the ball B8

δ

h,(cid:96)pxq :“ t ˜E(cid:96)uL(cid:96)
T #

(cid:96)“1,

10

Ť

h,(cid:96)pxq “ E(cid:96) X B#
T #
so that
on the reference element pE, and let px P
fully-discrete inner integral from (15) reads as

δ pxq. Let tpyq, dpyq uQ

q“1 denote a quadrature rule
pE be some reference point. Then the

pK#

k(cid:96),ijppxq «

L(cid:96)ÿ

Qÿ

˜(cid:96)“1

q“1

pΦk ˜(cid:96),ijppx, pyqqdpyq .

(17)

In ﬁnite element implementations the function values of ansatz functions are
usually pre-computed at the quadrature points and stored. However, if a retri-
angulation is necessary the physical coordinates of the quadrature points χ˜(cid:96)ppyqq
for q “ 1, . . . , Q on some element ˜E˜(cid:96) P T #
h,(cid:96)pxq are known at runtime only and
the ansatz functions are evaluated at the corresponding points.

Now let tpxp, dpxp uP

p“1 be a quadrature rule for the reference element of the
outer integral. Then with (17) the discretized version of the local contribution
to the pi, jq–th entry of the stiﬀness matrix (16) is obtained by
¨

˛

pA#

k(cid:96),ij «

Pÿ

˝

L(cid:96)ÿ

Qÿ

p“1

˜(cid:96)“1

q“1

pΦk ˜(cid:96),ijppxp, pyqqdpyq

‚dpxp .

2.4.2 Quadrature for Singularities

Some kernel functions exhibit a singularity at the origin, which lies in the inte-
gration domain of pK#
k(cid:96),ijppxq whenever the pair pEk, E(cid:96)q intersects. We therefore
require regularizing integral transforms [28]. Assumption 3 allows to ignore
possible truncations in (16) and to simply evaluate

pA#

k(cid:96),ij “

ż

ż

pE

pE

pΦk(cid:96),ijppx, pyqdpydpx.

(18)

If Assumption 3 is violated, then the support of the kernel is overestimated
by (18).
Intersecting pairs pE(cid:96), Ekq can be vertex touching, edge touching or
identical. For each of those cases we apply integral transforms, which again
pE to the unit cube p0, 1q4.
pull back subsets of the integration domain pE ˆ
The transformations are well established and applied for example in the ﬁeld of
boundary element methods. Details can be found in [28, 1]. Note again, that
in the case of singular kernels with s ą 0.5 the implemented routines cannot
evaluate the expression in (18) for discontinuous basis functions.

Remark 2.5 (Asymmetry due to quadrature). We have mentioned in Section
2.2 that the approximate indicator function based on the approxcaps and nocaps
balls may generally lack in symmetry, and therefore would lead to nonsymmetric
stiﬀness matrices if one used representation (5) of the bilinear form. Also trunca-
tions invoked by the Inﬁnity ball B8
δ pxq, which can be implemented exactly, can
be nonsymmetric on suﬃciently irregular grids. These two observations holds
true independent of the symmetry of the kernel function Ψδpx, yq. However, it
is a desirable feature that the symmetry of the kernel, i.e., the self-adjointness
of the operator, is transported through the discretization process. With other
words, for a symmetric kernel we expect a symmetric stiﬀness matrix. This
behaviour is more intricate and related to the approximation of the interaction

11

domain of a ﬁnite element by the union of interaction neighborhoods of quadra-
ture points, see Figure 2.3. Thus, we use by default representation (11) instead,
which as stated above corresponds in strong form to the operator ´Lδ based
on the approximate indicator function (12). Thereby, we guarantee the stiﬀness
matrix to be symmetric up to machine precision for any symmetric kernel func-
tion. Also, an important consequence of the symmetriﬁcation is that the null
space of the stiﬀness matrix related to pure Neumann type problems contains
the constant vectors up to machine precision. This allows the application of
projected Krylov subspace methods or rank-1 corrections to eﬃciently evaluate
a pseudoinverse of the stiﬀness matrix.

Figure 2.3: The Figure shows the approximation of the interaction
domain of a single triangular element by interaction neighborhoods
of three quadrature points for the inﬁnity normball B8
δ .

We summarize the diﬀerent cases for the quadrature of kernels in Table
1. The table distinguishes between diﬀerent degrees of singularity s in case
of d “ 2 as well as intersecting and disjoint pairs of elements. When s ą 0
we apply regularizing integral transforms represented by ♣ in the table. This
quadrature rule is applied for intersecting pairs and requires Assumption 3.
Whenever s ď 0.5 we allow for discontinuous and continuous ansatz functions.
When s ą 0.5 only continuous ansatz functions are provided. For more details
we refer to [2]. If ´1 ă s ď 0 the singularity might be so weak, that it suﬃces
to simply avoid zero-divisions on intersecting pairs, which is represented by ♦
in the table. However, the quadrature rule ♣ can also be applied. If s ď ´1
there is no singularity at all and symbol ♥ represents a standard quadrature
rule. The rules, ♥ and ♦, respect the kernel truncation, i.e. they do not require
Assumption 3.

s ď ´1 ´1 ă s ď 0

Intersecting
Disjoint

♥
♥

♦ or ♣
♥

0 ă s ď 0.5
♣
♥

CG and DG
♥ Standard quadrature rule on pE ˆ pE
♦ Quadrature rule on pE ˆ pE that avoids pxp “ pyq
♣ Quadrature rule on p0, 1q4 after regularizing integral transforms

0.5 ă s ă 1
♣
♥
CG

Table 1: The table gives an overview of the diﬀerent quadrature
rules which can be applied for dimension d “ 2 in nlfem.

12

2.5 Traversal of the interaction neighborhood
The local contributions pA#
k(cid:96),ij to the stiﬀness matrix, deﬁned in (13), can be
nonzero even for pairs of remote ﬁnite elements pEk, E(cid:96)q, which we then refer to
as interacting elements in the following. Unstructured meshes and the various
supports of kernel functions call for a ﬂexible routine to identify interacting
elements. The identiﬁcation can be accomplished if the assembly follows a
breadth–ﬁrst search. In order to describe the algorithm we deﬁne the adjacency
graph Tadj :“
of the ﬁnite element mesh with vertices T h and edges

T h, Eadj

˘

`

Eadj :“ tpEk, E(cid:96)q P T h ˆ T h | Ek X E(cid:96) ‰ Hu.
The graph Tadj can be understood as the dual graph of the ﬁnite element mesh,
and its vertices are therefore given by the elements. We additionally deﬁne the
interaction graph TS :“

with vertices T h and edges

T h, ES

`

˘

!

ES :“

pEk, E(cid:96)q P T h ˆ T h

k(cid:96),ij ‰ 0 for some φj, φi P V hp

ˇ
ˇ pA#

)

rΩ, Rnq

.

(19)

It is clear that Tadj is a spanning subgraph of TS for any positive interaction
horizon δ. The adjacency graph Tadj can be computed and stored eﬃciently,
while the interaction graph TS exhibits storage requirements which are com-
parable to the full stiﬀness matrix. We also note that the breadth–ﬁrst search
described below allows to naturally identify intersecting pairs pEk, E(cid:96)q, as they
only occur in the ﬁrst layer of the traversal. This important built–in feature is
used to identify the intersection cases for element pairs mentioned in Section
2.3.

Furthermore, for a ﬁxed element Ek let us denote the set of all interacting
ˇ
ˇ pEk, E(cid:96)q P ESu. We then deﬁne the subgraph

elements by T h
`
k
TSk :“
T h
k , ESk

:“ t E(cid:96) P T h
˘
of TS with vertices T h

(cid:32)

ESk :“

pEk, E(cid:96)q P T h ˆ T h

k and edges given by
ˇ
(
ˇ pEk, E(cid:96)q P ES

.

Assumption 4. We assume without loss of generality that each of the graphs
TSk , Tadj, and TS is connected.

It is clear that Assumption 4 can be violated if rΩ is not connected or even
if it is connected as depicted in Figure 2.4a. As a remedy, the implementation
allows to mark elements which are not part of the ﬁnite element discretization.
That way we can add artiﬁcial vertices and elements to the mesh. One option
then is to connect all vertices at the boundary of the connected components
of rΩ with one artiﬁcial vertex, which introduces an adjacency between those
elements. Another, straightforward option is to embed rΩ into a bounded and
convex hold-all domain pΩ Ă Rn, which guarantees that the graphs TSk , Tadj,
and TS are always connected, see Figure 2.4b.
In that sense, Assumption 4
does not cause any loss of generality. If Assumption 4 holds, we can recover the
subgraph TSk with a truncated breadth–ﬁrst traversal of Tadj starting in the
root node Ek as given in Algorithm 2. To that end the root node Ek is appended
to a queue Q :“ rEks. While Q is not empty, an element Er(cid:96) is read and removed
from the queue. Its immediate neighbour, say E(cid:96) P N pEr(cid:96)q, are obtained from
the adjacency graph and the integrals pA#
k(cid:96),ij are successively evaluated for all
E(cid:96) P N pEr(cid:96)q. The element E(cid:96) is added to the queue whenever the integral does not
vanish, and ﬁnally marked as visited. This procedure automatically truncates
the search to interacting elements for any connected interaction neighborhood.

13

(a)

(b)

Figure 2.4: (a) The interaction neighborhood of an element might
be disconnected even if the domain is connected.
(b) A convex
hold all domain pΩ allows to account for possible interactions within
disconnected interaction sets.

Algorithm 2 Traversal of interaction neighborhood
1: for Ek in T h in parallel threads do
Append Ek to the queue Q
2:
while Q is not empty do
3:
4:
5:
6:

Read and remove Er(cid:96) from Q
for E(cid:96) in local neighborhood N pEr(cid:96)q do

if E(cid:96) is not visited then

k(cid:96) (Algorithm 1)
k(cid:96) ‰ 0 append E(cid:96) to Q

Evaluate A#
if A#
Mark E(cid:96) as visited

7:

8:
9:
10:
11:
12:
13: end for

end if

end for
end while

3 Numerical Examples

We solve a truncated fractional–type steady–state diﬀusion equation, a linear
bond–based peridynamics equation [29, 33] and a steady–state diﬀusion problem
based on the inﬁnity normball. In the ﬁrst two examples we demonstrate the
convergence rate of the approximate solutions to a manufactured solution as
the mesh size h Ñ 0.
In the latter example we demonstrate the asymptotic
compatibility of the discretization scheme for a vanishing horizon δ.

To this end let Ω :“ p0, 0.5q2 Ă R2. We deﬁne the interaction domain of Ω
by ΩD :“ r´δ, 0.5 ` δs2 z Ω, so that rΩ “ r´δ, 0.5 ` δs2 is compact. We then
want to solve the nonlocal Dirichlet problem

#

´Lδu “ f
u “ g

on Ω,
on ΩD.

(20)

We deﬁne the function spaces

rΩ, Rnq “ tu P L2p
rΩ, Rnq “ tu P V p

rΩ, Rnq : }u}V ă 8u,
rΩ, Rnq : u “ 0 in ΩDu,

V p

Vcp

14

where

}u}2

V “ Apu, uq ` }u}2

L2p

.

rΩq

For given data f P L2pΩ, Rnq and g :“ v|ΩD , where v P V p
u P V p

rΩ, Rnq the weak solution to problem (20), if

rΩ, Rnq, we call

Apu, vq “ pf , vq for all v P Vcp
and u “ g in ΩD.

rΩ, Rnq,

(21)

The wellposedness of problem (21) for various choices of kernel functions can be
found, e.g., in [11, 13, 16, 15, 22]. By exploiting the known values of u on the
Dirichlet domain, we can rewrite (21) as

AΩΩpu, vq “ pf , vq ´ AΩΩD pg, vq,

(22)

where

ż

ż

AΩΩpu, vq :“

pvpxq ´ vpyqqJpCδpx, yqupxq ´ Cδpy, xqupyqq dydx
ż

Ω

ż
Ω

` 2

vpxqJCδpx, yqupxqdydx

Ω

ΩD

and

AΩΩD pg, vq :“ ´2

ż

ż

Ω

ΩD

vpxqJCδpy, xqgpyqdydx.

In the stiﬀness matrix the splitting (22) can be naturally obtained by sepa-
rating the columns corresponding to the degrees of freedom from the columns
corresponding to the nodes on the boundary ΩD.

3.1 Truncated Fractional–type Diﬀusion

We deﬁne the scalar–valued translationally invariant and symmetric kernel func-
tion γs

δ : R2 ˆ R2 Ñ R by

where

γs
δ px, yq :“ cs,δ

1
|x ´ y|2`2s ,

cs,δ “

2 ´ 2s
πδ2´2s

and s P p0, 1q.

(23)

(24)

Then the scalar–valued truncated fractional–type diﬀusion operator reads as

´Ls

δupxq :“ p.v.

ż

Bδpxq

γs
δ px, yqpupxq ´ upyqqdy.

(25)

The wellposedness of problem (21) for this choice of kernel is studied in [14]. The
constant cδ depends on δ and s and is chosen such that the operator converges
to the classical Laplacian as δ Ñ 0; see, e.g., [31, Lemma 7.4.1]. For another

15

choice of the constant convergence to the fractional Laplacian as δ Ñ 8 can
also be obtained [12].

In the example above, we choose the manufactured solution upxq “ x2

1x2`x2
2
and set f pxq :“ ´∆upxq “ ´2px2 ` 1q in Ω and gpxq :“ upxq on ΩD. Since
the correctly scaled nonlocal operator equals the classical Laplacian operator
on polynomials of order up to three (see, e.g., [31]), we have that upxq is the
solution of problem (21). Furthermore, we choose s :“ 0.5, δ “ 0.2 and various
mesh sizes h as given in the tables below.
In view of Table 1, for pairs of
disjoint elements we use as ♥ a 7-point quadrature rule6 on each, i.e., outer
and inner, element. Since six of the seven points are located on the boundary
of the triangle, this choice has proven to be advantageous in case of truncated
kernels as it mitigates the issue described in Figure 2.3; for more details see [17].
For intersecting pairs we need a quadrature rule on p0, 1q4 after the integral
transformations are performed. For ♣ we choose a tensor product of a 5-point
Gauss quadrature rule.

The convergence rates on a continuous Galerkin ansatz space are shown in
Table 2. For our choice of s “ 0.5 a discontinuous Galerkin ansatz space is
also conforming, and the results are presented in Table 3. In both settings, we
observe the expected second–order convergence rate as the mesh size h Ñ 0;
see, e.g., [14]. Note that the given examples violate Assumption 4 in the ﬁrst
stage of the experiments as 2h ą δ. We see that the ﬁrst rates in both tables
are aﬀected by this.

h
1.41e-01
7.07e-02
3.54e-02
1.77e-02
8.84e-03

dof
1.60e+01
8.10e+01
3.61e+02
1.52e+03
6.24e+03

L2 Error
7.19e-04
1.65e-04
4.09e-05
1.01e-05
2.41e-06

Rates
0.00e+00
2.13e+00
2.01e+00
2.01e+00
2.07e+00

Table 2: Convergence rates for the truncated fractional diﬀusion
operator (25), δ “ 0.2 and h Ñ 0 in a continuous Galerkin ansatz
space.

h
1.41e-01
7.07e-02
3.54e-02
1.77e-02
8.84e-03

dof
1.44e+02
5.94e+02
2.39e+03
9.59e+03
3.84e+04

L2 Error
7.58e-04
1.60e-04
4.06e-05
1.01e-05
2.43e-06

Rates
0.00e+00
2.24e+00
1.98e+00
2.01e+00
2.06e+00

Table 3: Convergence rates for the truncated fractional diﬀusion
operator (25), δ “ 0.2 and h Ñ 0 in a discontinuous Galerkin
ansatz space.

6Speciﬁcally, the quadrature points are the barycenter, the vertices, and the mid-side points
2 , respectively.

of the reference triangle pE and the corresponding weights are 27

2 , and 8

2 , 3

60¨1

60¨1

60¨1

16

3.2 Bond–Based Peridynamics

The translationally invariant and symmetric linear peridynamic kernel is given
by

Cδpx, yq :“ cδ Cpx ´ yq 1Bδpxqpyq,

where

Cpx ´ yq :“

px ´ yqpx ´ yqJ
|x ´ y|3

and cδ :“

3
δ3 .

(26)

The corresponding linear peridynamic operator then reads as
ż

´Pδupxq :“ cδ

Cpx ´ yqpupxq ´ upyqqdy.

(27)

Bδpxq

In [22] the wellposedness is established for problem (21), where f P L2pΩ, Rdq
and g P L2pΩD, Rdq. For the given constant in (26) it is also shown there, that
the peridynamic operator ´Pδ converges to the local Navier operator
π
4

´P0upxq :“ ´

∇ div upxq

∆upxq ´

(28)

π
2

as δ Ñ 0. A similar convergence result is also obtained for the corresponding
weak solutions. Thus, in the given example we choose the manufactured poly-
nomial solution upxq :“ px2
2 p1 ` 2x1, x2q
in Ω and as Dirichlet constraints choose gpxq :“ upxq on ΩD. Similarly to the
diﬀusion case above, we again obtain that upxq is the solution of (21) due to the
correct scaling of the operator [22]. The results are presented in Table 4 and
Table 5 for a continuous and discontinuous Galerkin ansatz, respectively.
In
both settings we observe second–order convergence rate as the mesh size h Ñ 0.

1x2q, set f pxq :“ ´P0upxq “ ´ π

2, x2

h
1.41e-01
7.07e-02
3.54e-02
1.77e-02
8.84e-03

dof
3.20e+01
1.62e+02
7.22e+02
3.04e+03
1.25e+04

L2 Error
7.47e-04
1.82e-04
4.58e-05
1.12e-05
2.63e-06

Rates
0.00e+00
2.04e+00
1.99e+00
2.04e+00
2.09e+00

Table 4: Convergence rates for peridynamic operator (27), δ “ 0.1
and h Ñ 0 in a continuous Galerkin ansatz space.

3.3 Diﬀusion with Inﬁnity Ball Truncation

Here, we consider a constant kernel truncated by the inﬁnity normball. Specif-
ically, we choose the constant to be c8
4δ4 , which ensures the convergence
to the local Dirichlet problem for vanishing horizon δ Ñ 0; see, e.g., [31]. The
nonlocal operator is then given by

δ :“ 3

ż

pupxq ´ upyqqdy.

(29)

´L8

δ upxq :“ c8
δ

B8

δ pxq

17

h
1.41e-01
7.07e-02
3.54e-02
1.77e-02
8.84e-03

dof
2.88e+02
1.19e+03
4.78e+03
1.92e+04
7.68e+04

L2 Error
6.64e-04
1.86e-04
4.96e-05
1.25e-05
2.92e-06

Rates
0.00e+00
1.84e+00
1.90e+00
1.99e+00
2.10e+00

Table 5: Convergence rates for peridynamic operator (27), δ “ 0.1
and h Ñ 0 in a discontinuous Galerkin ansatz space.

The truncation by the inﬁnity normball is implemented without geometric er-
ror, which allows numerical tests of the asymptotic compatibility of the ﬁ-
nite element discretization [30]. For the numerical experiment we choose the
manufactured solution upxq “ sinp4πx1q sinp4πx2q, set f pxq :“ ´∆upxq “
32π2 sinp4πx1q sinp4πx2q in Ω and gpxq :“ upxq on ΩD. Note that opposed
to the previous examples, now for a ﬁxed δ ą 0 the function ´L8
δ u diﬀers from
´∆u, since u is not chosen to be a polynomial of low degree. Thus the solutions
of the nonlocal and the local Dirichlet problem diﬀer from each other and we
can better observe the asymptotic compatibility of the discretization scheme.
We run tests for a ﬁxed mesh size h and vanishing δ, see Table 6, as well as for
2δ and vanishing δ, see Table 7. In both
a horizon dependent mesh size h “
cases we observe a second–order convergence rate as δ Ñ 0.

?

h
8.84e-03
8.84e-03
8.84e-03
8.84e-03
8.84e-03

δ
2.00e-01
1.00e-01
5.00e-02
2.50e-02
1.25e-02

L2 Error
2.03e-01
3.98e-02
8.81e-03
2.08e-03
5.17e-04

Rates
0.00e+00
2.35e+00
2.18e+00
2.08e+00
2.01e+00

Table 6: Convergence rates for the inﬁnity normball (29), ﬁxed h
and δ Ñ 0 in a continuous Galerkin ansatz space.

h
1.41e-01
7.07e-02
3.54e-02
1.77e-02
8.84e-03

δ
2.00e-01
1.00e-01
5.00e-02
2.50e-02
1.25e-02

L2 Error
2.00e-01
4.01e-02
8.85e-03
2.10e-03
5.17e-04

Rates
0.00e+00
2.32e+00
2.18e+00
2.07e+00
2.03e+00

Table 7: Convergence rates for the inﬁnity normball (29), δ “
and h, δ Ñ 0 in a continuous Galerkin ansatz space.

?

2h

3.4 Parallel Complexity of the Assembly process

The number of elements in each interaction neighborhood grows quadratically in
2d if the diameter of the elements h is decreased for ﬁxed δ. Thus, the assembly
of the system matrix with retriangulations as described in the beginning of

18

Section 2.4.1 becomes a costly procedure. Therefore, a matrix free approach is
too expensive and we store the stiﬀness matrix in a sparse format. Furthermore,
it makes sense to share the work among multiple threads. The multithreading
is implemented using OpenMP [10] and the work is shared by a partitioning
of ﬁnite elements as given in Algorithm 2, line 1. Due to the nonlocality of
the operator several threads might need to access identical entries in the global
stiﬀness matrix at the same time to store their contribution. OpenMP allows
so called critical sections to organize the manipulation of shared variables. This
avoids write conﬂicts but it would tremendously slow down the computation.
In order to avoid a critical section during the assembly each thread separately
allocates its portion of the global stiﬀness matrix. The size of the overlap
among the submatrices in the threads, i.e., the amount of additional memory
requirements due to the parallelization, depends on the nonlocal overlap of the
subdomains. We can therefore reduce the memory requirements by partitioning
the domain with metis [21] instead of a scheduler of OpenMP. The submatrices
are ﬁnally added together into a single sparse matrix.

Threads
Time [s]
Parallel eﬃciency

1
2,153
-

2
1,169
0.92

4
583
0.92

8
302
0.89

16
166
0.81

32
107
0.63

64
80
0.42

Table 8: Assembly time for a system with 24,336 degrees of free-
dom.

Figure 3.1: Strong scaling for 24,336 (black) and 10,848, 6,120 and
2,736 (gray) degrees of freedom.

We depict the parallel scaling on a computer with two 2.20GHz Intel Xeon
CPUs with 22 cores per socket and two threads per core. The machine has
756 GB of RAM. Table 8 and Figure 3.1 (black dots) show the run time of
an assembly on a regular grid on a base domain rΩ “ r´δ, 0.5 ` δs2 with mesh
size h “ 7.1e-03 and δ “ 0.1. The related linear system has 24,336 degrees of
freedom and 45,022,167 nonzero entries. The number of threads is increased by
a factor up to 64 while the time drops by a factor of 1/27. The scaling looks
perfect for up to 16 parallel threads and the eﬀect diminishes from then on.
Figure 3.1 also shows the scaling for smaller problems with 10,848, 6,120 and
2,736 degrees of freedom (gray dots) which show a similar behavior.

19

4 Conclusion

The code nlfem is a ﬂexible tool to set up numerical experiments for researchers.
The documentation also describes the extension by user deﬁned kernels which
allows to consider a large problem class. It can assemble nonlocal problems in
1d and 3d using the generically implemented barycenter method [17]. Further-
more, nlfem can be used for a recently developed substructuring based domain
decomposition method for nonlocal operators [9] which requires reweighting of
the kernel function. We therefore hope to bridge eﬃciency and ﬂexibility to
obtain a convenient Python package which nourishes the current development
in the ﬁeld of ﬁnite element methods for nonlocal operators and enables easy
validations of new theory without the eﬀort of implementing code from scratch.

References

[1] G. Acosta, F.M. Bersetche, and J.P. Borthagaray. A short FE implemen-
tation for a 2D homogeneous Dirichlet problem of a fractional Laplacian.
Comput. Math. Appl., 74(4):784–816, 2017.

[2] M. Ainsworth and C. Glusa. Towards an eﬃcient ﬁnite element method
for the integral fractional Laplacian on polygonal domains. Contemporary
Computational Mathematics - A Celebration of the 80th Birthday of Ian
Sloan, pages 17–57, 2018.

[3] E. Aulisa, G. Capodaglio, A. Chierici, and M. D’Elia. Eﬃcient quadrature
rules for ﬁnite element discretizations of nonlocal equations. Numerical
Methods for Partial Diﬀerential Equations, 2021.

[4] F. Bobaru and W. Hu. The meaning, selection, and use of the peridynamic
horizon and its relation to crack branching in brittle materials. Interna-
tional Journal of Fracture, 176:215–222, 2012.

[5] K. Bogdan, K. Burdzy, and Z.-Q. Chen. Censored stable processes. Prob-

ability theory and related ﬁelds, 127(1):89–152, 2003.

[6] B. Boys, T.J. Dodwell, M. Hobbs, and M. Girolami. Peripy-a high perfor-
mance opencl peridynamics package. Computer Methods in Applied Me-
chanics and Engineering, 386:114085, 2021.

[7] D. Brockmann. Anomalous diﬀusion and the structure of human trans-
The European Physical Journal Special Topics,

portation networks.
157(1):173–189, 2008.

[8] D. Brockmann and F. Theis. Money circulation, trackable items, and the
emergence of universal human mobility patterns. IEEE Pervasive Comput-
ing, 7(4):28–35, 2008.

[9] G. Capodaglio, M. D’Elia, M. Gunzburger, P. Bochev, M. Klar, and C. Voll-
mann. A general framework for substructuring-based domain decomposi-
tion methods for models having nonlocal interactions. Numerical Methods
for Partial Diﬀerential Equations, 2020.

20

[10] L. Dagum and R. Menon. Openmp: an industry standard api for shared-
IEEE computational science and engineering,

memory programming.
5(1):46–55, 1998.

[11] M. D’Elia, Q. Du, C. Glusa, X. Tian, and Z. Zhou. Numerical methods for

nonlocal and fractional models. ACTA Numerica, 29, 2020.

[12] M. D’Elia and M. Gunzburger. The fractional

laplacian operator on
bounded domains as a special case of the nonlocal diﬀusion operator. Com-
put. Math. Appl., 66:1245–1260, 2013.

[13] Q. Du. Nonlocal Modeling, Analysis, and Computation. SIAM, 2019.

[14] Q. Du, M. Gunzburger, R. B. Lehoucq, and K. Zhou. Analysis and ap-
proximation of nonlocal diﬀusion problems with volume constraints. SIAM
Review, 54(4):667–696, 2012.

[15] Q. Du, M. Gunzburger, R.B. Lehoucq, and K. Zhou. Analysis and Approx-
imation of Nonlocal Diﬀusion Problems with Volume Constraints. SIAM
Review, 54(4):667–696, 2012.

[16] Q. Du, M. Gunzburger, R.B. Lehoucq, and K. Zhou. A nonlocal vector
calculus, nonlocal volume-constrained problems, and nonlocal balance laws.
Mathematical Models and Methods in Applied Sciences, 23(03):493–540,
2013.

[17] M. D’Elia, M. Gunzburger, and C. Vollmann. A cookbook for approximat-
ing Euclidean balls and for quadrature rules in ﬁnite element methods for
nonlocal problems. Mathematical Models and Methods in Applied Sciences,
31(08):1505–1567, 2021.

[18] G. Da Fies and M. Vianello. Algebraic cubature on planar lenses and
bubbles. Dolomites Research Notes on Approximation, 5:7–12, 2012.

[19] G. Foghem and M. Kassmann. A general framework for nonlocal Neumann

problems. https://arxiv.org/abs/2204.06793, 2022.

[20] G. Gilboa and S. Osher. Nonlocal operators with applications to image
processing. Multiscale Modeling & Simulation, 7(3):1005–1028, 2009.

[21] G. Karypis and V. Kumar. A fast and high quality multilevel scheme
for partitioning irregular graphs. SIAM Journal on scientiﬁc Computing,
20(1):359–392, 1998.

[22] T. Mengesha and D. Qiang. The bond-based peridynamic system with
dirichlet-type volume constraint. Proc. Roy. Soc. Edinburgh Sect. A,
144(1):161–186, 2014.

[23] M. Parks, R. Lehoucq, S. Plimpton, and S. Silling. Implementing peridy-
namics within a molecular dynamics code. Computer Physics Communica-
tions, 179(11):777–783, 2008.

[24] M.L. Parks, P. Seleson, S.J. Plimpton, S.A. Silling, and R.B. Lehoucq.
Peridynamics with lammps: a user guide, v0. 3 beta. Sandia Report (2011–
8253), 3532, 2011.

21

[25] G. Peyré, S. Bougleux, and L. Cohen. Non-local Regularization of Inverse
Problems, pages 57–68. Springer Berlin Heidelberg, Berlin, Heidelberg,
2008.

[26] X. Yin Q. Du, H. Xie. On some nonlocal models with radially sym-
metric interaction domains and the eﬀect of domain truncation, 2021.
arXiv:2109.12485.

[27] S. Dipierro, X. Ros-Oton, and E. Valdinoci. Nonlocal problems with
Revista Matematica Iberoamericana,

Neumann boundary conditions.
33(2):377–416, 2017.

[28] S.A. Sauter and C. Schwab. Boundary Element Methods, volume 39 of
Springer Series in Computational Mathematics. Springer Berlin Heidelberg,
2011.

[29] S.A. Silling. Reformulation of elasticity theory for discontinuities and long-
range forces. Journal of the Mechanics and Physics of Solids, 48(1):175 –
209, 2000.

[30] X. Tian and Q. Du. Asymptotically compatible schemes and applications
to robust discretization of nonlocal models. SIAM Journal on Numerical
Analysis, 52(4):1641–1665, 2014.

[31] C. Vollmann. Nonlocal Models with Truncated Interaction Kernels - Anal-
ysis, Finite Element Methods and Shape Optimization. Doctoral Thesis,
Universität Trier, 2019.

[32] C.T. Wu, N. Ma, Y. Guo, W. Hu, K. Takada, H. Okada, and K. Saito. A
dynamic ductile failure analysis of shell structures using a nonlocal XFEM
method with experimental validation. Advances in Engineering Software,
123:1–12, 2018.

[33] K. Zhou and Q. Du. Mathematical and Numerical Analysis of Linear Peri-
dynamic Models with Nonlocal Boundary Conditions. SIAM Journal on
Numerical Analysis, 48(5):1759–1780, 2010.

22

