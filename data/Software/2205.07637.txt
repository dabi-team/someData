2
2
0
2

y
a
M
0
1

]
S
M

.
s
c
[

1
v
7
3
6
7
0
.
5
0
2
2
:
v
i
X
r
a

MATLAB implementation of hp ﬁnite elements
on rectangles (cid:63)

Alexej Moskovka1[0000−0003−0091−151X] and Jan Valdman2,3[0000−0002−6081−5362]

1 Department of Mathematics, Faculty of Applied Sciences, University of West
Bohemia, Technick´a 8, 30100 Plzeˇn, Czechia
2 Institute of Mathematics, Faculty of Science, University of South Bohemia,
Braniˇsovsk´a 31, 37005 ˇCesk´e Budˇejovice, Czech Republic
3 The Czech Academy of Sciences, Institute of Information Theory and Automation,
Pod vod´arenskou vˇeˇz´ı 4, 18208 Praha 8, Czech Republic
jan.valdman@utia.cas.cz

Abstract. A simple MATLAB implementation of hierarchical shape
functions on 2D rectangles is explained and available for download. Global
shape functions are ordered for a given polynomial degree according to
the indices of the nodes, edges, or elements to which they belong. For
a uniform p-reﬁnement, the hierarchical structure enables an eﬀective
assembly of mass and stiﬀness matrices. A solution of a boundary value
problem is approximated for various levels of uniform h and p reﬁne-
ments.
Keywords: MATLAB vectorization, ﬁnite elements, uniform hp-reﬁnement,
boundary value problem

1

Introduction

hp-FEM is a numerical method for solving partial diﬀerential equations based
on piecewise polynomial approximations that employ elements of variable size
(h) and degree of polynomial (p). The origins of hp-FEM date back to the
works of Ivo Babuˇska and his coauthors in the early 1980s (e.g. [11, 12]) who
discovered that the ﬁnite element method converges exponentially fast when the
mesh is reﬁned using a suitable combination of h-reﬁnements (dividing elements
into smaller ones) and p-reﬁnements (increasing their polynomial degree). Many
books (e.g. [3, 4, 6, 9]) have been written explaining the methodology of hp-FEM
accompanied by software codes [13, 14] in C++.

Implementing hierarchical shape functions, particularly in the case of hp
adaptivity, is not straightforward, and special data structures are needed [5,
10]. A recent MATLAB contribution [8] provides an object-oriented approach
to implement hp-FEM with adaptive h reﬁnement. Our focus is on a simple

(cid:63) A. Moskovka was supported by the R&D project 8J21AT001 Model Reduction and
Optimal Control in Thermomechanics. J. Valdman announces the support of the
Czech Science Foundation (GACR) through the GF21-06569K grant Scales and
shapes in continuum thermomechanics.

 
 
 
 
 
 
2

Alexej Moskovka, Jan Valdman

MATLAB implementation directly based on [4]. We provide eight examples that
demonstrate the basics of hp-FEM assemblies, including:

• constructions of basis functions and their isoparametric transformations to

general quadrilaterals (Sec. 2),

• the ordering of global shape functions using indexing matrices (Sec. 3),
• assemblies of the mass and stiﬀness matrices (Sec. 4),
• solution of a particular diﬀusion-reaction boundary value problem using uni-

form h and p reﬁnements (Sec. 5).

2 Hierarchic shape functions

We consider the basis functions for the dimensions of space d ∈ {1, 2} (see [4]).
For a reference element Tref = [−1, 1]d and p ∈ N we denote by

Sp(Tref )

(1)

the space of polynomials of degree p deﬁned on Tref . The basis functions that
span the space are called shape functions. We deﬁne them using Legendre poly-
nomials for x ∈ [−1, 1]:

P0(x) = 1 , P1(x) = x ,

Pn+1(x) =

(2n + 1) x Pn(x) − n Pn−1(x)
n + 1

,

n ≥ 1 .

(2)

Hierarchic shape functions on Tref = [−1, 1] are functions Nm(ξ) : Tref →
R, m ∈ N deﬁned using (2) as:

N1(ξ) =

Nm(ξ) =

1 − ξ
2

, N2(ξ) =

1 + ξ
2

,

1
(cid:112)2(2m − 3)

(cid:0)Pm−1(ξ) − Pm−3(ξ)(cid:1) ,

m ≥ 3 .

(3)

All Nm(ξ), m ≥ 3 vanishes at the endpoints of Tref .

Example 1. The ﬁrst hierarchic shape functions are shown in Fig 1 and the
pictures can be reproduced by the script

example1_draw_hp_basis_1D

2.1 Hierarchic shape functions on Tref = [−1, 1]2
For p ∈ N we deﬁne the trunk space Sp(Tref ) spanned by polynomials ξiηj,
where i, j ∈ N0 satisﬁes i + j ≤ p, supplemented by the polynomial ξη for p = 1
and the polynomials ξpη, ξηp for p ≥ 2. Its dimension is given by

np,ref = dim(Sp(Tref )) =

(cid:40)

4p ,
p ≤ 3
4p + (p − 2)(p − 3)/2 , p ≥ 4 .

(4)

MATLAB Implementation of C1 ﬁnite elements

3

Fig. 1: The hierarchic shape basis functions Nm(ξ), m = 1, . . . , 6, where p is the
corresponding polynomial degree.

There are three types of 2D shape function: nodal (Q1), edge, and bub-
ble (sometimes called internal). The nodal shape functions that span the space
S1(Tref ) are deﬁned as follows:

N1(ξ, η) =

N3(ξ, η) =

1
4
1
4

(1 − ξ)(1 − η) ,

N2(ξ, η) =

(1 + ξ)(1 + η) ,

N4(ξ, η) =

1
4
1
4

(1 + ξ)(1 − η) ,

(1 − ξ)(1 + η) .

(5)

The function of the i-th nodal shape is equal to one in the i-th node of Tref
and vanishes in other nodes. Edge shape functions are constructed by multiply-
ing one-dimensional shape functions Nm(ξ), m ≥ 3 from (3) by linear blending
functions. We deﬁne φp(x) = Np+1(x), p ≥ 2, and the edge shape functions by

N (1)

p (ξ, η) =

N (3)

p (ξ, η) =

1
2
1
2

(1 − η) φp(ξ) ,

N (2)

p (ξ, η) =

(1 + η) φp(−ξ) ,

N (4)

p (ξ, η) =

1
2
1
2

(1 + ξ) φp(η) ,

(1 − ξ) φp(−η) .

(6)

For j ∈ {1, 2, 3, 4}, the restriction of N (j)
on the j-th edge is equal to the
corresponding one-dimensional edge shape function of the p-th degree, and it
vanishes along the other edges. Bubble-shaped functions are deﬁned as

p

N β

p (ξ, η) = φp−(β+1)(ξ) φβ+1(η) ,

1 ≤ β ≤ p − 3 ,

p ≥ 4

(7)

and any of them attains zero values on all edges. Table 1 shows the number of
shape functions in Tref for 1 ≤ p ≤ 7.

4

Alexej Moskovka, Jan Valdman

polynomial
degree p
1
2
3
4
5
6
7

# of nodal
functions
4
4
4
4
4
4
4

# of edge
functions
0
4
8
12
16
20
24

# of bubble
functions
0
0
0
1
3
6
10

# of all
functions
4
8
12
17
23
30
38

Table 1: The numbers of shape functions.

Local indexing The shape functions of the p th degree in Tref are ordered by
a unique index m ∈ N given by

(cid:40)

m =

4(p − 1) + s ,
4(p − 1) + (p − 3)(p − 4)/2 + s ,

for p ≤ 4 ,
for p ≥ 5 ,

(8)

where for p = 1: s is the index of a node i ∈ {1, 2, 3, 4},

for p ≥ 2: s is the index of an edge j ∈ {1, 2, 3, 4},
for p ≥ 4: s = 4 + β, where β is the local index of a bubble function (7).

Example 2. Several shape functions are depicted in Fig. 2 and can be reproduced
by the script

example2_draw_hp_basis_2D

The polynomial degree p and the local index s are evaluated by the function
[s,p] = shapeindx(m).

Mapping from Tref to a quadrilateral T Transformation of a reference
element Tref to a quadrilateral T is performed by the isoparametric mapping
Q : Tref → T deﬁned as (x, y)(ξ, η) = Q(ξ, η), where

Q(ξ, η) =

(cid:16) 4
(cid:88)

i=1

Xi Ni(ξ, η) ,

Yi Ni(ξ, η)

(cid:17)

,

4
(cid:88)

i=1

(9)

and (Xi, Yi), i ∈ {1, 2, 3, 4} are the coordinates of the i-th node of T . For a given
p ∈ N we denote by

the space of functions spanned by Nm
Example 3. The transformation of Tref into a quadrilateral T given by the nodes
with coordinates

Sp(T )
(cid:0)Q−1(x, y)(cid:1), where Nm ∈ Sp(Tref ).

(10)

(9/2, 3/2), (8, −1/2), (7, 5/2), (6, 4)

is shown in Fig. 3 and can be reproduced by the script

example3_isoparametric_transformation

4 ξ) cos ( 3π

Additionally, it visualizes the approximation for p = 4 of the function f (ξ, η) =
cos ( 3π
4 η), (ξ, η) ∈ Tref and its transformation to quadrilateral T . Vi-
sualization is implemented by the function visualize_hp(mesh,u), where mesh
speciﬁces the mesh properties and u is a vector of the coeﬃcients of function f
in S4(Tref ) basis. According to Table 1, there are 17 coeﬃcients.

MATLAB Implementation of C1 ﬁnite elements

5

Fig. 2: Examples of nodal (the top row), edge (the middle row) and bubble (the
bottom row) shape functions.

Fig. 3: The isoparametric transformation of Tref to a quadrilateral T and the
approximation of the function cos ( 3π
4 ξ) cos ( 3π

4 η) for p = 4 .

6

Alexej Moskovka, Jan Valdman

3 Global shape functions

A domain Ω ⊂ R2 is approximated by a rectangulation T into closed elements
(quadrilaterals). We denote by N , E and T the sets of nodes, edges, and elements,
respectively, and by |N |, |E| and |T | their sizes. For a given p ∈ N we deﬁne it
by

Sp(T )

(11)

the space of all global shape functions on T and by np its dimension given by

(cid:40)

np =

|N | + (p − 1) |E| ,
|N | + (p − 1) |E| + 1

p ≤ 3 ,
2 (p − 2)(p − 3) |T | , p ≥ 4 .

(12)

(cid:12)
(cid:12)Tk

N (g)

m , 1 ≤ m ≤ np the m-th global shape function deﬁned by its

We denote by N (g)
restrictions on elements Tk ∈ T , 1 ≤ k ≤ |T | in the following way:
N (g)

m is a nodal shape function corresponding to the i-th node: If Tk is adjacent
to the i-th node, then N (g)
= ˜Nl,k, where ˜Nl,k is the l-th local nodal shape
m
function on Tk which is equal to one in the i-th node. Otherwise, N (g)
m = 0.
m is an edge shape function corresponding to the j-th edge: If Tk is adjacent
to the j-th edge, then N (g)
= ˜Nl,k, where ˜Nl,k is the l-th local edge shape
m
function on Tk whose restriction on the j-th edge is the corresponding edge
shape function in 1D. Otherwise, N (g)
m is a bubble shape function corresponding to the k-th element:
N (g)
m
function on the k-th element. Otherwise N (g)

= ˜Nl,k, where ˜Nl,k is the corresponding l-th local bubble shape

m = 0.

N (g)

(cid:12)
(cid:12)Tk

(cid:12)
(cid:12)Tk

m = 0.

Fig. 4: Function u ∈ Sp(T ) ∈ of (13) and the underlying rectangular mesh with
indices of elements.

Example 4. We assume a rectangulation T of Ω = (−3, 3)×(0, 2) with |N | = 24,
|E| = 37, |T | = 14, np = 149 and the function u ∈ S4(T ) deﬁned as

u(x, y) = N (g)

10 (x, y) − 2N (g)

34 (x, y) − 2N (g)

142(x, y) ,

(x, y) ∈ Ω

(13)

MATLAB Implementation of C1 ﬁnite elements

7

shown in Fig. 4. The nodal function N (g)
T1, T2, T8, T9, the edge function N (g)
34
bubble function N (g)

10 corresponds to the node adjacent to
to the edge adjacent to T4, T5, and the

142 is deﬁned in T7. Fig. 4 is generated by the script

example4_draw_hp_basis_2D_global

3.1 Global indexing

The relation between the topology of T and the global shape function indices is
represented by three essential matrices.

A matrix B(T , p) is of size np × 5 and stores the key attributes of the global
shape functions N (g)
m ∈ Sp(T ), 1 ≤ m ≤ np which are uniquely determined by:
m (the ﬁrst column of B(T , p)), the type of N (g)
the degree of N (g)
m (nodal, edge or
bubble) speciﬁed by the global index of the respective node (the 2nd column),
edge (the 3rd column), or element (the 4th column). Additionally, the type of
bubble requires a local index of a bubble (the 5th column). The key advantage
of this approach is that for the same T and 1 ≤ p1 < p2 the ﬁrst np1 rows of
both matrices B(T , p1) and B(T , p2) are the same.

A matrix C(T , p) of size np,ref ×|T | collects for individual elements the indices
of the corresponding global functions. In particular, Cl,k(T , p) = m means that
N (g)
corresponds to the l-th local shape function on the k-th element.
m

(cid:12)
(cid:12)Tk

A matrix S(T , p) of size np,ref × |T | for the l-th row and the k-th column
returns the sign of the l-th local function on the k-th element. For edges adjacent
to two elements, the corresponding local edge functions of odd degrees have to
be assigned opposite signs to ensure the continuity of the corresponding global
edge functions.

Example 5. We assume a rectangulation T with |N | = 4, |E| = 4, and |T | = 1.
Tab. 2 depicts the corresponding matrix B(T , p) for p = 5 that can be generated
by the script

example5_B_matrix

Example 6. We assume a rectangulation T with |N | = 6, |E| = 7 and |T | = 2.
Tab. 3 depict the corresponding matrices C(T , p) and S(T , p) for p = 3 which
can be generated by the script

example6_C_S_matrices

Fig. 5 shows the global edge function N (g)
17 of the 3rd degree. The left part
exploits the right orientation with opposite signs providing continuity, and the
right part exploits the wrong orientation leading to discontinuity.

8

Alexej Moskovka, Jan Valdman

p

1
1
1
1
2
2
2
2
3
3
3
3
4
4
4
4
4
5
5
5
5
5
5

the global node
index
1
2
3
4
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-

the global edge
index
-
-
-
-
1
2
3
4
1
2
3
4
1
2
3
4
-
1
2
3
4
-
-

the global
element index
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
1
-
-
-
-
1
1

the local bubble
index
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
1
-
-
-
-
1
2

Table 2: The matrix B(T , p) for T with |N | = 4, |E| = 4, |T | = 1 and p = 5.
Zero values are replaced by symbol (cid:48)−(cid:48).

l
1
2
3
4
5
6
7
8
9
10
11
12

T1
1
2
5
4
7
10
12
8
14
17
19
15

T2
2
3
6
5
9
11
13
10
16
18
20
17

l
1
2
3
4
5
6
7
8
9
10
11
12

T1
1
1
1
1
1
1
1
1
1
-1
1
1

T2
1
1
1
1
1
1
1
1
1
1
1
1

Table 3: Matrices C(T , p) (left) and S(T , p) (right) of Example 6.

Fig. 5: The right (left) and wrong (right) orientation of N (g)

17 of Example 6.

MATLAB Implementation of C1 ﬁnite elements

9

4 Mass and stiﬀness matrices

4.1 The reference mass and stiﬀness matrices

are for a given p ∈ N matrices of size np,ref × np,ref deﬁned by

M ref

i,j =

(cid:90)

Tref

NiNjdx ,

K ref

i,j =

(cid:90)

Tref

∇Ni · ∇Njdx .

(14)

Functions

mass_matrixQp_2D_reference(p)

stiffness_matrixQp_2D_reference(p)

evaluate the corresponding reference mass and stiﬀness matrices using the Gaus-
sian quadrature rule. For a given p, the function [X,W] = intrec_hp(p) returns
the Gauss points X ∈ Tref together with the corresponding weights stored in a
vector W .

4.2 The global mass and stiﬀness matrices

are for a speciﬁc p and T matrices of size np × np deﬁned by

Mi,j =

(cid:90)

T

N (g)

i N (g)

j dx ,

Ki,j =

(cid:90)

T

∇N (g)
i

· ∇N (g)

j dx

(15)

and assembled by adding the contributions of local mass and stiﬀness matrices
M (Tk) and K(Tk) of size np,ref × np,ref to the corresponding entries. In partic-
ular, Mi,j(Tk) and Ki,j(Tk) contributes to the ck
j -th column
of M and K, respectively, where ck is the k-th column vector of C(T , p).
For any Tk ∈ T , 1 ≤ k ≤ |T | the local mass matrix M (Tk) is given by

i -th row and the ck

M (Tk) =

|Tk|
|Tref |

M ref =

|Tk|
4

M ref ,

(16)

however, this formula cannot be applied to the assembly of the local stiﬀness
matrix K(Tk). Instead, we apply the chain rule to evaluate

Ki,j(Tk) =

=

(cid:90)

Tk

(cid:90)

Tk

∇ ˜Ni(x, y) · ∇ ˜Nj(x, y)dx =

∇Ni

(cid:0)Q−1(x, y)(cid:1) · ∇Nj

(cid:0)Q−1(x, y)(cid:1)dx ,

(17)

where ˜Ni and Ni, 1 ≤ i ≤ np,ref are the i-th local function on Tk and Tref ,
respectively. Using the chain rule, one can write

∇ ˜Ni

(cid:0)Q−1(x, y)(cid:1) =

(cid:16) ∂ ˜Ni
∂ξ

∂ξ
∂x

+

∂ ˜Ni
∂η

∂η
∂x

,

∂ ˜Ni
∂ξ

∂ξ
∂y

+

∂ ˜Ni
∂η

∂η
∂y

(cid:17)

,

(18)

10

Alexej Moskovka, Jan Valdman

where

(cid:17)

(cid:16) ∂ξ
∂x

,

∂η
∂x

=

∂Q−1
∂x

(x, y) ,

(cid:17)

(cid:16) ∂ξ
∂y

,

∂η
∂y

=

∂Q−1
∂y

(x, y).

Additionally, we apply derivative of the formula of inverse function to evaluate

(cid:33)

(cid:32) ∂ξ
∂x
∂η
∂x

∂ξ
∂y
∂η
∂y

= ∇Q−1(x, y) = (cid:0)∇Q(ξ, η)(cid:1)−1

=

(cid:33)−1

(cid:32) ∂x
∂ξ
∂y
∂ξ

∂x
∂η
∂y
∂η

.

(19)

level
2
3
4
5
6
7
8
9

n5

n1

n4

n2

n3
2.5 · 101 6.5 · 101 1.1 · 102 1.6 · 102 2.3 · 102
8.1 · 101 2.3 · 102 3.7 · 102 5.8 · 102 8.5 · 102
2.9 · 102 8.3 · 102 1.4 · 103 2.2 · 103 3.2 · 103
1.1 · 103 3.2 · 103 5.3 · 103 8.4 · 103 1.3 · 104
4.2 · 103 1.3 · 104 2.1 · 104 3.3 · 104 5.0 · 104
1.7 · 104 5.0 · 104 8.3 · 104 1.3 · 105 2.0 · 105
6.6 · 104 2.0 · 105 3.3 · 105 5.3 · 105 7.9 · 105
2.6 · 105 7.9 · 105 1.3 · 106 2.1 · 106 3.2 · 106

level
2
3
4
5
6
7
8
9

|T |

|N |

|E|
2.5 · 101 4.0 · 101 1.6 · 101
8.1 · 101 1.4 · 102 6.4 · 101
2.9 · 102 5.4 · 102 2.6 · 102
1.1 · 103 2.1 · 103 1.0 · 103
4.2 · 103 8.3 · 103 4.1 · 103
1.7 · 104 3.3 · 104 1.6 · 104
6.6 · 104 1.3 · 105 6.6 · 104
2.6 · 105 5.3 · 105 2.6 · 105

Table 4: The numbers of global shape functions (left) and mesh properties (right)
of Example 7.

p = 1

p = 2

p = 3

p = 4

p = 5

level M [s] K [s] M [s] K [s] M [s] K [s] M [s] K [s] M [s] K [s]
0.01
0.00
0.01
0.00
0.03
0.01
0.09
0.01
0.33
0.02
1.46
0.07
6.20
0.48
27.31
1.94

0.01
0.01
0.02
0.05
0.16
0.71
3.14
12.43

0.01
0.01
0.01
0.02
0.07
0.45
2.00
11.17

0.02
0.01
0.01
0.01
0.02
0.08
0.31
1.29

0.00
0.01
0.01
0.01
0.03
0.25
0.98
5.26

0.00
0.01
0.02
0.02
0.08
0.32
1.44
6.01

0.01
0.00
0.00
0.00
0.00
0.01
0.04
0.22

0.01
0.00
0.00
0.01
0.04
0.15
0.66
2.86

0.01
0.00
0.00
0.00
0.01
0.03
0.15
0.91

2
3
4
5
6
7
8
9

Table 5: Assembly times of mass and stiﬀness matrices in Example 7.

Example 7. For Ω = Tref = [−1, 1]2 the script

example7_M_K_matrices_times

runs a nested loop on diﬀerent p and levels of uniform reﬁnements of Ω. The mass
and stiﬀness matrices are assembled by the functions mass_matrixQp_2D(mesh)
and stiffness_matrixQp_2D(mesh), respectively. Tables 4 and 5 contain the
properties of the mesh and the corresponding assembly times.

5 Solving partial diﬀerential equation in 2D

We solve a diﬀusion-reaction boundary value problem

−∆u + ν u = f

in Ω ,

∂u
∂n

= 0

on ∂Ω

(20)

MATLAB Implementation of C1 ﬁnite elements

11

by applying the hp-FEM method to the weak formulation of (20) given by

(cid:90)

T

∇u · ∇N (g)

m dx + ν

(cid:90)

T

u N (g)

m dx =

(cid:90)

T

f N (g)

m dx ,

∀ N (g)

m ∈ Sp(T ) .

(21)

It leads to the algebraic system of linear equations in the form of

(K + ν M ) ˜un = b ,

(22)

where M and K are global mass and stiﬀness matrices, un is the numerical solu-
tion of (21) represented by vector ˜un ∈ Rnp of coeﬃcients in the corresponding
hp basis and vector b ∈ Rnp is given by bm = (cid:82)
m dx. We assume the
domain Ω = Tref = [−1, 1]2 and the parameter ν = 0.1. It is easy to show that
u(x, y) = (1 − x2)2 (1 − y2)2

T f N (g)

represents the solution of (20) corresponding to the function
f (x, y) = ν u(x, y) − 4(cid:0) − 2 + 5y2 − y4 + x4(−1 + 3y2) + x2(5 − 12y2 + 3y4)(cid:1)

for (x, y) ∈ Ω. To study the convergence of hp-approximations, we take several
levels of uniform reﬁnements of Ω and solve (22) for diﬀerent p, 1 ≤ p ≤ pmax.
The exact solution u is approximated in S ˜p(T ), ˜p = pmax + 2 by vector ˜u. The
corresponding error en in the energy norm is given by

(en)2 =

(cid:90)

T

(cid:0)(cid:107)∇u − ∇un(cid:107)2 + (u − un)2(cid:1)dx ≈ (˜u − ˜un)T (K + M )(˜u − ˜un) . (23)

Fig. 6: Examples of solutions of (21) and convergence in energy norm.

The script

example8_diffusion_reaction_BVP

utilizes a nested for loop on p (inside) and mesh reﬁnement levels (outside). Two
particular numerical solutions are shown in Fig. 6 (left). The corresponding
errors (23) are depicted in Fig. 6 (right).

12

Alexej Moskovka, Jan Valdman

5.1 Implementation remarks

Assembly times in Tab. 5 were obtained on a MacBook Air (M1 processor, 2020)
with 16 GB memory running MATLAB R2022a. Complementary software for
this paper is available at

https://www.mathworks.com/matlabcentral/fileexchange/111420

for download and testing. The codes for the evaluation of the shape functions
were provided by Dr. Sanjib Kumar Acharya (Mumbai). The assemblies of FEM
matrices are based on our vectorized codes [1,2]. The names of most of the mesh
attributes and the domain rectangulation algorithms are taken from [7].

References

1. I. Anjam, J. Valdman: Fast MATLAB assembly of FEM matrices in 2D and 3D:
Edge elements, Applied Mathematics and Computation 267 (2015), 252–263.
2. T. Rahman, J. Valdman: Fast MATLAB assembly of FEM matrices in 2D and 3D:
Nodal elements, Applied Mathematics and Computation 219 (2013), 7151–7158.
3. B. Szab´o, I. Babuˇska: Finite Element Analysis, Wiley-Interscience, New York, 1991.
4. B. Szab´o, I. Babuˇska: Introduction to Finite Element Analysis, John Wiley & Sons,

2011.

5. W. Bangerth, O. Kayser-Herold: Data structures and requirements for hp ﬁnite
element software, ACM Transactions on Mathematical Software (TOMS) 36 (1),
1-31, 2009.

6. P. ˇSol´ın, K. Segeth, I. Doleˇzel: Higher-Order Finite Element Methods, Chapman

& Hall/CRC, 2004.

7. A. Moskovka, J. Valdman: Fast MATLAB evaluation of nonlinear energies using
FEM in 2D and 3D: nodal elements, Applied Mathematics and Computation 424
(2022), 127048.

8. M. Innerberger, D. Praetorius: MOOAFEM: an Object Oriented MATLAB Code

for Higher-Order (Nonlinear) Adaptive FEM, DOI: arxiv-2203.01845, 2022.

9. L. Demkowicz: Computing with hp-ADAPTIVE FINITE ELEMENTS, Volume 1,

Chapman & Hall/CRC, 2007.

10. L. Demkowicz, J. T. Oden, W. Rachowicz, O. Hardy: Toward a Universal h-p
Adaptive Finite Element Strategy. Part 1. Constrained Approximation and Data
Structure, Computed Methods in Applied Mechanics and Engineering (1989), 79-
112.

11. I. Babuˇska, B. Szab´o, I. Katz: The p-Version of the Finite Element Method, SIAM

Journal of Numerical Analysis, Vol. 18, No. 3, pp. 515-545, 1981.

12. I. Babuˇska, B. Q. Guo: The h-p version of the ﬁnite element method, Computa-

tional Mechanics (1986), 1, 21-41.

13. J. Sch¨oberl: C++11 Implementation of Finite Elements in NGSolve, Institute for

Analysis and Scientiﬁc Computing, Vienna University of Technology, 2014.
14. P. ˇSol´ın, L. Korous, P. Kus: Hermes2D, a C++ library for rapid development
of adaptive hp-FEM and hp-DG solvers, Journal of Computational and Applied
Mathematics (2014), 152-165.

