2
2
0
2

l
u
J

9
1

]

M
D
.
s
c
[

1
v
5
5
1
9
0
.
7
0
2
2
:
v
i
X
r
a

PaMILO: A Solver for Multi-Objective Mixed
Integer Linear Optimization and Beyond

Fritz B¨okler

Levin Nemesch((cid:0))

Mirko H. Wagner

Universit¨at Osnabr¨uck, Germany,
Theoretical Computer Science: https://tcs.uos.de/
{fboekler|lnemesch|miwagner}@uni-osnabrueck.de

July 20, 2022

Abstract

In multi-objective optimization, several potentially conﬂicting ob-
jective functions need to be optimized. Instead of one optimal solution,
we look for the set of so called non-dominated solutions.

An important subset is the set of non-dominated extreme points.
Finding it is a computationally hard problem in general. While solvers
for similar problems exist, there are none known for multi-objective
mixed integer linear programs (MOMILPs) or multi-objective mixed
integer quadratically constrained quadratic programs (MOMIQCQPs).
We present PaMILO, the ﬁrst solver for ﬁnding non-dominated extreme
points of MOMILPs and MOMIQCQPs. PaMILO provides an easy
to use interface and is implemented in C++17. It solves occurring
subproblems employing either CPLEX or Gurobi.

PaMILO adapts the dual-benson algorithm for multi-objective linear
programming (MOLP). As it was previously only deﬁned for MOLPs,
we describe how it can be adapted for MOMILPs, MOMIQCQPs and
even more problem classes in the future.

1

Introduction

Many optimization problems can be seen as multi-objective problems, where
several potentially conﬂicting objective functions need to be optimized. The
solution of such a problem consists not of one single optimal solution value,
but instead a set of so called Pareto-optimal solution values. A solution
is Pareto-optimal, if an improvement in one objective has to worsen at
least one other objective. Subclasses of multi-objective problems include
multi-objective linear programming (MOLP), multi-objective integer linear
programming (MOILP), multi-objective mixed integer linear programming
(MOMILP), and multi-objective mixed integer quadratically constrained

1

 
 
 
 
 
 
quadratic programming (MOMIQCQP). In this paper, we are interested in
the so-called extreme points of MOMILPs and MOMIQCQPs. As MOLPs
and MOILPs are special cases of MOMILPs, this also covers ﬁnding extreme
points for those.

Extreme points are an especially interesting subset of the solution: If
a decision process mirrors reducing multiple criteria into one dimension
through a concave function, an optimal solution can always be represented
by exactly one speciﬁc extreme point [1]. Searching for extreme points can
be seen as equal to parametric optimization, extreme points are called break
points there. There are no known extreme point solvers for MOMILPs
or MOMIQCQPs and only few for MOLPs or MOILPs: bensolve [2] and
inner [3] are solvers for MOLPs, PolySCIP [4] is able to ﬁnd extreme points
of both MOLPs and MOILPs.

We introduce PaMILO (Parametric Mixed Integer Linear Optimization),
a new solver for MOMILPs and MOMIQCQPs. It can read most common
input formats and provides an easy-to-use console interface for practitioners.
The only requirement is the existence of a tight lower bound for each objective,
a so-called ideal point. Similar assumptions are also made by the other state-
of-the-art solvers. Which is reasonable, as practical instances usually have
an ideal point. The algorithmic approach of PaMILO is based on the dual-
Benson algorithm. We show, how this approach can be adapted for even
more general multi-objective optimization problems in the future.

Especially MOMILPs are relevant problems in practice. For example
in [5], a model for power generation expansion planning is formulated as
a MOMILP. The objectives consider the economic cost of expanding the
infrastructure, the environmental impact and the cost of resulting economic
damage. In [6], a MOMILP is used in a completely diﬀerent ﬁeld to optimize
ﬁnancial portfolios. A set of portfolios is calculated from which an investor
can choose which one ﬁts best to their preferences.

2 Deﬁnitions

Let d, (cid:96), (cid:96)(cid:48), m ∈ N and n = (cid:96) + (cid:96)(cid:48). In multi-objective mixed integer linear
programming, problems are of the form:

min Cx

s.t. Ax ≤ b

x ∈ Q(cid:96) × Z(cid:96)(cid:48)

,

where an objective function matrix C ∈ Qd×n, a constraint matrix A ∈
Qm×n and a right hand vector b ∈ Qm are given. A single solution x is
feasible if it fulﬁlls all constraints, as shorthand we write x ∈ X . The set
of all feasible solutions in objective space {Cx : x ∈ X } is called Y. In

2

Figure 1: Example of a MOMILP and its Edgeworth-Pareto hull.

multi-objective linear programming all variables are continuous and in multi-
objective integer linear programming all variables are integers. Without loss
of generality, we only consider minimization problems here. But PaMILO is
also able to solve problems with maximization objectives. Multi-objective
mixed integer quadratically constrained quadratic programming problems are
more general than MOMILPs. In a MOMIQCQP, each objective function
or constraint can also include quadratic terms. Hence, a MOMILP is also a
MOMIQCQP The same notations as for MOMILPs apply.

A point y∗ ∈ Y is called non-dominated if there is no y ∈ Y\{y∗} with
yi ≤ y∗
i ∀i = 1, . . . , d. In general, there is not one non-dominated point,
but a (not necessarily ﬁnite) set of non-dominated points. We call this the
non-dominated set, or YN .

PaMILO searches for a subset of YN , the non-dominated extreme points.
To properly deﬁne an extreme point, we ﬁrst deﬁne the Edgeworth-Pareto hull.
The Edgeworth-Pareto hull of a MOMIQCQP is deﬁned as E = conv(Y)+Rd
≥0.
Then, the non-dominated extreme points are the vertices of E. A vertex
of the (convex) set E is a point y ∈ E such that there is a hyperplane
H with H ∩ E = {y} PaMILO ﬁnds a ﬁnite representation of E.
If the
number of extreme points is ﬁnite itself, this representation is the exact
set of extreme points. In MOMILP, vert(E) is always ﬁnite. But there are
MOMIQCQPs in which vert(E) is inﬁnite. Figure 1 shows a MOMILP and
its Edgeworth-Pareto hull.

While the Edgeworth-Pareto hull is deﬁned for MOMIQCQP, a special
case is the upper image for MOLPs. It is deﬁned as P = Y + Rd
≥0 [7]. In
MOLP, Y is convex by itself and, thus, every point of YN lies on the boundary
of P. The same does not hold for MOMIQCQP, points of YN can lay inside
E.

The extreme points can also be characterized through the weighted-sum
problem (WSP) of a MOMILP. Given a weight vector w ∈ W = {w ∈ Q≥0 :
(cid:80)d
i=1 wi = 1}, it is WSP(w) = minx∈X wTCx. In MOMIQCQP, the weights

also apply to the respective quadratic terms.

An extreme point is a solution where a w ∈ W exists, so that the weighted
sum in objective space is only minimal for this point. Simply solving WSP(w)

3

might result in a dominated point in some special cases. While PaMILO
is able to handle these special cases, here we simply assume they do not
appear.

3 Algorithm

PaMILO adapts the dual-Benson algorithm, which we brieﬂy describe in this
section. Originally, the dual-Benson algorithm is only deﬁned for MOLPs,
we explain how to also apply it to MOMILPs and MOMIQCQPs in the
next section. A detailed description of the algorithm and its theoretical
preliminaries can be found in [8, 9, 7]. The algorithm operates on the lower
image of the problem. The lower image D is deﬁned in [7] as

D =

(cid:110)(cid:16)

(cid:17)
w1, . . . , wd−1, bTu

: w ∈ W, ATu = CTw, u ∈ Rm
≥

(cid:111)

.

Heyde and L¨ohne showed in [7] that the lower image is geometrically dual
to the upper image. Particularly, every facet in the lower image corresponds
to an extreme point in the upper image and vice versa. Hence, by enumerating
the facets of the lower image, we obtain the extreme points of the MOLP.

The algorithm works by iteratively reﬁning an outer approximation of
D. The initial outer approximation consists of one trivial facet of D and the
boundaries given by w ∈ W. The algorithm then improves this approximation
by subsequently enumerating unvisited vertices of the approximation. A
vertex is unvisited if it was not previously used in an iteration. In each
iteration, the algorithm picks an unvisited vertex v of the approximation
and shoots a ray down onto the boundary of D. Shooting down a ray from v
is the same as solving WSP(v1, . . . , vd−1, 1 − (cid:80)d−1
vi). Either, the ray hits
D directly at v and conﬁrms that v is an extreme point of D, or the ray
hits a new point on the boundary of D. If such a point is hit, a new facet
supporting inequality of D is constructed and cuts oﬀ v. This improved
approximation of D has new unvisited vertices for further iterations, so a
vertex enumeration is done. When no unvisited vertex remains, the ﬁnal
approximation is the lower image itself. Because of geometric duality, this
also gives us the vertices and facets of the upper image. Thus, we have found
all non-dominated extreme points.

i

4 Adapting Dual-Benson for MOMILPs, MOMIQC-

QPs and Beyond

As mentioned before, we can adapt the dual-Benson algorithm to also ﬁnd
extreme points of MOMILPs and MOMIQCQPs. A previous generalization
to multi-objective combinatorial problems was done by B¨okler and Mutzel
in [10]. Our adaption is based upon the ideas developed in [11].

4

(a) A ray is shot down from
a dual vertex and ﬁnds a new
dual facet.

(b) The new facet is added to
the dual approximation.

Figure 2: Example of one iteration of the dual-Benson algorithm. The
approximation (red) of D (yellow) becomes more accurate with the new
facet.

The Edgeworth-Pareto hull EI of a MOMILP I (under assumption of
an ideal point) is a convex polyhedron with a recession cone equal to the
positive orthant. The number of its vertices is ﬁnite. Thus, there is a MOLP
J so that its image YJ is equal to EI. J can be constructed by simply using
the facets of EI as constraints and making CJ the identity matrix. This
MOLP has an upper image PJ and a corresponding lower image DJ . As
PJ has the same vertices as EI, a dual-Benson algorithm operating on J
ﬁnds the extreme points of I.

There is a catch though, since we do not actually know J . But we do
not need to: The only time the dual-Benson algorithm interacts with J is
when shooting down rays onto the boundary of DJ . But ray shooting is the
same as solving weighted-sum problems. Thus, a weighted-sum oracle for
I is suﬃcient to realize ray shooting onto DJ . With such a weighted-sum
oracle, the dual-Benson algorithm is able to ﬁnd the extreme points of the
MOMILP I.

For MOMIQCQPs, the same arguments can directly be applied if the
number of extreme points is ﬁnite. But there also are MOMIQCQPs with an
inﬁnite number of extreme points. In this case, the dual-Benson algorithm
would not terminate. This can be avoided by only adding dual facets when the
length of the ray hitting them is above a threshold value ε > 0. The resulting
lower image corresponds to an approximation of the actual Edgeworth-Pareto
hull [12]. The primal vertices of this approximation are still extreme points,
but now a ﬁnite representation of the inﬁnitely many extreme points.

As we never use distinct characteristics of MOMILPs or MOMIQCQPs,
this argumentation can be generalized for all possible multi-objective prob-
lems. As long as a weighted-sum is computable, a dual-Benson algorithm
using a weighted-sum oracle is able to ﬁnd the extreme points or at least the
extreme points of an approximation of E.

5

5

Implementation

PaMILO is implemented in C++17. Installation can be easily done by using
cmake. After installation, PAMILO provides an easy-to-use command-line
interface. For academic purposes, PaMILO can be used subject to the MIT
software license.

The weighted-sum problems are solved through CPLEX or Gurobi. Due
to the need to solve multi-objective problems, recent versions of the solvers
are required. For technical reasons, only the Gurobi version can handle
MOMIQCQPs.

To minimize numerical error, instances undergo preprocessing. If the value
ranges of objectives in the non-dominated points diﬀer strongly, the number
of numerical errors increases. PaMILOs preprocessing tries to normalize these
ranges for each objective function. Through this, we observe a signiﬁcant
decrease of numerical issues in practice.

The most cost expensive part of the calculations are the vertex enumer-
ations. In theory, the computational eﬀort to enumerate the vertices can
grow exponentially in the number of objectives. We observe such growth
with PaMILO for many instances. But for a ﬁxed number of objectives, we
also observe a delay that is only incremental polynomial in the oracle calls
consistent with [13].

Many formats are supported for input ﬁles, the most well known are the
.lp and the .mps formats. The output consists of three ﬁles, all beginning
with a user deﬁned output name as preﬁx. The * sol ﬁle contains all extreme
points and one solution corresponding to each in .json format, the * log
ﬁle contains logging information of PaMILO, and the * (cplex|gurobi) ﬁle
contains the logging output from the respective solver.

References

[1] Benson, H. P. Concave minimization: theory, applications and algo-
rithms. In Handbook of global optimization, 43–148 ( Springer, 1995).

[2] L¨ohne, A. & Weißing, B. The vector linear program solver bensolve
– notes on theoretical background. European Journal of Operational
Research 260, 807–813 (2017).

[3] Csirmaz, L. Inner approximation algorithm for solving linear multiob-
jective optimization problems. Optimization 70, 1487–1511 (2021).

[4] Bornd¨orfer, R., Schenker, S., Skutella, M. & Strunk, T. Polyscip. In
Mathematical Software - ICMS 2016, vol. 9725 of LNCS, 259–264 (2016).

6

[5] Antunes, C. H., Martins, A. G. & Brito, I. S. A multiple objective
mixed integer linear programming model for power generation expansion
planning. Energy 29, 613–627 (2004).

[6] Ehrgott, M., Waters, C., Kasimbeyli, R. & Ustun, O. Multiobjective
programming and multiattribute utility functions in portfolio optimiza-
tion. INFOR: Information Systems and Operational Research 47, 31–42
(2009).

[7] Heyde, F. & L¨ohne, A. Geometric duality in multiple objective linear
programming. SIAM Journal on Optimization 19, 836–845 (2008).

[8] Ehrgott, M., L¨ohne, A. & Shao, L. A dual variant of benson’s “outer
approximation algorithm” for multiple objective linear programming.
Journal of Global Optimization 52, 757–778 (2012).

[9] Hamel, A. H., L¨ohne, A. & Rudloﬀ, B. Benson type algorithms for linear
vector optimization and applications. Journal of Global Optimization
59, 811–836 (2014).

[10] B¨okler, F. & Mutzel, P. Output-sensitive algorithms for enumerating
the extreme nondominated points of multiobjective combinatorial op-
timization problems. In Algorithms - ESA 2015, vol. 9294 of LNCS,
288–299 (2015).

[11] B¨okler, F., Parragh, S. N., Sinnl, M. & Tricoire, F. An outer approxima-
tion algorithm for multi-objective mixed-integer linear and non-linear
programming. Preprint (2021).

[12] L¨ohne, A., Rudloﬀ, B. & Ulus, F. Primal and dual approximation
algorithms for convex vector optimization problems. Journal of Global
Optimization 60, 713–736 (2014).

[13] B¨okler, F. Output-sensitive complexity of multiobjective combinatorial
optimization with an application to the multiobjective shortest path
problem. Ph.D. thesis (2018).

7

