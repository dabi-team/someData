2
2
0
2

g
u
A
3
2

]
h
p
-
t
n
a
u
q
[

1
v
8
7
9
0
1
.
8
0
2
2
:
v
i
X
r
a

Q2Chemistry: A quantum computation platform

for quantum chemistry

Yi Fan, Jie Liu, Xiongzhi Zeng, Zhiqian Xu, Honghui Shang, Zhenyu Li,∗ and

Jinlong Yang

Hefei National Research Center for Physical Sciences at the Microscale, University of

Science and Technology of China, Hefei, Anhui 230026, China

August 24, 2022

E-mail: zyli@ustc.edu.cn

Abstract

Quantum computer provides new opportunities for quantum chemistry. In this arti-

cle, we present a versatile, extensible, and eﬃcient software package, named Q2Chemistry,

for developing quantum algorithms and quantum inspired classical algorithms in the

ﬁeld of quantum chemistry. In Q2Chemistry, wave function and Hamiltonian can be

conveniently mapped into the qubit space, then quantum circuits can be generated ac-

cording to a speciﬁc quantum algorithm already implemented in the package or newly

developed by the users. The generated circuits can be dispatched to either a physical

quantum computer, if available, or to the internal virtual quantum computer realized

by simulating quantum circuit on classical supercomputers. As demonstrated by our

benchmark simulations with up to 72 qubit, Q2Chemistry achieves excellent perfor-

mance in simulating medium scale quantum circuits. Application of Q2Chemistry to

simulate molecules and periodic systems are given with performance analysis.

1

 
 
 
 
 
 
1

Introduction

As the application of accurate classical methods are severely limited by the fast growing

computational cost, quantum computation provides a promising pathway to solve the quan-

tum chemistry problems. 1–3 By encoding wave functions into the Hilbert space of qubits,

the Schrodinger equation for molecular systems can be solved on a quantum computer. In

recent years, various quantum algorithms, such as quantum phase estimation (QPE) and

variational quantum eigensolver (VQE), 2–25 are developed for quantum chemistry. There

are some important issues should be studied for these algorithms. For example, the basis set

used to construct the electronic Hamiltonian and the fermion-to-qubit encoding technique

may lead to signiﬁcant gate complexity and measurement overhead in QPE. 26 The optimiza-

tion of typical wave function ansatzes using VQE can suﬀer from the ”barren plateaus” 27,28

or local minimum traps. 29 A quantum computation platform which can provided extensive

functionalities and step-by-step cross veriﬁcation is therefore desirable for designing novel

quantum algorithms for chemistry applications.

Noisy intermediate quantum (NISQ) devices have been used to demonstrate the possility

of studying the ground and excited states of molecular systems using currently available al-

gorithms. 14–20,30–32 However, such experimental demonstrations are limited to tiny molecules

with an artiﬁcially small basis set. This is because NISQ experiments are limited by the

available quantum resources and the error associated with each quantum gate. Therefore,

low gate ﬁdelity, short coherence time, and insuﬃcient qubit resource prohibit a systematic

study of quantum chemistry oreinted quantum algorithms on NISQ devices. The largest

quantum computation experiment for chemistry up to date uses 16 qubits with 160 two-

qubit gates, 32 while a simple VQE circuit of the commonly used unitary coupled-cluster

(UCC) 33–35 ansatz for a small molecule has 107 CNOT gates (Table 1), which is far beyond

the capability of NISQ devices. Therefore, it is important to have the capability to simulate

quantum circuit on a classical computer at this stage. Even beyond the NISQ era, such a

capability can help us to develop quantum inspired classical algorithms.

2

Table 1: Computational resources required to perform VQE simulations for a number
of molecules using the unitary coupled-cluster ansatz truncated up to double excitations
(UCCSD) and the minimum basis set STO-3G. UCCGSD means that generalized excitation
operators (not distinguishing occupied and virtual orbitals) are used.

Molecule Qubits

Parameters

CNOT gates

UCCSD UCCGSD UCCSD UCCGSD

H2
LiH
H2O
NH3
CH4
C2H4
C3H6

4
8
14
16
18
28
42

2
14
90
135
230
1224
5994

5
72
630
1064
1692
9737
48930

64
1632
26272
46480
95200
8.6 × 105
6.6 × 106

144
10720
2.1 × 105
4.4 × 105
8.2 × 105
7.9 × 106
6.3 × 107

Several quantum computation packages have been reported, for example, C++ based

ProjectQ 36 and Qiskit, 37 GPU-enabled Qulacs, 38 and the diﬀerentiable simulator Yao 39

implemented in Julia. Most of these codes are developed as stand-along quantum circuit

simulators or compilers, which have no interfaces for quantum chemistry applications. Some

of the packages such as Qiskit or PennyLane 40 provide modules linked to external ab-initio

chemistry codes. However, the functionalities are limited, for example, with support for

periodic boundary condition which plays an important role in modeling materials. At the

same time, the performance of simulating quantum circuit is not very satisfactory in these

packages. Most of these packages only implement the brute-force simulating method which

leads to an exponential computational cost. Tensor-based methods have been implemented

in packages such as Qiskit and PennyLane, however, without an eﬃcient distributed par-

allelization algorithm. As a reference, the largest simulated quantum circuit up to date

contains 28 qubits, which is used to study the ground state of ethene molecule using VQE. 41

Based on the above considerations, we develop a versatile and extensible quantum com-

putation platform for quantum chemistry, named Q2Chemistry (pronounced as ”Q square

chemsitry”) to highlight the two quantum dimensions (the systems to be studied and the

tools used to study them). Q2Chemistry adopt a modular design and a mixed-language

programming model to achieve versatility together with high performance, where Python is

3

used as its application program interface (API) while C++ and Julia 42 are used for compu-

tational intensive tasks such as quantum circuit simulators. Q2Chemistry provides interfaces

to quantum chemistry packages such as PySCF 43 to generate required parameters for the

qubit Hamiltonian. The quantum algorithms for solving the eigenstates of the electronic

Hamiltonian are programmable at a high level of abstraction by adopting internal templates

and/or deﬁning custom circuit generation procedures. Some popular VQE and post-VQE

algorithms have already been implemented for ground and excited states of molecular and

periodic systems. Q2Chemistry provides native modules to run the circuit generated by a

speciﬁc quantum algorithm, either via various high performance classical circuit simulation

algorithms for simulating the circuit on a classical computer, or via extensible interfaces

reserved for the upcoming actual quantum processors. An eﬃcient matrix product state

(MPS) 44,45 based circuit simulation engine is implemented to perform quantum simulations

for systems with 50∼100 qubits.

The remaining part ot this article is organizing as the following. After introducing the

framework of Q2Chemistry in Section 2, we present functionalities for handling ab-initio

chemistry quantities in Section 3. In Section 4 we explain the implementation of the cir-

cuit simulation on a classical computer or running on the upcoming quantum hardwares.

Section 5 gives a general introduction to the natively implemented VQE-based algorithms.

Finally, in Section 6, we provide some examples to demonstrate the power of Q2Chemistry

in chemistry applications, and provide the road map for further extensions including the

support for more quantum algorithms, classical circuit simulation backends, and circuit op-

timization algorithms.

2 The framework of Q2Chemistry

As shown in Figure 1a, Q2Chemistry contains three modules. (1) q2chem.qchem: the quan-

tum chemistry module which deﬁnes quantum chemistry problems in the qubit space typi-

4

(a)

(b)

Figure 1: (a) The framework of Q2Chemistry. (b) A typical workﬂow of solving a chemical
problem using a quantum algorithm.

cally with the help of external classical quantum chemistry packages; (2) q2chem.qcirc: the

quantum circuit module which provides quantum circuit related functionalities, including

circuit construction, visualization, optimization, and execution on a virtual or real quan-

tum computer; (3) q2chem.qalgo: the quantum algorithm module which includes native

quantum algorithms and also provides tools to implement new algorithms to solve chemistry

problems.

High-level modules in Q2Chemistry are implemented using the scripting language Python

and provide base implementations for classes in submodules. Beneﬁting from the modular

design and Python’s extensibility, extending existing submodules are easily achieved by con-

structing derived classes and implementing only a small number of virtual functions, which

requires no modiﬁcations to higher level modules. Core functions in the backends are im-

plemented using programming languages including C++ and Julia. These functions are

integrated into the Python interfaces using just-in-time (JIT) technology, which compiles

the code at run time to provide machine-speciﬁc optimizations and deliver outstanding per-

formance. Most of the low-level data structures accessible from Python are stored using

5

NumPy’s 46 ndarray. Therefore, auxiliary operations, such as exact diagonalization for the

qubit Hamiltonian, can be realized by using NumPy-compatible packages such as SciPy 47 or

PyTorch. 48

Using such a modular framework, a general workﬂow to solve a quantum chemistry

problem on a quantum computer is brieﬂy illustrated in Figure 1b.

(1) Collect classical

data such as electron integrals and mean-ﬁeld orbital coeﬃcients to generate Hamiltonian

and an initial quantum state.

(2) Choose or develop a suitable quantum algorithm and

generate corresponding quantum circuits, which may depend on the Hamiltonian such as in

the QPE algorithm or be system independent such as in some VQE algorithms. (3) Perform

lower level circuit optimizations, including eliminating redundant quantum gates to reduce

circuit depth or reconstructing the circuit to ﬁt a speciﬁc quantum processor.(4) Execute the

quantum circuits and perform some measurements to extract necessary information, using

either a virtual or real quantum computer.

Currently, Q2Chemistry can be routinely used for performing VQE simulations on a

classical computer, which is powered by Hamiltonian generation for molecular and periodic

systems, hardware-eﬃcient and UCC-based ansatzes for parametric circuit construction,

and a scalable noise-free tensor network backend for classical simulations of large quantum

circuits.

3 The quantum chemistry module

The q2chem.qchem module mainly handles system Hamiltonian and wave function mapping.

The second-quantized Hamiltonian is constructed from classically calculated quantities such

as molecular orbital coeﬃcients. The wave function mapping determines how the orbitals of

simulated wave function are mapped onto qubits therefore inﬂuences measurement strategy.

6

3.1 Hamiltonian

For a Hamiltonian which is expressed as the linear combination of Pauli strings

ˆH =

(cid:88)

ˆPi

ci

i

(1)

where ˆPi is product of Pauli operators {ˆσx, ˆσy, ˆσz}⊗, the expectation value E can be obtained

through quantum measurement techniques such as the Hadamard test as

E = (cid:104)Ψ| ˆH|Ψ(cid:105)

= (cid:104)Ψ|

(cid:88)

ˆPi|Ψ(cid:105)

ci

i

(cid:88)

=

ci(cid:104)Ψ| ˆPi|Ψ(cid:105).

i

(2)

Given the Hartree-Fock orbitals, the second-quantized electronic Hamiltonian can be written

as

with

ˆH =

(cid:88)

p,q

hpq

ˆT p
q +

(cid:88)

p,q
r,s

gpq
rs

ˆT pq
rs ,

ˆT p
q = a†

paq

(3)

(4)

ˆT pq
rs = a†

pa†

qaras.

hpq and gpq

rs are one- and two-electron integrals. In order to convert the second-quantized

Hamiltonian Equation 3 into the qubit form as given in Equation 1, a fermion-to-qubit

mapping such as the Jordan-Wigner or Bravyi-Kitaev mapping is required. 49–51

In Q2Chemistry, an interface with the PySCF package is provided to calculate one- and

two-electron integrals. for molecular and periodic systems. 52,53 Orbital optimization is also

supported by linking to the pyscf.lo module or using a custom cost function. A unitary

7

matrix is then obtained to transform the integrals as:

˜h˜p˜q =

˜g ˜p˜q
˜r˜s =

(cid:88)

p,q
(cid:88)

p,q
r,s

Up˜phpqUq ˜q

gpq
rs Up˜pUq ˜qUr˜rUs˜s.

(5)

This step is carried out eﬃciently by calling the optimized tensor contraction package

opt einsum. 54 For fermion-to-qubit mapping, Q2Chemistry implements an eﬃcient Jordan-

Wigner transformation written in pure Julia. Other methods such as Bravyi-Kitaev are

currently provided through the interface of OpenFermion. 55 The qubit Hamiltonian can

then be used to construct quantum gates for measurement in quantum algorithms such as

VQE or QPE.

3.2 Wave function

To represent a many-electron quantum state on a quantum computer, the most commonly

used strategy is to map its molecular orbitals onto qubits of which can span the Fock space.

Such a straightforward orbital-to-qubit approach can be written as

|ΨHF (cid:105) = |i0i1 · · · (cid:105)

|ΨCI(cid:105) =

(cid:88)

i0,i1,···

ci0i1···|i0i1 · · · (cid:105),

(6)

where ij ∈ {0, 1} represents both the occupation of orbitals and the quantum state |0(cid:105) or |1(cid:105)

of the corresponding qubit. Equation 6 actually describes the quantum state corresponding

to the eigenstates of a qubit Hamiltonian which is obtained from the Jordan-Wigner trans-

formation. If other fermion-to-qubit mapping algorithms such as Bravyi-Kitaev are used for

the Hamiltonian, such a correspondence does not necessarily exist. With a quantum state

mapped to qubits, Q2Chemistry provides Hadamard test to evaluate the expectation value

of the quantum state with respect to an operator.

8

In the simple orbital-to-qubit mapping, the number of qubits required to simulate the

wave function has a linear dependence on the number of basis functions, which prohibit

the use of a large basis set on NISQ devices. Q2Chemistry provides another strategy which

maps a classical tensor network (TN) state onto quantum circuits. 56,57 In this way, the qubits

determines the classical bond dimension of the tensor network. For chemical systems which

contain weak electron correlations or have a special symmetry, such a TN-based strategy

provides a possible solution to eﬀectively reduce the number of qubits at the expense of

performing more measurements. Generally, diﬀerent wave function mapping strategy leads

to distinctive structures of the quantum circuits, therefore may bring special restrictions

to subsequent quantum algorithms and measurement protocols. The q2chem.qchem module

passes the mapping strategy to quantum algorithms in q2chem.qalgo to generate an abstract

circuit class for initialization. The abstract circuits are then extended according to the

adopted quantum algorithm and instantiated to a common readable quantum circuit that

can be used in the q2chem.qcirc.

4 The quantum circuit module

The q2chem.qcirc module provides quantum circuit execution functionalities.

It mainly

contains two parts: a interface reserved for quantum computer manufacturers and a classical

simulator which simulates state evolution determined by quantum circuits on a classical

computer.

4.1 Interfaces to quantum devices

Functionalities in q2chem.qcirc are inherited from the Base class. High-level Python

APIs enable eﬃcient extensions of Q2Chemistry, which can be used to interface with diﬀer-

ent quantum devices operation systems. Currently, there are multiple competing technical

routes of quantum computer, e.g., the photonic qubits have long coherence time while su-

9

1

2

3

4

5

6

7

8

9

10

11

12

13

14

15

16

17

18

19

20

21

22

23

24

25

26

27

28

29

30

class _BaseQPU ( object ) :

def __init__ ( self , options , ...) :
self . quantum_state = ...
...

def evolve_circuit ( self , ...) :

...

class _BaseHardware ( _BaseQPU ) :

def evolve_circuit ( self , ...) :

circuit_asm = self . _compile_circuit (...)
measurement_result = self . _ q u a n t u m _ h a r d w a r e _ e v o l u t i o n (...)
...

def _compile_circuit ( self , ...) :

# Implement for specific hardware .
def _ q u a n t u m _ h a r d w a r e _ e v o l u t i o n ( self , ...) :
# Implement for specific hardware .

class _BaseSimulator ( _BaseQPU ) :

def evolve_circuit ( self , ...) :

...
for op in quantum_circuit :

if isinstance ( op , QuantumGate ) :

self . _q u an tu m _g a te _e v ol u ti on (...)

elif isinstance ( op , MeasurementOp ) :

self . _measure_qubit (...)

...

def _q u an t um _ ga te _ ev o lu ti o n ( self , ...) :

# Implement in custom simulators .

def _measure_qubit ( self , ...) :

# Implement in custom simulators .

Code Example 1: Interface to quantum devices in the qcircuit module.

perconducting platforms have good scalability. In order to eﬃciently and accurately study

quantum chemical problems, various quantum hardwares may be required depending on

the characteristics of the quantum algorithm. Therefore, we provide a ﬂexible interface for

connecting to diﬀerent quantum hardware platforms as illustrated in Code Example 1. In

a general BaseHardware, the circuit generated by Q2Chemistry is ﬁrstly represented by

quantum assembly language such as OpenQASM via compile circuit(). This step gener-

ally should include circuit optimization and reconstruction to ﬁt the architecture of speciﬁc

hardwares. Then the sequence of gates are converted into signals or pulses and sent to the

quantum devices through quantum hardware evolution() using a compiler provided by

10

the vendor of the hardware system. Finally, results such as measurement statistics or bit

strings are collected and post-processed in Q2Chemistry to obtain required quantities.

4.2 Classical quantum circuit simulator

Table 2: Backends for circuit simulations in present open-source quantum computation soft-
wares. External indicates that one or more third-party packages are required to enable the
functionality. SA stands for single-amplitude simulation.

Software

ProjectQ 36
HiQ 58

Backend
DM

SV
(cid:88) Ongoing
(cid:88) Ongoing

Qulacs 38
Yao 39
Qiskit 37
Cirq 60

MindQuantum 59 (cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
PaddleQuantum 61 (cid:88)
(cid:88)
(cid:88)
(cid:88)

PennyLane 40
QuEST 62
Q2Chemistry

(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)

TN
×
SA
×
×
Ongoing
MPS
External
×
MPS
×
MPS

Parallism
Threaded Distributed

(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)

SV
SV
×
×
×
SV
×
×
×
SV, DM
(cid:88)

GPU

×
Ongoing
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
External
(cid:88)
(cid:88)

Eﬃcient
Gradients
×
×
(cid:88)
×
(cid:88)
×
×
(cid:88)
×
×
(cid:88)

Q2Chemistry implements several simulators to run quantum circuits on a classical com-

puter. The quantum state of multiple qubits can be expanded using a certain basis set

|Ψ(cid:105) =

(cid:88)

i1i2...iN

ci1i2...iN |i1i2 . . . iN (cid:105),

(7)

where N is the number of qubits, and |i1i2 . . . iN (cid:105) is the basis state. The coeﬃcients ci1i2...iN

is an N -dimensional tensor which contains 2N amplitudes. Equation 7 is similar to the

correlated wave function in quantum chemistry represented by a conﬁguration interaction

(CI) expansion.

Currently, there are two strategies to simulate the evolution of quantum state on a

classical computer. One is brute-force simulation which uses a (2N × 1) state vector (SV)

or a (2N × 2N ) density matrix (DM) to represent the quantum state. The other is tensor

11

network methods which approximate the quantum state by a set of low-rank tensors. The

brute-force methods are supported by most of the existing packages (Table 2). Q2Chemistry

also supports the state vector and density matrix methods. These brute-force methods

implemented in the q2chem.qcirc module uses compressed sparse row (CSR) format for

sparse matrix storage and OpenMP for multi-threaded calculation. An OpenACC-enabled

C++ code is also implemented and can be selected at compile time to utilize GPU, which

can provide 2 ∼ 10 times speed-up over the multi-threaded CPU version.

A typical drawback of the brute-force simulation is that the memory usage and com-

putational complexity both scales as O(cN ), where c is a constant between 2 to 4 and N

is the number of qubits. This exponential scaling prevents quantum simulations for larger

molecules with more than ∼30 qubits. Recently, matrix product states (MPS) and projected

entangled pair states (PEPS) are used to simulate large scale random quantum circuits. 63–66

Since the tensor contraction pattern is mostly ﬁxed and does not have the NP-hard path

optimization problems, 67,68 the one-dimensional MPS is preferable as a high performance

tensor network backend for a general quantum circuit simulator.

The MPS ansatz factorizes the rank-N coeﬃcients into lower rank tensors which can be

written as

ci1i2...iN =

(cid:88)

u0...uN

1T i1

u0u1

2T i2

u1u2 . . . N T iN

uN −1uN

(8)

where kT ik

uk−1uk

is a rank-3 tensor with ik called the physical

index and uk the auxiliary

index. The maximum size of the auxiliary indices are deﬁned as the bond dimension of the

MPS, which is denoted as D = max0≤k≤N {uk}. Algorithms based on MPS generally have a

complexity of O(N D3). If the bond dimension D is allowed to grow exponentially, the MPS

can exactly represent any quantum state using Equation 8.

The q2chem.qcirc module implements the MPS simulation algorithm on the top of the

machine learning framework PyTorch 48 based on the algorithm proposed by Guifr´e et al. 69

A demonstrative procedure for simulating quantum circuit using MPS algorithm is presented

in Figure 2. Diﬀerent from the common classical MPS-based methods such as density matrix

12

renormalization group (DMRG), 45 a set of auxiliary matrices are inserted between the rank-3

tensors and stored to maintain a normalized quantum state after the truncated SVD.

(a)

(b)

(c)

Figure 2: (a) Applying a single qubit gate on the MPS quantum state is simulated by simply
a local contraction. (b) Applying a two-qubit gate on neighbouring qubits generally has
2 steps: 1) Reshape the two-qubit gate into a 4-dimensional tensor and contract with the
qubits to form a two-qubit tensor; 2) perform a singular value decomposition to restore
the two-qubit tensor back to the MPS formulation. Post-processing is usually required to
maintain normalization or canonicalization of MPS tensors; (c) Auxiliary matrices which
contains truncated and normalized singular values are used to achieve normalization of the
quantum state.

Classical quantum simulator backends can also be extended within the framework of

Q2Chemistry in a similar style as the interfaces for hardwares. It requires only a minimum

eﬀort of implementing functions quantum gate evolution() and measure qubit() for

a derived class of BaseSimulator and, if necessary, a custom data structure to store the

quantum state. No modiﬁcations to upper level modules such as expectation value evaluation

or higher level quantum algorithms is required. In Section 6.2, we show the application of

Q2Chemistry interfaced with an external MPS simulator QuantumSpins 64,70 which eﬃciently

simulated a 40-qubit molecule with a high accuracy.

4.3 Reverse-mode diﬀerentiation

In many quantum algorithms, a parametric quantum circuit is constructed and optimization

of the circuit parameters is carried out iteratively. On a quantum computer, the gradients

13

of energy or another target function with respect to circuit parameters can be calculated

through the parameter-shift rule or ﬁnite diﬀerence steps, which will introduce an addi-

tional complexity factor of O(Np), where Np is the number of parameters. Nevertheless,

using a classical quantum circuit simulator the gradients can be evaluated eﬃciently with

an approximately O(1) complexity, which is extremely helpful just as the backward prop-

agation algorithm used in classical machine learning if a large number of parameters are

involved. This classical algorithm as illustrated in Algorithm 1 is termed as reverse-mode

diﬀerentiation. 71,72

Algorithm 1: Reverse-mode algorithm to calculate gi = ∂E
∂θi

.

Data: ˆH, {U0(θ0), U0(θ0), . . .}, |Ψ(cid:105)
Result: g: gradients of energy w.r.t. parameters {θ0, θ1, . . .}
Np ← number of parameters, g ←empty array of length Np;
for i=0; i≤ Np − 1; i+=1 do

|Ψ(cid:105) ← Ui(θi)|Ψ(cid:105);

end
|Ψl(cid:105) ← ˆH|Ψ(cid:105), |Ψr(cid:105) ← |Ψ(cid:105);
for i=Np − 1; i≥ 0; i-=1 do

i (θi)|Ψr(cid:105);

|Ψr(cid:105) ← U †
g[i] = 2 × Re((cid:104)Ψl| ∂Ui(θi)
|Ψl(cid:105) ← U †

i (θi)|Ψl(cid:105);

∂θi

end

Ψr(cid:105));

Q2Chemistry implements reverse-mode diﬀerentiation for the brute-force backends. It

should be noted that the reverse-mode diﬀerentiation algorithm is invalid on real quantum

devices even if the original equation is used:

∂E
∂θi

= 2 × Re((cid:104)Ψ|U †

0 · · · U †

Np−1

ˆHUNp−1 · · · Ui+1

∂Ui
∂θi

Ui−1 · · · U0|Ψ(cid:105)),

since the derivative gates { ∂Ui(θi)

∂θi

} are generally non-unitary. At the same time, using reverse-

mode diﬀerentiation with the MPS simulator requires careful modiﬁcations to the algorithm

and specially designed techniques due to the SVD truncation during the simulation. A naive

implementation of Algorithm 1 probably leads to suboptimal performance and numerical

14

errors.

5 Quantum algorithms

In the current release, Q2Chemistry provides a couple of VQE-based algorithms. The mod-

ule q2chem.qalgo adopted several variational wave function ansatzes which can be used

individually or collectively to solve for the eigenstates of the given chemical system. New

quantum algorithms can also be implemented by users conveniently.

5.1 Variational quantum circuit ansatz

Introducing a parametric wave function |Ψ(θ)(cid:105), the lowest eigenvalue E0 can be obtained

variationally:

E0 = minθ(cid:104)Ψ(θ)| ˆH|Ψ(θ)(cid:105).

(9)

Such a protocol is implemented in the q2chem.qalgo module to obtain the eigenstates of a

given Hamiltonian. Properly constructing a parametric quantum circuit, the wave function

ansatz |Ψ(θ)(cid:105) is encoded into the quantum state of qubits. Combining the measurements

for expectation value evaluation on a quantum computer and a numerical optimization algo-

rithm on a classical computer, the variational procedure can then be performed in a hybrid

quantum-classical way.

Generally, there are two broad types of variational quantum circuit ansatzes. 9 They are

physically motivated ansatz (PMA) which is inspired by classical wave function methods

that systematically approaches the exact electronic wave function and hardware heuristic

ansatz (HHA) which considers speciﬁc hardware structure and employs entangling blocks.

Both types are currently integrated into the q2chem.qalgo module.

Unitary coupled-cluster is one of the most commonly PMA for quantum computing.

15

Generally, the UCC wave function is deﬁned as

|Ψ(θ)U CC(cid:105) = exp ( ˆT (θ) − ˆT †(θ))|ΨHF (cid:105).

(10)

In Q2Chemistry, the spin-adapt CCD0 cluster operators 73–75 are used to construct the

UCCSD and UCCGSD wave functions. A fermion-to-qubit mapping is performed and ﬁrst-

order Trotter-Suzuki decomposition 76,77 is implemented to convert Equation 10 into the

product of Pauli strings:

|Ψ(θ)U CC(cid:105) =

(cid:89)

(cid:89)

i

j

exp (iθiPij)|ΨHF (cid:105),

(11)

where the i-th fermion excitation operator ˆTi is transformed into the qubit form (cid:80)

j Pij.

Each exponential term is mapped to quantum circuit following Algorithm 2. An example of

the mapped circuit is present in Figure 3a.

(a)

(b)

Figure 3: (a) The quantum circuit corresponding to the operator exp (iθ ˆσx ˆσy ˆσz ˆσx) and
(b) the two-layer Kandala-Mezzacapo circuit which entangles all neighbouring qubits using
the controlled-U gate. Blue squares represent non-parametric gates while green represent
parametric quantum gates such as Rz and the three-parameter (controlled-)U gate.

The Kandala-Mezzacapo circuit 30 is implemented as an HHA ansatz. If the type of en-

tanglement gates, the ordering of entanglement qubits and the number of layers are set,

Q2Chemistry automatically generates the parametric hardware eﬃcient circuit for simu-

lation. Figure 3(b) shows an example of a two-layer Kandala-Mezzacapo circuit with all

neighbouring qubits entangled by the three-parameter controlled-U gate.

16

Algorithm 2: Map exp (iθ ˆP ) to circuit. HY is the Hadamard-Y gate deﬁned as
HY =

2/2 × (Z + Y )

√

Data: ˆP , θ
Result: C: the quantum circuit
Nq ← number of qubits, C←empty circuit;
for i=0; i≤ Nq − 1; i+=1 do

pi = P [i];
if pi==ˆσx then
C += Hi

else if pi==ˆσy then

C += HYi

end

end
for i=Nq − 2; i≥ 0; i-=1 do

C += CN OT(i+1,i)

end
C += RZ(−2θ)Nq−1
for i=0; i≤ Nq − 2; i+=1 do

C += CN OTi+1,i

end
for i=0; i≤ Nq − 1; i+=1 do

pi = P [i];
if pi==ˆσx then
C += Hi

else if pi==ˆσy then

C += HYi

end

end

17

Several techniques are implemented in Q2Chemistry to reduce the computational over-

head,

including qubit tapering for Hamiltonian, 78 qubit excitation based (QEB) opera-

tor, 79 Pauli entangler, 80–82 symmetry-based operator selection 41 and the ADAPT-VQE al-

gorithm. 83 Q2Chemistry supports combination of above methods, for example, using Pauli

entanglers which entangle at most 4 qubits together with ADAPT-VQE leads to an iterative-

qubit-coupled-cluster (iQCC) 81 like algorithm.

In addition to ground state methods, q2chem.qalgo module oﬀers a couple of post-

VQE algorithms for calculating excited states, including the variational quantum deﬂation

(VQD), 24 quantum subspace expansion (QSE) 25 and equation-of-motion (EOM) 53,84–87 the-

ory. VQD consecutively constructs an eﬀective Hamiltonian, the lowest eigenvalue of which

corresponds to the 1st, 2nd, 3rd, . . . excited state energy:

ˆH i

ef f = ˆH i−1

ef f + αi|Ψi−1(cid:105)(cid:104)Ψi−1|,

(12)

where ˆH 0

ef f is the original second-quantized electronic Hamiltonian. QSE and EOM use

a set of fermion excitation operators or a state-transfer operator to construct and solve a

generalized eigenvalue problem M C = SCE by additional quantum measurements on the top

of the ground state circuit. These methods are implemented in Q2Chemistry for calculating

electron excitations, ionization potentials and electron aﬃnity energies for both molecules

and periodic systems.

5.2 Parallel evaluation of an expectation value

As shown in Equation 2, the Hamiltonian is expressed as the summation of a polynomial

number of mutually uncorrelated Pauli strings. Expectation values of each Pauli string can

thus be calculated independently. Figure 4 gives an example of circuits used for evaluating
expectation value (cid:80)

i ci(cid:104)Ψ| ˆPi|Ψ(cid:105) for a given Hamiltonian containing a number of Pauli strings

under some fermion-to-qubit transformation. For each of the circuits, the ansatz parts are

18

Figure 4: Evaluating the expectation of a linear combination of Pauli strings using multiple
quantum devices or simulator processes. In this example, the measurement parts are the
Hadamard test circuits.

the same while the measurement parts are constructed according to the speciﬁc form of Pauli

string. During the calculation of expectation value, Q2Chemistry automatically distributes

these circuits to diﬀerent quantum devices or simulator processes. On each device, a subset

of circuits are executed then measured. The measurement outcomes are then post-processed

to calculate expectation values locally. Finally, the results are reduced across all the devices

to obtain the total energy.

It should be noted that on real quantum devices, since the quantum states are non-

replicable, all the circuits should be executed. However, on a classical simulator, the memory

data of quantum states can be reused. Therefore, using a quantum circuit simulator, the

ansatz part only needs to be executed once, and the simulated quantum state can then be

copied to each process for later measurements. This strategy is used in the simulations of

Section 6.

6 Applications

We present several simulations to show the power of Q2Chemistry, including a scalability

test for the MPS-based quantum circuit simulator and the numerical simulation results for

ground- and excited-state calculations.

19

6.1 Scalability benchmark

Figure 5: Simulating Cr2 molecule using the MPS backend. STO-3G basis set and the
symmetry-reduced UCCSD ansatz is used. The qubit Hamiltonian contains 305041 Pauli
strings. 51 out of 3131 variational parameters (with random initial values) are selected,
leading to a quantum circuit with 119884 gates. The upper bound for bond dimension is set
to be 64. The time cost for one VQE iteration (including evolution of the quantum circuit
and calculation of energy) is tested. The distributed parallelization is implemented using
OpenMPI and Python’s mpi4py package.

The parallel measurement for expectation value introduced in Section 5.2 is extended to

a two-level parallelism for the MPS simulator:

1. The ﬁrst level parallelization over Hamiltonian. Subsets of Pauli strings from the

Hamiltonian in Equation 1 is distributed to each process. The expectation values of

Pauli strings are calculated independently and a reduce-sum is performed across all

processes to obtain the ﬁnal energy.

2. A second low-level parallelization using multi-thread parallelism on CPU or GPU, to

accelerate the calculations of linear algebra routines such as matrix multiplication and

singular value decomposition.

The two-level strategy enables good parallel scalability if the adapted dynamical distri-

bution algorithm is used to achieve load balance. To reduce memory usage, in the ﬁrst level

the quantum circuit is stored and evolved only on the 0-th process. Although for small

molecules such as H2 (4 qubits), the circuit evolution may contribute over 80% to the to-

tal execution time, the number of Pauli strings in the Hamiltonian will quickly go beyond

20

105 due to the O(N 4) scaling, and the time cost of circuit simulation will become negligi-

ble if larger systems with more that 12 qubits are involved. The scaling benchmark of the

Q2Chemistry simulating a Cr2 molecule (STO-3G basis set) using the MPS backend is given

in Figure 5. Q2Chemistry achieves good parallel performance up to 768 CPU cores for this

72-qubit system.

6.2 Numerical results

Figure 6: The VQE optimized potential energy curve of H2 calculated by the MPS backend
using ccj-pVDZ basis set. The FCI energies are obtained using the PySCF code, and the VQE
results are calculated by interfacing with the external Julia-implemented MPS simulator.

Figure 6 shows the potential energy curve of the H2 molecule. The calculation is car-

ried out by extending the simulators in q2chem.qcirc module to an external MPS circuit

simulator written in Julia. 64,70 Beneﬁting from the high-level modular structure introduced

in Section 2, this external simulator and the parallelization techniques introduced in Sec-

tion 5.2 can be easily implemented within the framework of Q2Chemistry by adding a few

lines of code. The ground-state energies are variationally optimized using ccj-pVDZ basis

set 88 and the symmetry-reduced UCCSD 41 circuit (leading to 40 qubits and 53 variational

parameters). The BOBYQA optimizer is used to perform gradient-free optimizations. For

each geometry, 2000 optimization steps are performed within 24 hours using 560 CPU cores.

Figure 7 calculates quasi-particle band structures for silicon. For such periodic systems,

the Hamiltonian and UCC-based wave function ansatz need to include the constraint of

21

crystal momentum conservation, 52 which is automatically handled by the q2chem.qchem

module. The simulation uses GTH-SVZ basis set with GTH-PADE pseudopotential. A

UCCGSD operator pool with complementary operators 53 is employed together with the

ADAPT algorithm for ground state ADAPT-C wave function. With a 1 × 1 × 1 k-point grid,

16 qubits are simulated using the state vector backend. The EOM-ADAPT-C method 53 is

used for band structure calculation, which achieves a mean absolute diﬀerence of 0.047 eV

from EOM-CCSD and the deviation is as small as ∼ 10−3 eV at Γ point (Figure 7).

Figure 7: Energy diﬀerence between EOM-ADAPT-C and classical EOM-CCSD band struc-
tures for Si. Inset gives the EOM-ADAPT-C band structure calculated using Q2Chemistry.

7 Conclusion

In this study, we demonstrate that the Q2Chemistry package is suitable for simulating and

developing quantum algorithms for quantum chemistry applications. Q2Chemistry provides

versatile functionalities for simulating ground- and excited-state properties. The simulator

backend, including the parallelized MPS algorithm, achieves high performance for large-scale

simulations up to 72 qubits using a moderate amount of computational resources. Directions

for future development include more classical simulation methods including high-dimensional

tensor network based methods, more integrated quantum algorithms, and high-performance

quantum circuit optimization algorithms. With the ﬂexibility to link to diﬀerent quantum

devices, Q2Chemistry can be used as a useful platform in pursuing practical quantum ad-

22

vantage.

Acknowledgement

This work was partially supported by the NSFC (21825302), by the Fundamental Research

Funds for the Central Universities (WK2060000018), by National Supercomputing Center in

Jinan, and by the USTC Supercomputing Center.

References

(1) Preskill, J. Quantum Computing in the NISQ era and beyond. Quantum 2018, 2, 79.

(2) McArdle, S.; Endo, S.; Aspuru-Guzik, A.; Benjamin, S. C.; Yuan, X. Quantum compu-

tational chemistry. Rev. Mod. Phys. 2020, 92, 015003.

(3) Yung, M.-H.; Casanova, J.; Mezzacapo, A.; McClean, J.; Lamata, L. et al. From tran-

sistor to trapped-ion computers for quantum chemistry. Scientiﬁc Reports 2014, 4,

3589.

(4) Tilly, J.; Chen, H.; Cao, S.; Picozzi, D.; Setia, K. et al. The Variational Quantum Eigen-

solver: a review of methods and best practices. arxiv:quant-ph 2021, arxiv:2111.05176 .

(5) Cerezo, M.; Arrasmith, A.; Babbush, R.; Benjamin, S. C.; Endo, S. et al. Variational

quantum algorithms. Nature Reviews Physics 2021, 3, 625–644.

(6) Magann, A. B.; Arenz, C.; Grace, M. D.; Ho, T.-S.; Kosut, R. L. et al. From Pulses

to Circuits and Back Again: A Quantum Optimal Control Perspective on Variational

Quantum Algorithms. PRX Quantum 2021, 2, 010101.

(7) Fedorov, D. A.; Peng, B.; Govind, N.; Alexeev, Y. VQE method: a short survey and

recent developments. Materials Theory 2022, 6, 2.

23

(8) Bravyi, S. B.; Kitaev, A. Y. Fermionic Quantum Computation. Ann. Phys. 2002, 298,

210–226.

(9) Cao, Y.; Romero, J.; Olson, J. P.; Degroote, M.; Johnson, P. D. et al. Quantum Chem-

istry in the Age of Quantum Computing. Chem. Rev. 2019, 119, 10856–10915.

(10) Preskill, J. Quantum Computing in the NISQ era and beyond. Quantum 2018, 2, 79.

(11) Georgescu, I. M.; Ashhab, S.; Nori, F. Quantum simulation. Rev. Mod. Phys. 2014,

86, 153–185.

(12) Aspuru-Guzik, A.; Dutoi, A. D.; Love, P. J.; Head-Gordon, M. Simulated Quantum

Computation of Molecular Energies. Science 2005, 309, 1704–1707.

(13) Wang, H.; Kais, S.; Aspuru-Guzik, A.; Hoﬀmann, M. R. Quantum algorithm for ob-

taining the energy spectrum of molecular systems. Phys. Chem. Chem. Phys. 2008, 10,

5388–5393.

(14) Peruzzo, A.; McClean, J.; Shadbolt, P.; Yung, M.-H.; Zhou, X.-Q. et al. A variational

eigenvalue solver on a photonic quantum processor. Nat. Commun. 2014, 5, 4213.

(15) Hempel, C.; Maier, C.; Romero, J.; McClean, J.; Monz, T. et al. Quantum Chemistry

Calculations on a Trapped-Ion Quantum Simulator. Phys. Rev. X 2018, 8, 031022.

(16) Nam, Y.; Chen, J.-S.; Pisenti, N. C.; Wright, K.; Delaney, C. et al. Ground-state energy

estimation of the water molecule on a trapped-ion quantum computer. NPJ Quantum

Inf. 2020, 6, 33.

(17) Shen, Y.; Zhang, X.; Zhang, S.; Zhang, J.-N.; Yung, M.-H. et al. Quantum implementa-

tion of the unitary coupled cluster for simulating molecular electronic structure. Phys.

Rev. A: At., Mol., Opt. Phys. 2017, 95, 020501.

(18) O’ Malley, P. J. J.; Babbush, R.; Kivlichan, I. D.; Romero, J.; McClean, J. R. et al.

Scalable Quantum Simulation of Molecular Energies. Phys. Rev. X 2016, 6, 031007.

24

(19) Kandala, A.; Mezzacapo, A.; Temme, K.; Takita, M.; Brink, M. et al. Hardware-

eﬃcient variational quantum eigensolver for small molecules and quantum magnets.

Nature 2017, 549, 242–246.

(20) Colless, J. I.; Ramasesh, V. V.; Dahlen, D.; Blok, M. S.; Kimchi-Schwartz, M. E. et al.

Computation of Molecular Spectra on a Quantum Processor with an Error-Resilient

Algorithm. Phys. Rev. X 2018, 8, 011021.

(21) McClean, J. R.; Romero, J.; Babbush, R.; Aspuru-Guzik, A. The theory of variational

hybrid quantum-classical algorithms. New J. Phys. 2016, 18, 023023.

(22) Lanyon, B. P.; Whitﬁeld, J. D.; Gillett, G. G.; Goggin, M. E.; Almeida, M. P. et al.

Towards quantum chemistry on a quantum computer. Nat. Chem. 2010, 2, 106–111.

(23) Romero, J.; Babbush, R.; McClean, J. R.; Hempel, C.; Love, P. J. et al. Strategies

for quantum computing molecular energies using the unitary coupled cluster ansatz.

Quantum Sci. Technol. 2018, 4, 014008.

(24) Higgott, O.; Wang, D.; Brierley, S. Variational Quantum Computation of Excited

States. Quantum 2019, 3, 156.

(25) McClean, J. R.; Kimchi-Schwartz, M. E.; Carter, J.; de Jong, W. A. Hybrid quantum-

classical hierarchy for mitigation of decoherence and determination of excited states.

Phys. Rev. A 2017, 95, 042308.

(26) Liu, J.; Fan, Y.; Li, Z.; Yang, J. Quantum algorithms for electronic structures: basis

sets and boundary conditions. Chem. Soc. Rev. 2022, 51, 3263–3279.

(27) McClean, J. R.; Boixo, S.; Smelyanskiy, V. N.; Babbush, R.; Neven, H. Barren plateaus

in quantum neural network training landscapes. Nature Communications 2018, 9, 4812.

(28) Napp, J. Quantifying the barren plateau phenomenon for a model of unstructured

variational ans¨atze. arXiv:quant-ph 2022, arxiv:2203.06174 .

25

(29) Anschuetz, E. R.; Kiani, B. T. Beyond Barren Plateaus: Quantum Variational Algo-

rithms Are Swamped With Traps. arxiv:quant-ph 2022, arxiv:2205.05786 .

(30) Kandala, A.; Mezzacapo, A.; Temme, K.; Takita, M.; Brink, M. et al. Hardware-

eﬃcient variational quantum eigensolver for small molecules and quantum magnets.

Nature 2017, 549, 242–246.

(31) Arute, F.; Arya, K.; Babbush, R.; Bacon, D.; Bardin, J. C. et al. Hartree-Fock on a

superconducting qubit quantum computer. Science 2020, 369, 1084–1089.

(32) Huggins, W. J.; O’Gorman, B. A.; Rubin, N. C.; Reichman, D. R.; Babbush, R. et al.

Unbiasing fermionic quantum Monte Carlo with a quantum computer. Nature 2022,

603, 416–420.

(33) Kutzelnigg, W. Quantum chemistry in Fock space. I. The universal wave and energy

operators. J. Chem. Phys. 1982, 77, 3081–3097.

(34) Bartlett, R. J.; Kucharski, S. A.; Noga, J. Alternative coupled-cluster ans¨atze II. The

unitary coupled-cluster method. Chem. Phys. Lett. 1989, 155, 133–140.

(35) Taube, A. G.; Bartlett, R. J. New perspectives on unitary coupled-cluster theory. Int.

J. Quantum Chem. 2006, 106, 3393–3401.

(36) Steiger, D. S.; H¨aner, T.; Troyer, M. ProjectQ: an open source software framework for

quantum computing. Quantum 2018, 2, 49.

(37) ANIS, M. S.; Abby-Mitchell,; Abraham, H.; AduOﬀei,; Agarwal, R. et al. Qiskit: An

Open-source Framework for Quantum Computing. 2021.

(38) Suzuki, Y.; Kawase, Y.; Masumura, Y.; Hiraga, Y.; Nakadai, M. et al. Qulacs: a fast

and versatile quantum circuit simulator for research purpose. Quantum 2021, 5, 559.

(39) Luo, X.-Z.; Liu, J.-G.; Zhang, P.; Wang, L. Yao.jl: Extensible, Eﬃcient Framework for

Quantum Algorithm Design. Quantum 2020, 4, 341.

26

(40) Bergholm, V.; Izaac, J.; Schuld, M.; Gogolin, C.; Alam, M. S. et al. PennyLane: Auto-

matic diﬀerentiation of hybrid quantum-classical computations. arxiv:quant-ph 2018,

arxiv:1811.04968 .

(41) Cao, C.; Hu, J.; Zhang, W.; Xu, X.; Chen, D. et al. Progress toward larger molec-

ular simulation on a quantum computer: Simulating a system with up to 28 qubits

accelerated by point-group symmetry. Phys. Rev. A 2022, 105, 062452.

(42) Bezanson, J.; Edelman, A.; Karpinski, S.; Shah, V. B. Julia: A Fresh Approach to

Numerical Computing. SIAM Review 2017, 59, 65–98.

(43) Sun, Q.; Berkelbach, T. C.; Blunt, N. S.; Booth, G. H.; Guo, S. et al. PySCF: the

Python-based simulations of chemistry framework. Wiley Interdisciplinary Reviews:

Computational Molecular Science 2018, 8, e1340.

(44) Or´us, R. A practical introduction to tensor networks: Matrix product states and pro-

jected entangled pair states. Annals of Physics 2014, 349, 117–158.

(45) Schollw¨ock, U. The density-matrix renormalization group in the age of matrix product

states. Annals of Physics 2011, 326, 96–192, January 2011 Special Issue.

(46) Harris, C. R.; Millman, K. J.; van der Walt, S. J.; Gommers, R.; Virtanen, P. et al.

Array programming with NumPy. Nature 2020, 585, 357–362.

(47) Virtanen, P.; Gommers, R.; Oliphant, T. E.; Haberland, M.; Reddy, T. et al. SciPy 1.0:

Fundamental Algorithms for Scientiﬁc Computing in Python. Nature Methods 2020,

17, 261–272.

(48) Paszke, A.; Gross, S.; Massa, F.; Lerer, A.; Bradbury, J. et al. In Advances in Neu-

ral Information Processing Systems 32 ; Wallach, H., Larochelle, H., Beygelzimer, A.,

d'Alch´e-Buc, F., Fox, E. et al. , Eds.; Curran Associates, Inc., 2019; pp 8024–8035.

27

(49) Jordan, P.; Wigner, E. ¨Uber das Paulische ¨Aquivalenzverbot. Zeitschrift f¨ur Physik

1928, 47, 631–651.

(50) Seeley, J. T.; Richard, M. J.; Love, P. J. The Bravyi-Kitaev transformation for quantum

computation of electronic structure. J. Chem. Phys. 2012, 137, 224109.

(51) Tranter, A.; Love, P. J.; Mintert, F.; Coveney, P. V. A Comparison of the Bravyi–Kitaev

and Jordan–Wigner Transformations for the Quantum Simulation of Quantum Chem-

istry. J. Chem. Theory Comput. 2018, 14, 5617–5630.

(52) Liu, J.; Wan, L.; Li, Z.; Yang, J. Simulating Periodic Systems on a Quantum Computer

Using Molecular Orbitals. J. Chem. Theory Comput. 2020, 16, 6904–6914.

(53) Fan, Y.; Liu, J.; Li, Z.; Yang, J. Equation-of-Motion Theory to Calculate Accurate

Band Structures with a Quantum Computer. The Journal of Physical Chemistry Letters

2021, 12, 8833–8840, PMID: 34492184.

(54) a. Smith, D. G.; Gray, J. opt einsum - A Python package for optimizing contraction

order for einsum-like expressions. Journal of Open Source Software 2018, 3, 753.

(55) McClean, J. R.; Sung, K. J.; Kivlichan, I. D.; Cao, Y.; Dai, C. et al. OpenFermion:

The Electronic Structure Package for Quantum Computers. arXiv:quant-ph 2017,

arXiv:1710.07629 .

(56) Liu, J.-G.; Zhang, Y.-H.; Wan, Y.; Wang, L. Variational quantum eigensolver with

fewer qubits. Phys. Rev. Research 2019, 1, 023025.

(57) Haghshenas, R.; Gray, J.; Potter, A. C.; Chan, G. K.-L. Variational Power of Quantum

Circuit Tensor Networks. Phys. Rev. X 2022, 12, 011047.

(58) Nguyen, D.; Mikushin, D.; Man-Hong, Y. HiQ-ProjectQ: Towards user-friendly and

high-performance quantum computing on GPUs. 2021 Design, Automation & Test in

Europe Conference & Exhibition (DATE). 2021; pp 1056–1061.

28

(59) MindQuantum Developer, MindQuantum, version 0.6.0. 2021; https://gitee.com/

mindspore/mindquantum.

(60) Cirq Developers, Cirq. 2022; https://doi.org/10.5281/zenodo.6599601, See full list

of authors on Github: https://github .com/quantumlib/Cirq/graphs/contributors.

(61) Paddle Quantum. 2020; https://github.com/PaddlePaddle/Quantum.

(62) Jones, T.; Brown, A.; Bush, I.; Benjamin, S. C. QuEST and High Performance Simu-

lation of Quantum Computers. Scientiﬁc Reports 2019, 9, 10736.

(63) Guo, C.; Liu, Y.; Xiong, M.; Xue, S.; Fu, X. et al. General-Purpose Quantum Circuit

Simulator with Projected Entangled-Pair States and the Quantum Supremacy Frontier.

Phys. Rev. Lett. 2019, 123, 190501.

(64) Guo, C.; Zhao, Y.; Huang, H.-L. Verifying Random Quantum Circuits with Arbitrary

Geometry Using Tensor Network States Algorithm. Phys. Rev. Lett. 2021, 126, 070502.

(65) Liu, X.; Guo, C.; Liu, Y.; Yang, Y.; Song, J. et al. Redeﬁning the quantum

supremacy baseline with a new generation sunway supercomputer. arxiv:quant-ph 2021,

arXiv:2111.01066 .

(66) McCaskey, A.; Dumitrescu, E.; Chen, M.; Lyakh, D.; Humble, T. Validating quantum-

classical programming models with tensor network simulations. PLOS ONE 2018, 13,

1–19.

(67) Chi-Chung, L.; Sadayappan, P.; Wenger, R. On Optimizing a Class of Multi-

Dimensional Loops with Reduction for Parallel Execution. Parallel Processing Letters

1997, 07, 157–168.

(68) Pfeifer, R. N. C.; Haegeman, J.; Verstraete, F. Faster identiﬁcation of optimal contrac-

tion sequences for tensor networks. Phys. Rev. E 2014, 90, 033315.

29

(69) Vidal, G. Eﬃcient Classical Simulation of Slightly Entangled Quantum Computations.

Phys. Rev. Lett. 2003, 91, 147902.

(70) Chu, G. QuantumSpins. https://github.com/guochu/QuantumSpins, 2020.

(71) Jones, T.; Gacon, J. Eﬃcient calculation of gradients in classical simulations of varia-

tional quantum algorithms. arXiv:quant-ph 2020, arXiv:2009.02823 .

(72) Chu, G. VQC.jl. https://github.com/guochu/VQC.jl, 2020.

(73) Scuseria, G. E.; Janssen, C. L.; Schaefer, H. F. An eﬃcient reformulation of the closed-

shell coupled cluster single and double excitation (CCSD) equations. The Journal of

Chemical Physics 1988, 89, 7382–7387.

(74) Bulik, I. W.; Henderson, T. M.; Scuseria, G. E. Can Single-Reference Coupled Cluster

Theory Describe Static Correlation? Journal of Chemical Theory and Computation

2015, 11, 3171–3179, PMID: 26575754.

(75) Sokolov, I. O.; Barkoutsos, P. K.; Ollitrault, P. J.; Greenberg, D.; Rice, J. et al.

Quantum orbital-optimized unitary coupled cluster methods in the strongly correlated

regime: Can quantum algorithms outperform their classical equivalents? The Journal

of Chemical Physics 2020, 152, 124107.

(76) Grimsley, H. R.; Claudino, D.; Economou, S. E.; Barnes, E.; Mayhall, N. J. Is the

Trotterized UCCSD Ansatz Chemically Well-Deﬁned? J. Chem. Theory Comput. 2020,

16, 1–6.

(77) Babbush, R.; McClean, J.; Wecker, D.; Aspuru-Guzik, A.; Wiebe, N. Chemical basis of

Trotter-Suzuki errors in quantum chemistry simulation. Phys. Rev. A 2015, 91, 022311.

(78) Bravyi, S.; Gambetta, J. M.; Mezzacapo, A.; Temme, K. Tapering oﬀ qubits to simulate

fermionic Hamiltonians. arxiv:quant-ph 2017, arxiv:1701.08213 .

30

(79) Yordanov, Y. S.; Armaos, V.; Barnes, C. H. W.; Arvidsson-Shukur, D. R. M. Qubit-

excitation-based adaptive variational quantum eigensolver. Communications Physics

2021, 4, 228.

(80) Ryabinkin, I. G.; Yen, T.-C.; Genin, S. N.; Izmaylov, A. F. Qubit Coupled Cluster

Method: A Systematic Approach to Quantum Chemistry on a Quantum Computer.

Journal of Chemical Theory and Computation 2018, 14, 6317–6326, PMID: 30427679.

(81) Ryabinkin, I. G.; Lang, R. A.; Genin, S. N.; Izmaylov, A. F. Iterative Qubit Coupled

Cluster Approach with Eﬃcient Screening of Generators. Journal of Chemical Theory

and Computation 2020, 16, 1055–1063, PMID: 31935085.

(82) Ryabinkin, I. G.; Izmaylov, A. F.; Genin, S. N. A posteriori corrections to the iterative

qubit coupled cluster method to minimize the use of quantum resources in large-scale

calculations. Quantum Science and Technology 2021, 6, 024012.

(83) Grimsley, H. R.; Economou, S. E.; Barnes, E.; Mayhall, N. J. An adaptive variational

algorithm for exact molecular simulations on a quantum computer. Nat. Commun.

2019, 10, 3007.

(84) ROWE, D. J. Equations-of-Motion Method and the Extended Shell Model. Rev. Mod.

Phys. 1968, 40, 153–166.

(85) Stanton, J. F.; Bartlett, R. J. The equation of motion coupled-cluster method. A sys-

tematic biorthogonal approach to molecular excitation energies, transition probabilities,

and excited state properties. J. Chem. Phys. 1993, 98, 7029–7039.

(86) Krylov, A. I. Equation-of-Motion Coupled-Cluster Methods for Open-Shell and Elec-

tronically Excited Species: The Hitchhiker’s Guide to Fock Space. Annu. Rev. Phys.

Chem. 2008, 59, 433–462.

31

(87) Ollitrault, P. J.; Kandala, A.; Chen, C.-F.; Barkoutsos, P. K.; Mezzacapo, A. et al.

Quantum equation of motion for computing molecular excitation energies on a noisy

quantum processor. Phys. Rev. Res. 2020, 2, 043140.

(88) Benedikt, U.; Auer, A. A.; Jensen, F. Optimization of augmentation functions for cor-

related calculations of spin-spin coupling constants and related properties. The Journal

of Chemical Physics 2008, 129, 064111.

32

