2
2
0
2

n
u
J

0
3

]
I

N
.
s
c
[

1
v
5
3
0
0
0
.
7
0
2
2
:
v
i
X
r
a

GOSPF: an Energy Eﬃcient Implementation of the
OSPF Routing Protocol

M. D’Arienzob, S.P. Romanoa,∗

aDepartment of Electric Engineering and Information Technology, University of Napoli
Federico II, Italy
bDipartimento di Studi Europei e Mediterranei, Seconda Universit`a di Napoli, Italy

Abstract

Energy saving is currently one of the most challenging issues for the Internet re-
search community. Indeed, the exponential growth of applications and services
induces a remarkable increase in power consumption and hence calls for novel
solutions which are capable to preserve energy of the infrastructures, at the
same time maintaining the required Quality of Service guarantees. In this pa-
per we introduce a new mechanism for saving energy through intelligent switch
oﬀ of network links. The mechanism has been implemented as an extension to
the Open Shortest Path First routing protocol. We ﬁrst show through simula-
tions that our solution is capable to dramatically reduce energy consumption
when compared to the standard OSPF implementation. We then illustrate a
real-world implementation of the proposed protocol within the Quagga routing
software suite.

Keywords:
Routing Protocols, Open Shortest Path First, Energy Eﬃciency

1. Introduction

In this paper we present an extension of the OSPF protocol speciﬁcally
conceived to optimize the overall energy consumption of the network. The al-
gorithm we devised represents our engineering approach to the solution of the
well known (though still open) issue of dynamic network topology adaptation to
improve energy eﬃciency. The paper starts with a thorough analysis of the cur-
rent achievements in the so-called green networking ﬁeld, with special regard to
those approaches which have focused on the exploitation of smart energy aware
routing strategies. We then highlight the major contributions of our proposal,
which is based on an analytical model that takes also into account the dynamics
of the traﬃc load the network is subject to and proposes a solution based on a

∗Corresponding author
Email address: spromano@unina.it (S.P. Romano)

Preprint submitted to Journal of Network and Computer Applications

July 4, 2022

 
 
 
 
 
 
fully distributed paradigm. In order to assess the performance achieved by this
solution, we discuss the results of an experimental campaign based on simula-
tions and built around an extremely realistic scenario associated with real-world
traﬃc proﬁles and network topology, as inspired by the GARR Italian research
network infrastructure.

The rest of the paper is structured as follows. In section 2 we present related
works dealing with energy eﬃcient networking, with a focus on re-engineering
and dynamic adaptation approaches. In section 3 we provide a formal context
for the deﬁnition of the problem at hand, namely the dynamic (and time-aware)
adaptation of the network topology driven by energy eﬃciency considerations.
Given the above mentioned theoretical frame, in section 4 we present our pro-
posal for Green OSPF (GOSPF), an energy eﬃcient extension of the well-known
Open Shortest Path First (OSPF) routing protocol, whose performance is thor-
oughly assessed in section 5.
In section 6 we move from theory to practice,
by presenting a real-world implementation of the GOSPF protocol within the
Quagga routing protocol suite. Finally, section 8 summarizes the main results
of our current eﬀorts and indicates the most interesting directions of our future
work.

2. Related Work

The power saving issue in the ICT era has attracted more and more at-
tention in the last few years. In [1], a pioneering analysis about the impact of
energy consumption on network devices in the Internet has been presented. The
authors argue the need to change the network protocols in order to save energy
by putting unused interfaces and devices in a sleep state. The main approaches
to reduce energy consumption in networking infrastructures usually focus on
three diﬀerent areas: the network edge components (including PCs and other
end-devices), the access networks, and the backbone. To reduce the power con-
sumption in any of these areas, several novel solutions have been proposed. Most
of these solutions are based on three fundamental approaches: re-engineering,
dynamic adaptation, and sleeping/standby [2].

Re-engineering is concerned with the design of innovative technologies that
claim more eﬃciency in the network equipment. It includes the optimization
of hardware components as well as the implementation of innovative network
paradigms that can contribute towards a reduction in power consumption. The
dynamic adaptation of the network resources, instead, provides mechanisms for
tuning packet processing engines and network interfaces in order to satisfy at the
same time traﬃc load and performance requirements, while lowering the demand
for energy. Finally the sleeping/standby approach envisages switching either
unused or underutilized network components to a low power consumption mode.
Due to the requirement to keep devices (speciﬁcally the end-systems) always
connected to the network, this approach calls for proxying techniques capable
to guarantee the “presence” of the component also when it is in sleeping or
standby mode. Actually, the selection of a speciﬁc approach mainly depends on
the particular network scenario upon which the mechanism will be implemented.

2

With regard to PCs and end-devices, the common approach is to implement
a sleeping mechanism. In [3] the authors propose to turn into sleeping mode the
network interfaces of the devices when no data are going to be transmitted. As
mentioned above, since several network protocols require that devices are con-
tinuously connected, a “proxy” component, called Network Connectivity Proxy
(NCP), keeps on guaranteeing the presence of a network interface even when it
switches to sleeping mode. This mechanism requires a speciﬁc network protocol
to wake up the interface when data are sent to the end-device. Similarly, in [4]
a connection proxy mechanism is directly implemented in the network interface
card (NIC). Such a solution allows to power oﬀ the end-device while keeping
network connectivity.

Solutions adopted for energy eﬃciency in the access network mainly exploit
both the re-engineering and the dynamic adaptation approaches. As an exam-
ple, in [5] the authors propose a mechanism to reduce the power consumed by
a Home Gateway (HG). They implement the HG through several functional
blocks which can be powered down to reduce energy, with the exception of the
so-called NPA (Network Protocol Agent), namely the component which is in
charge of maintaining network connectivity.

In support of the use of these approaches,

Re-engineering and dynamic adaptation are also exploited in the network
backbone.
In this context a valuable work has been proposed by Baldi and
Ofek in [6]. The authors propose a re-engineering of the network infrastructure
through a pipeline forwarding of IP packets aimed at optimizing the overall en-
ergy consumption of the single network elements. By synchronizing all routers
operations in the network with the same clock reference, it is possible to optimize
packet forwarding for periodic traﬃc, such as video. The proposed approach
reduces per packet processing, limits the memory requirements, and allows a
full link utilization.
[7] analyzes
the power consumption of the routers in several conﬁguration scenarios. The
results of this study conﬁrm the need for a re-engineering of the network equip-
ment that should support power-awareness mechanisms to considerably reduce
energy consumption. With regard to dynamic adaptation, work in [8] considers
two fundamental schemes for power management: sleeping and rate adaptation.
The former puts network interfaces to sleep for a short idle period. This solu-
tion is supported by a smart buﬀering mechanism at interface level in order to
avoid packet losses during sleeping time and to aggregate traﬃc in bursts. The
second mechanism allows to adapt the transmission rate of a device based on
the sensed traﬃc conditions. Actually, the rate should not considerably impact
QoS performance ﬁgures.
[9] still relies on improved eﬃciency of network equip-
ment by adopting a modular architecture. The work proposes an optimization
policy based on an analytical framework able to reduce power consumption of
a network device with respect to its expected forwarding performance.

Several works also address the reduction of backbone energy consumption
through an adaptation of the network topology according to diﬀerent conditions
of network traﬃc. These approaches try to adapt network capacity in terms of
links and routers. They limit the number of network elements active and reroute
all the traﬃc through a minimum number of nodes and links. In [10] the authors

3

propose an algorithm to deﬁne a minimum set of nodes and links capable to
support a given traﬃc. The approach is then applied to an actual ISP network
topology in [11]. Similarly, in [12] the energy consumption is optimized by
dynamically shutting oﬀ portions of the network and rerouting traﬃc by meeting
demanded traﬃc proﬁles. In [13] an algorithm based on algebraic connectivity
parameters is proposed to identify links to be powered oﬀ while preserving the
overall network connectivity. However, none of these proposals includes time-
dependency in its evaluation.

Additional solutions rely on the insertion of energy awareness in routing
algorithms. The work presented in [14] introduces several equipment energy
proﬁles deﬁned as a function of the energy consumption and the network traﬃc
load. These proﬁles are then kept into account by the routing algorithm to help
route traﬃc in a way that reduces the overall energy consumption of the network.
Not diﬀerently,
[15] suggests an energy aware enhancement of the well-known
routing protocol OSPF (Open Shortest Path First). Rather than computing a
Shortest Path Tree (SPT) for each router in the network, the authors introduce
the concept of “SPT exportation”, where a set of routers, called “exporters”,
forces the use of their SPTs to other routers, called “importers”. The algorithm
can be implemented in a centralized way by limiting the impact on the OSPF.
Our solution falls in the group of dynamic adaptation mechanisms for the
network backbone. In particular, a network topology adaptation approach is
exploited to identify the links that can be switched oﬀ in order to optimize the
overall network resources. Diﬀerently from [10] and [11] our solution is based
on an analytical model that also takes into account the dynamics of traﬃc load.
Similarly to [15] we consider an enhancement of the OSPF protocol, but in
our case a completely distributed and integrated solution is developed. Also,
connectivity parameters are interpreted in a way that is similar to the solution
proposed in [13], but it is now extended to the time-dependent case.

3. Problem Formulation

The problem of dynamic network topology adaptation for energy eﬃciency
can be summarized as follows. Given a physical network topology and the
instantaneous traﬃc demanded, the challenge is to ﬁnd the minimum number
of links which both reduces the power consumption and accommodates traﬃc
requests without exceeding the maximum capacity of the remaining links.

In order to correctly analyze this problem an Integer Linear Programming
(ILP) formulation has been provided. Let G = (V, E) be a graph with the vertex
set V and edge set E. Such a graph represents a network topology with N = |V |
nodes and L = |E| links. Let uij be the maximum capacity of the link (i, j)
between node i and node j, and let α ∈ [0, 1] be the maximum link utilization
tolerated. Let W = {wsd} be the set of traﬃc demands, where wsd is the
amount of traﬃc going from the source s to the destination d, with s, d = 1...N .
Furthermore, we consider cij to be the routing cost related to the link (i, j).

Let xij ∈ {0, 1} be an integer variable that is 1 when the link (i, j) is powered
ij be the distribution decision variable indicating

on and 0 otherwise, and let ysd

4

the amount of demanded traﬃc between s and d allocated on link (i, j).

Finally, let Pij be the power consumed by link (i, j) when it is switched on.
Based on the previous assumptions, the optimization problem described above
can be formulated as follows:

subject to

min

N
(cid:88)

i,j=1

Pijxij +

N
(cid:88)

N
(cid:88)

s,d=1

i,j=1

cijysd
ij

N
(cid:88)

j=1

ysd
ij −

N
(cid:88)

j=1

N
(cid:88)

ysd
ji =




wsd
ij
−wsd
ij

0

∀s, d, i = s
∀s, d, i = d
∀s, d, i (cid:54)= s, d

ysd
ij ≤ αuijxij ∀i, j

s,d=1

ij ∈ [0, wsd
ysd

ij ] ∀i, j, s, d

xij ∈ {0, 1} ∀i, j

(1)

(2)

(3)

(4)

(5)

The formulation represents a typical Capacitated Multicommodity Network
Design (CMND) problem, widely adopted in transportation, logistics and telecom-
munications. Given a network with limited capacity, the ﬁnal objective of such
a problem is to select the links to include in the ﬁnal version of the network
in order to minimize the total system cost, computed as the sum of a cost due
to the link utilization and a routing cost, while the demanded commodities are
transported by the network.

In our formulation the cost due to the link utilization is the power consumed
In the objective function (1) the ﬁrst term represents the total
by the link.
power consumed by the network with a speciﬁc link conﬁguration {xij}, while
the second term represents the total cost for routing the demanded traﬃc along
speciﬁc paths. Equation (2) represents the ﬂow conservation constraint, while
equation (3) limits the total traﬃc allocated on an active link at α times its
maximum capacity.

In our work we consider that the traﬃc from source to destination can be
routed on a single path according to the most common IGPs (Interior Gateway
Protocols). For this reason we assume that the amount of traﬃc ysd
ij from node
s to node d allocated on link (i, j) can be either 0 or wsd
ij depending on whether
or not link (i, j) belongs to the selected path between source and destination.
Clearly, from equation (3), ysd
ij = 0 when xij = 0.

A similar formulation has already been adopted in [10]. Unfortunately this
model neglects the time-dependent properties of the demanded traﬃc.
In a
real application, indeed, the traﬃc pattern can vary signiﬁcantly over time. By
using the average value of the traﬃc only a suboptimal optimization can be

5

achieved. A proper conﬁguration of the network in accordance with demanded
traﬃc should be provided in order to increase the saved energy. Furthermore the
network could be unable to support unexpected peaks of traﬃc, hence increasing
the possibility of losing packets.

Based on the above considerations, a time-dependent reformulation of the
problem should be provided in order to also take into account the dynamics
of traﬃc generation in the optimization process. Let us assume that the graph
G = (V, E, T ) represents a network with |V | nodes, |E| links, and a time horizon
T . We suppose that an instantaneous traﬃc wsd(t) is demanded by each pair
of source and destination nodes (s, d) in the interval [0, T ].

The time-continuous formulation of the problem becomes

min

N
(cid:88)

i,j=1

Pij

(cid:90) t2

t1

xij(t)dt +

N
(cid:88)

N
(cid:88)

s,d=1

i,j=1

cij

(cid:90) t2

t1

ysd
ij (t)dt

∀t1, t2 ∈ [0, T ], subject to

N
(cid:88)

(cid:90) t2

j=1

t1

ysd
ij (t)dt −

N
(cid:88)

(cid:90) t2

j=1

t1

ji (t)dt = ˆwsd
ysd
ij

where

ˆwsd

ij =






wsd

(cid:82) t2
t1
− (cid:82) t2
t1
0

ij (t)dt
wsd

∀s, d, i = s ∀t1, t2 ∈ [0, T ]
ij (t)dt ∀s, d, i = d ∀t1, t2 ∈ [0, T ]

∀s, d, i (cid:54)= s, d ∀t1, t2 ∈ [0, T ]

N
(cid:88)

N
(cid:88)

s=1

d=1

ysd
ij (t) ≤ αuijxij(t) ∀i, j ∀t ∈ [0, T ]

ij (t) ∈ [0, wsd
ysd

ij (t)] ∀i, j, s, d ∀t ∈ [0, T ]

xij(t) ∈ {0, 1} ∀i, j ∀t ∈ [0, T ]

(6)

(7)

(8)

(9)

(10)

(11)

The discrete-time formulation of the problem derives from the continuous-
and ∀t1, t2 ∈ [0, T ]

time model by replacing in equations (6)–(11) (cid:82) t2
t1
with ∀t1, t2 ∈ K = {1, 2, ...T − 1}.

with (cid:80)t2
t1

The problem of “ﬂow over time” was ﬁrst introduced by Ford and Fulker-
son [16]. It usually concerns the problem of maximum ﬂow in the presence of
a ﬁnite link traversal time. Recently, this problem has been also extended to
Dynamic Generative Network Flow (DGNF) problems where, in spite of the
previous formulation, ﬂows are generated and absorbed at source and destina-
tion dynamically over time, while transmission time is instantaneous [17]. A
common approach to solve time-dependent network ﬂow problems, including
the CMND problem, is to transform them into static problems by using an
auxiliary time expanded network GT (V T , ET ) [16] [18] [19]. Such an approach

6

requires a discrete-time formulation of the problem for every period of length
T . Given a dynamic graph G(V, E, T ) the time-expanded network GT (V T , ET )
is deﬁned as follows:

V T = {vt|v ∈ V, t ∈ K}
ET = {(i, j)t|(i, j) ∈ E, t ∈ K}
for st, dt ∈ V T
wsd

t = wsd(t)

(12)

(13)

(14)

The graph GT represents a network with |V T | = N ·T nodes and |ET | = L·T
links. Given a source s and a destination d in the graph G, the time-expanded
graph GT contains T sources s0, s1, ...sT −1 and T destinations d0, d1, ...dT −1.
Our optimization problem can actually be reformulated as follows:

(cid:88)

min





N
(cid:88)

Pijxt

ij +

N
(cid:88)

N
(cid:88)





t

cijysd
ij

t∈K

i,j=1

s,d=1

i,j=1

(15)

subject to

N
(cid:88)

j=1

t

ysd
ij

−

N
(cid:88)

j=1

t

ysd
ji

=






t

wsd
ij
−wsd
ij
0

t

∀st, dt, i = st
∀st, dt, i = dt
∀st, dt, i (cid:54)= st, dt

t ∈ K

(16)

N
(cid:88)

s,d=1

t

ysd
ij

≤ αuijxt

ij ∀(i, j)t, st, dt

t ∈ K

t

ysd
ij

∈ [0, wsd
ij

t

] ∀(i, j)t, st, dt

t ∈ K

ij ∈ {0, 1} ∀(i, j)t
xt

t ∈ K

xt
ij = xij(t)

for

(i, j)t ∈ ET

t

ysd
ij

= ysd

ij (t)

for

(i, j)t ∈ ET st, dt ∈ V T

with

(17)

(18)

(19)

(20)

(21)

Although the time expanded network simpliﬁes the resolution of a dynamic
CMND problem, it is still an NP-hard problem and exact methods can be
adopted just for solving trivial cases. In this paper we propose a heuristic for
the dynamic optimization of network resources according to demanded traﬃc.
From equation (15) the following assumptions for the algorithm design can
be made: (i) for each discrete time t a suboptimal solution which accommodates
the requested traﬃc {wsd(t)} can be identiﬁed; (ii) no optimization is needed in
the presence of negligible changes in the demanded traﬃc (i.e. wsd(t1) ≈ wsd(t2)
for t1 ≤ t2); (iii) only signiﬁcant modiﬁcations in the traﬃc dynamics should

7

require a new network design optimization; (iv) a suboptimal solution can still be
identiﬁed if we separately consider the optimization of the total power consumed
by the network (i.e. the ﬁrst term in the sum) and the routing cost (i.e. the
second term in the sum).

The proposed algorithm includes all the mentioned features. In particular, it
extends a well known routing algorithm, the OSPF (Open Shortest Path First),
with a mechanism for reducing the number of active links. In this way we can
optimize both the power consumption (through our new mechanism) and the
routing cost (through the OSPF itself). Furthermore, activation and deacti-
vation of the links, as well as standard routing operations, are only triggered
when the traﬃc changes signiﬁcantly. In the following section we will detail our
solution.

4. A “Green” OSPF

Our basic idea concerns the deﬁnition of an algorithm capable of adapting
the network topology to the traﬃc proﬁle to be supported, while minimizing
the overall network utilization level. Indeed, the traﬃc can signiﬁcantly change
during the day, so an optimal conﬁguration can only be achieved through dy-
namic adaptation of the network resources. Variations in the traﬃc proﬁle
should actually trigger a new conﬁguration of the network topology. Traﬃc in-
creases require a change in the network conﬁguration in order to be eﬀectively
put through. Similarly, when the traﬃc decreases, a more eﬃcient conﬁguration
of the active links should be considered. The new topology is then used by a
routing algorithm to optimize routing costs.

From a formal point of view, the optimal graph G(cid:48) should vary over time

between the full graph and a minimum graph as follows:

Gmin(V, Emin) ⊆ G(cid:48)(t)(V, E(cid:48)(t)) ⊆ G(V, E)

where

Emin ⊆ E(cid:48)(t) ⊆ E

(22)

(23)

A minimum graph is introduced in order to guarantee network connectivity

at all times.

Topology adaptation is realized through link cutting and link grafting mech-
anisms. The main idea is to cut only underloaded links: we assume that the
traﬃc transmitted across such links can be supported by other links in the net-
work. To this purpose, two important issues have to be taken into account: (i)
no link cutting should disconnect the network; (ii) cutting should not involve
the links with high capacity. Every node in the network must in fact be reach-
able all the time. For the second issue, the system should start to cut the links
with lower capacity values in order to allow the reallocation of the traﬃc on
other links. Whenever a link becomes overloaded, instead, link grafting takes
place: new links are iteratively added to the topology until the network becomes

8

capable to support the required traﬃc demand. A proper mechanism for the
selection of the links to be included in the topology has been realized.

Actually, topology adaptation does not optimize also the routing cost. In
our solution this aspect is delegated to the well-known OSPF routing algorithm.
Such an approach, which reﬂects the idea to separate topology from routing
optimization, allows: (i) to neglect all the issues related to routing by exploiting
an existing (and eﬀective) routing protocol; (ii) to propose a feasible solution
for energy eﬃciency by just slightly modifying a widely adopted protocol; (iii)
to realize a completely distributed topology management scheme by exploiting
the advertisement mechanism of the underlying routing protocol.

Therefore, every time a traﬃc variation requires a topology change the con-
trol messages of OSPF are used to inform all nodes about the need to redeﬁne
the network topology. The new network topology is then used by the Dijkstra’s
algorithm to compute the new paths.

In the following of this section we will ﬁrst provide some background infor-
mation about standard operation of the OSPF protocol; then, we will delve into
the details of our proposal for an energy-eﬃcient version of OSPF.

4.1. The OSPF protocol: a quick overview

Open Shortest Path First (OSPF) is a routing protocol for IP-based net-
works. It falls into the category of the so-called interior routing protocols, since
it operates within the boundaries of a single autonomous system (AS). It relies
on a link state routing algorithm through which it gathers link state information
from available routers and constructs a topology map of the network. Such a
map is referred to as the Link State Database (LSDB). Each participating router
has an identical database and each individual piece of this database is a par-
ticular router’s local state, namely the router’s usable interfaces and reachable
neighbors. The router distributes its local state throughout the Autonomous
System by ﬂooding ad hoc messaged known as Link State Advertisements (LSA).
All routers run the exact same algorithm, in parallel. Starting from the con-
structed LSDB, each router builds a tree of shortest paths with itself as root.
This shortest-path tree is based on Dijkstra’s shortest path algorithm and gives
the route to each destination in the Autonomous System. The OSPF routing
policies for constructing a route table are governed by link cost factors associ-
ated with each routing interface. Cost factors are typically expressed as simple
unit-less numbers and may depend on the distance (e.g., round-trip time) of a
router, on data throughput of a link, or on properties like link availability and
reliability.

4.2. Designing the G-OSPF protocol

First of all we suppose that for every interface of the network nodes three
operational states exist: (i) active, when the interface processes packets, (ii) idle,
when the interface is powered on but no packets are processed, and (iii) sleep,
when the interface is in low energy conﬁguration and no data are elaborated.

Given an interval T , the interface can switch among the three states respec-

tively for an activation time Tac, an idle time Tid, and a sleeping time Tsl.

9

Based on this assumption we adopted the following energy model for the

network interface i:

Ei = Pa ∗ Tac + Pi ∗ Tid + Ps ∗ Tsl + Ec ∗ C

(24)

where Pa is the power consumed by the interface in active state and is a
function of the managed traﬃc, Pi is the power consumed in idle state, Ps is
the power consumed in sleeping mode, Ec is the energy consumed to make the
transition from a sleep state to an idle state, and ﬁnally C is a counter that
keeps track of the number of switches.

In our algorithm every node computes a Maximum Capacity Spanning Tree
(MCST) through the well-known Kruskal’s algorithm [20]. Such an algorithm
actually allows for the computation of a Minimum Spanning Tree (MST). In our
case, the MST becomes a MCST due to the fact that we assign each link a cost
that is proportional to the inverse of its capacity (i.e., the higher the capacity
of the link, the lower its cost).

The MCST allows to minimize the number of links (equal to |V | − 1), to
maximize the network capacity, and to keep the network always connected.
Therefore it guarantees the reachability of all the network nodes, as well as the
allocation of the maximum traﬃc load on the minimum number of links.

During the selection of the links to be put in sleep mode, only the edges that
don’t belong to the MCST can be cut oﬀ. This guarantees both the connectivity
of the network and the possibility to switch oﬀ the highest number of links.
Thanks to the global view of the network oﬀered by the OSPF protocol, the
MCST computed at the single node is the same as the one computed at any
other node in the network.

The set of nodes in the topology which have to be conﬁgured in sleep mode
is then computed. A link is active if both the interfaces it connects are active.
In order to disable a link both its edges must be disabled. The utilization rate of
the interfaces is the key feature we rely upon in order to decide whether or not
to switch network nodes from an active state to a sleep state (and viceversa).
Such an indicator is computed as the ratio between the activity time Tac and
the total time T .

Ur = Tac
T

Tac = bT
br

where bT is the total number of elaborated (i.e., either transmitted or re-
ceived) bits, and br is the traﬃc rate (both incoming and outgoing) expressed
in bits per second.

Each node periodically controls the percentage of utilization of its interfaces.
Two thresholds have been deﬁned in order to evaluate interface utilization: an
upper threshold, that we call γu, and a lower threshold, indicated with γl.

These two values indicate the interval in which the utilization rate Ur must
be included in order to be considered acceptable. If Ur > γu then the interface
is overutilized and the node starts the link grafting process. On the other hand,

10

Fig. 1: Graft Algorithm

if Ur < γl the interface is underutilized and, provided that no other interface is
overutilized, the node starts the link cutting process.

During the link cutting process all nodes perform the following actions:

• they switch to sleep state all interfaces if they do not belong to the MCST;

• they notify such an event to the other routers in the network.

The other interface connected to the link in question is also switched oﬀ as
soon as the peering node receives the related notiﬁcation. The notiﬁcation is
done by extending the OSPF advertisement messages with a new Link State
Cut Update Packet (LSCUP) that is sent to the other nodes in the network,
and which contains the ID of the link to be put in sleep mode.

Each node receiving the LSCUP operates as follows:

• if the link is associated with one of its interfaces, the interface in question

is put into sleep state;

• the LSCUP is broadcast to the other nodes.

In the link grafting process, instead, when a node detects an overload situ-

ation on one of its interfaces, it operates as follows:

1. it notiﬁes the overload to the other nodes in the network;
2. it restores the available links.

The link to restore is identiﬁed based on a matrix that each node maintains
and which contains the links that have been previously switched oﬀ. The edges
which are closest to the overloaded link are hence restored. In particular, all

11

the links at 0 hop distance from the congested node are ﬁrst activated and a
notiﬁcation is sent to the other nodes. If the link is still congested, then all the
links at 1 hop distance are switched on, and so on until no more congested link
is present in the network.

The mentioned operations are carried out by every node receiving the noti-
ﬁcation, but only those nodes which are connected to restored links physically
switch on their interfaces.

To avoid overheads, as well as oscillations of the active links, a restored
link cannot be switched oﬀ again for the entire duration of a safeguarding time
interval. The notiﬁcation is done by sending a Link State Graft Update Packet
(LSGUP), which contains information about the links to be restored. The node
that receives the LSGUP forwards the packet to its peering nodes, and starts
the link restoring process, if needed.

In Fig.1 an example of the grafting process is reported. In particular, let us
consider the original network topology associated with the graph in Fig.1(a). If
no initial traﬃc ﬂows across such a network, the Cut phase cuts all links that
don’t belong to the MCST that is shown in Fig.1(b). After a while, two traﬃc
ﬂows are transmitted: the former from node D to node C, the latter from node
F to node A. We also make the hypothesis that the aggregated throughput of
these two ﬂows causes an overload on link B − C (Fig.1(c)). This forces either
node B or node C (or even both) to start the Graft phase. The node in question
restores all the links belonging to the above mentioned switched-oﬀ links matrix
(those in the ﬁrst not empty row), as we can see in Fig.1(d). Finally, since the
link B-F is not used, either B or F cuts it. Eventually, the updated graph will
look like the one in Fig.1(e). Link C − A has been added to the original tree
and it will be used in order to carry the traﬃc originating in F and addressed
to A (along the newly created path F − C − A). With this new conﬁguration,
the link B − C is not overloaded anymore.

5. Performance Evaluation

The GOSPF protocol has been studied both in simulation and through a
real-world implementation.
In this section we focus on the former approach.
The algorithm proposed has been actually implemented as an extension of the
OSPF routing module available in the ns-3 network simulator1. An exhaustive
simulation campaign has been carried out in order to assess both the feasibility
and the correctness of our solution, as well as to evaluate its performance in
terms of energy saving and supported traﬃc demand.

In order to implement a realistic scenario we considered for our experiments
the GARR-G backbone2 (Fig. 2(a)), the Italian Research and Education Net-
work. From an implementation point of view, the mentioned infrastructure has

1http://www.nsnam.org/
2http://www.garr.it/b/eng

12

(a) GARR-G Backbone

(b) GARR-G Topology

Fig. 2: The GARR research network

been replicated in the ns3 simulator according to the topology conﬁguration
depicted in Fig. 2(b).

We have considered realistic traﬃc proﬁles in order to better evaluate the
performance of the algorithm. In particular, we have implemented traﬃc pat-
terns emulating real traﬃc on the GARR network. Both daily and weekly traﬃc
proﬁles have been considered. A typical daily traﬃc proﬁle from GARR is shown
in Fig. 3(a). This represents the throughput, during a day, of the link between
PoP Mi3 and PoP Mi2 (both located in Milan). We can see that the throughput
reaches its maximum at 12 a.m., while it decreases during night. The average
link utilization is about 40%. Fig. 3(b), instead, shows the weekly throughput
on the same link. We can see that the amount of traﬃc decreases over the
weekend. All the other links in the network have a similar traﬃc proﬁle.

We tested our algorithm with three diﬀerent types of traﬃc: UDP, TCP,

and mixed traﬃc.

5.1. UDP Traﬃc

We created a traﬃc proﬁle as close as possible to the real one by considering
seventeen traﬃc ﬂows that are distributed in the network in such a way as to
cover most links. The ﬂows increase their bitrate over time, until they reach
the maximum between 12 a.m. and 3 p.m., while they decrease after midnight
(see Fig. 4(a)). For these simulations we have set Pa = 1, Pi = 0.8, Ps = 0.016,
γu = 20%, and γl = 80%.

With respect to the above mentioned point, the energy model proposed
in equation (24) has been implemented in ns3. This required us to modify

13

CaptionOptical FiberDecember 2010(a) Daily Traﬃc

(b) Weekly Traﬃc

Fig. 3: Real GARR Traﬃc Proﬁle

three classes: (i) PointToPointNetDevice, which models a generic point-to-
point device or serial link; (ii) Node, representing a node in the network; (iii)
Node Container, which, as the name itself suggests, contains all nodes in the
network. Energy consumption in the network is computed by the sum of the
energy consumptions of all interfaces. To compute this last item, a new member
function, called GetDEnergy , has been added to the PointToPointNetDevice
class. The Node class has in turn been modiﬁed with the insertion of a
Node::GetEnergy method which allows to compute the sum of the energy con-
sumptions of the PointToPointNetDevice objects associated with it. In the
same way, the overall energy consumption is obtained via the newly created
NodeContainer::GetTotalEnergy method of the NodeContainer class, which
basically provides the sum of the previously mentioned values for each node.

5.1.1. Number of Active UDP Links

Fig. 4(b) shows the number of active links over time. We can see that until
12 a.m. the number of active links is constant and equal to 47. Such a value
represents the minimum number of links to ensure connectivity, and is in fact
In this phase the network topology is represented by the
equal to |V | − 1.
MCST shown in Fig. 5. At 12 a.m. the number of active links has a peak. In
fact the overall throughput has become too high and the MCST is not able to
support it anymore. The peak triggers the graft process which restores all links
located at one hop distance from overloaded links. The subsequent checks on
the utilization rate show that some links are actually used while others are not.
Between 12 a.m. and 3 p.m. the number of active links is 54; such number then
becomes 48 and, eventually, falls back again to 47. We can appreciate an abrupt

14

(a) Network throughput

(b) Number of active links

(c) Power consumption

(d) Protocol overhead

Fig. 4: Testing GoSPF with UDP

initial decrease in the number of active links. Indeed, in the beginning all links
are active and the overall network throughput is very low; consequently, when
the algorithm starts, it cuts all links that do not belong to the MCST.

5.1.2. UDP Energy Consumption

The results show, with the traﬃc proﬁle depicted in Fig. 4(a), a total energy
saving of about 34, 8%. Fig. 4(c) shows the network power consumption over
time, which can be justiﬁed through a comparison with Fig. 4(b) (showing the
number of active links). Initially, power consumption is similar to the case in
which our algorithm is not employed, since all links are active. As we can see
from the comparison between these two ﬁgures and Fig. 4(a), energy consump-
tion increases its value as long as both the traﬃc and the number of active links
increase. In fact, the percentage of energy saved decreases until it reaches its
minimum between 12 a.m. and 3 p.m.; after this interval it increases again.
Note that both the number of active links and the energy consumption depend
on the speciﬁc features of the network traﬃc transported across the network.

15

Fig. 5: Minimum GARR-G Topology

5.1.3. Other Parameters

We also consider packet losses, as well as the overhead introduced by our
algorithm. For the UDP daily traﬃc case, packet losses do not increase with
respect to the value obtained by simulation in the absence of our algorithm.
With respect to the overhead induced by our algorithm, we observe that graft
and cut update packets represent about 0, 8% of the overall network traﬃc.
Initially we can note the highest peak due to the high number of cuts. Flooding
of these packets causes also an increase in power consumption; in fact from the
comparison between Fig. 4(c) and Fig. 4(d), we can note that when overhead
packets reach their peak value, due to grafting and cutting operations, the
energy saved decreases accordingly.

Table 1: Daily UDP Traﬃc Test

–
Total Energy Consumption
Average Number of Active Links
Packet Loss
Overhead%

Green OSPF OSPF
2035.94 J
48.517
0%
0.810%

3121.38 J
78
0%
0%

16

5.2. TCP Traﬃc

The traﬃc proﬁle adopted with TCP is similar to the one we considered in
the UDP case. Also the values of the variables Pa, Pi, Ps, γu and γl are the
same as in the UDP traﬃc test.

(a) Total network throughput

(b) Number of active links

(c) Power consumption

Fig. 6: Testing GoSPF with TCP

We can see in Fig. 6(a) that there are some traﬃc peaks due to the establish-
ment of new TCP connections. The graph in Fig. 6(b) shows the daily number
of active links in the network. We can note the diﬀerence between the UDP and
TCP traﬃc cases. Initially, the number of active links grows and shows three
peaks corresponding to those that occur in Fig 6(a). In fact, the spikes in the
network throughput, due to new TCP connections, produce sudden increases in
the utilization rate of some links that in turn trigger grafting operations. We
also remark that the links which are powered on between 9 a.m. and 12 a.m. are
in this case 50 (against 47 as in the UDP case) because the grafting operation
restores some links whose utilization level is above the threshold value of 20%.
Coming to energy consumption, the results show an overall energy saving of
about 34, 2%. With respect to the UDP case, we can note a slight decrease of
this value, due to the higher number of active links, as well as supported traﬃc.

17

We ﬁnally remark how packet losses increase in the TCP case, moving from
0.020% to 0.026%. The same holds true for overhead packets, whose percentage
increases (with respect to the UDP case) from 0, 80% to 0, 84% of the useful
traﬃc.

Table 2: Daily TCP Traﬃc Test

–
Total Energy Consumption
Average Number of Active Links
Packet Loss
Overhead%

Green OSPF OSPF
2063.86 J
49.250
0.026%
0.844%

3138.44 J
78
0.020%
0%

5.3. Mixed TCP and UDP Traﬃc

(a) Power consumption

(b) % of overhead packets

Fig. 7: Testing GoSPF with a mixed traﬃc proﬁle

We ﬁnally consider a daily traﬃc composed of both TCP and UDP ﬂows.
The values of the variables Pa, Pi ,Ps, γu, γl and Tsample are the same as those
we adopted for the other tests. The number of active links during time is very
similar to the UDP traﬃc test. The energy consumed (see Fig. 7(a)) is 34, 5% of
the overall network energy consumption in the absence of our algorithm. There
is an increase in packet losses between the case when our algorithm is activated
and the case when it is switched oﬀ; losses go from 0.010% to 0.015%. The
percentage of overhead packets over useful traﬃc (Fig. 7(b)) is about 0.44%,
which is lower than that observed in the TCP test.

Table 4 summarizes the above discussed results and helps the reader make

a comparison between the three scenarios we have so far analyzed.

From an analysis of the data in the table, we can draw some interesting con-
siderations. First, it looks clear that GOSPF outperforms OSPF in all of the
considered traﬃc scenarios. Indeed, at the price of an almost negligible over-
head, GOSPF allows us to obtain substantial gains in terms of energy eﬃciency.

18

Table 3: Daily UDP and TCP Traﬃc Test

–
Total Energy Consumption
Average Number of Active Links
Packet Loss
Overhead%

Green OSPF OSPF
2054.05 J
48.650
0.015%
0.442%

3135.7 J
78
0.010%
0%

Furthermore, it is worth to remark the impact that the transport-layer protocol
can have on the overall ‘energy performance’ of the network. The diﬀerences
between the TCP and UDP traﬃc cases can in fact be appreciated in all of the
trials we conducted. Such a diﬀerence can be ascribed to the transport-layer
overhead induced by TCP, which is particularly relevant at connection setup
time (i.e., when TCP performs the initial three-way handshake). TCP signal-
ing overhead happens to produce non-negligible increases in the utilization rate
of some links that in turn trigger grafting operations, with the ﬁnal result of
keeping active a higher number of links than those needed in the UDP case.

Table 4: Comparison Between Daily UDP, TCP ,UDP and TCP Traﬃc Test

–

UDP
Traﬃc

34,8%

48.517

Total En-
ergy Sav-
ing
Average
Number
of Active
Links
Packet
Loss
Overhead% 0.810%

0%

TCP
Traﬃc

34,2%

UDP
and TCP
Traﬃc
34,5%

49.250

48.650

0.026%

0.015 %

0.844%

0.442%

5.4. UDP Traﬃc Test with a higher sampling frequency

The sampling period is an important parameter which the performance of
our algorithm depends upon.
In the following we show the results that we
obtain in the case of a higher sampling frequency, namely Tsample = 0.02s,
considering both a daily UDP traﬃc and a daily mixed traﬃc. The ﬁrst graph
(Fig.8(a)) shows the number of active links, while Fig.8(b) shows the network
power consumption. These are similar to Fig. 4(c) and Fig. 4(b), representing,
respectively, the power consumption and the number of links that are powered
on with Tsample = 0.2s. From Table 5 we observe, for the mixed traﬃc case,
a clear increase in the number of overhead packets, reaching 2% of the useful
traﬃc. In this scenario there is also an increase in packet losses, which pass from

19

(a) Number of active links

(b) Power consumption

Fig. 8: UDP test with a smaller sampling period

0.015% to 0.096%. The increase in the number of overhead packets is caused by
a greater number of check operations at the nodes and hence a greater number
of cuts or grafts. We can imagine that with a smaller Tsample a node detects
sooner the overload of an interface; though, the higher number of overhead
packets, with the unavoidable increase of throughput in the network, has the
side-eﬀect of increasing packet losses.

Energy saving with Tsample = 0.02s is about 35, 06%, which is slightly higher
than the value obtained with Tsample = 0.2s (see Table 6). We have this result
because a node realizes faster that an interface is underutilized. Moreover, from
the comparison between Fig. 8(a) and Fig. 4(b) we can see a higher peak at 12
a.m.: since Tsample represents the time interval over which the activity time Tac
is averaged, a smaller sample time causes a lower immunity to sudden spikes.
In particular at 12 a.m. there is a ﬂooding of Graft and Cut Update Packets
that leads to a peak of the utilization rate Urate on some links.

Table 5: Daily UDP and TCP traﬃc tests with two diﬀerent sampling periods

Tsample = 0, 2s
–
Packet Loss
0.015 %
Overhead% 0.442%

Tsample = 0, 02s
0.096 %
2,012 %

Table 6: Daily UDP traﬃc tests with two diﬀerent sampling periods

–
Total Energy Saving
Average Number of Active Links

Tsample = 0, 2s
34,8%
48.517

Tsample = 0, 02s
35,06%
48.236

5.5. UDP Weekly Traﬃc Test

A weekly UDP traﬃc is shown in Fig. 9(a) where we can note the same trend
as in Fig. 4(a) except for weekends. The number of active links (Fig. 9(b)) is set

20

(a) Network throughput

(b) Active links

(c) Power consumption

Fig. 9: Testing GoSPF with a weekly UDP traﬃc proﬁle

at its minimum during this period. Once again, we can note that the results that
we obtain with this test don’t change from the daily test, except for weekends,
when energy consumption (see Fig. 9(c)) decreases. In particular, energy saving
goes from 34, 8%, with a daily traﬃc, to 35, 5% with the weekly traﬃc test.

6. G-OSPF Implementation

We also provided a real implementation of the proposed solution within the
popular Quagga routing suite [21]. Quagga is an open source package of TCP/IP
routing protocols for Unix-like platforms. It supports RIPv1, RIPv2, RIPng,
OSPFv2, OSPFv3, BGP-4, and BGP-4+. A command line interface, as well
as SNMP (Simple Network Management Protocol) support, make a punctual
service conﬁguration and monitoring available. Diﬀerently from other similar
packages, Quagga relies on a scalable two-tier architecture where a supervisor
daemon, namely zebra, manages specialized routing daemons, one for each sup-
ported protocol. Zebra is responsible for interacting with the operating system’s
routing tables, thus relieving the protocol daemons from the burden of directly

21

accessing and modifying them. The energy eﬃcient algorithm, which we called
gospf, is included in Quagga as an extension to the existing OSPF daemon3.

6.1. The gospf daemon in Quagga

This section delves into GOSPF (Green OSPF) implementation details. First
of all, we higlight the Quagga modules that are subject to modiﬁcations. As
described above, any protocol daemon in Quagga makes use of the zebra daemon
to modify routing tables. Protocol daemons rely on a management system based
on threads and which leverages the select function. Thus, Quagga daemon
threads are enqueued and executed in a sequential way. Four types of threads
are available, namely Timed, Read, Write, and Event threads. Read and Write
threads have a higher priority than Event threads, which in turn have higher
priority than the Timed ones.

To get information like network interfaces status or their actual conﬁgura-
tion, a zclient structure is initialized in the zebra daemon. Two lists available
in the Quagga library, namely preﬁx and radix tree, also allow for the storage of
important information concerning the daemon protocol execution. Relevant IP
address information, for instance, is stored in a preﬁx element. Routing tables
are instead stored in a radix tree list. One further component of the ospf dae-
mon is the so called ospf area data structure, that is a container of information
like the link state database and the list of active interfaces.

The implementation of gospf can be seen as an extension to the ospf protocol
daemon. To the purpose, a new structure is included in the ospf area structure
to keep track of the Maximum Capacity Spanning Tree (MCST). Each such
tree contains a distance table list, a mcst tree structure, the interfaces radix
tree list, a generic thread pointer, a further pointer to a speciﬁc thread dedi-
cated to MCST computation (check mcst thread ) and ﬁnally a reset notiﬁcation
handler. The distance table is a list of all the networks that are active in a spe-
ciﬁc area, ordered by their cost. The mcst tree contains a table of the routers,
with all their interfaces, available in the area. The data provided by these struc-
tures enable the daemon to make decisions during the ‘graft’ procedure and then
select the interfaces that can be disabled, as well as those that must be kept ac-
tive. The status of each interface can be set as MCST TREE, if part of the MCST,
MCST UNCUT, if active but out of the MCST, MCST CUT when disabled after a
‘cut’ procedure, and MCST GRAFT to identify an interface to be kept active dur-
ing a speciﬁed time interval. Additional structures are dedicated to the MCST
creation through the execution of Kruskal’s algorithm (see Section 4). MCST
creation is not executed at daemon start-up time; it is rather scheduled after
a suﬃcient number of Link State Advertisement (LSA) messages has been ex-
changed, which allows a node to gather enough information about its neighbors.
Finally, several functions have been added to manage the core of the gospf pro-
tocol. For instance, a check interface bandwidth function is responsible to verify

3Our code is obviously open source and is available for download at the following URL:

http://wpage.unina.it/spromano/gospf/Gquagga.tar.gz

22

if the energy consumption level of a speciﬁc interface is above a pre-deﬁned
threshold, and then proceed with a either a cut interface or a restore interface
operation. A check interface area timer activates a clock to periodically check
the status of the interfaces, and some other dedicated functions are responsible
for the generation of the newly deﬁned OSPF GRAFT packets.

6.2. gospf functional testing

Fig. 10: Experimental emulated network topology

The actual gospf implemetation has been tested on an emulated network.
Several Linux nodes, equipped with our enhanced version of Quagga, have been
created through the Qemu4 emulation environment. The experimental network
topology is presented in Fig.10.

Both point-to-point and non broadcast multi access links are included in this
topology, all of them based on ethernet connections. We deliberately reproduced
artiﬁcial competing traﬃc ﬂows on certain links to verify the correct interven-
tion of the gospf algorithm. With respect to router conﬁguration, we report a
snapshot of the gospfd daemon conﬁguration ﬁle associated with Router 2 in
Fig. 11. Such a ﬁle is indeed almost identical in all gospf-enabled routers.

During the trials, we inspected the log ﬁles on routers to check whether the
dynamic status of links was compliant to the results expected from the model.
Each experiment starts with creation of the MCST associated with the network.
This is articulated in three steps: (i) creation of a network graph; (ii) MCST

4http://www.qemu.org

23

Fig. 11: gospfd sample conﬁguration ﬁle

computation on the resulting graph; (iii) selection of router interfaces belonging
to the MCST.

The creation of a network graph is achieved through the identiﬁcation of
actual routers and transit networks, labeled respectively as Rn or N n. In this
way, MCST computation can guarantee that both routers and nodes located
beyond networks are reachable. For the experiment in question, the resulting
graph is reported in Fig.12. The computed minimum spanning tree (which, as
mentioned in Section 4, is in our case a Maximum Capacity Spanning Tree) is
represented in green in the picture.

The last step concerns the selection of the relevant interfaces to be assigned
to the MCST. To the purpose, we tested the behavior of the gospfd when some
traﬃc is generated in the network. From the picture, it is clear that all of the
interfaces of router R1 belong to the MCST and hence can never be cut. On the
other hand, router R2 owns three interfaces, just one of which cannot be cut
since it is crucial for keeping nodes reachability across the MCST. More precisely,
while setting up the experiment, the mentioned interfaces were conﬁgured as
follows: (i) eth0 (192.168.1.2/24) has a 5Mbits/s capacity and can be cut oﬀ;
(ii) eth1 (192.168.2.2/24) has a 4Mbits/s capacity and can be cut oﬀ; (iii) eth2
(192.168.4.2/24) has a 12Mbits/s capacity, it is part of the MCST and thus
cannot be cut oﬀ. All of the above considerations are actually conﬁrmed by
Fig. 13, which reports a dump of the execution of a “show ip ospf mcst”
command on R2’s console.

6.2.1. Cutting

In the above scenario, if a 3 Mbit/s constant bit rate traﬃc is generated on
interface eth0, and a lighter 500 Kbit/s ﬂow crosses interface eth1, the gospf
protocol makes the decision to cut eth1 because its utilization is under the
threshold, while keeping eth0 active because its utilization level falls in between

24

Fig. 12: Graph resulting form MCST computation

Fig. 13: Dumping GOSPF status on R2’s console

its normal usage interval. Hence, a Router LSA is sent to the other routers to
notify them about the updates. Fig. 14(a) shows that eth1 has been deactivated
on R2 (there is no IP address assigned to it and it is ﬂagged as ‘Cut’) due to the
cutting procedure operated by gospfd. Similarly, Fig. 14(b) oﬀers a view of the
LSA database on router R1, which clearly demonstrates how ospfd has spread
the cutting news to the other routers in the network (‘Link cut’ section on the
bottom of the picture).

25

(a) Interfaces conﬁguration on R2

(b) LSA database on R1

Fig. 14: GOSPF cutting eﬀects on routers’ conﬁgurations

6.2.2. Grafting

Fig. 15: G-OSPF reaction to congestion

We then evaluate the opposite situation, that is gospfd ’s reaction to a con-
gestion state. We start with the assumption that all of the interfaces not per-
taining to the MCST are disabled. Now, two new traﬃc ﬂows are injected into
the network: the former is a 3Mbit/s constant bit rate from host H9 belong-
ing to network 192.168.9.240/24 (network N9) to host H2 belonging to net-
work 192.168.2.240/24 (network N2); the latter is a 6Mbit/s constant bit rate
from host H7 on network 192.168.7.240/24 (network N7) to host H5 on network

26

192.168.5.240/24 (network N5). In the depicted scenario, network N7 will be
crossed by a 9Mbit/s aggregated traﬃc which will cause congestion on the link
N7-R3 (whose capacity is 10Mbit/s) highlighted in red in Fig. 15(a).

According to the GOSPF protocol, this causes a GRAFT request. The ﬁrst
action is thus to awake all of the local interfaces, which in this case produces
the reactivation of the link between router R3 and router R1 (Fig. 15(b)). As
this does not solve the congestion situation, a new GRAFT request is solicited,
this time pointed towards other routers in the network (since R3 has no more
interfaces in the ‘Cut’ state). Rather than ﬂooding this request, R3 ﬁrst checks
its local information in search of routers or networks, ordered by distance, hav-
ing interfaces in a ‘Cut’ state. As network 192.168.6.0/30 has interfaces forced
to be down, the GRAFT request is sent towards routers R5 and R6 and asks
for the activation of their disabled interfaces (Fig. 15(c)). Again, this coun-
termeasure turns out to be not eﬀective, and a further GRAFT request is sent
towards routers R2 and R4 to demand for the activation, respectively, of the
interfaces 192.168.2.2/24 and 192.168.2.4 (Fig. 15(d)). This action ﬁnally solves
the congestion problem. However, GOSPF executes a last step to cut oﬀ the
unnecessary interfaces (i.e., those crossed by a low-density traﬃc ﬂow), leading
to the ﬁnal topology depicted in Fig. 15(e).

6.2.3. Resetting GOSPF

(a) Original situation

(b) Link failure

(c) Interface reactivation

(d) New MCST

Fig. 16: GOSPF dealing with a link failure through a RESET operation

27

We ﬁnally illustrate how GOSPF is capable to dynamically react to unpre-
dicted topology modiﬁcations (aﬀecting the MCST) due to link failures. Start-
ing from a steady-state situation as the one depicted in Fig. 16(a), let us assume
that link R5-N5 goes down (which can be easily achieved by forcibly shutting
down one of the interfaces on R5). In this situation (Fig. 16(b)), as soon as a
router initiates the periodically scheduled MCST integrity check task it identiﬁes
an error, hence triggering the reset procedure.

As a result of the above operation, all network interfaces are activated, hence
bringing to the new graph illustrated (in green) in Fig. 16(c). After a while
(as determined by the mcst-reset-timer parameter of GOSPF), a brand new
MCST is computed and conﬁgured on the network, as shown in Fig. 16(d).

7. Security considerations

Given that GOSPF is an interior routing protocol, one might question the
need for securing their routing environment given that their infrastructure is
entirely contained within a single organization and hence somehow isolated
from the outside world. Actually, besides providing an additional layer of de-
fense (which is in-line with the so-called “defense in depth” approach), securing
GOSPF routing enables protection against internal threats, which is something
going beyond what ﬁrewalls, Intrusion Detection Systems and Virtual Private
Networks can do. After all, recent statistics mention up to 70% of information
security threats come from within a network’s perimeters. As any other routing
protocol, GOSPF might indeed be the target of attacks form malicious users
aimed at compromising the correct operation of the network. As an example,
a speciﬁc attack vector might rely on corrupting certain nodes in order to force
them to advertise fake underloaded links, hence inducing GOSPF to cut them
and force a path across enemy-controlled links or nodes.

We also remark that securing GOSPF networks will protect them from not
only malicious attacks, but also accidental misconﬁgurations. The friendly na-
ture of the underlying OSPF protocol dictates that, by default, any router with
coordinated conﬁguration parameters (network mask, hello interval, dead inter-
val, etc.) can participate in a given OSPF network. Because of this default
behavior, any number of accidental factors (misconﬁgurations, test setups, etc.)
can adversely aﬀect routing in an OSPF-based environment.

The ﬁrst step to take in securing GOSPF is to conﬁgure all participating
devices as non-broadcast devices. In non-broadcast, or directed, mode, OSPF
devices need to be explicitly conﬁgured to communicate with valid OSPF neigh-
bors. This provides a basic layer of security against misconﬁguration, because
valid OSPF devices will only communicate with the OSPF devices they have
been conﬁgured to interoperate with. On the other hand, in a broadcast OSPF
environment any OSPF device with the correct conﬁguration parameters for the
network will be able to participate in OSPF routing. On most OSPF-enabled
routers, interfaces use broadcast OSPF by default; though “directed OSPF”
mode can be turned on via explicit router commands.

28

As a second step, to increase the security of a GOSPF environment, OSPF
authentication can be enabled.
Indeed, OSPF authentication can be either
‘none’, ‘simple’ or ‘MD5’. With simple authentication, the password goes in
clear-text over the network. Thus, anyone capable to sniﬀ traﬃc on the OSPF
network segment would be able to retrieve the OSPF password, and the attacker
would be one step closer to compromising the target OSPF environment. With
MD5 authentication, the key does not pass over the network. MD5 is a message-
digest algorithm speciﬁed in RFC1321 and can be considered the most secure
OSPF authentication mode.

With the steps suggested above, a vulnerable dynamic GOSPF-based envi-
ronment gets converted over to directed and MD5 authenticated GOSPF. Of
course, this does not mean that the routing environment has now been turned
into a 100% secure one, but its stealthiness level has deﬁnitely been increased.
One thing to consider regarding the topics discussed thus far, is that the MD5
authentication process does not provide encryption of routing data.
Instead,
it veriﬁes the sending and receiving parties. Thus, an attacker with a sniﬀer
on the wire would still be able to decode routing update packets. Nonethe-
less, injecting false packets and compromising the environment will just be a lot
more diﬃcult. Also, issues can arise when keys are modiﬁed. If one follows best
security practices, GOSPF authentication keys will get regularly replaced.

We ﬁnally remark that a further level of security can be added by leveraging
some form of router trustworthiness information within the GOSPF network.
Namely, if one associates with each router a properly computed (and dynami-
cally updated) trustworthiness level, it becomes possible to not rely on updates
sent by unreliable neighbors, so to avoid malicious modiﬁcations of the Link
State Database causing unwanted cuts of links, as well as switching oﬀ of some
nodes. With respect to this speciﬁc ﬁeld of investigation, our previous work
in [22] describes a generic approach to the computation of the level of trust-
worthiness of a set of distributed yet interoperating nodes. The work in [23]
instead focuses on routing, even though in a wireless networking scenario and
in the presence of a distance-vector based routing protocol.

8. Conclusions

In this paper we presented an OSPF extension aimed at minimizing network
power consumption while at the same time keeping both connectivity and a
satisfactory level of Quality of Service. The solution we devised dynamically
adapts the network topology by switching oﬀ underutilized links of the network.
The distributed algorithm we propose is based on a ‘graft and prune’ strategy
and has been formally speciﬁed with an analytical model taking into account,
among other requirements, traﬃc demand dynamics. A thorough study of the
performance of our proposal, in terms of both energy eﬃciency and induced
overhead, has been conducted through simulations which closely reproduce a
real-world scenario associated with the Italian research network topology and
supported traﬃc patterns. Furthermore, a real-world implementation of the

29

proposed GOSPF protocol has been described and an extensive overview of
typical operational scenarios has been provided.

Among the future directions of work we deﬁnitely see the following main
points. First, a detailed energy consumption model, reliably mimicking the
energy proﬁles of currently deployed network routers, has to be embedded in
our power consumption computations. Second, a dynamically adjustable way
of setting the two main thresholds involved in the execution of our algorithm
(associated, respectively, with the triggering of grafting and pruning operations)
has to be deﬁned. We are already working on this task, which clearly requires to
strike a balance between promptness of reaction (i.e., adaptability to changes in
the supported traﬃc proﬁle) and stability (i.e., capability to avoid oscillations
and route ﬂaps due to the high frequency of adaptation to traﬃc changes).

References

References

[1] M. Gupta and S. Singh, “Greening of the internet,” in Proceedings of the
2003 ACM Conference on Applications, technologies, architectures, and
protocols for computer communications – SIGCOMM’03, 2003, pp. 19–26.

[2] R. Bolla, R. Bruschi, F. Davoli, and F. Cucchietti, “Energy eﬃciency in
the future internet: A survey of existing approaches and trends in energy-
aware ﬁxed network infrastructures,” IEEE Communications Surveys &
Tutorials, vol. 13(2), pp. 223–244, 2011.

[3] C. Gunaratne, K. Christensen, B. Nordman, and S. Suen, “Reducing the
energy consumption of ethernet with adaptive link rate (alr),” IEEE Trans-
actions on Computers, vol. 57, pp. 448–461, 2008.

[4] K. Sabhanatarajan, A. Gordon-Ross, M. Oden, M. Navada, and A. George,
“Smart-nics: Power proxying for reduced power consumption in network
edge devices,” in Proceedings of the 2008 IEEE Computer Society Annual
Symposium on VLSI, 2008, pp. 75–80.

[5] W.-K. Park, C. sic Choi, I. woo Lee, and J. Jang, “Energy eﬃcient multi-
function home gateway in always-on home environment,” IEEE Transac-
tions on Consumer Electronics, vol. 56, no. 1, pp. 106–111, 2010.

[6] M. Baldi and Y. Ofek, “Time for a “greener” internet,” in Proceedings of the
1st International Workshop on Green Communications – GreenComm’09,
2009.

[7] J. Chabarek, J. Sommers, P. Barford, C. Estan, D. Tsiang, and S. Wright,
“Power awareness in network design and routing,” in Proceedings of the 27th
IEEE Conference on Computer Communications - INFOCOM’08, 2008.

30

[8] S. Nedevschi, L. Popa, G. Iannaccone, S. Ratnasamy, and D. Wetherall,
“Reducing network energy consumption via sleeping and rate-adaptation,”
in Proceedings of the 5th USENIX Symposium on Networked Systems De-
sign and Implementation – NSDI’08, 2008, pp. 323–336.

[9] R. Bolla, R. Bruschi, F. Davoli, and A. Ranieri, “Energy-aware performance
optimization for next-generation green network equipment,” in Proceedings
of the 2nd ACM SIGCOMM workshop on Programmable routers for exten-
sible services of tomorrow – PRESTO’09. ACM, 2009, pp. 49–54.

[10] L. Chiaraviglio, M. Mellia, and F. Neri, “Reducing power consumption in
backbone networks,” in Proceedings of IEEE International Conference on
Communications - ICC’09, 2009, pp. 2298–2303.

[11] Chiaraviglio, L. and Mellia, M. and Neri, F., “Energy-aware backbone net-
works: A case study,” in Communications Workshops, 2009. ICC Work-
shops 2009. IEEE International Conference on, june 2009, pp. 1 –5.

[12] R. S. Tucker, J. Baliga, R. Ayre, K. Hinton, and W. V. Sorin, “Energy
consumption in ip networks,” in Proceedings of 34th European Conference
on Optical Communication – ECOC’08.

[13] F. Cuomo, A. Abbagnale, A. Cianfrani, and M. Polverini, “Keeping the
connectivity and saving the energy in the internet,” in Proceedings of IEEE
INFOCOM 2011 Workshop on Green Communications and Networking.

[14] J. C. C. Restrepo, C. G. Gruber, and C. M. Machuca, “Energy proﬁle aware
routing,” in Proceedings of International Workshop on Green Communica-
tions – GreenComm09.

[15] A. Cianfrani, V. Eramo, M. Listanti, and M. Polverini, “An ospf enhance-
ment for energy saving in ip networks,” in Proceedings of IEEE INFOCOM
2011 Workshop on Green Communications and Networking.

[16] L. R. Ford and D. R. Fulkerson, “Constructing maximal dynamic ﬂows

from static ﬂows,” Operations Research, 1958.

[17] H. S. Fathabadia and S. A. Hosseini, “Maximum ﬂow problem on dynamic
generative network ﬂows with time-varying bounds,” Applied Mathematical
Modelling, 2010.

[18] L. Fleischer and M. Skutella, “The quickest multicommodity ﬂow prob-
lem,” in Proceeding of Integer Programming and Combinatorial Optimiza-
tion. Springer, 2002, pp. 36–53.

[19] A. Muriel and F. N. Munshi, “Capacitated multicommodity network ﬂow
problems with piecewise linear concave costs,” IIE TRANSACTIONS,
2004.

31

[20] J. Joseph B. Kruskal, “On the shortest spanning subtree of a graph and the
traveling salesman problem,” Proceedings of the American Mathematical
Society, vol. 7, no. 1, pp. 48–50, 1956.

[21] P. Jakma, D. Lamparter, “Introduction to the quagga routing suite,”
IEEE , vol.28, no.2, pp.42-48, March-April 2014. doi:

in Network,
10.1109/MNET.2014.6786612

[22] F. Oliviero, L. Peluso, and S. P. Romano, “REFACING: An auto-
nomic approach to network security based on multidimensional trust-
worthiness,” Computer Networks, n. 52, 14 (October 2008), 2745-2763.
DOI=http://dx.doi.org/10.1016/j.comnet.2008.04.022

[23] F. Oliviero and S. P. Romano, “A Reputation-Based Metric for Secure
Routing in Wireless Mesh Networks,” IEEE GLOBECOM 2008 - 2008
IEEE Global Telecommunications Conference, New Orleans, LO, 2008, pp.
1-5. doi: 10.1109/GLOCOM.2008.ECP.374

32

