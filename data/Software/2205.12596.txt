Certify the Uncertiﬁed: Towards Assessment of
Virtualization for Mixed-criticality in the
Automotive Domain

Marcello Cinque, Luigi De Simone, Andrea Marchetta
Universit`a degli Studi di Napoli Federico II, Naples, Italy
{macinque, luigi.desimone}@unina.it
a.marchetta@studenti.unina.it

2
2
0
2

y
a
M
5
2

]

C
D
.
s
c
[

1
v
6
9
5
2
1
.
5
0
2
2
:
v
i
X
r
a

Abstract—Nowadays, a feature-rich automotive vehicle offers
several technologies to assist the driver during his trip and guar-
antee an amusing infotainment system to the other passengers,
too. Consolidating worlds at different criticalities is a welcomed
challenge for car manufacturers that have recently tried to
leverage virtualization technologies due to reduced maintenance,
deployment, and shipping costs. For this reason, more and
more mixed-criticality systems are emerging, trying to assure
compliance with the ISO 26262 Road Vehicle Safety standard.
In this short paper, we provide a preliminary investigation
of the certiﬁcation capabilities for Jailhouse, a popular open-
source partitioning hypervisor. To this aim, we propose a testing
methodology and showcase the results, pointing out when the
software gets to a faulting state, deviating from its expected
behavior. The ultimate goal is to picture the right direction for
the hypervisor towards a potential certiﬁcation process.

Index Terms—Automotive, Virtualization, Mixed-Criticality,

Jailhouse, ISO 26262

I. INTRODUCTION
In the last few years, we have witnessed the growing com-
plexity of hardware and software systems for the automotive
industry, with the aim of both providing safety and useful
driver assisting systems (e.g., parking sensors, cruise control,
brake assist, etc.) while having a rich infotainment package
with all connectivity features. In this context, the idea of
deploying both kinds of subsystems, one with safety-critical
functions (often linked to soft/hard real-time constraints) and
safety-related standards to comply with and the other with
less demanding time constraints in a single platform board is
tempting. Indeed, both the integration and development efforts
are extremely cut down due to the reduced size, weight, power,
and cost of the hardware itself.

To this aim, Mixed-Criticality Systems (MCSs) integrate
functionalities of different safety and/or time-critical into a
common platform [1]. This kind of system is gradually ex-
panding towards several application ﬁelds thanks to the ever-
increasing CPU capabilities of modern chips, which have now
spread the implementation of MCSs to the embedded domain
where power consumption is a major concern. Moreover, the
rapid development of virtualization technologies can nowadays
easily support mixed-criticality compositions since it implic-
itly provides software support for resource partitioning and
running tasks on heterogeneous Operating System (OS) (real-
time and general-purpose) environments [2]. Indeed, due to

the recent COVID-19 pandemic, there were estimated losses
within $60 to $100 billion in 2021 sales for chip shortages in
the automotive industry [3]. Thus, virtualization technologies
are becoming a prominent way for the industry to consolidate
multiple software systems on the same system-on-a-chip (SoC)
in a ﬂexible way [4], [5].

Generally, MCSs require safety certiﬁcation evidence,
which includes cumbersome and demanding tasks. The prob-
lem is even exacerbated when MCSs are virtualized since
further critical factors come into play during the process of
choosing the proper virtualization solution, which include hy-
pervisor type, memory footprint, certiﬁcation level (if exists),
the license, support to high availability, fault tolerance, and
security [5]. Regarding these issues, virtualizing MCSs could
be an unfeasible task. However, the reference safety standard
in the automotive domain, i.e., the ISO 26262 [6], allows
supplementing an already certiﬁed piece of software (e.g., a
real-time OS) with a new software element (e.g., a software
library) that is not certiﬁed, called the Safety Element out of
Context (SEooC). Including a SEooC in the whole system
will not invalidate the former certiﬁcation level if we can
provide proof that this software has been developed following
i.e., ensuring that
the guidelines speciﬁed by ISO 26262,
SEooC integration does not negatively affect existing pieces of
software. In particular, the standard proposes, among others,
to precisely analyze failure modes according to anomalous
conditions. In the literature, several studies exploit fault in-
jection techniques to assess complex systems’ behavior and
unveil potential bottlenecks and critical components under
these abnormal inputs and conditions [7]–[10]. Also, the ISO
26262 standard prescribes the use of error detection/handling
mechanisms, and their veriﬁcation through fault injection, by
“corrupting hardware or software components”.

In this short paper, we provide a preliminary investigation
on integrating a partitioning hypervisor, namely Jailhouse, in a
safety-critical deployment as SEooC. Jailhouse [11] promises
to easily comply with safety or other certiﬁcation requirements
that are difﬁcult to achieve with general-purpose hypervisors
[5]. We decided to focus on fault injection testing, which is
an established technique to assess fault tolerance mechanisms
via deliberately inject representative faults into a system under
test. In our context, we need to provide evidence about isola-

 
 
 
 
 
 
tion guarantees needed for treating a hypervisor as SEooC. To
this aim, we propose a preliminary fault injection framework
to deliberately inject faults according to the classical bit-ﬂip
fault model [12]. Finally, we showcased the results of our
initial experiments, highlighting the underlying criticalities of
the current version of this hypervisor.

The other sections are organized as follows: section II
provides a general overview of the Jailhouse hypervisor and
a discussion about SEooC; section III describes our test-
ing framework along with preliminary results; section IV
delineates the state-of-the-art hypervisors in the automotive
industry; section V concludes the paper.

II. JAILHOUSE AND ISO 26262

A. Jailhouse Overview

Jailhouse is a hypervisor announced publicly in November
2013 and currently published as open-source under the GNU-
PLv2 license and available for x86 and ARM-based boards
(both 32 and 64 bit) [11]. Jailhouse is a partitioning hypervisor,
which is a type of virtualization where the hardware resources
such as cores, peripherals, and memory are divided into
partitions (virtual machines) which are allocated statically
following the concept of asymmetric processing. While this
approach may hinder the overall performance, it is desirable
in a safety-critical application, as isolation is crucial to ensure
no interference for running critical tasks. Further, a partitioning
solution also keeps the overall codebase small, making easier
(theoretically) the certiﬁcation process. In Jailhouse, every
partition is called ”cell”. As previously said, every cell has
its own resources which cannot be accessed by the others.
When Jailhouse is started, the only cell placed in the system
is the root cell. This cell contains every resource that Jailhouse
can share between all the other cells, and thus it can not be
removed from the system. Jailhouse allows creating a static
conﬁguration for a cell by writing a source ﬁle according to
special C structures, where each ﬁeld is ﬁlled according to the
customer needs (e.g, assigned CPU cores, memory areas and
access permissions, IRQ enabled, etc.). Generally, Jailhouse
statically assigns to each cell one guest OS (optional for
bare-metal applications) and its applications called inmates.
Despite the main objective being partitioning resources, inter-
cell communication is allowed through the ivshmem device
model. Figure 1 shows the architecture of Jailhouse.

B. Jailhouse as Safety Element out of Context (SEooC)

Jailhouse is currently still in beta, as the latest version is
the v0.12 on February 2020. However, this hypervisor was
recently used as building block in different European research
projects [13], [14] and academic studies. In this short paper,
our aim is to understand whether this kind of software can
be leveraged as a Safety Element out of Context, as described
in the ISO 26262 road safety standard. Citing this latter, ”An
SEooC can be [...] a software [which is] developed, based on
assumptions, in accordance with ISO 26262. It is intended
to be used in multiple different items when the validity of
its assumptions can be established during integration of the

Fig. 1. The Jailhouse architecture

SEooC.” Jailhouse can fall into this category: while it has
not been developed as a vehicle software component, it can
still be certiﬁed as such if its development
is considered
compliant to the ISO 26262 standard, and if it is not, it can be
suitable for certiﬁcation with change. Unfortunately, at least
in public documents, there is no ofﬁcial documentation which
describes the software planning activity nor the design phase of
Jailhouse, thus this whole documentation should be compiled
from scratch. Moreover, following the ISO 26262 standard, the
software has to be tested with a software component which is
certiﬁed as ISO 26262 with a certain ASIL (Automotive Safety
Integrity Level), and in case the safety assumptions can not
ﬁt the new context, an impact analysis has to be initiated.
Ultimately, the process of certifying Jailhouse as a SEooC
would be far from near completion. However, granting that
both root and non-root cells can’t interfere with each other,
thus avoiding any issues with potential safety-related tasks, is
a starting point for it in order to leverage the application to
more safety concerning industrial applications.

III. PROPOSAL AND PRELIMINARY RESULTS

Our preliminary work aims at verifying the Jailhouse isola-
tion and integrity features regarding the ability to provide cell
partitioning. Figure 2 shows the proposed testing framework:
after we decided on a certain test plan, we settled for a
fault injection test with a certain hardware setup that affected
both the root and non-root cell deployed by the hypervisor.
Results were therefore collected on a log ﬁle, used further for
analytics. The proposed testing framework includes a dozen of
lines of code added to Jailhouse that allows us to orchestrate
the fault injection tests by controlling test duration and target.
We leveraged the single bit-ﬂip fault model commonly used to
emulate transient hardware faults [12]. Having the code source
at our disposal, we decided to monitor some golden (fault-
free) runs of the hypervisor in order to ﬁnd preliminary fault
injection points. This proﬁling operation yielded three can-
didates functions, which were the hardware interrupt request
function (irqchip handle irq()), the trap exception han-
dler (arch handle trap()) and the hypervisor call handler
(arch handle hvc()). These three functions refer to the
virtualization extensions available for the ARMv7 architecture.
We then chose the injection strategy, consisting of a random bit

root cell. This inconsistent state is particularly dangerous as
the Jailhouse user assumed that the allocated non-root cell is
running, but instead, it is completely broken and unusable,
and only destroying the cell and reallocating it ﬁxes the
problem. We then decided to further investigate the non-root
cell arch handle trap() call to see the extend of the
inconsistency, yielding the results summarized in Figure 3:

Fig. 3. Non-root cell availability in medium intensity tests

As we can see, the cell behaves correctly in the majority
of cases, although in the 30% a panic park happens, i.e.,
the fault propagates to the whole system bringing the system
itself to a kernel panic. Finally, a limited number of tests
brings to a CPU park: while the non-root cell is running,
there is a critical fault injection that triggers the error code
0x24, which is the unhandled trap exception. In this case,
the cpu park() function is called and the non-root cell
stops working. However, the destruction of the non-root cell,
which brings the CPU core 1 control back to the root cell,
is accomplished without any issue. This means that the fault
has been successfully isolated and the non-root cell has not
damaged the other cells.

IV. RELATED WORK
PikeOS [15] is a commercial hard real-time operating
system that offers a separation kernel-based hypervisor. This
real-time OS (RTOS) allows the creation of logical partitions
which are completely isolated and can execute with different
safety and security levels within the same computing platform.
PikeOS is developed according to various safety standards, like
DO-178C for avionic and also ISO 26262. The main advantage
of the PikeOS architecture is that the microkernel consists of
real-time OS and a type-1 hypervisor in one product. The
system achieves resource partitioning by statically assigning
the computing resources to its partitions and by using MMU.
MICROSAR [16] includes in its OS package a preemptive,
real-time multitasking operating system for microcontrollers.
It is based on the AUTOSAR OS speciﬁcation [17], which
is an extension of the OSEK/VDX-OS standard [18], offering
functions for time monitoring and memory protection. It also
implements a high-resolution timer mechanism in order to
provide time resolutions of less than 1ms. The OS package
is provided by a hypervisor module called LeanHypervisor
(vLhyp) which initializes the System Memory Protection Unit

Fig. 2. Testing Framework

ﬂipping of a random architecture register. Finally, we decided
not to operate on the interrupt request handler as the only
parameter passed is the IRQ vector number, and manumitting
it means calling a different IRQ function, defaulting to an IRQ
error, which is completely predictable and correct behavior.

The generated test plan consists of two classes of testing,
deﬁned by the fault intensity level: the medium level refers
to a discontinuous bit ﬂipping of a single register, generated
once every given number of calls to the target functions,
while the high level instead consists in a bit ﬂip of multiple
registers at the time. These are both transient fault injections,
and the rate of occurrence is conﬁgurable. The showcased
tests have an occurrence of once every 100 and 50 function
calls for the medium and hard intensity, respectively. Each
test lasts 1 min. and the outcome is sent to an empty shell
where the board serial port is connected. We then collected
the test results into a log ﬁle, which is further analyzed to
understand how the hypervisor reacted to injected faults. The
tested hardware comprises a Banana PI, which is a dual-core
Cortex-A7 board, equipped with 1 GB of RAM. We evaluated
Jailhouse v0.12 with Linux Kernel v5.10, properly patched for
Jailhouse. Finally, the test plan was executed by exercising a
workload consisting of a root cell where the general-purpose
Linux was running and a non-root cell
in which we run
FreeRTOS, a market-leading real-time OS. In particular, within
FreeRTOS we spawned several tasks to be managed, including
a task to blink an onboard led, a couple of send/receive tasks,
two ﬂoating-point arithmetic tasks, and ﬁfteen integer ones.
We statically assigned the board CPU core 0 to the root cell
and the CPU core 1 to the non-root cell (FreeRTOS cell).

The results can be summarized as follows. High level inten-
sity faults always return an ”invalid arguments” when we target
both the arch handle hvc() and arch handle trap()
in the context of the root cell; thus, the root cell will be not
allocated at all, which is a correct (and expected) behavior.
On the other hand, when we ﬁlter the injection to activate
only when the CPU core 1 is calling the function, the result
is pretty peculiar, although wrong and inconsistent: the cell
is allocated but, whether the CPU fails to come online as
per the swap feature of the CPU hot plug or the cell is
left in a non-executable state, the non-root cell doesn’t do
anything, as attested by the USART output left completely
blank. Nonetheless, it is considered running by Jailhouse, and
the shutdown of the cell (i.e., jailhouse cell shutdown
command) gives the control of the CPU and the non-root
cell peripherals speciﬁed in the conﬁguration ﬁle back to the

(MPU) at start-up and manages the CPU cores’ power on. Each
core may have its own operating system image, which can be
POSIX, Classic, or Adaptive AUTOSAR. Both the hypervisor
and the Memory Protection Unit (MPU) task protect
the
OS partitions, which have to run without the risk of mutual
interference due to incorrect data changes so that the system
can operate in parallel partitions with different ASILs. Other
than the OS and hypervisor modules,
there are plenty of
other modules which compose the MICROSAR Safe basic
software which have all been certiﬁed by the ISO 26262
ASIL-D standard as SEooC [19]. VOSYSmonitor [20] is an
ASIL-C ISO 26262-compliant hypervisor, developed for both
ARMv7 and ARMv8 architectures whose Cortex-A processors
offer the Secure Monitor mode. This feature allows executing
a safety-critical RTOS and a general-purpose OS simultane-
ously; moreover, it allows the use of virtualization extensions
like Linux/KVM, thus enabling the instantiation of multiple
virtual machines. Furthermore,
the hypervisor isolates the
RTOS from the other VMs and offers several communication
methods in order to provide a secure communication channel
between the various subsystems. On multicore architectures,
VOSYSmonitor can dynamically share cores between the
secure side and the non-secure one:
the
secure world tasks should necessarily have priority compared
to the other ones. This means that once a core is assigned to
the safety-critical domain, the non-secure world applications
can run on that core only if there are no critical tasks to
run, thus meaning that the resource has been freed by the
secure-world application. An interruption mechanism is ﬁnally
deployed in order to guarantee an efﬁcient context switch
from one world to another. Besides commercial products,
also in research there is a trend toward the use of static
partitioning hypervisors, mainly due to the isolation property
that
this kind of virtualization can offer to the user. We
choose Jailhouse as our testing platform due to its adaptability
to multiple boards and the fact that it is open-source, but
there are other successful examples of commercial hypervisors
for automotive platforms currently available on the market.
Other than Jailhouse, another example is Bao hypervisor [21],
proposed as a static partitioning hypervisor for Armv8 and
RISC-V platforms with a small codebase which differs from
Jailhouse due to the fact that it does not depend on Linux to
boot and manage the partitions. To the best of our knowledge,
this is the ﬁrst study that investigates fault injection techniques
to support the certiﬁcation of a hypervisor as SEooC in the
automotive domain.

the idea is that

V. CONCLUSIONS AND FUTURE WORK

In this short paper, we investigated the possibility of treating
the open-source, non-certiﬁed, Jailhouse partitioning hypervi-
sor as a Safety Element out of Context (SEooC) according
to the automotive reference standard, the ISO 26262. More
speciﬁcally, we opted for a fault injection methodology aimed
at verifying the isolation and integrity features provided by
the Jailhouse hypervisor. At the best of our knowledge, there
are no other researches that tackle a fault injection approach

towards verifying the hypervisor robustness and isolation
features. In the end, we highlighted some possible criticalities
which led to the hypervisor malfunctioning. Future plans
aim at expanding the fault injection testing framework, by
applying, e.g., a wider and customizable set of fault models in
real scenarios. This will enable a framework that signiﬁcantly
helps this kind of hypervisor to become actual building blocks
in virtualized mixed-criticality systems.

REFERENCES

[1] A. Burns and R. I. Davis, “Mixed criticality systems-a review:(february

2022),” 2022.

[2] G. Heiser, “Virtualizing embedded systems-why bother?” in Proc. DAC.

IEEE, 2011, pp. 901–905.

(2022)

[3] Bloomberg.
Estimate
Available:
automotive-chip-shortage-cost-estimate-surges-to-110-billion

Cost
[Online].
https://www.bloomberg.com/news/articles/2021-05-14/

Automotive
$110
to

Chip-Shortage

Billion.

Surges

[4] BlackBerry Limited.

(2021) Are Hypervisors the Answer

to the
Coming Silicon Shortages? (White Paper). [Online]. Available: https:
//blackberry.qnx.com/content/dam/blackberry-com/Documents/pdf/
BlackBerry QNX Hypervisor WhitePaper 22April2021 FINAL.pdf
[5] M. Cinque, D. Cotroneo, L. De Simone, and S. Rosiello, “Virtualizing
mixed-criticality systems: A survey on industrial trends and issues,”
Elsevier FGCS, 2021.

[6] ISO, “Product Development: Software Level,” ISO 26262: Road vehicles

– Functional safety, vol. 6, 2011.

[7] D. Cotroneo and R. Natella, “Fault Injection for Software Certiﬁcation,”

IEEE Security & Privacy, vol. 11, no. 4, pp. 38–45, 2013.

[8] D. Cotroneo, L. De Simone, and R. Natella, “Run-Time Detection of
Protocol Bugs in Storage I/O Device Drivers,” IEEE TR, vol. 67, no. 3,
pp. 847–869, 2018.

[9] D. Cotroneo, L. De Simone, and R. Natella, “Dependability Certiﬁcation
IEEE,

Guidelines for NFVIs through Fault Injection,” in Proc. ISSREW.
2018, pp. 321–328.

[10] S. Winter, O. Schwahn, R. Natella, N. Suri, and D. Cotroneo, “No PAIN,
no gain?: the utility of PArallel fault INjections,” in Proc. ICSE.
IEEE
Press, 2015, pp. 494–505.

[11] R. Ramsauer, J. Kiszka, D. Lohmann, and W. Mauerer, “Look mum, no

vm exits!(almost),” Proc. OSPERT, 2017.

[12] R. Natella, D. Cotroneo, and H. S. Madeira, “Assessing dependability
with software fault injection: A survey,” ACM CSUR, vol. 48, no. 3, pp.
1–55, 2016.

[13] CORDIS. SELENE: Self-monitored Dependable platform for High-
Performance Safety-Critical Systems. https://cordis.europa.eu/project/id/
871467.

[14] ——. High-Performance Real-time Architectures for Low-Power Em-

bedded Systems. https://cordis.europa.eu/project/id/688860.

[15] https://www.sysgo.com/pikeos.

(2022) PikeOS ”Classic” RTOS &

Hypervisor. [Online]. Available: https://www.sysgo.com/pikeos
overview.
Microsar

[16] VECTOR.
line].
microsar/Docs/MICROSAR ProductInformation EN.pdf

[On-
https://assets.vector.com/cms/content/products/

Available:

product

(2017)

[17] AUTOSAR.
System.
upload/standards/classic/4-2/AUTOSAR SWS OS.pdf

(2018) AUTOSAR - Speciﬁcation

[Online]. Available: https://www.autosar.org/ﬁleadmin/user

of Operating

[18] ISO. (2005) Road vehicles — Open interface for embedded automotive
applications — Part 3: OSEK/VDX Operating System (OS). [Online].
Available: https://www.iso.org/standard/40079.html

[19] Vector.

(2020)

Vector

AUTOSAR
[Online].

basic
Available:

software
https:

re-certiﬁed.

successfully
//www.vector.com/us/en/news/news/vector-autosar-basic-software-
successfully-re-certiﬁed-additional-modules-available-in-asil-d/
[20] P. Lucas, K. Chappuis, B. Boutin, J. Vetter, and D. Raho, “Vosysmonitor,
a trustzone-based hypervisor for iso 26262 mixed-critical system,” in
Proc. FRUCT.

IEEE, 2018, pp. 231–238.

[21] J. Martins, A. Tavares, M. Solieri, M. Bertogna, and S. Pinto, “Bao: A
lightweight static partitioning hypervisor for modern multi-core embed-
ded systems,” in Proc. NG-RES.
Schloss Dagstuhl-Leibniz-Zentrum
f¨ur Informatik, 2020.

