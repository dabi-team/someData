2
2
0
2

r
p
A
9
1

]
E
S
.
s
c
[

1
v
8
8
8
8
0
.
4
0
2
2
:
v
i
X
r
a

Using a Semantic Knowledge Base to Improve the Management
of Security Reports in Industrial DevOps Projects

Markus Voggenreiter
Markus.Voggenreiter@siemens.com
Siemens Technology and LMU Munich
Munich, Germany

Ulrich Schöpp
schoepp@fortiss.org
fortiss GmbH
Munich, Germany

ABSTRACT
Integrating security activities into the software development life-
cycle to detect security flaws is essential for any project. These
activities produce reports that must be managed and looped back
to project stakeholders like developers to enable security improve-
ments. This so-called Feedback Loop is a crucial part of any project
and is required by various industrial security standards and models.
However, the operation of this loop presents a variety of chal-
lenges. These challenges range from ensuring that feedback data is
of sufficient quality over providing different stakeholders with the
information they need to the enormous effort to manage the reports.
In this paper, we propose a novel approach for treating findings
from security activity reports as belief in a Knowledge Base (KB).
By utilizing continuous logical inferences, we derive information
necessary for practitioners and address existing challenges in the
industry. This approach is currently evaluated in industrial DevOps
projects, using data from continuous security testing.

CCS CONCEPTS
• Security and privacy → Software security engineering; • Theory
of computation → Automated reasoning.

ACM Reference Format:
Markus Voggenreiter and Ulrich Schöpp. 2022. Using a Semantic Knowledge
Base to Improve the Management of Security Reports in Industrial DevOps
Projects. In 44nd International Conference on Software Engineering: Software
Engineering in Practice (ICSE-SEIP ’22), May 21–29, 2022, Pittsburgh, PA, USA.
ACM, New York, NY, USA, 2 pages. https://doi.org/10.1145/3510457.3513065

1 INTRODUCTION
Automating security activities like periodic testing for vulnerabili-
ties and flaws is essential in industrial projects utilizing DevOps
techniques [3, 8] to produce software products in domains with high
security-related demand. As a result, new data about the software
security is continuously generated, informing about shortcomings
of the software and new requirements. In order to improve the
product, reports must be fed back into the development cycle and
be addressed by developers [11]. This so-called Feedback Loop is
demanded by various standards and industry best practices [1, 7].

Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
ICSE-SEIP ’22, May 21–29, 2022, Pittsburgh, PA, USA
© 2022 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-9226-6/22/05. . . $15.00
https://doi.org/10.1145/3510457.3513065

In practice, however, the task of implementing the Feedback Loop
presents various challenges. The first challenge is the quality of the
reports. The vast amount of data produced by security activities
varies in format, content, perspective, assumptions, and evaluation
[14], which necessitates data processing. Issues like False Positives
are common in reports [9], reducing their reliability. The second
challenge is how the data is utilized. The correct interpretation of
the security activity data is essential for the subsequent actions,
as data itself fuels project decisions and represents the software’s
security level. Moreover, each project has its own demands, e.g.,
regarding standards compliance. Consequently, a high-quality de-
mand applies to the produced information and must be customized
project-wise. Our third challenge is that data from security activities
is only half of what is needed. Inputs by security experts, customer
opinion, or vulnerability databases are essential to correctly esti-
mate the impact of findings and present a valid representation of
reality. Finally, performing the management manually to collate
actionable information is neither feasible in industrial software
development projects nor conforming with the DevOps mindset,
where automation of tasks is crucial [6]. Hence, we see a necessity
to address the question:
How can the Feedback Loop for security reports in indus-
trial DevOps projects be optimized?
The optimization should include the process being faster, customiz-
able, with the least manual effort, more automation, highly reliable,
and comprehensible for the project team.

2 USING A SEMANTIC KNOWLEDGE BASE
2.1 Theory
We propose the usage of a semantic KB to address the challenges
identified above. A KB comprises primary information, logically
interconnected by database semantics and stored free of constraints
in a metastructural database. In contrast to a database, a KB has
primary methods of data processing, which allow the continuous
generation of new information based on existing data [4, 5]. KBs
have been applied in various areas, including management of sensor
data [10], the elicitation of high-quality requirements [2], and even
vulnerability management [13]. In contrast to existing approaches,
we apply KBs to the domain of secure software engineering to
manage security reports. However, this implies multiple changes
to existing concepts to ensure a successful function in this use
case. Initially, we consider the content of the KB as belief instead
of knowledge due to the lack of data reliability. This particularly
includes contradictory information from our data sources. Con-
sequently, belief must be revisable, including the explicit belief
(provided from outside the KB) and derived belief (derived by the
KB). Moreover, the inference procedure must be customized to each

 
 
 
 
 
 
ICSE-SEIP ’22, May 21–29, 2022, Pittsburgh, PA, USA

Voggenreiter and Schöpp

of the KB, we restrict new inferences solely to those that might be
invalidated by external input (e.g., incorrect deduplication).

Deduplication, e.g., works on findings that have been parsed
before from the original reports. During the execution of this rule,
findings with similar values for title or description are summarized.
As this could incorrectly connect two findings, external input cor-
recting potentially flawed inferences is considered during execution.
In such cases, the logical core would investigate whether this makes
a revision of belief necessary. We are currently utilizing this KB in
industrial software development projects to manage reports from
automated security testing to evaluate its relevance and usefulness.

3 CONCLUSION AND FUTURE
The management of reports produced by security activities in in-
dustrial DevOps projects is essential in every domain. In this paper,
we suggest a novel approach of using a semantic KB for this use
case. We indicate necessary changes to existing KB concepts and
introduce our concept implementation. We believe that utilizing
logical inferences in combination with the reliability of a KB is a
promising approach for usage in industrial software engineering
projects. Substantiating this belief with a long-term evaluation in a
realistic setting will be the core activity of future work.

REFERENCES
[1] International Electrotechnical Commission (IEC). 2018. 62443-4-1. Security for
industrial automation and control systems Part 4-1 Product security development
life-cycle requirements.

[2] H. Kaiya and M. Saeki. 2006. Using Domain Ontology as Domain Knowledge for
Requirements Elicitation. In 14th IEEE International Requirements Engineering
Conference (RE’06). 189–198.

[3] Gene Kim. 2011. Top 11 Things You Need to Know About DevOps.
[4] Marek Krótkiewicz, Krystian Wojtkiewicz, and Marcin Jodłowiec. 2018. Towards
Semantic Knowledge Base Definition. In Biomedical Engineering and Neuroscience,
Wojciech P. Hunek and Szczepan Paszkiel (Eds.). Springer International Publish-
ing, Cham, 218–239.

[5] Marek Krótkiewicz, Krystian Wojtkiewicz, Marcin Jodłowiec, and Waldemar
Pokuta. 2016. Semantic Knowledge Base: Quantifiers and Multiplicity in Extended
Semantic Networks Module. In Knowledge Engineering and Semantic Web, Axel-
Cyrille Ngonga Ngomo and Petr Křemen (Eds.). Springer International Publishing,
Cham, 173–187.

[6] Leonardo Leite, Carla Rocha, Fabio Kon, Dejan Milojicic, and Paulo Meirelles.
2019. A Survey of DevOps Concepts and Challenges. ACM Comput. Surv. 52
(Nov. 2019).

[7] Sammy Migues, John Steven, and Mike Ware. 2020. BSIMM 11.
[8] Fabiola Moyón, Rafael Soares, Maria Pinto-Albuquerque, Daniel Mendez, and
Kristian Beckers. 2020. Integration of Security Standards in DevOps Pipelines: An
Industry Case Study. In Product-Focused Software Process Improvement, Maurizio
Morisio, Marco Torchiano, and Andreas Jedlitschka (Eds.). Springer International
Publishing, Cham, 434–452.

[9] Muhammad Nadeem, Byron J. Williams, and Edward B. Allen. 2012. High False
Positive Detection of Security Vulnerabilities: A Case Study. In Proceedings of the
50th Annual Southeast Regional Conference (Tuscaloosa, Alabama) (ACM-SE ’12).
Association for Computing Machinery, New York, NY, USA, 359–360.

[10] S. N. A. U. Nambi, C. Sarkar, R. V. Prasad, and A. Rahim. 2014. A unified semantic
knowledge base for IoT. In 2014 IEEE World Forum on Internet of Things (WF-IoT).
575–580.

[11] Stacy Simpson. 2014. SAFECode Whitepaper: Fundamental Practices for Secure
Software Development 2nd Edition. In ISSE 2014 Securing Electronic Business Pro-
cesses (Wiesbaden), Helmut Reimer, Norbert Pohlmann, and Wolfgang Schneider
(Eds.). Springer Fachmedien Wiesbaden, 1–32.
[12] VMware. 2022. Differential Datalog (DDlog).

https://github.com/vmware/

differential-datalog original-date: 2018-03-20.

[13] J. A. Wang and M. Guo. 2009. Security Data Mining in an Ontology for Vul-
nerability Management. In 2009 International Joint Conference on Bioinformatics,
Systems Biology and Intelligent Computing. 597–603.

[14] S.M. Welberg. 2008. Vulnerability management tools for COTS software - A com-
parison. Number TR-CTIT-08-15 in CTIT Technical Report Series. Centre for
Telematics and Information Technology (CTIT), Netherlands.

Figure 1: Component Overview of Example KB

project. This implies that each KB has to deal with belief and infer-
ence rules being incrementally added or changed throughout the
project. As each KB is unique to its project, a traditional approach
using a static ontology is not feasible for our use case, especially
when considering changing inference rules. Instead, we enable the
incremental creation of a KB for each project. To ensure a consistent
KB, we monitor all changes to the KB and identify contradictory
information. If conflicting data is identified, it is resolved by con-
sidering external human input as more reliable (e.g., False Positive
identification). Any belief derived from the formerly contradictory
information is revised and re-calculated.

With this approach, we can address various challenges of the
industrial security report management with a semantic KB. The au-
tomated generation of data with pre-written inference rules ensures
high reliability, high comprehensibility, project customization and
reduces the scope for human errors. The automation of the report
management reduces the manual effort and speeds up processing.

2.2 Practice
In order to test our theoretical concept, we implemented it for
industrial software development projects. We realized our concepts
of belief, inference rules, continuous inference, and metastructural
data storage in the components depicted in Figure 1.

The Data Storage component, which comprises rules and belief,
is implemented using the Elasticsearch search engine, which allows
us to perform advanced queries on the data. Belief is stored in
entities of Elasticsearch documents. Inference rules, however, are
written in Python code. The step where our inference rules are
applied to the current content of the KB to derive new information
is implemented by the Inference Engine. With the Logical Core, we
ensure consistency between new beliefs being added or existing
beliefs being revised. These components are implemented in Python,
using a self-developed logic to ensure consistency within the KB.
Investigating the connections to incremental logic programming
approaches, such as Differential Datalog [12], is an interesting
direction for future work.

In practice, each project has to customize the information con-
tained in the KB by writing documents for belief and inference rules.
Based on our experience, specific inference rules are necessary for
any project. These include a parser for security reports, a dedu-
plication between findings, a validation of findings using human
expertise, and a prioritization of the resulting issues. In most cases,
these inference rules are streamlined, meaning that they build upon
each other in a pipeline-like manner. To avoid the artificial inflation

<<component>>Inference Engine<<component>>Inference Engine<<component>>Data Storage<<component>>Data Storage<<component>>User Interface<<component>>User Interface<<component>>Logical Core<<component>>Logical Core<<component>>Belief Storage<<component>>Belief Storage<<component>>Rule Storage<<component>>Rule StorageUser