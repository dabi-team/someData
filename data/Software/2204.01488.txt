2
2
0
2

r
a

M
7
1

]
h
p
-
d
e
.
s
c
i
s
y
h
p
[

1
v
8
8
4
1
0
.
4
0
2
2
:
v
i
X
r
a

Training the next generation of computational scientists
through a new undergraduate course

Tulin Kamana, Rouben Rostamianb and Shannon W. Dingmana

a Department of Mathematical Sciences, University of Arkansas, Fayetteville, AR 72701,
USA; bDepartment of Mathematics and Statistics, University of Maryland, Baltimore
County, Baltimore, MD 21250, USA

ARTICLE HISTORY
Compiled April 5, 2022

ABSTRACT

We introduce a newly designed undergraduate-level interdisciplinary course in
scientiﬁc computing that aims to prepare students as the next generation of research-
oriented computational scientists and engineers. The course oﬀers students oppor-
tunities to explore a diverse set of projects and develop the necessary programming
skills to implement ideas and algorithms within high performance computing envi-
ronments. The training includes how to think about, formulate, organize, and im-
plement programs in scientiﬁc computing. The emphasis of the course is on problem
solving within a wide range of applications in science and engineering.

KEYWORDS
Computational science and engineering; programming; problem solving;
mathematics education; evaluation

1. Introduction

Computational Science and Engineering (CSE) is a rapidly growing ﬁeld. Theory and
experiments are supported by computational work to understand the behavior of com-
plex systems arising in science and engineering applications. The set of knowledge and
skills needed in CSE lies at the intersection of mathematics, computer science and natu-
ral sciences and engineering. Many scientiﬁc and engineering problems are described by
mathematical models, the models are analyzed and solved using numerical algorithms,
which in turn are implemented using programming languages. The development of eﬃ-
cient, accurate and robust software for the numerical simulation of complex systems is
the key point in CSE research. The current trends on CSE is are captured through the
following indicators:

• The U.S. Department of Energy (DOE) Advanced Scientiﬁc Computing Research
(ASCR) (https://science.energy.gov/ascr) program states the importance of
CSE: “It is generally accepted that computer modeling and simulation oﬀer sub-
stantial opportunities for scientiﬁc breakthroughs that cannot otherwise—using
laboratory experiments, observations, or traditional theoretical investigations—be

CONTACT Tulin Kaman. Email: tkaman@uark.edu

 
 
 
 
 
 
realized. At many of the research frontiers, computational approaches are essential
to continued progress and play an integral and essential role in much of twenty-ﬁrst
century science and engineering.”

• Oﬃcers of the Society for Industrial and Applied Mathematics (SIAM) Activity
Group on Computational Science and Engineering (R¨ude et al., 2018) examine
the role of CSE in the 21st-century and discuss the challenges and opportunities in
CSE research including mathematical methods and algorithms, high performance
computing, and data science.

• The ASCR Scientiﬁc Discovery through Advanced Computing (SciDAC) https:
//scidac.gov/ program brings computational scientists, applied mathemati-
cians, and computer scientists together with the mission to develop the scien-
tiﬁc computing software and hardware infrastructure needed to advance scien-
tiﬁc discovery using supercomputers. Two SciDAC institutes, (i) FASTMath –
Frameworks, Algorithms, and Scalable Technologies for Mathematics (https:
//scidac5-fastmath.lbl.gov) and (ii) RAPIDS – SciDAC Institute for Com-
puter Science and Data (https://rapids.lbl.gov/) are designed to develop
scientiﬁc advances in petascale computing. The ASCR Applied Mathematics
program supports research on numerical methods, optimization, multiphysics-
multiscale computation and math software development for the numerical studies
in computational ﬂuid dynamics, climate modeling, nuclear reactor design, sub-
surface ﬂow modeling, and many other applications.

While advanced computational eﬀorts are growing rapidly, it is important to adapt
student education to keep up with the requirements of a career in academia and in-
dustry. Therefore, there have been many undergraduate student opportunities pro-
vided at universities and national laboratories/facilities supported by National Sci-
ence Foundation (NSF) Research Experience for Undergraduates (REU) programs
(https://www.nsf.gov/crssprgm/reu) and U.S. Department of Energy’s Science Un-
dergraduate Laboratory Internships (SULI) (https://science.osti.gov/wdts/suli).
Moreover professional organizations such as the American Mathematical Society (AMS),
the Association for Women in Mathematics (AWM), and Society for Industrial and Ap-
plied Mathematics (SIAM) provide support for undergraduate students’ developments.
The SIAM working group on CSE undergraduate education (Turner et al., 2011) stresses
the importance of CSE, the need of training in CSE fundamentals at undergraduate level
and the skills needed for the training of students.

We believe that scientiﬁc computing should be an essential part of students’ edu-
cation if they are to be active participants in the development of future technology.
Speciﬁcally, it is important for students to be able to develop an understanding of the
methods, algorithms, and computing skills that are necessary for scientiﬁc computing
during their undergraduate studies. Therefore, we proposed a new course, MATH 4343
“Introduction to Scientiﬁc Computing” in the Department of Mathematical Sciences
at the University of Arkansas which was taught in Spring 2021 for the ﬁrst time. The
learning objectives of the MATH 4343 are divided into three parts:

(i) understanding the problem with its mathematical model;
(ii) learning the algorithms needed for solving the mathematical models; and
(iii) the implementation of algorithms in the Linux environment.

MATH 4343 provides students with a theoretical and practical background sought
after in the industry by introducing a diverse set of real world problems in science
and engineering such as the Nelder–Mead downhill simplex, the heat equation, the

2

porous medium equation, and the Finite Elements Method (Rostamian, 2014a). The
emphasis of MATH 4343 is on problem solving, and oﬀers multiple projects based on the
students’ backgrounds. This course was originally designed for the students of Applied
Mathematics in the Department of Mathematical Sciences to help them quickly acquire
mathematical and programming skills to solve a diverse set of problems from a variety
of engineering areas. Meanwhile, it has gained popularity among other science and
engineering students at the University of Arkansas.

MATH 4343’s main goal is to motivate and prepare undergraduate students for their
role as future computational scientists and engineers. The course is designed to support
programs with computational concentration, which recommend or require certain level
of programming expertise to students. To take advantage of the current computational
resources provided at the university, the students become familiar with C programming
language in the Linux environment and auxiliary software packages and libraries needed
for visualizing. The prerequisite for this course is only linear algebra which is the highest
level mathematics course taken by most of the natural sciences and engineering students;
however no previous programming experience in C is required. The time required to
teach C programming from basics to a moderately advanced level is built into the
course design, and meshes well with the additional activities through lecture series on
programming (see section 2.3).

In section 2 we describe the course’s details, including the content (section 2.1) and
performance assessments (section 2.2) which are designed based on the enrolled students’
needs and backgrounds. In section 2.3 we present a list of activities designed to achieve
the course’s main goal and address the importance of additional learning activities in
the form of seminars and workshops to train and prepare students for their future
careers. In section 3 we present the opportunities speciﬁcally presented to students who
complete the course and wish to conduct research. Student evaluation of the course and
instructor are presented in section 4. Finally, we present the concluding remarks and
future plans in section 5.

2. Course Details

In this section, we present the three primary components of the course, which consist of
i) the learning objectives, ii) assessments, and iii) instructional strategies. The learning
objectives component is designed with the purpose of guiding the student on how to
interpret and analyze a diverse set of problems derived from science and engineering,
and then devise and implement algorithms to produce quantitative information about
them. The skills learned here provide a foundation upon which other courses within the
scientiﬁc computing domain can build.

We examine the relative eﬃciency of various algorithms applied to a given problem,
such as explicit, implicit, hybrid ﬁnite diﬀerence schemes (Isaacson and Keller, 1994)
for solving initial/boundary problems associated with the classical heat equation. The
understanding gained here paves the way to handling more complex problems such as
the porous medium equation (V´azquez, 2007) which arises in the study of diﬀusion of
gasses, and also in population dynamics (Gurtin and MacCamy, 1977).

In our experience, a solid knowledge of undergraduate multivariable calculus and
linear algebra provides suﬃcient mathematical background for this course. We have had
success with setting MATH 3093 (Abstract Linear Algebra) for mathematics students,
or MATH 3083 (Linear Algebra) for engineering students as the prerequisite for this
course.

3

Science
0

2

3

Engineering
2

0

2

Mathematics
1

Figure 1. Number of students for each one or combination of the disciplines from science, engineering and
mathematics.

Most of the undergraduate students who enroll in this course have had prior expo-
sure to elements of programming through Python and/or MATLAB, or perhaps lower
level languages such as C and Java. Students who lack experience with C or a C-like
procedural programming language, can still succeed through self-study and some extra
help from the instructor and their classmates.

On the ﬁrst day of the class we administer a survey to learn about the students’
backgrounds. The survey questions are based on two of the Mathematics Attitudes and
Perceptions Survey (MAPS) (Code et al., 2016) categories: interest and expertise. The
feedback from the survey helps the instructor to design the project-based course content
including a two-week1 crash course on the C programming language, and the program-
ming environment on the university’s high performance computing system, Pinnacle.
It’s safe to say that upon completion of this course, the students will have been exposed
to about 90% of the C programming language features.

There were ten students enrolled in Spring 2021 when MATH 4343 was oﬀered for
the ﬁrst time. Twenty-ﬁve percent of the students who enroll in this course are juniors
who have earned between 60 and 90 credit hours. The rest are seniors who have earned
90 or more credit hours. Figure 1 displays these ten students’ major areas of study. On
the ﬁrst day of class, a survey was given to learn more about the students’ interests and
learning preferences. See a summary of survey responses for each question in Table 1.

2.1. Course content

The course content and its pace are adjusted to what typical undergraduate students
can handle. In the following subsections we list the typical course content.

1C is a particularly compact programming language and the bulk of it may be learned rather quickly.

4

Table 1. Student interests and learning survey summary

Questions

Answers

When I am learning something new,
I prefer to

I prefer to work

What is your level of programming?

How experienced are you in C pro-
gramming?

How experienced are you in Linux
environment?

How many programming based courses
have you taken?

Have you been involved in under-
graduate research?
If not, are you interested in acquiring
research experience?

have someone show me
have someone tell me
ﬁgure it out myself
individually
with a group
beginner
intermediate
advanced
novice
advanced beginner
competent
proﬁcient
expert
novice
advanced beginner
competent
proﬁcient
expert
1
2
3
4
5+more
yes
no
yes
no

Responses
(%)
70%
20%
10%
50%
50%
30%
70%
0%
50%
40%
10%
0%
0%
40%
40%
0%
20%
0%
20%
40%
10%
20%
10%
30%
70%
0%
100%

2.1.1. A two-week crash course on programming and computing environments

The B.S. degree in Natural Sciences with Computational Concentration programs re-
quires core courses that include Calculus I–II, Elementary Diﬀerential Equations, Linear
Algebra, as well as computer science courses such as Programming Foundations I–II and
Programming Paradigms.

Some other engineering and science programs recommend, but do not require, courses
in programming as degree requirements. To reach as wide an audience as possible, and
to establish a common background for all enrolled students in MATH 4343 course, we
begin with the basics concepts of C programming (data representation, conditional and
iterative statements, functions, arrays, strings), and then continue with more advanced
topics of C (pointers, structures, dynamic allocations, recursion, linked lists, binary
trees, unions and function pointers). The bare minimum of the C programming language
introduced this way is mostly adequate for the average student. To the more ambitious
students, who desire further reading and a comprehensive reference, we recommend the
book by Kochan (Kochan, 2014) which integrates well with this course’s objectives.

We introduce the Arkansas High Performance Computing Center (AHPCC) com-
puting environment which is used throughout this course. AHPCC provides high
performance computing hardware, storage, support services, and training to enable
computationally-intensive and data-intensive research. The AHPCC is available to fac-
ulty, staﬀ and students at all of the Arkansas public universities, and supports educa-
tional allocations which are used in teaching this course. The undergraduate students
ﬁrst get familiar with the Linux system and the command-line based terminal. This was
a new experience for all but one of the students who had used the system previously in
another research project.

A beneﬁt of using the AHPCC is the creation of a uniform computing environment
for all students, as they don’t need to download and install compilers and third-party

5

software packages in order to work on their programming projects. The students can
easily switch between diﬀerent compilers such as the GNU and Intel C compilers and
experiment with diﬀerent software tools for debugging, performance analysis, etc. In
addition, third-party software packages such as Geomview, Triangle, and Umfpack are
readily available for their use.

After the two-week crash course on programming and computing environments, we
closely follow the textbook “Programming Projects in C for Students of Engineering,
Science and Mathematics” (Rostamian, 2014a) throughout the semester. This book is
designed for early graduate students and advanced undergraduate students. The text-
book consists of two parts. The six chapters of Part I (A Common Background) are
prerequisites for Part II (Projects) which we now describe.

2.1.2. Projects

The identiﬁcation and formulation of engineering problems via mathematical modeling,
the solution of problems using numerical methods, and the design of computer programs,
are the fundamental blocks of training for students who plan to pursue a career as
computational scientists and engineers. We therefore begin with identifying a list of
projects that are relevant to the students’ backgrounds.

The projects presented in the textbook are interesting, intriguing, inviting, challeng-
ing, and illuminating on their own, apart from their programming aspects. Some of the
favorite projects in the textbook are:

(1) The Nelder–Mead simplex algorithm (Nelder and Mead, 1965; Press et al., 1992)
for minimizing functions, with application to computing ﬁnite deformations of
trusses under large loads via minimizing the energy, as well as training neural
networks;

(2) The Haar wavelet transform, with application to image analysis and image com-

pression (Nievergelt, 2013; Stollnitz et al., 1995, 1996);

(3) The evolution of species and the eﬀect of the environment on the emergence of

genetically distinct species (Barski, 2011; Dewdney, 1989);

(4) Finite diﬀerence (FD) algorithms for solving the time-dependent linear heat equa-
tion and extending the algorithms to solve the porous medium equation (Isaacson
and Keller, 1994; Rostamian, 2014a);

(5) Finite element methods (FEM) for solving second order elliptic partial diﬀerential
equations on arbitrary two-dimensional domains through unstructured triangular
meshes and linear elements (Gockenbach, 2006; Szab´o and Babuˇska, 2021);
(6) Neural networks (NN) applied to solving ordinary and partial diﬀerential equa-

tions (Lagaris et al., 1998; Sirignano and Spiliopoulos, 2018).2

In Spring 2021, based on the students’ backgrounds and interests, we selected the
topics 1, 4, and 5 from the above list. In view of the interdependencies of the contents
of the various chapters as seen in Figure 2, we included several prerequisite chapters,
which led to the following complete course syllabus:

Chapter 7: Memory allocation.

Dynamic allocation of memory lies at the core of practically every scientiﬁc com-
puting program in C. This chapter sets up a safe “wrapper” around the C Standard

2Two chapters on the applications of neural networks to solving diﬀerential equations were added after the
textbook was published. These extra chapters are available for downloading as PDF ﬁles from the textbook’s
website (Rostamian, 2014b).

6

atrices
m
ack
arse
mfp
U
2.
3.
1
1

d

Wavelets

O
I/
ge
a
Im
4.
1

Mea
lists
D
1
Nelder–
ked
in
Lin
D
F
0.
8.
6.
2
1
1

a
u
q
uss
a
G
2.
2

n

drature

drature
ulatio
a
u
q
B
Tria
W
T
4.
3.
2
2

g
n

1
M
E
F
5.
2

arycentric

Es
D
O
–
N
N
7.
2

B
A.

c

allo
array.h
m
X
7.

8.

9.

line
m
o
d
Fetch
n
a
R
0.
1

p
S
1.
1

7. Xmalloc
8. array.h
9. Fetch line
10. Random
11. Sparse matrices
12. Umfpack
13. Wavelets
14. Image I/O
15. Image analysis
16. Linked lists
17. Evolution
18. Nelder–Mead
19. Trusses
20. FD in 1D
21. Porous medium
22. Gauss quadrature
23. Triangulation
24. TWB quadrature
25. FEM 1
26. FEM 2
27. NN – ODEs
28. NN – PDEs
A. Barycentric

•

• •
• •
• •
• •
• •
• •
•
• •
• •
• •
• •
• •

• •
• •
• •
• •
• •
• •

•

••

•

•

•

• •
• •

•

• •

•

•
•

•
• •

••

• •

•
•
•

•

Figure 2. To ﬁnd the prerequisites of a chapter, ﬁnd the chapter title along the left edge, go across hori-
zontally to the bullet marks, and then go vertically to the prerequisite chapters. For instance, Chapter 23:
Triangulation depends on Chapter 7: Xmalloc, and Chapter 8: array.h. Chapters prior to Chapter 7 are
not listed; these provide a general background for the entire book and should be considered prerequisites for
everything.

7

Library’s malloc() function to verify the success of the calls to malloc() and to
take appropriate action in case of failure.

Chapter 8: Vectors and matrices. Almost all of the book’s projects call for allocat-
ing and freeing of memory for vectors and matrices of dynamically determined di-
mensions. This chapter puts the C preprocessor to good use by producing generic
macros that perform the arduous task of constructing and freeing vectors and
matrices of arbitrary dimensions.

Chapter 18: The Nelder–Mead simplex method. The Nelder–Mead algorithm is
a robust method for locating the minima of functions of the type f : Rn → R.
The great appeal of the Nelder–Mead algorithm lies in the fact that it requires
neither the diﬀerentiability of f , nor a knowledge of its gradient. That should
be contrasted against the conjugate gradient algorithm and its variants, which do
call for the knowledge of the often mathematically and computationally expensive
calculation of the gradient.

Chapter 20: Finite diﬀerence methods. This chapter introduces several ﬁnite dif-
ference algorithms for solving the one dimensional time dependence heat equation
∂t = ∂2u
∂u
∂x2 . The methods include the well-known explicit and implicit Euler and the
Crank–Nicolson algorithms, as well as the lesser known but very versatile Seidman
scheme.

Chapter 11: Sparse matrices. As a ﬁrst step toward the implementation of the ﬁnite
element methods of chapters 25 and 26, this chapter introduces the concept of
Compressed Column Storage (CCS) form for memory-eﬃcient storage of large
sparse matrices. The ideas discussed here form the foundation for understanding
and appreciating the details of the next chapter’s Umfpack library.

Chapter 12: The UMFPACK library. The Umfpack is an open source library
that incorporates state-of-the-art algorithms for solving algebraic linear systems
of equations Ax = b, where A is an n × n matrix and b is an n-vector. Umfpack
is particularly eﬃcient when solving large sparse linear systems. That is exactly
the type of system that arises when solving partial diﬀerential equations through
the ﬁnite element method.

Chapter 23: Triangulation of polygons. Meshing or

triangulation is a critical
step in solving partial diﬀerential equations by a ﬁnite element method on polygo-
nal domains. It involves partitioning of the domain into a union of non-overlapping
triangles. It can be shown that the ﬁnite elements discretization error is the small-
est when the triangulation involves no triangles with sharp angles. The award-
winning and open-source Triangle library produces quality triangulations that
come close to the best that can be achieved within the limitations of the domain’s
constraints.

Appendix A: Barycentric coordinates. The geometry of the individual triangles
in a domain’s triangulation is best expressed in barycentric coordinates. This
appendix provides a quick overview of the barycentric coordinates. The material
here is essential for understanding the developments in chapters 24 through 26.

Chapter 24: Integration on triangles. The entries of the matrix A and vector b
noted in the earlier paragraph on Umfpack are produced through integration over
individual triangles of a triangulated domain. This chapter presents a relatively
recent accurate and eﬃcient method for numerical integration on triangles (Taylor
et al., 2007a,b).

Chapter 25: Finite elements (part 1). This chapter introduces a basic ﬁnite ele-
∂x2 +

ment scheme with linear basis elements for solving the Poisson problem ∂2u

8

Figure 3. Samples of solutions of Poisson’s partial diﬀerential equation produced by the ﬁnite elements solver.
On the left we have an L-shaped domain with holes, and zero Dirichlet boundary data. On the right we have
a square domain with zero Dirichlet data speciﬁed on three edges, and a prescribed ﬂux on the fourth edge..

∂2u
∂y2 + f (x, y) = 0, on an arbitrary polygonal domain, possibly with polygonal
holes, and null Dirichlet data. The solution involves triangulating the domain
with Chapter 23’s Triangle library, calculating the stiﬀness matrix by integrat-
ing over the triangles through Chapter 24’s algorithms, and solving the resulting
linear system with Chapter 12’s Umfpack.

Chapter 22: Gaussian quadrature. This chapter develops tools for integrating
functions of a single variable through Gaussian quadrature. The material here
can be useful on its own—see (Atkinson, 1989; Kincaid and Cheney, 2002) for
in-depth coverage—but our main objective is directed toward Chapter 26 where
we will be solving partial diﬀerential equations with prescribed boundary ﬂuxes.
Chapter 26: Finite elements (part 2). This chapter extends Chapter 25’s elemen-

tary treatment of ﬁnite elements to the elliptic equation

∇ · (η(x, y)∇u) + f (x, y) = 0,

where ∇ is the gradient operator and η(x, y) is a prescribed, and generally variable,
diﬀusion coeﬃcient. Arbitrary Dirichlet and Neumann data may be speciﬁed on
the boundary. The ﬁnite elements formulation then calls for the integration of the
Neumann data on the domain’s boundary. The integration is performed through
Gaussian quadrature introduced in Chapter 22.

Chapter 26 is only brieﬂy introduced at the end of the semester. Students are encour-
aged to take MATH 4373/5373: Finite Element Methods (FEM) in scientiﬁc computing,
a new course developed for University of Arkansas students. This course is under con-
tinuous development to provide a broad range of support to the students in science and
engineering departments. Bangerth (Zarestky and Bangerth, 2014) describes a practi-
tioner’s approach to using the principles of reﬂective writing and journaling to connect
the material of the video lectures to student projects in a project-based course on FEM,
MATH 676, oﬀered at Texas A&M University.

2.2. Performance Assessments

Performance assessments are based on 60% assignments and 40% ﬁnal project. Assign-
ments are designed to focus on solving speciﬁc problems through the projects listed
in section 2.1.2. Each project’s mathematical background and the complex aspects of

9

the required programming are explained in class. The students are asked to complete
the missing parts of the project. To receive full credit, the resulting programs need to
compile without warnings and errors, and run successfully.

The ﬁnal projects are designed to utilize visual, verbal, and written presentation
skills—all essential ingredients for practical and successful research. For students who
are involved in research outside of this course, eﬀort is made to pick projects that
utilize algorithms that may be applicable to their research. For others, speciﬁc projects
are oﬀered and assigned by the instructor.

The objectives of this course are achieved by completing the ﬁnal projects. Consid-
ering the students’ backgrounds, the ﬁnal projects are chosen from a wide range of
applications from variable stars to self-driving cars. The student with a mathematics
major (see Figure 1) chose his ﬁnal project on the graph isomorphism problem which is
a computational problem in graph theory consisting of understanding and implement-
ing an eﬃcient algorithm to determine whether two graphs are isomorphic. The student
with a double major in Computer Science and Computer Engineering and Mathematics
completed a ﬁnal project on reinforcement learning for self-driving cars which rely on
sensor inputs to perceive the environment and move safely without human interaction.
The instructor meets the students twice to assign a project related to their interests
and follow-up on progress made before the ﬁnal presentations. At the beginning of the
semester, each student gives a short presentation to outline his/her research interest.
At the middle of the semester, the student gives a short presentation to show his/her
progress on the project. The students write a two page ﬁnal project report using the
sample LaTeX template provided by the instructor. This report includes sections on
the problem description, the algorithm to solve the problem, and the implementation
details of the algorithm outlining the results that they have achieved. In additional to
this written report, the students give a 15–20 minute presentations at the end of the
semester.

Each student’s opinion matters, therefore the students are asked to ﬁll out and submit
the peer evaluation and feedback form that includes 10 questions. Students judge and
evaluate the presentations of each peer based on the presenter’s explanation of the topic.
The presentation is rated on a ﬁve point scale range from poor = 1, fair = 2, good = 3,
very good = 4, and excellent = 5. The poor-to-excellent rating scale provides a measure
of the student’s performance.

(1) The presenter delivered the material in a clear and structured manner.
(2) The presenter was knowledgeable about the topic.
(3) The presenter maintained my interest during the presentation.
(4) The presenter answered questions eﬀectively.
(5) The presenter was enthusiastic about the topic.
(6) The presenter was well organized and prepared.
(7) The presentation was concise and informative.
(8) The presentation contained practical examples and useful techniques that applied

to current work.

(9) The visual aids were eﬀective.
(10) Overall, I would rate this presentation as.

The instructor collects the evaluation forms and reviews them to assign the ﬁnal grade
according to the percentage scale A ≥ 90, B ≥ 80, C ≥ 70, D ≥ 60, F < 60.

10

2.3. Educational activities

For the beneﬁt of the graduate and undergraduate students, the SIAM3 student chap-
ter at the University of Arkansas holds seminars and lecture series to provide a learn-
ing environment outside of the existing classes speciﬁcally to develop and improve the
students’ mathematical and programming skills. The SIAM seminars help students to
connect with faculty and l earn more about the ongoing projects in various sciences
and engineering departments. The lecture series are designed to provide extra help to
students who have had no or very little experience in programming in C and using high
performance computing systems.

We begin the semester with a lecture series that introduces programming in C in the
Linux environment. We explain fundamental UNIX/Linux commands and how to use
text editors such as vim, nano, and pico. Working on a command-line in a terminal
emulator, and reading and editing programs in a text editor is a new experience for
most of the students. With theory and hands-on exercises as a part of the computational
activities, the students learn the basics in three 50-minute lectures. The lecture series
are used to complement the weekly course activities and serve as an infrastructure for
the course.

A vital pedagogical need is the monitoring of students to verify that they follow every
step of the process to fully comprehend the material. We have hands-on sessions after
the lectures. Students work in groups on the computer-based solution of mathematical
problems that range from simple to complex. Whenever possible, we pair an undergrad-
uate student with a graduate student to provide mentorship and facilitate solving the
problems.

3. Undergraduate Opportunities

In this section, we present the undergraduate research opportunities made available
annually in the Computational and Applied Mathematics (CAM) research group at
the University of Arkansas, to help and encourage undergraduate students to engage
in computational research. The positions are created under the auspices of Shodor
(http://www.shodor.org/)„ a non-proﬁt foundation and a national resource for com-
putational science education, with a mission to improve mathematics and science educa-
tion through the eﬀective use of modeling and simulation technologies—“computational
science”.

Under Shodor, the National Computational Science Institute (NCSI)(http://
computationalscience.org) provides workshops on computational science for educa-
tors at all levels to give them ideas and resources to use in their classrooms. The NCSI is
responsible running undergraduate student programs such as the Blue Waters internship
(https://bluewaters.ncsa.illinois.edu/internships) and XSEDE–EMPOWER
(Extreme Science and Engineering Discovery Environment–Expert Mentoring Produc-
ing Opportunities for Work, Education, and Research) to increase the number of stu-
dents interested in developing computational skills (http://computationalscience.
org/xsede-empower).

A faculty member at an U.S. academic institution who would like to mentor an under-
graduate student submits a research proposal to the NCSI program to create a position
in his/her research group. The program provides a stipend for students per quarter,
semester, summer or longer, depending on the expected level of eﬀort. Undergraduate

3Society for Industrial and Applied Mathematics

11

students from any U.S. degree-granting institutions are matched with a mentor who has
a project that contributes to the work of XSEDE (Towns et al., 2014). There are three
tiers of participation for students, depending on their skill levels: learner, apprentice,
and intern (http://computationalscience.org/xsede-empower). The learner level
is for a student who has no experience in scientiﬁc computing. The student spends time
developing necessary skills to contribute to the work through online tutorials, work-
shops, and self learning in programming. At the apprentice level, the student begins to
transform the knowledge into skills, and has the opportunity to apply the new skills with
some additional training in debugging and performance tools to perform the assigned
tasks. After completing these two levels in two semesters, the students are accepted as
interns in the program.

The CAM group leader has created several projects for the undergraduate students
who wish to gain research experience during their studies. The goal of these projects is
to engage the students in petascale/exascale computing research in the areas of mod-
eling and simulations; numerical methods and performance optimization. As part of
the Blue Waters (https://bluewaters.ncsa.illinois.edu/) eﬀorts to motivate and
train the next generation of supercomputing researchers, two University of Arkansas
undergraduate students, Edwards (major in Mathematics, minor in Physics/Computer
Science) and McGarigal (major in Mechanical Engineering, minor in Mathematics) were
elected as the 2018–2019 Blue Waters Student Interns. The mentor of two undergrad-
uate students in this year-long internship was responsible for teaching and introducing
the use of HPC for the numerical simulations of ﬂow problems in the area of com-
putational ﬂuid dynamics. To be able to work on the proposed project, the students
had to develop skills in programming languages; parallel programming models (MPI
on distributed memory, OpenMP on shared memory); scientiﬁc visualization (VisIt);
performance analysis tools (TAU, CPMAT); and usage of the Blue Waters systems
environment. The usage of HPC systems requires familiarity with compilers on Linux
systems, submitting batch scripts, and running and debugging programs. The visualiza-
tion of simulation results was done through the open source, interactive, scalable, tool
VisIt (https://visit.llnl.gov/). The performance analysis of the software written
during the internship was done using several diﬀerent proﬁling tools, such as GNU pro-
ﬁling tool (gprof), the Cray Performance Measurement and Analysis Tools (CPMAT),
and Tuning and Utility Analysis (TAU). With the help of these proﬁling tools, the
students were able to identify performance bottlenecks in the application code, visual-
ize the data, and achieve performance improvements through hybrid (MPI+OpenMP)
programming. This modiﬁed hyper-threading version of the code was set up in a way
that multiple message passing interface (MPI) processes handle the interface propaga-
tion, whereas multiple OpenMP threads handle the higher order weighted essentially
non-oscillatory numerical scheme. This undergraduate research project was selected for
publication in the Journal of Computational Science Education (Kaman et al., 2021).
The directed reading course–MATH 400V–, designed to help the students who have no
or very little experience in programming, is used as the building blocks for the two-week
crash course of MATH 4343 on the C programming language, and the programming
environment on the university’s high performance computing system. Students who
complete MATH 4343 with grades of “A” are accepted to the CAM group to perform
more independent work and to become more fully engaged in research.

After the research experience in the CAM group, almost all students choose to pur-
sue graduate studies and continue to work on CSE research projects. For instance;
Edwards (Blue Waters Intern) was one of ten students accepted to the Oak Ridge Na-
tional Laboratory’s Pathways to Computing Internship Program to learn and develop

12

the next-generation explicit methods for radiation transport in astrophysics and ex-
plore programming models for GPU supported on the fastest supercomputer in the
world, Summit (TOP500.org, 2021). In Fall 2021, she started her graduate studies in
the Computational and Mathematical Sciences at the Florida State University. Drinh
(XSEDE 2019 learner) was accepted to the University of Missouri-Kansas City. De-La
Cruz (XSEDE 2021 apprentice and intern) intends to pursue a Ph.D. in CSE after
graduating from University of Ozarks in 2021.

4. Evaluation of the Course

The course is evaluated based on the six questions listed in Table 2. It shows the
percentage of students who responded to the questions with SA, A, U, D, SD, which
stand for strongly agree, agree, undecided, disagree and strongly disagree respectively.
The instructor performance is evaluated based on the three questions listed in Table 3.
The students rate this course and the instructor as excellent (50%) and good (50%).
See Table 4.

Table 2. Course evaluation survey. Responses: [SA] Strongly Agree=5, [A] Agree=4,
[U] Undecided=3, [D] Disagree=2, [SD] Strongly Disagree=1.

Questions

Q1. Assignments are related to goals of this course.
Q2. The teaching methods used in this course enable
me to learn.
Q3. The stated goals of this course are consistently
pursued.
Q4. I actively participate in class activities and dis-
cussions.
Q5. I put much eﬀort into this course.
Q6. My problem-solving abilities improved because of
this course.

Responses(%)
A

SA
25% 75%
50% 50%

U
0
0

D SD
0
0
0
0

50% 50%

0

0

25% 50% 25% 0

50% 25% 25% 0
0
25% 75%

0

0

0

0
0

Table 3.
[U] Undecided=3, [D] Disagree=2, [SD] Strongly Disagree=1.

Instructor evaluation survey. Responses: [SA] Strongly Agree=5, [A] Agree=4,

Questions

Q1. My instructor displays a clear understanding of
the topic.
Q2. My instructor is readily available for consultation.
Q3. My instructor explains diﬃcult material clearly.

Responses(%)

SA
75% 25% 0

U D SD
0
0

A

75% 25% 0
50% 50% 0

0
0

0
0

Table 4. Rate the course and the instructor. Responses: [E] Excellent=5,
[G] Good=4, [F] Fair=3, [P] Poor=2, [VP] Very Poor=1 .

Questions

Overall, I would rate this course as:
Overall, I would rate this instructor as:

Responses(%)

E

G

F
50% 50% 0
50% 50% 0

P VP
0
0
0
0

5. Concluding Remarks and Future Plans

In this paper, we have introduced the MATH 4343 “Introduction to Scientiﬁc Comput-
ing”, a course designed and ﬁrst taught in Spring 2021 at the University of Arkansas, to

13

Figure 4. The domain Ω (on the left) and the graph of solution (on the right) of the nonlinear boundary
value problem (1). The grid on the surface is drawn for visualization purposes only; the neural network solver’s
algorithm is mesh-free.

engage undergraduate students in research and to train them as future computational
scientists and engineers. The focus of this interdisciplinary undergraduate course is on
formulating a diverse set of challenging interdisciplinary problems into mathematical al-
gorithms, and implementing these algorithms on high performance computing systems.
This helps develop the students’ skill in mathematics, programming, computational
modeling, simulation, visualization, and eventually prepares them for graduate studies
and future careers in research and industry.

In Spring 2022, the number of students enrolled increased by 70% relative to that
of the Spring 2021 semester. In addition, four graduate students (one geosciences and
three mathematics) have sought permission to enroll in this undergraduate course. We
are considering oﬀering the equivalent of this course in the future at the graduate level,
and begin to target graduate students not only in applied mathematics but also in other
science and engineering programs.

We envision that the contents of the course will evolve in response to the shifting
interests of the students, as well as those of the instructors. In view of the recent de-
velopments on the applications of neural network models to machine learning and “big
data”, we intend to introduce projects on neural networks in MATH 4343 course in the
immediate future. As it was brieﬂy noted in section 2.1.2, two new chapters on neural
networks have been added to the course’s textbook, and therefore we have ready-made
material to work with. The two chapters highlight the application of neural networks
to solving boundary value problems for nonlinear ordinary and partial diﬀerential equa-
tions. The mesh-free approach developed there enables students to solve signiﬁcantly
complex problems which minimal eﬀort. Here, for instance, is a boundary value problem
for a nonlinear PDE on a non-trivial two-dimensional domain:

x

∂2u
∂x2 +

∂2u
∂y2 +

4

1 + u2 = 0
u = 0

in Ω,

on ∂Ω.

(1)

Figure 4 shows the domain Ω and the graph of the solution u(x, y) produced by our
neural network. Implementing the neural network can be done fairly quickly since, as can
be seen in Figure 2, there are only four prerequisite chapters to apply neural networks
for solving ordinary and partial diﬀerential equations. The construction of the domain
Ω and the enforcing of the boundary conditions, is made possible through Rvachev’s
R-functions (Rvachev and Sheiko, 1995; Shapiro, 2007) which are introduced in the
course’s textbook’s Chapter 28.

14

Acknowledgements

This research is supported by the Arkansas High Performance Computing Center which
is funded through multiple National Science Foundation grants and the Arkansas Eco-
nomic Development Commission. Use of computational facilities on the Pinnacle at
the University of Arkansas is gratefully acknowledged. This work was supported by
a grant from the Shodor Education Foundation through Blue Waters Student Intern-
ship Program. This research is part of the Blue Waters sustained-petascale computing
project, which is supported by the National Science Foundation (awards OCI-0725070
and ACI-1238993) and the state of Illinois. Blue Waters is a joint eﬀort of the Uni-
versity of Illinois at Urbana-Champaign and its National Center for Supercomputing
Applications. This work used the Extreme Science and Engineering Discovery Environ-
ment (XSEDE) bridges.psc.xsede.org at the Pittsburgh Supercomputing Center through
allocation DMS190029.

References

Atkinson, K. E. (1989). An Introduction to Numerical Analysis. Wiley, New York, 2nd edition.
Barski, C. (2011). Land of Lisp: Learn to Program in Lisp, One Game at a Time! No Starch

Press, San Francisco, CA.

Code, W., Merchant, S., Maciejewski, W., Thomas, M., and Lo, J. (2016). The mathematics
attitudes and perceptions survey: an instrument to assess expert-like views and disposi-
tions among undergraduate mathematics students. International Journal of Mathematical
Education in Science and Technology, 47(6):917–937.

Dewdney, A. K. (1989). Simulated Evolution: Wherein bugs learn to hunt bacteria. Scientiﬁc

American, 260(5):138–141.

Gockenbach, M. S. (2006). Understanding and Implementing the Finite Element Method.

SIAM, Philadelphia.

Gurtin, M. E. and MacCamy, R. C. (1977). On the diﬀusion of biological populations. Math-

ematical Biosciences, 33(1–2):35–49.

Isaacson, E. and Keller, H. B. (1994). Analysis of Numerical Methods. Dover Publications

Inc., New York. Corrected reprint of the 1966 original.

Kaman, T., Edwards, A., and McGarigal, J. (2021). Performance analysis of the parallel
CFD code for turbulent mixing simulations. Journal of Computational Science Education,
12:49–58.

Kincaid, D. and Cheney, W. (2002). Numerical Analysis: Mathematics of Scientiﬁc Computing.

American Mathematical Society, Providence, RI, 3rd edition.

Kochan, S. G. (2014). Programming in C. Addison-Wesley, fourth edition.
Lagaris, I. E., Likas, A., and Fotiadis, D. I. (1998). Artiﬁcial neural networks for solving ordi-
nary and partial diﬀerential equations. IEEE Transactions on Neural Networks, 9(5):987–
1000.

Nelder, J. A. and Mead, R. (1965). A simplex method for function minimization. The Computer

Journal, 7(4):308–313.

Nievergelt, Y. (2013). Wavelets Made Easy. Birkh¨auser, Boston, MA. 2nd printing with

corrections.

Press, W. H., Teukolsky, S. A., Vetterling, W. T., and Flannery, B. P. (1992). Numerical

Recipes in C. Cambridge University Press, Cambridge, UK, 2nd edition.

Rostamian, R. (2014a). Programming Projects in C for students of Engineering, Science, and

Mathematics . Society for Industrial and Applied Mathematics, Philadelphia, PA.

Rostamian, R. (2014b). The website associated with the book Programming Projects in C,

SIAM. www.siam.org/books/cs13, (accessed December 1, 2021).

15

R¨ude, U., Willcox, K., McInnes, L., and Sterck, H. (2018). Research and education in compu-

tational science and engineering. SIAM Review, 60(3):707–754.

Rvachev, V. L. and Sheiko, T. I. (1995). R-functions in boundary value problems in mechanics.

Applied Mechanics Reviews, 48(4):151–188.

Shapiro, V. (2007). Semi-analytic geometry with R-functions. Acta Numer., 16:239–303.
Sirignano, J. and Spiliopoulos, K. (2018). DGM: A deep learning algorithm for solving partial

diﬀerential equations. Journal of Computational Physics, 375:1339–1364.

Stollnitz, E. J., DeRose, T. D., and Salesin, D. H. (1995). Wavelets for computer graphics: A

primer, part 1. IEEE Computer Graphics and Applications, 15(3):76–84.

Stollnitz, E. J., DeRose, T. D., and Salesin, D. H. (1996). Wavelets for Computer Graphics:

Theory and Applications. Morgan Kaufmann Publishers, San Francisco, CA.

Szab´o, B. and Babuˇska, I. (2021). Finite Element Analysis. John Wiley & Sons Inc., New

York.

Taylor, M. A., Wingate, B. A., and Bos, L. P. (2007a). A cardinal function algorithm for com-
puting multivariate quadrature points. SIAM Journal on Numerical Analysis, 45(1):193–
205.

Taylor, M. A., Wingate, B. A.,
formulas

quadrature
<http://arxiv.org/abs/math/0501496v2>:1–14.

polynomial

and Bos, L. P.
in
integration

for

(2007b).
the

triangle.

Several

new
arXiv,

TOP500.org (2021). Top 500 list. https://www.top500.org/ (accessed December 1, 2021).
Towns, J., Cockerill, T., Dahan, M., Foster, I., Gaither, K., Grimshaw, A., Hazlewood, V.,
Lathrop, S., Lifka, D., Peterson, G. D., Roskies, R., Scott, J., and Wilkins-Diehr, N. (2014).
Xsede: Accelerating scientiﬁc discovery. Computing in Science & Engineering, 16(05):62–74.
Turner, P., Petzold L., and Shiﬂet, A., Vakalis, I., Jordan, K., and John, S. (2011). Under-
graduate computational science and engineering education. SIAM Review, 53(3):561–574.
V´azquez, J. L. (2007). The porous medium equation. Oxford Mathematical Monographs. The

Clarendon Press, Oxford University Press, Oxford, UK. Mathematical theory.

Zarestky, J. and Bangerth, W. (2014). Teaching high performance computing: Lessons from
a ﬂipped classroom, project-based course on ﬁnite element methods. In Proceedings of the
Workshop on Education for High-Performance Computing, EduHPC ’14, pages 34–41. IEEE
Press.

16

