MathPartner Computer Algebra
G. I. Malaschonok 

(Preprint of: Programming and Computer Software,  43, 2  (2017) 112-118) 

Abstract     In this paper, we describe the general characteristics of the MathPartner computer 
algebra system (CAS) and its Mathpar programming language. The MathPartner can be used for 
scientific and engineering calculations, as well as in secondary schools and higher education 
institutions. It allows one to carry out both simple calculations (acting as a scientific calculator) 
and complex calculations with large-scale mathematical objects.  The Mathpar is a procedural 
language that supports a large number of elementary and special functions, as well as matrix and 
polynomial operators. This service allows one to build function images and animate them. The 
MathPartner   also   makes   it   possible   to   solve   some   symbolic   computation   problems   on 
supercomputers with distributed memory. We highlight the main differences of the MathPartner 
from other CASs and describe the Mathpar language along with the user service provided.

1. INTRODUCTION

      There are several generations in the history of computer algebra systems (CASs). 

The first generation dates back to the 1960s–1970s. 
       Graphics-oriented systems, which appeared in the early 1990s, constitute the second CAS 
generation; as an example we can point to the Mathematica and Maple commercial systems, 
which are still the most popular CAS instruments. 
      The third generation is associated with cloud-oriented CASs like, for example, MathPartner, 
Sage, Wolfram Alpha, and Wolfram Cloud, which appeared in the 2010s. These systems are now 
becoming increasingly popular.  
           A CAS is a software product characterized by: algebraic algorithms employed, software 
technologies supported, and application domain intended. 
      The history of constructive algebra and algebraic algorithms extends back over more than a 
century.  In   turn,   current   investigations   in   this   field   depend   heavily   on   the   capabilities   of 
presently-available CASs, as well as on the characteristics of the  applied problems that can be 
solved within a reasonable time. 
      It is interesting to trace how the CAS application areas were changed. Initially, the main CAS 
application area covered symbolic computations in theoretical physics and celestial mechanics. 
One of the first CASs  was  the Schoonschip, developed by Martinus J.G. Veltman,  a Dutch 
physicist, in the 1960s during his work at the Stanford laboratory. This system was put into use 
by Gerardus’t Hooft, a student of Veltman. Hooft proved that non-Abelian gauge theories can be 
renormalized. In 1999, Veltman and Hooft shared the Nobel Prize in Physics "for elucidating the 
quantum structure of electroweak interactions" [1].  A descendant of the Schoonschip was the 
FORM system developed by Jos Vermaseren from the Dutch National Institute for Subatomic 
Physics (Nikhef) [2]. Its development began in 1984. To learn more about the CAS history, one 
may refer to [3, 4]. 
      The advent of the second CAS generation expanded the CAS application area considerably. 
These systems became popular among many teachers and students of engineering and natural 
science disciplines, as well as among many engineers and scientists.  Wolfram Research Inc. 
began to adapt the Mathematica system to secondary schools. The documentation on the Maple 
and   Mathematica   systems   can   be   found   at   www.maplesoft.com   and   www.wolfram.com, 
respectively. 
      And yet, among those who study and employ mathematics, the percentage of CAS users still 

remains   low,  which   is   mainly   because   these   systems   are   difficult   to   master   and   require 
purchasing a license. 
      With cloud CASs, these obstacles can be overcome. Let us point to their basic features. 
– Cloud systems can be accessed from any computer connected to the Internet. 
–   They   provide   users   with   advanced   services,   including   a   workbook   with   a   user-friendly 
interface. 
–   A   fundamental   difference   with   the   new-generation   CASs   is   the   possibility   of   solving   the 
problems that cannot be solved on a personal computer. This can be done through the access to 
parallel software packages installed on a computer cluster with distributed memory.  The user 
does not need to worry about computing resources, since the cloud system is able to undertake 
the control of the computational process. 
– An important feature is the support of the RESTFul protocol for data communication with 
other   Internet-connected   devices.  Computational   results   can   be   obtained   by   the   cloud   CAS 
independently (without human assistance). 
– Mathematical calculations in the form of the text files containing program code can be stored 
in shared libraries.
–  Any mathematical problem can be solved by uploading such a text file from a shared library to 
the cloud workbook. Mathematics textbooks and reference books can be complemented with the 
libraries containing text files with the corresponding algorithms designed for computations in the 
cloud workbook. 
– A cloud CAS can provide an educational service, including a library of tests, automatic test 
checking, and storing test results in the student's record book. 
      The MathPartner system was one of the first cloud CASs [5]. 
      This project has been started in 2002  by a Tambov working group on computer algebra.  The 
basis of the MathPartner software package are the algorithms developed at the Lvov, Kiev, and 
Tambov State Universities (more details are available on the Internet [6]). 
      Over the years, the development of the algorithms and programs for the MathPartner project 
involved:   A.A.   Betin,   I.A.   Borisov,   Yu.D.   Valeev,   E.V.   Dubovitskii,   A.M.   Dobychin,   M.S. 
Zuev,   D.S.   Ivashov,   E.A.   Il'chenko,   S.A.   Kireev,   V.A.   Korabel'nikov,   V.N.   Kazakov,   A.O. 
Lapaev, G.I. Malaschonok (head), O.N. Pereslavtseva, A.G. Pozdnikin, M.A. Rybakov, O.A. 
Sazhneva,   R.A.   Smirnov,   M.V.   Starov,   S.M.   Tararova,   S.A.   Khvorov,   D.I.   Shlyapin,   A.S. 
Shcherbinin, and Yu.Yu. Yurin. Since 2011, the project is being developed by the Mathparca.  
      Let us highlight the main differences of the MathPartner from other CASs. 

2. GENERAL INFORMATION ABOUT THE MATHPARTNER

        The MathPartner is a universal cloud-oriented system for symbolic computations, which is 
based   on   some   open-source   software   packages.  The   MathPartner   kernel   is   a   mathematical 
software package written in Java.   
         The  user language  is  called  Mathpar.  Having  the syntax  that  maximally  resembles  the 
standard   mathematical   notation,   this   language   can   be   regarded   as   a   dialect   of   the   LaTeX 
language, which is extended with operators for symbolic computations, image visualization, and 
environment setting. 
        Having entered the MathPartner website, each user is provided with a personal workbook. 
This workbook has an active window through which the user can enter certain text (which is 
enclosed in double quotes) and mathematical expressions written in the Mathpar language. 
      The user can create new active windows in his or her workbook and run programs in any of 
the windows independently. In this case, all the windows use the same space of variables. 
      The user can save (to his or her computer) and, if needed, upload (to the workbook) original 
text files in the Mathpar language. The MathPartner allows the user to get LaTeX and PDF  files 
and to save them.  
      In addition, the MathPartner makes it possible to create and store 2D and 3D images and to 

animate them. The user can build images of tabulated functions, select certain regions on these 
images, mark points, construct approximations, make notations, and so on. 
           The   Mathpar   is   a   procedural   language   and   can   be   used   to   write   user   programs.  The 
MathPartner system has quite a wide area of application. It can be used as a simple calculator, 
scientific calculator, software system for symbolic computations, and interface to a computer 
cluster with distributed memory. 
      Moreover, the MathPartner allows one to import and export large-scale mathematical objects 
such as functional or numeric matrices and complex composite functions or polynomials with a 
large number of monomials. There is no need to fully upload such objects to the workbook: they 
can be stored (as files) on the user computer.  To import and export large-scale mathematical 
objects, the following Mathpar operators are used: fromFile() and toFile(). 
        The Mathpar language also contains some operators that enable symbolic computations on 
distributed-memory supercomputers. These operators can be used by the registered users. 

3. ABOUT THE MATHPAR LANGUAGE

The MathPartner allows the users to upload and run programs written in the Mathpar 

language. Below is the general description of the Mathpar. 
   – The Mathpar language employs common LaTeX symbols and contains assignment operators, 
calculation operators, control operators, environment operators, and plot operators. The system 
uses simple text files with the text written in the Mathpar language, which can be created, edited, 
and saved just like standard text files encoded in UTF-8. 
   – The Mathpar defines environment operators for setting the space of mathematical objects. 
The environment  determines  the underlying  set of numbers, algebraic  operations  in this  set, 
names of variables, and some constants. 
– A Mathpar program and computational results can be represented in the form of an editable 
source text or a PDF image. The user can change the view in the workbook.
– The Mathpar defines a group of operators for solving computational problems on a computer 
cluster with distributed memory. 

The Mathpar is a procedural language. To learn more about the Mathpar, one can visit the 
help page on the project website, download the Mathpar language guide from the website, or see 
[7–11]. Below, we describe only its basic features. 

4. SETTING THE COMPUTATIONAL ENVIRONMENT

The environment defines the space wherein computations are carried out. It allows one to 
specify the underlying set of numbers, algebraic operations in this set, names of variables, and 
some constants. 

By default, the space 

 is set. It is a space of four variables (ranked as x < y < 
z < t) over the set of approximate real numbers, which are stored in a 64-bit machine word (type 
"double" for C and Java). 

To change the environment, it is required to execute the command for setting a new 

environment, for instance, SPACE = Q[x] or SPACE = Z[c, b, a]. 

The user can select one of the following number sets: Z; Zp= /p  (p > 2, where p is a 
,   where   p   is   a   MOD32   environment 
MOD   environment   constant);   Zp32= /p   (p   <  
constant); Z64=
; Q; R is a set of approximate real numbers for which the 
number of digits in the mantissa is determined by the ACCURACY environment constant, while 
the machine epsilon is determined by the MachineEpsilonR constant; R64 is a set of approximate 
real numbers (52 bits represent the mantissa and 11 bits represent the exponent) for which the 
machine   epsilon   is   determined   by   the   MachineEpsilonR64   constant;   and   R128   is   a   set   of 
approximate real numbers (128 bit). Another eight number sets---CZ, CZp, CZp32, CZ64, CQ, 

 
C, C64, and C128---are obtained by complexifying the above eight sets. More information about 
these and other environment constants can be found in the user manual. 

Such an explicit setting by the user of a numerical environment for symbolic calculations 
is due to the increased requirements for modern CAS. It should be noted that most CASs fix only 
one environment that cannot be changed by the user. 

The majority of users will be satisfied with the environment set by default; it, however, 

will not be sufficient for many other users. 

For instance, to carry out approximate computations with a given number of exact digits 
in arithmetic operations and a given value of the “machine epsilon”, one can set the space R and 
select the corresponding constants.  

If it is required to carry out computations over a set of complex numbers, then the space 
C should be selected. If only rational computations need to be carried out, then the space Q will 
be an appropriate choice. 

When there is a need to prepare some tasks for pupils who are familiar only with integers 

or only with fractional numbers, the spaces Z or Q should be set, respectively. 
Without setting a proper environment, the user cannot carry out computations, whether it be in 
finite fields, tropical mathematics, etc. 

When an integer has more than 300 decimal digits, it cannot be written in an approximate 
form (in a variable of the double data type) because of the overflow. However, it can be written 
as a number of the R128 type, since this data type provides  64 extra bits for the exponent. 
Moreover,   if   necessary,   the   user   can   execute   standard   mathematical   operations   over   such 
numbers. 

All this extends the capabilities of the CAS, which becomes a flexible and convenient 

tool. 

An important feature of the MathPartner system is dividing all symbolic variables into 

two sets: a set of symbols and a set of variables defined in the SPACE and selected by the user.

If the user has specified variables in statement  SPACE, then the compiler will generate 
polynomials and polynomial fractions from these variables, just like some standard objects. For 
these objects, efficient computational algorithms will be applied.

5. MAIN CLASSES OF OPERATORS

5.1. Mathematical Symbols and Functions 

The symbols 
 and 

language (

 are written with an additional symbol "  "). 

, 

, 

, 

, and 

 are defined, which are written just like in the LaTeX 

The functions defined in the Mathpar language are described in the user manual (see also 
the help page on the official website). For the convenience of the user, functions can be selected 
and transferred to the book from a pull-down side menu.

5.2. Standard Sets of Operators

Like other CAS languages, the Mathpar uses the following standard sets of operators: 

  – Operators for numbers. 
  – Operators for integers (particularly). 
  – Operators for fractions and rational functions. 
  – Operators for function evaluation in probability theory and mathematical statistics, which are 
defined for continuous random variables, discrete random variables, or samples. 
  – Boolean operators for the set {true, false}={1, 0} and matrices over it. 
  – Comparison operators for numbers. 
  – Set theory operators for the algebra of subsets of real numbers: 
denoted by 

, and a complement 

. 

 
 
  – Operators for constructing random mathematical objects: numbers, polynomials, and matrices 
over numbers or polynomials. 

5.3. Operators over Polynomials in Many Variables

This is a principal set of operators for any CAS. In the MathPartner, the representation of 
polynomials  in many variables is selected so as to ensure the efficiency of computations with 
large sparse polynomials. 

It should be noted that, for polynomials, an F4 algorithm is implemented to compute the 
   of the ideal generated by a finite set  of polynomials  (

Groebner basis   

). 

There is also an algorithm 

 for reducing the polynomial 

by using the polynomials 
algorithm evaluates the reduction modulo the ideal generated by them.  

. If these polynomials constitute the Groebner basis, then the 

If   the   variety   of   solutions   for   a   system   of   nonlinear   algebraic   equations 
  has a zero dimension, then this system can be solved by the operator 
. 

The operator 

 calculates the roots of a polynomial 

. The set wherein the 
roots   are   found   depends   on   the   space   (SPACE)   selected.  If   the   space   is   defined   over   real 
numbers, then all real roots are found; if it is defined over complex numbers, then all complex 
roots are found; in the other cases, the roots containing radical signs and literal parameters are 
found (if possible). 

Complexity estimates of the polynomial algorithms can be found in [12]. 

The number of publications [6] concerning the algorithms employed in the MathPartner project 
exceeds two hundred papers, which is why we refer here only to the selected ones. 

5.4. Matrices and Vectors

The set of symbolic matrix operators holds a central position in the MathPartner system. 

Experiments   showed   that,   in   terms   of   computational   efficiency   and   functionality,   these 
operators, in certain cases, are superior to those used in other CASs. 

Take, for example, a 12 12 matrix in which the elements denoted by 

 are independent 

symbols and the other elements are zero: 

 .

The   determinant   of   this   matrix   can   be   evaluated   in   the   MathPartner,   but   not   in   the 

Mathematica and not in the Maple. 

Below are the matrix operators of the Mathpar language. 

  –  
  –  

 is the kernel of the operator (null space). 

  or 

 is the transposition. 

 
                                             
 or 

 is the conjugation. 

is the echelon form.

 or A^{\times} is the closure, i.e., the sum 

 or A^{-1} is the inverse of a matrix.
 or A^{\star}  is the adjoint of a matrix.

 or A^{+} is the Moore–Penrose pseudoinverse.
is the characteristic polynomial.

  –  
  –  
 –  det() is the determinant.
 –  rank() is the rank.
 –  
  –  
  –  
  –  
–  
–  
example,   solves the system of inequalities  
Note that here one can obtain both rational solutions and solutions with an accuracy required. 
   –   LSUWMdet(A) is the triangular LSU factorization of a matrix, which yields five matrices 
L,S,U,W,M.  The   product  LSU    corresponds   to   the   original   matrix  A.  Here,  
  is   a   lower 
triangular matrix,  
  is an upper triangular matrix,  S  is a permutation matrix multiplied by a 
diagonal matrix.   More over P=det^(-2)*WSM is the inverse matrix for the matrix A. If the 
matrix A is not invertible then P is a pseudo inverse: P=PAP and A=APA.
    –    
, where 
matrices 
multiplied by a diagonal matrix (the product 

  is   the   Bruhat   decomposition   of   a   matrix,   which   yields   three 
 is a permutation matrix 

  are   used   to   solve   linear   programming   problems.  For 
  is minimal. 

 corresponds to the original matrix). 

 are upper triangular matrices and 

  so that the scalar product  

  and  

 and 

.

It should be noted that the triangular cofactors calculated in the last two operators belong 
to   the   same   commutative   domain   as   the   elements   of   the   original   matrix,   and   the   diagonal 
matrices comprise some of the elements from the quotient field of this domain.  These matrix 
algorithms are described in [12–16]. 

5.5. Systems of Linear Differential Equations with Constant Coefficients

This is another area where MathPartner outperforms both Mathematica and Maple. It 
solves large systems of linear differential equations with constant coefficients under given initial 
conditions. For example,

defines the system of differential equations 

is the specification of initial conditions.  
Here, 
  – 
  – 
  – 

 is the derivative f with respect to the variable t,  

 is the kth derivative f with respect to t,  

 is the k-th derivative f with respect to t in the point 

 or 

 for 

. 

The algorithms for solving systems of differential equations are described in [17–19]. 

 
5.6. Noncommutative Objects

All symbolic variables are regarded as commutative ones, except for those whose names 
).  Hence, for 

are capitalized and begin with the symbol  backslash  (for example,  

,  

, the result is zero, while, for  \A*\B-\B*\A, the result is  \A*\B-\B*\A,. 

5.7. Computations in Tropical Algebras

An important feature of the MathPartner system is the support of symbolic computations 

in tropical algebras. 

The following idempotent semifields are defined: ZMaxPlus, ZMinPlus (on the set Z), 
RMaxPlus,   RMinPlus,   RMaxMult,   RMinMult   (on   the   set   R),   R64MaxPlus,   R64MinPlus, 
R64MaxMult, and R64MinMult (on the set R64). 

The   following   idempotent   semirings   are   defined:   ZMaxMin,   ZMinMax,   ZMaxMult, 
ZMinMult   (on   the   integer   set   Z),   RMaxMin,   RMinMax   (on   the   set   R),   R64MaxMin,   and 
R64MinMax (on the set R64). 

There   are,  in total,  18  algebras   of different  types.  Below  is   an example  of  a simple 

problem in ZMaxPlus: 

        SPACE = ZMaxPlus[];
        a=2; b=9; c=a+b; d=a*b; \print(c,d);
The result is c=9; d=11.

A unary closure operator is defined as 

 (where a is a number or a matrix) and 

evaluates the expression 

. 

In tropical semifields, there are following operators:  

  – 
  – 
  – 

 solves a system of equations 
 solves a system of Bellman equations 
 solves a system of Bellman inequalities 

;

;

5.8. Graph Problems

When, for a graph, a matrix 

 of distances between adjacent vertices is defined, 

 – 
  – 

 finds the least distances between all vertices, and  

 finds the shortest path between two vertices 

 and 

. 

6. PROCEDURES, FUNCTIONS, AND CONTROL OPERATORS

The   body   text   of   a   program   can   be   preceded   by  procedures  and  functions.  Their 
declaration   begins   with   the   functional   word   procedure  followed   by   a   name   and   (if   any) 
arguments   enclosed   in   parentheses.  The   function   must   have   a   return   operator   ( return 
objectName), while the procedure can have an exit operator ( return). 

Procedures and functions have the following syntax: 

  – 

    All functional words, operator names, and function names are preceded by the symbol 

" ". Hereinafter, for simplicity, we omit this symbol and write the operators in bold. 
Like C and Java, the Mathpar supports the following control operators: 

  –  
  –  
–  

 is the branching operator; 

 is the pre-test loop; 

 is the for-loop.

 
7. VISUALIZATION 

The system has a full set of standard tools for constructing 2D and 3D plots and animations. 

7.1. 2D Plots of Functions

The operators for constructing 2D plots of functions are as follow:  

  –  

 constructs a plot for an explicit function 

, 

; 

 constructs a plot for a parametric function X = X(x), Y = Y(x), 

; 

 constructs a plot for a function given by a value table (all points are successively 

connected by straight lines);  
  –  
connected) and allows a text label to be placed near any point;  

 constructs a plot for a function given by a value table (points are not 

 creates text labels (one can specify the position of the label, font size, and the slope 

of the label);  
  –  

 depicts several plots on one image. 

The system allows the users to select certain segments of the plots, animate them, and 

change many of their parameters. See the user manual for more details. 

7.2. Surface Images 

Modern graphics cards make it possible to construct high-quality images  on the user 
computer. For this purpose, they must be provided with the grid of the surface to be visualized, 
along with some additional parameters. However, the user may not have such a graphics card; in 
this case, the whole image is constructed on the server. 

The Mathpar language supports two types of operators for constructing 3D plots. 

1. Image is constructed on the side of the server:

    –  

    –  

, 

, 

; 

, 

  constructs   a   plot   for   an   explicitly   defined   surface 

, 

  constructs   a   plot   for   a   parametrically   defined   surface 

, 

, 

. 

2. Image is constructed on the side of the client:

  – 

  – 

 – 
, 

; 

, 

, 

 constructs a plot for an explicitly defined surface 

, 

 constructs a plot for a parametrically defined surface 

, 

, 

; 

 constructs a plot for an implicitly defined surface 

, 

. 

, 

, 

8. CLUSTER COMPUTATIONS

The MathPartner  is capable  of connecting to a computer  cluster and enables  parallel 
computations   with   certain   operators   on   the   cluster.  The   corresponding   parallel   computing 
algorithms are described in [20, 21]. 

For cluster computations, the following constant cluster parameters should be specified: 
TOTALNODES   is   the   total   number   of   cluster   nodes   allocated   for   computations, 
PROCPERNODE is the number of MPI processes to be run on one node, CLUSTERTIME is the 
maximum runtime (in minutes) of a program, and MAXCLUSTERMEMORY is the amount of 

memory   allocated   to   the   Java   Virtual   Machine. 
implemented. 

For classical spaces (Z[x]): 

 The   following   parallel   operators   are 

  –  

 – 
–  

 calculates the matrix inverse (adjoint matrix and determinant). 

For tropical spaces (R64MaxPlus[x]):  

 solves a system of Bellman equations 
 solves a system of Bellman inequalities 

;
 and 

.

REFERENCES

1. Hooft, G. and Veltman, M.J.G., Elucidation of the quantum structure of electroweak interactions, Usp. 
Fiz. Nauk, 2000, vol. 170, no. 11, pp. 118–1224.
2. Blumlein, J., Broadhurst, D.J., and Vermaseren, J.A.M., The multiple zeta value data mine, Comput. 
Phys. Commun., 2010, vol. 181, pp. 582–625.
3. Computer Algebra: Symbolic and Algebraic Computation, Buchberger, B., Collins, G.E., and Loos, R., 
Eds., New York: Springer, 1983, 2nd ed.
4. Gathen, J. von zur and Gerhard, J., Modern Computer Algebra, Cambridge Univ. Press, 2013.
5. Malaschonok, G.I., Way to parallel symbolic computations, Proc. Int. Conf. Cloud Computing, 
Education, Research, Development, Moscow, 2011. unicluster.ru/conf/2011/docs.
6. Publications of MathPartner Project. http://mathpar.com/downloads/publications2015.pdf.
7. Malaschonok, G.I., Language Guide “Mathpar”, Tambov: Publishing House of TSU, 2013.
8. Malashonok, G.I., On the project of parallel computer algebra, Vestn. Tambov. Univ. Ser. Estestv. 
Tekh. Nauki, 2009, vol. 14, no. 4, pp. 744–748.
9. Malashonok, G.I., Project of parallel computer algebra, Vestn. Tambov. Univ. Ser. Estestv. Tekh. 
Nauki, 2010, vol. 15, no. 6, pp. 1724–1729.
10. Malaschonok, G.I., Pereslavtseva, O.N., and Ivashov, D.S., Parallel Symbolic Computation: 
Supercomputer Technologies in Science, Education, and Industry, Sadovnichiy, V.A., Savina, G.I., 
Voevodin, V.V., Eds, Moscow State Univ. Press, 2013.
11. Kireev, S.A. and Malaschonok, G.I., Tropical computing with the web service MathPartner, Tambov 
Univ. Rep. Ser. Nat. Tech. Sci., 2014, vol. 19, no. 2, pp. 539–550.
12. Malaschonok, G.I., Valeev, Yu.D., and Lapaev, A.O., On the choice of multiplication algorithm for 
polynomials and polynomial matrices, Zap. Nauchn. Semin. POMI, 2009, vol. 373, pp. 157–188.
13. Malaschonok, G.I., Effective matrix methods in commutative domains, Formal Power Series and 
Algebraic Combinatorics, Krob, D., Mikhalev, A.A., and Mikhalev, A.V., Eds., Berlin: Springer, 2000, 
pp. 506–517.
14. Akritas, A.G. and Malaschonok, G.I., Computations in modules over commutative domain, Proc. Int. 
Workshop on Computer Algebra in Scientific Computing, Berlin: Springer, 2007, pp. 11–23. 
15. Malaschonok, G.I., Generalized Bruhat decomposition in commutative domains, Proc. Int. Workshop 
on Computer Algebra in Scientific Computing, Berlin: Springer, 2013, pp. 231–242.
16. Malaschonok, G. and Scherbinin, A., Triangular decomposition of matrices in a domain, Proc. Int. 
Workshop on Computer Algebra in Scientific Computing, Switzerland: Springer, 2015, pp. 290–304.
17. Malaschonok, N.A., Parallel Laplace method with assured accuracy by symbolic computations, Proc. 
Int. Workshop on Computer Algebra in Scientific Computing, Berlin: Springer, 2006, pp. 251–260.
18. Malaschonok, N.A., An algorithm for symbolic solving of differential equations and estimation of 
accuracy, Proc. Int. Workshop on Computer Algebra in Scientific Computing, Berlin: Springer, 2009, pp. 
213–225.
19. Malashonok, N.A. and Rybakov, M.A., Symbolic–numerical solution of systems of linear ordinary 
differential equations with required accuracy, Program. Comput. Software, 2013, vol. 39, no. 3, pp. 150–
157.
20. Malaschonok, G.I. and Valeev, Y.D., Recursive parallelization of symbolic-number algorithms, 
Tambov Univ. Rep. Ser. Nat. Tech. Sci., 2006, vol. 11, no. 4, pp. 536–549.
21. Malaschonok, G.I., Avetisan, A.I., Valeev, Yu.D., and Zuev, M.S., Parallel algorithms of computer 
algebra, Proc. Inst. Syst. Program. Rus. Acad. Sci., Ivannikov, V.P., Ed., Moscow: TSP RAS, 2004, vol. 
8, no. 2, pp. 169–180. 

