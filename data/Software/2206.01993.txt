2
2
0
2

g
u
A
6

]
h
p
-
p
m
o
c
.
s
c
i
s
y
h
p
[

2
v
3
9
9
1
0
.
6
0
2
2
:
v
i
X
r
a

KSSOLV 2.0: An eﬃcient MATLAB toolbox for solving the Kohn-Sham
equations with plane-wave basis set(cid:63)

Shizhe Jiaoa, Zhenlin Zhanga, Kai Wua, Lingyun Wana, Huanhuan Maa, Jielan Lia, Sheng Chena, Xinming Qina, Jie
Liua, Zijing Dinga, Jinlong Yanga, Yingzhou Lib,∗, Wei Hua,∗, Lin Linc,d,∗, Chao Yangd,∗

aSchool of Future Technology, Department of Chemical Physics, and Anhui Center for Applied Mathematics, University of Science and
Technology of China, Jinzhai Road No.96, Hefei, 230026, PR China
bSchool of Mathematical Sciences, Fudan University, Handan Road No.220, Shanghai, 200433, PR China
cDepartment of Mathematics, University of California, Berkeley, CA 94720, USA
dApplied Mathematics and Computational Research Division, Lawrence Berkeley National Laboratory, Berkeley, CA 94720, USA

Abstract

KSSOLV (Kohn-Sham Solver) is a MATLAB toolbox for performing Kohn-Sham density functional theory (DFT)
calculations with a plane-wave basis set. KSSOLV 2.0 preserves the design features of the original KSSOLV software
to allow users and developers to easily set up a problem and perform ground-state calculations as well as to prototype
and test new algorithms. Furthermore, it includes new functionalities such as new iterative diagonalization algorithms,
k-point sampling for electron band structures, geometry optimization and advanced algorithms for performing DFT
calculations with local, semi-local, and hybrid exchange-correlation functionals. It can be used to study the electronic
structures of both molecules and solids. We describe these new capabilities in this work through a few use cases. We
also demonstrate the numerical accuracy and computational eﬃciency of KSSOLV on a variety of examples.

Keywords:
Kohn-Sham Solver, MATLAB, Plane-wave basis set, Density functional theory, Numerical algorithms.

Program Summary
Program title: Kohn-Sham Solver 2.0 (KSSOLV 2.0)
CPC Library link to program ﬁles:
repository
Developer’s

link:
https://bitbucket.org/berkeleylab/kssolv2.0/src/release/

Licensing provisions: BSD
Programming language: MATLAB
Nature of problem: KSSOLV2.0 is used to perform
Kohn-Sham density functional theory based electronic
structure calculations to study chemical and material
properties of molecules and solids. The key problem
to be solved is a constrained energy minimization prob-
lem, which can also be formulated as a nonlinear eigen-
value problem.

Solution method: The KSSOLV 2.0 implements both
the self-consistent ﬁeld (SCF) iteration with a variety

(cid:63)This paper and its associated computer program are available via
the Computer Physics Communications homepage on ScienceDirect

∗Corresponding author.
Email addresses: yingzhouli@fudan.edu.cn (Yingzhou Li),
whuustc@ustc.edu.cn (Wei Hu), linlin@math.berkeley.edu
(Lin Lin), chaoyang@lbl.gov (Chao Yang)

of acceleration strategies and a direct constrained min-
imization algorithms. It is written completely in MAT-
LAB and uses MATLAB’s object oriented program-
ming features to make it easy to use and modify.

1. Introduction

KSSOLV (Kohn-Sham Solver) [1] is a MATLAB
(Matrix Laboratory) toolbox for performing Kohn-sham
density functional theory (DFT) [2, 3] based electronic
structure calculations. It uses the plane-wave basis set
to represent electron wavefunctions. One of the orig-
inal motivations for developing such a software pack-
age was to make it easy to prototype and test new algo-
rithms for solving the Kohn-Sham nonlinear eigenvalue
problems. KSSOLV leverages the high quality numeri-
cal linear algebra functions and object-oriented features
of MATLAB to enable researchers who have minimal
knowledge of other electronic structure calculation soft-
ware written in FORTRAN or C/C++ to quickly mod-
ify existing algorithms, as well as to develop and test
new ideas. Over the last decade, KSSOLV has be-

Preprint submitted to Computer Physics Communication

August 9, 2022

 
 
 
 
 
 
come a useful research and teaching tool for studying
electronic structures of molecules and solids and devel-
oping new methods for solving the Kohn-Sham prob-
lem, as evidenced by an increasing number of publi-
cations that use KSSOLV to perform numerical exper-
iments required to demonstrate improved convergence
or better accuracy of new theoretical methods and nu-
merical algorithms. Examples of such developments in-
clude tensor hypercontraction algorithm [4], improved
generalized Davidson algorithm [5], elliptic precondi-
tioner in self-consistent ﬁeld iteration [6], low rank ap-
proximation in G0W0 calculations [7], perturbation the-
ory [8], quantum embedding theory [9], quantum com-
putation [10], linear-response time-dependent density
functional theory [11, 12], phonon calculations [13],
proximal gradient method [14], trace-penalty minimiza-
tion method [15].

As KSSOLV becomes more widely used, it also be-
comes clear that the functionalities supported in the
original KSSOLV software package are insuﬃcient. For
example, the original KSSOLV could only be used to
perform single-point calculations of the ground state en-
ergies for molecules placed in a large supercell, and
only the local density approximation (LDA) exchange-
correlation functional was implemented. Moreover, the
pseudopotentials supported in the original KSSOLV did
not clearly specify the type of pseudopotentials used and
did not allow widely accepted pseudopotential libraries
to be easily incorporated. The lack of these functionali-
ties makes the comparison of KSSOLV with other soft-
ware packages somewhat diﬃcult.

types,

To address these issues, we have recently re-
vamped the development of KSSOLV by adopting
more standard pseudopotential
such as the
ONCV (Optimized Norm-Conserving Vanderbilt) [16]
and Hartwigsen-Goedecker-Hutter(HGH) [17] pseu-
dopotentials. We have incorporated more recent al-
gorithmic development, and added new functionalities
and features without sacriﬁcing the usability of the soft-
ware. The new software release, KSSOLV 2.0, is an
open source software1.
In addition to being a ﬂex-
ible tool for new algorithm development, KSSOLV
2.0 can also be easily used to study the properties of
molecules and solids. It serves as both a research and
teaching tool for researchers engaged in the simula-
tion and prediction of chemical and material properties,
such as linear-response time-dependent density func-
tional theory [11], many-electron self energy calcula-
tions [18], structure optimization [19], photocatalytic

1Bitbucket

repository with

documentation:

https:

//bitbucket.org/berkeleylab/kssolv2.0/src/release/.

materials simulations [20].

[35], PWmat

We strive to make KSSOLV 2.0 as eﬃcient as pos-
sible without sacriﬁcing its readability and usability.
In addition to traditional platforms, the software can
also be run on heterogeneous architectures with graph-
ics processing units (GPUs) [21]. However, KSSOLV
2.0 is not designed for performing large-scale elec-
tronic structure calculations. For these types of calcu-
lations, many existing software tools can be used alter-
natively, such as Gaussian [22], NWChem (NorthWest
computational Chemistry) [23], Q-CHEM [24], BDF
(Beijing Density Functional program package) [25],
and PySCF (Python-based Simulations of Chemistry
Framework) [26] within Gaussian-type orbital (GTO)
basis set; SIESTA (Spanish Initiative for Electronic
Simulations with Thousands of Atoms) [27], HONPAS
(Hefei Order-N Packages for Ab initio Simulations) [28,
29, 30], FHI-aims (Fritz Haber Institute ab initio molec-
ular simulations) [31] and ABACUS (Atomic-orbital
Based Ab-initio Computation at Ustc) [32] within nu-
merical atomic orbital (NAO) basis set; and VASP (Vi-
enna Ab initio Simulation Package) [33], ABINIT [34],
[36],
QE (QUANTUM ESPRESSO)
PWDFT (Plane-Wave Density Functional Theory) [37]
within plane-wave basis set. These DFT codes are of-
ten written in languages such as FORTRAN and C++,
and parallelized with OpenMP, MPI, and CUDA. The
compilation, installation and usage of these software
packages often take a signiﬁcant amount of eﬀort. Our
software is more similar to some other recently devel-
oped DFT toolboxes such as GPAW(Grid-based Pro-
jector Augmented Wave) [38, 39], M-SPARC (Matlab-
Simulation Package for Ab-initio Real-space Calcula-
tions) [40] and PWDFT.jl [41], DFT.jl [42], which
are based on higher-level scripting languages such as
Python, Julia, and MATLAB. We should point out that
the M-SPARC software, which is written in MATLAB,
focuses on a real space discretization of the Kohn-
Sham problem whereas KSSOLV uses a plane-wave
discretization. The main characteristics of these soft-
ware packages are shown in Table 1. The advantage of
KSSOLV is that it is written completely in MATLAB,
which is designed to perform linear algebra operations
in a straightforward manner. MATLAB also provides an
excellent Integrated Development Environment(IDE),
which makes the development process much easier than
other software tools. Furthermore, the unique proﬁling
capability of MATLAB allows us to easily identify com-
putational bottlenecks.

This work is organized as follows. In the next sec-
tion, we brieﬂy summarize the main methodology and
standard methods implemented in KSSOLV for solving

2

Table 1: The characteristics of several DFT software packages, including programming language, basis, license, language type and publish year.
GTOs: gaussian-type orbital (GTO) basis set, NAOs: numerical atomic orbital basis set, PW: plane-wave basis set. AE: all electronic calculation,
NCPPs: norm-conserving pseudopotentials, ECP: eﬀective core potential, PAW: projector augmented wave. GPL: GNU General Public License,
ECL-2.0: Educational Community License, BSD: Berkeley Software Distribution License.

Software
Gaussian
NWChem
QChem
BDF
SIESTA
HONPAS
FHI-aims
ABACUS
VASP
ABINIT
QE
PWmat
PWDFT
GPAW
KSSOLV
PySCF
M-SPARC
PWDFT.jl
DFT.jl

Language
Fortran
Fortran
Fortran
Fortran
Fortran
Fortran
Fortran
Fortran
Fortran
Fortran
Fortran
Fortran
C/C++
Python
MATLAB
Python
MATLAB
Julia
Julia

Basis
GTOs
GTOs/PW
GTOs
GTOs
NAOs
NAOs
NAOs
NAOs/PW
PW
PW
PW
PW
PW
PW
PW
GTOs
RS
PW
PW

AE/PSP
AE/ECP
AE/PAW
AE/ECP
AE
NCPPs
NCPPs
AE
NCPPs
PAW
NCPPs/PAW
NCPPs/PAW
NCPPs
NCPPs
PAW
NCPPs
AE; NCPPs
NCPPs
NCPPs
NCPPs

License
Commercial
Free, ECL-2.0
Academic, commercial
Free, GPL
Free, GPL
Free, GPL
Academic, commercial
Free, GPL
Commercial
Free, GPL
Free, GPL
Commercial
Free, BSD
Free, GPL
Free, BSD
Free, BSD
Free, GPL
Free, GPL
Free, GPL

Language type
Compiled language
Compiled language
Compiled language
Compiled language
Compiled language
Compiled language
Compiled language
Compiled language
Compiled language
Compiled language
Compiled language
Compiled language
Compiled language
Interpreted language
Interpreted language
Interpreted language
Interpreted language
Interpreted language
Interpreted language

Year
1970
1994
1997
2009
1996
2005
2009
2016
1989
1998
2001
2013
2017
2003
2009
2014
2019
2020
2021

Reference
[22]
[23]
[24]
[25]
[27]
[28]
[31]
[32]
[33]
[34]
[35]
[36]
[37]
[38]
[1]; This work
[26]
[40]
[41]
[42]

the Kohn-Sham DFT problem, as well as a number of
recently developed and more advanced algorithms. We
highlight the object-oriented design feature of KSSOLV
in section 3, and demonstrate several main features of
KSSOLV 2.0 through a number of use cases in sec-
tion 4. The accuracy and eﬃciency of KSSOLV 2.0 are
reported in section 5 for several small to medium sized
benchmark test problems.

2. Methodology

KSSOLV 2.0 is designed to perform Kohn-Sham den-
sity functional theory (KS-DFT) based electronic struc-
ture calculations. In this section, we brieﬂy describe the
main mathematical problem to be solved, namely, the
Kohn-Sham nonlinear eigenvalue problem, or equiva-
lently, the Kohn-Sham total energy minimization prob-
lem.
In KSSOLV 2.0, the eigenfunction to be com-
puted is expanded in a plane-wave basis, which will
be discussed brieﬂy in section 2.1.2. A key compo-
nent of the Kohn-Sham Hamiltonian operator is the
exchange-correlation (XC) potential that accounts for
many-body eﬀects in a many-electron system. We de-
scribe the XC functions implemented in KSSOLV 2.0
in section 2.1.3. KSSOLV 2.0 employs the pseudopo-
tential method which is commonly used to address the
weak singularity (cusp) in the nuclei-electron potential.
We brieﬂy discuss pseudopotentials used in KSSOLV
2.0 in section 2.1.4. Sections 2.2.1 and 2.2.2 are con-
cerned with several numerical algorithms used in KS-
SOLV 2.0 to solve the Kohn-Sham and related prob-

lems. In particular, we discuss new algorithms that have
been added in the latest release of KSSOLV 2.0 in sec-
tions 2.2.3, 2.2.4 and 2.3.

2.1. Mathematical formulation
2.1.1. Brief introduction of KS-DFT

The KS-DFT [2, 3] is the most widely used method-
ology to perform ﬁrst-principles calculations and ma-
terials simulations to study the electronic structure of
molecules and solids.

The key problem to be solved in KS-DFT based elec-
tronic structure calculation of an atomistic system with
Ne electrons is a nonlinear eigenvalue problem of the
form

ˆH(ρ)ψ j = ε jψ j,
(1)
where j = 1, 2, ..., Ne, ε1 ≤ ε2 ≤ · · · ≤ εNe are Ne
eigenvalues of ˆH(ρ). They are known as the Kohn-Sham
eigenvalues associated with the corresponding eigen-
functions ψ j’s, also known as the occupied orbitals or
states. The function ρ is the electron density deﬁned (at
zero temperature) as

ρ =

Ne(cid:88)

j=1

|ψ j|2.

(2)

The Kohn-Sham Hamiltonian ˆH to be partially diag-

onalized is a functional of ρ (and consequently ψ j’s.)

Equation (1) is the ﬁrst order necessary condition as-

sociated with a constrained minimization problem

min
(cid:104)ψi,ψ j(cid:105)=δi, j

Etot({ψi}),

(3)

3

where Etot is a total energy functional that consists of
both kinetic and various potential terms [3], i.e.

Because u j,k is periodic, it can be expanded by plane-

wave basis functions, i.e.,

Etot = Ekin + EHartree + Eion + Enuc + Exc,

(4)

where Ekin represents the kinetic energy, EHartree is
the potential energy induced by electron-electron repul-
sion, Eion is the potential energy induced by nucleus-
electron attraction, Enuc is the potential energy induced
by nucleus-nucleus repulsion, and Exc is the exchange-
correlation energy that accounts for the many-body ef-
fects unaccounted in the preceding terms. The mathe-
matical expressions for these energy terms can be found
in the standard literature [43, 44].

As a result, the Kohn-Sham Hamiltonian ˆH appeared

in (1) can be partitioned accordingly, i.e.

ˆH = ˆT + ˆVHartree + ˆVion + ˆVxc,

(5)

where ˆT is the kinetic energy operator, ˆVion is the ionic
potential operator, ˆVHartree is the Hartree potential oper-
ator and ˆVxc is the exchange-correlation potential oper-
ator. We again refer readers to standard literature [44]
for analytical expressions for each one of these terms.

2.1.2. Plane-wave basis set

The Kohn-Sham Hamiltonian is periodic for solids.
For such periodic systems, we solve (1) by focusing on
one period, often known as a primitive cell. It follows
from the Bloch’s theory that a Kohn-Sham orbital ψ j(r)
takes the form

ψ j,k = eikru j,k(r),

(6)

where u j,k(r) is periodic and k is a crystal momentum
vector in the ﬁrst Brillouin zone.

The occupied Kohn-Sham orbitals are indexed by
both j and k. The charge density is periodic and deﬁned
as

ρ(r) =

(cid:90)

|Ω|
(2π)3

ρk(r)dk,

BZ

(7)

where |Ω| is the volume of the primitive cell in the real
space, and

ρk(r) =

(cid:12)(cid:12)(cid:12)ψ j,k(r)

2

(cid:12)(cid:12)(cid:12)

,

Ne(cid:88)

j=1

The choice of a periodic unit cell is not unique. When
the unit cell is suﬃciently large in real space, the corre-
sponding unit cell in ﬁrst Brillouin zone is so small that
the integral in (7) can be approximated the evaluation of
ρk(r) at a single k-point, e.g., k = 0, also known as the
Γ-point.

4

u j,k(r) =

∞(cid:88)

(cid:96)=1

j,(cid:96)eigT
ck

(cid:96) r, ck
j,(cid:96)

=

(cid:90)

Ω

u j,k(r)e−igT

(cid:96) rdr,

(8)

where g(cid:96) is a lattice vector in the reciprocal space. As a
result, a Kohn-Sham orbital ψ j,k can be represented by

ψ j,k =

∞(cid:88)

(cid:96)=1

j,(cid:96)ei(k+g(cid:96))T r.
ck

This is the discretization scheme used in KSSOLV as
in other plane-wave based electronic structure calcula-
tion software packages.

In practice, the inﬁnite sum in (8) is truncated and ap-
proximated by a ﬁnite sum. As in all other plane-wave
based Kohn-Sham solvers, the truncation of the plane-
wave expansion is based on the following criterion

|k + g(cid:96)|2 < 2Ecut,

(9)

for some energy cut-oﬀ value Ecut. If the number of g’s
that satisfy this criterion is Ng, an approximation to the
Kohn-Sham orbital ψ j,k can be written as

ψ j,k(r) ≈

Ng(cid:88)

(cid:96)=1

j,(cid:96)ei(k+g j)T r.
ck

(10)

In a plane-wave basis set, the representations of ˆT
and ˆVHartree in (5) are particularly simple, i.e., they are
diagonal (or local). However, ˆVion and ˆVxc typically
have a more compact representation in real space. As
a result, when ψ j,k are discretized by a plane-wave ex-
pansion, the Kohn-Sham Hamiltonian ˆH is not con-
ˆH
structed or stored explicitly. The multiplication of
(which is called an implicit Hamiltonian) with ψ j,k can
be implemented eﬃciently by working with both the
real space and reciprocal space representations of ψ j,k.
The change of representation between real space and re-
ciprocal space is facilitated by Fast Fourier Transforms
(FFTs). This is a key feature of plane-wave based Kohn-
Sham equation solver.

2.1.3. Exchange-correlation functional

The exchange-correlation energy term Exc in (4)
and the exchange-correlation Hamiltonian term ˆVxc ac-
counts for the many-body eﬀects of electron interac-
tions. They are particularly signiﬁcant for KS-DFT. The
exact analytical forms of Exc and ˆVxc are unknown. Var-
ious approximations have been proposed. These include

the local density approximation (LDA) [45], general-
ized gradient approximation (GGA) [46], and the hy-
brid functional [47, 48, 49]. A hybrid functional in-
cludes a fraction of the exact exchange potential from
the Hartree-Fock (HF) [50] theory. Three widely used
hybrid functionals are shown in (11). In KSSOLV 2.0,
all three approximations have been implemented. Both
LDA and GGA are local in real space. Hence, apply-
ing these potential operators to a wavefunction is rela-
tively straightforward. However, the Hartree-Fock ex-
act exchange term in a hybrid functional is nonlocal,
and applying it to a wavefunction is more costly. How-
ever, eﬃcient methods for applying this term have been
developed [51, 52, 53, 54]. We will discuss eﬃcient
methods for working with hybrid functional KS-DFT in
section 2.3.

EPBE0
xc

EHSE
xc
EB3LYP
xc

= 1
4

+ 3
EHF
x
4
= 0.25EHF,SR
x
+ 0.2
= ELDA
x
ELDA
x

+ EPBE
c

EPBE
x
+ 0.75EPBE,SR
x
(cid:16)
x − ELDA
EHF
x
(cid:16)
+ 0.81

) + ELDA
c

(cid:16)

+ EPBE,LR
x
(cid:17) + 0.72
EGGA
c

− ELDA
c

+ EPBE
c
EGGA
x −
(cid:17)

,

(11)

2.1.4. Pseudopotential
KSSOLV adopts

the pseudopotential methodol-
ogy [55] to model the interaction between nuclei and
electrons. In this approach, core electrons are treated as
a part of an ionic core represented by a pre-computed ef-
fective potential. Only the valence electrons are present
in (1) and (2). For a plane-wave DFT code, the pseu-
dopotential method allows us to signiﬁcantly reduce the
computational cost by reducing the number of active
electrons and the number of planewaves required to rep-
resent eigenfunctions of the Kohn-Sham Hamiltonian.
The latter reduction is due to the fact that the use of
pseudopotential makes the eigenfunction of the corre-
sponding Kohn-Sham Hamiltonian less oscillatory.

There are two common types of pseudopotentials
in modern DFT computation, namely norm-conserving
pseudopotential (NCPP) and ultrasoft pseudopotential.
In general, the implementation of NCPPs is easier than
that for ultrasoft pseudopotentials [56, 57], and they
produce suﬃcient accuracy for many systems. There-
fore, NCPPs are the supported type of pseudopotentials
in KSSOLV.

A pseudopotential typically consists of a local com-
ponent Vloc(r) and a nonlocal component VNL(r, r(cid:48)). By
using the Kleinman-Bylander form of an atomic pseu-
dopotential, we can express VNL(r, r(cid:48)) in a low rank sep-

5

arable form

VNL(r, r(cid:48)) =

(cid:88)

lm

βlm(r)vlβlm(r(cid:48))∗,

(12)

where βlm(r) is a pseudo atomic wavefunction associ-
ated with the quantum numbers l and m, and vl is a
weighting factor that depends on the degree of spheri-
cal harmonic used in βlm.

There are many ways to construct pseudopotentials.
We refer readers to standard literature on this sub-
ject [44], like many other KS-DFT software tools, we
use pseudopotentials archived at a URL2 in KSSOLV.
KSSOLV 2.0 can read pseudopotential ﬁles in multi-
ple formats, and convert them to suitable real or re-
ciprocal space representations. The local and non-local
components are treated diﬀerently. The local compo-
nent is represented in real space and applied as a di-
agonal matrix. It is constructed by the summing local
atomic potentials re-centered at atomic positions. The
re-centering and the summation are carried out through
Fourier transforms. The nonlocal pseudo wavefunctions
are stored and applied in the reciprocal space. For atoms
of the same type, their nonlocal pseudo wavefunctions
are combined and transformed to reciprocal space via
spherical harmonic transform. The pseudo wavefunc-
tions for diﬀerent types of atoms are stored separately
without additional computation.

2.2. Algorithms implemented in KSSOLV 2.0 of conven-

tional calculations

In this section, we describe several standard algo-
rithms implemented in KSSOLV 2.0 for conventional
calculations, These include the self consistent ﬁeld
(SCF) iteration and direct energy minimization, matrix
diagonalization and geometry optimization. In addition,
we describe a method called SCDM (Select Column of
the Density Matrix) used to perform orbital localization.

2.2.1. Self consistent ﬁeld iteration and direct mini-

mization

When LDA or GGA is used in ˆVxc, the KS eigen-
value problem can be formulated as a set of nonlinear
equations satisﬁed by the ground state electron density
or potential [2], i.e.,

ρ = fKS(ρ),

(13)

where fKS(·) is known as the Kohn-Sham map [3].
This formulation suggests that the KS equations can be

2pseudopotentials homepage used by KSSOLV: http://
pseudopotentials.quantum-espresso.org/legacy_tables.

solved by a quasi-Newton method in which the Jacobian
of the Kohn-Sham map is approximated. To be speciﬁc,
the approximation to ρ can be updated as

ρk+1 = ρ(k) − ˆJ(ρ(k))

(cid:105)
(cid:104)
ρ(k) − fKS(ρ(k))

,

(14)

where ˆJ is an approximate Jacobian. This approach is
generally known as the self-consistent ﬁeld (SCF) it-
eration in the physics literature and is implemented in
KSSOLV. In this approach, the evaluation of the Kohn-
Sham map on the right hand side of (14) requires com-
puting eigenvalues and eigenvectors of the Kohn-Sham
Hamiltonian deﬁned at ρ(k), which will be discussed in
the next section.

There are many ways to approximate the Jacobian of
the Kohn-Sham map. The simplest is to take ˆJ = βI,
where 0 < β < 1 is a small constant and I is the identity
matrix. Such an approximation yields the so-call simple
mixing scheme described by

ρ(k+1) = βρ(k) + (1 − β) fKS(ρ(k)).

(15)

More sophisticated Jacobian approximate schemes
include the Anderson [58] or Pulay [59] mixing, two
types of Brodyen’s method and Kerker mixing [60],
which can also be viewed as a way to accelerate the
convergence of the quasi-Newton iteration (14) by pre-
conditioning the nonlinear equation (13) [61]. All these
Jacobian approximation and precondition methods have
been implemented in KSSOLV 2.0. In earlier work [62],
we have demonstrated how new preconditioners can be
easily implemented in KSSOLV.

An alternative approach to solving the Kohn-Sham
problem is to solve the constrained minimization prob-
lem (3) directly. This approach is known as direct min-
In KSSOLV, we implement a direct con-
imization.
strained minimization algorithm presented in [63]. In
each step of the algorithm, a subspace that consists of
the current approximation to the Kohn-Sham orbitals,
the preconditioned gradient of the Lagrangian and pre-
vious search direction is constructed. The update of the
wavefunction approximation is obtained by minimizing
the total energy (4) within this subspace. Trust region
techniques [64] can be used in the DCM algorithm to
stabilize the convergence of the iterative minimization
procedure. This is particularly useful for metallic sys-
tems at low temperature.

2.2.2. Eigensolver

When the SCF iteration is used to solve the Kohn-
Sham problem, the most time-consuming part of the
computation is the evaluation of the Kohn-Sham map

fKS(ρ). At a ﬁnite temperature, the Kohn-Sham map is
deﬁned as

fKS(ρ) = diag

(cid:34)(cid:18)

I + e

H(ρ)−µI
κBT

(cid:19)−1(cid:35)

,

(16)

where µ is the chemical potential, κB is the Boltzmann
factor and T is the temperature. The matrix exponen-
tial in (16) can be evaluated by a partial spectral de-
composition of H. In the limit of T = 0, (16) reduces
to (2). In this case, we only need to compute the left-
most Ne eigenvalues of H(ρ) and their corresponding
eigenvectors. For a ﬁnite temperature calculation, we
need to compute a few extra eigenvalues ε j and eigen-
vectors ψ j that have non-negligible occupation numbers
1/(1 + exp( ε j−µ

Because H is not explicitly stored as a matrix in KS-
SOLV, iterative eigensolvers are appropriate for com-
puting the desired eigenvalues and eigenvectors of H.
In KSSOLV, the default eigensolver employed in a
SCF iteration uses the locally optimal block precondi-
tioned conjugate gradient (LOBPCG) method [65]. The
method can be viewed as a constrained minimization
method for solving the equivalent trace minimization
problem

κBT )).

trace(XT HX),

min
XT X=I

(17)

where X is a matrix that contains the discretized Kohn-
Sham orbitals. Similar to other plane-wave based Kohn-
Sham solvers, KSSOLV stores the plane-wave expan-
sion coeﬃcients of each Kohn-Sham orbitals in X. In
each LOBPCG iteration, we need to multiply H with a
set of vectors. This is done by multiplying the kinetic
energy operator ˆT , the nonlocal part of the ionic pseu-
dopotential operator ˆVion and the Hartree potential oper-
ator ˆVHartree with the plane-wave expansion coeﬃcients
in the reciprocal space and transforming the result to a
real space grid (via FFTs) on which the local part of
ˆVion and the local exchange-correlation potential opera-
tor ˆVxc are applied.

In addition to LOBPCG, KSSOLV 2.0 also includes
an implementation of the Davidson-Liu [66] algorithm.
The algorithm can be viewed as a generalization of the
LOBPCG method in the sense that the update of the
eigenvector is obtained by projecting the ˆH into a pro-
gressively larger subspace constructed from the juxta-
position of preconditioned gradients of the Lagrangian
and the subspace constructed in the previous iteration,
and solving the projected eigenvalue problem. When
the dimension of the subspace reach a prescribed limit,
the procedure is restarted with the most recent approxi-
mation of the eigenvectors. Clearly, there is a trade-oﬀ
between the per iteration cost of the Davidson method,

6

which becomes higher if the maximum allowed dimen-
sion of the subspace (mD) is large, and the number of
restarts required to reach convergence, which becomes
lower when mD is larger.

Both the LOBPCG and Davidson solvers are block
eigensolver, i.e., in each iteration, the Hamiltonian is
applied to a block of vectors, and many other linear al-
gebra operations in the solver can be expressed in terms
of level-3 BLAS operations. These features can signiﬁ-
cantly enhance the concurrency of the computation and
take advantage of parallel computer architecture and
memory hierarchy.

Another block algorithm that has been demonstrated
to be very eﬃcient for solving large-scale Kohn-Sham
eigenvalue problem is the Chebyshev ﬁlter subspace it-
eration (CheFSI) [67]. This method is implemented in
KSSOLV 2.0 also. The CheFSI method constructs a
properly shift and scaled mth degree Chebyshev polyno-
mial Tm to amplify the contribution of the desired eigen-
vectors when Tm(H) is applied to a set of properly pre-
pared vectors in a subspace iteration. The multiplication
of Tm(H) with a block of vectors X can be implemented
via a 3-term recurrence. We do not need to solve a pro-
jected eigenvalue problem, i.e., we do not need to per-
form the Rayleigh-Ritz procedure in each subspace it-
eration. This can signiﬁcantly reduce the computational
cost for the problem with a large number of electrons.
The orthonormality of X in each iteration can be main-
tained by using the Cholesky QR procedure, which is
generally eﬃcient. The Rayleigh-Ritz procedure only
needs to be performed at the end of subspace iteration to
compute the occupation number for each desired eigen-
value.

Two other methods that are designed to reduce
the cost of Rayleigh-Ritz calculations in an eigen-
solver are the project preconditioned conjugated gra-
dient (PPCG) [68] method and the residual minimiza-
tion method with direct inversion in iterative subspace
(RMM-DIIS) [69] acceleration. Both methods are im-
plemented in KSSOLV 2.0 also. Although for most
small to medium sized problems to be solved by KS-
SOLV, the Rayleigh-Ritz cost in the block algorithms
discussed above is relatively small, the availability of
additional eigensolvers allows us to test and compare
convergence properties of these algorithms.

In PPCG, we apply the LOBPCG algorithm to each
approximate eigenvector separately, i.e. running the un-
blocked version of the LOBPCG method for each de-
sired eigenpair for a ﬁxed number of iterations. The
Rayleigh-Ritz procedures in these runs only need to
solve a set of 3 × 3 projected eigenvalue problems. A
global Rayleigh-Ritz procedure for all desired eigen-

7

pairs is only applied periodically at the end of a ﬁxed
number of unblocked LOBPCG iterations.

In RMM-DIIS, each approximate eigenpair is up-
dated separately by minimizing the residual (instead of
the Rayleigh-quotient) associated with the approximate
eigenpair within a progressively larger subspace incre-
mentally constructed from a set of previously approxi-
mations to the same eigenpair. When the initial guess
of the desired eigenpairs are suﬃciently accurate, no
Rayleigh-Ritz procedure is ever needed in RMM-DIIS.
This feature of the algorithm makes it ideal for solv-
ing large-scale problems that contain many electrons on
a parallel computer on which the reﬁnement of each
eigenpair can be carried out independently.

One of the key features of the eigenvalue problems
solved in each SCF iteration is that the accuracy re-
quired for the desired eigenpairs is generally lower in
early SCF iterations and higher in later iterations when
self-consistency is nearly reached. This is due to the
fact that in early iterations of the quasi-Newton algo-
rithm used to solve (13), the residual term ρ(k) − fKS(ρ(k))
on the right-hand side of (14) is relatively large even if
fKS(ρ(k)) is evaluated to full accuracy. As a result, we may
lower the accuracy requirement for fKS(ρ(k)), and conse-
quently the accuracy requirement for the solution of the
eigenvalue problem could be reached. As the SCF itera-
tion converges, a more accurate evaluation of fKS(ρ(k)).
Therefore, in KSSOLV 2.0, we use an adaptive strat-
egy to deﬁne the convergence criterion for each eigen-
pair. An approximate eigenpair (θ, ψ) is considered con-
verged if the relative residual norm

(cid:107)r(cid:107)/|θ| = (cid:107)Hψ − θψ(cid:107)/|θ|,

is less than a tolerance τ(k), where

τ = min(τ0, (cid:107)ρ(k) − fKS(ρ(k))(cid:107)/(cid:107)ρ(k)(cid:107)),

(18)

and τ0 is a maximal error tolerance set to 10−2 by de-
fault, but can be changed by a user.

Moreover, at a ﬁnite temperature, lower accuracy can
be tolerated for partially occupied states with low occu-
pation numbers.

2.2.3. Geometry optimization

In KSSOLV 2.0, we include the functionality to
compute atomic forces which are the derivatives of
Etot deﬁned in (4) with respect to atomic coordinates.
The derivatives can be taken with respect to either
the cartesian coordinates or relative coordinates of the
atoms [70]. The calculations of these forces make use
of the Hellmann-Feynman theorem [71]. The availabil-
ity of atomic forces allows us to optimize the atomic

structure of a molecule or solid. The calculations are
often referred to geometry optimization or structure re-
laxation. The goal of the optimization is to minimize
the total energy of the atomistic system with respect to
atomic coordinates. The atomic forces simply yield the
gradient of the objective function.

KSSOLV 2.0 leverages the standard unconstrained
minimization algorithm implemented in MATLAB’s
optimization box. The user has the option of using
MATLAB’s fminunc(Find minimum of unconstrained
multivariable function) function to perform the opti-
mization. By default, fminunc uses the BFGS (Broy-
den–Fletcher–Goldfarb–Shanno) [72] quasi-Newton al-
gorithm which constructs approximations to the Hes-
sian of the energy using gradients computed in suc-
cessive quasi-Newton iterations. One can also choose
the trust region algorithm, which is based on the
interior-reﬂective Newton method described in [73].

In addition to algorithms implemented in MATLAB
Optimization toolbox, one can also use other algorithms
such as the limited memory BFGS [74] algorithm im-
plemented in the HANSO package [75] or the nonlinear
conjugate algorithm [76] implemented by Overton [77].
Both algorithms contain a number of parameters that a
user can experiment with and adjust. KSSOLV 2.0 also
provides ample ﬂexibilities to utilize other optimization
algorithms. For example, we also implemented a ver-
sion of the FIRE (Fast Inertial Relaxation Engine) [78]
algorithm.

2.2.4. Orbital localization via selected column of den-

sity matrix

It is well known that electrons in insulating systems
obey the nearsightedness principle, i.e.
local electron
properties such as the electron density ρ(r) only depend
signiﬁcantly on the eﬀective potential at nearby points.
Mathematically, the nearsightedness principle translates
into the decay property of the single-particle density
matrix associated with the ground state of the atomistic
system, i.e., the magnitude of the matrix elements of the
density matrix decays rapidly away from the diagonal.
A direct consequence is that the occupied Kohn-Sham
orbitals can be rotated to a set of functions that span the
same invariant space, but have approximately localized
support. These localized orbitals can be used to develop
linear scaling methods for solving the Kohn-Sham prob-
lem and to develop eﬃcient post-DFT methods [79, 80].
There are several ways to construct localized or-
bitals. One of the most known technique is the maxi-
mally localized Wannier functions (MLWFs) proposed
by Marzari and Vanderbilt [81]. The MLWF method re-
quires solving a nonlinear optimization problem, whose

8

results can sometimes depend sensitively to the initial
guesses. Recently, an alternative method called Selected
Column of the Density Matrix (SCDM) [82] has been
proposed to construct localized orbital using a simple
linear algebraic procedure. Suppose Ψ is an N × Ne ma-
trix containing Ne approximate Kohn-Sham orbitals on
N real space grid points. The SCDM method performs
a rank revealing QR factorization of Ψ∗ ﬁrst to yield

Ψ∗Π = QR,

(19)

where Π is a column permutation matrix that moves
maximally linearly independent columns of Ψ∗ (or a
row permutation matrix that moves maximally linear in-
dependent rows of Ψ) to the leading column (row) po-
sitions, Q is a Ne × Ne unitary matrix and R is Ne × N
matrix with the leading Ne columns being a upper tri-
angular matrix. The magnitudes of the diagonal matrix
elements of the leading columns of R are in a decreasing
order.

Localized orbitals can be computed simply by per-

forming a matrix multiplication

Φ = ΨΨ∗
C,

(20)

where ΨC represents the leading Ne rows of the row per-
muted Ψ where the permutation is deﬁned by the permu-
tation matrix Π obtained in (19). Note that the localized
columns in Φ are not necessarily orthonormal. To ob-
tain an orthonormal set of orbitals ˜Φ that remain to be
localized, we simply perform a Cholesky factorization
of the matrix PC,C = ΨCΨ∗
C, i.e.,

PC,C = LL∗,

(21)

and solve the following set of linear equations using the
Cholesky factor L obtained in (21)

˜ΦL∗ = Φ.

The SCDM method has been implemented in KS-
SOLV. We refer readers to [82] for the theoretical jus-
tiﬁcation of this method and how localized orbitals
constructed from the SCDM procedure can be used
to speedup the Hartree-Fock exchange energy calcula-
tion [83, 84].

2.3. Accelerated algorithms implemented in KSSOLV

2.0 for hybrid functional DFT calculations

In KSSOLV 2.0, we implement several new algo-
rithms to accelerate hybrid functional DFT calcula-
tions. The main challenge in performing a hybrid func-
tional DFT calculation is the eﬃcient treatment of the

(screened) Hartree-Fock exchange potential deﬁned as

ˆV HSE
x

(r, r(cid:48)) = −

Ne(cid:88)

j=1

ψ j(r)ψ∗

j(r(cid:48))K(r, r(cid:48)),

(22)

where K(r, r(cid:48)) is either the Coulomb kernel 1/|r−r(cid:48)| or a
screened Coulomb kernel of the form efrc(µ|r − r(cid:48)|)/|r −
r(cid:48)|. This non-local potential is part of the exchange-
correlation potential ˆVxc in a hybrid functional DFT
Hamiltonian.

In KSSOLV 2.0, we do not explicitly construct ˆV HSE
,
which is a dense matrix, in either the real or reciprocal
space. The ˆV HSE
operator is applied to a set of wave-
functions {ϕi} as follows

x

x

x ϕi = −
ˆV HSE

(cid:90)

ψ j(r)

Ne(cid:88)

j=1

(cid:0)r(cid:48)(cid:1) ψ∗

j

ϕi

(cid:0)r(cid:48)(cid:1) K(r, r(cid:48))dr(cid:48).

(23)
The evaluation of the integral on the right hand side of
(23) requires solving a set of Poisson equations. This
can be done by using FFT based convolution. How-
ever, because the summation in (23) is over Ne terms,
we need to solve O(N2
e ) Poisson equations in total per
iteration in an iterative eigensolver used to compute the
lowest Ne eigenpairs of the hybrid functional Hamil-
tonian. The excessive number of FFTs used to solve
many Poisson equations is the reason that hybrid func-
tional DFT calculation is orders of magnitude more ex-
pensive than LDA or GGA DFT calculations in other
plane-wave DFT software tools. KSSOLV 2.0 uses sev-
eral recently developed algorithms to reduce the com-
plexity of hybrid functional DFT calculation. These al-
gorithms include 1) the interpolative separable density
ﬁtting (ISDF) method for reducing the number of Pois-
son equations to be solved; 2) the use of inner and outer
iterative schemes in combination with the adaptive com-
pressive exchange (ACE) operator method to further re-
duce the total number of Poisson equations to be solved;
3) a special projector commutator direct inversion of it-
erative subspace (PC-DIIS) method for accelerating the
outer SCF iteration. We will brieﬂy describe each one
of these algorithms below.

2.3.1. ISDF (interpolative separable density ﬁtting de-

composition)

If we place the right hand sides of the Poisson equa-
tions to be solved in (23) for i = 1, 2, ..., Ne in a matrix
Z, deﬁned as

Z = {ϕi(r)ψ∗

j(r)},

i, j = 1, 2, ..., Ne,

(24)

we can see that the rank Z is less than N2
e if ϕi(r) and
j(r) are discretized on a real space grid with Ng =
ψ∗

9

O(Ne) grid points, which is the case for systems that
are suﬃciently large. As a result, we can rewrite Z as

Z = ΘC,

(25)

where Θ is Ng × Nµ and C is Nµ × N2
e and Nµ = O(Ne).
Columns of Θ can be viewed as a set of numerical aux-
iliary basis {ζµ(r)}, µ = 1, 2, ..., Nµ that span the same
space deﬁned by the pair product basis {ϕi(r)ψ∗
j(r)}.
Consequently, we can evaluate (23) by ﬁrst computing

(cid:90)

V ζ
µ =

K(r, r(cid:48))ζµ(r(cid:48))dr(cid:48),

(26)

for all µ = 1, 2, ..., Nµ, which requires solving Nµ Pois-
son equations. If we use V ζ to denote the matrix that
contains V ζ
µ’s as its columns, (23) can be then evaluated
as

(cid:88)

x ϕi = −
ˆV HSE

ψ j(r)V ζci j,

(27)

j

where ci j is the column of C indexed by i and j consis-
tent with the column indexing scheme used in (24).

Although the computational procedure for evaluat-
ing (22) now requires solving only Nµ = O(Ne) Pois-
son equations, the overall complexity of the algorithm
hinges on an eﬃcient factorization of Z in (25). From
an accuracy standpoint, the optimal factorization can be
obtained by performing a singular value decomposition
(SVD) of Z. However, such a factorization is costly.

In [53], the ISDF technique is used to obtain an ap-
proximate factorization that is much more eﬃcient and
suﬃciently accurate. In ISDF, each entry of the C ma-
trix is chosen to be ϕi(rµ)ψ∗
j(rµ) for a set of carefully
chosen real space grid points rµ. The auxiliary basis
vectors in Θ can be obtained by solving a linear least
square problem. Due to the separable nature of the pair
product basis in C, this least square problem can be
solved eﬃciently. We will refer readers to [53, 54] for
computational details of the ISDF method. We should
note that in this approach Nµ is a parameter that a user
needs to choose in advance. Typically, Nµ is a small
multiple of Ne, e.g. 2Ne. As a result, the use of ISDF al-
lows us to reduce the overall computational complexity
of ˆV HSE
x

related operation to O(N3

e ).

2.3.2. ACE (adaptively compressed exchange)

Due to the high cost associated with the application
of the Hartree-Fock exchange operator ˆV HSE
to a set
of wavefunctions, the iterative solution of the Kohn-
Sham problem for hybrid functional DFT is separated
into inner and outer SCF iterations. At the beginning
of each outer SCF iteration, ˆV HSE
is updated with the
most recent approximations to the Kohn-Sham orbitals

x

x

{ψ j}. This ˆV HSE
is then ﬁxed in the corresponding inner
SCF iterations in which only the charge density ρ and
potential terms that depends on ρ are updated.

x

({ψ j}) are ﬁxed, applying ˆV HSE

However, as we can see in (23), even when {ψ j} and
ˆV HSE
({ψ j}) to a set of
x
orbitals ϕi, i = 1, 2, ..., Ne is costly. Although we can
use ISDF to reduce the number of Poisson solves from
O(N2
e ) to O(Ne), performing the ISDF procedure and
solving O(Ne) Poisson equations in each inner SCF iter-
ation is still quite costly.

x

To reduce the computational cost of each inner it-
eration, Lin [51] proposed the construction of an ap-
proximate ˆV HSE
using a procedure called the Adaptively
Compressed Exchange Operator (ACE) algorithm. The
, denoted by ˆV ACE
approximate ˆV HSE
, is constructed to
satisfy the condition

x

x

x

x ψ j = ˆV ACE
ˆV HSE

x ψ j,
j = 1, 2, ..., Ne is the set of approximate
where ψ j,
Kohn-Sham orbitals available at the beginning of each
outer SCF iteration, The ACE construction yields a low-
rank operator of the form

(28)

ˆV ACE
x

= −

Ne(cid:88)

i, j=1

Wi(r)Bi jW ∗

j (r(cid:48)),

(29)

where

Wi(r) = (cid:16)

ˆV HSE
x

[{ψi}]ψi

(cid:17)

(r),

i = 1, . . . , Ne,

(30)

B = M−1 and the (k, l)th element of the overlap matrix
M is Mkl = (cid:82)

ψk(r)Wl(r)dr.

By constructing an ACE approximation of ˆV HSE

in
the low rank form (29), we can apply ˆV ACE
to a set
of orbitals {ϕi} in each SCF inner iteration by using
two matrix-matrix multiplications. This type of BLAS3
dense linear algebra operations are extremely eﬃcient
on modern high performance computers.

x

x

ˆV ACE
We should note that the construction of
in
x
each outer SCF iteration requires solving O(N2
e ) Pois-
son equations in (30) just as O(N2
e ) Poisson equations
need to be solved in (23). The number of Poisson equa-
tions to be solved can be reduced to O(Ne) by using the
ISDF technique discussed above. Therefore, by com-
bining ACE with ISDF, we can signiﬁcantly reduce the
complexity of hybrid functional DFT calculation as re-
ported in [85].

2.3.3. PC-DIIS (projected commutator direct inversion

in the iterative subspace)

As we indicated in section 2.2.1, when LDA and
GGA are used in ˆVxc, the KS eigenvalue problem can

10

be formulated as a set of nonlinear equations (13) sat-
isﬁed by the ground state electron density ρ.
For
hybrid functional DFT, a similar nonlinear equation
should be deﬁned in terms of the density matrix P =
(cid:80)
j(r(cid:48)) at zero temperature. Alternatively, one
can deﬁne a nonlinear equation in terms of the commu-
tator between H(P) and P. Upon convergence, P satis-
ﬁes

j=1 ψ j(r)ψ∗

H(P)P − PH(P) = 0.

(31)

The outer SCF iteration used to solve the hybrid
functional KS-DFT problem can be viewed as a quasi-
Newton method for ﬁnding the solution of (31). When
the density matrix can be formed explicitly, one can use
the direct inversion of iterative subspace (DIIS) method
proposed by Pulay [59] to solve (31). This is the ap-
proach often used to solve the Hartree-Fock equation
in quantum chemistry. Given a few previous approxi-
mations to the density matrix P(i−1), P(i−2),...,P(i−(cid:96)), for
some constant (cid:96) < i, the DIIS method or commutator
DIIS (C-DIIS) method constructs a new approximation
to the density matrix in the ith iteration as

˜P =

(cid:96)(cid:88)

k=1

αkP(i−k),

(32)

where the coeﬃcients αk are chosen to solve the follow-
ing constrained minimization problem

min(cid:80)
k αk=1

(cid:107)αkR[P(i−k)](cid:107)F,

(33)

where

R[P(i−k)] = H[P(i−k)]P(i−k) − P(i−k)H[P(i−k)]

(34)

and (cid:107) · (cid:107)F is the Frobenius norm.

When the Kohn-Sham orbitals ψ j’s are discretized by
plane-wave expansions, it is generally not practical to
construct the density matrix P explicitly and solve the
minimization problem (33) directly because the density
matrix dimension is so large(Ng × Ng) within a plane-
wave basis set. In [52], a projected commutator DIIS
(PC-DIIS) method was proposed to solve a projected
minimization problem in which the matrix R[P(i−k)] in
(33) is replaced by

R[P(i−k)]Φref = HΨ(i−k)S (i−k) − Ψ(i−k)T (i−k),

(35)

where Φref
is a set of reference orbitals to be de-
ﬁned later and Ψ(i−k) is a matrix that contains approx-
imate Kohn-Sham orbitals ψ j’s obtained in the (i − k)th
outer SCF iteration, S (i−k) = (cid:104)Ψ(i−k), Φref(cid:105) and T (i−k) =
(cid:104)HΨ(i−k), Φref(cid:105). Note that we dropped the density ma-
trix P(i−k) in the Hamiltonian H above to simplify the

notation. The projected residual (35) can be computed
without forming P(i−k) explicitly. We will refer readers
to [52] for the theoretical justiﬁcation for using (35) in
the objective function of the minimization problem (33).
The solution of the alternative minimization problem is
used to construct an intermediate set new approximation
to Kohn-Sham orbitals as

˜Ψ =

(cid:96)(cid:88)

k=1

αkΨ(i−k).

The eigenvectors of H[ ˜Ψ] then form the approxi-
mate Kohn-Sham orbitals Ψ(i)
in the ith SCF itera-
tion. Self-consistency is achieved when the norm of
H[Ψ(i)]Ψ(i) − Ψ(i)Λ(i) is suﬃciently small, where Λ(i) is a
diagonal matrix containing the corresponding eigenval-
ues of H[ ˜Ψ].

We should note that the reference orbitals in Φref
can be chosen to be any linearly independent func-
tions that approximates the desired Kohn-Sham orbitals.
They can be chosen as a set of Kohn-Sham orbitals
obtained in an LDA or GGA calculation. Also, the
constrained minimization problem (33) can be easily
converted to an unconstrained least square minimiza-
tion problem by substituting α1 in the objective func-
tion with 1 − (cid:80)(cid:96)
k=2 αk. We will refer readers to [52] for
algorithmic and computational details.

3. Object Oriented Design

Object-oriented programming (OOP) is a modern de-
sign paradigm developed to deﬁne data and functions
together as an object. KSSOLV adopts OOP features
in MATLAB and implements many key quantities re-
quired in the numerical solution of (1) as classes.
In
KSSOLV, there are several basic classes and some more
advanced classes. The basic classes include the Atom,
Molecule, Crystal, PpData, PpVariable, Ggrid,
and IterInfo classes. The Atom, Molecule and
Crystal classes are created to represent and encapsu-
late all relevant properties of an atom, a molecule and
a crystal respectively. All relevant features of an ob-
ject, e.g., the mass of an atom, the positions of all atoms
within a molecule, the energy cut-oﬀ used for plane-
wave expansion is kept as attributes (member variable)
of the object. Since a crystal shares many features with
a molecule, the Crystal class is deﬁned as a derived
class of the Molecule class with additional attributes
such as the positions of k-point samples and their cor-
responding weights. The PpData and PpVariable
classes are two classes that encapsulate a variety of in-
formation related to the pseudopotential. The PpData

class is used to encapsulate the raw data read from a
pseudopotential ﬁle, and the PpVariable class stores
the actual pseudopotentials associated with all atomic
species contained in a molecule (or crystal). The Ggrid
class is used to provide a compact representation of re-
ciprocal space grid points enclosed within a sphere of
a ﬁxed radius determined by the kinetic energy cutoﬀ
Ecut. Note that in a plane-wave based DFT calculation,
the plane-wave coeﬃcients associated with reciprocal
grid points outside of this sphere are set to zero, and
thus not stored. Finally, the IterInfo class is a book-
keeping class used to simply record information related
to the SCF/DCM iterations. All these basic classes are
designed as data containers to simplify the interfaces
in KSSOLV. The member functions in these classes are
used to process data within the class but do not interfere
with data outside the class.

In the following, we will introduce advanced classes
in KSSOLV one by one in detail, i.e., the Wavefun, Ham,
BlochWavefun and BlochHam classes.

3.1. The Kohn-Sham wavefunction class

Kohn-Sham orbitals are key quantities used and up-
dated throughout a KS-DFT calculation. We created a
class, called Wavefun, to encapsulate all relevant infor-
mation contained in these orbitals. This class contains
matrix attributes that keep either the values of wave-
functions on a real space grid or plane-wave expan-
sion coeﬃcients on a compressed reciprocal space grid.
Standard algebraic operations applied to a Wavefun ob-
ject are overloaded. They include element-wise oper-
ations such as the absolute value, the addition, sub-
traction, pointwise multiplication and pointwise power-
ing. These operations typically return a Wavefun ob-
ject. Other operations such as the matrix norm and
the inner product of two sets of wavefunctions return
a scalar or a matrix. Other commonly used operations
such as the QR factorization, SVD and 3D (inverse) Fast
Fourier Transform are overloaded as well. Listing 1 pro-
vides some simple examples of overloaded operations
on a Wavefun object.

Listing 1: Setting up a Wavefun object

% X is a @Wavefun object of size N by k
X = Wavefun(...);

% Q is a @Wavefun of the same size as X,
% and R is a k by k upper triangular matrix
[Q,R] = qr(X,0);

% U is a @Wavefun of the same size as X,
% and S and V are k by k matrices
[U,S,V] = svd(X,0);

11

% Y is a @Wavefun object of size N by p
% on the same grid points as X
Y = Wavefun(...);

% Z is a @Wavefun object of size N by (k+p)
Z = [X Y];

% T is a submatrix of Z with its odd row index
% and last k column index.
% T is a @Wavefun object of size N/2 by k
% Then the corresponding submatrix of Z is reset
% to a random matrix.
T = Z(1:2:end,end−k+1:end);
Z(1:2:end,end−k+1:end) = randn(N/2,k);

Other overloaded functions include the concatenation
of Wavefun objects, the selection of one or a subset of
wavefunctions, which are unique in MATLAB. We al-
low a Wavefun object to be multiplied with a matrix
also when the dimension of the matrix contained in the
Wavefun object is compatible with that of second ma-
trix to be multiplied.

3.2. The Hamiltonian class

Even though the Kohn-Sham Hamiltonian is not
stored as a matrix in KSSOLV, it is convenient to cre-
ate a Ham class that allows us to easily apply the Hamil-
tonian to a Wavefun object. The Ham class encapsu-
lates the kinetic and potential energy components of the
Hamiltonian in either real space or reciprocal space rep-
resentation as well as the charge density associated with
the Hamiltonian. Member functions are created to make
it easy to update the Hamiltonian when the charge den-
sity is changed. The multiplication of a Ham object H
and a Wavefun object X can be simply performed as
H*X with all the details resulting from the conversion
from the real space to the reciprocal space and back to
the real space representation of the wavefunction hid-
den from the user. See Listing 2 for how a Ham object
is created and used. Furthermore, we have also imple-
mented several functions such as the MINRES and GM-
RES functions for solving the linear system of involving
a shifted Kohn-Sham Hamiltonian operator.

Listing 2: Setting up a Hamiltonian object

% H is a @Ham object of size N by N
H = Ham(...);

% X is a @Wavefun object of size N by k, and Y is
% a @Wavefun of the same size
X = Wavefun(...);
Y = H*X;

% V is a random matrix of size N by k, and U is
% a matrix of the same size

12

V = randn(N,k);
U = H*V;

% BH is a @BlochHam object of size N by N for
% m k−points
BH = BlochHam(...);

% BX and BY are a @BlochWavefun objects of size
% N by k for m k−points
BX = BlochWavefun(...);
BY = BlochWavefun(...);

% BH is applied to BX and saved at BY
for i = 1:m

BY{i} = BH{i}*BX{i};

end

3.3. Wavefunction and Hamiltonian classes for solids

For periodic

systems, we have

created the
BlochWavefun and BlockHam classes
to encap-
sulate data elements required to represent Bloch
wavefunctions and Hamiltonian. These classes allow
users to specify a k-point sampling and the associated
weights. They are containers of the Wavefun and
Ham type variables respectively. Listing 2 contains an
example of how these two classes are used.

4. Use Cases

In this section, we will illustrate some key features of
KSSOLV through some use cases. The main workﬂow
for using KSSOLV to perform an electronic structure
calculation of a molecule or solid involves

1. Setting up the system;
2. Calling an appropriate function to solve the Kohn-
Sham problem or perform a geometry optimiza-
tion;

3. Examining, post-processing and visualizing the re-

sults.

We will use a simple example to demonstrate how to
perform a basic calculation in section 4.1. One of the
key advantages of KSSOLV is that it allows users to
try diﬀerent algorithms and algorithmic parameters. We
will illustrate how this can be achieved in KSSOLV by
properly setting diﬀerent options and comparing results.
The object-oriented design of KSSOLV enables devel-
opers to prototype and implement new algorithms with
ease. We will give an example to show some of the key
features that make prototyping new algorithms easy in
KSSOLV. Finally, the MATLAB performance proﬁler
allows developers to identify the main computational
bottleneck of the calculation and develop strategies to
improve computational eﬃciency.

4.1. Setting up and solving a simple problem

Before we perform an electronic structure calculation
for a molecule or a solid, we must ﬁrst set up the sys-
tem. This step entails selecting the constituent atoms
and deﬁning their atomic coordinates. In addition, we
must deﬁne a suﬃciently large unit (super)cell that con-
tains all constituent atoms. The list of atoms and their
coordinates as well as the supercell are used to deﬁne a
Molecule object. For example, in Listing 3, we show
how a silane molecule (SiH4) is set up.

Listing 3: Setup A System

kssolvpptype('ONCV PBE−1.0', 'UPF');
%kssolvpptype('pz−hgh', 'UPF');
%
% 1. construct atoms
%
a1 = Atom('Si');
a2 = Atom('H');
atomlist = [a1 a2 a2 a2 a2];
%
% 2. set up a supercell
%
C = 10*eye(3);
%
% 3. define the coordinates the atoms
%
redxyz = [

0.0
0.161
−0.161

0.0
0.161
−0.161
0.161 −0.161
0.161

0.0
0.161
0.161
−0.161
−0.161

−0.161
];
xyzlist = redxyz*C';
%
% 4. Configure the molecule (crystal)
%
mol = Molecule('supercell',C,'atomlist',

atomlist,'xyzlist',xyzlist, ...
'ecut',12.5,'name','SiH4' );

In this

script, which can be

found in the
kssolv2.0/examples directory, we ﬁrst choose the
pseudopotential type by using kssolvpptype. The
Optimized Norm-Conserving Vanderbilt (ONCV) [16]
is chosen (by default).
to another
type of NCPP, e.g.
the Hartwigsen-Goedecker-Hutter
(HGH) [17] pseudopotential simply involves uncom-
menting the second line of the code snippet.
In KS-
SOLV 2.0, users can adopt NCPPs in both UPF ﬁle for-
mat (used by QUANTUM ESPRESSO) and psp8 ﬁle
format (used by ABINIT).

Changing it

We then create two Atom objects a1 and a2 represent-
ing the Si and H atoms. These objects are then placed in
an atomlist array using one of MATLAB’s array cre-
ation syntax. For systems containing a large number of

13

atoms, we can also use MATLAB’s loop scripting capa-
bility to build such an array using, e.g.,

Listing 4: Building an atom list array

a1 = Atom('Si');
a2 = Atom('H');
atomlist(1) = a1;
for j = 2:5

atomlist(j) = a2;

end;

We then specify the Cartesian coordinates for each
atom as a 5 × 3 array xyzlist. In this example, these
atomic coordinates are calculated from the reduced co-
ordinates speciﬁed in (redxyz) and the supercell de-
ﬁned by the matrix C. But it is possible to specify these
coordinates directly.

In order to solve the Kohn-Sham problem associated
with this molecule, we must also specify the kinetic en-
ergy cut-oﬀ ecut to be used for the plane-wave dis-
cretization of the Kohn-Sham orbitals. In the Listing 3,
ecut is set to 12.5 Hartree.

All attributes of the SiH4 molecule are passed into the
function that creates a Molecule object as key–value
pairs as shown in Listing 3.

Once a molecule object has been properly deﬁned, we
can solve the Kohn-Sham problem associated with this
molecule by calling the scf function as

[mol,H,X,info] = scf(mol);

Running the scf function generates the output shown

in Listing 5.

Listing 5: SCF Output

=
1.024e−01
= −6.2382906512612e+00

1:
1.000e−02

Beging SCF calculation for SiH4...
SCF iter
eigtol =
Rel Vtot Err
Total Energy
......
SCF iter
eigtol =
Rel Vtot Err
Total Energy
Elapsed time is 3.132360 seconds.
......
| | HX−XD | | F

9.543e−07

10:

=

=
1.250e−06
= −6.2542498381078e+00

1.144e−08

The default output written in the MATLAB command
line window shows the convergence history of the SCF
iteration, The output contains the dynamically adjusted
error tolerance used to terminate iterative solution of a
linear eigenvalue problem in each SCF iteration. It also
contains the measurement of self-consistency error de-

ﬁned as

,

(36)

(cid:107)Vin − Vout(cid:107)
(cid:107)Vin(cid:107)
where Vin is the sum of potential terms in (5) that are
functional of the electron density or density matrix at
the beginning of each SCF iteration, and Vout is the cor-
responding new potential sum evaluated from the solu-
tion of the linear eigenvalue problem. The Frobenius
norm of the eigenpair residual HX − XΛ is also printed
out, where X contains all the desired eigenvectors and Λ
is a diagonal matrix containing the corresponding eigen-
values.

4.2. Visualization and Post-processing

In addition to the interactive output displayed in
MATLAB’s command line window, the scf function
also returns a number of output variables that can be fur-
ther examined and visualized. The returned Molecule
object (which in the example given here overwrites the
input argument mol includes the atomic forces com-
puted for each atom at the end of the SCF iteration. We
can examine these forces simply by typing

mol.xyzforce

on the command line, which produces

ans =

0.0000
0.0021
-0.0021
0.0021
-0.0021

0.0000
0.0021
-0.0021
-0.0021
0.0021

0.0000
0.0021
0.0021
-0.0021
-0.0021

The returned Hamiltonian object H contains the elec-
tron density ρ as one of its attributes, which we can vi-
sualize by using a third party volume rendering func-
tion vol3d included in KSSOLV or simply MATLAB’s
isosurface rendering function isosurface as shown in
Listing 6. The fftshift function used in the listing is
called to re-center ρ to the middle of the unit cell (in-
stead of the origin of the Cartesian grid).

Listing 6: Visualize the electron density

view(3);
isosurface(fftshift(H.rho));
figure;
view(3);
vol3d('cdata',fftshift(H.rho));

These renderings are shown in Figure 1.

We can also show a squared amplitude of Kohn-Sham
orbital ψ j. This requires some post-processing of the re-
turned Wavefun object X. The post-processing involves

Figure 1: (a) An isosurface rendering of the converged electron den-
sity of SiH4. (b) A volume rendering of the converged electron density
of SiH4.

using FFT to transform the default compact reciprocal
space representation of the wavefunction XG to a real
space vector representation XR, evaluating its magnitude
square as abs(XR).2, and reshaping the resulting vector
into a 3D array. KSSOLV provides a utility function
poscar to write the magnitude square of the reshaped
wavefunction to a text ﬁle that can be read by other vi-
sualization software tools such as the VESTA [86].

Listing 7 shows how post-processing is performed
to write the magnitude square of the highest occupied
molecular orbital (HOMO) to a ﬁle named SiH4 HOMO.
A similar set of commands can be used to write the low-
est unoccupied molecular orbital (LUMO) to another
ﬁle. The HOMO and LUMO can be subsequently vi-
sualized by using the VESTA software as shown in Fig-
ure 2.

Figure 2: The isosurfaces of HOMO and LUMO produced by VESTA.
(a) HOMO of SiH4. (b) LUMO of SiH4.

Listing 7: Wavefunction post-processing and visualization of the
HOMO
n1=mol.n1;n2=mol.n2;n3=mol.n3;
homo = mol.nel/2;
lumo = homo + 1;
XG = X.psi(:,homo);
F = KSFFT(mol);
XR = (F'*XG)*sqrt(mol.vol);
X2 = abs(XR).ˆ2;
pos = poscar(mol);

14

outchg('SiH4 HOMO', pos, reshape(X2,n1,n2,n3));

The returned info argument is a MATLAB structure

that contains several ﬁelds.

>> info

info =

struct with fields:

Eigvals: [4×1 double]
Etotvec: [10×1 double]
SCFerrvec: [10×1 double]
Etot: -6.2542

We can plot the convergence history of the SCF iter-

ation by simply using

x = [1:length(options.maxscfiter)]
fig1 = semilogy(info.SCFerrvec_lob,’-s’
,info.SCFerrvec_dia,’-d’);

legend([fig1(1)fig1(2)],{’LOBPCG+Anderson’

,’Davidson+Broyden’});

xlabel(’SCF iteration number’,’FontName’,

’Times New Roman’)

ylabel(’SCF error’,’FontName’,

’Times New Roman’)

set(gca,’XTick’,x)

the Lorentzian spread function to create a smooth DOS
curve from info.Eigvals. Listing 8 gives a simple
script for carrying out such type of post-processing. The
DOS curves produced for four diﬀerent systems (SiH4,
C6H6, Si64 and C60) are shown in Figure 4.

the

Energy post-processing and visualization of

Listing 8:
DOS(density of states.)
ev = info.Eigvals;
nx = 1000;
sigma = 0.01;
% Initialization
[m,n]
ne
emin
emax
xgrid
dos
% Get the x distribution of the energy
for ix = 1 : nx

= size(ev);
= m;
= −1;%min(ev);
= 1;%max(ev);
= (emax − emin)/(nx − 1);
= zeros(nx,2);

dos(ix,1) = emin + (ix − 1)*xgrid;

end
% Calculate DOS
for ie = 1 : ne

for ix = 1 : nx

x = emin + (ix − 1)*xgrid − ev(ie);
%if(Gaussian)
dos(ix,2) = dos(ix,2) + 1/(sigma*sqrt(2*pi))
*exp(−xˆ2/(2*sigmaˆ2));
%if(Lorentzian)
%dos(ix,2) = dos(ix,2) + sigma/(pi*(xˆ2+sigmaˆ2));

end

end

Figure 3: The change of SCF error (36) with respect to SCF iteration
number. Two combinations of diagonalization algorithm and mixing
method are given, 1. LOBPCG with Anderson, 2. Davidson with
Broyden.

We can also use the Eigvals information from the
info argument to obtain the DOS(Density of States).
The post-processing includes setting some parameters
to get the energy range and using either the Gaussian or

Figure 4: DOS(Density of States) by using Gaussian function, which
describes the proportion of states that are to be occupied by the system
at each energy. (a)SiH4, (b)C6H6, (c)Si64, (d)C60.

4.3. Modifying options and algorithms

KSSOLV 2.0 allows users to choose and experiment
with diﬀerent algorithms or algorithmic components for

15

12345678910SCF iteration number10-810-610-410-2100SCF errorLOBPCG+AndersonDavidson+Broyden(a)(b)(d)(c)solving the Kohn-Sham problem. For example, instead
of calling the scf function, one can call the trdcm
function, which implements the trust region regularized
DCM algorithm discussed in section 2.2.1, as

[mol,H,X,info] = trdcm(mol);

Both the scf and trdcm functions accept an addi-
tional option argument that allows users to alter the de-
fault algorithms and parameters used by these functions.
The optional argument can be ﬁrst created by call-
ing the setksopt function which returns a MATLAB
structure that contains default algorithmic choices and
parameters listed in Listing 9.

Listing 9: option structure returned from the setksopt function

verbose: 'off'
eigmethod: 'lobpcg'

maxscfiter: 10
maxdcmiter: 10
maxinerscf: 3

maxcgiter: 10
maxeigsiter: 300

scftol: 1.0000e−08
dcmtol: 1.0000e−08
cgtol: 1.0000e−09
eigstol: 1.0000e−10

what2mix: 'pot'

mixtype: 'anderson'

mixdim: 9

betamix: 0.8000

brank: 1

X0: []
rho0: []
degree: 10
force: 1
ishybrid: 0
useace: 0

Vexx: []

maxphiiter: 5

phitol: 1.0000e−08
dfrank: 0
ncbands: 0

relaxmethod: 'fminunc'

relaxtol: 1.0000e−04

factorOrbitals: 1
davsteps: 3
ngbands: 0

We can change, for example, the algorithm for solv-
ing the linear eigenvalue problem in each SCF iteration
from LOBPCG to Davidson, and the quasi-Newton al-
gorithm (charge mixing scheme) used to accelerate the
SCF iterations from Anderson to Broyden by using the
commands given in Listing 10 to modify the options
structure and passing it to the scf function along with
the mol object.

Listing 10: Choosing a diﬀerent eigensolver and charge mixing
scheme.
options = setksopt();
options.eigmethod = 'davidson';
options.mixtype = 'broyden';
[mol1,H1,X1,info1] = scf(mol,options);

Figure 3 shows these changes lead to a slightly diﬀer-
ence convergence behavior of the SCF iteration (the red
curve) although the diﬀerence is relatively small in this
particular case.

We can see from Figure 3 that the SCF iteration did
not converge to the default accuracy requirement spec-
iﬁed by the parameter options.scftol, which is set
to 10−8. To reach that level of accuracy, we can rerun
the scf function by using the wavefunction X and elec-
tron density rho returned from the previous run as the
starting guess. This can be achieved by simply setting
options.X0 and options.rho0 to the previously re-
turned wavefunction and electron density.

options.X0 = X;
options.rho0 = H.rho;

After calling the scf function with the modiﬁed op-
tion as an input, we can reach convergence as reported
in Listing 11.

4:
1.257e−09

1:
1.000e−02

=
1.146e−07
= −6.2542498381078e+00

Listing 11: Convergence is reached after rerunning scf with the
wavefunction and electron density initialized to the approximation
produced from the ﬁrst scf call.
Regular SCF for Pure DFT
Beging SCF calculation for SiH4...
SCF iter
eigtol =
Rel Vtot Err
Total Energy
...
SCF iter
eigtol =
Rel Vtot Err
Total Energy
Convergence is reached!
Elapsed time is 1.005311 seconds.
= −6.2542498381079e+00
Etot
= −5.3304963587462e+00
Eone−electron
=
3.2198596360275e+00
Ehartree
= −2.5983987591201e+00
Exc
= −1.5452143562691e+00
Eewald
0.0000000000000e+00
=
Ealphat
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
4.563e+00
Total time used =
2.562e−09
=
| | HX−XD | | F

=
4.190e−09
= −6.2542498381079e+00

4.4. Algorithm prototype and modiﬁcation

KSSOLV is designed to enable researchers to eas-
ily modify existing algorithms and prototype new algo-
rithms. To a large extent, this feature is facilitated by the

16

object-oriented programming model supported in MAT-
LAB. By creating Hamiltonian and wavefunction ob-
jects and overloading the basic linear algebra operations
with these objects as operands, one can literally trans-
late mathematical expressions into MATLAB codes in
KSSOLV in a few minutes. To give an example, let us
take a look at the implementation of the ACE opera-
tor for hybrid functional DFT calculation in KSSOLV
which is shown in Listing 12.

Listing 12: Constructing the ACE operator

W = ApplyVexx(X);
M = X' * W;
M = (M + M')/2;
R = chol(−M);
Y = W / R;
ApplyVexxACE = @(x) −Y * (Y' * x);

The ACE operator is deﬁned by (29) which, once
ψ j(r)’s are discretized and represented by columns of
the matrix X, can also be written in matrix form as

ˆV ACE = −W M−1W ∗,

(37)

where

W = ˆV HSE(X)X,
(38)
with ˆV HSE(X) being the matrix representation of the
Hartree-Fock exchange operator and M = X∗W. Be-
cause −M is Hermitian positive deﬁnite, we can rewrite
(37) in a symmetric form by performing a Cholesky fac-
torization of −M, i.e., −M = RR∗ with R being upper
triangular, and expressing ˆV ACE as ˆV ACE = −YY ∗ with
Y = WR−1.

In Listing 12, we apply the function ApplyVexx,
which implements (38), to the Wavefun object X to ob-
tain another Wavefun object W. Even though X and W
are Wavefun objects, we can treat them as matrices and
multiply them together in the second line of Listing 12
to obtain the matrix M = X∗W. Line 3 in Listing 12
is used to ensure M is numerically Hermitian before the
Cholesky factorization function chol is applied to -M.
The inverse of the Cholesky factor R is applied to W to
yield the Wavefun object Y by solving a set of linear
equations using the MATLAB / operator. The Y object
is then used to deﬁne a function handle ApplyVexxACE
that can be applied to any Wavefun object of matching
dimensions without explicitly forming the ACE opera-
tor.

4.5. Performance proﬁling

MATLAB provides a convenient performance proﬁl-
ing tool that allows us to easily analyze the performance
features of KSSOLV functions and identify potential

17

computational bottlenecks. For example, to proﬁle the
performance of the HSE06 calculation contained in a
testing script named testHSE06.m, we can simply is-
sue the following several commands listed in Listing 13.

Listing 13: Proﬁling for a HSE06 calculation.

profile on;
testHSE06;
save profHSE06 p
profile off;

MATLAB provides a viewer in the Windows Visual
interface that allows us to clearly see the hierarchical re-
lationship among diﬀerent computational components
as well as which function takes most of the time. We
can further zoom into the most time-consuming func-
tion and identify the line number of the code that takes
most of the time within that function.

For example, Figure 5(a) displays a Flame graph of
KSSOLV functions called by testHSE06, the most time
consuming function is getVexx, which is used to cal-
culate the exchange potential. By clicking on the block
containing this function name, we obtain a table shown
in Figure 5(b), which lists the line numbers of the most
time consuming functions contained in getVexx. If we
click the line number associated with a particular func-
tion, we can step in the code of that function and analyze
the computation performed in that function.

Once we have identiﬁed the computational bottle-
neck of HSE06 calculation, which is in the evaluation
of the exchange term, we can optimize the performance
of KSSOLV by seeking alternative implementations of
the functions in question or using alternative algorithms.
For example, as we discussed in section 2.3 and 4.4, the
use of the ACE algorithm to refactor the exchange op-
erator can signiﬁcantly reduce the computational com-
plexity of applying the Hartree-Fock exchange operator
to a set of wavefunctions in the hybrid functional DFT
calculation. Table 2 gives a direct comparison between
the cost of hybrid functional DFT calculations with and
without the use of ACE. We can clearly see that after
using ACE, the total amount of wall clock time used by
scf0 is reduced from 76 seconds to 28 seconds. This is
mainly due to a signiﬁcant reduction in time spent in the
lobpcg eigensolver used for the outer iteration. With
the use of ACE, the function getVexx which is used
to update the Fock exchange operator, is called only 5
times (in the 5 outer scf0 iterations), whereas 187 such
calls are made in the hybrid functional DFT calculation
without using ACE. Furthermore, the use of the ACE
allows us to signiﬁcantly reduce the number of FFTs
used to apply the Fock exchange operator to a set of

Figure 5: Proﬁling of a HSE06 calculation, (a)The overall proﬁle summary ﬂame graph, (b)Functions hot spot analysis, including the called times
of sub-functions, (c)Time corresponding to each line of getVexx.

Table 2: Cost comparison between HSE and HSE-ACE calculations.
The system calculated here is SiH4 with Ecut set to 20 Hartree.

Function name
scf0(HSE)
lobpcg(HSE)
getVexx(HSE)
KSFFT.mtimes(HSE)
scf0(HSE-ACE)
lobpcg(HSE-ACE)
getVexx(HSE-ACE)
KSFFT.mtimes(HSE-ACE)
calculateACE(HSE-ACE)

Calls numbers
5
59
187
1851
5
59
5
55
5

Time(s)
75.965
48.779
49.969
38.448
28.055
13.778
1.554
1.362
1.554

wavefunctions. In the ACE enabled hybrid functional
calculation, only 55 times FFTs are used to construct
the ACE operator, whereas 1851 FFTs are performed
when the Fock exchange operator is applied to a set
of wavefunctions in each step of the LOBPCG eigen-
solver. Table 2 also shows that the overhead incurred
in constructing the ACE operator is relatively small, i.e.
1.5 seconds (used by calculateACE) out of 28 seconds
used by scf0.

5. Results and discussion

5.1. Accuracy

We ﬁrst use KSSOLV to perform ground state to-
tal energy and atomic force calculations, band structure
analysis and geometry optimization for a few molecules
and solids. In all these runs, we set the inner SCF con-
vergence tolerance to 10−7 for calculations that use LDA
and PBE functionals, and 10−6 for outer SCF conver-
gence tolerance when using the HSE06 functional. We
use QUANTUM ESPRESSO as the baseline for com-
parison in assessing the accuracy of KSSOLV.

5.1.1. Total energy and atomic forces

When comparing with the QE (QUANTUM
ESPRESSO) results, we compute the total energy
diﬀerence per atom as well as the maximum diﬀerence
in atomic forces, which are deﬁned by

∆E = (cid:16)
tot
∆F = max

EKSSOLV

− EQE
/NA,
tot
(cid:13)(cid:13)(cid:13) ,
(cid:13)(cid:13)(cid:13)FKSSOLV
− FQE
I

I

(cid:17)

I
and EQE

tot

where EKSSOLV
tot are converged total energy lev-
els returned from KSSOLV and QE respectively, NA is
the total number of atoms in each system, and I is an
atom index.

In this section, we give some examples of a few appli-
cations that can be studied with KSSOLV and demon-
strate its accuracy and performance. The descriptions of
these systems are listed in Table 3.

To check the accuracy systematically, we measure
∆E and ∆F for each system at several plane-wave cut-
oﬀ energy (Ecut) levels (from 10 to 100 Hartree). We
also use three types of psedopotential and exchange-
correlation functional combinations in KSSOLV 2.0,

18

(a)(b)(c)Table 3: The performance of KSSOLV on a set of test problems. System: including solid, molecule, nanotube, na: number of atoms, Cell dim: the
unit cell size with three dimensions, Ne: number of electrons, nk: number of k-points, Functional: exchange-correlation functional, Ecut: cut-oﬀ
energy, Nr: grids number in real space, Ng: grids number in reciprocal space, Scftol : the converge limit of inner SCF, Scf-iter: the iteration number
of inner SCF, Phitol : the converge limit of outer SCF, Phi-iter: the iteration number of outer SCF, Total time: the total wall clock time of each
calculation.

Ne
System na
Cell dim
SiH4
5
8
20
12 22.4 × 24.9 × 30.2 30
C6H6
20.523
Si64
64
24.573
C60
60
30.783
Si216
216
20.523
Si64
64
20.523
Si64
64
24.573
C60
60
24.573
C60
60
38 × 38 × 4.6
CNT661 60
10.2163
8
6.83083
4

nk Functional Ecut (Ha)
1
1
256 1
240 1
864 1
256 1
256 1 HSE-ACE
240 1
240 1 HSE-ACE
96
1
96 64
32 64

20
20
20
20
20
20
20
20
20
20
20
30

PBE
PBE
PBE
PBE
PBE
HSE

PBE
PBE
PBE

HSE

Si8
Cu4

Ng
Nr
Scftol Scf-iter Phitol Phi-iter Total time (sec)
10−7
34265
531441
10−7
1121302 72079
10−7
571,787 37,073
10−7
970,299 63,317
1906624 124289 10−7
10−7
571,787 37,073
10−7
571,787 37,073
10−7
63317
970299
10−7
63317
970299
10−7
25485
399475
10−7
4553
74088
10−5
2517
39304

17.544
154.358
642.018
1174.029
8769.963
79077.64
3493.511
184672.234
5058.289
146.720
345.123
512.685

-
-
-
-
-
10−6
10−6
10−6
10−6
-
-
-

14
18
19
20
19
19
19
20
20
19
14
18

-
-
-
-
-
3
4
3
4
-
-
-

which are LDA-HGH, PBE-ONCV and HSE06, respec-
tively. The total energy diﬀerences for test systems are
plotted in Figure 6. The solid black square lines cor-
respond to the LDA-HGH exchange-correlation func-
tional and psedopotential combination, the solid red cir-
cle lines correspond to PBE-ONCV, and the solid blue
triangle lines correspond to HSE06.

We observe that, in general, the diﬀerence between
the converged KSSOLV and QE total energies per atom
is on the order of between 10−6 and 10−4 Hartree, which
is suﬃciently small. For Si64, the energy diﬀerence is
slightly larger (on the order of 10−3 Hartree) at some
plane-wave cut-oﬀ levels. However, these diﬀerences
are acceptable since they are around chemical accuracy,
which is deﬁned to be 1kcal/mol or 10−3 Hartree, and
are suﬃcient for most applications. In previous stud-
ies [84], we also compared diﬀerences in cohesive en-
ergies for several test problems and showed that they
match well.

In Figure 7, we plot the maximum diﬀerence in
atomic forces between KSSOLV and QE for all test sys-
tems. The magnitude of force diﬀerence is generally
small and within the range of 10−6 to 10−4 Hartree/Bohr.
In some cases, the diﬀerence is slightly larger when Ecut
is relatively small, but becomes suﬃciently small when
Ecut reaches 50 Ha or so.

5.1.2. Band Structure

Because KSSOLV 2.0 facilitates k point samplings
in the ﬁrst Brillouin zone for solids, we can use it to
compute band structures of solids and compared them
In Figure 8,
with the results obtained from QE also.
we plot the band structure of Si8 and Cu4 respectively
between the Γ and X k-points. In both cases, the number
of k-points used in the SCF calculation is 64(4x4x4), we
observe that the band structures obtained from KSSOLV

19

Figure 6: Total energy diﬀerence between KSSOLV and QE for (a)
silane (SiH4) molecule, (b) benzene (C6H6) molecule, (c) bulk silicon
Si64 and (d) fullerene (C60) molecule at diﬀerent plane-wave cut-oﬀ
energy levels.

are in excellent agreement with those obtained from QE,
and the average numerical diﬀerence of band structure
between the two packages is about 10−9. We can clearly
see a band gap between the the highest valence band
and the lowest conducting band for Si8 which conﬁrms
the fact that Si is a semiconductor. No band gap can be
seen in Figure 8(b) for Cu4, this is consistent with the
previous knowledge that Cu is a metal.

5.1.3. Geometry optimization

We use KSSOLV 2.0 to optimize the geometry of an
isolated water (H2O) molecule and compared the opti-
mal H-O bond length, and the optimal angle between
two H-O bonds with the corresponding experiment val-
ues. The initial bond lengths between the H and O atoms
are set to 0.98523 and 1.53953 Å, respectively, and the
initial bond angle is set to 38.5624◦. These are slightly

0.02.0x10-64.0x10-66.0x10-6-4.0x10-5-2.0x10-50.02.0x10-54.0x10-5020406080100-1.0x10-30.01.0x10-32.0x10-30204060801000.02.0x10-44.0x10-4E (Ha) E (LDA-hgh) E (PBE-oncv) E (HSE06)E (Ha)Ecut (Ha)Ecut (Ha)(a)(b)(d)(c) Figure 7: Maximum diﬀerence in atomic forces between KSSOLV
and QE for (a) silane (SiH4) molecule, (b) benzene (C6H6) molecule,
(c) bulk silicon Si64 and (d) fullerene (C60) molecule at diﬀerent
plane-wave cut-oﬀ energy levels.

Figure 9: Geometric optimization for H2O, the solid black square
line, the solid red dotted line, and the blue triangle represent two bond
lengths and bond angle respectively, the black dotted line represents
the experimental value. The total number of iteration steps is 18 and
the initial and ﬁnal structures are given at the ﬁrst and the last iteration
step. The cut-oﬀ energy of the calculation is 60 Hartree.

ground state of Si64 contained in these unit cells. The
results are compared with those obtained from QE. Fig-
ure 10 shows that the KSSOLV results match well with
QE results. These results clearly show the energy is the
lowest at zero strain.

Figure 8: The band structures calculated by KSSOLV and QE using
the PBE functional for (a) bulk silicon Si8 and (b) bulk copper Cu4
system. The cut-oﬀ energies are 20 Hartree and 30 Hartree for Si8
and Cu4, respectively. All energy levels have been shifted to keep the
Fermi energy at zero ev.

diﬀerent from the experiment value [87] of 0.957 Å for
the bond length and 104.5◦ for the bond angle. The
BFGS algorithm implemented in MATLAB Optimiza-
tion toolbox function fminunc is used to perform the
optimization. The convergence of bond length and bond
angle to the experimentally observed values in the KS-
SOLV geometry optimization function relaxatoms is
shown in Figure 9. We can clearly see that convergence
is reached after 9 geometry optimization steps. And the
error of the KSSOLV calculation result diﬀers from the
experimental value by only one percent.

To give another example, we perform a geometry op-
timization Si64 with respect to the size of the unit cell.
The change in unit cell size corresponds to the change in
the strain applied to the solid. To perform the optimiza-
tion, we sample several unit cell sizes that correspond
to 0 − 6% changes in applied strain, and compute the

Figure 10: Geometric optimization for bulk silicon Si64 system, the
energy change with strain, KSSOLV (the blue square), QE (solid red
line), The unit of strain change is one percent of the overall structure,
from compressive strain (-4%) to tensile strain (+5%), the cut-oﬀ en-
ergy of these calculations is 60 Hartree.

5.2. Performance

In this section, we report the performance of KS-
SOLV by applying it to a set of benchmark problems
listed in Table 3. The version of MATLAB we used
is R2021a and the benchmark is run on a Intel(R)
Xeon(R) CPU E5-2698 v4 @ 2.20GHz with 40 maxi-
mum threads. We perform ground state calculation for

20

0.05.0x10-61.0x10-51.5x10-52.0x10-50.01.0x10-42.0x10-43.0x10-44.0x10-45.0x10-40204060801000.05.0x10-61.0x10-51.5x10-52.0x10-50204060801000.02.0x10-44.0x10-46.0x10-48.0x10-4F (Ha/Bohr)(a)(b)(c) (d)F (Ha/Bohr) F(LDA-hgh) F(PBE-oncv) F(HSE06)Ecut (Ha)Ecut (Ha)XX-12-10-8-6-4-2024-8-6-4-2024681012 QE QE KSSOLVE-EF (ev)(a)(b) KSSOLV-252.00-251.95-251.90-251.85-251.80-251.75-4%-2%0%2%4%6% QEEnergy (Ha)Strain KSSOLVboth molecules and solids using either PBE or HSE06
functionals speciﬁed in Table 3. For hybrid functional
DFT calculations, the HSE exchange-correlation func-
tional and a two-level SCF procedure are used. The
standard SCF calculation is used as the inner iteration to
reach self consistency in the electron density for a ﬁxed
Fock exchange potential. In the outer SCF iteration that
we refer to as the Phi-iteration, the Fock exchange po-
tential and energy are updated. Thus, two diﬀerent con-
vergence criteria are used in the inner and outer itera-
tion.

We report the wall clock time it takes to complete the
calculation as well as the number of SCF iterations re-
quired to reach convergence. The convergence criterion
(i.e., the SCF error tolerance) for each case is listed in
the table also.

The ﬁrst four systems listed in Table 3 were used in
the previous subsections to demonstrate the accuracy of
KSSOLV. These systems are relatively small and can be
solved between tens of seconds to tens of minutes. The
number of iterations required to reach convergence and
the wall clock time it takes generally increase with the
system size. The largest system we tested is the Si216
cluster with 216 atoms and 864 electrons. More than
1 million plane-waves are used in this calculation that
employs the PBE functional. The entire calculation took
more than two hours.

The HSE06 functional is used for Si64 and C60 to per-
form hybrid functional calculations for these systems
with and without using the ACE method. We can see
from Table 3 that, without using ACE, the hybrid func-
tional calculations for these systems are two orders of
magnitude more expensive than the corresponding PBE
calculations for the same systems. When ACE is used,
the hybrid functional calculations are only 4 ∼ 5 times
more expensive than the corresponding PBE calcula-
tions. In previous studies [21], we also compared dif-
ferent diagonalization algorithms.

In addition to insulators and semiconductors, we also
measure the performance of KSSOLV on a metallic sys-
tem Cu4. The calculation, which uses 64 k-points, can
be completed in less than 10 minutes.

Because MATLAB can take advantage of multiple
threads on a many-core CPU to parallelize many com-
putational kernels, we can speed up KSSOLV calcula-
tion on such a CPU without additional parallelization
eﬀort.
In Figure 11, we report the parallel scaling of
KSSOLV when it is used to compute the ground states
of four diﬀerent systems using the PBE functional. We
observe that the total wall clock time can be reduced by
a factor of 5 when the number of threads is increased
from 1 to 8. Increasing the number of threads further to

21

16 leads to an additional reduction in wall clock time.
However, the reduction factor is much smaller. By de-
fault, MATLAB generally will try to use the maximum
number of threads available on the machine being used.
As a result, KSSOLV can beneﬁt from the maximum
shared memory concurrency available on any many-
core CPUs.

In addition to reporting the total wall clock time,
we also show a breakdown of timing among sev-
eral key computational components of KSSOLV. The
Hamiltonian wavefunction multiplication (labelled by
Ham.mtimes), which performs HX = H*X as an over-
loaded matrix-matrix multiplication between a Ham ob-
ject H and a Wavefun object X as explained in sec-
tion 3.2, constitutes the largest cost. This is followed
by the cost of Wavefun.mtimes which performs dense
matrix-matrix multiplications between two Wavefun
objects or between a Wavefun object and a regular ma-
trix. The Wavefun.subsref function, which is used
to extract a subset of wavefunctions, involves mainly
data movement and copying. Such data movement can-
not be easily parallelized. Hence, the timing associated
with Wavefun.subsref does not decrease as the num-
ber of threads increases. The VxcPBE function, which is
used to evaluate the PBE exchange-correlation energy
and potential, takes a small fraction of the time. The
function vlov2g is used to convert local pseudopoten-
tial on a non-uniform grid in real-space to a uniform
grid in the reciprocal space in the initialization of the
pseudopotential. This one-time cost can be relatively
large for small systems, but becomes negligible when
the system size becomes suﬃciently large.

6. Conclusion and outlook

KSSOLV 2.0 preserves the main object-oriented de-
sign features of the original KSSOLV software toolbox
for solving the Kohn-Sham equations. Such design fea-
tures make it easy for users to set up a problem and
obtain a solution. They also enable developers to eas-
ily prototype and test new algorithms. The new ver-
sion contains more advanced algorithms such as ACE,
PC-DIIS, ISDF for hybrid functional DFT calculations,
and new functionalities such as geometry optimization.
The software produces accurate results that are consis-
tent with those produced by other plane-wave based
KS-DFT software such as QE. It is eﬃcient for per-
forming KS-DFT electronic structure calculations for
small to medium sized problems. It is a great teaching
tool that can help students and researchers quickly learn
how to analyze the electronic structure of molecules and
solids. At the same time, it can also be a useful research

Figure 11: The proﬁling results of diﬀerent systems PBE-calculation within 1, 8, 16 threads, including Ham.mtimes, Wavefun.mtimes, Wave-
fun.subsref, VxcPBE, vlov2g. Systems: (a) silane (SiH4) molecule, (b) benzene (C6H6) molecule, (c) bulk silicon Si8, (d) bulk silicon Si64. All of
these results come from the whole calculation process.

tool in chemical and materials sciences for analyzing
properties of interesting materials or chemical systems
and for developing more eﬃcient numerical methods.
Although KSSOLV 2.0 is designed to perform ground
state DFT and geometry optimization calculations, sev-
eral new developments are already underway to include
new functionalities in the next release. In particular, we
plan to include functionalities to allow users to perform
time-dependent density functional theory (TDDFT) cal-
culations and post-DFT calculations such as comput-
ing GW[88] quasi-particle energies and eigenvalues and
eigenvectors of the Bethe-Salpeter Hamiltonian [89].
In addition, we will integrate KSSOLV with machine
learning tools to accelerate the materials design and dis-
covery process.

Acknowledgments

This work is partly supported by the National Natu-
ral Science Foundation of China under the Grant No.
22173093 (W.H.), 22073086 (L.J.), 21803064 (Z.D.)
and 21688102 (J.Y.), by the School of Future Tech-
nology under Grant No. KF2020003 (W.H.), by the
Chinese Academy of Sciences Pioneer Hundred Talents
Program under Grant No. KJ234007002 (W.H.), by the
National Key Research and Development Program of
China under the Grant No. 2016YFA0200604 (J.Y.), the
Anhui Initiative in Quantum Information Technologies
under Grant No. AHY090400 (J.Y.), the Center of Chi-
nese Academy Project for Young Scientists in Basic Re-
search under Grant No. YSBR-005 (W.H.), the School
of Future Technology under Grant No. SK2340002001
(W.H.), the Fundamental Research Funds for the Cen-
tral Universities under Grant No. WK2340000091

22

01020304050607002004006008001thread8thread16thread051015201thread8thread16thread0100020003000400050006000Ham.mtimesWavefun.mtimesWavefun.subsrefVxcPBEvloc2g(a)(c)(b)(d)(W.H.) and WK2060000018 (W.H.) from University
of Science and Technology of China. This work was
also supported by the Scientiﬁc Discovery through Ad-
vanced Computing (SciDAC) program and the Center
for Applied Mathematics for Energy Research Appli-
cations (CAMERA) funded by U.S. Department of En-
ergy, Oﬃce of Science, Advanced Scientiﬁc Computing
Research under Contract No. DE-AC02-05CH11231
(L.L., C.Y.). The authors thank the Hefei Advanced
Computing Center, the Supercomputing Center of Chi-
nese Academy of Sciences, the Supercomputing Center
of USTC and the National Energy Scientiﬁc Computing
Center (NERSC) for the computational resources. We
would like to thank Temo Vekua, Reza Fazel-Rezai, Ka-
jia Ruan and Wei Chen at MathWorks for helpful sug-
gestions.

References

[1] C. Yang, J. C. Meza, B. Lee, L.-W. Wang, KSSOLV—a MAT-
LAB toolbox for solving the Kohn-Sham equations, ACM
Trans. Math. Softw. 36 (2) (2009) 1–35.

[2] P. Hohenberg, W. Kohn, Inhomogeneous electron gas, Phys.

Rev. 136 (1964) B864–B871.

[3] W. Kohn, L. J. Sham, Self-Consistent Equations Including Ex-
change and Correlation Eﬀects, Phys. Rev. 140 (1965) A1133.
[4] J. Lu, L. Ying, Compression of the electron repulsion integral
tensor in tensor hypercontraction format with cubic scaling cost,
J. Comput. Phys. 302 (2015) 329–335.

[5] C. Kelley, J. Bernholc, E. Briggs, S. Hamilton, L. Lin, C. Yang,
Mesh independence of the generalized davidson algorithm, J.
Comput. Phys. 409 (2020) 109322.

[6] L. Lin, C. Yang, Elliptic preconditioner for accelerating the self-
consistent ﬁeld iteration in kohn–sham density functional the-
ory, SIAM J. Sci. Comput. 35 (5) (2013) S277–S298.

[7] M. Shao, L. Lin, C. Yang, F. Liu, F. H. Da Jornada, J. Deslippe,
S. G. Louie, Low rank approximation in g 0 w 0 calculations,
Sci. China. Math. 59 (8) (2016) 1593–1612.

[8] A. Damle, L. Lin, L. Ying, Pole expansion for solving a type of
parametrized linear systems in electronic structure calculations,
SIAM J. Sci. Comput. 36 (6) (2014) A2929–A2951.

[9] L. Lin, L. Zepeda-Nunez, Projection-based embedding theory
for solving Kohn–Sham density functional theory, Multiscale.
Model. Sim. 17 (4) (2019) 1274–1300.

[10] J. R. McClean, F. M. Faulstich, Q. Zhu, B. O’Gorman, Y. Qiu,
S. R. White, R. Babbush, L. Lin, Discontinuous galerkin dis-
cretization for quantum simulation of chemistry, New. J. Phys.
22 (9) (2020) 093015.

[11] W. Hu, J. Liu, Y. Li, Z. Ding, C. Yang, J. Yang, Accelerating
excitation energy computation in molecules and solids within
linear-response time-dependent density functional theory via in-
terpolative separable density ﬁtting decomposition, J. Chem.
Theory. Comput. 16 (2) (2020) 964–973.

[12] J. Liu, W. Hu, J. Yang, Two-level iterative solver for linear
response time-dependent density functional theory with plane
wave basis set, J. Chem. Phys. 154 (6) (2021) 064101.

[13] L. Lin, Z. Xu, L. Ying, Adaptively compressed polarizability op-
erator for accelerating large scale ab initio phonon calculations,
Multiscale. Model. Simul. 15 (2017) 29–55.

23

[14] M. Ulbrich, Z. Wen, C. Yang, D. Klockner, Z. Lu, A proximal
gradient method for ensemble density functional theory, SIAM
J. Sci. Comput. 37 (4) (2015) A1975–A2002.

[15] Z. Wen, C. Yang, X. Liu, Y. Zhang, Trace-penalty minimization
for large-scale eigenspace computation, J. Sci. Comput. 66 (3)
(2016) 1175–1203.

[16] D. Hamann, Optimized norm-conserving vanderbilt pseudopo-

tentials, Phys. Rev. B 88 (8) (2013) 085117.

[17] C. Hartwigsen, S. Gœdecker, J. Hutter, Relativistic separable
dual-space gaussian pseudopotentials from h to rn, Phys. Rev. B
58 (7) (1998) 3641.

[18] F. Liu, L. Lin, D. Vigil-Fowler, J. Lischner, A. F. Kemper,
S. Sharifzadeh, H. Felipe, J. Deslippe, C. Yang, J. B. Neaton,
et al., Numerical integration for ab initio many-electron self en-
ergy calculations within the gw approximation, J. Comput. Phys.
286 (2015) 1–13.

[19] J. Hu, B. Jiang, L. Lin, Z. Wen, Y.-x. Yuan, Structured quasi-
newton methods for optimization with orthogonality constraints,
SIAM J. Sci. Comput. 41 (4) (2019) A2239–A2269.

[20] Y. Gao, C. Fu, W. Hu, J. Yang, Designing direct z-scheme het-
erojunctions enabled by edge-modiﬁed phosphorene nanorib-
bons for photocatalytic overall water splitting, J. Phys. Chem.
Lett. 13 (2021) 1–11.

[21] Z. Zhang, S. Jiao, J. Li, W. Wu, L. Wan, X. Qin, W. Hu, J. Yang,
KSSOLV-GPU: An eﬃcient gpu-enabled matlab toolbox for
solving the kohn-sham equations within density functional the-
ory in plane-wave basis set, Chin. J. Chem. Phys. 34 (5) (2021)
552–564.

[22] M. J. Frisch, G. W. Trucks, H. B. Schlegel, G. E. Scuseria, M. A.
Robb, J. R. Cheeseman, G. Scalmani, V. Barone, G. A. Peters-
son, H. Nakatsuji, X. Li, M. Caricato, A. V. Marenich, J. Bloino,
B. G. Janesko, R. Gomperts, B. Mennucci, H. P. Hratchian,
J. V. Ortiz, A. F. Izmaylov, J. L. Sonnenberg, D. Williams-
Young, F. Ding, F. Lipparini, F. Egidi, J. Goings, B. Peng,
A. Petrone, T. Henderson, D. Ranasinghe, V. G. Zakrzewski,
J. Gao, N. Rega, G. Zheng, W. Liang, M. Hada, M. Ehara,
K. Toyota, R. Fukuda, J. Hasegawa, M. Ishida, T. Nakajima,
Y. Honda, O. Kitao, H. Nakai, T. Vreven, K. Throssell, J. A.
Montgomery, Jr., J. E. Peralta, F. Ogliaro, M. J. Bearpark, J. J.
Heyd, E. N. Brothers, K. N. Kudin, V. N. Staroverov, T. A.
Keith, R. Kobayashi, J. Normand, K. Raghavachari, A. P. Ren-
dell, J. C. Burant, S. S. Iyengar, J. Tomasi, M. Cossi, J. M.
Millam, M. Klene, C. Adamo, R. Cammi, J. W. Ochterski,
R. L. Martin, K. Morokuma, O. Farkas, J. B. Foresman, D. J.
Fox, Gaussian˜16 Revision C.01, Gaussian Inc. Wallingford CT
(2016).

[23] M. Valiev, E. J. Bylaska, N. Govind, K. Kowalski, T. P.
Straatsma, H. J. Van Dam, D. Wang, J. Nieplocha, E. Apra, T. L.
Windus, et al., NWChem: A comprehensive and scalable open-
source solution for large scale molecular simulations, Comput.
Phys. Commun. 181 (9) (2010) 1477–1489.

[24] Y. Shao, Z. Gan, E. Epifanovsky, A. T. Gilbert, M. Wormit,
J. Kussmann, A. W. Lange, A. Behn, J. Deng, X. Feng, et al.,
Advances in molecular quantum chemistry contained in the Q-
Chem 4 program package, Mol. Phys. 113 (2) (2015) 184–215.
[25] Y. Zhang, B. Suo, Z. Wang, N. Zhang, Z. Li, Y. Lei, W. Zou,
J. Gao, D. Peng, Z. Pu, et al., BDF: A relativistic electronic
structure program package, J. Chem. Phys 152 (6) (2020)
064113.

[26] Q. Sun, T. C. Berkelbach, N. S. Blunt, G. H. Booth, S. Guo,
Z. Li, J. Liu, J. D. McClain, E. R. Sayfutyarova, S. Sharma,
et al., PySCF: the Python-based simulations of chemistry frame-
work, Wires. Comput. Mol. Sci. 8 (1) (2018) e1340.

[27] J. M. Soler, E. Artacho, J. D. Gale, A. Garc´ıa, J. Junquera,
P. Ordej´on, D. S´anchez-Portal, The SIESTA method for ab initio

order-N materials simulation, J. Phys. Condens. Matter. 14 (11)
(2002) 2745.

[28] X. Qin, H. Shang, H. Xiang, Z. Li, J. Yang, HONPAS: A linear
scaling open-source solution for large system simulations, Int.
J. Quantum. Chem. 115 (10) (2015) 647–655.

[29] H. Xiang, J. Yang, J. Hou, Q. Zhu, Linear-scaling density ma-
trix perturbation treatment of electric ﬁelds in solids, Phys. Rev.
Lett. 97 (26) (2006) 266402.

[30] X. Qin, J. Liu, W. Hu, J. Yang, Interpolative separable density
ﬁtting decomposition for accelerating Hartree–Fock exchange
calculations within numerical atomic orbitals, J. Phys. Chem.
A. 124 (27) (2020) 5664–5674.

[31] V. Blum, R. Gehrke, F. Hanke, P. Havu, V. Havu, X. Ren,
K. Reuter, M. Scheﬄer, Ab initio molecular simulations
with numeric atom-centered orbitals, Comput. Phys. Commun.
180 (11) (2009) 2175–2196.

[32] M. Chen, G. Guo, L. He, Systematically improvable optimized
atomic basis sets for ab initio calculations, J. Phys. Condens.
Matter. 22 (44) (2010) 445501.

[33] G. Kresse, J. Hafner, Ab initio molecular dynamics for liquid

metals, Phys. Rev. B 47 (1) (1993) 558.

[34] X. Gonze, J.-M. Beuken, R. Caracas, F. Detraux, M. Fuchs, G.-
M. Rignanese, L. Sindic, M. Verstraete, G. Zerah, F. Jollet, et al.,
First-principles computation of material properties: the ABINIT
software project, Comput. Mater. Sci. 25 (3) (2002) 478–492.

[35] P. Giannozzi, S. Baroni, N. Bonini, M. Calandra, R. Car,
C. Cavazzoni, D. Ceresoli, G. L. Chiarotti, M. Cococcioni,
I. Dabo, et al., QUANTUM ESPRESSO: a modular and open-
source software project for quantum simulations of materials, J.
Phys. Condens. Matter. 21 (39) (2009) 395502.

[36] W. Jia, J. Fu, Z. Cao, L. Wang, X. Chi, W. Gao, L.-W. Wang,
Fast plane wave density functional theory molecular dynam-
ics calculations on multi-GPU machines, J. Comput. Phys 251
(2013) 102–115.

[37] W. Hu, L. Lin, A. S. Banerjee, E. Vecharynski, C. Yang, Adap-
tively compressed exchange operator for large-scale hybrid den-
sity functional calculations with applications to the adsorption
of water on silicene, J. Chem.Theory. Comput. 13 (3) (2017)
1188–1198.

[38] J. J. Mortensen, L. B. Hansen, K. W. Jacobsen, Real-space grid
implementation of the projector augmented wave method, Phys.
Rev. B 71 (3) (2005) 035109.

[39] J. Enkovaara, C. Rostgaard, J. J. Mortensen, J. Chen, M. Dułak,
L. Ferrighi, J. Gavnholt, C. Glinsvad, V. Haikola, H. Hansen,
et al., Electronic structure calculations with GPAW: a real-space
implementation of the projector augmented-wave method, J.
Phys. Condens. Matter. 22 (25) (2010) 253202.

[40] Q. Xu, A. Sharma, P. Suryanarayana, M-SPARC: MATLAB-
Simulation Package for Ab-initio Real-space Calculations, Soft-
wareX. 11 (2020) 100423.

[41] F. Fathurrahman, M. K. Agusta, A. G. Saputro, H. K. Dipojono,
PWDFT. jl: A Julia package for electronic structure calculation
using density functional theory and plane wave basis, Comput.
Phys. Commun. 256 (2020) 107372.

[42] M. F. Herbst, A. Levitt, E. Canc`es, Dftk: A julian approach for
simulating electrons in solids, Proc. JuliaCon. Conf. 3 (2021)
69.

[43] J. Ihm, A. Zunger, M. L. Cohen, Momentum-space formalism
for the total energy of solids, J. Phys. C, Solid State Phys.
12 (21) (1979) 4409.

[46] J. P. Perdew, K. Burke, M. Ernzerhof, Generalized gradient ap-
proximation made simple, Phys. Rev. Lett. 77 (18) (1996) 3865.
[47] A. Stroppa, G. Kresse, The shortcomings of semi-local and hy-
brid functionals: what we can learn from surface science studies,
New. J. Phys. 10 (6) (2008) 063020.

[48] L. Schimka, J. Harl, A. Stroppa, A. Gr¨uneis, M. Marsman,
F. Mittendorfer, G. Kresse, Accurate surface and adsorption en-
ergies from many-body perturbation theory, Nat. Mater. 9 (9)
(2010) 741–744.

[49] H. Sun, D. J. Mowbray, A. Migani, J. Zhao, H. Petek, A. Rubio,
Comparing quasiparticle H2O level alignment on anatase and
rutile TiO2, Acs Catal. 5 (7) (2015) 4242–4254.

[50] E. J. Baerends, D. Ellis, P. Ros, Self-consistent molecular
Hartree—Fock—Slater calculations I. The computational pro-
cedure, Chem. Phys. 2 (1) (1973) 41–51.

[51] L. Lin, Adaptively Compressed Exchange Operator, J. Chem.

Theory. Comput. 12 (5) (2016) 2242–2249.

[52] W. Hu, L. Lin, C. Yang, Projected commutator DIIS method for
accelerating hybrid functional electronic structure calculations,
J. Chem. Theory. Comput. 13 (11) (2017) 5458–5467.

[53] W. Hu, L. Lin, C. Yang, Interpolative separable density ﬁtting
decomposition for accelerating hybrid density functional calcu-
lations with applications to defects in silicon, J. Chem. Theory.
Comput. 13 (11) (2017) 5420–5431.

[54] J. Lee, L. Lin, M. Head-Gordon, Systematically improvable ten-
sor hypercontraction: Interpolative separable density-ﬁtting for
molecules applied to exact exchange, second-and third-order
Møller–Plesset perturbation theory, J. Chem. Theory. Comput.
16 (1) (2019) 243–263.

[55] J. C. Phillips, L. Kleinman, New method for calculating wave
functions in crystals and molecules, Phys. Rev. 116 (2) (1959)
287.

[56] P. Giannozzi, F. De Angelis, R. Car, First-principle molecular
dynamics with ultrasoft pseudopotentials: Parallel implementa-
tion and application to extended bioinorganic systems, J. Chem.
Phys. 120 (13) (2004) 5903–5915.

[57] M. Schlipf, F. Gygi, Optimization algorithm for the generation
of oncv pseudopotentials, Comput. Phys. Commun. 196 (2015)
36–44.

[58] D. G. Anderson, Iterative procedures for nonlinear integral
equations, J. Assoc. Comput. Mach. 12 (4) (1965) 547–560.
[59] P. Pulay, Convergence acceleration of iterative sequences. the
case of scf iteration, Chem. Phys. Lett. 73 (2) (1980) 393–398.
[60] G. Kerker, Eﬃcient iteration scheme for self-consistent pseu-
dopotential calculations, Phys. Rev. B 23 (6) (1981) 3082.
[61] G. Kresse, J. Furthm¨uller, Eﬃcient iterative schemes for ab ini-
tio total-energy calculations using a plane-wave basis set, Phys.
Rev. B 54 (16) (1996) 11169.

[62] Y. Zhou, J. R. Chelikowsky, X. Gao, A. Zhou, On the “precondi-
tioning” function used in planewave dft calculations and its gen-
eralization, Commun. Comput. Phys. 18 (1) (2015) 167–179.

[63] C. Yang, J. C. Meza, L.-W. Wang, A constrained optimization
algorithm for total energy minimization in electronic structure
calculations, J. Comput. Phys 217 (2) (2006) 709–721.

[64] C. Yang, J. C. Meza, L.-W. Wang, A trust region direct con-
strained minimization algorithm for the Kohn–Sham equation,
SIAM J. Sci. Comput. 29 (5) (2007) 1854–1875.

[65] J. A. Duersch, M. Shao, C. Yang, M. Gu, A robust and eﬃ-
cient implementation of LOBPCG, SIAM J. Sci. Comput. 40 (5)
(2018) C655–C676.

[44] R. M. Martin, Electronic structure, Basic Theory and Practical

[66] C. Davidson, 14) IF f lag D 0 THEN, J. Comput. Phys 17 (1975)

Methods,, Cambridge University Press, 2020.

87–94.

[45] J. P. Perdew, A. Zunger, Self-interaction correction to density-
functional approximations for many-electron systems, Phys.
Rev. B 23 (10) (1981) 5048.

[67] Y. Zhou, Y. Saad, M. L. Tiago, J. R. Chelikowsky, Self-
consistent-ﬁeld calculations using chebyshev-ﬁltered subspace
iteration, J. Comput. Phys. 219 (1) (2006) 172–184.

24

sis set, J. Phys. Chem. A 125 (34) (2021) 7545–7557.

[89] J. Vinson, J. Rehr, J. Kas, E. Shirley, Bethe-salpeter equation
calculations of core excitation spectra, Phys. Rev. B 83 (11)
(2011) 115106.

[68] E. Vecharynski, C. Yang, J. E. Pask, A projected precondi-
tioned conjugate gradient algorithm for computing many ex-
treme eigenpairs of a hermitian matrix, J. Comput. Phys. 290
(2015) 73–89.

[69] G. Kresse, J. Furthm¨uller, Eﬃcient iterative schemes for ab ini-
tio total-energy calculations using a plane-wave basis set, Phys.
Rev. B 54 (16) (1996) 11169.

[70] R. Car, M. Parrinello, Uniﬁed approach for molecular dynamics
and density-functional theory, Phys. Rev. Lett. 55 (22) (1985)
2471.

[71] R. P. Feynman, Forces in molecules, Phys. Rev. 56 (4) (1939)

340.

[72] J. D. Head, M. C. Zerner, A Broyden-Fletcher-Goldfarb-Shanno
optimization procedure for molecular geometries, Chem. Phys.
Lett. 122 (3) (1985) 264–270.

[73] T. F. Coleman, Y. Li, On the convergence of interior-reﬂective
newton methods for nonlinear minimization subject to bounds,
Math. Program. 67 (1) (1994) 189–224.

[74] D. C. Liu, J. Nocedal, On the limited memory bfgs method for
large scale optimization, Math. Program. 45 (1) (1989) 503–528.
[75] M.L. Overton., HANSO:Hybrid Algorithm for Non-Smooth
Optimization, https://cs.nyu.edu/~overton/software/
hanso/index.html (2006).

[76] J. V. Burke, A. S. Lewis, M. L. Overton, A robust gradient sam-
pling algorithm for nonsmooth, nonconvex optimization, SIAM
J. Optimiz. 15 (3) (2005) 751–779.

[77] M.L. Overton., NLCG:Nonlinear Conjugate Gradient, https:

//cs.nyu.edu/~overton/software/nlcg/index.html
(2010).

[78] E. Bitzek, P. Koskinen, F. G¨ahler, M. Moseler, P. Gumbsch,
Structural relaxation made simple, Phys. Rev. Lett. 97 (17)
(2006) 170201.

[79] C. Edmiston, K. Ruedenberg, Localized atomic and molecular

orbitals, Rev. Mod. Phys. 35 (3) (1963) 457.

[80] N. Marzari, A. A. Mostoﬁ, J. R. Yates, I. Souza, D. Vanderbilt,
Maximally localized Wannier functions: Theory and applica-
tions, Rev. Mod. Phys. 84 (2012) 1419–1475.

[81] N. Marzari, D. Vanderbilt, Maximally localized generalized
wannier functions for composite energy bands, Phys. Rev. B
56 (20) (1997) 12847.

[82] A. Damle, L. Lin, L. Ying, Compressed representation of kohn–
sham orbitals via selected columns of the density matrix, J.
Chem. Theory. Comput. 11 (4) (2015) 1463–1469.

[83] I. Carnimeo, S. Baroni, P. Giannozzi, Fast hybrid density-
functional computations using plane-wave basis sets, Electron.
Struct. 1 (1) (2019) 015009.

[84] K. Wu, X. Qin, W. Hu, J. Yang, Low-rank approximations ac-
celerated plane-wave hybrid functional calculations with k-point
sampling, J. Chem. Theory. Comput. (2021).

[85] W. Hu, L. Lin, A. S. Banerjee, E. Vecharynski, C. Yang, Adap-
tively compressed exchange operator for large-scale hybrid den-
sity functional calculations with applications to the adsorption
of water on silicene, J. Chem. Theory. Comput. 13 (3) (2017)
1188–1198.

[86] K. Momma, F. Izumi, VESTA 3 for three-dimensional visualiza-
tion of crystal, volumetric and morphology data, J. Appl. Crys-
tallogr. 44 (6) (2011).

[87] M. R. Milovanovi´c, J. M. ˇZivkovi´c, D. B. Ninkovi´c, I. M.
Stankovi´c, S. D. Zari´c, How ﬂexible is the water molecule struc-
ture? Analysis of crystal structures and the potential energy sur-
face, Phys. Chem. Chem. Phys. 22 (7) (2020) 4138–4143.
[88] H. Ma, L. Wang, L. Wan, J. Li, X. Qin, J. Liu, W. Hu, L. Lin,
C. Yang, J. Yang, Realizing eﬀective cubic-scaling coulomb
hole plus screened exchange approximation in periodic systems
via interpolative separable density ﬁtting with a plane-wave ba-

25

