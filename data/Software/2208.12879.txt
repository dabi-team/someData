2
2
0
2

g
u
A
6
2

]

A
N
.
h
t
a
m

[

1
v
9
7
8
2
1
.
8
0
2
2
:
v
i
X
r
a

DelayDiﬀEq: Generating Delay Diﬀerential Equation Solvers via
Recursive Embedding of Ordinary Diﬀerential Equation Solvers

David Widmann 1 and Chris Rackauckas

234

1Uppsala University, Sweden
2Massachusetts Institute of Technology, USA
3Julia Computing
4Pumas-AI

August 30, 2022

Abstract

Traditional solvers for delay diﬀerential equations (DDEs) are designed around only a single method and do not
eﬀectively use the infrastructure of their more-developed ordinary diﬀerential equation (ODE) counterparts. In this
work we present DelayDiffEq, a Julia package for numerically solving delay diﬀerential equations (DDEs) which
leverages the multitude of numerical algorithms in OrdinaryDiffEq for solving both stiﬀ and non-stiﬀ ODEs, and
manages to solve challenging stiﬀ DDEs. We describe how compiling the ODE integrator within itself, and accounting
for discontinuity propagation, leads to a design that is eﬀective for DDEs while using all of the ODE internals. We
highlight some diﬃculties that a numerical DDE solver has to address, and explain how DelayDiffEq deals with
these problems. We show how DelayDiffEq is able to solve diﬃcult equations, how its stiﬀ DDE solvers give
eﬃciency on problems with time-scale separation, and how the design allows for generality and ﬂexibility in usage
such as being repurposed for generating solvers for stochastic delay diﬀerential equations.

K eywords Julia, Delay Diﬀerential Equation, Scientiﬁc Computing

1

Introduction

In nature many changes do not occur instantaneously, as
prominent examples such as gestation times and incuba-
tion periods indicate. This lead to the rise of delay diﬀer-
ential equations (DDEs) in many areas of mathematical
modeling, such as population dynamics, pharmacokinet-
In contrast to ordinary
ics, and control problems [2].
diﬀerential equations (ODEs), DDEs allow the rate of
change to depend on past conditions of the considered
system.

However, while DDEs are a small conceptual change
to ODEs, there is a larger mathematical diﬀerence that
arises. Speciﬁcally, many DDEs have a discontinuity in
the initial condition which, unlike ODEs, will continue
to be in the system and propagate as we describe further
in Section 2.3. Handling these propagations is crucial to
performance and accuracy, and thus the software of this
ﬁeld, such as the MATLAB dde23 [14] and the classic
RADAR5 [9], are completely separate software from those
of ODE integrators. This gives rise to many develop-
ment and maintenance issues: while in theory an advance
in linear solvers (Newton-Krylov methods, precondition-
ers, etc.) can be used in DDE solvers, in practice none
of these solvers support these features while their more-

developed ODE counterparts do. This raises the question
as to whether DDE software could be designed to more
eﬀectively make use of the ODE infrastructure so that
all developments of the ODE solvers are inherited by the
DDE solvers.

To answer this challenge we developed DelayDiffEq,
a DDE solver package in Julia [4] which uses the ODE
solvers of OrdinaryDiffEq [13] to develop the DDE
solvers. We describe a form of “compilation trick”, com-
piling an ODE integrator inside of an ODE integrator,
which is used to generate the DDE solvers from the ODE
solvers. This alone however does not guarantee the accu-
rate handling of discontinuities, and thus DelayDiffEq
then modiﬁes the stepping to account for these issues.
This gives a DDE solver where all methods of the ODE
solver, ones for non-stiﬀ and stiﬀ equations, are directly
inherited by the DDE solver with all of the available op-
tions. We show that this generated solver is capable of
handling known diﬃcult equations to verify its accuracy.1

1The source code of the paper and its examples are available on

Github.

1

 
 
 
 
 
 
2 Background

2.1 Deﬁnition

Loosely speaking, a delay diﬀerential equation (DDE) is
an ordinary diﬀerential equation (ODE) in which the
derivative depends on past values of the state. More
concretely, let t ∈ R be the independent variable, which
usually denotes time, and x(t) ∈ Rn be the dependent
state at time t. Then the diﬀerential equation

x′(t) = f (t, x(t), x(t − τ )),

(1)

where f : R × Rn × Rn and τ > 0, is called a DDE with
constant delay τ .
In general, a delay τ may also de-
pend on t or even on both t and x(t). In this case we
call the DDE time-dependent or state-dependent, respec-
tively. Additionally, DDEs may contain multiple delays.
A further generalization is possible by allowing the state
to depend also on its derivative at previous time points,
yielding so-called neutral DDEs.

2.2 History function

For ODEs, so-called initial value problems (IVPs) can be
formulated by specifying an initial condition x(t) = x0
at an initial time point t0. For DDEs, usually declaring
an initial value only at time point t0 is not suﬃcient.
Instead typically a so-called history function, or initial
function, has to be provided for some times t ≤ t0. Thus
commonly an IVP formulation for the DDE in eq. (1) is
given by

x′(t) = f (t, x(t), x(t − τ )),
x(t) = x0(t),

t ≥ t0,
t ≤ t0.

(2)

2.3 Propagated discontinuities

Even if x0, f , and τ (t, x(t)) are smooth, typically the
solution x is non-smooth since it has a derivative jump
discontinuity at the initial time point t0, i.e.,

lim
t→t0

x′
0(t) 6= lim
t→t0

x′(t).

If there exist time points t > t0 such that the deviated ar-
gument t − τ (t, x(t)) < t0, then the discontinuity at time
point t0 will propagate in time and induce discontinuities
at subsequent time points. For non-neutral DDEs these
propagated discontinuities are usually discontinuities of
higher-order derivatives, leading to a so-called smooth-
ing of the solution, whereas in general for neutral DDEs
smoothing does not occur [3, 11].

2.4 Example: Dynamical structure

solution

)
t
(
x

1

0.5

300

350

400

450

500

550

600

t

time delay embedding

)
τ
−

t
(
x

1

0.5

0.4

0.6

0.8

1

1.2

1.4

x(t)

Figure 1: Solution of problem (3) and its time delay em-
bedding.

values we can observe a chaotic behavior. The model is
given by

x′(t) =

λθnx(t − τ )
θn + x(t − τ )n − γx(t),

x(t) = x0,

t ≥ 0,

t ≤ 0.

(3)

For the parameter values λ = 2, θ = 1, n = 9.65, τ = 2,
γ = 1, and x0 = 0.5 the system exhibits a chaotic so-
lution [8, Figure 6(e)]. In Figure 1 the chaotic solution
computed with DelayDiffEq and its time delay embed-
ding are shown for time 300 ≤ t ≤ 600.

2.5 Method of steps

Consider an IVP for a DDE with one constant delay,
given by eq. (2). Assuming that a solution to this prob-
lem exists, a solution can be found by computing solu-
tions of an iterative sequence of IVPs for diﬀerent ODEs.
More concretely, for k = 1, 2, . . . one computes a solution
xk : [tk−1, tk−1 + τ ] → Rn of the IVP

′
k(t) = f (t, xk(t), xk−1(t − τ )),
x

t ∈ [tk−1, tk],

xk(tk−1) = xk−1(tk−1),

(4)

where tk := t0 + kτ . Then the function x deﬁned by
x(t) := xk(t) ⇐⇒ t ∈ [tk−1, tk) is a solution to the origi-
nal IVP in eq. (2).

Mackey and Glass’ model of circulating blood cells [8]
is a scalar DDE system but still for certain parameter

This algorithm for solving DDEs is called method of
steps. It can be applied more generally also to IVPs of

2

DDEs with multiple state-dependent delays, as long as
the delays are uniformly strictly greater than 0. The
same iterative approach can be used to transfer results
from the theory of ODEs such as existence, uniqueness,
and boundedness of solutions to DDEs without vanishing
delays.

3 Numerical challenges

For DDEs, the computation of numerical solutions of
IVPs can be challenging. In theory the method of steps
allows to reduce the problem to the computation of a
sequence of numerical solutions to IVPs of ODEs. A cru-
cial requirement for this approach to work are so-called
continuous ODE methods that provide a numerical solu-
tion not only for a grid of discrete time points but for all
time points in the integration interval.

A disadvantage of the method of steps that it can be
ineﬃcient. The algorithm requires that the step size is
upper bounded by the minimally occurring delay, and
hence the number of time steps can become large if the
maximally allowed step size is small relative to the inte-
gration time interval. Additionally, problems with van-
ishing delays cannot be solved by the method of steps.

Another diﬃculty is posed by the fact that usually nu-
merical methods for solving ODEs expect the solution to
be suﬃciently smooth in each step. To ensure this, propa-
gated discontinuities have to be considered and included
in the grid of time points that the numerical method
steps to [3]. For constant delays the relevant discontinu-
ities can be computed a priori but for state-dependent
delays this is not possible. Even for constant delays nu-
merical diﬃculties can arise, as Shampine and Thomp-
two constant delays of 1/3 and 1,
son [14] illustrate:
albeit both inducing propagated discontinuities at time
point t0 + 1, might seem to cause discontinuities at dif-
ferent time points numerically since 1/3 cannot be rep-
resented exactly by the ﬂoating point arithmetic of com-
puters.

4 How DelayDiﬀEq works

So far one of the core design principles of DelayDiffEq
has been to exploit
the large amount of numeri-
cal ODE algorithms readily available in the Julia
package OrdinaryDiffEq.
The ODE solvers in
OrdinaryDiffEq support both stiﬀ and non-stiﬀ
ODEs2. Moreover, the numerical methods are contin-
uous and come with specialized interpolations.

The design of DelayDiffEq is as follows. In order
for a user to describe a DDE, we need to have a history
function which the user can access. This history function

2Although it “is extremely diﬃcult to classify stiﬀness in a com-
pletely rigorous manner” [6], it is commonly characterized by the
existence of processes with signiﬁcantly diﬀerent time scales [6, 7].

is a continuous function of the states of the DDE solu-
tion, which, if we only had an ODE, would be given by
the dense output (continuous interpolation) of the ODE
solver. Thus what we do is the following:

1. Create an ODE integrator from OrdinaryDiffEq
with state size matching the DDE we wish to solve.
The integrator comes with the property that integ(t)
computes the interpolation at time point t given the
current solution of the ODE.

2. Generate an ODE by enclosing this interpolation
object into the user-deﬁned DDE: fODE(t, x(t)) =
f (t, x(t), integ).

3. Create a new ODE integrator to solve the fODE sys-
tem. If the interpolation integ is correct, then the
solution of this new ODE will give the solution of
the DDE.

The second ODE integrator will have the correct state
values x(t) and stage calculation if the function integ
is correct. On the other hand, integ is only a correct
interpolation if it has the correct state values x(t) and
stage calculations. Thus we eﬀectively alias the caches
between the two versions of the ODE integrators, so that
a step of the second ODE integrator updates its history
function, which then allows for an accurate step of the
integrator.

Notably, this scheme does not require implementing
any new numerical integrators and simply relies on the
ODE integration itself. However, as described this
scheme is correct only if a new step uses only the his-
tory of previous steps, i.e., only when the step size is
smaller than the minimum delay time. Thus while this
generates an ODE solver, more work must be done to
make this routine eﬃcient.

4.1 Unconstrained time stepping

As discussed above, it is desirable to not upper bound
the step size that the numerical solver is allowed to take.
However, unconstrained time stepping comes at a cost.
Allowing unconstrained steps implies that the numerical
solution of the DDE is only available as the solution to an
implicit problem, even for explicit ODE methods. Essen-
tially, one must know that integ is correct to know that
the next step is correct, but if the time step is larger than
the minimum delay then the integrator will use an inaccu-
rate extrapolation from the previous time step. In order
to correct for this behavior, we transform this problem
into an implicit problem which can be solved via ﬁxed-
point iteration.

Formally, in the kth integration step we want to com-
pute an approximation ˆxk : [tk−1, tk] → Rn of the solu-
tion to the DDE in eq. (1) with approximate solution ˆx(t)
for t ≤ tk−1 as history function. In DelayDiffEq, we

3

perform a ﬁxed-point iteration to compute ˆxk if it is only
available implicitly. Hereby we proceed in the following
way:

1. Extend the dense solution ˆx up to time tk−1
to the time interval
[tk−1, tk] by extrapolating
the specialized collocation polynomials available in
OrdinaryDiffEq.

2. Based on the approximation up to time tk, compute
a discrete approximation of x(tk) and additional col-
location stages in the time interval [tk−1, tk] by using
an ODE method from OrdinaryDiffEq.

3. Obtain a new dense approximation of the solution
on time interval [tk−1, tk] by completing this discrete
approximation using the specialized collocation poly-
nomials in OrdinaryDiffEq.

4. If in steps 2 and 3 the "old" dense approximation
was only evaluated at time points ≤ tk−1, we stop.
Otherwise we repeat steps 2 and 3 iteratively based
on the newly calculated approximations, until some
stopping criterion is met.

The ﬁxed-point iteration can be performed eﬃciently
since OrdinaryDiffEq allows us to specify that the
Jacobian and its factorization should only be evaluated
once. Optionally, Anderson acceleration [1, 16] can be
used to accelerate the convergence of the ﬁxed-point
for the one-
iteration. We have observed that, e.g.,
dimensional IVP

(t) = −x(t − 1/3) − x(t − 1/5),

′
x
x(t) = δ0(t),

t ∈ [0, 100],
t ≤ 0,

Anderson acceleration reduces the number of evalua-
tions of the model, ﬁxed-point iterations, and conver-
gence failures from 5517, 720, and 58 to 2829, 308, and
30, respectively, when the explicit ODE method Tsit5,
relative tolerance 10−3, and absolute tolerance 10−6 are
used.

4.2 Discontinuities

User-provided discontinuities and discontinuities arising
from constant time delays up to the order of the ODE
method are added as grid points. Existing functional-
ity in OrdinaryDiffEq for handling discontinuities en-
sures that the numerical solver steps to these discontinu-
ities exactly and integration is restarted appropriately at
these time points.

Discontinuities due to state-dependent delays are han-

dled by locating time points ξ that satisfy

where ζ is a known discontinuity and ˜x is the current
approximation of the solution x, and adding them as
grid points. We search for such discontinuities only
if a step is rejected and rely on the error estimator
If a step is rejected, we check for sign
otherwise.
changes of ξi − τ (˜x(ξi), ξi) − ζj at pre-deﬁned number
of equally spaced time points ξi in the current time inter-
val [tk−1, tk], where ζj ≤ tk−1 are known discontinuities.
If a sign change is detected, a solution ξ of eq. (5) is
calculated by a root ﬁnding algorithm and added as grid
point, and the step size is reduced accordingly. We do
not try to ﬁnd the earliest time point that satisﬁes eq. (5)
but stop as soon as one discontinuity is found in the time
interval [tk−1, tk]. A very similar algorithm is used by the
DDE solver RADAR5 by Guglielmi and Hairer [9], how-
ever, they additionally locate discontinuities if the error
estimates increases above a certain threshold in subse-
quent time steps.

Users may also specify no time delays at all. In that
case, the choice of a method with residual error estimator
such as RK4 or OwrenZen5 is strongly recommended be-
cause the residual error estimator attempts to ensure ac-
curacy over the entire solution interval instead of simply
at step points. This may be required for the history func-
tion (i.e., the ODE integrator’s interpolation) to have the
relevant accuracy.

4.3 Interface

but

only

We do not present all
features and options of
DelayDiffEq
example
one
for how DDEs can be declared and solved with
DelayDiffEq. For a more thorough explanation we
refer the reader to the extensive documentation of the
DifferentialEquations framework.3

provide

The interface of DelayDiffEq is similar to the one
for ODEs in OrdinaryDiffEq or stochastic diﬀeren-
tial equations (SDEs) in StochasticDiffEq [12]. The
code snippet below shows how a version of the so-called
Hutchinson’s equation [10], a population growth model
also known as delay logistic equation, can be formulated
with DelayDiffEq. The model is given by

(t) = −x(t − 1),

′
x
x(t) = 1,

t ≥ 0,
t ≤ 0.

(6)

In DelayDiffEq, a DDE problem consists of the dif-
ferential equation, the history function, the integration
time span, and the time delays. Optionally a value at the
initial time point and model parameters can be provided.

✞

using DelayDiffEq

# Hutchinson's equation
f(x, h, p, t) = - h(p, t - 1)

☎

ζ = ξ − τ (˜x(ξ), ξ),

3The

documentation

is

available

online

at

(5)

http://docs.sciml.ai/stable/.

4

# History function
h(p, t) = 1.0

# Integration time span
tspan = (0.0, 10.0)

# Complete DDE problem formulation
prob = DDEProblem(f, h, tspan;

✝

constant_lags = (1.0,))

Although not useful

for illustrative
purposes we demonstrate how a problem with state-
dependent delay can be formulated.

in this case,

✞

# Complete DDE problem formulation
# with state-dependent delay
lag(p, t) = 1.0
prob = DDEProblem(f, h, tspan;

✝

dependent_lags = (lag,))

In both cases presented above,

✞

✝

solve(prob, MethodOfSteps(Tsit5()))

• Support for a wide range of linear solvers, such as

preconditioned GMRES

We note in passing that the quasi-Newton schemes
used in the ODE solvers only require the Jacobian and
its factorization at the beginning of the step for the non-
FIRK implicit methods. This means that the entire han-
dling of the unconstrained time stepping of Section 4.1
can be done without recalculating the Jacobian or refac-
torizing the Jacobian. As these steps are commonly the
most costly aspect for solving large stiﬀ equations, this
greatly improves the eﬃciency of the implementation
over using a naive Newton solve.

5 Examples

5.1 Stiﬀ problem: Antibody production

Next we consider a DDE model of antigen stimulated an-
tibody production by Waltman [17]. The model is given
by

✆

☎

✆

☎

✆

computes a solution to the problem with the
ODE method Tsit5, using the default solver op-
tions. DelayDiffEq supports DDEs with mass ma-
trices and neutral DDEs as well. Similar to the ODE
case, singular mass matrix DDEs generate diﬀerential-
algebraic equations (DAEs) which are then solved via
the OrdinaryDiffEq DAE solvers.

From the structure of the design, DelayDiffEq in-
cludes all of the features of the OrdinaryDiffEq ODE
solvers, including (but not limited to):

• Explicit Runge-Kutta methods from 1st order to 9th
order, and arbitrary order extrapolation methods

• Semi-implicit Rosenbrock methods (allows for singu-

lar mass matrices)

• Implicit methods via Singularly Diagonally Implicit
Runge-Kutta methods (SDIRK) and Backwards Dif-
ferentiation Formulae (BDF)

• Fully-Implicit Runge-Kutta (FIRK) methods

• Stabilized explicit methods via Runge-Kutta Cheby-

shev methods (ROCK schemes)

• Dense output

• Support for sensitivity analysis via forward and re-

verse mode automatic diﬀerentiation

• Event handling for hybrid equations

x′
1(t) = −rx1(t)x2(t) − sx1(t)x4(t),
′
2(t) = −rx1(t)x2(t)
x

+ αrx1(x5(t))x2(x5(t))H(t − t1),

′
x
3(t) = rx1(t)x2(t),
x′
4(t) = −sx1(t)x4(t) − γx4(t)

+ βrx1(x6(t))x2(x6(t))H(t − t2),

x′
5(t) = H(t − t1)

x′
6(t) = H(t − t2)

x1(t)x2(t) + x3(t)
x1(x5(t))x2(x5(t)) + x3(x5(t))
10−12 + x2(t) + x3(t)
10−12 + x2(x6(t)) + x3(x6(t))

,

(7)

,

where H is the Heavyside step function, i.e., H(t) = 0 if
t < 0 and H(t) = 1 if t ≥ 0. As Guglielmi and Hairer [9],
we consider the model on the time interval t ∈ [0, 300]
with parameter values α = 1.8, β = 20, γ = 0.002, r =
5 × 104, s = 105, t1 = 35, t2 = 197, and history functions
x1(t) = 5 × 10−6, x2(t) = 10−15, and x3(t) = x4(t) =
x5(t) = x6(t) = 0 for all t ≤ 0.

This problem is very stiﬀ, contains vanishing state-
dependent delays, and displays steep increases in com-
ponents x2, x4, and x6 at time points t1 and t2 [9, 17].
Guglielmi and Hairer [9] compared their code RADAR5
with ﬁve existing numerical solvers, and only RADAR5
was able to solve problem (7).4 As shown in Figure 2,
DelayDiffEq manages to reproduce Figure 3 in [9] us-
ing the stiﬀ ODE solver KenCarp5. As Guglielmi and
Hairer [9], we used relative tolerances of 10−9 and abso-
lute tolerances 10−21 and 10−9 for the ﬁrst four and the
last two components, respectively. We are pleased to see

• Jacobians for implicit methods deﬁned by automatic
diﬀerentiation, along with the ability to deﬁne ana-
lytical Jacobians

4A later produced blog post showed that Maple was able to
successfully solve the problem, while Mathematica and MATLAB
solvers were not.

5

10−4

10−12

10−20

300

200

100

0

0

arguments

50

100

150

200

250

300

t

Figure 2: Solution of problem (7).

that DelayDiffEq can cope with the discontinuities at
the time points t1 = 35 and t2 = 197, even though they
are not declared as grid points as in [9].

5.2 Sensitivity analysis via automatic dif-

ferentiation

The SciMLSensitivity tutorials highlight
that
DelayDiffEq is compatible with forward- and reverse-
mode automatic diﬀerentiation. For this example, we
deﬁne a Lotka-Volterra model with delay and constant
history function:

✞

using DelayDiffEq
using SciMLSensitivity, ForwardDiff, Zygote

# Lotka-Volterra model with delay
function lv!(du, u, h, p, t)

x, y = u
α, β, δ, γ = p
xτ = h(p, t - 0.1)[1]
du[1] = dx = (α - β * y) * xτ
du[2] = dy = (δ * x - γ) * y
return nothing

end

# Constant history function
history_lv(p, t) = ones(2)

✝

The following function computes the solution of the

DDE model on an equally-spaced time grid:

✞

function predict_lv(p)

# Define the DDE problem
prob = DDEProblem(lv!, history_lv, (0.0, 5.0),

p;
constant_lags = (0.1,))

# Solve the problem and save the solution at
# time points 0, 0.1, 0.2, ..., 5
sol = solve(prob, MethodOfSteps(Tsit5());

saveat = 0.1)

return Array(sol)

end

✝

☎

✆

☎

✆

6

x1
x2
x3
x4

x5
x6

This function includes the DDE solver and is compati-
ble with forward- and reverse mode automatic diﬀerenti-
ation:

✞

# Parameters
p = [2.2, 1.0, 2.0, 0.4]

# Compute Jacobian
jacFD = ForwardDiff.jacobian(predict_lv, p)
jacZygote = Zygote.jacobian(predict_lv, p)[1]

✝

☎

✆

☎

✆

5.3 Algorithm development and bench-

marking

To facilitate the research and development of eﬃcient
DDE solving, DelayDiffEq ties into the SciMLBench-
marks ecosystem to provide an easy way to benchmark
its DDE solvers. A demonstration of a work-precision
diagram generated by DiffEqDevTools on a delay dif-
ferential equation model of quorum sensing [5] is shown
in Figure 3.

✞

using DelayDiffEq
using DiffEqDevTools
using DDEProblemLibrary

function benchmark()

# Compute reference solution of third state
# with low tolerances
fpsolve = NLFunctional(; max_iter = 1000)
alg = MethodOfSteps(Vern9(); fpsolve)
sol = TestSolution(solve(prob_dde_qs, alg;

reltol = 1e-14,
abstol = 1e-14,
save_idxs = 3))

# Benchmark different algorithms
setups = [

Dict(:alg => MethodOfSteps(RK4())),
Dict(:alg => MethodOfSteps(DP5())),
Dict(:alg => MethodOfSteps(OwrenZen3())),
Dict(:alg => MethodOfSteps(OwrenZen5())),
Dict(:alg => MethodOfSteps(Vern6())),
Dict(:alg => MethodOfSteps(Vern7())),
Dict(:alg => MethodOfSteps(Vern8())),
Dict(:alg => MethodOfSteps(Vern9())),
Dict(:alg => MethodOfSteps(Rosenbrock23())),
Dict(:alg => MethodOfSteps(Rodas4())),
Dict(:alg => MethodOfSteps(Rodas5P())),

]
abstols = exp10.(-(4:11))
reltols = exp10.(-(1:8))
return WorkPrecisionSet(prob_dde_qs,

abstols,
reltols,
setups;
save_idxs = 3,
appxsol = sol,
maxiters = Int(1e5),
error_estimate = :l2)

end

✝

Notice how with very little code, DDE integrators for
non-stiﬀ and stiﬀ DDEs can be compared to help opti-
mize the implementations.

RK4
DP5
OwrenZen3
OwrenZen5
Vern6
Vern7
Vern8
Vern9
Rosenbrock23
Rodas4
Rodas5P

10−2

)
s
(

e
m

i
t

10−3

10−4

10−16 10−14 10−12 10−10

10−8

10−6

10−4

error

Figure 3: Benchmarks on a DDE model of quorum sens-
ing [5].

5.4 Stochastic delay diﬀerential equa-

tions

This same infrastructure of DelayDiffEq was used on
StochasticDiffEq for SDEs to generate convergent
solvers for stochastic delay diﬀerential equations, as was
demonstrated in [15].

6 Conclusion

In this paper we presented DelayDiffEq, a Julia soft-
ware package for numerically solving DDEs. We ex-
plained the employed numerical algorithm and showed
that it can successfully solve very stiﬀ systems with
state-dependent delays. But most importantly, the de-
sign of DelayDiffEq allows it to inherit all of the
development work from the OrdinaryDiffEq solvers
of DifferentialEquations, a design which in turns
leads to rapid development of DelayDiffEq even with-
out developers having to focus on DDEs. This is thus an
example of how composable software designs can change
the eﬃciency of scientiﬁc computing.

Acknowledgements

Large parts of this work were completed for a Master
thesis about delay diﬀerential equation models of quo-
rum sensing at the department of Mathematics at TU
Munich, Germany, under the supervision of Christina
Kuttler. This work was ﬁnancially supported by the Cen-
tre for Interdisciplinary Mathematics (CIM) at Uppsala

7

University, Sweden, and by the Swedish Foundation for
Strategic Research via the project ASSEMBLE (contract
number: RIT15-0012).

This material is based upon work supported by the Na-
tional Science Foundation under grant no. OAC-1835443,
grant no. SII-2029670, grant no. ECCS-2029670, grant
no. OAC-2103804, and grant no. PHY-2021825. We
also gratefully acknowledge the U.S. Agency for Inter-
national Development through Penn State for grant no.
S002283-USAID. The information, data, or work pre-
sented herein was funded in part by the Advanced Re-
search Projects Agency-Energy (ARPA-E), U.S. Depart-
ment of Energy, under Award Number DE-AR0001211
and DE-AR0001222. We also gratefully acknowledge
the U.S. Agency for International Development through
Penn State for grant no. S002283-USAID. The views and
opinions of authors expressed herein do not necessarily
state or reﬂect those of the United States Government or
any agency thereof. This material was supported by The
Research Council of Norway and Equinor ASA through
Research Council project "308817 - Digital wells for opti-
mal production and drainage". Research was sponsored
by the United States Air Force Research Laboratory and
the United States Air Force Artiﬁcial Intelligence Accel-
erator and was accomplished under Cooperative Agree-
ment Number FA8750-19-2-1000. The views and conclu-
sions contained in this document are those of the authors
and should not be interpreted as representing the oﬃcial
policies, either expressed or implied, of the United States
Air Force or the U.S. Government. The U.S. Govern-
ment is authorized to reproduce and distribute reprints
for Government purposes notwithstanding any copyright
notation herein.

References

[1] D. G. Anderson. Iterative procedures for nonlinear
integral equations. Journal of the ACM, 12(4):547–
560, 10 1965.

[2] C. T. H. Baker, C. A. H. Paul, and D. R. Willé. Is-
sues in the numerical solution of evolutionary delay
diﬀerential equations. Advances in Computational
Mathematics, 3(1):171–196, 1995.

[3] A. Bellen and M. Zennaro. Numerical Methods
for Delay Diﬀerential Equations. Oxford University
Press, 3 2003.

[4] J. Bezanson, A. Edelman, S. Karpinski, and V. B.
Shah. Julia: A fresh approach to numerical comput-
ing. SIAM review, 59(1):65–98, 2017.

[5] K. Buddrus-Schiemann, M. Rieger, M. Mühlbauer,
M. V. Barbarossa, C. Kuttler, B. A. Hense, M. Roth-
baller, J. Uhl, J. R. Fonseca, P. Schmitt-Kopplin,

M. Schmid, and A. Hartmann. Analysis of N -
acylhomoserine lactone dynamics in continuous cul-
tures of Pseudomonas putida IsoF by use of ELISA
and UHPLC/qTOF-MS-derived measurements and
mathematical models. Analytical and Bioanalytical
Chemistry, 406(25):6373–6383, Aug. 2014.

[6] K. Burrage. Parallel and sequential methods for or-
dinary diﬀerential equations. Clarendon Press, Ox-
ford, 1995.

[7] G. Dahlquist. Recent work on stiﬀ diﬀerential equa-
tions. Technical report, CM-P00069399, 1975.

[8] L. Glass and M. C. Mackey. Pathological conditions
resulting from instabilities in physiological control
systems. Annals of the New York Academy of Sci-
ences, 316(1):214–235, 1979.

[9] N. Guglielmi and E. Hairer. Implementing Radau
IIA methods for stiﬀ delay diﬀerential equations.
Computing, 67(1):1–12, 07 2001.

[10] G. E. Hutchinson. Circular causal systems in ecology.
Annals of the New York Academy of Sciences, 50(4
Teleological):221–246, 1948.

[11] K. W. Neves and A. Feldstein. Characterization of
jump discontinuities for state dependent delay diﬀer-
ential equations. Journal of Mathematical Analysis
and Applications, 56(3):689–707, 12 1976.

[12] C. Rackauckas and Q. Nie. Adaptive methods for
stochastic diﬀerential equations via natural embed-
dings and rejection sampling with memory. Dis-
crete and continuous dynamical systems. Series B,
22(7):2731, 2017.

[13] C. Rackauckas and Q. Nie. DiﬀerentialEquations.jl
– A performant and feature-rich ecosystem for solv-
ing diﬀerential equations in julia. The Journal of
Open Research Software, 5(1), 2017. Exported from
https://app.dimensions.ai on 2019/05/05.

[14] L. F. Shampine and S. Thompson. Solving DDEs in
Matlab. Applied Numerical Mathematics, 37(4):441–
458, 6 2001.

[15] H. T. Sykora, C. Rackauckas, D. Widmann, and
D. Bachrathy. StochasticDelayDiﬀeq.jl - An integra-
tor interface for stochastic delay diﬀerential equa-
tions in Julia. 2020.

[16] H. F. Walker and P. Ni. Anderson acceleration for
ﬁxed-point iterations. SIAM Journal on Numerical
Analysis, 49(4):1715–1735, 1 2011.

[17] P. Waltman.

A threshold model of antigen-
stimulated antibody production. Theoretical Im-
munology, pages 437–453, 1978.

8

