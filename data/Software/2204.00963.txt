2
2
0
2

r
p
A
3

]
E
S
.
s
c
[

1
v
3
6
9
0
0
.
4
0
2
2
:
v
i
X
r
a

A Study of Single Statement Bugs Involving Dynamic Language
Features

Li Sui, Shawn Rasheed, Amjed Tahir
Massey University
Palmerston North, New Zealand

Jens Dietrich
Victoria University of Wellington
Wellington, New Zealand

ABSTRACT
Dynamic language features are widely available in programming
languages to implement functionality that can adapt to multiple
usage contexts, enabling reuse. Functionality such as data bind-
ing, object-relational mapping and user interface builders can be
heavily dependent on these features. However, their use has risks
and downsides as they affect the soundness of static analyses and
techniques that rely on such analyses (such as bug detection and
automated program repair). They can also make software more
error-prone due to potential difficulties in understanding reflective
code, loss of compile-time safety and incorrect API usage. In this
paper, we set out to quantify some of the effects of using dynamic
language features in Java programs – that is, the error-proneness of
using those features with respect to a particular type of bug known
as single statement bugs. By mining 2,024 GitHub projects, we
found 139 single statement bug instances (falling under 10 different
bug patterns), with the highest number of bugs belonging to three
specific patterns: Wrong Function Name, Same Function More Args
and Change Identifier Used. These results can help practitioners to
quantify the risk of using dynamic techniques over alternatives
(such as code generation). We hope this classification raises atten-
tion on choosing dynamic APIs that are likely to be error-prone,
and provides developers a better understanding when designing
bug detection tools for such feature.

1 INTRODUCTION
Dynamic language features are widely available in modern pro-
gramming languages and commonly used in code. In Java, features
like reflection and dynamic proxies, are used to implement generic
components that can be used in different contexts [3]. Landman et
al. [8] report that 78% of Java projects they studied contain reflective
calls. However, there are challenges in modelling and analysing
programs and finding bugs that involve the use of dynamic lan-
guage features [4, 9]. Recent studies on the analysis of dynamic
features have focused on improving the recall of static analysers,
whilst maintaining their precision [9, 12]. Challenges in analysing
these features may affect software maintenance activities such as
bug detection, automated refactoring and program repair.

The question is what the propensity is for the use of dynamic
features to cause bugs. Dynamic features can be error-prone due
to erroneous interpretation of APIs, difficulty in comprehending
reflective code, loss of compile-time safety and incorrect API usage.
However, to the best of our knowledge, no studies on bugs related
to the use of these features in Java application code have been
conducted. There was a recent study on bugs involving the use
of dynamic features in Python [1].and some studies on reflection
specific bugs in JVM code [10].

In this work, we attempt to answer the question: “how frequently
are dynamic language features the cause of single statement bugs
in Java programs?” Single statement bugs are the class of bugs
which can be fixed with a change to a single statement. This sim-
plicity allows easy identification whether bugs are related to the
use of specific APIs (e.g., reflection). To answer this question, we
extracted bug instances that involve references to dynamic lan-
guage features from Java projects mined from GitHub. We used
the ManySStuBs4J dataset [6], which presents a classification of
common single statement bug instances from 1000 Java projects
on GitHub. We extended the original dataset by mining additional
GitHub projects to identify even more bug instances from the newly
added projects. The name of each classification is self-explanatory
as it explains violations of certain rules that led to the bug, and
in most cases, it also describes the fix of the potential bug. This
includes patterns like Change Identifier Used and Same Function
More Args.

As a result of our study, we found 139 dynamic language features-
related bug instances from the mined projects. The majority of these
bugs belong to three patterns: Wrong Function Name (34%), Same
Function More Args (18%) and Change Identifier Used (15%). These
findings can potentially provide guidance for automated program
repair to detect and automatically patch dynamic language features
related bugs.

2 RELATED WORK
Bugs related to underdetermined specifications in the reflection API
are discussed in Pontes et al. [10]. These are bugs in JDK implemen-
tations, not applications or libraries. It seems unlikely that bugs of
this nature (underdetermined API assumptions) in application code
can be fixed with single statement changes. The study by Chen et
al. [1] is an extensive study of Python bug fixes that have changes
involving dynamic features. Zhang et al. [14] discuss a case where
fixing a bug related to an underdetermined reflection API method
(the order of the elements returned by getDeclaredFields) adds
multiple lines to the code. Bug patterns involving Java streams are
discussed in Khatchadourian et al. [7]. Java exception handling bugs
are explored in Ebert et al. [5].

ManySStuBs4J [6] is a dataset of over 153k single statement bug
fix changes mined from 1,000 popular open-source Java projects.
We used this dataset to locate dynamic language feature bug fixes,
but we extended the original dataset with 1,032 additional GitHub
projects. Another similar dataset is CodeRep [2], which is a single-
line changes dataset mined from different repositories, which has
been used in program repair studies. Bugs2Fix [13] is a data set of
simple bugs used in program repair and bug-related studies. Unlike
these two datasets, ManySStuBs4J focuses on fix templates and
fixes that are at the statement level.

 
 
 
 
 
 
ICPC’2022, May 2022, Pittsburgh,PA, USA

Li Sui, Shawn Rasheed, Amjed Tahir and Jens Dietrich

3 METHODOLOGY

Figure 1: An overview of our mining and data extraction pro-
cess

Figure 1 provides an overview of the data collection process that
we followed in this paper. As a first step, we gathered project URLs
from (1) the ManySStuBs4J [6], (2) additional projects from six or-
ganizations and communities hosted on GitHub (namely Google,
Eclipse, JetBrains, Mozilla, Apache, and Spring.) We identified those
organizations and communities based on the following criteria:
Firstly, they contain projects that are known for heavy use of dy-
namic language features, such as Spring. Secondly, they have a
number of well-known Java projects, indicated by GitHub star
counts. Thirdly, the availability of an issue tracker, either hosted
on GitHub or externally, such as on Bugzilla.

We first removed duplicate projects (i.e., projects that have al-
ready been included in the ManySStuBs4J dataset). We then cloned
all remaining projects locally.1 To extract single statement bugs
from each repository, we used the same script used in the original
ManySStuBs4J study 2.

We developed a script to identify single statement bugs that
are related to dynamic language features. The script searches for
specific keywords at call sites in the parent commit of fix commits
(where the bug occurs). These methods and keywords are based on
a benchmark of dynamic feature usage patterns by Sui et al. [11]
and a list of the Java Reflection APIs from Landman et al. [8]. We
have excluded certain APIs from [8], such as logic operators (i.e.,
==, !=) and call sites that can cause false positives, e.g. toString(),
set and get as those keywords can be too generic. There are a total
of 106 call sites selected for keyword matching. We acknowledge
that this is not an exhaustive list of dynamic language feature
methods and keywords in Java. To the best of our knowledge, there
are no studies that have comprehensively listed all the dynamic
language feature methods and keywords in Java. Acquiring such a
comprehensive list is outside the scope of this study.

The dataset includes bug data from 2,024 Java projects, with a to-
tal of 249,089 bug instances being identified. From those projects, we
mined a total of 104,337 single statement bugs (i.e., bugs that match
the patterns identified in Karampatsis and Sutton [6]) searching for
the use of specific dynamic language features.

We provide the scripts used to extract the data together with our

full results in a replication package3.

1All projects were cloned on 12 Nov 2021, so the mining process is accomplished on
the latest commit available on that date.
2https://git.io/JnS32
3https://https://github.com/li-sui/miningSStuBs

4 RESULTS AND DISCUSSION
By filtering each bug instance using the dynamic features keywords,
we identified 1,916 dynamic feature related bugs. To verify the re-
sults, we developed a script to perform source code analysis on
a limited scope (at class-level) to reduce potential false positives
(e.g., call sites that match any of the keywords, but are not actu-
ally dynamic features4). This analysis reduces the total number to
398 dynamic feature related bugs. At the end, two other authors
conducted a manual validation by inspecting each bug instance to
further check whether those bugs actually represent dynamic lan-
guage feature related bugs (limited scope source code analysis may
also cause false positives), and also to identify possible duplicates
(e.g., same changes/fix but appear in multiple commits). We ended
up with 139 unique single statement bugs in the datasets.

We note that the number of bugs found, 139, is relatively low
compared to the total number of bug instances in the dataset. There
are some possible explanations for the low occurrence of fixes
involving direct changes to the use of dynamic language features.
Firstly, those features are primarily used in code written to be reused
(i.e., in upstream artefacts that are likely to be well-tested) which
might be the case for some projects. Secondly, while the use of these
features is often not safeguarded by the compiler, it is safeguarded
by the usage context or a framework. For instance, consider data
binding, where Java objects are mapped to some structured data
representation (JSON, XML, etc.). When data is read, object state
is initialized by invoking setters. However, these setters are not
controlled by the programmer, but extracted from classes on-the-fly.
Detailed statistics of the distribution of bugs across different
dynamic language features (grouped by categories) is shown in
Table 1. Note that the total number is not 139 as a single bug with
multiple fixes can contain different dynamic call sites.

Table 1: Distribution of single statement bugs across differ-
ent dynamic features categories

Call site
java.lang.Class::get*
java.lang.Class::forName
java.lang.reflect.Method::invoke
java.lang.Class::is*
java.lang.ClassLoader::*
java.io.ObjectInputStream::readObject
java.lang.Class::newInstance
java.util.ServiceLoader::load
java.lang.reflect.Proxy::getInvocationHandler

No. bugs
88
16
13
12
10
3
3
2
1

To determine how the changes (fix commit - the commit that
fixes the bug) on dynamic language features changes relate to the
program behaviours, we specified them into three relationships:
strong, intermediate and weak. (1) A strong relationship implies
the fix also involves using a dynamic language features - it could
be the same call site (change from Method.invoke(this,null) to
Method.invoke(this, "null")) or different one (change from
getClass() to getDeclaredClass()). (2) Intermediate indicates

4An example of keyword match that turns out not to be a dynamic feature is shown
here https://git.io/JnDyz

Mining for dynamic feature related bugsClone RepositoriesObtain project URLsRunning ManySStuBs4J minerA Study of Single Statement Bugs Involving Dynamic Language Features

ICPC’2022, May 2022, Pittsburgh,PA, USA

the changes are not directly on the dynamic language call site, but a
dynamic language features still in used (e.g., type.equals(number.
getClass())) to type.isAssignableFrom(number.getClass())).
(3) A weak relationship indicates that there is a removal of dynamic
language features or the changes has nothing to do with the dy-
namic language call site (e.g. a change on the logical operator5 ). In
summary, we identified 105 strong, 20 intermediate and 14 weak
relationships.

The 139 single statement bugs are distributed across 79 projects.
We also checked whether those bugs were reported in the issue
tracker system of the project so that we could read through the
issue/comments to better understand the cause of the bug. We found
80 of the 139 bugs to have related issues in the issue tracking system.
In most cases, with issues created for those bugs, we observed that
there are more details about the nature of the bug, how it occurred
and how it was fixed. For those 80 bugs, we analysed the discussion
in the issue trackers in order to classify those bugs.

We mapped each bug into the bug patterns that were defined in
[6]. Table 2 shows the distribution of dynamic feature-related single
statement bugs we found across the different bugs patterns. The
results also show that the majority of bugs belong to two patterns:
Wrong Function Name (34%) and Same Function More Args (18%) We
discuss the top five bug patterns we found, with examples for each
of these patterns below.

Table 2: Single statement bug patterns

Pattern name
Wrong Function Name
Same Function More Args
Change Identifier Used
Same Function Wrong Caller
Same Function Less Args
More Specific If
Less Specific If
Change Operand
Change Boolean Literal
Change Numeric Literal

No. of bugs
47
25
21
19
6
7
8
4
1
1

4.1 Wrong Function Name
This bug pattern describes a case where the method caller and the
method call arguments are the same, but the name of the method
that is different. In the context of reflection, this can appear as
a method that has been used in place of another similar method.
We observed 37/47 bug instances in this category, before fix and
after fix share similar method name, and have the same return type.
This could be caused by a confusion over API usage. An example
is shown below, java.lang.Class::getName returns the name
entity, but getSimpleName returns the name with "[]" appended.
Another example of this category of bugs is shown in project
M66B XPrivacy 6.The method getDeclaredField7 returns all de-
clared fields within the class, whereas the method getField re-
turns public member fields of the class. To fix this, the call site was

5https://git.io/J9GL6
6https://github.com/M66B/XPrivacy/pull/2203
7https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html

before fix:
after fix:

con.getClass().getName()
con.getClass().getSimpleName()

bug pattern: Wrong Function Name
fix commit:
commit message:

769753dac429f0448ecb56ee810e4f4a86f9fc9d
ResourceUtils.useCachesIfNecessary() not correct
handle JNLP connections
https://github.com/spring-projects/spring-
framework/issues/14181

issue link

changed from getDeclaredField to getField, without changing
the arguments. The fix implies that the intention of the call was to
access public fields via reflection.

4.2 Same Function More Args
The most common pattern we found is Same Function More Args,
with 25 bug instances found in 14 projects. We show an example of
this bug from the popular JUnit framework.

before fix:
after fix:
bug pattern:
fix commit:
commit message:
issue link

Class.forName(name);
Class.forName(name,false,getClass().getClassLoader())
Same Function More Args
eb307fa6f37ac8ec695b2f556e543969503418f5
Fix for #359
https://git.io/JnS3o

A bug describes an ExceptionInInitializerError that has
been thrown when filtering tests by category, indicating there is an
issue with class initialization. The solution is to add more arguments
to the Class::forName method. The class java.lang.Class pro-
vides two overloaded methods to load a class: one providing the fully
qualified name for a class (i.e., Class.name("name")) and another
that provides a detailed class loading scenario (i.e., Class.name(
"name", false, getClassLoader())) by specifying on which
class loader that the class will be loaded, and whether this class
should be initialized or not. In this case, a full initialization of a class
is not required, therefore the second argument should be flagged
as false.

4.3 Change Identifier Used
This pattern describes a bug where the fix involves replacing an
identifier with another one. In total, we found 21 instances of this
bug. An example of this bug from Apache Tomcat is shown below:

before fix:
after fix:
bug pattern:
fix commit:
commit message:

issue link

getNext().invoke(this,method,args);
getNext().invoke(proxy,method,args);
Change Identifier Used
7446259923e31c0b79271c589873df551ba4a73c
Fix BZ52015.JdbcInterceptor passes not ’this’ but
’proxy’ to getNext().invoke.
https://bz.apache.org/bugzilla/show_bug.cgi?
format=multiple&id=52015

A bug was reported for class org.apache.tomcat.jdbc.pool.
JdbcInterceptor. This abstract class is responsible for implement-
ing JDBC interceptor. The bug is the result of not using the correct
identifier in the method call. To fix this, the identifier argument
(the target instance that the method is invoked upon) was changed
from this (the current object) to proxy (a proxy object).

4.4 Same Function Wrong Caller
In this bug, the function that is executed is the same, but it is being
called by a different caller. The fix is simple, and it involves changing

ICPC’2022, May 2022, Pittsburgh,PA, USA

Li Sui, Shawn Rasheed, Amjed Tahir and Jens Dietrich

the caller class in the call. An example of this bug from Apache
Tomcat is shown below.

before fix:
after fix:
bug pattern:
fix commit:
commit message:

issue link

Class.forName(this.owner);
ReflectionUtil.forName(this.owner);
Same Function Wrong Caller
4461a96d8bb2c2f6132e5f370cf0d47ad18c7adb
bug 41797: CNFE/NPE thrown from function map-
per when externalizing..
none

The bug reported the use of a generic caller to a specific caller.
The caller java.lang.Class has been replaced by its own imple-
mentation: org.apache.el.util.ReflectionUtil. Another bug8
found in DBeaver indicates a change of caller from TIMESTAMP
_READ_METHOD to TIMESTAMPTZ_READ_METHOD. The method name
and the rest of the arguments remain unchanged.

4.5 Same Function Less Args
Unlike Same Function More Args, this pattern requires fewer ar-
guments to be included. We found a total of 6 bug instances that
followed this pattern. We show an example of this category for a
bug that was reported in the Calligraphy project 9. The bug shown
below is the opposite to the previous example, where a class should
be fully initialized when calling Class::forName.

before fix:

after fix:

bug pattern:
fix commit:
commit message:
issue link

Class.forName(
"android.support.v7.widget.Toolbar", false, null);
Class.forName(
"android.support.v7.widget.Toolbar");
Same Function Less Args
435319f273391c4f886f6908c2a7fc7c3dda9e13
fixed check, actually need to instantiate it if it exists.
https://git.io/JnS36

4.6 Further investigation of common causes of

these bugs

We further investigated common usage patterns found in the de-
tected bugs and reported the potential causes below. We present
the reasons/causes for the top three patterns (i.e., Class::forName,
Method::invoke, Class::getDeclared|Class|Field|Method|
Constructor|Name). For each bug instance, we manually inspect
the source code and the issue tracker to find out the cause and
reason for the bug. This was done by one of the authors, and all
instances were cross-validated by another co-author. Table 1 shows
an overview of a number of bugs for each call site and dynamic
feature category. As explained in Section 3, these categories were
adopted from Landman et al. [8] and Sui et al. [11]. The raw results
are available in our replication package10.

(1) Class::forName

• Passing an incorrect class name.
• Need to delay initialization of static blocks when initial-
ization is not appropriate in the loading context but at the
time of class use.

• Incorrect class loader specified.

8https://git.io/JnS35
9https://git.io/JnS3H
10https://github.com/li-sui/miningSStuBs

• Using the wrong caller. Section 4.4 describes an example

where a reflection wrapper is used.

(2) Method::invoke

• Using the wrong caller.
• Method invoked on wrong target object.

(3) Class::getDeclared|Class|Field|Method|Constructor

|Name
• Trying to access a method/field that is inherited from

superclasses.

• Trying to access a method/field that is declared as a public

or private member.
• Using the wrong caller.
• Passing the incorrect arguments when accessing methods

and constructors.

• Using the wrong method. e.g. Class::getName vs Class::

getSimpleName

5 CONCLUSION AND FUTURE WORK
In this paper, we studied single statement bugs that are associated
with the use of dynamic language features. We analysed data from
2,024 Java projects. From a total of 104,337 single statement bug
instances, we identified only 139 unique bugs that relate to the
use of dynamic language features. We attributed the relatively low
number of bugs to how these features are used in practice (e.g., they
are primarily used in code written to be reused). Still, analysing
these bugs provide an insight into this class of bugs in real-world
programs. With the identification of these bugs, we hope (1) this
work helps practitioners to quantify the risk of using dynamic
techniques over alternatives. (2) The work informs the developers
of program analyses where to focus their efforts in order to produce
tools with better recall. (3) The work informs the developers and
maintainers of reflective APIs about which APIs are particularly
error-prone and may need refactoring or additional documentation.
One of the limitations of this work is that we consider only a
subset of dynamic language features, as we did not use a compre-
hensive list of all dynamic feature methods and keywords. To the
best of our knowledge, such a list is not currently available. Expand-
ing the list of methods and keywords would involve challenges in
mining (e.g., *.get can yield false positives with the string match-
ing approach, and we will need to statically analyse the code for
precision). We expect the manual effort required for these tasks to
be beyond the scope for this preliminary study and hence, it has
been left for future work.

There are a number of open issues that will need to be investi-
gated in the future, such as root cause analysis for these bugs and
improving the precision/recall of mining.

REFERENCES
[1] Zhifei Chen, Wanwangying Ma, Wei Lin, Lin Chen, Yanhui Li, and Baowen Xu.
2018. A study on the changes of dynamic feature code when fixing bugs: towards
the benefits and costs of Python dynamic features. Science China Information
Sciences 61, 1 (2018), 1–18.

[2] Zimin Chen and Martin Monperrus. 2018. The codrep machine learning on

source code competition. arXiv preprint arXiv:1807.03200 (2018).

[3] JB Dietrich, Henrik Schole, Li Sui, and Ewan Tempero. 2017. XCorpus–an exe-

cutable corpus of Java programs. (2017).

[4] Jens Dietrich, Li Sui, Shawn Rasheed, and Amjed Tahir. 2017. On the construc-
tion of soundness oracles. In Proceedings of the 6th ACM SIGPLAN International
Workshop on State Of the Art in Program Analysis. 37–42.

A Study of Single Statement Bugs Involving Dynamic Language Features

ICPC’2022, May 2022, Pittsburgh,PA, USA

[5] Felipe Ebert, Fernando Castor, and Alexander Serebrenik. 2015. An exploratory
study on exception handling bugs in Java programs. Journal of Systems and
Software 106 (2015), 82–101.

[6] Rafael-Michael Karampatsis and Charles Sutton. 2020. How often do single-
statement bugs occur? The ManySStuBs4J dataset. In Proceedings of the 17th
International Conference on Mining Software Repositories. 573–577.

[7] Raffi Khatchadourian, Yiming Tang, Mehdi Bagherzadeh, and Baishakhi Ray.
2020. An Empirical Study on the Use and Misuse of Java 8 Streams.. In FASE.
97–118.

[8] Davy Landman, Alexander Serebrenik, and Jurgen J Vinju. 2017. Challenges for
static analysis of Java reflection-literature review and empirical study. In 2017
IEEE/ACM 39th International Conference on Software Engineering (ICSE). IEEE,
507–518.

[9] Benjamin Livshits, Manu Sridharan, Yannis Smaragdakis, Ondřej Lhoták, J Nelson
Amaral, Bor-Yuh Evan Chang, Samuel Z Guyer, Uday P Khedker, Anders Møller,
and Dimitrios Vardoulakis. 2015. In defense of soundiness: A manifesto. Commun.
ACM 58, 2 (2015), 44–46.

[10] Felipe Pontes, Rohit Gheyi, Sabrina Souto, Alessandro Garcia, and Márcio Ribeiro.
2019. Java Reflection API: Revealing the Dark Side of the Mirror. In Proceedings
of the 2019 27th ACM Joint Meeting on European Software Engineering Conference

and Symposium on the Foundations of Software Engineering (Tallinn, Estonia)
(ESEC/FSE 2019). Association for Computing Machinery, New York, NY, USA,
636–646. https://doi.org/10.1145/3338906.3338946

[11] Li Sui, Jens Dietrich, Michael Emery, Shawn Rasheed, and Amjed Tahir. 2018. On
the soundness of call graph construction in the presence of dynamic language
features-a benchmark and tool evaluation. In Asian Symposium on Programming
Languages and Systems. Springer, 69–88.

[12] Li Sui, Jens Dietrich, Amjed Tahir, and George Fourtounis. 2020. On the recall of
static call graph construction in practice. In 2020 IEEE/ACM 42nd International
Conference on Software Engineering (ICSE). IEEE, 1049–1060.

[13] Michele Tufano, Cody Watson, Gabriele Bavota, Massimiliano Di Penta, Martin
White, and Denys Poshyvanyk. 2019. An Empirical Study on Learning Bug-Fixing
Patches in the Wild via Neural Machine Translation. ACM Trans. Softw. Eng.
Methodol. 28, 4, Article 19 (Sept. 2019), 29 pages. https://doi.org/10.1145/3340544
[14] Peilun Zhang, Yanjie Jiang, Anjiang Wei, Victoria Stodden, Darko Marinov, and
August Shi. 2021. Domain-Specific Fixes for Flaky Tests with Wrong Assumptions
on Underdetermined Specifications. In 2021 IEEE/ACM 43rd International Confer-
ence on Software Engineering (ICSE). 50–61. https://doi.org/10.1109/ICSE43902.
2021.00018

