2
2
0
2

p
e
S
4
1

]

A
N
.
h
t
a
m

[

1
v
2
9
8
6
0
.
9
0
2
2
:
v
i
X
r
a

Interpolation-based immersed ﬁnite element and isogeometric
analysis

Jennifer E. Fromma, Nils Wunschb, Ru Xianga, Han Zhaoa, Kurt Mauteb, John A. Evansb,
David Kamenskya,∗

aUniversity of California San Diego, San Diego, CA 92093, USA
bUniversity of Colorado Boulder, Boulder, CO 80309, USA

Abstract

We introduce a new paradigm for immersed ﬁnite element and isogeometric methods based on
interpolating function spaces from an unﬁtted background mesh into Lagrange ﬁnite element
spaces deﬁned on a foreground mesh that captures the domain geometry but is otherwise
subject to minimal constraints on element quality or connectivity. This is a generalization of
the concept of Lagrange extraction from the isogeometric analysis literature and also related
to certain variants of the ﬁnite cell and material point methods. Crucially, the interpolation
may be approximate without sacriﬁcing high-order convergence rates, which distinguishes the
present method from existing ﬁnite cell, CutFEM, and immersogeometric approaches. The
interpolation paradigm also permits non-invasive reuse of existing ﬁnite element software for
immersed analysis. We analyze the properties of the interpolation-based immersed paradigm
for a model problem and implement it on top of the open-source FEniCS ﬁnite element
software, to apply it to a variety of problems in ﬂuid, solid, and structural mechanics where
we demonstrate high-order accuracy and applicability to practical geometries like trimmed
spline patches.

Keywords:
isogeometric analysis, CutIGA, Lagrange extraction

immersed ﬁnite element method, immersogeometric analysis, trimmed

1. Introduction

The ﬁnite element (FE) method [1] is a widely-used approach for approximating solu-
tions to partial diﬀerential equations (PDEs).
In summary, it approximates solutions to
variational formulations of PDEs in function spaces deﬁned piece-wise over a collection of
disjoint elements, called a mesh, whose closures cover (an approximation of) the PDE do-
main. Typically, each element is diﬀeomorphic to one of a few standard reference elements,
like a unit right triangle in 2D or a tetrahedron in 3D, and the boundary of the (approximate)
PDE domain coincides with a collection of element boundary parts, e.g., edges of elements
in 2D and faces of elements in 3D. An example of such a “boundary-ﬁtted” mesh is shown
in Figure 1 (a). However, the approximation power and regularity of FE function spaces

∗Corresponding author
Email address: dmkamensky@eng.ucsd.edu (David Kamensky)

Preprint submitted to Elsevier

September 16, 2022

 
 
 
 
 
 
depend on the sizes, shapes, and connectivity of the elements, placing nontrivial geometric
and topological constraints on the mesh generation process. These constraints are often quite
challenging to satisfy, especially for the complicated PDE domains endemic to engineering
analysis. Thus, mesh generation remains a pervasive bottleneck in practical FE analysis [2].
These meshing constraints become much easier to satisfy if one removes the requirement
that the PDE boundary be a collection of element boundary parts, instead allowing it to
cut arbitrarily through element interiors. We refer to such meshes as “unﬁtted”, and call
numerical methods using unﬁtted meshes “immersed boundary methods” — or simply “im-
mersed methods” — in an extrapolation of terminology originally applied to early work by
Peskin [3]. For instance, it is easy to construct highly-regular function spaces with excellent
approximation properties on structured tensor-product grids of elements, and it would be
convenient to simply immerse an arbitrary complex PDE domain geometry into such a grid
without needing its boundary to coincide with element boundary parts.

The earliest immersed methods amounted, essentially, to worsening the geometric ap-
proximation of the PDE domain, leading to low-order accuracy and the (still widespread)
belief that immersed methods necessarily represent a trade-oﬀ between order of accuracy
and ease of meshing. However, over the past few decades, higher-order immersed methods
have emerged based on the insight that one only needs an accurate representation of the
domain geometry for numerical quadrature of variational forms from the FE method and
not necessarily for constructing the approximate function spaces. These quadrature-based
immersed methods serve as our point of departure in the present work.

Quadrature-based immersed methods typically integrate weak forms by constructing a
ﬁtted mesh of the PDE domain and applying Gaussian quadrature within each element. For
instance, in Figure 1 (b), the ﬁtted mesh of blue triangles would be used for quadrature,
while the unﬁtted black structured mesh would be used for deﬁning function spaces. How-
ever, quadrature imposes far fewer geometric and topological constraints than construction
of function spaces. Further, even brute-force high-resolution/low-order quadrature meshes
(such as those in early iterations of the ﬁnite cell method [4]) will not add degrees of free-
dom to the discrete function space and may remain eﬃcient in applications whose cost is
dominated by algebraic solution of the discretized PDE. Thus, an easy-to-generate, “fore-
ground” mesh for quadrature can be superposed on an unﬁtted “background” mesh for
deﬁning function spaces to obtain high-order-accurate immersed methods. Some examples
of accurate quadrature-based immersed methods from the literature include the ﬁnite cell
approach mentioned earlier [5] and various cut ﬁnite element (CutFEM) schemes [6]. One
can also view the original material point method (MPM) [7] as a quadrature-based immersed
method using a low-order quadrature rule for the mass measure of a solid body.

A historically-separate line of research aimed at circumventing the FE meshing problem
is isogeometric analysis (IGA) [8, 9] where function spaces of smooth splines from computer-
aided design (CAD) are directly used to approximate PDE solutions. However, these spline
spaces often have more topological constraints on their construction than classical FE spaces,
and industrial CAD models often represent complex geometries by “trimming” [10] unﬁtted
rectangular meshes called patches to obtain the desired shapes. Thus, IGA is hardly an al-
ternative to immersed methods; on the contrary, it has only intensiﬁed interest in them! The
symbiotic union of isogeometric and immersed methods is referred to as “immersogeometric
analysis” (IMGA) [11] and the case of deﬁning smooth spline spaces on a background mesh

2

is sometimes also called CutIGA [12] by analogy to CutFEM.

An optimistic reading of the published results on immersed ﬁnite element and isogeomet-
ric methods might lead one to conclude that the FE mesh-generation problem is nearly solved.
However, the majority of work on immersed methods has relied on specialized research codes
whose code architectures diﬀer greatly from existing ﬁnite element or isogeometric solvers.
Thus, adoption of immersed methods in practice has been very limited. A notable attempt
at general-purpose implementation of quadrature-based immersed methods in an existing
FE code was the MultiMesh [13] functionality developed within the FEniCS [14] software
framework. However, the invasive nature of the implementation made it diﬃcult to complete
and maintain, and MultiMesh functionality was not retained in the FEniCSx redesign of the
software.

A similar barrier to entry once existed for IGA, but a major advance in the design of IGA
software was the concept of B´ezier extraction [15, 16] where smooth spline basis functions
are represented as linear combinations of less-regular Bernstein basis functions. This was
later reformulated as interpolation of IGA basis functions using Lagrange FE bases, referred
to as “Lagrange extraction” [17] and allowing for direct reuse of FE software implementing
Lagrange bases for IGA (e.g., [18, 19]). The central idea of the present work is to build
on the concept of Lagrange extraction by interpolating basis functions deﬁned
on an unﬁtted background mesh into a Lagrange FE space deﬁned on a ﬁtted
foreground mesh where quadrature is performed.
In this setting, the background
basis does not need to be a smooth spline space; it could also be a classical FE space deﬁned
on an unstructured mesh. This not only permits reuse of existing FE software, but also
suggests some eﬃcient approximations, leading to a novel class of immersed methods.

An earlier related idea is the projection-based adaptive Gaussian quadrature (PAGQ)
implementation of the ﬁnite cell method [20] where shape functions are deﬁned on quadra-
ture sub-cells. However, we now push the concept further by considering the possibility of
approximate Lagrange extraction. While extraction-based IGA and PAGQ exactly reproduce
basis functions through interpolation, we explore the possibility of allowing this interpolation
to be approximate. In situations like Figure 1 (b), where the foreground mesh is ﬁtted to
the intersection of each background element with the domain, it may be possible to capture
all monomials of the background basis functions exactly using a suﬃciently high-order fore-
ground Lagrange space. However, one may wish to reduce the order of the foreground space
to reduce the cost of assembling algebraic equations. Such an approximation is especially
useful if the foreground elements are non-aﬃne mappings of reference elements to capture
the domain geometry with higher-order accuracy. Further, one may consider more radical
approximations, like Figure 1 (c), where the foreground mesh is unrelated to the background
mesh beyond having a proportional quasi-uniform element size. Notably, Gaussian quadra-
ture on such a mesh would not be accurate for the background basis functions (which are
non-smooth within foreground elements), but it is accurate for their interpolations into a
foreground Lagrange function space. Such an interpolation-based immersed method can be
viewed as a generalization of the convected particle domain integration (CPDI) variant of the
MPM [21] proposed earlier for simulating large-strain solid mechanics, where our foreground
elements are analogous to CPDI “particles” that carry their own shape functions.

The remainder of this article is structured as follows. Section 2 provides a concise list
of notation and terminology for reference while reading subsequent sections (and may be

3

(a)

(b)

(c)

Figure 1: (a) Domain discretized using a body-ﬁtted mesh; (b) Domain discretized using a
tensor-product background mesh with a background-ﬁtted foreground mesh; (c) Domain dis-
cretized using a tensor-grid background mesh with a background-unﬁtted foreground mesh.

skipped on an initial reading). Section 3 introduces the concept of interpolation-based
immersed methods using a scalar elliptic model PDE along with a sketch of how a basic
error analysis of the method might proceed. Section 4 then describes how to implement
interpolation-based immersed analysis for arbitrary PDE systems in a way that eﬃciently
reuses existing FE software. We then explore the accuracy of the method for a variety of
PDEs through numerical experiments in Section 5 and apply it to analysis of shell structures
modeled geometrically by trimmed spline surfaces in Section 6. Section 7 draws conclusions
and outlines future work.

2. Notation and Terminology

The use of multiple meshes with diﬀerent function spaces can lead to ambiguity in terms
like “element size” and “basis function”, so we must be careful to distinguish between back-
ground, foreground, and interpolated entities through precise terminology and notation. We
shall deﬁne notations more comprehensively as they arise in context later, but we also sum-
marize them here for convenient reference:

• h : background mesh element size

• η : foreground mesh element size

• Ni : background basis functions

• (cid:98)Ni : interpolated background basis functions

• φi : foreground basis functions

• k : polynomial degree of the background FE space

• κ : polynomial degree of the foreground FE space

• (cid:98)k : limiting degree min{k, κ} of the interpolated background FE space

• P : interpolation into the foreground FE space

4

• Q : interpolation into the background FE space

• (cid:98)Q : interpolation P ◦ Q into the interpolated background FE space

We also deﬁne terms to distinguish the mesh immersions shown in Figures 1 (b) and 1 (c):

• Background-ﬁtted foreground mesh: A foreground mesh which is ﬁtted not just
to the domain geometry’s boundary but also to interior facets of the background mesh
in the sense that the closure of the intersection of a background element with the PDE
domain is the closure of a union of foreground elements, as shown in Figure 1 (b).

• Background-unﬁtted foreground mesh: A foreground mesh such as the one shown
in Figure 1 (c) whose elements are ﬁtted to the domain geometry but not to interior
facets of the background mesh.

We may sometimes use the terms “ﬁtted” and “unﬁtted” without specifying the preﬁx
“boundary-” or “background-”, but only when the omitted preﬁx should be clear from con-
text.

3. Immersed ﬁnite element analysis for a scalar elliptic model problem

This section deﬁnes our proposed interpolation-based immersed method for a model scalar
elliptic problem. However, we will apply it to several more complicated problems in subse-
quent sections. We deﬁne our model PDE in Section 3.1, then deﬁne a variational formulation
suitable for immersed methods in Section 3.2. Section 3.3 reviews the formulation and chal-
lenges of quadrature-based immersed methods, and Section 3.4 deﬁnes the construction of a
function space used for interpolation-based immersed analysis. In Section 3.5 we outline an
a priori error estimate for the case of a background-ﬁtted foreground mesh.

3.1. The model problem

We choose as our model PDE the Poisson equation with Dirichlet boundary conditions.
Let Ω ⊂ Rd be a spatial domain of interest. For simplicity of exposition, we assume that
Ω is polyhedral and can be decomposed into aﬃne simplicial elements exactly. The strong
form of the problem is as follows: Find u : Ω → R such that

−∆u = f
u = g

in Ω ,
on ∂Ω .

(1)

The weak form we use as a starting point for formulating numerical methods is: Find u ∈ Vg
such that

where

(cid:90)

Ω

∇u · ∇vdΩ =

(cid:90)

Ω

f vdΩ ∀v ∈ V0 ,

Vg := (cid:8)v ∈ H 1(Ω) : v|∂Ω = g(cid:9) ,
V0 := (cid:8)v ∈ H 1(Ω) : v|∂Ω = 0(cid:9) ,

(2)

(3)

(4)

in which restriction is understood in the sense of trace.

5

3.2. Discretization of the model problem

The most common discretization of the weak problem (2) is a conforming one employing
ﬁnite dimensional subsets of Vg and V0. However, the construction of these subsets typically
relies on a boundary-ﬁtted mesh to conform to the boundary conditions. Many immersed
methods therefore use nonconforming discretizations which enforce the Dirichlet boundary
condition in a weak sense. In particular, we employ Nitsche’s method [22] for weak enforce-
ment of Dirichlet boundary conditions, leading to the discrete problem: Find uh ∈ V h such
that, ∀vh ∈ V h,

(cid:90)

Ω

∇uh · ∇vhdΩ −

(cid:90)

∂Ω

(cid:0)∇uh · n(cid:1) vhdΓ ∓

(cid:90)

(cid:0)∇vh · n(cid:1) uhdΓ +

(cid:90)

=

Ω

f vhdΩ ∓

∂Ω
(cid:90)

∂Ω

(cid:0)∇vh · n(cid:1) gdΓ +

(cid:90)

∂Ω

(cid:90)

∂Ω

Cpen
h
Cpen
h

uhvhdΓ

gvhdΓ ,

(5)

where the discrete space V h is a ﬁnite-dimensional subspace of H 1(Ω) with no extra re-
strictions on ∂Ω, h is a length scale indicating the reﬁnement level of the discretizations
(e.g., the element diameter in a standard boundary-ﬁtted discretization), and Cpen ≥ 0 is a
dimensionless constant. The “∓” in (5) must be selected consistently on both sides of the
equation, and toggles between the symmetric (“−”) and non-symmetric (“+”) variants of
the Nitsche method. The original symmetric variant proposed by [22] remains well-posed
for Cpen suﬃciently large, with the lower bound emanating from trace-inverse estimates (but
often chosen on an ad hoc basis in practice). The non-symmetric variant is well-posed for
Cpen arbitrarily small (or zero), which has led some authors to advocate its use in immersed
discretizations [23] to sidestep technical concerns over the appropriate values for Cpen and h.
The non-symmetric variant retains optimal accuracy in the H 1 norm, which is often more
relevant to applications like stress analysis. However, the symmetric variant is optimal in
both H 1 and L2 norms, and is currently more widely used in practice.

3.3. Quadrature-based immersed discretization

In quadrature-based immersed methods, such as those reviewed in Section 1, the discrete
space V h is deﬁned by simply restricting functions in an FE (or isogeometric) space deﬁned
on a background mesh to the PDE domain Ω:

V h = span {Ni|Ω}n

i=1 ,

(6)

where {Ni}n
i=1 are the basis functions of the background-mesh FE space whose supports
intersect Ω. The principal challenge in implementing such a method is to accurately compute
integrals of the forms

(cid:90)

Ω

(· · · ) dΩ =

nel(cid:88)

(cid:90)

E=1

ΩE ∩Ω

(· · · ) dΩ and

(cid:90)

∂Ω

(· · · ) dΓ =

nel(cid:88)

(cid:90)

E=1

∂Ω∩ΩE

(· · · ) dΓ ,

(7)

where ΩE is the Eth element of the background mesh and nel is the total number of back-
ground mesh elements. One can use standard Gaussian quadrature on ΩE when ΩE ⊂ Ω
or on boundary parts of ΩE when the background mesh is ﬁtted to ∂Ω. Various schemes
have been proposed for integrating nontrivial intersections, but we focus in this paper on

6

those which decompose ΩE ∩ Ω into a collection of quadrature elements, as shown in Figure
1 (b), and we refer to the mesh formed by these quadrature elements as a background-ﬁtted
foreground mesh. With such a mesh, one can then decompose integrals like

(cid:90)

Ω

(· · · ) dΩ =

νel(cid:88)

(cid:90)

e=1

ωe

(· · · ) dΩ and

(cid:90)

∂Ω

(· · · ) dΓ =

νel(cid:88)

(cid:90)

e=1

∂Ω∩∂ωe

(· · · ) dΓ ,

(8)

where {ωe}νel
rules can be accurately used on each one of its boundary parts.

e=1 are the elements of the foreground mesh and standard Gaussian quadrature

While mathematically-appealing, this presents a major challenge from a software devel-
opment standpoint as now the mesh over which quadrature rules are deﬁned is a separate
data structure from the mesh on which the basis functions are constructed. Implementation
of such methods therefore requires either custom software to be written from scratch or
complicated invasive modiﬁcations to be made in mature FE or IGA software designed for
standard boundary-ﬁtted analysis. The primary motivation of the present work is to circum-
vent these diﬃculties while retaining the high-order accuracy of quadrature-based immersed
methods.

3.4. Interpolation-based immersed discretization

The main idea of the present work is to use a discrete space that consists of interpolations
of background-mesh basis functions on a Lagrange FE space deﬁned over the foreground
mesh:

V h = span

(cid:110)

(cid:111)n

(cid:98)Ni

,

i=1

where

(cid:98)Ni = PNi :=

ν
(cid:88)

j=1

Ni(xj)φj ,

(9)

(10)

in which P is the operator that interpolates a function into the Lagrange FE space with
basis {φj}ν
j=1 and xj is the nodal point associated with foreground Lagrange basis function
φj, i.e.,

φi(xj) = δij .

(11)

The space V h is a subset of the Lagrange FE space deﬁned on the foreground mesh, so its
functions can be accurately integrated using Gaussian quadrature rules on each foreground
element. However, unlike in quadrature-based immersed methods, this remains true even
with a background-unﬁtted foreground mesh, like the one shown in Figure 1 (c), where, for
an arbitrary background element ΩE, ΩE ∩ Ω is not necessarily equal to the closure of a
union of foreground elements.

For either background-ﬁtted or background-unﬁtted foreground meshes, the basis { (cid:98)Ni}n

i=1

exhibits the following properties:

i=1 forms a partition of unity, then { (cid:98)Ni}n

1. If {Ni}n
2. If the background function space spans polynomials of degree k and the foreground
i=1 spans polynomials of degree

function space spans polynomials of degree κ, then { (cid:98)Ni}n
(cid:98)k := min{k, κ}.

i=1 does as well.

7

i=1 and {φi}ν

3. If both {Ni}n
4. The continuity of { (cid:98)Ni}n
the continuity of {Ni}n

i=1 is at least that of {φi}ν
i=1.

i=1 have local support, then { (cid:98)Ni}n

i=1 also has local support.

i=1. Note that this may be lower than

i=1 is equivalent to the original background basis {Ni}n

Moreover, for the speciﬁc case of a background-ﬁtted foreground mesh, the interpolated
background basis { (cid:98)Ni}n
i=1 for a suﬃ-
ciently high foreground polynomial degree κ. If the background function space consists of
piecewise polynomials of degree k deﬁned over a simplicial background mesh, the original
background basis is recovered with a Lagrange interpolation of degree κ ≥ k onto a simplicial
background-ﬁtted foreground mesh. If the background function space consists of piecewise
tensor-product polynomials of degree k deﬁned over a tensor-product background mesh, the
original background basis is recovered with a Lagrange interpolation of degree κ ≥ kd onto
a simplicial background-ﬁtted foreground mesh.

To better convey the concept of interpolated background basis function, several inter-
polations of an example background basis function are displayed in Figure 2. Figure 2 (a)
shows the geometric domain and background mesh in red and black respectively, while Fig-
ure 2 (b) shows the example background basis function. The background basis function is
a bi-quadratic (k = 2) B-spline basis function of maximal C k−1 continuity deﬁned over the
background mesh. Figure 2 (c) and Figure 2 (d) show representative background-ﬁtted and
background-unﬁtted foreground meshes. Figure 2 (e) and Figure 2 (f) show linear (κ = 1)
Lagrange interpolations of the example background basis function onto the background-ﬁtted
and background-unﬁtted foreground meshes. These two interpolated background basis func-
tions share the same shape as the background basis function, but they are both inaccurate
approximations of the background basis function. Alternatively, Figure 2 (g) and Figure 2
(h) show quadratic (κ = 2) Lagrange interpolations of the background basis function onto
the background-ﬁtted and background-unﬁtted foreground meshes. These two interpolated
background basis functions are much more accurate approximations of the background ba-
sis function than the interpolated background basis functions displayed in Figure 2 (e) and
Figure 2 (f).

3.5. Best approximation estimates for the background-ﬁtted case

Having presented our new paradigm for immersed ﬁnite element and isogeometric anal-

ysis, we now derive estimates for the H 1-norm best approximation error

inf
vh∈span{ (cid:98)Ni}n

i=1

(cid:13)u − vh(cid:13)
(cid:13)

(cid:13)H 1(Ω)

(12)

associated with the interpolated background FE space where u is the exact solution of
our model problem. Best approximation estimates of the form given by (12) can be com-
bined with coercivity and continuity results to arrive at a priori error estimates for a given
immersed ﬁnite element method (as done, e.g., for quadrature-based CutFEM with ghost
penalty stabilization in [6]). In our mathematical analysis, we must make two assumptions
regarding the foreground mesh:

Assumption 1: The foreground mesh is background-ﬁtted.

8

(a)

(b)

(c)

(e)

(g)

(d)

(f)

(h)

Figure 2: (a) Geometric domain (red) and background mesh (black). (b) Background basis
function. (c) Background-ﬁtted foreground mesh. (d) Background-unﬁtted foreground mesh.
(e) Linear Lagrange interpolation of background basis function on background-ﬁtted mesh. (f)
Linear Lagrange interpolation of background basis function on background-unﬁtted mesh. (g)
Quadratic Lagrange interpolation of background basis function on background-ﬁtted mesh. (h)
Quadratic Lagrange interpolation of background basis function on background-unﬁtted mesh.

9

Assumption 2: The foreground mesh is free of hanging nodes.

Assumption 1 ensures that the background basis functions are smooth within every element
of the foreground mesh, while Assumption 2 ensures that the interpolated background FE
space is H 1-conforming and thus the H 1-norm best approximation error is well-deﬁned.
Note that an immediate consequence of Assumption 1 is that the foreground mesh size η is
less than or equal to the background mesh size h. We must make two further assumptions
regarding the exact solution u and the background FE space:

Assumption 3: The exact solution u lies in the space H (cid:98)k+1(Ω).

Assumption 4: There exists an interpolation operator Q : H 1(Ω) → span {Ni}n
background FE space such that

i=1 onto the

(cid:107)v − Qv(cid:107)H 1(Ω) ≤ C1h(cid:98)k (cid:107)v(cid:107)H (cid:98)k+1(Ω)

and

νel(cid:88)

e=1

(cid:107)Qv(cid:107)2

H (cid:98)k+1(ωe) ≤ C2 (cid:107)v(cid:107)2

H (cid:98)k+1(Ω)

(13)

(14)

for all v ∈ H (cid:98)k+1(Ω) where C1 > 0 and C2 > 0 depend on the background FE space
polynomial degree k and the shape regularity of the background mesh but not the background
mesh element size h.

Assumption 3 holds provided the problem geometry and parameters are suﬃciently smooth,
while Assumption 4 holds when the background FE space consists of classical ﬁnite element
functions or smooth spline functions provided there exists a continuous extension operator
E : H k+1(Ω) → H k+1(Rd) (cf. [6, (9)]).

Now let us deﬁne (cid:101)Q = P ◦ Q. Then we can bound the H 1-norm best approximation error
associated with the interpolated background FE space by the H 1-norm error associated with
the interpolation operator (cid:101)Q:

inf
vh∈span{ (cid:98)Ni}n

i=1

(cid:13)u − vh(cid:13)
(cid:13)

(cid:13)H 1(Ω) ≤

(cid:13)
(cid:13)
(cid:13)
(cid:13)
(cid:13)u − (cid:101)Qu
(cid:13)H 1(Ω)

.

(15)

By the triangle inequality,

(cid:13)
(cid:13)
(cid:13)u − (cid:101)Qu

(cid:13)
(cid:13)
(cid:13)H 1(Ω)

≤ (cid:107)u − Qu(cid:107)H 1(Ω) + (cid:107)Qu − PQu(cid:107)H 1(Ω) .

(16)

Invoking Assumption 3, we can immediately bound the ﬁrst term on the right hand side of
the above equation:

To bound the second term, we ﬁrst recognize that

(cid:107)u − Qu(cid:107)H 1(Ω) ≤ C1h(cid:98)k (cid:107)u(cid:107)H (cid:98)k+1(Ω) .

(cid:107)Qu − PQu(cid:107)2

H 1(Ω) =

(cid:107)Qu − PQu(cid:107)2

H 1(ωe).

νel(cid:88)

e=1

10

(17)

(18)

By Assumption 1, we have that Qu|ωe is smooth for every foreground mesh element ωe. Thus
we have that

(cid:107)Qu − PQu(cid:107)2

H 1(ωe) = C3η2(cid:98)k(cid:107)Qu(cid:107)2

H (cid:98)k+1(ωe)

(19)

for every foreground element ωe where C3 is a constant that depends on the foreground FE
space polynomial degree κ and the shape regularity of the foreground mesh but not the
foreground mesh element size η. We can immediately combine (18), (19), Assumption 1,
and Assumption 4 to arrive at

(cid:107)Qu − PQu(cid:107)H 1(Ω) =

(cid:112)

C2C3h(cid:98)k(cid:107)u(cid:107)H (cid:98)k+1(Ω).

(20)

Combining (15), (16), (17), and (18), we ﬁnally arrive at the following estimate for the
H 1-norm best approximation error associated with the interpolated background FE space:

(cid:13)u − vh(cid:13)
(cid:13)

(cid:13)H 1(Ω) ≤ Cinterph(cid:98)k(cid:107)u(cid:107)H (cid:98)k+1(Ω)

(21)

inf
vh∈span{ (cid:98)Ni}n
√

i=1

where Cinterp = C1+
C2C3. It is immediately evident that the above estimate is optimal with
respect to both the background mesh size h and the limiting degree ˆk of the interpolated
background space. Note that the convergence rate does not improve by decreasing the
foreground mesh size η faster than the background mesh size h or increasing the foreground
polynomial degree κ above that of the background polynomial degree k.1

In the above analysis, we made the rather stringent assumption that the foreground
mesh be background-ﬁtted. However, our later numerical experiments suggest that best
approximation estimates of the form given by (21) also hold when the foreground mesh is
background-unﬁtted. This is perhaps not too unexpected as the interpolated background FE
space is complete up to polynomial degree ˆk even when the foreground mesh is background-
unﬁtted, but our analysis does not extend to this case since we require that the background
basis functions be smooth over each element of the foreground mesh. We also made the
assumption in our analysis that the foreground mesh be free of hanging nodes. This was to
ensure that the interpolated background FE space was H 1-conforming. That being said, our
later numerical experiments suggest we may not need an interpolated background FE space
that is H 1-conforming provided that the original background FE space is H 1-conforming.
In particular, we are able to attain optimal convergence rates for the biharmonic problem
using an interpolated background FE space that is only H 1-conforming when the original
background FE space is H 2-conforming. Finally, the best approximation estimate given
by (21) depends on the shape regularity of the foreground mesh through the interpolation
constant Cinterp, but our later numerical experiments suggest that high quality results are
attained with interpolation-based immersed ﬁnite element and isogeometric analysis even
when the foreground mesh is of poor quality.

4. Reusing FE software for interpolation-based immersed methods

As each basis function (cid:98)Ni of V h in our proposed method is a linear combination of basis
functions deﬁned on the foreground mesh used for element-by-element assembly, one may

1If there is geometry error in the foreground mesh, then there can be some beneﬁt to over-reﬁning η near

boundaries (cf. Section 5.3), but geometry error is outside the scope of the analysis in this section.

11

implement interpolation-based immersed methods using existing FE software in a similar
manner as one would implement IGA via Lagrange extraction [17]. The cited paper em-
phasizes an implementation based on modifying element-level shape function routines which
could also be followed for immersed methods. However, the method we shall outline here is
based on global linear algebra operations applied to the full, assembled system of equations,
similar to what is done in [18, 19] for IGA. The latter approach requires fewer modiﬁcations
to the existing FE code and is referred to as “non-invasive” by [19].

4.1. Non-invasive implementation using extraction matrices

Consider a scalar variational problem of the form: Find uh ∈ V h such that, ∀vh ∈ V h,

a (cid:0)uh, vh(cid:1) = L (cid:0)vh(cid:1) ,

(22)

where a and L are a bilinear and linear form, i.e., the left- and right-hand sides of the
Nitsche formulation (5) for the Poisson model problem. V h = span{ (cid:98)Ni} is the solution space
for the interpolation-based immersed method. The state variable ﬁeld is discretized by the
interpolated basis functions as

n
(cid:88)

uh =

di (cid:98)Ni ,

where {di}n

i=1
i=1 are unknown coeﬃcients. Then we need to solve the linear system

Kd = F ,

where the global stiﬀness matrix and forcing vector are

Kij = a

(cid:16)

(cid:98)Nj, (cid:98)Ni

(cid:17)

and Fi = L

(cid:17)

(cid:16)

(cid:98)Ni

.

In the interpolation-based immersed method,

(cid:98)Nj =

ν
(cid:88)

i=1

Mijφi with Mij = Nj(xi) .

(23)

(24)

(25)

(26)

Mij projects the background functions onto the space of the foreground elements and can be
obtained by evaluating the background basis Nj at the nodal points of the foreground mesh
xi. Using the (bi-) linearity of a and L, we can re-write (25) as

Kij =

(cid:88)

k,(cid:96)

Mkia(φ(cid:96), φk)M(cid:96)j

and Fi =

(cid:88)

k

MkiL(φk) .

(27)

In matrix form, this reads as

where

K = MT AM and F = MT B ,

Aij = a(φj, φi)

, Bi = L(φi) ,

12

(28)

(29)

We will refer to M as the “extraction matrix”. With some additional straightforward book-
keeping, this method extends to linear PDE systems with multiple scalar solution ﬁelds, as
presented for extraction-based IGA in [18]. It can also be applied to each step of Newton
iteration to solve a nonlinear problem, where a is the Gateaux derivative of a residual form
−L.

Crucially, the matrix A and vector B can be assembled using a standard boundary-ﬁtted
FE code in a loop over elements in the foreground mesh. Thus, given a foreground mesh and
an extraction matrix M, one can directly reuse an existing FE code for interpolation-based
immersed analysis without making any modiﬁcations to the assembly procedures. The post
processing features of existing FE codes can also be reused by leveraging a foreground FE
representation of the solution:

ν
(cid:88)

uh =

cjφj ,

where the foreground FE coeﬃcients {ci} are obtained from the solution d of (24) by

j=1

c = Md .

(30)

(31)

4.2. Example implementation using FEniCS

For the numerical results in this paper, we apply the method outlined in Section 4.1 to the
existing FE automation toolchain FEniCS [14]. FEniCS allows arbitrary linear and bilinear
forms to be speciﬁed over a variety of classical FE function spaces using the Python-based
Uniﬁed Form Language (UFL) [24]. UFL forms are compiled into eﬃcient element-level
routines [25] which are used by the FE library DOLFIN [26] to assemble matrices and
vectors. In the notation of Section 4.1, UFL would be used to specify the forms a and L,
and DOLFIN would be used to assemble the matrix A and vector B, applying the compiled
element-level routines to elements {ωe}νel
i=1 of the foreground mesh. DOLFIN’s application–
programmer interface (API) provides access to the linear algebra objects A and B as data
structures in the parallel linear algebra library PETSc [27–29], which is used to form K and
F via (28), solve the linear system (24) for d, and compute the foreground FE coeﬃcients c
via (31). DOLFIN’s output and visualization routines can then be applied to this foreground
FE representation of the solution.

This non-invasive reuse of FEniCS provides great ﬂexibility for implementing formulations
of a variety of diﬀerent PDE systems as we illustrate in the sequel. What remains is to
generate the foreground- and background meshes alongside the extraction operators M.
The tools and methods used to do so are outlined in the following subsection.

4.3. Mesh generation

This section describes the techniques used in the numerical examples of Sections 5 and

6 to generate both background-ﬁtted and -unﬁtted foreground meshes.

4.3.1. Background-ﬁtted foreground meshes

To generate background-ﬁtted foreground meshes and their extraction matrices M, the
XFEM Tool Kit of the research code presented in [30] was used. Within this toolkit, the
foreground elements are created by repeated subdivision of a structured background grid.

13

∂Ω

(a)

(b)

(c)

Figure 3: Generation of background ﬁtted foreground meshes. (a) Single background element
with description of the boundary shown by a red curve; (b) regular subdivision of the background
element into triangles; (c) subdivision of triangles based on intersections of the interface with
edges; interface approximated by red lines.

First, each background cell is subdivided into a set of triangular or tetrahedral elements
as is shown in Figure 3 (b). Then, all edges of the elements are checked for intersections
with the geometry. Using a set of subdivision templates, elements with intersected edges are
then again subdivided into straight-edged triangular and tetrahedral elements such that new
element vertices are created at the intersection locations. The new element facets (i.e. edges
in 2D and faces in 3D) are a ﬁrst-order geometric approximation of the domain boundary as
shown in Figure 3 (c).

The XFEM tool kit constructs the extraction matrices M such that basis functions are
enriched following a Heaviside enrichment strategy [30]. Enrichment is needed when the
support of a basis contains two or more geometrically disconnected domains. Note that for
the numerical examples studied in this paper enrichment is not required to ensure optimal
convergence.

While the procedure outlined enables the robust background-ﬁtted triangulation of the
material domain, it may lead to elements of arbitrarily small size and arbitrarily large aspect
ratio. As an example, the 2D foreground meshes used in Subsection 6.2 contain elements
with aspect ratios as high as ∼ 300 and elements with volumes as small as ∼ 10−4 of the
biggest elements. The poor mesh quality is exacerbated in 3D. The 3D foreground meshes
used for the example in Subsection 5.1 contain elements that diﬀer by a factor of ∼ 1027 in
volume, and aspect ratios as high as ∼ 1029. An example for the poor elements resulting
from this mesh generation process in 3D is shown in Figure 4.

4.3.2. Background-unﬁtted foreground meshes

Mesh cutting tools,

like the XFEM tool kit discussed in Section 4.3.1, generate
background-ﬁtted meshes and do not require an additional mesh generator to create fore-
ground meshes. However, background-unﬁtted analysis allows substantially greater ﬂexibility
in the generation of foreground meshes; essentially any existing mesh generator can be used,
with the only necessary information from the background mesh being an approximate ele-
ment size. We apply two diﬀerent approaches within the examples shown in this paper, with
the particular details largely motivated by convenience. The background-unﬁtted foreground
meshes used in Section 5.5 were generated using FEniCS’s built in structured mesh functions,

14

(a)

(b)

Figure 4: (a) A tessellation of a hexahedral background element from the 3D mesh shown in
Figure 5, highlighting the sliver element in the rightmost corner.
(b) Only the red section
consisting of small tetrahedral elements intersects the PDE domain Ω.

as were the corresponding background meshes. For these examples, the background function
spaces were C 0 Lagrange FE spaces, and the extraction operators were generated directly
in FEniCS, using its PETScDMCollection functionality. The background-unﬁtted fore-
ground meshes used in Sections 6.1 and 6.2 use an isogeometric background basis. These
meshed were created with FEniCS’s mshr module, which generates unstructured simplicial
meshes from geometric descriptions. The extraction operators were generated using the
FEniCS-based isogeometric analysis library tIGAr [18] by simply overriding methods that
normally generate structured meshes for exact Lagrange extraction.

5. Numerical results

We now explore the properties of interpolation-based immersed analysis numerically using

a variety of benchmark problems.

5.1. Comparing quadrature-based and interpolation-based methods

The ﬁrst question we seek to answer is: How do interpolation-based immersed methods
with background-ﬁtted foreground meshes compare with the more thoroughly-studied class
of quadrature-based immersed methods? (We defer the comparison of background-ﬁtted and
-unﬁtted foreground meshes to Section 5.5.) In particular, we use the Poisson equation as
a model problem and consider a background function space of tensor-product B-splines of
degree k (at maximal continuity) and a foreground Lagrange FE space of equal polynomial
degree κ = k on a simplicial mesh. The background function space contains monomials of
degree greater than k which cannot be represented exactly by the foreground function space,
so interpolation-based methods diﬀer from quadrature-based ones.

To carry out this test, we construct an instance of the Poisson problem using the method

of manufactured solutions, where we choose the exact solutions

u(x) = sin(π(x2

1 + x2

2)) cos(π(x1 − x2))

(32)

15

(a)

(b)

Figure 5: Numerical solution to the Poisson problem using interpolation-based immersed anal-
ysis, visualized on the foreground mesh of reﬁnement level R = 2. Tests were performed on
both the 2D square (a) and 3D rotated cube (b).

and

1 + x2

u(x) = sin(π(x2

3)) cos(π(x1 + x2 + x3))

2 + x2
in 2D and 3D respectively, and deﬁne the source term as f := −∆u. For the 2D problem, Ω
is taken to be a unit square rotated by 45◦ about the origin (i.e., Ω = {x ∈ R2 : (cid:107)x(cid:107)(cid:96)1 <
1/2}), and the manufactured solution u is applied as Dirichlet data on the boundary of
this rotated square. Ω is then immersed into a structured background mesh of an axis-
aligned bi-unit square on which the background B-spline spaces are constructed. A suite of
progressively-reﬁned pairs of background and background-ﬁtted foreground meshes are used
with background element size h = 2−(R+1), where R ∈ {0, · · · , 6} denotes the reﬁnement
level and “h” is the square root of background element area.

(33)

For the 3D case, we take Ω to be an analogous rotated unit cube (rotated by 45◦ about
the x3 axis and then by 45◦ about the x2 axis) and deﬁne a sequence of structured hexahedral
background meshes with element size h = 2−(R+1), where R ∈ {0, · · · , 4} is the reﬁnement
level and h is the cube root of the element volume. The foreground meshes in 3D are
background-ﬁtted tetrahedral meshes.

Dirichlet boundary conditions are enforced weakly using the non-symmetric Nitsche for-
mulation (5), with Cpen = 0. A representative foreground mesh and numerical solution are
shown in Figure 5.

Figures 6 and 7 compare the convergence of interpolation-based and quadrature-based
immersed calculations.2 Both types of immersed method are seen to converge optimally

2The interpolation-based calculations use the FEniCS-based implementation described in Section 4,
whereas the quadrature-based calculations use a diﬀerent research code with the requisite functionality
which is outlined in [30]

16

Figure 6: Convergence data for Poisson’s problem in 2D, comparing the results of traditional
FEA on the foreground mesh with the Lagrange FE space, the interpolation based immersed
method developed in this paper, and the quadrature based immersed method described in
Section 3.3.

0 and L2 norms. We also include convergence results of
for k = 1 and k = 2 in both H 1
standard FE analysis using the Lagrange FE space deﬁned on the foreground mesh. This also
converges optimally with respect to h, but is less accurate per degree of freedom due to excess
foreground mesh reﬁnement in cut background elements and less-eﬃcient approximation of
smooth functions than the maximally-smooth B-splines of the background function space.

5.2. Non-conforming background spaces

The numerical analysis sketched in Section 3.5 made the assumption of a conforming dis-
crete space, i.e., that the discrete space V h of interpolated background functions was a subset
of the inﬁnite dimensional space used to deﬁne the continuous variational problem (viz., H 1
in the case of the Poisson equation). However, one may wish to relax that requirement
in practice to eliminate topological constraints on the foreground mesh and/or interpolate
smooth background functions inexactly with less-regular foreground FE functions.

17

Figure 7: Convergence data for Poisson’s problem in 3D, comparing the results of traditional
FEA on the foreground mesh with the Lagrange FE space, the interpolation based immersed
method developed in this paper, and the quadrature based immersed method described Section
3.3.

As a model problem to illustrate non-conforming interpolation-based immersed analysis,

we consider the biharmonic problem: Find u such that

with boundary conditions

∆2u = f ,

u = σ on ∂Ω ,
∇u · n = ∇σ · n on ∂Ω ,

(34)

(35)
(36)

where f : Ω → R is a given source term and σ : Ω → R is an auxiliary function used to
deﬁne Dirichlet boundary data for u and ∇u · n on ∂Ω.3 Unlike the nonsymmetric Nitsches

3One could instead deﬁne separate functions to prescribe boundary data for u and its normal derivative,

18

method used in the Poisson problem in (5), we discretize this problem using a symmetric
Nitsche-like method: Find uh ∈ V h such that, ∀vh ∈ V h,

(cid:90)

Ω
(cid:90)

+

∆uh∆vh dΩ +

(cid:90)

∂Ω

∇∆uh · nvh − ∆uh∇vh · n dΓ

(∇∆vh) · n(uh − σ) − ∆v(∇uh · n − ∇σ · n) dΓ

∂Ω

(cid:90)

∂Ω

+

α
h3 (uh − σ)vh +

β
h

(∇uh · n − ∇σ · n)∇vh · n dΓ =

(cid:90)

Ω

f vh dΩ ,

(37)

where α > 0 and β > 0 are independent of h and eta, but must be suﬃciently large to ensure
stability of the formulation.4 In the computations of this paper, we use α = β = 5. In the
case of immersed methods, the integrals (cid:82)
∂Ω(· · · ) dΓ should be understood as
being split up over elements of the foreground mesh, as in (7). This distinction is important
when non-conforming spaces are used as some spatial derivatives may have distributional
contributions at interior mesh facets that are ignored, so (37) technically involves some abuse
of notation.

Ω(· · · ) dΩ and (cid:82)

As with the Poisson problem in Section 5.1, we use the method of manufactured solutions,

choosing exact solutions

u(x) = cos(0.05πx1 + 0.1) cos(0.05πx2 + 0.1))

and

u(x) = cos(πx1 + 0.5) cos(πx2 + 0.5) cos(πx3 + 0.5)

(38)

(39)

in 2D and 3D, respectively, and setting the problem data to f := ∆2u and σ := u.

We reuse the rotated square and cube domains and mesh sequences from Section 5.1. We
select the background function spaces to be H 2-conforming. In particular, we use quadratic
B-splines of maximal continuity. However, the foreground function spaces are taken to be
quadratic Lagrange FE spaces, which, on simplicial meshes, do not represent all monomials
of the background B-spline spaces. Further, interpolations of background functions on this
Lagrange FE space are only C 0, containing jumps in their ﬁrst derivatives (so they can
be at most H 3/2−(cid:15)-conforming, for (cid:15) > 0 arbitrarily-small). Interpolation-based immersed
analysis will therefore be non-conforming in this case. 2D and 3D convergence results are
shown in Figure 8. We get optimal rates of 1 and 2 for the H 2 and H 1 norms respectively,
where “H 2 norm” is understood in a broken sense (i.e., the square root of a sum over squared
foreground-element H 2 norms) in this non-conforming setting. We get only a rate of 2 for the
L2 norm, but this is expected, since an Aubin–Nitsche-type duality argument to obtain an
optimal L2 error bound breaks down for quadratic B-spline discretizations of the biharmonic
problem [31].

but an equivalent σ must exist for the problem to be well-posed and the present perspective is more convenient
for applying the method of manufactured solutions.

4For the method to be usable with piecewise-quadratic function spaces, α must be strictly positive, even

if a non-symmetric variant is used, as ∇∆vh ≡ 0 and only the penalty term is left to enforce uh ≈ σ.

19

Figure 8: Convergence data for the biharmonic problem.

Remark 1. The 3D foreground meshes used in this section include some elements where
η (cid:28) h, such as the example shown in Figure 4. The harmful eﬀects of small background
element–domain intersections on linear system conditioning have been studied previously
in the context of quadrature-based immersed methods, along with a variety of possible
remedies, but we leave the adaptation of such techniques to the interpolation-based setting
to future work, as discussed further in Section 7. However, small foreground elements,
where η → 0, present a distinct challenge unique to interpolation-based methods, due to
the blow-up of foreground basis function derivatives .5 The resulting large numbers in the
matrix A deﬁned by (29) should, in exact arithmetic, be canceled by small entries in the
extraction matrix M when forming K by (28). However, this cancellation is not exact
due to ﬁnite precision. For the fourth-order biharmonic problem in 3D, we ﬁnd that this
can prevent convergence even with direct solvers.
In the 3D biharmonic examples from
the present work, we circumvent the issue by removing near-zero volume elements from the
assembly of A, skipping integration over foreground elements (and their associated boundary
facets) if their volume falls below 0.001% of the largest foreground element. The resulting
geometric perturbation of the domain has no observable eﬀect on solutions, as illustrated by
the convergence results of Figure 8. One can imagine pathological domain–mesh intersections
where such a strategy would lead to signiﬁcant errors, but these do not arise in our tests,
and the solution of fourth-order problems on topologically-3D domains is itself relatively
uncommon in applications.

5.3. Geometric approximations of domain geometry

The convergence tests of Sections 5.1 and 5.2 deliberately used polyhedral PDE domains
so that a foreground mesh of aﬃne simplex elements could ﬁt them exactly, allowing us to
isolate errors due to interpolation of the background basis functions. We now consider a

5This blow-up does not manifest in quadrature-based methods since they directly evaluate background

basis function derivatives.

20

problem with a curved boundary where there is some geometry error between Ω and the
foreground mesh.

In particular, we choose the classic linear elasticity benchmark of an inﬁnite 2D plate
with a circular hole subjected to biaxial tension. We consider the plane strain variant of the
problem. An exact solution for the stress ﬁeld is readily available in elasticity textbooks,
e.g., [32, Section 7.7.5]. We truncate the problem to a ﬁnite square domain whose side length
is four times the diameter of the hole and apply the traction from the exact solution to the
inﬁnite-domain problem on the boundary. This ﬁnite-domain problem is further truncated
by restricting it to the upper-right quadrant of the x1–x2 plane and applying symmetry
boundary conditions on the axes, which eliminates rigid-body modes from the displacement
solution of the original pure Neumann problem. We formulate linear elasticity as a problem
for displacement, viz., Navier’s equations, which also provide an opportunity to demonstrate
interpolation-based immersed analysis for a system of PDEs: Find a displacement ﬁeld
u : Ω → R2 such that

subject to boundary conditions

−∇ · σ(u) = 0

u · n = 0 on Γsym ,
(I − n ⊗ n)(σ · n) = 0 on Γsym ,

σ · n = t on Γt ,

(40)

(41)
(42)
(43)

where Γsym ⊂ ∂Ω is the union of the symmetry planes where sliding boundary conditions
are applied, Γt = ∂Ω \ Γsym is the Neumann boundary on which traction is prescribed, t is
the traction on Γt taken from the exact solution, and the Cauchy stress σ is

σ(u) = 2µε(u) + λ tr(ε(u))I

(44)

in terms of the symmetric gradient operator ε(·) (which gives strain when applied to the
displacement) and Lam´e parameters µ and λ, which we set from Young’s modulus E =
200 × 109 and Poisson’s ratio ν = 0.3 by standard formulas.

We discretize Navier’s equations with slip boundary conditions using a symmetric

Nitsche-like formulation analogous to (5): Find uh ∈ V h such that, ∀vh ∈ V h,

(cid:90)

Ω

σ(uh) : ∇vh dΩ

−

+

(cid:90)

(uh · n)n · σ(vh) · n dΓ −

Γsym

(cid:90)

Γsym

βµ
h

(uh · n)n · vh dΓ =

(cid:90)

Γt

(cid:90)

Γsym

(vh · n)n · σ(uh) · n dΓ

t · vh dΓ ,

(45)

where β > 0 is a penalty parameter associated with Nitsche’s method (in this work we set
β = 10) and integrals should be understood in the sense of (7) (which is technically an abuse
of notation in the present case because it ignores the geometry error in the foreground mesh).
Similarly, the outward-facing unit normal n depends on the geometry of the foreground mesh,
but this dependence has been suppressed in the notation.

21

(a) No foreground reﬁnement

(b) One level of foreground reﬁnement

(c) Two levels of foreground reﬁnement

Figure 9: Plots showing the magnitude of displacement. To resolve curved surfaces, the
foreground mesh is locally reﬁned, while the same uniform background mesh is used.

To study the behavior of interpolation-based immersed methods, we construct a sequence
of uniform, structured background meshes of quadrilateral elements, covering the truncated
plate and hole. We consider several corresponding sequences of foreground meshes, with
diﬀerent levels of local reﬁnement around the curved boundary of the hole. The three
diﬀerent foreground mesh reﬁnement levels are shown for an 8 × 8 background mesh in
Figure 9, along with representative displacement solutions. In all cases, the foreground mesh
elements are aﬃne triangles. For the background function spaces, we select B-spline spaces
of degrees k = 1 and k = 2, with maximal continuity for each, and, for the foreground
function spaces, we use Lagrange FE spaces of corresponding polynomial degrees k = κ.

Figure 10 shows the convergence of the L2 norm of error in the Cauchy stress for dif-
ferent polynomial degrees and levels of foreground reﬁnement. We see that, even without
foreground reﬁnement the case of k = 1 attains the optimal convergence rate. For k = 2,
geometry error dominates in the case without foreground reﬁnement and limits the rate of
convergence. However, even with just one level of foreground reﬁnement near the curved
boundary, we see an optimal eﬀective convergence rate. For aﬃne foreground elements and
a ﬁxed level of local foreground reﬁnement, we still expect the geometry error to dominate
in the ultimate asymptotic limit (as occurs also with the even lower-order stair-step ap-
proximations of curved boundaries in ﬁnite cell adaptive quadrature), but this phenomenon
is unlikely to be encountered in practical problems where the model error would dominate
well before this asymptotic regime. We hypothesize that the use of high-order isoparametric
elements instead of local foreground reﬁnement would provide true optimal convergence, but
high-order foreground mesh generation is currently outside the capabilities of the software
framework used for this paper.

5.4. Nonlinear and unsteady problems

We now consider the unsteady incompressible Navier–Stokes equations as an example
of a more complicated nonlinear PDE system. This problem also illustrates the use of
interpolation-based immersed ﬁnite element analysis in conjunction with stabilized ﬁnite

22

Figure 10: Frobenius norm of stress error tensor plotted against the background element size
shown with both linear basis functions and quadratic basis functions. In the case of quadratic
basis functions, the foreground mesh was reﬁned as shown in Figure 9.

element formulations that use mesh-dependent variational forms, originally designed with
the standard body-ﬁtted FE setting in mind.

In particular, we consider the PDE system: Find velocity and pressure ﬁelds (u, p) :

Ω × (0, T ) → Rd × R such that

ρ (∂tu + u · ∇u) = −∇p + µ∆u
∇ · u = 0

subject to the boundary condition

u = g on ∂Ω ,

(46)

(47)

where d is the spatial dimension of Ω, (0, T ) is the time interval on which the problem is
posed, ρ is mass density, µ is dynamic viscosity, and g is given Dirichlet boundary data.
We discretize this in space using a stabilized variational multiscale (VMS) formulation [33]
with non-symmetric Nitsche-like weak enforcement of the Dirichlet boundary condition [34],

23

leading to the semi-discrete problem: Find (uh, ph) ∈ VVV h×Qh such that, ∀(vh, qh) ∈ VVV h×Qh,

(cid:90)

Ω

(cid:90)

+

∂Ω

(cid:0)ρ (cid:0)∂tuh + uh · ∇uh(cid:1) · vh + σ(uh, ph) : ∇vh + ∇ · uhqh(cid:1) dΩ

(cid:0)−(σ(uh, ph)n) · vh + (σ(vh, qh) · n) · (uh − g)(cid:1) dΓ

(cid:90)

−

∂Ω

(cid:0)ρ min{uh · n, 0}(uh − g) · vh(cid:1) dΓ

(cid:18)(cid:18)

(cid:90)

+

Ω

τM

uh · ∇vh +

(cid:19)

∇qh

1
ρ

· rM − vh · rM · ∇uh

(cid:19)

dΩ

(cid:90)

−

Ω

τ 2
M
ρ

(∇vh) : (rM ⊗ rM) dΩ

+

(cid:90)

Ω

(cid:0)rC∇ · vh(cid:1) dΩ = 0

τC

where

σ(u, p) = 2µε(u) − pI

(48)

(49)

gives the functional form of the Cauchy stress in terms of the velocity and pressure ﬁelds,

rM = ρ(∂tuh + uh · ∇uh) − ∇ · σ(uh, ph)

is the residual of the strong momentum balance equation,

rC = ρ∇ · uh

(50)

(51)

is the residual of the strong continuity equation, and τM and τC are the momentum and con-
tinuity stabilization parameters, respectively. A number of deﬁnitions for these stabilization
parameters have been studied in the literature. We follow [35] in deﬁning

(cid:18)

uh · G · uh + CIν2G : G +

τM =

(cid:19)−1/2

,

Ct
∆t2

and

τC =

1
τMtr(G)

,

(52)

(53)

with ν = µ/ρ the kinematic viscosity, ∆t the time step size of the temporal discretization,
CI > 0 and Ct > 0 are dimensionless constants (set to CI = 60 and Ct = 4 in this work),
and G is an anisotropic mesh size tensor, which simpliﬁes to

G = 4h−2I

(54)

in the case of a uniform isotropic mesh with element size h. In the computations of this
paper, we take this element size to be from the uniform background mesh. We discretize
the system of ordinary diﬀerential equations emanating from the semi-discrete problem (48)
using the implicit midpoint rule in time, with a time step ∆t proportional to the background
element size h.

24

Figure 11: Convergence data for the velocity and pressure ﬁelds of the Taylor–Green vortex
problem using both linear and quadratic discretizations. Kinematic viscosity was set to 1/100
yielding a Reynolds number of 100, and error is evaluated at time T = 1.

As a representative instance of the Navier–Stokes problem, we consider the 2D Taylor–
Green vortex. The statement and spatially-periodic exact solution of this problem are well-
In numerical studies, it is often restricted to the square (0, π)2 with symmetry
known.
boundary conditions (e.g., [36, Section 9.10.1]). However, in the present work, we take Ω to
be the rotated unit square used as the domain of the Poisson problem in Section 5.1, apply
the exact solution as the boundary data g, and use the same sequence of background and
foreground mesh pairs deﬁned in Section 5.1. The stabilized formulation (48) permits the
stable use of equal-order discretizations, i.e.,

VVV h = (V h)d

and Qh = V h

(55)

for a single scalar function space V h. Our numerical tests in this section use the same linear
and quadratic choices for V h as used for the scalar Poisson problem in Section 5.1.

The convergence of velocity and pressure as h ∼ ∆t → 0 (resulting in a CFL number
of approximately 1) is shown in Figure 11. We see eﬀectively optimal rates of velocity
convergence with respect to the polynomial degree of the spatial discretizations in the L2
and H 1 norms.
In principle, using h ∼ ∆t and the implicit midpoint rule should limit
convergence to second-order in the L2 norm,6 but the quadratic spatial discretizations appear
to be third-order in velocity L2 error within the range of resolutions tested. Pressure H 1 error
convergence is also nearly optimal, but with a drop in convergence rate on the ﬁnest meshes
when using quadratic spatial discretizations. This sub-optimal H 1 pressure convergence is
consistent with the analysis of related stabilized methods for Stokes and Oseen ﬂow, e.g.,
[38, 39], where error is bounded in a norm on the velocity–pressure product space in which
the pressure gradient is scaled by element size, weakening its contribution.

6The assumption of h ∼ ∆t is tacit in the stabilized formulation used; reﬁning ∆t faster than h would

weaken stabilization in the asymptotic regime. See [37] for additional discussion.

25

5.5. Background-unﬁtted foreground meshes

The analysis of Section 3.5 and preceding numerical examples in Sections 5.1–5.4 all
used background-ﬁtted foreground meshes. Background-ﬁtted foreground meshes are a ne-
cessity for quadrature-based immersed methods, since the quadrature rules deﬁned on fore-
ground elements require smoothness of the integrand for accuracy. However, interpolations of
background basis functions on a foreground mesh are, by construction, smooth within each
foreground element and can be accurately integrated with foreground element-by-element
quadrature rules. Of course, the solution space for interpolation-based immersed methods
consists of interpolations of background basis functions that are non-smooth within each
foreground element, so the analysis of Section 3.5 is not applicable. However, the numerical
results of the current section suggest that optimal accuracy is maintained with background-
unﬁtted foreground meshes.

In the preceding examples, the background function space was taken to be a B-spline
space of maximal continuity. However, as a stress test of background-unﬁtted interpolation-
based immersion, we instead test it with C 0 Lagrange background function spaces deﬁned on
simplicial meshes. As test problems, we consider the Poisson equation with a manufactured
solution (cf. Section 5.1) and the Taylor–Green vortex (cf. Section 5.4). For both of these
test problems, the domain is taken to be a rotated square, and the sequence of pairs of
background and background-unﬁtted foreground meshes are constructed similarly to the
representative pair shown in Figure 12 but at varying levels of reﬁnement. In all tests, the
foreground element size η is kept proportional to the background element size h, and the
polynomial degrees k and κ of the background and foreground are equal. For the Taylor–
Green vortex problem, the same time implicit midpoint rule with time step ∆t proportional
to the background element size h was used as in Section 5.4.

The convergence results for both the Poisson and Navier–Stokes examples are shown in
Figures 13 and 14 respectively. We see optimal convergence rates of L2 and H 1 error (of
velocity in the case of Navier–Stokes) for linear and quadratic discretizations.

6. Application to IMGA of trimmed shells

A major success of IGA has been its application to thin shell analysis, originating in the
work of Kiendl and collaborators [40–42]. Smooth discrete function spaces from IGA make it
possible to apply the Bubnov–Galerkin method directly to Kirchhoﬀ–Love theory where the
displacement satisﬁes a fourth-order PDE system. This provides much better per-degree-of-
freedom accuracy than classical FE discretizations of shells, sometimes resolving important
qualitative solution features with orders of magnitude less computation [43]. However, the
original isogeometric Kirchhoﬀ–Love shell formulation of [40] is restricted to boundary-ﬁtted
spline representations of the midsurface geometry. With suitably-ﬂexible spline technolo-
gies, such as T-splines [44], it is practical to design such “analysis-suitable” geometries for
industrial applications as demonstrated for thin shell analysis of composite wind turbine
blades [45], prosthetic heart valve leaﬂets [46], and automobile parts [47]. However, the
vast majority of industrial CAD software deﬁnes surface geometries in an immersed way by
cutting them out of unﬁtted parametric coordinate charts along arbitrary trim curves [10].
Thus, immersogeometric formulations are needed to directly analyze CAD models of shell
structures. Quadrature-based immersed methods for thin shells have previously been used

26

Figure 12: A representative example of a background mesh and a background-unﬁtted fore-
ground mesh.

Figure 13: Convergence data for the Poisson problem, generated using extraction onto unﬁtted
background meshes (Figure 12).

in a number of studies [48–50]. In this section of the present work, we apply interpolation-
based IMGA to Kirchhoﬀ–Love analysis of shells whose geometries are deﬁned by subsets of
a B-spline patch’s parameter space.

The speciﬁc variational formulation that we use in this section is that of a geometrically-
nonlinear Kirchhoﬀ–Love shell of uniform thickness hth whose material behavior follows a
homogeneous isotropic St. Venant–Kirchhoﬀ model deﬁned by a Young’s modulus E and
Poisson ratio ν. A complete mathematical statement of this problem is given by [41], and
its translation into FEniCS UFL is available online in the library ShNAPr [51] developed to
support the work in [52]. We therefore omit the extensive kinematic deﬁnitions for brevity
as they are neither novel nor essential to following the present study. We mention brieﬂy,

27

Figure 14: Convergence data for the Taylor–Green vortex problem generated using extraction
onto unﬁtted meshes (Figure 12), with Reynolds number 100, after elapsed time T = 1.

though, that we implement pinned boundary conditions on the edges of trimmed shells using
a penalty formulation based on [53]. This consists of adding

+

1
2

(cid:90)

Lpin

αEhth
h

(cid:12)uh − g(cid:12)
(cid:12)
(cid:12)

2

dL

(56)

to the shell structure’s elastic energy functional where Lpin is the portion of the trim curve (in
the reference conﬁguration) on which pinned boundary conditions are to be applied, α > 0 is
a dimensionless constant, h is the background-mesh element size, uh is the unknown discrete
displacement ﬁeld of the shell structure’s midsurface, and g is the prescribed midsurface
displacement on the pinned boundaries. For quadratic spline discretizations, this “naive”
penalty method for pinned boundaries is essentially as accurate as a full Nitsche-type formu-
lation (cf. [54]) because the associated consistency term involves third-order derivatives. The
use of (56) in conjunction with an analogous rotational penalty has been demonstrated to be
accurate for coupling non-matching shell structures in practical problem settings [53, 55–57].

6.1. Veriﬁcation with boundary-ﬁtted IGA

We ﬁrst test interpolation-based IMGA of thin shells by trimming out a rectangular
domain which can easily be modeled with an untrimmed B-spline to provide a reference
solution for veriﬁcation purposes. In particular, for each Cartesian component of the shell
midsurface displacement, we reuse the k = 2 sequence of scalar B-spline background and
Lagrange-interpolated foreground spaces from the 2D Poisson and biharmonic tests of Sec-
tions 5.1 and 5.2, where the parametric-space domain is a rotated unit square trimmed out of
an axis-aligned bi-unit square, shown in Figure 15. Additionally, we use a new background-
unﬁtted k = 2 sequence of scalar B-spline background and Lagrange-interpolated foreground
spaces, constructed as described in Section 4.3.2. In this test, we take the mapping from the
B-spline parameter space to the physical-space reference conﬁguration of the shell’s midsur-
face to be given by

X(ξ) = ξ1e1 + ξ2e2 ,

(57)

where ξ = (ξ1, ξ2) is a point in the B-spline parameter space, X is the corresponding 3D point
on the reference conﬁguration midsurface, and {e1, e2, e3} is the standard orthonormal basis

28

for a Cartesian coordinate system of 3D physical space into which the reference conﬁguration
is embedded. The construction of an analogous sequence of untrimmed reference B-spline
discretizations is straightforward due to the square geometry.

We apply homogeneous (i.e., g = 0) pinned boundary conditions to the entire boundary
of the unit square domain, using penalty coeﬃcient α = 105, and assume material parameters
of E = 4.8 × 105 and ν = 0.38, and thickness hth = 0.1. We then apply a uniform force
density per unit reference area of 90e3, leading to an “inﬂated” equilibrium conﬁguration, of
which a representative numerical approximation using interpolation-based IMGA is shown
in Figures 15a and 15b. We also extract the out-of-plane displacement component at the
center of the plate using IMGA at several levels of reﬁnement and plot it as a function of
number of degrees of freedom in Figure 15c. This displacement converges to the reference
value obtained from a highly-reﬁned computation using standard untrimmed IGA. (This is
a geometrically-nonlinear problem, for which there is no analytical Kirchhoﬀ–Love solution
available.)

6.2. Background-ﬁtted and -unﬁtted IMGA for a complicated trimmed geometry

As a ﬁnal example, we consider a more complicated trimmed spline geometry, for which
a boundary-ﬁtted IGA model would require unstructured spline technologies that are not
currently part of standard design workﬂows. Background-ﬁtted and -unﬁtted meshes of the
trimmed geometry are shown in the spline parameter space in Figures 16a and 16b. The
parametric space is then mapped to a curved physical-space reference conﬁguration by

X(ξ) = ξ1e1 + ξ2e2 + A(1 − ξ2

1)e3 ,

(58)

as visualized in Figures 16c and 16d where A = 1/2. The physical problem that we solve on
this geometry is a static Kirchhoﬀ–Love shell analysis with E = 3 × 104, ν = 0.3, and hth =
0.03, pinned boundary conditions applied to the outer left and right sides of the parametric
domain, and a pressure follower load with force density per unit reference midsurface area
of f = 90n where n is the unit normal vector to the deformed midsurface. Representative
numerical approximations of the resulting equilibrium conﬁguration are shown in Figures
16e and 16f.

Remark 2. The static equilibrium conﬁgurations shown in Figures 16e and 16f were arrived
at by computing the steady-state solution of a dynamic Kirchhoﬀ–Love shell problem with
strong mass damping and numerical dissipation from under-resolved backward-Euler time
stepping. This pseudo-time continuation method was necessary to avoid bifurcations that
arise on some meshes when attempting to apply static load stepping.

To study convergence with respect to mesh reﬁnement quantitatively, we extract the
displacement magnitude at the parametric point ξ = (0, −1/4) (corresponding to the bottom
of the inner circle) as a quantity of interest. This displacement is shown as a function of
number of degrees of freedom for both the background-ﬁtted and -unﬁtted discretizations in
Figure 17. We can see that both types of discretizations converge to a consistent value as
the number of degrees of freedom increases, where we estimate the converged value of 0.0078
based on a highly-reﬁned background-unﬁtted discretization.

29

(a)

(b)

Figure 15: Examples of the background-ﬁtted (a) and background-unﬁtted (b) discretizations
used to verify the IMGA formulation. (c) Displacement of the center of the plate is plotted
against the number of degrees of freedom in each mesh..

(c)

30

(a) Background-ﬁtted mesh

(b) Background-unﬁtted mesh

(c) Background-ﬁtted reference conﬁguration

(d) Background-unﬁtted reference conﬁguration

(e) Background-ﬁtted deformed conﬁguration

(f) Background-unﬁtted deformed conﬁguration

Figure 16: Background-ﬁtted and -unﬁtted meshes (in B-spline parameter space) and reference
and deformed conﬁgurations (in physical space) of a trimmed shell structure subjected to a
follower load.

31

Figure 17: Convergence of background-ﬁtted and -unﬁtted analyses of a trimmed shell subject
to a follower load.

7. Conclusion

This paper introduces a new paradigm for deﬁning and implementing high-order-accurate
immersed-boundary methods based on interpolating basis functions deﬁned on a boundary-
unﬁtted background mesh into a function space deﬁned on a foreground mesh that is ﬁtted
to the domain boundary but subject to fewer topological or geometrical constraints than a
standard FE mesh. Compared with existing variational immersed methods that use fore-
ground meshes to deﬁne quadrature rules for functions on background meshes, interpolation-
based immersed ﬁnite element analysis provides more ﬂexibility with respect to the construc-
tion of the foreground mesh and more straightforward reuse of existing FE software. The
interpolation-based methodology is capable of exactly reproducing quadrature-based im-
mersed methods under certain conditions, but it also enables eﬃcient approximations that
reduce computational cost with no signiﬁcant loss of accuracy.

One major challenge of quadrature-based immersed methods that remains in the
interpolation-based paradigm is the problem that the conditioning of algebraic equation
systems like (24) can become arbitrarily-bad in certain situations where a background mesh
element’s intersection with the PDE domain is very small [58].
In the present work, we
have not applied any special treatment of these situations aside from the ad hoc volume
based cell-ﬁltering discussed in Remark 1 for the 3D biharmonic tests, although that was
motivated by ﬂoating-point precision issues, not linear system conditioning.7
In practice,
we observe that iterative linear solvers remain eﬀective for the examples considered in this
paper, but we recognize that pathological conditioning like that identiﬁed in [58] can still
arise in interpolation-based immersed methods. We hypothesize that techniques from the
literature on quadrature-based immersed methods can be adapted mutatis mutandis to the

7The technique of Remark 1 may nonetheless incidentally improve system conditioning, by eﬀectively
removing basis functions whose supports have small intersections with the domain, similar to the approach
analyzed by [12].

32

interpolation-based setting with similar beneﬁts, such as basis function agglomeration [59],
ghost penalty formulations [60], basis function removal [12], and specialized preconditioners
[61]. However, verifying this hypothesis is left to future work.

While Section 3.5 brieﬂy sketches a path toward analyzing the approximation properties
of the interpolated solution space, our veriﬁcation eﬀorts are primarily empirical in the
present work, relying on numerical experiments with a variety of PDE systems. These
experiments indicate that interpolation-based immersed methods are optimally-accurate,
even in conditions that are far outside the scope of our initial analysis. It is therefore an
interesting topic for future research to perform a more comprehensive a priori analysis of
interpolation-based immersed methods, especially in the case of foreground meshes that are
not ﬁtted to elements of the background mesh.

The non-invasive implementation of interpolation-based immersed methods discussed in
Section 4 is of great practical signiﬁcance, as implementation cost has been a major barrier
to widespread adoption and application of immersed methods proposed in the academic
literature. We have made the FEniCS-based prototype used for experiments in this paper
available online [62]. However, we plan to develop a more comprehensive open-source tool
chain for non-invasive implementation of interpolation-based immersed methods in the near
future.

Acknowledgements

J. E. Fromm was supported by National Science Foundation award number 1650112. R.
Xiang and D. Kamensky were partially supported by National Science Foundation award
number 2103939. N. Wunsch, K. Maute, and J. A. Evans were supported by National
Science Foundation award number 2104106. H. Zhao was partially supported by National
Aeronautics and Space Administration award number 80NSSC21M0070.

References

[1] T. J. R. Hughes. The Finite Element Method. Linear Static and Dynamic Finite Element

Analysis. Prentice-Hall, Englewood Cliﬀs, New Jersey, 1987.

[2] M. F. Hardwick, R. L. Clay, P. T. Boggs, E. J. Walsh, A. R. Larzelere, and A. Alt-
shuler. DART system analysis. Technical Report SAND2005-4647, Sandia National
Laboratories, 2005.

[3] C. S. Peskin. Flow patterns around heart valves: A numerical method. Journal of

Computational Physics, 10(2):252–271, 1972.

[4] J. Parvizian, A. D¨uster, and E. Rank. Finite cell method. Computational Mechanics,

41(1):121–133, 2007.

[5] D. Schillinger and M. Ruess. The ﬁnite cell method: A review in the context of higher-
order structural analysis of CAD and image-based geometric models. Archives of Com-
putational Methods in Engineering, 22(3):391–455, Jul 2015.

33

[6] E. Burman, S. Claus, P. Hansbo, M. G. Larson, and A. Massing. CutFEM: Discretiz-
ing geometry and partial diﬀerential equations. International Journal for Numerical
Methods in Engineering, 104(7):472–501, 2015.

[7] D. Sulsky, S.-J. Zhou, and H. L. Schreyer. Application of a particle-in-cell method to

solid mechanics. Computer physics communications, 87(1-2):236–252, 1995.

[8] T. J. R. Hughes, J. A. Cottrell, and Y. Bazilevs. Isogeometric analysis: CAD, ﬁnite
elements, NURBS, exact geometry, and mesh reﬁnement. Computer Methods in Applied
Mechanics and Engineering, 194:4135–4195, 2005.

[9] J. A. Cottrell, T. J. R. Hughes, and Y. Bazilevs. Isogeometric Analysis: Toward Inte-

gration of CAD and FEA. Wiley, Chichester, 2009.

[10] B. Marussig and T. J. R. Hughes. A review of trimming in isogeometric analysis:
Challenges, data exchange and simulation aspects. Archives of Computational Methods
in Engineering, 25(4):1059–1127, Nov 2018.

[11] D. Kamensky, M.-C. Hsu, D. Schillinger, J. A. Evans, A. Aggarwal, Y. Bazilevs, M. S.
Sacks, and T. J. R. Hughes. An immersogeometric variational framework for ﬂuid–
structure interaction: Application to bioprosthetic heart valves. Computer Methods in
Applied Mechanics and Engineering, 284:1005–1053, 2015.

[12] D. Elfverson, M. G. Larson, and K. Larsson. CutIGA with basis function removal.

Advanced Modeling and Simulation in Engineering Sciences, 5(1):6, Mar 2018.

[13] A. Johansson, B. Kehlet, M. G. Larson, and A. Logg. Multimesh ﬁnite element methods:
Solving PDEs on multiple intersecting meshes. Computer Methods in Applied Mechanics
and Engineering, 343:672–689, 2019.

[14] A. Logg, K.-A. Mardal, G. N. Wells, et al. Automated Solution of Diﬀerential Equations

by the Finite Element Method. Springer, 2012.

[15] M. J. Borden, M. A. Scott, J. A. Evans, and T. J. R. Hughes.

Isogeometric ﬁnite
element data structures based on B´ezier extraction of NURBS. International Journal
for Numerical Methods in Engineering, 87:15–47, 2011.

[16] M. A. Scott, M. J. Borden, C. V. Verhoosel, T. W. Sederberg, and T. J. R. Hughes.
Isogeometric ﬁnite element data structures based on B´ezier extraction of T-splines.
International Journal for Numerical Methods in Engineering, 88:126–156, 2011.

[17] D. Schillinger, P. K. Ruthala, and L. H. Nguyen. Lagrange extraction and projection for
NURBS basis functions: A direct link between isogeometric and standard nodal ﬁnite
element formulations.
International Journal for Numerical Methods in Engineering,
108(6):515–534, 2016. nme.5216.

[18] D. Kamensky and Y. Bazilevs. tIGAr: Automating isogeometric analysis with FEniCS.

Computer Methods in Applied Mechanics and Engineering, 344:477–498, 2019.

34

[19] M. Tirvaudey, R. Bouclier, J.-C. Passieux, and L. Chamoin. Non-invasive implemen-
tation of nonlinear isogeometric analysis in an industrial FE software. Engineering
Computations, 37(1):237–261, Jan 2020.

[20] B. Liu and D. Tan. A Nitsche stabilized ﬁnite element method for embedded interfaces:
Application to ﬂuid-structure interaction and rigid-body contact. Journal of Computa-
tional Physics, 413:109461, 2020.

[21] A. Sadeghirad, R. M. Brannon, and J. Burghardt. A convected particle domain inter-
polation technique to extend applicability of the material point method for problems
involving massive deformations. International Journal for Numerical Methods in Engi-
neering, 86(12):1435–1456, 2011.

[22] J. Nitsche. ¨Uber ein Variationsprinzip zur L¨osung von Dirichlet-Problemen bei Verwen-
dung von Teilr¨aumen, die keinen Randbedingungen unterworfen sind. Abhandlungen
aus dem Mathematischen Seminar der Universit¨at Hamburg, 36:9–15, 1971.

[23] D. Schillinger, I. Harari, M.-C. Hsu, D. Kamensky, S. K. F. Stoter, Y. Yu, and Y. Zhao.
The non-symmetric Nitsche method for the parameter-free imposition of weak boundary
and coupling conditions in immersed ﬁnite elements. Computer Methods in Applied
Mechanics and Engineering, 309:625–652, 2016.

[24] M. S. Alnæs, A. Logg, K. B. Ølgaard, M. E. Rognes, and G. N. Wells. Uniﬁed form
language: A domain-speciﬁc language for weak formulations of partial diﬀerential equa-
tions. ACM Trans. Math. Softw., 40(2):9:1–9:37, March 2014.

[25] R. C. Kirby and A. Logg. A compiler for variational forms. ACM Trans. Math. Softw.,

32(3):417–444, September 2006.

[26] A. Logg and G. N. Wells. DOLFIN: Automated ﬁnite element computing. ACM Trans.

Math. Softw., 37(2):20:1–20:28, April 2010.

[27] S. Balay, S. Abhyankar, M. F. Adams, J. Brown, P. Brune, K. Buschelman, L. Dalcin,
V. Eijkhout, W. D. Gropp, D. Kaushik, M. G. Knepley, L. C. McInnes, K. Rupp, B. F.
Smith, S. Zampini, and H. Zhang. PETSc Web page. http://www.mcs.anl.gov/
petsc, 2015.

[28] S. Balay, S. Abhyankar, M. F. Adams, J. Brown, P. Brune, K. Buschelman, L. Dalcin,
V. Eijkhout, W. D. Gropp, D. Kaushik, M. G. Knepley, L. C. McInnes, K. Rupp, B. F.
Smith, S. Zampini, and H. Zhang. PETSc users manual. Technical Report ANL-95/11
- Revision 3.6, Argonne National Laboratory, 2015.

[29] S. Balay, W. D. Gropp, L. C. McInnes, and B. F. Smith. Eﬃcient management of
parallelism in object oriented numerical software libraries. In E. Arge, A. M. Bruaset,
and H. P. Langtangen, editors, Modern Software Tools in Scientiﬁc Computing, pages
163–202. Birkh¨auser Press, 1997.

35

[30] L. Noel, M.

and K. Maute.
XIGA: An eXtended IsoGeometric Analysis approach for multi-material problems.
Computational Mechanics, 2022.

Schmidt, K. Doble,

J. A. Evans,

[31] G. Strang and G. J. Fix. An Analysis of the Finite Element Method. Prentice-Hall,

Englewood Cliﬀs, NJ, 1973.

[32] M. V. Lubarda and V. A. Lubarda. Intermediate Solid Mechanics. Cambridge University

Press, 2020.

[33] Y. Bazilevs, V. M. Calo, J. A. Cottrell, T. J. R. Hughes, A. Reali, and G. Scovazzi.
Variational multiscale residual-based turbulence modeling for large eddy simulation
of incompressible ﬂows. Computer Methods in Applied Mechanics and Engineering,
197(1):173–201, 2007.

[34] Y. Bazilevs and T. J. R. Hughes. Weak imposition of Dirichlet boundary conditions in

ﬂuid mechanics. Computers and Fluids, 36:12–26, 2007.

[35] Y. Bazilevs, V. M. Calo, T. J. R. Hughes, and Y. Zhang. Isogeometric ﬂuid–structure
interaction: Theory, algorithms, and computations. Computational Mechanics, 43:3–37,
2008.

[36] J. A. Evans. Divergence-free B-spline Discretizations for Viscous Incompressible Flows.
Ph.D. thesis, University of Texas at Austin, Austin, Texas, United States, 2011.

[37] M. C. Hsu, Y. Bazilevs, V. M. Calo, T. E. Tezduyar, and T. J R. Hughes. Improving
stability of stabilized and multiscale formulations in ﬂow simulations at small time
steps. Computer Methods in Applied Mechanics and Engineering, 199(13):828–840, 2010.
Turbulence Modeling for Large Eddy Simulations.

[38] T. J. R. Hughes, L. P. Franca, and M. Balestra. A new ﬁnite element formulation
for computational ﬂuid dynamics: V. Circumventing the Babuˇska–Brezzi condition: A
stable Petrov–Galerkin formulation of the Stokes problem accommodating equal-order
interpolations. Computer Methods in Applied Mechanics and Engineering, 59(1):85–99,
1986.

[39] L. P. Franca and S. L. Frey. Stabilized ﬁnite element methods: II. The incompressible
Navier–Stokes equations. Computer Methods in Applied Mechanics and Engineering,
99(2):209–233, 1992.

[40] J. Kiendl, K.-U. Bletzinger, J. Linhard, and R. W¨uchner. Isogeometric shell analysis
with Kirchhoﬀ–Love elements. Computer Methods in Applied Mechanics and Engineer-
ing, 198:3902–3914, 2009.

[41] J. Kiendl. Isogeometric Analysis and Shape Optimal Design of Shell Structures. PhD

thesis, Lehrstuhl f¨ur Statik, Technische Universit¨at M¨unchen, 2011.

36

[42] J. Kiendl, M.-C. Hsu, M. C. H. Wu, and A. Reali. Isogeometric Kirchhoﬀ–Love shell
formulations for general hyperelastic materials. Computer Methods in Applied Mechanics
and Engineering, 291(0):280–303, 2015.

[43] S. Morganti, F. Auricchio, D. J. Benson, F. I. Gambarin, S. Hartmann, T. J. R. Hughes,
and A. Reali. Patient-speciﬁc isogeometric structural analysis of aortic valve closure.
Computer Methods in Applied Mechanics and Engineering, 284:508–520, 2015.

[44] T.W. Sederberg, J. Zheng, A. Bakenov, and A. Nasri. T-splines and T-NURCCS. ACM

Transactions on Graphics, 22(3):477–484, 2003.

[45] Y. Bazilevs, M.-C. Hsu, and M. A. Scott. Isogeometric ﬂuid–structure interaction anal-
ysis with emphasis on non-matching discretizations, and with application to wind tur-
bines. Computer Methods in Applied Mechanics and Engineering, 249–252:28–41, 2012.

[46] M.-C. Hsu, D. Kamensky, F. Xu, J. Kiendl, C. Wang, M. C. H. Wu, J. Mineroﬀ, A. Reali,
Y. Bazilevs, and M. S. Sacks. Dynamic and ﬂuid–structure interaction simulations
of bioprosthetic heart valves using parametric design with T-splines and Fung-type
material models. Computational Mechanics, pages 1–15, 2015.

[47] H. Casquero, X. Wei, D. Toshniwal, A. Li, T. J. R. Hughes, J. Kiendl, and Y. J.
Zhang. Seamless integration of design and Kirchhoﬀ–Love shell analysis using analysis-
suitable unstructured T-splines. Computer Methods in Applied Mechanics and Engi-
neering, 360:112765, 2020.

[48] Y. Guo, J. Heller, T. J. R. Hughes, M. Ruess, and D. Schillinger. Variationally consistent
isogeometric analysis of trimmed thin shells at ﬁnite deformations, based on the STEP
exchange format. Computer Methods in Applied Mechanics and Engineering, 336:39–79,
2018.

[49] L. Coradello, D. D’Angella, M. Carraturo, J. Kiendl, S. Kollmannsberger, E. Rank, and
A. Reali. Hierarchically reﬁned isogeometric analysis of trimmed shells. Computational
Mechanics, 66(2):431–447, Aug 2020.

[50] L. Coradello, J. Kiendl, and A. Buﬀa. Coupling of non-conforming trimmed isogeometric
Kirchhoﬀ–Love shells via a projected super-penalty approach. Computer Methods in
Applied Mechanics and Engineering, 387:114187, 2021.

[51] https://github.com/david-kamensky/ShNAPr. ShNAPr source code.

[52] D. Kamensky. Open-source immersogeometric analysis of ﬂuid–structure interaction
using FEniCS and tIGAr. Computers & Mathematics with Applications, 81:634–648,
2021. Development and Application of Open-source Software for Problems with Nu-
merical PDEs.

[53] A. J. Herrema, E. L. Johnson, D. Proserpio, M. C. H. Wu, J. Kiendl, and M.-C. Hsu.
Penalty coupling of non-matching isogeometric Kirchhoﬀ–Love shell patches with ap-
plication to composite wind turbine blades. Computer Methods in Applied Mechanics
and Engineering, 346:810–840, 2019.

37

[54] J. Benzaken, J. A. Evans, S. F. McCormick, and R. Tamstorf. Nitsche’s method for
linear Kirchhoﬀ–Love shells: Formulation, error analysis, and veriﬁcation. Computer
Methods in Applied Mechanics and Engineering, 374:113544, 2021.

[55] E. L. Johnson and M.-C. Hsu. Isogeometric analysis of ice accretion on wind turbine

blades. Computational Mechanics, 66(2):311–322, Aug 2020.

[56] N. Liu, E. L. Johnson, M. R. Rajanna, J. Lua, N. Phan, and M.-C. Hsu. Blended isoge-
ometric Kirchhoﬀ–Love and continuum shells. Computer Methods in Applied Mechanics
and Engineering, 385:114005, 2021.

[57] H. Zhao, X. Liu, A. H. Fletcher, R. Xiang, J. T. Hwang, and D. Kamensky. An open-
source framework for coupling non-matching isogeometric shells with application to
aerospace structures. Computers & Mathematics with Applications, 111:109–123, 2022.

[58] F. de Prenter, C. V. Verhoosel, G. J. van Zwieten, and E. H. van Brummelen. Condition
number analysis and preconditioning of the ﬁnite cell method. Computer Methods in
Applied Mechanics and Engineering, 316:297–327, 2017. Special Issue on Isogeometric
Analysis: Progress and Challenges.

[59] F. Kummer. Extended discontinuous Galerkin methods for two-phase ﬂows: The spatial
discretization. International Journal for Numerical Methods in Engineering, 109(2):259–
289, 2017.

[60] E. Burman. Ghost penalty. Comptes Rendus Mathematique, 348(21):1217–1220, 2010.

[61] J. N. Jomo, F. de Prenter, M. Elhaddad, D. D’Angella, C. V. Verhoosel, S. Kollmanns-
berger, J. S. Kirschke, V. N¨ubel, E. H. van Brummelen, and E. Rank. Robust and
parallel scalable iterative solutions for large-scale ﬁnite cell analyses. Finite Elements
in Analysis and Design, 163:14–30, 2019.

[62] https://github.com/jefromm/interpolation-based-immersed-fea.

Source code for FEniCS-based solver.

38

