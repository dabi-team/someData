Prompt-based Pre-trained Model for Personality and
Interpersonal Reactivity Prediction

Bin Li (Corresponding author)1, Yixuan Weng2

1College of Electrical and Information Engineering, Hunan University
2National Laboratory of Pattern Recognition, Institute of Automation, Chinese Academy Sciences

Abstract
This paper describes our proposed method for the Workshop on Computational Approaches to Subjec-
tivity, Sentiment & Social Media Analysis (WASSA) 2022 shared task on Personality Prediction (PER)
and Reactivity Index Prediction (IRI). In this paper, we adopt the prompt-based learning method with the
pre-trained language model to accomplish these tasks. Specifically, the prompt is designed to provide
knowledge of the extra personalized information for enhancing the pre-trained model. Data augmenta-
tion and model ensemble are adopted for obtaining better results. Moreover, we also provided the online
software demonstration and the codes of the software for further research.

Code metadata

Nr. Code metadata description
C1
C2

Current code version
Permanent link to code/repository used
for this code version
Permanent link to Reproducible Capsule
Legal Code License
Code versioning system used
Software code languages, tools, and ser-
vices used
Compilation requirements, operating en-
vironments & dependencies
If available Link to developer documenta-
tion/manual
Support email for questions

C3
C4
C5
C6

C7

C8

C9

Please fill in this column
v1.0
https://github.com/WENGSYX/
WASSA-ACL-2022
N/A

MIT License
N/A

python, Django

Python 3, PyTorch, Transformer library,
Sqlite3
README page

N/A

1. Introduction

Personality can be defined as a set of characteristics (e.g., age, income, and race), which can
reflect the differences of individuals in thinking, emotions, and behaviors [1]. The strength of

Work in process.
" libincn@hnu.edu.cn (B. Li (Corresponding author)); wengsyx@gmail.com (Y. Weng)

© 2022 Copyright for this paper by its authors. Use permitted under Creative Commons License Attribution 4.0 International (CC BY 4.0).
CEUR Workshop Proceedings (CEUR-WS.org)

2
2
0
2

y
a
M
9
1

]
L
C
.
s
c
[

3
v
1
8
4
2
1
.
3
0
2
2
:
v
i
X
r
a

CEURWorkshopProceedingshttp://ceur-ws.orgISSN 1613-0073 
 
 
 
 
 
personality is worth exploring and pervades human lives everywhere [2]. Personality prediction
is an interdisciplinary field spanning from psychology to computer science. However, people’s
personalities can’t be directly observed and measured in activity patterns. Humans tend to
learn their personalities through language because it is the most prominent way nowadays.
To facilitate the personality relative research, we proposed the prompt-based learning method
with the pre-trained language model for the Personality Prediction (PER) and Reactivity Index
Prediction (IRI) tasks at WASSA@ACL-20221, and designed the personality detection software
for the online demonstration.

2. Main Method

2.1. Prompt Design

Prompt Learning [3, 4] is considered to be the wise way for providing the pre-trained model
with extra knowledge. For this reason, we manually design the prompt to extract relevant
knowledge from the pre-trained model for personality prediction, which is presented as the fixed
template, i.e., “A female, with fourth grade education, third race, age is 22 and income is 100000”.
Specifically, this personalized information is mapped into the tokens, then concatenated with
the origin input together in the fixed prompts for learning the joint representation. The codes
for the prompt design are presented as follows.
1

text = data[’eaasy’] ## data is the input dictionary with several discretized

2

3
4

text_prompt = "A {}, with {} grade education is, {} race, age is {}, and income is {}
.".format(data[’gender’],data[’education’]
,data[’race’],data[’age’],data[’income’])

personalized items

text = text_prompt + text ## input with prompt

2.2. Data Augmentation

Inspired by the work [5], we consider the data augmentation with random punctuation marks,
i.e., six punctuation marks in {",", ".", "!", "’", "?"}. We want to ensure there is at least one inserted
mark for more data from one author, so that the model performance will be robust for different
noise. The implementation codes are presented as follows.
1
2
3
4
5
6
7
8

for x in data:
text = x[’eaasy’]
for _ in range(20): ## 20 times for data augmentation
rd = random.randint(0,len(text)-1)
text[rd].replace(text[rd], text[rd]+random.choice(punctuation))

import random
punctuation = [’,’,’.’,’!’,"’",’?’]

1https://wassa-workshop.github.io/2022/shared_task/

2.3. Model Ensemble

For different pre-trained models [6], the better choice to improve the final results is to ensemble
the pre-trained model [7]. As a result, we adopt the ensemble method to average the logits
for the final prediction. Specifically, we implement the average logits algorithm [8] for the
personality and interpersonal reactivity prediction, which can effectively reduce the variance
of the logits prediction by averaging the prediction bias produced from different models. The
implementation adopts the transformer package2 [9], where the details are presented below
1
2
3

model1 = DebertaV2Model.from_pretrained(’M1’) ## M1, M2 and M3 represent the trained

from transformers import DebertaV2Model

4
5
6
7
8
9
10
11

model2 = DebertaV2Model.from_pretrained(’M2’)
model3 = DebertaV2Model.from_pretrained(’M3’)

pre-trained models

logits1 = model1(**input)[’logits’]
logits2 = model2(**input)[’logits’]
logits3 = model3(**input)[’logits’]

logits = (logits1 + logits2 + logits3).mean(1)

3. Software for Demonstration

Based on websocket technology, real-time communication is realized [10]. Specifically, we
utilized the trained model from the above main method for online software demonstration. The
following functions are introduced:

1. Examples of user input can be sent to the back-end server at any time, and real-time

calculations are performed through the back-end model.

2. The server will analyze the input using a cue-based approach and will be able to perform

real-time personality information calculations based on pre-trained models.

3. Finally, the results of the Personality and Reactivity Index are returned through the
website with real-time timestamps, where the web page can be presented as the front end.

As shown in Figure 1, we present the software demonstration for the proposed method.
We use Django [11] to build the entire page and automate subcontracting. Among them, the
back-end codes are implemented based on python, and the front-end is HTML and CSS [12].
Based on our implementation, the personality prediction demonstration can be easily realized
[13]. Once deployed the project successfully, just enter the following code to run the software.
1
2

python manage.py runserver 0.0.0.0:8000

The online software demonstration is presented at the website http://med.wengsyx.com/
LingShi/, where the codes of the software are open-sourced at https://github.com/WENGSYX/
WASSA-ACL-2022.

2https://github.com/huggingface/transformers

Figure 1: The demonstration of the proposed software.

4. Current Limitations

Our system has limitations in two parts. The first is the black-box feature of the pre-trained
language model, which makes it hard for us to analyze the interpretability of the personality
and reactivity index prediction results. Secondly, our proposed method requires a large number
of neurons to be spliced and calculated, so it is difficult to be migrated to the offline mobile
scenes.

5. Conclusion and Future Improvements

In this work, we present our software for personality classification and reactivity prediction,
hoping to facilitate the development of this research field with this task. The software devives
from an academic competition where we lack sufficient training data from the real world due to
privacy constraints. The prompt-based method consists of a pre-trained model with a front-end
and back-end presentation framework. In the future, we will focus on more effective prompt
designing for performing the personality and interpersonal reactivity prediction.

6. Publications and Impacts

The day-to-day practice of empirical sentiment analysis research can be supported by shifting
the focus from engineering pytorch [14] modules to personalizing predictive design spaces and
investigating methods to automatically operate in these spaces. Our software is implemented
based on Django, and the long-term operation of the system can be ensured through the front-
end and back-end code erected. In the future, we will focus on more effective prompt designing
for performing the personality and interpersonal reactivity prediction.

7. Declaration of Competing Interest

The authors declare that they have no known competing financial interests or personal rela-
tionships that could have appeared to influence the work reported in this paper.

References

[1] H. Vora, M. Bhamare, D. K. A. Kumar, Personality prediction from social media text: An

overview, Int. J. Eng. Res 9 (2020) 352–357.

[2] E. D. Beck, J. J. Jackson, A mega-analysis of personality prediction: Robustness and
boundary conditions., Journal of Personality and Social Psychology 122 (2022) 523.
[3] T. Schick, H. Schütze, Exploiting cloze questions for few-shot text classification and natural
language inference, CoRR abs/2001.07676 (2020). URL: https://arxiv.org/abs/2001.07676.
arXiv:2001.07676.

[4] P. Liu, W. Yuan, J. Fu, Z. Jiang, H. Hayashi, G. Neubig, Pre-train, prompt, and predict: A sys-
tematic survey of prompting methods in natural language processing, CoRR abs/2107.13586
(2021). URL: https://arxiv.org/abs/2107.13586. arXiv:2107.13586.

[5] A. Karimi, L. Rossi, A. Prati, Aeda: An easier data augmentation technique for text
classification, in: Findings of the Association for Computational Linguistics: EMNLP 2021,
2021, pp. 2748–2754.

[6] J. Devlin, M.-W. Chang, K. Lee, K. Toutanova, Bert: Pre-training of deep bidirectional

transformers for language understanding, arXiv preprint arXiv:1810.04805 (2018).

[7] R. Zwanzig, Ensemble method in the theory of irreversibility, The Journal of Chemical

Physics 33 (1960) 1338–1341.

[8] A. Inoue, L. Kilian, How useful is bagging in forecasting economic time series? a case
study of us consumer price inflation, Journal of the American Statistical Association 103
(2008) 511–522.

[9] T. Wolf, L. Debut, V. Sanh, J. Chaumond, C. Delangue, A. Moi, P. Cistac, T. Rault, R. Louf,
M. Funtowicz, J. Davison, S. Shleifer, P. von Platen, C. Ma, Y. Jernite, J. Plu, C. Xu, T. L. Scao,
S. Gugger, M. Drame, Q. Lhoest, A. M. Rush, Transformers: State-of-the-art natural lan-
guage processing, in: Proceedings of the 2020 Conference on Empirical Methods in Natural
Language Processing: System Demonstrations, Association for Computational Linguistics,
Online, 2020, pp. 38–45. URL: https://www.aclweb.org/anthology/2020.emnlp-demos.6.

[10] K. Ogundeyi, C. Yinka-Banjo, Websocket in real time application, Nigerian Journal of

Technology 38 (2019) 1010–1020.

[11] J. Forcier, P. Bissex, W. J. Chun, Python web development with Django, Addison-Wesley

Professional, 2008.

[12] J. Duckett, HTML & CSS: design and build websites, volume 15, Wiley Indianapolis, IN,

2011.

[13] J. C. S. J. Junior, Y. Güçlütürk, M. Pérez, U. Güçlü, C. Andujar, X. Baró, H. J. Escalante,
I. Guyon, M. A. Van Gerven, R. Van Lier, et al., First impressions: A survey on vision-based
apparent personality trait analysis, IEEE Transactions on Affective Computing (2019).

[14] A. Paszke, S. Gross, F. Massa, A. Lerer, J. Bradbury, G. Chanan, T. Killeen, Z. Lin,
N. Gimelshein, L. Antiga, A. Desmaison, A. Kopf, E. Yang, Z. DeVito, M. Raison, A. Tejani,
S. Chilamkurthy, B. Steiner, L. Fang, J. Bai, S. Chintala, Pytorch: An imperative style,
high-performance deep learning library, in: H. Wallach, H. Larochelle, A. Beygelzimer,
F. d'Alché-Buc, E. Fox, R. Garnett (Eds.), Advances in Neural Information Processing Sys-
tems, volume 32, Curran Associates, Inc., 2019. URL: https://proceedings.neurips.cc/paper/
2019/file/bdbca288fee7f92f2bfa9f7012727740-Paper.pdf.

