aflow++: a C++ framework for autonomous materials design

Corey Oses,1, 2 Marco Esters,1, 2 David Hicks,3, 1, 2 Simon Divilov,1, 2 Hagen Eckert,1, 2 Rico Friedrich,4, 5, 2
Michael J. Mehl,1, 2 Andriy Smolyanyuk,6, 2 Xiomara Campilongo,2 Axel van de Walle,7 Jan Schroers,8
A. Gilad Kusne,9, 10 Ichiro Takeuchi,10 Eva Zurek,11 Marco Buongiorno Nardelli,12, 13, 2
Marco Fornari,14, 2 Yoav Lederer,15, 2 Ohad Levy,1, 2, 16 Cormac Toher,17, 2 and Stefano Curtarolo1, 2, ∗

1Department of Mechanical Engineering and Materials Science, Duke University, Durham, NC 27708, USA
2Center for Autonomous Materials Design, Duke University, Durham, NC 27708, USA
3LIFT, American Lightweight Materials Manufacturing Innovation Institute, Detroit, MI 48216, USA
4Institute of Ion Beam Physics and Materials Research,
Helmholtz-Zentrum Dresden-Rossendorf, 01328 Dresden, Germany
5Theoretical Chemistry, Technische Universität Dresden, 01062 Dresden, Germany
6Institute of Solid State Physics, Technische Universität Wien, A-1040 Wien, Austria
7School of Engineering, Brown University, Providence, RI 02912, USA
8Department of Mechanical Engineering and Materials Science, Yale University, New Haven, CT 06511, USA
9Materials Measurement Science Division, National Institute of Standards and Technology, Gaithersburg, MD 20899, USA
10Department of Materials Science and Engineering,
University of Maryland, College Park, MD 20742, USA
11Department of Chemistry, State University of New York at Buﬀalo, Buﬀalo, NY 14260, USA
12Department of Physics and Department of Chemistry,
University of North Texas, Denton, TX 76203, USA
13Santa Fe Institute, Santa Fe, NM 87501, USA
14Department of Physics and Science of Advanced Materials Program,
Central Michigan University, Mount Pleasant, MI 48859, USA
15Department of Physics, NRCN, Beer-Sheva, 84190, Israel
16Department of Physics, NRCN, P.O. Box 9001, Beer-Sheva 84190, Israel
17Department of Materials Science and Engineering and Department of Chemistry and Biochemistry,
University of Texas at Dallas, Richardson, Texas 75080, USA
(Dated: August 8, 2022)

The realization of novel technological opportunities given by computational and autonomous materials design requires eﬃcient
and eﬀective frameworks. For more than two decades, aflow++ (Automatic-Flow Framework for Materials Discovery) has
provided an interconnected collection of algorithms and workﬂows to address this challenge. This article contains an overview
of the software and some of its most heavily-used functionalities, including algorithmic details, standards, and examples.
Key thrusts are highlighted: the calculation of structural, electronic, thermodynamic, and thermomechanical properties in
addition to the modeling of complex materials, such as high-entropy ceramics and bulk metallic glasses. The aflow++ software
prioritizes interoperability, minimizing the number of independent parameters and tolerances. It ensures consistency of results
across property sets — facilitating machine learning studies. The software also features various validation schemes, oﬀering
real-time quality assurance for data generated in a high-throughput fashion. Altogether, these considerations contribute to the
development of large and reliable materials databases that can ultimately deliver future materials systems.

2
2
0
2

g
u
A
5

]
i
c
s
-
l
r
t

m

.
t
a
m
-
d
n
o
c
[

1
v
2
5
0
3
0
.
8
0
2
2
:
v
i
X
r
a

∗ stefano@duke.edu

 
 
 
 
 
 
CONTENTS

I. Introduction

II. Installation and Basic Usage

III. Ab-Initio Calculations

IV. Structure Analysis

A. aflow++ Standard Cell Representations
B. aflow-SYM: The Crystal Symmetry Module
C. aflow-XtalFinder: The Crystal Prototypes Module

V. PAOFLOW Electronic Analysis

VI. Thermodynamics

A. aflow-CHULL: The Convex Hull Module
B. aflow-CCE: The Coordination Corrected Enthalpies Module

VII. Thermomechanical Analysis

A. aflow-AEL-AGL: The Automatic Elasticity and GIBBS Libraries
B. aflow-APL: The Automatic Phonon Library
C. aflow-QHA: The Quasi-Harmonic Approximation Library
D. aflow-AAPL: The Automatic Anharmonic Phonon Library

VIII. Modeling Disorder

A. aflow-POCC: The Partial-Occupation Module for Chemical Disorder
B. aflow-QCA: The Quasi-Chemical Approximation Module for Chemical Disorder
C. aflow-GFA: The Glass-Forming-Ability Module for Structural Disorder

IX. aflow-APE: The aflow++ Python Environment

X. Summary

Declaration of competing interest

Data Availability

Acknowledgments

References

2

3

4

6

8
8
9
12

16

18
18
20

23
23
25
28
30

31
31
36
37

39

40

40

40

40

40

I.

INTRODUCTION

The Automatic-Flow (aflow++) Framework for Ma-
terials Discovery is an interconnected collection of al-
gorithms and workﬂows that have been developed to
address the challenge of accelerated materials’ calcula-
tion and identiﬁcations. We clarify the diﬀerence be-
tween aflow++ and aflow.org. The subject of this article,
aflow++, is a set of codes which enables data generation,
materials discovery, analysis, identiﬁcation and optimiza-
tion. On the other hand, aflow.org is a web ecosystem of
FAIR databases, software and tools, including online ma-
chinery to analyze and download data, as well as diﬀerent
educational resources [1–3]. Many of the functionalities
of aflow.org rely on performing on-the-ﬂy aflow++ oper-
ations, facilitating a more eﬀective, reliable, and reusable
development.

The framework aflow++ comprises a comprehensive
suite of functionalities that through the years has been
successfully applied to the discovery of many new sys-
tems, e. g., permanent magnets [4, 5], superalloys [6, 7],
high-entropy carbides [8–10], and phase-change memory
compositions [11]. The framework is written in C++ (
∼
650, 000 lines as of version 3.2.12) with a growing Python
environment, and operates on UNIX architectures (GNU-
Linux, macOS). It automates the input ﬁle generation,
job submission and queue management, error correction,
analysis, storage, and dissemination of the results [1].
Workﬂows are fully parallelizable, having break-points
where independent components can be run simultane-
ously on a cluster accelerated with multi-threaded func-
tionalities. Integral to aflow++’s automation is the stan-
dardization of input parameter sets [12] and structure
prototypes [13]. The software oﬀers direct and program-
matic access to a broad range of experimentally-observed
structures [14–16] with adjustable internal degrees of
freedom, enabling the construction of virtually any con-
ceivable periodic structure. aflow++ is fully integrated

3

to work with the Vienna Ab-initio Simulation Package
(VASP) [17] and provides some support for Quantum
ESPRESSO [18], ABINIT [19], the Fritz-Haber-Institut
Ab Initio Materials Simulation Package (FHI-AIMS) [20],
the ELK Code [21], and the Alloy Theoretic Automated
Toolkit (ATAT) [22].

Historically, aflow++ started from the characteriza-
tion of inorganic intermetallic crystals, e.g., early adop-
tion in machine-learning/data-mining [23, 24] and high-
throughput [25], in line with the use of a plane-wave basis
and the generalized gradient approximation (GGA) pseu-
dopotentials of Perdew, Burke, and Ernzerhof (PBE) [26]
by default. Recently, this scope has been extended to
include i. ceramics, largely enabled by the coordination
corrected enthalpies (aflow-CCE) method [27, 28] and
ii. structurally and chemically disordered systems, facil-
itated by the creation of the thermodynamic density of
states (DOS) descriptor [3, 29] and the Glass-Forming-
Ability (aflow-GFA) [29, 30], Partial Occupation (aflow-
POCC) [31], and Quasi-Chemical Approximation (aflow-
QCA) [32] modules. Descriptors are feasibly-calculated
quantities based on microscopic features that oﬀer predic-
tive power of macroscopic properties of the material [33].
Their development and application remain at the heart
of aflow++, particularly for the prediction of thermody-
namic stability/synthesizability [34], electronic [35–37],
and thermomechanical [38–44] properties.

In this article, we highlight functionality and workﬂows
that have been developed since the original aflow++ re-
port [45] and demonstrate their interoperability within
the overall environment. Examples of their application
for the discovery of new materials are presented, pro-
viding a practical guide for future materials informatics
investigations. Through ongoing innovation and imple-
mentation of robust descriptors and workﬂows, aflow++
continues to deliver valuable solutions [46] as well as play-
ing a role in accelerating the pace of automation in the
materials community.

TABLE I. Current aflow++ tools in the standard distribution (version 3.2.12, Fall 2022). Non-C++ modules include AFLOWπ:
medium-throughput framework for Quantum ESPRESSO and the ACBN0 function [47, 48], and PAOFLOW: procedure for
projecting the full plane-wave solution on a reduced space of pseudoatomic orbitals [36, 37] as described in Section V.

Acronym

Section

Module or Library

aflow-AAPL
aflow-AEL
aflow-AGL
aflow-APE
aflow-APL
aflow-CCE
aflow-CHULL
aflow-GFA
aflow-POCC
aflow-QCA
aflow-QHA
aflow-SYM
aflow-XtalFinder

VII D
VII A
VII A
IX
VII B
VI B
VI A
VIII C
VIII A
VIII B
VII C
IV B
IV C

Automatic Anharmonic Phonon Library
Automatic Elasticity Library
Automatic GIBBS Library
AFLOW Python Environment
Automatic Phonon Library
Coordination Corrected Enthalpies Module
Convex Hull Module
Glass-Forming-Ability Module
Partial Occupation Module
Quasi-Chemical Approximation Module
Quasi-Harmonic Approximation Library
Symmetry Module
Crystal Finder Module

Refs.

[44]
[39]
[38]
[13, 28, 34, 49]
[41]
[27, 28]
[34]
[29, 30]
[31]
[32]
[42, 43, 50]
[49]
[13]

II.

INSTALLATION AND BASIC USAGE

Installation. aflow++ was built to run on UNIX-based
platforms and thus natively runs on Linux and macOS.
It can be compiled from its monolithic source using the
provided Makeﬁle and without having to conﬁgure other
libraries. The location of the executable can then be
added to the $PATH variable to make it available every-
where for the user. Windows, on the other hand, cannot
directly run aflow++ because of its diﬀerent architecture
and system APIs. Short of setting up a virtual machine
running Linux, Windows users can compile aflow++ on
the Windows Subsystem for Linux (WSL), which provides
a GNU/Linux environment for multiple popular distribu-
tions, including Ubuntu and Debian [51] [52].

To increase portability across platforms, compiling
from source is a viable option [53]. Users with lim-
ited command-line experience, can beneﬁt from an au-
tomated installation script (install-aflow.sh). It sup-
ports many Linux distributions (including Ubuntu and
Debian for the WSL), macOS, and Cygwin [54]. It can
be downloaded at aﬂow.org/install-aﬂow. [55] The script
automatically installs the dependencies needed to com-
pile and run all features of aflow++. This includes exter-
nal packages required for graphics. It then compiles the
aflow++ source code and adds it to the $PATH variable
so that the executable aflow can be used after the ter-
minal is restarted. It can also install aflow++’s Python
wrappers inside a virtual environment using the --venv
option.

Some features of the installation can be customized.
By default, dependencies for all aflow++ features are in-
stalled, which includes pdflatex used in some modules.
These plotting packages require considerable disk space,
and often cannot be installed by individual users on a
shared system. They can be skipped entirely by execut-
ing the script as:

install-aflow.sh --slim

Other opportunities to customize the installation in-
clude selecting the location of the aflow++ binary by
using the option --ULB=path , where path is the de-
sired path for the aflow++ binary. Similarly, the loca-
tion of the aflow++ source directory and the installed
virtual environment can be set by using --AWD=path and
--venv=path , respectively.
The aflow.rc conﬁguration ﬁle. The aflow.rc is the
conﬁguration ﬁle deﬁning the default settings for run-
ning within the aflow++ environment. The ﬁle emulates
the bashrc script that runs when initializing an inter-
active environment in bash (Bourne again shell). The
ﬁle is read upon running the aflow binary, with settings
that can be overridden by ﬂags passed through the com-
mand line or those set in the aflow.in ﬁle, allowing for
calculation-speciﬁc customization. Upon running aflow,
a fresh aflow.rc ﬁle is created in $HOME if one is not
already present. Just like the bashrc ﬁle, the aflow.rc

4

ﬁle is hidden (i.e., $HOME /.aflow.rc).

Tunable settings include the compression algorithm,
output ﬁle names, MPI settings, paths for binaries,
databases, module-speciﬁc settings, and machine set-
tings. Users of VASP might consider conﬁguring the fol-
lowing settings for their machine:

// DEFAULT GENERIC MPI
MPI_START_DEFAULT="ulimit -s unlimited"
MPI_STOP_DEFAULT=""
MPI_COMMAND_DEFAULT="mpirun -np"
MPI_NCPUS_DEFAULT=4
MPI_NCPUS_MAX=4

// DEFAULTS BINARY
DEFAULT_VASP_BIN="vasp46s"
DEFAULT_VASP_MPI_BIN="mpivasp46s"
DEFAULT_VASP5_BIN="vasp_std"
DEFAULT_VASP5_MPI_BIN="vasp_std"

// DEFAULTS POTCARS
DEFAULT_VASP_POTCAR_DIRECTORIES="~/src/vasp,/home/Tools/

,→ src/vasp"

DEFAULT_VASP_POTCAR_DATE="current"
DEFAULT_VASP_POTCAR_SUFFIX="/POTCAR"
DEFAULT_VASP_POTCAR_DIR_POT_LDA="pot_LDA"
DEFAULT_VASP_POTCAR_DIR_POT_GGA="pot_GGA"
DEFAULT_VASP_POTCAR_DIR_POT_PBE="pot_PBE"
DEFAULT_VASP_POTCAR_DIR_POTPAW_LDA="potpaw_LDA"
DEFAULT_VASP_POTCAR_DIR_POTPAW_GGA="potpaw_GGA"
DEFAULT_VASP_POTCAR_DIR_POTPAW_PBE="potpaw_PBE"
DEFAULT_VASP_POTCAR_DIR_POTPAW_LDA_KIN="potpaw_LDA.54"
DEFAULT_VASP_POTCAR_DIR_POTPAW_PBE_KIN="potpaw_PBE.54"

and

and

MPI_NCPUS_MAX

MPI_STOP_DEFAULT

MPI_COMMAND_DEFAULT

are
MPI_START_DEFAULT
the MPI pro-
commands to run before and after
gram.
For example, running ulimit -s unlimited
allows VASP to access as much stack memory as
MPI_COMMAND_DEFAULT together with
it needs.
deﬁne
MPI_NCPUS_DEFAULT
e.g.,
the MPI portion of
the VASP command,
over-
mpirun -np 4.
is
ridden in the aflow.in with the
following set-
ting:
[AFLOW_MODE_MPI_MODE]COMMAND=“mpirun
MPI_NCPUS_DEFAULT is chosen if no over-
-np”.
the
riding NCPUS option is provided on either
line
in
(aflow --run --ncpus=8)
or
command
([AFLOW_MODE_MPI_MODE]NCPUS=8),
the
aflow.in
chosen if
the maximum
and MPI_NCPUS_MAX
the
via
requested
of
number
com-
the
in
or
line
mand
aflow.in
([AFLOW_MODE_MPI_MODE]NCPUS=MAX).

cores
(--ncpus=max)

is
are

is

are

and MPI variants

The VASP binary name

speciﬁed with the
DEFAULT_VASP_BIN variable, with corresponding se-
rial and MPI variants (DEFAULT_VASP_MPI_BIN). The
serial
overridden in the
aflow.in with [AFLOW_MODE_BINARY=vasp46s] and
[AFLOW_MODE_MPI_MODE]BINARY=“mpivasp46s”, respec-
tively. The default can be either a VASP4 or VASP5 bi-
nary. There are some cases where the VASP5 binary is
required by the workﬂow (e.g., calculation of force con-
stants using linear-response or to determine longitudinal
optic - transverse optical (LO-TO) lattice vibration split-

ting). aflow++ tries to determine the VASP version au-
tomatically and, for these cases, changes the settings and
formats to run with VASP5 (DEFAULT_VASP5_BIN serial
and MPI variants). These binaries should be made ac-
cessible in the environment of the compute-node through
the $PATH . Together with the MPI settings, these vari-
ables deﬁne the full MPI VASP command to be executed
by aflow++:

mpirun -np 4 mpivasp46s > vasp.out

This can be checked in the calculation’s LOCK ﬁle, looking
for the line that starts with:

00000 MESSAGE Executing:

command

Proper organization of the pseudopotential ﬁles is crit-
ical for enabling aflow++ to employ them automatically.
aflow++ breaks the subdirectory structure into diﬀerent
variables.
For example, the following path /home/
Tools/src/vasp/potpaw_PBE/current/Mn_pv/POTCAR
can be constructed to ﬁnd the manganese pseudopoten-
tial ﬁle calculated with the PBE functional [26] using
the projector-augmented-wave formalism (PAW) [56].
comma-
DEFAULT_VASP_POTCAR_DIRECTORIES
separated list of paths to check for the pseudopotential
ﬁles.
It resembles the $PATH environment variable in
that it will check each path sequential until a match
is found.
formalization, and
components are speciﬁed in the aflow.in:

The level of theory,

is

a

[VASP_FORCE_OPTION]AUTO_PSEUDOPOTENTIALS=mode
[VASP_POTCAR_MODE_IMPLICIT]
[VASP_POTCAR_FILE]Mn

can be

following:

the
potpaw_GGA,

any of
potpaw_LDA,

pot_LDA,
mode
pot_GGA,
potpaw_PBE,
potpaw_LDA_KIN, potpaw_PBE_KIN, where LDA refers
to the local density approximation, and the KIN
variants refer to the pseudopotentials released with
VASP5.4 that include information on the kinetic energy
density of the core-electrons. The mode chosen corre-
sponds to one of the pseudopotential subdirectories:
DEFAULT_VASP_POTCAR_DIR_MODE . The pv suﬃx in
Mn_pv refers to the treatment of p semi-core states as
valence states, as speciﬁed in the VASP Wiki: vasp.
at/wiki/index.php/Available_PAW_potentials. The
selection of the right pseudopotential ﬁle can be checked
in the calculation’s LOCK ﬁle, looking for the line that
starts with:

00000 MESSAGE POTCAR FILE: Found potcar FilePotcar=path

To keep track of diﬀerent pseudopotentials released with
new versions of VASP, aflow++ identiﬁes each reference
with its MD5 hash [12, 57] and appends this information
to the bottom of the aflow.in:

5

aflow++ by decorating prototype structures with diﬀer-
ent elements. The command-line syntax to generate pro-
totypes is:

aflow --proto=label.ordering:elements --params=parameters

where label is the prototype designation (or alias) and
parameters are the comma-separated degrees of freedom
for the prototype. elements is a colon-separated list of
elements in alphabetical order decorating the structure
(e.g., Ag:C:Cu). By default, the structure is decorated
with ﬁctitious atoms (i.e., A, B, C, D, . . .). ordering
speciﬁes the site decoration (e.g., ABC vs. BAC), where the
placement of the letter corresponds to the site on the pro-
totype and the letter corresponds to the alphabetically-
ordered elements .

the
There are two prototype libraries in aflow++:
High-Throughput Quantum Computing (HTQC)
li-
brary [45] and the aflow++ Prototype Encyclopedia [14–
16]. HTQC prototypes are hard-coded structures that
do not require any degrees of freedom to be speciﬁed,
and whose labels are largely ad hoc e.g., 201 and T0001
denote the rocksalt and Heusler structures, respectively.
An example command to generate an HTQC structure is:

aflow --proto=201:Cl:Na

For Prototype Encyclopedia prototypes [14–16], the la-
bel — or aflow++ prototype label — is an underscore-
delimited string describing the symmetry of a crystal
structure. For example, corundum has the prototype la-
bel A2B3_hR10_167_c_e-001, where:
• the ﬁrst ﬁeld indicates the reduced stoichiometry

(A2B3),

• the second ﬁeld indicates the Pearson symbol (hR10),
• the third ﬁeld indicates the space group number (167),
• the fourth ﬁeld indicates the Wyckoﬀ letters associated

with species A (c),

• the ﬁfth ﬁeld indicates the Wyckoﬀ letters associated

with species B (e), and

• the sixth ﬁeld indicates the alias for the corundum
parameters-set extracted and generalized by aflow-
XtalFinder (001).

In addition to the prototype label, aflow-XtalFinder de-
termines the lattice and Wyckoﬀ parameters that are not
ﬁxed by symmetry and returns their values for the par-
ticular geometry. For corundum, these degrees of free-
dom are lattice parameters a and c/a and Wyckoﬀ co-
ordinates x1 and x2 in direct/fractional space: 4.7607,
2.7296, 0.3522, and 0.5561, respectively, for Al2O3. This
structure can be generated with the parameters provided
explicitly:

aflow --proto=A2B3_hR10_167_c_e:Al:O --params

,→ =4.7607,2.7296,0.3522,0.5561

or using the 001 alias:

[VASP_POTCAR_AUID]99be850476e2dfb3

aflow --proto=A2B3_hR10_167_c_e-001:Al:O

Generating geometry ﬁles. Geometry ﬁles for crys-
talline materials can be automatically generated with

Options speciﬁc to the Prototype Encyclopedia proto-
types include:

• --add_equations : The symbolic version of the geom-
etry ﬁle (in terms of the variable degrees of freedom)
is printed after the numeric geometry ﬁle.

• --equations_only : Only prints the symbolic version
of the geometry ﬁle (in terms of the variable degrees
of freedom).
aflow++ can read and generate geometry ﬁles
(GEOM_FILE ) in diﬀerent ﬁle formats: VASP [58], Quan-
tum ESPRESSO [59], FHI-AIMS [20], ABINIT [19],
ELK [21], and the Crystallographic Information File
(CIF) [60].
In the following sections, the variable
GEOM_FILE can be replaced with ﬁles of any name having
any of the aforementioned formats; aflow++ will detect
their type and process them automatically. To convert
between formats, use the following commands, respec-
tively: --vasp, --qe, --aims, --abinit, --elk, and
--cif. For example:

aflow --qe < POSCAR

Note, aflow++ functions are generally overloaded to read
inputs from the input stream, enabling commands to be
compounded via bash’s pipe. For example:

aflow --proto=A2B3_hR10_167_c_e-001:Al:O | aflow --sconv

,→ | aflow --aflowSG

will create the geometry ﬁle for corundum, convert it to
the aflow++ Standard Conventional representation [35],
and calculate its space group [49].
The aflow.in input ﬁle. Calculations performed by
aflow++ are controlled via the aflow.in ﬁle, contain-
ing directives to create and run ensembles of density
functional theory (DFT) calculations with VASP for the
analysis of materials’ structural, electronic, thermal, and
elastic properties. For a given calculation workﬂow, op-
tions can be speciﬁed to control: i. the symmetry anal-
yses of the input geometry, ii. type and order of VASP
calculations, iii. schemes ﬁxing VASP errors (and sub-
sequent calculation resubmission), and iv. results anal-
ysis. Depending on the calculation, VASP input ﬁles
are generated and organized automatically by aflow++,
namely the POSCAR (lattice vectors and atomic positions),
INCAR (VASP settings), KPOINTS (k-point grid informa-
tion), and POTCAR (pseudopotential information). The
aflow.in ﬁle enables high-throughput calculations of
material properties in a consistent and repeatable man-
ner, expanding the breadth of materials in the aflow.org
repositories.

In general, the aflow.in ﬁle includes the required ma-
chine/compute settings and VASP setup for the calcula-
tions. A summary of the speciﬁc content in the aflow.in
ﬁle is as follows. First, the system name is given at
the top of the ﬁle, usually consisting of a string con-
taining the elements, associated pseudopotential designa-
tion, and prototype structure. Next, settings to perform
the VASP calculation are given, namely the VASP binary
name/location, number of computing resources (compute
cores/nodes), message passing interface (MPI) settings
for calculation parallelization, and commands to launch

6

the VASP application (e.g., mpirun and aprun). These
machine settings are followed by the options for the var-
ious aflow++ submodules to calculate diﬀerent material
properties, including:
• crystallographic symmetry (aflow-SYM),
• phonons via the harmonic approximation (aflow-

the

quasi-harmonic

approximation

APL),
• phonons

via
(aflow-QHA),

• anharmonic phonons (aflow-AAPL), and
• thermomechanical properties (aflow-AEL-AGL).

aflow.in ﬁles can be created automatically, generally
by converting the aforementioned --proto commands
into --aflow_proto commands. For example:

aflow --aflow_proto=A2B3_hR10_167_c_e-001:Al:O

will generate an aflow.in within the following directory
structure (to avoid writing collisions): AFLOWDATA/AlO/
A2B3_hR10_167_c_e-001.AB The ﬁrst layer, AFLOWDATA,
is the general container for automatically generated
aflow.in ﬁles. The second layer speciﬁes the chem-
istry (species), and the third speciﬁes the structure (pro-
totype). The default parameters written inside this
automatically-generated aflow.in are controlled by the
aflow.rc and command-line options. More information
can be found under the --aflow_proto command in the
following README:

aflow --readme=aconvasp

III. AB-INITIO CALCULATIONS

Ab-initio structure-energy calculations remain by far
the most time- and resource-intensive component of
aflow++’s workﬂows. As such, substantial eﬀorts have
been devoted to integrating with VASP, the default ab-
initio software employed by aflow++. VASP oﬀers well-
tuned default settings, especially for their pseudopoten-
tials [61], that ensure fast convergence and high accu-
racy of results without much need for additional cus-
tomization.
aflow++ also provides support for other
ab-initio software and frameworks used in the commu-
nity, especially for structure characterization and manip-
ulation. Beyond this dedicated functionality, aflow++’s
alien mode enables the execution of any binary in high-
throughput fashion [45].

The full documentation for running automated ab-
initio calculations with aflow++, including parameter-
tuning and error-handling, can be found in the aflow++
README:

aflow --readme=aflow
Standard calculation types and protocols. aflow++
oﬀers three basic run schemes for ab-initio calcula-
tions with VASP: RELAX, STATIC, and BANDS. By de-
fault, two relaxations are performed to ensure struc-
tural convergence, which is speciﬁed in the aflow.in

with [VASP_RUN]RELAX=2. To incorporate a STATIC and
BANDS run into the workﬂow, the setting should be mod-
iﬁed to [VASP_RUN]RELAX_STATIC_BANDS=2. The run
schemes are described below.
• A RELAX run optimizes the geometry of the struc-
ture — either by minimizing the energy (default set-
ting) or the forces (changed in the aflow.in with
[VASP_FORCE_OPTION]RELAX_MODE=FORCES) — while
trying to converge the electronic charge density at
each structure-snapshot. Convergence of the electronic
charge density is facilitated by smearing techniques
(ISMEAR and SIGMA in VASP [62]) allowing partial oc-
cupancy of orbitals at the Fermi edge, controlled in the
aflow.in by [VASP_FORCE_OPTION]TYPE=DEFAULT,
which also takes values of METAL and INSULATOR. For
high-throughput calculations, the material assumes
the parameters of a metal as the default: using the
method of Methfessel-Paxton with ﬁrst order correc-
tions [63] and a width of 0.1 eV. This sets the following
parameters in the INCAR:

ISMEAR=1
SIGMA=0.1

Within the aflow++ workﬂow, the components of the
stress tensor are checked after the ﬁnal relaxation; if
any are in excess of 10 kB, the calculations are au-
tomatically rerun with increased precision and cut-
oﬀs for the plane-wave basis set [64]. As a standard,
aflow++ runs spin-polarized calculations with initial
magnetic moments for all atoms set to 1.0 µB/atom;
a good default if the magnetic properties of the sys-
tem are unknown. Spin-polarization is turned oﬀ to
reduce computational resources if the magnetization
resulting from the second relaxation is found to be be-
low 0.05 µB/atom. These settings are found in the
aflow.in:

[VASP_FORCE_OPTION]SPIN=ON,REMOVE_RELAX_2
#[VASP_FORCE_OPTION]AUTO_MAGMOM=ON

[VASP_FORCE_OPTION]AUTO_MAGMOM=ON would change
the initial magnetic moments from 1.0 to 5.0 µB/atom,
and is turned oﬀ (commented out) by default. To
change how these settings are written with the auto-
matic generation of aflow.in ﬁles, the following vari-
ables should be tuned in the aflow.rc:

DEFAULT_VASP_FORCE_OPTION_SPIN=1
DEFAULT_VASP_FORCE_OPTION_SPIN_REMOVE_RELAX_1=0
DEFAULT_VASP_FORCE_OPTION_SPIN_REMOVE_RELAX_2=1
DEFAULT_VASP_SPIN_REMOVE_CUTOFF=0.05
DEFAULT_VASP_FORCE_OPTION_AUTO_MAGMOM=0

• A STATIC run converges the electronic charge density
of a ﬁxed geometry with settings that ensure a high-
resolution calculation of the total energy and electronic
DOS. This is accomplished by running with a high k-
point density and performing Brillouin-zone integra-
tions with the tetrahedron method with Blöchl correc-
tions [65] as a default. The k-point density is controlled

7

by the k-points per reciprocal atom (KPPRA) [12] pa-
rameter, deﬁning a grid size that scales inversely with
the number of atoms. The parameter can be adjusted
in the aflow.in:

[VASP_KPOINTS_FILE]STATIC_KPPRA=10000

• A BANDS run uses the well-converged electronic charge
density from the STATIC run and calculates the en-
ergy levels along the aflow++ standard k-paths to re-
solve the full electronic band structure and associated
properties, such as the band gap. Standard semi-local
DFT (with, e.g., the PBE functional) tends to underes-
timate the band gap [48, 66], an issue that is addressed
in aflow++ with the DFT+U approach based on the
formulations developed by Liechtenstein [67] and Du-
radev [68]. The relevant aflow.in parameters are:

[VASP_FORCE_OPTION]LDAU2=ON
[VASP_FORCE_OPTION]LDAU_PARAMETERS=Ga,Sb;2,-1;3.9,0;0,0

as

developed

or Duradev

formulation
(i =1)

[VASP_FORCE_OPTION]LDAUi =ON
by

chooses
where
Liecht-
the
default).
enstein
(i =2;
a
is
[VASP_FORCE_OPTION]LDAU_PARAMETERS
semicolon-separated string of DFT+U on-site interac-
tion parameters for each species (comma-separated),
namely the l-quantum number and the strengths
of the eﬀective Coulomb (U ) and exchange (J)
interactions [62]. Note the values for Sb for which no
DFT+U corrections will be applied: -1, 0, 0. The
aforementioned aflow.in parameters would generate
the following lines in the INCAR:

LDAU=.TRUE.
#LDAU_SPECIES=Ga Sb
LDAUL=2 0
LDAUU=3.9 0
LDAUJ=0 0
LDAUTYPE=2
LMAXMIX=4

several
systems have been
The parameters
for
the aflow++ standard [12,
deﬁned as part of
35].
For alloys having DFT+U parameters, an
aflow.in will automatically be generated with
[VASP_FORCE_OPTION]LDAU2=ON. To turn oﬀ this be-
havior, add --noldau to the --aflow_proto com-
mand.

The default parameters for these run schemes, including
convergence tolerances, grid densities, and pseudopoten-
tial choices, have been deﬁned as part of the aflow++
standard detailed in Ref. 12. These include:
i. a
VASP precision set to the highest pre-deﬁned setting [62]
([VASP_FORCE_OPTION]PREC=ACCURATE in the aflow.in,
DEFAULT_VASP_FORCE_OPTION_PREC_SCHEME=ACCURATE
in the aflow.rc),
ii. a plane-wave basis cutoﬀ in-
creased by a factor of 1.4 above that set by VASP [62]
the
([VASP_FORCE_OPTION]ENMAX_MULTIPLY=1.4
aflow.in,
DEFAULT_VASP_PREC_ENMAX_ACCURATE=1.4
in the aflow.rc), and iii. the stable Davidson blocked
scheme for diagonalizing the Hamiltonian [69, 70]

in

([VASP_FORCE_OPTION]ALGO=NORMAL in the aflow.in,
DEFAULT_VASP_FORCE_OPTION_ALGO_SCHEME=NORMAL in
the aflow.rc). As demonstrated, settings are highly
tunable through a combination of the aflow.in and
aflow.rc ﬁles. In addition to the [VASP_FORCE_OPTION]
keys, the aflow.in oﬀers explicit and implicit control of
VASP input ﬁles. For example,

[VASP_INCAR_MODE_EXPLICIT]START
SYSTEM=Ga_hGe_h.11
PSTRESS=000 # for hand modification
#NBANDS=XX # for hand modification
#IALGO=48 # for hand modification
[VASP_INCAR_MODE_EXPLICIT]STOP
[AFLOW] ***************************
[VASP_KPOINTS_MODE_IMPLICIT]
[VASP_KPOINTS_FILE]KSCHEME=M
[VASP_KPOINTS_FILE]KPPRA=6000
[VASP_KPOINTS_FILE]STATIC_KSCHEME=M
[VASP_KPOINTS_FILE]STATIC_KPPRA=10000
[VASP_KPOINTS_FILE]BANDS_LATTICE=AUTO
[VASP_KPOINTS_FILE]BANDS_GRID=20

the

into

that

control

settings,

creation of

injection of

allows
INCAR,
a

[VASP_FORCE_OPTION]

[VASP_INCAR_MODE_EXPLICIT]
the
content
deﬁnes

di-
where
and
rect
names-
[VASP_KPOINTS_MODE_IMPLICIT]
the
pace
of keys
These settings are generally over-
KPOINTS ﬁles.
unless
ridden by
[VASP_FORCE_OPTION]NOTUNE is provided (and uncom-
mented).
Error-handling. aflow++ oﬀers automatic VASP error
detection and correction, with various treatment routes
accessible depending on the errors and the order in which
they are encountered. aflow++ is eﬃcient in its appli-
cation of the corrections, only applying the ones that
have not been tried before or would conﬂict with pre-
vious ones. Treatments include modiﬁcations of the
diagonalization algorithm, precision, k-points grid and
scheme, and rescaling of the atomic distances during
relaxations. Errors are detected in the vasp.out ﬁle
(VASP’s standard output) and corrections are docu-
mented in the LOCK ﬁle. The treatments and order in
which they are applied have been heavily tested and op-
timized to minimize the need of human intervention. In
the event that aflow++ over-corrects, the following com-
mand can be added to the aflow.in:

[VASP_FORCE_OPTION]IGNORE_AFIX=ERROR:DENTET,FIX:ALGO=FAST

which will ignore VASP’s DENTET error and not apply any
treatment which includes changing the algorithm to the
FAST preset [62]. The full list of errors detected and treat-
ments available can be found under the IGNORE_AFIX sec-
tion of the aflow++ README:
aflow --readme=aflow

8

IV. STRUCTURE ANALYSIS

A.

aflow++ Standard Cell Representations

Determination of a standard cell representation is essen-
tial to an autonomous workﬂow, and is usually the ﬁrst
step. aflow++ employs the standard primitive and stan-
dard conventional cells as deﬁned in Ref. 35.
Standard primitive cell. The aflow++ standard prim-
itive representations for all Bravais lattices have been
constructed to have corresponding Minkowski-reduced
lattices in the reciprocal space, ensuring both speed
and convergence of electronic structure calculations using
plane-wave bases [71, 72]. Such a lattice is guaranteed to
be composed of the three smallest linearly-independent
vectors — and is thus maximally compact — and have a
bounded orthogonality defect, where an orthogonal basis
has a defect of zero. The orthogonality defect is associ-
ated with the loss of completeness of a truncated plane-
wave basis, needing more plane-wave terms (and compu-
tational resources) to reach the required accuracy. Note
that in the search for the most primitive lattice, vectors
deﬁned by the atomic basis are considered, so the shape
of the lattice may change in such a way that the sym-
metry of the crystal is still preserved [49]. A structure
can be converted to the aflow++ standard primitive rep-
resentation with the following command:

aflow --sprim < GEOM_FILE

Standard conventional cell. The aflow++ standard
conventional representations for all Bravais lattices have
been constructed to highlight symmetry properties of
the lattices (e.g., deﬁning lattice vectors along important
symmetry directions). A structure can be converted to
the aflow++ conventional primitive representation with
the following command:

aflow --sconv < GEOM_FILE

Many aflow++ standard conventional representations
match with those deﬁned in the International Tables for
Crystallography (ITC) [73], with others making use of dif-
ferent, equally-valid choices; such is the case for the mon-
oclinic system. Since the Wyckoﬀ positions are standard-
ized with respect to the ITC conventional cells, aflow++
is also able to generate structures in the ITC representa-
tion with the following command:

aflow --itc < GEOM_FILE

where the --itc ﬂag can be appended with other output
formats, e.g.,

aflow --itc --qe < GEOM_FILE

to convert the structure to the Quantum ESPRESSO
geometry format.

By default, aflow++ will convert structures to the
aflow++ standard primitive representation before run-

ning an ab-initio calculation. This setting is controlled
with the following line in the aflow.in:

[VASP_FORCE_OPTION]CONVERT_UNIT_CELL=SPRIM

which also takes SCONV (aflow++ conventional represen-
tation), NIGGLI (Niggli standard form [74, 75]), MINK
(Minkowski-reduced lattice), INCELL (moving atoms in-
side the inequivalent unit cell), COMPACT (moving atoms
to reduce distance between them and expose bonds), WS
(Wigner-Seitz cell), CART/FRAC (Cartesian/direct coordi-
nates), PRES (no modiﬁcation of input structure). The
aflow++ standard conventional representation has been
useful for phonon calculations (via ﬁnite-displacement),
achieving more spherical supercells that include more full
coordination shells while keeping cell sizes as small as
possible (see Section VII B) [41].

B.

aflow-SYM: The Crystal Symmetry Module

x

Identifying crystallographic symmetries. To iden-
tify the isometries of a crystal structure, candidate sym-
metries are applied to the atomic positions in the unit cell
). A structure exhibits that symmetry if all trans-
(
}
{
formed atomic positions (
) map one-to-one
xtransformed
}
with the original positions (
). In general, the
xoriginal
}
{
transformed and original atomic positions will: i. match
exactly (ideal mapping), ii. signiﬁcantly diﬀer (no map-
ping), or iii. slightly diﬀer (possible mapping) (depicted
in Fig. 1(a)). To determine whether the transformed and
original atoms map, a threshold, (cid:15)sym, is employed:

{

xorig

xtransformed

(cid:15)sym,

x

x

.

}

||

∀

−

∈ {

|| ≤
For crystals, atom mappings in periodic systems are
considered via the method of images [76]. However, de-
termination of the minimum distance — required to iden-
tify the correct one-to-one mappings — is often com-
putationally expensive in Cartesian (Euclidean) space.
Algorithms to minimize distances in fractional (direct,
non-Euclidean) space are generally faster; however, in-
correct minimum distances (mappings) are possible since
the metric tensor in this space is not uniform. The prob-
lem is exacerbated in systems with skewed lattices; e.g.,
a triclinic lattice (α
= 90◦) in Cartesian co-
= γ
ordinates will be converted to a unit cube in fractional
coordinates, warping the space (as shown in Fig. 1(b)).
To determine the impact of the warping, the aflow-SYM
module compares the lattice skewness and minimum in-
teratomic distance in Cartesian space dnn,min
to the sym-
metry tolerance:

= β

c

(cid:15)max

[1

−

≡

max (cosα, cosβ, cosγ)] dnn,min

c

.

If (cid:15)sym is below (cid:15)max, the minimum distance algorithm
in fractional space (faster) should yield the correct map-
pings. Above this value, the warping may yield incorrect
mappings and the slower, but more reliable minimiza-
tion in Cartesian space is required. This heuristic was

9

= dnn,min
c

/100 (default) and (cid:15)loose
sym

validated for the more than 3.5 million entries in the
aflow.org repositories at the time of writing.
Symmetry tolerance. To alleviate the burden of iden-
tifying suitable symmetry tolerances, aflow++ oﬀers two
preset values: (cid:15)tight
=
sym
/10. These presets can be used in any of the sym-
dnn,min
c
metry commands by appending =tight or =loose to any
of the symmetry commands, respectively (see the aflow-
SYM README for examples). Since the tolerance thresh-
olds are based on the minimum interatomic distance in
the crystal, they are system-speciﬁc and generally more
consistent with experimental space group determinations
(see the Validation with experiments subsection). Alter-
natively, users can input their own numerical tolerance
values, as long as they are below the minimum inter-
atomic distance in the crystal.

±

Additionally, to ensure consistent symmetry descrip-
tors for a wide range of tolerance values, aflow-SYM em-
ploys an adaptive tolerance scan (Fig. 1(c)). Namely,
aflow-SYM checks that descriptors are commensurate
with group theory and crystallographic conventions (see
Ref. 49 for details). If the checks fail at a particular tol-
erance value ((cid:15)0), aflow-SYM will perform a radial toler-
increments around the initial value)
ance scan (i.e., in
and recalculate the symmetries at new values ((cid:15)new). The
process continues until consistent symmetry is found at
a new tolerance value. This procedure reduces errors be-
tween symmetry descriptions and mitigates the need for
users to tune tolerances to obtain accurate results.
Symmetry calculator. aflow-SYM identiﬁes the en-
tire symmetry proﬁle of a crystal in any arbitrary unit
cell representation. These routines determine all crystal-
lographic symmetry groups aﬀorded by group theory in
both real and reciprocal spaces.
In particular, the fol-
lowing groups are calculated: point groups (real lattice,
reciprocal lattice, Patterson, and atom-centered), factor
group representatives (unit cell), and space groups. The
diﬀerent symmetry groups and their aflow++ aliases (in
parentheses) include:
• Lattice point group (pgroup): Describes the point
inversion, and roto-

group symmetry (rotations,
inversions) of the lattice points.

• Reciprocal lattice point group (pgroupk): Describes
the point group symmetry (rotations, inversion, and
roto-inversions) of the reciprocal lattice (i.e., Brillouin
zone).

• Crystallographic point group (pgroup_xtal): De-
scribes the point group symmetry of the lattice
faces [73, 77].

• Dual

of

the

group
crystallographic
(pgroupk_xtal): Describes the point group sym-
metry of the dual of the crystallographic point group
(i.e., irreducible Brillouin zone).

point

• Patterson point group (pgroupk_Patterson): De-
scribes the Patterson point group symmetry in recip-
rocal space, i.e., symmetry of the inter-atomic vectors.
• Factor group representative (fgroup): Describes the
rotations, inversion, roto-inversions, screws, and glides

6
6
6
10

FIG. 1. Overview of aflow-SYM functionality and example of high-accuracy results. (a) A schematic highlighting
how a symmetry element is tested on an arrangement of atoms. Outcomes of mapping the original atomic positions (solid circles)
to their transformed counterparts (hollow circles) are grouped into the following categories: atom positions exactly map (left),
atoms positions map within a tolerance (cid:15) (middle), or some/all of the atomic positions are not mapped (right). (b) Examples
are showing how distances and tolerances change between Cartesian and fractional coordinates. aflow-SYM considers lattice
skewness in its mapping procedure to ensure it is correct regardless of the coordinate system. (c) An illustration of the diﬀerent
space groups found during a tolerance scan. (d) Results from a benchmark study, highlighting the accuracy of space groups
calculated with diﬀerent software packages compared to experiment (information provided by the Inorganic Crystal Structure
Database). aflow-SYM has the fewest mismatches with experiment (best accuracy) across all 14 Bravais lattice types.

of the unit cell. Note, the factor group representa-
tive itself is not a group: the closure axiom is vio-
lated since the lattice translations are not present in
the group [78].

• Space group (sgroup): Describes the rotations,

in-
version, roto-inversion, screws, and glides of the en-
tire periodic crystal. Since the space group represents
the symmetry of an inﬁnite object, a ﬁnite number of
space group operations are calculated in aflow-SYM
(see Ref. 49 for details).

• Atom-site point group (agroup): Describes the point
group symmetry centered on each atom in the unit
cell. To make the calculation more eﬃcient, aflow-
SYM only calculates the atom point group opera-
tions for symmetrically-inequivalent atoms and trans-
forms them for the other atoms. The symmetrically-
equivalent atoms are grouped into an iatoms object
(analogous to Wyckoﬀ positions).

Note that the Patterson point group is a new addition

featured after the original publication of Ref. 49. All
the aforementioned symmetry groups are guaranteed to
be commensurate with crystallographic conventions due
to a variety of consistency checks implemented into the
routines. Any discrepancies initiate the adaptive toler-
ance scheme to change the symmetry tolerance ((cid:15)sym)
and recalculate all symmetry groups until consistency is
achieved.
All crystallographic
Symmetry representations.
symmetry representations are categorized as either a
i. translation, ii. ﬁxed-point (rotations, inversion, and
roto-inversions), or iii. ﬁxed-point free (screws and
glides) operations. For each of these symmetry elements,
aflow-SYM provides multiple representations to cater to
diﬀerent applications. Translations are represented as
1 vectors, ﬁxed-point operations are represented as
3
3
3 matrices, and ﬁxed-point free elements are a com-
bination of the two. All of these symmetry elements are
returned in both Cartesian and fractional (direct) coor-

×
×

✏01.00.5mclSG: #11 orcSG #59 rhlSG #166 fccSG #225 0.3ab0.1✏0✏newbcaidentifying symmetry elementsself-consistent tolerance scanconsistency with experimentsmappings in non-uniform metric spacesd✓mapped✕not mapped✓mapped with radius-✏4-fold rotation (90o)cartesian✓ˆnmdmincedminffractionallatticeskewness minimumdistancesdinate systems.

×

×

×

×

2 complex matrix).

aflow-SYM provides additional representations for
pure rotations, comprising the SO(3) Lie group [79], in-
cluding the axis-angle representation, matrix generator
(so(3), Lie algebra), quaternion (4
1
4 matrix and 4
matrix), SU (2) Lie group (2
2 complex matrix), and
su(2) Lie algebra (2
Consistency with the ITC. In addition to determin-
ing the symmetry of any arbitrary unit cell, aflow-SYM
determines the space group symmetry and Wyckoﬀ posi-
tions, commensurate with the ITC [73]. From this analy-
sis, aflow-SYM determines the space group number, In-
ternational (Hermann-Mauguin) designation, Schoenﬂies
designation, and Hall symbol. Furthermore, aflow-SYM
identiﬁes the symmetrically-equivalent atomic positions
— or Wyckoﬀ positions — and returns the correspond-
ing Wyckoﬀ letter designation, multiplicity, site symme-
try, and representative Wyckoﬀ coordinate. Space groups
can also be converted into special space group settings or
unit cell choices for monoclinic, rhombohedral, and cen-
trosymmetric space groups. Namely, conventional cells
and Wyckoﬀ positions can be represented via i. unique
axis b or c for monoclinic space groups, ii. rhombohedral
or hexagonal unit cells, or iii. origins centered on inver-
sion sites or other high-symmetry sites for centrosym-
metric space groups. Lastly, since the choice of Wyckoﬀ
positions can diﬀer with lattice and/or origin choices,
aflow-SYM prefers the Wyckoﬀ sequence with the small-
est enumerated Wyckoﬀ lettering.
Crystal-spin symmetry. The magnetic moment (spin)
associated with each atom in a crystal can impact the
properties of a crystal. Thus, aflow-SYM calculates
the crystal-spin symmetry by incorporating the mag-
netic moment into the symmetry analysis, acting as a de-
gree of freedom that can break (lower) symmetry. This
is analogous to how decorating a lattice with diﬀerent
atomic species lowers the symmetry. Thus, in general,
the crystal-spin symmetry forms a subgroup with respect
to the crystal symmetry. The analysis distinguishes the
symmetry between varying spin conﬁgurations (i.e., fer-
romagnetic, ferrimagnetic, and antiferromagnetic). This
type of symmetry analysis is relevant to ab-initio codes —
such as VASP — that break orbital symmetry based on
spin considerations. The aflow-SYM crystal-spin sym-
metry routines are designed for both collinear and non-
collinear systems.
Validation with experiments. Other software so-
lutions to calculate symmetry are available,
including
FINDSYM [80], PLATON [81], and Spglib [82], each cater-
ing to diﬀerent symmetry objectives. Compared to space
groups determined by experimental methods, aflow-SYM
is the most consistent (Fig. 1(d)). aflow-SYM’s high-
ﬁdelity results are attributed to its i. robust mapping
scheme for skewed lattices, ii. default tolerance values,
and iii. adaptive tolerance scheme with integrated con-
sistency checks.
Applications. The symmetry routines discussed herein
are used throughout the aflow++ codebase to categorize

11

crystallographic structures and reduce the cost of sim-
ulations. For example, the point group symmetries are
used to determine the high-symmetry k-paths for elec-
tronic and phonon band structure calculations. Further-
more, in phonon simulations, the factor group (fgroup)
and atom-site point group (agroup) are used to identify
the symmetrically-inequivalent atoms and distortion di-
rections, respectively, to reduce the simulation cost.

To enable adoption into user workﬂows, aflow-SYM
features a Python module to call the major symmetry
functions in a Python environment. Furthermore, sym-
metry results can be printed in either human-readable
text or JavaScript Object Notation (JSON) for easy ma-
nipulation and extension to other environments.
Command-line options. There are three main func-
tions that provide all symmetry information for a given
input structure. These functions allow an optional tol-
erance value (tol ) to be speciﬁed, accepting a number
(double) or the strings tight and loose corresponding
to (cid:15)tight and (cid:15)loose, respectively. To perform the symme-
try analysis of a crystal, the functions are called with the
following commands:

aflow --aflowSYM < GEOM_FILE

calculates and returns the symmetry operations for the
lattice point group, reciprocal lattice point group, fac-
tor group representatives, crystal point group, dual of
the crystal point group, Patterson symmetry, site sym-
metry, and space group. It also returns the unique and
equivalent sets of atoms. The tolerance can be appended
to the aflowSYM option: --aflowSYM=tol . The isome-
tries of the diﬀerent symmetry groups are saved to their
own ﬁles: aflow.group.out or aflow.group.json. The
group labels are as follows: pgroup (lattice point group),
pgroupk (reciprocal lattice point group), fgroup (fac-
tor group representatives), pgroup_xtal (crystal point
group), pgroupk_xtal, (dual of the crystal point group),
pgroupk_Patterson (Patterson point group), agroup
(site symmetry), and sgroup (space group).

aflow --edata < GEOM_FILE

calculates and returns the extended crystallographic
symmetry data (crystal,
lattice,
and superlattice symmetry), while incorporating the
full set of checks for robust symmetry determination.
The tolerance can be appended to the edata option:
--edata=tol .

reciprocal

lattice,

aflow --sgdata < GEOM_FILE

calculates and returns the space group symmetry of
the crystal, while only validating the symmetry descrip-
tions matching with the ITC conventions. The tolerance
can be appended to the sgdata option: --sgdata=tol .
The --print option speciﬁes the output format — ac-
cepting txt (default) or json — and can be appended
to the aflowSYM, edata, and sgdata commands: e.g.,
--print=json.

C.

aflow-XtalFinder: The Crystal Prototypes

Module

Autonomous prototype ﬁnder. To identify the pro-
totype of a given crystallographic compound, aflow-
XtalFinder computes the structure’s Pearson symbol,
space group, and Wyckoﬀ positions via aflow-SYM rou-
tines [49] (Fig. 2(a)). With the underlying aflow-SYM
adaptive tolerance mechanism, prototype designations
are guaranteed to be consistent, automatically changing
the symmetry tolerance otherwise. The default tolerance
for the symmetry analysis is (cid:15)sym = dmin
nn /100, where dmin
nn
is the minimum interatomic distance within the crystal.
Based on benchmarks performed in Ref. 49, this value is
consistent with experimentally-resolved space group sym-
metries.

aflow-XtalFinder casts these structures into their ideal
prototype label and degrees of freedom based on the
aflow++ Prototype Encyclopedia representation [14–16].
To determine the prototype label, aflow-XtalFinder cal-
culates the reduced stoichiometry, lattice, and Wyckoﬀ
positions (via aflow-SYM routines) [49]. Once the sym-
metry is calculated, aflow-XtalFinder identiﬁes which lat-
tice (i.e., a, b/a, c/a, α, β, and γ) and Wyckoﬀ param-
eters (i.e., x, y, and z for all Wyckoﬀ positions) are not
ﬁxed by symmetry and returns their values for the partic-
ular geometry. For example, the wurtzite structure has
the prototype label AB_hP4_186_b_b and its correspond-
ing degrees of freedom (a, c/a, z1 and z2) are 3.82, 1.63,
0.3748, and 0, respectively.

This particular representation of a prototype is advan-
tageous because: i. it is consistent with the ITC (the de
facto standard) [73], ii. it allows users to tune the degrees
of freedom while preserving the underlying symmetry,
and iii. geometry ﬁles for any arbitrary structure in this
designation can be generated using aflow++’s symbolic
prototype generator. Furthermore, this representation
has been fruitful in performing symmetry-constrained re-
laxations [83].
Degrees of similarity. aflow-XtalFinder performs sym-
metry, local atomic geometry, and complete geometric
comparisons to analyze structural similarity to varying
degrees (Fig. 2(b)). Symmetry comparisons are per-
formed to identify structures that are isopointal (same
symmetry). This is done by calculating the space group
symmetries and Wyckoﬀ positions of the relevant struc-
tures with aflow-SYM [49]. Structures are considered
isopointal if i. their space groups are the same or form an
enantiomorphic pair (mirror image) and ii. their Wyckoﬀ
sequences are similar (related via an automorphism of the
space group) [73, 84, 85]. aflow-XtalFinder tests Wyckoﬀ
similarity by comparing the Wyckoﬀ multiplicities and
permuting the site symmetry designation.
Isoconﬁgurational snapshots: comparing local ge-
ometries. Beyond isopointal analyses, structures are
further compared by inspecting arrangements of atoms,
i.e., local atomic geometries. Routines to quickly identify

12

local geometries are employed here to analyze structures
beyond symmetry considerations (i.e., isoconﬁgurational
versus isopointal [86]).

Rather than determine the complete local atomic ge-
ometry for each atom, XtalFinder builds a reduced rep-
resentation: neighborhoods comprised of only the least
frequently occurring atom (LFA) types. The local LFA
geometry analysis provides the connectivity for a sub-
set of atoms (i.e., LFA type) to discern if patterns are
present in both structures, regardless of cell choice and
crystal orientation. This description is preferred over the
full local geometry because it is i. computationally less
expensive to calculate and ii. generally less sensitive to
coordination cutoﬀ tolerances. The latter is attributed
to the fact that LFA geometries are more sparse.

A local LFA atomic geometry (AG) is a set of vectors

connecting a central atom (c) to its closest neighbors:

AGc

dmin

ic } ∀

≡ {

atomi

i

|

LFAs
,
}

∈ {

ic

is the minimum distance vector to the i-atom
where dmin
— restricted to LFA types only — and is calculated via
the method of images for periodic systems [76]:

dmin
ic

= min

i

(cid:20)

min
na,nb,nc ||

(xi

xc + naa + nbb + ncc)
||

(cid:21)

.

−

Here, na, nb, and nc are the lattice dimensions along the
lattice vectors a, b, and c; and xi and xc are the Carte-
sian coordinates of the i and c (center) atoms, respec-
tively. A coordination shell with a thickness of dmin
ic /10
captures other atoms of the same type to control numer-
ical noise in the atomic coordinates (a similar tolerance
metric is deﬁned in aflow-SYM, i.e., loose preset toler-
ance value [49]). This cutoﬀ value yields expected co-
ordination numbers for well-known systems and is com-
parable to results provided by other atomic environment
calculators [29, 87]. If there is only one LFA type — e.g.,
Si in α-cristobalite (SiO2, A2B_tP12_92_b_a) [14–16]
— then the distance to the closest neighbor of that LFA
type is calculated. If there are multiple LFA types — e.g.,
four for the quaternary Heusler — then the minimum dis-
tances to each LFA type are computed. The local atomic
geometry is calculated for each atom of the LFA types
in the unit cell, resulting in a list of atomic geometries
). Therefore, α-cristobalite has a set of four Si
(
{
LFA geometries (one for each Si in the unit cell: {AGSi,1,
AGSi,2, AGSi,3, AGSi,4}) and the quaternary Heusler has
a set of four LFA geometries (one for each element type:
{AGAu, AGLi, AGMg, AGSn}, respectively).

AGc

To investigate structural compatibility, local atomic
geometry lists for compounds are compared. In general,
the local geometry comparisons err on the side of caution.
For instance, comparing the cardinality of the coordina-
tion is often too strict. Despite a sparser geometry space,
slight deviations in position can move atoms outside the
coordination shell threshold, changing the atom cardi-
nality and overlooking potential matches. Local atomic
geometries are thus compatible if i. the central atoms

}

13

FIG. 2. Ideal prototyper and structure comparison tools in aflow-XtalFinder. (a) The ideal prototyper determines
a structure’s prototype label and degrees of freedom based on the aflow-SYM symmetry analyses, employing a tolerance scan
scheme if incommensurate descriptions are found. (b) Structures are compared to varying degrees of similarity via symmetry,
local geometry, and geometric structure mapping. (c) aflow-XtalFinder enables diﬀerent structure comparison modes: material-
type (map like atoms), structure-type (map any atom types of equal stoichiometry), decoration-type (generate and compare
diﬀerent atom colorings on a structure), and magnetic-type (map alike atoms and magnetic moments). (d) Input structures
can be automatically compared to user datasets, the aflow++ Prototype Encyclopedia, or the aflow.org repositories.

are of comparable types (i.e., same element and/or sto-
ichiometric ratio in the crystal), ii. the neighborhoods
of surrounding atoms have distances that match within
20% after normalizing with respect to max(AGc) (i.e.,
the largest distance in the local geometry cluster), and
iii. the angles formed by two atoms and the center atom
match within 10 degrees. To further alleviate the coor-
dination problem, an exact geometry match is not re-
quired, i.e., some distances and angles need not match
exactly at this stage. This more lenient method favors
labeling structures as near-isoconﬁgurational to mitigate
false negatives in subsequent geometric comparisons.
Isoconﬁgurational structures: comparing full ge-
ometry. To resolve a commensurate representation
between two structures for geometric comparison, one
structure — the reference Xref — remains ﬁxed and the
other structure — the potential duplicate Xtest — is ex-
panded into a supercell. Lattice vectors are identiﬁed
within the supercell and compared against the reference
structure. For any similar lattices to Xref , Xtest is trans-
formed into the new lattice representation (eXtest). Ori-
gin shifts for this cell are then explored in an attempt
to match atoms. If one-to-one atom mappings exist be-
tween the two structures, then the similarity is quantiﬁed
with the crystal misﬁt method (see Quantitative similar-
ity measure subsection) [88]. Misﬁt values below a given
threshold indicate that structures match and the search

terminates. Alternatively, misﬁt values larger than the
threshold are disregarded and the search continues until
all lattices and origin shifts are exhausted.
Quantitative similarity measure. To compare two
crystals in a given representation, a method proposed by
Burzlaﬀ and Malinovsky is employed [88]. The similarity
between structures is quantiﬁed by a misﬁt value [88]:

1.0

(cid:15)

≡

−

(1.0

−

(cid:15)latt) (1.0

−

(cid:15)coord) (1.0

(cid:15)fail) ,

−

which incorporates diﬀerences between lattice vectors
((cid:15)latt) and atomic positions ((cid:15)coord and (cid:15)fail) and are de-
ﬁned below. The misﬁt quantity is bound between zero
and one, where zero indicates a perfect match. Spe-
cial misﬁt ranges deﬁned by Burzlaﬀ and Malinovsky are
adopted [88]:

0 < (cid:15)
(cid:15)match < (cid:15)

≤
≤

(cid:15)match : match,
(cid:15)family : same family, and
1 : no match.

(cid:15)family < (cid:15)

≤

The “same family” designation generally corresponds to
crystals with common symmetry subgroups. Burzlaﬀ and
Malinovsky recommend (cid:15)match = 0.1 and (cid:15)family = 0.2
based on deﬁnitions from Pearson [89] and Parthé [90].
In the XtalFinder article, heuristic misﬁt thresholds are
identiﬁed based on the allowed maximum enthalpy diﬀer-
ences between similar structures (see Ref. 13 for details).

The deviation of the lattices ((cid:15)latt) captures the dif-
ference between the lattice face diagonals of eXtest and
Xref [88]:

,

1

||

−

≡

≡

(1

Dkl

(cid:15)latt

D31),

−
f ref
kl ||

−
−
edtest
kl −
||

D23)(1
ef test
kl −
||
f ref
kl ||

D12)(1
+
dref
kl ||
dref
kl −
where fkl and dkl (the diagonals on the kl lattice face) are
calculated by adding and subtracting, respectively, the k
and l lattice vectors. In the lattice search algorithm, ∆l,
∆θ, and ∆V tolerances are coupled to (cid:15)latt, and are tuned
to ensure (cid:15)latt

(cid:15)family.

The coordinate deviation — measuring the disparity
between atomic positions in the two structures — is based
on the mapped atom distances (dmap
) and the
atoms’ nearest neighbor distances in the respective struc-
tures (dnn) [88]:

or dmap
j

≤

i

(cid:15)coord

≡

P eN test
i
P eN test
i

(1

(1

i

− entest
− entest

i

) dmap
i
) dtest
nn,i

+ PN ref
j
+ PN ref
j

(cid:0)1

(cid:0)1

nref
j

nref
j

−

−

j

(cid:1) dmap
(cid:1) dref

nn,j

.

eN test and N ref are the number of atoms in the two crys-
tals. If dmap < dnn/2, then a “switch” variable n is set to
zero and the mapped atom distance is included in (cid:15)coord.
Otherwise, n is set to one, signifying that the mapped
atoms are far apart and not considered in (cid:15)coord. These
atoms are counted in the ﬁgure of failure [88]:

(cid:15)fail

≡

P eN test
i

i

+ PN ref
entest
j
eN test + N ref

nref
j

.

→

→

Cl, Cl

Cl and Na

aflow-XtalFinder oﬀers
Super-type comparisons.
four modes of comparing crystallographic structures
These modes
by changing the mapping criteria.
are material-type, structure-type, decoration-type, and
magnetic-type comparisons (Fig. 2(c)). Material-type
comparisons map atoms with matching elements (e.g.,
Cl
Na in sodium chloride), revealing du-
plicate compounds. Structure-type comparisons relax
this criteria and attempt to map atoms of any element
type as long as they have the same stoichiometric ra-
tio (e.g., Cl
Na, or vice versa in sodium chlo-
ride). This comparison-type identiﬁes compounds that
share the same prototype structure; e.g., periclase (MgO)
and sodium chloride (ClNa) are both rocksalt structures.
Decoration-type comparisons identify the atom types (or
colorings) of a single structure that leave the compound
invariant (e.g., swapping Cl and Na in sodium chloride
leaves the crystal unchanged). In this analysis, all pos-
sible decorations of an n-species structure (n!) are cre-
ated and compared if sites have similar Wyckoﬀ positions.
Since this analysis determines the unique atom colorings,
prototypes can be decorated such that degenerate com-
pounds are omitted. Lastly, magnetic-type comparisons
incorporate the magnetic moment of each atom into the

→

→

14

analysis, determining distinct spin conﬁgurations (e.g.,
). Comparison of systems with collinear

and

↓→↓

↑→↑
and non-collinear magnetic moments are supported.
Automatic grouping. Automatically comparing struc-
tures is necessary for high-throughput classiﬁcation of
unique/duplicate compounds and structure-types.
In
compounds are ﬁrst grouped into iso-
XtalFinder,
pointal sets by analyzing and comparing the symmetries
of the structures, aggregating them by stoichiometry,
space groups, and Wyckoﬀ sets (calculated via aflow-
SYM [49]). Next, compounds are further partitioned into
near-isoconﬁgurational sets by determining and compar-
ing the local LFA geometries in each structure. Within
each near-isoconﬁgurational group, one representative
structure — generally the ﬁrst in the set — is compared
to the other structures via geometric comparisons and
the misﬁt values are stored. Once the comparisons ﬁnish,
any unmatched structures (i.e., misﬁt values greater than
(cid:15)match) are reorganized into new comparison sets. The
process is recursive, repeating until all structures have
been assembled into matching groups or all comparison
pairs have been exhausted. The three comparison analy-
ses are performed in this order for two reasons: i. to cate-
gorize structural similarity to varying degrees (isopointal,
near-isoconﬁgurational, and isoconﬁgurational) and ii. to
eﬃciently group compounds to reduce the computational
cost of the geometric structure comparison. This proce-
dure is the same for material-, structure-, decoration-,
and magnetic-type comparisons; however, diﬀerent atom
mapping restrictions are applied depending on the com-
parison mode.

To enhance calculation speed, multithreading capabil-
ities can be employed. The three computationally inten-
sive procedures — calculating the symmetry, construct-
ing the local LFA geometry, and performing geometric
comparisons — are partitioned onto allocated threads,
oﬀering signiﬁcant speed increases for large collections of
structures.
Comparison against
established repositories.
There are three built-in functions to compare multiple
structures automatically (Fig. 2(d)):
i. compare struc-
tures provided by a user, ii. compare an input structure
to prototypes in aflow++ [14–16], and iii. compare an
input structure to entries in the aflow.org repositories.
Compare user datasets. Users can load crystal geome-
tries and compare them automatically with XtalFinder.
Options to perform both material-type and structure-
type comparisons are available to identify unique com-
pounds and prototypes, respectively. For structure-type
comparisons, the unique atom decorations for each rep-
resentative structure are determined. Once the analysis
is complete, XtalFinder groups compatible structures to-
gether and returns the corresponding misﬁt values.
Compare to aflow++ prototypes libraries. Given an
input structure, this routine returns similar aflow++ pro-
totypes along with their misﬁt values. aflow++ contains
structural prototypes that can be rapidly decorated for
high-throughput materials discovery: 1,100 in the Proto-

type Encyclopedia [14–16] and 1,492 in the HTQC [45]. In
this method, aflow++ prototypes are extracted — based
on similar stoichiometry, space group, and Wyckoﬀ posi-
tions to the input — and compared to the user’s struc-
ture. Since only matches to the input are relevant, the
procedure terminates before regrouping any unmatched
prototypes. The attributes of matched prototypes are
also returned,
including the prototype label, mineral
name, Strukturbericht designation, and links to the corre-
sponding Prototype Encyclopedia webpage. The scheme
identiﬁes common structure-types with the aflow++ pro-
totype libraries or — if no matches are found — reveals
new prototypes. Absent prototypes can be characterized
automatically in the aflow++ standard designation with
XtalFinder’s prototyping tool.
Compare to aflow.org repositories. Compounds are
compared to entries in the aflow.org repositories using
the aflow++ REST- and AFLUX Search-APIs [64, 91]. An
AFLUX query (i.e., matchbook and directives) is gener-
ated internally and returns database compounds similar
to the input structure based on species, stoichiometry,
space group, and Wyckoﬀ positions. With the AURL
from the AFLUX response, structures for the entry are
retrieved via the REST-API. The most relaxed structure
is extracted by default; however, options are available to
obtain structures at diﬀerent ab-initio relaxation steps.
The set of entries from the database is then compared
to the input structure. Similar to the aflow++ proto-
type comparisons, candidate entries are only compared
against the input structure, i.e., the procedure terminates
without regrouping unmatched entries.

With the underlying AFLUX functionality, mate-
rial properties can also be extracted, highlighting the
structure-property relationship amongst similar materi-
als. For instance, the enthalpy per atom (Hatom) for
matching database entries are printed by including the
enthalpy_atom API keyword in the query. Any number
or combination of properties can be queried; available
API keywords are located in Ref. 1.

This routine reveals equivalent aflow.org compounds
if similar materials exist in the database. As such, it
can estimate structural properties a priori; before per-
forming any calculations. The estimation is based on the
following assumptions:
i. the matching aflow++ mate-
rial resides at a local minimum in the energy landscape
and ii. the input structure relaxes to the same geome-
try as the matching aflow++ compound, given compa-
rable calculation parameters. The functionality can ex-
plore properties that are not calculated for a given entry,
but are calculated for an equivalent entry. For exam-
ple, compounds in aflow++’s prototype catalogs (LIB1,
LIB2, LIB3, etc.) do not usually have band structure
data; however, corresponding ICSD entries can be found
which do provide band structure information. Finally,
the method can identify compounds that are absent from
the database and prioritize them for future calculation,
enhancing the diversity of the aflow.org repositories.
New features.

Since the publication of Ref. 13,

15

×

×
×

can be

functionality has been added to
transformations
The

the
additional
for
XtalFinder module.
returned to users by
mapped structures
appending the --print_mapping option to a com-
parison command (e.g., --compare_materials or
--compare_structures). The transformation informa-
3 matrix),
tion includes i. the basis transformation (3
ii. the rotation of the coordinate system (3
3 matrix),
iii. the origin shift (3
1 vector), and iv. the volume
scaling factor
(scalar) between the two structures.
Along with changes to the lattice vectors, the basis
transformation accounts for changes in the unit cell and
can describe mappings between smaller and larger cells.
Furthermore, the atom mapping information is included,
indicating which atoms are mapped and their relative
distances between the two structures.
Command-line interface. The XtalFinder command-
line calls are detailed below. Function descriptions and
options are provided following each command.
Prototype commands. A structure (GEOM_FILE ) is
converted into its standard aflow++ prototype label with
the command

aflow --prototype < GEOM_FILE

The parameter variables (degrees of freedom) and corre-
sponding values are also listed.
Information about the
label and parameters are described in the Refs. 14–16.
Options for this command include:
• --setting=SETTING : Specify the space group setting
for the conventional cell/Wyckoﬀ positions. Possible
values for SETTING include: 1, 2, or aflow. Setting
values 1 and 2 generally correspond to the ﬁrst and sec-
ond choice listed in the ITC, respectively. The aflow
setting follows the choices of the Prototype Encyclope-
dia: axis-b for monoclinic space groups, rhombohedral
setting for rhombohedral space groups, and origin cen-
tered on the inversion site for centrosymmetric space
groups (default: aflow).

Comparison commands. The command

aflow --compare_materials=GEOM_FILES

compares a comma-separated list of geometry ﬁles of
compounds comprised of the same elements and with
commensurate stoichiometric ratios, i.e., material-type
comparison, returning their level of similarity (misﬁt
value). This method identiﬁes unique and duplicate ma-
terials. The command

aflow --compare_structures=GEOM_FILES

compares a comma-separated list of geometry ﬁles of
compounds with commensurate stoichiometric ratios
with no requirement of the element type, i.e., structure-
type comparison, and returns their level of similarity
(misﬁt value). This method identiﬁes unique and du-
plicate prototypes. For the material- and structure-type
comparisons, there are three input types (examples for
--compare_material are shown below):

• aflow --compare_materials=GEOM_FILES

:
GEOM_FILES is a comma-separated list of geome-
try ﬁles to compare.

A full list of the possible commands and options is
available in the XtalFinder README, which is printed
with the command

16

• aflow --compare_materials -F=filename :

• aflow --compare_materials -D path : Path to di-
rectory (path ) containing geometry ﬁles to compare.
File
compounds between de-
(filename )
limiters [VASP_POSCAR_MODE_EXPLICIT]START and
[VASP_POSCAR_MODE_EXPLICIT]STOP.

containing

To do the same for structure-type comparisons, swap
--compare_material with --compare_structures in
the commands above.

The command

aflow --compare2database < GEOM_FILE

compares a structure (GEOM_FILE ) to aflow.org reposito-
ries entries, returning similar compounds and quantifying
their levels of similarity (misﬁt values). Material proper-
ties can be extracted from the database (via AFLUX)
and printed, highlighting structure-property relation-
ships. This function can perform either material-type
comparisons or structure-type comparisons (by adding
the --structure_comparison option). Options speciﬁc
to this command include:
• --properties=keywords :

Speciﬁes the comma-
separated properties via their API keyword to print
the corresponding values with the comparison results.
• --catalog=string : Restricts the database entries to
a speciﬁc catalog/library (e.g., lib1, lib2, lib3, and
icsd).

• --geometry_file=string
from a

tries
(e.g.,
POSCAR.static).

particular DFT relaxation

POSCAR.relax1,

POSCAR.relax2,

:

Compares

geome-
step
and

The command

aflow --compare2prototypes < GEOM_FILE

compares a structure (GEOM_FILE ) against the aflow++
prototype libraries,
returning similar structures and
quantifying their levels of similarity (misﬁt values). Op-
tions speciﬁc to this command include:
• --catalog=string : Restricts the prototypes to a

speciﬁc catalog/library (e.g., aflow or htqc).

The command

aflow --isopointal_prototypes < GEOM_FILE

returns prototype labels that are isopointal (i.e., similar
space group and Wyckoﬀ positions) to the input structure
(GEOM_FILE ). Options speciﬁc to this command include:
• --catalog=string : Restricts the prototypes to a

speciﬁc catalog/library (e.g., aflow or htqc).

The command

aflow --unique_atom_decorations < GEOM_FILE

determines the unique and duplicate atom decorations
for a given structure.

aflow --readme=xtalfinder

V. PAOFLOW ELECTRONIC ANALYSIS

PAOFLOW [36, 37]
is a software tool to eﬃciently
post-process standard ﬁrst-principles electronic structure
plane-wave pseudopotential calculations. From interpo-
lated band structures and DOS, it promptly computes
several quantities that provide insight into transport, op-
tical, magnetic and topological properties like anomalous
and spin Hall conductivities, magnetic circular dichroism,
spin circular dichroism, and topological invariants. The
methodology is based on the projection of the electronic
wavefunctions of the system on a local atomic orbitals ba-
sis (PAO) [92–94] and is part of the aflow++ software in-
frastructure [45, 95]. Currently, PAOFLOW is interfaced
with Quantum ESPRESSO [18, 59] and the proposed
procedure is completely general and can be implemented
with any DFT electronic structure engine. Accurate PAO
Hamiltonian matrices can be built from the direct projec-
tion of the Kohn-Sham Bloch states
onto a chosen
basis set of ﬁxed localized functions, as we discussed ex-
tensively in Refs. 92–94. The real space Hamiltonians
H(R) (R is a lattice vector) can be directly calculated
using atomic orbitals or pseudo atomic orbitals from the
pseudopotential of any given element [92, 93]. The cru-
cial quantities that measure the accuracy of the basis
0 (P
set are the projectabilities pnk =
is the operator that projects onto the space of the PAO
basis set, as deﬁned in Ref. 93), which indicate the rep-
resentability of a Bloch state
on the chosen PAO
set. Maximum projectability, pnk = 1, indicates that the
Bloch state can be perfectly represented in the chosen
PAO set; inversely, pnk
0 indicates that the PAO set
is insuﬃcient and should be augmented. Once the Bloch
states with good projectabilities have been identiﬁed, the
PAO Hamiltonian is constructed as

ψnk
|

ψnk

ψnk

ψnk

i ≥

≈

P

i

h

i

|

|

|

H(k) = AEA† + κ

(cid:16)

A

A†A

(cid:17)−1

A†

(cid:21)

,

(cid:20)
I

−

as in Ref. 93. Here E is the diagonal matrix of Kohn-
Sham eigenenergies and A is the matrix of coeﬃcients
obtained from projecting the Bloch wavefunctions onto
the PAO set [93]. The expression above can be under-
stood as a ﬁltering procedure on the PAO Hamiltonian:
the states with good projectability are kept while all oth-
ers are relegated to an orthogonal null space (the second
term in the equation above). The null eigenvalues can
be moved out from the physically relevant energy spec-
trum via a shifting parameter κ. An example of this is
illustrated in Fig. 3(a), where the null space eigenval-
ues appear as a straight line at 27.5 eV. This procedure

17

FIG. 3. Electronic band structure and density calculated with PAOFLOW. (a) Silicon band structure calculated
with PAOFLOW (black) projecting on the basis set comprising the 3s, 3p, 3d, 4s, 4p, 4d, and 4f orbitals, compared to the
DFT band structure (red). (b) Silicon electron density reconstructed with PAOFLOW on the same basis set (contour plot on
the [1, 0, −1] plane).

provides an accurate real space representation of the ab-
initio Hamiltonian H(r) as a tight-binding (TB) matrix
of very small dimension, an advantage for the calculation
of any physical property requiring precise integration in
the reciprocal space.

[

F

By exploiting the PAO projection scheme described
], the PAO real
above, we can easily Fourier transform,
·
space representation and interpolate to arbitrary preci-
sion; i.e., H(rα)
H(k). This procedure is computation-
ally inexpensive because of the small dimension of the TB
Hamiltonian, and it is performed using a zero-padding al-
gorithm that operates globally on the PAO Hamiltonian
with a Fourier transform. Simply from the knowledge of
the PAO H(k), one can directly construct the real-space
localized Hamiltonian as

→

H(R) =

−1 [H(k)] .

[

F

F
H(R) is then zero-padded to i. increase the resolution in
k-space upon inverse
] and ii. obtain the interpolated
·
PAO Hamiltonian for any arbitrary k-vector mesh with
the same accuracy deﬁned by the projectability number.
From here, it is a simple task to evaluate the expecta-
tion value of the momentum operator — the main quan-
tity in the deﬁnition of many property descriptors. The
momentum operator is deﬁned as [96]:

pnm (k) =
=

ψn (k)
|
h
un (k)
|
h

where

ψm (k)
|

p
(m0/(cid:126))

i
kH(k)
∇

um (k)

,

i

|

kH(k) = X

R exp (ik

i

∇

R) H(R),

·

=
H(R) being the real space PAO matrix, and
exp (
the Bloch’s functions [97]. This pro-
cedure can be applied multiple times to evaluate higher
order derivatives (eﬀective masses, etc.) [98].

ψn (k)
i
|

un (k)
i
|

r)

ik

−

·

In the original formulation of the PAOFLOW method,
the atomic orbital basis was built from the radial pseu-
dowavefunctions of the pseudopotential used in the DFT
calculation. This “minimal basis set” approach has
proved satisfactory in achieving accurate TB matrices for
periodic systems. However, if more unoccupied bands are
needed for a particular application, it can be achieved by
progressively increasing the size of the atomic orbital ba-
sis set, eﬀectively increasing the number of states with
high projectability and thus the spectrum of H(k).

We have recently developed an alternative approach
that achieves this while maintaining the high accuracy of
the minimal basis set. Our approach is entirely indepen-
dent of the choice (or the availability) of the pseudopo-
tential’s radial functions. We generate the basis function
by solving the all-electron atomic problem and building
the basis set from the atomic radial functions, consis-
tent with the valence states present in the pseudopoten-
tial [37].
In this way, we can increase the size of the
basis set and construct Hamiltonians that reproduce ex-
actly the electronic states for energies high in the con-
duction band. As an example, we show in Fig. 3(a) the
band structure of silicon generated by a PAO Hamilto-
nian with a basis set comprising the 3s, 3p, 3d, 4s, 4p,
4d, and 4f orbitals. The accuracy of the representation,
measured as the average diﬀerence between the original
DFT bands and the PAOFLOW ones across the whole ﬁrst

ab<latexit sha1_base64="O+AmQjCF4JBIiqlNaqSYRXwFm4c=">AAAB6HicbVBNS8NAEJ3Ur1q/qh69LBbBg5RERD0WvHhswbSFNpTNdtKu3WzC7kYopb/AiwdFvPqTvPlv3LY5aOuDgcd7M8zMC1PBtXHdb6ewtr6xuVXcLu3s7u0flA+PmjrJFEOfJSJR7ZBqFFyib7gR2E4V0jgU2ApHdzO/9YRK80Q+mHGKQUwHkkecUWOlht8rV9yqOwdZJV5OKpCj3it/dfsJy2KUhgmqdcdzUxNMqDKcCZyWupnGlLIRHWDHUklj1MFkfuiUnFmlT6JE2ZKGzNXfExMaaz2OQ9sZUzPUy95M/M/rZCa6DSZcpplByRaLokwQk5DZ16TPFTIjxpZQpri9lbAhVZQZm03JhuAtv7xKmpdV77rqNa4qtYs8jiKcwCmcgwc3UIN7qIMPDBCe4RXenEfnxXl3PhatBSefOYY/cD5/AKyHjMk=</latexit>U<latexit sha1_base64="w4rEuAJPetC0TZdhDcULGp4Bzgw=">AAAB6HicbVA9SwNBEJ3zM8avqKXNYhAsJNyJqGXAxsIiAfMByRH2NnPJmr29Y3dPCEd+gY2FIrb+JDv/jZvkCk18MPB4b4aZeUEiuDau++2srK6tb2wWtorbO7t7+6WDw6aOU8WwwWIRq3ZANQousWG4EdhOFNIoENgKRrdTv/WESvNYPphxgn5EB5KHnFFjpfp9r1R2K+4MZJl4OSlDjlqv9NXtxyyNUBomqNYdz02Mn1FlOBM4KXZTjQllIzrAjqWSRqj9bHbohJxapU/CWNmShszU3xMZjbQeR4HtjKgZ6kVvKv7ndVIT3vgZl0lqULL5ojAVxMRk+jXpc4XMiLEllClubyVsSBVlxmZTtCF4iy8vk+ZFxbuqePXLcvU8j6MAx3ACZ+DBNVThDmrQAAYIz/AKb86j8+K8Ox/z1hUnnzmCP3A+fwCe44zA</latexit>L<latexit sha1_base64="mzqg85Vnhj1vFfd+0THLlEExkbM=">AAAB7XicbVDLSgNBEOyNrxhfUY9eBoPgQcKuiHoMeNBjBPOAZAmzk9lkzDyWmVkhLPkHLx4U8er/ePNvnCR70MSChqKqm+6uKOHMWN//9gorq2vrG8XN0tb2zu5eef+gaVSqCW0QxZVuR9hQziRtWGY5bSeaYhFx2opGN1O/9US1YUo+2HFCQ4EHksWMYOukZvcWC4F75Ypf9WdAyyTISQVy1Hvlr25fkVRQaQnHxnQCP7FhhrVlhNNJqZsammAywgPacVRiQU2Yza6doBOn9FGstCtp0Uz9PZFhYcxYRK5TYDs0i95U/M/rpDa+DjMmk9RSSeaL4pQjq9D0ddRnmhLLx45gopm7FZEh1phYF1DJhRAsvrxMmufV4LIa3F9Uamd5HEU4gmM4hQCuoAZ3UIcGEHiEZ3iFN095L9679zFvLXj5zCH8gff5A1FFjuU=</latexit> <latexit sha1_base64="LPBGxa/H7WQBVLNQJce8EVb4bUk=">AAAB6HicbVBNS8NAEJ34WetX1aOXxSJ4kJKIqMeCF8FLC/YD2lA220m7drMJuxuhhP4CLx4U8epP8ua/cdvmoK0PBh7vzTAzL0gE18Z1v52V1bX1jc3CVnF7Z3dvv3Rw2NRxqhg2WCxi1Q6oRsElNgw3AtuJQhoFAlvB6Hbqt55QaR7LBzNO0I/oQPKQM2qsVL/vlcpuxZ2BLBMvJ2XIUeuVvrr9mKURSsME1brjuYnxM6oMZwInxW6qMaFsRAfYsVTSCLWfzQ6dkFOr9EkYK1vSkJn6eyKjkdbjKLCdETVDvehNxf+8TmrCGz/jMkkNSjZfFKaCmJhMvyZ9rpAZMbaEMsXtrYQNqaLM2GyKNgRv8eVl0ryoeFcVr35Zrp7ncRTgGE7gDDy4hircQQ0awADhGV7hzXl0Xpx352PeuuLkM0fwB87nD51fjL8=</latexit>K<latexit sha1_base64="arOtJynVQ8Nwee/D7cbauHIx5QA=">AAAB6HicbVBNS8NAEJ3Ur1q/qh69LBbBg5RERD0WvHhswX5AG8pmO2nXbjZhdyOU0F/gxYMiXv1J3vw3btsctPXBwOO9GWbmBYng2rjut1NYW9/Y3Cpul3Z29/YPyodHLR2nimGTxSJWnYBqFFxi03AjsJMopFEgsB2M72Z++wmV5rF8MJME/YgOJQ85o8ZKjXa/XHGr7hxklXg5qUCOer/81RvELI1QGiao1l3PTYyfUWU4Ezgt9VKNCWVjOsSupZJGqP1sfuiUnFllQMJY2ZKGzNXfExmNtJ5Ege2MqBnpZW8m/ud1UxPe+hmXSWpQssWiMBXExGT2NRlwhcyIiSWUKW5vJWxEFWXGZlOyIXjLL6+S1mXVu656jatK7SKPowgncArn4MEN1OAe6tAEBgjP8ApvzqPz4rw7H4vWgpPPHMMfOJ8/r4+Myw==</latexit>W<latexit sha1_base64="66oMWjTvi/PftGppvlBElzHKBP8=">AAAB6HicbVBNS8NAEJ3Ur1q/qh69LBbBg5RERD0WvHhswX5AG8pmO2nXbjZhdyOU0F/gxYMiXv1J3vw3btsctPXBwOO9GWbmBYng2rjut1NYW9/Y3Cpul3Z29/YPyodHLR2nimGTxSJWnYBqFFxi03AjsJMopFEgsB2M72Z++wmV5rF8MJME/YgOJQ85o8ZKjU6/XHGr7hxklXg5qUCOer/81RvELI1QGiao1l3PTYyfUWU4Ezgt9VKNCWVjOsSupZJGqP1sfuiUnFllQMJY2ZKGzNXfExmNtJ5Ege2MqBnpZW8m/ud1UxPe+hmXSWpQssWiMBXExGT2NRlwhcyIiSWUKW5vJWxEFWXGZlOyIXjLL6+S1mXVu656jatK7SKPowgncArn4MEN1OAe6tAEBgjP8ApvzqPz4rw7H4vWgpPPHMMfOJ8/sROMzA==</latexit>X<latexit sha1_base64="mzqg85Vnhj1vFfd+0THLlEExkbM=">AAAB7XicbVDLSgNBEOyNrxhfUY9eBoPgQcKuiHoMeNBjBPOAZAmzk9lkzDyWmVkhLPkHLx4U8er/ePNvnCR70MSChqKqm+6uKOHMWN//9gorq2vrG8XN0tb2zu5eef+gaVSqCW0QxZVuR9hQziRtWGY5bSeaYhFx2opGN1O/9US1YUo+2HFCQ4EHksWMYOukZvcWC4F75Ypf9WdAyyTISQVy1Hvlr25fkVRQaQnHxnQCP7FhhrVlhNNJqZsammAywgPacVRiQU2Yza6doBOn9FGstCtp0Uz9PZFhYcxYRK5TYDs0i95U/M/rpDa+DjMmk9RSSeaL4pQjq9D0ddRnmhLLx45gopm7FZEh1phYF1DJhRAsvrxMmufV4LIa3F9Uamd5HEU4gmM4hQCuoAZ3UIcGEHiEZ3iFN095L9679zFvLXj5zCH8gff5A1FFjuU=</latexit> <latexit sha1_base64="arOtJynVQ8Nwee/D7cbauHIx5QA=">AAAB6HicbVBNS8NAEJ3Ur1q/qh69LBbBg5RERD0WvHhswX5AG8pmO2nXbjZhdyOU0F/gxYMiXv1J3vw3btsctPXBwOO9GWbmBYng2rjut1NYW9/Y3Cpul3Z29/YPyodHLR2nimGTxSJWnYBqFFxi03AjsJMopFEgsB2M72Z++wmV5rF8MJME/YgOJQ85o8ZKjXa/XHGr7hxklXg5qUCOer/81RvELI1QGiao1l3PTYyfUWU4Ezgt9VKNCWVjOsSupZJGqP1sfuiUnFllQMJY2ZKGzNXfExmNtJ5Ege2MqBnpZW8m/ud1UxPe+hmXSWpQssWiMBXExGT2NRlwhcyIiSWUKW5vJWxEFWXGZlOyIXjLL6+S1mXVu656jatK7SKPowgncArn4MEN1OAe6tAEBgjP8ApvzqPz4rw7H4vWgpPPHMMfOJ8/r4+Myw==</latexit>W<latexit sha1_base64="w4rEuAJPetC0TZdhDcULGp4Bzgw=">AAAB6HicbVA9SwNBEJ3zM8avqKXNYhAsJNyJqGXAxsIiAfMByRH2NnPJmr29Y3dPCEd+gY2FIrb+JDv/jZvkCk18MPB4b4aZeUEiuDau++2srK6tb2wWtorbO7t7+6WDw6aOU8WwwWIRq3ZANQousWG4EdhOFNIoENgKRrdTv/WESvNYPphxgn5EB5KHnFFjpfp9r1R2K+4MZJl4OSlDjlqv9NXtxyyNUBomqNYdz02Mn1FlOBM4KXZTjQllIzrAjqWSRqj9bHbohJxapU/CWNmShszU3xMZjbQeR4HtjKgZ6kVvKv7ndVIT3vgZl0lqULL5ojAVxMRk+jXpc4XMiLEllClubyVsSBVlxmZTtCF4iy8vk+ZFxbuqePXLcvU8j6MAx3ACZ+DBNVThDmrQAAYIz/AKb86j8+K8Ox/z1hUnnzmCP3A+fwCe44zA</latexit>L<latexit sha1_base64="66oMWjTvi/PftGppvlBElzHKBP8=">AAAB6HicbVBNS8NAEJ3Ur1q/qh69LBbBg5RERD0WvHhswX5AG8pmO2nXbjZhdyOU0F/gxYMiXv1J3vw3btsctPXBwOO9GWbmBYng2rjut1NYW9/Y3Cpul3Z29/YPyodHLR2nimGTxSJWnYBqFFxi03AjsJMopFEgsB2M72Z++wmV5rF8MJME/YgOJQ85o8ZKjU6/XHGr7hxklXg5qUCOer/81RvELI1QGiao1l3PTYyfUWU4Ezgt9VKNCWVjOsSupZJGqP1sfuiUnFllQMJY2ZKGzNXfExmNtJ5Ege2MqBnpZW8m/ud1UxPe+hmXSWpQssWiMBXExGT2NRlwhcyIiSWUKW5vJWxEFWXGZlOyIXjLL6+S1mXVu656jatK7SKPowgncArn4MEN1OAe6tAEBgjP8ApvzqPz4rw7H4vWgpPPHMMfOJ8/sROMzA==</latexit>X<latexit sha1_base64="ByJG5KkMeVPwulAycEilUpHo7Qs=">AAAB6nicbVBNS8NAEJ3Ur1q/qh69LBbBg5ZERD0WvHisaD+gDWWz3bRLN5uwOxFK6E/w4kERr/4ib/4bt20O2vpg4PHeDDPzgkQKg6777RRWVtfWN4qbpa3tnd298v5B08SpZrzBYhnrdkANl0LxBgqUvJ1oTqNA8lYwup36rSeujYjVI44T7kd0oEQoGEUrPZx7bq9ccavuDGSZeDmpQI56r/zV7ccsjbhCJqkxHc9N0M+oRsEkn5S6qeEJZSM64B1LFY248bPZqRNyYpU+CWNtSyGZqb8nMhoZM44C2xlRHJpFbyr+53VSDG/8TKgkRa7YfFGYSoIxmf5N+kJzhnJsCWVa2FsJG1JNGdp0SjYEb/HlZdK8qHpXVe/+slI7y+MowhEcwyl4cA01uIM6NIDBAJ7hFd4c6bw4787HvLXg5DOH8AfO5w9NT40W</latexit> 10<latexit sha1_base64="fyZupicYqLmGBd/E9ZHU+4CUQY8=">AAAB6XicbVBNS8NAEJ3Ur1q/qh69LBbBg5REinosePFYxX5AG8pmu2mXbjZhdyKU0H/gxYMiXv1H3vw3btsctPXBwOO9GWbmBYkUBl332ymsrW9sbhW3Szu7e/sH5cOjlolTzXiTxTLWnYAaLoXiTRQoeSfRnEaB5O1gfDvz209cGxGrR5wk3I/oUIlQMIpWevDcfrniVt05yCrxclKBHI1++as3iFkacYVMUmO6npugn1GNgkk+LfVSwxPKxnTIu5YqGnHjZ/NLp+TMKgMSxtqWQjJXf09kNDJmEgW2M6I4MsveTPzP66YY3viZUEmKXLHFojCVBGMye5sMhOYM5cQSyrSwtxI2opoytOGUbAje8surpHVZ9a6q3n2tUr/I4yjCCZzCOXhwDXW4gwY0gUEIz/AKb87YeXHenY9Fa8HJZ47hD5zPH+PMjN8=</latexit>10<latexit sha1_base64="0MXcTmWYxVPWK7hqbuMTzTQR728=">AAAB6HicbVBNS8NAEJ3Ur1q/qh69LBbBg5RERD0WvHhswX5AG8pmO2nXbjZhdyOU0F/gxYMiXv1J3vw3btsctPXBwOO9GWbmBYng2rjut1NYW9/Y3Cpul3Z29/YPyodHLR2nimGTxSJWnYBqFFxi03AjsJMopFEgsB2M72Z++wmV5rF8MJME/YgOJQ85o8ZKDbdfrrhVdw6ySrycVCBHvV/+6g1ilkYoDRNU667nJsbPqDKcCZyWeqnGhLIxHWLXUkkj1H42P3RKzqwyIGGsbElD5urviYxGWk+iwHZG1Iz0sjcT//O6qQlv/YzLJDUo2WJRmApiYjL7mgy4QmbExBLKFLe3EjaiijJjsynZELzll1dJ67LqXVe9xlWldpHHUYQTOIVz8OAGanAPdWgCA4RneIU359F5cd6dj0VrwclnjuEPnM8fdHOMpA==</latexit>0<latexit sha1_base64="bM2K8tD8OhCLLmR5UGZqrEq3XSo=">AAAB6XicbVBNS8NAEJ3Ur1q/qh69LBbBg5SkiHosePFYxX5AG8pmO2mXbjZhdyOU0H/gxYMiXv1H3vw3btsctPXBwOO9GWbmBYng2rjut1NYW9/Y3Cpul3Z29/YPyodHLR2nimGTxSJWnYBqFFxi03AjsJMopFEgsB2Mb2d++wmV5rF8NJME/YgOJQ85o8ZKDzW3X664VXcOskq8nFQgR6Nf/uoNYpZGKA0TVOuu5ybGz6gynAmclnqpxoSyMR1i11JJI9R+Nr90Ss6sMiBhrGxJQ+bq74mMRlpPosB2RtSM9LI3E//zuqkJb/yMyyQ1KNliUZgKYmIye5sMuEJmxMQSyhS3txI2oooyY8Mp2RC85ZdXSatW9a6q3v1lpX6Rx1GEEziFc/DgGupwBw1oAoMQnuEV3pyx8+K8Ox+L1oKTzxzDHzifP+VRjOA=</latexit>20<latexit sha1_base64="BxykLcNRueTnWFa5o9N5E7mT9V8=">AAAB6XicbVBNS8NAEJ3Ur1q/qh69LBbBg5RERT0WvHisYj+gDWWz3bRLN5uwOxFK6D/w4kERr/4jb/4bt20O2vpg4PHeDDPzgkQKg6777RRWVtfWN4qbpa3tnd298v5B08SpZrzBYhnrdkANl0LxBgqUvJ1oTqNA8lYwup36rSeujYjVI44T7kd0oEQoGEUrPVy4vXLFrbozkGXi5aQCOeq98le3H7M04gqZpMZ0PDdBP6MaBZN8UuqmhieUjeiAdyxVNOLGz2aXTsiJVfokjLUthWSm/p7IaGTMOApsZ0RxaBa9qfif10kxvPEzoZIUuWLzRWEqCcZk+jbpC80ZyrEllGlhbyVsSDVlaMMp2RC8xZeXSfO86l1VvfvLSu0sj6MIR3AMp+DBNdTgDurQAAYhPMMrvDkj58V5dz7mrQUnnzmEP3A+fwDm1ozh</latexit>30<latexit sha1_base64="Ctrfs9jA4gBI+0o4EIPK8dfLOD0=">AAAB6nicbVBNSwMxEJ2tX7V+VT16CRbBg5RdKeqx4EXwUtFtC+1Ssmm2Dc0mS5IVytqf4MWDIl79Rd78N6btHrT1wcDjvRlm5oUJZ9q47rdTWFldW98obpa2tnd298r7B00tU0WoTySXqh1iTTkT1DfMcNpOFMVxyGkrHF1P/dYjVZpJ8WDGCQ1iPBAsYgQbK93fPvm9csWtujOgZeLlpAI5Gr3yV7cvSRpTYQjHWnc8NzFBhpVhhNNJqZtqmmAywgPasVTgmOogm506QSdW6aNIKlvCoJn6eyLDsdbjOLSdMTZDvehNxf+8TmqiqyBjIkkNFWS+KEo5MhJN/0Z9pigxfGwJJorZWxEZYoWJsemUbAje4svLpHle9S6qtbtapX6Wx1GEIziGU/DgEupwAw3wgcAAnuEV3hzuvDjvzse8teDkM4fwB87nDyYTjac=</latexit>K|U<latexit sha1_base64="r2FSHSMhrnwF2bRNvvyUQCLHeEU=">AAACA3icbZDJSgNBEIZ74hbjNupNL4NBiAfDjAT1GJCIxwhmgWQIPZ1K0qRnobtGDMOIF1/FiwdFvPoS3nwbO8tBoz80fPxVRXX9XiS4Qtv+MjILi0vLK9nV3Nr6xuaWub1TV2EsGdRYKELZ9KgCwQOoIUcBzUgC9T0BDW94Ma43bkEqHgY3OIrA9Wk/4D3OKGqrY+5VjiudpI1wh8llmk7hvgD1o7Rj5u2iPZH1F5wZ5MlM1Y752e6GLPYhQCaoUi3HjtBNqETOBKS5dqwgomxI+9DSGFAflJtMbkitQ+10rV4o9QvQmrg/JxLqKzXyPd3pUxyo+drY/K/WirF37iY8iGKEgE0X9WJhYWiNA7G6XAJDMdJAmeT6rxYbUEkZ6thyOgRn/uS/UD8pOqfF0nUpX7ZncWTJPjkgBeKQM1ImV6RKaoSRB/JEXsir8Wg8G2/G+7Q1Y8xmdskvGR/fAKWXtg==</latexit>E EF(eV)Brillouin zone, is of the order of 10−3 for energies up to
20 eV. Moreover, the introduction of an explicit basis set
promotes the PAOFLOW method beyond a simple tight-
binding representation. We are now able to reconstruct
the true electronic wavefunctions fully and thus the elec-
tronic density of the system (see Fig. 3(b)) — the essen-
tial quantity to evaluate a plethora of properties in their
real space representation.

VI. THERMODYNAMICS

The energetics of the formation and decomposition re-
actions of a material inﬂuence whether it can be made
and its stability. Ideally, the full reaction pathway should
be considered (kinetics), including intermediate products
which may be energetically inaccessible, rendering the
reaction pathway unfeasible. These considerations are
highly dependent on the experimental method and con-
ditions, and are thus diﬃcult to generalize. Instead, for-
mation and stability analyses ﬁrst focus only on the en-
ergy diﬀerence between the reaction endpoints (thermo-
dynamics), which assumes the system can freely explore
all possible outcomes to realize the minimum energy one
(ergodicity).

A.

aflow-CHULL: The Convex Hull Module

The aflow++ Convex Hull Module (aflow-CHULL) [34]
can be used to construct ground-state (T = 0) ab-
initio phase diagrams oﬀering a wealth of thermodynamic
data. Identiﬁcation of stable phases involves the calcu-
lation of the convex hull in the free-energy-concentration
space. Compounds having diﬀerent structures (e.g., rock-
salt vs. wurtzite) and concentrations (AxB1−x) are sam-
pled from the aflow.org repositories. These conﬁgurations
have been generated through a combination of struc-
ture prototyping of naturally occurring compounds [14–
16] and structure enumeration algorithms [13]. Stability
(∆G < 0) is achieved by minimizing the enthalpy and, in
multi-phase regions, can involve changing concentrations
(phase-separation and tie-line construction), as dictated
by the minimum energy surface. The collection of stable
phases and the tie-lines connecting them is determined
by the convex hull: the set of outer-most points out-
lining the smallest convex shape enclosing the data, as
illustrated in Fig. 4(a). The convex hull deﬁnes stability
and thermodynamic pathways to it, and its construction
is based solely on the geometry (positions) of the data.
The energy axis is the formation enthalpy (Hf), which is
deﬁned as:

Hf,AxB1−x

= HAxB1−x −
where HAxB1−x
is the enthalpy of a binary compound,
and HA is the enthalpy of the A-reference-state. This
compositionally-weighted shift of the raw DFT-enthalpies

[xHA + (1

x) HB] ,

−

18

ﬁxes the reference-states (x = [0, 1]) to zero, so only the
lower convex hull needs to be calculated.

Compounds below the zero-formation-enthalpy tie-line
(Hf < 0) are only stable with respect to decomposi-
tion to the reference states. The phases on the convex
hull are globally stable (will not decompose) and thus
are expected to form under similar experimental condi-
tions [99–107]. Compounds above the hull will decom-
pose into a linear combination of the stable phases deﬁn-
ing the tie-line directly below it. For example, the de-
composition reaction of Pd2Pt3 (highlighted in Fig. 4(a))
is:

Pd0.4Pt0.6

−3
meV/atom
−−−−−−→

3
5

Pd0.5Pt0.5 +

2
5

Pd0.25Pt0.75,

∼

where the distance to the hull (Hhull) is the energy dif-
ference between the products and the reactants, and the
products deﬁne the tie-line directly below Pd2Pt3. Hhull
can be used as a measure of metastability: compounds
close to the hull may stabilize at ﬁnite temperatures
25 meV).
(room temperature:

Analogous to the distance to the hull, the stability cri-
terion [4, 34] (∆Hsc) was devised to gauge the relative
stability of compounds on the hull. This descriptor is de-
ﬁned as the distance of the compound from the pseudo-
hull constructed without it (Fig. 4(b)), quantifying the
eﬀect of the phase on the convex hull and its susceptibil-
ity to destabilization by a new phase that has yet to be
explored. The descriptor helped guide the design of two
Heusler magnetic compounds, the ﬁrst magnets discov-
ered by computational approaches [4].

aflow-CHULL can construct and analyze convex hulls
e.g., Ref. 8
for arbitrary numbers of components:
presents distances to the hull and decomposition reac-
tions for 5-metal high-entropy carbides (6D hulls). The
module oﬀers illustrations of the hull for binary and
ternary systems (Fig. 4(c)), as well as a PDF report sum-
marizing the data used to construct the hull and the re-
sults of the analysis (Fig. 4(d)). Entries are organized by
arity (ternaries ﬁrst, then binaries) and concentration.
The report presents ‘unstable’ vs. ‘ground-state’ desig-
nations, distances to the hull, decomposition reactions,
and stability criteria. For each stable phase, the report
also provides the set of phases with which it is in equilib-
rium, i.e., the set of vertices for all the facets the stable
phase deﬁnes. For example, Ag2AuCd in Fig. 4(c) (lower
left) is a vertex for eight facets, which are enumerated
in Fig. 4(d) under ‘vertex of facets’. This information
was used to discover two cobalt-based superalloys, where
candidate impurity-phase compositions potentially form
during age-hardening were screened for not being in two-
phase equilibrium with the fcc host matrix [6, 7].

The N + 1 enthalpy gain (∆H [N

1]) has
also been implemented within aflow-CHULL [108]. The
descriptor quantiﬁes an N -compound’s distance from
the hull constructed only of
-compounds
}
(Fig. 5), where, e.g., binaries are 2-compounds and
ternaries are 3-compounds. The N + 1 enthalpy gain for

1, . . . , N
|

1, . . . , N

−

−

{

1

19

FIG. 4. Results and output from the aflow++ Convex Hull Module. (a) Illustration of the PdPt convex hull, high-
lighting the various compounds sampled from the aflow.org repositories having diﬀerent structures and concentrations, the
(b) Illustration of the
zero-formation-enthalpy tie-line, a two-phase region (hull facet), and the decomposition of Pd2Pt3.
stability criterion analysis of PdPt, highlighting the construction of the pseudo-hull (dotted-line) from which the distance is
measured.
(c) Illustration of the AgAuCd convex hull, where the colors (orange to blue) indicate depth (lower formation
enthalpy), as indicated by the color bar on the right. Only stable compounds (on the hull) are shown. (d) An excerpt from
the full AgAuCd PDF report, which organizes all the data used to construct the convex hull and presents the results of the
analysis.

≥

1-compounds is the cohesive energy, and for 2-compounds
is the formation enthalpy (Fig. 5(a)). An analysis of the
aflow.org repositories for metal compositions reveals that
with an increasing number of species there is a dimin-
ishing enthalpy gain, which can be rapidly overcome by
the conﬁgurational entropy gain (N
4), see Fig. 5(c).
This validates the unavoidability of disorder in multi-
component systems [108].
Command-line options. There are several ways to in-
teract with the aflow-CHULL module, including through
the web [1], with the aflow++ binary installed locally, and
through Python/Jupyter wrappers (calling a local install
of the aflow++ binary). The binary oﬀers full access
to functionality and options, as well as various output
formats, including plain text, JSON, PDF, and Jupyter
notebooks. The PDF output requires the LATEX package.
See the Supporting Information of Ref. 34 for version and
package details. The primary aflow-CHULL command

aflow --chull --alloy=MnPdPt

queries the aflow.org repositories for entries containing
, calculates the convex hull, and returns the
Mn, Pd, Pt
{
}
information as a PDF (default, see --print). The ﬂags
and options include:
• --chull : Necessary ﬂag for entering the convex-hull

module.

• --alloy=alloy : Necessary argument, speciﬁes the
system. This code is not dimension limited, i.e., any
N -ary system can be calculated. There are two in-
put modes: raw (comma-separated) and combinatorial
(colon- and comma-separated).
Raw input: --alloy=MnPdPt,AlCuZn.
Combinatorial input: --alloy=Ag,Au:Mn. This is in-
terpreted as --alloy=AgMn,AuMn.

• --np=ncpus : Number of threads for calculation of
multiple convex hulls. Default is --np=1 (serial).

≠4≠3.2≠2.4≠1.6≠0.80(kJ/mol)527entriesT=0Pt0.80.60.40.2Pd≠40≠30≠20≠100formationenthalpy(meV/atom)Pd7PtPd3PtPd2Pt3PdPtPdPt3PdPt7≠4≠3.2≠2.4≠1.6≠0.80(kJ/mol)527entriesT=0Pt0.80.60.40.2Pd≠40≠30≠20≠100formationenthalpy(meV/atom)Pd7PtPd3PtPd7Pt5PdPt2PdPt3PdPt7PdPttwo-phase regionzero-𝐻!tie-lineconvex hullabpseudo-hullΔ𝐻"#$$Δ𝐻%&cd20

FIG. 5. The N + 1 enthalpy gain descriptor.
(a) For binary compounds, the N + 1 enthalpy gain descriptor is the
distance of the compound from the zero-formation-enthalpy tie-line (highlighted in green), which is trivially the formation
enthalpy. (b) For ternary compounds, the N + 1 enthalpy gain descriptor is the distance of the compound from the convex
hull constructed of unary (reference) and binary compounds (highlighted in blue). (c) A plot comparing the enthalpy gains
averaged over N -compounds having metallic components in the aflow.org repositories with the conﬁgurational entropy gains
for increasing numbers of species.

• --print=format : Selects the output format, op-
tions include: pdf, png, json, txt, jupyter2, and
jupyter3. json and txt have the following exten-
sions: .json and .txt. jupyter2/jupyter3 create
a Python2/Python3 Jupyter notebook JSON ﬁle that
plots a convex hull for the speciﬁed alloy. Default is
pdf.

• --dist2hull=aflow:bb0d45ab555bc208
hull

turns
aflow:bb0d45ab555bc208, speciﬁed by the AUID.

from the

distance

:
for

the

Re-
entry

criterion

• --scriterion=aflow:bb0d45ab555bc208

:
entry
Returns
stability
the
speciﬁed by the AUID.
aflow:bb0d45ab555bc208,
The entry must be a ground-state structure; a warning
will be issued otherwise. aflow-CHULL removes the
point from the hull, calculates the pseudo-hull, and
determines the distance of this point from below the
pseudo-hull.

for

:

for

gain

enthalpy

the N + 1

• --nplus1=aflow:bb0d45ab555bc208

Re-
entry
turns
aflow:bb0d45ab555bc208,
speciﬁed by the AUID.
The entry must be a ground-state structure; a warning
will be issued otherwise. aflow-CHULL removes all
points having the same dimensionality as the input
entry from the hull, calculates the pseudo-hull, and
determines the distance of this point from below the
pseudo-hull.

• --hull_enthalpy=0.25,0.25 : Returns the value of
the convex hull surface at the speciﬁed coordinate/con-

centration. Users should provide the composition in
reduced form, e.g., the Mn2PdPt composition is spec-
iﬁed by --hull_enthalpy=0.5,0.25, where the last
component is implicitly 1

sum(0.5 + 0.25).

−
For the full set of options and additional information, see
the aflow-CHULL README:

aflow --readme=chull

B.

aflow-CCE: The Coordination Corrected

Enthalpies Module

While there have been signiﬁcant advances in calculating
ﬁnite temperature eﬀects from ﬁrst principles [44, 109,
110], the computational modeling of formation enthalpies
— the enthalpy diﬀerence between the material and its
elemental references — still poses a fundamental chal-
lenge. Standard (semi-)local and even currently available
advanced ab-initio approaches yield inaccurate predic-
tions [111–118], with errors of several hundred meV/atom
in particular for ionic systems, which inhibits materials
design. The problem is intimately connected to the fact
that computing reliable formation enthalpies ab-initio
eventually requires accurate total energies for all sys-
tems involved [27, 28, 114]. This is generally not possible
within a (semi-)local approximation. To date, it even re-
mains unknown what level of DFT-based theory would
be needed to achieve satisfactory accuracy for formation

enthalpies, given that exact Quantum Monte Carlo re-
sults are only available for a few special systems, such as
MgH2 [119, 120].

Physically motivated empirical correction schemes pa-
rameterizing (semi-)local DFT errors with respect to
measured values are hence the only feasible option to en-
able materials design. Several correction methods based
solely on the composition of the materials were estab-
lished [111–114, 121]. These approaches were a major
step forward, but their accuracy is limited and the rel-
ative stability of polymorphs — sometimes erroneously
predicted by DFT [115] — cannot be corrected. More-
over, correction methods based only on composition can
lead to incorrect thermodynamic behavior when consid-
ering activity vs. concentration [27].
The coordination corrected enthalpies method.
The method of
coordination corrected enthalpies
(CCE) [27] presents a solution to this problem, improv-
ing on the established approaches both qualitatively and
quantitatively. CCE is the ﬁrst scheme to leverage struc-
tural information . Incorrect thermodynamic behavior is
avoided by construction. The method is based on the fol-
lowing physical insight: bonding is central to capturing
the properties of a material, with DFT revealing speciﬁc
errors for each bonding type. Thus, the number of bonds
in a material is a suitable descriptor to parameterize DFT
errors. The correction is hence developed per bond and
per oxidation state. The latter dependence ensures opti-
mal transferability of the corrections since the energetic
position of valence states is usually well characterized
by the oxidation state. The idea is further illustrated
in the example of Figs. 6(a-c):
in CaO, the Ca cations
are sixfold (octahedrally) coordinated by oxygen anions.
Ti is also sixfold coordinated by oxygen in rutile TiO2.
In perovskite CaTiO3, the coordination number for Ti
stays the same, but the number of Ca–O bonds changes
to eight. A variation in the number of bonds for a given
cation between diﬀerent materials is common and sig-
niﬁes that corrections to calculated DFT formation en-
thalpies should be obtained and applied per bond.

With binary compounds Ax1Yx2

used as the ﬁt set, the
CCE corrections δH Tr,A+α
per cation-anion A–Y bond
and cation oxidation state +α are obtained from the
diﬀerence between (zero-temperature and zero-pressure)
DFT and experimental standard room temperature for-
mation enthalpies [27, 28]:

A–Y

H 0,DFT

f,Ax1 Yx2 −

H ◦,Tr,exp
f,Ax1 Yx2

= x1NA–Y δH Tr,A+α

A–Y

,

f,Ax1 Yx2

where H 0,DFT
is the DFT formation enthalpy, H ◦,Tr,exp
f,Ax1 Yx2
is the measured standard formation enthalpy at the refer-
ence temperature Tr =298.15 K, and NA–Y is the number
of nearest neighbor A–Y bonds of element A in oxida-
tion state +α. Note that the DFT formation enthalpies
strictly include only the internal energy contributions to
the enthalpies and the small pressure-volume terms are
neglected [27].

21

compound Ax1 Bx2 . . . Yxn
enthalpy H ◦,Tr,CCE
f,Ax1 Bx2 . . . Yxn
cost compared to DFT:

to obtain the CCE formation
at no additional computational

H ◦,Tr,CCE

f,Ax1 Bx2 . . . Yxn

= H 0,DFT

f,Ax1 Bx2 . . . Yxn −
n−1
X

xiNi−Y δH Tr,i+α

i−Y

,

−

i=1

where Ni−Y is the number of nearest neighbor bonds
between the cation i and anion Y species. Temperature
eﬀects can also be parameterized on a per bond basis
such that, in addition to room temperature values, also
0 K formation enthalpies are computed [28].

The predictive power of CCE was validated on a test
for PBE [26],
set of 71 ternary oxides. DFT yields,
LDA [123, 124] and SCAN [125], mean absolute er-
rors (MAEs) of the calculated enthalpies of at least
100 meV/atom (Fig. 6(d)). The CCE values show an im-
provement by a factor of 4–7 to 38, 30 and 27 meV/atom
(Fig. 6(e)). These mean deviations are signiﬁcantly
smaller than the ones of 45 and 48 meV/atom predicted
by previous methods [113, 114]. The general applicabil-
ity of CCE was benchmarked on a set of ternary halides,
achieving the same accuracy [27]. CCE is also capable
of correcting the relative stability of polymorphs at ﬁxed
composition — a qualitative advantage versus all ear-
lier schemes — as demonstrated for several minerals and
In Fig. 6(f) this is in-
transition metal systems [27].
dicated in three examples. While plain PBE predicts
the andalusite polymorph of Al2SiO5 to be more sta-
ble than the experimentally known ground-state kyan-
ite (green dot), the application of CCE shifts andalusite
energetically above kyanite and retains the correct ener-
getic ordering (blue dot). Similarly, for CoO and MnO,
it predicts the correct ground-state rocksalt structure,
while DFT erroneously yields zincblende with only four
Co/Mn-O bonds [27]. Other correction methods based
on only composition cannot rectify the relative stability.
CCE also gives accurate defect energies evidenced from
investigating crystallographic shear compounds [27].
aflow-CCE. CCE is integrated into and is fully interop-
erable with existing aflow++ functionality [28]. aflow-
CCE returns the correction and the corrected formation
enthalpies for a given structure. It features a command-
line tool, a web interface, and a Python environment [28].
As shown in Fig. 7(a), the workﬂow analyzes the struc-
ture for cation coordination numbers, automatically de-
termines oxidation numbers based on Allen electronega-
tivities [126–128], includes temperature eﬀects, and cal-
culates the corrected formation enthalpies for the se-
lected functionals. The oxidation state determination in-
cludes the treatment of mixed-valence systems, such as
Ti-O Magnéli phases and alkali-metal sesquioxides. The
software is also readily applicable to (su-)peroxides and
multi-anion systems. The algorithms of the implementa-
tion are detailed in Ref. 28.

The corrections can then be applied to any multinary

The command-line tool (Figs. 7(b-g)) delivers the

22

FIG. 6. Motivation and validation of CCE. Crystal structures of (a) CaO, (b) rutile TiO2, and (c) perovskite CaTiO3.
While Ti is sixfold coordinated by O anions in both rutile and perovskite, Ca changes its coordination from sixfold (CaO) to
eightfold (CaTiO3, Ca–O bonds highlighted in yellow). This indicates an important change in the number of bonds critical for
the thermodynamic stability of a material. Deviation between (d) calculated (cid:0)H 0,DFT
(cid:1) as well
as (e) corrected (cid:0)H ◦,Tr,CCE
(cid:1) and experimental formation enthalpies for 71 ternary oxides. Red lines at ±50 meV/atom are
visual guides representing the typical MAE of previous methods [113, 114]. (f) Correction of the relative stability of Al2SiO5,
CoO, and MnO polymorphs. Color code: Ca, black; Ti, light gray; O, red [122].

(cid:1) and experimental (cid:0)H ◦,Tr,exp

f

f

f

CCE cation coordination numbers, oxidation numbers,
and corrections, as well as formation enthalpies for the
given structure ﬁle that can be in any format recog-
nizable by aflow++, like VASP POSCAR [58], Quantum
ESPRESSO [59], FHI-AIMS [20], ABINIT [19], ELK [21]
and CIF [60]. For VASP, a VASP5 POSCAR is required, or
if a VASP4 POSCAR is used, the species must be written
on the right side next to the coordinates for each atom
just as for the example input structure obtained from the
option --cce. If desired, oxidation numbers for all atoms
can also be provided upon input. The available options
include:

prints the results of the full CCE analysis, i.e., cation
coordination numbers, oxidation numbers, and CCE cor-
rections and formation enthalpies for the given structure.

aflow --get_cce_corrections < GEOM_FILE

determines the CCE corrections and formation enthalpies
for the structure.

aflow --get_oxidation_numbers < GEOM_FILE

determines the oxidation numbers for all atoms of the
structure.

aflow --cce

aflow --get_cation_coord_nums < GEOM_FILE

prints instructions and an example input structure.

aflow --cce=GEOM_FILE

determines the number of anion neighbors for each cation
of the structure.
Options
--get_cce_corrections < GEOM_FILE :

--cce=GEOM_FILE

and

for

Al2SiO5CoOMnO°200°1000100200energyrel.toexp.groundstate(meV/atom)PBECCE@PBESCANCCE@SCAN°4°3°2°10¢fH±,Tr,exp(eV/atom)°0.200.20.40.6¢fE0,DFT°¢fH±,Tr,exp(eV/atom)MAEPBE=273meV/atomMAELDA=109meV/atomMAESCAN=110meV/atomPBELDASCAN°4°3°2°10¢fH±,Tr,exp(eV/atom)°0.200.20.40.6¢fH±,Tr,CCE°¢fH±,Tr,exp(eV/atom)MAECCE@PBE=38meV/atomMAECCE@LDA=30meV/atomMAECCE@SCAN=27meV/atomCCE@PBECCE@LDACCE@SCANUncorrectedCorrectedabcRelative StabilityAl2SiO5CoOMnO°0.2°0.100.10.2energyrel.toexp.groundstate(eV/atom)PBECCE@PBESCANCCE@SCAN°4°4°3°3°2°2°1°100H±,Tr,expf(eV/atom)°0.200.20.40.6H0,DFTf°H±,Tr,expf(eV/atom)MAEPBE=273meV/atomMAELDA=109meV/atomMAESCAN=110meV/atomPBELDASCAN°4°4°3°3°2°2°1°100H±,Tr,expf(eV/atom)°0.200.20.40.6H±,Tr,CCEf°H±,Tr,expf(eV/atom)MAECCE@PBE=38meV/atomMAECCE@LDA=30meV/atomMAECCE@SCAN=27meV/atomCCE@PBECCE@LDACCE@SCANCaOTiO2(rutile)CaTiO3Al2SiO5CoOMnO°200°1000100200energyrel.toexp.groundstate(meV/atom)PBECCE@PBESCANCCE@SCAN°4°3°2°10¢fH±,Tr,exp(eV/atom)°0.200.20.40.6¢fE0,DFT°¢fH±,Tr,exp(eV/atom)MAEPBE=273meV/atomMAELDA=109meV/atomMAESCAN=110meV/atomPBELDASCAN°4°3°2°10¢fH±,Tr,exp(eV/atom)°0.200.20.40.6¢fH±,Tr,CCE°¢fH±,Tr,exp(eV/atom)MAECCE@PBE=38meV/atomMAECCE@LDA=30meV/atomMAECCE@SCAN=27meV/atomCCE@PBECCE@LDACCE@SCANUncorrectedCorrectedabcRelative StabilityAl2SiO5CoOMnO°0.2°0.100.10.2energyrel.toexp.groundstate(eV/atom)PBECCE@PBESCANCCE@SCANabcdef23

FIG. 7. aflow-CCE implementation. (a) Workﬂow of the CCE implementation. (b and d) Example commands for the
aflow-CCE command-line tool using the input structure ﬁle test.POSCAR (perovskite CaTiO3) to determine cation coordination
numbers and oxidation states. (c and e) When executed, the output is presented in tabular form. (f) Example command for
determining CCE corrections and formation enthalpies. Several other options to use extended functionality [28] are also
summarized in the main text. (g) When executed, the output includes the CCE corrections and formation enthalpies at both
298.15 and 0 K for various functionals.

• --enthalpies_formation_dft=enthalpies

:
enthalpies is a comma-separated list of precal-
culated DFT formation enthalpies. They are assumed
to be negative for compounds lower in enthalpy than
the elemental references and in eV/cell. Currently,
corrections are available for PBE, LDA, and SCAN.
• --functionals=functionals : functionals is a
functionals for which cor-
comma-separated list of
rections should be returned.
If used together with
--enthalpies_formation_dft, the functionals must
be in the same sequence as the corresponding forma-
tion enthalpies. Available functionals are PBE, LDA,
and SCAN. Default is PBE (if only one DFT formation
enthalpy is provided).

a

is

• --oxidation_numbers=oxidation_numbers

:
comma-separated list
oxidation_numbers
It is assumed that one is
of oxidation numbers.
provided for each atom of the structure and they are
in the same sequence as the corresponding atoms in
the provided structure ﬁle.
The output of these results can be returned as plain
text or a JSON format: --print=format , where format
can be txt or json, respectively. For the full set of
options and additional information, see the aflow-CCE
README:

aflow --readme=cce

The aflow-CCE implementation enables the enthalpy
correction of an extensive library of materials as well as
the accurate and quick generation of convex hull phase
diagrams [34]. The tool is also readily applicable to

reduced-dimensionality, e.g., 2D systems.
aflow-CCE
thus provides a valuable infrastructure for the scientiﬁc
community to obtain the CCE corrections and corrected
formation enthalpies for a given input structure. It can
also expedite various materials design applications, such
as the discovery of novel 2D systems and high-entropy
ceramics.

VII. THERMOMECHANICAL ANALYSIS

A.

aflow-AEL-AGL: The Automatic Elasticity and

GIBBS Libraries

AEL: Elastic constants. Thermomechanical proper-
ties of materials, such as elastic moduli, Debye temper-
ature, heat capacity and thermal expansion, can be ob-
tained using the aflow++ Automatic Elasticity Library
(aflow++-AEL [39]) and the aflow++ Automatic GIBBS
Library (aflow++-AGL [38]) modules based on calcula-
tions of strained primitive cells. These methods are
generally computationally less costly than the APL and
AAPL phonon calculations. However, APL and AAPL
generally give more quantitatively accurate results, par-
ticularly for properties where anharmonic eﬀects are im-
portant. AEL and AGL have been combined into a single
automated workﬂow, which has been used to calculate
the thermomechanical properties of over 6000 materials
in the aflow.org repositories.

The AEL module applies a set of independent normal
and shear strains to the primitive cell of a material [39,
40] as depicted in Fig. 8(a), and uses DFT to calculate

aflow--get_cce_corrections< test.POSCARfCCE CORRECTIONS:functional temperature correction correction(K)(eV/cell)(eV/atom)PBE298.15 +5.954 +0.298PBE 0 +5.538 +0.277LDA298.15 −3.377 −0.169LDA 0 −3.836 −0.192SCAN298.15 −3.678 −0.184SCAN 0 −4.124 −0.206CCE FORMATION ENTHALPIES:functional temperature form. enthalpy form. enthalpy(K)(eV/cell)(eV/atom)PBE298.15    −69.406     −3.470PBE 0    −68.990 −3.449LDA298.15     −68.707 −3.435LDA 0−68.248 −3.412SCAN298.15−68.734 −3.437SCAN 0−68.288 −3.414gread structure filedetermine oxidation numbersdetermine cation coord. numbersinclude temperature effectsreturn corrected form. enthalpiesaatom species oxidation state1Ca+22Ca+23Ca+24Ca+25 O−26 O−27 O−28 O−29 O−210 O−211 O−212 O−213 O−214 O−215 O−216 O−217Ti+418Ti+419Ti+420Ti+4atom species anion   coord. number1Ca O 82Ca O 83Ca O 84Ca O 817TiO 618TiO 619TiO 620TiO 6aflow--get_oxidation_numbers< test.POSCARaflow--get_cation_coord_nums< test.POSCARdebc24

7→

7→

7→

3, 23

1, 22

2, 33

5,
ping [129]: 11
12
6. The elastic constants are combined to calculate
the bulk, B, and shear, G, elastic moduli in the Voigt
approximation, which assumes a uniform strain with the
stress supported by the individual grains in parallel, giv-
ing the upper bound on the elastic moduli:

4, 13

7→

7→

7→

[(c11 + c22 + c33) + 2(c12 + c23 + c13)] ,

BVoigt =

GVoigt =

1
9
1
[(c11 + c22 + c33)
15
−
+3(c44 + c55 + c66)] ;

(c12 + c23 + c13) +

the Reuss approximation, which assumes a uniform stress
so that the strain is the sum of the strains of the individ-
ual grains in series, giving the lower bound on the elastic
moduli:

B−1

Reuss = (s11 + s22 + s33) + 2(s12 + s23 + s13),

G−1

Reuss =

1
[4(s11 + s22 + s33)
15
+3(s44 + s55 + s66)] ;

−

4(s12 + s23 + s13)+

and Voigt-Reuss-Hill (VRH, BVRH and GVRH [130]) aver-
age:

BVRH = (BVoigt + BReuss) /2,
GVRH = (GVoigt + GReuss) /2.

The Poisson ratio ν is given by:

ν =

3BVRH
2GVRH
−
6BVRH + 2GVRH

.

(1)

Performing AEL calculations. The settings for AEL
calculations are provided in the aflow.in ﬁle. To run
AEL, the line [AFLOW_AEL]CALC needs to be present
and uncommented — an appropriate aflow.in can
be generated by including the --module=ael ﬂag to
the ﬁle generation command (--aflow_proto). AEL
can reduce the number of required strains by setting
[AFLOW_AEL]STRAIN_SYMMETRY=ON. The number and size
of the strains in each independent direction can be con-
trolled using the parameters:

[AFLOW_AEL]NNORMAL_STRAINS=value
[AFLOW_AEL]NSHEAR_STRAINS=value
[AFLOW_AEL]NORMAL_STRAIN_STEP=value
[AFLOW_AEL]NORMAL_STRAIN_STEP=value

A full list of parameters is available in the AEL README,
which can be printed using the command

aflow --readme=ael

AGL: Debye-Grüneisen model. The AGL module is
based on the GIBBS [131, 132] quasi-harmonic Debye-
Grüneisen method, and calculates the energy as a func-
tion of volume, E(V ), for a set of isotropically com-
pressed and expanded strains of the primitive cell, as

FIG. 8. Calculations of thermomechanical properties
in aflow++.
(a) AEL uses the stresses from a set of nor-
mal and shear strained cells to obtain the elastic constants.
(b) AGL calculates the energies of a set of isotropically com-
pressed and expanded unit cells, and ﬁts the resulting E(V )
data by a numerical polynomial or by an empirical equation
of state to obtain the bulk modulus, and hence other thermal
and mechanical properties.

the resulting stress tensors. This set of strain-stress data
is used to generate the elastic stiﬀness tensor, i.e., the
elastic constants:



















σ11
σ22
σ33
σ23
σ13
σ12

=










c11 c12 c13 c14 c15 c16
c12 c22 c23 c24 c25 c26
c13 c23 c33 c34 c35 c36
c14 c24 c34 c44 c45 c46
c15 c25 c35 c45 c55 c56
c16 c26 c36 c46 c56 c66




























(cid:15)11
(cid:15)22
(cid:15)33
2(cid:15)23
2(cid:15)13
2(cid:15)12

written in the 6

×

6 Voigt notation using the map-

2030405060Volume (Å3)-12-11-10-9-8-7Energy (eV)E (DFT)Polynomial fitba…,              ,              ,                   ,…Normal strainShear strainDFTEqn. ofState:B(V)<latexit sha1_base64="pBOiPTofVTmM+IZ9XF7Kwr4yzKw=">AAAB/HicbVDLSsNAFJ34rPUV7dJNsAiuSiKiLou6cFnBPqAJYTKdtEMnkzBzI4QQf8WNC0Xc+iHu/BsnbRbaemDgcM693DMnSDhTYNvfxsrq2vrGZm2rvr2zu7dvHhz2VJxKQrsk5rEcBFhRzgTtAgNOB4mkOAo47QfTm9LvP1KpWCweIEuoF+GxYCEjGLTkmw0XJhSwn7sRhomM8tui8M2m3bJnsJaJU5EmqtDxzS93FJM0ogIIx0oNHTsBL8cSGOG0qLupogkmUzymQ00Fjqjy8ln4wjrRysgKY6mfAGum/t7IcaRUFgV6soyoFr1S/M8bphBeeTkTSQpUkPmhMOUWxFbZhDVikhLgmSaYSKazWmSCJSag+6rrEpzFLy+T3lnLuWg59+fN9nVVRw0doWN0ihx0idroDnVQFxGUoWf0it6MJ+PFeDc+5qMrRrXTQH9gfP4AiVOVWQ==</latexit>✓D<latexit sha1_base64="1HbveT5JU6V0eK6wHlVYfExiar0=">AAAB7XicbVDLSgNBEOz1GeMr6tHLYBA8hV0R9Rj04jGCeUCyhN7JbDJmZnaZmRVCyD948aCIV//Hm3/jJNmDJhY0FFXddHdFqeDG+v63t7K6tr6xWdgqbu/s7u2XDg4bJsk0ZXWaiES3IjRMcMXqllvBWqlmKCPBmtHwduo3n5g2PFEPdpSyUGJf8ZhTtE5qdPooJXZLZb/iz0CWSZCTMuSodUtfnV5CM8mUpQKNaQd+asMxasupYJNiJzMsRTrEPms7qlAyE45n107IqVN6JE60K2XJTP09MUZpzEhGrlOiHZhFbyr+57UzG1+HY67SzDJF54viTBCbkOnrpMc1o1aMHEGqubuV0AFqpNYFVHQhBIsvL5PGeSW4rAT3F+XqTR5HAY7hBM4ggCuowh3UoA4UHuEZXuHNS7wX7937mLeuePnMEfyB9/kDiOOPGw==</latexit> <latexit sha1_base64="02ZaCSnozEERwi7vxj8uvYnFd68=">AAAB8XicbVBNSwMxEJ2tX7V+VT16CRahQim7Iuqx6EGPFfohtkvJptk2NJsNSVYoS/+FFw+KePXfePPfmLZ70NYHA4/3ZpiZF0jOtHHdbye3srq2vpHfLGxt7+zuFfcPWjpOFKFNEvNYPQRYU84EbRpmOH2QiuIo4LQdjG6mfvuJKs1i0TBjSf0IDwQLGcHGSo+3ZVlBjQpqnfaKJbfqzoCWiZeREmSo94pf3X5MkogKQzjWuuO50vgpVoYRTieFbqKpxGSEB7RjqcAR1X46u3iCTqzSR2GsbAmDZurviRRHWo+jwHZG2Az1ojcV//M6iQmv/JQJmRgqyHxRmHBkYjR9H/WZosTwsSWYKGZvRWSIFSbGhlSwIXiLLy+T1lnVu6h69+el2nUWRx6O4BjK4MEl1OAO6tAEAgKe4RXeHO28OO/Ox7w152Qzh/AHzucPAfGPLg==</latexit>G(p,T,V)<latexit sha1_base64="bDcpXQQEVkLzG1/ktotYNHbatLc=">AAAB/HicbVDLSsNAFJ34rPUV7dLNYBFclUREXRbduHBRwT6gCWEynbRDZyZhZiKEEH/FjQtF3Poh7vwbJ20W2npg4HDOvdwzJ0wYVdpxvq2V1bX1jc3aVn17Z3dv3z447Kk4lZh0ccxiOQiRIowK0tVUMzJIJEE8ZKQfTm9Kv/9IpKKxeNBZQnyOxoJGFCNtpMBueFOUJCjIPY70RPL8rigCu+m0nBngMnEr0gQVOoH95Y1inHIiNGZIqaHrJNrPkdQUM1LUvVSRBOEpGpOhoQJxovx8Fr6AJ0YZwSiW5gkNZ+rvjRxxpTIemskyolr0SvE/b5jq6MrPqUhSTQSeH4pSBnUMyybgiEqCNcsMQVhSkxXiCZIIa9NX3ZTgLn55mfTOWu5Fy70/b7avqzpq4Agcg1PggkvQBregA7oAgww8g1fwZj1ZL9a79TEfXbGqnQb4A+vzB4dDlVg=</latexit>L<latexit sha1_base64="lN35LYDYqJ3gdEAdPaLhrkqW6d8=">AAAB/HicbVDLSsNAFJ3UV62vaJduBovgqiQi6rLoxmUF+4AmhMl00g6dmYSZiRBC/BU3LhRx64e482+ctFlo64GBwzn3cs+cMGFUacf5tmpr6xubW/Xtxs7u3v6BfXjUV3EqMenhmMVyGCJFGBWkp6lmZJhIgnjIyCCc3Zb+4JFIRWPxoLOE+BxNBI0oRtpIgd30EEumKMg9jvRU8rxfFIHdctrOHHCVuBVpgQrdwP7yxjFOOREaM6TUyHUS7edIaooZKRpeqkiC8AxNyMhQgThRfj4PX8BTo4xhFEvzhIZz9fdGjrhSGQ/NZBlRLXul+J83SnV07edUJKkmAi8ORSmDOoZlE3BMJcGaZYYgLKnJCvEUSYS16athSnCXv7xK+udt97Lt3l+0OjdVHXVwDE7AGXDBFeiAO9AFPYBBBp7BK3iznqwX6936WIzWrGqnCf7A+vwBi3mVWw==</latexit>↵V<latexit sha1_base64="f9Lr1Y0iOZF1anv5N0PqVkDrORM=">AAACB3icbVDLSgMxFM3UV62vUZeCBIvgQsqMiLosduOygn1AOwyZNNOGJpkhyQhlmJ0bf8WNC0Xc+gvu/Bsz7Sxq64HAyTn3cu89Qcyo0o7zY5VWVtfWN8qbla3tnd09e/+graJEYtLCEYtkN0CKMCpIS1PNSDeWBPGAkU4wbuR+55FIRSPxoCcx8TgaChpSjLSRfPu44ad9jvRI8rSdZedw7h9nmW9XnZozBVwmbkGqoEDTt7/7gwgnnAiNGVKq5zqx9lIkNcWMZJV+okiM8BgNSc9QgThRXjq9I4OnRhnAMJLmCQ2n6nxHirhSEx6YynxFtejl4n9eL9HhjZdSESeaCDwbFCYM6gjmocABlQRrNjEEYUnNrhCPkERYm+gqJgR38eRl0r6ouVc19/6yWr8t4iiDI3ACzoALrkEd3IEmaAEMnsALeAPv1rP1an1Yn7PSklX0HII/sL5+AbcCmd0=</latexit>CV,Cpillustrated in Fig. 8(b). The E(V ) data are ﬁtted by ei-
ther a numerical polynomial or an empirical equation of
state to obtain the adiabatic bulk modulus BS(V ). The
Debye temperature θD(V ) as a function of volume is then
calculated using the expression:

θD =

(cid:126)

kB

[6π2V 1/2n]1/3f (ν)

r

BS
M

,

(2)

where n is the number of atoms per unit cell, M is the
unit cell mass, and f (ν) is a function of the Poisson ratio
ν:

f (ν) =

"
2

3






(cid:18) 2
3 ·

1 + ν
2ν
1

−

(cid:19)3/2
+

(cid:18) 1
3 ·

1 + ν
1
ν

−

(cid:19)3/2#−1


1
3

,



where ν can be obtained from Eq. 1 using AEL, or set di-
rectly by the user ([AFLOW_AGL]POISSON_RATIO=value ).
The vibrational contribution to the free energy, Fvib, is
given by:

Fvib(θD; T ) = nkBT

(cid:20) 9
8

θD
T

+3 log

(cid:16)

1

e−θD/T(cid:17)
−

D

−

(cid:19)(cid:21)

,

(cid:18) θD
T

where D(θD/T ) is the Debye integral:

D (θD/T ) = 3

ex
The Gibbs free energy is obtained from:

0

−

1 dx.

(cid:19)3 Z θD/T

x3

(cid:18) T
θD

G(V ; p, T ) = EDFT(V ) + Fvib(θD(V ); T ) + pV.

The volume which minimizes G(V ; p, T ) at a given pres-
sure p and temperature T is the equilibrium volume Veq,
which is used to evaluate θD(Veq) and the Grüneisen pa-
rameter γ, as deﬁned by:

γ =

∂ log(θD(V ))
∂ logV

.

−

Finally, θD and γ are used to calculate other thermal
properties [38, 131] including speciﬁc heat capacity at
constant volume CV:
(cid:20)

(cid:19)

(cid:21)

CV = 3nkB

4D

(cid:18) θD
T

3θD/T
exp(θD/T )

−

;

1

−

volumetric thermal expansion αV:
αV = γCV
BTV

,

where BT is the isothermal bulk modulus; speciﬁc heat
capacity at constant pressure Cp:

Cp = CV(1 + γαVT );

and κL [133–135]:

κL(θa) =

×
a + 0.228γ−2

a ) ×

3 3√4

0.849
0.514γ−1
(cid:19)2 kBmV 1

3

,

(cid:126)γ2
a

20π3(1

−
(cid:18) kBθa
(cid:126)

×

25

where θa and γa is the Debye temperature and Grüneisen
parameter calculated from only the acoustic modes.
Performing AGL calculations. The settings for
AGL calculations are provided in the aflow.in ﬁle.
To run AGL, the line [AFLOW_AGL]CALC needs to be
present and uncommented — an appropriate aflow.in
can be generated by including the --module=agl ﬂag
to the ﬁle generation command (--aflow_proto). AGL
can run AEL to obtain the Poisson ratio for use in
Eq. 2 to calculate the Debye temperature by set-
ting [AFLOW_AGL]AEL_POISSON_RATIO=ON. The number
of diﬀerent volumes and the size of the strain steps can
be controlled using the parameters:

[AFLOW_AGL]NSTRUCTURES=value
[AFLOW_AGL]STRAIN_STEP=value

The number of temperature and pressure points and the
corresponding step sizes for the post-processing can be
controlled using the parameters:

[AFLOW_AGL]NTEMP=value
[AFLOW_AGL]STEMP=value
[AFLOW_AGL]NPRESSURE=value
[AFLOW_AGL]SPRESSURE=value

Note that the post-processing can be run multiple times
with diﬀerent temperature and pressure ranges for the
same set of DFT calculations. A full list of parameters
is available in the AGL README, which can be printed
using the command:

aflow --readme=agl

B.

aflow-APL: The Automatic Phonon Library

Phonons in the harmonic approximation. Phonons
are the basis for many ﬁnite-temperature processes in
solids. They can contribute to the stabilization of a ma-
terial, determine thermophysical properties such as heat
capacities and thermal expansion, and are responsible
for transport phenomena such as thermal conductivity.
The aflow++ Automatic Phonon Library (APL) calcu-
lates phonon modes in the harmonic approximation by
diagonalizing the dynamical matrix D (q) [41]:

D (q) eλ = ω2

λeλ,

where the phonon mode λ =
is a combined index
consisting of the reciprocal space point q and the branch
index j. ωλ and eλ are the frequency and the eigenvec-
tor of the mode, respectively. The components of the
dynamical matrix are [136]:

q, j

{

}

Dαβ (κκ0

q) =
|

1
√mκmκ0
exp [iq

×

X

Φαβ (lκ; l0κ0)

l0
(Rl0

·

−

Rl)] ,

×

(3)

with the Cartesian indices α and β, the atomic indices
κ and κ0, and the supercell indices l and l0. mκ is the

mass of atom κ and Rl is the vector connecting the origin
of the crystal to the origin of supercell l. Φαβ (lκ; l0κ0)
are the harmonic interatomic force constants (IFCs), the
calculation of which is the central problem for phonon
calculations. APL can obtain them either from Γ-point
density functional perturbation theory or through the ﬁ-
nite displacement method.

The ﬁnite displacement method applies small distor-
tions to the atomic positions inside a supercell and cal-
culates the forces using DFT. For a full set of IFCs, each
symmetrically-inequivalent atom needs to be displaced
along three linearly-independent directions. To minimize
the number of calculations, APL uses the following algo-
rithm:

i. Create test displacements along the unit cell axes,

face diagonals, and body diagonal.

ii. Generate a set of displacement vectors that are
orthogonal and symmetrically equivalent to the
test displacement using the site point group of the
atom [49] and Gram-Schmidt orthogonalization.
iii. Sort these sets of displacements by the number of

equivalent vectors from highest to lowest.

iv. Take the displacements inside the ﬁrst set of this
If there are less than three, add the
sorted list.
displacements in the next set of the list and use the
Gram-Schmidt method and the site point groups
to create orthogonal vectors. Repeat until three
linearly-independent directions are found.

This algorithm not only reduces computational require-
ments by minimizing the number of calculations, us-
ing site point groups to generate the displacements also
leads to supercells with the highest possible symme-
try. The calculated forces are then used to determine
the IFCs through ﬁnite diﬀerences. These “raw” force
constants do not generally fulﬁll the acoustic sum rule
P
κ0 Φαβ (lκ; l0κ0) = 0 nor are they commensurate with
the site point groups of the atoms in the crystal. APL
automatically enforces these properties when calculating
the IFCs. The dynamical matrix can then be constructed
to solve Eq. 3.

The resulting frequencies are used to obtain phonon
dispersions and DOS. The DOS g(ω) can be used to cal-
culate the vibrational free energy Fvib, internal energy
Uvib, and entropy Svib, as well as the isochoric heat ca-
pacity CV:

Fvib(T ) = kBT

Z ∞

(cid:18)

2 sinh

log

Uvib(T ) =

0
(cid:126)ω
2

Z ∞

0

coth

(cid:18) (cid:126)ω
2kBT

(cid:126)ω
2kBT
(cid:19)

g(ω)dω,

(cid:19)

g(ω)dω,

Svib(T ) = Uvib

CV(T ) = kB

Fvib

,
(cid:18) (cid:126)ω
2kBT

(cid:19)

csch2

(cid:126)ω
2kBT

g(ω)dω,

−
T
Z ∞

0

26

where kB and (cid:126) are the Boltzmann and the reduced
Planck constant, respectively. Additionally, APL can cal-
culate group velocities vλ and mean square atomic dis-
placements

using the eigenvectors:

D
u
|

2E
|

(cid:28)

vλ =

(cid:12)
(cid:12)
(cid:12)
(cid:12)

∂D(q)
∂q

(cid:12)
(cid:12)
(cid:12)
(cid:12)

(cid:29)

eλ

,

eλ

(cid:126)

D

uα(κ, T )
|
|

2E

=

Nqmj

X

ω−1
λ

λ

(cid:18) 1
2

(cid:19)

+ nλ

eα
λ

(κ)
|

|

2 ,

with Nq and nλ being the number of q-points and the
phonon numbers based on the Bose-Einstein distribution,
respectively.

Long-range Coulomb interactions in polar materials
cause splitting between the longitudinal and transversal
optical phonon modes (LO-TO splitting). This requires a
corrective term ˜D to be added to the dynamical matrix.
aflow++ uses the method by Wang et al. to calculate this
correction [137]:

˜Dκκ0

αβ

=

4πe
V √mκmκ0
X

×

l0

[qZ ∗(i)]
α
qε∞q

[qZ ∗(i)]
β

×

exp [iq

(Rl0

·

−

Rl)] ,

where e, Z ∗, and ε∞ are the elemental charge, the Born
eﬀective charge tensor, and the dielectric tensor, respec-
tively. The tensors can be directly calculated by VASP.
The settings for
Performing APL calculations.
phonon calculations are driven by the aflow.in ﬁle. A
full list of parameters is available in the APL README,
which can be created using the command:

aflow --readme=apl

To run APL, the line [AFLOW_APL]CALC needs to be
present. This can be achieved programmatically by
adding --module=apl to the input ﬁle generation com-
mand (--aflow_proto). The ﬂowchart of the APL work-
ﬂow is shown in Fig. 9(a).

Since phonon properties require accurate forces, the
structure needs to be relaxed so that the forces are near
zero. This is done automatically by APL at the begin-
ning of the workﬂow. The following parameters guide the
relaxation calculations:

[AFLOW_APL]RELAX=ON
[AFLOW_APL]RELAX_COMMENSURATE=ON
[AFLOW_APL]KPPRA=Nk
[AFLOW_APL]KPOINTS_GRID=k1xk2xk3

[AFLOW_APL]RELAX_COMMENSURATE=ON ensures that the
the force cal-
k-point grids of
the supercell
the relaxation calcula-
culations and the grid of
tions are
the ac-
curacy of
It can be tog-
gled oﬀ with [AFLOW_APL]RELAX_COMMENSURATE=OFF.

commensurate, which increases
the obtained forces.

for

27

FIG. 9. Workﬂow and outputs of the Automatic Phonon Library (APL) (a) Flowchart of the APL workﬂow. (b) Iso-
choric heat capacity CV of zincblende BAs. (c) Combined phonon dispersion and projected DOS plot for BAs. (d) Snapshot
of a phonon mode visualization at the X point for rocksalt MgO.

To determine the grid size, [AFLOW_APL]KPPRA or
[AFLOW_APL]KPOINTS_GRID are used, which represent
the k-points per reciprocal atom Nk or the k-point
grid dimensions, respectively, for the supercell. Con-
vergence criteria are set such that the forces between

two successive ionic steps are below 10−3 eV/Å and en-
ergy diﬀerences are below 10−8 eV between electronic
steps. The relaxation can be skipped entirely by setting
[AFLOW_APL]RELAX=OFF.

After the relaxation, APL builds the supercell using

abdcAPLaflow.inrelaxstructureIFCmethodcreatesupercelldisplaceatomscreatedirectoriesendoutput filescalc. IFCscalc. ωλcalc.propertiesDFT calc.ARUNDFT calc.ARUN. . .LRDMeither explicit dimensions, a minimum number of atoms,
or a number of coordination shells around each atom:

[AFLOW_APL]SUPERCELL=3x3x3
[AFLOW_APL]MINATOMS=175
[AFLOW_APL]MINSHELL=10

SUPERCELL takes priority, followed by MINATOMS. APL
then creates subdirectories for the force calculations us-
ing DFT. This process is governed by the following
aflow.in parameters:

[AFLOW_APL]ENGINE=method
[AFLOW_APL]DPM=ON
[AFLOW_APL]DMAG=rdispl
[AFLOW_APL]ZEROSTATE=OFF
[AFLOW_APL]POLAR=ON

[AFLOW_APL]ENGINE determines the method to calculate
the force constants. It can be LR or DM, corresponding to
the linear response (Γ-point density functional perturba-
tion theory) and the direct method (ﬁnite displacement),
respectively. The former generates one subdirectory as
the force constants are directly calculated by VASP.

The ﬁnite displacement method provides two ways to
the central and the forward dif-
determine the IFCs:
ference methods. [AFLOW_APL]DPM=ON always uses the
central diﬀerence method, [AFLOW_APL]DPM=OFF always
uses forward diﬀerences, and [AFLOW_APL]DPM=AUTO de-
termines for each site whether the forward diﬀerence
is permitted by symmetry. The size of the displace-
ment rdispl (in Ångström) is set by DMAG. Additionally,
[AFLOW_APL]ZEROSTATE can be used to calculate the
forces on the atom in the unperturbed supercell, which
can be used to subtract noise for the forward diﬀerence
method or to test whether virtual forces are present in the
supercells. For both methods, [AFLOW_APL]POLAR=ON
applies the non-analytical term correction, resulting in
an additional subdirectory to calculate Z ∗ and ε0.

Each subdirectory contains an aflow.in ﬁle for a
static DFT calculation and needs to be run sepa-
rately. These calculations have a convergence criterion of
10−8 eV between electronic steps and use the k-point pa-
rameters described earlier. Once ﬁnished, aflow++ needs
to be run in the parent directory again to read the forces,
determine the IFCs, and calculate phonon dispersions,
DOS, and thermophysical properties. Important settings
for this post-processing step include:

[AFLOW_APL]DOS_PROJECT=OFF
[AFLOW_APL]TPT=Tstart:Tend:Tstep

where [AFLOW_APL]DOS_PROJECT determines whether
atom-projected DOS are calculated and [AFLOW_APL]TPT
sets the start and end temperatures and the temperature
step size for thermophysical properties and atomic dis-
placements.
Visualization options. APL provides several output
options for its calculations. Thermophysical properties
can be plotted and saved as an image by calling:

28

of

--plotthermo

accepts multiple

the directory

aflow --plotthermo
optional
where
the phonon calcula-
inputs:
current directory), and the minimum
tion (default:
(de-
(Tmin)
and maximum (Tmax)
temperatures
fault:
i.e.,
full range of calculated temperatures);
--plotthermo=directory,Tmin,Tmax. An example plot
for the isochoric heat capacity is presented in Fig. 9(b).
Moreover,
the following additional options may be
speciﬁed:
• --title=title : Title of the plot.
aflow++ will generate a generic one.

If not used,

• --print=pdf : Output format of the image. Options

include: eps, gif, jpg, png.

• --outfile=outfile : Name of the output image. If

unused, aflow++ will generate a generic name.

Phonon dispersion and phonon DOS can be plotted in
the same manner using aflow --plotphdisp and aflow
--plotphdos, respectively, or as a combined plot with
aflow --plotphdispdos (see Fig. 9(c)). For these plots,
Tmin and Tmax are replaced by the minimum and maxi-
mum frequency, respectively. Additionally, the following
options can be speciﬁed:
• --unit=THz : Unit of the frequencies. Options include:

Hz, eV, meV, rcm, and cm-1.

• --projection=atoms : Plot atom-projected DOS.
Individual phonon modes can be exported into animation
ﬁles that can be read by the XCrysDen software and con-
verted into videos or GIFs [138]. This can be done with
the aflow --visualize_phonons command. It has the
following mandatory options:
• --q=qpoints :

the q-points as comma-separated
triplets in fractional coordinates, e.g., 0.5,0.5,0.5.
Multiple q-points can be speciﬁed.

• -D directory : the directory of the phonon calcula-

tion.

The following are optional:
• --amplitude=amplitudes : Amplitude of the dis-

placements.

• --branches=branches : Branch numbers of the

phonon mode as a comma-separated list.

• --periods=periods : Number of oscillation periods

displayed in the output ﬁle.

• --steps=steps : Number of steps per period.
• --scell=s1xs2xs3 : Supercell dimensions of the struc-

ture in the animation.

A snapshot of such a visualization GIF can be found in
Fig. 9(d).

C.

aflow-QHA: The Quasi-Harmonic

Approximation Library

from phonons.
Thermomechanical properties
Phonon frequencies strongly depend on the volume of
the structure, as shown in Fig. 10(a). In the harmonic
approximation, they are calculated at equilibrium vol-

29

ume Veq, i.e., the volume at 0 K. At ﬁnite temperatures,
the volume of the structure changes, which also changes
the phonon frequencies and thus Fvib. Knowledge about
the volume-temperature curve is thus essential for a more
accurate calculation of a material’s free energy and ther-
momechanical properties.

The free energy can be calculated as:

F (V, T ) = E0(V ) + Felec(V, T ) + Fvib(V, T ),

where E0 is the potential energy and Felec the electronic
free energy:

The Grüneisen parameter can also be obtained as a
mode-dependent quantity:

γλ(T ) =

V (T )
ωλ(T )

∂ωλ(T )
∂V

.

−

(4)

Performing QHA calculations. QHA calculations are
activated by adding [AFLOW_QHA]CALC into the aflow.in
ﬁle or by calling the input ﬁle generation command
(--aflow_proto) with the --module=qha option. A full
list of parameters is available in the APL README, which
can be created using the command:

Felec(V, T ) =

Z ∞

ge ((cid:15), V ) [fFD

kBT sT ((cid:15))] d(cid:15)

−

−

aflow --readme=apl

0

Z EF

−

0

ge ((cid:15), V ) d(cid:15).

Here, ge ((cid:15), V ) is the electronic DOS, fFD = fFD ((cid:15), T )
is the Fermi-Dirac distribution, EF is the Fermi energy,
fFD) is the
and sT((cid:15)) = fFD log(fFD) + (1
electronic entropy of (cid:15).

fFD) log(1

−

−

The aflow-QHA workﬂow is similar to aflow-APL in that
it consists of a relaxation, a subdirectory creation, and
a post-processing step. The subdirectories, however, are
diﬀerent from APL and depend on the properties that are
calculated. Calculating thermomechanical properties by
ﬁtting F (V ) to an EOS is set by [AFLOW_QHA]EOS in the
aflow.in ﬁle:

In the quasi-harmonic approximation (QHA) [42, 43],
Veq(T ) is obtained by calculating F (T ) over a set of vol-
umes Vi and ﬁtting the volume-dependent free energy to
an equation of state (EOS) for each temperature. aflow-
QHA provides the Murnaghan EOS [139]:

[AFLOW_QHA]EOS=ON
[AFLOW_QHA]EOS_DISTORTION_RANGE=Vstart:Vend:Vstep
[AFLOW_QHA]EOS_MODEL=EOS
[AFLOW_QHA]INCLUDE_ELEC_CONTRIB=ON
[AFLOW_QHA]PDIS_T=temperatures

F (V ) = Feq +

BVeq

B0 (B0

−

(cid:19)1−B0

(cid:18) V
Veq

1)

+ BV

B0 −

BVeq
1 ,
B0

−

where B is the bulk modulus and B0 its pressure deriva-
tive; the nth order Birch-Murnaghan EOS (2
4) [140]:

≤

≤

n

F (V ) =

n
X

fiV − 2

3 i,

i=0
where fi are parameters obtained from a polynomial ﬁt;
and the stabilized jellium EOS [141, 142]:

F (V ) =

3
X

fiV − 1

3 i.

i=0
The ﬁtted EOS can then be used to calculate a variety
of thermomechanical properties, such as the volumetric
thermal expansion coeﬃcient β, the bulk modulus B, the
isochoric and isobaric heat capacities CV and CP, and the
average Grüneisen parameter γ:

β(T ) = d log Veq(T )

dT

=

1
Veq(T )

dVeq(T )
dT

,

,

B(T ) = V (T ) ∂2F (V, T )
∂V 2
∂2F (V, T )
∂T 2
CP(T ) = CV(T ) + Veq(T )B(T )β2(T )T,

CV(T ) =

−

T

,

γ(T ) = β(T )B(T )Veq(T )C −1
V

(T ).

by

are

and

static

phonon

volumes,

requires
at multiple

calcula-
This
deter-
tions
which
mined
[AFLOW_QHA]EOS_DISTORTION_RANGE.
[AFLOW_QHA]EOS_MODEL selects the EOS that is used
to ﬁt F (V ) using the Murnaghan (M), nth order Birch-
Murnaghan (BMn ), or the stabilized jellium (SJ) model.
[AFLOW_QHA]INCLUDE_ELEC_CONTRIB includes or ex-
cludes Felec into the free energy. For this procedure,
two subdirectories are created for each volume, one
for a static calculation to obtain E0 and Felec and
another one for a phonon calculation to determine
Fvib. The latter is an aflow-APL run without any prior
structure relaxation. After ﬁnishing all subdirectories,
post-processing can be started by running aflow inside
[AFLOW_QHA]PDIS is a
the parent directory again.
comma-separated list of temperatures for which phonon
dispersions are calculated. The temperature range for
thermomechanical properties is set via [AFLOW_APL]TPT.
It is also possible to only calculate the Grüneisen dis-

persion using the following options:

[AFLOW_QHA]GP_FINITE_DIFF=ON
[AFLOW_QHA]GP_DISTORTION=∆V

This results in three APL subdirectories at Veq and ∆V %
compression and expansion.
Visualization options. aflow-QHA provides several
output options for its calculated properties. Ther-
mophysical properties can be plotted analogously to
--plotthermo for APL:
aflow --plotthermoqha

30

FIG. 10. Properties calculated by aflow-QHA and aflow-AAPL. (a) Volume-dependent phonon dispersion, (b) volu-
metric thermal expansion coeﬃcient β, and (c) dispersion of Grüneisen parameters of Al. (d) Thermal conductivity tensor
components of diamond.

of

where --plotthermoqha accepts multiple optional
inputs:
the QHA calcula-
the
directory
current directory), and the minimum
tion (default:
(de-
(Tmin)
and maximum (Tmax)
temperatures
fault:
i.e.,
full range of calculated temperatures);
--plotthermoqha=directory,Tmin,Tmax. An example
plot for the volumetric thermal expansion coeﬃcient of
aluminum is shown in Fig. 10(b). The EOS model can
be speciﬁed using --eosmodel=M which also accepts BM2,
BM3, BM4, and SJ.

The Grüneisen parameter dispersion can be plotted
the same way using --plotgrdisp. For this plot, Tmin
and Tmax are replaced by the minimum and maximum
Grüneisen parameter. An example plot can be found in
Fig. 10(c).

D.

aflow-AAPL: The Automatic Anharmonic

Phonon Library

Both aflow-APL
Lattice thermal conductivity.
and aflow-QHA use harmonic phonons to describe the
vibrations inside a material, which neglects phonon-
phonon scattering. The aflow++ Automatic Anharmonic
Phonon Library (AAPL) includes these interactions ex-
plicitly for three-phonon processes, allowing it to calcu-
late the lattice thermal conductivity of a material [44].

The thermal conductivity tensor k can be calculated as:

kαβ =

(cid:126)2
kBT 2

X

λ

ωλnλ (nλ + 1) vλαFλβ.

Fλ is the mean-free displacement of the mode and can
be expanded as a ﬁrst-order perturbation:

Fλ = τ 0
λ

(vλ + ∆λ) ,

where ∆λ is the perturbation and τ 0
is the relaxation
λ
time, or inverse scattering rate, of the phonon mode. For
lattice thermal conductivity, the scattering rate consists
of three components:

(cid:0)τ 0

λ

(cid:1)−1 =

(cid:16)

τ ph-ph
λ

(cid:17)−1

+ (cid:0)τ iso

λ

(cid:1)−1 +

(cid:16)

τ grain
λ

(cid:17)−1

.

(cid:16)

τ grain
λ

(cid:17)−1

is the grain boundary scattering rate:

(cid:16)

τ grain
λ

(cid:17)−1

= |

vλ
L

,

|

with L being the size of the grain. (τ iso
λ
scattering rate:

)−1 is the isotope

(cid:0)τ iso

λ

(cid:1)−1 =

1

Nq

X

λ0

πω2
λ
2

X

g(κ)

κ

e∗
λ
|

(i)eλ(i)
|

2 δ(ωλ

−

ωλ0),

abdcwhere g(i) is the Pearson deviation coeﬃcient of masses
of the isotopes of atom κ. The weights δ can be calculated
using the linear tetrahedron method [65, 143].

(cid:16)

(cid:17)−1

τ ph-ph
λ

are the phonon-phonon scattering rates
and are the most computationally expensive terms to ob-
tain:

(cid:16)

τ ph-ph
λ

(cid:17)−1

=

"

1

X

Nq

λ0λ00

(nλ0

−

nλ00) W +

λλ0λ00 +

nλ0 + nλ00 + 1
2

#

W −

λλ0λ00

,

+ X
λ0λ00

where W are intrinsic scattering rates. W +
λλ0λ00 refers to
λλ0λ00 to
the combination of modes λ and λ0 into λ00 and W −
the splitting of λ into λ0 and λ00. They can be calculated
using:

W ±

λλ0λ00 =

(cid:126)π
4

2

|

|

V±
ωλωλ0ωλ00
δ (q

q0

ωλ0

ωλ00 )

×

−

δ (ωλ

±
q00 + G) .

±

×

−
The δ-terms imply that only processes that conserve en-
ergy and quasi-momentum (with a phase of a reciprocal
lattice vector G) are considered. V± is the scattering
matrix:

V± = X Φαβγ (lκ; l0κ0, l00κ00)

eα
λ

(κ)eβ

±λ0(κ0)eγ
√mκmκ0mκ00

−λ00 (κ00)

×

31

In this case, it will set the cutoﬀ to at least 5.5 Å while
also containing at least six coordination shells. To use
only one option, the other needs to be set to zero. IFCs
between pairs with a distance beyond the cutoﬀ are set
to zero. After determining these pairs, they are re-
duced by symmetry with aflow-SYM to only contain
symmetrically-inequivalent ones [49], which results in
fewer calculations than in many other packages [44].

After determining the anharmonic IFCs, the Boltz-
mann Transport Equation is solved to calculate the ther-
mal conductivity tensor. This is a computationally ex-
pensive step and is supported by an on-the-ﬂy paralleliza-
tion scheme inside aflow++. The calculation conditions
are set by the following parameters in the aflow.in ﬁle:

[AFLOW_AAPL]TCT=Tstart:Tend:Tstep
[AFLOW_AAPL]THERMALGRID=q1xq2xq3
[AFLOW_AAPL]ISOTOPE=ON
[AFLOW_AAPL]BOUNDARY=OFF
[AFLOW_AAPL]NANO_SIZE=dgrain

is

the

step

sets
the

the dimensions

start
temperature

and end tem-
[AFLOW_AAPL]TCT
size;
peratures
and
of
[AFLOW_AAPL]THERMAL_GRID
the q-point grid for phonon-phonon scattering processes;
and
[AFLOW_AAPL]BOUNDARY
[AFLOW_AAPL]ISOTOPE
set whether isotope and grain boundary scattering,
respectively, are included; and [AFLOW_AAPL]NANO_SIZE
sets the size of the grains to dgrain nm. A full list of
aflow.in parameters can be found in the APL/AAPL
README, which can be displayed using:

exp [i (

q0

±

·

Rl0

−

q00

·

×

Rl00 )] .

Φαβγ (lκ; l0κ0, l00κ00) are the third-order anharmonic force
constants and are the central problem for thermal con-
ductivity calculations. AAPL uses the central diﬀerence
method to calculate them. For this purpose, two atoms
need to be displaced along linearly-independent Carte-
sian coordinates, resulting in many calculations that can
be reduced using symmetry.
Performing aflow-AAPL calculations. AAPL calcu-
lations are activated by adding [AFLOW_AAPL]CALC to the
aflow.in ﬁle. As with APL, this can also be achieved
by adding --module=aapl to the input generation com-
mand (--aflow_proto). The workﬂow generally follows
the APL workﬂow and uses many of the same parameters,
but creates additional subdirectories to calculate forces
of supercells with two atoms displaced from their equilib-
rium position. It also creates the subdirectories required
by APL to calculate phonon frequencies and group veloc-
ities.

As a preparatory step, AAPL determines the atomic
pairs that need to be displaced to calculate anharmonic
IFCs. The cutoﬀ distance for these pairs can be set using
a radius, a number of coordination shells, or both. For
example:

[AFLOW_AAPL]CUT_RAD=5.5
[AFLOW_AAPL]CUT_SHELL=6

aflow --readme=aapl

Visualization options. aflow-AAPL can plot the ther-
mal conductivity tensor as a function of temperature.
The command is analogous to --plotthermo for APL:
aflow --plottcond
where --plottcond accepts multiple optional inputs: the
directory of the AAPL calculation (default: current di-
rectory), and the minimum (Tmin) and maximum (Tmax)
temperatures (default: full range of calculated tempera-
tures); i.e., --plottcond=directory,Tmin,Tmax. An ex-
ample plot is shown in Fig. 10(d).

VIII. MODELING DISORDER

A.

aflow-POCC: The Partial-Occupation Module

for Chemical Disorder

The aflow-POCC module is a framework for model-
ing chemically disordered systems, also known as sub-
stitutionally disordered systems or random alloys [31].
Such systems have sites with partial, probabilistic occu-
pancies, e.g., the high-temperature Cu3Au phase [144,
145]
is characterized by a single site on an fcc lat-
tice (A_cF4_225_a) with two occupants having prob-
abilities matching the stoichiometry. The properties of

32

FIG. 11. Generation of ordered representatives for ZnS0.25Se0.75. The aflow-POCC algorithm constructs the smallest
supercell satisfying the stoichiometry of the disordered system. For ZnS0.25Se0.75, a supercell size of four is needed given the
occupancies of the shared site. An illustration of a supercell representative is provided on the right, with the occupants of the
shared site highlighted in green. The four decoration-permutations of this supercell are also shown, moving the sulfur (yellow)
atom to each of the allowed sites, which in this case all produce symmetrically-equivalent structures and are thus degenerate.
This derivative superlattice, a uniform expansion of the original lattice, is only one of seven distinct possibilities producing a
supercell size of four, all of which also have four decoration-permutations to consider. This results in 28 total representative
structures, seven of which are unique.

Cu3Au cannot be calculated directly using standard ab-
initio codes like VASP relying on plane wave basis sets.
Instead, aflow-POCC represents a random alloy as an en-
semble of ordered supercells (an example is illustrated in
Fig. 11), the properties of which are thermally averaged
to yield that of the disordered system. The workﬂow
is as follows: ensemble set generation (pre-processing),
calculation of properties (using, e.g., VASP), and anal-
ysis (post-processing). All three steps are performed by
aflow++.
PARTCAR ﬁle. aflow-POCC takes as input a PARTCAR,
a modiﬁed POSCAR that speciﬁes the partial occupancies
of the sites and some tolerances for the algorithm. An
example PARTCAR for the Ag8.733Cd3.8Zr3.267 system is
provided below, with inputs speciﬁc to the PARTCAR ﬁle
marked with a box.

90

90

3*1+1*0.267
Partial [A8.73B3.8C3.27]

90

0.001
5.76
3*1+1*0.8

PARTCAR of Ag8.733Cd3.8Zr3.267
0.001
1.0
5.76
5.76
8*1+1*0.733
Direct(17)
0.25
0.75
0.75
0.25
0.25
0.75
0.25
0.75
0.50
0.00
0.50
0.50
0.00
0.50
0.00
0.00
0.50

0.25
0.25
0.75
0.75
0.75
0.75
0.25
0.25
0.50
0.50
0.50
0.00
0.00
0.00
0.00
0.50
0.50

0.25
0.75
0.25
0.75
0.25
0.75
0.75
0.25
0.50
0.50
0.00
0.50
0.00
0.00
0.50
0.00
0.50

Ag
Ag
Ag
Ag
Ag
Ag
Ag
Ag
Ag
Cd
Cd
Cd
Cd
Zr
Zr
Zr
Zr

pocc=1
pocc=1
pocc=1
pocc=1
pocc=1
pocc=1
pocc=1
pocc=1
pocc=0.733
pocc=1
pocc=1
pocc=1
pocc=0.8
pocc=1
pocc=1
pocc=1
pocc=0.267

The ﬁrst box is next to the scaling factor and contains
the site and stoichiometry tolerances for the supercell
size algorithm. The default tolerance is 0.001 for both,
which can be changed in the aflow.rc ﬁle. The second
box marks the line containing the number of each type of
atom, which now accepts fractional occupancies. The ‘+’

ZnSSeS0.25Se0.75ZnS0.25Se0.75ordered approximatesupercell x4natoms = 2natoms = 8derivative superlatticesdecoration permutationssign separates occupants of the same type with diﬀerent
occupancy values. The third box is next to the ‘Direct’
coordinates designation and signals to aflow++ that the
sites that follow will have ‘Partial’ occupancy. Only the
‘P’ in ‘Partial’ is required, similar to the ‘D’ in ‘Direct’.
The following three boxes mark the two partially occu-
pied sites: one shared between Ag (x = 0.733) and Zr
(x = 0.267) and the other between Cd (x = 0.8) and a
vacancy (x = 0.2). Take note that the order of the sites
matches that speciﬁed by the number-of-each-type line
with the species listed in alphabetic order.

A PARTCAR ﬁle can be constructed automatically
by aflow++ using the aforementioned --proto and
--aflow_proto commands, which leverage the extensive
prototyping suite [13] and library of naturally-occurring
compounds [14–16] to construct the parent structure.
The ﬁrst step is to construct the --proto command for
the base structure. For example,

aflow --proto=AB_hP4_186_b_b-001:S:Zn --abccar

generates the POSCAR for the high-temperature (wurtzite)
phase of ZnS [146].

3.5155

3.5155

POSCAR of SZn/AB_hP4_186_b_b-001.AB
1.0
3.5155
2
2
Direct(4) [A2B2]
0.333333
0.666667
0.333333
0.666667

0.374800
0.874800
0.000000
0.500000

0.666667
0.333333
0.666667
0.333333

90

S
S
Zn
Zn

90

120

The --abccar ﬂag prints the lattice as
, α,
|
β, and γ instead of the usual matrix format. Take note
that this structure has four sites and two species. To
construct the ZnS0.5Se0.5 structure, where both sulfur
sites are partially occupied with selenium, the --proto
command is modiﬁed as such:

b
|
|

a
|

c
|

,

|

,

aflow --proto=AB_hP4_186_b_b-001:S:Se:Zn --abccar --

,→ pocc_params=P0-0.5xA-0.5xB_P1-0.5xA-0.5xB_P2-1
,→ xC_P3-1xC [--pocc_tol=0.001:0.001]

list

order)

options.

(in alphabetic

--pocc_params/--pocc_tol

Notice that the changes from the original --proto
colon-
command include adding selenium to the
and
separated species
the
The
--pocc_params option is a list of underline-separated
values for each site (Position) with the ﬁrst site of the
parent structure indicated by P0. Following the site
speciﬁcation is a list of comma-separated values of the
occupancies for that site, with A, B, and C referring to
the colon-separated, alphabetically-ordered set of species
provided in the --proto option. All sites must be
speciﬁed with the --pocc_params options. The optional
--pocc_tol takes as input a colon-separated list of
site and stoichiometry tolerances for the supercell size
algorithm. For the site tolerance, a negative integer can
be accepted instead, which ﬁxes the desired supercell
size and allows the generation of larger ensemble sets

(better sampling) beyond what is required to satisfy
the stoichiometry exactly. The command generates the
following PARTCAR:

33

90

90

2*1

2*0.5

0.001

0.001

3.6017

5.8988

Partial [A1B1C2]

PARTCAR of S0.5Se0.5Zn/AB_hP4_186_b_b-001.AB
1.0
3.6017
2*0.5
Direct(6)
0.333333
0.666667
0.333333
0.666667
0.333333
0.666667

0.374800
0.874800
0.374800
0.874800
0.000000
0.500000

0.666667
0.333333
0.666667
0.333333
0.666667
0.333333

S
S
Se
Se
Zn
Zn

120

pocc=0.5
pocc=0.5
pocc=0.5
pocc=0.5
pocc=1
pocc=1

The same PARTCAR can be generated with a shorter com-
mand:

aflow --proto=AB_hP4_186_b_b-001:S:Se:Zn --abccar --

,→ pocc_params=S0-0.5xA-0.5xB_S1-1xC

where the partial occupancy values are speciﬁed by
Species, i.e., the group of sites having sulfur atoms, S0,
(zinc atoms, S1) in the parent structure. This speciﬁca-
tion can truncate the input size substantially for larger
structures. The two speciﬁcations, P and S, can be mixed,
but should be avoided in practice as it can be challenging
to keep track of the two sets of indices simultaneously.

A PARTCAR can also be converted to a CIF ﬁle with

partially occupied sites and vice versa. For example:

aflow --proto=AB_hP4_186_b_b-001:S:Se:Zn --cif --

,→ pocc_params=S0-0.5xA-0.5xB_S1-1xC

generates the following output:

# AFLOW.org Repositories
# SSeZn/AB_hP4_186_b_b-001.AB:POCC_S0-0.5xA-0.5xB_S1-1xC
data_SSeZn
_pd_phase_name AB_hP4_186_b_b-001.AB:POCC_S0-0.5xA-0.5

,→ xB_S1-1xC
_cell_length_a 3.6017
_cell_length_b 3.6017
_cell_length_c 5.8988
_cell_angle_alpha 90.0000
_cell_angle_beta 90.0000
_cell_angle_gamma 120.0000
_symmetry_space_group_name_H-M ‘P1’
_symmetry_Int_Tables_Number 1
loop_
_symmetry_equiv_pos_site_id
_symmetry_equiv_pos_as_xyz

1 x,y,z

loop_
_atom_site_label
_atom_site_occupancy
_atom_site_fract_x
_atom_site_fract_y
_atom_site_fract_z
_atom_site_type_symbol
S1 0.5000 0.3333 0.6667 0.3748 S
S2 0.5000 0.6667 0.3333 0.8748 S
Se3 0.5000 0.3333 0.6667 0.3748 Se
Se4 0.5000 0.6667 0.3333 0.8748 Se
Zn5 1.0000 0.3333 0.6667 0.0000 Zn
Zn6 1.0000 0.6667 0.3333 0.5000 Zn

TABLE II. Evolution of the algorithm to determine the optimal supercells size for Ag8.733Cd3.8Zr3.267. i is the iteration step of
the algorithm, δ is the site occupancy resolution, f is the iteration’s choice fraction for the site, ∆ is the error in site occupancy,
∆x is the error in the stoichiometry, and n is the supercell size.

34

i

δ

Ag0.733

Zr0.267

Cd0.8

f

∆

f

∆

f

∆

1 1.000 1/1 0.267 0/1 0.267 1/1 0.200
2 0.500 1/2 0.233 1/2 0.233 2/2 0.200
3 0.333 2/3 0.066 1/3 0.066 2/3 0.133
4 0.250 3/4 0.017 1/4 0.017 3/4 0.050
5 0.200 4/5 0.067 1/5 0.067 4/5 0.000
6 0.167 4/6 0.066 2/6 0.066 5/6 0.033
7 0.143 5/7 0.019 2/7 0.019 6/7 0.057
8 0.125 6/8 0.017 2/8 0.017 6/8 0.050
9 0.111 7/9 0.045 2/9 0.045 7/9 0.022
10 0.100 7/10 0.033 3/10 0.033 8/10 0.000
11 0.091 8/11 0.006 3/11 0.006 9/11 0.018
12 0.083 9/12 0.017 3/12 0.017 10/12 0.033
13 0.077 10/13 0.036 3/13 0.036 10/13 0.031
14 0.071 10/14 0.019 4/14 0.019 11/14 0.014
15 0.067 11/15 0.000 4/15 0.000 12/15 0.000

max (∆) max (∆x) n

0.267
0.233
0.133
0.050
0.067
0.066
0.057
0.050
0.045
0.033
0.018
0.033
0.036
0.019
0.000

0.019
0.021
0.006
0.003
0.004
0.005
0.003
0.003
0.004
0.002
0.001
0.002
0.003
0.001
0.000

1
2
3
4
5
6
7
4
9
10
11
12
13
14
15

A CIF ﬁle can also be converted to a PARTCAR with the
--vasp ﬂag:

aflow --proto=AB_hP4_186_b_b-001:S:Se:Zn --cif --

,→ pocc_params=S0-0.5xA-0.5xB_S1-1xC | aflow --vasp

By switching the --proto to --aflow_proto, aflow++
will generate an aflow.in ﬁle containing the PARTCAR
inside. The directory structure is largely the same as
that speciﬁed in Section II, except in this case, the third
(structure) layer is a mix of the parent structure proto-
type AB_hP4_186_b_b-001.AB and the --pocc_params.
The directory tree also protects from the generation
of duplicates, although it does not prevent the ones
produced from mixing P and S speciﬁcations. The
aflow-POCC aflow.in contains [AFLOW_POCC]CALC
activating the module and the PARTCAR wrapped with
and
[POCC_MODE_EXPLICIT]START.POCC_STRUCTURE
[POCC_MODE_EXPLICIT]STOP.POCC_STRUCTURE.
Run-
ning aflow --run in the directory with this aflow.in
will, in a single step, determine the optimal supercell
size, generate the ensemble of ordered representatives,
and create a subdirectory for each (denoted with
ARUN.POCC). Each directory contains a child aflow.in
setting up that particular calculation. The subdirectory
the ordered
structure enables parallelization across
representatives. Note that the characterization of the
ordered representatives is not strictly limited to the
usual relaxation/static workﬂows, but can also include
the analysis of thermomechanical properties, themselves
creating additional parent/child layers which ultimately
resolve the properties of the disordered system. These
advanced workﬂows will be covered in subsequent
sections.
Creating the right supercell size. Following the cre-
ation of a PARTCAR, the aflow-POCC algorithm deter-
mines the smallest supercell size that satisﬁes the site
and stoichiometry tolerances speciﬁed. The algorithm it-

erates through incrementally larger supercell sizes, iden-
tifying the optimal occupation (f ) and the associated site
(∆) and stoichiometry (∆x) errors. An example is pro-
vided in Table II for Ag8.733Cd3.8Zr3.267. The stop condi-
tion is achieved when both the maximum of the site and
stoichiometry errors are below the tolerance speciﬁed in
the PARTCAR. The default tolerances of 0.001 should ﬁnd
the supercell size that satisﬁes the stoichiometry exactly.
To optimize either the site or stoichiometry errors indi-
vidually, set the other tolerance to 1.

One challenge that the algorithm overcomes is the ﬁll-
ing of sites for supercell sizes that may be too small. For
example, consider the ﬁrst iteration in Table II. For this
case, there is only one site and two possible occupants.
The best choice (the one reducing the error) is to ﬁll the
site with the occupant having the higher concentration
(Ag). If both occupants had equal (50%) concentrations,
the algorithm would leave the site unﬁlled. While ﬁll-
ing the site with one of the occupants would yield the
same error, the algorithm has no way of deciding which
occupant to pick. The issue becomes more problematic
with more occupants having equal concentrations. This
requires grouping these same-site, equi-concentration oc-
cupants and incrementing their ﬁllings simultaneously or
not at all. To avoid the generation of vacancies, the input
occupancy values should be altered to bias the compo-
nents of interest.
Ensemble set generation. After the algorithm deter-
mines the optimal supercell size, it proceeds to construct
all of the possible derivative supercells. An illustration
of the two steps — determining the unique derivative
superlattices (geometries) and all of the corresponding
decorations (colorings) — is shown in Fig. 11. The Her-
mite normal form matrices [147, 148] generate the unique
set of derivative superlattices. For the ZnS0.25Se0.75 sys-
tem shown in Fig. 11, there are seven unique deriva-
tive superlattices, each of which has four decoration-

permutations, generating 28 total representative struc-
tures. aflow-POCC then determines which of these su-
percells are unique, employing the Universal Force Field
method [149] to calculate an approximate energy for
each structure which can be quickly compared to resolve
whether two structures are identical. For ZnS0.25Se0.75,
seven unique supercells will be passed along to the next
workﬂow stage: DFT calculation with VASP. The algo-
rithm has been optimized for speed and reduction of
memory footprint, critical as the number of total deriva-
tive structures to consider can easily run into the billions.
It is important to mention that aflow-POCC considers
all of the possible ordered representatives, and not just a
subset limited to a particular superlattice. This ensures
proper sampling for the calculation of spectral descrip-
tors like the entropy-forming-ability (EFA) discussed in
detail in the next section.
Post-processing analysis. Upon completion of the
running aflow
ARUN.POCC subdirectory calculations,
initiate the
--run again in the parent directory will
post-processing analysis. For the usual relaxation/static
runs of the ordered representatives, aflow-POCC will re-
solve ensemble average DOS, bandgaps, and magnetic
moments [31]. A Boltzmann-weight is calculated for the
averaging: the i-structure’s probability depends on its
degeneracy count (gi), amount of disorder relative to the
minimum (ground-state) structure in the set (Hi
Hgs),
and a tuning parameter mimicking temperature (TPOCC):
Pi = gie−(Hi−Hgs)/kBTPOCC
i gie−(Hi−Hgs)/kBTPOCC

P

−

.

The temperature parameter dictates how much disor-
der to incorporate in the analysis, and roughly cor-
relates with the synthesis temperature of the ma-
terial.
The ensemble average DOS is written to
DOSCAR-type ﬁles at various temperature snapshots, e.g.,
DOSCAR.pocc_T0300K.xz. The snapshots can be set
from the command line upon creation of the par-
ent aflow.in (in combination with the --aflow_proto
command) with --temperature=0:2400:300, or by
hand inside the parent aflow.in by adding the line
[AFLOW_POCC]TEMPERATURE=0:2400:300, both of which
will perform temperature snapshots between 0–2400 K
in 300 K increments. The default temperature snapshots
are set inside the aflow.rc ﬁle. The other properties are
written to the aflow.pocc.out ﬁle containing a sum-
mary of the full analysis, including the degeneracy count
for each unique structure and associated temperature-
speciﬁc properties,
including the Boltzmann-weighted
properties of each structure. The properties are orga-
nized by temperature snapshots.

aflow-POCC also calculates the EFA, which has led to
the discovery of 10 high-entropy carbides [8, 10]. The
descriptor is the inverse of the standard deviation of the
energy spectrum of the ordered representatives. Being a
spectral descriptor, the EFA analysis is reliant on proper
sampling, requiring full exploration of possible ordered
representatives.

35

aflow-POCC has been validated for a number of sys-
tems and properties [8, 10, 31, 41, 150], including elec-
tronic, magnetic, thermodynamic, and thermomechan-
ical properties. It has also been demonstrated that the
accuracy improves with larger supercell sizes [31], provid-
ing better sampling and capturing longer-range eﬀects.
Convergence with supercell size should be checked for
each property and balanced with the feasibility of larger
supercell calculations.
Comparison to other disordered system models.
aflow-POCC is a multiple-supercells approach, which
is often compared with special quasirandom structures
(SQS), a supercell approach [151]. SQS is, for a given
supercell size, the singular supercell structure that min-
imizes the site correlations to emulate the random alloy,
and is thus among the set of structures enumerated by
aflow-POCC. Using a single supercell to model the disor-
dered system represents the strictly inﬁnite-temperature
solution. aflow-POCC allows ﬁnite-temperature model-
ing, including near the transition temperature, with the
introduction of an ensemble set (degeneracies) and tuning
parameters into the framework. To best model the prop-
erties of the disordered system, the needed SQS is often
quite large and very low-symmetry, making it a challeng-
ing calculation to converge. Alternatively, aflow-POCC
approaches disordered-systems-modeling from the other
end, generating many smaller cell representatives, which
can be easily parallelized for high-throughput workﬂows.
Elasticity and GIBBS analysis. The aflow++ Elas-
ticity Library (AEL) and aflow++ GIBBS Library (AGL)
modules (see Section VII A) can be used to calculate
the thermal and elastic properties of ordered materials.
These methods have now been integrated with the aflow-
POCC module to enable calculation of the thermal and
elastic properties of conﬁgurationally disordered materi-
als.

For every derivative structure or “tile” generated by
POCC, full AEL and/or AGL calculations are performed
to obtain their thermoelastic properties, including the
elastic constants, bulk and shear moduli, Debye temper-
ature, speciﬁc heat capacity at constant volume and at
constant pressure, and coeﬃcient of thermal expansion.
The results are then thermally averaged using the POCC
Boltzmann probabilities Pi, a function of the POCC tem-
perature TPOCC. For example, the thermally averaged
VRH bulk modulus for a conﬁgurationally disordered ma-
terial would be calculated as
VRH (TPOCC) = X
Bavg

Pi (TPOCC) BVRH,i,

i

where BVRH,i
is the VRH bulk modulus for tile i. Since
the equations for the bulk and shear moduli are linear in
the elastic constants, using the thermally averaged elastic
constants to calculate the bulk and shear moduli would
give the same result as averaging the bulk and shear mod-
uli for each tile.

Note that in the case of AGL calculations, there are
two sets of temperatures: the POCC temperature, which

determines the distribution of the “tiles” present in the
material and is often equivalent to a synthesis or anneal-
ing temperature; and the AGL temperature, which corre-
sponds to the instantaneous temperature determining the
vibrational properties of the material. Both sets of tem-
peratures can be set separately during post-processing,
so the same set of DFT calculations can be used to in-
vestigate a range of diﬀerent temperature regimes and
combinations.

so that

Performing AGL calculations in the POCC frame-
work requires a completed POCC run with all “tiles”
the
relaxed and all enthalpies calculated,
probabilities needed to ensemble-average the thermal
elastic properties are available.
To run an aflow-
POCC+AEL/AGL calculation, the line [AFLOW_AGL]CALC
or [AFLOW_AEL]CALC should be present in the aflow.in
ﬁle of the parent directory. It is recommended to copy the
original aflow.in ﬁle into a new ﬁle (e.g., aflow_agl.in)
before adding/uncommenting the line, since aflow.in
ﬁles of the same name will be created in the subdi-
rectories. As in the case of ordered materials, com-
bined AEL-AGL workﬂows can also be run, e.g., by set-
ting [AFLOW_AGL]AEL_POISSON_RATIO=ON. Other AEL
and AGL parameters can be set for all tiles by includ-
ing the appropriate options (described in Section VII A)
in the aflow.in ﬁle of the parent directory.
Phonon analysis. The aflow++ Automatic Phonon Li-
brary (APL) discussed earlier is limited to calculating
phonon properties for ordered materials. Since the POCC
method uses a statistical ensemble of ordered structures,
APL can be expanded to determine integrated vibrational
properties of disordered materials as well [41].

These properties include the vibrational free energy
Fvib, internal energy Uvib, and vibrational entropy Svib.
They are calculated from the phonon DOS as shown in the
APL section. This opens two avenues to calculate these
quantities as ensemble properties: determining them for
each derivative structure and ensemble-averaging, or us-
ing the ensemble-averaged DOS and integrating it. Due
to the linear relationship between the phonon DOS and
Fvib, Uvib, and Svib, the results are independent of that
choice:

F avg
vib

(T ) = X

Pi(TPOCC)Fvib,i

i
= X
i
Z ∞

=

Pi(TPOCC)

Z ∞

0

f (T, ω)gi(ω)dω

f (T, ω) X

Pi(TPOCC)gi(ω)dω

0
Z ∞

0

=

i

f (T, ω)gavg(ω)dω.

Here, F avg
and gavg are the ensemble-averaged vibra-
vib
tional free energy and phonon DOS, respectively, and
2 sinh (cid:126)ω
f (T, ω) = kBT log
. The same relationship
2kBT
can be shown for Uvib and Svib. The POCC-APL workﬂow
ensemble averages the DOS, which also provides access to

(cid:17)

(cid:16)

36

the phonon DOS of the disordered material.

Performing APL calculations in the POCC framework
requires a completed POCC run with all derivative struc-
tures relaxed and all enthalpies calculated. This ensures
that the probabilities needed to ensemble-average the
phonon DOS are available. To start the aflow-POCC cal-
culation, the line [AFLOW_APL]CALC needs to be present
in the aflow.in ﬁle of the parent directory.
It is rec-
ommended to copy the original aflow.in ﬁle into a new
ﬁle (e.g., aflow_apl.in) before adding/uncommenting
the line since aflow.in ﬁles of the same name will be
created in the subdirectories.

Running aflow in this directory will create aflow.in
ﬁles for the APL calculations for each derivative struc-
ture. All APL options set in the parent input ﬁle will be
propagated into the subdirectories. The initial structure
is taken from the last relaxed run of the ordered repre-
sentative. The next step is to run aflow --run inside
each subdirectory, which creates the additional layer of
subdirectories needed to calculate force constants and the
non-analytical correction, if requested. After ﬁnishing all
DFT calculations in these directories, aflow --run needs
to be run again inside the POCC parent directory. It is
not required to execute the APL post-processing runs in
the individual subdirectories — aflow-POCC will calcu-
late the force constants if not present.

The force constants are then determined and used to
calculate the phonon frequencies and phonon DOS for
each ordered representative. The DOS are ensemble-
averaged to calculate thermophysical properties for each
POCC temperature. Dynamically unstable derivative
structures, i.e., structures with imaginary frequencies in
the phonon dispersion, are automatically discarded from
the ensemble. This behavior can be turned oﬀ via the
aflow.in option [AFLOW_POCC]EXCLUDE_UNSTABLE=OFF.
aflow-POCC outputs the phonon DOS for each POCC
temperature (in the VASP DOSCAR format), and the vibra-
tional properties calculated from the ensemble-averaged
DOS. Both can be plotted the same way as in APL:
the DOS plots for all temperatures and the thermophys-
ical properties are generated using --plotphdos and
--plotthermo commands, respectively.

B.

aflow-QCA: The Quasi-Chemical

Approximation Module for Chemical Disorder

Solid solution phase transition. Forming solid so-
lution alloys can oﬀer enhanced thermodynamic, chem-
ical and mechanical properties [152, 153]. The aflow-
QCA module provides a high-throughput [33] ab-initio
method [32] to predict the temperature at which phase-
separated multi-component alloys undergo a transition
to become highly disordered solid solutions [154, 155].
This method rests on calculating an order parame-
ter, within the generalized quasi-chemical approximation
(GQCA) [156, 157], whose maximal change, with respect
to temperature, deﬁnes the order-disorder phase transi-

tion at equi-concentration. Then, tracing the locus of the
equi-concentration relative entropy [158–160], the phase
transition temperature for the whole concentration spec-
trum is found. In the subsequent sections, the predictive
capabilities of this method are demonstrated and cor-
roborated by Monte Carlo simulations [161], CALPHAD
calculations [162], and experimental data [155, 163–176].
GQCA model. The GQCA model factorizes a parent
lattice of N sites and K species into an ensemble of non-
overlapping clusters, which are statistically and energet-
ically independent of the surrounding medium. Let an
alloy with macroscopic concentration
}
be characterized by an ensemble of J + 1 clusters,
with each cluster containing n atoms. Here, each j-
type cluster has a distinct energy εj and concentration
. Then the mixing energy for a given
x1j, x2j, . . . , xKj
{
}
set of clusters is determined by [177]:

X1, X2, . . . , XK
{

∆E(X, T ) =

K
X

k=1

Xkε0
k

+

J
X

j=0

Pj(X, T )∆j,

where ε0
are the energies of the pure cluster only con-
k
taining the kth species, Pj are the probabilities of the
j-type cluster in the alloy, and ∆j are the reduced excess
energies deﬁned as:

∆j = εj

K
X

k=1

−

xkjε0
k.

Likewise, the mixing entropy is given by:

∆S(X, T ) =

"

kB

n

K
X

k=1

Xk log Xk +

J
X

j=0

Pj(X, T ) log

!
 ,

Pj(X, T )
(X)
P 0
j

−

+

are the probabilities to ﬁnd the j-type clus-
where P 0
j
ter for the ideal solution model [178, 179] and the last
term is known as the Kullback–Leibler divergence DKL
or relative entropy [180].

Finding the cluster probabilities Pj at equilibrium in-

volves minimizing the mixing free energy ∆F = ∆E
−
T ∆S by solving the set of equations ∂∆F/∂P = 0 with
K constraints:
J
X

J
X

Pj = 1,

Pjx1j = X1,

37

where β = 1/kBT and λk are the Lagrangian multipli-
ers. The energies used in evaluating the previous equa-
tion are calculated with the Cluster Expansion technique,
as implemented in Ref. 181 and 182 using the aflow.org
repositories [2, 12, 64, 91].
Phase transition order parameter. The order-
disorder transition of an alloy can be determined by per-
forming a common tangent construction of the mixing
free energy [183]. However, in our model, where the clus-
ters are uncorrelated, this technique is invalid due to the
absence of coherency eﬀects [184]. To overcome this prob-
lem, an order parameter is deﬁned by:

α(X, T ) = P
P

P0
P0

·
kk

,

k

k
which measures the deviation of the probability distribu-
tion from the high-T limit [185]. Furthermore, α is only
evaluated at the equi-concentration X(ec), where the cor-
relation eﬀects are minimal [186]. Next, the transition
temperature at equi-concentration T (ec)
is deﬁned where
the temperature gradient of the order parameter is maxi-
mum, similar to Monte Carlo simulations [187], as shown
in Fig. 12(a). Finally, an assumption is made: the rela-
tive entropy at the transition temperature Tc is indepen-
dent of the macroscopic concentration, such that:

c

D(ec)

KL ≡

DKL(X(ec), T (ec)

c

)

DKL(X, Tc)

≈

yields the transition temperature for the whole concen-
tration spectrum.
Usage. The following command loads the alloy data
from the aflow.org repositories, constructs the binodal
curve, as shown in Fig. 12(b), and returns the output in
plain text (txt) format:

aflow --qca --plattice=fcc --elements=Au,Pt

• --qca : Necessary argument, enters the mode to cal-

culate the phase equilibria properties.

• --plattice=lattice : Necessary argument, speciﬁes

• --elements=elements

the parent lattice of the alloy (e.g., fcc).
Necessary

argument,
:
elements is a comma-separated list of components
present in the alloy.

• --directory=directory : Optional argument, speci-
ﬁes the directory where to run the calculation. Default
is ‘./’.

A full list of parameters is available by invoking the fol-
lowing command:

j=0

J
X

j=0

j=0

Pjx2j = X2,

J
X

j=0

· · ·

PjxK−1j = XK−1,

aflow --qca --usage

leaving J +1
K coupled equations. Using the method of
Lagrangian multipliers, the solution to this set of equa-
tions yields [32, 177]:

−

Pj(X, T ) =

(X)enβ(cid:2)PK−1

k=1

xkj λk(X,T )−∆j

(cid:3)

P 0
j

PJ

j=0 P 0
j

(X)enβ(cid:2)PK−1

k=1

xkj λk(X,T )−∆j

C.

aflow-GFA: The Glass-Forming-Ability Module

for Structural Disorder

(cid:3) ,

Metallic glasses are a unique class of materials without
the crystalline order typically found in metals [188, 189].

 
38

FIG. 13. Schematic of contributions to the GFA for
binary (a) and ternary (b) systems. Structures are rep-
resented as circles: black circles are at the global stoichiome-
try, green circles are pairs and triplets that contribute to the
GFA at the global stoichiometry, and blue circles are at other
stoichiometries. The reference state is the ground state (gs)
deﬁned by the convex hull. In the ternary schematic, φgs is
located directly beneath φ1.

{

}

X

to better capture multi-component alloys by Ford et
al. [30]. Employing a new approach of global stoichiom-
etry
, the GFA prediction now covers the whole con-
centration space of an alloy which can comprise of com-
binations of phases at diﬀerent compositions from the
nominal one and is no longer limited to points with mul-
tiple entries in the database. To improve the descrip-
tions of the reference states ψgs
and competing struc-
i
tures ψi, we include pseudo-structures φi from neigh-
bors around the target composition. Fig. 13 shows the
formation of pseudo-structures based on entries in the
aflow.org repositories. Diﬀerent entries (green circles)
are weighted to represent the target composition. Using
aflow-CHULL [34] (see Section VI A) the ground states
for the investigated concentrations are identiﬁed. Based
on their energetic distance to the ground state, the anal-
ysis will be limited to combinations that could occur at

FIG. 12. Properties calculated by aflow-QCA. (a) Par-
tial derivative of the order parameter with respect to temper-
ature and (b) the binodal curve, for the CrW alloy, respec-
tively.

Finding new metallic glasses is constrained by the vast
combinatorial space [190] and time-consuming experi-
ments. aflow++ can accelerate the discovery of new suit-
able candidates through the glass-forming ability (GFA)
prediction module.

The ﬁrst iteration of GFA prediction was included in
aflow++ by Perim et al. in 2016 [29]. A spectral descrip-
tor was constructed to capture the structural confusion
during vitriﬁcation into a glass upon cooling of the melt,
as described by Greer [191]. It was calculated based on
the structures of competing crystalline phases available
at a speciﬁc stoichiometry in the aflow.org repositories.
This ﬁrst work focused on binary alloy systems, where a
discrete exploration along the concentration axis already
revealed a good insight into the possible glass-forming
structures.

In 2019, the GFA module was subsequently expanded

01000200030004000500000.10.20.30.40.5aTemperature(K)∂α/∂T(K−1)CrW00.20.40.60.8105001000150020002500bCrWConcentrationTemperature(K)CrWba39

where 100 is an arbitrary scaling factor. A detailed deﬁ-
nition of the diﬀerent segments is presented in Ref. 30.

The GFA module in aflow++ can be invoked following

this pattern:

aflow --gfa --alloy=CaCu

• --alloy=alloy : Sorted, case-sensitive string of the

alloy system (e.g., CaCu).

• --ae_file=file : Optional argument, ﬁle con-
(e.g.,

taining pre-calculated atomic environments
AE_input.dat).

• --cutoff_energy=cutoff : Optional argument,

is
the formation enthalpy cutoﬀ in eV/atom. Default is
0.05 (eV

580 K).
This creates the following outputs:
• standard output : Information about the current cal-

∼

culation process.

• GFA_entries.dat : Contains the stoichiometries and
formation enthalpies of the structures used in the GFA
calculation.

• GFA_alloy.dat : Contains the calculated GFA for each

point on the stoichiometry grid.
• All_atomic_environments.dat :

the
atomic environments (one per species) for each entry
used in the GFA calculation.

Contains

For the full set of options and additional information, see
the aflow-GFA README:

aflow --readme=gfa

IX.

AFLOW-APE: THE AFLOW++ PYTHON

ENVIRONMENT

aflow++ is a powerful tool with various fully-automated
workﬂows that can easily be integrated into custom
code environments. Python is particularly important
to support due to its popularity and because many ma-
chine learning frameworks are implemented in this lan-
guage. To facilitate the usage of aflow with Python, the
aflow++ Python Enviornment (aflow-APE), has been
developed and includes wrappers for aflow-SYM [49],
aflow-CHULL [34], aflow-XtalFinder [13], and aflow-
CCE [28].

aflow++ Python modules can be installed using the

command

aflow --python_modules[=modules ] -D directory
are a comma-separated list and
where modules
directory is where the modules are installed, e.g.,
the site-packages directory of the Python installation.
Square brackets [...] indicate optional arguments; the
brackets themselves are not part of the command.
If
no modules are given, aflow will install all available
ones. A complete installation of aflow is required for
them to run. They can also be installed into a virtual
environment during the installation of aflow with the

FIG. 14. The Atomic environment of Copper (fcc,
cF4). The polyhedron code of this cuboctahedron (a) is
122.2, as it has 12 vertexes, each connected to two triangles
and two quadrangles as highlighted in (b).

a typical glass transition temperature Tg.

The current implementation relies on two primary
sources to predict a GFA score for a speciﬁc composition.
The ﬁrst one is the structural similarity of the compet-
ing entries. To capture the structural component, the
atomic environments (AE) are constructed. The neigh-
bors around each atom in an entry’s unit-cell are utilized
to form a collection of AEs. The categorization of neigh-
bors is based on a distance histogram, as suggested by
Brunner and Schwarzenbach [192], and later applied to
AEs by Daams et al. [193]. A categorization scheme is
used as the constructed AE are not directly comparable.
Each AE is described by a polyhedron code created from
the number of vertexes connected to a speciﬁc mix of
facets [194]. An example is shown in Fig. 14.

This classiﬁcation describes the structural information
of an entry on a high level, and details such as distor-
tions or size diﬀerences are not captured. Based on this
description, the structural compatibility of entries is ex-
pressed by comparing the composition of the AE ensem-
ble for each element type. The descriptor is zero if the
structures have equal AEs, and reaches a maximum when
they have no AE in common. All possible combinations in
a limited area around a given stoichiometry will be com-
bined to create the structural similarity ss factor. Addi-
tionally, the function f (
), describing the direct struc-
i
tural diﬀerence between an entry and the ground state, is
used in the ﬁnal representation of the GFA. Both struc-
tural descriptors include Gaussian distributed weights wi
assigned to each entry depending on the dimensionless
distance in stoichiometry to the global stoichiometry.

φi
|

The second source of information to predict a GFA
is the formation enthalpy, which is captured by the ex-
ponential function g(Hi). This function tends towards
zero as the diﬀerence between the formation enthalpies
of a considered entry and the ground state increases.
Through g(Hi), entries near the ground state have a big-
ger impact on the overall result.

Overall the GFA at a global stoichiometry

culated as:

is cal-

X
{

}

χGFA (

) =

X
{

}

100 ss2 P

i f (
P

φi
|
i wi

) g(Hi)
i

,

abinstall-aflow.sh script by adding the --venv option.
Some of these modules require additional Python pack-
ages. A list of dependencies can be accessed via

install-aflow.sh --pip_modules

They are automatically installed when using --venv with
install-aflow.sh.

The aflow-SYM wrapper (module name: aflow_sym)
provides functionality to calculate all aflow++ symme-
try groups (lattice point group, reciprocal lattice point
group, crystallographic point group, the dual of the crys-
tallographic point group, Patterson point group, factor
group, space group, and atom-site point group), ex-
tended crystallographic data (edata), and space group
data (sgdata). It supports magnetic moments as well.

aflow-CHULL consists of

two diﬀerent modules.
aflow_chull contains the CHull class, which calculates
convex hulls, hull energies, distances to the convex hull,
and stability criteria. aflow_chull_plotter provides a
Plotter class that can create Jupyter notebooks with
convex hull plots.

aflow-XtalFinder is implemented via the XtalFinder
class inside the aflow_xtal_finder module. It can take
a list of ﬁles or a directory as input and provide the struc-
ture comparison output. Single input ﬁles can also be
compared to the aflow.org repositories and prototype en-
cyclopedia. Unique atom decorations can be obtained as
well.

The aflow-CCE module (aflow_cce) contains the CCE
class and provides the same features as the C++ version of
aflow++, i.e., corrections to formation enthalpies, oxida-
tion numbers, and coordination numbers around cations.
With these wrappers, aflow++ can be seamlessly in-
tegrated into other Python workﬂows. Most functions
return dictionaries, a basic built-in data type in Python.
This allows the output to be further processed, e.g.,
to populate feature vectors in machine learning appli-
cations.

X. SUMMARY

This article describes aflow++, an interconnected col-
lection of algorithms and workﬂows, written C++, that
have been developed to address the challenge of acceler-

40

ated and autonomous materials’ calculation and identi-
ﬁcations. The article highlights the upgrades that have
[45],
been developed since the original aflow++ report
and demonstrate their interoperability within the overall
environment. The various modules and tools included
in the standard distribution (version 3.2.12, Fall 2022)
are listed in Table I. The code, download/installation in-
structions and operation manuals describing all the fea-
tures, are freely available at aflow.org. Through ongoing
innovation and implementation of robust descriptors and
workﬂows, aflow++ continues to deliver valuable solu-
tions as well as playing a role in accelerating the pace of
automation in the materials community.

DECLARATION OF COMPETING INTEREST

The authors declare that they have no known competing ﬁ-
nancial interests or personal relationships that could have ap-
peared to inﬂuence the work reported in this paper.

DATA AVAILABILITY

The aflow++ software suite is freely available through the
aflow.org website. Instructions for download and installations
are provided in this article.

ACKNOWLEDGMENTS

The authors thank Adam Zettel, Asa Guest, Doug Wolfe,
Don Brenner, Jon-Paul Maria, Bill Fhrenholtz, Dou-
glas Hofmann, Christian Carbogno, Luca Ghiringhelli,
Gus Hart, Eric Gossett, Cheryl Li, Harry Wang, Frisco Rose,
Mana Rose, Max Brenner, William Schmitt, and Stu-
art Ki for fruitful discussions. Research sponsored by DOD-
ONR (N00014-21-1-2132, N00014-20-1-2525, N00014-20-1-
2299, N00014-20-1-2200) and by NSF (NRT-HDR DGE-
2022040). R.F. acknowledges support from the Alexander
von Humboldt Foundation under the Feodor Lynen research
fellowship. A.vdW acknowledges support from DOD-ONR
(N00014-20-1-2225). C.T. acknowledges support from NSF
(DMR-2219788).

[1] M. Esters, C. Oses, S. Divilov, H. Eckert, R. Friedrich,
D. Hicks, M. J. Mehl, F. Rose, A. Smolyanyuk,
A. Calzolari, X. Campilongo, C. Toher,
and
A Web Ecosystem of
S. Curtarolo,
submitted (2022),
Databases, Software and Tools,
doi:10.48550/arXiv.2207.09842.

aﬂow.org:

[2] W.

Setyawan
and
Ab-initio Electronic

S. Curtarolo, AFLOWLIB:
Structure Library Database,

http://www.aﬂow.org (2011).

[3] C. Oses, C. Toher, and S. Curtarolo, Data-driven design
of inorganic materials with the Automatic Flow Frame-
work for Materials Discovery, MRS Bull. 43, 670–675
(2018), doi:10.1557/mrs.2018.207.

[4] S. Sanvito, C. Oses, J. Xue, A. Tiwari, M. Žic,
T. Archer, P. Tozman, M. Venkatesan, J. M. D. Coey,
and S. Curtarolo, Accelerated discovery of new mag-

nets in the Heusler alloy family, Sci. Adv. 3, e1602241
(2017), doi:10.1126/sciadv.1602241.

[5] S. Sanvito, M. Žic, J. Nelson, T. Archer, C. Oses, and
S. Curtarolo, Machine Learning and High-Throughput
Approaches to Magnetism,
in Handbook of Materials
Modeling: Applications: Current and Emerging Mate-
rials, edited by W. Andreoni and S. Yip (Springer In-
ternational Publishing, Cham, Switzerland, 2018), pp.
1–23, doi:10.1007/978-3-319-50257-1_108-1.

[6] C. Nyshadham, C. Oses, J. E. Hansen, I. Takeuchi,
S. Curtarolo, and G. L. W. Hart, A computa-
tional high-throughput search for new ternary su-
peralloys, Acta Mater. 122, 438–447 (2017), doi:
10.1016/j.actamat.2016.09.017.

[7] F. L. R. Tirado, J. P. Toinin, and D. C. Dunand,
γ + γ0 microstructures in the Co-Ta-V and Co-Nb-V
ternary systems, Acta Mater. 151, 137–148 (2018), doi:
10.1016/j.actamat.2018.03.057.

[8] P. Sarker, T. Harrington, C. Toher, C. Oses, M. Samiee,
J.-P. Maria, D. W. Brenner, K. S. Vecchio, and S. Cur-
tarolo, High-entropy high-hardness metal carbides dis-
covered by entropy descriptors, Nat. Commun. 9, 4980
(2018), doi:10.1038/s41467-018-07160-7.

[9] T. J. Harrington, J. Gild, P. Sarker, C. Toher, C. M.
Rost, O. F. Dippo, C. McElfresh, K. Kaufmann,
E. Marin, L. Borowski, P. E. Hopkins, J. Luo, S. Cur-
tarolo, D. W. Brenner, and K. S. Vecchio, Phase stability
and mechanical properties of novel high entropy transi-
tion metal carbides, Acta Mater. 166, 271–280 (2019),
doi:10.1016/j.actamat.2018.12.054.

[10] K. Kaufmann, D. Maryanovsky, W. M. Mellor, C. Zhu,
A. S. Rosengarten, T. J. Harrington, C. Oses, C. To-
her, S. Curtarolo, and K. S. Vecchio, Discovery of high-
entropy ceramics via machine learning, npj Comput.
Mater. 6, 42 (2020), doi:10.1038/s41524-020-0317-6.
[11] A. G. Kusne, H. Yu, C. Wu, H. Zhang, J. Hattrick-
Simpers, B. DeCost, S. Sarker, C. Oses, C. Toher,
S. Curtarolo, A. V. Davydov, R. Agarwal, L. A. Bender-
sky, M. Li, A. Mehta, and I. Takeuchi, On-the-ﬂy closed-
loop materials discovery via Bayesian active learning,
Nat. Commun. 11, 5966 (2020), doi:10.1038/s41467-
020-19597-w.

[12] C. E. Calderon, J. J. Plata, C. Toher, C. Oses, O. Levy,
M. Fornari, A. Natan, M. J. Mehl, G. L. W. Hart,
M. Buongiorno Nardelli, and S. Curtarolo, The AFLOW
standard for high-throughput materials science calcu-
lations, Comput. Mater. Sci. 108 Part A, 233–238
(2015), doi:10.1016/j.commatsci.2015.07.019.

[13] D. Hicks, C. Toher, D. C. Ford, F. Rose, C. De Santo,
O. Levy, M. J. Mehl, and S. Curtarolo, AFLOW-
XtalFinder: a reliable choice to identify crystalline
prototypes, npj Comput. Mater. 7, 30 (2021), doi:
10.1038/s41524-020-00483-4.

[14] M. J. Mehl, D. Hicks, C. Toher, O. Levy, R. M.
Hanson, G. L. W. Hart, and S. Curtarolo, The
AFLOW Library of Crystallographic Prototypes: Part
1, Comput. Mater. Sci. 136, S1–S828 (2017), doi:
10.1016/j.commatsci.2017.01.017.

[15] D. Hicks, M. J. Mehl, E. Gossett, C. Toher, O. Levy,
R. M. Hanson, G. L. W. Hart, and S. Curtarolo, The
AFLOW Library of Crystallographic Prototypes: Part
2, Comput. Mater. Sci. 161, S1–S1011 (2019), doi:
10.1016/j.commatsci.2018.10.043.

41

[16] D. Hicks, M. J. Mehl, M. Esters, C. Oses, O. Levy,
G. L. W. Hart, C. Toher, and S. Curtarolo, The
AFLOW Library of Crystallographic Prototypes: Part
3, Comput. Mater. Sci. 199, 110450 (2021), doi:
10.1016/j.commatsci.2021.110450.

[17] G. Kresse and J. Hafner, Ab initio molecular dynamics
for liquid metals, Phys. Rev. B 47, 558–561 (1993), doi:
10.1103/PhysRevB.47.558.

[18] P. Giannozzi, O. Andreussi, T. Brumme, O. Bunau,
M. Buongiorno Nardelli, M. Calandra, R. Car,
C. Cavazzoni, D. Ceresoli, M. Cococcioni, N. Colonna,
I. Carnimeo, A. Dal Corso, S. de Gironcoli, P. Delugas,
R. A. DiStasio Jr., A. Ferretti, A. Floris, G. Fratesi,
G. Fugallo, R. Gebauer, U. Gerstmann, F. Giustino,
T. Gorni, J. Jia, M. Kawamura, H.-Y. Ko, A. Kokalj,
E. Küçükbenli, M. Lazzeri, M. Marsili, N. Marzari,
F. Mauri, N. L. Nguyen, H.-V. Nguyen, A. Otero-de-
la-Roza, L. Paulatto, S. Poncé, D. Rocca, R. Saba-
tini, B. Santra, M. Schlipf, A. P. Seitsonen, A. Smo-
gunov, I. Timrov, T. Thonhauser, P. Umari, N. Vast,
X. Wu, and S. Baroni, Advanced capabilities for ma-
terials modelling with Quantum ESPRESSO, J. Phys.:
Condens. Matter 29, 465901 (2017), doi:10.1088/1361-
648X/aa8f79.

[19] X. Gonze, J. M. Beuken, R. Caracas, F. Detraux,
M. Fuchs, G. M. Rignanese, L. Sindic, M. Verstraete,
G. Zerah, F. Jollet, M. Torrent, A. Roy, M. Mikami,
P. Ghosez, J. Y. Raty, and D. C. Allan, First-principles
computation of material properties: the ABINIT soft-
ware project, Comput. Mater. Sci. 25, 478–492 (2002),
doi:10.1016/S0927-0256(02)00325-7.

[20] V. Blum, R. Gehrke, F. Hanke, P. Havu, V. Havu,
X. Ren, K. Reuter, and M. Scheﬄer, Ab initio molec-
ular simulations with numeric atom-centered orbitals,
Comput. Phys. Commun. 180, 2175–2196 (2009), doi:
10.1016/j.cpc.2009.06.022.

[21] The ELK Code: http://elk.sourceforge.net/ (2020). (ac-

cessed January 6, 2021).

[22] A. van de Walle, M. Asta, and G. Ceder, The alloy
theoretic automated toolkit: A user guide, Calphad 26,
539–553 (2002), doi:10.1016/S0364-5916(02)80006-2.
[23] S. Curtarolo, Coarse-Graining and Data Mining Ap-
proaches to the Prediction of Structures and their Dy-
namics (Ph.D. Thesis, MIT, 2003).

[24] S. Curtarolo, D. Morgan, K. A. Persson, J. Rodgers,
and G. Ceder, Predicting Crystal Structures with Data
Mining of Quantum Calculations, Phys. Rev. Lett. 91,
135503 (2003), doi:10.1103/PhysRevLett.91.135503.
[25] S. Curtarolo, D. Morgan, and G. Ceder, Accuracy of
ab initio methods in predicting the crystal structures of
metals: A review of 80 binary alloys, Calphad 29, 163–
211 (2005), doi:10.1016/j.calphad.2005.01.002.

[26] J. P. Perdew, K. Burke, and M. Ernzerhof, Gen-
Simple,
doi:

eralized Gradient Approximation Made
Phys. Rev. Lett. 77,
10.1103/PhysRevLett.77.3865.

3865–3868

(1996),

[27] R. Friedrich, D. Usanmaz, C. Oses, A. Supka,
M. Fornari, M. Buongiorno Nardelli, C. Toher, and
S. Curtarolo, Coordination corrected ab initio forma-
tion enthalpies, npj Comput. Mater. 5, 59 (2019), doi:
10.1038/s41524-019-0192-1.

[28] R. Friedrich, M. Esters, C. Oses, S. Ki, M. J. Bren-
ner, D. Hicks, M. J. Mehl, C. Toher, and S. Cur-
tarolo, Automated coordination corrected enthalpies with

AFLOW-CCE, Phys. Rev. Materials 5, 0438031 (2021),
doi:10.1103/PhysRevMaterials.5.043803.

[29] E. Perim, D. Lee, Y. Liu, C. Toher, P. Gong, Y. Li,
W. N. Simmons, O. Levy, J. J. Vlassak, J. Schroers,
and S. Curtarolo, Spectral descriptors for bulk metal-
lic glasses based on the thermodynamics of competing
crystalline phases, Nat. Commun. 7, 12315 (2016), doi:
10.1038/ncomms12315.

[30] D. C. Ford, D. Hicks, C. Oses, C. Toher, and
S. Curtarolo, Metallic glasses for biodegradable im-
plants, Acta Mater. 176,
297–305 (2019), doi:
10.1016/j.actamat.2019.07.008.

[31] K. Yang, C. Oses, and S. Curtarolo, Modeling Oﬀ-
Stoichiometry Materials with a High-Throughput Ab-
Initio Approach, Chem. Mater. 28, 6484–6492 (2016),
doi:10.1021/acs.chemmater.6b01449.

[32] Y. Lederer, C. Toher, K. S. Vecchio, and S. Curtarolo,
The search for high entropy alloys: A high-throughput
ab-initio approach, Acta Mater. 159, 364–383 (2018),
doi:10.1016/j.actamat.2018.07.042.

[33] S. Curtarolo, G. L. W. Hart, M. Buongiorno Nardelli,
N. Mingo, S. Sanvito, and O. Levy, The high-throughput
highway to computational materials design, Nat. Mater.
12, 191–201 (2013), doi:10.1038/nmat3568.

[34] C. Oses, E. Gossett, D. Hicks, F. Rose, M. J.
Mehl, E. Perim, I. Takeuchi, S. Sanvito, M. Schef-
ﬂer, Y. Lederer, O. Levy, C. Toher, and S. Curtarolo,
AFLOW-CHULL: Cloud-Oriented Platform for Au-
tonomous Phase Stability Analysis, J. Chem. Inf. Model.
58, 2477–2490 (2018), doi:10.1021/acs.jcim.8b00393.
[35] W. Setyawan and S. Curtarolo, High-throughput elec-
tronic band structure calculations: Challenges and
tools, Comput. Mater. Sci. 49, 299–312 (2010), doi:
10.1016/j.commatsci.2010.05.010.

[36] M. Buongiorno Nardelli, F. T. Cerasoli, M. Costa,
S. Curtarolo, R. D. Gennaro, M. Fornari, L. Liyanage,
A. R. Supka, and H. Wang, PAOFLOW: A utility to
construct and operate on ab initio Hamiltonians from
the projections of electronic wavefunctions on atomic
orbital bases, including characterization of topological
materials, Comput. Mater. Sci. 143, 462–472 (2017),
doi:10.1016/j.commatsci.2017.11.034.

[37] F. T. Cerasoli, A. R. Supka, A. Jayaraj, M. Costa,
I. Siloi, J. Sławińska, S. Curtarolo, M. Fornari,
D. Ceresoli, and M. Buongiorno Nardelli, Advanced
modeling of materials with PAOFLOW 2.0: New fea-
tures and software design, Comput. Mater. Sci. 200,
110828 (2021), doi:10.1016/j.commatsci.2021.110828.

[38] C. Toher, J. J. Plata, O. Levy, M. de Jong, M. Asta,
M. Buongiorno Nardelli, and S. Curtarolo, High-
throughput computational screening of thermal conduc-
tivity, Debye temperature, and Grüneisen parameter us-
ing a quasiharmonic Debye model, Phys. Rev. B 90,
174107 (2014), doi:10.1103/PhysRevB.90.174107.
[39] C. Toher, C. Oses, J. J. Plata, D. Hicks, F. Rose,
O. Levy, M. de Jong, M. Asta, M. Fornari, M. Buon-
giorno Nardelli, and S. Curtarolo, Combining the
AFLOW GIBBS and elastic libraries to eﬃciently
and robustly screen thermomechanical properties of
solids, Phys. Rev. Materials 1, 015401 (2017), doi:
10.1103/PhysRevMaterials.1.015401.

[40] M. de Jong, W. Chen, T. Angsten, A. Jain,
R. Notestine, A. Gamst, M. Sluiter, C. K. Ande,
S. van der Zwaag, J. J. Plata, C. Toher, S. Curtarolo,

42

G. Ceder, K. A. Persson, and M. D. Asta, Chart-
ing the complete elastic properties of inorganic crys-
talline compounds, Sci. Data 2, 150009 (2015), doi:
10.1038/sdata.2015.9.

[41] M. Esters, C. Oses, D. Hicks, M. J. Mehl, M. Jahnátek,
M. D. Hossain, J.-P. Maria, D. W. Brenner, C. Toher,
and S. Curtarolo, Settling the matter of the role of vibra-
tions in the stability of high-entropy carbides, Nat. Com-
mun. 12, 5747 (2021), doi:10.1038/s41467-021-25979-5.
[42] P. Nath, J. J. Plata, D. Usanmaz, R. Al Rahal Al Orabi,
M. Fornari, M. Buongiorno Nardelli, C. Toher, and
S. Curtarolo, High-throughput prediction of ﬁnite-
temperature properties using the quasi-harmonic approx-
imation, Comput. Mater. Sci. 125, 82–91 (2016), doi:
10.1016/j.commatsci.2016.07.043.

[43] P. Nath, D. Usanmaz, D. Hicks, C. Oses, M. Fornari,
and S. Curtarolo,
automated method
solids,
of
doi:
(2019),

M. B. Nardelli, C. Toher,
AFLOW-QHA3P: Robust
to
Phys. Rev. Materials 3,
10.1103/PhysRevMaterials.3.073801.

properties
073801

thermodynamic

compute

and

[44] J. J. Plata, P. Nath, D. Usanmaz, J. Carrete, C. To-
her, M. de Jong, M. D. Asta, M. Fornari, M. Buon-
giorno Nardelli, and S. Curtarolo, An eﬃcient and ac-
curate framework for calculating lattice thermal conduc-
tivity of solids: AFLOW-AAPL Automatic Anharmonic
Phonon Library, npj Comput. Mater. 3, 45 (2017), doi:
10.1038/s41524-017-0046-7.

[45] S. Curtarolo, W. Setyawan, G. L. W. Hart, M. Jah-
nátek, R. V. Chepulskii, R. H. Taylor, S. Wang,
J. Xue, K. Yang, O. Levy, M. J. Mehl, H. T. Stokes,
D. O. Demchenko, and D. Morgan, AFLOW: An au-
tomatic framework for high-throughput materials dis-
covery, Comput. Mater. Sci. 58, 218–226 (2012), doi:
10.1016/j.commatsci.2012.02.005.

[46] Oﬃce of Science and Technology Policy, White House,
Materials Genome Initiative for Global Competitive-
ness, http://www.whitehouse.gov/mgi (2011).

[47] A. R. Supka, T. E. Lyons, L. S. I. Liyanage, P. D’Amico,
R. Al Rahal Al Orabi, S. Mahatara, P. Gopal, C. To-
her, D. Ceresoli, A. Calzolari, S. Curtarolo, M. Buon-
giorno Nardelli, and M. Fornari, AFLOWπ: A min-
imalist approach to high-throughput ab initio calcula-
tions including the generation of tight-binding hamil-
tonians, Comput. Mater. Sci. 136, 76–84 (2017), doi:
10.1016/j.commatsci.2017.03.055.

[48] L. A. Agapito, S. Curtarolo, and M. Buongiorno
Nardelli, Reformulation of DFT + U as a Pseudohy-
brid Hubbard Density Functional for Accelerated Mate-
rials Discovery, Phys. Rev. X 5, 011006 (2015), doi:
10.1103/PhysRevX.5.011006.

[49] D. Hicks, C. Oses, E. Gossett, G. Gomez, R. H. Tay-
lor, C. Toher, M. J. Mehl, O. Levy, and S. Cur-
tarolo, AFLOW-SYM: platform for the complete, au-
tomatic and self-consistent symmetry analysis of crys-
tals, Acta Crystallogr. Sect. A 74, 184–203 (2018), doi:
10.1107/S2053273318003066.

[50] M. Esters, A. Smolyanyuk, C. Oses, D. Hicks, S. Divilov,
H. Eckert, X. Campilongo, C. Toher, and S. Curtarolo,
QH-POCC: taming tiling entropy in thermal expansion
calculations of disordered materials, submitted (2022).
Linux Documentation,
Accessed

https://docs.microsoft.com/windows/wsl/.
April 11, 2022.

Subsystem for

[51] Windows

[52] The WSL is available for Windows 10 and newer —
users of older Windows versions can use Cygwin in-
stead.

[53] Both the WSL and Cygwin have only few tools to com-

pile C++ code pre-installed.

[54] The Cygwin Project, https://www.cygwin.com/. Ac-

cessed April 11, 2022.

[55] The website contains further instructions on how to pre-
pare systems for the execution of the script, including
on how to set up and install the WSL and Cygwin.
[56] P. E. Blöchl, Projector augmented-wave method,
doi:

17953–17979

(1994),

Phys. Rev. B 50,
10.1103/PhysRevB.50.17953.

[57] R. L. Rivest, The MD5 Message-Digest Algorithm, RFC

1321, RFC Editor (1992).

[58] G. Kresse and J. Furthmüller, Eﬃcient

iterative
schemes for ab initio total-energy calculations using a
plane-wave basis set, Phys. Rev. B 54, 11169–11186
(1996), doi:10.1103/PhysRevB.54.11169.

[59] P. Giannozzi, S. Baroni, N. Bonini, M. Calandra,
R. Car, C. Cavazzoni, D. Ceresoli, G. L. Chiarotti,
M. Cococcioni, I. Dabo, A. Dal Corso, S. de Giron-
coli, S. Fabris, G. Fratesi, R. Gebauer, U. Gerst-
mann, C. Gougoussis, A. Kokalj, M. Lazzeri, L. Martin-
Samos, N. Marzari, F. Mauri, R. Mazzarello, S. Paolini,
A. Pasquarello, L. Paulatto, C. Sbraccia, S. Scandolo,
G. Sclauzero, A. P. Seitsonen, A. Smogunov, P. Umari,
and R. M. Wentzcovitch, QUANTUM ESPRESSO: a
modular and open-source software project for quantum
simulations of materials, J. Phys.: Condens. Matter 21,
395502 (2009), doi:10.1088/0953-8984/21/39/395502.

[60] S. R. Hall, F. H. Allen,

and I. D. Brown,
The Crystallographic Information File (CIF): a New
for Crystallography, Acta
Standard Archive File
Crystallogr. Sect. A 47,
doi:
10.1107/S010876739101067X.

655–685

(1991),

[61] G. Kresse and D. Joubert, From ultrasoft pseu-
dopotentials
augmented-wave
method, Phys. Rev. B 59, 1758–1775 (1999), doi:
10.1103/PhysRevB.59.1758.

projector

the

to

[62] VASP, The VASP Wiki, https://www.vasp.at/wiki/
index.php/The_VASP_Manual (2022). (accessed June 20,
2022).

[63] M. Methfessel and A. T. Paxton, High-precision
integration in met-
3616–3621 (1989), doi:

sampling
als, Phys. Rev. B 40,
10.1103/PhysRevB.40.3616.

for Brillouin-zone

[64] F. Rose, C. Toher, E. Gossett, C. Oses, M. Buongiorno
Nardelli, M. Fornari, and S. Curtarolo, AFLUX: The
LUX materials search API for the AFLOW data repos-
itories, Comput. Mater. Sci. 137, 362–370 (2017), doi:
10.1016/j.commatsci.2017.04.036.

[65] P. E. Blöchl, O. Jepsen, and O. K. Andersen, Im-
proved tetrahedron method for Brillouin-zone integra-
tions, Phys. Rev. B 49, 16223–16233 (1994), doi:
10.1103/PhysRevB.49.16223.

[66] J. P. Perdew, Density functional theory and the band gap
problem, Int. J. Quantum Chem. 28, 497–523 (1985),
doi:10.1002/qua.560280846.

[67] A.

I. Liechtenstein, V.
I. Anisimov, and J. Za-
theory and strong inter-
anen, Density-functional
actions: Orbital ordering in Mott-Hubbard insula-
tors, Phys. Rev. B 52, R5467–R5470 (1995), doi:
10.1103/PhysRevB.52.R5467.

43

[68] S. L. Dudarev, G. A. Botton, S. Y. Savrasov, C. J.
Humphreys, and A. P. Sutton, Electron-energy-loss
spectra and the structural stability of nickel oxide: An
LSDA+U study, Phys. Rev. B 57, 1505–1509 (1998),
doi:10.1103/PhysRevB.57.1505.

[69] B. Liu, The Simultaneous Expansion Method for the
Iterative Solution of Several of the Lowest Eigenval-
ues and Corresponding Eigenvectors of Large Real-
Symmetric Matrices, in Numerical Algorithms in Chem-
istry: Algebraic Methods: Report on the Workshop,
Aug. 9-11, 1978, edited by C. B. Moler and I. Shavitt
(Lawrence Berkeley Laboratory, University of Califor-
nia, 1978), pp. 49–53.

[70] E. R. Davidson, Matrix Eigenvector Methods, in Meth-
ods in Computational Molecular Physics, edited by
G. H. F. Diercksen and S. Wilson (Springer Netherlands,
Dordrecht, 1983), pp. 95–113, doi:10.1007/978-94-009-
7200-1_4.

[71] P. Q. Nguyen and D. Stehlé, Low-dimensional lattice ba-
sis reduction revisited, ACM Trans. Algorithms 5, 1–48
(2009), doi:http://doi.org/10.1145/1597036.1597050.
[72] P. Q. Nguyen and D. Stehlé, Low-Dimensional Lat-
tice Basis Reduction Revisited,
in Algorithmic Num-
ber Theory, edited by D. Buell (Springer Berlin Hei-
delberg, Berlin, Heidelberg, 2004), pp. 338–357, doi:
10.1007/978-3-540-24847-7_26.

[73] T. Hahn, ed., International Tables of Crystallogra-
phy. Volume A: Space-group symmetry (Kluwer Aca-
demic publishers, International Union of Crystallogra-
phy, Chester, England, 2002).

[74] B. Gruber, The relationship between reduced cells in a
general Bravais lattice, Acta Crystallogr. Sect. A 29,
433–440 (1973), doi:10.1107/S0567739473001063.
[75] P. Niggli, W. Wien, and F. Harms, Handbuch der Exper-
imentalphysik, vol. 7 (Akademische Verlagsgesellschaft,
1928).

[76] M. Hloucha and U. K. Deiters, Fast Coding of the
Minimum Image Convention, Mol. Simul. 20, 239–244
(1998), doi:10.1080/08927029808024180.

[77] M. Nespolo and B. Souvignier, Point groups in crys-
tallography, Z. Krystallogr. 224, 127–136 (2009), doi:
10.1524/zkri.2009.1107.

[78] B. A. DeAngelis, R. E. Newnham, and W. B. White,
Factor Group Analysis of the Vibrational Spectra of
Crystals: A Review and Consolidation, Am. Mineral.
57, 255–268 (1972).

[79] R. Gilmore, Lie Groups, Physics, and Geometry (Cam-

bridge University Press, 2008).

[80] H. T. Stokes and D. M. Hatch, FINDSYM: Program
for identifying the space group symmetry of a crys-
tal, J. Appl. Crystallogr. 38, 237–238 (2005), doi:
10.1107/S0021889804031528.

[81] A. L. Spek, Single-crystal structure validation with
the program PLATON, J. Appl. Crystallogr. 36, 7–13
(2003), doi:10.1107/S0021889802022112.

[82] Spglib, https://atztogo.github.io/spglib/ (2017).
[83] M.-O. Lenz, T. A. R. Purcell, D. Hicks, S. Curtarolo,
M. Scheﬄer, and C. Carbogno, Parametrically con-
strained geometry relaxations for high-throughput ma-
terials science, npj Comput. Mater. 5, 123 (2019), doi:
10.1038/s41524-019-0254-4.

[84] L. L. Boyle and J. E. Lawrenson, The origin depen-
dence of Wyckoﬀ site description of a crystal struc-
ture, Acta Crystallogr. Sect. A 29, 353–357 (1973), doi:

10.1107/S056773947300094X.

[85] E. Koch and W. Fischer, Automorphismengruppen von
Raumgruppen und die Zuordnung von Punktlagen zu
Konﬁgurationslagen, Acta Crystallogr. Sect. A 31, 88–
95 (1975), doi:10.1107/S0567739475000174.

[86] J. Lima-de-Faria, E. Hellner, F. Liebau, E. Makovicky,
and E. Parthé, Nomenclature of inorganic structure
types. Report of the International Union of Crystallog-
raphy Commission on Crystallographic Nomenclature
Subcommittee on the Nomenclature of Inorganic Struc-
ture Types, Acta Crystallogr. Sect. A 46, 1–11 (1990),
doi:10.1107/S0108767389008834.

[87] N. Zimmermann and A. Jain, Local structure or-
der parameters and site ﬁngerprints for quantiﬁca-
tion of coordination environment and crystal struc-
ture similarity, RSC Adv. 10, 6063–6081 (2020), doi:
10.1039/C9RA07755C.

[88] H. Burzlaﬀ and Y. Malinovsky, A Procedure for the
Classiﬁcation of Non-Organic Crystal Structures. I.
Theoretical Background, Acta Crystallogr. Sect. A 53,
217–224 (1997), doi:10.1107/S0108767396013852.
[89] W. B. Pearson, The Crystal Chemistry and Physics of

Metals and Alloys (Wiley-Interscience, 1972).

[90] E. Parthé, Elements of Inorganic Structural Chemistry:
a course on selected topics (K. Sutter Parthé, Petit-
Lancy, Switzerland, 1990).

[91] R. H. Taylor, F. Rose, C. Toher, O. Levy,
K. Yang, M. Buongiorno Nardelli, and S. Curtarolo,
A RESTful API for exchanging materials data in the
AFLOWLIB.org consortium, Comput. Mater. Sci. 93,
178–192 (2014), doi:10.1016/j.commatsci.2014.05.014.

[92] L. A. Agapito, A. Ferretti, A. Calzolari, S. Cur-
tarolo, and M. Buongiorno Nardelli, Eﬀective and ac-
curate representation of extended Bloch states on ﬁnite
Hilbert spaces, Phys. Rev. B 88, 165127 (2013), doi:
10.1103/PhysRevB.88.165127.

[93] L. A. Agapito, S. Ismail-Beigi, S. Curtarolo, M. Fornari,
and M. Buongiorno Nardelli, Accurate tight-binding
Hamiltonian matrices from ab initio calculations: Min-
imal basis sets, Phys. Rev. B 93, 035104 (2016), doi:
10.1103/PhysRevB.93.035104.

[94] L. A. Agapito, M. Fornari, D. Ceresoli, A. Ferretti,
S. Curtarolo, and M. Buongiorno Nardelli, Accurate
tight-binding Hamiltonians for two-dimensional and lay-
ered materials, Phys. Rev. B 93, 125137 (2016), doi:
10.1103/PhysRevB.93.125137.

[95] S. Curtarolo, W. Setyawan, S. Wang, J. Xue, K. Yang,
R. H. Taylor, L. J. Nelson, G. L. W. Hart, S. San-
vito, M. Buongiorno Nardelli, N. Mingo, and O. Levy,
AFLOWLIB.ORG: A distributed materials proper-
ties repository from high-throughput ab initio calcula-
tions, Comput. Mater. Sci. 58, 227–235 (2012), doi:
10.1016/j.commatsci.2012.02.002.

[96] A. A. Mostoﬁ, J. R. Yates, G. Pizzi, Y.-S. Lee,
I. Souza, D. Vanderbilt, and N. Marzari, An updated
version of wannier90: A tool for obtaining maximally-
localised Wannier functions, Comput. Phys. Commun.
185, 2309–2310 (2014), doi:10.1016/j.cpc.2014.05.003.

[97] P. D’Amico, L. A. Agapito, A. Catellani, A. Ruini,
S. Curtarolo, M. Fornari, M. Buongiorno Nardelli, and
A. Calzolari, Accurate ab initio tight-binding Hamilto-
nians: Eﬀective tools for electronic transport and opti-
cal spectroscopy from ﬁrst principles, Phys. Rev. B 94,
165166 (2016), doi:10.1103/PhysRevB.94.165166.

44

[98] A. Jayaraj,

I. Siloi, M. Fornari, and M. Buon-
giorno Nardelli, Relaxation time approximations in
PAOFLOW 2.0, Sci. Rep. 12, 4993 (2022), doi:
10.1038/s41598-022-08931-5.

[99] O. Levy, G. L. W. Hart, and S. Curtarolo, Uncovering
Compounds by Synergy of Cluster Expansion and High-
Throughput Methods, J. Am. Chem. Soc. 132, 4830–
4833 (2010), doi:10.1021/ja9105623.

[100] O. Levy, G. L. W. Hart,

and S. Curtarolo,
Hafnium binary alloys from experiments and ﬁrst
principles, Acta Mater. 58, 2887–2897 (2010), doi:
10.1016/j.actamat.2010.01.017.

[101] R. H. Taylor, S. Curtarolo, and G. L. W. Hart,
Ordered magnesium-lithium alloys:
First-principles
predictions, Phys. Rev. B 81, 024112 (2010), doi:
10.1103/PhysRevB.81.024112.

[102] O. Levy, M. Jahnátek, R. V. Chepulskii, G. L. W.
Hart, and S. Curtarolo, Ordered Structures in Rhe-
nium Binary Alloys from First-Principles Calcula-
tions, J. Am. Chem. Soc. 133, 158–163 (2011), doi:
10.1021/ja1091672.

[103] M. Jahnátek, O. Levy, G. L. W. Hart, L. J. Nelson,
R. V. Chepulskii, J. Xue, and S. Curtarolo, Ordered
phases in ruthenium binary alloys from high-throughput
ﬁrst-principles calculations, Phys. Rev. B 84, 214110
(2011), doi:10.1103/PhysRevB.84.214110.

[104] O. Levy, J. Xue, S. Wang, G. L. W. Hart, and S. Cur-
tarolo, Stable ordered structures of binary technetium
alloys from ﬁrst principles, Phys. Rev. B 85, 012201
(2012), doi:10.1103/PhysRevB.85.012201.

[105] G. L. W. Hart, S. Curtarolo, T. B. Massalski,
and O. Levy, Comprehensive Search for New Phases
and Compounds in Binary Alloy Systems Based on
Platinum-Group Metals, Using a Computational First-
Principles Approach, Phys. Rev. X 3, 041035 (2013),
doi:10.1103/PhysRevX.3.041035.

[106] S. Barzilai, C. Toher, S. Curtarolo, and O. Levy, Evalu-
ation of the tantalum-titanium phase diagram from ab-
initio calculations, Acta Mater. 120, 255–263 (2016),
doi:10.1016/j.actamat.2016.08.053.

[107] S. Barzilai, C. Toher, S. Curtarolo, and O. Levy,
Molybdenum-titanium phase diagram evaluated from ab
initio calculations, Phys. Rev. Materials 1, 023604
(2017), doi:10.1103/PhysRevMaterials.1.023604.
[108] C. Toher, C. Oses, D. Hicks, and S. Curtarolo, Unavoid-
able disorder and entropy in multi-component systems,
npj Comput. Mater. 5, 69 (2019), doi:10.1038/s41524-
019-0206-z.

[109] B. Grabowski, L. Ismer, T. Hickel, and J. Neugebauer,
Ab initio up to the melting point: Anharmonicity and
vacancies in aluminum, Phys. Rev. B 79, 134106 (2009),
doi:10.1103/PhysRevB.79.134106.

[110] B. Grabowski, Y. Ikeda, P. Srinivasan, F. Körmann,
C. Freysoldt, A. I. Duﬀ, A. Shapeev, and J. Neugebauer,
Ab initio vibrational free energies including anharmonic-
ity for multicomponent alloys, npj Comput. Mater. 5, 80
(2019), doi:10.1038/s41524-019-0218-8.

[111] L. Wang, T. Maxisch, and G. Ceder, Oxidation en-
ergies of transition metal oxides within the GGA+U
framework, Phys. Rev. B 73, 195107 (2006), doi:
10.1103/PhysRevB.73.195107.

[112] S. Lany, Semiconductor thermochemistry in density
functional calculations, Phys. Rev. B 78, 245207 (2008),
doi:10.1103/PhysRevB.78.245207.

[113] A. Jain, G. Hautier, S. P. Ong, C. J. Moore, C. C. Fis-
cher, K. A. Persson, and G. Ceder, Formation enthalpies
by mixing GGA and GGA+U calculations, Phys. Rev. B
84, 045115 (2011), doi:10.1103/PhysRevB.84.045115.

[114] V. Stevanović, S. Lany, X. Zhang, and A. Zunger,
Correcting density functional theory for accurate pre-
dictions of compound enthalpies of formation: Fitted
elemental-phase reference energies, Phys. Rev. B 85,
115104 (2012), doi:10.1103/PhysRevB.85.115104.
[115] Y. Zhang, D. A. Kitchaev, J. Yang, T. Chen, S. T.
Dacek, R. A. Sarmiento-Pérez, M. A. L. Marques,
H. Peng, G. Ceder, J. P. Perdew, and J. Sun, Eﬃ-
cient ﬁrst-principles prediction of solid stability: To-
wards chemical accuracy, npj Comput. Mater. 4, 9
(2018), doi:10.1038/s41524-018-0065-z.

Isaacs

[116] E. B.
and C. Wolverton, Performance
of
strongly
the
and
appropriately
solid-state materi-
normed density functional
als, Phys. Rev. Materials 2, 063801 (2018), doi:
10.1103/PhysRevMaterials.2.063801.

constrained
for

[117] J. Yan, J. S. Hummelshøj, and J. K. Nørskov, Formation
energies of group I and II metal oxides using random
phase approximation, Phys. Rev. B 87, 075207 (2013),
doi:10.1103/PhysRevB.87.075207.

[118] T. S. Jauho, T. Olsen, T. Bligaard, and K. S. Thyge-
sen, Improved description of metal oxide stability: Be-
yond the random phase approximation with renormal-
ized kernels, Phys. Rev. B 92, 115140 (2015), doi:
10.1103/PhysRevB.92.115140.

[119] M. Pozzo and D. Alfé, Structural properties and en-
thalpy of formation of magnesium hydride from quan-
tum Monte Carlo calculations, Phys. Rev. B 77, 104103
(2008), doi:10.1103/PhysRevB.77.104103.

[120] G. Mao, X. Hu, X. Wu, Y. Dai, S. Chu, and
J. Deng, Benchmark Quantum Monte Carlo calcu-
lation of
Int.
J. of Hydrogen Energy 36, 8388–8391 (2011), doi:
10.1016/j.ijhydene.2011.04.093.

formation of MgH2,

the enthalpy of

[121] M. Aykol and C. Wolverton, Local environment depen-
dent GGA+U method for accurate thermochemistry of
transition metal compounds, Phys. Rev. B 90, 115105
(2014), doi:10.1103/PhysRevB.90.115105.

[122] K. Momma and F.

Izumi, VESTA 3 for three-
dimensional visualization of crystal, volumetric and
morphology data, J. Appl. Crystallogr. 44, 1272–1276
(2011), doi:10.1107/S0021889811038970.

[123] W. Kohn and L. J. Sham, Self-Consistent Equations In-
cluding Exchange and Correlation Eﬀects, Phys. Rev.
140, A1133 (1965), doi:10.1103/PhysRev.140.A1133.

[124] U. von Barth and L. Hedin, A local exchange-correlation
I, J. Phys. C:
potential for the spin polarized case:
Solid State Phys. 5, 1629 (1972), doi:10.1088/0022-
3719/5/13/012.

[125] J. Sun, A. Ruzsinszky, and J. P. Perdew, Strongly Con-
strained and Appropriately Normed Semilocal Density
Functional, Phys. Rev. Lett. 115, 036402 (2015), doi:
10.1103/PhysRevLett.115.036402.

[126] L. C. Allen, Electronegativity Is the Average One-
Electron Energy of
the Valence-Shell Electrons in
Ground-State Free Atoms, J. Am. Chem. Soc. 111,
9003–9014 (1989), doi:10.1021/ja00207a003.

[127] J. B. Mann, T. L. Meek, and L. C. Allen, Conﬁguration
Energies of the Main Group Elements, J. Am. Chem.
Soc. 122, 2780–2783 (2000), doi:10.1021/ja992866e.

45

[128] J. B. Mann, T. L. Meek, E. T. Knight, J. F. Capitani,
and L. C. Allen, Conﬁguration Energies of the d-Block
Elements, J. Am. Chem. Soc. 122, 5132–5137 (2000),
doi:10.1021/ja9928677.

[129] J.-P. Poirier, Introduction to the Physics of the Earth’s
Interior (Cambridge University Press, 2000), 2nd edn.
[130] R. Hill, The elastic behaviour of a crystalline aggre-
gate, Proc. Phys. Soc. Sect. A 65, 349 (1952), doi:
10.1088/0370-1298/65/5/307.

[131] M. A. Blanco, E. Francisco, and V. Luaña, GIBBS:
isothermal-isobaric thermodynamics of solids from en-
ergy curves using a quasi-harmonic Debye model,
Comput. Phys. Commun. 158, 57–72 (2004), doi:
10.1016/j.comphy.2003.12.001.

[132] M. A. Blanco, A. M. Pendás, E. Francisco, J. M. Recio,
and R. Franco, Thermodynamical properties of solids
from microscopic theory: Applications to MgF2 and
Al2O3, J. Mol. Struct.: Theochem 368, 245–255 (1996),
doi:10.1016/S0166-1280(96)90571-0.

[133] G. Leibfried and E. Schlömann, Wärmeleitung in elek-
trisch isolierenden Kristallen, Nachrichten d. Akad.
d. Wiss. in Göttingen. Math.-physik. Kl. 2a. Math.-
physik.-chem. Abt (Vandenhoeck & Ruprecht, 1954).

[134] G. A. Slack, The thermal conductivity of nonmetallic
crystals, in Solid State Physics, edited by H. Ehrenreich,
F. Seitz, and D. Turnbull (Academic, New York, 1979),
vol. 34, p. 1.

[135] D. T. Morelli and G. A. Slack, High Lattice Thermal
Conductivity Solids, in High Thermal Conductivity Ma-
terials, edited by S. L. Shindé and J. S. Goela (Springer,
2006).

[136] A. A. Maradudin and S. H. Vosko, Symmetry Properties
of the Normal Vibrations of a Crystal, Rev. Mod. Phys.
40, 1–37 (1968), doi:10.1103/RevModPhys.40.1.

[137] Y. Wang,

S. L. Shang, H. Fang, Z.-K. Liu,
and L. Q. Chen, First-principles calculations of
lattice dynamics and thermal properties of polar
solids, npj Comput. Mater. 2, 16006 (2016), doi:
10.1038/npjcompumats.2016.6.

[138] The XCrysDen software, http://www.xcrysden.org/.

Accessed April 13, 2022.

[139] F. D. Murnaghan, The Compressibility of Media under
Extreme Pressures, Proc. Natl. Acad. Sci. 30, 244–247
(1944), doi:10.1073/pnas.30.9.244.

[140] F. Birch, Finite Elastic Strain of Cubic Crystals, Phys.
Rev. 71, 809–824 (1947), doi:10.1103/PhysRev.71.809.
[141] D. M. Teter, G. V. Gibbs, M. B. Boisen, D. C. Allan,
and M. P. Teter, First-principles study of several hypo-
thetical silica framework structures, Phys. Rev. B 52,
8064–8073 (1995), doi:10.1103/PhysRevB.52.8064.
[142] A. B. Alchagirov, J. P. Perdew, J. C. Boettger, R. C.
Albers, and C. Fiolhais, Energy and pressure versus
volume: Equations of state motivated by the stabilized
jellium model, Phys. Rev. B 63, 224115 (2001), doi:
10.1103/PhysRevB.63.224115.

[143] Ph. Lambin and J. P. Vigneron, Computation of crystal
Green’s functions in the complex-energy plane with the
use of the analytical tetrahedron method, Phys. Rev. B
29, 3430–3437 (1984), doi:10.1103/PhysRevB.29.3430.
[144] F. C. Nix and D. MacNair, A Dilatometric Study of the
Order-Disorder Transformation in Cu-Au Alloys, Phys.
Rev. 60, 320–329 (1941), doi:10.1103/PhysRev.60.320.
[145] C. H. Johansson. and J. O. Linde, Röntgenographis-
elektrische Untersuchungen des CuAu-

che und

Systems, Ann. Phys. 417,
10.1002/andp.19364170102.

1–48

(1936),

doi:

[146] E. H. Kisi and M. M. Elcombe, u Parameters for the
Wurtzite Structure of ZnS and ZnO using Powder Neu-
tron Diﬀraction, Acta Crystallogr. Sect. C 45, 1867–
1870 (1989), doi:10.1107/S0108270189004269.

[147] A. Santoro and A. D. Mighell, Properties of crys-
the derivative lattices and their deter-
tal
mination, Acta Cryst. A28, 284–287 (1972), doi:
10.1107/S0567739472000737.

lattices:

[148] A. Santoro and A. D. Mighell, Coincidence-site
lattices, Acta Cryst. A29, 169–175 (1973), doi:
10.1107/S0567739473000434.

[149] A. K. Rappe, C. J. Casewit, K. S. Colwell, W. A. God-
dard, III, and W. M. Skiﬀ, UFF, a full periodic table
force ﬁeld for molecular mechanics and molecular dy-
namics simulations, J. Am. Chem. Soc. 114, 10024–
10035 (1992), doi:10.1021/ja00051a040.

[150] M. D. Hossain, T. Borman, C. Oses, M. Esters,
C. Toher, L. Feng, A. Kumar, W. G. Fahren-
holtz, S. Curtarolo, D. Brenner, J. M. LeBeau, and
J.-P. Maria, Entropy Landscaping of High-Entropy
Carbides, Adv. Mater. 33, 2102904 (2021), doi:
10.1002/adma.202102904.

[151] A. Zunger, S.-H. Wei, L. G. Ferreira, and J. E. Bernard,
Special quasirandom structures, Phys. Rev. Lett. 65,
353–356 (1990), doi:10.1103/PhysRevLett.65.353.
[152] X. Lim, Mixed-up metals make for stronger, tougher,
stretchier alloys, Nature 533, 306–307 (2016), doi:
10.1038/533306a.

[153] B. Gludovatz, A. Hohenwarter, D. Catoor, E. H. Chang,
E. P. George, and R. O. Ritchie, A fracture-resistant
high-entropy alloy for cryogenic applications, Science
345, 1153–1158 (2014), doi:10.1126/science.1254581.

[154] J.-W. Yeh, S.-K. Chen, S.-J. Lin, J.-Y. Gan, T.-S.
Chin, T.-T. Shun, C.-H. Tsau, and S.-Y. Chang, Nanos-
tructured High-Entropy Alloys with Multiple Princi-
ple Elements: Novel Alloy Design Concepts and Out-
comes, Adv. Eng. Mater. 6, 299–303 (2004), doi:
10.1002/adem.200300567.

[155] B. Cantor, I. T. H. Chang, P. Knight, and A. J. B. Vin-
cent, Microstructural development in equiatomic multi-
component alloys, Mater. Sci. Eng. A 375-377, 213–218
(2004), doi:10.1016/j.msea.2003.10.257.

[156] A. Sher, M. van Schilfgaarde, A.-B. Chen, and
approximation in bi-
W. Chen, Quasichemical
nary alloys, Phys. Rev. B 36, 4279 (1987), doi:
10.1103/PhysRevB.36.4279.

[157] M. A. Berding and A. Sher, Electronic quasichem-
ical
formalism: Application to arsenic deactivation
in silicon, Phys. Rev. B 58, 3853 (1998), doi:
10.1103/PhysRevB.58.3853.

[158] V. Vedral, The role of relative entropy in quantum in-
formation theory, Rev. Mod. Phys. 74, 197 (2002), doi:
10.1103/RevModPhys.74.197.

[159] H. Qian, Relative entropy: Free energy associated
with equilibrium ﬂuctuations and nonequilibrium de-
viations, Phys. Rev. E 63, 042103 (2001), doi:
10.1103/PhysRevE.63.042103.

[160] J. Kristensen,

I. Bilionis, and N. Zabaras, Rela-
in cluster ex-
tive entropy as model selection tool
pansion, Phys. Rev. B 87, 174112 (2013), doi:
10.1103/PhysRevB.87.174112.

46

[161] T. B. Massalski, H. Okamoto, P. R. Subramanian, and
L. Kacprzak, eds., Binary Alloy Phase Diagrams (ASM
International, Materials Park, Ohio, USA, 1990).
[162] J.-O. Andersson, T. Helander, L. Höglund, P. Shi, and
B. Sundman, Thermo-Calc & DICTRA, computational
tools for materials science, Calphad 26, 273–312 (2002),
doi:10.1016/S0364-5916(02)00037-8.

[163] M. C. Gao and D. E. Alman, Searching for Next Single-
Phase High-Entropy Alloy Compositions, Entropy 15,
4504–4519 (2013), doi:10.3390/e15104504.

[164] Z. Wu, H. Bei, F. Otto, G. M. Pharr, and E. P. George,
Recovery, recrystallization, grain growth and phase sta-
bility of a family of FCC-structured multi-component
equiatomic solid solution alloys, Intermetallics 46, 131–
140 (2014), doi:10.1016/j.intermet.2013.10.024.

[165] M. S. Lucas, G. B. Wilks, L. Mauger, J. A. Muñoz,
O. N. Senkov, E. Michel, J. Horwath, S. L. Semiatin,
M. B. Stone, D. L. Abernathy, and E. Karapetrova,
Absence of long-range chemical ordering in equimolar
FeCoCrNi, Appl. Phys. Lett. 100, 251907 (2012), doi:
10.1063/1.4730327.

[166] N. D. Stepanov, D. G. Shaysultanov, G. A. Sal-
ishchev, and M. A. Tikhonovsky, Structure and me-
chanical properties of a light-weight AlNbTiV high en-
tropy alloy, Mater. Lett. 142, 153–155 (2015), doi:
10.1016/j.matlet.2014.11.162.

[167] Y. D. Wu, Y. H. Cai, T. Wang, J. J. Si, J. Zhu, Y. D.
Wang, and X. D. Hui, A refractory Hf25Nb25Ti25Zr25
high-entropy alloy with excellent structural stability and
tensile properties, Mater. Lett. 130, 277–280 (2014),
doi:10.1016/j.matlet.2014.05.134.

[168] O. N. Senkov, G. B. Wilks, D. B. Miracle, C. P.
Chuang, and P. K. Liaw, Refractory high-entropy
alloys,
1758–1765 (2010), doi:
10.1016/j.intermet.2010.05.014.

Intermetallics 18,

[169] O. N. Senkov, G. B. Wilks, J. M. Scott, and D. B.
Miracle, Mechanical properties of Nb25Mo25Ta25W25
refractory high entropy
and V20Nb20Mo20Ta20W20
alloys,
doi:
Intermetallics 19,
10.1016/j.intermet.2011.01.004.

698–706

(2011),

[170] X. Yang, Y. Zhang, and P. K. Liaw, Microstructure and
Compressive Properties of NbTiVTaAlx High Entropy
Alloys, Procedia Engineering 36, 292–298 (2012), doi:
10.1016/j.proeng.2012.03.043.

[171] O. N. Senkov, S. V. Senkova, D. B. Miracle, and
C. Woodward, Mechanical properties of low-density, re-
fractory multi-principal element alloys of the Cr-Nb-Ti-
V-Zr system, Mater. Sci. Eng. A 565, 51–62 (2013),
doi:10.1016/j.msea.2012.12.018.

[172] Y. Zhang, X. Yang, and P. K. Liaw, Alloy Design and
Properties Optimization of High-Entropy Alloys, JOM
64, 830–838 (2012), doi:10.1007/s11837-012-0366-5.
[173] B. Gorr, M. Azim, H.-J. Christ, T. Mueller,
D. Schliephake,
and M. Heilmaier, Phase equi-
libria, microstructure, and high temperature oxida-
tion resistance of novel refractory high-entropy al-
loys, J. Alloys Compd. 624, 270–278 (2015), doi:
10.1016/j.jallcom.2014.11.012.

[174] O. N. Senkov, J. M. Scott, S. V. Senkova, D. B. Mir-
acle, and C. F. Woodward, Microstructure and room
temperature properties of a high-entropy TaNbHfZrTi
alloy, J. Alloys Compd. 509, 6043–6048 (2011), doi:
10.1016/j.jallcom.2011.02.171.

[175] H. Bei, Multi-component solid solution alloys having
high mixing entropy, USA Patent US A1, 0108502
(2013).

[176] M. C. Gao, B. Zhang, S. Yang, and S. M. Guo,
Senary Refractory High-Entropy Alloy HfNbTaTiVZr,
Metall. Mater. Trans. A 47, 3333–3345 (2016), doi:
10.1007/s11661-015-3105-z.

[177] C. An-Ben and S. Arden, Semiconductor alloys: physics
and materials engineering (Springer Science & Business
Media, 1995).

[178] J. S. Rutherford, The enumeration and symmetry-
lattices, Acta
doi:

signiﬁcant properties of derivative
Crystallogr. Sect. A 48,
10.1107/S0108767392000898.

500–508

(1992),

[179] G. L. W. Hart and R. W. Forcade, Algorithm for gen-
erating derivative structures, Phys. Rev. B 77, 224115
(2008), doi:10.1103/PhysRevB.77.224115.

[180] S. Kullback and R. A. Leibler, On Information and
Suﬃciency, Ann. Math. Stat. 22, 79–86 (1951), doi:
10.1214/aoms/1177729694.

[181] A. van de Walle
First-Principles
J. Phase Equilib.
10.1361/105497102770331596.

Phase

and G. Ceder, Automating
Calculations,
doi:
(2002),

Diagram
348–359

23,

[182] A. van de Walle, Multicomponent multisublattice alloys,
nonconﬁgurational entropy and other additions to the
Alloy Theoretic Automated Toolkit, Calphad 33, 266–
278 (2009), doi:10.1016/j.calphad.2008.12.005.

[183] K. Charles and K. Herbert, Thermal physics (W.H.

Freeman, 1980).

[184] J. W. Cahn and F. Larché, A simple model for coher-
ent equilibrium, Acta Metall. 32, 1915–1923 (1984), doi:
10.1016/0001-6160(84)90173-1.

[185] E. A. Guggenheim, Mixtures: The Theory of the Equi-
librium Properties of Some Simple Classes of Mixtures,

47

Solutions and Alloys (Clarendon Press, 1952).

[186] G. B. Taggart, Odd-order correlations in disordered al-
loys: A quasi-binary approximation, Physics Letters A
45, 221–222 (1973), doi:10.1016/0375-9601(73)90175-8.
[187] A. van de Walle and M. D. Asta, Self-driven lattice-
model Monte Carlo simulations of alloy thermody-
namic properties and phase diagrams, Model. Simul.
Mater. Sci. Eng. 10, 521 (2002), doi:10.1088/0965-
0393/10/5/304.

[188] J. J. Kruzic, Bulk Metallic Glasses as Structural Materi-
als: A Review, Adv. Eng. Mater. 18, 1308–1331 (2016),
doi:10.1002/adem.201600066.

[189] J. Schroers, Bulk Metallic Glasses, Physics Today 66,

32–37 (2013), doi:10.1063/PT.3.1885.

[190] Y. Li, S. Zhao, Y. Liu, P. Gong, and J. Schroers,
How Many Bulk Metallic Glasses Are There?,
ACS Comb.
doi:
10.1021/acscombsci.7b00048.

687–693

(2017),

Sci.

19,

[191] A. L. Greer, Confusion by design, Nature 366, 303–304

(1993), doi:10.1038/366303a0.

[192] G. O. Brunner and D. Schwarzenbach, Zur Abgren-
zung der Koordinationssphere und Ermittlung der Koor-
dinationszahl in Kristallstrukturen, Z. Krystallogr. 133,
127–133 (1971), doi:10.1524/zkri.1971.133.16.127.
[193] J. L. C. Daams, J. H. N. van Vucht, and P. Villars,
Atomic-environment classiﬁcation of the cubic "inter-
metallic" structure types, J. Alloys Compd. 182, 1–33
(1992), doi:10.1016/0925-8388(92)90570-Y.

[194] J. L. C. Daams and P. Villars, Atomic environments in
relation to compound prediction, Eng. Appl. Artif. Intel.
13, 507 (2000), doi:10.1016/S0952-1976(00)00029-4.

