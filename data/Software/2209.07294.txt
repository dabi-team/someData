2
2
0
2

p
e
S
5
1

]

M

I
.
h
p
-
o
r
t
s
a
[

1
v
4
9
2
7
0
.
9
0
2
2
:
v
i
X
r
a

CUBES and its software ecosystem: instrument simulation,
control, and data processing

Giorgio Calderonea, Roberto Ciramia, Guido Cupania,b, Paolo Di Marcantonioa, Mariagrazia
Franchinia, Matteo Genonic, Miko(cid:32)laj Ka(cid:32)luszy´nskid, Marco Landonic,e, Florian Rothmaierf,
Andrea Scaudoc, Rodolfo Smiljanicd, Ingo Stilzf, Julian St¨urmerf, and Orlando Verduccig

aINAF - Osservatorio Astronomico di Trieste, via G. B. Tiepolo 11, 34131 Trieste, Italy
bIFPU - Institute for Fundamental Physics of the Universe, via Beirut 2, I-34151 Trieste, Italy
cINAF - Osservatorio Astronomico di Brera, via E. Bianchi 46 Merate (LC) 23807-Italy
dNicolaus Copernicus Astronomical Center, Polish Academy of Sciences, ul. Bartycka 18,
00-716, Warsaw, Poland
eINAF - Osservatorio Astronomico di Cagliari, via della Scienza 5, Selargius (CA) - Italy
fLSW - Landessternwarte, Zentrum f¨ur Astronomie der Universit¨at Heidelberg, K¨onigstuhl 12,
69117, Heidelberg, Germany
gLNA - Laboratorio Nacional de Astroﬁsica, Rua Estados Unidos 154, Itajuba-MG, Brazil

ABSTRACT

CUBES (Cassegrain U-Band Eﬃcient Spectrograph) is the recently approved high-eﬃciency VLT spectrograph
aimed to observe the sky in the UV ground-based region (305-400 nm) with a high-resolution mode (∼ 20K)
and a low-resolution mode (∼ 5K). In this paper we will brieﬂy describe the requirements and the design of the
several software packages involved in the project, namely the instrument control software, the exposure time
calculator, the end-to-end simulator, and the data reduction software suite. We will discuss how the above
mentioned blocks cooperate to build up a “software ecosystem” for the CUBES instrument, and to support the
users from the proposal preparation to the science-grade data products.

Keywords: Manuscript format, template, SPIE Proceedings, LaTeX

1. INTRODUCTION

CUBES (Cassegrain U-Band Eﬃcient Spectrograph) is the recently approved VLT spectrograph aimed to observe
the sky in the UV ground-based region (305-400 nm, goal is 300-420 nm) with a high-resolution mode (∼ 20K) and
a low-resolution mode (∼ 7K). The most important feature of CUBES is its high eﬃciency in the UV, up to 40%,
which is signiﬁcantly higher than other instruments observing in the same wavelength range (e.g. VLT/UVES).
Another important aspect is related to the software, since CUBES will be one of the ﬁrst instruments adopting
the recently released ELT-SW framework and standards, which will be used to develop and control all the future
ESO/ELT instruments. Still, the CUBES instrument will “live” in a VLT environment since it will be installed
at the Cassegrain focus of one of the VLT telescopes at the Paranal observatory (which of the four UT will be
used is yet to be decided), and a speciﬁc software component, dubbed VLT / ELT gateway (§2.4), is foreseen to
allow communication between the CUBES software and the VLT environment. Finally, an important synergy is
established with the VLT/UVES instrument, since CUBES will be able to operate UVES in order to perform
simultaneous observations (using the red arm of UVES, operating in the 420-1100 nm wavelength range).

A description of the instrument is outside the scope of this paper (see [1] and [2] and references therein for a
comprehensive overview of the instrument and of the science cases). Here we will focus on the software packages
being developed by the CUBES consortium for the instrument exploitation:

Further author information: (send correspondence to Giorgio Calderone)
Giorgio Calderone: E-mail: giorgio.calderone@inaf.it

 
 
 
 
 
 
• The Instrument Control Software (ICS, §2): used to control all the instrument functions and detectors, as
well as to coordinate the observations and save the results in a form suitable to be ingested in the archive;

• The Exposure Time Calculator (ETC, §3): used to estimate the exposure time required to achieve a given

Signal-to-Noise Ratio (SNR);

• The Observation Preparation Software (OPS, §4): used to collect all required information to prepare the

observations;

• The Data Reduction Software (DRS §5): used to remove instrument artifacts from the science exposures,

and extract a 1D spectrum;

• The End-to-end Simulator (E2E, §6): used to simulate the instrument behaviour as a whole and allowing

early development of the DRS (using simulated images).

The above components cooperate to create a “software ecosystem” around the instrument (see Fig. 1) aimed to
support the instrument design before the actual hardware is available (E2E) as well as to support the users during
operations, with applications ranging from the initial proposal preparation (ETC and OPS), to the instrument
control and operations (ICS, VLT/ELT Gateway) and the ﬁnal data reduction and analysis (DRS) to obtain the
science-grade data products. A brief description of such components will be given in the following sections.

Figure 1. The CUBES instrument (box in the middle) surrounded by its “software ecosystem”.

2. INSTRUMENT CONTROL SOFTWARE (ICS)

The Instrument Control Software (ICS) is responsible to control and operate the whole CUBES instrument, as
well as to collect the data and deliver the ﬁnal FITS ﬁle to the ESO archive. It can be conceptually divided into
“Low level” (hardware control, §2.1), “High level” (data collection and preparation of the ﬁnal FITS ﬁle §2.2)
and “Templates” (scripts to perform instrument maintenance, science target acquisition and observations, §2.3).
The ICS software operates on several devices, which are physically located in diﬀerent rooms at the Paranal
observatory (see Fig. 2):

• The UTx user station is the terminal used to operate the instrument, and is located in the same zone as
the telescope terminal (“control room”). Both the instrument operator and telescope operator collaborate
to carry out the observations during the night. In day time the same terminal can be used to run the
calibration procedures. No CUBES software is actually executed on the user station, it is just used as a
terminal to access the instrument workstation;

• The workstations to operate the instrument are located (among many other ones) in the “computer room”.
More speciﬁcally, a dedicated instrument workstation will be employed to run all the CUBES ICS software
(see sections below), and another one is used to run the VLT/ELT gateway (§2.4). The UVES workstation
and the UTx workstations (both accessible through the gateway) are also located in the same room. It
is currently under discussion whether the gateway should have a dedicated workstation, or if it should be
executed on a virtual machine hosted in the CUBES instrument workstation;

• The PLCs (Programmable Logic Controllers) are used to execute the low level software for hardware control
and monitoring, and are attached to the body of the instrument. The technical cameras and the science
detectors, located on the instrument itself, are also shown for completeness.

Figure 2. The CUBES control nodes and their connections.

The most relevant requirement for the CUBES ICS is the one concerning the adoption of the ELT-SW
framework and standards, which is currently under development at ESO and will be adopted in all the future
instruments for the ELT telescope. Such requirement aﬀect all the ICS software and will be brieﬂy discussed in
the next sections. It is worth to recall that ESO ELT-SW is still under development, and several details may
change in the future.

2.1 Low level control software

The low level control software is in charge to control all the instrument functions such as motors and actuators
(20), calibration lamps (5), as well as to monitor the sensors (number is yet to be deﬁned). Hardware control is
performed though a single standard FCS (Function Control System) device manager, provided by the ELT-SW,
and a set of YAML conﬁguration ﬁles for each of the devices to be controlled. No “special device” (i.e. a device
requiring dedicated extension of the device manager) is currently foreseen for CUBES. A dedicated conﬁguration
for each device is also foreseen on the PLCs. Finally, the low level control software will also provide a device
simulator, one for each actual device, which is able to emulate the PLC state machine and operational behavior

even in the absence of a real hardware PLC. Such simulators are very important to simulate the overall instrument
behavior from the control software point of view, and are fundamental to develop and test the templates (§2.3)
well before the hardware becomes available.

The CUBES instrument also features two technical cameras (one to measure deviations of the light path from
the ﬁber feeding the UVES instrument, and a second one used to perform target acquisition and guiding), and
two science detectors (one for each arm). These devices will be controlled respectively by the ELT-SW Camera
Control Framework (CCF) and the New General Detector Controller II (NGCII) frameworks.

2.2 High level control software

The high level control software comprises many packages (and the associated conﬁgurations) involved in the
orchestration and data collection of the several CUBES subsystems, as dictated by the new ESO ELT-SW
standard. Worth mentioning are the the Observation Coordination Manager (OCM) which coordinates the data
acquisition by collecting the images from the science detectors and triggers the creation of metadata from all
the instrument subsystems, and the Data Product Manager (DPM) which prepare and write the ﬁnal FITS ﬁle,
ready to be transferred to the On-Line Archive Subsystem (OLAS). Another relevant high level component is
the sequencer, devoted to the execution of the Observation Blocks (i.e. collections of one or more templates, see
§2.3) queued in the observation schedule. The sequencer operates by reading the JSON ﬁle describing a template
execution, including the reference to the Python script to be executed as well as the speciﬁc parameter values,
and orchestrate the dispatch of the proper messages to the CUBES subsystem (FCS device manager, OCM, CCF
and NGCII). The sequencer is also used to execute engineering scripts for maintenance of the instrument, or to
start/stop the whole instrument software). Finally, the templates represent the most important part of the high
level control software, and are therefore described in a separate section below.

2.3 Templates
As mentioned in § 2.2, the execution of instrument actions is organized in the form of templates. In the ELT-
SW, a template is a Python script aiming to operate the individual instrument devices in the correct sequence.
According to their range of use, templates are subdivided into the following four groups:

• acquisition templates: in charge of acquiring the ﬁeld of observation; this requires communication with the
Telescope Control Software in order to initiate the standard telescope procedures like slewing, tracking and
guiding;

• observation templates: the centerpiece of the instrument operation with the purpose of taking science data;

• calibration templates: responsible for carrying out the calibration of the instrument, particularly of the

science and technical CCDs;

• maintenance templates: preventive actions to ensure the mid- and long-term health of the instrument.

A template contains the series of steps belonging to a clearly deﬁned task. Templates are included in the so-
called “Observation Block” (OB), corresponding to an individual observation in a proposal. Executing an OB
means running one or several templates according to the operations schedule. In that sense, templates may be
considered the bricks of an OB.

From the software’s perspective, CUBES will be operated in two diﬀerent modes: CUBES (standalone) and
CUBES+UVES, These modes are reﬂected in the template design. The mode CUBES+UVES will be preferably
operated in the way that UVES is remotely controlled from CUBES. A typical sequence could consist of the
following steps:

1. From the OB available on the CUBES workstation, an OB for UVES is created and transferred to the

UVES workstation;

2. Relevant database values are synchronized between the two workstations via a dedicated gateway;

3. The OB on the UVES workstation is remotely executed;

4. An exposure with CUBES is taken;

5. CUBES waits until the UVES exposure has been completed.

The number of templates as currently foreseen for the four template groups is given in Table 1.

Table 1. Number of templates foreseen for the individual groups.

Template type No. of templates
3
Acquisition
2 (CUBES and CUBES + UVES)
Observation
7
Calibration
7
Maintenance

2.4 The VLT/ELT gateway

CUBES will be one of the ﬁrst instruments to adopt ELT-SW framework and standards, which will be used
to develop and control all the future ESO/ELT instruments. But the CUBES instrument operates in a VLT
environment (Paranal observatory), hence the communications between CUBES and its environment needs to
be mediated by a dedicated software component, dubbed VLT / ELT gateway.

The main functionality exposed by the gateway is the possibility to automatically translate the communication
protocols from a VLT environment to an ELT one, and vice-versa. This means that a message sent with the new
ELT-SW sequencer could be received as if it was issued by an old VLT CCS application, and that a change in
a VLT On-Line Database (OLDB) could be reﬂected in a ELT application database. The above examples are
exactly the use cases required for CUBES, i.e. the possibility to send commands to the TCS telescope system
(for target pointing) and to UVES (to start the simultaneous exposure), as well as the possibility to read the
status of TCS and UVES in their OLDBs.

3. EXPOSURE TIME CALCULATOR (ETC)

The Exposure Time Calculator (ETC) is a tool to predict the performances of the CUBES spectrograph in
diﬀerent environmental conditions. It is a web-based tool through which the science community, in synergy with
the E2E simulator (see § 6 and [3]), has been able to test a range of science cases for CUBES during the phase-A.
The program supports two modes of functionality: at a given wavelength (λ) and for a given target magnitude in
the U or V bands it computes (1) the SNRλ per pixel achievable with a given user input exposure time (texp) and
(2) the exposure time required to obtain a given user input SNRλ per pixel. Finally, it also allows to compute
the limiting magnitude (in AB units) achievable at a pre-selected wavelength (assuming a SNRλ=3).

The ETC is a Python 3.7.6 script that is called by a web application written in Java and JavaScript and
uses the facilities of the Italian Center for Astronomical Archive (IA2) operated by INAF∗. The main page of
ETC (left panel of Fig. 3) is the observation parameters page and presents the entry ﬁelds and widgets for the
target information (U or V Vega magnitude, type of input spectrum), expected atmospheric conditions (the
Vsky magnitude in mag·arcsec−2, seeing, airmass), instrument conﬁguration (low or high resolution mode, CCD
binning), and the exposure time or signal-to-noise input parameter depending on the required output (SNRλ per
pixel or texp). The CUBES setup (i.e. slit, image slicer, gratings, cameras and CCDs characteristics) is hidden
to the user, but can be visualized via the ‘Toggle advanced setting’ at the bottom of the main page and the
setup parameters can be modiﬁed within their acceptable ranges allowing us to explore diﬀerent design solutions
during the Phase A study (for more details, see [3]). The result page presents the computed results, i.e. two
graphical outputs (SNRλ vs. texp and the limiting magnitude vs. SNRλ as shown in the top and bottom plots,

∗http://archives.ia2.inaf.it/cubes/#/etc

Figure 3. Left panel: ﬁrst web-page of the CUBES ETC, showing the inputs required to compute SNRλ. Right panel:
graphical outputs of the CUBES ETC version at the end of Phase A. In the top panel is plotted the predicted SNRλ vs
texp at λ=350 nm for diﬀerent exposure times with the high resolution mode of CUBES; the input template is a synthetic
spectrum (eﬀective temperature Teﬀ =5250 K, gravity log g=4.5, iron abundance [Fe/H]=0, and α-elements abundance
[α/Fe]=0) available in the ETC database as template and scaled to U = 18 mag, with other parameters set to: USky
= 22 mag arcsec−2, airmass = 1.05, seeing = 0.85(cid:48)(cid:48), dark current = 0.5e−/pix/hr, RON = 2.5 e− rms, and 1 × 1 pixel
binning; the vertical red line shows the SNRλ at the selected exposure time of 1 h. In the bottom panel is plotted SNRλ
vs AB magnitude limit diagram computed for texp = 1 h and the same conditions as in the top panel.

respectively in the right panel of Fig. 3). In addition to these graphical outputs, a table including the main
input data (like object type, sky condition, slit losses, number of counts from the object and the sky, wavelength
bin in ˚A/pix, instrument eﬃciencies, detector binning, detector noise counts, magnitude limit at SNRλ = 3, and
SNR/texp) is provided.

Current version of ETC computes SNRλ only for point source. We use the following classical equation for

computing the CUBES SNRλ:

SN Rλ =

(cid:113)

P Eobj · texp

[P Eobj + P Esky] · texp + NDC

2 · texp + NR

2

(1)

where P Eobj and P Esky are the numbers of photo-electrons per second and per wavelength bin (i.e. ˚A per pixel)
2 is the detector noise due to the dark current in photo-electrons
from the target and the sky, respectively; NDC
per second and integrated by summing the counts on the CCD area deﬁned by the integer number of pixels in
the dispersion direction (nx=1) corresponding to the wavelength bin and by the number of pixels in the spatial
direction (ny) depending on the observational conditions†; NR
2 is the detector read-out noise in photo-electrons
per nx · ny pixels; texp is the integration time in seconds.

Using an appropriate parameterization, ETC models the eﬀects of the atmosphere, telescope, slit, spectro-
graph, camera and detector and includes their eﬀects on the target’s photons that are derived starting from
a template spectrum (from the local database or a user-uploaded template). The ETC modelling approach is
coherent to that developed by the E2E simulator (§ 6) as conﬁrmed by the several and careful comparisons

†In the current version of ETC we compute ny by assuming of integrating the signal of each spectrum over a spatial

region of 1.2 times the seeing.

between the E2E and ETC for several reference input conﬁgurations. The reliable computation of SNRλ in a
variety of observing conditions, has provided a valuable tool for the astronomical community to explore the wide
range of science cases that CUBES aims to address (see [4]).

4. OBSERVATION PREPARATION SOFTWARE (OPS)

The Observation Preparation Software (OPS) aims to assist the user in designing the best observing strategy to
achieve a speciﬁc science goal. It guides the user through the allowed settings for the instrument (e.g. choice of
target and guide stars, instrument setup, choice of auxiliary calibrations, etc.). We are currently investigating
whether further CUBES-speciﬁc (so called “Level 3 OPS”) functionalities are required to, e.g., assist the user in
planning a monitoring campaign, or to implement a real-time scheduling strategy.

5. DATA REDUCTION SOFTWARE (DRS)

The Data Reduction Software (DRS) is responsible for extracting science-grade spectra from the raw science
and calibration frames produced by the instrument. Its main capabilities are: removing instrumental signature;
calibrate 2D spectra in physical units; remove sky and instrumental backgrounds as well as cosmic ray traces; ex-
tract a 1D spectrum (also combining diﬀerent exposures); and propagate the uncertainties. The requirements on
the DRS performances are: 5% precision and 20% accuracy in ﬂux calibration; 1.5e-3 nm accuracy in wavelength
calibration; execution time < 8 hours (goal: <3 hours) to reduce an observing night; <5 minutes to reduce an
OB for quality control.

The DRS is based on the ESO Common Pipeline Library (CPL) and the High-level Data Reduction Library

(HDRL) frameworks. The DRS package will include:

• a pipeline of reduction recipes (i.e. individual procedures, suitable to be run in cascade);

• a library of atomic reduction routines used by the recipes, to complement the CPL and the HDRL (if

needed), provided with unit tests;

• a set of conﬁguration ﬁles specifying the observational setup of the instrument and the organization,

classiﬁcation, and association (OCA) rules for the input and output data frames;

• a set of reference ﬁles specifying the spectral format, the position of lines for wavelength calibration, etc.

• one or more Python workﬂows implementing the cascade (with speciﬁc conﬁgurations for science and

quality control reduction), equipped with visualization tools to assess the status of the procedure;

• one or more sets of demo data to perform test reductions.

A schematic representation of the DRS pipeline is given in Fig. 4. Recipes are shown as white boxes and
grouped into recipes for routine calibration (CAL, including master bias, master dark, and master ﬂat creation,
and wavelength calibration), maintenance (MNT, including detector ﬂat-ﬁelding, linearity tests, and ﬂexure
compensation) and science reduction (SCI, including ﬂux calibration, 2D spectrum reduction and 1D spectrum
extraction). The main input of recipes are the calibration and science frames acquired by the instrument
detectors; the dotted lines show how products from previous recipes are associated to these raw frames to serve
as input of subsequent recipes. Fig. 4 also highlights one key feature of the DRS, i.e. the fact that the reduction
of 2D spectra and the extraction of 1D spectra are fully decoupled from each other. A raw spectrum is ﬁrst
reduced in the 2D space of the detector pixels by recipe SCI 2D (performing bias and dark subtraction, ﬂat-
ﬁelding, wavelength and ﬂux calibration) and then extracted and rebinned into a custom wavelength grid as a 1D
spectrum by recipe SCI 1D (adopting a drizzling-like algorithm originally developed for the ESPRESSO Data
Analysis Software; see [5]). This approach provides a natural way to selectively extract individual slices from
science frames and to coadd several exposures into a single 1D spectrum with a single rebinning procedure.

The DRS package will be able to operate both oﬄine (upon download on the users’ machines) and online
(in Paranal, triggered by the injection of data in the ESO On-Line Archive Subsystem). In the CUBES+UVES
mode, it will operate alongside the existing UVES data reduction pipeline.

Figure 4. Pipeline of the CUBES Data Reduction Software, with association between recipe products.

5.1 Data Analysis Software (DAS)

The Data Analysis Software (DAS) is a collection of science-focused procedures which operate in close interaction
with the DRS and which are aimed to extract scientiﬁc information from the reduced spectra, minimizing the
work load of the science user. It is currently under investigation whether such tools are beneﬁcial for CUBES to,
e.g., perform the co-addition of spectra or to extract speciﬁc information from a CUBES monitoring program.

6. END-TO-END SIMULATOR (E2E)

The End-to-End Instrument simulator (E2E) aims to simulate CUBES behaviour as a whole. Its inputs are the
observation conditions, the instrument setup and the target speciﬁcations, and its output is a raw data image
which simulates an observation carried out at the aforementioned conditions. The main purpose of the E2E is to
evaluate the performances of the instrument design, as well as to feed the DRS with realistic data in order to aid
its development and verify the requirement compliance. It has a modular architecture where diﬀerent modules
(each with speciﬁc tasks), units and interfaces, mimicking the functional architecture of the CUBES instrument
(for more details see [3]). Three versions of the CUBES E2E have been developed for diﬀerent user applications,
featuring diﬀerent capabilities (or functionalities) that were used during the Phase A design study. These are:

• Basic Version: aimed at science users, to assess the performance of the instrument with respect to the

science objectives, depending on the adopted instrument design.

• Parametric Version: provides fast parametric simulations of the diﬀerent possible design solutions and

conﬁgurations, as an aid for the design development.

• Full Version: produces high-level simulated frames based on a detailed physical model of the instrument
(including optical eﬀects as the contribution of blurring of the point spread function (PSF), distortions and
detector diﬀusion eﬀects), to be used for the development and testing of the data reduction pipeline.

Given the diﬀerent purposes and functionalities, the ﬁrst version is available on-line for the scientiﬁc commu-

nity, while the other two are used by the technical team.

The Basic Version of the simulator is implemented as a Python 3 library and accessed through a Jupyter
notebook [6]. The notebook includes both the basic code to perform the simulation and instructions on how to

CAL_MBIASCAL_MDARKCAL_MFLATCAL_WAVESCI_FLUXSCI_2DSCICALSCI_1DMNT_FFMNT_LINMNT_FLEXMNTFigure 5. Example simulated raw frame for Arm 1. The six slice traces are projected onto the upper half of the detector
to allow the lower half to be read out separately to record the active ﬂexure compensation (AFC) system (if analysis in
the next phases shows it is required).

execute it. Users can freely conﬁgure the parameters of the simulation and run it. The library and the notebook
are available as a Git repository through GitHub‡ for download on local machines. It is also hosted on Binder
[7], an online tool to execute Jupyter notebooks on a remote server interactively§. The Full Version, which
can be run both in MATLAB and Python (3.9), uses libraries for speciﬁc functionalities, as well as an ad-hoc
software wrapper we developed to interface with other software, such as the commercial optical ray tracing
Zemax-OpticStudio. The Parametric Version, currently developed only in MATLAB, shares some modules and
parts of code with the Full Version (e.g. the Science Object Module), while it employs an ad-hoc parametric
description of the spectrograph to run parametric simulations.

For a detailed description of the diﬀerent versions, their functionalities and how they were successfully used
in Phase-A to aid instrument design choices (trade-oﬀ analyses of diﬀerent potential designs for the HR mode,
and to also assess the performance of a LR mode for the instrument), as well as driving initial development of
pipeline recipes for the DRS, see again [3].

An example of a synthetic raw frame produced by the Full Version is shown in Fig. 5. The traces of the six
slices can be seen, in which it is also possible to see the decreasing ﬂux of the object towards the blue end of
the spectral range (left side of the ﬁgure). In the baseline design the traces are projected onto the upper half
of the detector because the lower half is used to record the AFC ﬁbre (if required). In the reference observing
condition for the HR mode, i.e. new moon, airmass 1.16, precipitable water vapour 30 mm and seeing = 0.87(cid:48)(cid:48)
in 1 hour exposure, the estimated detector noise (dark current = 0.5e−/pix/hr, RON = 2.5 e− rms) dominates
over the sky background and the sky ﬂux in the pixels cannot be easily distinguished; this is shown in Fig. 6.

‡https://github.com/gcupani/cubes.
§https://bit.ly/cubes_e2e (Note: the Binder version is limited in memory usage).

Figure 6. Example of noises spectrum extracted per pixel bin, over the six slices, for a reference observing condition (see
text for details).

R.S. acknowledges support by the Polish National Science Centre through project 2018/31/B/ST9/01469.

ACKNOWLEDGMENTS

REFERENCES

[1] Evans, C. J., Barbuy, B., Castilho, B., Smiljanic, R., Melendez, J., Japelj, J., Cristiani, S., Snodgrass, C.,
Bonifacio, P., Puech, M., and Quirrenbach, A., “Revisiting the science case for near-UV spectroscopy with
the VLT,” in [Ground-based and Airborne Instrumentation for Astronomy VII], Evans, C. J., Simard, L.,
and Takami, H., eds., Society of Photo-Optical Instrumentation Engineers (SPIE) Conference Series 10702,
107022E (July 2018).

[2] Cristiani, S. et al., “Cubes, the cassegrain u-band eﬃcient spectrograph,” SPIE Conference series 12189

(2022).

[3] Genoni, M., Landoni, M., Cupani, G., Franchini, M., Cirami, R., Zanutta, A., Evans, C., Di Marcantonio, P.,
Cristiani, S., Trost, A., and Zorba, S., “The CUBES instrument model and simulation tools,” Experimental
Astronomy (Mar. 2022).

[4] Evans, C. J. and et al., “The CUBES Science Case,” Experimental Astronomy (in press) (2022).
[5] Cupani, G., D’Odorico, V., Cristiani, S., Gonz´alez-Hern´andez, J. I., Lovis, C., Sousa, S., Calderone, G.,
Cirami, R., Di Marcantonio, P., and M´egevand, D., “Integrated data analysis in the age of precision spec-
troscopy: the ESPRESSO case,” in [Software and Cyberinfrastructure for Astronomy IV ], Chiozzi, G. and
Guzman, J. C., eds., Society of Photo-Optical Instrumentation Engineers (SPIE) Conference Series 9913,
99131T (July 2016).

[6] Kluyver, T., Ragan-Kelley, B., P´erez, F., Granger, B., Bussonnier, M., Frederic, J., Kelley, K., Hamrick, J.,
Grout, J., Corlay, S., Ivanov, P., Avila, D., Abdalla, S., Willing, C., and development team, J., “Jupyter
notebooks ? a publishing format for reproducible computational workﬂows,” in [Positioning and Power in
Academic Publishing: Players, Agents and Agendas], Loizides, F. and Scmidt, B., eds., 87–90, IOS Press
(2016).

[7] Project Jupyter, Matthias Bussonnier, Jessica Forde, Jeremy Freeman, Brian Granger, Tim Head, Chris
Holdgraf, Kyle Kelley, Gladys Nalvarte, Andrew Osheroﬀ, Pacer, M., Yuvi Panda, Fernando Perez, Ben-
jamin Ragan Kelley, and Carol Willing, “Binder 2.0 - Reproducible, interactive, sharable environments for
science at scale,” in [Proceedings of the 17th Python in Science Conference ], Fatih Akici, David Lippa, Dillon
Niederhut, and Pacer, M., eds., 113 – 120 (2018).

