2
2
0
2

r
a

M
1
3

]

O
C

.
t
a
t
s
[

1
v
7
7
1
7
1
.
3
0
2
2
:
v
i
X
r
a

Sample from copula : a COPPY module

Alexis Boulin∗1

1Laboratoire J.A. Dieudonn´e, UMR CNRS 7351, Universit´e Cˆote d’Azur, Nice, France

Abstract

The modeling of dependence between random variables is an important subject in several
applied ﬁelds of science. To this aim the copula function can be used as a margin-free description
of the dependence structure. Several copulae belong to speciﬁc families such as Archimedean,
Elliptical or Extreme. While software implementation of copulae has been thoroughly explored
in R software, methods to work with copula in Python are still in their infancy. To promote
the dependence modeling with copula in Python, we have developed COPPY, a library that
provides a range of random vector generation vector for copulae.

Keywords and phrases : Random number generation, copulae.

MSC2020 subject classiﬁcations : 65C10, 62H05.

1

Introduction

Modeling dependence relations between random variables is a topic of interest in probability theory

and statistics. The most popular approach is based on the second moment of the underlying random

variables namely, the covariance. It is well known that only linear dependence can be captured by the

covariance and it is characterizing only for a few models, e.g. the multivariate normal distribution.

As a beneﬁcial alternative of dependence, the concept of copulae going back to [Sklar, 1959]. The
copula C : [0, 1]d → [0, 1] of a random vector X = (X0, . . . , Xd−1) with d ≥ 2 allows us to separate
the eﬀect of dependence from the eﬀect of the marginal distribution such as:

P {X0 ≤ x0, . . . , Xd−1 ≤ xd−1} = C (P{X0 ≤ x0}, . . . , P{Xd−1 ≤ xd−1}) ,

where (x0, . . . , xd−1) ∈ Rd. The main consequence of this identity is that the copula completely
characterizes the stochastic dependence between the margins of X.

In other words, copulae allow to model marginal distributions and dependence structure separately.

Furthermore, motivated by Sklar’s theorem, the problem of investigating stochastic dependences

is being reduced to the problem of the investigating multivariate distribution function on the unit
hypercube [0, 1]d with uniform margins. The theory of copulae has been of prime interest for many

∗Corresponding author. Email address: aboulin@unice.fr

1

 
 
 
 
 
 
applied ﬁelds of science, such as quantitative ﬁnance, actuarial or environmental sciences. This

increasing number of applications has led to a demand for statistical methods. To name some,

semiparametric estimation [Genest et al., 1995], nonparametric estimation [Fermanian et al., 2004]

of copulae where investigated while [Gijbels et al., 2015, Portier and Segers, 2018] analyse the weak

convergence of the nonparametric estimation of conditional copulae. Such results are established

under a ﬁxed arbitrary ﬁxed dimension d ≥ 2 but several investigations (see [Einmahl and Lin, 2006,

Einmahl and Segers, 2021]) are done for functional data for the tail copula which capture the de-

pendence in the upper tail. The empirical version of this function is shown to converge weakly to

a Gaussian process which is similar in structure to the weak limit of the empirical copula process.

While software implementation of copulae has been thoroughly explored in R software see, e.g.,

[Stephenson, 2002, Jun Yan, 2007, Schepsmeier et al., 2019], methods to work with copulae in Py-

thon are still in their infancy. As far as we know, copulae devoted module in Python are mainly

designed for modeling (see [Alvarez et al., 2021, Bock and Chapman, 2021]). These modules use

maximum likelihood methods to estimate parametrically the copula from observed data and pro-

pose to sample synthetic data through the estimated copula model. Nevertheless, it does not allow

to generate random vector from a given copula model where the user just has to specify the de-

sired parameter. Furthermore, only Archimedean and elliptical families are investigated and the

multivariate case has not been investigated yet. Here, we propose to implement a wide range of

copulae which includes the extreme value class and, if possible, in arbitrary ﬁxed dimension d ≥ 2.

Through this article we adopt the following notational conventions such as all the indices will start
at 0 as in Python. Consider (Ω, A, P) and let X = (X0, . . . , Xd−1) be d-dimensional random vector
with values in (Rd, B(Rd)), with d ≥ 2. This random vector has a joint distribution F with copula
C and its margins are denoted by Fj(x) = P{Xj ≤ x} for all x ∈ R and j ∈ {0, . . . , d − 1}. Denote
by U = (U0, . . . , Ud−1) a d random vector with copula C and uniform margins. All bold letters x
will denote a vector of Rd.

The module COPPY1 is implemented using the object-oriented features of the Python language.
The classes are designed for Archimedean, elliptical, extreme value copulae. Section 2 brieﬂy

presents the classes deﬁned in the module. Section 3 describes methods to generate random vectors.

Section 4 presents an application of the COPPY in the ﬁeld of modelization of pairwise depend-

ence between maxima. Section 5 discusses some further improvements of the module and concludes.

Appendices A-E are devoted to deﬁne and illustrate all the parametric copula models implemented

in the module.

2 Classes

Three main classes are deﬁned in the COPPY module : Multivariate, Archimedean and Ex-

treme classes (see Figure 1 for a description of the architecture of the code). The Multivariate

1All Python code may be found in this github repository.

2

Multivariate

Archimedean

Clayton

φ, φ←,

˙φ

Frank

Extreme

Logistic

A,

˙A

Asymmetric Logistic

Gaussian

Student

Figure 1: Object diagram that structure the code. The Multivariate class is the deepest root
and serves to instantiate all its childs Archimedean, Extreme, Gaussian, Student in red.
Grandchilds corresponds to some parametric copula models and are depicted in blue. Examples of
methods are the great-grandchild colored in green.

class is designed to deﬁne multivariate copula (including the bivariate case) and is located at the

highest level of the code architecture. As a generic class, it contains methods to instantiate the

copula object or to sample from a copula with desired margins using inversion methods for example.

At a second level, we may ﬁnd its childrens, namely Archimedean, Extreme and Gaussian or

Student. These are copulae which belong to diﬀerent families of copulae, namely Archimedean

and extreme value copula for Archimedean and Extreme and elliptical copula for Gaussian

and Student. This partition is relevant theoretically as Archimedean and extreme value copulae

are studied on their own (see [Charpentier and Segers, 2009] or [Genest and Segers, 2009] to name

a few) but also in practice as they contain eﬀective sampling methods. However, Gaussian and

Student classes are split as the most eﬀective sampling algorithms are speciﬁc for each and cannot

be generalized in a broader elliptical class. At the third level of the architecture, we may ﬁnd some

important Archimedean and extreme value copulae parametric models (depicted as blue in Figure

1). These parametric models contain methods such as the generator function ϕ (see Section 2.1) for

the Archimedean and the Pickands dependence function A (see Section 2.2) for the extreme value

(in green in Figure 1). We recall in Section 2.1 the deﬁnition of Archimedean copulae and some of

its properties in high dimensional spaces. A characterization of extreme value copulae is given in

Section 2.2. For each section, the reader is referred to the appendices to discover the wide range of

copulae implemented in the module as Appendices A and C for Archimedean copulae, Appendices

B and D for extreme value copulae and lastly Appendix E for Elliptical copulae.

3

2.1 The Archimedean class

Let ϕ be a generator which is a strictly decreasing, convex function from [0, 1] to [0, ∞] such that
ϕ(1) = 0 and ϕ(0) = ∞. We denote by ϕ← the generalized inverse of ϕ. Let denote by

C(u) = ϕ←(ϕ(u0) + · · · + ϕ(ud−1)).

(1)

If this relation holds and C is a copula function, then C is called an Archimedean copula. A

characterization for (1) to be a copula is that the generator needs to be a d-monotonic function,

i.e. ϕ is diﬀerentiable there up to the order d and the derivatives satisfy

(−1)k (ϕ)(k) (x) ≥ 0,

k ∈ {1, . . . , d}

(2)

for x ∈ (0, ∞) (see corollary 2.1 of [McNeil and Neˇslehov´a, 2009]). It is peculiarly interesting to em-

phasize that d-monotone Archimedean inverse generators do not necessarily generate Archimedean

copulae in dimensions higher than d. To that extent, some Archimedean subclasses are only im-

plemented for the bivariate case as in a greater dimension, they do not generate an Archimedean

copula. In the bivariate case, it is worth noticing that Equation (2) can be interpreted as ϕ be a

convex function.

Implemented Archimedean copula classes in the module are commonly used one-parameter families,

such as Clayton ([Clayton, 1978]), Gumbel ([Gumbel, 1960]), Joe ([Joe, 1997]), Frank [Frank, 1979]

and AMH ([Ali et al., 1978]) copulae for the multivariate case. Remark that every Archimedean

copulae are always symmetric and in dimension 3 or higher only positive association are allowed.

For the speciﬁc bivariate case, other families such as numbers from 4.2.9 to 4.2.15 and 4.2.22 of

Section 4.2 of [Nelsen, 2007] are implemented. We refer the reader to Appendices A and C for

deﬁnitions and illustrations of these parametric copula models.

2.2 The Extreme class

Investigating the notion of copulae within the framework of multivariate extreme value theory leads

to the so-called extreme value copulae (see [Gudendorf and Segers, 2010] for an overview) deﬁned

as

C(u) = exp (−(cid:96)(− ln(u0), . . . , − ln(ud−1))) , u ∈ (0, 1]d,

(3)

with (cid:96) : [0, ∞)d → [0, ∞) the stable tail dependence function which is convex, homogeneous of
order one, namely (cid:96)(cx) = c(cid:96)(x) for c > 0 and satisﬁes max(x0, . . . , xd−1) ≤ (cid:96)(x0, . . . , xd−1) ≤
x0 +· · ·+xd−1, ∀x ∈ [0, ∞)d. Denote by ∆d−1 = {w ∈ [0, 1]d : w0 +· · ·+wd−1 = 1} the unit simplex.
By homogeneity, (cid:96) is characterized by the Pickands dependence function A : ∆d−1 → [1/d, 1], which
is the restriction of (cid:96) to the unit simplex ∆d−1 :

(cid:96)(x0, . . . , xd−1) = (x0 + · · · + xd−1)A(w0, . . . , wd−1), wj =

xj
x0 + · · · + xd−1

,

(4)

4

for j ∈ {1, . . . , d − 1} and w0 = 1 − w1 − · · · − wd−1 with x ∈ [0, ∞)d \ {0}.

From a practical point of view, the family of extreme value copulae is very rich and arises nat-

urally as the limiting distribution of properly normalised component-wise maxima. Furthermore,

it contains a rich variety of parametric models and allows asymmetric dependence. For the mul-

tivariate framework, the logistic copula (or Gumbel, see [Gumbel, 1960]) and the asymmetric lo-

gistic copula ([Tawn, 1990]) are implemented. We emphasize here that the logistic copula is the

sole model that is both Archimedean and extreme value. Bivariate extreme value copulae which

are included in the library are asymmetric logistic ([Tawn, 1988]), asymmetric negative logistic

([Joe, 1990]), asymmetric mixed ([Tawn, 1988]), H¨usler and Reiss ([H¨usler and Reiss, 1989]) and the

t-EV ([Demarta and McNeil, 2005]), Bilogistic ([Smith, 1990]), Dirichlet ([Boldi and Davison, 2007])

models. The reader is again invited to the appendices B and D for precise deﬁnitions of these models.

3 Random vector generator

We propose a Python-based implementation for generating random vectors from a wide variety of

copula. COPPY requires some external libraries in order to work. They are very few and are

freely available online.

• NumPy version 1.6.1 or newer. This is the fundamental module for scientiﬁc computing, it
contains linear algebra functions and matrix / vector objects ([Van Der Walt et al., 2011]).

• SciPy version 1.7.1 or newer. A library of open-source software for mathematics, science and

engineering ([Jones et al., 2001]).

The random vector generator methods in the code are sample unimargin and sample for the
Multivariate class. The ﬁrst one generates a sample where margins are uniformly distributed

on the unit segment [0, 1] while the second from the chosen margins. In Section 3.1, we present

an algorithm used to sample from a copula using the conditioning method. This method is very

general and may be used for every copula that is suﬃciently smooth (see Equations (6) and (7)

below). However, the practical infeasibility of the algorithm in a dimension higher than 2 and the

numerical inversion which is computationally intensive call for eﬃcient ways to sample in greater

dimensions. The purpose of Section 3.2 is to present those methods and details those used in the

module. In each Section, typical lines of codes are presented to instantiate a copula and to sample

with COPPY.

In the sequel, all Python code demonstration assumes that the modules have been loaded :

>>> from .coppy.rng import base, evd, archimedean, monte_carlo

>>> import numpy as np

>>> import matplotlib.pyplot as plt

5

3.1 The bivariate case

In this subsection, we will address the problem of generating a bivariate sample from a speciﬁed

joint distribution with d = 2. Suppose that we want to sample a bivariate random vector X with

copula C. If the components are independents, the procedure is straightforward as we can sample
in one hand from X0 and from X1 on the other hand. In the case of copula, this case is only a
special one.

One procedure to generate a pair (u0, u1) from U is the conditional distribution method. This
method is convenient if the law of U1 given U0 can be easily sampled. An interesting property of
copulae is the link between the conditional distribution and the derivative of the copula function

(see [Nelsen, 2007], page 41), namely

cu0(u1) (cid:44) P {U1 ≤ u1|U0 = u0} =

∂C(u0, u1)
∂u0

.

(5)

Thus, a convenient algorithm to simulate bivariate copula as long as the copula admits a ﬁrst partial

derivative with respect to its ﬁrst component is given by Algorithm 1.

Algorithm 1 Conditional sampling from a copula

1: Data: sample’s length n
2: Parameter of the copula θ, ψ1, ψ2
3: Result: Bivariate sample from the desired copula model U = {(u(1)
4: procedure sampling(n, θ, ψ1, ψ2)
5:

Generate two independent uniform random observations on the [0, 1] segment u0 and t1.
Set u1 = c←
u0(t1) where c←
u0 denotes the generalized inverse of cu0.
The desired pair is (u0, u1).

6:

7:

0 , u(1)

1 ), . . . , (u(n)

0 , u(n)

1 )}

For the sixth step of Algorithm 1, it is equivalent to ﬁnd u1 ∈ [0, 1] such that cu0(u1) − t1 = 0
holds. This u1 always exists because for every u ∈]0, 1[, 0 ≤ cu0(u) ≤ 1 and that u (cid:55)→ cu0(u) is an
increasing function (see Theorem 2.2.7 of op. cit. for a proof). This step is solved using the brentq
function from SciPy module. A suﬃcient condition in order that C admits a ﬁrst partial derivative

in the Archimedean and extreme value case is that the generator ϕ and the Pickands dependence

function A are continuously diﬀerentiable on ]0, 1[. Then the ﬁrst partial derivatives of C are given

respectively by :

∂C
∂u0
∂C
∂u0

(u0, u1) =

(u0, u1) =

ϕ(cid:48)(u0)
ϕ(cid:48)(C(u0, u1))
C(u0, u1)
u0

µ(t),

,

(u0, u1) ∈]0, 1[2,

(u0, u1) ∈]0, 1[2,

(6)

where t = log(u1)/log(u0u1) ∈ (0, 1) and µ(t) = A(t) − tA(cid:48)(t).

We now have all the necessary theoretical tools to give details on how the COPPY module is
designed. The ﬁle base.py contains the Multivariate class where the sample method sample

6

j

. Equation (5) indicate

from X with copula C. To do so, we use the inversion method that is to sample from U using
Algorithm 1 and we compose the corresponding uniform margins by F ←
that the sole knowledge of A and ϕ and their respective derivatives is needed in order to perform
the sixth step of Algorithm 1. For that purpose, Algorithm 1 named as cond sim in the code
and is located inside the Archimedean and Extreme class. Then each child of the bivariate
Archimedean (resp. Extreme) class is thus deﬁned by its generator ϕ (resp. A), it’s derivative ϕ(cid:48)
(resp. A(cid:48)) and it’s inverse ϕ← as emphasized in greed in Figure 1. Namely, we perform Algorithm
1 for the Archimedean subclasses Frank, AMH, Clayton (when θ < 0 for the previous three),
Nelsen 9, Nelsen 10, Nelsen 11, Nelsen 12, Nelsen 13, Nelsen 14, Nelsen 15 and Nelsen 22.
For the Extreme class, such algorithm is performed for the Asy neg log and Asy mixed. For other
models, faster algorithms are known and thus implemented, we refer to Section 3.2 for details.

The following code illustrates the random vector generation for a bivariate Archimedean copula.

By deﬁning the parameter of the copula and the sample’s length, constructor of this copulae are
available and might be call using Clayton() method such as :

>>> n_sample, theta = 1024, -0.5

>>> copula = archimedean.Clayton(theta = theta, n_sample = n_sample)

To obtain a sample with uniform margins and Clayton copula, we make use of the sample unimargin
as

>>> sample = copula.sample_unimargin()

Here’s, the sample object is a Numpy array with 2 columns and 1024 rows where each row contains
a realization from a Clayton copula (shown graphically in Figure 2).

Figure 2: Scatterplot of a sample from a Clayton copula (θ = −0.5).

3.2 The multivariate case

We will now address the simulation of multivariate Archimedean and Extreme value copulae pro-

posed on the COPPY module.

In the multivariate case, the link between partial derivatives

7

0.00.20.40.60.81.00.00.20.40.60.81.0conditioning remains. Indeed, let (U0, . . . , Ud−1) be a d-dimensional random vector with uniform
margins and copula C, the conditional distribution of Uk given the values of U0, . . . , Uk−1 is

P {Uk ≤ uk|U0 = u0, . . . , Uk−1 = uk−1} =

∂k−1C(u0, . . . , uk, 1, . . . , 1)/∂u0 . . . ∂uk−1
∂k−1C(u0, . . . , uk−1, 1, . . . , 1)/∂u0 . . . ∂uk−1

,

(7)

for k ∈ {1, . . . , d − 1}. The conditional simulation algorithm may be written as follows.

1. Generate d independent uniform random on [0, 1] variates v0, . . . , vd−1.

2. Set u0 = v0.

3. For k = 1, . . . , d − 1, evaluate the inverse of the conditional distribution given by Equation

(7) at vk, to generate uk.

Nevertheless, evaluation of the inverse conditional distribution becomes increasingly complicated

as the dimension d increases. Furthermore, it can be diﬃcult for some models to derive a closed

form of Equation (7) that makes it impossible to implement it in a general algorithm where only

the dimension d is an input. For multivariate Archimedean copulae, [McNeil and Neˇslehov´a, 2009]

give a method to generate a random vector from the d-dimensional copula C with generator ϕ

(see Section 5.2 of op. cit.). A stochastic representation for Archimedean copulae generated by a

d-monotone generator is given by

U = (ϕ←(RS1), . . . , ϕ←(RSd)) ∼ C,

(8)

where R ∼ FR, the radial distribution which is independent of S and S is distributed uniformly in the
unit simplex ∆d−1. One of challenging aspect of this algorithm is to have an accurate evaluation of
the radial distribution of the Archimedean copula and thus to numerically inverse this distribution.

The associated radial distribution for the Clayton copula is given in Example 3.3 in the cited paper

above while those of the Joe, AMH, Gumbel and Frank copulae are given in [Hofert et al., 2012].

In general, one can use numerical inversion algorithms for computing the inverse of the radial

distribution, however it will leads to spurious numerical errors. Other algorithms exist when the

generator is known to be the Laplace-Stieljes transform, denoted as LS, of some positive random

variable (see [Marshall and Olkin, 1988, Frees and Valdez, 1998]). This positive random variable is

often referenced as the frailty distribution. In this framework, Archimedean copulae allow for the

stochastic representation

U = (ϕ←(E1/V ), . . . , ϕ←(Ed/V )) ∼ C,

(9)

with V ∼ F = LS −1[ϕ←] the frailty and E1, . . . , Ed are distributed i.i.d. according to a standard
exponential and independent of V . The algorithm to sample from this is thus :

In this framework, we deﬁne frailty sim method deﬁned inside the Archimedean class which
performs Algorithm 2. Then, each Archimedean copula where the frailty distribution is known are
thus deﬁned by the generator ϕ, it’s inverse ϕ← and the frailty distribution denoted as LS −1[ϕ←]

8

Algorithm 2 Sampling from Archimedean copula using frailty distribution

1: Data: sample’s length n
2: Parameter of the copula θ
3: Result: multivariate sample from the desired copula model.
4: procedure sampling(n, θ)
5:

Sample V ∼ F = LS −1[ϕ←].
Sample E1, . . . , Ed
Return U = (ϕ←(E1/V ), . . . , ϕ←(Ed/V )).

i.i.d.∼ E(1), independent of V .

6:

7:

as long as we know the frailty. This is the case for Joe, Clayton, AMH or Frank.

For the extreme value case, algorithms have been proposed as in [Stephenson, 2003] (see Algorithms

2.1 and 2.2) who proposes sampling methods for the Gumbel and the asymmetric logistic model.

These algorithms are implemented in the COPPY module. Note that these algorithms are model-
speciﬁc, thus the sample unimargin method is exceptionally located in the corresponding child of
the multivariate Extreme class. Another procedure designed by [Dombry et al., 2016] to sample

from multivariate extreme value models using extremal functions (see Algorithm 2 of the reference

cited above) is also of prime interest. For the implemented models using this algorithm, namely
H¨usler-Reiss, tEV, Bilogistic and Dirichlet models, a method called rExtFunc is located inside
each classes which allows to generate an observation from the according law of the extremal function.

Sample from the Gaussian and Student copula are directly given by Algorithm 5.9 and 5.10 respect-
ively of [Alexander J. McNeil, 2005]. As each algorithm is model speciﬁc, the sample unimargin
method is located inside the Gaussian and Student classes.

We present how to construct a multivariate Archimedean copula and to generate random vectors

from this model. Introducing the parameters of the copula, we appeal the following lines to construct

our copula object :

>>> d, theta, n_sample = 3, 2.0, 1024

>>> copula = mv_archimedean.Clayton(theta = theta, n_sample = n_sample,

>>> d = d)

We now call the sample unimargin method to obtain vector randomly generate.

sample = copula.sample_unimargin()

We thus represent in three dimensions in Figure 3.

4 Case study : Modeling pairwise dependence between spatial

maximas with missing data

We now proceed to a case study where we use our Python module to assess, under a ﬁnite sample

framework, the asymptotic properties of an estimator of the λ-madogram when data are completely

9

Figure 3: Scatterplot of a sample from a Clayton copula (θ = 2.0).

missing at random (MCAR). This case study comes from numerical results of [Boulin et al., 2021].

The λ-madogram belongs to a family of estimators, namely the madogram, which is of prime

interest in environmental sciences, as it is designed to model pairwise dependence between maxima in

space, see e.g. [Bernard et al., 2013, Bador et al., 2015, Saunders et al., 2021] where the madogram

was used as a dissimilarity measure to perform clustering. Where in several ﬁelds, for example

econometrics ([Wooldridge, 2007]) or survey theory ([Boistard et al., 2016]), the MCAR hypothesis

appears to be a strong hypothesis, this hypothesis is more realistic in environmental research as the

missingness of one observation is usually due to instruments, communication and processing errors

that may be reasonably supposed independent of the quantity of interest. In Section 4.1, we deﬁne

objects and properties of interests while in Section 4.2 we describe a detailed tutorial in Python and

with COPPY module to compare the asymptotic variance with an empirical counterpart of the

λ-madogram with λ = 0.5.

4.1 Background

It was emphasized that the possible dependence between maxima can be described with the extreme

value copula. This function is completely characterized by the Pickands dependence function (see

Equation (4)) where the latter is equivalent to the λ-madogram introduced by [Naveau et al., 2009]

and deﬁned as

ν(λ) = E

(cid:104)(cid:12)
(cid:12)

(cid:12){F0(X0)}1/λ − {F1(X1)}1/(1−λ)(cid:12)

(cid:12)
(cid:12)

(cid:105)

,

(10)

with λ ∈ (0, 1) and if λ = 0 and 0 < u < 1, then u1/λ = 0 by convention. The latter quantity
took its inspiration from the extensively used geostatistics tool, namely, the variogram (see Chapter

1.3 of [Gaetan and Guyon, 2008] for a deﬁnition and some classical properties). The λ-madogram
can be interpreted as the L1-distance between the uniform margins elevated to the inverse of the
corresponding weights λ and 1 − λ. This quantity describes the dependence structure between

extremes by its relation with the Pickands dependence function, if we suppose that C is an extreme

10

u00.00.20.40.60.81.0u10.00.20.40.60.81.0u20.00.20.40.60.81.0value copula as in Equation (3), we have

A(λ) =

ν(λ) + c(λ)
1 − ν(λ) − c(λ)

,

(11)

with c(λ) = 2−1(λ/(1 − λ) + (1 − λ)/λ) (see Proposition 3 of [Marcon et al., 2017] for details).
We consider independent and identically distributed i.i.d. copies X1, . . . , Xn of X. In presence of
missing data, we do not observe a complete vector Xi for i ∈ {1, . . . , n}. We introduce Ii ∈ {0, 1}2
which satisﬁes, ∀j ∈ {0, 1}, Ii,j = 0 if Xi,j is not observed. To formalize incomplete observations,
we introduce the incomplete vector ˜Xi with values in the product space (cid:78)2
j=1(R ∪ {NA}) such as

˜Xi,j = Xi,jIi,j + NA(1 − Ii,j),

i ∈ {1, . . . , n}, j ∈ {0, . . . , d − 1}.

We thus suppose that we observe a 4-tuple such as

(Ii, ˜Xi),

i ∈ {1, . . . , n},

(12)

i.e. at each i ∈ {1, . . . , n}, several entries may be missing. We also suppose that for all i ∈ {1, . . . , n},
Ii are i.i.d copies from I = (I0, I1) where Ij is distributed according to a Bernoulli random variable
B(pj) with pj = P(Ij = 1) for j ∈ {0, 1}. We denote by p the probability of observing completely
a realization from X, that is p = P(I0 = 1, I1 = 1). In [Boulin et al., 2021], hybrid and corrected
estimators, respectively denoted as ˆνH
n , are proposed to estimate nonparametrically the
λ-madogram in presence of missing data completely at random. Furthermore, a closed expression

n and ˆνH∗

of their asymptotic variances for λ ∈]0, 1[ is also given. This result is summarized in the following

proposition.

Proposition 1 ([Boulin et al., 2021]). Let (Ii, ˜Xi)n
C is an extreme value copula in (3) with Pickands dependence function A, we have

i=1 be a sample given by (12). For λ ∈]0, 1[, if

√

E H
n (λ) (cid:44)

E H∗
n (λ) (cid:44)

n (cid:0)ˆνH
√

n (λ) − ν(λ)(cid:1)
n (λ) − ν(λ)(cid:1)

n (cid:0)ˆνH∗

d→
n→∞
d→
n→∞

N (cid:0)0, S H(p0, p1, p, λ)(cid:1) ,

N (cid:0)0, S H∗(p0, p1, p, λ)(cid:1) ,

where ν(λ) is deﬁned in (10), S H(p0, p1, p, λ) and S H∗(p0, p1, p, λ) are the asymptotic variances of
the random variables where the closed expression is given in [Boulin et al., 2021], Proposition 1.

4.2 Numerical results

Beneﬁting of generating data with COPPY we are thus able, with Monte Carlo simulation, to

assess theoretical results given by Proposition 1 in a ﬁnite sample setting. For that purpose, we
implement a Monte Carlo class (in monte carlo.py ﬁle) which contains some methods to perform
some Monte Carlo iterations for a given extreme value copula. Before going any further, we have

to import the necessary libraries

11

>>> from .coppy.rng import base, evd, archimedean, monte_carlo

>>> import numpy as np

>>> import matplotlib.pyplot as plt

>>> from scipy.stats import norm, expon

>>> plt.style.use('seaborn-whitegrid')

We thus set up parameters to simulate our bivariate dataset. For this subsection, we choose the
asymmetric negative logistic model (see Appendix B for a deﬁnition) with parameters θ = 10, ψ1 =
0.1, ψ2 = 1.0.

>>> np.random.seed(42)

>>> n_sample = 1024

>>> theta, psi1, psi2 = 10, 0.1, 1.0

We choose the standard normal and exponential as margins. To simulate this sample, the following

lines should be typed:

>>> copula = evd.Asy_neg_log(theta = theta, psi1 = psi1, psi2 = psi2,

>>> n_sample = n_sample)

>>> sample = copula.sample(inv_cdf = [norm.ppf, expon.ppf])

The 1024 × 2 array sample contains 1024 realization of the asymmetric negative logistic model
where the ﬁrst column is distributed according to a standard normal random variable and the second

column as a standard exponential. This distribution is depicted in Figure 4. To obtain it, one needs

the following lines of command :

>>> seagreen = sns.light_palette("seagreen", as_cmap = True)

>>> fig, ax = plt.subplots()

>>> ax.scatter(sample[:,0], sample[:,1], color = seagreen(0.25),

>>> s = 1, marker = '.')

>>> ax.set_xlabel(r'$x_0$')

>>> ax.set_ylabel(r'$x_1$')

>>> plt.show()

Before going into further details, we will present the missing mechanism. Let V0 and V1 be random
variables uniformly distributed under the ]0, 1[ segment with copula C(V0,V1). We set I0 = 1{V0≤p0}
and I1 = 1{V1≤p1}. It is thus immediate that I0 ∼ B(p0) and I1 ∼ B(p1) and p (cid:44) P{I0 = 1, I1 = 1} =
C(V0,V1)(p0, p1). For our illustration, we will take C(V0,V1) as a Joe copula with parameter τ = 2.0
(We refer to Appendix A for a representation of this copula). Thereby, if X0 is not observed, it
is more likely to not observe X1 also. A contrario, the observation of X0 doesn’t inﬂuence the
observation of the other random variable X1. Indeed, for this copula, more likely is to observe a
realization v0 ≥ 0.8 from V0 if v1 ≥ 0.8 from V1. If we observe v1 < 0.8, the realization v0 is close
to be independent of v1. In climate studies, extreme events could damage the recording instrument
in the surrounding regions where they occur, thus the missingness of one variable may depend from

12

Figure 4: A realization from the asymmetric negative logistic model with Gaussian and Ex-
ponent margins and parameters θ = 10, ψ1 = 0.1, ψ2 = 1.0 and sample’s length n = 1024.

others. We initialize the copula C(V0,V1) by the following line

>>> copula_miss = archimedean.Joe(theta = 2.0, n_sample = n_sample)

For a given λ ∈]0, 1[ we now want to estimate a λ-madogram with a sample simulate from the asym-

metric negative logistic and where some observations would be of lack by the missing mechanism

described above. We thus replicate this step several times to compute an empirical counterpart
of the asymptotic variance. The Monte Carlo object has been designed in this way : we specify
the number of iterations niter (take niter = 1024), the chosen extreme value copula (asymmetric
negative logistic model), the missing mechanism (described by C(V0,V1) and p0 = p1 = 0.9) and λ
(noted w). We thus write the following lines :

>>> u = np.array([0.9, 0.9])

>>> n_iter, P = 1024, [[u[0], copula_miss._C(u)], [copula_miss._C(u), u[1]]]

>>> w = np.array([0.5,0.5])

>>> monte = monte_carlo.Monte_Carlo(n_iter = n_iter, n_sample = n_sample,

>>> copula = copula, copula_miss = copula_miss, w = w, P = P)

The Monte Carlo object is thus initialized with all parameters needed. We may use the simu
method to generate a DataFrame (a Pandas object) composed out 1024 rows and 3 columns. Each
row contains an estimate of the λ-madogram, ˆνH∗
in Proposition 1 (FMado), the sample length n
(n) and the normalized estimation error (scaled). We thus call the simu method.

n

13

3210123x0012345678x1>>> df_wmado = monte.simu(inv_cdf = [norm.ppf, expon.ppf], corr = True)

>>> print(df_wmado.head())

0

1

2

3

4

FMado

0.093616

0.092162

0.102613

0.103179

0.097594

n

1024.0

1024.0

1024.0

1024.0

1024.0

scaled

-0.052167

-0.098678

0.235743

0.253861

0.075127

Where corr = True speciﬁes that we compute the corrected estimator, ˆνH∗
in Proposition 1. Now,
using the var mado method deﬁned inside in the Extreme class, we obtain the asymptotic variance
for the given model and parameters from the missing mechanism. We obtain this quantity as follows

n

>>> var_mado = copula.var_FMado(lmbd, copula_miss._C(p[0],p[1]), p[0], p[1],

>>> corr = True)

>>> print(var_mado)

0.028117472716287062

We propose here to check numerically the asymptotic normality with variance S H∗ of the normalized
estimation error of the corrected estimator. We have all data in hand and the asymptotic variance

was computed by lines above. We thus write :

>>> fig, ax = plt.subplots()

>>> sigma = np.sqrt(var_mado)

>>> x = np.linspace(min(df_wmado['scaled']), max(df_wmado['scaled']), 1000)

>>> gauss = gauss_function(x, 0, sigma)

>>> sns.displot(data = df_wmado, x = "scaled", color = seagreen(0.5),

>>> kind = 'hist', stat = 'density', common_norm = False,

>>> alpha = 0.5, fill = True, linewidth = 1.5)

>>> plt.plot(x,gauss, color = 'darkblue')

>>> plt.show()

Result of these lines might be found in Figure 5.

5 Discussion

This article presents the construction and some implementations of the Python module COPPY for

random copula sampling. This is a seminal work of software implement of copula modeling in Py-

thon and there’s much more to do. It is implicitly hoped that the potential diﬀusion of the software

through everyone who need it may bring other implementations for multivariate modeling with cop-

ulae under Python. For example, choosing a copula to ﬁt the data is an important but diﬃcult prob-

lem. A robust approach to estimate copulae has been investigated recently by [Alquier et al., 2020]

using Maximum Mean Discrepancy. In link with our example, semiparametric estimation of copulae

14

Figure 5: Histogram of E H∗
with variance S H∗.

n

in Proposition 1 where the solid line is the density of a centered Gaussian

with missing data could be of great interest as proposed by [Hamori et al., 2019].

Also, implement algorithm proposed by [McNeil and Neˇslehov´a, 2009] to generate random vectors

for Archimedean copulae has been tackled but, as expected, the numerical inversion gives spurious

results especially where the parameter θ and the dimension d are high. Furthermore, as the support

of radial distribution is contained in the real line, the numerical inversion induces a greater time

of computation. Further investigations are thus needed in order to generate random vectors from

classical Archimedan models using the radial distribution.

A direction of improvement for the COPPY module is dependence modeling with Vine cop-

ula which has been recently a tool of high interest in the machine learning community see, e.g.,

[Lopez-Paz et al., 2013, Veeramachaneni et al., 2015, Carrera et al., 2016, Gon¸calves et al., 2016] or

[Sun et al., 2019]. Therefore, it strengthens the need of dependence modeling with copulae in Py-

thon as a not negligeable part of the machine learning community use this language. In link with

this article, Vine copulae might be interesting to model dependencies between extreme as sugges-

ted by [Simpson et al., 2021, Nolde and Wadsworth, 2021]. Last, another copula model could be

implemented to model further dependencies. These implementations will push forward the scope of

dependence modeling with Python and gives high quality usable tools for everyone in needs.

15

0.60.40.20.00.20.4scaled0.00.51.01.52.02.5DensityReferences

[Alexander J. McNeil, 2005] Alexander J. McNeil, Rudiger Frey, P. E. (2005). Quantitative Risk

Management - Concepts, Techniques and Tools. Princeton Series in Finance. Princeton University

Press.

[Ali et al., 1978] Ali, M. M., Mikhail, N., and Haq, M. (1978). A class of bivariate distributions

including the bivariate logistic. Journal of Multivariate Analysis, 8(3):405–412.

[Alquier et al., 2020] Alquier, P., Ch´erief-Abdellatif, B.-E., Derumigny, A., and Fermanian, J.-D.

(2020). Estimation of copulas via maximum mean discrepancy.

[Alvarez et al., 2021] Alvarez, M., Sala, C., Sun, Y., P´erez, J., Zhang, K., Montanez, A., Bonomi,
G., Veeramachaneni, K., Ram´ırez, I., and Hofman, F. (2021). Copulas. https://github.com/
sdv-dev/Copulas.

[Bador et al., 2015] Bador, M., Naveau, P., Gilleland, E., Castell`a, M., and Arivelo, T. (2015).

Spatial clustering of summer temperature maxima from the cnrm-cm5 climate model ensembles

& e-obs over europe. Weather and Climate Extremes, 9:17–24.

[Bernard et al., 2013] Bernard, E., Naveau, P., Vrac, M., and Mestre, O. (2013). Clustering of

Maxima: Spatial Dependencies among Heavy Rainfall in France. Journal of Climate, 26(20):7929–

7937.

[Bock and Chapman, 2021] Bock, D. and Chapman, J. (2021). Copulae. https://github.com/

DanielBok/copulae.

[Boistard et al., 2016] Boistard, H., Chauvet, G., and Haziza, D. (2016). Doubly robust inference

for the distribution function in the presence of missing survey data. Scandinavian Journal of

Statistics, 43(3):683–699.

[Boldi and Davison, 2007] Boldi, M. and Davison, A. C. (2007). A mixture model for multivariate

extremes. Journal of the Royal Statistical Society Series B, 69(2):217–229.

[Boulin et al., 2021] Boulin, A., Di Bernardino, E., Lalo¨e, T., and Toulemonde, G. (2021). Non-

parametric estimator of a multivariate madogram for missing-data and extreme value framework.

arXiv preprint arXiv:2112.13575.

[Carrera et al., 2016] Carrera, D., Santana, R., and Lozano, J. A. (2016). Vine copula classiﬁers

for the mind reading problem. Progress in Artiﬁcial Intelligence, 5:289–305.

[Charpentier and Segers, 2009] Charpentier, A. and Segers, J. (2009). Tails of multivariate

archimedean copulas. Journal of Multivariate Analysis, 100(7):1521–1537.

[Clayton, 1978] Clayton, D. G. (1978). A model for association in bivariate life tables and its ap-

plication in epidemiological studies of familial tendency in chronic disease incidence. Biometrika,

65(1):141–151.

16

[Demarta and McNeil, 2005] Demarta, S. and McNeil, A. J. (2005). The t copula and related

copulas. International Statistical Review, 73(1):111–129.

[Dombry et al., 2016] Dombry, C., Engelke, S., and Oesting, M. (2016). Exact simulation of max-

stable processes. Biometrika, 103(2):303–317.

[Einmahl and Lin, 2006] Einmahl, J. H. J. and Lin, T. (2006). Asymptotic normality of extreme

value estimators on C([0, 1]). The Annals of Statistics, 34(1):469–492.

[Einmahl and Segers, 2021] Einmahl, J. H. J. and Segers, J. (2021). Empirical tail copulas for

functional data. The Annals of Statistics, 49(5):2672 – 2696.

[Fermanian et al., 2004] Fermanian, J.-D., Radulovi´c, D., and Wegkamp, M. (2004). Weak conver-

gence of empirical copula processes. Bernoulli, 10(5):847–860.

[Frank, 1979] Frank, M. (1979). On the simultaneous associativity of f(x, y) and x + y - f(x, y).

Aequationes mathematicae, 19:194–226.

[Frees and Valdez, 1998] Frees, E. W. and Valdez, E. A. (1998). Understanding relationships using

copulas. North American actuarial journal, 2(1):1–25.

[Gaetan and Guyon, 2008] Gaetan, C. and Guyon, X. (2008). Mod´elisation et statistique spatiales.

Math´ematiques & applications. Springer, Berlin Heidelberg New York.

[Genest et al., 1995] Genest, C., Ghoudi, K., and Rivest, L.-P. (1995). A semiparametric estima-

tion procedure of dependence parameters in multivariate families of distributions. Biometrika,

82(3):543–552.

[Genest and Segers, 2009] Genest, C. and Segers, J. (2009). Rank-based inference for bivariate

extreme-value copulas. The Annals of Statistics, 37(5B):2990–3022.

[Gijbels et al., 2015] Gijbels, I., Omelka, M., and Veraverbeke, N. (2015). Estimation of a cop-

ula when a covariate aﬀects only marginal distributions. Scandinavian Journal of Statistics,

42(4):1109–1126.

[Gon¸calves et al., 2016] Gon¸calves, A. R., Von Zuben, F. J., and Banerjee, A. (2016). Multi-task

sparse structure learning with gaussian copula models. J. Mach. Learn. Res., 17(1):1205–1234.

[Gudendorf and Segers, 2010] Gudendorf, G. and Segers, J. (2010). Extreme-value copulas.

In

Copula theory and its applications, volume 198 of Lect. Notes Stat. Proc., pages 127–145. Springer,

Heidelberg.

[Gumbel, 1960] Gumbel, E. (1960). Distributions de valeurs extrˆemes en plusieurs dimensions.

Publications de l’institut de Statistique de l’Universit´e de Paris, 9:171–173.

[Hamori et al., 2019] Hamori, S., Motegi, K., and Zhang, Z. (2019). Calibration estimation of

semiparametric copula models with data missing at random. Journal of Multivariate Analysis,

173:85–109.

17

[Hofert et al., 2012] Hofert, M., M¨achler, M., and McNeil, A. J. (2012). Likelihood inference for

archimedean copulas in high dimensions under known margins. Journal of Multivariate Analysis,

110:133–150.

[H¨usler and Reiss, 1989] H¨usler, J. and Reiss, R.-D. (1989). Maxima of normal random vectors:

Between independence and complete dependence. Statistics & Probability Letters, 7(4):283–286.

[Joe, 1990] Joe, H. (1990). Families of min-stable multivariate exponential and multivariate extreme

value distributions. Statistics & Probability Letters, 9:75–81.

[Joe, 1997] Joe, H. (1997). Multivariate Models and Multivariate Dependence Concepts. Chapman

& Hall/CRC Monographs on Statistics & Applied Probability. Taylor & Francis.

[Jones et al., 2001] Jones, E., Oliphant, T., and Peterson, P. (2001). SciPy: open source scientiﬁc

tools for Python.

[Jun Yan, 2007] Jun Yan (2007). Enjoy the joy of copulas: With a package copula. Journal of

Statistical Software, 21(4):1–21.

[Lopez-Paz et al., 2013] Lopez-Paz, D., Hern´andez-Lobato, J. M., and Zoubin, G. (2013). Gaus-

sian process vine copulas for multivariate dependence. In International Conference on Machine

Learning, pages 10–18. PMLR.

[Marcon et al., 2017] Marcon, G., Padoan, S., Naveau, P., Muliere, P., and Segers, J. (2017). Mul-

tivariate nonparametric estimation of the pickands dependence function using bernstein polyno-

mials. Journal of Statistical Planning and Inference, 183:1–17.

[Marshall and Olkin, 1988] Marshall, A. W. and Olkin, I. (1988). Families of multivariate distribu-

tions. Journal of the American Statistical Association, 83(403):834–841.

[McNeil and Neˇslehov´a, 2009] McNeil, A. J. and Neˇslehov´a, J. (2009). Multivariate Archimedean

copulas, d-monotone functions and l1-norm symmetric distributions. The Annals of Statistics,

37(5B):3059 – 3097.

[Naveau et al., 2009] Naveau, P., Guillou, A., Cooley, D., and Diebolt, J. (2009). Modelling pairwise

dependence of maxima in space. Biometrika, 96(1):1–17.

[Nelsen, 2007] Nelsen, R. B. (2007). An introduction to copulas. Springer Science & Business Media.

[Nolde and Wadsworth, 2021] Nolde, N. and Wadsworth, J. L. (2021). Linking representations for

multivariate extremes via a limit set.

[Portier and Segers, 2018] Portier, F. and Segers, J. (2018). On the weak convergence of the em-

pirical conditional copula under a simplifying assumption. Journal of Multivariate Analysis,

166:160–181.

[Saunders et al., 2021] Saunders, K., Stephenson, A., and Karoly, D. (2021). A regionalisation

approach for rainfall based on extremal dependence. Extremes, 24.

18

[Schepsmeier et al., 2019] Schepsmeier, U., Stoeber, J., Brechmann, E., Graeler, B., Nagler, T.,

Erhardt, T., Almeida, C., Min, A., Czado, M., Hofmann, M., and Kiliches, M. (2019). Vinecopula

: Statistical inference of vine copulas. Package ”VineCopula”. R package, version 2.3.0.

[Simpson et al., 2021] Simpson, E. S., Wadsworth, J. L., and Tawn, J. A. (2021). A geometric in-

vestigation into the tail dependence of vine copulas. Journal of Multivariate Analysis, 184:104736.

[Sklar, 1959] Sklar, A. (1959). Fonctions de r´epartition `a n dimensions et leurs marges. Publications

de l’Institut de Statistique de l’Universit´e de Paris, 8:229–231.

[Smith, 1990] Smith, R. L. (1990). Extreme value theory. Handbook of Applicable Mathematics

(ed. W. Ledermann), vol. 7. Chichester: John Wiley, pp. 437–471.

[Stephenson, 2003] Stephenson, A. (2003). Simulating multivariate extreme value distributions of

logistic type. Extremes, 6(1):49–59.

[Stephenson, 2002] Stephenson, A. G. (2002). evd: Extreme value distributions. R News, 2(2):0.

[Sun et al., 2019] Sun, Y., Cuesta-Infante, A., and Veeramachaneni, K. (2019). Learning vine cop-

ula models for synthetic data generation. Proceedings of the AAAI Conference on Artiﬁcial

Intelligence, 33(01):5049–5057.

[Tawn, 1988] Tawn, J. A. (1988). Bivariate extreme value theory: Models and estimation. Biomet-

rika, 75(3):397–415.

[Tawn, 1990] Tawn, J. A. (1990). Modelling multivariate extreme value distributions. Biometrika,

77(2):245–253.

[Van Der Walt et al., 2011] Van Der Walt, S., Colbert, S. C., and Varoquaux, G. (2011). The

NumPy array: a structure for eﬃcient numerical computation. Computing in Science and En-

gineering, 13(2):22–30.

[Veeramachaneni et al., 2015] Veeramachaneni, K., Cuesta-Infante, A., and O’Reilly, U.-M. (2015).

Copula graphical models for wind resource estimation. In IJCAI.

[Wooldridge, 2007] Wooldridge, J. M. (2007). Inverse probability weighted estimation for general

missing data problems. Journal of Econometrics, 141(2):1281–1301.

19

A Bivariate archimedean models

Table 1: Bivariate archimedean models in COPPY module.

Name

ϕ(t)

Constraints

Figure

θ = 1

θ = −0.5

θ = −8

θ = 2

θ = 1

θ = 1

Clayton

1
θ (t−θ − 1)

θ ∈ [−1, ∞) \ {0}

AMH

log( 1−θ(1−t)

t

)

θ ∈ [−1, 1)

Frank

−log( e−θt−1
e−θ−1 )

θ ∈ R \ {0}

Joe

−log(1 − (1 − t)θ)

θ ∈ [1, ∞)

Nelsen n°9

log(1 − θlog(t))

θ ∈]0, 1]

Nelsen n°10

log(2t−θ − 1)

θ ∈]0, 1]

20

0.00.20.40.60.81.0u00.00.20.40.60.81.0u10.00.20.40.60.81.0u00.00.20.40.60.81.0u10.00.20.40.60.81.0u00.00.20.40.60.81.0u10.00.20.40.60.81.0u00.00.20.40.60.81.0u10.00.20.40.60.81.0u00.00.20.40.60.81.0u10.00.20.40.60.81.0u00.00.20.40.60.81.0u1Table 2: Bivariate archimedean models in COPPY module.

Name

ϕ(t)

Constraints

Figure

θ = 1.5

θ = 1.5

θ = 2

θ = 5

θ = 1.5

θ = 0.5

Nelsen n°11

log(2 − tθ)

θ ∈]0, 0.5]

Nelsen n°12

( 1
t − 1)θ

θ ∈]0, ∞) \ {0}

Nelsen n°13 (1 − log(t))θ − 1

θ ∈]0, ∞[

Nelsen n°14

(t− 1

θ − 1)θ

θ ∈]1, ∞)

Nelsen n°15

(1 − t

1

θ )θ

[1, ∞)

Nelsen n°22

arcsin(1 − tθ)

θ ∈ [0, 1]

21

0.00.20.40.60.81.0u00.00.20.40.60.81.0u10.00.20.40.60.81.0u00.00.20.40.60.81.0u10.00.20.40.60.81.0u00.00.20.40.60.81.0u10.00.20.40.60.81.0u00.00.20.40.60.81.0u10.00.20.40.60.81.0u00.00.20.40.60.81.0u10.00.20.40.60.81.0u00.00.20.40.60.81.0u1B Implemented bivariate extreme models

Table 3: Bivariate extreme models in COPPY module.

Name

A(w)

Constraints

Figure

Gumbel

[w1/θ + (1 − w)1/θ]θ

θ ∈]0, 1]

Galambos

1 − [w−θ + (1 − w)−θ]− 1

θ

θ ∈ [0, ∞)

Asy. log.

(1 − ψ1)w + (1 − ψ2)(1 − w)
1
+[(ψ1w)θ + (ψ2(1 − w))θ]
θ

θ ∈ [1, ∞)
ψ1, ψ2 ∈ (0, 1]

Asy. neg.
log.

1 − [(ψ1w)−θ + (ψ2(1 − w))−θ]− 1

θ

θ ∈ [0, ∞)
ψ1, ψ2 ∈ (0, 1]

θ = 10
ψ1 = 0.5
ψ2 = 1.0

Asy. mixed

1 − (θ + ψ1)w + θw2 + ψ1w3

Husler Reiss

(1 − w)Φ(θ + 1
+wΦ(θ + 1

2θ log( 1−w
1−w ))

2θ log( w

w ))

θ ≥ 0,
θ + 3ψ1 ≥ 0,
θ + ψ1 ≤ 1,
θ + 2ψ1 ≤ 1.

θ ∈ (0, ∞)

t-EV

wtψ1+1(zw) + (1 − w)tψ1+1(z1−w)

θ ∈ (−1, 1)

22

θ = 0.5

θ = 1.5

θ = 1.5
ψ1 = 0.1
ψ2 = 1.0

θ = 4/3
ψ1 = −1/3

θ = 1.0

θ = 0.8
ψ1 = 0.2

0.00.20.40.60.81.0u00.00.20.40.60.81.0u10.00.20.40.60.81.0u00.00.20.40.60.81.0u10.00.20.40.60.81.0u00.00.20.40.60.81.0u10.00.20.40.60.81.0u00.00.20.40.60.81.0u10.00.20.40.60.81.0u00.00.20.40.60.81.0u10.00.20.40.60.81.0u00.00.20.40.60.81.0u10.00.20.40.60.81.0u00.00.20.40.60.81.0u1C Multivariate Archimedean copulae

Table 4: Multivariate archimedean models in COPPY module.

Name

ϕ(t)

Constraints

Figure

Clayton

1
θ (t−θ − 1)

θ ∈ [0, ∞) \ {0}

AMH

log( 1−θ(1−t)

t

)

θ ∈ [−1, 1)

Frank

−log( e−θt−1
e−θ−1 )

θ ∈ R \ {0}

Joe

−log(1 − (1 − t)θ)

θ ∈ [1, ∞)

θ = 5

θ = 0.5

θ = 8

θ = 2

23

u00.00.20.40.60.81.0u10.00.20.40.60.81.0u20.00.20.40.60.81.0u00.00.20.40.60.81.0u10.00.20.40.60.81.0u20.00.20.40.60.81.0u00.00.20.40.60.81.0u10.00.20.40.60.81.0u20.00.20.40.60.81.0u00.00.20.40.60.81.0u10.00.20.40.60.81.0u20.00.20.40.60.81.0D Multivariate extreme models

Before giving the main details, we introduce some notations. Let B be the set of all nonempty
subsets of {1, . . . , d} and B1 = {b ∈ B, |b| = 1}, where |b| denotes the number of elements in thet
set b. We note by B(j) = {b ∈ B, j ∈ b}. For d = 3, the Pickands is expressed as

A(w) =α1w1 + ψ1w2 + φ1w3 +

(cid:16)

+

(ψ3w2)θ3 + (φ3w3)θ3

+

(α4w1)θ4 + (ψ4w2)θ4 + (φ4w3)θ4

(cid:17)1/θ4

,

(cid:16)

(α2w1)θ1 + (ψ2w2)θ1
(cid:17)1/θ3

(cid:16)

(cid:17)1/θ1

(cid:16)

+

(α3w2)θ2 + (φ2w3)θ2

(cid:17)1/θ2

where α = (α1, . . . , α4), ψ = (ψ1, . . . , ψ4), φ = (φ1, . . . , φ4) are all elements of ∆3. We take
α = (0.4, 0.3, 0.1, 0.2), ψ = (0.1, 0.2, 0.4, 0.3), φ = (0.6, 0.1, 0.1, 0.2) and θ = (θ1, . . . , θ4) =
(0.6, 0.5, 0.8, 0.3) as the dependence parameter.

The Dirichlet model is a mixture of m Dirichlet densities, that is

h(w) =

m
(cid:88)

k=1

θk

Γ((cid:80)d
Πd

j=1 σkj)
j=1Γ(σkj)

j=1wσkj −1
Πd

j

,

with (cid:80)m
the space of symmetric strictly conditionnaly negative deﬁnite matrices that is

k=1 θk = 1, σkj > 0 for k ∈ {1, . . . , m} and j ∈ {1, . . . , d}. Let D ∈ [0, ∞)(d−1)×(d−1) denotes

Dk =

(cid:110)

Γ ∈ [0, ∞)k×k : a(cid:62)Γa < 0 for all a ∈ Rk \ {0} with

d−1
(cid:88)

j=1

aj = 0,

Γii = 0, Γij = Γji,

1 ≤ i, j ≤ k

(cid:111)
.

For any 2 ≤ k ≤ d consider m(cid:48) = (m1, . . . , mk) with 1 ≤ m1 < · · · < mk ≤ d deﬁne

m = 2 (cid:0)Γmimk + Γmj mk − Γmimj
Σ(k)

(cid:1)

mimj (cid:54)=mk

∈ [0, ∞)(d−1)×(d−1).

Furthermore, note S(·|Σ(k)
vector 0 and covariance matrix Σ(k). We now deﬁne :

m ) denote the survival function of a normal random vector with mean

hkm(y) =

(cid:90) ∞

(cid:16)

S

yk

(yi − z + 2Γmimk )k−1

i=1 |Γkm

(cid:17)

e−zdz

for 2 ≤ k ≤ d. We denote by Σ(k) the summation over all k-vectors m = (m1, . . . , mk) with
1 ≤ m1 < · · · < mk ≤ d.

E Multivariate elliptical dependencies

Let X ∼ Ed(µ, Σ, ψ) be an elliptical distributed random vector with cumulative distribution F and
marginal F0, . . . , Fd−1. Then, the copula C of F is called an elliptical copula. We denote by φ the

24

Table 5: Multivariate extreme models in COPPY module.

Name

A(w)

Constraints

Figure

Logistic

(cid:18)

(cid:80)d

j=1 w

(cid:19)θ

1
θ
j

θ ∈]0, 1]

θ = 0.5

Asy. Log. (cid:80)

b∈B((cid:80)

j∈b(ψj,bwj)

1

θb )θb

(cid:80)

θb ∈]0, 1] ∀b ∈ B \ B1,
ψj,b ∈ [0, 1] ∀b ∈ B ∀j ∈ b,

ψj,b = 1, j ∈ [[d − 1]],

b∈B(j)
θb = 1 ∀b ∈ B \ B1 =⇒
ψj,b = 0 ∀j ∈ b.

Dirichlet

Not speciﬁed

(cid:80)m

k=1 θk = 1,
σkj > 0, k ∈ {1, . . . , m},
j ∈ {1, . . . , d}

θ = (1/3, 1/3, 1/3)





2
1
1





0
3
3

1
2
1





1
1
2

3
0
3





3
3
0

H¨usler Reiss

(cid:80)d

k=1(−1)k+1×
Σ(k)hkm(um1 , . . . , umk )

Γ ∈ Dd

Σ =

Σ =

25

u00.00.20.40.60.81.0u10.00.20.40.60.81.0u20.00.20.40.60.81.0u00.00.20.40.60.81.0u10.00.20.40.60.81.0u20.00.20.40.60.81.0u00.00.20.40.60.81.0u10.00.20.40.60.81.0u20.00.20.40.60.81.0u00.00.20.40.60.81.0u10.00.20.40.60.81.0u20.00.20.40.60.81.0standard normal distribution function and φΣ the joint distribution function of X ∼ Nd(0, Σ), where
0 is the d-dimensional vector composed out of 0. In the same way, we note tθ the distribution function
of a standard univariate distribution t distribution and by tθ,Σ the joint distribution function of the
vector X ∼ td(θ, 0, Σ). A d squared matrix Σ is said to be positively semi deﬁnite if for all u ∈ Rd
we have :

u(cid:62)Σu ≥ 0

Table 6: Multivariate elliptical models in COPPY module.

Name

C

Constraints

Figure

Gaussian φΣ(φ←(u0), . . . , φ←(ud−1))

Σ PSD

ρ = 0.71

ρ = 0.71
θ = 4

Student

tθ,Σ(t←

θ (u0), . . . , t←

θ (ud−1))

θ > 0, Σ PSD

26

u00.00.20.40.60.81.0u10.00.20.40.60.81.0u20.00.20.40.60.81.0u00.00.20.40.60.81.0u10.00.20.40.60.81.0u20.00.20.40.60.81.0