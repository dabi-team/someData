Conceptual Modeling of the Whole–Part Relationship 
Sabah Al-Fedaghi* 
Computer Engineering Department 
Kuwait University 
Kuwait 
salfedaghi@yahoo.com, sabah.alfedaghi@ku.edu.kw 

P a g e  | 1 

issue, 

for  UML  modeling.  From 

Abstract  -  Conceptual  models  rely  on  structural  information 
to  describe  relationships  among  UML  classes;  among  these,  the 
whole–part  (WP)  relationship  plays  a  fundamental  role.  This 
paper  explores  and  analyzes  the  WP  semantics  at  large  with  a 
focus  on  its  software  engineering  use.  The  WP  relationship  has 
often  been  treated  as  a  first-class  modeling  construct  in  object-
oriented  analysis,  a  subject  of  keen  interest  and  it  is  considered 
important 
the  scientific  and 
philosophical  aspects,  a  theory  of  parts  forming  a  whole  is  a 
loaded  with  controversies  that  are  widely 
complex 
discussed.  This  paper  aims  to  offer  a  semantic  assembly  model 
that  is  useful  to  describe  WP  relationships  in  conceptual 
modeling.  We  contribute  to  the  WP  research  by  conducting  an 
ontological  analysis  using  UML  samples  that  exemplify  the  WP 
construct. The method of investigation is based on a model called 
a  thinging  machine  (TM)  to  explore  the  WP  semantics  through 
applying TM to numerous existing UML models. The TM model 
uses  the  so-called  thimacs  (things/machines)  to  form  building 
blocks for describing the domain at a three levels of description: 
static,  events,  and  behavioral  models.  This  approach  contrasts 
the  UML  method,  which  is  infected  by  a  multiplicity  problem 
concerning  the  integrated  view  of  structure  and  behavior  and 
how to associate diagrams with one another. This investigation’s 
results point to a promising contribution to the understanding of 
the notion of WP relationship in UML. 

Index  Terms  –  whole–part 

relationship,  aggregation, 

composition, conceptual model, UML, thinging machine 

I. 

INTRODUCTION 

a 

has 

conceptual 

the 
Conceptual  models  are  artifacts  produced  with 
deliberate intention of describing a conceptualized reality that 
incorporates  an  idealistic  view  of  an  existing  domain  in  the 
world  with  an  objective  account  [1].  A  conceptual  model 
always 
human 
conceptualization and perception mediates the reference to the 
world  [2].  Conceptual  modeling  pertains  to  identifying, 
the  essential  concepts  and 
analyzing  and  describing 
constraints  of  a  domain  with  the  help  of  (diagrammatic) 
modeling 
in  understanding  and 
communicating  among  the  stakeholders  and  serves  as  a  base 
for consequent phases of a system‘s development [4]. 

language  [3].  It  helps 

semantics 

so 

According  to  Catossi  et  al.  [5],  the  difficulty  of  building 
liable  conceptual  models  occurs  due  to  the  lack  of  domain 
knowledge. There are some ontological analysis techniques 

* Retired June 2021, seconded fall semester 2021/2022 

that can help in such a task. However, they are not easy to use 
because  they  involve  many  philosophical  concepts,  which 
makes  them  complex  to  the  common  modeler.  A  conceptual 
model that does not represent the domain adequately can lead 
to problems  with  respect  to  systems  project,  implementation, 
operation  and  maintenance  [5].  UML  on  its  own  cannot 
guarantee  a  model  that  is  free  of  conceptual  mistakes. 
Attempts  to  improve  these  situation  techniques  based  on 
ontological  analysis  have  been  explored  to  help  modelers 
validate their UML class diagrams more easily [5]. 

Structural  information  emphasizes  the  system‘s  static 
structure using objects, attributes and relationships. Structural 
information  usually  has  the  semantics  of  classification, 
generalization  and  aggregation 
structural 
relationships  among  classes;  among  these  relationships,  a 
fundamental  role  is  played  by  the  so-called  whole–part 
relation.  In  this  paper,  structure  is  applied  to  an  ontological 
unit  that  has  a  dual  composition  of  a  thing  and  a  machine. 
Hence,  structure  refers  to  dual  structural  part/whole  aspects, 
one for a thing and one for a machine.  

to  describe 

A. 

 About the Whole–part Relationship 

This  paper  focuses  on  the  semantics  of  the  whole–part 
notion  and  extends  analyses  of  the  semantics  of  UML‘s 
aggregation  and  composition  to  behavior.  We  address  the 
development  of  semantics  to  the  whole–part  notion  by 
specifying  a  diagrammatical-based  representation  called 
thinging machines (TM). In UML, the ‗whole part‘ (the whole 
may  be  called  assembly)  relationship  is  viewed  regarding 
aggregations,  which  are  special  associations.  In  TM,  the 
‗whole  part‘  is  expressed  as  a  relationship  between  the  so-
called thimac (thing/machine) and subthimacs. 

The concept of whole–part structures has been a research 
issue  for  ontology,  cognitive  science  and  linguistics.  Such  a 
theory (under the name: mereology) concerns the investigation 
of  the  ontology  of  whole–part  relationships,  or  relationships 
of part to whole and the relations of the part with another part 
within a whole [5]. According to Guizzardi [6], parthood is a 
relation  of  fundamental  importance  in  conceptual  modeling 
because it is present as a modeling primitive in practically all 
major  conceptual  modeling  languages.  Motivated  by  this, 
numerous  attempts  have  been  made  to  employ  theories  of 
different  sorts  to  provide  a  foundation  for  whole-part 
relationships. 

 
 
 
  
 
 
 
 
The  whole–part  relationship  has  often  been  treated  as  a 
first-class  modeling  construct 
(OO) 
analysis,  design  methods  and  OO  modeling  languages  [7]. 
According to Barbier et al. [8], the whole–part relationship in 
OO  modeling  has  been  a  subject  of  keen  interest  and  is 
considered important for OO modeling and in UML.  

in  object-oriented 

The  thing  embodies  a  fixed  background  ―space‖  while  the 
machine represents the roots  of possible  dynamism. The  TM 
model  is  constituted  by  static  thimacs,  as  well  as  by  higher-
level thimacs when time is injected in the static thimacs. 

The TM machine has five actions: create, process, release, 
transfer and receive (Fig. 4). The structure of the thimac as a 
thing and a machine is further illustrated in Fig. 5. 

P a g e  | 2 

B.  Problem  

its 

A theory of parts forming a whole is a complex issue and 
loaded  with  many  controversies; 
scientific  and 
philosophical  aspects  are  widely  discussed.  There  is  much 
controversy over some properties involved  in  the  whole–part 
relationships because they result in being inconsistent with the 
conceptual theories applied in the real world. Problems occur 
due  to  ambiguities  about  the  concept  of  parts  in  addition  to 
cases in which objects of a completely different nature could 
be  considered  as  whole–part  relationships  [5].  According  to 
Barbier  et  a.  [7],  ―This  concept  remains  somewhat  vague  in 
OO due to, in particular, the wide range of terms used in the 
(e.g.,  Aggregation,  Composition,  Assembly, 
literature 
Containment,  Membership).‖  The  way 
the  whole–part 
relationship is formalized is unsatisfactory [8]. In OO systems, 
the representation of whole–part relationship  usually requires 
a  particular  semantics,  but  rarely  do  current  modeling 
formalisms  and  methodologies  give  it  a  specific  ―first-class" 
dignity [9]. 

T (Thing) 

M (Machine) 

Fig. 1 A thimac has a dual mode of being a thing and a machine 

∆ 
(Thi
mac
) 
Flip 

Fig. 2 Illustration of the duality of a thimac 

  In this article, we research the whole–part relationship by 
conducting  an  ontological  analysis 
its 
representations  in  UML.  Currently,  there  has  been  a  rising 
interest 
real-world 
semantics  for  conceptual  modeling  and  methodological 
guidelines for improving conceptual modeling.  

in  applying  ontologies 

to  develop 

investigate 

to 

C.  About This Paper 

Fig. 3 Thimac 

In  Section  2,  we  briefly  review  the  basics  of  thinging 
machines  and  include  some  new  discussion  about  TM 
modeling. There are many papers about such a topic; we refer 
to  one  old  and  one  recent  samples  [10-11].  In  Section  3,  we 
introduce an example that illustrates the TM modeling and its 
application  in  UML  The  remaining  sections  of  the  paper 
address several issues including the association relationship in 
UML versus TM, object thimacs, the whole–part relationship, 
priority of the whole versus part and material objects. 

II.  THINGING MACHINE MODEL 

The  TM  modeling  is  based  on  a  category  called  thimacs 
(things/machines),  which  is  denoted  by  ∆.  The  ∆  has  a  dual 
mode of being: the machine side, denoted as M, and the thing 
side,  denoted  by  T.  Thus,  ∆  =  (M.  T.)  –  see  Fig.  1.  In  TM 
modeling, thingness and machinery cannot be separated, but it 
is  often  convenient  to  focus  on  one  or  the  other  aspect.  A 
thimac is similar to a double-sided coin (see Fig. 2). One side 
of  the  coin  exhibits  the  characteristics  the  thing  assumes, 
whereas  on  the  other  side,  potential  actions  emerge  as  a 
machine. A thing is subjected  to  doing,  and  a  machine  does, 
as shown in Fig. 3.  

Create 

Release 

 Output 

Transfer 

Input 

Process 

Accept 

Arrive 

Receive 

Fig. 4. Thinging machine 

M (Machine) 

Manifest 

Create 

Release 

Output 

Transfer 

Input 

Change 

Process 

Accept 

Rece
ive 

Arrive 

T (Thing) 

∆ (Thimac) 

Fig. 5. Illustration of the thimac as a thing and a machine. 

 
  
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
A.  Example of Thimacs 

To clarify the notion of a thimac, we construct the thimac 
that corresponds to tuples. According to Waguespack [12], the 
most concrete concept in the relational paradigm is the tuple, 
which  corresponds  one-one  with  a  single  concept  of  reality. 
Fig.  6  shows  a  tuple  as  a  thimac.  In  this  tuple  (circle  1),  the 
attribute  values-things  (2  –  we  use  UML  terminology  for 
illustrative  purposes)  flow  to  the  tuple  machine  (3),  where 
they  are  received  (4)  and  processed  (5).  Such  a  processing 
(e.g.,  concatenation  of  values)  triggers  creation  (6),  which  is 
manifested  (7)  as  a  whole  tuple  thing  (8)  that  represents,  in 
Waguespack‘s [12] words, ―a single concept of reality.‖ Now, 
the tuple can be released, transferred, received and processed 
(tuple‘s machine) as a thing.  
The  assemblages  of 

from  a 
juxtaposition of subthimacs that are bonded into a structure at 
a higher level at which they become parts. Thimacs comprise 
parts,  which  themselves  are  thimacs  that  comprise  parts,  and 
so  on  (see  Fig.  7).  Thimacs  cannot  be  reduced  to  their  parts 
because they (wholes) have their own machines. 

thimacs  are 

formed 

B.  The Machine 

the 

The 

term  machine 

thimac‘s  universal 
reflects 
implication that everything is a machine (as a thimac), even a 
poem.  The American poet  William Carlos Williams  wrote  in 
1944, "A poem is a small (or large) machine made of words"; 
and  ―When  we  say  ‗This  is  where  the  poem  really  starts  to 
move,‘ ‗Your poem picks up steam after these lines,‘ or ‗What 
is  this  poem  doing?‘  we‘re  using  the  ‗poem  as  machine‘ 
metaphor‖ (see a sample TM modeling of poems in [13]). The 
universal  sense  of  machinery  originated  in  the  TM  actions 
indicating  that  everything  that  creates,  changes  (processes) 
and moves (release-transfer-receive) is a machine. TM actions 
in Fig. 4 can be described as follows: 
Arrive: A thing moves to a machine. 
Accept: A  thing  enters  the  machine.  For  simplification,  we 
assume that arriving things are accepted; therefore, we can 
combine arrive and accept stages into the receive stage. 
Release: A thing is ready for transfer outside the machine. 
Process:  A  thing  is  changed,  handled  and  examined,  but  no 

new thing results. 

Create: A 

into 

new 

thing 

being‖ 

―comes 

(is 
found/manifested)  in  the  machine  and  is  realized  from  the 
moment  it  arises  (emergence)  in  a  thimac.      Such  a 
description of ―being‖ echoes Quine‘s slogan, ―To be  is to 
be the value of a variable.‖ Existence in such a model refers 
to  an  internal  existence,  which  is  based  on  the  relevant 
framework‘s  rules.  This  thought  is  grounded  in  Carnap‘s 
philosophy that, ―points to the existence of multiple types of 
logical  frameworks  we  might  construct,  investigate,  and 
apply  for  different  purposes  […]  in  analogy  with  the 
existence of different types of geometry‖ [14]. Note that for 
simplicity‘s  sake,  we  omit  create  in  some  diagrams, 
assuming  the  box  representing  the  thimac  implies  its 
existence (in the TM model). 

P a g e  | 3 

2 

Attribute 

values … 

Tuple (Thing) 
(Thing) 

8 

3 

Tuple (Machine) 

Manifest 
7 

Create 
6 

1 
Tuple (Thimac) 
(Thimac) 

s
s
e
c
o
r
P

e
v
i
e
c
e
R

r
e
f
s
n
a
r
T

5 

4 

Fig. 6. The thimac tuple has a dual mode of being a thing and a 
machine. 

Whole 

Parts 

Part of part 

Fig. 7 A thimac and subthimacs 

Additionally,  the  TM  model  includes  the  triggering 
mechanism  (denoted  by  a  dashed  arrow  in  this  article‘s 
figures),  which  initiates  a  (non-sequential)  flow  from  one 
machine to another. Multiple machines can interact with each 
other  through  the  movement  of  things  or  through  triggering. 
Triggering  is  a  transformation  from  the  movement  of  one 
thing to the movement of a different thing. The TM space is a 
structure  of  thimacs  that  forms  regions  of  events  (to  be 
defined later). 

C.  Thimacs and Objects 

that  represents 

thimac.  The  basic  structure 

The TM model is the whole system of thimacs, which is a 
the 
grand 
thimac/subthimacs 
the  whole–part 
in  TM  now  reflects 
relationship  instead  of  nested  objects (objects that  are  inside 
the 
another object). Accordingly,  we  have 
subthimacs‘  roles  as  parts  of  the  whole  thimac.  We  can 
identify  two  extreme  models.  As  shown  in  Fig.  8,  the 
subthimac  can  have  independent  interactions  with  other 
thimacs  (the  whole,  other  subthimacs  and  outside  thimacs). 
The other extreme case is when the whole thimac controls the 
interactions  of  its  subthimacs.  This  thimac  will  be  called  an 
object  thimac  (othimac).  Many  heterogeneous  thimacs  exist 
between  these  two  extreme  cases.  In  general,  othimacs  can 
have object subthimacs.  

to  examine 

… 

Transfer: A thing is input into or output from a machine. 

Fig. 8 Subthimacs interact with each other and the outside (left) 
and subthimacs interact only through their thimac (right) 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
D.    UML vs. TM modeling 

Because most of our treatment of the whole–part modeling 
involves  examples  from  UML,  we  discuss  some  modeling 
aspects in TM and UML. In UML, different models describe 
the static level (class diagram), instance level (object/instance 
diagram) and behavioral level (e.g., state diagram). Each level 
utilizes different types of notation. In UML,  one  approach to 
the design for a particular problem precedes as follows. 

You  would  start  by  determining  a  complete  list  of  classes, 
then  determine  all  the  associations,  then  fill  in  all  the 
attributes,  and  so  on.  To  discover  whether  an  association 
should exist,  ask yourself if one  class  possesses control,  is 
connected  to,  is  related  to,  is  a  part  of,  has  as  parts,  is  a 
member  of  or  has  as  members  some  other  class  in  your 
model.‖ [15] 

In TM modeling, the design for a particular problem starts 
with ―picking up‖ a thing (thimac) and follow its flow through 
other thimacs until it triggers another thing that leads to a new 
stream of flow, and so on. For example, the flow of an order 
leads  to  the  flow  of  an  invoice,  which  leads  to  a  flow  of 
payment, which leads to the flow of  product  inventory.  The 
levels  of 
three 
complete  modeling  process 
description: static, events and behavioral models.  

involves 

A  static  description  provides  complete  descriptions  of 
machines  and  inter-machines  in  the  modeled  system.  The 
description  constructs  the  whole  model  as  a  machine.  To 
inject dynamics, we divide the static into regions.  Identifying 
these  regions  produces  the  dynamic  model.  To  realize 
changes, we inject time into these regions to create the events 
model  (see  Fig.  9).  Finally,  the  events  gather  into  a 
chronological order to form the behavioral model. 

III.  TM MODELING: CASE STUDY 

Catossi et al. [5] give a case study that includes the classes 
customer,  order  and  item  (numbers  1–3,  respectively)  as 
shown in Fig. 11.  The customer class is viewed as the whole 
and  order  class  as  the  part.  One  must  identify  if  there  is  a 
generic dependence between those classes, that is, if the whole 
must have a part that can be substituted over time. According 
to Catossi et al. [5], the answer  is ―no‖ because if it is taken 
into account that the client register must stay stored, then the 
customer continues being a client without doing an order. 

A.  Static Model 

Fig.  11  shows  the  corresponding  static  TM  model.  Here, 
we introduce sample functions that  include the modules  A to 
F. Modules A, B and D are developed just to familiarize with 
the  TM  model.  Other  modules  C,  E  and  F  in  the  figure 
demonstrate some whole–part links between thimacs (classes). 
The functional and static descriptions of these modules are as 
follows.  
A: Constructing a record of a new customer and adding it to 
the customers file. 
B: Retrieving a customer record. 

P a g e  | 4 

T
r
a
n
s
f
e
r

R
e
c
e
i
v
e

P
r
o
c
e
s
s

e
s
a
e
l
e
R

r
e
f
s
n
a
r
T

Fig. 9 Static and time thimacs generate dynamics. 

Fig. 10 Example from Catossi et al.‘s [5] (partial)   

C: Retrieving orders from a certain customer. 
D: Retrieving a certain order. 
E: Deleting a certain shopping cart item and its order.  
F: Adding an order to a certain item. 
Note that C links customer and order classes and E and F link 
item and order classes. 

Module  A:  As  shown  in  Fig.  11,  this  module  involves 
receiving 
the  values  of  attributes  of  a  customer  (4), 
constructing the  customer’s record (5) and then  inserting  the 
record  in  the  customers  file  (6).  Note  that  for  the  sake  of 
brevity, we do not detail how the record is inserted in the file 
and  describe  the  procedure  as  a  mere  process  of  the  record 
and file. 

Module  B:    This  module  involves  outputting  a  certain 
customer’s  record  when  given  a  customer  ID  (7),  which  is 
assumed to be one the record‘s attributes. Again, we represent 
extracting the record from the customer as processing (8) the 
customer  number  and  the  file  (9).  It  is  possible  to  describe 
such a process in  a further elaborate  manner (e.g., sequential 
search loop over all records in the file). 

Module  C:    This  module  demonstrates  the  link  between 
the  two  classes  (to  use  UML  terminology),  customer  and 
order,  and  details  extracting  data  from  a  file.  The  function 
here  is  retrieving  a  customer  record  from  the  customers  file 
then  finding  all  orders  belonging  to  that  customer  (e.g.,  for 
daily report of customers vs. their orders). We  will not show 
the loop for all customers.  

Accordingly,  processing  the  customers  file  extracts  the 
customer record (10). Note that this extraction is modeled in 
terms  of  transfer-receive  because  the  customer  record  is 
already  created  inside  the  customers  file.  Additionally,  the 
customer ID is extracted from the customer record (11).  

On the other side, the orders file (12) is processed (13) to 
extract  an  order  record  then  a  customer  ID  (14).  This 
customer  ID  is  compared  (15)  with  the  customer  ID 
previously extracted from a  customer record (11). If  the  two 
order  IDs  are  the  same,  the  order  record  is  added  to  the 
customer orders file or the file of order of a specific customer 
(16).  

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
Retrieve a certain customer given the Customer 
ID 

7 

Transfer 

Receive 

B 

Process 

A single customer 

8 

P a g e  | 5 

Attributes values to construct a new customer 

4 

Transfer 

Receive 

Process 

5 

Create 

A 

Process 

6 

Customers file  

Transfer 

Release 

9 

C 

Orders of a specific customer 

Customer 
1 

16 

Transfer 

Release 

Process: If same ID 
      Otherwise 

15 

13 

P
r
o
c
e
s
s

  A single Order 

Order (Includes customer ID) 

2 

r
e
f
s
n
a
r
T

e
s
a
e
l
e
R

s
s
e
c
o
r
P

D 

e
v
i
e
c
e
R

r
e
f
s
n
a
r
T

Create 

Process 

12 
Orders 
file  

Request to 
retrieve 
an order 

E 

25 

Process: delete item from file 

Receive 

Transfer 

Process 

Found 

Process 

Else next 

24 

A single item 
Receive 

Transfer 

Other 
order 
data 

10 

Process 

Customer 
Record 

r
e
f
s
n
a
r
T

Customer ID 

r
e
f
s
n
a
r
T

e
s
a
e
l
e
R

e
v
i
e
c
e
R

r
e
f
s
n
a
r
T

Transfer 

Receive 

11 

Process 

Transfer 

Release 
Receive 

14 

Customer ID 

Transfer 

r
e
f
s
n
a
r
T

e
v
i
e
c
e
R

Process 

Process 

31 
F 

Order 
record 

30 

Create 

29 

Process 

Receive 
Transfer 

28 

Transfer 

Release 

Process 

26 

Create 
A single 
item 

27 

 Shopping Cart 
3 
Item (Includes 
customer ID) 
23 Transfer 

22 

Release 

Process: delete item from file 

 Items file  

18 

Process 

A single 
item 

Transfer 
Receive 

19 

20 

Not the same item 

Process 

Found 

21 

17 

Item to be deleted 

Fig. 11 The static model that corresponds to Catossi et al.‘s [5] example. 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
Here, we assume a sequential search processing of  all orders 
in the  orders file of  customers.  The  loop  of  this  process  will 
be specified in the events model.  

Module D: This module is similar to Module A applied to 

retrieving an order; hence, it will not be discussed.  

Module E:  This module involves deleting an item, which 
causes deleting an order but deleting an order will not affect a 
customer.  First,  a  request  to  delete  an  item  is  received  (17). 
Just  as  in  Module  C,  we  assume  a  sequential  search  for  the 
deleted item in the items file. Thus, the items file is processed 
(18) to extract an item (19). For the sake of simplification, we 
do not differentiate here between the item record and the item 
ID as we did in C. 
Accordingly,  if  the  item  is  not  the  item  to  be  deleted  (20), 
another  item  is  retrieved  from  the  file.  Otherwise,  if  it  is  the 
item to be deleted (21), then: 
-  Delete the item from the items file (22). This  deletion  is 
modeled as downloading the file then uploading it again. 
It  is  possible  to  elaborate  such  a  process  by  creating  a 
new file that includes all read records except the deleted 
one. 
Send the deleted item record (which is the item ID) to the 
order class to delete the corresponding order (23). 
In the order class, there is another sequential search loop for 
the corresponding order record (24). The order record is 
deleted when it is found (25). 

- 

Module F: This module demonstrates the link between the 
item  class  and  the  order  class,  assuming  there  is  a  one–one 
relationship between them. Hence, from the items file (26), an 
item record is retrieved (27) and sent to order (28). The item 
and the order data are processed (29) to create an order record 
(30) that is added to the ordered file (31). 

B.  Events Model 

To model the  behavior of the static model in Fig.  11,  we 
need  to  identify  different  events.  A  TM  event  is  represented 
by  a  subdiagram  of  Fig.  11  (the  event‘s  region)  and  a  time 
subthimac.  For  example,  Fig.  12  shows  the  event  Inputting 
attribute values to construct a  new  customer  (in  Module  A). 
For the sake of simplification, the event will be represented by 
its region. To save space, we will a develop events model for 
only two modules C and E. 

C.  Deleting an Item Events (Module E) 

As  shown  in  the  events  model  Fig.  13,  deleting  an  item 

involves the following events, where vi denotes event i. 

v1: A request arrives to the item class to delete a certain item 
given an item ID. 
v2: The items file is processed to retrieve the item record. 
v3: The item record is not the required one. 
v4: The item record is the required one. 
v5: The item record is deleted from the file. 

P a g e  | 6 

Attribute values to construct a new customer 

Region 

A 

Transfer 

Receive 

Transfer 

Receive 

Process 

Release 

Transfer 

Time 

Event 

Create 

Process: takes its course 

Fig. 12 The event Inputting attribute values to construct a 
new customer 

v6:    The  item  record  (which  includes  the  items  order  ID)  is 
sent to the order class. 
v7: The orders file is processed to retrieve an order record. 
v8: An order record is retrieved from the file. 
v9: The retrieved record is not the record to be deleted. 
V10: The retrieved record is the record to be deleted; hence, it 
is deleted from the file. 

Fig.  14  shows  the  behavioral  model  of  Deleting  an  item 
events  (Module  E)  regarding  the  time  order  of  events.  Note 
that we assume a sequential search of the orders file. 

D.  Finding all orders of a given customer 

As shown in the events model Fig. 13, retrieving all orders 

of a given customer involves the following events. 

v11: A customer record is retrieved from the customers file. 

v12:  The customer ID is extract from the record. 

v13: The orders file is processed to retrieve an order record. 

v14: The customer ID is extracted from the order record. 

v15: The two customer IDs are compared. 

v16: The two customer IDs are not the same. 

v17:  The  two  customer  IDs  are  the  same;  hence,  the  order 
record is added to the file of the customer’s orders. 

Fig. 15 shows the behavioral model for Finding all orders 

of a given customer regarding the time order of events.  

Fig. 16 shows the basic TM relationships discussed in this 
example  using  UML-style  notation.  In  such  a  figure,  we 
abstract the TM diagrams 11 (static) and 13 (behavior).  

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
Retrieve a certain customer given Customer ID 

Attribute values to construct a new customer 

P a g e  | 7 

Transfer 

Receive 

Process 

A single customer 

Transfer 

Release 

Customer 

Transfer 
Receive 

Process 

Process 

Create 

Customers file  

Orders of a specific customer 

Transfer 

Release 

v17 

Process: If same ID      Otherwise 

v16  v15 

r
e
f
s
n
a
r
T

e
v
i
e
c
e
R

e
f
s
n
a
r
T

r

e
s
a
e
l
e
R

v
i
e
c
e
R

e

e
f
s
n
a
r
T

 Customer ID 

Process 

v11 

Customer 
Record 

Transfer 
Receive 

r

Process 

v12 

Order (Includes customer ID) 

r
e
f
s
n
a
r
T

e
s
a
e
l
e
R

s
s
e
c
o
r
P

v
i
e
c
e
R

e

r
e
f
s
n
a
r
T

P
r
o
c
e
s
s

Create 

Process 

Orders 
file  

v13  

Transfer 
Release 
Receive 
Transfer 

Order 
record 
v
i
e
c
e
R

e
f
s
n
a
r
T

r

Process 

e

Customer ID 

v14 

Process 

v7 

Process: delete item from file 

v10 

Found 

Receive 
Transfer 

v9 

Else next 

Process 

A record 

Receive 

Transfer 

v8 

v6 

 Shopping Cart 
Item (Includes customer 
ID) 
v5 

Transfer 

Release 

Process: delete item from file 

 Items file  

Process 

A single 
record 

Transfer 
Receive 

v2 

Found 

v4 

Process 

Not the same item 

v3 

v1 

Item ID to be deleted 

Fig. 13 The events model 

v3 

v6 

v7 

v8 

V10 

V10 

V11 

V12 

Process 

Order 
record 

Create 

Other 
order 
data 

Process 

Receive 
Transfer 

Process 

Transfer 

Release 

Create 
A single 
item 

v1 

v2 

v4 

v5 

v9 

Fig. 14 The behavioural model of deleting an item and its order 

V13 

V14 

V15 

V17 

V16 

Fig. 15 The behavioural model of retrieving a certain customer’s 
order. 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
Customer 

1 

1 
Order 

* 

1 

Item 

E: Delete 

F: Add-order (item)  

D: Retrieve (order)  

A: Add (customer)  
B: Retrieve (customer)  
C: Orders-of (customer)  

P a g e  | 8 

As can be seen in this example, joining together different 
regulated  (explicitly  controlled)  flows  expresses  the  UML 
relationship  notion  in  TM.  There  is  no  need  for  adding  the 
relational concept in the model. We speculate that the process 
of  establishing  a  relation  goes  through  the  three  levels  of 
static, events and behavioral subprocesses that is illustrated in 
Fig. 22. 

Fig. 16 UML-style basic relationships  

Fig. 17 Sample UML association (From [15]) 

IV. ASSOCIATION: UML VS. TM  

the  relationship.  The  basic  way 

In  UML,  relationships  clarify  the  way  that  elements 
interact or depend upon each other. For example, associations 
link  model  elements  and  indicate  the  nature  and  rules  that 
govern 
to  represent 
association is with a line between the elements. Aggregation is 
a type of association relationship that specifies a collection of 
other  elements  form  an  element.  A  composition  association 
relationship represents a whole–part relationship and is a form 
of aggregation.  

Fig.  17  provides  a  UML  example  of  association.  It 
indicates  that  there  must  be  exactly  one  instance  linked  to 
each object (instance) at the other end of the association,  that 
is,  there  can  only  be  one  company  associated  with  each 
employee  [15].  Such  a  UML  representation  also  involves 
include  other 
object  and  behavior  diagrams  and  may 
diagrams.  The  example  (Fig.  17)  demonstrates  merely  the 
static  description  because  the  behavior  specification  uses 
completely  different  notation.  This  approach 
raises  a 
multiplicity  problem  concerning  the  integrated  view  of 
structure and behavior and how UML diagrams are associated 
with one another. 

In TM, the different levels of modeling are built upon each 
other.  Fig.  18  shows  the  TM  static  model  that  includes 
employee and company and the movement of employee to the 
company.  The  flow  (red  arrow)  of  employee  to  company 
represents 
in  TM,  as 
everything  else,  is  a  thimac.  Fig.  19  shows  the  TM  events 
diagram  that  includes  the  instance  employee,  the  instance 
company and the flow event from employee to company. 

the  relationship.  A  relationship 

These events can be described as follows: 
-  There is a present (existing)  employee Ei 
-  There is a present (existing)  company Cj 
-  Ei has been assigned to work in Cj   

that 

We  assume 
there  are  multiple  employees  and  n 
companies. Additionally, this event of Ei works for Cj has the 
attribute  (to  use  a  UML  term)  Uniqueness  that  indicates  the 
event  happens  once.  A  TM  event  is  also  a  thimac,  but  it 
embeds  a  time  subthimac.  Thus,  when  an  employee  Ei  is 
assigned to a company Cj, he/she would not be assigned to any 
other company. Fig. 20 shows the behavior of this employee–
company  situation.  Fig.  21  shows  a  possible 
tabular 
implementation.  As  an  example,  in  this  representation,  the 
event  uniqueness  constraint  is  realized  by  searching  in  the 
table that E1 has not already been assigned to a company. 

Create 
Release 

Employee 

Transfer 

Create 
Transfer  Receive 

Company 

Process: work 

Fig. 18 The static model  

Event: Instance Ei exists 
Employee: Ei, i=1,* 

Event: Instance C exists 

Create 

Create 

Company: Cj, j=1, n 

Release  Transfer 

Transfer  Receive 

Process: work 

Event: Ei works for Cj 

Uniqueness for Ei 

Create 

Fig. 19 The events (instances) model 

Ei 
 i=1, * 

Cj 
 j=1, n 

 Work at time k  

Fig. 20 The behavioral model 

Employee 
instance  
E1 
E2 
E3 
E4 
E1 

Company 
entity 
C1 
C1  
C1  
C2  
C2  

Event 
occurrence 
Work1 
Work2 
Work3 
Work4 
Work5  

Not executed because E1 
already works in C1 

Fig. 21 Sample database  

1.  Static recognition of 
thimacs and subthimacs 

Employee 
  Create 
Release  Transfer 

Create 
Transfer  Receive 

Company 

Process: work 

2.  Recognition of 
different events 

Event: Instance Ei exists 
Employee: Ei, i=1,* 

Event: Instance C exists 

Create 

Create 

Company: Cj, j=1, n 

Release  Transfe

Transfer  Receive 

Process: work 

r 

Event: Ei works for Cj 

Uniqueness for Ei 
Create 

3. 
Identifying the 
sequence of events 

Ei 
 i=1, * 

Cj 
 j=1, n 

 Work at time k  

Fig. 22 The three levels of static, events and behavioral 
subprocesses 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
V.  WHOLE–PART RELATIONSHIP AND OBJECT THIMACS 

In  this  section,  we  relate  the  whole–part  notion  to  the 
important distinction in the TM model between object thimacs 
(othimacs)  and  non-object  thimacs  (nthimacs).  Simply,  an 
othimac  controls  the  handling  (actions)  of  its  parts  when 
interacting  with  the  outside  of  the  thimac.  Note  that  all 
thimacs  (and  subthimacs)  have  the  same  structure  (TM 
machines). The structure is responsible for their behavior. The 
thimacs  are  similar  to  organisms  in  this  uniform  structural 
than  being  classical  machines  with 
composition  rather 
structures that vary from one type to the other. 

Example:  Fig.  23  shows  the  static  description  of  an 
othimac table. The static model represents the type table as in 
the  UML class; however, it has richer semantics than  a  class 
does.  The  static  model 
is  an  ontological  assembly 
representation  of  all  aspects  in  the  life  of  the  table  (its 
construction,  attributes,  movement,  etc.),  except  for  time 
dynamics  information.  It  is  a  union  of  all  regions  of  events 
(construction, destruction, movement, modifications, features, 
new  features,  etc.).  Then,  such  a  picture  of  all  regions  of 
events is abstracted to delete all aspects not of interest in the 
current model frameworks.  

P a g e  | 9 

In the current example of the table, we are interested in the 
composition of the table and the dimensions of its parts, color, 
its construction, and so on. However, we are not interested in 
where  the  nails  used  in  its  construction  are  made  and  other 
similar  information.  This  static  description  may  include 
contradictory  information,  such  as  its  original  color,  which 
now  has  been  changed.  If  we  want  to  extract  the  process  of 
constructing  the  table,  then  the  events  model  (Fig.  24) 
produces the behavior of such a process, as displayed in Fig. 
25. In Fig. 25, first the top surface and four legs are made, E1, 
E2–E5,  respectively.  Then,  the  legs  are  nailed  to  the  top 
surface (E6–E9) to form the table (E10). 

E1 

E2 

E3 

E4 

E5 

E6 

E7 

E8 

E9 

E10 

Fig. 25 The behavior model of constructing the table 

Transfer  Release 

Create 

Table 

 Materials 
Create 

  Color 
Create 

Nail 
Release 

Transfer 

Transfer 

Receive 

Leg 1 

  Length 
Create 

Create 

Create 

Top Surface 

  Release 

Transfer 

  Dimension 
Create 

  Release 

Transfer 

  Length 
Create 

Create 

Transfer 

Receive 

Leg 2 

  Length 
Create 

Create 

Transfer 

Receive 

Leg 3 

  Length 
Create 

Create 

Fig. 23 Static model of a table 

  Release 

Transfer 

Transfer 

Receive 

Leg 4 

Transfer  Release 

E10 

Table 

Create 

 Materials 
Create 

  Color 
Create 

Nail 
Release 

Transfer 

Transfer 

Receive 

Leg 1 

E6 

  Length 
Create 

Create 

E2 

Create 
E1 

Top Surface 

  Release 

Transfer 

  Dimension 
Create 

  Release 

Transfer 

  Release 

Transfer 

  Length 
Create 

Create 
E3 

Transfer 

Receive 

Leg 2 

E7 

  Length 
Create 

Create 

E4 

Transfer 

Receive 

Leg 3 

E8 

  Length 
Create 

Create 

E5 

Transfer 

Receive 

Leg 4 

E9 

Fig. 24 The events model of constructing the table. 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
Fig.  26 

illustrates 

the  othimac  whole 

idea  using 
Matryoshka  dolls‘  movement,  which  is  performed  only 
through  the  whole  (the  containing  doll).  Note  that  in  these 
dolls,  the  part  is  detached  from  the  whole;  however,  its 
movement  is  tangled  with  the  actions  of  the  whole.  To 
illustrate  this  phenomenon  in  TM  modeling,  consider  the 
following examples from Varzi [16].  

1.  The  handle  is  part  of  the  mug.  The  mug/handle  is 
the  handle  movement 
an  othimac  because 
(release/transfer)  is  tangled  with  the  movement  of 
the  mug  (see  the  TM  model  in  Fig.  27).  In  this 
case, the handle is an undetached component of the 
mug. 

2.  The  remote  control  is  part  of  the  stereo  system. 
The  whole  system  is  an  nthimac  because  the 
control can move freely (see Fig. 28). In this case, 
the  remote  is  a  free  component  of  the  system  that 
also includes the stereo. Moving the remote control 
is not tangled with moving the whole system or the 
stereo.  

3.  The left half is your part of the cake. (see Fig. 29) 
The cake is an othimac as in (1) above. We assume 
here  that  the  left  side  has  already  separated  from 
the original cake. 

In  the  TM  representation,  thimacs  signify  higher  logical 
types as in UML classes. Individuals (usually called ‗objects‘) 
are represented in TM as events. Additionally, the meaning of 
‗part‘  is  indicated  diagrammatically  by  a  box  inside  a  larger 
box in a similar manner to the diagrammatic representation of 
subsets in set theory. 

Note that cutting the cake produces two sides. This fact is 
implicit  in  the  statement,  The  left  half  is  your  part  of  the 
cake. The events model illustrates there are three events. Fig. 
30  shows  two  simultaneous  events  of  the  parts‘  appearance. 
Fig 31 shows the behavior of cutting the cake. 

P a g e  | 10 

Fig. 26 Matryoshka dolls’ movement is only through the whole. Image is 
from Wikipedia. 

Mug 

Create 

Handle 

Create 

Release  Transfer 

Fig. 27 The part moves wherever the whole moves 

System 

 Remote control 

Process 

Stereo 

Process 

Fig. 28 The part moves freely. Note that create is not shown under the 
assumption that the box indicates existence in the model. Release and 
transfer are not shown under the assumption that the direction of the 
arrow indicates the direction of the movement. 

Transfer 

Release 

Process: cut 

  Left side 

Cake 

Right side 

Fig. 29 The part is processed at the whole level to separate it from the 
whole. Note that the process triggers release and transfer because the left 
half is already created inside the cake. It is analogous to a bus delivering 
its passenger. 

Transfer 

Release 

Process: cut 

Release 

Transfer 

Event 
2 

Event 
  Left 
1 
side 

Cake 

Right 
side 

Event 
3 

VI. THE ISSUES RELATED TO THE WHOLE–PART 

Fig. 30 The events in producing The left half is your part of the cake. 

A.  Priority of the Whole vs. Part 

RELATIONSHIP 

in 

this  context.  Are 

Schaffer  [17]  considers  the  issue  of  priority  of  the  whole 
versus  the  part  using  a  circle  and  a  pair  of  its  semicircles. 
Several  questions  are  raised 
the 
semicircles dependent abstractions from their whole, or is the 
circle  a  derivative  construction  from  its  parts?  Schaffer  [17] 
continues,  instead  of  the  circle  and  its  semicircles,  consider 
the entire cosmos and the myriad particles. Which, if either, is 
ultimately prior—the one ultimate whole or its many ultimate 
parts? The  debate  about such an  issue  has  long  occupied  the 
philosophical  center  stage  as 
the  most  central  of  all 
philosophic  problems.  Discussing  these  questions  regarding 
diagrammatic  modeling  would 
the  whole–part 
illustrate 
problem and clarify the modeling notation.  

Event 1 

Event 2 

Event 3 

Fig. 31 The behavioral model implicit in The left half is your part of 
the cake. 

It is interesting to analyze the classical philosophical issue 
using the tuple/attribute example in Section 2. In general, the 
is  whether  subthimacs  (parts)  are  dependent 
question 
abstractions  from  their  thimac  (whole),  or  if  the  thimac 
(whole)  is  a  derivative  construction  from  its  subthimacs 
(parts). Usually the issue is discussed regarding the link of the 
entities that are more fundamental to those that are less. 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
In  the  TM  approach,  the  appearances  of  thimacs  in  the 
conceptual model are to be accounted for  by reference to the 
priority (before/after) of appearances of each other. The  new 
idea in the  TM  approach is the explicit presence of behavior 
through the machine in the thimac‘s definition. In this context, 
the  whole–part  relationship 
thimacs‘ 
dependence  regarding  both  entity-ness  (thingness)  and 
behavior (machines). The interest here is whether the presence 
of machines in the  dual  definition  of  thimacs  affects  such  an 
issue.  We  have  to  distinguish  between  create  as  a  machine 
action and the manifestation of a thing in a thimac. A machine 
can be a subdiagram of Fig. 4 (Section 2), that is, not include 
all five actions, or it can be a complex of these machines.  

is  based  on 

the 

In  TM,  the  action  create  is  in  the  machine  side  of  the 
thimac  and  it  corresponds  to  manifest  on  the  thing  side  (see 
Fig.  5  in  Section  2).  Accordingly,  when  thinking  about  a 
thimac (whole) and its subthimacs (parts), we have to separate 
the  manifestation  of  the  thing  from  the  creation  of  the 
machine  in  any  thimac  or  subthimac.  If  we  postulate  the 
existence of the part prior to the whole, we have to make the 
part machines construct the whole machine in the absence of 
the  holistic  process  that  handles  all  parts  (see  Fig.  32).  We 
need this holistic process to create a whole, which is missing 
because  of  our  postulate.  Accordingly,  we  dismiss  such  a 
postulate  and  we  adopt  the  position  that  the  whole  exists 
before  the  parts  (Fig.  33).  ―Exists‖  here  does  not  mean 
ontological existence; rather, it is recognition of what is in the 
model (see the paragraph about Carnap‘s existence of multiple 
types  of  logical  frameworks).  According  to  this  position,  the 
whole  and  the  parts  are  ontologically  ―there.‖  The  whole  is 
―sensed‖  (e.g.,  through  natural  language)  and  a  search  is 
conducted to identify its parts.  

B.  Material Objects, Change and Events 

It is typical to assume that material objects endure in time 
without  being  extended  in  time,  which  is  in  contrast  to  such 
phenomena  as  events,  states  and  processes  (as  defined  in  a 
non-TM  context),  and  are  spatially  and  temporally  extended. 
The  argument  for  such  a  claim  is  that  a  thing  is  temporally 
extended  if  it  has  parts  that  the  time  of  their  existence 
distinguishes them. In the TM view, the thimac is continually 
acting  as  a  machine  (e.g.,  Russell‘s  process  of  Cleopatra's 
needle).  Such  actions  involve  changes  (processes)  over  time. 
Thus,  every  thimac  involving  time  is  an  event  including 
material objects. Such an issue is usually discussed regarding 
the difference between continuants and events (occurrences). 
Continuants  persist  through  change,  whereas  events  do  not. 
This  claim  is  challenged  in  some  of  the  philosophical 
literature  on  the  grounds  that  no  concrete  object  retains  its 
identity  through  time;  hence,  ontology  contains  occurrences 
only.  In  TM,  the  change  is  continuous  through  the  thimac‘s 
machine without ceasing to exist. Existence is considered as a 
process  in  time.  As  soon  as  the  thimac  (of  the  object,  e.g., 
Cleopatra's needle) appears (exists), time causes processing of 
existence  (creation),  thus  extending  (see  Fig.  34)  creation 
(existence). 

P a g e  | 11 

M 

Create 

T (Thing) 

M (Machine) 

Manifest 

Create 

∆ (Thimac) 

Manifest 

T 
(Thin
g) 

M 

Create 

s∆ (Subthimac) 

… 

Manifest 

T 
(Thin
g) 

s∆ (Subthimac) 

Fig. 32 If the parts’ machines construct the whole machine, then this 
means a holistic beehaior by the parts in the absence of their holistic 
control   

T (Thing) 

M (Machine) 

Manifest 

Create 

∆ (Thimac) 

Manifest 

T 
(Thin
g) 

M 

Create 

s∆ (Subthimac) 

… 

Manifest 

T 
(Thin
g) 

M 

Create 

s∆ (Subthimac) 

Fig. 33 The thimac manifests its subthimacs and the thimac machine 
constructs the subthimacs’ submachine 

Event 

First point 
of 
appearance 
(existence) 

d
e
d
n
e
t
x
E

Time 
change 

Machine 

Manifest 
Thing 
Change 

Creat

e 

Process 

Release 

Output 

Transfer 

Input 

Accept 

Rece
ive 

Arrive 

Thimac 

Time 

Fig. 34 The thing (instance) extended in time as an event. 

Example:  Simons  [18]  discusses  continuants  that  come  into 
being,  change,  and  pass.  A  cat  consists  of  a  body  and  a  tail. 
However, the cat with a tail and the cat without a tail are the 
common.
same 

cat  without  having 

all  parts 

in 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
  
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
Fig.  35  shows  the  TM  representation  of  this  cat  example  in 
terms of occurrences (events). Fig. 35 (a) expresses that there 
is  a  cat  that  exists  at  a  certain  period  of  time  and  has  the 
indicated parts: body and tail. Fig.  35 (b)  expresses  that  the 
cat loses its tail in an accident. Fig. 35 (c) expresses that the 
cat now does not have a tail.  Fig.  36  shows  the  sequence  of 
these  events.  The  cat‘s 
this 
chronology of events.  

is  preserved  by 

identity 

VII. CONCLUSION  

This paper contributes to establishing a broad ontological 
foundation  for  conceptual  modeling,  specifically,  for  the 
‗whole  part‘  (assembly)  relationship.  We  addressed  the 
the  whole–part  notion  by  specifying  a 
semantics  of 
diagrammatical  based  on  thinging  machines  representation. 
To demonstrate the viability of the TM approach, examples of 
UML  modeling  were  remodeled.  The  results  show  a  clearer 
and  richer  representation  of  the  whole–part  relationship  and 
elate notions.  

Of  course,  examining  such  an  extensive  relationship  is  a 
continuing  process 
that  needs  further  research.  Further 
research will involve experimenting with the TM approach in 
more examples and using it in various application areas. 

P a g e  | 12 

Create 

(This) Cat 

Tail 

Create 

Body 
Create 

(a) The event: This cat exists in a certain time and has two parts 

Process 

Create 

Cat 

Tail 
Create 

Body 
Create 

Transfer 

Release 

(b) The event: The cat, through an accident, loses its tail  

Cat 

Create 

Body 
Create 

(c) The event: The cat is now without a tail 

Fig. 35 The cat representation through events (occurrences) 

REFERENCES 

a 

b 

c 

[1]  G. Yehezkel, The Conceptual Structure of Reality, Springer, 2014.  
[2]  G. Guizzardi and J. Mylopoulos, ―On the philosophical foundations of 
conceptual  models,‖  29th  International  Conference  on  Information 
Modelling  and  Knowledge  Bases  (EJC  2019),  Lappeenranta,  Finland, 
June 3–7 2019. 

[4] 

[3]  G.  Guizzardi,  H.  Herre,  amd  G.  Wagner,  ―Towards  ontological 
foundations  for  UML  conceptual  models,‖  in  On  the  Move  to 
Meaningful Internet Systems, R. Meersman and Z.  Tari,  Eds.  CoopIS, 
DOA, and ODBASE. OTM 2002. Lecture Notes in Computer Science, 
vol 2519. Berlin, Heidelberg: Springer, 2002. 
I.  Hadar  and  P.  Soffer,  ―Variations 
in  conceptual  modeling: 
Classification and ontological analysis,‖ in  Journal of the  Association 
for Information Systems, vol. 7, no. 8, pp.569–593, August 2006. 
[5]  B. Carolina de Melo Catossi, A. de Paiva Oliveira, J. Lisboa Filho and 
J.  Luis  Braga,  ―Domain  class  diagram  validation  procedure  based  on 
mereological  analysis  for  part-whole  relations,‖  Revista  Brasileira  de 
Computação Aplicada, vol. 6, no. 2, pp.48–60, 2014 

[6]  G.  Guizzardi,  (2011).  ―Ontological  foundations  for  conceptual  part–
whole  relations:  The  case  of  collectives  and  their  parts,‖  in  Advanced 
Information Systems Engineering, H. Mouratidis, and C. Rolland. Eds.. 
Lecture  Notes  in  Computer  Science,  vol  6741.  Springer,  Berlin, 
Heidelberg.  https://doi.org/10.1007/978-3-642-21640-4_12,  pp.138–
153, CAiSE 2011. 

[7]  F.  Barbier,  B.  Henderson-Sellers,  A.  Le  Parc  Lacayrelle,  and  J.-M. 
Bruel,  ―Formalization  of  the  whoel–part  relationship  in  the  unified 
modeling  language‖,  IEEE  Transactions  On  Software  Engineering, 
vol. 29, no. 5, pp.459–470, May 2003. 

[8]  F. Barbier, B. Henderson-Sellers, A. L. Opdahl, and M. Gogolla, ―The 
whoel–part  relationship  in  the  unified  modeling  language:  A  new 
approach,‖  in  Unified  Modeling  Language:  Systems  Analysis,  Design 
and Development Issues, A.  p.185–209, 2001. ⟨hal-01907091⟩ 

[9]  A. Artale, E. Franconi, N. Guarino, and L. Pazzi, ―Part–whole relations 
in  object-centered  systems:  An  overview,‖  Data  &  Knowledge 
Engineering, 20, pp.347–383, 1996. 

[10]  S.  Al-Fedaghi,  ―Function-behavior-structure  model  of  design:  An 
alternative  approach,‖  International  Journal  of  Advanced  Computer 
Science  and  Applications,  vol.  7,  no.  7,  pp.  133-139,  2016. 
DOI: 10.14569/IJACSA.2016.070719 

Fig. 36 The dynamic model of events (occurrences) 

[11]  S,  Al-Fedaghi,  ―Conceptual  modeling  of  actions,‖  arXiv:2206.13373, 

June 27, 2022. 

[12]  L.  Waguespack,  ―The  relational  model  distilled  to  support  data 
modeling, 2002,‖  Inf. Syst. Education Journal, vol. 8, no. 3, pp.1–10, 
2010. 

[13]  S. Al-Fedaghi, ―Software engineering modeling applied to English verb 
classification (and poetry)‖, International Journal of Computer Science 
and Information Security, vol. 15, no. 10,  pp. 76-87, October 2017. 
[14]  H.  Leitgeb,  Hannes,  and  A.  Carus,  "Rudolf  Carnap," in  The  Stanford 
Encyclopedia  of  Philosophy (Fall  2022  Edition),  E.  N.  Zalta,  Ed. 
forthcoming. 
https://plato.stanford.edu/archives/fall2022/entries/carnap/ 

[15]  T.  C.  Lethbridge,  and  R.  Laganiere,  Object-Oriented  Software 
Engineering:  Practical  Software  Development  Using  UML  and  Java, 
2nd ed., Berkshire, UK: McGraw-Hill Education, 2005. 

[16]  A.  Varzi, 

"Mereology," 
2019 

in The  Stanford  Encyclopedia 
E.  N. 
Edition), 

Zalta, 

of 
Ed., 

Philosophy (Spring 
https://plato.stanford.edu/archives/spr2019/entries/mereology/ 

[17]  J.  Schaffer,  ―Monism:  The  priority  of  the  whole,‖  Philosophical 
Review,  vol.  119,  no.  1,  pp.31–76,  2010.  DOI  10.1215/00318108-
2009-025 

[18]  P. Simons, Parts: A Study In Ontology, Oxford, New York: Clarendon 

Press, 1987. 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
