The MARTY user interface for the calculation of general
Wilson coeﬃcients

Grégoire Uhlrich𝑎,∗
𝑎University of Geneva, 24 rue du Général-Dufour, 1211 Geneva 4, Switzerland

E-mail: gregoire.uhlrich@unige.ch

The calculation of one-loop Wilson coeﬃcients for general Beyond the Standard Model (BSM)
scenarios is a technical challenge often addressed by doing long and error prone analytical calcu-

lations by hand. Several software programs already provide squared amplitude calculations at the
loop-level, but few of them are also able to derive general loop-level Wilson coeﬃcients necessary
e.g. for the study of quark decays in ﬂavor physics. MARTY, a computer program that automates
tree-level and one-loop perturbative calculations for general BSM scenarios can in particular be
used to obtain such Wilson coeﬃcients. We present in details the simple user interface allowing
to derive common Wilson coeﬃcients in MARTY, and the most general use case of MARTY to extract
the coeﬃcient of any eﬀective operator.

2
2
0
2

y
a
M
1
3

]
h
p
-
p
e
h
[

1
v
6
8
7
5
1
.
5
0
2
2
:
v
i
X
r
a

Computational Tools for High Energy Physics and Cosmology (CompTools2021)
22-26 November 2021
Institut de Physique des 2 Inﬁnis (IP2I), Lyon, France

∗Speaker

© Copyright owned by the author(s) under the terms of the Creative Commons
Attribution-NonCommercial-NoDerivatives 4.0 International License (CC BY-NC-ND 4.0).

https://pos.sissa.it/

 
 
 
 
 
 
The MARTYuser interface for the calculation of general Wilson coeﬃcients

Grégoire Uhlrich

1.

Introduction

Automated calculations beyond the Standard Model have always been a challenge, in particular
at the loop level. A lot of software development work has been dedicated to this particular issue
in the past decades, with the use of symbolic computation frameworks required for this type of
theoretical calculations. Open-source codes implementing their own symbolic computation mod-
ules exist such as LanHEP [1] for the vertex derivation from the Lagrangian, or CompHEP [2] and
CalcHEP [3] that automate the calculation of tree-level squared amplitudes in a variety of BSM
scenarios. Finally, MadGraph_aMC@NLO [4, 5] is also open-source and provides tree-level and one-
loop calculation facilities for squared amplitudes. If Mathematica [6], a closed and commercial
computer algebra system, can be used, several other packages exist such as FeynRules [7, 8],
FeynArts/FormCalc [9, 10] that make use of FORM [11], SARAH [12] that was initially special-
ized for supersymmetric (SUSY) models, or packages also dedicated to the Wilson coeﬃcients
calculations e.g. FormFlavor [13] or FlavorKit [14].

MARTY [15] is a public C++ program, using its own symbolic computation machinery, automat-
ing the calculation of amplitudes, squared amplitudes and Wilson coeﬃcients up to the one-loop
level for a very large variety of BSM scenarios. A comprehensive documentation is available for
MARTY, including manuals [16, 17] and an interactive HTML documentation [18]. All the publicly
available material related to MARTY (code, publications, talks, documentation, etc) can be found on
the website [19].

The automated analytical calculation of one-loop Wilson coeﬃcients for general BSM sce-
narios, in particular up to dimension-6 operators (with four fermions), is currently not provided
by free-to-use packages other than MARTY. In this conference paper, we present the main steps to
calculate such quantities in any model that can be built with MARTY (for more details about model
building in MARTY see [16, 20]). The procedure is fully general and allows users to derive for exam-
ple the loop-level Wilson coeﬃcients relevant for ﬂavor physics, including for (chromo-)magnetic
operators and Δ𝐹 = 1, 2 dimension-6 operators for e.g. 𝑏 → 𝑠 transitions. Section 2 introduces
deﬁnitions important to understand what Wilson coeﬃcients are in MARTY, and section 3 presents
the main features necessary to extract these quantities for any BSM model. While [21] was mainly
focusing on Wilson coeﬃcients for ﬂavor physics giving one complete example, here we highlight
the general the general procedure and discuss the extension to general Wilson coeﬃcients.

2. Deﬁnitions in MARTY

2.1 Generalities

Wilson coeﬃcients are symbolic scalar expressions in front of operator structures in MARTY’s
amplitudes. In Eﬀective Field Theories (EFT), amplitudes are the matrix elements of an eﬀective
Hamiltonian

H𝑒 𝑓 𝑓 ≡

𝐶𝑖 ˆO𝑖,

Õ
𝑖

2

(1)

The MARTYuser interface for the calculation of general Wilson coeﬃcients

Grégoire Uhlrich

with ˆO𝑖 eﬀective operators and 𝐶𝑖 their respective Wilson coeﬃcients. The transition amplitude
between an initial state 𝑖 and a ﬁnal state 𝑓 is deﬁned as the matrix element of this Hamiltonian:

𝑖M (𝑖 → 𝑓 ) = h 𝑓 |(−𝑖H𝑒 𝑓 𝑓 )|𝑖i = −𝑖

𝐶𝑖 h 𝑓 | ˆO|𝑖i.

Õ
𝑖

(2)

The operator matrix elements h 𝑓 | ˆO|𝑖i may not in general be calculated perturbatively and can
contain long distance eﬀects. However, the BSM dependence lies in the Wilson coeﬃcients and a
perturbative calculation is enough to determine their respective values as explained in e.g. [22]. In
MARTY, a matrix element is simply a particular contraction of external ﬁelds. The general case for
an amplitude with 𝑁 external ﬁelds {Φ{ 𝐴𝐼 }

}𝐼 with indices {𝐴𝐼 } can be written as

𝐼
𝐶𝑖 · 𝑇 { 𝐴1 } ···{ 𝐴𝑁 }

𝑖

𝑖M = −𝑖𝛼

Õ
𝑖

· Φ{ 𝐴1 }
1

· · · Φ{ 𝐴𝑁 }
𝑁

,

(3)

𝑖

with 𝑇 { 𝐴1 } ···{ 𝐴𝑁 }
all diﬀerent tensors contracting the external ﬁelds to each other in the resulting
amplitude and 𝛼 a convention dependent constant. Therefore, by multiplying the amplitude by 𝑖/𝛼
the Wilson coeﬃcients can be directly identiﬁed in front of the diﬀerent matrix elements.

MARTY can decompose amplitudes in independent external ﬁeld contractions and give the
coeﬃcients in front, taking into account a global user-deﬁned factor 𝛼. The matrix element (a.k.a
operator in MARTY) is therefore the contraction of ﬁelds in the amplitude (including possible tensor
couplings), and the Wilson coeﬃcient is the scalar multiplicative factor in front. The particular
cases of dimension-5 and dimension-6 operators are discussed in the following.

LO vs. NLO As implicitly stated above, the matching used by MARTY is trivial and in particular no
explicit calculation is performed in the eﬀective theory. This is because MARTY provides automated
procedures only for the Leading Order (LO), at tree-level or at the one-loop level. In order to obtain
Next-to-Leading Order (NLO) Wilson coeﬃcients (e.g. a one-loop calculation for a process that is
non-zero at tree-level) one has to perform the same calculation in the eﬀective theory and match the
result on the full theory. Although this can be done with MARTY, for now no automated procedure
allows us to obtain NLO coeﬃcients. Such a procedure could be developed in the future. For
further numerical computations from the Wilson coeﬃcients e.g. applying the Renormalization
Group Equations (RGE), dedicated open-source codes already exist such as SuperIso [23–26] for
ﬂavor physics.

2.2 (Chromo-)Magnetic operators

Dimension-5 operators are deﬁned for two fermions 𝜓1, 𝜓2 and a vector boson 𝐵 as

𝑂mag ≡ (cid:16)

¯𝜓1 (𝑇 𝐴)𝜎 𝜇𝜈Γ𝜓2(cid:17) 𝐹 ( 𝐴)
𝜇𝜈 ,

(4)

with (𝑇 𝐴) the algebra generator when relevant, 𝐹 ( 𝐴)

𝜇𝜈 the ﬁeld strength of 𝐵 and

1, 𝛾5, 𝑃𝐿, 𝑃𝑅(cid:9)
To fully deﬁne a magnetic operator, a user therefore only has to choose one element picked in a
set of 4 elements. The algebra generator (𝑇 𝐴) does not have to be user deﬁned as its presence is
determined by the particle types.

Γ ∈

(5)

(cid:8)

.

3

The MARTYuser interface for the calculation of general Wilson coeﬃcients

Grégoire Uhlrich

2.3 4-fermions operators

Dimension-6 operators with fermions 𝜓1, 𝜓2, 𝜓3 and 𝜓4 are deﬁned by operators of the type

with Dirac couplings

𝑂 𝑑=6 ≡ 𝑇𝑖 𝑗𝑘𝑙 (cid:16)

¯𝜓1

𝑖Γ𝐴𝜓 𝑗

2 (cid:17) (cid:16)

¯𝜓3

𝑘Γ𝐵𝜓𝑙

4(cid:17) ,

Γ𝐴, Γ𝐵 ∈

(cid:8)

,

(cid:9)

1, 𝛾5, 𝑃𝐿, 𝑃𝑅,
𝛾 𝜇, 𝛾 𝜇𝛾5, 𝛾 𝜇 𝑃𝐿, 𝛾 𝜇 𝑃𝑅,
𝜎 𝜇𝜈, 𝜎 𝜇𝜈𝛾5, 𝜎 𝜇𝜈 𝑃𝐿, 𝜎 𝜇𝜈 𝑃𝑅

(6)

(7)

with Γ𝐴 and Γ𝐵 contracting to leave no free Minkowski index. The indices 𝑖, 𝑗, 𝑘, and 𝑙 in equation 6
are gauge indices, contracted by 𝑇𝑖 𝑗𝑘𝑙 that can be of four main kinds:

𝑇𝑖 𝑗𝑘𝑙 = 𝛿𝑖 𝑗 𝛿𝑘𝑙,
𝑇𝑖 𝑗𝑘𝑙 = 𝛿𝑖𝑙𝛿𝑘 𝑗,
𝑇𝑖 𝑗𝑘𝑙 = 𝛿𝑖𝑘 𝛿 𝑗𝑙,
𝑇𝑖 𝑗𝑘𝑙 = 𝑇 𝐴
𝑖 𝑗 𝑇 𝐴
𝑘𝑙.

(8)

To fully deﬁne a dimension-6 operator, Γ𝐴, Γ𝐵 and 𝑇𝑖 𝑗𝑘𝑙 must therefore be provided.

3. The user interface

In this section the user interface to obtain the Wilson coeﬃcients of the operators deﬁned above

is presented. Four main steps have to be followed in MARTY:

• Options setup for the amplitude calculation.

• Amplitude calculation, including the decomposition on an operator basis.

• Deﬁnition of the operator of which the coeﬃcient must be extracted.

• Extraction of the coeﬃcient.

Considering e.g. a process 𝜓1 → 𝜓2𝐵 and a MARTY model in the model variable, the two ﬁrst

steps can be performed using:

FeynOptions options;
Expr factor = ...; // Convention-dependent factor to be defined if needed
options.setWilsonOperatorCoefficient(factor);
vector<Wilson> wilsons = model.computeWilsonCoefficients(

OneLoop,
{Incoming("psi1"), Outgoing("psi2"), Outgoing("B")},
options);

4

The MARTYuser interface for the calculation of general Wilson coeﬃcients

Grégoire Uhlrich

For the details on how to deﬁne the convention-dependent factor we refer to the user manual [16].
After the calculation, the wilsons variable contains the decomposed amplitude but work still needs
to be done to extract particular coeﬃcients from the result as explained in the the next sections.

The fermion ordering option For 4-fermion operators, the order of external fermions in the
operator basis must be user-deﬁned. From the initial order given when deﬁning the external particles
of the calculation, the ﬁnal order is deﬁned as a permutation of the initial order. Considering a four
fermion process 𝜓1 → ¯𝜓2𝜓3𝜓4, a fermion order (2, 0, 3, 1) corresponds to operators of the type

( ¯𝜓3Γ𝐴𝜓1) ( ¯𝜓4Γ𝐵𝜓2),

(9)

where Γ𝐴,𝐵 are generalized couplings. The indices are deﬁned starting from 0, a valid permutation
is therefore a permutation of (0, 1, 2, 3). The fact that particles are incoming or outgoing is not
relevant for this ordering. Such orderings have to be deﬁned in the options before the amplitude
calculation. In the example above the following option must be deﬁned

options.setFermionOrder({2, 0, 3, 1});

3.1 Operator deﬁnition

For common operators, built-in functions exist to create them without having to explicitly
construct their explicit analytical expression.1 This is the case for magnetic dimension-5 operators
and dimension-6 operators with 4 fermions.

In order to easily deﬁne all possible operators for 𝑑 = 5 and 𝑑 = 6 discussed in section 2.2
and 2.3 respectively, the diﬀerent Dirac and color couplings are stored in enumerations. These
enumerations are presented in tables 1 and 2 respectively.

Using the enumeration presented in table 1, the chromoMagneticOperator() method can be
used to build the relevant dimension-5 operators deﬁned in equation 4 e.g. for 𝐶7 (𝑏 → 𝑠𝛾 decay)
or (𝑔 − 2)𝜇:

vector<Wilson> O_7 = chromoMagneticOperator(

model, wilsons, DiracCoupling::R);
// Fermion current (sigma P_R)

vector<Wilson> O_gm2 = chromoMagneticOperator(

model, wilsons, DiracCoupling::S);
// Fermion current (sigma)

A similar principle exists for the dimension-6 operators deﬁned in equation 6, this time two

Dirac couplings must be given to deﬁne the two fermion currents:

1General operators can also be deﬁned explicitly, see the user manual [16].

5

The MARTYuser interface for the calculation of general Wilson coeﬃcients

Grégoire Uhlrich

Enumeration element

Name

DiracCoupling::S

DiracCoupling::P

DiracCoupling::L

DiracCoupling::R

DiracCoupling::V

DiracCoupling::A

DiracCoupling::VL

DiracCoupling::VR

DiracCoupling::T

DiracCoupling::TA

DiracCoupling::TL

DiracCoupling::TR

Scalar
Pseudo-scalar
Left
Right
Vector
Axial
Vector left
Vector right
Tensor
Tensor axial
Tensor left
Tensor right

Expression
1
𝛾5
𝑃𝐿
𝑃𝑅
𝛾 𝜇
𝛾 𝜇𝛾5
𝛾 𝜇 𝑃𝐿
𝛾 𝜇 𝑃𝑅
𝜎 𝜇𝜈
𝜎 𝜇𝜈𝛾5
𝜎 𝜇𝜈 𝑃𝐿
𝜎 𝜇𝜈 𝑃𝑅

Table 1: Dirac couplings available to deﬁne operator structures in MARTY.

Name

Expression

Enumeration element

ColorCoupling::Id

ColorCoupling::Crossed
ColorCoupling::InvCrossed Crossed inversed
ColorCoupling::Generator

Generator

Identity
Crossed

𝛿𝑖 𝑗 𝛿𝑘𝑙
𝛿𝑖𝑙𝛿𝑘 𝑗
𝛿𝑖𝑘 𝛿 𝑗𝑙
𝑖 𝑗 𝑇 𝐴
𝑇 𝐴
𝑘𝑙

Table 2: Color couplings possible to deﬁne dimension-6 operators in MARTY. See equation 6 for the deﬁnition
of the indices 𝑖 𝑗 𝑘𝑙.

vector<Wilson> O_1 = dimension6Operator(model, wilsons,
DiracCoupling::L, DiracCoupling::R); // (P_L)x(P_R)
vector<Wilson> O_2 = dimension6Operator(model, wilsons,

DiracCoupling::VL, DiracCoupling::V); // (G^mu P_L)x(G_mu)

When a gauge tensor coupling of a dimension-6 operator is not trivial, it is possible to specify
another one giving the gauge group name ("C" for color group in the example) and an element of
the enumeration presented in table 2:

vector<Wilson> O1_crossed = dimension6Operator(model, wilsons,

DiracCoupling::L, DiracCoupling::R,
{"C", ColorCoupling::Crossed}
); // (P_L)_ij x (P_R)_ji

6

The MARTYuser interface for the calculation of general Wilson coeﬃcients

Grégoire Uhlrich

3.2 Wilson coeﬃcient extraction

Finally, after calculating the amplitude and building the relevant operators as previously dis-
cussed, the extraction of the ﬁnal Wilson coeﬃcients is very simple using the getWilsonCoefficient()
method:

Expr C7 = getWilsonCoefficient(wilsons, O_7);
Expr gm2 = getWilsonCoefficient(wilsons, O_gm2);
Expr C1 = getWilsonCoefficient(wilsons, O_1);
Expr C2 = getWilsonCoefficient(wilsons, O_2);
Expr C1p = getWilsonCoefficient(wilsons, O1_crossed);

The resulting variables are simple MARTY symbolic expressions and can therefore directly be

used for library generation and numerical evaluation as usual.2

3.3 Generalization of the operator deﬁnition

In MARTY it is also possible to extract Wilson coeﬃcients of generic operators. The principle
is to create the analytical expression, in MARTY, of the operator of which the coeﬃcient must be
extracted. Then, MARTY automatically searches in the amplitude for the user-deﬁned operator and
extracts its coeﬃcient. The creation of custom eﬀective operators is very similar to the creation of
general Lagrangian terms and should feel familiar for a user already accustomed to model building
procedures in MARTY.

The momenta of a process need in general to be obtained from MARTY to deﬁne operators. This

can be done using:

vector<Tensor> p = wilsons.kinematics.getOrderedMomenta();
// p[0], p[1], p[2] are momenta p1, p2, p3 for a three particles process

To obtain the particles, tensors and indices, the procedure is the same as for model building.
In order to create gauge indices in the relevant vector spaces, it is necessary to specify the group (or
its name) and the irreducible representation (or a particle). For the example of a 𝑏 → 𝑠𝛾 process
this gives:

// The fields
Particle b = model.getParticle("b");
Particle s = model.getParticle("s");
Particle A = model.getParticle("A");

2For

this
https://marty.in2p3.fr/gettingStarted.html or the user manual [16].

procedure

details

more

see

the

on

simple

example

on

the

website

7

The MARTYuser interface for the calculation of general Wilson coeﬃcients

Grégoire Uhlrich

// Additional tensors
Tensor gamma = dirac4.gamma;
// Index for the triplet (e.g. quark "b")
// in the SU(3) color group "C":
Index i = model.generateIndex("C", "b");
// Dirac and Minkowski indices
vector<Index> al = DiracIndices(2);
Index mu = MinkowskiIndex();

Once all objects have been retrieved from MARTY, the operator expression can be built explicitly
in a symbolic MARTY expression. Considering the example of the ¯𝑠( 𝑝2) /𝐴( 𝑝3)𝑏( 𝑝1) operator, the
corresponding MARTY expression is:3

Expr Op = GetComplexConjugate(s({i, al[0]}, p[1]))*A(mu, p[2])
*gamma({+mu, al[0], al[1]})*b({i, al[1]}, p[0]);

Finally, the corresponding coeﬃcient can be extracted by MARTY giving the operator previously

constructed:

Expr C = getWilsonCoefficient(wilsons, Op);

This procedure is completely general, is valid for all groups and representations, and allows
users to extract the Wilson coeﬃcients of all operators that have not been explicitly implemented
in the simple user interface for 𝑑 = 5 and 𝑑 = 6 operators.

4. Conclusion

We presented the user interface in MARTY allowing one to extract in a simple way the Wilson
coeﬃcients of 𝑑 = 5 and 𝑑 = 6 operators at the one-loop level. These coeﬃcients are necessary for
the calculation of phenomenogically-motivated quantities such as e.g. (𝑔 − 2)𝜇 or the coeﬃcients
of quark decays in ﬂavor physics. Furthermore, we showed how to generalize the Wilson coeﬃcient
extraction to any eﬀective operator using a procedure similar to the Lagrangian construction in
MARTY.

We deﬁned analytically the operators in section 2 by highlighting their speciﬁcity and the
minimum quantity of information required from a user to uniquely deﬁne them. Section 3 then
presented the interface to build these operators in a MARTY program and extract their coeﬃcients
for a given process. In a few lines of code, it is possible to extract Wilson coeﬃcients for 𝑑 = 5 and

3For signed indices such as Minkowski indices, it is necessary to specify if the index given to MARTY is up or down.

By default mu is down (e.g. 𝐴𝜇) and +mu is up (e.g. 𝐴𝜇).

8

The MARTYuser interface for the calculation of general Wilson coeﬃcients

Grégoire Uhlrich

𝑑 = 6 operators that can directly be used by the library generation facility of MARTY for numerical
evaluation. With a reasonable amount of work, the Wilson coeﬃcients of general operators can
also be obtained with MARTY using the generic operator deﬁnition features.

The procedures presented in this proceeding have two very important features:

• The code is completely model-independent. Once the procedure is set for the extraction of
one or several Wilson coeﬃcients, changing the model in MARTY (considering that it has been
built) takes only one line and the program will execute in the exact same way.

• Downloading and installing MARTY, a free and open-source code, is a suﬃcient condition to

use all the features discussed here.

As it has already been showed for beauty quark decays in non-minimal ﬂavor violating MSSM4
scenarios [27], the user interface for the automated extraction of Wilson coeﬃcients with MARTY
will greatly facilitate the BSM analyses relying on such theoretical calculations in a large variety of
models.

References

[1] A. Semenov, LanHEP: A Package for the automatic generation of Feynman rules in ﬁeld

theory. Version 3.0, Comput. Phys. Commun. 180 (2009) 431 [0805.0555].

[2] CompHEP collaboration, CompHEP 4.4: Automatic computations from Lagrangians to

events, Nucl. Instrum. Meth. A 534 (2004) 250 [hep-ph/0403113].

[3] A. Pukhov et al., CompHEP: A Package for evaluation of Feynman diagrams and integration

over multiparticle phase space, hep-ph/9908288.

[4] J. Alwall et al., The automated computation of tree-level and next-to-leading order
diﬀerential cross sections, and their matching to parton shower simulations,
Journal of High Energy Physics 2014 (2014) .

[5] R. Frederix et al., The automation of next-to-leading order electroweak calculations,

Journal of High Energy Physics 2018 (2018) .

[6] Wolfram Research, Inc., “Mathematica, Version 12.1.”

https://www.wolfram.com/mathematica.

[7] A. Alloul et al., FeynRules 2.0 - A complete toolbox for tree-level phenomenology,

Comput. Phys. Commun. 185 (2014) 2250 [1310.1921].

[8] C. Degrande, Automatic evaluation of UV and R2 terms for beyond the Standard Model

Lagrangians: a proof-of-principle, Comput. Phys. Commun. 197 (2015) 239 [1406.3030].

[9] T. Hahn, Generating Feynman diagrams and amplitudes with FeynArts 3,

Computer Physics Communications 140 (2001) 418–431.

4Minimal Supersymmetric Standard Model.

9

The MARTYuser interface for the calculation of general Wilson coeﬃcients

Grégoire Uhlrich

[10] T. Hahn and M. Perez-Victoria, Automatized one loop calculations in four-dimensions and

D-dimensions, Comput. Phys. Commun. 118 (1999) 153 [hep-ph/9807565].

[11] B. Ruĳl, T. Ueda and J. Vermaseren, FORM version 4.2, 1707.06453.

[12] F. Staub, Exploring new models in all detail with SARAH,

Adv. High Energy Phys. 2015 (2015) 840780 [1503.04200].

[13] J.A. Evans and D. Shih, FormFlavor Manual, 1606.00003.

[14] W. Porod, F. Staub and A. Vicente, A Flavor Kit for BSM models,

Eur. Phys. J. C 74 (2014) 2992 [1405.1434].

[15] G. Uhlrich, F. Mahmoudi and A. Arbey, MARTY – Modern ARtiﬁcial Theoretical phYsicist:
A C++ framework automating theoretical calculations Beyond the Standard Model,
Computer Physics Communications 264 (2021) 107928.

[16] G. Uhlrich, “MARTY – User manual.”

https://marty.in2p3.fr/doc/marty-manual.pdf, 2021.

[17] G. Uhlrich, “CSL – User manual.” https://marty.in2p3.fr/doc/csl-manual.pdf,

2020.

[18] G. Uhlrich, “Documentation of MARTY.”

https://marty.in2p3.fr/doc/marty/html/index.html, 2021.

[19] G. Uhlrich, “MARTY – Website.” https://marty.in2p3.fr/, 2021.

[20] G. Uhlrich, F. Mahmoudi and A. Arbey, Semi-automated BSM model building procedures in

MARTY-1.1 through a 2HDM example, PoS TOOLS2020 (2021) 042.

[21] G. Uhlrich and F. Mahmoudi and A. Arbey, Automatic extraction of one-loop Wilson

coeﬃcients in general BSM scenarios using MARTY-1.4, 2110.14515.

[22] A.J. Buras, Weak Hamiltonian, CP violation and rare decays, in Les Houches Summer
School in Theoretical Physics, Session 68: Probing the Standard Model of Particle
Interactions, Jun, 1998 [hep-ph/9806471].

[23] F. Mahmoudi, SuperIso: A Program for calculating the isospin asymmetry of 𝐵 → 𝐾 ∗𝛾

gamma in the MSSM, Comput. Phys. Commun. 178 (2008) 745 [0710.2067].

[24] F. Mahmoudi, SuperIso v2.3: A Program for calculating ﬂavor physics observables in

Supersymmetry, Comput. Phys. Commun. 180 (2009) 1579 [0808.3144].

[25] F. Mahmoudi, SuperIso v3.0, ﬂavor physics observables calculations: Extension to NMSSM,

Comput. Phys. Commun. 180 (2009) 1718.

[26] S. Neshatpour and F. Mahmoudi, Flavour Physics with SuperIso,

PoS TOOLS2020 (2021) 036 [2105.03428].

[27] M. A. Boussejra and F. Mahmoudi and G. Uhlrich, Flavour anomalies in supersymmetric

scenarios with non-minimal ﬂavour violation, 2201.04659.

10

