Toward a Generic Mapping Language
for Transformations between
RDF and Data Interchange Formats

Aljosha K¨ocher, Artan Markaj, Alexander Fay
Institute of Automation Technology
Helmut Schmidt University, Hamburg, Germany
Email: aljosha.koecher@hsu-hh.de, artan.markaj@hsu-hh.de, alexander.fay@hsu-hh.de

2
2
0
2

l
u
J

1
2

]

B
D
.
s
c
[

1
v
5
0
2
1
1
.
7
0
2
2
:
v
i
X
r
a

Abstract—While there exist approaches to integrate heteroge-
neous data using semantic models, such semantic models can
typically not be used by existing software tools. Many software
tools — especially in engineering — only have options to import
and export data in more established data interchange formats
such as XML or JSON. Thus, if an information which is included
in a semantic model needs to be used in a such a software tool,
automatic approaches for mapping semantic information into an
interchange format are needed. We aim to develop a generic
mapping approach that allows users to create transformations
of semantic information into a data interchange format with an
arbitrary structure which can be deﬁned by a user. This mapping
approach is currently being elaborated. In this contribution,
we report our initial steps targeted to transformations from
RDF into XML. At ﬁrst, a mapping language is introduced
which allows to deﬁne automated mappings from ontologies to
XML. Furthermore, a mapping algorithm capable of executing
mappings deﬁned in this language is presented. An evaluation is
done with a use case in which engineering information needs to
be used in a 3D modeling tool.

Index Terms—Ontologies, Semantic Web, Mapping, Data in-

terchange

I. INTRODUCTION

Semantic Web Technologies, such as ontologies—which
deﬁne relevant terms of a domain as well as the relations
between those terms in a formal manner—were originally
intended to solve the problem of vast amounts of unrelated
data in the World Wide Web [1]. Since then, Semantic Web
Technologies have been increasingly used to represent com-
plex interrelations which typically occur in technical contexts,
e.g., during the life cycle of Cyber-Physical Systems (CPS)
[2] or in industrial plant engineering [3]. Engineering of
industrial plants takes place in a multi-disciplinary environ-
ment in which various engineering domains and disciplines
collaborate. Typically, every discipline has its own set of
tools and databases, resulting in heterogeneous information.
Semantic Web Technologies are considered promising to link
and integrate this information into a single machine-readable,
semantic model [3].

While there are efforts to make use of semantic technologies
for shared and formal models in engineering, existing software
tools in industrial practice lack support for an integration of
semantically modeled information. Typically, data integration
is done using less formal interchange formats such as the

Extensible Markup Language (XML) or JavaScript Object
Notation (JSON). In contrast, semantically modeled informa-
tion is encoded using Resource Description Framework (RDF)
triples, while RDF Schema (RDFS) and the Web Ontology
Language (OWL) are used to deﬁne a schema on top of
RDF data [4]. In order to use semantic information within
software tools, such information needs to be transformed into
an established interchange format. Furthermore, the challenge
is not only that interchange formats are required, but importing
tools depend upon certain data models. Thus, a conﬁgurable
transformation approach is important.

With this research, we aim to create a generic mapping
language to transform RDF data into data interchange for-
mats. In this contribution, the following initial ﬁndings are
presented: (a) A mapping language along with (b) a mapping
algorithm that allow to map information contained in an RDF
graph to XML. The mapping language allows for user-deﬁned
mappings so that the exact transformation of information into
an XML structure can be controlled by a user.

The remainder of this contribution starts with a short
overview on related approaches to transforming semantic mod-
els in Section II. In Section III, both the mapping language and
an algorithm to execute mappings are presented. Ultimately,
this contribution concludes with a summary and outlook in
Section IV.

II. RELATED WORK

An early approach to transform OWL to XML-based Com-
puter Aided Engineering Exchange (CAEX) is presented in
[5]. In this contribution, the need to transform ontological
information into an exchange format used by engineering tools
is recognized. Thus, the approach of the authors in [5] has the
same goal as our approach. Unfortunately, their contribution
does not describe a general-purpose mapping language, but a
mapping algorithm that includes a static mapping logic that
cannot be changed by user-deﬁned mapping rules. Further-
more, the approach is only suitable for CAEX as a target
format and not all elements of an ontology can be transferred.
Hua and Hein build on [5] and present a bidirectional
approach that can transform information from OWL ontologies
to CAEX and vice versa [6]. The approach is very extensive
and covers large parts of the semantics of OWL, even complex

 
 
 
 
 
 
length as a parameter to select. The arm length depends on
various factors of the robot application, e.g., the expected load
as well as desired size of the working area. We assume that
all these dependencies are already maintained in an ontology.
Let’s assume that manufacturing of other parts of a robot
cell is done not by the robot manufacturer, but instead by
other companies which need a 3D model of the exact robot
conﬁguration with all speciﬁc parameters such as the arm
lengths. With a parametric 3D design tool, a 3D model for
one speciﬁc conﬁguration can typically be derived from a
base model by importing a set of parameters. This parameter
information is contained in an ontology and needs to be
automatically imported as an XML ﬁle into a 3D design tool.
The objective is therefore to generate an XML-based pa-
rameter description of a certain robot conﬁguration. During
engineering, a robot is designed using an ontology, so that
all parameters might be modeled as shown in Figure 2. It is
important to note that this information may either be stored
in a persistent manner or can be inferred by reasoning and
may, thus, only be available during query execution. As long
as the information can be queried with a SPARQL query,
there is no difference for our mapping approach. This is a
beneﬁt of working with an actual ontology model instead of
its serialization — which would be required by XSLT.

A. Mapping Language

The developed mapping language is based on RML and uses
a comparable vocabulary. A mapping ﬁle contains deﬁnitions
written in the developed vocabulary using one of the RDF
serialization formats, e.g., Turtle. The output document is an
XML ﬁle containing information of an ontology in a desired
structure. The output document may initially be empty or may
already contain valid XML. Subsequently, the components of
the mapping vocabulary will be explained using the robot
example.

@ p r e f i x o l : <h t t p : / / www. hsu −hh . de / a u t / o n t o l o g i e s /

o l i f #>.

. . .
<#P a r a m e t e r M a p p i n g > a o l : DataMap ;

o l : o n t o l o g i c a l S o u r c e

[

o l : s o u r c e ” p a r a m e t e r s . t t l ” ;
o l : s o u r c e T y p e o l : F i l e ;
o l : q u e r y L a n g u a g e o l : S p a r q l ;
o l : q u e r y

”PREFIX ex : <h t t p : / / . . . / e x a m p l e#>
SELECT ? p a r a m e t e r N a m e ? p a r a m e t e r V a l u e WHERE {

ex : R o b o t C o n f i g u r a t i o n A B C a ex :

R o b o t C o n f i g u r a t i o n ;

ex : h a s P a r a m e t e r ? p a r a m e t e r .

? p a r a m e t e r ex : hasName ? p a r a m e t e r N a m e ;

ex : h a s V a l u e ? p a r a m e t e r V a l u e .

}”

] ;
o l : c o n t a i n e r
o l : s n i p p e t
”<ParamWithValue>

” / p a r a m e t e r s ” ;

<name>l e n g t h $ { p a r a m e t e r N a m e }</name>
<typeCode>mm</
<v a l u e >${ p a r a m e t e r V a l u e } mm</ v a l u e >

typeCode>

</ ParamWithValue >”.

Listing 1. Example mapping deﬁnition to map parameters from Figure 2 into
the XML form of Listing 2

Fig. 1. Overview of the concept.

class expressions. However, the approach doesn’t contain a
general-purpose mapping language for transferring informa-
tion from OWL into hierarchical exchange formats either.

Extensible Stylesheet Language Transformations (XSLT) as
deﬁned in [7] would allow more general transformations from
OWL ontologies into all kinds of XML documents. However,
XSLT is a transformation language between two XML docu-
ments so it would require mappings to be created against the
XML-serialized form of an ontology. This is signiﬁcantly more
cumbersome than working against the actual OWL model and
impedes the use of powerful ontology features like querying
and reasoning. Furthermore, we strive to create a mapping
language that can — at a later point — also generate other
interchange formats such as JSON. Thus, XSLT is not a
suitable foundation for general-purpose mappings from an
ontological model to existing data interchange formats.

The RDF Mapping Language (RML) is a powerful map-
ping language to transform data contained in interchange
formats such as JSON or XML into RDF. RML was orig-
inally published in [8]. RML is deﬁned as a superset of
the RDB to RDF Mapping Language (R2RML). RML has
been further developed since 2014 and is now available as a
W3C Draft with comprehensive documentation and tooling.
Unfortunately, RML is a monodirectional mapping language
that supports only mappings from existing data formats into
RDF. Thus, RML is inherently not suited for transformations
from RDF to data interchange formats. Nevertheless,
the
approach presented in this paper follows the rationale behind
RML, and we aim to create a comparable mapping language
for a reversed transformation from RDF to well-established
data interchange formats.

III. CONCEPT

The main idea of this contribution is to allow users to create
custom mapping rules which transform certain parts of an
ontology into a data interchange format such as XML (see
Figure 1). Such rules allow engineering knowledge to be kept
in an ontology and to transform only certain information of
this ontology into an exchange format. In this section, the
mapping language and algorithm are introduced by means of
our current achievement: a transformation from RDF to XML.
To illustrate the concepts described in this contribution, a
robot use case is taken as a simpliﬁed running example. From
different robot conﬁgurations, the one most suitable for a given
task needs to be found. For simplicity, we only consider arm

RDF DataXML withRDF DataMapping AlgorithmMapping DefinitionTool-SpecificSchemaex:RobotConﬁguration ABC

ex:Parameter1

ex:hasName

”arm1”

ex:hasParameter

ex:hasValue

200

ex:Parameter3

ex:hasName
ex:hasValue

ex:hasParameter

ex:Parameter2

ex:hasParameter

ex:hasName
ex:hasValue

”arm2”

260

”arm3”

220

Fig. 2. Simpliﬁed excerpt from an exemplary ontology containing a robot conﬁguration with various parameters (arm lengths in this case). Whether these
elements exist in a materialized (i.e., persistent) form or are created trough a reasoning process is not important.

Preﬁx declarations are used for abbreviating URIs. Compa-
rable to RML’s TriplesMap, a ol:DataMap is the class
of all mapping deﬁnitions that deﬁne a mapping from RDF
source elements to XML. It describes which concepts of an
RDF graph should be mapped to XML. In the case of the
robot arm a <#ParameterMapping> is deﬁned.

Every ol:DataMap has to have one individual related
via ol:ontologicalSource which deﬁnes all source
elements that are part of a mapping. This individual further
speciﬁes:

(a) The actual source of the ontology to map.
(b) The type of the source, which may be either a ﬁle or a

SPARQL endpoint

(c) The technology used to ﬁnd source information within the
source ontology. Currently, only SPARQL is supported.
(d) A SPARQL query whose results are used to create

elements in the output ﬁle.

For our running example, we use a parameters.ttl ﬁle
as the source document. The SPARQL query of Listing 1
searches for all parameters of a speciﬁc robot conﬁguration
ex:RobotConfiguration_ABC and returns the names
and values of all parameters found.

While an ol:ontologicalSource deﬁnes the source,
the elements to be mapped, ol:container and
i.e.
ol:snippet deﬁne how these source elements will be
represented in the output document. An ol:container is
an XPath expression deﬁning XML elements that the elements
to be mapped will be inserted into. The elements targeted
might already exist in an output document so that elements can
be mapped into an existing XML structure. If they don’t exist,
they are created during mapping. An ol:container may
use results of the source’s SPARQL query. An ol:snippet
represents the actual XML structure that will be created
through the current mapping rule. It is an XML string that
may also use results of the SPARQL query. In our example,
the variables parameterName and parameterValue are
used to dynamically create XML representations for each
parameter returned by the query.

B. Mapping Algorithm

In order to execute mapping deﬁnitions given in the lan-
guage presented in the previous subsection, an initial mapping
algorithm has been developed. The steps necessary to trans-
form an RDF graph into an XML ﬁle are shown in the pseudo
code of Algorithm 1 and are explained in this subsection.

Algorithm 1: Mapping Algorithm
Input

: Path to mapping deﬁnition ﬁle PM ,

Path to XML ﬁle PX
Output: XML structure to write to PX

1 MM ← Create mapping Model from PM ;
2 X ← Open or create XML document from PX ;
3 D ← Get all mapping deﬁnitions inside Mm;
4 foreach d ∈ D do
5

MS ← Get model from source;
Q ← Get query;
R ← Execute Q against MS;
C ← Insert all r ∈ R into container XPath
expression;
NC ← Execute XPaths to obtain or create
container node for each c ∈ C;
foreach n ∈ NC do

S ← Insert all r ∈ R into snippet;
foreach s ∈ S do

Append s to n;

end
Update or create n in X

6

7

8

9

10

11

12

13

14

15

end

16
17 end
18 Write updated X to Px

The input of the algorithm is a ﬁle with mapping deﬁnitions
as described in the previous subsection as well as a ﬁle path to
an XML ﬁle which will later contain the results of all mapping
deﬁntions. First, a mapping model MM is created from the
mapping ﬁle with path Pm using the Jena Framework1 so that
the mapping deﬁnitions can be easily queried using SPARQL
(Line 1). Afterwards, the given XML ﬁle path PX is opened
or an empty XML ﬁle is created in case the path doesn’t exist
(Line 2).

All mapping deﬁnitions are retrieved using a SPARQL
query against the mapping model (Line 3). In Listing 1, only
one deﬁnition is shown, but there may be an arbitrary number
of deﬁnitions inside a mapping ﬁle. The following steps are
then executed for every mapping deﬁnition inside the mapping
ﬁle.

If a mapping deﬁnition’s source is given as a ﬁle, this
ﬁle is loaded as a so-called source model MS to also run

1https://jena.apache.org/

SPARQL queries against it. In case a SPARQL endpoint is
given, no further actions are required as the source model
can directly be queried (Line 5). The ol:query found
inside the current mapping deﬁnition is executed against the
current source model and the results are stored in R (Lines
6-7). Then, the ol:container is taken and any occurring
SPARQL variable inside the container expression is ﬁlled with
its corresponding value of the query results R. As there can
be multiple SPARQL results, this may lead to multiple XPath
container deﬁnitions C (Line 8). Every container XPath is
then executed against the output document which may result
in multiple container nodes NC being found (or created if they
do not yet exist) for every single container deﬁnition.

The ol:snippet needs to be added into each found
container node (Lines 10-16). To achieve that, eventually
occurring variables inside the snippet (parameterN ame and
parameterV alue in Listing 1) need to be resolved using the
current results R. This may result in multiple instantiations of
a snippet. Every instantiation is inserted into every container
node (Lines 12-14). After that, the changed container node
containing the snippets is updated or appended to the XML
document (Line 15). After all mapping deﬁnitions are exe-
cuted, the updated or created document is written to the given
path PX (Line 18).

Listing 2 shows the part of the XML output generated for
the ontology shown in Figure 2 and the mapping deﬁnition
given in Listing 1. In this case, there might be other parameters
already deﬁned, so an existing XML ﬁle was used. Further-
more, the structure of a parameter must be adhered to in order
for the XML to be accepted when importing it into the 3D
modeling software which was used.

<?xml v e r s i o n = ” 1 . 0 ” e n c o d i n g =” u t f −8”?>
<P a r a m W i t h V a l u e L i s t >
<p a r a m e t e r T y p e s >

. . .

</ p a r a m e t e r T y p e s >
<p a r a m e t e r s >

<ParamWithValue>

<name>l e n g t h a r m 1 </name>
<typeCode>mm</ typeCode>
<v a l u e >200 mm</ v a l u e >

</ ParamWithValue>
<ParamWithValue>

<name>l e n g t h a r m 2 </name>
<typeCode>mm</ typeCode>
<v a l u e >260 mm</ v a l u e >

</ ParamWithValue>
<!−− T h i r d p a r a m e t e r n o t

shown −−>

</ p a r a m e t e r s >
</ P a r a m W i t h V a l u e L i s t >

Listing 2. XML output of the example robot use case. The two parameters
(third not shown) have been created from information contained in the
ontology of Figure 2 by applying the mapping deﬁnition given in Listing 1

the
This exemplary evaluation example has shown that
proposed transformation works. A systematic transformation
from ontologies to XML as a data interchange format has been
achieved. The generated XML contains dynamic data from
an ontology in a structure speciﬁed by user-deﬁned mapping
deﬁnitions.

IV. SUMMARY & OUTLOOK
Current research in automated ontology transformations
only provides approaches with ﬁxed mapping rules for certain
use cases—e.g., a transformation of an OWL ontology into a
CAEX model [6]. Engineering tools typically do not allow for
a direct integration of semantically modeled information. Thus
there is a need for a generic transformation approach allowing
users to specify mapping deﬁnitions to transfer semantic
information into established data interchange formats with a
speciﬁc data model.

In this contribution, initial steps to achieve such a generic
mapping approach have been shown. A mapping language
allowing transformations from RDF models into XML together
with a corresponding mapping algorithm has been presented
with a simple engineering use case. Both the mapping lan-
guage and the mapping algorithm are published as open-source
and — together with additional documentation — are available
at https://github.com/hsu-aut/olif.

The approach presented in this contribution is generic with
it
regards to the mapping rules that can be deﬁned. But
is currently limited to only generating XML documents. In
our future work, we are going to extend the language and
algorithm to also allow for JSON and other exchange formats
to be generated from an ontology. Another important aspect
is a sound investigation of the expressivity of the mapping
language. In future research, we plan to ensure that any given
data structure in the target format can be created by using the
mapping approach. Additionally, while we have closely based
our research on the approach taken by RML, we currently
deﬁned a distinct mapping language. We will look into ways of
better aligning our works with the existing RML vocabulary.
And ﬁnally, we aim to conduct additional evaluations with
larger use cases.

REFERENCES

[1] T. Berners-Lee, J. Hendler, and O. Lassila, “The Semantic Web,” Scientiﬁc

American, vol. 284, no. 5, pp. 34–43, 2001.

[2] C. Hildebrandt, A. K¨ocher, C. Kustner, C.-M. Lopez-Enriquez, A. W.
Muller, B. Caesar, C. S. Gundlach, and A. Fay, “Ontology Building
for Cyber-Physical Systems: Application in the Manufacturing Domain,”
IEEE Transactions on Automation Science and Engineering, pp. 1–17,
2020.

[3] F. Ekaputra, M. Sabou, E. Serral Asensio, E. Kiesling, and S. Bifﬂ,
“Ontology-based data integration in multi-disciplinary engineering envi-
ronments: a review,” Open Journal of Information Systems, vol. 4, no. 1,
pp. 1–26, 2017.

[4] A. Harth, M. Janik, and S. Staab, “Semantic Web Architecture,” in
Handbook of Semantic Web Technologies, J. Domingue, D. Fensel, and
J. A. Hendler, Eds. Springer Berlin Heidelberg, 2011, pp. 43–75.
and S. Bohm,

“Konvertierung von OWL-
Planungsergebnissen nach CAEX,” in Automation 2010. D¨usseldorf:
VDI-Verlag, 2010, pp. 405–410.

[5] S. Runde, A. Fay,

[6] Y. Hua and B. Hein, “Interpreting OWL Complex Classes in Automa-
tionML based on Bidirectional Translation,” in Proceedings, 2019 24th
IEEE International Conference on Emerging Technologies and Factory
Automation (ETFA). Piscataway, NJ: IEEE, 2019, pp. 79–86.

[7] Michael Kay, “XSL Transformations

(XSLT) Version 3.0: W3C
Recommendation.” [Online]. Available: https://www.w3.org/TR/xslt-30/
[8] A. Dimou, M. Vander Sande, P. Colpaert, R. Verborgh, E. Mannens,
and R. van de Walle, “RML: A Generic Language for Integrated RDF
Mappings of Heterogeneous Data,” in Proceedings of the 7th Workshop
on Linked Data on the Web, ser. CEUR Workshop Proceedings, C. Bizer,
T. Heath, S. Auer, and T. Berners-Lee, Eds., vol. 1184, 2014.

