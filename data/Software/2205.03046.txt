2
2
0
2

y
a
M
6

]

M

I
.
h
p
-
o
r
t
s
a
[

1
v
6
4
0
3
0
.
5
0
2
2
:
v
i
X
r
a

MNRAS 000, 1‚Äì12 (2022)

Preprint 9 May 2022

Compiled using MNRAS LATEX style Ô¨Åle v3.0

Simulating high-time resolution radio-telescope observations

Rui Luo,1‚òÖ George Hobbs,1‚Ä† Suk Yee Yong,1 Andrew Zic,2,1 Lawrence Toomey,1 Shi Dai,3
Alex Dunning,1 Di Li,4,5 Tommy Marshman,2,1 Chen Wang,6 Pei Wang,4 Shuangqiang Wang7
and Songbo Zhang8

1CSIRO Space and Astronomy, Australia Telescope National Facility, PO Box 76, Epping, NSW 1710, Australia
2Department of Physics and Astronomy, and Research Centre in Astronomy, Astrophysics and Astrophotonics, Macquarie University, NSW 2109, Australia
3School of Science, Western Sydney University, Locked Bag 1797, Penrith South DC, NSW 2751, Australia
4National Astronomical Observatories, Chinese Academy of Sciences, A20 Datun Road, Chaoyang District, Beƒ≥ing 100101, China
5University of Chinese Academy of Sciences, Beƒ≥ing 100049, China
6CSIRO Data61, 13 Garden Street, Eveleigh, NSW 2015, Australia
7Xinjiang Astronomical Observatory, Chinese Academy of Sciences, 150 Science 1-Street, Urumqi 830011, China
8Purple Mountain Observatory, Chinese Academy of Sciences, Nanjing 210008, China

Accepted XXX. Received YYY; in original form ZZZ

ABSTRACT
We describe a new software package for simulating channelised, high-time resolution data
streams from radio telescopes. The software simulates data from the telescope and observing
system taking into account the observation strategy, receiver system and digitisation. The
signatures of pulsars, fast radio bursts and Ô¨Çare stars are modelled, including frequency-
dependent eÔ¨Äects such as scattering and scintillation. We also simulate more generic signals
using spline curves and images. Models of radio frequency interference include signals from
satellites, terrestrial transmitters and impulsive, broadband signals. The simulated signals can
also be injected into real data sets. Uses of this software include the production of machine
learning training data sets, development and testing of new algorithms to search for anomalous
patterns and to characterise processing pipelines.

Key words: software: simulations ‚Äì telescopes ‚Äì methods: data analysis ‚Äì transients: fast
radio bursts ‚Äì pulsars: general ‚Äì stars: Ô¨Çare

1

INTRODUCTION

Searches that are carried out with radio telescopes for astronomical
sources can often be divided into high-time and high-frequency res-
olution surveys. For the former the data streams are channelised with
relatively poor frequency resolution (typically megahertz channel
widths), but sampled with microsecond to millisecond time reso-
lution. Such surveys have discovered the majority of known pul-
sars (Hewish et al. 1968; Manchester et al. 2001) and fast radio
bursts (FRBs, Lorimer et al. 2007). High-frequency resolution sur-
veys typically have much higher frequency resolution (kHz channel
bandwidths are common), but usually only record a sample every
second, or so.

High-time resolution surveys are ongoing at many observato-
ries and new surveys are planned with the most sensitive radio tele-
scopes. Examples include the Commensal Radio Astronomy FAST
survey (CRAFTS, Li et al. 2018) carried by the Five-hundred-meter

‚òÖ E-mail: rui.luo@csiro.au (RL)
‚Ä† E-mail: george.hobbs@csiro.au (GH)

¬© 2022 The Authors

Aperture Spherical radio Telescope (FAST) and, within a year, sur-
veys will begin with a new cryogenically-cooled phased-array re-
ceiver at the Parkes ‚ÄúMurriyang‚Äù radio telescope (Dunning et al., in
prep.). In addition, wide-Ô¨Åeld, beam-formed observations are being
designed for the TRAnsients and PUlsars with MeerKAT (TRA-
PUM) survey (Chen et al. 2021).

Processing and archiving data from high-time resolution sur-
veys are challenging because of the massive data volumes. The
processing algorithms now must also deal with the worsening radio-
frequency-interference (RFI) environment. Many new surveys are
also designed to maximise telescope eÔ¨Éciency and therefore are
planned to carry out commensal spectral line and high-time reso-
lution surveys. Such simultaneity requires the development of new
observing and calibration strategies, including the use of a calibra-
tion noise source being switched throughout the observations (see,
e.g., Li et al. 2018).

High-time resolution surveys have historically led to serendip-
itous discoveries. Such discoveries include pulsars, and FRBs ‚Äì the
Ô¨Årst FRB was detected in the archival data from a pulsar survey
of the Small Magellanic Cloud (Lorimer et al. 2007). There may

 
 
 
 
 
 
2

R. Luo et al.

be other signals within the existing archival data sets (Zhang et al.
2020a) that have not yet been identiÔ¨Åed. We know that the signatures
of Ô¨Çare stars (and other transient signals) are likely to be present (Zic
et al. 2019; Osten & Bastian 2008), but have not yet been identi-
Ô¨Åed because the primary algorithms used are speciÔ¨Åc to pulsar- and
FRB- type signals. One of the biggest challenges facing the plan-
ning of the next generation of surveys is in determining how to Ô¨Ånd
the ‚Äúunknown unknowns‚Äù in massive data volumes. The Australian
Square Kilometre Array PathÔ¨Ånder (ASKAP) telescope has com-
menced wideÔ¨Åeld imaging surveys, such as the WideÔ¨Åeld ouTlier
Finder (WTF project), which is already Ô¨Ånding unexpected source
types (e.g., Norris et al. 2021). Similar searches for extraterrestrial
intelligence (SETI) are being carried out in high-time resolution
data sets (Lacki et al. 2021). Very recently, the Parkes Breakthrough
Listen observations detected a suspicious signal (‚Äòblc1‚Äô) at around
982 MHz towards Proxima Centauri (Smith et al. 2021), which
turned out to have terrestrial origin after detailed analysis (Sheikh
et al. 2021).

Many traditional machine learning (ML) algorithms rely on
training data sets of labelled events, which are not easily obtained
for unknown or rare signals. Numerous algorithms have been pro-
posed for anomaly detection, such as edge (Zhang et al. 2016) and
Out-of-Distribution (Yang et al. 2021) detection methods. Such al-
gorithms can be tested on existing data sets, but real observations
are complicated as they are aÔ¨Äected by instrumental issues and RFI
and the number of unexpected events within a given data set is
unknown and likely to be small.

To aid in the development and testing of new algorithms we
have developed a software package, simulateSearch, which can
simulate signals of interest (from known astronomical sources like
pulsars, to RFI and more generic signals of arbitrary form) and inject
those signals into actual or simulated observations. This code can
be used for numerous purposes including i) developing ML training
data sets, ii) determining the eÔ¨Äectiveness of diÔ¨Äerent algorithms
for diÔ¨Äerent source types, iii) producing data sets to allow pipelines
to be developed and tested, iv) determining optimal frequency bands
for selection for observatories aÔ¨Äected by strong RFI and v) testing
the completeness of processing pipelines.

The structure of this paper is organised as follows. First, we
provide an overview of the simulation software in Section 2. We
then show how the signals from diÔ¨Äerent sources can are modelled
(see Section 3). These signals can be injected into simulated data
sets of a speciÔ¨Åc telescope and survey (Section 4) and also into
archival data sets (Section 5). To conclude, we discuss the use of
our simulation software in Section 6.

2 OVERVIEW OF THE SIMULATION SOFTWARE

In this paper we do not provide detailed installation or usage in-
structions for the software. Instead, we describe the purpose of the
software and detail of the algorithms implemented. The software
and documentation can be obtained from https://bitbucket.
csiro.au/scm/psrsoft/simulatesearch.git. The input Ô¨Åles
used to produce the Ô¨Årst image in this paper are described in Ap-
pendix C.

The simulation software is divided into two parts. The Ô¨Årst
part produces a set of data Ô¨Åles that record the simulated signals
with high dynamic range. The second part combines those data Ô¨Åles
accounting for telescope pointing positions (i.e., some signals will
always be present, such as RFI detected in the far side lobes of
the telescope, whereas astronomical sources will only be seen at a

Figure 1. A simulated fast radio burst with dispersion measure of
300 cm‚àí3 pc. This is a mock Parkes multibeam system that is 1-bit sampled
with 96 frequency channels. The system noise and the FRB event were sim-
ulated using the commands simulateSystemNoise and simulateBurst
in simulateSearch, respectively.

speciÔ¨Åc pointing direction) and produces data Ô¨Åles that mimic the
output data products from a telescope observing system. We create
PSRFITS (Hotan et al. 2004) search mode data Ô¨Åles with 1, 2 or
8-bit quantisation and a single polarisation channel (total intensity).
The observed signal is simulated as being detected (i.e., not the
raw voltage data streams), channelised (into a speciÔ¨Åc number of
frequency channels) and sampled with typical sampling rates (ùúáùë† to
ms).

The output PSRFITS search mode data Ô¨Åles can be processed
by software packages for high-time resolution data processing, such
as pfits1 (Hobbs 2021), dspsr2 (van Straten & Bailes 2011) and
presto3(Ransom 2001). An example is shown in Figure 1 where
we have simulated a ‚Äúdispersed pulse‚Äù in a dynamic spectrum,
exhibiting the intensity of radio signal as a function of frequency
and time. This speciÔ¨Åc simulated data Ô¨Åle has been quantised using
a single bit and thus each time and frequency sample is either 0 or 1.
Such Ô¨Åles can be processed as if they were from actual observations.
Typically the data processing starts by de-dispersing the data sets
at a range of trial dispersion measures and then searching the de-
dispersed time series for impulsive or periodic signatures.

Splitting the simulation process into two parts allows the Ô¨Å-
nal data products to be produced for multiple telescope systems or
observing strategies. For instance, the same radiometer noise may
be included in all output data products with a variable-amplitude
simulated astronomical source. In another use-case, the same astro-
nomical signal may be present, but the user may wish to trial their
algorithm with diÔ¨Äerent levels of radiometer noise.

The format of the data Ô¨Åles containing the simulated signals
is relatively simple and described in Appendix A. Our software
contains various routines for simulating commonly-used signals,
but the user can also produce new simulated signals relatively easily
in Python, C or other languages. The simplest form of the simulated

1 https://bitbucket.csiro.au/projects/PSRSOFT/repos/pÔ¨Åts/browse
2 http://dspsr.sourceforge.net/
3 https://github.com/scottransom/presto

MNRAS 000, 1‚Äì12 (2022)

signal data Ô¨Åles is a binary representation of the signal for the entire
data span recorded as 32-bit Ô¨Çoating point values. Long duration
simulations with a large number of frequency channels can lead
to extremely large data Ô¨Åles. For a single FRB event, which may
only last for a millisecond in an observation lasting hours, storing
the source signal for the entire survey length is clearly unnecessary.
The software therefore provides methods to compress the source
signals (details are provided in Appendix A).

3 SIMULATING THE SOURCES

3.1 Radiometer noise

Radio telescope observations are aÔ¨Äected by radiometer noise. We
model the frequency-dependent system noise as being drawn from
a Gaussian distribution with amplitude deÔ¨Åned by the radiometer
equation:

ùëÜùúà,rms =

ùëásys
ùê∫dpfu‚àöÔ∏ÅùëÅp Œîùúà ùúè

(1)

where ùê∫dpfu is the telescope gain in degrees per Ô¨Çux unit (K/Jy),
ùëásys is the system temperature, ùúè the digital sampling time and
Œîùúà the receiver bandwidth. Throughout the simulation software we
assume that the signals and noise are represented in units of janskys.
High-time resolution data sets can be aÔ¨Äected by low-
frequency noise processes. Such noise can arise from gain varia-
tions, telescope-pointing jitter, spill-over variations, etc. Such noise
can impact on the detection of radio transients like FRBs (e.g.,
Zhang et al. 2021) and requires de-reddening procedures in pulsar
searches (e.g., Lazarus et al. 2015; Suresh et al. 2022). We provide
the ability to model red noise with power spectral density
ùëÜred = ùëÜ0 ùëì ùõº.
Here ùõº is the spectral index and ùëÜ0 the power spectral density at
1 Hz. Our code also allows for a cut-oÔ¨Ä frequency in the simulated
red noise (the modelled power spectral density below the cut-oÔ¨Ä
is zero) or a frequency at which the spectrum Ô¨Çattens (the power
spectral density below the Ô¨Çattening frequency equals the power at
that frequency). An example is shown in Figure 2 where red and
white noise has been simulated, the observing-frequency channels
summed to form a time series and then Fourier transformed.

(2)

3.2 Radio frequency interference

Radio frequency interference (RFI) is deÔ¨Åned here as unwanted
radio signals in the astronomical data sets (which may be self-
generated at the observatory or from external sources). RFI is ubiq-
uitous and dealing with RFI is a major challenge in current radio
astronomy. We can divide RFI into three categories: 1) impulsive
and wideband RFI, 2) narrowband and persistent RFI and 3) birdies
(which produce periodic signals across the band from, for instance,
the mains electricity supply). All these types of RFI can be simulated
using our software.

Impulsive, broadband RFI is simulated based on a distribution
of amplitudes and pulse widths detected at a speciÔ¨Åc observatory.
The events are randomly distributed in time through the simulation.
We used an analysis of the zero dispersion measure, impulsive RFI
detected in representative observations of the High Time Resolu-
tion Survey (HTRU; Keith et al. 2010) to determine the typical
amplitudes and widths of impulsive RFI detected at the Parkes ob-
servatory. Such events are shown as the narrow (only one or two
time-samples wide), vertical stripes in Figure 3.

MNRAS 000, 1‚Äì12 (2022)

Simulating high-time resolution observations

3

Figure 2. The non-dispersed time series of
the noise data (upper
panel), and the power spectrum of simulated radiometer noise and low-
frequency red noise (lower panel). The data has been simulated using
simulateSystemNoise. In the upper panel, the mean of simulated noise
is denoted as red curve and its standard deviation is shaded in blue. In the
lower panel, the spectral slope of red noise background is ùõº = ‚àí2 (red
dashed line), six sinusoidal tones have been injected at 1, 2, 5, 10, 50, 100
and 150 Hz using simulateRFI to represent ‚Äúbirdies‚Äù.

We can provide a simple simulation of the signals from trans-
mission towers by increasing the system noise signiÔ¨Åcantly in fre-
quency bands where there is a strong transmitter. Examples are
shown as the horizontal, relatively narrow-band features in Figure 3.
The detectability of any astronomical source (such as the Ô¨Çare star
simulated in this data set) in such bands will be signiÔ¨Åcantly reduced
(and often undetectable).

Most RFI is time dependent; either through intrinsic time vari-
ability or because the telescope pointing direction is not constant
with respect to the location of the interfering source. We do not
attempt a detailed simulation of all known types of time variable
RFI. For instance, mobile transmission towers and handsets, WiFi,
BlueTooth, aircraft navigational devices all produce strong signals
that are time variable. Our simulation code allows for relatively

020406080100120Time (Second)0.40.50.60.70.80.91.01.11.2Amplitude (Arbit. Unit)102101100101102103Frequency (Hz)108106104102100Power spectral density (Arbit. Unit)4

R. Luo et al.

Figure 3. Simulated data set that includes the signature of a Ô¨Çare star (relatively weak broadband drifting signal), impulsive RFI (vertical, narrow stripes),
satellite and terrestrial tower RFI (horizontal stripes with varied bandwidths) and a switching noise source (the dark/light vertical structure). The data set has
been sampled every 64ùúás with 512 frequency channels and 2-bit samples.

simple representations of such signals. One example is shown near
the centre of Figure 3 and represents a simpliÔ¨Åed representation of
the signals observed from a mobile transmission tower.

The Parkes ultra-wide-bandwidth receiver system (Hobbs et al.
2020) is aÔ¨Äected by RFI. Some of the most problematic are mobile
transmission towers that produce impulsive RFI that can be ex-
tremely bright for short durations. Analogue-to-digital converters
are close to being limited by the jitter noise of the sample clock (see
Tuthill et al., in prep.). This leads to power in one part of the digi-
tised band being ‚Äúsmeared‚Äù across the entire band. The Parkes data
sets are aÔ¨Äected by this issue and we are trialling various methods to
mitigate this eÔ¨Äect. In Figure 4 we show a simple simulation of 4G
mobile transmission, which is highly impulsive in small sub-bands.
We smear a tiny fraction (10‚àí8) of the signal strength across the
entire band, which produces a signal that is similar to our actual
observations in some sky directions.

Signals from satellites are a major RFI source at all observa-
tories. The positions of individual satellites can be predicted using
two line element (TLE) sets. However, for many of the satellites

(such as the global positioning satellite systems), there are a large
number of satellites above the horizon at a given time and the signal
from each satellite is detected in the far side lobes of the telescope
beam. To simulate such sources we assume that each satellite emits
multiple signals each of which follows a sinc2-frequency-dependent
function:

ùëÉ( ùëì ) = ùê¥

(cid:20) sin[ùëé( ùëì ‚àí ùëì0)]
ùëé( ùëì ‚àí ùëì0)

(cid:21) 2

(3)

where ùëì is the observing frequency and ùëì0 is one of the emission
frequencies from the satellite. Instead of attempting to model the
structure of the far side-lobes of any particular telescope, we assume
that the motion of the source through the far side-lobes of the tele-
scope will introduce a sinusoidal variation in the signal amplitude:

ùê¥ = ùê¥(cid:48) + ùê¥(cid:48) sin(2ùúãùë°/ùëÉ + ùúô)
where ùê¥(cid:48) is the signal amplitude, ùëÉ is the variability timescale and
ùúô is the signal phase. We show an example (close to 1500 MHz) in
Figure 3 of the RFI caused by the global positioning satellites.

(4)

MNRAS 000, 1‚Äì12 (2022)

Simulating high-time resolution observations

5

Figure 4. Simulation of the Long Term Evolution Network (4G LTE) and
how impulsive RFI speciÔ¨Åc to one part of the observing band (around 1290
MHz) can aÔ¨Äect the entire digitised data set (producing the vertical stripes).
This image was made using simulateLTE and createSearchFile.

To simulate tones, we inject a sinusoidal signal (or, if requested,
a rectiÔ¨Åed sinusoidal signal) with a given amplitude, phase and fre-
quency. Such signals are typically only apparent after a periodicity
search has been carried out on the Ô¨Ånal data product and exam-
ples of common signals are shown in Figure 3. In contrast some
recent (or planned) surveys include strong periodic signals that are
purposely injected into the data stream. This is because commen-
sal high-time resolution and high frequency resolution surveys are
now being carried out in order to maximise telescope eÔ¨Éciency by
searching for pulsars, FRBs and spectral lines simultaneously (for
instance, the CRAFTS survey being carried out with FAST; Li et al.
2018). Spectral line surveys traditionally make use of a switched
noise source throughout their observations to track and account for
telescope gain variations and for amplitude calibration. The simula-
tion code can therefore include such a broad-band, switching noise
source and we provide an example in Figure 3.

3.3 Transient astronomical signals

We know that high-time resolution data sets will include individ-
ual bright pulses from pulsars, fast radio bursts (FRBs) and related
sources such as rotating radio transients (RRATs). Such transient
events are parameterised using an event time, pulse amplitude, pulse
width and dispersion measure (DM). The pulse shape can be sim-
ple (modelled using a single Gaussian or rectangular proÔ¨Åle) or
deÔ¨Åned using multiple Gaussian components. We can also build
band-limited (Kumar et al. 2021) and downward-drifting structure
(Hessels et al. 2019) in the burst spectrum. Examples are shown in
Figure 5 for bursts with diÔ¨Äerent proÔ¨Åle and frequency structure.

The aim of many high-time resolution surveys is to Ô¨Ånd fast
transients (such as pulsars and FRBs). The use of low-bit quantisa-
tion in the output data products has required level setting procedures
to account for longer term system noise variations (more details are
provided in Section 4.2). This has ruled out the chance of Ô¨Ånding
slower transient signals. However, several classes of stars across
the Hertzprung-Russell Diagram, including the Sun, produce in-

MNRAS 000, 1‚Äì12 (2022)

Figure 5. Examples of individual burst events. The bottom panel shows the
simulated data set. The bursts all have a DM of 200 cm‚àí3 pc. The central
panel shows the de-dispersed data sets and the top panel the frequency-
summed time series. The events were simulated using simulateBurst and
represent from left to right: (1) an event with rectangular edges, (2) a burst
with a Gaussian proÔ¨Åle, (3) a multi-component event, (4) an event with
band-limited spectrum and (5) a burst with downward frequency drift.

tense bursts of non-thermal radio emission, powered by various
forms of magnetic activity (e.g., G√ºdel 2002). These include auro-
ral activity (Zarka 1998; Hallinan et al. 2015; Trigilio et al. 2011),
coronal activity, driven by Ô¨Çaring, space weather, and other dy-
namic processes within stellar atmospheres and astropheres (e.g.,
Bastian 1990; Pick & Vilmer 2008; Benz 2017); and the interaction
of magnetic Ô¨Åelds between two components in close binary systems
such as RS Canum Venaticorum systems (Drake et al. 1989; Toet
et al. 2021). Regardless of the driving mechanism, active stars can
produce radio emission variable on timescales from milliseconds
(e.g., Osten & Bastian 2008) to days (Slee et al. 2003), with com-
plex time-frequency structure. The ability to capture this variability
across such a broad range of timescales remains under-explored. As
such signals are likely to exist in our current archival data sets, yet
the pulsar-based algorithms developed so far are unlikely to detect
them, we have included the ability to simulate likely Ô¨Çare-star signa-
tures. We parameterise such events as relatively broad-band sources
covering a speciÔ¨Åed bandwidth, where individual components drift
in time and frequency following a quadratic polynomial (allowing
both linear and quadratic drifts). An example is shown in Figure 3.

3.4 Periodic pulses

Pulsars produce a sequence of periodic pulses. Apart from the
brightest known pulsars, the majority of these pulses are so weak
that they cannot individually be detected. Instead the search-mode
data streams are de-dispersed, averaged across frequency channels
and then Fourier transformed to search for periodic signatures within
the data.

We simulate pulsars using a tempo2-style predictor (Hobbs
et al. 2006) that can be used to determine the arrival times of pulses at
a speciÔ¨Åc observing frequency and speciÔ¨Åc observatory. The use of
predictors allows highly relativistic binary systems to be modelled.
For instance, in Figure 6 we compare an actual observation with the

6

R. Luo et al.

simulation for PSR J0737‚àí3039A, which was discovered by Parkes
high-latitude multibeam pulsar survey (Burgay et al. 2003) and is
a highly relativistic binary system (Kramer et al. 2021). The real
data set was obtained from the CSIRO Data Access Portal4 (DAP,
Hobbs et al. 2011) and we folded the data at a nominal rotational
period (upper panel in Figure 6). Our simulated result (lower panel)
is based on a tempo2 predictor from an up-to-date timing ephemeris
for this pulsar.

The pulse proÔ¨Åle can be modelled using multiple Gaussian
components. The resulting pulse shape is subsequently rescaled
to ensure the area represents the mean Ô¨Çux density of the pulsar.
Each individual pulse from the pulsar is simulated. We therefore
can vary the intensity of each individual pulse. As the intensities of
individual pulses are drawn from various distributions (as described
for terrestrial use by Dawson et al. 2022), we allow the user to
provide their own distribution that is then used within the simulation.

3.5 The interstellar medium

The observed astronomical signals have propagated through the
interstellar medium (ISM). The time delay caused by dispersion for
a pulse measured at two diÔ¨Äerent frequencies of radio waves ( ùúà1
and ùúà2) is given by:

Œîùë° = 4.15 ms

(cid:18) DM
1 cm‚àí3 pc

(cid:19) (cid:104)(cid:16)

(cid:17) ùõº

ùúà1
1 GHz

‚àí

(cid:16)

ùúà2
1 GHz

(cid:17) ùõº(cid:105)

.

(5)

The dispersion measure (DM) is deÔ¨Åned as the integral of electron
density along the light of sight,

‚à´

DM =

ùëõe dùëô .

(6)

Typically ùõº = ‚àí2 for cold, diÔ¨Äuse, ionised gas. Dispersion is sim-
ulated in our software, where ùõº and DM can be deÔ¨Åned by the
user. Note that negative dispersion measures are permissible, as
they may be produced by astronomical signals with intrinsically
negative drift.

The signals are also aÔ¨Äected by scintillation. Various models
for scintillation are possible and our simulation software allows
the user to develop their own models of scintillation as required.
Here we consider only diÔ¨Äractive scintillation in the case of strong
scattering. For given scintillation time-scale and bandwidth, we
simulate a dynamic spectrum following procedures described in Dai
et al. (2016). In the dynamic spectrum the Ô¨Çux density as a function
of time and frequency is ùëÜdyn (ùë°, ùúà). We determine this from a 2-
dimensional auto-covariance function deÔ¨Åned using a user-provided
scintillation timescale (ùúè) and bandwidth (Œîùúà) (Dai et al. 2016).

We note that FRB signals often have frequency-dependent am-
plitude Ô¨Çuctuations that cannot be modelled through scintillation.
We therefore provide options for the user to specify any frequency
evolution of the pulse events. An example of a FRB that is con-
strained to a small frequency range is shown as the event of example
(4) in Figure 5.

Pulse events also undergo scattering in the interstellar medium.
We therefore provide the ability to convolve a pulse signal with an
exponential function with a time scale deÔ¨Åned by a speciÔ¨Åed DM.
We use the pulse-broadening function in Bhat et al. (2003) to model
the scattering eÔ¨Äect on integrated pulse proÔ¨Åle,

ùëî(ùë°) =

exp(‚àíùë°/ùúèd)ùëà (ùë°)
ùúèd

,

4 https://data.csiro.au/collections

(7)

Figure 6. The real (top panel) and simulated (bottom panel) folded
data for the highly relativistic pulsar, PSR J0737-3039A. In each panel
the sub-Ô¨Ågures contain the folded pulse proÔ¨Åle over the entire observa-
tion duration (top sub-panel) and the bottom sub-panel shows the pro-
Ô¨Åle as a function of time throughout
the observation. The real data
Ô¨Åle PH0042_004B1.sf was obtained from the CSIRO DAP via https:
//doi.org/10.4225/08/598c2d9103f0c. The data were folded and plot-
ted using dspsr and psrchive routines. The simulation was carried out using
simulateComplexPulsar and createSearchFile.

where ùúèd is the pulse broadening time and ùëà (ùë°) is the unit step func-
tion. To demonstrate the scintillation and scattering simulations we
model a pulsar with a dispersion measure of 600 cm‚àí3 pc, a diÔ¨Ärac-
tive bandwidth of 50 MHz and diÔ¨Äractive timescale of 1 minute (we
note that these are not necessarily independent parameters for actual
pulsars, but choose these parameters here to allow us to demonstrate
multiple ISM-related eÔ¨Äects in a single Ô¨Ågure). The resulting proÔ¨Åle
is shown in Figure 7.

MNRAS 000, 1‚Äì12 (2022)

Simulating high-time resolution observations

7

Figure 7. Simulation on the propagation eÔ¨Äects of pulsar observation. A
dynamic spectrum was simulated. We also added in the eÔ¨Äect of scattering.
The top panel shows the time- and frequency-averaged pulse proÔ¨Åle. The
central panel shows the frequency structure after averaging in time and the
bottom panel shows the time structure after averaging in frequency. Note
this is to provide an example of these eÔ¨Äects and we have not tried to link
the scattering and scintillation properties of a real pulsar.

3.6 The unknown

One aim of our simulation software is to provide tools to simu-
late unexpected, or unknown, sources. We simulate such ‚Äúunknown
unknown‚Äù signals in the following three ways: (1) generalising the
burst event simulations, (2) using spline curves and (3) generic
images 5.

We generalise the burst events by allowing positive or negative
dispersion measures and allowing any choice of ùõº in Equation (5).
We also allow any user-deÔ¨Åned frequency evolution of the burst
intensity.

The high-time resolution data streams simulated here typically
have relatively low frequency resolution. Therefore any unexpected
source signals that will be detected in such data sets are likely to
be relatively short in duration, but cover a wide band. We therefore
allow for arbitrary broadband signatures to be simulated using cubic
splines, which are deÔ¨Åned by speciÔ¨Åc time and frequency control
points.

We can embed information into the data set by producing an
image (which could be obtained from the large number of available
online datasets used for training ML algorithms) and using the
pixels in that image to represent the time-frequency information in
the simulated data set.

We provide an example of these three types of ‚Äúunknown un-
known‚Äù signals in Figure 8. This contains, from left to right, an
arbitrary cubic spline event, a cartoon image of a cat and an FRB-
like event with a negative dispersion measure.

5 In 1974, the active SETI used the Arecibo radio telescope to transmit
a message towards the globular cluster M13. This message consisted of
multiple generic images digitised in 1679 bits (Atri et al. 2011).

MNRAS 000, 1‚Äì12 (2022)

Figure 8. A simulation of unexpected signals. We use simulateGeneric
and simulateBurst to inject into a 2-bit data stream an arbitrary curve
deÔ¨Åned using a cubic spline (left), an image of a cat (centre) and an FRB-
like signal with a negative dispersion measure (right).

4 SIMULATING THE TELESCOPE OBSERVING

SYSTEM

In order to simulate the output data product from a high-time resolu-
tion radio survey we need to model the telescope pointing direction,
the receiver system and, for each beam of the receiver, the signal
path from the receiver to the astronomy data processor (a descrip-
tion of the signal path for a modern observing system is given by
Hobbs et al. 2020).

4.1 The receiver system

The simulated source signals are either only present in speciÔ¨Åc
sky directions (diÔ¨Äerent pulsars are at diÔ¨Äerent sky coordinates)
or are always present (for instance, radiometer noise). In a multi-
beam system, each receiver beam can be modelled independently
and the sky position of that beam can be deÔ¨Åned as a function
of time (allowing for simulations of scanning surveys or tracking
observations of a speciÔ¨Åc sky direction). The beam pattern on the
sky is given by the telescope diameter and observing frequency and
assumed to follow:

ùë† =

(cid:21) 2

(cid:20) ùë†ùëñùëõ(ùúÉ)
ùúÉ

(8)

where ùúÉ = 1.22ùúÜ/ùê∑, ùúÜ is the observing wavelength and ùê∑ the tele-
scope diameter. As an example, we show in Figure 9, a simulation
of the detection of the Ô¨Årst FRB (the ‚ÄúLorimer burst‚Äù). The left
panel shows the actual data from the Parkes telescope (Lorimer
et al. 2007) and the right panel shows our simulation. The event is
seen primarily in Beam 6, but is also present in other beams (more
detectable at lower frequencies where the beam is wider). Note that
we model narrow-band interference as being detectable in all of the
beams.

Our simulation software can also model a drift-scan survey in
which the telescope is held Ô¨Åxed and astronomical sources will drift
through a beam. In Figure 10 we show how a pulsar will be detected
in such a survey. We have assumed here a sensitive, large telescope

8

R. Luo et al.

Figure 9. Multibeam view of FRB 010724 (the ‚ÄúLorimer Burst‚Äù) from the real (left) and simulated data (right). The real data Ô¨Åles SMC021_008*1.sf were
obtained from https://doi.org/10.4225/08/5819628e4fed9. Each sub-panel represents time (x-axis) and frequency (y-axis) for each of the 13 beams
that were simultaneously recorded, note that the frequencies range from 1231.5 MHz (top) to 1516.5 MHz (bottom) in the plot of each beam. The FRB is mostly
clearly detected in Beam 6, but can also be seen in other adjacent beams. The horizontal lines are the signatures of RFI from point-to-point microwave links.

ple levels, which may change through an observation. The levels can
be pre-deÔ¨Åned (e.g., any time sample above zero is set to 1 and any
signal below to 0 for 1-bit data), or user-deÔ¨Åned. It is also possible
to model automatic level-setting procedures. For instance, a running
mean for each frequency channel (of speciÔ¨Åed number of samples)
can be used to deÔ¨Åne the levels. This produces the observed change
in the noise properties of the Lorimer burst detection after the event
(in Figure 9) and was used in the Parkes multibeam surveys that
used an analogue Ô¨Ålterbank system (e.g,. Manchester et al. 2001).
The levels can also be set from the Ô¨Årst samples and then held Ô¨Åxed
for the remainder of the observation. This is similar to the level
setting used in the HTRU (Keith et al. 2010) and Survey for Pulsars
and Extragalactic Radio Bursts (SUPERB; Keane et al. 2018) at the
Parkes radio telescope.

Note that with low-bit digitisation it is common for a bright
signal to saturate the system. This is shown in Figure 10 where the
pulses being detected by the simulated primary beam are so strong
that the time series saturates.

5 INJECTING SIGNALS INTO ACTUAL OBSERVATIONS

Injecting simulated signals into actual pre-recorded data sets is often
used to investigate the eÔ¨Äectiveness of a given processing pipeline
(e.g., Gupta et al. 2021 and Li et al. 2021). The challenge is that
the recorded data are already quantised and so the injection must
account for the expected survey sensitivity and the quantisation
process.

We assume Gaussian radiometer noise and that we know the
frequency-dependent system temperature and telescope gain corre-
sponding to the recorded data set. We then determine the probability
that a source signal of speciÔ¨Åed amplitude will change the recorded
bit. For instance, as all signals have positive amplitude we note that
a recorded 1 (in 1-bit data) will never become a 0. However, there
is a chance that a recorded 0 will become a 1. In 2-bit data this
becomes more challenging as we need to determine the probability
that a recorded 0 remains as a 0 or becomes a 1, 2 or 3 (and similarly
for other recorded values). The analytic results of these probability
determinations are described in Appendix B.

To demonstrate this method we inject a fake FRB in an archival

MNRAS 000, 1‚Äì12 (2022)

Figure 10. A representative pulse train after de-dispersion. The pulsar is
simulated with a period of 0.2 s. We assume a large-diameter telescope like
FAST observed this pulsar in a drift-scan mode. The data for this Ô¨Ågure was
simulated using simulateComplexPsr.

and show the pulsar pulses being detected in the side lobes as well
as in the primary telescope beam.

4.2 The astronomy signal processor

The astronomy signal processor processes the incoming data
streams and produces the Ô¨Ånal data products. Typically this in-
volves channelising the data streams. Dispersion smearing within
a frequency channel is modelled by Ô¨Årst simulating more channels
than required and then averaging those channels to the requested
output channelisation. If a known pulsar is being observed then the
data may Ô¨Årst be coherently de-dispersed at the known DM of the
pulsar and hence, in this case, there will be no channel-dependent
dispersion smearing.

The data volumes can be enormous and so the output data
samples are typically written using only 1-, 2- or 8-bit quantisation.
Low-bit quantisation requires knowledge of the typical digital sam-

Simulating high-time resolution observations

9

known properties of the signals, how diÔ¨Äerent telescope observing
systems can modify those signals (such as level setting procedures)
and how those signals will appear in the local RFI environment.
Machine learning methods have a potential to learn such knowledge
from the generated data and avoid learning spurious features from
the real data. However, we note that training a machine learning
model entirely on simulated data may lead to over-Ô¨Åtting as there
always be diÔ¨Äerences between the simulated and the real data.

For some algorithm comparisons it is necessary to restrict the
number of events in given blocks of time. For instance, the user
may require that a given block of time has either 0 or 1 events and
that no events should overlap (i.e., we should not have two pulses
with diÔ¨Äerent DMs overlapping each other). Methods to constrain
the event times in order to ensure this are available. For instance,
the user can request that the FRB is injected at a random time that
is constrained to be between two deÔ¨Åned time intervals. The event
label stored in the data Ô¨Åle provides the exact time of the event. Even
though it is physically unrealistic we also provide an option that, if
used, ensures level setting procedures (such as the recovery from a
bright FRB event) does not aÔ¨Äect any data in the adjacent block of
data.

This simulation code can also be used to benchmark pipelines
for new surveys. For instance, the simulation code has been used to
simulate an expected data set from the Parkes cryogenically cooled
phased array feed. This involved simulating 76 beams and 2048
channels for each data stream with 2-bit digitisation. The output
data volume was 646 GB of data in total for an observation of
1000 seconds. We made use of these data streams to benchmark
diÔ¨Äerent processing algorithms and to conÔ¨Årm that the infrastructure
was in place to record, transfer, process and archive such massive
data volumes. The simulation software has been divided to allow
easy parallelisation of tasks. For instance, diÔ¨Äerent processors can
process diÔ¨Äerent telescope beams, or one processor could simulate
radiometer noise, whereas another processor simulates expected
FRB events.

An earlier version of this simulation software was used by
Li et al. (2021) who injected fast radio burst signals into FAST
observations in order to determine the sensitivity of their survey and
the completeness factor for their pipeline. The simulated PSRFITS
Ô¨Åles are in the same format as the data from the telescope and so
any pipeline that has been developed for actual data sets can easily
be run and tested on the simulated data sets.

It is impossible to predict every possible signal that may be
detectable and some source types (RFI in particular) are complex
and more detailed simulations could be developed. The software is
developed so that new simulated signals can easily be produced. We
will also continue to develop the software that produces the output
data products. In the future it is likely that more use will be made
of calibrated data streams with polarisation information. Currently
we assume the data sets represent the total intensity (Stokes I), but
plan to update the code to enable the simulation of all four Stokes
parameters.

How realistic could we make the simulations? For a given, im-
pulsive event observed in real data (such as a FRB) it is likely that
a realistic simulation of that event (noting its frequency and time
structure) and the noise properties of the underlying noise could
be made. The primary challenge is in modelling the longer-term
system variations, such as changes in the background noise caused
by spill-over, long-term instrumental gain variations, or structural
deformation of the telescope at diÔ¨Äerent pointing directions. A sim-
ulation that includes a detailed model of the telescope structure and
its surroundings would require that the electromagnetic waves and

Figure 11. An injected single pulse event (DM = 30 cm‚àí3 pc) into real obser-
vations from the Parkes SUPERB survey (note that in this survey the observ-
ing frequency decreased with increasing channel number). The narrow-band
and the impulsive RFI is real and present in the original data set. The high-
est frequencies have signiÔ¨Åcantly increased system temperature to model a
hardware Ô¨Ålter used to remove strong satellite signals. The simulateBurst
and injectSearchFile utilities were used to implement the injection. The
original data were obtained from Ô¨Åle bpsr141002_144138_beam01.sf from
https://doi.org/10.4225/08/57EE7E6507372.

data Ô¨Åle from the SUPERB survey. The archived data Ô¨Åle has been
2-bit sampled. We assume that the system temperature is 26 K for
the majority of the band, but increases signiÔ¨Åcantly at the highest
frequencies. This increase is caused by a Ô¨Ålter that was used to
mitigate the eÔ¨Äect of satellites emitting in that part of the band
(e.g., Keane et al. 2018). We also note satellite interference around
1240 MHz. We also increase the expected system temperature in
those bands. We assume that the telescope gain, ùê∫ = 0.7 K/Jy. In
Figure 11 we show the data set after the FRB (with a peak amplitude
of 5 Jy) has been injected.

6 DISCUSSION AND CONCLUSION

We expect that there will be many uses of the simulation software
described here. For instance, the software can be used to compare the
eÔ¨Äectiveness of algorithms developed to Ô¨Ånd speciÔ¨Åc astronomical
signals. We may wish to know which is the most eÔ¨Äective algorithm
for detecting FRBs. Such events are rare and so often such compar-
isons cannot be made using actual survey data sets. Instead we can
inject simulated FRBs into actual (or simulated) data sets. We then
need to determine whether any signals identiÔ¨Åed by the algorithms
were injected, or are false positives. The simulation software can
add event labels into the output PSRFITS Ô¨Åles. The event labels
contain information such as the type, properties and time of each
event.

Owing to labelling, the simulator can be used to generate data
for machine learning model training. Machine learning is increas-
ingly used in radio astronomy to detect high-time resolution signals
like pulsars (Zhu et al. 2014; Morello et al. 2014) and FRBs (Zhang
et al. 2018, 2020b). Simulated data addresses data scarcity problems
(such as accessibility and parameterisation) that occur when using
real signals. The simulator also provides the means to represent the

MNRAS 000, 1‚Äì12 (2022)

10

R. Luo et al.

measured voltages (for two polarisation channels) are simulated,
in contrast to the simulations here of detected, channelised and
quantised, single polarisation data streams. However, even with the
existing simulation and the ability to inject simulated data sets in
existing data sets, thought must be given to malicious use whereby
a user injects a signal of interest into an actual observation and then
claims it to be a real detection. A similar scenario would be an
injection made for non-malicious purposes, but a subsequent user
obtaining that data set without knowing an injection had been made.
The LIGO/Virgo Collaboration use blind injections of fake
gravitational wave (GW) signals to test the data analyses from mul-
tiple independent working groups. All the GW detections are veri-
Ô¨Åed after comparison with blind injected signals, including the Ô¨Årst
black hole-black hole event GW 150924 (Abbott et al. 2016). How-
ever, after their Ô¨Årst discovery it was essential for the LIGO/Virgo
team to ensure that their signal was not a malicious injection. Ra-
dio astronomy archives, such as a Parkes-telescope pulsar archive
(Hobbs et al. 2011), record a check-sum along with each observa-
tion to ensure that any modiÔ¨Åcation of the raw data after archiving
can easily be identiÔ¨Åed.

In this paper we have described the software package. We are
now using this software to make a data challenge that will contain
injected signals into both real and simulated data sets. We will use
those data to develop algorithms that can be used both to Ô¨Ånd the
‚Äúknown unknowns‚Äù such as pulsars and FRBs, but also to Ô¨Ånd the
‚Äúunknown unknowns‚Äù in our massive data volumes.

ACKNOWLEDGEMENTS

We make use of archival data obtained from the Parkes radio tele-
scope. The Parkes radio telescope is part of the Australia Tele-
scope National Facility (https://ror.org/05qajvd42) which is
funded by the Australian Government for operation as a National
Facility managed by CSIRO. We acknowledge the Wiradjuri people
as the traditional owners of the Observatory site. This paper includes
archived data obtained through the Parkes Pulsar Data archive on
the CSIRO Data Access Portal (http://data.csiro.au). We thank Phil
Edwards for reading and commenting on the manuscript. We also
particularly acknowledge Emil Lenc for providing us the 1-bit data
of the cat image (96 √ó 96 pixels) used in this paper.

DATA AVAILABILITY

the data sets described in this paper were either sim-
All
ulated through the simulateSearch software package that
is
available from https://bitbucket.csiro.au/scm/psrsoft/
simulatesearch.git or from publicly available Parkes data sets
that can be downloaded from https://data.csiro.au. Links to
the exact observations used here are provided in the Figure captions.

Dai S., Johnston S., Bell M. E., Coles W. A., Hobbs G., Ekers R. D., Lenc

E., 2016, MNRAS, 462, 3115

Dawson J. R., et al., 2022, Astronomy and Computing, 38, 100549
Drake S. A., Simon T., Linsky J. L., 1989, ApJS, 71, 905
G√ºdel M., 2002, ARA&A, 40, 217
Gupta V., et al., 2021, MNRAS, 501, 2316
Hallinan G., et al., 2015, Nature, 523, 568
Hessels J. W. T., et al., 2019, ApJ, 876, L23
Hewish A., Bell S. J., Pilkington J. D. H., Scott P. F., Collins R. A., 1968,

Nature, 217, 709

Hobbs G., 2021, pÔ¨Åts: PSRFITS-format data Ô¨Åle processor (ascl:2104.013)
Hobbs G. B., Edwards R. T., Manchester R. N., 2006, MNRAS, 369, 655
Hobbs G., et al., 2011, Publ. Astron. Soc. Australia, 28, 202
Hobbs G., et al., 2020, Publ. Astron. Soc. Australia, 37, e012
Hotan A. W., van Straten W., Manchester R. N., 2004, Publ. Astron. Soc.

Australia, 21, 302

Jenet F. A., Anderson S. B., 1998, PASP, 110, 1467
Keane E. F., et al., 2018, MNRAS, 473, 116
Keith M. J., et al., 2010, MNRAS, 409, 619
Kouwenhoven M. L. A., Vo√ªte J. L. L., 2001, A&A, 378, 700
Kramer M., et al., 2021, Physical Review X, 11, 041050
Kumar P., et al., 2021, MNRAS, 500, 2525
Lacki B. C., et al., 2021, ApJS, 257, 42
Lazarus P., et al., 2015, ApJ, 812, 81
Li D., et al., 2018, IEEE Microwave Magazine, 19, 112
Li D., et al., 2021, Nature, 598, 267
Lorimer D. R., Bailes M., McLaughlin M. A., Narkevic D. J., Crawford F.,

2007, Science, 318, 777

Manchester R. N., et al., 2001, MNRAS, 328, 17
Morello V., Barr E. D., Bailes M., Flynn C. M., Keane E. F., van Straten W.,

2014, MNRAS, 443, 1651

Norris R. P., et al., 2021, Publ. Astron. Soc. Australia, 38, e003
Osten R. A., Bastian T. S., 2008, ApJ, 674, 1078
Pick M., Vilmer N., 2008, A&ARv, 16, 1
Ransom S. M., 2001, PhD thesis, Harvard University
Sheikh S. Z., et al., 2021, Nature Astronomy, 5, 1153
Slee O. B., Willes A. J., Robinson R. D., 2003, Publ. Astron. Soc. Australia,

20, 257

Smith S., et al., 2021, Nature Astronomy, 5, 1148
Suresh A., et al., 2022, arXiv e-prints, p. arXiv:2203.00036
Toet S. E. B., Vedantham H. K., Callingham J. R., Veken K. C., Shimwell
T. W., Zarka P., R√∂ttgering H. J. A., Drabent A., 2021, A&A, 654, A21
Trigilio C., Leto P., Umana G., Buemi C. S., Leone F., 2011, ApJ, 739, L10
Yang J., Zhou K., Li Y., Liu Z., 2021, arXiv e-prints, p. arXiv:2110.11334
Zarka P., 1998, J. Geophys. Res., 103, 20159
Zhang H., Kiranyaz S., Gabbouj M., 2016,

arXiv e-prints, p.

arXiv:1606.06447

Zhang Y. G., Gajjar V., Foster G., Siemion A., Cordes J., Law C., Wang Y.,

2018, ApJ, 866, 149

Zhang S. B., et al., 2020a, ApJS, 249, 14
Zhang C., et al., 2020b, A&A, 642, A26
Zhang C. F., et al., 2021, MNRAS, 503, 5223
Zhu W. W., et al., 2014, ApJ, 781, 117
Zic A., et al., 2019, MNRAS, 488, 559
van Straten W., Bailes M., 2011, Publ. Astron. Soc. Australia, 28, 1

REFERENCES

Abbott B. P., et al., 2016, Phys. Rev. Lett., 116, 061102
Atri D., DeMarines J., Haqq-Misra J., 2011, Space Policy, 27, 165
Bastian T. S., 1990, Sol. Phys., 130, 265
Benz A. O., 2017, Living Reviews in Solar Physics, 14, 2
Bhat N. D. R., Cordes J. M., Chatterjee S., 2003, ApJ, 584, 782
Burgay M., et al., 2003, Nature, 426, 531
Chen W., Barr E., Karuppusamy R., Kramer M., Stappers B., 2021, Journal

of Astronomical Instrumentation, 10, 2150013

APPENDIX A: THE BINARY DATA FILE FORMAT

The simulation code produces a set of binary Ô¨Åles representing
the signals being simulated. Those Ô¨Åles then get combined and
quantised into the Ô¨Ånal PSRFITS-format Ô¨Åle.

The binary Ô¨Åles contain header information followed by the
raw data stream, which represents each frequency channel for each
time sample as a 32-bit Ô¨Çoating point value. The header is stored as
follows:

MNRAS 000, 1‚Äì12 (2022)

‚Ä¢ format number stored in 64 characters. The current header
versions are ‚ÄúFORMAT 1‚Äù, ‚ÄúFORMAT 1.1‚Äù, ‚ÄúFORMAT 1.2‚Äù and
‚ÄúFORMAT 2.1‚Äù. Here we describe FORMAT 1.2.

‚Ä¢ data set name (128 characters)
‚Ä¢ Start time (t0; seconds) (32-bit Ô¨Çoat)
‚Ä¢ End time (t1; seconds) (32-bit Ô¨Çoat)
‚Ä¢ Sampling time (seconds) (32-bit Ô¨Çoat)
‚Ä¢ Frequency of Ô¨Årst channel (MHz) (32-bit Ô¨Çoat)
‚Ä¢ Frequency of last channel (MHz) (32-bit Ô¨Çoat)
‚Ä¢ Number of channels (integer)
‚Ä¢ Positional information type (integer)

If the positional information type is 1 then we next record:

‚Ä¢ Source right ascension (radians) (32-bit Ô¨Çoat)
‚Ä¢ Source declination (radians) (32-bit Ô¨Çoat)

otherwise a Ô¨Ålename containing positional information is provided
as 128 characters. The header then contains:

‚Ä¢ Flag indicated use of angles (1 or 0) as single byte character
‚Ä¢ Initial random number seed (long integer)
‚Ä¢ Flag indicating the existence of labels (1 or 0) as integer

If event labels are present in the data set then the header information
contains the number of event labels (long integer) and then for each
event:

‚Ä¢ Type of event (32 characters)
‚Ä¢ Properties of event (128 characters)
‚Ä¢ Frequency frequency for time (MHz) (32-bit Ô¨Çoat)
‚Ä¢ Flag indicated how the time is stored (integer)
‚Ä¢ Dispersion measure of event (32-bit Ô¨Çoat)
‚Ä¢ Start time of event (seconds) (32-bit Ô¨Çoat)
‚Ä¢ End time of event (seconds) (32-bit Ô¨Çoat)
‚Ä¢ Flag indicating how the frequency information is stored (inte-

ger)

‚Ä¢ Initial frequency (MHz) of event (32-bit Ô¨Çoat)
‚Ä¢ Final frequency (MHz) of event (32-bit Ô¨Çoat)
‚Ä¢ Amplitude of event (32-bit Ô¨Çoat)

It is possible to write out individual samples for the represen-
tation of radiometer noise, but such a data set cannot be compressed
(as it consists of noise), but can simply be described by a small
number of Gaussian amplitude values. We therefore provide the
ability to write out the Gaussian amplitudes for each channel as a
binary 32-bit Ô¨Çoating point value.

For rare events we also do not need to write out a representation
of the signal across the entire data span (as it may only occur for
a millisecond or so in a many hour observation). A compressed
binary data Ô¨Åle consists of:

‚Ä¢ Number of events (integer)

and then for each event:

‚Ä¢ Number of samples for this event (integer)
‚Ä¢ Number of frequency channels (integer)
‚Ä¢ Start time of event (32-bit Ô¨Çoat)
‚Ä¢ Values for each sample in this event (Nsamples x Nchannels

32-bit Ô¨Çoats)

We provide an example on how to build the binary Ô¨Åle us-
ing Python, which can be found in the tutorial of this software in
the BitBucket repository https://bitbucket.csiro.au/scm/
psrsoft/simulatesearch.git.

MNRAS 000, 1‚Äì12 (2022)

Simulating high-time resolution observations

11

APPENDIX B: INJECTING INTO QUANTISED DATA
STREAMS

We assume that the background noise (which has already been
quantised) represents a Gaussian distribution. The probability den-
sity function of the noise signal, N , is given as

ùëÉ(N ) =

ùëí‚àí (N‚àíùúá)
2ùúé2

2

.

1
‚àö

2ùúã

ùúé

(B1)

The noise level ùúé is described by the Radiometer Equation

ùúé =

ùëásys
ùê∫‚àöÔ∏ÅùëÅpùë°sampŒîùúà

,

(B2)

where ùê∫ is the telescope gain in units of K/Jy, ùëásys is the system
temperature, ùë°samp is the digital sampling time and Œîùúà is the receiver
bandwidth.

The cumulative distribution function of noise is given by

Œ¶(N ) =

(cid:20)

1
2

1 + erf

(cid:18) N ‚àí ùúá
‚àö
2
ùúé

(cid:19) (cid:21)

,

(B3)

For 1-bit case, there is only one threshold to change the digi-
tised signal, i.e., the mean ùúá. For a signal S injected to data samples,
we have the digitised values as follow

ùëã (S + N ) =

(cid:40)1
0

S + N ‚â• ùúá
S + N < ùúá

.

(B4)

The probability of four cases in digit changes can be obtained

as

ùëÉùëñ ùëó =

(cid:32) Œ¶( ùúá‚àíS)
0.5
0

1 ‚àí Œ¶( ùúá‚àíS)
1

0.5

(cid:33)

,

(B5)

where ùëñ and ùëó are 0 or 1.

For injection into 2-bit data we need to determine the 10 proba-
bilities. Here we present the probability for 2-bit case, the analogous
signal intensity can be digitised as 0, 1, 2, 3. The corresponding
thresholds are set as:

ùëã (S + N ) =

0
1
2
3

Ô£±Ô£¥Ô£¥Ô£¥Ô£¥Ô£¥Ô£≤
Ô£¥Ô£¥Ô£¥Ô£¥Ô£¥

Ô£≥

S + N < ùúá ‚àí ùëôùúé
ùúá ‚àí ùëôùúé ‚â§ S + N < ùúá
ùúá ‚â§ S + N < ùúá + ùëôùúé
S + N ‚â• ùúá + ùëôùúé

,

(B6)

where ùëô is the level setting number for digitisation. For 2-bit data, we
usually adopt ùëô = 0.9674 (Jenet & Anderson 1998; Kouwenhoven
& Vo√ªte 2001).

There are 16 cases for the digitisation by injected signal, which

can be described as the following 4√ó4 matrix

ùëÉùëñ ùëó =

ùëÉ00 ùëÉ01 ùëÉ02 ùëÉ03
0
ùëÉ11 ùëÉ12 ùëÉ13
0
0
ùëÉ22 ùëÉ23
0
0
0
ùëÉ33

(cid:169)
(cid:173)
(cid:173)
(cid:173)
(cid:171)

,

(cid:170)
(cid:174)
(cid:174)
(cid:174)
(cid:172)

(B7)

This paper has been typeset from a TEX/LATEX Ô¨Åle prepared by the author.

12

R. Luo et al.

where

ùëÉ00 =

ùëÉ01 =

ùëÉ02 =

ùëÉ03 =

ùëÉ11 =

ùëÉ12 =

ùëÉ13 =

ùëÉ22 =

ùëÉ23 =

ùëÉ33 =

Œ¶(ùúá ‚àí ùëôùúé ‚àí S)
Œ¶(ùúá ‚àí ùëôùúé)

,

Œ¶ [min(ùúá ‚àí S, ùúá ‚àí ùëôùúé)] ‚àí Œ¶(ùúá ‚àí ùëôùúé ‚àí S)
Œ¶(ùúá ‚àí ùëôùúé)
Œ¶ [min(ùúá + ùëôùúé ‚àí S, ùúá ‚àí ùëôùúé)] ‚àí Œ¶(ùúá ‚àí S)
Œ¶(ùúá ‚àí ùëôùúé)

,

,

Œ¶(ùúá ‚àí ùëôùúé) ‚àí Œ¶(ùúá + ùëôùúé ‚àí S)
Œ¶(ùúá ‚àí ùëôùúé)

,

Œ¶(ùúá ‚àí S) ‚àí Œ¶(ùúá ‚àí ùëôùúé)
0.5 ‚àí Œ¶(ùúá ‚àí ùëôùúé)

,

Œ¶ [min(ùúá + ùëôùúé ‚àí S, ùúá)] ‚àí Œ¶ [max(ùúá ‚àí ùëôùúé, ùúá ‚àí S)]
0.5 ‚àí Œ¶(ùúá ‚àí ùëôùúé)

,

(B8)

0.5 ‚àí Œ¶ [max(ùúá + ùëôùúé ‚àí S, ùúá ‚àí ùëôùúé)]
0.5 ‚àí Œ¶(ùúá ‚àí ùëôùúé)

,

Œ¶(ùúá + ùëôùúé ‚àí S) ‚àí 0.5
Œ¶(ùúá + ùëôùúé) ‚àí 0.5

,

Œ¶(ùúá + ùëôùúé) ‚àí Œ¶ [max(ùúá ‚àí ùëôùúé ‚àí S, ùúá)]
Œ¶(ùúá + ùëôùúé) ‚àí 0.5

,

1
1 ‚àí Œ¶(ùúá + ùëôùúé)

.

APPENDIX C: MAKING THE IMAGES IN THIS PAPER

To reproduce the Ô¨Ågures in this paper, we provide parameter Ô¨Åles
and the commands used. For Figure 1. We create a telescope data
Ô¨Åle, whose system has 96 frequency channels (pks_96chan.params):

name: System for a mock radio telescope
observer: rluo
f1: 1230
f2: 1518
nchan: 96
nsblk: 2048
t0: 0
t1: 10
tsamp: 256e-6
raj: 0
decj: 0
useAngle: 0
gain: 0.7
tsys: 25
nbits: 1
imjd: 58456
smjd: 36400

To make Figure 1 we required the parameters for the FRB (stored
in frb.params):

dmburst: 4.9 1400 1 -2 0.005 300 2

and ran the following commands to make Figure 1:

simulateSystemNoise -p pks_96chan.params -o noise.dat
simulateBurst -p pks_96chan.params -p frb.params -o frb.dat
createSearchFile -p pks_96chan.params -f noise.dat -f frb.dat -o frb.sf
pfits_plot -f frb.sf -s1 9 -s2 9

For the other ten Ô¨Ågures in this paper, we wrap the used parame-
ter Ô¨Åles and simulation commands into the tutorials of this software,
which can also be found in the repository https://bitbucket.
csiro.au/scm/psrsoft/simulatesearch.git

MNRAS 000, 1‚Äì12 (2022)

